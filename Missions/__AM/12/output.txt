// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export Powell ; export Davidov ; export Kurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; export westPathUsed , laserCounterDestroy , rocketBuilded , cratesAllow ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 92 0 0
// SetBName ( rueastdepot , ryutin ) ;
  19: LD_INT 4
  21: PPUSH
  22: LD_STRING ryutin
  24: PPUSH
  25: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  29: LD_INT 6
  31: PPUSH
  32: LD_STRING yegorov
  34: PPUSH
  35: CALL_OW 500
// CreateNature ;
  39: CALL 15455 0 0
// PrepareDifficulty ;
  43: CALL 12828 0 0
// PrepareVehicles ;
  47: CALL 1800 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
  51: LD_INT 4
  53: PPUSH
  54: LD_INT 0
  56: PPUSH
  57: LD_INT 1
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL 1370 0 4
// PrepareAmericanHeroes ;
  67: CALL 660 0 0
// PrepareRussianCommander ;
  71: CALL 3337 0 0
// PrepareWestBase ;
  75: CALL 4062 0 0
// PrepareEastBase ;
  79: CALL 3416 0 0
// PrepareOtherRussians ;
  83: CALL 4288 0 0
// Action ;
  87: CALL 5973 0 0
// end ;
  91: END
// function Init ; begin
  92: LD_INT 0
  94: PPUSH
// RuScientists := [ ] ;
  95: LD_ADDR_EXP 27
  99: PUSH
 100: EMPTY
 101: ST_TO_ADDR
// sciCounter := 0 ;
 102: LD_ADDR_EXP 28
 106: PUSH
 107: LD_INT 0
 109: ST_TO_ADDR
// ruDestroyedBuildings := [ ] ;
 110: LD_ADDR_EXP 31
 114: PUSH
 115: EMPTY
 116: ST_TO_ADDR
// russianTanks := [ ] ;
 117: LD_ADDR_EXP 32
 121: PUSH
 122: EMPTY
 123: ST_TO_ADDR
// russianTimeLapsers := [ ] ;
 124: LD_ADDR_EXP 33
 128: PUSH
 129: EMPTY
 130: ST_TO_ADDR
// arabianMines := [ ] ;
 131: LD_ADDR_EXP 37
 135: PUSH
 136: EMPTY
 137: ST_TO_ADDR
// kurtStatus := LoadVariable ( 06_KurtStatus_1 , 0 ) ;
 138: LD_ADDR_EXP 19
 142: PUSH
 143: LD_STRING 06_KurtStatus_1
 145: PPUSH
 146: LD_INT 0
 148: PPUSH
 149: CALL_OW 30
 153: ST_TO_ADDR
// secondPass := 0 ;
 154: LD_ADDR_EXP 20
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// teleportExplored := 0 ;
 162: LD_ADDR_EXP 26
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// attackTactic := 0 ;
 170: LD_ADDR_EXP 36
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// tpCounter := 0 ;
 178: LD_ADDR_EXP 22
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// askSiberite := 0 ;
 186: LD_ADDR_EXP 25
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// warWithLegion := 0 ;
 194: LD_ADDR_EXP 23
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// fakeInfo := 0 ;
 202: LD_ADDR_EXP 24
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// cratesSpawned := 0 ;
 210: LD_ADDR_EXP 38
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// ruAI := 0 ;
 218: LD_ADDR_EXP 34
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// ruEscape := 0 ;
 226: LD_ADDR_EXP 35
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// eventVar1 := 0 ;
 234: LD_ADDR_EXP 40
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// mission_prefix := 12_ ;
 242: LD_ADDR_EXP 39
 246: PUSH
 247: LD_STRING 12_
 249: ST_TO_ADDR
// debugMode := 0 ;
 250: LD_ADDR_EXP 41
 254: PUSH
 255: LD_INT 0
 257: ST_TO_ADDR
// westPathUsed := false ;
 258: LD_ADDR_EXP 42
 262: PUSH
 263: LD_INT 0
 265: ST_TO_ADDR
// laserCounterDestroy := 0 ;
 266: LD_ADDR_EXP 43
 270: PUSH
 271: LD_INT 0
 273: ST_TO_ADDR
// rocketBuilded := false ;
 274: LD_ADDR_EXP 44
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// cratesAllow := false ;
 282: LD_ADDR_EXP 45
 286: PUSH
 287: LD_INT 0
 289: ST_TO_ADDR
// end ;
 290: LD_VAR 0 1
 294: RET
// every 0 0$1 trigger debugMode do var i ;
 295: LD_EXP 41
 299: IFFALSE 605
 301: GO 303
 303: DISABLE
 304: LD_INT 0
 306: PPUSH
// begin enable ;
 307: ENABLE
// FogOff ( true ) ;
 308: LD_INT 1
 310: PPUSH
 311: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 315: LD_ADDR_VAR 0 1
 319: PUSH
 320: LD_INT 22
 322: PUSH
 323: LD_INT 1
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: PUSH
 330: LD_INT 21
 332: PUSH
 333: LD_INT 1
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: PPUSH
 344: CALL_OW 69
 348: PUSH
 349: FOR_IN
 350: IFFALSE 366
// SetLives ( i , 1000 ) ;
 352: LD_VAR 0 1
 356: PPUSH
 357: LD_INT 1000
 359: PPUSH
 360: CALL_OW 234
 364: GO 349
 366: POP
 367: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 368: LD_ADDR_VAR 0 1
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 1
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 2
 385: PUSH
 386: LD_INT 30
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: PUSH
 396: LD_INT 30
 398: PUSH
 399: LD_INT 1
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: LIST
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PPUSH
 415: CALL_OW 69
 419: PUSH
 420: FOR_IN
 421: IFFALSE 445
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 423: LD_VAR 0 1
 427: PPUSH
 428: CALL_OW 274
 432: PPUSH
 433: LD_INT 1
 435: PPUSH
 436: LD_INT 9999
 438: PPUSH
 439: CALL_OW 277
 443: GO 420
 445: POP
 446: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 447: LD_ADDR_VAR 0 1
 451: PUSH
 452: LD_INT 22
 454: PUSH
 455: LD_INT 1
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: PUSH
 462: LD_INT 2
 464: PUSH
 465: LD_INT 30
 467: PUSH
 468: LD_INT 0
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PUSH
 475: LD_INT 30
 477: PUSH
 478: LD_INT 1
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PPUSH
 494: CALL_OW 69
 498: PUSH
 499: FOR_IN
 500: IFFALSE 524
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 502: LD_VAR 0 1
 506: PPUSH
 507: CALL_OW 274
 511: PPUSH
 512: LD_INT 2
 514: PPUSH
 515: LD_INT 9999
 517: PPUSH
 518: CALL_OW 277
 522: GO 499
 524: POP
 525: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 526: LD_ADDR_VAR 0 1
 530: PUSH
 531: LD_INT 22
 533: PUSH
 534: LD_INT 1
 536: PUSH
 537: EMPTY
 538: LIST
 539: LIST
 540: PUSH
 541: LD_INT 2
 543: PUSH
 544: LD_INT 30
 546: PUSH
 547: LD_INT 0
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: LD_INT 30
 556: PUSH
 557: LD_INT 1
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: PUSH
 564: EMPTY
 565: LIST
 566: LIST
 567: LIST
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PPUSH
 573: CALL_OW 69
 577: PUSH
 578: FOR_IN
 579: IFFALSE 603
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 581: LD_VAR 0 1
 585: PPUSH
 586: CALL_OW 274
 590: PPUSH
 591: LD_INT 3
 593: PPUSH
 594: LD_INT 9999
 596: PPUSH
 597: CALL_OW 277
 601: GO 578
 603: POP
 604: POP
// end ;
 605: PPOPN 1
 607: END
// every 0 0$1 trigger FilterUnitsInArea ( westPathArea , [ f_side , 1 ] ) do
 608: LD_INT 24
 610: PPUSH
 611: LD_INT 22
 613: PUSH
 614: LD_INT 1
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: PPUSH
 621: CALL_OW 70
 625: IFFALSE 638
 627: GO 629
 629: DISABLE
// westPathUsed := true ;
 630: LD_ADDR_EXP 42
 634: PUSH
 635: LD_INT 1
 637: ST_TO_ADDR
 638: END
// every 0 0$1 trigger laserCounterDestroy >= 3 do
 639: LD_EXP 43
 643: PUSH
 644: LD_INT 3
 646: GREATEREQUAL
 647: IFFALSE 659
 649: GO 651
 651: DISABLE
// SetAchievement ( ACH_LASER ) ; end_of_file
 652: LD_STRING ACH_LASER
 654: PPUSH
 655: CALL_OW 543
 659: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 660: LD_INT 0
 662: PPUSH
 663: PPUSH
 664: PPUSH
// uc_side := 1 ;
 665: LD_ADDR_OWVAR 20
 669: PUSH
 670: LD_INT 1
 672: ST_TO_ADDR
// others11 := CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 673: LD_ADDR_EXP 14
 677: PUSH
 678: LD_STRING 11c_others
 680: PPUSH
 681: CALL_OW 31
 685: PUSH
 686: LD_STRING 11_others
 688: PPUSH
 689: CALL_OW 31
 693: UNION
 694: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true , 11_ ) ;
 695: LD_ADDR_EXP 1
 699: PUSH
 700: LD_STRING JMM
 702: PPUSH
 703: LD_INT 1
 705: PPUSH
 706: LD_STRING 11_
 708: PPUSH
 709: CALL 40657 0 3
 713: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 714: LD_EXP 1
 718: PPUSH
 719: LD_INT 1
 721: PPUSH
 722: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 726: LD_EXP 1
 730: PPUSH
 731: LD_INT 22
 733: PUSH
 734: LD_INT 1
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: PUSH
 741: LD_INT 21
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: PUSH
 751: LD_INT 58
 753: PUSH
 754: EMPTY
 755: LIST
 756: PUSH
 757: EMPTY
 758: LIST
 759: LIST
 760: LIST
 761: PPUSH
 762: CALL_OW 69
 766: PUSH
 767: LD_INT 1
 769: ARRAY
 770: PPUSH
 771: CALL_OW 52
// if TestCharacters ( 11_Lisa ) then
 775: LD_STRING 11_Lisa
 777: PPUSH
 778: CALL_OW 28
 782: IFFALSE 832
// begin Lisa := PrepareUnit ( Lisa , true , 11_ ) ;
 784: LD_ADDR_EXP 2
 788: PUSH
 789: LD_STRING Lisa
 791: PPUSH
 792: LD_INT 1
 794: PPUSH
 795: LD_STRING 11_
 797: PPUSH
 798: CALL 40657 0 3
 802: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 803: LD_EXP 2
 807: PPUSH
 808: LD_INT 1
 810: PPUSH
 811: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 815: LD_EXP 2
 819: PPUSH
 820: LD_INT 4
 822: PPUSH
 823: LD_INT 0
 825: PPUSH
 826: CALL_OW 49
// end else
 830: GO 848
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 832: LD_INT 4
 834: PPUSH
 835: LD_INT 0
 837: PPUSH
 838: LD_INT 1
 840: PPUSH
 841: LD_INT 0
 843: PPUSH
 844: CALL 1370 0 4
// if TestCharacters ( 11_Donaldson ) then
 848: LD_STRING 11_Donaldson
 850: PPUSH
 851: CALL_OW 28
 855: IFFALSE 905
// begin Donaldson := PrepareUnit ( Donaldson , true , 11_ ) ;
 857: LD_ADDR_EXP 3
 861: PUSH
 862: LD_STRING Donaldson
 864: PPUSH
 865: LD_INT 1
 867: PPUSH
 868: LD_STRING 11_
 870: PPUSH
 871: CALL 40657 0 3
 875: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 876: LD_EXP 3
 880: PPUSH
 881: LD_INT 1
 883: PPUSH
 884: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 888: LD_EXP 3
 892: PPUSH
 893: LD_INT 4
 895: PPUSH
 896: LD_INT 0
 898: PPUSH
 899: CALL_OW 49
// end else
 903: GO 921
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 905: LD_INT 4
 907: PPUSH
 908: LD_INT 0
 910: PPUSH
 911: LD_INT 1
 913: PPUSH
 914: LD_INT 0
 916: PPUSH
 917: CALL 1370 0 4
// if TestCharacters ( 11_Cyrus ) then
 921: LD_STRING 11_Cyrus
 923: PPUSH
 924: CALL_OW 28
 928: IFFALSE 978
// begin Cyrus := PrepareUnit ( Cyrus , true , 11_ ) ;
 930: LD_ADDR_EXP 5
 934: PUSH
 935: LD_STRING Cyrus
 937: PPUSH
 938: LD_INT 1
 940: PPUSH
 941: LD_STRING 11_
 943: PPUSH
 944: CALL 40657 0 3
 948: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 949: LD_EXP 5
 953: PPUSH
 954: LD_INT 1
 956: PPUSH
 957: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 961: LD_EXP 5
 965: PPUSH
 966: LD_INT 4
 968: PPUSH
 969: LD_INT 0
 971: PPUSH
 972: CALL_OW 49
// end else
 976: GO 994
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 978: LD_INT 4
 980: PPUSH
 981: LD_INT 0
 983: PPUSH
 984: LD_INT 1
 986: PPUSH
 987: LD_INT 0
 989: PPUSH
 990: CALL 1370 0 4
// if TestCharacters ( 11_Denis ) then
 994: LD_STRING 11_Denis
 996: PPUSH
 997: CALL_OW 28
1001: IFFALSE 1051
// begin Denis := PrepareUnit ( Denis , true , 11_ ) ;
1003: LD_ADDR_EXP 6
1007: PUSH
1008: LD_STRING Denis
1010: PPUSH
1011: LD_INT 1
1013: PPUSH
1014: LD_STRING 11_
1016: PPUSH
1017: CALL 40657 0 3
1021: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1022: LD_EXP 6
1026: PPUSH
1027: LD_INT 4
1029: PPUSH
1030: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1034: LD_EXP 6
1038: PPUSH
1039: LD_INT 4
1041: PPUSH
1042: LD_INT 0
1044: PPUSH
1045: CALL_OW 49
// end else
1049: GO 1067
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1051: LD_INT 4
1053: PPUSH
1054: LD_INT 0
1056: PPUSH
1057: LD_INT 1
1059: PPUSH
1060: LD_INT 0
1062: PPUSH
1063: CALL 1370 0 4
// if TestCharacters ( 11_Frank ) then
1067: LD_STRING 11_Frank
1069: PPUSH
1070: CALL_OW 28
1074: IFFALSE 1124
// begin Frank := PrepareUnit ( Frank , true , 11_ ) ;
1076: LD_ADDR_EXP 12
1080: PUSH
1081: LD_STRING Frank
1083: PPUSH
1084: LD_INT 1
1086: PPUSH
1087: LD_STRING 11_
1089: PPUSH
1090: CALL 40657 0 3
1094: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1095: LD_EXP 12
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1107: LD_EXP 12
1111: PPUSH
1112: LD_INT 4
1114: PPUSH
1115: LD_INT 0
1117: PPUSH
1118: CALL_OW 49
// end else
1122: GO 1140
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1124: LD_INT 4
1126: PPUSH
1127: LD_INT 0
1129: PPUSH
1130: LD_INT 1
1132: PPUSH
1133: LD_INT 0
1135: PPUSH
1136: CALL 1370 0 4
// if TestCharacters ( 11_Cornell ) then
1140: LD_STRING 11_Cornell
1142: PPUSH
1143: CALL_OW 28
1147: IFFALSE 1197
// begin Cornel := PrepareUnit ( Cornell , true , 11_ ) ;
1149: LD_ADDR_EXP 10
1153: PUSH
1154: LD_STRING Cornell
1156: PPUSH
1157: LD_INT 1
1159: PPUSH
1160: LD_STRING 11_
1162: PPUSH
1163: CALL 40657 0 3
1167: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1168: LD_EXP 10
1172: PPUSH
1173: LD_INT 1
1175: PPUSH
1176: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1180: LD_EXP 10
1184: PPUSH
1185: LD_INT 4
1187: PPUSH
1188: LD_INT 0
1190: PPUSH
1191: CALL_OW 49
// end else
1195: GO 1213
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1197: LD_INT 4
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: LD_INT 1
1205: PPUSH
1206: LD_INT 0
1208: PPUSH
1209: CALL 1370 0 4
// tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1213: LD_ADDR_VAR 0 2
1217: PUSH
1218: LD_EXP 14
1222: PPUSH
1223: LD_INT 26
1225: PUSH
1226: LD_INT 1
1228: PUSH
1229: EMPTY
1230: LIST
1231: LIST
1232: PPUSH
1233: CALL_OW 72
1237: ST_TO_ADDR
// if not tmp then
1238: LD_VAR 0 2
1242: NOT
1243: IFFALSE 1272
// begin PrepareSoldier ( sex_male , 8 ) ;
1245: LD_INT 1
1247: PPUSH
1248: LD_INT 8
1250: PPUSH
1251: CALL_OW 381
// PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1255: CALL_OW 44
1259: PPUSH
1260: LD_INT 4
1262: PPUSH
1263: LD_INT 0
1265: PPUSH
1266: CALL_OW 49
// end else
1270: GO 1346
// begin if GetClass ( tmp [ 1 ] ) <> class_soldier then
1272: LD_VAR 0 2
1276: PUSH
1277: LD_INT 1
1279: ARRAY
1280: PPUSH
1281: CALL_OW 257
1285: PUSH
1286: LD_INT 1
1288: NONEQUAL
1289: IFFALSE 1307
// SetClass ( tmp [ 1 ] , class_soldier ) ;
1291: LD_VAR 0 2
1295: PUSH
1296: LD_INT 1
1298: ARRAY
1299: PPUSH
1300: LD_INT 1
1302: PPUSH
1303: CALL_OW 336
// PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1307: LD_VAR 0 2
1311: PUSH
1312: LD_INT 1
1314: ARRAY
1315: PPUSH
1316: LD_INT 4
1318: PPUSH
1319: LD_INT 0
1321: PPUSH
1322: CALL_OW 49
// others11 := others11 diff tmp [ 1 ] ;
1326: LD_ADDR_EXP 14
1330: PUSH
1331: LD_EXP 14
1335: PUSH
1336: LD_VAR 0 2
1340: PUSH
1341: LD_INT 1
1343: ARRAY
1344: DIFF
1345: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ,  ) ;
1346: LD_ADDR_EXP 15
1350: PUSH
1351: LD_STRING Powell
1353: PPUSH
1354: LD_INT 0
1356: PPUSH
1357: LD_STRING 
1359: PPUSH
1360: CALL 40657 0 3
1364: ST_TO_ADDR
// end ;
1365: LD_VAR 0 1
1369: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1370: LD_INT 0
1372: PPUSH
1373: PPUSH
1374: PPUSH
1375: PPUSH
1376: PPUSH
// if mech = 1 then
1377: LD_VAR 0 4
1381: PUSH
1382: LD_INT 1
1384: EQUAL
1385: IFFALSE 1630
// begin if others11 then
1387: LD_EXP 14
1391: IFFALSE 1570
// begin for i := 1 to others11 - 1 do
1393: LD_ADDR_VAR 0 6
1397: PUSH
1398: DOUBLE
1399: LD_INT 1
1401: DEC
1402: ST_TO_ADDR
1403: LD_EXP 14
1407: PUSH
1408: LD_INT 1
1410: MINUS
1411: PUSH
1412: FOR_TO
1413: IFFALSE 1495
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1415: LD_EXP 14
1419: PUSH
1420: LD_VAR 0 6
1424: ARRAY
1425: PPUSH
1426: LD_INT 3
1428: PPUSH
1429: CALL_OW 259
1433: PUSH
1434: LD_EXP 14
1438: PUSH
1439: LD_VAR 0 6
1443: PUSH
1444: LD_INT 1
1446: PLUS
1447: ARRAY
1448: PPUSH
1449: LD_INT 3
1451: PPUSH
1452: CALL_OW 259
1456: LESS
1457: IFFALSE 1493
// begin mecha = others11 [ i + 1 ] ;
1459: LD_ADDR_VAR 0 9
1463: PUSH
1464: LD_EXP 14
1468: PUSH
1469: LD_VAR 0 6
1473: PUSH
1474: LD_INT 1
1476: PLUS
1477: ARRAY
1478: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1479: LD_VAR 0 9
1483: PPUSH
1484: LD_INT 3
1486: PPUSH
1487: CALL_OW 336
// break ;
1491: GO 1495
// end ; end ;
1493: GO 1412
1495: POP
1496: POP
// if spawnMode = 1 then
1497: LD_VAR 0 3
1501: PUSH
1502: LD_INT 1
1504: EQUAL
1505: IFFALSE 1538
// begin SetClass ( mecha , class_soldier ) ;
1507: LD_VAR 0 9
1511: PPUSH
1512: LD_INT 1
1514: PPUSH
1515: CALL_OW 336
// PlaceUnitArea ( mecha , area , false ) ;
1519: LD_VAR 0 9
1523: PPUSH
1524: LD_VAR 0 1
1528: PPUSH
1529: LD_INT 0
1531: PPUSH
1532: CALL_OW 49
// end else
1536: GO 1552
// PlaceHumanInUnit ( mecha , veh ) ;
1538: LD_VAR 0 9
1542: PPUSH
1543: LD_VAR 0 2
1547: PPUSH
1548: CALL_OW 52
// others11 := others11 diff mecha ;
1552: LD_ADDR_EXP 14
1556: PUSH
1557: LD_EXP 14
1561: PUSH
1562: LD_VAR 0 9
1566: DIFF
1567: ST_TO_ADDR
// end else
1568: GO 1628
// begin hc_name :=  ;
1570: LD_ADDR_OWVAR 26
1574: PUSH
1575: LD_STRING 
1577: ST_TO_ADDR
// hc_gallery :=  ;
1578: LD_ADDR_OWVAR 33
1582: PUSH
1583: LD_STRING 
1585: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1586: LD_INT 0
1588: PPUSH
1589: LD_INT 7
1591: PPUSH
1592: LD_INT 9
1594: PPUSH
1595: CALL_OW 12
1599: PPUSH
1600: CALL_OW 383
// un := CreateHuman ;
1604: LD_ADDR_VAR 0 7
1608: PUSH
1609: CALL_OW 44
1613: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1614: LD_VAR 0 7
1618: PPUSH
1619: LD_VAR 0 2
1623: PPUSH
1624: CALL_OW 52
// end ; end else
1628: GO 1795
// begin if others11 then
1630: LD_EXP 14
1634: IFFALSE 1707
// begin if spawnMode = 1 then
1636: LD_VAR 0 3
1640: PUSH
1641: LD_INT 1
1643: EQUAL
1644: IFFALSE 1669
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1646: LD_EXP 14
1650: PUSH
1651: LD_INT 1
1653: ARRAY
1654: PPUSH
1655: LD_VAR 0 1
1659: PPUSH
1660: LD_INT 0
1662: PPUSH
1663: CALL_OW 49
1667: GO 1687
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1669: LD_EXP 14
1673: PUSH
1674: LD_INT 1
1676: ARRAY
1677: PPUSH
1678: LD_VAR 0 2
1682: PPUSH
1683: CALL_OW 52
// others11 := Delete ( others11 , 1 ) ;
1687: LD_ADDR_EXP 14
1691: PUSH
1692: LD_EXP 14
1696: PPUSH
1697: LD_INT 1
1699: PPUSH
1700: CALL_OW 3
1704: ST_TO_ADDR
// end else
1705: GO 1795
// begin hc_name :=  ;
1707: LD_ADDR_OWVAR 26
1711: PUSH
1712: LD_STRING 
1714: ST_TO_ADDR
// hc_gallery :=  ;
1715: LD_ADDR_OWVAR 33
1719: PUSH
1720: LD_STRING 
1722: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1723: LD_INT 0
1725: PPUSH
1726: LD_INT 1
1728: PUSH
1729: LD_INT 2
1731: PUSH
1732: LD_INT 3
1734: PUSH
1735: LD_INT 4
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: PUSH
1744: LD_INT 1
1746: PPUSH
1747: LD_INT 4
1749: PPUSH
1750: CALL_OW 12
1754: ARRAY
1755: PPUSH
1756: LD_INT 7
1758: PPUSH
1759: LD_INT 9
1761: PPUSH
1762: CALL_OW 12
1766: PPUSH
1767: CALL_OW 380
// un := CreateHuman ;
1771: LD_ADDR_VAR 0 7
1775: PUSH
1776: CALL_OW 44
1780: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1781: LD_VAR 0 7
1785: PPUSH
1786: LD_VAR 0 2
1790: PPUSH
1791: CALL_OW 52
// end ; end ; end ;
1795: LD_VAR 0 5
1799: RET
// export function PrepareVehicles ; var veh ; begin
1800: LD_INT 0
1802: PPUSH
1803: PPUSH
// uc_side := 1 ;
1804: LD_ADDR_OWVAR 20
1808: PUSH
1809: LD_INT 1
1811: ST_TO_ADDR
// uc_nation := 1 ;
1812: LD_ADDR_OWVAR 21
1816: PUSH
1817: LD_INT 1
1819: ST_TO_ADDR
// vc_chassis := us_medium_tracked ;
1820: LD_ADDR_OWVAR 37
1824: PUSH
1825: LD_INT 3
1827: ST_TO_ADDR
// vc_engine := engine_siberite ;
1828: LD_ADDR_OWVAR 39
1832: PUSH
1833: LD_INT 3
1835: ST_TO_ADDR
// vc_control := control_computer ;
1836: LD_ADDR_OWVAR 38
1840: PUSH
1841: LD_INT 3
1843: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1844: LD_ADDR_OWVAR 40
1848: PUSH
1849: LD_INT 4
1851: ST_TO_ADDR
// veh := CreateVehicle ;
1852: LD_ADDR_VAR 0 2
1856: PUSH
1857: CALL_OW 45
1861: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
1862: LD_VAR 0 2
1866: PPUSH
1867: LD_INT 4
1869: PPUSH
1870: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1874: LD_VAR 0 2
1878: PPUSH
1879: LD_INT 4
1881: PPUSH
1882: LD_INT 0
1884: PPUSH
1885: CALL_OW 49
// vc_weapon := us_double_gun ;
1889: LD_ADDR_OWVAR 40
1893: PUSH
1894: LD_INT 5
1896: ST_TO_ADDR
// vc_control := control_manual ;
1897: LD_ADDR_OWVAR 38
1901: PUSH
1902: LD_INT 1
1904: ST_TO_ADDR
// veh := CreateVehicle ;
1905: LD_ADDR_VAR 0 2
1909: PUSH
1910: CALL_OW 45
1914: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
1915: LD_VAR 0 2
1919: PPUSH
1920: LD_INT 4
1922: PPUSH
1923: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1927: LD_VAR 0 2
1931: PPUSH
1932: LD_INT 4
1934: PPUSH
1935: LD_INT 0
1937: PPUSH
1938: CALL_OW 49
// vc_weapon := us_radar ;
1942: LD_ADDR_OWVAR 40
1946: PUSH
1947: LD_INT 11
1949: ST_TO_ADDR
// vc_control := control_computer ;
1950: LD_ADDR_OWVAR 38
1954: PUSH
1955: LD_INT 3
1957: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1958: LD_ADDR_OWVAR 37
1962: PUSH
1963: LD_INT 2
1965: ST_TO_ADDR
// veh := CreateVehicle ;
1966: LD_ADDR_VAR 0 2
1970: PUSH
1971: CALL_OW 45
1975: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
1976: LD_VAR 0 2
1980: PPUSH
1981: LD_INT 4
1983: PPUSH
1984: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1988: LD_VAR 0 2
1992: PPUSH
1993: LD_INT 4
1995: PPUSH
1996: LD_INT 0
1998: PPUSH
1999: CALL_OW 49
// vc_weapon := us_double_gun ;
2003: LD_ADDR_OWVAR 40
2007: PUSH
2008: LD_INT 5
2010: ST_TO_ADDR
// veh := CreateVehicle ;
2011: LD_ADDR_VAR 0 2
2015: PUSH
2016: CALL_OW 45
2020: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2021: LD_VAR 0 2
2025: PPUSH
2026: LD_INT 4
2028: PPUSH
2029: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2033: LD_VAR 0 2
2037: PPUSH
2038: LD_INT 4
2040: PPUSH
2041: LD_INT 0
2043: PPUSH
2044: CALL_OW 49
// end ;
2048: LD_VAR 0 1
2052: RET
// export function PowellSupport1 ; var veh , un ; begin
2053: LD_INT 0
2055: PPUSH
2056: PPUSH
2057: PPUSH
// uc_side := 1 ;
2058: LD_ADDR_OWVAR 20
2062: PUSH
2063: LD_INT 1
2065: ST_TO_ADDR
// uc_nation := 1 ;
2066: LD_ADDR_OWVAR 21
2070: PUSH
2071: LD_INT 1
2073: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) then
2074: LD_STRING 11_Brown
2076: PPUSH
2077: CALL_OW 28
2081: IFFALSE 2131
// begin Brown := PrepareUnit ( Brown , true , 11_ ) ;
2083: LD_ADDR_EXP 7
2087: PUSH
2088: LD_STRING Brown
2090: PPUSH
2091: LD_INT 1
2093: PPUSH
2094: LD_STRING 11_
2096: PPUSH
2097: CALL 40657 0 3
2101: ST_TO_ADDR
// SetClass ( Brown , class_engineer ) ;
2102: LD_EXP 7
2106: PPUSH
2107: LD_INT 2
2109: PPUSH
2110: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
2114: LD_EXP 7
2118: PPUSH
2119: LD_INT 4
2121: PPUSH
2122: LD_INT 0
2124: PPUSH
2125: CALL_OW 49
// end else
2129: GO 2147
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2131: LD_INT 4
2133: PPUSH
2134: LD_INT 0
2136: PPUSH
2137: LD_INT 1
2139: PPUSH
2140: LD_INT 0
2142: PPUSH
2143: CALL 1370 0 4
// if TestCharacters ( 11_Gary ) then
2147: LD_STRING 11_Gary
2149: PPUSH
2150: CALL_OW 28
2154: IFFALSE 2204
// begin Gary := PrepareUnit ( Gary , true , 11_ ) ;
2156: LD_ADDR_EXP 11
2160: PUSH
2161: LD_STRING Gary
2163: PPUSH
2164: LD_INT 1
2166: PPUSH
2167: LD_STRING 11_
2169: PPUSH
2170: CALL 40657 0 3
2174: ST_TO_ADDR
// SetClass ( Gary , class_engineer ) ;
2175: LD_EXP 11
2179: PPUSH
2180: LD_INT 2
2182: PPUSH
2183: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2187: LD_EXP 11
2191: PPUSH
2192: LD_INT 4
2194: PPUSH
2195: LD_INT 0
2197: PPUSH
2198: CALL_OW 49
// end else
2202: GO 2220
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2204: LD_INT 4
2206: PPUSH
2207: LD_INT 0
2209: PPUSH
2210: LD_INT 1
2212: PPUSH
2213: LD_INT 0
2215: PPUSH
2216: CALL 1370 0 4
// vc_chassis := us_medium_tracked ;
2220: LD_ADDR_OWVAR 37
2224: PUSH
2225: LD_INT 3
2227: ST_TO_ADDR
// vc_engine := engine_siberite ;
2228: LD_ADDR_OWVAR 39
2232: PUSH
2233: LD_INT 3
2235: ST_TO_ADDR
// vc_control := control_manual ;
2236: LD_ADDR_OWVAR 38
2240: PUSH
2241: LD_INT 1
2243: ST_TO_ADDR
// vc_weapon := us_crane ;
2244: LD_ADDR_OWVAR 40
2248: PUSH
2249: LD_INT 13
2251: ST_TO_ADDR
// veh := CreateVehicle ;
2252: LD_ADDR_VAR 0 2
2256: PUSH
2257: CALL_OW 45
2261: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2262: LD_VAR 0 2
2266: PPUSH
2267: LD_INT 4
2269: PPUSH
2270: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2274: LD_VAR 0 2
2278: PPUSH
2279: LD_INT 4
2281: PPUSH
2282: LD_INT 0
2284: PPUSH
2285: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2289: LD_INT 4
2291: PPUSH
2292: LD_VAR 0 2
2296: PPUSH
2297: LD_INT 2
2299: PPUSH
2300: LD_INT 1
2302: PPUSH
2303: CALL 1370 0 4
// vc_weapon := us_laser ;
2307: LD_ADDR_OWVAR 40
2311: PUSH
2312: LD_INT 9
2314: ST_TO_ADDR
// veh := CreateVehicle ;
2315: LD_ADDR_VAR 0 2
2319: PUSH
2320: CALL_OW 45
2324: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2325: LD_VAR 0 2
2329: PPUSH
2330: LD_INT 4
2332: PPUSH
2333: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2337: LD_VAR 0 2
2341: PPUSH
2342: LD_INT 4
2344: PPUSH
2345: LD_INT 0
2347: PPUSH
2348: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2352: LD_INT 4
2354: PPUSH
2355: LD_VAR 0 2
2359: PPUSH
2360: LD_INT 2
2362: PPUSH
2363: LD_INT 1
2365: PPUSH
2366: CALL 1370 0 4
// vc_control := control_computer ;
2370: LD_ADDR_OWVAR 38
2374: PUSH
2375: LD_INT 3
2377: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2378: LD_ADDR_OWVAR 40
2382: PUSH
2383: LD_INT 12
2385: ST_TO_ADDR
// veh := CreateVehicle ;
2386: LD_ADDR_VAR 0 2
2390: PUSH
2391: CALL_OW 45
2395: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2396: LD_VAR 0 2
2400: PPUSH
2401: LD_INT 17
2403: PPUSH
2404: CALL_OW 109
// SetDir ( veh , 4 ) ;
2408: LD_VAR 0 2
2412: PPUSH
2413: LD_INT 4
2415: PPUSH
2416: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2420: LD_VAR 0 2
2424: PPUSH
2425: LD_INT 4
2427: PPUSH
2428: LD_INT 0
2430: PPUSH
2431: CALL_OW 49
// AddCargo ( veh , mat_siberit , 100 ) ;
2435: LD_VAR 0 2
2439: PPUSH
2440: LD_INT 3
2442: PPUSH
2443: LD_INT 100
2445: PPUSH
2446: CALL_OW 291
// veh := CreateVehicle ;
2450: LD_ADDR_VAR 0 2
2454: PUSH
2455: CALL_OW 45
2459: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2460: LD_VAR 0 2
2464: PPUSH
2465: LD_INT 17
2467: PPUSH
2468: CALL_OW 109
// SetDir ( veh , 4 ) ;
2472: LD_VAR 0 2
2476: PPUSH
2477: LD_INT 4
2479: PPUSH
2480: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2484: LD_VAR 0 2
2488: PPUSH
2489: LD_INT 4
2491: PPUSH
2492: LD_INT 0
2494: PPUSH
2495: CALL_OW 49
// AddCargo ( veh , mat_siberit , 20 ) ;
2499: LD_VAR 0 2
2503: PPUSH
2504: LD_INT 3
2506: PPUSH
2507: LD_INT 20
2509: PPUSH
2510: CALL_OW 291
// AddCargo ( veh , mat_cans , 80 ) ;
2514: LD_VAR 0 2
2518: PPUSH
2519: LD_INT 1
2521: PPUSH
2522: LD_INT 80
2524: PPUSH
2525: CALL_OW 291
// end ;
2529: LD_VAR 0 1
2533: RET
// export function PowellSupport2 ; var veh , un ; begin
2534: LD_INT 0
2536: PPUSH
2537: PPUSH
2538: PPUSH
// uc_side := 1 ;
2539: LD_ADDR_OWVAR 20
2543: PUSH
2544: LD_INT 1
2546: ST_TO_ADDR
// uc_nation := 1 ;
2547: LD_ADDR_OWVAR 21
2551: PUSH
2552: LD_INT 1
2554: ST_TO_ADDR
// vc_engine := engine_siberite ;
2555: LD_ADDR_OWVAR 39
2559: PUSH
2560: LD_INT 3
2562: ST_TO_ADDR
// vc_control := control_computer ;
2563: LD_ADDR_OWVAR 38
2567: PUSH
2568: LD_INT 3
2570: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2571: LD_ADDR_OWVAR 37
2575: PUSH
2576: LD_INT 2
2578: ST_TO_ADDR
// vc_weapon := us_double_gun ;
2579: LD_ADDR_OWVAR 40
2583: PUSH
2584: LD_INT 5
2586: ST_TO_ADDR
// veh := CreateVehicle ;
2587: LD_ADDR_VAR 0 2
2591: PUSH
2592: CALL_OW 45
2596: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2597: LD_VAR 0 2
2601: PPUSH
2602: LD_INT 4
2604: PPUSH
2605: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2609: LD_VAR 0 2
2613: PPUSH
2614: LD_INT 4
2616: PPUSH
2617: LD_INT 0
2619: PPUSH
2620: CALL_OW 49
// vc_chassis := us_heavy_tracked ;
2624: LD_ADDR_OWVAR 37
2628: PUSH
2629: LD_INT 4
2631: ST_TO_ADDR
// vc_engine := engine_siberite ;
2632: LD_ADDR_OWVAR 39
2636: PUSH
2637: LD_INT 3
2639: ST_TO_ADDR
// vc_control := control_manual ;
2640: LD_ADDR_OWVAR 38
2644: PUSH
2645: LD_INT 1
2647: ST_TO_ADDR
// vc_weapon := us_heavy_gun ;
2648: LD_ADDR_OWVAR 40
2652: PUSH
2653: LD_INT 6
2655: ST_TO_ADDR
// veh := CreateVehicle ;
2656: LD_ADDR_VAR 0 2
2660: PUSH
2661: CALL_OW 45
2665: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2666: LD_VAR 0 2
2670: PPUSH
2671: LD_INT 4
2673: PPUSH
2674: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2678: LD_VAR 0 2
2682: PPUSH
2683: LD_INT 4
2685: PPUSH
2686: LD_INT 0
2688: PPUSH
2689: CALL_OW 49
// if TestCharacters ( 11_Bobby ) then
2693: LD_STRING 11_Bobby
2695: PPUSH
2696: CALL_OW 28
2700: IFFALSE 2749
// begin Bobby := PrepareUnit ( Bobby , true , 11_ ) ;
2702: LD_ADDR_EXP 4
2706: PUSH
2707: LD_STRING Bobby
2709: PPUSH
2710: LD_INT 1
2712: PPUSH
2713: LD_STRING 11_
2715: PPUSH
2716: CALL 40657 0 3
2720: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2721: LD_EXP 4
2725: PPUSH
2726: LD_INT 3
2728: PPUSH
2729: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2733: LD_EXP 4
2737: PPUSH
2738: LD_VAR 0 2
2742: PPUSH
2743: CALL_OW 52
// end else
2747: GO 2767
// PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2749: LD_INT 0
2751: PPUSH
2752: LD_VAR 0 2
2756: PPUSH
2757: LD_INT 2
2759: PPUSH
2760: LD_INT 0
2762: PPUSH
2763: CALL 1370 0 4
// if TestCharacters ( 11_Houten ) then
2767: LD_STRING 11_Houten
2769: PPUSH
2770: CALL_OW 28
2774: IFFALSE 2824
// begin Houten := PrepareUnit ( Houten , true , 11_ ) ;
2776: LD_ADDR_EXP 9
2780: PUSH
2781: LD_STRING Houten
2783: PPUSH
2784: LD_INT 1
2786: PPUSH
2787: LD_STRING 11_
2789: PPUSH
2790: CALL 40657 0 3
2794: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2795: LD_EXP 9
2799: PPUSH
2800: LD_INT 1
2802: PPUSH
2803: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2807: LD_EXP 9
2811: PPUSH
2812: LD_INT 4
2814: PPUSH
2815: LD_INT 0
2817: PPUSH
2818: CALL_OW 49
// end else
2822: GO 2840
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2824: LD_INT 4
2826: PPUSH
2827: LD_INT 0
2829: PPUSH
2830: LD_INT 1
2832: PPUSH
2833: LD_INT 0
2835: PPUSH
2836: CALL 1370 0 4
// vc_chassis := us_medium_wheeled ;
2840: LD_ADDR_OWVAR 37
2844: PUSH
2845: LD_INT 2
2847: ST_TO_ADDR
// vc_control := control_computer ;
2848: LD_ADDR_OWVAR 38
2852: PUSH
2853: LD_INT 3
2855: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2856: LD_ADDR_OWVAR 40
2860: PUSH
2861: LD_INT 12
2863: ST_TO_ADDR
// veh := CreateVehicle ;
2864: LD_ADDR_VAR 0 2
2868: PUSH
2869: CALL_OW 45
2873: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2874: LD_VAR 0 2
2878: PPUSH
2879: LD_INT 4
2881: PPUSH
2882: CALL_OW 233
// SetTag ( veh , 17 ) ;
2886: LD_VAR 0 2
2890: PPUSH
2891: LD_INT 17
2893: PPUSH
2894: CALL_OW 109
// AddCargo ( veh , mat_cans , 100 ) ;
2898: LD_VAR 0 2
2902: PPUSH
2903: LD_INT 1
2905: PPUSH
2906: LD_INT 100
2908: PPUSH
2909: CALL_OW 291
// veh := CreateVehicle ;
2913: LD_ADDR_VAR 0 2
2917: PUSH
2918: CALL_OW 45
2922: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2923: LD_VAR 0 2
2927: PPUSH
2928: LD_INT 4
2930: PPUSH
2931: CALL_OW 233
// SetTag ( veh , 17 ) ;
2935: LD_VAR 0 2
2939: PPUSH
2940: LD_INT 17
2942: PPUSH
2943: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2947: LD_VAR 0 2
2951: PPUSH
2952: LD_INT 4
2954: PPUSH
2955: LD_INT 0
2957: PPUSH
2958: CALL_OW 49
// AddCargo ( veh , mat_cans , 100 ) ;
2962: LD_VAR 0 2
2966: PPUSH
2967: LD_INT 1
2969: PPUSH
2970: LD_INT 100
2972: PPUSH
2973: CALL_OW 291
// veh := CreateVehicle ;
2977: LD_ADDR_VAR 0 2
2981: PUSH
2982: CALL_OW 45
2986: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2987: LD_VAR 0 2
2991: PPUSH
2992: LD_INT 4
2994: PPUSH
2995: CALL_OW 233
// SetTag ( veh , 17 ) ;
2999: LD_VAR 0 2
3003: PPUSH
3004: LD_INT 17
3006: PPUSH
3007: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
3011: LD_VAR 0 2
3015: PPUSH
3016: LD_INT 4
3018: PPUSH
3019: LD_INT 0
3021: PPUSH
3022: CALL_OW 49
// if kurtStatus then
3026: LD_EXP 19
3030: IFFALSE 3064
// begin AddCargo ( veh , mat_siberit , 60 ) ;
3032: LD_VAR 0 2
3036: PPUSH
3037: LD_INT 3
3039: PPUSH
3040: LD_INT 60
3042: PPUSH
3043: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
3047: LD_VAR 0 2
3051: PPUSH
3052: LD_INT 1
3054: PPUSH
3055: LD_INT 40
3057: PPUSH
3058: CALL_OW 291
// end else
3062: GO 3079
// AddCargo ( veh , mat_cans , 100 ) ;
3064: LD_VAR 0 2
3068: PPUSH
3069: LD_INT 1
3071: PPUSH
3072: LD_INT 100
3074: PPUSH
3075: CALL_OW 291
// veh := CreateVehicle ;
3079: LD_ADDR_VAR 0 2
3083: PUSH
3084: CALL_OW 45
3088: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3089: LD_VAR 0 2
3093: PPUSH
3094: LD_INT 4
3096: PPUSH
3097: CALL_OW 233
// SetTag ( veh , 17 ) ;
3101: LD_VAR 0 2
3105: PPUSH
3106: LD_INT 17
3108: PPUSH
3109: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
3113: LD_VAR 0 2
3117: PPUSH
3118: LD_INT 4
3120: PPUSH
3121: LD_INT 0
3123: PPUSH
3124: CALL_OW 49
// AddCargo ( veh , mat_oil , 60 ) ;
3128: LD_VAR 0 2
3132: PPUSH
3133: LD_INT 2
3135: PPUSH
3136: LD_INT 60
3138: PPUSH
3139: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
3143: LD_VAR 0 2
3147: PPUSH
3148: LD_INT 1
3150: PPUSH
3151: LD_INT 40
3153: PPUSH
3154: CALL_OW 291
// end ;
3158: LD_VAR 0 1
3162: RET
// export function PowellSupport3 ; var i , cargo ; begin
3163: LD_INT 0
3165: PPUSH
3166: PPUSH
3167: PPUSH
// uc_side := 1 ;
3168: LD_ADDR_OWVAR 20
3172: PUSH
3173: LD_INT 1
3175: ST_TO_ADDR
// uc_nation := 1 ;
3176: LD_ADDR_OWVAR 21
3180: PUSH
3181: LD_INT 1
3183: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3184: LD_INT 4
3186: PPUSH
3187: LD_INT 0
3189: PPUSH
3190: LD_INT 1
3192: PPUSH
3193: LD_INT 0
3195: PPUSH
3196: CALL 1370 0 4
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3200: LD_INT 4
3202: PPUSH
3203: LD_INT 0
3205: PPUSH
3206: LD_INT 1
3208: PPUSH
3209: LD_INT 0
3211: PPUSH
3212: CALL 1370 0 4
// for i := 1 to 2 do
3216: LD_ADDR_VAR 0 2
3220: PUSH
3221: DOUBLE
3222: LD_INT 1
3224: DEC
3225: ST_TO_ADDR
3226: LD_INT 2
3228: PUSH
3229: FOR_TO
3230: IFFALSE 3330
// begin vc_chassis := us_medium_wheeled ;
3232: LD_ADDR_OWVAR 37
3236: PUSH
3237: LD_INT 2
3239: ST_TO_ADDR
// vc_engine := engine_siberite ;
3240: LD_ADDR_OWVAR 39
3244: PUSH
3245: LD_INT 3
3247: ST_TO_ADDR
// vc_control = control_computer ;
3248: LD_ADDR_OWVAR 38
3252: PUSH
3253: LD_INT 3
3255: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
3256: LD_ADDR_OWVAR 40
3260: PUSH
3261: LD_INT 12
3263: ST_TO_ADDR
// cargo := CreateVehicle ;
3264: LD_ADDR_VAR 0 3
3268: PUSH
3269: CALL_OW 45
3273: ST_TO_ADDR
// SetDir ( cargo , 4 ) ;
3274: LD_VAR 0 3
3278: PPUSH
3279: LD_INT 4
3281: PPUSH
3282: CALL_OW 233
// SetTag ( cargo , 17 ) ;
3286: LD_VAR 0 3
3290: PPUSH
3291: LD_INT 17
3293: PPUSH
3294: CALL_OW 109
// PlaceUnitArea ( cargo , PlayerSpawn , false ) ;
3298: LD_VAR 0 3
3302: PPUSH
3303: LD_INT 4
3305: PPUSH
3306: LD_INT 0
3308: PPUSH
3309: CALL_OW 49
// AddCargo ( cargo , mat_cans , 100 ) ;
3313: LD_VAR 0 3
3317: PPUSH
3318: LD_INT 1
3320: PPUSH
3321: LD_INT 100
3323: PPUSH
3324: CALL_OW 291
// end ;
3328: GO 3229
3330: POP
3331: POP
// end ; end_of_file
3332: LD_VAR 0 1
3336: RET
// export function PrepareRussianCommander ; begin
3337: LD_INT 0
3339: PPUSH
// uc_side := 3 ;
3340: LD_ADDR_OWVAR 20
3344: PUSH
3345: LD_INT 3
3347: ST_TO_ADDR
// Davidov := PrepareUnit ( Davidov , false ,  ) ;
3348: LD_ADDR_EXP 16
3352: PUSH
3353: LD_STRING Davidov
3355: PPUSH
3356: LD_INT 0
3358: PPUSH
3359: LD_STRING 
3361: PPUSH
3362: CALL 40657 0 3
3366: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3367: LD_EXP 16
3371: PPUSH
3372: LD_INT 3
3374: PPUSH
3375: CALL_OW 52
// RuScientists := Join ( RuScientists , Davidov ) ;
3379: LD_ADDR_EXP 27
3383: PUSH
3384: LD_EXP 27
3388: PPUSH
3389: LD_EXP 16
3393: PPUSH
3394: CALL 78389 0 2
3398: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3399: LD_EXP 27
3403: PPUSH
3404: LD_INT 4
3406: PPUSH
3407: CALL_OW 336
// end ;
3411: LD_VAR 0 1
3415: RET
// export function PrepareEastBase ; var i , un ; begin
3416: LD_INT 0
3418: PPUSH
3419: PPUSH
3420: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , [ 2 , 2 , 3 , 3 ] [ Difficulty ] ) ;
3421: LD_INT 3
3423: PPUSH
3424: LD_INT 3
3426: PPUSH
3427: LD_INT 121
3429: PPUSH
3430: LD_EXP 29
3434: PPUSH
3435: LD_EXP 30
3439: PPUSH
3440: CALL_OW 12
3444: PPUSH
3445: LD_INT 1
3447: PPUSH
3448: LD_INT 2
3450: PUSH
3451: LD_INT 2
3453: PUSH
3454: LD_INT 3
3456: PUSH
3457: LD_INT 3
3459: PUSH
3460: EMPTY
3461: LIST
3462: LIST
3463: LIST
3464: LIST
3465: PUSH
3466: LD_OWVAR 67
3470: ARRAY
3471: PPUSH
3472: CALL 13147 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
3476: LD_INT 3
3478: PPUSH
3479: LD_INT 3
3481: PPUSH
3482: LD_INT 121
3484: PPUSH
3485: LD_EXP 29
3489: PPUSH
3490: LD_EXP 30
3494: PPUSH
3495: CALL_OW 12
3499: PPUSH
3500: LD_INT 9
3502: PPUSH
3503: LD_INT 1
3505: PUSH
3506: LD_INT 2
3508: PUSH
3509: LD_INT 3
3511: PUSH
3512: LD_INT 3
3514: PUSH
3515: EMPTY
3516: LIST
3517: LIST
3518: LIST
3519: LIST
3520: PUSH
3521: LD_OWVAR 67
3525: ARRAY
3526: PPUSH
3527: CALL 13147 0 6
// RespawnInside ( 3 , 3 , rubar3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , [ 2 , 3 , 4 , 5 ] [ Difficulty ] ) ;
3531: LD_INT 3
3533: PPUSH
3534: LD_INT 3
3536: PPUSH
3537: LD_INT 226
3539: PPUSH
3540: LD_EXP 29
3544: PPUSH
3545: LD_EXP 30
3549: PPUSH
3550: CALL_OW 12
3554: PPUSH
3555: LD_INT 9
3557: PPUSH
3558: LD_INT 2
3560: PUSH
3561: LD_INT 3
3563: PUSH
3564: LD_INT 4
3566: PUSH
3567: LD_INT 5
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: PUSH
3576: LD_OWVAR 67
3580: ARRAY
3581: PPUSH
3582: CALL 13147 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3586: LD_INT 3
3588: PPUSH
3589: LD_INT 3
3591: PPUSH
3592: LD_INT 4
3594: PPUSH
3595: LD_EXP 29
3599: PPUSH
3600: LD_EXP 30
3604: PPUSH
3605: CALL_OW 12
3609: PPUSH
3610: LD_INT 2
3612: PPUSH
3613: LD_INT 3
3615: PUSH
3616: LD_INT 4
3618: PUSH
3619: LD_INT 5
3621: PUSH
3622: LD_INT 6
3624: PUSH
3625: EMPTY
3626: LIST
3627: LIST
3628: LIST
3629: LIST
3630: PUSH
3631: LD_OWVAR 67
3635: ARRAY
3636: PPUSH
3637: CALL 13147 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , [ 4 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3641: LD_INT 3
3643: PPUSH
3644: LD_INT 3
3646: PPUSH
3647: LD_INT 112
3649: PPUSH
3650: LD_EXP 29
3654: PPUSH
3655: LD_EXP 30
3659: PPUSH
3660: CALL_OW 12
3664: PPUSH
3665: LD_INT 3
3667: PPUSH
3668: LD_INT 4
3670: PUSH
3671: LD_INT 4
3673: PUSH
3674: LD_INT 5
3676: PUSH
3677: LD_INT 6
3679: PUSH
3680: EMPTY
3681: LIST
3682: LIST
3683: LIST
3684: LIST
3685: PUSH
3686: LD_OWVAR 67
3690: ARRAY
3691: PPUSH
3692: CALL 13147 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , [ 2 , 3 , 4 , 5 ] [ Difficulty ] ) ;
3696: LD_INT 3
3698: PPUSH
3699: LD_INT 3
3701: PPUSH
3702: LD_INT 47
3704: PPUSH
3705: LD_EXP 29
3709: PPUSH
3710: LD_EXP 30
3714: PPUSH
3715: CALL_OW 12
3719: PPUSH
3720: LD_INT 4
3722: PPUSH
3723: LD_INT 2
3725: PUSH
3726: LD_INT 3
3728: PUSH
3729: LD_INT 4
3731: PUSH
3732: LD_INT 5
3734: PUSH
3735: EMPTY
3736: LIST
3737: LIST
3738: LIST
3739: LIST
3740: PUSH
3741: LD_OWVAR 67
3745: ARRAY
3746: PPUSH
3747: CALL 13147 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , [ 2 , 3 , 4 , 5 ] [ Difficulty ] ) ;
3751: LD_INT 3
3753: PPUSH
3754: LD_INT 3
3756: PPUSH
3757: LD_INT 129
3759: PPUSH
3760: LD_EXP 29
3764: PPUSH
3765: LD_EXP 30
3769: PPUSH
3770: CALL_OW 12
3774: PPUSH
3775: LD_INT 4
3777: PPUSH
3778: LD_INT 2
3780: PUSH
3781: LD_INT 3
3783: PUSH
3784: LD_INT 4
3786: PUSH
3787: LD_INT 5
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: PUSH
3796: LD_OWVAR 67
3800: ARRAY
3801: PPUSH
3802: CALL 13147 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , [ 2 , 3 , 4 , 5 ] [ Difficulty ] ) ;
3806: LD_INT 3
3808: PPUSH
3809: LD_INT 3
3811: PPUSH
3812: LD_INT 135
3814: PPUSH
3815: LD_EXP 29
3819: PPUSH
3820: LD_EXP 30
3824: PPUSH
3825: CALL_OW 12
3829: PPUSH
3830: LD_INT 4
3832: PPUSH
3833: LD_INT 2
3835: PUSH
3836: LD_INT 3
3838: PUSH
3839: LD_INT 4
3841: PUSH
3842: LD_INT 5
3844: PUSH
3845: EMPTY
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: PUSH
3851: LD_OWVAR 67
3855: ARRAY
3856: PPUSH
3857: CALL 13147 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3861: LD_ADDR_VAR 0 2
3865: PUSH
3866: LD_INT 22
3868: PUSH
3869: LD_INT 3
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: PUSH
3876: LD_INT 30
3878: PUSH
3879: LD_INT 32
3881: PUSH
3882: EMPTY
3883: LIST
3884: LIST
3885: PUSH
3886: EMPTY
3887: LIST
3888: LIST
3889: PPUSH
3890: CALL_OW 69
3894: PUSH
3895: FOR_IN
3896: IFFALSE 3936
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3898: LD_INT 3
3900: PPUSH
3901: LD_INT 3
3903: PPUSH
3904: LD_VAR 0 2
3908: PPUSH
3909: LD_EXP 29
3913: PPUSH
3914: LD_EXP 30
3918: PPUSH
3919: CALL_OW 12
3923: PPUSH
3924: LD_INT 1
3926: PPUSH
3927: LD_INT 1
3929: PPUSH
3930: CALL 13147 0 6
3934: GO 3895
3936: POP
3937: POP
// for i := 1 to 5 do
3938: LD_ADDR_VAR 0 2
3942: PUSH
3943: DOUBLE
3944: LD_INT 1
3946: DEC
3947: ST_TO_ADDR
3948: LD_INT 5
3950: PUSH
3951: FOR_TO
3952: IFFALSE 4055
// begin uc_side := 3 ;
3954: LD_ADDR_OWVAR 20
3958: PUSH
3959: LD_INT 3
3961: ST_TO_ADDR
// uc_nation := 3 ;
3962: LD_ADDR_OWVAR 21
3966: PUSH
3967: LD_INT 3
3969: ST_TO_ADDR
// hc_gallery :=  ;
3970: LD_ADDR_OWVAR 33
3974: PUSH
3975: LD_STRING 
3977: ST_TO_ADDR
// hc_name :=  ;
3978: LD_ADDR_OWVAR 26
3982: PUSH
3983: LD_STRING 
3985: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3986: LD_INT 0
3988: PPUSH
3989: LD_INT 4
3991: PPUSH
3992: LD_EXP 29
3996: PPUSH
3997: LD_EXP 30
4001: PPUSH
4002: CALL_OW 12
4006: PPUSH
4007: CALL_OW 380
// un := CreateHuman ;
4011: LD_ADDR_VAR 0 3
4015: PUSH
4016: CALL_OW 44
4020: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
4021: LD_VAR 0 3
4025: PPUSH
4026: LD_INT 3
4028: PPUSH
4029: CALL_OW 52
// RuScientists := Join ( RuScientists , un ) ;
4033: LD_ADDR_EXP 27
4037: PUSH
4038: LD_EXP 27
4042: PPUSH
4043: LD_VAR 0 3
4047: PPUSH
4048: CALL 78389 0 2
4052: ST_TO_ADDR
// end ;
4053: GO 3951
4055: POP
4056: POP
// end ;
4057: LD_VAR 0 1
4061: RET
// export function PrepareWestBase ; var i , un ; begin
4062: LD_INT 0
4064: PPUSH
4065: PPUSH
4066: PPUSH
// if Difficulty = 1 then
4067: LD_OWVAR 67
4071: PUSH
4072: LD_INT 1
4074: EQUAL
4075: IFFALSE 4113
// for i in FilterAllUnits ( [ f_inarea , delBuildingsArea ] ) do
4077: LD_ADDR_VAR 0 2
4081: PUSH
4082: LD_INT 95
4084: PUSH
4085: LD_INT 28
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: PPUSH
4092: CALL_OW 69
4096: PUSH
4097: FOR_IN
4098: IFFALSE 4111
// RemoveUnit ( i ) ;
4100: LD_VAR 0 2
4104: PPUSH
4105: CALL_OW 64
4109: GO 4097
4111: POP
4112: POP
// TeleportExit ( ruteleprt , 122 , 145 ) ;
4113: LD_INT 10
4115: PPUSH
4116: LD_INT 122
4118: PPUSH
4119: LD_INT 145
4121: PPUSH
4122: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
4126: LD_INT 137
4128: PPUSH
4129: LD_INT 84
4131: PPUSH
4132: LD_INT 61
4134: PPUSH
4135: CALL_OW 243
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ) ;
4139: LD_INT 3
4141: PPUSH
4142: LD_INT 3
4144: PPUSH
4145: LD_INT 6
4147: PPUSH
4148: LD_EXP 29
4152: PPUSH
4153: LD_EXP 30
4157: PPUSH
4158: CALL_OW 12
4162: PPUSH
4163: LD_INT 2
4165: PPUSH
4166: LD_INT 2
4168: PUSH
4169: LD_INT 3
4171: PUSH
4172: LD_INT 3
4174: PUSH
4175: LD_INT 3
4177: PUSH
4178: EMPTY
4179: LIST
4180: LIST
4181: LIST
4182: LIST
4183: PUSH
4184: LD_OWVAR 67
4188: ARRAY
4189: PPUSH
4190: CALL 13147 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
4194: LD_INT 3
4196: PPUSH
4197: LD_INT 3
4199: PPUSH
4200: LD_INT 91
4202: PPUSH
4203: LD_EXP 29
4207: PPUSH
4208: LD_EXP 30
4212: PPUSH
4213: CALL_OW 12
4217: PPUSH
4218: LD_INT 4
4220: PPUSH
4221: LD_INT 3
4223: PPUSH
4224: CALL 13147 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
4228: LD_INT 3
4230: PPUSH
4231: LD_INT 3
4233: PPUSH
4234: LD_INT 21
4236: PPUSH
4237: LD_EXP 29
4241: PPUSH
4242: LD_EXP 30
4246: PPUSH
4247: CALL_OW 12
4251: PPUSH
4252: LD_INT 3
4254: PPUSH
4255: LD_INT 4
4257: PUSH
4258: LD_INT 5
4260: PUSH
4261: LD_INT 6
4263: PUSH
4264: LD_INT 6
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: LIST
4271: LIST
4272: PUSH
4273: LD_OWVAR 67
4277: ARRAY
4278: PPUSH
4279: CALL 13147 0 6
// end ;
4283: LD_VAR 0 1
4287: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
4288: LD_INT 0
4290: PPUSH
4291: PPUSH
4292: PPUSH
4293: PPUSH
// uc_side := 3 ;
4294: LD_ADDR_OWVAR 20
4298: PUSH
4299: LD_INT 3
4301: ST_TO_ADDR
// uc_nation := 3 ;
4302: LD_ADDR_OWVAR 21
4306: PUSH
4307: LD_INT 3
4309: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 5 , 5 ] [ Difficulty ] do
4310: LD_ADDR_VAR 0 2
4314: PUSH
4315: DOUBLE
4316: LD_INT 1
4318: DEC
4319: ST_TO_ADDR
4320: LD_INT 4
4322: PUSH
4323: LD_INT 5
4325: PUSH
4326: LD_INT 5
4328: PUSH
4329: LD_INT 5
4331: PUSH
4332: EMPTY
4333: LIST
4334: LIST
4335: LIST
4336: LIST
4337: PUSH
4338: LD_OWVAR 67
4342: ARRAY
4343: PUSH
4344: FOR_TO
4345: IFFALSE 4415
// begin hc_gallery :=  ;
4347: LD_ADDR_OWVAR 33
4351: PUSH
4352: LD_STRING 
4354: ST_TO_ADDR
// hc_name :=  ;
4355: LD_ADDR_OWVAR 26
4359: PUSH
4360: LD_STRING 
4362: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4363: LD_INT 0
4365: PPUSH
4366: LD_INT 9
4368: PPUSH
4369: LD_EXP 29
4373: PPUSH
4374: LD_EXP 30
4378: PPUSH
4379: CALL_OW 12
4383: PPUSH
4384: CALL_OW 380
// un := CreateHuman ;
4388: LD_ADDR_VAR 0 3
4392: PUSH
4393: CALL_OW 44
4397: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4398: LD_VAR 0 3
4402: PPUSH
4403: LD_INT 8
4405: PPUSH
4406: LD_INT 0
4408: PPUSH
4409: CALL_OW 49
// end ;
4413: GO 4344
4415: POP
4416: POP
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4417: LD_ADDR_VAR 0 2
4421: PUSH
4422: DOUBLE
4423: LD_INT 1
4425: DEC
4426: ST_TO_ADDR
4427: LD_INT 2
4429: PUSH
4430: LD_INT 3
4432: PUSH
4433: LD_INT 4
4435: PUSH
4436: LD_INT 4
4438: PUSH
4439: EMPTY
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: PUSH
4445: LD_OWVAR 67
4449: ARRAY
4450: PUSH
4451: FOR_TO
4452: IFFALSE 4522
// begin hc_gallery :=  ;
4454: LD_ADDR_OWVAR 33
4458: PUSH
4459: LD_STRING 
4461: ST_TO_ADDR
// hc_name :=  ;
4462: LD_ADDR_OWVAR 26
4466: PUSH
4467: LD_STRING 
4469: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4470: LD_INT 0
4472: PPUSH
4473: LD_INT 4
4475: PPUSH
4476: LD_EXP 29
4480: PPUSH
4481: LD_EXP 30
4485: PPUSH
4486: CALL_OW 12
4490: PPUSH
4491: CALL_OW 380
// un := CreateHuman ;
4495: LD_ADDR_VAR 0 3
4499: PUSH
4500: CALL_OW 44
4504: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4505: LD_VAR 0 3
4509: PPUSH
4510: LD_INT 8
4512: PPUSH
4513: LD_INT 0
4515: PPUSH
4516: CALL_OW 49
// end ;
4520: GO 4451
4522: POP
4523: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4524: LD_ADDR_VAR 0 2
4528: PUSH
4529: DOUBLE
4530: LD_INT 1
4532: DEC
4533: ST_TO_ADDR
4534: LD_INT 3
4536: PUSH
4537: LD_INT 4
4539: PUSH
4540: LD_INT 5
4542: PUSH
4543: LD_INT 5
4545: PUSH
4546: EMPTY
4547: LIST
4548: LIST
4549: LIST
4550: LIST
4551: PUSH
4552: LD_OWVAR 67
4556: ARRAY
4557: PUSH
4558: FOR_TO
4559: IFFALSE 4776
// begin vc_engine = 3 ;
4561: LD_ADDR_OWVAR 39
4565: PUSH
4566: LD_INT 3
4568: ST_TO_ADDR
// vc_control = 1 ;
4569: LD_ADDR_OWVAR 38
4573: PUSH
4574: LD_INT 1
4576: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ rand ( 1 , 5 ) ] ;
4577: LD_ADDR_OWVAR 40
4581: PUSH
4582: LD_INT 42
4584: PUSH
4585: LD_INT 43
4587: PUSH
4588: LD_INT 44
4590: PUSH
4591: LD_INT 45
4593: PUSH
4594: LD_INT 46
4596: PUSH
4597: EMPTY
4598: LIST
4599: LIST
4600: LIST
4601: LIST
4602: LIST
4603: PUSH
4604: LD_INT 1
4606: PPUSH
4607: LD_INT 5
4609: PPUSH
4610: CALL_OW 12
4614: ARRAY
4615: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4616: LD_OWVAR 40
4620: PUSH
4621: LD_INT 46
4623: EQUAL
4624: IFFALSE 4636
// vc_chassis := ru_heavy_tracked else
4626: LD_ADDR_OWVAR 37
4630: PUSH
4631: LD_INT 24
4633: ST_TO_ADDR
4634: GO 4663
// vc_chassis := [ ru_medium_tracked , ru_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
4636: LD_ADDR_OWVAR 37
4640: PUSH
4641: LD_INT 22
4643: PUSH
4644: LD_INT 21
4646: PUSH
4647: EMPTY
4648: LIST
4649: LIST
4650: PUSH
4651: LD_INT 1
4653: PPUSH
4654: LD_INT 2
4656: PPUSH
4657: CALL_OW 12
4661: ARRAY
4662: ST_TO_ADDR
// veh := CreateVehicle ;
4663: LD_ADDR_VAR 0 4
4667: PUSH
4668: CALL_OW 45
4672: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4673: LD_VAR 0 4
4677: PPUSH
4678: LD_INT 3
4680: PPUSH
4681: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4685: LD_VAR 0 4
4689: PPUSH
4690: LD_INT 5
4692: PPUSH
4693: LD_INT 0
4695: PPUSH
4696: CALL_OW 49
// hc_gallery :=  ;
4700: LD_ADDR_OWVAR 33
4704: PUSH
4705: LD_STRING 
4707: ST_TO_ADDR
// hc_name :=  ;
4708: LD_ADDR_OWVAR 26
4712: PUSH
4713: LD_STRING 
4715: ST_TO_ADDR
// PrepareHuman ( false , 3 , [ 6 , 7 , 8 , 10 ] [ Difficulty ] ) ;
4716: LD_INT 0
4718: PPUSH
4719: LD_INT 3
4721: PPUSH
4722: LD_INT 6
4724: PUSH
4725: LD_INT 7
4727: PUSH
4728: LD_INT 8
4730: PUSH
4731: LD_INT 10
4733: PUSH
4734: EMPTY
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: PUSH
4740: LD_OWVAR 67
4744: ARRAY
4745: PPUSH
4746: CALL_OW 380
// un = CreateHuman ;
4750: LD_ADDR_VAR 0 3
4754: PUSH
4755: CALL_OW 44
4759: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4760: LD_VAR 0 3
4764: PPUSH
4765: LD_VAR 0 4
4769: PPUSH
4770: CALL_OW 52
// end ;
4774: GO 4558
4776: POP
4777: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4778: LD_ADDR_VAR 0 2
4782: PUSH
4783: DOUBLE
4784: LD_INT 1
4786: DEC
4787: ST_TO_ADDR
4788: LD_INT 3
4790: PUSH
4791: LD_INT 4
4793: PUSH
4794: LD_INT 5
4796: PUSH
4797: LD_INT 5
4799: PUSH
4800: EMPTY
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: PUSH
4806: LD_OWVAR 67
4810: ARRAY
4811: PUSH
4812: FOR_TO
4813: IFFALSE 4960
// begin vc_engine := 3 ;
4815: LD_ADDR_OWVAR 39
4819: PUSH
4820: LD_INT 3
4822: ST_TO_ADDR
// vc_control := 3 ;
4823: LD_ADDR_OWVAR 38
4827: PUSH
4828: LD_INT 3
4830: ST_TO_ADDR
// vc_weapon := [ 42 , 43 , 44 , 45 , 46 , 49 ] [ rand ( 1 , 5 ) ] ;
4831: LD_ADDR_OWVAR 40
4835: PUSH
4836: LD_INT 42
4838: PUSH
4839: LD_INT 43
4841: PUSH
4842: LD_INT 44
4844: PUSH
4845: LD_INT 45
4847: PUSH
4848: LD_INT 46
4850: PUSH
4851: LD_INT 49
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: PUSH
4862: LD_INT 1
4864: PPUSH
4865: LD_INT 5
4867: PPUSH
4868: CALL_OW 12
4872: ARRAY
4873: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4874: LD_OWVAR 40
4878: PUSH
4879: LD_INT 46
4881: EQUAL
4882: IFFALSE 4894
// vc_chassis := ru_heavy_tracked else
4884: LD_ADDR_OWVAR 37
4888: PUSH
4889: LD_INT 24
4891: ST_TO_ADDR
4892: GO 4921
// vc_chassis := [ ru_medium_tracked , ru_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
4894: LD_ADDR_OWVAR 37
4898: PUSH
4899: LD_INT 22
4901: PUSH
4902: LD_INT 21
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: PUSH
4909: LD_INT 1
4911: PPUSH
4912: LD_INT 2
4914: PPUSH
4915: CALL_OW 12
4919: ARRAY
4920: ST_TO_ADDR
// veh := CreateVehicle ;
4921: LD_ADDR_VAR 0 4
4925: PUSH
4926: CALL_OW 45
4930: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4931: LD_VAR 0 4
4935: PPUSH
4936: LD_INT 3
4938: PPUSH
4939: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4943: LD_VAR 0 4
4947: PPUSH
4948: LD_INT 6
4950: PPUSH
4951: LD_INT 0
4953: PPUSH
4954: CALL_OW 49
// end ;
4958: GO 4812
4960: POP
4961: POP
// end ; end_of_file
4962: LD_VAR 0 1
4966: RET
// export function PrepareKurt ; begin
4967: LD_INT 0
4969: PPUSH
// uc_side := 8 ;
4970: LD_ADDR_OWVAR 20
4974: PUSH
4975: LD_INT 8
4977: ST_TO_ADDR
// uc_nation := 2 ;
4978: LD_ADDR_OWVAR 21
4982: PUSH
4983: LD_INT 2
4985: ST_TO_ADDR
// vc_chassis := ar_medium_trike ;
4986: LD_ADDR_OWVAR 37
4990: PUSH
4991: LD_INT 13
4993: ST_TO_ADDR
// vc_engine := 1 ;
4994: LD_ADDR_OWVAR 39
4998: PUSH
4999: LD_INT 1
5001: ST_TO_ADDR
// vc_control := 1 ;
5002: LD_ADDR_OWVAR 38
5006: PUSH
5007: LD_INT 1
5009: ST_TO_ADDR
// vc_weapon := 24 ;
5010: LD_ADDR_OWVAR 40
5014: PUSH
5015: LD_INT 24
5017: ST_TO_ADDR
// KurtVeh := CreateVehicle ;
5018: LD_ADDR_EXP 18
5022: PUSH
5023: CALL_OW 45
5027: ST_TO_ADDR
// if kurtStatus > 0 then
5028: LD_EXP 19
5032: PUSH
5033: LD_INT 0
5035: GREATER
5036: IFFALSE 5088
// begin Kurt := PrepareUnit ( Kurt , false ,  ) ;
5038: LD_ADDR_EXP 17
5042: PUSH
5043: LD_STRING Kurt
5045: PPUSH
5046: LD_INT 0
5048: PPUSH
5049: LD_STRING 
5051: PPUSH
5052: CALL 40657 0 3
5056: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
5057: LD_EXP 18
5061: PPUSH
5062: LD_INT 4
5064: PPUSH
5065: LD_INT 0
5067: PPUSH
5068: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
5072: LD_EXP 17
5076: PPUSH
5077: LD_EXP 18
5081: PPUSH
5082: CALL_OW 52
// end else
5086: GO 5165
// begin hc_name :=  ;
5088: LD_ADDR_OWVAR 26
5092: PUSH
5093: LD_STRING 
5095: ST_TO_ADDR
// hc_gallery :=  ;
5096: LD_ADDR_OWVAR 33
5100: PUSH
5101: LD_STRING 
5103: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
5104: LD_INT 1
5106: PPUSH
5107: LD_INT 10
5109: PPUSH
5110: CALL_OW 381
// Kurt := CreateHuman ;
5114: LD_ADDR_EXP 17
5118: PUSH
5119: CALL_OW 44
5123: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
5124: LD_EXP 18
5128: PPUSH
5129: LD_INT 4
5131: PPUSH
5132: LD_INT 0
5134: PPUSH
5135: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
5139: LD_EXP 17
5143: PPUSH
5144: LD_EXP 18
5148: PPUSH
5149: CALL_OW 52
// SaveCharacters ( Kurt , AltKurt ) ;
5153: LD_EXP 17
5157: PPUSH
5158: LD_STRING AltKurt
5160: PPUSH
5161: CALL_OW 38
// end ; end ;
5165: LD_VAR 0 1
5169: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
5170: LD_INT 0
5172: PPUSH
5173: PPUSH
5174: PPUSH
5175: PPUSH
// for i := 1 to 3 do
5176: LD_ADDR_VAR 0 2
5180: PUSH
5181: DOUBLE
5182: LD_INT 1
5184: DEC
5185: ST_TO_ADDR
5186: LD_INT 3
5188: PUSH
5189: FOR_TO
5190: IFFALSE 5311
// begin uc_side := 1 ;
5192: LD_ADDR_OWVAR 20
5196: PUSH
5197: LD_INT 1
5199: ST_TO_ADDR
// uc_nation := 2 ;
5200: LD_ADDR_OWVAR 21
5204: PUSH
5205: LD_INT 2
5207: ST_TO_ADDR
// hc_gallery =  ;
5208: LD_ADDR_OWVAR 33
5212: PUSH
5213: LD_STRING 
5215: ST_TO_ADDR
// hc_name =  ;
5216: LD_ADDR_OWVAR 26
5220: PUSH
5221: LD_STRING 
5223: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
5224: LD_EXP 19
5228: PUSH
5229: LD_INT 0
5231: EQUAL
5232: PUSH
5233: LD_EXP 19
5237: PUSH
5238: LD_INT 2
5240: EQUAL
5241: OR
5242: IFFALSE 5259
// PrepareHuman ( false , 1 , 6 ) else
5244: LD_INT 0
5246: PPUSH
5247: LD_INT 1
5249: PPUSH
5250: LD_INT 6
5252: PPUSH
5253: CALL_OW 380
5257: GO 5272
// PrepareHuman ( false , 1 , 8 ) ;
5259: LD_INT 0
5261: PPUSH
5262: LD_INT 1
5264: PPUSH
5265: LD_INT 8
5267: PPUSH
5268: CALL_OW 380
// un := CreateHuman ;
5272: LD_ADDR_VAR 0 3
5276: PUSH
5277: CALL_OW 44
5281: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5282: LD_VAR 0 3
5286: PPUSH
5287: LD_INT 4
5289: PPUSH
5290: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
5294: LD_VAR 0 3
5298: PPUSH
5299: LD_INT 4
5301: PPUSH
5302: LD_INT 0
5304: PPUSH
5305: CALL_OW 49
// end ;
5309: GO 5189
5311: POP
5312: POP
// vc_chassis := 14 ;
5313: LD_ADDR_OWVAR 37
5317: PUSH
5318: LD_INT 14
5320: ST_TO_ADDR
// vc_engine := 3 ;
5321: LD_ADDR_OWVAR 39
5325: PUSH
5326: LD_INT 3
5328: ST_TO_ADDR
// vc_control := 1 ;
5329: LD_ADDR_OWVAR 38
5333: PUSH
5334: LD_INT 1
5336: ST_TO_ADDR
// vc_weapon := [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
5337: LD_ADDR_OWVAR 40
5341: PUSH
5342: LD_INT 27
5344: PUSH
5345: LD_INT 26
5347: PUSH
5348: LD_INT 28
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: LIST
5355: PUSH
5356: LD_INT 1
5358: PPUSH
5359: LD_INT 3
5361: PPUSH
5362: CALL_OW 12
5366: ARRAY
5367: ST_TO_ADDR
// veh := CreateVehicle ;
5368: LD_ADDR_VAR 0 4
5372: PUSH
5373: CALL_OW 45
5377: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5378: LD_VAR 0 4
5382: PPUSH
5383: LD_INT 4
5385: PPUSH
5386: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5390: LD_VAR 0 4
5394: PPUSH
5395: LD_INT 4
5397: PPUSH
5398: LD_INT 0
5400: PPUSH
5401: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5405: LD_EXP 19
5409: PUSH
5410: LD_INT 0
5412: EQUAL
5413: PUSH
5414: LD_EXP 19
5418: PUSH
5419: LD_INT 2
5421: EQUAL
5422: OR
5423: IFFALSE 5440
// PrepareHuman ( false , 3 , 6 ) else
5425: LD_INT 0
5427: PPUSH
5428: LD_INT 3
5430: PPUSH
5431: LD_INT 6
5433: PPUSH
5434: CALL_OW 380
5438: GO 5453
// PrepareHuman ( false , 3 , 8 ) ;
5440: LD_INT 0
5442: PPUSH
5443: LD_INT 3
5445: PPUSH
5446: LD_INT 8
5448: PPUSH
5449: CALL_OW 380
// un := CreateHuman ;
5453: LD_ADDR_VAR 0 3
5457: PUSH
5458: CALL_OW 44
5462: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5463: LD_VAR 0 3
5467: PPUSH
5468: LD_VAR 0 4
5472: PPUSH
5473: CALL_OW 52
// vc_chassis := 14 ;
5477: LD_ADDR_OWVAR 37
5481: PUSH
5482: LD_INT 14
5484: ST_TO_ADDR
// vc_engine := 3 ;
5485: LD_ADDR_OWVAR 39
5489: PUSH
5490: LD_INT 3
5492: ST_TO_ADDR
// vc_control := 1 ;
5493: LD_ADDR_OWVAR 38
5497: PUSH
5498: LD_INT 1
5500: ST_TO_ADDR
// vc_weapon := [ 27 , 26 , 28 ] [ rand ( 1 , 3 ) ] ;
5501: LD_ADDR_OWVAR 40
5505: PUSH
5506: LD_INT 27
5508: PUSH
5509: LD_INT 26
5511: PUSH
5512: LD_INT 28
5514: PUSH
5515: EMPTY
5516: LIST
5517: LIST
5518: LIST
5519: PUSH
5520: LD_INT 1
5522: PPUSH
5523: LD_INT 3
5525: PPUSH
5526: CALL_OW 12
5530: ARRAY
5531: ST_TO_ADDR
// veh := CreateVehicle ;
5532: LD_ADDR_VAR 0 4
5536: PUSH
5537: CALL_OW 45
5541: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5542: LD_VAR 0 4
5546: PPUSH
5547: LD_INT 4
5549: PPUSH
5550: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5554: LD_VAR 0 4
5558: PPUSH
5559: LD_INT 4
5561: PPUSH
5562: LD_INT 0
5564: PPUSH
5565: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5569: LD_EXP 19
5573: PUSH
5574: LD_INT 0
5576: EQUAL
5577: PUSH
5578: LD_EXP 19
5582: PUSH
5583: LD_INT 2
5585: EQUAL
5586: OR
5587: IFFALSE 5604
// PrepareHuman ( false , 4 , 6 ) else
5589: LD_INT 0
5591: PPUSH
5592: LD_INT 4
5594: PPUSH
5595: LD_INT 6
5597: PPUSH
5598: CALL_OW 380
5602: GO 5617
// PrepareHuman ( false , 4 , 8 ) ;
5604: LD_INT 0
5606: PPUSH
5607: LD_INT 4
5609: PPUSH
5610: LD_INT 8
5612: PPUSH
5613: CALL_OW 380
// un := CreateHuman ;
5617: LD_ADDR_VAR 0 3
5621: PUSH
5622: CALL_OW 44
5626: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5627: LD_VAR 0 3
5631: PPUSH
5632: LD_INT 4
5634: PPUSH
5635: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5639: LD_VAR 0 3
5643: PPUSH
5644: LD_VAR 0 4
5648: PPUSH
5649: CALL_OW 52
// vc_chassis := 14 ;
5653: LD_ADDR_OWVAR 37
5657: PUSH
5658: LD_INT 14
5660: ST_TO_ADDR
// vc_engine := 3 ;
5661: LD_ADDR_OWVAR 39
5665: PUSH
5666: LD_INT 3
5668: ST_TO_ADDR
// vc_control := 1 ;
5669: LD_ADDR_OWVAR 38
5673: PUSH
5674: LD_INT 1
5676: ST_TO_ADDR
// vc_weapon := 26 ;
5677: LD_ADDR_OWVAR 40
5681: PUSH
5682: LD_INT 26
5684: ST_TO_ADDR
// veh := CreateVehicle ;
5685: LD_ADDR_VAR 0 4
5689: PUSH
5690: CALL_OW 45
5694: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5695: LD_VAR 0 4
5699: PPUSH
5700: LD_INT 4
5702: PPUSH
5703: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5707: LD_VAR 0 4
5711: PPUSH
5712: LD_INT 4
5714: PPUSH
5715: LD_INT 0
5717: PPUSH
5718: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5722: LD_EXP 19
5726: PUSH
5727: LD_INT 0
5729: EQUAL
5730: PUSH
5731: LD_EXP 19
5735: PUSH
5736: LD_INT 2
5738: EQUAL
5739: OR
5740: IFFALSE 5757
// PrepareHuman ( false , 2 , 4 ) else
5742: LD_INT 0
5744: PPUSH
5745: LD_INT 2
5747: PPUSH
5748: LD_INT 4
5750: PPUSH
5751: CALL_OW 380
5755: GO 5770
// PrepareHuman ( false , 2 , 8 ) ;
5757: LD_INT 0
5759: PPUSH
5760: LD_INT 2
5762: PPUSH
5763: LD_INT 8
5765: PPUSH
5766: CALL_OW 380
// un := CreateHuman ;
5770: LD_ADDR_VAR 0 3
5774: PUSH
5775: CALL_OW 44
5779: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5780: LD_VAR 0 3
5784: PPUSH
5785: LD_INT 4
5787: PPUSH
5788: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5792: LD_VAR 0 3
5796: PPUSH
5797: LD_VAR 0 4
5801: PPUSH
5802: CALL_OW 52
// end ;
5806: LD_VAR 0 1
5810: RET
// export function PrepareAttackLegion ; var i , un ; begin
5811: LD_INT 0
5813: PPUSH
5814: PPUSH
5815: PPUSH
// for i := 1 to 4 do
5816: LD_ADDR_VAR 0 2
5820: PUSH
5821: DOUBLE
5822: LD_INT 1
5824: DEC
5825: ST_TO_ADDR
5826: LD_INT 4
5828: PUSH
5829: FOR_TO
5830: IFFALSE 5940
// begin uc_side := 8 ;
5832: LD_ADDR_OWVAR 20
5836: PUSH
5837: LD_INT 8
5839: ST_TO_ADDR
// uc_nation := 2 ;
5840: LD_ADDR_OWVAR 21
5844: PUSH
5845: LD_INT 2
5847: ST_TO_ADDR
// hc_gallery :=  ;
5848: LD_ADDR_OWVAR 33
5852: PUSH
5853: LD_STRING 
5855: ST_TO_ADDR
// hc_name :=  ;
5856: LD_ADDR_OWVAR 26
5860: PUSH
5861: LD_STRING 
5863: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5864: LD_INT 0
5866: PPUSH
5867: LD_INT 1
5869: PUSH
5870: LD_INT 8
5872: PUSH
5873: EMPTY
5874: LIST
5875: LIST
5876: PUSH
5877: LD_INT 1
5879: PPUSH
5880: LD_INT 2
5882: PPUSH
5883: CALL_OW 12
5887: ARRAY
5888: PPUSH
5889: LD_INT 6
5891: PPUSH
5892: LD_INT 8
5894: PPUSH
5895: CALL_OW 12
5899: PPUSH
5900: CALL_OW 380
// un := CreateHuman ;
5904: LD_ADDR_VAR 0 3
5908: PUSH
5909: CALL_OW 44
5913: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5914: LD_VAR 0 3
5918: PPUSH
5919: LD_INT 19
5921: PPUSH
5922: LD_INT 0
5924: PPUSH
5925: CALL_OW 49
// ComCrawl ( un ) ;
5929: LD_VAR 0 3
5933: PPUSH
5934: CALL_OW 137
// end ;
5938: GO 5829
5940: POP
5941: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5942: LD_INT 1
5944: PPUSH
5945: LD_INT 8
5947: PPUSH
5948: LD_INT 2
5950: PPUSH
5951: LD_INT 1
5953: PPUSH
5954: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5958: LD_INT 20
5960: PPUSH
5961: LD_INT 3
5963: PPUSH
5964: CALL 14982 0 2
// end ; end_of_file
5968: LD_VAR 0 1
5972: RET
// export function Action ; var i , tmp , group ; begin
5973: LD_INT 0
5975: PPUSH
5976: PPUSH
5977: PPUSH
5978: PPUSH
// InGameOn ;
5979: CALL_OW 8
// music_nat := 1 ;
5983: LD_ADDR_OWVAR 71
5987: PUSH
5988: LD_INT 1
5990: ST_TO_ADDR
// group := FilterAllUnits ( [ f_side , 1 ] ) ;
5991: LD_ADDR_VAR 0 4
5995: PUSH
5996: LD_INT 22
5998: PUSH
5999: LD_INT 1
6001: PUSH
6002: EMPTY
6003: LIST
6004: LIST
6005: PPUSH
6006: CALL_OW 69
6010: ST_TO_ADDR
// tmp := IsInUnit ( JMM ) ;
6011: LD_ADDR_VAR 0 3
6015: PUSH
6016: LD_EXP 1
6020: PPUSH
6021: CALL_OW 310
6025: ST_TO_ADDR
// CenterNowOnUnits ( tmp ) ;
6026: LD_VAR 0 3
6030: PPUSH
6031: CALL_OW 87
// ComMoveXY ( group , 130 , 103 ) ;
6035: LD_VAR 0 4
6039: PPUSH
6040: LD_INT 130
6042: PPUSH
6043: LD_INT 103
6045: PPUSH
6046: CALL_OW 111
// AddComMoveXY ( tmp , 114 , 102 ) ;
6050: LD_VAR 0 3
6054: PPUSH
6055: LD_INT 114
6057: PPUSH
6058: LD_INT 102
6060: PPUSH
6061: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
6065: LD_EXP 1
6069: PPUSH
6070: LD_STRING D1-JMM-1
6072: PPUSH
6073: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
6077: LD_VAR 0 3
6081: PPUSH
6082: CALL_OW 87
// if IsOk ( Donaldson ) then
6086: LD_EXP 3
6090: PPUSH
6091: CALL_OW 302
6095: IFFALSE 6160
// begin Say ( Donaldson , D1-Don-1 ) ;
6097: LD_EXP 3
6101: PPUSH
6102: LD_STRING D1-Don-1
6104: PPUSH
6105: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
6109: LD_VAR 0 3
6113: PPUSH
6114: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
6118: LD_EXP 1
6122: PPUSH
6123: LD_STRING D1-JMM-2
6125: PPUSH
6126: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
6130: LD_VAR 0 3
6134: PPUSH
6135: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
6139: LD_EXP 3
6143: PPUSH
6144: LD_STRING D1-Don-2
6146: PPUSH
6147: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
6151: LD_VAR 0 3
6155: PPUSH
6156: CALL_OW 87
// end ; AddComMoveXY ( group , 110 , 101 ) ;
6160: LD_VAR 0 4
6164: PPUSH
6165: LD_INT 110
6167: PPUSH
6168: LD_INT 101
6170: PPUSH
6171: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
6175: LD_INT 35
6177: PPUSH
6178: CALL_OW 67
// CenterNowOnUnits ( tmp ) ;
6182: LD_VAR 0 3
6186: PPUSH
6187: CALL_OW 87
// until SeeXY ( 1 , 102 , 94 ) ;
6191: LD_INT 1
6193: PPUSH
6194: LD_INT 102
6196: PPUSH
6197: LD_INT 94
6199: PPUSH
6200: CALL_OW 293
6204: IFFALSE 6175
// CenterOnXY ( 102 , 94 ) ;
6206: LD_INT 102
6208: PPUSH
6209: LD_INT 94
6211: PPUSH
6212: CALL_OW 84
// DialogRandom ( UnitFilter ( group , [ f_sex , sex_male ] ) , D1-Sol1-2 ,  ) ;
6216: LD_VAR 0 4
6220: PPUSH
6221: LD_INT 26
6223: PUSH
6224: LD_INT 1
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: PPUSH
6231: CALL_OW 72
6235: PPUSH
6236: LD_STRING D1-Sol1-2
6238: PPUSH
6239: LD_STRING 
6241: PPUSH
6242: CALL 12642 0 3
// Say ( JMM , D1-JMM-3 ) ;
6246: LD_EXP 1
6250: PPUSH
6251: LD_STRING D1-JMM-3
6253: PPUSH
6254: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
6258: LD_STRING M1
6260: PPUSH
6261: CALL_OW 337
// for i in group do
6265: LD_ADDR_VAR 0 2
6269: PUSH
6270: LD_VAR 0 4
6274: PUSH
6275: FOR_IN
6276: IFFALSE 6295
// ComMoveXY ( i , 95 , 84 ) ;
6278: LD_VAR 0 2
6282: PPUSH
6283: LD_INT 95
6285: PPUSH
6286: LD_INT 84
6288: PPUSH
6289: CALL_OW 111
6293: GO 6275
6295: POP
6296: POP
// end ;
6297: LD_VAR 0 1
6301: RET
// every 0 0$1 trigger FilterUnitsInArea ( WaterPass , [ f_side , 1 ] ) > 1 do var i , tmp , dec ;
6302: LD_INT 7
6304: PPUSH
6305: LD_INT 22
6307: PUSH
6308: LD_INT 1
6310: PUSH
6311: EMPTY
6312: LIST
6313: LIST
6314: PPUSH
6315: CALL_OW 70
6319: PUSH
6320: LD_INT 1
6322: GREATER
6323: IFFALSE 6973
6325: GO 6327
6327: DISABLE
6328: LD_INT 0
6330: PPUSH
6331: PPUSH
6332: PPUSH
// begin tmp := FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
6333: LD_ADDR_VAR 0 2
6337: PUSH
6338: LD_INT 8
6340: PPUSH
6341: LD_INT 22
6343: PUSH
6344: LD_INT 3
6346: PUSH
6347: EMPTY
6348: LIST
6349: LIST
6350: PUSH
6351: LD_INT 25
6353: PUSH
6354: LD_INT 9
6356: PUSH
6357: EMPTY
6358: LIST
6359: LIST
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: PPUSH
6365: CALL_OW 70
6369: ST_TO_ADDR
// ComTimeShift ( tmp , 96 , 85 ) ;
6370: LD_VAR 0 2
6374: PPUSH
6375: LD_INT 96
6377: PPUSH
6378: LD_INT 85
6380: PPUSH
6381: CALL_OW 154
// for i := 1 to 5 do
6385: LD_ADDR_VAR 0 1
6389: PUSH
6390: DOUBLE
6391: LD_INT 1
6393: DEC
6394: ST_TO_ADDR
6395: LD_INT 5
6397: PUSH
6398: FOR_TO
6399: IFFALSE 6418
// AddComTimeShift ( tmp , 96 , 85 ) ;
6401: LD_VAR 0 2
6405: PPUSH
6406: LD_INT 96
6408: PPUSH
6409: LD_INT 85
6411: PPUSH
6412: CALL_OW 214
6416: GO 6398
6418: POP
6419: POP
// wait ( 0 0$2 ) ;
6420: LD_INT 70
6422: PPUSH
6423: CALL_OW 67
// Say ( JMM , D1a-JMM-1 ) ;
6427: LD_EXP 1
6431: PPUSH
6432: LD_STRING D1a-JMM-1
6434: PPUSH
6435: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
6439: LD_EXP 3
6443: PPUSH
6444: LD_STRING D1a-Don-1
6446: PPUSH
6447: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6451: LD_ADDR_VAR 0 1
6455: PUSH
6456: LD_INT 22
6458: PUSH
6459: LD_INT 1
6461: PUSH
6462: EMPTY
6463: LIST
6464: LIST
6465: PPUSH
6466: CALL_OW 69
6470: PUSH
6471: FOR_IN
6472: IFFALSE 6491
// ComMoveXY ( i , 109 , 102 ) ;
6474: LD_VAR 0 1
6478: PPUSH
6479: LD_INT 109
6481: PPUSH
6482: LD_INT 102
6484: PPUSH
6485: CALL_OW 111
6489: GO 6471
6491: POP
6492: POP
// Say ( JMM , D1a-JMM-2 ) ;
6493: LD_EXP 1
6497: PPUSH
6498: LD_STRING D1a-JMM-2
6500: PPUSH
6501: CALL_OW 88
// wait ( 0 0$10 ) ;
6505: LD_INT 350
6507: PPUSH
6508: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6512: LD_EXP 1
6516: PPUSH
6517: CALL_OW 310
6521: PPUSH
6522: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6526: LD_EXP 3
6530: PPUSH
6531: LD_STRING D1b-Don-1
6533: PPUSH
6534: CALL_OW 88
// if IsOk ( Donaldson ) then
6538: LD_EXP 3
6542: PPUSH
6543: CALL_OW 302
6547: IFFALSE 6561
// Say ( JMM , D1b-JMM-1 ) ;
6549: LD_EXP 1
6553: PPUSH
6554: LD_STRING D1b-JMM-1
6556: PPUSH
6557: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6561: LD_INT 22
6563: PUSH
6564: LD_INT 1
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: PUSH
6571: LD_INT 26
6573: PUSH
6574: LD_INT 1
6576: PUSH
6577: EMPTY
6578: LIST
6579: LIST
6580: PUSH
6581: LD_INT 2
6583: PUSH
6584: LD_INT 25
6586: PUSH
6587: LD_INT 1
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: PUSH
6594: LD_INT 25
6596: PUSH
6597: LD_INT 2
6599: PUSH
6600: EMPTY
6601: LIST
6602: LIST
6603: PUSH
6604: LD_INT 25
6606: PUSH
6607: LD_INT 3
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: PUSH
6614: LD_INT 25
6616: PUSH
6617: LD_INT 4
6619: PUSH
6620: EMPTY
6621: LIST
6622: LIST
6623: PUSH
6624: LD_INT 25
6626: PUSH
6627: LD_INT 5
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: PUSH
6634: LD_INT 25
6636: PUSH
6637: LD_INT 8
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PUSH
6644: EMPTY
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: LIST
6651: LIST
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: LIST
6657: PPUSH
6658: CALL_OW 69
6662: PPUSH
6663: LD_STRING D1b-Sol1-1
6665: PPUSH
6666: LD_STRING 
6668: PPUSH
6669: CALL 12642 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6673: LD_EXP 3
6677: PPUSH
6678: LD_STRING D1b-Don-2
6680: PPUSH
6681: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6685: LD_EXP 1
6689: PPUSH
6690: LD_STRING D1b-JMM-2
6692: PPUSH
6693: CALL_OW 88
// dec := ShowQuery1 ;
6697: LD_ADDR_VAR 0 3
6701: PUSH
6702: CALL 13105 0 0
6706: ST_TO_ADDR
// if dec = 1 then
6707: LD_VAR 0 3
6711: PUSH
6712: LD_INT 1
6714: EQUAL
6715: IFFALSE 6821
// begin Say ( JMM , D2-JMM-1 ) ;
6717: LD_EXP 1
6721: PPUSH
6722: LD_STRING D2-JMM-1
6724: PPUSH
6725: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6729: LD_EXP 15
6733: PPUSH
6734: LD_STRING D2-Pow-1
6736: PPUSH
6737: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6741: LD_EXP 1
6745: PPUSH
6746: LD_STRING D2a-JMM-1
6748: PPUSH
6749: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6753: LD_EXP 15
6757: PPUSH
6758: LD_STRING D2a-Pow-1
6760: PPUSH
6761: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6765: LD_EXP 1
6769: PPUSH
6770: LD_STRING D2a-JMM-2
6772: PPUSH
6773: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6777: LD_EXP 15
6781: PPUSH
6782: LD_STRING D2a-Pow-2
6784: PPUSH
6785: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6789: LD_EXP 1
6793: PPUSH
6794: LD_STRING D2a-JMM-3
6796: PPUSH
6797: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6801: LD_EXP 15
6805: PPUSH
6806: LD_STRING D2a-Pow-3
6808: PPUSH
6809: CALL_OW 94
// secondPass := 2 ;
6813: LD_ADDR_EXP 20
6817: PUSH
6818: LD_INT 2
6820: ST_TO_ADDR
// end ; if dec = 2 then
6821: LD_VAR 0 3
6825: PUSH
6826: LD_INT 2
6828: EQUAL
6829: IFFALSE 6923
// begin Say ( JMM , D2-JMM-1 ) ;
6831: LD_EXP 1
6835: PPUSH
6836: LD_STRING D2-JMM-1
6838: PPUSH
6839: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6843: LD_EXP 15
6847: PPUSH
6848: LD_STRING D2-Pow-1
6850: PPUSH
6851: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6855: LD_EXP 1
6859: PPUSH
6860: LD_STRING D2b-JMM-1
6862: PPUSH
6863: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6867: LD_EXP 15
6871: PPUSH
6872: LD_STRING D2b-Pow-1
6874: PPUSH
6875: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6879: LD_EXP 1
6883: PPUSH
6884: LD_STRING D2c-JMM-1
6886: PPUSH
6887: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6891: LD_EXP 15
6895: PPUSH
6896: LD_STRING D2c-Pow-1
6898: PPUSH
6899: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6903: LD_EXP 1
6907: PPUSH
6908: LD_STRING D2c-JMM-2
6910: PPUSH
6911: CALL_OW 88
// secondPass := 2 ;
6915: LD_ADDR_EXP 20
6919: PUSH
6920: LD_INT 2
6922: ST_TO_ADDR
// end ; if dec = 3 then
6923: LD_VAR 0 3
6927: PUSH
6928: LD_INT 3
6930: EQUAL
6931: IFFALSE 6941
// secondPass := 1 ;
6933: LD_ADDR_EXP 20
6937: PUSH
6938: LD_INT 1
6940: ST_TO_ADDR
// InGameOff ;
6941: CALL_OW 9
// ruAI := true ;
6945: LD_ADDR_EXP 34
6949: PUSH
6950: LD_INT 1
6952: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6953: LD_INT 1
6955: PPUSH
6956: LD_INT 3
6958: PPUSH
6959: LD_INT 2
6961: PPUSH
6962: LD_INT 1
6964: PPUSH
6965: CALL_OW 80
// SaveForQuickRestart ;
6969: CALL_OW 22
// end ;
6973: PPOPN 3
6975: END
// every 1 1$0 trigger secondPass = 2 do
6976: LD_EXP 20
6980: PUSH
6981: LD_INT 2
6983: EQUAL
6984: IFFALSE 7212
6986: GO 6988
6988: DISABLE
// begin cratesAllow := true ;
6989: LD_ADDR_EXP 45
6993: PUSH
6994: LD_INT 1
6996: ST_TO_ADDR
// PowellSupport1 ;
6997: CALL 2053 0 0
// DialogueOn ;
7001: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
7005: LD_EXP 1
7009: PPUSH
7010: LD_STRING DC1-JMM-1
7012: PPUSH
7013: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
7017: LD_EXP 15
7021: PPUSH
7022: LD_STRING DC1-Pow-1
7024: PPUSH
7025: CALL_OW 94
// DialogueOff ;
7029: CALL_OW 7
// wait ( 3 3$0 ) ;
7033: LD_INT 6300
7035: PPUSH
7036: CALL_OW 67
// PowellSupport2 ;
7040: CALL 2534 0 0
// DialogueOn ;
7044: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
7048: LD_EXP 1
7052: PPUSH
7053: LD_STRING DC2-JMM-1
7055: PPUSH
7056: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
7060: LD_EXP 15
7064: PPUSH
7065: LD_STRING DC2-Pow-1
7067: PPUSH
7068: CALL_OW 94
// DialogueOff ;
7072: CALL_OW 7
// wait ( 3 3$00 ) ;
7076: LD_INT 6300
7078: PPUSH
7079: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7083: LD_INT 35
7085: PPUSH
7086: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and not FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
7090: LD_INT 22
7092: PUSH
7093: LD_INT 1
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PUSH
7100: LD_INT 2
7102: PUSH
7103: LD_INT 30
7105: PUSH
7106: LD_INT 0
7108: PUSH
7109: EMPTY
7110: LIST
7111: LIST
7112: PUSH
7113: LD_INT 30
7115: PUSH
7116: LD_INT 1
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: LIST
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: PPUSH
7132: CALL_OW 69
7136: PUSH
7137: LD_INT 11
7139: PPUSH
7140: LD_INT 22
7142: PUSH
7143: LD_INT 3
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: PPUSH
7150: CALL_OW 70
7154: NOT
7155: AND
7156: IFFALSE 7083
// wait ( 0 0$10 ) ;
7158: LD_INT 350
7160: PPUSH
7161: CALL_OW 67
// Legion ;
7165: CALL 7213 0 0
// wait ( 5 5$0 ) ;
7169: LD_INT 10500
7171: PPUSH
7172: CALL_OW 67
// PowellSupport3 ;
7176: CALL 3163 0 0
// DialogueOn ;
7180: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
7184: LD_EXP 15
7188: PPUSH
7189: LD_STRING DC3-Pow-1
7191: PPUSH
7192: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
7196: LD_EXP 1
7200: PPUSH
7201: LD_STRING DC3-JMM-1
7203: PPUSH
7204: CALL_OW 88
// DialogueOff ;
7208: CALL_OW 7
// end ;
7212: END
// export function Legion ; var i , dec1 , dec2 , tmp , tmp2 , tmp3 , crates , oil , siberite , cr , sb , payForNeutral , payForHelp , query1 , query2 ; begin
7213: LD_INT 0
7215: PPUSH
7216: PPUSH
7217: PPUSH
7218: PPUSH
7219: PPUSH
7220: PPUSH
7221: PPUSH
7222: PPUSH
7223: PPUSH
7224: PPUSH
7225: PPUSH
7226: PPUSH
7227: PPUSH
7228: PPUSH
7229: PPUSH
7230: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7231: LD_ADDR_VAR 0 5
7235: PUSH
7236: LD_INT 22
7238: PUSH
7239: LD_INT 1
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: PUSH
7246: LD_INT 21
7248: PUSH
7249: LD_INT 3
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PUSH
7256: LD_INT 2
7258: PUSH
7259: LD_INT 30
7261: PUSH
7262: LD_INT 0
7264: PUSH
7265: EMPTY
7266: LIST
7267: LIST
7268: PUSH
7269: LD_INT 30
7271: PUSH
7272: LD_INT 1
7274: PUSH
7275: EMPTY
7276: LIST
7277: LIST
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: LIST
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: LIST
7288: PPUSH
7289: CALL_OW 69
7293: ST_TO_ADDR
// crates := 0 ;
7294: LD_ADDR_VAR 0 8
7298: PUSH
7299: LD_INT 0
7301: ST_TO_ADDR
// oil := 0 ;
7302: LD_ADDR_VAR 0 9
7306: PUSH
7307: LD_INT 0
7309: ST_TO_ADDR
// siberite := 0 ;
7310: LD_ADDR_VAR 0 10
7314: PUSH
7315: LD_INT 0
7317: ST_TO_ADDR
// payForNeutral := false ;
7318: LD_ADDR_VAR 0 13
7322: PUSH
7323: LD_INT 0
7325: ST_TO_ADDR
// payForHelp := false ;
7326: LD_ADDR_VAR 0 14
7330: PUSH
7331: LD_INT 0
7333: ST_TO_ADDR
// for i in tmp do
7334: LD_ADDR_VAR 0 2
7338: PUSH
7339: LD_VAR 0 5
7343: PUSH
7344: FOR_IN
7345: IFFALSE 7436
// begin crates := crates + GetResourceType ( GetBase ( i ) , 1 ) ;
7347: LD_ADDR_VAR 0 8
7351: PUSH
7352: LD_VAR 0 8
7356: PUSH
7357: LD_VAR 0 2
7361: PPUSH
7362: CALL_OW 274
7366: PPUSH
7367: LD_INT 1
7369: PPUSH
7370: CALL_OW 275
7374: PLUS
7375: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( i ) , 2 ) ;
7376: LD_ADDR_VAR 0 9
7380: PUSH
7381: LD_VAR 0 9
7385: PUSH
7386: LD_VAR 0 2
7390: PPUSH
7391: CALL_OW 274
7395: PPUSH
7396: LD_INT 2
7398: PPUSH
7399: CALL_OW 275
7403: PLUS
7404: ST_TO_ADDR
// siberite := siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
7405: LD_ADDR_VAR 0 10
7409: PUSH
7410: LD_VAR 0 10
7414: PUSH
7415: LD_VAR 0 2
7419: PPUSH
7420: CALL_OW 274
7424: PPUSH
7425: LD_INT 3
7427: PPUSH
7428: CALL_OW 275
7432: PLUS
7433: ST_TO_ADDR
// end ;
7434: GO 7344
7436: POP
7437: POP
// PrepareKurt ;
7438: CALL 4967 0 0
// if not Kurt then
7442: LD_EXP 17
7446: NOT
7447: IFFALSE 7451
// exit ;
7449: GO 9570
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7451: LD_EXP 18
7455: PPUSH
7456: LD_INT 144
7458: PPUSH
7459: LD_INT 111
7461: PPUSH
7462: CALL_OW 111
// wait ( 0 0$2 ) ;
7466: LD_INT 70
7468: PPUSH
7469: CALL_OW 67
// PlaceSeeing ( 167 , 121 , 1 , - 10 ) ;
7473: LD_INT 167
7475: PPUSH
7476: LD_INT 121
7478: PPUSH
7479: LD_INT 1
7481: PPUSH
7482: LD_INT 10
7484: NEG
7485: PPUSH
7486: CALL_OW 330
// ComExitVehicle ( Kurt ) ;
7490: LD_EXP 17
7494: PPUSH
7495: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7499: LD_EXP 17
7503: PPUSH
7504: CALL_OW 87
// wait ( 0 0$1 ) ;
7508: LD_INT 35
7510: PPUSH
7511: CALL_OW 67
// DialogueOn ;
7515: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7519: LD_INT 22
7521: PUSH
7522: LD_INT 1
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: PUSH
7529: LD_INT 26
7531: PUSH
7532: LD_INT 1
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: PUSH
7539: LD_INT 2
7541: PUSH
7542: LD_INT 25
7544: PUSH
7545: LD_INT 1
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: PUSH
7552: LD_INT 25
7554: PUSH
7555: LD_INT 2
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: PUSH
7562: LD_INT 25
7564: PUSH
7565: LD_INT 3
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: PUSH
7572: LD_INT 25
7574: PUSH
7575: LD_INT 4
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: PUSH
7582: LD_INT 25
7584: PUSH
7585: LD_INT 5
7587: PUSH
7588: EMPTY
7589: LIST
7590: LIST
7591: PUSH
7592: LD_INT 25
7594: PUSH
7595: LD_INT 8
7597: PUSH
7598: EMPTY
7599: LIST
7600: LIST
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: PUSH
7611: EMPTY
7612: LIST
7613: LIST
7614: LIST
7615: PPUSH
7616: CALL_OW 69
7620: PPUSH
7621: LD_STRING D3-Sol1-1
7623: PPUSH
7624: LD_STRING 
7626: PPUSH
7627: CALL 12642 0 3
// if KurtStatus then
7631: LD_EXP 19
7635: IFFALSE 7735
// begin Say ( Kurt , D3-Kurt-1 ) ;
7637: LD_EXP 17
7641: PPUSH
7642: LD_STRING D3-Kurt-1
7644: PPUSH
7645: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7649: LD_EXP 1
7653: PPUSH
7654: LD_STRING D3-JMM-1
7656: PPUSH
7657: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7661: LD_EXP 17
7665: PPUSH
7666: LD_STRING D3-Kurt-2
7668: PPUSH
7669: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7673: LD_EXP 1
7677: PPUSH
7678: LD_STRING D3-JMM-2
7680: PPUSH
7681: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7685: LD_EXP 17
7689: PPUSH
7690: LD_STRING D3-Kurt-4
7692: PPUSH
7693: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7697: LD_EXP 1
7701: PPUSH
7702: LD_STRING D3-JMM-4
7704: PPUSH
7705: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7709: LD_EXP 17
7713: PPUSH
7714: LD_STRING D3-Kurt-5
7716: PPUSH
7717: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7721: LD_EXP 17
7725: PPUSH
7726: LD_STRING D3-Kurt-5a
7728: PPUSH
7729: CALL_OW 88
// end else
7733: GO 7831
// begin Say ( Kurt , D3-Kurt-1 ) ;
7735: LD_EXP 17
7739: PPUSH
7740: LD_STRING D3-Kurt-1
7742: PPUSH
7743: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7747: LD_EXP 1
7751: PPUSH
7752: LD_STRING D3-JMM-1
7754: PPUSH
7755: CALL_OW 88
// Say ( Kurt , D3-Kurt-3 ) ;
7759: LD_EXP 17
7763: PPUSH
7764: LD_STRING D3-Kurt-3
7766: PPUSH
7767: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7771: LD_EXP 1
7775: PPUSH
7776: LD_STRING D3-JMM-3
7778: PPUSH
7779: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7783: LD_EXP 17
7787: PPUSH
7788: LD_STRING D3-Kurt-4
7790: PPUSH
7791: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7795: LD_EXP 1
7799: PPUSH
7800: LD_STRING D3-JMM-4
7802: PPUSH
7803: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7807: LD_EXP 17
7811: PPUSH
7812: LD_STRING D3-Kurt-5
7814: PPUSH
7815: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
7819: LD_EXP 17
7823: PPUSH
7824: LD_STRING D3-Kurt-5b
7826: PPUSH
7827: CALL_OW 88
// end ; if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
7831: LD_VAR 0 8
7835: PUSH
7836: LD_INT 120
7838: PUSH
7839: LD_INT 60
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: PUSH
7846: LD_EXP 19
7850: PUSH
7851: LD_INT 1
7853: PLUS
7854: ARRAY
7855: GREATEREQUAL
7856: PUSH
7857: LD_VAR 0 10
7861: PUSH
7862: LD_INT 120
7864: PUSH
7865: LD_INT 60
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: PUSH
7872: LD_EXP 19
7876: PUSH
7877: LD_INT 1
7879: PLUS
7880: ARRAY
7881: GREATEREQUAL
7882: AND
7883: IFFALSE 7935
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
7885: LD_ADDR_VAR 0 3
7889: PUSH
7890: LD_STRING Q2
7892: PUSH
7893: LD_STRING Q2K
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: LD_EXP 19
7904: PUSH
7905: LD_INT 1
7907: PLUS
7908: ARRAY
7909: PPUSH
7910: LD_INT 1
7912: PUSH
7913: LD_INT 2
7915: PUSH
7916: LD_INT 3
7918: PUSH
7919: LD_INT 4
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: PPUSH
7928: CALL_OW 98
7932: ST_TO_ADDR
7933: GO 7979
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 3 , 4 ] ) ;
7935: LD_ADDR_VAR 0 3
7939: PUSH
7940: LD_STRING Q2
7942: PUSH
7943: LD_STRING Q2K
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: PUSH
7950: LD_EXP 19
7954: PUSH
7955: LD_INT 1
7957: PLUS
7958: ARRAY
7959: PPUSH
7960: LD_INT 1
7962: PUSH
7963: LD_INT 3
7965: PUSH
7966: LD_INT 4
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: LIST
7973: PPUSH
7974: CALL_OW 98
7978: ST_TO_ADDR
// if dec1 = 1 then
7979: LD_VAR 0 3
7983: PUSH
7984: LD_INT 1
7986: EQUAL
7987: IFFALSE 8021
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7989: LD_EXP 1
7993: PPUSH
7994: LD_STRING D3Ka-JMM-1
7996: PPUSH
7997: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
8001: LD_EXP 17
8005: PPUSH
8006: LD_STRING D3Ka-Kurt-1
8008: PPUSH
8009: CALL_OW 88
// warWithLegion = 1 ;
8013: LD_ADDR_EXP 23
8017: PUSH
8018: LD_INT 1
8020: ST_TO_ADDR
// end ; if dec1 = 2 then
8021: LD_VAR 0 3
8025: PUSH
8026: LD_INT 2
8028: EQUAL
8029: IFFALSE 8113
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8031: LD_EXP 1
8035: PPUSH
8036: LD_STRING D3Kb-JMM-1
8038: PPUSH
8039: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8043: LD_EXP 17
8047: PPUSH
8048: LD_STRING D3Kb-Kurt-1
8050: PPUSH
8051: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8055: LD_ADDR_VAR 0 11
8059: PUSH
8060: LD_INT 120
8062: PUSH
8063: LD_INT 60
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: PUSH
8070: LD_EXP 19
8074: PUSH
8075: LD_INT 1
8077: PLUS
8078: ARRAY
8079: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8080: LD_ADDR_VAR 0 12
8084: PUSH
8085: LD_INT 120
8087: PUSH
8088: LD_INT 60
8090: PUSH
8091: EMPTY
8092: LIST
8093: LIST
8094: PUSH
8095: LD_EXP 19
8099: PUSH
8100: LD_INT 1
8102: PLUS
8103: ARRAY
8104: ST_TO_ADDR
// payForNeutral := true ;
8105: LD_ADDR_VAR 0 13
8109: PUSH
8110: LD_INT 1
8112: ST_TO_ADDR
// end ; if dec1 = 3 then
8113: LD_VAR 0 3
8117: PUSH
8118: LD_INT 3
8120: EQUAL
8121: IFFALSE 8356
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8123: LD_EXP 1
8127: PPUSH
8128: LD_STRING D3Kc1-JMM-1
8130: PPUSH
8131: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8135: LD_EXP 17
8139: PPUSH
8140: LD_STRING D3Kc1-Kurt-1
8142: PPUSH
8143: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8147: LD_EXP 1
8151: PPUSH
8152: LD_STRING D3Kc1-JMM-2
8154: PPUSH
8155: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8159: LD_EXP 17
8163: PPUSH
8164: LD_STRING D3Kc1-Kurt-2
8166: PPUSH
8167: CALL_OW 88
// askSiberite = 1 ;
8171: LD_ADDR_EXP 25
8175: PUSH
8176: LD_INT 1
8178: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8179: LD_ADDR_VAR 0 4
8183: PUSH
8184: LD_STRING Q2b
8186: PPUSH
8187: LD_INT 1
8189: PUSH
8190: LD_INT 2
8192: PUSH
8193: LD_INT 3
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: LIST
8200: PPUSH
8201: CALL_OW 98
8205: ST_TO_ADDR
// if dec2 = 1 then
8206: LD_VAR 0 4
8210: PUSH
8211: LD_INT 1
8213: EQUAL
8214: IFFALSE 8248
// begin Say ( JMM , D4a-JMM-1 ) ;
8216: LD_EXP 1
8220: PPUSH
8221: LD_STRING D4a-JMM-1
8223: PPUSH
8224: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8228: LD_EXP 17
8232: PPUSH
8233: LD_STRING D4b-Kurt-1
8235: PPUSH
8236: CALL_OW 88
// warWithLegion = 1 ;
8240: LD_ADDR_EXP 23
8244: PUSH
8245: LD_INT 1
8247: ST_TO_ADDR
// end ; if dec2 = 2 then
8248: LD_VAR 0 4
8252: PUSH
8253: LD_INT 2
8255: EQUAL
8256: IFFALSE 8290
// begin Say ( JMM , D4b-JMM-1 ) ;
8258: LD_EXP 1
8262: PPUSH
8263: LD_STRING D4b-JMM-1
8265: PPUSH
8266: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8270: LD_EXP 17
8274: PPUSH
8275: LD_STRING D4b-Kurt-1
8277: PPUSH
8278: CALL_OW 88
// warWithLegion = 1 ;
8282: LD_ADDR_EXP 23
8286: PUSH
8287: LD_INT 1
8289: ST_TO_ADDR
// end ; if dec2 = 3 then
8290: LD_VAR 0 4
8294: PUSH
8295: LD_INT 3
8297: EQUAL
8298: IFFALSE 8356
// begin Say ( JMM , D4c-JMM-1 ) ;
8300: LD_EXP 1
8304: PPUSH
8305: LD_STRING D4c-JMM-1
8307: PPUSH
8308: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8312: LD_EXP 17
8316: PPUSH
8317: LD_STRING D4c-Kurt-1
8319: PPUSH
8320: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8324: LD_EXP 1
8328: PPUSH
8329: LD_STRING D4c-JMM-2
8331: PPUSH
8332: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8336: LD_EXP 17
8340: PPUSH
8341: LD_STRING D4c-Kurt-2
8343: PPUSH
8344: CALL_OW 88
// fakeInfo = 1 ;
8348: LD_ADDR_EXP 24
8352: PUSH
8353: LD_INT 1
8355: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
8356: LD_VAR 0 3
8360: PUSH
8361: LD_INT 4
8363: EQUAL
8364: IFFALSE 9426
// begin Say ( JMM , D3Kd-JMM-1 ) ;
8366: LD_EXP 1
8370: PPUSH
8371: LD_STRING D3Kd-JMM-1
8373: PPUSH
8374: CALL_OW 88
// if crates >= [ 200 , 120 ] [ KurtStatus + 1 ] and siberite >= [ 200 , 120 ] [ KurtStatus + 1 ] then
8378: LD_VAR 0 8
8382: PUSH
8383: LD_INT 200
8385: PUSH
8386: LD_INT 120
8388: PUSH
8389: EMPTY
8390: LIST
8391: LIST
8392: PUSH
8393: LD_EXP 19
8397: PUSH
8398: LD_INT 1
8400: PLUS
8401: ARRAY
8402: GREATEREQUAL
8403: PUSH
8404: LD_VAR 0 10
8408: PUSH
8409: LD_INT 200
8411: PUSH
8412: LD_INT 120
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: PUSH
8419: LD_EXP 19
8423: PUSH
8424: LD_INT 1
8426: PLUS
8427: ARRAY
8428: GREATEREQUAL
8429: AND
8430: IFFALSE 8482
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8432: LD_ADDR_VAR 0 4
8436: PUSH
8437: LD_STRING Q2a
8439: PUSH
8440: LD_STRING Q2aK
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: PUSH
8447: LD_EXP 19
8451: PUSH
8452: LD_INT 1
8454: PLUS
8455: ARRAY
8456: PPUSH
8457: LD_INT 1
8459: PUSH
8460: LD_INT 2
8462: PUSH
8463: LD_INT 3
8465: PUSH
8466: LD_INT 4
8468: PUSH
8469: EMPTY
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: PPUSH
8475: CALL_OW 98
8479: ST_TO_ADDR
8480: GO 8646
// if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
8482: LD_VAR 0 8
8486: PUSH
8487: LD_INT 120
8489: PUSH
8490: LD_INT 60
8492: PUSH
8493: EMPTY
8494: LIST
8495: LIST
8496: PUSH
8497: LD_EXP 19
8501: PUSH
8502: LD_INT 1
8504: PLUS
8505: ARRAY
8506: GREATEREQUAL
8507: PUSH
8508: LD_VAR 0 10
8512: PUSH
8513: LD_INT 120
8515: PUSH
8516: LD_INT 60
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: PUSH
8523: LD_EXP 19
8527: PUSH
8528: LD_INT 1
8530: PLUS
8531: ARRAY
8532: GREATEREQUAL
8533: AND
8534: IFFALSE 8582
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 4 ] ) else
8536: LD_ADDR_VAR 0 4
8540: PUSH
8541: LD_STRING Q2a
8543: PUSH
8544: LD_STRING Q2aK
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PUSH
8551: LD_EXP 19
8555: PUSH
8556: LD_INT 1
8558: PLUS
8559: ARRAY
8560: PPUSH
8561: LD_INT 1
8563: PUSH
8564: LD_INT 2
8566: PUSH
8567: LD_INT 4
8569: PUSH
8570: EMPTY
8571: LIST
8572: LIST
8573: LIST
8574: PPUSH
8575: CALL_OW 98
8579: ST_TO_ADDR
8580: GO 8646
// begin Query ( [ Q2d , Q2dK ] [ KurtStatus + 1 ] ) ;
8582: LD_STRING Q2d
8584: PUSH
8585: LD_STRING Q2dK
8587: PUSH
8588: EMPTY
8589: LIST
8590: LIST
8591: PUSH
8592: LD_EXP 19
8596: PUSH
8597: LD_INT 1
8599: PLUS
8600: ARRAY
8601: PPUSH
8602: CALL_OW 97
// dec2 := 0 ;
8606: LD_ADDR_VAR 0 4
8610: PUSH
8611: LD_INT 0
8613: ST_TO_ADDR
// Say ( JMM , D3Kc1-JMM-1 ) ;
8614: LD_EXP 1
8618: PPUSH
8619: LD_STRING D3Kc1-JMM-1
8621: PPUSH
8622: CALL_OW 88
// Say ( Kurt , D3Kc2-Kurt-1 ) ;
8626: LD_EXP 17
8630: PPUSH
8631: LD_STRING D3Kc2-Kurt-1
8633: PPUSH
8634: CALL_OW 88
// warWithLegion := 1 ;
8638: LD_ADDR_EXP 23
8642: PUSH
8643: LD_INT 1
8645: ST_TO_ADDR
// end ; if dec2 = 1 then
8646: LD_VAR 0 4
8650: PUSH
8651: LD_INT 1
8653: EQUAL
8654: IFFALSE 8688
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8656: LD_EXP 1
8660: PPUSH
8661: LD_STRING D5Ka-JMM-1
8663: PPUSH
8664: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
8668: LD_EXP 17
8672: PPUSH
8673: LD_STRING D5Ka-Kurt-1
8675: PPUSH
8676: CALL_OW 88
// warWithLegion = 1 ;
8680: LD_ADDR_EXP 23
8684: PUSH
8685: LD_INT 1
8687: ST_TO_ADDR
// end ; if dec2 = 2 then
8688: LD_VAR 0 4
8692: PUSH
8693: LD_INT 2
8695: EQUAL
8696: IFFALSE 8780
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8698: LD_EXP 1
8702: PPUSH
8703: LD_STRING D3Kb-JMM-1
8705: PPUSH
8706: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8710: LD_EXP 17
8714: PPUSH
8715: LD_STRING D3Kb-Kurt-1
8717: PPUSH
8718: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8722: LD_ADDR_VAR 0 11
8726: PUSH
8727: LD_INT 120
8729: PUSH
8730: LD_INT 60
8732: PUSH
8733: EMPTY
8734: LIST
8735: LIST
8736: PUSH
8737: LD_EXP 19
8741: PUSH
8742: LD_INT 1
8744: PLUS
8745: ARRAY
8746: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8747: LD_ADDR_VAR 0 12
8751: PUSH
8752: LD_INT 120
8754: PUSH
8755: LD_INT 60
8757: PUSH
8758: EMPTY
8759: LIST
8760: LIST
8761: PUSH
8762: LD_EXP 19
8766: PUSH
8767: LD_INT 1
8769: PLUS
8770: ARRAY
8771: ST_TO_ADDR
// payForNeutral := true ;
8772: LD_ADDR_VAR 0 13
8776: PUSH
8777: LD_INT 1
8779: ST_TO_ADDR
// end ; if dec2 = 3 then
8780: LD_VAR 0 4
8784: PUSH
8785: LD_INT 3
8787: EQUAL
8788: IFFALSE 8872
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8790: LD_EXP 1
8794: PPUSH
8795: LD_STRING D3Ke-JMM-1
8797: PPUSH
8798: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
8802: LD_EXP 17
8806: PPUSH
8807: LD_STRING D3Ke-Kurt-1
8809: PPUSH
8810: CALL_OW 88
// cr := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8814: LD_ADDR_VAR 0 11
8818: PUSH
8819: LD_INT 200
8821: PUSH
8822: LD_INT 120
8824: PUSH
8825: EMPTY
8826: LIST
8827: LIST
8828: PUSH
8829: LD_EXP 19
8833: PUSH
8834: LD_INT 1
8836: PLUS
8837: ARRAY
8838: ST_TO_ADDR
// sb := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8839: LD_ADDR_VAR 0 12
8843: PUSH
8844: LD_INT 200
8846: PUSH
8847: LD_INT 120
8849: PUSH
8850: EMPTY
8851: LIST
8852: LIST
8853: PUSH
8854: LD_EXP 19
8858: PUSH
8859: LD_INT 1
8861: PLUS
8862: ARRAY
8863: ST_TO_ADDR
// payForHelp := true ;
8864: LD_ADDR_VAR 0 14
8868: PUSH
8869: LD_INT 1
8871: ST_TO_ADDR
// end ; if dec2 = 4 then
8872: LD_VAR 0 4
8876: PUSH
8877: LD_INT 4
8879: EQUAL
8880: IFFALSE 9115
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8882: LD_EXP 1
8886: PPUSH
8887: LD_STRING D3Kc1-JMM-1
8889: PPUSH
8890: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8894: LD_EXP 17
8898: PPUSH
8899: LD_STRING D3Kc1-Kurt-1
8901: PPUSH
8902: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8906: LD_EXP 1
8910: PPUSH
8911: LD_STRING D3Kc1-JMM-2
8913: PPUSH
8914: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8918: LD_EXP 17
8922: PPUSH
8923: LD_STRING D3Kc1-Kurt-2
8925: PPUSH
8926: CALL_OW 88
// askSiberite = 1 ;
8930: LD_ADDR_EXP 25
8934: PUSH
8935: LD_INT 1
8937: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8938: LD_ADDR_VAR 0 4
8942: PUSH
8943: LD_STRING Q2b
8945: PPUSH
8946: LD_INT 1
8948: PUSH
8949: LD_INT 2
8951: PUSH
8952: LD_INT 3
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: LIST
8959: PPUSH
8960: CALL_OW 98
8964: ST_TO_ADDR
// if dec2 = 1 then
8965: LD_VAR 0 4
8969: PUSH
8970: LD_INT 1
8972: EQUAL
8973: IFFALSE 9007
// begin Say ( JMM , D4a-JMM-1 ) ;
8975: LD_EXP 1
8979: PPUSH
8980: LD_STRING D4a-JMM-1
8982: PPUSH
8983: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8987: LD_EXP 17
8991: PPUSH
8992: LD_STRING D4b-Kurt-1
8994: PPUSH
8995: CALL_OW 88
// warWithLegion = 1 ;
8999: LD_ADDR_EXP 23
9003: PUSH
9004: LD_INT 1
9006: ST_TO_ADDR
// end ; if dec2 = 2 then
9007: LD_VAR 0 4
9011: PUSH
9012: LD_INT 2
9014: EQUAL
9015: IFFALSE 9049
// begin Say ( JMM , D4b-JMM-1 ) ;
9017: LD_EXP 1
9021: PPUSH
9022: LD_STRING D4b-JMM-1
9024: PPUSH
9025: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
9029: LD_EXP 17
9033: PPUSH
9034: LD_STRING D4b-Kurt-1
9036: PPUSH
9037: CALL_OW 88
// warWithLegion = 1 ;
9041: LD_ADDR_EXP 23
9045: PUSH
9046: LD_INT 1
9048: ST_TO_ADDR
// end ; if dec2 = 3 then
9049: LD_VAR 0 4
9053: PUSH
9054: LD_INT 3
9056: EQUAL
9057: IFFALSE 9115
// begin Say ( JMM , D4c-JMM-1 ) ;
9059: LD_EXP 1
9063: PPUSH
9064: LD_STRING D4c-JMM-1
9066: PPUSH
9067: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
9071: LD_EXP 17
9075: PPUSH
9076: LD_STRING D4c-Kurt-1
9078: PPUSH
9079: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9083: LD_EXP 1
9087: PPUSH
9088: LD_STRING D4c-JMM-2
9090: PPUSH
9091: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
9095: LD_EXP 17
9099: PPUSH
9100: LD_STRING D4c-Kurt-2
9102: PPUSH
9103: CALL_OW 88
// fakeInfo = 1 ;
9107: LD_ADDR_EXP 24
9111: PUSH
9112: LD_INT 1
9114: ST_TO_ADDR
// end ; end ; if payForNeutral or payForHelp then
9115: LD_VAR 0 13
9119: PUSH
9120: LD_VAR 0 14
9124: OR
9125: IFFALSE 9426
// begin for i in tmp do
9127: LD_ADDR_VAR 0 2
9131: PUSH
9132: LD_VAR 0 5
9136: PUSH
9137: FOR_IN
9138: IFFALSE 9424
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
9140: LD_ADDR_VAR 0 6
9144: PUSH
9145: LD_VAR 0 2
9149: PPUSH
9150: CALL_OW 274
9154: PPUSH
9155: LD_INT 1
9157: PPUSH
9158: CALL_OW 275
9162: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
9163: LD_ADDR_VAR 0 7
9167: PUSH
9168: LD_VAR 0 2
9172: PPUSH
9173: CALL_OW 274
9177: PPUSH
9178: LD_INT 3
9180: PPUSH
9181: CALL_OW 275
9185: ST_TO_ADDR
// if cr then
9186: LD_VAR 0 11
9190: IFFALSE 9304
// begin if tmp2 and tmp2 < cr then
9192: LD_VAR 0 6
9196: PUSH
9197: LD_VAR 0 6
9201: PUSH
9202: LD_VAR 0 11
9206: LESS
9207: AND
9208: IFFALSE 9256
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
9210: LD_VAR 0 2
9214: PPUSH
9215: CALL_OW 274
9219: PPUSH
9220: LD_INT 1
9222: PPUSH
9223: LD_VAR 0 11
9227: PUSH
9228: LD_VAR 0 6
9232: MINUS
9233: PPUSH
9234: CALL_OW 277
// cr := cr - tmp2 ;
9238: LD_ADDR_VAR 0 11
9242: PUSH
9243: LD_VAR 0 11
9247: PUSH
9248: LD_VAR 0 6
9252: MINUS
9253: ST_TO_ADDR
// end else
9254: GO 9304
// if tmp2 > cr then
9256: LD_VAR 0 6
9260: PUSH
9261: LD_VAR 0 11
9265: GREATER
9266: IFFALSE 9304
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
9268: LD_VAR 0 2
9272: PPUSH
9273: CALL_OW 274
9277: PPUSH
9278: LD_INT 1
9280: PPUSH
9281: LD_VAR 0 6
9285: PUSH
9286: LD_VAR 0 11
9290: MINUS
9291: PPUSH
9292: CALL_OW 277
// cr := 0 ;
9296: LD_ADDR_VAR 0 11
9300: PUSH
9301: LD_INT 0
9303: ST_TO_ADDR
// end ; end ; if sb then
9304: LD_VAR 0 12
9308: IFFALSE 9422
// begin if tmp3 and tmp3 < sb then
9310: LD_VAR 0 7
9314: PUSH
9315: LD_VAR 0 7
9319: PUSH
9320: LD_VAR 0 12
9324: LESS
9325: AND
9326: IFFALSE 9374
// begin SetResourceType ( GetBase ( i ) , 3 , sb - tmp3 ) ;
9328: LD_VAR 0 2
9332: PPUSH
9333: CALL_OW 274
9337: PPUSH
9338: LD_INT 3
9340: PPUSH
9341: LD_VAR 0 12
9345: PUSH
9346: LD_VAR 0 7
9350: MINUS
9351: PPUSH
9352: CALL_OW 277
// sb := sb - tmp3 ;
9356: LD_ADDR_VAR 0 12
9360: PUSH
9361: LD_VAR 0 12
9365: PUSH
9366: LD_VAR 0 7
9370: MINUS
9371: ST_TO_ADDR
// end else
9372: GO 9422
// if tmp3 > sb then
9374: LD_VAR 0 7
9378: PUSH
9379: LD_VAR 0 12
9383: GREATER
9384: IFFALSE 9422
// begin SetResourceType ( GetBase ( i ) , 3 , tmp3 - sb ) ;
9386: LD_VAR 0 2
9390: PPUSH
9391: CALL_OW 274
9395: PPUSH
9396: LD_INT 3
9398: PPUSH
9399: LD_VAR 0 7
9403: PUSH
9404: LD_VAR 0 12
9408: MINUS
9409: PPUSH
9410: CALL_OW 277
// sb := 0 ;
9414: LD_ADDR_VAR 0 12
9418: PUSH
9419: LD_INT 0
9421: ST_TO_ADDR
// end ; end ; end ;
9422: GO 9137
9424: POP
9425: POP
// end ; end ; DialogueOff ;
9426: CALL_OW 7
// RemoveSeeing ( 167 , 121 , 1 ) ;
9430: LD_INT 167
9432: PPUSH
9433: LD_INT 121
9435: PPUSH
9436: LD_INT 1
9438: PPUSH
9439: CALL_OW 331
// ComEnterUnit ( Kurt , KurtVeh ) ;
9443: LD_EXP 17
9447: PPUSH
9448: LD_EXP 18
9452: PPUSH
9453: CALL_OW 120
// wait ( 0 0$1 ) ;
9457: LD_INT 35
9459: PPUSH
9460: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9464: LD_EXP 18
9468: PPUSH
9469: LD_INT 4
9471: PPUSH
9472: CALL_OW 113
// wait ( 0 0$3 ) ;
9476: LD_INT 105
9478: PPUSH
9479: CALL_OW 67
// RemoveUnit ( Kurt ) ;
9483: LD_EXP 17
9487: PPUSH
9488: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9492: LD_EXP 18
9496: PPUSH
9497: CALL_OW 64
// wait ( 0 0$3 ) ;
9501: LD_INT 105
9503: PPUSH
9504: CALL_OW 67
// if payForHelp then
9508: LD_VAR 0 14
9512: IFFALSE 9570
// begin HiddenCamera ( 36 , 57 , 1 ) ;
9514: LD_INT 36
9516: PPUSH
9517: LD_INT 57
9519: PPUSH
9520: LD_INT 1
9522: PPUSH
9523: CALL_OW 244
// HiddenCamera ( 51 , 63 , 1 ) ;
9527: LD_INT 51
9529: PPUSH
9530: LD_INT 63
9532: PPUSH
9533: LD_INT 1
9535: PPUSH
9536: CALL_OW 244
// HiddenCamera ( 93 , 65 , 1 ) ;
9540: LD_INT 93
9542: PPUSH
9543: LD_INT 65
9545: PPUSH
9546: LD_INT 1
9548: PPUSH
9549: CALL_OW 244
// HiddenCamera ( 42 , 12 , 1 ) ;
9553: LD_INT 42
9555: PPUSH
9556: LD_INT 12
9558: PPUSH
9559: LD_INT 1
9561: PPUSH
9562: CALL_OW 244
// PrepareLegionForPlayer ;
9566: CALL 5170 0 0
// end ; end ;
9570: LD_VAR 0 1
9574: RET
// every 0 0$10 trigger warWithLegion = 1 do
9575: LD_EXP 23
9579: PUSH
9580: LD_INT 1
9582: EQUAL
9583: IFFALSE 9599
9585: GO 9587
9587: DISABLE
// begin wait ( 0 0$30 ) ;
9588: LD_INT 1050
9590: PPUSH
9591: CALL_OW 67
// PrepareAttackLegion ;
9595: CALL 5811 0 0
// end ;
9599: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do var i ;
9600: LD_INT 120
9602: PUSH
9603: LD_INT 17
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: PUSH
9610: LD_INT 52
9612: PUSH
9613: EMPTY
9614: LIST
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: PPUSH
9620: CALL_OW 69
9624: IFFALSE 9769
9626: GO 9628
9628: DISABLE
9629: LD_INT 0
9631: PPUSH
// begin enable ;
9632: ENABLE
// for i in FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do
9633: LD_ADDR_VAR 0 1
9637: PUSH
9638: LD_INT 120
9640: PUSH
9641: LD_INT 17
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: PUSH
9648: LD_INT 52
9650: PUSH
9651: EMPTY
9652: LIST
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: PPUSH
9658: CALL_OW 69
9662: PUSH
9663: FOR_IN
9664: IFFALSE 9767
// begin if GetMultiCargo ( i ) [ 4 ] = 0 and GetSide ( i ) = 1 then
9666: LD_VAR 0 1
9670: PPUSH
9671: CALL 81958 0 1
9675: PUSH
9676: LD_INT 4
9678: ARRAY
9679: PUSH
9680: LD_INT 0
9682: EQUAL
9683: PUSH
9684: LD_VAR 0 1
9688: PPUSH
9689: CALL_OW 255
9693: PUSH
9694: LD_INT 1
9696: EQUAL
9697: AND
9698: IFFALSE 9712
// SetSide ( i , 4 ) ;
9700: LD_VAR 0 1
9704: PPUSH
9705: LD_INT 4
9707: PPUSH
9708: CALL_OW 235
// if GetSide ( i ) = 4 then
9712: LD_VAR 0 1
9716: PPUSH
9717: CALL_OW 255
9721: PUSH
9722: LD_INT 4
9724: EQUAL
9725: IFFALSE 9765
// if not IsInArea ( i , PlayerSpawn ) then
9727: LD_VAR 0 1
9731: PPUSH
9732: LD_INT 4
9734: PPUSH
9735: CALL_OW 308
9739: NOT
9740: IFFALSE 9756
// ComMoveToArea ( i , PlayerSpawn ) else
9742: LD_VAR 0 1
9746: PPUSH
9747: LD_INT 4
9749: PPUSH
9750: CALL_OW 113
9754: GO 9765
// RemoveUnit ( i ) ;
9756: LD_VAR 0 1
9760: PPUSH
9761: CALL_OW 64
// end ;
9765: GO 9663
9767: POP
9768: POP
// end ;
9769: PPOPN 1
9771: END
// every 0 0$3 trigger secondPass = 1 and FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_type , unit_vehicle ] ] ) do var i , enemyVehs , dec ;
9772: LD_EXP 20
9776: PUSH
9777: LD_INT 1
9779: EQUAL
9780: PUSH
9781: LD_INT 12
9783: PPUSH
9784: LD_INT 22
9786: PUSH
9787: LD_INT 3
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PUSH
9794: LD_INT 101
9796: PUSH
9797: LD_INT 1
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: PUSH
9804: LD_INT 21
9806: PUSH
9807: LD_INT 2
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: LIST
9818: PPUSH
9819: CALL_OW 70
9823: AND
9824: IFFALSE 10373
9826: GO 9828
9828: DISABLE
9829: LD_INT 0
9831: PPUSH
9832: PPUSH
9833: PPUSH
// begin DialogueOn ;
9834: CALL_OW 6
// CenterNowOnUnits ( i ) ;
9838: LD_VAR 0 1
9842: PPUSH
9843: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
9847: LD_INT 22
9849: PUSH
9850: LD_INT 1
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: PUSH
9857: LD_INT 26
9859: PUSH
9860: LD_INT 1
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: LD_INT 2
9869: PUSH
9870: LD_INT 25
9872: PUSH
9873: LD_INT 1
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: PUSH
9880: LD_INT 25
9882: PUSH
9883: LD_INT 2
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: PUSH
9890: LD_INT 25
9892: PUSH
9893: LD_INT 3
9895: PUSH
9896: EMPTY
9897: LIST
9898: LIST
9899: PUSH
9900: LD_INT 25
9902: PUSH
9903: LD_INT 4
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: PUSH
9910: LD_INT 25
9912: PUSH
9913: LD_INT 5
9915: PUSH
9916: EMPTY
9917: LIST
9918: LIST
9919: PUSH
9920: LD_INT 25
9922: PUSH
9923: LD_INT 8
9925: PUSH
9926: EMPTY
9927: LIST
9928: LIST
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: LIST
9943: PPUSH
9944: CALL_OW 69
9948: PPUSH
9949: LD_STRING DT1-Sol1-1
9951: PPUSH
9952: LD_STRING DT1-FSol1-1
9954: PPUSH
9955: CALL 12642 0 3
// dec := ShowQuery2 ;
9959: LD_ADDR_VAR 0 3
9963: PUSH
9964: CALL 13126 0 0
9968: ST_TO_ADDR
// if dec = 1 then
9969: LD_VAR 0 3
9973: PUSH
9974: LD_INT 1
9976: EQUAL
9977: IFFALSE 10083
// begin Say ( JMM , D2-JMM-1 ) ;
9979: LD_EXP 1
9983: PPUSH
9984: LD_STRING D2-JMM-1
9986: PPUSH
9987: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9991: LD_EXP 15
9995: PPUSH
9996: LD_STRING D2-Pow-1
9998: PPUSH
9999: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
10003: LD_EXP 1
10007: PPUSH
10008: LD_STRING D2a-JMM-1
10010: PPUSH
10011: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
10015: LD_EXP 15
10019: PPUSH
10020: LD_STRING D2a-Pow-1
10022: PPUSH
10023: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
10027: LD_EXP 1
10031: PPUSH
10032: LD_STRING D2a-JMM-2
10034: PPUSH
10035: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10039: LD_EXP 15
10043: PPUSH
10044: LD_STRING D2a-Pow-2
10046: PPUSH
10047: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10051: LD_EXP 1
10055: PPUSH
10056: LD_STRING D2a-JMM-3
10058: PPUSH
10059: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10063: LD_EXP 15
10067: PPUSH
10068: LD_STRING D2a-Pow-3
10070: PPUSH
10071: CALL_OW 94
// secondPass := 2 ;
10075: LD_ADDR_EXP 20
10079: PUSH
10080: LD_INT 2
10082: ST_TO_ADDR
// end ; if dec = 2 then
10083: LD_VAR 0 3
10087: PUSH
10088: LD_INT 2
10090: EQUAL
10091: IFFALSE 10185
// begin Say ( JMM , D2-JMM-1 ) ;
10093: LD_EXP 1
10097: PPUSH
10098: LD_STRING D2-JMM-1
10100: PPUSH
10101: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10105: LD_EXP 15
10109: PPUSH
10110: LD_STRING D2-Pow-1
10112: PPUSH
10113: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
10117: LD_EXP 1
10121: PPUSH
10122: LD_STRING D2b-JMM-1
10124: PPUSH
10125: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
10129: LD_EXP 15
10133: PPUSH
10134: LD_STRING D2b-Pow-1
10136: PPUSH
10137: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10141: LD_EXP 1
10145: PPUSH
10146: LD_STRING D2c-JMM-1
10148: PPUSH
10149: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10153: LD_EXP 15
10157: PPUSH
10158: LD_STRING D2c-Pow-1
10160: PPUSH
10161: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10165: LD_EXP 1
10169: PPUSH
10170: LD_STRING D2c-JMM-2
10172: PPUSH
10173: CALL_OW 88
// secondPass := 2 ;
10177: LD_ADDR_EXP 20
10181: PUSH
10182: LD_INT 2
10184: ST_TO_ADDR
// end ; DialogueOff ;
10185: CALL_OW 7
// if secondPass = 2 then
10189: LD_EXP 20
10193: PUSH
10194: LD_INT 2
10196: EQUAL
10197: IFFALSE 10201
// exit ;
10199: GO 10373
// Query ( HelpRequest ) ;
10201: LD_STRING HelpRequest
10203: PPUSH
10204: CALL_OW 97
// SetAreaMapShow ( helpRequestArea , 1 ) ;
10208: LD_INT 27
10210: PPUSH
10211: LD_INT 1
10213: PPUSH
10214: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
10218: LD_INT 35
10220: PPUSH
10221: CALL_OW 67
// until IsInArea ( JMM , helpRequestArea ) ;
10225: LD_EXP 1
10229: PPUSH
10230: LD_INT 27
10232: PPUSH
10233: CALL_OW 308
10237: IFFALSE 10218
// SetAreaMapShow ( helpRequestArea , 0 ) ;
10239: LD_INT 27
10241: PPUSH
10242: LD_INT 0
10244: PPUSH
10245: CALL_OW 424
// DialogueOn ;
10249: CALL_OW 6
// Say ( JMM , D2-JMM-1 ) ;
10253: LD_EXP 1
10257: PPUSH
10258: LD_STRING D2-JMM-1
10260: PPUSH
10261: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10265: LD_EXP 15
10269: PPUSH
10270: LD_STRING D2-Pow-1
10272: PPUSH
10273: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
10277: LD_EXP 1
10281: PPUSH
10282: LD_STRING D2b-JMM-1
10284: PPUSH
10285: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10289: LD_EXP 15
10293: PPUSH
10294: LD_STRING D2a-Pow-2
10296: PPUSH
10297: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10301: LD_EXP 1
10305: PPUSH
10306: LD_STRING D2a-JMM-3
10308: PPUSH
10309: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10313: LD_EXP 15
10317: PPUSH
10318: LD_STRING D2a-Pow-3
10320: PPUSH
10321: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10325: LD_EXP 1
10329: PPUSH
10330: LD_STRING D2c-JMM-1
10332: PPUSH
10333: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10337: LD_EXP 15
10341: PPUSH
10342: LD_STRING D2c-Pow-1
10344: PPUSH
10345: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10349: LD_EXP 1
10353: PPUSH
10354: LD_STRING D2c-JMM-2
10356: PPUSH
10357: CALL_OW 88
// DialogueOff ;
10361: CALL_OW 7
// secondPass := 2 ;
10365: LD_ADDR_EXP 20
10369: PUSH
10370: LD_INT 2
10372: ST_TO_ADDR
// end ;
10373: PPOPN 3
10375: END
// every 0 0$1 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) do var vehicles ;
10376: LD_EXP 21
10380: PUSH
10381: LD_INT 1
10383: EQUAL
10384: PUSH
10385: LD_INT 11
10387: PPUSH
10388: LD_INT 22
10390: PUSH
10391: LD_INT 3
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PPUSH
10398: CALL_OW 70
10402: AND
10403: IFFALSE 10884
10405: GO 10407
10407: DISABLE
10408: LD_INT 0
10410: PPUSH
// begin vehicles := FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
10411: LD_ADDR_VAR 0 1
10415: PUSH
10416: LD_INT 11
10418: PPUSH
10419: LD_INT 22
10421: PUSH
10422: LD_INT 3
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: PPUSH
10429: CALL_OW 70
10433: ST_TO_ADDR
// if not vehicles then
10434: LD_VAR 0 1
10438: NOT
10439: IFFALSE 10443
// exit ;
10441: GO 10884
// repeat wait ( 0 0$1 ) ;
10443: LD_INT 35
10445: PPUSH
10446: CALL_OW 67
// until UnitFilter ( vehicles , [ f_see , 1 ] ) ;
10450: LD_VAR 0 1
10454: PPUSH
10455: LD_INT 101
10457: PUSH
10458: LD_INT 1
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: PPUSH
10465: CALL_OW 72
10469: IFFALSE 10443
// CenterNowOnUnits ( UnitFilter ( vehicles , [ f_see , 1 ] ) [ 1 ] ) ;
10471: LD_VAR 0 1
10475: PPUSH
10476: LD_INT 101
10478: PUSH
10479: LD_INT 1
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: PPUSH
10486: CALL_OW 72
10490: PUSH
10491: LD_INT 1
10493: ARRAY
10494: PPUSH
10495: CALL_OW 87
// DialogueOn ;
10499: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10503: LD_INT 22
10505: PUSH
10506: LD_INT 1
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: LD_INT 26
10515: PUSH
10516: LD_INT 1
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: PUSH
10523: LD_INT 23
10525: PUSH
10526: LD_INT 1
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: PUSH
10533: LD_INT 2
10535: PUSH
10536: LD_INT 25
10538: PUSH
10539: LD_INT 1
10541: PUSH
10542: EMPTY
10543: LIST
10544: LIST
10545: PUSH
10546: LD_INT 25
10548: PUSH
10549: LD_INT 2
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: PUSH
10556: LD_INT 25
10558: PUSH
10559: LD_INT 3
10561: PUSH
10562: EMPTY
10563: LIST
10564: LIST
10565: PUSH
10566: LD_INT 25
10568: PUSH
10569: LD_INT 4
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: PUSH
10576: LD_INT 25
10578: PUSH
10579: LD_INT 5
10581: PUSH
10582: EMPTY
10583: LIST
10584: LIST
10585: PUSH
10586: LD_INT 25
10588: PUSH
10589: LD_INT 8
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: PUSH
10596: EMPTY
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: PUSH
10605: EMPTY
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: PPUSH
10611: CALL_OW 69
10615: PPUSH
10616: LD_STRING DT1-Sol1-1
10618: PPUSH
10619: LD_STRING DT1-FSol1-1
10621: PPUSH
10622: CALL 12642 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10626: LD_EXP 1
10630: PPUSH
10631: LD_STRING DT1-JMM-1
10633: PPUSH
10634: CALL_OW 88
// DialogueOff ;
10638: CALL_OW 7
// repeat wait ( 0 0$05 ) ;
10642: LD_INT 175
10644: PPUSH
10645: CALL_OW 67
// until FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter > 2 ;
10649: LD_INT 11
10651: PPUSH
10652: LD_INT 22
10654: PUSH
10655: LD_INT 3
10657: PUSH
10658: EMPTY
10659: LIST
10660: LIST
10661: PUSH
10662: LD_INT 50
10664: PUSH
10665: EMPTY
10666: LIST
10667: PUSH
10668: LD_INT 2
10670: PUSH
10671: LD_INT 21
10673: PUSH
10674: LD_INT 2
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: PUSH
10681: LD_INT 21
10683: PUSH
10684: LD_INT 1
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: PUSH
10691: EMPTY
10692: LIST
10693: LIST
10694: LIST
10695: PUSH
10696: EMPTY
10697: LIST
10698: LIST
10699: LIST
10700: PPUSH
10701: CALL_OW 70
10705: PUSH
10706: LD_INT 0
10708: EQUAL
10709: PUSH
10710: LD_EXP 22
10714: PUSH
10715: LD_INT 2
10717: GREATER
10718: AND
10719: IFFALSE 10642
// DialogueOn ;
10721: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
10725: LD_EXP 1
10729: PPUSH
10730: LD_STRING DT1a-JMM-1
10732: PPUSH
10733: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
10737: LD_INT 22
10739: PUSH
10740: LD_INT 1
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PUSH
10747: LD_INT 26
10749: PUSH
10750: LD_INT 1
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: PUSH
10757: LD_INT 23
10759: PUSH
10760: LD_INT 1
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: PUSH
10767: LD_INT 2
10769: PUSH
10770: LD_INT 25
10772: PUSH
10773: LD_INT 1
10775: PUSH
10776: EMPTY
10777: LIST
10778: LIST
10779: PUSH
10780: LD_INT 25
10782: PUSH
10783: LD_INT 2
10785: PUSH
10786: EMPTY
10787: LIST
10788: LIST
10789: PUSH
10790: LD_INT 25
10792: PUSH
10793: LD_INT 3
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: PUSH
10800: LD_INT 25
10802: PUSH
10803: LD_INT 4
10805: PUSH
10806: EMPTY
10807: LIST
10808: LIST
10809: PUSH
10810: LD_INT 25
10812: PUSH
10813: LD_INT 5
10815: PUSH
10816: EMPTY
10817: LIST
10818: LIST
10819: PUSH
10820: LD_INT 25
10822: PUSH
10823: LD_INT 8
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: PUSH
10830: EMPTY
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: PPUSH
10845: CALL_OW 69
10849: PPUSH
10850: LD_STRING DT1a-Sol1-1
10852: PPUSH
10853: LD_STRING DT1a-FSol1-1
10855: PPUSH
10856: CALL 12642 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
10860: LD_EXP 1
10864: PPUSH
10865: LD_STRING DT1a-JMM-2
10867: PPUSH
10868: CALL_OW 88
// DialogueOff ;
10872: CALL_OW 7
// vehicleTeleported := 2 ;
10876: LD_ADDR_EXP 21
10880: PUSH
10881: LD_INT 2
10883: ST_TO_ADDR
// end ;
10884: PPOPN 1
10886: END
// every 0 0$2 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] ] ) do var i , vehicles , speaker ;
10887: LD_EXP 21
10891: PUSH
10892: LD_INT 3
10894: EQUAL
10895: PUSH
10896: LD_INT 11
10898: PPUSH
10899: LD_INT 22
10901: PUSH
10902: LD_INT 3
10904: PUSH
10905: EMPTY
10906: LIST
10907: LIST
10908: PUSH
10909: LD_INT 101
10911: PUSH
10912: LD_INT 1
10914: PUSH
10915: EMPTY
10916: LIST
10917: LIST
10918: PUSH
10919: EMPTY
10920: LIST
10921: LIST
10922: PPUSH
10923: CALL_OW 70
10927: AND
10928: IFFALSE 11213
10930: GO 10932
10932: DISABLE
10933: LD_INT 0
10935: PPUSH
10936: PPUSH
10937: PPUSH
// begin wait ( 0 0$0.3 ) ;
10938: LD_INT 10
10940: PPUSH
10941: CALL_OW 67
// DialogueOn ;
10945: CALL_OW 6
// speaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
10949: LD_ADDR_VAR 0 3
10953: PUSH
10954: LD_INT 22
10956: PUSH
10957: LD_INT 1
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: PUSH
10964: LD_INT 23
10966: PUSH
10967: LD_INT 1
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: PUSH
10974: LD_INT 26
10976: PUSH
10977: LD_INT 1
10979: PUSH
10980: EMPTY
10981: LIST
10982: LIST
10983: PUSH
10984: LD_INT 2
10986: PUSH
10987: LD_INT 25
10989: PUSH
10990: LD_INT 1
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: PUSH
10997: LD_INT 25
10999: PUSH
11000: LD_INT 2
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: PUSH
11007: LD_INT 25
11009: PUSH
11010: LD_INT 3
11012: PUSH
11013: EMPTY
11014: LIST
11015: LIST
11016: PUSH
11017: LD_INT 25
11019: PUSH
11020: LD_INT 4
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: PUSH
11027: LD_INT 25
11029: PUSH
11030: LD_INT 5
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: PUSH
11037: LD_INT 25
11039: PUSH
11040: LD_INT 8
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: PUSH
11047: EMPTY
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: PPUSH
11062: CALL_OW 69
11066: PPUSH
11067: LD_STRING DT2-Sol1-1
11069: PPUSH
11070: LD_STRING DT2-FSol1-1
11072: PPUSH
11073: CALL 12642 0 3
11077: ST_TO_ADDR
// DialogueOff ;
11078: CALL_OW 7
// repeat wait ( 0 0$5 ) ;
11082: LD_INT 175
11084: PPUSH
11085: CALL_OW 67
// until not FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] ] ) ;
11089: LD_INT 11
11091: PPUSH
11092: LD_INT 22
11094: PUSH
11095: LD_INT 3
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: PUSH
11102: LD_INT 50
11104: PUSH
11105: EMPTY
11106: LIST
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: PPUSH
11112: CALL_OW 70
11116: NOT
11117: IFFALSE 11082
// wait ( 0 0$2 ) ;
11119: LD_INT 70
11121: PPUSH
11122: CALL_OW 67
// vehicleTeleported := 4 ;
11126: LD_ADDR_EXP 21
11130: PUSH
11131: LD_INT 4
11133: ST_TO_ADDR
// DialogueOn ;
11134: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
11138: LD_EXP 1
11142: PPUSH
11143: LD_STRING DT2a-JMM-1
11145: PPUSH
11146: CALL_OW 88
// if speaker then
11150: LD_VAR 0 3
11154: IFFALSE 11197
// if GetSex ( speaker ) = 1 then
11156: LD_VAR 0 3
11160: PPUSH
11161: CALL_OW 258
11165: PUSH
11166: LD_INT 1
11168: EQUAL
11169: IFFALSE 11185
// Say ( speaker , DT2a-Sol1-1 ) else
11171: LD_VAR 0 3
11175: PPUSH
11176: LD_STRING DT2a-Sol1-1
11178: PPUSH
11179: CALL_OW 88
11183: GO 11197
// Say ( speaker , DT2a-FSol1-1 ) ;
11185: LD_VAR 0 3
11189: PPUSH
11190: LD_STRING DT2a-FSol1-1
11192: PPUSH
11193: CALL_OW 88
// Say ( Donaldson , DT2a-Don-1 ) ;
11197: LD_EXP 3
11201: PPUSH
11202: LD_STRING DT2a-Don-1
11204: PPUSH
11205: CALL_OW 88
// DialogueOff ;
11209: CALL_OW 7
// end ;
11213: PPOPN 3
11215: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
11216: LD_INT 1
11218: PPUSH
11219: LD_INT 45
11221: PPUSH
11222: LD_INT 74
11224: PPUSH
11225: CALL_OW 293
11229: IFFALSE 11404
11231: GO 11233
11233: DISABLE
// begin DialogueOn ;
11234: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
11238: LD_INT 36
11240: PPUSH
11241: LD_INT 55
11243: PPUSH
11244: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
11248: LD_INT 22
11250: PUSH
11251: LD_INT 1
11253: PUSH
11254: EMPTY
11255: LIST
11256: LIST
11257: PUSH
11258: LD_INT 23
11260: PUSH
11261: LD_INT 1
11263: PUSH
11264: EMPTY
11265: LIST
11266: LIST
11267: PUSH
11268: LD_INT 26
11270: PUSH
11271: LD_INT 1
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: PUSH
11278: LD_INT 2
11280: PUSH
11281: LD_INT 25
11283: PUSH
11284: LD_INT 1
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: PUSH
11291: LD_INT 25
11293: PUSH
11294: LD_INT 2
11296: PUSH
11297: EMPTY
11298: LIST
11299: LIST
11300: PUSH
11301: LD_INT 25
11303: PUSH
11304: LD_INT 3
11306: PUSH
11307: EMPTY
11308: LIST
11309: LIST
11310: PUSH
11311: LD_INT 25
11313: PUSH
11314: LD_INT 4
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: PUSH
11321: LD_INT 25
11323: PUSH
11324: LD_INT 5
11326: PUSH
11327: EMPTY
11328: LIST
11329: LIST
11330: PUSH
11331: LD_INT 25
11333: PUSH
11334: LD_INT 8
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: PPUSH
11356: CALL_OW 69
11360: PPUSH
11361: LD_STRING D5-Sol1-1
11363: PPUSH
11364: LD_STRING D5-FSol1-
11366: PPUSH
11367: CALL 12642 0 3
// if warWithLegion and IsOk ( Donaldson ) then
11371: LD_EXP 23
11375: PUSH
11376: LD_EXP 3
11380: PPUSH
11381: CALL_OW 302
11385: AND
11386: IFFALSE 11400
// Say ( Donaldson , D5-Don-1 ) ;
11388: LD_EXP 3
11392: PPUSH
11393: LD_STRING D5-Don-1
11395: PPUSH
11396: CALL_OW 88
// DialogueOff ;
11400: CALL_OW 7
// end ;
11404: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
11405: LD_INT 1
11407: PPUSH
11408: LD_INT 10
11410: PPUSH
11411: CALL_OW 292
11415: PUSH
11416: LD_INT 1
11418: PPUSH
11419: LD_INT 137
11421: PPUSH
11422: CALL_OW 292
11426: OR
11427: IFFALSE 11582
11429: GO 11431
11431: DISABLE
// begin DialogueOn ;
11432: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
11436: LD_INT 22
11438: PUSH
11439: LD_INT 1
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: PUSH
11446: LD_INT 23
11448: PUSH
11449: LD_INT 1
11451: PUSH
11452: EMPTY
11453: LIST
11454: LIST
11455: PUSH
11456: LD_INT 26
11458: PUSH
11459: LD_INT 1
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: PUSH
11466: LD_INT 2
11468: PUSH
11469: LD_INT 25
11471: PUSH
11472: LD_INT 1
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: PUSH
11479: LD_INT 25
11481: PUSH
11482: LD_INT 2
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: PUSH
11489: LD_INT 25
11491: PUSH
11492: LD_INT 3
11494: PUSH
11495: EMPTY
11496: LIST
11497: LIST
11498: PUSH
11499: LD_INT 25
11501: PUSH
11502: LD_INT 4
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: PUSH
11509: LD_INT 25
11511: PUSH
11512: LD_INT 5
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: PUSH
11519: LD_INT 25
11521: PUSH
11522: LD_INT 8
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: PUSH
11538: EMPTY
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: PPUSH
11544: CALL_OW 69
11548: PPUSH
11549: LD_STRING DT3-Sol1-1
11551: PPUSH
11552: LD_STRING DT3-FSol1-1
11554: PPUSH
11555: CALL 12642 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11559: LD_EXP 1
11563: PPUSH
11564: LD_STRING DT3-JMM-1
11566: PPUSH
11567: CALL_OW 88
// DialogueOff ;
11571: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11575: LD_STRING M2
11577: PPUSH
11578: CALL_OW 337
// end ;
11582: END
// every 0 0$1 trigger ruEscape = 0 and ( FilterUnitsInArea ( RuEastBase , [ f_side , 1 ] ) or FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_not , [ f_lives , 800 ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ) or GetLives ( rutp ) < 900 do
11583: LD_EXP 35
11587: PUSH
11588: LD_INT 0
11590: EQUAL
11591: PUSH
11592: LD_INT 10
11594: PPUSH
11595: LD_INT 22
11597: PUSH
11598: LD_INT 1
11600: PUSH
11601: EMPTY
11602: LIST
11603: LIST
11604: PPUSH
11605: CALL_OW 70
11609: PUSH
11610: LD_INT 10
11612: PPUSH
11613: LD_INT 22
11615: PUSH
11616: LD_INT 3
11618: PUSH
11619: EMPTY
11620: LIST
11621: LIST
11622: PUSH
11623: LD_INT 3
11625: PUSH
11626: LD_INT 24
11628: PUSH
11629: LD_INT 800
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: PUSH
11640: LD_INT 21
11642: PUSH
11643: LD_INT 2
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: PUSH
11650: LD_INT 58
11652: PUSH
11653: EMPTY
11654: LIST
11655: PUSH
11656: EMPTY
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: PPUSH
11662: CALL_OW 70
11666: OR
11667: AND
11668: PUSH
11669: LD_INT 137
11671: PPUSH
11672: CALL_OW 256
11676: PUSH
11677: LD_INT 900
11679: LESS
11680: OR
11681: IFFALSE 11694
11683: GO 11685
11685: DISABLE
// ruEscape := 1 ;
11686: LD_ADDR_EXP 35
11690: PUSH
11691: LD_INT 1
11693: ST_TO_ADDR
11694: END
// every 0 0$3 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or ruEscape = 1 do var i , unit , tmp ;
11695: LD_INT 3
11697: PPUSH
11698: CALL_OW 303
11702: PUSH
11703: LD_INT 4
11705: PPUSH
11706: CALL_OW 303
11710: OR
11711: PUSH
11712: LD_EXP 35
11716: PUSH
11717: LD_INT 1
11719: EQUAL
11720: OR
11721: IFFALSE 12310
11723: GO 11725
11725: DISABLE
11726: LD_INT 0
11728: PPUSH
11729: PPUSH
11730: PPUSH
// begin ruAI := 0 ;
11731: LD_ADDR_EXP 34
11735: PUSH
11736: LD_INT 0
11738: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
11739: LD_EXP 27
11743: PPUSH
11744: CALL_OW 122
// wait ( 0 0$1 ) ;
11748: LD_INT 35
11750: PPUSH
11751: CALL_OW 67
// DialogueOn ;
11755: CALL_OW 6
// PlaceSeeing ( 75 , 21 , 1 , 12 ) ;
11759: LD_INT 75
11761: PPUSH
11762: LD_INT 21
11764: PPUSH
11765: LD_INT 1
11767: PPUSH
11768: LD_INT 12
11770: PPUSH
11771: CALL_OW 330
// CenterNowOnXY ( 75 , 21 ) ;
11775: LD_INT 75
11777: PPUSH
11778: LD_INT 21
11780: PPUSH
11781: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
11785: LD_INT 10
11787: PPUSH
11788: CALL_OW 68
// Say ( JMM , D6-JMM-1 ) ;
11792: LD_EXP 1
11796: PPUSH
11797: LD_STRING D6-JMM-1
11799: PPUSH
11800: CALL_OW 88
// RemoveSeeing ( 75 , 21 , 1 ) ;
11804: LD_INT 75
11806: PPUSH
11807: LD_INT 21
11809: PPUSH
11810: LD_INT 1
11812: PPUSH
11813: CALL_OW 331
// DialogueOff ;
11817: CALL_OW 7
// for i in RuScientists do
11821: LD_ADDR_VAR 0 1
11825: PUSH
11826: LD_EXP 27
11830: PUSH
11831: FOR_IN
11832: IFFALSE 11868
// begin SetSide ( i , 6 ) ;
11834: LD_VAR 0 1
11838: PPUSH
11839: LD_INT 6
11841: PPUSH
11842: CALL_OW 235
// SetTag ( i , rand ( 1 , 3 ) ) ;
11846: LD_VAR 0 1
11850: PPUSH
11851: LD_INT 1
11853: PPUSH
11854: LD_INT 3
11856: PPUSH
11857: CALL_OW 12
11861: PPUSH
11862: CALL_OW 109
// end ;
11866: GO 11831
11868: POP
11869: POP
// repeat wait ( 0 0$1 ) ;
11870: LD_INT 35
11872: PPUSH
11873: CALL_OW 67
// for i in RuScientists do
11877: LD_ADDR_VAR 0 1
11881: PUSH
11882: LD_EXP 27
11886: PUSH
11887: FOR_IN
11888: IFFALSE 12301
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , i , 10 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11890: LD_ADDR_VAR 0 3
11894: PUSH
11895: LD_INT 22
11897: PUSH
11898: LD_INT 3
11900: PUSH
11901: EMPTY
11902: LIST
11903: LIST
11904: PUSH
11905: LD_INT 91
11907: PUSH
11908: LD_VAR 0 1
11912: PUSH
11913: LD_INT 10
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: LIST
11920: PUSH
11921: LD_INT 21
11923: PUSH
11924: LD_INT 2
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: PUSH
11931: LD_INT 58
11933: PUSH
11934: EMPTY
11935: LIST
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: PPUSH
11943: CALL_OW 69
11947: ST_TO_ADDR
// if tmp and not IsInUnit ( i ) then
11948: LD_VAR 0 3
11952: PUSH
11953: LD_VAR 0 1
11957: PPUSH
11958: CALL_OW 310
11962: NOT
11963: AND
11964: IFFALSE 11992
// begin ComEnterUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
11966: LD_VAR 0 1
11970: PPUSH
11971: LD_VAR 0 3
11975: PPUSH
11976: LD_VAR 0 1
11980: PPUSH
11981: CALL_OW 74
11985: PPUSH
11986: CALL_OW 120
// continue ;
11990: GO 11887
// end ; if IsInUnit ( i ) then
11992: LD_VAR 0 1
11996: PPUSH
11997: CALL_OW 310
12001: IFFALSE 12020
// unit := IsInUnit ( i ) else
12003: LD_ADDR_VAR 0 2
12007: PUSH
12008: LD_VAR 0 1
12012: PPUSH
12013: CALL_OW 310
12017: ST_TO_ADDR
12018: GO 12030
// unit := i ;
12020: LD_ADDR_VAR 0 2
12024: PUSH
12025: LD_VAR 0 1
12029: ST_TO_ADDR
// case GetTag ( i ) of 1 :
12030: LD_VAR 0 1
12034: PPUSH
12035: CALL_OW 110
12039: PUSH
12040: LD_INT 1
12042: DOUBLE
12043: EQUAL
12044: IFTRUE 12048
12046: GO 12107
12048: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
12049: LD_VAR 0 2
12053: PPUSH
12054: LD_INT 137
12056: PPUSH
12057: CALL_OW 296
12061: PUSH
12062: LD_INT 13
12064: LESS
12065: PUSH
12066: LD_INT 137
12068: PPUSH
12069: CALL_OW 302
12073: AND
12074: IFFALSE 12090
// ComEnterUnit ( unit , rutp ) else
12076: LD_VAR 0 2
12080: PPUSH
12081: LD_INT 137
12083: PPUSH
12084: CALL_OW 120
12088: GO 12105
// ComMoveXY ( unit , 16 , 28 ) ;
12090: LD_VAR 0 2
12094: PPUSH
12095: LD_INT 16
12097: PPUSH
12098: LD_INT 28
12100: PPUSH
12101: CALL_OW 111
// end ; 2 :
12105: GO 12299
12107: LD_INT 2
12109: DOUBLE
12110: EQUAL
12111: IFTRUE 12115
12113: GO 12133
12115: POP
// ComMoveXY ( unit , 97 , 2 ) ; 3 :
12116: LD_VAR 0 2
12120: PPUSH
12121: LD_INT 97
12123: PPUSH
12124: LD_INT 2
12126: PPUSH
12127: CALL_OW 111
12131: GO 12299
12133: LD_INT 3
12135: DOUBLE
12136: EQUAL
12137: IFTRUE 12141
12139: GO 12200
12141: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
12142: LD_VAR 0 2
12146: PPUSH
12147: LD_INT 137
12149: PPUSH
12150: CALL_OW 296
12154: PUSH
12155: LD_INT 13
12157: LESS
12158: PUSH
12159: LD_INT 137
12161: PPUSH
12162: CALL_OW 302
12166: AND
12167: IFFALSE 12183
// ComEnterUnit ( unit , rutp ) else
12169: LD_VAR 0 2
12173: PPUSH
12174: LD_INT 137
12176: PPUSH
12177: CALL_OW 120
12181: GO 12198
// ComMoveXY ( unit , 128 , 155 ) ;
12183: LD_VAR 0 2
12187: PPUSH
12188: LD_INT 128
12190: PPUSH
12191: LD_INT 155
12193: PPUSH
12194: CALL_OW 111
// end ; 11 :
12198: GO 12299
12200: LD_INT 11
12202: DOUBLE
12203: EQUAL
12204: IFTRUE 12208
12206: GO 12226
12208: POP
// ComMoveXY ( unit , 16 , 28 ) ; 13 :
12209: LD_VAR 0 2
12213: PPUSH
12214: LD_INT 16
12216: PPUSH
12217: LD_INT 28
12219: PPUSH
12220: CALL_OW 111
12224: GO 12299
12226: LD_INT 13
12228: DOUBLE
12229: EQUAL
12230: IFTRUE 12234
12232: GO 12272
12234: POP
// begin if IsOk ( ruteleprt ) then
12235: LD_INT 10
12237: PPUSH
12238: CALL_OW 302
12242: IFFALSE 12258
// ComEnterUnit ( unit , ruteleprt ) else
12244: LD_VAR 0 2
12248: PPUSH
12249: LD_INT 10
12251: PPUSH
12252: CALL_OW 120
12256: GO 12270
// SetTag ( unit , 23 ) ;
12258: LD_VAR 0 2
12262: PPUSH
12263: LD_INT 23
12265: PPUSH
12266: CALL_OW 109
// end ; 23 :
12270: GO 12299
12272: LD_INT 23
12274: DOUBLE
12275: EQUAL
12276: IFTRUE 12280
12278: GO 12298
12280: POP
// ComMoveXY ( unit , 128 , 155 ) ; end ;
12281: LD_VAR 0 2
12285: PPUSH
12286: LD_INT 128
12288: PPUSH
12289: LD_INT 155
12291: PPUSH
12292: CALL_OW 111
12296: GO 12299
12298: POP
// end ;
12299: GO 11887
12301: POP
12302: POP
// until not RuScientists ;
12303: LD_EXP 27
12307: NOT
12308: IFFALSE 11870
// end ;
12310: PPOPN 3
12312: END
// every 0 0$1 trigger ruAI = 0 and RuScientists and FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do var i , unit , veh , tmp ;
12313: LD_EXP 34
12317: PUSH
12318: LD_INT 0
12320: EQUAL
12321: PUSH
12322: LD_EXP 27
12326: AND
12327: PUSH
12328: LD_INT 22
12330: PUSH
12331: LD_INT 6
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: PUSH
12338: LD_INT 2
12340: PUSH
12341: LD_INT 95
12343: PUSH
12344: LD_INT 13
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PUSH
12351: LD_INT 95
12353: PUSH
12354: LD_INT 14
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PUSH
12361: LD_INT 95
12363: PUSH
12364: LD_INT 25
12366: PUSH
12367: EMPTY
12368: LIST
12369: LIST
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: PPUSH
12381: CALL_OW 69
12385: AND
12386: IFFALSE 12599
12388: GO 12390
12390: DISABLE
12391: LD_INT 0
12393: PPUSH
12394: PPUSH
12395: PPUSH
12396: PPUSH
// begin enable ;
12397: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do
12398: LD_ADDR_VAR 0 1
12402: PUSH
12403: LD_INT 22
12405: PUSH
12406: LD_INT 6
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: PUSH
12413: LD_INT 2
12415: PUSH
12416: LD_INT 95
12418: PUSH
12419: LD_INT 13
12421: PUSH
12422: EMPTY
12423: LIST
12424: LIST
12425: PUSH
12426: LD_INT 95
12428: PUSH
12429: LD_INT 14
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: PUSH
12436: LD_INT 95
12438: PUSH
12439: LD_INT 25
12441: PUSH
12442: EMPTY
12443: LIST
12444: LIST
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: PPUSH
12456: CALL_OW 69
12460: PUSH
12461: FOR_IN
12462: IFFALSE 12597
// begin if i in RuScientists then
12464: LD_VAR 0 1
12468: PUSH
12469: LD_EXP 27
12473: IN
12474: IFFALSE 12503
// begin RuScientists = RuScientists diff i ;
12476: LD_ADDR_EXP 27
12480: PUSH
12481: LD_EXP 27
12485: PUSH
12486: LD_VAR 0 1
12490: DIFF
12491: ST_TO_ADDR
// RemoveUnit ( i ) ;
12492: LD_VAR 0 1
12496: PPUSH
12497: CALL_OW 64
// continue ;
12501: GO 12461
// end ; if i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_manual ] ] ) then
12503: LD_VAR 0 1
12507: PUSH
12508: LD_INT 22
12510: PUSH
12511: LD_INT 6
12513: PUSH
12514: EMPTY
12515: LIST
12516: LIST
12517: PUSH
12518: LD_INT 33
12520: PUSH
12521: LD_INT 1
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: PPUSH
12532: CALL_OW 69
12536: IN
12537: IFFALSE 12595
// begin if IsDrivenBy ( i ) in RuScientists then
12539: LD_VAR 0 1
12543: PPUSH
12544: CALL_OW 311
12548: PUSH
12549: LD_EXP 27
12553: IN
12554: IFFALSE 12572
// RuScientists = RuScientists diff i ;
12556: LD_ADDR_EXP 27
12560: PUSH
12561: LD_EXP 27
12565: PUSH
12566: LD_VAR 0 1
12570: DIFF
12571: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
12572: LD_VAR 0 1
12576: PPUSH
12577: CALL_OW 311
12581: PPUSH
12582: CALL_OW 64
// RemoveUnit ( i ) ;
12586: LD_VAR 0 1
12590: PPUSH
12591: CALL_OW 64
// end ; end ;
12595: GO 12461
12597: POP
12598: POP
// end ; end_of_file
12599: PPOPN 4
12601: END
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12602: LD_INT 0
12604: PPUSH
12605: PPUSH
// for i in charactersList do
12606: LD_ADDR_VAR 0 4
12610: PUSH
12611: LD_VAR 0 1
12615: PUSH
12616: FOR_IN
12617: IFFALSE 12635
// SaveCharacters ( i , ident ) ;
12619: LD_VAR 0 4
12623: PPUSH
12624: LD_VAR 0 2
12628: PPUSH
12629: CALL_OW 38
12633: GO 12616
12635: POP
12636: POP
// end ;
12637: LD_VAR 0 3
12641: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
12642: LD_INT 0
12644: PPUSH
12645: PPUSH
12646: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12647: LD_ADDR_VAR 0 1
12651: PUSH
12652: LD_VAR 0 1
12656: PUSH
12657: LD_EXP 1
12661: PUSH
12662: LD_EXP 7
12666: PUSH
12667: LD_EXP 3
12671: PUSH
12672: LD_EXP 4
12676: PUSH
12677: LD_EXP 5
12681: PUSH
12682: LD_EXP 2
12686: PUSH
12687: LD_EXP 12
12691: PUSH
12692: LD_EXP 13
12696: PUSH
12697: LD_EXP 9
12701: PUSH
12702: LD_EXP 11
12706: PUSH
12707: LD_EXP 6
12711: PUSH
12712: LD_EXP 8
12716: PUSH
12717: LD_EXP 10
12721: PUSH
12722: LD_EXP 15
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: DIFF
12743: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
12744: LD_ADDR_VAR 0 6
12748: PUSH
12749: LD_VAR 0 1
12753: PUSH
12754: LD_INT 1
12756: PPUSH
12757: LD_VAR 0 1
12761: PPUSH
12762: CALL_OW 12
12766: ARRAY
12767: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
12768: LD_VAR 0 6
12772: PPUSH
12773: CALL_OW 258
12777: PUSH
12778: LD_INT 1
12780: EQUAL
12781: IFFALSE 12799
// Say ( speaker , dialogMID ) else
12783: LD_VAR 0 6
12787: PPUSH
12788: LD_VAR 0 2
12792: PPUSH
12793: CALL_OW 88
12797: GO 12813
// Say ( speaker , dialogFID ) ;
12799: LD_VAR 0 6
12803: PPUSH
12804: LD_VAR 0 3
12808: PPUSH
12809: CALL_OW 88
// result := speaker ;
12813: LD_ADDR_VAR 0 4
12817: PUSH
12818: LD_VAR 0 6
12822: ST_TO_ADDR
// end ;
12823: LD_VAR 0 4
12827: RET
// export function PrepareDifficulty ; var tmp ; begin
12828: LD_INT 0
12830: PPUSH
12831: PPUSH
// if Difficulty = 1 then
12832: LD_OWVAR 67
12836: PUSH
12837: LD_INT 1
12839: EQUAL
12840: IFFALSE 12860
// begin RuSolMinLevel = 6 ;
12842: LD_ADDR_EXP 29
12846: PUSH
12847: LD_INT 6
12849: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
12850: LD_ADDR_EXP 30
12854: PUSH
12855: LD_INT 8
12857: ST_TO_ADDR
// end else
12858: GO 13100
// if Difficulty = 2 then
12860: LD_OWVAR 67
12864: PUSH
12865: LD_INT 2
12867: EQUAL
12868: IFFALSE 12964
// begin RuSolMinLevel = 7 ;
12870: LD_ADDR_EXP 29
12874: PUSH
12875: LD_INT 7
12877: ST_TO_ADDR
// RuSolMaxLevel = 9 ;
12878: LD_ADDR_EXP 30
12882: PUSH
12883: LD_INT 9
12885: ST_TO_ADDR
// uc_nation = 3 ;
12886: LD_ADDR_OWVAR 21
12890: PUSH
12891: LD_INT 3
12893: ST_TO_ADDR
// uc_side = 3 ;
12894: LD_ADDR_OWVAR 20
12898: PUSH
12899: LD_INT 3
12901: ST_TO_ADDR
// bc_level = 10 ;
12902: LD_ADDR_OWVAR 43
12906: PUSH
12907: LD_INT 10
12909: ST_TO_ADDR
// bc_type = b_turret ;
12910: LD_ADDR_OWVAR 42
12914: PUSH
12915: LD_INT 33
12917: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12918: LD_ADDR_VAR 0 2
12922: PUSH
12923: LD_INT 86
12925: PPUSH
12926: LD_INT 34
12928: PPUSH
12929: LD_INT 2
12931: PPUSH
12932: CALL_OW 47
12936: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12937: LD_VAR 0 2
12941: PPUSH
12942: LD_INT 49
12944: PPUSH
12945: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12949: LD_INT 64
12951: PPUSH
12952: LD_INT 3
12954: PPUSH
12955: LD_INT 1
12957: PPUSH
12958: CALL_OW 322
// end else
12962: GO 13100
// begin RuSolMinLevel = 8 ;
12964: LD_ADDR_EXP 29
12968: PUSH
12969: LD_INT 8
12971: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12972: LD_ADDR_EXP 30
12976: PUSH
12977: LD_INT 10
12979: ST_TO_ADDR
// uc_nation = 3 ;
12980: LD_ADDR_OWVAR 21
12984: PUSH
12985: LD_INT 3
12987: ST_TO_ADDR
// uc_side = 3 ;
12988: LD_ADDR_OWVAR 20
12992: PUSH
12993: LD_INT 3
12995: ST_TO_ADDR
// bc_level = 10 ;
12996: LD_ADDR_OWVAR 43
13000: PUSH
13001: LD_INT 10
13003: ST_TO_ADDR
// bc_type = b_turret ;
13004: LD_ADDR_OWVAR 42
13008: PUSH
13009: LD_INT 33
13011: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
13012: LD_ADDR_VAR 0 2
13016: PUSH
13017: LD_INT 86
13019: PPUSH
13020: LD_INT 34
13022: PPUSH
13023: LD_INT 2
13025: PPUSH
13026: CALL_OW 47
13030: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13031: LD_VAR 0 2
13035: PPUSH
13036: LD_INT 49
13038: PPUSH
13039: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
13043: LD_ADDR_VAR 0 2
13047: PUSH
13048: LD_INT 93
13050: PPUSH
13051: LD_INT 31
13053: PPUSH
13054: LD_INT 2
13056: PPUSH
13057: CALL_OW 47
13061: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13062: LD_VAR 0 2
13066: PPUSH
13067: LD_INT 49
13069: PPUSH
13070: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
13074: LD_INT 64
13076: PPUSH
13077: LD_INT 3
13079: PPUSH
13080: LD_INT 1
13082: PPUSH
13083: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
13087: LD_INT 65
13089: PPUSH
13090: LD_INT 3
13092: PPUSH
13093: LD_INT 1
13095: PPUSH
13096: CALL_OW 322
// end ; end ;
13100: LD_VAR 0 1
13104: RET
// export function ShowQuery1 ; begin
13105: LD_INT 0
13107: PPUSH
// result := Query ( Q1 ) ;
13108: LD_ADDR_VAR 0 1
13112: PUSH
13113: LD_STRING Q1
13115: PPUSH
13116: CALL_OW 97
13120: ST_TO_ADDR
// end ;
13121: LD_VAR 0 1
13125: RET
// export function ShowQuery2 ; begin
13126: LD_INT 0
13128: PPUSH
// result := Query ( Q1a ) ;
13129: LD_ADDR_VAR 0 1
13133: PUSH
13134: LD_STRING Q1a
13136: PPUSH
13137: CALL_OW 97
13141: ST_TO_ADDR
// end ;
13142: LD_VAR 0 1
13146: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
13147: LD_INT 0
13149: PPUSH
13150: PPUSH
13151: PPUSH
13152: PPUSH
// for i = 1 to count do
13153: LD_ADDR_VAR 0 8
13157: PUSH
13158: DOUBLE
13159: LD_INT 1
13161: DEC
13162: ST_TO_ADDR
13163: LD_VAR 0 6
13167: PUSH
13168: FOR_TO
13169: IFFALSE 13250
// begin uc_side = side ;
13171: LD_ADDR_OWVAR 20
13175: PUSH
13176: LD_VAR 0 1
13180: ST_TO_ADDR
// uc_nation = nation ;
13181: LD_ADDR_OWVAR 21
13185: PUSH
13186: LD_VAR 0 2
13190: ST_TO_ADDR
// hc_gallery =  ;
13191: LD_ADDR_OWVAR 33
13195: PUSH
13196: LD_STRING 
13198: ST_TO_ADDR
// hc_name =  ;
13199: LD_ADDR_OWVAR 26
13203: PUSH
13204: LD_STRING 
13206: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
13207: LD_INT 0
13209: PPUSH
13210: LD_VAR 0 5
13214: PPUSH
13215: LD_VAR 0 4
13219: PPUSH
13220: CALL_OW 380
// un = CreateHuman ;
13224: LD_ADDR_VAR 0 10
13228: PUSH
13229: CALL_OW 44
13233: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
13234: LD_VAR 0 10
13238: PPUSH
13239: LD_VAR 0 3
13243: PPUSH
13244: CALL_OW 52
// end ;
13248: GO 13168
13250: POP
13251: POP
// end ;
13252: LD_VAR 0 7
13256: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , list ; begin
13257: LD_INT 0
13259: PPUSH
13260: PPUSH
13261: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
13262: LD_ADDR_VAR 0 6
13266: PUSH
13267: LD_INT 48
13269: PUSH
13270: LD_INT 49
13272: PUSH
13273: LD_INT 50
13275: PUSH
13276: LD_INT 20
13278: PUSH
13279: LD_INT 1
13281: PUSH
13282: LD_INT 51
13284: PUSH
13285: LD_INT 52
13287: PUSH
13288: LD_INT 69
13290: PUSH
13291: LD_INT 39
13293: PUSH
13294: LD_INT 34
13296: PUSH
13297: LD_INT 40
13299: PUSH
13300: LD_INT 53
13302: PUSH
13303: LD_INT 71
13305: PUSH
13306: LD_INT 57
13308: PUSH
13309: LD_INT 58
13311: PUSH
13312: LD_INT 44
13314: PUSH
13315: LD_INT 32
13317: PUSH
13318: LD_INT 27
13320: PUSH
13321: LD_INT 23
13323: PUSH
13324: LD_INT 33
13326: PUSH
13327: LD_INT 59
13329: PUSH
13330: LD_INT 54
13332: PUSH
13333: LD_INT 55
13335: PUSH
13336: LD_INT 56
13338: PUSH
13339: LD_INT 63
13341: PUSH
13342: LD_INT 64
13344: PUSH
13345: LD_INT 65
13347: PUSH
13348: LD_INT 30
13350: PUSH
13351: LD_INT 31
13353: PUSH
13354: LD_INT 21
13356: PUSH
13357: LD_INT 22
13359: PUSH
13360: LD_INT 25
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: ST_TO_ADDR
// for i := 1 to list do
13397: LD_ADDR_VAR 0 5
13401: PUSH
13402: DOUBLE
13403: LD_INT 1
13405: DEC
13406: ST_TO_ADDR
13407: LD_VAR 0 6
13411: PUSH
13412: FOR_TO
13413: IFFALSE 13485
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
13415: LD_VAR 0 6
13419: PUSH
13420: LD_VAR 0 5
13424: ARRAY
13425: PPUSH
13426: LD_VAR 0 1
13430: PPUSH
13431: CALL_OW 321
13435: PUSH
13436: LD_INT 1
13438: EQUAL
13439: PUSH
13440: LD_VAR 0 6
13444: PUSH
13445: LD_VAR 0 5
13449: ARRAY
13450: PPUSH
13451: LD_VAR 0 3
13455: PPUSH
13456: CALL_OW 482
13460: AND
13461: IFFALSE 13483
// AddComResearch ( lab , list [ i ] ) ;
13463: LD_VAR 0 2
13467: PPUSH
13468: LD_VAR 0 6
13472: PUSH
13473: LD_VAR 0 5
13477: ARRAY
13478: PPUSH
13479: CALL_OW 184
13483: GO 13412
13485: POP
13486: POP
// end ;
13487: LD_VAR 0 4
13491: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
13492: LD_INT 0
13494: PPUSH
13495: PPUSH
13496: PPUSH
13497: PPUSH
13498: PPUSH
13499: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
13500: LD_ADDR_VAR 0 8
13504: PUSH
13505: LD_VAR 0 2
13509: PPUSH
13510: CALL_OW 313
13514: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13515: LD_ADDR_VAR 0 9
13519: PUSH
13520: LD_VAR 0 3
13524: PPUSH
13525: LD_INT 22
13527: PUSH
13528: LD_VAR 0 1
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: PUSH
13537: LD_INT 25
13539: PUSH
13540: LD_INT 2
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: PUSH
13547: LD_INT 24
13549: PUSH
13550: LD_INT 750
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: PUSH
13557: LD_INT 3
13559: PUSH
13560: LD_INT 54
13562: PUSH
13563: EMPTY
13564: LIST
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: PPUSH
13576: CALL_OW 70
13580: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13581: LD_ADDR_VAR 0 6
13585: PUSH
13586: LD_VAR 0 3
13590: PPUSH
13591: LD_INT 22
13593: PUSH
13594: LD_VAR 0 1
13598: PUSH
13599: EMPTY
13600: LIST
13601: LIST
13602: PUSH
13603: LD_INT 21
13605: PUSH
13606: LD_INT 3
13608: PUSH
13609: EMPTY
13610: LIST
13611: LIST
13612: PUSH
13613: LD_INT 3
13615: PUSH
13616: LD_INT 24
13618: PUSH
13619: LD_INT 1000
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: LIST
13634: PUSH
13635: EMPTY
13636: LIST
13637: PPUSH
13638: CALL_OW 70
13642: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13643: LD_VAR 0 6
13647: NOT
13648: PUSH
13649: LD_INT 22
13651: PUSH
13652: LD_VAR 0 1
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: PUSH
13661: LD_INT 25
13663: PUSH
13664: LD_INT 2
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: PUSH
13671: LD_INT 24
13673: PUSH
13674: LD_INT 250
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: LIST
13685: PPUSH
13686: CALL_OW 69
13690: NOT
13691: AND
13692: IFFALSE 13696
// exit ;
13694: GO 13854
// if buildingsList and engineerOkInside then
13696: LD_VAR 0 6
13700: PUSH
13701: LD_VAR 0 8
13705: AND
13706: IFFALSE 13717
// ComExitBuilding ( engineerOkInside ) ;
13708: LD_VAR 0 8
13712: PPUSH
13713: CALL_OW 122
// if buildingsList and engineerOkOutside then
13717: LD_VAR 0 6
13721: PUSH
13722: LD_VAR 0 9
13726: AND
13727: IFFALSE 13747
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
13729: LD_VAR 0 9
13733: PPUSH
13734: LD_VAR 0 6
13738: PUSH
13739: LD_INT 1
13741: ARRAY
13742: PPUSH
13743: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
13747: LD_VAR 0 6
13751: PUSH
13752: LD_INT 0
13754: EQUAL
13755: PUSH
13756: LD_VAR 0 4
13760: PUSH
13761: LD_INT 0
13763: EQUAL
13764: AND
13765: PUSH
13766: LD_VAR 0 9
13770: AND
13771: IFFALSE 13787
// ComEnterUnit ( engineerOkOutside , depot ) ;
13773: LD_VAR 0 9
13777: PPUSH
13778: LD_VAR 0 2
13782: PPUSH
13783: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
13787: LD_VAR 0 9
13791: PUSH
13792: LD_VAR 0 6
13796: PUSH
13797: LD_INT 0
13799: EQUAL
13800: AND
13801: PUSH
13802: LD_VAR 0 4
13806: AND
13807: IFFALSE 13854
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13809: LD_VAR 0 9
13813: PPUSH
13814: LD_VAR 0 4
13818: PUSH
13819: LD_INT 1
13821: ARRAY
13822: PPUSH
13823: LD_VAR 0 4
13827: PUSH
13828: LD_INT 2
13830: ARRAY
13831: PPUSH
13832: LD_VAR 0 4
13836: PUSH
13837: LD_INT 3
13839: ARRAY
13840: PPUSH
13841: LD_VAR 0 4
13845: PUSH
13846: LD_INT 4
13848: ARRAY
13849: PPUSH
13850: CALL_OW 145
// end ;
13854: LD_VAR 0 5
13858: RET
// export function HealUnitInBase ( side , healArea , baseArea , buildings ) ; var sciList , sciListOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13859: LD_INT 0
13861: PPUSH
13862: PPUSH
13863: PPUSH
13864: PPUSH
13865: PPUSH
13866: PPUSH
13867: PPUSH
13868: PPUSH
13869: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13870: LD_ADDR_VAR 0 6
13874: PUSH
13875: LD_INT 22
13877: PUSH
13878: LD_VAR 0 1
13882: PUSH
13883: EMPTY
13884: LIST
13885: LIST
13886: PUSH
13887: LD_INT 25
13889: PUSH
13890: LD_INT 4
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: PUSH
13897: LD_INT 24
13899: PUSH
13900: LD_INT 251
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: LIST
13911: PPUSH
13912: CALL_OW 69
13916: PUSH
13917: LD_EXP 27
13921: PUSH
13922: EMPTY
13923: LIST
13924: DIFF
13925: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_outside ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13926: LD_ADDR_VAR 0 7
13930: PUSH
13931: LD_VAR 0 3
13935: PPUSH
13936: LD_INT 22
13938: PUSH
13939: LD_VAR 0 1
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: PUSH
13948: LD_INT 56
13950: PUSH
13951: EMPTY
13952: LIST
13953: PUSH
13954: LD_INT 25
13956: PUSH
13957: LD_INT 4
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PUSH
13964: LD_INT 50
13966: PUSH
13967: EMPTY
13968: LIST
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: PPUSH
13976: CALL_OW 70
13980: PUSH
13981: LD_EXP 27
13985: PUSH
13986: EMPTY
13987: LIST
13988: DIFF
13989: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13990: LD_ADDR_VAR 0 10
13994: PUSH
13995: LD_VAR 0 3
13999: PPUSH
14000: LD_INT 22
14002: PUSH
14003: LD_VAR 0 1
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: PUSH
14012: LD_INT 21
14014: PUSH
14015: LD_INT 1
14017: PUSH
14018: EMPTY
14019: LIST
14020: LIST
14021: PUSH
14022: LD_INT 3
14024: PUSH
14025: LD_INT 24
14027: PUSH
14028: LD_INT 750
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: LIST
14043: PPUSH
14044: CALL_OW 70
14048: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
14049: LD_ADDR_VAR 0 11
14053: PUSH
14054: LD_VAR 0 2
14058: PPUSH
14059: LD_INT 22
14061: PUSH
14062: LD_VAR 0 1
14066: PUSH
14067: EMPTY
14068: LIST
14069: LIST
14070: PUSH
14071: LD_INT 21
14073: PUSH
14074: LD_INT 1
14076: PUSH
14077: EMPTY
14078: LIST
14079: LIST
14080: PUSH
14081: LD_INT 3
14083: PUSH
14084: LD_INT 24
14086: PUSH
14087: LD_INT 1000
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: LIST
14102: PPUSH
14103: CALL_OW 70
14107: ST_TO_ADDR
// if damageUnits and sciList then
14108: LD_VAR 0 10
14112: PUSH
14113: LD_VAR 0 6
14117: AND
14118: IFFALSE 14134
// ComMoveToArea ( damageUnits , healArea ) ;
14120: LD_VAR 0 10
14124: PPUSH
14125: LD_VAR 0 2
14129: PPUSH
14130: CALL_OW 113
// if unitsToHeal and sciList and sciListOutside = 0 then
14134: LD_VAR 0 11
14138: PUSH
14139: LD_VAR 0 6
14143: AND
14144: PUSH
14145: LD_VAR 0 7
14149: PUSH
14150: LD_INT 0
14152: EQUAL
14153: AND
14154: IFFALSE 14200
// for i in buildings do
14156: LD_ADDR_VAR 0 8
14160: PUSH
14161: LD_VAR 0 4
14165: PUSH
14166: FOR_IN
14167: IFFALSE 14198
// begin if UnitsInside ( i ) then
14169: LD_VAR 0 8
14173: PPUSH
14174: CALL_OW 313
14178: IFFALSE 14196
// begin ComExitBuilding ( UnitsInside ( i ) ) ;
14180: LD_VAR 0 8
14184: PPUSH
14185: CALL_OW 313
14189: PPUSH
14190: CALL_OW 122
// break ;
14194: GO 14198
// end ; end ;
14196: GO 14166
14198: POP
14199: POP
// if unitsToHeal and sciListOutside then
14200: LD_VAR 0 11
14204: PUSH
14205: LD_VAR 0 7
14209: AND
14210: IFFALSE 14230
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
14212: LD_VAR 0 7
14216: PPUSH
14217: LD_VAR 0 11
14221: PUSH
14222: LD_INT 1
14224: ARRAY
14225: PPUSH
14226: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
14230: LD_VAR 0 10
14234: PUSH
14235: LD_INT 0
14237: EQUAL
14238: PUSH
14239: LD_VAR 0 11
14243: PUSH
14244: LD_INT 0
14246: EQUAL
14247: AND
14248: PUSH
14249: LD_VAR 0 7
14253: AND
14254: IFFALSE 14322
// begin tmp := buildings ;
14256: LD_ADDR_VAR 0 12
14260: PUSH
14261: LD_VAR 0 4
14265: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
14266: LD_ADDR_VAR 0 13
14270: PUSH
14271: LD_INT 1
14273: PPUSH
14274: LD_VAR 0 12
14278: PPUSH
14279: CALL_OW 12
14283: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
14284: LD_VAR 0 7
14288: PPUSH
14289: LD_INT 3
14291: PUSH
14292: LD_INT 60
14294: PUSH
14295: EMPTY
14296: LIST
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: PPUSH
14302: CALL_OW 72
14306: PPUSH
14307: LD_VAR 0 12
14311: PUSH
14312: LD_VAR 0 13
14316: ARRAY
14317: PPUSH
14318: CALL_OW 120
// end ; end ;
14322: LD_VAR 0 5
14326: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
14327: LD_INT 0
14329: PPUSH
14330: PPUSH
14331: PPUSH
14332: PPUSH
14333: PPUSH
14334: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
14335: LD_ADDR_VAR 0 7
14339: PUSH
14340: LD_VAR 0 2
14344: PPUSH
14345: LD_INT 22
14347: PUSH
14348: LD_VAR 0 1
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: PUSH
14357: LD_INT 21
14359: PUSH
14360: LD_INT 2
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: PUSH
14367: LD_INT 34
14369: PUSH
14370: LD_INT 52
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: LIST
14381: PPUSH
14382: CALL_OW 70
14386: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14387: LD_ADDR_VAR 0 8
14391: PUSH
14392: LD_VAR 0 2
14396: PPUSH
14397: LD_INT 22
14399: PUSH
14400: LD_VAR 0 1
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: PUSH
14409: LD_INT 21
14411: PUSH
14412: LD_INT 3
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: PUSH
14419: LD_INT 3
14421: PUSH
14422: LD_INT 24
14424: PUSH
14425: LD_INT 1000
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: PUSH
14432: EMPTY
14433: LIST
14434: LIST
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: LIST
14440: PUSH
14441: EMPTY
14442: LIST
14443: PPUSH
14444: CALL_OW 70
14448: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
14449: LD_VAR 0 8
14453: PUSH
14454: LD_INT 0
14456: GREATER
14457: PUSH
14458: LD_VAR 0 7
14462: PPUSH
14463: LD_INT 24
14465: PUSH
14466: LD_INT 750
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: PPUSH
14473: CALL_OW 72
14477: PUSH
14478: LD_INT 0
14480: GREATER
14481: AND
14482: IFFALSE 14502
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
14484: LD_VAR 0 7
14488: PPUSH
14489: LD_VAR 0 8
14493: PUSH
14494: LD_INT 1
14496: ARRAY
14497: PPUSH
14498: CALL_OW 130
// end ;
14502: LD_VAR 0 3
14506: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14507: LD_INT 0
14509: PPUSH
14510: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14511: LD_INT 22
14513: PUSH
14514: LD_VAR 0 1
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: PUSH
14523: LD_INT 21
14525: PUSH
14526: LD_INT 2
14528: PUSH
14529: EMPTY
14530: LIST
14531: LIST
14532: PUSH
14533: EMPTY
14534: LIST
14535: LIST
14536: PPUSH
14537: CALL_OW 69
14541: PUSH
14542: LD_INT 18
14544: PPUSH
14545: LD_INT 22
14547: PUSH
14548: LD_VAR 0 1
14552: PUSH
14553: EMPTY
14554: LIST
14555: LIST
14556: PUSH
14557: LD_INT 21
14559: PUSH
14560: LD_INT 2
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: PPUSH
14571: CALL_OW 70
14575: PUSH
14576: LD_VAR 0 3
14580: LESSEQUAL
14581: DIFF
14582: IFFALSE 14649
// for i := 1 to vehCount do
14584: LD_ADDR_VAR 0 9
14588: PUSH
14589: DOUBLE
14590: LD_INT 1
14592: DEC
14593: ST_TO_ADDR
14594: LD_VAR 0 3
14598: PUSH
14599: FOR_TO
14600: IFFALSE 14647
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14602: LD_VAR 0 2
14606: PPUSH
14607: LD_VAR 0 7
14611: PPUSH
14612: LD_VAR 0 5
14616: PPUSH
14617: LD_VAR 0 6
14621: PPUSH
14622: LD_VAR 0 4
14626: PUSH
14627: LD_INT 1
14629: PPUSH
14630: LD_VAR 0 4
14634: PPUSH
14635: CALL_OW 12
14639: ARRAY
14640: PPUSH
14641: CALL_OW 185
14645: GO 14599
14647: POP
14648: POP
// end ;
14649: LD_VAR 0 8
14653: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
14654: LD_INT 0
14656: PPUSH
14657: PPUSH
14658: PPUSH
14659: PPUSH
14660: PPUSH
14661: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14662: LD_ADDR_VAR 0 6
14666: PUSH
14667: LD_INT 22
14669: PUSH
14670: LD_VAR 0 1
14674: PUSH
14675: EMPTY
14676: LIST
14677: LIST
14678: PUSH
14679: LD_INT 25
14681: PUSH
14682: LD_INT 9
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: PPUSH
14693: CALL_OW 69
14697: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14698: LD_ADDR_VAR 0 7
14702: PUSH
14703: LD_INT 81
14705: PUSH
14706: LD_VAR 0 1
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: PUSH
14715: LD_INT 3
14717: PUSH
14718: LD_INT 21
14720: PUSH
14721: LD_INT 3
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: PUSH
14728: EMPTY
14729: LIST
14730: LIST
14731: PUSH
14732: EMPTY
14733: LIST
14734: LIST
14735: PPUSH
14736: CALL_OW 69
14740: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14741: LD_ADDR_VAR 0 4
14745: PUSH
14746: LD_INT 1
14748: PPUSH
14749: LD_INT 3
14751: PPUSH
14752: CALL_OW 12
14756: ST_TO_ADDR
// for i := 1 to list do
14757: LD_ADDR_VAR 0 5
14761: PUSH
14762: DOUBLE
14763: LD_INT 1
14765: DEC
14766: ST_TO_ADDR
14767: LD_VAR 0 6
14771: PUSH
14772: FOR_TO
14773: IFFALSE 14975
// for ta in filter do
14775: LD_ADDR_VAR 0 3
14779: PUSH
14780: LD_VAR 0 7
14784: PUSH
14785: FOR_IN
14786: IFFALSE 14971
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14788: LD_VAR 0 6
14792: PUSH
14793: LD_VAR 0 5
14797: ARRAY
14798: PPUSH
14799: LD_VAR 0 3
14803: PPUSH
14804: CALL_OW 296
14808: PUSH
14809: LD_INT 15
14811: LESSEQUAL
14812: IFFALSE 14969
// begin case c of 1 :
14814: LD_VAR 0 4
14818: PUSH
14819: LD_INT 1
14821: DOUBLE
14822: EQUAL
14823: IFTRUE 14827
14825: GO 14865
14827: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
14828: LD_VAR 0 6
14832: PUSH
14833: LD_VAR 0 5
14837: ARRAY
14838: PPUSH
14839: LD_VAR 0 3
14843: PPUSH
14844: CALL_OW 250
14848: PPUSH
14849: LD_VAR 0 3
14853: PPUSH
14854: CALL_OW 251
14858: PPUSH
14859: CALL_OW 154
14863: GO 14969
14865: LD_INT 2
14867: DOUBLE
14868: EQUAL
14869: IFTRUE 14873
14871: GO 14937
14873: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
14874: LD_VAR 0 6
14878: PUSH
14879: LD_VAR 0 5
14883: ARRAY
14884: PPUSH
14885: LD_VAR 0 3
14889: PPUSH
14890: CALL_OW 250
14894: PUSH
14895: LD_INT 1
14897: NEG
14898: PPUSH
14899: LD_INT 1
14901: PPUSH
14902: CALL_OW 12
14906: PLUS
14907: PPUSH
14908: LD_VAR 0 3
14912: PPUSH
14913: CALL_OW 251
14917: PUSH
14918: LD_INT 1
14920: NEG
14921: PPUSH
14922: LD_INT 1
14924: PPUSH
14925: CALL_OW 12
14929: PLUS
14930: PPUSH
14931: CALL_OW 153
14935: GO 14969
14937: LD_INT 3
14939: DOUBLE
14940: EQUAL
14941: IFTRUE 14945
14943: GO 14968
14945: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14946: LD_VAR 0 6
14950: PUSH
14951: LD_VAR 0 5
14955: ARRAY
14956: PPUSH
14957: LD_VAR 0 3
14961: PPUSH
14962: CALL_OW 115
14966: GO 14969
14968: POP
// end ; end ;
14969: GO 14785
14971: POP
14972: POP
14973: GO 14772
14975: POP
14976: POP
// end ;
14977: LD_VAR 0 2
14981: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
14982: LD_INT 0
14984: PPUSH
14985: PPUSH
14986: PPUSH
14987: PPUSH
// r := 100 ;
14988: LD_ADDR_VAR 0 5
14992: PUSH
14993: LD_INT 100
14995: ST_TO_ADDR
// x := 0 ;
14996: LD_ADDR_VAR 0 6
15000: PUSH
15001: LD_INT 0
15003: ST_TO_ADDR
// while ( x < n ) do
15004: LD_VAR 0 6
15008: PUSH
15009: LD_VAR 0 2
15013: LESS
15014: IFFALSE 15277
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
15016: LD_ADDR_VAR 0 4
15020: PUSH
15021: DOUBLE
15022: LD_INT 1
15024: DEC
15025: ST_TO_ADDR
15026: LD_VAR 0 1
15030: PPUSH
15031: LD_INT 0
15033: PPUSH
15034: CALL_OW 517
15038: PUSH
15039: LD_INT 1
15041: ARRAY
15042: PUSH
15043: FOR_TO
15044: IFFALSE 15273
// begin if r > 50 then
15046: LD_VAR 0 5
15050: PUSH
15051: LD_INT 50
15053: GREATER
15054: IFFALSE 15257
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
15056: LD_VAR 0 1
15060: PPUSH
15061: LD_INT 0
15063: PPUSH
15064: CALL_OW 517
15068: PUSH
15069: LD_INT 1
15071: ARRAY
15072: PUSH
15073: LD_VAR 0 4
15077: ARRAY
15078: PPUSH
15079: LD_VAR 0 1
15083: PPUSH
15084: LD_INT 0
15086: PPUSH
15087: CALL_OW 517
15091: PUSH
15092: LD_INT 2
15094: ARRAY
15095: PUSH
15096: LD_VAR 0 4
15100: ARRAY
15101: PPUSH
15102: CALL_OW 458
15106: NOT
15107: IFFALSE 15255
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
15109: LD_VAR 0 1
15113: PPUSH
15114: LD_INT 0
15116: PPUSH
15117: CALL_OW 517
15121: PUSH
15122: LD_INT 1
15124: ARRAY
15125: PUSH
15126: LD_VAR 0 4
15130: ARRAY
15131: PPUSH
15132: LD_VAR 0 1
15136: PPUSH
15137: LD_INT 0
15139: PPUSH
15140: CALL_OW 517
15144: PUSH
15145: LD_INT 2
15147: ARRAY
15148: PUSH
15149: LD_VAR 0 4
15153: ARRAY
15154: PPUSH
15155: LD_INT 8
15157: PPUSH
15158: LD_INT 0
15160: PPUSH
15161: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
15165: LD_ADDR_EXP 37
15169: PUSH
15170: LD_EXP 37
15174: PPUSH
15175: LD_INT 1
15177: PPUSH
15178: LD_VAR 0 1
15182: PPUSH
15183: LD_INT 0
15185: PPUSH
15186: CALL_OW 517
15190: PUSH
15191: LD_INT 1
15193: ARRAY
15194: PUSH
15195: LD_VAR 0 4
15199: ARRAY
15200: PUSH
15201: LD_VAR 0 1
15205: PPUSH
15206: LD_INT 0
15208: PPUSH
15209: CALL_OW 517
15213: PUSH
15214: LD_INT 2
15216: ARRAY
15217: PUSH
15218: LD_VAR 0 4
15222: ARRAY
15223: PUSH
15224: EMPTY
15225: LIST
15226: LIST
15227: PPUSH
15228: CALL_OW 2
15232: ST_TO_ADDR
// r := 0 ;
15233: LD_ADDR_VAR 0 5
15237: PUSH
15238: LD_INT 0
15240: ST_TO_ADDR
// x := x + 1 ;
15241: LD_ADDR_VAR 0 6
15245: PUSH
15246: LD_VAR 0 6
15250: PUSH
15251: LD_INT 1
15253: PLUS
15254: ST_TO_ADDR
// end end else
15255: GO 15271
// r := r + 35 ;
15257: LD_ADDR_VAR 0 5
15261: PUSH
15262: LD_VAR 0 5
15266: PUSH
15267: LD_INT 35
15269: PLUS
15270: ST_TO_ADDR
// end end ;
15271: GO 15043
15273: POP
15274: POP
15275: GO 15004
15277: LD_VAR 0 3
15281: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
15282: LD_INT 0
15284: PPUSH
15285: PPUSH
15286: PPUSH
15287: PPUSH
15288: PPUSH
// tmp := [ ] ;
15289: LD_ADDR_VAR 0 6
15293: PUSH
15294: EMPTY
15295: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
15296: LD_ADDR_VAR 0 7
15300: PUSH
15301: LD_INT 22
15303: PUSH
15304: LD_VAR 0 1
15308: PUSH
15309: EMPTY
15310: LIST
15311: LIST
15312: PUSH
15313: LD_INT 30
15315: PUSH
15316: LD_INT 32
15318: PUSH
15319: EMPTY
15320: LIST
15321: LIST
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PPUSH
15327: CALL_OW 69
15331: ST_TO_ADDR
// if bunkers then
15332: LD_VAR 0 7
15336: IFFALSE 15406
// for i in bunkers do
15338: LD_ADDR_VAR 0 4
15342: PUSH
15343: LD_VAR 0 7
15347: PUSH
15348: FOR_IN
15349: IFFALSE 15404
// for j in UnitsInside ( i ) do
15351: LD_ADDR_VAR 0 5
15355: PUSH
15356: LD_VAR 0 4
15360: PPUSH
15361: CALL_OW 313
15365: PUSH
15366: FOR_IN
15367: IFFALSE 15400
// tmp := Replace ( tmp , tmp + 1 , j ) ;
15369: LD_ADDR_VAR 0 6
15373: PUSH
15374: LD_VAR 0 6
15378: PPUSH
15379: LD_VAR 0 6
15383: PUSH
15384: LD_INT 1
15386: PLUS
15387: PPUSH
15388: LD_VAR 0 5
15392: PPUSH
15393: CALL_OW 1
15397: ST_TO_ADDR
15398: GO 15366
15400: POP
15401: POP
15402: GO 15348
15404: POP
15405: POP
// if tmp then
15406: LD_VAR 0 6
15410: IFFALSE 15450
// begin ComExitBuilding ( tmp ) ;
15412: LD_VAR 0 6
15416: PPUSH
15417: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
15421: LD_VAR 0 6
15425: PPUSH
15426: LD_VAR 0 2
15430: PPUSH
15431: CALL_OW 250
15435: PPUSH
15436: LD_VAR 0 2
15440: PPUSH
15441: CALL_OW 251
15445: PPUSH
15446: CALL_OW 174
// end ; end ;
15450: LD_VAR 0 3
15454: RET
// export function CreateNature ; var i , un ; begin
15455: LD_INT 0
15457: PPUSH
15458: PPUSH
15459: PPUSH
// uc_side := 0 ;
15460: LD_ADDR_OWVAR 20
15464: PUSH
15465: LD_INT 0
15467: ST_TO_ADDR
// uc_nation := 0 ;
15468: LD_ADDR_OWVAR 21
15472: PUSH
15473: LD_INT 0
15475: ST_TO_ADDR
// InitHc ;
15476: CALL_OW 19
// hc_class := class_fish ;
15480: LD_ADDR_OWVAR 28
15484: PUSH
15485: LD_INT 20
15487: ST_TO_ADDR
// for i := 1 to 6 do
15488: LD_ADDR_VAR 0 2
15492: PUSH
15493: DOUBLE
15494: LD_INT 1
15496: DEC
15497: ST_TO_ADDR
15498: LD_INT 6
15500: PUSH
15501: FOR_TO
15502: IFFALSE 15521
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
15504: CALL_OW 44
15508: PPUSH
15509: LD_INT 22
15511: PPUSH
15512: LD_INT 0
15514: PPUSH
15515: CALL_OW 49
15519: GO 15501
15521: POP
15522: POP
// for i := 1 to Difficulty + 2 do
15523: LD_ADDR_VAR 0 2
15527: PUSH
15528: DOUBLE
15529: LD_INT 1
15531: DEC
15532: ST_TO_ADDR
15533: LD_OWVAR 67
15537: PUSH
15538: LD_INT 2
15540: PLUS
15541: PUSH
15542: FOR_TO
15543: IFFALSE 15652
// begin hc_sex := sex_male ;
15545: LD_ADDR_OWVAR 27
15549: PUSH
15550: LD_INT 1
15552: ST_TO_ADDR
// uc_side := 0 ;
15553: LD_ADDR_OWVAR 20
15557: PUSH
15558: LD_INT 0
15560: ST_TO_ADDR
// uc_nation := nation_nature ;
15561: LD_ADDR_OWVAR 21
15565: PUSH
15566: LD_INT 0
15568: ST_TO_ADDR
// hc_class := class_tiger ;
15569: LD_ADDR_OWVAR 28
15573: PUSH
15574: LD_INT 14
15576: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
15577: LD_ADDR_OWVAR 31
15581: PUSH
15582: LD_EXP 30
15586: PUSH
15587: LD_INT 0
15589: PUSH
15590: LD_INT 0
15592: PUSH
15593: LD_INT 0
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
15602: LD_ADDR_OWVAR 35
15606: PUSH
15607: LD_INT 5
15609: NEG
15610: PPUSH
15611: LD_INT 5
15613: PPUSH
15614: CALL_OW 12
15618: PUSH
15619: LD_OWVAR 67
15623: MUL
15624: ST_TO_ADDR
// un := CreateHuman ;
15625: LD_ADDR_VAR 0 3
15629: PUSH
15630: CALL_OW 44
15634: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15635: LD_VAR 0 3
15639: PPUSH
15640: LD_INT 23
15642: PPUSH
15643: LD_INT 0
15645: PPUSH
15646: CALL_OW 49
// end ;
15650: GO 15542
15652: POP
15653: POP
// for i := 1 to rand ( 3 , 4 ) do
15654: LD_ADDR_VAR 0 2
15658: PUSH
15659: DOUBLE
15660: LD_INT 1
15662: DEC
15663: ST_TO_ADDR
15664: LD_INT 3
15666: PPUSH
15667: LD_INT 4
15669: PPUSH
15670: CALL_OW 12
15674: PUSH
15675: FOR_TO
15676: IFFALSE 15768
// begin hc_sex := sex_male ;
15678: LD_ADDR_OWVAR 27
15682: PUSH
15683: LD_INT 1
15685: ST_TO_ADDR
// uc_side := 0 ;
15686: LD_ADDR_OWVAR 20
15690: PUSH
15691: LD_INT 0
15693: ST_TO_ADDR
// uc_nation := nation_nature ;
15694: LD_ADDR_OWVAR 21
15698: PUSH
15699: LD_INT 0
15701: ST_TO_ADDR
// hc_class := 18 ;
15702: LD_ADDR_OWVAR 28
15706: PUSH
15707: LD_INT 18
15709: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
15710: LD_ADDR_OWVAR 31
15714: PUSH
15715: LD_INT 0
15717: PUSH
15718: LD_INT 0
15720: PUSH
15721: LD_INT 0
15723: PUSH
15724: LD_INT 0
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: ST_TO_ADDR
// hc_agressivity := 0 ;
15733: LD_ADDR_OWVAR 35
15737: PUSH
15738: LD_INT 0
15740: ST_TO_ADDR
// un := CreateHuman ;
15741: LD_ADDR_VAR 0 3
15745: PUSH
15746: CALL_OW 44
15750: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15751: LD_VAR 0 3
15755: PPUSH
15756: LD_INT 23
15758: PPUSH
15759: LD_INT 0
15761: PPUSH
15762: CALL_OW 49
// end ;
15766: GO 15675
15768: POP
15769: POP
// for i := 1 to [ 4 , 3 , 3 , 3 ] [ Difficulty ] do
15770: LD_ADDR_VAR 0 2
15774: PUSH
15775: DOUBLE
15776: LD_INT 1
15778: DEC
15779: ST_TO_ADDR
15780: LD_INT 4
15782: PUSH
15783: LD_INT 3
15785: PUSH
15786: LD_INT 3
15788: PUSH
15789: LD_INT 3
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: PUSH
15798: LD_OWVAR 67
15802: ARRAY
15803: PUSH
15804: FOR_TO
15805: IFFALSE 15914
// begin hc_sex := sex_male ;
15807: LD_ADDR_OWVAR 27
15811: PUSH
15812: LD_INT 1
15814: ST_TO_ADDR
// uc_side := 0 ;
15815: LD_ADDR_OWVAR 20
15819: PUSH
15820: LD_INT 0
15822: ST_TO_ADDR
// uc_nation := nation_nature ;
15823: LD_ADDR_OWVAR 21
15827: PUSH
15828: LD_INT 0
15830: ST_TO_ADDR
// hc_class := class_apeman ;
15831: LD_ADDR_OWVAR 28
15835: PUSH
15836: LD_INT 12
15838: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
15839: LD_ADDR_OWVAR 31
15843: PUSH
15844: LD_INT 0
15846: PPUSH
15847: LD_INT 2
15849: PPUSH
15850: CALL_OW 12
15854: PUSH
15855: LD_INT 0
15857: PUSH
15858: LD_INT 0
15860: PUSH
15861: LD_INT 0
15863: PUSH
15864: EMPTY
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: ST_TO_ADDR
// hc_agressivity = rand ( - 10 , 10 ) ;
15870: LD_ADDR_OWVAR 35
15874: PUSH
15875: LD_INT 10
15877: NEG
15878: PPUSH
15879: LD_INT 10
15881: PPUSH
15882: CALL_OW 12
15886: ST_TO_ADDR
// un := CreateHuman ;
15887: LD_ADDR_VAR 0 3
15891: PUSH
15892: CALL_OW 44
15896: ST_TO_ADDR
// PlaceUnitArea ( un , ApeNatureArea , false ) ;
15897: LD_VAR 0 3
15901: PPUSH
15902: LD_INT 26
15904: PPUSH
15905: LD_INT 0
15907: PPUSH
15908: CALL_OW 49
// end ;
15912: GO 15804
15914: POP
15915: POP
// end ; end_of_file
15916: LD_VAR 0 1
15920: RET
// on UnitDestroyed ( unit ) do var i ;
15921: LD_INT 0
15923: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
15924: LD_VAR 0 1
15928: PPUSH
15929: CALL 35373 0 1
// if unit = JMM then
15933: LD_VAR 0 1
15937: PUSH
15938: LD_EXP 1
15942: EQUAL
15943: IFFALSE 15952
// YouLost ( JMM ) ;
15945: LD_STRING JMM
15947: PPUSH
15948: CALL_OW 104
// if unit in russianTanks then
15952: LD_VAR 0 1
15956: PUSH
15957: LD_EXP 32
15961: IN
15962: IFFALSE 15980
// russianTanks := russianTanks diff unit ;
15964: LD_ADDR_EXP 32
15968: PUSH
15969: LD_EXP 32
15973: PUSH
15974: LD_VAR 0 1
15978: DIFF
15979: ST_TO_ADDR
// if unit in russianTimeLapsers then
15980: LD_VAR 0 1
15984: PUSH
15985: LD_EXP 33
15989: IN
15990: IFFALSE 16008
// russianTimeLapsers := russianTimeLapsers diff unit ;
15992: LD_ADDR_EXP 33
15996: PUSH
15997: LD_EXP 33
16001: PUSH
16002: LD_VAR 0 1
16006: DIFF
16007: ST_TO_ADDR
// if unit in RuScientists then
16008: LD_VAR 0 1
16012: PUSH
16013: LD_EXP 27
16017: IN
16018: IFFALSE 16050
// begin RuScientists := RuScientists diff unit ;
16020: LD_ADDR_EXP 27
16024: PUSH
16025: LD_EXP 27
16029: PUSH
16030: LD_VAR 0 1
16034: DIFF
16035: ST_TO_ADDR
// sciCounter := sciCounter + 1 ;
16036: LD_ADDR_EXP 28
16040: PUSH
16041: LD_EXP 28
16045: PUSH
16046: LD_INT 1
16048: PLUS
16049: ST_TO_ADDR
// end ; end ;
16050: PPOPN 2
16052: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_laser then
16053: LD_VAR 0 3
16057: PPUSH
16058: CALL_OW 264
16062: PUSH
16063: LD_INT 9
16065: EQUAL
16066: IFFALSE 16082
// laserCounterDestroy := laserCounterDestroy + 1 ;
16068: LD_ADDR_EXP 43
16072: PUSH
16073: LD_EXP 43
16077: PUSH
16078: LD_INT 1
16080: PLUS
16081: ST_TO_ADDR
// end ;
16082: PPOPN 3
16084: END
// on UnitTeleported ( building , human ) do begin if human in FilterAllUnits ( [ f_side , 6 ] ) then
16085: LD_VAR 0 2
16089: PUSH
16090: LD_INT 22
16092: PUSH
16093: LD_INT 6
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PPUSH
16100: CALL_OW 69
16104: IN
16105: IFFALSE 16160
// begin if GetType ( human ) = unit_vehicle then
16107: LD_VAR 0 2
16111: PPUSH
16112: CALL_OW 247
16116: PUSH
16117: LD_INT 2
16119: EQUAL
16120: IFFALSE 16137
// human := IsDrivenBy ( human ) ;
16122: LD_ADDR_VAR 0 2
16126: PUSH
16127: LD_VAR 0 2
16131: PPUSH
16132: CALL_OW 311
16136: ST_TO_ADDR
// SetTag ( human , GetTag ( human ) + 10 ) ;
16137: LD_VAR 0 2
16141: PPUSH
16142: LD_VAR 0 2
16146: PPUSH
16147: CALL_OW 110
16151: PUSH
16152: LD_INT 10
16154: PLUS
16155: PPUSH
16156: CALL_OW 109
// end ; if GetSide ( human ) = 1 and eventVar1 = 0 then
16160: LD_VAR 0 2
16164: PPUSH
16165: CALL_OW 255
16169: PUSH
16170: LD_INT 1
16172: EQUAL
16173: PUSH
16174: LD_EXP 40
16178: PUSH
16179: LD_INT 0
16181: EQUAL
16182: AND
16183: IFFALSE 16295
// begin eventVar1 = 1 ;
16185: LD_ADDR_EXP 40
16189: PUSH
16190: LD_INT 1
16192: ST_TO_ADDR
// teleportExplored = 1 ;
16193: LD_ADDR_EXP 26
16197: PUSH
16198: LD_INT 1
16200: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
16201: LD_STRING M2a
16203: PPUSH
16204: CALL_OW 337
// wait ( 0 0$2 ) ;
16208: LD_INT 70
16210: PPUSH
16211: CALL_OW 67
// DialogueOn ;
16215: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
16219: LD_INT 22
16221: PUSH
16222: LD_INT 1
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: PUSH
16229: LD_INT 21
16231: PUSH
16232: LD_INT 1
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: PPUSH
16243: CALL_OW 69
16247: PPUSH
16248: LD_STRING DT3a-Sol1-1
16250: PPUSH
16251: LD_STRING DT3a-FSol1-1
16253: PPUSH
16254: CALL 12642 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
16258: LD_EXP 1
16262: PPUSH
16263: LD_STRING DT3a-JMM-1
16265: PPUSH
16266: CALL_OW 88
// CenterNowOnUnits ( human ) ;
16270: LD_VAR 0 2
16274: PPUSH
16275: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
16279: LD_EXP 1
16283: PPUSH
16284: LD_STRING DT3a-JMM-1a
16286: PPUSH
16287: CALL_OW 88
// DialogueOff ;
16291: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
16295: LD_VAR 0 1
16299: PUSH
16300: LD_INT 10
16302: EQUAL
16303: PUSH
16304: LD_VAR 0 2
16308: PPUSH
16309: CALL_OW 247
16313: PUSH
16314: LD_INT 2
16316: EQUAL
16317: AND
16318: PUSH
16319: LD_VAR 0 2
16323: PPUSH
16324: CALL_OW 255
16328: PUSH
16329: LD_INT 3
16331: EQUAL
16332: AND
16333: IFFALSE 16399
// begin if vehicleTeleported = 0 then
16335: LD_EXP 21
16339: PUSH
16340: LD_INT 0
16342: EQUAL
16343: IFFALSE 16360
// begin wait ( 0 0$03 ) ;
16345: LD_INT 105
16347: PPUSH
16348: CALL_OW 67
// vehicleTeleported := 1 ;
16352: LD_ADDR_EXP 21
16356: PUSH
16357: LD_INT 1
16359: ST_TO_ADDR
// end ; if vehicleTeleported = 2 then
16360: LD_EXP 21
16364: PUSH
16365: LD_INT 2
16367: EQUAL
16368: IFFALSE 16385
// begin wait ( 0 0$03 ) ;
16370: LD_INT 105
16372: PPUSH
16373: CALL_OW 67
// vehicleTeleported := 3 ;
16377: LD_ADDR_EXP 21
16381: PUSH
16382: LD_INT 3
16384: ST_TO_ADDR
// end ; tpCounter := tpCounter + 1 ;
16385: LD_ADDR_EXP 22
16389: PUSH
16390: LD_EXP 22
16394: PUSH
16395: LD_INT 1
16397: PLUS
16398: ST_TO_ADDR
// end ; end ;
16399: PPOPN 2
16401: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
16402: LD_VAR 0 1
16406: PPUSH
16407: LD_VAR 0 2
16411: PPUSH
16412: CALL 35431 0 2
// if GetWeapon ( vehicle ) = us_rocket_launcher then
16416: LD_VAR 0 1
16420: PPUSH
16421: CALL_OW 264
16425: PUSH
16426: LD_INT 7
16428: EQUAL
16429: IFFALSE 16439
// rocketBuilded := true ;
16431: LD_ADDR_EXP 44
16435: PUSH
16436: LD_INT 1
16438: ST_TO_ADDR
// if GetSide ( vehicle ) <> 3 then
16439: LD_VAR 0 1
16443: PPUSH
16444: CALL_OW 255
16448: PUSH
16449: LD_INT 3
16451: NONEQUAL
16452: IFFALSE 16456
// exit ;
16454: GO 16573
// if factory in [ ru_fact , rufab2 ] then
16456: LD_VAR 0 2
16460: PUSH
16461: LD_INT 21
16463: PUSH
16464: LD_INT 112
16466: PUSH
16467: EMPTY
16468: LIST
16469: LIST
16470: IN
16471: IFFALSE 16573
// begin if GetWeapon ( vehicle ) = ru_time_lapser then
16473: LD_VAR 0 1
16477: PPUSH
16478: CALL_OW 264
16482: PUSH
16483: LD_INT 49
16485: EQUAL
16486: IFFALSE 16522
// begin russianTimeLapsers := Join ( russianTimeLapsers , vehicle ) ;
16488: LD_ADDR_EXP 33
16492: PUSH
16493: LD_EXP 33
16497: PPUSH
16498: LD_VAR 0 1
16502: PPUSH
16503: CALL 78389 0 2
16507: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
16508: LD_VAR 0 1
16512: PPUSH
16513: LD_INT 137
16515: PPUSH
16516: CALL_OW 120
// end else
16520: GO 16573
// if not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_big_cargo_bay , ru_crane , ru_bulldozer ] then
16522: LD_VAR 0 1
16526: PPUSH
16527: CALL_OW 264
16531: PUSH
16532: LD_INT 51
16534: PUSH
16535: LD_INT 89
16537: PUSH
16538: LD_INT 52
16540: PUSH
16541: LD_INT 53
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: IN
16550: NOT
16551: IFFALSE 16573
// begin russianTanks := Join ( russianTanks , vehicle ) ;
16553: LD_ADDR_EXP 32
16557: PUSH
16558: LD_EXP 32
16562: PPUSH
16563: LD_VAR 0 1
16567: PPUSH
16568: CALL 78389 0 2
16572: ST_TO_ADDR
// end ; end ; end ;
16573: PPOPN 2
16575: END
// on LeaveVehicle ( vehicle , human ) do var i ;
16576: LD_INT 0
16578: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
16579: LD_VAR 0 2
16583: PPUSH
16584: CALL_OW 255
16588: PUSH
16589: LD_INT 3
16591: EQUAL
16592: PUSH
16593: LD_VAR 0 2
16597: PPUSH
16598: CALL_OW 257
16602: PUSH
16603: LD_INT 3
16605: EQUAL
16606: AND
16607: PUSH
16608: LD_INT 21
16610: PPUSH
16611: CALL_OW 255
16615: PUSH
16616: LD_INT 3
16618: EQUAL
16619: AND
16620: PUSH
16621: LD_INT 21
16623: PPUSH
16624: CALL_OW 302
16628: AND
16629: IFFALSE 16643
// ComEnterUnit ( human , ru_fact ) ;
16631: LD_VAR 0 2
16635: PPUSH
16636: LD_INT 21
16638: PPUSH
16639: CALL_OW 120
// end ;
16643: PPOPN 3
16645: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16646: LD_VAR 0 1
16650: PPUSH
16651: CALL 35415 0 1
// end ; end_of_file
16655: PPOPN 1
16657: END
// every 0 0$1 trigger ruAI = 1 do
16658: LD_EXP 34
16662: PUSH
16663: LD_INT 1
16665: EQUAL
16666: IFFALSE 16778
16668: GO 16670
16670: DISABLE
// begin enable ;
16671: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
16672: LD_INT 3
16674: PPUSH
16675: LD_INT 6
16677: PPUSH
16678: LD_INT 9
16680: PPUSH
16681: LD_EXP 31
16685: PPUSH
16686: CALL 13492 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
16690: LD_INT 3
16692: PPUSH
16693: LD_INT 4
16695: PPUSH
16696: LD_INT 10
16698: PPUSH
16699: LD_EXP 31
16703: PPUSH
16704: CALL 13492 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
16708: LD_INT 3
16710: PPUSH
16711: LD_INT 9
16713: PPUSH
16714: CALL 14327 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
16718: LD_INT 3
16720: PPUSH
16721: LD_INT 10
16723: PPUSH
16724: CALL 14327 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
16728: LD_INT 3
16730: PPUSH
16731: LD_INT 16
16733: PPUSH
16734: LD_INT 9
16736: PPUSH
16737: LD_INT 91
16739: PPUSH
16740: CALL 13859 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
16744: LD_INT 3
16746: PPUSH
16747: LD_INT 17
16749: PPUSH
16750: LD_INT 10
16752: PPUSH
16753: LD_INT 47
16755: PUSH
16756: LD_INT 129
16758: PUSH
16759: LD_INT 135
16761: PUSH
16762: EMPTY
16763: LIST
16764: LIST
16765: LIST
16766: PPUSH
16767: CALL 13859 0 4
// IntBazooka ( 3 ) ;
16771: LD_INT 3
16773: PPUSH
16774: CALL 14654 0 1
// end ;
16778: END
// every 0 0$50 trigger russianTanks >= [ 3 , 4 , 5 , 6 ] [ Difficulty ] do var i , tmp , p , path ;
16779: LD_EXP 32
16783: PUSH
16784: LD_INT 3
16786: PUSH
16787: LD_INT 4
16789: PUSH
16790: LD_INT 5
16792: PUSH
16793: LD_INT 6
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: PUSH
16802: LD_OWVAR 67
16806: ARRAY
16807: GREATEREQUAL
16808: IFFALSE 17180
16810: GO 16812
16812: DISABLE
16813: LD_INT 0
16815: PPUSH
16816: PPUSH
16817: PPUSH
16818: PPUSH
// begin enable ;
16819: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
16820: LD_ADDR_VAR 0 2
16824: PUSH
16825: LD_EXP 32
16829: PUSH
16830: LD_EXP 33
16834: UNION
16835: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
16836: LD_ADDR_EXP 32
16840: PUSH
16841: LD_EXP 32
16845: PUSH
16846: LD_VAR 0 2
16850: DIFF
16851: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
16852: LD_ADDR_EXP 33
16856: PUSH
16857: LD_EXP 33
16861: PUSH
16862: LD_VAR 0 2
16866: DIFF
16867: ST_TO_ADDR
// if vehicleTeleported >= 4 then
16868: LD_EXP 21
16872: PUSH
16873: LD_INT 4
16875: GREATEREQUAL
16876: IFFALSE 16894
// attackTactic := rand ( 1 , 2 ) ;
16878: LD_ADDR_EXP 36
16882: PUSH
16883: LD_INT 1
16885: PPUSH
16886: LD_INT 2
16888: PPUSH
16889: CALL_OW 12
16893: ST_TO_ADDR
// path := [ [ 93 , 77 ] , [ 107 , 99 ] , [ 123 , 112 ] , [ 140 , 112 ] ] ;
16894: LD_ADDR_VAR 0 4
16898: PUSH
16899: LD_INT 93
16901: PUSH
16902: LD_INT 77
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: PUSH
16909: LD_INT 107
16911: PUSH
16912: LD_INT 99
16914: PUSH
16915: EMPTY
16916: LIST
16917: LIST
16918: PUSH
16919: LD_INT 123
16921: PUSH
16922: LD_INT 112
16924: PUSH
16925: EMPTY
16926: LIST
16927: LIST
16928: PUSH
16929: LD_INT 140
16931: PUSH
16932: LD_INT 112
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: ST_TO_ADDR
// if attackTactic < 2 then
16945: LD_EXP 36
16949: PUSH
16950: LD_INT 2
16952: LESS
16953: IFFALSE 16984
// path := [ [ 131 , 136 ] , [ 140 , 112 ] ] ;
16955: LD_ADDR_VAR 0 4
16959: PUSH
16960: LD_INT 131
16962: PUSH
16963: LD_INT 136
16965: PUSH
16966: EMPTY
16967: LIST
16968: LIST
16969: PUSH
16970: LD_INT 140
16972: PUSH
16973: LD_INT 112
16975: PUSH
16976: EMPTY
16977: LIST
16978: LIST
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: ST_TO_ADDR
// if IsOk ( ruteleprt ) then
16984: LD_INT 10
16986: PPUSH
16987: CALL_OW 302
16991: IFFALSE 17107
// begin for i in tmp do
16993: LD_ADDR_VAR 0 1
16997: PUSH
16998: LD_VAR 0 2
17002: PUSH
17003: FOR_IN
17004: IFFALSE 17047
// if attackTactic < 2 then
17006: LD_EXP 36
17010: PUSH
17011: LD_INT 2
17013: LESS
17014: IFFALSE 17030
// ComEnterUnit ( i , ruteleprt ) else
17016: LD_VAR 0 1
17020: PPUSH
17021: LD_INT 10
17023: PPUSH
17024: CALL_OW 120
17028: GO 17045
// ComMoveXY ( i , 88 , 69 ) ;
17030: LD_VAR 0 1
17034: PPUSH
17035: LD_INT 88
17037: PPUSH
17038: LD_INT 69
17040: PPUSH
17041: CALL_OW 111
17045: GO 17003
17047: POP
17048: POP
// p := 0 ;
17049: LD_ADDR_VAR 0 3
17053: PUSH
17054: LD_INT 0
17056: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
17057: LD_INT 70
17059: PPUSH
17060: CALL_OW 67
// p := Inc ( p ) ;
17064: LD_ADDR_VAR 0 3
17068: PUSH
17069: LD_VAR 0 3
17073: PPUSH
17074: CALL 79750 0 1
17078: ST_TO_ADDR
// until not UnitFilter ( tmp , [ f_hastask ] ) or p > 30 ;
17079: LD_VAR 0 2
17083: PPUSH
17084: LD_INT 60
17086: PUSH
17087: EMPTY
17088: LIST
17089: PPUSH
17090: CALL_OW 72
17094: NOT
17095: PUSH
17096: LD_VAR 0 3
17100: PUSH
17101: LD_INT 30
17103: GREATER
17104: OR
17105: IFFALSE 17057
// end ; repeat wait ( 0 0$1 ) ;
17107: LD_INT 35
17109: PPUSH
17110: CALL_OW 67
// for i in tmp do
17114: LD_ADDR_VAR 0 1
17118: PUSH
17119: LD_VAR 0 2
17123: PUSH
17124: FOR_IN
17125: IFFALSE 17157
// if not IsOk ( i ) then
17127: LD_VAR 0 1
17131: PPUSH
17132: CALL_OW 302
17136: NOT
17137: IFFALSE 17155
// tmp := tmp diff i ;
17139: LD_ADDR_VAR 0 2
17143: PUSH
17144: LD_VAR 0 2
17148: PUSH
17149: LD_VAR 0 1
17153: DIFF
17154: ST_TO_ADDR
17155: GO 17124
17157: POP
17158: POP
// AgressiveMove ( tmp , path ) ;
17159: LD_VAR 0 2
17163: PPUSH
17164: LD_VAR 0 4
17168: PPUSH
17169: CALL 80993 0 2
// until not tmp ;
17173: LD_VAR 0 2
17177: NOT
17178: IFFALSE 17107
// end ;
17180: PPOPN 4
17182: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
17183: LD_INT 4
17185: PPUSH
17186: CALL_OW 303
17190: IFFALSE 17205
17192: GO 17194
17194: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
17195: LD_INT 3
17197: PPUSH
17198: LD_INT 4
17200: PPUSH
17201: CALL 15282 0 2
17205: END
// every 0 0$1 do
17206: GO 17208
17208: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
17209: LD_INT 3
17211: PPUSH
17212: LD_INT 91
17214: PPUSH
17215: LD_INT 3
17217: PPUSH
17218: CALL 13257 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
17222: LD_INT 3
17224: PPUSH
17225: LD_INT 47
17227: PPUSH
17228: LD_INT 3
17230: PPUSH
17231: CALL 13257 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
17235: LD_INT 3
17237: PPUSH
17238: LD_INT 129
17240: PPUSH
17241: LD_INT 3
17243: PPUSH
17244: CALL 13257 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
17248: LD_INT 3
17250: PPUSH
17251: LD_INT 3
17253: PPUSH
17254: LD_INT 3
17256: PPUSH
17257: CALL 13257 0 3
// end ;
17261: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
17262: LD_INT 22
17264: PUSH
17265: LD_INT 1
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: PUSH
17272: LD_INT 21
17274: PUSH
17275: LD_INT 3
17277: PUSH
17278: EMPTY
17279: LIST
17280: LIST
17281: PUSH
17282: EMPTY
17283: LIST
17284: LIST
17285: PPUSH
17286: CALL_OW 69
17290: IFFALSE 17359
17292: GO 17294
17294: DISABLE
// begin wait ( 0 0$40 ) ;
17295: LD_INT 1400
17297: PPUSH
17298: CALL_OW 67
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17302: LD_INT 3
17304: PPUSH
17305: LD_INT 21
17307: PPUSH
17308: LD_INT 3
17310: PUSH
17311: LD_INT 4
17313: PUSH
17314: LD_INT 5
17316: PUSH
17317: LD_INT 6
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: PUSH
17326: LD_OWVAR 67
17330: ARRAY
17331: PPUSH
17332: LD_INT 46
17334: PUSH
17335: LD_INT 45
17337: PUSH
17338: LD_INT 44
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: LIST
17345: PPUSH
17346: LD_INT 3
17348: PPUSH
17349: LD_INT 3
17351: PPUSH
17352: LD_INT 24
17354: PPUSH
17355: CALL 14507 0 7
// end ;
17359: END
// every 6 6$0 + 2 2$00 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
17360: LD_EXP 20
17364: PUSH
17365: LD_INT 2
17367: EQUAL
17368: PUSH
17369: LD_INT 21
17371: PPUSH
17372: CALL_OW 255
17376: PUSH
17377: LD_INT 3
17379: EQUAL
17380: AND
17381: PUSH
17382: LD_INT 112
17384: PPUSH
17385: CALL_OW 255
17389: PUSH
17390: LD_INT 3
17392: EQUAL
17393: AND
17394: PUSH
17395: LD_INT 21
17397: PPUSH
17398: CALL_OW 302
17402: AND
17403: PUSH
17404: LD_INT 112
17406: PPUSH
17407: CALL_OW 302
17411: AND
17412: PUSH
17413: LD_INT 22
17415: PUSH
17416: LD_INT 3
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: PUSH
17423: LD_INT 21
17425: PUSH
17426: LD_INT 2
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: PUSH
17433: LD_INT 50
17435: PUSH
17436: EMPTY
17437: LIST
17438: PUSH
17439: LD_INT 3
17441: PUSH
17442: LD_INT 58
17444: PUSH
17445: EMPTY
17446: LIST
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: PPUSH
17458: CALL_OW 69
17462: PUSH
17463: LD_INT 18
17465: PPUSH
17466: LD_INT 22
17468: PUSH
17469: LD_INT 3
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: PUSH
17476: LD_INT 21
17478: PUSH
17479: LD_INT 2
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: PPUSH
17490: CALL_OW 70
17494: PUSH
17495: LD_INT 0
17497: EQUAL
17498: DIFF
17499: AND
17500: IFFALSE 17626
17502: GO 17504
17504: DISABLE
// begin enable ;
17505: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17506: LD_INT 3
17508: PPUSH
17509: LD_INT 21
17511: PPUSH
17512: LD_INT 3
17514: PUSH
17515: LD_INT 4
17517: PUSH
17518: LD_INT 5
17520: PUSH
17521: LD_INT 6
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: PUSH
17530: LD_OWVAR 67
17534: ARRAY
17535: PPUSH
17536: LD_INT 46
17538: PUSH
17539: LD_INT 45
17541: PUSH
17542: LD_INT 44
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: LIST
17549: PPUSH
17550: LD_INT 3
17552: PPUSH
17553: LD_INT 3
17555: PPUSH
17556: LD_INT 24
17558: PPUSH
17559: CALL 14507 0 7
// if russianTimeLapsers = 0 then
17563: LD_EXP 33
17567: PUSH
17568: LD_INT 0
17570: EQUAL
17571: IFFALSE 17626
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
17573: LD_INT 3
17575: PPUSH
17576: LD_INT 112
17578: PPUSH
17579: LD_INT 1
17581: PUSH
17582: LD_INT 2
17584: PUSH
17585: LD_INT 2
17587: PUSH
17588: LD_INT 2
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: LIST
17595: LIST
17596: PUSH
17597: LD_OWVAR 67
17601: ARRAY
17602: PPUSH
17603: LD_INT 49
17605: PUSH
17606: LD_INT 49
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: PPUSH
17613: LD_INT 3
17615: PPUSH
17616: LD_INT 3
17618: PPUSH
17619: LD_INT 24
17621: PPUSH
17622: CALL 14507 0 7
// end ;
17626: END
// every 0 0$1 trigger arabianMines do var i ;
17627: LD_EXP 37
17631: IFFALSE 17752
17633: GO 17635
17635: DISABLE
17636: LD_INT 0
17638: PPUSH
// begin enable ;
17639: ENABLE
// for i in arabianMines do
17640: LD_ADDR_VAR 0 1
17644: PUSH
17645: LD_EXP 37
17649: PUSH
17650: FOR_IN
17651: IFFALSE 17750
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
17653: LD_INT 22
17655: PUSH
17656: LD_INT 1
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: PUSH
17663: LD_INT 92
17665: PUSH
17666: LD_VAR 0 1
17670: PUSH
17671: LD_INT 1
17673: ARRAY
17674: PUSH
17675: LD_VAR 0 1
17679: PUSH
17680: LD_INT 2
17682: ARRAY
17683: PUSH
17684: LD_INT 3
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: LIST
17691: LIST
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: PPUSH
17697: CALL_OW 69
17701: IFFALSE 17748
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
17703: LD_VAR 0 1
17707: PUSH
17708: LD_INT 1
17710: ARRAY
17711: PPUSH
17712: LD_VAR 0 1
17716: PUSH
17717: LD_INT 2
17719: ARRAY
17720: PPUSH
17721: LD_INT 5
17723: PPUSH
17724: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
17728: LD_ADDR_EXP 37
17732: PUSH
17733: LD_EXP 37
17737: PPUSH
17738: LD_VAR 0 1
17742: PPUSH
17743: CALL_OW 3
17747: ST_TO_ADDR
// end ; end ;
17748: GO 17650
17750: POP
17751: POP
// end ;
17752: PPOPN 1
17754: END
// every 0 0$10 trigger vehicleTeleported >= 4 and tpCounter mod 12 = 0 do var i , hexes ;
17755: LD_EXP 21
17759: PUSH
17760: LD_INT 4
17762: GREATEREQUAL
17763: PUSH
17764: LD_EXP 22
17768: PUSH
17769: LD_INT 12
17771: MOD
17772: PUSH
17773: LD_INT 0
17775: EQUAL
17776: AND
17777: IFFALSE 17891
17779: GO 17781
17781: DISABLE
17782: LD_INT 0
17784: PPUSH
17785: PPUSH
// begin enable ;
17786: ENABLE
// hexes := [ [ 122 , 142 ] , [ 101 , 127 ] , [ 104 , 104 ] , [ 46 , 81 ] ] ;
17787: LD_ADDR_VAR 0 2
17791: PUSH
17792: LD_INT 122
17794: PUSH
17795: LD_INT 142
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: PUSH
17802: LD_INT 101
17804: PUSH
17805: LD_INT 127
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: PUSH
17812: LD_INT 104
17814: PUSH
17815: LD_INT 104
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: PUSH
17822: LD_INT 46
17824: PUSH
17825: LD_INT 81
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PUSH
17832: EMPTY
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: ST_TO_ADDR
// i := rand ( 1 , 4 ) ;
17838: LD_ADDR_VAR 0 1
17842: PUSH
17843: LD_INT 1
17845: PPUSH
17846: LD_INT 4
17848: PPUSH
17849: CALL_OW 12
17853: ST_TO_ADDR
// TeleportExit ( ruteleprt , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17854: LD_INT 10
17856: PPUSH
17857: LD_VAR 0 2
17861: PUSH
17862: LD_VAR 0 1
17866: ARRAY
17867: PUSH
17868: LD_INT 1
17870: ARRAY
17871: PPUSH
17872: LD_VAR 0 2
17876: PUSH
17877: LD_VAR 0 1
17881: ARRAY
17882: PUSH
17883: LD_INT 2
17885: ARRAY
17886: PPUSH
17887: CALL_OW 243
// end ; end_of_file
17891: PPOPN 2
17893: END
// every 0 0$1 trigger IsDead ( ruheadlab ) do
17894: LD_INT 3
17896: PPUSH
17897: CALL_OW 301
17901: IFFALSE 18122
17903: GO 17905
17905: DISABLE
// begin if UnitFilter ( RuScientists , [ f_ok ] ) then
17906: LD_EXP 27
17910: PPUSH
17911: LD_INT 50
17913: PUSH
17914: EMPTY
17915: LIST
17916: PPUSH
17917: CALL_OW 72
17921: IFFALSE 17930
// wait ( 0 0$10 ) ;
17923: LD_INT 350
17925: PPUSH
17926: CALL_OW 67
// DialogueOn ;
17930: CALL_OW 6
// if sciCounter = 0 then
17934: LD_EXP 28
17938: PUSH
17939: LD_INT 0
17941: EQUAL
17942: IFFALSE 17970
// begin Say ( JMM , D7a-JMM-1 ) ;
17944: LD_EXP 1
17948: PPUSH
17949: LD_STRING D7a-JMM-1
17951: PPUSH
17952: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
17956: LD_EXP 15
17960: PPUSH
17961: LD_STRING D7a-Pow-1
17963: PPUSH
17964: CALL_OW 94
// end else
17968: GO 18114
// if sciCounter < 6 then
17970: LD_EXP 28
17974: PUSH
17975: LD_INT 6
17977: LESS
17978: IFFALSE 18006
// begin Say ( JMM , D7b-JMM-1 ) ;
17980: LD_EXP 1
17984: PPUSH
17985: LD_STRING D7b-JMM-1
17987: PPUSH
17988: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
17992: LD_EXP 15
17996: PPUSH
17997: LD_STRING D7b-Pow-1
17999: PPUSH
18000: CALL_OW 94
// end else
18004: GO 18114
// begin Say ( JMM , D7c-JMM-1 ) ;
18006: LD_EXP 1
18010: PPUSH
18011: LD_STRING D7c-JMM-1
18013: PPUSH
18014: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
18018: LD_EXP 15
18022: PPUSH
18023: LD_STRING D7c-Pow-1
18025: PPUSH
18026: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
18030: LD_EXP 1
18034: PPUSH
18035: LD_STRING D7d-JMM-1
18037: PPUSH
18038: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
18042: LD_EXP 15
18046: PPUSH
18047: LD_STRING D7d-Pow-1
18049: PPUSH
18050: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
18054: LD_EXP 1
18058: PPUSH
18059: LD_STRING D7d-JMM-2
18061: PPUSH
18062: CALL_OW 88
// if askSiberite = 1 then
18066: LD_EXP 25
18070: PUSH
18071: LD_INT 1
18073: EQUAL
18074: IFFALSE 18090
// Say ( JMM , D7d-JMM-2a ) else
18076: LD_EXP 1
18080: PPUSH
18081: LD_STRING D7d-JMM-2a
18083: PPUSH
18084: CALL_OW 88
18088: GO 18102
// SayRadio ( Powell , D7d-Pow-2 ) ;
18090: LD_EXP 15
18094: PPUSH
18095: LD_STRING D7d-Pow-2
18097: PPUSH
18098: CALL_OW 94
// SayRadio ( Powell , D7d-Pow-2a ) ;
18102: LD_EXP 15
18106: PPUSH
18107: LD_STRING D7d-Pow-2a
18109: PPUSH
18110: CALL_OW 94
// end ; DialogueOff ;
18114: CALL_OW 7
// FinishMission ;
18118: CALL 18123 0 0
// end ;
18122: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
18123: LD_INT 0
18125: PPUSH
18126: PPUSH
18127: PPUSH
18128: PPUSH
// m1 := false ;
18129: LD_ADDR_VAR 0 2
18133: PUSH
18134: LD_INT 0
18136: ST_TO_ADDR
// m2 := false ;
18137: LD_ADDR_VAR 0 3
18141: PUSH
18142: LD_INT 0
18144: ST_TO_ADDR
// m3 := false ;
18145: LD_ADDR_VAR 0 4
18149: PUSH
18150: LD_INT 0
18152: ST_TO_ADDR
// if not westPathUsed then
18153: LD_EXP 42
18157: NOT
18158: IFFALSE 18167
// SetAchievement ( ACH_PATH ) ;
18160: LD_STRING ACH_PATH
18162: PPUSH
18163: CALL_OW 543
// if not rocketBuilded then
18167: LD_EXP 44
18171: NOT
18172: IFFALSE 18188
// begin wait ( 3 ) ;
18174: LD_INT 3
18176: PPUSH
18177: CALL_OW 67
// SetAchievement ( ACH_ROCKET ) ;
18181: LD_STRING ACH_ROCKET
18183: PPUSH
18184: CALL_OW 543
// end ; if tick <= 40 40$00 then
18188: LD_OWVAR 1
18192: PUSH
18193: LD_INT 84000
18195: LESSEQUAL
18196: IFFALSE 18212
// begin wait ( 3 ) ;
18198: LD_INT 3
18200: PPUSH
18201: CALL_OW 67
// SetAchievement ( ACH_ASPEED_12 ) ;
18205: LD_STRING ACH_ASPEED_12
18207: PPUSH
18208: CALL_OW 543
// end ; if teleportExplored = 1 then
18212: LD_EXP 26
18216: PUSH
18217: LD_INT 1
18219: EQUAL
18220: IFFALSE 18242
// begin m1 := true ;
18222: LD_ADDR_VAR 0 2
18226: PUSH
18227: LD_INT 1
18229: ST_TO_ADDR
// AddMedal ( Teleport , 1 ) ;
18230: LD_STRING Teleport
18232: PPUSH
18233: LD_INT 1
18235: PPUSH
18236: CALL_OW 101
// end else
18240: GO 18253
// AddMedal ( Teleport , - 1 ) ;
18242: LD_STRING Teleport
18244: PPUSH
18245: LD_INT 1
18247: NEG
18248: PPUSH
18249: CALL_OW 101
// if sciCounter > 2 then
18253: LD_EXP 28
18257: PUSH
18258: LD_INT 2
18260: GREATER
18261: IFFALSE 18283
// begin m2 := true ;
18263: LD_ADDR_VAR 0 3
18267: PUSH
18268: LD_INT 1
18270: ST_TO_ADDR
// AddMedal ( Materials , 1 ) ;
18271: LD_STRING Materials
18273: PPUSH
18274: LD_INT 1
18276: PPUSH
18277: CALL_OW 101
// end else
18281: GO 18294
// AddMedal ( Materials , - 1 ) ;
18283: LD_STRING Materials
18285: PPUSH
18286: LD_INT 1
18288: NEG
18289: PPUSH
18290: CALL_OW 101
// if sciCounter >= 6 then
18294: LD_EXP 28
18298: PUSH
18299: LD_INT 6
18301: GREATEREQUAL
18302: IFFALSE 18334
// begin m3 := true ;
18304: LD_ADDR_VAR 0 4
18308: PUSH
18309: LD_INT 1
18311: ST_TO_ADDR
// AddMedal ( Scientists , 1 ) ;
18312: LD_STRING Scientists
18314: PPUSH
18315: LD_INT 1
18317: PPUSH
18318: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
18322: LD_INT 1
18324: PPUSH
18325: LD_STRING 12_SciDed_1
18327: PPUSH
18328: CALL_OW 39
// end else
18332: GO 18355
// begin AddMedal ( Scientists , - 1 ) ;
18334: LD_STRING Scientists
18336: PPUSH
18337: LD_INT 1
18339: NEG
18340: PPUSH
18341: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
18345: LD_INT 0
18347: PPUSH
18348: LD_STRING 12_SciDed_1
18350: PPUSH
18351: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
18355: LD_EXP 24
18359: PPUSH
18360: LD_STRING 12_MainDepositFake_1
18362: PPUSH
18363: CALL_OW 39
// if m1 and m2 and m3 and Difficulty >= 3 then
18367: LD_VAR 0 2
18371: PUSH
18372: LD_VAR 0 3
18376: AND
18377: PUSH
18378: LD_VAR 0 4
18382: AND
18383: PUSH
18384: LD_OWVAR 67
18388: PUSH
18389: LD_INT 3
18391: GREATEREQUAL
18392: AND
18393: IFFALSE 18405
// SetAchievementEX ( ACH_AMER , 12 ) ;
18395: LD_STRING ACH_AMER
18397: PPUSH
18398: LD_INT 12
18400: PPUSH
18401: CALL_OW 564
// GiveMedals ( MAIN ) ;
18405: LD_STRING MAIN
18407: PPUSH
18408: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
18412: LD_INT 22
18414: PUSH
18415: LD_INT 1
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: LD_INT 23
18424: PUSH
18425: LD_INT 1
18427: PUSH
18428: EMPTY
18429: LIST
18430: LIST
18431: PUSH
18432: LD_INT 21
18434: PUSH
18435: LD_INT 1
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: PUSH
18442: LD_INT 2
18444: PUSH
18445: LD_INT 25
18447: PUSH
18448: LD_INT 1
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PUSH
18455: LD_INT 25
18457: PUSH
18458: LD_INT 2
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: PUSH
18465: LD_INT 25
18467: PUSH
18468: LD_INT 3
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: PUSH
18475: LD_INT 25
18477: PUSH
18478: LD_INT 4
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: PUSH
18485: LD_INT 25
18487: PUSH
18488: LD_INT 5
18490: PUSH
18491: EMPTY
18492: LIST
18493: LIST
18494: PUSH
18495: LD_INT 25
18497: PUSH
18498: LD_INT 8
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: PUSH
18514: EMPTY
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: PPUSH
18520: CALL_OW 69
18524: PPUSH
18525: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18529: LD_EXP 1
18533: PPUSH
18534: LD_EXP 39
18538: PUSH
18539: LD_STRING JMM
18541: STR
18542: PPUSH
18543: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18547: LD_EXP 7
18551: PPUSH
18552: LD_EXP 39
18556: PUSH
18557: LD_STRING Brown
18559: STR
18560: PPUSH
18561: CALL 12602 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18565: LD_EXP 3
18569: PPUSH
18570: LD_EXP 39
18574: PUSH
18575: LD_STRING Donaldson
18577: STR
18578: PPUSH
18579: CALL 12602 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18583: LD_EXP 4
18587: PPUSH
18588: LD_EXP 39
18592: PUSH
18593: LD_STRING Bobby
18595: STR
18596: PPUSH
18597: CALL 12602 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18601: LD_EXP 5
18605: PPUSH
18606: LD_EXP 39
18610: PUSH
18611: LD_STRING Cyrus
18613: STR
18614: PPUSH
18615: CALL 12602 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18619: LD_EXP 2
18623: PPUSH
18624: LD_EXP 39
18628: PUSH
18629: LD_STRING Lisa
18631: STR
18632: PPUSH
18633: CALL 12602 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18637: LD_EXP 12
18641: PPUSH
18642: LD_EXP 39
18646: PUSH
18647: LD_STRING Frank
18649: STR
18650: PPUSH
18651: CALL 12602 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
18655: LD_EXP 13
18659: PPUSH
18660: LD_EXP 39
18664: PUSH
18665: LD_STRING Kikuchi
18667: STR
18668: PPUSH
18669: CALL 12602 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
18673: LD_EXP 9
18677: PPUSH
18678: LD_EXP 39
18682: PUSH
18683: LD_STRING Houten
18685: STR
18686: PPUSH
18687: CALL 12602 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
18691: LD_EXP 11
18695: PPUSH
18696: LD_EXP 39
18700: PUSH
18701: LD_STRING Gary
18703: STR
18704: PPUSH
18705: CALL 12602 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
18709: LD_EXP 10
18713: PPUSH
18714: LD_EXP 39
18718: PUSH
18719: LD_STRING Cornell
18721: STR
18722: PPUSH
18723: CALL 12602 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18727: LD_EXP 6
18731: PPUSH
18732: LD_EXP 39
18736: PUSH
18737: LD_STRING Denis
18739: STR
18740: PPUSH
18741: CALL 12602 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18745: LD_EXP 8
18749: PPUSH
18750: LD_EXP 39
18754: PUSH
18755: LD_STRING Gladstone
18757: STR
18758: PPUSH
18759: CALL 12602 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
18763: LD_INT 22
18765: PUSH
18766: LD_INT 1
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PUSH
18773: LD_INT 23
18775: PUSH
18776: LD_INT 1
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: LD_INT 21
18785: PUSH
18786: LD_INT 1
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 2
18795: PUSH
18796: LD_INT 25
18798: PUSH
18799: LD_INT 1
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PUSH
18806: LD_INT 25
18808: PUSH
18809: LD_INT 2
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: LD_INT 25
18818: PUSH
18819: LD_INT 3
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: PUSH
18826: LD_INT 25
18828: PUSH
18829: LD_INT 4
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: LD_INT 25
18838: PUSH
18839: LD_INT 5
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 25
18848: PUSH
18849: LD_INT 8
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: PPUSH
18871: CALL_OW 69
18875: PUSH
18876: LD_EXP 1
18880: PUSH
18881: LD_EXP 7
18885: PUSH
18886: LD_EXP 3
18890: PUSH
18891: LD_EXP 4
18895: PUSH
18896: LD_EXP 5
18900: PUSH
18901: LD_EXP 2
18905: PUSH
18906: LD_EXP 12
18910: PUSH
18911: LD_EXP 8
18915: PUSH
18916: LD_EXP 13
18920: PUSH
18921: LD_EXP 6
18925: PUSH
18926: LD_EXP 9
18930: PUSH
18931: LD_EXP 11
18935: PUSH
18936: LD_EXP 10
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: DIFF
18956: PPUSH
18957: LD_STRING 12_other_survivors
18959: PPUSH
18960: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
18964: LD_INT 22
18966: PUSH
18967: LD_INT 1
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 23
18976: PUSH
18977: LD_INT 2
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PUSH
18984: LD_INT 21
18986: PUSH
18987: LD_INT 1
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: PUSH
18994: LD_INT 2
18996: PUSH
18997: LD_INT 25
18999: PUSH
19000: LD_INT 1
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: PUSH
19007: LD_INT 25
19009: PUSH
19010: LD_INT 2
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PUSH
19017: LD_INT 25
19019: PUSH
19020: LD_INT 3
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: PUSH
19027: LD_INT 25
19029: PUSH
19030: LD_INT 4
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: PUSH
19037: LD_INT 25
19039: PUSH
19040: LD_INT 5
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: PUSH
19047: LD_INT 25
19049: PUSH
19050: LD_INT 8
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: PPUSH
19072: CALL_OW 69
19076: PPUSH
19077: LD_STRING 12_kurt_squad
19079: PPUSH
19080: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
19084: LD_EXP 14
19088: PPUSH
19089: LD_STRING 12_others
19091: PPUSH
19092: CALL_OW 38
// YouWin ;
19096: CALL_OW 103
// end ; end_of_file
19100: LD_VAR 0 1
19104: RET
// every 0 0$01 trigger ruAI and cratesAllow do
19105: LD_EXP 34
19109: PUSH
19110: LD_EXP 45
19114: AND
19115: IFFALSE 19425
19117: GO 19119
19119: DISABLE
// begin repeat wait ( 0 0$08 ) ;
19120: LD_INT 280
19122: PPUSH
19123: CALL_OW 67
// if cratesSpawned < 12 then
19127: LD_EXP 38
19131: PUSH
19132: LD_INT 12
19134: LESS
19135: IFFALSE 19187
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
19137: LD_INT 105
19139: PPUSH
19140: LD_INT 350
19142: PPUSH
19143: CALL_OW 12
19147: PPUSH
19148: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19152: LD_INT 3
19154: PPUSH
19155: LD_INT 5
19157: PPUSH
19158: CALL_OW 12
19162: PPUSH
19163: LD_INT 21
19165: PPUSH
19166: LD_INT 1
19168: PPUSH
19169: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19173: LD_ADDR_EXP 38
19177: PUSH
19178: LD_EXP 38
19182: PUSH
19183: LD_INT 1
19185: PLUS
19186: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 32 then
19187: LD_EXP 38
19191: PUSH
19192: LD_INT 12
19194: GREATEREQUAL
19195: PUSH
19196: LD_EXP 38
19200: PUSH
19201: LD_INT 32
19203: LESS
19204: AND
19205: IFFALSE 19257
// begin wait ( rand ( 0 0$12 , 0 0$20 ) ) ;
19207: LD_INT 420
19209: PPUSH
19210: LD_INT 700
19212: PPUSH
19213: CALL_OW 12
19217: PPUSH
19218: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19222: LD_INT 3
19224: PPUSH
19225: LD_INT 5
19227: PPUSH
19228: CALL_OW 12
19232: PPUSH
19233: LD_INT 21
19235: PPUSH
19236: LD_INT 1
19238: PPUSH
19239: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19243: LD_ADDR_EXP 38
19247: PUSH
19248: LD_EXP 38
19252: PUSH
19253: LD_INT 1
19255: PLUS
19256: ST_TO_ADDR
// end ; if cratesSpawned >= 32 then
19257: LD_EXP 38
19261: PUSH
19262: LD_INT 32
19264: GREATEREQUAL
19265: IFFALSE 19339
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
19267: LD_INT 21
19269: PPUSH
19270: CALL_OW 435
19274: PUSH
19275: LD_INT 14
19277: LESS
19278: IFFALSE 19289
// wait ( 0 0$10 ) else
19280: LD_INT 350
19282: PPUSH
19283: CALL_OW 67
19287: GO 19304
// wait ( rand ( 0 0$50 , 1 1$30 ) ) ;
19289: LD_INT 1750
19291: PPUSH
19292: LD_INT 3150
19294: PPUSH
19295: CALL_OW 12
19299: PPUSH
19300: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
19304: LD_INT 2
19306: PPUSH
19307: LD_INT 5
19309: PPUSH
19310: CALL_OW 12
19314: PPUSH
19315: LD_INT 21
19317: PPUSH
19318: LD_INT 1
19320: PPUSH
19321: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19325: LD_ADDR_EXP 38
19329: PUSH
19330: LD_EXP 38
19334: PUSH
19335: LD_INT 1
19337: PLUS
19338: ST_TO_ADDR
// end ; if cratesSpawned >= 110 then
19339: LD_EXP 38
19343: PUSH
19344: LD_INT 110
19346: GREATEREQUAL
19347: IFFALSE 19421
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
19349: LD_INT 21
19351: PPUSH
19352: CALL_OW 435
19356: PUSH
19357: LD_INT 14
19359: LESS
19360: IFFALSE 19371
// wait ( 0 0$20 ) else
19362: LD_INT 700
19364: PPUSH
19365: CALL_OW 67
19369: GO 19386
// wait ( rand ( 1 1$10 , 1 1$50 ) ) ;
19371: LD_INT 2450
19373: PPUSH
19374: LD_INT 3850
19376: PPUSH
19377: CALL_OW 12
19381: PPUSH
19382: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
19386: LD_INT 1
19388: PPUSH
19389: LD_INT 5
19391: PPUSH
19392: CALL_OW 12
19396: PPUSH
19397: LD_INT 21
19399: PPUSH
19400: LD_INT 1
19402: PPUSH
19403: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19407: LD_ADDR_EXP 38
19411: PUSH
19412: LD_EXP 38
19416: PUSH
19417: LD_INT 1
19419: PLUS
19420: ST_TO_ADDR
// end ; until false ;
19421: LD_INT 0
19423: IFFALSE 19120
// end ; end_of_file end_of_file
19425: END
// export globalGameSaveCounter ; every 0 0$1 do
19426: GO 19428
19428: DISABLE
// begin enable ;
19429: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19430: LD_STRING updateTimer(
19432: PUSH
19433: LD_OWVAR 1
19437: STR
19438: PUSH
19439: LD_STRING );
19441: STR
19442: PPUSH
19443: CALL_OW 559
// end ;
19447: END
// every 0 0$1 do
19448: GO 19450
19450: DISABLE
// begin globalGameSaveCounter := 0 ;
19451: LD_ADDR_EXP 46
19455: PUSH
19456: LD_INT 0
19458: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19459: LD_STRING setGameSaveCounter(0)
19461: PPUSH
19462: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19466: LD_STRING initStreamRollete();
19468: PPUSH
19469: CALL_OW 559
// InitStreamMode ;
19473: CALL 20816 0 0
// DefineStreamItems ( false ) ;
19477: LD_INT 0
19479: PPUSH
19480: CALL 21280 0 1
// end ;
19484: END
// export function SOS_MapStart ( ) ; begin
19485: LD_INT 0
19487: PPUSH
// if streamModeActive then
19488: LD_EXP 47
19492: IFFALSE 19501
// DefineStreamItems ( true ) ;
19494: LD_INT 1
19496: PPUSH
19497: CALL 21280 0 1
// UpdateLuaVariables ( ) ;
19501: CALL 19518 0 0
// UpdateFactoryWaypoints ( ) ;
19505: CALL 34282 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19509: CALL 34534 0 0
// end ;
19513: LD_VAR 0 1
19517: RET
// function UpdateLuaVariables ( ) ; begin
19518: LD_INT 0
19520: PPUSH
// if globalGameSaveCounter then
19521: LD_EXP 46
19525: IFFALSE 19559
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19527: LD_ADDR_EXP 46
19531: PUSH
19532: LD_EXP 46
19536: PPUSH
19537: CALL 79750 0 1
19541: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19542: LD_STRING setGameSaveCounter(
19544: PUSH
19545: LD_EXP 46
19549: STR
19550: PUSH
19551: LD_STRING )
19553: STR
19554: PPUSH
19555: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19559: LD_STRING setGameDifficulty(
19561: PUSH
19562: LD_OWVAR 67
19566: STR
19567: PUSH
19568: LD_STRING )
19570: STR
19571: PPUSH
19572: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
19576: LD_STRING displayDifficulty(
19578: PUSH
19579: LD_OWVAR 67
19583: STR
19584: PUSH
19585: LD_STRING )
19587: STR
19588: PPUSH
19589: CALL_OW 559
// end ;
19593: LD_VAR 0 1
19597: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19598: LD_INT 0
19600: PPUSH
// if p2 = stream_mode then
19601: LD_VAR 0 2
19605: PUSH
19606: LD_INT 100
19608: EQUAL
19609: IFFALSE 20612
// begin if not StreamModeActive then
19611: LD_EXP 47
19615: NOT
19616: IFFALSE 19626
// StreamModeActive := true ;
19618: LD_ADDR_EXP 47
19622: PUSH
19623: LD_INT 1
19625: ST_TO_ADDR
// if p3 = 0 then
19626: LD_VAR 0 3
19630: PUSH
19631: LD_INT 0
19633: EQUAL
19634: IFFALSE 19640
// InitStreamMode ;
19636: CALL 20816 0 0
// if p3 = 1 then
19640: LD_VAR 0 3
19644: PUSH
19645: LD_INT 1
19647: EQUAL
19648: IFFALSE 19658
// sRocket := true ;
19650: LD_ADDR_EXP 52
19654: PUSH
19655: LD_INT 1
19657: ST_TO_ADDR
// if p3 = 2 then
19658: LD_VAR 0 3
19662: PUSH
19663: LD_INT 2
19665: EQUAL
19666: IFFALSE 19676
// sSpeed := true ;
19668: LD_ADDR_EXP 51
19672: PUSH
19673: LD_INT 1
19675: ST_TO_ADDR
// if p3 = 3 then
19676: LD_VAR 0 3
19680: PUSH
19681: LD_INT 3
19683: EQUAL
19684: IFFALSE 19694
// sEngine := true ;
19686: LD_ADDR_EXP 53
19690: PUSH
19691: LD_INT 1
19693: ST_TO_ADDR
// if p3 = 4 then
19694: LD_VAR 0 3
19698: PUSH
19699: LD_INT 4
19701: EQUAL
19702: IFFALSE 19712
// sSpec := true ;
19704: LD_ADDR_EXP 50
19708: PUSH
19709: LD_INT 1
19711: ST_TO_ADDR
// if p3 = 5 then
19712: LD_VAR 0 3
19716: PUSH
19717: LD_INT 5
19719: EQUAL
19720: IFFALSE 19730
// sLevel := true ;
19722: LD_ADDR_EXP 54
19726: PUSH
19727: LD_INT 1
19729: ST_TO_ADDR
// if p3 = 6 then
19730: LD_VAR 0 3
19734: PUSH
19735: LD_INT 6
19737: EQUAL
19738: IFFALSE 19748
// sArmoury := true ;
19740: LD_ADDR_EXP 55
19744: PUSH
19745: LD_INT 1
19747: ST_TO_ADDR
// if p3 = 7 then
19748: LD_VAR 0 3
19752: PUSH
19753: LD_INT 7
19755: EQUAL
19756: IFFALSE 19766
// sRadar := true ;
19758: LD_ADDR_EXP 56
19762: PUSH
19763: LD_INT 1
19765: ST_TO_ADDR
// if p3 = 8 then
19766: LD_VAR 0 3
19770: PUSH
19771: LD_INT 8
19773: EQUAL
19774: IFFALSE 19784
// sBunker := true ;
19776: LD_ADDR_EXP 57
19780: PUSH
19781: LD_INT 1
19783: ST_TO_ADDR
// if p3 = 9 then
19784: LD_VAR 0 3
19788: PUSH
19789: LD_INT 9
19791: EQUAL
19792: IFFALSE 19802
// sHack := true ;
19794: LD_ADDR_EXP 58
19798: PUSH
19799: LD_INT 1
19801: ST_TO_ADDR
// if p3 = 10 then
19802: LD_VAR 0 3
19806: PUSH
19807: LD_INT 10
19809: EQUAL
19810: IFFALSE 19820
// sFire := true ;
19812: LD_ADDR_EXP 59
19816: PUSH
19817: LD_INT 1
19819: ST_TO_ADDR
// if p3 = 11 then
19820: LD_VAR 0 3
19824: PUSH
19825: LD_INT 11
19827: EQUAL
19828: IFFALSE 19838
// sRefresh := true ;
19830: LD_ADDR_EXP 60
19834: PUSH
19835: LD_INT 1
19837: ST_TO_ADDR
// if p3 = 12 then
19838: LD_VAR 0 3
19842: PUSH
19843: LD_INT 12
19845: EQUAL
19846: IFFALSE 19856
// sExp := true ;
19848: LD_ADDR_EXP 61
19852: PUSH
19853: LD_INT 1
19855: ST_TO_ADDR
// if p3 = 13 then
19856: LD_VAR 0 3
19860: PUSH
19861: LD_INT 13
19863: EQUAL
19864: IFFALSE 19874
// sDepot := true ;
19866: LD_ADDR_EXP 62
19870: PUSH
19871: LD_INT 1
19873: ST_TO_ADDR
// if p3 = 14 then
19874: LD_VAR 0 3
19878: PUSH
19879: LD_INT 14
19881: EQUAL
19882: IFFALSE 19892
// sFlag := true ;
19884: LD_ADDR_EXP 63
19888: PUSH
19889: LD_INT 1
19891: ST_TO_ADDR
// if p3 = 15 then
19892: LD_VAR 0 3
19896: PUSH
19897: LD_INT 15
19899: EQUAL
19900: IFFALSE 19910
// sKamikadze := true ;
19902: LD_ADDR_EXP 71
19906: PUSH
19907: LD_INT 1
19909: ST_TO_ADDR
// if p3 = 16 then
19910: LD_VAR 0 3
19914: PUSH
19915: LD_INT 16
19917: EQUAL
19918: IFFALSE 19928
// sTroll := true ;
19920: LD_ADDR_EXP 72
19924: PUSH
19925: LD_INT 1
19927: ST_TO_ADDR
// if p3 = 17 then
19928: LD_VAR 0 3
19932: PUSH
19933: LD_INT 17
19935: EQUAL
19936: IFFALSE 19946
// sSlow := true ;
19938: LD_ADDR_EXP 73
19942: PUSH
19943: LD_INT 1
19945: ST_TO_ADDR
// if p3 = 18 then
19946: LD_VAR 0 3
19950: PUSH
19951: LD_INT 18
19953: EQUAL
19954: IFFALSE 19964
// sLack := true ;
19956: LD_ADDR_EXP 74
19960: PUSH
19961: LD_INT 1
19963: ST_TO_ADDR
// if p3 = 19 then
19964: LD_VAR 0 3
19968: PUSH
19969: LD_INT 19
19971: EQUAL
19972: IFFALSE 19982
// sTank := true ;
19974: LD_ADDR_EXP 76
19978: PUSH
19979: LD_INT 1
19981: ST_TO_ADDR
// if p3 = 20 then
19982: LD_VAR 0 3
19986: PUSH
19987: LD_INT 20
19989: EQUAL
19990: IFFALSE 20000
// sRemote := true ;
19992: LD_ADDR_EXP 77
19996: PUSH
19997: LD_INT 1
19999: ST_TO_ADDR
// if p3 = 21 then
20000: LD_VAR 0 3
20004: PUSH
20005: LD_INT 21
20007: EQUAL
20008: IFFALSE 20018
// sPowell := true ;
20010: LD_ADDR_EXP 78
20014: PUSH
20015: LD_INT 1
20017: ST_TO_ADDR
// if p3 = 22 then
20018: LD_VAR 0 3
20022: PUSH
20023: LD_INT 22
20025: EQUAL
20026: IFFALSE 20036
// sTeleport := true ;
20028: LD_ADDR_EXP 81
20032: PUSH
20033: LD_INT 1
20035: ST_TO_ADDR
// if p3 = 23 then
20036: LD_VAR 0 3
20040: PUSH
20041: LD_INT 23
20043: EQUAL
20044: IFFALSE 20054
// sOilTower := true ;
20046: LD_ADDR_EXP 83
20050: PUSH
20051: LD_INT 1
20053: ST_TO_ADDR
// if p3 = 24 then
20054: LD_VAR 0 3
20058: PUSH
20059: LD_INT 24
20061: EQUAL
20062: IFFALSE 20072
// sShovel := true ;
20064: LD_ADDR_EXP 84
20068: PUSH
20069: LD_INT 1
20071: ST_TO_ADDR
// if p3 = 25 then
20072: LD_VAR 0 3
20076: PUSH
20077: LD_INT 25
20079: EQUAL
20080: IFFALSE 20090
// sSheik := true ;
20082: LD_ADDR_EXP 85
20086: PUSH
20087: LD_INT 1
20089: ST_TO_ADDR
// if p3 = 26 then
20090: LD_VAR 0 3
20094: PUSH
20095: LD_INT 26
20097: EQUAL
20098: IFFALSE 20108
// sEarthquake := true ;
20100: LD_ADDR_EXP 87
20104: PUSH
20105: LD_INT 1
20107: ST_TO_ADDR
// if p3 = 27 then
20108: LD_VAR 0 3
20112: PUSH
20113: LD_INT 27
20115: EQUAL
20116: IFFALSE 20126
// sAI := true ;
20118: LD_ADDR_EXP 88
20122: PUSH
20123: LD_INT 1
20125: ST_TO_ADDR
// if p3 = 28 then
20126: LD_VAR 0 3
20130: PUSH
20131: LD_INT 28
20133: EQUAL
20134: IFFALSE 20144
// sCargo := true ;
20136: LD_ADDR_EXP 91
20140: PUSH
20141: LD_INT 1
20143: ST_TO_ADDR
// if p3 = 29 then
20144: LD_VAR 0 3
20148: PUSH
20149: LD_INT 29
20151: EQUAL
20152: IFFALSE 20162
// sDLaser := true ;
20154: LD_ADDR_EXP 92
20158: PUSH
20159: LD_INT 1
20161: ST_TO_ADDR
// if p3 = 30 then
20162: LD_VAR 0 3
20166: PUSH
20167: LD_INT 30
20169: EQUAL
20170: IFFALSE 20180
// sExchange := true ;
20172: LD_ADDR_EXP 93
20176: PUSH
20177: LD_INT 1
20179: ST_TO_ADDR
// if p3 = 31 then
20180: LD_VAR 0 3
20184: PUSH
20185: LD_INT 31
20187: EQUAL
20188: IFFALSE 20198
// sFac := true ;
20190: LD_ADDR_EXP 94
20194: PUSH
20195: LD_INT 1
20197: ST_TO_ADDR
// if p3 = 32 then
20198: LD_VAR 0 3
20202: PUSH
20203: LD_INT 32
20205: EQUAL
20206: IFFALSE 20216
// sPower := true ;
20208: LD_ADDR_EXP 95
20212: PUSH
20213: LD_INT 1
20215: ST_TO_ADDR
// if p3 = 33 then
20216: LD_VAR 0 3
20220: PUSH
20221: LD_INT 33
20223: EQUAL
20224: IFFALSE 20234
// sRandom := true ;
20226: LD_ADDR_EXP 96
20230: PUSH
20231: LD_INT 1
20233: ST_TO_ADDR
// if p3 = 34 then
20234: LD_VAR 0 3
20238: PUSH
20239: LD_INT 34
20241: EQUAL
20242: IFFALSE 20252
// sShield := true ;
20244: LD_ADDR_EXP 97
20248: PUSH
20249: LD_INT 1
20251: ST_TO_ADDR
// if p3 = 35 then
20252: LD_VAR 0 3
20256: PUSH
20257: LD_INT 35
20259: EQUAL
20260: IFFALSE 20270
// sTime := true ;
20262: LD_ADDR_EXP 98
20266: PUSH
20267: LD_INT 1
20269: ST_TO_ADDR
// if p3 = 36 then
20270: LD_VAR 0 3
20274: PUSH
20275: LD_INT 36
20277: EQUAL
20278: IFFALSE 20288
// sTools := true ;
20280: LD_ADDR_EXP 99
20284: PUSH
20285: LD_INT 1
20287: ST_TO_ADDR
// if p3 = 101 then
20288: LD_VAR 0 3
20292: PUSH
20293: LD_INT 101
20295: EQUAL
20296: IFFALSE 20306
// sSold := true ;
20298: LD_ADDR_EXP 64
20302: PUSH
20303: LD_INT 1
20305: ST_TO_ADDR
// if p3 = 102 then
20306: LD_VAR 0 3
20310: PUSH
20311: LD_INT 102
20313: EQUAL
20314: IFFALSE 20324
// sDiff := true ;
20316: LD_ADDR_EXP 65
20320: PUSH
20321: LD_INT 1
20323: ST_TO_ADDR
// if p3 = 103 then
20324: LD_VAR 0 3
20328: PUSH
20329: LD_INT 103
20331: EQUAL
20332: IFFALSE 20342
// sFog := true ;
20334: LD_ADDR_EXP 68
20338: PUSH
20339: LD_INT 1
20341: ST_TO_ADDR
// if p3 = 104 then
20342: LD_VAR 0 3
20346: PUSH
20347: LD_INT 104
20349: EQUAL
20350: IFFALSE 20360
// sReset := true ;
20352: LD_ADDR_EXP 69
20356: PUSH
20357: LD_INT 1
20359: ST_TO_ADDR
// if p3 = 105 then
20360: LD_VAR 0 3
20364: PUSH
20365: LD_INT 105
20367: EQUAL
20368: IFFALSE 20378
// sSun := true ;
20370: LD_ADDR_EXP 70
20374: PUSH
20375: LD_INT 1
20377: ST_TO_ADDR
// if p3 = 106 then
20378: LD_VAR 0 3
20382: PUSH
20383: LD_INT 106
20385: EQUAL
20386: IFFALSE 20396
// sTiger := true ;
20388: LD_ADDR_EXP 66
20392: PUSH
20393: LD_INT 1
20395: ST_TO_ADDR
// if p3 = 107 then
20396: LD_VAR 0 3
20400: PUSH
20401: LD_INT 107
20403: EQUAL
20404: IFFALSE 20414
// sBomb := true ;
20406: LD_ADDR_EXP 67
20410: PUSH
20411: LD_INT 1
20413: ST_TO_ADDR
// if p3 = 108 then
20414: LD_VAR 0 3
20418: PUSH
20419: LD_INT 108
20421: EQUAL
20422: IFFALSE 20432
// sWound := true ;
20424: LD_ADDR_EXP 75
20428: PUSH
20429: LD_INT 1
20431: ST_TO_ADDR
// if p3 = 109 then
20432: LD_VAR 0 3
20436: PUSH
20437: LD_INT 109
20439: EQUAL
20440: IFFALSE 20450
// sBetray := true ;
20442: LD_ADDR_EXP 79
20446: PUSH
20447: LD_INT 1
20449: ST_TO_ADDR
// if p3 = 110 then
20450: LD_VAR 0 3
20454: PUSH
20455: LD_INT 110
20457: EQUAL
20458: IFFALSE 20468
// sContamin := true ;
20460: LD_ADDR_EXP 80
20464: PUSH
20465: LD_INT 1
20467: ST_TO_ADDR
// if p3 = 111 then
20468: LD_VAR 0 3
20472: PUSH
20473: LD_INT 111
20475: EQUAL
20476: IFFALSE 20486
// sOil := true ;
20478: LD_ADDR_EXP 82
20482: PUSH
20483: LD_INT 1
20485: ST_TO_ADDR
// if p3 = 112 then
20486: LD_VAR 0 3
20490: PUSH
20491: LD_INT 112
20493: EQUAL
20494: IFFALSE 20504
// sStu := true ;
20496: LD_ADDR_EXP 86
20500: PUSH
20501: LD_INT 1
20503: ST_TO_ADDR
// if p3 = 113 then
20504: LD_VAR 0 3
20508: PUSH
20509: LD_INT 113
20511: EQUAL
20512: IFFALSE 20522
// sBazooka := true ;
20514: LD_ADDR_EXP 89
20518: PUSH
20519: LD_INT 1
20521: ST_TO_ADDR
// if p3 = 114 then
20522: LD_VAR 0 3
20526: PUSH
20527: LD_INT 114
20529: EQUAL
20530: IFFALSE 20540
// sMortar := true ;
20532: LD_ADDR_EXP 90
20536: PUSH
20537: LD_INT 1
20539: ST_TO_ADDR
// if p3 = 115 then
20540: LD_VAR 0 3
20544: PUSH
20545: LD_INT 115
20547: EQUAL
20548: IFFALSE 20558
// sRanger := true ;
20550: LD_ADDR_EXP 100
20554: PUSH
20555: LD_INT 1
20557: ST_TO_ADDR
// if p3 = 116 then
20558: LD_VAR 0 3
20562: PUSH
20563: LD_INT 116
20565: EQUAL
20566: IFFALSE 20576
// sComputer := true ;
20568: LD_ADDR_EXP 101
20572: PUSH
20573: LD_INT 1
20575: ST_TO_ADDR
// if p3 = 117 then
20576: LD_VAR 0 3
20580: PUSH
20581: LD_INT 117
20583: EQUAL
20584: IFFALSE 20594
// s30 := true ;
20586: LD_ADDR_EXP 102
20590: PUSH
20591: LD_INT 1
20593: ST_TO_ADDR
// if p3 = 118 then
20594: LD_VAR 0 3
20598: PUSH
20599: LD_INT 118
20601: EQUAL
20602: IFFALSE 20612
// s60 := true ;
20604: LD_ADDR_EXP 103
20608: PUSH
20609: LD_INT 1
20611: ST_TO_ADDR
// end ; if p2 = hack_mode then
20612: LD_VAR 0 2
20616: PUSH
20617: LD_INT 101
20619: EQUAL
20620: IFFALSE 20748
// begin case p3 of 1 :
20622: LD_VAR 0 3
20626: PUSH
20627: LD_INT 1
20629: DOUBLE
20630: EQUAL
20631: IFTRUE 20635
20633: GO 20642
20635: POP
// hHackUnlimitedResources ; 2 :
20636: CALL 32895 0 0
20640: GO 20748
20642: LD_INT 2
20644: DOUBLE
20645: EQUAL
20646: IFTRUE 20650
20648: GO 20657
20650: POP
// hHackSetLevel10 ; 3 :
20651: CALL 33028 0 0
20655: GO 20748
20657: LD_INT 3
20659: DOUBLE
20660: EQUAL
20661: IFTRUE 20665
20663: GO 20672
20665: POP
// hHackSetLevel10YourUnits ; 4 :
20666: CALL 33113 0 0
20670: GO 20748
20672: LD_INT 4
20674: DOUBLE
20675: EQUAL
20676: IFTRUE 20680
20678: GO 20687
20680: POP
// hHackInvincible ; 5 :
20681: CALL 33561 0 0
20685: GO 20748
20687: LD_INT 5
20689: DOUBLE
20690: EQUAL
20691: IFTRUE 20695
20693: GO 20702
20695: POP
// hHackInvisible ; 6 :
20696: CALL 33672 0 0
20700: GO 20748
20702: LD_INT 6
20704: DOUBLE
20705: EQUAL
20706: IFTRUE 20710
20708: GO 20717
20710: POP
// hHackChangeYourSide ; 7 :
20711: CALL 33729 0 0
20715: GO 20748
20717: LD_INT 7
20719: DOUBLE
20720: EQUAL
20721: IFTRUE 20725
20723: GO 20732
20725: POP
// hHackChangeUnitSide ; 8 :
20726: CALL 33771 0 0
20730: GO 20748
20732: LD_INT 8
20734: DOUBLE
20735: EQUAL
20736: IFTRUE 20740
20738: GO 20747
20740: POP
// hHackFog ; end ;
20741: CALL 33872 0 0
20745: GO 20748
20747: POP
// end ; if p2 = game_save_mode then
20748: LD_VAR 0 2
20752: PUSH
20753: LD_INT 102
20755: EQUAL
20756: IFFALSE 20811
// begin if p3 = 1 then
20758: LD_VAR 0 3
20762: PUSH
20763: LD_INT 1
20765: EQUAL
20766: IFFALSE 20778
// globalGameSaveCounter := p4 ;
20768: LD_ADDR_EXP 46
20772: PUSH
20773: LD_VAR 0 4
20777: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
20778: LD_VAR 0 3
20782: PUSH
20783: LD_INT 2
20785: EQUAL
20786: PUSH
20787: LD_EXP 46
20791: AND
20792: IFFALSE 20811
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20794: LD_STRING setGameSaveCounter(
20796: PUSH
20797: LD_EXP 46
20801: STR
20802: PUSH
20803: LD_STRING )
20805: STR
20806: PPUSH
20807: CALL_OW 559
// end ; end ;
20811: LD_VAR 0 7
20815: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
20816: LD_INT 0
20818: PPUSH
// streamModeActive := false ;
20819: LD_ADDR_EXP 47
20823: PUSH
20824: LD_INT 0
20826: ST_TO_ADDR
// normalCounter := 36 ;
20827: LD_ADDR_EXP 48
20831: PUSH
20832: LD_INT 36
20834: ST_TO_ADDR
// hardcoreCounter := 18 ;
20835: LD_ADDR_EXP 49
20839: PUSH
20840: LD_INT 18
20842: ST_TO_ADDR
// sRocket := false ;
20843: LD_ADDR_EXP 52
20847: PUSH
20848: LD_INT 0
20850: ST_TO_ADDR
// sSpeed := false ;
20851: LD_ADDR_EXP 51
20855: PUSH
20856: LD_INT 0
20858: ST_TO_ADDR
// sEngine := false ;
20859: LD_ADDR_EXP 53
20863: PUSH
20864: LD_INT 0
20866: ST_TO_ADDR
// sSpec := false ;
20867: LD_ADDR_EXP 50
20871: PUSH
20872: LD_INT 0
20874: ST_TO_ADDR
// sLevel := false ;
20875: LD_ADDR_EXP 54
20879: PUSH
20880: LD_INT 0
20882: ST_TO_ADDR
// sArmoury := false ;
20883: LD_ADDR_EXP 55
20887: PUSH
20888: LD_INT 0
20890: ST_TO_ADDR
// sRadar := false ;
20891: LD_ADDR_EXP 56
20895: PUSH
20896: LD_INT 0
20898: ST_TO_ADDR
// sBunker := false ;
20899: LD_ADDR_EXP 57
20903: PUSH
20904: LD_INT 0
20906: ST_TO_ADDR
// sHack := false ;
20907: LD_ADDR_EXP 58
20911: PUSH
20912: LD_INT 0
20914: ST_TO_ADDR
// sFire := false ;
20915: LD_ADDR_EXP 59
20919: PUSH
20920: LD_INT 0
20922: ST_TO_ADDR
// sRefresh := false ;
20923: LD_ADDR_EXP 60
20927: PUSH
20928: LD_INT 0
20930: ST_TO_ADDR
// sExp := false ;
20931: LD_ADDR_EXP 61
20935: PUSH
20936: LD_INT 0
20938: ST_TO_ADDR
// sDepot := false ;
20939: LD_ADDR_EXP 62
20943: PUSH
20944: LD_INT 0
20946: ST_TO_ADDR
// sFlag := false ;
20947: LD_ADDR_EXP 63
20951: PUSH
20952: LD_INT 0
20954: ST_TO_ADDR
// sKamikadze := false ;
20955: LD_ADDR_EXP 71
20959: PUSH
20960: LD_INT 0
20962: ST_TO_ADDR
// sTroll := false ;
20963: LD_ADDR_EXP 72
20967: PUSH
20968: LD_INT 0
20970: ST_TO_ADDR
// sSlow := false ;
20971: LD_ADDR_EXP 73
20975: PUSH
20976: LD_INT 0
20978: ST_TO_ADDR
// sLack := false ;
20979: LD_ADDR_EXP 74
20983: PUSH
20984: LD_INT 0
20986: ST_TO_ADDR
// sTank := false ;
20987: LD_ADDR_EXP 76
20991: PUSH
20992: LD_INT 0
20994: ST_TO_ADDR
// sRemote := false ;
20995: LD_ADDR_EXP 77
20999: PUSH
21000: LD_INT 0
21002: ST_TO_ADDR
// sPowell := false ;
21003: LD_ADDR_EXP 78
21007: PUSH
21008: LD_INT 0
21010: ST_TO_ADDR
// sTeleport := false ;
21011: LD_ADDR_EXP 81
21015: PUSH
21016: LD_INT 0
21018: ST_TO_ADDR
// sOilTower := false ;
21019: LD_ADDR_EXP 83
21023: PUSH
21024: LD_INT 0
21026: ST_TO_ADDR
// sShovel := false ;
21027: LD_ADDR_EXP 84
21031: PUSH
21032: LD_INT 0
21034: ST_TO_ADDR
// sSheik := false ;
21035: LD_ADDR_EXP 85
21039: PUSH
21040: LD_INT 0
21042: ST_TO_ADDR
// sEarthquake := false ;
21043: LD_ADDR_EXP 87
21047: PUSH
21048: LD_INT 0
21050: ST_TO_ADDR
// sAI := false ;
21051: LD_ADDR_EXP 88
21055: PUSH
21056: LD_INT 0
21058: ST_TO_ADDR
// sCargo := false ;
21059: LD_ADDR_EXP 91
21063: PUSH
21064: LD_INT 0
21066: ST_TO_ADDR
// sDLaser := false ;
21067: LD_ADDR_EXP 92
21071: PUSH
21072: LD_INT 0
21074: ST_TO_ADDR
// sExchange := false ;
21075: LD_ADDR_EXP 93
21079: PUSH
21080: LD_INT 0
21082: ST_TO_ADDR
// sFac := false ;
21083: LD_ADDR_EXP 94
21087: PUSH
21088: LD_INT 0
21090: ST_TO_ADDR
// sPower := false ;
21091: LD_ADDR_EXP 95
21095: PUSH
21096: LD_INT 0
21098: ST_TO_ADDR
// sRandom := false ;
21099: LD_ADDR_EXP 96
21103: PUSH
21104: LD_INT 0
21106: ST_TO_ADDR
// sShield := false ;
21107: LD_ADDR_EXP 97
21111: PUSH
21112: LD_INT 0
21114: ST_TO_ADDR
// sTime := false ;
21115: LD_ADDR_EXP 98
21119: PUSH
21120: LD_INT 0
21122: ST_TO_ADDR
// sTools := false ;
21123: LD_ADDR_EXP 99
21127: PUSH
21128: LD_INT 0
21130: ST_TO_ADDR
// sSold := false ;
21131: LD_ADDR_EXP 64
21135: PUSH
21136: LD_INT 0
21138: ST_TO_ADDR
// sDiff := false ;
21139: LD_ADDR_EXP 65
21143: PUSH
21144: LD_INT 0
21146: ST_TO_ADDR
// sFog := false ;
21147: LD_ADDR_EXP 68
21151: PUSH
21152: LD_INT 0
21154: ST_TO_ADDR
// sReset := false ;
21155: LD_ADDR_EXP 69
21159: PUSH
21160: LD_INT 0
21162: ST_TO_ADDR
// sSun := false ;
21163: LD_ADDR_EXP 70
21167: PUSH
21168: LD_INT 0
21170: ST_TO_ADDR
// sTiger := false ;
21171: LD_ADDR_EXP 66
21175: PUSH
21176: LD_INT 0
21178: ST_TO_ADDR
// sBomb := false ;
21179: LD_ADDR_EXP 67
21183: PUSH
21184: LD_INT 0
21186: ST_TO_ADDR
// sWound := false ;
21187: LD_ADDR_EXP 75
21191: PUSH
21192: LD_INT 0
21194: ST_TO_ADDR
// sBetray := false ;
21195: LD_ADDR_EXP 79
21199: PUSH
21200: LD_INT 0
21202: ST_TO_ADDR
// sContamin := false ;
21203: LD_ADDR_EXP 80
21207: PUSH
21208: LD_INT 0
21210: ST_TO_ADDR
// sOil := false ;
21211: LD_ADDR_EXP 82
21215: PUSH
21216: LD_INT 0
21218: ST_TO_ADDR
// sStu := false ;
21219: LD_ADDR_EXP 86
21223: PUSH
21224: LD_INT 0
21226: ST_TO_ADDR
// sBazooka := false ;
21227: LD_ADDR_EXP 89
21231: PUSH
21232: LD_INT 0
21234: ST_TO_ADDR
// sMortar := false ;
21235: LD_ADDR_EXP 90
21239: PUSH
21240: LD_INT 0
21242: ST_TO_ADDR
// sRanger := false ;
21243: LD_ADDR_EXP 100
21247: PUSH
21248: LD_INT 0
21250: ST_TO_ADDR
// sComputer := false ;
21251: LD_ADDR_EXP 101
21255: PUSH
21256: LD_INT 0
21258: ST_TO_ADDR
// s30 := false ;
21259: LD_ADDR_EXP 102
21263: PUSH
21264: LD_INT 0
21266: ST_TO_ADDR
// s60 := false ;
21267: LD_ADDR_EXP 103
21271: PUSH
21272: LD_INT 0
21274: ST_TO_ADDR
// end ;
21275: LD_VAR 0 1
21279: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21280: LD_INT 0
21282: PPUSH
21283: PPUSH
21284: PPUSH
21285: PPUSH
21286: PPUSH
21287: PPUSH
21288: PPUSH
// result := [ ] ;
21289: LD_ADDR_VAR 0 2
21293: PUSH
21294: EMPTY
21295: ST_TO_ADDR
// if campaign_id = 1 then
21296: LD_OWVAR 69
21300: PUSH
21301: LD_INT 1
21303: EQUAL
21304: IFFALSE 24470
// begin case mission_number of 1 :
21306: LD_OWVAR 70
21310: PUSH
21311: LD_INT 1
21313: DOUBLE
21314: EQUAL
21315: IFTRUE 21319
21317: GO 21395
21319: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21320: LD_ADDR_VAR 0 2
21324: PUSH
21325: LD_INT 2
21327: PUSH
21328: LD_INT 4
21330: PUSH
21331: LD_INT 11
21333: PUSH
21334: LD_INT 12
21336: PUSH
21337: LD_INT 15
21339: PUSH
21340: LD_INT 16
21342: PUSH
21343: LD_INT 22
21345: PUSH
21346: LD_INT 23
21348: PUSH
21349: LD_INT 26
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: PUSH
21363: LD_INT 101
21365: PUSH
21366: LD_INT 102
21368: PUSH
21369: LD_INT 106
21371: PUSH
21372: LD_INT 116
21374: PUSH
21375: LD_INT 117
21377: PUSH
21378: LD_INT 118
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: PUSH
21389: EMPTY
21390: LIST
21391: LIST
21392: ST_TO_ADDR
21393: GO 24468
21395: LD_INT 2
21397: DOUBLE
21398: EQUAL
21399: IFTRUE 21403
21401: GO 21487
21403: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21404: LD_ADDR_VAR 0 2
21408: PUSH
21409: LD_INT 2
21411: PUSH
21412: LD_INT 4
21414: PUSH
21415: LD_INT 11
21417: PUSH
21418: LD_INT 12
21420: PUSH
21421: LD_INT 15
21423: PUSH
21424: LD_INT 16
21426: PUSH
21427: LD_INT 22
21429: PUSH
21430: LD_INT 23
21432: PUSH
21433: LD_INT 26
21435: PUSH
21436: EMPTY
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: PUSH
21447: LD_INT 101
21449: PUSH
21450: LD_INT 102
21452: PUSH
21453: LD_INT 105
21455: PUSH
21456: LD_INT 106
21458: PUSH
21459: LD_INT 108
21461: PUSH
21462: LD_INT 116
21464: PUSH
21465: LD_INT 117
21467: PUSH
21468: LD_INT 118
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: ST_TO_ADDR
21485: GO 24468
21487: LD_INT 3
21489: DOUBLE
21490: EQUAL
21491: IFTRUE 21495
21493: GO 21583
21495: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21496: LD_ADDR_VAR 0 2
21500: PUSH
21501: LD_INT 2
21503: PUSH
21504: LD_INT 4
21506: PUSH
21507: LD_INT 5
21509: PUSH
21510: LD_INT 11
21512: PUSH
21513: LD_INT 12
21515: PUSH
21516: LD_INT 15
21518: PUSH
21519: LD_INT 16
21521: PUSH
21522: LD_INT 22
21524: PUSH
21525: LD_INT 26
21527: PUSH
21528: LD_INT 36
21530: PUSH
21531: EMPTY
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 101
21545: PUSH
21546: LD_INT 102
21548: PUSH
21549: LD_INT 105
21551: PUSH
21552: LD_INT 106
21554: PUSH
21555: LD_INT 108
21557: PUSH
21558: LD_INT 116
21560: PUSH
21561: LD_INT 117
21563: PUSH
21564: LD_INT 118
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: ST_TO_ADDR
21581: GO 24468
21583: LD_INT 4
21585: DOUBLE
21586: EQUAL
21587: IFTRUE 21591
21589: GO 21687
21591: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21592: LD_ADDR_VAR 0 2
21596: PUSH
21597: LD_INT 2
21599: PUSH
21600: LD_INT 4
21602: PUSH
21603: LD_INT 5
21605: PUSH
21606: LD_INT 8
21608: PUSH
21609: LD_INT 11
21611: PUSH
21612: LD_INT 12
21614: PUSH
21615: LD_INT 15
21617: PUSH
21618: LD_INT 16
21620: PUSH
21621: LD_INT 22
21623: PUSH
21624: LD_INT 23
21626: PUSH
21627: LD_INT 26
21629: PUSH
21630: LD_INT 36
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: PUSH
21647: LD_INT 101
21649: PUSH
21650: LD_INT 102
21652: PUSH
21653: LD_INT 105
21655: PUSH
21656: LD_INT 106
21658: PUSH
21659: LD_INT 108
21661: PUSH
21662: LD_INT 116
21664: PUSH
21665: LD_INT 117
21667: PUSH
21668: LD_INT 118
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: PUSH
21681: EMPTY
21682: LIST
21683: LIST
21684: ST_TO_ADDR
21685: GO 24468
21687: LD_INT 5
21689: DOUBLE
21690: EQUAL
21691: IFTRUE 21695
21693: GO 21807
21695: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21696: LD_ADDR_VAR 0 2
21700: PUSH
21701: LD_INT 2
21703: PUSH
21704: LD_INT 4
21706: PUSH
21707: LD_INT 5
21709: PUSH
21710: LD_INT 6
21712: PUSH
21713: LD_INT 8
21715: PUSH
21716: LD_INT 11
21718: PUSH
21719: LD_INT 12
21721: PUSH
21722: LD_INT 15
21724: PUSH
21725: LD_INT 16
21727: PUSH
21728: LD_INT 22
21730: PUSH
21731: LD_INT 23
21733: PUSH
21734: LD_INT 25
21736: PUSH
21737: LD_INT 26
21739: PUSH
21740: LD_INT 36
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: PUSH
21759: LD_INT 101
21761: PUSH
21762: LD_INT 102
21764: PUSH
21765: LD_INT 105
21767: PUSH
21768: LD_INT 106
21770: PUSH
21771: LD_INT 108
21773: PUSH
21774: LD_INT 109
21776: PUSH
21777: LD_INT 112
21779: PUSH
21780: LD_INT 116
21782: PUSH
21783: LD_INT 117
21785: PUSH
21786: LD_INT 118
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: ST_TO_ADDR
21805: GO 24468
21807: LD_INT 6
21809: DOUBLE
21810: EQUAL
21811: IFTRUE 21815
21813: GO 21947
21815: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21816: LD_ADDR_VAR 0 2
21820: PUSH
21821: LD_INT 2
21823: PUSH
21824: LD_INT 4
21826: PUSH
21827: LD_INT 5
21829: PUSH
21830: LD_INT 6
21832: PUSH
21833: LD_INT 8
21835: PUSH
21836: LD_INT 11
21838: PUSH
21839: LD_INT 12
21841: PUSH
21842: LD_INT 15
21844: PUSH
21845: LD_INT 16
21847: PUSH
21848: LD_INT 20
21850: PUSH
21851: LD_INT 21
21853: PUSH
21854: LD_INT 22
21856: PUSH
21857: LD_INT 23
21859: PUSH
21860: LD_INT 25
21862: PUSH
21863: LD_INT 26
21865: PUSH
21866: LD_INT 30
21868: PUSH
21869: LD_INT 31
21871: PUSH
21872: LD_INT 32
21874: PUSH
21875: LD_INT 36
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: PUSH
21899: LD_INT 101
21901: PUSH
21902: LD_INT 102
21904: PUSH
21905: LD_INT 105
21907: PUSH
21908: LD_INT 106
21910: PUSH
21911: LD_INT 108
21913: PUSH
21914: LD_INT 109
21916: PUSH
21917: LD_INT 112
21919: PUSH
21920: LD_INT 116
21922: PUSH
21923: LD_INT 117
21925: PUSH
21926: LD_INT 118
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: ST_TO_ADDR
21945: GO 24468
21947: LD_INT 7
21949: DOUBLE
21950: EQUAL
21951: IFTRUE 21955
21953: GO 22067
21955: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21956: LD_ADDR_VAR 0 2
21960: PUSH
21961: LD_INT 2
21963: PUSH
21964: LD_INT 4
21966: PUSH
21967: LD_INT 5
21969: PUSH
21970: LD_INT 7
21972: PUSH
21973: LD_INT 11
21975: PUSH
21976: LD_INT 12
21978: PUSH
21979: LD_INT 15
21981: PUSH
21982: LD_INT 16
21984: PUSH
21985: LD_INT 20
21987: PUSH
21988: LD_INT 21
21990: PUSH
21991: LD_INT 22
21993: PUSH
21994: LD_INT 23
21996: PUSH
21997: LD_INT 25
21999: PUSH
22000: LD_INT 26
22002: PUSH
22003: EMPTY
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: PUSH
22019: LD_INT 101
22021: PUSH
22022: LD_INT 102
22024: PUSH
22025: LD_INT 103
22027: PUSH
22028: LD_INT 105
22030: PUSH
22031: LD_INT 106
22033: PUSH
22034: LD_INT 108
22036: PUSH
22037: LD_INT 112
22039: PUSH
22040: LD_INT 116
22042: PUSH
22043: LD_INT 117
22045: PUSH
22046: LD_INT 118
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: ST_TO_ADDR
22065: GO 24468
22067: LD_INT 8
22069: DOUBLE
22070: EQUAL
22071: IFTRUE 22075
22073: GO 22215
22075: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22076: LD_ADDR_VAR 0 2
22080: PUSH
22081: LD_INT 2
22083: PUSH
22084: LD_INT 4
22086: PUSH
22087: LD_INT 5
22089: PUSH
22090: LD_INT 6
22092: PUSH
22093: LD_INT 7
22095: PUSH
22096: LD_INT 8
22098: PUSH
22099: LD_INT 11
22101: PUSH
22102: LD_INT 12
22104: PUSH
22105: LD_INT 15
22107: PUSH
22108: LD_INT 16
22110: PUSH
22111: LD_INT 20
22113: PUSH
22114: LD_INT 21
22116: PUSH
22117: LD_INT 22
22119: PUSH
22120: LD_INT 23
22122: PUSH
22123: LD_INT 25
22125: PUSH
22126: LD_INT 26
22128: PUSH
22129: LD_INT 30
22131: PUSH
22132: LD_INT 31
22134: PUSH
22135: LD_INT 32
22137: PUSH
22138: LD_INT 36
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: PUSH
22163: LD_INT 101
22165: PUSH
22166: LD_INT 102
22168: PUSH
22169: LD_INT 103
22171: PUSH
22172: LD_INT 105
22174: PUSH
22175: LD_INT 106
22177: PUSH
22178: LD_INT 108
22180: PUSH
22181: LD_INT 109
22183: PUSH
22184: LD_INT 112
22186: PUSH
22187: LD_INT 116
22189: PUSH
22190: LD_INT 117
22192: PUSH
22193: LD_INT 118
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: ST_TO_ADDR
22213: GO 24468
22215: LD_INT 9
22217: DOUBLE
22218: EQUAL
22219: IFTRUE 22223
22221: GO 22371
22223: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22224: LD_ADDR_VAR 0 2
22228: PUSH
22229: LD_INT 2
22231: PUSH
22232: LD_INT 4
22234: PUSH
22235: LD_INT 5
22237: PUSH
22238: LD_INT 6
22240: PUSH
22241: LD_INT 7
22243: PUSH
22244: LD_INT 8
22246: PUSH
22247: LD_INT 11
22249: PUSH
22250: LD_INT 12
22252: PUSH
22253: LD_INT 15
22255: PUSH
22256: LD_INT 16
22258: PUSH
22259: LD_INT 20
22261: PUSH
22262: LD_INT 21
22264: PUSH
22265: LD_INT 22
22267: PUSH
22268: LD_INT 23
22270: PUSH
22271: LD_INT 25
22273: PUSH
22274: LD_INT 26
22276: PUSH
22277: LD_INT 28
22279: PUSH
22280: LD_INT 30
22282: PUSH
22283: LD_INT 31
22285: PUSH
22286: LD_INT 32
22288: PUSH
22289: LD_INT 36
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: PUSH
22315: LD_INT 101
22317: PUSH
22318: LD_INT 102
22320: PUSH
22321: LD_INT 103
22323: PUSH
22324: LD_INT 105
22326: PUSH
22327: LD_INT 106
22329: PUSH
22330: LD_INT 108
22332: PUSH
22333: LD_INT 109
22335: PUSH
22336: LD_INT 112
22338: PUSH
22339: LD_INT 114
22341: PUSH
22342: LD_INT 116
22344: PUSH
22345: LD_INT 117
22347: PUSH
22348: LD_INT 118
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: ST_TO_ADDR
22369: GO 24468
22371: LD_INT 10
22373: DOUBLE
22374: EQUAL
22375: IFTRUE 22379
22377: GO 22575
22379: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22380: LD_ADDR_VAR 0 2
22384: PUSH
22385: LD_INT 2
22387: PUSH
22388: LD_INT 4
22390: PUSH
22391: LD_INT 5
22393: PUSH
22394: LD_INT 6
22396: PUSH
22397: LD_INT 7
22399: PUSH
22400: LD_INT 8
22402: PUSH
22403: LD_INT 9
22405: PUSH
22406: LD_INT 10
22408: PUSH
22409: LD_INT 11
22411: PUSH
22412: LD_INT 12
22414: PUSH
22415: LD_INT 13
22417: PUSH
22418: LD_INT 14
22420: PUSH
22421: LD_INT 15
22423: PUSH
22424: LD_INT 16
22426: PUSH
22427: LD_INT 17
22429: PUSH
22430: LD_INT 18
22432: PUSH
22433: LD_INT 19
22435: PUSH
22436: LD_INT 20
22438: PUSH
22439: LD_INT 21
22441: PUSH
22442: LD_INT 22
22444: PUSH
22445: LD_INT 23
22447: PUSH
22448: LD_INT 24
22450: PUSH
22451: LD_INT 25
22453: PUSH
22454: LD_INT 26
22456: PUSH
22457: LD_INT 28
22459: PUSH
22460: LD_INT 30
22462: PUSH
22463: LD_INT 31
22465: PUSH
22466: LD_INT 32
22468: PUSH
22469: LD_INT 36
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: PUSH
22503: LD_INT 101
22505: PUSH
22506: LD_INT 102
22508: PUSH
22509: LD_INT 103
22511: PUSH
22512: LD_INT 104
22514: PUSH
22515: LD_INT 105
22517: PUSH
22518: LD_INT 106
22520: PUSH
22521: LD_INT 107
22523: PUSH
22524: LD_INT 108
22526: PUSH
22527: LD_INT 109
22529: PUSH
22530: LD_INT 110
22532: PUSH
22533: LD_INT 111
22535: PUSH
22536: LD_INT 112
22538: PUSH
22539: LD_INT 114
22541: PUSH
22542: LD_INT 116
22544: PUSH
22545: LD_INT 117
22547: PUSH
22548: LD_INT 118
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: ST_TO_ADDR
22573: GO 24468
22575: LD_INT 11
22577: DOUBLE
22578: EQUAL
22579: IFTRUE 22583
22581: GO 22787
22583: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22584: LD_ADDR_VAR 0 2
22588: PUSH
22589: LD_INT 2
22591: PUSH
22592: LD_INT 3
22594: PUSH
22595: LD_INT 4
22597: PUSH
22598: LD_INT 5
22600: PUSH
22601: LD_INT 6
22603: PUSH
22604: LD_INT 7
22606: PUSH
22607: LD_INT 8
22609: PUSH
22610: LD_INT 9
22612: PUSH
22613: LD_INT 10
22615: PUSH
22616: LD_INT 11
22618: PUSH
22619: LD_INT 12
22621: PUSH
22622: LD_INT 13
22624: PUSH
22625: LD_INT 14
22627: PUSH
22628: LD_INT 15
22630: PUSH
22631: LD_INT 16
22633: PUSH
22634: LD_INT 17
22636: PUSH
22637: LD_INT 18
22639: PUSH
22640: LD_INT 19
22642: PUSH
22643: LD_INT 20
22645: PUSH
22646: LD_INT 21
22648: PUSH
22649: LD_INT 22
22651: PUSH
22652: LD_INT 23
22654: PUSH
22655: LD_INT 24
22657: PUSH
22658: LD_INT 25
22660: PUSH
22661: LD_INT 26
22663: PUSH
22664: LD_INT 28
22666: PUSH
22667: LD_INT 30
22669: PUSH
22670: LD_INT 31
22672: PUSH
22673: LD_INT 32
22675: PUSH
22676: LD_INT 34
22678: PUSH
22679: LD_INT 36
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: PUSH
22715: LD_INT 101
22717: PUSH
22718: LD_INT 102
22720: PUSH
22721: LD_INT 103
22723: PUSH
22724: LD_INT 104
22726: PUSH
22727: LD_INT 105
22729: PUSH
22730: LD_INT 106
22732: PUSH
22733: LD_INT 107
22735: PUSH
22736: LD_INT 108
22738: PUSH
22739: LD_INT 109
22741: PUSH
22742: LD_INT 110
22744: PUSH
22745: LD_INT 111
22747: PUSH
22748: LD_INT 112
22750: PUSH
22751: LD_INT 114
22753: PUSH
22754: LD_INT 116
22756: PUSH
22757: LD_INT 117
22759: PUSH
22760: LD_INT 118
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: ST_TO_ADDR
22785: GO 24468
22787: LD_INT 12
22789: DOUBLE
22790: EQUAL
22791: IFTRUE 22795
22793: GO 23015
22795: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22796: LD_ADDR_VAR 0 2
22800: PUSH
22801: LD_INT 1
22803: PUSH
22804: LD_INT 2
22806: PUSH
22807: LD_INT 3
22809: PUSH
22810: LD_INT 4
22812: PUSH
22813: LD_INT 5
22815: PUSH
22816: LD_INT 6
22818: PUSH
22819: LD_INT 7
22821: PUSH
22822: LD_INT 8
22824: PUSH
22825: LD_INT 9
22827: PUSH
22828: LD_INT 10
22830: PUSH
22831: LD_INT 11
22833: PUSH
22834: LD_INT 12
22836: PUSH
22837: LD_INT 13
22839: PUSH
22840: LD_INT 14
22842: PUSH
22843: LD_INT 15
22845: PUSH
22846: LD_INT 16
22848: PUSH
22849: LD_INT 17
22851: PUSH
22852: LD_INT 18
22854: PUSH
22855: LD_INT 19
22857: PUSH
22858: LD_INT 20
22860: PUSH
22861: LD_INT 21
22863: PUSH
22864: LD_INT 22
22866: PUSH
22867: LD_INT 23
22869: PUSH
22870: LD_INT 24
22872: PUSH
22873: LD_INT 25
22875: PUSH
22876: LD_INT 26
22878: PUSH
22879: LD_INT 27
22881: PUSH
22882: LD_INT 28
22884: PUSH
22885: LD_INT 30
22887: PUSH
22888: LD_INT 31
22890: PUSH
22891: LD_INT 32
22893: PUSH
22894: LD_INT 33
22896: PUSH
22897: LD_INT 34
22899: PUSH
22900: LD_INT 36
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: PUSH
22939: LD_INT 101
22941: PUSH
22942: LD_INT 102
22944: PUSH
22945: LD_INT 103
22947: PUSH
22948: LD_INT 104
22950: PUSH
22951: LD_INT 105
22953: PUSH
22954: LD_INT 106
22956: PUSH
22957: LD_INT 107
22959: PUSH
22960: LD_INT 108
22962: PUSH
22963: LD_INT 109
22965: PUSH
22966: LD_INT 110
22968: PUSH
22969: LD_INT 111
22971: PUSH
22972: LD_INT 112
22974: PUSH
22975: LD_INT 113
22977: PUSH
22978: LD_INT 114
22980: PUSH
22981: LD_INT 116
22983: PUSH
22984: LD_INT 117
22986: PUSH
22987: LD_INT 118
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: ST_TO_ADDR
23013: GO 24468
23015: LD_INT 13
23017: DOUBLE
23018: EQUAL
23019: IFTRUE 23023
23021: GO 23231
23023: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23024: LD_ADDR_VAR 0 2
23028: PUSH
23029: LD_INT 1
23031: PUSH
23032: LD_INT 2
23034: PUSH
23035: LD_INT 3
23037: PUSH
23038: LD_INT 4
23040: PUSH
23041: LD_INT 5
23043: PUSH
23044: LD_INT 8
23046: PUSH
23047: LD_INT 9
23049: PUSH
23050: LD_INT 10
23052: PUSH
23053: LD_INT 11
23055: PUSH
23056: LD_INT 12
23058: PUSH
23059: LD_INT 14
23061: PUSH
23062: LD_INT 15
23064: PUSH
23065: LD_INT 16
23067: PUSH
23068: LD_INT 17
23070: PUSH
23071: LD_INT 18
23073: PUSH
23074: LD_INT 19
23076: PUSH
23077: LD_INT 20
23079: PUSH
23080: LD_INT 21
23082: PUSH
23083: LD_INT 22
23085: PUSH
23086: LD_INT 23
23088: PUSH
23089: LD_INT 24
23091: PUSH
23092: LD_INT 25
23094: PUSH
23095: LD_INT 26
23097: PUSH
23098: LD_INT 27
23100: PUSH
23101: LD_INT 28
23103: PUSH
23104: LD_INT 30
23106: PUSH
23107: LD_INT 31
23109: PUSH
23110: LD_INT 32
23112: PUSH
23113: LD_INT 33
23115: PUSH
23116: LD_INT 34
23118: PUSH
23119: LD_INT 36
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: PUSH
23155: LD_INT 101
23157: PUSH
23158: LD_INT 102
23160: PUSH
23161: LD_INT 103
23163: PUSH
23164: LD_INT 104
23166: PUSH
23167: LD_INT 105
23169: PUSH
23170: LD_INT 106
23172: PUSH
23173: LD_INT 107
23175: PUSH
23176: LD_INT 108
23178: PUSH
23179: LD_INT 109
23181: PUSH
23182: LD_INT 110
23184: PUSH
23185: LD_INT 111
23187: PUSH
23188: LD_INT 112
23190: PUSH
23191: LD_INT 113
23193: PUSH
23194: LD_INT 114
23196: PUSH
23197: LD_INT 116
23199: PUSH
23200: LD_INT 117
23202: PUSH
23203: LD_INT 118
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: ST_TO_ADDR
23229: GO 24468
23231: LD_INT 14
23233: DOUBLE
23234: EQUAL
23235: IFTRUE 23239
23237: GO 23463
23239: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23240: LD_ADDR_VAR 0 2
23244: PUSH
23245: LD_INT 1
23247: PUSH
23248: LD_INT 2
23250: PUSH
23251: LD_INT 3
23253: PUSH
23254: LD_INT 4
23256: PUSH
23257: LD_INT 5
23259: PUSH
23260: LD_INT 6
23262: PUSH
23263: LD_INT 7
23265: PUSH
23266: LD_INT 8
23268: PUSH
23269: LD_INT 9
23271: PUSH
23272: LD_INT 10
23274: PUSH
23275: LD_INT 11
23277: PUSH
23278: LD_INT 12
23280: PUSH
23281: LD_INT 13
23283: PUSH
23284: LD_INT 14
23286: PUSH
23287: LD_INT 15
23289: PUSH
23290: LD_INT 16
23292: PUSH
23293: LD_INT 17
23295: PUSH
23296: LD_INT 18
23298: PUSH
23299: LD_INT 19
23301: PUSH
23302: LD_INT 20
23304: PUSH
23305: LD_INT 21
23307: PUSH
23308: LD_INT 22
23310: PUSH
23311: LD_INT 23
23313: PUSH
23314: LD_INT 24
23316: PUSH
23317: LD_INT 25
23319: PUSH
23320: LD_INT 26
23322: PUSH
23323: LD_INT 27
23325: PUSH
23326: LD_INT 28
23328: PUSH
23329: LD_INT 29
23331: PUSH
23332: LD_INT 30
23334: PUSH
23335: LD_INT 31
23337: PUSH
23338: LD_INT 32
23340: PUSH
23341: LD_INT 33
23343: PUSH
23344: LD_INT 34
23346: PUSH
23347: LD_INT 36
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: PUSH
23387: LD_INT 101
23389: PUSH
23390: LD_INT 102
23392: PUSH
23393: LD_INT 103
23395: PUSH
23396: LD_INT 104
23398: PUSH
23399: LD_INT 105
23401: PUSH
23402: LD_INT 106
23404: PUSH
23405: LD_INT 107
23407: PUSH
23408: LD_INT 108
23410: PUSH
23411: LD_INT 109
23413: PUSH
23414: LD_INT 110
23416: PUSH
23417: LD_INT 111
23419: PUSH
23420: LD_INT 112
23422: PUSH
23423: LD_INT 113
23425: PUSH
23426: LD_INT 114
23428: PUSH
23429: LD_INT 116
23431: PUSH
23432: LD_INT 117
23434: PUSH
23435: LD_INT 118
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: ST_TO_ADDR
23461: GO 24468
23463: LD_INT 15
23465: DOUBLE
23466: EQUAL
23467: IFTRUE 23471
23469: GO 23695
23471: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23472: LD_ADDR_VAR 0 2
23476: PUSH
23477: LD_INT 1
23479: PUSH
23480: LD_INT 2
23482: PUSH
23483: LD_INT 3
23485: PUSH
23486: LD_INT 4
23488: PUSH
23489: LD_INT 5
23491: PUSH
23492: LD_INT 6
23494: PUSH
23495: LD_INT 7
23497: PUSH
23498: LD_INT 8
23500: PUSH
23501: LD_INT 9
23503: PUSH
23504: LD_INT 10
23506: PUSH
23507: LD_INT 11
23509: PUSH
23510: LD_INT 12
23512: PUSH
23513: LD_INT 13
23515: PUSH
23516: LD_INT 14
23518: PUSH
23519: LD_INT 15
23521: PUSH
23522: LD_INT 16
23524: PUSH
23525: LD_INT 17
23527: PUSH
23528: LD_INT 18
23530: PUSH
23531: LD_INT 19
23533: PUSH
23534: LD_INT 20
23536: PUSH
23537: LD_INT 21
23539: PUSH
23540: LD_INT 22
23542: PUSH
23543: LD_INT 23
23545: PUSH
23546: LD_INT 24
23548: PUSH
23549: LD_INT 25
23551: PUSH
23552: LD_INT 26
23554: PUSH
23555: LD_INT 27
23557: PUSH
23558: LD_INT 28
23560: PUSH
23561: LD_INT 29
23563: PUSH
23564: LD_INT 30
23566: PUSH
23567: LD_INT 31
23569: PUSH
23570: LD_INT 32
23572: PUSH
23573: LD_INT 33
23575: PUSH
23576: LD_INT 34
23578: PUSH
23579: LD_INT 36
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: PUSH
23619: LD_INT 101
23621: PUSH
23622: LD_INT 102
23624: PUSH
23625: LD_INT 103
23627: PUSH
23628: LD_INT 104
23630: PUSH
23631: LD_INT 105
23633: PUSH
23634: LD_INT 106
23636: PUSH
23637: LD_INT 107
23639: PUSH
23640: LD_INT 108
23642: PUSH
23643: LD_INT 109
23645: PUSH
23646: LD_INT 110
23648: PUSH
23649: LD_INT 111
23651: PUSH
23652: LD_INT 112
23654: PUSH
23655: LD_INT 113
23657: PUSH
23658: LD_INT 114
23660: PUSH
23661: LD_INT 116
23663: PUSH
23664: LD_INT 117
23666: PUSH
23667: LD_INT 118
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: ST_TO_ADDR
23693: GO 24468
23695: LD_INT 16
23697: DOUBLE
23698: EQUAL
23699: IFTRUE 23703
23701: GO 23839
23703: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23704: LD_ADDR_VAR 0 2
23708: PUSH
23709: LD_INT 2
23711: PUSH
23712: LD_INT 4
23714: PUSH
23715: LD_INT 5
23717: PUSH
23718: LD_INT 7
23720: PUSH
23721: LD_INT 11
23723: PUSH
23724: LD_INT 12
23726: PUSH
23727: LD_INT 15
23729: PUSH
23730: LD_INT 16
23732: PUSH
23733: LD_INT 20
23735: PUSH
23736: LD_INT 21
23738: PUSH
23739: LD_INT 22
23741: PUSH
23742: LD_INT 23
23744: PUSH
23745: LD_INT 25
23747: PUSH
23748: LD_INT 26
23750: PUSH
23751: LD_INT 30
23753: PUSH
23754: LD_INT 31
23756: PUSH
23757: LD_INT 32
23759: PUSH
23760: LD_INT 33
23762: PUSH
23763: LD_INT 34
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: PUSH
23787: LD_INT 101
23789: PUSH
23790: LD_INT 102
23792: PUSH
23793: LD_INT 103
23795: PUSH
23796: LD_INT 106
23798: PUSH
23799: LD_INT 108
23801: PUSH
23802: LD_INT 112
23804: PUSH
23805: LD_INT 113
23807: PUSH
23808: LD_INT 114
23810: PUSH
23811: LD_INT 116
23813: PUSH
23814: LD_INT 117
23816: PUSH
23817: LD_INT 118
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: ST_TO_ADDR
23837: GO 24468
23839: LD_INT 17
23841: DOUBLE
23842: EQUAL
23843: IFTRUE 23847
23845: GO 24071
23847: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23848: LD_ADDR_VAR 0 2
23852: PUSH
23853: LD_INT 1
23855: PUSH
23856: LD_INT 2
23858: PUSH
23859: LD_INT 3
23861: PUSH
23862: LD_INT 4
23864: PUSH
23865: LD_INT 5
23867: PUSH
23868: LD_INT 6
23870: PUSH
23871: LD_INT 7
23873: PUSH
23874: LD_INT 8
23876: PUSH
23877: LD_INT 9
23879: PUSH
23880: LD_INT 10
23882: PUSH
23883: LD_INT 11
23885: PUSH
23886: LD_INT 12
23888: PUSH
23889: LD_INT 13
23891: PUSH
23892: LD_INT 14
23894: PUSH
23895: LD_INT 15
23897: PUSH
23898: LD_INT 16
23900: PUSH
23901: LD_INT 17
23903: PUSH
23904: LD_INT 18
23906: PUSH
23907: LD_INT 19
23909: PUSH
23910: LD_INT 20
23912: PUSH
23913: LD_INT 21
23915: PUSH
23916: LD_INT 22
23918: PUSH
23919: LD_INT 23
23921: PUSH
23922: LD_INT 24
23924: PUSH
23925: LD_INT 25
23927: PUSH
23928: LD_INT 26
23930: PUSH
23931: LD_INT 27
23933: PUSH
23934: LD_INT 28
23936: PUSH
23937: LD_INT 29
23939: PUSH
23940: LD_INT 30
23942: PUSH
23943: LD_INT 31
23945: PUSH
23946: LD_INT 32
23948: PUSH
23949: LD_INT 33
23951: PUSH
23952: LD_INT 34
23954: PUSH
23955: LD_INT 36
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 101
23997: PUSH
23998: LD_INT 102
24000: PUSH
24001: LD_INT 103
24003: PUSH
24004: LD_INT 104
24006: PUSH
24007: LD_INT 105
24009: PUSH
24010: LD_INT 106
24012: PUSH
24013: LD_INT 107
24015: PUSH
24016: LD_INT 108
24018: PUSH
24019: LD_INT 109
24021: PUSH
24022: LD_INT 110
24024: PUSH
24025: LD_INT 111
24027: PUSH
24028: LD_INT 112
24030: PUSH
24031: LD_INT 113
24033: PUSH
24034: LD_INT 114
24036: PUSH
24037: LD_INT 116
24039: PUSH
24040: LD_INT 117
24042: PUSH
24043: LD_INT 118
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: ST_TO_ADDR
24069: GO 24468
24071: LD_INT 18
24073: DOUBLE
24074: EQUAL
24075: IFTRUE 24079
24077: GO 24227
24079: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24080: LD_ADDR_VAR 0 2
24084: PUSH
24085: LD_INT 2
24087: PUSH
24088: LD_INT 4
24090: PUSH
24091: LD_INT 5
24093: PUSH
24094: LD_INT 7
24096: PUSH
24097: LD_INT 11
24099: PUSH
24100: LD_INT 12
24102: PUSH
24103: LD_INT 15
24105: PUSH
24106: LD_INT 16
24108: PUSH
24109: LD_INT 20
24111: PUSH
24112: LD_INT 21
24114: PUSH
24115: LD_INT 22
24117: PUSH
24118: LD_INT 23
24120: PUSH
24121: LD_INT 25
24123: PUSH
24124: LD_INT 26
24126: PUSH
24127: LD_INT 30
24129: PUSH
24130: LD_INT 31
24132: PUSH
24133: LD_INT 32
24135: PUSH
24136: LD_INT 33
24138: PUSH
24139: LD_INT 34
24141: PUSH
24142: LD_INT 35
24144: PUSH
24145: LD_INT 36
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: PUSH
24171: LD_INT 101
24173: PUSH
24174: LD_INT 102
24176: PUSH
24177: LD_INT 103
24179: PUSH
24180: LD_INT 106
24182: PUSH
24183: LD_INT 108
24185: PUSH
24186: LD_INT 112
24188: PUSH
24189: LD_INT 113
24191: PUSH
24192: LD_INT 114
24194: PUSH
24195: LD_INT 115
24197: PUSH
24198: LD_INT 116
24200: PUSH
24201: LD_INT 117
24203: PUSH
24204: LD_INT 118
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: ST_TO_ADDR
24225: GO 24468
24227: LD_INT 19
24229: DOUBLE
24230: EQUAL
24231: IFTRUE 24235
24233: GO 24467
24235: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24236: LD_ADDR_VAR 0 2
24240: PUSH
24241: LD_INT 1
24243: PUSH
24244: LD_INT 2
24246: PUSH
24247: LD_INT 3
24249: PUSH
24250: LD_INT 4
24252: PUSH
24253: LD_INT 5
24255: PUSH
24256: LD_INT 6
24258: PUSH
24259: LD_INT 7
24261: PUSH
24262: LD_INT 8
24264: PUSH
24265: LD_INT 9
24267: PUSH
24268: LD_INT 10
24270: PUSH
24271: LD_INT 11
24273: PUSH
24274: LD_INT 12
24276: PUSH
24277: LD_INT 13
24279: PUSH
24280: LD_INT 14
24282: PUSH
24283: LD_INT 15
24285: PUSH
24286: LD_INT 16
24288: PUSH
24289: LD_INT 17
24291: PUSH
24292: LD_INT 18
24294: PUSH
24295: LD_INT 19
24297: PUSH
24298: LD_INT 20
24300: PUSH
24301: LD_INT 21
24303: PUSH
24304: LD_INT 22
24306: PUSH
24307: LD_INT 23
24309: PUSH
24310: LD_INT 24
24312: PUSH
24313: LD_INT 25
24315: PUSH
24316: LD_INT 26
24318: PUSH
24319: LD_INT 27
24321: PUSH
24322: LD_INT 28
24324: PUSH
24325: LD_INT 29
24327: PUSH
24328: LD_INT 30
24330: PUSH
24331: LD_INT 31
24333: PUSH
24334: LD_INT 32
24336: PUSH
24337: LD_INT 33
24339: PUSH
24340: LD_INT 34
24342: PUSH
24343: LD_INT 35
24345: PUSH
24346: LD_INT 36
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: PUSH
24387: LD_INT 101
24389: PUSH
24390: LD_INT 102
24392: PUSH
24393: LD_INT 103
24395: PUSH
24396: LD_INT 104
24398: PUSH
24399: LD_INT 105
24401: PUSH
24402: LD_INT 106
24404: PUSH
24405: LD_INT 107
24407: PUSH
24408: LD_INT 108
24410: PUSH
24411: LD_INT 109
24413: PUSH
24414: LD_INT 110
24416: PUSH
24417: LD_INT 111
24419: PUSH
24420: LD_INT 112
24422: PUSH
24423: LD_INT 113
24425: PUSH
24426: LD_INT 114
24428: PUSH
24429: LD_INT 115
24431: PUSH
24432: LD_INT 116
24434: PUSH
24435: LD_INT 117
24437: PUSH
24438: LD_INT 118
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: ST_TO_ADDR
24465: GO 24468
24467: POP
// end else
24468: GO 24699
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24470: LD_ADDR_VAR 0 2
24474: PUSH
24475: LD_INT 1
24477: PUSH
24478: LD_INT 2
24480: PUSH
24481: LD_INT 3
24483: PUSH
24484: LD_INT 4
24486: PUSH
24487: LD_INT 5
24489: PUSH
24490: LD_INT 6
24492: PUSH
24493: LD_INT 7
24495: PUSH
24496: LD_INT 8
24498: PUSH
24499: LD_INT 9
24501: PUSH
24502: LD_INT 10
24504: PUSH
24505: LD_INT 11
24507: PUSH
24508: LD_INT 12
24510: PUSH
24511: LD_INT 13
24513: PUSH
24514: LD_INT 14
24516: PUSH
24517: LD_INT 15
24519: PUSH
24520: LD_INT 16
24522: PUSH
24523: LD_INT 17
24525: PUSH
24526: LD_INT 18
24528: PUSH
24529: LD_INT 19
24531: PUSH
24532: LD_INT 20
24534: PUSH
24535: LD_INT 21
24537: PUSH
24538: LD_INT 22
24540: PUSH
24541: LD_INT 23
24543: PUSH
24544: LD_INT 24
24546: PUSH
24547: LD_INT 25
24549: PUSH
24550: LD_INT 26
24552: PUSH
24553: LD_INT 27
24555: PUSH
24556: LD_INT 28
24558: PUSH
24559: LD_INT 29
24561: PUSH
24562: LD_INT 30
24564: PUSH
24565: LD_INT 31
24567: PUSH
24568: LD_INT 32
24570: PUSH
24571: LD_INT 33
24573: PUSH
24574: LD_INT 34
24576: PUSH
24577: LD_INT 35
24579: PUSH
24580: LD_INT 36
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: PUSH
24621: LD_INT 101
24623: PUSH
24624: LD_INT 102
24626: PUSH
24627: LD_INT 103
24629: PUSH
24630: LD_INT 104
24632: PUSH
24633: LD_INT 105
24635: PUSH
24636: LD_INT 106
24638: PUSH
24639: LD_INT 107
24641: PUSH
24642: LD_INT 108
24644: PUSH
24645: LD_INT 109
24647: PUSH
24648: LD_INT 110
24650: PUSH
24651: LD_INT 111
24653: PUSH
24654: LD_INT 112
24656: PUSH
24657: LD_INT 113
24659: PUSH
24660: LD_INT 114
24662: PUSH
24663: LD_INT 115
24665: PUSH
24666: LD_INT 116
24668: PUSH
24669: LD_INT 117
24671: PUSH
24672: LD_INT 118
24674: PUSH
24675: EMPTY
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: ST_TO_ADDR
// if result then
24699: LD_VAR 0 2
24703: IFFALSE 25489
// begin normal :=  ;
24705: LD_ADDR_VAR 0 5
24709: PUSH
24710: LD_STRING 
24712: ST_TO_ADDR
// hardcore :=  ;
24713: LD_ADDR_VAR 0 6
24717: PUSH
24718: LD_STRING 
24720: ST_TO_ADDR
// active :=  ;
24721: LD_ADDR_VAR 0 7
24725: PUSH
24726: LD_STRING 
24728: ST_TO_ADDR
// for i = 1 to normalCounter do
24729: LD_ADDR_VAR 0 8
24733: PUSH
24734: DOUBLE
24735: LD_INT 1
24737: DEC
24738: ST_TO_ADDR
24739: LD_EXP 48
24743: PUSH
24744: FOR_TO
24745: IFFALSE 24846
// begin tmp := 0 ;
24747: LD_ADDR_VAR 0 3
24751: PUSH
24752: LD_STRING 0
24754: ST_TO_ADDR
// if result [ 1 ] then
24755: LD_VAR 0 2
24759: PUSH
24760: LD_INT 1
24762: ARRAY
24763: IFFALSE 24828
// if result [ 1 ] [ 1 ] = i then
24765: LD_VAR 0 2
24769: PUSH
24770: LD_INT 1
24772: ARRAY
24773: PUSH
24774: LD_INT 1
24776: ARRAY
24777: PUSH
24778: LD_VAR 0 8
24782: EQUAL
24783: IFFALSE 24828
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24785: LD_ADDR_VAR 0 2
24789: PUSH
24790: LD_VAR 0 2
24794: PPUSH
24795: LD_INT 1
24797: PPUSH
24798: LD_VAR 0 2
24802: PUSH
24803: LD_INT 1
24805: ARRAY
24806: PPUSH
24807: LD_INT 1
24809: PPUSH
24810: CALL_OW 3
24814: PPUSH
24815: CALL_OW 1
24819: ST_TO_ADDR
// tmp := 1 ;
24820: LD_ADDR_VAR 0 3
24824: PUSH
24825: LD_STRING 1
24827: ST_TO_ADDR
// end ; normal := normal & tmp ;
24828: LD_ADDR_VAR 0 5
24832: PUSH
24833: LD_VAR 0 5
24837: PUSH
24838: LD_VAR 0 3
24842: STR
24843: ST_TO_ADDR
// end ;
24844: GO 24744
24846: POP
24847: POP
// for i = 1 to hardcoreCounter do
24848: LD_ADDR_VAR 0 8
24852: PUSH
24853: DOUBLE
24854: LD_INT 1
24856: DEC
24857: ST_TO_ADDR
24858: LD_EXP 49
24862: PUSH
24863: FOR_TO
24864: IFFALSE 24969
// begin tmp := 0 ;
24866: LD_ADDR_VAR 0 3
24870: PUSH
24871: LD_STRING 0
24873: ST_TO_ADDR
// if result [ 2 ] then
24874: LD_VAR 0 2
24878: PUSH
24879: LD_INT 2
24881: ARRAY
24882: IFFALSE 24951
// if result [ 2 ] [ 1 ] = 100 + i then
24884: LD_VAR 0 2
24888: PUSH
24889: LD_INT 2
24891: ARRAY
24892: PUSH
24893: LD_INT 1
24895: ARRAY
24896: PUSH
24897: LD_INT 100
24899: PUSH
24900: LD_VAR 0 8
24904: PLUS
24905: EQUAL
24906: IFFALSE 24951
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24908: LD_ADDR_VAR 0 2
24912: PUSH
24913: LD_VAR 0 2
24917: PPUSH
24918: LD_INT 2
24920: PPUSH
24921: LD_VAR 0 2
24925: PUSH
24926: LD_INT 2
24928: ARRAY
24929: PPUSH
24930: LD_INT 1
24932: PPUSH
24933: CALL_OW 3
24937: PPUSH
24938: CALL_OW 1
24942: ST_TO_ADDR
// tmp := 1 ;
24943: LD_ADDR_VAR 0 3
24947: PUSH
24948: LD_STRING 1
24950: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24951: LD_ADDR_VAR 0 6
24955: PUSH
24956: LD_VAR 0 6
24960: PUSH
24961: LD_VAR 0 3
24965: STR
24966: ST_TO_ADDR
// end ;
24967: GO 24863
24969: POP
24970: POP
// if isGameLoad then
24971: LD_VAR 0 1
24975: IFFALSE 25450
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24977: LD_ADDR_VAR 0 4
24981: PUSH
24982: LD_EXP 52
24986: PUSH
24987: LD_EXP 51
24991: PUSH
24992: LD_EXP 53
24996: PUSH
24997: LD_EXP 50
25001: PUSH
25002: LD_EXP 54
25006: PUSH
25007: LD_EXP 55
25011: PUSH
25012: LD_EXP 56
25016: PUSH
25017: LD_EXP 57
25021: PUSH
25022: LD_EXP 58
25026: PUSH
25027: LD_EXP 59
25031: PUSH
25032: LD_EXP 60
25036: PUSH
25037: LD_EXP 61
25041: PUSH
25042: LD_EXP 62
25046: PUSH
25047: LD_EXP 63
25051: PUSH
25052: LD_EXP 71
25056: PUSH
25057: LD_EXP 72
25061: PUSH
25062: LD_EXP 73
25066: PUSH
25067: LD_EXP 74
25071: PUSH
25072: LD_EXP 76
25076: PUSH
25077: LD_EXP 77
25081: PUSH
25082: LD_EXP 78
25086: PUSH
25087: LD_EXP 81
25091: PUSH
25092: LD_EXP 83
25096: PUSH
25097: LD_EXP 84
25101: PUSH
25102: LD_EXP 85
25106: PUSH
25107: LD_EXP 87
25111: PUSH
25112: LD_EXP 88
25116: PUSH
25117: LD_EXP 91
25121: PUSH
25122: LD_EXP 92
25126: PUSH
25127: LD_EXP 93
25131: PUSH
25132: LD_EXP 94
25136: PUSH
25137: LD_EXP 95
25141: PUSH
25142: LD_EXP 96
25146: PUSH
25147: LD_EXP 97
25151: PUSH
25152: LD_EXP 98
25156: PUSH
25157: LD_EXP 99
25161: PUSH
25162: LD_EXP 64
25166: PUSH
25167: LD_EXP 65
25171: PUSH
25172: LD_EXP 68
25176: PUSH
25177: LD_EXP 69
25181: PUSH
25182: LD_EXP 70
25186: PUSH
25187: LD_EXP 66
25191: PUSH
25192: LD_EXP 67
25196: PUSH
25197: LD_EXP 75
25201: PUSH
25202: LD_EXP 79
25206: PUSH
25207: LD_EXP 80
25211: PUSH
25212: LD_EXP 82
25216: PUSH
25217: LD_EXP 86
25221: PUSH
25222: LD_EXP 89
25226: PUSH
25227: LD_EXP 90
25231: PUSH
25232: LD_EXP 100
25236: PUSH
25237: LD_EXP 101
25241: PUSH
25242: LD_EXP 102
25246: PUSH
25247: LD_EXP 103
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: ST_TO_ADDR
// tmp :=  ;
25308: LD_ADDR_VAR 0 3
25312: PUSH
25313: LD_STRING 
25315: ST_TO_ADDR
// for i = 1 to normalCounter do
25316: LD_ADDR_VAR 0 8
25320: PUSH
25321: DOUBLE
25322: LD_INT 1
25324: DEC
25325: ST_TO_ADDR
25326: LD_EXP 48
25330: PUSH
25331: FOR_TO
25332: IFFALSE 25368
// begin if flags [ i ] then
25334: LD_VAR 0 4
25338: PUSH
25339: LD_VAR 0 8
25343: ARRAY
25344: IFFALSE 25366
// tmp := tmp & i & ; ;
25346: LD_ADDR_VAR 0 3
25350: PUSH
25351: LD_VAR 0 3
25355: PUSH
25356: LD_VAR 0 8
25360: STR
25361: PUSH
25362: LD_STRING ;
25364: STR
25365: ST_TO_ADDR
// end ;
25366: GO 25331
25368: POP
25369: POP
// for i = 1 to hardcoreCounter do
25370: LD_ADDR_VAR 0 8
25374: PUSH
25375: DOUBLE
25376: LD_INT 1
25378: DEC
25379: ST_TO_ADDR
25380: LD_EXP 49
25384: PUSH
25385: FOR_TO
25386: IFFALSE 25432
// begin if flags [ normalCounter + i ] then
25388: LD_VAR 0 4
25392: PUSH
25393: LD_EXP 48
25397: PUSH
25398: LD_VAR 0 8
25402: PLUS
25403: ARRAY
25404: IFFALSE 25430
// tmp := tmp & ( 100 + i ) & ; ;
25406: LD_ADDR_VAR 0 3
25410: PUSH
25411: LD_VAR 0 3
25415: PUSH
25416: LD_INT 100
25418: PUSH
25419: LD_VAR 0 8
25423: PLUS
25424: STR
25425: PUSH
25426: LD_STRING ;
25428: STR
25429: ST_TO_ADDR
// end ;
25430: GO 25385
25432: POP
25433: POP
// if tmp then
25434: LD_VAR 0 3
25438: IFFALSE 25450
// active := tmp ;
25440: LD_ADDR_VAR 0 7
25444: PUSH
25445: LD_VAR 0 3
25449: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25450: LD_STRING getStreamItemsFromMission("
25452: PUSH
25453: LD_VAR 0 5
25457: STR
25458: PUSH
25459: LD_STRING ","
25461: STR
25462: PUSH
25463: LD_VAR 0 6
25467: STR
25468: PUSH
25469: LD_STRING ","
25471: STR
25472: PUSH
25473: LD_VAR 0 7
25477: STR
25478: PUSH
25479: LD_STRING ")
25481: STR
25482: PPUSH
25483: CALL_OW 559
// end else
25487: GO 25496
// ToLua ( getStreamItemsFromMission("","","") ) ;
25489: LD_STRING getStreamItemsFromMission("","","")
25491: PPUSH
25492: CALL_OW 559
// end ;
25496: LD_VAR 0 2
25500: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25501: LD_EXP 47
25505: PUSH
25506: LD_EXP 52
25510: AND
25511: IFFALSE 25635
25513: GO 25515
25515: DISABLE
25516: LD_INT 0
25518: PPUSH
25519: PPUSH
// begin enable ;
25520: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25521: LD_ADDR_VAR 0 2
25525: PUSH
25526: LD_INT 22
25528: PUSH
25529: LD_OWVAR 2
25533: PUSH
25534: EMPTY
25535: LIST
25536: LIST
25537: PUSH
25538: LD_INT 2
25540: PUSH
25541: LD_INT 34
25543: PUSH
25544: LD_INT 7
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: PUSH
25551: LD_INT 34
25553: PUSH
25554: LD_INT 45
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: PUSH
25561: LD_INT 34
25563: PUSH
25564: LD_INT 28
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: PUSH
25571: LD_INT 34
25573: PUSH
25574: LD_INT 47
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PPUSH
25592: CALL_OW 69
25596: ST_TO_ADDR
// if not tmp then
25597: LD_VAR 0 2
25601: NOT
25602: IFFALSE 25606
// exit ;
25604: GO 25635
// for i in tmp do
25606: LD_ADDR_VAR 0 1
25610: PUSH
25611: LD_VAR 0 2
25615: PUSH
25616: FOR_IN
25617: IFFALSE 25633
// begin SetLives ( i , 0 ) ;
25619: LD_VAR 0 1
25623: PPUSH
25624: LD_INT 0
25626: PPUSH
25627: CALL_OW 234
// end ;
25631: GO 25616
25633: POP
25634: POP
// end ;
25635: PPOPN 2
25637: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25638: LD_EXP 47
25642: PUSH
25643: LD_EXP 53
25647: AND
25648: IFFALSE 25732
25650: GO 25652
25652: DISABLE
25653: LD_INT 0
25655: PPUSH
25656: PPUSH
// begin enable ;
25657: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25658: LD_ADDR_VAR 0 2
25662: PUSH
25663: LD_INT 22
25665: PUSH
25666: LD_OWVAR 2
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: LD_INT 32
25677: PUSH
25678: LD_INT 3
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: PPUSH
25689: CALL_OW 69
25693: ST_TO_ADDR
// if not tmp then
25694: LD_VAR 0 2
25698: NOT
25699: IFFALSE 25703
// exit ;
25701: GO 25732
// for i in tmp do
25703: LD_ADDR_VAR 0 1
25707: PUSH
25708: LD_VAR 0 2
25712: PUSH
25713: FOR_IN
25714: IFFALSE 25730
// begin SetLives ( i , 0 ) ;
25716: LD_VAR 0 1
25720: PPUSH
25721: LD_INT 0
25723: PPUSH
25724: CALL_OW 234
// end ;
25728: GO 25713
25730: POP
25731: POP
// end ;
25732: PPOPN 2
25734: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25735: LD_EXP 47
25739: PUSH
25740: LD_EXP 50
25744: AND
25745: IFFALSE 25838
25747: GO 25749
25749: DISABLE
25750: LD_INT 0
25752: PPUSH
// begin enable ;
25753: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25754: LD_ADDR_VAR 0 1
25758: PUSH
25759: LD_INT 22
25761: PUSH
25762: LD_OWVAR 2
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: LD_INT 2
25773: PUSH
25774: LD_INT 25
25776: PUSH
25777: LD_INT 5
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: LD_INT 25
25786: PUSH
25787: LD_INT 9
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: PUSH
25794: LD_INT 25
25796: PUSH
25797: LD_INT 8
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: PPUSH
25814: CALL_OW 69
25818: PUSH
25819: FOR_IN
25820: IFFALSE 25836
// begin SetClass ( i , 1 ) ;
25822: LD_VAR 0 1
25826: PPUSH
25827: LD_INT 1
25829: PPUSH
25830: CALL_OW 336
// end ;
25834: GO 25819
25836: POP
25837: POP
// end ;
25838: PPOPN 1
25840: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25841: LD_EXP 47
25845: PUSH
25846: LD_EXP 51
25850: AND
25851: PUSH
25852: LD_OWVAR 65
25856: PUSH
25857: LD_INT 7
25859: LESS
25860: AND
25861: IFFALSE 25875
25863: GO 25865
25865: DISABLE
// begin enable ;
25866: ENABLE
// game_speed := 7 ;
25867: LD_ADDR_OWVAR 65
25871: PUSH
25872: LD_INT 7
25874: ST_TO_ADDR
// end ;
25875: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25876: LD_EXP 47
25880: PUSH
25881: LD_EXP 54
25885: AND
25886: IFFALSE 26088
25888: GO 25890
25890: DISABLE
25891: LD_INT 0
25893: PPUSH
25894: PPUSH
25895: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25896: LD_ADDR_VAR 0 3
25900: PUSH
25901: LD_INT 81
25903: PUSH
25904: LD_OWVAR 2
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 21
25915: PUSH
25916: LD_INT 1
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: EMPTY
25924: LIST
25925: LIST
25926: PPUSH
25927: CALL_OW 69
25931: ST_TO_ADDR
// if not tmp then
25932: LD_VAR 0 3
25936: NOT
25937: IFFALSE 25941
// exit ;
25939: GO 26088
// if tmp > 5 then
25941: LD_VAR 0 3
25945: PUSH
25946: LD_INT 5
25948: GREATER
25949: IFFALSE 25961
// k := 5 else
25951: LD_ADDR_VAR 0 2
25955: PUSH
25956: LD_INT 5
25958: ST_TO_ADDR
25959: GO 25971
// k := tmp ;
25961: LD_ADDR_VAR 0 2
25965: PUSH
25966: LD_VAR 0 3
25970: ST_TO_ADDR
// for i := 1 to k do
25971: LD_ADDR_VAR 0 1
25975: PUSH
25976: DOUBLE
25977: LD_INT 1
25979: DEC
25980: ST_TO_ADDR
25981: LD_VAR 0 2
25985: PUSH
25986: FOR_TO
25987: IFFALSE 26086
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25989: LD_VAR 0 3
25993: PUSH
25994: LD_VAR 0 1
25998: ARRAY
25999: PPUSH
26000: LD_VAR 0 1
26004: PUSH
26005: LD_INT 4
26007: MOD
26008: PUSH
26009: LD_INT 1
26011: PLUS
26012: PPUSH
26013: CALL_OW 259
26017: PUSH
26018: LD_INT 10
26020: LESS
26021: IFFALSE 26084
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26023: LD_VAR 0 3
26027: PUSH
26028: LD_VAR 0 1
26032: ARRAY
26033: PPUSH
26034: LD_VAR 0 1
26038: PUSH
26039: LD_INT 4
26041: MOD
26042: PUSH
26043: LD_INT 1
26045: PLUS
26046: PPUSH
26047: LD_VAR 0 3
26051: PUSH
26052: LD_VAR 0 1
26056: ARRAY
26057: PPUSH
26058: LD_VAR 0 1
26062: PUSH
26063: LD_INT 4
26065: MOD
26066: PUSH
26067: LD_INT 1
26069: PLUS
26070: PPUSH
26071: CALL_OW 259
26075: PUSH
26076: LD_INT 1
26078: PLUS
26079: PPUSH
26080: CALL_OW 237
26084: GO 25986
26086: POP
26087: POP
// end ;
26088: PPOPN 3
26090: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26091: LD_EXP 47
26095: PUSH
26096: LD_EXP 55
26100: AND
26101: IFFALSE 26121
26103: GO 26105
26105: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26106: LD_INT 4
26108: PPUSH
26109: LD_OWVAR 2
26113: PPUSH
26114: LD_INT 0
26116: PPUSH
26117: CALL_OW 324
26121: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26122: LD_EXP 47
26126: PUSH
26127: LD_EXP 84
26131: AND
26132: IFFALSE 26152
26134: GO 26136
26136: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26137: LD_INT 19
26139: PPUSH
26140: LD_OWVAR 2
26144: PPUSH
26145: LD_INT 0
26147: PPUSH
26148: CALL_OW 324
26152: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26153: LD_EXP 47
26157: PUSH
26158: LD_EXP 56
26162: AND
26163: IFFALSE 26265
26165: GO 26167
26167: DISABLE
26168: LD_INT 0
26170: PPUSH
26171: PPUSH
// begin enable ;
26172: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26173: LD_ADDR_VAR 0 2
26177: PUSH
26178: LD_INT 22
26180: PUSH
26181: LD_OWVAR 2
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: PUSH
26190: LD_INT 2
26192: PUSH
26193: LD_INT 34
26195: PUSH
26196: LD_INT 11
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 34
26205: PUSH
26206: LD_INT 30
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: LIST
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PPUSH
26222: CALL_OW 69
26226: ST_TO_ADDR
// if not tmp then
26227: LD_VAR 0 2
26231: NOT
26232: IFFALSE 26236
// exit ;
26234: GO 26265
// for i in tmp do
26236: LD_ADDR_VAR 0 1
26240: PUSH
26241: LD_VAR 0 2
26245: PUSH
26246: FOR_IN
26247: IFFALSE 26263
// begin SetLives ( i , 0 ) ;
26249: LD_VAR 0 1
26253: PPUSH
26254: LD_INT 0
26256: PPUSH
26257: CALL_OW 234
// end ;
26261: GO 26246
26263: POP
26264: POP
// end ;
26265: PPOPN 2
26267: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26268: LD_EXP 47
26272: PUSH
26273: LD_EXP 57
26277: AND
26278: IFFALSE 26298
26280: GO 26282
26282: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26283: LD_INT 32
26285: PPUSH
26286: LD_OWVAR 2
26290: PPUSH
26291: LD_INT 0
26293: PPUSH
26294: CALL_OW 324
26298: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26299: LD_EXP 47
26303: PUSH
26304: LD_EXP 58
26308: AND
26309: IFFALSE 26490
26311: GO 26313
26313: DISABLE
26314: LD_INT 0
26316: PPUSH
26317: PPUSH
26318: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26319: LD_ADDR_VAR 0 2
26323: PUSH
26324: LD_INT 22
26326: PUSH
26327: LD_OWVAR 2
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: PUSH
26336: LD_INT 33
26338: PUSH
26339: LD_INT 3
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PPUSH
26350: CALL_OW 69
26354: ST_TO_ADDR
// if not tmp then
26355: LD_VAR 0 2
26359: NOT
26360: IFFALSE 26364
// exit ;
26362: GO 26490
// side := 0 ;
26364: LD_ADDR_VAR 0 3
26368: PUSH
26369: LD_INT 0
26371: ST_TO_ADDR
// for i := 1 to 8 do
26372: LD_ADDR_VAR 0 1
26376: PUSH
26377: DOUBLE
26378: LD_INT 1
26380: DEC
26381: ST_TO_ADDR
26382: LD_INT 8
26384: PUSH
26385: FOR_TO
26386: IFFALSE 26434
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26388: LD_OWVAR 2
26392: PUSH
26393: LD_VAR 0 1
26397: NONEQUAL
26398: PUSH
26399: LD_OWVAR 2
26403: PPUSH
26404: LD_VAR 0 1
26408: PPUSH
26409: CALL_OW 81
26413: PUSH
26414: LD_INT 2
26416: EQUAL
26417: AND
26418: IFFALSE 26432
// begin side := i ;
26420: LD_ADDR_VAR 0 3
26424: PUSH
26425: LD_VAR 0 1
26429: ST_TO_ADDR
// break ;
26430: GO 26434
// end ;
26432: GO 26385
26434: POP
26435: POP
// if not side then
26436: LD_VAR 0 3
26440: NOT
26441: IFFALSE 26445
// exit ;
26443: GO 26490
// for i := 1 to tmp do
26445: LD_ADDR_VAR 0 1
26449: PUSH
26450: DOUBLE
26451: LD_INT 1
26453: DEC
26454: ST_TO_ADDR
26455: LD_VAR 0 2
26459: PUSH
26460: FOR_TO
26461: IFFALSE 26488
// if Prob ( 60 ) then
26463: LD_INT 60
26465: PPUSH
26466: CALL_OW 13
26470: IFFALSE 26486
// SetSide ( i , side ) ;
26472: LD_VAR 0 1
26476: PPUSH
26477: LD_VAR 0 3
26481: PPUSH
26482: CALL_OW 235
26486: GO 26460
26488: POP
26489: POP
// end ;
26490: PPOPN 3
26492: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26493: LD_EXP 47
26497: PUSH
26498: LD_EXP 60
26502: AND
26503: IFFALSE 26622
26505: GO 26507
26507: DISABLE
26508: LD_INT 0
26510: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26511: LD_ADDR_VAR 0 1
26515: PUSH
26516: LD_INT 22
26518: PUSH
26519: LD_OWVAR 2
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: PUSH
26528: LD_INT 21
26530: PUSH
26531: LD_INT 1
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: PUSH
26538: LD_INT 3
26540: PUSH
26541: LD_INT 23
26543: PUSH
26544: LD_INT 0
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: LIST
26559: PPUSH
26560: CALL_OW 69
26564: PUSH
26565: FOR_IN
26566: IFFALSE 26620
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26568: LD_VAR 0 1
26572: PPUSH
26573: CALL_OW 257
26577: PUSH
26578: LD_INT 1
26580: PUSH
26581: LD_INT 2
26583: PUSH
26584: LD_INT 3
26586: PUSH
26587: LD_INT 4
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: IN
26596: IFFALSE 26618
// SetClass ( un , rand ( 1 , 4 ) ) ;
26598: LD_VAR 0 1
26602: PPUSH
26603: LD_INT 1
26605: PPUSH
26606: LD_INT 4
26608: PPUSH
26609: CALL_OW 12
26613: PPUSH
26614: CALL_OW 336
26618: GO 26565
26620: POP
26621: POP
// end ;
26622: PPOPN 1
26624: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26625: LD_EXP 47
26629: PUSH
26630: LD_EXP 59
26634: AND
26635: IFFALSE 26714
26637: GO 26639
26639: DISABLE
26640: LD_INT 0
26642: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26643: LD_ADDR_VAR 0 1
26647: PUSH
26648: LD_INT 22
26650: PUSH
26651: LD_OWVAR 2
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: LD_INT 21
26662: PUSH
26663: LD_INT 3
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PPUSH
26674: CALL_OW 69
26678: ST_TO_ADDR
// if not tmp then
26679: LD_VAR 0 1
26683: NOT
26684: IFFALSE 26688
// exit ;
26686: GO 26714
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26688: LD_VAR 0 1
26692: PUSH
26693: LD_INT 1
26695: PPUSH
26696: LD_VAR 0 1
26700: PPUSH
26701: CALL_OW 12
26705: ARRAY
26706: PPUSH
26707: LD_INT 100
26709: PPUSH
26710: CALL_OW 234
// end ;
26714: PPOPN 1
26716: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26717: LD_EXP 47
26721: PUSH
26722: LD_EXP 61
26726: AND
26727: IFFALSE 26825
26729: GO 26731
26731: DISABLE
26732: LD_INT 0
26734: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26735: LD_ADDR_VAR 0 1
26739: PUSH
26740: LD_INT 22
26742: PUSH
26743: LD_OWVAR 2
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PUSH
26752: LD_INT 21
26754: PUSH
26755: LD_INT 1
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: PUSH
26762: EMPTY
26763: LIST
26764: LIST
26765: PPUSH
26766: CALL_OW 69
26770: ST_TO_ADDR
// if not tmp then
26771: LD_VAR 0 1
26775: NOT
26776: IFFALSE 26780
// exit ;
26778: GO 26825
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26780: LD_VAR 0 1
26784: PUSH
26785: LD_INT 1
26787: PPUSH
26788: LD_VAR 0 1
26792: PPUSH
26793: CALL_OW 12
26797: ARRAY
26798: PPUSH
26799: LD_INT 1
26801: PPUSH
26802: LD_INT 4
26804: PPUSH
26805: CALL_OW 12
26809: PPUSH
26810: LD_INT 3000
26812: PPUSH
26813: LD_INT 9000
26815: PPUSH
26816: CALL_OW 12
26820: PPUSH
26821: CALL_OW 492
// end ;
26825: PPOPN 1
26827: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26828: LD_EXP 47
26832: PUSH
26833: LD_EXP 62
26837: AND
26838: IFFALSE 26858
26840: GO 26842
26842: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26843: LD_INT 1
26845: PPUSH
26846: LD_OWVAR 2
26850: PPUSH
26851: LD_INT 0
26853: PPUSH
26854: CALL_OW 324
26858: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26859: LD_EXP 47
26863: PUSH
26864: LD_EXP 63
26868: AND
26869: IFFALSE 26952
26871: GO 26873
26873: DISABLE
26874: LD_INT 0
26876: PPUSH
26877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26878: LD_ADDR_VAR 0 2
26882: PUSH
26883: LD_INT 22
26885: PUSH
26886: LD_OWVAR 2
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: PUSH
26895: LD_INT 21
26897: PUSH
26898: LD_INT 3
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PPUSH
26909: CALL_OW 69
26913: ST_TO_ADDR
// if not tmp then
26914: LD_VAR 0 2
26918: NOT
26919: IFFALSE 26923
// exit ;
26921: GO 26952
// for i in tmp do
26923: LD_ADDR_VAR 0 1
26927: PUSH
26928: LD_VAR 0 2
26932: PUSH
26933: FOR_IN
26934: IFFALSE 26950
// SetBLevel ( i , 10 ) ;
26936: LD_VAR 0 1
26940: PPUSH
26941: LD_INT 10
26943: PPUSH
26944: CALL_OW 241
26948: GO 26933
26950: POP
26951: POP
// end ;
26952: PPOPN 2
26954: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26955: LD_EXP 47
26959: PUSH
26960: LD_EXP 64
26964: AND
26965: IFFALSE 27076
26967: GO 26969
26969: DISABLE
26970: LD_INT 0
26972: PPUSH
26973: PPUSH
26974: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26975: LD_ADDR_VAR 0 3
26979: PUSH
26980: LD_INT 22
26982: PUSH
26983: LD_OWVAR 2
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: PUSH
26992: LD_INT 25
26994: PUSH
26995: LD_INT 1
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: PPUSH
27006: CALL_OW 69
27010: ST_TO_ADDR
// if not tmp then
27011: LD_VAR 0 3
27015: NOT
27016: IFFALSE 27020
// exit ;
27018: GO 27076
// un := tmp [ rand ( 1 , tmp ) ] ;
27020: LD_ADDR_VAR 0 2
27024: PUSH
27025: LD_VAR 0 3
27029: PUSH
27030: LD_INT 1
27032: PPUSH
27033: LD_VAR 0 3
27037: PPUSH
27038: CALL_OW 12
27042: ARRAY
27043: ST_TO_ADDR
// if Crawls ( un ) then
27044: LD_VAR 0 2
27048: PPUSH
27049: CALL_OW 318
27053: IFFALSE 27064
// ComWalk ( un ) ;
27055: LD_VAR 0 2
27059: PPUSH
27060: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27064: LD_VAR 0 2
27068: PPUSH
27069: LD_INT 5
27071: PPUSH
27072: CALL_OW 336
// end ;
27076: PPOPN 3
27078: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27079: LD_EXP 47
27083: PUSH
27084: LD_EXP 65
27088: AND
27089: PUSH
27090: LD_OWVAR 67
27094: PUSH
27095: LD_INT 4
27097: LESS
27098: AND
27099: IFFALSE 27118
27101: GO 27103
27103: DISABLE
// begin Difficulty := Difficulty + 1 ;
27104: LD_ADDR_OWVAR 67
27108: PUSH
27109: LD_OWVAR 67
27113: PUSH
27114: LD_INT 1
27116: PLUS
27117: ST_TO_ADDR
// end ;
27118: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27119: LD_EXP 47
27123: PUSH
27124: LD_EXP 66
27128: AND
27129: IFFALSE 27232
27131: GO 27133
27133: DISABLE
27134: LD_INT 0
27136: PPUSH
// begin for i := 1 to 5 do
27137: LD_ADDR_VAR 0 1
27141: PUSH
27142: DOUBLE
27143: LD_INT 1
27145: DEC
27146: ST_TO_ADDR
27147: LD_INT 5
27149: PUSH
27150: FOR_TO
27151: IFFALSE 27230
// begin uc_nation := nation_nature ;
27153: LD_ADDR_OWVAR 21
27157: PUSH
27158: LD_INT 0
27160: ST_TO_ADDR
// uc_side := 0 ;
27161: LD_ADDR_OWVAR 20
27165: PUSH
27166: LD_INT 0
27168: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27169: LD_ADDR_OWVAR 29
27173: PUSH
27174: LD_INT 12
27176: PUSH
27177: LD_INT 12
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: ST_TO_ADDR
// hc_agressivity := 20 ;
27184: LD_ADDR_OWVAR 35
27188: PUSH
27189: LD_INT 20
27191: ST_TO_ADDR
// hc_class := class_tiger ;
27192: LD_ADDR_OWVAR 28
27196: PUSH
27197: LD_INT 14
27199: ST_TO_ADDR
// hc_gallery :=  ;
27200: LD_ADDR_OWVAR 33
27204: PUSH
27205: LD_STRING 
27207: ST_TO_ADDR
// hc_name :=  ;
27208: LD_ADDR_OWVAR 26
27212: PUSH
27213: LD_STRING 
27215: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27216: CALL_OW 44
27220: PPUSH
27221: LD_INT 0
27223: PPUSH
27224: CALL_OW 51
// end ;
27228: GO 27150
27230: POP
27231: POP
// end ;
27232: PPOPN 1
27234: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27235: LD_EXP 47
27239: PUSH
27240: LD_EXP 67
27244: AND
27245: IFFALSE 27254
27247: GO 27249
27249: DISABLE
// StreamSibBomb ;
27250: CALL 27255 0 0
27254: END
// export function StreamSibBomb ; var i , x , y ; begin
27255: LD_INT 0
27257: PPUSH
27258: PPUSH
27259: PPUSH
27260: PPUSH
// result := false ;
27261: LD_ADDR_VAR 0 1
27265: PUSH
27266: LD_INT 0
27268: ST_TO_ADDR
// for i := 1 to 16 do
27269: LD_ADDR_VAR 0 2
27273: PUSH
27274: DOUBLE
27275: LD_INT 1
27277: DEC
27278: ST_TO_ADDR
27279: LD_INT 16
27281: PUSH
27282: FOR_TO
27283: IFFALSE 27482
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27285: LD_ADDR_VAR 0 3
27289: PUSH
27290: LD_INT 10
27292: PUSH
27293: LD_INT 20
27295: PUSH
27296: LD_INT 30
27298: PUSH
27299: LD_INT 40
27301: PUSH
27302: LD_INT 50
27304: PUSH
27305: LD_INT 60
27307: PUSH
27308: LD_INT 70
27310: PUSH
27311: LD_INT 80
27313: PUSH
27314: LD_INT 90
27316: PUSH
27317: LD_INT 100
27319: PUSH
27320: LD_INT 110
27322: PUSH
27323: LD_INT 120
27325: PUSH
27326: LD_INT 130
27328: PUSH
27329: LD_INT 140
27331: PUSH
27332: LD_INT 150
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 1
27354: PPUSH
27355: LD_INT 15
27357: PPUSH
27358: CALL_OW 12
27362: ARRAY
27363: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27364: LD_ADDR_VAR 0 4
27368: PUSH
27369: LD_INT 10
27371: PUSH
27372: LD_INT 20
27374: PUSH
27375: LD_INT 30
27377: PUSH
27378: LD_INT 40
27380: PUSH
27381: LD_INT 50
27383: PUSH
27384: LD_INT 60
27386: PUSH
27387: LD_INT 70
27389: PUSH
27390: LD_INT 80
27392: PUSH
27393: LD_INT 90
27395: PUSH
27396: LD_INT 100
27398: PUSH
27399: LD_INT 110
27401: PUSH
27402: LD_INT 120
27404: PUSH
27405: LD_INT 130
27407: PUSH
27408: LD_INT 140
27410: PUSH
27411: LD_INT 150
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: PUSH
27431: LD_INT 1
27433: PPUSH
27434: LD_INT 15
27436: PPUSH
27437: CALL_OW 12
27441: ARRAY
27442: ST_TO_ADDR
// if ValidHex ( x , y ) then
27443: LD_VAR 0 3
27447: PPUSH
27448: LD_VAR 0 4
27452: PPUSH
27453: CALL_OW 488
27457: IFFALSE 27480
// begin result := [ x , y ] ;
27459: LD_ADDR_VAR 0 1
27463: PUSH
27464: LD_VAR 0 3
27468: PUSH
27469: LD_VAR 0 4
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: ST_TO_ADDR
// break ;
27478: GO 27482
// end ; end ;
27480: GO 27282
27482: POP
27483: POP
// if result then
27484: LD_VAR 0 1
27488: IFFALSE 27548
// begin ToLua ( playSibBomb() ) ;
27490: LD_STRING playSibBomb()
27492: PPUSH
27493: CALL_OW 559
// wait ( 0 0$14 ) ;
27497: LD_INT 490
27499: PPUSH
27500: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27504: LD_VAR 0 1
27508: PUSH
27509: LD_INT 1
27511: ARRAY
27512: PPUSH
27513: LD_VAR 0 1
27517: PUSH
27518: LD_INT 2
27520: ARRAY
27521: PPUSH
27522: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27526: LD_VAR 0 1
27530: PUSH
27531: LD_INT 1
27533: ARRAY
27534: PPUSH
27535: LD_VAR 0 1
27539: PUSH
27540: LD_INT 2
27542: ARRAY
27543: PPUSH
27544: CALL_OW 429
// end ; end ;
27548: LD_VAR 0 1
27552: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27553: LD_EXP 47
27557: PUSH
27558: LD_EXP 69
27562: AND
27563: IFFALSE 27575
27565: GO 27567
27567: DISABLE
// YouLost (  ) ;
27568: LD_STRING 
27570: PPUSH
27571: CALL_OW 104
27575: END
// every 0 0$1 trigger StreamModeActive and sFog do
27576: LD_EXP 47
27580: PUSH
27581: LD_EXP 68
27585: AND
27586: IFFALSE 27600
27588: GO 27590
27590: DISABLE
// FogOff ( your_side ) ;
27591: LD_OWVAR 2
27595: PPUSH
27596: CALL_OW 344
27600: END
// every 0 0$1 trigger StreamModeActive and sSun do
27601: LD_EXP 47
27605: PUSH
27606: LD_EXP 70
27610: AND
27611: IFFALSE 27639
27613: GO 27615
27615: DISABLE
// begin solar_recharge_percent := 0 ;
27616: LD_ADDR_OWVAR 79
27620: PUSH
27621: LD_INT 0
27623: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27624: LD_INT 10500
27626: PPUSH
27627: CALL_OW 67
// solar_recharge_percent := 100 ;
27631: LD_ADDR_OWVAR 79
27635: PUSH
27636: LD_INT 100
27638: ST_TO_ADDR
// end ;
27639: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27640: LD_EXP 47
27644: PUSH
27645: LD_EXP 71
27649: AND
27650: IFFALSE 27889
27652: GO 27654
27654: DISABLE
27655: LD_INT 0
27657: PPUSH
27658: PPUSH
27659: PPUSH
// begin tmp := [ ] ;
27660: LD_ADDR_VAR 0 3
27664: PUSH
27665: EMPTY
27666: ST_TO_ADDR
// for i := 1 to 6 do
27667: LD_ADDR_VAR 0 1
27671: PUSH
27672: DOUBLE
27673: LD_INT 1
27675: DEC
27676: ST_TO_ADDR
27677: LD_INT 6
27679: PUSH
27680: FOR_TO
27681: IFFALSE 27786
// begin uc_nation := nation_nature ;
27683: LD_ADDR_OWVAR 21
27687: PUSH
27688: LD_INT 0
27690: ST_TO_ADDR
// uc_side := 0 ;
27691: LD_ADDR_OWVAR 20
27695: PUSH
27696: LD_INT 0
27698: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27699: LD_ADDR_OWVAR 29
27703: PUSH
27704: LD_INT 12
27706: PUSH
27707: LD_INT 12
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: ST_TO_ADDR
// hc_agressivity := 20 ;
27714: LD_ADDR_OWVAR 35
27718: PUSH
27719: LD_INT 20
27721: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27722: LD_ADDR_OWVAR 28
27726: PUSH
27727: LD_INT 17
27729: ST_TO_ADDR
// hc_gallery :=  ;
27730: LD_ADDR_OWVAR 33
27734: PUSH
27735: LD_STRING 
27737: ST_TO_ADDR
// hc_name :=  ;
27738: LD_ADDR_OWVAR 26
27742: PUSH
27743: LD_STRING 
27745: ST_TO_ADDR
// un := CreateHuman ;
27746: LD_ADDR_VAR 0 2
27750: PUSH
27751: CALL_OW 44
27755: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27756: LD_VAR 0 2
27760: PPUSH
27761: LD_INT 1
27763: PPUSH
27764: CALL_OW 51
// tmp := tmp ^ un ;
27768: LD_ADDR_VAR 0 3
27772: PUSH
27773: LD_VAR 0 3
27777: PUSH
27778: LD_VAR 0 2
27782: ADD
27783: ST_TO_ADDR
// end ;
27784: GO 27680
27786: POP
27787: POP
// repeat wait ( 0 0$1 ) ;
27788: LD_INT 35
27790: PPUSH
27791: CALL_OW 67
// for un in tmp do
27795: LD_ADDR_VAR 0 2
27799: PUSH
27800: LD_VAR 0 3
27804: PUSH
27805: FOR_IN
27806: IFFALSE 27880
// begin if IsDead ( un ) then
27808: LD_VAR 0 2
27812: PPUSH
27813: CALL_OW 301
27817: IFFALSE 27837
// begin tmp := tmp diff un ;
27819: LD_ADDR_VAR 0 3
27823: PUSH
27824: LD_VAR 0 3
27828: PUSH
27829: LD_VAR 0 2
27833: DIFF
27834: ST_TO_ADDR
// continue ;
27835: GO 27805
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27837: LD_VAR 0 2
27841: PPUSH
27842: LD_INT 3
27844: PUSH
27845: LD_INT 22
27847: PUSH
27848: LD_INT 0
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PPUSH
27859: CALL_OW 69
27863: PPUSH
27864: LD_VAR 0 2
27868: PPUSH
27869: CALL_OW 74
27873: PPUSH
27874: CALL_OW 115
// end ;
27878: GO 27805
27880: POP
27881: POP
// until not tmp ;
27882: LD_VAR 0 3
27886: NOT
27887: IFFALSE 27788
// end ;
27889: PPOPN 3
27891: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27892: LD_EXP 47
27896: PUSH
27897: LD_EXP 72
27901: AND
27902: IFFALSE 27956
27904: GO 27906
27906: DISABLE
// begin ToLua ( displayTroll(); ) ;
27907: LD_STRING displayTroll();
27909: PPUSH
27910: CALL_OW 559
// wait ( 3 3$00 ) ;
27914: LD_INT 6300
27916: PPUSH
27917: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27921: LD_STRING hideTroll();
27923: PPUSH
27924: CALL_OW 559
// wait ( 1 1$00 ) ;
27928: LD_INT 2100
27930: PPUSH
27931: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27935: LD_STRING displayTroll();
27937: PPUSH
27938: CALL_OW 559
// wait ( 1 1$00 ) ;
27942: LD_INT 2100
27944: PPUSH
27945: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27949: LD_STRING hideTroll();
27951: PPUSH
27952: CALL_OW 559
// end ;
27956: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27957: LD_EXP 47
27961: PUSH
27962: LD_EXP 73
27966: AND
27967: IFFALSE 28030
27969: GO 27971
27971: DISABLE
27972: LD_INT 0
27974: PPUSH
// begin p := 0 ;
27975: LD_ADDR_VAR 0 1
27979: PUSH
27980: LD_INT 0
27982: ST_TO_ADDR
// repeat game_speed := 1 ;
27983: LD_ADDR_OWVAR 65
27987: PUSH
27988: LD_INT 1
27990: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27991: LD_INT 35
27993: PPUSH
27994: CALL_OW 67
// p := p + 1 ;
27998: LD_ADDR_VAR 0 1
28002: PUSH
28003: LD_VAR 0 1
28007: PUSH
28008: LD_INT 1
28010: PLUS
28011: ST_TO_ADDR
// until p >= 60 ;
28012: LD_VAR 0 1
28016: PUSH
28017: LD_INT 60
28019: GREATEREQUAL
28020: IFFALSE 27983
// game_speed := 4 ;
28022: LD_ADDR_OWVAR 65
28026: PUSH
28027: LD_INT 4
28029: ST_TO_ADDR
// end ;
28030: PPOPN 1
28032: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28033: LD_EXP 47
28037: PUSH
28038: LD_EXP 74
28042: AND
28043: IFFALSE 28189
28045: GO 28047
28047: DISABLE
28048: LD_INT 0
28050: PPUSH
28051: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28052: LD_ADDR_VAR 0 1
28056: PUSH
28057: LD_INT 22
28059: PUSH
28060: LD_OWVAR 2
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: LD_INT 2
28071: PUSH
28072: LD_INT 30
28074: PUSH
28075: LD_INT 0
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: PUSH
28082: LD_INT 30
28084: PUSH
28085: LD_INT 1
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: LIST
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PPUSH
28101: CALL_OW 69
28105: ST_TO_ADDR
// if not depot then
28106: LD_VAR 0 1
28110: NOT
28111: IFFALSE 28115
// exit ;
28113: GO 28189
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28115: LD_ADDR_VAR 0 2
28119: PUSH
28120: LD_VAR 0 1
28124: PUSH
28125: LD_INT 1
28127: PPUSH
28128: LD_VAR 0 1
28132: PPUSH
28133: CALL_OW 12
28137: ARRAY
28138: PPUSH
28139: CALL_OW 274
28143: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28144: LD_VAR 0 2
28148: PPUSH
28149: LD_INT 1
28151: PPUSH
28152: LD_INT 0
28154: PPUSH
28155: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28159: LD_VAR 0 2
28163: PPUSH
28164: LD_INT 2
28166: PPUSH
28167: LD_INT 0
28169: PPUSH
28170: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28174: LD_VAR 0 2
28178: PPUSH
28179: LD_INT 3
28181: PPUSH
28182: LD_INT 0
28184: PPUSH
28185: CALL_OW 277
// end ;
28189: PPOPN 2
28191: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28192: LD_EXP 47
28196: PUSH
28197: LD_EXP 75
28201: AND
28202: IFFALSE 28299
28204: GO 28206
28206: DISABLE
28207: LD_INT 0
28209: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28210: LD_ADDR_VAR 0 1
28214: PUSH
28215: LD_INT 22
28217: PUSH
28218: LD_OWVAR 2
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 21
28229: PUSH
28230: LD_INT 1
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 3
28239: PUSH
28240: LD_INT 23
28242: PUSH
28243: LD_INT 0
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: LIST
28258: PPUSH
28259: CALL_OW 69
28263: ST_TO_ADDR
// if not tmp then
28264: LD_VAR 0 1
28268: NOT
28269: IFFALSE 28273
// exit ;
28271: GO 28299
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28273: LD_VAR 0 1
28277: PUSH
28278: LD_INT 1
28280: PPUSH
28281: LD_VAR 0 1
28285: PPUSH
28286: CALL_OW 12
28290: ARRAY
28291: PPUSH
28292: LD_INT 200
28294: PPUSH
28295: CALL_OW 234
// end ;
28299: PPOPN 1
28301: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28302: LD_EXP 47
28306: PUSH
28307: LD_EXP 76
28311: AND
28312: IFFALSE 28391
28314: GO 28316
28316: DISABLE
28317: LD_INT 0
28319: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28320: LD_ADDR_VAR 0 1
28324: PUSH
28325: LD_INT 22
28327: PUSH
28328: LD_OWVAR 2
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PUSH
28337: LD_INT 21
28339: PUSH
28340: LD_INT 2
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PPUSH
28351: CALL_OW 69
28355: ST_TO_ADDR
// if not tmp then
28356: LD_VAR 0 1
28360: NOT
28361: IFFALSE 28365
// exit ;
28363: GO 28391
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28365: LD_VAR 0 1
28369: PUSH
28370: LD_INT 1
28372: PPUSH
28373: LD_VAR 0 1
28377: PPUSH
28378: CALL_OW 12
28382: ARRAY
28383: PPUSH
28384: LD_INT 60
28386: PPUSH
28387: CALL_OW 234
// end ;
28391: PPOPN 1
28393: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28394: LD_EXP 47
28398: PUSH
28399: LD_EXP 77
28403: AND
28404: IFFALSE 28503
28406: GO 28408
28408: DISABLE
28409: LD_INT 0
28411: PPUSH
28412: PPUSH
// begin enable ;
28413: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28414: LD_ADDR_VAR 0 1
28418: PUSH
28419: LD_INT 22
28421: PUSH
28422: LD_OWVAR 2
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 61
28433: PUSH
28434: EMPTY
28435: LIST
28436: PUSH
28437: LD_INT 33
28439: PUSH
28440: LD_INT 2
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: LIST
28451: PPUSH
28452: CALL_OW 69
28456: ST_TO_ADDR
// if not tmp then
28457: LD_VAR 0 1
28461: NOT
28462: IFFALSE 28466
// exit ;
28464: GO 28503
// for i in tmp do
28466: LD_ADDR_VAR 0 2
28470: PUSH
28471: LD_VAR 0 1
28475: PUSH
28476: FOR_IN
28477: IFFALSE 28501
// if IsControledBy ( i ) then
28479: LD_VAR 0 2
28483: PPUSH
28484: CALL_OW 312
28488: IFFALSE 28499
// ComUnlink ( i ) ;
28490: LD_VAR 0 2
28494: PPUSH
28495: CALL_OW 136
28499: GO 28476
28501: POP
28502: POP
// end ;
28503: PPOPN 2
28505: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28506: LD_EXP 47
28510: PUSH
28511: LD_EXP 78
28515: AND
28516: IFFALSE 28656
28518: GO 28520
28520: DISABLE
28521: LD_INT 0
28523: PPUSH
28524: PPUSH
// begin ToLua ( displayPowell(); ) ;
28525: LD_STRING displayPowell();
28527: PPUSH
28528: CALL_OW 559
// uc_side := 0 ;
28532: LD_ADDR_OWVAR 20
28536: PUSH
28537: LD_INT 0
28539: ST_TO_ADDR
// uc_nation := 2 ;
28540: LD_ADDR_OWVAR 21
28544: PUSH
28545: LD_INT 2
28547: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28548: LD_ADDR_OWVAR 37
28552: PUSH
28553: LD_INT 14
28555: ST_TO_ADDR
// vc_engine := engine_siberite ;
28556: LD_ADDR_OWVAR 39
28560: PUSH
28561: LD_INT 3
28563: ST_TO_ADDR
// vc_control := control_apeman ;
28564: LD_ADDR_OWVAR 38
28568: PUSH
28569: LD_INT 5
28571: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28572: LD_ADDR_OWVAR 40
28576: PUSH
28577: LD_INT 29
28579: ST_TO_ADDR
// un := CreateVehicle ;
28580: LD_ADDR_VAR 0 2
28584: PUSH
28585: CALL_OW 45
28589: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28590: LD_VAR 0 2
28594: PPUSH
28595: LD_INT 1
28597: PPUSH
28598: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28602: LD_INT 35
28604: PPUSH
28605: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28609: LD_VAR 0 2
28613: PPUSH
28614: LD_INT 22
28616: PUSH
28617: LD_OWVAR 2
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: PPUSH
28626: CALL_OW 69
28630: PPUSH
28631: LD_VAR 0 2
28635: PPUSH
28636: CALL_OW 74
28640: PPUSH
28641: CALL_OW 115
// until IsDead ( un ) ;
28645: LD_VAR 0 2
28649: PPUSH
28650: CALL_OW 301
28654: IFFALSE 28602
// end ;
28656: PPOPN 2
28658: END
// every 0 0$1 trigger StreamModeActive and sStu do
28659: LD_EXP 47
28663: PUSH
28664: LD_EXP 86
28668: AND
28669: IFFALSE 28685
28671: GO 28673
28673: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28674: LD_STRING displayStucuk();
28676: PPUSH
28677: CALL_OW 559
// ResetFog ;
28681: CALL_OW 335
// end ;
28685: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28686: LD_EXP 47
28690: PUSH
28691: LD_EXP 79
28695: AND
28696: IFFALSE 28837
28698: GO 28700
28700: DISABLE
28701: LD_INT 0
28703: PPUSH
28704: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28705: LD_ADDR_VAR 0 2
28709: PUSH
28710: LD_INT 22
28712: PUSH
28713: LD_OWVAR 2
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: LD_INT 21
28724: PUSH
28725: LD_INT 1
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: PPUSH
28736: CALL_OW 69
28740: ST_TO_ADDR
// if not tmp then
28741: LD_VAR 0 2
28745: NOT
28746: IFFALSE 28750
// exit ;
28748: GO 28837
// un := tmp [ rand ( 1 , tmp ) ] ;
28750: LD_ADDR_VAR 0 1
28754: PUSH
28755: LD_VAR 0 2
28759: PUSH
28760: LD_INT 1
28762: PPUSH
28763: LD_VAR 0 2
28767: PPUSH
28768: CALL_OW 12
28772: ARRAY
28773: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28774: LD_VAR 0 1
28778: PPUSH
28779: LD_INT 0
28781: PPUSH
28782: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28786: LD_VAR 0 1
28790: PPUSH
28791: LD_OWVAR 3
28795: PUSH
28796: LD_VAR 0 1
28800: DIFF
28801: PPUSH
28802: LD_VAR 0 1
28806: PPUSH
28807: CALL_OW 74
28811: PPUSH
28812: CALL_OW 115
// wait ( 0 0$20 ) ;
28816: LD_INT 700
28818: PPUSH
28819: CALL_OW 67
// SetSide ( un , your_side ) ;
28823: LD_VAR 0 1
28827: PPUSH
28828: LD_OWVAR 2
28832: PPUSH
28833: CALL_OW 235
// end ;
28837: PPOPN 2
28839: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28840: LD_EXP 47
28844: PUSH
28845: LD_EXP 80
28849: AND
28850: IFFALSE 28956
28852: GO 28854
28854: DISABLE
28855: LD_INT 0
28857: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28858: LD_ADDR_VAR 0 1
28862: PUSH
28863: LD_INT 22
28865: PUSH
28866: LD_OWVAR 2
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: PUSH
28875: LD_INT 2
28877: PUSH
28878: LD_INT 30
28880: PUSH
28881: LD_INT 0
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PUSH
28888: LD_INT 30
28890: PUSH
28891: LD_INT 1
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: LIST
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: PPUSH
28907: CALL_OW 69
28911: ST_TO_ADDR
// if not depot then
28912: LD_VAR 0 1
28916: NOT
28917: IFFALSE 28921
// exit ;
28919: GO 28956
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28921: LD_VAR 0 1
28925: PUSH
28926: LD_INT 1
28928: ARRAY
28929: PPUSH
28930: CALL_OW 250
28934: PPUSH
28935: LD_VAR 0 1
28939: PUSH
28940: LD_INT 1
28942: ARRAY
28943: PPUSH
28944: CALL_OW 251
28948: PPUSH
28949: LD_INT 70
28951: PPUSH
28952: CALL_OW 495
// end ;
28956: PPOPN 1
28958: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28959: LD_EXP 47
28963: PUSH
28964: LD_EXP 81
28968: AND
28969: IFFALSE 29180
28971: GO 28973
28973: DISABLE
28974: LD_INT 0
28976: PPUSH
28977: PPUSH
28978: PPUSH
28979: PPUSH
28980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28981: LD_ADDR_VAR 0 5
28985: PUSH
28986: LD_INT 22
28988: PUSH
28989: LD_OWVAR 2
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: LD_INT 21
29000: PUSH
29001: LD_INT 1
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PPUSH
29012: CALL_OW 69
29016: ST_TO_ADDR
// if not tmp then
29017: LD_VAR 0 5
29021: NOT
29022: IFFALSE 29026
// exit ;
29024: GO 29180
// for i in tmp do
29026: LD_ADDR_VAR 0 1
29030: PUSH
29031: LD_VAR 0 5
29035: PUSH
29036: FOR_IN
29037: IFFALSE 29178
// begin d := rand ( 0 , 5 ) ;
29039: LD_ADDR_VAR 0 4
29043: PUSH
29044: LD_INT 0
29046: PPUSH
29047: LD_INT 5
29049: PPUSH
29050: CALL_OW 12
29054: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29055: LD_ADDR_VAR 0 2
29059: PUSH
29060: LD_VAR 0 1
29064: PPUSH
29065: CALL_OW 250
29069: PPUSH
29070: LD_VAR 0 4
29074: PPUSH
29075: LD_INT 3
29077: PPUSH
29078: LD_INT 12
29080: PPUSH
29081: CALL_OW 12
29085: PPUSH
29086: CALL_OW 272
29090: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29091: LD_ADDR_VAR 0 3
29095: PUSH
29096: LD_VAR 0 1
29100: PPUSH
29101: CALL_OW 251
29105: PPUSH
29106: LD_VAR 0 4
29110: PPUSH
29111: LD_INT 3
29113: PPUSH
29114: LD_INT 12
29116: PPUSH
29117: CALL_OW 12
29121: PPUSH
29122: CALL_OW 273
29126: ST_TO_ADDR
// if ValidHex ( x , y ) then
29127: LD_VAR 0 2
29131: PPUSH
29132: LD_VAR 0 3
29136: PPUSH
29137: CALL_OW 488
29141: IFFALSE 29176
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29143: LD_VAR 0 1
29147: PPUSH
29148: LD_VAR 0 2
29152: PPUSH
29153: LD_VAR 0 3
29157: PPUSH
29158: LD_INT 3
29160: PPUSH
29161: LD_INT 6
29163: PPUSH
29164: CALL_OW 12
29168: PPUSH
29169: LD_INT 1
29171: PPUSH
29172: CALL_OW 483
// end ;
29176: GO 29036
29178: POP
29179: POP
// end ;
29180: PPOPN 5
29182: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29183: LD_EXP 47
29187: PUSH
29188: LD_EXP 82
29192: AND
29193: IFFALSE 29287
29195: GO 29197
29197: DISABLE
29198: LD_INT 0
29200: PPUSH
29201: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29202: LD_ADDR_VAR 0 2
29206: PUSH
29207: LD_INT 22
29209: PUSH
29210: LD_OWVAR 2
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 32
29221: PUSH
29222: LD_INT 1
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: LD_INT 21
29231: PUSH
29232: LD_INT 2
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: LIST
29243: PPUSH
29244: CALL_OW 69
29248: ST_TO_ADDR
// if not tmp then
29249: LD_VAR 0 2
29253: NOT
29254: IFFALSE 29258
// exit ;
29256: GO 29287
// for i in tmp do
29258: LD_ADDR_VAR 0 1
29262: PUSH
29263: LD_VAR 0 2
29267: PUSH
29268: FOR_IN
29269: IFFALSE 29285
// SetFuel ( i , 0 ) ;
29271: LD_VAR 0 1
29275: PPUSH
29276: LD_INT 0
29278: PPUSH
29279: CALL_OW 240
29283: GO 29268
29285: POP
29286: POP
// end ;
29287: PPOPN 2
29289: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29290: LD_EXP 47
29294: PUSH
29295: LD_EXP 83
29299: AND
29300: IFFALSE 29366
29302: GO 29304
29304: DISABLE
29305: LD_INT 0
29307: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29308: LD_ADDR_VAR 0 1
29312: PUSH
29313: LD_INT 22
29315: PUSH
29316: LD_OWVAR 2
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: PUSH
29325: LD_INT 30
29327: PUSH
29328: LD_INT 29
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PPUSH
29339: CALL_OW 69
29343: ST_TO_ADDR
// if not tmp then
29344: LD_VAR 0 1
29348: NOT
29349: IFFALSE 29353
// exit ;
29351: GO 29366
// DestroyUnit ( tmp [ 1 ] ) ;
29353: LD_VAR 0 1
29357: PUSH
29358: LD_INT 1
29360: ARRAY
29361: PPUSH
29362: CALL_OW 65
// end ;
29366: PPOPN 1
29368: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29369: LD_EXP 47
29373: PUSH
29374: LD_EXP 85
29378: AND
29379: IFFALSE 29508
29381: GO 29383
29383: DISABLE
29384: LD_INT 0
29386: PPUSH
// begin uc_side := 0 ;
29387: LD_ADDR_OWVAR 20
29391: PUSH
29392: LD_INT 0
29394: ST_TO_ADDR
// uc_nation := nation_arabian ;
29395: LD_ADDR_OWVAR 21
29399: PUSH
29400: LD_INT 2
29402: ST_TO_ADDR
// hc_gallery :=  ;
29403: LD_ADDR_OWVAR 33
29407: PUSH
29408: LD_STRING 
29410: ST_TO_ADDR
// hc_name :=  ;
29411: LD_ADDR_OWVAR 26
29415: PUSH
29416: LD_STRING 
29418: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29419: LD_INT 1
29421: PPUSH
29422: LD_INT 11
29424: PPUSH
29425: LD_INT 10
29427: PPUSH
29428: CALL_OW 380
// un := CreateHuman ;
29432: LD_ADDR_VAR 0 1
29436: PUSH
29437: CALL_OW 44
29441: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29442: LD_VAR 0 1
29446: PPUSH
29447: LD_INT 1
29449: PPUSH
29450: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29454: LD_INT 35
29456: PPUSH
29457: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29461: LD_VAR 0 1
29465: PPUSH
29466: LD_INT 22
29468: PUSH
29469: LD_OWVAR 2
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: PPUSH
29478: CALL_OW 69
29482: PPUSH
29483: LD_VAR 0 1
29487: PPUSH
29488: CALL_OW 74
29492: PPUSH
29493: CALL_OW 115
// until IsDead ( un ) ;
29497: LD_VAR 0 1
29501: PPUSH
29502: CALL_OW 301
29506: IFFALSE 29454
// end ;
29508: PPOPN 1
29510: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29511: LD_EXP 47
29515: PUSH
29516: LD_EXP 87
29520: AND
29521: IFFALSE 29533
29523: GO 29525
29525: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29526: LD_STRING earthquake(getX(game), 0, 32)
29528: PPUSH
29529: CALL_OW 559
29533: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29534: LD_EXP 47
29538: PUSH
29539: LD_EXP 88
29543: AND
29544: IFFALSE 29635
29546: GO 29548
29548: DISABLE
29549: LD_INT 0
29551: PPUSH
// begin enable ;
29552: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29553: LD_ADDR_VAR 0 1
29557: PUSH
29558: LD_INT 22
29560: PUSH
29561: LD_OWVAR 2
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 21
29572: PUSH
29573: LD_INT 2
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: LD_INT 33
29582: PUSH
29583: LD_INT 3
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: LIST
29594: PPUSH
29595: CALL_OW 69
29599: ST_TO_ADDR
// if not tmp then
29600: LD_VAR 0 1
29604: NOT
29605: IFFALSE 29609
// exit ;
29607: GO 29635
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29609: LD_VAR 0 1
29613: PUSH
29614: LD_INT 1
29616: PPUSH
29617: LD_VAR 0 1
29621: PPUSH
29622: CALL_OW 12
29626: ARRAY
29627: PPUSH
29628: LD_INT 1
29630: PPUSH
29631: CALL_OW 234
// end ;
29635: PPOPN 1
29637: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29638: LD_EXP 47
29642: PUSH
29643: LD_EXP 89
29647: AND
29648: IFFALSE 29789
29650: GO 29652
29652: DISABLE
29653: LD_INT 0
29655: PPUSH
29656: PPUSH
29657: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29658: LD_ADDR_VAR 0 3
29662: PUSH
29663: LD_INT 22
29665: PUSH
29666: LD_OWVAR 2
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: LD_INT 25
29677: PUSH
29678: LD_INT 1
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: PPUSH
29689: CALL_OW 69
29693: ST_TO_ADDR
// if not tmp then
29694: LD_VAR 0 3
29698: NOT
29699: IFFALSE 29703
// exit ;
29701: GO 29789
// un := tmp [ rand ( 1 , tmp ) ] ;
29703: LD_ADDR_VAR 0 2
29707: PUSH
29708: LD_VAR 0 3
29712: PUSH
29713: LD_INT 1
29715: PPUSH
29716: LD_VAR 0 3
29720: PPUSH
29721: CALL_OW 12
29725: ARRAY
29726: ST_TO_ADDR
// if Crawls ( un ) then
29727: LD_VAR 0 2
29731: PPUSH
29732: CALL_OW 318
29736: IFFALSE 29747
// ComWalk ( un ) ;
29738: LD_VAR 0 2
29742: PPUSH
29743: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29747: LD_VAR 0 2
29751: PPUSH
29752: LD_INT 9
29754: PPUSH
29755: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29759: LD_INT 28
29761: PPUSH
29762: LD_OWVAR 2
29766: PPUSH
29767: LD_INT 2
29769: PPUSH
29770: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29774: LD_INT 29
29776: PPUSH
29777: LD_OWVAR 2
29781: PPUSH
29782: LD_INT 2
29784: PPUSH
29785: CALL_OW 322
// end ;
29789: PPOPN 3
29791: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29792: LD_EXP 47
29796: PUSH
29797: LD_EXP 90
29801: AND
29802: IFFALSE 29913
29804: GO 29806
29806: DISABLE
29807: LD_INT 0
29809: PPUSH
29810: PPUSH
29811: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29812: LD_ADDR_VAR 0 3
29816: PUSH
29817: LD_INT 22
29819: PUSH
29820: LD_OWVAR 2
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 25
29831: PUSH
29832: LD_INT 1
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: PPUSH
29843: CALL_OW 69
29847: ST_TO_ADDR
// if not tmp then
29848: LD_VAR 0 3
29852: NOT
29853: IFFALSE 29857
// exit ;
29855: GO 29913
// un := tmp [ rand ( 1 , tmp ) ] ;
29857: LD_ADDR_VAR 0 2
29861: PUSH
29862: LD_VAR 0 3
29866: PUSH
29867: LD_INT 1
29869: PPUSH
29870: LD_VAR 0 3
29874: PPUSH
29875: CALL_OW 12
29879: ARRAY
29880: ST_TO_ADDR
// if Crawls ( un ) then
29881: LD_VAR 0 2
29885: PPUSH
29886: CALL_OW 318
29890: IFFALSE 29901
// ComWalk ( un ) ;
29892: LD_VAR 0 2
29896: PPUSH
29897: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29901: LD_VAR 0 2
29905: PPUSH
29906: LD_INT 8
29908: PPUSH
29909: CALL_OW 336
// end ;
29913: PPOPN 3
29915: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29916: LD_EXP 47
29920: PUSH
29921: LD_EXP 91
29925: AND
29926: IFFALSE 30070
29928: GO 29930
29930: DISABLE
29931: LD_INT 0
29933: PPUSH
29934: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29935: LD_ADDR_VAR 0 2
29939: PUSH
29940: LD_INT 22
29942: PUSH
29943: LD_OWVAR 2
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: LD_INT 21
29954: PUSH
29955: LD_INT 2
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: LD_INT 2
29964: PUSH
29965: LD_INT 34
29967: PUSH
29968: LD_INT 12
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 34
29977: PUSH
29978: LD_INT 51
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: LD_INT 34
29987: PUSH
29988: LD_INT 32
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: LIST
30005: PPUSH
30006: CALL_OW 69
30010: ST_TO_ADDR
// if not tmp then
30011: LD_VAR 0 2
30015: NOT
30016: IFFALSE 30020
// exit ;
30018: GO 30070
// for i in tmp do
30020: LD_ADDR_VAR 0 1
30024: PUSH
30025: LD_VAR 0 2
30029: PUSH
30030: FOR_IN
30031: IFFALSE 30068
// if GetCargo ( i , mat_artifact ) = 0 then
30033: LD_VAR 0 1
30037: PPUSH
30038: LD_INT 4
30040: PPUSH
30041: CALL_OW 289
30045: PUSH
30046: LD_INT 0
30048: EQUAL
30049: IFFALSE 30066
// SetCargo ( i , mat_siberit , 100 ) ;
30051: LD_VAR 0 1
30055: PPUSH
30056: LD_INT 3
30058: PPUSH
30059: LD_INT 100
30061: PPUSH
30062: CALL_OW 290
30066: GO 30030
30068: POP
30069: POP
// end ;
30070: PPOPN 2
30072: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30073: LD_EXP 47
30077: PUSH
30078: LD_EXP 92
30082: AND
30083: IFFALSE 30266
30085: GO 30087
30087: DISABLE
30088: LD_INT 0
30090: PPUSH
30091: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30092: LD_ADDR_VAR 0 2
30096: PUSH
30097: LD_INT 22
30099: PUSH
30100: LD_OWVAR 2
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: PPUSH
30109: CALL_OW 69
30113: ST_TO_ADDR
// if not tmp then
30114: LD_VAR 0 2
30118: NOT
30119: IFFALSE 30123
// exit ;
30121: GO 30266
// for i := 1 to 2 do
30123: LD_ADDR_VAR 0 1
30127: PUSH
30128: DOUBLE
30129: LD_INT 1
30131: DEC
30132: ST_TO_ADDR
30133: LD_INT 2
30135: PUSH
30136: FOR_TO
30137: IFFALSE 30264
// begin uc_side := your_side ;
30139: LD_ADDR_OWVAR 20
30143: PUSH
30144: LD_OWVAR 2
30148: ST_TO_ADDR
// uc_nation := nation_american ;
30149: LD_ADDR_OWVAR 21
30153: PUSH
30154: LD_INT 1
30156: ST_TO_ADDR
// vc_chassis := us_morphling ;
30157: LD_ADDR_OWVAR 37
30161: PUSH
30162: LD_INT 5
30164: ST_TO_ADDR
// vc_engine := engine_siberite ;
30165: LD_ADDR_OWVAR 39
30169: PUSH
30170: LD_INT 3
30172: ST_TO_ADDR
// vc_control := control_computer ;
30173: LD_ADDR_OWVAR 38
30177: PUSH
30178: LD_INT 3
30180: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30181: LD_ADDR_OWVAR 40
30185: PUSH
30186: LD_INT 10
30188: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30189: LD_VAR 0 2
30193: PUSH
30194: LD_INT 1
30196: ARRAY
30197: PPUSH
30198: CALL_OW 310
30202: NOT
30203: IFFALSE 30250
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30205: CALL_OW 45
30209: PPUSH
30210: LD_VAR 0 2
30214: PUSH
30215: LD_INT 1
30217: ARRAY
30218: PPUSH
30219: CALL_OW 250
30223: PPUSH
30224: LD_VAR 0 2
30228: PUSH
30229: LD_INT 1
30231: ARRAY
30232: PPUSH
30233: CALL_OW 251
30237: PPUSH
30238: LD_INT 12
30240: PPUSH
30241: LD_INT 1
30243: PPUSH
30244: CALL_OW 50
30248: GO 30262
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30250: CALL_OW 45
30254: PPUSH
30255: LD_INT 1
30257: PPUSH
30258: CALL_OW 51
// end ;
30262: GO 30136
30264: POP
30265: POP
// end ;
30266: PPOPN 2
30268: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30269: LD_EXP 47
30273: PUSH
30274: LD_EXP 93
30278: AND
30279: IFFALSE 30501
30281: GO 30283
30283: DISABLE
30284: LD_INT 0
30286: PPUSH
30287: PPUSH
30288: PPUSH
30289: PPUSH
30290: PPUSH
30291: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30292: LD_ADDR_VAR 0 6
30296: PUSH
30297: LD_INT 22
30299: PUSH
30300: LD_OWVAR 2
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 21
30311: PUSH
30312: LD_INT 1
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 3
30321: PUSH
30322: LD_INT 23
30324: PUSH
30325: LD_INT 0
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: LIST
30340: PPUSH
30341: CALL_OW 69
30345: ST_TO_ADDR
// if not tmp then
30346: LD_VAR 0 6
30350: NOT
30351: IFFALSE 30355
// exit ;
30353: GO 30501
// s1 := rand ( 1 , 4 ) ;
30355: LD_ADDR_VAR 0 2
30359: PUSH
30360: LD_INT 1
30362: PPUSH
30363: LD_INT 4
30365: PPUSH
30366: CALL_OW 12
30370: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30371: LD_ADDR_VAR 0 4
30375: PUSH
30376: LD_VAR 0 6
30380: PUSH
30381: LD_INT 1
30383: ARRAY
30384: PPUSH
30385: LD_VAR 0 2
30389: PPUSH
30390: CALL_OW 259
30394: ST_TO_ADDR
// if s1 = 1 then
30395: LD_VAR 0 2
30399: PUSH
30400: LD_INT 1
30402: EQUAL
30403: IFFALSE 30423
// s2 := rand ( 2 , 4 ) else
30405: LD_ADDR_VAR 0 3
30409: PUSH
30410: LD_INT 2
30412: PPUSH
30413: LD_INT 4
30415: PPUSH
30416: CALL_OW 12
30420: ST_TO_ADDR
30421: GO 30431
// s2 := 1 ;
30423: LD_ADDR_VAR 0 3
30427: PUSH
30428: LD_INT 1
30430: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30431: LD_ADDR_VAR 0 5
30435: PUSH
30436: LD_VAR 0 6
30440: PUSH
30441: LD_INT 1
30443: ARRAY
30444: PPUSH
30445: LD_VAR 0 3
30449: PPUSH
30450: CALL_OW 259
30454: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30455: LD_VAR 0 6
30459: PUSH
30460: LD_INT 1
30462: ARRAY
30463: PPUSH
30464: LD_VAR 0 2
30468: PPUSH
30469: LD_VAR 0 5
30473: PPUSH
30474: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30478: LD_VAR 0 6
30482: PUSH
30483: LD_INT 1
30485: ARRAY
30486: PPUSH
30487: LD_VAR 0 3
30491: PPUSH
30492: LD_VAR 0 4
30496: PPUSH
30497: CALL_OW 237
// end ;
30501: PPOPN 6
30503: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30504: LD_EXP 47
30508: PUSH
30509: LD_EXP 94
30513: AND
30514: IFFALSE 30593
30516: GO 30518
30518: DISABLE
30519: LD_INT 0
30521: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30522: LD_ADDR_VAR 0 1
30526: PUSH
30527: LD_INT 22
30529: PUSH
30530: LD_OWVAR 2
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 30
30541: PUSH
30542: LD_INT 3
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PPUSH
30553: CALL_OW 69
30557: ST_TO_ADDR
// if not tmp then
30558: LD_VAR 0 1
30562: NOT
30563: IFFALSE 30567
// exit ;
30565: GO 30593
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30567: LD_VAR 0 1
30571: PUSH
30572: LD_INT 1
30574: PPUSH
30575: LD_VAR 0 1
30579: PPUSH
30580: CALL_OW 12
30584: ARRAY
30585: PPUSH
30586: LD_INT 1
30588: PPUSH
30589: CALL_OW 234
// end ;
30593: PPOPN 1
30595: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30596: LD_EXP 47
30600: PUSH
30601: LD_EXP 95
30605: AND
30606: IFFALSE 30718
30608: GO 30610
30610: DISABLE
30611: LD_INT 0
30613: PPUSH
30614: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30615: LD_ADDR_VAR 0 2
30619: PUSH
30620: LD_INT 22
30622: PUSH
30623: LD_OWVAR 2
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: LD_INT 2
30634: PUSH
30635: LD_INT 30
30637: PUSH
30638: LD_INT 27
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: LD_INT 30
30647: PUSH
30648: LD_INT 26
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PUSH
30655: LD_INT 30
30657: PUSH
30658: LD_INT 28
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: PPUSH
30675: CALL_OW 69
30679: ST_TO_ADDR
// if not tmp then
30680: LD_VAR 0 2
30684: NOT
30685: IFFALSE 30689
// exit ;
30687: GO 30718
// for i in tmp do
30689: LD_ADDR_VAR 0 1
30693: PUSH
30694: LD_VAR 0 2
30698: PUSH
30699: FOR_IN
30700: IFFALSE 30716
// SetLives ( i , 1 ) ;
30702: LD_VAR 0 1
30706: PPUSH
30707: LD_INT 1
30709: PPUSH
30710: CALL_OW 234
30714: GO 30699
30716: POP
30717: POP
// end ;
30718: PPOPN 2
30720: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30721: LD_EXP 47
30725: PUSH
30726: LD_EXP 96
30730: AND
30731: IFFALSE 31018
30733: GO 30735
30735: DISABLE
30736: LD_INT 0
30738: PPUSH
30739: PPUSH
30740: PPUSH
// begin i := rand ( 1 , 7 ) ;
30741: LD_ADDR_VAR 0 1
30745: PUSH
30746: LD_INT 1
30748: PPUSH
30749: LD_INT 7
30751: PPUSH
30752: CALL_OW 12
30756: ST_TO_ADDR
// case i of 1 :
30757: LD_VAR 0 1
30761: PUSH
30762: LD_INT 1
30764: DOUBLE
30765: EQUAL
30766: IFTRUE 30770
30768: GO 30780
30770: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30771: LD_STRING earthquake(getX(game), 0, 32)
30773: PPUSH
30774: CALL_OW 559
30778: GO 31018
30780: LD_INT 2
30782: DOUBLE
30783: EQUAL
30784: IFTRUE 30788
30786: GO 30802
30788: POP
// begin ToLua ( displayStucuk(); ) ;
30789: LD_STRING displayStucuk();
30791: PPUSH
30792: CALL_OW 559
// ResetFog ;
30796: CALL_OW 335
// end ; 3 :
30800: GO 31018
30802: LD_INT 3
30804: DOUBLE
30805: EQUAL
30806: IFTRUE 30810
30808: GO 30914
30810: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30811: LD_ADDR_VAR 0 2
30815: PUSH
30816: LD_INT 22
30818: PUSH
30819: LD_OWVAR 2
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: PUSH
30828: LD_INT 25
30830: PUSH
30831: LD_INT 1
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PPUSH
30842: CALL_OW 69
30846: ST_TO_ADDR
// if not tmp then
30847: LD_VAR 0 2
30851: NOT
30852: IFFALSE 30856
// exit ;
30854: GO 31018
// un := tmp [ rand ( 1 , tmp ) ] ;
30856: LD_ADDR_VAR 0 3
30860: PUSH
30861: LD_VAR 0 2
30865: PUSH
30866: LD_INT 1
30868: PPUSH
30869: LD_VAR 0 2
30873: PPUSH
30874: CALL_OW 12
30878: ARRAY
30879: ST_TO_ADDR
// if Crawls ( un ) then
30880: LD_VAR 0 3
30884: PPUSH
30885: CALL_OW 318
30889: IFFALSE 30900
// ComWalk ( un ) ;
30891: LD_VAR 0 3
30895: PPUSH
30896: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30900: LD_VAR 0 3
30904: PPUSH
30905: LD_INT 8
30907: PPUSH
30908: CALL_OW 336
// end ; 4 :
30912: GO 31018
30914: LD_INT 4
30916: DOUBLE
30917: EQUAL
30918: IFTRUE 30922
30920: GO 30996
30922: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30923: LD_ADDR_VAR 0 2
30927: PUSH
30928: LD_INT 22
30930: PUSH
30931: LD_OWVAR 2
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 30
30942: PUSH
30943: LD_INT 29
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PPUSH
30954: CALL_OW 69
30958: ST_TO_ADDR
// if not tmp then
30959: LD_VAR 0 2
30963: NOT
30964: IFFALSE 30968
// exit ;
30966: GO 31018
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30968: LD_VAR 0 2
30972: PUSH
30973: LD_INT 1
30975: ARRAY
30976: PPUSH
30977: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30981: LD_VAR 0 2
30985: PUSH
30986: LD_INT 1
30988: ARRAY
30989: PPUSH
30990: CALL_OW 65
// end ; 5 .. 7 :
30994: GO 31018
30996: LD_INT 5
30998: DOUBLE
30999: GREATEREQUAL
31000: IFFALSE 31008
31002: LD_INT 7
31004: DOUBLE
31005: LESSEQUAL
31006: IFTRUE 31010
31008: GO 31017
31010: POP
// StreamSibBomb ; end ;
31011: CALL 27255 0 0
31015: GO 31018
31017: POP
// end ;
31018: PPOPN 3
31020: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31021: LD_EXP 47
31025: PUSH
31026: LD_EXP 97
31030: AND
31031: IFFALSE 31187
31033: GO 31035
31035: DISABLE
31036: LD_INT 0
31038: PPUSH
31039: PPUSH
31040: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31041: LD_ADDR_VAR 0 2
31045: PUSH
31046: LD_INT 81
31048: PUSH
31049: LD_OWVAR 2
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_INT 2
31060: PUSH
31061: LD_INT 21
31063: PUSH
31064: LD_INT 1
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 21
31073: PUSH
31074: LD_INT 2
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: LIST
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: PPUSH
31090: CALL_OW 69
31094: ST_TO_ADDR
// if not tmp then
31095: LD_VAR 0 2
31099: NOT
31100: IFFALSE 31104
// exit ;
31102: GO 31187
// p := 0 ;
31104: LD_ADDR_VAR 0 3
31108: PUSH
31109: LD_INT 0
31111: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31112: LD_INT 35
31114: PPUSH
31115: CALL_OW 67
// p := p + 1 ;
31119: LD_ADDR_VAR 0 3
31123: PUSH
31124: LD_VAR 0 3
31128: PUSH
31129: LD_INT 1
31131: PLUS
31132: ST_TO_ADDR
// for i in tmp do
31133: LD_ADDR_VAR 0 1
31137: PUSH
31138: LD_VAR 0 2
31142: PUSH
31143: FOR_IN
31144: IFFALSE 31175
// if GetLives ( i ) < 1000 then
31146: LD_VAR 0 1
31150: PPUSH
31151: CALL_OW 256
31155: PUSH
31156: LD_INT 1000
31158: LESS
31159: IFFALSE 31173
// SetLives ( i , 1000 ) ;
31161: LD_VAR 0 1
31165: PPUSH
31166: LD_INT 1000
31168: PPUSH
31169: CALL_OW 234
31173: GO 31143
31175: POP
31176: POP
// until p > 20 ;
31177: LD_VAR 0 3
31181: PUSH
31182: LD_INT 20
31184: GREATER
31185: IFFALSE 31112
// end ;
31187: PPOPN 3
31189: END
// every 0 0$1 trigger StreamModeActive and sTime do
31190: LD_EXP 47
31194: PUSH
31195: LD_EXP 98
31199: AND
31200: IFFALSE 31235
31202: GO 31204
31204: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31205: LD_INT 28
31207: PPUSH
31208: LD_OWVAR 2
31212: PPUSH
31213: LD_INT 2
31215: PPUSH
31216: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31220: LD_INT 30
31222: PPUSH
31223: LD_OWVAR 2
31227: PPUSH
31228: LD_INT 2
31230: PPUSH
31231: CALL_OW 322
// end ;
31235: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31236: LD_EXP 47
31240: PUSH
31241: LD_EXP 99
31245: AND
31246: IFFALSE 31367
31248: GO 31250
31250: DISABLE
31251: LD_INT 0
31253: PPUSH
31254: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31255: LD_ADDR_VAR 0 2
31259: PUSH
31260: LD_INT 22
31262: PUSH
31263: LD_OWVAR 2
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 21
31274: PUSH
31275: LD_INT 1
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 3
31284: PUSH
31285: LD_INT 23
31287: PUSH
31288: LD_INT 0
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: LIST
31303: PPUSH
31304: CALL_OW 69
31308: ST_TO_ADDR
// if not tmp then
31309: LD_VAR 0 2
31313: NOT
31314: IFFALSE 31318
// exit ;
31316: GO 31367
// for i in tmp do
31318: LD_ADDR_VAR 0 1
31322: PUSH
31323: LD_VAR 0 2
31327: PUSH
31328: FOR_IN
31329: IFFALSE 31365
// begin if Crawls ( i ) then
31331: LD_VAR 0 1
31335: PPUSH
31336: CALL_OW 318
31340: IFFALSE 31351
// ComWalk ( i ) ;
31342: LD_VAR 0 1
31346: PPUSH
31347: CALL_OW 138
// SetClass ( i , 2 ) ;
31351: LD_VAR 0 1
31355: PPUSH
31356: LD_INT 2
31358: PPUSH
31359: CALL_OW 336
// end ;
31363: GO 31328
31365: POP
31366: POP
// end ;
31367: PPOPN 2
31369: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31370: LD_EXP 47
31374: PUSH
31375: LD_EXP 100
31379: AND
31380: IFFALSE 31668
31382: GO 31384
31384: DISABLE
31385: LD_INT 0
31387: PPUSH
31388: PPUSH
31389: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31390: LD_OWVAR 2
31394: PPUSH
31395: LD_INT 9
31397: PPUSH
31398: LD_INT 1
31400: PPUSH
31401: LD_INT 1
31403: PPUSH
31404: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31408: LD_INT 9
31410: PPUSH
31411: LD_OWVAR 2
31415: PPUSH
31416: CALL_OW 343
// uc_side := 9 ;
31420: LD_ADDR_OWVAR 20
31424: PUSH
31425: LD_INT 9
31427: ST_TO_ADDR
// uc_nation := 2 ;
31428: LD_ADDR_OWVAR 21
31432: PUSH
31433: LD_INT 2
31435: ST_TO_ADDR
// hc_name := Dark Warrior ;
31436: LD_ADDR_OWVAR 26
31440: PUSH
31441: LD_STRING Dark Warrior
31443: ST_TO_ADDR
// hc_gallery :=  ;
31444: LD_ADDR_OWVAR 33
31448: PUSH
31449: LD_STRING 
31451: ST_TO_ADDR
// hc_noskilllimit := true ;
31452: LD_ADDR_OWVAR 76
31456: PUSH
31457: LD_INT 1
31459: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31460: LD_ADDR_OWVAR 31
31464: PUSH
31465: LD_INT 30
31467: PUSH
31468: LD_INT 30
31470: PUSH
31471: LD_INT 30
31473: PUSH
31474: LD_INT 30
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: ST_TO_ADDR
// un := CreateHuman ;
31483: LD_ADDR_VAR 0 3
31487: PUSH
31488: CALL_OW 44
31492: ST_TO_ADDR
// hc_noskilllimit := false ;
31493: LD_ADDR_OWVAR 76
31497: PUSH
31498: LD_INT 0
31500: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31501: LD_VAR 0 3
31505: PPUSH
31506: LD_INT 1
31508: PPUSH
31509: CALL_OW 51
// ToLua ( playRanger() ) ;
31513: LD_STRING playRanger()
31515: PPUSH
31516: CALL_OW 559
// p := 0 ;
31520: LD_ADDR_VAR 0 2
31524: PUSH
31525: LD_INT 0
31527: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31528: LD_INT 35
31530: PPUSH
31531: CALL_OW 67
// p := p + 1 ;
31535: LD_ADDR_VAR 0 2
31539: PUSH
31540: LD_VAR 0 2
31544: PUSH
31545: LD_INT 1
31547: PLUS
31548: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31549: LD_VAR 0 3
31553: PPUSH
31554: CALL_OW 256
31558: PUSH
31559: LD_INT 1000
31561: LESS
31562: IFFALSE 31576
// SetLives ( un , 1000 ) ;
31564: LD_VAR 0 3
31568: PPUSH
31569: LD_INT 1000
31571: PPUSH
31572: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31576: LD_VAR 0 3
31580: PPUSH
31581: LD_INT 81
31583: PUSH
31584: LD_OWVAR 2
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: LD_INT 91
31595: PUSH
31596: LD_VAR 0 3
31600: PUSH
31601: LD_INT 30
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: LIST
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PPUSH
31613: CALL_OW 69
31617: PPUSH
31618: LD_VAR 0 3
31622: PPUSH
31623: CALL_OW 74
31627: PPUSH
31628: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31632: LD_VAR 0 2
31636: PUSH
31637: LD_INT 80
31639: GREATER
31640: PUSH
31641: LD_VAR 0 3
31645: PPUSH
31646: CALL_OW 301
31650: OR
31651: IFFALSE 31528
// if un then
31653: LD_VAR 0 3
31657: IFFALSE 31668
// RemoveUnit ( un ) ;
31659: LD_VAR 0 3
31663: PPUSH
31664: CALL_OW 64
// end ;
31668: PPOPN 3
31670: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31671: LD_EXP 101
31675: IFFALSE 31791
31677: GO 31679
31679: DISABLE
31680: LD_INT 0
31682: PPUSH
31683: PPUSH
31684: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31685: LD_ADDR_VAR 0 2
31689: PUSH
31690: LD_INT 81
31692: PUSH
31693: LD_OWVAR 2
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_INT 21
31704: PUSH
31705: LD_INT 1
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PPUSH
31716: CALL_OW 69
31720: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31721: LD_STRING playComputer()
31723: PPUSH
31724: CALL_OW 559
// if not tmp then
31728: LD_VAR 0 2
31732: NOT
31733: IFFALSE 31737
// exit ;
31735: GO 31791
// for i in tmp do
31737: LD_ADDR_VAR 0 1
31741: PUSH
31742: LD_VAR 0 2
31746: PUSH
31747: FOR_IN
31748: IFFALSE 31789
// for j := 1 to 4 do
31750: LD_ADDR_VAR 0 3
31754: PUSH
31755: DOUBLE
31756: LD_INT 1
31758: DEC
31759: ST_TO_ADDR
31760: LD_INT 4
31762: PUSH
31763: FOR_TO
31764: IFFALSE 31785
// SetSkill ( i , j , 10 ) ;
31766: LD_VAR 0 1
31770: PPUSH
31771: LD_VAR 0 3
31775: PPUSH
31776: LD_INT 10
31778: PPUSH
31779: CALL_OW 237
31783: GO 31763
31785: POP
31786: POP
31787: GO 31747
31789: POP
31790: POP
// end ;
31791: PPOPN 3
31793: END
// every 0 0$1 trigger s30 do var i , tmp ;
31794: LD_EXP 102
31798: IFFALSE 31867
31800: GO 31802
31802: DISABLE
31803: LD_INT 0
31805: PPUSH
31806: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31807: LD_ADDR_VAR 0 2
31811: PUSH
31812: LD_INT 22
31814: PUSH
31815: LD_OWVAR 2
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PPUSH
31824: CALL_OW 69
31828: ST_TO_ADDR
// if not tmp then
31829: LD_VAR 0 2
31833: NOT
31834: IFFALSE 31838
// exit ;
31836: GO 31867
// for i in tmp do
31838: LD_ADDR_VAR 0 1
31842: PUSH
31843: LD_VAR 0 2
31847: PUSH
31848: FOR_IN
31849: IFFALSE 31865
// SetLives ( i , 300 ) ;
31851: LD_VAR 0 1
31855: PPUSH
31856: LD_INT 300
31858: PPUSH
31859: CALL_OW 234
31863: GO 31848
31865: POP
31866: POP
// end ;
31867: PPOPN 2
31869: END
// every 0 0$1 trigger s60 do var i , tmp ;
31870: LD_EXP 103
31874: IFFALSE 31943
31876: GO 31878
31878: DISABLE
31879: LD_INT 0
31881: PPUSH
31882: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31883: LD_ADDR_VAR 0 2
31887: PUSH
31888: LD_INT 22
31890: PUSH
31891: LD_OWVAR 2
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: PPUSH
31900: CALL_OW 69
31904: ST_TO_ADDR
// if not tmp then
31905: LD_VAR 0 2
31909: NOT
31910: IFFALSE 31914
// exit ;
31912: GO 31943
// for i in tmp do
31914: LD_ADDR_VAR 0 1
31918: PUSH
31919: LD_VAR 0 2
31923: PUSH
31924: FOR_IN
31925: IFFALSE 31941
// SetLives ( i , 600 ) ;
31927: LD_VAR 0 1
31931: PPUSH
31932: LD_INT 600
31934: PPUSH
31935: CALL_OW 234
31939: GO 31924
31941: POP
31942: POP
// end ;
31943: PPOPN 2
31945: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31946: LD_INT 0
31948: PPUSH
// case cmd of 301 :
31949: LD_VAR 0 1
31953: PUSH
31954: LD_INT 301
31956: DOUBLE
31957: EQUAL
31958: IFTRUE 31962
31960: GO 31994
31962: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31963: LD_VAR 0 6
31967: PPUSH
31968: LD_VAR 0 7
31972: PPUSH
31973: LD_VAR 0 8
31977: PPUSH
31978: LD_VAR 0 4
31982: PPUSH
31983: LD_VAR 0 5
31987: PPUSH
31988: CALL 33203 0 5
31992: GO 32115
31994: LD_INT 302
31996: DOUBLE
31997: EQUAL
31998: IFTRUE 32002
32000: GO 32039
32002: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32003: LD_VAR 0 6
32007: PPUSH
32008: LD_VAR 0 7
32012: PPUSH
32013: LD_VAR 0 8
32017: PPUSH
32018: LD_VAR 0 9
32022: PPUSH
32023: LD_VAR 0 4
32027: PPUSH
32028: LD_VAR 0 5
32032: PPUSH
32033: CALL 33294 0 6
32037: GO 32115
32039: LD_INT 303
32041: DOUBLE
32042: EQUAL
32043: IFTRUE 32047
32045: GO 32084
32047: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32048: LD_VAR 0 6
32052: PPUSH
32053: LD_VAR 0 7
32057: PPUSH
32058: LD_VAR 0 8
32062: PPUSH
32063: LD_VAR 0 9
32067: PPUSH
32068: LD_VAR 0 4
32072: PPUSH
32073: LD_VAR 0 5
32077: PPUSH
32078: CALL 32120 0 6
32082: GO 32115
32084: LD_INT 304
32086: DOUBLE
32087: EQUAL
32088: IFTRUE 32092
32090: GO 32114
32092: POP
// hHackTeleport ( unit , x , y ) ; end ;
32093: LD_VAR 0 2
32097: PPUSH
32098: LD_VAR 0 4
32102: PPUSH
32103: LD_VAR 0 5
32107: PPUSH
32108: CALL 33887 0 3
32112: GO 32115
32114: POP
// end ;
32115: LD_VAR 0 12
32119: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32120: LD_INT 0
32122: PPUSH
32123: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32124: LD_VAR 0 1
32128: PUSH
32129: LD_INT 1
32131: LESS
32132: PUSH
32133: LD_VAR 0 1
32137: PUSH
32138: LD_INT 3
32140: GREATER
32141: OR
32142: PUSH
32143: LD_VAR 0 5
32147: PPUSH
32148: LD_VAR 0 6
32152: PPUSH
32153: CALL_OW 428
32157: OR
32158: IFFALSE 32162
// exit ;
32160: GO 32890
// uc_side := your_side ;
32162: LD_ADDR_OWVAR 20
32166: PUSH
32167: LD_OWVAR 2
32171: ST_TO_ADDR
// uc_nation := nation ;
32172: LD_ADDR_OWVAR 21
32176: PUSH
32177: LD_VAR 0 1
32181: ST_TO_ADDR
// bc_level = 1 ;
32182: LD_ADDR_OWVAR 43
32186: PUSH
32187: LD_INT 1
32189: ST_TO_ADDR
// case btype of 1 :
32190: LD_VAR 0 2
32194: PUSH
32195: LD_INT 1
32197: DOUBLE
32198: EQUAL
32199: IFTRUE 32203
32201: GO 32214
32203: POP
// bc_type := b_depot ; 2 :
32204: LD_ADDR_OWVAR 42
32208: PUSH
32209: LD_INT 0
32211: ST_TO_ADDR
32212: GO 32834
32214: LD_INT 2
32216: DOUBLE
32217: EQUAL
32218: IFTRUE 32222
32220: GO 32233
32222: POP
// bc_type := b_warehouse ; 3 :
32223: LD_ADDR_OWVAR 42
32227: PUSH
32228: LD_INT 1
32230: ST_TO_ADDR
32231: GO 32834
32233: LD_INT 3
32235: DOUBLE
32236: EQUAL
32237: IFTRUE 32241
32239: GO 32252
32241: POP
// bc_type := b_lab ; 4 .. 9 :
32242: LD_ADDR_OWVAR 42
32246: PUSH
32247: LD_INT 6
32249: ST_TO_ADDR
32250: GO 32834
32252: LD_INT 4
32254: DOUBLE
32255: GREATEREQUAL
32256: IFFALSE 32264
32258: LD_INT 9
32260: DOUBLE
32261: LESSEQUAL
32262: IFTRUE 32266
32264: GO 32326
32266: POP
// begin bc_type := b_lab_half ;
32267: LD_ADDR_OWVAR 42
32271: PUSH
32272: LD_INT 7
32274: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32275: LD_ADDR_OWVAR 44
32279: PUSH
32280: LD_INT 10
32282: PUSH
32283: LD_INT 11
32285: PUSH
32286: LD_INT 12
32288: PUSH
32289: LD_INT 15
32291: PUSH
32292: LD_INT 14
32294: PUSH
32295: LD_INT 13
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: PUSH
32306: LD_VAR 0 2
32310: PUSH
32311: LD_INT 3
32313: MINUS
32314: ARRAY
32315: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32316: LD_ADDR_OWVAR 45
32320: PUSH
32321: LD_INT 9
32323: ST_TO_ADDR
// end ; 10 .. 13 :
32324: GO 32834
32326: LD_INT 10
32328: DOUBLE
32329: GREATEREQUAL
32330: IFFALSE 32338
32332: LD_INT 13
32334: DOUBLE
32335: LESSEQUAL
32336: IFTRUE 32340
32338: GO 32417
32340: POP
// begin bc_type := b_lab_full ;
32341: LD_ADDR_OWVAR 42
32345: PUSH
32346: LD_INT 8
32348: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32349: LD_ADDR_OWVAR 44
32353: PUSH
32354: LD_INT 10
32356: PUSH
32357: LD_INT 12
32359: PUSH
32360: LD_INT 14
32362: PUSH
32363: LD_INT 13
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: PUSH
32372: LD_VAR 0 2
32376: PUSH
32377: LD_INT 9
32379: MINUS
32380: ARRAY
32381: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32382: LD_ADDR_OWVAR 45
32386: PUSH
32387: LD_INT 11
32389: PUSH
32390: LD_INT 15
32392: PUSH
32393: LD_INT 12
32395: PUSH
32396: LD_INT 15
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: PUSH
32405: LD_VAR 0 2
32409: PUSH
32410: LD_INT 9
32412: MINUS
32413: ARRAY
32414: ST_TO_ADDR
// end ; 14 :
32415: GO 32834
32417: LD_INT 14
32419: DOUBLE
32420: EQUAL
32421: IFTRUE 32425
32423: GO 32436
32425: POP
// bc_type := b_workshop ; 15 :
32426: LD_ADDR_OWVAR 42
32430: PUSH
32431: LD_INT 2
32433: ST_TO_ADDR
32434: GO 32834
32436: LD_INT 15
32438: DOUBLE
32439: EQUAL
32440: IFTRUE 32444
32442: GO 32455
32444: POP
// bc_type := b_factory ; 16 :
32445: LD_ADDR_OWVAR 42
32449: PUSH
32450: LD_INT 3
32452: ST_TO_ADDR
32453: GO 32834
32455: LD_INT 16
32457: DOUBLE
32458: EQUAL
32459: IFTRUE 32463
32461: GO 32474
32463: POP
// bc_type := b_ext_gun ; 17 :
32464: LD_ADDR_OWVAR 42
32468: PUSH
32469: LD_INT 17
32471: ST_TO_ADDR
32472: GO 32834
32474: LD_INT 17
32476: DOUBLE
32477: EQUAL
32478: IFTRUE 32482
32480: GO 32510
32482: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32483: LD_ADDR_OWVAR 42
32487: PUSH
32488: LD_INT 19
32490: PUSH
32491: LD_INT 23
32493: PUSH
32494: LD_INT 19
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: LIST
32501: PUSH
32502: LD_VAR 0 1
32506: ARRAY
32507: ST_TO_ADDR
32508: GO 32834
32510: LD_INT 18
32512: DOUBLE
32513: EQUAL
32514: IFTRUE 32518
32516: GO 32529
32518: POP
// bc_type := b_ext_radar ; 19 :
32519: LD_ADDR_OWVAR 42
32523: PUSH
32524: LD_INT 20
32526: ST_TO_ADDR
32527: GO 32834
32529: LD_INT 19
32531: DOUBLE
32532: EQUAL
32533: IFTRUE 32537
32535: GO 32548
32537: POP
// bc_type := b_ext_radio ; 20 :
32538: LD_ADDR_OWVAR 42
32542: PUSH
32543: LD_INT 22
32545: ST_TO_ADDR
32546: GO 32834
32548: LD_INT 20
32550: DOUBLE
32551: EQUAL
32552: IFTRUE 32556
32554: GO 32567
32556: POP
// bc_type := b_ext_siberium ; 21 :
32557: LD_ADDR_OWVAR 42
32561: PUSH
32562: LD_INT 21
32564: ST_TO_ADDR
32565: GO 32834
32567: LD_INT 21
32569: DOUBLE
32570: EQUAL
32571: IFTRUE 32575
32573: GO 32586
32575: POP
// bc_type := b_ext_computer ; 22 :
32576: LD_ADDR_OWVAR 42
32580: PUSH
32581: LD_INT 24
32583: ST_TO_ADDR
32584: GO 32834
32586: LD_INT 22
32588: DOUBLE
32589: EQUAL
32590: IFTRUE 32594
32592: GO 32605
32594: POP
// bc_type := b_ext_track ; 23 :
32595: LD_ADDR_OWVAR 42
32599: PUSH
32600: LD_INT 16
32602: ST_TO_ADDR
32603: GO 32834
32605: LD_INT 23
32607: DOUBLE
32608: EQUAL
32609: IFTRUE 32613
32611: GO 32624
32613: POP
// bc_type := b_ext_laser ; 24 :
32614: LD_ADDR_OWVAR 42
32618: PUSH
32619: LD_INT 25
32621: ST_TO_ADDR
32622: GO 32834
32624: LD_INT 24
32626: DOUBLE
32627: EQUAL
32628: IFTRUE 32632
32630: GO 32643
32632: POP
// bc_type := b_control_tower ; 25 :
32633: LD_ADDR_OWVAR 42
32637: PUSH
32638: LD_INT 36
32640: ST_TO_ADDR
32641: GO 32834
32643: LD_INT 25
32645: DOUBLE
32646: EQUAL
32647: IFTRUE 32651
32649: GO 32662
32651: POP
// bc_type := b_breastwork ; 26 :
32652: LD_ADDR_OWVAR 42
32656: PUSH
32657: LD_INT 31
32659: ST_TO_ADDR
32660: GO 32834
32662: LD_INT 26
32664: DOUBLE
32665: EQUAL
32666: IFTRUE 32670
32668: GO 32681
32670: POP
// bc_type := b_bunker ; 27 :
32671: LD_ADDR_OWVAR 42
32675: PUSH
32676: LD_INT 32
32678: ST_TO_ADDR
32679: GO 32834
32681: LD_INT 27
32683: DOUBLE
32684: EQUAL
32685: IFTRUE 32689
32687: GO 32700
32689: POP
// bc_type := b_turret ; 28 :
32690: LD_ADDR_OWVAR 42
32694: PUSH
32695: LD_INT 33
32697: ST_TO_ADDR
32698: GO 32834
32700: LD_INT 28
32702: DOUBLE
32703: EQUAL
32704: IFTRUE 32708
32706: GO 32719
32708: POP
// bc_type := b_armoury ; 29 :
32709: LD_ADDR_OWVAR 42
32713: PUSH
32714: LD_INT 4
32716: ST_TO_ADDR
32717: GO 32834
32719: LD_INT 29
32721: DOUBLE
32722: EQUAL
32723: IFTRUE 32727
32725: GO 32738
32727: POP
// bc_type := b_barracks ; 30 :
32728: LD_ADDR_OWVAR 42
32732: PUSH
32733: LD_INT 5
32735: ST_TO_ADDR
32736: GO 32834
32738: LD_INT 30
32740: DOUBLE
32741: EQUAL
32742: IFTRUE 32746
32744: GO 32757
32746: POP
// bc_type := b_solar_power ; 31 :
32747: LD_ADDR_OWVAR 42
32751: PUSH
32752: LD_INT 27
32754: ST_TO_ADDR
32755: GO 32834
32757: LD_INT 31
32759: DOUBLE
32760: EQUAL
32761: IFTRUE 32765
32763: GO 32776
32765: POP
// bc_type := b_oil_power ; 32 :
32766: LD_ADDR_OWVAR 42
32770: PUSH
32771: LD_INT 26
32773: ST_TO_ADDR
32774: GO 32834
32776: LD_INT 32
32778: DOUBLE
32779: EQUAL
32780: IFTRUE 32784
32782: GO 32795
32784: POP
// bc_type := b_siberite_power ; 33 :
32785: LD_ADDR_OWVAR 42
32789: PUSH
32790: LD_INT 28
32792: ST_TO_ADDR
32793: GO 32834
32795: LD_INT 33
32797: DOUBLE
32798: EQUAL
32799: IFTRUE 32803
32801: GO 32814
32803: POP
// bc_type := b_oil_mine ; 34 :
32804: LD_ADDR_OWVAR 42
32808: PUSH
32809: LD_INT 29
32811: ST_TO_ADDR
32812: GO 32834
32814: LD_INT 34
32816: DOUBLE
32817: EQUAL
32818: IFTRUE 32822
32820: GO 32833
32822: POP
// bc_type := b_siberite_mine ; end ;
32823: LD_ADDR_OWVAR 42
32827: PUSH
32828: LD_INT 30
32830: ST_TO_ADDR
32831: GO 32834
32833: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32834: LD_ADDR_VAR 0 8
32838: PUSH
32839: LD_VAR 0 5
32843: PPUSH
32844: LD_VAR 0 6
32848: PPUSH
32849: LD_VAR 0 3
32853: PPUSH
32854: CALL_OW 47
32858: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32859: LD_OWVAR 42
32863: PUSH
32864: LD_INT 32
32866: PUSH
32867: LD_INT 33
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: IN
32874: IFFALSE 32890
// PlaceWeaponTurret ( b , weapon ) ;
32876: LD_VAR 0 8
32880: PPUSH
32881: LD_VAR 0 4
32885: PPUSH
32886: CALL_OW 431
// end ;
32890: LD_VAR 0 7
32894: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32895: LD_INT 0
32897: PPUSH
32898: PPUSH
32899: PPUSH
32900: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32901: LD_ADDR_VAR 0 4
32905: PUSH
32906: LD_INT 22
32908: PUSH
32909: LD_OWVAR 2
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 2
32920: PUSH
32921: LD_INT 30
32923: PUSH
32924: LD_INT 0
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PUSH
32931: LD_INT 30
32933: PUSH
32934: LD_INT 1
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: LIST
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PPUSH
32950: CALL_OW 69
32954: ST_TO_ADDR
// if not tmp then
32955: LD_VAR 0 4
32959: NOT
32960: IFFALSE 32964
// exit ;
32962: GO 33023
// for i in tmp do
32964: LD_ADDR_VAR 0 2
32968: PUSH
32969: LD_VAR 0 4
32973: PUSH
32974: FOR_IN
32975: IFFALSE 33021
// for j = 1 to 3 do
32977: LD_ADDR_VAR 0 3
32981: PUSH
32982: DOUBLE
32983: LD_INT 1
32985: DEC
32986: ST_TO_ADDR
32987: LD_INT 3
32989: PUSH
32990: FOR_TO
32991: IFFALSE 33017
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32993: LD_VAR 0 2
32997: PPUSH
32998: CALL_OW 274
33002: PPUSH
33003: LD_VAR 0 3
33007: PPUSH
33008: LD_INT 99999
33010: PPUSH
33011: CALL_OW 277
33015: GO 32990
33017: POP
33018: POP
33019: GO 32974
33021: POP
33022: POP
// end ;
33023: LD_VAR 0 1
33027: RET
// export function hHackSetLevel10 ; var i , j ; begin
33028: LD_INT 0
33030: PPUSH
33031: PPUSH
33032: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33033: LD_ADDR_VAR 0 2
33037: PUSH
33038: LD_INT 21
33040: PUSH
33041: LD_INT 1
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PPUSH
33048: CALL_OW 69
33052: PUSH
33053: FOR_IN
33054: IFFALSE 33106
// if IsSelected ( i ) then
33056: LD_VAR 0 2
33060: PPUSH
33061: CALL_OW 306
33065: IFFALSE 33104
// begin for j := 1 to 4 do
33067: LD_ADDR_VAR 0 3
33071: PUSH
33072: DOUBLE
33073: LD_INT 1
33075: DEC
33076: ST_TO_ADDR
33077: LD_INT 4
33079: PUSH
33080: FOR_TO
33081: IFFALSE 33102
// SetSkill ( i , j , 10 ) ;
33083: LD_VAR 0 2
33087: PPUSH
33088: LD_VAR 0 3
33092: PPUSH
33093: LD_INT 10
33095: PPUSH
33096: CALL_OW 237
33100: GO 33080
33102: POP
33103: POP
// end ;
33104: GO 33053
33106: POP
33107: POP
// end ;
33108: LD_VAR 0 1
33112: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33113: LD_INT 0
33115: PPUSH
33116: PPUSH
33117: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33118: LD_ADDR_VAR 0 2
33122: PUSH
33123: LD_INT 22
33125: PUSH
33126: LD_OWVAR 2
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: LD_INT 21
33137: PUSH
33138: LD_INT 1
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PPUSH
33149: CALL_OW 69
33153: PUSH
33154: FOR_IN
33155: IFFALSE 33196
// begin for j := 1 to 4 do
33157: LD_ADDR_VAR 0 3
33161: PUSH
33162: DOUBLE
33163: LD_INT 1
33165: DEC
33166: ST_TO_ADDR
33167: LD_INT 4
33169: PUSH
33170: FOR_TO
33171: IFFALSE 33192
// SetSkill ( i , j , 10 ) ;
33173: LD_VAR 0 2
33177: PPUSH
33178: LD_VAR 0 3
33182: PPUSH
33183: LD_INT 10
33185: PPUSH
33186: CALL_OW 237
33190: GO 33170
33192: POP
33193: POP
// end ;
33194: GO 33154
33196: POP
33197: POP
// end ;
33198: LD_VAR 0 1
33202: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33203: LD_INT 0
33205: PPUSH
// uc_side := your_side ;
33206: LD_ADDR_OWVAR 20
33210: PUSH
33211: LD_OWVAR 2
33215: ST_TO_ADDR
// uc_nation := nation ;
33216: LD_ADDR_OWVAR 21
33220: PUSH
33221: LD_VAR 0 1
33225: ST_TO_ADDR
// InitHc ;
33226: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33230: LD_INT 0
33232: PPUSH
33233: LD_VAR 0 2
33237: PPUSH
33238: LD_VAR 0 3
33242: PPUSH
33243: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33247: LD_VAR 0 4
33251: PPUSH
33252: LD_VAR 0 5
33256: PPUSH
33257: CALL_OW 428
33261: PUSH
33262: LD_INT 0
33264: EQUAL
33265: IFFALSE 33289
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33267: CALL_OW 44
33271: PPUSH
33272: LD_VAR 0 4
33276: PPUSH
33277: LD_VAR 0 5
33281: PPUSH
33282: LD_INT 1
33284: PPUSH
33285: CALL_OW 48
// end ;
33289: LD_VAR 0 6
33293: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33294: LD_INT 0
33296: PPUSH
33297: PPUSH
// uc_side := your_side ;
33298: LD_ADDR_OWVAR 20
33302: PUSH
33303: LD_OWVAR 2
33307: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33308: LD_VAR 0 1
33312: PUSH
33313: LD_INT 1
33315: PUSH
33316: LD_INT 2
33318: PUSH
33319: LD_INT 3
33321: PUSH
33322: LD_INT 4
33324: PUSH
33325: LD_INT 5
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: IN
33335: IFFALSE 33347
// uc_nation := nation_american else
33337: LD_ADDR_OWVAR 21
33341: PUSH
33342: LD_INT 1
33344: ST_TO_ADDR
33345: GO 33390
// if chassis in [ 11 , 12 , 13 , 14 ] then
33347: LD_VAR 0 1
33351: PUSH
33352: LD_INT 11
33354: PUSH
33355: LD_INT 12
33357: PUSH
33358: LD_INT 13
33360: PUSH
33361: LD_INT 14
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: IN
33370: IFFALSE 33382
// uc_nation := nation_arabian else
33372: LD_ADDR_OWVAR 21
33376: PUSH
33377: LD_INT 2
33379: ST_TO_ADDR
33380: GO 33390
// uc_nation := nation_russian ;
33382: LD_ADDR_OWVAR 21
33386: PUSH
33387: LD_INT 3
33389: ST_TO_ADDR
// vc_chassis := chassis ;
33390: LD_ADDR_OWVAR 37
33394: PUSH
33395: LD_VAR 0 1
33399: ST_TO_ADDR
// vc_engine := engine ;
33400: LD_ADDR_OWVAR 39
33404: PUSH
33405: LD_VAR 0 2
33409: ST_TO_ADDR
// vc_control := control ;
33410: LD_ADDR_OWVAR 38
33414: PUSH
33415: LD_VAR 0 3
33419: ST_TO_ADDR
// vc_weapon := weapon ;
33420: LD_ADDR_OWVAR 40
33424: PUSH
33425: LD_VAR 0 4
33429: ST_TO_ADDR
// un := CreateVehicle ;
33430: LD_ADDR_VAR 0 8
33434: PUSH
33435: CALL_OW 45
33439: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33440: LD_VAR 0 8
33444: PPUSH
33445: LD_INT 0
33447: PPUSH
33448: LD_INT 5
33450: PPUSH
33451: CALL_OW 12
33455: PPUSH
33456: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33460: LD_VAR 0 8
33464: PPUSH
33465: LD_VAR 0 5
33469: PPUSH
33470: LD_VAR 0 6
33474: PPUSH
33475: LD_INT 1
33477: PPUSH
33478: CALL_OW 48
// end ;
33482: LD_VAR 0 7
33486: RET
// export hInvincible ; every 1 do
33487: GO 33489
33489: DISABLE
// hInvincible := [ ] ;
33490: LD_ADDR_EXP 104
33494: PUSH
33495: EMPTY
33496: ST_TO_ADDR
33497: END
// every 10 do var i ;
33498: GO 33500
33500: DISABLE
33501: LD_INT 0
33503: PPUSH
// begin enable ;
33504: ENABLE
// if not hInvincible then
33505: LD_EXP 104
33509: NOT
33510: IFFALSE 33514
// exit ;
33512: GO 33558
// for i in hInvincible do
33514: LD_ADDR_VAR 0 1
33518: PUSH
33519: LD_EXP 104
33523: PUSH
33524: FOR_IN
33525: IFFALSE 33556
// if GetLives ( i ) < 1000 then
33527: LD_VAR 0 1
33531: PPUSH
33532: CALL_OW 256
33536: PUSH
33537: LD_INT 1000
33539: LESS
33540: IFFALSE 33554
// SetLives ( i , 1000 ) ;
33542: LD_VAR 0 1
33546: PPUSH
33547: LD_INT 1000
33549: PPUSH
33550: CALL_OW 234
33554: GO 33524
33556: POP
33557: POP
// end ;
33558: PPOPN 1
33560: END
// export function hHackInvincible ; var i ; begin
33561: LD_INT 0
33563: PPUSH
33564: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33565: LD_ADDR_VAR 0 2
33569: PUSH
33570: LD_INT 2
33572: PUSH
33573: LD_INT 21
33575: PUSH
33576: LD_INT 1
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PUSH
33583: LD_INT 21
33585: PUSH
33586: LD_INT 2
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: LIST
33597: PPUSH
33598: CALL_OW 69
33602: PUSH
33603: FOR_IN
33604: IFFALSE 33665
// if IsSelected ( i ) then
33606: LD_VAR 0 2
33610: PPUSH
33611: CALL_OW 306
33615: IFFALSE 33663
// begin if i in hInvincible then
33617: LD_VAR 0 2
33621: PUSH
33622: LD_EXP 104
33626: IN
33627: IFFALSE 33647
// hInvincible := hInvincible diff i else
33629: LD_ADDR_EXP 104
33633: PUSH
33634: LD_EXP 104
33638: PUSH
33639: LD_VAR 0 2
33643: DIFF
33644: ST_TO_ADDR
33645: GO 33663
// hInvincible := hInvincible union i ;
33647: LD_ADDR_EXP 104
33651: PUSH
33652: LD_EXP 104
33656: PUSH
33657: LD_VAR 0 2
33661: UNION
33662: ST_TO_ADDR
// end ;
33663: GO 33603
33665: POP
33666: POP
// end ;
33667: LD_VAR 0 1
33671: RET
// export function hHackInvisible ; var i , j ; begin
33672: LD_INT 0
33674: PPUSH
33675: PPUSH
33676: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33677: LD_ADDR_VAR 0 2
33681: PUSH
33682: LD_INT 21
33684: PUSH
33685: LD_INT 1
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PPUSH
33692: CALL_OW 69
33696: PUSH
33697: FOR_IN
33698: IFFALSE 33722
// if IsSelected ( i ) then
33700: LD_VAR 0 2
33704: PPUSH
33705: CALL_OW 306
33709: IFFALSE 33720
// ComForceInvisible ( i ) ;
33711: LD_VAR 0 2
33715: PPUSH
33716: CALL_OW 496
33720: GO 33697
33722: POP
33723: POP
// end ;
33724: LD_VAR 0 1
33728: RET
// export function hHackChangeYourSide ; begin
33729: LD_INT 0
33731: PPUSH
// if your_side = 8 then
33732: LD_OWVAR 2
33736: PUSH
33737: LD_INT 8
33739: EQUAL
33740: IFFALSE 33752
// your_side := 0 else
33742: LD_ADDR_OWVAR 2
33746: PUSH
33747: LD_INT 0
33749: ST_TO_ADDR
33750: GO 33766
// your_side := your_side + 1 ;
33752: LD_ADDR_OWVAR 2
33756: PUSH
33757: LD_OWVAR 2
33761: PUSH
33762: LD_INT 1
33764: PLUS
33765: ST_TO_ADDR
// end ;
33766: LD_VAR 0 1
33770: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33771: LD_INT 0
33773: PPUSH
33774: PPUSH
33775: PPUSH
// for i in all_units do
33776: LD_ADDR_VAR 0 2
33780: PUSH
33781: LD_OWVAR 3
33785: PUSH
33786: FOR_IN
33787: IFFALSE 33865
// if IsSelected ( i ) then
33789: LD_VAR 0 2
33793: PPUSH
33794: CALL_OW 306
33798: IFFALSE 33863
// begin j := GetSide ( i ) ;
33800: LD_ADDR_VAR 0 3
33804: PUSH
33805: LD_VAR 0 2
33809: PPUSH
33810: CALL_OW 255
33814: ST_TO_ADDR
// if j = 8 then
33815: LD_VAR 0 3
33819: PUSH
33820: LD_INT 8
33822: EQUAL
33823: IFFALSE 33835
// j := 0 else
33825: LD_ADDR_VAR 0 3
33829: PUSH
33830: LD_INT 0
33832: ST_TO_ADDR
33833: GO 33849
// j := j + 1 ;
33835: LD_ADDR_VAR 0 3
33839: PUSH
33840: LD_VAR 0 3
33844: PUSH
33845: LD_INT 1
33847: PLUS
33848: ST_TO_ADDR
// SetSide ( i , j ) ;
33849: LD_VAR 0 2
33853: PPUSH
33854: LD_VAR 0 3
33858: PPUSH
33859: CALL_OW 235
// end ;
33863: GO 33786
33865: POP
33866: POP
// end ;
33867: LD_VAR 0 1
33871: RET
// export function hHackFog ; begin
33872: LD_INT 0
33874: PPUSH
// FogOff ( true ) ;
33875: LD_INT 1
33877: PPUSH
33878: CALL_OW 344
// end ;
33882: LD_VAR 0 1
33886: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33887: LD_INT 0
33889: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33890: LD_VAR 0 1
33894: PPUSH
33895: LD_VAR 0 2
33899: PPUSH
33900: LD_VAR 0 3
33904: PPUSH
33905: LD_INT 1
33907: PPUSH
33908: LD_INT 1
33910: PPUSH
33911: CALL_OW 483
// CenterOnXY ( x , y ) ;
33915: LD_VAR 0 2
33919: PPUSH
33920: LD_VAR 0 3
33924: PPUSH
33925: CALL_OW 84
// end ;
33929: LD_VAR 0 4
33933: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33934: LD_INT 0
33936: PPUSH
33937: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33938: LD_VAR 0 1
33942: NOT
33943: PUSH
33944: LD_VAR 0 2
33948: PPUSH
33949: LD_VAR 0 3
33953: PPUSH
33954: CALL_OW 488
33958: NOT
33959: OR
33960: PUSH
33961: LD_VAR 0 1
33965: PPUSH
33966: CALL_OW 266
33970: PUSH
33971: LD_INT 3
33973: NONEQUAL
33974: PUSH
33975: LD_VAR 0 1
33979: PPUSH
33980: CALL_OW 247
33984: PUSH
33985: LD_INT 1
33987: EQUAL
33988: NOT
33989: AND
33990: OR
33991: IFFALSE 33995
// exit ;
33993: GO 34277
// if GetType ( factory ) = unit_human then
33995: LD_VAR 0 1
33999: PPUSH
34000: CALL_OW 247
34004: PUSH
34005: LD_INT 1
34007: EQUAL
34008: IFFALSE 34025
// factory := IsInUnit ( factory ) ;
34010: LD_ADDR_VAR 0 1
34014: PUSH
34015: LD_VAR 0 1
34019: PPUSH
34020: CALL_OW 310
34024: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34025: LD_VAR 0 1
34029: PPUSH
34030: CALL_OW 266
34034: PUSH
34035: LD_INT 3
34037: NONEQUAL
34038: IFFALSE 34042
// exit ;
34040: GO 34277
// for i := 1 to Count ( factoryWaypoints ) do
34042: LD_ADDR_VAR 0 5
34046: PUSH
34047: DOUBLE
34048: LD_INT 1
34050: DEC
34051: ST_TO_ADDR
34052: LD_EXP 105
34056: PPUSH
34057: CALL 42780 0 1
34061: PUSH
34062: FOR_TO
34063: IFFALSE 34225
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
34065: LD_VAR 0 2
34069: PPUSH
34070: LD_VAR 0 3
34074: PPUSH
34075: CALL_OW 428
34079: PUSH
34080: LD_EXP 105
34084: PUSH
34085: LD_VAR 0 5
34089: ARRAY
34090: PUSH
34091: LD_INT 2
34093: ARRAY
34094: EQUAL
34095: IFFALSE 34127
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
34097: LD_ADDR_EXP 105
34101: PUSH
34102: LD_EXP 105
34106: PPUSH
34107: LD_VAR 0 5
34111: PPUSH
34112: CALL_OW 3
34116: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34117: CALL 34282 0 0
// exit ;
34121: POP
34122: POP
34123: GO 34277
// end else
34125: GO 34223
// if factory = factoryWaypoints [ i ] [ 2 ] then
34127: LD_VAR 0 1
34131: PUSH
34132: LD_EXP 105
34136: PUSH
34137: LD_VAR 0 5
34141: ARRAY
34142: PUSH
34143: LD_INT 2
34145: ARRAY
34146: EQUAL
34147: IFFALSE 34223
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
34149: LD_ADDR_EXP 105
34153: PUSH
34154: LD_EXP 105
34158: PPUSH
34159: LD_VAR 0 5
34163: PPUSH
34164: CALL_OW 3
34168: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
34169: LD_ADDR_EXP 105
34173: PUSH
34174: LD_EXP 105
34178: PPUSH
34179: LD_VAR 0 1
34183: PPUSH
34184: CALL_OW 255
34188: PUSH
34189: LD_VAR 0 1
34193: PUSH
34194: LD_VAR 0 2
34198: PUSH
34199: LD_VAR 0 3
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: PPUSH
34210: CALL 78389 0 2
34214: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34215: CALL 34282 0 0
// exit ;
34219: POP
34220: POP
34221: GO 34277
// end ; end ;
34223: GO 34062
34225: POP
34226: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
34227: LD_ADDR_EXP 105
34231: PUSH
34232: LD_EXP 105
34236: PPUSH
34237: LD_VAR 0 1
34241: PPUSH
34242: CALL_OW 255
34246: PUSH
34247: LD_VAR 0 1
34251: PUSH
34252: LD_VAR 0 2
34256: PUSH
34257: LD_VAR 0 3
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: PPUSH
34268: CALL 78389 0 2
34272: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34273: CALL 34282 0 0
// end ;
34277: LD_VAR 0 4
34281: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34282: LD_INT 0
34284: PPUSH
34285: PPUSH
34286: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34287: LD_STRING resetFactoryWaypoint();
34289: PPUSH
34290: CALL_OW 559
// if factoryWaypoints then
34294: LD_EXP 105
34298: IFFALSE 34419
// begin list := factoryWaypoints ;
34300: LD_ADDR_VAR 0 3
34304: PUSH
34305: LD_EXP 105
34309: ST_TO_ADDR
// for i := 1 to list do
34310: LD_ADDR_VAR 0 2
34314: PUSH
34315: DOUBLE
34316: LD_INT 1
34318: DEC
34319: ST_TO_ADDR
34320: LD_VAR 0 3
34324: PUSH
34325: FOR_TO
34326: IFFALSE 34417
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34328: LD_STRING setFactoryWaypointXY(
34330: PUSH
34331: LD_VAR 0 3
34335: PUSH
34336: LD_VAR 0 2
34340: ARRAY
34341: PUSH
34342: LD_INT 1
34344: ARRAY
34345: STR
34346: PUSH
34347: LD_STRING ,
34349: STR
34350: PUSH
34351: LD_VAR 0 3
34355: PUSH
34356: LD_VAR 0 2
34360: ARRAY
34361: PUSH
34362: LD_INT 2
34364: ARRAY
34365: STR
34366: PUSH
34367: LD_STRING ,
34369: STR
34370: PUSH
34371: LD_VAR 0 3
34375: PUSH
34376: LD_VAR 0 2
34380: ARRAY
34381: PUSH
34382: LD_INT 3
34384: ARRAY
34385: STR
34386: PUSH
34387: LD_STRING ,
34389: STR
34390: PUSH
34391: LD_VAR 0 3
34395: PUSH
34396: LD_VAR 0 2
34400: ARRAY
34401: PUSH
34402: LD_INT 4
34404: ARRAY
34405: STR
34406: PUSH
34407: LD_STRING )
34409: STR
34410: PPUSH
34411: CALL_OW 559
34415: GO 34325
34417: POP
34418: POP
// end ; end ;
34419: LD_VAR 0 1
34423: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34424: LD_INT 0
34426: PPUSH
// if HexInfo ( x , y ) = warehouse then
34427: LD_VAR 0 2
34431: PPUSH
34432: LD_VAR 0 3
34436: PPUSH
34437: CALL_OW 428
34441: PUSH
34442: LD_VAR 0 1
34446: EQUAL
34447: IFFALSE 34474
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34449: LD_ADDR_EXP 106
34453: PUSH
34454: LD_EXP 106
34458: PPUSH
34459: LD_VAR 0 1
34463: PPUSH
34464: LD_INT 0
34466: PPUSH
34467: CALL_OW 1
34471: ST_TO_ADDR
34472: GO 34525
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34474: LD_ADDR_EXP 106
34478: PUSH
34479: LD_EXP 106
34483: PPUSH
34484: LD_VAR 0 1
34488: PPUSH
34489: LD_VAR 0 1
34493: PPUSH
34494: CALL_OW 255
34498: PUSH
34499: LD_VAR 0 1
34503: PUSH
34504: LD_VAR 0 2
34508: PUSH
34509: LD_VAR 0 3
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: PPUSH
34520: CALL_OW 1
34524: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34525: CALL 34534 0 0
// end ;
34529: LD_VAR 0 4
34533: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34534: LD_INT 0
34536: PPUSH
34537: PPUSH
34538: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34539: LD_STRING resetWarehouseGatheringPoints();
34541: PPUSH
34542: CALL_OW 559
// if warehouseGatheringPoints then
34546: LD_EXP 106
34550: IFFALSE 34676
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34552: LD_ADDR_VAR 0 3
34556: PUSH
34557: LD_EXP 106
34561: PPUSH
34562: CALL 82151 0 1
34566: ST_TO_ADDR
// for i := 1 to list do
34567: LD_ADDR_VAR 0 2
34571: PUSH
34572: DOUBLE
34573: LD_INT 1
34575: DEC
34576: ST_TO_ADDR
34577: LD_VAR 0 3
34581: PUSH
34582: FOR_TO
34583: IFFALSE 34674
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34585: LD_STRING setWarehouseGatheringPointXY(
34587: PUSH
34588: LD_VAR 0 3
34592: PUSH
34593: LD_VAR 0 2
34597: ARRAY
34598: PUSH
34599: LD_INT 1
34601: ARRAY
34602: STR
34603: PUSH
34604: LD_STRING ,
34606: STR
34607: PUSH
34608: LD_VAR 0 3
34612: PUSH
34613: LD_VAR 0 2
34617: ARRAY
34618: PUSH
34619: LD_INT 2
34621: ARRAY
34622: STR
34623: PUSH
34624: LD_STRING ,
34626: STR
34627: PUSH
34628: LD_VAR 0 3
34632: PUSH
34633: LD_VAR 0 2
34637: ARRAY
34638: PUSH
34639: LD_INT 3
34641: ARRAY
34642: STR
34643: PUSH
34644: LD_STRING ,
34646: STR
34647: PUSH
34648: LD_VAR 0 3
34652: PUSH
34653: LD_VAR 0 2
34657: ARRAY
34658: PUSH
34659: LD_INT 4
34661: ARRAY
34662: STR
34663: PUSH
34664: LD_STRING )
34666: STR
34667: PPUSH
34668: CALL_OW 559
34672: GO 34582
34674: POP
34675: POP
// end ; end ;
34676: LD_VAR 0 1
34680: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34681: LD_EXP 106
34685: IFFALSE 35370
34687: GO 34689
34689: DISABLE
34690: LD_INT 0
34692: PPUSH
34693: PPUSH
34694: PPUSH
34695: PPUSH
34696: PPUSH
34697: PPUSH
34698: PPUSH
34699: PPUSH
34700: PPUSH
// begin enable ;
34701: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34702: LD_ADDR_VAR 0 3
34706: PUSH
34707: LD_EXP 106
34711: PPUSH
34712: CALL 82151 0 1
34716: ST_TO_ADDR
// if not list then
34717: LD_VAR 0 3
34721: NOT
34722: IFFALSE 34726
// exit ;
34724: GO 35370
// for i := 1 to list do
34726: LD_ADDR_VAR 0 1
34730: PUSH
34731: DOUBLE
34732: LD_INT 1
34734: DEC
34735: ST_TO_ADDR
34736: LD_VAR 0 3
34740: PUSH
34741: FOR_TO
34742: IFFALSE 35368
// begin depot := list [ i ] [ 2 ] ;
34744: LD_ADDR_VAR 0 8
34748: PUSH
34749: LD_VAR 0 3
34753: PUSH
34754: LD_VAR 0 1
34758: ARRAY
34759: PUSH
34760: LD_INT 2
34762: ARRAY
34763: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34764: LD_ADDR_VAR 0 5
34768: PUSH
34769: LD_VAR 0 3
34773: PUSH
34774: LD_VAR 0 1
34778: ARRAY
34779: PUSH
34780: LD_INT 1
34782: ARRAY
34783: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34784: LD_VAR 0 8
34788: PPUSH
34789: CALL_OW 301
34793: PUSH
34794: LD_VAR 0 5
34798: PUSH
34799: LD_VAR 0 8
34803: PPUSH
34804: CALL_OW 255
34808: NONEQUAL
34809: OR
34810: IFFALSE 34839
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34812: LD_ADDR_EXP 106
34816: PUSH
34817: LD_EXP 106
34821: PPUSH
34822: LD_VAR 0 8
34826: PPUSH
34827: LD_INT 0
34829: PPUSH
34830: CALL_OW 1
34834: ST_TO_ADDR
// exit ;
34835: POP
34836: POP
34837: GO 35370
// end ; x := list [ i ] [ 3 ] ;
34839: LD_ADDR_VAR 0 6
34843: PUSH
34844: LD_VAR 0 3
34848: PUSH
34849: LD_VAR 0 1
34853: ARRAY
34854: PUSH
34855: LD_INT 3
34857: ARRAY
34858: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34859: LD_ADDR_VAR 0 7
34863: PUSH
34864: LD_VAR 0 3
34868: PUSH
34869: LD_VAR 0 1
34873: ARRAY
34874: PUSH
34875: LD_INT 4
34877: ARRAY
34878: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34879: LD_ADDR_VAR 0 9
34883: PUSH
34884: LD_VAR 0 6
34888: PPUSH
34889: LD_VAR 0 7
34893: PPUSH
34894: LD_INT 16
34896: PPUSH
34897: CALL 80735 0 3
34901: ST_TO_ADDR
// if not cratesNearbyPoint then
34902: LD_VAR 0 9
34906: NOT
34907: IFFALSE 34913
// exit ;
34909: POP
34910: POP
34911: GO 35370
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34913: LD_ADDR_VAR 0 4
34917: PUSH
34918: LD_INT 22
34920: PUSH
34921: LD_VAR 0 5
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_INT 3
34932: PUSH
34933: LD_INT 60
34935: PUSH
34936: EMPTY
34937: LIST
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 91
34945: PUSH
34946: LD_VAR 0 8
34950: PUSH
34951: LD_INT 6
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: LIST
34958: PUSH
34959: LD_INT 2
34961: PUSH
34962: LD_INT 25
34964: PUSH
34965: LD_INT 2
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 25
34974: PUSH
34975: LD_INT 16
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: LIST
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: PPUSH
34993: CALL_OW 69
34997: PUSH
34998: LD_VAR 0 8
35002: PPUSH
35003: CALL_OW 313
35007: PPUSH
35008: LD_INT 3
35010: PUSH
35011: LD_INT 60
35013: PUSH
35014: EMPTY
35015: LIST
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: LD_INT 2
35023: PUSH
35024: LD_INT 25
35026: PUSH
35027: LD_INT 2
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: PUSH
35034: LD_INT 25
35036: PUSH
35037: LD_INT 16
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: LIST
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PPUSH
35053: CALL_OW 72
35057: UNION
35058: ST_TO_ADDR
// if tmp then
35059: LD_VAR 0 4
35063: IFFALSE 35143
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35065: LD_ADDR_VAR 0 4
35069: PUSH
35070: LD_VAR 0 4
35074: PPUSH
35075: LD_INT 3
35077: PPUSH
35078: CALL 78704 0 2
35082: ST_TO_ADDR
// for j in tmp do
35083: LD_ADDR_VAR 0 2
35087: PUSH
35088: LD_VAR 0 4
35092: PUSH
35093: FOR_IN
35094: IFFALSE 35137
// begin if IsInUnit ( j ) then
35096: LD_VAR 0 2
35100: PPUSH
35101: CALL_OW 310
35105: IFFALSE 35116
// ComExit ( j ) ;
35107: LD_VAR 0 2
35111: PPUSH
35112: CALL 78787 0 1
// AddComCollect ( j , x , y ) ;
35116: LD_VAR 0 2
35120: PPUSH
35121: LD_VAR 0 6
35125: PPUSH
35126: LD_VAR 0 7
35130: PPUSH
35131: CALL_OW 177
// end ;
35135: GO 35093
35137: POP
35138: POP
// exit ;
35139: POP
35140: POP
35141: GO 35370
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35143: LD_ADDR_VAR 0 4
35147: PUSH
35148: LD_INT 22
35150: PUSH
35151: LD_VAR 0 5
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PUSH
35160: LD_INT 91
35162: PUSH
35163: LD_VAR 0 8
35167: PUSH
35168: LD_INT 8
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: LIST
35175: PUSH
35176: LD_INT 2
35178: PUSH
35179: LD_INT 34
35181: PUSH
35182: LD_INT 12
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PUSH
35189: LD_INT 34
35191: PUSH
35192: LD_INT 51
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: PUSH
35199: LD_INT 34
35201: PUSH
35202: LD_INT 32
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: LD_INT 34
35211: PUSH
35212: LD_INT 89
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: LIST
35230: PPUSH
35231: CALL_OW 69
35235: ST_TO_ADDR
// if tmp then
35236: LD_VAR 0 4
35240: IFFALSE 35366
// begin for j in tmp do
35242: LD_ADDR_VAR 0 2
35246: PUSH
35247: LD_VAR 0 4
35251: PUSH
35252: FOR_IN
35253: IFFALSE 35364
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35255: LD_VAR 0 2
35259: PPUSH
35260: CALL_OW 262
35264: PUSH
35265: LD_INT 3
35267: EQUAL
35268: PUSH
35269: LD_VAR 0 2
35273: PPUSH
35274: CALL_OW 261
35278: PUSH
35279: LD_INT 20
35281: GREATER
35282: OR
35283: PUSH
35284: LD_VAR 0 2
35288: PPUSH
35289: CALL_OW 314
35293: NOT
35294: AND
35295: PUSH
35296: LD_VAR 0 2
35300: PPUSH
35301: CALL_OW 263
35305: PUSH
35306: LD_INT 1
35308: NONEQUAL
35309: PUSH
35310: LD_VAR 0 2
35314: PPUSH
35315: CALL_OW 311
35319: OR
35320: AND
35321: IFFALSE 35362
// begin ComCollect ( j , x , y ) ;
35323: LD_VAR 0 2
35327: PPUSH
35328: LD_VAR 0 6
35332: PPUSH
35333: LD_VAR 0 7
35337: PPUSH
35338: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35342: LD_VAR 0 2
35346: PPUSH
35347: LD_VAR 0 8
35351: PPUSH
35352: CALL_OW 172
// exit ;
35356: POP
35357: POP
35358: POP
35359: POP
35360: GO 35370
// end ;
35362: GO 35252
35364: POP
35365: POP
// end ; end ;
35366: GO 34741
35368: POP
35369: POP
// end ; end_of_file
35370: PPOPN 9
35372: END
// export function SOS_UnitDestroyed ( un ) ; begin
35373: LD_INT 0
35375: PPUSH
// ComRadiation ( un ) ;
35376: LD_VAR 0 1
35380: PPUSH
35381: CALL 36362 0 1
// end ;
35385: LD_VAR 0 2
35389: RET
// export function SOS_UnitKamikazed ( un ) ; begin
35390: LD_INT 0
35392: PPUSH
// ComRadiation ( un ) ;
35393: LD_VAR 0 1
35397: PPUSH
35398: CALL 36362 0 1
// end ;
35402: LD_VAR 0 2
35406: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35407: LD_INT 0
35409: PPUSH
// end ;
35410: LD_VAR 0 4
35414: RET
// export function SOS_Command ( cmd ) ; begin
35415: LD_INT 0
35417: PPUSH
// end ;
35418: LD_VAR 0 2
35422: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35423: LD_INT 0
35425: PPUSH
// end ;
35426: LD_VAR 0 6
35430: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
35431: LD_INT 0
35433: PPUSH
35434: PPUSH
35435: PPUSH
35436: PPUSH
35437: PPUSH
// if not vehicle or not factory then
35438: LD_VAR 0 1
35442: NOT
35443: PUSH
35444: LD_VAR 0 2
35448: NOT
35449: OR
35450: IFFALSE 35454
// exit ;
35452: GO 35953
// if not factoryWaypoints then
35454: LD_EXP 105
35458: NOT
35459: IFFALSE 35463
// exit ;
35461: GO 35953
// for i := 1 to Count ( factoryWaypoints ) do
35463: LD_ADDR_VAR 0 4
35467: PUSH
35468: DOUBLE
35469: LD_INT 1
35471: DEC
35472: ST_TO_ADDR
35473: LD_EXP 105
35477: PPUSH
35478: CALL 42780 0 1
35482: PUSH
35483: FOR_TO
35484: IFFALSE 35951
// if factoryWaypoints [ i ] [ 2 ] = factory then
35486: LD_EXP 105
35490: PUSH
35491: LD_VAR 0 4
35495: ARRAY
35496: PUSH
35497: LD_INT 2
35499: ARRAY
35500: PUSH
35501: LD_VAR 0 2
35505: EQUAL
35506: IFFALSE 35949
// begin if GetControl ( vehicle ) = control_manual then
35508: LD_VAR 0 1
35512: PPUSH
35513: CALL_OW 263
35517: PUSH
35518: LD_INT 1
35520: EQUAL
35521: IFFALSE 35832
// begin driver := IsDrivenBy ( vehicle ) ;
35523: LD_ADDR_VAR 0 6
35527: PUSH
35528: LD_VAR 0 1
35532: PPUSH
35533: CALL_OW 311
35537: ST_TO_ADDR
// tag := GetTag ( driver ) ;
35538: LD_ADDR_VAR 0 5
35542: PUSH
35543: LD_VAR 0 6
35547: PPUSH
35548: CALL_OW 110
35552: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
35553: LD_VAR 0 5
35557: PUSH
35558: LD_INT 501
35560: EQUAL
35561: PUSH
35562: LD_VAR 0 1
35566: PPUSH
35567: CALL_OW 110
35571: PUSH
35572: LD_INT 501
35574: EQUAL
35575: OR
35576: IFFALSE 35582
// exit ;
35578: POP
35579: POP
35580: GO 35953
// if not HasTask ( driver ) then
35582: LD_VAR 0 6
35586: PPUSH
35587: CALL_OW 314
35591: NOT
35592: IFFALSE 35830
// begin SetTag ( driver , tDriver ) ;
35594: LD_VAR 0 6
35598: PPUSH
35599: LD_INT 501
35601: PPUSH
35602: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
35606: LD_VAR 0 1
35610: PPUSH
35611: LD_INT 501
35613: PPUSH
35614: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
35618: LD_ADDR_VAR 0 7
35622: PUSH
35623: LD_EXP 105
35627: PUSH
35628: LD_VAR 0 4
35632: ARRAY
35633: PUSH
35634: LD_INT 3
35636: ARRAY
35637: PPUSH
35638: LD_EXP 105
35642: PUSH
35643: LD_VAR 0 4
35647: ARRAY
35648: PUSH
35649: LD_INT 4
35651: ARRAY
35652: PPUSH
35653: CALL_OW 428
35657: ST_TO_ADDR
// if hex then
35658: LD_VAR 0 7
35662: IFFALSE 35680
// ComMoveUnit ( driver , hex ) else
35664: LD_VAR 0 6
35668: PPUSH
35669: LD_VAR 0 7
35673: PPUSH
35674: CALL_OW 112
35678: GO 35719
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
35680: LD_VAR 0 6
35684: PPUSH
35685: LD_EXP 105
35689: PUSH
35690: LD_VAR 0 4
35694: ARRAY
35695: PUSH
35696: LD_INT 3
35698: ARRAY
35699: PPUSH
35700: LD_EXP 105
35704: PUSH
35705: LD_VAR 0 4
35709: ARRAY
35710: PUSH
35711: LD_INT 4
35713: ARRAY
35714: PPUSH
35715: CALL_OW 111
// AddComExitVehicle ( driver ) ;
35719: LD_VAR 0 6
35723: PPUSH
35724: CALL_OW 181
// if Multiplayer then
35728: LD_OWVAR 4
35732: IFFALSE 35781
// begin repeat wait ( 10 ) ;
35734: LD_INT 10
35736: PPUSH
35737: CALL_OW 67
// until not IsInUnit ( driver ) ;
35741: LD_VAR 0 6
35745: PPUSH
35746: CALL_OW 310
35750: NOT
35751: IFFALSE 35734
// if not HasTask ( driver ) then
35753: LD_VAR 0 6
35757: PPUSH
35758: CALL_OW 314
35762: NOT
35763: IFFALSE 35779
// ComEnterUnit ( driver , factory ) ;
35765: LD_VAR 0 6
35769: PPUSH
35770: LD_VAR 0 2
35774: PPUSH
35775: CALL_OW 120
// end else
35779: GO 35795
// AddComEnterUnit ( driver , factory ) ;
35781: LD_VAR 0 6
35785: PPUSH
35786: LD_VAR 0 2
35790: PPUSH
35791: CALL_OW 180
// wait ( 0 0$1 ) ;
35795: LD_INT 35
35797: PPUSH
35798: CALL_OW 67
// SetTag ( driver , tag ) ;
35802: LD_VAR 0 6
35806: PPUSH
35807: LD_VAR 0 5
35811: PPUSH
35812: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
35816: LD_VAR 0 1
35820: PPUSH
35821: LD_INT 0
35823: PPUSH
35824: CALL_OW 109
// break ;
35828: GO 35951
// end ; end else
35830: GO 35949
// if GetControl ( vehicle ) = control_remote then
35832: LD_VAR 0 1
35836: PPUSH
35837: CALL_OW 263
35841: PUSH
35842: LD_INT 2
35844: EQUAL
35845: IFFALSE 35908
// begin wait ( 0 0$2 ) ;
35847: LD_INT 70
35849: PPUSH
35850: CALL_OW 67
// if Connect ( vehicle ) then
35854: LD_VAR 0 1
35858: PPUSH
35859: CALL 48986 0 1
35863: IFFALSE 35904
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
35865: LD_VAR 0 1
35869: PPUSH
35870: LD_EXP 105
35874: PUSH
35875: LD_VAR 0 4
35879: ARRAY
35880: PUSH
35881: LD_INT 3
35883: ARRAY
35884: PPUSH
35885: LD_EXP 105
35889: PUSH
35890: LD_VAR 0 4
35894: ARRAY
35895: PUSH
35896: LD_INT 4
35898: ARRAY
35899: PPUSH
35900: CALL_OW 171
// break ;
35904: GO 35951
// end else
35906: GO 35949
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
35908: LD_VAR 0 1
35912: PPUSH
35913: LD_EXP 105
35917: PUSH
35918: LD_VAR 0 4
35922: ARRAY
35923: PUSH
35924: LD_INT 3
35926: ARRAY
35927: PPUSH
35928: LD_EXP 105
35932: PUSH
35933: LD_VAR 0 4
35937: ARRAY
35938: PUSH
35939: LD_INT 4
35941: ARRAY
35942: PPUSH
35943: CALL_OW 171
// break ;
35947: GO 35951
// end ; end ;
35949: GO 35483
35951: POP
35952: POP
// end ;
35953: LD_VAR 0 3
35957: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35958: LD_INT 0
35960: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35961: LD_VAR 0 1
35965: PUSH
35966: LD_INT 250
35968: EQUAL
35969: PUSH
35970: LD_VAR 0 2
35974: PPUSH
35975: CALL_OW 264
35979: PUSH
35980: LD_INT 81
35982: EQUAL
35983: AND
35984: IFFALSE 36005
// MinerPlaceMine ( unit , x , y ) ;
35986: LD_VAR 0 2
35990: PPUSH
35991: LD_VAR 0 4
35995: PPUSH
35996: LD_VAR 0 5
36000: PPUSH
36001: CALL 39097 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36005: LD_VAR 0 1
36009: PUSH
36010: LD_INT 251
36012: EQUAL
36013: PUSH
36014: LD_VAR 0 2
36018: PPUSH
36019: CALL_OW 264
36023: PUSH
36024: LD_INT 81
36026: EQUAL
36027: AND
36028: IFFALSE 36049
// MinerDetonateMine ( unit , x , y ) ;
36030: LD_VAR 0 2
36034: PPUSH
36035: LD_VAR 0 4
36039: PPUSH
36040: LD_VAR 0 5
36044: PPUSH
36045: CALL 39372 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36049: LD_VAR 0 1
36053: PUSH
36054: LD_INT 252
36056: EQUAL
36057: PUSH
36058: LD_VAR 0 2
36062: PPUSH
36063: CALL_OW 264
36067: PUSH
36068: LD_INT 81
36070: EQUAL
36071: AND
36072: IFFALSE 36093
// MinerCreateMinefield ( unit , x , y ) ;
36074: LD_VAR 0 2
36078: PPUSH
36079: LD_VAR 0 4
36083: PPUSH
36084: LD_VAR 0 5
36088: PPUSH
36089: CALL 39789 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36093: LD_VAR 0 1
36097: PUSH
36098: LD_INT 253
36100: EQUAL
36101: PUSH
36102: LD_VAR 0 2
36106: PPUSH
36107: CALL_OW 257
36111: PUSH
36112: LD_INT 5
36114: EQUAL
36115: AND
36116: IFFALSE 36137
// ComBinocular ( unit , x , y ) ;
36118: LD_VAR 0 2
36122: PPUSH
36123: LD_VAR 0 4
36127: PPUSH
36128: LD_VAR 0 5
36132: PPUSH
36133: CALL 40158 0 3
// if selectedUnit then
36137: LD_VAR 0 3
36141: IFFALSE 36197
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36143: LD_VAR 0 1
36147: PUSH
36148: LD_INT 254
36150: EQUAL
36151: PUSH
36152: LD_VAR 0 2
36156: PPUSH
36157: CALL_OW 264
36161: PUSH
36162: LD_INT 99
36164: EQUAL
36165: AND
36166: PUSH
36167: LD_VAR 0 3
36171: PPUSH
36172: CALL_OW 263
36176: PUSH
36177: LD_INT 3
36179: EQUAL
36180: AND
36181: IFFALSE 36197
// HackDestroyVehicle ( unit , selectedUnit ) ;
36183: LD_VAR 0 2
36187: PPUSH
36188: LD_VAR 0 3
36192: PPUSH
36193: CALL 38461 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36197: LD_VAR 0 1
36201: PUSH
36202: LD_INT 255
36204: EQUAL
36205: PUSH
36206: LD_VAR 0 2
36210: PPUSH
36211: CALL_OW 264
36215: PUSH
36216: LD_INT 14
36218: PUSH
36219: LD_INT 53
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: IN
36226: AND
36227: PUSH
36228: LD_VAR 0 4
36232: PPUSH
36233: LD_VAR 0 5
36237: PPUSH
36238: CALL_OW 488
36242: AND
36243: IFFALSE 36267
// CutTreeXYR ( unit , x , y , 12 ) ;
36245: LD_VAR 0 2
36249: PPUSH
36250: LD_VAR 0 4
36254: PPUSH
36255: LD_VAR 0 5
36259: PPUSH
36260: LD_INT 12
36262: PPUSH
36263: CALL 36458 0 4
// if cmd = 256 then
36267: LD_VAR 0 1
36271: PUSH
36272: LD_INT 256
36274: EQUAL
36275: IFFALSE 36296
// SetFactoryWaypoint ( unit , x , y ) ;
36277: LD_VAR 0 2
36281: PPUSH
36282: LD_VAR 0 4
36286: PPUSH
36287: LD_VAR 0 5
36291: PPUSH
36292: CALL 33934 0 3
// if cmd = 257 then
36296: LD_VAR 0 1
36300: PUSH
36301: LD_INT 257
36303: EQUAL
36304: IFFALSE 36325
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36306: LD_VAR 0 2
36310: PPUSH
36311: LD_VAR 0 4
36315: PPUSH
36316: LD_VAR 0 5
36320: PPUSH
36321: CALL 34424 0 3
// if cmd = 258 then
36325: LD_VAR 0 1
36329: PUSH
36330: LD_INT 258
36332: EQUAL
36333: IFFALSE 36357
// BurnTreeXYR ( unit , x , y , 8 ) ;
36335: LD_VAR 0 2
36339: PPUSH
36340: LD_VAR 0 4
36344: PPUSH
36345: LD_VAR 0 5
36349: PPUSH
36350: LD_INT 8
36352: PPUSH
36353: CALL 36852 0 4
// end ;
36357: LD_VAR 0 6
36361: RET
// export function ComRadiation ( un ) ; var eff ; begin
36362: LD_INT 0
36364: PPUSH
36365: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
36366: LD_VAR 0 1
36370: PPUSH
36371: CALL_OW 264
36375: PUSH
36376: LD_INT 91
36378: NONEQUAL
36379: IFFALSE 36383
// exit ;
36381: GO 36453
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
36383: LD_INT 68
36385: PPUSH
36386: LD_VAR 0 1
36390: PPUSH
36391: CALL_OW 255
36395: PPUSH
36396: CALL_OW 321
36400: PUSH
36401: LD_INT 2
36403: EQUAL
36404: IFFALSE 36416
// eff := 70 else
36406: LD_ADDR_VAR 0 3
36410: PUSH
36411: LD_INT 70
36413: ST_TO_ADDR
36414: GO 36424
// eff := 30 ;
36416: LD_ADDR_VAR 0 3
36420: PUSH
36421: LD_INT 30
36423: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
36424: LD_VAR 0 1
36428: PPUSH
36429: CALL_OW 250
36433: PPUSH
36434: LD_VAR 0 1
36438: PPUSH
36439: CALL_OW 251
36443: PPUSH
36444: LD_VAR 0 3
36448: PPUSH
36449: CALL_OW 495
// end ;
36453: LD_VAR 0 2
36457: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36458: LD_INT 0
36460: PPUSH
36461: PPUSH
36462: PPUSH
36463: PPUSH
36464: PPUSH
36465: PPUSH
36466: PPUSH
36467: PPUSH
36468: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
36469: LD_VAR 0 1
36473: PPUSH
36474: CALL_OW 302
36478: NOT
36479: PUSH
36480: LD_VAR 0 2
36484: PPUSH
36485: LD_VAR 0 3
36489: PPUSH
36490: CALL_OW 488
36494: NOT
36495: OR
36496: PUSH
36497: LD_VAR 0 4
36501: NOT
36502: OR
36503: IFFALSE 36507
// exit ;
36505: GO 36847
// list := [ ] ;
36507: LD_ADDR_VAR 0 13
36511: PUSH
36512: EMPTY
36513: ST_TO_ADDR
// if x - r < 0 then
36514: LD_VAR 0 2
36518: PUSH
36519: LD_VAR 0 4
36523: MINUS
36524: PUSH
36525: LD_INT 0
36527: LESS
36528: IFFALSE 36540
// min_x := 0 else
36530: LD_ADDR_VAR 0 7
36534: PUSH
36535: LD_INT 0
36537: ST_TO_ADDR
36538: GO 36556
// min_x := x - r ;
36540: LD_ADDR_VAR 0 7
36544: PUSH
36545: LD_VAR 0 2
36549: PUSH
36550: LD_VAR 0 4
36554: MINUS
36555: ST_TO_ADDR
// if y - r < 0 then
36556: LD_VAR 0 3
36560: PUSH
36561: LD_VAR 0 4
36565: MINUS
36566: PUSH
36567: LD_INT 0
36569: LESS
36570: IFFALSE 36582
// min_y := 0 else
36572: LD_ADDR_VAR 0 8
36576: PUSH
36577: LD_INT 0
36579: ST_TO_ADDR
36580: GO 36598
// min_y := y - r ;
36582: LD_ADDR_VAR 0 8
36586: PUSH
36587: LD_VAR 0 3
36591: PUSH
36592: LD_VAR 0 4
36596: MINUS
36597: ST_TO_ADDR
// max_x := x + r ;
36598: LD_ADDR_VAR 0 9
36602: PUSH
36603: LD_VAR 0 2
36607: PUSH
36608: LD_VAR 0 4
36612: PLUS
36613: ST_TO_ADDR
// max_y := y + r ;
36614: LD_ADDR_VAR 0 10
36618: PUSH
36619: LD_VAR 0 3
36623: PUSH
36624: LD_VAR 0 4
36628: PLUS
36629: ST_TO_ADDR
// for _x = min_x to max_x do
36630: LD_ADDR_VAR 0 11
36634: PUSH
36635: DOUBLE
36636: LD_VAR 0 7
36640: DEC
36641: ST_TO_ADDR
36642: LD_VAR 0 9
36646: PUSH
36647: FOR_TO
36648: IFFALSE 36765
// for _y = min_y to max_y do
36650: LD_ADDR_VAR 0 12
36654: PUSH
36655: DOUBLE
36656: LD_VAR 0 8
36660: DEC
36661: ST_TO_ADDR
36662: LD_VAR 0 10
36666: PUSH
36667: FOR_TO
36668: IFFALSE 36761
// begin if not ValidHex ( _x , _y ) then
36670: LD_VAR 0 11
36674: PPUSH
36675: LD_VAR 0 12
36679: PPUSH
36680: CALL_OW 488
36684: NOT
36685: IFFALSE 36689
// continue ;
36687: GO 36667
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36689: LD_VAR 0 11
36693: PPUSH
36694: LD_VAR 0 12
36698: PPUSH
36699: CALL_OW 351
36703: PUSH
36704: LD_VAR 0 11
36708: PPUSH
36709: LD_VAR 0 12
36713: PPUSH
36714: CALL_OW 554
36718: AND
36719: IFFALSE 36759
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36721: LD_ADDR_VAR 0 13
36725: PUSH
36726: LD_VAR 0 13
36730: PPUSH
36731: LD_VAR 0 13
36735: PUSH
36736: LD_INT 1
36738: PLUS
36739: PPUSH
36740: LD_VAR 0 11
36744: PUSH
36745: LD_VAR 0 12
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: PPUSH
36754: CALL_OW 2
36758: ST_TO_ADDR
// end ;
36759: GO 36667
36761: POP
36762: POP
36763: GO 36647
36765: POP
36766: POP
// if not list then
36767: LD_VAR 0 13
36771: NOT
36772: IFFALSE 36776
// exit ;
36774: GO 36847
// for i in list do
36776: LD_ADDR_VAR 0 6
36780: PUSH
36781: LD_VAR 0 13
36785: PUSH
36786: FOR_IN
36787: IFFALSE 36845
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36789: LD_VAR 0 1
36793: PPUSH
36794: LD_STRING M
36796: PUSH
36797: LD_VAR 0 6
36801: PUSH
36802: LD_INT 1
36804: ARRAY
36805: PUSH
36806: LD_VAR 0 6
36810: PUSH
36811: LD_INT 2
36813: ARRAY
36814: PUSH
36815: LD_INT 0
36817: PUSH
36818: LD_INT 0
36820: PUSH
36821: LD_INT 0
36823: PUSH
36824: LD_INT 0
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: PUSH
36836: EMPTY
36837: LIST
36838: PPUSH
36839: CALL_OW 447
36843: GO 36786
36845: POP
36846: POP
// end ;
36847: LD_VAR 0 5
36851: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
36852: LD_INT 0
36854: PPUSH
36855: PPUSH
36856: PPUSH
36857: PPUSH
36858: PPUSH
36859: PPUSH
36860: PPUSH
36861: PPUSH
36862: PPUSH
36863: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
36864: LD_VAR 0 1
36868: PPUSH
36869: CALL_OW 302
36873: NOT
36874: PUSH
36875: LD_VAR 0 2
36879: PPUSH
36880: LD_VAR 0 3
36884: PPUSH
36885: CALL_OW 488
36889: NOT
36890: OR
36891: PUSH
36892: LD_VAR 0 4
36896: NOT
36897: OR
36898: IFFALSE 36902
// exit ;
36900: GO 37415
// list := [ ] ;
36902: LD_ADDR_VAR 0 13
36906: PUSH
36907: EMPTY
36908: ST_TO_ADDR
// if x - r < 0 then
36909: LD_VAR 0 2
36913: PUSH
36914: LD_VAR 0 4
36918: MINUS
36919: PUSH
36920: LD_INT 0
36922: LESS
36923: IFFALSE 36935
// min_x := 0 else
36925: LD_ADDR_VAR 0 7
36929: PUSH
36930: LD_INT 0
36932: ST_TO_ADDR
36933: GO 36951
// min_x := x - r ;
36935: LD_ADDR_VAR 0 7
36939: PUSH
36940: LD_VAR 0 2
36944: PUSH
36945: LD_VAR 0 4
36949: MINUS
36950: ST_TO_ADDR
// if y - r < 0 then
36951: LD_VAR 0 3
36955: PUSH
36956: LD_VAR 0 4
36960: MINUS
36961: PUSH
36962: LD_INT 0
36964: LESS
36965: IFFALSE 36977
// min_y := 0 else
36967: LD_ADDR_VAR 0 8
36971: PUSH
36972: LD_INT 0
36974: ST_TO_ADDR
36975: GO 36993
// min_y := y - r ;
36977: LD_ADDR_VAR 0 8
36981: PUSH
36982: LD_VAR 0 3
36986: PUSH
36987: LD_VAR 0 4
36991: MINUS
36992: ST_TO_ADDR
// max_x := x + r ;
36993: LD_ADDR_VAR 0 9
36997: PUSH
36998: LD_VAR 0 2
37002: PUSH
37003: LD_VAR 0 4
37007: PLUS
37008: ST_TO_ADDR
// max_y := y + r ;
37009: LD_ADDR_VAR 0 10
37013: PUSH
37014: LD_VAR 0 3
37018: PUSH
37019: LD_VAR 0 4
37023: PLUS
37024: ST_TO_ADDR
// for _x = min_x to max_x do
37025: LD_ADDR_VAR 0 11
37029: PUSH
37030: DOUBLE
37031: LD_VAR 0 7
37035: DEC
37036: ST_TO_ADDR
37037: LD_VAR 0 9
37041: PUSH
37042: FOR_TO
37043: IFFALSE 37160
// for _y = min_y to max_y do
37045: LD_ADDR_VAR 0 12
37049: PUSH
37050: DOUBLE
37051: LD_VAR 0 8
37055: DEC
37056: ST_TO_ADDR
37057: LD_VAR 0 10
37061: PUSH
37062: FOR_TO
37063: IFFALSE 37156
// begin if not ValidHex ( _x , _y ) then
37065: LD_VAR 0 11
37069: PPUSH
37070: LD_VAR 0 12
37074: PPUSH
37075: CALL_OW 488
37079: NOT
37080: IFFALSE 37084
// continue ;
37082: GO 37062
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37084: LD_VAR 0 11
37088: PPUSH
37089: LD_VAR 0 12
37093: PPUSH
37094: CALL_OW 351
37098: PUSH
37099: LD_VAR 0 11
37103: PPUSH
37104: LD_VAR 0 12
37108: PPUSH
37109: CALL_OW 554
37113: AND
37114: IFFALSE 37154
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37116: LD_ADDR_VAR 0 13
37120: PUSH
37121: LD_VAR 0 13
37125: PPUSH
37126: LD_VAR 0 13
37130: PUSH
37131: LD_INT 1
37133: PLUS
37134: PPUSH
37135: LD_VAR 0 11
37139: PUSH
37140: LD_VAR 0 12
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PPUSH
37149: CALL_OW 2
37153: ST_TO_ADDR
// end ;
37154: GO 37062
37156: POP
37157: POP
37158: GO 37042
37160: POP
37161: POP
// if not list then
37162: LD_VAR 0 13
37166: NOT
37167: IFFALSE 37171
// exit ;
37169: GO 37415
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
37171: LD_ADDR_VAR 0 13
37175: PUSH
37176: LD_VAR 0 1
37180: PPUSH
37181: LD_VAR 0 13
37185: PPUSH
37186: LD_INT 1
37188: PPUSH
37189: LD_INT 1
37191: PPUSH
37192: CALL 46128 0 4
37196: ST_TO_ADDR
// ComStop ( flame ) ;
37197: LD_VAR 0 1
37201: PPUSH
37202: CALL_OW 141
// for i in list do
37206: LD_ADDR_VAR 0 6
37210: PUSH
37211: LD_VAR 0 13
37215: PUSH
37216: FOR_IN
37217: IFFALSE 37248
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
37219: LD_VAR 0 1
37223: PPUSH
37224: LD_VAR 0 6
37228: PUSH
37229: LD_INT 1
37231: ARRAY
37232: PPUSH
37233: LD_VAR 0 6
37237: PUSH
37238: LD_INT 2
37240: ARRAY
37241: PPUSH
37242: CALL_OW 176
37246: GO 37216
37248: POP
37249: POP
// repeat wait ( 0 0$1 ) ;
37250: LD_INT 35
37252: PPUSH
37253: CALL_OW 67
// task := GetTaskList ( flame ) ;
37257: LD_ADDR_VAR 0 14
37261: PUSH
37262: LD_VAR 0 1
37266: PPUSH
37267: CALL_OW 437
37271: ST_TO_ADDR
// if not task then
37272: LD_VAR 0 14
37276: NOT
37277: IFFALSE 37281
// exit ;
37279: GO 37415
// if task [ 1 ] [ 1 ] <> | then
37281: LD_VAR 0 14
37285: PUSH
37286: LD_INT 1
37288: ARRAY
37289: PUSH
37290: LD_INT 1
37292: ARRAY
37293: PUSH
37294: LD_STRING |
37296: NONEQUAL
37297: IFFALSE 37301
// exit ;
37299: GO 37415
// _x := task [ 1 ] [ 2 ] ;
37301: LD_ADDR_VAR 0 11
37305: PUSH
37306: LD_VAR 0 14
37310: PUSH
37311: LD_INT 1
37313: ARRAY
37314: PUSH
37315: LD_INT 2
37317: ARRAY
37318: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
37319: LD_ADDR_VAR 0 12
37323: PUSH
37324: LD_VAR 0 14
37328: PUSH
37329: LD_INT 1
37331: ARRAY
37332: PUSH
37333: LD_INT 3
37335: ARRAY
37336: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
37337: LD_VAR 0 11
37341: PPUSH
37342: LD_VAR 0 12
37346: PPUSH
37347: CALL_OW 351
37351: NOT
37352: PUSH
37353: LD_VAR 0 11
37357: PPUSH
37358: LD_VAR 0 12
37362: PPUSH
37363: CALL_OW 554
37367: NOT
37368: OR
37369: IFFALSE 37403
// begin task := Delete ( task , 1 ) ;
37371: LD_ADDR_VAR 0 14
37375: PUSH
37376: LD_VAR 0 14
37380: PPUSH
37381: LD_INT 1
37383: PPUSH
37384: CALL_OW 3
37388: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
37389: LD_VAR 0 1
37393: PPUSH
37394: LD_VAR 0 14
37398: PPUSH
37399: CALL_OW 446
// end ; until not HasTask ( flame ) ;
37403: LD_VAR 0 1
37407: PPUSH
37408: CALL_OW 314
37412: NOT
37413: IFFALSE 37250
// end ;
37415: LD_VAR 0 5
37419: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37420: LD_EXP 108
37424: NOT
37425: IFFALSE 37475
37427: GO 37429
37429: DISABLE
// begin initHack := true ;
37430: LD_ADDR_EXP 108
37434: PUSH
37435: LD_INT 1
37437: ST_TO_ADDR
// hackTanks := [ ] ;
37438: LD_ADDR_EXP 109
37442: PUSH
37443: EMPTY
37444: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37445: LD_ADDR_EXP 110
37449: PUSH
37450: EMPTY
37451: ST_TO_ADDR
// hackLimit := 3 ;
37452: LD_ADDR_EXP 111
37456: PUSH
37457: LD_INT 3
37459: ST_TO_ADDR
// hackDist := 12 ;
37460: LD_ADDR_EXP 112
37464: PUSH
37465: LD_INT 12
37467: ST_TO_ADDR
// hackCounter := [ ] ;
37468: LD_ADDR_EXP 113
37472: PUSH
37473: EMPTY
37474: ST_TO_ADDR
// end ;
37475: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37476: LD_EXP 108
37480: PUSH
37481: LD_INT 34
37483: PUSH
37484: LD_INT 99
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PPUSH
37491: CALL_OW 69
37495: AND
37496: IFFALSE 37749
37498: GO 37500
37500: DISABLE
37501: LD_INT 0
37503: PPUSH
37504: PPUSH
// begin enable ;
37505: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37506: LD_ADDR_VAR 0 1
37510: PUSH
37511: LD_INT 34
37513: PUSH
37514: LD_INT 99
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PPUSH
37521: CALL_OW 69
37525: PUSH
37526: FOR_IN
37527: IFFALSE 37747
// begin if not i in hackTanks then
37529: LD_VAR 0 1
37533: PUSH
37534: LD_EXP 109
37538: IN
37539: NOT
37540: IFFALSE 37623
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
37542: LD_ADDR_EXP 109
37546: PUSH
37547: LD_EXP 109
37551: PPUSH
37552: LD_EXP 109
37556: PUSH
37557: LD_INT 1
37559: PLUS
37560: PPUSH
37561: LD_VAR 0 1
37565: PPUSH
37566: CALL_OW 1
37570: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
37571: LD_ADDR_EXP 110
37575: PUSH
37576: LD_EXP 110
37580: PPUSH
37581: LD_EXP 110
37585: PUSH
37586: LD_INT 1
37588: PLUS
37589: PPUSH
37590: EMPTY
37591: PPUSH
37592: CALL_OW 1
37596: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
37597: LD_ADDR_EXP 113
37601: PUSH
37602: LD_EXP 113
37606: PPUSH
37607: LD_EXP 113
37611: PUSH
37612: LD_INT 1
37614: PLUS
37615: PPUSH
37616: EMPTY
37617: PPUSH
37618: CALL_OW 1
37622: ST_TO_ADDR
// end ; if not IsOk ( i ) then
37623: LD_VAR 0 1
37627: PPUSH
37628: CALL_OW 302
37632: NOT
37633: IFFALSE 37646
// begin HackUnlinkAll ( i ) ;
37635: LD_VAR 0 1
37639: PPUSH
37640: CALL 37752 0 1
// continue ;
37644: GO 37526
// end ; HackCheckCapturedStatus ( i ) ;
37646: LD_VAR 0 1
37650: PPUSH
37651: CALL 38195 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
37655: LD_ADDR_VAR 0 2
37659: PUSH
37660: LD_INT 81
37662: PUSH
37663: LD_VAR 0 1
37667: PPUSH
37668: CALL_OW 255
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 33
37679: PUSH
37680: LD_INT 3
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: LD_INT 91
37689: PUSH
37690: LD_VAR 0 1
37694: PUSH
37695: LD_EXP 112
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: LIST
37704: PUSH
37705: LD_INT 50
37707: PUSH
37708: EMPTY
37709: LIST
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: PPUSH
37717: CALL_OW 69
37721: ST_TO_ADDR
// if not tmp then
37722: LD_VAR 0 2
37726: NOT
37727: IFFALSE 37731
// continue ;
37729: GO 37526
// HackLink ( i , tmp ) ;
37731: LD_VAR 0 1
37735: PPUSH
37736: LD_VAR 0 2
37740: PPUSH
37741: CALL 37888 0 2
// end ;
37745: GO 37526
37747: POP
37748: POP
// end ;
37749: PPOPN 2
37751: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
37752: LD_INT 0
37754: PPUSH
37755: PPUSH
37756: PPUSH
// if not hack in hackTanks then
37757: LD_VAR 0 1
37761: PUSH
37762: LD_EXP 109
37766: IN
37767: NOT
37768: IFFALSE 37772
// exit ;
37770: GO 37883
// index := GetElementIndex ( hackTanks , hack ) ;
37772: LD_ADDR_VAR 0 4
37776: PUSH
37777: LD_EXP 109
37781: PPUSH
37782: LD_VAR 0 1
37786: PPUSH
37787: CALL 45425 0 2
37791: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37792: LD_EXP 110
37796: PUSH
37797: LD_VAR 0 4
37801: ARRAY
37802: IFFALSE 37883
// begin for i in hackTanksCaptured [ index ] do
37804: LD_ADDR_VAR 0 3
37808: PUSH
37809: LD_EXP 110
37813: PUSH
37814: LD_VAR 0 4
37818: ARRAY
37819: PUSH
37820: FOR_IN
37821: IFFALSE 37847
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37823: LD_VAR 0 3
37827: PUSH
37828: LD_INT 1
37830: ARRAY
37831: PPUSH
37832: LD_VAR 0 3
37836: PUSH
37837: LD_INT 2
37839: ARRAY
37840: PPUSH
37841: CALL_OW 235
37845: GO 37820
37847: POP
37848: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37849: LD_ADDR_EXP 110
37853: PUSH
37854: LD_EXP 110
37858: PPUSH
37859: LD_VAR 0 4
37863: PPUSH
37864: EMPTY
37865: PPUSH
37866: CALL_OW 1
37870: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37871: LD_VAR 0 1
37875: PPUSH
37876: LD_INT 0
37878: PPUSH
37879: CALL_OW 505
// end ; end ;
37883: LD_VAR 0 2
37887: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37888: LD_INT 0
37890: PPUSH
37891: PPUSH
37892: PPUSH
// if not hack in hackTanks or not vehicles then
37893: LD_VAR 0 1
37897: PUSH
37898: LD_EXP 109
37902: IN
37903: NOT
37904: PUSH
37905: LD_VAR 0 2
37909: NOT
37910: OR
37911: IFFALSE 37915
// exit ;
37913: GO 38190
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37915: LD_ADDR_VAR 0 2
37919: PUSH
37920: LD_VAR 0 1
37924: PPUSH
37925: LD_VAR 0 2
37929: PPUSH
37930: LD_INT 1
37932: PPUSH
37933: LD_INT 1
37935: PPUSH
37936: CALL 46075 0 4
37940: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37941: LD_ADDR_VAR 0 5
37945: PUSH
37946: LD_EXP 109
37950: PPUSH
37951: LD_VAR 0 1
37955: PPUSH
37956: CALL 45425 0 2
37960: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37961: LD_EXP 110
37965: PUSH
37966: LD_VAR 0 5
37970: ARRAY
37971: PUSH
37972: LD_EXP 111
37976: LESS
37977: IFFALSE 38166
// begin for i := 1 to vehicles do
37979: LD_ADDR_VAR 0 4
37983: PUSH
37984: DOUBLE
37985: LD_INT 1
37987: DEC
37988: ST_TO_ADDR
37989: LD_VAR 0 2
37993: PUSH
37994: FOR_TO
37995: IFFALSE 38164
// begin if hackTanksCaptured [ index ] = hackLimit then
37997: LD_EXP 110
38001: PUSH
38002: LD_VAR 0 5
38006: ARRAY
38007: PUSH
38008: LD_EXP 111
38012: EQUAL
38013: IFFALSE 38017
// break ;
38015: GO 38164
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38017: LD_ADDR_EXP 113
38021: PUSH
38022: LD_EXP 113
38026: PPUSH
38027: LD_VAR 0 5
38031: PPUSH
38032: LD_EXP 113
38036: PUSH
38037: LD_VAR 0 5
38041: ARRAY
38042: PUSH
38043: LD_INT 1
38045: PLUS
38046: PPUSH
38047: CALL_OW 1
38051: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38052: LD_ADDR_EXP 110
38056: PUSH
38057: LD_EXP 110
38061: PPUSH
38062: LD_VAR 0 5
38066: PUSH
38067: LD_EXP 110
38071: PUSH
38072: LD_VAR 0 5
38076: ARRAY
38077: PUSH
38078: LD_INT 1
38080: PLUS
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PPUSH
38086: LD_VAR 0 2
38090: PUSH
38091: LD_VAR 0 4
38095: ARRAY
38096: PUSH
38097: LD_VAR 0 2
38101: PUSH
38102: LD_VAR 0 4
38106: ARRAY
38107: PPUSH
38108: CALL_OW 255
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PPUSH
38117: CALL 45640 0 3
38121: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38122: LD_VAR 0 2
38126: PUSH
38127: LD_VAR 0 4
38131: ARRAY
38132: PPUSH
38133: LD_VAR 0 1
38137: PPUSH
38138: CALL_OW 255
38142: PPUSH
38143: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38147: LD_VAR 0 2
38151: PUSH
38152: LD_VAR 0 4
38156: ARRAY
38157: PPUSH
38158: CALL_OW 141
// end ;
38162: GO 37994
38164: POP
38165: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38166: LD_VAR 0 1
38170: PPUSH
38171: LD_EXP 110
38175: PUSH
38176: LD_VAR 0 5
38180: ARRAY
38181: PUSH
38182: LD_INT 0
38184: PLUS
38185: PPUSH
38186: CALL_OW 505
// end ;
38190: LD_VAR 0 3
38194: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38195: LD_INT 0
38197: PPUSH
38198: PPUSH
38199: PPUSH
38200: PPUSH
// if not hack in hackTanks then
38201: LD_VAR 0 1
38205: PUSH
38206: LD_EXP 109
38210: IN
38211: NOT
38212: IFFALSE 38216
// exit ;
38214: GO 38456
// index := GetElementIndex ( hackTanks , hack ) ;
38216: LD_ADDR_VAR 0 4
38220: PUSH
38221: LD_EXP 109
38225: PPUSH
38226: LD_VAR 0 1
38230: PPUSH
38231: CALL 45425 0 2
38235: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38236: LD_ADDR_VAR 0 3
38240: PUSH
38241: DOUBLE
38242: LD_EXP 110
38246: PUSH
38247: LD_VAR 0 4
38251: ARRAY
38252: INC
38253: ST_TO_ADDR
38254: LD_INT 1
38256: PUSH
38257: FOR_DOWNTO
38258: IFFALSE 38430
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38260: LD_ADDR_VAR 0 5
38264: PUSH
38265: LD_EXP 110
38269: PUSH
38270: LD_VAR 0 4
38274: ARRAY
38275: PUSH
38276: LD_VAR 0 3
38280: ARRAY
38281: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38282: LD_VAR 0 5
38286: PUSH
38287: LD_INT 1
38289: ARRAY
38290: PPUSH
38291: CALL_OW 302
38295: NOT
38296: PUSH
38297: LD_VAR 0 5
38301: PUSH
38302: LD_INT 1
38304: ARRAY
38305: PPUSH
38306: CALL_OW 255
38310: PUSH
38311: LD_VAR 0 1
38315: PPUSH
38316: CALL_OW 255
38320: NONEQUAL
38321: OR
38322: IFFALSE 38428
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38324: LD_VAR 0 5
38328: PUSH
38329: LD_INT 1
38331: ARRAY
38332: PPUSH
38333: CALL_OW 305
38337: PUSH
38338: LD_VAR 0 5
38342: PUSH
38343: LD_INT 1
38345: ARRAY
38346: PPUSH
38347: CALL_OW 255
38351: PUSH
38352: LD_VAR 0 1
38356: PPUSH
38357: CALL_OW 255
38361: EQUAL
38362: AND
38363: IFFALSE 38387
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38365: LD_VAR 0 5
38369: PUSH
38370: LD_INT 1
38372: ARRAY
38373: PPUSH
38374: LD_VAR 0 5
38378: PUSH
38379: LD_INT 2
38381: ARRAY
38382: PPUSH
38383: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38387: LD_ADDR_EXP 110
38391: PUSH
38392: LD_EXP 110
38396: PPUSH
38397: LD_VAR 0 4
38401: PPUSH
38402: LD_EXP 110
38406: PUSH
38407: LD_VAR 0 4
38411: ARRAY
38412: PPUSH
38413: LD_VAR 0 3
38417: PPUSH
38418: CALL_OW 3
38422: PPUSH
38423: CALL_OW 1
38427: ST_TO_ADDR
// end ; end ;
38428: GO 38257
38430: POP
38431: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38432: LD_VAR 0 1
38436: PPUSH
38437: LD_EXP 110
38441: PUSH
38442: LD_VAR 0 4
38446: ARRAY
38447: PUSH
38448: LD_INT 0
38450: PLUS
38451: PPUSH
38452: CALL_OW 505
// end ;
38456: LD_VAR 0 2
38460: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38461: LD_INT 0
38463: PPUSH
38464: PPUSH
38465: PPUSH
38466: PPUSH
// if not hack in hackTanks then
38467: LD_VAR 0 1
38471: PUSH
38472: LD_EXP 109
38476: IN
38477: NOT
38478: IFFALSE 38482
// exit ;
38480: GO 38567
// index := GetElementIndex ( hackTanks , hack ) ;
38482: LD_ADDR_VAR 0 5
38486: PUSH
38487: LD_EXP 109
38491: PPUSH
38492: LD_VAR 0 1
38496: PPUSH
38497: CALL 45425 0 2
38501: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38502: LD_ADDR_VAR 0 4
38506: PUSH
38507: DOUBLE
38508: LD_INT 1
38510: DEC
38511: ST_TO_ADDR
38512: LD_EXP 110
38516: PUSH
38517: LD_VAR 0 5
38521: ARRAY
38522: PUSH
38523: FOR_TO
38524: IFFALSE 38565
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
38526: LD_EXP 110
38530: PUSH
38531: LD_VAR 0 5
38535: ARRAY
38536: PUSH
38537: LD_VAR 0 4
38541: ARRAY
38542: PUSH
38543: LD_INT 1
38545: ARRAY
38546: PUSH
38547: LD_VAR 0 2
38551: EQUAL
38552: IFFALSE 38563
// KillUnit ( vehicle ) ;
38554: LD_VAR 0 2
38558: PPUSH
38559: CALL_OW 66
38563: GO 38523
38565: POP
38566: POP
// end ;
38567: LD_VAR 0 3
38571: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
38572: LD_EXP 114
38576: NOT
38577: IFFALSE 38612
38579: GO 38581
38581: DISABLE
// begin initMiner := true ;
38582: LD_ADDR_EXP 114
38586: PUSH
38587: LD_INT 1
38589: ST_TO_ADDR
// minersList := [ ] ;
38590: LD_ADDR_EXP 115
38594: PUSH
38595: EMPTY
38596: ST_TO_ADDR
// minerMinesList := [ ] ;
38597: LD_ADDR_EXP 116
38601: PUSH
38602: EMPTY
38603: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
38604: LD_ADDR_EXP 117
38608: PUSH
38609: LD_INT 5
38611: ST_TO_ADDR
// end ;
38612: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
38613: LD_EXP 114
38617: PUSH
38618: LD_INT 34
38620: PUSH
38621: LD_INT 81
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PPUSH
38628: CALL_OW 69
38632: AND
38633: IFFALSE 39094
38635: GO 38637
38637: DISABLE
38638: LD_INT 0
38640: PPUSH
38641: PPUSH
38642: PPUSH
38643: PPUSH
// begin enable ;
38644: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
38645: LD_ADDR_VAR 0 1
38649: PUSH
38650: LD_INT 34
38652: PUSH
38653: LD_INT 81
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PPUSH
38660: CALL_OW 69
38664: PUSH
38665: FOR_IN
38666: IFFALSE 38738
// begin if not i in minersList then
38668: LD_VAR 0 1
38672: PUSH
38673: LD_EXP 115
38677: IN
38678: NOT
38679: IFFALSE 38736
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
38681: LD_ADDR_EXP 115
38685: PUSH
38686: LD_EXP 115
38690: PPUSH
38691: LD_EXP 115
38695: PUSH
38696: LD_INT 1
38698: PLUS
38699: PPUSH
38700: LD_VAR 0 1
38704: PPUSH
38705: CALL_OW 1
38709: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
38710: LD_ADDR_EXP 116
38714: PUSH
38715: LD_EXP 116
38719: PPUSH
38720: LD_EXP 116
38724: PUSH
38725: LD_INT 1
38727: PLUS
38728: PPUSH
38729: EMPTY
38730: PPUSH
38731: CALL_OW 1
38735: ST_TO_ADDR
// end end ;
38736: GO 38665
38738: POP
38739: POP
// for i := minerMinesList downto 1 do
38740: LD_ADDR_VAR 0 1
38744: PUSH
38745: DOUBLE
38746: LD_EXP 116
38750: INC
38751: ST_TO_ADDR
38752: LD_INT 1
38754: PUSH
38755: FOR_DOWNTO
38756: IFFALSE 39092
// begin if IsLive ( minersList [ i ] ) then
38758: LD_EXP 115
38762: PUSH
38763: LD_VAR 0 1
38767: ARRAY
38768: PPUSH
38769: CALL_OW 300
38773: IFFALSE 38801
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
38775: LD_EXP 115
38779: PUSH
38780: LD_VAR 0 1
38784: ARRAY
38785: PPUSH
38786: LD_EXP 116
38790: PUSH
38791: LD_VAR 0 1
38795: ARRAY
38796: PPUSH
38797: CALL_OW 505
// if not minerMinesList [ i ] then
38801: LD_EXP 116
38805: PUSH
38806: LD_VAR 0 1
38810: ARRAY
38811: NOT
38812: IFFALSE 38816
// continue ;
38814: GO 38755
// for j := minerMinesList [ i ] downto 1 do
38816: LD_ADDR_VAR 0 2
38820: PUSH
38821: DOUBLE
38822: LD_EXP 116
38826: PUSH
38827: LD_VAR 0 1
38831: ARRAY
38832: INC
38833: ST_TO_ADDR
38834: LD_INT 1
38836: PUSH
38837: FOR_DOWNTO
38838: IFFALSE 39088
// begin side := GetSide ( minersList [ i ] ) ;
38840: LD_ADDR_VAR 0 3
38844: PUSH
38845: LD_EXP 115
38849: PUSH
38850: LD_VAR 0 1
38854: ARRAY
38855: PPUSH
38856: CALL_OW 255
38860: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38861: LD_ADDR_VAR 0 4
38865: PUSH
38866: LD_EXP 116
38870: PUSH
38871: LD_VAR 0 1
38875: ARRAY
38876: PUSH
38877: LD_VAR 0 2
38881: ARRAY
38882: PUSH
38883: LD_INT 1
38885: ARRAY
38886: PPUSH
38887: LD_EXP 116
38891: PUSH
38892: LD_VAR 0 1
38896: ARRAY
38897: PUSH
38898: LD_VAR 0 2
38902: ARRAY
38903: PUSH
38904: LD_INT 2
38906: ARRAY
38907: PPUSH
38908: CALL_OW 428
38912: ST_TO_ADDR
// if not tmp then
38913: LD_VAR 0 4
38917: NOT
38918: IFFALSE 38922
// continue ;
38920: GO 38837
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38922: LD_VAR 0 4
38926: PUSH
38927: LD_INT 81
38929: PUSH
38930: LD_VAR 0 3
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PPUSH
38939: CALL_OW 69
38943: IN
38944: PUSH
38945: LD_EXP 116
38949: PUSH
38950: LD_VAR 0 1
38954: ARRAY
38955: PUSH
38956: LD_VAR 0 2
38960: ARRAY
38961: PUSH
38962: LD_INT 1
38964: ARRAY
38965: PPUSH
38966: LD_EXP 116
38970: PUSH
38971: LD_VAR 0 1
38975: ARRAY
38976: PUSH
38977: LD_VAR 0 2
38981: ARRAY
38982: PUSH
38983: LD_INT 2
38985: ARRAY
38986: PPUSH
38987: CALL_OW 458
38991: AND
38992: IFFALSE 39086
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38994: LD_EXP 116
38998: PUSH
38999: LD_VAR 0 1
39003: ARRAY
39004: PUSH
39005: LD_VAR 0 2
39009: ARRAY
39010: PUSH
39011: LD_INT 1
39013: ARRAY
39014: PPUSH
39015: LD_EXP 116
39019: PUSH
39020: LD_VAR 0 1
39024: ARRAY
39025: PUSH
39026: LD_VAR 0 2
39030: ARRAY
39031: PUSH
39032: LD_INT 2
39034: ARRAY
39035: PPUSH
39036: LD_VAR 0 3
39040: PPUSH
39041: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39045: LD_ADDR_EXP 116
39049: PUSH
39050: LD_EXP 116
39054: PPUSH
39055: LD_VAR 0 1
39059: PPUSH
39060: LD_EXP 116
39064: PUSH
39065: LD_VAR 0 1
39069: ARRAY
39070: PPUSH
39071: LD_VAR 0 2
39075: PPUSH
39076: CALL_OW 3
39080: PPUSH
39081: CALL_OW 1
39085: ST_TO_ADDR
// end ; end ;
39086: GO 38837
39088: POP
39089: POP
// end ;
39090: GO 38755
39092: POP
39093: POP
// end ;
39094: PPOPN 4
39096: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
39097: LD_INT 0
39099: PPUSH
39100: PPUSH
// result := false ;
39101: LD_ADDR_VAR 0 4
39105: PUSH
39106: LD_INT 0
39108: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39109: LD_VAR 0 1
39113: PPUSH
39114: CALL_OW 264
39118: PUSH
39119: LD_INT 81
39121: EQUAL
39122: NOT
39123: IFFALSE 39127
// exit ;
39125: GO 39367
// index := GetElementIndex ( minersList , unit ) ;
39127: LD_ADDR_VAR 0 5
39131: PUSH
39132: LD_EXP 115
39136: PPUSH
39137: LD_VAR 0 1
39141: PPUSH
39142: CALL 45425 0 2
39146: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39147: LD_EXP 116
39151: PUSH
39152: LD_VAR 0 5
39156: ARRAY
39157: PUSH
39158: LD_EXP 117
39162: GREATEREQUAL
39163: IFFALSE 39167
// exit ;
39165: GO 39367
// ComMoveXY ( unit , x , y ) ;
39167: LD_VAR 0 1
39171: PPUSH
39172: LD_VAR 0 2
39176: PPUSH
39177: LD_VAR 0 3
39181: PPUSH
39182: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39186: LD_INT 35
39188: PPUSH
39189: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39193: LD_VAR 0 1
39197: PPUSH
39198: LD_VAR 0 2
39202: PPUSH
39203: LD_VAR 0 3
39207: PPUSH
39208: CALL 77186 0 3
39212: NOT
39213: PUSH
39214: LD_VAR 0 1
39218: PPUSH
39219: CALL_OW 314
39223: AND
39224: IFFALSE 39228
// exit ;
39226: GO 39367
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39228: LD_VAR 0 2
39232: PPUSH
39233: LD_VAR 0 3
39237: PPUSH
39238: CALL_OW 428
39242: PUSH
39243: LD_VAR 0 1
39247: EQUAL
39248: PUSH
39249: LD_VAR 0 1
39253: PPUSH
39254: CALL_OW 314
39258: NOT
39259: AND
39260: IFFALSE 39186
// PlaySoundXY ( x , y , PlantMine ) ;
39262: LD_VAR 0 2
39266: PPUSH
39267: LD_VAR 0 3
39271: PPUSH
39272: LD_STRING PlantMine
39274: PPUSH
39275: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
39279: LD_VAR 0 2
39283: PPUSH
39284: LD_VAR 0 3
39288: PPUSH
39289: LD_VAR 0 1
39293: PPUSH
39294: CALL_OW 255
39298: PPUSH
39299: LD_INT 0
39301: PPUSH
39302: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39306: LD_ADDR_EXP 116
39310: PUSH
39311: LD_EXP 116
39315: PPUSH
39316: LD_VAR 0 5
39320: PUSH
39321: LD_EXP 116
39325: PUSH
39326: LD_VAR 0 5
39330: ARRAY
39331: PUSH
39332: LD_INT 1
39334: PLUS
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PPUSH
39340: LD_VAR 0 2
39344: PUSH
39345: LD_VAR 0 3
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PPUSH
39354: CALL 45640 0 3
39358: ST_TO_ADDR
// result := true ;
39359: LD_ADDR_VAR 0 4
39363: PUSH
39364: LD_INT 1
39366: ST_TO_ADDR
// end ;
39367: LD_VAR 0 4
39371: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
39372: LD_INT 0
39374: PPUSH
39375: PPUSH
39376: PPUSH
// if not unit in minersList then
39377: LD_VAR 0 1
39381: PUSH
39382: LD_EXP 115
39386: IN
39387: NOT
39388: IFFALSE 39392
// exit ;
39390: GO 39784
// index := GetElementIndex ( minersList , unit ) ;
39392: LD_ADDR_VAR 0 6
39396: PUSH
39397: LD_EXP 115
39401: PPUSH
39402: LD_VAR 0 1
39406: PPUSH
39407: CALL 45425 0 2
39411: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
39412: LD_ADDR_VAR 0 5
39416: PUSH
39417: DOUBLE
39418: LD_EXP 116
39422: PUSH
39423: LD_VAR 0 6
39427: ARRAY
39428: INC
39429: ST_TO_ADDR
39430: LD_INT 1
39432: PUSH
39433: FOR_DOWNTO
39434: IFFALSE 39595
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
39436: LD_EXP 116
39440: PUSH
39441: LD_VAR 0 6
39445: ARRAY
39446: PUSH
39447: LD_VAR 0 5
39451: ARRAY
39452: PUSH
39453: LD_INT 1
39455: ARRAY
39456: PUSH
39457: LD_VAR 0 2
39461: EQUAL
39462: PUSH
39463: LD_EXP 116
39467: PUSH
39468: LD_VAR 0 6
39472: ARRAY
39473: PUSH
39474: LD_VAR 0 5
39478: ARRAY
39479: PUSH
39480: LD_INT 2
39482: ARRAY
39483: PUSH
39484: LD_VAR 0 3
39488: EQUAL
39489: AND
39490: IFFALSE 39593
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39492: LD_EXP 116
39496: PUSH
39497: LD_VAR 0 6
39501: ARRAY
39502: PUSH
39503: LD_VAR 0 5
39507: ARRAY
39508: PUSH
39509: LD_INT 1
39511: ARRAY
39512: PPUSH
39513: LD_EXP 116
39517: PUSH
39518: LD_VAR 0 6
39522: ARRAY
39523: PUSH
39524: LD_VAR 0 5
39528: ARRAY
39529: PUSH
39530: LD_INT 2
39532: ARRAY
39533: PPUSH
39534: LD_VAR 0 1
39538: PPUSH
39539: CALL_OW 255
39543: PPUSH
39544: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39548: LD_ADDR_EXP 116
39552: PUSH
39553: LD_EXP 116
39557: PPUSH
39558: LD_VAR 0 6
39562: PPUSH
39563: LD_EXP 116
39567: PUSH
39568: LD_VAR 0 6
39572: ARRAY
39573: PPUSH
39574: LD_VAR 0 5
39578: PPUSH
39579: CALL_OW 3
39583: PPUSH
39584: CALL_OW 1
39588: ST_TO_ADDR
// exit ;
39589: POP
39590: POP
39591: GO 39784
// end ; end ;
39593: GO 39433
39595: POP
39596: POP
// for i := minerMinesList [ index ] downto 1 do
39597: LD_ADDR_VAR 0 5
39601: PUSH
39602: DOUBLE
39603: LD_EXP 116
39607: PUSH
39608: LD_VAR 0 6
39612: ARRAY
39613: INC
39614: ST_TO_ADDR
39615: LD_INT 1
39617: PUSH
39618: FOR_DOWNTO
39619: IFFALSE 39782
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
39621: LD_EXP 116
39625: PUSH
39626: LD_VAR 0 6
39630: ARRAY
39631: PUSH
39632: LD_VAR 0 5
39636: ARRAY
39637: PUSH
39638: LD_INT 1
39640: ARRAY
39641: PPUSH
39642: LD_EXP 116
39646: PUSH
39647: LD_VAR 0 6
39651: ARRAY
39652: PUSH
39653: LD_VAR 0 5
39657: ARRAY
39658: PUSH
39659: LD_INT 2
39661: ARRAY
39662: PPUSH
39663: LD_VAR 0 2
39667: PPUSH
39668: LD_VAR 0 3
39672: PPUSH
39673: CALL_OW 298
39677: PUSH
39678: LD_INT 6
39680: LESS
39681: IFFALSE 39780
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39683: LD_EXP 116
39687: PUSH
39688: LD_VAR 0 6
39692: ARRAY
39693: PUSH
39694: LD_VAR 0 5
39698: ARRAY
39699: PUSH
39700: LD_INT 1
39702: ARRAY
39703: PPUSH
39704: LD_EXP 116
39708: PUSH
39709: LD_VAR 0 6
39713: ARRAY
39714: PUSH
39715: LD_VAR 0 5
39719: ARRAY
39720: PUSH
39721: LD_INT 2
39723: ARRAY
39724: PPUSH
39725: LD_VAR 0 1
39729: PPUSH
39730: CALL_OW 255
39734: PPUSH
39735: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39739: LD_ADDR_EXP 116
39743: PUSH
39744: LD_EXP 116
39748: PPUSH
39749: LD_VAR 0 6
39753: PPUSH
39754: LD_EXP 116
39758: PUSH
39759: LD_VAR 0 6
39763: ARRAY
39764: PPUSH
39765: LD_VAR 0 5
39769: PPUSH
39770: CALL_OW 3
39774: PPUSH
39775: CALL_OW 1
39779: ST_TO_ADDR
// end ; end ;
39780: GO 39618
39782: POP
39783: POP
// end ;
39784: LD_VAR 0 4
39788: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39789: LD_INT 0
39791: PPUSH
39792: PPUSH
39793: PPUSH
39794: PPUSH
39795: PPUSH
39796: PPUSH
39797: PPUSH
39798: PPUSH
39799: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39800: LD_VAR 0 1
39804: PPUSH
39805: CALL_OW 264
39809: PUSH
39810: LD_INT 81
39812: EQUAL
39813: NOT
39814: PUSH
39815: LD_VAR 0 1
39819: PUSH
39820: LD_EXP 115
39824: IN
39825: NOT
39826: OR
39827: IFFALSE 39831
// exit ;
39829: GO 40153
// index := GetElementIndex ( minersList , unit ) ;
39831: LD_ADDR_VAR 0 6
39835: PUSH
39836: LD_EXP 115
39840: PPUSH
39841: LD_VAR 0 1
39845: PPUSH
39846: CALL 45425 0 2
39850: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39851: LD_ADDR_VAR 0 8
39855: PUSH
39856: LD_EXP 117
39860: PUSH
39861: LD_EXP 116
39865: PUSH
39866: LD_VAR 0 6
39870: ARRAY
39871: MINUS
39872: ST_TO_ADDR
// if not minesFreeAmount then
39873: LD_VAR 0 8
39877: NOT
39878: IFFALSE 39882
// exit ;
39880: GO 40153
// tmp := [ ] ;
39882: LD_ADDR_VAR 0 7
39886: PUSH
39887: EMPTY
39888: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39889: LD_ADDR_VAR 0 5
39893: PUSH
39894: DOUBLE
39895: LD_INT 1
39897: DEC
39898: ST_TO_ADDR
39899: LD_VAR 0 8
39903: PUSH
39904: FOR_TO
39905: IFFALSE 40100
// begin _d := rand ( 0 , 5 ) ;
39907: LD_ADDR_VAR 0 11
39911: PUSH
39912: LD_INT 0
39914: PPUSH
39915: LD_INT 5
39917: PPUSH
39918: CALL_OW 12
39922: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39923: LD_ADDR_VAR 0 12
39927: PUSH
39928: LD_INT 2
39930: PPUSH
39931: LD_INT 6
39933: PPUSH
39934: CALL_OW 12
39938: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39939: LD_ADDR_VAR 0 9
39943: PUSH
39944: LD_VAR 0 2
39948: PPUSH
39949: LD_VAR 0 11
39953: PPUSH
39954: LD_VAR 0 12
39958: PPUSH
39959: CALL_OW 272
39963: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39964: LD_ADDR_VAR 0 10
39968: PUSH
39969: LD_VAR 0 3
39973: PPUSH
39974: LD_VAR 0 11
39978: PPUSH
39979: LD_VAR 0 12
39983: PPUSH
39984: CALL_OW 273
39988: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39989: LD_VAR 0 9
39993: PPUSH
39994: LD_VAR 0 10
39998: PPUSH
39999: CALL_OW 488
40003: PUSH
40004: LD_VAR 0 9
40008: PUSH
40009: LD_VAR 0 10
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_VAR 0 7
40022: IN
40023: NOT
40024: AND
40025: PUSH
40026: LD_VAR 0 9
40030: PPUSH
40031: LD_VAR 0 10
40035: PPUSH
40036: CALL_OW 458
40040: NOT
40041: AND
40042: IFFALSE 40084
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40044: LD_ADDR_VAR 0 7
40048: PUSH
40049: LD_VAR 0 7
40053: PPUSH
40054: LD_VAR 0 7
40058: PUSH
40059: LD_INT 1
40061: PLUS
40062: PPUSH
40063: LD_VAR 0 9
40067: PUSH
40068: LD_VAR 0 10
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PPUSH
40077: CALL_OW 1
40081: ST_TO_ADDR
40082: GO 40098
// i := i - 1 ;
40084: LD_ADDR_VAR 0 5
40088: PUSH
40089: LD_VAR 0 5
40093: PUSH
40094: LD_INT 1
40096: MINUS
40097: ST_TO_ADDR
// end ;
40098: GO 39904
40100: POP
40101: POP
// for i in tmp do
40102: LD_ADDR_VAR 0 5
40106: PUSH
40107: LD_VAR 0 7
40111: PUSH
40112: FOR_IN
40113: IFFALSE 40151
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40115: LD_VAR 0 1
40119: PPUSH
40120: LD_VAR 0 5
40124: PUSH
40125: LD_INT 1
40127: ARRAY
40128: PPUSH
40129: LD_VAR 0 5
40133: PUSH
40134: LD_INT 2
40136: ARRAY
40137: PPUSH
40138: CALL 39097 0 3
40142: NOT
40143: IFFALSE 40149
// exit ;
40145: POP
40146: POP
40147: GO 40153
40149: GO 40112
40151: POP
40152: POP
// end ;
40153: LD_VAR 0 4
40157: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
40158: LD_INT 0
40160: PPUSH
40161: PPUSH
40162: PPUSH
40163: PPUSH
40164: PPUSH
40165: PPUSH
40166: PPUSH
40167: PPUSH
40168: PPUSH
// if GetClass ( unit ) <> class_sniper then
40169: LD_VAR 0 1
40173: PPUSH
40174: CALL_OW 257
40178: PUSH
40179: LD_INT 5
40181: NONEQUAL
40182: IFFALSE 40186
// exit ;
40184: GO 40652
// dist := 8 ;
40186: LD_ADDR_VAR 0 5
40190: PUSH
40191: LD_INT 8
40193: ST_TO_ADDR
// viewRange := 12 ;
40194: LD_ADDR_VAR 0 8
40198: PUSH
40199: LD_INT 12
40201: ST_TO_ADDR
// side := GetSide ( unit ) ;
40202: LD_ADDR_VAR 0 6
40206: PUSH
40207: LD_VAR 0 1
40211: PPUSH
40212: CALL_OW 255
40216: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40217: LD_INT 61
40219: PPUSH
40220: LD_VAR 0 6
40224: PPUSH
40225: CALL_OW 321
40229: PUSH
40230: LD_INT 2
40232: EQUAL
40233: IFFALSE 40243
// viewRange := 16 ;
40235: LD_ADDR_VAR 0 8
40239: PUSH
40240: LD_INT 16
40242: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40243: LD_VAR 0 1
40247: PPUSH
40248: LD_VAR 0 2
40252: PPUSH
40253: LD_VAR 0 3
40257: PPUSH
40258: CALL_OW 297
40262: PUSH
40263: LD_VAR 0 5
40267: GREATER
40268: IFFALSE 40347
// begin ComMoveXY ( unit , x , y ) ;
40270: LD_VAR 0 1
40274: PPUSH
40275: LD_VAR 0 2
40279: PPUSH
40280: LD_VAR 0 3
40284: PPUSH
40285: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40289: LD_INT 35
40291: PPUSH
40292: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40296: LD_VAR 0 1
40300: PPUSH
40301: LD_VAR 0 2
40305: PPUSH
40306: LD_VAR 0 3
40310: PPUSH
40311: CALL 77186 0 3
40315: NOT
40316: IFFALSE 40320
// exit ;
40318: GO 40652
// until GetDistUnitXY ( unit , x , y ) < dist ;
40320: LD_VAR 0 1
40324: PPUSH
40325: LD_VAR 0 2
40329: PPUSH
40330: LD_VAR 0 3
40334: PPUSH
40335: CALL_OW 297
40339: PUSH
40340: LD_VAR 0 5
40344: LESS
40345: IFFALSE 40289
// end ; ComTurnXY ( unit , x , y ) ;
40347: LD_VAR 0 1
40351: PPUSH
40352: LD_VAR 0 2
40356: PPUSH
40357: LD_VAR 0 3
40361: PPUSH
40362: CALL_OW 118
// repeat if Multiplayer then
40366: LD_OWVAR 4
40370: IFFALSE 40381
// wait ( 35 ) else
40372: LD_INT 35
40374: PPUSH
40375: CALL_OW 67
40379: GO 40388
// wait ( 5 ) ;
40381: LD_INT 5
40383: PPUSH
40384: CALL_OW 67
// _d := GetDir ( unit ) ;
40388: LD_ADDR_VAR 0 11
40392: PUSH
40393: LD_VAR 0 1
40397: PPUSH
40398: CALL_OW 254
40402: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
40403: LD_ADDR_VAR 0 7
40407: PUSH
40408: LD_VAR 0 1
40412: PPUSH
40413: CALL_OW 250
40417: PPUSH
40418: LD_VAR 0 1
40422: PPUSH
40423: CALL_OW 251
40427: PPUSH
40428: LD_VAR 0 2
40432: PPUSH
40433: LD_VAR 0 3
40437: PPUSH
40438: CALL 79794 0 4
40442: ST_TO_ADDR
// until dir = _d ;
40443: LD_VAR 0 7
40447: PUSH
40448: LD_VAR 0 11
40452: EQUAL
40453: IFFALSE 40366
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
40455: LD_ADDR_VAR 0 9
40459: PUSH
40460: LD_VAR 0 1
40464: PPUSH
40465: CALL_OW 250
40469: PPUSH
40470: LD_VAR 0 7
40474: PPUSH
40475: LD_VAR 0 5
40479: PPUSH
40480: CALL_OW 272
40484: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
40485: LD_ADDR_VAR 0 10
40489: PUSH
40490: LD_VAR 0 1
40494: PPUSH
40495: CALL_OW 251
40499: PPUSH
40500: LD_VAR 0 7
40504: PPUSH
40505: LD_VAR 0 5
40509: PPUSH
40510: CALL_OW 273
40514: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40515: LD_VAR 0 9
40519: PPUSH
40520: LD_VAR 0 10
40524: PPUSH
40525: CALL_OW 488
40529: NOT
40530: IFFALSE 40534
// exit ;
40532: GO 40652
// ComAnimCustom ( unit , 1 ) ;
40534: LD_VAR 0 1
40538: PPUSH
40539: LD_INT 1
40541: PPUSH
40542: CALL_OW 592
// p := 0 ;
40546: LD_ADDR_VAR 0 12
40550: PUSH
40551: LD_INT 0
40553: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
40554: LD_VAR 0 9
40558: PPUSH
40559: LD_VAR 0 10
40563: PPUSH
40564: LD_VAR 0 6
40568: PPUSH
40569: LD_VAR 0 8
40573: PPUSH
40574: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
40578: LD_INT 35
40580: PPUSH
40581: CALL_OW 67
// p := Inc ( p ) ;
40585: LD_ADDR_VAR 0 12
40589: PUSH
40590: LD_VAR 0 12
40594: PPUSH
40595: CALL 79750 0 1
40599: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
40600: LD_VAR 0 12
40604: PUSH
40605: LD_INT 3
40607: EQUAL
40608: PUSH
40609: LD_VAR 0 1
40613: PPUSH
40614: CALL_OW 302
40618: NOT
40619: OR
40620: PUSH
40621: LD_VAR 0 1
40625: PPUSH
40626: CALL_OW 301
40630: OR
40631: IFFALSE 40578
// RemoveSeeing ( _x , _y , side ) ;
40633: LD_VAR 0 9
40637: PPUSH
40638: LD_VAR 0 10
40642: PPUSH
40643: LD_VAR 0 6
40647: PPUSH
40648: CALL_OW 331
// end ; end_of_file
40652: LD_VAR 0 4
40656: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
40657: LD_INT 0
40659: PPUSH
40660: PPUSH
// if exist_mode then
40661: LD_VAR 0 2
40665: IFFALSE 40711
// begin unit := CreateCharacter ( prefix & ident ) ;
40667: LD_ADDR_VAR 0 5
40671: PUSH
40672: LD_VAR 0 3
40676: PUSH
40677: LD_VAR 0 1
40681: STR
40682: PPUSH
40683: CALL_OW 34
40687: ST_TO_ADDR
// if unit then
40688: LD_VAR 0 5
40692: IFFALSE 40709
// DeleteCharacters ( prefix & ident ) ;
40694: LD_VAR 0 3
40698: PUSH
40699: LD_VAR 0 1
40703: STR
40704: PPUSH
40705: CALL_OW 40
// end else
40709: GO 40726
// unit := NewCharacter ( ident ) ;
40711: LD_ADDR_VAR 0 5
40715: PUSH
40716: LD_VAR 0 1
40720: PPUSH
40721: CALL_OW 25
40725: ST_TO_ADDR
// result := unit ;
40726: LD_ADDR_VAR 0 4
40730: PUSH
40731: LD_VAR 0 5
40735: ST_TO_ADDR
// end ;
40736: LD_VAR 0 4
40740: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
40741: LD_INT 0
40743: PPUSH
40744: PPUSH
// if not side or not nation then
40745: LD_VAR 0 1
40749: NOT
40750: PUSH
40751: LD_VAR 0 2
40755: NOT
40756: OR
40757: IFFALSE 40761
// exit ;
40759: GO 41529
// case nation of nation_american :
40761: LD_VAR 0 2
40765: PUSH
40766: LD_INT 1
40768: DOUBLE
40769: EQUAL
40770: IFTRUE 40774
40772: GO 40988
40774: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
40775: LD_ADDR_VAR 0 4
40779: PUSH
40780: LD_INT 35
40782: PUSH
40783: LD_INT 45
40785: PUSH
40786: LD_INT 46
40788: PUSH
40789: LD_INT 47
40791: PUSH
40792: LD_INT 82
40794: PUSH
40795: LD_INT 83
40797: PUSH
40798: LD_INT 84
40800: PUSH
40801: LD_INT 85
40803: PUSH
40804: LD_INT 86
40806: PUSH
40807: LD_INT 1
40809: PUSH
40810: LD_INT 2
40812: PUSH
40813: LD_INT 6
40815: PUSH
40816: LD_INT 15
40818: PUSH
40819: LD_INT 16
40821: PUSH
40822: LD_INT 7
40824: PUSH
40825: LD_INT 12
40827: PUSH
40828: LD_INT 13
40830: PUSH
40831: LD_INT 10
40833: PUSH
40834: LD_INT 14
40836: PUSH
40837: LD_INT 20
40839: PUSH
40840: LD_INT 21
40842: PUSH
40843: LD_INT 22
40845: PUSH
40846: LD_INT 25
40848: PUSH
40849: LD_INT 32
40851: PUSH
40852: LD_INT 27
40854: PUSH
40855: LD_INT 36
40857: PUSH
40858: LD_INT 69
40860: PUSH
40861: LD_INT 39
40863: PUSH
40864: LD_INT 34
40866: PUSH
40867: LD_INT 40
40869: PUSH
40870: LD_INT 48
40872: PUSH
40873: LD_INT 49
40875: PUSH
40876: LD_INT 50
40878: PUSH
40879: LD_INT 51
40881: PUSH
40882: LD_INT 52
40884: PUSH
40885: LD_INT 53
40887: PUSH
40888: LD_INT 54
40890: PUSH
40891: LD_INT 55
40893: PUSH
40894: LD_INT 56
40896: PUSH
40897: LD_INT 57
40899: PUSH
40900: LD_INT 58
40902: PUSH
40903: LD_INT 59
40905: PUSH
40906: LD_INT 60
40908: PUSH
40909: LD_INT 61
40911: PUSH
40912: LD_INT 62
40914: PUSH
40915: LD_INT 80
40917: PUSH
40918: LD_INT 82
40920: PUSH
40921: LD_INT 83
40923: PUSH
40924: LD_INT 84
40926: PUSH
40927: LD_INT 85
40929: PUSH
40930: LD_INT 86
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: ST_TO_ADDR
40986: GO 41453
40988: LD_INT 2
40990: DOUBLE
40991: EQUAL
40992: IFTRUE 40996
40994: GO 41222
40996: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40997: LD_ADDR_VAR 0 4
41001: PUSH
41002: LD_INT 35
41004: PUSH
41005: LD_INT 45
41007: PUSH
41008: LD_INT 46
41010: PUSH
41011: LD_INT 47
41013: PUSH
41014: LD_INT 82
41016: PUSH
41017: LD_INT 83
41019: PUSH
41020: LD_INT 84
41022: PUSH
41023: LD_INT 85
41025: PUSH
41026: LD_INT 87
41028: PUSH
41029: LD_INT 70
41031: PUSH
41032: LD_INT 1
41034: PUSH
41035: LD_INT 11
41037: PUSH
41038: LD_INT 3
41040: PUSH
41041: LD_INT 4
41043: PUSH
41044: LD_INT 5
41046: PUSH
41047: LD_INT 6
41049: PUSH
41050: LD_INT 15
41052: PUSH
41053: LD_INT 18
41055: PUSH
41056: LD_INT 7
41058: PUSH
41059: LD_INT 17
41061: PUSH
41062: LD_INT 8
41064: PUSH
41065: LD_INT 20
41067: PUSH
41068: LD_INT 21
41070: PUSH
41071: LD_INT 22
41073: PUSH
41074: LD_INT 72
41076: PUSH
41077: LD_INT 26
41079: PUSH
41080: LD_INT 69
41082: PUSH
41083: LD_INT 39
41085: PUSH
41086: LD_INT 40
41088: PUSH
41089: LD_INT 41
41091: PUSH
41092: LD_INT 42
41094: PUSH
41095: LD_INT 43
41097: PUSH
41098: LD_INT 48
41100: PUSH
41101: LD_INT 49
41103: PUSH
41104: LD_INT 50
41106: PUSH
41107: LD_INT 51
41109: PUSH
41110: LD_INT 52
41112: PUSH
41113: LD_INT 53
41115: PUSH
41116: LD_INT 54
41118: PUSH
41119: LD_INT 55
41121: PUSH
41122: LD_INT 56
41124: PUSH
41125: LD_INT 60
41127: PUSH
41128: LD_INT 61
41130: PUSH
41131: LD_INT 62
41133: PUSH
41134: LD_INT 66
41136: PUSH
41137: LD_INT 67
41139: PUSH
41140: LD_INT 68
41142: PUSH
41143: LD_INT 81
41145: PUSH
41146: LD_INT 82
41148: PUSH
41149: LD_INT 83
41151: PUSH
41152: LD_INT 84
41154: PUSH
41155: LD_INT 85
41157: PUSH
41158: LD_INT 87
41160: PUSH
41161: LD_INT 88
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: ST_TO_ADDR
41220: GO 41453
41222: LD_INT 3
41224: DOUBLE
41225: EQUAL
41226: IFTRUE 41230
41228: GO 41452
41230: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41231: LD_ADDR_VAR 0 4
41235: PUSH
41236: LD_INT 46
41238: PUSH
41239: LD_INT 47
41241: PUSH
41242: LD_INT 1
41244: PUSH
41245: LD_INT 2
41247: PUSH
41248: LD_INT 82
41250: PUSH
41251: LD_INT 83
41253: PUSH
41254: LD_INT 84
41256: PUSH
41257: LD_INT 85
41259: PUSH
41260: LD_INT 86
41262: PUSH
41263: LD_INT 11
41265: PUSH
41266: LD_INT 9
41268: PUSH
41269: LD_INT 20
41271: PUSH
41272: LD_INT 19
41274: PUSH
41275: LD_INT 21
41277: PUSH
41278: LD_INT 24
41280: PUSH
41281: LD_INT 22
41283: PUSH
41284: LD_INT 25
41286: PUSH
41287: LD_INT 28
41289: PUSH
41290: LD_INT 29
41292: PUSH
41293: LD_INT 30
41295: PUSH
41296: LD_INT 31
41298: PUSH
41299: LD_INT 37
41301: PUSH
41302: LD_INT 38
41304: PUSH
41305: LD_INT 32
41307: PUSH
41308: LD_INT 27
41310: PUSH
41311: LD_INT 33
41313: PUSH
41314: LD_INT 69
41316: PUSH
41317: LD_INT 39
41319: PUSH
41320: LD_INT 34
41322: PUSH
41323: LD_INT 40
41325: PUSH
41326: LD_INT 71
41328: PUSH
41329: LD_INT 23
41331: PUSH
41332: LD_INT 44
41334: PUSH
41335: LD_INT 48
41337: PUSH
41338: LD_INT 49
41340: PUSH
41341: LD_INT 50
41343: PUSH
41344: LD_INT 51
41346: PUSH
41347: LD_INT 52
41349: PUSH
41350: LD_INT 53
41352: PUSH
41353: LD_INT 54
41355: PUSH
41356: LD_INT 55
41358: PUSH
41359: LD_INT 56
41361: PUSH
41362: LD_INT 57
41364: PUSH
41365: LD_INT 58
41367: PUSH
41368: LD_INT 59
41370: PUSH
41371: LD_INT 63
41373: PUSH
41374: LD_INT 64
41376: PUSH
41377: LD_INT 65
41379: PUSH
41380: LD_INT 82
41382: PUSH
41383: LD_INT 83
41385: PUSH
41386: LD_INT 84
41388: PUSH
41389: LD_INT 85
41391: PUSH
41392: LD_INT 86
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: ST_TO_ADDR
41450: GO 41453
41452: POP
// if state > - 1 and state < 3 then
41453: LD_VAR 0 3
41457: PUSH
41458: LD_INT 1
41460: NEG
41461: GREATER
41462: PUSH
41463: LD_VAR 0 3
41467: PUSH
41468: LD_INT 3
41470: LESS
41471: AND
41472: IFFALSE 41529
// for i in result do
41474: LD_ADDR_VAR 0 5
41478: PUSH
41479: LD_VAR 0 4
41483: PUSH
41484: FOR_IN
41485: IFFALSE 41527
// if GetTech ( i , side ) <> state then
41487: LD_VAR 0 5
41491: PPUSH
41492: LD_VAR 0 1
41496: PPUSH
41497: CALL_OW 321
41501: PUSH
41502: LD_VAR 0 3
41506: NONEQUAL
41507: IFFALSE 41525
// result := result diff i ;
41509: LD_ADDR_VAR 0 4
41513: PUSH
41514: LD_VAR 0 4
41518: PUSH
41519: LD_VAR 0 5
41523: DIFF
41524: ST_TO_ADDR
41525: GO 41484
41527: POP
41528: POP
// end ;
41529: LD_VAR 0 4
41533: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41534: LD_INT 0
41536: PPUSH
41537: PPUSH
41538: PPUSH
// result := true ;
41539: LD_ADDR_VAR 0 3
41543: PUSH
41544: LD_INT 1
41546: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41547: LD_ADDR_VAR 0 5
41551: PUSH
41552: LD_VAR 0 2
41556: PPUSH
41557: CALL_OW 480
41561: ST_TO_ADDR
// if not tmp then
41562: LD_VAR 0 5
41566: NOT
41567: IFFALSE 41571
// exit ;
41569: GO 41620
// for i in tmp do
41571: LD_ADDR_VAR 0 4
41575: PUSH
41576: LD_VAR 0 5
41580: PUSH
41581: FOR_IN
41582: IFFALSE 41618
// if GetTech ( i , side ) <> state_researched then
41584: LD_VAR 0 4
41588: PPUSH
41589: LD_VAR 0 1
41593: PPUSH
41594: CALL_OW 321
41598: PUSH
41599: LD_INT 2
41601: NONEQUAL
41602: IFFALSE 41616
// begin result := false ;
41604: LD_ADDR_VAR 0 3
41608: PUSH
41609: LD_INT 0
41611: ST_TO_ADDR
// exit ;
41612: POP
41613: POP
41614: GO 41620
// end ;
41616: GO 41581
41618: POP
41619: POP
// end ;
41620: LD_VAR 0 3
41624: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
41625: LD_INT 0
41627: PPUSH
41628: PPUSH
41629: PPUSH
41630: PPUSH
41631: PPUSH
41632: PPUSH
41633: PPUSH
41634: PPUSH
41635: PPUSH
41636: PPUSH
41637: PPUSH
41638: PPUSH
41639: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
41640: LD_VAR 0 1
41644: NOT
41645: PUSH
41646: LD_VAR 0 1
41650: PPUSH
41651: CALL_OW 257
41655: PUSH
41656: LD_INT 9
41658: NONEQUAL
41659: OR
41660: IFFALSE 41664
// exit ;
41662: GO 42237
// side := GetSide ( unit ) ;
41664: LD_ADDR_VAR 0 9
41668: PUSH
41669: LD_VAR 0 1
41673: PPUSH
41674: CALL_OW 255
41678: ST_TO_ADDR
// tech_space := tech_spacanom ;
41679: LD_ADDR_VAR 0 12
41683: PUSH
41684: LD_INT 29
41686: ST_TO_ADDR
// tech_time := tech_taurad ;
41687: LD_ADDR_VAR 0 13
41691: PUSH
41692: LD_INT 28
41694: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
41695: LD_ADDR_VAR 0 11
41699: PUSH
41700: LD_VAR 0 1
41704: PPUSH
41705: CALL_OW 310
41709: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
41710: LD_VAR 0 11
41714: PPUSH
41715: CALL_OW 247
41719: PUSH
41720: LD_INT 2
41722: EQUAL
41723: IFFALSE 41727
// exit ;
41725: GO 42237
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41727: LD_ADDR_VAR 0 8
41731: PUSH
41732: LD_INT 81
41734: PUSH
41735: LD_VAR 0 9
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 3
41746: PUSH
41747: LD_INT 21
41749: PUSH
41750: LD_INT 3
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PPUSH
41765: CALL_OW 69
41769: ST_TO_ADDR
// if not tmp then
41770: LD_VAR 0 8
41774: NOT
41775: IFFALSE 41779
// exit ;
41777: GO 42237
// if in_unit then
41779: LD_VAR 0 11
41783: IFFALSE 41807
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
41785: LD_ADDR_VAR 0 10
41789: PUSH
41790: LD_VAR 0 8
41794: PPUSH
41795: LD_VAR 0 11
41799: PPUSH
41800: CALL_OW 74
41804: ST_TO_ADDR
41805: GO 41827
// enemy := NearestUnitToUnit ( tmp , unit ) ;
41807: LD_ADDR_VAR 0 10
41811: PUSH
41812: LD_VAR 0 8
41816: PPUSH
41817: LD_VAR 0 1
41821: PPUSH
41822: CALL_OW 74
41826: ST_TO_ADDR
// if not enemy then
41827: LD_VAR 0 10
41831: NOT
41832: IFFALSE 41836
// exit ;
41834: GO 42237
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
41836: LD_VAR 0 11
41840: PUSH
41841: LD_VAR 0 11
41845: PPUSH
41846: LD_VAR 0 10
41850: PPUSH
41851: CALL_OW 296
41855: PUSH
41856: LD_INT 13
41858: GREATER
41859: AND
41860: PUSH
41861: LD_VAR 0 1
41865: PPUSH
41866: LD_VAR 0 10
41870: PPUSH
41871: CALL_OW 296
41875: PUSH
41876: LD_INT 12
41878: GREATER
41879: OR
41880: IFFALSE 41884
// exit ;
41882: GO 42237
// missile := [ 1 ] ;
41884: LD_ADDR_VAR 0 14
41888: PUSH
41889: LD_INT 1
41891: PUSH
41892: EMPTY
41893: LIST
41894: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41895: LD_VAR 0 9
41899: PPUSH
41900: LD_VAR 0 12
41904: PPUSH
41905: CALL_OW 325
41909: IFFALSE 41938
// missile := Replace ( missile , missile + 1 , 2 ) ;
41911: LD_ADDR_VAR 0 14
41915: PUSH
41916: LD_VAR 0 14
41920: PPUSH
41921: LD_VAR 0 14
41925: PUSH
41926: LD_INT 1
41928: PLUS
41929: PPUSH
41930: LD_INT 2
41932: PPUSH
41933: CALL_OW 1
41937: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41938: LD_VAR 0 9
41942: PPUSH
41943: LD_VAR 0 13
41947: PPUSH
41948: CALL_OW 325
41952: PUSH
41953: LD_VAR 0 10
41957: PPUSH
41958: CALL_OW 255
41962: PPUSH
41963: LD_VAR 0 13
41967: PPUSH
41968: CALL_OW 325
41972: NOT
41973: AND
41974: IFFALSE 42003
// missile := Replace ( missile , missile + 1 , 3 ) ;
41976: LD_ADDR_VAR 0 14
41980: PUSH
41981: LD_VAR 0 14
41985: PPUSH
41986: LD_VAR 0 14
41990: PUSH
41991: LD_INT 1
41993: PLUS
41994: PPUSH
41995: LD_INT 3
41997: PPUSH
41998: CALL_OW 1
42002: ST_TO_ADDR
// if missile < 2 then
42003: LD_VAR 0 14
42007: PUSH
42008: LD_INT 2
42010: LESS
42011: IFFALSE 42015
// exit ;
42013: GO 42237
// x := GetX ( enemy ) ;
42015: LD_ADDR_VAR 0 4
42019: PUSH
42020: LD_VAR 0 10
42024: PPUSH
42025: CALL_OW 250
42029: ST_TO_ADDR
// y := GetY ( enemy ) ;
42030: LD_ADDR_VAR 0 5
42034: PUSH
42035: LD_VAR 0 10
42039: PPUSH
42040: CALL_OW 251
42044: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42045: LD_ADDR_VAR 0 6
42049: PUSH
42050: LD_VAR 0 4
42054: PUSH
42055: LD_INT 1
42057: NEG
42058: PPUSH
42059: LD_INT 1
42061: PPUSH
42062: CALL_OW 12
42066: PLUS
42067: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42068: LD_ADDR_VAR 0 7
42072: PUSH
42073: LD_VAR 0 5
42077: PUSH
42078: LD_INT 1
42080: NEG
42081: PPUSH
42082: LD_INT 1
42084: PPUSH
42085: CALL_OW 12
42089: PLUS
42090: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42091: LD_VAR 0 6
42095: PPUSH
42096: LD_VAR 0 7
42100: PPUSH
42101: CALL_OW 488
42105: NOT
42106: IFFALSE 42128
// begin _x := x ;
42108: LD_ADDR_VAR 0 6
42112: PUSH
42113: LD_VAR 0 4
42117: ST_TO_ADDR
// _y := y ;
42118: LD_ADDR_VAR 0 7
42122: PUSH
42123: LD_VAR 0 5
42127: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42128: LD_ADDR_VAR 0 3
42132: PUSH
42133: LD_INT 1
42135: PPUSH
42136: LD_VAR 0 14
42140: PPUSH
42141: CALL_OW 12
42145: ST_TO_ADDR
// case i of 1 :
42146: LD_VAR 0 3
42150: PUSH
42151: LD_INT 1
42153: DOUBLE
42154: EQUAL
42155: IFTRUE 42159
42157: GO 42176
42159: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42160: LD_VAR 0 1
42164: PPUSH
42165: LD_VAR 0 10
42169: PPUSH
42170: CALL_OW 115
42174: GO 42237
42176: LD_INT 2
42178: DOUBLE
42179: EQUAL
42180: IFTRUE 42184
42182: GO 42206
42184: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42185: LD_VAR 0 1
42189: PPUSH
42190: LD_VAR 0 6
42194: PPUSH
42195: LD_VAR 0 7
42199: PPUSH
42200: CALL_OW 153
42204: GO 42237
42206: LD_INT 3
42208: DOUBLE
42209: EQUAL
42210: IFTRUE 42214
42212: GO 42236
42214: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42215: LD_VAR 0 1
42219: PPUSH
42220: LD_VAR 0 6
42224: PPUSH
42225: LD_VAR 0 7
42229: PPUSH
42230: CALL_OW 154
42234: GO 42237
42236: POP
// end ;
42237: LD_VAR 0 2
42241: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42242: LD_INT 0
42244: PPUSH
42245: PPUSH
42246: PPUSH
42247: PPUSH
42248: PPUSH
42249: PPUSH
// if not unit or not building then
42250: LD_VAR 0 1
42254: NOT
42255: PUSH
42256: LD_VAR 0 2
42260: NOT
42261: OR
42262: IFFALSE 42266
// exit ;
42264: GO 42424
// x := GetX ( building ) ;
42266: LD_ADDR_VAR 0 5
42270: PUSH
42271: LD_VAR 0 2
42275: PPUSH
42276: CALL_OW 250
42280: ST_TO_ADDR
// y := GetY ( building ) ;
42281: LD_ADDR_VAR 0 6
42285: PUSH
42286: LD_VAR 0 2
42290: PPUSH
42291: CALL_OW 251
42295: ST_TO_ADDR
// for i = 0 to 5 do
42296: LD_ADDR_VAR 0 4
42300: PUSH
42301: DOUBLE
42302: LD_INT 0
42304: DEC
42305: ST_TO_ADDR
42306: LD_INT 5
42308: PUSH
42309: FOR_TO
42310: IFFALSE 42422
// begin _x := ShiftX ( x , i , 3 ) ;
42312: LD_ADDR_VAR 0 7
42316: PUSH
42317: LD_VAR 0 5
42321: PPUSH
42322: LD_VAR 0 4
42326: PPUSH
42327: LD_INT 3
42329: PPUSH
42330: CALL_OW 272
42334: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42335: LD_ADDR_VAR 0 8
42339: PUSH
42340: LD_VAR 0 6
42344: PPUSH
42345: LD_VAR 0 4
42349: PPUSH
42350: LD_INT 3
42352: PPUSH
42353: CALL_OW 273
42357: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42358: LD_VAR 0 7
42362: PPUSH
42363: LD_VAR 0 8
42367: PPUSH
42368: CALL_OW 488
42372: NOT
42373: IFFALSE 42377
// continue ;
42375: GO 42309
// if HexInfo ( _x , _y ) = 0 then
42377: LD_VAR 0 7
42381: PPUSH
42382: LD_VAR 0 8
42386: PPUSH
42387: CALL_OW 428
42391: PUSH
42392: LD_INT 0
42394: EQUAL
42395: IFFALSE 42420
// begin ComMoveXY ( unit , _x , _y ) ;
42397: LD_VAR 0 1
42401: PPUSH
42402: LD_VAR 0 7
42406: PPUSH
42407: LD_VAR 0 8
42411: PPUSH
42412: CALL_OW 111
// exit ;
42416: POP
42417: POP
42418: GO 42424
// end ; end ;
42420: GO 42309
42422: POP
42423: POP
// end ;
42424: LD_VAR 0 3
42428: RET
// export function ScanBase ( side , base_area ) ; begin
42429: LD_INT 0
42431: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42432: LD_ADDR_VAR 0 3
42436: PUSH
42437: LD_VAR 0 2
42441: PPUSH
42442: LD_INT 81
42444: PUSH
42445: LD_VAR 0 1
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PPUSH
42454: CALL_OW 70
42458: ST_TO_ADDR
// end ;
42459: LD_VAR 0 3
42463: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42464: LD_INT 0
42466: PPUSH
42467: PPUSH
42468: PPUSH
42469: PPUSH
// result := false ;
42470: LD_ADDR_VAR 0 2
42474: PUSH
42475: LD_INT 0
42477: ST_TO_ADDR
// side := GetSide ( unit ) ;
42478: LD_ADDR_VAR 0 3
42482: PUSH
42483: LD_VAR 0 1
42487: PPUSH
42488: CALL_OW 255
42492: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42493: LD_ADDR_VAR 0 4
42497: PUSH
42498: LD_VAR 0 1
42502: PPUSH
42503: CALL_OW 248
42507: ST_TO_ADDR
// case nat of 1 :
42508: LD_VAR 0 4
42512: PUSH
42513: LD_INT 1
42515: DOUBLE
42516: EQUAL
42517: IFTRUE 42521
42519: GO 42532
42521: POP
// tech := tech_lassight ; 2 :
42522: LD_ADDR_VAR 0 5
42526: PUSH
42527: LD_INT 12
42529: ST_TO_ADDR
42530: GO 42571
42532: LD_INT 2
42534: DOUBLE
42535: EQUAL
42536: IFTRUE 42540
42538: GO 42551
42540: POP
// tech := tech_mortar ; 3 :
42541: LD_ADDR_VAR 0 5
42545: PUSH
42546: LD_INT 41
42548: ST_TO_ADDR
42549: GO 42571
42551: LD_INT 3
42553: DOUBLE
42554: EQUAL
42555: IFTRUE 42559
42557: GO 42570
42559: POP
// tech := tech_bazooka ; end ;
42560: LD_ADDR_VAR 0 5
42564: PUSH
42565: LD_INT 44
42567: ST_TO_ADDR
42568: GO 42571
42570: POP
// if Researched ( side , tech ) then
42571: LD_VAR 0 3
42575: PPUSH
42576: LD_VAR 0 5
42580: PPUSH
42581: CALL_OW 325
42585: IFFALSE 42612
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42587: LD_ADDR_VAR 0 2
42591: PUSH
42592: LD_INT 5
42594: PUSH
42595: LD_INT 8
42597: PUSH
42598: LD_INT 9
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: LIST
42605: PUSH
42606: LD_VAR 0 4
42610: ARRAY
42611: ST_TO_ADDR
// end ;
42612: LD_VAR 0 2
42616: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42617: LD_INT 0
42619: PPUSH
42620: PPUSH
42621: PPUSH
// if not mines then
42622: LD_VAR 0 2
42626: NOT
42627: IFFALSE 42631
// exit ;
42629: GO 42775
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42631: LD_ADDR_VAR 0 5
42635: PUSH
42636: LD_INT 81
42638: PUSH
42639: LD_VAR 0 1
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 3
42650: PUSH
42651: LD_INT 21
42653: PUSH
42654: LD_INT 3
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PPUSH
42669: CALL_OW 69
42673: ST_TO_ADDR
// for i in mines do
42674: LD_ADDR_VAR 0 4
42678: PUSH
42679: LD_VAR 0 2
42683: PUSH
42684: FOR_IN
42685: IFFALSE 42773
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
42687: LD_VAR 0 4
42691: PUSH
42692: LD_INT 1
42694: ARRAY
42695: PPUSH
42696: LD_VAR 0 4
42700: PUSH
42701: LD_INT 2
42703: ARRAY
42704: PPUSH
42705: CALL_OW 458
42709: NOT
42710: IFFALSE 42714
// continue ;
42712: GO 42684
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
42714: LD_VAR 0 4
42718: PUSH
42719: LD_INT 1
42721: ARRAY
42722: PPUSH
42723: LD_VAR 0 4
42727: PUSH
42728: LD_INT 2
42730: ARRAY
42731: PPUSH
42732: CALL_OW 428
42736: PUSH
42737: LD_VAR 0 5
42741: IN
42742: IFFALSE 42771
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
42744: LD_VAR 0 4
42748: PUSH
42749: LD_INT 1
42751: ARRAY
42752: PPUSH
42753: LD_VAR 0 4
42757: PUSH
42758: LD_INT 2
42760: ARRAY
42761: PPUSH
42762: LD_VAR 0 1
42766: PPUSH
42767: CALL_OW 456
// end ;
42771: GO 42684
42773: POP
42774: POP
// end ;
42775: LD_VAR 0 3
42779: RET
// export function Count ( array ) ; begin
42780: LD_INT 0
42782: PPUSH
// result := array + 0 ;
42783: LD_ADDR_VAR 0 2
42787: PUSH
42788: LD_VAR 0 1
42792: PUSH
42793: LD_INT 0
42795: PLUS
42796: ST_TO_ADDR
// end ;
42797: LD_VAR 0 2
42801: RET
// export function IsEmpty ( building ) ; begin
42802: LD_INT 0
42804: PPUSH
// if not building then
42805: LD_VAR 0 1
42809: NOT
42810: IFFALSE 42814
// exit ;
42812: GO 42857
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42814: LD_ADDR_VAR 0 2
42818: PUSH
42819: LD_VAR 0 1
42823: PUSH
42824: LD_INT 22
42826: PUSH
42827: LD_VAR 0 1
42831: PPUSH
42832: CALL_OW 255
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 58
42843: PUSH
42844: EMPTY
42845: LIST
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PPUSH
42851: CALL_OW 69
42855: IN
42856: ST_TO_ADDR
// end ;
42857: LD_VAR 0 2
42861: RET
// export function IsNotFull ( building ) ; var places ; begin
42862: LD_INT 0
42864: PPUSH
42865: PPUSH
// if not building then
42866: LD_VAR 0 1
42870: NOT
42871: IFFALSE 42875
// exit ;
42873: GO 42903
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
42875: LD_ADDR_VAR 0 2
42879: PUSH
42880: LD_VAR 0 1
42884: PPUSH
42885: LD_INT 3
42887: PUSH
42888: LD_INT 62
42890: PUSH
42891: EMPTY
42892: LIST
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PPUSH
42898: CALL_OW 72
42902: ST_TO_ADDR
// end ;
42903: LD_VAR 0 2
42907: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42908: LD_INT 0
42910: PPUSH
42911: PPUSH
42912: PPUSH
42913: PPUSH
// tmp := [ ] ;
42914: LD_ADDR_VAR 0 3
42918: PUSH
42919: EMPTY
42920: ST_TO_ADDR
// list := [ ] ;
42921: LD_ADDR_VAR 0 5
42925: PUSH
42926: EMPTY
42927: ST_TO_ADDR
// for i = 16 to 25 do
42928: LD_ADDR_VAR 0 4
42932: PUSH
42933: DOUBLE
42934: LD_INT 16
42936: DEC
42937: ST_TO_ADDR
42938: LD_INT 25
42940: PUSH
42941: FOR_TO
42942: IFFALSE 43015
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42944: LD_ADDR_VAR 0 3
42948: PUSH
42949: LD_VAR 0 3
42953: PUSH
42954: LD_INT 22
42956: PUSH
42957: LD_VAR 0 1
42961: PPUSH
42962: CALL_OW 255
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 91
42973: PUSH
42974: LD_VAR 0 1
42978: PUSH
42979: LD_INT 6
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 30
42989: PUSH
42990: LD_VAR 0 4
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: LIST
43003: PUSH
43004: EMPTY
43005: LIST
43006: PPUSH
43007: CALL_OW 69
43011: ADD
43012: ST_TO_ADDR
43013: GO 42941
43015: POP
43016: POP
// for i = 1 to tmp do
43017: LD_ADDR_VAR 0 4
43021: PUSH
43022: DOUBLE
43023: LD_INT 1
43025: DEC
43026: ST_TO_ADDR
43027: LD_VAR 0 3
43031: PUSH
43032: FOR_TO
43033: IFFALSE 43121
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43035: LD_ADDR_VAR 0 5
43039: PUSH
43040: LD_VAR 0 5
43044: PUSH
43045: LD_VAR 0 3
43049: PUSH
43050: LD_VAR 0 4
43054: ARRAY
43055: PPUSH
43056: CALL_OW 266
43060: PUSH
43061: LD_VAR 0 3
43065: PUSH
43066: LD_VAR 0 4
43070: ARRAY
43071: PPUSH
43072: CALL_OW 250
43076: PUSH
43077: LD_VAR 0 3
43081: PUSH
43082: LD_VAR 0 4
43086: ARRAY
43087: PPUSH
43088: CALL_OW 251
43092: PUSH
43093: LD_VAR 0 3
43097: PUSH
43098: LD_VAR 0 4
43102: ARRAY
43103: PPUSH
43104: CALL_OW 254
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: PUSH
43115: EMPTY
43116: LIST
43117: ADD
43118: ST_TO_ADDR
43119: GO 43032
43121: POP
43122: POP
// result := list ;
43123: LD_ADDR_VAR 0 2
43127: PUSH
43128: LD_VAR 0 5
43132: ST_TO_ADDR
// end ;
43133: LD_VAR 0 2
43137: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43138: LD_INT 0
43140: PPUSH
43141: PPUSH
43142: PPUSH
43143: PPUSH
43144: PPUSH
43145: PPUSH
43146: PPUSH
// if not factory then
43147: LD_VAR 0 1
43151: NOT
43152: IFFALSE 43156
// exit ;
43154: GO 43749
// if control = control_apeman then
43156: LD_VAR 0 4
43160: PUSH
43161: LD_INT 5
43163: EQUAL
43164: IFFALSE 43273
// begin tmp := UnitsInside ( factory ) ;
43166: LD_ADDR_VAR 0 8
43170: PUSH
43171: LD_VAR 0 1
43175: PPUSH
43176: CALL_OW 313
43180: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43181: LD_VAR 0 8
43185: PPUSH
43186: LD_INT 25
43188: PUSH
43189: LD_INT 12
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PPUSH
43196: CALL_OW 72
43200: NOT
43201: IFFALSE 43211
// control := control_manual ;
43203: LD_ADDR_VAR 0 4
43207: PUSH
43208: LD_INT 1
43210: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43211: LD_ADDR_VAR 0 8
43215: PUSH
43216: LD_VAR 0 1
43220: PPUSH
43221: CALL 42908 0 1
43225: ST_TO_ADDR
// if tmp then
43226: LD_VAR 0 8
43230: IFFALSE 43273
// begin for i in tmp do
43232: LD_ADDR_VAR 0 7
43236: PUSH
43237: LD_VAR 0 8
43241: PUSH
43242: FOR_IN
43243: IFFALSE 43271
// if i [ 1 ] = b_ext_radio then
43245: LD_VAR 0 7
43249: PUSH
43250: LD_INT 1
43252: ARRAY
43253: PUSH
43254: LD_INT 22
43256: EQUAL
43257: IFFALSE 43269
// begin control := control_remote ;
43259: LD_ADDR_VAR 0 4
43263: PUSH
43264: LD_INT 2
43266: ST_TO_ADDR
// break ;
43267: GO 43271
// end ;
43269: GO 43242
43271: POP
43272: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43273: LD_VAR 0 1
43277: PPUSH
43278: LD_VAR 0 2
43282: PPUSH
43283: LD_VAR 0 3
43287: PPUSH
43288: LD_VAR 0 4
43292: PPUSH
43293: LD_VAR 0 5
43297: PPUSH
43298: CALL_OW 448
43302: IFFALSE 43337
// begin result := [ chassis , engine , control , weapon ] ;
43304: LD_ADDR_VAR 0 6
43308: PUSH
43309: LD_VAR 0 2
43313: PUSH
43314: LD_VAR 0 3
43318: PUSH
43319: LD_VAR 0 4
43323: PUSH
43324: LD_VAR 0 5
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: ST_TO_ADDR
// exit ;
43335: GO 43749
// end ; _chassis := AvailableChassisList ( factory ) ;
43337: LD_ADDR_VAR 0 9
43341: PUSH
43342: LD_VAR 0 1
43346: PPUSH
43347: CALL_OW 475
43351: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
43352: LD_ADDR_VAR 0 11
43356: PUSH
43357: LD_VAR 0 1
43361: PPUSH
43362: CALL_OW 476
43366: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
43367: LD_ADDR_VAR 0 12
43371: PUSH
43372: LD_VAR 0 1
43376: PPUSH
43377: CALL_OW 477
43381: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
43382: LD_ADDR_VAR 0 10
43386: PUSH
43387: LD_VAR 0 1
43391: PPUSH
43392: CALL_OW 478
43396: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
43397: LD_VAR 0 9
43401: NOT
43402: PUSH
43403: LD_VAR 0 11
43407: NOT
43408: OR
43409: PUSH
43410: LD_VAR 0 12
43414: NOT
43415: OR
43416: PUSH
43417: LD_VAR 0 10
43421: NOT
43422: OR
43423: IFFALSE 43458
// begin result := [ chassis , engine , control , weapon ] ;
43425: LD_ADDR_VAR 0 6
43429: PUSH
43430: LD_VAR 0 2
43434: PUSH
43435: LD_VAR 0 3
43439: PUSH
43440: LD_VAR 0 4
43444: PUSH
43445: LD_VAR 0 5
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: ST_TO_ADDR
// exit ;
43456: GO 43749
// end ; if not chassis in _chassis then
43458: LD_VAR 0 2
43462: PUSH
43463: LD_VAR 0 9
43467: IN
43468: NOT
43469: IFFALSE 43495
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43471: LD_ADDR_VAR 0 2
43475: PUSH
43476: LD_VAR 0 9
43480: PUSH
43481: LD_INT 1
43483: PPUSH
43484: LD_VAR 0 9
43488: PPUSH
43489: CALL_OW 12
43493: ARRAY
43494: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43495: LD_VAR 0 2
43499: PPUSH
43500: LD_VAR 0 3
43504: PPUSH
43505: CALL 43754 0 2
43509: NOT
43510: IFFALSE 43569
// repeat engine := _engine [ 1 ] ;
43512: LD_ADDR_VAR 0 3
43516: PUSH
43517: LD_VAR 0 11
43521: PUSH
43522: LD_INT 1
43524: ARRAY
43525: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43526: LD_ADDR_VAR 0 11
43530: PUSH
43531: LD_VAR 0 11
43535: PPUSH
43536: LD_INT 1
43538: PPUSH
43539: CALL_OW 3
43543: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
43544: LD_VAR 0 2
43548: PPUSH
43549: LD_VAR 0 3
43553: PPUSH
43554: CALL 43754 0 2
43558: PUSH
43559: LD_VAR 0 11
43563: PUSH
43564: EMPTY
43565: EQUAL
43566: OR
43567: IFFALSE 43512
// if not control in _control then
43569: LD_VAR 0 4
43573: PUSH
43574: LD_VAR 0 12
43578: IN
43579: NOT
43580: IFFALSE 43606
// control := _control [ rand ( 1 , _control ) ] ;
43582: LD_ADDR_VAR 0 4
43586: PUSH
43587: LD_VAR 0 12
43591: PUSH
43592: LD_INT 1
43594: PPUSH
43595: LD_VAR 0 12
43599: PPUSH
43600: CALL_OW 12
43604: ARRAY
43605: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
43606: LD_VAR 0 2
43610: PPUSH
43611: LD_VAR 0 5
43615: PPUSH
43616: CALL 43974 0 2
43620: NOT
43621: IFFALSE 43680
// repeat weapon := _weapon [ 1 ] ;
43623: LD_ADDR_VAR 0 5
43627: PUSH
43628: LD_VAR 0 10
43632: PUSH
43633: LD_INT 1
43635: ARRAY
43636: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
43637: LD_ADDR_VAR 0 10
43641: PUSH
43642: LD_VAR 0 10
43646: PPUSH
43647: LD_INT 1
43649: PPUSH
43650: CALL_OW 3
43654: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
43655: LD_VAR 0 2
43659: PPUSH
43660: LD_VAR 0 5
43664: PPUSH
43665: CALL 43974 0 2
43669: PUSH
43670: LD_VAR 0 10
43674: PUSH
43675: EMPTY
43676: EQUAL
43677: OR
43678: IFFALSE 43623
// result := [ ] ;
43680: LD_ADDR_VAR 0 6
43684: PUSH
43685: EMPTY
43686: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43687: LD_VAR 0 1
43691: PPUSH
43692: LD_VAR 0 2
43696: PPUSH
43697: LD_VAR 0 3
43701: PPUSH
43702: LD_VAR 0 4
43706: PPUSH
43707: LD_VAR 0 5
43711: PPUSH
43712: CALL_OW 448
43716: IFFALSE 43749
// result := [ chassis , engine , control , weapon ] ;
43718: LD_ADDR_VAR 0 6
43722: PUSH
43723: LD_VAR 0 2
43727: PUSH
43728: LD_VAR 0 3
43732: PUSH
43733: LD_VAR 0 4
43737: PUSH
43738: LD_VAR 0 5
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: ST_TO_ADDR
// end ;
43749: LD_VAR 0 6
43753: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43754: LD_INT 0
43756: PPUSH
// if not chassis or not engine then
43757: LD_VAR 0 1
43761: NOT
43762: PUSH
43763: LD_VAR 0 2
43767: NOT
43768: OR
43769: IFFALSE 43773
// exit ;
43771: GO 43969
// case engine of engine_solar :
43773: LD_VAR 0 2
43777: PUSH
43778: LD_INT 2
43780: DOUBLE
43781: EQUAL
43782: IFTRUE 43786
43784: GO 43824
43786: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43787: LD_ADDR_VAR 0 3
43791: PUSH
43792: LD_INT 11
43794: PUSH
43795: LD_INT 12
43797: PUSH
43798: LD_INT 13
43800: PUSH
43801: LD_INT 14
43803: PUSH
43804: LD_INT 1
43806: PUSH
43807: LD_INT 2
43809: PUSH
43810: LD_INT 3
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: ST_TO_ADDR
43822: GO 43953
43824: LD_INT 1
43826: DOUBLE
43827: EQUAL
43828: IFTRUE 43832
43830: GO 43894
43832: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43833: LD_ADDR_VAR 0 3
43837: PUSH
43838: LD_INT 11
43840: PUSH
43841: LD_INT 12
43843: PUSH
43844: LD_INT 13
43846: PUSH
43847: LD_INT 14
43849: PUSH
43850: LD_INT 1
43852: PUSH
43853: LD_INT 2
43855: PUSH
43856: LD_INT 3
43858: PUSH
43859: LD_INT 4
43861: PUSH
43862: LD_INT 5
43864: PUSH
43865: LD_INT 21
43867: PUSH
43868: LD_INT 23
43870: PUSH
43871: LD_INT 22
43873: PUSH
43874: LD_INT 24
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: ST_TO_ADDR
43892: GO 43953
43894: LD_INT 3
43896: DOUBLE
43897: EQUAL
43898: IFTRUE 43902
43900: GO 43952
43902: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43903: LD_ADDR_VAR 0 3
43907: PUSH
43908: LD_INT 13
43910: PUSH
43911: LD_INT 14
43913: PUSH
43914: LD_INT 2
43916: PUSH
43917: LD_INT 3
43919: PUSH
43920: LD_INT 4
43922: PUSH
43923: LD_INT 5
43925: PUSH
43926: LD_INT 21
43928: PUSH
43929: LD_INT 22
43931: PUSH
43932: LD_INT 23
43934: PUSH
43935: LD_INT 24
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: ST_TO_ADDR
43950: GO 43953
43952: POP
// result := ( chassis in result ) ;
43953: LD_ADDR_VAR 0 3
43957: PUSH
43958: LD_VAR 0 1
43962: PUSH
43963: LD_VAR 0 3
43967: IN
43968: ST_TO_ADDR
// end ;
43969: LD_VAR 0 3
43973: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43974: LD_INT 0
43976: PPUSH
// if not chassis or not weapon then
43977: LD_VAR 0 1
43981: NOT
43982: PUSH
43983: LD_VAR 0 2
43987: NOT
43988: OR
43989: IFFALSE 43993
// exit ;
43991: GO 45053
// case weapon of us_machine_gun :
43993: LD_VAR 0 2
43997: PUSH
43998: LD_INT 2
44000: DOUBLE
44001: EQUAL
44002: IFTRUE 44006
44004: GO 44036
44006: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44007: LD_ADDR_VAR 0 3
44011: PUSH
44012: LD_INT 1
44014: PUSH
44015: LD_INT 2
44017: PUSH
44018: LD_INT 3
44020: PUSH
44021: LD_INT 4
44023: PUSH
44024: LD_INT 5
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: ST_TO_ADDR
44034: GO 45037
44036: LD_INT 3
44038: DOUBLE
44039: EQUAL
44040: IFTRUE 44044
44042: GO 44074
44044: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44045: LD_ADDR_VAR 0 3
44049: PUSH
44050: LD_INT 1
44052: PUSH
44053: LD_INT 2
44055: PUSH
44056: LD_INT 3
44058: PUSH
44059: LD_INT 4
44061: PUSH
44062: LD_INT 5
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: ST_TO_ADDR
44072: GO 45037
44074: LD_INT 11
44076: DOUBLE
44077: EQUAL
44078: IFTRUE 44082
44080: GO 44112
44082: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44083: LD_ADDR_VAR 0 3
44087: PUSH
44088: LD_INT 1
44090: PUSH
44091: LD_INT 2
44093: PUSH
44094: LD_INT 3
44096: PUSH
44097: LD_INT 4
44099: PUSH
44100: LD_INT 5
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: ST_TO_ADDR
44110: GO 45037
44112: LD_INT 4
44114: DOUBLE
44115: EQUAL
44116: IFTRUE 44120
44118: GO 44146
44120: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44121: LD_ADDR_VAR 0 3
44125: PUSH
44126: LD_INT 2
44128: PUSH
44129: LD_INT 3
44131: PUSH
44132: LD_INT 4
44134: PUSH
44135: LD_INT 5
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: ST_TO_ADDR
44144: GO 45037
44146: LD_INT 5
44148: DOUBLE
44149: EQUAL
44150: IFTRUE 44154
44152: GO 44180
44154: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44155: LD_ADDR_VAR 0 3
44159: PUSH
44160: LD_INT 2
44162: PUSH
44163: LD_INT 3
44165: PUSH
44166: LD_INT 4
44168: PUSH
44169: LD_INT 5
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: ST_TO_ADDR
44178: GO 45037
44180: LD_INT 9
44182: DOUBLE
44183: EQUAL
44184: IFTRUE 44188
44186: GO 44214
44188: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44189: LD_ADDR_VAR 0 3
44193: PUSH
44194: LD_INT 2
44196: PUSH
44197: LD_INT 3
44199: PUSH
44200: LD_INT 4
44202: PUSH
44203: LD_INT 5
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: ST_TO_ADDR
44212: GO 45037
44214: LD_INT 7
44216: DOUBLE
44217: EQUAL
44218: IFTRUE 44222
44220: GO 44248
44222: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44223: LD_ADDR_VAR 0 3
44227: PUSH
44228: LD_INT 2
44230: PUSH
44231: LD_INT 3
44233: PUSH
44234: LD_INT 4
44236: PUSH
44237: LD_INT 5
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: ST_TO_ADDR
44246: GO 45037
44248: LD_INT 12
44250: DOUBLE
44251: EQUAL
44252: IFTRUE 44256
44254: GO 44282
44256: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44257: LD_ADDR_VAR 0 3
44261: PUSH
44262: LD_INT 2
44264: PUSH
44265: LD_INT 3
44267: PUSH
44268: LD_INT 4
44270: PUSH
44271: LD_INT 5
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: ST_TO_ADDR
44280: GO 45037
44282: LD_INT 13
44284: DOUBLE
44285: EQUAL
44286: IFTRUE 44290
44288: GO 44316
44290: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44291: LD_ADDR_VAR 0 3
44295: PUSH
44296: LD_INT 2
44298: PUSH
44299: LD_INT 3
44301: PUSH
44302: LD_INT 4
44304: PUSH
44305: LD_INT 5
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: ST_TO_ADDR
44314: GO 45037
44316: LD_INT 14
44318: DOUBLE
44319: EQUAL
44320: IFTRUE 44324
44322: GO 44342
44324: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
44325: LD_ADDR_VAR 0 3
44329: PUSH
44330: LD_INT 4
44332: PUSH
44333: LD_INT 5
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: ST_TO_ADDR
44340: GO 45037
44342: LD_INT 6
44344: DOUBLE
44345: EQUAL
44346: IFTRUE 44350
44348: GO 44368
44350: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
44351: LD_ADDR_VAR 0 3
44355: PUSH
44356: LD_INT 4
44358: PUSH
44359: LD_INT 5
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: ST_TO_ADDR
44366: GO 45037
44368: LD_INT 10
44370: DOUBLE
44371: EQUAL
44372: IFTRUE 44376
44374: GO 44394
44376: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
44377: LD_ADDR_VAR 0 3
44381: PUSH
44382: LD_INT 4
44384: PUSH
44385: LD_INT 5
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: ST_TO_ADDR
44392: GO 45037
44394: LD_INT 22
44396: DOUBLE
44397: EQUAL
44398: IFTRUE 44402
44400: GO 44428
44402: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
44403: LD_ADDR_VAR 0 3
44407: PUSH
44408: LD_INT 11
44410: PUSH
44411: LD_INT 12
44413: PUSH
44414: LD_INT 13
44416: PUSH
44417: LD_INT 14
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: ST_TO_ADDR
44426: GO 45037
44428: LD_INT 23
44430: DOUBLE
44431: EQUAL
44432: IFTRUE 44436
44434: GO 44462
44436: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44437: LD_ADDR_VAR 0 3
44441: PUSH
44442: LD_INT 11
44444: PUSH
44445: LD_INT 12
44447: PUSH
44448: LD_INT 13
44450: PUSH
44451: LD_INT 14
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: ST_TO_ADDR
44460: GO 45037
44462: LD_INT 24
44464: DOUBLE
44465: EQUAL
44466: IFTRUE 44470
44468: GO 44496
44470: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44471: LD_ADDR_VAR 0 3
44475: PUSH
44476: LD_INT 11
44478: PUSH
44479: LD_INT 12
44481: PUSH
44482: LD_INT 13
44484: PUSH
44485: LD_INT 14
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: ST_TO_ADDR
44494: GO 45037
44496: LD_INT 30
44498: DOUBLE
44499: EQUAL
44500: IFTRUE 44504
44502: GO 44530
44504: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44505: LD_ADDR_VAR 0 3
44509: PUSH
44510: LD_INT 11
44512: PUSH
44513: LD_INT 12
44515: PUSH
44516: LD_INT 13
44518: PUSH
44519: LD_INT 14
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: ST_TO_ADDR
44528: GO 45037
44530: LD_INT 25
44532: DOUBLE
44533: EQUAL
44534: IFTRUE 44538
44536: GO 44556
44538: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
44539: LD_ADDR_VAR 0 3
44543: PUSH
44544: LD_INT 13
44546: PUSH
44547: LD_INT 14
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: ST_TO_ADDR
44554: GO 45037
44556: LD_INT 27
44558: DOUBLE
44559: EQUAL
44560: IFTRUE 44564
44562: GO 44582
44564: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
44565: LD_ADDR_VAR 0 3
44569: PUSH
44570: LD_INT 13
44572: PUSH
44573: LD_INT 14
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: ST_TO_ADDR
44580: GO 45037
44582: LD_INT 92
44584: DOUBLE
44585: EQUAL
44586: IFTRUE 44590
44588: GO 44616
44590: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44591: LD_ADDR_VAR 0 3
44595: PUSH
44596: LD_INT 11
44598: PUSH
44599: LD_INT 12
44601: PUSH
44602: LD_INT 13
44604: PUSH
44605: LD_INT 14
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: ST_TO_ADDR
44614: GO 45037
44616: LD_INT 28
44618: DOUBLE
44619: EQUAL
44620: IFTRUE 44624
44622: GO 44642
44624: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
44625: LD_ADDR_VAR 0 3
44629: PUSH
44630: LD_INT 13
44632: PUSH
44633: LD_INT 14
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: ST_TO_ADDR
44640: GO 45037
44642: LD_INT 29
44644: DOUBLE
44645: EQUAL
44646: IFTRUE 44650
44648: GO 44668
44650: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
44651: LD_ADDR_VAR 0 3
44655: PUSH
44656: LD_INT 13
44658: PUSH
44659: LD_INT 14
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: ST_TO_ADDR
44666: GO 45037
44668: LD_INT 31
44670: DOUBLE
44671: EQUAL
44672: IFTRUE 44676
44674: GO 44694
44676: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
44677: LD_ADDR_VAR 0 3
44681: PUSH
44682: LD_INT 13
44684: PUSH
44685: LD_INT 14
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: ST_TO_ADDR
44692: GO 45037
44694: LD_INT 26
44696: DOUBLE
44697: EQUAL
44698: IFTRUE 44702
44700: GO 44720
44702: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44703: LD_ADDR_VAR 0 3
44707: PUSH
44708: LD_INT 13
44710: PUSH
44711: LD_INT 14
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: ST_TO_ADDR
44718: GO 45037
44720: LD_INT 42
44722: DOUBLE
44723: EQUAL
44724: IFTRUE 44728
44726: GO 44754
44728: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44729: LD_ADDR_VAR 0 3
44733: PUSH
44734: LD_INT 21
44736: PUSH
44737: LD_INT 22
44739: PUSH
44740: LD_INT 23
44742: PUSH
44743: LD_INT 24
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: ST_TO_ADDR
44752: GO 45037
44754: LD_INT 43
44756: DOUBLE
44757: EQUAL
44758: IFTRUE 44762
44760: GO 44788
44762: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44763: LD_ADDR_VAR 0 3
44767: PUSH
44768: LD_INT 21
44770: PUSH
44771: LD_INT 22
44773: PUSH
44774: LD_INT 23
44776: PUSH
44777: LD_INT 24
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: ST_TO_ADDR
44786: GO 45037
44788: LD_INT 44
44790: DOUBLE
44791: EQUAL
44792: IFTRUE 44796
44794: GO 44822
44796: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44797: LD_ADDR_VAR 0 3
44801: PUSH
44802: LD_INT 21
44804: PUSH
44805: LD_INT 22
44807: PUSH
44808: LD_INT 23
44810: PUSH
44811: LD_INT 24
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: ST_TO_ADDR
44820: GO 45037
44822: LD_INT 45
44824: DOUBLE
44825: EQUAL
44826: IFTRUE 44830
44828: GO 44856
44830: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44831: LD_ADDR_VAR 0 3
44835: PUSH
44836: LD_INT 21
44838: PUSH
44839: LD_INT 22
44841: PUSH
44842: LD_INT 23
44844: PUSH
44845: LD_INT 24
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: ST_TO_ADDR
44854: GO 45037
44856: LD_INT 49
44858: DOUBLE
44859: EQUAL
44860: IFTRUE 44864
44862: GO 44890
44864: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44865: LD_ADDR_VAR 0 3
44869: PUSH
44870: LD_INT 21
44872: PUSH
44873: LD_INT 22
44875: PUSH
44876: LD_INT 23
44878: PUSH
44879: LD_INT 24
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: ST_TO_ADDR
44888: GO 45037
44890: LD_INT 51
44892: DOUBLE
44893: EQUAL
44894: IFTRUE 44898
44896: GO 44924
44898: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44899: LD_ADDR_VAR 0 3
44903: PUSH
44904: LD_INT 21
44906: PUSH
44907: LD_INT 22
44909: PUSH
44910: LD_INT 23
44912: PUSH
44913: LD_INT 24
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: ST_TO_ADDR
44922: GO 45037
44924: LD_INT 52
44926: DOUBLE
44927: EQUAL
44928: IFTRUE 44932
44930: GO 44958
44932: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44933: LD_ADDR_VAR 0 3
44937: PUSH
44938: LD_INT 21
44940: PUSH
44941: LD_INT 22
44943: PUSH
44944: LD_INT 23
44946: PUSH
44947: LD_INT 24
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: ST_TO_ADDR
44956: GO 45037
44958: LD_INT 53
44960: DOUBLE
44961: EQUAL
44962: IFTRUE 44966
44964: GO 44984
44966: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44967: LD_ADDR_VAR 0 3
44971: PUSH
44972: LD_INT 23
44974: PUSH
44975: LD_INT 24
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: ST_TO_ADDR
44982: GO 45037
44984: LD_INT 46
44986: DOUBLE
44987: EQUAL
44988: IFTRUE 44992
44990: GO 45010
44992: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44993: LD_ADDR_VAR 0 3
44997: PUSH
44998: LD_INT 23
45000: PUSH
45001: LD_INT 24
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: ST_TO_ADDR
45008: GO 45037
45010: LD_INT 47
45012: DOUBLE
45013: EQUAL
45014: IFTRUE 45018
45016: GO 45036
45018: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45019: LD_ADDR_VAR 0 3
45023: PUSH
45024: LD_INT 23
45026: PUSH
45027: LD_INT 24
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: ST_TO_ADDR
45034: GO 45037
45036: POP
// result := ( chassis in result ) ;
45037: LD_ADDR_VAR 0 3
45041: PUSH
45042: LD_VAR 0 1
45046: PUSH
45047: LD_VAR 0 3
45051: IN
45052: ST_TO_ADDR
// end ;
45053: LD_VAR 0 3
45057: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45058: LD_INT 0
45060: PPUSH
45061: PPUSH
45062: PPUSH
45063: PPUSH
45064: PPUSH
45065: PPUSH
45066: PPUSH
// result := array ;
45067: LD_ADDR_VAR 0 5
45071: PUSH
45072: LD_VAR 0 1
45076: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45077: LD_VAR 0 1
45081: NOT
45082: PUSH
45083: LD_VAR 0 2
45087: NOT
45088: OR
45089: PUSH
45090: LD_VAR 0 3
45094: NOT
45095: OR
45096: PUSH
45097: LD_VAR 0 2
45101: PUSH
45102: LD_VAR 0 1
45106: GREATER
45107: OR
45108: PUSH
45109: LD_VAR 0 3
45113: PUSH
45114: LD_VAR 0 1
45118: GREATER
45119: OR
45120: IFFALSE 45124
// exit ;
45122: GO 45420
// if direction then
45124: LD_VAR 0 4
45128: IFFALSE 45192
// begin d := 1 ;
45130: LD_ADDR_VAR 0 9
45134: PUSH
45135: LD_INT 1
45137: ST_TO_ADDR
// if i_from > i_to then
45138: LD_VAR 0 2
45142: PUSH
45143: LD_VAR 0 3
45147: GREATER
45148: IFFALSE 45174
// length := ( array - i_from ) + i_to else
45150: LD_ADDR_VAR 0 11
45154: PUSH
45155: LD_VAR 0 1
45159: PUSH
45160: LD_VAR 0 2
45164: MINUS
45165: PUSH
45166: LD_VAR 0 3
45170: PLUS
45171: ST_TO_ADDR
45172: GO 45190
// length := i_to - i_from ;
45174: LD_ADDR_VAR 0 11
45178: PUSH
45179: LD_VAR 0 3
45183: PUSH
45184: LD_VAR 0 2
45188: MINUS
45189: ST_TO_ADDR
// end else
45190: GO 45253
// begin d := - 1 ;
45192: LD_ADDR_VAR 0 9
45196: PUSH
45197: LD_INT 1
45199: NEG
45200: ST_TO_ADDR
// if i_from > i_to then
45201: LD_VAR 0 2
45205: PUSH
45206: LD_VAR 0 3
45210: GREATER
45211: IFFALSE 45231
// length := i_from - i_to else
45213: LD_ADDR_VAR 0 11
45217: PUSH
45218: LD_VAR 0 2
45222: PUSH
45223: LD_VAR 0 3
45227: MINUS
45228: ST_TO_ADDR
45229: GO 45253
// length := ( array - i_to ) + i_from ;
45231: LD_ADDR_VAR 0 11
45235: PUSH
45236: LD_VAR 0 1
45240: PUSH
45241: LD_VAR 0 3
45245: MINUS
45246: PUSH
45247: LD_VAR 0 2
45251: PLUS
45252: ST_TO_ADDR
// end ; if not length then
45253: LD_VAR 0 11
45257: NOT
45258: IFFALSE 45262
// exit ;
45260: GO 45420
// tmp := array ;
45262: LD_ADDR_VAR 0 10
45266: PUSH
45267: LD_VAR 0 1
45271: ST_TO_ADDR
// for i = 1 to length do
45272: LD_ADDR_VAR 0 6
45276: PUSH
45277: DOUBLE
45278: LD_INT 1
45280: DEC
45281: ST_TO_ADDR
45282: LD_VAR 0 11
45286: PUSH
45287: FOR_TO
45288: IFFALSE 45408
// begin for j = 1 to array do
45290: LD_ADDR_VAR 0 7
45294: PUSH
45295: DOUBLE
45296: LD_INT 1
45298: DEC
45299: ST_TO_ADDR
45300: LD_VAR 0 1
45304: PUSH
45305: FOR_TO
45306: IFFALSE 45394
// begin k := j + d ;
45308: LD_ADDR_VAR 0 8
45312: PUSH
45313: LD_VAR 0 7
45317: PUSH
45318: LD_VAR 0 9
45322: PLUS
45323: ST_TO_ADDR
// if k > array then
45324: LD_VAR 0 8
45328: PUSH
45329: LD_VAR 0 1
45333: GREATER
45334: IFFALSE 45344
// k := 1 ;
45336: LD_ADDR_VAR 0 8
45340: PUSH
45341: LD_INT 1
45343: ST_TO_ADDR
// if not k then
45344: LD_VAR 0 8
45348: NOT
45349: IFFALSE 45361
// k := array ;
45351: LD_ADDR_VAR 0 8
45355: PUSH
45356: LD_VAR 0 1
45360: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
45361: LD_ADDR_VAR 0 10
45365: PUSH
45366: LD_VAR 0 10
45370: PPUSH
45371: LD_VAR 0 8
45375: PPUSH
45376: LD_VAR 0 1
45380: PUSH
45381: LD_VAR 0 7
45385: ARRAY
45386: PPUSH
45387: CALL_OW 1
45391: ST_TO_ADDR
// end ;
45392: GO 45305
45394: POP
45395: POP
// array := tmp ;
45396: LD_ADDR_VAR 0 1
45400: PUSH
45401: LD_VAR 0 10
45405: ST_TO_ADDR
// end ;
45406: GO 45287
45408: POP
45409: POP
// result := array ;
45410: LD_ADDR_VAR 0 5
45414: PUSH
45415: LD_VAR 0 1
45419: ST_TO_ADDR
// end ;
45420: LD_VAR 0 5
45424: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45425: LD_INT 0
45427: PPUSH
45428: PPUSH
// result := 0 ;
45429: LD_ADDR_VAR 0 3
45433: PUSH
45434: LD_INT 0
45436: ST_TO_ADDR
// if not array or not value in array then
45437: LD_VAR 0 1
45441: NOT
45442: PUSH
45443: LD_VAR 0 2
45447: PUSH
45448: LD_VAR 0 1
45452: IN
45453: NOT
45454: OR
45455: IFFALSE 45459
// exit ;
45457: GO 45513
// for i = 1 to array do
45459: LD_ADDR_VAR 0 4
45463: PUSH
45464: DOUBLE
45465: LD_INT 1
45467: DEC
45468: ST_TO_ADDR
45469: LD_VAR 0 1
45473: PUSH
45474: FOR_TO
45475: IFFALSE 45511
// if value = array [ i ] then
45477: LD_VAR 0 2
45481: PUSH
45482: LD_VAR 0 1
45486: PUSH
45487: LD_VAR 0 4
45491: ARRAY
45492: EQUAL
45493: IFFALSE 45509
// begin result := i ;
45495: LD_ADDR_VAR 0 3
45499: PUSH
45500: LD_VAR 0 4
45504: ST_TO_ADDR
// exit ;
45505: POP
45506: POP
45507: GO 45513
// end ;
45509: GO 45474
45511: POP
45512: POP
// end ;
45513: LD_VAR 0 3
45517: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
45518: LD_INT 0
45520: PPUSH
// vc_chassis := chassis ;
45521: LD_ADDR_OWVAR 37
45525: PUSH
45526: LD_VAR 0 1
45530: ST_TO_ADDR
// vc_engine := engine ;
45531: LD_ADDR_OWVAR 39
45535: PUSH
45536: LD_VAR 0 2
45540: ST_TO_ADDR
// vc_control := control ;
45541: LD_ADDR_OWVAR 38
45545: PUSH
45546: LD_VAR 0 3
45550: ST_TO_ADDR
// vc_weapon := weapon ;
45551: LD_ADDR_OWVAR 40
45555: PUSH
45556: LD_VAR 0 4
45560: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45561: LD_ADDR_OWVAR 41
45565: PUSH
45566: LD_VAR 0 5
45570: ST_TO_ADDR
// end ;
45571: LD_VAR 0 6
45575: RET
// export function WantPlant ( unit ) ; var task ; begin
45576: LD_INT 0
45578: PPUSH
45579: PPUSH
// result := false ;
45580: LD_ADDR_VAR 0 2
45584: PUSH
45585: LD_INT 0
45587: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45588: LD_ADDR_VAR 0 3
45592: PUSH
45593: LD_VAR 0 1
45597: PPUSH
45598: CALL_OW 437
45602: ST_TO_ADDR
// if task then
45603: LD_VAR 0 3
45607: IFFALSE 45635
// if task [ 1 ] [ 1 ] = p then
45609: LD_VAR 0 3
45613: PUSH
45614: LD_INT 1
45616: ARRAY
45617: PUSH
45618: LD_INT 1
45620: ARRAY
45621: PUSH
45622: LD_STRING p
45624: EQUAL
45625: IFFALSE 45635
// result := true ;
45627: LD_ADDR_VAR 0 2
45631: PUSH
45632: LD_INT 1
45634: ST_TO_ADDR
// end ;
45635: LD_VAR 0 2
45639: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
45640: LD_INT 0
45642: PPUSH
45643: PPUSH
45644: PPUSH
45645: PPUSH
// if pos < 1 then
45646: LD_VAR 0 2
45650: PUSH
45651: LD_INT 1
45653: LESS
45654: IFFALSE 45658
// exit ;
45656: GO 45961
// if pos = 1 then
45658: LD_VAR 0 2
45662: PUSH
45663: LD_INT 1
45665: EQUAL
45666: IFFALSE 45699
// result := Replace ( arr , pos [ 1 ] , value ) else
45668: LD_ADDR_VAR 0 4
45672: PUSH
45673: LD_VAR 0 1
45677: PPUSH
45678: LD_VAR 0 2
45682: PUSH
45683: LD_INT 1
45685: ARRAY
45686: PPUSH
45687: LD_VAR 0 3
45691: PPUSH
45692: CALL_OW 1
45696: ST_TO_ADDR
45697: GO 45961
// begin tmp := arr ;
45699: LD_ADDR_VAR 0 6
45703: PUSH
45704: LD_VAR 0 1
45708: ST_TO_ADDR
// s_arr := [ tmp ] ;
45709: LD_ADDR_VAR 0 7
45713: PUSH
45714: LD_VAR 0 6
45718: PUSH
45719: EMPTY
45720: LIST
45721: ST_TO_ADDR
// for i = 1 to pos - 1 do
45722: LD_ADDR_VAR 0 5
45726: PUSH
45727: DOUBLE
45728: LD_INT 1
45730: DEC
45731: ST_TO_ADDR
45732: LD_VAR 0 2
45736: PUSH
45737: LD_INT 1
45739: MINUS
45740: PUSH
45741: FOR_TO
45742: IFFALSE 45787
// begin tmp := tmp [ pos [ i ] ] ;
45744: LD_ADDR_VAR 0 6
45748: PUSH
45749: LD_VAR 0 6
45753: PUSH
45754: LD_VAR 0 2
45758: PUSH
45759: LD_VAR 0 5
45763: ARRAY
45764: ARRAY
45765: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45766: LD_ADDR_VAR 0 7
45770: PUSH
45771: LD_VAR 0 7
45775: PUSH
45776: LD_VAR 0 6
45780: PUSH
45781: EMPTY
45782: LIST
45783: ADD
45784: ST_TO_ADDR
// end ;
45785: GO 45741
45787: POP
45788: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45789: LD_ADDR_VAR 0 6
45793: PUSH
45794: LD_VAR 0 6
45798: PPUSH
45799: LD_VAR 0 2
45803: PUSH
45804: LD_VAR 0 2
45808: ARRAY
45809: PPUSH
45810: LD_VAR 0 3
45814: PPUSH
45815: CALL_OW 1
45819: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45820: LD_ADDR_VAR 0 7
45824: PUSH
45825: LD_VAR 0 7
45829: PPUSH
45830: LD_VAR 0 7
45834: PPUSH
45835: LD_VAR 0 6
45839: PPUSH
45840: CALL_OW 1
45844: ST_TO_ADDR
// for i = s_arr downto 2 do
45845: LD_ADDR_VAR 0 5
45849: PUSH
45850: DOUBLE
45851: LD_VAR 0 7
45855: INC
45856: ST_TO_ADDR
45857: LD_INT 2
45859: PUSH
45860: FOR_DOWNTO
45861: IFFALSE 45945
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45863: LD_ADDR_VAR 0 6
45867: PUSH
45868: LD_VAR 0 7
45872: PUSH
45873: LD_VAR 0 5
45877: PUSH
45878: LD_INT 1
45880: MINUS
45881: ARRAY
45882: PPUSH
45883: LD_VAR 0 2
45887: PUSH
45888: LD_VAR 0 5
45892: PUSH
45893: LD_INT 1
45895: MINUS
45896: ARRAY
45897: PPUSH
45898: LD_VAR 0 7
45902: PUSH
45903: LD_VAR 0 5
45907: ARRAY
45908: PPUSH
45909: CALL_OW 1
45913: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45914: LD_ADDR_VAR 0 7
45918: PUSH
45919: LD_VAR 0 7
45923: PPUSH
45924: LD_VAR 0 5
45928: PUSH
45929: LD_INT 1
45931: MINUS
45932: PPUSH
45933: LD_VAR 0 6
45937: PPUSH
45938: CALL_OW 1
45942: ST_TO_ADDR
// end ;
45943: GO 45860
45945: POP
45946: POP
// result := s_arr [ 1 ] ;
45947: LD_ADDR_VAR 0 4
45951: PUSH
45952: LD_VAR 0 7
45956: PUSH
45957: LD_INT 1
45959: ARRAY
45960: ST_TO_ADDR
// end ; end ;
45961: LD_VAR 0 4
45965: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45966: LD_INT 0
45968: PPUSH
45969: PPUSH
// if not list then
45970: LD_VAR 0 1
45974: NOT
45975: IFFALSE 45979
// exit ;
45977: GO 46070
// i := list [ pos1 ] ;
45979: LD_ADDR_VAR 0 5
45983: PUSH
45984: LD_VAR 0 1
45988: PUSH
45989: LD_VAR 0 2
45993: ARRAY
45994: ST_TO_ADDR
// if not i then
45995: LD_VAR 0 5
45999: NOT
46000: IFFALSE 46004
// exit ;
46002: GO 46070
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46004: LD_ADDR_VAR 0 1
46008: PUSH
46009: LD_VAR 0 1
46013: PPUSH
46014: LD_VAR 0 2
46018: PPUSH
46019: LD_VAR 0 1
46023: PUSH
46024: LD_VAR 0 3
46028: ARRAY
46029: PPUSH
46030: CALL_OW 1
46034: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46035: LD_ADDR_VAR 0 1
46039: PUSH
46040: LD_VAR 0 1
46044: PPUSH
46045: LD_VAR 0 3
46049: PPUSH
46050: LD_VAR 0 5
46054: PPUSH
46055: CALL_OW 1
46059: ST_TO_ADDR
// result := list ;
46060: LD_ADDR_VAR 0 4
46064: PUSH
46065: LD_VAR 0 1
46069: ST_TO_ADDR
// end ;
46070: LD_VAR 0 4
46074: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46075: LD_INT 0
46077: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46078: LD_ADDR_VAR 0 5
46082: PUSH
46083: LD_VAR 0 1
46087: PPUSH
46088: CALL_OW 250
46092: PPUSH
46093: LD_VAR 0 1
46097: PPUSH
46098: CALL_OW 251
46102: PPUSH
46103: LD_VAR 0 2
46107: PPUSH
46108: LD_VAR 0 3
46112: PPUSH
46113: LD_VAR 0 4
46117: PPUSH
46118: CALL 46496 0 5
46122: ST_TO_ADDR
// end ;
46123: LD_VAR 0 5
46127: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
46128: LD_INT 0
46130: PPUSH
46131: PPUSH
46132: PPUSH
46133: PPUSH
// if not list or not unit then
46134: LD_VAR 0 2
46138: NOT
46139: PUSH
46140: LD_VAR 0 1
46144: NOT
46145: OR
46146: IFFALSE 46150
// exit ;
46148: GO 46491
// result := [ ] ;
46150: LD_ADDR_VAR 0 5
46154: PUSH
46155: EMPTY
46156: ST_TO_ADDR
// for i in list do
46157: LD_ADDR_VAR 0 6
46161: PUSH
46162: LD_VAR 0 2
46166: PUSH
46167: FOR_IN
46168: IFFALSE 46386
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
46170: LD_ADDR_VAR 0 8
46174: PUSH
46175: LD_VAR 0 1
46179: PPUSH
46180: LD_VAR 0 6
46184: PUSH
46185: LD_INT 1
46187: ARRAY
46188: PPUSH
46189: LD_VAR 0 6
46193: PUSH
46194: LD_INT 2
46196: ARRAY
46197: PPUSH
46198: CALL_OW 297
46202: ST_TO_ADDR
// if not Count ( result ) then
46203: LD_VAR 0 5
46207: PPUSH
46208: CALL 42780 0 1
46212: NOT
46213: IFFALSE 46246
// begin result := Join ( result , [ i , tmp ] ) ;
46215: LD_ADDR_VAR 0 5
46219: PUSH
46220: LD_VAR 0 5
46224: PPUSH
46225: LD_VAR 0 6
46229: PUSH
46230: LD_VAR 0 8
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PPUSH
46239: CALL 78389 0 2
46243: ST_TO_ADDR
// continue ;
46244: GO 46167
// end ; if result [ result ] [ 2 ] <= tmp then
46246: LD_VAR 0 5
46250: PUSH
46251: LD_VAR 0 5
46255: ARRAY
46256: PUSH
46257: LD_INT 2
46259: ARRAY
46260: PUSH
46261: LD_VAR 0 8
46265: LESSEQUAL
46266: IFFALSE 46299
// result := Join ( result , [ i , tmp ] ) else
46268: LD_ADDR_VAR 0 5
46272: PUSH
46273: LD_VAR 0 5
46277: PPUSH
46278: LD_VAR 0 6
46282: PUSH
46283: LD_VAR 0 8
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PPUSH
46292: CALL 78389 0 2
46296: ST_TO_ADDR
46297: GO 46384
// begin for j := 1 to Count ( result ) do
46299: LD_ADDR_VAR 0 7
46303: PUSH
46304: DOUBLE
46305: LD_INT 1
46307: DEC
46308: ST_TO_ADDR
46309: LD_VAR 0 5
46313: PPUSH
46314: CALL 42780 0 1
46318: PUSH
46319: FOR_TO
46320: IFFALSE 46382
// begin if tmp < result [ j ] [ 2 ] then
46322: LD_VAR 0 8
46326: PUSH
46327: LD_VAR 0 5
46331: PUSH
46332: LD_VAR 0 7
46336: ARRAY
46337: PUSH
46338: LD_INT 2
46340: ARRAY
46341: LESS
46342: IFFALSE 46380
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46344: LD_ADDR_VAR 0 5
46348: PUSH
46349: LD_VAR 0 5
46353: PPUSH
46354: LD_VAR 0 7
46358: PPUSH
46359: LD_VAR 0 6
46363: PUSH
46364: LD_VAR 0 8
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PPUSH
46373: CALL_OW 2
46377: ST_TO_ADDR
// break ;
46378: GO 46382
// end ; end ;
46380: GO 46319
46382: POP
46383: POP
// end ; end ;
46384: GO 46167
46386: POP
46387: POP
// if result and not asc then
46388: LD_VAR 0 5
46392: PUSH
46393: LD_VAR 0 3
46397: NOT
46398: AND
46399: IFFALSE 46416
// result := ReverseArray ( result ) ;
46401: LD_ADDR_VAR 0 5
46405: PUSH
46406: LD_VAR 0 5
46410: PPUSH
46411: CALL 73656 0 1
46415: ST_TO_ADDR
// tmp := [ ] ;
46416: LD_ADDR_VAR 0 8
46420: PUSH
46421: EMPTY
46422: ST_TO_ADDR
// if mode then
46423: LD_VAR 0 4
46427: IFFALSE 46491
// begin for i := 1 to result do
46429: LD_ADDR_VAR 0 6
46433: PUSH
46434: DOUBLE
46435: LD_INT 1
46437: DEC
46438: ST_TO_ADDR
46439: LD_VAR 0 5
46443: PUSH
46444: FOR_TO
46445: IFFALSE 46479
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
46447: LD_ADDR_VAR 0 8
46451: PUSH
46452: LD_VAR 0 8
46456: PPUSH
46457: LD_VAR 0 5
46461: PUSH
46462: LD_VAR 0 6
46466: ARRAY
46467: PUSH
46468: LD_INT 1
46470: ARRAY
46471: PPUSH
46472: CALL 78389 0 2
46476: ST_TO_ADDR
46477: GO 46444
46479: POP
46480: POP
// result := tmp ;
46481: LD_ADDR_VAR 0 5
46485: PUSH
46486: LD_VAR 0 8
46490: ST_TO_ADDR
// end ; end ;
46491: LD_VAR 0 5
46495: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46496: LD_INT 0
46498: PPUSH
46499: PPUSH
46500: PPUSH
46501: PPUSH
// if not list then
46502: LD_VAR 0 3
46506: NOT
46507: IFFALSE 46511
// exit ;
46509: GO 46899
// result := [ ] ;
46511: LD_ADDR_VAR 0 6
46515: PUSH
46516: EMPTY
46517: ST_TO_ADDR
// for i in list do
46518: LD_ADDR_VAR 0 7
46522: PUSH
46523: LD_VAR 0 3
46527: PUSH
46528: FOR_IN
46529: IFFALSE 46731
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46531: LD_ADDR_VAR 0 9
46535: PUSH
46536: LD_VAR 0 7
46540: PPUSH
46541: LD_VAR 0 1
46545: PPUSH
46546: LD_VAR 0 2
46550: PPUSH
46551: CALL_OW 297
46555: ST_TO_ADDR
// if not result then
46556: LD_VAR 0 6
46560: NOT
46561: IFFALSE 46587
// result := [ [ i , tmp ] ] else
46563: LD_ADDR_VAR 0 6
46567: PUSH
46568: LD_VAR 0 7
46572: PUSH
46573: LD_VAR 0 9
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: EMPTY
46583: LIST
46584: ST_TO_ADDR
46585: GO 46729
// begin if result [ result ] [ 2 ] <= tmp then
46587: LD_VAR 0 6
46591: PUSH
46592: LD_VAR 0 6
46596: ARRAY
46597: PUSH
46598: LD_INT 2
46600: ARRAY
46601: PUSH
46602: LD_VAR 0 9
46606: LESSEQUAL
46607: IFFALSE 46649
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46609: LD_ADDR_VAR 0 6
46613: PUSH
46614: LD_VAR 0 6
46618: PPUSH
46619: LD_VAR 0 6
46623: PUSH
46624: LD_INT 1
46626: PLUS
46627: PPUSH
46628: LD_VAR 0 7
46632: PUSH
46633: LD_VAR 0 9
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PPUSH
46642: CALL_OW 2
46646: ST_TO_ADDR
46647: GO 46729
// for j := 1 to result do
46649: LD_ADDR_VAR 0 8
46653: PUSH
46654: DOUBLE
46655: LD_INT 1
46657: DEC
46658: ST_TO_ADDR
46659: LD_VAR 0 6
46663: PUSH
46664: FOR_TO
46665: IFFALSE 46727
// begin if tmp < result [ j ] [ 2 ] then
46667: LD_VAR 0 9
46671: PUSH
46672: LD_VAR 0 6
46676: PUSH
46677: LD_VAR 0 8
46681: ARRAY
46682: PUSH
46683: LD_INT 2
46685: ARRAY
46686: LESS
46687: IFFALSE 46725
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46689: LD_ADDR_VAR 0 6
46693: PUSH
46694: LD_VAR 0 6
46698: PPUSH
46699: LD_VAR 0 8
46703: PPUSH
46704: LD_VAR 0 7
46708: PUSH
46709: LD_VAR 0 9
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PPUSH
46718: CALL_OW 2
46722: ST_TO_ADDR
// break ;
46723: GO 46727
// end ; end ;
46725: GO 46664
46727: POP
46728: POP
// end ; end ;
46729: GO 46528
46731: POP
46732: POP
// if result and not asc then
46733: LD_VAR 0 6
46737: PUSH
46738: LD_VAR 0 4
46742: NOT
46743: AND
46744: IFFALSE 46819
// begin tmp := result ;
46746: LD_ADDR_VAR 0 9
46750: PUSH
46751: LD_VAR 0 6
46755: ST_TO_ADDR
// for i = tmp downto 1 do
46756: LD_ADDR_VAR 0 7
46760: PUSH
46761: DOUBLE
46762: LD_VAR 0 9
46766: INC
46767: ST_TO_ADDR
46768: LD_INT 1
46770: PUSH
46771: FOR_DOWNTO
46772: IFFALSE 46817
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
46774: LD_ADDR_VAR 0 6
46778: PUSH
46779: LD_VAR 0 6
46783: PPUSH
46784: LD_VAR 0 9
46788: PUSH
46789: LD_VAR 0 7
46793: MINUS
46794: PUSH
46795: LD_INT 1
46797: PLUS
46798: PPUSH
46799: LD_VAR 0 9
46803: PUSH
46804: LD_VAR 0 7
46808: ARRAY
46809: PPUSH
46810: CALL_OW 1
46814: ST_TO_ADDR
46815: GO 46771
46817: POP
46818: POP
// end ; tmp := [ ] ;
46819: LD_ADDR_VAR 0 9
46823: PUSH
46824: EMPTY
46825: ST_TO_ADDR
// if mode then
46826: LD_VAR 0 5
46830: IFFALSE 46899
// begin for i = 1 to result do
46832: LD_ADDR_VAR 0 7
46836: PUSH
46837: DOUBLE
46838: LD_INT 1
46840: DEC
46841: ST_TO_ADDR
46842: LD_VAR 0 6
46846: PUSH
46847: FOR_TO
46848: IFFALSE 46887
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
46850: LD_ADDR_VAR 0 9
46854: PUSH
46855: LD_VAR 0 9
46859: PPUSH
46860: LD_VAR 0 7
46864: PPUSH
46865: LD_VAR 0 6
46869: PUSH
46870: LD_VAR 0 7
46874: ARRAY
46875: PUSH
46876: LD_INT 1
46878: ARRAY
46879: PPUSH
46880: CALL_OW 1
46884: ST_TO_ADDR
46885: GO 46847
46887: POP
46888: POP
// result := tmp ;
46889: LD_ADDR_VAR 0 6
46893: PUSH
46894: LD_VAR 0 9
46898: ST_TO_ADDR
// end ; end ;
46899: LD_VAR 0 6
46903: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
46904: LD_INT 0
46906: PPUSH
46907: PPUSH
46908: PPUSH
46909: PPUSH
46910: PPUSH
46911: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
46912: LD_ADDR_VAR 0 5
46916: PUSH
46917: LD_INT 0
46919: PUSH
46920: LD_INT 0
46922: PUSH
46923: LD_INT 0
46925: PUSH
46926: EMPTY
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: ST_TO_ADDR
// if not x or not y then
46934: LD_VAR 0 2
46938: NOT
46939: PUSH
46940: LD_VAR 0 3
46944: NOT
46945: OR
46946: IFFALSE 46950
// exit ;
46948: GO 48600
// if not range then
46950: LD_VAR 0 4
46954: NOT
46955: IFFALSE 46965
// range := 10 ;
46957: LD_ADDR_VAR 0 4
46961: PUSH
46962: LD_INT 10
46964: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46965: LD_ADDR_VAR 0 8
46969: PUSH
46970: LD_INT 81
46972: PUSH
46973: LD_VAR 0 1
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 92
46984: PUSH
46985: LD_VAR 0 2
46989: PUSH
46990: LD_VAR 0 3
46994: PUSH
46995: LD_VAR 0 4
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 3
47008: PUSH
47009: LD_INT 21
47011: PUSH
47012: LD_INT 3
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: LIST
47027: PPUSH
47028: CALL_OW 69
47032: ST_TO_ADDR
// if not tmp then
47033: LD_VAR 0 8
47037: NOT
47038: IFFALSE 47042
// exit ;
47040: GO 48600
// for i in tmp do
47042: LD_ADDR_VAR 0 6
47046: PUSH
47047: LD_VAR 0 8
47051: PUSH
47052: FOR_IN
47053: IFFALSE 48575
// begin points := [ 0 , 0 , 0 ] ;
47055: LD_ADDR_VAR 0 9
47059: PUSH
47060: LD_INT 0
47062: PUSH
47063: LD_INT 0
47065: PUSH
47066: LD_INT 0
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: LIST
47073: ST_TO_ADDR
// bpoints := 1 ;
47074: LD_ADDR_VAR 0 10
47078: PUSH
47079: LD_INT 1
47081: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47082: LD_VAR 0 6
47086: PPUSH
47087: CALL_OW 247
47091: PUSH
47092: LD_INT 1
47094: DOUBLE
47095: EQUAL
47096: IFTRUE 47100
47098: GO 47678
47100: POP
// begin if GetClass ( i ) = 1 then
47101: LD_VAR 0 6
47105: PPUSH
47106: CALL_OW 257
47110: PUSH
47111: LD_INT 1
47113: EQUAL
47114: IFFALSE 47135
// points := [ 10 , 5 , 3 ] ;
47116: LD_ADDR_VAR 0 9
47120: PUSH
47121: LD_INT 10
47123: PUSH
47124: LD_INT 5
47126: PUSH
47127: LD_INT 3
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: LIST
47134: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47135: LD_VAR 0 6
47139: PPUSH
47140: CALL_OW 257
47144: PUSH
47145: LD_INT 2
47147: PUSH
47148: LD_INT 3
47150: PUSH
47151: LD_INT 4
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: LIST
47158: IN
47159: IFFALSE 47180
// points := [ 3 , 2 , 1 ] ;
47161: LD_ADDR_VAR 0 9
47165: PUSH
47166: LD_INT 3
47168: PUSH
47169: LD_INT 2
47171: PUSH
47172: LD_INT 1
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: LIST
47179: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47180: LD_VAR 0 6
47184: PPUSH
47185: CALL_OW 257
47189: PUSH
47190: LD_INT 5
47192: EQUAL
47193: IFFALSE 47214
// points := [ 130 , 5 , 2 ] ;
47195: LD_ADDR_VAR 0 9
47199: PUSH
47200: LD_INT 130
47202: PUSH
47203: LD_INT 5
47205: PUSH
47206: LD_INT 2
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: LIST
47213: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47214: LD_VAR 0 6
47218: PPUSH
47219: CALL_OW 257
47223: PUSH
47224: LD_INT 8
47226: EQUAL
47227: IFFALSE 47248
// points := [ 35 , 35 , 30 ] ;
47229: LD_ADDR_VAR 0 9
47233: PUSH
47234: LD_INT 35
47236: PUSH
47237: LD_INT 35
47239: PUSH
47240: LD_INT 30
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: LIST
47247: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47248: LD_VAR 0 6
47252: PPUSH
47253: CALL_OW 257
47257: PUSH
47258: LD_INT 9
47260: EQUAL
47261: IFFALSE 47282
// points := [ 20 , 55 , 40 ] ;
47263: LD_ADDR_VAR 0 9
47267: PUSH
47268: LD_INT 20
47270: PUSH
47271: LD_INT 55
47273: PUSH
47274: LD_INT 40
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: LIST
47281: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47282: LD_VAR 0 6
47286: PPUSH
47287: CALL_OW 257
47291: PUSH
47292: LD_INT 12
47294: PUSH
47295: LD_INT 16
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: IN
47302: IFFALSE 47323
// points := [ 5 , 3 , 2 ] ;
47304: LD_ADDR_VAR 0 9
47308: PUSH
47309: LD_INT 5
47311: PUSH
47312: LD_INT 3
47314: PUSH
47315: LD_INT 2
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: LIST
47322: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47323: LD_VAR 0 6
47327: PPUSH
47328: CALL_OW 257
47332: PUSH
47333: LD_INT 17
47335: EQUAL
47336: IFFALSE 47357
// points := [ 100 , 50 , 75 ] ;
47338: LD_ADDR_VAR 0 9
47342: PUSH
47343: LD_INT 100
47345: PUSH
47346: LD_INT 50
47348: PUSH
47349: LD_INT 75
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: LIST
47356: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47357: LD_VAR 0 6
47361: PPUSH
47362: CALL_OW 257
47366: PUSH
47367: LD_INT 15
47369: EQUAL
47370: IFFALSE 47391
// points := [ 10 , 5 , 3 ] ;
47372: LD_ADDR_VAR 0 9
47376: PUSH
47377: LD_INT 10
47379: PUSH
47380: LD_INT 5
47382: PUSH
47383: LD_INT 3
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: LIST
47390: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47391: LD_VAR 0 6
47395: PPUSH
47396: CALL_OW 257
47400: PUSH
47401: LD_INT 14
47403: EQUAL
47404: IFFALSE 47425
// points := [ 10 , 0 , 0 ] ;
47406: LD_ADDR_VAR 0 9
47410: PUSH
47411: LD_INT 10
47413: PUSH
47414: LD_INT 0
47416: PUSH
47417: LD_INT 0
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: LIST
47424: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47425: LD_VAR 0 6
47429: PPUSH
47430: CALL_OW 257
47434: PUSH
47435: LD_INT 11
47437: EQUAL
47438: IFFALSE 47459
// points := [ 30 , 10 , 5 ] ;
47440: LD_ADDR_VAR 0 9
47444: PUSH
47445: LD_INT 30
47447: PUSH
47448: LD_INT 10
47450: PUSH
47451: LD_INT 5
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: LIST
47458: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47459: LD_VAR 0 1
47463: PPUSH
47464: LD_INT 5
47466: PPUSH
47467: CALL_OW 321
47471: PUSH
47472: LD_INT 2
47474: EQUAL
47475: IFFALSE 47492
// bpoints := bpoints * 1.8 ;
47477: LD_ADDR_VAR 0 10
47481: PUSH
47482: LD_VAR 0 10
47486: PUSH
47487: LD_REAL  1.80000000000000E+0000
47490: MUL
47491: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47492: LD_VAR 0 6
47496: PPUSH
47497: CALL_OW 257
47501: PUSH
47502: LD_INT 1
47504: PUSH
47505: LD_INT 2
47507: PUSH
47508: LD_INT 3
47510: PUSH
47511: LD_INT 4
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: IN
47520: PUSH
47521: LD_VAR 0 1
47525: PPUSH
47526: LD_INT 51
47528: PPUSH
47529: CALL_OW 321
47533: PUSH
47534: LD_INT 2
47536: EQUAL
47537: AND
47538: IFFALSE 47555
// bpoints := bpoints * 1.2 ;
47540: LD_ADDR_VAR 0 10
47544: PUSH
47545: LD_VAR 0 10
47549: PUSH
47550: LD_REAL  1.20000000000000E+0000
47553: MUL
47554: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47555: LD_VAR 0 6
47559: PPUSH
47560: CALL_OW 257
47564: PUSH
47565: LD_INT 5
47567: PUSH
47568: LD_INT 7
47570: PUSH
47571: LD_INT 9
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: LIST
47578: IN
47579: PUSH
47580: LD_VAR 0 1
47584: PPUSH
47585: LD_INT 52
47587: PPUSH
47588: CALL_OW 321
47592: PUSH
47593: LD_INT 2
47595: EQUAL
47596: AND
47597: IFFALSE 47614
// bpoints := bpoints * 1.5 ;
47599: LD_ADDR_VAR 0 10
47603: PUSH
47604: LD_VAR 0 10
47608: PUSH
47609: LD_REAL  1.50000000000000E+0000
47612: MUL
47613: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47614: LD_VAR 0 1
47618: PPUSH
47619: LD_INT 66
47621: PPUSH
47622: CALL_OW 321
47626: PUSH
47627: LD_INT 2
47629: EQUAL
47630: IFFALSE 47647
// bpoints := bpoints * 1.1 ;
47632: LD_ADDR_VAR 0 10
47636: PUSH
47637: LD_VAR 0 10
47641: PUSH
47642: LD_REAL  1.10000000000000E+0000
47645: MUL
47646: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
47647: LD_ADDR_VAR 0 10
47651: PUSH
47652: LD_VAR 0 10
47656: PUSH
47657: LD_VAR 0 6
47661: PPUSH
47662: LD_INT 1
47664: PPUSH
47665: CALL_OW 259
47669: PUSH
47670: LD_REAL  1.15000000000000E+0000
47673: MUL
47674: MUL
47675: ST_TO_ADDR
// end ; unit_vehicle :
47676: GO 48504
47678: LD_INT 2
47680: DOUBLE
47681: EQUAL
47682: IFTRUE 47686
47684: GO 48492
47686: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
47687: LD_VAR 0 6
47691: PPUSH
47692: CALL_OW 264
47696: PUSH
47697: LD_INT 2
47699: PUSH
47700: LD_INT 42
47702: PUSH
47703: LD_INT 24
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: LIST
47710: IN
47711: IFFALSE 47732
// points := [ 25 , 5 , 3 ] ;
47713: LD_ADDR_VAR 0 9
47717: PUSH
47718: LD_INT 25
47720: PUSH
47721: LD_INT 5
47723: PUSH
47724: LD_INT 3
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: LIST
47731: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
47732: LD_VAR 0 6
47736: PPUSH
47737: CALL_OW 264
47741: PUSH
47742: LD_INT 4
47744: PUSH
47745: LD_INT 43
47747: PUSH
47748: LD_INT 25
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: LIST
47755: IN
47756: IFFALSE 47777
// points := [ 40 , 15 , 5 ] ;
47758: LD_ADDR_VAR 0 9
47762: PUSH
47763: LD_INT 40
47765: PUSH
47766: LD_INT 15
47768: PUSH
47769: LD_INT 5
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: LIST
47776: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
47777: LD_VAR 0 6
47781: PPUSH
47782: CALL_OW 264
47786: PUSH
47787: LD_INT 3
47789: PUSH
47790: LD_INT 23
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: IN
47797: IFFALSE 47818
// points := [ 7 , 25 , 8 ] ;
47799: LD_ADDR_VAR 0 9
47803: PUSH
47804: LD_INT 7
47806: PUSH
47807: LD_INT 25
47809: PUSH
47810: LD_INT 8
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: LIST
47817: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
47818: LD_VAR 0 6
47822: PPUSH
47823: CALL_OW 264
47827: PUSH
47828: LD_INT 5
47830: PUSH
47831: LD_INT 27
47833: PUSH
47834: LD_INT 44
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: LIST
47841: IN
47842: IFFALSE 47863
// points := [ 14 , 50 , 16 ] ;
47844: LD_ADDR_VAR 0 9
47848: PUSH
47849: LD_INT 14
47851: PUSH
47852: LD_INT 50
47854: PUSH
47855: LD_INT 16
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: LIST
47862: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
47863: LD_VAR 0 6
47867: PPUSH
47868: CALL_OW 264
47872: PUSH
47873: LD_INT 6
47875: PUSH
47876: LD_INT 46
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: IN
47883: IFFALSE 47904
// points := [ 32 , 120 , 70 ] ;
47885: LD_ADDR_VAR 0 9
47889: PUSH
47890: LD_INT 32
47892: PUSH
47893: LD_INT 120
47895: PUSH
47896: LD_INT 70
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: LIST
47903: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
47904: LD_VAR 0 6
47908: PPUSH
47909: CALL_OW 264
47913: PUSH
47914: LD_INT 7
47916: PUSH
47917: LD_INT 28
47919: PUSH
47920: LD_INT 45
47922: PUSH
47923: LD_INT 92
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: IN
47932: IFFALSE 47953
// points := [ 35 , 20 , 45 ] ;
47934: LD_ADDR_VAR 0 9
47938: PUSH
47939: LD_INT 35
47941: PUSH
47942: LD_INT 20
47944: PUSH
47945: LD_INT 45
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: LIST
47952: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
47953: LD_VAR 0 6
47957: PPUSH
47958: CALL_OW 264
47962: PUSH
47963: LD_INT 47
47965: PUSH
47966: EMPTY
47967: LIST
47968: IN
47969: IFFALSE 47990
// points := [ 67 , 45 , 75 ] ;
47971: LD_ADDR_VAR 0 9
47975: PUSH
47976: LD_INT 67
47978: PUSH
47979: LD_INT 45
47981: PUSH
47982: LD_INT 75
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: LIST
47989: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
47990: LD_VAR 0 6
47994: PPUSH
47995: CALL_OW 264
47999: PUSH
48000: LD_INT 26
48002: PUSH
48003: EMPTY
48004: LIST
48005: IN
48006: IFFALSE 48027
// points := [ 120 , 30 , 80 ] ;
48008: LD_ADDR_VAR 0 9
48012: PUSH
48013: LD_INT 120
48015: PUSH
48016: LD_INT 30
48018: PUSH
48019: LD_INT 80
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: LIST
48026: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48027: LD_VAR 0 6
48031: PPUSH
48032: CALL_OW 264
48036: PUSH
48037: LD_INT 22
48039: PUSH
48040: EMPTY
48041: LIST
48042: IN
48043: IFFALSE 48064
// points := [ 40 , 1 , 1 ] ;
48045: LD_ADDR_VAR 0 9
48049: PUSH
48050: LD_INT 40
48052: PUSH
48053: LD_INT 1
48055: PUSH
48056: LD_INT 1
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: LIST
48063: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48064: LD_VAR 0 6
48068: PPUSH
48069: CALL_OW 264
48073: PUSH
48074: LD_INT 29
48076: PUSH
48077: EMPTY
48078: LIST
48079: IN
48080: IFFALSE 48101
// points := [ 70 , 200 , 400 ] ;
48082: LD_ADDR_VAR 0 9
48086: PUSH
48087: LD_INT 70
48089: PUSH
48090: LD_INT 200
48092: PUSH
48093: LD_INT 400
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: LIST
48100: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48101: LD_VAR 0 6
48105: PPUSH
48106: CALL_OW 264
48110: PUSH
48111: LD_INT 14
48113: PUSH
48114: LD_INT 53
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: IN
48121: IFFALSE 48142
// points := [ 40 , 10 , 20 ] ;
48123: LD_ADDR_VAR 0 9
48127: PUSH
48128: LD_INT 40
48130: PUSH
48131: LD_INT 10
48133: PUSH
48134: LD_INT 20
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: LIST
48141: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48142: LD_VAR 0 6
48146: PPUSH
48147: CALL_OW 264
48151: PUSH
48152: LD_INT 9
48154: PUSH
48155: EMPTY
48156: LIST
48157: IN
48158: IFFALSE 48179
// points := [ 5 , 70 , 20 ] ;
48160: LD_ADDR_VAR 0 9
48164: PUSH
48165: LD_INT 5
48167: PUSH
48168: LD_INT 70
48170: PUSH
48171: LD_INT 20
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: LIST
48178: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48179: LD_VAR 0 6
48183: PPUSH
48184: CALL_OW 264
48188: PUSH
48189: LD_INT 10
48191: PUSH
48192: EMPTY
48193: LIST
48194: IN
48195: IFFALSE 48216
// points := [ 35 , 110 , 70 ] ;
48197: LD_ADDR_VAR 0 9
48201: PUSH
48202: LD_INT 35
48204: PUSH
48205: LD_INT 110
48207: PUSH
48208: LD_INT 70
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: LIST
48215: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48216: LD_VAR 0 6
48220: PPUSH
48221: CALL_OW 265
48225: PUSH
48226: LD_INT 25
48228: EQUAL
48229: IFFALSE 48250
// points := [ 80 , 65 , 100 ] ;
48231: LD_ADDR_VAR 0 9
48235: PUSH
48236: LD_INT 80
48238: PUSH
48239: LD_INT 65
48241: PUSH
48242: LD_INT 100
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: LIST
48249: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48250: LD_VAR 0 6
48254: PPUSH
48255: CALL_OW 263
48259: PUSH
48260: LD_INT 1
48262: EQUAL
48263: IFFALSE 48298
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48265: LD_ADDR_VAR 0 10
48269: PUSH
48270: LD_VAR 0 10
48274: PUSH
48275: LD_VAR 0 6
48279: PPUSH
48280: CALL_OW 311
48284: PPUSH
48285: LD_INT 3
48287: PPUSH
48288: CALL_OW 259
48292: PUSH
48293: LD_INT 4
48295: MUL
48296: MUL
48297: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48298: LD_VAR 0 6
48302: PPUSH
48303: CALL_OW 263
48307: PUSH
48308: LD_INT 2
48310: EQUAL
48311: IFFALSE 48362
// begin j := IsControledBy ( i ) ;
48313: LD_ADDR_VAR 0 7
48317: PUSH
48318: LD_VAR 0 6
48322: PPUSH
48323: CALL_OW 312
48327: ST_TO_ADDR
// if j then
48328: LD_VAR 0 7
48332: IFFALSE 48362
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48334: LD_ADDR_VAR 0 10
48338: PUSH
48339: LD_VAR 0 10
48343: PUSH
48344: LD_VAR 0 7
48348: PPUSH
48349: LD_INT 3
48351: PPUSH
48352: CALL_OW 259
48356: PUSH
48357: LD_INT 3
48359: MUL
48360: MUL
48361: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48362: LD_VAR 0 6
48366: PPUSH
48367: CALL_OW 264
48371: PUSH
48372: LD_INT 5
48374: PUSH
48375: LD_INT 6
48377: PUSH
48378: LD_INT 46
48380: PUSH
48381: LD_INT 44
48383: PUSH
48384: LD_INT 47
48386: PUSH
48387: LD_INT 45
48389: PUSH
48390: LD_INT 28
48392: PUSH
48393: LD_INT 7
48395: PUSH
48396: LD_INT 27
48398: PUSH
48399: LD_INT 29
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: IN
48414: PUSH
48415: LD_VAR 0 1
48419: PPUSH
48420: LD_INT 52
48422: PPUSH
48423: CALL_OW 321
48427: PUSH
48428: LD_INT 2
48430: EQUAL
48431: AND
48432: IFFALSE 48449
// bpoints := bpoints * 1.2 ;
48434: LD_ADDR_VAR 0 10
48438: PUSH
48439: LD_VAR 0 10
48443: PUSH
48444: LD_REAL  1.20000000000000E+0000
48447: MUL
48448: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48449: LD_VAR 0 6
48453: PPUSH
48454: CALL_OW 264
48458: PUSH
48459: LD_INT 6
48461: PUSH
48462: LD_INT 46
48464: PUSH
48465: LD_INT 47
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: LIST
48472: IN
48473: IFFALSE 48490
// bpoints := bpoints * 1.2 ;
48475: LD_ADDR_VAR 0 10
48479: PUSH
48480: LD_VAR 0 10
48484: PUSH
48485: LD_REAL  1.20000000000000E+0000
48488: MUL
48489: ST_TO_ADDR
// end ; unit_building :
48490: GO 48504
48492: LD_INT 3
48494: DOUBLE
48495: EQUAL
48496: IFTRUE 48500
48498: GO 48503
48500: POP
// ; end ;
48501: GO 48504
48503: POP
// for j = 1 to 3 do
48504: LD_ADDR_VAR 0 7
48508: PUSH
48509: DOUBLE
48510: LD_INT 1
48512: DEC
48513: ST_TO_ADDR
48514: LD_INT 3
48516: PUSH
48517: FOR_TO
48518: IFFALSE 48571
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48520: LD_ADDR_VAR 0 5
48524: PUSH
48525: LD_VAR 0 5
48529: PPUSH
48530: LD_VAR 0 7
48534: PPUSH
48535: LD_VAR 0 5
48539: PUSH
48540: LD_VAR 0 7
48544: ARRAY
48545: PUSH
48546: LD_VAR 0 9
48550: PUSH
48551: LD_VAR 0 7
48555: ARRAY
48556: PUSH
48557: LD_VAR 0 10
48561: MUL
48562: PLUS
48563: PPUSH
48564: CALL_OW 1
48568: ST_TO_ADDR
48569: GO 48517
48571: POP
48572: POP
// end ;
48573: GO 47052
48575: POP
48576: POP
// result := Replace ( result , 4 , tmp ) ;
48577: LD_ADDR_VAR 0 5
48581: PUSH
48582: LD_VAR 0 5
48586: PPUSH
48587: LD_INT 4
48589: PPUSH
48590: LD_VAR 0 8
48594: PPUSH
48595: CALL_OW 1
48599: ST_TO_ADDR
// end ;
48600: LD_VAR 0 5
48604: RET
// export function DangerAtRange ( unit , range ) ; begin
48605: LD_INT 0
48607: PPUSH
// if not unit then
48608: LD_VAR 0 1
48612: NOT
48613: IFFALSE 48617
// exit ;
48615: GO 48662
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
48617: LD_ADDR_VAR 0 3
48621: PUSH
48622: LD_VAR 0 1
48626: PPUSH
48627: CALL_OW 255
48631: PPUSH
48632: LD_VAR 0 1
48636: PPUSH
48637: CALL_OW 250
48641: PPUSH
48642: LD_VAR 0 1
48646: PPUSH
48647: CALL_OW 251
48651: PPUSH
48652: LD_VAR 0 2
48656: PPUSH
48657: CALL 46904 0 4
48661: ST_TO_ADDR
// end ;
48662: LD_VAR 0 3
48666: RET
// export function DangerInArea ( side , area ) ; begin
48667: LD_INT 0
48669: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
48670: LD_ADDR_VAR 0 3
48674: PUSH
48675: LD_VAR 0 2
48679: PPUSH
48680: LD_INT 81
48682: PUSH
48683: LD_VAR 0 1
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PPUSH
48692: CALL_OW 70
48696: ST_TO_ADDR
// end ;
48697: LD_VAR 0 3
48701: RET
// export function IsExtension ( b ) ; begin
48702: LD_INT 0
48704: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
48705: LD_ADDR_VAR 0 2
48709: PUSH
48710: LD_VAR 0 1
48714: PUSH
48715: LD_INT 23
48717: PUSH
48718: LD_INT 20
48720: PUSH
48721: LD_INT 22
48723: PUSH
48724: LD_INT 17
48726: PUSH
48727: LD_INT 24
48729: PUSH
48730: LD_INT 21
48732: PUSH
48733: LD_INT 19
48735: PUSH
48736: LD_INT 16
48738: PUSH
48739: LD_INT 25
48741: PUSH
48742: LD_INT 18
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: IN
48757: ST_TO_ADDR
// end ;
48758: LD_VAR 0 2
48762: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
48763: LD_INT 0
48765: PPUSH
48766: PPUSH
48767: PPUSH
// result := [ ] ;
48768: LD_ADDR_VAR 0 4
48772: PUSH
48773: EMPTY
48774: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
48775: LD_ADDR_VAR 0 5
48779: PUSH
48780: LD_VAR 0 2
48784: PPUSH
48785: LD_INT 21
48787: PUSH
48788: LD_INT 3
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PPUSH
48795: CALL_OW 70
48799: ST_TO_ADDR
// if not tmp then
48800: LD_VAR 0 5
48804: NOT
48805: IFFALSE 48809
// exit ;
48807: GO 48873
// if checkLink then
48809: LD_VAR 0 3
48813: IFFALSE 48863
// begin for i in tmp do
48815: LD_ADDR_VAR 0 6
48819: PUSH
48820: LD_VAR 0 5
48824: PUSH
48825: FOR_IN
48826: IFFALSE 48861
// if GetBase ( i ) <> base then
48828: LD_VAR 0 6
48832: PPUSH
48833: CALL_OW 274
48837: PUSH
48838: LD_VAR 0 1
48842: NONEQUAL
48843: IFFALSE 48859
// ComLinkToBase ( base , i ) ;
48845: LD_VAR 0 1
48849: PPUSH
48850: LD_VAR 0 6
48854: PPUSH
48855: CALL_OW 169
48859: GO 48825
48861: POP
48862: POP
// end ; result := tmp ;
48863: LD_ADDR_VAR 0 4
48867: PUSH
48868: LD_VAR 0 5
48872: ST_TO_ADDR
// end ;
48873: LD_VAR 0 4
48877: RET
// export function ComComplete ( units , b ) ; var i ; begin
48878: LD_INT 0
48880: PPUSH
48881: PPUSH
// if not units then
48882: LD_VAR 0 1
48886: NOT
48887: IFFALSE 48891
// exit ;
48889: GO 48981
// for i in units do
48891: LD_ADDR_VAR 0 4
48895: PUSH
48896: LD_VAR 0 1
48900: PUSH
48901: FOR_IN
48902: IFFALSE 48979
// if BuildingStatus ( b ) = bs_build then
48904: LD_VAR 0 2
48908: PPUSH
48909: CALL_OW 461
48913: PUSH
48914: LD_INT 1
48916: EQUAL
48917: IFFALSE 48977
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
48919: LD_VAR 0 4
48923: PPUSH
48924: LD_STRING h
48926: PUSH
48927: LD_VAR 0 2
48931: PPUSH
48932: CALL_OW 250
48936: PUSH
48937: LD_VAR 0 2
48941: PPUSH
48942: CALL_OW 251
48946: PUSH
48947: LD_VAR 0 2
48951: PUSH
48952: LD_INT 0
48954: PUSH
48955: LD_INT 0
48957: PUSH
48958: LD_INT 0
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: PUSH
48970: EMPTY
48971: LIST
48972: PPUSH
48973: CALL_OW 446
48977: GO 48901
48979: POP
48980: POP
// end ;
48981: LD_VAR 0 3
48985: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
48986: LD_INT 0
48988: PPUSH
48989: PPUSH
48990: PPUSH
48991: PPUSH
48992: PPUSH
48993: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
48994: LD_VAR 0 1
48998: NOT
48999: PUSH
49000: LD_VAR 0 1
49004: PPUSH
49005: CALL_OW 263
49009: PUSH
49010: LD_INT 2
49012: NONEQUAL
49013: OR
49014: IFFALSE 49018
// exit ;
49016: GO 49334
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49018: LD_ADDR_VAR 0 6
49022: PUSH
49023: LD_INT 22
49025: PUSH
49026: LD_VAR 0 1
49030: PPUSH
49031: CALL_OW 255
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 2
49042: PUSH
49043: LD_INT 30
49045: PUSH
49046: LD_INT 36
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 34
49055: PUSH
49056: LD_INT 31
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: LIST
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PPUSH
49072: CALL_OW 69
49076: ST_TO_ADDR
// if not tmp then
49077: LD_VAR 0 6
49081: NOT
49082: IFFALSE 49086
// exit ;
49084: GO 49334
// result := [ ] ;
49086: LD_ADDR_VAR 0 2
49090: PUSH
49091: EMPTY
49092: ST_TO_ADDR
// for i in tmp do
49093: LD_ADDR_VAR 0 3
49097: PUSH
49098: LD_VAR 0 6
49102: PUSH
49103: FOR_IN
49104: IFFALSE 49175
// begin t := UnitsInside ( i ) ;
49106: LD_ADDR_VAR 0 4
49110: PUSH
49111: LD_VAR 0 3
49115: PPUSH
49116: CALL_OW 313
49120: ST_TO_ADDR
// if t then
49121: LD_VAR 0 4
49125: IFFALSE 49173
// for j in t do
49127: LD_ADDR_VAR 0 7
49131: PUSH
49132: LD_VAR 0 4
49136: PUSH
49137: FOR_IN
49138: IFFALSE 49171
// result := Replace ( result , result + 1 , j ) ;
49140: LD_ADDR_VAR 0 2
49144: PUSH
49145: LD_VAR 0 2
49149: PPUSH
49150: LD_VAR 0 2
49154: PUSH
49155: LD_INT 1
49157: PLUS
49158: PPUSH
49159: LD_VAR 0 7
49163: PPUSH
49164: CALL_OW 1
49168: ST_TO_ADDR
49169: GO 49137
49171: POP
49172: POP
// end ;
49173: GO 49103
49175: POP
49176: POP
// if not result then
49177: LD_VAR 0 2
49181: NOT
49182: IFFALSE 49186
// exit ;
49184: GO 49334
// mech := result [ 1 ] ;
49186: LD_ADDR_VAR 0 5
49190: PUSH
49191: LD_VAR 0 2
49195: PUSH
49196: LD_INT 1
49198: ARRAY
49199: ST_TO_ADDR
// if result > 1 then
49200: LD_VAR 0 2
49204: PUSH
49205: LD_INT 1
49207: GREATER
49208: IFFALSE 49320
// begin for i = 2 to result do
49210: LD_ADDR_VAR 0 3
49214: PUSH
49215: DOUBLE
49216: LD_INT 2
49218: DEC
49219: ST_TO_ADDR
49220: LD_VAR 0 2
49224: PUSH
49225: FOR_TO
49226: IFFALSE 49318
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49228: LD_ADDR_VAR 0 4
49232: PUSH
49233: LD_VAR 0 2
49237: PUSH
49238: LD_VAR 0 3
49242: ARRAY
49243: PPUSH
49244: LD_INT 3
49246: PPUSH
49247: CALL_OW 259
49251: PUSH
49252: LD_VAR 0 2
49256: PUSH
49257: LD_VAR 0 3
49261: ARRAY
49262: PPUSH
49263: CALL_OW 432
49267: MINUS
49268: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49269: LD_VAR 0 4
49273: PUSH
49274: LD_VAR 0 5
49278: PPUSH
49279: LD_INT 3
49281: PPUSH
49282: CALL_OW 259
49286: PUSH
49287: LD_VAR 0 5
49291: PPUSH
49292: CALL_OW 432
49296: MINUS
49297: GREATEREQUAL
49298: IFFALSE 49316
// mech := result [ i ] ;
49300: LD_ADDR_VAR 0 5
49304: PUSH
49305: LD_VAR 0 2
49309: PUSH
49310: LD_VAR 0 3
49314: ARRAY
49315: ST_TO_ADDR
// end ;
49316: GO 49225
49318: POP
49319: POP
// end ; ComLinkTo ( vehicle , mech ) ;
49320: LD_VAR 0 1
49324: PPUSH
49325: LD_VAR 0 5
49329: PPUSH
49330: CALL_OW 135
// end ;
49334: LD_VAR 0 2
49338: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49339: LD_INT 0
49341: PPUSH
49342: PPUSH
49343: PPUSH
49344: PPUSH
49345: PPUSH
49346: PPUSH
49347: PPUSH
49348: PPUSH
49349: PPUSH
49350: PPUSH
49351: PPUSH
49352: PPUSH
49353: PPUSH
// result := [ ] ;
49354: LD_ADDR_VAR 0 7
49358: PUSH
49359: EMPTY
49360: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49361: LD_VAR 0 1
49365: PPUSH
49366: CALL_OW 266
49370: PUSH
49371: LD_INT 0
49373: PUSH
49374: LD_INT 1
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: IN
49381: NOT
49382: IFFALSE 49386
// exit ;
49384: GO 51020
// if name then
49386: LD_VAR 0 3
49390: IFFALSE 49406
// SetBName ( base_dep , name ) ;
49392: LD_VAR 0 1
49396: PPUSH
49397: LD_VAR 0 3
49401: PPUSH
49402: CALL_OW 500
// base := GetBase ( base_dep ) ;
49406: LD_ADDR_VAR 0 15
49410: PUSH
49411: LD_VAR 0 1
49415: PPUSH
49416: CALL_OW 274
49420: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49421: LD_ADDR_VAR 0 16
49425: PUSH
49426: LD_VAR 0 1
49430: PPUSH
49431: CALL_OW 255
49435: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49436: LD_ADDR_VAR 0 17
49440: PUSH
49441: LD_VAR 0 1
49445: PPUSH
49446: CALL_OW 248
49450: ST_TO_ADDR
// if sources then
49451: LD_VAR 0 5
49455: IFFALSE 49502
// for i = 1 to 3 do
49457: LD_ADDR_VAR 0 8
49461: PUSH
49462: DOUBLE
49463: LD_INT 1
49465: DEC
49466: ST_TO_ADDR
49467: LD_INT 3
49469: PUSH
49470: FOR_TO
49471: IFFALSE 49500
// AddResourceType ( base , i , sources [ i ] ) ;
49473: LD_VAR 0 15
49477: PPUSH
49478: LD_VAR 0 8
49482: PPUSH
49483: LD_VAR 0 5
49487: PUSH
49488: LD_VAR 0 8
49492: ARRAY
49493: PPUSH
49494: CALL_OW 276
49498: GO 49470
49500: POP
49501: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
49502: LD_ADDR_VAR 0 18
49506: PUSH
49507: LD_VAR 0 15
49511: PPUSH
49512: LD_VAR 0 2
49516: PPUSH
49517: LD_INT 1
49519: PPUSH
49520: CALL 48763 0 3
49524: ST_TO_ADDR
// InitHc ;
49525: CALL_OW 19
// InitUc ;
49529: CALL_OW 18
// uc_side := side ;
49533: LD_ADDR_OWVAR 20
49537: PUSH
49538: LD_VAR 0 16
49542: ST_TO_ADDR
// uc_nation := nation ;
49543: LD_ADDR_OWVAR 21
49547: PUSH
49548: LD_VAR 0 17
49552: ST_TO_ADDR
// if buildings then
49553: LD_VAR 0 18
49557: IFFALSE 50879
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49559: LD_ADDR_VAR 0 19
49563: PUSH
49564: LD_VAR 0 18
49568: PPUSH
49569: LD_INT 2
49571: PUSH
49572: LD_INT 30
49574: PUSH
49575: LD_INT 29
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 30
49584: PUSH
49585: LD_INT 30
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: LIST
49596: PPUSH
49597: CALL_OW 72
49601: ST_TO_ADDR
// if tmp then
49602: LD_VAR 0 19
49606: IFFALSE 49654
// for i in tmp do
49608: LD_ADDR_VAR 0 8
49612: PUSH
49613: LD_VAR 0 19
49617: PUSH
49618: FOR_IN
49619: IFFALSE 49652
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49621: LD_VAR 0 8
49625: PPUSH
49626: CALL_OW 250
49630: PPUSH
49631: LD_VAR 0 8
49635: PPUSH
49636: CALL_OW 251
49640: PPUSH
49641: LD_VAR 0 16
49645: PPUSH
49646: CALL_OW 441
49650: GO 49618
49652: POP
49653: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
49654: LD_VAR 0 18
49658: PPUSH
49659: LD_INT 2
49661: PUSH
49662: LD_INT 30
49664: PUSH
49665: LD_INT 32
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 30
49674: PUSH
49675: LD_INT 33
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: LIST
49686: PPUSH
49687: CALL_OW 72
49691: IFFALSE 49779
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
49693: LD_ADDR_VAR 0 8
49697: PUSH
49698: LD_VAR 0 18
49702: PPUSH
49703: LD_INT 2
49705: PUSH
49706: LD_INT 30
49708: PUSH
49709: LD_INT 32
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 30
49718: PUSH
49719: LD_INT 33
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: LIST
49730: PPUSH
49731: CALL_OW 72
49735: PUSH
49736: FOR_IN
49737: IFFALSE 49777
// begin if not GetBWeapon ( i ) then
49739: LD_VAR 0 8
49743: PPUSH
49744: CALL_OW 269
49748: NOT
49749: IFFALSE 49775
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
49751: LD_VAR 0 8
49755: PPUSH
49756: LD_VAR 0 8
49760: PPUSH
49761: LD_VAR 0 2
49765: PPUSH
49766: CALL 51025 0 2
49770: PPUSH
49771: CALL_OW 431
// end ;
49775: GO 49736
49777: POP
49778: POP
// end ; for i = 1 to personel do
49779: LD_ADDR_VAR 0 8
49783: PUSH
49784: DOUBLE
49785: LD_INT 1
49787: DEC
49788: ST_TO_ADDR
49789: LD_VAR 0 6
49793: PUSH
49794: FOR_TO
49795: IFFALSE 50859
// begin if i > 4 then
49797: LD_VAR 0 8
49801: PUSH
49802: LD_INT 4
49804: GREATER
49805: IFFALSE 49809
// break ;
49807: GO 50859
// case i of 1 :
49809: LD_VAR 0 8
49813: PUSH
49814: LD_INT 1
49816: DOUBLE
49817: EQUAL
49818: IFTRUE 49822
49820: GO 49902
49822: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
49823: LD_ADDR_VAR 0 12
49827: PUSH
49828: LD_VAR 0 18
49832: PPUSH
49833: LD_INT 22
49835: PUSH
49836: LD_VAR 0 16
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 58
49847: PUSH
49848: EMPTY
49849: LIST
49850: PUSH
49851: LD_INT 2
49853: PUSH
49854: LD_INT 30
49856: PUSH
49857: LD_INT 32
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 30
49866: PUSH
49867: LD_INT 4
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 30
49876: PUSH
49877: LD_INT 5
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: LIST
49894: PPUSH
49895: CALL_OW 72
49899: ST_TO_ADDR
49900: GO 50124
49902: LD_INT 2
49904: DOUBLE
49905: EQUAL
49906: IFTRUE 49910
49908: GO 49972
49910: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
49911: LD_ADDR_VAR 0 12
49915: PUSH
49916: LD_VAR 0 18
49920: PPUSH
49921: LD_INT 22
49923: PUSH
49924: LD_VAR 0 16
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 2
49935: PUSH
49936: LD_INT 30
49938: PUSH
49939: LD_INT 0
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 30
49948: PUSH
49949: LD_INT 1
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: LIST
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PPUSH
49965: CALL_OW 72
49969: ST_TO_ADDR
49970: GO 50124
49972: LD_INT 3
49974: DOUBLE
49975: EQUAL
49976: IFTRUE 49980
49978: GO 50042
49980: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
49981: LD_ADDR_VAR 0 12
49985: PUSH
49986: LD_VAR 0 18
49990: PPUSH
49991: LD_INT 22
49993: PUSH
49994: LD_VAR 0 16
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 2
50005: PUSH
50006: LD_INT 30
50008: PUSH
50009: LD_INT 2
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 30
50018: PUSH
50019: LD_INT 3
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: LIST
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PPUSH
50035: CALL_OW 72
50039: ST_TO_ADDR
50040: GO 50124
50042: LD_INT 4
50044: DOUBLE
50045: EQUAL
50046: IFTRUE 50050
50048: GO 50123
50050: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50051: LD_ADDR_VAR 0 12
50055: PUSH
50056: LD_VAR 0 18
50060: PPUSH
50061: LD_INT 22
50063: PUSH
50064: LD_VAR 0 16
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 2
50075: PUSH
50076: LD_INT 30
50078: PUSH
50079: LD_INT 6
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 30
50088: PUSH
50089: LD_INT 7
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 30
50098: PUSH
50099: LD_INT 8
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PPUSH
50116: CALL_OW 72
50120: ST_TO_ADDR
50121: GO 50124
50123: POP
// if i = 1 then
50124: LD_VAR 0 8
50128: PUSH
50129: LD_INT 1
50131: EQUAL
50132: IFFALSE 50243
// begin tmp := [ ] ;
50134: LD_ADDR_VAR 0 19
50138: PUSH
50139: EMPTY
50140: ST_TO_ADDR
// for j in f do
50141: LD_ADDR_VAR 0 9
50145: PUSH
50146: LD_VAR 0 12
50150: PUSH
50151: FOR_IN
50152: IFFALSE 50225
// if GetBType ( j ) = b_bunker then
50154: LD_VAR 0 9
50158: PPUSH
50159: CALL_OW 266
50163: PUSH
50164: LD_INT 32
50166: EQUAL
50167: IFFALSE 50194
// tmp := Insert ( tmp , 1 , j ) else
50169: LD_ADDR_VAR 0 19
50173: PUSH
50174: LD_VAR 0 19
50178: PPUSH
50179: LD_INT 1
50181: PPUSH
50182: LD_VAR 0 9
50186: PPUSH
50187: CALL_OW 2
50191: ST_TO_ADDR
50192: GO 50223
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50194: LD_ADDR_VAR 0 19
50198: PUSH
50199: LD_VAR 0 19
50203: PPUSH
50204: LD_VAR 0 19
50208: PUSH
50209: LD_INT 1
50211: PLUS
50212: PPUSH
50213: LD_VAR 0 9
50217: PPUSH
50218: CALL_OW 2
50222: ST_TO_ADDR
50223: GO 50151
50225: POP
50226: POP
// if tmp then
50227: LD_VAR 0 19
50231: IFFALSE 50243
// f := tmp ;
50233: LD_ADDR_VAR 0 12
50237: PUSH
50238: LD_VAR 0 19
50242: ST_TO_ADDR
// end ; x := personel [ i ] ;
50243: LD_ADDR_VAR 0 13
50247: PUSH
50248: LD_VAR 0 6
50252: PUSH
50253: LD_VAR 0 8
50257: ARRAY
50258: ST_TO_ADDR
// if x = - 1 then
50259: LD_VAR 0 13
50263: PUSH
50264: LD_INT 1
50266: NEG
50267: EQUAL
50268: IFFALSE 50477
// begin for j in f do
50270: LD_ADDR_VAR 0 9
50274: PUSH
50275: LD_VAR 0 12
50279: PUSH
50280: FOR_IN
50281: IFFALSE 50473
// repeat InitHc ;
50283: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50287: LD_VAR 0 9
50291: PPUSH
50292: CALL_OW 266
50296: PUSH
50297: LD_INT 5
50299: EQUAL
50300: IFFALSE 50370
// begin if UnitsInside ( j ) < 3 then
50302: LD_VAR 0 9
50306: PPUSH
50307: CALL_OW 313
50311: PUSH
50312: LD_INT 3
50314: LESS
50315: IFFALSE 50351
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50317: LD_INT 0
50319: PPUSH
50320: LD_INT 5
50322: PUSH
50323: LD_INT 8
50325: PUSH
50326: LD_INT 9
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: LIST
50333: PUSH
50334: LD_VAR 0 17
50338: ARRAY
50339: PPUSH
50340: LD_VAR 0 4
50344: PPUSH
50345: CALL_OW 380
50349: GO 50368
// PrepareHuman ( false , i , skill ) ;
50351: LD_INT 0
50353: PPUSH
50354: LD_VAR 0 8
50358: PPUSH
50359: LD_VAR 0 4
50363: PPUSH
50364: CALL_OW 380
// end else
50368: GO 50387
// PrepareHuman ( false , i , skill ) ;
50370: LD_INT 0
50372: PPUSH
50373: LD_VAR 0 8
50377: PPUSH
50378: LD_VAR 0 4
50382: PPUSH
50383: CALL_OW 380
// un := CreateHuman ;
50387: LD_ADDR_VAR 0 14
50391: PUSH
50392: CALL_OW 44
50396: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50397: LD_ADDR_VAR 0 7
50401: PUSH
50402: LD_VAR 0 7
50406: PPUSH
50407: LD_INT 1
50409: PPUSH
50410: LD_VAR 0 14
50414: PPUSH
50415: CALL_OW 2
50419: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50420: LD_VAR 0 14
50424: PPUSH
50425: LD_VAR 0 9
50429: PPUSH
50430: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50434: LD_VAR 0 9
50438: PPUSH
50439: CALL_OW 313
50443: PUSH
50444: LD_INT 6
50446: EQUAL
50447: PUSH
50448: LD_VAR 0 9
50452: PPUSH
50453: CALL_OW 266
50457: PUSH
50458: LD_INT 32
50460: PUSH
50461: LD_INT 31
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: IN
50468: OR
50469: IFFALSE 50283
50471: GO 50280
50473: POP
50474: POP
// end else
50475: GO 50857
// for j = 1 to x do
50477: LD_ADDR_VAR 0 9
50481: PUSH
50482: DOUBLE
50483: LD_INT 1
50485: DEC
50486: ST_TO_ADDR
50487: LD_VAR 0 13
50491: PUSH
50492: FOR_TO
50493: IFFALSE 50855
// begin InitHc ;
50495: CALL_OW 19
// if not f then
50499: LD_VAR 0 12
50503: NOT
50504: IFFALSE 50593
// begin PrepareHuman ( false , i , skill ) ;
50506: LD_INT 0
50508: PPUSH
50509: LD_VAR 0 8
50513: PPUSH
50514: LD_VAR 0 4
50518: PPUSH
50519: CALL_OW 380
// un := CreateHuman ;
50523: LD_ADDR_VAR 0 14
50527: PUSH
50528: CALL_OW 44
50532: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50533: LD_ADDR_VAR 0 7
50537: PUSH
50538: LD_VAR 0 7
50542: PPUSH
50543: LD_INT 1
50545: PPUSH
50546: LD_VAR 0 14
50550: PPUSH
50551: CALL_OW 2
50555: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50556: LD_VAR 0 14
50560: PPUSH
50561: LD_VAR 0 1
50565: PPUSH
50566: CALL_OW 250
50570: PPUSH
50571: LD_VAR 0 1
50575: PPUSH
50576: CALL_OW 251
50580: PPUSH
50581: LD_INT 10
50583: PPUSH
50584: LD_INT 0
50586: PPUSH
50587: CALL_OW 50
// continue ;
50591: GO 50492
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50593: LD_VAR 0 12
50597: PUSH
50598: LD_INT 1
50600: ARRAY
50601: PPUSH
50602: CALL_OW 313
50606: PUSH
50607: LD_VAR 0 12
50611: PUSH
50612: LD_INT 1
50614: ARRAY
50615: PPUSH
50616: CALL_OW 266
50620: PUSH
50621: LD_INT 32
50623: PUSH
50624: LD_INT 31
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: IN
50631: AND
50632: PUSH
50633: LD_VAR 0 12
50637: PUSH
50638: LD_INT 1
50640: ARRAY
50641: PPUSH
50642: CALL_OW 313
50646: PUSH
50647: LD_INT 6
50649: EQUAL
50650: OR
50651: IFFALSE 50671
// f := Delete ( f , 1 ) ;
50653: LD_ADDR_VAR 0 12
50657: PUSH
50658: LD_VAR 0 12
50662: PPUSH
50663: LD_INT 1
50665: PPUSH
50666: CALL_OW 3
50670: ST_TO_ADDR
// if not f then
50671: LD_VAR 0 12
50675: NOT
50676: IFFALSE 50694
// begin x := x + 2 ;
50678: LD_ADDR_VAR 0 13
50682: PUSH
50683: LD_VAR 0 13
50687: PUSH
50688: LD_INT 2
50690: PLUS
50691: ST_TO_ADDR
// continue ;
50692: GO 50492
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
50694: LD_VAR 0 12
50698: PUSH
50699: LD_INT 1
50701: ARRAY
50702: PPUSH
50703: CALL_OW 266
50707: PUSH
50708: LD_INT 5
50710: EQUAL
50711: IFFALSE 50785
// begin if UnitsInside ( f [ 1 ] ) < 3 then
50713: LD_VAR 0 12
50717: PUSH
50718: LD_INT 1
50720: ARRAY
50721: PPUSH
50722: CALL_OW 313
50726: PUSH
50727: LD_INT 3
50729: LESS
50730: IFFALSE 50766
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50732: LD_INT 0
50734: PPUSH
50735: LD_INT 5
50737: PUSH
50738: LD_INT 8
50740: PUSH
50741: LD_INT 9
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: LIST
50748: PUSH
50749: LD_VAR 0 17
50753: ARRAY
50754: PPUSH
50755: LD_VAR 0 4
50759: PPUSH
50760: CALL_OW 380
50764: GO 50783
// PrepareHuman ( false , i , skill ) ;
50766: LD_INT 0
50768: PPUSH
50769: LD_VAR 0 8
50773: PPUSH
50774: LD_VAR 0 4
50778: PPUSH
50779: CALL_OW 380
// end else
50783: GO 50802
// PrepareHuman ( false , i , skill ) ;
50785: LD_INT 0
50787: PPUSH
50788: LD_VAR 0 8
50792: PPUSH
50793: LD_VAR 0 4
50797: PPUSH
50798: CALL_OW 380
// un := CreateHuman ;
50802: LD_ADDR_VAR 0 14
50806: PUSH
50807: CALL_OW 44
50811: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50812: LD_ADDR_VAR 0 7
50816: PUSH
50817: LD_VAR 0 7
50821: PPUSH
50822: LD_INT 1
50824: PPUSH
50825: LD_VAR 0 14
50829: PPUSH
50830: CALL_OW 2
50834: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
50835: LD_VAR 0 14
50839: PPUSH
50840: LD_VAR 0 12
50844: PUSH
50845: LD_INT 1
50847: ARRAY
50848: PPUSH
50849: CALL_OW 52
// end ;
50853: GO 50492
50855: POP
50856: POP
// end ;
50857: GO 49794
50859: POP
50860: POP
// result := result ^ buildings ;
50861: LD_ADDR_VAR 0 7
50865: PUSH
50866: LD_VAR 0 7
50870: PUSH
50871: LD_VAR 0 18
50875: ADD
50876: ST_TO_ADDR
// end else
50877: GO 51020
// begin for i = 1 to personel do
50879: LD_ADDR_VAR 0 8
50883: PUSH
50884: DOUBLE
50885: LD_INT 1
50887: DEC
50888: ST_TO_ADDR
50889: LD_VAR 0 6
50893: PUSH
50894: FOR_TO
50895: IFFALSE 51018
// begin if i > 4 then
50897: LD_VAR 0 8
50901: PUSH
50902: LD_INT 4
50904: GREATER
50905: IFFALSE 50909
// break ;
50907: GO 51018
// x := personel [ i ] ;
50909: LD_ADDR_VAR 0 13
50913: PUSH
50914: LD_VAR 0 6
50918: PUSH
50919: LD_VAR 0 8
50923: ARRAY
50924: ST_TO_ADDR
// if x = - 1 then
50925: LD_VAR 0 13
50929: PUSH
50930: LD_INT 1
50932: NEG
50933: EQUAL
50934: IFFALSE 50938
// continue ;
50936: GO 50894
// PrepareHuman ( false , i , skill ) ;
50938: LD_INT 0
50940: PPUSH
50941: LD_VAR 0 8
50945: PPUSH
50946: LD_VAR 0 4
50950: PPUSH
50951: CALL_OW 380
// un := CreateHuman ;
50955: LD_ADDR_VAR 0 14
50959: PUSH
50960: CALL_OW 44
50964: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50965: LD_VAR 0 14
50969: PPUSH
50970: LD_VAR 0 1
50974: PPUSH
50975: CALL_OW 250
50979: PPUSH
50980: LD_VAR 0 1
50984: PPUSH
50985: CALL_OW 251
50989: PPUSH
50990: LD_INT 10
50992: PPUSH
50993: LD_INT 0
50995: PPUSH
50996: CALL_OW 50
// result := result ^ un ;
51000: LD_ADDR_VAR 0 7
51004: PUSH
51005: LD_VAR 0 7
51009: PUSH
51010: LD_VAR 0 14
51014: ADD
51015: ST_TO_ADDR
// end ;
51016: GO 50894
51018: POP
51019: POP
// end ; end ;
51020: LD_VAR 0 7
51024: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51025: LD_INT 0
51027: PPUSH
51028: PPUSH
51029: PPUSH
51030: PPUSH
51031: PPUSH
51032: PPUSH
51033: PPUSH
51034: PPUSH
51035: PPUSH
51036: PPUSH
51037: PPUSH
51038: PPUSH
51039: PPUSH
51040: PPUSH
51041: PPUSH
51042: PPUSH
// result := false ;
51043: LD_ADDR_VAR 0 3
51047: PUSH
51048: LD_INT 0
51050: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51051: LD_VAR 0 1
51055: NOT
51056: PUSH
51057: LD_VAR 0 1
51061: PPUSH
51062: CALL_OW 266
51066: PUSH
51067: LD_INT 32
51069: PUSH
51070: LD_INT 33
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: IN
51077: NOT
51078: OR
51079: IFFALSE 51083
// exit ;
51081: GO 52192
// nat := GetNation ( tower ) ;
51083: LD_ADDR_VAR 0 12
51087: PUSH
51088: LD_VAR 0 1
51092: PPUSH
51093: CALL_OW 248
51097: ST_TO_ADDR
// side := GetSide ( tower ) ;
51098: LD_ADDR_VAR 0 16
51102: PUSH
51103: LD_VAR 0 1
51107: PPUSH
51108: CALL_OW 255
51112: ST_TO_ADDR
// x := GetX ( tower ) ;
51113: LD_ADDR_VAR 0 10
51117: PUSH
51118: LD_VAR 0 1
51122: PPUSH
51123: CALL_OW 250
51127: ST_TO_ADDR
// y := GetY ( tower ) ;
51128: LD_ADDR_VAR 0 11
51132: PUSH
51133: LD_VAR 0 1
51137: PPUSH
51138: CALL_OW 251
51142: ST_TO_ADDR
// if not x or not y then
51143: LD_VAR 0 10
51147: NOT
51148: PUSH
51149: LD_VAR 0 11
51153: NOT
51154: OR
51155: IFFALSE 51159
// exit ;
51157: GO 52192
// weapon := 0 ;
51159: LD_ADDR_VAR 0 18
51163: PUSH
51164: LD_INT 0
51166: ST_TO_ADDR
// fac_list := [ ] ;
51167: LD_ADDR_VAR 0 17
51171: PUSH
51172: EMPTY
51173: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51174: LD_ADDR_VAR 0 6
51178: PUSH
51179: LD_VAR 0 1
51183: PPUSH
51184: CALL_OW 274
51188: PPUSH
51189: LD_VAR 0 2
51193: PPUSH
51194: LD_INT 0
51196: PPUSH
51197: CALL 48763 0 3
51201: PPUSH
51202: LD_INT 30
51204: PUSH
51205: LD_INT 3
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PPUSH
51212: CALL_OW 72
51216: ST_TO_ADDR
// if not factories then
51217: LD_VAR 0 6
51221: NOT
51222: IFFALSE 51226
// exit ;
51224: GO 52192
// for i in factories do
51226: LD_ADDR_VAR 0 8
51230: PUSH
51231: LD_VAR 0 6
51235: PUSH
51236: FOR_IN
51237: IFFALSE 51262
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51239: LD_ADDR_VAR 0 17
51243: PUSH
51244: LD_VAR 0 17
51248: PUSH
51249: LD_VAR 0 8
51253: PPUSH
51254: CALL_OW 478
51258: UNION
51259: ST_TO_ADDR
51260: GO 51236
51262: POP
51263: POP
// if not fac_list then
51264: LD_VAR 0 17
51268: NOT
51269: IFFALSE 51273
// exit ;
51271: GO 52192
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51273: LD_ADDR_VAR 0 5
51277: PUSH
51278: LD_INT 4
51280: PUSH
51281: LD_INT 5
51283: PUSH
51284: LD_INT 9
51286: PUSH
51287: LD_INT 10
51289: PUSH
51290: LD_INT 6
51292: PUSH
51293: LD_INT 7
51295: PUSH
51296: LD_INT 11
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 27
51310: PUSH
51311: LD_INT 28
51313: PUSH
51314: LD_INT 26
51316: PUSH
51317: LD_INT 30
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 43
51328: PUSH
51329: LD_INT 44
51331: PUSH
51332: LD_INT 46
51334: PUSH
51335: LD_INT 45
51337: PUSH
51338: LD_INT 47
51340: PUSH
51341: LD_INT 49
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: LIST
51356: PUSH
51357: LD_VAR 0 12
51361: ARRAY
51362: ST_TO_ADDR
// list := list isect fac_list ;
51363: LD_ADDR_VAR 0 5
51367: PUSH
51368: LD_VAR 0 5
51372: PUSH
51373: LD_VAR 0 17
51377: ISECT
51378: ST_TO_ADDR
// if not list then
51379: LD_VAR 0 5
51383: NOT
51384: IFFALSE 51388
// exit ;
51386: GO 52192
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51388: LD_VAR 0 12
51392: PUSH
51393: LD_INT 3
51395: EQUAL
51396: PUSH
51397: LD_INT 49
51399: PUSH
51400: LD_VAR 0 5
51404: IN
51405: AND
51406: PUSH
51407: LD_INT 31
51409: PPUSH
51410: LD_VAR 0 16
51414: PPUSH
51415: CALL_OW 321
51419: PUSH
51420: LD_INT 2
51422: EQUAL
51423: AND
51424: IFFALSE 51484
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51426: LD_INT 22
51428: PUSH
51429: LD_VAR 0 16
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 35
51440: PUSH
51441: LD_INT 49
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 91
51450: PUSH
51451: LD_VAR 0 1
51455: PUSH
51456: LD_INT 10
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: LIST
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: LIST
51468: PPUSH
51469: CALL_OW 69
51473: NOT
51474: IFFALSE 51484
// weapon := ru_time_lapser ;
51476: LD_ADDR_VAR 0 18
51480: PUSH
51481: LD_INT 49
51483: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51484: LD_VAR 0 12
51488: PUSH
51489: LD_INT 1
51491: PUSH
51492: LD_INT 2
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: IN
51499: PUSH
51500: LD_INT 11
51502: PUSH
51503: LD_VAR 0 5
51507: IN
51508: PUSH
51509: LD_INT 30
51511: PUSH
51512: LD_VAR 0 5
51516: IN
51517: OR
51518: AND
51519: PUSH
51520: LD_INT 6
51522: PPUSH
51523: LD_VAR 0 16
51527: PPUSH
51528: CALL_OW 321
51532: PUSH
51533: LD_INT 2
51535: EQUAL
51536: AND
51537: IFFALSE 51702
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51539: LD_INT 22
51541: PUSH
51542: LD_VAR 0 16
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 2
51553: PUSH
51554: LD_INT 35
51556: PUSH
51557: LD_INT 11
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 35
51566: PUSH
51567: LD_INT 30
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 91
51581: PUSH
51582: LD_VAR 0 1
51586: PUSH
51587: LD_INT 18
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: LIST
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: LIST
51599: PPUSH
51600: CALL_OW 69
51604: NOT
51605: PUSH
51606: LD_INT 22
51608: PUSH
51609: LD_VAR 0 16
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 2
51620: PUSH
51621: LD_INT 30
51623: PUSH
51624: LD_INT 32
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 30
51633: PUSH
51634: LD_INT 33
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 91
51648: PUSH
51649: LD_VAR 0 1
51653: PUSH
51654: LD_INT 12
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: LIST
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: LIST
51666: PUSH
51667: EMPTY
51668: LIST
51669: PPUSH
51670: CALL_OW 69
51674: PUSH
51675: LD_INT 2
51677: GREATER
51678: AND
51679: IFFALSE 51702
// weapon := [ us_radar , ar_radar ] [ nat ] ;
51681: LD_ADDR_VAR 0 18
51685: PUSH
51686: LD_INT 11
51688: PUSH
51689: LD_INT 30
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_VAR 0 12
51700: ARRAY
51701: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
51702: LD_VAR 0 18
51706: NOT
51707: PUSH
51708: LD_INT 40
51710: PPUSH
51711: LD_VAR 0 16
51715: PPUSH
51716: CALL_OW 321
51720: PUSH
51721: LD_INT 2
51723: EQUAL
51724: AND
51725: PUSH
51726: LD_INT 7
51728: PUSH
51729: LD_VAR 0 5
51733: IN
51734: PUSH
51735: LD_INT 28
51737: PUSH
51738: LD_VAR 0 5
51742: IN
51743: OR
51744: PUSH
51745: LD_INT 45
51747: PUSH
51748: LD_VAR 0 5
51752: IN
51753: OR
51754: AND
51755: IFFALSE 52009
// begin hex := GetHexInfo ( x , y ) ;
51757: LD_ADDR_VAR 0 4
51761: PUSH
51762: LD_VAR 0 10
51766: PPUSH
51767: LD_VAR 0 11
51771: PPUSH
51772: CALL_OW 546
51776: ST_TO_ADDR
// if hex [ 1 ] then
51777: LD_VAR 0 4
51781: PUSH
51782: LD_INT 1
51784: ARRAY
51785: IFFALSE 51789
// exit ;
51787: GO 52192
// height := hex [ 2 ] ;
51789: LD_ADDR_VAR 0 15
51793: PUSH
51794: LD_VAR 0 4
51798: PUSH
51799: LD_INT 2
51801: ARRAY
51802: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
51803: LD_ADDR_VAR 0 14
51807: PUSH
51808: LD_INT 0
51810: PUSH
51811: LD_INT 2
51813: PUSH
51814: LD_INT 3
51816: PUSH
51817: LD_INT 5
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: ST_TO_ADDR
// for i in tmp do
51826: LD_ADDR_VAR 0 8
51830: PUSH
51831: LD_VAR 0 14
51835: PUSH
51836: FOR_IN
51837: IFFALSE 52007
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
51839: LD_ADDR_VAR 0 9
51843: PUSH
51844: LD_VAR 0 10
51848: PPUSH
51849: LD_VAR 0 8
51853: PPUSH
51854: LD_INT 5
51856: PPUSH
51857: CALL_OW 272
51861: PUSH
51862: LD_VAR 0 11
51866: PPUSH
51867: LD_VAR 0 8
51871: PPUSH
51872: LD_INT 5
51874: PPUSH
51875: CALL_OW 273
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
51884: LD_VAR 0 9
51888: PUSH
51889: LD_INT 1
51891: ARRAY
51892: PPUSH
51893: LD_VAR 0 9
51897: PUSH
51898: LD_INT 2
51900: ARRAY
51901: PPUSH
51902: CALL_OW 488
51906: IFFALSE 52005
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
51908: LD_ADDR_VAR 0 4
51912: PUSH
51913: LD_VAR 0 9
51917: PUSH
51918: LD_INT 1
51920: ARRAY
51921: PPUSH
51922: LD_VAR 0 9
51926: PUSH
51927: LD_INT 2
51929: ARRAY
51930: PPUSH
51931: CALL_OW 546
51935: ST_TO_ADDR
// if hex [ 1 ] then
51936: LD_VAR 0 4
51940: PUSH
51941: LD_INT 1
51943: ARRAY
51944: IFFALSE 51948
// continue ;
51946: GO 51836
// h := hex [ 2 ] ;
51948: LD_ADDR_VAR 0 13
51952: PUSH
51953: LD_VAR 0 4
51957: PUSH
51958: LD_INT 2
51960: ARRAY
51961: ST_TO_ADDR
// if h + 7 < height then
51962: LD_VAR 0 13
51966: PUSH
51967: LD_INT 7
51969: PLUS
51970: PUSH
51971: LD_VAR 0 15
51975: LESS
51976: IFFALSE 52005
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
51978: LD_ADDR_VAR 0 18
51982: PUSH
51983: LD_INT 7
51985: PUSH
51986: LD_INT 28
51988: PUSH
51989: LD_INT 45
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: LIST
51996: PUSH
51997: LD_VAR 0 12
52001: ARRAY
52002: ST_TO_ADDR
// break ;
52003: GO 52007
// end ; end ; end ;
52005: GO 51836
52007: POP
52008: POP
// end ; if not weapon then
52009: LD_VAR 0 18
52013: NOT
52014: IFFALSE 52074
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52016: LD_ADDR_VAR 0 5
52020: PUSH
52021: LD_VAR 0 5
52025: PUSH
52026: LD_INT 11
52028: PUSH
52029: LD_INT 30
52031: PUSH
52032: LD_INT 49
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: LIST
52039: DIFF
52040: ST_TO_ADDR
// if not list then
52041: LD_VAR 0 5
52045: NOT
52046: IFFALSE 52050
// exit ;
52048: GO 52192
// weapon := list [ rand ( 1 , list ) ] ;
52050: LD_ADDR_VAR 0 18
52054: PUSH
52055: LD_VAR 0 5
52059: PUSH
52060: LD_INT 1
52062: PPUSH
52063: LD_VAR 0 5
52067: PPUSH
52068: CALL_OW 12
52072: ARRAY
52073: ST_TO_ADDR
// end ; if weapon then
52074: LD_VAR 0 18
52078: IFFALSE 52192
// begin tmp := CostOfWeapon ( weapon ) ;
52080: LD_ADDR_VAR 0 14
52084: PUSH
52085: LD_VAR 0 18
52089: PPUSH
52090: CALL_OW 451
52094: ST_TO_ADDR
// j := GetBase ( tower ) ;
52095: LD_ADDR_VAR 0 9
52099: PUSH
52100: LD_VAR 0 1
52104: PPUSH
52105: CALL_OW 274
52109: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52110: LD_VAR 0 9
52114: PPUSH
52115: LD_INT 1
52117: PPUSH
52118: CALL_OW 275
52122: PUSH
52123: LD_VAR 0 14
52127: PUSH
52128: LD_INT 1
52130: ARRAY
52131: GREATEREQUAL
52132: PUSH
52133: LD_VAR 0 9
52137: PPUSH
52138: LD_INT 2
52140: PPUSH
52141: CALL_OW 275
52145: PUSH
52146: LD_VAR 0 14
52150: PUSH
52151: LD_INT 2
52153: ARRAY
52154: GREATEREQUAL
52155: AND
52156: PUSH
52157: LD_VAR 0 9
52161: PPUSH
52162: LD_INT 3
52164: PPUSH
52165: CALL_OW 275
52169: PUSH
52170: LD_VAR 0 14
52174: PUSH
52175: LD_INT 3
52177: ARRAY
52178: GREATEREQUAL
52179: AND
52180: IFFALSE 52192
// result := weapon ;
52182: LD_ADDR_VAR 0 3
52186: PUSH
52187: LD_VAR 0 18
52191: ST_TO_ADDR
// end ; end ;
52192: LD_VAR 0 3
52196: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52197: LD_INT 0
52199: PPUSH
52200: PPUSH
// result := true ;
52201: LD_ADDR_VAR 0 3
52205: PUSH
52206: LD_INT 1
52208: ST_TO_ADDR
// if array1 = array2 then
52209: LD_VAR 0 1
52213: PUSH
52214: LD_VAR 0 2
52218: EQUAL
52219: IFFALSE 52279
// begin for i = 1 to array1 do
52221: LD_ADDR_VAR 0 4
52225: PUSH
52226: DOUBLE
52227: LD_INT 1
52229: DEC
52230: ST_TO_ADDR
52231: LD_VAR 0 1
52235: PUSH
52236: FOR_TO
52237: IFFALSE 52275
// if array1 [ i ] <> array2 [ i ] then
52239: LD_VAR 0 1
52243: PUSH
52244: LD_VAR 0 4
52248: ARRAY
52249: PUSH
52250: LD_VAR 0 2
52254: PUSH
52255: LD_VAR 0 4
52259: ARRAY
52260: NONEQUAL
52261: IFFALSE 52273
// begin result := false ;
52263: LD_ADDR_VAR 0 3
52267: PUSH
52268: LD_INT 0
52270: ST_TO_ADDR
// break ;
52271: GO 52275
// end ;
52273: GO 52236
52275: POP
52276: POP
// end else
52277: GO 52287
// result := false ;
52279: LD_ADDR_VAR 0 3
52283: PUSH
52284: LD_INT 0
52286: ST_TO_ADDR
// end ;
52287: LD_VAR 0 3
52291: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52292: LD_INT 0
52294: PPUSH
52295: PPUSH
// if not array1 or not array2 then
52296: LD_VAR 0 1
52300: NOT
52301: PUSH
52302: LD_VAR 0 2
52306: NOT
52307: OR
52308: IFFALSE 52312
// exit ;
52310: GO 52376
// result := true ;
52312: LD_ADDR_VAR 0 3
52316: PUSH
52317: LD_INT 1
52319: ST_TO_ADDR
// for i = 1 to array1 do
52320: LD_ADDR_VAR 0 4
52324: PUSH
52325: DOUBLE
52326: LD_INT 1
52328: DEC
52329: ST_TO_ADDR
52330: LD_VAR 0 1
52334: PUSH
52335: FOR_TO
52336: IFFALSE 52374
// if array1 [ i ] <> array2 [ i ] then
52338: LD_VAR 0 1
52342: PUSH
52343: LD_VAR 0 4
52347: ARRAY
52348: PUSH
52349: LD_VAR 0 2
52353: PUSH
52354: LD_VAR 0 4
52358: ARRAY
52359: NONEQUAL
52360: IFFALSE 52372
// begin result := false ;
52362: LD_ADDR_VAR 0 3
52366: PUSH
52367: LD_INT 0
52369: ST_TO_ADDR
// break ;
52370: GO 52374
// end ;
52372: GO 52335
52374: POP
52375: POP
// end ;
52376: LD_VAR 0 3
52380: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52381: LD_INT 0
52383: PPUSH
52384: PPUSH
52385: PPUSH
// pom := GetBase ( fac ) ;
52386: LD_ADDR_VAR 0 5
52390: PUSH
52391: LD_VAR 0 1
52395: PPUSH
52396: CALL_OW 274
52400: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52401: LD_ADDR_VAR 0 4
52405: PUSH
52406: LD_VAR 0 2
52410: PUSH
52411: LD_INT 1
52413: ARRAY
52414: PPUSH
52415: LD_VAR 0 2
52419: PUSH
52420: LD_INT 2
52422: ARRAY
52423: PPUSH
52424: LD_VAR 0 2
52428: PUSH
52429: LD_INT 3
52431: ARRAY
52432: PPUSH
52433: LD_VAR 0 2
52437: PUSH
52438: LD_INT 4
52440: ARRAY
52441: PPUSH
52442: CALL_OW 449
52446: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52447: LD_ADDR_VAR 0 3
52451: PUSH
52452: LD_VAR 0 5
52456: PPUSH
52457: LD_INT 1
52459: PPUSH
52460: CALL_OW 275
52464: PUSH
52465: LD_VAR 0 4
52469: PUSH
52470: LD_INT 1
52472: ARRAY
52473: GREATEREQUAL
52474: PUSH
52475: LD_VAR 0 5
52479: PPUSH
52480: LD_INT 2
52482: PPUSH
52483: CALL_OW 275
52487: PUSH
52488: LD_VAR 0 4
52492: PUSH
52493: LD_INT 2
52495: ARRAY
52496: GREATEREQUAL
52497: AND
52498: PUSH
52499: LD_VAR 0 5
52503: PPUSH
52504: LD_INT 3
52506: PPUSH
52507: CALL_OW 275
52511: PUSH
52512: LD_VAR 0 4
52516: PUSH
52517: LD_INT 3
52519: ARRAY
52520: GREATEREQUAL
52521: AND
52522: ST_TO_ADDR
// end ;
52523: LD_VAR 0 3
52527: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52528: LD_INT 0
52530: PPUSH
52531: PPUSH
52532: PPUSH
52533: PPUSH
// pom := GetBase ( building ) ;
52534: LD_ADDR_VAR 0 3
52538: PUSH
52539: LD_VAR 0 1
52543: PPUSH
52544: CALL_OW 274
52548: ST_TO_ADDR
// if not pom then
52549: LD_VAR 0 3
52553: NOT
52554: IFFALSE 52558
// exit ;
52556: GO 52728
// btype := GetBType ( building ) ;
52558: LD_ADDR_VAR 0 5
52562: PUSH
52563: LD_VAR 0 1
52567: PPUSH
52568: CALL_OW 266
52572: ST_TO_ADDR
// if btype = b_armoury then
52573: LD_VAR 0 5
52577: PUSH
52578: LD_INT 4
52580: EQUAL
52581: IFFALSE 52591
// btype := b_barracks ;
52583: LD_ADDR_VAR 0 5
52587: PUSH
52588: LD_INT 5
52590: ST_TO_ADDR
// if btype = b_depot then
52591: LD_VAR 0 5
52595: PUSH
52596: LD_INT 0
52598: EQUAL
52599: IFFALSE 52609
// btype := b_warehouse ;
52601: LD_ADDR_VAR 0 5
52605: PUSH
52606: LD_INT 1
52608: ST_TO_ADDR
// if btype = b_workshop then
52609: LD_VAR 0 5
52613: PUSH
52614: LD_INT 2
52616: EQUAL
52617: IFFALSE 52627
// btype := b_factory ;
52619: LD_ADDR_VAR 0 5
52623: PUSH
52624: LD_INT 3
52626: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52627: LD_ADDR_VAR 0 4
52631: PUSH
52632: LD_VAR 0 5
52636: PPUSH
52637: LD_VAR 0 1
52641: PPUSH
52642: CALL_OW 248
52646: PPUSH
52647: CALL_OW 450
52651: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52652: LD_ADDR_VAR 0 2
52656: PUSH
52657: LD_VAR 0 3
52661: PPUSH
52662: LD_INT 1
52664: PPUSH
52665: CALL_OW 275
52669: PUSH
52670: LD_VAR 0 4
52674: PUSH
52675: LD_INT 1
52677: ARRAY
52678: GREATEREQUAL
52679: PUSH
52680: LD_VAR 0 3
52684: PPUSH
52685: LD_INT 2
52687: PPUSH
52688: CALL_OW 275
52692: PUSH
52693: LD_VAR 0 4
52697: PUSH
52698: LD_INT 2
52700: ARRAY
52701: GREATEREQUAL
52702: AND
52703: PUSH
52704: LD_VAR 0 3
52708: PPUSH
52709: LD_INT 3
52711: PPUSH
52712: CALL_OW 275
52716: PUSH
52717: LD_VAR 0 4
52721: PUSH
52722: LD_INT 3
52724: ARRAY
52725: GREATEREQUAL
52726: AND
52727: ST_TO_ADDR
// end ;
52728: LD_VAR 0 2
52732: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
52733: LD_INT 0
52735: PPUSH
52736: PPUSH
52737: PPUSH
// pom := GetBase ( building ) ;
52738: LD_ADDR_VAR 0 4
52742: PUSH
52743: LD_VAR 0 1
52747: PPUSH
52748: CALL_OW 274
52752: ST_TO_ADDR
// if not pom then
52753: LD_VAR 0 4
52757: NOT
52758: IFFALSE 52762
// exit ;
52760: GO 52863
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52762: LD_ADDR_VAR 0 5
52766: PUSH
52767: LD_VAR 0 2
52771: PPUSH
52772: LD_VAR 0 1
52776: PPUSH
52777: CALL_OW 248
52781: PPUSH
52782: CALL_OW 450
52786: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52787: LD_ADDR_VAR 0 3
52791: PUSH
52792: LD_VAR 0 4
52796: PPUSH
52797: LD_INT 1
52799: PPUSH
52800: CALL_OW 275
52804: PUSH
52805: LD_VAR 0 5
52809: PUSH
52810: LD_INT 1
52812: ARRAY
52813: GREATEREQUAL
52814: PUSH
52815: LD_VAR 0 4
52819: PPUSH
52820: LD_INT 2
52822: PPUSH
52823: CALL_OW 275
52827: PUSH
52828: LD_VAR 0 5
52832: PUSH
52833: LD_INT 2
52835: ARRAY
52836: GREATEREQUAL
52837: AND
52838: PUSH
52839: LD_VAR 0 4
52843: PPUSH
52844: LD_INT 3
52846: PPUSH
52847: CALL_OW 275
52851: PUSH
52852: LD_VAR 0 5
52856: PUSH
52857: LD_INT 3
52859: ARRAY
52860: GREATEREQUAL
52861: AND
52862: ST_TO_ADDR
// end ;
52863: LD_VAR 0 3
52867: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
52868: LD_INT 0
52870: PPUSH
52871: PPUSH
52872: PPUSH
52873: PPUSH
52874: PPUSH
52875: PPUSH
52876: PPUSH
52877: PPUSH
52878: PPUSH
52879: PPUSH
52880: PPUSH
// result := false ;
52881: LD_ADDR_VAR 0 8
52885: PUSH
52886: LD_INT 0
52888: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
52889: LD_VAR 0 5
52893: NOT
52894: PUSH
52895: LD_VAR 0 1
52899: NOT
52900: OR
52901: PUSH
52902: LD_VAR 0 2
52906: NOT
52907: OR
52908: PUSH
52909: LD_VAR 0 3
52913: NOT
52914: OR
52915: IFFALSE 52919
// exit ;
52917: GO 53733
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
52919: LD_ADDR_VAR 0 14
52923: PUSH
52924: LD_VAR 0 1
52928: PPUSH
52929: LD_VAR 0 2
52933: PPUSH
52934: LD_VAR 0 3
52938: PPUSH
52939: LD_VAR 0 4
52943: PPUSH
52944: LD_VAR 0 5
52948: PUSH
52949: LD_INT 1
52951: ARRAY
52952: PPUSH
52953: CALL_OW 248
52957: PPUSH
52958: LD_INT 0
52960: PPUSH
52961: CALL 54986 0 6
52965: ST_TO_ADDR
// if not hexes then
52966: LD_VAR 0 14
52970: NOT
52971: IFFALSE 52975
// exit ;
52973: GO 53733
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52975: LD_ADDR_VAR 0 17
52979: PUSH
52980: LD_VAR 0 5
52984: PPUSH
52985: LD_INT 22
52987: PUSH
52988: LD_VAR 0 13
52992: PPUSH
52993: CALL_OW 255
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 2
53004: PUSH
53005: LD_INT 30
53007: PUSH
53008: LD_INT 0
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 30
53017: PUSH
53018: LD_INT 1
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: LIST
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PPUSH
53034: CALL_OW 72
53038: ST_TO_ADDR
// for i = 1 to hexes do
53039: LD_ADDR_VAR 0 9
53043: PUSH
53044: DOUBLE
53045: LD_INT 1
53047: DEC
53048: ST_TO_ADDR
53049: LD_VAR 0 14
53053: PUSH
53054: FOR_TO
53055: IFFALSE 53731
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53057: LD_ADDR_VAR 0 13
53061: PUSH
53062: LD_VAR 0 14
53066: PUSH
53067: LD_VAR 0 9
53071: ARRAY
53072: PUSH
53073: LD_INT 1
53075: ARRAY
53076: PPUSH
53077: LD_VAR 0 14
53081: PUSH
53082: LD_VAR 0 9
53086: ARRAY
53087: PUSH
53088: LD_INT 2
53090: ARRAY
53091: PPUSH
53092: CALL_OW 428
53096: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53097: LD_VAR 0 14
53101: PUSH
53102: LD_VAR 0 9
53106: ARRAY
53107: PUSH
53108: LD_INT 1
53110: ARRAY
53111: PPUSH
53112: LD_VAR 0 14
53116: PUSH
53117: LD_VAR 0 9
53121: ARRAY
53122: PUSH
53123: LD_INT 2
53125: ARRAY
53126: PPUSH
53127: CALL_OW 351
53131: PUSH
53132: LD_VAR 0 14
53136: PUSH
53137: LD_VAR 0 9
53141: ARRAY
53142: PUSH
53143: LD_INT 1
53145: ARRAY
53146: PPUSH
53147: LD_VAR 0 14
53151: PUSH
53152: LD_VAR 0 9
53156: ARRAY
53157: PUSH
53158: LD_INT 2
53160: ARRAY
53161: PPUSH
53162: CALL_OW 488
53166: NOT
53167: OR
53168: PUSH
53169: LD_VAR 0 13
53173: PPUSH
53174: CALL_OW 247
53178: PUSH
53179: LD_INT 3
53181: EQUAL
53182: OR
53183: IFFALSE 53189
// exit ;
53185: POP
53186: POP
53187: GO 53733
// if not tmp then
53189: LD_VAR 0 13
53193: NOT
53194: IFFALSE 53198
// continue ;
53196: GO 53054
// result := true ;
53198: LD_ADDR_VAR 0 8
53202: PUSH
53203: LD_INT 1
53205: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53206: LD_VAR 0 6
53210: PUSH
53211: LD_VAR 0 13
53215: PPUSH
53216: CALL_OW 247
53220: PUSH
53221: LD_INT 2
53223: EQUAL
53224: AND
53225: PUSH
53226: LD_VAR 0 13
53230: PPUSH
53231: CALL_OW 263
53235: PUSH
53236: LD_INT 1
53238: EQUAL
53239: AND
53240: IFFALSE 53404
// begin if IsDrivenBy ( tmp ) then
53242: LD_VAR 0 13
53246: PPUSH
53247: CALL_OW 311
53251: IFFALSE 53255
// continue ;
53253: GO 53054
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53255: LD_VAR 0 6
53259: PPUSH
53260: LD_INT 3
53262: PUSH
53263: LD_INT 60
53265: PUSH
53266: EMPTY
53267: LIST
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 3
53275: PUSH
53276: LD_INT 55
53278: PUSH
53279: EMPTY
53280: LIST
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PPUSH
53290: CALL_OW 72
53294: IFFALSE 53402
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53296: LD_ADDR_VAR 0 18
53300: PUSH
53301: LD_VAR 0 6
53305: PPUSH
53306: LD_INT 3
53308: PUSH
53309: LD_INT 60
53311: PUSH
53312: EMPTY
53313: LIST
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 3
53321: PUSH
53322: LD_INT 55
53324: PUSH
53325: EMPTY
53326: LIST
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PPUSH
53336: CALL_OW 72
53340: PUSH
53341: LD_INT 1
53343: ARRAY
53344: ST_TO_ADDR
// if IsInUnit ( driver ) then
53345: LD_VAR 0 18
53349: PPUSH
53350: CALL_OW 310
53354: IFFALSE 53365
// ComExit ( driver ) ;
53356: LD_VAR 0 18
53360: PPUSH
53361: CALL 78787 0 1
// AddComEnterUnit ( driver , tmp ) ;
53365: LD_VAR 0 18
53369: PPUSH
53370: LD_VAR 0 13
53374: PPUSH
53375: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53379: LD_VAR 0 18
53383: PPUSH
53384: LD_VAR 0 7
53388: PPUSH
53389: CALL_OW 173
// AddComExitVehicle ( driver ) ;
53393: LD_VAR 0 18
53397: PPUSH
53398: CALL_OW 181
// end ; continue ;
53402: GO 53054
// end ; if not cleaners or not tmp in cleaners then
53404: LD_VAR 0 6
53408: NOT
53409: PUSH
53410: LD_VAR 0 13
53414: PUSH
53415: LD_VAR 0 6
53419: IN
53420: NOT
53421: OR
53422: IFFALSE 53729
// begin if dep then
53424: LD_VAR 0 17
53428: IFFALSE 53564
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53430: LD_ADDR_VAR 0 16
53434: PUSH
53435: LD_VAR 0 17
53439: PUSH
53440: LD_INT 1
53442: ARRAY
53443: PPUSH
53444: CALL_OW 250
53448: PPUSH
53449: LD_VAR 0 17
53453: PUSH
53454: LD_INT 1
53456: ARRAY
53457: PPUSH
53458: CALL_OW 254
53462: PPUSH
53463: LD_INT 5
53465: PPUSH
53466: CALL_OW 272
53470: PUSH
53471: LD_VAR 0 17
53475: PUSH
53476: LD_INT 1
53478: ARRAY
53479: PPUSH
53480: CALL_OW 251
53484: PPUSH
53485: LD_VAR 0 17
53489: PUSH
53490: LD_INT 1
53492: ARRAY
53493: PPUSH
53494: CALL_OW 254
53498: PPUSH
53499: LD_INT 5
53501: PPUSH
53502: CALL_OW 273
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
53511: LD_VAR 0 16
53515: PUSH
53516: LD_INT 1
53518: ARRAY
53519: PPUSH
53520: LD_VAR 0 16
53524: PUSH
53525: LD_INT 2
53527: ARRAY
53528: PPUSH
53529: CALL_OW 488
53533: IFFALSE 53564
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53535: LD_VAR 0 13
53539: PPUSH
53540: LD_VAR 0 16
53544: PUSH
53545: LD_INT 1
53547: ARRAY
53548: PPUSH
53549: LD_VAR 0 16
53553: PUSH
53554: LD_INT 2
53556: ARRAY
53557: PPUSH
53558: CALL_OW 111
// continue ;
53562: GO 53054
// end ; end ; r := GetDir ( tmp ) ;
53564: LD_ADDR_VAR 0 15
53568: PUSH
53569: LD_VAR 0 13
53573: PPUSH
53574: CALL_OW 254
53578: ST_TO_ADDR
// if r = 5 then
53579: LD_VAR 0 15
53583: PUSH
53584: LD_INT 5
53586: EQUAL
53587: IFFALSE 53597
// r := 0 ;
53589: LD_ADDR_VAR 0 15
53593: PUSH
53594: LD_INT 0
53596: ST_TO_ADDR
// for j = r to 5 do
53597: LD_ADDR_VAR 0 10
53601: PUSH
53602: DOUBLE
53603: LD_VAR 0 15
53607: DEC
53608: ST_TO_ADDR
53609: LD_INT 5
53611: PUSH
53612: FOR_TO
53613: IFFALSE 53727
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
53615: LD_ADDR_VAR 0 11
53619: PUSH
53620: LD_VAR 0 13
53624: PPUSH
53625: CALL_OW 250
53629: PPUSH
53630: LD_VAR 0 10
53634: PPUSH
53635: LD_INT 2
53637: PPUSH
53638: CALL_OW 272
53642: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
53643: LD_ADDR_VAR 0 12
53647: PUSH
53648: LD_VAR 0 13
53652: PPUSH
53653: CALL_OW 251
53657: PPUSH
53658: LD_VAR 0 10
53662: PPUSH
53663: LD_INT 2
53665: PPUSH
53666: CALL_OW 273
53670: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
53671: LD_VAR 0 11
53675: PPUSH
53676: LD_VAR 0 12
53680: PPUSH
53681: CALL_OW 488
53685: PUSH
53686: LD_VAR 0 11
53690: PPUSH
53691: LD_VAR 0 12
53695: PPUSH
53696: CALL_OW 428
53700: NOT
53701: AND
53702: IFFALSE 53725
// begin ComMoveXY ( tmp , _x , _y ) ;
53704: LD_VAR 0 13
53708: PPUSH
53709: LD_VAR 0 11
53713: PPUSH
53714: LD_VAR 0 12
53718: PPUSH
53719: CALL_OW 111
// break ;
53723: GO 53727
// end ; end ;
53725: GO 53612
53727: POP
53728: POP
// end ; end ;
53729: GO 53054
53731: POP
53732: POP
// end ;
53733: LD_VAR 0 8
53737: RET
// export function BuildingTechInvented ( side , btype ) ; begin
53738: LD_INT 0
53740: PPUSH
// result := true ;
53741: LD_ADDR_VAR 0 3
53745: PUSH
53746: LD_INT 1
53748: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
53749: LD_VAR 0 2
53753: PUSH
53754: LD_INT 24
53756: DOUBLE
53757: EQUAL
53758: IFTRUE 53768
53760: LD_INT 33
53762: DOUBLE
53763: EQUAL
53764: IFTRUE 53768
53766: GO 53793
53768: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
53769: LD_ADDR_VAR 0 3
53773: PUSH
53774: LD_INT 32
53776: PPUSH
53777: LD_VAR 0 1
53781: PPUSH
53782: CALL_OW 321
53786: PUSH
53787: LD_INT 2
53789: EQUAL
53790: ST_TO_ADDR
53791: GO 54109
53793: LD_INT 20
53795: DOUBLE
53796: EQUAL
53797: IFTRUE 53801
53799: GO 53826
53801: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
53802: LD_ADDR_VAR 0 3
53806: PUSH
53807: LD_INT 6
53809: PPUSH
53810: LD_VAR 0 1
53814: PPUSH
53815: CALL_OW 321
53819: PUSH
53820: LD_INT 2
53822: EQUAL
53823: ST_TO_ADDR
53824: GO 54109
53826: LD_INT 22
53828: DOUBLE
53829: EQUAL
53830: IFTRUE 53840
53832: LD_INT 36
53834: DOUBLE
53835: EQUAL
53836: IFTRUE 53840
53838: GO 53865
53840: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
53841: LD_ADDR_VAR 0 3
53845: PUSH
53846: LD_INT 15
53848: PPUSH
53849: LD_VAR 0 1
53853: PPUSH
53854: CALL_OW 321
53858: PUSH
53859: LD_INT 2
53861: EQUAL
53862: ST_TO_ADDR
53863: GO 54109
53865: LD_INT 30
53867: DOUBLE
53868: EQUAL
53869: IFTRUE 53873
53871: GO 53898
53873: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
53874: LD_ADDR_VAR 0 3
53878: PUSH
53879: LD_INT 20
53881: PPUSH
53882: LD_VAR 0 1
53886: PPUSH
53887: CALL_OW 321
53891: PUSH
53892: LD_INT 2
53894: EQUAL
53895: ST_TO_ADDR
53896: GO 54109
53898: LD_INT 28
53900: DOUBLE
53901: EQUAL
53902: IFTRUE 53912
53904: LD_INT 21
53906: DOUBLE
53907: EQUAL
53908: IFTRUE 53912
53910: GO 53937
53912: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
53913: LD_ADDR_VAR 0 3
53917: PUSH
53918: LD_INT 21
53920: PPUSH
53921: LD_VAR 0 1
53925: PPUSH
53926: CALL_OW 321
53930: PUSH
53931: LD_INT 2
53933: EQUAL
53934: ST_TO_ADDR
53935: GO 54109
53937: LD_INT 16
53939: DOUBLE
53940: EQUAL
53941: IFTRUE 53945
53943: GO 53970
53945: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
53946: LD_ADDR_VAR 0 3
53950: PUSH
53951: LD_INT 84
53953: PPUSH
53954: LD_VAR 0 1
53958: PPUSH
53959: CALL_OW 321
53963: PUSH
53964: LD_INT 2
53966: EQUAL
53967: ST_TO_ADDR
53968: GO 54109
53970: LD_INT 19
53972: DOUBLE
53973: EQUAL
53974: IFTRUE 53984
53976: LD_INT 23
53978: DOUBLE
53979: EQUAL
53980: IFTRUE 53984
53982: GO 54009
53984: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
53985: LD_ADDR_VAR 0 3
53989: PUSH
53990: LD_INT 83
53992: PPUSH
53993: LD_VAR 0 1
53997: PPUSH
53998: CALL_OW 321
54002: PUSH
54003: LD_INT 2
54005: EQUAL
54006: ST_TO_ADDR
54007: GO 54109
54009: LD_INT 17
54011: DOUBLE
54012: EQUAL
54013: IFTRUE 54017
54015: GO 54042
54017: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54018: LD_ADDR_VAR 0 3
54022: PUSH
54023: LD_INT 39
54025: PPUSH
54026: LD_VAR 0 1
54030: PPUSH
54031: CALL_OW 321
54035: PUSH
54036: LD_INT 2
54038: EQUAL
54039: ST_TO_ADDR
54040: GO 54109
54042: LD_INT 18
54044: DOUBLE
54045: EQUAL
54046: IFTRUE 54050
54048: GO 54075
54050: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54051: LD_ADDR_VAR 0 3
54055: PUSH
54056: LD_INT 40
54058: PPUSH
54059: LD_VAR 0 1
54063: PPUSH
54064: CALL_OW 321
54068: PUSH
54069: LD_INT 2
54071: EQUAL
54072: ST_TO_ADDR
54073: GO 54109
54075: LD_INT 27
54077: DOUBLE
54078: EQUAL
54079: IFTRUE 54083
54081: GO 54108
54083: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54084: LD_ADDR_VAR 0 3
54088: PUSH
54089: LD_INT 35
54091: PPUSH
54092: LD_VAR 0 1
54096: PPUSH
54097: CALL_OW 321
54101: PUSH
54102: LD_INT 2
54104: EQUAL
54105: ST_TO_ADDR
54106: GO 54109
54108: POP
// end ;
54109: LD_VAR 0 3
54113: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54114: LD_INT 0
54116: PPUSH
54117: PPUSH
54118: PPUSH
54119: PPUSH
54120: PPUSH
54121: PPUSH
54122: PPUSH
54123: PPUSH
54124: PPUSH
54125: PPUSH
54126: PPUSH
// result := false ;
54127: LD_ADDR_VAR 0 6
54131: PUSH
54132: LD_INT 0
54134: ST_TO_ADDR
// if btype = b_depot then
54135: LD_VAR 0 2
54139: PUSH
54140: LD_INT 0
54142: EQUAL
54143: IFFALSE 54155
// begin result := true ;
54145: LD_ADDR_VAR 0 6
54149: PUSH
54150: LD_INT 1
54152: ST_TO_ADDR
// exit ;
54153: GO 54981
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54155: LD_VAR 0 1
54159: NOT
54160: PUSH
54161: LD_VAR 0 1
54165: PPUSH
54166: CALL_OW 266
54170: PUSH
54171: LD_INT 0
54173: PUSH
54174: LD_INT 1
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: IN
54181: NOT
54182: OR
54183: PUSH
54184: LD_VAR 0 2
54188: NOT
54189: OR
54190: PUSH
54191: LD_VAR 0 5
54195: PUSH
54196: LD_INT 0
54198: PUSH
54199: LD_INT 1
54201: PUSH
54202: LD_INT 2
54204: PUSH
54205: LD_INT 3
54207: PUSH
54208: LD_INT 4
54210: PUSH
54211: LD_INT 5
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: IN
54222: NOT
54223: OR
54224: PUSH
54225: LD_VAR 0 3
54229: PPUSH
54230: LD_VAR 0 4
54234: PPUSH
54235: CALL_OW 488
54239: NOT
54240: OR
54241: IFFALSE 54245
// exit ;
54243: GO 54981
// side := GetSide ( depot ) ;
54245: LD_ADDR_VAR 0 9
54249: PUSH
54250: LD_VAR 0 1
54254: PPUSH
54255: CALL_OW 255
54259: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54260: LD_VAR 0 9
54264: PPUSH
54265: LD_VAR 0 2
54269: PPUSH
54270: CALL 53738 0 2
54274: NOT
54275: IFFALSE 54279
// exit ;
54277: GO 54981
// pom := GetBase ( depot ) ;
54279: LD_ADDR_VAR 0 10
54283: PUSH
54284: LD_VAR 0 1
54288: PPUSH
54289: CALL_OW 274
54293: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54294: LD_ADDR_VAR 0 11
54298: PUSH
54299: LD_VAR 0 2
54303: PPUSH
54304: LD_VAR 0 1
54308: PPUSH
54309: CALL_OW 248
54313: PPUSH
54314: CALL_OW 450
54318: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54319: LD_VAR 0 10
54323: PPUSH
54324: LD_INT 1
54326: PPUSH
54327: CALL_OW 275
54331: PUSH
54332: LD_VAR 0 11
54336: PUSH
54337: LD_INT 1
54339: ARRAY
54340: GREATEREQUAL
54341: PUSH
54342: LD_VAR 0 10
54346: PPUSH
54347: LD_INT 2
54349: PPUSH
54350: CALL_OW 275
54354: PUSH
54355: LD_VAR 0 11
54359: PUSH
54360: LD_INT 2
54362: ARRAY
54363: GREATEREQUAL
54364: AND
54365: PUSH
54366: LD_VAR 0 10
54370: PPUSH
54371: LD_INT 3
54373: PPUSH
54374: CALL_OW 275
54378: PUSH
54379: LD_VAR 0 11
54383: PUSH
54384: LD_INT 3
54386: ARRAY
54387: GREATEREQUAL
54388: AND
54389: NOT
54390: IFFALSE 54394
// exit ;
54392: GO 54981
// if GetBType ( depot ) = b_depot then
54394: LD_VAR 0 1
54398: PPUSH
54399: CALL_OW 266
54403: PUSH
54404: LD_INT 0
54406: EQUAL
54407: IFFALSE 54419
// dist := 28 else
54409: LD_ADDR_VAR 0 14
54413: PUSH
54414: LD_INT 28
54416: ST_TO_ADDR
54417: GO 54427
// dist := 36 ;
54419: LD_ADDR_VAR 0 14
54423: PUSH
54424: LD_INT 36
54426: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
54427: LD_VAR 0 1
54431: PPUSH
54432: LD_VAR 0 3
54436: PPUSH
54437: LD_VAR 0 4
54441: PPUSH
54442: CALL_OW 297
54446: PUSH
54447: LD_VAR 0 14
54451: GREATER
54452: IFFALSE 54456
// exit ;
54454: GO 54981
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
54456: LD_ADDR_VAR 0 12
54460: PUSH
54461: LD_VAR 0 2
54465: PPUSH
54466: LD_VAR 0 3
54470: PPUSH
54471: LD_VAR 0 4
54475: PPUSH
54476: LD_VAR 0 5
54480: PPUSH
54481: LD_VAR 0 1
54485: PPUSH
54486: CALL_OW 248
54490: PPUSH
54491: LD_INT 0
54493: PPUSH
54494: CALL 54986 0 6
54498: ST_TO_ADDR
// if not hexes then
54499: LD_VAR 0 12
54503: NOT
54504: IFFALSE 54508
// exit ;
54506: GO 54981
// hex := GetHexInfo ( x , y ) ;
54508: LD_ADDR_VAR 0 15
54512: PUSH
54513: LD_VAR 0 3
54517: PPUSH
54518: LD_VAR 0 4
54522: PPUSH
54523: CALL_OW 546
54527: ST_TO_ADDR
// if hex [ 1 ] then
54528: LD_VAR 0 15
54532: PUSH
54533: LD_INT 1
54535: ARRAY
54536: IFFALSE 54540
// exit ;
54538: GO 54981
// height := hex [ 2 ] ;
54540: LD_ADDR_VAR 0 13
54544: PUSH
54545: LD_VAR 0 15
54549: PUSH
54550: LD_INT 2
54552: ARRAY
54553: ST_TO_ADDR
// for i = 1 to hexes do
54554: LD_ADDR_VAR 0 7
54558: PUSH
54559: DOUBLE
54560: LD_INT 1
54562: DEC
54563: ST_TO_ADDR
54564: LD_VAR 0 12
54568: PUSH
54569: FOR_TO
54570: IFFALSE 54900
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54572: LD_VAR 0 12
54576: PUSH
54577: LD_VAR 0 7
54581: ARRAY
54582: PUSH
54583: LD_INT 1
54585: ARRAY
54586: PPUSH
54587: LD_VAR 0 12
54591: PUSH
54592: LD_VAR 0 7
54596: ARRAY
54597: PUSH
54598: LD_INT 2
54600: ARRAY
54601: PPUSH
54602: CALL_OW 488
54606: NOT
54607: PUSH
54608: LD_VAR 0 12
54612: PUSH
54613: LD_VAR 0 7
54617: ARRAY
54618: PUSH
54619: LD_INT 1
54621: ARRAY
54622: PPUSH
54623: LD_VAR 0 12
54627: PUSH
54628: LD_VAR 0 7
54632: ARRAY
54633: PUSH
54634: LD_INT 2
54636: ARRAY
54637: PPUSH
54638: CALL_OW 428
54642: PUSH
54643: LD_INT 0
54645: GREATER
54646: OR
54647: PUSH
54648: LD_VAR 0 12
54652: PUSH
54653: LD_VAR 0 7
54657: ARRAY
54658: PUSH
54659: LD_INT 1
54661: ARRAY
54662: PPUSH
54663: LD_VAR 0 12
54667: PUSH
54668: LD_VAR 0 7
54672: ARRAY
54673: PUSH
54674: LD_INT 2
54676: ARRAY
54677: PPUSH
54678: CALL_OW 351
54682: OR
54683: IFFALSE 54689
// exit ;
54685: POP
54686: POP
54687: GO 54981
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54689: LD_ADDR_VAR 0 8
54693: PUSH
54694: LD_VAR 0 12
54698: PUSH
54699: LD_VAR 0 7
54703: ARRAY
54704: PUSH
54705: LD_INT 1
54707: ARRAY
54708: PPUSH
54709: LD_VAR 0 12
54713: PUSH
54714: LD_VAR 0 7
54718: ARRAY
54719: PUSH
54720: LD_INT 2
54722: ARRAY
54723: PPUSH
54724: CALL_OW 546
54728: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
54729: LD_VAR 0 8
54733: PUSH
54734: LD_INT 1
54736: ARRAY
54737: PUSH
54738: LD_VAR 0 8
54742: PUSH
54743: LD_INT 2
54745: ARRAY
54746: PUSH
54747: LD_VAR 0 13
54751: PUSH
54752: LD_INT 2
54754: PLUS
54755: GREATER
54756: OR
54757: PUSH
54758: LD_VAR 0 8
54762: PUSH
54763: LD_INT 2
54765: ARRAY
54766: PUSH
54767: LD_VAR 0 13
54771: PUSH
54772: LD_INT 2
54774: MINUS
54775: LESS
54776: OR
54777: PUSH
54778: LD_VAR 0 8
54782: PUSH
54783: LD_INT 3
54785: ARRAY
54786: PUSH
54787: LD_INT 0
54789: PUSH
54790: LD_INT 8
54792: PUSH
54793: LD_INT 9
54795: PUSH
54796: LD_INT 10
54798: PUSH
54799: LD_INT 11
54801: PUSH
54802: LD_INT 12
54804: PUSH
54805: LD_INT 13
54807: PUSH
54808: LD_INT 16
54810: PUSH
54811: LD_INT 17
54813: PUSH
54814: LD_INT 18
54816: PUSH
54817: LD_INT 19
54819: PUSH
54820: LD_INT 20
54822: PUSH
54823: LD_INT 21
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: IN
54841: NOT
54842: OR
54843: PUSH
54844: LD_VAR 0 8
54848: PUSH
54849: LD_INT 5
54851: ARRAY
54852: NOT
54853: OR
54854: PUSH
54855: LD_VAR 0 8
54859: PUSH
54860: LD_INT 6
54862: ARRAY
54863: PUSH
54864: LD_INT 1
54866: PUSH
54867: LD_INT 2
54869: PUSH
54870: LD_INT 7
54872: PUSH
54873: LD_INT 9
54875: PUSH
54876: LD_INT 10
54878: PUSH
54879: LD_INT 11
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: IN
54890: NOT
54891: OR
54892: IFFALSE 54898
// exit ;
54894: POP
54895: POP
54896: GO 54981
// end ;
54898: GO 54569
54900: POP
54901: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
54902: LD_VAR 0 9
54906: PPUSH
54907: LD_VAR 0 3
54911: PPUSH
54912: LD_VAR 0 4
54916: PPUSH
54917: LD_INT 20
54919: PPUSH
54920: CALL 46904 0 4
54924: PUSH
54925: LD_INT 4
54927: ARRAY
54928: IFFALSE 54932
// exit ;
54930: GO 54981
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
54932: LD_VAR 0 2
54936: PUSH
54937: LD_INT 29
54939: PUSH
54940: LD_INT 30
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: IN
54947: PUSH
54948: LD_VAR 0 3
54952: PPUSH
54953: LD_VAR 0 4
54957: PPUSH
54958: LD_VAR 0 9
54962: PPUSH
54963: CALL_OW 440
54967: NOT
54968: AND
54969: IFFALSE 54973
// exit ;
54971: GO 54981
// result := true ;
54973: LD_ADDR_VAR 0 6
54977: PUSH
54978: LD_INT 1
54980: ST_TO_ADDR
// end ;
54981: LD_VAR 0 6
54985: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
54986: LD_INT 0
54988: PPUSH
54989: PPUSH
54990: PPUSH
54991: PPUSH
54992: PPUSH
54993: PPUSH
54994: PPUSH
54995: PPUSH
54996: PPUSH
54997: PPUSH
54998: PPUSH
54999: PPUSH
55000: PPUSH
55001: PPUSH
55002: PPUSH
55003: PPUSH
55004: PPUSH
55005: PPUSH
55006: PPUSH
55007: PPUSH
55008: PPUSH
55009: PPUSH
55010: PPUSH
55011: PPUSH
55012: PPUSH
55013: PPUSH
55014: PPUSH
55015: PPUSH
55016: PPUSH
55017: PPUSH
55018: PPUSH
55019: PPUSH
55020: PPUSH
55021: PPUSH
55022: PPUSH
55023: PPUSH
55024: PPUSH
55025: PPUSH
55026: PPUSH
55027: PPUSH
55028: PPUSH
55029: PPUSH
55030: PPUSH
55031: PPUSH
55032: PPUSH
55033: PPUSH
55034: PPUSH
55035: PPUSH
55036: PPUSH
55037: PPUSH
55038: PPUSH
55039: PPUSH
55040: PPUSH
55041: PPUSH
55042: PPUSH
55043: PPUSH
55044: PPUSH
55045: PPUSH
// result = [ ] ;
55046: LD_ADDR_VAR 0 7
55050: PUSH
55051: EMPTY
55052: ST_TO_ADDR
// temp_list = [ ] ;
55053: LD_ADDR_VAR 0 9
55057: PUSH
55058: EMPTY
55059: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55060: LD_VAR 0 4
55064: PUSH
55065: LD_INT 0
55067: PUSH
55068: LD_INT 1
55070: PUSH
55071: LD_INT 2
55073: PUSH
55074: LD_INT 3
55076: PUSH
55077: LD_INT 4
55079: PUSH
55080: LD_INT 5
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: IN
55091: NOT
55092: PUSH
55093: LD_VAR 0 1
55097: PUSH
55098: LD_INT 0
55100: PUSH
55101: LD_INT 1
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: IN
55108: PUSH
55109: LD_VAR 0 5
55113: PUSH
55114: LD_INT 1
55116: PUSH
55117: LD_INT 2
55119: PUSH
55120: LD_INT 3
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: LIST
55127: IN
55128: NOT
55129: AND
55130: OR
55131: IFFALSE 55135
// exit ;
55133: GO 73526
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55135: LD_VAR 0 1
55139: PUSH
55140: LD_INT 6
55142: PUSH
55143: LD_INT 7
55145: PUSH
55146: LD_INT 8
55148: PUSH
55149: LD_INT 13
55151: PUSH
55152: LD_INT 12
55154: PUSH
55155: LD_INT 15
55157: PUSH
55158: LD_INT 11
55160: PUSH
55161: LD_INT 14
55163: PUSH
55164: LD_INT 10
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: IN
55178: IFFALSE 55188
// btype = b_lab ;
55180: LD_ADDR_VAR 0 1
55184: PUSH
55185: LD_INT 6
55187: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55188: LD_VAR 0 6
55192: PUSH
55193: LD_INT 0
55195: PUSH
55196: LD_INT 1
55198: PUSH
55199: LD_INT 2
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: LIST
55206: IN
55207: NOT
55208: PUSH
55209: LD_VAR 0 1
55213: PUSH
55214: LD_INT 0
55216: PUSH
55217: LD_INT 1
55219: PUSH
55220: LD_INT 2
55222: PUSH
55223: LD_INT 3
55225: PUSH
55226: LD_INT 6
55228: PUSH
55229: LD_INT 36
55231: PUSH
55232: LD_INT 4
55234: PUSH
55235: LD_INT 5
55237: PUSH
55238: LD_INT 31
55240: PUSH
55241: LD_INT 32
55243: PUSH
55244: LD_INT 33
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: IN
55260: NOT
55261: PUSH
55262: LD_VAR 0 6
55266: PUSH
55267: LD_INT 1
55269: EQUAL
55270: AND
55271: OR
55272: PUSH
55273: LD_VAR 0 1
55277: PUSH
55278: LD_INT 2
55280: PUSH
55281: LD_INT 3
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: IN
55288: NOT
55289: PUSH
55290: LD_VAR 0 6
55294: PUSH
55295: LD_INT 2
55297: EQUAL
55298: AND
55299: OR
55300: IFFALSE 55310
// mode = 0 ;
55302: LD_ADDR_VAR 0 6
55306: PUSH
55307: LD_INT 0
55309: ST_TO_ADDR
// case mode of 0 :
55310: LD_VAR 0 6
55314: PUSH
55315: LD_INT 0
55317: DOUBLE
55318: EQUAL
55319: IFTRUE 55323
55321: GO 66776
55323: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55324: LD_ADDR_VAR 0 11
55328: PUSH
55329: LD_INT 0
55331: PUSH
55332: LD_INT 0
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 0
55341: PUSH
55342: LD_INT 1
55344: NEG
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 1
55352: PUSH
55353: LD_INT 0
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 1
55362: PUSH
55363: LD_INT 1
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 0
55372: PUSH
55373: LD_INT 1
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 1
55382: NEG
55383: PUSH
55384: LD_INT 0
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 1
55393: NEG
55394: PUSH
55395: LD_INT 1
55397: NEG
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 1
55405: NEG
55406: PUSH
55407: LD_INT 2
55409: NEG
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 0
55417: PUSH
55418: LD_INT 2
55420: NEG
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 1
55428: PUSH
55429: LD_INT 1
55431: NEG
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 1
55439: PUSH
55440: LD_INT 2
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 0
55449: PUSH
55450: LD_INT 2
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 1
55459: NEG
55460: PUSH
55461: LD_INT 1
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 1
55470: PUSH
55471: LD_INT 3
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 0
55480: PUSH
55481: LD_INT 3
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 1
55490: NEG
55491: PUSH
55492: LD_INT 2
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55517: LD_ADDR_VAR 0 12
55521: PUSH
55522: LD_INT 0
55524: PUSH
55525: LD_INT 0
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 0
55534: PUSH
55535: LD_INT 1
55537: NEG
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 1
55545: PUSH
55546: LD_INT 0
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 1
55555: PUSH
55556: LD_INT 1
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 0
55565: PUSH
55566: LD_INT 1
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 1
55575: NEG
55576: PUSH
55577: LD_INT 0
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 1
55586: NEG
55587: PUSH
55588: LD_INT 1
55590: NEG
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 1
55598: PUSH
55599: LD_INT 1
55601: NEG
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 2
55609: PUSH
55610: LD_INT 0
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 2
55619: PUSH
55620: LD_INT 1
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 1
55629: NEG
55630: PUSH
55631: LD_INT 1
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 2
55640: NEG
55641: PUSH
55642: LD_INT 0
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 2
55651: NEG
55652: PUSH
55653: LD_INT 1
55655: NEG
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 2
55663: NEG
55664: PUSH
55665: LD_INT 1
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 3
55674: NEG
55675: PUSH
55676: LD_INT 0
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 3
55685: NEG
55686: PUSH
55687: LD_INT 1
55689: NEG
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55713: LD_ADDR_VAR 0 13
55717: PUSH
55718: LD_INT 0
55720: PUSH
55721: LD_INT 0
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 0
55730: PUSH
55731: LD_INT 1
55733: NEG
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 1
55741: PUSH
55742: LD_INT 0
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 1
55751: PUSH
55752: LD_INT 1
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 0
55761: PUSH
55762: LD_INT 1
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 1
55771: NEG
55772: PUSH
55773: LD_INT 0
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 1
55782: NEG
55783: PUSH
55784: LD_INT 1
55786: NEG
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 1
55794: NEG
55795: PUSH
55796: LD_INT 2
55798: NEG
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 2
55806: PUSH
55807: LD_INT 1
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 2
55816: PUSH
55817: LD_INT 2
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 1
55826: PUSH
55827: LD_INT 2
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 2
55836: NEG
55837: PUSH
55838: LD_INT 1
55840: NEG
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 2
55848: NEG
55849: PUSH
55850: LD_INT 2
55852: NEG
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 2
55860: NEG
55861: PUSH
55862: LD_INT 3
55864: NEG
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 3
55872: NEG
55873: PUSH
55874: LD_INT 2
55876: NEG
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 3
55884: NEG
55885: PUSH
55886: LD_INT 3
55888: NEG
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55912: LD_ADDR_VAR 0 14
55916: PUSH
55917: LD_INT 0
55919: PUSH
55920: LD_INT 0
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 0
55929: PUSH
55930: LD_INT 1
55932: NEG
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 1
55940: PUSH
55941: LD_INT 0
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 1
55950: PUSH
55951: LD_INT 1
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 0
55960: PUSH
55961: LD_INT 1
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 1
55970: NEG
55971: PUSH
55972: LD_INT 0
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 1
55981: NEG
55982: PUSH
55983: LD_INT 1
55985: NEG
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 1
55993: NEG
55994: PUSH
55995: LD_INT 2
55997: NEG
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 0
56005: PUSH
56006: LD_INT 2
56008: NEG
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 1
56016: PUSH
56017: LD_INT 1
56019: NEG
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 1
56027: PUSH
56028: LD_INT 2
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 0
56037: PUSH
56038: LD_INT 2
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 1
56047: NEG
56048: PUSH
56049: LD_INT 1
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 1
56058: NEG
56059: PUSH
56060: LD_INT 3
56062: NEG
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 0
56070: PUSH
56071: LD_INT 3
56073: NEG
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 1
56081: PUSH
56082: LD_INT 2
56084: NEG
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56108: LD_ADDR_VAR 0 15
56112: PUSH
56113: LD_INT 0
56115: PUSH
56116: LD_INT 0
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 0
56125: PUSH
56126: LD_INT 1
56128: NEG
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 1
56136: PUSH
56137: LD_INT 0
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 1
56146: PUSH
56147: LD_INT 1
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 0
56156: PUSH
56157: LD_INT 1
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 1
56166: NEG
56167: PUSH
56168: LD_INT 0
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 1
56177: NEG
56178: PUSH
56179: LD_INT 1
56181: NEG
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 1
56189: PUSH
56190: LD_INT 1
56192: NEG
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 2
56200: PUSH
56201: LD_INT 0
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 2
56210: PUSH
56211: LD_INT 1
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 1
56220: NEG
56221: PUSH
56222: LD_INT 1
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 2
56231: NEG
56232: PUSH
56233: LD_INT 0
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 2
56242: NEG
56243: PUSH
56244: LD_INT 1
56246: NEG
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 2
56254: PUSH
56255: LD_INT 1
56257: NEG
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 3
56265: PUSH
56266: LD_INT 0
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 3
56275: PUSH
56276: LD_INT 1
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56301: LD_ADDR_VAR 0 16
56305: PUSH
56306: LD_INT 0
56308: PUSH
56309: LD_INT 0
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 0
56318: PUSH
56319: LD_INT 1
56321: NEG
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 1
56329: PUSH
56330: LD_INT 0
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 1
56339: PUSH
56340: LD_INT 1
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 0
56349: PUSH
56350: LD_INT 1
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 1
56359: NEG
56360: PUSH
56361: LD_INT 0
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 1
56370: NEG
56371: PUSH
56372: LD_INT 1
56374: NEG
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 1
56382: NEG
56383: PUSH
56384: LD_INT 2
56386: NEG
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 2
56394: PUSH
56395: LD_INT 1
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 2
56404: PUSH
56405: LD_INT 2
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 1
56414: PUSH
56415: LD_INT 2
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 2
56424: NEG
56425: PUSH
56426: LD_INT 1
56428: NEG
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 2
56436: NEG
56437: PUSH
56438: LD_INT 2
56440: NEG
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 3
56448: PUSH
56449: LD_INT 2
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 3
56458: PUSH
56459: LD_INT 3
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 2
56468: PUSH
56469: LD_INT 3
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56494: LD_ADDR_VAR 0 17
56498: PUSH
56499: LD_INT 0
56501: PUSH
56502: LD_INT 0
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 0
56511: PUSH
56512: LD_INT 1
56514: NEG
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 1
56522: PUSH
56523: LD_INT 0
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 1
56532: PUSH
56533: LD_INT 1
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 0
56542: PUSH
56543: LD_INT 1
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 1
56552: NEG
56553: PUSH
56554: LD_INT 0
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 1
56563: NEG
56564: PUSH
56565: LD_INT 1
56567: NEG
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 1
56575: NEG
56576: PUSH
56577: LD_INT 2
56579: NEG
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 0
56587: PUSH
56588: LD_INT 2
56590: NEG
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 1
56598: PUSH
56599: LD_INT 1
56601: NEG
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 2
56609: PUSH
56610: LD_INT 0
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 2
56619: PUSH
56620: LD_INT 1
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 2
56629: PUSH
56630: LD_INT 2
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 1
56639: PUSH
56640: LD_INT 2
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 0
56649: PUSH
56650: LD_INT 2
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 1
56659: NEG
56660: PUSH
56661: LD_INT 1
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 2
56670: NEG
56671: PUSH
56672: LD_INT 0
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 2
56681: NEG
56682: PUSH
56683: LD_INT 1
56685: NEG
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 2
56693: NEG
56694: PUSH
56695: LD_INT 2
56697: NEG
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56724: LD_ADDR_VAR 0 18
56728: PUSH
56729: LD_INT 0
56731: PUSH
56732: LD_INT 0
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 0
56741: PUSH
56742: LD_INT 1
56744: NEG
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 1
56752: PUSH
56753: LD_INT 0
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 1
56762: PUSH
56763: LD_INT 1
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 0
56772: PUSH
56773: LD_INT 1
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 1
56782: NEG
56783: PUSH
56784: LD_INT 0
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 1
56793: NEG
56794: PUSH
56795: LD_INT 1
56797: NEG
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 1
56805: NEG
56806: PUSH
56807: LD_INT 2
56809: NEG
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 0
56817: PUSH
56818: LD_INT 2
56820: NEG
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 1
56828: PUSH
56829: LD_INT 1
56831: NEG
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 2
56839: PUSH
56840: LD_INT 0
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 2
56849: PUSH
56850: LD_INT 1
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 2
56859: PUSH
56860: LD_INT 2
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 1
56869: PUSH
56870: LD_INT 2
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 0
56879: PUSH
56880: LD_INT 2
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 1
56889: NEG
56890: PUSH
56891: LD_INT 1
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 2
56900: NEG
56901: PUSH
56902: LD_INT 0
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 2
56911: NEG
56912: PUSH
56913: LD_INT 1
56915: NEG
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 2
56923: NEG
56924: PUSH
56925: LD_INT 2
56927: NEG
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56954: LD_ADDR_VAR 0 19
56958: PUSH
56959: LD_INT 0
56961: PUSH
56962: LD_INT 0
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 0
56971: PUSH
56972: LD_INT 1
56974: NEG
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 1
56982: PUSH
56983: LD_INT 0
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 1
56992: PUSH
56993: LD_INT 1
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 0
57002: PUSH
57003: LD_INT 1
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 1
57012: NEG
57013: PUSH
57014: LD_INT 0
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 1
57023: NEG
57024: PUSH
57025: LD_INT 1
57027: NEG
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 1
57035: NEG
57036: PUSH
57037: LD_INT 2
57039: NEG
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 0
57047: PUSH
57048: LD_INT 2
57050: NEG
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 1
57058: PUSH
57059: LD_INT 1
57061: NEG
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 2
57069: PUSH
57070: LD_INT 0
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 2
57079: PUSH
57080: LD_INT 1
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 2
57089: PUSH
57090: LD_INT 2
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 1
57099: PUSH
57100: LD_INT 2
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 0
57109: PUSH
57110: LD_INT 2
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 1
57119: NEG
57120: PUSH
57121: LD_INT 1
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 2
57130: NEG
57131: PUSH
57132: LD_INT 0
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 2
57141: NEG
57142: PUSH
57143: LD_INT 1
57145: NEG
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 2
57153: NEG
57154: PUSH
57155: LD_INT 2
57157: NEG
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57184: LD_ADDR_VAR 0 20
57188: PUSH
57189: LD_INT 0
57191: PUSH
57192: LD_INT 0
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 0
57201: PUSH
57202: LD_INT 1
57204: NEG
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 1
57212: PUSH
57213: LD_INT 0
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 1
57222: PUSH
57223: LD_INT 1
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 0
57232: PUSH
57233: LD_INT 1
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 1
57242: NEG
57243: PUSH
57244: LD_INT 0
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 1
57253: NEG
57254: PUSH
57255: LD_INT 1
57257: NEG
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 1
57265: NEG
57266: PUSH
57267: LD_INT 2
57269: NEG
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 0
57277: PUSH
57278: LD_INT 2
57280: NEG
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 1
57288: PUSH
57289: LD_INT 1
57291: NEG
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 2
57299: PUSH
57300: LD_INT 0
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 2
57309: PUSH
57310: LD_INT 1
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 2
57319: PUSH
57320: LD_INT 2
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 1
57329: PUSH
57330: LD_INT 2
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 0
57339: PUSH
57340: LD_INT 2
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 1
57349: NEG
57350: PUSH
57351: LD_INT 1
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 2
57360: NEG
57361: PUSH
57362: LD_INT 0
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 2
57371: NEG
57372: PUSH
57373: LD_INT 1
57375: NEG
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 2
57383: NEG
57384: PUSH
57385: LD_INT 2
57387: NEG
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57414: LD_ADDR_VAR 0 21
57418: PUSH
57419: LD_INT 0
57421: PUSH
57422: LD_INT 0
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 0
57431: PUSH
57432: LD_INT 1
57434: NEG
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 1
57442: PUSH
57443: LD_INT 0
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 1
57452: PUSH
57453: LD_INT 1
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 0
57462: PUSH
57463: LD_INT 1
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 1
57472: NEG
57473: PUSH
57474: LD_INT 0
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 1
57483: NEG
57484: PUSH
57485: LD_INT 1
57487: NEG
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 1
57495: NEG
57496: PUSH
57497: LD_INT 2
57499: NEG
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 0
57507: PUSH
57508: LD_INT 2
57510: NEG
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 1
57518: PUSH
57519: LD_INT 1
57521: NEG
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 2
57529: PUSH
57530: LD_INT 0
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 2
57539: PUSH
57540: LD_INT 1
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 2
57549: PUSH
57550: LD_INT 2
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 1
57559: PUSH
57560: LD_INT 2
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 0
57569: PUSH
57570: LD_INT 2
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 1
57579: NEG
57580: PUSH
57581: LD_INT 1
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 2
57590: NEG
57591: PUSH
57592: LD_INT 0
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 2
57601: NEG
57602: PUSH
57603: LD_INT 1
57605: NEG
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 2
57613: NEG
57614: PUSH
57615: LD_INT 2
57617: NEG
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57644: LD_ADDR_VAR 0 22
57648: PUSH
57649: LD_INT 0
57651: PUSH
57652: LD_INT 0
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 0
57661: PUSH
57662: LD_INT 1
57664: NEG
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 1
57672: PUSH
57673: LD_INT 0
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 1
57682: PUSH
57683: LD_INT 1
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 0
57692: PUSH
57693: LD_INT 1
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 1
57702: NEG
57703: PUSH
57704: LD_INT 0
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 1
57713: NEG
57714: PUSH
57715: LD_INT 1
57717: NEG
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 1
57725: NEG
57726: PUSH
57727: LD_INT 2
57729: NEG
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 0
57737: PUSH
57738: LD_INT 2
57740: NEG
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 1
57748: PUSH
57749: LD_INT 1
57751: NEG
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 2
57759: PUSH
57760: LD_INT 0
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 2
57769: PUSH
57770: LD_INT 1
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 2
57779: PUSH
57780: LD_INT 2
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 1
57789: PUSH
57790: LD_INT 2
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 0
57799: PUSH
57800: LD_INT 2
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 1
57809: NEG
57810: PUSH
57811: LD_INT 1
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 2
57820: NEG
57821: PUSH
57822: LD_INT 0
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 2
57831: NEG
57832: PUSH
57833: LD_INT 1
57835: NEG
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 2
57843: NEG
57844: PUSH
57845: LD_INT 2
57847: NEG
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57874: LD_ADDR_VAR 0 23
57878: PUSH
57879: LD_INT 0
57881: PUSH
57882: LD_INT 0
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 0
57891: PUSH
57892: LD_INT 1
57894: NEG
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 1
57902: PUSH
57903: LD_INT 0
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 1
57912: PUSH
57913: LD_INT 1
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 0
57922: PUSH
57923: LD_INT 1
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 1
57932: NEG
57933: PUSH
57934: LD_INT 0
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 1
57943: NEG
57944: PUSH
57945: LD_INT 1
57947: NEG
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 1
57955: NEG
57956: PUSH
57957: LD_INT 2
57959: NEG
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 0
57967: PUSH
57968: LD_INT 2
57970: NEG
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 1
57978: PUSH
57979: LD_INT 1
57981: NEG
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 2
57989: PUSH
57990: LD_INT 0
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 2
57999: PUSH
58000: LD_INT 1
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 2
58009: PUSH
58010: LD_INT 2
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 1
58019: PUSH
58020: LD_INT 2
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 0
58029: PUSH
58030: LD_INT 2
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 1
58039: NEG
58040: PUSH
58041: LD_INT 1
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 2
58050: NEG
58051: PUSH
58052: LD_INT 0
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 2
58061: NEG
58062: PUSH
58063: LD_INT 1
58065: NEG
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 2
58073: NEG
58074: PUSH
58075: LD_INT 2
58077: NEG
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 2
58085: NEG
58086: PUSH
58087: LD_INT 3
58089: NEG
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 1
58097: NEG
58098: PUSH
58099: LD_INT 3
58101: NEG
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 1
58109: PUSH
58110: LD_INT 2
58112: NEG
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 2
58120: PUSH
58121: LD_INT 1
58123: NEG
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58154: LD_ADDR_VAR 0 24
58158: PUSH
58159: LD_INT 0
58161: PUSH
58162: LD_INT 0
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 0
58171: PUSH
58172: LD_INT 1
58174: NEG
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 1
58182: PUSH
58183: LD_INT 0
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 1
58192: PUSH
58193: LD_INT 1
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 0
58202: PUSH
58203: LD_INT 1
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 1
58212: NEG
58213: PUSH
58214: LD_INT 0
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 1
58223: NEG
58224: PUSH
58225: LD_INT 1
58227: NEG
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 1
58235: NEG
58236: PUSH
58237: LD_INT 2
58239: NEG
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 0
58247: PUSH
58248: LD_INT 2
58250: NEG
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 1
58258: PUSH
58259: LD_INT 1
58261: NEG
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 2
58269: PUSH
58270: LD_INT 0
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 2
58279: PUSH
58280: LD_INT 1
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 2
58289: PUSH
58290: LD_INT 2
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 1
58299: PUSH
58300: LD_INT 2
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 0
58309: PUSH
58310: LD_INT 2
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 1
58319: NEG
58320: PUSH
58321: LD_INT 1
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 2
58330: NEG
58331: PUSH
58332: LD_INT 0
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 2
58341: NEG
58342: PUSH
58343: LD_INT 1
58345: NEG
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 2
58353: NEG
58354: PUSH
58355: LD_INT 2
58357: NEG
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 1
58365: PUSH
58366: LD_INT 2
58368: NEG
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 2
58376: PUSH
58377: LD_INT 1
58379: NEG
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 3
58387: PUSH
58388: LD_INT 1
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 3
58397: PUSH
58398: LD_INT 2
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
58430: LD_ADDR_VAR 0 25
58434: PUSH
58435: LD_INT 0
58437: PUSH
58438: LD_INT 0
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 0
58447: PUSH
58448: LD_INT 1
58450: NEG
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 1
58458: PUSH
58459: LD_INT 0
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 1
58468: PUSH
58469: LD_INT 1
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 0
58478: PUSH
58479: LD_INT 1
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 1
58488: NEG
58489: PUSH
58490: LD_INT 0
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 1
58499: NEG
58500: PUSH
58501: LD_INT 1
58503: NEG
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 1
58511: NEG
58512: PUSH
58513: LD_INT 2
58515: NEG
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 0
58523: PUSH
58524: LD_INT 2
58526: NEG
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 1
58534: PUSH
58535: LD_INT 1
58537: NEG
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 2
58545: PUSH
58546: LD_INT 0
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 2
58555: PUSH
58556: LD_INT 1
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 2
58565: PUSH
58566: LD_INT 2
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 1
58575: PUSH
58576: LD_INT 2
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 0
58585: PUSH
58586: LD_INT 2
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 1
58595: NEG
58596: PUSH
58597: LD_INT 1
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 2
58606: NEG
58607: PUSH
58608: LD_INT 0
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 2
58617: NEG
58618: PUSH
58619: LD_INT 1
58621: NEG
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 2
58629: NEG
58630: PUSH
58631: LD_INT 2
58633: NEG
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 3
58641: PUSH
58642: LD_INT 1
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 3
58651: PUSH
58652: LD_INT 2
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 2
58661: PUSH
58662: LD_INT 3
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 1
58671: PUSH
58672: LD_INT 3
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58704: LD_ADDR_VAR 0 26
58708: PUSH
58709: LD_INT 0
58711: PUSH
58712: LD_INT 0
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 0
58721: PUSH
58722: LD_INT 1
58724: NEG
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 1
58732: PUSH
58733: LD_INT 0
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 1
58742: PUSH
58743: LD_INT 1
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 0
58752: PUSH
58753: LD_INT 1
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 1
58762: NEG
58763: PUSH
58764: LD_INT 0
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 1
58773: NEG
58774: PUSH
58775: LD_INT 1
58777: NEG
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 1
58785: NEG
58786: PUSH
58787: LD_INT 2
58789: NEG
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 0
58797: PUSH
58798: LD_INT 2
58800: NEG
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 1
58808: PUSH
58809: LD_INT 1
58811: NEG
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 2
58819: PUSH
58820: LD_INT 0
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 2
58829: PUSH
58830: LD_INT 1
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 2
58839: PUSH
58840: LD_INT 2
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 1
58849: PUSH
58850: LD_INT 2
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 0
58859: PUSH
58860: LD_INT 2
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 1
58869: NEG
58870: PUSH
58871: LD_INT 1
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 2
58880: NEG
58881: PUSH
58882: LD_INT 0
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 2
58891: NEG
58892: PUSH
58893: LD_INT 1
58895: NEG
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 2
58903: NEG
58904: PUSH
58905: LD_INT 2
58907: NEG
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 2
58915: PUSH
58916: LD_INT 3
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 1
58925: PUSH
58926: LD_INT 3
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 1
58935: NEG
58936: PUSH
58937: LD_INT 2
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 2
58946: NEG
58947: PUSH
58948: LD_INT 1
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58980: LD_ADDR_VAR 0 27
58984: PUSH
58985: LD_INT 0
58987: PUSH
58988: LD_INT 0
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 0
58997: PUSH
58998: LD_INT 1
59000: NEG
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 1
59008: PUSH
59009: LD_INT 0
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 1
59018: PUSH
59019: LD_INT 1
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 0
59028: PUSH
59029: LD_INT 1
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 1
59038: NEG
59039: PUSH
59040: LD_INT 0
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 1
59049: NEG
59050: PUSH
59051: LD_INT 1
59053: NEG
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 1
59061: NEG
59062: PUSH
59063: LD_INT 2
59065: NEG
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 0
59073: PUSH
59074: LD_INT 2
59076: NEG
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 1
59084: PUSH
59085: LD_INT 1
59087: NEG
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 2
59095: PUSH
59096: LD_INT 0
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 2
59105: PUSH
59106: LD_INT 1
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 2
59115: PUSH
59116: LD_INT 2
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 1
59125: PUSH
59126: LD_INT 2
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 0
59135: PUSH
59136: LD_INT 2
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 1
59145: NEG
59146: PUSH
59147: LD_INT 1
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 2
59156: NEG
59157: PUSH
59158: LD_INT 0
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 2
59167: NEG
59168: PUSH
59169: LD_INT 1
59171: NEG
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 2
59179: NEG
59180: PUSH
59181: LD_INT 2
59183: NEG
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 1
59191: NEG
59192: PUSH
59193: LD_INT 2
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 2
59202: NEG
59203: PUSH
59204: LD_INT 1
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 3
59213: NEG
59214: PUSH
59215: LD_INT 1
59217: NEG
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 3
59225: NEG
59226: PUSH
59227: LD_INT 2
59229: NEG
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59260: LD_ADDR_VAR 0 28
59264: PUSH
59265: LD_INT 0
59267: PUSH
59268: LD_INT 0
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 0
59277: PUSH
59278: LD_INT 1
59280: NEG
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 1
59288: PUSH
59289: LD_INT 0
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 1
59298: PUSH
59299: LD_INT 1
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 0
59308: PUSH
59309: LD_INT 1
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 1
59318: NEG
59319: PUSH
59320: LD_INT 0
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 1
59329: NEG
59330: PUSH
59331: LD_INT 1
59333: NEG
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 1
59341: NEG
59342: PUSH
59343: LD_INT 2
59345: NEG
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 0
59353: PUSH
59354: LD_INT 2
59356: NEG
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 1
59364: PUSH
59365: LD_INT 1
59367: NEG
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 2
59375: PUSH
59376: LD_INT 0
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 2
59385: PUSH
59386: LD_INT 1
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 2
59395: PUSH
59396: LD_INT 2
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 1
59405: PUSH
59406: LD_INT 2
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 0
59415: PUSH
59416: LD_INT 2
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 1
59425: NEG
59426: PUSH
59427: LD_INT 1
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 2
59436: NEG
59437: PUSH
59438: LD_INT 0
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 2
59447: NEG
59448: PUSH
59449: LD_INT 1
59451: NEG
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 2
59459: NEG
59460: PUSH
59461: LD_INT 2
59463: NEG
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 2
59471: NEG
59472: PUSH
59473: LD_INT 3
59475: NEG
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 1
59483: NEG
59484: PUSH
59485: LD_INT 3
59487: NEG
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 3
59495: NEG
59496: PUSH
59497: LD_INT 1
59499: NEG
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 3
59507: NEG
59508: PUSH
59509: LD_INT 2
59511: NEG
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59542: LD_ADDR_VAR 0 29
59546: PUSH
59547: LD_INT 0
59549: PUSH
59550: LD_INT 0
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 0
59559: PUSH
59560: LD_INT 1
59562: NEG
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 1
59570: PUSH
59571: LD_INT 0
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 1
59580: PUSH
59581: LD_INT 1
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 0
59590: PUSH
59591: LD_INT 1
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 1
59600: NEG
59601: PUSH
59602: LD_INT 0
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 1
59611: NEG
59612: PUSH
59613: LD_INT 1
59615: NEG
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 1
59623: NEG
59624: PUSH
59625: LD_INT 2
59627: NEG
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 0
59635: PUSH
59636: LD_INT 2
59638: NEG
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 1
59646: PUSH
59647: LD_INT 1
59649: NEG
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 2
59657: PUSH
59658: LD_INT 0
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 2
59667: PUSH
59668: LD_INT 1
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 1
59677: PUSH
59678: LD_INT 2
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 0
59687: PUSH
59688: LD_INT 2
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 1
59697: NEG
59698: PUSH
59699: LD_INT 1
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 2
59708: NEG
59709: PUSH
59710: LD_INT 1
59712: NEG
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 2
59720: NEG
59721: PUSH
59722: LD_INT 2
59724: NEG
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 2
59732: NEG
59733: PUSH
59734: LD_INT 3
59736: NEG
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 2
59744: PUSH
59745: LD_INT 1
59747: NEG
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 3
59755: PUSH
59756: LD_INT 1
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 1
59765: PUSH
59766: LD_INT 3
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 1
59775: NEG
59776: PUSH
59777: LD_INT 2
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 3
59786: NEG
59787: PUSH
59788: LD_INT 2
59790: NEG
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59821: LD_ADDR_VAR 0 30
59825: PUSH
59826: LD_INT 0
59828: PUSH
59829: LD_INT 0
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 0
59838: PUSH
59839: LD_INT 1
59841: NEG
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 1
59849: PUSH
59850: LD_INT 0
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 1
59859: PUSH
59860: LD_INT 1
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 0
59869: PUSH
59870: LD_INT 1
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 1
59879: NEG
59880: PUSH
59881: LD_INT 0
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 1
59890: NEG
59891: PUSH
59892: LD_INT 1
59894: NEG
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 1
59902: NEG
59903: PUSH
59904: LD_INT 2
59906: NEG
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 0
59914: PUSH
59915: LD_INT 2
59917: NEG
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 1
59925: PUSH
59926: LD_INT 1
59928: NEG
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 2
59936: PUSH
59937: LD_INT 0
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 2
59946: PUSH
59947: LD_INT 1
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 2
59956: PUSH
59957: LD_INT 2
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 1
59966: PUSH
59967: LD_INT 2
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 1
59976: NEG
59977: PUSH
59978: LD_INT 1
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 2
59987: NEG
59988: PUSH
59989: LD_INT 0
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 2
59998: NEG
59999: PUSH
60000: LD_INT 1
60002: NEG
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 1
60010: NEG
60011: PUSH
60012: LD_INT 3
60014: NEG
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 1
60022: PUSH
60023: LD_INT 2
60025: NEG
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 3
60033: PUSH
60034: LD_INT 2
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 2
60043: PUSH
60044: LD_INT 3
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 2
60053: NEG
60054: PUSH
60055: LD_INT 1
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 3
60064: NEG
60065: PUSH
60066: LD_INT 1
60068: NEG
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60099: LD_ADDR_VAR 0 31
60103: PUSH
60104: LD_INT 0
60106: PUSH
60107: LD_INT 0
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 0
60116: PUSH
60117: LD_INT 1
60119: NEG
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 1
60127: PUSH
60128: LD_INT 0
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 1
60137: PUSH
60138: LD_INT 1
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 0
60147: PUSH
60148: LD_INT 1
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 1
60157: NEG
60158: PUSH
60159: LD_INT 0
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 1
60168: NEG
60169: PUSH
60170: LD_INT 1
60172: NEG
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 1
60180: NEG
60181: PUSH
60182: LD_INT 2
60184: NEG
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 1
60192: PUSH
60193: LD_INT 1
60195: NEG
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 2
60203: PUSH
60204: LD_INT 0
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 2
60213: PUSH
60214: LD_INT 1
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 2
60223: PUSH
60224: LD_INT 2
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 1
60233: PUSH
60234: LD_INT 2
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 0
60243: PUSH
60244: LD_INT 2
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 1
60253: NEG
60254: PUSH
60255: LD_INT 1
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 2
60264: NEG
60265: PUSH
60266: LD_INT 1
60268: NEG
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 2
60276: NEG
60277: PUSH
60278: LD_INT 2
60280: NEG
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 2
60288: NEG
60289: PUSH
60290: LD_INT 3
60292: NEG
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 2
60300: PUSH
60301: LD_INT 1
60303: NEG
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 3
60311: PUSH
60312: LD_INT 1
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 1
60321: PUSH
60322: LD_INT 3
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 1
60331: NEG
60332: PUSH
60333: LD_INT 2
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 3
60342: NEG
60343: PUSH
60344: LD_INT 2
60346: NEG
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60377: LD_ADDR_VAR 0 32
60381: PUSH
60382: LD_INT 0
60384: PUSH
60385: LD_INT 0
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 0
60394: PUSH
60395: LD_INT 1
60397: NEG
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 1
60405: PUSH
60406: LD_INT 0
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 1
60415: PUSH
60416: LD_INT 1
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 0
60425: PUSH
60426: LD_INT 1
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 1
60435: NEG
60436: PUSH
60437: LD_INT 0
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 1
60446: NEG
60447: PUSH
60448: LD_INT 1
60450: NEG
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 1
60458: NEG
60459: PUSH
60460: LD_INT 2
60462: NEG
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 0
60470: PUSH
60471: LD_INT 2
60473: NEG
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 1
60481: PUSH
60482: LD_INT 1
60484: NEG
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 2
60492: PUSH
60493: LD_INT 1
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 2
60502: PUSH
60503: LD_INT 2
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 1
60512: PUSH
60513: LD_INT 2
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 0
60522: PUSH
60523: LD_INT 2
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 1
60532: NEG
60533: PUSH
60534: LD_INT 1
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 2
60543: NEG
60544: PUSH
60545: LD_INT 0
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 2
60554: NEG
60555: PUSH
60556: LD_INT 1
60558: NEG
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 1
60566: NEG
60567: PUSH
60568: LD_INT 3
60570: NEG
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 1
60578: PUSH
60579: LD_INT 2
60581: NEG
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 3
60589: PUSH
60590: LD_INT 2
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 2
60599: PUSH
60600: LD_INT 3
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 2
60609: NEG
60610: PUSH
60611: LD_INT 1
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 3
60620: NEG
60621: PUSH
60622: LD_INT 1
60624: NEG
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60655: LD_ADDR_VAR 0 33
60659: PUSH
60660: LD_INT 0
60662: PUSH
60663: LD_INT 0
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 0
60672: PUSH
60673: LD_INT 1
60675: NEG
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 1
60683: PUSH
60684: LD_INT 0
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 1
60693: PUSH
60694: LD_INT 1
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 0
60703: PUSH
60704: LD_INT 1
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 1
60713: NEG
60714: PUSH
60715: LD_INT 0
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 1
60724: NEG
60725: PUSH
60726: LD_INT 1
60728: NEG
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 1
60736: NEG
60737: PUSH
60738: LD_INT 2
60740: NEG
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 1
60748: PUSH
60749: LD_INT 1
60751: NEG
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 2
60759: PUSH
60760: LD_INT 0
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 2
60769: PUSH
60770: LD_INT 1
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 1
60779: PUSH
60780: LD_INT 2
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 0
60789: PUSH
60790: LD_INT 2
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 1
60799: NEG
60800: PUSH
60801: LD_INT 1
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 2
60810: NEG
60811: PUSH
60812: LD_INT 0
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 2
60821: NEG
60822: PUSH
60823: LD_INT 1
60825: NEG
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 2
60833: NEG
60834: PUSH
60835: LD_INT 2
60837: NEG
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 2
60845: NEG
60846: PUSH
60847: LD_INT 3
60849: NEG
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 2
60857: PUSH
60858: LD_INT 1
60860: NEG
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 3
60868: PUSH
60869: LD_INT 1
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 1
60878: PUSH
60879: LD_INT 3
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 1
60888: NEG
60889: PUSH
60890: LD_INT 2
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 3
60899: NEG
60900: PUSH
60901: LD_INT 2
60903: NEG
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60934: LD_ADDR_VAR 0 34
60938: PUSH
60939: LD_INT 0
60941: PUSH
60942: LD_INT 0
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 0
60951: PUSH
60952: LD_INT 1
60954: NEG
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 1
60962: PUSH
60963: LD_INT 0
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 1
60972: PUSH
60973: LD_INT 1
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 0
60982: PUSH
60983: LD_INT 1
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 1
60992: NEG
60993: PUSH
60994: LD_INT 0
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 1
61003: NEG
61004: PUSH
61005: LD_INT 1
61007: NEG
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 1
61015: NEG
61016: PUSH
61017: LD_INT 2
61019: NEG
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 0
61027: PUSH
61028: LD_INT 2
61030: NEG
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 1
61038: PUSH
61039: LD_INT 1
61041: NEG
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 2
61049: PUSH
61050: LD_INT 1
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 2
61059: PUSH
61060: LD_INT 2
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 1
61069: PUSH
61070: LD_INT 2
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 1
61079: NEG
61080: PUSH
61081: LD_INT 1
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 2
61090: NEG
61091: PUSH
61092: LD_INT 0
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 2
61101: NEG
61102: PUSH
61103: LD_INT 1
61105: NEG
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 2
61113: NEG
61114: PUSH
61115: LD_INT 2
61117: NEG
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 1
61125: NEG
61126: PUSH
61127: LD_INT 3
61129: NEG
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 1
61137: PUSH
61138: LD_INT 2
61140: NEG
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 3
61148: PUSH
61149: LD_INT 2
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 2
61158: PUSH
61159: LD_INT 3
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 2
61168: NEG
61169: PUSH
61170: LD_INT 1
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 3
61179: NEG
61180: PUSH
61181: LD_INT 1
61183: NEG
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61214: LD_ADDR_VAR 0 35
61218: PUSH
61219: LD_INT 0
61221: PUSH
61222: LD_INT 0
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 0
61231: PUSH
61232: LD_INT 1
61234: NEG
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 1
61242: PUSH
61243: LD_INT 0
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 1
61252: PUSH
61253: LD_INT 1
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 0
61262: PUSH
61263: LD_INT 1
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 1
61272: NEG
61273: PUSH
61274: LD_INT 0
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 1
61283: NEG
61284: PUSH
61285: LD_INT 1
61287: NEG
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 2
61295: PUSH
61296: LD_INT 1
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 2
61305: NEG
61306: PUSH
61307: LD_INT 1
61309: NEG
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61326: LD_ADDR_VAR 0 36
61330: PUSH
61331: LD_INT 0
61333: PUSH
61334: LD_INT 0
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 0
61343: PUSH
61344: LD_INT 1
61346: NEG
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 1
61354: PUSH
61355: LD_INT 0
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 1
61364: PUSH
61365: LD_INT 1
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 0
61374: PUSH
61375: LD_INT 1
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 1
61384: NEG
61385: PUSH
61386: LD_INT 0
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 1
61395: NEG
61396: PUSH
61397: LD_INT 1
61399: NEG
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 1
61407: NEG
61408: PUSH
61409: LD_INT 2
61411: NEG
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 1
61419: PUSH
61420: LD_INT 2
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61438: LD_ADDR_VAR 0 37
61442: PUSH
61443: LD_INT 0
61445: PUSH
61446: LD_INT 0
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 0
61455: PUSH
61456: LD_INT 1
61458: NEG
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 1
61466: PUSH
61467: LD_INT 0
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 1
61476: PUSH
61477: LD_INT 1
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 0
61486: PUSH
61487: LD_INT 1
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 1
61496: NEG
61497: PUSH
61498: LD_INT 0
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 1
61507: NEG
61508: PUSH
61509: LD_INT 1
61511: NEG
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 1
61519: PUSH
61520: LD_INT 1
61522: NEG
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 1
61530: NEG
61531: PUSH
61532: LD_INT 1
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61550: LD_ADDR_VAR 0 38
61554: PUSH
61555: LD_INT 0
61557: PUSH
61558: LD_INT 0
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 0
61567: PUSH
61568: LD_INT 1
61570: NEG
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 1
61578: PUSH
61579: LD_INT 0
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 1
61588: PUSH
61589: LD_INT 1
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 0
61598: PUSH
61599: LD_INT 1
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 1
61608: NEG
61609: PUSH
61610: LD_INT 0
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 1
61619: NEG
61620: PUSH
61621: LD_INT 1
61623: NEG
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 2
61631: PUSH
61632: LD_INT 1
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 2
61641: NEG
61642: PUSH
61643: LD_INT 1
61645: NEG
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61662: LD_ADDR_VAR 0 39
61666: PUSH
61667: LD_INT 0
61669: PUSH
61670: LD_INT 0
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 0
61679: PUSH
61680: LD_INT 1
61682: NEG
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 1
61690: PUSH
61691: LD_INT 0
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 1
61700: PUSH
61701: LD_INT 1
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 0
61710: PUSH
61711: LD_INT 1
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 1
61720: NEG
61721: PUSH
61722: LD_INT 0
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 1
61731: NEG
61732: PUSH
61733: LD_INT 1
61735: NEG
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 1
61743: NEG
61744: PUSH
61745: LD_INT 2
61747: NEG
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 1
61755: PUSH
61756: LD_INT 2
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61774: LD_ADDR_VAR 0 40
61778: PUSH
61779: LD_INT 0
61781: PUSH
61782: LD_INT 0
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 0
61791: PUSH
61792: LD_INT 1
61794: NEG
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: LD_INT 1
61802: PUSH
61803: LD_INT 0
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 1
61812: PUSH
61813: LD_INT 1
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 0
61822: PUSH
61823: LD_INT 1
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 1
61832: NEG
61833: PUSH
61834: LD_INT 0
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 1
61843: NEG
61844: PUSH
61845: LD_INT 1
61847: NEG
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 1
61855: PUSH
61856: LD_INT 1
61858: NEG
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 1
61866: NEG
61867: PUSH
61868: LD_INT 1
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61886: LD_ADDR_VAR 0 41
61890: PUSH
61891: LD_INT 0
61893: PUSH
61894: LD_INT 0
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 0
61903: PUSH
61904: LD_INT 1
61906: NEG
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 1
61914: PUSH
61915: LD_INT 0
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 1
61924: PUSH
61925: LD_INT 1
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 0
61934: PUSH
61935: LD_INT 1
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 1
61944: NEG
61945: PUSH
61946: LD_INT 0
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 1
61955: NEG
61956: PUSH
61957: LD_INT 1
61959: NEG
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 1
61967: NEG
61968: PUSH
61969: LD_INT 2
61971: NEG
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 1
61979: PUSH
61980: LD_INT 1
61982: NEG
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 2
61990: PUSH
61991: LD_INT 0
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PUSH
61998: LD_INT 2
62000: PUSH
62001: LD_INT 1
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 2
62010: PUSH
62011: LD_INT 2
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 1
62020: PUSH
62021: LD_INT 2
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 1
62030: NEG
62031: PUSH
62032: LD_INT 1
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 2
62041: NEG
62042: PUSH
62043: LD_INT 0
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 2
62052: NEG
62053: PUSH
62054: LD_INT 1
62056: NEG
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 2
62064: NEG
62065: PUSH
62066: LD_INT 2
62068: NEG
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 2
62076: NEG
62077: PUSH
62078: LD_INT 3
62080: NEG
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 2
62088: PUSH
62089: LD_INT 1
62091: NEG
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 3
62099: PUSH
62100: LD_INT 0
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 3
62109: PUSH
62110: LD_INT 1
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 3
62119: PUSH
62120: LD_INT 2
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 3
62129: PUSH
62130: LD_INT 3
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 2
62139: PUSH
62140: LD_INT 3
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 2
62149: NEG
62150: PUSH
62151: LD_INT 1
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 3
62160: NEG
62161: PUSH
62162: LD_INT 0
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 3
62171: NEG
62172: PUSH
62173: LD_INT 1
62175: NEG
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 3
62183: NEG
62184: PUSH
62185: LD_INT 2
62187: NEG
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 3
62195: NEG
62196: PUSH
62197: LD_INT 3
62199: NEG
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62236: LD_ADDR_VAR 0 42
62240: PUSH
62241: LD_INT 0
62243: PUSH
62244: LD_INT 0
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 0
62253: PUSH
62254: LD_INT 1
62256: NEG
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 1
62264: PUSH
62265: LD_INT 0
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: PUSH
62272: LD_INT 1
62274: PUSH
62275: LD_INT 1
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 0
62284: PUSH
62285: LD_INT 1
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 1
62294: NEG
62295: PUSH
62296: LD_INT 0
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 1
62305: NEG
62306: PUSH
62307: LD_INT 1
62309: NEG
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 1
62317: NEG
62318: PUSH
62319: LD_INT 2
62321: NEG
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: LD_INT 0
62329: PUSH
62330: LD_INT 2
62332: NEG
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 1
62340: PUSH
62341: LD_INT 1
62343: NEG
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 2
62351: PUSH
62352: LD_INT 1
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 2
62361: PUSH
62362: LD_INT 2
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 1
62371: PUSH
62372: LD_INT 2
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 0
62381: PUSH
62382: LD_INT 2
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 1
62391: NEG
62392: PUSH
62393: LD_INT 1
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 2
62402: NEG
62403: PUSH
62404: LD_INT 1
62406: NEG
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 2
62414: NEG
62415: PUSH
62416: LD_INT 2
62418: NEG
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 2
62426: NEG
62427: PUSH
62428: LD_INT 3
62430: NEG
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 1
62438: NEG
62439: PUSH
62440: LD_INT 3
62442: NEG
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 0
62450: PUSH
62451: LD_INT 3
62453: NEG
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 1
62461: PUSH
62462: LD_INT 2
62464: NEG
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 3
62472: PUSH
62473: LD_INT 2
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_INT 3
62482: PUSH
62483: LD_INT 3
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 2
62492: PUSH
62493: LD_INT 3
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 1
62502: PUSH
62503: LD_INT 3
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 0
62512: PUSH
62513: LD_INT 3
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 1
62522: NEG
62523: PUSH
62524: LD_INT 2
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 3
62533: NEG
62534: PUSH
62535: LD_INT 2
62537: NEG
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: LD_INT 3
62545: NEG
62546: PUSH
62547: LD_INT 3
62549: NEG
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62586: LD_ADDR_VAR 0 43
62590: PUSH
62591: LD_INT 0
62593: PUSH
62594: LD_INT 0
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 0
62603: PUSH
62604: LD_INT 1
62606: NEG
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 1
62614: PUSH
62615: LD_INT 0
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: LD_INT 1
62624: PUSH
62625: LD_INT 1
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 0
62634: PUSH
62635: LD_INT 1
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 1
62644: NEG
62645: PUSH
62646: LD_INT 0
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 1
62655: NEG
62656: PUSH
62657: LD_INT 1
62659: NEG
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 1
62667: NEG
62668: PUSH
62669: LD_INT 2
62671: NEG
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 0
62679: PUSH
62680: LD_INT 2
62682: NEG
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 1
62690: PUSH
62691: LD_INT 1
62693: NEG
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 2
62701: PUSH
62702: LD_INT 0
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 2
62711: PUSH
62712: LD_INT 1
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 1
62721: PUSH
62722: LD_INT 2
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 0
62731: PUSH
62732: LD_INT 2
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 1
62741: NEG
62742: PUSH
62743: LD_INT 1
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 2
62752: NEG
62753: PUSH
62754: LD_INT 0
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 2
62763: NEG
62764: PUSH
62765: LD_INT 1
62767: NEG
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 1
62775: NEG
62776: PUSH
62777: LD_INT 3
62779: NEG
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 0
62787: PUSH
62788: LD_INT 3
62790: NEG
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 1
62798: PUSH
62799: LD_INT 2
62801: NEG
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 2
62809: PUSH
62810: LD_INT 1
62812: NEG
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: LD_INT 3
62820: PUSH
62821: LD_INT 0
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: LD_INT 3
62830: PUSH
62831: LD_INT 1
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 1
62840: PUSH
62841: LD_INT 3
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 0
62850: PUSH
62851: LD_INT 3
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 1
62860: NEG
62861: PUSH
62862: LD_INT 2
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 2
62871: NEG
62872: PUSH
62873: LD_INT 1
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: PUSH
62880: LD_INT 3
62882: NEG
62883: PUSH
62884: LD_INT 0
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 3
62893: NEG
62894: PUSH
62895: LD_INT 1
62897: NEG
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62934: LD_ADDR_VAR 0 44
62938: PUSH
62939: LD_INT 0
62941: PUSH
62942: LD_INT 0
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: LD_INT 0
62951: PUSH
62952: LD_INT 1
62954: NEG
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: LD_INT 1
62962: PUSH
62963: LD_INT 0
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: LD_INT 1
62972: PUSH
62973: LD_INT 1
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 0
62982: PUSH
62983: LD_INT 1
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: LD_INT 1
62992: NEG
62993: PUSH
62994: LD_INT 0
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: LD_INT 1
63003: NEG
63004: PUSH
63005: LD_INT 1
63007: NEG
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: LD_INT 1
63015: NEG
63016: PUSH
63017: LD_INT 2
63019: NEG
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 1
63027: PUSH
63028: LD_INT 1
63030: NEG
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 2
63038: PUSH
63039: LD_INT 0
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: PUSH
63046: LD_INT 2
63048: PUSH
63049: LD_INT 1
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: PUSH
63056: LD_INT 2
63058: PUSH
63059: LD_INT 2
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: PUSH
63066: LD_INT 1
63068: PUSH
63069: LD_INT 2
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 1
63078: NEG
63079: PUSH
63080: LD_INT 1
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: PUSH
63087: LD_INT 2
63089: NEG
63090: PUSH
63091: LD_INT 0
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: PUSH
63098: LD_INT 2
63100: NEG
63101: PUSH
63102: LD_INT 1
63104: NEG
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: LD_INT 2
63112: NEG
63113: PUSH
63114: LD_INT 2
63116: NEG
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: LD_INT 2
63124: NEG
63125: PUSH
63126: LD_INT 3
63128: NEG
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 2
63136: PUSH
63137: LD_INT 1
63139: NEG
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: LD_INT 3
63147: PUSH
63148: LD_INT 0
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: PUSH
63155: LD_INT 3
63157: PUSH
63158: LD_INT 1
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: PUSH
63165: LD_INT 3
63167: PUSH
63168: LD_INT 2
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: PUSH
63175: LD_INT 3
63177: PUSH
63178: LD_INT 3
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: PUSH
63185: LD_INT 2
63187: PUSH
63188: LD_INT 3
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 2
63197: NEG
63198: PUSH
63199: LD_INT 1
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 3
63208: NEG
63209: PUSH
63210: LD_INT 0
63212: PUSH
63213: EMPTY
63214: LIST
63215: LIST
63216: PUSH
63217: LD_INT 3
63219: NEG
63220: PUSH
63221: LD_INT 1
63223: NEG
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 3
63231: NEG
63232: PUSH
63233: LD_INT 2
63235: NEG
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: LD_INT 3
63243: NEG
63244: PUSH
63245: LD_INT 3
63247: NEG
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63284: LD_ADDR_VAR 0 45
63288: PUSH
63289: LD_INT 0
63291: PUSH
63292: LD_INT 0
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: LD_INT 0
63301: PUSH
63302: LD_INT 1
63304: NEG
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 1
63312: PUSH
63313: LD_INT 0
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: PUSH
63320: LD_INT 1
63322: PUSH
63323: LD_INT 1
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_INT 0
63332: PUSH
63333: LD_INT 1
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: LD_INT 1
63342: NEG
63343: PUSH
63344: LD_INT 0
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 1
63353: NEG
63354: PUSH
63355: LD_INT 1
63357: NEG
63358: PUSH
63359: EMPTY
63360: LIST
63361: LIST
63362: PUSH
63363: LD_INT 1
63365: NEG
63366: PUSH
63367: LD_INT 2
63369: NEG
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 0
63377: PUSH
63378: LD_INT 2
63380: NEG
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 1
63388: PUSH
63389: LD_INT 1
63391: NEG
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 2
63399: PUSH
63400: LD_INT 1
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 2
63409: PUSH
63410: LD_INT 2
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 1
63419: PUSH
63420: LD_INT 2
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 0
63429: PUSH
63430: LD_INT 2
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 1
63439: NEG
63440: PUSH
63441: LD_INT 1
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 2
63450: NEG
63451: PUSH
63452: LD_INT 1
63454: NEG
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: LD_INT 2
63462: NEG
63463: PUSH
63464: LD_INT 2
63466: NEG
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 2
63474: NEG
63475: PUSH
63476: LD_INT 3
63478: NEG
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: LD_INT 1
63486: NEG
63487: PUSH
63488: LD_INT 3
63490: NEG
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 0
63498: PUSH
63499: LD_INT 3
63501: NEG
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 1
63509: PUSH
63510: LD_INT 2
63512: NEG
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: LD_INT 3
63520: PUSH
63521: LD_INT 2
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: PUSH
63528: LD_INT 3
63530: PUSH
63531: LD_INT 3
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: LD_INT 2
63540: PUSH
63541: LD_INT 3
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: LD_INT 1
63550: PUSH
63551: LD_INT 3
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 0
63560: PUSH
63561: LD_INT 3
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: PUSH
63568: LD_INT 1
63570: NEG
63571: PUSH
63572: LD_INT 2
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: PUSH
63579: LD_INT 3
63581: NEG
63582: PUSH
63583: LD_INT 2
63585: NEG
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 3
63593: NEG
63594: PUSH
63595: LD_INT 3
63597: NEG
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63634: LD_ADDR_VAR 0 46
63638: PUSH
63639: LD_INT 0
63641: PUSH
63642: LD_INT 0
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: PUSH
63649: LD_INT 0
63651: PUSH
63652: LD_INT 1
63654: NEG
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_INT 1
63662: PUSH
63663: LD_INT 0
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 1
63672: PUSH
63673: LD_INT 1
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: LD_INT 0
63682: PUSH
63683: LD_INT 1
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 1
63692: NEG
63693: PUSH
63694: LD_INT 0
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 1
63703: NEG
63704: PUSH
63705: LD_INT 1
63707: NEG
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 1
63715: NEG
63716: PUSH
63717: LD_INT 2
63719: NEG
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: PUSH
63725: LD_INT 0
63727: PUSH
63728: LD_INT 2
63730: NEG
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: PUSH
63736: LD_INT 1
63738: PUSH
63739: LD_INT 1
63741: NEG
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 2
63749: PUSH
63750: LD_INT 0
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 2
63759: PUSH
63760: LD_INT 1
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 1
63769: PUSH
63770: LD_INT 2
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 0
63779: PUSH
63780: LD_INT 2
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 1
63789: NEG
63790: PUSH
63791: LD_INT 1
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 2
63800: NEG
63801: PUSH
63802: LD_INT 0
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: LD_INT 2
63811: NEG
63812: PUSH
63813: LD_INT 1
63815: NEG
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 1
63823: NEG
63824: PUSH
63825: LD_INT 3
63827: NEG
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: LD_INT 0
63835: PUSH
63836: LD_INT 3
63838: NEG
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: LD_INT 1
63846: PUSH
63847: LD_INT 2
63849: NEG
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 2
63857: PUSH
63858: LD_INT 1
63860: NEG
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: LD_INT 3
63868: PUSH
63869: LD_INT 0
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: LD_INT 3
63878: PUSH
63879: LD_INT 1
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 1
63888: PUSH
63889: LD_INT 3
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: LD_INT 0
63898: PUSH
63899: LD_INT 3
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 1
63908: NEG
63909: PUSH
63910: LD_INT 2
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 2
63919: NEG
63920: PUSH
63921: LD_INT 1
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 3
63930: NEG
63931: PUSH
63932: LD_INT 0
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: PUSH
63939: LD_INT 3
63941: NEG
63942: PUSH
63943: LD_INT 1
63945: NEG
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63982: LD_ADDR_VAR 0 47
63986: PUSH
63987: LD_INT 0
63989: PUSH
63990: LD_INT 0
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 0
63999: PUSH
64000: LD_INT 1
64002: NEG
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PUSH
64008: LD_INT 1
64010: PUSH
64011: LD_INT 0
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: PUSH
64018: LD_INT 1
64020: PUSH
64021: LD_INT 1
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PUSH
64028: LD_INT 0
64030: PUSH
64031: LD_INT 1
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: LD_INT 1
64040: NEG
64041: PUSH
64042: LD_INT 0
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PUSH
64049: LD_INT 1
64051: NEG
64052: PUSH
64053: LD_INT 1
64055: NEG
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PUSH
64061: LD_INT 1
64063: NEG
64064: PUSH
64065: LD_INT 2
64067: NEG
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 0
64075: PUSH
64076: LD_INT 2
64078: NEG
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: PUSH
64084: LD_INT 1
64086: PUSH
64087: LD_INT 1
64089: NEG
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 2
64097: NEG
64098: PUSH
64099: LD_INT 1
64101: NEG
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: PUSH
64107: LD_INT 2
64109: NEG
64110: PUSH
64111: LD_INT 2
64113: NEG
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: LIST
64123: LIST
64124: LIST
64125: LIST
64126: LIST
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: LIST
64132: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64133: LD_ADDR_VAR 0 48
64137: PUSH
64138: LD_INT 0
64140: PUSH
64141: LD_INT 0
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 0
64150: PUSH
64151: LD_INT 1
64153: NEG
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_INT 1
64161: PUSH
64162: LD_INT 0
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: LD_INT 1
64171: PUSH
64172: LD_INT 1
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: LD_INT 0
64181: PUSH
64182: LD_INT 1
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 1
64191: NEG
64192: PUSH
64193: LD_INT 0
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 1
64202: NEG
64203: PUSH
64204: LD_INT 1
64206: NEG
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: LD_INT 1
64214: NEG
64215: PUSH
64216: LD_INT 2
64218: NEG
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: PUSH
64224: LD_INT 0
64226: PUSH
64227: LD_INT 2
64229: NEG
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 1
64237: PUSH
64238: LD_INT 1
64240: NEG
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 2
64248: PUSH
64249: LD_INT 0
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: LD_INT 2
64258: PUSH
64259: LD_INT 1
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: LIST
64270: LIST
64271: LIST
64272: LIST
64273: LIST
64274: LIST
64275: LIST
64276: LIST
64277: LIST
64278: LIST
64279: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64280: LD_ADDR_VAR 0 49
64284: PUSH
64285: LD_INT 0
64287: PUSH
64288: LD_INT 0
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: PUSH
64295: LD_INT 0
64297: PUSH
64298: LD_INT 1
64300: NEG
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: PUSH
64306: LD_INT 1
64308: PUSH
64309: LD_INT 0
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: PUSH
64316: LD_INT 1
64318: PUSH
64319: LD_INT 1
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 0
64328: PUSH
64329: LD_INT 1
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 1
64338: NEG
64339: PUSH
64340: LD_INT 0
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: LD_INT 1
64349: NEG
64350: PUSH
64351: LD_INT 1
64353: NEG
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: LD_INT 1
64361: PUSH
64362: LD_INT 1
64364: NEG
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 2
64372: PUSH
64373: LD_INT 0
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PUSH
64380: LD_INT 2
64382: PUSH
64383: LD_INT 1
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PUSH
64390: LD_INT 2
64392: PUSH
64393: LD_INT 2
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: LD_INT 1
64402: PUSH
64403: LD_INT 2
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: LIST
64416: LIST
64417: LIST
64418: LIST
64419: LIST
64420: LIST
64421: LIST
64422: LIST
64423: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64424: LD_ADDR_VAR 0 50
64428: PUSH
64429: LD_INT 0
64431: PUSH
64432: LD_INT 0
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: LD_INT 0
64441: PUSH
64442: LD_INT 1
64444: NEG
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: PUSH
64450: LD_INT 1
64452: PUSH
64453: LD_INT 0
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: PUSH
64460: LD_INT 1
64462: PUSH
64463: LD_INT 1
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: LD_INT 0
64472: PUSH
64473: LD_INT 1
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: LD_INT 1
64482: NEG
64483: PUSH
64484: LD_INT 0
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: LD_INT 1
64493: NEG
64494: PUSH
64495: LD_INT 1
64497: NEG
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: LD_INT 2
64505: PUSH
64506: LD_INT 1
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: LD_INT 2
64515: PUSH
64516: LD_INT 2
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: PUSH
64523: LD_INT 1
64525: PUSH
64526: LD_INT 2
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 0
64535: PUSH
64536: LD_INT 2
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: PUSH
64543: LD_INT 1
64545: NEG
64546: PUSH
64547: LD_INT 1
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: LIST
64558: LIST
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: LIST
64564: LIST
64565: LIST
64566: LIST
64567: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64568: LD_ADDR_VAR 0 51
64572: PUSH
64573: LD_INT 0
64575: PUSH
64576: LD_INT 0
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 0
64585: PUSH
64586: LD_INT 1
64588: NEG
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: PUSH
64594: LD_INT 1
64596: PUSH
64597: LD_INT 0
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: PUSH
64604: LD_INT 1
64606: PUSH
64607: LD_INT 1
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PUSH
64614: LD_INT 0
64616: PUSH
64617: LD_INT 1
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: LD_INT 1
64626: NEG
64627: PUSH
64628: LD_INT 0
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 1
64637: NEG
64638: PUSH
64639: LD_INT 1
64641: NEG
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: LD_INT 1
64649: PUSH
64650: LD_INT 2
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: LD_INT 0
64659: PUSH
64660: LD_INT 2
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 1
64669: NEG
64670: PUSH
64671: LD_INT 1
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 2
64680: NEG
64681: PUSH
64682: LD_INT 0
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 2
64691: NEG
64692: PUSH
64693: LD_INT 1
64695: NEG
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64715: LD_ADDR_VAR 0 52
64719: PUSH
64720: LD_INT 0
64722: PUSH
64723: LD_INT 0
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: PUSH
64730: LD_INT 0
64732: PUSH
64733: LD_INT 1
64735: NEG
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: LD_INT 1
64743: PUSH
64744: LD_INT 0
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: PUSH
64751: LD_INT 1
64753: PUSH
64754: LD_INT 1
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PUSH
64761: LD_INT 0
64763: PUSH
64764: LD_INT 1
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: PUSH
64771: LD_INT 1
64773: NEG
64774: PUSH
64775: LD_INT 0
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 1
64784: NEG
64785: PUSH
64786: LD_INT 1
64788: NEG
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 1
64796: NEG
64797: PUSH
64798: LD_INT 2
64800: NEG
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: LD_INT 1
64808: NEG
64809: PUSH
64810: LD_INT 1
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: PUSH
64817: LD_INT 2
64819: NEG
64820: PUSH
64821: LD_INT 0
64823: PUSH
64824: EMPTY
64825: LIST
64826: LIST
64827: PUSH
64828: LD_INT 2
64830: NEG
64831: PUSH
64832: LD_INT 1
64834: NEG
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: PUSH
64840: LD_INT 2
64842: NEG
64843: PUSH
64844: LD_INT 2
64846: NEG
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: LIST
64856: LIST
64857: LIST
64858: LIST
64859: LIST
64860: LIST
64861: LIST
64862: LIST
64863: LIST
64864: LIST
64865: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64866: LD_ADDR_VAR 0 53
64870: PUSH
64871: LD_INT 0
64873: PUSH
64874: LD_INT 0
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: LD_INT 0
64883: PUSH
64884: LD_INT 1
64886: NEG
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: PUSH
64892: LD_INT 1
64894: PUSH
64895: LD_INT 0
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: PUSH
64902: LD_INT 1
64904: PUSH
64905: LD_INT 1
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: PUSH
64912: LD_INT 0
64914: PUSH
64915: LD_INT 1
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PUSH
64922: LD_INT 1
64924: NEG
64925: PUSH
64926: LD_INT 0
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: PUSH
64933: LD_INT 1
64935: NEG
64936: PUSH
64937: LD_INT 1
64939: NEG
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: LD_INT 1
64947: NEG
64948: PUSH
64949: LD_INT 2
64951: NEG
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: PUSH
64957: LD_INT 0
64959: PUSH
64960: LD_INT 2
64962: NEG
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: PUSH
64968: LD_INT 1
64970: PUSH
64971: LD_INT 1
64973: NEG
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: LD_INT 2
64981: PUSH
64982: LD_INT 0
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PUSH
64989: LD_INT 2
64991: PUSH
64992: LD_INT 1
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: PUSH
64999: LD_INT 2
65001: PUSH
65002: LD_INT 2
65004: PUSH
65005: EMPTY
65006: LIST
65007: LIST
65008: PUSH
65009: LD_INT 1
65011: PUSH
65012: LD_INT 2
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: LD_INT 0
65021: PUSH
65022: LD_INT 2
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 1
65031: NEG
65032: PUSH
65033: LD_INT 1
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 2
65042: NEG
65043: PUSH
65044: LD_INT 0
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PUSH
65051: LD_INT 2
65053: NEG
65054: PUSH
65055: LD_INT 1
65057: NEG
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: PUSH
65063: LD_INT 2
65065: NEG
65066: PUSH
65067: LD_INT 2
65069: NEG
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: LIST
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: LIST
65084: LIST
65085: LIST
65086: LIST
65087: LIST
65088: LIST
65089: LIST
65090: LIST
65091: LIST
65092: LIST
65093: LIST
65094: LIST
65095: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65096: LD_ADDR_VAR 0 54
65100: PUSH
65101: LD_INT 0
65103: PUSH
65104: LD_INT 0
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: LD_INT 0
65113: PUSH
65114: LD_INT 1
65116: NEG
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 1
65124: PUSH
65125: LD_INT 0
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: LD_INT 1
65134: PUSH
65135: LD_INT 1
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: PUSH
65142: LD_INT 0
65144: PUSH
65145: LD_INT 1
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: LD_INT 1
65154: NEG
65155: PUSH
65156: LD_INT 0
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 1
65165: NEG
65166: PUSH
65167: LD_INT 1
65169: NEG
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: PUSH
65175: LD_INT 1
65177: NEG
65178: PUSH
65179: LD_INT 2
65181: NEG
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: PUSH
65187: LD_INT 0
65189: PUSH
65190: LD_INT 2
65192: NEG
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: PUSH
65198: LD_INT 1
65200: PUSH
65201: LD_INT 1
65203: NEG
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: PUSH
65209: LD_INT 2
65211: PUSH
65212: LD_INT 0
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PUSH
65219: LD_INT 2
65221: PUSH
65222: LD_INT 1
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: LD_INT 2
65231: PUSH
65232: LD_INT 2
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 1
65241: PUSH
65242: LD_INT 2
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: LD_INT 0
65251: PUSH
65252: LD_INT 2
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 1
65261: NEG
65262: PUSH
65263: LD_INT 1
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: LD_INT 2
65272: NEG
65273: PUSH
65274: LD_INT 0
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: PUSH
65281: LD_INT 2
65283: NEG
65284: PUSH
65285: LD_INT 1
65287: NEG
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: LD_INT 2
65295: NEG
65296: PUSH
65297: LD_INT 2
65299: NEG
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: LIST
65309: LIST
65310: LIST
65311: LIST
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: LIST
65317: LIST
65318: LIST
65319: LIST
65320: LIST
65321: LIST
65322: LIST
65323: LIST
65324: LIST
65325: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65326: LD_ADDR_VAR 0 55
65330: PUSH
65331: LD_INT 0
65333: PUSH
65334: LD_INT 0
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: PUSH
65341: LD_INT 0
65343: PUSH
65344: LD_INT 1
65346: NEG
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PUSH
65352: LD_INT 1
65354: PUSH
65355: LD_INT 0
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: PUSH
65362: LD_INT 1
65364: PUSH
65365: LD_INT 1
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: PUSH
65372: LD_INT 0
65374: PUSH
65375: LD_INT 1
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: PUSH
65382: LD_INT 1
65384: NEG
65385: PUSH
65386: LD_INT 0
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: PUSH
65393: LD_INT 1
65395: NEG
65396: PUSH
65397: LD_INT 1
65399: NEG
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: PUSH
65405: LD_INT 1
65407: NEG
65408: PUSH
65409: LD_INT 2
65411: NEG
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: PUSH
65417: LD_INT 0
65419: PUSH
65420: LD_INT 2
65422: NEG
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: PUSH
65428: LD_INT 1
65430: PUSH
65431: LD_INT 1
65433: NEG
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: LD_INT 2
65441: PUSH
65442: LD_INT 0
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: PUSH
65449: LD_INT 2
65451: PUSH
65452: LD_INT 1
65454: PUSH
65455: EMPTY
65456: LIST
65457: LIST
65458: PUSH
65459: LD_INT 2
65461: PUSH
65462: LD_INT 2
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: PUSH
65469: LD_INT 1
65471: PUSH
65472: LD_INT 2
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: PUSH
65479: LD_INT 0
65481: PUSH
65482: LD_INT 2
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: PUSH
65489: LD_INT 1
65491: NEG
65492: PUSH
65493: LD_INT 1
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: PUSH
65500: LD_INT 2
65502: NEG
65503: PUSH
65504: LD_INT 0
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PUSH
65511: LD_INT 2
65513: NEG
65514: PUSH
65515: LD_INT 1
65517: NEG
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: PUSH
65523: LD_INT 2
65525: NEG
65526: PUSH
65527: LD_INT 2
65529: NEG
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65556: LD_ADDR_VAR 0 56
65560: PUSH
65561: LD_INT 0
65563: PUSH
65564: LD_INT 0
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: PUSH
65571: LD_INT 0
65573: PUSH
65574: LD_INT 1
65576: NEG
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PUSH
65582: LD_INT 1
65584: PUSH
65585: LD_INT 0
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: LD_INT 1
65594: PUSH
65595: LD_INT 1
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: PUSH
65602: LD_INT 0
65604: PUSH
65605: LD_INT 1
65607: PUSH
65608: EMPTY
65609: LIST
65610: LIST
65611: PUSH
65612: LD_INT 1
65614: NEG
65615: PUSH
65616: LD_INT 0
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: LD_INT 1
65625: NEG
65626: PUSH
65627: LD_INT 1
65629: NEG
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 1
65637: NEG
65638: PUSH
65639: LD_INT 2
65641: NEG
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: PUSH
65647: LD_INT 0
65649: PUSH
65650: LD_INT 2
65652: NEG
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 1
65660: PUSH
65661: LD_INT 1
65663: NEG
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: LD_INT 2
65671: PUSH
65672: LD_INT 0
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: PUSH
65679: LD_INT 2
65681: PUSH
65682: LD_INT 1
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: PUSH
65689: LD_INT 2
65691: PUSH
65692: LD_INT 2
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: PUSH
65699: LD_INT 1
65701: PUSH
65702: LD_INT 2
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: PUSH
65709: LD_INT 0
65711: PUSH
65712: LD_INT 2
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: PUSH
65719: LD_INT 1
65721: NEG
65722: PUSH
65723: LD_INT 1
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: PUSH
65730: LD_INT 2
65732: NEG
65733: PUSH
65734: LD_INT 0
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: PUSH
65741: LD_INT 2
65743: NEG
65744: PUSH
65745: LD_INT 1
65747: NEG
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: PUSH
65753: LD_INT 2
65755: NEG
65756: PUSH
65757: LD_INT 2
65759: NEG
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: LIST
65769: LIST
65770: LIST
65771: LIST
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: LIST
65785: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65786: LD_ADDR_VAR 0 57
65790: PUSH
65791: LD_INT 0
65793: PUSH
65794: LD_INT 0
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: PUSH
65801: LD_INT 0
65803: PUSH
65804: LD_INT 1
65806: NEG
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: PUSH
65812: LD_INT 1
65814: PUSH
65815: LD_INT 0
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: PUSH
65822: LD_INT 1
65824: PUSH
65825: LD_INT 1
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: PUSH
65832: LD_INT 0
65834: PUSH
65835: LD_INT 1
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: LD_INT 1
65844: NEG
65845: PUSH
65846: LD_INT 0
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: PUSH
65853: LD_INT 1
65855: NEG
65856: PUSH
65857: LD_INT 1
65859: NEG
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PUSH
65865: LD_INT 1
65867: NEG
65868: PUSH
65869: LD_INT 2
65871: NEG
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: PUSH
65877: LD_INT 0
65879: PUSH
65880: LD_INT 2
65882: NEG
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: PUSH
65888: LD_INT 1
65890: PUSH
65891: LD_INT 1
65893: NEG
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: LD_INT 2
65901: PUSH
65902: LD_INT 0
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: PUSH
65909: LD_INT 2
65911: PUSH
65912: LD_INT 1
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: PUSH
65919: LD_INT 2
65921: PUSH
65922: LD_INT 2
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: PUSH
65929: LD_INT 1
65931: PUSH
65932: LD_INT 2
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: LD_INT 0
65941: PUSH
65942: LD_INT 2
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: PUSH
65949: LD_INT 1
65951: NEG
65952: PUSH
65953: LD_INT 1
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: LD_INT 2
65962: NEG
65963: PUSH
65964: LD_INT 0
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: PUSH
65971: LD_INT 2
65973: NEG
65974: PUSH
65975: LD_INT 1
65977: NEG
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: LD_INT 2
65985: NEG
65986: PUSH
65987: LD_INT 2
65989: NEG
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: LIST
65999: LIST
66000: LIST
66001: LIST
66002: LIST
66003: LIST
66004: LIST
66005: LIST
66006: LIST
66007: LIST
66008: LIST
66009: LIST
66010: LIST
66011: LIST
66012: LIST
66013: LIST
66014: LIST
66015: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66016: LD_ADDR_VAR 0 58
66020: PUSH
66021: LD_INT 0
66023: PUSH
66024: LD_INT 0
66026: PUSH
66027: EMPTY
66028: LIST
66029: LIST
66030: PUSH
66031: LD_INT 0
66033: PUSH
66034: LD_INT 1
66036: NEG
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: PUSH
66042: LD_INT 1
66044: PUSH
66045: LD_INT 0
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PUSH
66052: LD_INT 1
66054: PUSH
66055: LD_INT 1
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: PUSH
66062: LD_INT 0
66064: PUSH
66065: LD_INT 1
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: LD_INT 1
66074: NEG
66075: PUSH
66076: LD_INT 0
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: PUSH
66083: LD_INT 1
66085: NEG
66086: PUSH
66087: LD_INT 1
66089: NEG
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: PUSH
66095: LD_INT 1
66097: NEG
66098: PUSH
66099: LD_INT 2
66101: NEG
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: PUSH
66107: LD_INT 0
66109: PUSH
66110: LD_INT 2
66112: NEG
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: PUSH
66118: LD_INT 1
66120: PUSH
66121: LD_INT 1
66123: NEG
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: PUSH
66129: LD_INT 2
66131: PUSH
66132: LD_INT 0
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_INT 2
66141: PUSH
66142: LD_INT 1
66144: PUSH
66145: EMPTY
66146: LIST
66147: LIST
66148: PUSH
66149: LD_INT 2
66151: PUSH
66152: LD_INT 2
66154: PUSH
66155: EMPTY
66156: LIST
66157: LIST
66158: PUSH
66159: LD_INT 1
66161: PUSH
66162: LD_INT 2
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: PUSH
66169: LD_INT 0
66171: PUSH
66172: LD_INT 2
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: LD_INT 1
66181: NEG
66182: PUSH
66183: LD_INT 1
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: PUSH
66190: LD_INT 2
66192: NEG
66193: PUSH
66194: LD_INT 0
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: PUSH
66201: LD_INT 2
66203: NEG
66204: PUSH
66205: LD_INT 1
66207: NEG
66208: PUSH
66209: EMPTY
66210: LIST
66211: LIST
66212: PUSH
66213: LD_INT 2
66215: NEG
66216: PUSH
66217: LD_INT 2
66219: NEG
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: LIST
66229: LIST
66230: LIST
66231: LIST
66232: LIST
66233: LIST
66234: LIST
66235: LIST
66236: LIST
66237: LIST
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: LIST
66243: LIST
66244: LIST
66245: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66246: LD_ADDR_VAR 0 59
66250: PUSH
66251: LD_INT 0
66253: PUSH
66254: LD_INT 0
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: PUSH
66261: LD_INT 0
66263: PUSH
66264: LD_INT 1
66266: NEG
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: PUSH
66272: LD_INT 1
66274: PUSH
66275: LD_INT 0
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: PUSH
66282: LD_INT 1
66284: PUSH
66285: LD_INT 1
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: PUSH
66292: LD_INT 0
66294: PUSH
66295: LD_INT 1
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: PUSH
66302: LD_INT 1
66304: NEG
66305: PUSH
66306: LD_INT 0
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: PUSH
66313: LD_INT 1
66315: NEG
66316: PUSH
66317: LD_INT 1
66319: NEG
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: LIST
66332: LIST
66333: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66334: LD_ADDR_VAR 0 60
66338: PUSH
66339: LD_INT 0
66341: PUSH
66342: LD_INT 0
66344: PUSH
66345: EMPTY
66346: LIST
66347: LIST
66348: PUSH
66349: LD_INT 0
66351: PUSH
66352: LD_INT 1
66354: NEG
66355: PUSH
66356: EMPTY
66357: LIST
66358: LIST
66359: PUSH
66360: LD_INT 1
66362: PUSH
66363: LD_INT 0
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: PUSH
66370: LD_INT 1
66372: PUSH
66373: LD_INT 1
66375: PUSH
66376: EMPTY
66377: LIST
66378: LIST
66379: PUSH
66380: LD_INT 0
66382: PUSH
66383: LD_INT 1
66385: PUSH
66386: EMPTY
66387: LIST
66388: LIST
66389: PUSH
66390: LD_INT 1
66392: NEG
66393: PUSH
66394: LD_INT 0
66396: PUSH
66397: EMPTY
66398: LIST
66399: LIST
66400: PUSH
66401: LD_INT 1
66403: NEG
66404: PUSH
66405: LD_INT 1
66407: NEG
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: LIST
66417: LIST
66418: LIST
66419: LIST
66420: LIST
66421: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66422: LD_ADDR_VAR 0 61
66426: PUSH
66427: LD_INT 0
66429: PUSH
66430: LD_INT 0
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: PUSH
66437: LD_INT 0
66439: PUSH
66440: LD_INT 1
66442: NEG
66443: PUSH
66444: EMPTY
66445: LIST
66446: LIST
66447: PUSH
66448: LD_INT 1
66450: PUSH
66451: LD_INT 0
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: PUSH
66458: LD_INT 1
66460: PUSH
66461: LD_INT 1
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: PUSH
66468: LD_INT 0
66470: PUSH
66471: LD_INT 1
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: PUSH
66478: LD_INT 1
66480: NEG
66481: PUSH
66482: LD_INT 0
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: LD_INT 1
66491: NEG
66492: PUSH
66493: LD_INT 1
66495: NEG
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: LIST
66505: LIST
66506: LIST
66507: LIST
66508: LIST
66509: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66510: LD_ADDR_VAR 0 62
66514: PUSH
66515: LD_INT 0
66517: PUSH
66518: LD_INT 0
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: PUSH
66525: LD_INT 0
66527: PUSH
66528: LD_INT 1
66530: NEG
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: PUSH
66536: LD_INT 1
66538: PUSH
66539: LD_INT 0
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: PUSH
66546: LD_INT 1
66548: PUSH
66549: LD_INT 1
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: PUSH
66556: LD_INT 0
66558: PUSH
66559: LD_INT 1
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: PUSH
66566: LD_INT 1
66568: NEG
66569: PUSH
66570: LD_INT 0
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: PUSH
66577: LD_INT 1
66579: NEG
66580: PUSH
66581: LD_INT 1
66583: NEG
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: LIST
66593: LIST
66594: LIST
66595: LIST
66596: LIST
66597: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66598: LD_ADDR_VAR 0 63
66602: PUSH
66603: LD_INT 0
66605: PUSH
66606: LD_INT 0
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: PUSH
66613: LD_INT 0
66615: PUSH
66616: LD_INT 1
66618: NEG
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: LD_INT 1
66626: PUSH
66627: LD_INT 0
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: LD_INT 1
66636: PUSH
66637: LD_INT 1
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: PUSH
66644: LD_INT 0
66646: PUSH
66647: LD_INT 1
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: LD_INT 1
66656: NEG
66657: PUSH
66658: LD_INT 0
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: PUSH
66665: LD_INT 1
66667: NEG
66668: PUSH
66669: LD_INT 1
66671: NEG
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: EMPTY
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: LIST
66683: LIST
66684: LIST
66685: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66686: LD_ADDR_VAR 0 64
66690: PUSH
66691: LD_INT 0
66693: PUSH
66694: LD_INT 0
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: LD_INT 0
66703: PUSH
66704: LD_INT 1
66706: NEG
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: PUSH
66712: LD_INT 1
66714: PUSH
66715: LD_INT 0
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PUSH
66722: LD_INT 1
66724: PUSH
66725: LD_INT 1
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: PUSH
66732: LD_INT 0
66734: PUSH
66735: LD_INT 1
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: PUSH
66742: LD_INT 1
66744: NEG
66745: PUSH
66746: LD_INT 0
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: LD_INT 1
66755: NEG
66756: PUSH
66757: LD_INT 1
66759: NEG
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: LIST
66769: LIST
66770: LIST
66771: LIST
66772: LIST
66773: ST_TO_ADDR
// end ; 1 :
66774: GO 72671
66776: LD_INT 1
66778: DOUBLE
66779: EQUAL
66780: IFTRUE 66784
66782: GO 69407
66784: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66785: LD_ADDR_VAR 0 11
66789: PUSH
66790: LD_INT 1
66792: NEG
66793: PUSH
66794: LD_INT 3
66796: NEG
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: PUSH
66802: LD_INT 0
66804: PUSH
66805: LD_INT 3
66807: NEG
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: LD_INT 1
66815: PUSH
66816: LD_INT 2
66818: NEG
66819: PUSH
66820: EMPTY
66821: LIST
66822: LIST
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: LIST
66828: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66829: LD_ADDR_VAR 0 12
66833: PUSH
66834: LD_INT 2
66836: PUSH
66837: LD_INT 1
66839: NEG
66840: PUSH
66841: EMPTY
66842: LIST
66843: LIST
66844: PUSH
66845: LD_INT 3
66847: PUSH
66848: LD_INT 0
66850: PUSH
66851: EMPTY
66852: LIST
66853: LIST
66854: PUSH
66855: LD_INT 3
66857: PUSH
66858: LD_INT 1
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: LIST
66869: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66870: LD_ADDR_VAR 0 13
66874: PUSH
66875: LD_INT 3
66877: PUSH
66878: LD_INT 2
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: PUSH
66885: LD_INT 3
66887: PUSH
66888: LD_INT 3
66890: PUSH
66891: EMPTY
66892: LIST
66893: LIST
66894: PUSH
66895: LD_INT 2
66897: PUSH
66898: LD_INT 3
66900: PUSH
66901: EMPTY
66902: LIST
66903: LIST
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: LIST
66909: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66910: LD_ADDR_VAR 0 14
66914: PUSH
66915: LD_INT 1
66917: PUSH
66918: LD_INT 3
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: PUSH
66925: LD_INT 0
66927: PUSH
66928: LD_INT 3
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: PUSH
66935: LD_INT 1
66937: NEG
66938: PUSH
66939: LD_INT 2
66941: PUSH
66942: EMPTY
66943: LIST
66944: LIST
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: LIST
66950: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66951: LD_ADDR_VAR 0 15
66955: PUSH
66956: LD_INT 2
66958: NEG
66959: PUSH
66960: LD_INT 1
66962: PUSH
66963: EMPTY
66964: LIST
66965: LIST
66966: PUSH
66967: LD_INT 3
66969: NEG
66970: PUSH
66971: LD_INT 0
66973: PUSH
66974: EMPTY
66975: LIST
66976: LIST
66977: PUSH
66978: LD_INT 3
66980: NEG
66981: PUSH
66982: LD_INT 1
66984: NEG
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: LIST
66994: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66995: LD_ADDR_VAR 0 16
66999: PUSH
67000: LD_INT 2
67002: NEG
67003: PUSH
67004: LD_INT 3
67006: NEG
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: LD_INT 3
67014: NEG
67015: PUSH
67016: LD_INT 2
67018: NEG
67019: PUSH
67020: EMPTY
67021: LIST
67022: LIST
67023: PUSH
67024: LD_INT 3
67026: NEG
67027: PUSH
67028: LD_INT 3
67030: NEG
67031: PUSH
67032: EMPTY
67033: LIST
67034: LIST
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: LIST
67040: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67041: LD_ADDR_VAR 0 17
67045: PUSH
67046: LD_INT 1
67048: NEG
67049: PUSH
67050: LD_INT 3
67052: NEG
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: LD_INT 0
67060: PUSH
67061: LD_INT 3
67063: NEG
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: PUSH
67069: LD_INT 1
67071: PUSH
67072: LD_INT 2
67074: NEG
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: LIST
67084: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67085: LD_ADDR_VAR 0 18
67089: PUSH
67090: LD_INT 2
67092: PUSH
67093: LD_INT 1
67095: NEG
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: LD_INT 3
67103: PUSH
67104: LD_INT 0
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: PUSH
67111: LD_INT 3
67113: PUSH
67114: LD_INT 1
67116: PUSH
67117: EMPTY
67118: LIST
67119: LIST
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: LIST
67125: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67126: LD_ADDR_VAR 0 19
67130: PUSH
67131: LD_INT 3
67133: PUSH
67134: LD_INT 2
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: PUSH
67141: LD_INT 3
67143: PUSH
67144: LD_INT 3
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: PUSH
67151: LD_INT 2
67153: PUSH
67154: LD_INT 3
67156: PUSH
67157: EMPTY
67158: LIST
67159: LIST
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: LIST
67165: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67166: LD_ADDR_VAR 0 20
67170: PUSH
67171: LD_INT 1
67173: PUSH
67174: LD_INT 3
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: LD_INT 0
67183: PUSH
67184: LD_INT 3
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: PUSH
67191: LD_INT 1
67193: NEG
67194: PUSH
67195: LD_INT 2
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: LIST
67206: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67207: LD_ADDR_VAR 0 21
67211: PUSH
67212: LD_INT 2
67214: NEG
67215: PUSH
67216: LD_INT 1
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: PUSH
67223: LD_INT 3
67225: NEG
67226: PUSH
67227: LD_INT 0
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PUSH
67234: LD_INT 3
67236: NEG
67237: PUSH
67238: LD_INT 1
67240: NEG
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: LIST
67250: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67251: LD_ADDR_VAR 0 22
67255: PUSH
67256: LD_INT 2
67258: NEG
67259: PUSH
67260: LD_INT 3
67262: NEG
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: PUSH
67268: LD_INT 3
67270: NEG
67271: PUSH
67272: LD_INT 2
67274: NEG
67275: PUSH
67276: EMPTY
67277: LIST
67278: LIST
67279: PUSH
67280: LD_INT 3
67282: NEG
67283: PUSH
67284: LD_INT 3
67286: NEG
67287: PUSH
67288: EMPTY
67289: LIST
67290: LIST
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: LIST
67296: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67297: LD_ADDR_VAR 0 23
67301: PUSH
67302: LD_INT 0
67304: PUSH
67305: LD_INT 3
67307: NEG
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: PUSH
67313: LD_INT 1
67315: NEG
67316: PUSH
67317: LD_INT 4
67319: NEG
67320: PUSH
67321: EMPTY
67322: LIST
67323: LIST
67324: PUSH
67325: LD_INT 1
67327: PUSH
67328: LD_INT 3
67330: NEG
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: LIST
67340: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67341: LD_ADDR_VAR 0 24
67345: PUSH
67346: LD_INT 3
67348: PUSH
67349: LD_INT 0
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: PUSH
67356: LD_INT 3
67358: PUSH
67359: LD_INT 1
67361: NEG
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: PUSH
67367: LD_INT 4
67369: PUSH
67370: LD_INT 1
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: PUSH
67377: EMPTY
67378: LIST
67379: LIST
67380: LIST
67381: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67382: LD_ADDR_VAR 0 25
67386: PUSH
67387: LD_INT 3
67389: PUSH
67390: LD_INT 3
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PUSH
67397: LD_INT 4
67399: PUSH
67400: LD_INT 3
67402: PUSH
67403: EMPTY
67404: LIST
67405: LIST
67406: PUSH
67407: LD_INT 3
67409: PUSH
67410: LD_INT 4
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: LIST
67421: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
67422: LD_ADDR_VAR 0 26
67426: PUSH
67427: LD_INT 0
67429: PUSH
67430: LD_INT 3
67432: PUSH
67433: EMPTY
67434: LIST
67435: LIST
67436: PUSH
67437: LD_INT 1
67439: PUSH
67440: LD_INT 4
67442: PUSH
67443: EMPTY
67444: LIST
67445: LIST
67446: PUSH
67447: LD_INT 1
67449: NEG
67450: PUSH
67451: LD_INT 3
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: LIST
67462: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67463: LD_ADDR_VAR 0 27
67467: PUSH
67468: LD_INT 3
67470: NEG
67471: PUSH
67472: LD_INT 0
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: PUSH
67479: LD_INT 3
67481: NEG
67482: PUSH
67483: LD_INT 1
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: PUSH
67490: LD_INT 4
67492: NEG
67493: PUSH
67494: LD_INT 1
67496: NEG
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: LIST
67506: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
67507: LD_ADDR_VAR 0 28
67511: PUSH
67512: LD_INT 3
67514: NEG
67515: PUSH
67516: LD_INT 3
67518: NEG
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: PUSH
67524: LD_INT 3
67526: NEG
67527: PUSH
67528: LD_INT 4
67530: NEG
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: PUSH
67536: LD_INT 4
67538: NEG
67539: PUSH
67540: LD_INT 3
67542: NEG
67543: PUSH
67544: EMPTY
67545: LIST
67546: LIST
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: LIST
67552: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67553: LD_ADDR_VAR 0 29
67557: PUSH
67558: LD_INT 1
67560: NEG
67561: PUSH
67562: LD_INT 3
67564: NEG
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: PUSH
67570: LD_INT 0
67572: PUSH
67573: LD_INT 3
67575: NEG
67576: PUSH
67577: EMPTY
67578: LIST
67579: LIST
67580: PUSH
67581: LD_INT 1
67583: PUSH
67584: LD_INT 2
67586: NEG
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: PUSH
67592: LD_INT 1
67594: NEG
67595: PUSH
67596: LD_INT 4
67598: NEG
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: PUSH
67604: LD_INT 0
67606: PUSH
67607: LD_INT 4
67609: NEG
67610: PUSH
67611: EMPTY
67612: LIST
67613: LIST
67614: PUSH
67615: LD_INT 1
67617: PUSH
67618: LD_INT 3
67620: NEG
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: PUSH
67626: LD_INT 1
67628: NEG
67629: PUSH
67630: LD_INT 5
67632: NEG
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: PUSH
67638: LD_INT 0
67640: PUSH
67641: LD_INT 5
67643: NEG
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: PUSH
67649: LD_INT 1
67651: PUSH
67652: LD_INT 4
67654: NEG
67655: PUSH
67656: EMPTY
67657: LIST
67658: LIST
67659: PUSH
67660: LD_INT 1
67662: NEG
67663: PUSH
67664: LD_INT 6
67666: NEG
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: PUSH
67672: LD_INT 0
67674: PUSH
67675: LD_INT 6
67677: NEG
67678: PUSH
67679: EMPTY
67680: LIST
67681: LIST
67682: PUSH
67683: LD_INT 1
67685: PUSH
67686: LD_INT 5
67688: NEG
67689: PUSH
67690: EMPTY
67691: LIST
67692: LIST
67693: PUSH
67694: EMPTY
67695: LIST
67696: LIST
67697: LIST
67698: LIST
67699: LIST
67700: LIST
67701: LIST
67702: LIST
67703: LIST
67704: LIST
67705: LIST
67706: LIST
67707: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
67708: LD_ADDR_VAR 0 30
67712: PUSH
67713: LD_INT 2
67715: PUSH
67716: LD_INT 1
67718: NEG
67719: PUSH
67720: EMPTY
67721: LIST
67722: LIST
67723: PUSH
67724: LD_INT 3
67726: PUSH
67727: LD_INT 0
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: PUSH
67734: LD_INT 3
67736: PUSH
67737: LD_INT 1
67739: PUSH
67740: EMPTY
67741: LIST
67742: LIST
67743: PUSH
67744: LD_INT 3
67746: PUSH
67747: LD_INT 1
67749: NEG
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: PUSH
67755: LD_INT 4
67757: PUSH
67758: LD_INT 0
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: PUSH
67765: LD_INT 4
67767: PUSH
67768: LD_INT 1
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: PUSH
67775: LD_INT 4
67777: PUSH
67778: LD_INT 1
67780: NEG
67781: PUSH
67782: EMPTY
67783: LIST
67784: LIST
67785: PUSH
67786: LD_INT 5
67788: PUSH
67789: LD_INT 0
67791: PUSH
67792: EMPTY
67793: LIST
67794: LIST
67795: PUSH
67796: LD_INT 5
67798: PUSH
67799: LD_INT 1
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: PUSH
67806: LD_INT 5
67808: PUSH
67809: LD_INT 1
67811: NEG
67812: PUSH
67813: EMPTY
67814: LIST
67815: LIST
67816: PUSH
67817: LD_INT 6
67819: PUSH
67820: LD_INT 0
67822: PUSH
67823: EMPTY
67824: LIST
67825: LIST
67826: PUSH
67827: LD_INT 6
67829: PUSH
67830: LD_INT 1
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: PUSH
67837: EMPTY
67838: LIST
67839: LIST
67840: LIST
67841: LIST
67842: LIST
67843: LIST
67844: LIST
67845: LIST
67846: LIST
67847: LIST
67848: LIST
67849: LIST
67850: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
67851: LD_ADDR_VAR 0 31
67855: PUSH
67856: LD_INT 3
67858: PUSH
67859: LD_INT 2
67861: PUSH
67862: EMPTY
67863: LIST
67864: LIST
67865: PUSH
67866: LD_INT 3
67868: PUSH
67869: LD_INT 3
67871: PUSH
67872: EMPTY
67873: LIST
67874: LIST
67875: PUSH
67876: LD_INT 2
67878: PUSH
67879: LD_INT 3
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: PUSH
67886: LD_INT 4
67888: PUSH
67889: LD_INT 3
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: PUSH
67896: LD_INT 4
67898: PUSH
67899: LD_INT 4
67901: PUSH
67902: EMPTY
67903: LIST
67904: LIST
67905: PUSH
67906: LD_INT 3
67908: PUSH
67909: LD_INT 4
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: PUSH
67916: LD_INT 5
67918: PUSH
67919: LD_INT 4
67921: PUSH
67922: EMPTY
67923: LIST
67924: LIST
67925: PUSH
67926: LD_INT 5
67928: PUSH
67929: LD_INT 5
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: PUSH
67936: LD_INT 4
67938: PUSH
67939: LD_INT 5
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: PUSH
67946: LD_INT 6
67948: PUSH
67949: LD_INT 5
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: PUSH
67956: LD_INT 6
67958: PUSH
67959: LD_INT 6
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: LD_INT 5
67968: PUSH
67969: LD_INT 6
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: LIST
67980: LIST
67981: LIST
67982: LIST
67983: LIST
67984: LIST
67985: LIST
67986: LIST
67987: LIST
67988: LIST
67989: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
67990: LD_ADDR_VAR 0 32
67994: PUSH
67995: LD_INT 1
67997: PUSH
67998: LD_INT 3
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: PUSH
68005: LD_INT 0
68007: PUSH
68008: LD_INT 3
68010: PUSH
68011: EMPTY
68012: LIST
68013: LIST
68014: PUSH
68015: LD_INT 1
68017: NEG
68018: PUSH
68019: LD_INT 2
68021: PUSH
68022: EMPTY
68023: LIST
68024: LIST
68025: PUSH
68026: LD_INT 1
68028: PUSH
68029: LD_INT 4
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: PUSH
68036: LD_INT 0
68038: PUSH
68039: LD_INT 4
68041: PUSH
68042: EMPTY
68043: LIST
68044: LIST
68045: PUSH
68046: LD_INT 1
68048: NEG
68049: PUSH
68050: LD_INT 3
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: PUSH
68057: LD_INT 1
68059: PUSH
68060: LD_INT 5
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: LD_INT 0
68069: PUSH
68070: LD_INT 5
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: PUSH
68077: LD_INT 1
68079: NEG
68080: PUSH
68081: LD_INT 4
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: PUSH
68088: LD_INT 1
68090: PUSH
68091: LD_INT 6
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: LD_INT 0
68100: PUSH
68101: LD_INT 6
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: PUSH
68108: LD_INT 1
68110: NEG
68111: PUSH
68112: LD_INT 5
68114: PUSH
68115: EMPTY
68116: LIST
68117: LIST
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: LIST
68123: LIST
68124: LIST
68125: LIST
68126: LIST
68127: LIST
68128: LIST
68129: LIST
68130: LIST
68131: LIST
68132: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68133: LD_ADDR_VAR 0 33
68137: PUSH
68138: LD_INT 2
68140: NEG
68141: PUSH
68142: LD_INT 1
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: PUSH
68149: LD_INT 3
68151: NEG
68152: PUSH
68153: LD_INT 0
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: PUSH
68160: LD_INT 3
68162: NEG
68163: PUSH
68164: LD_INT 1
68166: NEG
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: PUSH
68172: LD_INT 3
68174: NEG
68175: PUSH
68176: LD_INT 1
68178: PUSH
68179: EMPTY
68180: LIST
68181: LIST
68182: PUSH
68183: LD_INT 4
68185: NEG
68186: PUSH
68187: LD_INT 0
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: PUSH
68194: LD_INT 4
68196: NEG
68197: PUSH
68198: LD_INT 1
68200: NEG
68201: PUSH
68202: EMPTY
68203: LIST
68204: LIST
68205: PUSH
68206: LD_INT 4
68208: NEG
68209: PUSH
68210: LD_INT 1
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: PUSH
68217: LD_INT 5
68219: NEG
68220: PUSH
68221: LD_INT 0
68223: PUSH
68224: EMPTY
68225: LIST
68226: LIST
68227: PUSH
68228: LD_INT 5
68230: NEG
68231: PUSH
68232: LD_INT 1
68234: NEG
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: LD_INT 5
68242: NEG
68243: PUSH
68244: LD_INT 1
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: PUSH
68251: LD_INT 6
68253: NEG
68254: PUSH
68255: LD_INT 0
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: PUSH
68262: LD_INT 6
68264: NEG
68265: PUSH
68266: LD_INT 1
68268: NEG
68269: PUSH
68270: EMPTY
68271: LIST
68272: LIST
68273: PUSH
68274: EMPTY
68275: LIST
68276: LIST
68277: LIST
68278: LIST
68279: LIST
68280: LIST
68281: LIST
68282: LIST
68283: LIST
68284: LIST
68285: LIST
68286: LIST
68287: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68288: LD_ADDR_VAR 0 34
68292: PUSH
68293: LD_INT 2
68295: NEG
68296: PUSH
68297: LD_INT 3
68299: NEG
68300: PUSH
68301: EMPTY
68302: LIST
68303: LIST
68304: PUSH
68305: LD_INT 3
68307: NEG
68308: PUSH
68309: LD_INT 2
68311: NEG
68312: PUSH
68313: EMPTY
68314: LIST
68315: LIST
68316: PUSH
68317: LD_INT 3
68319: NEG
68320: PUSH
68321: LD_INT 3
68323: NEG
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: PUSH
68329: LD_INT 3
68331: NEG
68332: PUSH
68333: LD_INT 4
68335: NEG
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: PUSH
68341: LD_INT 4
68343: NEG
68344: PUSH
68345: LD_INT 3
68347: NEG
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: PUSH
68353: LD_INT 4
68355: NEG
68356: PUSH
68357: LD_INT 4
68359: NEG
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: PUSH
68365: LD_INT 4
68367: NEG
68368: PUSH
68369: LD_INT 5
68371: NEG
68372: PUSH
68373: EMPTY
68374: LIST
68375: LIST
68376: PUSH
68377: LD_INT 5
68379: NEG
68380: PUSH
68381: LD_INT 4
68383: NEG
68384: PUSH
68385: EMPTY
68386: LIST
68387: LIST
68388: PUSH
68389: LD_INT 5
68391: NEG
68392: PUSH
68393: LD_INT 5
68395: NEG
68396: PUSH
68397: EMPTY
68398: LIST
68399: LIST
68400: PUSH
68401: LD_INT 5
68403: NEG
68404: PUSH
68405: LD_INT 6
68407: NEG
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: PUSH
68413: LD_INT 6
68415: NEG
68416: PUSH
68417: LD_INT 5
68419: NEG
68420: PUSH
68421: EMPTY
68422: LIST
68423: LIST
68424: PUSH
68425: LD_INT 6
68427: NEG
68428: PUSH
68429: LD_INT 6
68431: NEG
68432: PUSH
68433: EMPTY
68434: LIST
68435: LIST
68436: PUSH
68437: EMPTY
68438: LIST
68439: LIST
68440: LIST
68441: LIST
68442: LIST
68443: LIST
68444: LIST
68445: LIST
68446: LIST
68447: LIST
68448: LIST
68449: LIST
68450: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68451: LD_ADDR_VAR 0 41
68455: PUSH
68456: LD_INT 0
68458: PUSH
68459: LD_INT 2
68461: NEG
68462: PUSH
68463: EMPTY
68464: LIST
68465: LIST
68466: PUSH
68467: LD_INT 1
68469: NEG
68470: PUSH
68471: LD_INT 3
68473: NEG
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PUSH
68479: LD_INT 1
68481: PUSH
68482: LD_INT 2
68484: NEG
68485: PUSH
68486: EMPTY
68487: LIST
68488: LIST
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: LIST
68494: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68495: LD_ADDR_VAR 0 42
68499: PUSH
68500: LD_INT 2
68502: PUSH
68503: LD_INT 0
68505: PUSH
68506: EMPTY
68507: LIST
68508: LIST
68509: PUSH
68510: LD_INT 2
68512: PUSH
68513: LD_INT 1
68515: NEG
68516: PUSH
68517: EMPTY
68518: LIST
68519: LIST
68520: PUSH
68521: LD_INT 3
68523: PUSH
68524: LD_INT 1
68526: PUSH
68527: EMPTY
68528: LIST
68529: LIST
68530: PUSH
68531: EMPTY
68532: LIST
68533: LIST
68534: LIST
68535: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
68536: LD_ADDR_VAR 0 43
68540: PUSH
68541: LD_INT 2
68543: PUSH
68544: LD_INT 2
68546: PUSH
68547: EMPTY
68548: LIST
68549: LIST
68550: PUSH
68551: LD_INT 3
68553: PUSH
68554: LD_INT 2
68556: PUSH
68557: EMPTY
68558: LIST
68559: LIST
68560: PUSH
68561: LD_INT 2
68563: PUSH
68564: LD_INT 3
68566: PUSH
68567: EMPTY
68568: LIST
68569: LIST
68570: PUSH
68571: EMPTY
68572: LIST
68573: LIST
68574: LIST
68575: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
68576: LD_ADDR_VAR 0 44
68580: PUSH
68581: LD_INT 0
68583: PUSH
68584: LD_INT 2
68586: PUSH
68587: EMPTY
68588: LIST
68589: LIST
68590: PUSH
68591: LD_INT 1
68593: PUSH
68594: LD_INT 3
68596: PUSH
68597: EMPTY
68598: LIST
68599: LIST
68600: PUSH
68601: LD_INT 1
68603: NEG
68604: PUSH
68605: LD_INT 2
68607: PUSH
68608: EMPTY
68609: LIST
68610: LIST
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: LIST
68616: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68617: LD_ADDR_VAR 0 45
68621: PUSH
68622: LD_INT 2
68624: NEG
68625: PUSH
68626: LD_INT 0
68628: PUSH
68629: EMPTY
68630: LIST
68631: LIST
68632: PUSH
68633: LD_INT 2
68635: NEG
68636: PUSH
68637: LD_INT 1
68639: PUSH
68640: EMPTY
68641: LIST
68642: LIST
68643: PUSH
68644: LD_INT 3
68646: NEG
68647: PUSH
68648: LD_INT 1
68650: NEG
68651: PUSH
68652: EMPTY
68653: LIST
68654: LIST
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: LIST
68660: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
68661: LD_ADDR_VAR 0 46
68665: PUSH
68666: LD_INT 2
68668: NEG
68669: PUSH
68670: LD_INT 2
68672: NEG
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: LD_INT 2
68680: NEG
68681: PUSH
68682: LD_INT 3
68684: NEG
68685: PUSH
68686: EMPTY
68687: LIST
68688: LIST
68689: PUSH
68690: LD_INT 3
68692: NEG
68693: PUSH
68694: LD_INT 2
68696: NEG
68697: PUSH
68698: EMPTY
68699: LIST
68700: LIST
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: LIST
68706: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
68707: LD_ADDR_VAR 0 47
68711: PUSH
68712: LD_INT 2
68714: NEG
68715: PUSH
68716: LD_INT 3
68718: NEG
68719: PUSH
68720: EMPTY
68721: LIST
68722: LIST
68723: PUSH
68724: LD_INT 1
68726: NEG
68727: PUSH
68728: LD_INT 3
68730: NEG
68731: PUSH
68732: EMPTY
68733: LIST
68734: LIST
68735: PUSH
68736: EMPTY
68737: LIST
68738: LIST
68739: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
68740: LD_ADDR_VAR 0 48
68744: PUSH
68745: LD_INT 1
68747: PUSH
68748: LD_INT 2
68750: NEG
68751: PUSH
68752: EMPTY
68753: LIST
68754: LIST
68755: PUSH
68756: LD_INT 2
68758: PUSH
68759: LD_INT 1
68761: NEG
68762: PUSH
68763: EMPTY
68764: LIST
68765: LIST
68766: PUSH
68767: EMPTY
68768: LIST
68769: LIST
68770: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
68771: LD_ADDR_VAR 0 49
68775: PUSH
68776: LD_INT 3
68778: PUSH
68779: LD_INT 1
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: PUSH
68786: LD_INT 3
68788: PUSH
68789: LD_INT 2
68791: PUSH
68792: EMPTY
68793: LIST
68794: LIST
68795: PUSH
68796: EMPTY
68797: LIST
68798: LIST
68799: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
68800: LD_ADDR_VAR 0 50
68804: PUSH
68805: LD_INT 2
68807: PUSH
68808: LD_INT 3
68810: PUSH
68811: EMPTY
68812: LIST
68813: LIST
68814: PUSH
68815: LD_INT 1
68817: PUSH
68818: LD_INT 3
68820: PUSH
68821: EMPTY
68822: LIST
68823: LIST
68824: PUSH
68825: EMPTY
68826: LIST
68827: LIST
68828: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68829: LD_ADDR_VAR 0 51
68833: PUSH
68834: LD_INT 1
68836: NEG
68837: PUSH
68838: LD_INT 2
68840: PUSH
68841: EMPTY
68842: LIST
68843: LIST
68844: PUSH
68845: LD_INT 2
68847: NEG
68848: PUSH
68849: LD_INT 1
68851: PUSH
68852: EMPTY
68853: LIST
68854: LIST
68855: PUSH
68856: EMPTY
68857: LIST
68858: LIST
68859: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68860: LD_ADDR_VAR 0 52
68864: PUSH
68865: LD_INT 3
68867: NEG
68868: PUSH
68869: LD_INT 1
68871: NEG
68872: PUSH
68873: EMPTY
68874: LIST
68875: LIST
68876: PUSH
68877: LD_INT 3
68879: NEG
68880: PUSH
68881: LD_INT 2
68883: NEG
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: PUSH
68889: EMPTY
68890: LIST
68891: LIST
68892: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68893: LD_ADDR_VAR 0 53
68897: PUSH
68898: LD_INT 1
68900: NEG
68901: PUSH
68902: LD_INT 3
68904: NEG
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: PUSH
68910: LD_INT 0
68912: PUSH
68913: LD_INT 3
68915: NEG
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: PUSH
68921: LD_INT 1
68923: PUSH
68924: LD_INT 2
68926: NEG
68927: PUSH
68928: EMPTY
68929: LIST
68930: LIST
68931: PUSH
68932: EMPTY
68933: LIST
68934: LIST
68935: LIST
68936: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68937: LD_ADDR_VAR 0 54
68941: PUSH
68942: LD_INT 2
68944: PUSH
68945: LD_INT 1
68947: NEG
68948: PUSH
68949: EMPTY
68950: LIST
68951: LIST
68952: PUSH
68953: LD_INT 3
68955: PUSH
68956: LD_INT 0
68958: PUSH
68959: EMPTY
68960: LIST
68961: LIST
68962: PUSH
68963: LD_INT 3
68965: PUSH
68966: LD_INT 1
68968: PUSH
68969: EMPTY
68970: LIST
68971: LIST
68972: PUSH
68973: EMPTY
68974: LIST
68975: LIST
68976: LIST
68977: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68978: LD_ADDR_VAR 0 55
68982: PUSH
68983: LD_INT 3
68985: PUSH
68986: LD_INT 2
68988: PUSH
68989: EMPTY
68990: LIST
68991: LIST
68992: PUSH
68993: LD_INT 3
68995: PUSH
68996: LD_INT 3
68998: PUSH
68999: EMPTY
69000: LIST
69001: LIST
69002: PUSH
69003: LD_INT 2
69005: PUSH
69006: LD_INT 3
69008: PUSH
69009: EMPTY
69010: LIST
69011: LIST
69012: PUSH
69013: EMPTY
69014: LIST
69015: LIST
69016: LIST
69017: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69018: LD_ADDR_VAR 0 56
69022: PUSH
69023: LD_INT 1
69025: PUSH
69026: LD_INT 3
69028: PUSH
69029: EMPTY
69030: LIST
69031: LIST
69032: PUSH
69033: LD_INT 0
69035: PUSH
69036: LD_INT 3
69038: PUSH
69039: EMPTY
69040: LIST
69041: LIST
69042: PUSH
69043: LD_INT 1
69045: NEG
69046: PUSH
69047: LD_INT 2
69049: PUSH
69050: EMPTY
69051: LIST
69052: LIST
69053: PUSH
69054: EMPTY
69055: LIST
69056: LIST
69057: LIST
69058: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69059: LD_ADDR_VAR 0 57
69063: PUSH
69064: LD_INT 2
69066: NEG
69067: PUSH
69068: LD_INT 1
69070: PUSH
69071: EMPTY
69072: LIST
69073: LIST
69074: PUSH
69075: LD_INT 3
69077: NEG
69078: PUSH
69079: LD_INT 0
69081: PUSH
69082: EMPTY
69083: LIST
69084: LIST
69085: PUSH
69086: LD_INT 3
69088: NEG
69089: PUSH
69090: LD_INT 1
69092: NEG
69093: PUSH
69094: EMPTY
69095: LIST
69096: LIST
69097: PUSH
69098: EMPTY
69099: LIST
69100: LIST
69101: LIST
69102: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69103: LD_ADDR_VAR 0 58
69107: PUSH
69108: LD_INT 2
69110: NEG
69111: PUSH
69112: LD_INT 3
69114: NEG
69115: PUSH
69116: EMPTY
69117: LIST
69118: LIST
69119: PUSH
69120: LD_INT 3
69122: NEG
69123: PUSH
69124: LD_INT 2
69126: NEG
69127: PUSH
69128: EMPTY
69129: LIST
69130: LIST
69131: PUSH
69132: LD_INT 3
69134: NEG
69135: PUSH
69136: LD_INT 3
69138: NEG
69139: PUSH
69140: EMPTY
69141: LIST
69142: LIST
69143: PUSH
69144: EMPTY
69145: LIST
69146: LIST
69147: LIST
69148: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69149: LD_ADDR_VAR 0 59
69153: PUSH
69154: LD_INT 1
69156: NEG
69157: PUSH
69158: LD_INT 2
69160: NEG
69161: PUSH
69162: EMPTY
69163: LIST
69164: LIST
69165: PUSH
69166: LD_INT 0
69168: PUSH
69169: LD_INT 2
69171: NEG
69172: PUSH
69173: EMPTY
69174: LIST
69175: LIST
69176: PUSH
69177: LD_INT 1
69179: PUSH
69180: LD_INT 1
69182: NEG
69183: PUSH
69184: EMPTY
69185: LIST
69186: LIST
69187: PUSH
69188: EMPTY
69189: LIST
69190: LIST
69191: LIST
69192: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69193: LD_ADDR_VAR 0 60
69197: PUSH
69198: LD_INT 1
69200: PUSH
69201: LD_INT 1
69203: NEG
69204: PUSH
69205: EMPTY
69206: LIST
69207: LIST
69208: PUSH
69209: LD_INT 2
69211: PUSH
69212: LD_INT 0
69214: PUSH
69215: EMPTY
69216: LIST
69217: LIST
69218: PUSH
69219: LD_INT 2
69221: PUSH
69222: LD_INT 1
69224: PUSH
69225: EMPTY
69226: LIST
69227: LIST
69228: PUSH
69229: EMPTY
69230: LIST
69231: LIST
69232: LIST
69233: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69234: LD_ADDR_VAR 0 61
69238: PUSH
69239: LD_INT 2
69241: PUSH
69242: LD_INT 1
69244: PUSH
69245: EMPTY
69246: LIST
69247: LIST
69248: PUSH
69249: LD_INT 2
69251: PUSH
69252: LD_INT 2
69254: PUSH
69255: EMPTY
69256: LIST
69257: LIST
69258: PUSH
69259: LD_INT 1
69261: PUSH
69262: LD_INT 2
69264: PUSH
69265: EMPTY
69266: LIST
69267: LIST
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: LIST
69273: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69274: LD_ADDR_VAR 0 62
69278: PUSH
69279: LD_INT 1
69281: PUSH
69282: LD_INT 2
69284: PUSH
69285: EMPTY
69286: LIST
69287: LIST
69288: PUSH
69289: LD_INT 0
69291: PUSH
69292: LD_INT 2
69294: PUSH
69295: EMPTY
69296: LIST
69297: LIST
69298: PUSH
69299: LD_INT 1
69301: NEG
69302: PUSH
69303: LD_INT 1
69305: PUSH
69306: EMPTY
69307: LIST
69308: LIST
69309: PUSH
69310: EMPTY
69311: LIST
69312: LIST
69313: LIST
69314: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69315: LD_ADDR_VAR 0 63
69319: PUSH
69320: LD_INT 1
69322: NEG
69323: PUSH
69324: LD_INT 1
69326: PUSH
69327: EMPTY
69328: LIST
69329: LIST
69330: PUSH
69331: LD_INT 2
69333: NEG
69334: PUSH
69335: LD_INT 0
69337: PUSH
69338: EMPTY
69339: LIST
69340: LIST
69341: PUSH
69342: LD_INT 2
69344: NEG
69345: PUSH
69346: LD_INT 1
69348: NEG
69349: PUSH
69350: EMPTY
69351: LIST
69352: LIST
69353: PUSH
69354: EMPTY
69355: LIST
69356: LIST
69357: LIST
69358: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69359: LD_ADDR_VAR 0 64
69363: PUSH
69364: LD_INT 1
69366: NEG
69367: PUSH
69368: LD_INT 2
69370: NEG
69371: PUSH
69372: EMPTY
69373: LIST
69374: LIST
69375: PUSH
69376: LD_INT 2
69378: NEG
69379: PUSH
69380: LD_INT 1
69382: NEG
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: PUSH
69388: LD_INT 2
69390: NEG
69391: PUSH
69392: LD_INT 2
69394: NEG
69395: PUSH
69396: EMPTY
69397: LIST
69398: LIST
69399: PUSH
69400: EMPTY
69401: LIST
69402: LIST
69403: LIST
69404: ST_TO_ADDR
// end ; 2 :
69405: GO 72671
69407: LD_INT 2
69409: DOUBLE
69410: EQUAL
69411: IFTRUE 69415
69413: GO 72670
69415: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69416: LD_ADDR_VAR 0 29
69420: PUSH
69421: LD_INT 4
69423: PUSH
69424: LD_INT 0
69426: PUSH
69427: EMPTY
69428: LIST
69429: LIST
69430: PUSH
69431: LD_INT 4
69433: PUSH
69434: LD_INT 1
69436: NEG
69437: PUSH
69438: EMPTY
69439: LIST
69440: LIST
69441: PUSH
69442: LD_INT 5
69444: PUSH
69445: LD_INT 0
69447: PUSH
69448: EMPTY
69449: LIST
69450: LIST
69451: PUSH
69452: LD_INT 5
69454: PUSH
69455: LD_INT 1
69457: PUSH
69458: EMPTY
69459: LIST
69460: LIST
69461: PUSH
69462: LD_INT 4
69464: PUSH
69465: LD_INT 1
69467: PUSH
69468: EMPTY
69469: LIST
69470: LIST
69471: PUSH
69472: LD_INT 3
69474: PUSH
69475: LD_INT 0
69477: PUSH
69478: EMPTY
69479: LIST
69480: LIST
69481: PUSH
69482: LD_INT 3
69484: PUSH
69485: LD_INT 1
69487: NEG
69488: PUSH
69489: EMPTY
69490: LIST
69491: LIST
69492: PUSH
69493: LD_INT 3
69495: PUSH
69496: LD_INT 2
69498: NEG
69499: PUSH
69500: EMPTY
69501: LIST
69502: LIST
69503: PUSH
69504: LD_INT 5
69506: PUSH
69507: LD_INT 2
69509: PUSH
69510: EMPTY
69511: LIST
69512: LIST
69513: PUSH
69514: LD_INT 3
69516: PUSH
69517: LD_INT 3
69519: PUSH
69520: EMPTY
69521: LIST
69522: LIST
69523: PUSH
69524: LD_INT 3
69526: PUSH
69527: LD_INT 2
69529: PUSH
69530: EMPTY
69531: LIST
69532: LIST
69533: PUSH
69534: LD_INT 4
69536: PUSH
69537: LD_INT 3
69539: PUSH
69540: EMPTY
69541: LIST
69542: LIST
69543: PUSH
69544: LD_INT 4
69546: PUSH
69547: LD_INT 4
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: PUSH
69554: LD_INT 3
69556: PUSH
69557: LD_INT 4
69559: PUSH
69560: EMPTY
69561: LIST
69562: LIST
69563: PUSH
69564: LD_INT 2
69566: PUSH
69567: LD_INT 3
69569: PUSH
69570: EMPTY
69571: LIST
69572: LIST
69573: PUSH
69574: LD_INT 2
69576: PUSH
69577: LD_INT 2
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: PUSH
69584: LD_INT 4
69586: PUSH
69587: LD_INT 2
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: PUSH
69594: LD_INT 2
69596: PUSH
69597: LD_INT 4
69599: PUSH
69600: EMPTY
69601: LIST
69602: LIST
69603: PUSH
69604: LD_INT 0
69606: PUSH
69607: LD_INT 4
69609: PUSH
69610: EMPTY
69611: LIST
69612: LIST
69613: PUSH
69614: LD_INT 0
69616: PUSH
69617: LD_INT 3
69619: PUSH
69620: EMPTY
69621: LIST
69622: LIST
69623: PUSH
69624: LD_INT 1
69626: PUSH
69627: LD_INT 4
69629: PUSH
69630: EMPTY
69631: LIST
69632: LIST
69633: PUSH
69634: LD_INT 1
69636: PUSH
69637: LD_INT 5
69639: PUSH
69640: EMPTY
69641: LIST
69642: LIST
69643: PUSH
69644: LD_INT 0
69646: PUSH
69647: LD_INT 5
69649: PUSH
69650: EMPTY
69651: LIST
69652: LIST
69653: PUSH
69654: LD_INT 1
69656: NEG
69657: PUSH
69658: LD_INT 4
69660: PUSH
69661: EMPTY
69662: LIST
69663: LIST
69664: PUSH
69665: LD_INT 1
69667: NEG
69668: PUSH
69669: LD_INT 3
69671: PUSH
69672: EMPTY
69673: LIST
69674: LIST
69675: PUSH
69676: LD_INT 2
69678: PUSH
69679: LD_INT 5
69681: PUSH
69682: EMPTY
69683: LIST
69684: LIST
69685: PUSH
69686: LD_INT 2
69688: NEG
69689: PUSH
69690: LD_INT 3
69692: PUSH
69693: EMPTY
69694: LIST
69695: LIST
69696: PUSH
69697: LD_INT 3
69699: NEG
69700: PUSH
69701: LD_INT 0
69703: PUSH
69704: EMPTY
69705: LIST
69706: LIST
69707: PUSH
69708: LD_INT 3
69710: NEG
69711: PUSH
69712: LD_INT 1
69714: NEG
69715: PUSH
69716: EMPTY
69717: LIST
69718: LIST
69719: PUSH
69720: LD_INT 2
69722: NEG
69723: PUSH
69724: LD_INT 0
69726: PUSH
69727: EMPTY
69728: LIST
69729: LIST
69730: PUSH
69731: LD_INT 2
69733: NEG
69734: PUSH
69735: LD_INT 1
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: PUSH
69742: LD_INT 3
69744: NEG
69745: PUSH
69746: LD_INT 1
69748: PUSH
69749: EMPTY
69750: LIST
69751: LIST
69752: PUSH
69753: LD_INT 4
69755: NEG
69756: PUSH
69757: LD_INT 0
69759: PUSH
69760: EMPTY
69761: LIST
69762: LIST
69763: PUSH
69764: LD_INT 4
69766: NEG
69767: PUSH
69768: LD_INT 1
69770: NEG
69771: PUSH
69772: EMPTY
69773: LIST
69774: LIST
69775: PUSH
69776: LD_INT 4
69778: NEG
69779: PUSH
69780: LD_INT 2
69782: NEG
69783: PUSH
69784: EMPTY
69785: LIST
69786: LIST
69787: PUSH
69788: LD_INT 2
69790: NEG
69791: PUSH
69792: LD_INT 2
69794: PUSH
69795: EMPTY
69796: LIST
69797: LIST
69798: PUSH
69799: LD_INT 4
69801: NEG
69802: PUSH
69803: LD_INT 4
69805: NEG
69806: PUSH
69807: EMPTY
69808: LIST
69809: LIST
69810: PUSH
69811: LD_INT 4
69813: NEG
69814: PUSH
69815: LD_INT 5
69817: NEG
69818: PUSH
69819: EMPTY
69820: LIST
69821: LIST
69822: PUSH
69823: LD_INT 3
69825: NEG
69826: PUSH
69827: LD_INT 4
69829: NEG
69830: PUSH
69831: EMPTY
69832: LIST
69833: LIST
69834: PUSH
69835: LD_INT 3
69837: NEG
69838: PUSH
69839: LD_INT 3
69841: NEG
69842: PUSH
69843: EMPTY
69844: LIST
69845: LIST
69846: PUSH
69847: LD_INT 4
69849: NEG
69850: PUSH
69851: LD_INT 3
69853: NEG
69854: PUSH
69855: EMPTY
69856: LIST
69857: LIST
69858: PUSH
69859: LD_INT 5
69861: NEG
69862: PUSH
69863: LD_INT 4
69865: NEG
69866: PUSH
69867: EMPTY
69868: LIST
69869: LIST
69870: PUSH
69871: LD_INT 5
69873: NEG
69874: PUSH
69875: LD_INT 5
69877: NEG
69878: PUSH
69879: EMPTY
69880: LIST
69881: LIST
69882: PUSH
69883: LD_INT 3
69885: NEG
69886: PUSH
69887: LD_INT 5
69889: NEG
69890: PUSH
69891: EMPTY
69892: LIST
69893: LIST
69894: PUSH
69895: LD_INT 5
69897: NEG
69898: PUSH
69899: LD_INT 3
69901: NEG
69902: PUSH
69903: EMPTY
69904: LIST
69905: LIST
69906: PUSH
69907: EMPTY
69908: LIST
69909: LIST
69910: LIST
69911: LIST
69912: LIST
69913: LIST
69914: LIST
69915: LIST
69916: LIST
69917: LIST
69918: LIST
69919: LIST
69920: LIST
69921: LIST
69922: LIST
69923: LIST
69924: LIST
69925: LIST
69926: LIST
69927: LIST
69928: LIST
69929: LIST
69930: LIST
69931: LIST
69932: LIST
69933: LIST
69934: LIST
69935: LIST
69936: LIST
69937: LIST
69938: LIST
69939: LIST
69940: LIST
69941: LIST
69942: LIST
69943: LIST
69944: LIST
69945: LIST
69946: LIST
69947: LIST
69948: LIST
69949: LIST
69950: LIST
69951: LIST
69952: LIST
69953: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
69954: LD_ADDR_VAR 0 30
69958: PUSH
69959: LD_INT 4
69961: PUSH
69962: LD_INT 4
69964: PUSH
69965: EMPTY
69966: LIST
69967: LIST
69968: PUSH
69969: LD_INT 4
69971: PUSH
69972: LD_INT 3
69974: PUSH
69975: EMPTY
69976: LIST
69977: LIST
69978: PUSH
69979: LD_INT 5
69981: PUSH
69982: LD_INT 4
69984: PUSH
69985: EMPTY
69986: LIST
69987: LIST
69988: PUSH
69989: LD_INT 5
69991: PUSH
69992: LD_INT 5
69994: PUSH
69995: EMPTY
69996: LIST
69997: LIST
69998: PUSH
69999: LD_INT 4
70001: PUSH
70002: LD_INT 5
70004: PUSH
70005: EMPTY
70006: LIST
70007: LIST
70008: PUSH
70009: LD_INT 3
70011: PUSH
70012: LD_INT 4
70014: PUSH
70015: EMPTY
70016: LIST
70017: LIST
70018: PUSH
70019: LD_INT 3
70021: PUSH
70022: LD_INT 3
70024: PUSH
70025: EMPTY
70026: LIST
70027: LIST
70028: PUSH
70029: LD_INT 5
70031: PUSH
70032: LD_INT 3
70034: PUSH
70035: EMPTY
70036: LIST
70037: LIST
70038: PUSH
70039: LD_INT 3
70041: PUSH
70042: LD_INT 5
70044: PUSH
70045: EMPTY
70046: LIST
70047: LIST
70048: PUSH
70049: LD_INT 0
70051: PUSH
70052: LD_INT 3
70054: PUSH
70055: EMPTY
70056: LIST
70057: LIST
70058: PUSH
70059: LD_INT 0
70061: PUSH
70062: LD_INT 2
70064: PUSH
70065: EMPTY
70066: LIST
70067: LIST
70068: PUSH
70069: LD_INT 1
70071: PUSH
70072: LD_INT 3
70074: PUSH
70075: EMPTY
70076: LIST
70077: LIST
70078: PUSH
70079: LD_INT 1
70081: PUSH
70082: LD_INT 4
70084: PUSH
70085: EMPTY
70086: LIST
70087: LIST
70088: PUSH
70089: LD_INT 0
70091: PUSH
70092: LD_INT 4
70094: PUSH
70095: EMPTY
70096: LIST
70097: LIST
70098: PUSH
70099: LD_INT 1
70101: NEG
70102: PUSH
70103: LD_INT 3
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: PUSH
70110: LD_INT 1
70112: NEG
70113: PUSH
70114: LD_INT 2
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: PUSH
70121: LD_INT 2
70123: PUSH
70124: LD_INT 4
70126: PUSH
70127: EMPTY
70128: LIST
70129: LIST
70130: PUSH
70131: LD_INT 2
70133: NEG
70134: PUSH
70135: LD_INT 2
70137: PUSH
70138: EMPTY
70139: LIST
70140: LIST
70141: PUSH
70142: LD_INT 4
70144: NEG
70145: PUSH
70146: LD_INT 0
70148: PUSH
70149: EMPTY
70150: LIST
70151: LIST
70152: PUSH
70153: LD_INT 4
70155: NEG
70156: PUSH
70157: LD_INT 1
70159: NEG
70160: PUSH
70161: EMPTY
70162: LIST
70163: LIST
70164: PUSH
70165: LD_INT 3
70167: NEG
70168: PUSH
70169: LD_INT 0
70171: PUSH
70172: EMPTY
70173: LIST
70174: LIST
70175: PUSH
70176: LD_INT 3
70178: NEG
70179: PUSH
70180: LD_INT 1
70182: PUSH
70183: EMPTY
70184: LIST
70185: LIST
70186: PUSH
70187: LD_INT 4
70189: NEG
70190: PUSH
70191: LD_INT 1
70193: PUSH
70194: EMPTY
70195: LIST
70196: LIST
70197: PUSH
70198: LD_INT 5
70200: NEG
70201: PUSH
70202: LD_INT 0
70204: PUSH
70205: EMPTY
70206: LIST
70207: LIST
70208: PUSH
70209: LD_INT 5
70211: NEG
70212: PUSH
70213: LD_INT 1
70215: NEG
70216: PUSH
70217: EMPTY
70218: LIST
70219: LIST
70220: PUSH
70221: LD_INT 5
70223: NEG
70224: PUSH
70225: LD_INT 2
70227: NEG
70228: PUSH
70229: EMPTY
70230: LIST
70231: LIST
70232: PUSH
70233: LD_INT 3
70235: NEG
70236: PUSH
70237: LD_INT 2
70239: PUSH
70240: EMPTY
70241: LIST
70242: LIST
70243: PUSH
70244: LD_INT 3
70246: NEG
70247: PUSH
70248: LD_INT 3
70250: NEG
70251: PUSH
70252: EMPTY
70253: LIST
70254: LIST
70255: PUSH
70256: LD_INT 3
70258: NEG
70259: PUSH
70260: LD_INT 4
70262: NEG
70263: PUSH
70264: EMPTY
70265: LIST
70266: LIST
70267: PUSH
70268: LD_INT 2
70270: NEG
70271: PUSH
70272: LD_INT 3
70274: NEG
70275: PUSH
70276: EMPTY
70277: LIST
70278: LIST
70279: PUSH
70280: LD_INT 2
70282: NEG
70283: PUSH
70284: LD_INT 2
70286: NEG
70287: PUSH
70288: EMPTY
70289: LIST
70290: LIST
70291: PUSH
70292: LD_INT 3
70294: NEG
70295: PUSH
70296: LD_INT 2
70298: NEG
70299: PUSH
70300: EMPTY
70301: LIST
70302: LIST
70303: PUSH
70304: LD_INT 4
70306: NEG
70307: PUSH
70308: LD_INT 3
70310: NEG
70311: PUSH
70312: EMPTY
70313: LIST
70314: LIST
70315: PUSH
70316: LD_INT 4
70318: NEG
70319: PUSH
70320: LD_INT 4
70322: NEG
70323: PUSH
70324: EMPTY
70325: LIST
70326: LIST
70327: PUSH
70328: LD_INT 2
70330: NEG
70331: PUSH
70332: LD_INT 4
70334: NEG
70335: PUSH
70336: EMPTY
70337: LIST
70338: LIST
70339: PUSH
70340: LD_INT 4
70342: NEG
70343: PUSH
70344: LD_INT 2
70346: NEG
70347: PUSH
70348: EMPTY
70349: LIST
70350: LIST
70351: PUSH
70352: LD_INT 0
70354: PUSH
70355: LD_INT 4
70357: NEG
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: PUSH
70363: LD_INT 0
70365: PUSH
70366: LD_INT 5
70368: NEG
70369: PUSH
70370: EMPTY
70371: LIST
70372: LIST
70373: PUSH
70374: LD_INT 1
70376: PUSH
70377: LD_INT 4
70379: NEG
70380: PUSH
70381: EMPTY
70382: LIST
70383: LIST
70384: PUSH
70385: LD_INT 1
70387: PUSH
70388: LD_INT 3
70390: NEG
70391: PUSH
70392: EMPTY
70393: LIST
70394: LIST
70395: PUSH
70396: LD_INT 0
70398: PUSH
70399: LD_INT 3
70401: NEG
70402: PUSH
70403: EMPTY
70404: LIST
70405: LIST
70406: PUSH
70407: LD_INT 1
70409: NEG
70410: PUSH
70411: LD_INT 4
70413: NEG
70414: PUSH
70415: EMPTY
70416: LIST
70417: LIST
70418: PUSH
70419: LD_INT 1
70421: NEG
70422: PUSH
70423: LD_INT 5
70425: NEG
70426: PUSH
70427: EMPTY
70428: LIST
70429: LIST
70430: PUSH
70431: LD_INT 2
70433: PUSH
70434: LD_INT 3
70436: NEG
70437: PUSH
70438: EMPTY
70439: LIST
70440: LIST
70441: PUSH
70442: LD_INT 2
70444: NEG
70445: PUSH
70446: LD_INT 5
70448: NEG
70449: PUSH
70450: EMPTY
70451: LIST
70452: LIST
70453: PUSH
70454: EMPTY
70455: LIST
70456: LIST
70457: LIST
70458: LIST
70459: LIST
70460: LIST
70461: LIST
70462: LIST
70463: LIST
70464: LIST
70465: LIST
70466: LIST
70467: LIST
70468: LIST
70469: LIST
70470: LIST
70471: LIST
70472: LIST
70473: LIST
70474: LIST
70475: LIST
70476: LIST
70477: LIST
70478: LIST
70479: LIST
70480: LIST
70481: LIST
70482: LIST
70483: LIST
70484: LIST
70485: LIST
70486: LIST
70487: LIST
70488: LIST
70489: LIST
70490: LIST
70491: LIST
70492: LIST
70493: LIST
70494: LIST
70495: LIST
70496: LIST
70497: LIST
70498: LIST
70499: LIST
70500: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
70501: LD_ADDR_VAR 0 31
70505: PUSH
70506: LD_INT 0
70508: PUSH
70509: LD_INT 4
70511: PUSH
70512: EMPTY
70513: LIST
70514: LIST
70515: PUSH
70516: LD_INT 0
70518: PUSH
70519: LD_INT 3
70521: PUSH
70522: EMPTY
70523: LIST
70524: LIST
70525: PUSH
70526: LD_INT 1
70528: PUSH
70529: LD_INT 4
70531: PUSH
70532: EMPTY
70533: LIST
70534: LIST
70535: PUSH
70536: LD_INT 1
70538: PUSH
70539: LD_INT 5
70541: PUSH
70542: EMPTY
70543: LIST
70544: LIST
70545: PUSH
70546: LD_INT 0
70548: PUSH
70549: LD_INT 5
70551: PUSH
70552: EMPTY
70553: LIST
70554: LIST
70555: PUSH
70556: LD_INT 1
70558: NEG
70559: PUSH
70560: LD_INT 4
70562: PUSH
70563: EMPTY
70564: LIST
70565: LIST
70566: PUSH
70567: LD_INT 1
70569: NEG
70570: PUSH
70571: LD_INT 3
70573: PUSH
70574: EMPTY
70575: LIST
70576: LIST
70577: PUSH
70578: LD_INT 2
70580: PUSH
70581: LD_INT 5
70583: PUSH
70584: EMPTY
70585: LIST
70586: LIST
70587: PUSH
70588: LD_INT 2
70590: NEG
70591: PUSH
70592: LD_INT 3
70594: PUSH
70595: EMPTY
70596: LIST
70597: LIST
70598: PUSH
70599: LD_INT 3
70601: NEG
70602: PUSH
70603: LD_INT 0
70605: PUSH
70606: EMPTY
70607: LIST
70608: LIST
70609: PUSH
70610: LD_INT 3
70612: NEG
70613: PUSH
70614: LD_INT 1
70616: NEG
70617: PUSH
70618: EMPTY
70619: LIST
70620: LIST
70621: PUSH
70622: LD_INT 2
70624: NEG
70625: PUSH
70626: LD_INT 0
70628: PUSH
70629: EMPTY
70630: LIST
70631: LIST
70632: PUSH
70633: LD_INT 2
70635: NEG
70636: PUSH
70637: LD_INT 1
70639: PUSH
70640: EMPTY
70641: LIST
70642: LIST
70643: PUSH
70644: LD_INT 3
70646: NEG
70647: PUSH
70648: LD_INT 1
70650: PUSH
70651: EMPTY
70652: LIST
70653: LIST
70654: PUSH
70655: LD_INT 4
70657: NEG
70658: PUSH
70659: LD_INT 0
70661: PUSH
70662: EMPTY
70663: LIST
70664: LIST
70665: PUSH
70666: LD_INT 4
70668: NEG
70669: PUSH
70670: LD_INT 1
70672: NEG
70673: PUSH
70674: EMPTY
70675: LIST
70676: LIST
70677: PUSH
70678: LD_INT 4
70680: NEG
70681: PUSH
70682: LD_INT 2
70684: NEG
70685: PUSH
70686: EMPTY
70687: LIST
70688: LIST
70689: PUSH
70690: LD_INT 2
70692: NEG
70693: PUSH
70694: LD_INT 2
70696: PUSH
70697: EMPTY
70698: LIST
70699: LIST
70700: PUSH
70701: LD_INT 4
70703: NEG
70704: PUSH
70705: LD_INT 4
70707: NEG
70708: PUSH
70709: EMPTY
70710: LIST
70711: LIST
70712: PUSH
70713: LD_INT 4
70715: NEG
70716: PUSH
70717: LD_INT 5
70719: NEG
70720: PUSH
70721: EMPTY
70722: LIST
70723: LIST
70724: PUSH
70725: LD_INT 3
70727: NEG
70728: PUSH
70729: LD_INT 4
70731: NEG
70732: PUSH
70733: EMPTY
70734: LIST
70735: LIST
70736: PUSH
70737: LD_INT 3
70739: NEG
70740: PUSH
70741: LD_INT 3
70743: NEG
70744: PUSH
70745: EMPTY
70746: LIST
70747: LIST
70748: PUSH
70749: LD_INT 4
70751: NEG
70752: PUSH
70753: LD_INT 3
70755: NEG
70756: PUSH
70757: EMPTY
70758: LIST
70759: LIST
70760: PUSH
70761: LD_INT 5
70763: NEG
70764: PUSH
70765: LD_INT 4
70767: NEG
70768: PUSH
70769: EMPTY
70770: LIST
70771: LIST
70772: PUSH
70773: LD_INT 5
70775: NEG
70776: PUSH
70777: LD_INT 5
70779: NEG
70780: PUSH
70781: EMPTY
70782: LIST
70783: LIST
70784: PUSH
70785: LD_INT 3
70787: NEG
70788: PUSH
70789: LD_INT 5
70791: NEG
70792: PUSH
70793: EMPTY
70794: LIST
70795: LIST
70796: PUSH
70797: LD_INT 5
70799: NEG
70800: PUSH
70801: LD_INT 3
70803: NEG
70804: PUSH
70805: EMPTY
70806: LIST
70807: LIST
70808: PUSH
70809: LD_INT 0
70811: PUSH
70812: LD_INT 3
70814: NEG
70815: PUSH
70816: EMPTY
70817: LIST
70818: LIST
70819: PUSH
70820: LD_INT 0
70822: PUSH
70823: LD_INT 4
70825: NEG
70826: PUSH
70827: EMPTY
70828: LIST
70829: LIST
70830: PUSH
70831: LD_INT 1
70833: PUSH
70834: LD_INT 3
70836: NEG
70837: PUSH
70838: EMPTY
70839: LIST
70840: LIST
70841: PUSH
70842: LD_INT 1
70844: PUSH
70845: LD_INT 2
70847: NEG
70848: PUSH
70849: EMPTY
70850: LIST
70851: LIST
70852: PUSH
70853: LD_INT 0
70855: PUSH
70856: LD_INT 2
70858: NEG
70859: PUSH
70860: EMPTY
70861: LIST
70862: LIST
70863: PUSH
70864: LD_INT 1
70866: NEG
70867: PUSH
70868: LD_INT 3
70870: NEG
70871: PUSH
70872: EMPTY
70873: LIST
70874: LIST
70875: PUSH
70876: LD_INT 1
70878: NEG
70879: PUSH
70880: LD_INT 4
70882: NEG
70883: PUSH
70884: EMPTY
70885: LIST
70886: LIST
70887: PUSH
70888: LD_INT 2
70890: PUSH
70891: LD_INT 2
70893: NEG
70894: PUSH
70895: EMPTY
70896: LIST
70897: LIST
70898: PUSH
70899: LD_INT 2
70901: NEG
70902: PUSH
70903: LD_INT 4
70905: NEG
70906: PUSH
70907: EMPTY
70908: LIST
70909: LIST
70910: PUSH
70911: LD_INT 4
70913: PUSH
70914: LD_INT 0
70916: PUSH
70917: EMPTY
70918: LIST
70919: LIST
70920: PUSH
70921: LD_INT 4
70923: PUSH
70924: LD_INT 1
70926: NEG
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: PUSH
70932: LD_INT 5
70934: PUSH
70935: LD_INT 0
70937: PUSH
70938: EMPTY
70939: LIST
70940: LIST
70941: PUSH
70942: LD_INT 5
70944: PUSH
70945: LD_INT 1
70947: PUSH
70948: EMPTY
70949: LIST
70950: LIST
70951: PUSH
70952: LD_INT 4
70954: PUSH
70955: LD_INT 1
70957: PUSH
70958: EMPTY
70959: LIST
70960: LIST
70961: PUSH
70962: LD_INT 3
70964: PUSH
70965: LD_INT 0
70967: PUSH
70968: EMPTY
70969: LIST
70970: LIST
70971: PUSH
70972: LD_INT 3
70974: PUSH
70975: LD_INT 1
70977: NEG
70978: PUSH
70979: EMPTY
70980: LIST
70981: LIST
70982: PUSH
70983: LD_INT 3
70985: PUSH
70986: LD_INT 2
70988: NEG
70989: PUSH
70990: EMPTY
70991: LIST
70992: LIST
70993: PUSH
70994: LD_INT 5
70996: PUSH
70997: LD_INT 2
70999: PUSH
71000: EMPTY
71001: LIST
71002: LIST
71003: PUSH
71004: EMPTY
71005: LIST
71006: LIST
71007: LIST
71008: LIST
71009: LIST
71010: LIST
71011: LIST
71012: LIST
71013: LIST
71014: LIST
71015: LIST
71016: LIST
71017: LIST
71018: LIST
71019: LIST
71020: LIST
71021: LIST
71022: LIST
71023: LIST
71024: LIST
71025: LIST
71026: LIST
71027: LIST
71028: LIST
71029: LIST
71030: LIST
71031: LIST
71032: LIST
71033: LIST
71034: LIST
71035: LIST
71036: LIST
71037: LIST
71038: LIST
71039: LIST
71040: LIST
71041: LIST
71042: LIST
71043: LIST
71044: LIST
71045: LIST
71046: LIST
71047: LIST
71048: LIST
71049: LIST
71050: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71051: LD_ADDR_VAR 0 32
71055: PUSH
71056: LD_INT 4
71058: NEG
71059: PUSH
71060: LD_INT 0
71062: PUSH
71063: EMPTY
71064: LIST
71065: LIST
71066: PUSH
71067: LD_INT 4
71069: NEG
71070: PUSH
71071: LD_INT 1
71073: NEG
71074: PUSH
71075: EMPTY
71076: LIST
71077: LIST
71078: PUSH
71079: LD_INT 3
71081: NEG
71082: PUSH
71083: LD_INT 0
71085: PUSH
71086: EMPTY
71087: LIST
71088: LIST
71089: PUSH
71090: LD_INT 3
71092: NEG
71093: PUSH
71094: LD_INT 1
71096: PUSH
71097: EMPTY
71098: LIST
71099: LIST
71100: PUSH
71101: LD_INT 4
71103: NEG
71104: PUSH
71105: LD_INT 1
71107: PUSH
71108: EMPTY
71109: LIST
71110: LIST
71111: PUSH
71112: LD_INT 5
71114: NEG
71115: PUSH
71116: LD_INT 0
71118: PUSH
71119: EMPTY
71120: LIST
71121: LIST
71122: PUSH
71123: LD_INT 5
71125: NEG
71126: PUSH
71127: LD_INT 1
71129: NEG
71130: PUSH
71131: EMPTY
71132: LIST
71133: LIST
71134: PUSH
71135: LD_INT 5
71137: NEG
71138: PUSH
71139: LD_INT 2
71141: NEG
71142: PUSH
71143: EMPTY
71144: LIST
71145: LIST
71146: PUSH
71147: LD_INT 3
71149: NEG
71150: PUSH
71151: LD_INT 2
71153: PUSH
71154: EMPTY
71155: LIST
71156: LIST
71157: PUSH
71158: LD_INT 3
71160: NEG
71161: PUSH
71162: LD_INT 3
71164: NEG
71165: PUSH
71166: EMPTY
71167: LIST
71168: LIST
71169: PUSH
71170: LD_INT 3
71172: NEG
71173: PUSH
71174: LD_INT 4
71176: NEG
71177: PUSH
71178: EMPTY
71179: LIST
71180: LIST
71181: PUSH
71182: LD_INT 2
71184: NEG
71185: PUSH
71186: LD_INT 3
71188: NEG
71189: PUSH
71190: EMPTY
71191: LIST
71192: LIST
71193: PUSH
71194: LD_INT 2
71196: NEG
71197: PUSH
71198: LD_INT 2
71200: NEG
71201: PUSH
71202: EMPTY
71203: LIST
71204: LIST
71205: PUSH
71206: LD_INT 3
71208: NEG
71209: PUSH
71210: LD_INT 2
71212: NEG
71213: PUSH
71214: EMPTY
71215: LIST
71216: LIST
71217: PUSH
71218: LD_INT 4
71220: NEG
71221: PUSH
71222: LD_INT 3
71224: NEG
71225: PUSH
71226: EMPTY
71227: LIST
71228: LIST
71229: PUSH
71230: LD_INT 4
71232: NEG
71233: PUSH
71234: LD_INT 4
71236: NEG
71237: PUSH
71238: EMPTY
71239: LIST
71240: LIST
71241: PUSH
71242: LD_INT 2
71244: NEG
71245: PUSH
71246: LD_INT 4
71248: NEG
71249: PUSH
71250: EMPTY
71251: LIST
71252: LIST
71253: PUSH
71254: LD_INT 4
71256: NEG
71257: PUSH
71258: LD_INT 2
71260: NEG
71261: PUSH
71262: EMPTY
71263: LIST
71264: LIST
71265: PUSH
71266: LD_INT 0
71268: PUSH
71269: LD_INT 4
71271: NEG
71272: PUSH
71273: EMPTY
71274: LIST
71275: LIST
71276: PUSH
71277: LD_INT 0
71279: PUSH
71280: LD_INT 5
71282: NEG
71283: PUSH
71284: EMPTY
71285: LIST
71286: LIST
71287: PUSH
71288: LD_INT 1
71290: PUSH
71291: LD_INT 4
71293: NEG
71294: PUSH
71295: EMPTY
71296: LIST
71297: LIST
71298: PUSH
71299: LD_INT 1
71301: PUSH
71302: LD_INT 3
71304: NEG
71305: PUSH
71306: EMPTY
71307: LIST
71308: LIST
71309: PUSH
71310: LD_INT 0
71312: PUSH
71313: LD_INT 3
71315: NEG
71316: PUSH
71317: EMPTY
71318: LIST
71319: LIST
71320: PUSH
71321: LD_INT 1
71323: NEG
71324: PUSH
71325: LD_INT 4
71327: NEG
71328: PUSH
71329: EMPTY
71330: LIST
71331: LIST
71332: PUSH
71333: LD_INT 1
71335: NEG
71336: PUSH
71337: LD_INT 5
71339: NEG
71340: PUSH
71341: EMPTY
71342: LIST
71343: LIST
71344: PUSH
71345: LD_INT 2
71347: PUSH
71348: LD_INT 3
71350: NEG
71351: PUSH
71352: EMPTY
71353: LIST
71354: LIST
71355: PUSH
71356: LD_INT 2
71358: NEG
71359: PUSH
71360: LD_INT 5
71362: NEG
71363: PUSH
71364: EMPTY
71365: LIST
71366: LIST
71367: PUSH
71368: LD_INT 3
71370: PUSH
71371: LD_INT 0
71373: PUSH
71374: EMPTY
71375: LIST
71376: LIST
71377: PUSH
71378: LD_INT 3
71380: PUSH
71381: LD_INT 1
71383: NEG
71384: PUSH
71385: EMPTY
71386: LIST
71387: LIST
71388: PUSH
71389: LD_INT 4
71391: PUSH
71392: LD_INT 0
71394: PUSH
71395: EMPTY
71396: LIST
71397: LIST
71398: PUSH
71399: LD_INT 4
71401: PUSH
71402: LD_INT 1
71404: PUSH
71405: EMPTY
71406: LIST
71407: LIST
71408: PUSH
71409: LD_INT 3
71411: PUSH
71412: LD_INT 1
71414: PUSH
71415: EMPTY
71416: LIST
71417: LIST
71418: PUSH
71419: LD_INT 2
71421: PUSH
71422: LD_INT 0
71424: PUSH
71425: EMPTY
71426: LIST
71427: LIST
71428: PUSH
71429: LD_INT 2
71431: PUSH
71432: LD_INT 1
71434: NEG
71435: PUSH
71436: EMPTY
71437: LIST
71438: LIST
71439: PUSH
71440: LD_INT 2
71442: PUSH
71443: LD_INT 2
71445: NEG
71446: PUSH
71447: EMPTY
71448: LIST
71449: LIST
71450: PUSH
71451: LD_INT 4
71453: PUSH
71454: LD_INT 2
71456: PUSH
71457: EMPTY
71458: LIST
71459: LIST
71460: PUSH
71461: LD_INT 4
71463: PUSH
71464: LD_INT 4
71466: PUSH
71467: EMPTY
71468: LIST
71469: LIST
71470: PUSH
71471: LD_INT 4
71473: PUSH
71474: LD_INT 3
71476: PUSH
71477: EMPTY
71478: LIST
71479: LIST
71480: PUSH
71481: LD_INT 5
71483: PUSH
71484: LD_INT 4
71486: PUSH
71487: EMPTY
71488: LIST
71489: LIST
71490: PUSH
71491: LD_INT 5
71493: PUSH
71494: LD_INT 5
71496: PUSH
71497: EMPTY
71498: LIST
71499: LIST
71500: PUSH
71501: LD_INT 4
71503: PUSH
71504: LD_INT 5
71506: PUSH
71507: EMPTY
71508: LIST
71509: LIST
71510: PUSH
71511: LD_INT 3
71513: PUSH
71514: LD_INT 4
71516: PUSH
71517: EMPTY
71518: LIST
71519: LIST
71520: PUSH
71521: LD_INT 3
71523: PUSH
71524: LD_INT 3
71526: PUSH
71527: EMPTY
71528: LIST
71529: LIST
71530: PUSH
71531: LD_INT 5
71533: PUSH
71534: LD_INT 3
71536: PUSH
71537: EMPTY
71538: LIST
71539: LIST
71540: PUSH
71541: LD_INT 3
71543: PUSH
71544: LD_INT 5
71546: PUSH
71547: EMPTY
71548: LIST
71549: LIST
71550: PUSH
71551: EMPTY
71552: LIST
71553: LIST
71554: LIST
71555: LIST
71556: LIST
71557: LIST
71558: LIST
71559: LIST
71560: LIST
71561: LIST
71562: LIST
71563: LIST
71564: LIST
71565: LIST
71566: LIST
71567: LIST
71568: LIST
71569: LIST
71570: LIST
71571: LIST
71572: LIST
71573: LIST
71574: LIST
71575: LIST
71576: LIST
71577: LIST
71578: LIST
71579: LIST
71580: LIST
71581: LIST
71582: LIST
71583: LIST
71584: LIST
71585: LIST
71586: LIST
71587: LIST
71588: LIST
71589: LIST
71590: LIST
71591: LIST
71592: LIST
71593: LIST
71594: LIST
71595: LIST
71596: LIST
71597: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
71598: LD_ADDR_VAR 0 33
71602: PUSH
71603: LD_INT 4
71605: NEG
71606: PUSH
71607: LD_INT 4
71609: NEG
71610: PUSH
71611: EMPTY
71612: LIST
71613: LIST
71614: PUSH
71615: LD_INT 4
71617: NEG
71618: PUSH
71619: LD_INT 5
71621: NEG
71622: PUSH
71623: EMPTY
71624: LIST
71625: LIST
71626: PUSH
71627: LD_INT 3
71629: NEG
71630: PUSH
71631: LD_INT 4
71633: NEG
71634: PUSH
71635: EMPTY
71636: LIST
71637: LIST
71638: PUSH
71639: LD_INT 3
71641: NEG
71642: PUSH
71643: LD_INT 3
71645: NEG
71646: PUSH
71647: EMPTY
71648: LIST
71649: LIST
71650: PUSH
71651: LD_INT 4
71653: NEG
71654: PUSH
71655: LD_INT 3
71657: NEG
71658: PUSH
71659: EMPTY
71660: LIST
71661: LIST
71662: PUSH
71663: LD_INT 5
71665: NEG
71666: PUSH
71667: LD_INT 4
71669: NEG
71670: PUSH
71671: EMPTY
71672: LIST
71673: LIST
71674: PUSH
71675: LD_INT 5
71677: NEG
71678: PUSH
71679: LD_INT 5
71681: NEG
71682: PUSH
71683: EMPTY
71684: LIST
71685: LIST
71686: PUSH
71687: LD_INT 3
71689: NEG
71690: PUSH
71691: LD_INT 5
71693: NEG
71694: PUSH
71695: EMPTY
71696: LIST
71697: LIST
71698: PUSH
71699: LD_INT 5
71701: NEG
71702: PUSH
71703: LD_INT 3
71705: NEG
71706: PUSH
71707: EMPTY
71708: LIST
71709: LIST
71710: PUSH
71711: LD_INT 0
71713: PUSH
71714: LD_INT 3
71716: NEG
71717: PUSH
71718: EMPTY
71719: LIST
71720: LIST
71721: PUSH
71722: LD_INT 0
71724: PUSH
71725: LD_INT 4
71727: NEG
71728: PUSH
71729: EMPTY
71730: LIST
71731: LIST
71732: PUSH
71733: LD_INT 1
71735: PUSH
71736: LD_INT 3
71738: NEG
71739: PUSH
71740: EMPTY
71741: LIST
71742: LIST
71743: PUSH
71744: LD_INT 1
71746: PUSH
71747: LD_INT 2
71749: NEG
71750: PUSH
71751: EMPTY
71752: LIST
71753: LIST
71754: PUSH
71755: LD_INT 0
71757: PUSH
71758: LD_INT 2
71760: NEG
71761: PUSH
71762: EMPTY
71763: LIST
71764: LIST
71765: PUSH
71766: LD_INT 1
71768: NEG
71769: PUSH
71770: LD_INT 3
71772: NEG
71773: PUSH
71774: EMPTY
71775: LIST
71776: LIST
71777: PUSH
71778: LD_INT 1
71780: NEG
71781: PUSH
71782: LD_INT 4
71784: NEG
71785: PUSH
71786: EMPTY
71787: LIST
71788: LIST
71789: PUSH
71790: LD_INT 2
71792: PUSH
71793: LD_INT 2
71795: NEG
71796: PUSH
71797: EMPTY
71798: LIST
71799: LIST
71800: PUSH
71801: LD_INT 2
71803: NEG
71804: PUSH
71805: LD_INT 4
71807: NEG
71808: PUSH
71809: EMPTY
71810: LIST
71811: LIST
71812: PUSH
71813: LD_INT 4
71815: PUSH
71816: LD_INT 0
71818: PUSH
71819: EMPTY
71820: LIST
71821: LIST
71822: PUSH
71823: LD_INT 4
71825: PUSH
71826: LD_INT 1
71828: NEG
71829: PUSH
71830: EMPTY
71831: LIST
71832: LIST
71833: PUSH
71834: LD_INT 5
71836: PUSH
71837: LD_INT 0
71839: PUSH
71840: EMPTY
71841: LIST
71842: LIST
71843: PUSH
71844: LD_INT 5
71846: PUSH
71847: LD_INT 1
71849: PUSH
71850: EMPTY
71851: LIST
71852: LIST
71853: PUSH
71854: LD_INT 4
71856: PUSH
71857: LD_INT 1
71859: PUSH
71860: EMPTY
71861: LIST
71862: LIST
71863: PUSH
71864: LD_INT 3
71866: PUSH
71867: LD_INT 0
71869: PUSH
71870: EMPTY
71871: LIST
71872: LIST
71873: PUSH
71874: LD_INT 3
71876: PUSH
71877: LD_INT 1
71879: NEG
71880: PUSH
71881: EMPTY
71882: LIST
71883: LIST
71884: PUSH
71885: LD_INT 3
71887: PUSH
71888: LD_INT 2
71890: NEG
71891: PUSH
71892: EMPTY
71893: LIST
71894: LIST
71895: PUSH
71896: LD_INT 5
71898: PUSH
71899: LD_INT 2
71901: PUSH
71902: EMPTY
71903: LIST
71904: LIST
71905: PUSH
71906: LD_INT 3
71908: PUSH
71909: LD_INT 3
71911: PUSH
71912: EMPTY
71913: LIST
71914: LIST
71915: PUSH
71916: LD_INT 3
71918: PUSH
71919: LD_INT 2
71921: PUSH
71922: EMPTY
71923: LIST
71924: LIST
71925: PUSH
71926: LD_INT 4
71928: PUSH
71929: LD_INT 3
71931: PUSH
71932: EMPTY
71933: LIST
71934: LIST
71935: PUSH
71936: LD_INT 4
71938: PUSH
71939: LD_INT 4
71941: PUSH
71942: EMPTY
71943: LIST
71944: LIST
71945: PUSH
71946: LD_INT 3
71948: PUSH
71949: LD_INT 4
71951: PUSH
71952: EMPTY
71953: LIST
71954: LIST
71955: PUSH
71956: LD_INT 2
71958: PUSH
71959: LD_INT 3
71961: PUSH
71962: EMPTY
71963: LIST
71964: LIST
71965: PUSH
71966: LD_INT 2
71968: PUSH
71969: LD_INT 2
71971: PUSH
71972: EMPTY
71973: LIST
71974: LIST
71975: PUSH
71976: LD_INT 4
71978: PUSH
71979: LD_INT 2
71981: PUSH
71982: EMPTY
71983: LIST
71984: LIST
71985: PUSH
71986: LD_INT 2
71988: PUSH
71989: LD_INT 4
71991: PUSH
71992: EMPTY
71993: LIST
71994: LIST
71995: PUSH
71996: LD_INT 0
71998: PUSH
71999: LD_INT 4
72001: PUSH
72002: EMPTY
72003: LIST
72004: LIST
72005: PUSH
72006: LD_INT 0
72008: PUSH
72009: LD_INT 3
72011: PUSH
72012: EMPTY
72013: LIST
72014: LIST
72015: PUSH
72016: LD_INT 1
72018: PUSH
72019: LD_INT 4
72021: PUSH
72022: EMPTY
72023: LIST
72024: LIST
72025: PUSH
72026: LD_INT 1
72028: PUSH
72029: LD_INT 5
72031: PUSH
72032: EMPTY
72033: LIST
72034: LIST
72035: PUSH
72036: LD_INT 0
72038: PUSH
72039: LD_INT 5
72041: PUSH
72042: EMPTY
72043: LIST
72044: LIST
72045: PUSH
72046: LD_INT 1
72048: NEG
72049: PUSH
72050: LD_INT 4
72052: PUSH
72053: EMPTY
72054: LIST
72055: LIST
72056: PUSH
72057: LD_INT 1
72059: NEG
72060: PUSH
72061: LD_INT 3
72063: PUSH
72064: EMPTY
72065: LIST
72066: LIST
72067: PUSH
72068: LD_INT 2
72070: PUSH
72071: LD_INT 5
72073: PUSH
72074: EMPTY
72075: LIST
72076: LIST
72077: PUSH
72078: LD_INT 2
72080: NEG
72081: PUSH
72082: LD_INT 3
72084: PUSH
72085: EMPTY
72086: LIST
72087: LIST
72088: PUSH
72089: EMPTY
72090: LIST
72091: LIST
72092: LIST
72093: LIST
72094: LIST
72095: LIST
72096: LIST
72097: LIST
72098: LIST
72099: LIST
72100: LIST
72101: LIST
72102: LIST
72103: LIST
72104: LIST
72105: LIST
72106: LIST
72107: LIST
72108: LIST
72109: LIST
72110: LIST
72111: LIST
72112: LIST
72113: LIST
72114: LIST
72115: LIST
72116: LIST
72117: LIST
72118: LIST
72119: LIST
72120: LIST
72121: LIST
72122: LIST
72123: LIST
72124: LIST
72125: LIST
72126: LIST
72127: LIST
72128: LIST
72129: LIST
72130: LIST
72131: LIST
72132: LIST
72133: LIST
72134: LIST
72135: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72136: LD_ADDR_VAR 0 34
72140: PUSH
72141: LD_INT 0
72143: PUSH
72144: LD_INT 4
72146: NEG
72147: PUSH
72148: EMPTY
72149: LIST
72150: LIST
72151: PUSH
72152: LD_INT 0
72154: PUSH
72155: LD_INT 5
72157: NEG
72158: PUSH
72159: EMPTY
72160: LIST
72161: LIST
72162: PUSH
72163: LD_INT 1
72165: PUSH
72166: LD_INT 4
72168: NEG
72169: PUSH
72170: EMPTY
72171: LIST
72172: LIST
72173: PUSH
72174: LD_INT 1
72176: PUSH
72177: LD_INT 3
72179: NEG
72180: PUSH
72181: EMPTY
72182: LIST
72183: LIST
72184: PUSH
72185: LD_INT 0
72187: PUSH
72188: LD_INT 3
72190: NEG
72191: PUSH
72192: EMPTY
72193: LIST
72194: LIST
72195: PUSH
72196: LD_INT 1
72198: NEG
72199: PUSH
72200: LD_INT 4
72202: NEG
72203: PUSH
72204: EMPTY
72205: LIST
72206: LIST
72207: PUSH
72208: LD_INT 1
72210: NEG
72211: PUSH
72212: LD_INT 5
72214: NEG
72215: PUSH
72216: EMPTY
72217: LIST
72218: LIST
72219: PUSH
72220: LD_INT 2
72222: PUSH
72223: LD_INT 3
72225: NEG
72226: PUSH
72227: EMPTY
72228: LIST
72229: LIST
72230: PUSH
72231: LD_INT 2
72233: NEG
72234: PUSH
72235: LD_INT 5
72237: NEG
72238: PUSH
72239: EMPTY
72240: LIST
72241: LIST
72242: PUSH
72243: LD_INT 3
72245: PUSH
72246: LD_INT 0
72248: PUSH
72249: EMPTY
72250: LIST
72251: LIST
72252: PUSH
72253: LD_INT 3
72255: PUSH
72256: LD_INT 1
72258: NEG
72259: PUSH
72260: EMPTY
72261: LIST
72262: LIST
72263: PUSH
72264: LD_INT 4
72266: PUSH
72267: LD_INT 0
72269: PUSH
72270: EMPTY
72271: LIST
72272: LIST
72273: PUSH
72274: LD_INT 4
72276: PUSH
72277: LD_INT 1
72279: PUSH
72280: EMPTY
72281: LIST
72282: LIST
72283: PUSH
72284: LD_INT 3
72286: PUSH
72287: LD_INT 1
72289: PUSH
72290: EMPTY
72291: LIST
72292: LIST
72293: PUSH
72294: LD_INT 2
72296: PUSH
72297: LD_INT 0
72299: PUSH
72300: EMPTY
72301: LIST
72302: LIST
72303: PUSH
72304: LD_INT 2
72306: PUSH
72307: LD_INT 1
72309: NEG
72310: PUSH
72311: EMPTY
72312: LIST
72313: LIST
72314: PUSH
72315: LD_INT 2
72317: PUSH
72318: LD_INT 2
72320: NEG
72321: PUSH
72322: EMPTY
72323: LIST
72324: LIST
72325: PUSH
72326: LD_INT 4
72328: PUSH
72329: LD_INT 2
72331: PUSH
72332: EMPTY
72333: LIST
72334: LIST
72335: PUSH
72336: LD_INT 4
72338: PUSH
72339: LD_INT 4
72341: PUSH
72342: EMPTY
72343: LIST
72344: LIST
72345: PUSH
72346: LD_INT 4
72348: PUSH
72349: LD_INT 3
72351: PUSH
72352: EMPTY
72353: LIST
72354: LIST
72355: PUSH
72356: LD_INT 5
72358: PUSH
72359: LD_INT 4
72361: PUSH
72362: EMPTY
72363: LIST
72364: LIST
72365: PUSH
72366: LD_INT 5
72368: PUSH
72369: LD_INT 5
72371: PUSH
72372: EMPTY
72373: LIST
72374: LIST
72375: PUSH
72376: LD_INT 4
72378: PUSH
72379: LD_INT 5
72381: PUSH
72382: EMPTY
72383: LIST
72384: LIST
72385: PUSH
72386: LD_INT 3
72388: PUSH
72389: LD_INT 4
72391: PUSH
72392: EMPTY
72393: LIST
72394: LIST
72395: PUSH
72396: LD_INT 3
72398: PUSH
72399: LD_INT 3
72401: PUSH
72402: EMPTY
72403: LIST
72404: LIST
72405: PUSH
72406: LD_INT 5
72408: PUSH
72409: LD_INT 3
72411: PUSH
72412: EMPTY
72413: LIST
72414: LIST
72415: PUSH
72416: LD_INT 3
72418: PUSH
72419: LD_INT 5
72421: PUSH
72422: EMPTY
72423: LIST
72424: LIST
72425: PUSH
72426: LD_INT 0
72428: PUSH
72429: LD_INT 3
72431: PUSH
72432: EMPTY
72433: LIST
72434: LIST
72435: PUSH
72436: LD_INT 0
72438: PUSH
72439: LD_INT 2
72441: PUSH
72442: EMPTY
72443: LIST
72444: LIST
72445: PUSH
72446: LD_INT 1
72448: PUSH
72449: LD_INT 3
72451: PUSH
72452: EMPTY
72453: LIST
72454: LIST
72455: PUSH
72456: LD_INT 1
72458: PUSH
72459: LD_INT 4
72461: PUSH
72462: EMPTY
72463: LIST
72464: LIST
72465: PUSH
72466: LD_INT 0
72468: PUSH
72469: LD_INT 4
72471: PUSH
72472: EMPTY
72473: LIST
72474: LIST
72475: PUSH
72476: LD_INT 1
72478: NEG
72479: PUSH
72480: LD_INT 3
72482: PUSH
72483: EMPTY
72484: LIST
72485: LIST
72486: PUSH
72487: LD_INT 1
72489: NEG
72490: PUSH
72491: LD_INT 2
72493: PUSH
72494: EMPTY
72495: LIST
72496: LIST
72497: PUSH
72498: LD_INT 2
72500: PUSH
72501: LD_INT 4
72503: PUSH
72504: EMPTY
72505: LIST
72506: LIST
72507: PUSH
72508: LD_INT 2
72510: NEG
72511: PUSH
72512: LD_INT 2
72514: PUSH
72515: EMPTY
72516: LIST
72517: LIST
72518: PUSH
72519: LD_INT 4
72521: NEG
72522: PUSH
72523: LD_INT 0
72525: PUSH
72526: EMPTY
72527: LIST
72528: LIST
72529: PUSH
72530: LD_INT 4
72532: NEG
72533: PUSH
72534: LD_INT 1
72536: NEG
72537: PUSH
72538: EMPTY
72539: LIST
72540: LIST
72541: PUSH
72542: LD_INT 3
72544: NEG
72545: PUSH
72546: LD_INT 0
72548: PUSH
72549: EMPTY
72550: LIST
72551: LIST
72552: PUSH
72553: LD_INT 3
72555: NEG
72556: PUSH
72557: LD_INT 1
72559: PUSH
72560: EMPTY
72561: LIST
72562: LIST
72563: PUSH
72564: LD_INT 4
72566: NEG
72567: PUSH
72568: LD_INT 1
72570: PUSH
72571: EMPTY
72572: LIST
72573: LIST
72574: PUSH
72575: LD_INT 5
72577: NEG
72578: PUSH
72579: LD_INT 0
72581: PUSH
72582: EMPTY
72583: LIST
72584: LIST
72585: PUSH
72586: LD_INT 5
72588: NEG
72589: PUSH
72590: LD_INT 1
72592: NEG
72593: PUSH
72594: EMPTY
72595: LIST
72596: LIST
72597: PUSH
72598: LD_INT 5
72600: NEG
72601: PUSH
72602: LD_INT 2
72604: NEG
72605: PUSH
72606: EMPTY
72607: LIST
72608: LIST
72609: PUSH
72610: LD_INT 3
72612: NEG
72613: PUSH
72614: LD_INT 2
72616: PUSH
72617: EMPTY
72618: LIST
72619: LIST
72620: PUSH
72621: EMPTY
72622: LIST
72623: LIST
72624: LIST
72625: LIST
72626: LIST
72627: LIST
72628: LIST
72629: LIST
72630: LIST
72631: LIST
72632: LIST
72633: LIST
72634: LIST
72635: LIST
72636: LIST
72637: LIST
72638: LIST
72639: LIST
72640: LIST
72641: LIST
72642: LIST
72643: LIST
72644: LIST
72645: LIST
72646: LIST
72647: LIST
72648: LIST
72649: LIST
72650: LIST
72651: LIST
72652: LIST
72653: LIST
72654: LIST
72655: LIST
72656: LIST
72657: LIST
72658: LIST
72659: LIST
72660: LIST
72661: LIST
72662: LIST
72663: LIST
72664: LIST
72665: LIST
72666: LIST
72667: ST_TO_ADDR
// end ; end ;
72668: GO 72671
72670: POP
// case btype of b_depot , b_warehouse :
72671: LD_VAR 0 1
72675: PUSH
72676: LD_INT 0
72678: DOUBLE
72679: EQUAL
72680: IFTRUE 72690
72682: LD_INT 1
72684: DOUBLE
72685: EQUAL
72686: IFTRUE 72690
72688: GO 72891
72690: POP
// case nation of nation_american :
72691: LD_VAR 0 5
72695: PUSH
72696: LD_INT 1
72698: DOUBLE
72699: EQUAL
72700: IFTRUE 72704
72702: GO 72760
72704: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
72705: LD_ADDR_VAR 0 9
72709: PUSH
72710: LD_VAR 0 11
72714: PUSH
72715: LD_VAR 0 12
72719: PUSH
72720: LD_VAR 0 13
72724: PUSH
72725: LD_VAR 0 14
72729: PUSH
72730: LD_VAR 0 15
72734: PUSH
72735: LD_VAR 0 16
72739: PUSH
72740: EMPTY
72741: LIST
72742: LIST
72743: LIST
72744: LIST
72745: LIST
72746: LIST
72747: PUSH
72748: LD_VAR 0 4
72752: PUSH
72753: LD_INT 1
72755: PLUS
72756: ARRAY
72757: ST_TO_ADDR
72758: GO 72889
72760: LD_INT 2
72762: DOUBLE
72763: EQUAL
72764: IFTRUE 72768
72766: GO 72824
72768: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
72769: LD_ADDR_VAR 0 9
72773: PUSH
72774: LD_VAR 0 17
72778: PUSH
72779: LD_VAR 0 18
72783: PUSH
72784: LD_VAR 0 19
72788: PUSH
72789: LD_VAR 0 20
72793: PUSH
72794: LD_VAR 0 21
72798: PUSH
72799: LD_VAR 0 22
72803: PUSH
72804: EMPTY
72805: LIST
72806: LIST
72807: LIST
72808: LIST
72809: LIST
72810: LIST
72811: PUSH
72812: LD_VAR 0 4
72816: PUSH
72817: LD_INT 1
72819: PLUS
72820: ARRAY
72821: ST_TO_ADDR
72822: GO 72889
72824: LD_INT 3
72826: DOUBLE
72827: EQUAL
72828: IFTRUE 72832
72830: GO 72888
72832: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
72833: LD_ADDR_VAR 0 9
72837: PUSH
72838: LD_VAR 0 23
72842: PUSH
72843: LD_VAR 0 24
72847: PUSH
72848: LD_VAR 0 25
72852: PUSH
72853: LD_VAR 0 26
72857: PUSH
72858: LD_VAR 0 27
72862: PUSH
72863: LD_VAR 0 28
72867: PUSH
72868: EMPTY
72869: LIST
72870: LIST
72871: LIST
72872: LIST
72873: LIST
72874: LIST
72875: PUSH
72876: LD_VAR 0 4
72880: PUSH
72881: LD_INT 1
72883: PLUS
72884: ARRAY
72885: ST_TO_ADDR
72886: GO 72889
72888: POP
72889: GO 73444
72891: LD_INT 2
72893: DOUBLE
72894: EQUAL
72895: IFTRUE 72905
72897: LD_INT 3
72899: DOUBLE
72900: EQUAL
72901: IFTRUE 72905
72903: GO 72961
72905: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
72906: LD_ADDR_VAR 0 9
72910: PUSH
72911: LD_VAR 0 29
72915: PUSH
72916: LD_VAR 0 30
72920: PUSH
72921: LD_VAR 0 31
72925: PUSH
72926: LD_VAR 0 32
72930: PUSH
72931: LD_VAR 0 33
72935: PUSH
72936: LD_VAR 0 34
72940: PUSH
72941: EMPTY
72942: LIST
72943: LIST
72944: LIST
72945: LIST
72946: LIST
72947: LIST
72948: PUSH
72949: LD_VAR 0 4
72953: PUSH
72954: LD_INT 1
72956: PLUS
72957: ARRAY
72958: ST_TO_ADDR
72959: GO 73444
72961: LD_INT 16
72963: DOUBLE
72964: EQUAL
72965: IFTRUE 73023
72967: LD_INT 17
72969: DOUBLE
72970: EQUAL
72971: IFTRUE 73023
72973: LD_INT 18
72975: DOUBLE
72976: EQUAL
72977: IFTRUE 73023
72979: LD_INT 19
72981: DOUBLE
72982: EQUAL
72983: IFTRUE 73023
72985: LD_INT 22
72987: DOUBLE
72988: EQUAL
72989: IFTRUE 73023
72991: LD_INT 20
72993: DOUBLE
72994: EQUAL
72995: IFTRUE 73023
72997: LD_INT 21
72999: DOUBLE
73000: EQUAL
73001: IFTRUE 73023
73003: LD_INT 23
73005: DOUBLE
73006: EQUAL
73007: IFTRUE 73023
73009: LD_INT 24
73011: DOUBLE
73012: EQUAL
73013: IFTRUE 73023
73015: LD_INT 25
73017: DOUBLE
73018: EQUAL
73019: IFTRUE 73023
73021: GO 73079
73023: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73024: LD_ADDR_VAR 0 9
73028: PUSH
73029: LD_VAR 0 35
73033: PUSH
73034: LD_VAR 0 36
73038: PUSH
73039: LD_VAR 0 37
73043: PUSH
73044: LD_VAR 0 38
73048: PUSH
73049: LD_VAR 0 39
73053: PUSH
73054: LD_VAR 0 40
73058: PUSH
73059: EMPTY
73060: LIST
73061: LIST
73062: LIST
73063: LIST
73064: LIST
73065: LIST
73066: PUSH
73067: LD_VAR 0 4
73071: PUSH
73072: LD_INT 1
73074: PLUS
73075: ARRAY
73076: ST_TO_ADDR
73077: GO 73444
73079: LD_INT 6
73081: DOUBLE
73082: EQUAL
73083: IFTRUE 73135
73085: LD_INT 7
73087: DOUBLE
73088: EQUAL
73089: IFTRUE 73135
73091: LD_INT 8
73093: DOUBLE
73094: EQUAL
73095: IFTRUE 73135
73097: LD_INT 13
73099: DOUBLE
73100: EQUAL
73101: IFTRUE 73135
73103: LD_INT 12
73105: DOUBLE
73106: EQUAL
73107: IFTRUE 73135
73109: LD_INT 15
73111: DOUBLE
73112: EQUAL
73113: IFTRUE 73135
73115: LD_INT 11
73117: DOUBLE
73118: EQUAL
73119: IFTRUE 73135
73121: LD_INT 14
73123: DOUBLE
73124: EQUAL
73125: IFTRUE 73135
73127: LD_INT 10
73129: DOUBLE
73130: EQUAL
73131: IFTRUE 73135
73133: GO 73191
73135: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73136: LD_ADDR_VAR 0 9
73140: PUSH
73141: LD_VAR 0 41
73145: PUSH
73146: LD_VAR 0 42
73150: PUSH
73151: LD_VAR 0 43
73155: PUSH
73156: LD_VAR 0 44
73160: PUSH
73161: LD_VAR 0 45
73165: PUSH
73166: LD_VAR 0 46
73170: PUSH
73171: EMPTY
73172: LIST
73173: LIST
73174: LIST
73175: LIST
73176: LIST
73177: LIST
73178: PUSH
73179: LD_VAR 0 4
73183: PUSH
73184: LD_INT 1
73186: PLUS
73187: ARRAY
73188: ST_TO_ADDR
73189: GO 73444
73191: LD_INT 36
73193: DOUBLE
73194: EQUAL
73195: IFTRUE 73199
73197: GO 73255
73199: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73200: LD_ADDR_VAR 0 9
73204: PUSH
73205: LD_VAR 0 47
73209: PUSH
73210: LD_VAR 0 48
73214: PUSH
73215: LD_VAR 0 49
73219: PUSH
73220: LD_VAR 0 50
73224: PUSH
73225: LD_VAR 0 51
73229: PUSH
73230: LD_VAR 0 52
73234: PUSH
73235: EMPTY
73236: LIST
73237: LIST
73238: LIST
73239: LIST
73240: LIST
73241: LIST
73242: PUSH
73243: LD_VAR 0 4
73247: PUSH
73248: LD_INT 1
73250: PLUS
73251: ARRAY
73252: ST_TO_ADDR
73253: GO 73444
73255: LD_INT 4
73257: DOUBLE
73258: EQUAL
73259: IFTRUE 73281
73261: LD_INT 5
73263: DOUBLE
73264: EQUAL
73265: IFTRUE 73281
73267: LD_INT 34
73269: DOUBLE
73270: EQUAL
73271: IFTRUE 73281
73273: LD_INT 37
73275: DOUBLE
73276: EQUAL
73277: IFTRUE 73281
73279: GO 73337
73281: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73282: LD_ADDR_VAR 0 9
73286: PUSH
73287: LD_VAR 0 53
73291: PUSH
73292: LD_VAR 0 54
73296: PUSH
73297: LD_VAR 0 55
73301: PUSH
73302: LD_VAR 0 56
73306: PUSH
73307: LD_VAR 0 57
73311: PUSH
73312: LD_VAR 0 58
73316: PUSH
73317: EMPTY
73318: LIST
73319: LIST
73320: LIST
73321: LIST
73322: LIST
73323: LIST
73324: PUSH
73325: LD_VAR 0 4
73329: PUSH
73330: LD_INT 1
73332: PLUS
73333: ARRAY
73334: ST_TO_ADDR
73335: GO 73444
73337: LD_INT 31
73339: DOUBLE
73340: EQUAL
73341: IFTRUE 73387
73343: LD_INT 32
73345: DOUBLE
73346: EQUAL
73347: IFTRUE 73387
73349: LD_INT 33
73351: DOUBLE
73352: EQUAL
73353: IFTRUE 73387
73355: LD_INT 27
73357: DOUBLE
73358: EQUAL
73359: IFTRUE 73387
73361: LD_INT 26
73363: DOUBLE
73364: EQUAL
73365: IFTRUE 73387
73367: LD_INT 28
73369: DOUBLE
73370: EQUAL
73371: IFTRUE 73387
73373: LD_INT 29
73375: DOUBLE
73376: EQUAL
73377: IFTRUE 73387
73379: LD_INT 30
73381: DOUBLE
73382: EQUAL
73383: IFTRUE 73387
73385: GO 73443
73387: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73388: LD_ADDR_VAR 0 9
73392: PUSH
73393: LD_VAR 0 59
73397: PUSH
73398: LD_VAR 0 60
73402: PUSH
73403: LD_VAR 0 61
73407: PUSH
73408: LD_VAR 0 62
73412: PUSH
73413: LD_VAR 0 63
73417: PUSH
73418: LD_VAR 0 64
73422: PUSH
73423: EMPTY
73424: LIST
73425: LIST
73426: LIST
73427: LIST
73428: LIST
73429: LIST
73430: PUSH
73431: LD_VAR 0 4
73435: PUSH
73436: LD_INT 1
73438: PLUS
73439: ARRAY
73440: ST_TO_ADDR
73441: GO 73444
73443: POP
// temp_list2 = [ ] ;
73444: LD_ADDR_VAR 0 10
73448: PUSH
73449: EMPTY
73450: ST_TO_ADDR
// for i in temp_list do
73451: LD_ADDR_VAR 0 8
73455: PUSH
73456: LD_VAR 0 9
73460: PUSH
73461: FOR_IN
73462: IFFALSE 73514
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73464: LD_ADDR_VAR 0 10
73468: PUSH
73469: LD_VAR 0 10
73473: PUSH
73474: LD_VAR 0 8
73478: PUSH
73479: LD_INT 1
73481: ARRAY
73482: PUSH
73483: LD_VAR 0 2
73487: PLUS
73488: PUSH
73489: LD_VAR 0 8
73493: PUSH
73494: LD_INT 2
73496: ARRAY
73497: PUSH
73498: LD_VAR 0 3
73502: PLUS
73503: PUSH
73504: EMPTY
73505: LIST
73506: LIST
73507: PUSH
73508: EMPTY
73509: LIST
73510: ADD
73511: ST_TO_ADDR
73512: GO 73461
73514: POP
73515: POP
// result = temp_list2 ;
73516: LD_ADDR_VAR 0 7
73520: PUSH
73521: LD_VAR 0 10
73525: ST_TO_ADDR
// end ;
73526: LD_VAR 0 7
73530: RET
// export function EnemyInRange ( unit , dist ) ; begin
73531: LD_INT 0
73533: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
73534: LD_ADDR_VAR 0 3
73538: PUSH
73539: LD_VAR 0 1
73543: PPUSH
73544: CALL_OW 255
73548: PPUSH
73549: LD_VAR 0 1
73553: PPUSH
73554: CALL_OW 250
73558: PPUSH
73559: LD_VAR 0 1
73563: PPUSH
73564: CALL_OW 251
73568: PPUSH
73569: LD_VAR 0 2
73573: PPUSH
73574: CALL 46904 0 4
73578: PUSH
73579: LD_INT 4
73581: ARRAY
73582: ST_TO_ADDR
// end ;
73583: LD_VAR 0 3
73587: RET
// export function PlayerSeeMe ( unit ) ; begin
73588: LD_INT 0
73590: PPUSH
// result := See ( your_side , unit ) ;
73591: LD_ADDR_VAR 0 2
73595: PUSH
73596: LD_OWVAR 2
73600: PPUSH
73601: LD_VAR 0 1
73605: PPUSH
73606: CALL_OW 292
73610: ST_TO_ADDR
// end ;
73611: LD_VAR 0 2
73615: RET
// export function ReverseDir ( unit ) ; begin
73616: LD_INT 0
73618: PPUSH
// if not unit then
73619: LD_VAR 0 1
73623: NOT
73624: IFFALSE 73628
// exit ;
73626: GO 73651
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
73628: LD_ADDR_VAR 0 2
73632: PUSH
73633: LD_VAR 0 1
73637: PPUSH
73638: CALL_OW 254
73642: PUSH
73643: LD_INT 3
73645: PLUS
73646: PUSH
73647: LD_INT 6
73649: MOD
73650: ST_TO_ADDR
// end ;
73651: LD_VAR 0 2
73655: RET
// export function ReverseArray ( array ) ; var i ; begin
73656: LD_INT 0
73658: PPUSH
73659: PPUSH
// if not array then
73660: LD_VAR 0 1
73664: NOT
73665: IFFALSE 73669
// exit ;
73667: GO 73724
// result := [ ] ;
73669: LD_ADDR_VAR 0 2
73673: PUSH
73674: EMPTY
73675: ST_TO_ADDR
// for i := array downto 1 do
73676: LD_ADDR_VAR 0 3
73680: PUSH
73681: DOUBLE
73682: LD_VAR 0 1
73686: INC
73687: ST_TO_ADDR
73688: LD_INT 1
73690: PUSH
73691: FOR_DOWNTO
73692: IFFALSE 73722
// result := Join ( result , array [ i ] ) ;
73694: LD_ADDR_VAR 0 2
73698: PUSH
73699: LD_VAR 0 2
73703: PPUSH
73704: LD_VAR 0 1
73708: PUSH
73709: LD_VAR 0 3
73713: ARRAY
73714: PPUSH
73715: CALL 78389 0 2
73719: ST_TO_ADDR
73720: GO 73691
73722: POP
73723: POP
// end ;
73724: LD_VAR 0 2
73728: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
73729: LD_INT 0
73731: PPUSH
73732: PPUSH
73733: PPUSH
73734: PPUSH
73735: PPUSH
73736: PPUSH
// if not unit or not hexes then
73737: LD_VAR 0 1
73741: NOT
73742: PUSH
73743: LD_VAR 0 2
73747: NOT
73748: OR
73749: IFFALSE 73753
// exit ;
73751: GO 73876
// dist := 9999 ;
73753: LD_ADDR_VAR 0 5
73757: PUSH
73758: LD_INT 9999
73760: ST_TO_ADDR
// for i = 1 to hexes do
73761: LD_ADDR_VAR 0 4
73765: PUSH
73766: DOUBLE
73767: LD_INT 1
73769: DEC
73770: ST_TO_ADDR
73771: LD_VAR 0 2
73775: PUSH
73776: FOR_TO
73777: IFFALSE 73864
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
73779: LD_ADDR_VAR 0 6
73783: PUSH
73784: LD_VAR 0 1
73788: PPUSH
73789: LD_VAR 0 2
73793: PUSH
73794: LD_VAR 0 4
73798: ARRAY
73799: PUSH
73800: LD_INT 1
73802: ARRAY
73803: PPUSH
73804: LD_VAR 0 2
73808: PUSH
73809: LD_VAR 0 4
73813: ARRAY
73814: PUSH
73815: LD_INT 2
73817: ARRAY
73818: PPUSH
73819: CALL_OW 297
73823: ST_TO_ADDR
// if tdist < dist then
73824: LD_VAR 0 6
73828: PUSH
73829: LD_VAR 0 5
73833: LESS
73834: IFFALSE 73862
// begin hex := hexes [ i ] ;
73836: LD_ADDR_VAR 0 8
73840: PUSH
73841: LD_VAR 0 2
73845: PUSH
73846: LD_VAR 0 4
73850: ARRAY
73851: ST_TO_ADDR
// dist := tdist ;
73852: LD_ADDR_VAR 0 5
73856: PUSH
73857: LD_VAR 0 6
73861: ST_TO_ADDR
// end ; end ;
73862: GO 73776
73864: POP
73865: POP
// result := hex ;
73866: LD_ADDR_VAR 0 3
73870: PUSH
73871: LD_VAR 0 8
73875: ST_TO_ADDR
// end ;
73876: LD_VAR 0 3
73880: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
73881: LD_INT 0
73883: PPUSH
73884: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
73885: LD_VAR 0 1
73889: NOT
73890: PUSH
73891: LD_VAR 0 1
73895: PUSH
73896: LD_INT 21
73898: PUSH
73899: LD_INT 2
73901: PUSH
73902: EMPTY
73903: LIST
73904: LIST
73905: PUSH
73906: LD_INT 23
73908: PUSH
73909: LD_INT 2
73911: PUSH
73912: EMPTY
73913: LIST
73914: LIST
73915: PUSH
73916: EMPTY
73917: LIST
73918: LIST
73919: PPUSH
73920: CALL_OW 69
73924: IN
73925: NOT
73926: OR
73927: IFFALSE 73931
// exit ;
73929: GO 73978
// for i = 1 to 3 do
73931: LD_ADDR_VAR 0 3
73935: PUSH
73936: DOUBLE
73937: LD_INT 1
73939: DEC
73940: ST_TO_ADDR
73941: LD_INT 3
73943: PUSH
73944: FOR_TO
73945: IFFALSE 73976
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
73947: LD_VAR 0 1
73951: PPUSH
73952: CALL_OW 250
73956: PPUSH
73957: LD_VAR 0 1
73961: PPUSH
73962: CALL_OW 251
73966: PPUSH
73967: LD_INT 1
73969: PPUSH
73970: CALL_OW 453
73974: GO 73944
73976: POP
73977: POP
// end ;
73978: LD_VAR 0 2
73982: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
73983: LD_INT 0
73985: PPUSH
73986: PPUSH
73987: PPUSH
73988: PPUSH
73989: PPUSH
73990: PPUSH
// if not unit or not enemy_unit then
73991: LD_VAR 0 1
73995: NOT
73996: PUSH
73997: LD_VAR 0 2
74001: NOT
74002: OR
74003: IFFALSE 74007
// exit ;
74005: GO 74474
// if GetLives ( i ) < 250 then
74007: LD_VAR 0 4
74011: PPUSH
74012: CALL_OW 256
74016: PUSH
74017: LD_INT 250
74019: LESS
74020: IFFALSE 74033
// begin ComAutodestruct ( i ) ;
74022: LD_VAR 0 4
74026: PPUSH
74027: CALL 73881 0 1
// exit ;
74031: GO 74474
// end ; x := GetX ( enemy_unit ) ;
74033: LD_ADDR_VAR 0 7
74037: PUSH
74038: LD_VAR 0 2
74042: PPUSH
74043: CALL_OW 250
74047: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74048: LD_ADDR_VAR 0 8
74052: PUSH
74053: LD_VAR 0 2
74057: PPUSH
74058: CALL_OW 251
74062: ST_TO_ADDR
// if not x or not y then
74063: LD_VAR 0 7
74067: NOT
74068: PUSH
74069: LD_VAR 0 8
74073: NOT
74074: OR
74075: IFFALSE 74079
// exit ;
74077: GO 74474
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74079: LD_ADDR_VAR 0 6
74083: PUSH
74084: LD_VAR 0 7
74088: PPUSH
74089: LD_INT 0
74091: PPUSH
74092: LD_INT 4
74094: PPUSH
74095: CALL_OW 272
74099: PUSH
74100: LD_VAR 0 8
74104: PPUSH
74105: LD_INT 0
74107: PPUSH
74108: LD_INT 4
74110: PPUSH
74111: CALL_OW 273
74115: PUSH
74116: EMPTY
74117: LIST
74118: LIST
74119: PUSH
74120: LD_VAR 0 7
74124: PPUSH
74125: LD_INT 1
74127: PPUSH
74128: LD_INT 4
74130: PPUSH
74131: CALL_OW 272
74135: PUSH
74136: LD_VAR 0 8
74140: PPUSH
74141: LD_INT 1
74143: PPUSH
74144: LD_INT 4
74146: PPUSH
74147: CALL_OW 273
74151: PUSH
74152: EMPTY
74153: LIST
74154: LIST
74155: PUSH
74156: LD_VAR 0 7
74160: PPUSH
74161: LD_INT 2
74163: PPUSH
74164: LD_INT 4
74166: PPUSH
74167: CALL_OW 272
74171: PUSH
74172: LD_VAR 0 8
74176: PPUSH
74177: LD_INT 2
74179: PPUSH
74180: LD_INT 4
74182: PPUSH
74183: CALL_OW 273
74187: PUSH
74188: EMPTY
74189: LIST
74190: LIST
74191: PUSH
74192: LD_VAR 0 7
74196: PPUSH
74197: LD_INT 3
74199: PPUSH
74200: LD_INT 4
74202: PPUSH
74203: CALL_OW 272
74207: PUSH
74208: LD_VAR 0 8
74212: PPUSH
74213: LD_INT 3
74215: PPUSH
74216: LD_INT 4
74218: PPUSH
74219: CALL_OW 273
74223: PUSH
74224: EMPTY
74225: LIST
74226: LIST
74227: PUSH
74228: LD_VAR 0 7
74232: PPUSH
74233: LD_INT 4
74235: PPUSH
74236: LD_INT 4
74238: PPUSH
74239: CALL_OW 272
74243: PUSH
74244: LD_VAR 0 8
74248: PPUSH
74249: LD_INT 4
74251: PPUSH
74252: LD_INT 4
74254: PPUSH
74255: CALL_OW 273
74259: PUSH
74260: EMPTY
74261: LIST
74262: LIST
74263: PUSH
74264: LD_VAR 0 7
74268: PPUSH
74269: LD_INT 5
74271: PPUSH
74272: LD_INT 4
74274: PPUSH
74275: CALL_OW 272
74279: PUSH
74280: LD_VAR 0 8
74284: PPUSH
74285: LD_INT 5
74287: PPUSH
74288: LD_INT 4
74290: PPUSH
74291: CALL_OW 273
74295: PUSH
74296: EMPTY
74297: LIST
74298: LIST
74299: PUSH
74300: EMPTY
74301: LIST
74302: LIST
74303: LIST
74304: LIST
74305: LIST
74306: LIST
74307: ST_TO_ADDR
// for i = tmp downto 1 do
74308: LD_ADDR_VAR 0 4
74312: PUSH
74313: DOUBLE
74314: LD_VAR 0 6
74318: INC
74319: ST_TO_ADDR
74320: LD_INT 1
74322: PUSH
74323: FOR_DOWNTO
74324: IFFALSE 74425
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74326: LD_VAR 0 6
74330: PUSH
74331: LD_VAR 0 4
74335: ARRAY
74336: PUSH
74337: LD_INT 1
74339: ARRAY
74340: PPUSH
74341: LD_VAR 0 6
74345: PUSH
74346: LD_VAR 0 4
74350: ARRAY
74351: PUSH
74352: LD_INT 2
74354: ARRAY
74355: PPUSH
74356: CALL_OW 488
74360: NOT
74361: PUSH
74362: LD_VAR 0 6
74366: PUSH
74367: LD_VAR 0 4
74371: ARRAY
74372: PUSH
74373: LD_INT 1
74375: ARRAY
74376: PPUSH
74377: LD_VAR 0 6
74381: PUSH
74382: LD_VAR 0 4
74386: ARRAY
74387: PUSH
74388: LD_INT 2
74390: ARRAY
74391: PPUSH
74392: CALL_OW 428
74396: PUSH
74397: LD_INT 0
74399: NONEQUAL
74400: OR
74401: IFFALSE 74423
// tmp := Delete ( tmp , i ) ;
74403: LD_ADDR_VAR 0 6
74407: PUSH
74408: LD_VAR 0 6
74412: PPUSH
74413: LD_VAR 0 4
74417: PPUSH
74418: CALL_OW 3
74422: ST_TO_ADDR
74423: GO 74323
74425: POP
74426: POP
// j := GetClosestHex ( unit , tmp ) ;
74427: LD_ADDR_VAR 0 5
74431: PUSH
74432: LD_VAR 0 1
74436: PPUSH
74437: LD_VAR 0 6
74441: PPUSH
74442: CALL 73729 0 2
74446: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
74447: LD_VAR 0 1
74451: PPUSH
74452: LD_VAR 0 5
74456: PUSH
74457: LD_INT 1
74459: ARRAY
74460: PPUSH
74461: LD_VAR 0 5
74465: PUSH
74466: LD_INT 2
74468: ARRAY
74469: PPUSH
74470: CALL_OW 111
// end ;
74474: LD_VAR 0 3
74478: RET
// export function PrepareApemanSoldier ( ) ; begin
74479: LD_INT 0
74481: PPUSH
// uc_nation := 0 ;
74482: LD_ADDR_OWVAR 21
74486: PUSH
74487: LD_INT 0
74489: ST_TO_ADDR
// hc_sex := sex_male ;
74490: LD_ADDR_OWVAR 27
74494: PUSH
74495: LD_INT 1
74497: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
74498: LD_ADDR_OWVAR 28
74502: PUSH
74503: LD_INT 15
74505: ST_TO_ADDR
// hc_gallery :=  ;
74506: LD_ADDR_OWVAR 33
74510: PUSH
74511: LD_STRING 
74513: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74514: LD_ADDR_OWVAR 31
74518: PUSH
74519: LD_INT 0
74521: PPUSH
74522: LD_INT 3
74524: PPUSH
74525: CALL_OW 12
74529: PUSH
74530: LD_INT 0
74532: PPUSH
74533: LD_INT 3
74535: PPUSH
74536: CALL_OW 12
74540: PUSH
74541: LD_INT 0
74543: PUSH
74544: LD_INT 0
74546: PUSH
74547: EMPTY
74548: LIST
74549: LIST
74550: LIST
74551: LIST
74552: ST_TO_ADDR
// end ;
74553: LD_VAR 0 1
74557: RET
// export function PrepareApemanEngineer ( ) ; begin
74558: LD_INT 0
74560: PPUSH
// uc_nation := 0 ;
74561: LD_ADDR_OWVAR 21
74565: PUSH
74566: LD_INT 0
74568: ST_TO_ADDR
// hc_sex := sex_male ;
74569: LD_ADDR_OWVAR 27
74573: PUSH
74574: LD_INT 1
74576: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
74577: LD_ADDR_OWVAR 28
74581: PUSH
74582: LD_INT 16
74584: ST_TO_ADDR
// hc_gallery :=  ;
74585: LD_ADDR_OWVAR 33
74589: PUSH
74590: LD_STRING 
74592: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74593: LD_ADDR_OWVAR 31
74597: PUSH
74598: LD_INT 0
74600: PPUSH
74601: LD_INT 3
74603: PPUSH
74604: CALL_OW 12
74608: PUSH
74609: LD_INT 0
74611: PPUSH
74612: LD_INT 3
74614: PPUSH
74615: CALL_OW 12
74619: PUSH
74620: LD_INT 0
74622: PUSH
74623: LD_INT 0
74625: PUSH
74626: EMPTY
74627: LIST
74628: LIST
74629: LIST
74630: LIST
74631: ST_TO_ADDR
// end ;
74632: LD_VAR 0 1
74636: RET
// export function PrepareApeman ( agressivity ) ; begin
74637: LD_INT 0
74639: PPUSH
// uc_side := 0 ;
74640: LD_ADDR_OWVAR 20
74644: PUSH
74645: LD_INT 0
74647: ST_TO_ADDR
// uc_nation := 0 ;
74648: LD_ADDR_OWVAR 21
74652: PUSH
74653: LD_INT 0
74655: ST_TO_ADDR
// hc_sex := sex_male ;
74656: LD_ADDR_OWVAR 27
74660: PUSH
74661: LD_INT 1
74663: ST_TO_ADDR
// hc_class := class_apeman ;
74664: LD_ADDR_OWVAR 28
74668: PUSH
74669: LD_INT 12
74671: ST_TO_ADDR
// hc_gallery :=  ;
74672: LD_ADDR_OWVAR 33
74676: PUSH
74677: LD_STRING 
74679: ST_TO_ADDR
// if agressivity = 0 then
74680: LD_VAR 0 1
74684: PUSH
74685: LD_INT 0
74687: EQUAL
74688: IFFALSE 74700
// hc_agressivity := 0 else
74690: LD_ADDR_OWVAR 35
74694: PUSH
74695: LD_INT 0
74697: ST_TO_ADDR
74698: GO 74721
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74700: LD_ADDR_OWVAR 35
74704: PUSH
74705: LD_VAR 0 1
74709: NEG
74710: PPUSH
74711: LD_VAR 0 1
74715: PPUSH
74716: CALL_OW 12
74720: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74721: LD_ADDR_OWVAR 31
74725: PUSH
74726: LD_INT 0
74728: PPUSH
74729: LD_INT 3
74731: PPUSH
74732: CALL_OW 12
74736: PUSH
74737: LD_INT 0
74739: PPUSH
74740: LD_INT 3
74742: PPUSH
74743: CALL_OW 12
74747: PUSH
74748: LD_INT 0
74750: PUSH
74751: LD_INT 0
74753: PUSH
74754: EMPTY
74755: LIST
74756: LIST
74757: LIST
74758: LIST
74759: ST_TO_ADDR
// end ;
74760: LD_VAR 0 2
74764: RET
// export function PrepareTiger ( agressivity ) ; begin
74765: LD_INT 0
74767: PPUSH
// uc_side := 0 ;
74768: LD_ADDR_OWVAR 20
74772: PUSH
74773: LD_INT 0
74775: ST_TO_ADDR
// uc_nation := 0 ;
74776: LD_ADDR_OWVAR 21
74780: PUSH
74781: LD_INT 0
74783: ST_TO_ADDR
// hc_class := class_tiger ;
74784: LD_ADDR_OWVAR 28
74788: PUSH
74789: LD_INT 14
74791: ST_TO_ADDR
// hc_gallery :=  ;
74792: LD_ADDR_OWVAR 33
74796: PUSH
74797: LD_STRING 
74799: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74800: LD_ADDR_OWVAR 35
74804: PUSH
74805: LD_VAR 0 1
74809: NEG
74810: PPUSH
74811: LD_VAR 0 1
74815: PPUSH
74816: CALL_OW 12
74820: ST_TO_ADDR
// end ;
74821: LD_VAR 0 2
74825: RET
// export function PrepareEnchidna ( ) ; begin
74826: LD_INT 0
74828: PPUSH
// uc_side := 0 ;
74829: LD_ADDR_OWVAR 20
74833: PUSH
74834: LD_INT 0
74836: ST_TO_ADDR
// uc_nation := 0 ;
74837: LD_ADDR_OWVAR 21
74841: PUSH
74842: LD_INT 0
74844: ST_TO_ADDR
// hc_class := class_baggie ;
74845: LD_ADDR_OWVAR 28
74849: PUSH
74850: LD_INT 13
74852: ST_TO_ADDR
// hc_gallery :=  ;
74853: LD_ADDR_OWVAR 33
74857: PUSH
74858: LD_STRING 
74860: ST_TO_ADDR
// end ;
74861: LD_VAR 0 1
74865: RET
// export function PrepareFrog ( ) ; begin
74866: LD_INT 0
74868: PPUSH
// uc_side := 0 ;
74869: LD_ADDR_OWVAR 20
74873: PUSH
74874: LD_INT 0
74876: ST_TO_ADDR
// uc_nation := 0 ;
74877: LD_ADDR_OWVAR 21
74881: PUSH
74882: LD_INT 0
74884: ST_TO_ADDR
// hc_class := class_frog ;
74885: LD_ADDR_OWVAR 28
74889: PUSH
74890: LD_INT 19
74892: ST_TO_ADDR
// hc_gallery :=  ;
74893: LD_ADDR_OWVAR 33
74897: PUSH
74898: LD_STRING 
74900: ST_TO_ADDR
// end ;
74901: LD_VAR 0 1
74905: RET
// export function PrepareFish ( ) ; begin
74906: LD_INT 0
74908: PPUSH
// uc_side := 0 ;
74909: LD_ADDR_OWVAR 20
74913: PUSH
74914: LD_INT 0
74916: ST_TO_ADDR
// uc_nation := 0 ;
74917: LD_ADDR_OWVAR 21
74921: PUSH
74922: LD_INT 0
74924: ST_TO_ADDR
// hc_class := class_fish ;
74925: LD_ADDR_OWVAR 28
74929: PUSH
74930: LD_INT 20
74932: ST_TO_ADDR
// hc_gallery :=  ;
74933: LD_ADDR_OWVAR 33
74937: PUSH
74938: LD_STRING 
74940: ST_TO_ADDR
// end ;
74941: LD_VAR 0 1
74945: RET
// export function PrepareBird ( ) ; begin
74946: LD_INT 0
74948: PPUSH
// uc_side := 0 ;
74949: LD_ADDR_OWVAR 20
74953: PUSH
74954: LD_INT 0
74956: ST_TO_ADDR
// uc_nation := 0 ;
74957: LD_ADDR_OWVAR 21
74961: PUSH
74962: LD_INT 0
74964: ST_TO_ADDR
// hc_class := class_phororhacos ;
74965: LD_ADDR_OWVAR 28
74969: PUSH
74970: LD_INT 18
74972: ST_TO_ADDR
// hc_gallery :=  ;
74973: LD_ADDR_OWVAR 33
74977: PUSH
74978: LD_STRING 
74980: ST_TO_ADDR
// end ;
74981: LD_VAR 0 1
74985: RET
// export function PrepareHorse ( ) ; begin
74986: LD_INT 0
74988: PPUSH
// uc_side := 0 ;
74989: LD_ADDR_OWVAR 20
74993: PUSH
74994: LD_INT 0
74996: ST_TO_ADDR
// uc_nation := 0 ;
74997: LD_ADDR_OWVAR 21
75001: PUSH
75002: LD_INT 0
75004: ST_TO_ADDR
// hc_class := class_horse ;
75005: LD_ADDR_OWVAR 28
75009: PUSH
75010: LD_INT 21
75012: ST_TO_ADDR
// hc_gallery :=  ;
75013: LD_ADDR_OWVAR 33
75017: PUSH
75018: LD_STRING 
75020: ST_TO_ADDR
// end ;
75021: LD_VAR 0 1
75025: RET
// export function PrepareMastodont ( ) ; begin
75026: LD_INT 0
75028: PPUSH
// uc_side := 0 ;
75029: LD_ADDR_OWVAR 20
75033: PUSH
75034: LD_INT 0
75036: ST_TO_ADDR
// uc_nation := 0 ;
75037: LD_ADDR_OWVAR 21
75041: PUSH
75042: LD_INT 0
75044: ST_TO_ADDR
// vc_chassis := class_mastodont ;
75045: LD_ADDR_OWVAR 37
75049: PUSH
75050: LD_INT 31
75052: ST_TO_ADDR
// vc_control := control_rider ;
75053: LD_ADDR_OWVAR 38
75057: PUSH
75058: LD_INT 4
75060: ST_TO_ADDR
// end ;
75061: LD_VAR 0 1
75065: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
75066: LD_INT 0
75068: PPUSH
75069: PPUSH
75070: PPUSH
// uc_side = 0 ;
75071: LD_ADDR_OWVAR 20
75075: PUSH
75076: LD_INT 0
75078: ST_TO_ADDR
// uc_nation = 0 ;
75079: LD_ADDR_OWVAR 21
75083: PUSH
75084: LD_INT 0
75086: ST_TO_ADDR
// InitHc_All ( ) ;
75087: CALL_OW 584
// InitVc ;
75091: CALL_OW 20
// if mastodonts then
75095: LD_VAR 0 6
75099: IFFALSE 75166
// for i = 1 to mastodonts do
75101: LD_ADDR_VAR 0 11
75105: PUSH
75106: DOUBLE
75107: LD_INT 1
75109: DEC
75110: ST_TO_ADDR
75111: LD_VAR 0 6
75115: PUSH
75116: FOR_TO
75117: IFFALSE 75164
// begin vc_chassis := 31 ;
75119: LD_ADDR_OWVAR 37
75123: PUSH
75124: LD_INT 31
75126: ST_TO_ADDR
// vc_control := control_rider ;
75127: LD_ADDR_OWVAR 38
75131: PUSH
75132: LD_INT 4
75134: ST_TO_ADDR
// animal := CreateVehicle ;
75135: LD_ADDR_VAR 0 12
75139: PUSH
75140: CALL_OW 45
75144: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75145: LD_VAR 0 12
75149: PPUSH
75150: LD_VAR 0 8
75154: PPUSH
75155: LD_INT 0
75157: PPUSH
75158: CALL 77294 0 3
// end ;
75162: GO 75116
75164: POP
75165: POP
// if horses then
75166: LD_VAR 0 5
75170: IFFALSE 75237
// for i = 1 to horses do
75172: LD_ADDR_VAR 0 11
75176: PUSH
75177: DOUBLE
75178: LD_INT 1
75180: DEC
75181: ST_TO_ADDR
75182: LD_VAR 0 5
75186: PUSH
75187: FOR_TO
75188: IFFALSE 75235
// begin hc_class := 21 ;
75190: LD_ADDR_OWVAR 28
75194: PUSH
75195: LD_INT 21
75197: ST_TO_ADDR
// hc_gallery :=  ;
75198: LD_ADDR_OWVAR 33
75202: PUSH
75203: LD_STRING 
75205: ST_TO_ADDR
// animal := CreateHuman ;
75206: LD_ADDR_VAR 0 12
75210: PUSH
75211: CALL_OW 44
75215: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75216: LD_VAR 0 12
75220: PPUSH
75221: LD_VAR 0 8
75225: PPUSH
75226: LD_INT 0
75228: PPUSH
75229: CALL 77294 0 3
// end ;
75233: GO 75187
75235: POP
75236: POP
// if birds then
75237: LD_VAR 0 1
75241: IFFALSE 75308
// for i = 1 to birds do
75243: LD_ADDR_VAR 0 11
75247: PUSH
75248: DOUBLE
75249: LD_INT 1
75251: DEC
75252: ST_TO_ADDR
75253: LD_VAR 0 1
75257: PUSH
75258: FOR_TO
75259: IFFALSE 75306
// begin hc_class := 18 ;
75261: LD_ADDR_OWVAR 28
75265: PUSH
75266: LD_INT 18
75268: ST_TO_ADDR
// hc_gallery =  ;
75269: LD_ADDR_OWVAR 33
75273: PUSH
75274: LD_STRING 
75276: ST_TO_ADDR
// animal := CreateHuman ;
75277: LD_ADDR_VAR 0 12
75281: PUSH
75282: CALL_OW 44
75286: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75287: LD_VAR 0 12
75291: PPUSH
75292: LD_VAR 0 8
75296: PPUSH
75297: LD_INT 0
75299: PPUSH
75300: CALL 77294 0 3
// end ;
75304: GO 75258
75306: POP
75307: POP
// if tigers then
75308: LD_VAR 0 2
75312: IFFALSE 75396
// for i = 1 to tigers do
75314: LD_ADDR_VAR 0 11
75318: PUSH
75319: DOUBLE
75320: LD_INT 1
75322: DEC
75323: ST_TO_ADDR
75324: LD_VAR 0 2
75328: PUSH
75329: FOR_TO
75330: IFFALSE 75394
// begin hc_class = class_tiger ;
75332: LD_ADDR_OWVAR 28
75336: PUSH
75337: LD_INT 14
75339: ST_TO_ADDR
// hc_gallery =  ;
75340: LD_ADDR_OWVAR 33
75344: PUSH
75345: LD_STRING 
75347: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75348: LD_ADDR_OWVAR 35
75352: PUSH
75353: LD_INT 7
75355: NEG
75356: PPUSH
75357: LD_INT 7
75359: PPUSH
75360: CALL_OW 12
75364: ST_TO_ADDR
// animal := CreateHuman ;
75365: LD_ADDR_VAR 0 12
75369: PUSH
75370: CALL_OW 44
75374: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75375: LD_VAR 0 12
75379: PPUSH
75380: LD_VAR 0 8
75384: PPUSH
75385: LD_INT 0
75387: PPUSH
75388: CALL 77294 0 3
// end ;
75392: GO 75329
75394: POP
75395: POP
// if apemans then
75396: LD_VAR 0 3
75400: IFFALSE 75523
// for i = 1 to apemans do
75402: LD_ADDR_VAR 0 11
75406: PUSH
75407: DOUBLE
75408: LD_INT 1
75410: DEC
75411: ST_TO_ADDR
75412: LD_VAR 0 3
75416: PUSH
75417: FOR_TO
75418: IFFALSE 75521
// begin hc_class = class_apeman ;
75420: LD_ADDR_OWVAR 28
75424: PUSH
75425: LD_INT 12
75427: ST_TO_ADDR
// hc_gallery =  ;
75428: LD_ADDR_OWVAR 33
75432: PUSH
75433: LD_STRING 
75435: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
75436: LD_ADDR_OWVAR 35
75440: PUSH
75441: LD_INT 2
75443: NEG
75444: PPUSH
75445: LD_INT 2
75447: PPUSH
75448: CALL_OW 12
75452: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
75453: LD_ADDR_OWVAR 31
75457: PUSH
75458: LD_INT 1
75460: PPUSH
75461: LD_INT 3
75463: PPUSH
75464: CALL_OW 12
75468: PUSH
75469: LD_INT 1
75471: PPUSH
75472: LD_INT 3
75474: PPUSH
75475: CALL_OW 12
75479: PUSH
75480: LD_INT 0
75482: PUSH
75483: LD_INT 0
75485: PUSH
75486: EMPTY
75487: LIST
75488: LIST
75489: LIST
75490: LIST
75491: ST_TO_ADDR
// animal := CreateHuman ;
75492: LD_ADDR_VAR 0 12
75496: PUSH
75497: CALL_OW 44
75501: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75502: LD_VAR 0 12
75506: PPUSH
75507: LD_VAR 0 8
75511: PPUSH
75512: LD_INT 0
75514: PPUSH
75515: CALL 77294 0 3
// end ;
75519: GO 75417
75521: POP
75522: POP
// if enchidnas then
75523: LD_VAR 0 4
75527: IFFALSE 75594
// for i = 1 to enchidnas do
75529: LD_ADDR_VAR 0 11
75533: PUSH
75534: DOUBLE
75535: LD_INT 1
75537: DEC
75538: ST_TO_ADDR
75539: LD_VAR 0 4
75543: PUSH
75544: FOR_TO
75545: IFFALSE 75592
// begin hc_class = 13 ;
75547: LD_ADDR_OWVAR 28
75551: PUSH
75552: LD_INT 13
75554: ST_TO_ADDR
// hc_gallery =  ;
75555: LD_ADDR_OWVAR 33
75559: PUSH
75560: LD_STRING 
75562: ST_TO_ADDR
// animal := CreateHuman ;
75563: LD_ADDR_VAR 0 12
75567: PUSH
75568: CALL_OW 44
75572: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75573: LD_VAR 0 12
75577: PPUSH
75578: LD_VAR 0 8
75582: PPUSH
75583: LD_INT 0
75585: PPUSH
75586: CALL 77294 0 3
// end ;
75590: GO 75544
75592: POP
75593: POP
// if fishes then
75594: LD_VAR 0 7
75598: IFFALSE 75665
// for i = 1 to fishes do
75600: LD_ADDR_VAR 0 11
75604: PUSH
75605: DOUBLE
75606: LD_INT 1
75608: DEC
75609: ST_TO_ADDR
75610: LD_VAR 0 7
75614: PUSH
75615: FOR_TO
75616: IFFALSE 75663
// begin hc_class = 20 ;
75618: LD_ADDR_OWVAR 28
75622: PUSH
75623: LD_INT 20
75625: ST_TO_ADDR
// hc_gallery =  ;
75626: LD_ADDR_OWVAR 33
75630: PUSH
75631: LD_STRING 
75633: ST_TO_ADDR
// animal := CreateHuman ;
75634: LD_ADDR_VAR 0 12
75638: PUSH
75639: CALL_OW 44
75643: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
75644: LD_VAR 0 12
75648: PPUSH
75649: LD_VAR 0 9
75653: PPUSH
75654: LD_INT 0
75656: PPUSH
75657: CALL 77294 0 3
// end ;
75661: GO 75615
75663: POP
75664: POP
// end ;
75665: LD_VAR 0 10
75669: RET
// export function WantHeal ( sci , unit ) ; begin
75670: LD_INT 0
75672: PPUSH
// if GetTaskList ( sci ) > 0 then
75673: LD_VAR 0 1
75677: PPUSH
75678: CALL_OW 437
75682: PUSH
75683: LD_INT 0
75685: GREATER
75686: IFFALSE 75756
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
75688: LD_VAR 0 1
75692: PPUSH
75693: CALL_OW 437
75697: PUSH
75698: LD_INT 1
75700: ARRAY
75701: PUSH
75702: LD_INT 1
75704: ARRAY
75705: PUSH
75706: LD_STRING l
75708: EQUAL
75709: PUSH
75710: LD_VAR 0 1
75714: PPUSH
75715: CALL_OW 437
75719: PUSH
75720: LD_INT 1
75722: ARRAY
75723: PUSH
75724: LD_INT 4
75726: ARRAY
75727: PUSH
75728: LD_VAR 0 2
75732: EQUAL
75733: AND
75734: IFFALSE 75746
// result := true else
75736: LD_ADDR_VAR 0 3
75740: PUSH
75741: LD_INT 1
75743: ST_TO_ADDR
75744: GO 75754
// result := false ;
75746: LD_ADDR_VAR 0 3
75750: PUSH
75751: LD_INT 0
75753: ST_TO_ADDR
// end else
75754: GO 75764
// result := false ;
75756: LD_ADDR_VAR 0 3
75760: PUSH
75761: LD_INT 0
75763: ST_TO_ADDR
// end ;
75764: LD_VAR 0 3
75768: RET
// export function HealTarget ( sci ) ; begin
75769: LD_INT 0
75771: PPUSH
// if not sci then
75772: LD_VAR 0 1
75776: NOT
75777: IFFALSE 75781
// exit ;
75779: GO 75846
// result := 0 ;
75781: LD_ADDR_VAR 0 2
75785: PUSH
75786: LD_INT 0
75788: ST_TO_ADDR
// if GetTaskList ( sci ) then
75789: LD_VAR 0 1
75793: PPUSH
75794: CALL_OW 437
75798: IFFALSE 75846
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
75800: LD_VAR 0 1
75804: PPUSH
75805: CALL_OW 437
75809: PUSH
75810: LD_INT 1
75812: ARRAY
75813: PUSH
75814: LD_INT 1
75816: ARRAY
75817: PUSH
75818: LD_STRING l
75820: EQUAL
75821: IFFALSE 75846
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
75823: LD_ADDR_VAR 0 2
75827: PUSH
75828: LD_VAR 0 1
75832: PPUSH
75833: CALL_OW 437
75837: PUSH
75838: LD_INT 1
75840: ARRAY
75841: PUSH
75842: LD_INT 4
75844: ARRAY
75845: ST_TO_ADDR
// end ;
75846: LD_VAR 0 2
75850: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75851: LD_INT 0
75853: PPUSH
75854: PPUSH
75855: PPUSH
75856: PPUSH
// if not base_units then
75857: LD_VAR 0 1
75861: NOT
75862: IFFALSE 75866
// exit ;
75864: GO 75953
// result := false ;
75866: LD_ADDR_VAR 0 2
75870: PUSH
75871: LD_INT 0
75873: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
75874: LD_ADDR_VAR 0 5
75878: PUSH
75879: LD_VAR 0 1
75883: PPUSH
75884: LD_INT 21
75886: PUSH
75887: LD_INT 3
75889: PUSH
75890: EMPTY
75891: LIST
75892: LIST
75893: PPUSH
75894: CALL_OW 72
75898: ST_TO_ADDR
// if not tmp then
75899: LD_VAR 0 5
75903: NOT
75904: IFFALSE 75908
// exit ;
75906: GO 75953
// for i in tmp do
75908: LD_ADDR_VAR 0 3
75912: PUSH
75913: LD_VAR 0 5
75917: PUSH
75918: FOR_IN
75919: IFFALSE 75951
// begin result := EnemyInRange ( i , 22 ) ;
75921: LD_ADDR_VAR 0 2
75925: PUSH
75926: LD_VAR 0 3
75930: PPUSH
75931: LD_INT 22
75933: PPUSH
75934: CALL 73531 0 2
75938: ST_TO_ADDR
// if result then
75939: LD_VAR 0 2
75943: IFFALSE 75949
// exit ;
75945: POP
75946: POP
75947: GO 75953
// end ;
75949: GO 75918
75951: POP
75952: POP
// end ;
75953: LD_VAR 0 2
75957: RET
// export function FilterByTag ( units , tag ) ; begin
75958: LD_INT 0
75960: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
75961: LD_ADDR_VAR 0 3
75965: PUSH
75966: LD_VAR 0 1
75970: PPUSH
75971: LD_INT 120
75973: PUSH
75974: LD_VAR 0 2
75978: PUSH
75979: EMPTY
75980: LIST
75981: LIST
75982: PPUSH
75983: CALL_OW 72
75987: ST_TO_ADDR
// end ;
75988: LD_VAR 0 3
75992: RET
// export function IsDriver ( un ) ; begin
75993: LD_INT 0
75995: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
75996: LD_ADDR_VAR 0 2
76000: PUSH
76001: LD_VAR 0 1
76005: PUSH
76006: LD_INT 55
76008: PUSH
76009: EMPTY
76010: LIST
76011: PPUSH
76012: CALL_OW 69
76016: IN
76017: ST_TO_ADDR
// end ;
76018: LD_VAR 0 2
76022: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
76023: LD_INT 0
76025: PPUSH
76026: PPUSH
// list := [ ] ;
76027: LD_ADDR_VAR 0 5
76031: PUSH
76032: EMPTY
76033: ST_TO_ADDR
// case d of 0 :
76034: LD_VAR 0 3
76038: PUSH
76039: LD_INT 0
76041: DOUBLE
76042: EQUAL
76043: IFTRUE 76047
76045: GO 76180
76047: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76048: LD_ADDR_VAR 0 5
76052: PUSH
76053: LD_VAR 0 1
76057: PUSH
76058: LD_INT 4
76060: MINUS
76061: PUSH
76062: LD_VAR 0 2
76066: PUSH
76067: LD_INT 4
76069: MINUS
76070: PUSH
76071: LD_INT 2
76073: PUSH
76074: EMPTY
76075: LIST
76076: LIST
76077: LIST
76078: PUSH
76079: LD_VAR 0 1
76083: PUSH
76084: LD_INT 3
76086: MINUS
76087: PUSH
76088: LD_VAR 0 2
76092: PUSH
76093: LD_INT 1
76095: PUSH
76096: EMPTY
76097: LIST
76098: LIST
76099: LIST
76100: PUSH
76101: LD_VAR 0 1
76105: PUSH
76106: LD_INT 4
76108: PLUS
76109: PUSH
76110: LD_VAR 0 2
76114: PUSH
76115: LD_INT 4
76117: PUSH
76118: EMPTY
76119: LIST
76120: LIST
76121: LIST
76122: PUSH
76123: LD_VAR 0 1
76127: PUSH
76128: LD_INT 3
76130: PLUS
76131: PUSH
76132: LD_VAR 0 2
76136: PUSH
76137: LD_INT 3
76139: PLUS
76140: PUSH
76141: LD_INT 5
76143: PUSH
76144: EMPTY
76145: LIST
76146: LIST
76147: LIST
76148: PUSH
76149: LD_VAR 0 1
76153: PUSH
76154: LD_VAR 0 2
76158: PUSH
76159: LD_INT 4
76161: PLUS
76162: PUSH
76163: LD_INT 0
76165: PUSH
76166: EMPTY
76167: LIST
76168: LIST
76169: LIST
76170: PUSH
76171: EMPTY
76172: LIST
76173: LIST
76174: LIST
76175: LIST
76176: LIST
76177: ST_TO_ADDR
// end ; 1 :
76178: GO 76878
76180: LD_INT 1
76182: DOUBLE
76183: EQUAL
76184: IFTRUE 76188
76186: GO 76321
76188: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76189: LD_ADDR_VAR 0 5
76193: PUSH
76194: LD_VAR 0 1
76198: PUSH
76199: LD_VAR 0 2
76203: PUSH
76204: LD_INT 4
76206: MINUS
76207: PUSH
76208: LD_INT 3
76210: PUSH
76211: EMPTY
76212: LIST
76213: LIST
76214: LIST
76215: PUSH
76216: LD_VAR 0 1
76220: PUSH
76221: LD_INT 3
76223: MINUS
76224: PUSH
76225: LD_VAR 0 2
76229: PUSH
76230: LD_INT 3
76232: MINUS
76233: PUSH
76234: LD_INT 2
76236: PUSH
76237: EMPTY
76238: LIST
76239: LIST
76240: LIST
76241: PUSH
76242: LD_VAR 0 1
76246: PUSH
76247: LD_INT 4
76249: MINUS
76250: PUSH
76251: LD_VAR 0 2
76255: PUSH
76256: LD_INT 1
76258: PUSH
76259: EMPTY
76260: LIST
76261: LIST
76262: LIST
76263: PUSH
76264: LD_VAR 0 1
76268: PUSH
76269: LD_VAR 0 2
76273: PUSH
76274: LD_INT 3
76276: PLUS
76277: PUSH
76278: LD_INT 0
76280: PUSH
76281: EMPTY
76282: LIST
76283: LIST
76284: LIST
76285: PUSH
76286: LD_VAR 0 1
76290: PUSH
76291: LD_INT 4
76293: PLUS
76294: PUSH
76295: LD_VAR 0 2
76299: PUSH
76300: LD_INT 4
76302: PLUS
76303: PUSH
76304: LD_INT 5
76306: PUSH
76307: EMPTY
76308: LIST
76309: LIST
76310: LIST
76311: PUSH
76312: EMPTY
76313: LIST
76314: LIST
76315: LIST
76316: LIST
76317: LIST
76318: ST_TO_ADDR
// end ; 2 :
76319: GO 76878
76321: LD_INT 2
76323: DOUBLE
76324: EQUAL
76325: IFTRUE 76329
76327: GO 76458
76329: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76330: LD_ADDR_VAR 0 5
76334: PUSH
76335: LD_VAR 0 1
76339: PUSH
76340: LD_VAR 0 2
76344: PUSH
76345: LD_INT 3
76347: MINUS
76348: PUSH
76349: LD_INT 3
76351: PUSH
76352: EMPTY
76353: LIST
76354: LIST
76355: LIST
76356: PUSH
76357: LD_VAR 0 1
76361: PUSH
76362: LD_INT 4
76364: PLUS
76365: PUSH
76366: LD_VAR 0 2
76370: PUSH
76371: LD_INT 4
76373: PUSH
76374: EMPTY
76375: LIST
76376: LIST
76377: LIST
76378: PUSH
76379: LD_VAR 0 1
76383: PUSH
76384: LD_VAR 0 2
76388: PUSH
76389: LD_INT 4
76391: PLUS
76392: PUSH
76393: LD_INT 0
76395: PUSH
76396: EMPTY
76397: LIST
76398: LIST
76399: LIST
76400: PUSH
76401: LD_VAR 0 1
76405: PUSH
76406: LD_INT 3
76408: MINUS
76409: PUSH
76410: LD_VAR 0 2
76414: PUSH
76415: LD_INT 1
76417: PUSH
76418: EMPTY
76419: LIST
76420: LIST
76421: LIST
76422: PUSH
76423: LD_VAR 0 1
76427: PUSH
76428: LD_INT 4
76430: MINUS
76431: PUSH
76432: LD_VAR 0 2
76436: PUSH
76437: LD_INT 4
76439: MINUS
76440: PUSH
76441: LD_INT 2
76443: PUSH
76444: EMPTY
76445: LIST
76446: LIST
76447: LIST
76448: PUSH
76449: EMPTY
76450: LIST
76451: LIST
76452: LIST
76453: LIST
76454: LIST
76455: ST_TO_ADDR
// end ; 3 :
76456: GO 76878
76458: LD_INT 3
76460: DOUBLE
76461: EQUAL
76462: IFTRUE 76466
76464: GO 76599
76466: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
76467: LD_ADDR_VAR 0 5
76471: PUSH
76472: LD_VAR 0 1
76476: PUSH
76477: LD_INT 3
76479: PLUS
76480: PUSH
76481: LD_VAR 0 2
76485: PUSH
76486: LD_INT 4
76488: PUSH
76489: EMPTY
76490: LIST
76491: LIST
76492: LIST
76493: PUSH
76494: LD_VAR 0 1
76498: PUSH
76499: LD_INT 4
76501: PLUS
76502: PUSH
76503: LD_VAR 0 2
76507: PUSH
76508: LD_INT 4
76510: PLUS
76511: PUSH
76512: LD_INT 5
76514: PUSH
76515: EMPTY
76516: LIST
76517: LIST
76518: LIST
76519: PUSH
76520: LD_VAR 0 1
76524: PUSH
76525: LD_INT 4
76527: MINUS
76528: PUSH
76529: LD_VAR 0 2
76533: PUSH
76534: LD_INT 1
76536: PUSH
76537: EMPTY
76538: LIST
76539: LIST
76540: LIST
76541: PUSH
76542: LD_VAR 0 1
76546: PUSH
76547: LD_VAR 0 2
76551: PUSH
76552: LD_INT 4
76554: MINUS
76555: PUSH
76556: LD_INT 3
76558: PUSH
76559: EMPTY
76560: LIST
76561: LIST
76562: LIST
76563: PUSH
76564: LD_VAR 0 1
76568: PUSH
76569: LD_INT 3
76571: MINUS
76572: PUSH
76573: LD_VAR 0 2
76577: PUSH
76578: LD_INT 3
76580: MINUS
76581: PUSH
76582: LD_INT 2
76584: PUSH
76585: EMPTY
76586: LIST
76587: LIST
76588: LIST
76589: PUSH
76590: EMPTY
76591: LIST
76592: LIST
76593: LIST
76594: LIST
76595: LIST
76596: ST_TO_ADDR
// end ; 4 :
76597: GO 76878
76599: LD_INT 4
76601: DOUBLE
76602: EQUAL
76603: IFTRUE 76607
76605: GO 76740
76607: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76608: LD_ADDR_VAR 0 5
76612: PUSH
76613: LD_VAR 0 1
76617: PUSH
76618: LD_VAR 0 2
76622: PUSH
76623: LD_INT 4
76625: PLUS
76626: PUSH
76627: LD_INT 0
76629: PUSH
76630: EMPTY
76631: LIST
76632: LIST
76633: LIST
76634: PUSH
76635: LD_VAR 0 1
76639: PUSH
76640: LD_INT 3
76642: PLUS
76643: PUSH
76644: LD_VAR 0 2
76648: PUSH
76649: LD_INT 3
76651: PLUS
76652: PUSH
76653: LD_INT 5
76655: PUSH
76656: EMPTY
76657: LIST
76658: LIST
76659: LIST
76660: PUSH
76661: LD_VAR 0 1
76665: PUSH
76666: LD_INT 4
76668: PLUS
76669: PUSH
76670: LD_VAR 0 2
76674: PUSH
76675: LD_INT 4
76677: PUSH
76678: EMPTY
76679: LIST
76680: LIST
76681: LIST
76682: PUSH
76683: LD_VAR 0 1
76687: PUSH
76688: LD_VAR 0 2
76692: PUSH
76693: LD_INT 3
76695: MINUS
76696: PUSH
76697: LD_INT 3
76699: PUSH
76700: EMPTY
76701: LIST
76702: LIST
76703: LIST
76704: PUSH
76705: LD_VAR 0 1
76709: PUSH
76710: LD_INT 4
76712: MINUS
76713: PUSH
76714: LD_VAR 0 2
76718: PUSH
76719: LD_INT 4
76721: MINUS
76722: PUSH
76723: LD_INT 2
76725: PUSH
76726: EMPTY
76727: LIST
76728: LIST
76729: LIST
76730: PUSH
76731: EMPTY
76732: LIST
76733: LIST
76734: LIST
76735: LIST
76736: LIST
76737: ST_TO_ADDR
// end ; 5 :
76738: GO 76878
76740: LD_INT 5
76742: DOUBLE
76743: EQUAL
76744: IFTRUE 76748
76746: GO 76877
76748: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
76749: LD_ADDR_VAR 0 5
76753: PUSH
76754: LD_VAR 0 1
76758: PUSH
76759: LD_INT 4
76761: MINUS
76762: PUSH
76763: LD_VAR 0 2
76767: PUSH
76768: LD_INT 1
76770: PUSH
76771: EMPTY
76772: LIST
76773: LIST
76774: LIST
76775: PUSH
76776: LD_VAR 0 1
76780: PUSH
76781: LD_VAR 0 2
76785: PUSH
76786: LD_INT 4
76788: MINUS
76789: PUSH
76790: LD_INT 3
76792: PUSH
76793: EMPTY
76794: LIST
76795: LIST
76796: LIST
76797: PUSH
76798: LD_VAR 0 1
76802: PUSH
76803: LD_INT 4
76805: PLUS
76806: PUSH
76807: LD_VAR 0 2
76811: PUSH
76812: LD_INT 4
76814: PLUS
76815: PUSH
76816: LD_INT 5
76818: PUSH
76819: EMPTY
76820: LIST
76821: LIST
76822: LIST
76823: PUSH
76824: LD_VAR 0 1
76828: PUSH
76829: LD_INT 3
76831: PLUS
76832: PUSH
76833: LD_VAR 0 2
76837: PUSH
76838: LD_INT 4
76840: PUSH
76841: EMPTY
76842: LIST
76843: LIST
76844: LIST
76845: PUSH
76846: LD_VAR 0 1
76850: PUSH
76851: LD_VAR 0 2
76855: PUSH
76856: LD_INT 3
76858: PLUS
76859: PUSH
76860: LD_INT 0
76862: PUSH
76863: EMPTY
76864: LIST
76865: LIST
76866: LIST
76867: PUSH
76868: EMPTY
76869: LIST
76870: LIST
76871: LIST
76872: LIST
76873: LIST
76874: ST_TO_ADDR
// end ; end ;
76875: GO 76878
76877: POP
// result := list ;
76878: LD_ADDR_VAR 0 4
76882: PUSH
76883: LD_VAR 0 5
76887: ST_TO_ADDR
// end ;
76888: LD_VAR 0 4
76892: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
76893: LD_INT 0
76895: PPUSH
76896: PPUSH
76897: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
76898: LD_VAR 0 1
76902: NOT
76903: PUSH
76904: LD_VAR 0 2
76908: PUSH
76909: LD_INT 1
76911: PUSH
76912: LD_INT 2
76914: PUSH
76915: LD_INT 3
76917: PUSH
76918: LD_INT 4
76920: PUSH
76921: EMPTY
76922: LIST
76923: LIST
76924: LIST
76925: LIST
76926: IN
76927: NOT
76928: OR
76929: IFFALSE 76933
// exit ;
76931: GO 77016
// tmp := [ ] ;
76933: LD_ADDR_VAR 0 5
76937: PUSH
76938: EMPTY
76939: ST_TO_ADDR
// for i in units do
76940: LD_ADDR_VAR 0 4
76944: PUSH
76945: LD_VAR 0 1
76949: PUSH
76950: FOR_IN
76951: IFFALSE 76985
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
76953: LD_ADDR_VAR 0 5
76957: PUSH
76958: LD_VAR 0 5
76962: PPUSH
76963: LD_VAR 0 4
76967: PPUSH
76968: LD_VAR 0 2
76972: PPUSH
76973: CALL_OW 259
76977: PPUSH
76978: CALL 78389 0 2
76982: ST_TO_ADDR
76983: GO 76950
76985: POP
76986: POP
// if not tmp then
76987: LD_VAR 0 5
76991: NOT
76992: IFFALSE 76996
// exit ;
76994: GO 77016
// result := SortListByListDesc ( units , tmp ) ;
76996: LD_ADDR_VAR 0 3
77000: PUSH
77001: LD_VAR 0 1
77005: PPUSH
77006: LD_VAR 0 5
77010: PPUSH
77011: CALL_OW 77
77015: ST_TO_ADDR
// end ;
77016: LD_VAR 0 3
77020: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
77021: LD_INT 0
77023: PPUSH
77024: PPUSH
77025: PPUSH
// result := false ;
77026: LD_ADDR_VAR 0 3
77030: PUSH
77031: LD_INT 0
77033: ST_TO_ADDR
// if not building then
77034: LD_VAR 0 2
77038: NOT
77039: IFFALSE 77043
// exit ;
77041: GO 77181
// x := GetX ( building ) ;
77043: LD_ADDR_VAR 0 4
77047: PUSH
77048: LD_VAR 0 2
77052: PPUSH
77053: CALL_OW 250
77057: ST_TO_ADDR
// y := GetY ( building ) ;
77058: LD_ADDR_VAR 0 5
77062: PUSH
77063: LD_VAR 0 2
77067: PPUSH
77068: CALL_OW 251
77072: ST_TO_ADDR
// if not x or not y then
77073: LD_VAR 0 4
77077: NOT
77078: PUSH
77079: LD_VAR 0 5
77083: NOT
77084: OR
77085: IFFALSE 77089
// exit ;
77087: GO 77181
// if GetTaskList ( unit ) then
77089: LD_VAR 0 1
77093: PPUSH
77094: CALL_OW 437
77098: IFFALSE 77181
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77100: LD_STRING e
77102: PUSH
77103: LD_VAR 0 1
77107: PPUSH
77108: CALL_OW 437
77112: PUSH
77113: LD_INT 1
77115: ARRAY
77116: PUSH
77117: LD_INT 1
77119: ARRAY
77120: EQUAL
77121: PUSH
77122: LD_VAR 0 4
77126: PUSH
77127: LD_VAR 0 1
77131: PPUSH
77132: CALL_OW 437
77136: PUSH
77137: LD_INT 1
77139: ARRAY
77140: PUSH
77141: LD_INT 2
77143: ARRAY
77144: EQUAL
77145: AND
77146: PUSH
77147: LD_VAR 0 5
77151: PUSH
77152: LD_VAR 0 1
77156: PPUSH
77157: CALL_OW 437
77161: PUSH
77162: LD_INT 1
77164: ARRAY
77165: PUSH
77166: LD_INT 3
77168: ARRAY
77169: EQUAL
77170: AND
77171: IFFALSE 77181
// result := true end ;
77173: LD_ADDR_VAR 0 3
77177: PUSH
77178: LD_INT 1
77180: ST_TO_ADDR
// end ;
77181: LD_VAR 0 3
77185: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77186: LD_INT 0
77188: PPUSH
// result := false ;
77189: LD_ADDR_VAR 0 4
77193: PUSH
77194: LD_INT 0
77196: ST_TO_ADDR
// if GetTaskList ( unit ) then
77197: LD_VAR 0 1
77201: PPUSH
77202: CALL_OW 437
77206: IFFALSE 77289
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77208: LD_STRING M
77210: PUSH
77211: LD_VAR 0 1
77215: PPUSH
77216: CALL_OW 437
77220: PUSH
77221: LD_INT 1
77223: ARRAY
77224: PUSH
77225: LD_INT 1
77227: ARRAY
77228: EQUAL
77229: PUSH
77230: LD_VAR 0 2
77234: PUSH
77235: LD_VAR 0 1
77239: PPUSH
77240: CALL_OW 437
77244: PUSH
77245: LD_INT 1
77247: ARRAY
77248: PUSH
77249: LD_INT 2
77251: ARRAY
77252: EQUAL
77253: AND
77254: PUSH
77255: LD_VAR 0 3
77259: PUSH
77260: LD_VAR 0 1
77264: PPUSH
77265: CALL_OW 437
77269: PUSH
77270: LD_INT 1
77272: ARRAY
77273: PUSH
77274: LD_INT 3
77276: ARRAY
77277: EQUAL
77278: AND
77279: IFFALSE 77289
// result := true ;
77281: LD_ADDR_VAR 0 4
77285: PUSH
77286: LD_INT 1
77288: ST_TO_ADDR
// end ; end ;
77289: LD_VAR 0 4
77293: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77294: LD_INT 0
77296: PPUSH
77297: PPUSH
77298: PPUSH
77299: PPUSH
// if not unit or not area then
77300: LD_VAR 0 1
77304: NOT
77305: PUSH
77306: LD_VAR 0 2
77310: NOT
77311: OR
77312: IFFALSE 77316
// exit ;
77314: GO 77492
// tmp := AreaToList ( area , i ) ;
77316: LD_ADDR_VAR 0 6
77320: PUSH
77321: LD_VAR 0 2
77325: PPUSH
77326: LD_VAR 0 5
77330: PPUSH
77331: CALL_OW 517
77335: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77336: LD_ADDR_VAR 0 5
77340: PUSH
77341: DOUBLE
77342: LD_INT 1
77344: DEC
77345: ST_TO_ADDR
77346: LD_VAR 0 6
77350: PUSH
77351: LD_INT 1
77353: ARRAY
77354: PUSH
77355: FOR_TO
77356: IFFALSE 77490
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77358: LD_ADDR_VAR 0 7
77362: PUSH
77363: LD_VAR 0 6
77367: PUSH
77368: LD_INT 1
77370: ARRAY
77371: PUSH
77372: LD_VAR 0 5
77376: ARRAY
77377: PUSH
77378: LD_VAR 0 6
77382: PUSH
77383: LD_INT 2
77385: ARRAY
77386: PUSH
77387: LD_VAR 0 5
77391: ARRAY
77392: PUSH
77393: EMPTY
77394: LIST
77395: LIST
77396: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
77397: LD_INT 92
77399: PUSH
77400: LD_VAR 0 7
77404: PUSH
77405: LD_INT 1
77407: ARRAY
77408: PUSH
77409: LD_VAR 0 7
77413: PUSH
77414: LD_INT 2
77416: ARRAY
77417: PUSH
77418: LD_INT 2
77420: PUSH
77421: EMPTY
77422: LIST
77423: LIST
77424: LIST
77425: LIST
77426: PPUSH
77427: CALL_OW 69
77431: PUSH
77432: LD_INT 0
77434: EQUAL
77435: IFFALSE 77488
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
77437: LD_VAR 0 1
77441: PPUSH
77442: LD_VAR 0 7
77446: PUSH
77447: LD_INT 1
77449: ARRAY
77450: PPUSH
77451: LD_VAR 0 7
77455: PUSH
77456: LD_INT 2
77458: ARRAY
77459: PPUSH
77460: LD_VAR 0 3
77464: PPUSH
77465: CALL_OW 48
// result := IsPlaced ( unit ) ;
77469: LD_ADDR_VAR 0 4
77473: PUSH
77474: LD_VAR 0 1
77478: PPUSH
77479: CALL_OW 305
77483: ST_TO_ADDR
// exit ;
77484: POP
77485: POP
77486: GO 77492
// end ; end ;
77488: GO 77355
77490: POP
77491: POP
// end ;
77492: LD_VAR 0 4
77496: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
77497: LD_INT 0
77499: PPUSH
77500: PPUSH
77501: PPUSH
// if not side or side > 8 then
77502: LD_VAR 0 1
77506: NOT
77507: PUSH
77508: LD_VAR 0 1
77512: PUSH
77513: LD_INT 8
77515: GREATER
77516: OR
77517: IFFALSE 77521
// exit ;
77519: GO 77708
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
77521: LD_ADDR_VAR 0 4
77525: PUSH
77526: LD_INT 22
77528: PUSH
77529: LD_VAR 0 1
77533: PUSH
77534: EMPTY
77535: LIST
77536: LIST
77537: PUSH
77538: LD_INT 21
77540: PUSH
77541: LD_INT 3
77543: PUSH
77544: EMPTY
77545: LIST
77546: LIST
77547: PUSH
77548: EMPTY
77549: LIST
77550: LIST
77551: PPUSH
77552: CALL_OW 69
77556: ST_TO_ADDR
// if not tmp then
77557: LD_VAR 0 4
77561: NOT
77562: IFFALSE 77566
// exit ;
77564: GO 77708
// enable_addtolog := true ;
77566: LD_ADDR_OWVAR 81
77570: PUSH
77571: LD_INT 1
77573: ST_TO_ADDR
// AddToLog ( [ ) ;
77574: LD_STRING [
77576: PPUSH
77577: CALL_OW 561
// for i in tmp do
77581: LD_ADDR_VAR 0 3
77585: PUSH
77586: LD_VAR 0 4
77590: PUSH
77591: FOR_IN
77592: IFFALSE 77699
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
77594: LD_STRING [
77596: PUSH
77597: LD_VAR 0 3
77601: PPUSH
77602: CALL_OW 266
77606: STR
77607: PUSH
77608: LD_STRING , 
77610: STR
77611: PUSH
77612: LD_VAR 0 3
77616: PPUSH
77617: CALL_OW 250
77621: STR
77622: PUSH
77623: LD_STRING , 
77625: STR
77626: PUSH
77627: LD_VAR 0 3
77631: PPUSH
77632: CALL_OW 251
77636: STR
77637: PUSH
77638: LD_STRING , 
77640: STR
77641: PUSH
77642: LD_VAR 0 3
77646: PPUSH
77647: CALL_OW 254
77651: STR
77652: PUSH
77653: LD_STRING , 
77655: STR
77656: PUSH
77657: LD_VAR 0 3
77661: PPUSH
77662: LD_INT 1
77664: PPUSH
77665: CALL_OW 268
77669: STR
77670: PUSH
77671: LD_STRING , 
77673: STR
77674: PUSH
77675: LD_VAR 0 3
77679: PPUSH
77680: LD_INT 2
77682: PPUSH
77683: CALL_OW 268
77687: STR
77688: PUSH
77689: LD_STRING ],
77691: STR
77692: PPUSH
77693: CALL_OW 561
// end ;
77697: GO 77591
77699: POP
77700: POP
// AddToLog ( ]; ) ;
77701: LD_STRING ];
77703: PPUSH
77704: CALL_OW 561
// end ;
77708: LD_VAR 0 2
77712: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
77713: LD_INT 0
77715: PPUSH
77716: PPUSH
77717: PPUSH
77718: PPUSH
77719: PPUSH
// if not area or not rate or not max then
77720: LD_VAR 0 1
77724: NOT
77725: PUSH
77726: LD_VAR 0 2
77730: NOT
77731: OR
77732: PUSH
77733: LD_VAR 0 4
77737: NOT
77738: OR
77739: IFFALSE 77743
// exit ;
77741: GO 77932
// while 1 do
77743: LD_INT 1
77745: IFFALSE 77932
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
77747: LD_ADDR_VAR 0 9
77751: PUSH
77752: LD_VAR 0 1
77756: PPUSH
77757: LD_INT 1
77759: PPUSH
77760: CALL_OW 287
77764: PUSH
77765: LD_INT 10
77767: MUL
77768: ST_TO_ADDR
// r := rate / 10 ;
77769: LD_ADDR_VAR 0 7
77773: PUSH
77774: LD_VAR 0 2
77778: PUSH
77779: LD_INT 10
77781: DIVREAL
77782: ST_TO_ADDR
// time := 1 1$00 ;
77783: LD_ADDR_VAR 0 8
77787: PUSH
77788: LD_INT 2100
77790: ST_TO_ADDR
// if amount < min then
77791: LD_VAR 0 9
77795: PUSH
77796: LD_VAR 0 3
77800: LESS
77801: IFFALSE 77819
// r := r * 2 else
77803: LD_ADDR_VAR 0 7
77807: PUSH
77808: LD_VAR 0 7
77812: PUSH
77813: LD_INT 2
77815: MUL
77816: ST_TO_ADDR
77817: GO 77845
// if amount > max then
77819: LD_VAR 0 9
77823: PUSH
77824: LD_VAR 0 4
77828: GREATER
77829: IFFALSE 77845
// r := r / 2 ;
77831: LD_ADDR_VAR 0 7
77835: PUSH
77836: LD_VAR 0 7
77840: PUSH
77841: LD_INT 2
77843: DIVREAL
77844: ST_TO_ADDR
// time := time / r ;
77845: LD_ADDR_VAR 0 8
77849: PUSH
77850: LD_VAR 0 8
77854: PUSH
77855: LD_VAR 0 7
77859: DIVREAL
77860: ST_TO_ADDR
// if time < 0 then
77861: LD_VAR 0 8
77865: PUSH
77866: LD_INT 0
77868: LESS
77869: IFFALSE 77886
// time := time * - 1 ;
77871: LD_ADDR_VAR 0 8
77875: PUSH
77876: LD_VAR 0 8
77880: PUSH
77881: LD_INT 1
77883: NEG
77884: MUL
77885: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
77886: LD_VAR 0 8
77890: PUSH
77891: LD_INT 35
77893: PPUSH
77894: LD_INT 875
77896: PPUSH
77897: CALL_OW 12
77901: PLUS
77902: PPUSH
77903: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
77907: LD_INT 1
77909: PPUSH
77910: LD_INT 5
77912: PPUSH
77913: CALL_OW 12
77917: PPUSH
77918: LD_VAR 0 1
77922: PPUSH
77923: LD_INT 1
77925: PPUSH
77926: CALL_OW 55
// end ;
77930: GO 77743
// end ;
77932: LD_VAR 0 5
77936: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
77937: LD_INT 0
77939: PPUSH
77940: PPUSH
77941: PPUSH
77942: PPUSH
77943: PPUSH
77944: PPUSH
77945: PPUSH
77946: PPUSH
// if not turrets or not factories then
77947: LD_VAR 0 1
77951: NOT
77952: PUSH
77953: LD_VAR 0 2
77957: NOT
77958: OR
77959: IFFALSE 77963
// exit ;
77961: GO 78270
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
77963: LD_ADDR_VAR 0 10
77967: PUSH
77968: LD_INT 5
77970: PUSH
77971: LD_INT 6
77973: PUSH
77974: EMPTY
77975: LIST
77976: LIST
77977: PUSH
77978: LD_INT 2
77980: PUSH
77981: LD_INT 4
77983: PUSH
77984: EMPTY
77985: LIST
77986: LIST
77987: PUSH
77988: LD_INT 3
77990: PUSH
77991: LD_INT 5
77993: PUSH
77994: EMPTY
77995: LIST
77996: LIST
77997: PUSH
77998: EMPTY
77999: LIST
78000: LIST
78001: LIST
78002: PUSH
78003: LD_INT 24
78005: PUSH
78006: LD_INT 25
78008: PUSH
78009: EMPTY
78010: LIST
78011: LIST
78012: PUSH
78013: LD_INT 23
78015: PUSH
78016: LD_INT 27
78018: PUSH
78019: EMPTY
78020: LIST
78021: LIST
78022: PUSH
78023: EMPTY
78024: LIST
78025: LIST
78026: PUSH
78027: LD_INT 42
78029: PUSH
78030: LD_INT 43
78032: PUSH
78033: EMPTY
78034: LIST
78035: LIST
78036: PUSH
78037: LD_INT 44
78039: PUSH
78040: LD_INT 46
78042: PUSH
78043: EMPTY
78044: LIST
78045: LIST
78046: PUSH
78047: LD_INT 45
78049: PUSH
78050: LD_INT 47
78052: PUSH
78053: EMPTY
78054: LIST
78055: LIST
78056: PUSH
78057: EMPTY
78058: LIST
78059: LIST
78060: LIST
78061: PUSH
78062: EMPTY
78063: LIST
78064: LIST
78065: LIST
78066: ST_TO_ADDR
// result := [ ] ;
78067: LD_ADDR_VAR 0 3
78071: PUSH
78072: EMPTY
78073: ST_TO_ADDR
// for i in turrets do
78074: LD_ADDR_VAR 0 4
78078: PUSH
78079: LD_VAR 0 1
78083: PUSH
78084: FOR_IN
78085: IFFALSE 78268
// begin nat := GetNation ( i ) ;
78087: LD_ADDR_VAR 0 7
78091: PUSH
78092: LD_VAR 0 4
78096: PPUSH
78097: CALL_OW 248
78101: ST_TO_ADDR
// weapon := 0 ;
78102: LD_ADDR_VAR 0 8
78106: PUSH
78107: LD_INT 0
78109: ST_TO_ADDR
// if not nat then
78110: LD_VAR 0 7
78114: NOT
78115: IFFALSE 78119
// continue ;
78117: GO 78084
// for j in list [ nat ] do
78119: LD_ADDR_VAR 0 5
78123: PUSH
78124: LD_VAR 0 10
78128: PUSH
78129: LD_VAR 0 7
78133: ARRAY
78134: PUSH
78135: FOR_IN
78136: IFFALSE 78177
// if GetBWeapon ( i ) = j [ 1 ] then
78138: LD_VAR 0 4
78142: PPUSH
78143: CALL_OW 269
78147: PUSH
78148: LD_VAR 0 5
78152: PUSH
78153: LD_INT 1
78155: ARRAY
78156: EQUAL
78157: IFFALSE 78175
// begin weapon := j [ 2 ] ;
78159: LD_ADDR_VAR 0 8
78163: PUSH
78164: LD_VAR 0 5
78168: PUSH
78169: LD_INT 2
78171: ARRAY
78172: ST_TO_ADDR
// break ;
78173: GO 78177
// end ;
78175: GO 78135
78177: POP
78178: POP
// if not weapon then
78179: LD_VAR 0 8
78183: NOT
78184: IFFALSE 78188
// continue ;
78186: GO 78084
// for k in factories do
78188: LD_ADDR_VAR 0 6
78192: PUSH
78193: LD_VAR 0 2
78197: PUSH
78198: FOR_IN
78199: IFFALSE 78264
// begin weapons := AvailableWeaponList ( k ) ;
78201: LD_ADDR_VAR 0 9
78205: PUSH
78206: LD_VAR 0 6
78210: PPUSH
78211: CALL_OW 478
78215: ST_TO_ADDR
// if not weapons then
78216: LD_VAR 0 9
78220: NOT
78221: IFFALSE 78225
// continue ;
78223: GO 78198
// if weapon in weapons then
78225: LD_VAR 0 8
78229: PUSH
78230: LD_VAR 0 9
78234: IN
78235: IFFALSE 78262
// begin result := [ i , weapon ] ;
78237: LD_ADDR_VAR 0 3
78241: PUSH
78242: LD_VAR 0 4
78246: PUSH
78247: LD_VAR 0 8
78251: PUSH
78252: EMPTY
78253: LIST
78254: LIST
78255: ST_TO_ADDR
// exit ;
78256: POP
78257: POP
78258: POP
78259: POP
78260: GO 78270
// end ; end ;
78262: GO 78198
78264: POP
78265: POP
// end ;
78266: GO 78084
78268: POP
78269: POP
// end ;
78270: LD_VAR 0 3
78274: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78275: LD_INT 0
78277: PPUSH
// if not side or side > 8 then
78278: LD_VAR 0 3
78282: NOT
78283: PUSH
78284: LD_VAR 0 3
78288: PUSH
78289: LD_INT 8
78291: GREATER
78292: OR
78293: IFFALSE 78297
// exit ;
78295: GO 78356
// if not range then
78297: LD_VAR 0 4
78301: NOT
78302: IFFALSE 78313
// range := - 12 ;
78304: LD_ADDR_VAR 0 4
78308: PUSH
78309: LD_INT 12
78311: NEG
78312: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78313: LD_VAR 0 1
78317: PPUSH
78318: LD_VAR 0 2
78322: PPUSH
78323: LD_VAR 0 3
78327: PPUSH
78328: LD_VAR 0 4
78332: PPUSH
78333: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78337: LD_VAR 0 1
78341: PPUSH
78342: LD_VAR 0 2
78346: PPUSH
78347: LD_VAR 0 3
78351: PPUSH
78352: CALL_OW 331
// end ;
78356: LD_VAR 0 5
78360: RET
// export function Video ( mode ) ; begin
78361: LD_INT 0
78363: PPUSH
// ingame_video = mode ;
78364: LD_ADDR_OWVAR 52
78368: PUSH
78369: LD_VAR 0 1
78373: ST_TO_ADDR
// interface_hidden = mode ;
78374: LD_ADDR_OWVAR 54
78378: PUSH
78379: LD_VAR 0 1
78383: ST_TO_ADDR
// end ;
78384: LD_VAR 0 2
78388: RET
// export function Join ( array , element ) ; begin
78389: LD_INT 0
78391: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78392: LD_ADDR_VAR 0 3
78396: PUSH
78397: LD_VAR 0 1
78401: PPUSH
78402: LD_VAR 0 1
78406: PUSH
78407: LD_INT 1
78409: PLUS
78410: PPUSH
78411: LD_VAR 0 2
78415: PPUSH
78416: CALL_OW 1
78420: ST_TO_ADDR
// end ;
78421: LD_VAR 0 3
78425: RET
// export function JoinUnion ( array , element ) ; begin
78426: LD_INT 0
78428: PPUSH
// result := array union element ;
78429: LD_ADDR_VAR 0 3
78433: PUSH
78434: LD_VAR 0 1
78438: PUSH
78439: LD_VAR 0 2
78443: UNION
78444: ST_TO_ADDR
// end ;
78445: LD_VAR 0 3
78449: RET
// export function GetBehemoths ( side ) ; begin
78450: LD_INT 0
78452: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
78453: LD_ADDR_VAR 0 2
78457: PUSH
78458: LD_INT 22
78460: PUSH
78461: LD_VAR 0 1
78465: PUSH
78466: EMPTY
78467: LIST
78468: LIST
78469: PUSH
78470: LD_INT 31
78472: PUSH
78473: LD_INT 25
78475: PUSH
78476: EMPTY
78477: LIST
78478: LIST
78479: PUSH
78480: EMPTY
78481: LIST
78482: LIST
78483: PPUSH
78484: CALL_OW 69
78488: ST_TO_ADDR
// end ;
78489: LD_VAR 0 2
78493: RET
// export function Shuffle ( array ) ; var i , index ; begin
78494: LD_INT 0
78496: PPUSH
78497: PPUSH
78498: PPUSH
// result := [ ] ;
78499: LD_ADDR_VAR 0 2
78503: PUSH
78504: EMPTY
78505: ST_TO_ADDR
// if not array then
78506: LD_VAR 0 1
78510: NOT
78511: IFFALSE 78515
// exit ;
78513: GO 78614
// Randomize ;
78515: CALL_OW 10
// for i = array downto 1 do
78519: LD_ADDR_VAR 0 3
78523: PUSH
78524: DOUBLE
78525: LD_VAR 0 1
78529: INC
78530: ST_TO_ADDR
78531: LD_INT 1
78533: PUSH
78534: FOR_DOWNTO
78535: IFFALSE 78612
// begin index := rand ( 1 , array ) ;
78537: LD_ADDR_VAR 0 4
78541: PUSH
78542: LD_INT 1
78544: PPUSH
78545: LD_VAR 0 1
78549: PPUSH
78550: CALL_OW 12
78554: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
78555: LD_ADDR_VAR 0 2
78559: PUSH
78560: LD_VAR 0 2
78564: PPUSH
78565: LD_VAR 0 2
78569: PUSH
78570: LD_INT 1
78572: PLUS
78573: PPUSH
78574: LD_VAR 0 1
78578: PUSH
78579: LD_VAR 0 4
78583: ARRAY
78584: PPUSH
78585: CALL_OW 2
78589: ST_TO_ADDR
// array := Delete ( array , index ) ;
78590: LD_ADDR_VAR 0 1
78594: PUSH
78595: LD_VAR 0 1
78599: PPUSH
78600: LD_VAR 0 4
78604: PPUSH
78605: CALL_OW 3
78609: ST_TO_ADDR
// end ;
78610: GO 78534
78612: POP
78613: POP
// end ;
78614: LD_VAR 0 2
78618: RET
// export function GetBaseMaterials ( base ) ; begin
78619: LD_INT 0
78621: PPUSH
// result := [ 0 , 0 , 0 ] ;
78622: LD_ADDR_VAR 0 2
78626: PUSH
78627: LD_INT 0
78629: PUSH
78630: LD_INT 0
78632: PUSH
78633: LD_INT 0
78635: PUSH
78636: EMPTY
78637: LIST
78638: LIST
78639: LIST
78640: ST_TO_ADDR
// if not base then
78641: LD_VAR 0 1
78645: NOT
78646: IFFALSE 78650
// exit ;
78648: GO 78699
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
78650: LD_ADDR_VAR 0 2
78654: PUSH
78655: LD_VAR 0 1
78659: PPUSH
78660: LD_INT 1
78662: PPUSH
78663: CALL_OW 275
78667: PUSH
78668: LD_VAR 0 1
78672: PPUSH
78673: LD_INT 2
78675: PPUSH
78676: CALL_OW 275
78680: PUSH
78681: LD_VAR 0 1
78685: PPUSH
78686: LD_INT 3
78688: PPUSH
78689: CALL_OW 275
78693: PUSH
78694: EMPTY
78695: LIST
78696: LIST
78697: LIST
78698: ST_TO_ADDR
// end ;
78699: LD_VAR 0 2
78703: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
78704: LD_INT 0
78706: PPUSH
78707: PPUSH
// result := array ;
78708: LD_ADDR_VAR 0 3
78712: PUSH
78713: LD_VAR 0 1
78717: ST_TO_ADDR
// if size >= result then
78718: LD_VAR 0 2
78722: PUSH
78723: LD_VAR 0 3
78727: GREATEREQUAL
78728: IFFALSE 78732
// exit ;
78730: GO 78782
// if size then
78732: LD_VAR 0 2
78736: IFFALSE 78782
// for i := array downto size do
78738: LD_ADDR_VAR 0 4
78742: PUSH
78743: DOUBLE
78744: LD_VAR 0 1
78748: INC
78749: ST_TO_ADDR
78750: LD_VAR 0 2
78754: PUSH
78755: FOR_DOWNTO
78756: IFFALSE 78780
// result := Delete ( result , result ) ;
78758: LD_ADDR_VAR 0 3
78762: PUSH
78763: LD_VAR 0 3
78767: PPUSH
78768: LD_VAR 0 3
78772: PPUSH
78773: CALL_OW 3
78777: ST_TO_ADDR
78778: GO 78755
78780: POP
78781: POP
// end ;
78782: LD_VAR 0 3
78786: RET
// export function ComExit ( unit ) ; var tmp ; begin
78787: LD_INT 0
78789: PPUSH
78790: PPUSH
// if not IsInUnit ( unit ) then
78791: LD_VAR 0 1
78795: PPUSH
78796: CALL_OW 310
78800: NOT
78801: IFFALSE 78805
// exit ;
78803: GO 78865
// tmp := IsInUnit ( unit ) ;
78805: LD_ADDR_VAR 0 3
78809: PUSH
78810: LD_VAR 0 1
78814: PPUSH
78815: CALL_OW 310
78819: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
78820: LD_VAR 0 3
78824: PPUSH
78825: CALL_OW 247
78829: PUSH
78830: LD_INT 2
78832: EQUAL
78833: IFFALSE 78846
// ComExitVehicle ( unit ) else
78835: LD_VAR 0 1
78839: PPUSH
78840: CALL_OW 121
78844: GO 78855
// ComExitBuilding ( unit ) ;
78846: LD_VAR 0 1
78850: PPUSH
78851: CALL_OW 122
// result := tmp ;
78855: LD_ADDR_VAR 0 2
78859: PUSH
78860: LD_VAR 0 3
78864: ST_TO_ADDR
// end ;
78865: LD_VAR 0 2
78869: RET
// export function ComExitAll ( units ) ; var i ; begin
78870: LD_INT 0
78872: PPUSH
78873: PPUSH
// if not units then
78874: LD_VAR 0 1
78878: NOT
78879: IFFALSE 78883
// exit ;
78881: GO 78909
// for i in units do
78883: LD_ADDR_VAR 0 3
78887: PUSH
78888: LD_VAR 0 1
78892: PUSH
78893: FOR_IN
78894: IFFALSE 78907
// ComExit ( i ) ;
78896: LD_VAR 0 3
78900: PPUSH
78901: CALL 78787 0 1
78905: GO 78893
78907: POP
78908: POP
// end ;
78909: LD_VAR 0 2
78913: RET
// export function ResetHc ; begin
78914: LD_INT 0
78916: PPUSH
// InitHc ;
78917: CALL_OW 19
// hc_importance := 0 ;
78921: LD_ADDR_OWVAR 32
78925: PUSH
78926: LD_INT 0
78928: ST_TO_ADDR
// end ;
78929: LD_VAR 0 1
78933: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
78934: LD_INT 0
78936: PPUSH
78937: PPUSH
78938: PPUSH
// _x := ( x1 + x2 ) div 2 ;
78939: LD_ADDR_VAR 0 6
78943: PUSH
78944: LD_VAR 0 1
78948: PUSH
78949: LD_VAR 0 3
78953: PLUS
78954: PUSH
78955: LD_INT 2
78957: DIV
78958: ST_TO_ADDR
// if _x < 0 then
78959: LD_VAR 0 6
78963: PUSH
78964: LD_INT 0
78966: LESS
78967: IFFALSE 78984
// _x := _x * - 1 ;
78969: LD_ADDR_VAR 0 6
78973: PUSH
78974: LD_VAR 0 6
78978: PUSH
78979: LD_INT 1
78981: NEG
78982: MUL
78983: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
78984: LD_ADDR_VAR 0 7
78988: PUSH
78989: LD_VAR 0 2
78993: PUSH
78994: LD_VAR 0 4
78998: PLUS
78999: PUSH
79000: LD_INT 2
79002: DIV
79003: ST_TO_ADDR
// if _y < 0 then
79004: LD_VAR 0 7
79008: PUSH
79009: LD_INT 0
79011: LESS
79012: IFFALSE 79029
// _y := _y * - 1 ;
79014: LD_ADDR_VAR 0 7
79018: PUSH
79019: LD_VAR 0 7
79023: PUSH
79024: LD_INT 1
79026: NEG
79027: MUL
79028: ST_TO_ADDR
// result := [ _x , _y ] ;
79029: LD_ADDR_VAR 0 5
79033: PUSH
79034: LD_VAR 0 6
79038: PUSH
79039: LD_VAR 0 7
79043: PUSH
79044: EMPTY
79045: LIST
79046: LIST
79047: ST_TO_ADDR
// end ;
79048: LD_VAR 0 5
79052: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
79053: LD_INT 0
79055: PPUSH
79056: PPUSH
79057: PPUSH
79058: PPUSH
// task := GetTaskList ( unit ) ;
79059: LD_ADDR_VAR 0 7
79063: PUSH
79064: LD_VAR 0 1
79068: PPUSH
79069: CALL_OW 437
79073: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
79074: LD_VAR 0 7
79078: NOT
79079: PUSH
79080: LD_VAR 0 1
79084: PPUSH
79085: LD_VAR 0 2
79089: PPUSH
79090: CALL_OW 308
79094: NOT
79095: AND
79096: IFFALSE 79100
// exit ;
79098: GO 79218
// if IsInArea ( unit , area ) then
79100: LD_VAR 0 1
79104: PPUSH
79105: LD_VAR 0 2
79109: PPUSH
79110: CALL_OW 308
79114: IFFALSE 79132
// begin ComMoveToArea ( unit , goAway ) ;
79116: LD_VAR 0 1
79120: PPUSH
79121: LD_VAR 0 3
79125: PPUSH
79126: CALL_OW 113
// exit ;
79130: GO 79218
// end ; if task [ 1 ] [ 1 ] <> M then
79132: LD_VAR 0 7
79136: PUSH
79137: LD_INT 1
79139: ARRAY
79140: PUSH
79141: LD_INT 1
79143: ARRAY
79144: PUSH
79145: LD_STRING M
79147: NONEQUAL
79148: IFFALSE 79152
// exit ;
79150: GO 79218
// x := task [ 1 ] [ 2 ] ;
79152: LD_ADDR_VAR 0 5
79156: PUSH
79157: LD_VAR 0 7
79161: PUSH
79162: LD_INT 1
79164: ARRAY
79165: PUSH
79166: LD_INT 2
79168: ARRAY
79169: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79170: LD_ADDR_VAR 0 6
79174: PUSH
79175: LD_VAR 0 7
79179: PUSH
79180: LD_INT 1
79182: ARRAY
79183: PUSH
79184: LD_INT 3
79186: ARRAY
79187: ST_TO_ADDR
// if InArea ( x , y , area ) then
79188: LD_VAR 0 5
79192: PPUSH
79193: LD_VAR 0 6
79197: PPUSH
79198: LD_VAR 0 2
79202: PPUSH
79203: CALL_OW 309
79207: IFFALSE 79218
// ComStop ( unit ) ;
79209: LD_VAR 0 1
79213: PPUSH
79214: CALL_OW 141
// end ;
79218: LD_VAR 0 4
79222: RET
// export function Abs ( value ) ; begin
79223: LD_INT 0
79225: PPUSH
// result := value ;
79226: LD_ADDR_VAR 0 2
79230: PUSH
79231: LD_VAR 0 1
79235: ST_TO_ADDR
// if value < 0 then
79236: LD_VAR 0 1
79240: PUSH
79241: LD_INT 0
79243: LESS
79244: IFFALSE 79261
// result := value * - 1 ;
79246: LD_ADDR_VAR 0 2
79250: PUSH
79251: LD_VAR 0 1
79255: PUSH
79256: LD_INT 1
79258: NEG
79259: MUL
79260: ST_TO_ADDR
// end ;
79261: LD_VAR 0 2
79265: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79266: LD_INT 0
79268: PPUSH
79269: PPUSH
79270: PPUSH
79271: PPUSH
79272: PPUSH
79273: PPUSH
79274: PPUSH
79275: PPUSH
// if not unit or not building then
79276: LD_VAR 0 1
79280: NOT
79281: PUSH
79282: LD_VAR 0 2
79286: NOT
79287: OR
79288: IFFALSE 79292
// exit ;
79290: GO 79518
// x := GetX ( building ) ;
79292: LD_ADDR_VAR 0 4
79296: PUSH
79297: LD_VAR 0 2
79301: PPUSH
79302: CALL_OW 250
79306: ST_TO_ADDR
// y := GetY ( building ) ;
79307: LD_ADDR_VAR 0 6
79311: PUSH
79312: LD_VAR 0 2
79316: PPUSH
79317: CALL_OW 251
79321: ST_TO_ADDR
// d := GetDir ( building ) ;
79322: LD_ADDR_VAR 0 8
79326: PUSH
79327: LD_VAR 0 2
79331: PPUSH
79332: CALL_OW 254
79336: ST_TO_ADDR
// r := 4 ;
79337: LD_ADDR_VAR 0 9
79341: PUSH
79342: LD_INT 4
79344: ST_TO_ADDR
// for i := 1 to 5 do
79345: LD_ADDR_VAR 0 10
79349: PUSH
79350: DOUBLE
79351: LD_INT 1
79353: DEC
79354: ST_TO_ADDR
79355: LD_INT 5
79357: PUSH
79358: FOR_TO
79359: IFFALSE 79516
// begin _x := ShiftX ( x , d , r + i ) ;
79361: LD_ADDR_VAR 0 5
79365: PUSH
79366: LD_VAR 0 4
79370: PPUSH
79371: LD_VAR 0 8
79375: PPUSH
79376: LD_VAR 0 9
79380: PUSH
79381: LD_VAR 0 10
79385: PLUS
79386: PPUSH
79387: CALL_OW 272
79391: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79392: LD_ADDR_VAR 0 7
79396: PUSH
79397: LD_VAR 0 6
79401: PPUSH
79402: LD_VAR 0 8
79406: PPUSH
79407: LD_VAR 0 9
79411: PUSH
79412: LD_VAR 0 10
79416: PLUS
79417: PPUSH
79418: CALL_OW 273
79422: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
79423: LD_VAR 0 5
79427: PPUSH
79428: LD_VAR 0 7
79432: PPUSH
79433: CALL_OW 488
79437: PUSH
79438: LD_VAR 0 5
79442: PPUSH
79443: LD_VAR 0 7
79447: PPUSH
79448: CALL_OW 428
79452: PPUSH
79453: CALL_OW 247
79457: PUSH
79458: LD_INT 3
79460: PUSH
79461: LD_INT 2
79463: PUSH
79464: EMPTY
79465: LIST
79466: LIST
79467: IN
79468: NOT
79469: AND
79470: IFFALSE 79514
// begin ComMoveXY ( unit , _x , _y ) ;
79472: LD_VAR 0 1
79476: PPUSH
79477: LD_VAR 0 5
79481: PPUSH
79482: LD_VAR 0 7
79486: PPUSH
79487: CALL_OW 111
// result := [ _x , _y ] ;
79491: LD_ADDR_VAR 0 3
79495: PUSH
79496: LD_VAR 0 5
79500: PUSH
79501: LD_VAR 0 7
79505: PUSH
79506: EMPTY
79507: LIST
79508: LIST
79509: ST_TO_ADDR
// exit ;
79510: POP
79511: POP
79512: GO 79518
// end ; end ;
79514: GO 79358
79516: POP
79517: POP
// end ;
79518: LD_VAR 0 3
79522: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
79523: LD_INT 0
79525: PPUSH
79526: PPUSH
79527: PPUSH
// result := 0 ;
79528: LD_ADDR_VAR 0 3
79532: PUSH
79533: LD_INT 0
79535: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
79536: LD_VAR 0 1
79540: PUSH
79541: LD_INT 0
79543: LESS
79544: PUSH
79545: LD_VAR 0 1
79549: PUSH
79550: LD_INT 8
79552: GREATER
79553: OR
79554: PUSH
79555: LD_VAR 0 2
79559: PUSH
79560: LD_INT 0
79562: LESS
79563: OR
79564: PUSH
79565: LD_VAR 0 2
79569: PUSH
79570: LD_INT 8
79572: GREATER
79573: OR
79574: IFFALSE 79578
// exit ;
79576: GO 79653
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
79578: LD_ADDR_VAR 0 4
79582: PUSH
79583: LD_INT 22
79585: PUSH
79586: LD_VAR 0 2
79590: PUSH
79591: EMPTY
79592: LIST
79593: LIST
79594: PPUSH
79595: CALL_OW 69
79599: PUSH
79600: FOR_IN
79601: IFFALSE 79651
// begin un := UnitShoot ( i ) ;
79603: LD_ADDR_VAR 0 5
79607: PUSH
79608: LD_VAR 0 4
79612: PPUSH
79613: CALL_OW 504
79617: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79618: LD_VAR 0 5
79622: PPUSH
79623: CALL_OW 255
79627: PUSH
79628: LD_VAR 0 1
79632: EQUAL
79633: IFFALSE 79649
// begin result := un ;
79635: LD_ADDR_VAR 0 3
79639: PUSH
79640: LD_VAR 0 5
79644: ST_TO_ADDR
// exit ;
79645: POP
79646: POP
79647: GO 79653
// end ; end ;
79649: GO 79600
79651: POP
79652: POP
// end ;
79653: LD_VAR 0 3
79657: RET
// export function GetCargoBay ( units ) ; begin
79658: LD_INT 0
79660: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
79661: LD_ADDR_VAR 0 2
79665: PUSH
79666: LD_VAR 0 1
79670: PPUSH
79671: LD_INT 2
79673: PUSH
79674: LD_INT 34
79676: PUSH
79677: LD_INT 12
79679: PUSH
79680: EMPTY
79681: LIST
79682: LIST
79683: PUSH
79684: LD_INT 34
79686: PUSH
79687: LD_INT 51
79689: PUSH
79690: EMPTY
79691: LIST
79692: LIST
79693: PUSH
79694: LD_INT 34
79696: PUSH
79697: LD_INT 32
79699: PUSH
79700: EMPTY
79701: LIST
79702: LIST
79703: PUSH
79704: LD_INT 34
79706: PUSH
79707: LD_INT 89
79709: PUSH
79710: EMPTY
79711: LIST
79712: LIST
79713: PUSH
79714: EMPTY
79715: LIST
79716: LIST
79717: LIST
79718: LIST
79719: LIST
79720: PPUSH
79721: CALL_OW 72
79725: ST_TO_ADDR
// end ;
79726: LD_VAR 0 2
79730: RET
// export function Negate ( value ) ; begin
79731: LD_INT 0
79733: PPUSH
// result := not value ;
79734: LD_ADDR_VAR 0 2
79738: PUSH
79739: LD_VAR 0 1
79743: NOT
79744: ST_TO_ADDR
// end ;
79745: LD_VAR 0 2
79749: RET
// export function Inc ( value ) ; begin
79750: LD_INT 0
79752: PPUSH
// result := value + 1 ;
79753: LD_ADDR_VAR 0 2
79757: PUSH
79758: LD_VAR 0 1
79762: PUSH
79763: LD_INT 1
79765: PLUS
79766: ST_TO_ADDR
// end ;
79767: LD_VAR 0 2
79771: RET
// export function Dec ( value ) ; begin
79772: LD_INT 0
79774: PPUSH
// result := value - 1 ;
79775: LD_ADDR_VAR 0 2
79779: PUSH
79780: LD_VAR 0 1
79784: PUSH
79785: LD_INT 1
79787: MINUS
79788: ST_TO_ADDR
// end ;
79789: LD_VAR 0 2
79793: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
79794: LD_INT 0
79796: PPUSH
79797: PPUSH
79798: PPUSH
79799: PPUSH
79800: PPUSH
79801: PPUSH
79802: PPUSH
79803: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
79804: LD_VAR 0 1
79808: PPUSH
79809: LD_VAR 0 2
79813: PPUSH
79814: CALL_OW 488
79818: NOT
79819: PUSH
79820: LD_VAR 0 3
79824: PPUSH
79825: LD_VAR 0 4
79829: PPUSH
79830: CALL_OW 488
79834: NOT
79835: OR
79836: IFFALSE 79849
// begin result := - 1 ;
79838: LD_ADDR_VAR 0 5
79842: PUSH
79843: LD_INT 1
79845: NEG
79846: ST_TO_ADDR
// exit ;
79847: GO 80084
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
79849: LD_ADDR_VAR 0 12
79853: PUSH
79854: LD_VAR 0 1
79858: PPUSH
79859: LD_VAR 0 2
79863: PPUSH
79864: LD_VAR 0 3
79868: PPUSH
79869: LD_VAR 0 4
79873: PPUSH
79874: CALL 78934 0 4
79878: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
79879: LD_ADDR_VAR 0 11
79883: PUSH
79884: LD_VAR 0 1
79888: PPUSH
79889: LD_VAR 0 2
79893: PPUSH
79894: LD_VAR 0 12
79898: PUSH
79899: LD_INT 1
79901: ARRAY
79902: PPUSH
79903: LD_VAR 0 12
79907: PUSH
79908: LD_INT 2
79910: ARRAY
79911: PPUSH
79912: CALL_OW 298
79916: ST_TO_ADDR
// distance := 9999 ;
79917: LD_ADDR_VAR 0 10
79921: PUSH
79922: LD_INT 9999
79924: ST_TO_ADDR
// for i := 0 to 5 do
79925: LD_ADDR_VAR 0 6
79929: PUSH
79930: DOUBLE
79931: LD_INT 0
79933: DEC
79934: ST_TO_ADDR
79935: LD_INT 5
79937: PUSH
79938: FOR_TO
79939: IFFALSE 80082
// begin _x := ShiftX ( x1 , i , centerDist ) ;
79941: LD_ADDR_VAR 0 7
79945: PUSH
79946: LD_VAR 0 1
79950: PPUSH
79951: LD_VAR 0 6
79955: PPUSH
79956: LD_VAR 0 11
79960: PPUSH
79961: CALL_OW 272
79965: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
79966: LD_ADDR_VAR 0 8
79970: PUSH
79971: LD_VAR 0 2
79975: PPUSH
79976: LD_VAR 0 6
79980: PPUSH
79981: LD_VAR 0 11
79985: PPUSH
79986: CALL_OW 273
79990: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
79991: LD_VAR 0 7
79995: PPUSH
79996: LD_VAR 0 8
80000: PPUSH
80001: CALL_OW 488
80005: NOT
80006: IFFALSE 80010
// continue ;
80008: GO 79938
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
80010: LD_ADDR_VAR 0 9
80014: PUSH
80015: LD_VAR 0 12
80019: PUSH
80020: LD_INT 1
80022: ARRAY
80023: PPUSH
80024: LD_VAR 0 12
80028: PUSH
80029: LD_INT 2
80031: ARRAY
80032: PPUSH
80033: LD_VAR 0 7
80037: PPUSH
80038: LD_VAR 0 8
80042: PPUSH
80043: CALL_OW 298
80047: ST_TO_ADDR
// if tmp < distance then
80048: LD_VAR 0 9
80052: PUSH
80053: LD_VAR 0 10
80057: LESS
80058: IFFALSE 80080
// begin result := i ;
80060: LD_ADDR_VAR 0 5
80064: PUSH
80065: LD_VAR 0 6
80069: ST_TO_ADDR
// distance := tmp ;
80070: LD_ADDR_VAR 0 10
80074: PUSH
80075: LD_VAR 0 9
80079: ST_TO_ADDR
// end ; end ;
80080: GO 79938
80082: POP
80083: POP
// end ;
80084: LD_VAR 0 5
80088: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80089: LD_INT 0
80091: PPUSH
80092: PPUSH
// if not driver or not IsInUnit ( driver ) then
80093: LD_VAR 0 1
80097: NOT
80098: PUSH
80099: LD_VAR 0 1
80103: PPUSH
80104: CALL_OW 310
80108: NOT
80109: OR
80110: IFFALSE 80114
// exit ;
80112: GO 80204
// vehicle := IsInUnit ( driver ) ;
80114: LD_ADDR_VAR 0 3
80118: PUSH
80119: LD_VAR 0 1
80123: PPUSH
80124: CALL_OW 310
80128: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80129: LD_VAR 0 1
80133: PPUSH
80134: LD_STRING \
80136: PUSH
80137: LD_INT 0
80139: PUSH
80140: LD_INT 0
80142: PUSH
80143: LD_INT 0
80145: PUSH
80146: LD_INT 0
80148: PUSH
80149: LD_INT 0
80151: PUSH
80152: LD_INT 0
80154: PUSH
80155: EMPTY
80156: LIST
80157: LIST
80158: LIST
80159: LIST
80160: LIST
80161: LIST
80162: LIST
80163: PUSH
80164: LD_STRING E
80166: PUSH
80167: LD_INT 0
80169: PUSH
80170: LD_INT 0
80172: PUSH
80173: LD_VAR 0 3
80177: PUSH
80178: LD_INT 0
80180: PUSH
80181: LD_INT 0
80183: PUSH
80184: LD_INT 0
80186: PUSH
80187: EMPTY
80188: LIST
80189: LIST
80190: LIST
80191: LIST
80192: LIST
80193: LIST
80194: LIST
80195: PUSH
80196: EMPTY
80197: LIST
80198: LIST
80199: PPUSH
80200: CALL_OW 446
// end ;
80204: LD_VAR 0 2
80208: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80209: LD_INT 0
80211: PPUSH
80212: PPUSH
// if not driver or not IsInUnit ( driver ) then
80213: LD_VAR 0 1
80217: NOT
80218: PUSH
80219: LD_VAR 0 1
80223: PPUSH
80224: CALL_OW 310
80228: NOT
80229: OR
80230: IFFALSE 80234
// exit ;
80232: GO 80324
// vehicle := IsInUnit ( driver ) ;
80234: LD_ADDR_VAR 0 3
80238: PUSH
80239: LD_VAR 0 1
80243: PPUSH
80244: CALL_OW 310
80248: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80249: LD_VAR 0 1
80253: PPUSH
80254: LD_STRING \
80256: PUSH
80257: LD_INT 0
80259: PUSH
80260: LD_INT 0
80262: PUSH
80263: LD_INT 0
80265: PUSH
80266: LD_INT 0
80268: PUSH
80269: LD_INT 0
80271: PUSH
80272: LD_INT 0
80274: PUSH
80275: EMPTY
80276: LIST
80277: LIST
80278: LIST
80279: LIST
80280: LIST
80281: LIST
80282: LIST
80283: PUSH
80284: LD_STRING E
80286: PUSH
80287: LD_INT 0
80289: PUSH
80290: LD_INT 0
80292: PUSH
80293: LD_VAR 0 3
80297: PUSH
80298: LD_INT 0
80300: PUSH
80301: LD_INT 0
80303: PUSH
80304: LD_INT 0
80306: PUSH
80307: EMPTY
80308: LIST
80309: LIST
80310: LIST
80311: LIST
80312: LIST
80313: LIST
80314: LIST
80315: PUSH
80316: EMPTY
80317: LIST
80318: LIST
80319: PPUSH
80320: CALL_OW 447
// end ;
80324: LD_VAR 0 2
80328: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
80329: LD_INT 0
80331: PPUSH
80332: PPUSH
80333: PPUSH
// tmp := [ ] ;
80334: LD_ADDR_VAR 0 5
80338: PUSH
80339: EMPTY
80340: ST_TO_ADDR
// for i in units do
80341: LD_ADDR_VAR 0 4
80345: PUSH
80346: LD_VAR 0 1
80350: PUSH
80351: FOR_IN
80352: IFFALSE 80390
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
80354: LD_ADDR_VAR 0 5
80358: PUSH
80359: LD_VAR 0 5
80363: PPUSH
80364: LD_VAR 0 5
80368: PUSH
80369: LD_INT 1
80371: PLUS
80372: PPUSH
80373: LD_VAR 0 4
80377: PPUSH
80378: CALL_OW 256
80382: PPUSH
80383: CALL_OW 2
80387: ST_TO_ADDR
80388: GO 80351
80390: POP
80391: POP
// if not tmp then
80392: LD_VAR 0 5
80396: NOT
80397: IFFALSE 80401
// exit ;
80399: GO 80449
// if asc then
80401: LD_VAR 0 2
80405: IFFALSE 80429
// result := SortListByListAsc ( units , tmp ) else
80407: LD_ADDR_VAR 0 3
80411: PUSH
80412: LD_VAR 0 1
80416: PPUSH
80417: LD_VAR 0 5
80421: PPUSH
80422: CALL_OW 76
80426: ST_TO_ADDR
80427: GO 80449
// result := SortListByListDesc ( units , tmp ) ;
80429: LD_ADDR_VAR 0 3
80433: PUSH
80434: LD_VAR 0 1
80438: PPUSH
80439: LD_VAR 0 5
80443: PPUSH
80444: CALL_OW 77
80448: ST_TO_ADDR
// end ;
80449: LD_VAR 0 3
80453: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
80454: LD_INT 0
80456: PPUSH
80457: PPUSH
// task := GetTaskList ( mech ) ;
80458: LD_ADDR_VAR 0 4
80462: PUSH
80463: LD_VAR 0 1
80467: PPUSH
80468: CALL_OW 437
80472: ST_TO_ADDR
// if not task then
80473: LD_VAR 0 4
80477: NOT
80478: IFFALSE 80482
// exit ;
80480: GO 80524
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
80482: LD_ADDR_VAR 0 3
80486: PUSH
80487: LD_VAR 0 4
80491: PUSH
80492: LD_INT 1
80494: ARRAY
80495: PUSH
80496: LD_INT 1
80498: ARRAY
80499: PUSH
80500: LD_STRING r
80502: EQUAL
80503: PUSH
80504: LD_VAR 0 4
80508: PUSH
80509: LD_INT 1
80511: ARRAY
80512: PUSH
80513: LD_INT 4
80515: ARRAY
80516: PUSH
80517: LD_VAR 0 2
80521: EQUAL
80522: AND
80523: ST_TO_ADDR
// end ;
80524: LD_VAR 0 3
80528: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
80529: LD_INT 0
80531: PPUSH
// SetDir ( unit , d ) ;
80532: LD_VAR 0 1
80536: PPUSH
80537: LD_VAR 0 4
80541: PPUSH
80542: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
80546: LD_VAR 0 1
80550: PPUSH
80551: LD_VAR 0 2
80555: PPUSH
80556: LD_VAR 0 3
80560: PPUSH
80561: LD_VAR 0 5
80565: PPUSH
80566: CALL_OW 48
// end ;
80570: LD_VAR 0 6
80574: RET
// export function ToNaturalNumber ( number ) ; begin
80575: LD_INT 0
80577: PPUSH
// result := number div 1 ;
80578: LD_ADDR_VAR 0 2
80582: PUSH
80583: LD_VAR 0 1
80587: PUSH
80588: LD_INT 1
80590: DIV
80591: ST_TO_ADDR
// if number < 0 then
80592: LD_VAR 0 1
80596: PUSH
80597: LD_INT 0
80599: LESS
80600: IFFALSE 80610
// result := 0 ;
80602: LD_ADDR_VAR 0 2
80606: PUSH
80607: LD_INT 0
80609: ST_TO_ADDR
// end ;
80610: LD_VAR 0 2
80614: RET
// export function SortByClass ( units , class ) ; var un ; begin
80615: LD_INT 0
80617: PPUSH
80618: PPUSH
// if not units or not class then
80619: LD_VAR 0 1
80623: NOT
80624: PUSH
80625: LD_VAR 0 2
80629: NOT
80630: OR
80631: IFFALSE 80635
// exit ;
80633: GO 80730
// result := [ ] ;
80635: LD_ADDR_VAR 0 3
80639: PUSH
80640: EMPTY
80641: ST_TO_ADDR
// for un in units do
80642: LD_ADDR_VAR 0 4
80646: PUSH
80647: LD_VAR 0 1
80651: PUSH
80652: FOR_IN
80653: IFFALSE 80728
// if GetClass ( un ) = class then
80655: LD_VAR 0 4
80659: PPUSH
80660: CALL_OW 257
80664: PUSH
80665: LD_VAR 0 2
80669: EQUAL
80670: IFFALSE 80697
// result := Insert ( result , 1 , un ) else
80672: LD_ADDR_VAR 0 3
80676: PUSH
80677: LD_VAR 0 3
80681: PPUSH
80682: LD_INT 1
80684: PPUSH
80685: LD_VAR 0 4
80689: PPUSH
80690: CALL_OW 2
80694: ST_TO_ADDR
80695: GO 80726
// result := Replace ( result , result + 1 , un ) ;
80697: LD_ADDR_VAR 0 3
80701: PUSH
80702: LD_VAR 0 3
80706: PPUSH
80707: LD_VAR 0 3
80711: PUSH
80712: LD_INT 1
80714: PLUS
80715: PPUSH
80716: LD_VAR 0 4
80720: PPUSH
80721: CALL_OW 1
80725: ST_TO_ADDR
80726: GO 80652
80728: POP
80729: POP
// end ;
80730: LD_VAR 0 3
80734: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
80735: LD_INT 0
80737: PPUSH
80738: PPUSH
80739: PPUSH
80740: PPUSH
80741: PPUSH
80742: PPUSH
80743: PPUSH
// result := [ ] ;
80744: LD_ADDR_VAR 0 4
80748: PUSH
80749: EMPTY
80750: ST_TO_ADDR
// if x - r < 0 then
80751: LD_VAR 0 1
80755: PUSH
80756: LD_VAR 0 3
80760: MINUS
80761: PUSH
80762: LD_INT 0
80764: LESS
80765: IFFALSE 80777
// min_x := 0 else
80767: LD_ADDR_VAR 0 8
80771: PUSH
80772: LD_INT 0
80774: ST_TO_ADDR
80775: GO 80793
// min_x := x - r ;
80777: LD_ADDR_VAR 0 8
80781: PUSH
80782: LD_VAR 0 1
80786: PUSH
80787: LD_VAR 0 3
80791: MINUS
80792: ST_TO_ADDR
// if y - r < 0 then
80793: LD_VAR 0 2
80797: PUSH
80798: LD_VAR 0 3
80802: MINUS
80803: PUSH
80804: LD_INT 0
80806: LESS
80807: IFFALSE 80819
// min_y := 0 else
80809: LD_ADDR_VAR 0 7
80813: PUSH
80814: LD_INT 0
80816: ST_TO_ADDR
80817: GO 80835
// min_y := y - r ;
80819: LD_ADDR_VAR 0 7
80823: PUSH
80824: LD_VAR 0 2
80828: PUSH
80829: LD_VAR 0 3
80833: MINUS
80834: ST_TO_ADDR
// max_x := x + r ;
80835: LD_ADDR_VAR 0 9
80839: PUSH
80840: LD_VAR 0 1
80844: PUSH
80845: LD_VAR 0 3
80849: PLUS
80850: ST_TO_ADDR
// max_y := y + r ;
80851: LD_ADDR_VAR 0 10
80855: PUSH
80856: LD_VAR 0 2
80860: PUSH
80861: LD_VAR 0 3
80865: PLUS
80866: ST_TO_ADDR
// for _x = min_x to max_x do
80867: LD_ADDR_VAR 0 5
80871: PUSH
80872: DOUBLE
80873: LD_VAR 0 8
80877: DEC
80878: ST_TO_ADDR
80879: LD_VAR 0 9
80883: PUSH
80884: FOR_TO
80885: IFFALSE 80986
// for _y = min_y to max_y do
80887: LD_ADDR_VAR 0 6
80891: PUSH
80892: DOUBLE
80893: LD_VAR 0 7
80897: DEC
80898: ST_TO_ADDR
80899: LD_VAR 0 10
80903: PUSH
80904: FOR_TO
80905: IFFALSE 80982
// begin if not ValidHex ( _x , _y ) then
80907: LD_VAR 0 5
80911: PPUSH
80912: LD_VAR 0 6
80916: PPUSH
80917: CALL_OW 488
80921: NOT
80922: IFFALSE 80926
// continue ;
80924: GO 80904
// if GetResourceTypeXY ( _x , _y ) then
80926: LD_VAR 0 5
80930: PPUSH
80931: LD_VAR 0 6
80935: PPUSH
80936: CALL_OW 283
80940: IFFALSE 80980
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
80942: LD_ADDR_VAR 0 4
80946: PUSH
80947: LD_VAR 0 4
80951: PPUSH
80952: LD_VAR 0 4
80956: PUSH
80957: LD_INT 1
80959: PLUS
80960: PPUSH
80961: LD_VAR 0 5
80965: PUSH
80966: LD_VAR 0 6
80970: PUSH
80971: EMPTY
80972: LIST
80973: LIST
80974: PPUSH
80975: CALL_OW 1
80979: ST_TO_ADDR
// end ;
80980: GO 80904
80982: POP
80983: POP
80984: GO 80884
80986: POP
80987: POP
// end ;
80988: LD_VAR 0 4
80992: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
80993: LD_INT 0
80995: PPUSH
80996: PPUSH
80997: PPUSH
80998: PPUSH
80999: PPUSH
81000: PPUSH
81001: PPUSH
81002: PPUSH
// if not units then
81003: LD_VAR 0 1
81007: NOT
81008: IFFALSE 81012
// exit ;
81010: GO 81540
// result := UnitFilter ( units , [ f_ok ] ) ;
81012: LD_ADDR_VAR 0 3
81016: PUSH
81017: LD_VAR 0 1
81021: PPUSH
81022: LD_INT 50
81024: PUSH
81025: EMPTY
81026: LIST
81027: PPUSH
81028: CALL_OW 72
81032: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
81033: LD_ADDR_VAR 0 8
81037: PUSH
81038: LD_VAR 0 1
81042: PUSH
81043: LD_INT 1
81045: ARRAY
81046: PPUSH
81047: CALL_OW 255
81051: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
81052: LD_ADDR_VAR 0 10
81056: PUSH
81057: LD_INT 29
81059: PUSH
81060: LD_INT 91
81062: PUSH
81063: LD_INT 49
81065: PUSH
81066: EMPTY
81067: LIST
81068: LIST
81069: LIST
81070: ST_TO_ADDR
// if not result then
81071: LD_VAR 0 3
81075: NOT
81076: IFFALSE 81080
// exit ;
81078: GO 81540
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
81080: LD_ADDR_VAR 0 5
81084: PUSH
81085: LD_INT 81
81087: PUSH
81088: LD_VAR 0 8
81092: PUSH
81093: EMPTY
81094: LIST
81095: LIST
81096: PPUSH
81097: CALL_OW 69
81101: ST_TO_ADDR
// for i in result do
81102: LD_ADDR_VAR 0 4
81106: PUSH
81107: LD_VAR 0 3
81111: PUSH
81112: FOR_IN
81113: IFFALSE 81538
// begin tag := GetTag ( i ) + 1 ;
81115: LD_ADDR_VAR 0 9
81119: PUSH
81120: LD_VAR 0 4
81124: PPUSH
81125: CALL_OW 110
81129: PUSH
81130: LD_INT 1
81132: PLUS
81133: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
81134: LD_ADDR_VAR 0 7
81138: PUSH
81139: LD_VAR 0 4
81143: PPUSH
81144: CALL_OW 250
81148: PPUSH
81149: LD_VAR 0 4
81153: PPUSH
81154: CALL_OW 251
81158: PPUSH
81159: LD_INT 4
81161: PPUSH
81162: CALL 80735 0 3
81166: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
81167: LD_VAR 0 4
81171: PPUSH
81172: CALL_OW 247
81176: PUSH
81177: LD_INT 2
81179: EQUAL
81180: PUSH
81181: LD_VAR 0 7
81185: PUSH
81186: LD_INT 2
81188: GREATER
81189: AND
81190: PUSH
81191: LD_VAR 0 4
81195: PPUSH
81196: CALL_OW 264
81200: PUSH
81201: LD_VAR 0 10
81205: IN
81206: NOT
81207: AND
81208: IFFALSE 81247
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
81210: LD_VAR 0 4
81214: PPUSH
81215: LD_VAR 0 7
81219: PUSH
81220: LD_INT 1
81222: ARRAY
81223: PUSH
81224: LD_INT 1
81226: ARRAY
81227: PPUSH
81228: LD_VAR 0 7
81232: PUSH
81233: LD_INT 1
81235: ARRAY
81236: PUSH
81237: LD_INT 2
81239: ARRAY
81240: PPUSH
81241: CALL_OW 116
81245: GO 81536
// if path > tag then
81247: LD_VAR 0 2
81251: PUSH
81252: LD_VAR 0 9
81256: GREATER
81257: IFFALSE 81465
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
81259: LD_ADDR_VAR 0 6
81263: PUSH
81264: LD_VAR 0 5
81268: PPUSH
81269: LD_INT 91
81271: PUSH
81272: LD_VAR 0 4
81276: PUSH
81277: LD_INT 8
81279: PUSH
81280: EMPTY
81281: LIST
81282: LIST
81283: LIST
81284: PPUSH
81285: CALL_OW 72
81289: ST_TO_ADDR
// if nearEnemy then
81290: LD_VAR 0 6
81294: IFFALSE 81363
// begin if GetWeapon ( i ) = ru_time_lapser then
81296: LD_VAR 0 4
81300: PPUSH
81301: CALL_OW 264
81305: PUSH
81306: LD_INT 49
81308: EQUAL
81309: IFFALSE 81337
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
81311: LD_VAR 0 4
81315: PPUSH
81316: LD_VAR 0 6
81320: PPUSH
81321: LD_VAR 0 4
81325: PPUSH
81326: CALL_OW 74
81330: PPUSH
81331: CALL_OW 112
81335: GO 81361
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
81337: LD_VAR 0 4
81341: PPUSH
81342: LD_VAR 0 6
81346: PPUSH
81347: LD_VAR 0 4
81351: PPUSH
81352: CALL_OW 74
81356: PPUSH
81357: CALL 82611 0 2
// end else
81361: GO 81463
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
81363: LD_VAR 0 4
81367: PPUSH
81368: LD_VAR 0 2
81372: PUSH
81373: LD_VAR 0 9
81377: ARRAY
81378: PUSH
81379: LD_INT 1
81381: ARRAY
81382: PPUSH
81383: LD_VAR 0 2
81387: PUSH
81388: LD_VAR 0 9
81392: ARRAY
81393: PUSH
81394: LD_INT 2
81396: ARRAY
81397: PPUSH
81398: CALL_OW 297
81402: PUSH
81403: LD_INT 6
81405: GREATER
81406: IFFALSE 81449
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
81408: LD_VAR 0 4
81412: PPUSH
81413: LD_VAR 0 2
81417: PUSH
81418: LD_VAR 0 9
81422: ARRAY
81423: PUSH
81424: LD_INT 1
81426: ARRAY
81427: PPUSH
81428: LD_VAR 0 2
81432: PUSH
81433: LD_VAR 0 9
81437: ARRAY
81438: PUSH
81439: LD_INT 2
81441: ARRAY
81442: PPUSH
81443: CALL_OW 114
81447: GO 81463
// SetTag ( i , tag ) ;
81449: LD_VAR 0 4
81453: PPUSH
81454: LD_VAR 0 9
81458: PPUSH
81459: CALL_OW 109
// end else
81463: GO 81536
// if enemy then
81465: LD_VAR 0 5
81469: IFFALSE 81536
// begin if GetWeapon ( i ) = ru_time_lapser then
81471: LD_VAR 0 4
81475: PPUSH
81476: CALL_OW 264
81480: PUSH
81481: LD_INT 49
81483: EQUAL
81484: IFFALSE 81512
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
81486: LD_VAR 0 4
81490: PPUSH
81491: LD_VAR 0 5
81495: PPUSH
81496: LD_VAR 0 4
81500: PPUSH
81501: CALL_OW 74
81505: PPUSH
81506: CALL_OW 112
81510: GO 81536
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
81512: LD_VAR 0 4
81516: PPUSH
81517: LD_VAR 0 5
81521: PPUSH
81522: LD_VAR 0 4
81526: PPUSH
81527: CALL_OW 74
81531: PPUSH
81532: CALL 82611 0 2
// end ; end ;
81536: GO 81112
81538: POP
81539: POP
// end ;
81540: LD_VAR 0 3
81544: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
81545: LD_INT 0
81547: PPUSH
81548: PPUSH
81549: PPUSH
// if not unit or IsInUnit ( unit ) then
81550: LD_VAR 0 1
81554: NOT
81555: PUSH
81556: LD_VAR 0 1
81560: PPUSH
81561: CALL_OW 310
81565: OR
81566: IFFALSE 81570
// exit ;
81568: GO 81661
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
81570: LD_ADDR_VAR 0 4
81574: PUSH
81575: LD_VAR 0 1
81579: PPUSH
81580: CALL_OW 250
81584: PPUSH
81585: LD_VAR 0 2
81589: PPUSH
81590: LD_INT 1
81592: PPUSH
81593: CALL_OW 272
81597: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
81598: LD_ADDR_VAR 0 5
81602: PUSH
81603: LD_VAR 0 1
81607: PPUSH
81608: CALL_OW 251
81612: PPUSH
81613: LD_VAR 0 2
81617: PPUSH
81618: LD_INT 1
81620: PPUSH
81621: CALL_OW 273
81625: ST_TO_ADDR
// if ValidHex ( x , y ) then
81626: LD_VAR 0 4
81630: PPUSH
81631: LD_VAR 0 5
81635: PPUSH
81636: CALL_OW 488
81640: IFFALSE 81661
// ComTurnXY ( unit , x , y ) ;
81642: LD_VAR 0 1
81646: PPUSH
81647: LD_VAR 0 4
81651: PPUSH
81652: LD_VAR 0 5
81656: PPUSH
81657: CALL_OW 118
// end ;
81661: LD_VAR 0 3
81665: RET
// export function SeeUnits ( side , units ) ; var i ; begin
81666: LD_INT 0
81668: PPUSH
81669: PPUSH
// result := false ;
81670: LD_ADDR_VAR 0 3
81674: PUSH
81675: LD_INT 0
81677: ST_TO_ADDR
// if not units then
81678: LD_VAR 0 2
81682: NOT
81683: IFFALSE 81687
// exit ;
81685: GO 81732
// for i in units do
81687: LD_ADDR_VAR 0 4
81691: PUSH
81692: LD_VAR 0 2
81696: PUSH
81697: FOR_IN
81698: IFFALSE 81730
// if See ( side , i ) then
81700: LD_VAR 0 1
81704: PPUSH
81705: LD_VAR 0 4
81709: PPUSH
81710: CALL_OW 292
81714: IFFALSE 81728
// begin result := true ;
81716: LD_ADDR_VAR 0 3
81720: PUSH
81721: LD_INT 1
81723: ST_TO_ADDR
// exit ;
81724: POP
81725: POP
81726: GO 81732
// end ;
81728: GO 81697
81730: POP
81731: POP
// end ;
81732: LD_VAR 0 3
81736: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
81737: LD_INT 0
81739: PPUSH
81740: PPUSH
81741: PPUSH
81742: PPUSH
// if not unit or not points then
81743: LD_VAR 0 1
81747: NOT
81748: PUSH
81749: LD_VAR 0 2
81753: NOT
81754: OR
81755: IFFALSE 81759
// exit ;
81757: GO 81849
// dist := 99999 ;
81759: LD_ADDR_VAR 0 5
81763: PUSH
81764: LD_INT 99999
81766: ST_TO_ADDR
// for i in points do
81767: LD_ADDR_VAR 0 4
81771: PUSH
81772: LD_VAR 0 2
81776: PUSH
81777: FOR_IN
81778: IFFALSE 81847
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
81780: LD_ADDR_VAR 0 6
81784: PUSH
81785: LD_VAR 0 1
81789: PPUSH
81790: LD_VAR 0 4
81794: PUSH
81795: LD_INT 1
81797: ARRAY
81798: PPUSH
81799: LD_VAR 0 4
81803: PUSH
81804: LD_INT 2
81806: ARRAY
81807: PPUSH
81808: CALL_OW 297
81812: ST_TO_ADDR
// if tmpDist < dist then
81813: LD_VAR 0 6
81817: PUSH
81818: LD_VAR 0 5
81822: LESS
81823: IFFALSE 81845
// begin result := i ;
81825: LD_ADDR_VAR 0 3
81829: PUSH
81830: LD_VAR 0 4
81834: ST_TO_ADDR
// dist := tmpDist ;
81835: LD_ADDR_VAR 0 5
81839: PUSH
81840: LD_VAR 0 6
81844: ST_TO_ADDR
// end ; end ;
81845: GO 81777
81847: POP
81848: POP
// end ;
81849: LD_VAR 0 3
81853: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
81854: LD_INT 0
81856: PPUSH
// uc_side := side ;
81857: LD_ADDR_OWVAR 20
81861: PUSH
81862: LD_VAR 0 1
81866: ST_TO_ADDR
// uc_nation := 3 ;
81867: LD_ADDR_OWVAR 21
81871: PUSH
81872: LD_INT 3
81874: ST_TO_ADDR
// vc_chassis := 25 ;
81875: LD_ADDR_OWVAR 37
81879: PUSH
81880: LD_INT 25
81882: ST_TO_ADDR
// vc_engine := engine_siberite ;
81883: LD_ADDR_OWVAR 39
81887: PUSH
81888: LD_INT 3
81890: ST_TO_ADDR
// vc_control := control_computer ;
81891: LD_ADDR_OWVAR 38
81895: PUSH
81896: LD_INT 3
81898: ST_TO_ADDR
// vc_weapon := 59 ;
81899: LD_ADDR_OWVAR 40
81903: PUSH
81904: LD_INT 59
81906: ST_TO_ADDR
// result := CreateVehicle ;
81907: LD_ADDR_VAR 0 5
81911: PUSH
81912: CALL_OW 45
81916: ST_TO_ADDR
// SetDir ( result , d ) ;
81917: LD_VAR 0 5
81921: PPUSH
81922: LD_VAR 0 4
81926: PPUSH
81927: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
81931: LD_VAR 0 5
81935: PPUSH
81936: LD_VAR 0 2
81940: PPUSH
81941: LD_VAR 0 3
81945: PPUSH
81946: LD_INT 0
81948: PPUSH
81949: CALL_OW 48
// end ;
81953: LD_VAR 0 5
81957: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
81958: LD_INT 0
81960: PPUSH
81961: PPUSH
81962: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
81963: LD_ADDR_VAR 0 2
81967: PUSH
81968: LD_INT 0
81970: PUSH
81971: LD_INT 0
81973: PUSH
81974: LD_INT 0
81976: PUSH
81977: LD_INT 0
81979: PUSH
81980: EMPTY
81981: LIST
81982: LIST
81983: LIST
81984: LIST
81985: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
81986: LD_VAR 0 1
81990: NOT
81991: PUSH
81992: LD_VAR 0 1
81996: PPUSH
81997: CALL_OW 264
82001: PUSH
82002: LD_INT 12
82004: PUSH
82005: LD_INT 51
82007: PUSH
82008: LD_INT 32
82010: PUSH
82011: LD_INT 89
82013: PUSH
82014: EMPTY
82015: LIST
82016: LIST
82017: LIST
82018: LIST
82019: IN
82020: NOT
82021: OR
82022: IFFALSE 82026
// exit ;
82024: GO 82124
// for i := 1 to 3 do
82026: LD_ADDR_VAR 0 3
82030: PUSH
82031: DOUBLE
82032: LD_INT 1
82034: DEC
82035: ST_TO_ADDR
82036: LD_INT 3
82038: PUSH
82039: FOR_TO
82040: IFFALSE 82122
// begin tmp := GetCargo ( cargo , i ) ;
82042: LD_ADDR_VAR 0 4
82046: PUSH
82047: LD_VAR 0 1
82051: PPUSH
82052: LD_VAR 0 3
82056: PPUSH
82057: CALL_OW 289
82061: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
82062: LD_ADDR_VAR 0 2
82066: PUSH
82067: LD_VAR 0 2
82071: PPUSH
82072: LD_VAR 0 3
82076: PPUSH
82077: LD_VAR 0 4
82081: PPUSH
82082: CALL_OW 1
82086: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
82087: LD_ADDR_VAR 0 2
82091: PUSH
82092: LD_VAR 0 2
82096: PPUSH
82097: LD_INT 4
82099: PPUSH
82100: LD_VAR 0 2
82104: PUSH
82105: LD_INT 4
82107: ARRAY
82108: PUSH
82109: LD_VAR 0 4
82113: PLUS
82114: PPUSH
82115: CALL_OW 1
82119: ST_TO_ADDR
// end ;
82120: GO 82039
82122: POP
82123: POP
// end ;
82124: LD_VAR 0 2
82128: RET
// export function Length ( array ) ; begin
82129: LD_INT 0
82131: PPUSH
// result := array + 0 ;
82132: LD_ADDR_VAR 0 2
82136: PUSH
82137: LD_VAR 0 1
82141: PUSH
82142: LD_INT 0
82144: PLUS
82145: ST_TO_ADDR
// end ;
82146: LD_VAR 0 2
82150: RET
// export function PrepareArray ( array ) ; begin
82151: LD_INT 0
82153: PPUSH
// result := array diff 0 ;
82154: LD_ADDR_VAR 0 2
82158: PUSH
82159: LD_VAR 0 1
82163: PUSH
82164: LD_INT 0
82166: DIFF
82167: ST_TO_ADDR
// if not result [ 1 ] then
82168: LD_VAR 0 2
82172: PUSH
82173: LD_INT 1
82175: ARRAY
82176: NOT
82177: IFFALSE 82197
// result := Delete ( result , 1 ) ;
82179: LD_ADDR_VAR 0 2
82183: PUSH
82184: LD_VAR 0 2
82188: PPUSH
82189: LD_INT 1
82191: PPUSH
82192: CALL_OW 3
82196: ST_TO_ADDR
// end ;
82197: LD_VAR 0 2
82201: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
82202: LD_INT 0
82204: PPUSH
82205: PPUSH
82206: PPUSH
82207: PPUSH
// sibRocketRange := 25 ;
82208: LD_ADDR_VAR 0 6
82212: PUSH
82213: LD_INT 25
82215: ST_TO_ADDR
// result := false ;
82216: LD_ADDR_VAR 0 4
82220: PUSH
82221: LD_INT 0
82223: ST_TO_ADDR
// for i := 0 to 5 do
82224: LD_ADDR_VAR 0 5
82228: PUSH
82229: DOUBLE
82230: LD_INT 0
82232: DEC
82233: ST_TO_ADDR
82234: LD_INT 5
82236: PUSH
82237: FOR_TO
82238: IFFALSE 82305
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
82240: LD_VAR 0 1
82244: PPUSH
82245: LD_VAR 0 5
82249: PPUSH
82250: LD_VAR 0 6
82254: PPUSH
82255: CALL_OW 272
82259: PPUSH
82260: LD_VAR 0 2
82264: PPUSH
82265: LD_VAR 0 5
82269: PPUSH
82270: LD_VAR 0 6
82274: PPUSH
82275: CALL_OW 273
82279: PPUSH
82280: LD_VAR 0 3
82284: PPUSH
82285: CALL_OW 309
82289: IFFALSE 82303
// begin result := true ;
82291: LD_ADDR_VAR 0 4
82295: PUSH
82296: LD_INT 1
82298: ST_TO_ADDR
// exit ;
82299: POP
82300: POP
82301: GO 82307
// end ;
82303: GO 82237
82305: POP
82306: POP
// end ;
82307: LD_VAR 0 4
82311: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
82312: LD_INT 0
82314: PPUSH
82315: PPUSH
82316: PPUSH
// if btype = b_depot then
82317: LD_VAR 0 2
82321: PUSH
82322: LD_INT 0
82324: EQUAL
82325: IFFALSE 82337
// begin result := true ;
82327: LD_ADDR_VAR 0 3
82331: PUSH
82332: LD_INT 1
82334: ST_TO_ADDR
// exit ;
82335: GO 82453
// end ; pom := GetBase ( depot ) ;
82337: LD_ADDR_VAR 0 4
82341: PUSH
82342: LD_VAR 0 1
82346: PPUSH
82347: CALL_OW 274
82351: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
82352: LD_ADDR_VAR 0 5
82356: PUSH
82357: LD_VAR 0 2
82361: PPUSH
82362: LD_VAR 0 1
82366: PPUSH
82367: CALL_OW 248
82371: PPUSH
82372: CALL_OW 450
82376: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
82377: LD_ADDR_VAR 0 3
82381: PUSH
82382: LD_VAR 0 4
82386: PPUSH
82387: LD_INT 1
82389: PPUSH
82390: CALL_OW 275
82394: PUSH
82395: LD_VAR 0 5
82399: PUSH
82400: LD_INT 1
82402: ARRAY
82403: GREATEREQUAL
82404: PUSH
82405: LD_VAR 0 4
82409: PPUSH
82410: LD_INT 2
82412: PPUSH
82413: CALL_OW 275
82417: PUSH
82418: LD_VAR 0 5
82422: PUSH
82423: LD_INT 2
82425: ARRAY
82426: GREATEREQUAL
82427: AND
82428: PUSH
82429: LD_VAR 0 4
82433: PPUSH
82434: LD_INT 3
82436: PPUSH
82437: CALL_OW 275
82441: PUSH
82442: LD_VAR 0 5
82446: PUSH
82447: LD_INT 3
82449: ARRAY
82450: GREATEREQUAL
82451: AND
82452: ST_TO_ADDR
// end ;
82453: LD_VAR 0 3
82457: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
82458: LD_INT 0
82460: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
82461: LD_VAR 0 1
82465: PPUSH
82466: LD_VAR 0 2
82470: PPUSH
82471: LD_INT 0
82473: PPUSH
82474: LD_INT 0
82476: PPUSH
82477: LD_INT 1
82479: PPUSH
82480: LD_INT 0
82482: PPUSH
82483: CALL_OW 587
// end ;
82487: LD_VAR 0 3
82491: RET
// export function CenterOnNow ( unit ) ; begin
82492: LD_INT 0
82494: PPUSH
// result := IsInUnit ( unit ) ;
82495: LD_ADDR_VAR 0 2
82499: PUSH
82500: LD_VAR 0 1
82504: PPUSH
82505: CALL_OW 310
82509: ST_TO_ADDR
// if not result then
82510: LD_VAR 0 2
82514: NOT
82515: IFFALSE 82527
// result := unit ;
82517: LD_ADDR_VAR 0 2
82521: PUSH
82522: LD_VAR 0 1
82526: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
82527: LD_VAR 0 1
82531: PPUSH
82532: CALL_OW 87
// end ;
82536: LD_VAR 0 2
82540: RET
// export function ComMoveHex ( unit , hex ) ; begin
82541: LD_INT 0
82543: PPUSH
// if not hex then
82544: LD_VAR 0 2
82548: NOT
82549: IFFALSE 82553
// exit ;
82551: GO 82606
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
82553: LD_VAR 0 2
82557: PUSH
82558: LD_INT 1
82560: ARRAY
82561: PPUSH
82562: LD_VAR 0 2
82566: PUSH
82567: LD_INT 2
82569: ARRAY
82570: PPUSH
82571: CALL_OW 428
82575: IFFALSE 82579
// exit ;
82577: GO 82606
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
82579: LD_VAR 0 1
82583: PPUSH
82584: LD_VAR 0 2
82588: PUSH
82589: LD_INT 1
82591: ARRAY
82592: PPUSH
82593: LD_VAR 0 2
82597: PUSH
82598: LD_INT 2
82600: ARRAY
82601: PPUSH
82602: CALL_OW 111
// end ;
82606: LD_VAR 0 3
82610: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
82611: LD_INT 0
82613: PPUSH
82614: PPUSH
82615: PPUSH
// if not unit or not enemy then
82616: LD_VAR 0 1
82620: NOT
82621: PUSH
82622: LD_VAR 0 2
82626: NOT
82627: OR
82628: IFFALSE 82632
// exit ;
82630: GO 82756
// x := GetX ( enemy ) ;
82632: LD_ADDR_VAR 0 4
82636: PUSH
82637: LD_VAR 0 2
82641: PPUSH
82642: CALL_OW 250
82646: ST_TO_ADDR
// y := GetY ( enemy ) ;
82647: LD_ADDR_VAR 0 5
82651: PUSH
82652: LD_VAR 0 2
82656: PPUSH
82657: CALL_OW 251
82661: ST_TO_ADDR
// if ValidHex ( x , y ) then
82662: LD_VAR 0 4
82666: PPUSH
82667: LD_VAR 0 5
82671: PPUSH
82672: CALL_OW 488
82676: IFFALSE 82756
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
82678: LD_VAR 0 2
82682: PPUSH
82683: CALL_OW 247
82687: PUSH
82688: LD_INT 3
82690: PUSH
82691: LD_INT 2
82693: PUSH
82694: EMPTY
82695: LIST
82696: LIST
82697: IN
82698: PUSH
82699: LD_VAR 0 1
82703: PPUSH
82704: CALL_OW 255
82708: PPUSH
82709: LD_VAR 0 2
82713: PPUSH
82714: CALL_OW 292
82718: OR
82719: IFFALSE 82737
// ComAttackUnit ( unit , enemy ) else
82721: LD_VAR 0 1
82725: PPUSH
82726: LD_VAR 0 2
82730: PPUSH
82731: CALL_OW 115
82735: GO 82756
// ComAgressiveMove ( unit , x , y ) ;
82737: LD_VAR 0 1
82741: PPUSH
82742: LD_VAR 0 4
82746: PPUSH
82747: LD_VAR 0 5
82751: PPUSH
82752: CALL_OW 114
// end ;
82756: LD_VAR 0 3
82760: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
82761: LD_INT 0
82763: PPUSH
82764: PPUSH
82765: PPUSH
// list := AreaToList ( area , 0 ) ;
82766: LD_ADDR_VAR 0 5
82770: PUSH
82771: LD_VAR 0 1
82775: PPUSH
82776: LD_INT 0
82778: PPUSH
82779: CALL_OW 517
82783: ST_TO_ADDR
// if not list then
82784: LD_VAR 0 5
82788: NOT
82789: IFFALSE 82793
// exit ;
82791: GO 82923
// if all then
82793: LD_VAR 0 2
82797: IFFALSE 82885
// begin for i := 1 to list [ 1 ] do
82799: LD_ADDR_VAR 0 4
82803: PUSH
82804: DOUBLE
82805: LD_INT 1
82807: DEC
82808: ST_TO_ADDR
82809: LD_VAR 0 5
82813: PUSH
82814: LD_INT 1
82816: ARRAY
82817: PUSH
82818: FOR_TO
82819: IFFALSE 82881
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
82821: LD_ADDR_VAR 0 3
82825: PUSH
82826: LD_VAR 0 3
82830: PPUSH
82831: LD_VAR 0 3
82835: PUSH
82836: LD_INT 1
82838: PLUS
82839: PPUSH
82840: LD_VAR 0 5
82844: PUSH
82845: LD_INT 1
82847: ARRAY
82848: PUSH
82849: LD_VAR 0 4
82853: ARRAY
82854: PUSH
82855: LD_VAR 0 5
82859: PUSH
82860: LD_INT 2
82862: ARRAY
82863: PUSH
82864: LD_VAR 0 4
82868: ARRAY
82869: PUSH
82870: EMPTY
82871: LIST
82872: LIST
82873: PPUSH
82874: CALL_OW 1
82878: ST_TO_ADDR
82879: GO 82818
82881: POP
82882: POP
// exit ;
82883: GO 82923
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
82885: LD_ADDR_VAR 0 3
82889: PUSH
82890: LD_VAR 0 5
82894: PUSH
82895: LD_INT 1
82897: ARRAY
82898: PUSH
82899: LD_INT 1
82901: ARRAY
82902: PUSH
82903: LD_VAR 0 5
82907: PUSH
82908: LD_INT 2
82910: ARRAY
82911: PUSH
82912: LD_INT 1
82914: ARRAY
82915: PUSH
82916: EMPTY
82917: LIST
82918: LIST
82919: PUSH
82920: EMPTY
82921: LIST
82922: ST_TO_ADDR
// end ;
82923: LD_VAR 0 3
82927: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
82928: LD_INT 0
82930: PPUSH
82931: PPUSH
// list := AreaToList ( area , 0 ) ;
82932: LD_ADDR_VAR 0 4
82936: PUSH
82937: LD_VAR 0 1
82941: PPUSH
82942: LD_INT 0
82944: PPUSH
82945: CALL_OW 517
82949: ST_TO_ADDR
// if not list then
82950: LD_VAR 0 4
82954: NOT
82955: IFFALSE 82959
// exit ;
82957: GO 83000
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
82959: LD_ADDR_VAR 0 3
82963: PUSH
82964: LD_VAR 0 4
82968: PUSH
82969: LD_INT 1
82971: ARRAY
82972: PUSH
82973: LD_INT 1
82975: ARRAY
82976: PUSH
82977: LD_VAR 0 4
82981: PUSH
82982: LD_INT 2
82984: ARRAY
82985: PUSH
82986: LD_INT 1
82988: ARRAY
82989: PUSH
82990: LD_VAR 0 2
82994: PUSH
82995: EMPTY
82996: LIST
82997: LIST
82998: LIST
82999: ST_TO_ADDR
// end ;
83000: LD_VAR 0 3
83004: RET
// export function First ( array ) ; begin
83005: LD_INT 0
83007: PPUSH
// if not array then
83008: LD_VAR 0 1
83012: NOT
83013: IFFALSE 83017
// exit ;
83015: GO 83031
// result := array [ 1 ] ;
83017: LD_ADDR_VAR 0 2
83021: PUSH
83022: LD_VAR 0 1
83026: PUSH
83027: LD_INT 1
83029: ARRAY
83030: ST_TO_ADDR
// end ;
83031: LD_VAR 0 2
83035: RET
// export function Last ( array ) ; begin
83036: LD_INT 0
83038: PPUSH
// if not array then
83039: LD_VAR 0 1
83043: NOT
83044: IFFALSE 83048
// exit ;
83046: GO 83064
// result := array [ array ] ;
83048: LD_ADDR_VAR 0 2
83052: PUSH
83053: LD_VAR 0 1
83057: PUSH
83058: LD_VAR 0 1
83062: ARRAY
83063: ST_TO_ADDR
// end ;
83064: LD_VAR 0 2
83068: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
83069: LD_INT 0
83071: PPUSH
83072: PPUSH
// result := [ ] ;
83073: LD_ADDR_VAR 0 5
83077: PUSH
83078: EMPTY
83079: ST_TO_ADDR
// if not array then
83080: LD_VAR 0 1
83084: NOT
83085: IFFALSE 83089
// exit ;
83087: GO 83201
// for i := 1 to array do
83089: LD_ADDR_VAR 0 6
83093: PUSH
83094: DOUBLE
83095: LD_INT 1
83097: DEC
83098: ST_TO_ADDR
83099: LD_VAR 0 1
83103: PUSH
83104: FOR_TO
83105: IFFALSE 83199
// if array [ i ] [ index ] = value then
83107: LD_VAR 0 1
83111: PUSH
83112: LD_VAR 0 6
83116: ARRAY
83117: PUSH
83118: LD_VAR 0 2
83122: ARRAY
83123: PUSH
83124: LD_VAR 0 3
83128: EQUAL
83129: IFFALSE 83197
// begin if indexColumn then
83131: LD_VAR 0 4
83135: IFFALSE 83171
// result := Join ( result , array [ i ] [ indexColumn ] ) else
83137: LD_ADDR_VAR 0 5
83141: PUSH
83142: LD_VAR 0 5
83146: PPUSH
83147: LD_VAR 0 1
83151: PUSH
83152: LD_VAR 0 6
83156: ARRAY
83157: PUSH
83158: LD_VAR 0 4
83162: ARRAY
83163: PPUSH
83164: CALL 78389 0 2
83168: ST_TO_ADDR
83169: GO 83197
// result := Join ( result , array [ i ] ) ;
83171: LD_ADDR_VAR 0 5
83175: PUSH
83176: LD_VAR 0 5
83180: PPUSH
83181: LD_VAR 0 1
83185: PUSH
83186: LD_VAR 0 6
83190: ARRAY
83191: PPUSH
83192: CALL 78389 0 2
83196: ST_TO_ADDR
// end ;
83197: GO 83104
83199: POP
83200: POP
// end ;
83201: LD_VAR 0 5
83205: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
83206: LD_INT 0
83208: PPUSH
// if not vehicles or not parkingPoint then
83209: LD_VAR 0 1
83213: NOT
83214: PUSH
83215: LD_VAR 0 2
83219: NOT
83220: OR
83221: IFFALSE 83225
// exit ;
83223: GO 83323
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
83225: LD_ADDR_VAR 0 1
83229: PUSH
83230: LD_VAR 0 1
83234: PPUSH
83235: LD_INT 50
83237: PUSH
83238: EMPTY
83239: LIST
83240: PUSH
83241: LD_INT 3
83243: PUSH
83244: LD_INT 92
83246: PUSH
83247: LD_VAR 0 2
83251: PUSH
83252: LD_INT 1
83254: ARRAY
83255: PUSH
83256: LD_VAR 0 2
83260: PUSH
83261: LD_INT 2
83263: ARRAY
83264: PUSH
83265: LD_INT 8
83267: PUSH
83268: EMPTY
83269: LIST
83270: LIST
83271: LIST
83272: LIST
83273: PUSH
83274: EMPTY
83275: LIST
83276: LIST
83277: PUSH
83278: EMPTY
83279: LIST
83280: LIST
83281: PPUSH
83282: CALL_OW 72
83286: ST_TO_ADDR
// if not vehicles then
83287: LD_VAR 0 1
83291: NOT
83292: IFFALSE 83296
// exit ;
83294: GO 83323
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
83296: LD_VAR 0 1
83300: PPUSH
83301: LD_VAR 0 2
83305: PUSH
83306: LD_INT 1
83308: ARRAY
83309: PPUSH
83310: LD_VAR 0 2
83314: PUSH
83315: LD_INT 2
83317: ARRAY
83318: PPUSH
83319: CALL_OW 111
// end ;
83323: LD_VAR 0 3
83327: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
83328: LD_INT 0
83330: PPUSH
83331: PPUSH
83332: PPUSH
// if not side or not area then
83333: LD_VAR 0 1
83337: NOT
83338: PUSH
83339: LD_VAR 0 2
83343: NOT
83344: OR
83345: IFFALSE 83349
// exit ;
83347: GO 83468
// tmp := AreaToList ( area , 0 ) ;
83349: LD_ADDR_VAR 0 5
83353: PUSH
83354: LD_VAR 0 2
83358: PPUSH
83359: LD_INT 0
83361: PPUSH
83362: CALL_OW 517
83366: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
83367: LD_ADDR_VAR 0 4
83371: PUSH
83372: DOUBLE
83373: LD_INT 1
83375: DEC
83376: ST_TO_ADDR
83377: LD_VAR 0 5
83381: PUSH
83382: LD_INT 1
83384: ARRAY
83385: PUSH
83386: FOR_TO
83387: IFFALSE 83466
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
83389: LD_VAR 0 5
83393: PUSH
83394: LD_INT 1
83396: ARRAY
83397: PUSH
83398: LD_VAR 0 4
83402: ARRAY
83403: PPUSH
83404: LD_VAR 0 5
83408: PUSH
83409: LD_INT 2
83411: ARRAY
83412: PUSH
83413: LD_VAR 0 4
83417: ARRAY
83418: PPUSH
83419: CALL_OW 351
83423: IFFALSE 83464
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
83425: LD_VAR 0 5
83429: PUSH
83430: LD_INT 1
83432: ARRAY
83433: PUSH
83434: LD_VAR 0 4
83438: ARRAY
83439: PPUSH
83440: LD_VAR 0 5
83444: PUSH
83445: LD_INT 2
83447: ARRAY
83448: PUSH
83449: LD_VAR 0 4
83453: ARRAY
83454: PPUSH
83455: LD_VAR 0 1
83459: PPUSH
83460: CALL_OW 244
// end ;
83464: GO 83386
83466: POP
83467: POP
// end ; end_of_file
83468: LD_VAR 0 3
83472: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
83473: LD_VAR 0 1
83477: PUSH
83478: LD_INT 200
83480: DOUBLE
83481: GREATEREQUAL
83482: IFFALSE 83490
83484: LD_INT 299
83486: DOUBLE
83487: LESSEQUAL
83488: IFTRUE 83492
83490: GO 83524
83492: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
83493: LD_VAR 0 1
83497: PPUSH
83498: LD_VAR 0 2
83502: PPUSH
83503: LD_VAR 0 3
83507: PPUSH
83508: LD_VAR 0 4
83512: PPUSH
83513: LD_VAR 0 5
83517: PPUSH
83518: CALL 35958 0 5
83522: GO 83601
83524: LD_INT 300
83526: DOUBLE
83527: GREATEREQUAL
83528: IFFALSE 83536
83530: LD_INT 399
83532: DOUBLE
83533: LESSEQUAL
83534: IFTRUE 83538
83536: GO 83600
83538: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
83539: LD_VAR 0 1
83543: PPUSH
83544: LD_VAR 0 2
83548: PPUSH
83549: LD_VAR 0 3
83553: PPUSH
83554: LD_VAR 0 4
83558: PPUSH
83559: LD_VAR 0 5
83563: PPUSH
83564: LD_VAR 0 6
83568: PPUSH
83569: LD_VAR 0 7
83573: PPUSH
83574: LD_VAR 0 8
83578: PPUSH
83579: LD_VAR 0 9
83583: PPUSH
83584: LD_VAR 0 10
83588: PPUSH
83589: LD_VAR 0 11
83593: PPUSH
83594: CALL 31946 0 11
83598: GO 83601
83600: POP
// end ;
83601: PPOPN 11
83603: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
83604: LD_VAR 0 1
83608: PPUSH
83609: LD_VAR 0 2
83613: PPUSH
83614: LD_VAR 0 3
83618: PPUSH
83619: LD_VAR 0 4
83623: PPUSH
83624: LD_VAR 0 5
83628: PPUSH
83629: CALL 35423 0 5
// end ; end_of_file
83633: PPOPN 5
83635: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
83636: LD_VAR 0 1
83640: PPUSH
83641: LD_VAR 0 2
83645: PPUSH
83646: LD_VAR 0 3
83650: PPUSH
83651: LD_VAR 0 4
83655: PPUSH
83656: LD_VAR 0 5
83660: PPUSH
83661: LD_VAR 0 6
83665: PPUSH
83666: CALL 19598 0 6
// end ;
83670: PPOPN 6
83672: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
83673: LD_INT 0
83675: PPUSH
// begin if not units then
83676: LD_VAR 0 1
83680: NOT
83681: IFFALSE 83685
// exit ;
83683: GO 83685
// end ;
83685: PPOPN 7
83687: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
83688: CALL 19485 0 0
// end ;
83692: PPOPN 1
83694: END
