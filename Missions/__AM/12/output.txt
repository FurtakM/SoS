// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export Powell ; export Davidov ; export Kurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; export westPathUsed , laserCounterDestroy , rocketBuilded , cratesAllow ; starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 103 0 0
// InGameOn ;
  19: CALL_OW 8
// CenterNowOnXY ( 67 , 22 ) ;
  23: LD_INT 67
  25: PPUSH
  26: LD_INT 22
  28: PPUSH
  29: CALL_OW 86
// PlaceSeeing ( 67 , 22 , 1 , - 6 ) ;
  33: LD_INT 67
  35: PPUSH
  36: LD_INT 22
  38: PPUSH
  39: LD_INT 1
  41: PPUSH
  42: LD_INT 6
  44: NEG
  45: PPUSH
  46: CALL_OW 330
// RemoveSeeing ( 67 , 22 , 1 ) ;
  50: LD_INT 67
  52: PPUSH
  53: LD_INT 22
  55: PPUSH
  56: LD_INT 1
  58: PPUSH
  59: CALL_OW 331
// CreateNature ;
  63: CALL 15938 0 0
// RaiseSailEvent ( 1 ) ;
  67: LD_INT 1
  69: PPUSH
  70: CALL_OW 427
// PrepareVehicles ;
  74: CALL 1938 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
  78: LD_INT 4
  80: PPUSH
  81: LD_INT 0
  83: PPUSH
  84: LD_INT 1
  86: PPUSH
  87: LD_INT 0
  89: PPUSH
  90: CALL 1456 0 4
// PrepareAmericanHeroes ;
  94: CALL 671 0 0
// Action ;
  98: CALL 6293 0 0
// end ;
 102: END
// function Init ; begin
 103: LD_INT 0
 105: PPUSH
// RuScientists := [ ] ;
 106: LD_ADDR_EXP 27
 110: PUSH
 111: EMPTY
 112: ST_TO_ADDR
// sciCounter := 0 ;
 113: LD_ADDR_EXP 28
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// ruDestroyedBuildings := [ ] ;
 121: LD_ADDR_EXP 31
 125: PUSH
 126: EMPTY
 127: ST_TO_ADDR
// russianTanks := [ ] ;
 128: LD_ADDR_EXP 32
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// russianTimeLapsers := [ ] ;
 135: LD_ADDR_EXP 33
 139: PUSH
 140: EMPTY
 141: ST_TO_ADDR
// arabianMines := [ ] ;
 142: LD_ADDR_EXP 37
 146: PUSH
 147: EMPTY
 148: ST_TO_ADDR
// kurtStatus := LoadVariable ( 06_KurtStatus_1 , 0 ) ;
 149: LD_ADDR_EXP 19
 153: PUSH
 154: LD_STRING 06_KurtStatus_1
 156: PPUSH
 157: LD_INT 0
 159: PPUSH
 160: CALL_OW 30
 164: ST_TO_ADDR
// secondPass := 0 ;
 165: LD_ADDR_EXP 20
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// teleportExplored := 0 ;
 173: LD_ADDR_EXP 26
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// attackTactic := 0 ;
 181: LD_ADDR_EXP 36
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// tpCounter := 0 ;
 189: LD_ADDR_EXP 22
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// askSiberite := 0 ;
 197: LD_ADDR_EXP 25
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// warWithLegion := 0 ;
 205: LD_ADDR_EXP 23
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// fakeInfo := 0 ;
 213: LD_ADDR_EXP 24
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// cratesSpawned := 0 ;
 221: LD_ADDR_EXP 38
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// ruAI := 0 ;
 229: LD_ADDR_EXP 34
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// ruEscape := 0 ;
 237: LD_ADDR_EXP 35
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// eventVar1 := 0 ;
 245: LD_ADDR_EXP 40
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// mission_prefix := 12_ ;
 253: LD_ADDR_EXP 39
 257: PUSH
 258: LD_STRING 12_
 260: ST_TO_ADDR
// debugMode := 0 ;
 261: LD_ADDR_EXP 41
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// westPathUsed := false ;
 269: LD_ADDR_EXP 42
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// laserCounterDestroy := 0 ;
 277: LD_ADDR_EXP 43
 281: PUSH
 282: LD_INT 0
 284: ST_TO_ADDR
// rocketBuilded := false ;
 285: LD_ADDR_EXP 44
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// cratesAllow := false ;
 293: LD_ADDR_EXP 45
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// end ;
 301: LD_VAR 0 1
 305: RET
// every 0 0$1 trigger debugMode do var i ;
 306: LD_EXP 41
 310: IFFALSE 616
 312: GO 314
 314: DISABLE
 315: LD_INT 0
 317: PPUSH
// begin enable ;
 318: ENABLE
// FogOff ( true ) ;
 319: LD_INT 1
 321: PPUSH
 322: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 326: LD_ADDR_VAR 0 1
 330: PUSH
 331: LD_INT 22
 333: PUSH
 334: LD_INT 1
 336: PUSH
 337: EMPTY
 338: LIST
 339: LIST
 340: PUSH
 341: LD_INT 21
 343: PUSH
 344: LD_INT 1
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: PPUSH
 355: CALL_OW 69
 359: PUSH
 360: FOR_IN
 361: IFFALSE 377
// SetLives ( i , 1000 ) ;
 363: LD_VAR 0 1
 367: PPUSH
 368: LD_INT 1000
 370: PPUSH
 371: CALL_OW 234
 375: GO 360
 377: POP
 378: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 379: LD_ADDR_VAR 0 1
 383: PUSH
 384: LD_INT 22
 386: PUSH
 387: LD_INT 1
 389: PUSH
 390: EMPTY
 391: LIST
 392: LIST
 393: PUSH
 394: LD_INT 2
 396: PUSH
 397: LD_INT 30
 399: PUSH
 400: LD_INT 0
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: PUSH
 407: LD_INT 30
 409: PUSH
 410: LD_INT 1
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: PUSH
 417: EMPTY
 418: LIST
 419: LIST
 420: LIST
 421: PUSH
 422: EMPTY
 423: LIST
 424: LIST
 425: PPUSH
 426: CALL_OW 69
 430: PUSH
 431: FOR_IN
 432: IFFALSE 456
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 434: LD_VAR 0 1
 438: PPUSH
 439: CALL_OW 274
 443: PPUSH
 444: LD_INT 1
 446: PPUSH
 447: LD_INT 9999
 449: PPUSH
 450: CALL_OW 277
 454: GO 431
 456: POP
 457: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 458: LD_ADDR_VAR 0 1
 462: PUSH
 463: LD_INT 22
 465: PUSH
 466: LD_INT 1
 468: PUSH
 469: EMPTY
 470: LIST
 471: LIST
 472: PUSH
 473: LD_INT 2
 475: PUSH
 476: LD_INT 30
 478: PUSH
 479: LD_INT 0
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PUSH
 486: LD_INT 30
 488: PUSH
 489: LD_INT 1
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: LIST
 500: PUSH
 501: EMPTY
 502: LIST
 503: LIST
 504: PPUSH
 505: CALL_OW 69
 509: PUSH
 510: FOR_IN
 511: IFFALSE 535
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 513: LD_VAR 0 1
 517: PPUSH
 518: CALL_OW 274
 522: PPUSH
 523: LD_INT 2
 525: PPUSH
 526: LD_INT 9999
 528: PPUSH
 529: CALL_OW 277
 533: GO 510
 535: POP
 536: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 537: LD_ADDR_VAR 0 1
 541: PUSH
 542: LD_INT 22
 544: PUSH
 545: LD_INT 1
 547: PUSH
 548: EMPTY
 549: LIST
 550: LIST
 551: PUSH
 552: LD_INT 2
 554: PUSH
 555: LD_INT 30
 557: PUSH
 558: LD_INT 0
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: PUSH
 565: LD_INT 30
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: EMPTY
 572: LIST
 573: LIST
 574: PUSH
 575: EMPTY
 576: LIST
 577: LIST
 578: LIST
 579: PUSH
 580: EMPTY
 581: LIST
 582: LIST
 583: PPUSH
 584: CALL_OW 69
 588: PUSH
 589: FOR_IN
 590: IFFALSE 614
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 592: LD_VAR 0 1
 596: PPUSH
 597: CALL_OW 274
 601: PPUSH
 602: LD_INT 3
 604: PPUSH
 605: LD_INT 9999
 607: PPUSH
 608: CALL_OW 277
 612: GO 589
 614: POP
 615: POP
// end ;
 616: PPOPN 1
 618: END
// every 0 0$1 trigger FilterUnitsInArea ( westPathArea , [ f_side , 1 ] ) do
 619: LD_INT 24
 621: PPUSH
 622: LD_INT 22
 624: PUSH
 625: LD_INT 1
 627: PUSH
 628: EMPTY
 629: LIST
 630: LIST
 631: PPUSH
 632: CALL_OW 70
 636: IFFALSE 649
 638: GO 640
 640: DISABLE
// westPathUsed := true ;
 641: LD_ADDR_EXP 42
 645: PUSH
 646: LD_INT 1
 648: ST_TO_ADDR
 649: END
// every 0 0$1 trigger laserCounterDestroy >= 3 do
 650: LD_EXP 43
 654: PUSH
 655: LD_INT 3
 657: GREATEREQUAL
 658: IFFALSE 670
 660: GO 662
 662: DISABLE
// SetAchievement ( ACH_LASER ) ; end_of_file
 663: LD_STRING ACH_LASER
 665: PPUSH
 666: CALL_OW 543
 670: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 671: LD_INT 0
 673: PPUSH
 674: PPUSH
 675: PPUSH
// uc_side := 1 ;
 676: LD_ADDR_OWVAR 20
 680: PUSH
 681: LD_INT 1
 683: ST_TO_ADDR
// others11 := CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 684: LD_ADDR_EXP 14
 688: PUSH
 689: LD_STRING 11c_others
 691: PPUSH
 692: CALL_OW 31
 696: PUSH
 697: LD_STRING 11_others
 699: PPUSH
 700: CALL_OW 31
 704: UNION
 705: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , 11_ ) ;
 706: LD_ADDR_EXP 1
 710: PUSH
 711: LD_STRING JMM
 713: PPUSH
 714: LD_EXP 41
 718: NOT
 719: PPUSH
 720: LD_STRING 11_
 722: PPUSH
 723: CALL 41467 0 3
 727: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 728: LD_EXP 1
 732: PPUSH
 733: LD_INT 1
 735: PPUSH
 736: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 740: LD_EXP 1
 744: PPUSH
 745: LD_INT 22
 747: PUSH
 748: LD_INT 1
 750: PUSH
 751: EMPTY
 752: LIST
 753: LIST
 754: PUSH
 755: LD_INT 21
 757: PUSH
 758: LD_INT 2
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: PUSH
 765: LD_INT 58
 767: PUSH
 768: EMPTY
 769: LIST
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PPUSH
 776: CALL_OW 69
 780: PUSH
 781: LD_INT 1
 783: ARRAY
 784: PPUSH
 785: CALL_OW 52
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , 11_ ) ;
 789: LD_ADDR_EXP 2
 793: PUSH
 794: LD_STRING Lisa
 796: PPUSH
 797: LD_EXP 41
 801: NOT
 802: PPUSH
 803: LD_STRING 11_
 805: PPUSH
 806: CALL 41467 0 3
 810: ST_TO_ADDR
// if Lisa then
 811: LD_EXP 2
 815: IFFALSE 855
// begin SetClass ( Lisa , 1 ) ;
 817: LD_EXP 2
 821: PPUSH
 822: LD_INT 1
 824: PPUSH
 825: CALL_OW 336
// repeat wait ( 1 ) ;
 829: LD_INT 1
 831: PPUSH
 832: CALL_OW 67
// until PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 836: LD_EXP 2
 840: PPUSH
 841: LD_INT 4
 843: PPUSH
 844: LD_INT 0
 846: PPUSH
 847: CALL_OW 49
 851: IFFALSE 829
// end else
 853: GO 871
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 855: LD_INT 4
 857: PPUSH
 858: LD_INT 0
 860: PPUSH
 861: LD_INT 1
 863: PPUSH
 864: LD_INT 0
 866: PPUSH
 867: CALL 1456 0 4
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , 11_ ) ;
 871: LD_ADDR_EXP 3
 875: PUSH
 876: LD_STRING Donaldson
 878: PPUSH
 879: LD_EXP 41
 883: NOT
 884: PPUSH
 885: LD_STRING 11_
 887: PPUSH
 888: CALL 41467 0 3
 892: ST_TO_ADDR
// if Donaldson then
 893: LD_EXP 3
 897: IFFALSE 937
// begin SetClass ( Donaldson , 1 ) ;
 899: LD_EXP 3
 903: PPUSH
 904: LD_INT 1
 906: PPUSH
 907: CALL_OW 336
// repeat wait ( 1 ) ;
 911: LD_INT 1
 913: PPUSH
 914: CALL_OW 67
// until PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 918: LD_EXP 3
 922: PPUSH
 923: LD_INT 4
 925: PPUSH
 926: LD_INT 0
 928: PPUSH
 929: CALL_OW 49
 933: IFFALSE 911
// end else
 935: GO 953
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 937: LD_INT 4
 939: PPUSH
 940: LD_INT 0
 942: PPUSH
 943: LD_INT 1
 945: PPUSH
 946: LD_INT 0
 948: PPUSH
 949: CALL 1456 0 4
// Cyrus := PrepareUnit ( Cyrus , ( not debugMode ) , 11_ ) ;
 953: LD_ADDR_EXP 5
 957: PUSH
 958: LD_STRING Cyrus
 960: PPUSH
 961: LD_EXP 41
 965: NOT
 966: PPUSH
 967: LD_STRING 11_
 969: PPUSH
 970: CALL 41467 0 3
 974: ST_TO_ADDR
// if Cyrus then
 975: LD_EXP 5
 979: IFFALSE 1019
// begin SetClass ( Cyrus , 1 ) ;
 981: LD_EXP 5
 985: PPUSH
 986: LD_INT 1
 988: PPUSH
 989: CALL_OW 336
// repeat wait ( 1 ) ;
 993: LD_INT 1
 995: PPUSH
 996: CALL_OW 67
// until PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1000: LD_EXP 5
1004: PPUSH
1005: LD_INT 4
1007: PPUSH
1008: LD_INT 0
1010: PPUSH
1011: CALL_OW 49
1015: IFFALSE 993
// end else
1017: GO 1035
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1019: LD_INT 4
1021: PPUSH
1022: LD_INT 0
1024: PPUSH
1025: LD_INT 1
1027: PPUSH
1028: LD_INT 0
1030: PPUSH
1031: CALL 1456 0 4
// Denis := PrepareUnit ( Denis , ( not debugMode ) , 11_ ) ;
1035: LD_ADDR_EXP 6
1039: PUSH
1040: LD_STRING Denis
1042: PPUSH
1043: LD_EXP 41
1047: NOT
1048: PPUSH
1049: LD_STRING 11_
1051: PPUSH
1052: CALL 41467 0 3
1056: ST_TO_ADDR
// if Denis then
1057: LD_EXP 6
1061: IFFALSE 1101
// begin SetClass ( Denis , 4 ) ;
1063: LD_EXP 6
1067: PPUSH
1068: LD_INT 4
1070: PPUSH
1071: CALL_OW 336
// repeat wait ( 1 ) ;
1075: LD_INT 1
1077: PPUSH
1078: CALL_OW 67
// until PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1082: LD_EXP 6
1086: PPUSH
1087: LD_INT 4
1089: PPUSH
1090: LD_INT 0
1092: PPUSH
1093: CALL_OW 49
1097: IFFALSE 1075
// end else
1099: GO 1117
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1101: LD_INT 4
1103: PPUSH
1104: LD_INT 0
1106: PPUSH
1107: LD_INT 1
1109: PPUSH
1110: LD_INT 0
1112: PPUSH
1113: CALL 1456 0 4
// Frank := PrepareUnit ( Frank , ( not debugMode ) , 11_ ) ;
1117: LD_ADDR_EXP 12
1121: PUSH
1122: LD_STRING Frank
1124: PPUSH
1125: LD_EXP 41
1129: NOT
1130: PPUSH
1131: LD_STRING 11_
1133: PPUSH
1134: CALL 41467 0 3
1138: ST_TO_ADDR
// if Frank then
1139: LD_EXP 12
1143: IFFALSE 1183
// begin SetClass ( Frank , 1 ) ;
1145: LD_EXP 12
1149: PPUSH
1150: LD_INT 1
1152: PPUSH
1153: CALL_OW 336
// repeat wait ( 1 ) ;
1157: LD_INT 1
1159: PPUSH
1160: CALL_OW 67
// until PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1164: LD_EXP 12
1168: PPUSH
1169: LD_INT 4
1171: PPUSH
1172: LD_INT 0
1174: PPUSH
1175: CALL_OW 49
1179: IFFALSE 1157
// end else
1181: GO 1199
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1183: LD_INT 4
1185: PPUSH
1186: LD_INT 0
1188: PPUSH
1189: LD_INT 1
1191: PPUSH
1192: LD_INT 0
1194: PPUSH
1195: CALL 1456 0 4
// Cornel := PrepareUnit ( Cornell , ( not debugMode ) , 11_ ) ;
1199: LD_ADDR_EXP 10
1203: PUSH
1204: LD_STRING Cornell
1206: PPUSH
1207: LD_EXP 41
1211: NOT
1212: PPUSH
1213: LD_STRING 11_
1215: PPUSH
1216: CALL 41467 0 3
1220: ST_TO_ADDR
// if Cornel then
1221: LD_EXP 10
1225: IFFALSE 1265
// begin SetClass ( Cornel , 1 ) ;
1227: LD_EXP 10
1231: PPUSH
1232: LD_INT 1
1234: PPUSH
1235: CALL_OW 336
// repeat wait ( 1 ) ;
1239: LD_INT 1
1241: PPUSH
1242: CALL_OW 67
// until PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1246: LD_EXP 10
1250: PPUSH
1251: LD_INT 4
1253: PPUSH
1254: LD_INT 0
1256: PPUSH
1257: CALL_OW 49
1261: IFFALSE 1239
// end else
1263: GO 1281
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1265: LD_INT 4
1267: PPUSH
1268: LD_INT 0
1270: PPUSH
1271: LD_INT 1
1273: PPUSH
1274: LD_INT 0
1276: PPUSH
1277: CALL 1456 0 4
// tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1281: LD_ADDR_VAR 0 2
1285: PUSH
1286: LD_EXP 14
1290: PPUSH
1291: LD_INT 26
1293: PUSH
1294: LD_INT 1
1296: PUSH
1297: EMPTY
1298: LIST
1299: LIST
1300: PPUSH
1301: CALL_OW 72
1305: ST_TO_ADDR
// if not tmp then
1306: LD_VAR 0 2
1310: NOT
1311: IFFALSE 1349
// begin PrepareSoldier ( sex_male , 8 ) ;
1313: LD_INT 1
1315: PPUSH
1316: LD_INT 8
1318: PPUSH
1319: CALL_OW 381
// repeat wait ( 1 ) ;
1323: LD_INT 1
1325: PPUSH
1326: CALL_OW 67
// until PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1330: CALL_OW 44
1334: PPUSH
1335: LD_INT 4
1337: PPUSH
1338: LD_INT 0
1340: PPUSH
1341: CALL_OW 49
1345: IFFALSE 1323
// end else
1347: GO 1432
// begin if GetClass ( tmp [ 1 ] ) <> class_soldier then
1349: LD_VAR 0 2
1353: PUSH
1354: LD_INT 1
1356: ARRAY
1357: PPUSH
1358: CALL_OW 257
1362: PUSH
1363: LD_INT 1
1365: NONEQUAL
1366: IFFALSE 1384
// SetClass ( tmp [ 1 ] , class_soldier ) ;
1368: LD_VAR 0 2
1372: PUSH
1373: LD_INT 1
1375: ARRAY
1376: PPUSH
1377: LD_INT 1
1379: PPUSH
1380: CALL_OW 336
// repeat wait ( 1 ) ;
1384: LD_INT 1
1386: PPUSH
1387: CALL_OW 67
// until PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1391: LD_VAR 0 2
1395: PUSH
1396: LD_INT 1
1398: ARRAY
1399: PPUSH
1400: LD_INT 4
1402: PPUSH
1403: LD_INT 0
1405: PPUSH
1406: CALL_OW 49
1410: IFFALSE 1384
// others11 := others11 diff tmp [ 1 ] ;
1412: LD_ADDR_EXP 14
1416: PUSH
1417: LD_EXP 14
1421: PUSH
1422: LD_VAR 0 2
1426: PUSH
1427: LD_INT 1
1429: ARRAY
1430: DIFF
1431: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ,  ) ;
1432: LD_ADDR_EXP 15
1436: PUSH
1437: LD_STRING Powell
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: LD_STRING 
1445: PPUSH
1446: CALL 41467 0 3
1450: ST_TO_ADDR
// end ;
1451: LD_VAR 0 1
1455: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1456: LD_INT 0
1458: PPUSH
1459: PPUSH
1460: PPUSH
1461: PPUSH
1462: PPUSH
// if mech = 1 then
1463: LD_VAR 0 4
1467: PUSH
1468: LD_INT 1
1470: EQUAL
1471: IFFALSE 1725
// begin if others11 then
1473: LD_EXP 14
1477: IFFALSE 1665
// begin for i := 1 to others11 - 1 do
1479: LD_ADDR_VAR 0 6
1483: PUSH
1484: DOUBLE
1485: LD_INT 1
1487: DEC
1488: ST_TO_ADDR
1489: LD_EXP 14
1493: PUSH
1494: LD_INT 1
1496: MINUS
1497: PUSH
1498: FOR_TO
1499: IFFALSE 1581
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1501: LD_EXP 14
1505: PUSH
1506: LD_VAR 0 6
1510: ARRAY
1511: PPUSH
1512: LD_INT 3
1514: PPUSH
1515: CALL_OW 259
1519: PUSH
1520: LD_EXP 14
1524: PUSH
1525: LD_VAR 0 6
1529: PUSH
1530: LD_INT 1
1532: PLUS
1533: ARRAY
1534: PPUSH
1535: LD_INT 3
1537: PPUSH
1538: CALL_OW 259
1542: LESS
1543: IFFALSE 1579
// begin mecha = others11 [ i + 1 ] ;
1545: LD_ADDR_VAR 0 9
1549: PUSH
1550: LD_EXP 14
1554: PUSH
1555: LD_VAR 0 6
1559: PUSH
1560: LD_INT 1
1562: PLUS
1563: ARRAY
1564: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1565: LD_VAR 0 9
1569: PPUSH
1570: LD_INT 3
1572: PPUSH
1573: CALL_OW 336
// break ;
1577: GO 1581
// end ; end ;
1579: GO 1498
1581: POP
1582: POP
// if spawnMode = 1 then
1583: LD_VAR 0 3
1587: PUSH
1588: LD_INT 1
1590: EQUAL
1591: IFFALSE 1633
// begin SetClass ( mecha , class_soldier ) ;
1593: LD_VAR 0 9
1597: PPUSH
1598: LD_INT 1
1600: PPUSH
1601: CALL_OW 336
// repeat wait ( 1 ) ;
1605: LD_INT 1
1607: PPUSH
1608: CALL_OW 67
// until PlaceUnitArea ( mecha , area , false ) ;
1612: LD_VAR 0 9
1616: PPUSH
1617: LD_VAR 0 1
1621: PPUSH
1622: LD_INT 0
1624: PPUSH
1625: CALL_OW 49
1629: IFFALSE 1605
// end else
1631: GO 1647
// PlaceHumanInUnit ( mecha , veh ) ;
1633: LD_VAR 0 9
1637: PPUSH
1638: LD_VAR 0 2
1642: PPUSH
1643: CALL_OW 52
// others11 := others11 diff mecha ;
1647: LD_ADDR_EXP 14
1651: PUSH
1652: LD_EXP 14
1656: PUSH
1657: LD_VAR 0 9
1661: DIFF
1662: ST_TO_ADDR
// end else
1663: GO 1723
// begin hc_name :=  ;
1665: LD_ADDR_OWVAR 26
1669: PUSH
1670: LD_STRING 
1672: ST_TO_ADDR
// hc_gallery :=  ;
1673: LD_ADDR_OWVAR 33
1677: PUSH
1678: LD_STRING 
1680: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1681: LD_INT 0
1683: PPUSH
1684: LD_INT 7
1686: PPUSH
1687: LD_INT 9
1689: PPUSH
1690: CALL_OW 12
1694: PPUSH
1695: CALL_OW 383
// un := CreateHuman ;
1699: LD_ADDR_VAR 0 7
1703: PUSH
1704: CALL_OW 44
1708: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1709: LD_VAR 0 7
1713: PPUSH
1714: LD_VAR 0 2
1718: PPUSH
1719: CALL_OW 52
// end ; end else
1723: GO 1933
// begin if others11 then
1725: LD_EXP 14
1729: IFFALSE 1827
// begin if spawnMode = 1 then
1731: LD_VAR 0 3
1735: PUSH
1736: LD_INT 1
1738: EQUAL
1739: IFFALSE 1789
// begin SetClass ( others11 [ 1 ] , class_soldier ) ;
1741: LD_EXP 14
1745: PUSH
1746: LD_INT 1
1748: ARRAY
1749: PPUSH
1750: LD_INT 1
1752: PPUSH
1753: CALL_OW 336
// repeat wait ( 1 ) ;
1757: LD_INT 1
1759: PPUSH
1760: CALL_OW 67
// until PlaceUnitArea ( others11 [ 1 ] , area , false ) ;
1764: LD_EXP 14
1768: PUSH
1769: LD_INT 1
1771: ARRAY
1772: PPUSH
1773: LD_VAR 0 1
1777: PPUSH
1778: LD_INT 0
1780: PPUSH
1781: CALL_OW 49
1785: IFFALSE 1757
// end else
1787: GO 1807
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1789: LD_EXP 14
1793: PUSH
1794: LD_INT 1
1796: ARRAY
1797: PPUSH
1798: LD_VAR 0 2
1802: PPUSH
1803: CALL_OW 52
// others11 := Delete ( others11 , 1 ) ;
1807: LD_ADDR_EXP 14
1811: PUSH
1812: LD_EXP 14
1816: PPUSH
1817: LD_INT 1
1819: PPUSH
1820: CALL_OW 3
1824: ST_TO_ADDR
// end else
1825: GO 1933
// begin hc_name :=  ;
1827: LD_ADDR_OWVAR 26
1831: PUSH
1832: LD_STRING 
1834: ST_TO_ADDR
// hc_gallery :=  ;
1835: LD_ADDR_OWVAR 33
1839: PUSH
1840: LD_STRING 
1842: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 7 , 9 ) ) ;
1843: LD_INT 0
1845: PPUSH
1846: LD_INT 1
1848: PPUSH
1849: LD_INT 4
1851: PPUSH
1852: CALL_OW 12
1856: PPUSH
1857: LD_INT 7
1859: PPUSH
1860: LD_INT 9
1862: PPUSH
1863: CALL_OW 12
1867: PPUSH
1868: CALL_OW 380
// un := CreateHuman ;
1872: LD_ADDR_VAR 0 7
1876: PUSH
1877: CALL_OW 44
1881: ST_TO_ADDR
// SetClass ( un , class_soldier ) ;
1882: LD_VAR 0 7
1886: PPUSH
1887: LD_INT 1
1889: PPUSH
1890: CALL_OW 336
// if veh then
1894: LD_VAR 0 2
1898: IFFALSE 1916
// PlaceHumanInUnit ( un , veh ) else
1900: LD_VAR 0 7
1904: PPUSH
1905: LD_VAR 0 2
1909: PPUSH
1910: CALL_OW 52
1914: GO 1933
// PlaceUnitArea ( un , area , false ) ;
1916: LD_VAR 0 7
1920: PPUSH
1921: LD_VAR 0 1
1925: PPUSH
1926: LD_INT 0
1928: PPUSH
1929: CALL_OW 49
// end ; end ; end ;
1933: LD_VAR 0 5
1937: RET
// export function PrepareVehicles ; var veh ; begin
1938: LD_INT 0
1940: PPUSH
1941: PPUSH
// uc_side := 1 ;
1942: LD_ADDR_OWVAR 20
1946: PUSH
1947: LD_INT 1
1949: ST_TO_ADDR
// uc_nation := 1 ;
1950: LD_ADDR_OWVAR 21
1954: PUSH
1955: LD_INT 1
1957: ST_TO_ADDR
// vc_chassis := us_medium_tracked ;
1958: LD_ADDR_OWVAR 37
1962: PUSH
1963: LD_INT 3
1965: ST_TO_ADDR
// vc_engine := engine_siberite ;
1966: LD_ADDR_OWVAR 39
1970: PUSH
1971: LD_INT 3
1973: ST_TO_ADDR
// vc_control := control_computer ;
1974: LD_ADDR_OWVAR 38
1978: PUSH
1979: LD_INT 3
1981: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1982: LD_ADDR_OWVAR 40
1986: PUSH
1987: LD_INT 4
1989: ST_TO_ADDR
// veh := CreateVehicle ;
1990: LD_ADDR_VAR 0 2
1994: PUSH
1995: CALL_OW 45
1999: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2000: LD_VAR 0 2
2004: PPUSH
2005: LD_INT 4
2007: PPUSH
2008: CALL_OW 233
// repeat wait ( 1 ) ;
2012: LD_INT 1
2014: PPUSH
2015: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2019: LD_VAR 0 2
2023: PPUSH
2024: LD_INT 4
2026: PPUSH
2027: LD_INT 0
2029: PPUSH
2030: CALL_OW 49
2034: IFFALSE 2012
// vc_weapon := us_double_gun ;
2036: LD_ADDR_OWVAR 40
2040: PUSH
2041: LD_INT 5
2043: ST_TO_ADDR
// vc_control := control_manual ;
2044: LD_ADDR_OWVAR 38
2048: PUSH
2049: LD_INT 1
2051: ST_TO_ADDR
// veh := CreateVehicle ;
2052: LD_ADDR_VAR 0 2
2056: PUSH
2057: CALL_OW 45
2061: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2062: LD_VAR 0 2
2066: PPUSH
2067: LD_INT 4
2069: PPUSH
2070: CALL_OW 233
// repeat wait ( 3 ) ;
2074: LD_INT 3
2076: PPUSH
2077: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2081: LD_VAR 0 2
2085: PPUSH
2086: LD_INT 4
2088: PPUSH
2089: LD_INT 0
2091: PPUSH
2092: CALL_OW 49
2096: IFFALSE 2074
// vc_weapon := us_radar ;
2098: LD_ADDR_OWVAR 40
2102: PUSH
2103: LD_INT 11
2105: ST_TO_ADDR
// vc_control := control_computer ;
2106: LD_ADDR_OWVAR 38
2110: PUSH
2111: LD_INT 3
2113: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2114: LD_ADDR_OWVAR 37
2118: PUSH
2119: LD_INT 2
2121: ST_TO_ADDR
// veh := CreateVehicle ;
2122: LD_ADDR_VAR 0 2
2126: PUSH
2127: CALL_OW 45
2131: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2132: LD_VAR 0 2
2136: PPUSH
2137: LD_INT 4
2139: PPUSH
2140: CALL_OW 233
// repeat wait ( 1 ) ;
2144: LD_INT 1
2146: PPUSH
2147: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2151: LD_VAR 0 2
2155: PPUSH
2156: LD_INT 4
2158: PPUSH
2159: LD_INT 0
2161: PPUSH
2162: CALL_OW 49
2166: IFFALSE 2144
// vc_weapon := us_double_gun ;
2168: LD_ADDR_OWVAR 40
2172: PUSH
2173: LD_INT 5
2175: ST_TO_ADDR
// veh := CreateVehicle ;
2176: LD_ADDR_VAR 0 2
2180: PUSH
2181: CALL_OW 45
2185: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2186: LD_VAR 0 2
2190: PPUSH
2191: LD_INT 4
2193: PPUSH
2194: CALL_OW 233
// repeat wait ( 1 ) ;
2198: LD_INT 1
2200: PPUSH
2201: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2205: LD_VAR 0 2
2209: PPUSH
2210: LD_INT 4
2212: PPUSH
2213: LD_INT 0
2215: PPUSH
2216: CALL_OW 49
2220: IFFALSE 2198
// end ;
2222: LD_VAR 0 1
2226: RET
// export function PowellSupport1 ; var veh , un ; begin
2227: LD_INT 0
2229: PPUSH
2230: PPUSH
2231: PPUSH
// uc_side := 1 ;
2232: LD_ADDR_OWVAR 20
2236: PUSH
2237: LD_INT 1
2239: ST_TO_ADDR
// uc_nation := 1 ;
2240: LD_ADDR_OWVAR 21
2244: PUSH
2245: LD_INT 1
2247: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , 11_ ) ;
2248: LD_ADDR_EXP 7
2252: PUSH
2253: LD_STRING Brown
2255: PPUSH
2256: LD_EXP 41
2260: NOT
2261: PPUSH
2262: LD_STRING 11_
2264: PPUSH
2265: CALL 41467 0 3
2269: ST_TO_ADDR
// if Brown then
2270: LD_EXP 7
2274: IFFALSE 2305
// begin SetClass ( Brown , class_engineer ) ;
2276: LD_EXP 7
2280: PPUSH
2281: LD_INT 2
2283: PPUSH
2284: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
2288: LD_EXP 7
2292: PPUSH
2293: LD_INT 4
2295: PPUSH
2296: LD_INT 0
2298: PPUSH
2299: CALL_OW 49
// end else
2303: GO 2321
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2305: LD_INT 4
2307: PPUSH
2308: LD_INT 0
2310: PPUSH
2311: LD_INT 1
2313: PPUSH
2314: LD_INT 0
2316: PPUSH
2317: CALL 1456 0 4
// Gary := PrepareUnit ( Gary , ( not debugMode ) , 11_ ) ;
2321: LD_ADDR_EXP 11
2325: PUSH
2326: LD_STRING Gary
2328: PPUSH
2329: LD_EXP 41
2333: NOT
2334: PPUSH
2335: LD_STRING 11_
2337: PPUSH
2338: CALL 41467 0 3
2342: ST_TO_ADDR
// if Gary then
2343: LD_EXP 11
2347: IFFALSE 2378
// begin SetClass ( Gary , class_engineer ) ;
2349: LD_EXP 11
2353: PPUSH
2354: LD_INT 2
2356: PPUSH
2357: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2361: LD_EXP 11
2365: PPUSH
2366: LD_INT 4
2368: PPUSH
2369: LD_INT 0
2371: PPUSH
2372: CALL_OW 49
// end else
2376: GO 2394
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2378: LD_INT 4
2380: PPUSH
2381: LD_INT 0
2383: PPUSH
2384: LD_INT 1
2386: PPUSH
2387: LD_INT 0
2389: PPUSH
2390: CALL 1456 0 4
// vc_chassis := us_medium_tracked ;
2394: LD_ADDR_OWVAR 37
2398: PUSH
2399: LD_INT 3
2401: ST_TO_ADDR
// vc_engine := engine_siberite ;
2402: LD_ADDR_OWVAR 39
2406: PUSH
2407: LD_INT 3
2409: ST_TO_ADDR
// vc_control := control_manual ;
2410: LD_ADDR_OWVAR 38
2414: PUSH
2415: LD_INT 1
2417: ST_TO_ADDR
// vc_weapon := us_crane ;
2418: LD_ADDR_OWVAR 40
2422: PUSH
2423: LD_INT 13
2425: ST_TO_ADDR
// veh := CreateVehicle ;
2426: LD_ADDR_VAR 0 2
2430: PUSH
2431: CALL_OW 45
2435: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2436: LD_VAR 0 2
2440: PPUSH
2441: LD_INT 4
2443: PPUSH
2444: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2448: LD_VAR 0 2
2452: PPUSH
2453: LD_INT 4
2455: PPUSH
2456: LD_INT 0
2458: PPUSH
2459: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2463: LD_INT 4
2465: PPUSH
2466: LD_VAR 0 2
2470: PPUSH
2471: LD_INT 2
2473: PPUSH
2474: LD_INT 1
2476: PPUSH
2477: CALL 1456 0 4
// vc_weapon := us_laser ;
2481: LD_ADDR_OWVAR 40
2485: PUSH
2486: LD_INT 9
2488: ST_TO_ADDR
// veh := CreateVehicle ;
2489: LD_ADDR_VAR 0 2
2493: PUSH
2494: CALL_OW 45
2498: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2499: LD_VAR 0 2
2503: PPUSH
2504: LD_INT 4
2506: PPUSH
2507: CALL_OW 233
// repeat wait ( 3 ) ;
2511: LD_INT 3
2513: PPUSH
2514: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2518: LD_VAR 0 2
2522: PPUSH
2523: LD_INT 4
2525: PPUSH
2526: LD_INT 0
2528: PPUSH
2529: CALL_OW 49
2533: IFFALSE 2511
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2535: LD_INT 4
2537: PPUSH
2538: LD_VAR 0 2
2542: PPUSH
2543: LD_INT 2
2545: PPUSH
2546: LD_INT 1
2548: PPUSH
2549: CALL 1456 0 4
// vc_control := control_computer ;
2553: LD_ADDR_OWVAR 38
2557: PUSH
2558: LD_INT 3
2560: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2561: LD_ADDR_OWVAR 40
2565: PUSH
2566: LD_INT 12
2568: ST_TO_ADDR
// veh := CreateVehicle ;
2569: LD_ADDR_VAR 0 2
2573: PUSH
2574: CALL_OW 45
2578: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2579: LD_VAR 0 2
2583: PPUSH
2584: LD_INT 17
2586: PPUSH
2587: CALL_OW 109
// SetDir ( veh , 4 ) ;
2591: LD_VAR 0 2
2595: PPUSH
2596: LD_INT 4
2598: PPUSH
2599: CALL_OW 233
// repeat wait ( 1 ) ;
2603: LD_INT 1
2605: PPUSH
2606: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2610: LD_VAR 0 2
2614: PPUSH
2615: LD_INT 4
2617: PPUSH
2618: LD_INT 0
2620: PPUSH
2621: CALL_OW 49
2625: IFFALSE 2603
// AddCargo ( veh , mat_siberit , 100 ) ;
2627: LD_VAR 0 2
2631: PPUSH
2632: LD_INT 3
2634: PPUSH
2635: LD_INT 100
2637: PPUSH
2638: CALL_OW 291
// veh := CreateVehicle ;
2642: LD_ADDR_VAR 0 2
2646: PUSH
2647: CALL_OW 45
2651: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2652: LD_VAR 0 2
2656: PPUSH
2657: LD_INT 17
2659: PPUSH
2660: CALL_OW 109
// SetDir ( veh , 4 ) ;
2664: LD_VAR 0 2
2668: PPUSH
2669: LD_INT 4
2671: PPUSH
2672: CALL_OW 233
// repeat wait ( 1 ) ;
2676: LD_INT 1
2678: PPUSH
2679: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2683: LD_VAR 0 2
2687: PPUSH
2688: LD_INT 4
2690: PPUSH
2691: LD_INT 0
2693: PPUSH
2694: CALL_OW 49
2698: IFFALSE 2676
// AddCargo ( veh , mat_siberit , 20 ) ;
2700: LD_VAR 0 2
2704: PPUSH
2705: LD_INT 3
2707: PPUSH
2708: LD_INT 20
2710: PPUSH
2711: CALL_OW 291
// AddCargo ( veh , mat_cans , 80 ) ;
2715: LD_VAR 0 2
2719: PPUSH
2720: LD_INT 1
2722: PPUSH
2723: LD_INT 80
2725: PPUSH
2726: CALL_OW 291
// end ;
2730: LD_VAR 0 1
2734: RET
// export function PowellSupport2 ; var veh , un ; begin
2735: LD_INT 0
2737: PPUSH
2738: PPUSH
2739: PPUSH
// uc_side := 1 ;
2740: LD_ADDR_OWVAR 20
2744: PUSH
2745: LD_INT 1
2747: ST_TO_ADDR
// uc_nation := 1 ;
2748: LD_ADDR_OWVAR 21
2752: PUSH
2753: LD_INT 1
2755: ST_TO_ADDR
// vc_engine := engine_siberite ;
2756: LD_ADDR_OWVAR 39
2760: PUSH
2761: LD_INT 3
2763: ST_TO_ADDR
// vc_control := control_computer ;
2764: LD_ADDR_OWVAR 38
2768: PUSH
2769: LD_INT 3
2771: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2772: LD_ADDR_OWVAR 37
2776: PUSH
2777: LD_INT 2
2779: ST_TO_ADDR
// vc_weapon := us_double_gun ;
2780: LD_ADDR_OWVAR 40
2784: PUSH
2785: LD_INT 5
2787: ST_TO_ADDR
// veh := CreateVehicle ;
2788: LD_ADDR_VAR 0 2
2792: PUSH
2793: CALL_OW 45
2797: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2798: LD_VAR 0 2
2802: PPUSH
2803: LD_INT 4
2805: PPUSH
2806: CALL_OW 233
// repeat wait ( 1 ) ;
2810: LD_INT 1
2812: PPUSH
2813: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2817: LD_VAR 0 2
2821: PPUSH
2822: LD_INT 4
2824: PPUSH
2825: LD_INT 0
2827: PPUSH
2828: CALL_OW 49
2832: IFFALSE 2810
// vc_chassis := us_heavy_tracked ;
2834: LD_ADDR_OWVAR 37
2838: PUSH
2839: LD_INT 4
2841: ST_TO_ADDR
// vc_engine := engine_siberite ;
2842: LD_ADDR_OWVAR 39
2846: PUSH
2847: LD_INT 3
2849: ST_TO_ADDR
// vc_control := control_manual ;
2850: LD_ADDR_OWVAR 38
2854: PUSH
2855: LD_INT 1
2857: ST_TO_ADDR
// vc_weapon := us_heavy_gun ;
2858: LD_ADDR_OWVAR 40
2862: PUSH
2863: LD_INT 6
2865: ST_TO_ADDR
// veh := CreateVehicle ;
2866: LD_ADDR_VAR 0 2
2870: PUSH
2871: CALL_OW 45
2875: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2876: LD_VAR 0 2
2880: PPUSH
2881: LD_INT 4
2883: PPUSH
2884: CALL_OW 233
// repeat wait ( 1 ) ;
2888: LD_INT 1
2890: PPUSH
2891: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2895: LD_VAR 0 2
2899: PPUSH
2900: LD_INT 4
2902: PPUSH
2903: LD_INT 0
2905: PPUSH
2906: CALL_OW 49
2910: IFFALSE 2888
// Bobby := PrepareUnit ( Bobby , ( not debugMode ) , 11_ ) ;
2912: LD_ADDR_EXP 4
2916: PUSH
2917: LD_STRING Bobby
2919: PPUSH
2920: LD_EXP 41
2924: NOT
2925: PPUSH
2926: LD_STRING 11_
2928: PPUSH
2929: CALL 41467 0 3
2933: ST_TO_ADDR
// if Bobby then
2934: LD_EXP 4
2938: IFFALSE 2968
// begin SetClass ( Bobby , 3 ) ;
2940: LD_EXP 4
2944: PPUSH
2945: LD_INT 3
2947: PPUSH
2948: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2952: LD_EXP 4
2956: PPUSH
2957: LD_VAR 0 2
2961: PPUSH
2962: CALL_OW 52
// end else
2966: GO 2986
// PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2968: LD_INT 0
2970: PPUSH
2971: LD_VAR 0 2
2975: PPUSH
2976: LD_INT 2
2978: PPUSH
2979: LD_INT 0
2981: PPUSH
2982: CALL 1456 0 4
// Houten := PrepareUnit ( Houten , ( not debugMode ) , 11_ ) ;
2986: LD_ADDR_EXP 9
2990: PUSH
2991: LD_STRING Houten
2993: PPUSH
2994: LD_EXP 41
2998: NOT
2999: PPUSH
3000: LD_STRING 11_
3002: PPUSH
3003: CALL 41467 0 3
3007: ST_TO_ADDR
// if Houten then
3008: LD_EXP 9
3012: IFFALSE 3052
// begin SetClass ( Houten , 1 ) ;
3014: LD_EXP 9
3018: PPUSH
3019: LD_INT 1
3021: PPUSH
3022: CALL_OW 336
// repeat wait ( 1 ) ;
3026: LD_INT 1
3028: PPUSH
3029: CALL_OW 67
// until PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
3033: LD_EXP 9
3037: PPUSH
3038: LD_INT 4
3040: PPUSH
3041: LD_INT 0
3043: PPUSH
3044: CALL_OW 49
3048: IFFALSE 3026
// end else
3050: GO 3068
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3052: LD_INT 4
3054: PPUSH
3055: LD_INT 0
3057: PPUSH
3058: LD_INT 1
3060: PPUSH
3061: LD_INT 0
3063: PPUSH
3064: CALL 1456 0 4
// vc_chassis := us_medium_wheeled ;
3068: LD_ADDR_OWVAR 37
3072: PUSH
3073: LD_INT 2
3075: ST_TO_ADDR
// vc_control := control_computer ;
3076: LD_ADDR_OWVAR 38
3080: PUSH
3081: LD_INT 3
3083: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
3084: LD_ADDR_OWVAR 40
3088: PUSH
3089: LD_INT 12
3091: ST_TO_ADDR
// veh := CreateVehicle ;
3092: LD_ADDR_VAR 0 2
3096: PUSH
3097: CALL_OW 45
3101: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3102: LD_VAR 0 2
3106: PPUSH
3107: LD_INT 4
3109: PPUSH
3110: CALL_OW 233
// SetTag ( veh , 17 ) ;
3114: LD_VAR 0 2
3118: PPUSH
3119: LD_INT 17
3121: PPUSH
3122: CALL_OW 109
// AddCargo ( veh , mat_cans , 100 ) ;
3126: LD_VAR 0 2
3130: PPUSH
3131: LD_INT 1
3133: PPUSH
3134: LD_INT 100
3136: PPUSH
3137: CALL_OW 291
// veh := CreateVehicle ;
3141: LD_ADDR_VAR 0 2
3145: PUSH
3146: CALL_OW 45
3150: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3151: LD_VAR 0 2
3155: PPUSH
3156: LD_INT 4
3158: PPUSH
3159: CALL_OW 233
// SetTag ( veh , 17 ) ;
3163: LD_VAR 0 2
3167: PPUSH
3168: LD_INT 17
3170: PPUSH
3171: CALL_OW 109
// repeat wait ( 1 ) ;
3175: LD_INT 1
3177: PPUSH
3178: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
3182: LD_VAR 0 2
3186: PPUSH
3187: LD_INT 4
3189: PPUSH
3190: LD_INT 0
3192: PPUSH
3193: CALL_OW 49
3197: IFFALSE 3175
// AddCargo ( veh , mat_cans , 100 ) ;
3199: LD_VAR 0 2
3203: PPUSH
3204: LD_INT 1
3206: PPUSH
3207: LD_INT 100
3209: PPUSH
3210: CALL_OW 291
// veh := CreateVehicle ;
3214: LD_ADDR_VAR 0 2
3218: PUSH
3219: CALL_OW 45
3223: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3224: LD_VAR 0 2
3228: PPUSH
3229: LD_INT 4
3231: PPUSH
3232: CALL_OW 233
// SetTag ( veh , 17 ) ;
3236: LD_VAR 0 2
3240: PPUSH
3241: LD_INT 17
3243: PPUSH
3244: CALL_OW 109
// repeat wait ( 1 ) ;
3248: LD_INT 1
3250: PPUSH
3251: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
3255: LD_VAR 0 2
3259: PPUSH
3260: LD_INT 4
3262: PPUSH
3263: LD_INT 0
3265: PPUSH
3266: CALL_OW 49
3270: IFFALSE 3248
// if kurtStatus then
3272: LD_EXP 19
3276: IFFALSE 3310
// begin AddCargo ( veh , mat_siberit , 60 ) ;
3278: LD_VAR 0 2
3282: PPUSH
3283: LD_INT 3
3285: PPUSH
3286: LD_INT 60
3288: PPUSH
3289: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
3293: LD_VAR 0 2
3297: PPUSH
3298: LD_INT 1
3300: PPUSH
3301: LD_INT 40
3303: PPUSH
3304: CALL_OW 291
// end else
3308: GO 3325
// AddCargo ( veh , mat_cans , 100 ) ;
3310: LD_VAR 0 2
3314: PPUSH
3315: LD_INT 1
3317: PPUSH
3318: LD_INT 100
3320: PPUSH
3321: CALL_OW 291
// veh := CreateVehicle ;
3325: LD_ADDR_VAR 0 2
3329: PUSH
3330: CALL_OW 45
3334: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3335: LD_VAR 0 2
3339: PPUSH
3340: LD_INT 4
3342: PPUSH
3343: CALL_OW 233
// SetTag ( veh , 17 ) ;
3347: LD_VAR 0 2
3351: PPUSH
3352: LD_INT 17
3354: PPUSH
3355: CALL_OW 109
// repeat wait ( 1 ) ;
3359: LD_INT 1
3361: PPUSH
3362: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
3366: LD_VAR 0 2
3370: PPUSH
3371: LD_INT 4
3373: PPUSH
3374: LD_INT 0
3376: PPUSH
3377: CALL_OW 49
3381: IFFALSE 3359
// AddCargo ( veh , mat_oil , 60 ) ;
3383: LD_VAR 0 2
3387: PPUSH
3388: LD_INT 2
3390: PPUSH
3391: LD_INT 60
3393: PPUSH
3394: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
3398: LD_VAR 0 2
3402: PPUSH
3403: LD_INT 1
3405: PPUSH
3406: LD_INT 40
3408: PPUSH
3409: CALL_OW 291
// end ;
3413: LD_VAR 0 1
3417: RET
// export function PowellSupport3 ; var i , cargo ; begin
3418: LD_INT 0
3420: PPUSH
3421: PPUSH
3422: PPUSH
// uc_side := 1 ;
3423: LD_ADDR_OWVAR 20
3427: PUSH
3428: LD_INT 1
3430: ST_TO_ADDR
// uc_nation := 1 ;
3431: LD_ADDR_OWVAR 21
3435: PUSH
3436: LD_INT 1
3438: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3439: LD_INT 4
3441: PPUSH
3442: LD_INT 0
3444: PPUSH
3445: LD_INT 1
3447: PPUSH
3448: LD_INT 0
3450: PPUSH
3451: CALL 1456 0 4
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3455: LD_INT 4
3457: PPUSH
3458: LD_INT 0
3460: PPUSH
3461: LD_INT 1
3463: PPUSH
3464: LD_INT 0
3466: PPUSH
3467: CALL 1456 0 4
// for i := 1 to 2 do
3471: LD_ADDR_VAR 0 2
3475: PUSH
3476: DOUBLE
3477: LD_INT 1
3479: DEC
3480: ST_TO_ADDR
3481: LD_INT 2
3483: PUSH
3484: FOR_TO
3485: IFFALSE 3594
// begin vc_chassis := us_medium_wheeled ;
3487: LD_ADDR_OWVAR 37
3491: PUSH
3492: LD_INT 2
3494: ST_TO_ADDR
// vc_engine := engine_siberite ;
3495: LD_ADDR_OWVAR 39
3499: PUSH
3500: LD_INT 3
3502: ST_TO_ADDR
// vc_control = control_computer ;
3503: LD_ADDR_OWVAR 38
3507: PUSH
3508: LD_INT 3
3510: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
3511: LD_ADDR_OWVAR 40
3515: PUSH
3516: LD_INT 12
3518: ST_TO_ADDR
// cargo := CreateVehicle ;
3519: LD_ADDR_VAR 0 3
3523: PUSH
3524: CALL_OW 45
3528: ST_TO_ADDR
// SetDir ( cargo , 4 ) ;
3529: LD_VAR 0 3
3533: PPUSH
3534: LD_INT 4
3536: PPUSH
3537: CALL_OW 233
// SetTag ( cargo , 17 ) ;
3541: LD_VAR 0 3
3545: PPUSH
3546: LD_INT 17
3548: PPUSH
3549: CALL_OW 109
// repeat wait ( 1 ) ;
3553: LD_INT 1
3555: PPUSH
3556: CALL_OW 67
// until PlaceUnitArea ( cargo , PlayerSpawn , false ) ;
3560: LD_VAR 0 3
3564: PPUSH
3565: LD_INT 4
3567: PPUSH
3568: LD_INT 0
3570: PPUSH
3571: CALL_OW 49
3575: IFFALSE 3553
// AddCargo ( cargo , mat_cans , 100 ) ;
3577: LD_VAR 0 3
3581: PPUSH
3582: LD_INT 1
3584: PPUSH
3585: LD_INT 100
3587: PPUSH
3588: CALL_OW 291
// end ;
3592: GO 3484
3594: POP
3595: POP
// end ; end_of_file
3596: LD_VAR 0 1
3600: RET
// export function PrepareRussian ; begin
3601: LD_INT 0
3603: PPUSH
// SetBName ( rueastdepot , ryutin ) ;
3604: LD_INT 4
3606: PPUSH
3607: LD_STRING ryutin
3609: PPUSH
3610: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
3614: LD_INT 6
3616: PPUSH
3617: LD_STRING yegorov
3619: PPUSH
3620: CALL_OW 500
// PrepareDifficulty ;
3624: CALL 13281 0 0
// PrepareRussianCommander ;
3628: CALL 3649 0 0
// PrepareWestBase ;
3632: CALL 4374 0 0
// PrepareEastBase ;
3636: CALL 3728 0 0
// PrepareOtherRussians ;
3640: CALL 4600 0 0
// end ;
3644: LD_VAR 0 1
3648: RET
// export function PrepareRussianCommander ; begin
3649: LD_INT 0
3651: PPUSH
// uc_side := 3 ;
3652: LD_ADDR_OWVAR 20
3656: PUSH
3657: LD_INT 3
3659: ST_TO_ADDR
// Davidov := PrepareUnit ( Davidov , false ,  ) ;
3660: LD_ADDR_EXP 16
3664: PUSH
3665: LD_STRING Davidov
3667: PPUSH
3668: LD_INT 0
3670: PPUSH
3671: LD_STRING 
3673: PPUSH
3674: CALL 41467 0 3
3678: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3679: LD_EXP 16
3683: PPUSH
3684: LD_INT 3
3686: PPUSH
3687: CALL_OW 52
// RuScientists := Join ( RuScientists , Davidov ) ;
3691: LD_ADDR_EXP 27
3695: PUSH
3696: LD_EXP 27
3700: PPUSH
3701: LD_EXP 16
3705: PPUSH
3706: CALL 79599 0 2
3710: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3711: LD_EXP 27
3715: PPUSH
3716: LD_INT 4
3718: PPUSH
3719: CALL_OW 336
// end ;
3723: LD_VAR 0 1
3727: RET
// export function PrepareEastBase ; var i , un ; begin
3728: LD_INT 0
3730: PPUSH
3731: PPUSH
3732: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , [ 2 , 2 , 3 , 3 ] [ Difficulty ] ) ;
3733: LD_INT 3
3735: PPUSH
3736: LD_INT 3
3738: PPUSH
3739: LD_INT 121
3741: PPUSH
3742: LD_EXP 29
3746: PPUSH
3747: LD_EXP 30
3751: PPUSH
3752: CALL_OW 12
3756: PPUSH
3757: LD_INT 1
3759: PPUSH
3760: LD_INT 2
3762: PUSH
3763: LD_INT 2
3765: PUSH
3766: LD_INT 3
3768: PUSH
3769: LD_INT 3
3771: PUSH
3772: EMPTY
3773: LIST
3774: LIST
3775: LIST
3776: LIST
3777: PUSH
3778: LD_OWVAR 67
3782: ARRAY
3783: PPUSH
3784: CALL 13600 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
3788: LD_INT 3
3790: PPUSH
3791: LD_INT 3
3793: PPUSH
3794: LD_INT 121
3796: PPUSH
3797: LD_EXP 29
3801: PPUSH
3802: LD_EXP 30
3806: PPUSH
3807: CALL_OW 12
3811: PPUSH
3812: LD_INT 9
3814: PPUSH
3815: LD_INT 1
3817: PUSH
3818: LD_INT 2
3820: PUSH
3821: LD_INT 3
3823: PUSH
3824: LD_INT 3
3826: PUSH
3827: EMPTY
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: PUSH
3833: LD_OWVAR 67
3837: ARRAY
3838: PPUSH
3839: CALL 13600 0 6
// RespawnInside ( 3 , 3 , rubar3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , [ 2 , 3 , 4 , 5 ] [ Difficulty ] ) ;
3843: LD_INT 3
3845: PPUSH
3846: LD_INT 3
3848: PPUSH
3849: LD_INT 226
3851: PPUSH
3852: LD_EXP 29
3856: PPUSH
3857: LD_EXP 30
3861: PPUSH
3862: CALL_OW 12
3866: PPUSH
3867: LD_INT 9
3869: PPUSH
3870: LD_INT 2
3872: PUSH
3873: LD_INT 3
3875: PUSH
3876: LD_INT 4
3878: PUSH
3879: LD_INT 5
3881: PUSH
3882: EMPTY
3883: LIST
3884: LIST
3885: LIST
3886: LIST
3887: PUSH
3888: LD_OWVAR 67
3892: ARRAY
3893: PPUSH
3894: CALL 13600 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3898: LD_INT 3
3900: PPUSH
3901: LD_INT 3
3903: PPUSH
3904: LD_INT 4
3906: PPUSH
3907: LD_EXP 29
3911: PPUSH
3912: LD_EXP 30
3916: PPUSH
3917: CALL_OW 12
3921: PPUSH
3922: LD_INT 2
3924: PPUSH
3925: LD_INT 3
3927: PUSH
3928: LD_INT 4
3930: PUSH
3931: LD_INT 5
3933: PUSH
3934: LD_INT 6
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: PUSH
3943: LD_OWVAR 67
3947: ARRAY
3948: PPUSH
3949: CALL 13600 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , [ 4 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3953: LD_INT 3
3955: PPUSH
3956: LD_INT 3
3958: PPUSH
3959: LD_INT 112
3961: PPUSH
3962: LD_EXP 29
3966: PPUSH
3967: LD_EXP 30
3971: PPUSH
3972: CALL_OW 12
3976: PPUSH
3977: LD_INT 3
3979: PPUSH
3980: LD_INT 4
3982: PUSH
3983: LD_INT 4
3985: PUSH
3986: LD_INT 5
3988: PUSH
3989: LD_INT 6
3991: PUSH
3992: EMPTY
3993: LIST
3994: LIST
3995: LIST
3996: LIST
3997: PUSH
3998: LD_OWVAR 67
4002: ARRAY
4003: PPUSH
4004: CALL 13600 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , [ 2 , 3 , 4 , 5 ] [ Difficulty ] ) ;
4008: LD_INT 3
4010: PPUSH
4011: LD_INT 3
4013: PPUSH
4014: LD_INT 47
4016: PPUSH
4017: LD_EXP 29
4021: PPUSH
4022: LD_EXP 30
4026: PPUSH
4027: CALL_OW 12
4031: PPUSH
4032: LD_INT 4
4034: PPUSH
4035: LD_INT 2
4037: PUSH
4038: LD_INT 3
4040: PUSH
4041: LD_INT 4
4043: PUSH
4044: LD_INT 5
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: PUSH
4053: LD_OWVAR 67
4057: ARRAY
4058: PPUSH
4059: CALL 13600 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , [ 2 , 3 , 4 , 5 ] [ Difficulty ] ) ;
4063: LD_INT 3
4065: PPUSH
4066: LD_INT 3
4068: PPUSH
4069: LD_INT 129
4071: PPUSH
4072: LD_EXP 29
4076: PPUSH
4077: LD_EXP 30
4081: PPUSH
4082: CALL_OW 12
4086: PPUSH
4087: LD_INT 4
4089: PPUSH
4090: LD_INT 2
4092: PUSH
4093: LD_INT 3
4095: PUSH
4096: LD_INT 4
4098: PUSH
4099: LD_INT 5
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: LIST
4106: LIST
4107: PUSH
4108: LD_OWVAR 67
4112: ARRAY
4113: PPUSH
4114: CALL 13600 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , [ 2 , 3 , 4 , 5 ] [ Difficulty ] ) ;
4118: LD_INT 3
4120: PPUSH
4121: LD_INT 3
4123: PPUSH
4124: LD_INT 135
4126: PPUSH
4127: LD_EXP 29
4131: PPUSH
4132: LD_EXP 30
4136: PPUSH
4137: CALL_OW 12
4141: PPUSH
4142: LD_INT 4
4144: PPUSH
4145: LD_INT 2
4147: PUSH
4148: LD_INT 3
4150: PUSH
4151: LD_INT 4
4153: PUSH
4154: LD_INT 5
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: PUSH
4163: LD_OWVAR 67
4167: ARRAY
4168: PPUSH
4169: CALL 13600 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
4173: LD_ADDR_VAR 0 2
4177: PUSH
4178: LD_INT 22
4180: PUSH
4181: LD_INT 3
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PUSH
4188: LD_INT 30
4190: PUSH
4191: LD_INT 32
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PUSH
4198: EMPTY
4199: LIST
4200: LIST
4201: PPUSH
4202: CALL_OW 69
4206: PUSH
4207: FOR_IN
4208: IFFALSE 4248
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
4210: LD_INT 3
4212: PPUSH
4213: LD_INT 3
4215: PPUSH
4216: LD_VAR 0 2
4220: PPUSH
4221: LD_EXP 29
4225: PPUSH
4226: LD_EXP 30
4230: PPUSH
4231: CALL_OW 12
4235: PPUSH
4236: LD_INT 1
4238: PPUSH
4239: LD_INT 1
4241: PPUSH
4242: CALL 13600 0 6
4246: GO 4207
4248: POP
4249: POP
// for i := 1 to 5 do
4250: LD_ADDR_VAR 0 2
4254: PUSH
4255: DOUBLE
4256: LD_INT 1
4258: DEC
4259: ST_TO_ADDR
4260: LD_INT 5
4262: PUSH
4263: FOR_TO
4264: IFFALSE 4367
// begin uc_side := 3 ;
4266: LD_ADDR_OWVAR 20
4270: PUSH
4271: LD_INT 3
4273: ST_TO_ADDR
// uc_nation := 3 ;
4274: LD_ADDR_OWVAR 21
4278: PUSH
4279: LD_INT 3
4281: ST_TO_ADDR
// hc_gallery :=  ;
4282: LD_ADDR_OWVAR 33
4286: PUSH
4287: LD_STRING 
4289: ST_TO_ADDR
// hc_name :=  ;
4290: LD_ADDR_OWVAR 26
4294: PUSH
4295: LD_STRING 
4297: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4298: LD_INT 0
4300: PPUSH
4301: LD_INT 4
4303: PPUSH
4304: LD_EXP 29
4308: PPUSH
4309: LD_EXP 30
4313: PPUSH
4314: CALL_OW 12
4318: PPUSH
4319: CALL_OW 380
// un := CreateHuman ;
4323: LD_ADDR_VAR 0 3
4327: PUSH
4328: CALL_OW 44
4332: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
4333: LD_VAR 0 3
4337: PPUSH
4338: LD_INT 3
4340: PPUSH
4341: CALL_OW 52
// RuScientists := Join ( RuScientists , un ) ;
4345: LD_ADDR_EXP 27
4349: PUSH
4350: LD_EXP 27
4354: PPUSH
4355: LD_VAR 0 3
4359: PPUSH
4360: CALL 79599 0 2
4364: ST_TO_ADDR
// end ;
4365: GO 4263
4367: POP
4368: POP
// end ;
4369: LD_VAR 0 1
4373: RET
// export function PrepareWestBase ; var i , un ; begin
4374: LD_INT 0
4376: PPUSH
4377: PPUSH
4378: PPUSH
// if Difficulty = 1 then
4379: LD_OWVAR 67
4383: PUSH
4384: LD_INT 1
4386: EQUAL
4387: IFFALSE 4425
// for i in FilterAllUnits ( [ f_inarea , delBuildingsArea ] ) do
4389: LD_ADDR_VAR 0 2
4393: PUSH
4394: LD_INT 95
4396: PUSH
4397: LD_INT 28
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: PPUSH
4404: CALL_OW 69
4408: PUSH
4409: FOR_IN
4410: IFFALSE 4423
// RemoveUnit ( i ) ;
4412: LD_VAR 0 2
4416: PPUSH
4417: CALL_OW 64
4421: GO 4409
4423: POP
4424: POP
// TeleportExit ( ruteleprt , 122 , 145 ) ;
4425: LD_INT 10
4427: PPUSH
4428: LD_INT 122
4430: PPUSH
4431: LD_INT 145
4433: PPUSH
4434: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
4438: LD_INT 137
4440: PPUSH
4441: LD_INT 84
4443: PPUSH
4444: LD_INT 61
4446: PPUSH
4447: CALL_OW 243
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ) ;
4451: LD_INT 3
4453: PPUSH
4454: LD_INT 3
4456: PPUSH
4457: LD_INT 6
4459: PPUSH
4460: LD_EXP 29
4464: PPUSH
4465: LD_EXP 30
4469: PPUSH
4470: CALL_OW 12
4474: PPUSH
4475: LD_INT 2
4477: PPUSH
4478: LD_INT 2
4480: PUSH
4481: LD_INT 3
4483: PUSH
4484: LD_INT 3
4486: PUSH
4487: LD_INT 3
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: PUSH
4496: LD_OWVAR 67
4500: ARRAY
4501: PPUSH
4502: CALL 13600 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
4506: LD_INT 3
4508: PPUSH
4509: LD_INT 3
4511: PPUSH
4512: LD_INT 91
4514: PPUSH
4515: LD_EXP 29
4519: PPUSH
4520: LD_EXP 30
4524: PPUSH
4525: CALL_OW 12
4529: PPUSH
4530: LD_INT 4
4532: PPUSH
4533: LD_INT 3
4535: PPUSH
4536: CALL 13600 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
4540: LD_INT 3
4542: PPUSH
4543: LD_INT 3
4545: PPUSH
4546: LD_INT 21
4548: PPUSH
4549: LD_EXP 29
4553: PPUSH
4554: LD_EXP 30
4558: PPUSH
4559: CALL_OW 12
4563: PPUSH
4564: LD_INT 3
4566: PPUSH
4567: LD_INT 4
4569: PUSH
4570: LD_INT 5
4572: PUSH
4573: LD_INT 6
4575: PUSH
4576: LD_INT 6
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: PUSH
4585: LD_OWVAR 67
4589: ARRAY
4590: PPUSH
4591: CALL 13600 0 6
// end ;
4595: LD_VAR 0 1
4599: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
4600: LD_INT 0
4602: PPUSH
4603: PPUSH
4604: PPUSH
4605: PPUSH
// uc_side := 3 ;
4606: LD_ADDR_OWVAR 20
4610: PUSH
4611: LD_INT 3
4613: ST_TO_ADDR
// uc_nation := 3 ;
4614: LD_ADDR_OWVAR 21
4618: PUSH
4619: LD_INT 3
4621: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 5 , 5 ] [ Difficulty ] do
4622: LD_ADDR_VAR 0 2
4626: PUSH
4627: DOUBLE
4628: LD_INT 1
4630: DEC
4631: ST_TO_ADDR
4632: LD_INT 4
4634: PUSH
4635: LD_INT 5
4637: PUSH
4638: LD_INT 5
4640: PUSH
4641: LD_INT 5
4643: PUSH
4644: EMPTY
4645: LIST
4646: LIST
4647: LIST
4648: LIST
4649: PUSH
4650: LD_OWVAR 67
4654: ARRAY
4655: PUSH
4656: FOR_TO
4657: IFFALSE 4727
// begin hc_gallery :=  ;
4659: LD_ADDR_OWVAR 33
4663: PUSH
4664: LD_STRING 
4666: ST_TO_ADDR
// hc_name :=  ;
4667: LD_ADDR_OWVAR 26
4671: PUSH
4672: LD_STRING 
4674: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4675: LD_INT 0
4677: PPUSH
4678: LD_INT 9
4680: PPUSH
4681: LD_EXP 29
4685: PPUSH
4686: LD_EXP 30
4690: PPUSH
4691: CALL_OW 12
4695: PPUSH
4696: CALL_OW 380
// un := CreateHuman ;
4700: LD_ADDR_VAR 0 3
4704: PUSH
4705: CALL_OW 44
4709: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4710: LD_VAR 0 3
4714: PPUSH
4715: LD_INT 8
4717: PPUSH
4718: LD_INT 0
4720: PPUSH
4721: CALL_OW 49
// end ;
4725: GO 4656
4727: POP
4728: POP
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4729: LD_ADDR_VAR 0 2
4733: PUSH
4734: DOUBLE
4735: LD_INT 1
4737: DEC
4738: ST_TO_ADDR
4739: LD_INT 2
4741: PUSH
4742: LD_INT 3
4744: PUSH
4745: LD_INT 4
4747: PUSH
4748: LD_INT 4
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: PUSH
4757: LD_OWVAR 67
4761: ARRAY
4762: PUSH
4763: FOR_TO
4764: IFFALSE 4834
// begin hc_gallery :=  ;
4766: LD_ADDR_OWVAR 33
4770: PUSH
4771: LD_STRING 
4773: ST_TO_ADDR
// hc_name :=  ;
4774: LD_ADDR_OWVAR 26
4778: PUSH
4779: LD_STRING 
4781: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4782: LD_INT 0
4784: PPUSH
4785: LD_INT 4
4787: PPUSH
4788: LD_EXP 29
4792: PPUSH
4793: LD_EXP 30
4797: PPUSH
4798: CALL_OW 12
4802: PPUSH
4803: CALL_OW 380
// un := CreateHuman ;
4807: LD_ADDR_VAR 0 3
4811: PUSH
4812: CALL_OW 44
4816: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4817: LD_VAR 0 3
4821: PPUSH
4822: LD_INT 8
4824: PPUSH
4825: LD_INT 0
4827: PPUSH
4828: CALL_OW 49
// end ;
4832: GO 4763
4834: POP
4835: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4836: LD_ADDR_VAR 0 2
4840: PUSH
4841: DOUBLE
4842: LD_INT 1
4844: DEC
4845: ST_TO_ADDR
4846: LD_INT 3
4848: PUSH
4849: LD_INT 4
4851: PUSH
4852: LD_INT 5
4854: PUSH
4855: LD_INT 5
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: PUSH
4864: LD_OWVAR 67
4868: ARRAY
4869: PUSH
4870: FOR_TO
4871: IFFALSE 5088
// begin vc_engine = 3 ;
4873: LD_ADDR_OWVAR 39
4877: PUSH
4878: LD_INT 3
4880: ST_TO_ADDR
// vc_control = 1 ;
4881: LD_ADDR_OWVAR 38
4885: PUSH
4886: LD_INT 1
4888: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ rand ( 1 , 5 ) ] ;
4889: LD_ADDR_OWVAR 40
4893: PUSH
4894: LD_INT 42
4896: PUSH
4897: LD_INT 43
4899: PUSH
4900: LD_INT 44
4902: PUSH
4903: LD_INT 45
4905: PUSH
4906: LD_INT 46
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: LIST
4913: LIST
4914: LIST
4915: PUSH
4916: LD_INT 1
4918: PPUSH
4919: LD_INT 5
4921: PPUSH
4922: CALL_OW 12
4926: ARRAY
4927: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4928: LD_OWVAR 40
4932: PUSH
4933: LD_INT 46
4935: EQUAL
4936: IFFALSE 4948
// vc_chassis := ru_heavy_tracked else
4938: LD_ADDR_OWVAR 37
4942: PUSH
4943: LD_INT 24
4945: ST_TO_ADDR
4946: GO 4975
// vc_chassis := [ ru_medium_tracked , ru_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
4948: LD_ADDR_OWVAR 37
4952: PUSH
4953: LD_INT 22
4955: PUSH
4956: LD_INT 21
4958: PUSH
4959: EMPTY
4960: LIST
4961: LIST
4962: PUSH
4963: LD_INT 1
4965: PPUSH
4966: LD_INT 2
4968: PPUSH
4969: CALL_OW 12
4973: ARRAY
4974: ST_TO_ADDR
// veh := CreateVehicle ;
4975: LD_ADDR_VAR 0 4
4979: PUSH
4980: CALL_OW 45
4984: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4985: LD_VAR 0 4
4989: PPUSH
4990: LD_INT 3
4992: PPUSH
4993: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4997: LD_VAR 0 4
5001: PPUSH
5002: LD_INT 5
5004: PPUSH
5005: LD_INT 0
5007: PPUSH
5008: CALL_OW 49
// hc_gallery :=  ;
5012: LD_ADDR_OWVAR 33
5016: PUSH
5017: LD_STRING 
5019: ST_TO_ADDR
// hc_name :=  ;
5020: LD_ADDR_OWVAR 26
5024: PUSH
5025: LD_STRING 
5027: ST_TO_ADDR
// PrepareHuman ( false , 3 , [ 6 , 7 , 8 , 10 ] [ Difficulty ] ) ;
5028: LD_INT 0
5030: PPUSH
5031: LD_INT 3
5033: PPUSH
5034: LD_INT 6
5036: PUSH
5037: LD_INT 7
5039: PUSH
5040: LD_INT 8
5042: PUSH
5043: LD_INT 10
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: LIST
5050: LIST
5051: PUSH
5052: LD_OWVAR 67
5056: ARRAY
5057: PPUSH
5058: CALL_OW 380
// un = CreateHuman ;
5062: LD_ADDR_VAR 0 3
5066: PUSH
5067: CALL_OW 44
5071: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5072: LD_VAR 0 3
5076: PPUSH
5077: LD_VAR 0 4
5081: PPUSH
5082: CALL_OW 52
// end ;
5086: GO 4870
5088: POP
5089: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
5090: LD_ADDR_VAR 0 2
5094: PUSH
5095: DOUBLE
5096: LD_INT 1
5098: DEC
5099: ST_TO_ADDR
5100: LD_INT 3
5102: PUSH
5103: LD_INT 4
5105: PUSH
5106: LD_INT 5
5108: PUSH
5109: LD_INT 5
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: LIST
5116: LIST
5117: PUSH
5118: LD_OWVAR 67
5122: ARRAY
5123: PUSH
5124: FOR_TO
5125: IFFALSE 5272
// begin vc_engine := 3 ;
5127: LD_ADDR_OWVAR 39
5131: PUSH
5132: LD_INT 3
5134: ST_TO_ADDR
// vc_control := 3 ;
5135: LD_ADDR_OWVAR 38
5139: PUSH
5140: LD_INT 3
5142: ST_TO_ADDR
// vc_weapon := [ 42 , 43 , 44 , 45 , 46 , 49 ] [ rand ( 1 , 5 ) ] ;
5143: LD_ADDR_OWVAR 40
5147: PUSH
5148: LD_INT 42
5150: PUSH
5151: LD_INT 43
5153: PUSH
5154: LD_INT 44
5156: PUSH
5157: LD_INT 45
5159: PUSH
5160: LD_INT 46
5162: PUSH
5163: LD_INT 49
5165: PUSH
5166: EMPTY
5167: LIST
5168: LIST
5169: LIST
5170: LIST
5171: LIST
5172: LIST
5173: PUSH
5174: LD_INT 1
5176: PPUSH
5177: LD_INT 5
5179: PPUSH
5180: CALL_OW 12
5184: ARRAY
5185: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
5186: LD_OWVAR 40
5190: PUSH
5191: LD_INT 46
5193: EQUAL
5194: IFFALSE 5206
// vc_chassis := ru_heavy_tracked else
5196: LD_ADDR_OWVAR 37
5200: PUSH
5201: LD_INT 24
5203: ST_TO_ADDR
5204: GO 5233
// vc_chassis := [ ru_medium_tracked , ru_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
5206: LD_ADDR_OWVAR 37
5210: PUSH
5211: LD_INT 22
5213: PUSH
5214: LD_INT 21
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: PUSH
5221: LD_INT 1
5223: PPUSH
5224: LD_INT 2
5226: PPUSH
5227: CALL_OW 12
5231: ARRAY
5232: ST_TO_ADDR
// veh := CreateVehicle ;
5233: LD_ADDR_VAR 0 4
5237: PUSH
5238: CALL_OW 45
5242: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
5243: LD_VAR 0 4
5247: PPUSH
5248: LD_INT 3
5250: PPUSH
5251: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
5255: LD_VAR 0 4
5259: PPUSH
5260: LD_INT 6
5262: PPUSH
5263: LD_INT 0
5265: PPUSH
5266: CALL_OW 49
// end ;
5270: GO 5124
5272: POP
5273: POP
// end ; end_of_file
5274: LD_VAR 0 1
5278: RET
// export function PrepareKurt ; begin
5279: LD_INT 0
5281: PPUSH
// uc_side := 8 ;
5282: LD_ADDR_OWVAR 20
5286: PUSH
5287: LD_INT 8
5289: ST_TO_ADDR
// uc_nation := 2 ;
5290: LD_ADDR_OWVAR 21
5294: PUSH
5295: LD_INT 2
5297: ST_TO_ADDR
// vc_chassis := ar_medium_trike ;
5298: LD_ADDR_OWVAR 37
5302: PUSH
5303: LD_INT 13
5305: ST_TO_ADDR
// vc_engine := 1 ;
5306: LD_ADDR_OWVAR 39
5310: PUSH
5311: LD_INT 1
5313: ST_TO_ADDR
// vc_control := 1 ;
5314: LD_ADDR_OWVAR 38
5318: PUSH
5319: LD_INT 1
5321: ST_TO_ADDR
// vc_weapon := 24 ;
5322: LD_ADDR_OWVAR 40
5326: PUSH
5327: LD_INT 24
5329: ST_TO_ADDR
// KurtVeh := CreateVehicle ;
5330: LD_ADDR_EXP 18
5334: PUSH
5335: CALL_OW 45
5339: ST_TO_ADDR
// if kurtStatus > 0 then
5340: LD_EXP 19
5344: PUSH
5345: LD_INT 0
5347: GREATER
5348: IFFALSE 5400
// begin Kurt := PrepareUnit ( Kurt , false ,  ) ;
5350: LD_ADDR_EXP 17
5354: PUSH
5355: LD_STRING Kurt
5357: PPUSH
5358: LD_INT 0
5360: PPUSH
5361: LD_STRING 
5363: PPUSH
5364: CALL 41467 0 3
5368: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
5369: LD_EXP 18
5373: PPUSH
5374: LD_INT 4
5376: PPUSH
5377: LD_INT 0
5379: PPUSH
5380: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
5384: LD_EXP 17
5388: PPUSH
5389: LD_EXP 18
5393: PPUSH
5394: CALL_OW 52
// end else
5398: GO 5477
// begin hc_name :=  ;
5400: LD_ADDR_OWVAR 26
5404: PUSH
5405: LD_STRING 
5407: ST_TO_ADDR
// hc_gallery :=  ;
5408: LD_ADDR_OWVAR 33
5412: PUSH
5413: LD_STRING 
5415: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
5416: LD_INT 1
5418: PPUSH
5419: LD_INT 10
5421: PPUSH
5422: CALL_OW 381
// Kurt := CreateHuman ;
5426: LD_ADDR_EXP 17
5430: PUSH
5431: CALL_OW 44
5435: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
5436: LD_EXP 18
5440: PPUSH
5441: LD_INT 4
5443: PPUSH
5444: LD_INT 0
5446: PPUSH
5447: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
5451: LD_EXP 17
5455: PPUSH
5456: LD_EXP 18
5460: PPUSH
5461: CALL_OW 52
// SaveCharacters ( Kurt , AltKurt ) ;
5465: LD_EXP 17
5469: PPUSH
5470: LD_STRING AltKurt
5472: PPUSH
5473: CALL_OW 38
// end ; end ;
5477: LD_VAR 0 1
5481: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
5482: LD_INT 0
5484: PPUSH
5485: PPUSH
5486: PPUSH
5487: PPUSH
// for i := 1 to 3 do
5488: LD_ADDR_VAR 0 2
5492: PUSH
5493: DOUBLE
5494: LD_INT 1
5496: DEC
5497: ST_TO_ADDR
5498: LD_INT 3
5500: PUSH
5501: FOR_TO
5502: IFFALSE 5625
// begin uc_side := 1 ;
5504: LD_ADDR_OWVAR 20
5508: PUSH
5509: LD_INT 1
5511: ST_TO_ADDR
// uc_nation := 2 ;
5512: LD_ADDR_OWVAR 21
5516: PUSH
5517: LD_INT 2
5519: ST_TO_ADDR
// hc_gallery =  ;
5520: LD_ADDR_OWVAR 33
5524: PUSH
5525: LD_STRING 
5527: ST_TO_ADDR
// hc_name =  ;
5528: LD_ADDR_OWVAR 26
5532: PUSH
5533: LD_STRING 
5535: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
5536: LD_EXP 19
5540: PUSH
5541: LD_INT 0
5543: EQUAL
5544: IFTRUE 5556
5546: PUSH
5547: LD_EXP 19
5551: PUSH
5552: LD_INT 2
5554: EQUAL
5555: OR
5556: IFFALSE 5573
// PrepareHuman ( false , 1 , 6 ) else
5558: LD_INT 0
5560: PPUSH
5561: LD_INT 1
5563: PPUSH
5564: LD_INT 6
5566: PPUSH
5567: CALL_OW 380
5571: GO 5586
// PrepareHuman ( false , 1 , 8 ) ;
5573: LD_INT 0
5575: PPUSH
5576: LD_INT 1
5578: PPUSH
5579: LD_INT 8
5581: PPUSH
5582: CALL_OW 380
// un := CreateHuman ;
5586: LD_ADDR_VAR 0 3
5590: PUSH
5591: CALL_OW 44
5595: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5596: LD_VAR 0 3
5600: PPUSH
5601: LD_INT 4
5603: PPUSH
5604: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
5608: LD_VAR 0 3
5612: PPUSH
5613: LD_INT 4
5615: PPUSH
5616: LD_INT 0
5618: PPUSH
5619: CALL_OW 49
// end ;
5623: GO 5501
5625: POP
5626: POP
// vc_chassis := 14 ;
5627: LD_ADDR_OWVAR 37
5631: PUSH
5632: LD_INT 14
5634: ST_TO_ADDR
// vc_engine := 3 ;
5635: LD_ADDR_OWVAR 39
5639: PUSH
5640: LD_INT 3
5642: ST_TO_ADDR
// vc_control := 1 ;
5643: LD_ADDR_OWVAR 38
5647: PUSH
5648: LD_INT 1
5650: ST_TO_ADDR
// vc_weapon := [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
5651: LD_ADDR_OWVAR 40
5655: PUSH
5656: LD_INT 27
5658: PUSH
5659: LD_INT 26
5661: PUSH
5662: LD_INT 28
5664: PUSH
5665: EMPTY
5666: LIST
5667: LIST
5668: LIST
5669: PUSH
5670: LD_INT 1
5672: PPUSH
5673: LD_INT 3
5675: PPUSH
5676: CALL_OW 12
5680: ARRAY
5681: ST_TO_ADDR
// veh := CreateVehicle ;
5682: LD_ADDR_VAR 0 4
5686: PUSH
5687: CALL_OW 45
5691: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5692: LD_VAR 0 4
5696: PPUSH
5697: LD_INT 4
5699: PPUSH
5700: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5704: LD_VAR 0 4
5708: PPUSH
5709: LD_INT 4
5711: PPUSH
5712: LD_INT 0
5714: PPUSH
5715: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5719: LD_EXP 19
5723: PUSH
5724: LD_INT 0
5726: EQUAL
5727: IFTRUE 5739
5729: PUSH
5730: LD_EXP 19
5734: PUSH
5735: LD_INT 2
5737: EQUAL
5738: OR
5739: IFFALSE 5756
// PrepareHuman ( false , 3 , 6 ) else
5741: LD_INT 0
5743: PPUSH
5744: LD_INT 3
5746: PPUSH
5747: LD_INT 6
5749: PPUSH
5750: CALL_OW 380
5754: GO 5769
// PrepareHuman ( false , 3 , 8 ) ;
5756: LD_INT 0
5758: PPUSH
5759: LD_INT 3
5761: PPUSH
5762: LD_INT 8
5764: PPUSH
5765: CALL_OW 380
// un := CreateHuman ;
5769: LD_ADDR_VAR 0 3
5773: PUSH
5774: CALL_OW 44
5778: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5779: LD_VAR 0 3
5783: PPUSH
5784: LD_VAR 0 4
5788: PPUSH
5789: CALL_OW 52
// vc_chassis := 14 ;
5793: LD_ADDR_OWVAR 37
5797: PUSH
5798: LD_INT 14
5800: ST_TO_ADDR
// vc_engine := 3 ;
5801: LD_ADDR_OWVAR 39
5805: PUSH
5806: LD_INT 3
5808: ST_TO_ADDR
// vc_control := 1 ;
5809: LD_ADDR_OWVAR 38
5813: PUSH
5814: LD_INT 1
5816: ST_TO_ADDR
// vc_weapon := [ 27 , 26 , 28 ] [ rand ( 1 , 3 ) ] ;
5817: LD_ADDR_OWVAR 40
5821: PUSH
5822: LD_INT 27
5824: PUSH
5825: LD_INT 26
5827: PUSH
5828: LD_INT 28
5830: PUSH
5831: EMPTY
5832: LIST
5833: LIST
5834: LIST
5835: PUSH
5836: LD_INT 1
5838: PPUSH
5839: LD_INT 3
5841: PPUSH
5842: CALL_OW 12
5846: ARRAY
5847: ST_TO_ADDR
// veh := CreateVehicle ;
5848: LD_ADDR_VAR 0 4
5852: PUSH
5853: CALL_OW 45
5857: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5858: LD_VAR 0 4
5862: PPUSH
5863: LD_INT 4
5865: PPUSH
5866: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5870: LD_VAR 0 4
5874: PPUSH
5875: LD_INT 4
5877: PPUSH
5878: LD_INT 0
5880: PPUSH
5881: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5885: LD_EXP 19
5889: PUSH
5890: LD_INT 0
5892: EQUAL
5893: IFTRUE 5905
5895: PUSH
5896: LD_EXP 19
5900: PUSH
5901: LD_INT 2
5903: EQUAL
5904: OR
5905: IFFALSE 5922
// PrepareHuman ( false , 4 , 6 ) else
5907: LD_INT 0
5909: PPUSH
5910: LD_INT 4
5912: PPUSH
5913: LD_INT 6
5915: PPUSH
5916: CALL_OW 380
5920: GO 5935
// PrepareHuman ( false , 4 , 8 ) ;
5922: LD_INT 0
5924: PPUSH
5925: LD_INT 4
5927: PPUSH
5928: LD_INT 8
5930: PPUSH
5931: CALL_OW 380
// un := CreateHuman ;
5935: LD_ADDR_VAR 0 3
5939: PUSH
5940: CALL_OW 44
5944: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5945: LD_VAR 0 3
5949: PPUSH
5950: LD_INT 4
5952: PPUSH
5953: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5957: LD_VAR 0 3
5961: PPUSH
5962: LD_VAR 0 4
5966: PPUSH
5967: CALL_OW 52
// vc_chassis := 14 ;
5971: LD_ADDR_OWVAR 37
5975: PUSH
5976: LD_INT 14
5978: ST_TO_ADDR
// vc_engine := 3 ;
5979: LD_ADDR_OWVAR 39
5983: PUSH
5984: LD_INT 3
5986: ST_TO_ADDR
// vc_control := 1 ;
5987: LD_ADDR_OWVAR 38
5991: PUSH
5992: LD_INT 1
5994: ST_TO_ADDR
// vc_weapon := 26 ;
5995: LD_ADDR_OWVAR 40
5999: PUSH
6000: LD_INT 26
6002: ST_TO_ADDR
// veh := CreateVehicle ;
6003: LD_ADDR_VAR 0 4
6007: PUSH
6008: CALL_OW 45
6012: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6013: LD_VAR 0 4
6017: PPUSH
6018: LD_INT 4
6020: PPUSH
6021: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
6025: LD_VAR 0 4
6029: PPUSH
6030: LD_INT 4
6032: PPUSH
6033: LD_INT 0
6035: PPUSH
6036: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
6040: LD_EXP 19
6044: PUSH
6045: LD_INT 0
6047: EQUAL
6048: IFTRUE 6060
6050: PUSH
6051: LD_EXP 19
6055: PUSH
6056: LD_INT 2
6058: EQUAL
6059: OR
6060: IFFALSE 6077
// PrepareHuman ( false , 2 , 4 ) else
6062: LD_INT 0
6064: PPUSH
6065: LD_INT 2
6067: PPUSH
6068: LD_INT 4
6070: PPUSH
6071: CALL_OW 380
6075: GO 6090
// PrepareHuman ( false , 2 , 8 ) ;
6077: LD_INT 0
6079: PPUSH
6080: LD_INT 2
6082: PPUSH
6083: LD_INT 8
6085: PPUSH
6086: CALL_OW 380
// un := CreateHuman ;
6090: LD_ADDR_VAR 0 3
6094: PUSH
6095: CALL_OW 44
6099: ST_TO_ADDR
// SetDir ( un , 4 ) ;
6100: LD_VAR 0 3
6104: PPUSH
6105: LD_INT 4
6107: PPUSH
6108: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
6112: LD_VAR 0 3
6116: PPUSH
6117: LD_VAR 0 4
6121: PPUSH
6122: CALL_OW 52
// end ;
6126: LD_VAR 0 1
6130: RET
// export function PrepareAttackLegion ; var i , un ; begin
6131: LD_INT 0
6133: PPUSH
6134: PPUSH
6135: PPUSH
// for i := 1 to 4 do
6136: LD_ADDR_VAR 0 2
6140: PUSH
6141: DOUBLE
6142: LD_INT 1
6144: DEC
6145: ST_TO_ADDR
6146: LD_INT 4
6148: PUSH
6149: FOR_TO
6150: IFFALSE 6260
// begin uc_side := 8 ;
6152: LD_ADDR_OWVAR 20
6156: PUSH
6157: LD_INT 8
6159: ST_TO_ADDR
// uc_nation := 2 ;
6160: LD_ADDR_OWVAR 21
6164: PUSH
6165: LD_INT 2
6167: ST_TO_ADDR
// hc_gallery :=  ;
6168: LD_ADDR_OWVAR 33
6172: PUSH
6173: LD_STRING 
6175: ST_TO_ADDR
// hc_name :=  ;
6176: LD_ADDR_OWVAR 26
6180: PUSH
6181: LD_STRING 
6183: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
6184: LD_INT 0
6186: PPUSH
6187: LD_INT 1
6189: PUSH
6190: LD_INT 8
6192: PUSH
6193: EMPTY
6194: LIST
6195: LIST
6196: PUSH
6197: LD_INT 1
6199: PPUSH
6200: LD_INT 2
6202: PPUSH
6203: CALL_OW 12
6207: ARRAY
6208: PPUSH
6209: LD_INT 6
6211: PPUSH
6212: LD_INT 8
6214: PPUSH
6215: CALL_OW 12
6219: PPUSH
6220: CALL_OW 380
// un := CreateHuman ;
6224: LD_ADDR_VAR 0 3
6228: PUSH
6229: CALL_OW 44
6233: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
6234: LD_VAR 0 3
6238: PPUSH
6239: LD_INT 19
6241: PPUSH
6242: LD_INT 0
6244: PPUSH
6245: CALL_OW 49
// ComCrawl ( un ) ;
6249: LD_VAR 0 3
6253: PPUSH
6254: CALL_OW 137
// end ;
6258: GO 6149
6260: POP
6261: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
6262: LD_INT 1
6264: PPUSH
6265: LD_INT 8
6267: PPUSH
6268: LD_INT 2
6270: PPUSH
6271: LD_INT 1
6273: PPUSH
6274: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
6278: LD_INT 20
6280: PPUSH
6281: LD_INT 3
6283: PPUSH
6284: CALL 15465 0 2
// end ; end_of_file
6288: LD_VAR 0 1
6292: RET
// export function Action ; var i , tmp , group ; begin
6293: LD_INT 0
6295: PPUSH
6296: PPUSH
6297: PPUSH
6298: PPUSH
// music_nat := 1 ;
6299: LD_ADDR_OWVAR 71
6303: PUSH
6304: LD_INT 1
6306: ST_TO_ADDR
// group := FilterAllUnits ( [ f_side , 1 ] ) ;
6307: LD_ADDR_VAR 0 4
6311: PUSH
6312: LD_INT 22
6314: PUSH
6315: LD_INT 1
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: PPUSH
6322: CALL_OW 69
6326: ST_TO_ADDR
// tmp := IsInUnit ( JMM ) ;
6327: LD_ADDR_VAR 0 3
6331: PUSH
6332: LD_EXP 1
6336: PPUSH
6337: CALL_OW 310
6341: ST_TO_ADDR
// CenterNowOnUnits ( tmp ) ;
6342: LD_VAR 0 3
6346: PPUSH
6347: CALL_OW 87
// ComMoveXY ( group , 130 , 103 ) ;
6351: LD_VAR 0 4
6355: PPUSH
6356: LD_INT 130
6358: PPUSH
6359: LD_INT 103
6361: PPUSH
6362: CALL_OW 111
// AddComMoveXY ( tmp , 114 , 102 ) ;
6366: LD_VAR 0 3
6370: PPUSH
6371: LD_INT 114
6373: PPUSH
6374: LD_INT 102
6376: PPUSH
6377: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
6381: LD_EXP 1
6385: PPUSH
6386: LD_STRING D1-JMM-1
6388: PPUSH
6389: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
6393: LD_VAR 0 3
6397: PPUSH
6398: CALL_OW 87
// if IsOk ( Donaldson ) then
6402: LD_EXP 3
6406: PPUSH
6407: CALL_OW 302
6411: IFFALSE 6476
// begin Say ( Donaldson , D1-Don-1 ) ;
6413: LD_EXP 3
6417: PPUSH
6418: LD_STRING D1-Don-1
6420: PPUSH
6421: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
6425: LD_VAR 0 3
6429: PPUSH
6430: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
6434: LD_EXP 1
6438: PPUSH
6439: LD_STRING D1-JMM-2
6441: PPUSH
6442: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
6446: LD_VAR 0 3
6450: PPUSH
6451: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
6455: LD_EXP 3
6459: PPUSH
6460: LD_STRING D1-Don-2
6462: PPUSH
6463: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
6467: LD_VAR 0 3
6471: PPUSH
6472: CALL_OW 87
// end ; AddComMoveXY ( group , 110 , 101 ) ;
6476: LD_VAR 0 4
6480: PPUSH
6481: LD_INT 110
6483: PPUSH
6484: LD_INT 101
6486: PPUSH
6487: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
6491: LD_INT 35
6493: PPUSH
6494: CALL_OW 67
// CenterNowOnUnits ( tmp ) ;
6498: LD_VAR 0 3
6502: PPUSH
6503: CALL_OW 87
// until SeeXY ( 1 , 102 , 94 ) ;
6507: LD_INT 1
6509: PPUSH
6510: LD_INT 102
6512: PPUSH
6513: LD_INT 94
6515: PPUSH
6516: CALL_OW 293
6520: IFFALSE 6491
// CenterOnXY ( 102 , 94 ) ;
6522: LD_INT 102
6524: PPUSH
6525: LD_INT 94
6527: PPUSH
6528: CALL_OW 84
// DialogRandom ( UnitFilter ( group , [ f_sex , sex_male ] ) , D1-Sol1-2 ,  ) ;
6532: LD_VAR 0 4
6536: PPUSH
6537: LD_INT 26
6539: PUSH
6540: LD_INT 1
6542: PUSH
6543: EMPTY
6544: LIST
6545: LIST
6546: PPUSH
6547: CALL_OW 72
6551: PPUSH
6552: LD_STRING D1-Sol1-2
6554: PPUSH
6555: LD_STRING 
6557: PPUSH
6558: CALL 13095 0 3
// Say ( JMM , D1-JMM-3 ) ;
6562: LD_EXP 1
6566: PPUSH
6567: LD_STRING D1-JMM-3
6569: PPUSH
6570: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
6574: LD_STRING M1
6576: PPUSH
6577: CALL_OW 337
// for i in group do
6581: LD_ADDR_VAR 0 2
6585: PUSH
6586: LD_VAR 0 4
6590: PUSH
6591: FOR_IN
6592: IFFALSE 6611
// ComMoveXY ( i , 95 , 84 ) ;
6594: LD_VAR 0 2
6598: PPUSH
6599: LD_INT 95
6601: PPUSH
6602: LD_INT 84
6604: PPUSH
6605: CALL_OW 111
6609: GO 6591
6611: POP
6612: POP
// end ;
6613: LD_VAR 0 1
6617: RET
// every 0 0$1 trigger FilterUnitsInArea ( WaterPass , [ f_side , 1 ] ) > 1 do var i , tmp , dec ;
6618: LD_INT 7
6620: PPUSH
6621: LD_INT 22
6623: PUSH
6624: LD_INT 1
6626: PUSH
6627: EMPTY
6628: LIST
6629: LIST
6630: PPUSH
6631: CALL_OW 70
6635: PUSH
6636: LD_INT 1
6638: GREATER
6639: IFFALSE 7342
6641: GO 6643
6643: DISABLE
6644: LD_INT 0
6646: PPUSH
6647: PPUSH
6648: PPUSH
// begin tmp := FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
6649: LD_ADDR_VAR 0 2
6653: PUSH
6654: LD_INT 8
6656: PPUSH
6657: LD_INT 22
6659: PUSH
6660: LD_INT 3
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: PUSH
6667: LD_INT 25
6669: PUSH
6670: LD_INT 9
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: PUSH
6677: EMPTY
6678: LIST
6679: LIST
6680: PPUSH
6681: CALL_OW 70
6685: ST_TO_ADDR
// ComTimeShift ( tmp , 96 , 85 ) ;
6686: LD_VAR 0 2
6690: PPUSH
6691: LD_INT 96
6693: PPUSH
6694: LD_INT 85
6696: PPUSH
6697: CALL_OW 154
// for i := 1 to 5 do
6701: LD_ADDR_VAR 0 1
6705: PUSH
6706: DOUBLE
6707: LD_INT 1
6709: DEC
6710: ST_TO_ADDR
6711: LD_INT 5
6713: PUSH
6714: FOR_TO
6715: IFFALSE 6734
// AddComTimeShift ( tmp , 96 , 85 ) ;
6717: LD_VAR 0 2
6721: PPUSH
6722: LD_INT 96
6724: PPUSH
6725: LD_INT 85
6727: PPUSH
6728: CALL_OW 214
6732: GO 6714
6734: POP
6735: POP
// wait ( 0 0$2 ) ;
6736: LD_INT 70
6738: PPUSH
6739: CALL_OW 67
// Say ( JMM , D1a-JMM-1 ) ;
6743: LD_EXP 1
6747: PPUSH
6748: LD_STRING D1a-JMM-1
6750: PPUSH
6751: CALL_OW 88
// if Donaldson then
6755: LD_EXP 3
6759: IFFALSE 6773
// Say ( Donaldson , D1a-Don-1 ) ;
6761: LD_EXP 3
6765: PPUSH
6766: LD_STRING D1a-Don-1
6768: PPUSH
6769: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6773: LD_ADDR_VAR 0 1
6777: PUSH
6778: LD_INT 22
6780: PUSH
6781: LD_INT 1
6783: PUSH
6784: EMPTY
6785: LIST
6786: LIST
6787: PPUSH
6788: CALL_OW 69
6792: PUSH
6793: FOR_IN
6794: IFFALSE 6813
// ComMoveXY ( i , 109 , 102 ) ;
6796: LD_VAR 0 1
6800: PPUSH
6801: LD_INT 109
6803: PPUSH
6804: LD_INT 102
6806: PPUSH
6807: CALL_OW 111
6811: GO 6793
6813: POP
6814: POP
// Say ( JMM , D1a-JMM-2 ) ;
6815: LD_EXP 1
6819: PPUSH
6820: LD_STRING D1a-JMM-2
6822: PPUSH
6823: CALL_OW 88
// wait ( 0 0$10 ) ;
6827: LD_INT 350
6829: PPUSH
6830: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6834: LD_EXP 1
6838: PPUSH
6839: CALL_OW 310
6843: PPUSH
6844: CALL_OW 87
// if IsOk ( Donaldson ) then
6848: LD_EXP 3
6852: PPUSH
6853: CALL_OW 302
6857: IFFALSE 6883
// begin Say ( Donaldson , D1b-Don-1 ) ;
6859: LD_EXP 3
6863: PPUSH
6864: LD_STRING D1b-Don-1
6866: PPUSH
6867: CALL_OW 88
// Say ( JMM , D1b-JMM-1 ) ;
6871: LD_EXP 1
6875: PPUSH
6876: LD_STRING D1b-JMM-1
6878: PPUSH
6879: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6883: LD_INT 22
6885: PUSH
6886: LD_INT 1
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PUSH
6893: LD_INT 26
6895: PUSH
6896: LD_INT 1
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: PUSH
6903: LD_INT 2
6905: PUSH
6906: LD_INT 25
6908: PUSH
6909: LD_INT 1
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: PUSH
6916: LD_INT 25
6918: PUSH
6919: LD_INT 2
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: PUSH
6926: LD_INT 25
6928: PUSH
6929: LD_INT 3
6931: PUSH
6932: EMPTY
6933: LIST
6934: LIST
6935: PUSH
6936: LD_INT 25
6938: PUSH
6939: LD_INT 4
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: PUSH
6946: LD_INT 25
6948: PUSH
6949: LD_INT 5
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: LD_INT 25
6958: PUSH
6959: LD_INT 8
6961: PUSH
6962: EMPTY
6963: LIST
6964: LIST
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: LIST
6979: PPUSH
6980: CALL_OW 69
6984: PPUSH
6985: LD_STRING D1b-Sol1-1
6987: PPUSH
6988: LD_STRING 
6990: PPUSH
6991: CALL 13095 0 3
// if IsOk ( Donaldson ) then
6995: LD_EXP 3
6999: PPUSH
7000: CALL_OW 302
7004: IFFALSE 7018
// Say ( Donaldson , D1b-Don-2 ) ;
7006: LD_EXP 3
7010: PPUSH
7011: LD_STRING D1b-Don-2
7013: PPUSH
7014: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
7018: LD_EXP 1
7022: PPUSH
7023: LD_STRING D1b-JMM-2
7025: PPUSH
7026: CALL_OW 88
// dec := ShowQuery1 ;
7030: LD_ADDR_VAR 0 3
7034: PUSH
7035: CALL 13558 0 0
7039: ST_TO_ADDR
// if dec = 1 then
7040: LD_VAR 0 3
7044: PUSH
7045: LD_INT 1
7047: EQUAL
7048: IFFALSE 7190
// begin Say ( JMM , D2-JMM-1 ) ;
7050: LD_EXP 1
7054: PPUSH
7055: LD_STRING D2-JMM-1
7057: PPUSH
7058: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
7062: LD_EXP 15
7066: PPUSH
7067: LD_STRING D2-Pow-1
7069: PPUSH
7070: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
7074: LD_EXP 1
7078: PPUSH
7079: LD_STRING D2a-JMM-1
7081: PPUSH
7082: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
7086: LD_EXP 15
7090: PPUSH
7091: LD_STRING D2a-Pow-1
7093: PPUSH
7094: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
7098: LD_EXP 1
7102: PPUSH
7103: LD_STRING D2a-JMM-2
7105: PPUSH
7106: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
7110: LD_EXP 15
7114: PPUSH
7115: LD_STRING D2a-Pow-2
7117: PPUSH
7118: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
7122: LD_EXP 1
7126: PPUSH
7127: LD_STRING D2a-JMM-3
7129: PPUSH
7130: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
7134: LD_EXP 15
7138: PPUSH
7139: LD_STRING D2a-Pow-3
7141: PPUSH
7142: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
7146: LD_EXP 1
7150: PPUSH
7151: LD_STRING D2c-JMM-1
7153: PPUSH
7154: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
7158: LD_EXP 15
7162: PPUSH
7163: LD_STRING D2c-Pow-1
7165: PPUSH
7166: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
7170: LD_EXP 1
7174: PPUSH
7175: LD_STRING D2c-JMM-2
7177: PPUSH
7178: CALL_OW 88
// secondPass := 2 ;
7182: LD_ADDR_EXP 20
7186: PUSH
7187: LD_INT 2
7189: ST_TO_ADDR
// end ; if dec = 2 then
7190: LD_VAR 0 3
7194: PUSH
7195: LD_INT 2
7197: EQUAL
7198: IFFALSE 7292
// begin Say ( JMM , D2-JMM-1 ) ;
7200: LD_EXP 1
7204: PPUSH
7205: LD_STRING D2-JMM-1
7207: PPUSH
7208: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
7212: LD_EXP 15
7216: PPUSH
7217: LD_STRING D2-Pow-1
7219: PPUSH
7220: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
7224: LD_EXP 1
7228: PPUSH
7229: LD_STRING D2b-JMM-1
7231: PPUSH
7232: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
7236: LD_EXP 15
7240: PPUSH
7241: LD_STRING D2b-Pow-1
7243: PPUSH
7244: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
7248: LD_EXP 1
7252: PPUSH
7253: LD_STRING D2c-JMM-1
7255: PPUSH
7256: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
7260: LD_EXP 15
7264: PPUSH
7265: LD_STRING D2c-Pow-1
7267: PPUSH
7268: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
7272: LD_EXP 1
7276: PPUSH
7277: LD_STRING D2c-JMM-2
7279: PPUSH
7280: CALL_OW 88
// secondPass := 2 ;
7284: LD_ADDR_EXP 20
7288: PUSH
7289: LD_INT 2
7291: ST_TO_ADDR
// end ; if dec = 3 then
7292: LD_VAR 0 3
7296: PUSH
7297: LD_INT 3
7299: EQUAL
7300: IFFALSE 7310
// secondPass := 1 ;
7302: LD_ADDR_EXP 20
7306: PUSH
7307: LD_INT 1
7309: ST_TO_ADDR
// InGameOff ;
7310: CALL_OW 9
// ruAI := true ;
7314: LD_ADDR_EXP 34
7318: PUSH
7319: LD_INT 1
7321: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
7322: LD_INT 1
7324: PPUSH
7325: LD_INT 3
7327: PPUSH
7328: LD_INT 2
7330: PPUSH
7331: LD_INT 1
7333: PPUSH
7334: CALL_OW 80
// SaveForQuickRestart ;
7338: CALL_OW 22
// end ;
7342: PPOPN 3
7344: END
// every 1 1$0 trigger secondPass = 2 do
7345: LD_EXP 20
7349: PUSH
7350: LD_INT 2
7352: EQUAL
7353: IFFALSE 7583
7355: GO 7357
7357: DISABLE
// begin cratesAllow := true ;
7358: LD_ADDR_EXP 45
7362: PUSH
7363: LD_INT 1
7365: ST_TO_ADDR
// PowellSupport1 ;
7366: CALL 2227 0 0
// DialogueOn ;
7370: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
7374: LD_EXP 1
7378: PPUSH
7379: LD_STRING DC1-JMM-1
7381: PPUSH
7382: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
7386: LD_EXP 15
7390: PPUSH
7391: LD_STRING DC1-Pow-1
7393: PPUSH
7394: CALL_OW 94
// DialogueOff ;
7398: CALL_OW 7
// wait ( 3 3$0 ) ;
7402: LD_INT 6300
7404: PPUSH
7405: CALL_OW 67
// PowellSupport2 ;
7409: CALL 2735 0 0
// DialogueOn ;
7413: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
7417: LD_EXP 1
7421: PPUSH
7422: LD_STRING DC2-JMM-1
7424: PPUSH
7425: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
7429: LD_EXP 15
7433: PPUSH
7434: LD_STRING DC2-Pow-1
7436: PPUSH
7437: CALL_OW 94
// DialogueOff ;
7441: CALL_OW 7
// wait ( 3 3$00 ) ;
7445: LD_INT 6300
7447: PPUSH
7448: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7452: LD_INT 35
7454: PPUSH
7455: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and not FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
7459: LD_INT 22
7461: PUSH
7462: LD_INT 1
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: PUSH
7469: LD_INT 2
7471: PUSH
7472: LD_INT 30
7474: PUSH
7475: LD_INT 0
7477: PUSH
7478: EMPTY
7479: LIST
7480: LIST
7481: PUSH
7482: LD_INT 30
7484: PUSH
7485: LD_INT 1
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: LIST
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: PPUSH
7501: CALL_OW 69
7505: IFFALSE 7527
7507: PUSH
7508: LD_INT 11
7510: PPUSH
7511: LD_INT 22
7513: PUSH
7514: LD_INT 3
7516: PUSH
7517: EMPTY
7518: LIST
7519: LIST
7520: PPUSH
7521: CALL_OW 70
7525: NOT
7526: AND
7527: IFFALSE 7452
// wait ( 0 0$10 ) ;
7529: LD_INT 350
7531: PPUSH
7532: CALL_OW 67
// Legion ;
7536: CALL 7584 0 0
// wait ( 5 5$0 ) ;
7540: LD_INT 10500
7542: PPUSH
7543: CALL_OW 67
// PowellSupport3 ;
7547: CALL 3418 0 0
// DialogueOn ;
7551: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
7555: LD_EXP 15
7559: PPUSH
7560: LD_STRING DC3-Pow-1
7562: PPUSH
7563: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
7567: LD_EXP 1
7571: PPUSH
7572: LD_STRING DC3-JMM-1
7574: PPUSH
7575: CALL_OW 88
// DialogueOff ;
7579: CALL_OW 7
// end ;
7583: END
// export function Legion ; var i , dec1 , dec2 , tmp , tmp2 , tmp3 , crates , oil , siberite , cr , sb , payForNeutral , payForHelp , query1 , query2 ; begin
7584: LD_INT 0
7586: PPUSH
7587: PPUSH
7588: PPUSH
7589: PPUSH
7590: PPUSH
7591: PPUSH
7592: PPUSH
7593: PPUSH
7594: PPUSH
7595: PPUSH
7596: PPUSH
7597: PPUSH
7598: PPUSH
7599: PPUSH
7600: PPUSH
7601: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7602: LD_ADDR_VAR 0 5
7606: PUSH
7607: LD_INT 22
7609: PUSH
7610: LD_INT 1
7612: PUSH
7613: EMPTY
7614: LIST
7615: LIST
7616: PUSH
7617: LD_INT 21
7619: PUSH
7620: LD_INT 3
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: PUSH
7627: LD_INT 2
7629: PUSH
7630: LD_INT 30
7632: PUSH
7633: LD_INT 0
7635: PUSH
7636: EMPTY
7637: LIST
7638: LIST
7639: PUSH
7640: LD_INT 30
7642: PUSH
7643: LD_INT 1
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: LIST
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: LIST
7659: PPUSH
7660: CALL_OW 69
7664: ST_TO_ADDR
// crates := 0 ;
7665: LD_ADDR_VAR 0 8
7669: PUSH
7670: LD_INT 0
7672: ST_TO_ADDR
// oil := 0 ;
7673: LD_ADDR_VAR 0 9
7677: PUSH
7678: LD_INT 0
7680: ST_TO_ADDR
// siberite := 0 ;
7681: LD_ADDR_VAR 0 10
7685: PUSH
7686: LD_INT 0
7688: ST_TO_ADDR
// payForNeutral := false ;
7689: LD_ADDR_VAR 0 13
7693: PUSH
7694: LD_INT 0
7696: ST_TO_ADDR
// payForHelp := false ;
7697: LD_ADDR_VAR 0 14
7701: PUSH
7702: LD_INT 0
7704: ST_TO_ADDR
// for i in tmp do
7705: LD_ADDR_VAR 0 2
7709: PUSH
7710: LD_VAR 0 5
7714: PUSH
7715: FOR_IN
7716: IFFALSE 7807
// begin crates := crates + GetResourceType ( GetBase ( i ) , 1 ) ;
7718: LD_ADDR_VAR 0 8
7722: PUSH
7723: LD_VAR 0 8
7727: PUSH
7728: LD_VAR 0 2
7732: PPUSH
7733: CALL_OW 274
7737: PPUSH
7738: LD_INT 1
7740: PPUSH
7741: CALL_OW 275
7745: PLUS
7746: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( i ) , 2 ) ;
7747: LD_ADDR_VAR 0 9
7751: PUSH
7752: LD_VAR 0 9
7756: PUSH
7757: LD_VAR 0 2
7761: PPUSH
7762: CALL_OW 274
7766: PPUSH
7767: LD_INT 2
7769: PPUSH
7770: CALL_OW 275
7774: PLUS
7775: ST_TO_ADDR
// siberite := siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
7776: LD_ADDR_VAR 0 10
7780: PUSH
7781: LD_VAR 0 10
7785: PUSH
7786: LD_VAR 0 2
7790: PPUSH
7791: CALL_OW 274
7795: PPUSH
7796: LD_INT 3
7798: PPUSH
7799: CALL_OW 275
7803: PLUS
7804: ST_TO_ADDR
// end ;
7805: GO 7715
7807: POP
7808: POP
// PrepareKurt ;
7809: CALL 5279 0 0
// if not Kurt then
7813: LD_EXP 17
7817: NOT
7818: IFFALSE 7822
// exit ;
7820: GO 9953
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7822: LD_EXP 18
7826: PPUSH
7827: LD_INT 144
7829: PPUSH
7830: LD_INT 111
7832: PPUSH
7833: CALL_OW 111
// wait ( 0 0$2 ) ;
7837: LD_INT 70
7839: PPUSH
7840: CALL_OW 67
// PlaceSeeing ( 167 , 121 , 1 , - 10 ) ;
7844: LD_INT 167
7846: PPUSH
7847: LD_INT 121
7849: PPUSH
7850: LD_INT 1
7852: PPUSH
7853: LD_INT 10
7855: NEG
7856: PPUSH
7857: CALL_OW 330
// ComExitVehicle ( Kurt ) ;
7861: LD_EXP 17
7865: PPUSH
7866: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7870: LD_EXP 17
7874: PPUSH
7875: CALL_OW 87
// wait ( 0 0$1 ) ;
7879: LD_INT 35
7881: PPUSH
7882: CALL_OW 67
// DialogueOn ;
7886: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7890: LD_INT 22
7892: PUSH
7893: LD_INT 1
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: LD_INT 26
7902: PUSH
7903: LD_INT 1
7905: PUSH
7906: EMPTY
7907: LIST
7908: LIST
7909: PUSH
7910: LD_INT 2
7912: PUSH
7913: LD_INT 25
7915: PUSH
7916: LD_INT 1
7918: PUSH
7919: EMPTY
7920: LIST
7921: LIST
7922: PUSH
7923: LD_INT 25
7925: PUSH
7926: LD_INT 2
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: PUSH
7933: LD_INT 25
7935: PUSH
7936: LD_INT 3
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: PUSH
7943: LD_INT 25
7945: PUSH
7946: LD_INT 4
7948: PUSH
7949: EMPTY
7950: LIST
7951: LIST
7952: PUSH
7953: LD_INT 25
7955: PUSH
7956: LD_INT 5
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: PUSH
7963: LD_INT 25
7965: PUSH
7966: LD_INT 8
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: PUSH
7973: EMPTY
7974: LIST
7975: LIST
7976: LIST
7977: LIST
7978: LIST
7979: LIST
7980: LIST
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: LIST
7986: PPUSH
7987: CALL_OW 69
7991: PPUSH
7992: LD_STRING D3-Sol1-1
7994: PPUSH
7995: LD_STRING 
7997: PPUSH
7998: CALL 13095 0 3
// if KurtStatus then
8002: LD_EXP 19
8006: IFFALSE 8106
// begin Say ( Kurt , D3-Kurt-1 ) ;
8008: LD_EXP 17
8012: PPUSH
8013: LD_STRING D3-Kurt-1
8015: PPUSH
8016: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
8020: LD_EXP 1
8024: PPUSH
8025: LD_STRING D3-JMM-1
8027: PPUSH
8028: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
8032: LD_EXP 17
8036: PPUSH
8037: LD_STRING D3-Kurt-2
8039: PPUSH
8040: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
8044: LD_EXP 1
8048: PPUSH
8049: LD_STRING D3-JMM-2
8051: PPUSH
8052: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
8056: LD_EXP 17
8060: PPUSH
8061: LD_STRING D3-Kurt-4
8063: PPUSH
8064: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
8068: LD_EXP 1
8072: PPUSH
8073: LD_STRING D3-JMM-4
8075: PPUSH
8076: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
8080: LD_EXP 17
8084: PPUSH
8085: LD_STRING D3-Kurt-5
8087: PPUSH
8088: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
8092: LD_EXP 17
8096: PPUSH
8097: LD_STRING D3-Kurt-5a
8099: PPUSH
8100: CALL_OW 88
// end else
8104: GO 8202
// begin Say ( Kurt , D3-Kurt-1 ) ;
8106: LD_EXP 17
8110: PPUSH
8111: LD_STRING D3-Kurt-1
8113: PPUSH
8114: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
8118: LD_EXP 1
8122: PPUSH
8123: LD_STRING D3-JMM-1
8125: PPUSH
8126: CALL_OW 88
// Say ( Kurt , D3-Kurt-3 ) ;
8130: LD_EXP 17
8134: PPUSH
8135: LD_STRING D3-Kurt-3
8137: PPUSH
8138: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
8142: LD_EXP 1
8146: PPUSH
8147: LD_STRING D3-JMM-3
8149: PPUSH
8150: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
8154: LD_EXP 17
8158: PPUSH
8159: LD_STRING D3-Kurt-4
8161: PPUSH
8162: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
8166: LD_EXP 1
8170: PPUSH
8171: LD_STRING D3-JMM-4
8173: PPUSH
8174: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
8178: LD_EXP 17
8182: PPUSH
8183: LD_STRING D3-Kurt-5
8185: PPUSH
8186: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
8190: LD_EXP 17
8194: PPUSH
8195: LD_STRING D3-Kurt-5b
8197: PPUSH
8198: CALL_OW 88
// end ; if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
8202: LD_VAR 0 8
8206: PUSH
8207: LD_INT 120
8209: PUSH
8210: LD_INT 60
8212: PUSH
8213: EMPTY
8214: LIST
8215: LIST
8216: PUSH
8217: LD_EXP 19
8221: PUSH
8222: LD_INT 1
8224: PLUS
8225: ARRAY
8226: GREATEREQUAL
8227: IFFALSE 8256
8229: PUSH
8230: LD_VAR 0 10
8234: PUSH
8235: LD_INT 120
8237: PUSH
8238: LD_INT 60
8240: PUSH
8241: EMPTY
8242: LIST
8243: LIST
8244: PUSH
8245: LD_EXP 19
8249: PUSH
8250: LD_INT 1
8252: PLUS
8253: ARRAY
8254: GREATEREQUAL
8255: AND
8256: IFFALSE 8308
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8258: LD_ADDR_VAR 0 3
8262: PUSH
8263: LD_STRING Q2
8265: PUSH
8266: LD_STRING Q2K
8268: PUSH
8269: EMPTY
8270: LIST
8271: LIST
8272: PUSH
8273: LD_EXP 19
8277: PUSH
8278: LD_INT 1
8280: PLUS
8281: ARRAY
8282: PPUSH
8283: LD_INT 1
8285: PUSH
8286: LD_INT 2
8288: PUSH
8289: LD_INT 3
8291: PUSH
8292: LD_INT 4
8294: PUSH
8295: EMPTY
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: PPUSH
8301: CALL_OW 98
8305: ST_TO_ADDR
8306: GO 8352
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 3 , 4 ] ) ;
8308: LD_ADDR_VAR 0 3
8312: PUSH
8313: LD_STRING Q2
8315: PUSH
8316: LD_STRING Q2K
8318: PUSH
8319: EMPTY
8320: LIST
8321: LIST
8322: PUSH
8323: LD_EXP 19
8327: PUSH
8328: LD_INT 1
8330: PLUS
8331: ARRAY
8332: PPUSH
8333: LD_INT 1
8335: PUSH
8336: LD_INT 3
8338: PUSH
8339: LD_INT 4
8341: PUSH
8342: EMPTY
8343: LIST
8344: LIST
8345: LIST
8346: PPUSH
8347: CALL_OW 98
8351: ST_TO_ADDR
// if dec1 = 1 then
8352: LD_VAR 0 3
8356: PUSH
8357: LD_INT 1
8359: EQUAL
8360: IFFALSE 8394
// begin Say ( JMM , D3Ka-JMM-1 ) ;
8362: LD_EXP 1
8366: PPUSH
8367: LD_STRING D3Ka-JMM-1
8369: PPUSH
8370: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
8374: LD_EXP 17
8378: PPUSH
8379: LD_STRING D3Ka-Kurt-1
8381: PPUSH
8382: CALL_OW 88
// warWithLegion = 1 ;
8386: LD_ADDR_EXP 23
8390: PUSH
8391: LD_INT 1
8393: ST_TO_ADDR
// end ; if dec1 = 2 then
8394: LD_VAR 0 3
8398: PUSH
8399: LD_INT 2
8401: EQUAL
8402: IFFALSE 8486
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8404: LD_EXP 1
8408: PPUSH
8409: LD_STRING D3Kb-JMM-1
8411: PPUSH
8412: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8416: LD_EXP 17
8420: PPUSH
8421: LD_STRING D3Kb-Kurt-1
8423: PPUSH
8424: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8428: LD_ADDR_VAR 0 11
8432: PUSH
8433: LD_INT 120
8435: PUSH
8436: LD_INT 60
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: PUSH
8443: LD_EXP 19
8447: PUSH
8448: LD_INT 1
8450: PLUS
8451: ARRAY
8452: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8453: LD_ADDR_VAR 0 12
8457: PUSH
8458: LD_INT 120
8460: PUSH
8461: LD_INT 60
8463: PUSH
8464: EMPTY
8465: LIST
8466: LIST
8467: PUSH
8468: LD_EXP 19
8472: PUSH
8473: LD_INT 1
8475: PLUS
8476: ARRAY
8477: ST_TO_ADDR
// payForNeutral := true ;
8478: LD_ADDR_VAR 0 13
8482: PUSH
8483: LD_INT 1
8485: ST_TO_ADDR
// end ; if dec1 = 3 then
8486: LD_VAR 0 3
8490: PUSH
8491: LD_INT 3
8493: EQUAL
8494: IFFALSE 8729
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8496: LD_EXP 1
8500: PPUSH
8501: LD_STRING D3Kc1-JMM-1
8503: PPUSH
8504: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8508: LD_EXP 17
8512: PPUSH
8513: LD_STRING D3Kc1-Kurt-1
8515: PPUSH
8516: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8520: LD_EXP 1
8524: PPUSH
8525: LD_STRING D3Kc1-JMM-2
8527: PPUSH
8528: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8532: LD_EXP 17
8536: PPUSH
8537: LD_STRING D3Kc1-Kurt-2
8539: PPUSH
8540: CALL_OW 88
// askSiberite = 1 ;
8544: LD_ADDR_EXP 25
8548: PUSH
8549: LD_INT 1
8551: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8552: LD_ADDR_VAR 0 4
8556: PUSH
8557: LD_STRING Q2b
8559: PPUSH
8560: LD_INT 1
8562: PUSH
8563: LD_INT 2
8565: PUSH
8566: LD_INT 3
8568: PUSH
8569: EMPTY
8570: LIST
8571: LIST
8572: LIST
8573: PPUSH
8574: CALL_OW 98
8578: ST_TO_ADDR
// if dec2 = 1 then
8579: LD_VAR 0 4
8583: PUSH
8584: LD_INT 1
8586: EQUAL
8587: IFFALSE 8621
// begin Say ( JMM , D4a-JMM-1 ) ;
8589: LD_EXP 1
8593: PPUSH
8594: LD_STRING D4a-JMM-1
8596: PPUSH
8597: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8601: LD_EXP 17
8605: PPUSH
8606: LD_STRING D4b-Kurt-1
8608: PPUSH
8609: CALL_OW 88
// warWithLegion = 1 ;
8613: LD_ADDR_EXP 23
8617: PUSH
8618: LD_INT 1
8620: ST_TO_ADDR
// end ; if dec2 = 2 then
8621: LD_VAR 0 4
8625: PUSH
8626: LD_INT 2
8628: EQUAL
8629: IFFALSE 8663
// begin Say ( JMM , D4b-JMM-1 ) ;
8631: LD_EXP 1
8635: PPUSH
8636: LD_STRING D4b-JMM-1
8638: PPUSH
8639: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8643: LD_EXP 17
8647: PPUSH
8648: LD_STRING D4b-Kurt-1
8650: PPUSH
8651: CALL_OW 88
// warWithLegion = 1 ;
8655: LD_ADDR_EXP 23
8659: PUSH
8660: LD_INT 1
8662: ST_TO_ADDR
// end ; if dec2 = 3 then
8663: LD_VAR 0 4
8667: PUSH
8668: LD_INT 3
8670: EQUAL
8671: IFFALSE 8729
// begin Say ( JMM , D4c-JMM-1 ) ;
8673: LD_EXP 1
8677: PPUSH
8678: LD_STRING D4c-JMM-1
8680: PPUSH
8681: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8685: LD_EXP 17
8689: PPUSH
8690: LD_STRING D4c-Kurt-1
8692: PPUSH
8693: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8697: LD_EXP 1
8701: PPUSH
8702: LD_STRING D4c-JMM-2
8704: PPUSH
8705: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8709: LD_EXP 17
8713: PPUSH
8714: LD_STRING D4c-Kurt-2
8716: PPUSH
8717: CALL_OW 88
// fakeInfo = 1 ;
8721: LD_ADDR_EXP 24
8725: PUSH
8726: LD_INT 1
8728: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
8729: LD_VAR 0 3
8733: PUSH
8734: LD_INT 4
8736: EQUAL
8737: IFFALSE 9809
// begin Say ( JMM , D3Kd-JMM-1 ) ;
8739: LD_EXP 1
8743: PPUSH
8744: LD_STRING D3Kd-JMM-1
8746: PPUSH
8747: CALL_OW 88
// if crates >= [ 200 , 120 ] [ KurtStatus + 1 ] and siberite >= [ 200 , 120 ] [ KurtStatus + 1 ] then
8751: LD_VAR 0 8
8755: PUSH
8756: LD_INT 200
8758: PUSH
8759: LD_INT 120
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: PUSH
8766: LD_EXP 19
8770: PUSH
8771: LD_INT 1
8773: PLUS
8774: ARRAY
8775: GREATEREQUAL
8776: IFFALSE 8805
8778: PUSH
8779: LD_VAR 0 10
8783: PUSH
8784: LD_INT 200
8786: PUSH
8787: LD_INT 120
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: PUSH
8794: LD_EXP 19
8798: PUSH
8799: LD_INT 1
8801: PLUS
8802: ARRAY
8803: GREATEREQUAL
8804: AND
8805: IFFALSE 8857
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8807: LD_ADDR_VAR 0 4
8811: PUSH
8812: LD_STRING Q2a
8814: PUSH
8815: LD_STRING Q2aK
8817: PUSH
8818: EMPTY
8819: LIST
8820: LIST
8821: PUSH
8822: LD_EXP 19
8826: PUSH
8827: LD_INT 1
8829: PLUS
8830: ARRAY
8831: PPUSH
8832: LD_INT 1
8834: PUSH
8835: LD_INT 2
8837: PUSH
8838: LD_INT 3
8840: PUSH
8841: LD_INT 4
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: PPUSH
8850: CALL_OW 98
8854: ST_TO_ADDR
8855: GO 9023
// if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
8857: LD_VAR 0 8
8861: PUSH
8862: LD_INT 120
8864: PUSH
8865: LD_INT 60
8867: PUSH
8868: EMPTY
8869: LIST
8870: LIST
8871: PUSH
8872: LD_EXP 19
8876: PUSH
8877: LD_INT 1
8879: PLUS
8880: ARRAY
8881: GREATEREQUAL
8882: IFFALSE 8911
8884: PUSH
8885: LD_VAR 0 10
8889: PUSH
8890: LD_INT 120
8892: PUSH
8893: LD_INT 60
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: PUSH
8900: LD_EXP 19
8904: PUSH
8905: LD_INT 1
8907: PLUS
8908: ARRAY
8909: GREATEREQUAL
8910: AND
8911: IFFALSE 8959
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 4 ] ) else
8913: LD_ADDR_VAR 0 4
8917: PUSH
8918: LD_STRING Q2a
8920: PUSH
8921: LD_STRING Q2aK
8923: PUSH
8924: EMPTY
8925: LIST
8926: LIST
8927: PUSH
8928: LD_EXP 19
8932: PUSH
8933: LD_INT 1
8935: PLUS
8936: ARRAY
8937: PPUSH
8938: LD_INT 1
8940: PUSH
8941: LD_INT 2
8943: PUSH
8944: LD_INT 4
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: LIST
8951: PPUSH
8952: CALL_OW 98
8956: ST_TO_ADDR
8957: GO 9023
// begin Query ( [ Q2d , Q2dK ] [ KurtStatus + 1 ] ) ;
8959: LD_STRING Q2d
8961: PUSH
8962: LD_STRING Q2dK
8964: PUSH
8965: EMPTY
8966: LIST
8967: LIST
8968: PUSH
8969: LD_EXP 19
8973: PUSH
8974: LD_INT 1
8976: PLUS
8977: ARRAY
8978: PPUSH
8979: CALL_OW 97
// dec2 := 0 ;
8983: LD_ADDR_VAR 0 4
8987: PUSH
8988: LD_INT 0
8990: ST_TO_ADDR
// Say ( JMM , D3Kc1-JMM-1 ) ;
8991: LD_EXP 1
8995: PPUSH
8996: LD_STRING D3Kc1-JMM-1
8998: PPUSH
8999: CALL_OW 88
// Say ( Kurt , D3Kc2-Kurt-1 ) ;
9003: LD_EXP 17
9007: PPUSH
9008: LD_STRING D3Kc2-Kurt-1
9010: PPUSH
9011: CALL_OW 88
// warWithLegion := 1 ;
9015: LD_ADDR_EXP 23
9019: PUSH
9020: LD_INT 1
9022: ST_TO_ADDR
// end ; if dec2 = 1 then
9023: LD_VAR 0 4
9027: PUSH
9028: LD_INT 1
9030: EQUAL
9031: IFFALSE 9065
// begin Say ( JMM , D5Ka-JMM-1 ) ;
9033: LD_EXP 1
9037: PPUSH
9038: LD_STRING D5Ka-JMM-1
9040: PPUSH
9041: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
9045: LD_EXP 17
9049: PPUSH
9050: LD_STRING D5Ka-Kurt-1
9052: PPUSH
9053: CALL_OW 88
// warWithLegion = 1 ;
9057: LD_ADDR_EXP 23
9061: PUSH
9062: LD_INT 1
9064: ST_TO_ADDR
// end ; if dec2 = 2 then
9065: LD_VAR 0 4
9069: PUSH
9070: LD_INT 2
9072: EQUAL
9073: IFFALSE 9157
// begin Say ( JMM , D3Kb-JMM-1 ) ;
9075: LD_EXP 1
9079: PPUSH
9080: LD_STRING D3Kb-JMM-1
9082: PPUSH
9083: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
9087: LD_EXP 17
9091: PPUSH
9092: LD_STRING D3Kb-Kurt-1
9094: PPUSH
9095: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
9099: LD_ADDR_VAR 0 11
9103: PUSH
9104: LD_INT 120
9106: PUSH
9107: LD_INT 60
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: PUSH
9114: LD_EXP 19
9118: PUSH
9119: LD_INT 1
9121: PLUS
9122: ARRAY
9123: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
9124: LD_ADDR_VAR 0 12
9128: PUSH
9129: LD_INT 120
9131: PUSH
9132: LD_INT 60
9134: PUSH
9135: EMPTY
9136: LIST
9137: LIST
9138: PUSH
9139: LD_EXP 19
9143: PUSH
9144: LD_INT 1
9146: PLUS
9147: ARRAY
9148: ST_TO_ADDR
// payForNeutral := true ;
9149: LD_ADDR_VAR 0 13
9153: PUSH
9154: LD_INT 1
9156: ST_TO_ADDR
// end ; if dec2 = 3 then
9157: LD_VAR 0 4
9161: PUSH
9162: LD_INT 3
9164: EQUAL
9165: IFFALSE 9249
// begin Say ( JMM , D3Ke-JMM-1 ) ;
9167: LD_EXP 1
9171: PPUSH
9172: LD_STRING D3Ke-JMM-1
9174: PPUSH
9175: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
9179: LD_EXP 17
9183: PPUSH
9184: LD_STRING D3Ke-Kurt-1
9186: PPUSH
9187: CALL_OW 88
// cr := [ 200 , 120 ] [ KurtStatus + 1 ] ;
9191: LD_ADDR_VAR 0 11
9195: PUSH
9196: LD_INT 200
9198: PUSH
9199: LD_INT 120
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: PUSH
9206: LD_EXP 19
9210: PUSH
9211: LD_INT 1
9213: PLUS
9214: ARRAY
9215: ST_TO_ADDR
// sb := [ 200 , 120 ] [ KurtStatus + 1 ] ;
9216: LD_ADDR_VAR 0 12
9220: PUSH
9221: LD_INT 200
9223: PUSH
9224: LD_INT 120
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: PUSH
9231: LD_EXP 19
9235: PUSH
9236: LD_INT 1
9238: PLUS
9239: ARRAY
9240: ST_TO_ADDR
// payForHelp := true ;
9241: LD_ADDR_VAR 0 14
9245: PUSH
9246: LD_INT 1
9248: ST_TO_ADDR
// end ; if dec2 = 4 then
9249: LD_VAR 0 4
9253: PUSH
9254: LD_INT 4
9256: EQUAL
9257: IFFALSE 9492
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
9259: LD_EXP 1
9263: PPUSH
9264: LD_STRING D3Kc1-JMM-1
9266: PPUSH
9267: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
9271: LD_EXP 17
9275: PPUSH
9276: LD_STRING D3Kc1-Kurt-1
9278: PPUSH
9279: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
9283: LD_EXP 1
9287: PPUSH
9288: LD_STRING D3Kc1-JMM-2
9290: PPUSH
9291: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
9295: LD_EXP 17
9299: PPUSH
9300: LD_STRING D3Kc1-Kurt-2
9302: PPUSH
9303: CALL_OW 88
// askSiberite = 1 ;
9307: LD_ADDR_EXP 25
9311: PUSH
9312: LD_INT 1
9314: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
9315: LD_ADDR_VAR 0 4
9319: PUSH
9320: LD_STRING Q2b
9322: PPUSH
9323: LD_INT 1
9325: PUSH
9326: LD_INT 2
9328: PUSH
9329: LD_INT 3
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: LIST
9336: PPUSH
9337: CALL_OW 98
9341: ST_TO_ADDR
// if dec2 = 1 then
9342: LD_VAR 0 4
9346: PUSH
9347: LD_INT 1
9349: EQUAL
9350: IFFALSE 9384
// begin Say ( JMM , D4a-JMM-1 ) ;
9352: LD_EXP 1
9356: PPUSH
9357: LD_STRING D4a-JMM-1
9359: PPUSH
9360: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
9364: LD_EXP 17
9368: PPUSH
9369: LD_STRING D4b-Kurt-1
9371: PPUSH
9372: CALL_OW 88
// warWithLegion = 1 ;
9376: LD_ADDR_EXP 23
9380: PUSH
9381: LD_INT 1
9383: ST_TO_ADDR
// end ; if dec2 = 2 then
9384: LD_VAR 0 4
9388: PUSH
9389: LD_INT 2
9391: EQUAL
9392: IFFALSE 9426
// begin Say ( JMM , D4b-JMM-1 ) ;
9394: LD_EXP 1
9398: PPUSH
9399: LD_STRING D4b-JMM-1
9401: PPUSH
9402: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
9406: LD_EXP 17
9410: PPUSH
9411: LD_STRING D4b-Kurt-1
9413: PPUSH
9414: CALL_OW 88
// warWithLegion = 1 ;
9418: LD_ADDR_EXP 23
9422: PUSH
9423: LD_INT 1
9425: ST_TO_ADDR
// end ; if dec2 = 3 then
9426: LD_VAR 0 4
9430: PUSH
9431: LD_INT 3
9433: EQUAL
9434: IFFALSE 9492
// begin Say ( JMM , D4c-JMM-1 ) ;
9436: LD_EXP 1
9440: PPUSH
9441: LD_STRING D4c-JMM-1
9443: PPUSH
9444: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
9448: LD_EXP 17
9452: PPUSH
9453: LD_STRING D4c-Kurt-1
9455: PPUSH
9456: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9460: LD_EXP 1
9464: PPUSH
9465: LD_STRING D4c-JMM-2
9467: PPUSH
9468: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
9472: LD_EXP 17
9476: PPUSH
9477: LD_STRING D4c-Kurt-2
9479: PPUSH
9480: CALL_OW 88
// fakeInfo = 1 ;
9484: LD_ADDR_EXP 24
9488: PUSH
9489: LD_INT 1
9491: ST_TO_ADDR
// end ; end ; if payForNeutral or payForHelp then
9492: LD_VAR 0 13
9496: IFTRUE 9504
9498: PUSH
9499: LD_VAR 0 14
9503: OR
9504: IFFALSE 9809
// begin for i in tmp do
9506: LD_ADDR_VAR 0 2
9510: PUSH
9511: LD_VAR 0 5
9515: PUSH
9516: FOR_IN
9517: IFFALSE 9807
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
9519: LD_ADDR_VAR 0 6
9523: PUSH
9524: LD_VAR 0 2
9528: PPUSH
9529: CALL_OW 274
9533: PPUSH
9534: LD_INT 1
9536: PPUSH
9537: CALL_OW 275
9541: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
9542: LD_ADDR_VAR 0 7
9546: PUSH
9547: LD_VAR 0 2
9551: PPUSH
9552: CALL_OW 274
9556: PPUSH
9557: LD_INT 3
9559: PPUSH
9560: CALL_OW 275
9564: ST_TO_ADDR
// if cr then
9565: LD_VAR 0 11
9569: IFFALSE 9685
// begin if tmp2 and tmp2 < cr then
9571: LD_VAR 0 6
9575: IFFALSE 9589
9577: PUSH
9578: LD_VAR 0 6
9582: PUSH
9583: LD_VAR 0 11
9587: LESS
9588: AND
9589: IFFALSE 9637
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
9591: LD_VAR 0 2
9595: PPUSH
9596: CALL_OW 274
9600: PPUSH
9601: LD_INT 1
9603: PPUSH
9604: LD_VAR 0 11
9608: PUSH
9609: LD_VAR 0 6
9613: MINUS
9614: PPUSH
9615: CALL_OW 277
// cr := cr - tmp2 ;
9619: LD_ADDR_VAR 0 11
9623: PUSH
9624: LD_VAR 0 11
9628: PUSH
9629: LD_VAR 0 6
9633: MINUS
9634: ST_TO_ADDR
// end else
9635: GO 9685
// if tmp2 > cr then
9637: LD_VAR 0 6
9641: PUSH
9642: LD_VAR 0 11
9646: GREATER
9647: IFFALSE 9685
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
9649: LD_VAR 0 2
9653: PPUSH
9654: CALL_OW 274
9658: PPUSH
9659: LD_INT 1
9661: PPUSH
9662: LD_VAR 0 6
9666: PUSH
9667: LD_VAR 0 11
9671: MINUS
9672: PPUSH
9673: CALL_OW 277
// cr := 0 ;
9677: LD_ADDR_VAR 0 11
9681: PUSH
9682: LD_INT 0
9684: ST_TO_ADDR
// end ; end ; if sb then
9685: LD_VAR 0 12
9689: IFFALSE 9805
// begin if tmp3 and tmp3 < sb then
9691: LD_VAR 0 7
9695: IFFALSE 9709
9697: PUSH
9698: LD_VAR 0 7
9702: PUSH
9703: LD_VAR 0 12
9707: LESS
9708: AND
9709: IFFALSE 9757
// begin SetResourceType ( GetBase ( i ) , 3 , sb - tmp3 ) ;
9711: LD_VAR 0 2
9715: PPUSH
9716: CALL_OW 274
9720: PPUSH
9721: LD_INT 3
9723: PPUSH
9724: LD_VAR 0 12
9728: PUSH
9729: LD_VAR 0 7
9733: MINUS
9734: PPUSH
9735: CALL_OW 277
// sb := sb - tmp3 ;
9739: LD_ADDR_VAR 0 12
9743: PUSH
9744: LD_VAR 0 12
9748: PUSH
9749: LD_VAR 0 7
9753: MINUS
9754: ST_TO_ADDR
// end else
9755: GO 9805
// if tmp3 > sb then
9757: LD_VAR 0 7
9761: PUSH
9762: LD_VAR 0 12
9766: GREATER
9767: IFFALSE 9805
// begin SetResourceType ( GetBase ( i ) , 3 , tmp3 - sb ) ;
9769: LD_VAR 0 2
9773: PPUSH
9774: CALL_OW 274
9778: PPUSH
9779: LD_INT 3
9781: PPUSH
9782: LD_VAR 0 7
9786: PUSH
9787: LD_VAR 0 12
9791: MINUS
9792: PPUSH
9793: CALL_OW 277
// sb := 0 ;
9797: LD_ADDR_VAR 0 12
9801: PUSH
9802: LD_INT 0
9804: ST_TO_ADDR
// end ; end ; end ;
9805: GO 9516
9807: POP
9808: POP
// end ; end ; DialogueOff ;
9809: CALL_OW 7
// RemoveSeeing ( 167 , 121 , 1 ) ;
9813: LD_INT 167
9815: PPUSH
9816: LD_INT 121
9818: PPUSH
9819: LD_INT 1
9821: PPUSH
9822: CALL_OW 331
// ComEnterUnit ( Kurt , KurtVeh ) ;
9826: LD_EXP 17
9830: PPUSH
9831: LD_EXP 18
9835: PPUSH
9836: CALL_OW 120
// wait ( 0 0$1 ) ;
9840: LD_INT 35
9842: PPUSH
9843: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9847: LD_EXP 18
9851: PPUSH
9852: LD_INT 4
9854: PPUSH
9855: CALL_OW 113
// wait ( 0 0$3 ) ;
9859: LD_INT 105
9861: PPUSH
9862: CALL_OW 67
// RemoveUnit ( Kurt ) ;
9866: LD_EXP 17
9870: PPUSH
9871: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9875: LD_EXP 18
9879: PPUSH
9880: CALL_OW 64
// wait ( 0 0$3 ) ;
9884: LD_INT 105
9886: PPUSH
9887: CALL_OW 67
// if payForHelp then
9891: LD_VAR 0 14
9895: IFFALSE 9953
// begin HiddenCamera ( 36 , 57 , 1 ) ;
9897: LD_INT 36
9899: PPUSH
9900: LD_INT 57
9902: PPUSH
9903: LD_INT 1
9905: PPUSH
9906: CALL_OW 244
// HiddenCamera ( 51 , 63 , 1 ) ;
9910: LD_INT 51
9912: PPUSH
9913: LD_INT 63
9915: PPUSH
9916: LD_INT 1
9918: PPUSH
9919: CALL_OW 244
// HiddenCamera ( 93 , 65 , 1 ) ;
9923: LD_INT 93
9925: PPUSH
9926: LD_INT 65
9928: PPUSH
9929: LD_INT 1
9931: PPUSH
9932: CALL_OW 244
// HiddenCamera ( 42 , 12 , 1 ) ;
9936: LD_INT 42
9938: PPUSH
9939: LD_INT 12
9941: PPUSH
9942: LD_INT 1
9944: PPUSH
9945: CALL_OW 244
// PrepareLegionForPlayer ;
9949: CALL 5482 0 0
// end ; end ;
9953: LD_VAR 0 1
9957: RET
// every 0 0$10 trigger warWithLegion = 1 do
9958: LD_EXP 23
9962: PUSH
9963: LD_INT 1
9965: EQUAL
9966: IFFALSE 9982
9968: GO 9970
9970: DISABLE
// begin wait ( 0 0$30 ) ;
9971: LD_INT 1050
9973: PPUSH
9974: CALL_OW 67
// PrepareAttackLegion ;
9978: CALL 6131 0 0
// end ;
9982: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do var i ;
9983: LD_INT 120
9985: PUSH
9986: LD_INT 17
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PUSH
9993: LD_INT 52
9995: PUSH
9996: EMPTY
9997: LIST
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: PPUSH
10003: CALL_OW 69
10007: IFFALSE 10154
10009: GO 10011
10011: DISABLE
10012: LD_INT 0
10014: PPUSH
// begin enable ;
10015: ENABLE
// for i in FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do
10016: LD_ADDR_VAR 0 1
10020: PUSH
10021: LD_INT 120
10023: PUSH
10024: LD_INT 17
10026: PUSH
10027: EMPTY
10028: LIST
10029: LIST
10030: PUSH
10031: LD_INT 52
10033: PUSH
10034: EMPTY
10035: LIST
10036: PUSH
10037: EMPTY
10038: LIST
10039: LIST
10040: PPUSH
10041: CALL_OW 69
10045: PUSH
10046: FOR_IN
10047: IFFALSE 10152
// begin if GetMultiCargo ( i ) [ 4 ] = 0 and GetSide ( i ) = 1 then
10049: LD_VAR 0 1
10053: PPUSH
10054: CALL 83338 0 1
10058: PUSH
10059: LD_INT 4
10061: ARRAY
10062: PUSH
10063: LD_INT 0
10065: EQUAL
10066: IFFALSE 10083
10068: PUSH
10069: LD_VAR 0 1
10073: PPUSH
10074: CALL_OW 255
10078: PUSH
10079: LD_INT 1
10081: EQUAL
10082: AND
10083: IFFALSE 10097
// SetSide ( i , 4 ) ;
10085: LD_VAR 0 1
10089: PPUSH
10090: LD_INT 4
10092: PPUSH
10093: CALL_OW 235
// if GetSide ( i ) = 4 then
10097: LD_VAR 0 1
10101: PPUSH
10102: CALL_OW 255
10106: PUSH
10107: LD_INT 4
10109: EQUAL
10110: IFFALSE 10150
// if not IsInArea ( i , PlayerSpawn ) then
10112: LD_VAR 0 1
10116: PPUSH
10117: LD_INT 4
10119: PPUSH
10120: CALL_OW 308
10124: NOT
10125: IFFALSE 10141
// ComMoveToArea ( i , PlayerSpawn ) else
10127: LD_VAR 0 1
10131: PPUSH
10132: LD_INT 4
10134: PPUSH
10135: CALL_OW 113
10139: GO 10150
// RemoveUnit ( i ) ;
10141: LD_VAR 0 1
10145: PPUSH
10146: CALL_OW 64
// end ;
10150: GO 10046
10152: POP
10153: POP
// end ;
10154: PPOPN 1
10156: END
// every 0 0$3 trigger secondPass = 1 and FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_type , unit_vehicle ] ] ) do var i , enemyVehs , dec ;
10157: LD_EXP 20
10161: PUSH
10162: LD_INT 1
10164: EQUAL
10165: IFFALSE 10211
10167: PUSH
10168: LD_INT 12
10170: PPUSH
10171: LD_INT 22
10173: PUSH
10174: LD_INT 3
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PUSH
10181: LD_INT 101
10183: PUSH
10184: LD_INT 1
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: PUSH
10191: LD_INT 21
10193: PUSH
10194: LD_INT 2
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: PUSH
10201: EMPTY
10202: LIST
10203: LIST
10204: LIST
10205: PPUSH
10206: CALL_OW 70
10210: AND
10211: IFFALSE 10796
10213: GO 10215
10215: DISABLE
10216: LD_INT 0
10218: PPUSH
10219: PPUSH
10220: PPUSH
// begin DialogueOn ;
10221: CALL_OW 6
// CenterNowOnUnits ( i ) ;
10225: LD_VAR 0 1
10229: PPUSH
10230: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10234: LD_INT 22
10236: PUSH
10237: LD_INT 1
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: PUSH
10244: LD_INT 26
10246: PUSH
10247: LD_INT 1
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: PUSH
10254: LD_INT 2
10256: PUSH
10257: LD_INT 25
10259: PUSH
10260: LD_INT 1
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: PUSH
10267: LD_INT 25
10269: PUSH
10270: LD_INT 2
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: PUSH
10277: LD_INT 25
10279: PUSH
10280: LD_INT 3
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PUSH
10287: LD_INT 25
10289: PUSH
10290: LD_INT 4
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: PUSH
10297: LD_INT 25
10299: PUSH
10300: LD_INT 5
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: PUSH
10307: LD_INT 25
10309: PUSH
10310: LD_INT 8
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: PUSH
10326: EMPTY
10327: LIST
10328: LIST
10329: LIST
10330: PPUSH
10331: CALL_OW 69
10335: PPUSH
10336: LD_STRING DT1-Sol1-1
10338: PPUSH
10339: LD_STRING DT1-FSol1-1
10341: PPUSH
10342: CALL 13095 0 3
// dec := ShowQuery2 ;
10346: LD_ADDR_VAR 0 3
10350: PUSH
10351: CALL 13579 0 0
10355: ST_TO_ADDR
// if dec = 1 then
10356: LD_VAR 0 3
10360: PUSH
10361: LD_INT 1
10363: EQUAL
10364: IFFALSE 10506
// begin Say ( JMM , D2-JMM-1 ) ;
10366: LD_EXP 1
10370: PPUSH
10371: LD_STRING D2-JMM-1
10373: PPUSH
10374: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10378: LD_EXP 15
10382: PPUSH
10383: LD_STRING D2-Pow-1
10385: PPUSH
10386: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
10390: LD_EXP 1
10394: PPUSH
10395: LD_STRING D2a-JMM-1
10397: PPUSH
10398: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
10402: LD_EXP 15
10406: PPUSH
10407: LD_STRING D2a-Pow-1
10409: PPUSH
10410: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
10414: LD_EXP 1
10418: PPUSH
10419: LD_STRING D2a-JMM-2
10421: PPUSH
10422: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10426: LD_EXP 15
10430: PPUSH
10431: LD_STRING D2a-Pow-2
10433: PPUSH
10434: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10438: LD_EXP 1
10442: PPUSH
10443: LD_STRING D2a-JMM-3
10445: PPUSH
10446: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10450: LD_EXP 15
10454: PPUSH
10455: LD_STRING D2a-Pow-3
10457: PPUSH
10458: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10462: LD_EXP 1
10466: PPUSH
10467: LD_STRING D2c-JMM-1
10469: PPUSH
10470: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10474: LD_EXP 15
10478: PPUSH
10479: LD_STRING D2c-Pow-1
10481: PPUSH
10482: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10486: LD_EXP 1
10490: PPUSH
10491: LD_STRING D2c-JMM-2
10493: PPUSH
10494: CALL_OW 88
// secondPass := 2 ;
10498: LD_ADDR_EXP 20
10502: PUSH
10503: LD_INT 2
10505: ST_TO_ADDR
// end ; if dec = 2 then
10506: LD_VAR 0 3
10510: PUSH
10511: LD_INT 2
10513: EQUAL
10514: IFFALSE 10608
// begin Say ( JMM , D2-JMM-1 ) ;
10516: LD_EXP 1
10520: PPUSH
10521: LD_STRING D2-JMM-1
10523: PPUSH
10524: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10528: LD_EXP 15
10532: PPUSH
10533: LD_STRING D2-Pow-1
10535: PPUSH
10536: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
10540: LD_EXP 1
10544: PPUSH
10545: LD_STRING D2b-JMM-1
10547: PPUSH
10548: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
10552: LD_EXP 15
10556: PPUSH
10557: LD_STRING D2b-Pow-1
10559: PPUSH
10560: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10564: LD_EXP 1
10568: PPUSH
10569: LD_STRING D2c-JMM-1
10571: PPUSH
10572: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10576: LD_EXP 15
10580: PPUSH
10581: LD_STRING D2c-Pow-1
10583: PPUSH
10584: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10588: LD_EXP 1
10592: PPUSH
10593: LD_STRING D2c-JMM-2
10595: PPUSH
10596: CALL_OW 88
// secondPass := 2 ;
10600: LD_ADDR_EXP 20
10604: PUSH
10605: LD_INT 2
10607: ST_TO_ADDR
// end ; DialogueOff ;
10608: CALL_OW 7
// if secondPass = 2 then
10612: LD_EXP 20
10616: PUSH
10617: LD_INT 2
10619: EQUAL
10620: IFFALSE 10624
// exit ;
10622: GO 10796
// Query ( HelpRequest ) ;
10624: LD_STRING HelpRequest
10626: PPUSH
10627: CALL_OW 97
// SetAreaMapShow ( helpRequestArea , 1 ) ;
10631: LD_INT 27
10633: PPUSH
10634: LD_INT 1
10636: PPUSH
10637: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
10641: LD_INT 35
10643: PPUSH
10644: CALL_OW 67
// until IsInArea ( JMM , helpRequestArea ) ;
10648: LD_EXP 1
10652: PPUSH
10653: LD_INT 27
10655: PPUSH
10656: CALL_OW 308
10660: IFFALSE 10641
// SetAreaMapShow ( helpRequestArea , 0 ) ;
10662: LD_INT 27
10664: PPUSH
10665: LD_INT 0
10667: PPUSH
10668: CALL_OW 424
// DialogueOn ;
10672: CALL_OW 6
// Say ( JMM , D2-JMM-1 ) ;
10676: LD_EXP 1
10680: PPUSH
10681: LD_STRING D2-JMM-1
10683: PPUSH
10684: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10688: LD_EXP 15
10692: PPUSH
10693: LD_STRING D2-Pow-1
10695: PPUSH
10696: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
10700: LD_EXP 1
10704: PPUSH
10705: LD_STRING D2b-JMM-1
10707: PPUSH
10708: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10712: LD_EXP 15
10716: PPUSH
10717: LD_STRING D2a-Pow-2
10719: PPUSH
10720: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10724: LD_EXP 1
10728: PPUSH
10729: LD_STRING D2a-JMM-3
10731: PPUSH
10732: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10736: LD_EXP 15
10740: PPUSH
10741: LD_STRING D2a-Pow-3
10743: PPUSH
10744: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10748: LD_EXP 1
10752: PPUSH
10753: LD_STRING D2c-JMM-1
10755: PPUSH
10756: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10760: LD_EXP 15
10764: PPUSH
10765: LD_STRING D2c-Pow-1
10767: PPUSH
10768: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10772: LD_EXP 1
10776: PPUSH
10777: LD_STRING D2c-JMM-2
10779: PPUSH
10780: CALL_OW 88
// DialogueOff ;
10784: CALL_OW 7
// secondPass := 2 ;
10788: LD_ADDR_EXP 20
10792: PUSH
10793: LD_INT 2
10795: ST_TO_ADDR
// end ;
10796: PPOPN 3
10798: END
// every 0 0$1 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) do var vehicles ;
10799: LD_EXP 21
10803: PUSH
10804: LD_INT 1
10806: EQUAL
10807: IFFALSE 10828
10809: PUSH
10810: LD_INT 11
10812: PPUSH
10813: LD_INT 22
10815: PUSH
10816: LD_INT 3
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PPUSH
10823: CALL_OW 70
10827: AND
10828: IFFALSE 11311
10830: GO 10832
10832: DISABLE
10833: LD_INT 0
10835: PPUSH
// begin vehicles := FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
10836: LD_ADDR_VAR 0 1
10840: PUSH
10841: LD_INT 11
10843: PPUSH
10844: LD_INT 22
10846: PUSH
10847: LD_INT 3
10849: PUSH
10850: EMPTY
10851: LIST
10852: LIST
10853: PPUSH
10854: CALL_OW 70
10858: ST_TO_ADDR
// if not vehicles then
10859: LD_VAR 0 1
10863: NOT
10864: IFFALSE 10868
// exit ;
10866: GO 11311
// repeat wait ( 0 0$1 ) ;
10868: LD_INT 35
10870: PPUSH
10871: CALL_OW 67
// until UnitFilter ( vehicles , [ f_see , 1 ] ) ;
10875: LD_VAR 0 1
10879: PPUSH
10880: LD_INT 101
10882: PUSH
10883: LD_INT 1
10885: PUSH
10886: EMPTY
10887: LIST
10888: LIST
10889: PPUSH
10890: CALL_OW 72
10894: IFFALSE 10868
// CenterNowOnUnits ( UnitFilter ( vehicles , [ f_see , 1 ] ) [ 1 ] ) ;
10896: LD_VAR 0 1
10900: PPUSH
10901: LD_INT 101
10903: PUSH
10904: LD_INT 1
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: PPUSH
10911: CALL_OW 72
10915: PUSH
10916: LD_INT 1
10918: ARRAY
10919: PPUSH
10920: CALL_OW 87
// DialogueOn ;
10924: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10928: LD_INT 22
10930: PUSH
10931: LD_INT 1
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: PUSH
10938: LD_INT 26
10940: PUSH
10941: LD_INT 1
10943: PUSH
10944: EMPTY
10945: LIST
10946: LIST
10947: PUSH
10948: LD_INT 23
10950: PUSH
10951: LD_INT 1
10953: PUSH
10954: EMPTY
10955: LIST
10956: LIST
10957: PUSH
10958: LD_INT 2
10960: PUSH
10961: LD_INT 25
10963: PUSH
10964: LD_INT 1
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: PUSH
10971: LD_INT 25
10973: PUSH
10974: LD_INT 2
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: PUSH
10981: LD_INT 25
10983: PUSH
10984: LD_INT 3
10986: PUSH
10987: EMPTY
10988: LIST
10989: LIST
10990: PUSH
10991: LD_INT 25
10993: PUSH
10994: LD_INT 4
10996: PUSH
10997: EMPTY
10998: LIST
10999: LIST
11000: PUSH
11001: LD_INT 25
11003: PUSH
11004: LD_INT 5
11006: PUSH
11007: EMPTY
11008: LIST
11009: LIST
11010: PUSH
11011: LD_INT 25
11013: PUSH
11014: LD_INT 8
11016: PUSH
11017: EMPTY
11018: LIST
11019: LIST
11020: PUSH
11021: EMPTY
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: PUSH
11030: EMPTY
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: PPUSH
11036: CALL_OW 69
11040: PPUSH
11041: LD_STRING DT1-Sol1-1
11043: PPUSH
11044: LD_STRING DT1-FSol1-1
11046: PPUSH
11047: CALL 13095 0 3
// Say ( JMM , DT1-JMM-1 ) ;
11051: LD_EXP 1
11055: PPUSH
11056: LD_STRING DT1-JMM-1
11058: PPUSH
11059: CALL_OW 88
// DialogueOff ;
11063: CALL_OW 7
// repeat wait ( 0 0$05 ) ;
11067: LD_INT 175
11069: PPUSH
11070: CALL_OW 67
// until FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter > 2 ;
11074: LD_INT 11
11076: PPUSH
11077: LD_INT 22
11079: PUSH
11080: LD_INT 3
11082: PUSH
11083: EMPTY
11084: LIST
11085: LIST
11086: PUSH
11087: LD_INT 50
11089: PUSH
11090: EMPTY
11091: LIST
11092: PUSH
11093: LD_INT 2
11095: PUSH
11096: LD_INT 21
11098: PUSH
11099: LD_INT 2
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: PUSH
11106: LD_INT 21
11108: PUSH
11109: LD_INT 1
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: LIST
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: LIST
11125: PPUSH
11126: CALL_OW 70
11130: PUSH
11131: LD_INT 0
11133: EQUAL
11134: IFFALSE 11146
11136: PUSH
11137: LD_EXP 22
11141: PUSH
11142: LD_INT 2
11144: GREATER
11145: AND
11146: IFFALSE 11067
// DialogueOn ;
11148: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
11152: LD_EXP 1
11156: PPUSH
11157: LD_STRING DT1a-JMM-1
11159: PPUSH
11160: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
11164: LD_INT 22
11166: PUSH
11167: LD_INT 1
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: PUSH
11174: LD_INT 26
11176: PUSH
11177: LD_INT 1
11179: PUSH
11180: EMPTY
11181: LIST
11182: LIST
11183: PUSH
11184: LD_INT 23
11186: PUSH
11187: LD_INT 1
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: PUSH
11194: LD_INT 2
11196: PUSH
11197: LD_INT 25
11199: PUSH
11200: LD_INT 1
11202: PUSH
11203: EMPTY
11204: LIST
11205: LIST
11206: PUSH
11207: LD_INT 25
11209: PUSH
11210: LD_INT 2
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: PUSH
11217: LD_INT 25
11219: PUSH
11220: LD_INT 3
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PUSH
11227: LD_INT 25
11229: PUSH
11230: LD_INT 4
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: PUSH
11237: LD_INT 25
11239: PUSH
11240: LD_INT 5
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: PUSH
11247: LD_INT 25
11249: PUSH
11250: LD_INT 8
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: PPUSH
11272: CALL_OW 69
11276: PPUSH
11277: LD_STRING DT1a-Sol1-1
11279: PPUSH
11280: LD_STRING DT1a-FSol1-1
11282: PPUSH
11283: CALL 13095 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
11287: LD_EXP 1
11291: PPUSH
11292: LD_STRING DT1a-JMM-2
11294: PPUSH
11295: CALL_OW 88
// DialogueOff ;
11299: CALL_OW 7
// vehicleTeleported := 2 ;
11303: LD_ADDR_EXP 21
11307: PUSH
11308: LD_INT 2
11310: ST_TO_ADDR
// end ;
11311: PPOPN 1
11313: END
// every 0 0$2 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] ] ) do var i , vehicles , speaker ;
11314: LD_EXP 21
11318: PUSH
11319: LD_INT 3
11321: EQUAL
11322: IFFALSE 11357
11324: PUSH
11325: LD_INT 11
11327: PPUSH
11328: LD_INT 22
11330: PUSH
11331: LD_INT 3
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: PUSH
11338: LD_INT 101
11340: PUSH
11341: LD_INT 1
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: PPUSH
11352: CALL_OW 70
11356: AND
11357: IFFALSE 11642
11359: GO 11361
11361: DISABLE
11362: LD_INT 0
11364: PPUSH
11365: PPUSH
11366: PPUSH
// begin wait ( 0 0$0.3 ) ;
11367: LD_INT 10
11369: PPUSH
11370: CALL_OW 67
// DialogueOn ;
11374: CALL_OW 6
// speaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
11378: LD_ADDR_VAR 0 3
11382: PUSH
11383: LD_INT 22
11385: PUSH
11386: LD_INT 1
11388: PUSH
11389: EMPTY
11390: LIST
11391: LIST
11392: PUSH
11393: LD_INT 23
11395: PUSH
11396: LD_INT 1
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: PUSH
11403: LD_INT 26
11405: PUSH
11406: LD_INT 1
11408: PUSH
11409: EMPTY
11410: LIST
11411: LIST
11412: PUSH
11413: LD_INT 2
11415: PUSH
11416: LD_INT 25
11418: PUSH
11419: LD_INT 1
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: PUSH
11426: LD_INT 25
11428: PUSH
11429: LD_INT 2
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: PUSH
11436: LD_INT 25
11438: PUSH
11439: LD_INT 3
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: PUSH
11446: LD_INT 25
11448: PUSH
11449: LD_INT 4
11451: PUSH
11452: EMPTY
11453: LIST
11454: LIST
11455: PUSH
11456: LD_INT 25
11458: PUSH
11459: LD_INT 5
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: PUSH
11466: LD_INT 25
11468: PUSH
11469: LD_INT 8
11471: PUSH
11472: EMPTY
11473: LIST
11474: LIST
11475: PUSH
11476: EMPTY
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: PPUSH
11491: CALL_OW 69
11495: PPUSH
11496: LD_STRING DT2-Sol1-1
11498: PPUSH
11499: LD_STRING DT2-FSol1-1
11501: PPUSH
11502: CALL 13095 0 3
11506: ST_TO_ADDR
// DialogueOff ;
11507: CALL_OW 7
// repeat wait ( 0 0$5 ) ;
11511: LD_INT 175
11513: PPUSH
11514: CALL_OW 67
// until not FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] ] ) ;
11518: LD_INT 11
11520: PPUSH
11521: LD_INT 22
11523: PUSH
11524: LD_INT 3
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: PUSH
11531: LD_INT 50
11533: PUSH
11534: EMPTY
11535: LIST
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: PPUSH
11541: CALL_OW 70
11545: NOT
11546: IFFALSE 11511
// wait ( 0 0$2 ) ;
11548: LD_INT 70
11550: PPUSH
11551: CALL_OW 67
// vehicleTeleported := 4 ;
11555: LD_ADDR_EXP 21
11559: PUSH
11560: LD_INT 4
11562: ST_TO_ADDR
// DialogueOn ;
11563: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
11567: LD_EXP 1
11571: PPUSH
11572: LD_STRING DT2a-JMM-1
11574: PPUSH
11575: CALL_OW 88
// if speaker then
11579: LD_VAR 0 3
11583: IFFALSE 11626
// if GetSex ( speaker ) = 1 then
11585: LD_VAR 0 3
11589: PPUSH
11590: CALL_OW 258
11594: PUSH
11595: LD_INT 1
11597: EQUAL
11598: IFFALSE 11614
// Say ( speaker , DT2a-Sol1-1 ) else
11600: LD_VAR 0 3
11604: PPUSH
11605: LD_STRING DT2a-Sol1-1
11607: PPUSH
11608: CALL_OW 88
11612: GO 11626
// Say ( speaker , DT2a-FSol1-1 ) ;
11614: LD_VAR 0 3
11618: PPUSH
11619: LD_STRING DT2a-FSol1-1
11621: PPUSH
11622: CALL_OW 88
// Say ( Donaldson , DT2a-Don-1 ) ;
11626: LD_EXP 3
11630: PPUSH
11631: LD_STRING DT2a-Don-1
11633: PPUSH
11634: CALL_OW 88
// DialogueOff ;
11638: CALL_OW 7
// end ;
11642: PPOPN 3
11644: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
11645: LD_INT 1
11647: PPUSH
11648: LD_INT 45
11650: PPUSH
11651: LD_INT 74
11653: PPUSH
11654: CALL_OW 293
11658: IFFALSE 11835
11660: GO 11662
11662: DISABLE
// begin DialogueOn ;
11663: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
11667: LD_INT 36
11669: PPUSH
11670: LD_INT 55
11672: PPUSH
11673: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
11677: LD_INT 22
11679: PUSH
11680: LD_INT 1
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: PUSH
11687: LD_INT 23
11689: PUSH
11690: LD_INT 1
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: PUSH
11697: LD_INT 26
11699: PUSH
11700: LD_INT 1
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: PUSH
11707: LD_INT 2
11709: PUSH
11710: LD_INT 25
11712: PUSH
11713: LD_INT 1
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: PUSH
11720: LD_INT 25
11722: PUSH
11723: LD_INT 2
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: PUSH
11730: LD_INT 25
11732: PUSH
11733: LD_INT 3
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: LD_INT 25
11742: PUSH
11743: LD_INT 4
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: PUSH
11750: LD_INT 25
11752: PUSH
11753: LD_INT 5
11755: PUSH
11756: EMPTY
11757: LIST
11758: LIST
11759: PUSH
11760: LD_INT 25
11762: PUSH
11763: LD_INT 8
11765: PUSH
11766: EMPTY
11767: LIST
11768: LIST
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: PPUSH
11785: CALL_OW 69
11789: PPUSH
11790: LD_STRING D5-Sol1-1
11792: PPUSH
11793: LD_STRING D5-FSol1-
11795: PPUSH
11796: CALL 13095 0 3
// if warWithLegion and IsOk ( Donaldson ) then
11800: LD_EXP 23
11804: IFFALSE 11817
11806: PUSH
11807: LD_EXP 3
11811: PPUSH
11812: CALL_OW 302
11816: AND
11817: IFFALSE 11831
// Say ( Donaldson , D5-Don-1 ) ;
11819: LD_EXP 3
11823: PPUSH
11824: LD_STRING D5-Don-1
11826: PPUSH
11827: CALL_OW 88
// DialogueOff ;
11831: CALL_OW 7
// end ;
11835: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
11836: LD_INT 1
11838: PPUSH
11839: LD_INT 10
11841: PPUSH
11842: CALL_OW 292
11846: IFTRUE 11860
11848: PUSH
11849: LD_INT 1
11851: PPUSH
11852: LD_INT 137
11854: PPUSH
11855: CALL_OW 292
11859: OR
11860: IFFALSE 12015
11862: GO 11864
11864: DISABLE
// begin DialogueOn ;
11865: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
11869: LD_INT 22
11871: PUSH
11872: LD_INT 1
11874: PUSH
11875: EMPTY
11876: LIST
11877: LIST
11878: PUSH
11879: LD_INT 23
11881: PUSH
11882: LD_INT 1
11884: PUSH
11885: EMPTY
11886: LIST
11887: LIST
11888: PUSH
11889: LD_INT 26
11891: PUSH
11892: LD_INT 1
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PUSH
11899: LD_INT 2
11901: PUSH
11902: LD_INT 25
11904: PUSH
11905: LD_INT 1
11907: PUSH
11908: EMPTY
11909: LIST
11910: LIST
11911: PUSH
11912: LD_INT 25
11914: PUSH
11915: LD_INT 2
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: PUSH
11922: LD_INT 25
11924: PUSH
11925: LD_INT 3
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: PUSH
11932: LD_INT 25
11934: PUSH
11935: LD_INT 4
11937: PUSH
11938: EMPTY
11939: LIST
11940: LIST
11941: PUSH
11942: LD_INT 25
11944: PUSH
11945: LD_INT 5
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: PUSH
11952: LD_INT 25
11954: PUSH
11955: LD_INT 8
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: PUSH
11962: EMPTY
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: PPUSH
11977: CALL_OW 69
11981: PPUSH
11982: LD_STRING DT3-Sol1-1
11984: PPUSH
11985: LD_STRING DT3-FSol1-1
11987: PPUSH
11988: CALL 13095 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11992: LD_EXP 1
11996: PPUSH
11997: LD_STRING DT3-JMM-1
11999: PPUSH
12000: CALL_OW 88
// DialogueOff ;
12004: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
12008: LD_STRING M2
12010: PPUSH
12011: CALL_OW 337
// end ;
12015: END
// every 0 0$1 trigger ruEscape = 0 and ( FilterUnitsInArea ( RuEastBase , [ f_side , 1 ] ) or FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_not , [ f_lives , 800 ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ) or GetLives ( rutp ) < 900 do
12016: LD_EXP 35
12020: PUSH
12021: LD_INT 0
12023: EQUAL
12024: IFFALSE 12105
12026: PUSH
12027: LD_INT 10
12029: PPUSH
12030: LD_INT 22
12032: PUSH
12033: LD_INT 1
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: PPUSH
12040: CALL_OW 70
12044: IFTRUE 12104
12046: PUSH
12047: LD_INT 10
12049: PPUSH
12050: LD_INT 22
12052: PUSH
12053: LD_INT 3
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: PUSH
12060: LD_INT 3
12062: PUSH
12063: LD_INT 24
12065: PUSH
12066: LD_INT 800
12068: PUSH
12069: EMPTY
12070: LIST
12071: LIST
12072: PUSH
12073: EMPTY
12074: LIST
12075: LIST
12076: PUSH
12077: LD_INT 21
12079: PUSH
12080: LD_INT 2
12082: PUSH
12083: EMPTY
12084: LIST
12085: LIST
12086: PUSH
12087: LD_INT 58
12089: PUSH
12090: EMPTY
12091: LIST
12092: PUSH
12093: EMPTY
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: PPUSH
12099: CALL_OW 70
12103: OR
12104: AND
12105: IFTRUE 12120
12107: PUSH
12108: LD_INT 137
12110: PPUSH
12111: CALL_OW 256
12115: PUSH
12116: LD_INT 900
12118: LESS
12119: OR
12120: IFFALSE 12133
12122: GO 12124
12124: DISABLE
// ruEscape := 1 ;
12125: LD_ADDR_EXP 35
12129: PUSH
12130: LD_INT 1
12132: ST_TO_ADDR
12133: END
// every 0 0$3 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or ruEscape = 1 do var i , unit , tmp ;
12134: LD_INT 3
12136: PPUSH
12137: CALL_OW 303
12141: IFTRUE 12152
12143: PUSH
12144: LD_INT 4
12146: PPUSH
12147: CALL_OW 303
12151: OR
12152: IFTRUE 12164
12154: PUSH
12155: LD_EXP 35
12159: PUSH
12160: LD_INT 1
12162: EQUAL
12163: OR
12164: IFFALSE 12759
12166: GO 12168
12168: DISABLE
12169: LD_INT 0
12171: PPUSH
12172: PPUSH
12173: PPUSH
// begin ruAI := 0 ;
12174: LD_ADDR_EXP 34
12178: PUSH
12179: LD_INT 0
12181: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
12182: LD_EXP 27
12186: PPUSH
12187: CALL_OW 122
// wait ( 0 0$1 ) ;
12191: LD_INT 35
12193: PPUSH
12194: CALL_OW 67
// DialogueOn ;
12198: CALL_OW 6
// PlaceSeeing ( 75 , 21 , 1 , 12 ) ;
12202: LD_INT 75
12204: PPUSH
12205: LD_INT 21
12207: PPUSH
12208: LD_INT 1
12210: PPUSH
12211: LD_INT 12
12213: PPUSH
12214: CALL_OW 330
// CenterNowOnXY ( 75 , 21 ) ;
12218: LD_INT 75
12220: PPUSH
12221: LD_INT 21
12223: PPUSH
12224: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
12228: LD_INT 10
12230: PPUSH
12231: CALL_OW 68
// Say ( JMM , D6-JMM-1 ) ;
12235: LD_EXP 1
12239: PPUSH
12240: LD_STRING D6-JMM-1
12242: PPUSH
12243: CALL_OW 88
// RemoveSeeing ( 75 , 21 , 1 ) ;
12247: LD_INT 75
12249: PPUSH
12250: LD_INT 21
12252: PPUSH
12253: LD_INT 1
12255: PPUSH
12256: CALL_OW 331
// DialogueOff ;
12260: CALL_OW 7
// for i in RuScientists do
12264: LD_ADDR_VAR 0 1
12268: PUSH
12269: LD_EXP 27
12273: PUSH
12274: FOR_IN
12275: IFFALSE 12311
// begin SetSide ( i , 6 ) ;
12277: LD_VAR 0 1
12281: PPUSH
12282: LD_INT 6
12284: PPUSH
12285: CALL_OW 235
// SetTag ( i , rand ( 1 , 3 ) ) ;
12289: LD_VAR 0 1
12293: PPUSH
12294: LD_INT 1
12296: PPUSH
12297: LD_INT 3
12299: PPUSH
12300: CALL_OW 12
12304: PPUSH
12305: CALL_OW 109
// end ;
12309: GO 12274
12311: POP
12312: POP
// repeat wait ( 0 0$1 ) ;
12313: LD_INT 35
12315: PPUSH
12316: CALL_OW 67
// for i in RuScientists do
12320: LD_ADDR_VAR 0 1
12324: PUSH
12325: LD_EXP 27
12329: PUSH
12330: FOR_IN
12331: IFFALSE 12750
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , i , 10 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
12333: LD_ADDR_VAR 0 3
12337: PUSH
12338: LD_INT 22
12340: PUSH
12341: LD_INT 3
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: PUSH
12348: LD_INT 91
12350: PUSH
12351: LD_VAR 0 1
12355: PUSH
12356: LD_INT 10
12358: PUSH
12359: EMPTY
12360: LIST
12361: LIST
12362: LIST
12363: PUSH
12364: LD_INT 21
12366: PUSH
12367: LD_INT 2
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: PUSH
12374: LD_INT 58
12376: PUSH
12377: EMPTY
12378: LIST
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: PPUSH
12386: CALL_OW 69
12390: ST_TO_ADDR
// if tmp and not IsInUnit ( i ) then
12391: LD_VAR 0 3
12395: IFFALSE 12409
12397: PUSH
12398: LD_VAR 0 1
12402: PPUSH
12403: CALL_OW 310
12407: NOT
12408: AND
12409: IFFALSE 12437
// begin ComEnterUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
12411: LD_VAR 0 1
12415: PPUSH
12416: LD_VAR 0 3
12420: PPUSH
12421: LD_VAR 0 1
12425: PPUSH
12426: CALL_OW 74
12430: PPUSH
12431: CALL_OW 120
// continue ;
12435: GO 12330
// end ; if IsInUnit ( i ) then
12437: LD_VAR 0 1
12441: PPUSH
12442: CALL_OW 310
12446: IFFALSE 12465
// unit := IsInUnit ( i ) else
12448: LD_ADDR_VAR 0 2
12452: PUSH
12453: LD_VAR 0 1
12457: PPUSH
12458: CALL_OW 310
12462: ST_TO_ADDR
12463: GO 12475
// unit := i ;
12465: LD_ADDR_VAR 0 2
12469: PUSH
12470: LD_VAR 0 1
12474: ST_TO_ADDR
// case GetTag ( i ) of 1 :
12475: LD_VAR 0 1
12479: PPUSH
12480: CALL_OW 110
12484: PUSH
12485: LD_INT 1
12487: DOUBLE
12488: EQUAL
12489: IFTRUE 12493
12491: GO 12554
12493: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
12494: LD_VAR 0 2
12498: PPUSH
12499: LD_INT 137
12501: PPUSH
12502: CALL_OW 296
12506: PUSH
12507: LD_INT 13
12509: LESS
12510: IFFALSE 12521
12512: PUSH
12513: LD_INT 137
12515: PPUSH
12516: CALL_OW 302
12520: AND
12521: IFFALSE 12537
// ComEnterUnit ( unit , rutp ) else
12523: LD_VAR 0 2
12527: PPUSH
12528: LD_INT 137
12530: PPUSH
12531: CALL_OW 120
12535: GO 12552
// ComMoveXY ( unit , 16 , 28 ) ;
12537: LD_VAR 0 2
12541: PPUSH
12542: LD_INT 16
12544: PPUSH
12545: LD_INT 28
12547: PPUSH
12548: CALL_OW 111
// end ; 2 :
12552: GO 12748
12554: LD_INT 2
12556: DOUBLE
12557: EQUAL
12558: IFTRUE 12562
12560: GO 12580
12562: POP
// ComMoveXY ( unit , 97 , 2 ) ; 3 :
12563: LD_VAR 0 2
12567: PPUSH
12568: LD_INT 97
12570: PPUSH
12571: LD_INT 2
12573: PPUSH
12574: CALL_OW 111
12578: GO 12748
12580: LD_INT 3
12582: DOUBLE
12583: EQUAL
12584: IFTRUE 12588
12586: GO 12649
12588: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
12589: LD_VAR 0 2
12593: PPUSH
12594: LD_INT 137
12596: PPUSH
12597: CALL_OW 296
12601: PUSH
12602: LD_INT 13
12604: LESS
12605: IFFALSE 12616
12607: PUSH
12608: LD_INT 137
12610: PPUSH
12611: CALL_OW 302
12615: AND
12616: IFFALSE 12632
// ComEnterUnit ( unit , rutp ) else
12618: LD_VAR 0 2
12622: PPUSH
12623: LD_INT 137
12625: PPUSH
12626: CALL_OW 120
12630: GO 12647
// ComMoveXY ( unit , 128 , 155 ) ;
12632: LD_VAR 0 2
12636: PPUSH
12637: LD_INT 128
12639: PPUSH
12640: LD_INT 155
12642: PPUSH
12643: CALL_OW 111
// end ; 11 :
12647: GO 12748
12649: LD_INT 11
12651: DOUBLE
12652: EQUAL
12653: IFTRUE 12657
12655: GO 12675
12657: POP
// ComMoveXY ( unit , 16 , 28 ) ; 13 :
12658: LD_VAR 0 2
12662: PPUSH
12663: LD_INT 16
12665: PPUSH
12666: LD_INT 28
12668: PPUSH
12669: CALL_OW 111
12673: GO 12748
12675: LD_INT 13
12677: DOUBLE
12678: EQUAL
12679: IFTRUE 12683
12681: GO 12721
12683: POP
// begin if IsOk ( ruteleprt ) then
12684: LD_INT 10
12686: PPUSH
12687: CALL_OW 302
12691: IFFALSE 12707
// ComEnterUnit ( unit , ruteleprt ) else
12693: LD_VAR 0 2
12697: PPUSH
12698: LD_INT 10
12700: PPUSH
12701: CALL_OW 120
12705: GO 12719
// SetTag ( unit , 23 ) ;
12707: LD_VAR 0 2
12711: PPUSH
12712: LD_INT 23
12714: PPUSH
12715: CALL_OW 109
// end ; 23 :
12719: GO 12748
12721: LD_INT 23
12723: DOUBLE
12724: EQUAL
12725: IFTRUE 12729
12727: GO 12747
12729: POP
// ComMoveXY ( unit , 128 , 155 ) ; end ;
12730: LD_VAR 0 2
12734: PPUSH
12735: LD_INT 128
12737: PPUSH
12738: LD_INT 155
12740: PPUSH
12741: CALL_OW 111
12745: GO 12748
12747: POP
// end ;
12748: GO 12330
12750: POP
12751: POP
// until not RuScientists ;
12752: LD_EXP 27
12756: NOT
12757: IFFALSE 12313
// end ;
12759: PPOPN 3
12761: END
// every 0 0$1 trigger ruAI = 0 and RuScientists and FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do var i , unit , veh , tmp ;
12762: LD_EXP 34
12766: PUSH
12767: LD_INT 0
12769: EQUAL
12770: IFFALSE 12778
12772: PUSH
12773: LD_EXP 27
12777: AND
12778: IFFALSE 12839
12780: PUSH
12781: LD_INT 22
12783: PUSH
12784: LD_INT 6
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: PUSH
12791: LD_INT 2
12793: PUSH
12794: LD_INT 95
12796: PUSH
12797: LD_INT 13
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: PUSH
12804: LD_INT 95
12806: PUSH
12807: LD_INT 14
12809: PUSH
12810: EMPTY
12811: LIST
12812: LIST
12813: PUSH
12814: LD_INT 95
12816: PUSH
12817: LD_INT 25
12819: PUSH
12820: EMPTY
12821: LIST
12822: LIST
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: PUSH
12830: EMPTY
12831: LIST
12832: LIST
12833: PPUSH
12834: CALL_OW 69
12838: AND
12839: IFFALSE 13052
12841: GO 12843
12843: DISABLE
12844: LD_INT 0
12846: PPUSH
12847: PPUSH
12848: PPUSH
12849: PPUSH
// begin enable ;
12850: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do
12851: LD_ADDR_VAR 0 1
12855: PUSH
12856: LD_INT 22
12858: PUSH
12859: LD_INT 6
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: PUSH
12866: LD_INT 2
12868: PUSH
12869: LD_INT 95
12871: PUSH
12872: LD_INT 13
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: PUSH
12879: LD_INT 95
12881: PUSH
12882: LD_INT 14
12884: PUSH
12885: EMPTY
12886: LIST
12887: LIST
12888: PUSH
12889: LD_INT 95
12891: PUSH
12892: LD_INT 25
12894: PUSH
12895: EMPTY
12896: LIST
12897: LIST
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: PPUSH
12909: CALL_OW 69
12913: PUSH
12914: FOR_IN
12915: IFFALSE 13050
// begin if i in RuScientists then
12917: LD_VAR 0 1
12921: PUSH
12922: LD_EXP 27
12926: IN
12927: IFFALSE 12956
// begin RuScientists = RuScientists diff i ;
12929: LD_ADDR_EXP 27
12933: PUSH
12934: LD_EXP 27
12938: PUSH
12939: LD_VAR 0 1
12943: DIFF
12944: ST_TO_ADDR
// RemoveUnit ( i ) ;
12945: LD_VAR 0 1
12949: PPUSH
12950: CALL_OW 64
// continue ;
12954: GO 12914
// end ; if i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_manual ] ] ) then
12956: LD_VAR 0 1
12960: PUSH
12961: LD_INT 22
12963: PUSH
12964: LD_INT 6
12966: PUSH
12967: EMPTY
12968: LIST
12969: LIST
12970: PUSH
12971: LD_INT 33
12973: PUSH
12974: LD_INT 1
12976: PUSH
12977: EMPTY
12978: LIST
12979: LIST
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: PPUSH
12985: CALL_OW 69
12989: IN
12990: IFFALSE 13048
// begin if IsDrivenBy ( i ) in RuScientists then
12992: LD_VAR 0 1
12996: PPUSH
12997: CALL_OW 311
13001: PUSH
13002: LD_EXP 27
13006: IN
13007: IFFALSE 13025
// RuScientists = RuScientists diff i ;
13009: LD_ADDR_EXP 27
13013: PUSH
13014: LD_EXP 27
13018: PUSH
13019: LD_VAR 0 1
13023: DIFF
13024: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
13025: LD_VAR 0 1
13029: PPUSH
13030: CALL_OW 311
13034: PPUSH
13035: CALL_OW 64
// RemoveUnit ( i ) ;
13039: LD_VAR 0 1
13043: PPUSH
13044: CALL_OW 64
// end ; end ;
13048: GO 12914
13050: POP
13051: POP
// end ; end_of_file
13052: PPOPN 4
13054: END
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
13055: LD_INT 0
13057: PPUSH
13058: PPUSH
// for i in charactersList do
13059: LD_ADDR_VAR 0 4
13063: PUSH
13064: LD_VAR 0 1
13068: PUSH
13069: FOR_IN
13070: IFFALSE 13088
// SaveCharacters ( i , ident ) ;
13072: LD_VAR 0 4
13076: PPUSH
13077: LD_VAR 0 2
13081: PPUSH
13082: CALL_OW 38
13086: GO 13069
13088: POP
13089: POP
// end ;
13090: LD_VAR 0 3
13094: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
13095: LD_INT 0
13097: PPUSH
13098: PPUSH
13099: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
13100: LD_ADDR_VAR 0 1
13104: PUSH
13105: LD_VAR 0 1
13109: PUSH
13110: LD_EXP 1
13114: PUSH
13115: LD_EXP 7
13119: PUSH
13120: LD_EXP 3
13124: PUSH
13125: LD_EXP 4
13129: PUSH
13130: LD_EXP 5
13134: PUSH
13135: LD_EXP 2
13139: PUSH
13140: LD_EXP 12
13144: PUSH
13145: LD_EXP 13
13149: PUSH
13150: LD_EXP 9
13154: PUSH
13155: LD_EXP 11
13159: PUSH
13160: LD_EXP 6
13164: PUSH
13165: LD_EXP 8
13169: PUSH
13170: LD_EXP 10
13174: PUSH
13175: LD_EXP 15
13179: PUSH
13180: EMPTY
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: DIFF
13196: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
13197: LD_ADDR_VAR 0 6
13201: PUSH
13202: LD_VAR 0 1
13206: PUSH
13207: LD_INT 1
13209: PPUSH
13210: LD_VAR 0 1
13214: PPUSH
13215: CALL_OW 12
13219: ARRAY
13220: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
13221: LD_VAR 0 6
13225: PPUSH
13226: CALL_OW 258
13230: PUSH
13231: LD_INT 1
13233: EQUAL
13234: IFFALSE 13252
// Say ( speaker , dialogMID ) else
13236: LD_VAR 0 6
13240: PPUSH
13241: LD_VAR 0 2
13245: PPUSH
13246: CALL_OW 88
13250: GO 13266
// Say ( speaker , dialogFID ) ;
13252: LD_VAR 0 6
13256: PPUSH
13257: LD_VAR 0 3
13261: PPUSH
13262: CALL_OW 88
// result := speaker ;
13266: LD_ADDR_VAR 0 4
13270: PUSH
13271: LD_VAR 0 6
13275: ST_TO_ADDR
// end ;
13276: LD_VAR 0 4
13280: RET
// export function PrepareDifficulty ; var tmp ; begin
13281: LD_INT 0
13283: PPUSH
13284: PPUSH
// if Difficulty = 1 then
13285: LD_OWVAR 67
13289: PUSH
13290: LD_INT 1
13292: EQUAL
13293: IFFALSE 13313
// begin RuSolMinLevel = 6 ;
13295: LD_ADDR_EXP 29
13299: PUSH
13300: LD_INT 6
13302: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
13303: LD_ADDR_EXP 30
13307: PUSH
13308: LD_INT 8
13310: ST_TO_ADDR
// end else
13311: GO 13553
// if Difficulty = 2 then
13313: LD_OWVAR 67
13317: PUSH
13318: LD_INT 2
13320: EQUAL
13321: IFFALSE 13417
// begin RuSolMinLevel = 7 ;
13323: LD_ADDR_EXP 29
13327: PUSH
13328: LD_INT 7
13330: ST_TO_ADDR
// RuSolMaxLevel = 9 ;
13331: LD_ADDR_EXP 30
13335: PUSH
13336: LD_INT 9
13338: ST_TO_ADDR
// uc_nation = 3 ;
13339: LD_ADDR_OWVAR 21
13343: PUSH
13344: LD_INT 3
13346: ST_TO_ADDR
// uc_side = 3 ;
13347: LD_ADDR_OWVAR 20
13351: PUSH
13352: LD_INT 3
13354: ST_TO_ADDR
// bc_level = 10 ;
13355: LD_ADDR_OWVAR 43
13359: PUSH
13360: LD_INT 10
13362: ST_TO_ADDR
// bc_type = b_turret ;
13363: LD_ADDR_OWVAR 42
13367: PUSH
13368: LD_INT 33
13370: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
13371: LD_ADDR_VAR 0 2
13375: PUSH
13376: LD_INT 86
13378: PPUSH
13379: LD_INT 34
13381: PPUSH
13382: LD_INT 2
13384: PPUSH
13385: CALL_OW 47
13389: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13390: LD_VAR 0 2
13394: PPUSH
13395: LD_INT 49
13397: PPUSH
13398: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
13402: LD_INT 64
13404: PPUSH
13405: LD_INT 3
13407: PPUSH
13408: LD_INT 1
13410: PPUSH
13411: CALL_OW 322
// end else
13415: GO 13553
// begin RuSolMinLevel = 8 ;
13417: LD_ADDR_EXP 29
13421: PUSH
13422: LD_INT 8
13424: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13425: LD_ADDR_EXP 30
13429: PUSH
13430: LD_INT 10
13432: ST_TO_ADDR
// uc_nation = 3 ;
13433: LD_ADDR_OWVAR 21
13437: PUSH
13438: LD_INT 3
13440: ST_TO_ADDR
// uc_side = 3 ;
13441: LD_ADDR_OWVAR 20
13445: PUSH
13446: LD_INT 3
13448: ST_TO_ADDR
// bc_level = 10 ;
13449: LD_ADDR_OWVAR 43
13453: PUSH
13454: LD_INT 10
13456: ST_TO_ADDR
// bc_type = b_turret ;
13457: LD_ADDR_OWVAR 42
13461: PUSH
13462: LD_INT 33
13464: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
13465: LD_ADDR_VAR 0 2
13469: PUSH
13470: LD_INT 86
13472: PPUSH
13473: LD_INT 34
13475: PPUSH
13476: LD_INT 2
13478: PPUSH
13479: CALL_OW 47
13483: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13484: LD_VAR 0 2
13488: PPUSH
13489: LD_INT 49
13491: PPUSH
13492: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
13496: LD_ADDR_VAR 0 2
13500: PUSH
13501: LD_INT 93
13503: PPUSH
13504: LD_INT 31
13506: PPUSH
13507: LD_INT 2
13509: PPUSH
13510: CALL_OW 47
13514: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13515: LD_VAR 0 2
13519: PPUSH
13520: LD_INT 49
13522: PPUSH
13523: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
13527: LD_INT 64
13529: PPUSH
13530: LD_INT 3
13532: PPUSH
13533: LD_INT 1
13535: PPUSH
13536: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
13540: LD_INT 65
13542: PPUSH
13543: LD_INT 3
13545: PPUSH
13546: LD_INT 1
13548: PPUSH
13549: CALL_OW 322
// end ; end ;
13553: LD_VAR 0 1
13557: RET
// export function ShowQuery1 ; begin
13558: LD_INT 0
13560: PPUSH
// result := Query ( Q1 ) ;
13561: LD_ADDR_VAR 0 1
13565: PUSH
13566: LD_STRING Q1
13568: PPUSH
13569: CALL_OW 97
13573: ST_TO_ADDR
// end ;
13574: LD_VAR 0 1
13578: RET
// export function ShowQuery2 ; begin
13579: LD_INT 0
13581: PPUSH
// result := Query ( Q1a ) ;
13582: LD_ADDR_VAR 0 1
13586: PUSH
13587: LD_STRING Q1a
13589: PPUSH
13590: CALL_OW 97
13594: ST_TO_ADDR
// end ;
13595: LD_VAR 0 1
13599: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
13600: LD_INT 0
13602: PPUSH
13603: PPUSH
13604: PPUSH
13605: PPUSH
// for i = 1 to count do
13606: LD_ADDR_VAR 0 8
13610: PUSH
13611: DOUBLE
13612: LD_INT 1
13614: DEC
13615: ST_TO_ADDR
13616: LD_VAR 0 6
13620: PUSH
13621: FOR_TO
13622: IFFALSE 13703
// begin uc_side = side ;
13624: LD_ADDR_OWVAR 20
13628: PUSH
13629: LD_VAR 0 1
13633: ST_TO_ADDR
// uc_nation = nation ;
13634: LD_ADDR_OWVAR 21
13638: PUSH
13639: LD_VAR 0 2
13643: ST_TO_ADDR
// hc_gallery =  ;
13644: LD_ADDR_OWVAR 33
13648: PUSH
13649: LD_STRING 
13651: ST_TO_ADDR
// hc_name =  ;
13652: LD_ADDR_OWVAR 26
13656: PUSH
13657: LD_STRING 
13659: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
13660: LD_INT 0
13662: PPUSH
13663: LD_VAR 0 5
13667: PPUSH
13668: LD_VAR 0 4
13672: PPUSH
13673: CALL_OW 380
// un = CreateHuman ;
13677: LD_ADDR_VAR 0 10
13681: PUSH
13682: CALL_OW 44
13686: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
13687: LD_VAR 0 10
13691: PPUSH
13692: LD_VAR 0 3
13696: PPUSH
13697: CALL_OW 52
// end ;
13701: GO 13621
13703: POP
13704: POP
// end ;
13705: LD_VAR 0 7
13709: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , list ; begin
13710: LD_INT 0
13712: PPUSH
13713: PPUSH
13714: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
13715: LD_ADDR_VAR 0 6
13719: PUSH
13720: LD_INT 48
13722: PUSH
13723: LD_INT 49
13725: PUSH
13726: LD_INT 50
13728: PUSH
13729: LD_INT 20
13731: PUSH
13732: LD_INT 1
13734: PUSH
13735: LD_INT 51
13737: PUSH
13738: LD_INT 52
13740: PUSH
13741: LD_INT 69
13743: PUSH
13744: LD_INT 39
13746: PUSH
13747: LD_INT 34
13749: PUSH
13750: LD_INT 40
13752: PUSH
13753: LD_INT 53
13755: PUSH
13756: LD_INT 71
13758: PUSH
13759: LD_INT 57
13761: PUSH
13762: LD_INT 58
13764: PUSH
13765: LD_INT 44
13767: PUSH
13768: LD_INT 32
13770: PUSH
13771: LD_INT 27
13773: PUSH
13774: LD_INT 23
13776: PUSH
13777: LD_INT 33
13779: PUSH
13780: LD_INT 59
13782: PUSH
13783: LD_INT 54
13785: PUSH
13786: LD_INT 55
13788: PUSH
13789: LD_INT 56
13791: PUSH
13792: LD_INT 63
13794: PUSH
13795: LD_INT 64
13797: PUSH
13798: LD_INT 65
13800: PUSH
13801: LD_INT 30
13803: PUSH
13804: LD_INT 31
13806: PUSH
13807: LD_INT 21
13809: PUSH
13810: LD_INT 22
13812: PUSH
13813: LD_INT 25
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: LIST
13845: LIST
13846: LIST
13847: LIST
13848: LIST
13849: ST_TO_ADDR
// for i := 1 to list do
13850: LD_ADDR_VAR 0 5
13854: PUSH
13855: DOUBLE
13856: LD_INT 1
13858: DEC
13859: ST_TO_ADDR
13860: LD_VAR 0 6
13864: PUSH
13865: FOR_TO
13866: IFFALSE 13940
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
13868: LD_VAR 0 6
13872: PUSH
13873: LD_VAR 0 5
13877: ARRAY
13878: PPUSH
13879: LD_VAR 0 1
13883: PPUSH
13884: CALL_OW 321
13888: PUSH
13889: LD_INT 1
13891: EQUAL
13892: IFFALSE 13916
13894: PUSH
13895: LD_VAR 0 6
13899: PUSH
13900: LD_VAR 0 5
13904: ARRAY
13905: PPUSH
13906: LD_VAR 0 3
13910: PPUSH
13911: CALL_OW 482
13915: AND
13916: IFFALSE 13938
// AddComResearch ( lab , list [ i ] ) ;
13918: LD_VAR 0 2
13922: PPUSH
13923: LD_VAR 0 6
13927: PUSH
13928: LD_VAR 0 5
13932: ARRAY
13933: PPUSH
13934: CALL_OW 184
13938: GO 13865
13940: POP
13941: POP
// end ;
13942: LD_VAR 0 4
13946: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
13947: LD_INT 0
13949: PPUSH
13950: PPUSH
13951: PPUSH
13952: PPUSH
13953: PPUSH
13954: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
13955: LD_ADDR_VAR 0 8
13959: PUSH
13960: LD_VAR 0 2
13964: PPUSH
13965: CALL_OW 313
13969: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13970: LD_ADDR_VAR 0 9
13974: PUSH
13975: LD_VAR 0 3
13979: PPUSH
13980: LD_INT 22
13982: PUSH
13983: LD_VAR 0 1
13987: PUSH
13988: EMPTY
13989: LIST
13990: LIST
13991: PUSH
13992: LD_INT 25
13994: PUSH
13995: LD_INT 2
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: PUSH
14002: LD_INT 24
14004: PUSH
14005: LD_INT 750
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: PUSH
14012: LD_INT 3
14014: PUSH
14015: LD_INT 54
14017: PUSH
14018: EMPTY
14019: LIST
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: PPUSH
14031: CALL_OW 70
14035: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14036: LD_ADDR_VAR 0 6
14040: PUSH
14041: LD_VAR 0 3
14045: PPUSH
14046: LD_INT 22
14048: PUSH
14049: LD_VAR 0 1
14053: PUSH
14054: EMPTY
14055: LIST
14056: LIST
14057: PUSH
14058: LD_INT 21
14060: PUSH
14061: LD_INT 3
14063: PUSH
14064: EMPTY
14065: LIST
14066: LIST
14067: PUSH
14068: LD_INT 3
14070: PUSH
14071: LD_INT 24
14073: PUSH
14074: LD_INT 1000
14076: PUSH
14077: EMPTY
14078: LIST
14079: LIST
14080: PUSH
14081: EMPTY
14082: LIST
14083: LIST
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: LIST
14089: PUSH
14090: EMPTY
14091: LIST
14092: PPUSH
14093: CALL_OW 70
14097: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
14098: LD_VAR 0 6
14102: NOT
14103: IFFALSE 14149
14105: PUSH
14106: LD_INT 22
14108: PUSH
14109: LD_VAR 0 1
14113: PUSH
14114: EMPTY
14115: LIST
14116: LIST
14117: PUSH
14118: LD_INT 25
14120: PUSH
14121: LD_INT 2
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: PUSH
14128: LD_INT 24
14130: PUSH
14131: LD_INT 250
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: PUSH
14138: EMPTY
14139: LIST
14140: LIST
14141: LIST
14142: PPUSH
14143: CALL_OW 69
14147: NOT
14148: AND
14149: IFFALSE 14153
// exit ;
14151: GO 14323
// if buildingsList and engineerOkInside then
14153: LD_VAR 0 6
14157: IFFALSE 14165
14159: PUSH
14160: LD_VAR 0 8
14164: AND
14165: IFFALSE 14176
// ComExitBuilding ( engineerOkInside ) ;
14167: LD_VAR 0 8
14171: PPUSH
14172: CALL_OW 122
// if buildingsList and engineerOkOutside then
14176: LD_VAR 0 6
14180: IFFALSE 14188
14182: PUSH
14183: LD_VAR 0 9
14187: AND
14188: IFFALSE 14208
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
14190: LD_VAR 0 9
14194: PPUSH
14195: LD_VAR 0 6
14199: PUSH
14200: LD_INT 1
14202: ARRAY
14203: PPUSH
14204: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
14208: LD_VAR 0 6
14212: PUSH
14213: LD_INT 0
14215: EQUAL
14216: IFFALSE 14228
14218: PUSH
14219: LD_VAR 0 4
14223: PUSH
14224: LD_INT 0
14226: EQUAL
14227: AND
14228: IFFALSE 14236
14230: PUSH
14231: LD_VAR 0 9
14235: AND
14236: IFFALSE 14252
// ComEnterUnit ( engineerOkOutside , depot ) ;
14238: LD_VAR 0 9
14242: PPUSH
14243: LD_VAR 0 2
14247: PPUSH
14248: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
14252: LD_VAR 0 9
14256: IFFALSE 14268
14258: PUSH
14259: LD_VAR 0 6
14263: PUSH
14264: LD_INT 0
14266: EQUAL
14267: AND
14268: IFFALSE 14276
14270: PUSH
14271: LD_VAR 0 4
14275: AND
14276: IFFALSE 14323
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
14278: LD_VAR 0 9
14282: PPUSH
14283: LD_VAR 0 4
14287: PUSH
14288: LD_INT 1
14290: ARRAY
14291: PPUSH
14292: LD_VAR 0 4
14296: PUSH
14297: LD_INT 2
14299: ARRAY
14300: PPUSH
14301: LD_VAR 0 4
14305: PUSH
14306: LD_INT 3
14308: ARRAY
14309: PPUSH
14310: LD_VAR 0 4
14314: PUSH
14315: LD_INT 4
14317: ARRAY
14318: PPUSH
14319: CALL_OW 145
// end ;
14323: LD_VAR 0 5
14327: RET
// export function HealUnitInBase ( side , healArea , baseArea , buildings ) ; var sciList , sciListOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
14328: LD_INT 0
14330: PPUSH
14331: PPUSH
14332: PPUSH
14333: PPUSH
14334: PPUSH
14335: PPUSH
14336: PPUSH
14337: PPUSH
14338: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
14339: LD_ADDR_VAR 0 6
14343: PUSH
14344: LD_INT 22
14346: PUSH
14347: LD_VAR 0 1
14351: PUSH
14352: EMPTY
14353: LIST
14354: LIST
14355: PUSH
14356: LD_INT 25
14358: PUSH
14359: LD_INT 4
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: PUSH
14366: LD_INT 24
14368: PUSH
14369: LD_INT 251
14371: PUSH
14372: EMPTY
14373: LIST
14374: LIST
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: LIST
14380: PPUSH
14381: CALL_OW 69
14385: PUSH
14386: LD_EXP 27
14390: PUSH
14391: EMPTY
14392: LIST
14393: DIFF
14394: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_outside ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
14395: LD_ADDR_VAR 0 7
14399: PUSH
14400: LD_VAR 0 3
14404: PPUSH
14405: LD_INT 22
14407: PUSH
14408: LD_VAR 0 1
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: PUSH
14417: LD_INT 56
14419: PUSH
14420: EMPTY
14421: LIST
14422: PUSH
14423: LD_INT 25
14425: PUSH
14426: LD_INT 4
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: PUSH
14433: LD_INT 50
14435: PUSH
14436: EMPTY
14437: LIST
14438: PUSH
14439: EMPTY
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: PPUSH
14445: CALL_OW 70
14449: PUSH
14450: LD_EXP 27
14454: PUSH
14455: EMPTY
14456: LIST
14457: DIFF
14458: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
14459: LD_ADDR_VAR 0 10
14463: PUSH
14464: LD_VAR 0 3
14468: PPUSH
14469: LD_INT 22
14471: PUSH
14472: LD_VAR 0 1
14476: PUSH
14477: EMPTY
14478: LIST
14479: LIST
14480: PUSH
14481: LD_INT 21
14483: PUSH
14484: LD_INT 1
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: PUSH
14491: LD_INT 3
14493: PUSH
14494: LD_INT 24
14496: PUSH
14497: LD_INT 750
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: PUSH
14504: EMPTY
14505: LIST
14506: LIST
14507: PUSH
14508: EMPTY
14509: LIST
14510: LIST
14511: LIST
14512: PPUSH
14513: CALL_OW 70
14517: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
14518: LD_ADDR_VAR 0 11
14522: PUSH
14523: LD_VAR 0 2
14527: PPUSH
14528: LD_INT 22
14530: PUSH
14531: LD_VAR 0 1
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: PUSH
14540: LD_INT 21
14542: PUSH
14543: LD_INT 1
14545: PUSH
14546: EMPTY
14547: LIST
14548: LIST
14549: PUSH
14550: LD_INT 3
14552: PUSH
14553: LD_INT 24
14555: PUSH
14556: LD_INT 1000
14558: PUSH
14559: EMPTY
14560: LIST
14561: LIST
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: LIST
14571: PPUSH
14572: CALL_OW 70
14576: ST_TO_ADDR
// if damageUnits and sciList then
14577: LD_VAR 0 10
14581: IFFALSE 14589
14583: PUSH
14584: LD_VAR 0 6
14588: AND
14589: IFFALSE 14605
// ComMoveToArea ( damageUnits , healArea ) ;
14591: LD_VAR 0 10
14595: PPUSH
14596: LD_VAR 0 2
14600: PPUSH
14601: CALL_OW 113
// if unitsToHeal and sciList and sciListOutside = 0 then
14605: LD_VAR 0 11
14609: IFFALSE 14617
14611: PUSH
14612: LD_VAR 0 6
14616: AND
14617: IFFALSE 14629
14619: PUSH
14620: LD_VAR 0 7
14624: PUSH
14625: LD_INT 0
14627: EQUAL
14628: AND
14629: IFFALSE 14675
// for i in buildings do
14631: LD_ADDR_VAR 0 8
14635: PUSH
14636: LD_VAR 0 4
14640: PUSH
14641: FOR_IN
14642: IFFALSE 14673
// begin if UnitsInside ( i ) then
14644: LD_VAR 0 8
14648: PPUSH
14649: CALL_OW 313
14653: IFFALSE 14671
// begin ComExitBuilding ( UnitsInside ( i ) ) ;
14655: LD_VAR 0 8
14659: PPUSH
14660: CALL_OW 313
14664: PPUSH
14665: CALL_OW 122
// break ;
14669: GO 14673
// end ; end ;
14671: GO 14641
14673: POP
14674: POP
// if unitsToHeal and sciListOutside then
14675: LD_VAR 0 11
14679: IFFALSE 14687
14681: PUSH
14682: LD_VAR 0 7
14686: AND
14687: IFFALSE 14707
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
14689: LD_VAR 0 7
14693: PPUSH
14694: LD_VAR 0 11
14698: PUSH
14699: LD_INT 1
14701: ARRAY
14702: PPUSH
14703: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
14707: LD_VAR 0 10
14711: PUSH
14712: LD_INT 0
14714: EQUAL
14715: IFFALSE 14727
14717: PUSH
14718: LD_VAR 0 11
14722: PUSH
14723: LD_INT 0
14725: EQUAL
14726: AND
14727: IFFALSE 14735
14729: PUSH
14730: LD_VAR 0 7
14734: AND
14735: IFFALSE 14803
// begin tmp := buildings ;
14737: LD_ADDR_VAR 0 12
14741: PUSH
14742: LD_VAR 0 4
14746: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
14747: LD_ADDR_VAR 0 13
14751: PUSH
14752: LD_INT 1
14754: PPUSH
14755: LD_VAR 0 12
14759: PPUSH
14760: CALL_OW 12
14764: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
14765: LD_VAR 0 7
14769: PPUSH
14770: LD_INT 3
14772: PUSH
14773: LD_INT 60
14775: PUSH
14776: EMPTY
14777: LIST
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: PPUSH
14783: CALL_OW 72
14787: PPUSH
14788: LD_VAR 0 12
14792: PUSH
14793: LD_VAR 0 13
14797: ARRAY
14798: PPUSH
14799: CALL_OW 120
// end ; end ;
14803: LD_VAR 0 5
14807: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
14808: LD_INT 0
14810: PPUSH
14811: PPUSH
14812: PPUSH
14813: PPUSH
14814: PPUSH
14815: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
14816: LD_ADDR_VAR 0 7
14820: PUSH
14821: LD_VAR 0 2
14825: PPUSH
14826: LD_INT 22
14828: PUSH
14829: LD_VAR 0 1
14833: PUSH
14834: EMPTY
14835: LIST
14836: LIST
14837: PUSH
14838: LD_INT 21
14840: PUSH
14841: LD_INT 2
14843: PUSH
14844: EMPTY
14845: LIST
14846: LIST
14847: PUSH
14848: LD_INT 34
14850: PUSH
14851: LD_INT 52
14853: PUSH
14854: EMPTY
14855: LIST
14856: LIST
14857: PUSH
14858: EMPTY
14859: LIST
14860: LIST
14861: LIST
14862: PPUSH
14863: CALL_OW 70
14867: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14868: LD_ADDR_VAR 0 8
14872: PUSH
14873: LD_VAR 0 2
14877: PPUSH
14878: LD_INT 22
14880: PUSH
14881: LD_VAR 0 1
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: PUSH
14890: LD_INT 21
14892: PUSH
14893: LD_INT 3
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: PUSH
14900: LD_INT 3
14902: PUSH
14903: LD_INT 24
14905: PUSH
14906: LD_INT 1000
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: PUSH
14917: EMPTY
14918: LIST
14919: LIST
14920: LIST
14921: PUSH
14922: EMPTY
14923: LIST
14924: PPUSH
14925: CALL_OW 70
14929: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
14930: LD_VAR 0 8
14934: PUSH
14935: LD_INT 0
14937: GREATER
14938: IFFALSE 14965
14940: PUSH
14941: LD_VAR 0 7
14945: PPUSH
14946: LD_INT 24
14948: PUSH
14949: LD_INT 750
14951: PUSH
14952: EMPTY
14953: LIST
14954: LIST
14955: PPUSH
14956: CALL_OW 72
14960: PUSH
14961: LD_INT 0
14963: GREATER
14964: AND
14965: IFFALSE 14985
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
14967: LD_VAR 0 7
14971: PPUSH
14972: LD_VAR 0 8
14976: PUSH
14977: LD_INT 1
14979: ARRAY
14980: PPUSH
14981: CALL_OW 130
// end ;
14985: LD_VAR 0 3
14989: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14990: LD_INT 0
14992: PPUSH
14993: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14994: LD_INT 22
14996: PUSH
14997: LD_VAR 0 1
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: PUSH
15006: LD_INT 21
15008: PUSH
15009: LD_INT 2
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: PUSH
15016: EMPTY
15017: LIST
15018: LIST
15019: PPUSH
15020: CALL_OW 69
15024: PUSH
15025: LD_INT 18
15027: PPUSH
15028: LD_INT 22
15030: PUSH
15031: LD_VAR 0 1
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: PUSH
15040: LD_INT 21
15042: PUSH
15043: LD_INT 2
15045: PUSH
15046: EMPTY
15047: LIST
15048: LIST
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: PPUSH
15054: CALL_OW 70
15058: PUSH
15059: LD_VAR 0 3
15063: LESSEQUAL
15064: DIFF
15065: IFFALSE 15132
// for i := 1 to vehCount do
15067: LD_ADDR_VAR 0 9
15071: PUSH
15072: DOUBLE
15073: LD_INT 1
15075: DEC
15076: ST_TO_ADDR
15077: LD_VAR 0 3
15081: PUSH
15082: FOR_TO
15083: IFFALSE 15130
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
15085: LD_VAR 0 2
15089: PPUSH
15090: LD_VAR 0 7
15094: PPUSH
15095: LD_VAR 0 5
15099: PPUSH
15100: LD_VAR 0 6
15104: PPUSH
15105: LD_VAR 0 4
15109: PUSH
15110: LD_INT 1
15112: PPUSH
15113: LD_VAR 0 4
15117: PPUSH
15118: CALL_OW 12
15122: ARRAY
15123: PPUSH
15124: CALL_OW 185
15128: GO 15082
15130: POP
15131: POP
// end ;
15132: LD_VAR 0 8
15136: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
15137: LD_INT 0
15139: PPUSH
15140: PPUSH
15141: PPUSH
15142: PPUSH
15143: PPUSH
15144: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
15145: LD_ADDR_VAR 0 6
15149: PUSH
15150: LD_INT 22
15152: PUSH
15153: LD_VAR 0 1
15157: PUSH
15158: EMPTY
15159: LIST
15160: LIST
15161: PUSH
15162: LD_INT 25
15164: PUSH
15165: LD_INT 9
15167: PUSH
15168: EMPTY
15169: LIST
15170: LIST
15171: PUSH
15172: EMPTY
15173: LIST
15174: LIST
15175: PPUSH
15176: CALL_OW 69
15180: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15181: LD_ADDR_VAR 0 7
15185: PUSH
15186: LD_INT 81
15188: PUSH
15189: LD_VAR 0 1
15193: PUSH
15194: EMPTY
15195: LIST
15196: LIST
15197: PUSH
15198: LD_INT 3
15200: PUSH
15201: LD_INT 21
15203: PUSH
15204: LD_INT 3
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: PPUSH
15219: CALL_OW 69
15223: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
15224: LD_ADDR_VAR 0 4
15228: PUSH
15229: LD_INT 1
15231: PPUSH
15232: LD_INT 3
15234: PPUSH
15235: CALL_OW 12
15239: ST_TO_ADDR
// for i := 1 to list do
15240: LD_ADDR_VAR 0 5
15244: PUSH
15245: DOUBLE
15246: LD_INT 1
15248: DEC
15249: ST_TO_ADDR
15250: LD_VAR 0 6
15254: PUSH
15255: FOR_TO
15256: IFFALSE 15458
// for ta in filter do
15258: LD_ADDR_VAR 0 3
15262: PUSH
15263: LD_VAR 0 7
15267: PUSH
15268: FOR_IN
15269: IFFALSE 15454
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
15271: LD_VAR 0 6
15275: PUSH
15276: LD_VAR 0 5
15280: ARRAY
15281: PPUSH
15282: LD_VAR 0 3
15286: PPUSH
15287: CALL_OW 296
15291: PUSH
15292: LD_INT 15
15294: LESSEQUAL
15295: IFFALSE 15452
// begin case c of 1 :
15297: LD_VAR 0 4
15301: PUSH
15302: LD_INT 1
15304: DOUBLE
15305: EQUAL
15306: IFTRUE 15310
15308: GO 15348
15310: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
15311: LD_VAR 0 6
15315: PUSH
15316: LD_VAR 0 5
15320: ARRAY
15321: PPUSH
15322: LD_VAR 0 3
15326: PPUSH
15327: CALL_OW 250
15331: PPUSH
15332: LD_VAR 0 3
15336: PPUSH
15337: CALL_OW 251
15341: PPUSH
15342: CALL_OW 154
15346: GO 15452
15348: LD_INT 2
15350: DOUBLE
15351: EQUAL
15352: IFTRUE 15356
15354: GO 15420
15356: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
15357: LD_VAR 0 6
15361: PUSH
15362: LD_VAR 0 5
15366: ARRAY
15367: PPUSH
15368: LD_VAR 0 3
15372: PPUSH
15373: CALL_OW 250
15377: PUSH
15378: LD_INT 1
15380: NEG
15381: PPUSH
15382: LD_INT 1
15384: PPUSH
15385: CALL_OW 12
15389: PLUS
15390: PPUSH
15391: LD_VAR 0 3
15395: PPUSH
15396: CALL_OW 251
15400: PUSH
15401: LD_INT 1
15403: NEG
15404: PPUSH
15405: LD_INT 1
15407: PPUSH
15408: CALL_OW 12
15412: PLUS
15413: PPUSH
15414: CALL_OW 153
15418: GO 15452
15420: LD_INT 3
15422: DOUBLE
15423: EQUAL
15424: IFTRUE 15428
15426: GO 15451
15428: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15429: LD_VAR 0 6
15433: PUSH
15434: LD_VAR 0 5
15438: ARRAY
15439: PPUSH
15440: LD_VAR 0 3
15444: PPUSH
15445: CALL_OW 115
15449: GO 15452
15451: POP
// end ; end ;
15452: GO 15268
15454: POP
15455: POP
15456: GO 15255
15458: POP
15459: POP
// end ;
15460: LD_VAR 0 2
15464: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
15465: LD_INT 0
15467: PPUSH
15468: PPUSH
15469: PPUSH
15470: PPUSH
// r := 100 ;
15471: LD_ADDR_VAR 0 5
15475: PUSH
15476: LD_INT 100
15478: ST_TO_ADDR
// x := 0 ;
15479: LD_ADDR_VAR 0 6
15483: PUSH
15484: LD_INT 0
15486: ST_TO_ADDR
// while ( x < n ) do
15487: LD_VAR 0 6
15491: PUSH
15492: LD_VAR 0 2
15496: LESS
15497: IFFALSE 15760
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
15499: LD_ADDR_VAR 0 4
15503: PUSH
15504: DOUBLE
15505: LD_INT 1
15507: DEC
15508: ST_TO_ADDR
15509: LD_VAR 0 1
15513: PPUSH
15514: LD_INT 0
15516: PPUSH
15517: CALL_OW 517
15521: PUSH
15522: LD_INT 1
15524: ARRAY
15525: PUSH
15526: FOR_TO
15527: IFFALSE 15756
// begin if r > 50 then
15529: LD_VAR 0 5
15533: PUSH
15534: LD_INT 50
15536: GREATER
15537: IFFALSE 15740
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
15539: LD_VAR 0 1
15543: PPUSH
15544: LD_INT 0
15546: PPUSH
15547: CALL_OW 517
15551: PUSH
15552: LD_INT 1
15554: ARRAY
15555: PUSH
15556: LD_VAR 0 4
15560: ARRAY
15561: PPUSH
15562: LD_VAR 0 1
15566: PPUSH
15567: LD_INT 0
15569: PPUSH
15570: CALL_OW 517
15574: PUSH
15575: LD_INT 2
15577: ARRAY
15578: PUSH
15579: LD_VAR 0 4
15583: ARRAY
15584: PPUSH
15585: CALL_OW 458
15589: NOT
15590: IFFALSE 15738
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
15592: LD_VAR 0 1
15596: PPUSH
15597: LD_INT 0
15599: PPUSH
15600: CALL_OW 517
15604: PUSH
15605: LD_INT 1
15607: ARRAY
15608: PUSH
15609: LD_VAR 0 4
15613: ARRAY
15614: PPUSH
15615: LD_VAR 0 1
15619: PPUSH
15620: LD_INT 0
15622: PPUSH
15623: CALL_OW 517
15627: PUSH
15628: LD_INT 2
15630: ARRAY
15631: PUSH
15632: LD_VAR 0 4
15636: ARRAY
15637: PPUSH
15638: LD_INT 8
15640: PPUSH
15641: LD_INT 0
15643: PPUSH
15644: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
15648: LD_ADDR_EXP 37
15652: PUSH
15653: LD_EXP 37
15657: PPUSH
15658: LD_INT 1
15660: PPUSH
15661: LD_VAR 0 1
15665: PPUSH
15666: LD_INT 0
15668: PPUSH
15669: CALL_OW 517
15673: PUSH
15674: LD_INT 1
15676: ARRAY
15677: PUSH
15678: LD_VAR 0 4
15682: ARRAY
15683: PUSH
15684: LD_VAR 0 1
15688: PPUSH
15689: LD_INT 0
15691: PPUSH
15692: CALL_OW 517
15696: PUSH
15697: LD_INT 2
15699: ARRAY
15700: PUSH
15701: LD_VAR 0 4
15705: ARRAY
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: PPUSH
15711: CALL_OW 2
15715: ST_TO_ADDR
// r := 0 ;
15716: LD_ADDR_VAR 0 5
15720: PUSH
15721: LD_INT 0
15723: ST_TO_ADDR
// x := x + 1 ;
15724: LD_ADDR_VAR 0 6
15728: PUSH
15729: LD_VAR 0 6
15733: PUSH
15734: LD_INT 1
15736: PLUS
15737: ST_TO_ADDR
// end end else
15738: GO 15754
// r := r + 35 ;
15740: LD_ADDR_VAR 0 5
15744: PUSH
15745: LD_VAR 0 5
15749: PUSH
15750: LD_INT 35
15752: PLUS
15753: ST_TO_ADDR
// end end ;
15754: GO 15526
15756: POP
15757: POP
15758: GO 15487
15760: LD_VAR 0 3
15764: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
15765: LD_INT 0
15767: PPUSH
15768: PPUSH
15769: PPUSH
15770: PPUSH
15771: PPUSH
// tmp := [ ] ;
15772: LD_ADDR_VAR 0 6
15776: PUSH
15777: EMPTY
15778: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
15779: LD_ADDR_VAR 0 7
15783: PUSH
15784: LD_INT 22
15786: PUSH
15787: LD_VAR 0 1
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: PUSH
15796: LD_INT 30
15798: PUSH
15799: LD_INT 32
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: PPUSH
15810: CALL_OW 69
15814: ST_TO_ADDR
// if bunkers then
15815: LD_VAR 0 7
15819: IFFALSE 15889
// for i in bunkers do
15821: LD_ADDR_VAR 0 4
15825: PUSH
15826: LD_VAR 0 7
15830: PUSH
15831: FOR_IN
15832: IFFALSE 15887
// for j in UnitsInside ( i ) do
15834: LD_ADDR_VAR 0 5
15838: PUSH
15839: LD_VAR 0 4
15843: PPUSH
15844: CALL_OW 313
15848: PUSH
15849: FOR_IN
15850: IFFALSE 15883
// tmp := Replace ( tmp , tmp + 1 , j ) ;
15852: LD_ADDR_VAR 0 6
15856: PUSH
15857: LD_VAR 0 6
15861: PPUSH
15862: LD_VAR 0 6
15866: PUSH
15867: LD_INT 1
15869: PLUS
15870: PPUSH
15871: LD_VAR 0 5
15875: PPUSH
15876: CALL_OW 1
15880: ST_TO_ADDR
15881: GO 15849
15883: POP
15884: POP
15885: GO 15831
15887: POP
15888: POP
// if tmp then
15889: LD_VAR 0 6
15893: IFFALSE 15933
// begin ComExitBuilding ( tmp ) ;
15895: LD_VAR 0 6
15899: PPUSH
15900: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
15904: LD_VAR 0 6
15908: PPUSH
15909: LD_VAR 0 2
15913: PPUSH
15914: CALL_OW 250
15918: PPUSH
15919: LD_VAR 0 2
15923: PPUSH
15924: CALL_OW 251
15928: PPUSH
15929: CALL_OW 174
// end ; end ;
15933: LD_VAR 0 3
15937: RET
// export function CreateNature ; var i , un ; begin
15938: LD_INT 0
15940: PPUSH
15941: PPUSH
15942: PPUSH
// uc_side := 0 ;
15943: LD_ADDR_OWVAR 20
15947: PUSH
15948: LD_INT 0
15950: ST_TO_ADDR
// uc_nation := 0 ;
15951: LD_ADDR_OWVAR 21
15955: PUSH
15956: LD_INT 0
15958: ST_TO_ADDR
// InitHc ;
15959: CALL_OW 19
// hc_class := class_fish ;
15963: LD_ADDR_OWVAR 28
15967: PUSH
15968: LD_INT 20
15970: ST_TO_ADDR
// for i := 1 to 6 do
15971: LD_ADDR_VAR 0 2
15975: PUSH
15976: DOUBLE
15977: LD_INT 1
15979: DEC
15980: ST_TO_ADDR
15981: LD_INT 6
15983: PUSH
15984: FOR_TO
15985: IFFALSE 16004
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
15987: CALL_OW 44
15991: PPUSH
15992: LD_INT 22
15994: PPUSH
15995: LD_INT 0
15997: PPUSH
15998: CALL_OW 49
16002: GO 15984
16004: POP
16005: POP
// for i := 1 to Difficulty + 2 do
16006: LD_ADDR_VAR 0 2
16010: PUSH
16011: DOUBLE
16012: LD_INT 1
16014: DEC
16015: ST_TO_ADDR
16016: LD_OWVAR 67
16020: PUSH
16021: LD_INT 2
16023: PLUS
16024: PUSH
16025: FOR_TO
16026: IFFALSE 16135
// begin hc_sex := sex_male ;
16028: LD_ADDR_OWVAR 27
16032: PUSH
16033: LD_INT 1
16035: ST_TO_ADDR
// uc_side := 0 ;
16036: LD_ADDR_OWVAR 20
16040: PUSH
16041: LD_INT 0
16043: ST_TO_ADDR
// uc_nation := nation_nature ;
16044: LD_ADDR_OWVAR 21
16048: PUSH
16049: LD_INT 0
16051: ST_TO_ADDR
// hc_class := class_tiger ;
16052: LD_ADDR_OWVAR 28
16056: PUSH
16057: LD_INT 14
16059: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
16060: LD_ADDR_OWVAR 31
16064: PUSH
16065: LD_EXP 30
16069: PUSH
16070: LD_INT 0
16072: PUSH
16073: LD_INT 0
16075: PUSH
16076: LD_INT 0
16078: PUSH
16079: EMPTY
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
16085: LD_ADDR_OWVAR 35
16089: PUSH
16090: LD_INT 5
16092: NEG
16093: PPUSH
16094: LD_INT 5
16096: PPUSH
16097: CALL_OW 12
16101: PUSH
16102: LD_OWVAR 67
16106: MUL
16107: ST_TO_ADDR
// un := CreateHuman ;
16108: LD_ADDR_VAR 0 3
16112: PUSH
16113: CALL_OW 44
16117: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16118: LD_VAR 0 3
16122: PPUSH
16123: LD_INT 23
16125: PPUSH
16126: LD_INT 0
16128: PPUSH
16129: CALL_OW 49
// end ;
16133: GO 16025
16135: POP
16136: POP
// for i := 1 to rand ( 3 , 4 ) do
16137: LD_ADDR_VAR 0 2
16141: PUSH
16142: DOUBLE
16143: LD_INT 1
16145: DEC
16146: ST_TO_ADDR
16147: LD_INT 3
16149: PPUSH
16150: LD_INT 4
16152: PPUSH
16153: CALL_OW 12
16157: PUSH
16158: FOR_TO
16159: IFFALSE 16251
// begin hc_sex := sex_male ;
16161: LD_ADDR_OWVAR 27
16165: PUSH
16166: LD_INT 1
16168: ST_TO_ADDR
// uc_side := 0 ;
16169: LD_ADDR_OWVAR 20
16173: PUSH
16174: LD_INT 0
16176: ST_TO_ADDR
// uc_nation := nation_nature ;
16177: LD_ADDR_OWVAR 21
16181: PUSH
16182: LD_INT 0
16184: ST_TO_ADDR
// hc_class := 18 ;
16185: LD_ADDR_OWVAR 28
16189: PUSH
16190: LD_INT 18
16192: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
16193: LD_ADDR_OWVAR 31
16197: PUSH
16198: LD_INT 0
16200: PUSH
16201: LD_INT 0
16203: PUSH
16204: LD_INT 0
16206: PUSH
16207: LD_INT 0
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: ST_TO_ADDR
// hc_agressivity := 0 ;
16216: LD_ADDR_OWVAR 35
16220: PUSH
16221: LD_INT 0
16223: ST_TO_ADDR
// un := CreateHuman ;
16224: LD_ADDR_VAR 0 3
16228: PUSH
16229: CALL_OW 44
16233: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16234: LD_VAR 0 3
16238: PPUSH
16239: LD_INT 23
16241: PPUSH
16242: LD_INT 0
16244: PPUSH
16245: CALL_OW 49
// end ;
16249: GO 16158
16251: POP
16252: POP
// for i := 1 to [ 4 , 3 , 3 , 3 ] [ Difficulty ] do
16253: LD_ADDR_VAR 0 2
16257: PUSH
16258: DOUBLE
16259: LD_INT 1
16261: DEC
16262: ST_TO_ADDR
16263: LD_INT 4
16265: PUSH
16266: LD_INT 3
16268: PUSH
16269: LD_INT 3
16271: PUSH
16272: LD_INT 3
16274: PUSH
16275: EMPTY
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: PUSH
16281: LD_OWVAR 67
16285: ARRAY
16286: PUSH
16287: FOR_TO
16288: IFFALSE 16397
// begin hc_sex := sex_male ;
16290: LD_ADDR_OWVAR 27
16294: PUSH
16295: LD_INT 1
16297: ST_TO_ADDR
// uc_side := 0 ;
16298: LD_ADDR_OWVAR 20
16302: PUSH
16303: LD_INT 0
16305: ST_TO_ADDR
// uc_nation := nation_nature ;
16306: LD_ADDR_OWVAR 21
16310: PUSH
16311: LD_INT 0
16313: ST_TO_ADDR
// hc_class := class_apeman ;
16314: LD_ADDR_OWVAR 28
16318: PUSH
16319: LD_INT 12
16321: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
16322: LD_ADDR_OWVAR 31
16326: PUSH
16327: LD_INT 0
16329: PPUSH
16330: LD_INT 2
16332: PPUSH
16333: CALL_OW 12
16337: PUSH
16338: LD_INT 0
16340: PUSH
16341: LD_INT 0
16343: PUSH
16344: LD_INT 0
16346: PUSH
16347: EMPTY
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: ST_TO_ADDR
// hc_agressivity = rand ( - 10 , 10 ) ;
16353: LD_ADDR_OWVAR 35
16357: PUSH
16358: LD_INT 10
16360: NEG
16361: PPUSH
16362: LD_INT 10
16364: PPUSH
16365: CALL_OW 12
16369: ST_TO_ADDR
// un := CreateHuman ;
16370: LD_ADDR_VAR 0 3
16374: PUSH
16375: CALL_OW 44
16379: ST_TO_ADDR
// PlaceUnitArea ( un , ApeNatureArea , false ) ;
16380: LD_VAR 0 3
16384: PPUSH
16385: LD_INT 26
16387: PPUSH
16388: LD_INT 0
16390: PPUSH
16391: CALL_OW 49
// end ;
16395: GO 16287
16397: POP
16398: POP
// end ; end_of_file
16399: LD_VAR 0 1
16403: RET
// on UnitDestroyed ( unit ) do var i ;
16404: LD_INT 0
16406: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
16407: LD_VAR 0 1
16411: PPUSH
16412: CALL 36041 0 1
// if unit = JMM then
16416: LD_VAR 0 1
16420: PUSH
16421: LD_EXP 1
16425: EQUAL
16426: IFFALSE 16435
// YouLost ( JMM ) ;
16428: LD_STRING JMM
16430: PPUSH
16431: CALL_OW 104
// if unit in russianTanks then
16435: LD_VAR 0 1
16439: PUSH
16440: LD_EXP 32
16444: IN
16445: IFFALSE 16463
// russianTanks := russianTanks diff unit ;
16447: LD_ADDR_EXP 32
16451: PUSH
16452: LD_EXP 32
16456: PUSH
16457: LD_VAR 0 1
16461: DIFF
16462: ST_TO_ADDR
// if unit in russianTimeLapsers then
16463: LD_VAR 0 1
16467: PUSH
16468: LD_EXP 33
16472: IN
16473: IFFALSE 16491
// russianTimeLapsers := russianTimeLapsers diff unit ;
16475: LD_ADDR_EXP 33
16479: PUSH
16480: LD_EXP 33
16484: PUSH
16485: LD_VAR 0 1
16489: DIFF
16490: ST_TO_ADDR
// if unit in RuScientists then
16491: LD_VAR 0 1
16495: PUSH
16496: LD_EXP 27
16500: IN
16501: IFFALSE 16533
// begin RuScientists := RuScientists diff unit ;
16503: LD_ADDR_EXP 27
16507: PUSH
16508: LD_EXP 27
16512: PUSH
16513: LD_VAR 0 1
16517: DIFF
16518: ST_TO_ADDR
// sciCounter := sciCounter + 1 ;
16519: LD_ADDR_EXP 28
16523: PUSH
16524: LD_EXP 28
16528: PUSH
16529: LD_INT 1
16531: PLUS
16532: ST_TO_ADDR
// end ; end ;
16533: PPOPN 2
16535: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_laser then
16536: LD_VAR 0 3
16540: PPUSH
16541: CALL_OW 264
16545: PUSH
16546: LD_INT 9
16548: EQUAL
16549: IFFALSE 16565
// laserCounterDestroy := laserCounterDestroy + 1 ;
16551: LD_ADDR_EXP 43
16555: PUSH
16556: LD_EXP 43
16560: PUSH
16561: LD_INT 1
16563: PLUS
16564: ST_TO_ADDR
// end ;
16565: PPOPN 3
16567: END
// on UnitTeleported ( building , human ) do begin if human in FilterAllUnits ( [ f_side , 6 ] ) then
16568: LD_VAR 0 2
16572: PUSH
16573: LD_INT 22
16575: PUSH
16576: LD_INT 6
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: PPUSH
16583: CALL_OW 69
16587: IN
16588: IFFALSE 16643
// begin if GetType ( human ) = unit_vehicle then
16590: LD_VAR 0 2
16594: PPUSH
16595: CALL_OW 247
16599: PUSH
16600: LD_INT 2
16602: EQUAL
16603: IFFALSE 16620
// human := IsDrivenBy ( human ) ;
16605: LD_ADDR_VAR 0 2
16609: PUSH
16610: LD_VAR 0 2
16614: PPUSH
16615: CALL_OW 311
16619: ST_TO_ADDR
// SetTag ( human , GetTag ( human ) + 10 ) ;
16620: LD_VAR 0 2
16624: PPUSH
16625: LD_VAR 0 2
16629: PPUSH
16630: CALL_OW 110
16634: PUSH
16635: LD_INT 10
16637: PLUS
16638: PPUSH
16639: CALL_OW 109
// end ; if GetSide ( human ) = 1 and eventVar1 = 0 then
16643: LD_VAR 0 2
16647: PPUSH
16648: CALL_OW 255
16652: PUSH
16653: LD_INT 1
16655: EQUAL
16656: IFFALSE 16668
16658: PUSH
16659: LD_EXP 40
16663: PUSH
16664: LD_INT 0
16666: EQUAL
16667: AND
16668: IFFALSE 16780
// begin eventVar1 = 1 ;
16670: LD_ADDR_EXP 40
16674: PUSH
16675: LD_INT 1
16677: ST_TO_ADDR
// teleportExplored = 1 ;
16678: LD_ADDR_EXP 26
16682: PUSH
16683: LD_INT 1
16685: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
16686: LD_STRING M2a
16688: PPUSH
16689: CALL_OW 337
// wait ( 0 0$2 ) ;
16693: LD_INT 70
16695: PPUSH
16696: CALL_OW 67
// DialogueOn ;
16700: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
16704: LD_INT 22
16706: PUSH
16707: LD_INT 1
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: PUSH
16714: LD_INT 21
16716: PUSH
16717: LD_INT 1
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: PPUSH
16728: CALL_OW 69
16732: PPUSH
16733: LD_STRING DT3a-Sol1-1
16735: PPUSH
16736: LD_STRING DT3a-FSol1-1
16738: PPUSH
16739: CALL 13095 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
16743: LD_EXP 1
16747: PPUSH
16748: LD_STRING DT3a-JMM-1
16750: PPUSH
16751: CALL_OW 88
// CenterNowOnUnits ( human ) ;
16755: LD_VAR 0 2
16759: PPUSH
16760: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
16764: LD_EXP 1
16768: PPUSH
16769: LD_STRING DT3a-JMM-1a
16771: PPUSH
16772: CALL_OW 88
// DialogueOff ;
16776: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
16780: LD_VAR 0 1
16784: PUSH
16785: LD_INT 10
16787: EQUAL
16788: IFFALSE 16805
16790: PUSH
16791: LD_VAR 0 2
16795: PPUSH
16796: CALL_OW 247
16800: PUSH
16801: LD_INT 2
16803: EQUAL
16804: AND
16805: IFFALSE 16822
16807: PUSH
16808: LD_VAR 0 2
16812: PPUSH
16813: CALL_OW 255
16817: PUSH
16818: LD_INT 3
16820: EQUAL
16821: AND
16822: IFFALSE 16888
// begin if vehicleTeleported = 0 then
16824: LD_EXP 21
16828: PUSH
16829: LD_INT 0
16831: EQUAL
16832: IFFALSE 16849
// begin wait ( 0 0$03 ) ;
16834: LD_INT 105
16836: PPUSH
16837: CALL_OW 67
// vehicleTeleported := 1 ;
16841: LD_ADDR_EXP 21
16845: PUSH
16846: LD_INT 1
16848: ST_TO_ADDR
// end ; if vehicleTeleported = 2 then
16849: LD_EXP 21
16853: PUSH
16854: LD_INT 2
16856: EQUAL
16857: IFFALSE 16874
// begin wait ( 0 0$03 ) ;
16859: LD_INT 105
16861: PPUSH
16862: CALL_OW 67
// vehicleTeleported := 3 ;
16866: LD_ADDR_EXP 21
16870: PUSH
16871: LD_INT 3
16873: ST_TO_ADDR
// end ; tpCounter := tpCounter + 1 ;
16874: LD_ADDR_EXP 22
16878: PUSH
16879: LD_EXP 22
16883: PUSH
16884: LD_INT 1
16886: PLUS
16887: ST_TO_ADDR
// end ; end ;
16888: PPOPN 2
16890: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
16891: LD_VAR 0 1
16895: PPUSH
16896: LD_VAR 0 2
16900: PPUSH
16901: CALL 36099 0 2
// if GetWeapon ( vehicle ) = us_rocket_launcher then
16905: LD_VAR 0 1
16909: PPUSH
16910: CALL_OW 264
16914: PUSH
16915: LD_INT 7
16917: EQUAL
16918: IFFALSE 16928
// rocketBuilded := true ;
16920: LD_ADDR_EXP 44
16924: PUSH
16925: LD_INT 1
16927: ST_TO_ADDR
// if GetSide ( vehicle ) <> 3 then
16928: LD_VAR 0 1
16932: PPUSH
16933: CALL_OW 255
16937: PUSH
16938: LD_INT 3
16940: NONEQUAL
16941: IFFALSE 16945
// exit ;
16943: GO 17062
// if factory in [ ru_fact , rufab2 ] then
16945: LD_VAR 0 2
16949: PUSH
16950: LD_INT 21
16952: PUSH
16953: LD_INT 112
16955: PUSH
16956: EMPTY
16957: LIST
16958: LIST
16959: IN
16960: IFFALSE 17062
// begin if GetWeapon ( vehicle ) = ru_time_lapser then
16962: LD_VAR 0 1
16966: PPUSH
16967: CALL_OW 264
16971: PUSH
16972: LD_INT 49
16974: EQUAL
16975: IFFALSE 17011
// begin russianTimeLapsers := Join ( russianTimeLapsers , vehicle ) ;
16977: LD_ADDR_EXP 33
16981: PUSH
16982: LD_EXP 33
16986: PPUSH
16987: LD_VAR 0 1
16991: PPUSH
16992: CALL 79599 0 2
16996: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
16997: LD_VAR 0 1
17001: PPUSH
17002: LD_INT 137
17004: PPUSH
17005: CALL_OW 120
// end else
17009: GO 17062
// if not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_big_cargo_bay , ru_crane , ru_bulldozer ] then
17011: LD_VAR 0 1
17015: PPUSH
17016: CALL_OW 264
17020: PUSH
17021: LD_INT 51
17023: PUSH
17024: LD_INT 89
17026: PUSH
17027: LD_INT 52
17029: PUSH
17030: LD_INT 53
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: IN
17039: NOT
17040: IFFALSE 17062
// begin russianTanks := Join ( russianTanks , vehicle ) ;
17042: LD_ADDR_EXP 32
17046: PUSH
17047: LD_EXP 32
17051: PPUSH
17052: LD_VAR 0 1
17056: PPUSH
17057: CALL 79599 0 2
17061: ST_TO_ADDR
// end ; end ; end ;
17062: PPOPN 2
17064: END
// on LeaveVehicle ( vehicle , human ) do var i ;
17065: LD_INT 0
17067: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
17068: LD_VAR 0 2
17072: PPUSH
17073: CALL_OW 255
17077: PUSH
17078: LD_INT 3
17080: EQUAL
17081: IFFALSE 17098
17083: PUSH
17084: LD_VAR 0 2
17088: PPUSH
17089: CALL_OW 257
17093: PUSH
17094: LD_INT 3
17096: EQUAL
17097: AND
17098: IFFALSE 17113
17100: PUSH
17101: LD_INT 21
17103: PPUSH
17104: CALL_OW 255
17108: PUSH
17109: LD_INT 3
17111: EQUAL
17112: AND
17113: IFFALSE 17124
17115: PUSH
17116: LD_INT 21
17118: PPUSH
17119: CALL_OW 302
17123: AND
17124: IFFALSE 17138
// ComEnterUnit ( human , ru_fact ) ;
17126: LD_VAR 0 2
17130: PPUSH
17131: LD_INT 21
17133: PPUSH
17134: CALL_OW 120
// end ;
17138: PPOPN 3
17140: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
17141: LD_VAR 0 1
17145: PPUSH
17146: CALL 36083 0 1
// end ;
17150: PPOPN 1
17152: END
// on SailEvent ( event ) do begin if event = 1 then
17153: LD_VAR 0 1
17157: PUSH
17158: LD_INT 1
17160: EQUAL
17161: IFFALSE 17167
// PrepareRussian ;
17163: CALL 3601 0 0
// end ; end_of_file
17167: PPOPN 1
17169: END
// every 0 0$1 trigger ruAI = 1 do
17170: LD_EXP 34
17174: PUSH
17175: LD_INT 1
17177: EQUAL
17178: IFFALSE 17290
17180: GO 17182
17182: DISABLE
// begin enable ;
17183: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
17184: LD_INT 3
17186: PPUSH
17187: LD_INT 6
17189: PPUSH
17190: LD_INT 9
17192: PPUSH
17193: LD_EXP 31
17197: PPUSH
17198: CALL 13947 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
17202: LD_INT 3
17204: PPUSH
17205: LD_INT 4
17207: PPUSH
17208: LD_INT 10
17210: PPUSH
17211: LD_EXP 31
17215: PPUSH
17216: CALL 13947 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
17220: LD_INT 3
17222: PPUSH
17223: LD_INT 9
17225: PPUSH
17226: CALL 14808 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
17230: LD_INT 3
17232: PPUSH
17233: LD_INT 10
17235: PPUSH
17236: CALL 14808 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
17240: LD_INT 3
17242: PPUSH
17243: LD_INT 16
17245: PPUSH
17246: LD_INT 9
17248: PPUSH
17249: LD_INT 91
17251: PPUSH
17252: CALL 14328 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
17256: LD_INT 3
17258: PPUSH
17259: LD_INT 17
17261: PPUSH
17262: LD_INT 10
17264: PPUSH
17265: LD_INT 47
17267: PUSH
17268: LD_INT 129
17270: PUSH
17271: LD_INT 135
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: LIST
17278: PPUSH
17279: CALL 14328 0 4
// IntBazooka ( 3 ) ;
17283: LD_INT 3
17285: PPUSH
17286: CALL 15137 0 1
// end ;
17290: END
// every 0 0$50 trigger russianTanks >= [ 3 , 4 , 5 , 6 ] [ Difficulty ] do var i , tmp , p , path ;
17291: LD_EXP 32
17295: PUSH
17296: LD_INT 3
17298: PUSH
17299: LD_INT 4
17301: PUSH
17302: LD_INT 5
17304: PUSH
17305: LD_INT 6
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: PUSH
17314: LD_OWVAR 67
17318: ARRAY
17319: GREATEREQUAL
17320: IFFALSE 17694
17322: GO 17324
17324: DISABLE
17325: LD_INT 0
17327: PPUSH
17328: PPUSH
17329: PPUSH
17330: PPUSH
// begin enable ;
17331: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
17332: LD_ADDR_VAR 0 2
17336: PUSH
17337: LD_EXP 32
17341: PUSH
17342: LD_EXP 33
17346: UNION
17347: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
17348: LD_ADDR_EXP 32
17352: PUSH
17353: LD_EXP 32
17357: PUSH
17358: LD_VAR 0 2
17362: DIFF
17363: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
17364: LD_ADDR_EXP 33
17368: PUSH
17369: LD_EXP 33
17373: PUSH
17374: LD_VAR 0 2
17378: DIFF
17379: ST_TO_ADDR
// if vehicleTeleported >= 4 then
17380: LD_EXP 21
17384: PUSH
17385: LD_INT 4
17387: GREATEREQUAL
17388: IFFALSE 17406
// attackTactic := rand ( 1 , 2 ) ;
17390: LD_ADDR_EXP 36
17394: PUSH
17395: LD_INT 1
17397: PPUSH
17398: LD_INT 2
17400: PPUSH
17401: CALL_OW 12
17405: ST_TO_ADDR
// path := [ [ 93 , 77 ] , [ 107 , 99 ] , [ 123 , 112 ] , [ 140 , 112 ] ] ;
17406: LD_ADDR_VAR 0 4
17410: PUSH
17411: LD_INT 93
17413: PUSH
17414: LD_INT 77
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: PUSH
17421: LD_INT 107
17423: PUSH
17424: LD_INT 99
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: PUSH
17431: LD_INT 123
17433: PUSH
17434: LD_INT 112
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: PUSH
17441: LD_INT 140
17443: PUSH
17444: LD_INT 112
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PUSH
17451: EMPTY
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: ST_TO_ADDR
// if attackTactic < 2 then
17457: LD_EXP 36
17461: PUSH
17462: LD_INT 2
17464: LESS
17465: IFFALSE 17496
// path := [ [ 131 , 136 ] , [ 140 , 112 ] ] ;
17467: LD_ADDR_VAR 0 4
17471: PUSH
17472: LD_INT 131
17474: PUSH
17475: LD_INT 136
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: PUSH
17482: LD_INT 140
17484: PUSH
17485: LD_INT 112
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: ST_TO_ADDR
// if IsOk ( ruteleprt ) then
17496: LD_INT 10
17498: PPUSH
17499: CALL_OW 302
17503: IFFALSE 17621
// begin for i in tmp do
17505: LD_ADDR_VAR 0 1
17509: PUSH
17510: LD_VAR 0 2
17514: PUSH
17515: FOR_IN
17516: IFFALSE 17559
// if attackTactic < 2 then
17518: LD_EXP 36
17522: PUSH
17523: LD_INT 2
17525: LESS
17526: IFFALSE 17542
// ComEnterUnit ( i , ruteleprt ) else
17528: LD_VAR 0 1
17532: PPUSH
17533: LD_INT 10
17535: PPUSH
17536: CALL_OW 120
17540: GO 17557
// ComMoveXY ( i , 88 , 69 ) ;
17542: LD_VAR 0 1
17546: PPUSH
17547: LD_INT 88
17549: PPUSH
17550: LD_INT 69
17552: PPUSH
17553: CALL_OW 111
17557: GO 17515
17559: POP
17560: POP
// p := 0 ;
17561: LD_ADDR_VAR 0 3
17565: PUSH
17566: LD_INT 0
17568: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
17569: LD_INT 70
17571: PPUSH
17572: CALL_OW 67
// p := Inc ( p ) ;
17576: LD_ADDR_VAR 0 3
17580: PUSH
17581: LD_VAR 0 3
17585: PPUSH
17586: CALL 80972 0 1
17590: ST_TO_ADDR
// until not UnitFilter ( tmp , [ f_hastask ] ) or p > 30 ;
17591: LD_VAR 0 2
17595: PPUSH
17596: LD_INT 60
17598: PUSH
17599: EMPTY
17600: LIST
17601: PPUSH
17602: CALL_OW 72
17606: NOT
17607: IFTRUE 17619
17609: PUSH
17610: LD_VAR 0 3
17614: PUSH
17615: LD_INT 30
17617: GREATER
17618: OR
17619: IFFALSE 17569
// end ; repeat wait ( 0 0$1 ) ;
17621: LD_INT 35
17623: PPUSH
17624: CALL_OW 67
// for i in tmp do
17628: LD_ADDR_VAR 0 1
17632: PUSH
17633: LD_VAR 0 2
17637: PUSH
17638: FOR_IN
17639: IFFALSE 17671
// if not IsOk ( i ) then
17641: LD_VAR 0 1
17645: PPUSH
17646: CALL_OW 302
17650: NOT
17651: IFFALSE 17669
// tmp := tmp diff i ;
17653: LD_ADDR_VAR 0 2
17657: PUSH
17658: LD_VAR 0 2
17662: PUSH
17663: LD_VAR 0 1
17667: DIFF
17668: ST_TO_ADDR
17669: GO 17638
17671: POP
17672: POP
// AgressiveMove ( tmp , path ) ;
17673: LD_VAR 0 2
17677: PPUSH
17678: LD_VAR 0 4
17682: PPUSH
17683: CALL 82365 0 2
// until not tmp ;
17687: LD_VAR 0 2
17691: NOT
17692: IFFALSE 17621
// end ;
17694: PPOPN 4
17696: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
17697: LD_INT 4
17699: PPUSH
17700: CALL_OW 303
17704: IFFALSE 17719
17706: GO 17708
17708: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
17709: LD_INT 3
17711: PPUSH
17712: LD_INT 4
17714: PPUSH
17715: CALL 15765 0 2
17719: END
// every 0 0$1 do
17720: GO 17722
17722: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
17723: LD_INT 3
17725: PPUSH
17726: LD_INT 91
17728: PPUSH
17729: LD_INT 3
17731: PPUSH
17732: CALL 13710 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
17736: LD_INT 3
17738: PPUSH
17739: LD_INT 47
17741: PPUSH
17742: LD_INT 3
17744: PPUSH
17745: CALL 13710 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
17749: LD_INT 3
17751: PPUSH
17752: LD_INT 129
17754: PPUSH
17755: LD_INT 3
17757: PPUSH
17758: CALL 13710 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
17762: LD_INT 3
17764: PPUSH
17765: LD_INT 3
17767: PPUSH
17768: LD_INT 3
17770: PPUSH
17771: CALL 13710 0 3
// end ;
17775: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
17776: LD_INT 22
17778: PUSH
17779: LD_INT 1
17781: PUSH
17782: EMPTY
17783: LIST
17784: LIST
17785: PUSH
17786: LD_INT 21
17788: PUSH
17789: LD_INT 3
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: PPUSH
17800: CALL_OW 69
17804: IFFALSE 17873
17806: GO 17808
17808: DISABLE
// begin wait ( 0 0$40 ) ;
17809: LD_INT 1400
17811: PPUSH
17812: CALL_OW 67
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17816: LD_INT 3
17818: PPUSH
17819: LD_INT 21
17821: PPUSH
17822: LD_INT 3
17824: PUSH
17825: LD_INT 4
17827: PUSH
17828: LD_INT 5
17830: PUSH
17831: LD_INT 6
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: PUSH
17840: LD_OWVAR 67
17844: ARRAY
17845: PPUSH
17846: LD_INT 46
17848: PUSH
17849: LD_INT 45
17851: PUSH
17852: LD_INT 44
17854: PUSH
17855: EMPTY
17856: LIST
17857: LIST
17858: LIST
17859: PPUSH
17860: LD_INT 3
17862: PPUSH
17863: LD_INT 3
17865: PPUSH
17866: LD_INT 24
17868: PPUSH
17869: CALL 14990 0 7
// end ;
17873: END
// every 6 6$0 + 2 2$00 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
17874: LD_EXP 20
17878: PUSH
17879: LD_INT 2
17881: EQUAL
17882: IFFALSE 17897
17884: PUSH
17885: LD_INT 21
17887: PPUSH
17888: CALL_OW 255
17892: PUSH
17893: LD_INT 3
17895: EQUAL
17896: AND
17897: IFFALSE 17912
17899: PUSH
17900: LD_INT 112
17902: PPUSH
17903: CALL_OW 255
17907: PUSH
17908: LD_INT 3
17910: EQUAL
17911: AND
17912: IFFALSE 17923
17914: PUSH
17915: LD_INT 21
17917: PPUSH
17918: CALL_OW 302
17922: AND
17923: IFFALSE 17934
17925: PUSH
17926: LD_INT 112
17928: PPUSH
17929: CALL_OW 302
17933: AND
17934: IFFALSE 18024
17936: PUSH
17937: LD_INT 22
17939: PUSH
17940: LD_INT 3
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PUSH
17947: LD_INT 21
17949: PUSH
17950: LD_INT 2
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: LD_INT 50
17959: PUSH
17960: EMPTY
17961: LIST
17962: PUSH
17963: LD_INT 3
17965: PUSH
17966: LD_INT 58
17968: PUSH
17969: EMPTY
17970: LIST
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: PPUSH
17982: CALL_OW 69
17986: PUSH
17987: LD_INT 18
17989: PPUSH
17990: LD_INT 22
17992: PUSH
17993: LD_INT 3
17995: PUSH
17996: EMPTY
17997: LIST
17998: LIST
17999: PUSH
18000: LD_INT 21
18002: PUSH
18003: LD_INT 2
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PPUSH
18014: CALL_OW 70
18018: PUSH
18019: LD_INT 0
18021: EQUAL
18022: DIFF
18023: AND
18024: IFFALSE 18150
18026: GO 18028
18028: DISABLE
// begin enable ;
18029: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
18030: LD_INT 3
18032: PPUSH
18033: LD_INT 21
18035: PPUSH
18036: LD_INT 3
18038: PUSH
18039: LD_INT 4
18041: PUSH
18042: LD_INT 5
18044: PUSH
18045: LD_INT 6
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: PUSH
18054: LD_OWVAR 67
18058: ARRAY
18059: PPUSH
18060: LD_INT 46
18062: PUSH
18063: LD_INT 45
18065: PUSH
18066: LD_INT 44
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: LIST
18073: PPUSH
18074: LD_INT 3
18076: PPUSH
18077: LD_INT 3
18079: PPUSH
18080: LD_INT 24
18082: PPUSH
18083: CALL 14990 0 7
// if russianTimeLapsers = 0 then
18087: LD_EXP 33
18091: PUSH
18092: LD_INT 0
18094: EQUAL
18095: IFFALSE 18150
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
18097: LD_INT 3
18099: PPUSH
18100: LD_INT 112
18102: PPUSH
18103: LD_INT 1
18105: PUSH
18106: LD_INT 2
18108: PUSH
18109: LD_INT 2
18111: PUSH
18112: LD_INT 2
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: PUSH
18121: LD_OWVAR 67
18125: ARRAY
18126: PPUSH
18127: LD_INT 49
18129: PUSH
18130: LD_INT 49
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PPUSH
18137: LD_INT 3
18139: PPUSH
18140: LD_INT 3
18142: PPUSH
18143: LD_INT 24
18145: PPUSH
18146: CALL 14990 0 7
// end ;
18150: END
// every 0 0$1 trigger arabianMines do var i ;
18151: LD_EXP 37
18155: IFFALSE 18276
18157: GO 18159
18159: DISABLE
18160: LD_INT 0
18162: PPUSH
// begin enable ;
18163: ENABLE
// for i in arabianMines do
18164: LD_ADDR_VAR 0 1
18168: PUSH
18169: LD_EXP 37
18173: PUSH
18174: FOR_IN
18175: IFFALSE 18274
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
18177: LD_INT 22
18179: PUSH
18180: LD_INT 1
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 92
18189: PUSH
18190: LD_VAR 0 1
18194: PUSH
18195: LD_INT 1
18197: ARRAY
18198: PUSH
18199: LD_VAR 0 1
18203: PUSH
18204: LD_INT 2
18206: ARRAY
18207: PUSH
18208: LD_INT 3
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: PPUSH
18221: CALL_OW 69
18225: IFFALSE 18272
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
18227: LD_VAR 0 1
18231: PUSH
18232: LD_INT 1
18234: ARRAY
18235: PPUSH
18236: LD_VAR 0 1
18240: PUSH
18241: LD_INT 2
18243: ARRAY
18244: PPUSH
18245: LD_INT 5
18247: PPUSH
18248: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
18252: LD_ADDR_EXP 37
18256: PUSH
18257: LD_EXP 37
18261: PPUSH
18262: LD_VAR 0 1
18266: PPUSH
18267: CALL_OW 3
18271: ST_TO_ADDR
// end ; end ;
18272: GO 18174
18274: POP
18275: POP
// end ;
18276: PPOPN 1
18278: END
// every 0 0$10 trigger vehicleTeleported >= 4 and tpCounter mod 12 = 0 do var i , hexes ;
18279: LD_EXP 21
18283: PUSH
18284: LD_INT 4
18286: GREATEREQUAL
18287: IFFALSE 18303
18289: PUSH
18290: LD_EXP 22
18294: PUSH
18295: LD_INT 12
18297: MOD
18298: PUSH
18299: LD_INT 0
18301: EQUAL
18302: AND
18303: IFFALSE 18417
18305: GO 18307
18307: DISABLE
18308: LD_INT 0
18310: PPUSH
18311: PPUSH
// begin enable ;
18312: ENABLE
// hexes := [ [ 122 , 142 ] , [ 101 , 127 ] , [ 104 , 104 ] , [ 46 , 81 ] ] ;
18313: LD_ADDR_VAR 0 2
18317: PUSH
18318: LD_INT 122
18320: PUSH
18321: LD_INT 142
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PUSH
18328: LD_INT 101
18330: PUSH
18331: LD_INT 127
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 104
18340: PUSH
18341: LD_INT 104
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 46
18350: PUSH
18351: LD_INT 81
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: ST_TO_ADDR
// i := rand ( 1 , 4 ) ;
18364: LD_ADDR_VAR 0 1
18368: PUSH
18369: LD_INT 1
18371: PPUSH
18372: LD_INT 4
18374: PPUSH
18375: CALL_OW 12
18379: ST_TO_ADDR
// TeleportExit ( ruteleprt , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18380: LD_INT 10
18382: PPUSH
18383: LD_VAR 0 2
18387: PUSH
18388: LD_VAR 0 1
18392: ARRAY
18393: PUSH
18394: LD_INT 1
18396: ARRAY
18397: PPUSH
18398: LD_VAR 0 2
18402: PUSH
18403: LD_VAR 0 1
18407: ARRAY
18408: PUSH
18409: LD_INT 2
18411: ARRAY
18412: PPUSH
18413: CALL_OW 243
// end ; end_of_file
18417: PPOPN 2
18419: END
// every 0 0$1 trigger IsDead ( ruheadlab ) do
18420: LD_INT 3
18422: PPUSH
18423: CALL_OW 301
18427: IFFALSE 18648
18429: GO 18431
18431: DISABLE
// begin if UnitFilter ( RuScientists , [ f_ok ] ) then
18432: LD_EXP 27
18436: PPUSH
18437: LD_INT 50
18439: PUSH
18440: EMPTY
18441: LIST
18442: PPUSH
18443: CALL_OW 72
18447: IFFALSE 18456
// wait ( 0 0$10 ) ;
18449: LD_INT 350
18451: PPUSH
18452: CALL_OW 67
// DialogueOn ;
18456: CALL_OW 6
// if sciCounter = 0 then
18460: LD_EXP 28
18464: PUSH
18465: LD_INT 0
18467: EQUAL
18468: IFFALSE 18496
// begin Say ( JMM , D7a-JMM-1 ) ;
18470: LD_EXP 1
18474: PPUSH
18475: LD_STRING D7a-JMM-1
18477: PPUSH
18478: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
18482: LD_EXP 15
18486: PPUSH
18487: LD_STRING D7a-Pow-1
18489: PPUSH
18490: CALL_OW 94
// end else
18494: GO 18640
// if sciCounter < 6 then
18496: LD_EXP 28
18500: PUSH
18501: LD_INT 6
18503: LESS
18504: IFFALSE 18532
// begin Say ( JMM , D7b-JMM-1 ) ;
18506: LD_EXP 1
18510: PPUSH
18511: LD_STRING D7b-JMM-1
18513: PPUSH
18514: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
18518: LD_EXP 15
18522: PPUSH
18523: LD_STRING D7b-Pow-1
18525: PPUSH
18526: CALL_OW 94
// end else
18530: GO 18640
// begin Say ( JMM , D7c-JMM-1 ) ;
18532: LD_EXP 1
18536: PPUSH
18537: LD_STRING D7c-JMM-1
18539: PPUSH
18540: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
18544: LD_EXP 15
18548: PPUSH
18549: LD_STRING D7c-Pow-1
18551: PPUSH
18552: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
18556: LD_EXP 1
18560: PPUSH
18561: LD_STRING D7d-JMM-1
18563: PPUSH
18564: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
18568: LD_EXP 15
18572: PPUSH
18573: LD_STRING D7d-Pow-1
18575: PPUSH
18576: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
18580: LD_EXP 1
18584: PPUSH
18585: LD_STRING D7d-JMM-2
18587: PPUSH
18588: CALL_OW 88
// if askSiberite = 1 then
18592: LD_EXP 25
18596: PUSH
18597: LD_INT 1
18599: EQUAL
18600: IFFALSE 18616
// Say ( JMM , D7d-JMM-2a ) else
18602: LD_EXP 1
18606: PPUSH
18607: LD_STRING D7d-JMM-2a
18609: PPUSH
18610: CALL_OW 88
18614: GO 18628
// SayRadio ( Powell , D7d-Pow-2 ) ;
18616: LD_EXP 15
18620: PPUSH
18621: LD_STRING D7d-Pow-2
18623: PPUSH
18624: CALL_OW 94
// SayRadio ( Powell , D7d-Pow-2a ) ;
18628: LD_EXP 15
18632: PPUSH
18633: LD_STRING D7d-Pow-2a
18635: PPUSH
18636: CALL_OW 94
// end ; DialogueOff ;
18640: CALL_OW 7
// FinishMission ;
18644: CALL 18649 0 0
// end ;
18648: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
18649: LD_INT 0
18651: PPUSH
18652: PPUSH
18653: PPUSH
18654: PPUSH
// m1 := false ;
18655: LD_ADDR_VAR 0 2
18659: PUSH
18660: LD_INT 0
18662: ST_TO_ADDR
// m2 := false ;
18663: LD_ADDR_VAR 0 3
18667: PUSH
18668: LD_INT 0
18670: ST_TO_ADDR
// m3 := false ;
18671: LD_ADDR_VAR 0 4
18675: PUSH
18676: LD_INT 0
18678: ST_TO_ADDR
// if not westPathUsed then
18679: LD_EXP 42
18683: NOT
18684: IFFALSE 18693
// SetAchievement ( ACH_PATH ) ;
18686: LD_STRING ACH_PATH
18688: PPUSH
18689: CALL_OW 543
// if not rocketBuilded then
18693: LD_EXP 44
18697: NOT
18698: IFFALSE 18714
// begin wait ( 3 ) ;
18700: LD_INT 3
18702: PPUSH
18703: CALL_OW 67
// SetAchievement ( ACH_ROCKET ) ;
18707: LD_STRING ACH_ROCKET
18709: PPUSH
18710: CALL_OW 543
// end ; if tick <= 40 40$00 then
18714: LD_OWVAR 1
18718: PUSH
18719: LD_INT 84000
18721: LESSEQUAL
18722: IFFALSE 18738
// begin wait ( 3 ) ;
18724: LD_INT 3
18726: PPUSH
18727: CALL_OW 67
// SetAchievement ( ACH_ASPEED_12 ) ;
18731: LD_STRING ACH_ASPEED_12
18733: PPUSH
18734: CALL_OW 543
// end ; if teleportExplored = 1 then
18738: LD_EXP 26
18742: PUSH
18743: LD_INT 1
18745: EQUAL
18746: IFFALSE 18768
// begin m1 := true ;
18748: LD_ADDR_VAR 0 2
18752: PUSH
18753: LD_INT 1
18755: ST_TO_ADDR
// AddMedal ( Teleport , 1 ) ;
18756: LD_STRING Teleport
18758: PPUSH
18759: LD_INT 1
18761: PPUSH
18762: CALL_OW 101
// end else
18766: GO 18779
// AddMedal ( Teleport , - 1 ) ;
18768: LD_STRING Teleport
18770: PPUSH
18771: LD_INT 1
18773: NEG
18774: PPUSH
18775: CALL_OW 101
// if sciCounter > 2 then
18779: LD_EXP 28
18783: PUSH
18784: LD_INT 2
18786: GREATER
18787: IFFALSE 18809
// begin m2 := true ;
18789: LD_ADDR_VAR 0 3
18793: PUSH
18794: LD_INT 1
18796: ST_TO_ADDR
// AddMedal ( Materials , 1 ) ;
18797: LD_STRING Materials
18799: PPUSH
18800: LD_INT 1
18802: PPUSH
18803: CALL_OW 101
// end else
18807: GO 18820
// AddMedal ( Materials , - 1 ) ;
18809: LD_STRING Materials
18811: PPUSH
18812: LD_INT 1
18814: NEG
18815: PPUSH
18816: CALL_OW 101
// if sciCounter >= 6 then
18820: LD_EXP 28
18824: PUSH
18825: LD_INT 6
18827: GREATEREQUAL
18828: IFFALSE 18860
// begin m3 := true ;
18830: LD_ADDR_VAR 0 4
18834: PUSH
18835: LD_INT 1
18837: ST_TO_ADDR
// AddMedal ( Scientists , 1 ) ;
18838: LD_STRING Scientists
18840: PPUSH
18841: LD_INT 1
18843: PPUSH
18844: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
18848: LD_INT 1
18850: PPUSH
18851: LD_STRING 12_SciDed_1
18853: PPUSH
18854: CALL_OW 39
// end else
18858: GO 18881
// begin AddMedal ( Scientists , - 1 ) ;
18860: LD_STRING Scientists
18862: PPUSH
18863: LD_INT 1
18865: NEG
18866: PPUSH
18867: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
18871: LD_INT 0
18873: PPUSH
18874: LD_STRING 12_SciDed_1
18876: PPUSH
18877: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
18881: LD_EXP 24
18885: PPUSH
18886: LD_STRING 12_MainDepositFake_1
18888: PPUSH
18889: CALL_OW 39
// if m1 and m2 and m3 and Difficulty >= 3 then
18893: LD_VAR 0 2
18897: IFFALSE 18905
18899: PUSH
18900: LD_VAR 0 3
18904: AND
18905: IFFALSE 18913
18907: PUSH
18908: LD_VAR 0 4
18912: AND
18913: IFFALSE 18925
18915: PUSH
18916: LD_OWVAR 67
18920: PUSH
18921: LD_INT 3
18923: GREATEREQUAL
18924: AND
18925: IFFALSE 18937
// SetAchievementEX ( ACH_AMER , 12 ) ;
18927: LD_STRING ACH_AMER
18929: PPUSH
18930: LD_INT 12
18932: PPUSH
18933: CALL_OW 564
// GiveMedals ( MAIN ) ;
18937: LD_STRING MAIN
18939: PPUSH
18940: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
18944: LD_INT 22
18946: PUSH
18947: LD_INT 1
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: PUSH
18954: LD_INT 23
18956: PUSH
18957: LD_INT 1
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PUSH
18964: LD_INT 21
18966: PUSH
18967: LD_INT 1
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 2
18976: PUSH
18977: LD_INT 25
18979: PUSH
18980: LD_INT 1
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: PUSH
18987: LD_INT 25
18989: PUSH
18990: LD_INT 2
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: PUSH
18997: LD_INT 25
18999: PUSH
19000: LD_INT 3
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: PUSH
19007: LD_INT 25
19009: PUSH
19010: LD_INT 4
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PUSH
19017: LD_INT 25
19019: PUSH
19020: LD_INT 5
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: PUSH
19027: LD_INT 25
19029: PUSH
19030: LD_INT 8
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: PPUSH
19052: CALL_OW 69
19056: PPUSH
19057: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19061: LD_EXP 1
19065: PPUSH
19066: LD_EXP 39
19070: PUSH
19071: LD_STRING JMM
19073: STR
19074: PPUSH
19075: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
19079: LD_EXP 7
19083: PPUSH
19084: LD_EXP 39
19088: PUSH
19089: LD_STRING Brown
19091: STR
19092: PPUSH
19093: CALL 13055 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19097: LD_EXP 3
19101: PPUSH
19102: LD_EXP 39
19106: PUSH
19107: LD_STRING Donaldson
19109: STR
19110: PPUSH
19111: CALL 13055 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
19115: LD_EXP 4
19119: PPUSH
19120: LD_EXP 39
19124: PUSH
19125: LD_STRING Bobby
19127: STR
19128: PPUSH
19129: CALL 13055 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
19133: LD_EXP 5
19137: PPUSH
19138: LD_EXP 39
19142: PUSH
19143: LD_STRING Cyrus
19145: STR
19146: PPUSH
19147: CALL 13055 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
19151: LD_EXP 2
19155: PPUSH
19156: LD_EXP 39
19160: PUSH
19161: LD_STRING Lisa
19163: STR
19164: PPUSH
19165: CALL 13055 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
19169: LD_EXP 12
19173: PPUSH
19174: LD_EXP 39
19178: PUSH
19179: LD_STRING Frank
19181: STR
19182: PPUSH
19183: CALL 13055 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
19187: LD_EXP 13
19191: PPUSH
19192: LD_EXP 39
19196: PUSH
19197: LD_STRING Kikuchi
19199: STR
19200: PPUSH
19201: CALL 13055 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
19205: LD_EXP 9
19209: PPUSH
19210: LD_EXP 39
19214: PUSH
19215: LD_STRING Houten
19217: STR
19218: PPUSH
19219: CALL 13055 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
19223: LD_EXP 11
19227: PPUSH
19228: LD_EXP 39
19232: PUSH
19233: LD_STRING Gary
19235: STR
19236: PPUSH
19237: CALL 13055 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
19241: LD_EXP 10
19245: PPUSH
19246: LD_EXP 39
19250: PUSH
19251: LD_STRING Cornell
19253: STR
19254: PPUSH
19255: CALL 13055 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
19259: LD_EXP 6
19263: PPUSH
19264: LD_EXP 39
19268: PUSH
19269: LD_STRING Denis
19271: STR
19272: PPUSH
19273: CALL 13055 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
19277: LD_EXP 8
19281: PPUSH
19282: LD_EXP 39
19286: PUSH
19287: LD_STRING Gladstone
19289: STR
19290: PPUSH
19291: CALL 13055 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
19295: LD_INT 22
19297: PUSH
19298: LD_INT 1
19300: PUSH
19301: EMPTY
19302: LIST
19303: LIST
19304: PUSH
19305: LD_INT 23
19307: PUSH
19308: LD_INT 1
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: PUSH
19315: LD_INT 21
19317: PUSH
19318: LD_INT 1
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: PUSH
19325: LD_INT 2
19327: PUSH
19328: LD_INT 25
19330: PUSH
19331: LD_INT 1
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 25
19340: PUSH
19341: LD_INT 2
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PUSH
19348: LD_INT 25
19350: PUSH
19351: LD_INT 3
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: LD_INT 25
19360: PUSH
19361: LD_INT 4
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PUSH
19368: LD_INT 25
19370: PUSH
19371: LD_INT 5
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: LD_INT 25
19380: PUSH
19381: LD_INT 8
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: PUSH
19388: EMPTY
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: PPUSH
19403: CALL_OW 69
19407: PUSH
19408: LD_EXP 1
19412: PUSH
19413: LD_EXP 7
19417: PUSH
19418: LD_EXP 3
19422: PUSH
19423: LD_EXP 4
19427: PUSH
19428: LD_EXP 5
19432: PUSH
19433: LD_EXP 2
19437: PUSH
19438: LD_EXP 12
19442: PUSH
19443: LD_EXP 8
19447: PUSH
19448: LD_EXP 13
19452: PUSH
19453: LD_EXP 6
19457: PUSH
19458: LD_EXP 9
19462: PUSH
19463: LD_EXP 11
19467: PUSH
19468: LD_EXP 10
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: DIFF
19488: PPUSH
19489: LD_STRING 12_other_survivors
19491: PPUSH
19492: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
19496: LD_INT 22
19498: PUSH
19499: LD_INT 1
19501: PUSH
19502: EMPTY
19503: LIST
19504: LIST
19505: PUSH
19506: LD_INT 23
19508: PUSH
19509: LD_INT 2
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: PUSH
19516: LD_INT 21
19518: PUSH
19519: LD_INT 1
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PUSH
19526: LD_INT 2
19528: PUSH
19529: LD_INT 25
19531: PUSH
19532: LD_INT 1
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: PUSH
19539: LD_INT 25
19541: PUSH
19542: LD_INT 2
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: PUSH
19549: LD_INT 25
19551: PUSH
19552: LD_INT 3
19554: PUSH
19555: EMPTY
19556: LIST
19557: LIST
19558: PUSH
19559: LD_INT 25
19561: PUSH
19562: LD_INT 4
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PUSH
19569: LD_INT 25
19571: PUSH
19572: LD_INT 5
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 25
19581: PUSH
19582: LD_INT 8
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: PPUSH
19604: CALL_OW 69
19608: PPUSH
19609: LD_STRING 12_kurt_squad
19611: PPUSH
19612: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
19616: LD_EXP 14
19620: PPUSH
19621: LD_STRING 12_others
19623: PPUSH
19624: CALL_OW 38
// YouWin ;
19628: CALL_OW 103
// end ; end_of_file
19632: LD_VAR 0 1
19636: RET
// every 0 0$01 trigger ruAI and cratesAllow do
19637: LD_EXP 34
19641: IFFALSE 19649
19643: PUSH
19644: LD_EXP 45
19648: AND
19649: IFFALSE 19961
19651: GO 19653
19653: DISABLE
// begin repeat wait ( 0 0$08 ) ;
19654: LD_INT 280
19656: PPUSH
19657: CALL_OW 67
// if cratesSpawned < 12 then
19661: LD_EXP 38
19665: PUSH
19666: LD_INT 12
19668: LESS
19669: IFFALSE 19721
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
19671: LD_INT 105
19673: PPUSH
19674: LD_INT 350
19676: PPUSH
19677: CALL_OW 12
19681: PPUSH
19682: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19686: LD_INT 3
19688: PPUSH
19689: LD_INT 5
19691: PPUSH
19692: CALL_OW 12
19696: PPUSH
19697: LD_INT 21
19699: PPUSH
19700: LD_INT 1
19702: PPUSH
19703: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19707: LD_ADDR_EXP 38
19711: PUSH
19712: LD_EXP 38
19716: PUSH
19717: LD_INT 1
19719: PLUS
19720: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 32 then
19721: LD_EXP 38
19725: PUSH
19726: LD_INT 12
19728: GREATEREQUAL
19729: IFFALSE 19741
19731: PUSH
19732: LD_EXP 38
19736: PUSH
19737: LD_INT 32
19739: LESS
19740: AND
19741: IFFALSE 19793
// begin wait ( rand ( 0 0$12 , 0 0$20 ) ) ;
19743: LD_INT 420
19745: PPUSH
19746: LD_INT 700
19748: PPUSH
19749: CALL_OW 12
19753: PPUSH
19754: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19758: LD_INT 3
19760: PPUSH
19761: LD_INT 5
19763: PPUSH
19764: CALL_OW 12
19768: PPUSH
19769: LD_INT 21
19771: PPUSH
19772: LD_INT 1
19774: PPUSH
19775: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19779: LD_ADDR_EXP 38
19783: PUSH
19784: LD_EXP 38
19788: PUSH
19789: LD_INT 1
19791: PLUS
19792: ST_TO_ADDR
// end ; if cratesSpawned >= 32 then
19793: LD_EXP 38
19797: PUSH
19798: LD_INT 32
19800: GREATEREQUAL
19801: IFFALSE 19875
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
19803: LD_INT 21
19805: PPUSH
19806: CALL_OW 435
19810: PUSH
19811: LD_INT 14
19813: LESS
19814: IFFALSE 19825
// wait ( 0 0$10 ) else
19816: LD_INT 350
19818: PPUSH
19819: CALL_OW 67
19823: GO 19840
// wait ( rand ( 0 0$50 , 1 1$30 ) ) ;
19825: LD_INT 1750
19827: PPUSH
19828: LD_INT 3150
19830: PPUSH
19831: CALL_OW 12
19835: PPUSH
19836: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
19840: LD_INT 2
19842: PPUSH
19843: LD_INT 5
19845: PPUSH
19846: CALL_OW 12
19850: PPUSH
19851: LD_INT 21
19853: PPUSH
19854: LD_INT 1
19856: PPUSH
19857: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19861: LD_ADDR_EXP 38
19865: PUSH
19866: LD_EXP 38
19870: PUSH
19871: LD_INT 1
19873: PLUS
19874: ST_TO_ADDR
// end ; if cratesSpawned >= 110 then
19875: LD_EXP 38
19879: PUSH
19880: LD_INT 110
19882: GREATEREQUAL
19883: IFFALSE 19957
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
19885: LD_INT 21
19887: PPUSH
19888: CALL_OW 435
19892: PUSH
19893: LD_INT 14
19895: LESS
19896: IFFALSE 19907
// wait ( 0 0$20 ) else
19898: LD_INT 700
19900: PPUSH
19901: CALL_OW 67
19905: GO 19922
// wait ( rand ( 1 1$10 , 1 1$50 ) ) ;
19907: LD_INT 2450
19909: PPUSH
19910: LD_INT 3850
19912: PPUSH
19913: CALL_OW 12
19917: PPUSH
19918: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
19922: LD_INT 1
19924: PPUSH
19925: LD_INT 5
19927: PPUSH
19928: CALL_OW 12
19932: PPUSH
19933: LD_INT 21
19935: PPUSH
19936: LD_INT 1
19938: PPUSH
19939: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19943: LD_ADDR_EXP 38
19947: PUSH
19948: LD_EXP 38
19952: PUSH
19953: LD_INT 1
19955: PLUS
19956: ST_TO_ADDR
// end ; until false ;
19957: LD_INT 0
19959: IFFALSE 19654
// end ; end_of_file end_of_file
19961: END
// export globalGameSaveCounter ; every 0 0$1 do
19962: GO 19964
19964: DISABLE
// begin enable ;
19965: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19966: LD_STRING updateTimer(
19968: PUSH
19969: LD_OWVAR 1
19973: STR
19974: PUSH
19975: LD_STRING );
19977: STR
19978: PPUSH
19979: CALL_OW 559
// end ;
19983: END
// every 0 0$1 do
19984: GO 19986
19986: DISABLE
// begin globalGameSaveCounter := 0 ;
19987: LD_ADDR_EXP 46
19991: PUSH
19992: LD_INT 0
19994: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19995: LD_STRING setGameSaveCounter(0)
19997: PPUSH
19998: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20002: LD_STRING initStreamRollete();
20004: PPUSH
20005: CALL_OW 559
// InitStreamMode ;
20009: CALL 21354 0 0
// DefineStreamItems ( false ) ;
20013: LD_INT 0
20015: PPUSH
20016: CALL 21818 0 1
// end ;
20020: END
// export function SOS_MapStart ( ) ; begin
20021: LD_INT 0
20023: PPUSH
// if streamModeActive then
20024: LD_EXP 47
20028: IFFALSE 20037
// DefineStreamItems ( true ) ;
20030: LD_INT 1
20032: PPUSH
20033: CALL 21818 0 1
// UpdateLuaVariables ( ) ;
20037: CALL 20054 0 0
// UpdateFactoryWaypoints ( ) ;
20041: CALL 34940 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20045: CALL 35192 0 0
// end ;
20049: LD_VAR 0 1
20053: RET
// function UpdateLuaVariables ( ) ; begin
20054: LD_INT 0
20056: PPUSH
// if globalGameSaveCounter then
20057: LD_EXP 46
20061: IFFALSE 20095
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20063: LD_ADDR_EXP 46
20067: PUSH
20068: LD_EXP 46
20072: PPUSH
20073: CALL 80972 0 1
20077: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20078: LD_STRING setGameSaveCounter(
20080: PUSH
20081: LD_EXP 46
20085: STR
20086: PUSH
20087: LD_STRING )
20089: STR
20090: PPUSH
20091: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20095: LD_STRING setGameDifficulty(
20097: PUSH
20098: LD_OWVAR 67
20102: STR
20103: PUSH
20104: LD_STRING )
20106: STR
20107: PPUSH
20108: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
20112: LD_STRING displayDifficulty(
20114: PUSH
20115: LD_OWVAR 67
20119: STR
20120: PUSH
20121: LD_STRING )
20123: STR
20124: PPUSH
20125: CALL_OW 559
// end ;
20129: LD_VAR 0 1
20133: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20134: LD_INT 0
20136: PPUSH
// if p2 = stream_mode then
20137: LD_VAR 0 2
20141: PUSH
20142: LD_INT 100
20144: EQUAL
20145: IFFALSE 21148
// begin if not StreamModeActive then
20147: LD_EXP 47
20151: NOT
20152: IFFALSE 20162
// StreamModeActive := true ;
20154: LD_ADDR_EXP 47
20158: PUSH
20159: LD_INT 1
20161: ST_TO_ADDR
// if p3 = 0 then
20162: LD_VAR 0 3
20166: PUSH
20167: LD_INT 0
20169: EQUAL
20170: IFFALSE 20176
// InitStreamMode ;
20172: CALL 21354 0 0
// if p3 = 1 then
20176: LD_VAR 0 3
20180: PUSH
20181: LD_INT 1
20183: EQUAL
20184: IFFALSE 20194
// sRocket := true ;
20186: LD_ADDR_EXP 52
20190: PUSH
20191: LD_INT 1
20193: ST_TO_ADDR
// if p3 = 2 then
20194: LD_VAR 0 3
20198: PUSH
20199: LD_INT 2
20201: EQUAL
20202: IFFALSE 20212
// sSpeed := true ;
20204: LD_ADDR_EXP 51
20208: PUSH
20209: LD_INT 1
20211: ST_TO_ADDR
// if p3 = 3 then
20212: LD_VAR 0 3
20216: PUSH
20217: LD_INT 3
20219: EQUAL
20220: IFFALSE 20230
// sEngine := true ;
20222: LD_ADDR_EXP 53
20226: PUSH
20227: LD_INT 1
20229: ST_TO_ADDR
// if p3 = 4 then
20230: LD_VAR 0 3
20234: PUSH
20235: LD_INT 4
20237: EQUAL
20238: IFFALSE 20248
// sSpec := true ;
20240: LD_ADDR_EXP 50
20244: PUSH
20245: LD_INT 1
20247: ST_TO_ADDR
// if p3 = 5 then
20248: LD_VAR 0 3
20252: PUSH
20253: LD_INT 5
20255: EQUAL
20256: IFFALSE 20266
// sLevel := true ;
20258: LD_ADDR_EXP 54
20262: PUSH
20263: LD_INT 1
20265: ST_TO_ADDR
// if p3 = 6 then
20266: LD_VAR 0 3
20270: PUSH
20271: LD_INT 6
20273: EQUAL
20274: IFFALSE 20284
// sArmoury := true ;
20276: LD_ADDR_EXP 55
20280: PUSH
20281: LD_INT 1
20283: ST_TO_ADDR
// if p3 = 7 then
20284: LD_VAR 0 3
20288: PUSH
20289: LD_INT 7
20291: EQUAL
20292: IFFALSE 20302
// sRadar := true ;
20294: LD_ADDR_EXP 56
20298: PUSH
20299: LD_INT 1
20301: ST_TO_ADDR
// if p3 = 8 then
20302: LD_VAR 0 3
20306: PUSH
20307: LD_INT 8
20309: EQUAL
20310: IFFALSE 20320
// sBunker := true ;
20312: LD_ADDR_EXP 57
20316: PUSH
20317: LD_INT 1
20319: ST_TO_ADDR
// if p3 = 9 then
20320: LD_VAR 0 3
20324: PUSH
20325: LD_INT 9
20327: EQUAL
20328: IFFALSE 20338
// sHack := true ;
20330: LD_ADDR_EXP 58
20334: PUSH
20335: LD_INT 1
20337: ST_TO_ADDR
// if p3 = 10 then
20338: LD_VAR 0 3
20342: PUSH
20343: LD_INT 10
20345: EQUAL
20346: IFFALSE 20356
// sFire := true ;
20348: LD_ADDR_EXP 59
20352: PUSH
20353: LD_INT 1
20355: ST_TO_ADDR
// if p3 = 11 then
20356: LD_VAR 0 3
20360: PUSH
20361: LD_INT 11
20363: EQUAL
20364: IFFALSE 20374
// sRefresh := true ;
20366: LD_ADDR_EXP 60
20370: PUSH
20371: LD_INT 1
20373: ST_TO_ADDR
// if p3 = 12 then
20374: LD_VAR 0 3
20378: PUSH
20379: LD_INT 12
20381: EQUAL
20382: IFFALSE 20392
// sExp := true ;
20384: LD_ADDR_EXP 61
20388: PUSH
20389: LD_INT 1
20391: ST_TO_ADDR
// if p3 = 13 then
20392: LD_VAR 0 3
20396: PUSH
20397: LD_INT 13
20399: EQUAL
20400: IFFALSE 20410
// sDepot := true ;
20402: LD_ADDR_EXP 62
20406: PUSH
20407: LD_INT 1
20409: ST_TO_ADDR
// if p3 = 14 then
20410: LD_VAR 0 3
20414: PUSH
20415: LD_INT 14
20417: EQUAL
20418: IFFALSE 20428
// sFlag := true ;
20420: LD_ADDR_EXP 63
20424: PUSH
20425: LD_INT 1
20427: ST_TO_ADDR
// if p3 = 15 then
20428: LD_VAR 0 3
20432: PUSH
20433: LD_INT 15
20435: EQUAL
20436: IFFALSE 20446
// sKamikadze := true ;
20438: LD_ADDR_EXP 71
20442: PUSH
20443: LD_INT 1
20445: ST_TO_ADDR
// if p3 = 16 then
20446: LD_VAR 0 3
20450: PUSH
20451: LD_INT 16
20453: EQUAL
20454: IFFALSE 20464
// sTroll := true ;
20456: LD_ADDR_EXP 72
20460: PUSH
20461: LD_INT 1
20463: ST_TO_ADDR
// if p3 = 17 then
20464: LD_VAR 0 3
20468: PUSH
20469: LD_INT 17
20471: EQUAL
20472: IFFALSE 20482
// sSlow := true ;
20474: LD_ADDR_EXP 73
20478: PUSH
20479: LD_INT 1
20481: ST_TO_ADDR
// if p3 = 18 then
20482: LD_VAR 0 3
20486: PUSH
20487: LD_INT 18
20489: EQUAL
20490: IFFALSE 20500
// sLack := true ;
20492: LD_ADDR_EXP 74
20496: PUSH
20497: LD_INT 1
20499: ST_TO_ADDR
// if p3 = 19 then
20500: LD_VAR 0 3
20504: PUSH
20505: LD_INT 19
20507: EQUAL
20508: IFFALSE 20518
// sTank := true ;
20510: LD_ADDR_EXP 76
20514: PUSH
20515: LD_INT 1
20517: ST_TO_ADDR
// if p3 = 20 then
20518: LD_VAR 0 3
20522: PUSH
20523: LD_INT 20
20525: EQUAL
20526: IFFALSE 20536
// sRemote := true ;
20528: LD_ADDR_EXP 77
20532: PUSH
20533: LD_INT 1
20535: ST_TO_ADDR
// if p3 = 21 then
20536: LD_VAR 0 3
20540: PUSH
20541: LD_INT 21
20543: EQUAL
20544: IFFALSE 20554
// sPowell := true ;
20546: LD_ADDR_EXP 78
20550: PUSH
20551: LD_INT 1
20553: ST_TO_ADDR
// if p3 = 22 then
20554: LD_VAR 0 3
20558: PUSH
20559: LD_INT 22
20561: EQUAL
20562: IFFALSE 20572
// sTeleport := true ;
20564: LD_ADDR_EXP 81
20568: PUSH
20569: LD_INT 1
20571: ST_TO_ADDR
// if p3 = 23 then
20572: LD_VAR 0 3
20576: PUSH
20577: LD_INT 23
20579: EQUAL
20580: IFFALSE 20590
// sOilTower := true ;
20582: LD_ADDR_EXP 83
20586: PUSH
20587: LD_INT 1
20589: ST_TO_ADDR
// if p3 = 24 then
20590: LD_VAR 0 3
20594: PUSH
20595: LD_INT 24
20597: EQUAL
20598: IFFALSE 20608
// sShovel := true ;
20600: LD_ADDR_EXP 84
20604: PUSH
20605: LD_INT 1
20607: ST_TO_ADDR
// if p3 = 25 then
20608: LD_VAR 0 3
20612: PUSH
20613: LD_INT 25
20615: EQUAL
20616: IFFALSE 20626
// sSheik := true ;
20618: LD_ADDR_EXP 85
20622: PUSH
20623: LD_INT 1
20625: ST_TO_ADDR
// if p3 = 26 then
20626: LD_VAR 0 3
20630: PUSH
20631: LD_INT 26
20633: EQUAL
20634: IFFALSE 20644
// sEarthquake := true ;
20636: LD_ADDR_EXP 87
20640: PUSH
20641: LD_INT 1
20643: ST_TO_ADDR
// if p3 = 27 then
20644: LD_VAR 0 3
20648: PUSH
20649: LD_INT 27
20651: EQUAL
20652: IFFALSE 20662
// sAI := true ;
20654: LD_ADDR_EXP 88
20658: PUSH
20659: LD_INT 1
20661: ST_TO_ADDR
// if p3 = 28 then
20662: LD_VAR 0 3
20666: PUSH
20667: LD_INT 28
20669: EQUAL
20670: IFFALSE 20680
// sCargo := true ;
20672: LD_ADDR_EXP 91
20676: PUSH
20677: LD_INT 1
20679: ST_TO_ADDR
// if p3 = 29 then
20680: LD_VAR 0 3
20684: PUSH
20685: LD_INT 29
20687: EQUAL
20688: IFFALSE 20698
// sDLaser := true ;
20690: LD_ADDR_EXP 92
20694: PUSH
20695: LD_INT 1
20697: ST_TO_ADDR
// if p3 = 30 then
20698: LD_VAR 0 3
20702: PUSH
20703: LD_INT 30
20705: EQUAL
20706: IFFALSE 20716
// sExchange := true ;
20708: LD_ADDR_EXP 93
20712: PUSH
20713: LD_INT 1
20715: ST_TO_ADDR
// if p3 = 31 then
20716: LD_VAR 0 3
20720: PUSH
20721: LD_INT 31
20723: EQUAL
20724: IFFALSE 20734
// sFac := true ;
20726: LD_ADDR_EXP 94
20730: PUSH
20731: LD_INT 1
20733: ST_TO_ADDR
// if p3 = 32 then
20734: LD_VAR 0 3
20738: PUSH
20739: LD_INT 32
20741: EQUAL
20742: IFFALSE 20752
// sPower := true ;
20744: LD_ADDR_EXP 95
20748: PUSH
20749: LD_INT 1
20751: ST_TO_ADDR
// if p3 = 33 then
20752: LD_VAR 0 3
20756: PUSH
20757: LD_INT 33
20759: EQUAL
20760: IFFALSE 20770
// sRandom := true ;
20762: LD_ADDR_EXP 96
20766: PUSH
20767: LD_INT 1
20769: ST_TO_ADDR
// if p3 = 34 then
20770: LD_VAR 0 3
20774: PUSH
20775: LD_INT 34
20777: EQUAL
20778: IFFALSE 20788
// sShield := true ;
20780: LD_ADDR_EXP 97
20784: PUSH
20785: LD_INT 1
20787: ST_TO_ADDR
// if p3 = 35 then
20788: LD_VAR 0 3
20792: PUSH
20793: LD_INT 35
20795: EQUAL
20796: IFFALSE 20806
// sTime := true ;
20798: LD_ADDR_EXP 98
20802: PUSH
20803: LD_INT 1
20805: ST_TO_ADDR
// if p3 = 36 then
20806: LD_VAR 0 3
20810: PUSH
20811: LD_INT 36
20813: EQUAL
20814: IFFALSE 20824
// sTools := true ;
20816: LD_ADDR_EXP 99
20820: PUSH
20821: LD_INT 1
20823: ST_TO_ADDR
// if p3 = 101 then
20824: LD_VAR 0 3
20828: PUSH
20829: LD_INT 101
20831: EQUAL
20832: IFFALSE 20842
// sSold := true ;
20834: LD_ADDR_EXP 64
20838: PUSH
20839: LD_INT 1
20841: ST_TO_ADDR
// if p3 = 102 then
20842: LD_VAR 0 3
20846: PUSH
20847: LD_INT 102
20849: EQUAL
20850: IFFALSE 20860
// sDiff := true ;
20852: LD_ADDR_EXP 65
20856: PUSH
20857: LD_INT 1
20859: ST_TO_ADDR
// if p3 = 103 then
20860: LD_VAR 0 3
20864: PUSH
20865: LD_INT 103
20867: EQUAL
20868: IFFALSE 20878
// sFog := true ;
20870: LD_ADDR_EXP 68
20874: PUSH
20875: LD_INT 1
20877: ST_TO_ADDR
// if p3 = 104 then
20878: LD_VAR 0 3
20882: PUSH
20883: LD_INT 104
20885: EQUAL
20886: IFFALSE 20896
// sReset := true ;
20888: LD_ADDR_EXP 69
20892: PUSH
20893: LD_INT 1
20895: ST_TO_ADDR
// if p3 = 105 then
20896: LD_VAR 0 3
20900: PUSH
20901: LD_INT 105
20903: EQUAL
20904: IFFALSE 20914
// sSun := true ;
20906: LD_ADDR_EXP 70
20910: PUSH
20911: LD_INT 1
20913: ST_TO_ADDR
// if p3 = 106 then
20914: LD_VAR 0 3
20918: PUSH
20919: LD_INT 106
20921: EQUAL
20922: IFFALSE 20932
// sTiger := true ;
20924: LD_ADDR_EXP 66
20928: PUSH
20929: LD_INT 1
20931: ST_TO_ADDR
// if p3 = 107 then
20932: LD_VAR 0 3
20936: PUSH
20937: LD_INT 107
20939: EQUAL
20940: IFFALSE 20950
// sBomb := true ;
20942: LD_ADDR_EXP 67
20946: PUSH
20947: LD_INT 1
20949: ST_TO_ADDR
// if p3 = 108 then
20950: LD_VAR 0 3
20954: PUSH
20955: LD_INT 108
20957: EQUAL
20958: IFFALSE 20968
// sWound := true ;
20960: LD_ADDR_EXP 75
20964: PUSH
20965: LD_INT 1
20967: ST_TO_ADDR
// if p3 = 109 then
20968: LD_VAR 0 3
20972: PUSH
20973: LD_INT 109
20975: EQUAL
20976: IFFALSE 20986
// sBetray := true ;
20978: LD_ADDR_EXP 79
20982: PUSH
20983: LD_INT 1
20985: ST_TO_ADDR
// if p3 = 110 then
20986: LD_VAR 0 3
20990: PUSH
20991: LD_INT 110
20993: EQUAL
20994: IFFALSE 21004
// sContamin := true ;
20996: LD_ADDR_EXP 80
21000: PUSH
21001: LD_INT 1
21003: ST_TO_ADDR
// if p3 = 111 then
21004: LD_VAR 0 3
21008: PUSH
21009: LD_INT 111
21011: EQUAL
21012: IFFALSE 21022
// sOil := true ;
21014: LD_ADDR_EXP 82
21018: PUSH
21019: LD_INT 1
21021: ST_TO_ADDR
// if p3 = 112 then
21022: LD_VAR 0 3
21026: PUSH
21027: LD_INT 112
21029: EQUAL
21030: IFFALSE 21040
// sStu := true ;
21032: LD_ADDR_EXP 86
21036: PUSH
21037: LD_INT 1
21039: ST_TO_ADDR
// if p3 = 113 then
21040: LD_VAR 0 3
21044: PUSH
21045: LD_INT 113
21047: EQUAL
21048: IFFALSE 21058
// sBazooka := true ;
21050: LD_ADDR_EXP 89
21054: PUSH
21055: LD_INT 1
21057: ST_TO_ADDR
// if p3 = 114 then
21058: LD_VAR 0 3
21062: PUSH
21063: LD_INT 114
21065: EQUAL
21066: IFFALSE 21076
// sMortar := true ;
21068: LD_ADDR_EXP 90
21072: PUSH
21073: LD_INT 1
21075: ST_TO_ADDR
// if p3 = 115 then
21076: LD_VAR 0 3
21080: PUSH
21081: LD_INT 115
21083: EQUAL
21084: IFFALSE 21094
// sRanger := true ;
21086: LD_ADDR_EXP 100
21090: PUSH
21091: LD_INT 1
21093: ST_TO_ADDR
// if p3 = 116 then
21094: LD_VAR 0 3
21098: PUSH
21099: LD_INT 116
21101: EQUAL
21102: IFFALSE 21112
// sComputer := true ;
21104: LD_ADDR_EXP 101
21108: PUSH
21109: LD_INT 1
21111: ST_TO_ADDR
// if p3 = 117 then
21112: LD_VAR 0 3
21116: PUSH
21117: LD_INT 117
21119: EQUAL
21120: IFFALSE 21130
// s30 := true ;
21122: LD_ADDR_EXP 102
21126: PUSH
21127: LD_INT 1
21129: ST_TO_ADDR
// if p3 = 118 then
21130: LD_VAR 0 3
21134: PUSH
21135: LD_INT 118
21137: EQUAL
21138: IFFALSE 21148
// s60 := true ;
21140: LD_ADDR_EXP 103
21144: PUSH
21145: LD_INT 1
21147: ST_TO_ADDR
// end ; if p2 = hack_mode then
21148: LD_VAR 0 2
21152: PUSH
21153: LD_INT 101
21155: EQUAL
21156: IFFALSE 21284
// begin case p3 of 1 :
21158: LD_VAR 0 3
21162: PUSH
21163: LD_INT 1
21165: DOUBLE
21166: EQUAL
21167: IFTRUE 21171
21169: GO 21178
21171: POP
// hHackUnlimitedResources ; 2 :
21172: CALL 33547 0 0
21176: GO 21284
21178: LD_INT 2
21180: DOUBLE
21181: EQUAL
21182: IFTRUE 21186
21184: GO 21193
21186: POP
// hHackSetLevel10 ; 3 :
21187: CALL 33680 0 0
21191: GO 21284
21193: LD_INT 3
21195: DOUBLE
21196: EQUAL
21197: IFTRUE 21201
21199: GO 21208
21201: POP
// hHackSetLevel10YourUnits ; 4 :
21202: CALL 33765 0 0
21206: GO 21284
21208: LD_INT 4
21210: DOUBLE
21211: EQUAL
21212: IFTRUE 21216
21214: GO 21223
21216: POP
// hHackInvincible ; 5 :
21217: CALL 34213 0 0
21221: GO 21284
21223: LD_INT 5
21225: DOUBLE
21226: EQUAL
21227: IFTRUE 21231
21229: GO 21238
21231: POP
// hHackInvisible ; 6 :
21232: CALL 34324 0 0
21236: GO 21284
21238: LD_INT 6
21240: DOUBLE
21241: EQUAL
21242: IFTRUE 21246
21244: GO 21253
21246: POP
// hHackChangeYourSide ; 7 :
21247: CALL 34381 0 0
21251: GO 21284
21253: LD_INT 7
21255: DOUBLE
21256: EQUAL
21257: IFTRUE 21261
21259: GO 21268
21261: POP
// hHackChangeUnitSide ; 8 :
21262: CALL 34423 0 0
21266: GO 21284
21268: LD_INT 8
21270: DOUBLE
21271: EQUAL
21272: IFTRUE 21276
21274: GO 21283
21276: POP
// hHackFog ; end ;
21277: CALL 34524 0 0
21281: GO 21284
21283: POP
// end ; if p2 = game_save_mode then
21284: LD_VAR 0 2
21288: PUSH
21289: LD_INT 102
21291: EQUAL
21292: IFFALSE 21349
// begin if p3 = 1 then
21294: LD_VAR 0 3
21298: PUSH
21299: LD_INT 1
21301: EQUAL
21302: IFFALSE 21314
// globalGameSaveCounter := p4 ;
21304: LD_ADDR_EXP 46
21308: PUSH
21309: LD_VAR 0 4
21313: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21314: LD_VAR 0 3
21318: PUSH
21319: LD_INT 2
21321: EQUAL
21322: IFFALSE 21330
21324: PUSH
21325: LD_EXP 46
21329: AND
21330: IFFALSE 21349
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21332: LD_STRING setGameSaveCounter(
21334: PUSH
21335: LD_EXP 46
21339: STR
21340: PUSH
21341: LD_STRING )
21343: STR
21344: PPUSH
21345: CALL_OW 559
// end ; end ;
21349: LD_VAR 0 7
21353: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21354: LD_INT 0
21356: PPUSH
// streamModeActive := false ;
21357: LD_ADDR_EXP 47
21361: PUSH
21362: LD_INT 0
21364: ST_TO_ADDR
// normalCounter := 36 ;
21365: LD_ADDR_EXP 48
21369: PUSH
21370: LD_INT 36
21372: ST_TO_ADDR
// hardcoreCounter := 18 ;
21373: LD_ADDR_EXP 49
21377: PUSH
21378: LD_INT 18
21380: ST_TO_ADDR
// sRocket := false ;
21381: LD_ADDR_EXP 52
21385: PUSH
21386: LD_INT 0
21388: ST_TO_ADDR
// sSpeed := false ;
21389: LD_ADDR_EXP 51
21393: PUSH
21394: LD_INT 0
21396: ST_TO_ADDR
// sEngine := false ;
21397: LD_ADDR_EXP 53
21401: PUSH
21402: LD_INT 0
21404: ST_TO_ADDR
// sSpec := false ;
21405: LD_ADDR_EXP 50
21409: PUSH
21410: LD_INT 0
21412: ST_TO_ADDR
// sLevel := false ;
21413: LD_ADDR_EXP 54
21417: PUSH
21418: LD_INT 0
21420: ST_TO_ADDR
// sArmoury := false ;
21421: LD_ADDR_EXP 55
21425: PUSH
21426: LD_INT 0
21428: ST_TO_ADDR
// sRadar := false ;
21429: LD_ADDR_EXP 56
21433: PUSH
21434: LD_INT 0
21436: ST_TO_ADDR
// sBunker := false ;
21437: LD_ADDR_EXP 57
21441: PUSH
21442: LD_INT 0
21444: ST_TO_ADDR
// sHack := false ;
21445: LD_ADDR_EXP 58
21449: PUSH
21450: LD_INT 0
21452: ST_TO_ADDR
// sFire := false ;
21453: LD_ADDR_EXP 59
21457: PUSH
21458: LD_INT 0
21460: ST_TO_ADDR
// sRefresh := false ;
21461: LD_ADDR_EXP 60
21465: PUSH
21466: LD_INT 0
21468: ST_TO_ADDR
// sExp := false ;
21469: LD_ADDR_EXP 61
21473: PUSH
21474: LD_INT 0
21476: ST_TO_ADDR
// sDepot := false ;
21477: LD_ADDR_EXP 62
21481: PUSH
21482: LD_INT 0
21484: ST_TO_ADDR
// sFlag := false ;
21485: LD_ADDR_EXP 63
21489: PUSH
21490: LD_INT 0
21492: ST_TO_ADDR
// sKamikadze := false ;
21493: LD_ADDR_EXP 71
21497: PUSH
21498: LD_INT 0
21500: ST_TO_ADDR
// sTroll := false ;
21501: LD_ADDR_EXP 72
21505: PUSH
21506: LD_INT 0
21508: ST_TO_ADDR
// sSlow := false ;
21509: LD_ADDR_EXP 73
21513: PUSH
21514: LD_INT 0
21516: ST_TO_ADDR
// sLack := false ;
21517: LD_ADDR_EXP 74
21521: PUSH
21522: LD_INT 0
21524: ST_TO_ADDR
// sTank := false ;
21525: LD_ADDR_EXP 76
21529: PUSH
21530: LD_INT 0
21532: ST_TO_ADDR
// sRemote := false ;
21533: LD_ADDR_EXP 77
21537: PUSH
21538: LD_INT 0
21540: ST_TO_ADDR
// sPowell := false ;
21541: LD_ADDR_EXP 78
21545: PUSH
21546: LD_INT 0
21548: ST_TO_ADDR
// sTeleport := false ;
21549: LD_ADDR_EXP 81
21553: PUSH
21554: LD_INT 0
21556: ST_TO_ADDR
// sOilTower := false ;
21557: LD_ADDR_EXP 83
21561: PUSH
21562: LD_INT 0
21564: ST_TO_ADDR
// sShovel := false ;
21565: LD_ADDR_EXP 84
21569: PUSH
21570: LD_INT 0
21572: ST_TO_ADDR
// sSheik := false ;
21573: LD_ADDR_EXP 85
21577: PUSH
21578: LD_INT 0
21580: ST_TO_ADDR
// sEarthquake := false ;
21581: LD_ADDR_EXP 87
21585: PUSH
21586: LD_INT 0
21588: ST_TO_ADDR
// sAI := false ;
21589: LD_ADDR_EXP 88
21593: PUSH
21594: LD_INT 0
21596: ST_TO_ADDR
// sCargo := false ;
21597: LD_ADDR_EXP 91
21601: PUSH
21602: LD_INT 0
21604: ST_TO_ADDR
// sDLaser := false ;
21605: LD_ADDR_EXP 92
21609: PUSH
21610: LD_INT 0
21612: ST_TO_ADDR
// sExchange := false ;
21613: LD_ADDR_EXP 93
21617: PUSH
21618: LD_INT 0
21620: ST_TO_ADDR
// sFac := false ;
21621: LD_ADDR_EXP 94
21625: PUSH
21626: LD_INT 0
21628: ST_TO_ADDR
// sPower := false ;
21629: LD_ADDR_EXP 95
21633: PUSH
21634: LD_INT 0
21636: ST_TO_ADDR
// sRandom := false ;
21637: LD_ADDR_EXP 96
21641: PUSH
21642: LD_INT 0
21644: ST_TO_ADDR
// sShield := false ;
21645: LD_ADDR_EXP 97
21649: PUSH
21650: LD_INT 0
21652: ST_TO_ADDR
// sTime := false ;
21653: LD_ADDR_EXP 98
21657: PUSH
21658: LD_INT 0
21660: ST_TO_ADDR
// sTools := false ;
21661: LD_ADDR_EXP 99
21665: PUSH
21666: LD_INT 0
21668: ST_TO_ADDR
// sSold := false ;
21669: LD_ADDR_EXP 64
21673: PUSH
21674: LD_INT 0
21676: ST_TO_ADDR
// sDiff := false ;
21677: LD_ADDR_EXP 65
21681: PUSH
21682: LD_INT 0
21684: ST_TO_ADDR
// sFog := false ;
21685: LD_ADDR_EXP 68
21689: PUSH
21690: LD_INT 0
21692: ST_TO_ADDR
// sReset := false ;
21693: LD_ADDR_EXP 69
21697: PUSH
21698: LD_INT 0
21700: ST_TO_ADDR
// sSun := false ;
21701: LD_ADDR_EXP 70
21705: PUSH
21706: LD_INT 0
21708: ST_TO_ADDR
// sTiger := false ;
21709: LD_ADDR_EXP 66
21713: PUSH
21714: LD_INT 0
21716: ST_TO_ADDR
// sBomb := false ;
21717: LD_ADDR_EXP 67
21721: PUSH
21722: LD_INT 0
21724: ST_TO_ADDR
// sWound := false ;
21725: LD_ADDR_EXP 75
21729: PUSH
21730: LD_INT 0
21732: ST_TO_ADDR
// sBetray := false ;
21733: LD_ADDR_EXP 79
21737: PUSH
21738: LD_INT 0
21740: ST_TO_ADDR
// sContamin := false ;
21741: LD_ADDR_EXP 80
21745: PUSH
21746: LD_INT 0
21748: ST_TO_ADDR
// sOil := false ;
21749: LD_ADDR_EXP 82
21753: PUSH
21754: LD_INT 0
21756: ST_TO_ADDR
// sStu := false ;
21757: LD_ADDR_EXP 86
21761: PUSH
21762: LD_INT 0
21764: ST_TO_ADDR
// sBazooka := false ;
21765: LD_ADDR_EXP 89
21769: PUSH
21770: LD_INT 0
21772: ST_TO_ADDR
// sMortar := false ;
21773: LD_ADDR_EXP 90
21777: PUSH
21778: LD_INT 0
21780: ST_TO_ADDR
// sRanger := false ;
21781: LD_ADDR_EXP 100
21785: PUSH
21786: LD_INT 0
21788: ST_TO_ADDR
// sComputer := false ;
21789: LD_ADDR_EXP 101
21793: PUSH
21794: LD_INT 0
21796: ST_TO_ADDR
// s30 := false ;
21797: LD_ADDR_EXP 102
21801: PUSH
21802: LD_INT 0
21804: ST_TO_ADDR
// s60 := false ;
21805: LD_ADDR_EXP 103
21809: PUSH
21810: LD_INT 0
21812: ST_TO_ADDR
// end ;
21813: LD_VAR 0 1
21817: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21818: LD_INT 0
21820: PPUSH
21821: PPUSH
21822: PPUSH
21823: PPUSH
21824: PPUSH
21825: PPUSH
21826: PPUSH
// result := [ ] ;
21827: LD_ADDR_VAR 0 2
21831: PUSH
21832: EMPTY
21833: ST_TO_ADDR
// if campaign_id = 1 then
21834: LD_OWVAR 69
21838: PUSH
21839: LD_INT 1
21841: EQUAL
21842: IFFALSE 25008
// begin case mission_number of 1 :
21844: LD_OWVAR 70
21848: PUSH
21849: LD_INT 1
21851: DOUBLE
21852: EQUAL
21853: IFTRUE 21857
21855: GO 21933
21857: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21858: LD_ADDR_VAR 0 2
21862: PUSH
21863: LD_INT 2
21865: PUSH
21866: LD_INT 4
21868: PUSH
21869: LD_INT 11
21871: PUSH
21872: LD_INT 12
21874: PUSH
21875: LD_INT 15
21877: PUSH
21878: LD_INT 16
21880: PUSH
21881: LD_INT 22
21883: PUSH
21884: LD_INT 23
21886: PUSH
21887: LD_INT 26
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: PUSH
21901: LD_INT 101
21903: PUSH
21904: LD_INT 102
21906: PUSH
21907: LD_INT 106
21909: PUSH
21910: LD_INT 116
21912: PUSH
21913: LD_INT 117
21915: PUSH
21916: LD_INT 118
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: ST_TO_ADDR
21931: GO 25006
21933: LD_INT 2
21935: DOUBLE
21936: EQUAL
21937: IFTRUE 21941
21939: GO 22025
21941: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21942: LD_ADDR_VAR 0 2
21946: PUSH
21947: LD_INT 2
21949: PUSH
21950: LD_INT 4
21952: PUSH
21953: LD_INT 11
21955: PUSH
21956: LD_INT 12
21958: PUSH
21959: LD_INT 15
21961: PUSH
21962: LD_INT 16
21964: PUSH
21965: LD_INT 22
21967: PUSH
21968: LD_INT 23
21970: PUSH
21971: LD_INT 26
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: PUSH
21985: LD_INT 101
21987: PUSH
21988: LD_INT 102
21990: PUSH
21991: LD_INT 105
21993: PUSH
21994: LD_INT 106
21996: PUSH
21997: LD_INT 108
21999: PUSH
22000: LD_INT 116
22002: PUSH
22003: LD_INT 117
22005: PUSH
22006: LD_INT 118
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: ST_TO_ADDR
22023: GO 25006
22025: LD_INT 3
22027: DOUBLE
22028: EQUAL
22029: IFTRUE 22033
22031: GO 22121
22033: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22034: LD_ADDR_VAR 0 2
22038: PUSH
22039: LD_INT 2
22041: PUSH
22042: LD_INT 4
22044: PUSH
22045: LD_INT 5
22047: PUSH
22048: LD_INT 11
22050: PUSH
22051: LD_INT 12
22053: PUSH
22054: LD_INT 15
22056: PUSH
22057: LD_INT 16
22059: PUSH
22060: LD_INT 22
22062: PUSH
22063: LD_INT 26
22065: PUSH
22066: LD_INT 36
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: PUSH
22081: LD_INT 101
22083: PUSH
22084: LD_INT 102
22086: PUSH
22087: LD_INT 105
22089: PUSH
22090: LD_INT 106
22092: PUSH
22093: LD_INT 108
22095: PUSH
22096: LD_INT 116
22098: PUSH
22099: LD_INT 117
22101: PUSH
22102: LD_INT 118
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: ST_TO_ADDR
22119: GO 25006
22121: LD_INT 4
22123: DOUBLE
22124: EQUAL
22125: IFTRUE 22129
22127: GO 22225
22129: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22130: LD_ADDR_VAR 0 2
22134: PUSH
22135: LD_INT 2
22137: PUSH
22138: LD_INT 4
22140: PUSH
22141: LD_INT 5
22143: PUSH
22144: LD_INT 8
22146: PUSH
22147: LD_INT 11
22149: PUSH
22150: LD_INT 12
22152: PUSH
22153: LD_INT 15
22155: PUSH
22156: LD_INT 16
22158: PUSH
22159: LD_INT 22
22161: PUSH
22162: LD_INT 23
22164: PUSH
22165: LD_INT 26
22167: PUSH
22168: LD_INT 36
22170: PUSH
22171: EMPTY
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: PUSH
22185: LD_INT 101
22187: PUSH
22188: LD_INT 102
22190: PUSH
22191: LD_INT 105
22193: PUSH
22194: LD_INT 106
22196: PUSH
22197: LD_INT 108
22199: PUSH
22200: LD_INT 116
22202: PUSH
22203: LD_INT 117
22205: PUSH
22206: LD_INT 118
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: ST_TO_ADDR
22223: GO 25006
22225: LD_INT 5
22227: DOUBLE
22228: EQUAL
22229: IFTRUE 22233
22231: GO 22345
22233: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22234: LD_ADDR_VAR 0 2
22238: PUSH
22239: LD_INT 2
22241: PUSH
22242: LD_INT 4
22244: PUSH
22245: LD_INT 5
22247: PUSH
22248: LD_INT 6
22250: PUSH
22251: LD_INT 8
22253: PUSH
22254: LD_INT 11
22256: PUSH
22257: LD_INT 12
22259: PUSH
22260: LD_INT 15
22262: PUSH
22263: LD_INT 16
22265: PUSH
22266: LD_INT 22
22268: PUSH
22269: LD_INT 23
22271: PUSH
22272: LD_INT 25
22274: PUSH
22275: LD_INT 26
22277: PUSH
22278: LD_INT 36
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: PUSH
22297: LD_INT 101
22299: PUSH
22300: LD_INT 102
22302: PUSH
22303: LD_INT 105
22305: PUSH
22306: LD_INT 106
22308: PUSH
22309: LD_INT 108
22311: PUSH
22312: LD_INT 109
22314: PUSH
22315: LD_INT 112
22317: PUSH
22318: LD_INT 116
22320: PUSH
22321: LD_INT 117
22323: PUSH
22324: LD_INT 118
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: ST_TO_ADDR
22343: GO 25006
22345: LD_INT 6
22347: DOUBLE
22348: EQUAL
22349: IFTRUE 22353
22351: GO 22485
22353: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22354: LD_ADDR_VAR 0 2
22358: PUSH
22359: LD_INT 2
22361: PUSH
22362: LD_INT 4
22364: PUSH
22365: LD_INT 5
22367: PUSH
22368: LD_INT 6
22370: PUSH
22371: LD_INT 8
22373: PUSH
22374: LD_INT 11
22376: PUSH
22377: LD_INT 12
22379: PUSH
22380: LD_INT 15
22382: PUSH
22383: LD_INT 16
22385: PUSH
22386: LD_INT 20
22388: PUSH
22389: LD_INT 21
22391: PUSH
22392: LD_INT 22
22394: PUSH
22395: LD_INT 23
22397: PUSH
22398: LD_INT 25
22400: PUSH
22401: LD_INT 26
22403: PUSH
22404: LD_INT 30
22406: PUSH
22407: LD_INT 31
22409: PUSH
22410: LD_INT 32
22412: PUSH
22413: LD_INT 36
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: PUSH
22437: LD_INT 101
22439: PUSH
22440: LD_INT 102
22442: PUSH
22443: LD_INT 105
22445: PUSH
22446: LD_INT 106
22448: PUSH
22449: LD_INT 108
22451: PUSH
22452: LD_INT 109
22454: PUSH
22455: LD_INT 112
22457: PUSH
22458: LD_INT 116
22460: PUSH
22461: LD_INT 117
22463: PUSH
22464: LD_INT 118
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: ST_TO_ADDR
22483: GO 25006
22485: LD_INT 7
22487: DOUBLE
22488: EQUAL
22489: IFTRUE 22493
22491: GO 22605
22493: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22494: LD_ADDR_VAR 0 2
22498: PUSH
22499: LD_INT 2
22501: PUSH
22502: LD_INT 4
22504: PUSH
22505: LD_INT 5
22507: PUSH
22508: LD_INT 7
22510: PUSH
22511: LD_INT 11
22513: PUSH
22514: LD_INT 12
22516: PUSH
22517: LD_INT 15
22519: PUSH
22520: LD_INT 16
22522: PUSH
22523: LD_INT 20
22525: PUSH
22526: LD_INT 21
22528: PUSH
22529: LD_INT 22
22531: PUSH
22532: LD_INT 23
22534: PUSH
22535: LD_INT 25
22537: PUSH
22538: LD_INT 26
22540: PUSH
22541: EMPTY
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: PUSH
22557: LD_INT 101
22559: PUSH
22560: LD_INT 102
22562: PUSH
22563: LD_INT 103
22565: PUSH
22566: LD_INT 105
22568: PUSH
22569: LD_INT 106
22571: PUSH
22572: LD_INT 108
22574: PUSH
22575: LD_INT 112
22577: PUSH
22578: LD_INT 116
22580: PUSH
22581: LD_INT 117
22583: PUSH
22584: LD_INT 118
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: ST_TO_ADDR
22603: GO 25006
22605: LD_INT 8
22607: DOUBLE
22608: EQUAL
22609: IFTRUE 22613
22611: GO 22753
22613: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22614: LD_ADDR_VAR 0 2
22618: PUSH
22619: LD_INT 2
22621: PUSH
22622: LD_INT 4
22624: PUSH
22625: LD_INT 5
22627: PUSH
22628: LD_INT 6
22630: PUSH
22631: LD_INT 7
22633: PUSH
22634: LD_INT 8
22636: PUSH
22637: LD_INT 11
22639: PUSH
22640: LD_INT 12
22642: PUSH
22643: LD_INT 15
22645: PUSH
22646: LD_INT 16
22648: PUSH
22649: LD_INT 20
22651: PUSH
22652: LD_INT 21
22654: PUSH
22655: LD_INT 22
22657: PUSH
22658: LD_INT 23
22660: PUSH
22661: LD_INT 25
22663: PUSH
22664: LD_INT 26
22666: PUSH
22667: LD_INT 30
22669: PUSH
22670: LD_INT 31
22672: PUSH
22673: LD_INT 32
22675: PUSH
22676: LD_INT 36
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: PUSH
22701: LD_INT 101
22703: PUSH
22704: LD_INT 102
22706: PUSH
22707: LD_INT 103
22709: PUSH
22710: LD_INT 105
22712: PUSH
22713: LD_INT 106
22715: PUSH
22716: LD_INT 108
22718: PUSH
22719: LD_INT 109
22721: PUSH
22722: LD_INT 112
22724: PUSH
22725: LD_INT 116
22727: PUSH
22728: LD_INT 117
22730: PUSH
22731: LD_INT 118
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: ST_TO_ADDR
22751: GO 25006
22753: LD_INT 9
22755: DOUBLE
22756: EQUAL
22757: IFTRUE 22761
22759: GO 22909
22761: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22762: LD_ADDR_VAR 0 2
22766: PUSH
22767: LD_INT 2
22769: PUSH
22770: LD_INT 4
22772: PUSH
22773: LD_INT 5
22775: PUSH
22776: LD_INT 6
22778: PUSH
22779: LD_INT 7
22781: PUSH
22782: LD_INT 8
22784: PUSH
22785: LD_INT 11
22787: PUSH
22788: LD_INT 12
22790: PUSH
22791: LD_INT 15
22793: PUSH
22794: LD_INT 16
22796: PUSH
22797: LD_INT 20
22799: PUSH
22800: LD_INT 21
22802: PUSH
22803: LD_INT 22
22805: PUSH
22806: LD_INT 23
22808: PUSH
22809: LD_INT 25
22811: PUSH
22812: LD_INT 26
22814: PUSH
22815: LD_INT 28
22817: PUSH
22818: LD_INT 30
22820: PUSH
22821: LD_INT 31
22823: PUSH
22824: LD_INT 32
22826: PUSH
22827: LD_INT 36
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: PUSH
22853: LD_INT 101
22855: PUSH
22856: LD_INT 102
22858: PUSH
22859: LD_INT 103
22861: PUSH
22862: LD_INT 105
22864: PUSH
22865: LD_INT 106
22867: PUSH
22868: LD_INT 108
22870: PUSH
22871: LD_INT 109
22873: PUSH
22874: LD_INT 112
22876: PUSH
22877: LD_INT 114
22879: PUSH
22880: LD_INT 116
22882: PUSH
22883: LD_INT 117
22885: PUSH
22886: LD_INT 118
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: ST_TO_ADDR
22907: GO 25006
22909: LD_INT 10
22911: DOUBLE
22912: EQUAL
22913: IFTRUE 22917
22915: GO 23113
22917: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22918: LD_ADDR_VAR 0 2
22922: PUSH
22923: LD_INT 2
22925: PUSH
22926: LD_INT 4
22928: PUSH
22929: LD_INT 5
22931: PUSH
22932: LD_INT 6
22934: PUSH
22935: LD_INT 7
22937: PUSH
22938: LD_INT 8
22940: PUSH
22941: LD_INT 9
22943: PUSH
22944: LD_INT 10
22946: PUSH
22947: LD_INT 11
22949: PUSH
22950: LD_INT 12
22952: PUSH
22953: LD_INT 13
22955: PUSH
22956: LD_INT 14
22958: PUSH
22959: LD_INT 15
22961: PUSH
22962: LD_INT 16
22964: PUSH
22965: LD_INT 17
22967: PUSH
22968: LD_INT 18
22970: PUSH
22971: LD_INT 19
22973: PUSH
22974: LD_INT 20
22976: PUSH
22977: LD_INT 21
22979: PUSH
22980: LD_INT 22
22982: PUSH
22983: LD_INT 23
22985: PUSH
22986: LD_INT 24
22988: PUSH
22989: LD_INT 25
22991: PUSH
22992: LD_INT 26
22994: PUSH
22995: LD_INT 28
22997: PUSH
22998: LD_INT 30
23000: PUSH
23001: LD_INT 31
23003: PUSH
23004: LD_INT 32
23006: PUSH
23007: LD_INT 36
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: PUSH
23041: LD_INT 101
23043: PUSH
23044: LD_INT 102
23046: PUSH
23047: LD_INT 103
23049: PUSH
23050: LD_INT 104
23052: PUSH
23053: LD_INT 105
23055: PUSH
23056: LD_INT 106
23058: PUSH
23059: LD_INT 107
23061: PUSH
23062: LD_INT 108
23064: PUSH
23065: LD_INT 109
23067: PUSH
23068: LD_INT 110
23070: PUSH
23071: LD_INT 111
23073: PUSH
23074: LD_INT 112
23076: PUSH
23077: LD_INT 114
23079: PUSH
23080: LD_INT 116
23082: PUSH
23083: LD_INT 117
23085: PUSH
23086: LD_INT 118
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: ST_TO_ADDR
23111: GO 25006
23113: LD_INT 11
23115: DOUBLE
23116: EQUAL
23117: IFTRUE 23121
23119: GO 23325
23121: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23122: LD_ADDR_VAR 0 2
23126: PUSH
23127: LD_INT 2
23129: PUSH
23130: LD_INT 3
23132: PUSH
23133: LD_INT 4
23135: PUSH
23136: LD_INT 5
23138: PUSH
23139: LD_INT 6
23141: PUSH
23142: LD_INT 7
23144: PUSH
23145: LD_INT 8
23147: PUSH
23148: LD_INT 9
23150: PUSH
23151: LD_INT 10
23153: PUSH
23154: LD_INT 11
23156: PUSH
23157: LD_INT 12
23159: PUSH
23160: LD_INT 13
23162: PUSH
23163: LD_INT 14
23165: PUSH
23166: LD_INT 15
23168: PUSH
23169: LD_INT 16
23171: PUSH
23172: LD_INT 17
23174: PUSH
23175: LD_INT 18
23177: PUSH
23178: LD_INT 19
23180: PUSH
23181: LD_INT 20
23183: PUSH
23184: LD_INT 21
23186: PUSH
23187: LD_INT 22
23189: PUSH
23190: LD_INT 23
23192: PUSH
23193: LD_INT 24
23195: PUSH
23196: LD_INT 25
23198: PUSH
23199: LD_INT 26
23201: PUSH
23202: LD_INT 28
23204: PUSH
23205: LD_INT 30
23207: PUSH
23208: LD_INT 31
23210: PUSH
23211: LD_INT 32
23213: PUSH
23214: LD_INT 34
23216: PUSH
23217: LD_INT 36
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: PUSH
23253: LD_INT 101
23255: PUSH
23256: LD_INT 102
23258: PUSH
23259: LD_INT 103
23261: PUSH
23262: LD_INT 104
23264: PUSH
23265: LD_INT 105
23267: PUSH
23268: LD_INT 106
23270: PUSH
23271: LD_INT 107
23273: PUSH
23274: LD_INT 108
23276: PUSH
23277: LD_INT 109
23279: PUSH
23280: LD_INT 110
23282: PUSH
23283: LD_INT 111
23285: PUSH
23286: LD_INT 112
23288: PUSH
23289: LD_INT 114
23291: PUSH
23292: LD_INT 116
23294: PUSH
23295: LD_INT 117
23297: PUSH
23298: LD_INT 118
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: ST_TO_ADDR
23323: GO 25006
23325: LD_INT 12
23327: DOUBLE
23328: EQUAL
23329: IFTRUE 23333
23331: GO 23553
23333: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23334: LD_ADDR_VAR 0 2
23338: PUSH
23339: LD_INT 1
23341: PUSH
23342: LD_INT 2
23344: PUSH
23345: LD_INT 3
23347: PUSH
23348: LD_INT 4
23350: PUSH
23351: LD_INT 5
23353: PUSH
23354: LD_INT 6
23356: PUSH
23357: LD_INT 7
23359: PUSH
23360: LD_INT 8
23362: PUSH
23363: LD_INT 9
23365: PUSH
23366: LD_INT 10
23368: PUSH
23369: LD_INT 11
23371: PUSH
23372: LD_INT 12
23374: PUSH
23375: LD_INT 13
23377: PUSH
23378: LD_INT 14
23380: PUSH
23381: LD_INT 15
23383: PUSH
23384: LD_INT 16
23386: PUSH
23387: LD_INT 17
23389: PUSH
23390: LD_INT 18
23392: PUSH
23393: LD_INT 19
23395: PUSH
23396: LD_INT 20
23398: PUSH
23399: LD_INT 21
23401: PUSH
23402: LD_INT 22
23404: PUSH
23405: LD_INT 23
23407: PUSH
23408: LD_INT 24
23410: PUSH
23411: LD_INT 25
23413: PUSH
23414: LD_INT 26
23416: PUSH
23417: LD_INT 27
23419: PUSH
23420: LD_INT 28
23422: PUSH
23423: LD_INT 30
23425: PUSH
23426: LD_INT 31
23428: PUSH
23429: LD_INT 32
23431: PUSH
23432: LD_INT 33
23434: PUSH
23435: LD_INT 34
23437: PUSH
23438: LD_INT 36
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: PUSH
23477: LD_INT 101
23479: PUSH
23480: LD_INT 102
23482: PUSH
23483: LD_INT 103
23485: PUSH
23486: LD_INT 104
23488: PUSH
23489: LD_INT 105
23491: PUSH
23492: LD_INT 106
23494: PUSH
23495: LD_INT 107
23497: PUSH
23498: LD_INT 108
23500: PUSH
23501: LD_INT 109
23503: PUSH
23504: LD_INT 110
23506: PUSH
23507: LD_INT 111
23509: PUSH
23510: LD_INT 112
23512: PUSH
23513: LD_INT 113
23515: PUSH
23516: LD_INT 114
23518: PUSH
23519: LD_INT 116
23521: PUSH
23522: LD_INT 117
23524: PUSH
23525: LD_INT 118
23527: PUSH
23528: EMPTY
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: ST_TO_ADDR
23551: GO 25006
23553: LD_INT 13
23555: DOUBLE
23556: EQUAL
23557: IFTRUE 23561
23559: GO 23769
23561: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23562: LD_ADDR_VAR 0 2
23566: PUSH
23567: LD_INT 1
23569: PUSH
23570: LD_INT 2
23572: PUSH
23573: LD_INT 3
23575: PUSH
23576: LD_INT 4
23578: PUSH
23579: LD_INT 5
23581: PUSH
23582: LD_INT 8
23584: PUSH
23585: LD_INT 9
23587: PUSH
23588: LD_INT 10
23590: PUSH
23591: LD_INT 11
23593: PUSH
23594: LD_INT 12
23596: PUSH
23597: LD_INT 14
23599: PUSH
23600: LD_INT 15
23602: PUSH
23603: LD_INT 16
23605: PUSH
23606: LD_INT 17
23608: PUSH
23609: LD_INT 18
23611: PUSH
23612: LD_INT 19
23614: PUSH
23615: LD_INT 20
23617: PUSH
23618: LD_INT 21
23620: PUSH
23621: LD_INT 22
23623: PUSH
23624: LD_INT 23
23626: PUSH
23627: LD_INT 24
23629: PUSH
23630: LD_INT 25
23632: PUSH
23633: LD_INT 26
23635: PUSH
23636: LD_INT 27
23638: PUSH
23639: LD_INT 28
23641: PUSH
23642: LD_INT 30
23644: PUSH
23645: LD_INT 31
23647: PUSH
23648: LD_INT 32
23650: PUSH
23651: LD_INT 33
23653: PUSH
23654: LD_INT 34
23656: PUSH
23657: LD_INT 36
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: PUSH
23693: LD_INT 101
23695: PUSH
23696: LD_INT 102
23698: PUSH
23699: LD_INT 103
23701: PUSH
23702: LD_INT 104
23704: PUSH
23705: LD_INT 105
23707: PUSH
23708: LD_INT 106
23710: PUSH
23711: LD_INT 107
23713: PUSH
23714: LD_INT 108
23716: PUSH
23717: LD_INT 109
23719: PUSH
23720: LD_INT 110
23722: PUSH
23723: LD_INT 111
23725: PUSH
23726: LD_INT 112
23728: PUSH
23729: LD_INT 113
23731: PUSH
23732: LD_INT 114
23734: PUSH
23735: LD_INT 116
23737: PUSH
23738: LD_INT 117
23740: PUSH
23741: LD_INT 118
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: ST_TO_ADDR
23767: GO 25006
23769: LD_INT 14
23771: DOUBLE
23772: EQUAL
23773: IFTRUE 23777
23775: GO 24001
23777: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23778: LD_ADDR_VAR 0 2
23782: PUSH
23783: LD_INT 1
23785: PUSH
23786: LD_INT 2
23788: PUSH
23789: LD_INT 3
23791: PUSH
23792: LD_INT 4
23794: PUSH
23795: LD_INT 5
23797: PUSH
23798: LD_INT 6
23800: PUSH
23801: LD_INT 7
23803: PUSH
23804: LD_INT 8
23806: PUSH
23807: LD_INT 9
23809: PUSH
23810: LD_INT 10
23812: PUSH
23813: LD_INT 11
23815: PUSH
23816: LD_INT 12
23818: PUSH
23819: LD_INT 13
23821: PUSH
23822: LD_INT 14
23824: PUSH
23825: LD_INT 15
23827: PUSH
23828: LD_INT 16
23830: PUSH
23831: LD_INT 17
23833: PUSH
23834: LD_INT 18
23836: PUSH
23837: LD_INT 19
23839: PUSH
23840: LD_INT 20
23842: PUSH
23843: LD_INT 21
23845: PUSH
23846: LD_INT 22
23848: PUSH
23849: LD_INT 23
23851: PUSH
23852: LD_INT 24
23854: PUSH
23855: LD_INT 25
23857: PUSH
23858: LD_INT 26
23860: PUSH
23861: LD_INT 27
23863: PUSH
23864: LD_INT 28
23866: PUSH
23867: LD_INT 29
23869: PUSH
23870: LD_INT 30
23872: PUSH
23873: LD_INT 31
23875: PUSH
23876: LD_INT 32
23878: PUSH
23879: LD_INT 33
23881: PUSH
23882: LD_INT 34
23884: PUSH
23885: LD_INT 36
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 101
23927: PUSH
23928: LD_INT 102
23930: PUSH
23931: LD_INT 103
23933: PUSH
23934: LD_INT 104
23936: PUSH
23937: LD_INT 105
23939: PUSH
23940: LD_INT 106
23942: PUSH
23943: LD_INT 107
23945: PUSH
23946: LD_INT 108
23948: PUSH
23949: LD_INT 109
23951: PUSH
23952: LD_INT 110
23954: PUSH
23955: LD_INT 111
23957: PUSH
23958: LD_INT 112
23960: PUSH
23961: LD_INT 113
23963: PUSH
23964: LD_INT 114
23966: PUSH
23967: LD_INT 116
23969: PUSH
23970: LD_INT 117
23972: PUSH
23973: LD_INT 118
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: ST_TO_ADDR
23999: GO 25006
24001: LD_INT 15
24003: DOUBLE
24004: EQUAL
24005: IFTRUE 24009
24007: GO 24233
24009: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24010: LD_ADDR_VAR 0 2
24014: PUSH
24015: LD_INT 1
24017: PUSH
24018: LD_INT 2
24020: PUSH
24021: LD_INT 3
24023: PUSH
24024: LD_INT 4
24026: PUSH
24027: LD_INT 5
24029: PUSH
24030: LD_INT 6
24032: PUSH
24033: LD_INT 7
24035: PUSH
24036: LD_INT 8
24038: PUSH
24039: LD_INT 9
24041: PUSH
24042: LD_INT 10
24044: PUSH
24045: LD_INT 11
24047: PUSH
24048: LD_INT 12
24050: PUSH
24051: LD_INT 13
24053: PUSH
24054: LD_INT 14
24056: PUSH
24057: LD_INT 15
24059: PUSH
24060: LD_INT 16
24062: PUSH
24063: LD_INT 17
24065: PUSH
24066: LD_INT 18
24068: PUSH
24069: LD_INT 19
24071: PUSH
24072: LD_INT 20
24074: PUSH
24075: LD_INT 21
24077: PUSH
24078: LD_INT 22
24080: PUSH
24081: LD_INT 23
24083: PUSH
24084: LD_INT 24
24086: PUSH
24087: LD_INT 25
24089: PUSH
24090: LD_INT 26
24092: PUSH
24093: LD_INT 27
24095: PUSH
24096: LD_INT 28
24098: PUSH
24099: LD_INT 29
24101: PUSH
24102: LD_INT 30
24104: PUSH
24105: LD_INT 31
24107: PUSH
24108: LD_INT 32
24110: PUSH
24111: LD_INT 33
24113: PUSH
24114: LD_INT 34
24116: PUSH
24117: LD_INT 36
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: PUSH
24157: LD_INT 101
24159: PUSH
24160: LD_INT 102
24162: PUSH
24163: LD_INT 103
24165: PUSH
24166: LD_INT 104
24168: PUSH
24169: LD_INT 105
24171: PUSH
24172: LD_INT 106
24174: PUSH
24175: LD_INT 107
24177: PUSH
24178: LD_INT 108
24180: PUSH
24181: LD_INT 109
24183: PUSH
24184: LD_INT 110
24186: PUSH
24187: LD_INT 111
24189: PUSH
24190: LD_INT 112
24192: PUSH
24193: LD_INT 113
24195: PUSH
24196: LD_INT 114
24198: PUSH
24199: LD_INT 116
24201: PUSH
24202: LD_INT 117
24204: PUSH
24205: LD_INT 118
24207: PUSH
24208: EMPTY
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: ST_TO_ADDR
24231: GO 25006
24233: LD_INT 16
24235: DOUBLE
24236: EQUAL
24237: IFTRUE 24241
24239: GO 24377
24241: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24242: LD_ADDR_VAR 0 2
24246: PUSH
24247: LD_INT 2
24249: PUSH
24250: LD_INT 4
24252: PUSH
24253: LD_INT 5
24255: PUSH
24256: LD_INT 7
24258: PUSH
24259: LD_INT 11
24261: PUSH
24262: LD_INT 12
24264: PUSH
24265: LD_INT 15
24267: PUSH
24268: LD_INT 16
24270: PUSH
24271: LD_INT 20
24273: PUSH
24274: LD_INT 21
24276: PUSH
24277: LD_INT 22
24279: PUSH
24280: LD_INT 23
24282: PUSH
24283: LD_INT 25
24285: PUSH
24286: LD_INT 26
24288: PUSH
24289: LD_INT 30
24291: PUSH
24292: LD_INT 31
24294: PUSH
24295: LD_INT 32
24297: PUSH
24298: LD_INT 33
24300: PUSH
24301: LD_INT 34
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: PUSH
24325: LD_INT 101
24327: PUSH
24328: LD_INT 102
24330: PUSH
24331: LD_INT 103
24333: PUSH
24334: LD_INT 106
24336: PUSH
24337: LD_INT 108
24339: PUSH
24340: LD_INT 112
24342: PUSH
24343: LD_INT 113
24345: PUSH
24346: LD_INT 114
24348: PUSH
24349: LD_INT 116
24351: PUSH
24352: LD_INT 117
24354: PUSH
24355: LD_INT 118
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: ST_TO_ADDR
24375: GO 25006
24377: LD_INT 17
24379: DOUBLE
24380: EQUAL
24381: IFTRUE 24385
24383: GO 24609
24385: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24386: LD_ADDR_VAR 0 2
24390: PUSH
24391: LD_INT 1
24393: PUSH
24394: LD_INT 2
24396: PUSH
24397: LD_INT 3
24399: PUSH
24400: LD_INT 4
24402: PUSH
24403: LD_INT 5
24405: PUSH
24406: LD_INT 6
24408: PUSH
24409: LD_INT 7
24411: PUSH
24412: LD_INT 8
24414: PUSH
24415: LD_INT 9
24417: PUSH
24418: LD_INT 10
24420: PUSH
24421: LD_INT 11
24423: PUSH
24424: LD_INT 12
24426: PUSH
24427: LD_INT 13
24429: PUSH
24430: LD_INT 14
24432: PUSH
24433: LD_INT 15
24435: PUSH
24436: LD_INT 16
24438: PUSH
24439: LD_INT 17
24441: PUSH
24442: LD_INT 18
24444: PUSH
24445: LD_INT 19
24447: PUSH
24448: LD_INT 20
24450: PUSH
24451: LD_INT 21
24453: PUSH
24454: LD_INT 22
24456: PUSH
24457: LD_INT 23
24459: PUSH
24460: LD_INT 24
24462: PUSH
24463: LD_INT 25
24465: PUSH
24466: LD_INT 26
24468: PUSH
24469: LD_INT 27
24471: PUSH
24472: LD_INT 28
24474: PUSH
24475: LD_INT 29
24477: PUSH
24478: LD_INT 30
24480: PUSH
24481: LD_INT 31
24483: PUSH
24484: LD_INT 32
24486: PUSH
24487: LD_INT 33
24489: PUSH
24490: LD_INT 34
24492: PUSH
24493: LD_INT 36
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: PUSH
24533: LD_INT 101
24535: PUSH
24536: LD_INT 102
24538: PUSH
24539: LD_INT 103
24541: PUSH
24542: LD_INT 104
24544: PUSH
24545: LD_INT 105
24547: PUSH
24548: LD_INT 106
24550: PUSH
24551: LD_INT 107
24553: PUSH
24554: LD_INT 108
24556: PUSH
24557: LD_INT 109
24559: PUSH
24560: LD_INT 110
24562: PUSH
24563: LD_INT 111
24565: PUSH
24566: LD_INT 112
24568: PUSH
24569: LD_INT 113
24571: PUSH
24572: LD_INT 114
24574: PUSH
24575: LD_INT 116
24577: PUSH
24578: LD_INT 117
24580: PUSH
24581: LD_INT 118
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: ST_TO_ADDR
24607: GO 25006
24609: LD_INT 18
24611: DOUBLE
24612: EQUAL
24613: IFTRUE 24617
24615: GO 24765
24617: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24618: LD_ADDR_VAR 0 2
24622: PUSH
24623: LD_INT 2
24625: PUSH
24626: LD_INT 4
24628: PUSH
24629: LD_INT 5
24631: PUSH
24632: LD_INT 7
24634: PUSH
24635: LD_INT 11
24637: PUSH
24638: LD_INT 12
24640: PUSH
24641: LD_INT 15
24643: PUSH
24644: LD_INT 16
24646: PUSH
24647: LD_INT 20
24649: PUSH
24650: LD_INT 21
24652: PUSH
24653: LD_INT 22
24655: PUSH
24656: LD_INT 23
24658: PUSH
24659: LD_INT 25
24661: PUSH
24662: LD_INT 26
24664: PUSH
24665: LD_INT 30
24667: PUSH
24668: LD_INT 31
24670: PUSH
24671: LD_INT 32
24673: PUSH
24674: LD_INT 33
24676: PUSH
24677: LD_INT 34
24679: PUSH
24680: LD_INT 35
24682: PUSH
24683: LD_INT 36
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: PUSH
24709: LD_INT 101
24711: PUSH
24712: LD_INT 102
24714: PUSH
24715: LD_INT 103
24717: PUSH
24718: LD_INT 106
24720: PUSH
24721: LD_INT 108
24723: PUSH
24724: LD_INT 112
24726: PUSH
24727: LD_INT 113
24729: PUSH
24730: LD_INT 114
24732: PUSH
24733: LD_INT 115
24735: PUSH
24736: LD_INT 116
24738: PUSH
24739: LD_INT 117
24741: PUSH
24742: LD_INT 118
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: ST_TO_ADDR
24763: GO 25006
24765: LD_INT 19
24767: DOUBLE
24768: EQUAL
24769: IFTRUE 24773
24771: GO 25005
24773: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24774: LD_ADDR_VAR 0 2
24778: PUSH
24779: LD_INT 1
24781: PUSH
24782: LD_INT 2
24784: PUSH
24785: LD_INT 3
24787: PUSH
24788: LD_INT 4
24790: PUSH
24791: LD_INT 5
24793: PUSH
24794: LD_INT 6
24796: PUSH
24797: LD_INT 7
24799: PUSH
24800: LD_INT 8
24802: PUSH
24803: LD_INT 9
24805: PUSH
24806: LD_INT 10
24808: PUSH
24809: LD_INT 11
24811: PUSH
24812: LD_INT 12
24814: PUSH
24815: LD_INT 13
24817: PUSH
24818: LD_INT 14
24820: PUSH
24821: LD_INT 15
24823: PUSH
24824: LD_INT 16
24826: PUSH
24827: LD_INT 17
24829: PUSH
24830: LD_INT 18
24832: PUSH
24833: LD_INT 19
24835: PUSH
24836: LD_INT 20
24838: PUSH
24839: LD_INT 21
24841: PUSH
24842: LD_INT 22
24844: PUSH
24845: LD_INT 23
24847: PUSH
24848: LD_INT 24
24850: PUSH
24851: LD_INT 25
24853: PUSH
24854: LD_INT 26
24856: PUSH
24857: LD_INT 27
24859: PUSH
24860: LD_INT 28
24862: PUSH
24863: LD_INT 29
24865: PUSH
24866: LD_INT 30
24868: PUSH
24869: LD_INT 31
24871: PUSH
24872: LD_INT 32
24874: PUSH
24875: LD_INT 33
24877: PUSH
24878: LD_INT 34
24880: PUSH
24881: LD_INT 35
24883: PUSH
24884: LD_INT 36
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 101
24927: PUSH
24928: LD_INT 102
24930: PUSH
24931: LD_INT 103
24933: PUSH
24934: LD_INT 104
24936: PUSH
24937: LD_INT 105
24939: PUSH
24940: LD_INT 106
24942: PUSH
24943: LD_INT 107
24945: PUSH
24946: LD_INT 108
24948: PUSH
24949: LD_INT 109
24951: PUSH
24952: LD_INT 110
24954: PUSH
24955: LD_INT 111
24957: PUSH
24958: LD_INT 112
24960: PUSH
24961: LD_INT 113
24963: PUSH
24964: LD_INT 114
24966: PUSH
24967: LD_INT 115
24969: PUSH
24970: LD_INT 116
24972: PUSH
24973: LD_INT 117
24975: PUSH
24976: LD_INT 118
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: ST_TO_ADDR
25003: GO 25006
25005: POP
// end else
25006: GO 25237
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25008: LD_ADDR_VAR 0 2
25012: PUSH
25013: LD_INT 1
25015: PUSH
25016: LD_INT 2
25018: PUSH
25019: LD_INT 3
25021: PUSH
25022: LD_INT 4
25024: PUSH
25025: LD_INT 5
25027: PUSH
25028: LD_INT 6
25030: PUSH
25031: LD_INT 7
25033: PUSH
25034: LD_INT 8
25036: PUSH
25037: LD_INT 9
25039: PUSH
25040: LD_INT 10
25042: PUSH
25043: LD_INT 11
25045: PUSH
25046: LD_INT 12
25048: PUSH
25049: LD_INT 13
25051: PUSH
25052: LD_INT 14
25054: PUSH
25055: LD_INT 15
25057: PUSH
25058: LD_INT 16
25060: PUSH
25061: LD_INT 17
25063: PUSH
25064: LD_INT 18
25066: PUSH
25067: LD_INT 19
25069: PUSH
25070: LD_INT 20
25072: PUSH
25073: LD_INT 21
25075: PUSH
25076: LD_INT 22
25078: PUSH
25079: LD_INT 23
25081: PUSH
25082: LD_INT 24
25084: PUSH
25085: LD_INT 25
25087: PUSH
25088: LD_INT 26
25090: PUSH
25091: LD_INT 27
25093: PUSH
25094: LD_INT 28
25096: PUSH
25097: LD_INT 29
25099: PUSH
25100: LD_INT 30
25102: PUSH
25103: LD_INT 31
25105: PUSH
25106: LD_INT 32
25108: PUSH
25109: LD_INT 33
25111: PUSH
25112: LD_INT 34
25114: PUSH
25115: LD_INT 35
25117: PUSH
25118: LD_INT 36
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: PUSH
25159: LD_INT 101
25161: PUSH
25162: LD_INT 102
25164: PUSH
25165: LD_INT 103
25167: PUSH
25168: LD_INT 104
25170: PUSH
25171: LD_INT 105
25173: PUSH
25174: LD_INT 106
25176: PUSH
25177: LD_INT 107
25179: PUSH
25180: LD_INT 108
25182: PUSH
25183: LD_INT 109
25185: PUSH
25186: LD_INT 110
25188: PUSH
25189: LD_INT 111
25191: PUSH
25192: LD_INT 112
25194: PUSH
25195: LD_INT 113
25197: PUSH
25198: LD_INT 114
25200: PUSH
25201: LD_INT 115
25203: PUSH
25204: LD_INT 116
25206: PUSH
25207: LD_INT 117
25209: PUSH
25210: LD_INT 118
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: ST_TO_ADDR
// if result then
25237: LD_VAR 0 2
25241: IFFALSE 26027
// begin normal :=  ;
25243: LD_ADDR_VAR 0 5
25247: PUSH
25248: LD_STRING 
25250: ST_TO_ADDR
// hardcore :=  ;
25251: LD_ADDR_VAR 0 6
25255: PUSH
25256: LD_STRING 
25258: ST_TO_ADDR
// active :=  ;
25259: LD_ADDR_VAR 0 7
25263: PUSH
25264: LD_STRING 
25266: ST_TO_ADDR
// for i = 1 to normalCounter do
25267: LD_ADDR_VAR 0 8
25271: PUSH
25272: DOUBLE
25273: LD_INT 1
25275: DEC
25276: ST_TO_ADDR
25277: LD_EXP 48
25281: PUSH
25282: FOR_TO
25283: IFFALSE 25384
// begin tmp := 0 ;
25285: LD_ADDR_VAR 0 3
25289: PUSH
25290: LD_STRING 0
25292: ST_TO_ADDR
// if result [ 1 ] then
25293: LD_VAR 0 2
25297: PUSH
25298: LD_INT 1
25300: ARRAY
25301: IFFALSE 25366
// if result [ 1 ] [ 1 ] = i then
25303: LD_VAR 0 2
25307: PUSH
25308: LD_INT 1
25310: ARRAY
25311: PUSH
25312: LD_INT 1
25314: ARRAY
25315: PUSH
25316: LD_VAR 0 8
25320: EQUAL
25321: IFFALSE 25366
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25323: LD_ADDR_VAR 0 2
25327: PUSH
25328: LD_VAR 0 2
25332: PPUSH
25333: LD_INT 1
25335: PPUSH
25336: LD_VAR 0 2
25340: PUSH
25341: LD_INT 1
25343: ARRAY
25344: PPUSH
25345: LD_INT 1
25347: PPUSH
25348: CALL_OW 3
25352: PPUSH
25353: CALL_OW 1
25357: ST_TO_ADDR
// tmp := 1 ;
25358: LD_ADDR_VAR 0 3
25362: PUSH
25363: LD_STRING 1
25365: ST_TO_ADDR
// end ; normal := normal & tmp ;
25366: LD_ADDR_VAR 0 5
25370: PUSH
25371: LD_VAR 0 5
25375: PUSH
25376: LD_VAR 0 3
25380: STR
25381: ST_TO_ADDR
// end ;
25382: GO 25282
25384: POP
25385: POP
// for i = 1 to hardcoreCounter do
25386: LD_ADDR_VAR 0 8
25390: PUSH
25391: DOUBLE
25392: LD_INT 1
25394: DEC
25395: ST_TO_ADDR
25396: LD_EXP 49
25400: PUSH
25401: FOR_TO
25402: IFFALSE 25507
// begin tmp := 0 ;
25404: LD_ADDR_VAR 0 3
25408: PUSH
25409: LD_STRING 0
25411: ST_TO_ADDR
// if result [ 2 ] then
25412: LD_VAR 0 2
25416: PUSH
25417: LD_INT 2
25419: ARRAY
25420: IFFALSE 25489
// if result [ 2 ] [ 1 ] = 100 + i then
25422: LD_VAR 0 2
25426: PUSH
25427: LD_INT 2
25429: ARRAY
25430: PUSH
25431: LD_INT 1
25433: ARRAY
25434: PUSH
25435: LD_INT 100
25437: PUSH
25438: LD_VAR 0 8
25442: PLUS
25443: EQUAL
25444: IFFALSE 25489
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25446: LD_ADDR_VAR 0 2
25450: PUSH
25451: LD_VAR 0 2
25455: PPUSH
25456: LD_INT 2
25458: PPUSH
25459: LD_VAR 0 2
25463: PUSH
25464: LD_INT 2
25466: ARRAY
25467: PPUSH
25468: LD_INT 1
25470: PPUSH
25471: CALL_OW 3
25475: PPUSH
25476: CALL_OW 1
25480: ST_TO_ADDR
// tmp := 1 ;
25481: LD_ADDR_VAR 0 3
25485: PUSH
25486: LD_STRING 1
25488: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25489: LD_ADDR_VAR 0 6
25493: PUSH
25494: LD_VAR 0 6
25498: PUSH
25499: LD_VAR 0 3
25503: STR
25504: ST_TO_ADDR
// end ;
25505: GO 25401
25507: POP
25508: POP
// if isGameLoad then
25509: LD_VAR 0 1
25513: IFFALSE 25988
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25515: LD_ADDR_VAR 0 4
25519: PUSH
25520: LD_EXP 52
25524: PUSH
25525: LD_EXP 51
25529: PUSH
25530: LD_EXP 53
25534: PUSH
25535: LD_EXP 50
25539: PUSH
25540: LD_EXP 54
25544: PUSH
25545: LD_EXP 55
25549: PUSH
25550: LD_EXP 56
25554: PUSH
25555: LD_EXP 57
25559: PUSH
25560: LD_EXP 58
25564: PUSH
25565: LD_EXP 59
25569: PUSH
25570: LD_EXP 60
25574: PUSH
25575: LD_EXP 61
25579: PUSH
25580: LD_EXP 62
25584: PUSH
25585: LD_EXP 63
25589: PUSH
25590: LD_EXP 71
25594: PUSH
25595: LD_EXP 72
25599: PUSH
25600: LD_EXP 73
25604: PUSH
25605: LD_EXP 74
25609: PUSH
25610: LD_EXP 76
25614: PUSH
25615: LD_EXP 77
25619: PUSH
25620: LD_EXP 78
25624: PUSH
25625: LD_EXP 81
25629: PUSH
25630: LD_EXP 83
25634: PUSH
25635: LD_EXP 84
25639: PUSH
25640: LD_EXP 85
25644: PUSH
25645: LD_EXP 87
25649: PUSH
25650: LD_EXP 88
25654: PUSH
25655: LD_EXP 91
25659: PUSH
25660: LD_EXP 92
25664: PUSH
25665: LD_EXP 93
25669: PUSH
25670: LD_EXP 94
25674: PUSH
25675: LD_EXP 95
25679: PUSH
25680: LD_EXP 96
25684: PUSH
25685: LD_EXP 97
25689: PUSH
25690: LD_EXP 98
25694: PUSH
25695: LD_EXP 99
25699: PUSH
25700: LD_EXP 64
25704: PUSH
25705: LD_EXP 65
25709: PUSH
25710: LD_EXP 68
25714: PUSH
25715: LD_EXP 69
25719: PUSH
25720: LD_EXP 70
25724: PUSH
25725: LD_EXP 66
25729: PUSH
25730: LD_EXP 67
25734: PUSH
25735: LD_EXP 75
25739: PUSH
25740: LD_EXP 79
25744: PUSH
25745: LD_EXP 80
25749: PUSH
25750: LD_EXP 82
25754: PUSH
25755: LD_EXP 86
25759: PUSH
25760: LD_EXP 89
25764: PUSH
25765: LD_EXP 90
25769: PUSH
25770: LD_EXP 100
25774: PUSH
25775: LD_EXP 101
25779: PUSH
25780: LD_EXP 102
25784: PUSH
25785: LD_EXP 103
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: ST_TO_ADDR
// tmp :=  ;
25846: LD_ADDR_VAR 0 3
25850: PUSH
25851: LD_STRING 
25853: ST_TO_ADDR
// for i = 1 to normalCounter do
25854: LD_ADDR_VAR 0 8
25858: PUSH
25859: DOUBLE
25860: LD_INT 1
25862: DEC
25863: ST_TO_ADDR
25864: LD_EXP 48
25868: PUSH
25869: FOR_TO
25870: IFFALSE 25906
// begin if flags [ i ] then
25872: LD_VAR 0 4
25876: PUSH
25877: LD_VAR 0 8
25881: ARRAY
25882: IFFALSE 25904
// tmp := tmp & i & ; ;
25884: LD_ADDR_VAR 0 3
25888: PUSH
25889: LD_VAR 0 3
25893: PUSH
25894: LD_VAR 0 8
25898: STR
25899: PUSH
25900: LD_STRING ;
25902: STR
25903: ST_TO_ADDR
// end ;
25904: GO 25869
25906: POP
25907: POP
// for i = 1 to hardcoreCounter do
25908: LD_ADDR_VAR 0 8
25912: PUSH
25913: DOUBLE
25914: LD_INT 1
25916: DEC
25917: ST_TO_ADDR
25918: LD_EXP 49
25922: PUSH
25923: FOR_TO
25924: IFFALSE 25970
// begin if flags [ normalCounter + i ] then
25926: LD_VAR 0 4
25930: PUSH
25931: LD_EXP 48
25935: PUSH
25936: LD_VAR 0 8
25940: PLUS
25941: ARRAY
25942: IFFALSE 25968
// tmp := tmp & ( 100 + i ) & ; ;
25944: LD_ADDR_VAR 0 3
25948: PUSH
25949: LD_VAR 0 3
25953: PUSH
25954: LD_INT 100
25956: PUSH
25957: LD_VAR 0 8
25961: PLUS
25962: STR
25963: PUSH
25964: LD_STRING ;
25966: STR
25967: ST_TO_ADDR
// end ;
25968: GO 25923
25970: POP
25971: POP
// if tmp then
25972: LD_VAR 0 3
25976: IFFALSE 25988
// active := tmp ;
25978: LD_ADDR_VAR 0 7
25982: PUSH
25983: LD_VAR 0 3
25987: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25988: LD_STRING getStreamItemsFromMission("
25990: PUSH
25991: LD_VAR 0 5
25995: STR
25996: PUSH
25997: LD_STRING ","
25999: STR
26000: PUSH
26001: LD_VAR 0 6
26005: STR
26006: PUSH
26007: LD_STRING ","
26009: STR
26010: PUSH
26011: LD_VAR 0 7
26015: STR
26016: PUSH
26017: LD_STRING ")
26019: STR
26020: PPUSH
26021: CALL_OW 559
// end else
26025: GO 26034
// ToLua ( getStreamItemsFromMission("","","") ) ;
26027: LD_STRING getStreamItemsFromMission("","","")
26029: PPUSH
26030: CALL_OW 559
// end ;
26034: LD_VAR 0 2
26038: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26039: LD_EXP 47
26043: IFFALSE 26051
26045: PUSH
26046: LD_EXP 52
26050: AND
26051: IFFALSE 26175
26053: GO 26055
26055: DISABLE
26056: LD_INT 0
26058: PPUSH
26059: PPUSH
// begin enable ;
26060: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26061: LD_ADDR_VAR 0 2
26065: PUSH
26066: LD_INT 22
26068: PUSH
26069: LD_OWVAR 2
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: PUSH
26078: LD_INT 2
26080: PUSH
26081: LD_INT 34
26083: PUSH
26084: LD_INT 7
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: PUSH
26091: LD_INT 34
26093: PUSH
26094: LD_INT 45
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: PUSH
26101: LD_INT 34
26103: PUSH
26104: LD_INT 28
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PUSH
26111: LD_INT 34
26113: PUSH
26114: LD_INT 47
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: PPUSH
26132: CALL_OW 69
26136: ST_TO_ADDR
// if not tmp then
26137: LD_VAR 0 2
26141: NOT
26142: IFFALSE 26146
// exit ;
26144: GO 26175
// for i in tmp do
26146: LD_ADDR_VAR 0 1
26150: PUSH
26151: LD_VAR 0 2
26155: PUSH
26156: FOR_IN
26157: IFFALSE 26173
// begin SetLives ( i , 0 ) ;
26159: LD_VAR 0 1
26163: PPUSH
26164: LD_INT 0
26166: PPUSH
26167: CALL_OW 234
// end ;
26171: GO 26156
26173: POP
26174: POP
// end ;
26175: PPOPN 2
26177: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26178: LD_EXP 47
26182: IFFALSE 26190
26184: PUSH
26185: LD_EXP 53
26189: AND
26190: IFFALSE 26274
26192: GO 26194
26194: DISABLE
26195: LD_INT 0
26197: PPUSH
26198: PPUSH
// begin enable ;
26199: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26200: LD_ADDR_VAR 0 2
26204: PUSH
26205: LD_INT 22
26207: PUSH
26208: LD_OWVAR 2
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: LD_INT 32
26219: PUSH
26220: LD_INT 3
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: PPUSH
26231: CALL_OW 69
26235: ST_TO_ADDR
// if not tmp then
26236: LD_VAR 0 2
26240: NOT
26241: IFFALSE 26245
// exit ;
26243: GO 26274
// for i in tmp do
26245: LD_ADDR_VAR 0 1
26249: PUSH
26250: LD_VAR 0 2
26254: PUSH
26255: FOR_IN
26256: IFFALSE 26272
// begin SetLives ( i , 0 ) ;
26258: LD_VAR 0 1
26262: PPUSH
26263: LD_INT 0
26265: PPUSH
26266: CALL_OW 234
// end ;
26270: GO 26255
26272: POP
26273: POP
// end ;
26274: PPOPN 2
26276: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26277: LD_EXP 47
26281: IFFALSE 26289
26283: PUSH
26284: LD_EXP 50
26288: AND
26289: IFFALSE 26382
26291: GO 26293
26293: DISABLE
26294: LD_INT 0
26296: PPUSH
// begin enable ;
26297: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26298: LD_ADDR_VAR 0 1
26302: PUSH
26303: LD_INT 22
26305: PUSH
26306: LD_OWVAR 2
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: PUSH
26315: LD_INT 2
26317: PUSH
26318: LD_INT 25
26320: PUSH
26321: LD_INT 5
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: PUSH
26328: LD_INT 25
26330: PUSH
26331: LD_INT 9
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: PUSH
26338: LD_INT 25
26340: PUSH
26341: LD_INT 8
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PPUSH
26358: CALL_OW 69
26362: PUSH
26363: FOR_IN
26364: IFFALSE 26380
// begin SetClass ( i , 1 ) ;
26366: LD_VAR 0 1
26370: PPUSH
26371: LD_INT 1
26373: PPUSH
26374: CALL_OW 336
// end ;
26378: GO 26363
26380: POP
26381: POP
// end ;
26382: PPOPN 1
26384: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26385: LD_EXP 47
26389: IFFALSE 26397
26391: PUSH
26392: LD_EXP 51
26396: AND
26397: IFFALSE 26409
26399: PUSH
26400: LD_OWVAR 65
26404: PUSH
26405: LD_INT 7
26407: LESS
26408: AND
26409: IFFALSE 26423
26411: GO 26413
26413: DISABLE
// begin enable ;
26414: ENABLE
// game_speed := 7 ;
26415: LD_ADDR_OWVAR 65
26419: PUSH
26420: LD_INT 7
26422: ST_TO_ADDR
// end ;
26423: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26424: LD_EXP 47
26428: IFFALSE 26436
26430: PUSH
26431: LD_EXP 54
26435: AND
26436: IFFALSE 26638
26438: GO 26440
26440: DISABLE
26441: LD_INT 0
26443: PPUSH
26444: PPUSH
26445: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26446: LD_ADDR_VAR 0 3
26450: PUSH
26451: LD_INT 81
26453: PUSH
26454: LD_OWVAR 2
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 21
26465: PUSH
26466: LD_INT 1
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PPUSH
26477: CALL_OW 69
26481: ST_TO_ADDR
// if not tmp then
26482: LD_VAR 0 3
26486: NOT
26487: IFFALSE 26491
// exit ;
26489: GO 26638
// if tmp > 5 then
26491: LD_VAR 0 3
26495: PUSH
26496: LD_INT 5
26498: GREATER
26499: IFFALSE 26511
// k := 5 else
26501: LD_ADDR_VAR 0 2
26505: PUSH
26506: LD_INT 5
26508: ST_TO_ADDR
26509: GO 26521
// k := tmp ;
26511: LD_ADDR_VAR 0 2
26515: PUSH
26516: LD_VAR 0 3
26520: ST_TO_ADDR
// for i := 1 to k do
26521: LD_ADDR_VAR 0 1
26525: PUSH
26526: DOUBLE
26527: LD_INT 1
26529: DEC
26530: ST_TO_ADDR
26531: LD_VAR 0 2
26535: PUSH
26536: FOR_TO
26537: IFFALSE 26636
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26539: LD_VAR 0 3
26543: PUSH
26544: LD_VAR 0 1
26548: ARRAY
26549: PPUSH
26550: LD_VAR 0 1
26554: PUSH
26555: LD_INT 4
26557: MOD
26558: PUSH
26559: LD_INT 1
26561: PLUS
26562: PPUSH
26563: CALL_OW 259
26567: PUSH
26568: LD_INT 10
26570: LESS
26571: IFFALSE 26634
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26573: LD_VAR 0 3
26577: PUSH
26578: LD_VAR 0 1
26582: ARRAY
26583: PPUSH
26584: LD_VAR 0 1
26588: PUSH
26589: LD_INT 4
26591: MOD
26592: PUSH
26593: LD_INT 1
26595: PLUS
26596: PPUSH
26597: LD_VAR 0 3
26601: PUSH
26602: LD_VAR 0 1
26606: ARRAY
26607: PPUSH
26608: LD_VAR 0 1
26612: PUSH
26613: LD_INT 4
26615: MOD
26616: PUSH
26617: LD_INT 1
26619: PLUS
26620: PPUSH
26621: CALL_OW 259
26625: PUSH
26626: LD_INT 1
26628: PLUS
26629: PPUSH
26630: CALL_OW 237
26634: GO 26536
26636: POP
26637: POP
// end ;
26638: PPOPN 3
26640: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26641: LD_EXP 47
26645: IFFALSE 26653
26647: PUSH
26648: LD_EXP 55
26652: AND
26653: IFFALSE 26673
26655: GO 26657
26657: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26658: LD_INT 4
26660: PPUSH
26661: LD_OWVAR 2
26665: PPUSH
26666: LD_INT 0
26668: PPUSH
26669: CALL_OW 324
26673: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26674: LD_EXP 47
26678: IFFALSE 26686
26680: PUSH
26681: LD_EXP 84
26685: AND
26686: IFFALSE 26706
26688: GO 26690
26690: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26691: LD_INT 19
26693: PPUSH
26694: LD_OWVAR 2
26698: PPUSH
26699: LD_INT 0
26701: PPUSH
26702: CALL_OW 324
26706: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26707: LD_EXP 47
26711: IFFALSE 26719
26713: PUSH
26714: LD_EXP 56
26718: AND
26719: IFFALSE 26821
26721: GO 26723
26723: DISABLE
26724: LD_INT 0
26726: PPUSH
26727: PPUSH
// begin enable ;
26728: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26729: LD_ADDR_VAR 0 2
26733: PUSH
26734: LD_INT 22
26736: PUSH
26737: LD_OWVAR 2
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: PUSH
26746: LD_INT 2
26748: PUSH
26749: LD_INT 34
26751: PUSH
26752: LD_INT 11
26754: PUSH
26755: EMPTY
26756: LIST
26757: LIST
26758: PUSH
26759: LD_INT 34
26761: PUSH
26762: LD_INT 30
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: LIST
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PPUSH
26778: CALL_OW 69
26782: ST_TO_ADDR
// if not tmp then
26783: LD_VAR 0 2
26787: NOT
26788: IFFALSE 26792
// exit ;
26790: GO 26821
// for i in tmp do
26792: LD_ADDR_VAR 0 1
26796: PUSH
26797: LD_VAR 0 2
26801: PUSH
26802: FOR_IN
26803: IFFALSE 26819
// begin SetLives ( i , 0 ) ;
26805: LD_VAR 0 1
26809: PPUSH
26810: LD_INT 0
26812: PPUSH
26813: CALL_OW 234
// end ;
26817: GO 26802
26819: POP
26820: POP
// end ;
26821: PPOPN 2
26823: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26824: LD_EXP 47
26828: IFFALSE 26836
26830: PUSH
26831: LD_EXP 57
26835: AND
26836: IFFALSE 26856
26838: GO 26840
26840: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26841: LD_INT 32
26843: PPUSH
26844: LD_OWVAR 2
26848: PPUSH
26849: LD_INT 0
26851: PPUSH
26852: CALL_OW 324
26856: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26857: LD_EXP 47
26861: IFFALSE 26869
26863: PUSH
26864: LD_EXP 58
26868: AND
26869: IFFALSE 27052
26871: GO 26873
26873: DISABLE
26874: LD_INT 0
26876: PPUSH
26877: PPUSH
26878: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26879: LD_ADDR_VAR 0 2
26883: PUSH
26884: LD_INT 22
26886: PUSH
26887: LD_OWVAR 2
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: LD_INT 33
26898: PUSH
26899: LD_INT 3
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PPUSH
26910: CALL_OW 69
26914: ST_TO_ADDR
// if not tmp then
26915: LD_VAR 0 2
26919: NOT
26920: IFFALSE 26924
// exit ;
26922: GO 27052
// side := 0 ;
26924: LD_ADDR_VAR 0 3
26928: PUSH
26929: LD_INT 0
26931: ST_TO_ADDR
// for i := 1 to 8 do
26932: LD_ADDR_VAR 0 1
26936: PUSH
26937: DOUBLE
26938: LD_INT 1
26940: DEC
26941: ST_TO_ADDR
26942: LD_INT 8
26944: PUSH
26945: FOR_TO
26946: IFFALSE 26996
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26948: LD_OWVAR 2
26952: PUSH
26953: LD_VAR 0 1
26957: NONEQUAL
26958: IFFALSE 26980
26960: PUSH
26961: LD_OWVAR 2
26965: PPUSH
26966: LD_VAR 0 1
26970: PPUSH
26971: CALL_OW 81
26975: PUSH
26976: LD_INT 2
26978: EQUAL
26979: AND
26980: IFFALSE 26994
// begin side := i ;
26982: LD_ADDR_VAR 0 3
26986: PUSH
26987: LD_VAR 0 1
26991: ST_TO_ADDR
// break ;
26992: GO 26996
// end ;
26994: GO 26945
26996: POP
26997: POP
// if not side then
26998: LD_VAR 0 3
27002: NOT
27003: IFFALSE 27007
// exit ;
27005: GO 27052
// for i := 1 to tmp do
27007: LD_ADDR_VAR 0 1
27011: PUSH
27012: DOUBLE
27013: LD_INT 1
27015: DEC
27016: ST_TO_ADDR
27017: LD_VAR 0 2
27021: PUSH
27022: FOR_TO
27023: IFFALSE 27050
// if Prob ( 60 ) then
27025: LD_INT 60
27027: PPUSH
27028: CALL_OW 13
27032: IFFALSE 27048
// SetSide ( i , side ) ;
27034: LD_VAR 0 1
27038: PPUSH
27039: LD_VAR 0 3
27043: PPUSH
27044: CALL_OW 235
27048: GO 27022
27050: POP
27051: POP
// end ;
27052: PPOPN 3
27054: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27055: LD_EXP 47
27059: IFFALSE 27067
27061: PUSH
27062: LD_EXP 60
27066: AND
27067: IFFALSE 27186
27069: GO 27071
27071: DISABLE
27072: LD_INT 0
27074: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27075: LD_ADDR_VAR 0 1
27079: PUSH
27080: LD_INT 22
27082: PUSH
27083: LD_OWVAR 2
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: PUSH
27092: LD_INT 21
27094: PUSH
27095: LD_INT 1
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: PUSH
27102: LD_INT 3
27104: PUSH
27105: LD_INT 23
27107: PUSH
27108: LD_INT 0
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: LIST
27123: PPUSH
27124: CALL_OW 69
27128: PUSH
27129: FOR_IN
27130: IFFALSE 27184
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27132: LD_VAR 0 1
27136: PPUSH
27137: CALL_OW 257
27141: PUSH
27142: LD_INT 1
27144: PUSH
27145: LD_INT 2
27147: PUSH
27148: LD_INT 3
27150: PUSH
27151: LD_INT 4
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: IN
27160: IFFALSE 27182
// SetClass ( un , rand ( 1 , 4 ) ) ;
27162: LD_VAR 0 1
27166: PPUSH
27167: LD_INT 1
27169: PPUSH
27170: LD_INT 4
27172: PPUSH
27173: CALL_OW 12
27177: PPUSH
27178: CALL_OW 336
27182: GO 27129
27184: POP
27185: POP
// end ;
27186: PPOPN 1
27188: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27189: LD_EXP 47
27193: IFFALSE 27201
27195: PUSH
27196: LD_EXP 59
27200: AND
27201: IFFALSE 27280
27203: GO 27205
27205: DISABLE
27206: LD_INT 0
27208: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27209: LD_ADDR_VAR 0 1
27213: PUSH
27214: LD_INT 22
27216: PUSH
27217: LD_OWVAR 2
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: LD_INT 21
27228: PUSH
27229: LD_INT 3
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PPUSH
27240: CALL_OW 69
27244: ST_TO_ADDR
// if not tmp then
27245: LD_VAR 0 1
27249: NOT
27250: IFFALSE 27254
// exit ;
27252: GO 27280
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27254: LD_VAR 0 1
27258: PUSH
27259: LD_INT 1
27261: PPUSH
27262: LD_VAR 0 1
27266: PPUSH
27267: CALL_OW 12
27271: ARRAY
27272: PPUSH
27273: LD_INT 100
27275: PPUSH
27276: CALL_OW 234
// end ;
27280: PPOPN 1
27282: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27283: LD_EXP 47
27287: IFFALSE 27295
27289: PUSH
27290: LD_EXP 61
27294: AND
27295: IFFALSE 27393
27297: GO 27299
27299: DISABLE
27300: LD_INT 0
27302: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27303: LD_ADDR_VAR 0 1
27307: PUSH
27308: LD_INT 22
27310: PUSH
27311: LD_OWVAR 2
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: PUSH
27320: LD_INT 21
27322: PUSH
27323: LD_INT 1
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PPUSH
27334: CALL_OW 69
27338: ST_TO_ADDR
// if not tmp then
27339: LD_VAR 0 1
27343: NOT
27344: IFFALSE 27348
// exit ;
27346: GO 27393
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27348: LD_VAR 0 1
27352: PUSH
27353: LD_INT 1
27355: PPUSH
27356: LD_VAR 0 1
27360: PPUSH
27361: CALL_OW 12
27365: ARRAY
27366: PPUSH
27367: LD_INT 1
27369: PPUSH
27370: LD_INT 4
27372: PPUSH
27373: CALL_OW 12
27377: PPUSH
27378: LD_INT 3000
27380: PPUSH
27381: LD_INT 9000
27383: PPUSH
27384: CALL_OW 12
27388: PPUSH
27389: CALL_OW 492
// end ;
27393: PPOPN 1
27395: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27396: LD_EXP 47
27400: IFFALSE 27408
27402: PUSH
27403: LD_EXP 62
27407: AND
27408: IFFALSE 27428
27410: GO 27412
27412: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27413: LD_INT 1
27415: PPUSH
27416: LD_OWVAR 2
27420: PPUSH
27421: LD_INT 0
27423: PPUSH
27424: CALL_OW 324
27428: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27429: LD_EXP 47
27433: IFFALSE 27441
27435: PUSH
27436: LD_EXP 63
27440: AND
27441: IFFALSE 27524
27443: GO 27445
27445: DISABLE
27446: LD_INT 0
27448: PPUSH
27449: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27450: LD_ADDR_VAR 0 2
27454: PUSH
27455: LD_INT 22
27457: PUSH
27458: LD_OWVAR 2
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PUSH
27467: LD_INT 21
27469: PUSH
27470: LD_INT 3
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PPUSH
27481: CALL_OW 69
27485: ST_TO_ADDR
// if not tmp then
27486: LD_VAR 0 2
27490: NOT
27491: IFFALSE 27495
// exit ;
27493: GO 27524
// for i in tmp do
27495: LD_ADDR_VAR 0 1
27499: PUSH
27500: LD_VAR 0 2
27504: PUSH
27505: FOR_IN
27506: IFFALSE 27522
// SetBLevel ( i , 10 ) ;
27508: LD_VAR 0 1
27512: PPUSH
27513: LD_INT 10
27515: PPUSH
27516: CALL_OW 241
27520: GO 27505
27522: POP
27523: POP
// end ;
27524: PPOPN 2
27526: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27527: LD_EXP 47
27531: IFFALSE 27539
27533: PUSH
27534: LD_EXP 64
27538: AND
27539: IFFALSE 27650
27541: GO 27543
27543: DISABLE
27544: LD_INT 0
27546: PPUSH
27547: PPUSH
27548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27549: LD_ADDR_VAR 0 3
27553: PUSH
27554: LD_INT 22
27556: PUSH
27557: LD_OWVAR 2
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: LD_INT 25
27568: PUSH
27569: LD_INT 1
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: PUSH
27576: EMPTY
27577: LIST
27578: LIST
27579: PPUSH
27580: CALL_OW 69
27584: ST_TO_ADDR
// if not tmp then
27585: LD_VAR 0 3
27589: NOT
27590: IFFALSE 27594
// exit ;
27592: GO 27650
// un := tmp [ rand ( 1 , tmp ) ] ;
27594: LD_ADDR_VAR 0 2
27598: PUSH
27599: LD_VAR 0 3
27603: PUSH
27604: LD_INT 1
27606: PPUSH
27607: LD_VAR 0 3
27611: PPUSH
27612: CALL_OW 12
27616: ARRAY
27617: ST_TO_ADDR
// if Crawls ( un ) then
27618: LD_VAR 0 2
27622: PPUSH
27623: CALL_OW 318
27627: IFFALSE 27638
// ComWalk ( un ) ;
27629: LD_VAR 0 2
27633: PPUSH
27634: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27638: LD_VAR 0 2
27642: PPUSH
27643: LD_INT 5
27645: PPUSH
27646: CALL_OW 336
// end ;
27650: PPOPN 3
27652: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27653: LD_EXP 47
27657: IFFALSE 27665
27659: PUSH
27660: LD_EXP 65
27664: AND
27665: IFFALSE 27677
27667: PUSH
27668: LD_OWVAR 67
27672: PUSH
27673: LD_INT 4
27675: LESS
27676: AND
27677: IFFALSE 27696
27679: GO 27681
27681: DISABLE
// begin Difficulty := Difficulty + 1 ;
27682: LD_ADDR_OWVAR 67
27686: PUSH
27687: LD_OWVAR 67
27691: PUSH
27692: LD_INT 1
27694: PLUS
27695: ST_TO_ADDR
// end ;
27696: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27697: LD_EXP 47
27701: IFFALSE 27709
27703: PUSH
27704: LD_EXP 66
27708: AND
27709: IFFALSE 27812
27711: GO 27713
27713: DISABLE
27714: LD_INT 0
27716: PPUSH
// begin for i := 1 to 5 do
27717: LD_ADDR_VAR 0 1
27721: PUSH
27722: DOUBLE
27723: LD_INT 1
27725: DEC
27726: ST_TO_ADDR
27727: LD_INT 5
27729: PUSH
27730: FOR_TO
27731: IFFALSE 27810
// begin uc_nation := nation_nature ;
27733: LD_ADDR_OWVAR 21
27737: PUSH
27738: LD_INT 0
27740: ST_TO_ADDR
// uc_side := 0 ;
27741: LD_ADDR_OWVAR 20
27745: PUSH
27746: LD_INT 0
27748: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27749: LD_ADDR_OWVAR 29
27753: PUSH
27754: LD_INT 12
27756: PUSH
27757: LD_INT 12
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: ST_TO_ADDR
// hc_agressivity := 20 ;
27764: LD_ADDR_OWVAR 35
27768: PUSH
27769: LD_INT 20
27771: ST_TO_ADDR
// hc_class := class_tiger ;
27772: LD_ADDR_OWVAR 28
27776: PUSH
27777: LD_INT 14
27779: ST_TO_ADDR
// hc_gallery :=  ;
27780: LD_ADDR_OWVAR 33
27784: PUSH
27785: LD_STRING 
27787: ST_TO_ADDR
// hc_name :=  ;
27788: LD_ADDR_OWVAR 26
27792: PUSH
27793: LD_STRING 
27795: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27796: CALL_OW 44
27800: PPUSH
27801: LD_INT 0
27803: PPUSH
27804: CALL_OW 51
// end ;
27808: GO 27730
27810: POP
27811: POP
// end ;
27812: PPOPN 1
27814: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27815: LD_EXP 47
27819: IFFALSE 27827
27821: PUSH
27822: LD_EXP 67
27826: AND
27827: IFFALSE 27836
27829: GO 27831
27831: DISABLE
// StreamSibBomb ;
27832: CALL 27837 0 0
27836: END
// export function StreamSibBomb ; var i , x , y ; begin
27837: LD_INT 0
27839: PPUSH
27840: PPUSH
27841: PPUSH
27842: PPUSH
// result := false ;
27843: LD_ADDR_VAR 0 1
27847: PUSH
27848: LD_INT 0
27850: ST_TO_ADDR
// for i := 1 to 16 do
27851: LD_ADDR_VAR 0 2
27855: PUSH
27856: DOUBLE
27857: LD_INT 1
27859: DEC
27860: ST_TO_ADDR
27861: LD_INT 16
27863: PUSH
27864: FOR_TO
27865: IFFALSE 28064
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27867: LD_ADDR_VAR 0 3
27871: PUSH
27872: LD_INT 10
27874: PUSH
27875: LD_INT 20
27877: PUSH
27878: LD_INT 30
27880: PUSH
27881: LD_INT 40
27883: PUSH
27884: LD_INT 50
27886: PUSH
27887: LD_INT 60
27889: PUSH
27890: LD_INT 70
27892: PUSH
27893: LD_INT 80
27895: PUSH
27896: LD_INT 90
27898: PUSH
27899: LD_INT 100
27901: PUSH
27902: LD_INT 110
27904: PUSH
27905: LD_INT 120
27907: PUSH
27908: LD_INT 130
27910: PUSH
27911: LD_INT 140
27913: PUSH
27914: LD_INT 150
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: PUSH
27934: LD_INT 1
27936: PPUSH
27937: LD_INT 15
27939: PPUSH
27940: CALL_OW 12
27944: ARRAY
27945: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27946: LD_ADDR_VAR 0 4
27950: PUSH
27951: LD_INT 10
27953: PUSH
27954: LD_INT 20
27956: PUSH
27957: LD_INT 30
27959: PUSH
27960: LD_INT 40
27962: PUSH
27963: LD_INT 50
27965: PUSH
27966: LD_INT 60
27968: PUSH
27969: LD_INT 70
27971: PUSH
27972: LD_INT 80
27974: PUSH
27975: LD_INT 90
27977: PUSH
27978: LD_INT 100
27980: PUSH
27981: LD_INT 110
27983: PUSH
27984: LD_INT 120
27986: PUSH
27987: LD_INT 130
27989: PUSH
27990: LD_INT 140
27992: PUSH
27993: LD_INT 150
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: PUSH
28013: LD_INT 1
28015: PPUSH
28016: LD_INT 15
28018: PPUSH
28019: CALL_OW 12
28023: ARRAY
28024: ST_TO_ADDR
// if ValidHex ( x , y ) then
28025: LD_VAR 0 3
28029: PPUSH
28030: LD_VAR 0 4
28034: PPUSH
28035: CALL_OW 488
28039: IFFALSE 28062
// begin result := [ x , y ] ;
28041: LD_ADDR_VAR 0 1
28045: PUSH
28046: LD_VAR 0 3
28050: PUSH
28051: LD_VAR 0 4
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: ST_TO_ADDR
// break ;
28060: GO 28064
// end ; end ;
28062: GO 27864
28064: POP
28065: POP
// if result then
28066: LD_VAR 0 1
28070: IFFALSE 28130
// begin ToLua ( playSibBomb() ) ;
28072: LD_STRING playSibBomb()
28074: PPUSH
28075: CALL_OW 559
// wait ( 0 0$14 ) ;
28079: LD_INT 490
28081: PPUSH
28082: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28086: LD_VAR 0 1
28090: PUSH
28091: LD_INT 1
28093: ARRAY
28094: PPUSH
28095: LD_VAR 0 1
28099: PUSH
28100: LD_INT 2
28102: ARRAY
28103: PPUSH
28104: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28108: LD_VAR 0 1
28112: PUSH
28113: LD_INT 1
28115: ARRAY
28116: PPUSH
28117: LD_VAR 0 1
28121: PUSH
28122: LD_INT 2
28124: ARRAY
28125: PPUSH
28126: CALL_OW 429
// end ; end ;
28130: LD_VAR 0 1
28134: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28135: LD_EXP 47
28139: IFFALSE 28147
28141: PUSH
28142: LD_EXP 69
28146: AND
28147: IFFALSE 28159
28149: GO 28151
28151: DISABLE
// YouLost (  ) ;
28152: LD_STRING 
28154: PPUSH
28155: CALL_OW 104
28159: END
// every 0 0$1 trigger StreamModeActive and sFog do
28160: LD_EXP 47
28164: IFFALSE 28172
28166: PUSH
28167: LD_EXP 68
28171: AND
28172: IFFALSE 28186
28174: GO 28176
28176: DISABLE
// FogOff ( your_side ) ;
28177: LD_OWVAR 2
28181: PPUSH
28182: CALL_OW 344
28186: END
// every 0 0$1 trigger StreamModeActive and sSun do
28187: LD_EXP 47
28191: IFFALSE 28199
28193: PUSH
28194: LD_EXP 70
28198: AND
28199: IFFALSE 28227
28201: GO 28203
28203: DISABLE
// begin solar_recharge_percent := 0 ;
28204: LD_ADDR_OWVAR 79
28208: PUSH
28209: LD_INT 0
28211: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28212: LD_INT 10500
28214: PPUSH
28215: CALL_OW 67
// solar_recharge_percent := 100 ;
28219: LD_ADDR_OWVAR 79
28223: PUSH
28224: LD_INT 100
28226: ST_TO_ADDR
// end ;
28227: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28228: LD_EXP 47
28232: IFFALSE 28240
28234: PUSH
28235: LD_EXP 71
28239: AND
28240: IFFALSE 28479
28242: GO 28244
28244: DISABLE
28245: LD_INT 0
28247: PPUSH
28248: PPUSH
28249: PPUSH
// begin tmp := [ ] ;
28250: LD_ADDR_VAR 0 3
28254: PUSH
28255: EMPTY
28256: ST_TO_ADDR
// for i := 1 to 6 do
28257: LD_ADDR_VAR 0 1
28261: PUSH
28262: DOUBLE
28263: LD_INT 1
28265: DEC
28266: ST_TO_ADDR
28267: LD_INT 6
28269: PUSH
28270: FOR_TO
28271: IFFALSE 28376
// begin uc_nation := nation_nature ;
28273: LD_ADDR_OWVAR 21
28277: PUSH
28278: LD_INT 0
28280: ST_TO_ADDR
// uc_side := 0 ;
28281: LD_ADDR_OWVAR 20
28285: PUSH
28286: LD_INT 0
28288: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28289: LD_ADDR_OWVAR 29
28293: PUSH
28294: LD_INT 12
28296: PUSH
28297: LD_INT 12
28299: PUSH
28300: EMPTY
28301: LIST
28302: LIST
28303: ST_TO_ADDR
// hc_agressivity := 20 ;
28304: LD_ADDR_OWVAR 35
28308: PUSH
28309: LD_INT 20
28311: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28312: LD_ADDR_OWVAR 28
28316: PUSH
28317: LD_INT 17
28319: ST_TO_ADDR
// hc_gallery :=  ;
28320: LD_ADDR_OWVAR 33
28324: PUSH
28325: LD_STRING 
28327: ST_TO_ADDR
// hc_name :=  ;
28328: LD_ADDR_OWVAR 26
28332: PUSH
28333: LD_STRING 
28335: ST_TO_ADDR
// un := CreateHuman ;
28336: LD_ADDR_VAR 0 2
28340: PUSH
28341: CALL_OW 44
28345: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28346: LD_VAR 0 2
28350: PPUSH
28351: LD_INT 1
28353: PPUSH
28354: CALL_OW 51
// tmp := tmp ^ un ;
28358: LD_ADDR_VAR 0 3
28362: PUSH
28363: LD_VAR 0 3
28367: PUSH
28368: LD_VAR 0 2
28372: ADD
28373: ST_TO_ADDR
// end ;
28374: GO 28270
28376: POP
28377: POP
// repeat wait ( 0 0$1 ) ;
28378: LD_INT 35
28380: PPUSH
28381: CALL_OW 67
// for un in tmp do
28385: LD_ADDR_VAR 0 2
28389: PUSH
28390: LD_VAR 0 3
28394: PUSH
28395: FOR_IN
28396: IFFALSE 28470
// begin if IsDead ( un ) then
28398: LD_VAR 0 2
28402: PPUSH
28403: CALL_OW 301
28407: IFFALSE 28427
// begin tmp := tmp diff un ;
28409: LD_ADDR_VAR 0 3
28413: PUSH
28414: LD_VAR 0 3
28418: PUSH
28419: LD_VAR 0 2
28423: DIFF
28424: ST_TO_ADDR
// continue ;
28425: GO 28395
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28427: LD_VAR 0 2
28431: PPUSH
28432: LD_INT 3
28434: PUSH
28435: LD_INT 22
28437: PUSH
28438: LD_INT 0
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PPUSH
28449: CALL_OW 69
28453: PPUSH
28454: LD_VAR 0 2
28458: PPUSH
28459: CALL_OW 74
28463: PPUSH
28464: CALL_OW 115
// end ;
28468: GO 28395
28470: POP
28471: POP
// until not tmp ;
28472: LD_VAR 0 3
28476: NOT
28477: IFFALSE 28378
// end ;
28479: PPOPN 3
28481: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28482: LD_EXP 47
28486: IFFALSE 28494
28488: PUSH
28489: LD_EXP 72
28493: AND
28494: IFFALSE 28548
28496: GO 28498
28498: DISABLE
// begin ToLua ( displayTroll(); ) ;
28499: LD_STRING displayTroll();
28501: PPUSH
28502: CALL_OW 559
// wait ( 3 3$00 ) ;
28506: LD_INT 6300
28508: PPUSH
28509: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28513: LD_STRING hideTroll();
28515: PPUSH
28516: CALL_OW 559
// wait ( 1 1$00 ) ;
28520: LD_INT 2100
28522: PPUSH
28523: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28527: LD_STRING displayTroll();
28529: PPUSH
28530: CALL_OW 559
// wait ( 1 1$00 ) ;
28534: LD_INT 2100
28536: PPUSH
28537: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28541: LD_STRING hideTroll();
28543: PPUSH
28544: CALL_OW 559
// end ;
28548: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28549: LD_EXP 47
28553: IFFALSE 28561
28555: PUSH
28556: LD_EXP 73
28560: AND
28561: IFFALSE 28624
28563: GO 28565
28565: DISABLE
28566: LD_INT 0
28568: PPUSH
// begin p := 0 ;
28569: LD_ADDR_VAR 0 1
28573: PUSH
28574: LD_INT 0
28576: ST_TO_ADDR
// repeat game_speed := 1 ;
28577: LD_ADDR_OWVAR 65
28581: PUSH
28582: LD_INT 1
28584: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28585: LD_INT 35
28587: PPUSH
28588: CALL_OW 67
// p := p + 1 ;
28592: LD_ADDR_VAR 0 1
28596: PUSH
28597: LD_VAR 0 1
28601: PUSH
28602: LD_INT 1
28604: PLUS
28605: ST_TO_ADDR
// until p >= 60 ;
28606: LD_VAR 0 1
28610: PUSH
28611: LD_INT 60
28613: GREATEREQUAL
28614: IFFALSE 28577
// game_speed := 4 ;
28616: LD_ADDR_OWVAR 65
28620: PUSH
28621: LD_INT 4
28623: ST_TO_ADDR
// end ;
28624: PPOPN 1
28626: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28627: LD_EXP 47
28631: IFFALSE 28639
28633: PUSH
28634: LD_EXP 74
28638: AND
28639: IFFALSE 28785
28641: GO 28643
28643: DISABLE
28644: LD_INT 0
28646: PPUSH
28647: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28648: LD_ADDR_VAR 0 1
28652: PUSH
28653: LD_INT 22
28655: PUSH
28656: LD_OWVAR 2
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 2
28667: PUSH
28668: LD_INT 30
28670: PUSH
28671: LD_INT 0
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: LD_INT 30
28680: PUSH
28681: LD_INT 1
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: LIST
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PPUSH
28697: CALL_OW 69
28701: ST_TO_ADDR
// if not depot then
28702: LD_VAR 0 1
28706: NOT
28707: IFFALSE 28711
// exit ;
28709: GO 28785
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28711: LD_ADDR_VAR 0 2
28715: PUSH
28716: LD_VAR 0 1
28720: PUSH
28721: LD_INT 1
28723: PPUSH
28724: LD_VAR 0 1
28728: PPUSH
28729: CALL_OW 12
28733: ARRAY
28734: PPUSH
28735: CALL_OW 274
28739: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28740: LD_VAR 0 2
28744: PPUSH
28745: LD_INT 1
28747: PPUSH
28748: LD_INT 0
28750: PPUSH
28751: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28755: LD_VAR 0 2
28759: PPUSH
28760: LD_INT 2
28762: PPUSH
28763: LD_INT 0
28765: PPUSH
28766: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28770: LD_VAR 0 2
28774: PPUSH
28775: LD_INT 3
28777: PPUSH
28778: LD_INT 0
28780: PPUSH
28781: CALL_OW 277
// end ;
28785: PPOPN 2
28787: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28788: LD_EXP 47
28792: IFFALSE 28800
28794: PUSH
28795: LD_EXP 75
28799: AND
28800: IFFALSE 28897
28802: GO 28804
28804: DISABLE
28805: LD_INT 0
28807: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28808: LD_ADDR_VAR 0 1
28812: PUSH
28813: LD_INT 22
28815: PUSH
28816: LD_OWVAR 2
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 21
28827: PUSH
28828: LD_INT 1
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PUSH
28835: LD_INT 3
28837: PUSH
28838: LD_INT 23
28840: PUSH
28841: LD_INT 0
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: LIST
28856: PPUSH
28857: CALL_OW 69
28861: ST_TO_ADDR
// if not tmp then
28862: LD_VAR 0 1
28866: NOT
28867: IFFALSE 28871
// exit ;
28869: GO 28897
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28871: LD_VAR 0 1
28875: PUSH
28876: LD_INT 1
28878: PPUSH
28879: LD_VAR 0 1
28883: PPUSH
28884: CALL_OW 12
28888: ARRAY
28889: PPUSH
28890: LD_INT 200
28892: PPUSH
28893: CALL_OW 234
// end ;
28897: PPOPN 1
28899: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28900: LD_EXP 47
28904: IFFALSE 28912
28906: PUSH
28907: LD_EXP 76
28911: AND
28912: IFFALSE 28991
28914: GO 28916
28916: DISABLE
28917: LD_INT 0
28919: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28920: LD_ADDR_VAR 0 1
28924: PUSH
28925: LD_INT 22
28927: PUSH
28928: LD_OWVAR 2
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: LD_INT 21
28939: PUSH
28940: LD_INT 2
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PPUSH
28951: CALL_OW 69
28955: ST_TO_ADDR
// if not tmp then
28956: LD_VAR 0 1
28960: NOT
28961: IFFALSE 28965
// exit ;
28963: GO 28991
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28965: LD_VAR 0 1
28969: PUSH
28970: LD_INT 1
28972: PPUSH
28973: LD_VAR 0 1
28977: PPUSH
28978: CALL_OW 12
28982: ARRAY
28983: PPUSH
28984: LD_INT 60
28986: PPUSH
28987: CALL_OW 234
// end ;
28991: PPOPN 1
28993: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28994: LD_EXP 47
28998: IFFALSE 29006
29000: PUSH
29001: LD_EXP 77
29005: AND
29006: IFFALSE 29105
29008: GO 29010
29010: DISABLE
29011: LD_INT 0
29013: PPUSH
29014: PPUSH
// begin enable ;
29015: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29016: LD_ADDR_VAR 0 1
29020: PUSH
29021: LD_INT 22
29023: PUSH
29024: LD_OWVAR 2
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PUSH
29033: LD_INT 61
29035: PUSH
29036: EMPTY
29037: LIST
29038: PUSH
29039: LD_INT 33
29041: PUSH
29042: LD_INT 2
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: LIST
29053: PPUSH
29054: CALL_OW 69
29058: ST_TO_ADDR
// if not tmp then
29059: LD_VAR 0 1
29063: NOT
29064: IFFALSE 29068
// exit ;
29066: GO 29105
// for i in tmp do
29068: LD_ADDR_VAR 0 2
29072: PUSH
29073: LD_VAR 0 1
29077: PUSH
29078: FOR_IN
29079: IFFALSE 29103
// if IsControledBy ( i ) then
29081: LD_VAR 0 2
29085: PPUSH
29086: CALL_OW 312
29090: IFFALSE 29101
// ComUnlink ( i ) ;
29092: LD_VAR 0 2
29096: PPUSH
29097: CALL_OW 136
29101: GO 29078
29103: POP
29104: POP
// end ;
29105: PPOPN 2
29107: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29108: LD_EXP 47
29112: IFFALSE 29120
29114: PUSH
29115: LD_EXP 78
29119: AND
29120: IFFALSE 29260
29122: GO 29124
29124: DISABLE
29125: LD_INT 0
29127: PPUSH
29128: PPUSH
// begin ToLua ( displayPowell(); ) ;
29129: LD_STRING displayPowell();
29131: PPUSH
29132: CALL_OW 559
// uc_side := 0 ;
29136: LD_ADDR_OWVAR 20
29140: PUSH
29141: LD_INT 0
29143: ST_TO_ADDR
// uc_nation := 2 ;
29144: LD_ADDR_OWVAR 21
29148: PUSH
29149: LD_INT 2
29151: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29152: LD_ADDR_OWVAR 37
29156: PUSH
29157: LD_INT 14
29159: ST_TO_ADDR
// vc_engine := engine_siberite ;
29160: LD_ADDR_OWVAR 39
29164: PUSH
29165: LD_INT 3
29167: ST_TO_ADDR
// vc_control := control_apeman ;
29168: LD_ADDR_OWVAR 38
29172: PUSH
29173: LD_INT 5
29175: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29176: LD_ADDR_OWVAR 40
29180: PUSH
29181: LD_INT 29
29183: ST_TO_ADDR
// un := CreateVehicle ;
29184: LD_ADDR_VAR 0 2
29188: PUSH
29189: CALL_OW 45
29193: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29194: LD_VAR 0 2
29198: PPUSH
29199: LD_INT 1
29201: PPUSH
29202: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29206: LD_INT 35
29208: PPUSH
29209: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29213: LD_VAR 0 2
29217: PPUSH
29218: LD_INT 22
29220: PUSH
29221: LD_OWVAR 2
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PPUSH
29230: CALL_OW 69
29234: PPUSH
29235: LD_VAR 0 2
29239: PPUSH
29240: CALL_OW 74
29244: PPUSH
29245: CALL_OW 115
// until IsDead ( un ) ;
29249: LD_VAR 0 2
29253: PPUSH
29254: CALL_OW 301
29258: IFFALSE 29206
// end ;
29260: PPOPN 2
29262: END
// every 0 0$1 trigger StreamModeActive and sStu do
29263: LD_EXP 47
29267: IFFALSE 29275
29269: PUSH
29270: LD_EXP 86
29274: AND
29275: IFFALSE 29291
29277: GO 29279
29279: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29280: LD_STRING displayStucuk();
29282: PPUSH
29283: CALL_OW 559
// ResetFog ;
29287: CALL_OW 335
// end ;
29291: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29292: LD_EXP 47
29296: IFFALSE 29304
29298: PUSH
29299: LD_EXP 79
29303: AND
29304: IFFALSE 29445
29306: GO 29308
29308: DISABLE
29309: LD_INT 0
29311: PPUSH
29312: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29313: LD_ADDR_VAR 0 2
29317: PUSH
29318: LD_INT 22
29320: PUSH
29321: LD_OWVAR 2
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: PUSH
29330: LD_INT 21
29332: PUSH
29333: LD_INT 1
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PPUSH
29344: CALL_OW 69
29348: ST_TO_ADDR
// if not tmp then
29349: LD_VAR 0 2
29353: NOT
29354: IFFALSE 29358
// exit ;
29356: GO 29445
// un := tmp [ rand ( 1 , tmp ) ] ;
29358: LD_ADDR_VAR 0 1
29362: PUSH
29363: LD_VAR 0 2
29367: PUSH
29368: LD_INT 1
29370: PPUSH
29371: LD_VAR 0 2
29375: PPUSH
29376: CALL_OW 12
29380: ARRAY
29381: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29382: LD_VAR 0 1
29386: PPUSH
29387: LD_INT 0
29389: PPUSH
29390: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29394: LD_VAR 0 1
29398: PPUSH
29399: LD_OWVAR 3
29403: PUSH
29404: LD_VAR 0 1
29408: DIFF
29409: PPUSH
29410: LD_VAR 0 1
29414: PPUSH
29415: CALL_OW 74
29419: PPUSH
29420: CALL_OW 115
// wait ( 0 0$20 ) ;
29424: LD_INT 700
29426: PPUSH
29427: CALL_OW 67
// SetSide ( un , your_side ) ;
29431: LD_VAR 0 1
29435: PPUSH
29436: LD_OWVAR 2
29440: PPUSH
29441: CALL_OW 235
// end ;
29445: PPOPN 2
29447: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29448: LD_EXP 47
29452: IFFALSE 29460
29454: PUSH
29455: LD_EXP 80
29459: AND
29460: IFFALSE 29566
29462: GO 29464
29464: DISABLE
29465: LD_INT 0
29467: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29468: LD_ADDR_VAR 0 1
29472: PUSH
29473: LD_INT 22
29475: PUSH
29476: LD_OWVAR 2
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: PUSH
29485: LD_INT 2
29487: PUSH
29488: LD_INT 30
29490: PUSH
29491: LD_INT 0
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PUSH
29498: LD_INT 30
29500: PUSH
29501: LD_INT 1
29503: PUSH
29504: EMPTY
29505: LIST
29506: LIST
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: LIST
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PPUSH
29517: CALL_OW 69
29521: ST_TO_ADDR
// if not depot then
29522: LD_VAR 0 1
29526: NOT
29527: IFFALSE 29531
// exit ;
29529: GO 29566
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29531: LD_VAR 0 1
29535: PUSH
29536: LD_INT 1
29538: ARRAY
29539: PPUSH
29540: CALL_OW 250
29544: PPUSH
29545: LD_VAR 0 1
29549: PUSH
29550: LD_INT 1
29552: ARRAY
29553: PPUSH
29554: CALL_OW 251
29558: PPUSH
29559: LD_INT 70
29561: PPUSH
29562: CALL_OW 495
// end ;
29566: PPOPN 1
29568: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29569: LD_EXP 47
29573: IFFALSE 29581
29575: PUSH
29576: LD_EXP 81
29580: AND
29581: IFFALSE 29792
29583: GO 29585
29585: DISABLE
29586: LD_INT 0
29588: PPUSH
29589: PPUSH
29590: PPUSH
29591: PPUSH
29592: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29593: LD_ADDR_VAR 0 5
29597: PUSH
29598: LD_INT 22
29600: PUSH
29601: LD_OWVAR 2
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PUSH
29610: LD_INT 21
29612: PUSH
29613: LD_INT 1
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: PPUSH
29624: CALL_OW 69
29628: ST_TO_ADDR
// if not tmp then
29629: LD_VAR 0 5
29633: NOT
29634: IFFALSE 29638
// exit ;
29636: GO 29792
// for i in tmp do
29638: LD_ADDR_VAR 0 1
29642: PUSH
29643: LD_VAR 0 5
29647: PUSH
29648: FOR_IN
29649: IFFALSE 29790
// begin d := rand ( 0 , 5 ) ;
29651: LD_ADDR_VAR 0 4
29655: PUSH
29656: LD_INT 0
29658: PPUSH
29659: LD_INT 5
29661: PPUSH
29662: CALL_OW 12
29666: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29667: LD_ADDR_VAR 0 2
29671: PUSH
29672: LD_VAR 0 1
29676: PPUSH
29677: CALL_OW 250
29681: PPUSH
29682: LD_VAR 0 4
29686: PPUSH
29687: LD_INT 3
29689: PPUSH
29690: LD_INT 12
29692: PPUSH
29693: CALL_OW 12
29697: PPUSH
29698: CALL_OW 272
29702: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29703: LD_ADDR_VAR 0 3
29707: PUSH
29708: LD_VAR 0 1
29712: PPUSH
29713: CALL_OW 251
29717: PPUSH
29718: LD_VAR 0 4
29722: PPUSH
29723: LD_INT 3
29725: PPUSH
29726: LD_INT 12
29728: PPUSH
29729: CALL_OW 12
29733: PPUSH
29734: CALL_OW 273
29738: ST_TO_ADDR
// if ValidHex ( x , y ) then
29739: LD_VAR 0 2
29743: PPUSH
29744: LD_VAR 0 3
29748: PPUSH
29749: CALL_OW 488
29753: IFFALSE 29788
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29755: LD_VAR 0 1
29759: PPUSH
29760: LD_VAR 0 2
29764: PPUSH
29765: LD_VAR 0 3
29769: PPUSH
29770: LD_INT 3
29772: PPUSH
29773: LD_INT 6
29775: PPUSH
29776: CALL_OW 12
29780: PPUSH
29781: LD_INT 1
29783: PPUSH
29784: CALL_OW 483
// end ;
29788: GO 29648
29790: POP
29791: POP
// end ;
29792: PPOPN 5
29794: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29795: LD_EXP 47
29799: IFFALSE 29807
29801: PUSH
29802: LD_EXP 82
29806: AND
29807: IFFALSE 29901
29809: GO 29811
29811: DISABLE
29812: LD_INT 0
29814: PPUSH
29815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29816: LD_ADDR_VAR 0 2
29820: PUSH
29821: LD_INT 22
29823: PUSH
29824: LD_OWVAR 2
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: LD_INT 32
29835: PUSH
29836: LD_INT 1
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: PUSH
29843: LD_INT 21
29845: PUSH
29846: LD_INT 2
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: LIST
29857: PPUSH
29858: CALL_OW 69
29862: ST_TO_ADDR
// if not tmp then
29863: LD_VAR 0 2
29867: NOT
29868: IFFALSE 29872
// exit ;
29870: GO 29901
// for i in tmp do
29872: LD_ADDR_VAR 0 1
29876: PUSH
29877: LD_VAR 0 2
29881: PUSH
29882: FOR_IN
29883: IFFALSE 29899
// SetFuel ( i , 0 ) ;
29885: LD_VAR 0 1
29889: PPUSH
29890: LD_INT 0
29892: PPUSH
29893: CALL_OW 240
29897: GO 29882
29899: POP
29900: POP
// end ;
29901: PPOPN 2
29903: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29904: LD_EXP 47
29908: IFFALSE 29916
29910: PUSH
29911: LD_EXP 83
29915: AND
29916: IFFALSE 29982
29918: GO 29920
29920: DISABLE
29921: LD_INT 0
29923: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29924: LD_ADDR_VAR 0 1
29928: PUSH
29929: LD_INT 22
29931: PUSH
29932: LD_OWVAR 2
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 30
29943: PUSH
29944: LD_INT 29
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PPUSH
29955: CALL_OW 69
29959: ST_TO_ADDR
// if not tmp then
29960: LD_VAR 0 1
29964: NOT
29965: IFFALSE 29969
// exit ;
29967: GO 29982
// DestroyUnit ( tmp [ 1 ] ) ;
29969: LD_VAR 0 1
29973: PUSH
29974: LD_INT 1
29976: ARRAY
29977: PPUSH
29978: CALL_OW 65
// end ;
29982: PPOPN 1
29984: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29985: LD_EXP 47
29989: IFFALSE 29997
29991: PUSH
29992: LD_EXP 85
29996: AND
29997: IFFALSE 30126
29999: GO 30001
30001: DISABLE
30002: LD_INT 0
30004: PPUSH
// begin uc_side := 0 ;
30005: LD_ADDR_OWVAR 20
30009: PUSH
30010: LD_INT 0
30012: ST_TO_ADDR
// uc_nation := nation_arabian ;
30013: LD_ADDR_OWVAR 21
30017: PUSH
30018: LD_INT 2
30020: ST_TO_ADDR
// hc_gallery :=  ;
30021: LD_ADDR_OWVAR 33
30025: PUSH
30026: LD_STRING 
30028: ST_TO_ADDR
// hc_name :=  ;
30029: LD_ADDR_OWVAR 26
30033: PUSH
30034: LD_STRING 
30036: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30037: LD_INT 1
30039: PPUSH
30040: LD_INT 11
30042: PPUSH
30043: LD_INT 10
30045: PPUSH
30046: CALL_OW 380
// un := CreateHuman ;
30050: LD_ADDR_VAR 0 1
30054: PUSH
30055: CALL_OW 44
30059: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30060: LD_VAR 0 1
30064: PPUSH
30065: LD_INT 1
30067: PPUSH
30068: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30072: LD_INT 35
30074: PPUSH
30075: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30079: LD_VAR 0 1
30083: PPUSH
30084: LD_INT 22
30086: PUSH
30087: LD_OWVAR 2
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PPUSH
30096: CALL_OW 69
30100: PPUSH
30101: LD_VAR 0 1
30105: PPUSH
30106: CALL_OW 74
30110: PPUSH
30111: CALL_OW 115
// until IsDead ( un ) ;
30115: LD_VAR 0 1
30119: PPUSH
30120: CALL_OW 301
30124: IFFALSE 30072
// end ;
30126: PPOPN 1
30128: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30129: LD_EXP 47
30133: IFFALSE 30141
30135: PUSH
30136: LD_EXP 87
30140: AND
30141: IFFALSE 30153
30143: GO 30145
30145: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30146: LD_STRING earthquake(getX(game), 0, 32)
30148: PPUSH
30149: CALL_OW 559
30153: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30154: LD_EXP 47
30158: IFFALSE 30166
30160: PUSH
30161: LD_EXP 88
30165: AND
30166: IFFALSE 30257
30168: GO 30170
30170: DISABLE
30171: LD_INT 0
30173: PPUSH
// begin enable ;
30174: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30175: LD_ADDR_VAR 0 1
30179: PUSH
30180: LD_INT 22
30182: PUSH
30183: LD_OWVAR 2
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: PUSH
30192: LD_INT 21
30194: PUSH
30195: LD_INT 2
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: PUSH
30202: LD_INT 33
30204: PUSH
30205: LD_INT 3
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: LIST
30216: PPUSH
30217: CALL_OW 69
30221: ST_TO_ADDR
// if not tmp then
30222: LD_VAR 0 1
30226: NOT
30227: IFFALSE 30231
// exit ;
30229: GO 30257
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30231: LD_VAR 0 1
30235: PUSH
30236: LD_INT 1
30238: PPUSH
30239: LD_VAR 0 1
30243: PPUSH
30244: CALL_OW 12
30248: ARRAY
30249: PPUSH
30250: LD_INT 1
30252: PPUSH
30253: CALL_OW 234
// end ;
30257: PPOPN 1
30259: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30260: LD_EXP 47
30264: IFFALSE 30272
30266: PUSH
30267: LD_EXP 89
30271: AND
30272: IFFALSE 30413
30274: GO 30276
30276: DISABLE
30277: LD_INT 0
30279: PPUSH
30280: PPUSH
30281: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30282: LD_ADDR_VAR 0 3
30286: PUSH
30287: LD_INT 22
30289: PUSH
30290: LD_OWVAR 2
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 25
30301: PUSH
30302: LD_INT 1
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PPUSH
30313: CALL_OW 69
30317: ST_TO_ADDR
// if not tmp then
30318: LD_VAR 0 3
30322: NOT
30323: IFFALSE 30327
// exit ;
30325: GO 30413
// un := tmp [ rand ( 1 , tmp ) ] ;
30327: LD_ADDR_VAR 0 2
30331: PUSH
30332: LD_VAR 0 3
30336: PUSH
30337: LD_INT 1
30339: PPUSH
30340: LD_VAR 0 3
30344: PPUSH
30345: CALL_OW 12
30349: ARRAY
30350: ST_TO_ADDR
// if Crawls ( un ) then
30351: LD_VAR 0 2
30355: PPUSH
30356: CALL_OW 318
30360: IFFALSE 30371
// ComWalk ( un ) ;
30362: LD_VAR 0 2
30366: PPUSH
30367: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30371: LD_VAR 0 2
30375: PPUSH
30376: LD_INT 9
30378: PPUSH
30379: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30383: LD_INT 28
30385: PPUSH
30386: LD_OWVAR 2
30390: PPUSH
30391: LD_INT 2
30393: PPUSH
30394: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30398: LD_INT 29
30400: PPUSH
30401: LD_OWVAR 2
30405: PPUSH
30406: LD_INT 2
30408: PPUSH
30409: CALL_OW 322
// end ;
30413: PPOPN 3
30415: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30416: LD_EXP 47
30420: IFFALSE 30428
30422: PUSH
30423: LD_EXP 90
30427: AND
30428: IFFALSE 30539
30430: GO 30432
30432: DISABLE
30433: LD_INT 0
30435: PPUSH
30436: PPUSH
30437: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30438: LD_ADDR_VAR 0 3
30442: PUSH
30443: LD_INT 22
30445: PUSH
30446: LD_OWVAR 2
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: PUSH
30455: LD_INT 25
30457: PUSH
30458: LD_INT 1
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PPUSH
30469: CALL_OW 69
30473: ST_TO_ADDR
// if not tmp then
30474: LD_VAR 0 3
30478: NOT
30479: IFFALSE 30483
// exit ;
30481: GO 30539
// un := tmp [ rand ( 1 , tmp ) ] ;
30483: LD_ADDR_VAR 0 2
30487: PUSH
30488: LD_VAR 0 3
30492: PUSH
30493: LD_INT 1
30495: PPUSH
30496: LD_VAR 0 3
30500: PPUSH
30501: CALL_OW 12
30505: ARRAY
30506: ST_TO_ADDR
// if Crawls ( un ) then
30507: LD_VAR 0 2
30511: PPUSH
30512: CALL_OW 318
30516: IFFALSE 30527
// ComWalk ( un ) ;
30518: LD_VAR 0 2
30522: PPUSH
30523: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30527: LD_VAR 0 2
30531: PPUSH
30532: LD_INT 8
30534: PPUSH
30535: CALL_OW 336
// end ;
30539: PPOPN 3
30541: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30542: LD_EXP 47
30546: IFFALSE 30554
30548: PUSH
30549: LD_EXP 91
30553: AND
30554: IFFALSE 30698
30556: GO 30558
30558: DISABLE
30559: LD_INT 0
30561: PPUSH
30562: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30563: LD_ADDR_VAR 0 2
30567: PUSH
30568: LD_INT 22
30570: PUSH
30571: LD_OWVAR 2
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 21
30582: PUSH
30583: LD_INT 2
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 2
30592: PUSH
30593: LD_INT 34
30595: PUSH
30596: LD_INT 12
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 34
30605: PUSH
30606: LD_INT 51
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 34
30615: PUSH
30616: LD_INT 32
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: LIST
30633: PPUSH
30634: CALL_OW 69
30638: ST_TO_ADDR
// if not tmp then
30639: LD_VAR 0 2
30643: NOT
30644: IFFALSE 30648
// exit ;
30646: GO 30698
// for i in tmp do
30648: LD_ADDR_VAR 0 1
30652: PUSH
30653: LD_VAR 0 2
30657: PUSH
30658: FOR_IN
30659: IFFALSE 30696
// if GetCargo ( i , mat_artifact ) = 0 then
30661: LD_VAR 0 1
30665: PPUSH
30666: LD_INT 4
30668: PPUSH
30669: CALL_OW 289
30673: PUSH
30674: LD_INT 0
30676: EQUAL
30677: IFFALSE 30694
// SetCargo ( i , mat_siberit , 100 ) ;
30679: LD_VAR 0 1
30683: PPUSH
30684: LD_INT 3
30686: PPUSH
30687: LD_INT 100
30689: PPUSH
30690: CALL_OW 290
30694: GO 30658
30696: POP
30697: POP
// end ;
30698: PPOPN 2
30700: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30701: LD_EXP 47
30705: IFFALSE 30713
30707: PUSH
30708: LD_EXP 92
30712: AND
30713: IFFALSE 30896
30715: GO 30717
30717: DISABLE
30718: LD_INT 0
30720: PPUSH
30721: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30722: LD_ADDR_VAR 0 2
30726: PUSH
30727: LD_INT 22
30729: PUSH
30730: LD_OWVAR 2
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PPUSH
30739: CALL_OW 69
30743: ST_TO_ADDR
// if not tmp then
30744: LD_VAR 0 2
30748: NOT
30749: IFFALSE 30753
// exit ;
30751: GO 30896
// for i := 1 to 2 do
30753: LD_ADDR_VAR 0 1
30757: PUSH
30758: DOUBLE
30759: LD_INT 1
30761: DEC
30762: ST_TO_ADDR
30763: LD_INT 2
30765: PUSH
30766: FOR_TO
30767: IFFALSE 30894
// begin uc_side := your_side ;
30769: LD_ADDR_OWVAR 20
30773: PUSH
30774: LD_OWVAR 2
30778: ST_TO_ADDR
// uc_nation := nation_american ;
30779: LD_ADDR_OWVAR 21
30783: PUSH
30784: LD_INT 1
30786: ST_TO_ADDR
// vc_chassis := us_morphling ;
30787: LD_ADDR_OWVAR 37
30791: PUSH
30792: LD_INT 5
30794: ST_TO_ADDR
// vc_engine := engine_siberite ;
30795: LD_ADDR_OWVAR 39
30799: PUSH
30800: LD_INT 3
30802: ST_TO_ADDR
// vc_control := control_computer ;
30803: LD_ADDR_OWVAR 38
30807: PUSH
30808: LD_INT 3
30810: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30811: LD_ADDR_OWVAR 40
30815: PUSH
30816: LD_INT 10
30818: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30819: LD_VAR 0 2
30823: PUSH
30824: LD_INT 1
30826: ARRAY
30827: PPUSH
30828: CALL_OW 310
30832: NOT
30833: IFFALSE 30880
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30835: CALL_OW 45
30839: PPUSH
30840: LD_VAR 0 2
30844: PUSH
30845: LD_INT 1
30847: ARRAY
30848: PPUSH
30849: CALL_OW 250
30853: PPUSH
30854: LD_VAR 0 2
30858: PUSH
30859: LD_INT 1
30861: ARRAY
30862: PPUSH
30863: CALL_OW 251
30867: PPUSH
30868: LD_INT 12
30870: PPUSH
30871: LD_INT 1
30873: PPUSH
30874: CALL_OW 50
30878: GO 30892
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30880: CALL_OW 45
30884: PPUSH
30885: LD_INT 1
30887: PPUSH
30888: CALL_OW 51
// end ;
30892: GO 30766
30894: POP
30895: POP
// end ;
30896: PPOPN 2
30898: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30899: LD_EXP 47
30903: IFFALSE 30911
30905: PUSH
30906: LD_EXP 93
30910: AND
30911: IFFALSE 31133
30913: GO 30915
30915: DISABLE
30916: LD_INT 0
30918: PPUSH
30919: PPUSH
30920: PPUSH
30921: PPUSH
30922: PPUSH
30923: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30924: LD_ADDR_VAR 0 6
30928: PUSH
30929: LD_INT 22
30931: PUSH
30932: LD_OWVAR 2
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: LD_INT 21
30943: PUSH
30944: LD_INT 1
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: PUSH
30951: LD_INT 3
30953: PUSH
30954: LD_INT 23
30956: PUSH
30957: LD_INT 0
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: LIST
30972: PPUSH
30973: CALL_OW 69
30977: ST_TO_ADDR
// if not tmp then
30978: LD_VAR 0 6
30982: NOT
30983: IFFALSE 30987
// exit ;
30985: GO 31133
// s1 := rand ( 1 , 4 ) ;
30987: LD_ADDR_VAR 0 2
30991: PUSH
30992: LD_INT 1
30994: PPUSH
30995: LD_INT 4
30997: PPUSH
30998: CALL_OW 12
31002: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31003: LD_ADDR_VAR 0 4
31007: PUSH
31008: LD_VAR 0 6
31012: PUSH
31013: LD_INT 1
31015: ARRAY
31016: PPUSH
31017: LD_VAR 0 2
31021: PPUSH
31022: CALL_OW 259
31026: ST_TO_ADDR
// if s1 = 1 then
31027: LD_VAR 0 2
31031: PUSH
31032: LD_INT 1
31034: EQUAL
31035: IFFALSE 31055
// s2 := rand ( 2 , 4 ) else
31037: LD_ADDR_VAR 0 3
31041: PUSH
31042: LD_INT 2
31044: PPUSH
31045: LD_INT 4
31047: PPUSH
31048: CALL_OW 12
31052: ST_TO_ADDR
31053: GO 31063
// s2 := 1 ;
31055: LD_ADDR_VAR 0 3
31059: PUSH
31060: LD_INT 1
31062: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31063: LD_ADDR_VAR 0 5
31067: PUSH
31068: LD_VAR 0 6
31072: PUSH
31073: LD_INT 1
31075: ARRAY
31076: PPUSH
31077: LD_VAR 0 3
31081: PPUSH
31082: CALL_OW 259
31086: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31087: LD_VAR 0 6
31091: PUSH
31092: LD_INT 1
31094: ARRAY
31095: PPUSH
31096: LD_VAR 0 2
31100: PPUSH
31101: LD_VAR 0 5
31105: PPUSH
31106: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31110: LD_VAR 0 6
31114: PUSH
31115: LD_INT 1
31117: ARRAY
31118: PPUSH
31119: LD_VAR 0 3
31123: PPUSH
31124: LD_VAR 0 4
31128: PPUSH
31129: CALL_OW 237
// end ;
31133: PPOPN 6
31135: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31136: LD_EXP 47
31140: IFFALSE 31148
31142: PUSH
31143: LD_EXP 94
31147: AND
31148: IFFALSE 31227
31150: GO 31152
31152: DISABLE
31153: LD_INT 0
31155: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31156: LD_ADDR_VAR 0 1
31160: PUSH
31161: LD_INT 22
31163: PUSH
31164: LD_OWVAR 2
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 30
31175: PUSH
31176: LD_INT 3
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PPUSH
31187: CALL_OW 69
31191: ST_TO_ADDR
// if not tmp then
31192: LD_VAR 0 1
31196: NOT
31197: IFFALSE 31201
// exit ;
31199: GO 31227
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31201: LD_VAR 0 1
31205: PUSH
31206: LD_INT 1
31208: PPUSH
31209: LD_VAR 0 1
31213: PPUSH
31214: CALL_OW 12
31218: ARRAY
31219: PPUSH
31220: LD_INT 1
31222: PPUSH
31223: CALL_OW 234
// end ;
31227: PPOPN 1
31229: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31230: LD_EXP 47
31234: IFFALSE 31242
31236: PUSH
31237: LD_EXP 95
31241: AND
31242: IFFALSE 31354
31244: GO 31246
31246: DISABLE
31247: LD_INT 0
31249: PPUSH
31250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31251: LD_ADDR_VAR 0 2
31255: PUSH
31256: LD_INT 22
31258: PUSH
31259: LD_OWVAR 2
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 2
31270: PUSH
31271: LD_INT 30
31273: PUSH
31274: LD_INT 27
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: LD_INT 30
31283: PUSH
31284: LD_INT 26
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 30
31293: PUSH
31294: LD_INT 28
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PPUSH
31311: CALL_OW 69
31315: ST_TO_ADDR
// if not tmp then
31316: LD_VAR 0 2
31320: NOT
31321: IFFALSE 31325
// exit ;
31323: GO 31354
// for i in tmp do
31325: LD_ADDR_VAR 0 1
31329: PUSH
31330: LD_VAR 0 2
31334: PUSH
31335: FOR_IN
31336: IFFALSE 31352
// SetLives ( i , 1 ) ;
31338: LD_VAR 0 1
31342: PPUSH
31343: LD_INT 1
31345: PPUSH
31346: CALL_OW 234
31350: GO 31335
31352: POP
31353: POP
// end ;
31354: PPOPN 2
31356: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31357: LD_EXP 47
31361: IFFALSE 31369
31363: PUSH
31364: LD_EXP 96
31368: AND
31369: IFFALSE 31656
31371: GO 31373
31373: DISABLE
31374: LD_INT 0
31376: PPUSH
31377: PPUSH
31378: PPUSH
// begin i := rand ( 1 , 7 ) ;
31379: LD_ADDR_VAR 0 1
31383: PUSH
31384: LD_INT 1
31386: PPUSH
31387: LD_INT 7
31389: PPUSH
31390: CALL_OW 12
31394: ST_TO_ADDR
// case i of 1 :
31395: LD_VAR 0 1
31399: PUSH
31400: LD_INT 1
31402: DOUBLE
31403: EQUAL
31404: IFTRUE 31408
31406: GO 31418
31408: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31409: LD_STRING earthquake(getX(game), 0, 32)
31411: PPUSH
31412: CALL_OW 559
31416: GO 31656
31418: LD_INT 2
31420: DOUBLE
31421: EQUAL
31422: IFTRUE 31426
31424: GO 31440
31426: POP
// begin ToLua ( displayStucuk(); ) ;
31427: LD_STRING displayStucuk();
31429: PPUSH
31430: CALL_OW 559
// ResetFog ;
31434: CALL_OW 335
// end ; 3 :
31438: GO 31656
31440: LD_INT 3
31442: DOUBLE
31443: EQUAL
31444: IFTRUE 31448
31446: GO 31552
31448: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31449: LD_ADDR_VAR 0 2
31453: PUSH
31454: LD_INT 22
31456: PUSH
31457: LD_OWVAR 2
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: LD_INT 25
31468: PUSH
31469: LD_INT 1
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: PPUSH
31480: CALL_OW 69
31484: ST_TO_ADDR
// if not tmp then
31485: LD_VAR 0 2
31489: NOT
31490: IFFALSE 31494
// exit ;
31492: GO 31656
// un := tmp [ rand ( 1 , tmp ) ] ;
31494: LD_ADDR_VAR 0 3
31498: PUSH
31499: LD_VAR 0 2
31503: PUSH
31504: LD_INT 1
31506: PPUSH
31507: LD_VAR 0 2
31511: PPUSH
31512: CALL_OW 12
31516: ARRAY
31517: ST_TO_ADDR
// if Crawls ( un ) then
31518: LD_VAR 0 3
31522: PPUSH
31523: CALL_OW 318
31527: IFFALSE 31538
// ComWalk ( un ) ;
31529: LD_VAR 0 3
31533: PPUSH
31534: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31538: LD_VAR 0 3
31542: PPUSH
31543: LD_INT 8
31545: PPUSH
31546: CALL_OW 336
// end ; 4 :
31550: GO 31656
31552: LD_INT 4
31554: DOUBLE
31555: EQUAL
31556: IFTRUE 31560
31558: GO 31634
31560: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31561: LD_ADDR_VAR 0 2
31565: PUSH
31566: LD_INT 22
31568: PUSH
31569: LD_OWVAR 2
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 30
31580: PUSH
31581: LD_INT 29
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PPUSH
31592: CALL_OW 69
31596: ST_TO_ADDR
// if not tmp then
31597: LD_VAR 0 2
31601: NOT
31602: IFFALSE 31606
// exit ;
31604: GO 31656
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31606: LD_VAR 0 2
31610: PUSH
31611: LD_INT 1
31613: ARRAY
31614: PPUSH
31615: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31619: LD_VAR 0 2
31623: PUSH
31624: LD_INT 1
31626: ARRAY
31627: PPUSH
31628: CALL_OW 65
// end ; 5 .. 7 :
31632: GO 31656
31634: LD_INT 5
31636: DOUBLE
31637: GREATEREQUAL
31638: IFFALSE 31646
31640: LD_INT 7
31642: DOUBLE
31643: LESSEQUAL
31644: IFTRUE 31648
31646: GO 31655
31648: POP
// StreamSibBomb ; end ;
31649: CALL 27837 0 0
31653: GO 31656
31655: POP
// end ;
31656: PPOPN 3
31658: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31659: LD_EXP 47
31663: IFFALSE 31671
31665: PUSH
31666: LD_EXP 97
31670: AND
31671: IFFALSE 31827
31673: GO 31675
31675: DISABLE
31676: LD_INT 0
31678: PPUSH
31679: PPUSH
31680: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31681: LD_ADDR_VAR 0 2
31685: PUSH
31686: LD_INT 81
31688: PUSH
31689: LD_OWVAR 2
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 2
31700: PUSH
31701: LD_INT 21
31703: PUSH
31704: LD_INT 1
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 21
31713: PUSH
31714: LD_INT 2
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: LIST
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PPUSH
31730: CALL_OW 69
31734: ST_TO_ADDR
// if not tmp then
31735: LD_VAR 0 2
31739: NOT
31740: IFFALSE 31744
// exit ;
31742: GO 31827
// p := 0 ;
31744: LD_ADDR_VAR 0 3
31748: PUSH
31749: LD_INT 0
31751: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31752: LD_INT 35
31754: PPUSH
31755: CALL_OW 67
// p := p + 1 ;
31759: LD_ADDR_VAR 0 3
31763: PUSH
31764: LD_VAR 0 3
31768: PUSH
31769: LD_INT 1
31771: PLUS
31772: ST_TO_ADDR
// for i in tmp do
31773: LD_ADDR_VAR 0 1
31777: PUSH
31778: LD_VAR 0 2
31782: PUSH
31783: FOR_IN
31784: IFFALSE 31815
// if GetLives ( i ) < 1000 then
31786: LD_VAR 0 1
31790: PPUSH
31791: CALL_OW 256
31795: PUSH
31796: LD_INT 1000
31798: LESS
31799: IFFALSE 31813
// SetLives ( i , 1000 ) ;
31801: LD_VAR 0 1
31805: PPUSH
31806: LD_INT 1000
31808: PPUSH
31809: CALL_OW 234
31813: GO 31783
31815: POP
31816: POP
// until p > 20 ;
31817: LD_VAR 0 3
31821: PUSH
31822: LD_INT 20
31824: GREATER
31825: IFFALSE 31752
// end ;
31827: PPOPN 3
31829: END
// every 0 0$1 trigger StreamModeActive and sTime do
31830: LD_EXP 47
31834: IFFALSE 31842
31836: PUSH
31837: LD_EXP 98
31841: AND
31842: IFFALSE 31877
31844: GO 31846
31846: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31847: LD_INT 28
31849: PPUSH
31850: LD_OWVAR 2
31854: PPUSH
31855: LD_INT 2
31857: PPUSH
31858: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31862: LD_INT 30
31864: PPUSH
31865: LD_OWVAR 2
31869: PPUSH
31870: LD_INT 2
31872: PPUSH
31873: CALL_OW 322
// end ;
31877: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31878: LD_EXP 47
31882: IFFALSE 31890
31884: PUSH
31885: LD_EXP 99
31889: AND
31890: IFFALSE 32011
31892: GO 31894
31894: DISABLE
31895: LD_INT 0
31897: PPUSH
31898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31899: LD_ADDR_VAR 0 2
31903: PUSH
31904: LD_INT 22
31906: PUSH
31907: LD_OWVAR 2
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 21
31918: PUSH
31919: LD_INT 1
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: LD_INT 3
31928: PUSH
31929: LD_INT 23
31931: PUSH
31932: LD_INT 0
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: LIST
31947: PPUSH
31948: CALL_OW 69
31952: ST_TO_ADDR
// if not tmp then
31953: LD_VAR 0 2
31957: NOT
31958: IFFALSE 31962
// exit ;
31960: GO 32011
// for i in tmp do
31962: LD_ADDR_VAR 0 1
31966: PUSH
31967: LD_VAR 0 2
31971: PUSH
31972: FOR_IN
31973: IFFALSE 32009
// begin if Crawls ( i ) then
31975: LD_VAR 0 1
31979: PPUSH
31980: CALL_OW 318
31984: IFFALSE 31995
// ComWalk ( i ) ;
31986: LD_VAR 0 1
31990: PPUSH
31991: CALL_OW 138
// SetClass ( i , 2 ) ;
31995: LD_VAR 0 1
31999: PPUSH
32000: LD_INT 2
32002: PPUSH
32003: CALL_OW 336
// end ;
32007: GO 31972
32009: POP
32010: POP
// end ;
32011: PPOPN 2
32013: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32014: LD_EXP 47
32018: IFFALSE 32026
32020: PUSH
32021: LD_EXP 100
32025: AND
32026: IFFALSE 32316
32028: GO 32030
32030: DISABLE
32031: LD_INT 0
32033: PPUSH
32034: PPUSH
32035: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32036: LD_OWVAR 2
32040: PPUSH
32041: LD_INT 9
32043: PPUSH
32044: LD_INT 1
32046: PPUSH
32047: LD_INT 1
32049: PPUSH
32050: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32054: LD_INT 9
32056: PPUSH
32057: LD_OWVAR 2
32061: PPUSH
32062: CALL_OW 343
// uc_side := 9 ;
32066: LD_ADDR_OWVAR 20
32070: PUSH
32071: LD_INT 9
32073: ST_TO_ADDR
// uc_nation := 2 ;
32074: LD_ADDR_OWVAR 21
32078: PUSH
32079: LD_INT 2
32081: ST_TO_ADDR
// hc_name := Dark Warrior ;
32082: LD_ADDR_OWVAR 26
32086: PUSH
32087: LD_STRING Dark Warrior
32089: ST_TO_ADDR
// hc_gallery :=  ;
32090: LD_ADDR_OWVAR 33
32094: PUSH
32095: LD_STRING 
32097: ST_TO_ADDR
// hc_noskilllimit := true ;
32098: LD_ADDR_OWVAR 76
32102: PUSH
32103: LD_INT 1
32105: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32106: LD_ADDR_OWVAR 31
32110: PUSH
32111: LD_INT 30
32113: PUSH
32114: LD_INT 30
32116: PUSH
32117: LD_INT 30
32119: PUSH
32120: LD_INT 30
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: ST_TO_ADDR
// un := CreateHuman ;
32129: LD_ADDR_VAR 0 3
32133: PUSH
32134: CALL_OW 44
32138: ST_TO_ADDR
// hc_noskilllimit := false ;
32139: LD_ADDR_OWVAR 76
32143: PUSH
32144: LD_INT 0
32146: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32147: LD_VAR 0 3
32151: PPUSH
32152: LD_INT 1
32154: PPUSH
32155: CALL_OW 51
// ToLua ( playRanger() ) ;
32159: LD_STRING playRanger()
32161: PPUSH
32162: CALL_OW 559
// p := 0 ;
32166: LD_ADDR_VAR 0 2
32170: PUSH
32171: LD_INT 0
32173: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32174: LD_INT 35
32176: PPUSH
32177: CALL_OW 67
// p := p + 1 ;
32181: LD_ADDR_VAR 0 2
32185: PUSH
32186: LD_VAR 0 2
32190: PUSH
32191: LD_INT 1
32193: PLUS
32194: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32195: LD_VAR 0 3
32199: PPUSH
32200: CALL_OW 256
32204: PUSH
32205: LD_INT 1000
32207: LESS
32208: IFFALSE 32222
// SetLives ( un , 1000 ) ;
32210: LD_VAR 0 3
32214: PPUSH
32215: LD_INT 1000
32217: PPUSH
32218: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32222: LD_VAR 0 3
32226: PPUSH
32227: LD_INT 81
32229: PUSH
32230: LD_OWVAR 2
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 91
32241: PUSH
32242: LD_VAR 0 3
32246: PUSH
32247: LD_INT 30
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: LIST
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PPUSH
32259: CALL_OW 69
32263: PPUSH
32264: LD_VAR 0 3
32268: PPUSH
32269: CALL_OW 74
32273: PPUSH
32274: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32278: LD_VAR 0 2
32282: PUSH
32283: LD_INT 80
32285: GREATER
32286: IFTRUE 32299
32288: PUSH
32289: LD_VAR 0 3
32293: PPUSH
32294: CALL_OW 301
32298: OR
32299: IFFALSE 32174
// if un then
32301: LD_VAR 0 3
32305: IFFALSE 32316
// RemoveUnit ( un ) ;
32307: LD_VAR 0 3
32311: PPUSH
32312: CALL_OW 64
// end ;
32316: PPOPN 3
32318: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32319: LD_EXP 101
32323: IFFALSE 32439
32325: GO 32327
32327: DISABLE
32328: LD_INT 0
32330: PPUSH
32331: PPUSH
32332: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32333: LD_ADDR_VAR 0 2
32337: PUSH
32338: LD_INT 81
32340: PUSH
32341: LD_OWVAR 2
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PUSH
32350: LD_INT 21
32352: PUSH
32353: LD_INT 1
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PPUSH
32364: CALL_OW 69
32368: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32369: LD_STRING playComputer()
32371: PPUSH
32372: CALL_OW 559
// if not tmp then
32376: LD_VAR 0 2
32380: NOT
32381: IFFALSE 32385
// exit ;
32383: GO 32439
// for i in tmp do
32385: LD_ADDR_VAR 0 1
32389: PUSH
32390: LD_VAR 0 2
32394: PUSH
32395: FOR_IN
32396: IFFALSE 32437
// for j := 1 to 4 do
32398: LD_ADDR_VAR 0 3
32402: PUSH
32403: DOUBLE
32404: LD_INT 1
32406: DEC
32407: ST_TO_ADDR
32408: LD_INT 4
32410: PUSH
32411: FOR_TO
32412: IFFALSE 32433
// SetSkill ( i , j , 10 ) ;
32414: LD_VAR 0 1
32418: PPUSH
32419: LD_VAR 0 3
32423: PPUSH
32424: LD_INT 10
32426: PPUSH
32427: CALL_OW 237
32431: GO 32411
32433: POP
32434: POP
32435: GO 32395
32437: POP
32438: POP
// end ;
32439: PPOPN 3
32441: END
// every 0 0$1 trigger s30 do var i , tmp ;
32442: LD_EXP 102
32446: IFFALSE 32515
32448: GO 32450
32450: DISABLE
32451: LD_INT 0
32453: PPUSH
32454: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32455: LD_ADDR_VAR 0 2
32459: PUSH
32460: LD_INT 22
32462: PUSH
32463: LD_OWVAR 2
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PPUSH
32472: CALL_OW 69
32476: ST_TO_ADDR
// if not tmp then
32477: LD_VAR 0 2
32481: NOT
32482: IFFALSE 32486
// exit ;
32484: GO 32515
// for i in tmp do
32486: LD_ADDR_VAR 0 1
32490: PUSH
32491: LD_VAR 0 2
32495: PUSH
32496: FOR_IN
32497: IFFALSE 32513
// SetLives ( i , 300 ) ;
32499: LD_VAR 0 1
32503: PPUSH
32504: LD_INT 300
32506: PPUSH
32507: CALL_OW 234
32511: GO 32496
32513: POP
32514: POP
// end ;
32515: PPOPN 2
32517: END
// every 0 0$1 trigger s60 do var i , tmp ;
32518: LD_EXP 103
32522: IFFALSE 32591
32524: GO 32526
32526: DISABLE
32527: LD_INT 0
32529: PPUSH
32530: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32531: LD_ADDR_VAR 0 2
32535: PUSH
32536: LD_INT 22
32538: PUSH
32539: LD_OWVAR 2
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: PPUSH
32548: CALL_OW 69
32552: ST_TO_ADDR
// if not tmp then
32553: LD_VAR 0 2
32557: NOT
32558: IFFALSE 32562
// exit ;
32560: GO 32591
// for i in tmp do
32562: LD_ADDR_VAR 0 1
32566: PUSH
32567: LD_VAR 0 2
32571: PUSH
32572: FOR_IN
32573: IFFALSE 32589
// SetLives ( i , 600 ) ;
32575: LD_VAR 0 1
32579: PPUSH
32580: LD_INT 600
32582: PPUSH
32583: CALL_OW 234
32587: GO 32572
32589: POP
32590: POP
// end ;
32591: PPOPN 2
32593: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32594: LD_INT 0
32596: PPUSH
// case cmd of 301 :
32597: LD_VAR 0 1
32601: PUSH
32602: LD_INT 301
32604: DOUBLE
32605: EQUAL
32606: IFTRUE 32610
32608: GO 32642
32610: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32611: LD_VAR 0 6
32615: PPUSH
32616: LD_VAR 0 7
32620: PPUSH
32621: LD_VAR 0 8
32625: PPUSH
32626: LD_VAR 0 4
32630: PPUSH
32631: LD_VAR 0 5
32635: PPUSH
32636: CALL 33855 0 5
32640: GO 32763
32642: LD_INT 302
32644: DOUBLE
32645: EQUAL
32646: IFTRUE 32650
32648: GO 32687
32650: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32651: LD_VAR 0 6
32655: PPUSH
32656: LD_VAR 0 7
32660: PPUSH
32661: LD_VAR 0 8
32665: PPUSH
32666: LD_VAR 0 9
32670: PPUSH
32671: LD_VAR 0 4
32675: PPUSH
32676: LD_VAR 0 5
32680: PPUSH
32681: CALL 33946 0 6
32685: GO 32763
32687: LD_INT 303
32689: DOUBLE
32690: EQUAL
32691: IFTRUE 32695
32693: GO 32732
32695: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32696: LD_VAR 0 6
32700: PPUSH
32701: LD_VAR 0 7
32705: PPUSH
32706: LD_VAR 0 8
32710: PPUSH
32711: LD_VAR 0 9
32715: PPUSH
32716: LD_VAR 0 4
32720: PPUSH
32721: LD_VAR 0 5
32725: PPUSH
32726: CALL 32768 0 6
32730: GO 32763
32732: LD_INT 304
32734: DOUBLE
32735: EQUAL
32736: IFTRUE 32740
32738: GO 32762
32740: POP
// hHackTeleport ( unit , x , y ) ; end ;
32741: LD_VAR 0 2
32745: PPUSH
32746: LD_VAR 0 4
32750: PPUSH
32751: LD_VAR 0 5
32755: PPUSH
32756: CALL 34539 0 3
32760: GO 32763
32762: POP
// end ;
32763: LD_VAR 0 12
32767: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32768: LD_INT 0
32770: PPUSH
32771: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32772: LD_VAR 0 1
32776: PUSH
32777: LD_INT 1
32779: LESS
32780: IFTRUE 32792
32782: PUSH
32783: LD_VAR 0 1
32787: PUSH
32788: LD_INT 3
32790: GREATER
32791: OR
32792: IFTRUE 32810
32794: PUSH
32795: LD_VAR 0 5
32799: PPUSH
32800: LD_VAR 0 6
32804: PPUSH
32805: CALL_OW 428
32809: OR
32810: IFFALSE 32814
// exit ;
32812: GO 33542
// uc_side := your_side ;
32814: LD_ADDR_OWVAR 20
32818: PUSH
32819: LD_OWVAR 2
32823: ST_TO_ADDR
// uc_nation := nation ;
32824: LD_ADDR_OWVAR 21
32828: PUSH
32829: LD_VAR 0 1
32833: ST_TO_ADDR
// bc_level = 1 ;
32834: LD_ADDR_OWVAR 43
32838: PUSH
32839: LD_INT 1
32841: ST_TO_ADDR
// case btype of 1 :
32842: LD_VAR 0 2
32846: PUSH
32847: LD_INT 1
32849: DOUBLE
32850: EQUAL
32851: IFTRUE 32855
32853: GO 32866
32855: POP
// bc_type := b_depot ; 2 :
32856: LD_ADDR_OWVAR 42
32860: PUSH
32861: LD_INT 0
32863: ST_TO_ADDR
32864: GO 33486
32866: LD_INT 2
32868: DOUBLE
32869: EQUAL
32870: IFTRUE 32874
32872: GO 32885
32874: POP
// bc_type := b_warehouse ; 3 :
32875: LD_ADDR_OWVAR 42
32879: PUSH
32880: LD_INT 1
32882: ST_TO_ADDR
32883: GO 33486
32885: LD_INT 3
32887: DOUBLE
32888: EQUAL
32889: IFTRUE 32893
32891: GO 32904
32893: POP
// bc_type := b_lab ; 4 .. 9 :
32894: LD_ADDR_OWVAR 42
32898: PUSH
32899: LD_INT 6
32901: ST_TO_ADDR
32902: GO 33486
32904: LD_INT 4
32906: DOUBLE
32907: GREATEREQUAL
32908: IFFALSE 32916
32910: LD_INT 9
32912: DOUBLE
32913: LESSEQUAL
32914: IFTRUE 32918
32916: GO 32978
32918: POP
// begin bc_type := b_lab_half ;
32919: LD_ADDR_OWVAR 42
32923: PUSH
32924: LD_INT 7
32926: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32927: LD_ADDR_OWVAR 44
32931: PUSH
32932: LD_INT 10
32934: PUSH
32935: LD_INT 11
32937: PUSH
32938: LD_INT 12
32940: PUSH
32941: LD_INT 15
32943: PUSH
32944: LD_INT 14
32946: PUSH
32947: LD_INT 13
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: PUSH
32958: LD_VAR 0 2
32962: PUSH
32963: LD_INT 3
32965: MINUS
32966: ARRAY
32967: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32968: LD_ADDR_OWVAR 45
32972: PUSH
32973: LD_INT 9
32975: ST_TO_ADDR
// end ; 10 .. 13 :
32976: GO 33486
32978: LD_INT 10
32980: DOUBLE
32981: GREATEREQUAL
32982: IFFALSE 32990
32984: LD_INT 13
32986: DOUBLE
32987: LESSEQUAL
32988: IFTRUE 32992
32990: GO 33069
32992: POP
// begin bc_type := b_lab_full ;
32993: LD_ADDR_OWVAR 42
32997: PUSH
32998: LD_INT 8
33000: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33001: LD_ADDR_OWVAR 44
33005: PUSH
33006: LD_INT 10
33008: PUSH
33009: LD_INT 12
33011: PUSH
33012: LD_INT 14
33014: PUSH
33015: LD_INT 13
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: LIST
33022: LIST
33023: PUSH
33024: LD_VAR 0 2
33028: PUSH
33029: LD_INT 9
33031: MINUS
33032: ARRAY
33033: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33034: LD_ADDR_OWVAR 45
33038: PUSH
33039: LD_INT 11
33041: PUSH
33042: LD_INT 15
33044: PUSH
33045: LD_INT 12
33047: PUSH
33048: LD_INT 15
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: PUSH
33057: LD_VAR 0 2
33061: PUSH
33062: LD_INT 9
33064: MINUS
33065: ARRAY
33066: ST_TO_ADDR
// end ; 14 :
33067: GO 33486
33069: LD_INT 14
33071: DOUBLE
33072: EQUAL
33073: IFTRUE 33077
33075: GO 33088
33077: POP
// bc_type := b_workshop ; 15 :
33078: LD_ADDR_OWVAR 42
33082: PUSH
33083: LD_INT 2
33085: ST_TO_ADDR
33086: GO 33486
33088: LD_INT 15
33090: DOUBLE
33091: EQUAL
33092: IFTRUE 33096
33094: GO 33107
33096: POP
// bc_type := b_factory ; 16 :
33097: LD_ADDR_OWVAR 42
33101: PUSH
33102: LD_INT 3
33104: ST_TO_ADDR
33105: GO 33486
33107: LD_INT 16
33109: DOUBLE
33110: EQUAL
33111: IFTRUE 33115
33113: GO 33126
33115: POP
// bc_type := b_ext_gun ; 17 :
33116: LD_ADDR_OWVAR 42
33120: PUSH
33121: LD_INT 17
33123: ST_TO_ADDR
33124: GO 33486
33126: LD_INT 17
33128: DOUBLE
33129: EQUAL
33130: IFTRUE 33134
33132: GO 33162
33134: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33135: LD_ADDR_OWVAR 42
33139: PUSH
33140: LD_INT 19
33142: PUSH
33143: LD_INT 23
33145: PUSH
33146: LD_INT 19
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: LIST
33153: PUSH
33154: LD_VAR 0 1
33158: ARRAY
33159: ST_TO_ADDR
33160: GO 33486
33162: LD_INT 18
33164: DOUBLE
33165: EQUAL
33166: IFTRUE 33170
33168: GO 33181
33170: POP
// bc_type := b_ext_radar ; 19 :
33171: LD_ADDR_OWVAR 42
33175: PUSH
33176: LD_INT 20
33178: ST_TO_ADDR
33179: GO 33486
33181: LD_INT 19
33183: DOUBLE
33184: EQUAL
33185: IFTRUE 33189
33187: GO 33200
33189: POP
// bc_type := b_ext_radio ; 20 :
33190: LD_ADDR_OWVAR 42
33194: PUSH
33195: LD_INT 22
33197: ST_TO_ADDR
33198: GO 33486
33200: LD_INT 20
33202: DOUBLE
33203: EQUAL
33204: IFTRUE 33208
33206: GO 33219
33208: POP
// bc_type := b_ext_siberium ; 21 :
33209: LD_ADDR_OWVAR 42
33213: PUSH
33214: LD_INT 21
33216: ST_TO_ADDR
33217: GO 33486
33219: LD_INT 21
33221: DOUBLE
33222: EQUAL
33223: IFTRUE 33227
33225: GO 33238
33227: POP
// bc_type := b_ext_computer ; 22 :
33228: LD_ADDR_OWVAR 42
33232: PUSH
33233: LD_INT 24
33235: ST_TO_ADDR
33236: GO 33486
33238: LD_INT 22
33240: DOUBLE
33241: EQUAL
33242: IFTRUE 33246
33244: GO 33257
33246: POP
// bc_type := b_ext_track ; 23 :
33247: LD_ADDR_OWVAR 42
33251: PUSH
33252: LD_INT 16
33254: ST_TO_ADDR
33255: GO 33486
33257: LD_INT 23
33259: DOUBLE
33260: EQUAL
33261: IFTRUE 33265
33263: GO 33276
33265: POP
// bc_type := b_ext_laser ; 24 :
33266: LD_ADDR_OWVAR 42
33270: PUSH
33271: LD_INT 25
33273: ST_TO_ADDR
33274: GO 33486
33276: LD_INT 24
33278: DOUBLE
33279: EQUAL
33280: IFTRUE 33284
33282: GO 33295
33284: POP
// bc_type := b_control_tower ; 25 :
33285: LD_ADDR_OWVAR 42
33289: PUSH
33290: LD_INT 36
33292: ST_TO_ADDR
33293: GO 33486
33295: LD_INT 25
33297: DOUBLE
33298: EQUAL
33299: IFTRUE 33303
33301: GO 33314
33303: POP
// bc_type := b_breastwork ; 26 :
33304: LD_ADDR_OWVAR 42
33308: PUSH
33309: LD_INT 31
33311: ST_TO_ADDR
33312: GO 33486
33314: LD_INT 26
33316: DOUBLE
33317: EQUAL
33318: IFTRUE 33322
33320: GO 33333
33322: POP
// bc_type := b_bunker ; 27 :
33323: LD_ADDR_OWVAR 42
33327: PUSH
33328: LD_INT 32
33330: ST_TO_ADDR
33331: GO 33486
33333: LD_INT 27
33335: DOUBLE
33336: EQUAL
33337: IFTRUE 33341
33339: GO 33352
33341: POP
// bc_type := b_turret ; 28 :
33342: LD_ADDR_OWVAR 42
33346: PUSH
33347: LD_INT 33
33349: ST_TO_ADDR
33350: GO 33486
33352: LD_INT 28
33354: DOUBLE
33355: EQUAL
33356: IFTRUE 33360
33358: GO 33371
33360: POP
// bc_type := b_armoury ; 29 :
33361: LD_ADDR_OWVAR 42
33365: PUSH
33366: LD_INT 4
33368: ST_TO_ADDR
33369: GO 33486
33371: LD_INT 29
33373: DOUBLE
33374: EQUAL
33375: IFTRUE 33379
33377: GO 33390
33379: POP
// bc_type := b_barracks ; 30 :
33380: LD_ADDR_OWVAR 42
33384: PUSH
33385: LD_INT 5
33387: ST_TO_ADDR
33388: GO 33486
33390: LD_INT 30
33392: DOUBLE
33393: EQUAL
33394: IFTRUE 33398
33396: GO 33409
33398: POP
// bc_type := b_solar_power ; 31 :
33399: LD_ADDR_OWVAR 42
33403: PUSH
33404: LD_INT 27
33406: ST_TO_ADDR
33407: GO 33486
33409: LD_INT 31
33411: DOUBLE
33412: EQUAL
33413: IFTRUE 33417
33415: GO 33428
33417: POP
// bc_type := b_oil_power ; 32 :
33418: LD_ADDR_OWVAR 42
33422: PUSH
33423: LD_INT 26
33425: ST_TO_ADDR
33426: GO 33486
33428: LD_INT 32
33430: DOUBLE
33431: EQUAL
33432: IFTRUE 33436
33434: GO 33447
33436: POP
// bc_type := b_siberite_power ; 33 :
33437: LD_ADDR_OWVAR 42
33441: PUSH
33442: LD_INT 28
33444: ST_TO_ADDR
33445: GO 33486
33447: LD_INT 33
33449: DOUBLE
33450: EQUAL
33451: IFTRUE 33455
33453: GO 33466
33455: POP
// bc_type := b_oil_mine ; 34 :
33456: LD_ADDR_OWVAR 42
33460: PUSH
33461: LD_INT 29
33463: ST_TO_ADDR
33464: GO 33486
33466: LD_INT 34
33468: DOUBLE
33469: EQUAL
33470: IFTRUE 33474
33472: GO 33485
33474: POP
// bc_type := b_siberite_mine ; end ;
33475: LD_ADDR_OWVAR 42
33479: PUSH
33480: LD_INT 30
33482: ST_TO_ADDR
33483: GO 33486
33485: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33486: LD_ADDR_VAR 0 8
33490: PUSH
33491: LD_VAR 0 5
33495: PPUSH
33496: LD_VAR 0 6
33500: PPUSH
33501: LD_VAR 0 3
33505: PPUSH
33506: CALL_OW 47
33510: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33511: LD_OWVAR 42
33515: PUSH
33516: LD_INT 32
33518: PUSH
33519: LD_INT 33
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: IN
33526: IFFALSE 33542
// PlaceWeaponTurret ( b , weapon ) ;
33528: LD_VAR 0 8
33532: PPUSH
33533: LD_VAR 0 4
33537: PPUSH
33538: CALL_OW 431
// end ;
33542: LD_VAR 0 7
33546: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33547: LD_INT 0
33549: PPUSH
33550: PPUSH
33551: PPUSH
33552: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33553: LD_ADDR_VAR 0 4
33557: PUSH
33558: LD_INT 22
33560: PUSH
33561: LD_OWVAR 2
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 2
33572: PUSH
33573: LD_INT 30
33575: PUSH
33576: LD_INT 0
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PUSH
33583: LD_INT 30
33585: PUSH
33586: LD_INT 1
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: LIST
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PPUSH
33602: CALL_OW 69
33606: ST_TO_ADDR
// if not tmp then
33607: LD_VAR 0 4
33611: NOT
33612: IFFALSE 33616
// exit ;
33614: GO 33675
// for i in tmp do
33616: LD_ADDR_VAR 0 2
33620: PUSH
33621: LD_VAR 0 4
33625: PUSH
33626: FOR_IN
33627: IFFALSE 33673
// for j = 1 to 3 do
33629: LD_ADDR_VAR 0 3
33633: PUSH
33634: DOUBLE
33635: LD_INT 1
33637: DEC
33638: ST_TO_ADDR
33639: LD_INT 3
33641: PUSH
33642: FOR_TO
33643: IFFALSE 33669
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33645: LD_VAR 0 2
33649: PPUSH
33650: CALL_OW 274
33654: PPUSH
33655: LD_VAR 0 3
33659: PPUSH
33660: LD_INT 99999
33662: PPUSH
33663: CALL_OW 277
33667: GO 33642
33669: POP
33670: POP
33671: GO 33626
33673: POP
33674: POP
// end ;
33675: LD_VAR 0 1
33679: RET
// export function hHackSetLevel10 ; var i , j ; begin
33680: LD_INT 0
33682: PPUSH
33683: PPUSH
33684: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33685: LD_ADDR_VAR 0 2
33689: PUSH
33690: LD_INT 21
33692: PUSH
33693: LD_INT 1
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PPUSH
33700: CALL_OW 69
33704: PUSH
33705: FOR_IN
33706: IFFALSE 33758
// if IsSelected ( i ) then
33708: LD_VAR 0 2
33712: PPUSH
33713: CALL_OW 306
33717: IFFALSE 33756
// begin for j := 1 to 4 do
33719: LD_ADDR_VAR 0 3
33723: PUSH
33724: DOUBLE
33725: LD_INT 1
33727: DEC
33728: ST_TO_ADDR
33729: LD_INT 4
33731: PUSH
33732: FOR_TO
33733: IFFALSE 33754
// SetSkill ( i , j , 10 ) ;
33735: LD_VAR 0 2
33739: PPUSH
33740: LD_VAR 0 3
33744: PPUSH
33745: LD_INT 10
33747: PPUSH
33748: CALL_OW 237
33752: GO 33732
33754: POP
33755: POP
// end ;
33756: GO 33705
33758: POP
33759: POP
// end ;
33760: LD_VAR 0 1
33764: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33765: LD_INT 0
33767: PPUSH
33768: PPUSH
33769: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33770: LD_ADDR_VAR 0 2
33774: PUSH
33775: LD_INT 22
33777: PUSH
33778: LD_OWVAR 2
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 21
33789: PUSH
33790: LD_INT 1
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PPUSH
33801: CALL_OW 69
33805: PUSH
33806: FOR_IN
33807: IFFALSE 33848
// begin for j := 1 to 4 do
33809: LD_ADDR_VAR 0 3
33813: PUSH
33814: DOUBLE
33815: LD_INT 1
33817: DEC
33818: ST_TO_ADDR
33819: LD_INT 4
33821: PUSH
33822: FOR_TO
33823: IFFALSE 33844
// SetSkill ( i , j , 10 ) ;
33825: LD_VAR 0 2
33829: PPUSH
33830: LD_VAR 0 3
33834: PPUSH
33835: LD_INT 10
33837: PPUSH
33838: CALL_OW 237
33842: GO 33822
33844: POP
33845: POP
// end ;
33846: GO 33806
33848: POP
33849: POP
// end ;
33850: LD_VAR 0 1
33854: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33855: LD_INT 0
33857: PPUSH
// uc_side := your_side ;
33858: LD_ADDR_OWVAR 20
33862: PUSH
33863: LD_OWVAR 2
33867: ST_TO_ADDR
// uc_nation := nation ;
33868: LD_ADDR_OWVAR 21
33872: PUSH
33873: LD_VAR 0 1
33877: ST_TO_ADDR
// InitHc ;
33878: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33882: LD_INT 0
33884: PPUSH
33885: LD_VAR 0 2
33889: PPUSH
33890: LD_VAR 0 3
33894: PPUSH
33895: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33899: LD_VAR 0 4
33903: PPUSH
33904: LD_VAR 0 5
33908: PPUSH
33909: CALL_OW 428
33913: PUSH
33914: LD_INT 0
33916: EQUAL
33917: IFFALSE 33941
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33919: CALL_OW 44
33923: PPUSH
33924: LD_VAR 0 4
33928: PPUSH
33929: LD_VAR 0 5
33933: PPUSH
33934: LD_INT 1
33936: PPUSH
33937: CALL_OW 48
// end ;
33941: LD_VAR 0 6
33945: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33946: LD_INT 0
33948: PPUSH
33949: PPUSH
// uc_side := your_side ;
33950: LD_ADDR_OWVAR 20
33954: PUSH
33955: LD_OWVAR 2
33959: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33960: LD_VAR 0 1
33964: PUSH
33965: LD_INT 1
33967: PUSH
33968: LD_INT 2
33970: PUSH
33971: LD_INT 3
33973: PUSH
33974: LD_INT 4
33976: PUSH
33977: LD_INT 5
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: IN
33987: IFFALSE 33999
// uc_nation := nation_american else
33989: LD_ADDR_OWVAR 21
33993: PUSH
33994: LD_INT 1
33996: ST_TO_ADDR
33997: GO 34042
// if chassis in [ 11 , 12 , 13 , 14 ] then
33999: LD_VAR 0 1
34003: PUSH
34004: LD_INT 11
34006: PUSH
34007: LD_INT 12
34009: PUSH
34010: LD_INT 13
34012: PUSH
34013: LD_INT 14
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: IN
34022: IFFALSE 34034
// uc_nation := nation_arabian else
34024: LD_ADDR_OWVAR 21
34028: PUSH
34029: LD_INT 2
34031: ST_TO_ADDR
34032: GO 34042
// uc_nation := nation_russian ;
34034: LD_ADDR_OWVAR 21
34038: PUSH
34039: LD_INT 3
34041: ST_TO_ADDR
// vc_chassis := chassis ;
34042: LD_ADDR_OWVAR 37
34046: PUSH
34047: LD_VAR 0 1
34051: ST_TO_ADDR
// vc_engine := engine ;
34052: LD_ADDR_OWVAR 39
34056: PUSH
34057: LD_VAR 0 2
34061: ST_TO_ADDR
// vc_control := control ;
34062: LD_ADDR_OWVAR 38
34066: PUSH
34067: LD_VAR 0 3
34071: ST_TO_ADDR
// vc_weapon := weapon ;
34072: LD_ADDR_OWVAR 40
34076: PUSH
34077: LD_VAR 0 4
34081: ST_TO_ADDR
// un := CreateVehicle ;
34082: LD_ADDR_VAR 0 8
34086: PUSH
34087: CALL_OW 45
34091: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34092: LD_VAR 0 8
34096: PPUSH
34097: LD_INT 0
34099: PPUSH
34100: LD_INT 5
34102: PPUSH
34103: CALL_OW 12
34107: PPUSH
34108: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34112: LD_VAR 0 8
34116: PPUSH
34117: LD_VAR 0 5
34121: PPUSH
34122: LD_VAR 0 6
34126: PPUSH
34127: LD_INT 1
34129: PPUSH
34130: CALL_OW 48
// end ;
34134: LD_VAR 0 7
34138: RET
// export hInvincible ; every 1 do
34139: GO 34141
34141: DISABLE
// hInvincible := [ ] ;
34142: LD_ADDR_EXP 104
34146: PUSH
34147: EMPTY
34148: ST_TO_ADDR
34149: END
// every 10 do var i ;
34150: GO 34152
34152: DISABLE
34153: LD_INT 0
34155: PPUSH
// begin enable ;
34156: ENABLE
// if not hInvincible then
34157: LD_EXP 104
34161: NOT
34162: IFFALSE 34166
// exit ;
34164: GO 34210
// for i in hInvincible do
34166: LD_ADDR_VAR 0 1
34170: PUSH
34171: LD_EXP 104
34175: PUSH
34176: FOR_IN
34177: IFFALSE 34208
// if GetLives ( i ) < 1000 then
34179: LD_VAR 0 1
34183: PPUSH
34184: CALL_OW 256
34188: PUSH
34189: LD_INT 1000
34191: LESS
34192: IFFALSE 34206
// SetLives ( i , 1000 ) ;
34194: LD_VAR 0 1
34198: PPUSH
34199: LD_INT 1000
34201: PPUSH
34202: CALL_OW 234
34206: GO 34176
34208: POP
34209: POP
// end ;
34210: PPOPN 1
34212: END
// export function hHackInvincible ; var i ; begin
34213: LD_INT 0
34215: PPUSH
34216: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34217: LD_ADDR_VAR 0 2
34221: PUSH
34222: LD_INT 2
34224: PUSH
34225: LD_INT 21
34227: PUSH
34228: LD_INT 1
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: LD_INT 21
34237: PUSH
34238: LD_INT 2
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: LIST
34249: PPUSH
34250: CALL_OW 69
34254: PUSH
34255: FOR_IN
34256: IFFALSE 34317
// if IsSelected ( i ) then
34258: LD_VAR 0 2
34262: PPUSH
34263: CALL_OW 306
34267: IFFALSE 34315
// begin if i in hInvincible then
34269: LD_VAR 0 2
34273: PUSH
34274: LD_EXP 104
34278: IN
34279: IFFALSE 34299
// hInvincible := hInvincible diff i else
34281: LD_ADDR_EXP 104
34285: PUSH
34286: LD_EXP 104
34290: PUSH
34291: LD_VAR 0 2
34295: DIFF
34296: ST_TO_ADDR
34297: GO 34315
// hInvincible := hInvincible union i ;
34299: LD_ADDR_EXP 104
34303: PUSH
34304: LD_EXP 104
34308: PUSH
34309: LD_VAR 0 2
34313: UNION
34314: ST_TO_ADDR
// end ;
34315: GO 34255
34317: POP
34318: POP
// end ;
34319: LD_VAR 0 1
34323: RET
// export function hHackInvisible ; var i , j ; begin
34324: LD_INT 0
34326: PPUSH
34327: PPUSH
34328: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34329: LD_ADDR_VAR 0 2
34333: PUSH
34334: LD_INT 21
34336: PUSH
34337: LD_INT 1
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PPUSH
34344: CALL_OW 69
34348: PUSH
34349: FOR_IN
34350: IFFALSE 34374
// if IsSelected ( i ) then
34352: LD_VAR 0 2
34356: PPUSH
34357: CALL_OW 306
34361: IFFALSE 34372
// ComForceInvisible ( i ) ;
34363: LD_VAR 0 2
34367: PPUSH
34368: CALL_OW 496
34372: GO 34349
34374: POP
34375: POP
// end ;
34376: LD_VAR 0 1
34380: RET
// export function hHackChangeYourSide ; begin
34381: LD_INT 0
34383: PPUSH
// if your_side = 8 then
34384: LD_OWVAR 2
34388: PUSH
34389: LD_INT 8
34391: EQUAL
34392: IFFALSE 34404
// your_side := 0 else
34394: LD_ADDR_OWVAR 2
34398: PUSH
34399: LD_INT 0
34401: ST_TO_ADDR
34402: GO 34418
// your_side := your_side + 1 ;
34404: LD_ADDR_OWVAR 2
34408: PUSH
34409: LD_OWVAR 2
34413: PUSH
34414: LD_INT 1
34416: PLUS
34417: ST_TO_ADDR
// end ;
34418: LD_VAR 0 1
34422: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34423: LD_INT 0
34425: PPUSH
34426: PPUSH
34427: PPUSH
// for i in all_units do
34428: LD_ADDR_VAR 0 2
34432: PUSH
34433: LD_OWVAR 3
34437: PUSH
34438: FOR_IN
34439: IFFALSE 34517
// if IsSelected ( i ) then
34441: LD_VAR 0 2
34445: PPUSH
34446: CALL_OW 306
34450: IFFALSE 34515
// begin j := GetSide ( i ) ;
34452: LD_ADDR_VAR 0 3
34456: PUSH
34457: LD_VAR 0 2
34461: PPUSH
34462: CALL_OW 255
34466: ST_TO_ADDR
// if j = 8 then
34467: LD_VAR 0 3
34471: PUSH
34472: LD_INT 8
34474: EQUAL
34475: IFFALSE 34487
// j := 0 else
34477: LD_ADDR_VAR 0 3
34481: PUSH
34482: LD_INT 0
34484: ST_TO_ADDR
34485: GO 34501
// j := j + 1 ;
34487: LD_ADDR_VAR 0 3
34491: PUSH
34492: LD_VAR 0 3
34496: PUSH
34497: LD_INT 1
34499: PLUS
34500: ST_TO_ADDR
// SetSide ( i , j ) ;
34501: LD_VAR 0 2
34505: PPUSH
34506: LD_VAR 0 3
34510: PPUSH
34511: CALL_OW 235
// end ;
34515: GO 34438
34517: POP
34518: POP
// end ;
34519: LD_VAR 0 1
34523: RET
// export function hHackFog ; begin
34524: LD_INT 0
34526: PPUSH
// FogOff ( true ) ;
34527: LD_INT 1
34529: PPUSH
34530: CALL_OW 344
// end ;
34534: LD_VAR 0 1
34538: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34539: LD_INT 0
34541: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34542: LD_VAR 0 1
34546: PPUSH
34547: LD_VAR 0 2
34551: PPUSH
34552: LD_VAR 0 3
34556: PPUSH
34557: LD_INT 1
34559: PPUSH
34560: LD_INT 1
34562: PPUSH
34563: CALL_OW 483
// CenterOnXY ( x , y ) ;
34567: LD_VAR 0 2
34571: PPUSH
34572: LD_VAR 0 3
34576: PPUSH
34577: CALL_OW 84
// end ;
34581: LD_VAR 0 4
34585: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34586: LD_INT 0
34588: PPUSH
34589: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34590: LD_VAR 0 1
34594: NOT
34595: IFTRUE 34614
34597: PUSH
34598: LD_VAR 0 2
34602: PPUSH
34603: LD_VAR 0 3
34607: PPUSH
34608: CALL_OW 488
34612: NOT
34613: OR
34614: IFTRUE 34649
34616: PUSH
34617: LD_VAR 0 1
34621: PPUSH
34622: CALL_OW 266
34626: PUSH
34627: LD_INT 3
34629: NONEQUAL
34630: IFFALSE 34648
34632: PUSH
34633: LD_VAR 0 1
34637: PPUSH
34638: CALL_OW 247
34642: PUSH
34643: LD_INT 1
34645: EQUAL
34646: NOT
34647: AND
34648: OR
34649: IFFALSE 34653
// exit ;
34651: GO 34935
// if GetType ( factory ) = unit_human then
34653: LD_VAR 0 1
34657: PPUSH
34658: CALL_OW 247
34662: PUSH
34663: LD_INT 1
34665: EQUAL
34666: IFFALSE 34683
// factory := IsInUnit ( factory ) ;
34668: LD_ADDR_VAR 0 1
34672: PUSH
34673: LD_VAR 0 1
34677: PPUSH
34678: CALL_OW 310
34682: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34683: LD_VAR 0 1
34687: PPUSH
34688: CALL_OW 266
34692: PUSH
34693: LD_INT 3
34695: NONEQUAL
34696: IFFALSE 34700
// exit ;
34698: GO 34935
// for i := 1 to Count ( factoryWaypoints ) do
34700: LD_ADDR_VAR 0 5
34704: PUSH
34705: DOUBLE
34706: LD_INT 1
34708: DEC
34709: ST_TO_ADDR
34710: LD_EXP 105
34714: PPUSH
34715: CALL 43667 0 1
34719: PUSH
34720: FOR_TO
34721: IFFALSE 34883
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
34723: LD_VAR 0 2
34727: PPUSH
34728: LD_VAR 0 3
34732: PPUSH
34733: CALL_OW 428
34737: PUSH
34738: LD_EXP 105
34742: PUSH
34743: LD_VAR 0 5
34747: ARRAY
34748: PUSH
34749: LD_INT 2
34751: ARRAY
34752: EQUAL
34753: IFFALSE 34785
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
34755: LD_ADDR_EXP 105
34759: PUSH
34760: LD_EXP 105
34764: PPUSH
34765: LD_VAR 0 5
34769: PPUSH
34770: CALL_OW 3
34774: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34775: CALL 34940 0 0
// exit ;
34779: POP
34780: POP
34781: GO 34935
// end else
34783: GO 34881
// if factory = factoryWaypoints [ i ] [ 2 ] then
34785: LD_VAR 0 1
34789: PUSH
34790: LD_EXP 105
34794: PUSH
34795: LD_VAR 0 5
34799: ARRAY
34800: PUSH
34801: LD_INT 2
34803: ARRAY
34804: EQUAL
34805: IFFALSE 34881
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
34807: LD_ADDR_EXP 105
34811: PUSH
34812: LD_EXP 105
34816: PPUSH
34817: LD_VAR 0 5
34821: PPUSH
34822: CALL_OW 3
34826: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
34827: LD_ADDR_EXP 105
34831: PUSH
34832: LD_EXP 105
34836: PPUSH
34837: LD_VAR 0 1
34841: PPUSH
34842: CALL_OW 255
34846: PUSH
34847: LD_VAR 0 1
34851: PUSH
34852: LD_VAR 0 2
34856: PUSH
34857: LD_VAR 0 3
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: PPUSH
34868: CALL 79599 0 2
34872: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34873: CALL 34940 0 0
// exit ;
34877: POP
34878: POP
34879: GO 34935
// end ; end ;
34881: GO 34720
34883: POP
34884: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
34885: LD_ADDR_EXP 105
34889: PUSH
34890: LD_EXP 105
34894: PPUSH
34895: LD_VAR 0 1
34899: PPUSH
34900: CALL_OW 255
34904: PUSH
34905: LD_VAR 0 1
34909: PUSH
34910: LD_VAR 0 2
34914: PUSH
34915: LD_VAR 0 3
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: PPUSH
34926: CALL 79599 0 2
34930: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34931: CALL 34940 0 0
// end ;
34935: LD_VAR 0 4
34939: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34940: LD_INT 0
34942: PPUSH
34943: PPUSH
34944: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34945: LD_STRING resetFactoryWaypoint();
34947: PPUSH
34948: CALL_OW 559
// if factoryWaypoints then
34952: LD_EXP 105
34956: IFFALSE 35077
// begin list := factoryWaypoints ;
34958: LD_ADDR_VAR 0 3
34962: PUSH
34963: LD_EXP 105
34967: ST_TO_ADDR
// for i := 1 to list do
34968: LD_ADDR_VAR 0 2
34972: PUSH
34973: DOUBLE
34974: LD_INT 1
34976: DEC
34977: ST_TO_ADDR
34978: LD_VAR 0 3
34982: PUSH
34983: FOR_TO
34984: IFFALSE 35075
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34986: LD_STRING setFactoryWaypointXY(
34988: PUSH
34989: LD_VAR 0 3
34993: PUSH
34994: LD_VAR 0 2
34998: ARRAY
34999: PUSH
35000: LD_INT 1
35002: ARRAY
35003: STR
35004: PUSH
35005: LD_STRING ,
35007: STR
35008: PUSH
35009: LD_VAR 0 3
35013: PUSH
35014: LD_VAR 0 2
35018: ARRAY
35019: PUSH
35020: LD_INT 2
35022: ARRAY
35023: STR
35024: PUSH
35025: LD_STRING ,
35027: STR
35028: PUSH
35029: LD_VAR 0 3
35033: PUSH
35034: LD_VAR 0 2
35038: ARRAY
35039: PUSH
35040: LD_INT 3
35042: ARRAY
35043: STR
35044: PUSH
35045: LD_STRING ,
35047: STR
35048: PUSH
35049: LD_VAR 0 3
35053: PUSH
35054: LD_VAR 0 2
35058: ARRAY
35059: PUSH
35060: LD_INT 4
35062: ARRAY
35063: STR
35064: PUSH
35065: LD_STRING )
35067: STR
35068: PPUSH
35069: CALL_OW 559
35073: GO 34983
35075: POP
35076: POP
// end ; end ;
35077: LD_VAR 0 1
35081: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
35082: LD_INT 0
35084: PPUSH
// if HexInfo ( x , y ) = warehouse then
35085: LD_VAR 0 2
35089: PPUSH
35090: LD_VAR 0 3
35094: PPUSH
35095: CALL_OW 428
35099: PUSH
35100: LD_VAR 0 1
35104: EQUAL
35105: IFFALSE 35132
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
35107: LD_ADDR_EXP 107
35111: PUSH
35112: LD_EXP 107
35116: PPUSH
35117: LD_VAR 0 1
35121: PPUSH
35122: LD_INT 0
35124: PPUSH
35125: CALL_OW 1
35129: ST_TO_ADDR
35130: GO 35183
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35132: LD_ADDR_EXP 107
35136: PUSH
35137: LD_EXP 107
35141: PPUSH
35142: LD_VAR 0 1
35146: PPUSH
35147: LD_VAR 0 1
35151: PPUSH
35152: CALL_OW 255
35156: PUSH
35157: LD_VAR 0 1
35161: PUSH
35162: LD_VAR 0 2
35166: PUSH
35167: LD_VAR 0 3
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: PPUSH
35178: CALL_OW 1
35182: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35183: CALL 35192 0 0
// end ;
35187: LD_VAR 0 4
35191: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35192: LD_INT 0
35194: PPUSH
35195: PPUSH
35196: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35197: LD_STRING resetWarehouseGatheringPoints();
35199: PPUSH
35200: CALL_OW 559
// if warehouseGatheringPoints then
35204: LD_EXP 107
35208: IFFALSE 35334
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35210: LD_ADDR_VAR 0 3
35214: PUSH
35215: LD_EXP 107
35219: PPUSH
35220: CALL 83533 0 1
35224: ST_TO_ADDR
// for i := 1 to list do
35225: LD_ADDR_VAR 0 2
35229: PUSH
35230: DOUBLE
35231: LD_INT 1
35233: DEC
35234: ST_TO_ADDR
35235: LD_VAR 0 3
35239: PUSH
35240: FOR_TO
35241: IFFALSE 35332
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35243: LD_STRING setWarehouseGatheringPointXY(
35245: PUSH
35246: LD_VAR 0 3
35250: PUSH
35251: LD_VAR 0 2
35255: ARRAY
35256: PUSH
35257: LD_INT 1
35259: ARRAY
35260: STR
35261: PUSH
35262: LD_STRING ,
35264: STR
35265: PUSH
35266: LD_VAR 0 3
35270: PUSH
35271: LD_VAR 0 2
35275: ARRAY
35276: PUSH
35277: LD_INT 2
35279: ARRAY
35280: STR
35281: PUSH
35282: LD_STRING ,
35284: STR
35285: PUSH
35286: LD_VAR 0 3
35290: PUSH
35291: LD_VAR 0 2
35295: ARRAY
35296: PUSH
35297: LD_INT 3
35299: ARRAY
35300: STR
35301: PUSH
35302: LD_STRING ,
35304: STR
35305: PUSH
35306: LD_VAR 0 3
35310: PUSH
35311: LD_VAR 0 2
35315: ARRAY
35316: PUSH
35317: LD_INT 4
35319: ARRAY
35320: STR
35321: PUSH
35322: LD_STRING )
35324: STR
35325: PPUSH
35326: CALL_OW 559
35330: GO 35240
35332: POP
35333: POP
// end ; end ;
35334: LD_VAR 0 1
35338: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35339: LD_EXP 107
35343: IFFALSE 36038
35345: GO 35347
35347: DISABLE
35348: LD_INT 0
35350: PPUSH
35351: PPUSH
35352: PPUSH
35353: PPUSH
35354: PPUSH
35355: PPUSH
35356: PPUSH
35357: PPUSH
35358: PPUSH
// begin enable ;
35359: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35360: LD_ADDR_VAR 0 3
35364: PUSH
35365: LD_EXP 107
35369: PPUSH
35370: CALL 83533 0 1
35374: ST_TO_ADDR
// if not list then
35375: LD_VAR 0 3
35379: NOT
35380: IFFALSE 35384
// exit ;
35382: GO 36038
// for i := 1 to list do
35384: LD_ADDR_VAR 0 1
35388: PUSH
35389: DOUBLE
35390: LD_INT 1
35392: DEC
35393: ST_TO_ADDR
35394: LD_VAR 0 3
35398: PUSH
35399: FOR_TO
35400: IFFALSE 36036
// begin depot := list [ i ] [ 2 ] ;
35402: LD_ADDR_VAR 0 8
35406: PUSH
35407: LD_VAR 0 3
35411: PUSH
35412: LD_VAR 0 1
35416: ARRAY
35417: PUSH
35418: LD_INT 2
35420: ARRAY
35421: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35422: LD_ADDR_VAR 0 5
35426: PUSH
35427: LD_VAR 0 3
35431: PUSH
35432: LD_VAR 0 1
35436: ARRAY
35437: PUSH
35438: LD_INT 1
35440: ARRAY
35441: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35442: LD_VAR 0 8
35446: PPUSH
35447: CALL_OW 301
35451: IFTRUE 35470
35453: PUSH
35454: LD_VAR 0 5
35458: PUSH
35459: LD_VAR 0 8
35463: PPUSH
35464: CALL_OW 255
35468: NONEQUAL
35469: OR
35470: IFFALSE 35499
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35472: LD_ADDR_EXP 107
35476: PUSH
35477: LD_EXP 107
35481: PPUSH
35482: LD_VAR 0 8
35486: PPUSH
35487: LD_INT 0
35489: PPUSH
35490: CALL_OW 1
35494: ST_TO_ADDR
// exit ;
35495: POP
35496: POP
35497: GO 36038
// end ; x := list [ i ] [ 3 ] ;
35499: LD_ADDR_VAR 0 6
35503: PUSH
35504: LD_VAR 0 3
35508: PUSH
35509: LD_VAR 0 1
35513: ARRAY
35514: PUSH
35515: LD_INT 3
35517: ARRAY
35518: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35519: LD_ADDR_VAR 0 7
35523: PUSH
35524: LD_VAR 0 3
35528: PUSH
35529: LD_VAR 0 1
35533: ARRAY
35534: PUSH
35535: LD_INT 4
35537: ARRAY
35538: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35539: LD_ADDR_VAR 0 9
35543: PUSH
35544: LD_VAR 0 6
35548: PPUSH
35549: LD_VAR 0 7
35553: PPUSH
35554: LD_INT 16
35556: PPUSH
35557: CALL 82107 0 3
35561: ST_TO_ADDR
// if not cratesNearbyPoint then
35562: LD_VAR 0 9
35566: NOT
35567: IFFALSE 35573
// exit ;
35569: POP
35570: POP
35571: GO 36038
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35573: LD_ADDR_VAR 0 4
35577: PUSH
35578: LD_INT 22
35580: PUSH
35581: LD_VAR 0 5
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 3
35592: PUSH
35593: LD_INT 60
35595: PUSH
35596: EMPTY
35597: LIST
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 91
35605: PUSH
35606: LD_VAR 0 8
35610: PUSH
35611: LD_INT 6
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 2
35621: PUSH
35622: LD_INT 25
35624: PUSH
35625: LD_INT 2
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: PUSH
35632: LD_INT 25
35634: PUSH
35635: LD_INT 16
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: LIST
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: PPUSH
35653: CALL_OW 69
35657: PUSH
35658: LD_VAR 0 8
35662: PPUSH
35663: CALL_OW 313
35667: PPUSH
35668: LD_INT 3
35670: PUSH
35671: LD_INT 60
35673: PUSH
35674: EMPTY
35675: LIST
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 2
35683: PUSH
35684: LD_INT 25
35686: PUSH
35687: LD_INT 2
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: LD_INT 25
35696: PUSH
35697: LD_INT 16
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: LIST
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: PPUSH
35713: CALL_OW 72
35717: UNION
35718: ST_TO_ADDR
// if tmp then
35719: LD_VAR 0 4
35723: IFFALSE 35803
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35725: LD_ADDR_VAR 0 4
35729: PUSH
35730: LD_VAR 0 4
35734: PPUSH
35735: LD_INT 3
35737: PPUSH
35738: CALL 79914 0 2
35742: ST_TO_ADDR
// for j in tmp do
35743: LD_ADDR_VAR 0 2
35747: PUSH
35748: LD_VAR 0 4
35752: PUSH
35753: FOR_IN
35754: IFFALSE 35797
// begin if IsInUnit ( j ) then
35756: LD_VAR 0 2
35760: PPUSH
35761: CALL_OW 310
35765: IFFALSE 35776
// ComExit ( j ) ;
35767: LD_VAR 0 2
35771: PPUSH
35772: CALL 79997 0 1
// AddComCollect ( j , x , y ) ;
35776: LD_VAR 0 2
35780: PPUSH
35781: LD_VAR 0 6
35785: PPUSH
35786: LD_VAR 0 7
35790: PPUSH
35791: CALL_OW 177
// end ;
35795: GO 35753
35797: POP
35798: POP
// exit ;
35799: POP
35800: POP
35801: GO 36038
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35803: LD_ADDR_VAR 0 4
35807: PUSH
35808: LD_INT 22
35810: PUSH
35811: LD_VAR 0 5
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: PUSH
35820: LD_INT 91
35822: PUSH
35823: LD_VAR 0 8
35827: PUSH
35828: LD_INT 8
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: LIST
35835: PUSH
35836: LD_INT 2
35838: PUSH
35839: LD_INT 34
35841: PUSH
35842: LD_INT 12
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 34
35851: PUSH
35852: LD_INT 51
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: LD_INT 34
35861: PUSH
35862: LD_INT 32
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PUSH
35869: LD_INT 34
35871: PUSH
35872: LD_INT 89
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: LIST
35890: PPUSH
35891: CALL_OW 69
35895: ST_TO_ADDR
// if tmp then
35896: LD_VAR 0 4
35900: IFFALSE 36034
// begin for j in tmp do
35902: LD_ADDR_VAR 0 2
35906: PUSH
35907: LD_VAR 0 4
35911: PUSH
35912: FOR_IN
35913: IFFALSE 36032
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35915: LD_VAR 0 2
35919: PPUSH
35920: CALL_OW 262
35924: PUSH
35925: LD_INT 3
35927: EQUAL
35928: IFTRUE 35945
35930: PUSH
35931: LD_VAR 0 2
35935: PPUSH
35936: CALL_OW 261
35940: PUSH
35941: LD_INT 20
35943: GREATER
35944: OR
35945: IFFALSE 35959
35947: PUSH
35948: LD_VAR 0 2
35952: PPUSH
35953: CALL_OW 314
35957: NOT
35958: AND
35959: IFFALSE 35989
35961: PUSH
35962: LD_VAR 0 2
35966: PPUSH
35967: CALL_OW 263
35971: PUSH
35972: LD_INT 1
35974: NONEQUAL
35975: IFTRUE 35988
35977: PUSH
35978: LD_VAR 0 2
35982: PPUSH
35983: CALL_OW 311
35987: OR
35988: AND
35989: IFFALSE 36030
// begin ComCollect ( j , x , y ) ;
35991: LD_VAR 0 2
35995: PPUSH
35996: LD_VAR 0 6
36000: PPUSH
36001: LD_VAR 0 7
36005: PPUSH
36006: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
36010: LD_VAR 0 2
36014: PPUSH
36015: LD_VAR 0 8
36019: PPUSH
36020: CALL_OW 172
// exit ;
36024: POP
36025: POP
36026: POP
36027: POP
36028: GO 36038
// end ;
36030: GO 35912
36032: POP
36033: POP
// end ; end ;
36034: GO 35399
36036: POP
36037: POP
// end ; end_of_file
36038: PPOPN 9
36040: END
// export function SOS_UnitDestroyed ( un ) ; begin
36041: LD_INT 0
36043: PPUSH
// ComRadiation ( un ) ;
36044: LD_VAR 0 1
36048: PPUSH
36049: CALL 37130 0 1
// end ;
36053: LD_VAR 0 2
36057: RET
// export function SOS_UnitKamikazed ( un ) ; begin
36058: LD_INT 0
36060: PPUSH
// ComRadiation ( un ) ;
36061: LD_VAR 0 1
36065: PPUSH
36066: CALL 37130 0 1
// end ;
36070: LD_VAR 0 2
36074: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
36075: LD_INT 0
36077: PPUSH
// end ;
36078: LD_VAR 0 4
36082: RET
// export function SOS_Command ( cmd ) ; begin
36083: LD_INT 0
36085: PPUSH
// end ;
36086: LD_VAR 0 2
36090: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
36091: LD_INT 0
36093: PPUSH
// end ;
36094: LD_VAR 0 6
36098: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
36099: LD_INT 0
36101: PPUSH
36102: PPUSH
36103: PPUSH
36104: PPUSH
// if not vehicle or not factory then
36105: LD_VAR 0 1
36109: NOT
36110: IFTRUE 36119
36112: PUSH
36113: LD_VAR 0 2
36117: NOT
36118: OR
36119: IFFALSE 36123
// exit ;
36121: GO 36705
// if not factoryWaypoints then
36123: LD_EXP 105
36127: NOT
36128: IFFALSE 36132
// exit ;
36130: GO 36705
// for i := 1 to Count ( factoryWaypoints ) do
36132: LD_ADDR_VAR 0 4
36136: PUSH
36137: DOUBLE
36138: LD_INT 1
36140: DEC
36141: ST_TO_ADDR
36142: LD_EXP 105
36146: PPUSH
36147: CALL 43667 0 1
36151: PUSH
36152: FOR_TO
36153: IFFALSE 36703
// if factoryWaypoints [ i ] [ 2 ] = factory then
36155: LD_EXP 105
36159: PUSH
36160: LD_VAR 0 4
36164: ARRAY
36165: PUSH
36166: LD_INT 2
36168: ARRAY
36169: PUSH
36170: LD_VAR 0 2
36174: EQUAL
36175: IFFALSE 36701
// begin if GetControl ( vehicle ) = control_manual then
36177: LD_VAR 0 1
36181: PPUSH
36182: CALL_OW 263
36186: PUSH
36187: LD_INT 1
36189: EQUAL
36190: IFFALSE 36554
// begin driver := IsDrivenBy ( vehicle ) ;
36192: LD_ADDR_VAR 0 5
36196: PUSH
36197: LD_VAR 0 1
36201: PPUSH
36202: CALL_OW 311
36206: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
36207: LD_VAR 0 5
36211: PUSH
36212: LD_EXP 106
36216: IN
36217: IFTRUE 36231
36219: PUSH
36220: LD_VAR 0 1
36224: PUSH
36225: LD_EXP 106
36229: IN
36230: OR
36231: IFFALSE 36237
// exit ;
36233: POP
36234: POP
36235: GO 36705
// if not HasTask ( driver ) then
36237: LD_VAR 0 5
36241: PPUSH
36242: CALL_OW 314
36246: NOT
36247: IFFALSE 36552
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
36249: LD_ADDR_EXP 106
36253: PUSH
36254: LD_EXP 106
36258: PPUSH
36259: LD_VAR 0 5
36263: PPUSH
36264: CALL 79599 0 2
36268: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
36269: LD_ADDR_EXP 106
36273: PUSH
36274: LD_EXP 106
36278: PPUSH
36279: LD_VAR 0 1
36283: PPUSH
36284: CALL 79599 0 2
36288: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36289: LD_ADDR_VAR 0 6
36293: PUSH
36294: LD_EXP 105
36298: PUSH
36299: LD_VAR 0 4
36303: ARRAY
36304: PUSH
36305: LD_INT 3
36307: ARRAY
36308: PPUSH
36309: LD_EXP 105
36313: PUSH
36314: LD_VAR 0 4
36318: ARRAY
36319: PUSH
36320: LD_INT 4
36322: ARRAY
36323: PPUSH
36324: CALL_OW 428
36328: ST_TO_ADDR
// if hex then
36329: LD_VAR 0 6
36333: IFFALSE 36351
// ComMoveUnit ( driver , hex ) else
36335: LD_VAR 0 5
36339: PPUSH
36340: LD_VAR 0 6
36344: PPUSH
36345: CALL_OW 112
36349: GO 36435
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
36351: LD_VAR 0 1
36355: PPUSH
36356: LD_EXP 105
36360: PUSH
36361: LD_VAR 0 4
36365: ARRAY
36366: PUSH
36367: LD_INT 3
36369: ARRAY
36370: PPUSH
36371: LD_EXP 105
36375: PUSH
36376: LD_VAR 0 4
36380: ARRAY
36381: PUSH
36382: LD_INT 4
36384: ARRAY
36385: PPUSH
36386: CALL_OW 297
36390: PUSH
36391: LD_INT 0
36393: GREATER
36394: IFFALSE 36435
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36396: LD_VAR 0 5
36400: PPUSH
36401: LD_EXP 105
36405: PUSH
36406: LD_VAR 0 4
36410: ARRAY
36411: PUSH
36412: LD_INT 3
36414: ARRAY
36415: PPUSH
36416: LD_EXP 105
36420: PUSH
36421: LD_VAR 0 4
36425: ARRAY
36426: PUSH
36427: LD_INT 4
36429: ARRAY
36430: PPUSH
36431: CALL_OW 111
// AddComExitVehicle ( driver ) ;
36435: LD_VAR 0 5
36439: PPUSH
36440: CALL_OW 181
// if Multiplayer then
36444: LD_OWVAR 4
36448: IFFALSE 36497
// begin repeat wait ( 10 ) ;
36450: LD_INT 10
36452: PPUSH
36453: CALL_OW 67
// until not IsInUnit ( driver ) ;
36457: LD_VAR 0 5
36461: PPUSH
36462: CALL_OW 310
36466: NOT
36467: IFFALSE 36450
// if not HasTask ( driver ) then
36469: LD_VAR 0 5
36473: PPUSH
36474: CALL_OW 314
36478: NOT
36479: IFFALSE 36495
// ComEnterUnit ( driver , factory ) ;
36481: LD_VAR 0 5
36485: PPUSH
36486: LD_VAR 0 2
36490: PPUSH
36491: CALL_OW 120
// end else
36495: GO 36511
// AddComEnterUnit ( driver , factory ) ;
36497: LD_VAR 0 5
36501: PPUSH
36502: LD_VAR 0 2
36506: PPUSH
36507: CALL_OW 180
// wait ( 0 0$1 ) ;
36511: LD_INT 35
36513: PPUSH
36514: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
36518: LD_ADDR_EXP 106
36522: PUSH
36523: LD_EXP 106
36527: PUSH
36528: LD_VAR 0 5
36532: DIFF
36533: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
36534: LD_ADDR_EXP 106
36538: PUSH
36539: LD_EXP 106
36543: PUSH
36544: LD_VAR 0 1
36548: DIFF
36549: ST_TO_ADDR
// break ;
36550: GO 36703
// end ; end else
36552: GO 36701
// if GetControl ( vehicle ) = control_remote then
36554: LD_VAR 0 1
36558: PPUSH
36559: CALL_OW 263
36563: PUSH
36564: LD_INT 2
36566: EQUAL
36567: IFFALSE 36653
// begin wait ( 0 0$2 ) ;
36569: LD_INT 70
36571: PPUSH
36572: CALL_OW 67
// repeat wait ( 10 ) ;
36576: LD_INT 10
36578: PPUSH
36579: CALL_OW 67
// Connect ( vehicle ) ;
36583: LD_VAR 0 1
36587: PPUSH
36588: CALL 49911 0 1
// until IsControledBy ( vehicle ) ;
36592: LD_VAR 0 1
36596: PPUSH
36597: CALL_OW 312
36601: IFFALSE 36576
// wait ( 10 ) ;
36603: LD_INT 10
36605: PPUSH
36606: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36610: LD_VAR 0 1
36614: PPUSH
36615: LD_EXP 105
36619: PUSH
36620: LD_VAR 0 4
36624: ARRAY
36625: PUSH
36626: LD_INT 3
36628: ARRAY
36629: PPUSH
36630: LD_EXP 105
36634: PUSH
36635: LD_VAR 0 4
36639: ARRAY
36640: PUSH
36641: LD_INT 4
36643: ARRAY
36644: PPUSH
36645: CALL_OW 111
// break ;
36649: GO 36703
// end else
36651: GO 36701
// begin wait ( 0 0$3 ) ;
36653: LD_INT 105
36655: PPUSH
36656: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36660: LD_VAR 0 1
36664: PPUSH
36665: LD_EXP 105
36669: PUSH
36670: LD_VAR 0 4
36674: ARRAY
36675: PUSH
36676: LD_INT 3
36678: ARRAY
36679: PPUSH
36680: LD_EXP 105
36684: PUSH
36685: LD_VAR 0 4
36689: ARRAY
36690: PUSH
36691: LD_INT 4
36693: ARRAY
36694: PPUSH
36695: CALL_OW 111
// break ;
36699: GO 36703
// end ; end ;
36701: GO 36152
36703: POP
36704: POP
// end ;
36705: LD_VAR 0 3
36709: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36710: LD_INT 0
36712: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36713: LD_VAR 0 1
36717: PUSH
36718: LD_INT 250
36720: EQUAL
36721: IFFALSE 36738
36723: PUSH
36724: LD_VAR 0 2
36728: PPUSH
36729: CALL_OW 264
36733: PUSH
36734: LD_INT 81
36736: EQUAL
36737: AND
36738: IFFALSE 36759
// MinerPlaceMine ( unit , x , y ) ;
36740: LD_VAR 0 2
36744: PPUSH
36745: LD_VAR 0 4
36749: PPUSH
36750: LD_VAR 0 5
36754: PPUSH
36755: CALL 39891 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36759: LD_VAR 0 1
36763: PUSH
36764: LD_INT 251
36766: EQUAL
36767: IFFALSE 36784
36769: PUSH
36770: LD_VAR 0 2
36774: PPUSH
36775: CALL_OW 264
36779: PUSH
36780: LD_INT 81
36782: EQUAL
36783: AND
36784: IFFALSE 36805
// MinerDetonateMine ( unit , x , y ) ;
36786: LD_VAR 0 2
36790: PPUSH
36791: LD_VAR 0 4
36795: PPUSH
36796: LD_VAR 0 5
36800: PPUSH
36801: CALL 40170 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36805: LD_VAR 0 1
36809: PUSH
36810: LD_INT 252
36812: EQUAL
36813: IFFALSE 36830
36815: PUSH
36816: LD_VAR 0 2
36820: PPUSH
36821: CALL_OW 264
36825: PUSH
36826: LD_INT 81
36828: EQUAL
36829: AND
36830: IFFALSE 36851
// MinerCreateMinefield ( unit , x , y ) ;
36832: LD_VAR 0 2
36836: PPUSH
36837: LD_VAR 0 4
36841: PPUSH
36842: LD_VAR 0 5
36846: PPUSH
36847: CALL 40589 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36851: LD_VAR 0 1
36855: PUSH
36856: LD_INT 253
36858: EQUAL
36859: IFFALSE 36876
36861: PUSH
36862: LD_VAR 0 2
36866: PPUSH
36867: CALL_OW 257
36871: PUSH
36872: LD_INT 5
36874: EQUAL
36875: AND
36876: IFFALSE 36897
// ComBinocular ( unit , x , y ) ;
36878: LD_VAR 0 2
36882: PPUSH
36883: LD_VAR 0 4
36887: PPUSH
36888: LD_VAR 0 5
36892: PPUSH
36893: CALL 40964 0 3
// if selectedUnit then
36897: LD_VAR 0 3
36901: IFFALSE 36961
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36903: LD_VAR 0 1
36907: PUSH
36908: LD_INT 254
36910: EQUAL
36911: IFFALSE 36928
36913: PUSH
36914: LD_VAR 0 2
36918: PPUSH
36919: CALL_OW 264
36923: PUSH
36924: LD_INT 99
36926: EQUAL
36927: AND
36928: IFFALSE 36945
36930: PUSH
36931: LD_VAR 0 3
36935: PPUSH
36936: CALL_OW 263
36940: PUSH
36941: LD_INT 3
36943: EQUAL
36944: AND
36945: IFFALSE 36961
// HackDestroyVehicle ( unit , selectedUnit ) ;
36947: LD_VAR 0 2
36951: PPUSH
36952: LD_VAR 0 3
36956: PPUSH
36957: CALL 39251 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36961: LD_VAR 0 1
36965: PUSH
36966: LD_INT 255
36968: EQUAL
36969: IFFALSE 36993
36971: PUSH
36972: LD_VAR 0 2
36976: PPUSH
36977: CALL_OW 264
36981: PUSH
36982: LD_INT 14
36984: PUSH
36985: LD_INT 53
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: IN
36992: AND
36993: IFFALSE 37011
36995: PUSH
36996: LD_VAR 0 4
37000: PPUSH
37001: LD_VAR 0 5
37005: PPUSH
37006: CALL_OW 488
37010: AND
37011: IFFALSE 37035
// CutTreeXYR ( unit , x , y , 12 ) ;
37013: LD_VAR 0 2
37017: PPUSH
37018: LD_VAR 0 4
37022: PPUSH
37023: LD_VAR 0 5
37027: PPUSH
37028: LD_INT 12
37030: PPUSH
37031: CALL 37226 0 4
// if cmd = 256 then
37035: LD_VAR 0 1
37039: PUSH
37040: LD_INT 256
37042: EQUAL
37043: IFFALSE 37064
// SetFactoryWaypoint ( unit , x , y ) ;
37045: LD_VAR 0 2
37049: PPUSH
37050: LD_VAR 0 4
37054: PPUSH
37055: LD_VAR 0 5
37059: PPUSH
37060: CALL 34586 0 3
// if cmd = 257 then
37064: LD_VAR 0 1
37068: PUSH
37069: LD_INT 257
37071: EQUAL
37072: IFFALSE 37093
// SetWarehouseGatheringPoint ( unit , x , y ) ;
37074: LD_VAR 0 2
37078: PPUSH
37079: LD_VAR 0 4
37083: PPUSH
37084: LD_VAR 0 5
37088: PPUSH
37089: CALL 35082 0 3
// if cmd = 258 then
37093: LD_VAR 0 1
37097: PUSH
37098: LD_INT 258
37100: EQUAL
37101: IFFALSE 37125
// BurnTreeXYR ( unit , x , y , 8 ) ;
37103: LD_VAR 0 2
37107: PPUSH
37108: LD_VAR 0 4
37112: PPUSH
37113: LD_VAR 0 5
37117: PPUSH
37118: LD_INT 8
37120: PPUSH
37121: CALL 37626 0 4
// end ;
37125: LD_VAR 0 6
37129: RET
// export function ComRadiation ( un ) ; var eff ; begin
37130: LD_INT 0
37132: PPUSH
37133: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
37134: LD_VAR 0 1
37138: PPUSH
37139: CALL_OW 264
37143: PUSH
37144: LD_INT 91
37146: NONEQUAL
37147: IFFALSE 37151
// exit ;
37149: GO 37221
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
37151: LD_INT 68
37153: PPUSH
37154: LD_VAR 0 1
37158: PPUSH
37159: CALL_OW 255
37163: PPUSH
37164: CALL_OW 321
37168: PUSH
37169: LD_INT 2
37171: EQUAL
37172: IFFALSE 37184
// eff := 50 else
37174: LD_ADDR_VAR 0 3
37178: PUSH
37179: LD_INT 50
37181: ST_TO_ADDR
37182: GO 37192
// eff := 25 ;
37184: LD_ADDR_VAR 0 3
37188: PUSH
37189: LD_INT 25
37191: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
37192: LD_VAR 0 1
37196: PPUSH
37197: CALL_OW 250
37201: PPUSH
37202: LD_VAR 0 1
37206: PPUSH
37207: CALL_OW 251
37211: PPUSH
37212: LD_VAR 0 3
37216: PPUSH
37217: CALL_OW 495
// end ;
37221: LD_VAR 0 2
37225: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
37226: LD_INT 0
37228: PPUSH
37229: PPUSH
37230: PPUSH
37231: PPUSH
37232: PPUSH
37233: PPUSH
37234: PPUSH
37235: PPUSH
37236: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
37237: LD_VAR 0 1
37241: PPUSH
37242: CALL_OW 302
37246: NOT
37247: IFTRUE 37266
37249: PUSH
37250: LD_VAR 0 2
37254: PPUSH
37255: LD_VAR 0 3
37259: PPUSH
37260: CALL_OW 488
37264: NOT
37265: OR
37266: IFTRUE 37275
37268: PUSH
37269: LD_VAR 0 4
37273: NOT
37274: OR
37275: IFFALSE 37279
// exit ;
37277: GO 37621
// list := [ ] ;
37279: LD_ADDR_VAR 0 13
37283: PUSH
37284: EMPTY
37285: ST_TO_ADDR
// if x - r < 0 then
37286: LD_VAR 0 2
37290: PUSH
37291: LD_VAR 0 4
37295: MINUS
37296: PUSH
37297: LD_INT 0
37299: LESS
37300: IFFALSE 37312
// min_x := 0 else
37302: LD_ADDR_VAR 0 7
37306: PUSH
37307: LD_INT 0
37309: ST_TO_ADDR
37310: GO 37328
// min_x := x - r ;
37312: LD_ADDR_VAR 0 7
37316: PUSH
37317: LD_VAR 0 2
37321: PUSH
37322: LD_VAR 0 4
37326: MINUS
37327: ST_TO_ADDR
// if y - r < 0 then
37328: LD_VAR 0 3
37332: PUSH
37333: LD_VAR 0 4
37337: MINUS
37338: PUSH
37339: LD_INT 0
37341: LESS
37342: IFFALSE 37354
// min_y := 0 else
37344: LD_ADDR_VAR 0 8
37348: PUSH
37349: LD_INT 0
37351: ST_TO_ADDR
37352: GO 37370
// min_y := y - r ;
37354: LD_ADDR_VAR 0 8
37358: PUSH
37359: LD_VAR 0 3
37363: PUSH
37364: LD_VAR 0 4
37368: MINUS
37369: ST_TO_ADDR
// max_x := x + r ;
37370: LD_ADDR_VAR 0 9
37374: PUSH
37375: LD_VAR 0 2
37379: PUSH
37380: LD_VAR 0 4
37384: PLUS
37385: ST_TO_ADDR
// max_y := y + r ;
37386: LD_ADDR_VAR 0 10
37390: PUSH
37391: LD_VAR 0 3
37395: PUSH
37396: LD_VAR 0 4
37400: PLUS
37401: ST_TO_ADDR
// for _x = min_x to max_x do
37402: LD_ADDR_VAR 0 11
37406: PUSH
37407: DOUBLE
37408: LD_VAR 0 7
37412: DEC
37413: ST_TO_ADDR
37414: LD_VAR 0 9
37418: PUSH
37419: FOR_TO
37420: IFFALSE 37539
// for _y = min_y to max_y do
37422: LD_ADDR_VAR 0 12
37426: PUSH
37427: DOUBLE
37428: LD_VAR 0 8
37432: DEC
37433: ST_TO_ADDR
37434: LD_VAR 0 10
37438: PUSH
37439: FOR_TO
37440: IFFALSE 37535
// begin if not ValidHex ( _x , _y ) then
37442: LD_VAR 0 11
37446: PPUSH
37447: LD_VAR 0 12
37451: PPUSH
37452: CALL_OW 488
37456: NOT
37457: IFFALSE 37461
// continue ;
37459: GO 37439
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37461: LD_VAR 0 11
37465: PPUSH
37466: LD_VAR 0 12
37470: PPUSH
37471: CALL_OW 351
37475: IFFALSE 37493
37477: PUSH
37478: LD_VAR 0 11
37482: PPUSH
37483: LD_VAR 0 12
37487: PPUSH
37488: CALL_OW 554
37492: AND
37493: IFFALSE 37533
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37495: LD_ADDR_VAR 0 13
37499: PUSH
37500: LD_VAR 0 13
37504: PPUSH
37505: LD_VAR 0 13
37509: PUSH
37510: LD_INT 1
37512: PLUS
37513: PPUSH
37514: LD_VAR 0 11
37518: PUSH
37519: LD_VAR 0 12
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PPUSH
37528: CALL_OW 2
37532: ST_TO_ADDR
// end ;
37533: GO 37439
37535: POP
37536: POP
37537: GO 37419
37539: POP
37540: POP
// if not list then
37541: LD_VAR 0 13
37545: NOT
37546: IFFALSE 37550
// exit ;
37548: GO 37621
// for i in list do
37550: LD_ADDR_VAR 0 6
37554: PUSH
37555: LD_VAR 0 13
37559: PUSH
37560: FOR_IN
37561: IFFALSE 37619
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37563: LD_VAR 0 1
37567: PPUSH
37568: LD_STRING M
37570: PUSH
37571: LD_VAR 0 6
37575: PUSH
37576: LD_INT 1
37578: ARRAY
37579: PUSH
37580: LD_VAR 0 6
37584: PUSH
37585: LD_INT 2
37587: ARRAY
37588: PUSH
37589: LD_INT 0
37591: PUSH
37592: LD_INT 0
37594: PUSH
37595: LD_INT 0
37597: PUSH
37598: LD_INT 0
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: PUSH
37610: EMPTY
37611: LIST
37612: PPUSH
37613: CALL_OW 447
37617: GO 37560
37619: POP
37620: POP
// end ;
37621: LD_VAR 0 5
37625: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
37626: LD_INT 0
37628: PPUSH
37629: PPUSH
37630: PPUSH
37631: PPUSH
37632: PPUSH
37633: PPUSH
37634: PPUSH
37635: PPUSH
37636: PPUSH
37637: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
37638: LD_VAR 0 1
37642: PPUSH
37643: CALL_OW 302
37647: NOT
37648: IFTRUE 37667
37650: PUSH
37651: LD_VAR 0 2
37655: PPUSH
37656: LD_VAR 0 3
37660: PPUSH
37661: CALL_OW 488
37665: NOT
37666: OR
37667: IFTRUE 37676
37669: PUSH
37670: LD_VAR 0 4
37674: NOT
37675: OR
37676: IFFALSE 37680
// exit ;
37678: GO 38197
// list := [ ] ;
37680: LD_ADDR_VAR 0 13
37684: PUSH
37685: EMPTY
37686: ST_TO_ADDR
// if x - r < 0 then
37687: LD_VAR 0 2
37691: PUSH
37692: LD_VAR 0 4
37696: MINUS
37697: PUSH
37698: LD_INT 0
37700: LESS
37701: IFFALSE 37713
// min_x := 0 else
37703: LD_ADDR_VAR 0 7
37707: PUSH
37708: LD_INT 0
37710: ST_TO_ADDR
37711: GO 37729
// min_x := x - r ;
37713: LD_ADDR_VAR 0 7
37717: PUSH
37718: LD_VAR 0 2
37722: PUSH
37723: LD_VAR 0 4
37727: MINUS
37728: ST_TO_ADDR
// if y - r < 0 then
37729: LD_VAR 0 3
37733: PUSH
37734: LD_VAR 0 4
37738: MINUS
37739: PUSH
37740: LD_INT 0
37742: LESS
37743: IFFALSE 37755
// min_y := 0 else
37745: LD_ADDR_VAR 0 8
37749: PUSH
37750: LD_INT 0
37752: ST_TO_ADDR
37753: GO 37771
// min_y := y - r ;
37755: LD_ADDR_VAR 0 8
37759: PUSH
37760: LD_VAR 0 3
37764: PUSH
37765: LD_VAR 0 4
37769: MINUS
37770: ST_TO_ADDR
// max_x := x + r ;
37771: LD_ADDR_VAR 0 9
37775: PUSH
37776: LD_VAR 0 2
37780: PUSH
37781: LD_VAR 0 4
37785: PLUS
37786: ST_TO_ADDR
// max_y := y + r ;
37787: LD_ADDR_VAR 0 10
37791: PUSH
37792: LD_VAR 0 3
37796: PUSH
37797: LD_VAR 0 4
37801: PLUS
37802: ST_TO_ADDR
// for _x = min_x to max_x do
37803: LD_ADDR_VAR 0 11
37807: PUSH
37808: DOUBLE
37809: LD_VAR 0 7
37813: DEC
37814: ST_TO_ADDR
37815: LD_VAR 0 9
37819: PUSH
37820: FOR_TO
37821: IFFALSE 37940
// for _y = min_y to max_y do
37823: LD_ADDR_VAR 0 12
37827: PUSH
37828: DOUBLE
37829: LD_VAR 0 8
37833: DEC
37834: ST_TO_ADDR
37835: LD_VAR 0 10
37839: PUSH
37840: FOR_TO
37841: IFFALSE 37936
// begin if not ValidHex ( _x , _y ) then
37843: LD_VAR 0 11
37847: PPUSH
37848: LD_VAR 0 12
37852: PPUSH
37853: CALL_OW 488
37857: NOT
37858: IFFALSE 37862
// continue ;
37860: GO 37840
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37862: LD_VAR 0 11
37866: PPUSH
37867: LD_VAR 0 12
37871: PPUSH
37872: CALL_OW 351
37876: IFFALSE 37894
37878: PUSH
37879: LD_VAR 0 11
37883: PPUSH
37884: LD_VAR 0 12
37888: PPUSH
37889: CALL_OW 554
37893: AND
37894: IFFALSE 37934
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37896: LD_ADDR_VAR 0 13
37900: PUSH
37901: LD_VAR 0 13
37905: PPUSH
37906: LD_VAR 0 13
37910: PUSH
37911: LD_INT 1
37913: PLUS
37914: PPUSH
37915: LD_VAR 0 11
37919: PUSH
37920: LD_VAR 0 12
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: PPUSH
37929: CALL_OW 2
37933: ST_TO_ADDR
// end ;
37934: GO 37840
37936: POP
37937: POP
37938: GO 37820
37940: POP
37941: POP
// if not list then
37942: LD_VAR 0 13
37946: NOT
37947: IFFALSE 37951
// exit ;
37949: GO 38197
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
37951: LD_ADDR_VAR 0 13
37955: PUSH
37956: LD_VAR 0 1
37960: PPUSH
37961: LD_VAR 0 13
37965: PPUSH
37966: LD_INT 1
37968: PPUSH
37969: LD_INT 1
37971: PPUSH
37972: CALL 47039 0 4
37976: ST_TO_ADDR
// ComStop ( flame ) ;
37977: LD_VAR 0 1
37981: PPUSH
37982: CALL_OW 141
// for i in list do
37986: LD_ADDR_VAR 0 6
37990: PUSH
37991: LD_VAR 0 13
37995: PUSH
37996: FOR_IN
37997: IFFALSE 38028
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
37999: LD_VAR 0 1
38003: PPUSH
38004: LD_VAR 0 6
38008: PUSH
38009: LD_INT 1
38011: ARRAY
38012: PPUSH
38013: LD_VAR 0 6
38017: PUSH
38018: LD_INT 2
38020: ARRAY
38021: PPUSH
38022: CALL_OW 176
38026: GO 37996
38028: POP
38029: POP
// repeat wait ( 0 0$1 ) ;
38030: LD_INT 35
38032: PPUSH
38033: CALL_OW 67
// task := GetTaskList ( flame ) ;
38037: LD_ADDR_VAR 0 14
38041: PUSH
38042: LD_VAR 0 1
38046: PPUSH
38047: CALL_OW 437
38051: ST_TO_ADDR
// if not task then
38052: LD_VAR 0 14
38056: NOT
38057: IFFALSE 38061
// exit ;
38059: GO 38197
// if task [ 1 ] [ 1 ] <> | then
38061: LD_VAR 0 14
38065: PUSH
38066: LD_INT 1
38068: ARRAY
38069: PUSH
38070: LD_INT 1
38072: ARRAY
38073: PUSH
38074: LD_STRING |
38076: NONEQUAL
38077: IFFALSE 38081
// exit ;
38079: GO 38197
// _x := task [ 1 ] [ 2 ] ;
38081: LD_ADDR_VAR 0 11
38085: PUSH
38086: LD_VAR 0 14
38090: PUSH
38091: LD_INT 1
38093: ARRAY
38094: PUSH
38095: LD_INT 2
38097: ARRAY
38098: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
38099: LD_ADDR_VAR 0 12
38103: PUSH
38104: LD_VAR 0 14
38108: PUSH
38109: LD_INT 1
38111: ARRAY
38112: PUSH
38113: LD_INT 3
38115: ARRAY
38116: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
38117: LD_VAR 0 11
38121: PPUSH
38122: LD_VAR 0 12
38126: PPUSH
38127: CALL_OW 351
38131: NOT
38132: IFTRUE 38151
38134: PUSH
38135: LD_VAR 0 11
38139: PPUSH
38140: LD_VAR 0 12
38144: PPUSH
38145: CALL_OW 554
38149: NOT
38150: OR
38151: IFFALSE 38185
// begin task := Delete ( task , 1 ) ;
38153: LD_ADDR_VAR 0 14
38157: PUSH
38158: LD_VAR 0 14
38162: PPUSH
38163: LD_INT 1
38165: PPUSH
38166: CALL_OW 3
38170: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
38171: LD_VAR 0 1
38175: PPUSH
38176: LD_VAR 0 14
38180: PPUSH
38181: CALL_OW 446
// end ; until not HasTask ( flame ) ;
38185: LD_VAR 0 1
38189: PPUSH
38190: CALL_OW 314
38194: NOT
38195: IFFALSE 38030
// end ;
38197: LD_VAR 0 5
38201: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
38202: LD_EXP 109
38206: NOT
38207: IFFALSE 38257
38209: GO 38211
38211: DISABLE
// begin initHack := true ;
38212: LD_ADDR_EXP 109
38216: PUSH
38217: LD_INT 1
38219: ST_TO_ADDR
// hackTanks := [ ] ;
38220: LD_ADDR_EXP 110
38224: PUSH
38225: EMPTY
38226: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
38227: LD_ADDR_EXP 111
38231: PUSH
38232: EMPTY
38233: ST_TO_ADDR
// hackLimit := 3 ;
38234: LD_ADDR_EXP 112
38238: PUSH
38239: LD_INT 3
38241: ST_TO_ADDR
// hackDist := 12 ;
38242: LD_ADDR_EXP 113
38246: PUSH
38247: LD_INT 12
38249: ST_TO_ADDR
// hackCounter := [ ] ;
38250: LD_ADDR_EXP 114
38254: PUSH
38255: EMPTY
38256: ST_TO_ADDR
// end ;
38257: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
38258: LD_EXP 109
38262: IFFALSE 38280
38264: PUSH
38265: LD_INT 34
38267: PUSH
38268: LD_INT 99
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: PPUSH
38275: CALL_OW 69
38279: AND
38280: IFFALSE 38533
38282: GO 38284
38284: DISABLE
38285: LD_INT 0
38287: PPUSH
38288: PPUSH
// begin enable ;
38289: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38290: LD_ADDR_VAR 0 1
38294: PUSH
38295: LD_INT 34
38297: PUSH
38298: LD_INT 99
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: PPUSH
38305: CALL_OW 69
38309: PUSH
38310: FOR_IN
38311: IFFALSE 38531
// begin if not i in hackTanks then
38313: LD_VAR 0 1
38317: PUSH
38318: LD_EXP 110
38322: IN
38323: NOT
38324: IFFALSE 38407
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38326: LD_ADDR_EXP 110
38330: PUSH
38331: LD_EXP 110
38335: PPUSH
38336: LD_EXP 110
38340: PUSH
38341: LD_INT 1
38343: PLUS
38344: PPUSH
38345: LD_VAR 0 1
38349: PPUSH
38350: CALL_OW 1
38354: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38355: LD_ADDR_EXP 111
38359: PUSH
38360: LD_EXP 111
38364: PPUSH
38365: LD_EXP 111
38369: PUSH
38370: LD_INT 1
38372: PLUS
38373: PPUSH
38374: EMPTY
38375: PPUSH
38376: CALL_OW 1
38380: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38381: LD_ADDR_EXP 114
38385: PUSH
38386: LD_EXP 114
38390: PPUSH
38391: LD_EXP 114
38395: PUSH
38396: LD_INT 1
38398: PLUS
38399: PPUSH
38400: EMPTY
38401: PPUSH
38402: CALL_OW 1
38406: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38407: LD_VAR 0 1
38411: PPUSH
38412: CALL_OW 302
38416: NOT
38417: IFFALSE 38430
// begin HackUnlinkAll ( i ) ;
38419: LD_VAR 0 1
38423: PPUSH
38424: CALL 38536 0 1
// continue ;
38428: GO 38310
// end ; HackCheckCapturedStatus ( i ) ;
38430: LD_VAR 0 1
38434: PPUSH
38435: CALL 38981 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38439: LD_ADDR_VAR 0 2
38443: PUSH
38444: LD_INT 81
38446: PUSH
38447: LD_VAR 0 1
38451: PPUSH
38452: CALL_OW 255
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: LD_INT 33
38463: PUSH
38464: LD_INT 3
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 91
38473: PUSH
38474: LD_VAR 0 1
38478: PUSH
38479: LD_EXP 113
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 50
38491: PUSH
38492: EMPTY
38493: LIST
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: PPUSH
38501: CALL_OW 69
38505: ST_TO_ADDR
// if not tmp then
38506: LD_VAR 0 2
38510: NOT
38511: IFFALSE 38515
// continue ;
38513: GO 38310
// HackLink ( i , tmp ) ;
38515: LD_VAR 0 1
38519: PPUSH
38520: LD_VAR 0 2
38524: PPUSH
38525: CALL 38672 0 2
// end ;
38529: GO 38310
38531: POP
38532: POP
// end ;
38533: PPOPN 2
38535: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38536: LD_INT 0
38538: PPUSH
38539: PPUSH
38540: PPUSH
// if not hack in hackTanks then
38541: LD_VAR 0 1
38545: PUSH
38546: LD_EXP 110
38550: IN
38551: NOT
38552: IFFALSE 38556
// exit ;
38554: GO 38667
// index := GetElementIndex ( hackTanks , hack ) ;
38556: LD_ADDR_VAR 0 4
38560: PUSH
38561: LD_EXP 110
38565: PPUSH
38566: LD_VAR 0 1
38570: PPUSH
38571: CALL 46334 0 2
38575: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38576: LD_EXP 111
38580: PUSH
38581: LD_VAR 0 4
38585: ARRAY
38586: IFFALSE 38667
// begin for i in hackTanksCaptured [ index ] do
38588: LD_ADDR_VAR 0 3
38592: PUSH
38593: LD_EXP 111
38597: PUSH
38598: LD_VAR 0 4
38602: ARRAY
38603: PUSH
38604: FOR_IN
38605: IFFALSE 38631
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38607: LD_VAR 0 3
38611: PUSH
38612: LD_INT 1
38614: ARRAY
38615: PPUSH
38616: LD_VAR 0 3
38620: PUSH
38621: LD_INT 2
38623: ARRAY
38624: PPUSH
38625: CALL_OW 235
38629: GO 38604
38631: POP
38632: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38633: LD_ADDR_EXP 111
38637: PUSH
38638: LD_EXP 111
38642: PPUSH
38643: LD_VAR 0 4
38647: PPUSH
38648: EMPTY
38649: PPUSH
38650: CALL_OW 1
38654: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38655: LD_VAR 0 1
38659: PPUSH
38660: LD_INT 0
38662: PPUSH
38663: CALL_OW 505
// end ; end ;
38667: LD_VAR 0 2
38671: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38672: LD_INT 0
38674: PPUSH
38675: PPUSH
38676: PPUSH
// if not hack in hackTanks or not vehicles then
38677: LD_VAR 0 1
38681: PUSH
38682: LD_EXP 110
38686: IN
38687: NOT
38688: IFTRUE 38697
38690: PUSH
38691: LD_VAR 0 2
38695: NOT
38696: OR
38697: IFFALSE 38701
// exit ;
38699: GO 38976
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38701: LD_ADDR_VAR 0 2
38705: PUSH
38706: LD_VAR 0 1
38710: PPUSH
38711: LD_VAR 0 2
38715: PPUSH
38716: LD_INT 1
38718: PPUSH
38719: LD_INT 1
38721: PPUSH
38722: CALL 46986 0 4
38726: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38727: LD_ADDR_VAR 0 5
38731: PUSH
38732: LD_EXP 110
38736: PPUSH
38737: LD_VAR 0 1
38741: PPUSH
38742: CALL 46334 0 2
38746: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38747: LD_EXP 111
38751: PUSH
38752: LD_VAR 0 5
38756: ARRAY
38757: PUSH
38758: LD_EXP 112
38762: LESS
38763: IFFALSE 38952
// begin for i := 1 to vehicles do
38765: LD_ADDR_VAR 0 4
38769: PUSH
38770: DOUBLE
38771: LD_INT 1
38773: DEC
38774: ST_TO_ADDR
38775: LD_VAR 0 2
38779: PUSH
38780: FOR_TO
38781: IFFALSE 38950
// begin if hackTanksCaptured [ index ] = hackLimit then
38783: LD_EXP 111
38787: PUSH
38788: LD_VAR 0 5
38792: ARRAY
38793: PUSH
38794: LD_EXP 112
38798: EQUAL
38799: IFFALSE 38803
// break ;
38801: GO 38950
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38803: LD_ADDR_EXP 114
38807: PUSH
38808: LD_EXP 114
38812: PPUSH
38813: LD_VAR 0 5
38817: PPUSH
38818: LD_EXP 114
38822: PUSH
38823: LD_VAR 0 5
38827: ARRAY
38828: PUSH
38829: LD_INT 1
38831: PLUS
38832: PPUSH
38833: CALL_OW 1
38837: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38838: LD_ADDR_EXP 111
38842: PUSH
38843: LD_EXP 111
38847: PPUSH
38848: LD_VAR 0 5
38852: PUSH
38853: LD_EXP 111
38857: PUSH
38858: LD_VAR 0 5
38862: ARRAY
38863: PUSH
38864: LD_INT 1
38866: PLUS
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PPUSH
38872: LD_VAR 0 2
38876: PUSH
38877: LD_VAR 0 4
38881: ARRAY
38882: PUSH
38883: LD_VAR 0 2
38887: PUSH
38888: LD_VAR 0 4
38892: ARRAY
38893: PPUSH
38894: CALL_OW 255
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PPUSH
38903: CALL 46551 0 3
38907: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38908: LD_VAR 0 2
38912: PUSH
38913: LD_VAR 0 4
38917: ARRAY
38918: PPUSH
38919: LD_VAR 0 1
38923: PPUSH
38924: CALL_OW 255
38928: PPUSH
38929: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38933: LD_VAR 0 2
38937: PUSH
38938: LD_VAR 0 4
38942: ARRAY
38943: PPUSH
38944: CALL_OW 141
// end ;
38948: GO 38780
38950: POP
38951: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38952: LD_VAR 0 1
38956: PPUSH
38957: LD_EXP 111
38961: PUSH
38962: LD_VAR 0 5
38966: ARRAY
38967: PUSH
38968: LD_INT 0
38970: PLUS
38971: PPUSH
38972: CALL_OW 505
// end ;
38976: LD_VAR 0 3
38980: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38981: LD_INT 0
38983: PPUSH
38984: PPUSH
38985: PPUSH
38986: PPUSH
// if not hack in hackTanks then
38987: LD_VAR 0 1
38991: PUSH
38992: LD_EXP 110
38996: IN
38997: NOT
38998: IFFALSE 39002
// exit ;
39000: GO 39246
// index := GetElementIndex ( hackTanks , hack ) ;
39002: LD_ADDR_VAR 0 4
39006: PUSH
39007: LD_EXP 110
39011: PPUSH
39012: LD_VAR 0 1
39016: PPUSH
39017: CALL 46334 0 2
39021: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
39022: LD_ADDR_VAR 0 3
39026: PUSH
39027: DOUBLE
39028: LD_EXP 111
39032: PUSH
39033: LD_VAR 0 4
39037: ARRAY
39038: INC
39039: ST_TO_ADDR
39040: LD_INT 1
39042: PUSH
39043: FOR_DOWNTO
39044: IFFALSE 39220
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
39046: LD_ADDR_VAR 0 5
39050: PUSH
39051: LD_EXP 111
39055: PUSH
39056: LD_VAR 0 4
39060: ARRAY
39061: PUSH
39062: LD_VAR 0 3
39066: ARRAY
39067: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
39068: LD_VAR 0 5
39072: PUSH
39073: LD_INT 1
39075: ARRAY
39076: PPUSH
39077: CALL_OW 302
39081: NOT
39082: IFTRUE 39110
39084: PUSH
39085: LD_VAR 0 5
39089: PUSH
39090: LD_INT 1
39092: ARRAY
39093: PPUSH
39094: CALL_OW 255
39098: PUSH
39099: LD_VAR 0 1
39103: PPUSH
39104: CALL_OW 255
39108: NONEQUAL
39109: OR
39110: IFFALSE 39218
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
39112: LD_VAR 0 5
39116: PUSH
39117: LD_INT 1
39119: ARRAY
39120: PPUSH
39121: CALL_OW 305
39125: IFFALSE 39153
39127: PUSH
39128: LD_VAR 0 5
39132: PUSH
39133: LD_INT 1
39135: ARRAY
39136: PPUSH
39137: CALL_OW 255
39141: PUSH
39142: LD_VAR 0 1
39146: PPUSH
39147: CALL_OW 255
39151: EQUAL
39152: AND
39153: IFFALSE 39177
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
39155: LD_VAR 0 5
39159: PUSH
39160: LD_INT 1
39162: ARRAY
39163: PPUSH
39164: LD_VAR 0 5
39168: PUSH
39169: LD_INT 2
39171: ARRAY
39172: PPUSH
39173: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
39177: LD_ADDR_EXP 111
39181: PUSH
39182: LD_EXP 111
39186: PPUSH
39187: LD_VAR 0 4
39191: PPUSH
39192: LD_EXP 111
39196: PUSH
39197: LD_VAR 0 4
39201: ARRAY
39202: PPUSH
39203: LD_VAR 0 3
39207: PPUSH
39208: CALL_OW 3
39212: PPUSH
39213: CALL_OW 1
39217: ST_TO_ADDR
// end ; end ;
39218: GO 39043
39220: POP
39221: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39222: LD_VAR 0 1
39226: PPUSH
39227: LD_EXP 111
39231: PUSH
39232: LD_VAR 0 4
39236: ARRAY
39237: PUSH
39238: LD_INT 0
39240: PLUS
39241: PPUSH
39242: CALL_OW 505
// end ;
39246: LD_VAR 0 2
39250: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
39251: LD_INT 0
39253: PPUSH
39254: PPUSH
39255: PPUSH
39256: PPUSH
// if not hack in hackTanks then
39257: LD_VAR 0 1
39261: PUSH
39262: LD_EXP 110
39266: IN
39267: NOT
39268: IFFALSE 39272
// exit ;
39270: GO 39357
// index := GetElementIndex ( hackTanks , hack ) ;
39272: LD_ADDR_VAR 0 5
39276: PUSH
39277: LD_EXP 110
39281: PPUSH
39282: LD_VAR 0 1
39286: PPUSH
39287: CALL 46334 0 2
39291: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39292: LD_ADDR_VAR 0 4
39296: PUSH
39297: DOUBLE
39298: LD_INT 1
39300: DEC
39301: ST_TO_ADDR
39302: LD_EXP 111
39306: PUSH
39307: LD_VAR 0 5
39311: ARRAY
39312: PUSH
39313: FOR_TO
39314: IFFALSE 39355
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39316: LD_EXP 111
39320: PUSH
39321: LD_VAR 0 5
39325: ARRAY
39326: PUSH
39327: LD_VAR 0 4
39331: ARRAY
39332: PUSH
39333: LD_INT 1
39335: ARRAY
39336: PUSH
39337: LD_VAR 0 2
39341: EQUAL
39342: IFFALSE 39353
// KillUnit ( vehicle ) ;
39344: LD_VAR 0 2
39348: PPUSH
39349: CALL_OW 66
39353: GO 39313
39355: POP
39356: POP
// end ;
39357: LD_VAR 0 3
39361: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
39362: LD_EXP 115
39366: NOT
39367: IFFALSE 39402
39369: GO 39371
39371: DISABLE
// begin initMiner := true ;
39372: LD_ADDR_EXP 115
39376: PUSH
39377: LD_INT 1
39379: ST_TO_ADDR
// minersList := [ ] ;
39380: LD_ADDR_EXP 116
39384: PUSH
39385: EMPTY
39386: ST_TO_ADDR
// minerMinesList := [ ] ;
39387: LD_ADDR_EXP 117
39391: PUSH
39392: EMPTY
39393: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
39394: LD_ADDR_EXP 118
39398: PUSH
39399: LD_INT 5
39401: ST_TO_ADDR
// end ;
39402: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
39403: LD_EXP 115
39407: IFFALSE 39425
39409: PUSH
39410: LD_INT 34
39412: PUSH
39413: LD_INT 81
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PPUSH
39420: CALL_OW 69
39424: AND
39425: IFFALSE 39888
39427: GO 39429
39429: DISABLE
39430: LD_INT 0
39432: PPUSH
39433: PPUSH
39434: PPUSH
39435: PPUSH
// begin enable ;
39436: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39437: LD_ADDR_VAR 0 1
39441: PUSH
39442: LD_INT 34
39444: PUSH
39445: LD_INT 81
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PPUSH
39452: CALL_OW 69
39456: PUSH
39457: FOR_IN
39458: IFFALSE 39530
// begin if not i in minersList then
39460: LD_VAR 0 1
39464: PUSH
39465: LD_EXP 116
39469: IN
39470: NOT
39471: IFFALSE 39528
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39473: LD_ADDR_EXP 116
39477: PUSH
39478: LD_EXP 116
39482: PPUSH
39483: LD_EXP 116
39487: PUSH
39488: LD_INT 1
39490: PLUS
39491: PPUSH
39492: LD_VAR 0 1
39496: PPUSH
39497: CALL_OW 1
39501: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39502: LD_ADDR_EXP 117
39506: PUSH
39507: LD_EXP 117
39511: PPUSH
39512: LD_EXP 117
39516: PUSH
39517: LD_INT 1
39519: PLUS
39520: PPUSH
39521: EMPTY
39522: PPUSH
39523: CALL_OW 1
39527: ST_TO_ADDR
// end end ;
39528: GO 39457
39530: POP
39531: POP
// for i := minerMinesList downto 1 do
39532: LD_ADDR_VAR 0 1
39536: PUSH
39537: DOUBLE
39538: LD_EXP 117
39542: INC
39543: ST_TO_ADDR
39544: LD_INT 1
39546: PUSH
39547: FOR_DOWNTO
39548: IFFALSE 39886
// begin if IsLive ( minersList [ i ] ) then
39550: LD_EXP 116
39554: PUSH
39555: LD_VAR 0 1
39559: ARRAY
39560: PPUSH
39561: CALL_OW 300
39565: IFFALSE 39593
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39567: LD_EXP 116
39571: PUSH
39572: LD_VAR 0 1
39576: ARRAY
39577: PPUSH
39578: LD_EXP 117
39582: PUSH
39583: LD_VAR 0 1
39587: ARRAY
39588: PPUSH
39589: CALL_OW 505
// if not minerMinesList [ i ] then
39593: LD_EXP 117
39597: PUSH
39598: LD_VAR 0 1
39602: ARRAY
39603: NOT
39604: IFFALSE 39608
// continue ;
39606: GO 39547
// for j := minerMinesList [ i ] downto 1 do
39608: LD_ADDR_VAR 0 2
39612: PUSH
39613: DOUBLE
39614: LD_EXP 117
39618: PUSH
39619: LD_VAR 0 1
39623: ARRAY
39624: INC
39625: ST_TO_ADDR
39626: LD_INT 1
39628: PUSH
39629: FOR_DOWNTO
39630: IFFALSE 39882
// begin side := GetSide ( minersList [ i ] ) ;
39632: LD_ADDR_VAR 0 3
39636: PUSH
39637: LD_EXP 116
39641: PUSH
39642: LD_VAR 0 1
39646: ARRAY
39647: PPUSH
39648: CALL_OW 255
39652: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39653: LD_ADDR_VAR 0 4
39657: PUSH
39658: LD_EXP 117
39662: PUSH
39663: LD_VAR 0 1
39667: ARRAY
39668: PUSH
39669: LD_VAR 0 2
39673: ARRAY
39674: PUSH
39675: LD_INT 1
39677: ARRAY
39678: PPUSH
39679: LD_EXP 117
39683: PUSH
39684: LD_VAR 0 1
39688: ARRAY
39689: PUSH
39690: LD_VAR 0 2
39694: ARRAY
39695: PUSH
39696: LD_INT 2
39698: ARRAY
39699: PPUSH
39700: CALL_OW 428
39704: ST_TO_ADDR
// if not tmp then
39705: LD_VAR 0 4
39709: NOT
39710: IFFALSE 39714
// continue ;
39712: GO 39629
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39714: LD_VAR 0 4
39718: PUSH
39719: LD_INT 81
39721: PUSH
39722: LD_VAR 0 3
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PPUSH
39731: CALL_OW 69
39735: IN
39736: IFFALSE 39786
39738: PUSH
39739: LD_EXP 117
39743: PUSH
39744: LD_VAR 0 1
39748: ARRAY
39749: PUSH
39750: LD_VAR 0 2
39754: ARRAY
39755: PUSH
39756: LD_INT 1
39758: ARRAY
39759: PPUSH
39760: LD_EXP 117
39764: PUSH
39765: LD_VAR 0 1
39769: ARRAY
39770: PUSH
39771: LD_VAR 0 2
39775: ARRAY
39776: PUSH
39777: LD_INT 2
39779: ARRAY
39780: PPUSH
39781: CALL_OW 458
39785: AND
39786: IFFALSE 39880
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39788: LD_EXP 117
39792: PUSH
39793: LD_VAR 0 1
39797: ARRAY
39798: PUSH
39799: LD_VAR 0 2
39803: ARRAY
39804: PUSH
39805: LD_INT 1
39807: ARRAY
39808: PPUSH
39809: LD_EXP 117
39813: PUSH
39814: LD_VAR 0 1
39818: ARRAY
39819: PUSH
39820: LD_VAR 0 2
39824: ARRAY
39825: PUSH
39826: LD_INT 2
39828: ARRAY
39829: PPUSH
39830: LD_VAR 0 3
39834: PPUSH
39835: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39839: LD_ADDR_EXP 117
39843: PUSH
39844: LD_EXP 117
39848: PPUSH
39849: LD_VAR 0 1
39853: PPUSH
39854: LD_EXP 117
39858: PUSH
39859: LD_VAR 0 1
39863: ARRAY
39864: PPUSH
39865: LD_VAR 0 2
39869: PPUSH
39870: CALL_OW 3
39874: PPUSH
39875: CALL_OW 1
39879: ST_TO_ADDR
// end ; end ;
39880: GO 39629
39882: POP
39883: POP
// end ;
39884: GO 39547
39886: POP
39887: POP
// end ;
39888: PPOPN 4
39890: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
39891: LD_INT 0
39893: PPUSH
39894: PPUSH
// result := false ;
39895: LD_ADDR_VAR 0 4
39899: PUSH
39900: LD_INT 0
39902: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39903: LD_VAR 0 1
39907: PPUSH
39908: CALL_OW 264
39912: PUSH
39913: LD_INT 81
39915: EQUAL
39916: NOT
39917: IFFALSE 39921
// exit ;
39919: GO 40165
// index := GetElementIndex ( minersList , unit ) ;
39921: LD_ADDR_VAR 0 5
39925: PUSH
39926: LD_EXP 116
39930: PPUSH
39931: LD_VAR 0 1
39935: PPUSH
39936: CALL 46334 0 2
39940: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39941: LD_EXP 117
39945: PUSH
39946: LD_VAR 0 5
39950: ARRAY
39951: PUSH
39952: LD_EXP 118
39956: GREATEREQUAL
39957: IFFALSE 39961
// exit ;
39959: GO 40165
// ComMoveXY ( unit , x , y ) ;
39961: LD_VAR 0 1
39965: PPUSH
39966: LD_VAR 0 2
39970: PPUSH
39971: LD_VAR 0 3
39975: PPUSH
39976: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39980: LD_INT 35
39982: PPUSH
39983: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39987: LD_VAR 0 1
39991: PPUSH
39992: LD_VAR 0 2
39996: PPUSH
39997: LD_VAR 0 3
40001: PPUSH
40002: CALL 78380 0 3
40006: NOT
40007: IFFALSE 40020
40009: PUSH
40010: LD_VAR 0 1
40014: PPUSH
40015: CALL_OW 314
40019: AND
40020: IFFALSE 40024
// exit ;
40022: GO 40165
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
40024: LD_VAR 0 2
40028: PPUSH
40029: LD_VAR 0 3
40033: PPUSH
40034: CALL_OW 428
40038: PUSH
40039: LD_VAR 0 1
40043: EQUAL
40044: IFFALSE 40058
40046: PUSH
40047: LD_VAR 0 1
40051: PPUSH
40052: CALL_OW 314
40056: NOT
40057: AND
40058: IFFALSE 39980
// PlaySoundXY ( x , y , PlantMine ) ;
40060: LD_VAR 0 2
40064: PPUSH
40065: LD_VAR 0 3
40069: PPUSH
40070: LD_STRING PlantMine
40072: PPUSH
40073: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
40077: LD_VAR 0 2
40081: PPUSH
40082: LD_VAR 0 3
40086: PPUSH
40087: LD_VAR 0 1
40091: PPUSH
40092: CALL_OW 255
40096: PPUSH
40097: LD_INT 0
40099: PPUSH
40100: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
40104: LD_ADDR_EXP 117
40108: PUSH
40109: LD_EXP 117
40113: PPUSH
40114: LD_VAR 0 5
40118: PUSH
40119: LD_EXP 117
40123: PUSH
40124: LD_VAR 0 5
40128: ARRAY
40129: PUSH
40130: LD_INT 1
40132: PLUS
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PPUSH
40138: LD_VAR 0 2
40142: PUSH
40143: LD_VAR 0 3
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PPUSH
40152: CALL 46551 0 3
40156: ST_TO_ADDR
// result := true ;
40157: LD_ADDR_VAR 0 4
40161: PUSH
40162: LD_INT 1
40164: ST_TO_ADDR
// end ;
40165: LD_VAR 0 4
40169: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
40170: LD_INT 0
40172: PPUSH
40173: PPUSH
40174: PPUSH
// if not unit in minersList then
40175: LD_VAR 0 1
40179: PUSH
40180: LD_EXP 116
40184: IN
40185: NOT
40186: IFFALSE 40190
// exit ;
40188: GO 40584
// index := GetElementIndex ( minersList , unit ) ;
40190: LD_ADDR_VAR 0 6
40194: PUSH
40195: LD_EXP 116
40199: PPUSH
40200: LD_VAR 0 1
40204: PPUSH
40205: CALL 46334 0 2
40209: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
40210: LD_ADDR_VAR 0 5
40214: PUSH
40215: DOUBLE
40216: LD_EXP 117
40220: PUSH
40221: LD_VAR 0 6
40225: ARRAY
40226: INC
40227: ST_TO_ADDR
40228: LD_INT 1
40230: PUSH
40231: FOR_DOWNTO
40232: IFFALSE 40395
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
40234: LD_EXP 117
40238: PUSH
40239: LD_VAR 0 6
40243: ARRAY
40244: PUSH
40245: LD_VAR 0 5
40249: ARRAY
40250: PUSH
40251: LD_INT 1
40253: ARRAY
40254: PUSH
40255: LD_VAR 0 2
40259: EQUAL
40260: IFFALSE 40290
40262: PUSH
40263: LD_EXP 117
40267: PUSH
40268: LD_VAR 0 6
40272: ARRAY
40273: PUSH
40274: LD_VAR 0 5
40278: ARRAY
40279: PUSH
40280: LD_INT 2
40282: ARRAY
40283: PUSH
40284: LD_VAR 0 3
40288: EQUAL
40289: AND
40290: IFFALSE 40393
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40292: LD_EXP 117
40296: PUSH
40297: LD_VAR 0 6
40301: ARRAY
40302: PUSH
40303: LD_VAR 0 5
40307: ARRAY
40308: PUSH
40309: LD_INT 1
40311: ARRAY
40312: PPUSH
40313: LD_EXP 117
40317: PUSH
40318: LD_VAR 0 6
40322: ARRAY
40323: PUSH
40324: LD_VAR 0 5
40328: ARRAY
40329: PUSH
40330: LD_INT 2
40332: ARRAY
40333: PPUSH
40334: LD_VAR 0 1
40338: PPUSH
40339: CALL_OW 255
40343: PPUSH
40344: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40348: LD_ADDR_EXP 117
40352: PUSH
40353: LD_EXP 117
40357: PPUSH
40358: LD_VAR 0 6
40362: PPUSH
40363: LD_EXP 117
40367: PUSH
40368: LD_VAR 0 6
40372: ARRAY
40373: PPUSH
40374: LD_VAR 0 5
40378: PPUSH
40379: CALL_OW 3
40383: PPUSH
40384: CALL_OW 1
40388: ST_TO_ADDR
// exit ;
40389: POP
40390: POP
40391: GO 40584
// end ; end ;
40393: GO 40231
40395: POP
40396: POP
// for i := minerMinesList [ index ] downto 1 do
40397: LD_ADDR_VAR 0 5
40401: PUSH
40402: DOUBLE
40403: LD_EXP 117
40407: PUSH
40408: LD_VAR 0 6
40412: ARRAY
40413: INC
40414: ST_TO_ADDR
40415: LD_INT 1
40417: PUSH
40418: FOR_DOWNTO
40419: IFFALSE 40582
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40421: LD_EXP 117
40425: PUSH
40426: LD_VAR 0 6
40430: ARRAY
40431: PUSH
40432: LD_VAR 0 5
40436: ARRAY
40437: PUSH
40438: LD_INT 1
40440: ARRAY
40441: PPUSH
40442: LD_EXP 117
40446: PUSH
40447: LD_VAR 0 6
40451: ARRAY
40452: PUSH
40453: LD_VAR 0 5
40457: ARRAY
40458: PUSH
40459: LD_INT 2
40461: ARRAY
40462: PPUSH
40463: LD_VAR 0 2
40467: PPUSH
40468: LD_VAR 0 3
40472: PPUSH
40473: CALL_OW 298
40477: PUSH
40478: LD_INT 6
40480: LESS
40481: IFFALSE 40580
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40483: LD_EXP 117
40487: PUSH
40488: LD_VAR 0 6
40492: ARRAY
40493: PUSH
40494: LD_VAR 0 5
40498: ARRAY
40499: PUSH
40500: LD_INT 1
40502: ARRAY
40503: PPUSH
40504: LD_EXP 117
40508: PUSH
40509: LD_VAR 0 6
40513: ARRAY
40514: PUSH
40515: LD_VAR 0 5
40519: ARRAY
40520: PUSH
40521: LD_INT 2
40523: ARRAY
40524: PPUSH
40525: LD_VAR 0 1
40529: PPUSH
40530: CALL_OW 255
40534: PPUSH
40535: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40539: LD_ADDR_EXP 117
40543: PUSH
40544: LD_EXP 117
40548: PPUSH
40549: LD_VAR 0 6
40553: PPUSH
40554: LD_EXP 117
40558: PUSH
40559: LD_VAR 0 6
40563: ARRAY
40564: PPUSH
40565: LD_VAR 0 5
40569: PPUSH
40570: CALL_OW 3
40574: PPUSH
40575: CALL_OW 1
40579: ST_TO_ADDR
// end ; end ;
40580: GO 40418
40582: POP
40583: POP
// end ;
40584: LD_VAR 0 4
40588: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40589: LD_INT 0
40591: PPUSH
40592: PPUSH
40593: PPUSH
40594: PPUSH
40595: PPUSH
40596: PPUSH
40597: PPUSH
40598: PPUSH
40599: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40600: LD_VAR 0 1
40604: PPUSH
40605: CALL_OW 264
40609: PUSH
40610: LD_INT 81
40612: EQUAL
40613: NOT
40614: IFTRUE 40629
40616: PUSH
40617: LD_VAR 0 1
40621: PUSH
40622: LD_EXP 116
40626: IN
40627: NOT
40628: OR
40629: IFFALSE 40633
// exit ;
40631: GO 40959
// index := GetElementIndex ( minersList , unit ) ;
40633: LD_ADDR_VAR 0 6
40637: PUSH
40638: LD_EXP 116
40642: PPUSH
40643: LD_VAR 0 1
40647: PPUSH
40648: CALL 46334 0 2
40652: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40653: LD_ADDR_VAR 0 8
40657: PUSH
40658: LD_EXP 118
40662: PUSH
40663: LD_EXP 117
40667: PUSH
40668: LD_VAR 0 6
40672: ARRAY
40673: MINUS
40674: ST_TO_ADDR
// if not minesFreeAmount then
40675: LD_VAR 0 8
40679: NOT
40680: IFFALSE 40684
// exit ;
40682: GO 40959
// tmp := [ ] ;
40684: LD_ADDR_VAR 0 7
40688: PUSH
40689: EMPTY
40690: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40691: LD_ADDR_VAR 0 5
40695: PUSH
40696: DOUBLE
40697: LD_INT 1
40699: DEC
40700: ST_TO_ADDR
40701: LD_VAR 0 8
40705: PUSH
40706: FOR_TO
40707: IFFALSE 40906
// begin _d := rand ( 0 , 5 ) ;
40709: LD_ADDR_VAR 0 11
40713: PUSH
40714: LD_INT 0
40716: PPUSH
40717: LD_INT 5
40719: PPUSH
40720: CALL_OW 12
40724: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40725: LD_ADDR_VAR 0 12
40729: PUSH
40730: LD_INT 2
40732: PPUSH
40733: LD_INT 6
40735: PPUSH
40736: CALL_OW 12
40740: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40741: LD_ADDR_VAR 0 9
40745: PUSH
40746: LD_VAR 0 2
40750: PPUSH
40751: LD_VAR 0 11
40755: PPUSH
40756: LD_VAR 0 12
40760: PPUSH
40761: CALL_OW 272
40765: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40766: LD_ADDR_VAR 0 10
40770: PUSH
40771: LD_VAR 0 3
40775: PPUSH
40776: LD_VAR 0 11
40780: PPUSH
40781: LD_VAR 0 12
40785: PPUSH
40786: CALL_OW 273
40790: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40791: LD_VAR 0 9
40795: PPUSH
40796: LD_VAR 0 10
40800: PPUSH
40801: CALL_OW 488
40805: IFFALSE 40829
40807: PUSH
40808: LD_VAR 0 9
40812: PUSH
40813: LD_VAR 0 10
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_VAR 0 7
40826: IN
40827: NOT
40828: AND
40829: IFFALSE 40848
40831: PUSH
40832: LD_VAR 0 9
40836: PPUSH
40837: LD_VAR 0 10
40841: PPUSH
40842: CALL_OW 458
40846: NOT
40847: AND
40848: IFFALSE 40890
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40850: LD_ADDR_VAR 0 7
40854: PUSH
40855: LD_VAR 0 7
40859: PPUSH
40860: LD_VAR 0 7
40864: PUSH
40865: LD_INT 1
40867: PLUS
40868: PPUSH
40869: LD_VAR 0 9
40873: PUSH
40874: LD_VAR 0 10
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PPUSH
40883: CALL_OW 1
40887: ST_TO_ADDR
40888: GO 40904
// i := i - 1 ;
40890: LD_ADDR_VAR 0 5
40894: PUSH
40895: LD_VAR 0 5
40899: PUSH
40900: LD_INT 1
40902: MINUS
40903: ST_TO_ADDR
// end ;
40904: GO 40706
40906: POP
40907: POP
// for i in tmp do
40908: LD_ADDR_VAR 0 5
40912: PUSH
40913: LD_VAR 0 7
40917: PUSH
40918: FOR_IN
40919: IFFALSE 40957
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40921: LD_VAR 0 1
40925: PPUSH
40926: LD_VAR 0 5
40930: PUSH
40931: LD_INT 1
40933: ARRAY
40934: PPUSH
40935: LD_VAR 0 5
40939: PUSH
40940: LD_INT 2
40942: ARRAY
40943: PPUSH
40944: CALL 39891 0 3
40948: NOT
40949: IFFALSE 40955
// exit ;
40951: POP
40952: POP
40953: GO 40959
40955: GO 40918
40957: POP
40958: POP
// end ;
40959: LD_VAR 0 4
40963: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
40964: LD_INT 0
40966: PPUSH
40967: PPUSH
40968: PPUSH
40969: PPUSH
40970: PPUSH
40971: PPUSH
40972: PPUSH
40973: PPUSH
40974: PPUSH
// if GetClass ( unit ) <> class_sniper then
40975: LD_VAR 0 1
40979: PPUSH
40980: CALL_OW 257
40984: PUSH
40985: LD_INT 5
40987: NONEQUAL
40988: IFFALSE 40992
// exit ;
40990: GO 41462
// dist := 8 ;
40992: LD_ADDR_VAR 0 5
40996: PUSH
40997: LD_INT 8
40999: ST_TO_ADDR
// viewRange := 12 ;
41000: LD_ADDR_VAR 0 8
41004: PUSH
41005: LD_INT 12
41007: ST_TO_ADDR
// side := GetSide ( unit ) ;
41008: LD_ADDR_VAR 0 6
41012: PUSH
41013: LD_VAR 0 1
41017: PPUSH
41018: CALL_OW 255
41022: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
41023: LD_INT 61
41025: PPUSH
41026: LD_VAR 0 6
41030: PPUSH
41031: CALL_OW 321
41035: PUSH
41036: LD_INT 2
41038: EQUAL
41039: IFFALSE 41049
// viewRange := 16 ;
41041: LD_ADDR_VAR 0 8
41045: PUSH
41046: LD_INT 16
41048: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
41049: LD_VAR 0 1
41053: PPUSH
41054: LD_VAR 0 2
41058: PPUSH
41059: LD_VAR 0 3
41063: PPUSH
41064: CALL_OW 297
41068: PUSH
41069: LD_VAR 0 5
41073: GREATER
41074: IFFALSE 41153
// begin ComMoveXY ( unit , x , y ) ;
41076: LD_VAR 0 1
41080: PPUSH
41081: LD_VAR 0 2
41085: PPUSH
41086: LD_VAR 0 3
41090: PPUSH
41091: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
41095: LD_INT 35
41097: PPUSH
41098: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
41102: LD_VAR 0 1
41106: PPUSH
41107: LD_VAR 0 2
41111: PPUSH
41112: LD_VAR 0 3
41116: PPUSH
41117: CALL 78380 0 3
41121: NOT
41122: IFFALSE 41126
// exit ;
41124: GO 41462
// until GetDistUnitXY ( unit , x , y ) < dist ;
41126: LD_VAR 0 1
41130: PPUSH
41131: LD_VAR 0 2
41135: PPUSH
41136: LD_VAR 0 3
41140: PPUSH
41141: CALL_OW 297
41145: PUSH
41146: LD_VAR 0 5
41150: LESS
41151: IFFALSE 41095
// end ; ComTurnXY ( unit , x , y ) ;
41153: LD_VAR 0 1
41157: PPUSH
41158: LD_VAR 0 2
41162: PPUSH
41163: LD_VAR 0 3
41167: PPUSH
41168: CALL_OW 118
// repeat if Multiplayer then
41172: LD_OWVAR 4
41176: IFFALSE 41187
// wait ( 35 ) else
41178: LD_INT 35
41180: PPUSH
41181: CALL_OW 67
41185: GO 41194
// wait ( 5 ) ;
41187: LD_INT 5
41189: PPUSH
41190: CALL_OW 67
// _d := GetDir ( unit ) ;
41194: LD_ADDR_VAR 0 11
41198: PUSH
41199: LD_VAR 0 1
41203: PPUSH
41204: CALL_OW 254
41208: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
41209: LD_ADDR_VAR 0 7
41213: PUSH
41214: LD_VAR 0 1
41218: PPUSH
41219: CALL_OW 250
41223: PPUSH
41224: LD_VAR 0 1
41228: PPUSH
41229: CALL_OW 251
41233: PPUSH
41234: LD_VAR 0 2
41238: PPUSH
41239: LD_VAR 0 3
41243: PPUSH
41244: CALL 81016 0 4
41248: ST_TO_ADDR
// until dir = _d ;
41249: LD_VAR 0 7
41253: PUSH
41254: LD_VAR 0 11
41258: EQUAL
41259: IFFALSE 41172
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
41261: LD_ADDR_VAR 0 9
41265: PUSH
41266: LD_VAR 0 1
41270: PPUSH
41271: CALL_OW 250
41275: PPUSH
41276: LD_VAR 0 7
41280: PPUSH
41281: LD_VAR 0 5
41285: PPUSH
41286: CALL_OW 272
41290: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
41291: LD_ADDR_VAR 0 10
41295: PUSH
41296: LD_VAR 0 1
41300: PPUSH
41301: CALL_OW 251
41305: PPUSH
41306: LD_VAR 0 7
41310: PPUSH
41311: LD_VAR 0 5
41315: PPUSH
41316: CALL_OW 273
41320: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41321: LD_VAR 0 9
41325: PPUSH
41326: LD_VAR 0 10
41330: PPUSH
41331: CALL_OW 488
41335: NOT
41336: IFFALSE 41340
// exit ;
41338: GO 41462
// ComAnimCustom ( unit , 1 ) ;
41340: LD_VAR 0 1
41344: PPUSH
41345: LD_INT 1
41347: PPUSH
41348: CALL_OW 592
// p := 0 ;
41352: LD_ADDR_VAR 0 12
41356: PUSH
41357: LD_INT 0
41359: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
41360: LD_VAR 0 9
41364: PPUSH
41365: LD_VAR 0 10
41369: PPUSH
41370: LD_VAR 0 6
41374: PPUSH
41375: LD_VAR 0 8
41379: PPUSH
41380: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
41384: LD_INT 35
41386: PPUSH
41387: CALL_OW 67
// p := Inc ( p ) ;
41391: LD_ADDR_VAR 0 12
41395: PUSH
41396: LD_VAR 0 12
41400: PPUSH
41401: CALL 80972 0 1
41405: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
41406: LD_VAR 0 12
41410: PUSH
41411: LD_INT 3
41413: EQUAL
41414: IFTRUE 41428
41416: PUSH
41417: LD_VAR 0 1
41421: PPUSH
41422: CALL_OW 302
41426: NOT
41427: OR
41428: IFTRUE 41441
41430: PUSH
41431: LD_VAR 0 1
41435: PPUSH
41436: CALL_OW 301
41440: OR
41441: IFFALSE 41384
// RemoveSeeing ( _x , _y , side ) ;
41443: LD_VAR 0 9
41447: PPUSH
41448: LD_VAR 0 10
41452: PPUSH
41453: LD_VAR 0 6
41457: PPUSH
41458: CALL_OW 331
// end ; end_of_file
41462: LD_VAR 0 4
41466: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41467: LD_INT 0
41469: PPUSH
41470: PPUSH
// if exist_mode then
41471: LD_VAR 0 2
41475: IFFALSE 41521
// begin unit := CreateCharacter ( prefix & ident ) ;
41477: LD_ADDR_VAR 0 5
41481: PUSH
41482: LD_VAR 0 3
41486: PUSH
41487: LD_VAR 0 1
41491: STR
41492: PPUSH
41493: CALL_OW 34
41497: ST_TO_ADDR
// if unit then
41498: LD_VAR 0 5
41502: IFFALSE 41519
// DeleteCharacters ( prefix & ident ) ;
41504: LD_VAR 0 3
41508: PUSH
41509: LD_VAR 0 1
41513: STR
41514: PPUSH
41515: CALL_OW 40
// end else
41519: GO 41536
// unit := NewCharacter ( ident ) ;
41521: LD_ADDR_VAR 0 5
41525: PUSH
41526: LD_VAR 0 1
41530: PPUSH
41531: CALL_OW 25
41535: ST_TO_ADDR
// result := unit ;
41536: LD_ADDR_VAR 0 4
41540: PUSH
41541: LD_VAR 0 5
41545: ST_TO_ADDR
// end ;
41546: LD_VAR 0 4
41550: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
41551: LD_INT 0
41553: PPUSH
41554: PPUSH
// if exist_mode then
41555: LD_VAR 0 2
41559: IFFALSE 41584
// unit := CreateCharacter ( prefix & ident ) else
41561: LD_ADDR_VAR 0 5
41565: PUSH
41566: LD_VAR 0 3
41570: PUSH
41571: LD_VAR 0 1
41575: STR
41576: PPUSH
41577: CALL_OW 34
41581: ST_TO_ADDR
41582: GO 41599
// unit := NewCharacter ( ident ) ;
41584: LD_ADDR_VAR 0 5
41588: PUSH
41589: LD_VAR 0 1
41593: PPUSH
41594: CALL_OW 25
41598: ST_TO_ADDR
// result := unit ;
41599: LD_ADDR_VAR 0 4
41603: PUSH
41604: LD_VAR 0 5
41608: ST_TO_ADDR
// end ;
41609: LD_VAR 0 4
41613: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41614: LD_INT 0
41616: PPUSH
41617: PPUSH
// if not side or not nation then
41618: LD_VAR 0 1
41622: NOT
41623: IFTRUE 41632
41625: PUSH
41626: LD_VAR 0 2
41630: NOT
41631: OR
41632: IFFALSE 41636
// exit ;
41634: GO 42406
// case nation of nation_american :
41636: LD_VAR 0 2
41640: PUSH
41641: LD_INT 1
41643: DOUBLE
41644: EQUAL
41645: IFTRUE 41649
41647: GO 41863
41649: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41650: LD_ADDR_VAR 0 4
41654: PUSH
41655: LD_INT 35
41657: PUSH
41658: LD_INT 45
41660: PUSH
41661: LD_INT 46
41663: PUSH
41664: LD_INT 47
41666: PUSH
41667: LD_INT 82
41669: PUSH
41670: LD_INT 83
41672: PUSH
41673: LD_INT 84
41675: PUSH
41676: LD_INT 85
41678: PUSH
41679: LD_INT 86
41681: PUSH
41682: LD_INT 1
41684: PUSH
41685: LD_INT 2
41687: PUSH
41688: LD_INT 6
41690: PUSH
41691: LD_INT 15
41693: PUSH
41694: LD_INT 16
41696: PUSH
41697: LD_INT 7
41699: PUSH
41700: LD_INT 12
41702: PUSH
41703: LD_INT 13
41705: PUSH
41706: LD_INT 10
41708: PUSH
41709: LD_INT 14
41711: PUSH
41712: LD_INT 20
41714: PUSH
41715: LD_INT 21
41717: PUSH
41718: LD_INT 22
41720: PUSH
41721: LD_INT 25
41723: PUSH
41724: LD_INT 32
41726: PUSH
41727: LD_INT 27
41729: PUSH
41730: LD_INT 36
41732: PUSH
41733: LD_INT 69
41735: PUSH
41736: LD_INT 39
41738: PUSH
41739: LD_INT 34
41741: PUSH
41742: LD_INT 40
41744: PUSH
41745: LD_INT 48
41747: PUSH
41748: LD_INT 49
41750: PUSH
41751: LD_INT 50
41753: PUSH
41754: LD_INT 51
41756: PUSH
41757: LD_INT 52
41759: PUSH
41760: LD_INT 53
41762: PUSH
41763: LD_INT 54
41765: PUSH
41766: LD_INT 55
41768: PUSH
41769: LD_INT 56
41771: PUSH
41772: LD_INT 57
41774: PUSH
41775: LD_INT 58
41777: PUSH
41778: LD_INT 59
41780: PUSH
41781: LD_INT 60
41783: PUSH
41784: LD_INT 61
41786: PUSH
41787: LD_INT 62
41789: PUSH
41790: LD_INT 80
41792: PUSH
41793: LD_INT 82
41795: PUSH
41796: LD_INT 83
41798: PUSH
41799: LD_INT 84
41801: PUSH
41802: LD_INT 85
41804: PUSH
41805: LD_INT 86
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: ST_TO_ADDR
41861: GO 42328
41863: LD_INT 2
41865: DOUBLE
41866: EQUAL
41867: IFTRUE 41871
41869: GO 42097
41871: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
41872: LD_ADDR_VAR 0 4
41876: PUSH
41877: LD_INT 35
41879: PUSH
41880: LD_INT 45
41882: PUSH
41883: LD_INT 46
41885: PUSH
41886: LD_INT 47
41888: PUSH
41889: LD_INT 82
41891: PUSH
41892: LD_INT 83
41894: PUSH
41895: LD_INT 84
41897: PUSH
41898: LD_INT 85
41900: PUSH
41901: LD_INT 87
41903: PUSH
41904: LD_INT 70
41906: PUSH
41907: LD_INT 1
41909: PUSH
41910: LD_INT 11
41912: PUSH
41913: LD_INT 3
41915: PUSH
41916: LD_INT 4
41918: PUSH
41919: LD_INT 5
41921: PUSH
41922: LD_INT 6
41924: PUSH
41925: LD_INT 15
41927: PUSH
41928: LD_INT 18
41930: PUSH
41931: LD_INT 7
41933: PUSH
41934: LD_INT 17
41936: PUSH
41937: LD_INT 8
41939: PUSH
41940: LD_INT 20
41942: PUSH
41943: LD_INT 21
41945: PUSH
41946: LD_INT 22
41948: PUSH
41949: LD_INT 72
41951: PUSH
41952: LD_INT 26
41954: PUSH
41955: LD_INT 69
41957: PUSH
41958: LD_INT 39
41960: PUSH
41961: LD_INT 40
41963: PUSH
41964: LD_INT 41
41966: PUSH
41967: LD_INT 42
41969: PUSH
41970: LD_INT 43
41972: PUSH
41973: LD_INT 48
41975: PUSH
41976: LD_INT 49
41978: PUSH
41979: LD_INT 50
41981: PUSH
41982: LD_INT 51
41984: PUSH
41985: LD_INT 52
41987: PUSH
41988: LD_INT 53
41990: PUSH
41991: LD_INT 54
41993: PUSH
41994: LD_INT 55
41996: PUSH
41997: LD_INT 56
41999: PUSH
42000: LD_INT 60
42002: PUSH
42003: LD_INT 61
42005: PUSH
42006: LD_INT 62
42008: PUSH
42009: LD_INT 66
42011: PUSH
42012: LD_INT 67
42014: PUSH
42015: LD_INT 68
42017: PUSH
42018: LD_INT 81
42020: PUSH
42021: LD_INT 82
42023: PUSH
42024: LD_INT 83
42026: PUSH
42027: LD_INT 84
42029: PUSH
42030: LD_INT 85
42032: PUSH
42033: LD_INT 87
42035: PUSH
42036: LD_INT 88
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: ST_TO_ADDR
42095: GO 42328
42097: LD_INT 3
42099: DOUBLE
42100: EQUAL
42101: IFTRUE 42105
42103: GO 42327
42105: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
42106: LD_ADDR_VAR 0 4
42110: PUSH
42111: LD_INT 46
42113: PUSH
42114: LD_INT 47
42116: PUSH
42117: LD_INT 1
42119: PUSH
42120: LD_INT 2
42122: PUSH
42123: LD_INT 82
42125: PUSH
42126: LD_INT 83
42128: PUSH
42129: LD_INT 84
42131: PUSH
42132: LD_INT 85
42134: PUSH
42135: LD_INT 86
42137: PUSH
42138: LD_INT 11
42140: PUSH
42141: LD_INT 9
42143: PUSH
42144: LD_INT 20
42146: PUSH
42147: LD_INT 19
42149: PUSH
42150: LD_INT 21
42152: PUSH
42153: LD_INT 24
42155: PUSH
42156: LD_INT 22
42158: PUSH
42159: LD_INT 25
42161: PUSH
42162: LD_INT 28
42164: PUSH
42165: LD_INT 29
42167: PUSH
42168: LD_INT 30
42170: PUSH
42171: LD_INT 31
42173: PUSH
42174: LD_INT 37
42176: PUSH
42177: LD_INT 38
42179: PUSH
42180: LD_INT 32
42182: PUSH
42183: LD_INT 27
42185: PUSH
42186: LD_INT 33
42188: PUSH
42189: LD_INT 69
42191: PUSH
42192: LD_INT 39
42194: PUSH
42195: LD_INT 34
42197: PUSH
42198: LD_INT 40
42200: PUSH
42201: LD_INT 71
42203: PUSH
42204: LD_INT 23
42206: PUSH
42207: LD_INT 44
42209: PUSH
42210: LD_INT 48
42212: PUSH
42213: LD_INT 49
42215: PUSH
42216: LD_INT 50
42218: PUSH
42219: LD_INT 51
42221: PUSH
42222: LD_INT 52
42224: PUSH
42225: LD_INT 53
42227: PUSH
42228: LD_INT 54
42230: PUSH
42231: LD_INT 55
42233: PUSH
42234: LD_INT 56
42236: PUSH
42237: LD_INT 57
42239: PUSH
42240: LD_INT 58
42242: PUSH
42243: LD_INT 59
42245: PUSH
42246: LD_INT 63
42248: PUSH
42249: LD_INT 64
42251: PUSH
42252: LD_INT 65
42254: PUSH
42255: LD_INT 82
42257: PUSH
42258: LD_INT 83
42260: PUSH
42261: LD_INT 84
42263: PUSH
42264: LD_INT 85
42266: PUSH
42267: LD_INT 86
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: ST_TO_ADDR
42325: GO 42328
42327: POP
// if state > - 1 and state < 3 then
42328: LD_VAR 0 3
42332: PUSH
42333: LD_INT 1
42335: NEG
42336: GREATER
42337: IFFALSE 42349
42339: PUSH
42340: LD_VAR 0 3
42344: PUSH
42345: LD_INT 3
42347: LESS
42348: AND
42349: IFFALSE 42406
// for i in result do
42351: LD_ADDR_VAR 0 5
42355: PUSH
42356: LD_VAR 0 4
42360: PUSH
42361: FOR_IN
42362: IFFALSE 42404
// if GetTech ( i , side ) <> state then
42364: LD_VAR 0 5
42368: PPUSH
42369: LD_VAR 0 1
42373: PPUSH
42374: CALL_OW 321
42378: PUSH
42379: LD_VAR 0 3
42383: NONEQUAL
42384: IFFALSE 42402
// result := result diff i ;
42386: LD_ADDR_VAR 0 4
42390: PUSH
42391: LD_VAR 0 4
42395: PUSH
42396: LD_VAR 0 5
42400: DIFF
42401: ST_TO_ADDR
42402: GO 42361
42404: POP
42405: POP
// end ;
42406: LD_VAR 0 4
42410: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
42411: LD_INT 0
42413: PPUSH
42414: PPUSH
42415: PPUSH
// result := true ;
42416: LD_ADDR_VAR 0 3
42420: PUSH
42421: LD_INT 1
42423: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
42424: LD_ADDR_VAR 0 5
42428: PUSH
42429: LD_VAR 0 2
42433: PPUSH
42434: CALL_OW 480
42438: ST_TO_ADDR
// if not tmp then
42439: LD_VAR 0 5
42443: NOT
42444: IFFALSE 42448
// exit ;
42446: GO 42497
// for i in tmp do
42448: LD_ADDR_VAR 0 4
42452: PUSH
42453: LD_VAR 0 5
42457: PUSH
42458: FOR_IN
42459: IFFALSE 42495
// if GetTech ( i , side ) <> state_researched then
42461: LD_VAR 0 4
42465: PPUSH
42466: LD_VAR 0 1
42470: PPUSH
42471: CALL_OW 321
42475: PUSH
42476: LD_INT 2
42478: NONEQUAL
42479: IFFALSE 42493
// begin result := false ;
42481: LD_ADDR_VAR 0 3
42485: PUSH
42486: LD_INT 0
42488: ST_TO_ADDR
// exit ;
42489: POP
42490: POP
42491: GO 42497
// end ;
42493: GO 42458
42495: POP
42496: POP
// end ;
42497: LD_VAR 0 3
42501: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42502: LD_INT 0
42504: PPUSH
42505: PPUSH
42506: PPUSH
42507: PPUSH
42508: PPUSH
42509: PPUSH
42510: PPUSH
42511: PPUSH
42512: PPUSH
42513: PPUSH
42514: PPUSH
42515: PPUSH
42516: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42517: LD_VAR 0 1
42521: NOT
42522: IFTRUE 42539
42524: PUSH
42525: LD_VAR 0 1
42529: PPUSH
42530: CALL_OW 257
42534: PUSH
42535: LD_INT 9
42537: NONEQUAL
42538: OR
42539: IFFALSE 42543
// exit ;
42541: GO 43122
// side := GetSide ( unit ) ;
42543: LD_ADDR_VAR 0 9
42547: PUSH
42548: LD_VAR 0 1
42552: PPUSH
42553: CALL_OW 255
42557: ST_TO_ADDR
// tech_space := tech_spacanom ;
42558: LD_ADDR_VAR 0 12
42562: PUSH
42563: LD_INT 29
42565: ST_TO_ADDR
// tech_time := tech_taurad ;
42566: LD_ADDR_VAR 0 13
42570: PUSH
42571: LD_INT 28
42573: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42574: LD_ADDR_VAR 0 11
42578: PUSH
42579: LD_VAR 0 1
42583: PPUSH
42584: CALL_OW 310
42588: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42589: LD_VAR 0 11
42593: PPUSH
42594: CALL_OW 247
42598: PUSH
42599: LD_INT 2
42601: EQUAL
42602: IFFALSE 42606
// exit ;
42604: GO 43122
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42606: LD_ADDR_VAR 0 8
42610: PUSH
42611: LD_INT 81
42613: PUSH
42614: LD_VAR 0 9
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 3
42625: PUSH
42626: LD_INT 21
42628: PUSH
42629: LD_INT 3
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PPUSH
42644: CALL_OW 69
42648: ST_TO_ADDR
// if not tmp then
42649: LD_VAR 0 8
42653: NOT
42654: IFFALSE 42658
// exit ;
42656: GO 43122
// if in_unit then
42658: LD_VAR 0 11
42662: IFFALSE 42686
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42664: LD_ADDR_VAR 0 10
42668: PUSH
42669: LD_VAR 0 8
42673: PPUSH
42674: LD_VAR 0 11
42678: PPUSH
42679: CALL_OW 74
42683: ST_TO_ADDR
42684: GO 42706
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42686: LD_ADDR_VAR 0 10
42690: PUSH
42691: LD_VAR 0 8
42695: PPUSH
42696: LD_VAR 0 1
42700: PPUSH
42701: CALL_OW 74
42705: ST_TO_ADDR
// if not enemy then
42706: LD_VAR 0 10
42710: NOT
42711: IFFALSE 42715
// exit ;
42713: GO 43122
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42715: LD_VAR 0 11
42719: IFFALSE 42741
42721: PUSH
42722: LD_VAR 0 11
42726: PPUSH
42727: LD_VAR 0 10
42731: PPUSH
42732: CALL_OW 296
42736: PUSH
42737: LD_INT 13
42739: GREATER
42740: AND
42741: IFTRUE 42763
42743: PUSH
42744: LD_VAR 0 1
42748: PPUSH
42749: LD_VAR 0 10
42753: PPUSH
42754: CALL_OW 296
42758: PUSH
42759: LD_INT 12
42761: GREATER
42762: OR
42763: IFFALSE 42767
// exit ;
42765: GO 43122
// missile := [ 1 ] ;
42767: LD_ADDR_VAR 0 14
42771: PUSH
42772: LD_INT 1
42774: PUSH
42775: EMPTY
42776: LIST
42777: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42778: LD_VAR 0 9
42782: PPUSH
42783: LD_VAR 0 12
42787: PPUSH
42788: CALL_OW 325
42792: IFFALSE 42821
// missile := Replace ( missile , missile + 1 , 2 ) ;
42794: LD_ADDR_VAR 0 14
42798: PUSH
42799: LD_VAR 0 14
42803: PPUSH
42804: LD_VAR 0 14
42808: PUSH
42809: LD_INT 1
42811: PLUS
42812: PPUSH
42813: LD_INT 2
42815: PPUSH
42816: CALL_OW 1
42820: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42821: LD_VAR 0 9
42825: PPUSH
42826: LD_VAR 0 13
42830: PPUSH
42831: CALL_OW 325
42835: IFFALSE 42859
42837: PUSH
42838: LD_VAR 0 10
42842: PPUSH
42843: CALL_OW 255
42847: PPUSH
42848: LD_VAR 0 13
42852: PPUSH
42853: CALL_OW 325
42857: NOT
42858: AND
42859: IFFALSE 42888
// missile := Replace ( missile , missile + 1 , 3 ) ;
42861: LD_ADDR_VAR 0 14
42865: PUSH
42866: LD_VAR 0 14
42870: PPUSH
42871: LD_VAR 0 14
42875: PUSH
42876: LD_INT 1
42878: PLUS
42879: PPUSH
42880: LD_INT 3
42882: PPUSH
42883: CALL_OW 1
42887: ST_TO_ADDR
// if missile < 2 then
42888: LD_VAR 0 14
42892: PUSH
42893: LD_INT 2
42895: LESS
42896: IFFALSE 42900
// exit ;
42898: GO 43122
// x := GetX ( enemy ) ;
42900: LD_ADDR_VAR 0 4
42904: PUSH
42905: LD_VAR 0 10
42909: PPUSH
42910: CALL_OW 250
42914: ST_TO_ADDR
// y := GetY ( enemy ) ;
42915: LD_ADDR_VAR 0 5
42919: PUSH
42920: LD_VAR 0 10
42924: PPUSH
42925: CALL_OW 251
42929: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42930: LD_ADDR_VAR 0 6
42934: PUSH
42935: LD_VAR 0 4
42939: PUSH
42940: LD_INT 1
42942: NEG
42943: PPUSH
42944: LD_INT 1
42946: PPUSH
42947: CALL_OW 12
42951: PLUS
42952: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42953: LD_ADDR_VAR 0 7
42957: PUSH
42958: LD_VAR 0 5
42962: PUSH
42963: LD_INT 1
42965: NEG
42966: PPUSH
42967: LD_INT 1
42969: PPUSH
42970: CALL_OW 12
42974: PLUS
42975: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42976: LD_VAR 0 6
42980: PPUSH
42981: LD_VAR 0 7
42985: PPUSH
42986: CALL_OW 488
42990: NOT
42991: IFFALSE 43013
// begin _x := x ;
42993: LD_ADDR_VAR 0 6
42997: PUSH
42998: LD_VAR 0 4
43002: ST_TO_ADDR
// _y := y ;
43003: LD_ADDR_VAR 0 7
43007: PUSH
43008: LD_VAR 0 5
43012: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
43013: LD_ADDR_VAR 0 3
43017: PUSH
43018: LD_INT 1
43020: PPUSH
43021: LD_VAR 0 14
43025: PPUSH
43026: CALL_OW 12
43030: ST_TO_ADDR
// case i of 1 :
43031: LD_VAR 0 3
43035: PUSH
43036: LD_INT 1
43038: DOUBLE
43039: EQUAL
43040: IFTRUE 43044
43042: GO 43061
43044: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
43045: LD_VAR 0 1
43049: PPUSH
43050: LD_VAR 0 10
43054: PPUSH
43055: CALL_OW 115
43059: GO 43122
43061: LD_INT 2
43063: DOUBLE
43064: EQUAL
43065: IFTRUE 43069
43067: GO 43091
43069: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
43070: LD_VAR 0 1
43074: PPUSH
43075: LD_VAR 0 6
43079: PPUSH
43080: LD_VAR 0 7
43084: PPUSH
43085: CALL_OW 153
43089: GO 43122
43091: LD_INT 3
43093: DOUBLE
43094: EQUAL
43095: IFTRUE 43099
43097: GO 43121
43099: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
43100: LD_VAR 0 1
43104: PPUSH
43105: LD_VAR 0 6
43109: PPUSH
43110: LD_VAR 0 7
43114: PPUSH
43115: CALL_OW 154
43119: GO 43122
43121: POP
// end ;
43122: LD_VAR 0 2
43126: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
43127: LD_INT 0
43129: PPUSH
43130: PPUSH
43131: PPUSH
43132: PPUSH
43133: PPUSH
43134: PPUSH
// if not unit or not building then
43135: LD_VAR 0 1
43139: NOT
43140: IFTRUE 43149
43142: PUSH
43143: LD_VAR 0 2
43147: NOT
43148: OR
43149: IFFALSE 43153
// exit ;
43151: GO 43311
// x := GetX ( building ) ;
43153: LD_ADDR_VAR 0 5
43157: PUSH
43158: LD_VAR 0 2
43162: PPUSH
43163: CALL_OW 250
43167: ST_TO_ADDR
// y := GetY ( building ) ;
43168: LD_ADDR_VAR 0 6
43172: PUSH
43173: LD_VAR 0 2
43177: PPUSH
43178: CALL_OW 251
43182: ST_TO_ADDR
// for i := 0 to 5 do
43183: LD_ADDR_VAR 0 4
43187: PUSH
43188: DOUBLE
43189: LD_INT 0
43191: DEC
43192: ST_TO_ADDR
43193: LD_INT 5
43195: PUSH
43196: FOR_TO
43197: IFFALSE 43309
// begin _x := ShiftX ( x , i , 3 ) ;
43199: LD_ADDR_VAR 0 7
43203: PUSH
43204: LD_VAR 0 5
43208: PPUSH
43209: LD_VAR 0 4
43213: PPUSH
43214: LD_INT 3
43216: PPUSH
43217: CALL_OW 272
43221: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
43222: LD_ADDR_VAR 0 8
43226: PUSH
43227: LD_VAR 0 6
43231: PPUSH
43232: LD_VAR 0 4
43236: PPUSH
43237: LD_INT 3
43239: PPUSH
43240: CALL_OW 273
43244: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43245: LD_VAR 0 7
43249: PPUSH
43250: LD_VAR 0 8
43254: PPUSH
43255: CALL_OW 488
43259: NOT
43260: IFFALSE 43264
// continue ;
43262: GO 43196
// if HexInfo ( _x , _y ) = 0 then
43264: LD_VAR 0 7
43268: PPUSH
43269: LD_VAR 0 8
43273: PPUSH
43274: CALL_OW 428
43278: PUSH
43279: LD_INT 0
43281: EQUAL
43282: IFFALSE 43307
// begin ComMoveXY ( unit , _x , _y ) ;
43284: LD_VAR 0 1
43288: PPUSH
43289: LD_VAR 0 7
43293: PPUSH
43294: LD_VAR 0 8
43298: PPUSH
43299: CALL_OW 111
// exit ;
43303: POP
43304: POP
43305: GO 43311
// end ; end ;
43307: GO 43196
43309: POP
43310: POP
// end ;
43311: LD_VAR 0 3
43315: RET
// export function ScanBase ( side , base_area ) ; begin
43316: LD_INT 0
43318: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
43319: LD_ADDR_VAR 0 3
43323: PUSH
43324: LD_VAR 0 2
43328: PPUSH
43329: LD_INT 81
43331: PUSH
43332: LD_VAR 0 1
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PPUSH
43341: CALL_OW 70
43345: ST_TO_ADDR
// end ;
43346: LD_VAR 0 3
43350: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
43351: LD_INT 0
43353: PPUSH
43354: PPUSH
43355: PPUSH
43356: PPUSH
// result := false ;
43357: LD_ADDR_VAR 0 2
43361: PUSH
43362: LD_INT 0
43364: ST_TO_ADDR
// side := GetSide ( unit ) ;
43365: LD_ADDR_VAR 0 3
43369: PUSH
43370: LD_VAR 0 1
43374: PPUSH
43375: CALL_OW 255
43379: ST_TO_ADDR
// nat := GetNation ( unit ) ;
43380: LD_ADDR_VAR 0 4
43384: PUSH
43385: LD_VAR 0 1
43389: PPUSH
43390: CALL_OW 248
43394: ST_TO_ADDR
// case nat of 1 :
43395: LD_VAR 0 4
43399: PUSH
43400: LD_INT 1
43402: DOUBLE
43403: EQUAL
43404: IFTRUE 43408
43406: GO 43419
43408: POP
// tech := tech_lassight ; 2 :
43409: LD_ADDR_VAR 0 5
43413: PUSH
43414: LD_INT 12
43416: ST_TO_ADDR
43417: GO 43458
43419: LD_INT 2
43421: DOUBLE
43422: EQUAL
43423: IFTRUE 43427
43425: GO 43438
43427: POP
// tech := tech_mortar ; 3 :
43428: LD_ADDR_VAR 0 5
43432: PUSH
43433: LD_INT 41
43435: ST_TO_ADDR
43436: GO 43458
43438: LD_INT 3
43440: DOUBLE
43441: EQUAL
43442: IFTRUE 43446
43444: GO 43457
43446: POP
// tech := tech_bazooka ; end ;
43447: LD_ADDR_VAR 0 5
43451: PUSH
43452: LD_INT 44
43454: ST_TO_ADDR
43455: GO 43458
43457: POP
// if Researched ( side , tech ) then
43458: LD_VAR 0 3
43462: PPUSH
43463: LD_VAR 0 5
43467: PPUSH
43468: CALL_OW 325
43472: IFFALSE 43499
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
43474: LD_ADDR_VAR 0 2
43478: PUSH
43479: LD_INT 5
43481: PUSH
43482: LD_INT 8
43484: PUSH
43485: LD_INT 9
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: LIST
43492: PUSH
43493: LD_VAR 0 4
43497: ARRAY
43498: ST_TO_ADDR
// end ;
43499: LD_VAR 0 2
43503: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
43504: LD_INT 0
43506: PPUSH
43507: PPUSH
43508: PPUSH
// if not mines then
43509: LD_VAR 0 2
43513: NOT
43514: IFFALSE 43518
// exit ;
43516: GO 43662
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43518: LD_ADDR_VAR 0 5
43522: PUSH
43523: LD_INT 81
43525: PUSH
43526: LD_VAR 0 1
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 3
43537: PUSH
43538: LD_INT 21
43540: PUSH
43541: LD_INT 3
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PPUSH
43556: CALL_OW 69
43560: ST_TO_ADDR
// for i in mines do
43561: LD_ADDR_VAR 0 4
43565: PUSH
43566: LD_VAR 0 2
43570: PUSH
43571: FOR_IN
43572: IFFALSE 43660
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43574: LD_VAR 0 4
43578: PUSH
43579: LD_INT 1
43581: ARRAY
43582: PPUSH
43583: LD_VAR 0 4
43587: PUSH
43588: LD_INT 2
43590: ARRAY
43591: PPUSH
43592: CALL_OW 458
43596: NOT
43597: IFFALSE 43601
// continue ;
43599: GO 43571
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43601: LD_VAR 0 4
43605: PUSH
43606: LD_INT 1
43608: ARRAY
43609: PPUSH
43610: LD_VAR 0 4
43614: PUSH
43615: LD_INT 2
43617: ARRAY
43618: PPUSH
43619: CALL_OW 428
43623: PUSH
43624: LD_VAR 0 5
43628: IN
43629: IFFALSE 43658
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43631: LD_VAR 0 4
43635: PUSH
43636: LD_INT 1
43638: ARRAY
43639: PPUSH
43640: LD_VAR 0 4
43644: PUSH
43645: LD_INT 2
43647: ARRAY
43648: PPUSH
43649: LD_VAR 0 1
43653: PPUSH
43654: CALL_OW 456
// end ;
43658: GO 43571
43660: POP
43661: POP
// end ;
43662: LD_VAR 0 3
43666: RET
// export function Count ( array ) ; begin
43667: LD_INT 0
43669: PPUSH
// result := array + 0 ;
43670: LD_ADDR_VAR 0 2
43674: PUSH
43675: LD_VAR 0 1
43679: PUSH
43680: LD_INT 0
43682: PLUS
43683: ST_TO_ADDR
// end ;
43684: LD_VAR 0 2
43688: RET
// export function IsEmpty ( building ) ; begin
43689: LD_INT 0
43691: PPUSH
// if not building then
43692: LD_VAR 0 1
43696: NOT
43697: IFFALSE 43701
// exit ;
43699: GO 43744
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43701: LD_ADDR_VAR 0 2
43705: PUSH
43706: LD_VAR 0 1
43710: PUSH
43711: LD_INT 22
43713: PUSH
43714: LD_VAR 0 1
43718: PPUSH
43719: CALL_OW 255
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 58
43730: PUSH
43731: EMPTY
43732: LIST
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PPUSH
43738: CALL_OW 69
43742: IN
43743: ST_TO_ADDR
// end ;
43744: LD_VAR 0 2
43748: RET
// export function IsNotFull ( building ) ; var places ; begin
43749: LD_INT 0
43751: PPUSH
43752: PPUSH
// if not building then
43753: LD_VAR 0 1
43757: NOT
43758: IFFALSE 43762
// exit ;
43760: GO 43790
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
43762: LD_ADDR_VAR 0 2
43766: PUSH
43767: LD_VAR 0 1
43771: PPUSH
43772: LD_INT 3
43774: PUSH
43775: LD_INT 62
43777: PUSH
43778: EMPTY
43779: LIST
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PPUSH
43785: CALL_OW 72
43789: ST_TO_ADDR
// end ;
43790: LD_VAR 0 2
43794: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43795: LD_INT 0
43797: PPUSH
43798: PPUSH
43799: PPUSH
43800: PPUSH
// tmp := [ ] ;
43801: LD_ADDR_VAR 0 3
43805: PUSH
43806: EMPTY
43807: ST_TO_ADDR
// list := [ ] ;
43808: LD_ADDR_VAR 0 5
43812: PUSH
43813: EMPTY
43814: ST_TO_ADDR
// for i = 16 to 25 do
43815: LD_ADDR_VAR 0 4
43819: PUSH
43820: DOUBLE
43821: LD_INT 16
43823: DEC
43824: ST_TO_ADDR
43825: LD_INT 25
43827: PUSH
43828: FOR_TO
43829: IFFALSE 43902
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43831: LD_ADDR_VAR 0 3
43835: PUSH
43836: LD_VAR 0 3
43840: PUSH
43841: LD_INT 22
43843: PUSH
43844: LD_VAR 0 1
43848: PPUSH
43849: CALL_OW 255
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 91
43860: PUSH
43861: LD_VAR 0 1
43865: PUSH
43866: LD_INT 6
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 30
43876: PUSH
43877: LD_VAR 0 4
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: LIST
43890: PUSH
43891: EMPTY
43892: LIST
43893: PPUSH
43894: CALL_OW 69
43898: ADD
43899: ST_TO_ADDR
43900: GO 43828
43902: POP
43903: POP
// for i = 1 to tmp do
43904: LD_ADDR_VAR 0 4
43908: PUSH
43909: DOUBLE
43910: LD_INT 1
43912: DEC
43913: ST_TO_ADDR
43914: LD_VAR 0 3
43918: PUSH
43919: FOR_TO
43920: IFFALSE 44008
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43922: LD_ADDR_VAR 0 5
43926: PUSH
43927: LD_VAR 0 5
43931: PUSH
43932: LD_VAR 0 3
43936: PUSH
43937: LD_VAR 0 4
43941: ARRAY
43942: PPUSH
43943: CALL_OW 266
43947: PUSH
43948: LD_VAR 0 3
43952: PUSH
43953: LD_VAR 0 4
43957: ARRAY
43958: PPUSH
43959: CALL_OW 250
43963: PUSH
43964: LD_VAR 0 3
43968: PUSH
43969: LD_VAR 0 4
43973: ARRAY
43974: PPUSH
43975: CALL_OW 251
43979: PUSH
43980: LD_VAR 0 3
43984: PUSH
43985: LD_VAR 0 4
43989: ARRAY
43990: PPUSH
43991: CALL_OW 254
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: PUSH
44002: EMPTY
44003: LIST
44004: ADD
44005: ST_TO_ADDR
44006: GO 43919
44008: POP
44009: POP
// result := list ;
44010: LD_ADDR_VAR 0 2
44014: PUSH
44015: LD_VAR 0 5
44019: ST_TO_ADDR
// end ;
44020: LD_VAR 0 2
44024: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
44025: LD_INT 0
44027: PPUSH
44028: PPUSH
44029: PPUSH
44030: PPUSH
44031: PPUSH
44032: PPUSH
44033: PPUSH
// if not factory then
44034: LD_VAR 0 1
44038: NOT
44039: IFFALSE 44043
// exit ;
44041: GO 44646
// if control = control_apeman then
44043: LD_VAR 0 4
44047: PUSH
44048: LD_INT 5
44050: EQUAL
44051: IFFALSE 44160
// begin tmp := UnitsInside ( factory ) ;
44053: LD_ADDR_VAR 0 8
44057: PUSH
44058: LD_VAR 0 1
44062: PPUSH
44063: CALL_OW 313
44067: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
44068: LD_VAR 0 8
44072: PPUSH
44073: LD_INT 25
44075: PUSH
44076: LD_INT 12
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PPUSH
44083: CALL_OW 72
44087: NOT
44088: IFFALSE 44098
// control := control_manual ;
44090: LD_ADDR_VAR 0 4
44094: PUSH
44095: LD_INT 1
44097: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
44098: LD_ADDR_VAR 0 8
44102: PUSH
44103: LD_VAR 0 1
44107: PPUSH
44108: CALL 43795 0 1
44112: ST_TO_ADDR
// if tmp then
44113: LD_VAR 0 8
44117: IFFALSE 44160
// begin for i in tmp do
44119: LD_ADDR_VAR 0 7
44123: PUSH
44124: LD_VAR 0 8
44128: PUSH
44129: FOR_IN
44130: IFFALSE 44158
// if i [ 1 ] = b_ext_radio then
44132: LD_VAR 0 7
44136: PUSH
44137: LD_INT 1
44139: ARRAY
44140: PUSH
44141: LD_INT 22
44143: EQUAL
44144: IFFALSE 44156
// begin control := control_remote ;
44146: LD_ADDR_VAR 0 4
44150: PUSH
44151: LD_INT 2
44153: ST_TO_ADDR
// break ;
44154: GO 44158
// end ;
44156: GO 44129
44158: POP
44159: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44160: LD_VAR 0 1
44164: PPUSH
44165: LD_VAR 0 2
44169: PPUSH
44170: LD_VAR 0 3
44174: PPUSH
44175: LD_VAR 0 4
44179: PPUSH
44180: LD_VAR 0 5
44184: PPUSH
44185: CALL_OW 448
44189: IFFALSE 44224
// begin result := [ chassis , engine , control , weapon ] ;
44191: LD_ADDR_VAR 0 6
44195: PUSH
44196: LD_VAR 0 2
44200: PUSH
44201: LD_VAR 0 3
44205: PUSH
44206: LD_VAR 0 4
44210: PUSH
44211: LD_VAR 0 5
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: ST_TO_ADDR
// exit ;
44222: GO 44646
// end ; _chassis := AvailableChassisList ( factory ) ;
44224: LD_ADDR_VAR 0 9
44228: PUSH
44229: LD_VAR 0 1
44233: PPUSH
44234: CALL_OW 475
44238: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
44239: LD_ADDR_VAR 0 11
44243: PUSH
44244: LD_VAR 0 1
44248: PPUSH
44249: CALL_OW 476
44253: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
44254: LD_ADDR_VAR 0 12
44258: PUSH
44259: LD_VAR 0 1
44263: PPUSH
44264: CALL_OW 477
44268: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
44269: LD_ADDR_VAR 0 10
44273: PUSH
44274: LD_VAR 0 1
44278: PPUSH
44279: CALL_OW 478
44283: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
44284: LD_VAR 0 9
44288: NOT
44289: IFTRUE 44298
44291: PUSH
44292: LD_VAR 0 11
44296: NOT
44297: OR
44298: IFTRUE 44307
44300: PUSH
44301: LD_VAR 0 12
44305: NOT
44306: OR
44307: IFTRUE 44316
44309: PUSH
44310: LD_VAR 0 10
44314: NOT
44315: OR
44316: IFFALSE 44351
// begin result := [ chassis , engine , control , weapon ] ;
44318: LD_ADDR_VAR 0 6
44322: PUSH
44323: LD_VAR 0 2
44327: PUSH
44328: LD_VAR 0 3
44332: PUSH
44333: LD_VAR 0 4
44337: PUSH
44338: LD_VAR 0 5
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: ST_TO_ADDR
// exit ;
44349: GO 44646
// end ; if not chassis in _chassis then
44351: LD_VAR 0 2
44355: PUSH
44356: LD_VAR 0 9
44360: IN
44361: NOT
44362: IFFALSE 44388
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
44364: LD_ADDR_VAR 0 2
44368: PUSH
44369: LD_VAR 0 9
44373: PUSH
44374: LD_INT 1
44376: PPUSH
44377: LD_VAR 0 9
44381: PPUSH
44382: CALL_OW 12
44386: ARRAY
44387: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
44388: LD_VAR 0 2
44392: PPUSH
44393: LD_VAR 0 3
44397: PPUSH
44398: CALL 44651 0 2
44402: NOT
44403: IFFALSE 44464
// repeat engine := _engine [ 1 ] ;
44405: LD_ADDR_VAR 0 3
44409: PUSH
44410: LD_VAR 0 11
44414: PUSH
44415: LD_INT 1
44417: ARRAY
44418: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44419: LD_ADDR_VAR 0 11
44423: PUSH
44424: LD_VAR 0 11
44428: PPUSH
44429: LD_INT 1
44431: PPUSH
44432: CALL_OW 3
44436: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44437: LD_VAR 0 2
44441: PPUSH
44442: LD_VAR 0 3
44446: PPUSH
44447: CALL 44651 0 2
44451: IFTRUE 44462
44453: PUSH
44454: LD_VAR 0 11
44458: PUSH
44459: EMPTY
44460: EQUAL
44461: OR
44462: IFFALSE 44405
// if not control in _control then
44464: LD_VAR 0 4
44468: PUSH
44469: LD_VAR 0 12
44473: IN
44474: NOT
44475: IFFALSE 44501
// control := _control [ rand ( 1 , _control ) ] ;
44477: LD_ADDR_VAR 0 4
44481: PUSH
44482: LD_VAR 0 12
44486: PUSH
44487: LD_INT 1
44489: PPUSH
44490: LD_VAR 0 12
44494: PPUSH
44495: CALL_OW 12
44499: ARRAY
44500: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44501: LD_VAR 0 2
44505: PPUSH
44506: LD_VAR 0 5
44510: PPUSH
44511: CALL 44873 0 2
44515: NOT
44516: IFFALSE 44577
// repeat weapon := _weapon [ 1 ] ;
44518: LD_ADDR_VAR 0 5
44522: PUSH
44523: LD_VAR 0 10
44527: PUSH
44528: LD_INT 1
44530: ARRAY
44531: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44532: LD_ADDR_VAR 0 10
44536: PUSH
44537: LD_VAR 0 10
44541: PPUSH
44542: LD_INT 1
44544: PPUSH
44545: CALL_OW 3
44549: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44550: LD_VAR 0 2
44554: PPUSH
44555: LD_VAR 0 5
44559: PPUSH
44560: CALL 44873 0 2
44564: IFTRUE 44575
44566: PUSH
44567: LD_VAR 0 10
44571: PUSH
44572: EMPTY
44573: EQUAL
44574: OR
44575: IFFALSE 44518
// result := [ ] ;
44577: LD_ADDR_VAR 0 6
44581: PUSH
44582: EMPTY
44583: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44584: LD_VAR 0 1
44588: PPUSH
44589: LD_VAR 0 2
44593: PPUSH
44594: LD_VAR 0 3
44598: PPUSH
44599: LD_VAR 0 4
44603: PPUSH
44604: LD_VAR 0 5
44608: PPUSH
44609: CALL_OW 448
44613: IFFALSE 44646
// result := [ chassis , engine , control , weapon ] ;
44615: LD_ADDR_VAR 0 6
44619: PUSH
44620: LD_VAR 0 2
44624: PUSH
44625: LD_VAR 0 3
44629: PUSH
44630: LD_VAR 0 4
44634: PUSH
44635: LD_VAR 0 5
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: ST_TO_ADDR
// end ;
44646: LD_VAR 0 6
44650: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44651: LD_INT 0
44653: PPUSH
// if not chassis or not engine then
44654: LD_VAR 0 1
44658: NOT
44659: IFTRUE 44668
44661: PUSH
44662: LD_VAR 0 2
44666: NOT
44667: OR
44668: IFFALSE 44672
// exit ;
44670: GO 44868
// case engine of engine_solar :
44672: LD_VAR 0 2
44676: PUSH
44677: LD_INT 2
44679: DOUBLE
44680: EQUAL
44681: IFTRUE 44685
44683: GO 44723
44685: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44686: LD_ADDR_VAR 0 3
44690: PUSH
44691: LD_INT 11
44693: PUSH
44694: LD_INT 12
44696: PUSH
44697: LD_INT 13
44699: PUSH
44700: LD_INT 14
44702: PUSH
44703: LD_INT 1
44705: PUSH
44706: LD_INT 2
44708: PUSH
44709: LD_INT 3
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: ST_TO_ADDR
44721: GO 44852
44723: LD_INT 1
44725: DOUBLE
44726: EQUAL
44727: IFTRUE 44731
44729: GO 44793
44731: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44732: LD_ADDR_VAR 0 3
44736: PUSH
44737: LD_INT 11
44739: PUSH
44740: LD_INT 12
44742: PUSH
44743: LD_INT 13
44745: PUSH
44746: LD_INT 14
44748: PUSH
44749: LD_INT 1
44751: PUSH
44752: LD_INT 2
44754: PUSH
44755: LD_INT 3
44757: PUSH
44758: LD_INT 4
44760: PUSH
44761: LD_INT 5
44763: PUSH
44764: LD_INT 21
44766: PUSH
44767: LD_INT 23
44769: PUSH
44770: LD_INT 22
44772: PUSH
44773: LD_INT 24
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: ST_TO_ADDR
44791: GO 44852
44793: LD_INT 3
44795: DOUBLE
44796: EQUAL
44797: IFTRUE 44801
44799: GO 44851
44801: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44802: LD_ADDR_VAR 0 3
44806: PUSH
44807: LD_INT 13
44809: PUSH
44810: LD_INT 14
44812: PUSH
44813: LD_INT 2
44815: PUSH
44816: LD_INT 3
44818: PUSH
44819: LD_INT 4
44821: PUSH
44822: LD_INT 5
44824: PUSH
44825: LD_INT 21
44827: PUSH
44828: LD_INT 22
44830: PUSH
44831: LD_INT 23
44833: PUSH
44834: LD_INT 24
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: ST_TO_ADDR
44849: GO 44852
44851: POP
// result := ( chassis in result ) ;
44852: LD_ADDR_VAR 0 3
44856: PUSH
44857: LD_VAR 0 1
44861: PUSH
44862: LD_VAR 0 3
44866: IN
44867: ST_TO_ADDR
// end ;
44868: LD_VAR 0 3
44872: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44873: LD_INT 0
44875: PPUSH
// if not chassis or not weapon then
44876: LD_VAR 0 1
44880: NOT
44881: IFTRUE 44890
44883: PUSH
44884: LD_VAR 0 2
44888: NOT
44889: OR
44890: IFFALSE 44894
// exit ;
44892: GO 45954
// case weapon of us_machine_gun :
44894: LD_VAR 0 2
44898: PUSH
44899: LD_INT 2
44901: DOUBLE
44902: EQUAL
44903: IFTRUE 44907
44905: GO 44937
44907: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44908: LD_ADDR_VAR 0 3
44912: PUSH
44913: LD_INT 1
44915: PUSH
44916: LD_INT 2
44918: PUSH
44919: LD_INT 3
44921: PUSH
44922: LD_INT 4
44924: PUSH
44925: LD_INT 5
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: ST_TO_ADDR
44935: GO 45938
44937: LD_INT 3
44939: DOUBLE
44940: EQUAL
44941: IFTRUE 44945
44943: GO 44975
44945: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44946: LD_ADDR_VAR 0 3
44950: PUSH
44951: LD_INT 1
44953: PUSH
44954: LD_INT 2
44956: PUSH
44957: LD_INT 3
44959: PUSH
44960: LD_INT 4
44962: PUSH
44963: LD_INT 5
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: ST_TO_ADDR
44973: GO 45938
44975: LD_INT 11
44977: DOUBLE
44978: EQUAL
44979: IFTRUE 44983
44981: GO 45013
44983: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44984: LD_ADDR_VAR 0 3
44988: PUSH
44989: LD_INT 1
44991: PUSH
44992: LD_INT 2
44994: PUSH
44995: LD_INT 3
44997: PUSH
44998: LD_INT 4
45000: PUSH
45001: LD_INT 5
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: ST_TO_ADDR
45011: GO 45938
45013: LD_INT 4
45015: DOUBLE
45016: EQUAL
45017: IFTRUE 45021
45019: GO 45047
45021: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
45022: LD_ADDR_VAR 0 3
45026: PUSH
45027: LD_INT 2
45029: PUSH
45030: LD_INT 3
45032: PUSH
45033: LD_INT 4
45035: PUSH
45036: LD_INT 5
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: ST_TO_ADDR
45045: GO 45938
45047: LD_INT 5
45049: DOUBLE
45050: EQUAL
45051: IFTRUE 45055
45053: GO 45081
45055: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
45056: LD_ADDR_VAR 0 3
45060: PUSH
45061: LD_INT 2
45063: PUSH
45064: LD_INT 3
45066: PUSH
45067: LD_INT 4
45069: PUSH
45070: LD_INT 5
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: ST_TO_ADDR
45079: GO 45938
45081: LD_INT 9
45083: DOUBLE
45084: EQUAL
45085: IFTRUE 45089
45087: GO 45115
45089: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
45090: LD_ADDR_VAR 0 3
45094: PUSH
45095: LD_INT 2
45097: PUSH
45098: LD_INT 3
45100: PUSH
45101: LD_INT 4
45103: PUSH
45104: LD_INT 5
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: ST_TO_ADDR
45113: GO 45938
45115: LD_INT 7
45117: DOUBLE
45118: EQUAL
45119: IFTRUE 45123
45121: GO 45149
45123: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
45124: LD_ADDR_VAR 0 3
45128: PUSH
45129: LD_INT 2
45131: PUSH
45132: LD_INT 3
45134: PUSH
45135: LD_INT 4
45137: PUSH
45138: LD_INT 5
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: ST_TO_ADDR
45147: GO 45938
45149: LD_INT 12
45151: DOUBLE
45152: EQUAL
45153: IFTRUE 45157
45155: GO 45183
45157: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
45158: LD_ADDR_VAR 0 3
45162: PUSH
45163: LD_INT 2
45165: PUSH
45166: LD_INT 3
45168: PUSH
45169: LD_INT 4
45171: PUSH
45172: LD_INT 5
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: ST_TO_ADDR
45181: GO 45938
45183: LD_INT 13
45185: DOUBLE
45186: EQUAL
45187: IFTRUE 45191
45189: GO 45217
45191: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
45192: LD_ADDR_VAR 0 3
45196: PUSH
45197: LD_INT 2
45199: PUSH
45200: LD_INT 3
45202: PUSH
45203: LD_INT 4
45205: PUSH
45206: LD_INT 5
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: ST_TO_ADDR
45215: GO 45938
45217: LD_INT 14
45219: DOUBLE
45220: EQUAL
45221: IFTRUE 45225
45223: GO 45243
45225: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
45226: LD_ADDR_VAR 0 3
45230: PUSH
45231: LD_INT 4
45233: PUSH
45234: LD_INT 5
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: ST_TO_ADDR
45241: GO 45938
45243: LD_INT 6
45245: DOUBLE
45246: EQUAL
45247: IFTRUE 45251
45249: GO 45269
45251: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
45252: LD_ADDR_VAR 0 3
45256: PUSH
45257: LD_INT 4
45259: PUSH
45260: LD_INT 5
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: ST_TO_ADDR
45267: GO 45938
45269: LD_INT 10
45271: DOUBLE
45272: EQUAL
45273: IFTRUE 45277
45275: GO 45295
45277: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
45278: LD_ADDR_VAR 0 3
45282: PUSH
45283: LD_INT 4
45285: PUSH
45286: LD_INT 5
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: ST_TO_ADDR
45293: GO 45938
45295: LD_INT 22
45297: DOUBLE
45298: EQUAL
45299: IFTRUE 45303
45301: GO 45329
45303: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
45304: LD_ADDR_VAR 0 3
45308: PUSH
45309: LD_INT 11
45311: PUSH
45312: LD_INT 12
45314: PUSH
45315: LD_INT 13
45317: PUSH
45318: LD_INT 14
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: ST_TO_ADDR
45327: GO 45938
45329: LD_INT 23
45331: DOUBLE
45332: EQUAL
45333: IFTRUE 45337
45335: GO 45363
45337: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
45338: LD_ADDR_VAR 0 3
45342: PUSH
45343: LD_INT 11
45345: PUSH
45346: LD_INT 12
45348: PUSH
45349: LD_INT 13
45351: PUSH
45352: LD_INT 14
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: ST_TO_ADDR
45361: GO 45938
45363: LD_INT 24
45365: DOUBLE
45366: EQUAL
45367: IFTRUE 45371
45369: GO 45397
45371: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
45372: LD_ADDR_VAR 0 3
45376: PUSH
45377: LD_INT 11
45379: PUSH
45380: LD_INT 12
45382: PUSH
45383: LD_INT 13
45385: PUSH
45386: LD_INT 14
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: ST_TO_ADDR
45395: GO 45938
45397: LD_INT 30
45399: DOUBLE
45400: EQUAL
45401: IFTRUE 45405
45403: GO 45431
45405: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45406: LD_ADDR_VAR 0 3
45410: PUSH
45411: LD_INT 11
45413: PUSH
45414: LD_INT 12
45416: PUSH
45417: LD_INT 13
45419: PUSH
45420: LD_INT 14
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: ST_TO_ADDR
45429: GO 45938
45431: LD_INT 25
45433: DOUBLE
45434: EQUAL
45435: IFTRUE 45439
45437: GO 45457
45439: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45440: LD_ADDR_VAR 0 3
45444: PUSH
45445: LD_INT 13
45447: PUSH
45448: LD_INT 14
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: ST_TO_ADDR
45455: GO 45938
45457: LD_INT 27
45459: DOUBLE
45460: EQUAL
45461: IFTRUE 45465
45463: GO 45483
45465: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
45466: LD_ADDR_VAR 0 3
45470: PUSH
45471: LD_INT 13
45473: PUSH
45474: LD_INT 14
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: ST_TO_ADDR
45481: GO 45938
45483: LD_INT 92
45485: DOUBLE
45486: EQUAL
45487: IFTRUE 45491
45489: GO 45517
45491: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45492: LD_ADDR_VAR 0 3
45496: PUSH
45497: LD_INT 11
45499: PUSH
45500: LD_INT 12
45502: PUSH
45503: LD_INT 13
45505: PUSH
45506: LD_INT 14
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: ST_TO_ADDR
45515: GO 45938
45517: LD_INT 28
45519: DOUBLE
45520: EQUAL
45521: IFTRUE 45525
45523: GO 45543
45525: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45526: LD_ADDR_VAR 0 3
45530: PUSH
45531: LD_INT 13
45533: PUSH
45534: LD_INT 14
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: ST_TO_ADDR
45541: GO 45938
45543: LD_INT 29
45545: DOUBLE
45546: EQUAL
45547: IFTRUE 45551
45549: GO 45569
45551: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45552: LD_ADDR_VAR 0 3
45556: PUSH
45557: LD_INT 13
45559: PUSH
45560: LD_INT 14
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: ST_TO_ADDR
45567: GO 45938
45569: LD_INT 31
45571: DOUBLE
45572: EQUAL
45573: IFTRUE 45577
45575: GO 45595
45577: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45578: LD_ADDR_VAR 0 3
45582: PUSH
45583: LD_INT 13
45585: PUSH
45586: LD_INT 14
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: ST_TO_ADDR
45593: GO 45938
45595: LD_INT 26
45597: DOUBLE
45598: EQUAL
45599: IFTRUE 45603
45601: GO 45621
45603: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45604: LD_ADDR_VAR 0 3
45608: PUSH
45609: LD_INT 13
45611: PUSH
45612: LD_INT 14
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: ST_TO_ADDR
45619: GO 45938
45621: LD_INT 42
45623: DOUBLE
45624: EQUAL
45625: IFTRUE 45629
45627: GO 45655
45629: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45630: LD_ADDR_VAR 0 3
45634: PUSH
45635: LD_INT 21
45637: PUSH
45638: LD_INT 22
45640: PUSH
45641: LD_INT 23
45643: PUSH
45644: LD_INT 24
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: ST_TO_ADDR
45653: GO 45938
45655: LD_INT 43
45657: DOUBLE
45658: EQUAL
45659: IFTRUE 45663
45661: GO 45689
45663: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45664: LD_ADDR_VAR 0 3
45668: PUSH
45669: LD_INT 21
45671: PUSH
45672: LD_INT 22
45674: PUSH
45675: LD_INT 23
45677: PUSH
45678: LD_INT 24
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: ST_TO_ADDR
45687: GO 45938
45689: LD_INT 44
45691: DOUBLE
45692: EQUAL
45693: IFTRUE 45697
45695: GO 45723
45697: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45698: LD_ADDR_VAR 0 3
45702: PUSH
45703: LD_INT 21
45705: PUSH
45706: LD_INT 22
45708: PUSH
45709: LD_INT 23
45711: PUSH
45712: LD_INT 24
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: ST_TO_ADDR
45721: GO 45938
45723: LD_INT 45
45725: DOUBLE
45726: EQUAL
45727: IFTRUE 45731
45729: GO 45757
45731: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45732: LD_ADDR_VAR 0 3
45736: PUSH
45737: LD_INT 21
45739: PUSH
45740: LD_INT 22
45742: PUSH
45743: LD_INT 23
45745: PUSH
45746: LD_INT 24
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: ST_TO_ADDR
45755: GO 45938
45757: LD_INT 49
45759: DOUBLE
45760: EQUAL
45761: IFTRUE 45765
45763: GO 45791
45765: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45766: LD_ADDR_VAR 0 3
45770: PUSH
45771: LD_INT 21
45773: PUSH
45774: LD_INT 22
45776: PUSH
45777: LD_INT 23
45779: PUSH
45780: LD_INT 24
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: ST_TO_ADDR
45789: GO 45938
45791: LD_INT 51
45793: DOUBLE
45794: EQUAL
45795: IFTRUE 45799
45797: GO 45825
45799: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45800: LD_ADDR_VAR 0 3
45804: PUSH
45805: LD_INT 21
45807: PUSH
45808: LD_INT 22
45810: PUSH
45811: LD_INT 23
45813: PUSH
45814: LD_INT 24
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: ST_TO_ADDR
45823: GO 45938
45825: LD_INT 52
45827: DOUBLE
45828: EQUAL
45829: IFTRUE 45833
45831: GO 45859
45833: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45834: LD_ADDR_VAR 0 3
45838: PUSH
45839: LD_INT 21
45841: PUSH
45842: LD_INT 22
45844: PUSH
45845: LD_INT 23
45847: PUSH
45848: LD_INT 24
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: ST_TO_ADDR
45857: GO 45938
45859: LD_INT 53
45861: DOUBLE
45862: EQUAL
45863: IFTRUE 45867
45865: GO 45885
45867: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45868: LD_ADDR_VAR 0 3
45872: PUSH
45873: LD_INT 23
45875: PUSH
45876: LD_INT 24
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: ST_TO_ADDR
45883: GO 45938
45885: LD_INT 46
45887: DOUBLE
45888: EQUAL
45889: IFTRUE 45893
45891: GO 45911
45893: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45894: LD_ADDR_VAR 0 3
45898: PUSH
45899: LD_INT 23
45901: PUSH
45902: LD_INT 24
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: ST_TO_ADDR
45909: GO 45938
45911: LD_INT 47
45913: DOUBLE
45914: EQUAL
45915: IFTRUE 45919
45917: GO 45937
45919: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45920: LD_ADDR_VAR 0 3
45924: PUSH
45925: LD_INT 23
45927: PUSH
45928: LD_INT 24
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: ST_TO_ADDR
45935: GO 45938
45937: POP
// result := ( chassis in result ) ;
45938: LD_ADDR_VAR 0 3
45942: PUSH
45943: LD_VAR 0 1
45947: PUSH
45948: LD_VAR 0 3
45952: IN
45953: ST_TO_ADDR
// end ;
45954: LD_VAR 0 3
45958: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45959: LD_INT 0
45961: PPUSH
45962: PPUSH
45963: PPUSH
45964: PPUSH
45965: PPUSH
45966: PPUSH
45967: PPUSH
// result := array ;
45968: LD_ADDR_VAR 0 5
45972: PUSH
45973: LD_VAR 0 1
45977: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45978: LD_VAR 0 1
45982: NOT
45983: IFTRUE 45992
45985: PUSH
45986: LD_VAR 0 2
45990: NOT
45991: OR
45992: IFTRUE 46001
45994: PUSH
45995: LD_VAR 0 3
45999: NOT
46000: OR
46001: IFTRUE 46015
46003: PUSH
46004: LD_VAR 0 2
46008: PUSH
46009: LD_VAR 0 1
46013: GREATER
46014: OR
46015: IFTRUE 46029
46017: PUSH
46018: LD_VAR 0 3
46022: PUSH
46023: LD_VAR 0 1
46027: GREATER
46028: OR
46029: IFFALSE 46033
// exit ;
46031: GO 46329
// if direction then
46033: LD_VAR 0 4
46037: IFFALSE 46101
// begin d := 1 ;
46039: LD_ADDR_VAR 0 9
46043: PUSH
46044: LD_INT 1
46046: ST_TO_ADDR
// if i_from > i_to then
46047: LD_VAR 0 2
46051: PUSH
46052: LD_VAR 0 3
46056: GREATER
46057: IFFALSE 46083
// length := ( array - i_from ) + i_to else
46059: LD_ADDR_VAR 0 11
46063: PUSH
46064: LD_VAR 0 1
46068: PUSH
46069: LD_VAR 0 2
46073: MINUS
46074: PUSH
46075: LD_VAR 0 3
46079: PLUS
46080: ST_TO_ADDR
46081: GO 46099
// length := i_to - i_from ;
46083: LD_ADDR_VAR 0 11
46087: PUSH
46088: LD_VAR 0 3
46092: PUSH
46093: LD_VAR 0 2
46097: MINUS
46098: ST_TO_ADDR
// end else
46099: GO 46162
// begin d := - 1 ;
46101: LD_ADDR_VAR 0 9
46105: PUSH
46106: LD_INT 1
46108: NEG
46109: ST_TO_ADDR
// if i_from > i_to then
46110: LD_VAR 0 2
46114: PUSH
46115: LD_VAR 0 3
46119: GREATER
46120: IFFALSE 46140
// length := i_from - i_to else
46122: LD_ADDR_VAR 0 11
46126: PUSH
46127: LD_VAR 0 2
46131: PUSH
46132: LD_VAR 0 3
46136: MINUS
46137: ST_TO_ADDR
46138: GO 46162
// length := ( array - i_to ) + i_from ;
46140: LD_ADDR_VAR 0 11
46144: PUSH
46145: LD_VAR 0 1
46149: PUSH
46150: LD_VAR 0 3
46154: MINUS
46155: PUSH
46156: LD_VAR 0 2
46160: PLUS
46161: ST_TO_ADDR
// end ; if not length then
46162: LD_VAR 0 11
46166: NOT
46167: IFFALSE 46171
// exit ;
46169: GO 46329
// tmp := array ;
46171: LD_ADDR_VAR 0 10
46175: PUSH
46176: LD_VAR 0 1
46180: ST_TO_ADDR
// for i = 1 to length do
46181: LD_ADDR_VAR 0 6
46185: PUSH
46186: DOUBLE
46187: LD_INT 1
46189: DEC
46190: ST_TO_ADDR
46191: LD_VAR 0 11
46195: PUSH
46196: FOR_TO
46197: IFFALSE 46317
// begin for j = 1 to array do
46199: LD_ADDR_VAR 0 7
46203: PUSH
46204: DOUBLE
46205: LD_INT 1
46207: DEC
46208: ST_TO_ADDR
46209: LD_VAR 0 1
46213: PUSH
46214: FOR_TO
46215: IFFALSE 46303
// begin k := j + d ;
46217: LD_ADDR_VAR 0 8
46221: PUSH
46222: LD_VAR 0 7
46226: PUSH
46227: LD_VAR 0 9
46231: PLUS
46232: ST_TO_ADDR
// if k > array then
46233: LD_VAR 0 8
46237: PUSH
46238: LD_VAR 0 1
46242: GREATER
46243: IFFALSE 46253
// k := 1 ;
46245: LD_ADDR_VAR 0 8
46249: PUSH
46250: LD_INT 1
46252: ST_TO_ADDR
// if not k then
46253: LD_VAR 0 8
46257: NOT
46258: IFFALSE 46270
// k := array ;
46260: LD_ADDR_VAR 0 8
46264: PUSH
46265: LD_VAR 0 1
46269: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
46270: LD_ADDR_VAR 0 10
46274: PUSH
46275: LD_VAR 0 10
46279: PPUSH
46280: LD_VAR 0 8
46284: PPUSH
46285: LD_VAR 0 1
46289: PUSH
46290: LD_VAR 0 7
46294: ARRAY
46295: PPUSH
46296: CALL_OW 1
46300: ST_TO_ADDR
// end ;
46301: GO 46214
46303: POP
46304: POP
// array := tmp ;
46305: LD_ADDR_VAR 0 1
46309: PUSH
46310: LD_VAR 0 10
46314: ST_TO_ADDR
// end ;
46315: GO 46196
46317: POP
46318: POP
// result := array ;
46319: LD_ADDR_VAR 0 5
46323: PUSH
46324: LD_VAR 0 1
46328: ST_TO_ADDR
// end ;
46329: LD_VAR 0 5
46333: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
46334: LD_INT 0
46336: PPUSH
46337: PPUSH
// result := 0 ;
46338: LD_ADDR_VAR 0 3
46342: PUSH
46343: LD_INT 0
46345: ST_TO_ADDR
// if not array or not value in array then
46346: LD_VAR 0 1
46350: NOT
46351: IFTRUE 46366
46353: PUSH
46354: LD_VAR 0 2
46358: PUSH
46359: LD_VAR 0 1
46363: IN
46364: NOT
46365: OR
46366: IFFALSE 46370
// exit ;
46368: GO 46424
// for i = 1 to array do
46370: LD_ADDR_VAR 0 4
46374: PUSH
46375: DOUBLE
46376: LD_INT 1
46378: DEC
46379: ST_TO_ADDR
46380: LD_VAR 0 1
46384: PUSH
46385: FOR_TO
46386: IFFALSE 46422
// if value = array [ i ] then
46388: LD_VAR 0 2
46392: PUSH
46393: LD_VAR 0 1
46397: PUSH
46398: LD_VAR 0 4
46402: ARRAY
46403: EQUAL
46404: IFFALSE 46420
// begin result := i ;
46406: LD_ADDR_VAR 0 3
46410: PUSH
46411: LD_VAR 0 4
46415: ST_TO_ADDR
// exit ;
46416: POP
46417: POP
46418: GO 46424
// end ;
46420: GO 46385
46422: POP
46423: POP
// end ;
46424: LD_VAR 0 3
46428: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46429: LD_INT 0
46431: PPUSH
// vc_chassis := chassis ;
46432: LD_ADDR_OWVAR 37
46436: PUSH
46437: LD_VAR 0 1
46441: ST_TO_ADDR
// vc_engine := engine ;
46442: LD_ADDR_OWVAR 39
46446: PUSH
46447: LD_VAR 0 2
46451: ST_TO_ADDR
// vc_control := control ;
46452: LD_ADDR_OWVAR 38
46456: PUSH
46457: LD_VAR 0 3
46461: ST_TO_ADDR
// vc_weapon := weapon ;
46462: LD_ADDR_OWVAR 40
46466: PUSH
46467: LD_VAR 0 4
46471: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46472: LD_ADDR_OWVAR 41
46476: PUSH
46477: LD_VAR 0 5
46481: ST_TO_ADDR
// end ;
46482: LD_VAR 0 6
46486: RET
// export function WantPlant ( unit ) ; var task ; begin
46487: LD_INT 0
46489: PPUSH
46490: PPUSH
// result := false ;
46491: LD_ADDR_VAR 0 2
46495: PUSH
46496: LD_INT 0
46498: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46499: LD_ADDR_VAR 0 3
46503: PUSH
46504: LD_VAR 0 1
46508: PPUSH
46509: CALL_OW 437
46513: ST_TO_ADDR
// if task then
46514: LD_VAR 0 3
46518: IFFALSE 46546
// if task [ 1 ] [ 1 ] = p then
46520: LD_VAR 0 3
46524: PUSH
46525: LD_INT 1
46527: ARRAY
46528: PUSH
46529: LD_INT 1
46531: ARRAY
46532: PUSH
46533: LD_STRING p
46535: EQUAL
46536: IFFALSE 46546
// result := true ;
46538: LD_ADDR_VAR 0 2
46542: PUSH
46543: LD_INT 1
46545: ST_TO_ADDR
// end ;
46546: LD_VAR 0 2
46550: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46551: LD_INT 0
46553: PPUSH
46554: PPUSH
46555: PPUSH
46556: PPUSH
// if pos < 1 then
46557: LD_VAR 0 2
46561: PUSH
46562: LD_INT 1
46564: LESS
46565: IFFALSE 46569
// exit ;
46567: GO 46872
// if pos = 1 then
46569: LD_VAR 0 2
46573: PUSH
46574: LD_INT 1
46576: EQUAL
46577: IFFALSE 46610
// result := Replace ( arr , pos [ 1 ] , value ) else
46579: LD_ADDR_VAR 0 4
46583: PUSH
46584: LD_VAR 0 1
46588: PPUSH
46589: LD_VAR 0 2
46593: PUSH
46594: LD_INT 1
46596: ARRAY
46597: PPUSH
46598: LD_VAR 0 3
46602: PPUSH
46603: CALL_OW 1
46607: ST_TO_ADDR
46608: GO 46872
// begin tmp := arr ;
46610: LD_ADDR_VAR 0 6
46614: PUSH
46615: LD_VAR 0 1
46619: ST_TO_ADDR
// s_arr := [ tmp ] ;
46620: LD_ADDR_VAR 0 7
46624: PUSH
46625: LD_VAR 0 6
46629: PUSH
46630: EMPTY
46631: LIST
46632: ST_TO_ADDR
// for i = 1 to pos - 1 do
46633: LD_ADDR_VAR 0 5
46637: PUSH
46638: DOUBLE
46639: LD_INT 1
46641: DEC
46642: ST_TO_ADDR
46643: LD_VAR 0 2
46647: PUSH
46648: LD_INT 1
46650: MINUS
46651: PUSH
46652: FOR_TO
46653: IFFALSE 46698
// begin tmp := tmp [ pos [ i ] ] ;
46655: LD_ADDR_VAR 0 6
46659: PUSH
46660: LD_VAR 0 6
46664: PUSH
46665: LD_VAR 0 2
46669: PUSH
46670: LD_VAR 0 5
46674: ARRAY
46675: ARRAY
46676: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46677: LD_ADDR_VAR 0 7
46681: PUSH
46682: LD_VAR 0 7
46686: PUSH
46687: LD_VAR 0 6
46691: PUSH
46692: EMPTY
46693: LIST
46694: ADD
46695: ST_TO_ADDR
// end ;
46696: GO 46652
46698: POP
46699: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46700: LD_ADDR_VAR 0 6
46704: PUSH
46705: LD_VAR 0 6
46709: PPUSH
46710: LD_VAR 0 2
46714: PUSH
46715: LD_VAR 0 2
46719: ARRAY
46720: PPUSH
46721: LD_VAR 0 3
46725: PPUSH
46726: CALL_OW 1
46730: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46731: LD_ADDR_VAR 0 7
46735: PUSH
46736: LD_VAR 0 7
46740: PPUSH
46741: LD_VAR 0 7
46745: PPUSH
46746: LD_VAR 0 6
46750: PPUSH
46751: CALL_OW 1
46755: ST_TO_ADDR
// for i = s_arr downto 2 do
46756: LD_ADDR_VAR 0 5
46760: PUSH
46761: DOUBLE
46762: LD_VAR 0 7
46766: INC
46767: ST_TO_ADDR
46768: LD_INT 2
46770: PUSH
46771: FOR_DOWNTO
46772: IFFALSE 46856
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46774: LD_ADDR_VAR 0 6
46778: PUSH
46779: LD_VAR 0 7
46783: PUSH
46784: LD_VAR 0 5
46788: PUSH
46789: LD_INT 1
46791: MINUS
46792: ARRAY
46793: PPUSH
46794: LD_VAR 0 2
46798: PUSH
46799: LD_VAR 0 5
46803: PUSH
46804: LD_INT 1
46806: MINUS
46807: ARRAY
46808: PPUSH
46809: LD_VAR 0 7
46813: PUSH
46814: LD_VAR 0 5
46818: ARRAY
46819: PPUSH
46820: CALL_OW 1
46824: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46825: LD_ADDR_VAR 0 7
46829: PUSH
46830: LD_VAR 0 7
46834: PPUSH
46835: LD_VAR 0 5
46839: PUSH
46840: LD_INT 1
46842: MINUS
46843: PPUSH
46844: LD_VAR 0 6
46848: PPUSH
46849: CALL_OW 1
46853: ST_TO_ADDR
// end ;
46854: GO 46771
46856: POP
46857: POP
// result := s_arr [ 1 ] ;
46858: LD_ADDR_VAR 0 4
46862: PUSH
46863: LD_VAR 0 7
46867: PUSH
46868: LD_INT 1
46870: ARRAY
46871: ST_TO_ADDR
// end ; end ;
46872: LD_VAR 0 4
46876: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46877: LD_INT 0
46879: PPUSH
46880: PPUSH
// if not list then
46881: LD_VAR 0 1
46885: NOT
46886: IFFALSE 46890
// exit ;
46888: GO 46981
// i := list [ pos1 ] ;
46890: LD_ADDR_VAR 0 5
46894: PUSH
46895: LD_VAR 0 1
46899: PUSH
46900: LD_VAR 0 2
46904: ARRAY
46905: ST_TO_ADDR
// if not i then
46906: LD_VAR 0 5
46910: NOT
46911: IFFALSE 46915
// exit ;
46913: GO 46981
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46915: LD_ADDR_VAR 0 1
46919: PUSH
46920: LD_VAR 0 1
46924: PPUSH
46925: LD_VAR 0 2
46929: PPUSH
46930: LD_VAR 0 1
46934: PUSH
46935: LD_VAR 0 3
46939: ARRAY
46940: PPUSH
46941: CALL_OW 1
46945: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46946: LD_ADDR_VAR 0 1
46950: PUSH
46951: LD_VAR 0 1
46955: PPUSH
46956: LD_VAR 0 3
46960: PPUSH
46961: LD_VAR 0 5
46965: PPUSH
46966: CALL_OW 1
46970: ST_TO_ADDR
// result := list ;
46971: LD_ADDR_VAR 0 4
46975: PUSH
46976: LD_VAR 0 1
46980: ST_TO_ADDR
// end ;
46981: LD_VAR 0 4
46985: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46986: LD_INT 0
46988: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46989: LD_ADDR_VAR 0 5
46993: PUSH
46994: LD_VAR 0 1
46998: PPUSH
46999: CALL_OW 250
47003: PPUSH
47004: LD_VAR 0 1
47008: PPUSH
47009: CALL_OW 251
47013: PPUSH
47014: LD_VAR 0 2
47018: PPUSH
47019: LD_VAR 0 3
47023: PPUSH
47024: LD_VAR 0 4
47028: PPUSH
47029: CALL 47411 0 5
47033: ST_TO_ADDR
// end ;
47034: LD_VAR 0 5
47038: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
47039: LD_INT 0
47041: PPUSH
47042: PPUSH
47043: PPUSH
47044: PPUSH
// if not list or not unit then
47045: LD_VAR 0 2
47049: NOT
47050: IFTRUE 47059
47052: PUSH
47053: LD_VAR 0 1
47057: NOT
47058: OR
47059: IFFALSE 47063
// exit ;
47061: GO 47406
// result := [ ] ;
47063: LD_ADDR_VAR 0 5
47067: PUSH
47068: EMPTY
47069: ST_TO_ADDR
// for i in list do
47070: LD_ADDR_VAR 0 6
47074: PUSH
47075: LD_VAR 0 2
47079: PUSH
47080: FOR_IN
47081: IFFALSE 47299
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
47083: LD_ADDR_VAR 0 8
47087: PUSH
47088: LD_VAR 0 1
47092: PPUSH
47093: LD_VAR 0 6
47097: PUSH
47098: LD_INT 1
47100: ARRAY
47101: PPUSH
47102: LD_VAR 0 6
47106: PUSH
47107: LD_INT 2
47109: ARRAY
47110: PPUSH
47111: CALL_OW 297
47115: ST_TO_ADDR
// if not Count ( result ) then
47116: LD_VAR 0 5
47120: PPUSH
47121: CALL 43667 0 1
47125: NOT
47126: IFFALSE 47159
// begin result := Join ( result , [ i , tmp ] ) ;
47128: LD_ADDR_VAR 0 5
47132: PUSH
47133: LD_VAR 0 5
47137: PPUSH
47138: LD_VAR 0 6
47142: PUSH
47143: LD_VAR 0 8
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PPUSH
47152: CALL 79599 0 2
47156: ST_TO_ADDR
// continue ;
47157: GO 47080
// end ; if result [ result ] [ 2 ] <= tmp then
47159: LD_VAR 0 5
47163: PUSH
47164: LD_VAR 0 5
47168: ARRAY
47169: PUSH
47170: LD_INT 2
47172: ARRAY
47173: PUSH
47174: LD_VAR 0 8
47178: LESSEQUAL
47179: IFFALSE 47212
// result := Join ( result , [ i , tmp ] ) else
47181: LD_ADDR_VAR 0 5
47185: PUSH
47186: LD_VAR 0 5
47190: PPUSH
47191: LD_VAR 0 6
47195: PUSH
47196: LD_VAR 0 8
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PPUSH
47205: CALL 79599 0 2
47209: ST_TO_ADDR
47210: GO 47297
// begin for j := 1 to Count ( result ) do
47212: LD_ADDR_VAR 0 7
47216: PUSH
47217: DOUBLE
47218: LD_INT 1
47220: DEC
47221: ST_TO_ADDR
47222: LD_VAR 0 5
47226: PPUSH
47227: CALL 43667 0 1
47231: PUSH
47232: FOR_TO
47233: IFFALSE 47295
// begin if tmp < result [ j ] [ 2 ] then
47235: LD_VAR 0 8
47239: PUSH
47240: LD_VAR 0 5
47244: PUSH
47245: LD_VAR 0 7
47249: ARRAY
47250: PUSH
47251: LD_INT 2
47253: ARRAY
47254: LESS
47255: IFFALSE 47293
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47257: LD_ADDR_VAR 0 5
47261: PUSH
47262: LD_VAR 0 5
47266: PPUSH
47267: LD_VAR 0 7
47271: PPUSH
47272: LD_VAR 0 6
47276: PUSH
47277: LD_VAR 0 8
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PPUSH
47286: CALL_OW 2
47290: ST_TO_ADDR
// break ;
47291: GO 47295
// end ; end ;
47293: GO 47232
47295: POP
47296: POP
// end ; end ;
47297: GO 47080
47299: POP
47300: POP
// if result and not asc then
47301: LD_VAR 0 5
47305: IFFALSE 47314
47307: PUSH
47308: LD_VAR 0 3
47312: NOT
47313: AND
47314: IFFALSE 47331
// result := ReverseArray ( result ) ;
47316: LD_ADDR_VAR 0 5
47320: PUSH
47321: LD_VAR 0 5
47325: PPUSH
47326: CALL 74689 0 1
47330: ST_TO_ADDR
// tmp := [ ] ;
47331: LD_ADDR_VAR 0 8
47335: PUSH
47336: EMPTY
47337: ST_TO_ADDR
// if mode then
47338: LD_VAR 0 4
47342: IFFALSE 47406
// begin for i := 1 to result do
47344: LD_ADDR_VAR 0 6
47348: PUSH
47349: DOUBLE
47350: LD_INT 1
47352: DEC
47353: ST_TO_ADDR
47354: LD_VAR 0 5
47358: PUSH
47359: FOR_TO
47360: IFFALSE 47394
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
47362: LD_ADDR_VAR 0 8
47366: PUSH
47367: LD_VAR 0 8
47371: PPUSH
47372: LD_VAR 0 5
47376: PUSH
47377: LD_VAR 0 6
47381: ARRAY
47382: PUSH
47383: LD_INT 1
47385: ARRAY
47386: PPUSH
47387: CALL 79599 0 2
47391: ST_TO_ADDR
47392: GO 47359
47394: POP
47395: POP
// result := tmp ;
47396: LD_ADDR_VAR 0 5
47400: PUSH
47401: LD_VAR 0 8
47405: ST_TO_ADDR
// end ; end ;
47406: LD_VAR 0 5
47410: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
47411: LD_INT 0
47413: PPUSH
47414: PPUSH
47415: PPUSH
47416: PPUSH
// if not list then
47417: LD_VAR 0 3
47421: NOT
47422: IFFALSE 47426
// exit ;
47424: GO 47816
// result := [ ] ;
47426: LD_ADDR_VAR 0 6
47430: PUSH
47431: EMPTY
47432: ST_TO_ADDR
// for i in list do
47433: LD_ADDR_VAR 0 7
47437: PUSH
47438: LD_VAR 0 3
47442: PUSH
47443: FOR_IN
47444: IFFALSE 47646
// begin tmp := GetDistUnitXY ( i , x , y ) ;
47446: LD_ADDR_VAR 0 9
47450: PUSH
47451: LD_VAR 0 7
47455: PPUSH
47456: LD_VAR 0 1
47460: PPUSH
47461: LD_VAR 0 2
47465: PPUSH
47466: CALL_OW 297
47470: ST_TO_ADDR
// if not result then
47471: LD_VAR 0 6
47475: NOT
47476: IFFALSE 47502
// result := [ [ i , tmp ] ] else
47478: LD_ADDR_VAR 0 6
47482: PUSH
47483: LD_VAR 0 7
47487: PUSH
47488: LD_VAR 0 9
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: EMPTY
47498: LIST
47499: ST_TO_ADDR
47500: GO 47644
// begin if result [ result ] [ 2 ] <= tmp then
47502: LD_VAR 0 6
47506: PUSH
47507: LD_VAR 0 6
47511: ARRAY
47512: PUSH
47513: LD_INT 2
47515: ARRAY
47516: PUSH
47517: LD_VAR 0 9
47521: LESSEQUAL
47522: IFFALSE 47564
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
47524: LD_ADDR_VAR 0 6
47528: PUSH
47529: LD_VAR 0 6
47533: PPUSH
47534: LD_VAR 0 6
47538: PUSH
47539: LD_INT 1
47541: PLUS
47542: PPUSH
47543: LD_VAR 0 7
47547: PUSH
47548: LD_VAR 0 9
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PPUSH
47557: CALL_OW 2
47561: ST_TO_ADDR
47562: GO 47644
// for j := 1 to result do
47564: LD_ADDR_VAR 0 8
47568: PUSH
47569: DOUBLE
47570: LD_INT 1
47572: DEC
47573: ST_TO_ADDR
47574: LD_VAR 0 6
47578: PUSH
47579: FOR_TO
47580: IFFALSE 47642
// begin if tmp < result [ j ] [ 2 ] then
47582: LD_VAR 0 9
47586: PUSH
47587: LD_VAR 0 6
47591: PUSH
47592: LD_VAR 0 8
47596: ARRAY
47597: PUSH
47598: LD_INT 2
47600: ARRAY
47601: LESS
47602: IFFALSE 47640
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47604: LD_ADDR_VAR 0 6
47608: PUSH
47609: LD_VAR 0 6
47613: PPUSH
47614: LD_VAR 0 8
47618: PPUSH
47619: LD_VAR 0 7
47623: PUSH
47624: LD_VAR 0 9
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PPUSH
47633: CALL_OW 2
47637: ST_TO_ADDR
// break ;
47638: GO 47642
// end ; end ;
47640: GO 47579
47642: POP
47643: POP
// end ; end ;
47644: GO 47443
47646: POP
47647: POP
// if result and not asc then
47648: LD_VAR 0 6
47652: IFFALSE 47661
47654: PUSH
47655: LD_VAR 0 4
47659: NOT
47660: AND
47661: IFFALSE 47736
// begin tmp := result ;
47663: LD_ADDR_VAR 0 9
47667: PUSH
47668: LD_VAR 0 6
47672: ST_TO_ADDR
// for i = tmp downto 1 do
47673: LD_ADDR_VAR 0 7
47677: PUSH
47678: DOUBLE
47679: LD_VAR 0 9
47683: INC
47684: ST_TO_ADDR
47685: LD_INT 1
47687: PUSH
47688: FOR_DOWNTO
47689: IFFALSE 47734
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47691: LD_ADDR_VAR 0 6
47695: PUSH
47696: LD_VAR 0 6
47700: PPUSH
47701: LD_VAR 0 9
47705: PUSH
47706: LD_VAR 0 7
47710: MINUS
47711: PUSH
47712: LD_INT 1
47714: PLUS
47715: PPUSH
47716: LD_VAR 0 9
47720: PUSH
47721: LD_VAR 0 7
47725: ARRAY
47726: PPUSH
47727: CALL_OW 1
47731: ST_TO_ADDR
47732: GO 47688
47734: POP
47735: POP
// end ; tmp := [ ] ;
47736: LD_ADDR_VAR 0 9
47740: PUSH
47741: EMPTY
47742: ST_TO_ADDR
// if mode then
47743: LD_VAR 0 5
47747: IFFALSE 47816
// begin for i = 1 to result do
47749: LD_ADDR_VAR 0 7
47753: PUSH
47754: DOUBLE
47755: LD_INT 1
47757: DEC
47758: ST_TO_ADDR
47759: LD_VAR 0 6
47763: PUSH
47764: FOR_TO
47765: IFFALSE 47804
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47767: LD_ADDR_VAR 0 9
47771: PUSH
47772: LD_VAR 0 9
47776: PPUSH
47777: LD_VAR 0 7
47781: PPUSH
47782: LD_VAR 0 6
47786: PUSH
47787: LD_VAR 0 7
47791: ARRAY
47792: PUSH
47793: LD_INT 1
47795: ARRAY
47796: PPUSH
47797: CALL_OW 1
47801: ST_TO_ADDR
47802: GO 47764
47804: POP
47805: POP
// result := tmp ;
47806: LD_ADDR_VAR 0 6
47810: PUSH
47811: LD_VAR 0 9
47815: ST_TO_ADDR
// end ; end ;
47816: LD_VAR 0 6
47820: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47821: LD_INT 0
47823: PPUSH
47824: PPUSH
47825: PPUSH
47826: PPUSH
47827: PPUSH
47828: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47829: LD_ADDR_VAR 0 5
47833: PUSH
47834: LD_INT 0
47836: PUSH
47837: LD_INT 0
47839: PUSH
47840: LD_INT 0
47842: PUSH
47843: EMPTY
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: ST_TO_ADDR
// if not x or not y then
47851: LD_VAR 0 2
47855: NOT
47856: IFTRUE 47865
47858: PUSH
47859: LD_VAR 0 3
47863: NOT
47864: OR
47865: IFFALSE 47869
// exit ;
47867: GO 49525
// if not range then
47869: LD_VAR 0 4
47873: NOT
47874: IFFALSE 47884
// range := 10 ;
47876: LD_ADDR_VAR 0 4
47880: PUSH
47881: LD_INT 10
47883: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47884: LD_ADDR_VAR 0 8
47888: PUSH
47889: LD_INT 81
47891: PUSH
47892: LD_VAR 0 1
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 92
47903: PUSH
47904: LD_VAR 0 2
47908: PUSH
47909: LD_VAR 0 3
47913: PUSH
47914: LD_VAR 0 4
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 3
47927: PUSH
47928: LD_INT 21
47930: PUSH
47931: LD_INT 3
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: LIST
47946: PPUSH
47947: CALL_OW 69
47951: ST_TO_ADDR
// if not tmp then
47952: LD_VAR 0 8
47956: NOT
47957: IFFALSE 47961
// exit ;
47959: GO 49525
// for i in tmp do
47961: LD_ADDR_VAR 0 6
47965: PUSH
47966: LD_VAR 0 8
47970: PUSH
47971: FOR_IN
47972: IFFALSE 49500
// begin points := [ 0 , 0 , 0 ] ;
47974: LD_ADDR_VAR 0 9
47978: PUSH
47979: LD_INT 0
47981: PUSH
47982: LD_INT 0
47984: PUSH
47985: LD_INT 0
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: LIST
47992: ST_TO_ADDR
// bpoints := 1 ;
47993: LD_ADDR_VAR 0 10
47997: PUSH
47998: LD_INT 1
48000: ST_TO_ADDR
// case GetType ( i ) of unit_human :
48001: LD_VAR 0 6
48005: PPUSH
48006: CALL_OW 247
48010: PUSH
48011: LD_INT 1
48013: DOUBLE
48014: EQUAL
48015: IFTRUE 48019
48017: GO 48601
48019: POP
// begin if GetClass ( i ) = 1 then
48020: LD_VAR 0 6
48024: PPUSH
48025: CALL_OW 257
48029: PUSH
48030: LD_INT 1
48032: EQUAL
48033: IFFALSE 48054
// points := [ 10 , 5 , 3 ] ;
48035: LD_ADDR_VAR 0 9
48039: PUSH
48040: LD_INT 10
48042: PUSH
48043: LD_INT 5
48045: PUSH
48046: LD_INT 3
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: LIST
48053: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
48054: LD_VAR 0 6
48058: PPUSH
48059: CALL_OW 257
48063: PUSH
48064: LD_INT 2
48066: PUSH
48067: LD_INT 3
48069: PUSH
48070: LD_INT 4
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: LIST
48077: IN
48078: IFFALSE 48099
// points := [ 3 , 2 , 1 ] ;
48080: LD_ADDR_VAR 0 9
48084: PUSH
48085: LD_INT 3
48087: PUSH
48088: LD_INT 2
48090: PUSH
48091: LD_INT 1
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: LIST
48098: ST_TO_ADDR
// if GetClass ( i ) = 5 then
48099: LD_VAR 0 6
48103: PPUSH
48104: CALL_OW 257
48108: PUSH
48109: LD_INT 5
48111: EQUAL
48112: IFFALSE 48133
// points := [ 130 , 5 , 2 ] ;
48114: LD_ADDR_VAR 0 9
48118: PUSH
48119: LD_INT 130
48121: PUSH
48122: LD_INT 5
48124: PUSH
48125: LD_INT 2
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: LIST
48132: ST_TO_ADDR
// if GetClass ( i ) = 8 then
48133: LD_VAR 0 6
48137: PPUSH
48138: CALL_OW 257
48142: PUSH
48143: LD_INT 8
48145: EQUAL
48146: IFFALSE 48167
// points := [ 35 , 35 , 30 ] ;
48148: LD_ADDR_VAR 0 9
48152: PUSH
48153: LD_INT 35
48155: PUSH
48156: LD_INT 35
48158: PUSH
48159: LD_INT 30
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: LIST
48166: ST_TO_ADDR
// if GetClass ( i ) = 9 then
48167: LD_VAR 0 6
48171: PPUSH
48172: CALL_OW 257
48176: PUSH
48177: LD_INT 9
48179: EQUAL
48180: IFFALSE 48201
// points := [ 20 , 55 , 40 ] ;
48182: LD_ADDR_VAR 0 9
48186: PUSH
48187: LD_INT 20
48189: PUSH
48190: LD_INT 55
48192: PUSH
48193: LD_INT 40
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: LIST
48200: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
48201: LD_VAR 0 6
48205: PPUSH
48206: CALL_OW 257
48210: PUSH
48211: LD_INT 12
48213: PUSH
48214: LD_INT 16
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: IN
48221: IFFALSE 48242
// points := [ 5 , 3 , 2 ] ;
48223: LD_ADDR_VAR 0 9
48227: PUSH
48228: LD_INT 5
48230: PUSH
48231: LD_INT 3
48233: PUSH
48234: LD_INT 2
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: LIST
48241: ST_TO_ADDR
// if GetClass ( i ) = 17 then
48242: LD_VAR 0 6
48246: PPUSH
48247: CALL_OW 257
48251: PUSH
48252: LD_INT 17
48254: EQUAL
48255: IFFALSE 48276
// points := [ 100 , 50 , 75 ] ;
48257: LD_ADDR_VAR 0 9
48261: PUSH
48262: LD_INT 100
48264: PUSH
48265: LD_INT 50
48267: PUSH
48268: LD_INT 75
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: LIST
48275: ST_TO_ADDR
// if GetClass ( i ) = 15 then
48276: LD_VAR 0 6
48280: PPUSH
48281: CALL_OW 257
48285: PUSH
48286: LD_INT 15
48288: EQUAL
48289: IFFALSE 48310
// points := [ 10 , 5 , 3 ] ;
48291: LD_ADDR_VAR 0 9
48295: PUSH
48296: LD_INT 10
48298: PUSH
48299: LD_INT 5
48301: PUSH
48302: LD_INT 3
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: LIST
48309: ST_TO_ADDR
// if GetClass ( i ) = 14 then
48310: LD_VAR 0 6
48314: PPUSH
48315: CALL_OW 257
48319: PUSH
48320: LD_INT 14
48322: EQUAL
48323: IFFALSE 48344
// points := [ 10 , 0 , 0 ] ;
48325: LD_ADDR_VAR 0 9
48329: PUSH
48330: LD_INT 10
48332: PUSH
48333: LD_INT 0
48335: PUSH
48336: LD_INT 0
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: LIST
48343: ST_TO_ADDR
// if GetClass ( i ) = 11 then
48344: LD_VAR 0 6
48348: PPUSH
48349: CALL_OW 257
48353: PUSH
48354: LD_INT 11
48356: EQUAL
48357: IFFALSE 48378
// points := [ 30 , 10 , 5 ] ;
48359: LD_ADDR_VAR 0 9
48363: PUSH
48364: LD_INT 30
48366: PUSH
48367: LD_INT 10
48369: PUSH
48370: LD_INT 5
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: LIST
48377: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
48378: LD_VAR 0 1
48382: PPUSH
48383: LD_INT 5
48385: PPUSH
48386: CALL_OW 321
48390: PUSH
48391: LD_INT 2
48393: EQUAL
48394: IFFALSE 48411
// bpoints := bpoints * 1.8 ;
48396: LD_ADDR_VAR 0 10
48400: PUSH
48401: LD_VAR 0 10
48405: PUSH
48406: LD_REAL  1.80000000000000E+0000
48409: MUL
48410: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
48411: LD_VAR 0 6
48415: PPUSH
48416: CALL_OW 257
48420: PUSH
48421: LD_INT 1
48423: PUSH
48424: LD_INT 2
48426: PUSH
48427: LD_INT 3
48429: PUSH
48430: LD_INT 4
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: IN
48439: IFFALSE 48459
48441: PUSH
48442: LD_VAR 0 1
48446: PPUSH
48447: LD_INT 51
48449: PPUSH
48450: CALL_OW 321
48454: PUSH
48455: LD_INT 2
48457: EQUAL
48458: AND
48459: IFFALSE 48476
// bpoints := bpoints * 1.2 ;
48461: LD_ADDR_VAR 0 10
48465: PUSH
48466: LD_VAR 0 10
48470: PUSH
48471: LD_REAL  1.20000000000000E+0000
48474: MUL
48475: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
48476: LD_VAR 0 6
48480: PPUSH
48481: CALL_OW 257
48485: PUSH
48486: LD_INT 5
48488: PUSH
48489: LD_INT 7
48491: PUSH
48492: LD_INT 9
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: LIST
48499: IN
48500: IFFALSE 48520
48502: PUSH
48503: LD_VAR 0 1
48507: PPUSH
48508: LD_INT 52
48510: PPUSH
48511: CALL_OW 321
48515: PUSH
48516: LD_INT 2
48518: EQUAL
48519: AND
48520: IFFALSE 48537
// bpoints := bpoints * 1.5 ;
48522: LD_ADDR_VAR 0 10
48526: PUSH
48527: LD_VAR 0 10
48531: PUSH
48532: LD_REAL  1.50000000000000E+0000
48535: MUL
48536: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
48537: LD_VAR 0 1
48541: PPUSH
48542: LD_INT 66
48544: PPUSH
48545: CALL_OW 321
48549: PUSH
48550: LD_INT 2
48552: EQUAL
48553: IFFALSE 48570
// bpoints := bpoints * 1.1 ;
48555: LD_ADDR_VAR 0 10
48559: PUSH
48560: LD_VAR 0 10
48564: PUSH
48565: LD_REAL  1.10000000000000E+0000
48568: MUL
48569: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
48570: LD_ADDR_VAR 0 10
48574: PUSH
48575: LD_VAR 0 10
48579: PUSH
48580: LD_VAR 0 6
48584: PPUSH
48585: LD_INT 1
48587: PPUSH
48588: CALL_OW 259
48592: PUSH
48593: LD_REAL  1.15000000000000E+0000
48596: MUL
48597: MUL
48598: ST_TO_ADDR
// end ; unit_vehicle :
48599: GO 49429
48601: LD_INT 2
48603: DOUBLE
48604: EQUAL
48605: IFTRUE 48609
48607: GO 49417
48609: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
48610: LD_VAR 0 6
48614: PPUSH
48615: CALL_OW 264
48619: PUSH
48620: LD_INT 2
48622: PUSH
48623: LD_INT 42
48625: PUSH
48626: LD_INT 24
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: LIST
48633: IN
48634: IFFALSE 48655
// points := [ 25 , 5 , 3 ] ;
48636: LD_ADDR_VAR 0 9
48640: PUSH
48641: LD_INT 25
48643: PUSH
48644: LD_INT 5
48646: PUSH
48647: LD_INT 3
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: LIST
48654: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48655: LD_VAR 0 6
48659: PPUSH
48660: CALL_OW 264
48664: PUSH
48665: LD_INT 4
48667: PUSH
48668: LD_INT 43
48670: PUSH
48671: LD_INT 25
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: LIST
48678: IN
48679: IFFALSE 48700
// points := [ 40 , 15 , 5 ] ;
48681: LD_ADDR_VAR 0 9
48685: PUSH
48686: LD_INT 40
48688: PUSH
48689: LD_INT 15
48691: PUSH
48692: LD_INT 5
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: LIST
48699: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48700: LD_VAR 0 6
48704: PPUSH
48705: CALL_OW 264
48709: PUSH
48710: LD_INT 3
48712: PUSH
48713: LD_INT 23
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: IN
48720: IFFALSE 48741
// points := [ 7 , 25 , 8 ] ;
48722: LD_ADDR_VAR 0 9
48726: PUSH
48727: LD_INT 7
48729: PUSH
48730: LD_INT 25
48732: PUSH
48733: LD_INT 8
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: LIST
48740: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48741: LD_VAR 0 6
48745: PPUSH
48746: CALL_OW 264
48750: PUSH
48751: LD_INT 5
48753: PUSH
48754: LD_INT 27
48756: PUSH
48757: LD_INT 44
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: LIST
48764: IN
48765: IFFALSE 48786
// points := [ 14 , 50 , 16 ] ;
48767: LD_ADDR_VAR 0 9
48771: PUSH
48772: LD_INT 14
48774: PUSH
48775: LD_INT 50
48777: PUSH
48778: LD_INT 16
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: LIST
48785: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48786: LD_VAR 0 6
48790: PPUSH
48791: CALL_OW 264
48795: PUSH
48796: LD_INT 6
48798: PUSH
48799: LD_INT 46
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: IN
48806: IFFALSE 48827
// points := [ 32 , 120 , 70 ] ;
48808: LD_ADDR_VAR 0 9
48812: PUSH
48813: LD_INT 32
48815: PUSH
48816: LD_INT 120
48818: PUSH
48819: LD_INT 70
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: LIST
48826: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48827: LD_VAR 0 6
48831: PPUSH
48832: CALL_OW 264
48836: PUSH
48837: LD_INT 7
48839: PUSH
48840: LD_INT 28
48842: PUSH
48843: LD_INT 45
48845: PUSH
48846: LD_INT 92
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: IN
48855: IFFALSE 48876
// points := [ 35 , 20 , 45 ] ;
48857: LD_ADDR_VAR 0 9
48861: PUSH
48862: LD_INT 35
48864: PUSH
48865: LD_INT 20
48867: PUSH
48868: LD_INT 45
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: LIST
48875: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48876: LD_VAR 0 6
48880: PPUSH
48881: CALL_OW 264
48885: PUSH
48886: LD_INT 47
48888: PUSH
48889: EMPTY
48890: LIST
48891: IN
48892: IFFALSE 48913
// points := [ 67 , 45 , 75 ] ;
48894: LD_ADDR_VAR 0 9
48898: PUSH
48899: LD_INT 67
48901: PUSH
48902: LD_INT 45
48904: PUSH
48905: LD_INT 75
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: LIST
48912: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48913: LD_VAR 0 6
48917: PPUSH
48918: CALL_OW 264
48922: PUSH
48923: LD_INT 26
48925: PUSH
48926: EMPTY
48927: LIST
48928: IN
48929: IFFALSE 48950
// points := [ 120 , 30 , 80 ] ;
48931: LD_ADDR_VAR 0 9
48935: PUSH
48936: LD_INT 120
48938: PUSH
48939: LD_INT 30
48941: PUSH
48942: LD_INT 80
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: LIST
48949: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48950: LD_VAR 0 6
48954: PPUSH
48955: CALL_OW 264
48959: PUSH
48960: LD_INT 22
48962: PUSH
48963: EMPTY
48964: LIST
48965: IN
48966: IFFALSE 48987
// points := [ 40 , 1 , 1 ] ;
48968: LD_ADDR_VAR 0 9
48972: PUSH
48973: LD_INT 40
48975: PUSH
48976: LD_INT 1
48978: PUSH
48979: LD_INT 1
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: LIST
48986: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48987: LD_VAR 0 6
48991: PPUSH
48992: CALL_OW 264
48996: PUSH
48997: LD_INT 29
48999: PUSH
49000: EMPTY
49001: LIST
49002: IN
49003: IFFALSE 49024
// points := [ 70 , 200 , 400 ] ;
49005: LD_ADDR_VAR 0 9
49009: PUSH
49010: LD_INT 70
49012: PUSH
49013: LD_INT 200
49015: PUSH
49016: LD_INT 400
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: LIST
49023: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
49024: LD_VAR 0 6
49028: PPUSH
49029: CALL_OW 264
49033: PUSH
49034: LD_INT 14
49036: PUSH
49037: LD_INT 53
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: IN
49044: IFFALSE 49065
// points := [ 40 , 10 , 20 ] ;
49046: LD_ADDR_VAR 0 9
49050: PUSH
49051: LD_INT 40
49053: PUSH
49054: LD_INT 10
49056: PUSH
49057: LD_INT 20
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: LIST
49064: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
49065: LD_VAR 0 6
49069: PPUSH
49070: CALL_OW 264
49074: PUSH
49075: LD_INT 9
49077: PUSH
49078: EMPTY
49079: LIST
49080: IN
49081: IFFALSE 49102
// points := [ 5 , 70 , 20 ] ;
49083: LD_ADDR_VAR 0 9
49087: PUSH
49088: LD_INT 5
49090: PUSH
49091: LD_INT 70
49093: PUSH
49094: LD_INT 20
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: LIST
49101: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
49102: LD_VAR 0 6
49106: PPUSH
49107: CALL_OW 264
49111: PUSH
49112: LD_INT 10
49114: PUSH
49115: EMPTY
49116: LIST
49117: IN
49118: IFFALSE 49139
// points := [ 35 , 110 , 70 ] ;
49120: LD_ADDR_VAR 0 9
49124: PUSH
49125: LD_INT 35
49127: PUSH
49128: LD_INT 110
49130: PUSH
49131: LD_INT 70
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: LIST
49138: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
49139: LD_VAR 0 6
49143: PPUSH
49144: CALL_OW 265
49148: PUSH
49149: LD_INT 25
49151: EQUAL
49152: IFFALSE 49173
// points := [ 80 , 65 , 100 ] ;
49154: LD_ADDR_VAR 0 9
49158: PUSH
49159: LD_INT 80
49161: PUSH
49162: LD_INT 65
49164: PUSH
49165: LD_INT 100
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: LIST
49172: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
49173: LD_VAR 0 6
49177: PPUSH
49178: CALL_OW 263
49182: PUSH
49183: LD_INT 1
49185: EQUAL
49186: IFFALSE 49221
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
49188: LD_ADDR_VAR 0 10
49192: PUSH
49193: LD_VAR 0 10
49197: PUSH
49198: LD_VAR 0 6
49202: PPUSH
49203: CALL_OW 311
49207: PPUSH
49208: LD_INT 3
49210: PPUSH
49211: CALL_OW 259
49215: PUSH
49216: LD_INT 4
49218: MUL
49219: MUL
49220: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
49221: LD_VAR 0 6
49225: PPUSH
49226: CALL_OW 263
49230: PUSH
49231: LD_INT 2
49233: EQUAL
49234: IFFALSE 49285
// begin j := IsControledBy ( i ) ;
49236: LD_ADDR_VAR 0 7
49240: PUSH
49241: LD_VAR 0 6
49245: PPUSH
49246: CALL_OW 312
49250: ST_TO_ADDR
// if j then
49251: LD_VAR 0 7
49255: IFFALSE 49285
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
49257: LD_ADDR_VAR 0 10
49261: PUSH
49262: LD_VAR 0 10
49266: PUSH
49267: LD_VAR 0 7
49271: PPUSH
49272: LD_INT 3
49274: PPUSH
49275: CALL_OW 259
49279: PUSH
49280: LD_INT 3
49282: MUL
49283: MUL
49284: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
49285: LD_VAR 0 6
49289: PPUSH
49290: CALL_OW 264
49294: PUSH
49295: LD_INT 5
49297: PUSH
49298: LD_INT 6
49300: PUSH
49301: LD_INT 46
49303: PUSH
49304: LD_INT 44
49306: PUSH
49307: LD_INT 47
49309: PUSH
49310: LD_INT 45
49312: PUSH
49313: LD_INT 28
49315: PUSH
49316: LD_INT 7
49318: PUSH
49319: LD_INT 27
49321: PUSH
49322: LD_INT 29
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: IN
49337: IFFALSE 49357
49339: PUSH
49340: LD_VAR 0 1
49344: PPUSH
49345: LD_INT 52
49347: PPUSH
49348: CALL_OW 321
49352: PUSH
49353: LD_INT 2
49355: EQUAL
49356: AND
49357: IFFALSE 49374
// bpoints := bpoints * 1.2 ;
49359: LD_ADDR_VAR 0 10
49363: PUSH
49364: LD_VAR 0 10
49368: PUSH
49369: LD_REAL  1.20000000000000E+0000
49372: MUL
49373: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
49374: LD_VAR 0 6
49378: PPUSH
49379: CALL_OW 264
49383: PUSH
49384: LD_INT 6
49386: PUSH
49387: LD_INT 46
49389: PUSH
49390: LD_INT 47
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: LIST
49397: IN
49398: IFFALSE 49415
// bpoints := bpoints * 1.2 ;
49400: LD_ADDR_VAR 0 10
49404: PUSH
49405: LD_VAR 0 10
49409: PUSH
49410: LD_REAL  1.20000000000000E+0000
49413: MUL
49414: ST_TO_ADDR
// end ; unit_building :
49415: GO 49429
49417: LD_INT 3
49419: DOUBLE
49420: EQUAL
49421: IFTRUE 49425
49423: GO 49428
49425: POP
// ; end ;
49426: GO 49429
49428: POP
// for j = 1 to 3 do
49429: LD_ADDR_VAR 0 7
49433: PUSH
49434: DOUBLE
49435: LD_INT 1
49437: DEC
49438: ST_TO_ADDR
49439: LD_INT 3
49441: PUSH
49442: FOR_TO
49443: IFFALSE 49496
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
49445: LD_ADDR_VAR 0 5
49449: PUSH
49450: LD_VAR 0 5
49454: PPUSH
49455: LD_VAR 0 7
49459: PPUSH
49460: LD_VAR 0 5
49464: PUSH
49465: LD_VAR 0 7
49469: ARRAY
49470: PUSH
49471: LD_VAR 0 9
49475: PUSH
49476: LD_VAR 0 7
49480: ARRAY
49481: PUSH
49482: LD_VAR 0 10
49486: MUL
49487: PLUS
49488: PPUSH
49489: CALL_OW 1
49493: ST_TO_ADDR
49494: GO 49442
49496: POP
49497: POP
// end ;
49498: GO 47971
49500: POP
49501: POP
// result := Replace ( result , 4 , tmp ) ;
49502: LD_ADDR_VAR 0 5
49506: PUSH
49507: LD_VAR 0 5
49511: PPUSH
49512: LD_INT 4
49514: PPUSH
49515: LD_VAR 0 8
49519: PPUSH
49520: CALL_OW 1
49524: ST_TO_ADDR
// end ;
49525: LD_VAR 0 5
49529: RET
// export function DangerAtRange ( unit , range ) ; begin
49530: LD_INT 0
49532: PPUSH
// if not unit then
49533: LD_VAR 0 1
49537: NOT
49538: IFFALSE 49542
// exit ;
49540: GO 49587
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
49542: LD_ADDR_VAR 0 3
49546: PUSH
49547: LD_VAR 0 1
49551: PPUSH
49552: CALL_OW 255
49556: PPUSH
49557: LD_VAR 0 1
49561: PPUSH
49562: CALL_OW 250
49566: PPUSH
49567: LD_VAR 0 1
49571: PPUSH
49572: CALL_OW 251
49576: PPUSH
49577: LD_VAR 0 2
49581: PPUSH
49582: CALL 47821 0 4
49586: ST_TO_ADDR
// end ;
49587: LD_VAR 0 3
49591: RET
// export function DangerInArea ( side , area ) ; begin
49592: LD_INT 0
49594: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
49595: LD_ADDR_VAR 0 3
49599: PUSH
49600: LD_VAR 0 2
49604: PPUSH
49605: LD_INT 81
49607: PUSH
49608: LD_VAR 0 1
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PPUSH
49617: CALL_OW 70
49621: ST_TO_ADDR
// end ;
49622: LD_VAR 0 3
49626: RET
// export function IsExtension ( b ) ; begin
49627: LD_INT 0
49629: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
49630: LD_ADDR_VAR 0 2
49634: PUSH
49635: LD_VAR 0 1
49639: PUSH
49640: LD_INT 23
49642: PUSH
49643: LD_INT 20
49645: PUSH
49646: LD_INT 22
49648: PUSH
49649: LD_INT 17
49651: PUSH
49652: LD_INT 24
49654: PUSH
49655: LD_INT 21
49657: PUSH
49658: LD_INT 19
49660: PUSH
49661: LD_INT 16
49663: PUSH
49664: LD_INT 25
49666: PUSH
49667: LD_INT 18
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: IN
49682: ST_TO_ADDR
// end ;
49683: LD_VAR 0 2
49687: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
49688: LD_INT 0
49690: PPUSH
49691: PPUSH
49692: PPUSH
// result := [ ] ;
49693: LD_ADDR_VAR 0 4
49697: PUSH
49698: EMPTY
49699: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49700: LD_ADDR_VAR 0 5
49704: PUSH
49705: LD_VAR 0 2
49709: PPUSH
49710: LD_INT 21
49712: PUSH
49713: LD_INT 3
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PPUSH
49720: CALL_OW 70
49724: ST_TO_ADDR
// if not tmp then
49725: LD_VAR 0 5
49729: NOT
49730: IFFALSE 49734
// exit ;
49732: GO 49798
// if checkLink then
49734: LD_VAR 0 3
49738: IFFALSE 49788
// begin for i in tmp do
49740: LD_ADDR_VAR 0 6
49744: PUSH
49745: LD_VAR 0 5
49749: PUSH
49750: FOR_IN
49751: IFFALSE 49786
// if GetBase ( i ) <> base then
49753: LD_VAR 0 6
49757: PPUSH
49758: CALL_OW 274
49762: PUSH
49763: LD_VAR 0 1
49767: NONEQUAL
49768: IFFALSE 49784
// ComLinkToBase ( base , i ) ;
49770: LD_VAR 0 1
49774: PPUSH
49775: LD_VAR 0 6
49779: PPUSH
49780: CALL_OW 169
49784: GO 49750
49786: POP
49787: POP
// end ; result := tmp ;
49788: LD_ADDR_VAR 0 4
49792: PUSH
49793: LD_VAR 0 5
49797: ST_TO_ADDR
// end ;
49798: LD_VAR 0 4
49802: RET
// export function ComComplete ( units , b ) ; var i ; begin
49803: LD_INT 0
49805: PPUSH
49806: PPUSH
// if not units then
49807: LD_VAR 0 1
49811: NOT
49812: IFFALSE 49816
// exit ;
49814: GO 49906
// for i in units do
49816: LD_ADDR_VAR 0 4
49820: PUSH
49821: LD_VAR 0 1
49825: PUSH
49826: FOR_IN
49827: IFFALSE 49904
// if BuildingStatus ( b ) = bs_build then
49829: LD_VAR 0 2
49833: PPUSH
49834: CALL_OW 461
49838: PUSH
49839: LD_INT 1
49841: EQUAL
49842: IFFALSE 49902
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49844: LD_VAR 0 4
49848: PPUSH
49849: LD_STRING h
49851: PUSH
49852: LD_VAR 0 2
49856: PPUSH
49857: CALL_OW 250
49861: PUSH
49862: LD_VAR 0 2
49866: PPUSH
49867: CALL_OW 251
49871: PUSH
49872: LD_VAR 0 2
49876: PUSH
49877: LD_INT 0
49879: PUSH
49880: LD_INT 0
49882: PUSH
49883: LD_INT 0
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: PUSH
49895: EMPTY
49896: LIST
49897: PPUSH
49898: CALL_OW 446
49902: GO 49826
49904: POP
49905: POP
// end ;
49906: LD_VAR 0 3
49910: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49911: LD_INT 0
49913: PPUSH
49914: PPUSH
49915: PPUSH
49916: PPUSH
49917: PPUSH
49918: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49919: LD_VAR 0 1
49923: NOT
49924: IFTRUE 49941
49926: PUSH
49927: LD_VAR 0 1
49931: PPUSH
49932: CALL_OW 263
49936: PUSH
49937: LD_INT 2
49939: NONEQUAL
49940: OR
49941: IFFALSE 49945
// exit ;
49943: GO 50261
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49945: LD_ADDR_VAR 0 6
49949: PUSH
49950: LD_INT 22
49952: PUSH
49953: LD_VAR 0 1
49957: PPUSH
49958: CALL_OW 255
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 2
49969: PUSH
49970: LD_INT 30
49972: PUSH
49973: LD_INT 36
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 34
49982: PUSH
49983: LD_INT 31
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: LIST
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PPUSH
49999: CALL_OW 69
50003: ST_TO_ADDR
// if not tmp then
50004: LD_VAR 0 6
50008: NOT
50009: IFFALSE 50013
// exit ;
50011: GO 50261
// result := [ ] ;
50013: LD_ADDR_VAR 0 2
50017: PUSH
50018: EMPTY
50019: ST_TO_ADDR
// for i in tmp do
50020: LD_ADDR_VAR 0 3
50024: PUSH
50025: LD_VAR 0 6
50029: PUSH
50030: FOR_IN
50031: IFFALSE 50102
// begin t := UnitsInside ( i ) ;
50033: LD_ADDR_VAR 0 4
50037: PUSH
50038: LD_VAR 0 3
50042: PPUSH
50043: CALL_OW 313
50047: ST_TO_ADDR
// if t then
50048: LD_VAR 0 4
50052: IFFALSE 50100
// for j in t do
50054: LD_ADDR_VAR 0 7
50058: PUSH
50059: LD_VAR 0 4
50063: PUSH
50064: FOR_IN
50065: IFFALSE 50098
// result := Replace ( result , result + 1 , j ) ;
50067: LD_ADDR_VAR 0 2
50071: PUSH
50072: LD_VAR 0 2
50076: PPUSH
50077: LD_VAR 0 2
50081: PUSH
50082: LD_INT 1
50084: PLUS
50085: PPUSH
50086: LD_VAR 0 7
50090: PPUSH
50091: CALL_OW 1
50095: ST_TO_ADDR
50096: GO 50064
50098: POP
50099: POP
// end ;
50100: GO 50030
50102: POP
50103: POP
// if not result then
50104: LD_VAR 0 2
50108: NOT
50109: IFFALSE 50113
// exit ;
50111: GO 50261
// mech := result [ 1 ] ;
50113: LD_ADDR_VAR 0 5
50117: PUSH
50118: LD_VAR 0 2
50122: PUSH
50123: LD_INT 1
50125: ARRAY
50126: ST_TO_ADDR
// if result > 1 then
50127: LD_VAR 0 2
50131: PUSH
50132: LD_INT 1
50134: GREATER
50135: IFFALSE 50247
// begin for i = 2 to result do
50137: LD_ADDR_VAR 0 3
50141: PUSH
50142: DOUBLE
50143: LD_INT 2
50145: DEC
50146: ST_TO_ADDR
50147: LD_VAR 0 2
50151: PUSH
50152: FOR_TO
50153: IFFALSE 50245
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
50155: LD_ADDR_VAR 0 4
50159: PUSH
50160: LD_VAR 0 2
50164: PUSH
50165: LD_VAR 0 3
50169: ARRAY
50170: PPUSH
50171: LD_INT 3
50173: PPUSH
50174: CALL_OW 259
50178: PUSH
50179: LD_VAR 0 2
50183: PUSH
50184: LD_VAR 0 3
50188: ARRAY
50189: PPUSH
50190: CALL_OW 432
50194: MINUS
50195: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
50196: LD_VAR 0 4
50200: PUSH
50201: LD_VAR 0 5
50205: PPUSH
50206: LD_INT 3
50208: PPUSH
50209: CALL_OW 259
50213: PUSH
50214: LD_VAR 0 5
50218: PPUSH
50219: CALL_OW 432
50223: MINUS
50224: GREATEREQUAL
50225: IFFALSE 50243
// mech := result [ i ] ;
50227: LD_ADDR_VAR 0 5
50231: PUSH
50232: LD_VAR 0 2
50236: PUSH
50237: LD_VAR 0 3
50241: ARRAY
50242: ST_TO_ADDR
// end ;
50243: GO 50152
50245: POP
50246: POP
// end ; ComLinkTo ( vehicle , mech ) ;
50247: LD_VAR 0 1
50251: PPUSH
50252: LD_VAR 0 5
50256: PPUSH
50257: CALL_OW 135
// end ;
50261: LD_VAR 0 2
50265: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
50266: LD_INT 0
50268: PPUSH
50269: PPUSH
50270: PPUSH
50271: PPUSH
50272: PPUSH
50273: PPUSH
50274: PPUSH
50275: PPUSH
50276: PPUSH
50277: PPUSH
50278: PPUSH
50279: PPUSH
50280: PPUSH
// result := [ ] ;
50281: LD_ADDR_VAR 0 7
50285: PUSH
50286: EMPTY
50287: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
50288: LD_VAR 0 1
50292: PPUSH
50293: CALL_OW 266
50297: PUSH
50298: LD_INT 0
50300: PUSH
50301: LD_INT 1
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: IN
50308: NOT
50309: IFFALSE 50313
// exit ;
50311: GO 51953
// if name then
50313: LD_VAR 0 3
50317: IFFALSE 50333
// SetBName ( base_dep , name ) ;
50319: LD_VAR 0 1
50323: PPUSH
50324: LD_VAR 0 3
50328: PPUSH
50329: CALL_OW 500
// base := GetBase ( base_dep ) ;
50333: LD_ADDR_VAR 0 15
50337: PUSH
50338: LD_VAR 0 1
50342: PPUSH
50343: CALL_OW 274
50347: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
50348: LD_ADDR_VAR 0 16
50352: PUSH
50353: LD_VAR 0 1
50357: PPUSH
50358: CALL_OW 255
50362: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
50363: LD_ADDR_VAR 0 17
50367: PUSH
50368: LD_VAR 0 1
50372: PPUSH
50373: CALL_OW 248
50377: ST_TO_ADDR
// if sources then
50378: LD_VAR 0 5
50382: IFFALSE 50429
// for i = 1 to 3 do
50384: LD_ADDR_VAR 0 8
50388: PUSH
50389: DOUBLE
50390: LD_INT 1
50392: DEC
50393: ST_TO_ADDR
50394: LD_INT 3
50396: PUSH
50397: FOR_TO
50398: IFFALSE 50427
// AddResourceType ( base , i , sources [ i ] ) ;
50400: LD_VAR 0 15
50404: PPUSH
50405: LD_VAR 0 8
50409: PPUSH
50410: LD_VAR 0 5
50414: PUSH
50415: LD_VAR 0 8
50419: ARRAY
50420: PPUSH
50421: CALL_OW 276
50425: GO 50397
50427: POP
50428: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
50429: LD_ADDR_VAR 0 18
50433: PUSH
50434: LD_VAR 0 15
50438: PPUSH
50439: LD_VAR 0 2
50443: PPUSH
50444: LD_INT 1
50446: PPUSH
50447: CALL 49688 0 3
50451: ST_TO_ADDR
// InitHc ;
50452: CALL_OW 19
// InitUc ;
50456: CALL_OW 18
// uc_side := side ;
50460: LD_ADDR_OWVAR 20
50464: PUSH
50465: LD_VAR 0 16
50469: ST_TO_ADDR
// uc_nation := nation ;
50470: LD_ADDR_OWVAR 21
50474: PUSH
50475: LD_VAR 0 17
50479: ST_TO_ADDR
// if buildings then
50480: LD_VAR 0 18
50484: IFFALSE 51812
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
50486: LD_ADDR_VAR 0 19
50490: PUSH
50491: LD_VAR 0 18
50495: PPUSH
50496: LD_INT 2
50498: PUSH
50499: LD_INT 30
50501: PUSH
50502: LD_INT 29
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 30
50511: PUSH
50512: LD_INT 30
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: LIST
50523: PPUSH
50524: CALL_OW 72
50528: ST_TO_ADDR
// if tmp then
50529: LD_VAR 0 19
50533: IFFALSE 50581
// for i in tmp do
50535: LD_ADDR_VAR 0 8
50539: PUSH
50540: LD_VAR 0 19
50544: PUSH
50545: FOR_IN
50546: IFFALSE 50579
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
50548: LD_VAR 0 8
50552: PPUSH
50553: CALL_OW 250
50557: PPUSH
50558: LD_VAR 0 8
50562: PPUSH
50563: CALL_OW 251
50567: PPUSH
50568: LD_VAR 0 16
50572: PPUSH
50573: CALL_OW 441
50577: GO 50545
50579: POP
50580: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
50581: LD_VAR 0 18
50585: PPUSH
50586: LD_INT 2
50588: PUSH
50589: LD_INT 30
50591: PUSH
50592: LD_INT 32
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 30
50601: PUSH
50602: LD_INT 33
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: LIST
50613: PPUSH
50614: CALL_OW 72
50618: IFFALSE 50706
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
50620: LD_ADDR_VAR 0 8
50624: PUSH
50625: LD_VAR 0 18
50629: PPUSH
50630: LD_INT 2
50632: PUSH
50633: LD_INT 30
50635: PUSH
50636: LD_INT 32
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 30
50645: PUSH
50646: LD_INT 33
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: LIST
50657: PPUSH
50658: CALL_OW 72
50662: PUSH
50663: FOR_IN
50664: IFFALSE 50704
// begin if not GetBWeapon ( i ) then
50666: LD_VAR 0 8
50670: PPUSH
50671: CALL_OW 269
50675: NOT
50676: IFFALSE 50702
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50678: LD_VAR 0 8
50682: PPUSH
50683: LD_VAR 0 8
50687: PPUSH
50688: LD_VAR 0 2
50692: PPUSH
50693: CALL 51958 0 2
50697: PPUSH
50698: CALL_OW 431
// end ;
50702: GO 50663
50704: POP
50705: POP
// end ; for i = 1 to personel do
50706: LD_ADDR_VAR 0 8
50710: PUSH
50711: DOUBLE
50712: LD_INT 1
50714: DEC
50715: ST_TO_ADDR
50716: LD_VAR 0 6
50720: PUSH
50721: FOR_TO
50722: IFFALSE 51792
// begin if i > 4 then
50724: LD_VAR 0 8
50728: PUSH
50729: LD_INT 4
50731: GREATER
50732: IFFALSE 50736
// break ;
50734: GO 51792
// case i of 1 :
50736: LD_VAR 0 8
50740: PUSH
50741: LD_INT 1
50743: DOUBLE
50744: EQUAL
50745: IFTRUE 50749
50747: GO 50829
50749: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50750: LD_ADDR_VAR 0 12
50754: PUSH
50755: LD_VAR 0 18
50759: PPUSH
50760: LD_INT 22
50762: PUSH
50763: LD_VAR 0 16
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 58
50774: PUSH
50775: EMPTY
50776: LIST
50777: PUSH
50778: LD_INT 2
50780: PUSH
50781: LD_INT 30
50783: PUSH
50784: LD_INT 32
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 30
50793: PUSH
50794: LD_INT 4
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 30
50803: PUSH
50804: LD_INT 5
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: LIST
50821: PPUSH
50822: CALL_OW 72
50826: ST_TO_ADDR
50827: GO 51051
50829: LD_INT 2
50831: DOUBLE
50832: EQUAL
50833: IFTRUE 50837
50835: GO 50899
50837: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50838: LD_ADDR_VAR 0 12
50842: PUSH
50843: LD_VAR 0 18
50847: PPUSH
50848: LD_INT 22
50850: PUSH
50851: LD_VAR 0 16
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 2
50862: PUSH
50863: LD_INT 30
50865: PUSH
50866: LD_INT 0
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 30
50875: PUSH
50876: LD_INT 1
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: LIST
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PPUSH
50892: CALL_OW 72
50896: ST_TO_ADDR
50897: GO 51051
50899: LD_INT 3
50901: DOUBLE
50902: EQUAL
50903: IFTRUE 50907
50905: GO 50969
50907: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50908: LD_ADDR_VAR 0 12
50912: PUSH
50913: LD_VAR 0 18
50917: PPUSH
50918: LD_INT 22
50920: PUSH
50921: LD_VAR 0 16
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 2
50932: PUSH
50933: LD_INT 30
50935: PUSH
50936: LD_INT 2
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 30
50945: PUSH
50946: LD_INT 3
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: LIST
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PPUSH
50962: CALL_OW 72
50966: ST_TO_ADDR
50967: GO 51051
50969: LD_INT 4
50971: DOUBLE
50972: EQUAL
50973: IFTRUE 50977
50975: GO 51050
50977: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50978: LD_ADDR_VAR 0 12
50982: PUSH
50983: LD_VAR 0 18
50987: PPUSH
50988: LD_INT 22
50990: PUSH
50991: LD_VAR 0 16
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 2
51002: PUSH
51003: LD_INT 30
51005: PUSH
51006: LD_INT 6
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 30
51015: PUSH
51016: LD_INT 7
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 30
51025: PUSH
51026: LD_INT 8
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PPUSH
51043: CALL_OW 72
51047: ST_TO_ADDR
51048: GO 51051
51050: POP
// if i = 1 then
51051: LD_VAR 0 8
51055: PUSH
51056: LD_INT 1
51058: EQUAL
51059: IFFALSE 51170
// begin tmp := [ ] ;
51061: LD_ADDR_VAR 0 19
51065: PUSH
51066: EMPTY
51067: ST_TO_ADDR
// for j in f do
51068: LD_ADDR_VAR 0 9
51072: PUSH
51073: LD_VAR 0 12
51077: PUSH
51078: FOR_IN
51079: IFFALSE 51152
// if GetBType ( j ) = b_bunker then
51081: LD_VAR 0 9
51085: PPUSH
51086: CALL_OW 266
51090: PUSH
51091: LD_INT 32
51093: EQUAL
51094: IFFALSE 51121
// tmp := Insert ( tmp , 1 , j ) else
51096: LD_ADDR_VAR 0 19
51100: PUSH
51101: LD_VAR 0 19
51105: PPUSH
51106: LD_INT 1
51108: PPUSH
51109: LD_VAR 0 9
51113: PPUSH
51114: CALL_OW 2
51118: ST_TO_ADDR
51119: GO 51150
// tmp := Insert ( tmp , tmp + 1 , j ) ;
51121: LD_ADDR_VAR 0 19
51125: PUSH
51126: LD_VAR 0 19
51130: PPUSH
51131: LD_VAR 0 19
51135: PUSH
51136: LD_INT 1
51138: PLUS
51139: PPUSH
51140: LD_VAR 0 9
51144: PPUSH
51145: CALL_OW 2
51149: ST_TO_ADDR
51150: GO 51078
51152: POP
51153: POP
// if tmp then
51154: LD_VAR 0 19
51158: IFFALSE 51170
// f := tmp ;
51160: LD_ADDR_VAR 0 12
51164: PUSH
51165: LD_VAR 0 19
51169: ST_TO_ADDR
// end ; x := personel [ i ] ;
51170: LD_ADDR_VAR 0 13
51174: PUSH
51175: LD_VAR 0 6
51179: PUSH
51180: LD_VAR 0 8
51184: ARRAY
51185: ST_TO_ADDR
// if x = - 1 then
51186: LD_VAR 0 13
51190: PUSH
51191: LD_INT 1
51193: NEG
51194: EQUAL
51195: IFFALSE 51406
// begin for j in f do
51197: LD_ADDR_VAR 0 9
51201: PUSH
51202: LD_VAR 0 12
51206: PUSH
51207: FOR_IN
51208: IFFALSE 51402
// repeat InitHc ;
51210: CALL_OW 19
// if GetBType ( j ) = b_barracks then
51214: LD_VAR 0 9
51218: PPUSH
51219: CALL_OW 266
51223: PUSH
51224: LD_INT 5
51226: EQUAL
51227: IFFALSE 51297
// begin if UnitsInside ( j ) < 3 then
51229: LD_VAR 0 9
51233: PPUSH
51234: CALL_OW 313
51238: PUSH
51239: LD_INT 3
51241: LESS
51242: IFFALSE 51278
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51244: LD_INT 0
51246: PPUSH
51247: LD_INT 5
51249: PUSH
51250: LD_INT 8
51252: PUSH
51253: LD_INT 9
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: LIST
51260: PUSH
51261: LD_VAR 0 17
51265: ARRAY
51266: PPUSH
51267: LD_VAR 0 4
51271: PPUSH
51272: CALL_OW 380
51276: GO 51295
// PrepareHuman ( false , i , skill ) ;
51278: LD_INT 0
51280: PPUSH
51281: LD_VAR 0 8
51285: PPUSH
51286: LD_VAR 0 4
51290: PPUSH
51291: CALL_OW 380
// end else
51295: GO 51314
// PrepareHuman ( false , i , skill ) ;
51297: LD_INT 0
51299: PPUSH
51300: LD_VAR 0 8
51304: PPUSH
51305: LD_VAR 0 4
51309: PPUSH
51310: CALL_OW 380
// un := CreateHuman ;
51314: LD_ADDR_VAR 0 14
51318: PUSH
51319: CALL_OW 44
51323: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51324: LD_ADDR_VAR 0 7
51328: PUSH
51329: LD_VAR 0 7
51333: PPUSH
51334: LD_INT 1
51336: PPUSH
51337: LD_VAR 0 14
51341: PPUSH
51342: CALL_OW 2
51346: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
51347: LD_VAR 0 14
51351: PPUSH
51352: LD_VAR 0 9
51356: PPUSH
51357: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
51361: LD_VAR 0 9
51365: PPUSH
51366: CALL_OW 313
51370: PUSH
51371: LD_INT 6
51373: EQUAL
51374: IFTRUE 51398
51376: PUSH
51377: LD_VAR 0 9
51381: PPUSH
51382: CALL_OW 266
51386: PUSH
51387: LD_INT 32
51389: PUSH
51390: LD_INT 31
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: IN
51397: OR
51398: IFFALSE 51210
51400: GO 51207
51402: POP
51403: POP
// end else
51404: GO 51790
// for j = 1 to x do
51406: LD_ADDR_VAR 0 9
51410: PUSH
51411: DOUBLE
51412: LD_INT 1
51414: DEC
51415: ST_TO_ADDR
51416: LD_VAR 0 13
51420: PUSH
51421: FOR_TO
51422: IFFALSE 51788
// begin InitHc ;
51424: CALL_OW 19
// if not f then
51428: LD_VAR 0 12
51432: NOT
51433: IFFALSE 51522
// begin PrepareHuman ( false , i , skill ) ;
51435: LD_INT 0
51437: PPUSH
51438: LD_VAR 0 8
51442: PPUSH
51443: LD_VAR 0 4
51447: PPUSH
51448: CALL_OW 380
// un := CreateHuman ;
51452: LD_ADDR_VAR 0 14
51456: PUSH
51457: CALL_OW 44
51461: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51462: LD_ADDR_VAR 0 7
51466: PUSH
51467: LD_VAR 0 7
51471: PPUSH
51472: LD_INT 1
51474: PPUSH
51475: LD_VAR 0 14
51479: PPUSH
51480: CALL_OW 2
51484: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51485: LD_VAR 0 14
51489: PPUSH
51490: LD_VAR 0 1
51494: PPUSH
51495: CALL_OW 250
51499: PPUSH
51500: LD_VAR 0 1
51504: PPUSH
51505: CALL_OW 251
51509: PPUSH
51510: LD_INT 10
51512: PPUSH
51513: LD_INT 0
51515: PPUSH
51516: CALL_OW 50
// continue ;
51520: GO 51421
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
51522: LD_VAR 0 12
51526: PUSH
51527: LD_INT 1
51529: ARRAY
51530: PPUSH
51531: CALL_OW 313
51535: IFFALSE 51563
51537: PUSH
51538: LD_VAR 0 12
51542: PUSH
51543: LD_INT 1
51545: ARRAY
51546: PPUSH
51547: CALL_OW 266
51551: PUSH
51552: LD_INT 32
51554: PUSH
51555: LD_INT 31
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: IN
51562: AND
51563: IFTRUE 51584
51565: PUSH
51566: LD_VAR 0 12
51570: PUSH
51571: LD_INT 1
51573: ARRAY
51574: PPUSH
51575: CALL_OW 313
51579: PUSH
51580: LD_INT 6
51582: EQUAL
51583: OR
51584: IFFALSE 51604
// f := Delete ( f , 1 ) ;
51586: LD_ADDR_VAR 0 12
51590: PUSH
51591: LD_VAR 0 12
51595: PPUSH
51596: LD_INT 1
51598: PPUSH
51599: CALL_OW 3
51603: ST_TO_ADDR
// if not f then
51604: LD_VAR 0 12
51608: NOT
51609: IFFALSE 51627
// begin x := x + 2 ;
51611: LD_ADDR_VAR 0 13
51615: PUSH
51616: LD_VAR 0 13
51620: PUSH
51621: LD_INT 2
51623: PLUS
51624: ST_TO_ADDR
// continue ;
51625: GO 51421
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
51627: LD_VAR 0 12
51631: PUSH
51632: LD_INT 1
51634: ARRAY
51635: PPUSH
51636: CALL_OW 266
51640: PUSH
51641: LD_INT 5
51643: EQUAL
51644: IFFALSE 51718
// begin if UnitsInside ( f [ 1 ] ) < 3 then
51646: LD_VAR 0 12
51650: PUSH
51651: LD_INT 1
51653: ARRAY
51654: PPUSH
51655: CALL_OW 313
51659: PUSH
51660: LD_INT 3
51662: LESS
51663: IFFALSE 51699
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51665: LD_INT 0
51667: PPUSH
51668: LD_INT 5
51670: PUSH
51671: LD_INT 8
51673: PUSH
51674: LD_INT 9
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: LIST
51681: PUSH
51682: LD_VAR 0 17
51686: ARRAY
51687: PPUSH
51688: LD_VAR 0 4
51692: PPUSH
51693: CALL_OW 380
51697: GO 51716
// PrepareHuman ( false , i , skill ) ;
51699: LD_INT 0
51701: PPUSH
51702: LD_VAR 0 8
51706: PPUSH
51707: LD_VAR 0 4
51711: PPUSH
51712: CALL_OW 380
// end else
51716: GO 51735
// PrepareHuman ( false , i , skill ) ;
51718: LD_INT 0
51720: PPUSH
51721: LD_VAR 0 8
51725: PPUSH
51726: LD_VAR 0 4
51730: PPUSH
51731: CALL_OW 380
// un := CreateHuman ;
51735: LD_ADDR_VAR 0 14
51739: PUSH
51740: CALL_OW 44
51744: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51745: LD_ADDR_VAR 0 7
51749: PUSH
51750: LD_VAR 0 7
51754: PPUSH
51755: LD_INT 1
51757: PPUSH
51758: LD_VAR 0 14
51762: PPUSH
51763: CALL_OW 2
51767: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51768: LD_VAR 0 14
51772: PPUSH
51773: LD_VAR 0 12
51777: PUSH
51778: LD_INT 1
51780: ARRAY
51781: PPUSH
51782: CALL_OW 52
// end ;
51786: GO 51421
51788: POP
51789: POP
// end ;
51790: GO 50721
51792: POP
51793: POP
// result := result ^ buildings ;
51794: LD_ADDR_VAR 0 7
51798: PUSH
51799: LD_VAR 0 7
51803: PUSH
51804: LD_VAR 0 18
51808: ADD
51809: ST_TO_ADDR
// end else
51810: GO 51953
// begin for i = 1 to personel do
51812: LD_ADDR_VAR 0 8
51816: PUSH
51817: DOUBLE
51818: LD_INT 1
51820: DEC
51821: ST_TO_ADDR
51822: LD_VAR 0 6
51826: PUSH
51827: FOR_TO
51828: IFFALSE 51951
// begin if i > 4 then
51830: LD_VAR 0 8
51834: PUSH
51835: LD_INT 4
51837: GREATER
51838: IFFALSE 51842
// break ;
51840: GO 51951
// x := personel [ i ] ;
51842: LD_ADDR_VAR 0 13
51846: PUSH
51847: LD_VAR 0 6
51851: PUSH
51852: LD_VAR 0 8
51856: ARRAY
51857: ST_TO_ADDR
// if x = - 1 then
51858: LD_VAR 0 13
51862: PUSH
51863: LD_INT 1
51865: NEG
51866: EQUAL
51867: IFFALSE 51871
// continue ;
51869: GO 51827
// PrepareHuman ( false , i , skill ) ;
51871: LD_INT 0
51873: PPUSH
51874: LD_VAR 0 8
51878: PPUSH
51879: LD_VAR 0 4
51883: PPUSH
51884: CALL_OW 380
// un := CreateHuman ;
51888: LD_ADDR_VAR 0 14
51892: PUSH
51893: CALL_OW 44
51897: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51898: LD_VAR 0 14
51902: PPUSH
51903: LD_VAR 0 1
51907: PPUSH
51908: CALL_OW 250
51912: PPUSH
51913: LD_VAR 0 1
51917: PPUSH
51918: CALL_OW 251
51922: PPUSH
51923: LD_INT 10
51925: PPUSH
51926: LD_INT 0
51928: PPUSH
51929: CALL_OW 50
// result := result ^ un ;
51933: LD_ADDR_VAR 0 7
51937: PUSH
51938: LD_VAR 0 7
51942: PUSH
51943: LD_VAR 0 14
51947: ADD
51948: ST_TO_ADDR
// end ;
51949: GO 51827
51951: POP
51952: POP
// end ; end ;
51953: LD_VAR 0 7
51957: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51958: LD_INT 0
51960: PPUSH
51961: PPUSH
51962: PPUSH
51963: PPUSH
51964: PPUSH
51965: PPUSH
51966: PPUSH
51967: PPUSH
51968: PPUSH
51969: PPUSH
51970: PPUSH
51971: PPUSH
51972: PPUSH
51973: PPUSH
51974: PPUSH
51975: PPUSH
// result := false ;
51976: LD_ADDR_VAR 0 3
51980: PUSH
51981: LD_INT 0
51983: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51984: LD_VAR 0 1
51988: NOT
51989: IFTRUE 52014
51991: PUSH
51992: LD_VAR 0 1
51996: PPUSH
51997: CALL_OW 266
52001: PUSH
52002: LD_INT 32
52004: PUSH
52005: LD_INT 33
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: IN
52012: NOT
52013: OR
52014: IFFALSE 52018
// exit ;
52016: GO 53153
// nat := GetNation ( tower ) ;
52018: LD_ADDR_VAR 0 12
52022: PUSH
52023: LD_VAR 0 1
52027: PPUSH
52028: CALL_OW 248
52032: ST_TO_ADDR
// side := GetSide ( tower ) ;
52033: LD_ADDR_VAR 0 16
52037: PUSH
52038: LD_VAR 0 1
52042: PPUSH
52043: CALL_OW 255
52047: ST_TO_ADDR
// x := GetX ( tower ) ;
52048: LD_ADDR_VAR 0 10
52052: PUSH
52053: LD_VAR 0 1
52057: PPUSH
52058: CALL_OW 250
52062: ST_TO_ADDR
// y := GetY ( tower ) ;
52063: LD_ADDR_VAR 0 11
52067: PUSH
52068: LD_VAR 0 1
52072: PPUSH
52073: CALL_OW 251
52077: ST_TO_ADDR
// if not x or not y then
52078: LD_VAR 0 10
52082: NOT
52083: IFTRUE 52092
52085: PUSH
52086: LD_VAR 0 11
52090: NOT
52091: OR
52092: IFFALSE 52096
// exit ;
52094: GO 53153
// weapon := 0 ;
52096: LD_ADDR_VAR 0 18
52100: PUSH
52101: LD_INT 0
52103: ST_TO_ADDR
// fac_list := [ ] ;
52104: LD_ADDR_VAR 0 17
52108: PUSH
52109: EMPTY
52110: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
52111: LD_ADDR_VAR 0 6
52115: PUSH
52116: LD_VAR 0 1
52120: PPUSH
52121: CALL_OW 274
52125: PPUSH
52126: LD_VAR 0 2
52130: PPUSH
52131: LD_INT 0
52133: PPUSH
52134: CALL 49688 0 3
52138: PPUSH
52139: LD_INT 30
52141: PUSH
52142: LD_INT 3
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PPUSH
52149: CALL_OW 72
52153: ST_TO_ADDR
// if not factories then
52154: LD_VAR 0 6
52158: NOT
52159: IFFALSE 52163
// exit ;
52161: GO 53153
// for i in factories do
52163: LD_ADDR_VAR 0 8
52167: PUSH
52168: LD_VAR 0 6
52172: PUSH
52173: FOR_IN
52174: IFFALSE 52199
// fac_list := fac_list union AvailableWeaponList ( i ) ;
52176: LD_ADDR_VAR 0 17
52180: PUSH
52181: LD_VAR 0 17
52185: PUSH
52186: LD_VAR 0 8
52190: PPUSH
52191: CALL_OW 478
52195: UNION
52196: ST_TO_ADDR
52197: GO 52173
52199: POP
52200: POP
// if not fac_list then
52201: LD_VAR 0 17
52205: NOT
52206: IFFALSE 52210
// exit ;
52208: GO 53153
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
52210: LD_ADDR_VAR 0 5
52214: PUSH
52215: LD_INT 4
52217: PUSH
52218: LD_INT 5
52220: PUSH
52221: LD_INT 9
52223: PUSH
52224: LD_INT 10
52226: PUSH
52227: LD_INT 6
52229: PUSH
52230: LD_INT 7
52232: PUSH
52233: LD_INT 11
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 27
52247: PUSH
52248: LD_INT 28
52250: PUSH
52251: LD_INT 26
52253: PUSH
52254: LD_INT 30
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 43
52265: PUSH
52266: LD_INT 44
52268: PUSH
52269: LD_INT 46
52271: PUSH
52272: LD_INT 45
52274: PUSH
52275: LD_INT 47
52277: PUSH
52278: LD_INT 49
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: LIST
52293: PUSH
52294: LD_VAR 0 12
52298: ARRAY
52299: ST_TO_ADDR
// list := list isect fac_list ;
52300: LD_ADDR_VAR 0 5
52304: PUSH
52305: LD_VAR 0 5
52309: PUSH
52310: LD_VAR 0 17
52314: ISECT
52315: ST_TO_ADDR
// if not list then
52316: LD_VAR 0 5
52320: NOT
52321: IFFALSE 52325
// exit ;
52323: GO 53153
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
52325: LD_VAR 0 12
52329: PUSH
52330: LD_INT 3
52332: EQUAL
52333: IFFALSE 52345
52335: PUSH
52336: LD_INT 49
52338: PUSH
52339: LD_VAR 0 5
52343: IN
52344: AND
52345: IFFALSE 52365
52347: PUSH
52348: LD_INT 31
52350: PPUSH
52351: LD_VAR 0 16
52355: PPUSH
52356: CALL_OW 321
52360: PUSH
52361: LD_INT 2
52363: EQUAL
52364: AND
52365: IFFALSE 52425
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
52367: LD_INT 22
52369: PUSH
52370: LD_VAR 0 16
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 35
52381: PUSH
52382: LD_INT 49
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 91
52391: PUSH
52392: LD_VAR 0 1
52396: PUSH
52397: LD_INT 10
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: LIST
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: LIST
52409: PPUSH
52410: CALL_OW 69
52414: NOT
52415: IFFALSE 52425
// weapon := ru_time_lapser ;
52417: LD_ADDR_VAR 0 18
52421: PUSH
52422: LD_INT 49
52424: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
52425: LD_VAR 0 12
52429: PUSH
52430: LD_INT 1
52432: PUSH
52433: LD_INT 2
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: IN
52440: IFFALSE 52464
52442: PUSH
52443: LD_INT 11
52445: PUSH
52446: LD_VAR 0 5
52450: IN
52451: IFTRUE 52463
52453: PUSH
52454: LD_INT 30
52456: PUSH
52457: LD_VAR 0 5
52461: IN
52462: OR
52463: AND
52464: IFFALSE 52484
52466: PUSH
52467: LD_INT 6
52469: PPUSH
52470: LD_VAR 0 16
52474: PPUSH
52475: CALL_OW 321
52479: PUSH
52480: LD_INT 2
52482: EQUAL
52483: AND
52484: IFFALSE 52651
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
52486: LD_INT 22
52488: PUSH
52489: LD_VAR 0 16
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 2
52500: PUSH
52501: LD_INT 35
52503: PUSH
52504: LD_INT 11
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 35
52513: PUSH
52514: LD_INT 30
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 91
52528: PUSH
52529: LD_VAR 0 1
52533: PUSH
52534: LD_INT 18
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: LIST
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: LIST
52546: PPUSH
52547: CALL_OW 69
52551: NOT
52552: IFFALSE 52628
52554: PUSH
52555: LD_INT 22
52557: PUSH
52558: LD_VAR 0 16
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 2
52569: PUSH
52570: LD_INT 30
52572: PUSH
52573: LD_INT 32
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 30
52582: PUSH
52583: LD_INT 33
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 91
52597: PUSH
52598: LD_VAR 0 1
52602: PUSH
52603: LD_INT 12
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: LIST
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: LIST
52615: PUSH
52616: EMPTY
52617: LIST
52618: PPUSH
52619: CALL_OW 69
52623: PUSH
52624: LD_INT 2
52626: GREATER
52627: AND
52628: IFFALSE 52651
// weapon := [ us_radar , ar_radar ] [ nat ] ;
52630: LD_ADDR_VAR 0 18
52634: PUSH
52635: LD_INT 11
52637: PUSH
52638: LD_INT 30
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_VAR 0 12
52649: ARRAY
52650: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
52651: LD_VAR 0 18
52655: NOT
52656: IFFALSE 52676
52658: PUSH
52659: LD_INT 40
52661: PPUSH
52662: LD_VAR 0 16
52666: PPUSH
52667: CALL_OW 321
52671: PUSH
52672: LD_INT 2
52674: EQUAL
52675: AND
52676: IFFALSE 52712
52678: PUSH
52679: LD_INT 7
52681: PUSH
52682: LD_VAR 0 5
52686: IN
52687: IFTRUE 52699
52689: PUSH
52690: LD_INT 28
52692: PUSH
52693: LD_VAR 0 5
52697: IN
52698: OR
52699: IFTRUE 52711
52701: PUSH
52702: LD_INT 45
52704: PUSH
52705: LD_VAR 0 5
52709: IN
52710: OR
52711: AND
52712: IFFALSE 52966
// begin hex := GetHexInfo ( x , y ) ;
52714: LD_ADDR_VAR 0 4
52718: PUSH
52719: LD_VAR 0 10
52723: PPUSH
52724: LD_VAR 0 11
52728: PPUSH
52729: CALL_OW 546
52733: ST_TO_ADDR
// if hex [ 1 ] then
52734: LD_VAR 0 4
52738: PUSH
52739: LD_INT 1
52741: ARRAY
52742: IFFALSE 52746
// exit ;
52744: GO 53153
// height := hex [ 2 ] ;
52746: LD_ADDR_VAR 0 15
52750: PUSH
52751: LD_VAR 0 4
52755: PUSH
52756: LD_INT 2
52758: ARRAY
52759: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52760: LD_ADDR_VAR 0 14
52764: PUSH
52765: LD_INT 0
52767: PUSH
52768: LD_INT 2
52770: PUSH
52771: LD_INT 3
52773: PUSH
52774: LD_INT 5
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: ST_TO_ADDR
// for i in tmp do
52783: LD_ADDR_VAR 0 8
52787: PUSH
52788: LD_VAR 0 14
52792: PUSH
52793: FOR_IN
52794: IFFALSE 52964
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52796: LD_ADDR_VAR 0 9
52800: PUSH
52801: LD_VAR 0 10
52805: PPUSH
52806: LD_VAR 0 8
52810: PPUSH
52811: LD_INT 5
52813: PPUSH
52814: CALL_OW 272
52818: PUSH
52819: LD_VAR 0 11
52823: PPUSH
52824: LD_VAR 0 8
52828: PPUSH
52829: LD_INT 5
52831: PPUSH
52832: CALL_OW 273
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52841: LD_VAR 0 9
52845: PUSH
52846: LD_INT 1
52848: ARRAY
52849: PPUSH
52850: LD_VAR 0 9
52854: PUSH
52855: LD_INT 2
52857: ARRAY
52858: PPUSH
52859: CALL_OW 488
52863: IFFALSE 52962
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52865: LD_ADDR_VAR 0 4
52869: PUSH
52870: LD_VAR 0 9
52874: PUSH
52875: LD_INT 1
52877: ARRAY
52878: PPUSH
52879: LD_VAR 0 9
52883: PUSH
52884: LD_INT 2
52886: ARRAY
52887: PPUSH
52888: CALL_OW 546
52892: ST_TO_ADDR
// if hex [ 1 ] then
52893: LD_VAR 0 4
52897: PUSH
52898: LD_INT 1
52900: ARRAY
52901: IFFALSE 52905
// continue ;
52903: GO 52793
// h := hex [ 2 ] ;
52905: LD_ADDR_VAR 0 13
52909: PUSH
52910: LD_VAR 0 4
52914: PUSH
52915: LD_INT 2
52917: ARRAY
52918: ST_TO_ADDR
// if h + 7 < height then
52919: LD_VAR 0 13
52923: PUSH
52924: LD_INT 7
52926: PLUS
52927: PUSH
52928: LD_VAR 0 15
52932: LESS
52933: IFFALSE 52962
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52935: LD_ADDR_VAR 0 18
52939: PUSH
52940: LD_INT 7
52942: PUSH
52943: LD_INT 28
52945: PUSH
52946: LD_INT 45
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: LIST
52953: PUSH
52954: LD_VAR 0 12
52958: ARRAY
52959: ST_TO_ADDR
// break ;
52960: GO 52964
// end ; end ; end ;
52962: GO 52793
52964: POP
52965: POP
// end ; if not weapon then
52966: LD_VAR 0 18
52970: NOT
52971: IFFALSE 53031
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52973: LD_ADDR_VAR 0 5
52977: PUSH
52978: LD_VAR 0 5
52982: PUSH
52983: LD_INT 11
52985: PUSH
52986: LD_INT 30
52988: PUSH
52989: LD_INT 49
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: LIST
52996: DIFF
52997: ST_TO_ADDR
// if not list then
52998: LD_VAR 0 5
53002: NOT
53003: IFFALSE 53007
// exit ;
53005: GO 53153
// weapon := list [ rand ( 1 , list ) ] ;
53007: LD_ADDR_VAR 0 18
53011: PUSH
53012: LD_VAR 0 5
53016: PUSH
53017: LD_INT 1
53019: PPUSH
53020: LD_VAR 0 5
53024: PPUSH
53025: CALL_OW 12
53029: ARRAY
53030: ST_TO_ADDR
// end ; if weapon then
53031: LD_VAR 0 18
53035: IFFALSE 53153
// begin tmp := CostOfWeapon ( weapon ) ;
53037: LD_ADDR_VAR 0 14
53041: PUSH
53042: LD_VAR 0 18
53046: PPUSH
53047: CALL_OW 451
53051: ST_TO_ADDR
// j := GetBase ( tower ) ;
53052: LD_ADDR_VAR 0 9
53056: PUSH
53057: LD_VAR 0 1
53061: PPUSH
53062: CALL_OW 274
53066: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
53067: LD_VAR 0 9
53071: PPUSH
53072: LD_INT 1
53074: PPUSH
53075: CALL_OW 275
53079: PUSH
53080: LD_VAR 0 14
53084: PUSH
53085: LD_INT 1
53087: ARRAY
53088: GREATEREQUAL
53089: IFFALSE 53115
53091: PUSH
53092: LD_VAR 0 9
53096: PPUSH
53097: LD_INT 2
53099: PPUSH
53100: CALL_OW 275
53104: PUSH
53105: LD_VAR 0 14
53109: PUSH
53110: LD_INT 2
53112: ARRAY
53113: GREATEREQUAL
53114: AND
53115: IFFALSE 53141
53117: PUSH
53118: LD_VAR 0 9
53122: PPUSH
53123: LD_INT 3
53125: PPUSH
53126: CALL_OW 275
53130: PUSH
53131: LD_VAR 0 14
53135: PUSH
53136: LD_INT 3
53138: ARRAY
53139: GREATEREQUAL
53140: AND
53141: IFFALSE 53153
// result := weapon ;
53143: LD_ADDR_VAR 0 3
53147: PUSH
53148: LD_VAR 0 18
53152: ST_TO_ADDR
// end ; end ;
53153: LD_VAR 0 3
53157: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
53158: LD_INT 0
53160: PPUSH
53161: PPUSH
// result := true ;
53162: LD_ADDR_VAR 0 3
53166: PUSH
53167: LD_INT 1
53169: ST_TO_ADDR
// if array1 = array2 then
53170: LD_VAR 0 1
53174: PUSH
53175: LD_VAR 0 2
53179: EQUAL
53180: IFFALSE 53240
// begin for i = 1 to array1 do
53182: LD_ADDR_VAR 0 4
53186: PUSH
53187: DOUBLE
53188: LD_INT 1
53190: DEC
53191: ST_TO_ADDR
53192: LD_VAR 0 1
53196: PUSH
53197: FOR_TO
53198: IFFALSE 53236
// if array1 [ i ] <> array2 [ i ] then
53200: LD_VAR 0 1
53204: PUSH
53205: LD_VAR 0 4
53209: ARRAY
53210: PUSH
53211: LD_VAR 0 2
53215: PUSH
53216: LD_VAR 0 4
53220: ARRAY
53221: NONEQUAL
53222: IFFALSE 53234
// begin result := false ;
53224: LD_ADDR_VAR 0 3
53228: PUSH
53229: LD_INT 0
53231: ST_TO_ADDR
// break ;
53232: GO 53236
// end ;
53234: GO 53197
53236: POP
53237: POP
// end else
53238: GO 53248
// result := false ;
53240: LD_ADDR_VAR 0 3
53244: PUSH
53245: LD_INT 0
53247: ST_TO_ADDR
// end ;
53248: LD_VAR 0 3
53252: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
53253: LD_INT 0
53255: PPUSH
53256: PPUSH
// if not array1 or not array2 then
53257: LD_VAR 0 1
53261: NOT
53262: IFTRUE 53271
53264: PUSH
53265: LD_VAR 0 2
53269: NOT
53270: OR
53271: IFFALSE 53275
// exit ;
53273: GO 53339
// result := true ;
53275: LD_ADDR_VAR 0 3
53279: PUSH
53280: LD_INT 1
53282: ST_TO_ADDR
// for i = 1 to array1 do
53283: LD_ADDR_VAR 0 4
53287: PUSH
53288: DOUBLE
53289: LD_INT 1
53291: DEC
53292: ST_TO_ADDR
53293: LD_VAR 0 1
53297: PUSH
53298: FOR_TO
53299: IFFALSE 53337
// if array1 [ i ] <> array2 [ i ] then
53301: LD_VAR 0 1
53305: PUSH
53306: LD_VAR 0 4
53310: ARRAY
53311: PUSH
53312: LD_VAR 0 2
53316: PUSH
53317: LD_VAR 0 4
53321: ARRAY
53322: NONEQUAL
53323: IFFALSE 53335
// begin result := false ;
53325: LD_ADDR_VAR 0 3
53329: PUSH
53330: LD_INT 0
53332: ST_TO_ADDR
// break ;
53333: GO 53337
// end ;
53335: GO 53298
53337: POP
53338: POP
// end ;
53339: LD_VAR 0 3
53343: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
53344: LD_INT 0
53346: PPUSH
53347: PPUSH
53348: PPUSH
// pom := GetBase ( fac ) ;
53349: LD_ADDR_VAR 0 5
53353: PUSH
53354: LD_VAR 0 1
53358: PPUSH
53359: CALL_OW 274
53363: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
53364: LD_ADDR_VAR 0 4
53368: PUSH
53369: LD_VAR 0 2
53373: PUSH
53374: LD_INT 1
53376: ARRAY
53377: PPUSH
53378: LD_VAR 0 2
53382: PUSH
53383: LD_INT 2
53385: ARRAY
53386: PPUSH
53387: LD_VAR 0 2
53391: PUSH
53392: LD_INT 3
53394: ARRAY
53395: PPUSH
53396: LD_VAR 0 2
53400: PUSH
53401: LD_INT 4
53403: ARRAY
53404: PPUSH
53405: CALL_OW 449
53409: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53410: LD_ADDR_VAR 0 3
53414: PUSH
53415: LD_VAR 0 5
53419: PPUSH
53420: LD_INT 1
53422: PPUSH
53423: CALL_OW 275
53427: PUSH
53428: LD_VAR 0 4
53432: PUSH
53433: LD_INT 1
53435: ARRAY
53436: GREATEREQUAL
53437: IFFALSE 53463
53439: PUSH
53440: LD_VAR 0 5
53444: PPUSH
53445: LD_INT 2
53447: PPUSH
53448: CALL_OW 275
53452: PUSH
53453: LD_VAR 0 4
53457: PUSH
53458: LD_INT 2
53460: ARRAY
53461: GREATEREQUAL
53462: AND
53463: IFFALSE 53489
53465: PUSH
53466: LD_VAR 0 5
53470: PPUSH
53471: LD_INT 3
53473: PPUSH
53474: CALL_OW 275
53478: PUSH
53479: LD_VAR 0 4
53483: PUSH
53484: LD_INT 3
53486: ARRAY
53487: GREATEREQUAL
53488: AND
53489: ST_TO_ADDR
// end ;
53490: LD_VAR 0 3
53494: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
53495: LD_INT 0
53497: PPUSH
53498: PPUSH
53499: PPUSH
53500: PPUSH
// pom := GetBase ( building ) ;
53501: LD_ADDR_VAR 0 3
53505: PUSH
53506: LD_VAR 0 1
53510: PPUSH
53511: CALL_OW 274
53515: ST_TO_ADDR
// if not pom then
53516: LD_VAR 0 3
53520: NOT
53521: IFFALSE 53525
// exit ;
53523: GO 53699
// btype := GetBType ( building ) ;
53525: LD_ADDR_VAR 0 5
53529: PUSH
53530: LD_VAR 0 1
53534: PPUSH
53535: CALL_OW 266
53539: ST_TO_ADDR
// if btype = b_armoury then
53540: LD_VAR 0 5
53544: PUSH
53545: LD_INT 4
53547: EQUAL
53548: IFFALSE 53558
// btype := b_barracks ;
53550: LD_ADDR_VAR 0 5
53554: PUSH
53555: LD_INT 5
53557: ST_TO_ADDR
// if btype = b_depot then
53558: LD_VAR 0 5
53562: PUSH
53563: LD_INT 0
53565: EQUAL
53566: IFFALSE 53576
// btype := b_warehouse ;
53568: LD_ADDR_VAR 0 5
53572: PUSH
53573: LD_INT 1
53575: ST_TO_ADDR
// if btype = b_workshop then
53576: LD_VAR 0 5
53580: PUSH
53581: LD_INT 2
53583: EQUAL
53584: IFFALSE 53594
// btype := b_factory ;
53586: LD_ADDR_VAR 0 5
53590: PUSH
53591: LD_INT 3
53593: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53594: LD_ADDR_VAR 0 4
53598: PUSH
53599: LD_VAR 0 5
53603: PPUSH
53604: LD_VAR 0 1
53608: PPUSH
53609: CALL_OW 248
53613: PPUSH
53614: CALL_OW 450
53618: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53619: LD_ADDR_VAR 0 2
53623: PUSH
53624: LD_VAR 0 3
53628: PPUSH
53629: LD_INT 1
53631: PPUSH
53632: CALL_OW 275
53636: PUSH
53637: LD_VAR 0 4
53641: PUSH
53642: LD_INT 1
53644: ARRAY
53645: GREATEREQUAL
53646: IFFALSE 53672
53648: PUSH
53649: LD_VAR 0 3
53653: PPUSH
53654: LD_INT 2
53656: PPUSH
53657: CALL_OW 275
53661: PUSH
53662: LD_VAR 0 4
53666: PUSH
53667: LD_INT 2
53669: ARRAY
53670: GREATEREQUAL
53671: AND
53672: IFFALSE 53698
53674: PUSH
53675: LD_VAR 0 3
53679: PPUSH
53680: LD_INT 3
53682: PPUSH
53683: CALL_OW 275
53687: PUSH
53688: LD_VAR 0 4
53692: PUSH
53693: LD_INT 3
53695: ARRAY
53696: GREATEREQUAL
53697: AND
53698: ST_TO_ADDR
// end ;
53699: LD_VAR 0 2
53703: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
53704: LD_INT 0
53706: PPUSH
53707: PPUSH
53708: PPUSH
// pom := GetBase ( building ) ;
53709: LD_ADDR_VAR 0 4
53713: PUSH
53714: LD_VAR 0 1
53718: PPUSH
53719: CALL_OW 274
53723: ST_TO_ADDR
// if not pom then
53724: LD_VAR 0 4
53728: NOT
53729: IFFALSE 53733
// exit ;
53731: GO 53838
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53733: LD_ADDR_VAR 0 5
53737: PUSH
53738: LD_VAR 0 2
53742: PPUSH
53743: LD_VAR 0 1
53747: PPUSH
53748: CALL_OW 248
53752: PPUSH
53753: CALL_OW 450
53757: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53758: LD_ADDR_VAR 0 3
53762: PUSH
53763: LD_VAR 0 4
53767: PPUSH
53768: LD_INT 1
53770: PPUSH
53771: CALL_OW 275
53775: PUSH
53776: LD_VAR 0 5
53780: PUSH
53781: LD_INT 1
53783: ARRAY
53784: GREATEREQUAL
53785: IFFALSE 53811
53787: PUSH
53788: LD_VAR 0 4
53792: PPUSH
53793: LD_INT 2
53795: PPUSH
53796: CALL_OW 275
53800: PUSH
53801: LD_VAR 0 5
53805: PUSH
53806: LD_INT 2
53808: ARRAY
53809: GREATEREQUAL
53810: AND
53811: IFFALSE 53837
53813: PUSH
53814: LD_VAR 0 4
53818: PPUSH
53819: LD_INT 3
53821: PPUSH
53822: CALL_OW 275
53826: PUSH
53827: LD_VAR 0 5
53831: PUSH
53832: LD_INT 3
53834: ARRAY
53835: GREATEREQUAL
53836: AND
53837: ST_TO_ADDR
// end ;
53838: LD_VAR 0 3
53842: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53843: LD_INT 0
53845: PPUSH
53846: PPUSH
53847: PPUSH
53848: PPUSH
53849: PPUSH
53850: PPUSH
53851: PPUSH
53852: PPUSH
53853: PPUSH
53854: PPUSH
53855: PPUSH
// result := false ;
53856: LD_ADDR_VAR 0 8
53860: PUSH
53861: LD_INT 0
53863: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53864: LD_VAR 0 5
53868: NOT
53869: IFTRUE 53878
53871: PUSH
53872: LD_VAR 0 1
53876: NOT
53877: OR
53878: IFTRUE 53887
53880: PUSH
53881: LD_VAR 0 2
53885: NOT
53886: OR
53887: IFTRUE 53896
53889: PUSH
53890: LD_VAR 0 3
53894: NOT
53895: OR
53896: IFFALSE 53900
// exit ;
53898: GO 54726
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53900: LD_ADDR_VAR 0 14
53904: PUSH
53905: LD_VAR 0 1
53909: PPUSH
53910: LD_VAR 0 2
53914: PPUSH
53915: LD_VAR 0 3
53919: PPUSH
53920: LD_VAR 0 4
53924: PPUSH
53925: LD_VAR 0 5
53929: PUSH
53930: LD_INT 1
53932: ARRAY
53933: PPUSH
53934: CALL_OW 248
53938: PPUSH
53939: LD_INT 0
53941: PPUSH
53942: CALL 56007 0 6
53946: ST_TO_ADDR
// if not hexes then
53947: LD_VAR 0 14
53951: NOT
53952: IFFALSE 53956
// exit ;
53954: GO 54726
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53956: LD_ADDR_VAR 0 17
53960: PUSH
53961: LD_VAR 0 5
53965: PPUSH
53966: LD_INT 22
53968: PUSH
53969: LD_VAR 0 13
53973: PPUSH
53974: CALL_OW 255
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 2
53985: PUSH
53986: LD_INT 30
53988: PUSH
53989: LD_INT 0
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 30
53998: PUSH
53999: LD_INT 1
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: LIST
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PPUSH
54015: CALL_OW 72
54019: ST_TO_ADDR
// for i = 1 to hexes do
54020: LD_ADDR_VAR 0 9
54024: PUSH
54025: DOUBLE
54026: LD_INT 1
54028: DEC
54029: ST_TO_ADDR
54030: LD_VAR 0 14
54034: PUSH
54035: FOR_TO
54036: IFFALSE 54724
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54038: LD_ADDR_VAR 0 13
54042: PUSH
54043: LD_VAR 0 14
54047: PUSH
54048: LD_VAR 0 9
54052: ARRAY
54053: PUSH
54054: LD_INT 1
54056: ARRAY
54057: PPUSH
54058: LD_VAR 0 14
54062: PUSH
54063: LD_VAR 0 9
54067: ARRAY
54068: PUSH
54069: LD_INT 2
54071: ARRAY
54072: PPUSH
54073: CALL_OW 428
54077: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
54078: LD_VAR 0 14
54082: PUSH
54083: LD_VAR 0 9
54087: ARRAY
54088: PUSH
54089: LD_INT 1
54091: ARRAY
54092: PPUSH
54093: LD_VAR 0 14
54097: PUSH
54098: LD_VAR 0 9
54102: ARRAY
54103: PUSH
54104: LD_INT 2
54106: ARRAY
54107: PPUSH
54108: CALL_OW 351
54112: IFTRUE 54151
54114: PUSH
54115: LD_VAR 0 14
54119: PUSH
54120: LD_VAR 0 9
54124: ARRAY
54125: PUSH
54126: LD_INT 1
54128: ARRAY
54129: PPUSH
54130: LD_VAR 0 14
54134: PUSH
54135: LD_VAR 0 9
54139: ARRAY
54140: PUSH
54141: LD_INT 2
54143: ARRAY
54144: PPUSH
54145: CALL_OW 488
54149: NOT
54150: OR
54151: IFTRUE 54168
54153: PUSH
54154: LD_VAR 0 13
54158: PPUSH
54159: CALL_OW 247
54163: PUSH
54164: LD_INT 3
54166: EQUAL
54167: OR
54168: IFFALSE 54174
// exit ;
54170: POP
54171: POP
54172: GO 54726
// if not tmp then
54174: LD_VAR 0 13
54178: NOT
54179: IFFALSE 54183
// continue ;
54181: GO 54035
// result := true ;
54183: LD_ADDR_VAR 0 8
54187: PUSH
54188: LD_INT 1
54190: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
54191: LD_VAR 0 6
54195: IFFALSE 54212
54197: PUSH
54198: LD_VAR 0 13
54202: PPUSH
54203: CALL_OW 247
54207: PUSH
54208: LD_INT 2
54210: EQUAL
54211: AND
54212: IFFALSE 54229
54214: PUSH
54215: LD_VAR 0 13
54219: PPUSH
54220: CALL_OW 263
54224: PUSH
54225: LD_INT 1
54227: EQUAL
54228: AND
54229: IFFALSE 54393
// begin if IsDrivenBy ( tmp ) then
54231: LD_VAR 0 13
54235: PPUSH
54236: CALL_OW 311
54240: IFFALSE 54244
// continue ;
54242: GO 54035
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
54244: LD_VAR 0 6
54248: PPUSH
54249: LD_INT 3
54251: PUSH
54252: LD_INT 60
54254: PUSH
54255: EMPTY
54256: LIST
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 3
54264: PUSH
54265: LD_INT 55
54267: PUSH
54268: EMPTY
54269: LIST
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PPUSH
54279: CALL_OW 72
54283: IFFALSE 54391
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
54285: LD_ADDR_VAR 0 18
54289: PUSH
54290: LD_VAR 0 6
54294: PPUSH
54295: LD_INT 3
54297: PUSH
54298: LD_INT 60
54300: PUSH
54301: EMPTY
54302: LIST
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 3
54310: PUSH
54311: LD_INT 55
54313: PUSH
54314: EMPTY
54315: LIST
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PPUSH
54325: CALL_OW 72
54329: PUSH
54330: LD_INT 1
54332: ARRAY
54333: ST_TO_ADDR
// if IsInUnit ( driver ) then
54334: LD_VAR 0 18
54338: PPUSH
54339: CALL_OW 310
54343: IFFALSE 54354
// ComExit ( driver ) ;
54345: LD_VAR 0 18
54349: PPUSH
54350: CALL 79997 0 1
// AddComEnterUnit ( driver , tmp ) ;
54354: LD_VAR 0 18
54358: PPUSH
54359: LD_VAR 0 13
54363: PPUSH
54364: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
54368: LD_VAR 0 18
54372: PPUSH
54373: LD_VAR 0 7
54377: PPUSH
54378: CALL_OW 173
// AddComExitVehicle ( driver ) ;
54382: LD_VAR 0 18
54386: PPUSH
54387: CALL_OW 181
// end ; continue ;
54391: GO 54035
// end ; if not cleaners or not tmp in cleaners then
54393: LD_VAR 0 6
54397: NOT
54398: IFTRUE 54413
54400: PUSH
54401: LD_VAR 0 13
54405: PUSH
54406: LD_VAR 0 6
54410: IN
54411: NOT
54412: OR
54413: IFFALSE 54722
// begin if dep then
54415: LD_VAR 0 17
54419: IFFALSE 54555
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
54421: LD_ADDR_VAR 0 16
54425: PUSH
54426: LD_VAR 0 17
54430: PUSH
54431: LD_INT 1
54433: ARRAY
54434: PPUSH
54435: CALL_OW 250
54439: PPUSH
54440: LD_VAR 0 17
54444: PUSH
54445: LD_INT 1
54447: ARRAY
54448: PPUSH
54449: CALL_OW 254
54453: PPUSH
54454: LD_INT 5
54456: PPUSH
54457: CALL_OW 272
54461: PUSH
54462: LD_VAR 0 17
54466: PUSH
54467: LD_INT 1
54469: ARRAY
54470: PPUSH
54471: CALL_OW 251
54475: PPUSH
54476: LD_VAR 0 17
54480: PUSH
54481: LD_INT 1
54483: ARRAY
54484: PPUSH
54485: CALL_OW 254
54489: PPUSH
54490: LD_INT 5
54492: PPUSH
54493: CALL_OW 273
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
54502: LD_VAR 0 16
54506: PUSH
54507: LD_INT 1
54509: ARRAY
54510: PPUSH
54511: LD_VAR 0 16
54515: PUSH
54516: LD_INT 2
54518: ARRAY
54519: PPUSH
54520: CALL_OW 488
54524: IFFALSE 54555
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
54526: LD_VAR 0 13
54530: PPUSH
54531: LD_VAR 0 16
54535: PUSH
54536: LD_INT 1
54538: ARRAY
54539: PPUSH
54540: LD_VAR 0 16
54544: PUSH
54545: LD_INT 2
54547: ARRAY
54548: PPUSH
54549: CALL_OW 111
// continue ;
54553: GO 54035
// end ; end ; r := GetDir ( tmp ) ;
54555: LD_ADDR_VAR 0 15
54559: PUSH
54560: LD_VAR 0 13
54564: PPUSH
54565: CALL_OW 254
54569: ST_TO_ADDR
// if r = 5 then
54570: LD_VAR 0 15
54574: PUSH
54575: LD_INT 5
54577: EQUAL
54578: IFFALSE 54588
// r := 0 ;
54580: LD_ADDR_VAR 0 15
54584: PUSH
54585: LD_INT 0
54587: ST_TO_ADDR
// for j = r to 5 do
54588: LD_ADDR_VAR 0 10
54592: PUSH
54593: DOUBLE
54594: LD_VAR 0 15
54598: DEC
54599: ST_TO_ADDR
54600: LD_INT 5
54602: PUSH
54603: FOR_TO
54604: IFFALSE 54720
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
54606: LD_ADDR_VAR 0 11
54610: PUSH
54611: LD_VAR 0 13
54615: PPUSH
54616: CALL_OW 250
54620: PPUSH
54621: LD_VAR 0 10
54625: PPUSH
54626: LD_INT 2
54628: PPUSH
54629: CALL_OW 272
54633: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
54634: LD_ADDR_VAR 0 12
54638: PUSH
54639: LD_VAR 0 13
54643: PPUSH
54644: CALL_OW 251
54648: PPUSH
54649: LD_VAR 0 10
54653: PPUSH
54654: LD_INT 2
54656: PPUSH
54657: CALL_OW 273
54661: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
54662: LD_VAR 0 11
54666: PPUSH
54667: LD_VAR 0 12
54671: PPUSH
54672: CALL_OW 488
54676: IFFALSE 54695
54678: PUSH
54679: LD_VAR 0 11
54683: PPUSH
54684: LD_VAR 0 12
54688: PPUSH
54689: CALL_OW 428
54693: NOT
54694: AND
54695: IFFALSE 54718
// begin ComMoveXY ( tmp , _x , _y ) ;
54697: LD_VAR 0 13
54701: PPUSH
54702: LD_VAR 0 11
54706: PPUSH
54707: LD_VAR 0 12
54711: PPUSH
54712: CALL_OW 111
// break ;
54716: GO 54720
// end ; end ;
54718: GO 54603
54720: POP
54721: POP
// end ; end ;
54722: GO 54035
54724: POP
54725: POP
// end ;
54726: LD_VAR 0 8
54730: RET
// export function BuildingTechInvented ( side , btype ) ; begin
54731: LD_INT 0
54733: PPUSH
// result := true ;
54734: LD_ADDR_VAR 0 3
54738: PUSH
54739: LD_INT 1
54741: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
54742: LD_VAR 0 2
54746: PUSH
54747: LD_INT 24
54749: DOUBLE
54750: EQUAL
54751: IFTRUE 54761
54753: LD_INT 33
54755: DOUBLE
54756: EQUAL
54757: IFTRUE 54761
54759: GO 54786
54761: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
54762: LD_ADDR_VAR 0 3
54766: PUSH
54767: LD_INT 32
54769: PPUSH
54770: LD_VAR 0 1
54774: PPUSH
54775: CALL_OW 321
54779: PUSH
54780: LD_INT 2
54782: EQUAL
54783: ST_TO_ADDR
54784: GO 55102
54786: LD_INT 20
54788: DOUBLE
54789: EQUAL
54790: IFTRUE 54794
54792: GO 54819
54794: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
54795: LD_ADDR_VAR 0 3
54799: PUSH
54800: LD_INT 6
54802: PPUSH
54803: LD_VAR 0 1
54807: PPUSH
54808: CALL_OW 321
54812: PUSH
54813: LD_INT 2
54815: EQUAL
54816: ST_TO_ADDR
54817: GO 55102
54819: LD_INT 22
54821: DOUBLE
54822: EQUAL
54823: IFTRUE 54833
54825: LD_INT 36
54827: DOUBLE
54828: EQUAL
54829: IFTRUE 54833
54831: GO 54858
54833: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
54834: LD_ADDR_VAR 0 3
54838: PUSH
54839: LD_INT 15
54841: PPUSH
54842: LD_VAR 0 1
54846: PPUSH
54847: CALL_OW 321
54851: PUSH
54852: LD_INT 2
54854: EQUAL
54855: ST_TO_ADDR
54856: GO 55102
54858: LD_INT 30
54860: DOUBLE
54861: EQUAL
54862: IFTRUE 54866
54864: GO 54891
54866: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54867: LD_ADDR_VAR 0 3
54871: PUSH
54872: LD_INT 20
54874: PPUSH
54875: LD_VAR 0 1
54879: PPUSH
54880: CALL_OW 321
54884: PUSH
54885: LD_INT 2
54887: EQUAL
54888: ST_TO_ADDR
54889: GO 55102
54891: LD_INT 28
54893: DOUBLE
54894: EQUAL
54895: IFTRUE 54905
54897: LD_INT 21
54899: DOUBLE
54900: EQUAL
54901: IFTRUE 54905
54903: GO 54930
54905: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54906: LD_ADDR_VAR 0 3
54910: PUSH
54911: LD_INT 21
54913: PPUSH
54914: LD_VAR 0 1
54918: PPUSH
54919: CALL_OW 321
54923: PUSH
54924: LD_INT 2
54926: EQUAL
54927: ST_TO_ADDR
54928: GO 55102
54930: LD_INT 16
54932: DOUBLE
54933: EQUAL
54934: IFTRUE 54938
54936: GO 54963
54938: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54939: LD_ADDR_VAR 0 3
54943: PUSH
54944: LD_INT 84
54946: PPUSH
54947: LD_VAR 0 1
54951: PPUSH
54952: CALL_OW 321
54956: PUSH
54957: LD_INT 2
54959: EQUAL
54960: ST_TO_ADDR
54961: GO 55102
54963: LD_INT 19
54965: DOUBLE
54966: EQUAL
54967: IFTRUE 54977
54969: LD_INT 23
54971: DOUBLE
54972: EQUAL
54973: IFTRUE 54977
54975: GO 55002
54977: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54978: LD_ADDR_VAR 0 3
54982: PUSH
54983: LD_INT 83
54985: PPUSH
54986: LD_VAR 0 1
54990: PPUSH
54991: CALL_OW 321
54995: PUSH
54996: LD_INT 2
54998: EQUAL
54999: ST_TO_ADDR
55000: GO 55102
55002: LD_INT 17
55004: DOUBLE
55005: EQUAL
55006: IFTRUE 55010
55008: GO 55035
55010: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
55011: LD_ADDR_VAR 0 3
55015: PUSH
55016: LD_INT 39
55018: PPUSH
55019: LD_VAR 0 1
55023: PPUSH
55024: CALL_OW 321
55028: PUSH
55029: LD_INT 2
55031: EQUAL
55032: ST_TO_ADDR
55033: GO 55102
55035: LD_INT 18
55037: DOUBLE
55038: EQUAL
55039: IFTRUE 55043
55041: GO 55068
55043: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
55044: LD_ADDR_VAR 0 3
55048: PUSH
55049: LD_INT 40
55051: PPUSH
55052: LD_VAR 0 1
55056: PPUSH
55057: CALL_OW 321
55061: PUSH
55062: LD_INT 2
55064: EQUAL
55065: ST_TO_ADDR
55066: GO 55102
55068: LD_INT 27
55070: DOUBLE
55071: EQUAL
55072: IFTRUE 55076
55074: GO 55101
55076: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
55077: LD_ADDR_VAR 0 3
55081: PUSH
55082: LD_INT 35
55084: PPUSH
55085: LD_VAR 0 1
55089: PPUSH
55090: CALL_OW 321
55094: PUSH
55095: LD_INT 2
55097: EQUAL
55098: ST_TO_ADDR
55099: GO 55102
55101: POP
// end ;
55102: LD_VAR 0 3
55106: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
55107: LD_INT 0
55109: PPUSH
55110: PPUSH
55111: PPUSH
55112: PPUSH
55113: PPUSH
55114: PPUSH
55115: PPUSH
55116: PPUSH
55117: PPUSH
55118: PPUSH
55119: PPUSH
// result := false ;
55120: LD_ADDR_VAR 0 6
55124: PUSH
55125: LD_INT 0
55127: ST_TO_ADDR
// if btype = b_depot then
55128: LD_VAR 0 2
55132: PUSH
55133: LD_INT 0
55135: EQUAL
55136: IFFALSE 55148
// begin result := true ;
55138: LD_ADDR_VAR 0 6
55142: PUSH
55143: LD_INT 1
55145: ST_TO_ADDR
// exit ;
55146: GO 56002
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
55148: LD_VAR 0 1
55152: NOT
55153: IFTRUE 55178
55155: PUSH
55156: LD_VAR 0 1
55160: PPUSH
55161: CALL_OW 266
55165: PUSH
55166: LD_INT 0
55168: PUSH
55169: LD_INT 1
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: IN
55176: NOT
55177: OR
55178: IFTRUE 55187
55180: PUSH
55181: LD_VAR 0 2
55185: NOT
55186: OR
55187: IFTRUE 55223
55189: PUSH
55190: LD_VAR 0 5
55194: PUSH
55195: LD_INT 0
55197: PUSH
55198: LD_INT 1
55200: PUSH
55201: LD_INT 2
55203: PUSH
55204: LD_INT 3
55206: PUSH
55207: LD_INT 4
55209: PUSH
55210: LD_INT 5
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: IN
55221: NOT
55222: OR
55223: IFTRUE 55242
55225: PUSH
55226: LD_VAR 0 3
55230: PPUSH
55231: LD_VAR 0 4
55235: PPUSH
55236: CALL_OW 488
55240: NOT
55241: OR
55242: IFFALSE 55246
// exit ;
55244: GO 56002
// side := GetSide ( depot ) ;
55246: LD_ADDR_VAR 0 9
55250: PUSH
55251: LD_VAR 0 1
55255: PPUSH
55256: CALL_OW 255
55260: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
55261: LD_VAR 0 9
55265: PPUSH
55266: LD_VAR 0 2
55270: PPUSH
55271: CALL 54731 0 2
55275: NOT
55276: IFFALSE 55280
// exit ;
55278: GO 56002
// pom := GetBase ( depot ) ;
55280: LD_ADDR_VAR 0 10
55284: PUSH
55285: LD_VAR 0 1
55289: PPUSH
55290: CALL_OW 274
55294: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
55295: LD_ADDR_VAR 0 11
55299: PUSH
55300: LD_VAR 0 2
55304: PPUSH
55305: LD_VAR 0 1
55309: PPUSH
55310: CALL_OW 248
55314: PPUSH
55315: CALL_OW 450
55319: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
55320: LD_VAR 0 10
55324: PPUSH
55325: LD_INT 1
55327: PPUSH
55328: CALL_OW 275
55332: PUSH
55333: LD_VAR 0 11
55337: PUSH
55338: LD_INT 1
55340: ARRAY
55341: GREATEREQUAL
55342: IFFALSE 55368
55344: PUSH
55345: LD_VAR 0 10
55349: PPUSH
55350: LD_INT 2
55352: PPUSH
55353: CALL_OW 275
55357: PUSH
55358: LD_VAR 0 11
55362: PUSH
55363: LD_INT 2
55365: ARRAY
55366: GREATEREQUAL
55367: AND
55368: IFFALSE 55394
55370: PUSH
55371: LD_VAR 0 10
55375: PPUSH
55376: LD_INT 3
55378: PPUSH
55379: CALL_OW 275
55383: PUSH
55384: LD_VAR 0 11
55388: PUSH
55389: LD_INT 3
55391: ARRAY
55392: GREATEREQUAL
55393: AND
55394: NOT
55395: IFFALSE 55399
// exit ;
55397: GO 56002
// if GetBType ( depot ) = b_depot then
55399: LD_VAR 0 1
55403: PPUSH
55404: CALL_OW 266
55408: PUSH
55409: LD_INT 0
55411: EQUAL
55412: IFFALSE 55424
// dist := 28 else
55414: LD_ADDR_VAR 0 14
55418: PUSH
55419: LD_INT 28
55421: ST_TO_ADDR
55422: GO 55432
// dist := 36 ;
55424: LD_ADDR_VAR 0 14
55428: PUSH
55429: LD_INT 36
55431: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
55432: LD_VAR 0 1
55436: PPUSH
55437: LD_VAR 0 3
55441: PPUSH
55442: LD_VAR 0 4
55446: PPUSH
55447: CALL_OW 297
55451: PUSH
55452: LD_VAR 0 14
55456: GREATER
55457: IFFALSE 55461
// exit ;
55459: GO 56002
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
55461: LD_ADDR_VAR 0 12
55465: PUSH
55466: LD_VAR 0 2
55470: PPUSH
55471: LD_VAR 0 3
55475: PPUSH
55476: LD_VAR 0 4
55480: PPUSH
55481: LD_VAR 0 5
55485: PPUSH
55486: LD_VAR 0 1
55490: PPUSH
55491: CALL_OW 248
55495: PPUSH
55496: LD_INT 0
55498: PPUSH
55499: CALL 56007 0 6
55503: ST_TO_ADDR
// if not hexes then
55504: LD_VAR 0 12
55508: NOT
55509: IFFALSE 55513
// exit ;
55511: GO 56002
// hex := GetHexInfo ( x , y ) ;
55513: LD_ADDR_VAR 0 15
55517: PUSH
55518: LD_VAR 0 3
55522: PPUSH
55523: LD_VAR 0 4
55527: PPUSH
55528: CALL_OW 546
55532: ST_TO_ADDR
// if hex [ 1 ] then
55533: LD_VAR 0 15
55537: PUSH
55538: LD_INT 1
55540: ARRAY
55541: IFFALSE 55545
// exit ;
55543: GO 56002
// height := hex [ 2 ] ;
55545: LD_ADDR_VAR 0 13
55549: PUSH
55550: LD_VAR 0 15
55554: PUSH
55555: LD_INT 2
55557: ARRAY
55558: ST_TO_ADDR
// for i = 1 to hexes do
55559: LD_ADDR_VAR 0 7
55563: PUSH
55564: DOUBLE
55565: LD_INT 1
55567: DEC
55568: ST_TO_ADDR
55569: LD_VAR 0 12
55573: PUSH
55574: FOR_TO
55575: IFFALSE 55919
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
55577: LD_VAR 0 12
55581: PUSH
55582: LD_VAR 0 7
55586: ARRAY
55587: PUSH
55588: LD_INT 1
55590: ARRAY
55591: PPUSH
55592: LD_VAR 0 12
55596: PUSH
55597: LD_VAR 0 7
55601: ARRAY
55602: PUSH
55603: LD_INT 2
55605: ARRAY
55606: PPUSH
55607: CALL_OW 488
55611: NOT
55612: IFTRUE 55654
55614: PUSH
55615: LD_VAR 0 12
55619: PUSH
55620: LD_VAR 0 7
55624: ARRAY
55625: PUSH
55626: LD_INT 1
55628: ARRAY
55629: PPUSH
55630: LD_VAR 0 12
55634: PUSH
55635: LD_VAR 0 7
55639: ARRAY
55640: PUSH
55641: LD_INT 2
55643: ARRAY
55644: PPUSH
55645: CALL_OW 428
55649: PUSH
55650: LD_INT 0
55652: GREATER
55653: OR
55654: IFTRUE 55692
55656: PUSH
55657: LD_VAR 0 12
55661: PUSH
55662: LD_VAR 0 7
55666: ARRAY
55667: PUSH
55668: LD_INT 1
55670: ARRAY
55671: PPUSH
55672: LD_VAR 0 12
55676: PUSH
55677: LD_VAR 0 7
55681: ARRAY
55682: PUSH
55683: LD_INT 2
55685: ARRAY
55686: PPUSH
55687: CALL_OW 351
55691: OR
55692: IFFALSE 55698
// exit ;
55694: POP
55695: POP
55696: GO 56002
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55698: LD_ADDR_VAR 0 8
55702: PUSH
55703: LD_VAR 0 12
55707: PUSH
55708: LD_VAR 0 7
55712: ARRAY
55713: PUSH
55714: LD_INT 1
55716: ARRAY
55717: PPUSH
55718: LD_VAR 0 12
55722: PUSH
55723: LD_VAR 0 7
55727: ARRAY
55728: PUSH
55729: LD_INT 2
55731: ARRAY
55732: PPUSH
55733: CALL_OW 546
55737: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
55738: LD_VAR 0 8
55742: PUSH
55743: LD_INT 1
55745: ARRAY
55746: IFTRUE 55768
55748: PUSH
55749: LD_VAR 0 8
55753: PUSH
55754: LD_INT 2
55756: ARRAY
55757: PUSH
55758: LD_VAR 0 13
55762: PUSH
55763: LD_INT 2
55765: PLUS
55766: GREATER
55767: OR
55768: IFTRUE 55790
55770: PUSH
55771: LD_VAR 0 8
55775: PUSH
55776: LD_INT 2
55778: ARRAY
55779: PUSH
55780: LD_VAR 0 13
55784: PUSH
55785: LD_INT 2
55787: MINUS
55788: LESS
55789: OR
55790: IFTRUE 55858
55792: PUSH
55793: LD_VAR 0 8
55797: PUSH
55798: LD_INT 3
55800: ARRAY
55801: PUSH
55802: LD_INT 0
55804: PUSH
55805: LD_INT 8
55807: PUSH
55808: LD_INT 9
55810: PUSH
55811: LD_INT 10
55813: PUSH
55814: LD_INT 11
55816: PUSH
55817: LD_INT 12
55819: PUSH
55820: LD_INT 13
55822: PUSH
55823: LD_INT 16
55825: PUSH
55826: LD_INT 17
55828: PUSH
55829: LD_INT 18
55831: PUSH
55832: LD_INT 19
55834: PUSH
55835: LD_INT 20
55837: PUSH
55838: LD_INT 21
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: IN
55856: NOT
55857: OR
55858: IFTRUE 55871
55860: PUSH
55861: LD_VAR 0 8
55865: PUSH
55866: LD_INT 5
55868: ARRAY
55869: NOT
55870: OR
55871: IFTRUE 55911
55873: PUSH
55874: LD_VAR 0 8
55878: PUSH
55879: LD_INT 6
55881: ARRAY
55882: PUSH
55883: LD_INT 1
55885: PUSH
55886: LD_INT 2
55888: PUSH
55889: LD_INT 7
55891: PUSH
55892: LD_INT 9
55894: PUSH
55895: LD_INT 10
55897: PUSH
55898: LD_INT 11
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: IN
55909: NOT
55910: OR
55911: IFFALSE 55917
// exit ;
55913: POP
55914: POP
55915: GO 56002
// end ;
55917: GO 55574
55919: POP
55920: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55921: LD_VAR 0 9
55925: PPUSH
55926: LD_VAR 0 3
55930: PPUSH
55931: LD_VAR 0 4
55935: PPUSH
55936: LD_INT 20
55938: PPUSH
55939: CALL 47821 0 4
55943: PUSH
55944: LD_INT 4
55946: ARRAY
55947: IFFALSE 55951
// exit ;
55949: GO 56002
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55951: LD_VAR 0 2
55955: PUSH
55956: LD_INT 29
55958: PUSH
55959: LD_INT 30
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: IN
55966: IFFALSE 55990
55968: PUSH
55969: LD_VAR 0 3
55973: PPUSH
55974: LD_VAR 0 4
55978: PPUSH
55979: LD_VAR 0 9
55983: PPUSH
55984: CALL_OW 440
55988: NOT
55989: AND
55990: IFFALSE 55994
// exit ;
55992: GO 56002
// result := true ;
55994: LD_ADDR_VAR 0 6
55998: PUSH
55999: LD_INT 1
56001: ST_TO_ADDR
// end ;
56002: LD_VAR 0 6
56006: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
56007: LD_INT 0
56009: PPUSH
56010: PPUSH
56011: PPUSH
56012: PPUSH
56013: PPUSH
56014: PPUSH
56015: PPUSH
56016: PPUSH
56017: PPUSH
56018: PPUSH
56019: PPUSH
56020: PPUSH
56021: PPUSH
56022: PPUSH
56023: PPUSH
56024: PPUSH
56025: PPUSH
56026: PPUSH
56027: PPUSH
56028: PPUSH
56029: PPUSH
56030: PPUSH
56031: PPUSH
56032: PPUSH
56033: PPUSH
56034: PPUSH
56035: PPUSH
56036: PPUSH
56037: PPUSH
56038: PPUSH
56039: PPUSH
56040: PPUSH
56041: PPUSH
56042: PPUSH
56043: PPUSH
56044: PPUSH
56045: PPUSH
56046: PPUSH
56047: PPUSH
56048: PPUSH
56049: PPUSH
56050: PPUSH
56051: PPUSH
56052: PPUSH
56053: PPUSH
56054: PPUSH
56055: PPUSH
56056: PPUSH
56057: PPUSH
56058: PPUSH
56059: PPUSH
56060: PPUSH
56061: PPUSH
56062: PPUSH
56063: PPUSH
56064: PPUSH
56065: PPUSH
56066: PPUSH
// result = [ ] ;
56067: LD_ADDR_VAR 0 7
56071: PUSH
56072: EMPTY
56073: ST_TO_ADDR
// temp_list = [ ] ;
56074: LD_ADDR_VAR 0 9
56078: PUSH
56079: EMPTY
56080: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
56081: LD_VAR 0 4
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: LD_INT 1
56091: PUSH
56092: LD_INT 2
56094: PUSH
56095: LD_INT 3
56097: PUSH
56098: LD_INT 4
56100: PUSH
56101: LD_INT 5
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: IN
56112: NOT
56113: IFTRUE 56156
56115: PUSH
56116: LD_VAR 0 1
56120: PUSH
56121: LD_INT 0
56123: PUSH
56124: LD_INT 1
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: IN
56131: IFFALSE 56155
56133: PUSH
56134: LD_VAR 0 5
56138: PUSH
56139: LD_INT 1
56141: PUSH
56142: LD_INT 2
56144: PUSH
56145: LD_INT 3
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: LIST
56152: IN
56153: NOT
56154: AND
56155: OR
56156: IFFALSE 56160
// exit ;
56158: GO 74559
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
56160: LD_VAR 0 1
56164: PUSH
56165: LD_INT 6
56167: PUSH
56168: LD_INT 7
56170: PUSH
56171: LD_INT 8
56173: PUSH
56174: LD_INT 13
56176: PUSH
56177: LD_INT 12
56179: PUSH
56180: LD_INT 15
56182: PUSH
56183: LD_INT 11
56185: PUSH
56186: LD_INT 14
56188: PUSH
56189: LD_INT 10
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: IN
56203: IFFALSE 56213
// btype = b_lab ;
56205: LD_ADDR_VAR 0 1
56209: PUSH
56210: LD_INT 6
56212: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
56213: LD_VAR 0 6
56217: PUSH
56218: LD_INT 0
56220: PUSH
56221: LD_INT 1
56223: PUSH
56224: LD_INT 2
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: LIST
56231: IN
56232: NOT
56233: IFTRUE 56301
56235: PUSH
56236: LD_VAR 0 1
56240: PUSH
56241: LD_INT 0
56243: PUSH
56244: LD_INT 1
56246: PUSH
56247: LD_INT 2
56249: PUSH
56250: LD_INT 3
56252: PUSH
56253: LD_INT 6
56255: PUSH
56256: LD_INT 36
56258: PUSH
56259: LD_INT 4
56261: PUSH
56262: LD_INT 5
56264: PUSH
56265: LD_INT 31
56267: PUSH
56268: LD_INT 32
56270: PUSH
56271: LD_INT 33
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: IN
56287: NOT
56288: IFFALSE 56300
56290: PUSH
56291: LD_VAR 0 6
56295: PUSH
56296: LD_INT 1
56298: EQUAL
56299: AND
56300: OR
56301: IFTRUE 56333
56303: PUSH
56304: LD_VAR 0 1
56308: PUSH
56309: LD_INT 2
56311: PUSH
56312: LD_INT 3
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: IN
56319: NOT
56320: IFFALSE 56332
56322: PUSH
56323: LD_VAR 0 6
56327: PUSH
56328: LD_INT 2
56330: EQUAL
56331: AND
56332: OR
56333: IFFALSE 56343
// mode = 0 ;
56335: LD_ADDR_VAR 0 6
56339: PUSH
56340: LD_INT 0
56342: ST_TO_ADDR
// case mode of 0 :
56343: LD_VAR 0 6
56347: PUSH
56348: LD_INT 0
56350: DOUBLE
56351: EQUAL
56352: IFTRUE 56356
56354: GO 67809
56356: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56357: LD_ADDR_VAR 0 11
56361: PUSH
56362: LD_INT 0
56364: PUSH
56365: LD_INT 0
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 0
56374: PUSH
56375: LD_INT 1
56377: NEG
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 1
56385: PUSH
56386: LD_INT 0
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 1
56395: PUSH
56396: LD_INT 1
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 0
56405: PUSH
56406: LD_INT 1
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 1
56415: NEG
56416: PUSH
56417: LD_INT 0
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 1
56426: NEG
56427: PUSH
56428: LD_INT 1
56430: NEG
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 1
56438: NEG
56439: PUSH
56440: LD_INT 2
56442: NEG
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 0
56450: PUSH
56451: LD_INT 2
56453: NEG
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 1
56461: PUSH
56462: LD_INT 1
56464: NEG
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 1
56472: PUSH
56473: LD_INT 2
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 0
56482: PUSH
56483: LD_INT 2
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 1
56492: NEG
56493: PUSH
56494: LD_INT 1
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 1
56503: PUSH
56504: LD_INT 3
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 0
56513: PUSH
56514: LD_INT 3
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 1
56523: NEG
56524: PUSH
56525: LD_INT 2
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56550: LD_ADDR_VAR 0 12
56554: PUSH
56555: LD_INT 0
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 0
56567: PUSH
56568: LD_INT 1
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 1
56578: PUSH
56579: LD_INT 0
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 1
56588: PUSH
56589: LD_INT 1
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 0
56598: PUSH
56599: LD_INT 1
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 1
56608: NEG
56609: PUSH
56610: LD_INT 0
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 1
56619: NEG
56620: PUSH
56621: LD_INT 1
56623: NEG
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 1
56631: PUSH
56632: LD_INT 1
56634: NEG
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 2
56642: PUSH
56643: LD_INT 0
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 2
56652: PUSH
56653: LD_INT 1
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 1
56662: NEG
56663: PUSH
56664: LD_INT 1
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 2
56673: NEG
56674: PUSH
56675: LD_INT 0
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 2
56684: NEG
56685: PUSH
56686: LD_INT 1
56688: NEG
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 2
56696: NEG
56697: PUSH
56698: LD_INT 1
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 3
56707: NEG
56708: PUSH
56709: LD_INT 0
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 3
56718: NEG
56719: PUSH
56720: LD_INT 1
56722: NEG
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56746: LD_ADDR_VAR 0 13
56750: PUSH
56751: LD_INT 0
56753: PUSH
56754: LD_INT 0
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 0
56763: PUSH
56764: LD_INT 1
56766: NEG
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 1
56774: PUSH
56775: LD_INT 0
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 1
56784: PUSH
56785: LD_INT 1
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 0
56794: PUSH
56795: LD_INT 1
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 1
56804: NEG
56805: PUSH
56806: LD_INT 0
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 1
56815: NEG
56816: PUSH
56817: LD_INT 1
56819: NEG
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 1
56827: NEG
56828: PUSH
56829: LD_INT 2
56831: NEG
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 2
56839: PUSH
56840: LD_INT 1
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 2
56849: PUSH
56850: LD_INT 2
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 1
56859: PUSH
56860: LD_INT 2
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 2
56869: NEG
56870: PUSH
56871: LD_INT 1
56873: NEG
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 2
56881: NEG
56882: PUSH
56883: LD_INT 2
56885: NEG
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 2
56893: NEG
56894: PUSH
56895: LD_INT 3
56897: NEG
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 3
56905: NEG
56906: PUSH
56907: LD_INT 2
56909: NEG
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 3
56917: NEG
56918: PUSH
56919: LD_INT 3
56921: NEG
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56945: LD_ADDR_VAR 0 14
56949: PUSH
56950: LD_INT 0
56952: PUSH
56953: LD_INT 0
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 0
56962: PUSH
56963: LD_INT 1
56965: NEG
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 1
56973: PUSH
56974: LD_INT 0
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 1
56983: PUSH
56984: LD_INT 1
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 0
56993: PUSH
56994: LD_INT 1
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 1
57003: NEG
57004: PUSH
57005: LD_INT 0
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 1
57014: NEG
57015: PUSH
57016: LD_INT 1
57018: NEG
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 1
57026: NEG
57027: PUSH
57028: LD_INT 2
57030: NEG
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 0
57038: PUSH
57039: LD_INT 2
57041: NEG
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 1
57049: PUSH
57050: LD_INT 1
57052: NEG
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 1
57060: PUSH
57061: LD_INT 2
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 0
57070: PUSH
57071: LD_INT 2
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 1
57080: NEG
57081: PUSH
57082: LD_INT 1
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 1
57091: NEG
57092: PUSH
57093: LD_INT 3
57095: NEG
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 0
57103: PUSH
57104: LD_INT 3
57106: NEG
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 1
57114: PUSH
57115: LD_INT 2
57117: NEG
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57141: LD_ADDR_VAR 0 15
57145: PUSH
57146: LD_INT 0
57148: PUSH
57149: LD_INT 0
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 0
57158: PUSH
57159: LD_INT 1
57161: NEG
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 1
57169: PUSH
57170: LD_INT 0
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 1
57179: PUSH
57180: LD_INT 1
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 0
57189: PUSH
57190: LD_INT 1
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 1
57199: NEG
57200: PUSH
57201: LD_INT 0
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 1
57210: NEG
57211: PUSH
57212: LD_INT 1
57214: NEG
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 1
57222: PUSH
57223: LD_INT 1
57225: NEG
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 2
57233: PUSH
57234: LD_INT 0
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 2
57243: PUSH
57244: LD_INT 1
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 1
57253: NEG
57254: PUSH
57255: LD_INT 1
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 2
57264: NEG
57265: PUSH
57266: LD_INT 0
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 2
57275: NEG
57276: PUSH
57277: LD_INT 1
57279: NEG
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 2
57287: PUSH
57288: LD_INT 1
57290: NEG
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 3
57298: PUSH
57299: LD_INT 0
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 3
57308: PUSH
57309: LD_INT 1
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57334: LD_ADDR_VAR 0 16
57338: PUSH
57339: LD_INT 0
57341: PUSH
57342: LD_INT 0
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 0
57351: PUSH
57352: LD_INT 1
57354: NEG
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 1
57362: PUSH
57363: LD_INT 0
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 1
57372: PUSH
57373: LD_INT 1
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 0
57382: PUSH
57383: LD_INT 1
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 1
57392: NEG
57393: PUSH
57394: LD_INT 0
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 1
57403: NEG
57404: PUSH
57405: LD_INT 1
57407: NEG
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 1
57415: NEG
57416: PUSH
57417: LD_INT 2
57419: NEG
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 2
57427: PUSH
57428: LD_INT 1
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 2
57437: PUSH
57438: LD_INT 2
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 1
57447: PUSH
57448: LD_INT 2
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 2
57457: NEG
57458: PUSH
57459: LD_INT 1
57461: NEG
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 2
57469: NEG
57470: PUSH
57471: LD_INT 2
57473: NEG
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 3
57481: PUSH
57482: LD_INT 2
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 3
57491: PUSH
57492: LD_INT 3
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 2
57501: PUSH
57502: LD_INT 3
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57527: LD_ADDR_VAR 0 17
57531: PUSH
57532: LD_INT 0
57534: PUSH
57535: LD_INT 0
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 0
57544: PUSH
57545: LD_INT 1
57547: NEG
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 1
57555: PUSH
57556: LD_INT 0
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 1
57565: PUSH
57566: LD_INT 1
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 0
57575: PUSH
57576: LD_INT 1
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 1
57585: NEG
57586: PUSH
57587: LD_INT 0
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 1
57596: NEG
57597: PUSH
57598: LD_INT 1
57600: NEG
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 1
57608: NEG
57609: PUSH
57610: LD_INT 2
57612: NEG
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 0
57620: PUSH
57621: LD_INT 2
57623: NEG
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 1
57631: PUSH
57632: LD_INT 1
57634: NEG
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 2
57642: PUSH
57643: LD_INT 0
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 2
57652: PUSH
57653: LD_INT 1
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 2
57662: PUSH
57663: LD_INT 2
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 1
57672: PUSH
57673: LD_INT 2
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 0
57682: PUSH
57683: LD_INT 2
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 1
57692: NEG
57693: PUSH
57694: LD_INT 1
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 2
57703: NEG
57704: PUSH
57705: LD_INT 0
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 2
57714: NEG
57715: PUSH
57716: LD_INT 1
57718: NEG
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 2
57726: NEG
57727: PUSH
57728: LD_INT 2
57730: NEG
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57757: LD_ADDR_VAR 0 18
57761: PUSH
57762: LD_INT 0
57764: PUSH
57765: LD_INT 0
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 0
57774: PUSH
57775: LD_INT 1
57777: NEG
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 1
57785: PUSH
57786: LD_INT 0
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 1
57795: PUSH
57796: LD_INT 1
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 0
57805: PUSH
57806: LD_INT 1
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 1
57815: NEG
57816: PUSH
57817: LD_INT 0
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 1
57826: NEG
57827: PUSH
57828: LD_INT 1
57830: NEG
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 1
57838: NEG
57839: PUSH
57840: LD_INT 2
57842: NEG
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 0
57850: PUSH
57851: LD_INT 2
57853: NEG
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 1
57861: PUSH
57862: LD_INT 1
57864: NEG
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 2
57872: PUSH
57873: LD_INT 0
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 2
57882: PUSH
57883: LD_INT 1
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 2
57892: PUSH
57893: LD_INT 2
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 1
57902: PUSH
57903: LD_INT 2
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 0
57912: PUSH
57913: LD_INT 2
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 1
57922: NEG
57923: PUSH
57924: LD_INT 1
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 2
57933: NEG
57934: PUSH
57935: LD_INT 0
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 2
57944: NEG
57945: PUSH
57946: LD_INT 1
57948: NEG
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 2
57956: NEG
57957: PUSH
57958: LD_INT 2
57960: NEG
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57987: LD_ADDR_VAR 0 19
57991: PUSH
57992: LD_INT 0
57994: PUSH
57995: LD_INT 0
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 0
58004: PUSH
58005: LD_INT 1
58007: NEG
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 1
58015: PUSH
58016: LD_INT 0
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 1
58025: PUSH
58026: LD_INT 1
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 0
58035: PUSH
58036: LD_INT 1
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 1
58045: NEG
58046: PUSH
58047: LD_INT 0
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 1
58056: NEG
58057: PUSH
58058: LD_INT 1
58060: NEG
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 1
58068: NEG
58069: PUSH
58070: LD_INT 2
58072: NEG
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 0
58080: PUSH
58081: LD_INT 2
58083: NEG
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 1
58091: PUSH
58092: LD_INT 1
58094: NEG
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 2
58102: PUSH
58103: LD_INT 0
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 2
58112: PUSH
58113: LD_INT 1
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 2
58122: PUSH
58123: LD_INT 2
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 1
58132: PUSH
58133: LD_INT 2
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 0
58142: PUSH
58143: LD_INT 2
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 1
58152: NEG
58153: PUSH
58154: LD_INT 1
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 2
58163: NEG
58164: PUSH
58165: LD_INT 0
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 2
58174: NEG
58175: PUSH
58176: LD_INT 1
58178: NEG
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 2
58186: NEG
58187: PUSH
58188: LD_INT 2
58190: NEG
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58217: LD_ADDR_VAR 0 20
58221: PUSH
58222: LD_INT 0
58224: PUSH
58225: LD_INT 0
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 0
58234: PUSH
58235: LD_INT 1
58237: NEG
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 1
58245: PUSH
58246: LD_INT 0
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 1
58255: PUSH
58256: LD_INT 1
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 0
58265: PUSH
58266: LD_INT 1
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 1
58275: NEG
58276: PUSH
58277: LD_INT 0
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 1
58286: NEG
58287: PUSH
58288: LD_INT 1
58290: NEG
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 1
58298: NEG
58299: PUSH
58300: LD_INT 2
58302: NEG
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 0
58310: PUSH
58311: LD_INT 2
58313: NEG
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 1
58321: PUSH
58322: LD_INT 1
58324: NEG
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 2
58332: PUSH
58333: LD_INT 0
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 2
58342: PUSH
58343: LD_INT 1
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 2
58352: PUSH
58353: LD_INT 2
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 1
58362: PUSH
58363: LD_INT 2
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 0
58372: PUSH
58373: LD_INT 2
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 1
58382: NEG
58383: PUSH
58384: LD_INT 1
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 2
58393: NEG
58394: PUSH
58395: LD_INT 0
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 2
58404: NEG
58405: PUSH
58406: LD_INT 1
58408: NEG
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 2
58416: NEG
58417: PUSH
58418: LD_INT 2
58420: NEG
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58447: LD_ADDR_VAR 0 21
58451: PUSH
58452: LD_INT 0
58454: PUSH
58455: LD_INT 0
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 0
58464: PUSH
58465: LD_INT 1
58467: NEG
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 1
58475: PUSH
58476: LD_INT 0
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 1
58485: PUSH
58486: LD_INT 1
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 0
58495: PUSH
58496: LD_INT 1
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 1
58505: NEG
58506: PUSH
58507: LD_INT 0
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 1
58516: NEG
58517: PUSH
58518: LD_INT 1
58520: NEG
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 1
58528: NEG
58529: PUSH
58530: LD_INT 2
58532: NEG
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 0
58540: PUSH
58541: LD_INT 2
58543: NEG
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 1
58551: PUSH
58552: LD_INT 1
58554: NEG
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 2
58562: PUSH
58563: LD_INT 0
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 2
58572: PUSH
58573: LD_INT 1
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 2
58582: PUSH
58583: LD_INT 2
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 1
58592: PUSH
58593: LD_INT 2
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 0
58602: PUSH
58603: LD_INT 2
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 1
58612: NEG
58613: PUSH
58614: LD_INT 1
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 2
58623: NEG
58624: PUSH
58625: LD_INT 0
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 2
58634: NEG
58635: PUSH
58636: LD_INT 1
58638: NEG
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 2
58646: NEG
58647: PUSH
58648: LD_INT 2
58650: NEG
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58677: LD_ADDR_VAR 0 22
58681: PUSH
58682: LD_INT 0
58684: PUSH
58685: LD_INT 0
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 0
58694: PUSH
58695: LD_INT 1
58697: NEG
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 1
58705: PUSH
58706: LD_INT 0
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 1
58715: PUSH
58716: LD_INT 1
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 0
58725: PUSH
58726: LD_INT 1
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: LD_INT 0
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 1
58746: NEG
58747: PUSH
58748: LD_INT 1
58750: NEG
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 1
58758: NEG
58759: PUSH
58760: LD_INT 2
58762: NEG
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 0
58770: PUSH
58771: LD_INT 2
58773: NEG
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 1
58781: PUSH
58782: LD_INT 1
58784: NEG
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 2
58792: PUSH
58793: LD_INT 0
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 2
58802: PUSH
58803: LD_INT 1
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 2
58812: PUSH
58813: LD_INT 2
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 1
58822: PUSH
58823: LD_INT 2
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 0
58832: PUSH
58833: LD_INT 2
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 1
58842: NEG
58843: PUSH
58844: LD_INT 1
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 2
58853: NEG
58854: PUSH
58855: LD_INT 0
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 2
58864: NEG
58865: PUSH
58866: LD_INT 1
58868: NEG
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 2
58876: NEG
58877: PUSH
58878: LD_INT 2
58880: NEG
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58907: LD_ADDR_VAR 0 23
58911: PUSH
58912: LD_INT 0
58914: PUSH
58915: LD_INT 0
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 0
58924: PUSH
58925: LD_INT 1
58927: NEG
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 1
58935: PUSH
58936: LD_INT 0
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 1
58945: PUSH
58946: LD_INT 1
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 0
58955: PUSH
58956: LD_INT 1
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 1
58965: NEG
58966: PUSH
58967: LD_INT 0
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 1
58976: NEG
58977: PUSH
58978: LD_INT 1
58980: NEG
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 1
58988: NEG
58989: PUSH
58990: LD_INT 2
58992: NEG
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 0
59000: PUSH
59001: LD_INT 2
59003: NEG
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 1
59011: PUSH
59012: LD_INT 1
59014: NEG
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 2
59022: PUSH
59023: LD_INT 0
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 2
59032: PUSH
59033: LD_INT 1
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 2
59042: PUSH
59043: LD_INT 2
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 1
59052: PUSH
59053: LD_INT 2
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 0
59062: PUSH
59063: LD_INT 2
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 1
59072: NEG
59073: PUSH
59074: LD_INT 1
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 2
59083: NEG
59084: PUSH
59085: LD_INT 0
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 2
59094: NEG
59095: PUSH
59096: LD_INT 1
59098: NEG
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 2
59106: NEG
59107: PUSH
59108: LD_INT 2
59110: NEG
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 2
59118: NEG
59119: PUSH
59120: LD_INT 3
59122: NEG
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 1
59130: NEG
59131: PUSH
59132: LD_INT 3
59134: NEG
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 1
59142: PUSH
59143: LD_INT 2
59145: NEG
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 2
59153: PUSH
59154: LD_INT 1
59156: NEG
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
59187: LD_ADDR_VAR 0 24
59191: PUSH
59192: LD_INT 0
59194: PUSH
59195: LD_INT 0
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 0
59204: PUSH
59205: LD_INT 1
59207: NEG
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 1
59215: PUSH
59216: LD_INT 0
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 1
59225: PUSH
59226: LD_INT 1
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 0
59235: PUSH
59236: LD_INT 1
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 1
59245: NEG
59246: PUSH
59247: LD_INT 0
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 1
59256: NEG
59257: PUSH
59258: LD_INT 1
59260: NEG
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 1
59268: NEG
59269: PUSH
59270: LD_INT 2
59272: NEG
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 0
59280: PUSH
59281: LD_INT 2
59283: NEG
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 1
59291: PUSH
59292: LD_INT 1
59294: NEG
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 2
59302: PUSH
59303: LD_INT 0
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 2
59312: PUSH
59313: LD_INT 1
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 2
59322: PUSH
59323: LD_INT 2
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 1
59332: PUSH
59333: LD_INT 2
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 0
59342: PUSH
59343: LD_INT 2
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 1
59352: NEG
59353: PUSH
59354: LD_INT 1
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 2
59363: NEG
59364: PUSH
59365: LD_INT 0
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 2
59374: NEG
59375: PUSH
59376: LD_INT 1
59378: NEG
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 2
59386: NEG
59387: PUSH
59388: LD_INT 2
59390: NEG
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 1
59398: PUSH
59399: LD_INT 2
59401: NEG
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 2
59409: PUSH
59410: LD_INT 1
59412: NEG
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 3
59420: PUSH
59421: LD_INT 1
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 3
59430: PUSH
59431: LD_INT 2
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: LIST
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: LIST
59458: LIST
59459: LIST
59460: LIST
59461: LIST
59462: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
59463: LD_ADDR_VAR 0 25
59467: PUSH
59468: LD_INT 0
59470: PUSH
59471: LD_INT 0
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 0
59480: PUSH
59481: LD_INT 1
59483: NEG
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 1
59491: PUSH
59492: LD_INT 0
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 1
59501: PUSH
59502: LD_INT 1
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 0
59511: PUSH
59512: LD_INT 1
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 1
59521: NEG
59522: PUSH
59523: LD_INT 0
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 1
59532: NEG
59533: PUSH
59534: LD_INT 1
59536: NEG
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 1
59544: NEG
59545: PUSH
59546: LD_INT 2
59548: NEG
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 0
59556: PUSH
59557: LD_INT 2
59559: NEG
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 1
59567: PUSH
59568: LD_INT 1
59570: NEG
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 2
59578: PUSH
59579: LD_INT 0
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 2
59588: PUSH
59589: LD_INT 1
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 2
59598: PUSH
59599: LD_INT 2
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 1
59608: PUSH
59609: LD_INT 2
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 0
59618: PUSH
59619: LD_INT 2
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 1
59628: NEG
59629: PUSH
59630: LD_INT 1
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 2
59639: NEG
59640: PUSH
59641: LD_INT 0
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 2
59650: NEG
59651: PUSH
59652: LD_INT 1
59654: NEG
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 2
59662: NEG
59663: PUSH
59664: LD_INT 2
59666: NEG
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 3
59674: PUSH
59675: LD_INT 1
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 3
59684: PUSH
59685: LD_INT 2
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 2
59694: PUSH
59695: LD_INT 3
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 1
59704: PUSH
59705: LD_INT 3
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59737: LD_ADDR_VAR 0 26
59741: PUSH
59742: LD_INT 0
59744: PUSH
59745: LD_INT 0
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 0
59754: PUSH
59755: LD_INT 1
59757: NEG
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 1
59765: PUSH
59766: LD_INT 0
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 1
59775: PUSH
59776: LD_INT 1
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 0
59785: PUSH
59786: LD_INT 1
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 1
59795: NEG
59796: PUSH
59797: LD_INT 0
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 1
59806: NEG
59807: PUSH
59808: LD_INT 1
59810: NEG
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 1
59818: NEG
59819: PUSH
59820: LD_INT 2
59822: NEG
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 0
59830: PUSH
59831: LD_INT 2
59833: NEG
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 1
59841: PUSH
59842: LD_INT 1
59844: NEG
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 2
59852: PUSH
59853: LD_INT 0
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 2
59862: PUSH
59863: LD_INT 1
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 2
59872: PUSH
59873: LD_INT 2
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 1
59882: PUSH
59883: LD_INT 2
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 0
59892: PUSH
59893: LD_INT 2
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 1
59902: NEG
59903: PUSH
59904: LD_INT 1
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 2
59913: NEG
59914: PUSH
59915: LD_INT 0
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 2
59924: NEG
59925: PUSH
59926: LD_INT 1
59928: NEG
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 2
59936: NEG
59937: PUSH
59938: LD_INT 2
59940: NEG
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 2
59948: PUSH
59949: LD_INT 3
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 1
59958: PUSH
59959: LD_INT 3
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 1
59968: NEG
59969: PUSH
59970: LD_INT 2
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 2
59979: NEG
59980: PUSH
59981: LD_INT 1
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60013: LD_ADDR_VAR 0 27
60017: PUSH
60018: LD_INT 0
60020: PUSH
60021: LD_INT 0
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 0
60030: PUSH
60031: LD_INT 1
60033: NEG
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 1
60041: PUSH
60042: LD_INT 0
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 1
60051: PUSH
60052: LD_INT 1
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 0
60061: PUSH
60062: LD_INT 1
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 1
60071: NEG
60072: PUSH
60073: LD_INT 0
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 1
60082: NEG
60083: PUSH
60084: LD_INT 1
60086: NEG
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 1
60094: NEG
60095: PUSH
60096: LD_INT 2
60098: NEG
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 0
60106: PUSH
60107: LD_INT 2
60109: NEG
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 1
60117: PUSH
60118: LD_INT 1
60120: NEG
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 2
60128: PUSH
60129: LD_INT 0
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 2
60138: PUSH
60139: LD_INT 1
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 2
60148: PUSH
60149: LD_INT 2
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 1
60158: PUSH
60159: LD_INT 2
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 0
60168: PUSH
60169: LD_INT 2
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 1
60178: NEG
60179: PUSH
60180: LD_INT 1
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 2
60189: NEG
60190: PUSH
60191: LD_INT 0
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 2
60200: NEG
60201: PUSH
60202: LD_INT 1
60204: NEG
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 2
60212: NEG
60213: PUSH
60214: LD_INT 2
60216: NEG
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 1
60224: NEG
60225: PUSH
60226: LD_INT 2
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 2
60235: NEG
60236: PUSH
60237: LD_INT 1
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 3
60246: NEG
60247: PUSH
60248: LD_INT 1
60250: NEG
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 3
60258: NEG
60259: PUSH
60260: LD_INT 2
60262: NEG
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60293: LD_ADDR_VAR 0 28
60297: PUSH
60298: LD_INT 0
60300: PUSH
60301: LD_INT 0
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 0
60310: PUSH
60311: LD_INT 1
60313: NEG
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 1
60321: PUSH
60322: LD_INT 0
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 1
60331: PUSH
60332: LD_INT 1
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 0
60341: PUSH
60342: LD_INT 1
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 1
60351: NEG
60352: PUSH
60353: LD_INT 0
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 1
60362: NEG
60363: PUSH
60364: LD_INT 1
60366: NEG
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 1
60374: NEG
60375: PUSH
60376: LD_INT 2
60378: NEG
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 0
60386: PUSH
60387: LD_INT 2
60389: NEG
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 1
60397: PUSH
60398: LD_INT 1
60400: NEG
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 2
60408: PUSH
60409: LD_INT 0
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 2
60418: PUSH
60419: LD_INT 1
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 2
60428: PUSH
60429: LD_INT 2
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 1
60438: PUSH
60439: LD_INT 2
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: LD_INT 0
60448: PUSH
60449: LD_INT 2
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 1
60458: NEG
60459: PUSH
60460: LD_INT 1
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 2
60469: NEG
60470: PUSH
60471: LD_INT 0
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 2
60480: NEG
60481: PUSH
60482: LD_INT 1
60484: NEG
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 2
60492: NEG
60493: PUSH
60494: LD_INT 2
60496: NEG
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 2
60504: NEG
60505: PUSH
60506: LD_INT 3
60508: NEG
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 1
60516: NEG
60517: PUSH
60518: LD_INT 3
60520: NEG
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 3
60528: NEG
60529: PUSH
60530: LD_INT 1
60532: NEG
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 3
60540: NEG
60541: PUSH
60542: LD_INT 2
60544: NEG
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60575: LD_ADDR_VAR 0 29
60579: PUSH
60580: LD_INT 0
60582: PUSH
60583: LD_INT 0
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 0
60592: PUSH
60593: LD_INT 1
60595: NEG
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 1
60603: PUSH
60604: LD_INT 0
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 1
60613: PUSH
60614: LD_INT 1
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 0
60623: PUSH
60624: LD_INT 1
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 1
60633: NEG
60634: PUSH
60635: LD_INT 0
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 1
60644: NEG
60645: PUSH
60646: LD_INT 1
60648: NEG
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 1
60656: NEG
60657: PUSH
60658: LD_INT 2
60660: NEG
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 0
60668: PUSH
60669: LD_INT 2
60671: NEG
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 1
60679: PUSH
60680: LD_INT 1
60682: NEG
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 2
60690: PUSH
60691: LD_INT 0
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 2
60700: PUSH
60701: LD_INT 1
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 1
60710: PUSH
60711: LD_INT 2
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 0
60720: PUSH
60721: LD_INT 2
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 1
60730: NEG
60731: PUSH
60732: LD_INT 1
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 2
60741: NEG
60742: PUSH
60743: LD_INT 1
60745: NEG
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 2
60753: NEG
60754: PUSH
60755: LD_INT 2
60757: NEG
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 2
60765: NEG
60766: PUSH
60767: LD_INT 3
60769: NEG
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 2
60777: PUSH
60778: LD_INT 1
60780: NEG
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 3
60788: PUSH
60789: LD_INT 1
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 1
60798: PUSH
60799: LD_INT 3
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 1
60808: NEG
60809: PUSH
60810: LD_INT 2
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 3
60819: NEG
60820: PUSH
60821: LD_INT 2
60823: NEG
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60854: LD_ADDR_VAR 0 30
60858: PUSH
60859: LD_INT 0
60861: PUSH
60862: LD_INT 0
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 0
60871: PUSH
60872: LD_INT 1
60874: NEG
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 1
60882: PUSH
60883: LD_INT 0
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 1
60892: PUSH
60893: LD_INT 1
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 0
60902: PUSH
60903: LD_INT 1
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 1
60912: NEG
60913: PUSH
60914: LD_INT 0
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 1
60923: NEG
60924: PUSH
60925: LD_INT 1
60927: NEG
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 1
60935: NEG
60936: PUSH
60937: LD_INT 2
60939: NEG
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 0
60947: PUSH
60948: LD_INT 2
60950: NEG
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 1
60958: PUSH
60959: LD_INT 1
60961: NEG
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 2
60969: PUSH
60970: LD_INT 0
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 2
60979: PUSH
60980: LD_INT 1
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 2
60989: PUSH
60990: LD_INT 2
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 1
60999: PUSH
61000: LD_INT 2
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 1
61009: NEG
61010: PUSH
61011: LD_INT 1
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 2
61020: NEG
61021: PUSH
61022: LD_INT 0
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 2
61031: NEG
61032: PUSH
61033: LD_INT 1
61035: NEG
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 1
61043: NEG
61044: PUSH
61045: LD_INT 3
61047: NEG
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 1
61055: PUSH
61056: LD_INT 2
61058: NEG
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 3
61066: PUSH
61067: LD_INT 2
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 2
61076: PUSH
61077: LD_INT 3
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 2
61086: NEG
61087: PUSH
61088: LD_INT 1
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 3
61097: NEG
61098: PUSH
61099: LD_INT 1
61101: NEG
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61132: LD_ADDR_VAR 0 31
61136: PUSH
61137: LD_INT 0
61139: PUSH
61140: LD_INT 0
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 0
61149: PUSH
61150: LD_INT 1
61152: NEG
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 1
61160: PUSH
61161: LD_INT 0
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 1
61170: PUSH
61171: LD_INT 1
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 0
61180: PUSH
61181: LD_INT 1
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 1
61190: NEG
61191: PUSH
61192: LD_INT 0
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 1
61201: NEG
61202: PUSH
61203: LD_INT 1
61205: NEG
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 1
61213: NEG
61214: PUSH
61215: LD_INT 2
61217: NEG
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 1
61225: PUSH
61226: LD_INT 1
61228: NEG
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: LD_INT 2
61236: PUSH
61237: LD_INT 0
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: LD_INT 2
61246: PUSH
61247: LD_INT 1
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 2
61256: PUSH
61257: LD_INT 2
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 1
61266: PUSH
61267: LD_INT 2
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 0
61276: PUSH
61277: LD_INT 2
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 1
61286: NEG
61287: PUSH
61288: LD_INT 1
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 2
61297: NEG
61298: PUSH
61299: LD_INT 1
61301: NEG
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 2
61309: NEG
61310: PUSH
61311: LD_INT 2
61313: NEG
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 2
61321: NEG
61322: PUSH
61323: LD_INT 3
61325: NEG
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 2
61333: PUSH
61334: LD_INT 1
61336: NEG
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 3
61344: PUSH
61345: LD_INT 1
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 1
61354: PUSH
61355: LD_INT 3
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 1
61364: NEG
61365: PUSH
61366: LD_INT 2
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 3
61375: NEG
61376: PUSH
61377: LD_INT 2
61379: NEG
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61410: LD_ADDR_VAR 0 32
61414: PUSH
61415: LD_INT 0
61417: PUSH
61418: LD_INT 0
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 0
61427: PUSH
61428: LD_INT 1
61430: NEG
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 1
61438: PUSH
61439: LD_INT 0
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 1
61448: PUSH
61449: LD_INT 1
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 0
61458: PUSH
61459: LD_INT 1
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 1
61468: NEG
61469: PUSH
61470: LD_INT 0
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: LD_INT 1
61479: NEG
61480: PUSH
61481: LD_INT 1
61483: NEG
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 1
61491: NEG
61492: PUSH
61493: LD_INT 2
61495: NEG
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 0
61503: PUSH
61504: LD_INT 2
61506: NEG
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 1
61514: PUSH
61515: LD_INT 1
61517: NEG
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 2
61525: PUSH
61526: LD_INT 1
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 2
61535: PUSH
61536: LD_INT 2
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 1
61545: PUSH
61546: LD_INT 2
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 0
61555: PUSH
61556: LD_INT 2
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 1
61565: NEG
61566: PUSH
61567: LD_INT 1
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 2
61576: NEG
61577: PUSH
61578: LD_INT 0
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: PUSH
61585: LD_INT 2
61587: NEG
61588: PUSH
61589: LD_INT 1
61591: NEG
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 1
61599: NEG
61600: PUSH
61601: LD_INT 3
61603: NEG
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 1
61611: PUSH
61612: LD_INT 2
61614: NEG
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: LD_INT 3
61622: PUSH
61623: LD_INT 2
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 2
61632: PUSH
61633: LD_INT 3
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 2
61642: NEG
61643: PUSH
61644: LD_INT 1
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 3
61653: NEG
61654: PUSH
61655: LD_INT 1
61657: NEG
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61688: LD_ADDR_VAR 0 33
61692: PUSH
61693: LD_INT 0
61695: PUSH
61696: LD_INT 0
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 0
61705: PUSH
61706: LD_INT 1
61708: NEG
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 1
61716: PUSH
61717: LD_INT 0
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 1
61726: PUSH
61727: LD_INT 1
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 0
61736: PUSH
61737: LD_INT 1
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 1
61746: NEG
61747: PUSH
61748: LD_INT 0
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 1
61757: NEG
61758: PUSH
61759: LD_INT 1
61761: NEG
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 1
61769: NEG
61770: PUSH
61771: LD_INT 2
61773: NEG
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: LD_INT 1
61781: PUSH
61782: LD_INT 1
61784: NEG
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 2
61792: PUSH
61793: LD_INT 0
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: LD_INT 2
61802: PUSH
61803: LD_INT 1
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 1
61812: PUSH
61813: LD_INT 2
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 0
61822: PUSH
61823: LD_INT 2
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 1
61832: NEG
61833: PUSH
61834: LD_INT 1
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 2
61843: NEG
61844: PUSH
61845: LD_INT 0
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 2
61854: NEG
61855: PUSH
61856: LD_INT 1
61858: NEG
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 2
61866: NEG
61867: PUSH
61868: LD_INT 2
61870: NEG
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 2
61878: NEG
61879: PUSH
61880: LD_INT 3
61882: NEG
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 2
61890: PUSH
61891: LD_INT 1
61893: NEG
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 3
61901: PUSH
61902: LD_INT 1
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 1
61911: PUSH
61912: LD_INT 3
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_INT 1
61921: NEG
61922: PUSH
61923: LD_INT 2
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 3
61932: NEG
61933: PUSH
61934: LD_INT 2
61936: NEG
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61967: LD_ADDR_VAR 0 34
61971: PUSH
61972: LD_INT 0
61974: PUSH
61975: LD_INT 0
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 0
61984: PUSH
61985: LD_INT 1
61987: NEG
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 1
61995: PUSH
61996: LD_INT 0
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 1
62005: PUSH
62006: LD_INT 1
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 0
62015: PUSH
62016: LD_INT 1
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 1
62025: NEG
62026: PUSH
62027: LD_INT 0
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 1
62036: NEG
62037: PUSH
62038: LD_INT 1
62040: NEG
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 1
62048: NEG
62049: PUSH
62050: LD_INT 2
62052: NEG
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: LD_INT 0
62060: PUSH
62061: LD_INT 2
62063: NEG
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 1
62071: PUSH
62072: LD_INT 1
62074: NEG
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 2
62082: PUSH
62083: LD_INT 1
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 2
62092: PUSH
62093: LD_INT 2
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 1
62102: PUSH
62103: LD_INT 2
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: LD_INT 1
62112: NEG
62113: PUSH
62114: LD_INT 1
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 2
62123: NEG
62124: PUSH
62125: LD_INT 0
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 2
62134: NEG
62135: PUSH
62136: LD_INT 1
62138: NEG
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 2
62146: NEG
62147: PUSH
62148: LD_INT 2
62150: NEG
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: PUSH
62156: LD_INT 1
62158: NEG
62159: PUSH
62160: LD_INT 3
62162: NEG
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 1
62170: PUSH
62171: LD_INT 2
62173: NEG
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 3
62181: PUSH
62182: LD_INT 2
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 2
62191: PUSH
62192: LD_INT 3
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 2
62201: NEG
62202: PUSH
62203: LD_INT 1
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 3
62212: NEG
62213: PUSH
62214: LD_INT 1
62216: NEG
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62247: LD_ADDR_VAR 0 35
62251: PUSH
62252: LD_INT 0
62254: PUSH
62255: LD_INT 0
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 0
62264: PUSH
62265: LD_INT 1
62267: NEG
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 1
62275: PUSH
62276: LD_INT 0
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 1
62285: PUSH
62286: LD_INT 1
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 0
62295: PUSH
62296: LD_INT 1
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 1
62305: NEG
62306: PUSH
62307: LD_INT 0
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 1
62316: NEG
62317: PUSH
62318: LD_INT 1
62320: NEG
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 2
62328: PUSH
62329: LD_INT 1
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 2
62338: NEG
62339: PUSH
62340: LD_INT 1
62342: NEG
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62359: LD_ADDR_VAR 0 36
62363: PUSH
62364: LD_INT 0
62366: PUSH
62367: LD_INT 0
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: LD_INT 0
62376: PUSH
62377: LD_INT 1
62379: NEG
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 1
62387: PUSH
62388: LD_INT 0
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: LD_INT 1
62397: PUSH
62398: LD_INT 1
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 0
62407: PUSH
62408: LD_INT 1
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 1
62417: NEG
62418: PUSH
62419: LD_INT 0
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_INT 1
62428: NEG
62429: PUSH
62430: LD_INT 1
62432: NEG
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 1
62440: NEG
62441: PUSH
62442: LD_INT 2
62444: NEG
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PUSH
62450: LD_INT 1
62452: PUSH
62453: LD_INT 2
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62471: LD_ADDR_VAR 0 37
62475: PUSH
62476: LD_INT 0
62478: PUSH
62479: LD_INT 0
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: LD_INT 0
62488: PUSH
62489: LD_INT 1
62491: NEG
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 1
62499: PUSH
62500: LD_INT 0
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 1
62509: PUSH
62510: LD_INT 1
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 0
62519: PUSH
62520: LD_INT 1
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: LD_INT 1
62529: NEG
62530: PUSH
62531: LD_INT 0
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 1
62540: NEG
62541: PUSH
62542: LD_INT 1
62544: NEG
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 1
62552: PUSH
62553: LD_INT 1
62555: NEG
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 1
62563: NEG
62564: PUSH
62565: LD_INT 1
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62583: LD_ADDR_VAR 0 38
62587: PUSH
62588: LD_INT 0
62590: PUSH
62591: LD_INT 0
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: LD_INT 0
62600: PUSH
62601: LD_INT 1
62603: NEG
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: PUSH
62609: LD_INT 1
62611: PUSH
62612: LD_INT 0
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 1
62621: PUSH
62622: LD_INT 1
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_INT 0
62631: PUSH
62632: LD_INT 1
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 1
62641: NEG
62642: PUSH
62643: LD_INT 0
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: LD_INT 1
62652: NEG
62653: PUSH
62654: LD_INT 1
62656: NEG
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 2
62664: PUSH
62665: LD_INT 1
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: LD_INT 2
62674: NEG
62675: PUSH
62676: LD_INT 1
62678: NEG
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62695: LD_ADDR_VAR 0 39
62699: PUSH
62700: LD_INT 0
62702: PUSH
62703: LD_INT 0
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 0
62712: PUSH
62713: LD_INT 1
62715: NEG
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 1
62723: PUSH
62724: LD_INT 0
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: PUSH
62731: LD_INT 1
62733: PUSH
62734: LD_INT 1
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PUSH
62741: LD_INT 0
62743: PUSH
62744: LD_INT 1
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 1
62753: NEG
62754: PUSH
62755: LD_INT 0
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 1
62764: NEG
62765: PUSH
62766: LD_INT 1
62768: NEG
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 1
62776: NEG
62777: PUSH
62778: LD_INT 2
62780: NEG
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 1
62788: PUSH
62789: LD_INT 2
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62807: LD_ADDR_VAR 0 40
62811: PUSH
62812: LD_INT 0
62814: PUSH
62815: LD_INT 0
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 0
62824: PUSH
62825: LD_INT 1
62827: NEG
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 1
62835: PUSH
62836: LD_INT 0
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 1
62845: PUSH
62846: LD_INT 1
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 0
62855: PUSH
62856: LD_INT 1
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 1
62865: NEG
62866: PUSH
62867: LD_INT 0
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 1
62876: NEG
62877: PUSH
62878: LD_INT 1
62880: NEG
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: LD_INT 1
62888: PUSH
62889: LD_INT 1
62891: NEG
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 1
62899: NEG
62900: PUSH
62901: LD_INT 1
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62919: LD_ADDR_VAR 0 41
62923: PUSH
62924: LD_INT 0
62926: PUSH
62927: LD_INT 0
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: LD_INT 0
62936: PUSH
62937: LD_INT 1
62939: NEG
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: LD_INT 1
62947: PUSH
62948: LD_INT 0
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PUSH
62955: LD_INT 1
62957: PUSH
62958: LD_INT 1
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 0
62967: PUSH
62968: LD_INT 1
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 1
62977: NEG
62978: PUSH
62979: LD_INT 0
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 1
62988: NEG
62989: PUSH
62990: LD_INT 1
62992: NEG
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 1
63000: NEG
63001: PUSH
63002: LD_INT 2
63004: NEG
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 1
63012: PUSH
63013: LD_INT 1
63015: NEG
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: LD_INT 2
63023: PUSH
63024: LD_INT 0
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: PUSH
63031: LD_INT 2
63033: PUSH
63034: LD_INT 1
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 2
63043: PUSH
63044: LD_INT 2
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 1
63053: PUSH
63054: LD_INT 2
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 1
63063: NEG
63064: PUSH
63065: LD_INT 1
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 2
63074: NEG
63075: PUSH
63076: LD_INT 0
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 2
63085: NEG
63086: PUSH
63087: LD_INT 1
63089: NEG
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 2
63097: NEG
63098: PUSH
63099: LD_INT 2
63101: NEG
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: PUSH
63107: LD_INT 2
63109: NEG
63110: PUSH
63111: LD_INT 3
63113: NEG
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 2
63121: PUSH
63122: LD_INT 1
63124: NEG
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 3
63132: PUSH
63133: LD_INT 0
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: LD_INT 3
63142: PUSH
63143: LD_INT 1
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: LD_INT 3
63152: PUSH
63153: LD_INT 2
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 3
63162: PUSH
63163: LD_INT 3
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: LD_INT 2
63172: PUSH
63173: LD_INT 3
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: LD_INT 2
63182: NEG
63183: PUSH
63184: LD_INT 1
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: LD_INT 3
63193: NEG
63194: PUSH
63195: LD_INT 0
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 3
63204: NEG
63205: PUSH
63206: LD_INT 1
63208: NEG
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 3
63216: NEG
63217: PUSH
63218: LD_INT 2
63220: NEG
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 3
63228: NEG
63229: PUSH
63230: LD_INT 3
63232: NEG
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: LIST
63242: LIST
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63269: LD_ADDR_VAR 0 42
63273: PUSH
63274: LD_INT 0
63276: PUSH
63277: LD_INT 0
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: LD_INT 0
63286: PUSH
63287: LD_INT 1
63289: NEG
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 1
63297: PUSH
63298: LD_INT 0
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 1
63307: PUSH
63308: LD_INT 1
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 0
63317: PUSH
63318: LD_INT 1
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: LD_INT 1
63327: NEG
63328: PUSH
63329: LD_INT 0
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 1
63338: NEG
63339: PUSH
63340: LD_INT 1
63342: NEG
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 1
63350: NEG
63351: PUSH
63352: LD_INT 2
63354: NEG
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: PUSH
63360: LD_INT 0
63362: PUSH
63363: LD_INT 2
63365: NEG
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: LD_INT 1
63373: PUSH
63374: LD_INT 1
63376: NEG
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: PUSH
63382: LD_INT 2
63384: PUSH
63385: LD_INT 1
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: PUSH
63392: LD_INT 2
63394: PUSH
63395: LD_INT 2
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: LD_INT 1
63404: PUSH
63405: LD_INT 2
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: LD_INT 0
63414: PUSH
63415: LD_INT 2
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: LD_INT 1
63424: NEG
63425: PUSH
63426: LD_INT 1
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: LD_INT 2
63435: NEG
63436: PUSH
63437: LD_INT 1
63439: NEG
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 2
63447: NEG
63448: PUSH
63449: LD_INT 2
63451: NEG
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 2
63459: NEG
63460: PUSH
63461: LD_INT 3
63463: NEG
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 1
63471: NEG
63472: PUSH
63473: LD_INT 3
63475: NEG
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: PUSH
63481: LD_INT 0
63483: PUSH
63484: LD_INT 3
63486: NEG
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 1
63494: PUSH
63495: LD_INT 2
63497: NEG
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: LD_INT 3
63505: PUSH
63506: LD_INT 2
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PUSH
63513: LD_INT 3
63515: PUSH
63516: LD_INT 3
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: PUSH
63523: LD_INT 2
63525: PUSH
63526: LD_INT 3
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: LD_INT 1
63535: PUSH
63536: LD_INT 3
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: LD_INT 0
63545: PUSH
63546: LD_INT 3
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 1
63555: NEG
63556: PUSH
63557: LD_INT 2
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 3
63566: NEG
63567: PUSH
63568: LD_INT 2
63570: NEG
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 3
63578: NEG
63579: PUSH
63580: LD_INT 3
63582: NEG
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63619: LD_ADDR_VAR 0 43
63623: PUSH
63624: LD_INT 0
63626: PUSH
63627: LD_INT 0
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: LD_INT 0
63636: PUSH
63637: LD_INT 1
63639: NEG
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: LD_INT 1
63647: PUSH
63648: LD_INT 0
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 1
63657: PUSH
63658: LD_INT 1
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 0
63667: PUSH
63668: LD_INT 1
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 1
63677: NEG
63678: PUSH
63679: LD_INT 0
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: LD_INT 1
63688: NEG
63689: PUSH
63690: LD_INT 1
63692: NEG
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 1
63700: NEG
63701: PUSH
63702: LD_INT 2
63704: NEG
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 0
63712: PUSH
63713: LD_INT 2
63715: NEG
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 1
63723: PUSH
63724: LD_INT 1
63726: NEG
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: LD_INT 2
63734: PUSH
63735: LD_INT 0
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: LD_INT 2
63744: PUSH
63745: LD_INT 1
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: LD_INT 1
63754: PUSH
63755: LD_INT 2
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 0
63764: PUSH
63765: LD_INT 2
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: LD_INT 1
63774: NEG
63775: PUSH
63776: LD_INT 1
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: LD_INT 2
63785: NEG
63786: PUSH
63787: LD_INT 0
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: PUSH
63794: LD_INT 2
63796: NEG
63797: PUSH
63798: LD_INT 1
63800: NEG
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 1
63808: NEG
63809: PUSH
63810: LD_INT 3
63812: NEG
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 0
63820: PUSH
63821: LD_INT 3
63823: NEG
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: LD_INT 1
63831: PUSH
63832: LD_INT 2
63834: NEG
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: LD_INT 2
63842: PUSH
63843: LD_INT 1
63845: NEG
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: LD_INT 3
63853: PUSH
63854: LD_INT 0
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 3
63863: PUSH
63864: LD_INT 1
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: PUSH
63871: LD_INT 1
63873: PUSH
63874: LD_INT 3
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 0
63883: PUSH
63884: LD_INT 3
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: LD_INT 1
63893: NEG
63894: PUSH
63895: LD_INT 2
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: PUSH
63902: LD_INT 2
63904: NEG
63905: PUSH
63906: LD_INT 1
63908: PUSH
63909: EMPTY
63910: LIST
63911: LIST
63912: PUSH
63913: LD_INT 3
63915: NEG
63916: PUSH
63917: LD_INT 0
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_INT 3
63926: NEG
63927: PUSH
63928: LD_INT 1
63930: NEG
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63967: LD_ADDR_VAR 0 44
63971: PUSH
63972: LD_INT 0
63974: PUSH
63975: LD_INT 0
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: LD_INT 0
63984: PUSH
63985: LD_INT 1
63987: NEG
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: PUSH
63993: LD_INT 1
63995: PUSH
63996: LD_INT 0
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: PUSH
64003: LD_INT 1
64005: PUSH
64006: LD_INT 1
64008: PUSH
64009: EMPTY
64010: LIST
64011: LIST
64012: PUSH
64013: LD_INT 0
64015: PUSH
64016: LD_INT 1
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: PUSH
64023: LD_INT 1
64025: NEG
64026: PUSH
64027: LD_INT 0
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: LD_INT 1
64036: NEG
64037: PUSH
64038: LD_INT 1
64040: NEG
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_INT 1
64048: NEG
64049: PUSH
64050: LD_INT 2
64052: NEG
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 1
64060: PUSH
64061: LD_INT 1
64063: NEG
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: LD_INT 2
64071: PUSH
64072: LD_INT 0
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: LD_INT 2
64081: PUSH
64082: LD_INT 1
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: PUSH
64089: LD_INT 2
64091: PUSH
64092: LD_INT 2
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: PUSH
64099: LD_INT 1
64101: PUSH
64102: LD_INT 2
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: PUSH
64109: LD_INT 1
64111: NEG
64112: PUSH
64113: LD_INT 1
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 2
64122: NEG
64123: PUSH
64124: LD_INT 0
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: LD_INT 2
64133: NEG
64134: PUSH
64135: LD_INT 1
64137: NEG
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 2
64145: NEG
64146: PUSH
64147: LD_INT 2
64149: NEG
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: PUSH
64155: LD_INT 2
64157: NEG
64158: PUSH
64159: LD_INT 3
64161: NEG
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: PUSH
64167: LD_INT 2
64169: PUSH
64170: LD_INT 1
64172: NEG
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: LD_INT 3
64180: PUSH
64181: LD_INT 0
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: PUSH
64188: LD_INT 3
64190: PUSH
64191: LD_INT 1
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PUSH
64198: LD_INT 3
64200: PUSH
64201: LD_INT 2
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: LD_INT 3
64210: PUSH
64211: LD_INT 3
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: LD_INT 2
64220: PUSH
64221: LD_INT 3
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: LD_INT 2
64230: NEG
64231: PUSH
64232: LD_INT 1
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: PUSH
64239: LD_INT 3
64241: NEG
64242: PUSH
64243: LD_INT 0
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PUSH
64250: LD_INT 3
64252: NEG
64253: PUSH
64254: LD_INT 1
64256: NEG
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: LD_INT 3
64264: NEG
64265: PUSH
64266: LD_INT 2
64268: NEG
64269: PUSH
64270: EMPTY
64271: LIST
64272: LIST
64273: PUSH
64274: LD_INT 3
64276: NEG
64277: PUSH
64278: LD_INT 3
64280: NEG
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: LIST
64290: LIST
64291: LIST
64292: LIST
64293: LIST
64294: LIST
64295: LIST
64296: LIST
64297: LIST
64298: LIST
64299: LIST
64300: LIST
64301: LIST
64302: LIST
64303: LIST
64304: LIST
64305: LIST
64306: LIST
64307: LIST
64308: LIST
64309: LIST
64310: LIST
64311: LIST
64312: LIST
64313: LIST
64314: LIST
64315: LIST
64316: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64317: LD_ADDR_VAR 0 45
64321: PUSH
64322: LD_INT 0
64324: PUSH
64325: LD_INT 0
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 0
64334: PUSH
64335: LD_INT 1
64337: NEG
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 1
64345: PUSH
64346: LD_INT 0
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 1
64355: PUSH
64356: LD_INT 1
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PUSH
64363: LD_INT 0
64365: PUSH
64366: LD_INT 1
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: LD_INT 1
64375: NEG
64376: PUSH
64377: LD_INT 0
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 1
64386: NEG
64387: PUSH
64388: LD_INT 1
64390: NEG
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 1
64398: NEG
64399: PUSH
64400: LD_INT 2
64402: NEG
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: PUSH
64408: LD_INT 0
64410: PUSH
64411: LD_INT 2
64413: NEG
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: LD_INT 1
64421: PUSH
64422: LD_INT 1
64424: NEG
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 2
64432: PUSH
64433: LD_INT 1
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: PUSH
64440: LD_INT 2
64442: PUSH
64443: LD_INT 2
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: PUSH
64450: LD_INT 1
64452: PUSH
64453: LD_INT 2
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: PUSH
64460: LD_INT 0
64462: PUSH
64463: LD_INT 2
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: LD_INT 1
64472: NEG
64473: PUSH
64474: LD_INT 1
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: PUSH
64481: LD_INT 2
64483: NEG
64484: PUSH
64485: LD_INT 1
64487: NEG
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PUSH
64493: LD_INT 2
64495: NEG
64496: PUSH
64497: LD_INT 2
64499: NEG
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: LD_INT 2
64507: NEG
64508: PUSH
64509: LD_INT 3
64511: NEG
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PUSH
64517: LD_INT 1
64519: NEG
64520: PUSH
64521: LD_INT 3
64523: NEG
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: PUSH
64529: LD_INT 0
64531: PUSH
64532: LD_INT 3
64534: NEG
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: PUSH
64540: LD_INT 1
64542: PUSH
64543: LD_INT 2
64545: NEG
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 3
64553: PUSH
64554: LD_INT 2
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: PUSH
64561: LD_INT 3
64563: PUSH
64564: LD_INT 3
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: PUSH
64571: LD_INT 2
64573: PUSH
64574: LD_INT 3
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: LD_INT 1
64583: PUSH
64584: LD_INT 3
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: PUSH
64591: LD_INT 0
64593: PUSH
64594: LD_INT 3
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: PUSH
64601: LD_INT 1
64603: NEG
64604: PUSH
64605: LD_INT 2
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 3
64614: NEG
64615: PUSH
64616: LD_INT 2
64618: NEG
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: LD_INT 3
64626: NEG
64627: PUSH
64628: LD_INT 3
64630: NEG
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: LIST
64640: LIST
64641: LIST
64642: LIST
64643: LIST
64644: LIST
64645: LIST
64646: LIST
64647: LIST
64648: LIST
64649: LIST
64650: LIST
64651: LIST
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64667: LD_ADDR_VAR 0 46
64671: PUSH
64672: LD_INT 0
64674: PUSH
64675: LD_INT 0
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: LD_INT 0
64684: PUSH
64685: LD_INT 1
64687: NEG
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 1
64695: PUSH
64696: LD_INT 0
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: PUSH
64703: LD_INT 1
64705: PUSH
64706: LD_INT 1
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: PUSH
64713: LD_INT 0
64715: PUSH
64716: LD_INT 1
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: PUSH
64723: LD_INT 1
64725: NEG
64726: PUSH
64727: LD_INT 0
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: PUSH
64734: LD_INT 1
64736: NEG
64737: PUSH
64738: LD_INT 1
64740: NEG
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: LD_INT 1
64748: NEG
64749: PUSH
64750: LD_INT 2
64752: NEG
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: PUSH
64758: LD_INT 0
64760: PUSH
64761: LD_INT 2
64763: NEG
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: PUSH
64769: LD_INT 1
64771: PUSH
64772: LD_INT 1
64774: NEG
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: PUSH
64780: LD_INT 2
64782: PUSH
64783: LD_INT 0
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: LD_INT 2
64792: PUSH
64793: LD_INT 1
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: LD_INT 1
64802: PUSH
64803: LD_INT 2
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: LD_INT 0
64812: PUSH
64813: LD_INT 2
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 1
64822: NEG
64823: PUSH
64824: LD_INT 1
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: PUSH
64831: LD_INT 2
64833: NEG
64834: PUSH
64835: LD_INT 0
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: LD_INT 2
64844: NEG
64845: PUSH
64846: LD_INT 1
64848: NEG
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PUSH
64854: LD_INT 1
64856: NEG
64857: PUSH
64858: LD_INT 3
64860: NEG
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: LD_INT 0
64868: PUSH
64869: LD_INT 3
64871: NEG
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: LD_INT 1
64879: PUSH
64880: LD_INT 2
64882: NEG
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: PUSH
64888: LD_INT 2
64890: PUSH
64891: LD_INT 1
64893: NEG
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: LD_INT 3
64901: PUSH
64902: LD_INT 0
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: PUSH
64909: LD_INT 3
64911: PUSH
64912: LD_INT 1
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: PUSH
64919: LD_INT 1
64921: PUSH
64922: LD_INT 3
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 0
64931: PUSH
64932: LD_INT 3
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 1
64941: NEG
64942: PUSH
64943: LD_INT 2
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: PUSH
64950: LD_INT 2
64952: NEG
64953: PUSH
64954: LD_INT 1
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 3
64963: NEG
64964: PUSH
64965: LD_INT 0
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PUSH
64972: LD_INT 3
64974: NEG
64975: PUSH
64976: LD_INT 1
64978: NEG
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65015: LD_ADDR_VAR 0 47
65019: PUSH
65020: LD_INT 0
65022: PUSH
65023: LD_INT 0
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: PUSH
65030: LD_INT 0
65032: PUSH
65033: LD_INT 1
65035: NEG
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: LD_INT 1
65043: PUSH
65044: LD_INT 0
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PUSH
65051: LD_INT 1
65053: PUSH
65054: LD_INT 1
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PUSH
65061: LD_INT 0
65063: PUSH
65064: LD_INT 1
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: LD_INT 1
65073: NEG
65074: PUSH
65075: LD_INT 0
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: LD_INT 1
65084: NEG
65085: PUSH
65086: LD_INT 1
65088: NEG
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: PUSH
65094: LD_INT 1
65096: NEG
65097: PUSH
65098: LD_INT 2
65100: NEG
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PUSH
65106: LD_INT 0
65108: PUSH
65109: LD_INT 2
65111: NEG
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: PUSH
65117: LD_INT 1
65119: PUSH
65120: LD_INT 1
65122: NEG
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: LD_INT 2
65130: NEG
65131: PUSH
65132: LD_INT 1
65134: NEG
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: PUSH
65140: LD_INT 2
65142: NEG
65143: PUSH
65144: LD_INT 2
65146: NEG
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: LIST
65163: LIST
65164: LIST
65165: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65166: LD_ADDR_VAR 0 48
65170: PUSH
65171: LD_INT 0
65173: PUSH
65174: LD_INT 0
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: LD_INT 0
65183: PUSH
65184: LD_INT 1
65186: NEG
65187: PUSH
65188: EMPTY
65189: LIST
65190: LIST
65191: PUSH
65192: LD_INT 1
65194: PUSH
65195: LD_INT 0
65197: PUSH
65198: EMPTY
65199: LIST
65200: LIST
65201: PUSH
65202: LD_INT 1
65204: PUSH
65205: LD_INT 1
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PUSH
65212: LD_INT 0
65214: PUSH
65215: LD_INT 1
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: PUSH
65222: LD_INT 1
65224: NEG
65225: PUSH
65226: LD_INT 0
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: LD_INT 1
65235: NEG
65236: PUSH
65237: LD_INT 1
65239: NEG
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 1
65247: NEG
65248: PUSH
65249: LD_INT 2
65251: NEG
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: PUSH
65257: LD_INT 0
65259: PUSH
65260: LD_INT 2
65262: NEG
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: PUSH
65268: LD_INT 1
65270: PUSH
65271: LD_INT 1
65273: NEG
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PUSH
65279: LD_INT 2
65281: PUSH
65282: LD_INT 0
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: PUSH
65289: LD_INT 2
65291: PUSH
65292: LD_INT 1
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: LIST
65303: LIST
65304: LIST
65305: LIST
65306: LIST
65307: LIST
65308: LIST
65309: LIST
65310: LIST
65311: LIST
65312: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65313: LD_ADDR_VAR 0 49
65317: PUSH
65318: LD_INT 0
65320: PUSH
65321: LD_INT 0
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_INT 0
65330: PUSH
65331: LD_INT 1
65333: NEG
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: LD_INT 1
65341: PUSH
65342: LD_INT 0
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: PUSH
65349: LD_INT 1
65351: PUSH
65352: LD_INT 1
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: PUSH
65359: LD_INT 0
65361: PUSH
65362: LD_INT 1
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: LD_INT 1
65371: NEG
65372: PUSH
65373: LD_INT 0
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 1
65382: NEG
65383: PUSH
65384: LD_INT 1
65386: NEG
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 1
65394: PUSH
65395: LD_INT 1
65397: NEG
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: LD_INT 2
65405: PUSH
65406: LD_INT 0
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: LD_INT 2
65415: PUSH
65416: LD_INT 1
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 2
65425: PUSH
65426: LD_INT 2
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: LD_INT 1
65435: PUSH
65436: LD_INT 2
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: LIST
65447: LIST
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: LIST
65454: LIST
65455: LIST
65456: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65457: LD_ADDR_VAR 0 50
65461: PUSH
65462: LD_INT 0
65464: PUSH
65465: LD_INT 0
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: PUSH
65472: LD_INT 0
65474: PUSH
65475: LD_INT 1
65477: NEG
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: PUSH
65483: LD_INT 1
65485: PUSH
65486: LD_INT 0
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: LD_INT 1
65495: PUSH
65496: LD_INT 1
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: LD_INT 0
65505: PUSH
65506: LD_INT 1
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: PUSH
65513: LD_INT 1
65515: NEG
65516: PUSH
65517: LD_INT 0
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 1
65526: NEG
65527: PUSH
65528: LD_INT 1
65530: NEG
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PUSH
65536: LD_INT 2
65538: PUSH
65539: LD_INT 1
65541: PUSH
65542: EMPTY
65543: LIST
65544: LIST
65545: PUSH
65546: LD_INT 2
65548: PUSH
65549: LD_INT 2
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: PUSH
65556: LD_INT 1
65558: PUSH
65559: LD_INT 2
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: PUSH
65566: LD_INT 0
65568: PUSH
65569: LD_INT 2
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: PUSH
65576: LD_INT 1
65578: NEG
65579: PUSH
65580: LD_INT 1
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65601: LD_ADDR_VAR 0 51
65605: PUSH
65606: LD_INT 0
65608: PUSH
65609: LD_INT 0
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: LD_INT 0
65618: PUSH
65619: LD_INT 1
65621: NEG
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PUSH
65627: LD_INT 1
65629: PUSH
65630: LD_INT 0
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: PUSH
65637: LD_INT 1
65639: PUSH
65640: LD_INT 1
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: PUSH
65647: LD_INT 0
65649: PUSH
65650: LD_INT 1
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: PUSH
65657: LD_INT 1
65659: NEG
65660: PUSH
65661: LD_INT 0
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: LD_INT 1
65670: NEG
65671: PUSH
65672: LD_INT 1
65674: NEG
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: LD_INT 1
65682: PUSH
65683: LD_INT 2
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: PUSH
65690: LD_INT 0
65692: PUSH
65693: LD_INT 2
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: PUSH
65700: LD_INT 1
65702: NEG
65703: PUSH
65704: LD_INT 1
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: PUSH
65711: LD_INT 2
65713: NEG
65714: PUSH
65715: LD_INT 0
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: PUSH
65722: LD_INT 2
65724: NEG
65725: PUSH
65726: LD_INT 1
65728: NEG
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: LIST
65738: LIST
65739: LIST
65740: LIST
65741: LIST
65742: LIST
65743: LIST
65744: LIST
65745: LIST
65746: LIST
65747: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65748: LD_ADDR_VAR 0 52
65752: PUSH
65753: LD_INT 0
65755: PUSH
65756: LD_INT 0
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: PUSH
65763: LD_INT 0
65765: PUSH
65766: LD_INT 1
65768: NEG
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: PUSH
65774: LD_INT 1
65776: PUSH
65777: LD_INT 0
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: PUSH
65784: LD_INT 1
65786: PUSH
65787: LD_INT 1
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: PUSH
65794: LD_INT 0
65796: PUSH
65797: LD_INT 1
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: PUSH
65804: LD_INT 1
65806: NEG
65807: PUSH
65808: LD_INT 0
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: PUSH
65815: LD_INT 1
65817: NEG
65818: PUSH
65819: LD_INT 1
65821: NEG
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: PUSH
65827: LD_INT 1
65829: NEG
65830: PUSH
65831: LD_INT 2
65833: NEG
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: PUSH
65839: LD_INT 1
65841: NEG
65842: PUSH
65843: LD_INT 1
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: LD_INT 2
65852: NEG
65853: PUSH
65854: LD_INT 0
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: LD_INT 2
65863: NEG
65864: PUSH
65865: LD_INT 1
65867: NEG
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: LD_INT 2
65875: NEG
65876: PUSH
65877: LD_INT 2
65879: NEG
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65899: LD_ADDR_VAR 0 53
65903: PUSH
65904: LD_INT 0
65906: PUSH
65907: LD_INT 0
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 0
65916: PUSH
65917: LD_INT 1
65919: NEG
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: LD_INT 1
65927: PUSH
65928: LD_INT 0
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: PUSH
65935: LD_INT 1
65937: PUSH
65938: LD_INT 1
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: PUSH
65945: LD_INT 0
65947: PUSH
65948: LD_INT 1
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: PUSH
65955: LD_INT 1
65957: NEG
65958: PUSH
65959: LD_INT 0
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: PUSH
65966: LD_INT 1
65968: NEG
65969: PUSH
65970: LD_INT 1
65972: NEG
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: PUSH
65978: LD_INT 1
65980: NEG
65981: PUSH
65982: LD_INT 2
65984: NEG
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 0
65992: PUSH
65993: LD_INT 2
65995: NEG
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: PUSH
66001: LD_INT 1
66003: PUSH
66004: LD_INT 1
66006: NEG
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: PUSH
66012: LD_INT 2
66014: PUSH
66015: LD_INT 0
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: LD_INT 2
66024: PUSH
66025: LD_INT 1
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: LD_INT 2
66034: PUSH
66035: LD_INT 2
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: PUSH
66042: LD_INT 1
66044: PUSH
66045: LD_INT 2
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PUSH
66052: LD_INT 0
66054: PUSH
66055: LD_INT 2
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: PUSH
66062: LD_INT 1
66064: NEG
66065: PUSH
66066: LD_INT 1
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: PUSH
66073: LD_INT 2
66075: NEG
66076: PUSH
66077: LD_INT 0
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: PUSH
66084: LD_INT 2
66086: NEG
66087: PUSH
66088: LD_INT 1
66090: NEG
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: PUSH
66096: LD_INT 2
66098: NEG
66099: PUSH
66100: LD_INT 2
66102: NEG
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66129: LD_ADDR_VAR 0 54
66133: PUSH
66134: LD_INT 0
66136: PUSH
66137: LD_INT 0
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: PUSH
66144: LD_INT 0
66146: PUSH
66147: LD_INT 1
66149: NEG
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: PUSH
66155: LD_INT 1
66157: PUSH
66158: LD_INT 0
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: PUSH
66165: LD_INT 1
66167: PUSH
66168: LD_INT 1
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: PUSH
66175: LD_INT 0
66177: PUSH
66178: LD_INT 1
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: LD_INT 1
66187: NEG
66188: PUSH
66189: LD_INT 0
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PUSH
66196: LD_INT 1
66198: NEG
66199: PUSH
66200: LD_INT 1
66202: NEG
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: PUSH
66208: LD_INT 1
66210: NEG
66211: PUSH
66212: LD_INT 2
66214: NEG
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: PUSH
66220: LD_INT 0
66222: PUSH
66223: LD_INT 2
66225: NEG
66226: PUSH
66227: EMPTY
66228: LIST
66229: LIST
66230: PUSH
66231: LD_INT 1
66233: PUSH
66234: LD_INT 1
66236: NEG
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: PUSH
66242: LD_INT 2
66244: PUSH
66245: LD_INT 0
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PUSH
66252: LD_INT 2
66254: PUSH
66255: LD_INT 1
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: PUSH
66262: LD_INT 2
66264: PUSH
66265: LD_INT 2
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: PUSH
66272: LD_INT 1
66274: PUSH
66275: LD_INT 2
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: PUSH
66282: LD_INT 0
66284: PUSH
66285: LD_INT 2
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: PUSH
66292: LD_INT 1
66294: NEG
66295: PUSH
66296: LD_INT 1
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: PUSH
66303: LD_INT 2
66305: NEG
66306: PUSH
66307: LD_INT 0
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: PUSH
66314: LD_INT 2
66316: NEG
66317: PUSH
66318: LD_INT 1
66320: NEG
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: LD_INT 2
66328: NEG
66329: PUSH
66330: LD_INT 2
66332: NEG
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: LIST
66342: LIST
66343: LIST
66344: LIST
66345: LIST
66346: LIST
66347: LIST
66348: LIST
66349: LIST
66350: LIST
66351: LIST
66352: LIST
66353: LIST
66354: LIST
66355: LIST
66356: LIST
66357: LIST
66358: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66359: LD_ADDR_VAR 0 55
66363: PUSH
66364: LD_INT 0
66366: PUSH
66367: LD_INT 0
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 0
66376: PUSH
66377: LD_INT 1
66379: NEG
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: PUSH
66385: LD_INT 1
66387: PUSH
66388: LD_INT 0
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: PUSH
66395: LD_INT 1
66397: PUSH
66398: LD_INT 1
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: LD_INT 0
66407: PUSH
66408: LD_INT 1
66410: PUSH
66411: EMPTY
66412: LIST
66413: LIST
66414: PUSH
66415: LD_INT 1
66417: NEG
66418: PUSH
66419: LD_INT 0
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: PUSH
66426: LD_INT 1
66428: NEG
66429: PUSH
66430: LD_INT 1
66432: NEG
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: PUSH
66438: LD_INT 1
66440: NEG
66441: PUSH
66442: LD_INT 2
66444: NEG
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: PUSH
66450: LD_INT 0
66452: PUSH
66453: LD_INT 2
66455: NEG
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: PUSH
66461: LD_INT 1
66463: PUSH
66464: LD_INT 1
66466: NEG
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: PUSH
66472: LD_INT 2
66474: PUSH
66475: LD_INT 0
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: LD_INT 2
66484: PUSH
66485: LD_INT 1
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: PUSH
66492: LD_INT 2
66494: PUSH
66495: LD_INT 2
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: PUSH
66502: LD_INT 1
66504: PUSH
66505: LD_INT 2
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: LD_INT 0
66514: PUSH
66515: LD_INT 2
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: PUSH
66522: LD_INT 1
66524: NEG
66525: PUSH
66526: LD_INT 1
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: PUSH
66533: LD_INT 2
66535: NEG
66536: PUSH
66537: LD_INT 0
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PUSH
66544: LD_INT 2
66546: NEG
66547: PUSH
66548: LD_INT 1
66550: NEG
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: PUSH
66556: LD_INT 2
66558: NEG
66559: PUSH
66560: LD_INT 2
66562: NEG
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: EMPTY
66569: LIST
66570: LIST
66571: LIST
66572: LIST
66573: LIST
66574: LIST
66575: LIST
66576: LIST
66577: LIST
66578: LIST
66579: LIST
66580: LIST
66581: LIST
66582: LIST
66583: LIST
66584: LIST
66585: LIST
66586: LIST
66587: LIST
66588: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66589: LD_ADDR_VAR 0 56
66593: PUSH
66594: LD_INT 0
66596: PUSH
66597: LD_INT 0
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: PUSH
66604: LD_INT 0
66606: PUSH
66607: LD_INT 1
66609: NEG
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: PUSH
66615: LD_INT 1
66617: PUSH
66618: LD_INT 0
66620: PUSH
66621: EMPTY
66622: LIST
66623: LIST
66624: PUSH
66625: LD_INT 1
66627: PUSH
66628: LD_INT 1
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: PUSH
66635: LD_INT 0
66637: PUSH
66638: LD_INT 1
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: PUSH
66645: LD_INT 1
66647: NEG
66648: PUSH
66649: LD_INT 0
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PUSH
66656: LD_INT 1
66658: NEG
66659: PUSH
66660: LD_INT 1
66662: NEG
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: PUSH
66668: LD_INT 1
66670: NEG
66671: PUSH
66672: LD_INT 2
66674: NEG
66675: PUSH
66676: EMPTY
66677: LIST
66678: LIST
66679: PUSH
66680: LD_INT 0
66682: PUSH
66683: LD_INT 2
66685: NEG
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: PUSH
66691: LD_INT 1
66693: PUSH
66694: LD_INT 1
66696: NEG
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: PUSH
66702: LD_INT 2
66704: PUSH
66705: LD_INT 0
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: PUSH
66712: LD_INT 2
66714: PUSH
66715: LD_INT 1
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PUSH
66722: LD_INT 2
66724: PUSH
66725: LD_INT 2
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: PUSH
66732: LD_INT 1
66734: PUSH
66735: LD_INT 2
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: PUSH
66742: LD_INT 0
66744: PUSH
66745: LD_INT 2
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: PUSH
66752: LD_INT 1
66754: NEG
66755: PUSH
66756: LD_INT 1
66758: PUSH
66759: EMPTY
66760: LIST
66761: LIST
66762: PUSH
66763: LD_INT 2
66765: NEG
66766: PUSH
66767: LD_INT 0
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: PUSH
66774: LD_INT 2
66776: NEG
66777: PUSH
66778: LD_INT 1
66780: NEG
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: PUSH
66786: LD_INT 2
66788: NEG
66789: PUSH
66790: LD_INT 2
66792: NEG
66793: PUSH
66794: EMPTY
66795: LIST
66796: LIST
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: LIST
66802: LIST
66803: LIST
66804: LIST
66805: LIST
66806: LIST
66807: LIST
66808: LIST
66809: LIST
66810: LIST
66811: LIST
66812: LIST
66813: LIST
66814: LIST
66815: LIST
66816: LIST
66817: LIST
66818: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66819: LD_ADDR_VAR 0 57
66823: PUSH
66824: LD_INT 0
66826: PUSH
66827: LD_INT 0
66829: PUSH
66830: EMPTY
66831: LIST
66832: LIST
66833: PUSH
66834: LD_INT 0
66836: PUSH
66837: LD_INT 1
66839: NEG
66840: PUSH
66841: EMPTY
66842: LIST
66843: LIST
66844: PUSH
66845: LD_INT 1
66847: PUSH
66848: LD_INT 0
66850: PUSH
66851: EMPTY
66852: LIST
66853: LIST
66854: PUSH
66855: LD_INT 1
66857: PUSH
66858: LD_INT 1
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: PUSH
66865: LD_INT 0
66867: PUSH
66868: LD_INT 1
66870: PUSH
66871: EMPTY
66872: LIST
66873: LIST
66874: PUSH
66875: LD_INT 1
66877: NEG
66878: PUSH
66879: LD_INT 0
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PUSH
66886: LD_INT 1
66888: NEG
66889: PUSH
66890: LD_INT 1
66892: NEG
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: PUSH
66898: LD_INT 1
66900: NEG
66901: PUSH
66902: LD_INT 2
66904: NEG
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: LD_INT 0
66912: PUSH
66913: LD_INT 2
66915: NEG
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: LD_INT 1
66923: PUSH
66924: LD_INT 1
66926: NEG
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: PUSH
66932: LD_INT 2
66934: PUSH
66935: LD_INT 0
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: PUSH
66942: LD_INT 2
66944: PUSH
66945: LD_INT 1
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: LD_INT 2
66954: PUSH
66955: LD_INT 2
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 1
66964: PUSH
66965: LD_INT 2
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 0
66974: PUSH
66975: LD_INT 2
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 1
66984: NEG
66985: PUSH
66986: LD_INT 1
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: PUSH
66993: LD_INT 2
66995: NEG
66996: PUSH
66997: LD_INT 0
66999: PUSH
67000: EMPTY
67001: LIST
67002: LIST
67003: PUSH
67004: LD_INT 2
67006: NEG
67007: PUSH
67008: LD_INT 1
67010: NEG
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: PUSH
67016: LD_INT 2
67018: NEG
67019: PUSH
67020: LD_INT 2
67022: NEG
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: LIST
67032: LIST
67033: LIST
67034: LIST
67035: LIST
67036: LIST
67037: LIST
67038: LIST
67039: LIST
67040: LIST
67041: LIST
67042: LIST
67043: LIST
67044: LIST
67045: LIST
67046: LIST
67047: LIST
67048: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67049: LD_ADDR_VAR 0 58
67053: PUSH
67054: LD_INT 0
67056: PUSH
67057: LD_INT 0
67059: PUSH
67060: EMPTY
67061: LIST
67062: LIST
67063: PUSH
67064: LD_INT 0
67066: PUSH
67067: LD_INT 1
67069: NEG
67070: PUSH
67071: EMPTY
67072: LIST
67073: LIST
67074: PUSH
67075: LD_INT 1
67077: PUSH
67078: LD_INT 0
67080: PUSH
67081: EMPTY
67082: LIST
67083: LIST
67084: PUSH
67085: LD_INT 1
67087: PUSH
67088: LD_INT 1
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: LD_INT 0
67097: PUSH
67098: LD_INT 1
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: PUSH
67105: LD_INT 1
67107: NEG
67108: PUSH
67109: LD_INT 0
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: PUSH
67116: LD_INT 1
67118: NEG
67119: PUSH
67120: LD_INT 1
67122: NEG
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: PUSH
67128: LD_INT 1
67130: NEG
67131: PUSH
67132: LD_INT 2
67134: NEG
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: LD_INT 0
67142: PUSH
67143: LD_INT 2
67145: NEG
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: PUSH
67151: LD_INT 1
67153: PUSH
67154: LD_INT 1
67156: NEG
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: PUSH
67162: LD_INT 2
67164: PUSH
67165: LD_INT 0
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: PUSH
67172: LD_INT 2
67174: PUSH
67175: LD_INT 1
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: PUSH
67182: LD_INT 2
67184: PUSH
67185: LD_INT 2
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: PUSH
67192: LD_INT 1
67194: PUSH
67195: LD_INT 2
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: PUSH
67202: LD_INT 0
67204: PUSH
67205: LD_INT 2
67207: PUSH
67208: EMPTY
67209: LIST
67210: LIST
67211: PUSH
67212: LD_INT 1
67214: NEG
67215: PUSH
67216: LD_INT 1
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: PUSH
67223: LD_INT 2
67225: NEG
67226: PUSH
67227: LD_INT 0
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PUSH
67234: LD_INT 2
67236: NEG
67237: PUSH
67238: LD_INT 1
67240: NEG
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PUSH
67246: LD_INT 2
67248: NEG
67249: PUSH
67250: LD_INT 2
67252: NEG
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: LIST
67262: LIST
67263: LIST
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: LIST
67271: LIST
67272: LIST
67273: LIST
67274: LIST
67275: LIST
67276: LIST
67277: LIST
67278: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67279: LD_ADDR_VAR 0 59
67283: PUSH
67284: LD_INT 0
67286: PUSH
67287: LD_INT 0
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: PUSH
67294: LD_INT 0
67296: PUSH
67297: LD_INT 1
67299: NEG
67300: PUSH
67301: EMPTY
67302: LIST
67303: LIST
67304: PUSH
67305: LD_INT 1
67307: PUSH
67308: LD_INT 0
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: PUSH
67315: LD_INT 1
67317: PUSH
67318: LD_INT 1
67320: PUSH
67321: EMPTY
67322: LIST
67323: LIST
67324: PUSH
67325: LD_INT 0
67327: PUSH
67328: LD_INT 1
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: PUSH
67335: LD_INT 1
67337: NEG
67338: PUSH
67339: LD_INT 0
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: PUSH
67346: LD_INT 1
67348: NEG
67349: PUSH
67350: LD_INT 1
67352: NEG
67353: PUSH
67354: EMPTY
67355: LIST
67356: LIST
67357: PUSH
67358: EMPTY
67359: LIST
67360: LIST
67361: LIST
67362: LIST
67363: LIST
67364: LIST
67365: LIST
67366: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67367: LD_ADDR_VAR 0 60
67371: PUSH
67372: LD_INT 0
67374: PUSH
67375: LD_INT 0
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: PUSH
67382: LD_INT 0
67384: PUSH
67385: LD_INT 1
67387: NEG
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: PUSH
67393: LD_INT 1
67395: PUSH
67396: LD_INT 0
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: PUSH
67403: LD_INT 1
67405: PUSH
67406: LD_INT 1
67408: PUSH
67409: EMPTY
67410: LIST
67411: LIST
67412: PUSH
67413: LD_INT 0
67415: PUSH
67416: LD_INT 1
67418: PUSH
67419: EMPTY
67420: LIST
67421: LIST
67422: PUSH
67423: LD_INT 1
67425: NEG
67426: PUSH
67427: LD_INT 0
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: PUSH
67434: LD_INT 1
67436: NEG
67437: PUSH
67438: LD_INT 1
67440: NEG
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: LIST
67450: LIST
67451: LIST
67452: LIST
67453: LIST
67454: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67455: LD_ADDR_VAR 0 61
67459: PUSH
67460: LD_INT 0
67462: PUSH
67463: LD_INT 0
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: PUSH
67470: LD_INT 0
67472: PUSH
67473: LD_INT 1
67475: NEG
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: PUSH
67481: LD_INT 1
67483: PUSH
67484: LD_INT 0
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: PUSH
67491: LD_INT 1
67493: PUSH
67494: LD_INT 1
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PUSH
67501: LD_INT 0
67503: PUSH
67504: LD_INT 1
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: PUSH
67511: LD_INT 1
67513: NEG
67514: PUSH
67515: LD_INT 0
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: PUSH
67522: LD_INT 1
67524: NEG
67525: PUSH
67526: LD_INT 1
67528: NEG
67529: PUSH
67530: EMPTY
67531: LIST
67532: LIST
67533: PUSH
67534: EMPTY
67535: LIST
67536: LIST
67537: LIST
67538: LIST
67539: LIST
67540: LIST
67541: LIST
67542: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67543: LD_ADDR_VAR 0 62
67547: PUSH
67548: LD_INT 0
67550: PUSH
67551: LD_INT 0
67553: PUSH
67554: EMPTY
67555: LIST
67556: LIST
67557: PUSH
67558: LD_INT 0
67560: PUSH
67561: LD_INT 1
67563: NEG
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: PUSH
67569: LD_INT 1
67571: PUSH
67572: LD_INT 0
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PUSH
67579: LD_INT 1
67581: PUSH
67582: LD_INT 1
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: PUSH
67589: LD_INT 0
67591: PUSH
67592: LD_INT 1
67594: PUSH
67595: EMPTY
67596: LIST
67597: LIST
67598: PUSH
67599: LD_INT 1
67601: NEG
67602: PUSH
67603: LD_INT 0
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PUSH
67610: LD_INT 1
67612: NEG
67613: PUSH
67614: LD_INT 1
67616: NEG
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: LIST
67626: LIST
67627: LIST
67628: LIST
67629: LIST
67630: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67631: LD_ADDR_VAR 0 63
67635: PUSH
67636: LD_INT 0
67638: PUSH
67639: LD_INT 0
67641: PUSH
67642: EMPTY
67643: LIST
67644: LIST
67645: PUSH
67646: LD_INT 0
67648: PUSH
67649: LD_INT 1
67651: NEG
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: PUSH
67657: LD_INT 1
67659: PUSH
67660: LD_INT 0
67662: PUSH
67663: EMPTY
67664: LIST
67665: LIST
67666: PUSH
67667: LD_INT 1
67669: PUSH
67670: LD_INT 1
67672: PUSH
67673: EMPTY
67674: LIST
67675: LIST
67676: PUSH
67677: LD_INT 0
67679: PUSH
67680: LD_INT 1
67682: PUSH
67683: EMPTY
67684: LIST
67685: LIST
67686: PUSH
67687: LD_INT 1
67689: NEG
67690: PUSH
67691: LD_INT 0
67693: PUSH
67694: EMPTY
67695: LIST
67696: LIST
67697: PUSH
67698: LD_INT 1
67700: NEG
67701: PUSH
67702: LD_INT 1
67704: NEG
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: EMPTY
67711: LIST
67712: LIST
67713: LIST
67714: LIST
67715: LIST
67716: LIST
67717: LIST
67718: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67719: LD_ADDR_VAR 0 64
67723: PUSH
67724: LD_INT 0
67726: PUSH
67727: LD_INT 0
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: PUSH
67734: LD_INT 0
67736: PUSH
67737: LD_INT 1
67739: NEG
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: PUSH
67745: LD_INT 1
67747: PUSH
67748: LD_INT 0
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: PUSH
67755: LD_INT 1
67757: PUSH
67758: LD_INT 1
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: PUSH
67765: LD_INT 0
67767: PUSH
67768: LD_INT 1
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: PUSH
67775: LD_INT 1
67777: NEG
67778: PUSH
67779: LD_INT 0
67781: PUSH
67782: EMPTY
67783: LIST
67784: LIST
67785: PUSH
67786: LD_INT 1
67788: NEG
67789: PUSH
67790: LD_INT 1
67792: NEG
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: PUSH
67798: EMPTY
67799: LIST
67800: LIST
67801: LIST
67802: LIST
67803: LIST
67804: LIST
67805: LIST
67806: ST_TO_ADDR
// end ; 1 :
67807: GO 73704
67809: LD_INT 1
67811: DOUBLE
67812: EQUAL
67813: IFTRUE 67817
67815: GO 70440
67817: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67818: LD_ADDR_VAR 0 11
67822: PUSH
67823: LD_INT 1
67825: NEG
67826: PUSH
67827: LD_INT 3
67829: NEG
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: PUSH
67835: LD_INT 0
67837: PUSH
67838: LD_INT 3
67840: NEG
67841: PUSH
67842: EMPTY
67843: LIST
67844: LIST
67845: PUSH
67846: LD_INT 1
67848: PUSH
67849: LD_INT 2
67851: NEG
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: PUSH
67857: EMPTY
67858: LIST
67859: LIST
67860: LIST
67861: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67862: LD_ADDR_VAR 0 12
67866: PUSH
67867: LD_INT 2
67869: PUSH
67870: LD_INT 1
67872: NEG
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: PUSH
67878: LD_INT 3
67880: PUSH
67881: LD_INT 0
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: PUSH
67888: LD_INT 3
67890: PUSH
67891: LD_INT 1
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: PUSH
67898: EMPTY
67899: LIST
67900: LIST
67901: LIST
67902: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67903: LD_ADDR_VAR 0 13
67907: PUSH
67908: LD_INT 3
67910: PUSH
67911: LD_INT 2
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: PUSH
67918: LD_INT 3
67920: PUSH
67921: LD_INT 3
67923: PUSH
67924: EMPTY
67925: LIST
67926: LIST
67927: PUSH
67928: LD_INT 2
67930: PUSH
67931: LD_INT 3
67933: PUSH
67934: EMPTY
67935: LIST
67936: LIST
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: LIST
67942: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67943: LD_ADDR_VAR 0 14
67947: PUSH
67948: LD_INT 1
67950: PUSH
67951: LD_INT 3
67953: PUSH
67954: EMPTY
67955: LIST
67956: LIST
67957: PUSH
67958: LD_INT 0
67960: PUSH
67961: LD_INT 3
67963: PUSH
67964: EMPTY
67965: LIST
67966: LIST
67967: PUSH
67968: LD_INT 1
67970: NEG
67971: PUSH
67972: LD_INT 2
67974: PUSH
67975: EMPTY
67976: LIST
67977: LIST
67978: PUSH
67979: EMPTY
67980: LIST
67981: LIST
67982: LIST
67983: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67984: LD_ADDR_VAR 0 15
67988: PUSH
67989: LD_INT 2
67991: NEG
67992: PUSH
67993: LD_INT 1
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: LD_INT 3
68002: NEG
68003: PUSH
68004: LD_INT 0
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: PUSH
68011: LD_INT 3
68013: NEG
68014: PUSH
68015: LD_INT 1
68017: NEG
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: LIST
68027: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68028: LD_ADDR_VAR 0 16
68032: PUSH
68033: LD_INT 2
68035: NEG
68036: PUSH
68037: LD_INT 3
68039: NEG
68040: PUSH
68041: EMPTY
68042: LIST
68043: LIST
68044: PUSH
68045: LD_INT 3
68047: NEG
68048: PUSH
68049: LD_INT 2
68051: NEG
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: PUSH
68057: LD_INT 3
68059: NEG
68060: PUSH
68061: LD_INT 3
68063: NEG
68064: PUSH
68065: EMPTY
68066: LIST
68067: LIST
68068: PUSH
68069: EMPTY
68070: LIST
68071: LIST
68072: LIST
68073: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68074: LD_ADDR_VAR 0 17
68078: PUSH
68079: LD_INT 1
68081: NEG
68082: PUSH
68083: LD_INT 3
68085: NEG
68086: PUSH
68087: EMPTY
68088: LIST
68089: LIST
68090: PUSH
68091: LD_INT 0
68093: PUSH
68094: LD_INT 3
68096: NEG
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: PUSH
68102: LD_INT 1
68104: PUSH
68105: LD_INT 2
68107: NEG
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: PUSH
68113: EMPTY
68114: LIST
68115: LIST
68116: LIST
68117: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68118: LD_ADDR_VAR 0 18
68122: PUSH
68123: LD_INT 2
68125: PUSH
68126: LD_INT 1
68128: NEG
68129: PUSH
68130: EMPTY
68131: LIST
68132: LIST
68133: PUSH
68134: LD_INT 3
68136: PUSH
68137: LD_INT 0
68139: PUSH
68140: EMPTY
68141: LIST
68142: LIST
68143: PUSH
68144: LD_INT 3
68146: PUSH
68147: LD_INT 1
68149: PUSH
68150: EMPTY
68151: LIST
68152: LIST
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: LIST
68158: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68159: LD_ADDR_VAR 0 19
68163: PUSH
68164: LD_INT 3
68166: PUSH
68167: LD_INT 2
68169: PUSH
68170: EMPTY
68171: LIST
68172: LIST
68173: PUSH
68174: LD_INT 3
68176: PUSH
68177: LD_INT 3
68179: PUSH
68180: EMPTY
68181: LIST
68182: LIST
68183: PUSH
68184: LD_INT 2
68186: PUSH
68187: LD_INT 3
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: PUSH
68194: EMPTY
68195: LIST
68196: LIST
68197: LIST
68198: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68199: LD_ADDR_VAR 0 20
68203: PUSH
68204: LD_INT 1
68206: PUSH
68207: LD_INT 3
68209: PUSH
68210: EMPTY
68211: LIST
68212: LIST
68213: PUSH
68214: LD_INT 0
68216: PUSH
68217: LD_INT 3
68219: PUSH
68220: EMPTY
68221: LIST
68222: LIST
68223: PUSH
68224: LD_INT 1
68226: NEG
68227: PUSH
68228: LD_INT 2
68230: PUSH
68231: EMPTY
68232: LIST
68233: LIST
68234: PUSH
68235: EMPTY
68236: LIST
68237: LIST
68238: LIST
68239: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68240: LD_ADDR_VAR 0 21
68244: PUSH
68245: LD_INT 2
68247: NEG
68248: PUSH
68249: LD_INT 1
68251: PUSH
68252: EMPTY
68253: LIST
68254: LIST
68255: PUSH
68256: LD_INT 3
68258: NEG
68259: PUSH
68260: LD_INT 0
68262: PUSH
68263: EMPTY
68264: LIST
68265: LIST
68266: PUSH
68267: LD_INT 3
68269: NEG
68270: PUSH
68271: LD_INT 1
68273: NEG
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: PUSH
68279: EMPTY
68280: LIST
68281: LIST
68282: LIST
68283: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68284: LD_ADDR_VAR 0 22
68288: PUSH
68289: LD_INT 2
68291: NEG
68292: PUSH
68293: LD_INT 3
68295: NEG
68296: PUSH
68297: EMPTY
68298: LIST
68299: LIST
68300: PUSH
68301: LD_INT 3
68303: NEG
68304: PUSH
68305: LD_INT 2
68307: NEG
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: PUSH
68313: LD_INT 3
68315: NEG
68316: PUSH
68317: LD_INT 3
68319: NEG
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: LIST
68329: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
68330: LD_ADDR_VAR 0 23
68334: PUSH
68335: LD_INT 0
68337: PUSH
68338: LD_INT 3
68340: NEG
68341: PUSH
68342: EMPTY
68343: LIST
68344: LIST
68345: PUSH
68346: LD_INT 1
68348: NEG
68349: PUSH
68350: LD_INT 4
68352: NEG
68353: PUSH
68354: EMPTY
68355: LIST
68356: LIST
68357: PUSH
68358: LD_INT 1
68360: PUSH
68361: LD_INT 3
68363: NEG
68364: PUSH
68365: EMPTY
68366: LIST
68367: LIST
68368: PUSH
68369: EMPTY
68370: LIST
68371: LIST
68372: LIST
68373: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
68374: LD_ADDR_VAR 0 24
68378: PUSH
68379: LD_INT 3
68381: PUSH
68382: LD_INT 0
68384: PUSH
68385: EMPTY
68386: LIST
68387: LIST
68388: PUSH
68389: LD_INT 3
68391: PUSH
68392: LD_INT 1
68394: NEG
68395: PUSH
68396: EMPTY
68397: LIST
68398: LIST
68399: PUSH
68400: LD_INT 4
68402: PUSH
68403: LD_INT 1
68405: PUSH
68406: EMPTY
68407: LIST
68408: LIST
68409: PUSH
68410: EMPTY
68411: LIST
68412: LIST
68413: LIST
68414: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
68415: LD_ADDR_VAR 0 25
68419: PUSH
68420: LD_INT 3
68422: PUSH
68423: LD_INT 3
68425: PUSH
68426: EMPTY
68427: LIST
68428: LIST
68429: PUSH
68430: LD_INT 4
68432: PUSH
68433: LD_INT 3
68435: PUSH
68436: EMPTY
68437: LIST
68438: LIST
68439: PUSH
68440: LD_INT 3
68442: PUSH
68443: LD_INT 4
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: LIST
68454: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
68455: LD_ADDR_VAR 0 26
68459: PUSH
68460: LD_INT 0
68462: PUSH
68463: LD_INT 3
68465: PUSH
68466: EMPTY
68467: LIST
68468: LIST
68469: PUSH
68470: LD_INT 1
68472: PUSH
68473: LD_INT 4
68475: PUSH
68476: EMPTY
68477: LIST
68478: LIST
68479: PUSH
68480: LD_INT 1
68482: NEG
68483: PUSH
68484: LD_INT 3
68486: PUSH
68487: EMPTY
68488: LIST
68489: LIST
68490: PUSH
68491: EMPTY
68492: LIST
68493: LIST
68494: LIST
68495: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
68496: LD_ADDR_VAR 0 27
68500: PUSH
68501: LD_INT 3
68503: NEG
68504: PUSH
68505: LD_INT 0
68507: PUSH
68508: EMPTY
68509: LIST
68510: LIST
68511: PUSH
68512: LD_INT 3
68514: NEG
68515: PUSH
68516: LD_INT 1
68518: PUSH
68519: EMPTY
68520: LIST
68521: LIST
68522: PUSH
68523: LD_INT 4
68525: NEG
68526: PUSH
68527: LD_INT 1
68529: NEG
68530: PUSH
68531: EMPTY
68532: LIST
68533: LIST
68534: PUSH
68535: EMPTY
68536: LIST
68537: LIST
68538: LIST
68539: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
68540: LD_ADDR_VAR 0 28
68544: PUSH
68545: LD_INT 3
68547: NEG
68548: PUSH
68549: LD_INT 3
68551: NEG
68552: PUSH
68553: EMPTY
68554: LIST
68555: LIST
68556: PUSH
68557: LD_INT 3
68559: NEG
68560: PUSH
68561: LD_INT 4
68563: NEG
68564: PUSH
68565: EMPTY
68566: LIST
68567: LIST
68568: PUSH
68569: LD_INT 4
68571: NEG
68572: PUSH
68573: LD_INT 3
68575: NEG
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: PUSH
68581: EMPTY
68582: LIST
68583: LIST
68584: LIST
68585: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
68586: LD_ADDR_VAR 0 29
68590: PUSH
68591: LD_INT 1
68593: NEG
68594: PUSH
68595: LD_INT 3
68597: NEG
68598: PUSH
68599: EMPTY
68600: LIST
68601: LIST
68602: PUSH
68603: LD_INT 0
68605: PUSH
68606: LD_INT 3
68608: NEG
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: PUSH
68614: LD_INT 1
68616: PUSH
68617: LD_INT 2
68619: NEG
68620: PUSH
68621: EMPTY
68622: LIST
68623: LIST
68624: PUSH
68625: LD_INT 1
68627: NEG
68628: PUSH
68629: LD_INT 4
68631: NEG
68632: PUSH
68633: EMPTY
68634: LIST
68635: LIST
68636: PUSH
68637: LD_INT 0
68639: PUSH
68640: LD_INT 4
68642: NEG
68643: PUSH
68644: EMPTY
68645: LIST
68646: LIST
68647: PUSH
68648: LD_INT 1
68650: PUSH
68651: LD_INT 3
68653: NEG
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: PUSH
68659: LD_INT 1
68661: NEG
68662: PUSH
68663: LD_INT 5
68665: NEG
68666: PUSH
68667: EMPTY
68668: LIST
68669: LIST
68670: PUSH
68671: LD_INT 0
68673: PUSH
68674: LD_INT 5
68676: NEG
68677: PUSH
68678: EMPTY
68679: LIST
68680: LIST
68681: PUSH
68682: LD_INT 1
68684: PUSH
68685: LD_INT 4
68687: NEG
68688: PUSH
68689: EMPTY
68690: LIST
68691: LIST
68692: PUSH
68693: LD_INT 1
68695: NEG
68696: PUSH
68697: LD_INT 6
68699: NEG
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: PUSH
68705: LD_INT 0
68707: PUSH
68708: LD_INT 6
68710: NEG
68711: PUSH
68712: EMPTY
68713: LIST
68714: LIST
68715: PUSH
68716: LD_INT 1
68718: PUSH
68719: LD_INT 5
68721: NEG
68722: PUSH
68723: EMPTY
68724: LIST
68725: LIST
68726: PUSH
68727: EMPTY
68728: LIST
68729: LIST
68730: LIST
68731: LIST
68732: LIST
68733: LIST
68734: LIST
68735: LIST
68736: LIST
68737: LIST
68738: LIST
68739: LIST
68740: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
68741: LD_ADDR_VAR 0 30
68745: PUSH
68746: LD_INT 2
68748: PUSH
68749: LD_INT 1
68751: NEG
68752: PUSH
68753: EMPTY
68754: LIST
68755: LIST
68756: PUSH
68757: LD_INT 3
68759: PUSH
68760: LD_INT 0
68762: PUSH
68763: EMPTY
68764: LIST
68765: LIST
68766: PUSH
68767: LD_INT 3
68769: PUSH
68770: LD_INT 1
68772: PUSH
68773: EMPTY
68774: LIST
68775: LIST
68776: PUSH
68777: LD_INT 3
68779: PUSH
68780: LD_INT 1
68782: NEG
68783: PUSH
68784: EMPTY
68785: LIST
68786: LIST
68787: PUSH
68788: LD_INT 4
68790: PUSH
68791: LD_INT 0
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: PUSH
68798: LD_INT 4
68800: PUSH
68801: LD_INT 1
68803: PUSH
68804: EMPTY
68805: LIST
68806: LIST
68807: PUSH
68808: LD_INT 4
68810: PUSH
68811: LD_INT 1
68813: NEG
68814: PUSH
68815: EMPTY
68816: LIST
68817: LIST
68818: PUSH
68819: LD_INT 5
68821: PUSH
68822: LD_INT 0
68824: PUSH
68825: EMPTY
68826: LIST
68827: LIST
68828: PUSH
68829: LD_INT 5
68831: PUSH
68832: LD_INT 1
68834: PUSH
68835: EMPTY
68836: LIST
68837: LIST
68838: PUSH
68839: LD_INT 5
68841: PUSH
68842: LD_INT 1
68844: NEG
68845: PUSH
68846: EMPTY
68847: LIST
68848: LIST
68849: PUSH
68850: LD_INT 6
68852: PUSH
68853: LD_INT 0
68855: PUSH
68856: EMPTY
68857: LIST
68858: LIST
68859: PUSH
68860: LD_INT 6
68862: PUSH
68863: LD_INT 1
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: LIST
68874: LIST
68875: LIST
68876: LIST
68877: LIST
68878: LIST
68879: LIST
68880: LIST
68881: LIST
68882: LIST
68883: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
68884: LD_ADDR_VAR 0 31
68888: PUSH
68889: LD_INT 3
68891: PUSH
68892: LD_INT 2
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: PUSH
68899: LD_INT 3
68901: PUSH
68902: LD_INT 3
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: PUSH
68909: LD_INT 2
68911: PUSH
68912: LD_INT 3
68914: PUSH
68915: EMPTY
68916: LIST
68917: LIST
68918: PUSH
68919: LD_INT 4
68921: PUSH
68922: LD_INT 3
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: PUSH
68929: LD_INT 4
68931: PUSH
68932: LD_INT 4
68934: PUSH
68935: EMPTY
68936: LIST
68937: LIST
68938: PUSH
68939: LD_INT 3
68941: PUSH
68942: LD_INT 4
68944: PUSH
68945: EMPTY
68946: LIST
68947: LIST
68948: PUSH
68949: LD_INT 5
68951: PUSH
68952: LD_INT 4
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: PUSH
68959: LD_INT 5
68961: PUSH
68962: LD_INT 5
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: PUSH
68969: LD_INT 4
68971: PUSH
68972: LD_INT 5
68974: PUSH
68975: EMPTY
68976: LIST
68977: LIST
68978: PUSH
68979: LD_INT 6
68981: PUSH
68982: LD_INT 5
68984: PUSH
68985: EMPTY
68986: LIST
68987: LIST
68988: PUSH
68989: LD_INT 6
68991: PUSH
68992: LD_INT 6
68994: PUSH
68995: EMPTY
68996: LIST
68997: LIST
68998: PUSH
68999: LD_INT 5
69001: PUSH
69002: LD_INT 6
69004: PUSH
69005: EMPTY
69006: LIST
69007: LIST
69008: PUSH
69009: EMPTY
69010: LIST
69011: LIST
69012: LIST
69013: LIST
69014: LIST
69015: LIST
69016: LIST
69017: LIST
69018: LIST
69019: LIST
69020: LIST
69021: LIST
69022: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
69023: LD_ADDR_VAR 0 32
69027: PUSH
69028: LD_INT 1
69030: PUSH
69031: LD_INT 3
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: PUSH
69038: LD_INT 0
69040: PUSH
69041: LD_INT 3
69043: PUSH
69044: EMPTY
69045: LIST
69046: LIST
69047: PUSH
69048: LD_INT 1
69050: NEG
69051: PUSH
69052: LD_INT 2
69054: PUSH
69055: EMPTY
69056: LIST
69057: LIST
69058: PUSH
69059: LD_INT 1
69061: PUSH
69062: LD_INT 4
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: PUSH
69069: LD_INT 0
69071: PUSH
69072: LD_INT 4
69074: PUSH
69075: EMPTY
69076: LIST
69077: LIST
69078: PUSH
69079: LD_INT 1
69081: NEG
69082: PUSH
69083: LD_INT 3
69085: PUSH
69086: EMPTY
69087: LIST
69088: LIST
69089: PUSH
69090: LD_INT 1
69092: PUSH
69093: LD_INT 5
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: PUSH
69100: LD_INT 0
69102: PUSH
69103: LD_INT 5
69105: PUSH
69106: EMPTY
69107: LIST
69108: LIST
69109: PUSH
69110: LD_INT 1
69112: NEG
69113: PUSH
69114: LD_INT 4
69116: PUSH
69117: EMPTY
69118: LIST
69119: LIST
69120: PUSH
69121: LD_INT 1
69123: PUSH
69124: LD_INT 6
69126: PUSH
69127: EMPTY
69128: LIST
69129: LIST
69130: PUSH
69131: LD_INT 0
69133: PUSH
69134: LD_INT 6
69136: PUSH
69137: EMPTY
69138: LIST
69139: LIST
69140: PUSH
69141: LD_INT 1
69143: NEG
69144: PUSH
69145: LD_INT 5
69147: PUSH
69148: EMPTY
69149: LIST
69150: LIST
69151: PUSH
69152: EMPTY
69153: LIST
69154: LIST
69155: LIST
69156: LIST
69157: LIST
69158: LIST
69159: LIST
69160: LIST
69161: LIST
69162: LIST
69163: LIST
69164: LIST
69165: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
69166: LD_ADDR_VAR 0 33
69170: PUSH
69171: LD_INT 2
69173: NEG
69174: PUSH
69175: LD_INT 1
69177: PUSH
69178: EMPTY
69179: LIST
69180: LIST
69181: PUSH
69182: LD_INT 3
69184: NEG
69185: PUSH
69186: LD_INT 0
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: PUSH
69193: LD_INT 3
69195: NEG
69196: PUSH
69197: LD_INT 1
69199: NEG
69200: PUSH
69201: EMPTY
69202: LIST
69203: LIST
69204: PUSH
69205: LD_INT 3
69207: NEG
69208: PUSH
69209: LD_INT 1
69211: PUSH
69212: EMPTY
69213: LIST
69214: LIST
69215: PUSH
69216: LD_INT 4
69218: NEG
69219: PUSH
69220: LD_INT 0
69222: PUSH
69223: EMPTY
69224: LIST
69225: LIST
69226: PUSH
69227: LD_INT 4
69229: NEG
69230: PUSH
69231: LD_INT 1
69233: NEG
69234: PUSH
69235: EMPTY
69236: LIST
69237: LIST
69238: PUSH
69239: LD_INT 4
69241: NEG
69242: PUSH
69243: LD_INT 1
69245: PUSH
69246: EMPTY
69247: LIST
69248: LIST
69249: PUSH
69250: LD_INT 5
69252: NEG
69253: PUSH
69254: LD_INT 0
69256: PUSH
69257: EMPTY
69258: LIST
69259: LIST
69260: PUSH
69261: LD_INT 5
69263: NEG
69264: PUSH
69265: LD_INT 1
69267: NEG
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: PUSH
69273: LD_INT 5
69275: NEG
69276: PUSH
69277: LD_INT 1
69279: PUSH
69280: EMPTY
69281: LIST
69282: LIST
69283: PUSH
69284: LD_INT 6
69286: NEG
69287: PUSH
69288: LD_INT 0
69290: PUSH
69291: EMPTY
69292: LIST
69293: LIST
69294: PUSH
69295: LD_INT 6
69297: NEG
69298: PUSH
69299: LD_INT 1
69301: NEG
69302: PUSH
69303: EMPTY
69304: LIST
69305: LIST
69306: PUSH
69307: EMPTY
69308: LIST
69309: LIST
69310: LIST
69311: LIST
69312: LIST
69313: LIST
69314: LIST
69315: LIST
69316: LIST
69317: LIST
69318: LIST
69319: LIST
69320: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
69321: LD_ADDR_VAR 0 34
69325: PUSH
69326: LD_INT 2
69328: NEG
69329: PUSH
69330: LD_INT 3
69332: NEG
69333: PUSH
69334: EMPTY
69335: LIST
69336: LIST
69337: PUSH
69338: LD_INT 3
69340: NEG
69341: PUSH
69342: LD_INT 2
69344: NEG
69345: PUSH
69346: EMPTY
69347: LIST
69348: LIST
69349: PUSH
69350: LD_INT 3
69352: NEG
69353: PUSH
69354: LD_INT 3
69356: NEG
69357: PUSH
69358: EMPTY
69359: LIST
69360: LIST
69361: PUSH
69362: LD_INT 3
69364: NEG
69365: PUSH
69366: LD_INT 4
69368: NEG
69369: PUSH
69370: EMPTY
69371: LIST
69372: LIST
69373: PUSH
69374: LD_INT 4
69376: NEG
69377: PUSH
69378: LD_INT 3
69380: NEG
69381: PUSH
69382: EMPTY
69383: LIST
69384: LIST
69385: PUSH
69386: LD_INT 4
69388: NEG
69389: PUSH
69390: LD_INT 4
69392: NEG
69393: PUSH
69394: EMPTY
69395: LIST
69396: LIST
69397: PUSH
69398: LD_INT 4
69400: NEG
69401: PUSH
69402: LD_INT 5
69404: NEG
69405: PUSH
69406: EMPTY
69407: LIST
69408: LIST
69409: PUSH
69410: LD_INT 5
69412: NEG
69413: PUSH
69414: LD_INT 4
69416: NEG
69417: PUSH
69418: EMPTY
69419: LIST
69420: LIST
69421: PUSH
69422: LD_INT 5
69424: NEG
69425: PUSH
69426: LD_INT 5
69428: NEG
69429: PUSH
69430: EMPTY
69431: LIST
69432: LIST
69433: PUSH
69434: LD_INT 5
69436: NEG
69437: PUSH
69438: LD_INT 6
69440: NEG
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PUSH
69446: LD_INT 6
69448: NEG
69449: PUSH
69450: LD_INT 5
69452: NEG
69453: PUSH
69454: EMPTY
69455: LIST
69456: LIST
69457: PUSH
69458: LD_INT 6
69460: NEG
69461: PUSH
69462: LD_INT 6
69464: NEG
69465: PUSH
69466: EMPTY
69467: LIST
69468: LIST
69469: PUSH
69470: EMPTY
69471: LIST
69472: LIST
69473: LIST
69474: LIST
69475: LIST
69476: LIST
69477: LIST
69478: LIST
69479: LIST
69480: LIST
69481: LIST
69482: LIST
69483: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
69484: LD_ADDR_VAR 0 41
69488: PUSH
69489: LD_INT 0
69491: PUSH
69492: LD_INT 2
69494: NEG
69495: PUSH
69496: EMPTY
69497: LIST
69498: LIST
69499: PUSH
69500: LD_INT 1
69502: NEG
69503: PUSH
69504: LD_INT 3
69506: NEG
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: PUSH
69512: LD_INT 1
69514: PUSH
69515: LD_INT 2
69517: NEG
69518: PUSH
69519: EMPTY
69520: LIST
69521: LIST
69522: PUSH
69523: EMPTY
69524: LIST
69525: LIST
69526: LIST
69527: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
69528: LD_ADDR_VAR 0 42
69532: PUSH
69533: LD_INT 2
69535: PUSH
69536: LD_INT 0
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: LD_INT 2
69545: PUSH
69546: LD_INT 1
69548: NEG
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: PUSH
69554: LD_INT 3
69556: PUSH
69557: LD_INT 1
69559: PUSH
69560: EMPTY
69561: LIST
69562: LIST
69563: PUSH
69564: EMPTY
69565: LIST
69566: LIST
69567: LIST
69568: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
69569: LD_ADDR_VAR 0 43
69573: PUSH
69574: LD_INT 2
69576: PUSH
69577: LD_INT 2
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: PUSH
69584: LD_INT 3
69586: PUSH
69587: LD_INT 2
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: PUSH
69594: LD_INT 2
69596: PUSH
69597: LD_INT 3
69599: PUSH
69600: EMPTY
69601: LIST
69602: LIST
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: LIST
69608: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
69609: LD_ADDR_VAR 0 44
69613: PUSH
69614: LD_INT 0
69616: PUSH
69617: LD_INT 2
69619: PUSH
69620: EMPTY
69621: LIST
69622: LIST
69623: PUSH
69624: LD_INT 1
69626: PUSH
69627: LD_INT 3
69629: PUSH
69630: EMPTY
69631: LIST
69632: LIST
69633: PUSH
69634: LD_INT 1
69636: NEG
69637: PUSH
69638: LD_INT 2
69640: PUSH
69641: EMPTY
69642: LIST
69643: LIST
69644: PUSH
69645: EMPTY
69646: LIST
69647: LIST
69648: LIST
69649: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69650: LD_ADDR_VAR 0 45
69654: PUSH
69655: LD_INT 2
69657: NEG
69658: PUSH
69659: LD_INT 0
69661: PUSH
69662: EMPTY
69663: LIST
69664: LIST
69665: PUSH
69666: LD_INT 2
69668: NEG
69669: PUSH
69670: LD_INT 1
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: PUSH
69677: LD_INT 3
69679: NEG
69680: PUSH
69681: LD_INT 1
69683: NEG
69684: PUSH
69685: EMPTY
69686: LIST
69687: LIST
69688: PUSH
69689: EMPTY
69690: LIST
69691: LIST
69692: LIST
69693: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
69694: LD_ADDR_VAR 0 46
69698: PUSH
69699: LD_INT 2
69701: NEG
69702: PUSH
69703: LD_INT 2
69705: NEG
69706: PUSH
69707: EMPTY
69708: LIST
69709: LIST
69710: PUSH
69711: LD_INT 2
69713: NEG
69714: PUSH
69715: LD_INT 3
69717: NEG
69718: PUSH
69719: EMPTY
69720: LIST
69721: LIST
69722: PUSH
69723: LD_INT 3
69725: NEG
69726: PUSH
69727: LD_INT 2
69729: NEG
69730: PUSH
69731: EMPTY
69732: LIST
69733: LIST
69734: PUSH
69735: EMPTY
69736: LIST
69737: LIST
69738: LIST
69739: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
69740: LD_ADDR_VAR 0 47
69744: PUSH
69745: LD_INT 2
69747: NEG
69748: PUSH
69749: LD_INT 3
69751: NEG
69752: PUSH
69753: EMPTY
69754: LIST
69755: LIST
69756: PUSH
69757: LD_INT 1
69759: NEG
69760: PUSH
69761: LD_INT 3
69763: NEG
69764: PUSH
69765: EMPTY
69766: LIST
69767: LIST
69768: PUSH
69769: EMPTY
69770: LIST
69771: LIST
69772: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
69773: LD_ADDR_VAR 0 48
69777: PUSH
69778: LD_INT 1
69780: PUSH
69781: LD_INT 2
69783: NEG
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: PUSH
69789: LD_INT 2
69791: PUSH
69792: LD_INT 1
69794: NEG
69795: PUSH
69796: EMPTY
69797: LIST
69798: LIST
69799: PUSH
69800: EMPTY
69801: LIST
69802: LIST
69803: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
69804: LD_ADDR_VAR 0 49
69808: PUSH
69809: LD_INT 3
69811: PUSH
69812: LD_INT 1
69814: PUSH
69815: EMPTY
69816: LIST
69817: LIST
69818: PUSH
69819: LD_INT 3
69821: PUSH
69822: LD_INT 2
69824: PUSH
69825: EMPTY
69826: LIST
69827: LIST
69828: PUSH
69829: EMPTY
69830: LIST
69831: LIST
69832: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
69833: LD_ADDR_VAR 0 50
69837: PUSH
69838: LD_INT 2
69840: PUSH
69841: LD_INT 3
69843: PUSH
69844: EMPTY
69845: LIST
69846: LIST
69847: PUSH
69848: LD_INT 1
69850: PUSH
69851: LD_INT 3
69853: PUSH
69854: EMPTY
69855: LIST
69856: LIST
69857: PUSH
69858: EMPTY
69859: LIST
69860: LIST
69861: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
69862: LD_ADDR_VAR 0 51
69866: PUSH
69867: LD_INT 1
69869: NEG
69870: PUSH
69871: LD_INT 2
69873: PUSH
69874: EMPTY
69875: LIST
69876: LIST
69877: PUSH
69878: LD_INT 2
69880: NEG
69881: PUSH
69882: LD_INT 1
69884: PUSH
69885: EMPTY
69886: LIST
69887: LIST
69888: PUSH
69889: EMPTY
69890: LIST
69891: LIST
69892: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69893: LD_ADDR_VAR 0 52
69897: PUSH
69898: LD_INT 3
69900: NEG
69901: PUSH
69902: LD_INT 1
69904: NEG
69905: PUSH
69906: EMPTY
69907: LIST
69908: LIST
69909: PUSH
69910: LD_INT 3
69912: NEG
69913: PUSH
69914: LD_INT 2
69916: NEG
69917: PUSH
69918: EMPTY
69919: LIST
69920: LIST
69921: PUSH
69922: EMPTY
69923: LIST
69924: LIST
69925: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69926: LD_ADDR_VAR 0 53
69930: PUSH
69931: LD_INT 1
69933: NEG
69934: PUSH
69935: LD_INT 3
69937: NEG
69938: PUSH
69939: EMPTY
69940: LIST
69941: LIST
69942: PUSH
69943: LD_INT 0
69945: PUSH
69946: LD_INT 3
69948: NEG
69949: PUSH
69950: EMPTY
69951: LIST
69952: LIST
69953: PUSH
69954: LD_INT 1
69956: PUSH
69957: LD_INT 2
69959: NEG
69960: PUSH
69961: EMPTY
69962: LIST
69963: LIST
69964: PUSH
69965: EMPTY
69966: LIST
69967: LIST
69968: LIST
69969: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69970: LD_ADDR_VAR 0 54
69974: PUSH
69975: LD_INT 2
69977: PUSH
69978: LD_INT 1
69980: NEG
69981: PUSH
69982: EMPTY
69983: LIST
69984: LIST
69985: PUSH
69986: LD_INT 3
69988: PUSH
69989: LD_INT 0
69991: PUSH
69992: EMPTY
69993: LIST
69994: LIST
69995: PUSH
69996: LD_INT 3
69998: PUSH
69999: LD_INT 1
70001: PUSH
70002: EMPTY
70003: LIST
70004: LIST
70005: PUSH
70006: EMPTY
70007: LIST
70008: LIST
70009: LIST
70010: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70011: LD_ADDR_VAR 0 55
70015: PUSH
70016: LD_INT 3
70018: PUSH
70019: LD_INT 2
70021: PUSH
70022: EMPTY
70023: LIST
70024: LIST
70025: PUSH
70026: LD_INT 3
70028: PUSH
70029: LD_INT 3
70031: PUSH
70032: EMPTY
70033: LIST
70034: LIST
70035: PUSH
70036: LD_INT 2
70038: PUSH
70039: LD_INT 3
70041: PUSH
70042: EMPTY
70043: LIST
70044: LIST
70045: PUSH
70046: EMPTY
70047: LIST
70048: LIST
70049: LIST
70050: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70051: LD_ADDR_VAR 0 56
70055: PUSH
70056: LD_INT 1
70058: PUSH
70059: LD_INT 3
70061: PUSH
70062: EMPTY
70063: LIST
70064: LIST
70065: PUSH
70066: LD_INT 0
70068: PUSH
70069: LD_INT 3
70071: PUSH
70072: EMPTY
70073: LIST
70074: LIST
70075: PUSH
70076: LD_INT 1
70078: NEG
70079: PUSH
70080: LD_INT 2
70082: PUSH
70083: EMPTY
70084: LIST
70085: LIST
70086: PUSH
70087: EMPTY
70088: LIST
70089: LIST
70090: LIST
70091: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70092: LD_ADDR_VAR 0 57
70096: PUSH
70097: LD_INT 2
70099: NEG
70100: PUSH
70101: LD_INT 1
70103: PUSH
70104: EMPTY
70105: LIST
70106: LIST
70107: PUSH
70108: LD_INT 3
70110: NEG
70111: PUSH
70112: LD_INT 0
70114: PUSH
70115: EMPTY
70116: LIST
70117: LIST
70118: PUSH
70119: LD_INT 3
70121: NEG
70122: PUSH
70123: LD_INT 1
70125: NEG
70126: PUSH
70127: EMPTY
70128: LIST
70129: LIST
70130: PUSH
70131: EMPTY
70132: LIST
70133: LIST
70134: LIST
70135: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70136: LD_ADDR_VAR 0 58
70140: PUSH
70141: LD_INT 2
70143: NEG
70144: PUSH
70145: LD_INT 3
70147: NEG
70148: PUSH
70149: EMPTY
70150: LIST
70151: LIST
70152: PUSH
70153: LD_INT 3
70155: NEG
70156: PUSH
70157: LD_INT 2
70159: NEG
70160: PUSH
70161: EMPTY
70162: LIST
70163: LIST
70164: PUSH
70165: LD_INT 3
70167: NEG
70168: PUSH
70169: LD_INT 3
70171: NEG
70172: PUSH
70173: EMPTY
70174: LIST
70175: LIST
70176: PUSH
70177: EMPTY
70178: LIST
70179: LIST
70180: LIST
70181: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
70182: LD_ADDR_VAR 0 59
70186: PUSH
70187: LD_INT 1
70189: NEG
70190: PUSH
70191: LD_INT 2
70193: NEG
70194: PUSH
70195: EMPTY
70196: LIST
70197: LIST
70198: PUSH
70199: LD_INT 0
70201: PUSH
70202: LD_INT 2
70204: NEG
70205: PUSH
70206: EMPTY
70207: LIST
70208: LIST
70209: PUSH
70210: LD_INT 1
70212: PUSH
70213: LD_INT 1
70215: NEG
70216: PUSH
70217: EMPTY
70218: LIST
70219: LIST
70220: PUSH
70221: EMPTY
70222: LIST
70223: LIST
70224: LIST
70225: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
70226: LD_ADDR_VAR 0 60
70230: PUSH
70231: LD_INT 1
70233: PUSH
70234: LD_INT 1
70236: NEG
70237: PUSH
70238: EMPTY
70239: LIST
70240: LIST
70241: PUSH
70242: LD_INT 2
70244: PUSH
70245: LD_INT 0
70247: PUSH
70248: EMPTY
70249: LIST
70250: LIST
70251: PUSH
70252: LD_INT 2
70254: PUSH
70255: LD_INT 1
70257: PUSH
70258: EMPTY
70259: LIST
70260: LIST
70261: PUSH
70262: EMPTY
70263: LIST
70264: LIST
70265: LIST
70266: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
70267: LD_ADDR_VAR 0 61
70271: PUSH
70272: LD_INT 2
70274: PUSH
70275: LD_INT 1
70277: PUSH
70278: EMPTY
70279: LIST
70280: LIST
70281: PUSH
70282: LD_INT 2
70284: PUSH
70285: LD_INT 2
70287: PUSH
70288: EMPTY
70289: LIST
70290: LIST
70291: PUSH
70292: LD_INT 1
70294: PUSH
70295: LD_INT 2
70297: PUSH
70298: EMPTY
70299: LIST
70300: LIST
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: LIST
70306: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
70307: LD_ADDR_VAR 0 62
70311: PUSH
70312: LD_INT 1
70314: PUSH
70315: LD_INT 2
70317: PUSH
70318: EMPTY
70319: LIST
70320: LIST
70321: PUSH
70322: LD_INT 0
70324: PUSH
70325: LD_INT 2
70327: PUSH
70328: EMPTY
70329: LIST
70330: LIST
70331: PUSH
70332: LD_INT 1
70334: NEG
70335: PUSH
70336: LD_INT 1
70338: PUSH
70339: EMPTY
70340: LIST
70341: LIST
70342: PUSH
70343: EMPTY
70344: LIST
70345: LIST
70346: LIST
70347: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
70348: LD_ADDR_VAR 0 63
70352: PUSH
70353: LD_INT 1
70355: NEG
70356: PUSH
70357: LD_INT 1
70359: PUSH
70360: EMPTY
70361: LIST
70362: LIST
70363: PUSH
70364: LD_INT 2
70366: NEG
70367: PUSH
70368: LD_INT 0
70370: PUSH
70371: EMPTY
70372: LIST
70373: LIST
70374: PUSH
70375: LD_INT 2
70377: NEG
70378: PUSH
70379: LD_INT 1
70381: NEG
70382: PUSH
70383: EMPTY
70384: LIST
70385: LIST
70386: PUSH
70387: EMPTY
70388: LIST
70389: LIST
70390: LIST
70391: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70392: LD_ADDR_VAR 0 64
70396: PUSH
70397: LD_INT 1
70399: NEG
70400: PUSH
70401: LD_INT 2
70403: NEG
70404: PUSH
70405: EMPTY
70406: LIST
70407: LIST
70408: PUSH
70409: LD_INT 2
70411: NEG
70412: PUSH
70413: LD_INT 1
70415: NEG
70416: PUSH
70417: EMPTY
70418: LIST
70419: LIST
70420: PUSH
70421: LD_INT 2
70423: NEG
70424: PUSH
70425: LD_INT 2
70427: NEG
70428: PUSH
70429: EMPTY
70430: LIST
70431: LIST
70432: PUSH
70433: EMPTY
70434: LIST
70435: LIST
70436: LIST
70437: ST_TO_ADDR
// end ; 2 :
70438: GO 73704
70440: LD_INT 2
70442: DOUBLE
70443: EQUAL
70444: IFTRUE 70448
70446: GO 73703
70448: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
70449: LD_ADDR_VAR 0 29
70453: PUSH
70454: LD_INT 4
70456: PUSH
70457: LD_INT 0
70459: PUSH
70460: EMPTY
70461: LIST
70462: LIST
70463: PUSH
70464: LD_INT 4
70466: PUSH
70467: LD_INT 1
70469: NEG
70470: PUSH
70471: EMPTY
70472: LIST
70473: LIST
70474: PUSH
70475: LD_INT 5
70477: PUSH
70478: LD_INT 0
70480: PUSH
70481: EMPTY
70482: LIST
70483: LIST
70484: PUSH
70485: LD_INT 5
70487: PUSH
70488: LD_INT 1
70490: PUSH
70491: EMPTY
70492: LIST
70493: LIST
70494: PUSH
70495: LD_INT 4
70497: PUSH
70498: LD_INT 1
70500: PUSH
70501: EMPTY
70502: LIST
70503: LIST
70504: PUSH
70505: LD_INT 3
70507: PUSH
70508: LD_INT 0
70510: PUSH
70511: EMPTY
70512: LIST
70513: LIST
70514: PUSH
70515: LD_INT 3
70517: PUSH
70518: LD_INT 1
70520: NEG
70521: PUSH
70522: EMPTY
70523: LIST
70524: LIST
70525: PUSH
70526: LD_INT 3
70528: PUSH
70529: LD_INT 2
70531: NEG
70532: PUSH
70533: EMPTY
70534: LIST
70535: LIST
70536: PUSH
70537: LD_INT 5
70539: PUSH
70540: LD_INT 2
70542: PUSH
70543: EMPTY
70544: LIST
70545: LIST
70546: PUSH
70547: LD_INT 3
70549: PUSH
70550: LD_INT 3
70552: PUSH
70553: EMPTY
70554: LIST
70555: LIST
70556: PUSH
70557: LD_INT 3
70559: PUSH
70560: LD_INT 2
70562: PUSH
70563: EMPTY
70564: LIST
70565: LIST
70566: PUSH
70567: LD_INT 4
70569: PUSH
70570: LD_INT 3
70572: PUSH
70573: EMPTY
70574: LIST
70575: LIST
70576: PUSH
70577: LD_INT 4
70579: PUSH
70580: LD_INT 4
70582: PUSH
70583: EMPTY
70584: LIST
70585: LIST
70586: PUSH
70587: LD_INT 3
70589: PUSH
70590: LD_INT 4
70592: PUSH
70593: EMPTY
70594: LIST
70595: LIST
70596: PUSH
70597: LD_INT 2
70599: PUSH
70600: LD_INT 3
70602: PUSH
70603: EMPTY
70604: LIST
70605: LIST
70606: PUSH
70607: LD_INT 2
70609: PUSH
70610: LD_INT 2
70612: PUSH
70613: EMPTY
70614: LIST
70615: LIST
70616: PUSH
70617: LD_INT 4
70619: PUSH
70620: LD_INT 2
70622: PUSH
70623: EMPTY
70624: LIST
70625: LIST
70626: PUSH
70627: LD_INT 2
70629: PUSH
70630: LD_INT 4
70632: PUSH
70633: EMPTY
70634: LIST
70635: LIST
70636: PUSH
70637: LD_INT 0
70639: PUSH
70640: LD_INT 4
70642: PUSH
70643: EMPTY
70644: LIST
70645: LIST
70646: PUSH
70647: LD_INT 0
70649: PUSH
70650: LD_INT 3
70652: PUSH
70653: EMPTY
70654: LIST
70655: LIST
70656: PUSH
70657: LD_INT 1
70659: PUSH
70660: LD_INT 4
70662: PUSH
70663: EMPTY
70664: LIST
70665: LIST
70666: PUSH
70667: LD_INT 1
70669: PUSH
70670: LD_INT 5
70672: PUSH
70673: EMPTY
70674: LIST
70675: LIST
70676: PUSH
70677: LD_INT 0
70679: PUSH
70680: LD_INT 5
70682: PUSH
70683: EMPTY
70684: LIST
70685: LIST
70686: PUSH
70687: LD_INT 1
70689: NEG
70690: PUSH
70691: LD_INT 4
70693: PUSH
70694: EMPTY
70695: LIST
70696: LIST
70697: PUSH
70698: LD_INT 1
70700: NEG
70701: PUSH
70702: LD_INT 3
70704: PUSH
70705: EMPTY
70706: LIST
70707: LIST
70708: PUSH
70709: LD_INT 2
70711: PUSH
70712: LD_INT 5
70714: PUSH
70715: EMPTY
70716: LIST
70717: LIST
70718: PUSH
70719: LD_INT 2
70721: NEG
70722: PUSH
70723: LD_INT 3
70725: PUSH
70726: EMPTY
70727: LIST
70728: LIST
70729: PUSH
70730: LD_INT 3
70732: NEG
70733: PUSH
70734: LD_INT 0
70736: PUSH
70737: EMPTY
70738: LIST
70739: LIST
70740: PUSH
70741: LD_INT 3
70743: NEG
70744: PUSH
70745: LD_INT 1
70747: NEG
70748: PUSH
70749: EMPTY
70750: LIST
70751: LIST
70752: PUSH
70753: LD_INT 2
70755: NEG
70756: PUSH
70757: LD_INT 0
70759: PUSH
70760: EMPTY
70761: LIST
70762: LIST
70763: PUSH
70764: LD_INT 2
70766: NEG
70767: PUSH
70768: LD_INT 1
70770: PUSH
70771: EMPTY
70772: LIST
70773: LIST
70774: PUSH
70775: LD_INT 3
70777: NEG
70778: PUSH
70779: LD_INT 1
70781: PUSH
70782: EMPTY
70783: LIST
70784: LIST
70785: PUSH
70786: LD_INT 4
70788: NEG
70789: PUSH
70790: LD_INT 0
70792: PUSH
70793: EMPTY
70794: LIST
70795: LIST
70796: PUSH
70797: LD_INT 4
70799: NEG
70800: PUSH
70801: LD_INT 1
70803: NEG
70804: PUSH
70805: EMPTY
70806: LIST
70807: LIST
70808: PUSH
70809: LD_INT 4
70811: NEG
70812: PUSH
70813: LD_INT 2
70815: NEG
70816: PUSH
70817: EMPTY
70818: LIST
70819: LIST
70820: PUSH
70821: LD_INT 2
70823: NEG
70824: PUSH
70825: LD_INT 2
70827: PUSH
70828: EMPTY
70829: LIST
70830: LIST
70831: PUSH
70832: LD_INT 4
70834: NEG
70835: PUSH
70836: LD_INT 4
70838: NEG
70839: PUSH
70840: EMPTY
70841: LIST
70842: LIST
70843: PUSH
70844: LD_INT 4
70846: NEG
70847: PUSH
70848: LD_INT 5
70850: NEG
70851: PUSH
70852: EMPTY
70853: LIST
70854: LIST
70855: PUSH
70856: LD_INT 3
70858: NEG
70859: PUSH
70860: LD_INT 4
70862: NEG
70863: PUSH
70864: EMPTY
70865: LIST
70866: LIST
70867: PUSH
70868: LD_INT 3
70870: NEG
70871: PUSH
70872: LD_INT 3
70874: NEG
70875: PUSH
70876: EMPTY
70877: LIST
70878: LIST
70879: PUSH
70880: LD_INT 4
70882: NEG
70883: PUSH
70884: LD_INT 3
70886: NEG
70887: PUSH
70888: EMPTY
70889: LIST
70890: LIST
70891: PUSH
70892: LD_INT 5
70894: NEG
70895: PUSH
70896: LD_INT 4
70898: NEG
70899: PUSH
70900: EMPTY
70901: LIST
70902: LIST
70903: PUSH
70904: LD_INT 5
70906: NEG
70907: PUSH
70908: LD_INT 5
70910: NEG
70911: PUSH
70912: EMPTY
70913: LIST
70914: LIST
70915: PUSH
70916: LD_INT 3
70918: NEG
70919: PUSH
70920: LD_INT 5
70922: NEG
70923: PUSH
70924: EMPTY
70925: LIST
70926: LIST
70927: PUSH
70928: LD_INT 5
70930: NEG
70931: PUSH
70932: LD_INT 3
70934: NEG
70935: PUSH
70936: EMPTY
70937: LIST
70938: LIST
70939: PUSH
70940: EMPTY
70941: LIST
70942: LIST
70943: LIST
70944: LIST
70945: LIST
70946: LIST
70947: LIST
70948: LIST
70949: LIST
70950: LIST
70951: LIST
70952: LIST
70953: LIST
70954: LIST
70955: LIST
70956: LIST
70957: LIST
70958: LIST
70959: LIST
70960: LIST
70961: LIST
70962: LIST
70963: LIST
70964: LIST
70965: LIST
70966: LIST
70967: LIST
70968: LIST
70969: LIST
70970: LIST
70971: LIST
70972: LIST
70973: LIST
70974: LIST
70975: LIST
70976: LIST
70977: LIST
70978: LIST
70979: LIST
70980: LIST
70981: LIST
70982: LIST
70983: LIST
70984: LIST
70985: LIST
70986: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
70987: LD_ADDR_VAR 0 30
70991: PUSH
70992: LD_INT 4
70994: PUSH
70995: LD_INT 4
70997: PUSH
70998: EMPTY
70999: LIST
71000: LIST
71001: PUSH
71002: LD_INT 4
71004: PUSH
71005: LD_INT 3
71007: PUSH
71008: EMPTY
71009: LIST
71010: LIST
71011: PUSH
71012: LD_INT 5
71014: PUSH
71015: LD_INT 4
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: PUSH
71022: LD_INT 5
71024: PUSH
71025: LD_INT 5
71027: PUSH
71028: EMPTY
71029: LIST
71030: LIST
71031: PUSH
71032: LD_INT 4
71034: PUSH
71035: LD_INT 5
71037: PUSH
71038: EMPTY
71039: LIST
71040: LIST
71041: PUSH
71042: LD_INT 3
71044: PUSH
71045: LD_INT 4
71047: PUSH
71048: EMPTY
71049: LIST
71050: LIST
71051: PUSH
71052: LD_INT 3
71054: PUSH
71055: LD_INT 3
71057: PUSH
71058: EMPTY
71059: LIST
71060: LIST
71061: PUSH
71062: LD_INT 5
71064: PUSH
71065: LD_INT 3
71067: PUSH
71068: EMPTY
71069: LIST
71070: LIST
71071: PUSH
71072: LD_INT 3
71074: PUSH
71075: LD_INT 5
71077: PUSH
71078: EMPTY
71079: LIST
71080: LIST
71081: PUSH
71082: LD_INT 0
71084: PUSH
71085: LD_INT 3
71087: PUSH
71088: EMPTY
71089: LIST
71090: LIST
71091: PUSH
71092: LD_INT 0
71094: PUSH
71095: LD_INT 2
71097: PUSH
71098: EMPTY
71099: LIST
71100: LIST
71101: PUSH
71102: LD_INT 1
71104: PUSH
71105: LD_INT 3
71107: PUSH
71108: EMPTY
71109: LIST
71110: LIST
71111: PUSH
71112: LD_INT 1
71114: PUSH
71115: LD_INT 4
71117: PUSH
71118: EMPTY
71119: LIST
71120: LIST
71121: PUSH
71122: LD_INT 0
71124: PUSH
71125: LD_INT 4
71127: PUSH
71128: EMPTY
71129: LIST
71130: LIST
71131: PUSH
71132: LD_INT 1
71134: NEG
71135: PUSH
71136: LD_INT 3
71138: PUSH
71139: EMPTY
71140: LIST
71141: LIST
71142: PUSH
71143: LD_INT 1
71145: NEG
71146: PUSH
71147: LD_INT 2
71149: PUSH
71150: EMPTY
71151: LIST
71152: LIST
71153: PUSH
71154: LD_INT 2
71156: PUSH
71157: LD_INT 4
71159: PUSH
71160: EMPTY
71161: LIST
71162: LIST
71163: PUSH
71164: LD_INT 2
71166: NEG
71167: PUSH
71168: LD_INT 2
71170: PUSH
71171: EMPTY
71172: LIST
71173: LIST
71174: PUSH
71175: LD_INT 4
71177: NEG
71178: PUSH
71179: LD_INT 0
71181: PUSH
71182: EMPTY
71183: LIST
71184: LIST
71185: PUSH
71186: LD_INT 4
71188: NEG
71189: PUSH
71190: LD_INT 1
71192: NEG
71193: PUSH
71194: EMPTY
71195: LIST
71196: LIST
71197: PUSH
71198: LD_INT 3
71200: NEG
71201: PUSH
71202: LD_INT 0
71204: PUSH
71205: EMPTY
71206: LIST
71207: LIST
71208: PUSH
71209: LD_INT 3
71211: NEG
71212: PUSH
71213: LD_INT 1
71215: PUSH
71216: EMPTY
71217: LIST
71218: LIST
71219: PUSH
71220: LD_INT 4
71222: NEG
71223: PUSH
71224: LD_INT 1
71226: PUSH
71227: EMPTY
71228: LIST
71229: LIST
71230: PUSH
71231: LD_INT 5
71233: NEG
71234: PUSH
71235: LD_INT 0
71237: PUSH
71238: EMPTY
71239: LIST
71240: LIST
71241: PUSH
71242: LD_INT 5
71244: NEG
71245: PUSH
71246: LD_INT 1
71248: NEG
71249: PUSH
71250: EMPTY
71251: LIST
71252: LIST
71253: PUSH
71254: LD_INT 5
71256: NEG
71257: PUSH
71258: LD_INT 2
71260: NEG
71261: PUSH
71262: EMPTY
71263: LIST
71264: LIST
71265: PUSH
71266: LD_INT 3
71268: NEG
71269: PUSH
71270: LD_INT 2
71272: PUSH
71273: EMPTY
71274: LIST
71275: LIST
71276: PUSH
71277: LD_INT 3
71279: NEG
71280: PUSH
71281: LD_INT 3
71283: NEG
71284: PUSH
71285: EMPTY
71286: LIST
71287: LIST
71288: PUSH
71289: LD_INT 3
71291: NEG
71292: PUSH
71293: LD_INT 4
71295: NEG
71296: PUSH
71297: EMPTY
71298: LIST
71299: LIST
71300: PUSH
71301: LD_INT 2
71303: NEG
71304: PUSH
71305: LD_INT 3
71307: NEG
71308: PUSH
71309: EMPTY
71310: LIST
71311: LIST
71312: PUSH
71313: LD_INT 2
71315: NEG
71316: PUSH
71317: LD_INT 2
71319: NEG
71320: PUSH
71321: EMPTY
71322: LIST
71323: LIST
71324: PUSH
71325: LD_INT 3
71327: NEG
71328: PUSH
71329: LD_INT 2
71331: NEG
71332: PUSH
71333: EMPTY
71334: LIST
71335: LIST
71336: PUSH
71337: LD_INT 4
71339: NEG
71340: PUSH
71341: LD_INT 3
71343: NEG
71344: PUSH
71345: EMPTY
71346: LIST
71347: LIST
71348: PUSH
71349: LD_INT 4
71351: NEG
71352: PUSH
71353: LD_INT 4
71355: NEG
71356: PUSH
71357: EMPTY
71358: LIST
71359: LIST
71360: PUSH
71361: LD_INT 2
71363: NEG
71364: PUSH
71365: LD_INT 4
71367: NEG
71368: PUSH
71369: EMPTY
71370: LIST
71371: LIST
71372: PUSH
71373: LD_INT 4
71375: NEG
71376: PUSH
71377: LD_INT 2
71379: NEG
71380: PUSH
71381: EMPTY
71382: LIST
71383: LIST
71384: PUSH
71385: LD_INT 0
71387: PUSH
71388: LD_INT 4
71390: NEG
71391: PUSH
71392: EMPTY
71393: LIST
71394: LIST
71395: PUSH
71396: LD_INT 0
71398: PUSH
71399: LD_INT 5
71401: NEG
71402: PUSH
71403: EMPTY
71404: LIST
71405: LIST
71406: PUSH
71407: LD_INT 1
71409: PUSH
71410: LD_INT 4
71412: NEG
71413: PUSH
71414: EMPTY
71415: LIST
71416: LIST
71417: PUSH
71418: LD_INT 1
71420: PUSH
71421: LD_INT 3
71423: NEG
71424: PUSH
71425: EMPTY
71426: LIST
71427: LIST
71428: PUSH
71429: LD_INT 0
71431: PUSH
71432: LD_INT 3
71434: NEG
71435: PUSH
71436: EMPTY
71437: LIST
71438: LIST
71439: PUSH
71440: LD_INT 1
71442: NEG
71443: PUSH
71444: LD_INT 4
71446: NEG
71447: PUSH
71448: EMPTY
71449: LIST
71450: LIST
71451: PUSH
71452: LD_INT 1
71454: NEG
71455: PUSH
71456: LD_INT 5
71458: NEG
71459: PUSH
71460: EMPTY
71461: LIST
71462: LIST
71463: PUSH
71464: LD_INT 2
71466: PUSH
71467: LD_INT 3
71469: NEG
71470: PUSH
71471: EMPTY
71472: LIST
71473: LIST
71474: PUSH
71475: LD_INT 2
71477: NEG
71478: PUSH
71479: LD_INT 5
71481: NEG
71482: PUSH
71483: EMPTY
71484: LIST
71485: LIST
71486: PUSH
71487: EMPTY
71488: LIST
71489: LIST
71490: LIST
71491: LIST
71492: LIST
71493: LIST
71494: LIST
71495: LIST
71496: LIST
71497: LIST
71498: LIST
71499: LIST
71500: LIST
71501: LIST
71502: LIST
71503: LIST
71504: LIST
71505: LIST
71506: LIST
71507: LIST
71508: LIST
71509: LIST
71510: LIST
71511: LIST
71512: LIST
71513: LIST
71514: LIST
71515: LIST
71516: LIST
71517: LIST
71518: LIST
71519: LIST
71520: LIST
71521: LIST
71522: LIST
71523: LIST
71524: LIST
71525: LIST
71526: LIST
71527: LIST
71528: LIST
71529: LIST
71530: LIST
71531: LIST
71532: LIST
71533: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
71534: LD_ADDR_VAR 0 31
71538: PUSH
71539: LD_INT 0
71541: PUSH
71542: LD_INT 4
71544: PUSH
71545: EMPTY
71546: LIST
71547: LIST
71548: PUSH
71549: LD_INT 0
71551: PUSH
71552: LD_INT 3
71554: PUSH
71555: EMPTY
71556: LIST
71557: LIST
71558: PUSH
71559: LD_INT 1
71561: PUSH
71562: LD_INT 4
71564: PUSH
71565: EMPTY
71566: LIST
71567: LIST
71568: PUSH
71569: LD_INT 1
71571: PUSH
71572: LD_INT 5
71574: PUSH
71575: EMPTY
71576: LIST
71577: LIST
71578: PUSH
71579: LD_INT 0
71581: PUSH
71582: LD_INT 5
71584: PUSH
71585: EMPTY
71586: LIST
71587: LIST
71588: PUSH
71589: LD_INT 1
71591: NEG
71592: PUSH
71593: LD_INT 4
71595: PUSH
71596: EMPTY
71597: LIST
71598: LIST
71599: PUSH
71600: LD_INT 1
71602: NEG
71603: PUSH
71604: LD_INT 3
71606: PUSH
71607: EMPTY
71608: LIST
71609: LIST
71610: PUSH
71611: LD_INT 2
71613: PUSH
71614: LD_INT 5
71616: PUSH
71617: EMPTY
71618: LIST
71619: LIST
71620: PUSH
71621: LD_INT 2
71623: NEG
71624: PUSH
71625: LD_INT 3
71627: PUSH
71628: EMPTY
71629: LIST
71630: LIST
71631: PUSH
71632: LD_INT 3
71634: NEG
71635: PUSH
71636: LD_INT 0
71638: PUSH
71639: EMPTY
71640: LIST
71641: LIST
71642: PUSH
71643: LD_INT 3
71645: NEG
71646: PUSH
71647: LD_INT 1
71649: NEG
71650: PUSH
71651: EMPTY
71652: LIST
71653: LIST
71654: PUSH
71655: LD_INT 2
71657: NEG
71658: PUSH
71659: LD_INT 0
71661: PUSH
71662: EMPTY
71663: LIST
71664: LIST
71665: PUSH
71666: LD_INT 2
71668: NEG
71669: PUSH
71670: LD_INT 1
71672: PUSH
71673: EMPTY
71674: LIST
71675: LIST
71676: PUSH
71677: LD_INT 3
71679: NEG
71680: PUSH
71681: LD_INT 1
71683: PUSH
71684: EMPTY
71685: LIST
71686: LIST
71687: PUSH
71688: LD_INT 4
71690: NEG
71691: PUSH
71692: LD_INT 0
71694: PUSH
71695: EMPTY
71696: LIST
71697: LIST
71698: PUSH
71699: LD_INT 4
71701: NEG
71702: PUSH
71703: LD_INT 1
71705: NEG
71706: PUSH
71707: EMPTY
71708: LIST
71709: LIST
71710: PUSH
71711: LD_INT 4
71713: NEG
71714: PUSH
71715: LD_INT 2
71717: NEG
71718: PUSH
71719: EMPTY
71720: LIST
71721: LIST
71722: PUSH
71723: LD_INT 2
71725: NEG
71726: PUSH
71727: LD_INT 2
71729: PUSH
71730: EMPTY
71731: LIST
71732: LIST
71733: PUSH
71734: LD_INT 4
71736: NEG
71737: PUSH
71738: LD_INT 4
71740: NEG
71741: PUSH
71742: EMPTY
71743: LIST
71744: LIST
71745: PUSH
71746: LD_INT 4
71748: NEG
71749: PUSH
71750: LD_INT 5
71752: NEG
71753: PUSH
71754: EMPTY
71755: LIST
71756: LIST
71757: PUSH
71758: LD_INT 3
71760: NEG
71761: PUSH
71762: LD_INT 4
71764: NEG
71765: PUSH
71766: EMPTY
71767: LIST
71768: LIST
71769: PUSH
71770: LD_INT 3
71772: NEG
71773: PUSH
71774: LD_INT 3
71776: NEG
71777: PUSH
71778: EMPTY
71779: LIST
71780: LIST
71781: PUSH
71782: LD_INT 4
71784: NEG
71785: PUSH
71786: LD_INT 3
71788: NEG
71789: PUSH
71790: EMPTY
71791: LIST
71792: LIST
71793: PUSH
71794: LD_INT 5
71796: NEG
71797: PUSH
71798: LD_INT 4
71800: NEG
71801: PUSH
71802: EMPTY
71803: LIST
71804: LIST
71805: PUSH
71806: LD_INT 5
71808: NEG
71809: PUSH
71810: LD_INT 5
71812: NEG
71813: PUSH
71814: EMPTY
71815: LIST
71816: LIST
71817: PUSH
71818: LD_INT 3
71820: NEG
71821: PUSH
71822: LD_INT 5
71824: NEG
71825: PUSH
71826: EMPTY
71827: LIST
71828: LIST
71829: PUSH
71830: LD_INT 5
71832: NEG
71833: PUSH
71834: LD_INT 3
71836: NEG
71837: PUSH
71838: EMPTY
71839: LIST
71840: LIST
71841: PUSH
71842: LD_INT 0
71844: PUSH
71845: LD_INT 3
71847: NEG
71848: PUSH
71849: EMPTY
71850: LIST
71851: LIST
71852: PUSH
71853: LD_INT 0
71855: PUSH
71856: LD_INT 4
71858: NEG
71859: PUSH
71860: EMPTY
71861: LIST
71862: LIST
71863: PUSH
71864: LD_INT 1
71866: PUSH
71867: LD_INT 3
71869: NEG
71870: PUSH
71871: EMPTY
71872: LIST
71873: LIST
71874: PUSH
71875: LD_INT 1
71877: PUSH
71878: LD_INT 2
71880: NEG
71881: PUSH
71882: EMPTY
71883: LIST
71884: LIST
71885: PUSH
71886: LD_INT 0
71888: PUSH
71889: LD_INT 2
71891: NEG
71892: PUSH
71893: EMPTY
71894: LIST
71895: LIST
71896: PUSH
71897: LD_INT 1
71899: NEG
71900: PUSH
71901: LD_INT 3
71903: NEG
71904: PUSH
71905: EMPTY
71906: LIST
71907: LIST
71908: PUSH
71909: LD_INT 1
71911: NEG
71912: PUSH
71913: LD_INT 4
71915: NEG
71916: PUSH
71917: EMPTY
71918: LIST
71919: LIST
71920: PUSH
71921: LD_INT 2
71923: PUSH
71924: LD_INT 2
71926: NEG
71927: PUSH
71928: EMPTY
71929: LIST
71930: LIST
71931: PUSH
71932: LD_INT 2
71934: NEG
71935: PUSH
71936: LD_INT 4
71938: NEG
71939: PUSH
71940: EMPTY
71941: LIST
71942: LIST
71943: PUSH
71944: LD_INT 4
71946: PUSH
71947: LD_INT 0
71949: PUSH
71950: EMPTY
71951: LIST
71952: LIST
71953: PUSH
71954: LD_INT 4
71956: PUSH
71957: LD_INT 1
71959: NEG
71960: PUSH
71961: EMPTY
71962: LIST
71963: LIST
71964: PUSH
71965: LD_INT 5
71967: PUSH
71968: LD_INT 0
71970: PUSH
71971: EMPTY
71972: LIST
71973: LIST
71974: PUSH
71975: LD_INT 5
71977: PUSH
71978: LD_INT 1
71980: PUSH
71981: EMPTY
71982: LIST
71983: LIST
71984: PUSH
71985: LD_INT 4
71987: PUSH
71988: LD_INT 1
71990: PUSH
71991: EMPTY
71992: LIST
71993: LIST
71994: PUSH
71995: LD_INT 3
71997: PUSH
71998: LD_INT 0
72000: PUSH
72001: EMPTY
72002: LIST
72003: LIST
72004: PUSH
72005: LD_INT 3
72007: PUSH
72008: LD_INT 1
72010: NEG
72011: PUSH
72012: EMPTY
72013: LIST
72014: LIST
72015: PUSH
72016: LD_INT 3
72018: PUSH
72019: LD_INT 2
72021: NEG
72022: PUSH
72023: EMPTY
72024: LIST
72025: LIST
72026: PUSH
72027: LD_INT 5
72029: PUSH
72030: LD_INT 2
72032: PUSH
72033: EMPTY
72034: LIST
72035: LIST
72036: PUSH
72037: EMPTY
72038: LIST
72039: LIST
72040: LIST
72041: LIST
72042: LIST
72043: LIST
72044: LIST
72045: LIST
72046: LIST
72047: LIST
72048: LIST
72049: LIST
72050: LIST
72051: LIST
72052: LIST
72053: LIST
72054: LIST
72055: LIST
72056: LIST
72057: LIST
72058: LIST
72059: LIST
72060: LIST
72061: LIST
72062: LIST
72063: LIST
72064: LIST
72065: LIST
72066: LIST
72067: LIST
72068: LIST
72069: LIST
72070: LIST
72071: LIST
72072: LIST
72073: LIST
72074: LIST
72075: LIST
72076: LIST
72077: LIST
72078: LIST
72079: LIST
72080: LIST
72081: LIST
72082: LIST
72083: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
72084: LD_ADDR_VAR 0 32
72088: PUSH
72089: LD_INT 4
72091: NEG
72092: PUSH
72093: LD_INT 0
72095: PUSH
72096: EMPTY
72097: LIST
72098: LIST
72099: PUSH
72100: LD_INT 4
72102: NEG
72103: PUSH
72104: LD_INT 1
72106: NEG
72107: PUSH
72108: EMPTY
72109: LIST
72110: LIST
72111: PUSH
72112: LD_INT 3
72114: NEG
72115: PUSH
72116: LD_INT 0
72118: PUSH
72119: EMPTY
72120: LIST
72121: LIST
72122: PUSH
72123: LD_INT 3
72125: NEG
72126: PUSH
72127: LD_INT 1
72129: PUSH
72130: EMPTY
72131: LIST
72132: LIST
72133: PUSH
72134: LD_INT 4
72136: NEG
72137: PUSH
72138: LD_INT 1
72140: PUSH
72141: EMPTY
72142: LIST
72143: LIST
72144: PUSH
72145: LD_INT 5
72147: NEG
72148: PUSH
72149: LD_INT 0
72151: PUSH
72152: EMPTY
72153: LIST
72154: LIST
72155: PUSH
72156: LD_INT 5
72158: NEG
72159: PUSH
72160: LD_INT 1
72162: NEG
72163: PUSH
72164: EMPTY
72165: LIST
72166: LIST
72167: PUSH
72168: LD_INT 5
72170: NEG
72171: PUSH
72172: LD_INT 2
72174: NEG
72175: PUSH
72176: EMPTY
72177: LIST
72178: LIST
72179: PUSH
72180: LD_INT 3
72182: NEG
72183: PUSH
72184: LD_INT 2
72186: PUSH
72187: EMPTY
72188: LIST
72189: LIST
72190: PUSH
72191: LD_INT 3
72193: NEG
72194: PUSH
72195: LD_INT 3
72197: NEG
72198: PUSH
72199: EMPTY
72200: LIST
72201: LIST
72202: PUSH
72203: LD_INT 3
72205: NEG
72206: PUSH
72207: LD_INT 4
72209: NEG
72210: PUSH
72211: EMPTY
72212: LIST
72213: LIST
72214: PUSH
72215: LD_INT 2
72217: NEG
72218: PUSH
72219: LD_INT 3
72221: NEG
72222: PUSH
72223: EMPTY
72224: LIST
72225: LIST
72226: PUSH
72227: LD_INT 2
72229: NEG
72230: PUSH
72231: LD_INT 2
72233: NEG
72234: PUSH
72235: EMPTY
72236: LIST
72237: LIST
72238: PUSH
72239: LD_INT 3
72241: NEG
72242: PUSH
72243: LD_INT 2
72245: NEG
72246: PUSH
72247: EMPTY
72248: LIST
72249: LIST
72250: PUSH
72251: LD_INT 4
72253: NEG
72254: PUSH
72255: LD_INT 3
72257: NEG
72258: PUSH
72259: EMPTY
72260: LIST
72261: LIST
72262: PUSH
72263: LD_INT 4
72265: NEG
72266: PUSH
72267: LD_INT 4
72269: NEG
72270: PUSH
72271: EMPTY
72272: LIST
72273: LIST
72274: PUSH
72275: LD_INT 2
72277: NEG
72278: PUSH
72279: LD_INT 4
72281: NEG
72282: PUSH
72283: EMPTY
72284: LIST
72285: LIST
72286: PUSH
72287: LD_INT 4
72289: NEG
72290: PUSH
72291: LD_INT 2
72293: NEG
72294: PUSH
72295: EMPTY
72296: LIST
72297: LIST
72298: PUSH
72299: LD_INT 0
72301: PUSH
72302: LD_INT 4
72304: NEG
72305: PUSH
72306: EMPTY
72307: LIST
72308: LIST
72309: PUSH
72310: LD_INT 0
72312: PUSH
72313: LD_INT 5
72315: NEG
72316: PUSH
72317: EMPTY
72318: LIST
72319: LIST
72320: PUSH
72321: LD_INT 1
72323: PUSH
72324: LD_INT 4
72326: NEG
72327: PUSH
72328: EMPTY
72329: LIST
72330: LIST
72331: PUSH
72332: LD_INT 1
72334: PUSH
72335: LD_INT 3
72337: NEG
72338: PUSH
72339: EMPTY
72340: LIST
72341: LIST
72342: PUSH
72343: LD_INT 0
72345: PUSH
72346: LD_INT 3
72348: NEG
72349: PUSH
72350: EMPTY
72351: LIST
72352: LIST
72353: PUSH
72354: LD_INT 1
72356: NEG
72357: PUSH
72358: LD_INT 4
72360: NEG
72361: PUSH
72362: EMPTY
72363: LIST
72364: LIST
72365: PUSH
72366: LD_INT 1
72368: NEG
72369: PUSH
72370: LD_INT 5
72372: NEG
72373: PUSH
72374: EMPTY
72375: LIST
72376: LIST
72377: PUSH
72378: LD_INT 2
72380: PUSH
72381: LD_INT 3
72383: NEG
72384: PUSH
72385: EMPTY
72386: LIST
72387: LIST
72388: PUSH
72389: LD_INT 2
72391: NEG
72392: PUSH
72393: LD_INT 5
72395: NEG
72396: PUSH
72397: EMPTY
72398: LIST
72399: LIST
72400: PUSH
72401: LD_INT 3
72403: PUSH
72404: LD_INT 0
72406: PUSH
72407: EMPTY
72408: LIST
72409: LIST
72410: PUSH
72411: LD_INT 3
72413: PUSH
72414: LD_INT 1
72416: NEG
72417: PUSH
72418: EMPTY
72419: LIST
72420: LIST
72421: PUSH
72422: LD_INT 4
72424: PUSH
72425: LD_INT 0
72427: PUSH
72428: EMPTY
72429: LIST
72430: LIST
72431: PUSH
72432: LD_INT 4
72434: PUSH
72435: LD_INT 1
72437: PUSH
72438: EMPTY
72439: LIST
72440: LIST
72441: PUSH
72442: LD_INT 3
72444: PUSH
72445: LD_INT 1
72447: PUSH
72448: EMPTY
72449: LIST
72450: LIST
72451: PUSH
72452: LD_INT 2
72454: PUSH
72455: LD_INT 0
72457: PUSH
72458: EMPTY
72459: LIST
72460: LIST
72461: PUSH
72462: LD_INT 2
72464: PUSH
72465: LD_INT 1
72467: NEG
72468: PUSH
72469: EMPTY
72470: LIST
72471: LIST
72472: PUSH
72473: LD_INT 2
72475: PUSH
72476: LD_INT 2
72478: NEG
72479: PUSH
72480: EMPTY
72481: LIST
72482: LIST
72483: PUSH
72484: LD_INT 4
72486: PUSH
72487: LD_INT 2
72489: PUSH
72490: EMPTY
72491: LIST
72492: LIST
72493: PUSH
72494: LD_INT 4
72496: PUSH
72497: LD_INT 4
72499: PUSH
72500: EMPTY
72501: LIST
72502: LIST
72503: PUSH
72504: LD_INT 4
72506: PUSH
72507: LD_INT 3
72509: PUSH
72510: EMPTY
72511: LIST
72512: LIST
72513: PUSH
72514: LD_INT 5
72516: PUSH
72517: LD_INT 4
72519: PUSH
72520: EMPTY
72521: LIST
72522: LIST
72523: PUSH
72524: LD_INT 5
72526: PUSH
72527: LD_INT 5
72529: PUSH
72530: EMPTY
72531: LIST
72532: LIST
72533: PUSH
72534: LD_INT 4
72536: PUSH
72537: LD_INT 5
72539: PUSH
72540: EMPTY
72541: LIST
72542: LIST
72543: PUSH
72544: LD_INT 3
72546: PUSH
72547: LD_INT 4
72549: PUSH
72550: EMPTY
72551: LIST
72552: LIST
72553: PUSH
72554: LD_INT 3
72556: PUSH
72557: LD_INT 3
72559: PUSH
72560: EMPTY
72561: LIST
72562: LIST
72563: PUSH
72564: LD_INT 5
72566: PUSH
72567: LD_INT 3
72569: PUSH
72570: EMPTY
72571: LIST
72572: LIST
72573: PUSH
72574: LD_INT 3
72576: PUSH
72577: LD_INT 5
72579: PUSH
72580: EMPTY
72581: LIST
72582: LIST
72583: PUSH
72584: EMPTY
72585: LIST
72586: LIST
72587: LIST
72588: LIST
72589: LIST
72590: LIST
72591: LIST
72592: LIST
72593: LIST
72594: LIST
72595: LIST
72596: LIST
72597: LIST
72598: LIST
72599: LIST
72600: LIST
72601: LIST
72602: LIST
72603: LIST
72604: LIST
72605: LIST
72606: LIST
72607: LIST
72608: LIST
72609: LIST
72610: LIST
72611: LIST
72612: LIST
72613: LIST
72614: LIST
72615: LIST
72616: LIST
72617: LIST
72618: LIST
72619: LIST
72620: LIST
72621: LIST
72622: LIST
72623: LIST
72624: LIST
72625: LIST
72626: LIST
72627: LIST
72628: LIST
72629: LIST
72630: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
72631: LD_ADDR_VAR 0 33
72635: PUSH
72636: LD_INT 4
72638: NEG
72639: PUSH
72640: LD_INT 4
72642: NEG
72643: PUSH
72644: EMPTY
72645: LIST
72646: LIST
72647: PUSH
72648: LD_INT 4
72650: NEG
72651: PUSH
72652: LD_INT 5
72654: NEG
72655: PUSH
72656: EMPTY
72657: LIST
72658: LIST
72659: PUSH
72660: LD_INT 3
72662: NEG
72663: PUSH
72664: LD_INT 4
72666: NEG
72667: PUSH
72668: EMPTY
72669: LIST
72670: LIST
72671: PUSH
72672: LD_INT 3
72674: NEG
72675: PUSH
72676: LD_INT 3
72678: NEG
72679: PUSH
72680: EMPTY
72681: LIST
72682: LIST
72683: PUSH
72684: LD_INT 4
72686: NEG
72687: PUSH
72688: LD_INT 3
72690: NEG
72691: PUSH
72692: EMPTY
72693: LIST
72694: LIST
72695: PUSH
72696: LD_INT 5
72698: NEG
72699: PUSH
72700: LD_INT 4
72702: NEG
72703: PUSH
72704: EMPTY
72705: LIST
72706: LIST
72707: PUSH
72708: LD_INT 5
72710: NEG
72711: PUSH
72712: LD_INT 5
72714: NEG
72715: PUSH
72716: EMPTY
72717: LIST
72718: LIST
72719: PUSH
72720: LD_INT 3
72722: NEG
72723: PUSH
72724: LD_INT 5
72726: NEG
72727: PUSH
72728: EMPTY
72729: LIST
72730: LIST
72731: PUSH
72732: LD_INT 5
72734: NEG
72735: PUSH
72736: LD_INT 3
72738: NEG
72739: PUSH
72740: EMPTY
72741: LIST
72742: LIST
72743: PUSH
72744: LD_INT 0
72746: PUSH
72747: LD_INT 3
72749: NEG
72750: PUSH
72751: EMPTY
72752: LIST
72753: LIST
72754: PUSH
72755: LD_INT 0
72757: PUSH
72758: LD_INT 4
72760: NEG
72761: PUSH
72762: EMPTY
72763: LIST
72764: LIST
72765: PUSH
72766: LD_INT 1
72768: PUSH
72769: LD_INT 3
72771: NEG
72772: PUSH
72773: EMPTY
72774: LIST
72775: LIST
72776: PUSH
72777: LD_INT 1
72779: PUSH
72780: LD_INT 2
72782: NEG
72783: PUSH
72784: EMPTY
72785: LIST
72786: LIST
72787: PUSH
72788: LD_INT 0
72790: PUSH
72791: LD_INT 2
72793: NEG
72794: PUSH
72795: EMPTY
72796: LIST
72797: LIST
72798: PUSH
72799: LD_INT 1
72801: NEG
72802: PUSH
72803: LD_INT 3
72805: NEG
72806: PUSH
72807: EMPTY
72808: LIST
72809: LIST
72810: PUSH
72811: LD_INT 1
72813: NEG
72814: PUSH
72815: LD_INT 4
72817: NEG
72818: PUSH
72819: EMPTY
72820: LIST
72821: LIST
72822: PUSH
72823: LD_INT 2
72825: PUSH
72826: LD_INT 2
72828: NEG
72829: PUSH
72830: EMPTY
72831: LIST
72832: LIST
72833: PUSH
72834: LD_INT 2
72836: NEG
72837: PUSH
72838: LD_INT 4
72840: NEG
72841: PUSH
72842: EMPTY
72843: LIST
72844: LIST
72845: PUSH
72846: LD_INT 4
72848: PUSH
72849: LD_INT 0
72851: PUSH
72852: EMPTY
72853: LIST
72854: LIST
72855: PUSH
72856: LD_INT 4
72858: PUSH
72859: LD_INT 1
72861: NEG
72862: PUSH
72863: EMPTY
72864: LIST
72865: LIST
72866: PUSH
72867: LD_INT 5
72869: PUSH
72870: LD_INT 0
72872: PUSH
72873: EMPTY
72874: LIST
72875: LIST
72876: PUSH
72877: LD_INT 5
72879: PUSH
72880: LD_INT 1
72882: PUSH
72883: EMPTY
72884: LIST
72885: LIST
72886: PUSH
72887: LD_INT 4
72889: PUSH
72890: LD_INT 1
72892: PUSH
72893: EMPTY
72894: LIST
72895: LIST
72896: PUSH
72897: LD_INT 3
72899: PUSH
72900: LD_INT 0
72902: PUSH
72903: EMPTY
72904: LIST
72905: LIST
72906: PUSH
72907: LD_INT 3
72909: PUSH
72910: LD_INT 1
72912: NEG
72913: PUSH
72914: EMPTY
72915: LIST
72916: LIST
72917: PUSH
72918: LD_INT 3
72920: PUSH
72921: LD_INT 2
72923: NEG
72924: PUSH
72925: EMPTY
72926: LIST
72927: LIST
72928: PUSH
72929: LD_INT 5
72931: PUSH
72932: LD_INT 2
72934: PUSH
72935: EMPTY
72936: LIST
72937: LIST
72938: PUSH
72939: LD_INT 3
72941: PUSH
72942: LD_INT 3
72944: PUSH
72945: EMPTY
72946: LIST
72947: LIST
72948: PUSH
72949: LD_INT 3
72951: PUSH
72952: LD_INT 2
72954: PUSH
72955: EMPTY
72956: LIST
72957: LIST
72958: PUSH
72959: LD_INT 4
72961: PUSH
72962: LD_INT 3
72964: PUSH
72965: EMPTY
72966: LIST
72967: LIST
72968: PUSH
72969: LD_INT 4
72971: PUSH
72972: LD_INT 4
72974: PUSH
72975: EMPTY
72976: LIST
72977: LIST
72978: PUSH
72979: LD_INT 3
72981: PUSH
72982: LD_INT 4
72984: PUSH
72985: EMPTY
72986: LIST
72987: LIST
72988: PUSH
72989: LD_INT 2
72991: PUSH
72992: LD_INT 3
72994: PUSH
72995: EMPTY
72996: LIST
72997: LIST
72998: PUSH
72999: LD_INT 2
73001: PUSH
73002: LD_INT 2
73004: PUSH
73005: EMPTY
73006: LIST
73007: LIST
73008: PUSH
73009: LD_INT 4
73011: PUSH
73012: LD_INT 2
73014: PUSH
73015: EMPTY
73016: LIST
73017: LIST
73018: PUSH
73019: LD_INT 2
73021: PUSH
73022: LD_INT 4
73024: PUSH
73025: EMPTY
73026: LIST
73027: LIST
73028: PUSH
73029: LD_INT 0
73031: PUSH
73032: LD_INT 4
73034: PUSH
73035: EMPTY
73036: LIST
73037: LIST
73038: PUSH
73039: LD_INT 0
73041: PUSH
73042: LD_INT 3
73044: PUSH
73045: EMPTY
73046: LIST
73047: LIST
73048: PUSH
73049: LD_INT 1
73051: PUSH
73052: LD_INT 4
73054: PUSH
73055: EMPTY
73056: LIST
73057: LIST
73058: PUSH
73059: LD_INT 1
73061: PUSH
73062: LD_INT 5
73064: PUSH
73065: EMPTY
73066: LIST
73067: LIST
73068: PUSH
73069: LD_INT 0
73071: PUSH
73072: LD_INT 5
73074: PUSH
73075: EMPTY
73076: LIST
73077: LIST
73078: PUSH
73079: LD_INT 1
73081: NEG
73082: PUSH
73083: LD_INT 4
73085: PUSH
73086: EMPTY
73087: LIST
73088: LIST
73089: PUSH
73090: LD_INT 1
73092: NEG
73093: PUSH
73094: LD_INT 3
73096: PUSH
73097: EMPTY
73098: LIST
73099: LIST
73100: PUSH
73101: LD_INT 2
73103: PUSH
73104: LD_INT 5
73106: PUSH
73107: EMPTY
73108: LIST
73109: LIST
73110: PUSH
73111: LD_INT 2
73113: NEG
73114: PUSH
73115: LD_INT 3
73117: PUSH
73118: EMPTY
73119: LIST
73120: LIST
73121: PUSH
73122: EMPTY
73123: LIST
73124: LIST
73125: LIST
73126: LIST
73127: LIST
73128: LIST
73129: LIST
73130: LIST
73131: LIST
73132: LIST
73133: LIST
73134: LIST
73135: LIST
73136: LIST
73137: LIST
73138: LIST
73139: LIST
73140: LIST
73141: LIST
73142: LIST
73143: LIST
73144: LIST
73145: LIST
73146: LIST
73147: LIST
73148: LIST
73149: LIST
73150: LIST
73151: LIST
73152: LIST
73153: LIST
73154: LIST
73155: LIST
73156: LIST
73157: LIST
73158: LIST
73159: LIST
73160: LIST
73161: LIST
73162: LIST
73163: LIST
73164: LIST
73165: LIST
73166: LIST
73167: LIST
73168: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
73169: LD_ADDR_VAR 0 34
73173: PUSH
73174: LD_INT 0
73176: PUSH
73177: LD_INT 4
73179: NEG
73180: PUSH
73181: EMPTY
73182: LIST
73183: LIST
73184: PUSH
73185: LD_INT 0
73187: PUSH
73188: LD_INT 5
73190: NEG
73191: PUSH
73192: EMPTY
73193: LIST
73194: LIST
73195: PUSH
73196: LD_INT 1
73198: PUSH
73199: LD_INT 4
73201: NEG
73202: PUSH
73203: EMPTY
73204: LIST
73205: LIST
73206: PUSH
73207: LD_INT 1
73209: PUSH
73210: LD_INT 3
73212: NEG
73213: PUSH
73214: EMPTY
73215: LIST
73216: LIST
73217: PUSH
73218: LD_INT 0
73220: PUSH
73221: LD_INT 3
73223: NEG
73224: PUSH
73225: EMPTY
73226: LIST
73227: LIST
73228: PUSH
73229: LD_INT 1
73231: NEG
73232: PUSH
73233: LD_INT 4
73235: NEG
73236: PUSH
73237: EMPTY
73238: LIST
73239: LIST
73240: PUSH
73241: LD_INT 1
73243: NEG
73244: PUSH
73245: LD_INT 5
73247: NEG
73248: PUSH
73249: EMPTY
73250: LIST
73251: LIST
73252: PUSH
73253: LD_INT 2
73255: PUSH
73256: LD_INT 3
73258: NEG
73259: PUSH
73260: EMPTY
73261: LIST
73262: LIST
73263: PUSH
73264: LD_INT 2
73266: NEG
73267: PUSH
73268: LD_INT 5
73270: NEG
73271: PUSH
73272: EMPTY
73273: LIST
73274: LIST
73275: PUSH
73276: LD_INT 3
73278: PUSH
73279: LD_INT 0
73281: PUSH
73282: EMPTY
73283: LIST
73284: LIST
73285: PUSH
73286: LD_INT 3
73288: PUSH
73289: LD_INT 1
73291: NEG
73292: PUSH
73293: EMPTY
73294: LIST
73295: LIST
73296: PUSH
73297: LD_INT 4
73299: PUSH
73300: LD_INT 0
73302: PUSH
73303: EMPTY
73304: LIST
73305: LIST
73306: PUSH
73307: LD_INT 4
73309: PUSH
73310: LD_INT 1
73312: PUSH
73313: EMPTY
73314: LIST
73315: LIST
73316: PUSH
73317: LD_INT 3
73319: PUSH
73320: LD_INT 1
73322: PUSH
73323: EMPTY
73324: LIST
73325: LIST
73326: PUSH
73327: LD_INT 2
73329: PUSH
73330: LD_INT 0
73332: PUSH
73333: EMPTY
73334: LIST
73335: LIST
73336: PUSH
73337: LD_INT 2
73339: PUSH
73340: LD_INT 1
73342: NEG
73343: PUSH
73344: EMPTY
73345: LIST
73346: LIST
73347: PUSH
73348: LD_INT 2
73350: PUSH
73351: LD_INT 2
73353: NEG
73354: PUSH
73355: EMPTY
73356: LIST
73357: LIST
73358: PUSH
73359: LD_INT 4
73361: PUSH
73362: LD_INT 2
73364: PUSH
73365: EMPTY
73366: LIST
73367: LIST
73368: PUSH
73369: LD_INT 4
73371: PUSH
73372: LD_INT 4
73374: PUSH
73375: EMPTY
73376: LIST
73377: LIST
73378: PUSH
73379: LD_INT 4
73381: PUSH
73382: LD_INT 3
73384: PUSH
73385: EMPTY
73386: LIST
73387: LIST
73388: PUSH
73389: LD_INT 5
73391: PUSH
73392: LD_INT 4
73394: PUSH
73395: EMPTY
73396: LIST
73397: LIST
73398: PUSH
73399: LD_INT 5
73401: PUSH
73402: LD_INT 5
73404: PUSH
73405: EMPTY
73406: LIST
73407: LIST
73408: PUSH
73409: LD_INT 4
73411: PUSH
73412: LD_INT 5
73414: PUSH
73415: EMPTY
73416: LIST
73417: LIST
73418: PUSH
73419: LD_INT 3
73421: PUSH
73422: LD_INT 4
73424: PUSH
73425: EMPTY
73426: LIST
73427: LIST
73428: PUSH
73429: LD_INT 3
73431: PUSH
73432: LD_INT 3
73434: PUSH
73435: EMPTY
73436: LIST
73437: LIST
73438: PUSH
73439: LD_INT 5
73441: PUSH
73442: LD_INT 3
73444: PUSH
73445: EMPTY
73446: LIST
73447: LIST
73448: PUSH
73449: LD_INT 3
73451: PUSH
73452: LD_INT 5
73454: PUSH
73455: EMPTY
73456: LIST
73457: LIST
73458: PUSH
73459: LD_INT 0
73461: PUSH
73462: LD_INT 3
73464: PUSH
73465: EMPTY
73466: LIST
73467: LIST
73468: PUSH
73469: LD_INT 0
73471: PUSH
73472: LD_INT 2
73474: PUSH
73475: EMPTY
73476: LIST
73477: LIST
73478: PUSH
73479: LD_INT 1
73481: PUSH
73482: LD_INT 3
73484: PUSH
73485: EMPTY
73486: LIST
73487: LIST
73488: PUSH
73489: LD_INT 1
73491: PUSH
73492: LD_INT 4
73494: PUSH
73495: EMPTY
73496: LIST
73497: LIST
73498: PUSH
73499: LD_INT 0
73501: PUSH
73502: LD_INT 4
73504: PUSH
73505: EMPTY
73506: LIST
73507: LIST
73508: PUSH
73509: LD_INT 1
73511: NEG
73512: PUSH
73513: LD_INT 3
73515: PUSH
73516: EMPTY
73517: LIST
73518: LIST
73519: PUSH
73520: LD_INT 1
73522: NEG
73523: PUSH
73524: LD_INT 2
73526: PUSH
73527: EMPTY
73528: LIST
73529: LIST
73530: PUSH
73531: LD_INT 2
73533: PUSH
73534: LD_INT 4
73536: PUSH
73537: EMPTY
73538: LIST
73539: LIST
73540: PUSH
73541: LD_INT 2
73543: NEG
73544: PUSH
73545: LD_INT 2
73547: PUSH
73548: EMPTY
73549: LIST
73550: LIST
73551: PUSH
73552: LD_INT 4
73554: NEG
73555: PUSH
73556: LD_INT 0
73558: PUSH
73559: EMPTY
73560: LIST
73561: LIST
73562: PUSH
73563: LD_INT 4
73565: NEG
73566: PUSH
73567: LD_INT 1
73569: NEG
73570: PUSH
73571: EMPTY
73572: LIST
73573: LIST
73574: PUSH
73575: LD_INT 3
73577: NEG
73578: PUSH
73579: LD_INT 0
73581: PUSH
73582: EMPTY
73583: LIST
73584: LIST
73585: PUSH
73586: LD_INT 3
73588: NEG
73589: PUSH
73590: LD_INT 1
73592: PUSH
73593: EMPTY
73594: LIST
73595: LIST
73596: PUSH
73597: LD_INT 4
73599: NEG
73600: PUSH
73601: LD_INT 1
73603: PUSH
73604: EMPTY
73605: LIST
73606: LIST
73607: PUSH
73608: LD_INT 5
73610: NEG
73611: PUSH
73612: LD_INT 0
73614: PUSH
73615: EMPTY
73616: LIST
73617: LIST
73618: PUSH
73619: LD_INT 5
73621: NEG
73622: PUSH
73623: LD_INT 1
73625: NEG
73626: PUSH
73627: EMPTY
73628: LIST
73629: LIST
73630: PUSH
73631: LD_INT 5
73633: NEG
73634: PUSH
73635: LD_INT 2
73637: NEG
73638: PUSH
73639: EMPTY
73640: LIST
73641: LIST
73642: PUSH
73643: LD_INT 3
73645: NEG
73646: PUSH
73647: LD_INT 2
73649: PUSH
73650: EMPTY
73651: LIST
73652: LIST
73653: PUSH
73654: EMPTY
73655: LIST
73656: LIST
73657: LIST
73658: LIST
73659: LIST
73660: LIST
73661: LIST
73662: LIST
73663: LIST
73664: LIST
73665: LIST
73666: LIST
73667: LIST
73668: LIST
73669: LIST
73670: LIST
73671: LIST
73672: LIST
73673: LIST
73674: LIST
73675: LIST
73676: LIST
73677: LIST
73678: LIST
73679: LIST
73680: LIST
73681: LIST
73682: LIST
73683: LIST
73684: LIST
73685: LIST
73686: LIST
73687: LIST
73688: LIST
73689: LIST
73690: LIST
73691: LIST
73692: LIST
73693: LIST
73694: LIST
73695: LIST
73696: LIST
73697: LIST
73698: LIST
73699: LIST
73700: ST_TO_ADDR
// end ; end ;
73701: GO 73704
73703: POP
// case btype of b_depot , b_warehouse :
73704: LD_VAR 0 1
73708: PUSH
73709: LD_INT 0
73711: DOUBLE
73712: EQUAL
73713: IFTRUE 73723
73715: LD_INT 1
73717: DOUBLE
73718: EQUAL
73719: IFTRUE 73723
73721: GO 73924
73723: POP
// case nation of nation_american :
73724: LD_VAR 0 5
73728: PUSH
73729: LD_INT 1
73731: DOUBLE
73732: EQUAL
73733: IFTRUE 73737
73735: GO 73793
73737: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
73738: LD_ADDR_VAR 0 9
73742: PUSH
73743: LD_VAR 0 11
73747: PUSH
73748: LD_VAR 0 12
73752: PUSH
73753: LD_VAR 0 13
73757: PUSH
73758: LD_VAR 0 14
73762: PUSH
73763: LD_VAR 0 15
73767: PUSH
73768: LD_VAR 0 16
73772: PUSH
73773: EMPTY
73774: LIST
73775: LIST
73776: LIST
73777: LIST
73778: LIST
73779: LIST
73780: PUSH
73781: LD_VAR 0 4
73785: PUSH
73786: LD_INT 1
73788: PLUS
73789: ARRAY
73790: ST_TO_ADDR
73791: GO 73922
73793: LD_INT 2
73795: DOUBLE
73796: EQUAL
73797: IFTRUE 73801
73799: GO 73857
73801: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
73802: LD_ADDR_VAR 0 9
73806: PUSH
73807: LD_VAR 0 17
73811: PUSH
73812: LD_VAR 0 18
73816: PUSH
73817: LD_VAR 0 19
73821: PUSH
73822: LD_VAR 0 20
73826: PUSH
73827: LD_VAR 0 21
73831: PUSH
73832: LD_VAR 0 22
73836: PUSH
73837: EMPTY
73838: LIST
73839: LIST
73840: LIST
73841: LIST
73842: LIST
73843: LIST
73844: PUSH
73845: LD_VAR 0 4
73849: PUSH
73850: LD_INT 1
73852: PLUS
73853: ARRAY
73854: ST_TO_ADDR
73855: GO 73922
73857: LD_INT 3
73859: DOUBLE
73860: EQUAL
73861: IFTRUE 73865
73863: GO 73921
73865: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
73866: LD_ADDR_VAR 0 9
73870: PUSH
73871: LD_VAR 0 23
73875: PUSH
73876: LD_VAR 0 24
73880: PUSH
73881: LD_VAR 0 25
73885: PUSH
73886: LD_VAR 0 26
73890: PUSH
73891: LD_VAR 0 27
73895: PUSH
73896: LD_VAR 0 28
73900: PUSH
73901: EMPTY
73902: LIST
73903: LIST
73904: LIST
73905: LIST
73906: LIST
73907: LIST
73908: PUSH
73909: LD_VAR 0 4
73913: PUSH
73914: LD_INT 1
73916: PLUS
73917: ARRAY
73918: ST_TO_ADDR
73919: GO 73922
73921: POP
73922: GO 74477
73924: LD_INT 2
73926: DOUBLE
73927: EQUAL
73928: IFTRUE 73938
73930: LD_INT 3
73932: DOUBLE
73933: EQUAL
73934: IFTRUE 73938
73936: GO 73994
73938: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
73939: LD_ADDR_VAR 0 9
73943: PUSH
73944: LD_VAR 0 29
73948: PUSH
73949: LD_VAR 0 30
73953: PUSH
73954: LD_VAR 0 31
73958: PUSH
73959: LD_VAR 0 32
73963: PUSH
73964: LD_VAR 0 33
73968: PUSH
73969: LD_VAR 0 34
73973: PUSH
73974: EMPTY
73975: LIST
73976: LIST
73977: LIST
73978: LIST
73979: LIST
73980: LIST
73981: PUSH
73982: LD_VAR 0 4
73986: PUSH
73987: LD_INT 1
73989: PLUS
73990: ARRAY
73991: ST_TO_ADDR
73992: GO 74477
73994: LD_INT 16
73996: DOUBLE
73997: EQUAL
73998: IFTRUE 74056
74000: LD_INT 17
74002: DOUBLE
74003: EQUAL
74004: IFTRUE 74056
74006: LD_INT 18
74008: DOUBLE
74009: EQUAL
74010: IFTRUE 74056
74012: LD_INT 19
74014: DOUBLE
74015: EQUAL
74016: IFTRUE 74056
74018: LD_INT 22
74020: DOUBLE
74021: EQUAL
74022: IFTRUE 74056
74024: LD_INT 20
74026: DOUBLE
74027: EQUAL
74028: IFTRUE 74056
74030: LD_INT 21
74032: DOUBLE
74033: EQUAL
74034: IFTRUE 74056
74036: LD_INT 23
74038: DOUBLE
74039: EQUAL
74040: IFTRUE 74056
74042: LD_INT 24
74044: DOUBLE
74045: EQUAL
74046: IFTRUE 74056
74048: LD_INT 25
74050: DOUBLE
74051: EQUAL
74052: IFTRUE 74056
74054: GO 74112
74056: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
74057: LD_ADDR_VAR 0 9
74061: PUSH
74062: LD_VAR 0 35
74066: PUSH
74067: LD_VAR 0 36
74071: PUSH
74072: LD_VAR 0 37
74076: PUSH
74077: LD_VAR 0 38
74081: PUSH
74082: LD_VAR 0 39
74086: PUSH
74087: LD_VAR 0 40
74091: PUSH
74092: EMPTY
74093: LIST
74094: LIST
74095: LIST
74096: LIST
74097: LIST
74098: LIST
74099: PUSH
74100: LD_VAR 0 4
74104: PUSH
74105: LD_INT 1
74107: PLUS
74108: ARRAY
74109: ST_TO_ADDR
74110: GO 74477
74112: LD_INT 6
74114: DOUBLE
74115: EQUAL
74116: IFTRUE 74168
74118: LD_INT 7
74120: DOUBLE
74121: EQUAL
74122: IFTRUE 74168
74124: LD_INT 8
74126: DOUBLE
74127: EQUAL
74128: IFTRUE 74168
74130: LD_INT 13
74132: DOUBLE
74133: EQUAL
74134: IFTRUE 74168
74136: LD_INT 12
74138: DOUBLE
74139: EQUAL
74140: IFTRUE 74168
74142: LD_INT 15
74144: DOUBLE
74145: EQUAL
74146: IFTRUE 74168
74148: LD_INT 11
74150: DOUBLE
74151: EQUAL
74152: IFTRUE 74168
74154: LD_INT 14
74156: DOUBLE
74157: EQUAL
74158: IFTRUE 74168
74160: LD_INT 10
74162: DOUBLE
74163: EQUAL
74164: IFTRUE 74168
74166: GO 74224
74168: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
74169: LD_ADDR_VAR 0 9
74173: PUSH
74174: LD_VAR 0 41
74178: PUSH
74179: LD_VAR 0 42
74183: PUSH
74184: LD_VAR 0 43
74188: PUSH
74189: LD_VAR 0 44
74193: PUSH
74194: LD_VAR 0 45
74198: PUSH
74199: LD_VAR 0 46
74203: PUSH
74204: EMPTY
74205: LIST
74206: LIST
74207: LIST
74208: LIST
74209: LIST
74210: LIST
74211: PUSH
74212: LD_VAR 0 4
74216: PUSH
74217: LD_INT 1
74219: PLUS
74220: ARRAY
74221: ST_TO_ADDR
74222: GO 74477
74224: LD_INT 36
74226: DOUBLE
74227: EQUAL
74228: IFTRUE 74232
74230: GO 74288
74232: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
74233: LD_ADDR_VAR 0 9
74237: PUSH
74238: LD_VAR 0 47
74242: PUSH
74243: LD_VAR 0 48
74247: PUSH
74248: LD_VAR 0 49
74252: PUSH
74253: LD_VAR 0 50
74257: PUSH
74258: LD_VAR 0 51
74262: PUSH
74263: LD_VAR 0 52
74267: PUSH
74268: EMPTY
74269: LIST
74270: LIST
74271: LIST
74272: LIST
74273: LIST
74274: LIST
74275: PUSH
74276: LD_VAR 0 4
74280: PUSH
74281: LD_INT 1
74283: PLUS
74284: ARRAY
74285: ST_TO_ADDR
74286: GO 74477
74288: LD_INT 4
74290: DOUBLE
74291: EQUAL
74292: IFTRUE 74314
74294: LD_INT 5
74296: DOUBLE
74297: EQUAL
74298: IFTRUE 74314
74300: LD_INT 34
74302: DOUBLE
74303: EQUAL
74304: IFTRUE 74314
74306: LD_INT 37
74308: DOUBLE
74309: EQUAL
74310: IFTRUE 74314
74312: GO 74370
74314: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
74315: LD_ADDR_VAR 0 9
74319: PUSH
74320: LD_VAR 0 53
74324: PUSH
74325: LD_VAR 0 54
74329: PUSH
74330: LD_VAR 0 55
74334: PUSH
74335: LD_VAR 0 56
74339: PUSH
74340: LD_VAR 0 57
74344: PUSH
74345: LD_VAR 0 58
74349: PUSH
74350: EMPTY
74351: LIST
74352: LIST
74353: LIST
74354: LIST
74355: LIST
74356: LIST
74357: PUSH
74358: LD_VAR 0 4
74362: PUSH
74363: LD_INT 1
74365: PLUS
74366: ARRAY
74367: ST_TO_ADDR
74368: GO 74477
74370: LD_INT 31
74372: DOUBLE
74373: EQUAL
74374: IFTRUE 74420
74376: LD_INT 32
74378: DOUBLE
74379: EQUAL
74380: IFTRUE 74420
74382: LD_INT 33
74384: DOUBLE
74385: EQUAL
74386: IFTRUE 74420
74388: LD_INT 27
74390: DOUBLE
74391: EQUAL
74392: IFTRUE 74420
74394: LD_INT 26
74396: DOUBLE
74397: EQUAL
74398: IFTRUE 74420
74400: LD_INT 28
74402: DOUBLE
74403: EQUAL
74404: IFTRUE 74420
74406: LD_INT 29
74408: DOUBLE
74409: EQUAL
74410: IFTRUE 74420
74412: LD_INT 30
74414: DOUBLE
74415: EQUAL
74416: IFTRUE 74420
74418: GO 74476
74420: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
74421: LD_ADDR_VAR 0 9
74425: PUSH
74426: LD_VAR 0 59
74430: PUSH
74431: LD_VAR 0 60
74435: PUSH
74436: LD_VAR 0 61
74440: PUSH
74441: LD_VAR 0 62
74445: PUSH
74446: LD_VAR 0 63
74450: PUSH
74451: LD_VAR 0 64
74455: PUSH
74456: EMPTY
74457: LIST
74458: LIST
74459: LIST
74460: LIST
74461: LIST
74462: LIST
74463: PUSH
74464: LD_VAR 0 4
74468: PUSH
74469: LD_INT 1
74471: PLUS
74472: ARRAY
74473: ST_TO_ADDR
74474: GO 74477
74476: POP
// temp_list2 = [ ] ;
74477: LD_ADDR_VAR 0 10
74481: PUSH
74482: EMPTY
74483: ST_TO_ADDR
// for i in temp_list do
74484: LD_ADDR_VAR 0 8
74488: PUSH
74489: LD_VAR 0 9
74493: PUSH
74494: FOR_IN
74495: IFFALSE 74547
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
74497: LD_ADDR_VAR 0 10
74501: PUSH
74502: LD_VAR 0 10
74506: PUSH
74507: LD_VAR 0 8
74511: PUSH
74512: LD_INT 1
74514: ARRAY
74515: PUSH
74516: LD_VAR 0 2
74520: PLUS
74521: PUSH
74522: LD_VAR 0 8
74526: PUSH
74527: LD_INT 2
74529: ARRAY
74530: PUSH
74531: LD_VAR 0 3
74535: PLUS
74536: PUSH
74537: EMPTY
74538: LIST
74539: LIST
74540: PUSH
74541: EMPTY
74542: LIST
74543: ADD
74544: ST_TO_ADDR
74545: GO 74494
74547: POP
74548: POP
// result = temp_list2 ;
74549: LD_ADDR_VAR 0 7
74553: PUSH
74554: LD_VAR 0 10
74558: ST_TO_ADDR
// end ;
74559: LD_VAR 0 7
74563: RET
// export function EnemyInRange ( unit , dist ) ; begin
74564: LD_INT 0
74566: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
74567: LD_ADDR_VAR 0 3
74571: PUSH
74572: LD_VAR 0 1
74576: PPUSH
74577: CALL_OW 255
74581: PPUSH
74582: LD_VAR 0 1
74586: PPUSH
74587: CALL_OW 250
74591: PPUSH
74592: LD_VAR 0 1
74596: PPUSH
74597: CALL_OW 251
74601: PPUSH
74602: LD_VAR 0 2
74606: PPUSH
74607: CALL 47821 0 4
74611: PUSH
74612: LD_INT 4
74614: ARRAY
74615: ST_TO_ADDR
// end ;
74616: LD_VAR 0 3
74620: RET
// export function PlayerSeeMe ( unit ) ; begin
74621: LD_INT 0
74623: PPUSH
// result := See ( your_side , unit ) ;
74624: LD_ADDR_VAR 0 2
74628: PUSH
74629: LD_OWVAR 2
74633: PPUSH
74634: LD_VAR 0 1
74638: PPUSH
74639: CALL_OW 292
74643: ST_TO_ADDR
// end ;
74644: LD_VAR 0 2
74648: RET
// export function ReverseDir ( unit ) ; begin
74649: LD_INT 0
74651: PPUSH
// if not unit then
74652: LD_VAR 0 1
74656: NOT
74657: IFFALSE 74661
// exit ;
74659: GO 74684
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
74661: LD_ADDR_VAR 0 2
74665: PUSH
74666: LD_VAR 0 1
74670: PPUSH
74671: CALL_OW 254
74675: PUSH
74676: LD_INT 3
74678: PLUS
74679: PUSH
74680: LD_INT 6
74682: MOD
74683: ST_TO_ADDR
// end ;
74684: LD_VAR 0 2
74688: RET
// export function ReverseArray ( array ) ; var i ; begin
74689: LD_INT 0
74691: PPUSH
74692: PPUSH
// if not array then
74693: LD_VAR 0 1
74697: NOT
74698: IFFALSE 74702
// exit ;
74700: GO 74757
// result := [ ] ;
74702: LD_ADDR_VAR 0 2
74706: PUSH
74707: EMPTY
74708: ST_TO_ADDR
// for i := array downto 1 do
74709: LD_ADDR_VAR 0 3
74713: PUSH
74714: DOUBLE
74715: LD_VAR 0 1
74719: INC
74720: ST_TO_ADDR
74721: LD_INT 1
74723: PUSH
74724: FOR_DOWNTO
74725: IFFALSE 74755
// result := Join ( result , array [ i ] ) ;
74727: LD_ADDR_VAR 0 2
74731: PUSH
74732: LD_VAR 0 2
74736: PPUSH
74737: LD_VAR 0 1
74741: PUSH
74742: LD_VAR 0 3
74746: ARRAY
74747: PPUSH
74748: CALL 79599 0 2
74752: ST_TO_ADDR
74753: GO 74724
74755: POP
74756: POP
// end ;
74757: LD_VAR 0 2
74761: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
74762: LD_INT 0
74764: PPUSH
74765: PPUSH
74766: PPUSH
74767: PPUSH
74768: PPUSH
74769: PPUSH
// if not unit or not hexes then
74770: LD_VAR 0 1
74774: NOT
74775: IFTRUE 74784
74777: PUSH
74778: LD_VAR 0 2
74782: NOT
74783: OR
74784: IFFALSE 74788
// exit ;
74786: GO 74911
// dist := 9999 ;
74788: LD_ADDR_VAR 0 5
74792: PUSH
74793: LD_INT 9999
74795: ST_TO_ADDR
// for i = 1 to hexes do
74796: LD_ADDR_VAR 0 4
74800: PUSH
74801: DOUBLE
74802: LD_INT 1
74804: DEC
74805: ST_TO_ADDR
74806: LD_VAR 0 2
74810: PUSH
74811: FOR_TO
74812: IFFALSE 74899
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
74814: LD_ADDR_VAR 0 6
74818: PUSH
74819: LD_VAR 0 1
74823: PPUSH
74824: LD_VAR 0 2
74828: PUSH
74829: LD_VAR 0 4
74833: ARRAY
74834: PUSH
74835: LD_INT 1
74837: ARRAY
74838: PPUSH
74839: LD_VAR 0 2
74843: PUSH
74844: LD_VAR 0 4
74848: ARRAY
74849: PUSH
74850: LD_INT 2
74852: ARRAY
74853: PPUSH
74854: CALL_OW 297
74858: ST_TO_ADDR
// if tdist < dist then
74859: LD_VAR 0 6
74863: PUSH
74864: LD_VAR 0 5
74868: LESS
74869: IFFALSE 74897
// begin hex := hexes [ i ] ;
74871: LD_ADDR_VAR 0 8
74875: PUSH
74876: LD_VAR 0 2
74880: PUSH
74881: LD_VAR 0 4
74885: ARRAY
74886: ST_TO_ADDR
// dist := tdist ;
74887: LD_ADDR_VAR 0 5
74891: PUSH
74892: LD_VAR 0 6
74896: ST_TO_ADDR
// end ; end ;
74897: GO 74811
74899: POP
74900: POP
// result := hex ;
74901: LD_ADDR_VAR 0 3
74905: PUSH
74906: LD_VAR 0 8
74910: ST_TO_ADDR
// end ;
74911: LD_VAR 0 3
74915: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74916: LD_INT 0
74918: PPUSH
74919: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74920: LD_VAR 0 1
74924: NOT
74925: IFTRUE 74964
74927: PUSH
74928: LD_VAR 0 1
74932: PUSH
74933: LD_INT 21
74935: PUSH
74936: LD_INT 2
74938: PUSH
74939: EMPTY
74940: LIST
74941: LIST
74942: PUSH
74943: LD_INT 23
74945: PUSH
74946: LD_INT 2
74948: PUSH
74949: EMPTY
74950: LIST
74951: LIST
74952: PUSH
74953: EMPTY
74954: LIST
74955: LIST
74956: PPUSH
74957: CALL_OW 69
74961: IN
74962: NOT
74963: OR
74964: IFFALSE 74968
// exit ;
74966: GO 75015
// for i = 1 to 3 do
74968: LD_ADDR_VAR 0 3
74972: PUSH
74973: DOUBLE
74974: LD_INT 1
74976: DEC
74977: ST_TO_ADDR
74978: LD_INT 3
74980: PUSH
74981: FOR_TO
74982: IFFALSE 75013
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
74984: LD_VAR 0 1
74988: PPUSH
74989: CALL_OW 250
74993: PPUSH
74994: LD_VAR 0 1
74998: PPUSH
74999: CALL_OW 251
75003: PPUSH
75004: LD_INT 1
75006: PPUSH
75007: CALL_OW 453
75011: GO 74981
75013: POP
75014: POP
// end ;
75015: LD_VAR 0 2
75019: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
75020: LD_INT 0
75022: PPUSH
75023: PPUSH
75024: PPUSH
75025: PPUSH
75026: PPUSH
75027: PPUSH
// if not unit or not enemy_unit then
75028: LD_VAR 0 1
75032: NOT
75033: IFTRUE 75042
75035: PUSH
75036: LD_VAR 0 2
75040: NOT
75041: OR
75042: IFFALSE 75046
// exit ;
75044: GO 75517
// if GetLives ( i ) < 250 then
75046: LD_VAR 0 4
75050: PPUSH
75051: CALL_OW 256
75055: PUSH
75056: LD_INT 250
75058: LESS
75059: IFFALSE 75072
// begin ComAutodestruct ( i ) ;
75061: LD_VAR 0 4
75065: PPUSH
75066: CALL 74916 0 1
// exit ;
75070: GO 75517
// end ; x := GetX ( enemy_unit ) ;
75072: LD_ADDR_VAR 0 7
75076: PUSH
75077: LD_VAR 0 2
75081: PPUSH
75082: CALL_OW 250
75086: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
75087: LD_ADDR_VAR 0 8
75091: PUSH
75092: LD_VAR 0 2
75096: PPUSH
75097: CALL_OW 251
75101: ST_TO_ADDR
// if not x or not y then
75102: LD_VAR 0 7
75106: NOT
75107: IFTRUE 75116
75109: PUSH
75110: LD_VAR 0 8
75114: NOT
75115: OR
75116: IFFALSE 75120
// exit ;
75118: GO 75517
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
75120: LD_ADDR_VAR 0 6
75124: PUSH
75125: LD_VAR 0 7
75129: PPUSH
75130: LD_INT 0
75132: PPUSH
75133: LD_INT 4
75135: PPUSH
75136: CALL_OW 272
75140: PUSH
75141: LD_VAR 0 8
75145: PPUSH
75146: LD_INT 0
75148: PPUSH
75149: LD_INT 4
75151: PPUSH
75152: CALL_OW 273
75156: PUSH
75157: EMPTY
75158: LIST
75159: LIST
75160: PUSH
75161: LD_VAR 0 7
75165: PPUSH
75166: LD_INT 1
75168: PPUSH
75169: LD_INT 4
75171: PPUSH
75172: CALL_OW 272
75176: PUSH
75177: LD_VAR 0 8
75181: PPUSH
75182: LD_INT 1
75184: PPUSH
75185: LD_INT 4
75187: PPUSH
75188: CALL_OW 273
75192: PUSH
75193: EMPTY
75194: LIST
75195: LIST
75196: PUSH
75197: LD_VAR 0 7
75201: PPUSH
75202: LD_INT 2
75204: PPUSH
75205: LD_INT 4
75207: PPUSH
75208: CALL_OW 272
75212: PUSH
75213: LD_VAR 0 8
75217: PPUSH
75218: LD_INT 2
75220: PPUSH
75221: LD_INT 4
75223: PPUSH
75224: CALL_OW 273
75228: PUSH
75229: EMPTY
75230: LIST
75231: LIST
75232: PUSH
75233: LD_VAR 0 7
75237: PPUSH
75238: LD_INT 3
75240: PPUSH
75241: LD_INT 4
75243: PPUSH
75244: CALL_OW 272
75248: PUSH
75249: LD_VAR 0 8
75253: PPUSH
75254: LD_INT 3
75256: PPUSH
75257: LD_INT 4
75259: PPUSH
75260: CALL_OW 273
75264: PUSH
75265: EMPTY
75266: LIST
75267: LIST
75268: PUSH
75269: LD_VAR 0 7
75273: PPUSH
75274: LD_INT 4
75276: PPUSH
75277: LD_INT 4
75279: PPUSH
75280: CALL_OW 272
75284: PUSH
75285: LD_VAR 0 8
75289: PPUSH
75290: LD_INT 4
75292: PPUSH
75293: LD_INT 4
75295: PPUSH
75296: CALL_OW 273
75300: PUSH
75301: EMPTY
75302: LIST
75303: LIST
75304: PUSH
75305: LD_VAR 0 7
75309: PPUSH
75310: LD_INT 5
75312: PPUSH
75313: LD_INT 4
75315: PPUSH
75316: CALL_OW 272
75320: PUSH
75321: LD_VAR 0 8
75325: PPUSH
75326: LD_INT 5
75328: PPUSH
75329: LD_INT 4
75331: PPUSH
75332: CALL_OW 273
75336: PUSH
75337: EMPTY
75338: LIST
75339: LIST
75340: PUSH
75341: EMPTY
75342: LIST
75343: LIST
75344: LIST
75345: LIST
75346: LIST
75347: LIST
75348: ST_TO_ADDR
// for i = tmp downto 1 do
75349: LD_ADDR_VAR 0 4
75353: PUSH
75354: DOUBLE
75355: LD_VAR 0 6
75359: INC
75360: ST_TO_ADDR
75361: LD_INT 1
75363: PUSH
75364: FOR_DOWNTO
75365: IFFALSE 75468
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
75367: LD_VAR 0 6
75371: PUSH
75372: LD_VAR 0 4
75376: ARRAY
75377: PUSH
75378: LD_INT 1
75380: ARRAY
75381: PPUSH
75382: LD_VAR 0 6
75386: PUSH
75387: LD_VAR 0 4
75391: ARRAY
75392: PUSH
75393: LD_INT 2
75395: ARRAY
75396: PPUSH
75397: CALL_OW 488
75401: NOT
75402: IFTRUE 75444
75404: PUSH
75405: LD_VAR 0 6
75409: PUSH
75410: LD_VAR 0 4
75414: ARRAY
75415: PUSH
75416: LD_INT 1
75418: ARRAY
75419: PPUSH
75420: LD_VAR 0 6
75424: PUSH
75425: LD_VAR 0 4
75429: ARRAY
75430: PUSH
75431: LD_INT 2
75433: ARRAY
75434: PPUSH
75435: CALL_OW 428
75439: PUSH
75440: LD_INT 0
75442: NONEQUAL
75443: OR
75444: IFFALSE 75466
// tmp := Delete ( tmp , i ) ;
75446: LD_ADDR_VAR 0 6
75450: PUSH
75451: LD_VAR 0 6
75455: PPUSH
75456: LD_VAR 0 4
75460: PPUSH
75461: CALL_OW 3
75465: ST_TO_ADDR
75466: GO 75364
75468: POP
75469: POP
// j := GetClosestHex ( unit , tmp ) ;
75470: LD_ADDR_VAR 0 5
75474: PUSH
75475: LD_VAR 0 1
75479: PPUSH
75480: LD_VAR 0 6
75484: PPUSH
75485: CALL 74762 0 2
75489: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
75490: LD_VAR 0 1
75494: PPUSH
75495: LD_VAR 0 5
75499: PUSH
75500: LD_INT 1
75502: ARRAY
75503: PPUSH
75504: LD_VAR 0 5
75508: PUSH
75509: LD_INT 2
75511: ARRAY
75512: PPUSH
75513: CALL_OW 111
// end ;
75517: LD_VAR 0 3
75521: RET
// export function PrepareApemanSoldier ( ) ; begin
75522: LD_INT 0
75524: PPUSH
// uc_nation := 0 ;
75525: LD_ADDR_OWVAR 21
75529: PUSH
75530: LD_INT 0
75532: ST_TO_ADDR
// hc_sex := sex_male ;
75533: LD_ADDR_OWVAR 27
75537: PUSH
75538: LD_INT 1
75540: ST_TO_ADDR
// hc_name :=  ;
75541: LD_ADDR_OWVAR 26
75545: PUSH
75546: LD_STRING 
75548: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
75549: LD_ADDR_OWVAR 28
75553: PUSH
75554: LD_INT 15
75556: ST_TO_ADDR
// hc_gallery :=  ;
75557: LD_ADDR_OWVAR 33
75561: PUSH
75562: LD_STRING 
75564: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75565: LD_ADDR_OWVAR 31
75569: PUSH
75570: LD_INT 0
75572: PPUSH
75573: LD_INT 3
75575: PPUSH
75576: CALL_OW 12
75580: PUSH
75581: LD_INT 0
75583: PPUSH
75584: LD_INT 3
75586: PPUSH
75587: CALL_OW 12
75591: PUSH
75592: LD_INT 0
75594: PUSH
75595: LD_INT 0
75597: PUSH
75598: EMPTY
75599: LIST
75600: LIST
75601: LIST
75602: LIST
75603: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
75604: LD_ADDR_OWVAR 29
75608: PUSH
75609: LD_INT 12
75611: PUSH
75612: LD_INT 12
75614: PUSH
75615: EMPTY
75616: LIST
75617: LIST
75618: ST_TO_ADDR
// end ;
75619: LD_VAR 0 1
75623: RET
// export function PrepareApemanEngineer ( ) ; begin
75624: LD_INT 0
75626: PPUSH
// uc_nation := 0 ;
75627: LD_ADDR_OWVAR 21
75631: PUSH
75632: LD_INT 0
75634: ST_TO_ADDR
// hc_sex := sex_male ;
75635: LD_ADDR_OWVAR 27
75639: PUSH
75640: LD_INT 1
75642: ST_TO_ADDR
// hc_name :=  ;
75643: LD_ADDR_OWVAR 26
75647: PUSH
75648: LD_STRING 
75650: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
75651: LD_ADDR_OWVAR 28
75655: PUSH
75656: LD_INT 16
75658: ST_TO_ADDR
// hc_gallery :=  ;
75659: LD_ADDR_OWVAR 33
75663: PUSH
75664: LD_STRING 
75666: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75667: LD_ADDR_OWVAR 31
75671: PUSH
75672: LD_INT 0
75674: PPUSH
75675: LD_INT 3
75677: PPUSH
75678: CALL_OW 12
75682: PUSH
75683: LD_INT 0
75685: PPUSH
75686: LD_INT 3
75688: PPUSH
75689: CALL_OW 12
75693: PUSH
75694: LD_INT 0
75696: PUSH
75697: LD_INT 0
75699: PUSH
75700: EMPTY
75701: LIST
75702: LIST
75703: LIST
75704: LIST
75705: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
75706: LD_ADDR_OWVAR 29
75710: PUSH
75711: LD_INT 12
75713: PUSH
75714: LD_INT 12
75716: PUSH
75717: EMPTY
75718: LIST
75719: LIST
75720: ST_TO_ADDR
// end ;
75721: LD_VAR 0 1
75725: RET
// export function PrepareApeman ( agressivity ) ; begin
75726: LD_INT 0
75728: PPUSH
// uc_side := 0 ;
75729: LD_ADDR_OWVAR 20
75733: PUSH
75734: LD_INT 0
75736: ST_TO_ADDR
// uc_nation := 0 ;
75737: LD_ADDR_OWVAR 21
75741: PUSH
75742: LD_INT 0
75744: ST_TO_ADDR
// hc_sex := sex_male ;
75745: LD_ADDR_OWVAR 27
75749: PUSH
75750: LD_INT 1
75752: ST_TO_ADDR
// hc_class := class_apeman ;
75753: LD_ADDR_OWVAR 28
75757: PUSH
75758: LD_INT 12
75760: ST_TO_ADDR
// hc_gallery :=  ;
75761: LD_ADDR_OWVAR 33
75765: PUSH
75766: LD_STRING 
75768: ST_TO_ADDR
// hc_name :=  ;
75769: LD_ADDR_OWVAR 26
75773: PUSH
75774: LD_STRING 
75776: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
75777: LD_ADDR_OWVAR 29
75781: PUSH
75782: LD_INT 12
75784: PUSH
75785: LD_INT 12
75787: PUSH
75788: EMPTY
75789: LIST
75790: LIST
75791: ST_TO_ADDR
// if agressivity = 0 then
75792: LD_VAR 0 1
75796: PUSH
75797: LD_INT 0
75799: EQUAL
75800: IFFALSE 75812
// hc_agressivity := 0 else
75802: LD_ADDR_OWVAR 35
75806: PUSH
75807: LD_INT 0
75809: ST_TO_ADDR
75810: GO 75833
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75812: LD_ADDR_OWVAR 35
75816: PUSH
75817: LD_VAR 0 1
75821: NEG
75822: PPUSH
75823: LD_VAR 0 1
75827: PPUSH
75828: CALL_OW 12
75832: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75833: LD_ADDR_OWVAR 31
75837: PUSH
75838: LD_INT 0
75840: PPUSH
75841: LD_INT 3
75843: PPUSH
75844: CALL_OW 12
75848: PUSH
75849: LD_INT 0
75851: PPUSH
75852: LD_INT 3
75854: PPUSH
75855: CALL_OW 12
75859: PUSH
75860: LD_INT 0
75862: PUSH
75863: LD_INT 0
75865: PUSH
75866: EMPTY
75867: LIST
75868: LIST
75869: LIST
75870: LIST
75871: ST_TO_ADDR
// end ;
75872: LD_VAR 0 2
75876: RET
// export function PrepareTiger ( agressivity ) ; begin
75877: LD_INT 0
75879: PPUSH
// uc_side := 0 ;
75880: LD_ADDR_OWVAR 20
75884: PUSH
75885: LD_INT 0
75887: ST_TO_ADDR
// uc_nation := 0 ;
75888: LD_ADDR_OWVAR 21
75892: PUSH
75893: LD_INT 0
75895: ST_TO_ADDR
// InitHc ;
75896: CALL_OW 19
// hc_class := class_tiger ;
75900: LD_ADDR_OWVAR 28
75904: PUSH
75905: LD_INT 14
75907: ST_TO_ADDR
// hc_gallery :=  ;
75908: LD_ADDR_OWVAR 33
75912: PUSH
75913: LD_STRING 
75915: ST_TO_ADDR
// hc_name :=  ;
75916: LD_ADDR_OWVAR 26
75920: PUSH
75921: LD_STRING 
75923: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75924: LD_ADDR_OWVAR 35
75928: PUSH
75929: LD_VAR 0 1
75933: NEG
75934: PPUSH
75935: LD_VAR 0 1
75939: PPUSH
75940: CALL_OW 12
75944: ST_TO_ADDR
// end ;
75945: LD_VAR 0 2
75949: RET
// export function PrepareEnchidna ( ) ; begin
75950: LD_INT 0
75952: PPUSH
// uc_side := 0 ;
75953: LD_ADDR_OWVAR 20
75957: PUSH
75958: LD_INT 0
75960: ST_TO_ADDR
// uc_nation := 0 ;
75961: LD_ADDR_OWVAR 21
75965: PUSH
75966: LD_INT 0
75968: ST_TO_ADDR
// InitHc ;
75969: CALL_OW 19
// hc_class := class_baggie ;
75973: LD_ADDR_OWVAR 28
75977: PUSH
75978: LD_INT 13
75980: ST_TO_ADDR
// hc_gallery :=  ;
75981: LD_ADDR_OWVAR 33
75985: PUSH
75986: LD_STRING 
75988: ST_TO_ADDR
// hc_name :=  ;
75989: LD_ADDR_OWVAR 26
75993: PUSH
75994: LD_STRING 
75996: ST_TO_ADDR
// end ;
75997: LD_VAR 0 1
76001: RET
// export function PrepareFrog ( ) ; begin
76002: LD_INT 0
76004: PPUSH
// uc_side := 0 ;
76005: LD_ADDR_OWVAR 20
76009: PUSH
76010: LD_INT 0
76012: ST_TO_ADDR
// uc_nation := 0 ;
76013: LD_ADDR_OWVAR 21
76017: PUSH
76018: LD_INT 0
76020: ST_TO_ADDR
// InitHc ;
76021: CALL_OW 19
// hc_class := class_frog ;
76025: LD_ADDR_OWVAR 28
76029: PUSH
76030: LD_INT 19
76032: ST_TO_ADDR
// hc_gallery :=  ;
76033: LD_ADDR_OWVAR 33
76037: PUSH
76038: LD_STRING 
76040: ST_TO_ADDR
// hc_name :=  ;
76041: LD_ADDR_OWVAR 26
76045: PUSH
76046: LD_STRING 
76048: ST_TO_ADDR
// end ;
76049: LD_VAR 0 1
76053: RET
// export function PrepareFish ( ) ; begin
76054: LD_INT 0
76056: PPUSH
// uc_side := 0 ;
76057: LD_ADDR_OWVAR 20
76061: PUSH
76062: LD_INT 0
76064: ST_TO_ADDR
// uc_nation := 0 ;
76065: LD_ADDR_OWVAR 21
76069: PUSH
76070: LD_INT 0
76072: ST_TO_ADDR
// InitHc ;
76073: CALL_OW 19
// hc_class := class_fish ;
76077: LD_ADDR_OWVAR 28
76081: PUSH
76082: LD_INT 20
76084: ST_TO_ADDR
// hc_gallery :=  ;
76085: LD_ADDR_OWVAR 33
76089: PUSH
76090: LD_STRING 
76092: ST_TO_ADDR
// hc_name :=  ;
76093: LD_ADDR_OWVAR 26
76097: PUSH
76098: LD_STRING 
76100: ST_TO_ADDR
// end ;
76101: LD_VAR 0 1
76105: RET
// export function PrepareBird ( ) ; begin
76106: LD_INT 0
76108: PPUSH
// uc_side := 0 ;
76109: LD_ADDR_OWVAR 20
76113: PUSH
76114: LD_INT 0
76116: ST_TO_ADDR
// uc_nation := 0 ;
76117: LD_ADDR_OWVAR 21
76121: PUSH
76122: LD_INT 0
76124: ST_TO_ADDR
// InitHc ;
76125: CALL_OW 19
// hc_class := class_phororhacos ;
76129: LD_ADDR_OWVAR 28
76133: PUSH
76134: LD_INT 18
76136: ST_TO_ADDR
// hc_gallery :=  ;
76137: LD_ADDR_OWVAR 33
76141: PUSH
76142: LD_STRING 
76144: ST_TO_ADDR
// hc_name :=  ;
76145: LD_ADDR_OWVAR 26
76149: PUSH
76150: LD_STRING 
76152: ST_TO_ADDR
// end ;
76153: LD_VAR 0 1
76157: RET
// export function PrepareHorse ( ) ; begin
76158: LD_INT 0
76160: PPUSH
// uc_side := 0 ;
76161: LD_ADDR_OWVAR 20
76165: PUSH
76166: LD_INT 0
76168: ST_TO_ADDR
// uc_nation := 0 ;
76169: LD_ADDR_OWVAR 21
76173: PUSH
76174: LD_INT 0
76176: ST_TO_ADDR
// InitHc ;
76177: CALL_OW 19
// hc_class := class_horse ;
76181: LD_ADDR_OWVAR 28
76185: PUSH
76186: LD_INT 21
76188: ST_TO_ADDR
// hc_gallery :=  ;
76189: LD_ADDR_OWVAR 33
76193: PUSH
76194: LD_STRING 
76196: ST_TO_ADDR
// hc_name :=  ;
76197: LD_ADDR_OWVAR 26
76201: PUSH
76202: LD_STRING 
76204: ST_TO_ADDR
// end ;
76205: LD_VAR 0 1
76209: RET
// export function PrepareMastodont ( ) ; begin
76210: LD_INT 0
76212: PPUSH
// uc_side := 0 ;
76213: LD_ADDR_OWVAR 20
76217: PUSH
76218: LD_INT 0
76220: ST_TO_ADDR
// uc_nation := 0 ;
76221: LD_ADDR_OWVAR 21
76225: PUSH
76226: LD_INT 0
76228: ST_TO_ADDR
// vc_chassis := class_mastodont ;
76229: LD_ADDR_OWVAR 37
76233: PUSH
76234: LD_INT 31
76236: ST_TO_ADDR
// vc_control := control_rider ;
76237: LD_ADDR_OWVAR 38
76241: PUSH
76242: LD_INT 4
76244: ST_TO_ADDR
// end ;
76245: LD_VAR 0 1
76249: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
76250: LD_INT 0
76252: PPUSH
76253: PPUSH
76254: PPUSH
// uc_side = 0 ;
76255: LD_ADDR_OWVAR 20
76259: PUSH
76260: LD_INT 0
76262: ST_TO_ADDR
// uc_nation = 0 ;
76263: LD_ADDR_OWVAR 21
76267: PUSH
76268: LD_INT 0
76270: ST_TO_ADDR
// InitHc_All ( ) ;
76271: CALL_OW 584
// InitVc ;
76275: CALL_OW 20
// if mastodonts then
76279: LD_VAR 0 6
76283: IFFALSE 76350
// for i = 1 to mastodonts do
76285: LD_ADDR_VAR 0 11
76289: PUSH
76290: DOUBLE
76291: LD_INT 1
76293: DEC
76294: ST_TO_ADDR
76295: LD_VAR 0 6
76299: PUSH
76300: FOR_TO
76301: IFFALSE 76348
// begin vc_chassis := 31 ;
76303: LD_ADDR_OWVAR 37
76307: PUSH
76308: LD_INT 31
76310: ST_TO_ADDR
// vc_control := control_rider ;
76311: LD_ADDR_OWVAR 38
76315: PUSH
76316: LD_INT 4
76318: ST_TO_ADDR
// animal := CreateVehicle ;
76319: LD_ADDR_VAR 0 12
76323: PUSH
76324: CALL_OW 45
76328: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76329: LD_VAR 0 12
76333: PPUSH
76334: LD_VAR 0 8
76338: PPUSH
76339: LD_INT 0
76341: PPUSH
76342: CALL 78492 0 3
// end ;
76346: GO 76300
76348: POP
76349: POP
// if horses then
76350: LD_VAR 0 5
76354: IFFALSE 76421
// for i = 1 to horses do
76356: LD_ADDR_VAR 0 11
76360: PUSH
76361: DOUBLE
76362: LD_INT 1
76364: DEC
76365: ST_TO_ADDR
76366: LD_VAR 0 5
76370: PUSH
76371: FOR_TO
76372: IFFALSE 76419
// begin hc_class := 21 ;
76374: LD_ADDR_OWVAR 28
76378: PUSH
76379: LD_INT 21
76381: ST_TO_ADDR
// hc_gallery :=  ;
76382: LD_ADDR_OWVAR 33
76386: PUSH
76387: LD_STRING 
76389: ST_TO_ADDR
// animal := CreateHuman ;
76390: LD_ADDR_VAR 0 12
76394: PUSH
76395: CALL_OW 44
76399: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76400: LD_VAR 0 12
76404: PPUSH
76405: LD_VAR 0 8
76409: PPUSH
76410: LD_INT 0
76412: PPUSH
76413: CALL 78492 0 3
// end ;
76417: GO 76371
76419: POP
76420: POP
// if birds then
76421: LD_VAR 0 1
76425: IFFALSE 76492
// for i = 1 to birds do
76427: LD_ADDR_VAR 0 11
76431: PUSH
76432: DOUBLE
76433: LD_INT 1
76435: DEC
76436: ST_TO_ADDR
76437: LD_VAR 0 1
76441: PUSH
76442: FOR_TO
76443: IFFALSE 76490
// begin hc_class := 18 ;
76445: LD_ADDR_OWVAR 28
76449: PUSH
76450: LD_INT 18
76452: ST_TO_ADDR
// hc_gallery =  ;
76453: LD_ADDR_OWVAR 33
76457: PUSH
76458: LD_STRING 
76460: ST_TO_ADDR
// animal := CreateHuman ;
76461: LD_ADDR_VAR 0 12
76465: PUSH
76466: CALL_OW 44
76470: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76471: LD_VAR 0 12
76475: PPUSH
76476: LD_VAR 0 8
76480: PPUSH
76481: LD_INT 0
76483: PPUSH
76484: CALL 78492 0 3
// end ;
76488: GO 76442
76490: POP
76491: POP
// if tigers then
76492: LD_VAR 0 2
76496: IFFALSE 76580
// for i = 1 to tigers do
76498: LD_ADDR_VAR 0 11
76502: PUSH
76503: DOUBLE
76504: LD_INT 1
76506: DEC
76507: ST_TO_ADDR
76508: LD_VAR 0 2
76512: PUSH
76513: FOR_TO
76514: IFFALSE 76578
// begin hc_class = class_tiger ;
76516: LD_ADDR_OWVAR 28
76520: PUSH
76521: LD_INT 14
76523: ST_TO_ADDR
// hc_gallery =  ;
76524: LD_ADDR_OWVAR 33
76528: PUSH
76529: LD_STRING 
76531: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
76532: LD_ADDR_OWVAR 35
76536: PUSH
76537: LD_INT 7
76539: NEG
76540: PPUSH
76541: LD_INT 7
76543: PPUSH
76544: CALL_OW 12
76548: ST_TO_ADDR
// animal := CreateHuman ;
76549: LD_ADDR_VAR 0 12
76553: PUSH
76554: CALL_OW 44
76558: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76559: LD_VAR 0 12
76563: PPUSH
76564: LD_VAR 0 8
76568: PPUSH
76569: LD_INT 0
76571: PPUSH
76572: CALL 78492 0 3
// end ;
76576: GO 76513
76578: POP
76579: POP
// if apemans then
76580: LD_VAR 0 3
76584: IFFALSE 76707
// for i = 1 to apemans do
76586: LD_ADDR_VAR 0 11
76590: PUSH
76591: DOUBLE
76592: LD_INT 1
76594: DEC
76595: ST_TO_ADDR
76596: LD_VAR 0 3
76600: PUSH
76601: FOR_TO
76602: IFFALSE 76705
// begin hc_class = class_apeman ;
76604: LD_ADDR_OWVAR 28
76608: PUSH
76609: LD_INT 12
76611: ST_TO_ADDR
// hc_gallery =  ;
76612: LD_ADDR_OWVAR 33
76616: PUSH
76617: LD_STRING 
76619: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
76620: LD_ADDR_OWVAR 35
76624: PUSH
76625: LD_INT 2
76627: NEG
76628: PPUSH
76629: LD_INT 2
76631: PPUSH
76632: CALL_OW 12
76636: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
76637: LD_ADDR_OWVAR 31
76641: PUSH
76642: LD_INT 1
76644: PPUSH
76645: LD_INT 3
76647: PPUSH
76648: CALL_OW 12
76652: PUSH
76653: LD_INT 1
76655: PPUSH
76656: LD_INT 3
76658: PPUSH
76659: CALL_OW 12
76663: PUSH
76664: LD_INT 0
76666: PUSH
76667: LD_INT 0
76669: PUSH
76670: EMPTY
76671: LIST
76672: LIST
76673: LIST
76674: LIST
76675: ST_TO_ADDR
// animal := CreateHuman ;
76676: LD_ADDR_VAR 0 12
76680: PUSH
76681: CALL_OW 44
76685: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76686: LD_VAR 0 12
76690: PPUSH
76691: LD_VAR 0 8
76695: PPUSH
76696: LD_INT 0
76698: PPUSH
76699: CALL 78492 0 3
// end ;
76703: GO 76601
76705: POP
76706: POP
// if enchidnas then
76707: LD_VAR 0 4
76711: IFFALSE 76778
// for i = 1 to enchidnas do
76713: LD_ADDR_VAR 0 11
76717: PUSH
76718: DOUBLE
76719: LD_INT 1
76721: DEC
76722: ST_TO_ADDR
76723: LD_VAR 0 4
76727: PUSH
76728: FOR_TO
76729: IFFALSE 76776
// begin hc_class = 13 ;
76731: LD_ADDR_OWVAR 28
76735: PUSH
76736: LD_INT 13
76738: ST_TO_ADDR
// hc_gallery =  ;
76739: LD_ADDR_OWVAR 33
76743: PUSH
76744: LD_STRING 
76746: ST_TO_ADDR
// animal := CreateHuman ;
76747: LD_ADDR_VAR 0 12
76751: PUSH
76752: CALL_OW 44
76756: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76757: LD_VAR 0 12
76761: PPUSH
76762: LD_VAR 0 8
76766: PPUSH
76767: LD_INT 0
76769: PPUSH
76770: CALL 78492 0 3
// end ;
76774: GO 76728
76776: POP
76777: POP
// if fishes then
76778: LD_VAR 0 7
76782: IFFALSE 76849
// for i = 1 to fishes do
76784: LD_ADDR_VAR 0 11
76788: PUSH
76789: DOUBLE
76790: LD_INT 1
76792: DEC
76793: ST_TO_ADDR
76794: LD_VAR 0 7
76798: PUSH
76799: FOR_TO
76800: IFFALSE 76847
// begin hc_class = 20 ;
76802: LD_ADDR_OWVAR 28
76806: PUSH
76807: LD_INT 20
76809: ST_TO_ADDR
// hc_gallery =  ;
76810: LD_ADDR_OWVAR 33
76814: PUSH
76815: LD_STRING 
76817: ST_TO_ADDR
// animal := CreateHuman ;
76818: LD_ADDR_VAR 0 12
76822: PUSH
76823: CALL_OW 44
76827: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
76828: LD_VAR 0 12
76832: PPUSH
76833: LD_VAR 0 9
76837: PPUSH
76838: LD_INT 0
76840: PPUSH
76841: CALL 78492 0 3
// end ;
76845: GO 76799
76847: POP
76848: POP
// end ;
76849: LD_VAR 0 10
76853: RET
// export function WantHeal ( sci , unit ) ; begin
76854: LD_INT 0
76856: PPUSH
// if GetTaskList ( sci ) > 0 then
76857: LD_VAR 0 1
76861: PPUSH
76862: CALL_OW 437
76866: PUSH
76867: LD_INT 0
76869: GREATER
76870: IFFALSE 76942
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
76872: LD_VAR 0 1
76876: PPUSH
76877: CALL_OW 437
76881: PUSH
76882: LD_INT 1
76884: ARRAY
76885: PUSH
76886: LD_INT 1
76888: ARRAY
76889: PUSH
76890: LD_STRING l
76892: EQUAL
76893: IFFALSE 76920
76895: PUSH
76896: LD_VAR 0 1
76900: PPUSH
76901: CALL_OW 437
76905: PUSH
76906: LD_INT 1
76908: ARRAY
76909: PUSH
76910: LD_INT 4
76912: ARRAY
76913: PUSH
76914: LD_VAR 0 2
76918: EQUAL
76919: AND
76920: IFFALSE 76932
// result := true else
76922: LD_ADDR_VAR 0 3
76926: PUSH
76927: LD_INT 1
76929: ST_TO_ADDR
76930: GO 76940
// result := false ;
76932: LD_ADDR_VAR 0 3
76936: PUSH
76937: LD_INT 0
76939: ST_TO_ADDR
// end else
76940: GO 76950
// result := false ;
76942: LD_ADDR_VAR 0 3
76946: PUSH
76947: LD_INT 0
76949: ST_TO_ADDR
// end ;
76950: LD_VAR 0 3
76954: RET
// export function HealTarget ( sci ) ; begin
76955: LD_INT 0
76957: PPUSH
// if not sci then
76958: LD_VAR 0 1
76962: NOT
76963: IFFALSE 76967
// exit ;
76965: GO 77032
// result := 0 ;
76967: LD_ADDR_VAR 0 2
76971: PUSH
76972: LD_INT 0
76974: ST_TO_ADDR
// if GetTaskList ( sci ) then
76975: LD_VAR 0 1
76979: PPUSH
76980: CALL_OW 437
76984: IFFALSE 77032
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
76986: LD_VAR 0 1
76990: PPUSH
76991: CALL_OW 437
76995: PUSH
76996: LD_INT 1
76998: ARRAY
76999: PUSH
77000: LD_INT 1
77002: ARRAY
77003: PUSH
77004: LD_STRING l
77006: EQUAL
77007: IFFALSE 77032
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
77009: LD_ADDR_VAR 0 2
77013: PUSH
77014: LD_VAR 0 1
77018: PPUSH
77019: CALL_OW 437
77023: PUSH
77024: LD_INT 1
77026: ARRAY
77027: PUSH
77028: LD_INT 4
77030: ARRAY
77031: ST_TO_ADDR
// end ;
77032: LD_VAR 0 2
77036: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
77037: LD_INT 0
77039: PPUSH
77040: PPUSH
77041: PPUSH
77042: PPUSH
// if not base_units then
77043: LD_VAR 0 1
77047: NOT
77048: IFFALSE 77052
// exit ;
77050: GO 77139
// result := false ;
77052: LD_ADDR_VAR 0 2
77056: PUSH
77057: LD_INT 0
77059: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
77060: LD_ADDR_VAR 0 5
77064: PUSH
77065: LD_VAR 0 1
77069: PPUSH
77070: LD_INT 21
77072: PUSH
77073: LD_INT 3
77075: PUSH
77076: EMPTY
77077: LIST
77078: LIST
77079: PPUSH
77080: CALL_OW 72
77084: ST_TO_ADDR
// if not tmp then
77085: LD_VAR 0 5
77089: NOT
77090: IFFALSE 77094
// exit ;
77092: GO 77139
// for i in tmp do
77094: LD_ADDR_VAR 0 3
77098: PUSH
77099: LD_VAR 0 5
77103: PUSH
77104: FOR_IN
77105: IFFALSE 77137
// begin result := EnemyInRange ( i , 22 ) ;
77107: LD_ADDR_VAR 0 2
77111: PUSH
77112: LD_VAR 0 3
77116: PPUSH
77117: LD_INT 22
77119: PPUSH
77120: CALL 74564 0 2
77124: ST_TO_ADDR
// if result then
77125: LD_VAR 0 2
77129: IFFALSE 77135
// exit ;
77131: POP
77132: POP
77133: GO 77139
// end ;
77135: GO 77104
77137: POP
77138: POP
// end ;
77139: LD_VAR 0 2
77143: RET
// export function FilterByTag ( units , tag ) ; begin
77144: LD_INT 0
77146: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
77147: LD_ADDR_VAR 0 3
77151: PUSH
77152: LD_VAR 0 1
77156: PPUSH
77157: LD_INT 120
77159: PUSH
77160: LD_VAR 0 2
77164: PUSH
77165: EMPTY
77166: LIST
77167: LIST
77168: PPUSH
77169: CALL_OW 72
77173: ST_TO_ADDR
// end ;
77174: LD_VAR 0 3
77178: RET
// export function IsDriver ( un ) ; begin
77179: LD_INT 0
77181: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
77182: LD_ADDR_VAR 0 2
77186: PUSH
77187: LD_VAR 0 1
77191: PUSH
77192: LD_INT 55
77194: PUSH
77195: EMPTY
77196: LIST
77197: PPUSH
77198: CALL_OW 69
77202: IN
77203: ST_TO_ADDR
// end ;
77204: LD_VAR 0 2
77208: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
77209: LD_INT 0
77211: PPUSH
77212: PPUSH
// list := [ ] ;
77213: LD_ADDR_VAR 0 5
77217: PUSH
77218: EMPTY
77219: ST_TO_ADDR
// case d of 0 :
77220: LD_VAR 0 3
77224: PUSH
77225: LD_INT 0
77227: DOUBLE
77228: EQUAL
77229: IFTRUE 77233
77231: GO 77366
77233: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
77234: LD_ADDR_VAR 0 5
77238: PUSH
77239: LD_VAR 0 1
77243: PUSH
77244: LD_INT 4
77246: MINUS
77247: PUSH
77248: LD_VAR 0 2
77252: PUSH
77253: LD_INT 4
77255: MINUS
77256: PUSH
77257: LD_INT 2
77259: PUSH
77260: EMPTY
77261: LIST
77262: LIST
77263: LIST
77264: PUSH
77265: LD_VAR 0 1
77269: PUSH
77270: LD_INT 3
77272: MINUS
77273: PUSH
77274: LD_VAR 0 2
77278: PUSH
77279: LD_INT 1
77281: PUSH
77282: EMPTY
77283: LIST
77284: LIST
77285: LIST
77286: PUSH
77287: LD_VAR 0 1
77291: PUSH
77292: LD_INT 4
77294: PLUS
77295: PUSH
77296: LD_VAR 0 2
77300: PUSH
77301: LD_INT 4
77303: PUSH
77304: EMPTY
77305: LIST
77306: LIST
77307: LIST
77308: PUSH
77309: LD_VAR 0 1
77313: PUSH
77314: LD_INT 3
77316: PLUS
77317: PUSH
77318: LD_VAR 0 2
77322: PUSH
77323: LD_INT 3
77325: PLUS
77326: PUSH
77327: LD_INT 5
77329: PUSH
77330: EMPTY
77331: LIST
77332: LIST
77333: LIST
77334: PUSH
77335: LD_VAR 0 1
77339: PUSH
77340: LD_VAR 0 2
77344: PUSH
77345: LD_INT 4
77347: PLUS
77348: PUSH
77349: LD_INT 0
77351: PUSH
77352: EMPTY
77353: LIST
77354: LIST
77355: LIST
77356: PUSH
77357: EMPTY
77358: LIST
77359: LIST
77360: LIST
77361: LIST
77362: LIST
77363: ST_TO_ADDR
// end ; 1 :
77364: GO 78064
77366: LD_INT 1
77368: DOUBLE
77369: EQUAL
77370: IFTRUE 77374
77372: GO 77507
77374: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
77375: LD_ADDR_VAR 0 5
77379: PUSH
77380: LD_VAR 0 1
77384: PUSH
77385: LD_VAR 0 2
77389: PUSH
77390: LD_INT 4
77392: MINUS
77393: PUSH
77394: LD_INT 3
77396: PUSH
77397: EMPTY
77398: LIST
77399: LIST
77400: LIST
77401: PUSH
77402: LD_VAR 0 1
77406: PUSH
77407: LD_INT 3
77409: MINUS
77410: PUSH
77411: LD_VAR 0 2
77415: PUSH
77416: LD_INT 3
77418: MINUS
77419: PUSH
77420: LD_INT 2
77422: PUSH
77423: EMPTY
77424: LIST
77425: LIST
77426: LIST
77427: PUSH
77428: LD_VAR 0 1
77432: PUSH
77433: LD_INT 4
77435: MINUS
77436: PUSH
77437: LD_VAR 0 2
77441: PUSH
77442: LD_INT 1
77444: PUSH
77445: EMPTY
77446: LIST
77447: LIST
77448: LIST
77449: PUSH
77450: LD_VAR 0 1
77454: PUSH
77455: LD_VAR 0 2
77459: PUSH
77460: LD_INT 3
77462: PLUS
77463: PUSH
77464: LD_INT 0
77466: PUSH
77467: EMPTY
77468: LIST
77469: LIST
77470: LIST
77471: PUSH
77472: LD_VAR 0 1
77476: PUSH
77477: LD_INT 4
77479: PLUS
77480: PUSH
77481: LD_VAR 0 2
77485: PUSH
77486: LD_INT 4
77488: PLUS
77489: PUSH
77490: LD_INT 5
77492: PUSH
77493: EMPTY
77494: LIST
77495: LIST
77496: LIST
77497: PUSH
77498: EMPTY
77499: LIST
77500: LIST
77501: LIST
77502: LIST
77503: LIST
77504: ST_TO_ADDR
// end ; 2 :
77505: GO 78064
77507: LD_INT 2
77509: DOUBLE
77510: EQUAL
77511: IFTRUE 77515
77513: GO 77644
77515: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
77516: LD_ADDR_VAR 0 5
77520: PUSH
77521: LD_VAR 0 1
77525: PUSH
77526: LD_VAR 0 2
77530: PUSH
77531: LD_INT 3
77533: MINUS
77534: PUSH
77535: LD_INT 3
77537: PUSH
77538: EMPTY
77539: LIST
77540: LIST
77541: LIST
77542: PUSH
77543: LD_VAR 0 1
77547: PUSH
77548: LD_INT 4
77550: PLUS
77551: PUSH
77552: LD_VAR 0 2
77556: PUSH
77557: LD_INT 4
77559: PUSH
77560: EMPTY
77561: LIST
77562: LIST
77563: LIST
77564: PUSH
77565: LD_VAR 0 1
77569: PUSH
77570: LD_VAR 0 2
77574: PUSH
77575: LD_INT 4
77577: PLUS
77578: PUSH
77579: LD_INT 0
77581: PUSH
77582: EMPTY
77583: LIST
77584: LIST
77585: LIST
77586: PUSH
77587: LD_VAR 0 1
77591: PUSH
77592: LD_INT 3
77594: MINUS
77595: PUSH
77596: LD_VAR 0 2
77600: PUSH
77601: LD_INT 1
77603: PUSH
77604: EMPTY
77605: LIST
77606: LIST
77607: LIST
77608: PUSH
77609: LD_VAR 0 1
77613: PUSH
77614: LD_INT 4
77616: MINUS
77617: PUSH
77618: LD_VAR 0 2
77622: PUSH
77623: LD_INT 4
77625: MINUS
77626: PUSH
77627: LD_INT 2
77629: PUSH
77630: EMPTY
77631: LIST
77632: LIST
77633: LIST
77634: PUSH
77635: EMPTY
77636: LIST
77637: LIST
77638: LIST
77639: LIST
77640: LIST
77641: ST_TO_ADDR
// end ; 3 :
77642: GO 78064
77644: LD_INT 3
77646: DOUBLE
77647: EQUAL
77648: IFTRUE 77652
77650: GO 77785
77652: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
77653: LD_ADDR_VAR 0 5
77657: PUSH
77658: LD_VAR 0 1
77662: PUSH
77663: LD_INT 3
77665: PLUS
77666: PUSH
77667: LD_VAR 0 2
77671: PUSH
77672: LD_INT 4
77674: PUSH
77675: EMPTY
77676: LIST
77677: LIST
77678: LIST
77679: PUSH
77680: LD_VAR 0 1
77684: PUSH
77685: LD_INT 4
77687: PLUS
77688: PUSH
77689: LD_VAR 0 2
77693: PUSH
77694: LD_INT 4
77696: PLUS
77697: PUSH
77698: LD_INT 5
77700: PUSH
77701: EMPTY
77702: LIST
77703: LIST
77704: LIST
77705: PUSH
77706: LD_VAR 0 1
77710: PUSH
77711: LD_INT 4
77713: MINUS
77714: PUSH
77715: LD_VAR 0 2
77719: PUSH
77720: LD_INT 1
77722: PUSH
77723: EMPTY
77724: LIST
77725: LIST
77726: LIST
77727: PUSH
77728: LD_VAR 0 1
77732: PUSH
77733: LD_VAR 0 2
77737: PUSH
77738: LD_INT 4
77740: MINUS
77741: PUSH
77742: LD_INT 3
77744: PUSH
77745: EMPTY
77746: LIST
77747: LIST
77748: LIST
77749: PUSH
77750: LD_VAR 0 1
77754: PUSH
77755: LD_INT 3
77757: MINUS
77758: PUSH
77759: LD_VAR 0 2
77763: PUSH
77764: LD_INT 3
77766: MINUS
77767: PUSH
77768: LD_INT 2
77770: PUSH
77771: EMPTY
77772: LIST
77773: LIST
77774: LIST
77775: PUSH
77776: EMPTY
77777: LIST
77778: LIST
77779: LIST
77780: LIST
77781: LIST
77782: ST_TO_ADDR
// end ; 4 :
77783: GO 78064
77785: LD_INT 4
77787: DOUBLE
77788: EQUAL
77789: IFTRUE 77793
77791: GO 77926
77793: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
77794: LD_ADDR_VAR 0 5
77798: PUSH
77799: LD_VAR 0 1
77803: PUSH
77804: LD_VAR 0 2
77808: PUSH
77809: LD_INT 4
77811: PLUS
77812: PUSH
77813: LD_INT 0
77815: PUSH
77816: EMPTY
77817: LIST
77818: LIST
77819: LIST
77820: PUSH
77821: LD_VAR 0 1
77825: PUSH
77826: LD_INT 3
77828: PLUS
77829: PUSH
77830: LD_VAR 0 2
77834: PUSH
77835: LD_INT 3
77837: PLUS
77838: PUSH
77839: LD_INT 5
77841: PUSH
77842: EMPTY
77843: LIST
77844: LIST
77845: LIST
77846: PUSH
77847: LD_VAR 0 1
77851: PUSH
77852: LD_INT 4
77854: PLUS
77855: PUSH
77856: LD_VAR 0 2
77860: PUSH
77861: LD_INT 4
77863: PUSH
77864: EMPTY
77865: LIST
77866: LIST
77867: LIST
77868: PUSH
77869: LD_VAR 0 1
77873: PUSH
77874: LD_VAR 0 2
77878: PUSH
77879: LD_INT 3
77881: MINUS
77882: PUSH
77883: LD_INT 3
77885: PUSH
77886: EMPTY
77887: LIST
77888: LIST
77889: LIST
77890: PUSH
77891: LD_VAR 0 1
77895: PUSH
77896: LD_INT 4
77898: MINUS
77899: PUSH
77900: LD_VAR 0 2
77904: PUSH
77905: LD_INT 4
77907: MINUS
77908: PUSH
77909: LD_INT 2
77911: PUSH
77912: EMPTY
77913: LIST
77914: LIST
77915: LIST
77916: PUSH
77917: EMPTY
77918: LIST
77919: LIST
77920: LIST
77921: LIST
77922: LIST
77923: ST_TO_ADDR
// end ; 5 :
77924: GO 78064
77926: LD_INT 5
77928: DOUBLE
77929: EQUAL
77930: IFTRUE 77934
77932: GO 78063
77934: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
77935: LD_ADDR_VAR 0 5
77939: PUSH
77940: LD_VAR 0 1
77944: PUSH
77945: LD_INT 4
77947: MINUS
77948: PUSH
77949: LD_VAR 0 2
77953: PUSH
77954: LD_INT 1
77956: PUSH
77957: EMPTY
77958: LIST
77959: LIST
77960: LIST
77961: PUSH
77962: LD_VAR 0 1
77966: PUSH
77967: LD_VAR 0 2
77971: PUSH
77972: LD_INT 4
77974: MINUS
77975: PUSH
77976: LD_INT 3
77978: PUSH
77979: EMPTY
77980: LIST
77981: LIST
77982: LIST
77983: PUSH
77984: LD_VAR 0 1
77988: PUSH
77989: LD_INT 4
77991: PLUS
77992: PUSH
77993: LD_VAR 0 2
77997: PUSH
77998: LD_INT 4
78000: PLUS
78001: PUSH
78002: LD_INT 5
78004: PUSH
78005: EMPTY
78006: LIST
78007: LIST
78008: LIST
78009: PUSH
78010: LD_VAR 0 1
78014: PUSH
78015: LD_INT 3
78017: PLUS
78018: PUSH
78019: LD_VAR 0 2
78023: PUSH
78024: LD_INT 4
78026: PUSH
78027: EMPTY
78028: LIST
78029: LIST
78030: LIST
78031: PUSH
78032: LD_VAR 0 1
78036: PUSH
78037: LD_VAR 0 2
78041: PUSH
78042: LD_INT 3
78044: PLUS
78045: PUSH
78046: LD_INT 0
78048: PUSH
78049: EMPTY
78050: LIST
78051: LIST
78052: LIST
78053: PUSH
78054: EMPTY
78055: LIST
78056: LIST
78057: LIST
78058: LIST
78059: LIST
78060: ST_TO_ADDR
// end ; end ;
78061: GO 78064
78063: POP
// result := list ;
78064: LD_ADDR_VAR 0 4
78068: PUSH
78069: LD_VAR 0 5
78073: ST_TO_ADDR
// end ;
78074: LD_VAR 0 4
78078: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
78079: LD_INT 0
78081: PPUSH
78082: PPUSH
78083: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
78084: LD_VAR 0 1
78088: NOT
78089: IFTRUE 78117
78091: PUSH
78092: LD_VAR 0 2
78096: PUSH
78097: LD_INT 1
78099: PUSH
78100: LD_INT 2
78102: PUSH
78103: LD_INT 3
78105: PUSH
78106: LD_INT 4
78108: PUSH
78109: EMPTY
78110: LIST
78111: LIST
78112: LIST
78113: LIST
78114: IN
78115: NOT
78116: OR
78117: IFFALSE 78121
// exit ;
78119: GO 78204
// tmp := [ ] ;
78121: LD_ADDR_VAR 0 5
78125: PUSH
78126: EMPTY
78127: ST_TO_ADDR
// for i in units do
78128: LD_ADDR_VAR 0 4
78132: PUSH
78133: LD_VAR 0 1
78137: PUSH
78138: FOR_IN
78139: IFFALSE 78173
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
78141: LD_ADDR_VAR 0 5
78145: PUSH
78146: LD_VAR 0 5
78150: PPUSH
78151: LD_VAR 0 4
78155: PPUSH
78156: LD_VAR 0 2
78160: PPUSH
78161: CALL_OW 259
78165: PPUSH
78166: CALL 79599 0 2
78170: ST_TO_ADDR
78171: GO 78138
78173: POP
78174: POP
// if not tmp then
78175: LD_VAR 0 5
78179: NOT
78180: IFFALSE 78184
// exit ;
78182: GO 78204
// result := SortListByListDesc ( units , tmp ) ;
78184: LD_ADDR_VAR 0 3
78188: PUSH
78189: LD_VAR 0 1
78193: PPUSH
78194: LD_VAR 0 5
78198: PPUSH
78199: CALL_OW 77
78203: ST_TO_ADDR
// end ;
78204: LD_VAR 0 3
78208: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
78209: LD_INT 0
78211: PPUSH
78212: PPUSH
78213: PPUSH
// result := false ;
78214: LD_ADDR_VAR 0 3
78218: PUSH
78219: LD_INT 0
78221: ST_TO_ADDR
// if not building then
78222: LD_VAR 0 2
78226: NOT
78227: IFFALSE 78231
// exit ;
78229: GO 78375
// x := GetX ( building ) ;
78231: LD_ADDR_VAR 0 4
78235: PUSH
78236: LD_VAR 0 2
78240: PPUSH
78241: CALL_OW 250
78245: ST_TO_ADDR
// y := GetY ( building ) ;
78246: LD_ADDR_VAR 0 5
78250: PUSH
78251: LD_VAR 0 2
78255: PPUSH
78256: CALL_OW 251
78260: ST_TO_ADDR
// if not x or not y then
78261: LD_VAR 0 4
78265: NOT
78266: IFTRUE 78275
78268: PUSH
78269: LD_VAR 0 5
78273: NOT
78274: OR
78275: IFFALSE 78279
// exit ;
78277: GO 78375
// if GetTaskList ( unit ) then
78279: LD_VAR 0 1
78283: PPUSH
78284: CALL_OW 437
78288: IFFALSE 78375
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78290: LD_STRING e
78292: PUSH
78293: LD_VAR 0 1
78297: PPUSH
78298: CALL_OW 437
78302: PUSH
78303: LD_INT 1
78305: ARRAY
78306: PUSH
78307: LD_INT 1
78309: ARRAY
78310: EQUAL
78311: IFFALSE 78338
78313: PUSH
78314: LD_VAR 0 4
78318: PUSH
78319: LD_VAR 0 1
78323: PPUSH
78324: CALL_OW 437
78328: PUSH
78329: LD_INT 1
78331: ARRAY
78332: PUSH
78333: LD_INT 2
78335: ARRAY
78336: EQUAL
78337: AND
78338: IFFALSE 78365
78340: PUSH
78341: LD_VAR 0 5
78345: PUSH
78346: LD_VAR 0 1
78350: PPUSH
78351: CALL_OW 437
78355: PUSH
78356: LD_INT 1
78358: ARRAY
78359: PUSH
78360: LD_INT 3
78362: ARRAY
78363: EQUAL
78364: AND
78365: IFFALSE 78375
// result := true end ;
78367: LD_ADDR_VAR 0 3
78371: PUSH
78372: LD_INT 1
78374: ST_TO_ADDR
// end ;
78375: LD_VAR 0 3
78379: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
78380: LD_INT 0
78382: PPUSH
// result := false ;
78383: LD_ADDR_VAR 0 4
78387: PUSH
78388: LD_INT 0
78390: ST_TO_ADDR
// if GetTaskList ( unit ) then
78391: LD_VAR 0 1
78395: PPUSH
78396: CALL_OW 437
78400: IFFALSE 78487
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78402: LD_STRING M
78404: PUSH
78405: LD_VAR 0 1
78409: PPUSH
78410: CALL_OW 437
78414: PUSH
78415: LD_INT 1
78417: ARRAY
78418: PUSH
78419: LD_INT 1
78421: ARRAY
78422: EQUAL
78423: IFFALSE 78450
78425: PUSH
78426: LD_VAR 0 2
78430: PUSH
78431: LD_VAR 0 1
78435: PPUSH
78436: CALL_OW 437
78440: PUSH
78441: LD_INT 1
78443: ARRAY
78444: PUSH
78445: LD_INT 2
78447: ARRAY
78448: EQUAL
78449: AND
78450: IFFALSE 78477
78452: PUSH
78453: LD_VAR 0 3
78457: PUSH
78458: LD_VAR 0 1
78462: PPUSH
78463: CALL_OW 437
78467: PUSH
78468: LD_INT 1
78470: ARRAY
78471: PUSH
78472: LD_INT 3
78474: ARRAY
78475: EQUAL
78476: AND
78477: IFFALSE 78487
// result := true ;
78479: LD_ADDR_VAR 0 4
78483: PUSH
78484: LD_INT 1
78486: ST_TO_ADDR
// end ; end ;
78487: LD_VAR 0 4
78491: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
78492: LD_INT 0
78494: PPUSH
78495: PPUSH
78496: PPUSH
78497: PPUSH
// if not unit or not area then
78498: LD_VAR 0 1
78502: NOT
78503: IFTRUE 78512
78505: PUSH
78506: LD_VAR 0 2
78510: NOT
78511: OR
78512: IFFALSE 78516
// exit ;
78514: GO 78692
// tmp := AreaToList ( area , i ) ;
78516: LD_ADDR_VAR 0 6
78520: PUSH
78521: LD_VAR 0 2
78525: PPUSH
78526: LD_VAR 0 5
78530: PPUSH
78531: CALL_OW 517
78535: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
78536: LD_ADDR_VAR 0 5
78540: PUSH
78541: DOUBLE
78542: LD_INT 1
78544: DEC
78545: ST_TO_ADDR
78546: LD_VAR 0 6
78550: PUSH
78551: LD_INT 1
78553: ARRAY
78554: PUSH
78555: FOR_TO
78556: IFFALSE 78690
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
78558: LD_ADDR_VAR 0 7
78562: PUSH
78563: LD_VAR 0 6
78567: PUSH
78568: LD_INT 1
78570: ARRAY
78571: PUSH
78572: LD_VAR 0 5
78576: ARRAY
78577: PUSH
78578: LD_VAR 0 6
78582: PUSH
78583: LD_INT 2
78585: ARRAY
78586: PUSH
78587: LD_VAR 0 5
78591: ARRAY
78592: PUSH
78593: EMPTY
78594: LIST
78595: LIST
78596: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
78597: LD_INT 92
78599: PUSH
78600: LD_VAR 0 7
78604: PUSH
78605: LD_INT 1
78607: ARRAY
78608: PUSH
78609: LD_VAR 0 7
78613: PUSH
78614: LD_INT 2
78616: ARRAY
78617: PUSH
78618: LD_INT 2
78620: PUSH
78621: EMPTY
78622: LIST
78623: LIST
78624: LIST
78625: LIST
78626: PPUSH
78627: CALL_OW 69
78631: PUSH
78632: LD_INT 0
78634: EQUAL
78635: IFFALSE 78688
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
78637: LD_VAR 0 1
78641: PPUSH
78642: LD_VAR 0 7
78646: PUSH
78647: LD_INT 1
78649: ARRAY
78650: PPUSH
78651: LD_VAR 0 7
78655: PUSH
78656: LD_INT 2
78658: ARRAY
78659: PPUSH
78660: LD_VAR 0 3
78664: PPUSH
78665: CALL_OW 48
// result := IsPlaced ( unit ) ;
78669: LD_ADDR_VAR 0 4
78673: PUSH
78674: LD_VAR 0 1
78678: PPUSH
78679: CALL_OW 305
78683: ST_TO_ADDR
// exit ;
78684: POP
78685: POP
78686: GO 78692
// end ; end ;
78688: GO 78555
78690: POP
78691: POP
// end ;
78692: LD_VAR 0 4
78696: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
78697: LD_INT 0
78699: PPUSH
78700: PPUSH
78701: PPUSH
// if not side or side > 8 then
78702: LD_VAR 0 1
78706: NOT
78707: IFTRUE 78719
78709: PUSH
78710: LD_VAR 0 1
78714: PUSH
78715: LD_INT 8
78717: GREATER
78718: OR
78719: IFFALSE 78723
// exit ;
78721: GO 78910
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
78723: LD_ADDR_VAR 0 4
78727: PUSH
78728: LD_INT 22
78730: PUSH
78731: LD_VAR 0 1
78735: PUSH
78736: EMPTY
78737: LIST
78738: LIST
78739: PUSH
78740: LD_INT 21
78742: PUSH
78743: LD_INT 3
78745: PUSH
78746: EMPTY
78747: LIST
78748: LIST
78749: PUSH
78750: EMPTY
78751: LIST
78752: LIST
78753: PPUSH
78754: CALL_OW 69
78758: ST_TO_ADDR
// if not tmp then
78759: LD_VAR 0 4
78763: NOT
78764: IFFALSE 78768
// exit ;
78766: GO 78910
// enable_addtolog := true ;
78768: LD_ADDR_OWVAR 81
78772: PUSH
78773: LD_INT 1
78775: ST_TO_ADDR
// AddToLog ( [ ) ;
78776: LD_STRING [
78778: PPUSH
78779: CALL_OW 561
// for i in tmp do
78783: LD_ADDR_VAR 0 3
78787: PUSH
78788: LD_VAR 0 4
78792: PUSH
78793: FOR_IN
78794: IFFALSE 78901
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
78796: LD_STRING [
78798: PUSH
78799: LD_VAR 0 3
78803: PPUSH
78804: CALL_OW 266
78808: STR
78809: PUSH
78810: LD_STRING , 
78812: STR
78813: PUSH
78814: LD_VAR 0 3
78818: PPUSH
78819: CALL_OW 250
78823: STR
78824: PUSH
78825: LD_STRING , 
78827: STR
78828: PUSH
78829: LD_VAR 0 3
78833: PPUSH
78834: CALL_OW 251
78838: STR
78839: PUSH
78840: LD_STRING , 
78842: STR
78843: PUSH
78844: LD_VAR 0 3
78848: PPUSH
78849: CALL_OW 254
78853: STR
78854: PUSH
78855: LD_STRING , 
78857: STR
78858: PUSH
78859: LD_VAR 0 3
78863: PPUSH
78864: LD_INT 1
78866: PPUSH
78867: CALL_OW 268
78871: STR
78872: PUSH
78873: LD_STRING , 
78875: STR
78876: PUSH
78877: LD_VAR 0 3
78881: PPUSH
78882: LD_INT 2
78884: PPUSH
78885: CALL_OW 268
78889: STR
78890: PUSH
78891: LD_STRING ],
78893: STR
78894: PPUSH
78895: CALL_OW 561
// end ;
78899: GO 78793
78901: POP
78902: POP
// AddToLog ( ]; ) ;
78903: LD_STRING ];
78905: PPUSH
78906: CALL_OW 561
// end ;
78910: LD_VAR 0 2
78914: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
78915: LD_INT 0
78917: PPUSH
78918: PPUSH
78919: PPUSH
78920: PPUSH
78921: PPUSH
// if not area or not rate or not max then
78922: LD_VAR 0 1
78926: NOT
78927: IFTRUE 78936
78929: PUSH
78930: LD_VAR 0 2
78934: NOT
78935: OR
78936: IFTRUE 78945
78938: PUSH
78939: LD_VAR 0 4
78943: NOT
78944: OR
78945: IFFALSE 78949
// exit ;
78947: GO 79138
// while 1 do
78949: LD_INT 1
78951: IFFALSE 79138
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
78953: LD_ADDR_VAR 0 9
78957: PUSH
78958: LD_VAR 0 1
78962: PPUSH
78963: LD_INT 1
78965: PPUSH
78966: CALL_OW 287
78970: PUSH
78971: LD_INT 10
78973: MUL
78974: ST_TO_ADDR
// r := rate / 10 ;
78975: LD_ADDR_VAR 0 7
78979: PUSH
78980: LD_VAR 0 2
78984: PUSH
78985: LD_INT 10
78987: DIVREAL
78988: ST_TO_ADDR
// time := 1 1$00 ;
78989: LD_ADDR_VAR 0 8
78993: PUSH
78994: LD_INT 2100
78996: ST_TO_ADDR
// if amount < min then
78997: LD_VAR 0 9
79001: PUSH
79002: LD_VAR 0 3
79006: LESS
79007: IFFALSE 79025
// r := r * 2 else
79009: LD_ADDR_VAR 0 7
79013: PUSH
79014: LD_VAR 0 7
79018: PUSH
79019: LD_INT 2
79021: MUL
79022: ST_TO_ADDR
79023: GO 79051
// if amount > max then
79025: LD_VAR 0 9
79029: PUSH
79030: LD_VAR 0 4
79034: GREATER
79035: IFFALSE 79051
// r := r / 2 ;
79037: LD_ADDR_VAR 0 7
79041: PUSH
79042: LD_VAR 0 7
79046: PUSH
79047: LD_INT 2
79049: DIVREAL
79050: ST_TO_ADDR
// time := time / r ;
79051: LD_ADDR_VAR 0 8
79055: PUSH
79056: LD_VAR 0 8
79060: PUSH
79061: LD_VAR 0 7
79065: DIVREAL
79066: ST_TO_ADDR
// if time < 0 then
79067: LD_VAR 0 8
79071: PUSH
79072: LD_INT 0
79074: LESS
79075: IFFALSE 79092
// time := time * - 1 ;
79077: LD_ADDR_VAR 0 8
79081: PUSH
79082: LD_VAR 0 8
79086: PUSH
79087: LD_INT 1
79089: NEG
79090: MUL
79091: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
79092: LD_VAR 0 8
79096: PUSH
79097: LD_INT 35
79099: PPUSH
79100: LD_INT 875
79102: PPUSH
79103: CALL_OW 12
79107: PLUS
79108: PPUSH
79109: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
79113: LD_INT 1
79115: PPUSH
79116: LD_INT 5
79118: PPUSH
79119: CALL_OW 12
79123: PPUSH
79124: LD_VAR 0 1
79128: PPUSH
79129: LD_INT 1
79131: PPUSH
79132: CALL_OW 55
// end ;
79136: GO 78949
// end ;
79138: LD_VAR 0 5
79142: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
79143: LD_INT 0
79145: PPUSH
79146: PPUSH
79147: PPUSH
79148: PPUSH
79149: PPUSH
79150: PPUSH
79151: PPUSH
79152: PPUSH
// if not turrets or not factories then
79153: LD_VAR 0 1
79157: NOT
79158: IFTRUE 79167
79160: PUSH
79161: LD_VAR 0 2
79165: NOT
79166: OR
79167: IFFALSE 79171
// exit ;
79169: GO 79478
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
79171: LD_ADDR_VAR 0 10
79175: PUSH
79176: LD_INT 5
79178: PUSH
79179: LD_INT 6
79181: PUSH
79182: EMPTY
79183: LIST
79184: LIST
79185: PUSH
79186: LD_INT 2
79188: PUSH
79189: LD_INT 4
79191: PUSH
79192: EMPTY
79193: LIST
79194: LIST
79195: PUSH
79196: LD_INT 3
79198: PUSH
79199: LD_INT 5
79201: PUSH
79202: EMPTY
79203: LIST
79204: LIST
79205: PUSH
79206: EMPTY
79207: LIST
79208: LIST
79209: LIST
79210: PUSH
79211: LD_INT 24
79213: PUSH
79214: LD_INT 25
79216: PUSH
79217: EMPTY
79218: LIST
79219: LIST
79220: PUSH
79221: LD_INT 23
79223: PUSH
79224: LD_INT 27
79226: PUSH
79227: EMPTY
79228: LIST
79229: LIST
79230: PUSH
79231: EMPTY
79232: LIST
79233: LIST
79234: PUSH
79235: LD_INT 42
79237: PUSH
79238: LD_INT 43
79240: PUSH
79241: EMPTY
79242: LIST
79243: LIST
79244: PUSH
79245: LD_INT 44
79247: PUSH
79248: LD_INT 46
79250: PUSH
79251: EMPTY
79252: LIST
79253: LIST
79254: PUSH
79255: LD_INT 45
79257: PUSH
79258: LD_INT 47
79260: PUSH
79261: EMPTY
79262: LIST
79263: LIST
79264: PUSH
79265: EMPTY
79266: LIST
79267: LIST
79268: LIST
79269: PUSH
79270: EMPTY
79271: LIST
79272: LIST
79273: LIST
79274: ST_TO_ADDR
// result := [ ] ;
79275: LD_ADDR_VAR 0 3
79279: PUSH
79280: EMPTY
79281: ST_TO_ADDR
// for i in turrets do
79282: LD_ADDR_VAR 0 4
79286: PUSH
79287: LD_VAR 0 1
79291: PUSH
79292: FOR_IN
79293: IFFALSE 79476
// begin nat := GetNation ( i ) ;
79295: LD_ADDR_VAR 0 7
79299: PUSH
79300: LD_VAR 0 4
79304: PPUSH
79305: CALL_OW 248
79309: ST_TO_ADDR
// weapon := 0 ;
79310: LD_ADDR_VAR 0 8
79314: PUSH
79315: LD_INT 0
79317: ST_TO_ADDR
// if not nat then
79318: LD_VAR 0 7
79322: NOT
79323: IFFALSE 79327
// continue ;
79325: GO 79292
// for j in list [ nat ] do
79327: LD_ADDR_VAR 0 5
79331: PUSH
79332: LD_VAR 0 10
79336: PUSH
79337: LD_VAR 0 7
79341: ARRAY
79342: PUSH
79343: FOR_IN
79344: IFFALSE 79385
// if GetBWeapon ( i ) = j [ 1 ] then
79346: LD_VAR 0 4
79350: PPUSH
79351: CALL_OW 269
79355: PUSH
79356: LD_VAR 0 5
79360: PUSH
79361: LD_INT 1
79363: ARRAY
79364: EQUAL
79365: IFFALSE 79383
// begin weapon := j [ 2 ] ;
79367: LD_ADDR_VAR 0 8
79371: PUSH
79372: LD_VAR 0 5
79376: PUSH
79377: LD_INT 2
79379: ARRAY
79380: ST_TO_ADDR
// break ;
79381: GO 79385
// end ;
79383: GO 79343
79385: POP
79386: POP
// if not weapon then
79387: LD_VAR 0 8
79391: NOT
79392: IFFALSE 79396
// continue ;
79394: GO 79292
// for k in factories do
79396: LD_ADDR_VAR 0 6
79400: PUSH
79401: LD_VAR 0 2
79405: PUSH
79406: FOR_IN
79407: IFFALSE 79472
// begin weapons := AvailableWeaponList ( k ) ;
79409: LD_ADDR_VAR 0 9
79413: PUSH
79414: LD_VAR 0 6
79418: PPUSH
79419: CALL_OW 478
79423: ST_TO_ADDR
// if not weapons then
79424: LD_VAR 0 9
79428: NOT
79429: IFFALSE 79433
// continue ;
79431: GO 79406
// if weapon in weapons then
79433: LD_VAR 0 8
79437: PUSH
79438: LD_VAR 0 9
79442: IN
79443: IFFALSE 79470
// begin result := [ i , weapon ] ;
79445: LD_ADDR_VAR 0 3
79449: PUSH
79450: LD_VAR 0 4
79454: PUSH
79455: LD_VAR 0 8
79459: PUSH
79460: EMPTY
79461: LIST
79462: LIST
79463: ST_TO_ADDR
// exit ;
79464: POP
79465: POP
79466: POP
79467: POP
79468: GO 79478
// end ; end ;
79470: GO 79406
79472: POP
79473: POP
// end ;
79474: GO 79292
79476: POP
79477: POP
// end ;
79478: LD_VAR 0 3
79482: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
79483: LD_INT 0
79485: PPUSH
// if not side or side > 8 then
79486: LD_VAR 0 3
79490: NOT
79491: IFTRUE 79503
79493: PUSH
79494: LD_VAR 0 3
79498: PUSH
79499: LD_INT 8
79501: GREATER
79502: OR
79503: IFFALSE 79507
// exit ;
79505: GO 79566
// if not range then
79507: LD_VAR 0 4
79511: NOT
79512: IFFALSE 79523
// range := - 12 ;
79514: LD_ADDR_VAR 0 4
79518: PUSH
79519: LD_INT 12
79521: NEG
79522: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
79523: LD_VAR 0 1
79527: PPUSH
79528: LD_VAR 0 2
79532: PPUSH
79533: LD_VAR 0 3
79537: PPUSH
79538: LD_VAR 0 4
79542: PPUSH
79543: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
79547: LD_VAR 0 1
79551: PPUSH
79552: LD_VAR 0 2
79556: PPUSH
79557: LD_VAR 0 3
79561: PPUSH
79562: CALL_OW 331
// end ;
79566: LD_VAR 0 5
79570: RET
// export function Video ( mode ) ; begin
79571: LD_INT 0
79573: PPUSH
// ingame_video = mode ;
79574: LD_ADDR_OWVAR 52
79578: PUSH
79579: LD_VAR 0 1
79583: ST_TO_ADDR
// interface_hidden = mode ;
79584: LD_ADDR_OWVAR 54
79588: PUSH
79589: LD_VAR 0 1
79593: ST_TO_ADDR
// end ;
79594: LD_VAR 0 2
79598: RET
// export function Join ( array , element ) ; begin
79599: LD_INT 0
79601: PPUSH
// result := Replace ( array , array + 1 , element ) ;
79602: LD_ADDR_VAR 0 3
79606: PUSH
79607: LD_VAR 0 1
79611: PPUSH
79612: LD_VAR 0 1
79616: PUSH
79617: LD_INT 1
79619: PLUS
79620: PPUSH
79621: LD_VAR 0 2
79625: PPUSH
79626: CALL_OW 1
79630: ST_TO_ADDR
// end ;
79631: LD_VAR 0 3
79635: RET
// export function JoinUnion ( array , element ) ; begin
79636: LD_INT 0
79638: PPUSH
// result := array union element ;
79639: LD_ADDR_VAR 0 3
79643: PUSH
79644: LD_VAR 0 1
79648: PUSH
79649: LD_VAR 0 2
79653: UNION
79654: ST_TO_ADDR
// end ;
79655: LD_VAR 0 3
79659: RET
// export function GetBehemoths ( side ) ; begin
79660: LD_INT 0
79662: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
79663: LD_ADDR_VAR 0 2
79667: PUSH
79668: LD_INT 22
79670: PUSH
79671: LD_VAR 0 1
79675: PUSH
79676: EMPTY
79677: LIST
79678: LIST
79679: PUSH
79680: LD_INT 31
79682: PUSH
79683: LD_INT 25
79685: PUSH
79686: EMPTY
79687: LIST
79688: LIST
79689: PUSH
79690: EMPTY
79691: LIST
79692: LIST
79693: PPUSH
79694: CALL_OW 69
79698: ST_TO_ADDR
// end ;
79699: LD_VAR 0 2
79703: RET
// export function Shuffle ( array ) ; var i , index ; begin
79704: LD_INT 0
79706: PPUSH
79707: PPUSH
79708: PPUSH
// result := [ ] ;
79709: LD_ADDR_VAR 0 2
79713: PUSH
79714: EMPTY
79715: ST_TO_ADDR
// if not array then
79716: LD_VAR 0 1
79720: NOT
79721: IFFALSE 79725
// exit ;
79723: GO 79824
// Randomize ;
79725: CALL_OW 10
// for i = array downto 1 do
79729: LD_ADDR_VAR 0 3
79733: PUSH
79734: DOUBLE
79735: LD_VAR 0 1
79739: INC
79740: ST_TO_ADDR
79741: LD_INT 1
79743: PUSH
79744: FOR_DOWNTO
79745: IFFALSE 79822
// begin index := rand ( 1 , array ) ;
79747: LD_ADDR_VAR 0 4
79751: PUSH
79752: LD_INT 1
79754: PPUSH
79755: LD_VAR 0 1
79759: PPUSH
79760: CALL_OW 12
79764: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
79765: LD_ADDR_VAR 0 2
79769: PUSH
79770: LD_VAR 0 2
79774: PPUSH
79775: LD_VAR 0 2
79779: PUSH
79780: LD_INT 1
79782: PLUS
79783: PPUSH
79784: LD_VAR 0 1
79788: PUSH
79789: LD_VAR 0 4
79793: ARRAY
79794: PPUSH
79795: CALL_OW 2
79799: ST_TO_ADDR
// array := Delete ( array , index ) ;
79800: LD_ADDR_VAR 0 1
79804: PUSH
79805: LD_VAR 0 1
79809: PPUSH
79810: LD_VAR 0 4
79814: PPUSH
79815: CALL_OW 3
79819: ST_TO_ADDR
// end ;
79820: GO 79744
79822: POP
79823: POP
// end ;
79824: LD_VAR 0 2
79828: RET
// export function GetBaseMaterials ( base ) ; begin
79829: LD_INT 0
79831: PPUSH
// result := [ 0 , 0 , 0 ] ;
79832: LD_ADDR_VAR 0 2
79836: PUSH
79837: LD_INT 0
79839: PUSH
79840: LD_INT 0
79842: PUSH
79843: LD_INT 0
79845: PUSH
79846: EMPTY
79847: LIST
79848: LIST
79849: LIST
79850: ST_TO_ADDR
// if not base then
79851: LD_VAR 0 1
79855: NOT
79856: IFFALSE 79860
// exit ;
79858: GO 79909
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
79860: LD_ADDR_VAR 0 2
79864: PUSH
79865: LD_VAR 0 1
79869: PPUSH
79870: LD_INT 1
79872: PPUSH
79873: CALL_OW 275
79877: PUSH
79878: LD_VAR 0 1
79882: PPUSH
79883: LD_INT 2
79885: PPUSH
79886: CALL_OW 275
79890: PUSH
79891: LD_VAR 0 1
79895: PPUSH
79896: LD_INT 3
79898: PPUSH
79899: CALL_OW 275
79903: PUSH
79904: EMPTY
79905: LIST
79906: LIST
79907: LIST
79908: ST_TO_ADDR
// end ;
79909: LD_VAR 0 2
79913: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
79914: LD_INT 0
79916: PPUSH
79917: PPUSH
// result := array ;
79918: LD_ADDR_VAR 0 3
79922: PUSH
79923: LD_VAR 0 1
79927: ST_TO_ADDR
// if size >= result then
79928: LD_VAR 0 2
79932: PUSH
79933: LD_VAR 0 3
79937: GREATEREQUAL
79938: IFFALSE 79942
// exit ;
79940: GO 79992
// if size then
79942: LD_VAR 0 2
79946: IFFALSE 79992
// for i := array downto size do
79948: LD_ADDR_VAR 0 4
79952: PUSH
79953: DOUBLE
79954: LD_VAR 0 1
79958: INC
79959: ST_TO_ADDR
79960: LD_VAR 0 2
79964: PUSH
79965: FOR_DOWNTO
79966: IFFALSE 79990
// result := Delete ( result , result ) ;
79968: LD_ADDR_VAR 0 3
79972: PUSH
79973: LD_VAR 0 3
79977: PPUSH
79978: LD_VAR 0 3
79982: PPUSH
79983: CALL_OW 3
79987: ST_TO_ADDR
79988: GO 79965
79990: POP
79991: POP
// end ;
79992: LD_VAR 0 3
79996: RET
// export function ComExit ( unit ) ; var tmp ; begin
79997: LD_INT 0
79999: PPUSH
80000: PPUSH
// if not IsInUnit ( unit ) then
80001: LD_VAR 0 1
80005: PPUSH
80006: CALL_OW 310
80010: NOT
80011: IFFALSE 80015
// exit ;
80013: GO 80075
// tmp := IsInUnit ( unit ) ;
80015: LD_ADDR_VAR 0 3
80019: PUSH
80020: LD_VAR 0 1
80024: PPUSH
80025: CALL_OW 310
80029: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
80030: LD_VAR 0 3
80034: PPUSH
80035: CALL_OW 247
80039: PUSH
80040: LD_INT 2
80042: EQUAL
80043: IFFALSE 80056
// ComExitVehicle ( unit ) else
80045: LD_VAR 0 1
80049: PPUSH
80050: CALL_OW 121
80054: GO 80065
// ComExitBuilding ( unit ) ;
80056: LD_VAR 0 1
80060: PPUSH
80061: CALL_OW 122
// result := tmp ;
80065: LD_ADDR_VAR 0 2
80069: PUSH
80070: LD_VAR 0 3
80074: ST_TO_ADDR
// end ;
80075: LD_VAR 0 2
80079: RET
// export function ComExitAll ( units ) ; var i ; begin
80080: LD_INT 0
80082: PPUSH
80083: PPUSH
// if not units then
80084: LD_VAR 0 1
80088: NOT
80089: IFFALSE 80093
// exit ;
80091: GO 80119
// for i in units do
80093: LD_ADDR_VAR 0 3
80097: PUSH
80098: LD_VAR 0 1
80102: PUSH
80103: FOR_IN
80104: IFFALSE 80117
// ComExit ( i ) ;
80106: LD_VAR 0 3
80110: PPUSH
80111: CALL 79997 0 1
80115: GO 80103
80117: POP
80118: POP
// end ;
80119: LD_VAR 0 2
80123: RET
// export function ResetHc ; begin
80124: LD_INT 0
80126: PPUSH
// InitHc ;
80127: CALL_OW 19
// hc_importance := 0 ;
80131: LD_ADDR_OWVAR 32
80135: PUSH
80136: LD_INT 0
80138: ST_TO_ADDR
// end ;
80139: LD_VAR 0 1
80143: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
80144: LD_INT 0
80146: PPUSH
80147: PPUSH
80148: PPUSH
// _x := ( x1 + x2 ) div 2 ;
80149: LD_ADDR_VAR 0 6
80153: PUSH
80154: LD_VAR 0 1
80158: PUSH
80159: LD_VAR 0 3
80163: PLUS
80164: PUSH
80165: LD_INT 2
80167: DIV
80168: ST_TO_ADDR
// if _x < 0 then
80169: LD_VAR 0 6
80173: PUSH
80174: LD_INT 0
80176: LESS
80177: IFFALSE 80194
// _x := _x * - 1 ;
80179: LD_ADDR_VAR 0 6
80183: PUSH
80184: LD_VAR 0 6
80188: PUSH
80189: LD_INT 1
80191: NEG
80192: MUL
80193: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
80194: LD_ADDR_VAR 0 7
80198: PUSH
80199: LD_VAR 0 2
80203: PUSH
80204: LD_VAR 0 4
80208: PLUS
80209: PUSH
80210: LD_INT 2
80212: DIV
80213: ST_TO_ADDR
// if _y < 0 then
80214: LD_VAR 0 7
80218: PUSH
80219: LD_INT 0
80221: LESS
80222: IFFALSE 80239
// _y := _y * - 1 ;
80224: LD_ADDR_VAR 0 7
80228: PUSH
80229: LD_VAR 0 7
80233: PUSH
80234: LD_INT 1
80236: NEG
80237: MUL
80238: ST_TO_ADDR
// result := [ _x , _y ] ;
80239: LD_ADDR_VAR 0 5
80243: PUSH
80244: LD_VAR 0 6
80248: PUSH
80249: LD_VAR 0 7
80253: PUSH
80254: EMPTY
80255: LIST
80256: LIST
80257: ST_TO_ADDR
// end ;
80258: LD_VAR 0 5
80262: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
80263: LD_INT 0
80265: PPUSH
80266: PPUSH
80267: PPUSH
80268: PPUSH
// task := GetTaskList ( unit ) ;
80269: LD_ADDR_VAR 0 7
80273: PUSH
80274: LD_VAR 0 1
80278: PPUSH
80279: CALL_OW 437
80283: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
80284: LD_VAR 0 7
80288: NOT
80289: IFFALSE 80308
80291: PUSH
80292: LD_VAR 0 1
80296: PPUSH
80297: LD_VAR 0 2
80301: PPUSH
80302: CALL_OW 308
80306: NOT
80307: AND
80308: IFFALSE 80312
// exit ;
80310: GO 80430
// if IsInArea ( unit , area ) then
80312: LD_VAR 0 1
80316: PPUSH
80317: LD_VAR 0 2
80321: PPUSH
80322: CALL_OW 308
80326: IFFALSE 80344
// begin ComMoveToArea ( unit , goAway ) ;
80328: LD_VAR 0 1
80332: PPUSH
80333: LD_VAR 0 3
80337: PPUSH
80338: CALL_OW 113
// exit ;
80342: GO 80430
// end ; if task [ 1 ] [ 1 ] <> M then
80344: LD_VAR 0 7
80348: PUSH
80349: LD_INT 1
80351: ARRAY
80352: PUSH
80353: LD_INT 1
80355: ARRAY
80356: PUSH
80357: LD_STRING M
80359: NONEQUAL
80360: IFFALSE 80364
// exit ;
80362: GO 80430
// x := task [ 1 ] [ 2 ] ;
80364: LD_ADDR_VAR 0 5
80368: PUSH
80369: LD_VAR 0 7
80373: PUSH
80374: LD_INT 1
80376: ARRAY
80377: PUSH
80378: LD_INT 2
80380: ARRAY
80381: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
80382: LD_ADDR_VAR 0 6
80386: PUSH
80387: LD_VAR 0 7
80391: PUSH
80392: LD_INT 1
80394: ARRAY
80395: PUSH
80396: LD_INT 3
80398: ARRAY
80399: ST_TO_ADDR
// if InArea ( x , y , area ) then
80400: LD_VAR 0 5
80404: PPUSH
80405: LD_VAR 0 6
80409: PPUSH
80410: LD_VAR 0 2
80414: PPUSH
80415: CALL_OW 309
80419: IFFALSE 80430
// ComStop ( unit ) ;
80421: LD_VAR 0 1
80425: PPUSH
80426: CALL_OW 141
// end ;
80430: LD_VAR 0 4
80434: RET
// export function Abs ( value ) ; begin
80435: LD_INT 0
80437: PPUSH
// result := value ;
80438: LD_ADDR_VAR 0 2
80442: PUSH
80443: LD_VAR 0 1
80447: ST_TO_ADDR
// if value < 0 then
80448: LD_VAR 0 1
80452: PUSH
80453: LD_INT 0
80455: LESS
80456: IFFALSE 80473
// result := value * - 1 ;
80458: LD_ADDR_VAR 0 2
80462: PUSH
80463: LD_VAR 0 1
80467: PUSH
80468: LD_INT 1
80470: NEG
80471: MUL
80472: ST_TO_ADDR
// end ;
80473: LD_VAR 0 2
80477: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
80478: LD_INT 0
80480: PPUSH
80481: PPUSH
80482: PPUSH
80483: PPUSH
80484: PPUSH
80485: PPUSH
80486: PPUSH
80487: PPUSH
// if not unit or not building then
80488: LD_VAR 0 1
80492: NOT
80493: IFTRUE 80502
80495: PUSH
80496: LD_VAR 0 2
80500: NOT
80501: OR
80502: IFFALSE 80506
// exit ;
80504: GO 80734
// x := GetX ( building ) ;
80506: LD_ADDR_VAR 0 4
80510: PUSH
80511: LD_VAR 0 2
80515: PPUSH
80516: CALL_OW 250
80520: ST_TO_ADDR
// y := GetY ( building ) ;
80521: LD_ADDR_VAR 0 6
80525: PUSH
80526: LD_VAR 0 2
80530: PPUSH
80531: CALL_OW 251
80535: ST_TO_ADDR
// d := GetDir ( building ) ;
80536: LD_ADDR_VAR 0 8
80540: PUSH
80541: LD_VAR 0 2
80545: PPUSH
80546: CALL_OW 254
80550: ST_TO_ADDR
// r := 4 ;
80551: LD_ADDR_VAR 0 9
80555: PUSH
80556: LD_INT 4
80558: ST_TO_ADDR
// for i := 1 to 5 do
80559: LD_ADDR_VAR 0 10
80563: PUSH
80564: DOUBLE
80565: LD_INT 1
80567: DEC
80568: ST_TO_ADDR
80569: LD_INT 5
80571: PUSH
80572: FOR_TO
80573: IFFALSE 80732
// begin _x := ShiftX ( x , d , r + i ) ;
80575: LD_ADDR_VAR 0 5
80579: PUSH
80580: LD_VAR 0 4
80584: PPUSH
80585: LD_VAR 0 8
80589: PPUSH
80590: LD_VAR 0 9
80594: PUSH
80595: LD_VAR 0 10
80599: PLUS
80600: PPUSH
80601: CALL_OW 272
80605: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
80606: LD_ADDR_VAR 0 7
80610: PUSH
80611: LD_VAR 0 6
80615: PPUSH
80616: LD_VAR 0 8
80620: PPUSH
80621: LD_VAR 0 9
80625: PUSH
80626: LD_VAR 0 10
80630: PLUS
80631: PPUSH
80632: CALL_OW 273
80636: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
80637: LD_VAR 0 5
80641: PPUSH
80642: LD_VAR 0 7
80646: PPUSH
80647: CALL_OW 488
80651: IFFALSE 80686
80653: PUSH
80654: LD_VAR 0 5
80658: PPUSH
80659: LD_VAR 0 7
80663: PPUSH
80664: CALL_OW 428
80668: PPUSH
80669: CALL_OW 247
80673: PUSH
80674: LD_INT 3
80676: PUSH
80677: LD_INT 2
80679: PUSH
80680: EMPTY
80681: LIST
80682: LIST
80683: IN
80684: NOT
80685: AND
80686: IFFALSE 80730
// begin ComMoveXY ( unit , _x , _y ) ;
80688: LD_VAR 0 1
80692: PPUSH
80693: LD_VAR 0 5
80697: PPUSH
80698: LD_VAR 0 7
80702: PPUSH
80703: CALL_OW 111
// result := [ _x , _y ] ;
80707: LD_ADDR_VAR 0 3
80711: PUSH
80712: LD_VAR 0 5
80716: PUSH
80717: LD_VAR 0 7
80721: PUSH
80722: EMPTY
80723: LIST
80724: LIST
80725: ST_TO_ADDR
// exit ;
80726: POP
80727: POP
80728: GO 80734
// end ; end ;
80730: GO 80572
80732: POP
80733: POP
// end ;
80734: LD_VAR 0 3
80738: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
80739: LD_INT 0
80741: PPUSH
80742: PPUSH
80743: PPUSH
// result := 0 ;
80744: LD_ADDR_VAR 0 3
80748: PUSH
80749: LD_INT 0
80751: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
80752: LD_VAR 0 1
80756: PUSH
80757: LD_INT 0
80759: LESS
80760: IFTRUE 80772
80762: PUSH
80763: LD_VAR 0 1
80767: PUSH
80768: LD_INT 8
80770: GREATER
80771: OR
80772: IFTRUE 80784
80774: PUSH
80775: LD_VAR 0 2
80779: PUSH
80780: LD_INT 0
80782: LESS
80783: OR
80784: IFTRUE 80796
80786: PUSH
80787: LD_VAR 0 2
80791: PUSH
80792: LD_INT 8
80794: GREATER
80795: OR
80796: IFFALSE 80800
// exit ;
80798: GO 80875
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
80800: LD_ADDR_VAR 0 4
80804: PUSH
80805: LD_INT 22
80807: PUSH
80808: LD_VAR 0 2
80812: PUSH
80813: EMPTY
80814: LIST
80815: LIST
80816: PPUSH
80817: CALL_OW 69
80821: PUSH
80822: FOR_IN
80823: IFFALSE 80873
// begin un := UnitShoot ( i ) ;
80825: LD_ADDR_VAR 0 5
80829: PUSH
80830: LD_VAR 0 4
80834: PPUSH
80835: CALL_OW 504
80839: ST_TO_ADDR
// if GetSide ( un ) = side1 then
80840: LD_VAR 0 5
80844: PPUSH
80845: CALL_OW 255
80849: PUSH
80850: LD_VAR 0 1
80854: EQUAL
80855: IFFALSE 80871
// begin result := un ;
80857: LD_ADDR_VAR 0 3
80861: PUSH
80862: LD_VAR 0 5
80866: ST_TO_ADDR
// exit ;
80867: POP
80868: POP
80869: GO 80875
// end ; end ;
80871: GO 80822
80873: POP
80874: POP
// end ;
80875: LD_VAR 0 3
80879: RET
// export function GetCargoBay ( units ) ; begin
80880: LD_INT 0
80882: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
80883: LD_ADDR_VAR 0 2
80887: PUSH
80888: LD_VAR 0 1
80892: PPUSH
80893: LD_INT 2
80895: PUSH
80896: LD_INT 34
80898: PUSH
80899: LD_INT 12
80901: PUSH
80902: EMPTY
80903: LIST
80904: LIST
80905: PUSH
80906: LD_INT 34
80908: PUSH
80909: LD_INT 51
80911: PUSH
80912: EMPTY
80913: LIST
80914: LIST
80915: PUSH
80916: LD_INT 34
80918: PUSH
80919: LD_INT 32
80921: PUSH
80922: EMPTY
80923: LIST
80924: LIST
80925: PUSH
80926: LD_INT 34
80928: PUSH
80929: LD_INT 89
80931: PUSH
80932: EMPTY
80933: LIST
80934: LIST
80935: PUSH
80936: EMPTY
80937: LIST
80938: LIST
80939: LIST
80940: LIST
80941: LIST
80942: PPUSH
80943: CALL_OW 72
80947: ST_TO_ADDR
// end ;
80948: LD_VAR 0 2
80952: RET
// export function Negate ( value ) ; begin
80953: LD_INT 0
80955: PPUSH
// result := not value ;
80956: LD_ADDR_VAR 0 2
80960: PUSH
80961: LD_VAR 0 1
80965: NOT
80966: ST_TO_ADDR
// end ;
80967: LD_VAR 0 2
80971: RET
// export function Inc ( value ) ; begin
80972: LD_INT 0
80974: PPUSH
// result := value + 1 ;
80975: LD_ADDR_VAR 0 2
80979: PUSH
80980: LD_VAR 0 1
80984: PUSH
80985: LD_INT 1
80987: PLUS
80988: ST_TO_ADDR
// end ;
80989: LD_VAR 0 2
80993: RET
// export function Dec ( value ) ; begin
80994: LD_INT 0
80996: PPUSH
// result := value - 1 ;
80997: LD_ADDR_VAR 0 2
81001: PUSH
81002: LD_VAR 0 1
81006: PUSH
81007: LD_INT 1
81009: MINUS
81010: ST_TO_ADDR
// end ;
81011: LD_VAR 0 2
81015: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
81016: LD_INT 0
81018: PPUSH
81019: PPUSH
81020: PPUSH
81021: PPUSH
81022: PPUSH
81023: PPUSH
81024: PPUSH
81025: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
81026: LD_VAR 0 1
81030: PPUSH
81031: LD_VAR 0 2
81035: PPUSH
81036: CALL_OW 488
81040: NOT
81041: IFTRUE 81060
81043: PUSH
81044: LD_VAR 0 3
81048: PPUSH
81049: LD_VAR 0 4
81053: PPUSH
81054: CALL_OW 488
81058: NOT
81059: OR
81060: IFFALSE 81073
// begin result := - 1 ;
81062: LD_ADDR_VAR 0 5
81066: PUSH
81067: LD_INT 1
81069: NEG
81070: ST_TO_ADDR
// exit ;
81071: GO 81308
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
81073: LD_ADDR_VAR 0 12
81077: PUSH
81078: LD_VAR 0 1
81082: PPUSH
81083: LD_VAR 0 2
81087: PPUSH
81088: LD_VAR 0 3
81092: PPUSH
81093: LD_VAR 0 4
81097: PPUSH
81098: CALL 80144 0 4
81102: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
81103: LD_ADDR_VAR 0 11
81107: PUSH
81108: LD_VAR 0 1
81112: PPUSH
81113: LD_VAR 0 2
81117: PPUSH
81118: LD_VAR 0 12
81122: PUSH
81123: LD_INT 1
81125: ARRAY
81126: PPUSH
81127: LD_VAR 0 12
81131: PUSH
81132: LD_INT 2
81134: ARRAY
81135: PPUSH
81136: CALL_OW 298
81140: ST_TO_ADDR
// distance := 9999 ;
81141: LD_ADDR_VAR 0 10
81145: PUSH
81146: LD_INT 9999
81148: ST_TO_ADDR
// for i := 0 to 5 do
81149: LD_ADDR_VAR 0 6
81153: PUSH
81154: DOUBLE
81155: LD_INT 0
81157: DEC
81158: ST_TO_ADDR
81159: LD_INT 5
81161: PUSH
81162: FOR_TO
81163: IFFALSE 81306
// begin _x := ShiftX ( x1 , i , centerDist ) ;
81165: LD_ADDR_VAR 0 7
81169: PUSH
81170: LD_VAR 0 1
81174: PPUSH
81175: LD_VAR 0 6
81179: PPUSH
81180: LD_VAR 0 11
81184: PPUSH
81185: CALL_OW 272
81189: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
81190: LD_ADDR_VAR 0 8
81194: PUSH
81195: LD_VAR 0 2
81199: PPUSH
81200: LD_VAR 0 6
81204: PPUSH
81205: LD_VAR 0 11
81209: PPUSH
81210: CALL_OW 273
81214: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
81215: LD_VAR 0 7
81219: PPUSH
81220: LD_VAR 0 8
81224: PPUSH
81225: CALL_OW 488
81229: NOT
81230: IFFALSE 81234
// continue ;
81232: GO 81162
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
81234: LD_ADDR_VAR 0 9
81238: PUSH
81239: LD_VAR 0 12
81243: PUSH
81244: LD_INT 1
81246: ARRAY
81247: PPUSH
81248: LD_VAR 0 12
81252: PUSH
81253: LD_INT 2
81255: ARRAY
81256: PPUSH
81257: LD_VAR 0 7
81261: PPUSH
81262: LD_VAR 0 8
81266: PPUSH
81267: CALL_OW 298
81271: ST_TO_ADDR
// if tmp < distance then
81272: LD_VAR 0 9
81276: PUSH
81277: LD_VAR 0 10
81281: LESS
81282: IFFALSE 81304
// begin result := i ;
81284: LD_ADDR_VAR 0 5
81288: PUSH
81289: LD_VAR 0 6
81293: ST_TO_ADDR
// distance := tmp ;
81294: LD_ADDR_VAR 0 10
81298: PUSH
81299: LD_VAR 0 9
81303: ST_TO_ADDR
// end ; end ;
81304: GO 81162
81306: POP
81307: POP
// end ;
81308: LD_VAR 0 5
81312: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
81313: LD_INT 0
81315: PPUSH
81316: PPUSH
// if not driver or not IsInUnit ( driver ) then
81317: LD_VAR 0 1
81321: NOT
81322: IFTRUE 81336
81324: PUSH
81325: LD_VAR 0 1
81329: PPUSH
81330: CALL_OW 310
81334: NOT
81335: OR
81336: IFFALSE 81340
// exit ;
81338: GO 81430
// vehicle := IsInUnit ( driver ) ;
81340: LD_ADDR_VAR 0 3
81344: PUSH
81345: LD_VAR 0 1
81349: PPUSH
81350: CALL_OW 310
81354: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
81355: LD_VAR 0 1
81359: PPUSH
81360: LD_STRING \
81362: PUSH
81363: LD_INT 0
81365: PUSH
81366: LD_INT 0
81368: PUSH
81369: LD_INT 0
81371: PUSH
81372: LD_INT 0
81374: PUSH
81375: LD_INT 0
81377: PUSH
81378: LD_INT 0
81380: PUSH
81381: EMPTY
81382: LIST
81383: LIST
81384: LIST
81385: LIST
81386: LIST
81387: LIST
81388: LIST
81389: PUSH
81390: LD_STRING E
81392: PUSH
81393: LD_INT 0
81395: PUSH
81396: LD_INT 0
81398: PUSH
81399: LD_VAR 0 3
81403: PUSH
81404: LD_INT 0
81406: PUSH
81407: LD_INT 0
81409: PUSH
81410: LD_INT 0
81412: PUSH
81413: EMPTY
81414: LIST
81415: LIST
81416: LIST
81417: LIST
81418: LIST
81419: LIST
81420: LIST
81421: PUSH
81422: EMPTY
81423: LIST
81424: LIST
81425: PPUSH
81426: CALL_OW 446
// end ;
81430: LD_VAR 0 2
81434: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
81435: LD_INT 0
81437: PPUSH
81438: PPUSH
// if not driver or not IsInUnit ( driver ) then
81439: LD_VAR 0 1
81443: NOT
81444: IFTRUE 81458
81446: PUSH
81447: LD_VAR 0 1
81451: PPUSH
81452: CALL_OW 310
81456: NOT
81457: OR
81458: IFFALSE 81462
// exit ;
81460: GO 81552
// vehicle := IsInUnit ( driver ) ;
81462: LD_ADDR_VAR 0 3
81466: PUSH
81467: LD_VAR 0 1
81471: PPUSH
81472: CALL_OW 310
81476: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
81477: LD_VAR 0 1
81481: PPUSH
81482: LD_STRING \
81484: PUSH
81485: LD_INT 0
81487: PUSH
81488: LD_INT 0
81490: PUSH
81491: LD_INT 0
81493: PUSH
81494: LD_INT 0
81496: PUSH
81497: LD_INT 0
81499: PUSH
81500: LD_INT 0
81502: PUSH
81503: EMPTY
81504: LIST
81505: LIST
81506: LIST
81507: LIST
81508: LIST
81509: LIST
81510: LIST
81511: PUSH
81512: LD_STRING E
81514: PUSH
81515: LD_INT 0
81517: PUSH
81518: LD_INT 0
81520: PUSH
81521: LD_VAR 0 3
81525: PUSH
81526: LD_INT 0
81528: PUSH
81529: LD_INT 0
81531: PUSH
81532: LD_INT 0
81534: PUSH
81535: EMPTY
81536: LIST
81537: LIST
81538: LIST
81539: LIST
81540: LIST
81541: LIST
81542: LIST
81543: PUSH
81544: EMPTY
81545: LIST
81546: LIST
81547: PPUSH
81548: CALL_OW 447
// end ;
81552: LD_VAR 0 2
81556: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
81557: LD_INT 0
81559: PPUSH
81560: PPUSH
81561: PPUSH
// tmp := [ ] ;
81562: LD_ADDR_VAR 0 5
81566: PUSH
81567: EMPTY
81568: ST_TO_ADDR
// for i in units do
81569: LD_ADDR_VAR 0 4
81573: PUSH
81574: LD_VAR 0 1
81578: PUSH
81579: FOR_IN
81580: IFFALSE 81618
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
81582: LD_ADDR_VAR 0 5
81586: PUSH
81587: LD_VAR 0 5
81591: PPUSH
81592: LD_VAR 0 5
81596: PUSH
81597: LD_INT 1
81599: PLUS
81600: PPUSH
81601: LD_VAR 0 4
81605: PPUSH
81606: CALL_OW 256
81610: PPUSH
81611: CALL_OW 2
81615: ST_TO_ADDR
81616: GO 81579
81618: POP
81619: POP
// if not tmp then
81620: LD_VAR 0 5
81624: NOT
81625: IFFALSE 81629
// exit ;
81627: GO 81677
// if asc then
81629: LD_VAR 0 2
81633: IFFALSE 81657
// result := SortListByListAsc ( units , tmp ) else
81635: LD_ADDR_VAR 0 3
81639: PUSH
81640: LD_VAR 0 1
81644: PPUSH
81645: LD_VAR 0 5
81649: PPUSH
81650: CALL_OW 76
81654: ST_TO_ADDR
81655: GO 81677
// result := SortListByListDesc ( units , tmp ) ;
81657: LD_ADDR_VAR 0 3
81661: PUSH
81662: LD_VAR 0 1
81666: PPUSH
81667: LD_VAR 0 5
81671: PPUSH
81672: CALL_OW 77
81676: ST_TO_ADDR
// end ;
81677: LD_VAR 0 3
81681: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
81682: LD_INT 0
81684: PPUSH
81685: PPUSH
// task := GetTaskList ( mech ) ;
81686: LD_ADDR_VAR 0 4
81690: PUSH
81691: LD_VAR 0 1
81695: PPUSH
81696: CALL_OW 437
81700: ST_TO_ADDR
// if not task then
81701: LD_VAR 0 4
81705: NOT
81706: IFFALSE 81710
// exit ;
81708: GO 81754
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
81710: LD_ADDR_VAR 0 3
81714: PUSH
81715: LD_VAR 0 4
81719: PUSH
81720: LD_INT 1
81722: ARRAY
81723: PUSH
81724: LD_INT 1
81726: ARRAY
81727: PUSH
81728: LD_STRING r
81730: EQUAL
81731: IFFALSE 81753
81733: PUSH
81734: LD_VAR 0 4
81738: PUSH
81739: LD_INT 1
81741: ARRAY
81742: PUSH
81743: LD_INT 4
81745: ARRAY
81746: PUSH
81747: LD_VAR 0 2
81751: EQUAL
81752: AND
81753: ST_TO_ADDR
// end ;
81754: LD_VAR 0 3
81758: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
81759: LD_INT 0
81761: PPUSH
// SetDir ( unit , d ) ;
81762: LD_VAR 0 1
81766: PPUSH
81767: LD_VAR 0 4
81771: PPUSH
81772: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
81776: LD_ADDR_VAR 0 6
81780: PUSH
81781: LD_VAR 0 1
81785: PPUSH
81786: LD_VAR 0 2
81790: PPUSH
81791: LD_VAR 0 3
81795: PPUSH
81796: LD_VAR 0 5
81800: PPUSH
81801: CALL_OW 48
81805: ST_TO_ADDR
// end ;
81806: LD_VAR 0 6
81810: RET
// export function ToNaturalNumber ( number ) ; begin
81811: LD_INT 0
81813: PPUSH
// result := number div 1 ;
81814: LD_ADDR_VAR 0 2
81818: PUSH
81819: LD_VAR 0 1
81823: PUSH
81824: LD_INT 1
81826: DIV
81827: ST_TO_ADDR
// if number < 0 then
81828: LD_VAR 0 1
81832: PUSH
81833: LD_INT 0
81835: LESS
81836: IFFALSE 81846
// result := 0 ;
81838: LD_ADDR_VAR 0 2
81842: PUSH
81843: LD_INT 0
81845: ST_TO_ADDR
// end ;
81846: LD_VAR 0 2
81850: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
81851: LD_INT 0
81853: PPUSH
81854: PPUSH
81855: PPUSH
// if not buildings then
81856: LD_VAR 0 1
81860: NOT
81861: IFFALSE 81865
// exit ;
81863: GO 81980
// tmp := [ ] ;
81865: LD_ADDR_VAR 0 5
81869: PUSH
81870: EMPTY
81871: ST_TO_ADDR
// for b in buildings do
81872: LD_ADDR_VAR 0 4
81876: PUSH
81877: LD_VAR 0 1
81881: PUSH
81882: FOR_IN
81883: IFFALSE 81921
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
81885: LD_ADDR_VAR 0 5
81889: PUSH
81890: LD_VAR 0 5
81894: PPUSH
81895: LD_VAR 0 5
81899: PUSH
81900: LD_INT 1
81902: PLUS
81903: PPUSH
81904: LD_VAR 0 4
81908: PPUSH
81909: CALL_OW 266
81913: PPUSH
81914: CALL_OW 1
81918: ST_TO_ADDR
81919: GO 81882
81921: POP
81922: POP
// if not tmp then
81923: LD_VAR 0 5
81927: NOT
81928: IFFALSE 81932
// exit ;
81930: GO 81980
// if asc then
81932: LD_VAR 0 2
81936: IFFALSE 81960
// result := SortListByListAsc ( buildings , tmp ) else
81938: LD_ADDR_VAR 0 3
81942: PUSH
81943: LD_VAR 0 1
81947: PPUSH
81948: LD_VAR 0 5
81952: PPUSH
81953: CALL_OW 76
81957: ST_TO_ADDR
81958: GO 81980
// result := SortListByListDesc ( buildings , tmp ) ;
81960: LD_ADDR_VAR 0 3
81964: PUSH
81965: LD_VAR 0 1
81969: PPUSH
81970: LD_VAR 0 5
81974: PPUSH
81975: CALL_OW 77
81979: ST_TO_ADDR
// end ;
81980: LD_VAR 0 3
81984: RET
// export function SortByClass ( units , class ) ; var un ; begin
81985: LD_INT 0
81987: PPUSH
81988: PPUSH
// if not units or not class then
81989: LD_VAR 0 1
81993: NOT
81994: IFTRUE 82003
81996: PUSH
81997: LD_VAR 0 2
82001: NOT
82002: OR
82003: IFFALSE 82007
// exit ;
82005: GO 82102
// result := [ ] ;
82007: LD_ADDR_VAR 0 3
82011: PUSH
82012: EMPTY
82013: ST_TO_ADDR
// for un in units do
82014: LD_ADDR_VAR 0 4
82018: PUSH
82019: LD_VAR 0 1
82023: PUSH
82024: FOR_IN
82025: IFFALSE 82100
// if GetClass ( un ) = class then
82027: LD_VAR 0 4
82031: PPUSH
82032: CALL_OW 257
82036: PUSH
82037: LD_VAR 0 2
82041: EQUAL
82042: IFFALSE 82069
// result := Insert ( result , 1 , un ) else
82044: LD_ADDR_VAR 0 3
82048: PUSH
82049: LD_VAR 0 3
82053: PPUSH
82054: LD_INT 1
82056: PPUSH
82057: LD_VAR 0 4
82061: PPUSH
82062: CALL_OW 2
82066: ST_TO_ADDR
82067: GO 82098
// result := Replace ( result , result + 1 , un ) ;
82069: LD_ADDR_VAR 0 3
82073: PUSH
82074: LD_VAR 0 3
82078: PPUSH
82079: LD_VAR 0 3
82083: PUSH
82084: LD_INT 1
82086: PLUS
82087: PPUSH
82088: LD_VAR 0 4
82092: PPUSH
82093: CALL_OW 1
82097: ST_TO_ADDR
82098: GO 82024
82100: POP
82101: POP
// end ;
82102: LD_VAR 0 3
82106: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
82107: LD_INT 0
82109: PPUSH
82110: PPUSH
82111: PPUSH
82112: PPUSH
82113: PPUSH
82114: PPUSH
82115: PPUSH
// result := [ ] ;
82116: LD_ADDR_VAR 0 4
82120: PUSH
82121: EMPTY
82122: ST_TO_ADDR
// if x - r < 0 then
82123: LD_VAR 0 1
82127: PUSH
82128: LD_VAR 0 3
82132: MINUS
82133: PUSH
82134: LD_INT 0
82136: LESS
82137: IFFALSE 82149
// min_x := 0 else
82139: LD_ADDR_VAR 0 8
82143: PUSH
82144: LD_INT 0
82146: ST_TO_ADDR
82147: GO 82165
// min_x := x - r ;
82149: LD_ADDR_VAR 0 8
82153: PUSH
82154: LD_VAR 0 1
82158: PUSH
82159: LD_VAR 0 3
82163: MINUS
82164: ST_TO_ADDR
// if y - r < 0 then
82165: LD_VAR 0 2
82169: PUSH
82170: LD_VAR 0 3
82174: MINUS
82175: PUSH
82176: LD_INT 0
82178: LESS
82179: IFFALSE 82191
// min_y := 0 else
82181: LD_ADDR_VAR 0 7
82185: PUSH
82186: LD_INT 0
82188: ST_TO_ADDR
82189: GO 82207
// min_y := y - r ;
82191: LD_ADDR_VAR 0 7
82195: PUSH
82196: LD_VAR 0 2
82200: PUSH
82201: LD_VAR 0 3
82205: MINUS
82206: ST_TO_ADDR
// max_x := x + r ;
82207: LD_ADDR_VAR 0 9
82211: PUSH
82212: LD_VAR 0 1
82216: PUSH
82217: LD_VAR 0 3
82221: PLUS
82222: ST_TO_ADDR
// max_y := y + r ;
82223: LD_ADDR_VAR 0 10
82227: PUSH
82228: LD_VAR 0 2
82232: PUSH
82233: LD_VAR 0 3
82237: PLUS
82238: ST_TO_ADDR
// for _x = min_x to max_x do
82239: LD_ADDR_VAR 0 5
82243: PUSH
82244: DOUBLE
82245: LD_VAR 0 8
82249: DEC
82250: ST_TO_ADDR
82251: LD_VAR 0 9
82255: PUSH
82256: FOR_TO
82257: IFFALSE 82358
// for _y = min_y to max_y do
82259: LD_ADDR_VAR 0 6
82263: PUSH
82264: DOUBLE
82265: LD_VAR 0 7
82269: DEC
82270: ST_TO_ADDR
82271: LD_VAR 0 10
82275: PUSH
82276: FOR_TO
82277: IFFALSE 82354
// begin if not ValidHex ( _x , _y ) then
82279: LD_VAR 0 5
82283: PPUSH
82284: LD_VAR 0 6
82288: PPUSH
82289: CALL_OW 488
82293: NOT
82294: IFFALSE 82298
// continue ;
82296: GO 82276
// if GetResourceTypeXY ( _x , _y ) then
82298: LD_VAR 0 5
82302: PPUSH
82303: LD_VAR 0 6
82307: PPUSH
82308: CALL_OW 283
82312: IFFALSE 82352
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
82314: LD_ADDR_VAR 0 4
82318: PUSH
82319: LD_VAR 0 4
82323: PPUSH
82324: LD_VAR 0 4
82328: PUSH
82329: LD_INT 1
82331: PLUS
82332: PPUSH
82333: LD_VAR 0 5
82337: PUSH
82338: LD_VAR 0 6
82342: PUSH
82343: EMPTY
82344: LIST
82345: LIST
82346: PPUSH
82347: CALL_OW 1
82351: ST_TO_ADDR
// end ;
82352: GO 82276
82354: POP
82355: POP
82356: GO 82256
82358: POP
82359: POP
// end ;
82360: LD_VAR 0 4
82364: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
82365: LD_INT 0
82367: PPUSH
82368: PPUSH
82369: PPUSH
82370: PPUSH
82371: PPUSH
82372: PPUSH
82373: PPUSH
82374: PPUSH
// if not units then
82375: LD_VAR 0 1
82379: NOT
82380: IFFALSE 82384
// exit ;
82382: GO 82916
// result := UnitFilter ( units , [ f_ok ] ) ;
82384: LD_ADDR_VAR 0 3
82388: PUSH
82389: LD_VAR 0 1
82393: PPUSH
82394: LD_INT 50
82396: PUSH
82397: EMPTY
82398: LIST
82399: PPUSH
82400: CALL_OW 72
82404: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
82405: LD_ADDR_VAR 0 8
82409: PUSH
82410: LD_VAR 0 1
82414: PUSH
82415: LD_INT 1
82417: ARRAY
82418: PPUSH
82419: CALL_OW 255
82423: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
82424: LD_ADDR_VAR 0 10
82428: PUSH
82429: LD_INT 29
82431: PUSH
82432: LD_INT 91
82434: PUSH
82435: LD_INT 49
82437: PUSH
82438: EMPTY
82439: LIST
82440: LIST
82441: LIST
82442: ST_TO_ADDR
// if not result then
82443: LD_VAR 0 3
82447: NOT
82448: IFFALSE 82452
// exit ;
82450: GO 82916
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
82452: LD_ADDR_VAR 0 5
82456: PUSH
82457: LD_INT 81
82459: PUSH
82460: LD_VAR 0 8
82464: PUSH
82465: EMPTY
82466: LIST
82467: LIST
82468: PPUSH
82469: CALL_OW 69
82473: ST_TO_ADDR
// for i in result do
82474: LD_ADDR_VAR 0 4
82478: PUSH
82479: LD_VAR 0 3
82483: PUSH
82484: FOR_IN
82485: IFFALSE 82914
// begin tag := GetTag ( i ) + 1 ;
82487: LD_ADDR_VAR 0 9
82491: PUSH
82492: LD_VAR 0 4
82496: PPUSH
82497: CALL_OW 110
82501: PUSH
82502: LD_INT 1
82504: PLUS
82505: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
82506: LD_ADDR_VAR 0 7
82510: PUSH
82511: LD_VAR 0 4
82515: PPUSH
82516: CALL_OW 250
82520: PPUSH
82521: LD_VAR 0 4
82525: PPUSH
82526: CALL_OW 251
82530: PPUSH
82531: LD_INT 4
82533: PPUSH
82534: CALL 82107 0 3
82538: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
82539: LD_VAR 0 4
82543: PPUSH
82544: CALL_OW 247
82548: PUSH
82549: LD_INT 2
82551: EQUAL
82552: IFFALSE 82564
82554: PUSH
82555: LD_VAR 0 7
82559: PUSH
82560: LD_INT 2
82562: GREATER
82563: AND
82564: IFFALSE 82584
82566: PUSH
82567: LD_VAR 0 4
82571: PPUSH
82572: CALL_OW 264
82576: PUSH
82577: LD_VAR 0 10
82581: IN
82582: NOT
82583: AND
82584: IFFALSE 82623
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
82586: LD_VAR 0 4
82590: PPUSH
82591: LD_VAR 0 7
82595: PUSH
82596: LD_INT 1
82598: ARRAY
82599: PUSH
82600: LD_INT 1
82602: ARRAY
82603: PPUSH
82604: LD_VAR 0 7
82608: PUSH
82609: LD_INT 1
82611: ARRAY
82612: PUSH
82613: LD_INT 2
82615: ARRAY
82616: PPUSH
82617: CALL_OW 116
82621: GO 82912
// if path > tag then
82623: LD_VAR 0 2
82627: PUSH
82628: LD_VAR 0 9
82632: GREATER
82633: IFFALSE 82841
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
82635: LD_ADDR_VAR 0 6
82639: PUSH
82640: LD_VAR 0 5
82644: PPUSH
82645: LD_INT 91
82647: PUSH
82648: LD_VAR 0 4
82652: PUSH
82653: LD_INT 8
82655: PUSH
82656: EMPTY
82657: LIST
82658: LIST
82659: LIST
82660: PPUSH
82661: CALL_OW 72
82665: ST_TO_ADDR
// if nearEnemy then
82666: LD_VAR 0 6
82670: IFFALSE 82739
// begin if GetWeapon ( i ) = ru_time_lapser then
82672: LD_VAR 0 4
82676: PPUSH
82677: CALL_OW 264
82681: PUSH
82682: LD_INT 49
82684: EQUAL
82685: IFFALSE 82713
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
82687: LD_VAR 0 4
82691: PPUSH
82692: LD_VAR 0 6
82696: PPUSH
82697: LD_VAR 0 4
82701: PPUSH
82702: CALL_OW 74
82706: PPUSH
82707: CALL_OW 112
82711: GO 82737
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
82713: LD_VAR 0 4
82717: PPUSH
82718: LD_VAR 0 6
82722: PPUSH
82723: LD_VAR 0 4
82727: PPUSH
82728: CALL_OW 74
82732: PPUSH
82733: CALL 83997 0 2
// end else
82737: GO 82839
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
82739: LD_VAR 0 4
82743: PPUSH
82744: LD_VAR 0 2
82748: PUSH
82749: LD_VAR 0 9
82753: ARRAY
82754: PUSH
82755: LD_INT 1
82757: ARRAY
82758: PPUSH
82759: LD_VAR 0 2
82763: PUSH
82764: LD_VAR 0 9
82768: ARRAY
82769: PUSH
82770: LD_INT 2
82772: ARRAY
82773: PPUSH
82774: CALL_OW 297
82778: PUSH
82779: LD_INT 6
82781: GREATER
82782: IFFALSE 82825
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
82784: LD_VAR 0 4
82788: PPUSH
82789: LD_VAR 0 2
82793: PUSH
82794: LD_VAR 0 9
82798: ARRAY
82799: PUSH
82800: LD_INT 1
82802: ARRAY
82803: PPUSH
82804: LD_VAR 0 2
82808: PUSH
82809: LD_VAR 0 9
82813: ARRAY
82814: PUSH
82815: LD_INT 2
82817: ARRAY
82818: PPUSH
82819: CALL_OW 114
82823: GO 82839
// SetTag ( i , tag ) ;
82825: LD_VAR 0 4
82829: PPUSH
82830: LD_VAR 0 9
82834: PPUSH
82835: CALL_OW 109
// end else
82839: GO 82912
// if enemy then
82841: LD_VAR 0 5
82845: IFFALSE 82912
// begin if GetWeapon ( i ) = ru_time_lapser then
82847: LD_VAR 0 4
82851: PPUSH
82852: CALL_OW 264
82856: PUSH
82857: LD_INT 49
82859: EQUAL
82860: IFFALSE 82888
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
82862: LD_VAR 0 4
82866: PPUSH
82867: LD_VAR 0 5
82871: PPUSH
82872: LD_VAR 0 4
82876: PPUSH
82877: CALL_OW 74
82881: PPUSH
82882: CALL_OW 112
82886: GO 82912
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
82888: LD_VAR 0 4
82892: PPUSH
82893: LD_VAR 0 5
82897: PPUSH
82898: LD_VAR 0 4
82902: PPUSH
82903: CALL_OW 74
82907: PPUSH
82908: CALL 83997 0 2
// end ; end ;
82912: GO 82484
82914: POP
82915: POP
// end ;
82916: LD_VAR 0 3
82920: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
82921: LD_INT 0
82923: PPUSH
82924: PPUSH
82925: PPUSH
// if not unit or IsInUnit ( unit ) then
82926: LD_VAR 0 1
82930: NOT
82931: IFTRUE 82944
82933: PUSH
82934: LD_VAR 0 1
82938: PPUSH
82939: CALL_OW 310
82943: OR
82944: IFFALSE 82948
// exit ;
82946: GO 83039
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
82948: LD_ADDR_VAR 0 4
82952: PUSH
82953: LD_VAR 0 1
82957: PPUSH
82958: CALL_OW 250
82962: PPUSH
82963: LD_VAR 0 2
82967: PPUSH
82968: LD_INT 1
82970: PPUSH
82971: CALL_OW 272
82975: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
82976: LD_ADDR_VAR 0 5
82980: PUSH
82981: LD_VAR 0 1
82985: PPUSH
82986: CALL_OW 251
82990: PPUSH
82991: LD_VAR 0 2
82995: PPUSH
82996: LD_INT 1
82998: PPUSH
82999: CALL_OW 273
83003: ST_TO_ADDR
// if ValidHex ( x , y ) then
83004: LD_VAR 0 4
83008: PPUSH
83009: LD_VAR 0 5
83013: PPUSH
83014: CALL_OW 488
83018: IFFALSE 83039
// ComTurnXY ( unit , x , y ) ;
83020: LD_VAR 0 1
83024: PPUSH
83025: LD_VAR 0 4
83029: PPUSH
83030: LD_VAR 0 5
83034: PPUSH
83035: CALL_OW 118
// end ;
83039: LD_VAR 0 3
83043: RET
// export function SeeUnits ( side , units ) ; var i ; begin
83044: LD_INT 0
83046: PPUSH
83047: PPUSH
// result := false ;
83048: LD_ADDR_VAR 0 3
83052: PUSH
83053: LD_INT 0
83055: ST_TO_ADDR
// if not units then
83056: LD_VAR 0 2
83060: NOT
83061: IFFALSE 83065
// exit ;
83063: GO 83110
// for i in units do
83065: LD_ADDR_VAR 0 4
83069: PUSH
83070: LD_VAR 0 2
83074: PUSH
83075: FOR_IN
83076: IFFALSE 83108
// if See ( side , i ) then
83078: LD_VAR 0 1
83082: PPUSH
83083: LD_VAR 0 4
83087: PPUSH
83088: CALL_OW 292
83092: IFFALSE 83106
// begin result := true ;
83094: LD_ADDR_VAR 0 3
83098: PUSH
83099: LD_INT 1
83101: ST_TO_ADDR
// exit ;
83102: POP
83103: POP
83104: GO 83110
// end ;
83106: GO 83075
83108: POP
83109: POP
// end ;
83110: LD_VAR 0 3
83114: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
83115: LD_INT 0
83117: PPUSH
83118: PPUSH
83119: PPUSH
83120: PPUSH
// if not unit or not points then
83121: LD_VAR 0 1
83125: NOT
83126: IFTRUE 83135
83128: PUSH
83129: LD_VAR 0 2
83133: NOT
83134: OR
83135: IFFALSE 83139
// exit ;
83137: GO 83229
// dist := 99999 ;
83139: LD_ADDR_VAR 0 5
83143: PUSH
83144: LD_INT 99999
83146: ST_TO_ADDR
// for i in points do
83147: LD_ADDR_VAR 0 4
83151: PUSH
83152: LD_VAR 0 2
83156: PUSH
83157: FOR_IN
83158: IFFALSE 83227
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
83160: LD_ADDR_VAR 0 6
83164: PUSH
83165: LD_VAR 0 1
83169: PPUSH
83170: LD_VAR 0 4
83174: PUSH
83175: LD_INT 1
83177: ARRAY
83178: PPUSH
83179: LD_VAR 0 4
83183: PUSH
83184: LD_INT 2
83186: ARRAY
83187: PPUSH
83188: CALL_OW 297
83192: ST_TO_ADDR
// if tmpDist < dist then
83193: LD_VAR 0 6
83197: PUSH
83198: LD_VAR 0 5
83202: LESS
83203: IFFALSE 83225
// begin result := i ;
83205: LD_ADDR_VAR 0 3
83209: PUSH
83210: LD_VAR 0 4
83214: ST_TO_ADDR
// dist := tmpDist ;
83215: LD_ADDR_VAR 0 5
83219: PUSH
83220: LD_VAR 0 6
83224: ST_TO_ADDR
// end ; end ;
83225: GO 83157
83227: POP
83228: POP
// end ;
83229: LD_VAR 0 3
83233: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
83234: LD_INT 0
83236: PPUSH
// uc_side := side ;
83237: LD_ADDR_OWVAR 20
83241: PUSH
83242: LD_VAR 0 1
83246: ST_TO_ADDR
// uc_nation := 3 ;
83247: LD_ADDR_OWVAR 21
83251: PUSH
83252: LD_INT 3
83254: ST_TO_ADDR
// vc_chassis := 25 ;
83255: LD_ADDR_OWVAR 37
83259: PUSH
83260: LD_INT 25
83262: ST_TO_ADDR
// vc_engine := engine_siberite ;
83263: LD_ADDR_OWVAR 39
83267: PUSH
83268: LD_INT 3
83270: ST_TO_ADDR
// vc_control := control_computer ;
83271: LD_ADDR_OWVAR 38
83275: PUSH
83276: LD_INT 3
83278: ST_TO_ADDR
// vc_weapon := 59 ;
83279: LD_ADDR_OWVAR 40
83283: PUSH
83284: LD_INT 59
83286: ST_TO_ADDR
// result := CreateVehicle ;
83287: LD_ADDR_VAR 0 5
83291: PUSH
83292: CALL_OW 45
83296: ST_TO_ADDR
// SetDir ( result , d ) ;
83297: LD_VAR 0 5
83301: PPUSH
83302: LD_VAR 0 4
83306: PPUSH
83307: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
83311: LD_VAR 0 5
83315: PPUSH
83316: LD_VAR 0 2
83320: PPUSH
83321: LD_VAR 0 3
83325: PPUSH
83326: LD_INT 0
83328: PPUSH
83329: CALL_OW 48
// end ;
83333: LD_VAR 0 5
83337: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
83338: LD_INT 0
83340: PPUSH
83341: PPUSH
83342: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
83343: LD_ADDR_VAR 0 2
83347: PUSH
83348: LD_INT 0
83350: PUSH
83351: LD_INT 0
83353: PUSH
83354: LD_INT 0
83356: PUSH
83357: LD_INT 0
83359: PUSH
83360: EMPTY
83361: LIST
83362: LIST
83363: LIST
83364: LIST
83365: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
83366: LD_VAR 0 1
83370: NOT
83371: IFTRUE 83404
83373: PUSH
83374: LD_VAR 0 1
83378: PPUSH
83379: CALL_OW 264
83383: PUSH
83384: LD_INT 12
83386: PUSH
83387: LD_INT 51
83389: PUSH
83390: LD_INT 32
83392: PUSH
83393: LD_INT 89
83395: PUSH
83396: EMPTY
83397: LIST
83398: LIST
83399: LIST
83400: LIST
83401: IN
83402: NOT
83403: OR
83404: IFFALSE 83408
// exit ;
83406: GO 83506
// for i := 1 to 3 do
83408: LD_ADDR_VAR 0 3
83412: PUSH
83413: DOUBLE
83414: LD_INT 1
83416: DEC
83417: ST_TO_ADDR
83418: LD_INT 3
83420: PUSH
83421: FOR_TO
83422: IFFALSE 83504
// begin tmp := GetCargo ( cargo , i ) ;
83424: LD_ADDR_VAR 0 4
83428: PUSH
83429: LD_VAR 0 1
83433: PPUSH
83434: LD_VAR 0 3
83438: PPUSH
83439: CALL_OW 289
83443: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
83444: LD_ADDR_VAR 0 2
83448: PUSH
83449: LD_VAR 0 2
83453: PPUSH
83454: LD_VAR 0 3
83458: PPUSH
83459: LD_VAR 0 4
83463: PPUSH
83464: CALL_OW 1
83468: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
83469: LD_ADDR_VAR 0 2
83473: PUSH
83474: LD_VAR 0 2
83478: PPUSH
83479: LD_INT 4
83481: PPUSH
83482: LD_VAR 0 2
83486: PUSH
83487: LD_INT 4
83489: ARRAY
83490: PUSH
83491: LD_VAR 0 4
83495: PLUS
83496: PPUSH
83497: CALL_OW 1
83501: ST_TO_ADDR
// end ;
83502: GO 83421
83504: POP
83505: POP
// end ;
83506: LD_VAR 0 2
83510: RET
// export function Length ( array ) ; begin
83511: LD_INT 0
83513: PPUSH
// result := array + 0 ;
83514: LD_ADDR_VAR 0 2
83518: PUSH
83519: LD_VAR 0 1
83523: PUSH
83524: LD_INT 0
83526: PLUS
83527: ST_TO_ADDR
// end ;
83528: LD_VAR 0 2
83532: RET
// export function PrepareArray ( array ) ; begin
83533: LD_INT 0
83535: PPUSH
// result := array diff 0 ;
83536: LD_ADDR_VAR 0 2
83540: PUSH
83541: LD_VAR 0 1
83545: PUSH
83546: LD_INT 0
83548: DIFF
83549: ST_TO_ADDR
// if not result [ 1 ] then
83550: LD_VAR 0 2
83554: PUSH
83555: LD_INT 1
83557: ARRAY
83558: NOT
83559: IFFALSE 83579
// result := Delete ( result , 1 ) ;
83561: LD_ADDR_VAR 0 2
83565: PUSH
83566: LD_VAR 0 2
83570: PPUSH
83571: LD_INT 1
83573: PPUSH
83574: CALL_OW 3
83578: ST_TO_ADDR
// end ;
83579: LD_VAR 0 2
83583: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
83584: LD_INT 0
83586: PPUSH
83587: PPUSH
83588: PPUSH
83589: PPUSH
// sibRocketRange := 25 ;
83590: LD_ADDR_VAR 0 6
83594: PUSH
83595: LD_INT 25
83597: ST_TO_ADDR
// result := false ;
83598: LD_ADDR_VAR 0 4
83602: PUSH
83603: LD_INT 0
83605: ST_TO_ADDR
// for i := 0 to 5 do
83606: LD_ADDR_VAR 0 5
83610: PUSH
83611: DOUBLE
83612: LD_INT 0
83614: DEC
83615: ST_TO_ADDR
83616: LD_INT 5
83618: PUSH
83619: FOR_TO
83620: IFFALSE 83687
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
83622: LD_VAR 0 1
83626: PPUSH
83627: LD_VAR 0 5
83631: PPUSH
83632: LD_VAR 0 6
83636: PPUSH
83637: CALL_OW 272
83641: PPUSH
83642: LD_VAR 0 2
83646: PPUSH
83647: LD_VAR 0 5
83651: PPUSH
83652: LD_VAR 0 6
83656: PPUSH
83657: CALL_OW 273
83661: PPUSH
83662: LD_VAR 0 3
83666: PPUSH
83667: CALL_OW 309
83671: IFFALSE 83685
// begin result := true ;
83673: LD_ADDR_VAR 0 4
83677: PUSH
83678: LD_INT 1
83680: ST_TO_ADDR
// exit ;
83681: POP
83682: POP
83683: GO 83689
// end ;
83685: GO 83619
83687: POP
83688: POP
// end ;
83689: LD_VAR 0 4
83693: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
83694: LD_INT 0
83696: PPUSH
83697: PPUSH
83698: PPUSH
// if btype = b_depot then
83699: LD_VAR 0 2
83703: PUSH
83704: LD_INT 0
83706: EQUAL
83707: IFFALSE 83719
// begin result := true ;
83709: LD_ADDR_VAR 0 3
83713: PUSH
83714: LD_INT 1
83716: ST_TO_ADDR
// exit ;
83717: GO 83839
// end ; pom := GetBase ( depot ) ;
83719: LD_ADDR_VAR 0 4
83723: PUSH
83724: LD_VAR 0 1
83728: PPUSH
83729: CALL_OW 274
83733: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
83734: LD_ADDR_VAR 0 5
83738: PUSH
83739: LD_VAR 0 2
83743: PPUSH
83744: LD_VAR 0 1
83748: PPUSH
83749: CALL_OW 248
83753: PPUSH
83754: CALL_OW 450
83758: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
83759: LD_ADDR_VAR 0 3
83763: PUSH
83764: LD_VAR 0 4
83768: PPUSH
83769: LD_INT 1
83771: PPUSH
83772: CALL_OW 275
83776: PUSH
83777: LD_VAR 0 5
83781: PUSH
83782: LD_INT 1
83784: ARRAY
83785: GREATEREQUAL
83786: IFFALSE 83812
83788: PUSH
83789: LD_VAR 0 4
83793: PPUSH
83794: LD_INT 2
83796: PPUSH
83797: CALL_OW 275
83801: PUSH
83802: LD_VAR 0 5
83806: PUSH
83807: LD_INT 2
83809: ARRAY
83810: GREATEREQUAL
83811: AND
83812: IFFALSE 83838
83814: PUSH
83815: LD_VAR 0 4
83819: PPUSH
83820: LD_INT 3
83822: PPUSH
83823: CALL_OW 275
83827: PUSH
83828: LD_VAR 0 5
83832: PUSH
83833: LD_INT 3
83835: ARRAY
83836: GREATEREQUAL
83837: AND
83838: ST_TO_ADDR
// end ;
83839: LD_VAR 0 3
83843: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
83844: LD_INT 0
83846: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
83847: LD_VAR 0 1
83851: PPUSH
83852: LD_VAR 0 2
83856: PPUSH
83857: LD_INT 0
83859: PPUSH
83860: LD_INT 0
83862: PPUSH
83863: LD_INT 1
83865: PPUSH
83866: LD_INT 0
83868: PPUSH
83869: CALL_OW 587
// end ;
83873: LD_VAR 0 3
83877: RET
// export function CenterOnNow ( unit ) ; begin
83878: LD_INT 0
83880: PPUSH
// result := IsInUnit ( unit ) ;
83881: LD_ADDR_VAR 0 2
83885: PUSH
83886: LD_VAR 0 1
83890: PPUSH
83891: CALL_OW 310
83895: ST_TO_ADDR
// if not result then
83896: LD_VAR 0 2
83900: NOT
83901: IFFALSE 83913
// result := unit ;
83903: LD_ADDR_VAR 0 2
83907: PUSH
83908: LD_VAR 0 1
83912: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
83913: LD_VAR 0 1
83917: PPUSH
83918: CALL_OW 87
// end ;
83922: LD_VAR 0 2
83926: RET
// export function ComMoveHex ( unit , hex ) ; begin
83927: LD_INT 0
83929: PPUSH
// if not hex then
83930: LD_VAR 0 2
83934: NOT
83935: IFFALSE 83939
// exit ;
83937: GO 83992
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
83939: LD_VAR 0 2
83943: PUSH
83944: LD_INT 1
83946: ARRAY
83947: PPUSH
83948: LD_VAR 0 2
83952: PUSH
83953: LD_INT 2
83955: ARRAY
83956: PPUSH
83957: CALL_OW 428
83961: IFFALSE 83965
// exit ;
83963: GO 83992
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
83965: LD_VAR 0 1
83969: PPUSH
83970: LD_VAR 0 2
83974: PUSH
83975: LD_INT 1
83977: ARRAY
83978: PPUSH
83979: LD_VAR 0 2
83983: PUSH
83984: LD_INT 2
83986: ARRAY
83987: PPUSH
83988: CALL_OW 111
// end ;
83992: LD_VAR 0 3
83996: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
83997: LD_INT 0
83999: PPUSH
84000: PPUSH
84001: PPUSH
// if not unit or not enemy then
84002: LD_VAR 0 1
84006: NOT
84007: IFTRUE 84016
84009: PUSH
84010: LD_VAR 0 2
84014: NOT
84015: OR
84016: IFFALSE 84020
// exit ;
84018: GO 84146
// x := GetX ( enemy ) ;
84020: LD_ADDR_VAR 0 4
84024: PUSH
84025: LD_VAR 0 2
84029: PPUSH
84030: CALL_OW 250
84034: ST_TO_ADDR
// y := GetY ( enemy ) ;
84035: LD_ADDR_VAR 0 5
84039: PUSH
84040: LD_VAR 0 2
84044: PPUSH
84045: CALL_OW 251
84049: ST_TO_ADDR
// if ValidHex ( x , y ) then
84050: LD_VAR 0 4
84054: PPUSH
84055: LD_VAR 0 5
84059: PPUSH
84060: CALL_OW 488
84064: IFFALSE 84146
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
84066: LD_VAR 0 2
84070: PPUSH
84071: CALL_OW 247
84075: PUSH
84076: LD_INT 3
84078: PUSH
84079: LD_INT 2
84081: PUSH
84082: EMPTY
84083: LIST
84084: LIST
84085: IN
84086: IFTRUE 84109
84088: PUSH
84089: LD_VAR 0 1
84093: PPUSH
84094: CALL_OW 255
84098: PPUSH
84099: LD_VAR 0 2
84103: PPUSH
84104: CALL_OW 292
84108: OR
84109: IFFALSE 84127
// ComAttackUnit ( unit , enemy ) else
84111: LD_VAR 0 1
84115: PPUSH
84116: LD_VAR 0 2
84120: PPUSH
84121: CALL_OW 115
84125: GO 84146
// ComAgressiveMove ( unit , x , y ) ;
84127: LD_VAR 0 1
84131: PPUSH
84132: LD_VAR 0 4
84136: PPUSH
84137: LD_VAR 0 5
84141: PPUSH
84142: CALL_OW 114
// end ;
84146: LD_VAR 0 3
84150: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
84151: LD_INT 0
84153: PPUSH
84154: PPUSH
84155: PPUSH
// list := AreaToList ( area , 0 ) ;
84156: LD_ADDR_VAR 0 5
84160: PUSH
84161: LD_VAR 0 1
84165: PPUSH
84166: LD_INT 0
84168: PPUSH
84169: CALL_OW 517
84173: ST_TO_ADDR
// if not list then
84174: LD_VAR 0 5
84178: NOT
84179: IFFALSE 84183
// exit ;
84181: GO 84313
// if all then
84183: LD_VAR 0 2
84187: IFFALSE 84275
// begin for i := 1 to list [ 1 ] do
84189: LD_ADDR_VAR 0 4
84193: PUSH
84194: DOUBLE
84195: LD_INT 1
84197: DEC
84198: ST_TO_ADDR
84199: LD_VAR 0 5
84203: PUSH
84204: LD_INT 1
84206: ARRAY
84207: PUSH
84208: FOR_TO
84209: IFFALSE 84271
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
84211: LD_ADDR_VAR 0 3
84215: PUSH
84216: LD_VAR 0 3
84220: PPUSH
84221: LD_VAR 0 3
84225: PUSH
84226: LD_INT 1
84228: PLUS
84229: PPUSH
84230: LD_VAR 0 5
84234: PUSH
84235: LD_INT 1
84237: ARRAY
84238: PUSH
84239: LD_VAR 0 4
84243: ARRAY
84244: PUSH
84245: LD_VAR 0 5
84249: PUSH
84250: LD_INT 2
84252: ARRAY
84253: PUSH
84254: LD_VAR 0 4
84258: ARRAY
84259: PUSH
84260: EMPTY
84261: LIST
84262: LIST
84263: PPUSH
84264: CALL_OW 1
84268: ST_TO_ADDR
84269: GO 84208
84271: POP
84272: POP
// exit ;
84273: GO 84313
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
84275: LD_ADDR_VAR 0 3
84279: PUSH
84280: LD_VAR 0 5
84284: PUSH
84285: LD_INT 1
84287: ARRAY
84288: PUSH
84289: LD_INT 1
84291: ARRAY
84292: PUSH
84293: LD_VAR 0 5
84297: PUSH
84298: LD_INT 2
84300: ARRAY
84301: PUSH
84302: LD_INT 1
84304: ARRAY
84305: PUSH
84306: EMPTY
84307: LIST
84308: LIST
84309: PUSH
84310: EMPTY
84311: LIST
84312: ST_TO_ADDR
// end ;
84313: LD_VAR 0 3
84317: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
84318: LD_INT 0
84320: PPUSH
84321: PPUSH
// list := AreaToList ( area , 0 ) ;
84322: LD_ADDR_VAR 0 4
84326: PUSH
84327: LD_VAR 0 1
84331: PPUSH
84332: LD_INT 0
84334: PPUSH
84335: CALL_OW 517
84339: ST_TO_ADDR
// if not list then
84340: LD_VAR 0 4
84344: NOT
84345: IFFALSE 84349
// exit ;
84347: GO 84390
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
84349: LD_ADDR_VAR 0 3
84353: PUSH
84354: LD_VAR 0 4
84358: PUSH
84359: LD_INT 1
84361: ARRAY
84362: PUSH
84363: LD_INT 1
84365: ARRAY
84366: PUSH
84367: LD_VAR 0 4
84371: PUSH
84372: LD_INT 2
84374: ARRAY
84375: PUSH
84376: LD_INT 1
84378: ARRAY
84379: PUSH
84380: LD_VAR 0 2
84384: PUSH
84385: EMPTY
84386: LIST
84387: LIST
84388: LIST
84389: ST_TO_ADDR
// end ;
84390: LD_VAR 0 3
84394: RET
// export function First ( array ) ; begin
84395: LD_INT 0
84397: PPUSH
// if not array then
84398: LD_VAR 0 1
84402: NOT
84403: IFFALSE 84407
// exit ;
84405: GO 84421
// result := array [ 1 ] ;
84407: LD_ADDR_VAR 0 2
84411: PUSH
84412: LD_VAR 0 1
84416: PUSH
84417: LD_INT 1
84419: ARRAY
84420: ST_TO_ADDR
// end ;
84421: LD_VAR 0 2
84425: RET
// export function Last ( array ) ; begin
84426: LD_INT 0
84428: PPUSH
// if not array then
84429: LD_VAR 0 1
84433: NOT
84434: IFFALSE 84438
// exit ;
84436: GO 84454
// result := array [ array ] ;
84438: LD_ADDR_VAR 0 2
84442: PUSH
84443: LD_VAR 0 1
84447: PUSH
84448: LD_VAR 0 1
84452: ARRAY
84453: ST_TO_ADDR
// end ;
84454: LD_VAR 0 2
84458: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
84459: LD_INT 0
84461: PPUSH
84462: PPUSH
// result := [ ] ;
84463: LD_ADDR_VAR 0 5
84467: PUSH
84468: EMPTY
84469: ST_TO_ADDR
// if not array then
84470: LD_VAR 0 1
84474: NOT
84475: IFFALSE 84479
// exit ;
84477: GO 84591
// for i := 1 to array do
84479: LD_ADDR_VAR 0 6
84483: PUSH
84484: DOUBLE
84485: LD_INT 1
84487: DEC
84488: ST_TO_ADDR
84489: LD_VAR 0 1
84493: PUSH
84494: FOR_TO
84495: IFFALSE 84589
// if array [ i ] [ index ] = value then
84497: LD_VAR 0 1
84501: PUSH
84502: LD_VAR 0 6
84506: ARRAY
84507: PUSH
84508: LD_VAR 0 2
84512: ARRAY
84513: PUSH
84514: LD_VAR 0 3
84518: EQUAL
84519: IFFALSE 84587
// begin if indexColumn then
84521: LD_VAR 0 4
84525: IFFALSE 84561
// result := Join ( result , array [ i ] [ indexColumn ] ) else
84527: LD_ADDR_VAR 0 5
84531: PUSH
84532: LD_VAR 0 5
84536: PPUSH
84537: LD_VAR 0 1
84541: PUSH
84542: LD_VAR 0 6
84546: ARRAY
84547: PUSH
84548: LD_VAR 0 4
84552: ARRAY
84553: PPUSH
84554: CALL 79599 0 2
84558: ST_TO_ADDR
84559: GO 84587
// result := Join ( result , array [ i ] ) ;
84561: LD_ADDR_VAR 0 5
84565: PUSH
84566: LD_VAR 0 5
84570: PPUSH
84571: LD_VAR 0 1
84575: PUSH
84576: LD_VAR 0 6
84580: ARRAY
84581: PPUSH
84582: CALL 79599 0 2
84586: ST_TO_ADDR
// end ;
84587: GO 84494
84589: POP
84590: POP
// end ;
84591: LD_VAR 0 5
84595: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
84596: LD_INT 0
84598: PPUSH
// if not vehicles or not parkingPoint then
84599: LD_VAR 0 1
84603: NOT
84604: IFTRUE 84613
84606: PUSH
84607: LD_VAR 0 2
84611: NOT
84612: OR
84613: IFFALSE 84617
// exit ;
84615: GO 84715
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
84617: LD_ADDR_VAR 0 1
84621: PUSH
84622: LD_VAR 0 1
84626: PPUSH
84627: LD_INT 50
84629: PUSH
84630: EMPTY
84631: LIST
84632: PUSH
84633: LD_INT 3
84635: PUSH
84636: LD_INT 92
84638: PUSH
84639: LD_VAR 0 2
84643: PUSH
84644: LD_INT 1
84646: ARRAY
84647: PUSH
84648: LD_VAR 0 2
84652: PUSH
84653: LD_INT 2
84655: ARRAY
84656: PUSH
84657: LD_INT 8
84659: PUSH
84660: EMPTY
84661: LIST
84662: LIST
84663: LIST
84664: LIST
84665: PUSH
84666: EMPTY
84667: LIST
84668: LIST
84669: PUSH
84670: EMPTY
84671: LIST
84672: LIST
84673: PPUSH
84674: CALL_OW 72
84678: ST_TO_ADDR
// if not vehicles then
84679: LD_VAR 0 1
84683: NOT
84684: IFFALSE 84688
// exit ;
84686: GO 84715
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
84688: LD_VAR 0 1
84692: PPUSH
84693: LD_VAR 0 2
84697: PUSH
84698: LD_INT 1
84700: ARRAY
84701: PPUSH
84702: LD_VAR 0 2
84706: PUSH
84707: LD_INT 2
84709: ARRAY
84710: PPUSH
84711: CALL_OW 111
// end ;
84715: LD_VAR 0 3
84719: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
84720: LD_INT 0
84722: PPUSH
84723: PPUSH
84724: PPUSH
// if not side or not area then
84725: LD_VAR 0 1
84729: NOT
84730: IFTRUE 84739
84732: PUSH
84733: LD_VAR 0 2
84737: NOT
84738: OR
84739: IFFALSE 84743
// exit ;
84741: GO 84862
// tmp := AreaToList ( area , 0 ) ;
84743: LD_ADDR_VAR 0 5
84747: PUSH
84748: LD_VAR 0 2
84752: PPUSH
84753: LD_INT 0
84755: PPUSH
84756: CALL_OW 517
84760: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
84761: LD_ADDR_VAR 0 4
84765: PUSH
84766: DOUBLE
84767: LD_INT 1
84769: DEC
84770: ST_TO_ADDR
84771: LD_VAR 0 5
84775: PUSH
84776: LD_INT 1
84778: ARRAY
84779: PUSH
84780: FOR_TO
84781: IFFALSE 84860
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
84783: LD_VAR 0 5
84787: PUSH
84788: LD_INT 1
84790: ARRAY
84791: PUSH
84792: LD_VAR 0 4
84796: ARRAY
84797: PPUSH
84798: LD_VAR 0 5
84802: PUSH
84803: LD_INT 2
84805: ARRAY
84806: PUSH
84807: LD_VAR 0 4
84811: ARRAY
84812: PPUSH
84813: CALL_OW 351
84817: IFFALSE 84858
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
84819: LD_VAR 0 5
84823: PUSH
84824: LD_INT 1
84826: ARRAY
84827: PUSH
84828: LD_VAR 0 4
84832: ARRAY
84833: PPUSH
84834: LD_VAR 0 5
84838: PUSH
84839: LD_INT 2
84841: ARRAY
84842: PUSH
84843: LD_VAR 0 4
84847: ARRAY
84848: PPUSH
84849: LD_VAR 0 1
84853: PPUSH
84854: CALL_OW 244
// end ;
84858: GO 84780
84860: POP
84861: POP
// end ;
84862: LD_VAR 0 3
84866: RET
// export function UniqueArray ( array ) ; var i ; begin
84867: LD_INT 0
84869: PPUSH
84870: PPUSH
// result := [ ] ;
84871: LD_ADDR_VAR 0 2
84875: PUSH
84876: EMPTY
84877: ST_TO_ADDR
// if not array then
84878: LD_VAR 0 1
84882: NOT
84883: IFFALSE 84887
// exit ;
84885: GO 84948
// for i := 1 to array do
84887: LD_ADDR_VAR 0 3
84891: PUSH
84892: DOUBLE
84893: LD_INT 1
84895: DEC
84896: ST_TO_ADDR
84897: LD_VAR 0 1
84901: PUSH
84902: FOR_TO
84903: IFFALSE 84946
// if not array [ i ] in result then
84905: LD_VAR 0 1
84909: PUSH
84910: LD_VAR 0 3
84914: ARRAY
84915: PUSH
84916: LD_VAR 0 2
84920: IN
84921: NOT
84922: IFFALSE 84944
// result := Join ( result , i ) ;
84924: LD_ADDR_VAR 0 2
84928: PUSH
84929: LD_VAR 0 2
84933: PPUSH
84934: LD_VAR 0 3
84938: PPUSH
84939: CALL 79599 0 2
84943: ST_TO_ADDR
84944: GO 84902
84946: POP
84947: POP
// end ; end_of_file
84948: LD_VAR 0 2
84952: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
84953: LD_VAR 0 1
84957: PUSH
84958: LD_INT 200
84960: DOUBLE
84961: GREATEREQUAL
84962: IFFALSE 84970
84964: LD_INT 299
84966: DOUBLE
84967: LESSEQUAL
84968: IFTRUE 84972
84970: GO 85004
84972: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
84973: LD_VAR 0 1
84977: PPUSH
84978: LD_VAR 0 2
84982: PPUSH
84983: LD_VAR 0 3
84987: PPUSH
84988: LD_VAR 0 4
84992: PPUSH
84993: LD_VAR 0 5
84997: PPUSH
84998: CALL 36710 0 5
85002: GO 85081
85004: LD_INT 300
85006: DOUBLE
85007: GREATEREQUAL
85008: IFFALSE 85016
85010: LD_INT 399
85012: DOUBLE
85013: LESSEQUAL
85014: IFTRUE 85018
85016: GO 85080
85018: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
85019: LD_VAR 0 1
85023: PPUSH
85024: LD_VAR 0 2
85028: PPUSH
85029: LD_VAR 0 3
85033: PPUSH
85034: LD_VAR 0 4
85038: PPUSH
85039: LD_VAR 0 5
85043: PPUSH
85044: LD_VAR 0 6
85048: PPUSH
85049: LD_VAR 0 7
85053: PPUSH
85054: LD_VAR 0 8
85058: PPUSH
85059: LD_VAR 0 9
85063: PPUSH
85064: LD_VAR 0 10
85068: PPUSH
85069: LD_VAR 0 11
85073: PPUSH
85074: CALL 32594 0 11
85078: GO 85081
85080: POP
// end ;
85081: PPOPN 11
85083: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
85084: LD_VAR 0 1
85088: PPUSH
85089: LD_VAR 0 2
85093: PPUSH
85094: LD_VAR 0 3
85098: PPUSH
85099: LD_VAR 0 4
85103: PPUSH
85104: LD_VAR 0 5
85108: PPUSH
85109: CALL 36091 0 5
// end ; end_of_file
85113: PPOPN 5
85115: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
85116: LD_VAR 0 1
85120: PPUSH
85121: LD_VAR 0 2
85125: PPUSH
85126: LD_VAR 0 3
85130: PPUSH
85131: LD_VAR 0 4
85135: PPUSH
85136: LD_VAR 0 5
85140: PPUSH
85141: LD_VAR 0 6
85145: PPUSH
85146: CALL 20134 0 6
// end ;
85150: PPOPN 6
85152: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
85153: LD_INT 0
85155: PPUSH
// begin if not units then
85156: LD_VAR 0 1
85160: NOT
85161: IFFALSE 85165
// exit ;
85163: GO 85165
// end ;
85165: PPOPN 7
85167: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
85168: CALL 20021 0 0
// end ;
85172: PPOPN 1
85174: END
