// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export amCargo1 , amCargo2 ; export amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; export westPathUsed , laserCounterDestroy , rocketBuilded ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_STRING ryutin
  20: PPUSH
  21: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  25: LD_INT 6
  27: PPUSH
  28: LD_STRING yegorov
  30: PPUSH
  31: CALL_OW 500
// RuScientists = [ ] ;
  35: LD_ADDR_EXP 34
  39: PUSH
  40: EMPTY
  41: ST_TO_ADDR
// sciCounter = 0 ;
  42: LD_ADDR_EXP 35
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  50: LD_ADDR_EXP 38
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTanks = [ ] ;
  57: LD_ADDR_EXP 39
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  64: LD_ADDR_EXP 40
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// arabianMines = [ ] ;
  71: LD_ADDR_EXP 44
  75: PUSH
  76: EMPTY
  77: ST_TO_ADDR
// kurtStatus = LoadVariable ( 06_KurtStatus_1 , 0 ) ;
  78: LD_ADDR_EXP 26
  82: PUSH
  83: LD_STRING 06_KurtStatus_1
  85: PPUSH
  86: LD_INT 0
  88: PPUSH
  89: CALL_OW 30
  93: ST_TO_ADDR
// secondPass = 0 ;
  94: LD_ADDR_EXP 27
  98: PUSH
  99: LD_INT 0
 101: ST_TO_ADDR
// teleportExplored = 0 ;
 102: LD_ADDR_EXP 33
 106: PUSH
 107: LD_INT 0
 109: ST_TO_ADDR
// attackTactic = 0 ;
 110: LD_ADDR_EXP 43
 114: PUSH
 115: LD_INT 0
 117: ST_TO_ADDR
// tpCounter = 0 ;
 118: LD_ADDR_EXP 29
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// askSiberite = 0 ;
 126: LD_ADDR_EXP 32
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// warWithLegion = 0 ;
 134: LD_ADDR_EXP 30
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// fakeInfo = 0 ;
 142: LD_ADDR_EXP 31
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// cratesSpawned = 0 ;
 150: LD_ADDR_EXP 45
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// ruAI = 0 ;
 158: LD_ADDR_EXP 41
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// ruEscape = 0 ;
 166: LD_ADDR_EXP 42
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// eventVar1 = 0 ;
 174: LD_ADDR_EXP 47
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// mission_prefix = 12_ ;
 182: LD_ADDR_EXP 46
 186: PUSH
 187: LD_STRING 12_
 189: ST_TO_ADDR
// debugMode = 0 ;
 190: LD_ADDR_EXP 48
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// westPathUsed := false ;
 198: LD_ADDR_EXP 49
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// laserCounterDestroy := 0 ;
 206: LD_ADDR_EXP 50
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// rocketBuilded := false ;
 214: LD_ADDR_EXP 51
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// PrepareNature ;
 222: CALL 15955 0 0
// PrepareDifficulty ;
 226: CALL 12474 0 0
// PrepareVehicles ;
 230: CALL 1741 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 234: LD_INT 4
 236: PPUSH
 237: LD_INT 0
 239: PPUSH
 240: LD_INT 1
 242: PPUSH
 243: LD_INT 0
 245: PPUSH
 246: CALL 1315 0 4
// PrepareAmericanHeroes ;
 250: CALL 640 0 0
// PrepareRussianCommander ;
 254: CALL 3117 0 0
// PrepareWestBase ;
 258: CALL 3629 0 0
// PrepareEastBase ;
 262: CALL 3189 0 0
// PrepareOtherRussians ;
 266: CALL 3741 0 0
// end ;
 270: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 271: LD_EXP 48
 275: PUSH
 276: LD_INT 1
 278: EQUAL
 279: IFFALSE 585
 281: GO 283
 283: DISABLE
 284: LD_INT 0
 286: PPUSH
// begin enable ;
 287: ENABLE
// fogoff ( true ) ;
 288: LD_INT 1
 290: PPUSH
 291: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 295: LD_ADDR_VAR 0 1
 299: PUSH
 300: LD_INT 22
 302: PUSH
 303: LD_INT 1
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: PUSH
 310: LD_INT 21
 312: PUSH
 313: LD_INT 1
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: PPUSH
 324: CALL_OW 69
 328: PUSH
 329: FOR_IN
 330: IFFALSE 346
// SetLives ( i , 1000 ) ;
 332: LD_VAR 0 1
 336: PPUSH
 337: LD_INT 1000
 339: PPUSH
 340: CALL_OW 234
 344: GO 329
 346: POP
 347: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 348: LD_ADDR_VAR 0 1
 352: PUSH
 353: LD_INT 22
 355: PUSH
 356: LD_INT 1
 358: PUSH
 359: EMPTY
 360: LIST
 361: LIST
 362: PUSH
 363: LD_INT 2
 365: PUSH
 366: LD_INT 30
 368: PUSH
 369: LD_INT 0
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: PUSH
 376: LD_INT 30
 378: PUSH
 379: LD_INT 1
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: PUSH
 386: EMPTY
 387: LIST
 388: LIST
 389: LIST
 390: PUSH
 391: EMPTY
 392: LIST
 393: LIST
 394: PPUSH
 395: CALL_OW 69
 399: PUSH
 400: FOR_IN
 401: IFFALSE 425
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 403: LD_VAR 0 1
 407: PPUSH
 408: CALL_OW 274
 412: PPUSH
 413: LD_INT 1
 415: PPUSH
 416: LD_INT 9999
 418: PPUSH
 419: CALL_OW 277
 423: GO 400
 425: POP
 426: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 427: LD_ADDR_VAR 0 1
 431: PUSH
 432: LD_INT 22
 434: PUSH
 435: LD_INT 1
 437: PUSH
 438: EMPTY
 439: LIST
 440: LIST
 441: PUSH
 442: LD_INT 2
 444: PUSH
 445: LD_INT 30
 447: PUSH
 448: LD_INT 0
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: PUSH
 455: LD_INT 30
 457: PUSH
 458: LD_INT 1
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: LIST
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PPUSH
 474: CALL_OW 69
 478: PUSH
 479: FOR_IN
 480: IFFALSE 504
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 482: LD_VAR 0 1
 486: PPUSH
 487: CALL_OW 274
 491: PPUSH
 492: LD_INT 2
 494: PPUSH
 495: LD_INT 9999
 497: PPUSH
 498: CALL_OW 277
 502: GO 479
 504: POP
 505: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 506: LD_ADDR_VAR 0 1
 510: PUSH
 511: LD_INT 22
 513: PUSH
 514: LD_INT 1
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: PUSH
 521: LD_INT 2
 523: PUSH
 524: LD_INT 30
 526: PUSH
 527: LD_INT 0
 529: PUSH
 530: EMPTY
 531: LIST
 532: LIST
 533: PUSH
 534: LD_INT 30
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: EMPTY
 545: LIST
 546: LIST
 547: LIST
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: PPUSH
 553: CALL_OW 69
 557: PUSH
 558: FOR_IN
 559: IFFALSE 583
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 561: LD_VAR 0 1
 565: PPUSH
 566: CALL_OW 274
 570: PPUSH
 571: LD_INT 3
 573: PPUSH
 574: LD_INT 9999
 576: PPUSH
 577: CALL_OW 277
 581: GO 558
 583: POP
 584: POP
// end ;
 585: PPOPN 1
 587: END
// every 0 0$1 trigger FilterUnitsInArea ( westPathArea , [ f_side , 1 ] ) do
 588: LD_INT 25
 590: PPUSH
 591: LD_INT 22
 593: PUSH
 594: LD_INT 1
 596: PUSH
 597: EMPTY
 598: LIST
 599: LIST
 600: PPUSH
 601: CALL_OW 70
 605: IFFALSE 618
 607: GO 609
 609: DISABLE
// westPathUsed := true ;
 610: LD_ADDR_EXP 49
 614: PUSH
 615: LD_INT 1
 617: ST_TO_ADDR
 618: END
// every 0 0$1 trigger laserCounterDestroy >= 3 do
 619: LD_EXP 50
 623: PUSH
 624: LD_INT 3
 626: GREATEREQUAL
 627: IFFALSE 639
 629: GO 631
 631: DISABLE
// SetAchievement ( ACH_LASER ) ; end_of_file
 632: LD_STRING ACH_LASER
 634: PPUSH
 635: CALL_OW 543
 639: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 640: LD_INT 0
 642: PPUSH
 643: PPUSH
 644: PPUSH
// uc_side = 1 ;
 645: LD_ADDR_OWVAR 20
 649: PUSH
 650: LD_INT 1
 652: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 653: LD_ADDR_EXP 14
 657: PUSH
 658: LD_STRING 11c_others
 660: PPUSH
 661: CALL_OW 31
 665: PUSH
 666: LD_STRING 11_others
 668: PPUSH
 669: CALL_OW 31
 673: UNION
 674: ST_TO_ADDR
// JMM = PrepareUnit ( 11_JMM , true ) ;
 675: LD_ADDR_EXP 1
 679: PUSH
 680: LD_STRING 11_JMM
 682: PPUSH
 683: LD_INT 1
 685: PPUSH
 686: CALL 12191 0 2
 690: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 691: LD_EXP 1
 695: PPUSH
 696: LD_INT 1
 698: PPUSH
 699: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 703: LD_EXP 1
 707: PPUSH
 708: LD_INT 22
 710: PUSH
 711: LD_INT 1
 713: PUSH
 714: EMPTY
 715: LIST
 716: LIST
 717: PUSH
 718: LD_INT 21
 720: PUSH
 721: LD_INT 2
 723: PUSH
 724: EMPTY
 725: LIST
 726: LIST
 727: PUSH
 728: LD_INT 58
 730: PUSH
 731: EMPTY
 732: LIST
 733: PUSH
 734: EMPTY
 735: LIST
 736: LIST
 737: LIST
 738: PPUSH
 739: CALL_OW 69
 743: PUSH
 744: LD_INT 1
 746: ARRAY
 747: PPUSH
 748: CALL_OW 52
// if TestCharacters ( 11_Lisa ) = true then
 752: LD_STRING 11_Lisa
 754: PPUSH
 755: CALL_OW 28
 759: PUSH
 760: LD_INT 1
 762: EQUAL
 763: IFFALSE 810
// begin Lisa = PrepareUnit ( 11_Lisa , true ) ;
 765: LD_ADDR_EXP 2
 769: PUSH
 770: LD_STRING 11_Lisa
 772: PPUSH
 773: LD_INT 1
 775: PPUSH
 776: CALL 12191 0 2
 780: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 781: LD_EXP 2
 785: PPUSH
 786: LD_INT 1
 788: PPUSH
 789: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 793: LD_EXP 2
 797: PPUSH
 798: LD_INT 4
 800: PPUSH
 801: LD_INT 0
 803: PPUSH
 804: CALL_OW 49
// end else
 808: GO 826
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 810: LD_INT 4
 812: PPUSH
 813: LD_INT 0
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: LD_INT 0
 821: PPUSH
 822: CALL 1315 0 4
// end ; if TestCharacters ( 11_Donaldson ) = true then
 826: LD_STRING 11_Donaldson
 828: PPUSH
 829: CALL_OW 28
 833: PUSH
 834: LD_INT 1
 836: EQUAL
 837: IFFALSE 884
// begin Donaldson = PrepareUnit ( 11_Donaldson , true ) ;
 839: LD_ADDR_EXP 3
 843: PUSH
 844: LD_STRING 11_Donaldson
 846: PPUSH
 847: LD_INT 1
 849: PPUSH
 850: CALL 12191 0 2
 854: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 855: LD_EXP 3
 859: PPUSH
 860: LD_INT 1
 862: PPUSH
 863: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 867: LD_EXP 3
 871: PPUSH
 872: LD_INT 4
 874: PPUSH
 875: LD_INT 0
 877: PPUSH
 878: CALL_OW 49
// end else
 882: GO 900
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 884: LD_INT 4
 886: PPUSH
 887: LD_INT 0
 889: PPUSH
 890: LD_INT 1
 892: PPUSH
 893: LD_INT 0
 895: PPUSH
 896: CALL 1315 0 4
// end ; if TestCharacters ( 11_Cyrus ) = true then
 900: LD_STRING 11_Cyrus
 902: PPUSH
 903: CALL_OW 28
 907: PUSH
 908: LD_INT 1
 910: EQUAL
 911: IFFALSE 958
// begin Cyrus = PrepareUnit ( 11_Cyrus , true ) ;
 913: LD_ADDR_EXP 5
 917: PUSH
 918: LD_STRING 11_Cyrus
 920: PPUSH
 921: LD_INT 1
 923: PPUSH
 924: CALL 12191 0 2
 928: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 929: LD_EXP 5
 933: PPUSH
 934: LD_INT 1
 936: PPUSH
 937: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 941: LD_EXP 5
 945: PPUSH
 946: LD_INT 4
 948: PPUSH
 949: LD_INT 0
 951: PPUSH
 952: CALL_OW 49
// end else
 956: GO 974
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 958: LD_INT 4
 960: PPUSH
 961: LD_INT 0
 963: PPUSH
 964: LD_INT 1
 966: PPUSH
 967: LD_INT 0
 969: PPUSH
 970: CALL 1315 0 4
// end ; if TestCharacters ( 11_Denis ) = true then
 974: LD_STRING 11_Denis
 976: PPUSH
 977: CALL_OW 28
 981: PUSH
 982: LD_INT 1
 984: EQUAL
 985: IFFALSE 1032
// begin Denis = PrepareUnit ( 11_Denis , true ) ;
 987: LD_ADDR_EXP 6
 991: PUSH
 992: LD_STRING 11_Denis
 994: PPUSH
 995: LD_INT 1
 997: PPUSH
 998: CALL 12191 0 2
1002: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1003: LD_EXP 6
1007: PPUSH
1008: LD_INT 4
1010: PPUSH
1011: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1015: LD_EXP 6
1019: PPUSH
1020: LD_INT 4
1022: PPUSH
1023: LD_INT 0
1025: PPUSH
1026: CALL_OW 49
// end else
1030: GO 1048
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1032: LD_INT 4
1034: PPUSH
1035: LD_INT 0
1037: PPUSH
1038: LD_INT 1
1040: PPUSH
1041: LD_INT 0
1043: PPUSH
1044: CALL 1315 0 4
// end ; if TestCharacters ( 11_Frank ) = true then
1048: LD_STRING 11_Frank
1050: PPUSH
1051: CALL_OW 28
1055: PUSH
1056: LD_INT 1
1058: EQUAL
1059: IFFALSE 1106
// begin Frank = PrepareUnit ( 11_Frank , true ) ;
1061: LD_ADDR_EXP 12
1065: PUSH
1066: LD_STRING 11_Frank
1068: PPUSH
1069: LD_INT 1
1071: PPUSH
1072: CALL 12191 0 2
1076: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1077: LD_EXP 12
1081: PPUSH
1082: LD_INT 1
1084: PPUSH
1085: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1089: LD_EXP 12
1093: PPUSH
1094: LD_INT 4
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: CALL_OW 49
// end else
1104: GO 1122
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1106: LD_INT 4
1108: PPUSH
1109: LD_INT 0
1111: PPUSH
1112: LD_INT 1
1114: PPUSH
1115: LD_INT 0
1117: PPUSH
1118: CALL 1315 0 4
// end ; if TestCharacters ( 11_Cornell ) = true then
1122: LD_STRING 11_Cornell
1124: PPUSH
1125: CALL_OW 28
1129: PUSH
1130: LD_INT 1
1132: EQUAL
1133: IFFALSE 1180
// begin Cornel = PrepareUnit ( 11_Cornell , true ) ;
1135: LD_ADDR_EXP 10
1139: PUSH
1140: LD_STRING 11_Cornell
1142: PPUSH
1143: LD_INT 1
1145: PPUSH
1146: CALL 12191 0 2
1150: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1151: LD_EXP 10
1155: PPUSH
1156: LD_INT 1
1158: PPUSH
1159: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1163: LD_EXP 10
1167: PPUSH
1168: LD_INT 4
1170: PPUSH
1171: LD_INT 0
1173: PPUSH
1174: CALL_OW 49
// end else
1178: GO 1196
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1180: LD_INT 4
1182: PPUSH
1183: LD_INT 0
1185: PPUSH
1186: LD_INT 1
1188: PPUSH
1189: LD_INT 0
1191: PPUSH
1192: CALL 1315 0 4
// end ; tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1196: LD_ADDR_VAR 0 2
1200: PUSH
1201: LD_EXP 14
1205: PPUSH
1206: LD_INT 26
1208: PUSH
1209: LD_INT 1
1211: PUSH
1212: EMPTY
1213: LIST
1214: LIST
1215: PPUSH
1216: CALL_OW 72
1220: ST_TO_ADDR
// if not tmp then
1221: LD_VAR 0 2
1225: NOT
1226: IFFALSE 1255
// begin PrepareSoldier ( sex_male , 8 ) ;
1228: LD_INT 1
1230: PPUSH
1231: LD_INT 8
1233: PPUSH
1234: CALL_OW 381
// PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1238: CALL_OW 44
1242: PPUSH
1243: LD_INT 4
1245: PPUSH
1246: LD_INT 0
1248: PPUSH
1249: CALL_OW 49
// end else
1253: GO 1294
// begin PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1255: LD_VAR 0 2
1259: PUSH
1260: LD_INT 1
1262: ARRAY
1263: PPUSH
1264: LD_INT 4
1266: PPUSH
1267: LD_INT 0
1269: PPUSH
1270: CALL_OW 49
// others11 := others11 diff tmp [ 1 ] ;
1274: LD_ADDR_EXP 14
1278: PUSH
1279: LD_EXP 14
1283: PUSH
1284: LD_VAR 0 2
1288: PUSH
1289: LD_INT 1
1291: ARRAY
1292: DIFF
1293: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ) ;
1294: LD_ADDR_EXP 22
1298: PUSH
1299: LD_STRING Powell
1301: PPUSH
1302: LD_INT 0
1304: PPUSH
1305: CALL 12191 0 2
1309: ST_TO_ADDR
// end ;
1310: LD_VAR 0 1
1314: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1315: LD_INT 0
1317: PPUSH
1318: PPUSH
1319: PPUSH
1320: PPUSH
1321: PPUSH
// if mech = 1 then
1322: LD_VAR 0 4
1326: PUSH
1327: LD_INT 1
1329: EQUAL
1330: IFFALSE 1567
// begin if others11 > 0 then
1332: LD_EXP 14
1336: PUSH
1337: LD_INT 0
1339: GREATER
1340: IFFALSE 1507
// begin for i := 1 to others11 - 1 do
1342: LD_ADDR_VAR 0 6
1346: PUSH
1347: DOUBLE
1348: LD_INT 1
1350: DEC
1351: ST_TO_ADDR
1352: LD_EXP 14
1356: PUSH
1357: LD_INT 1
1359: MINUS
1360: PUSH
1361: FOR_TO
1362: IFFALSE 1444
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1364: LD_EXP 14
1368: PUSH
1369: LD_VAR 0 6
1373: ARRAY
1374: PPUSH
1375: LD_INT 3
1377: PPUSH
1378: CALL_OW 259
1382: PUSH
1383: LD_EXP 14
1387: PUSH
1388: LD_VAR 0 6
1392: PUSH
1393: LD_INT 1
1395: PLUS
1396: ARRAY
1397: PPUSH
1398: LD_INT 3
1400: PPUSH
1401: CALL_OW 259
1405: LESS
1406: IFFALSE 1442
// begin mecha = others11 [ i + 1 ] ;
1408: LD_ADDR_VAR 0 9
1412: PUSH
1413: LD_EXP 14
1417: PUSH
1418: LD_VAR 0 6
1422: PUSH
1423: LD_INT 1
1425: PLUS
1426: ARRAY
1427: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1428: LD_VAR 0 9
1432: PPUSH
1433: LD_INT 3
1435: PPUSH
1436: CALL_OW 336
// break ;
1440: GO 1444
// end ; end ;
1442: GO 1361
1444: POP
1445: POP
// if spawnMode = 1 then
1446: LD_VAR 0 3
1450: PUSH
1451: LD_INT 1
1453: EQUAL
1454: IFFALSE 1475
// PlaceUnitArea ( mecha , area , false ) else
1456: LD_VAR 0 9
1460: PPUSH
1461: LD_VAR 0 1
1465: PPUSH
1466: LD_INT 0
1468: PPUSH
1469: CALL_OW 49
1473: GO 1489
// PlaceHumanInUnit ( mecha , veh ) ;
1475: LD_VAR 0 9
1479: PPUSH
1480: LD_VAR 0 2
1484: PPUSH
1485: CALL_OW 52
// others11 = others11 diff mecha ;
1489: LD_ADDR_EXP 14
1493: PUSH
1494: LD_EXP 14
1498: PUSH
1499: LD_VAR 0 9
1503: DIFF
1504: ST_TO_ADDR
// end else
1505: GO 1565
// begin hc_name =  ;
1507: LD_ADDR_OWVAR 26
1511: PUSH
1512: LD_STRING 
1514: ST_TO_ADDR
// hc_gallery =  ;
1515: LD_ADDR_OWVAR 33
1519: PUSH
1520: LD_STRING 
1522: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1523: LD_INT 0
1525: PPUSH
1526: LD_INT 7
1528: PPUSH
1529: LD_INT 9
1531: PPUSH
1532: CALL_OW 12
1536: PPUSH
1537: CALL_OW 383
// un = CreateHuman ;
1541: LD_ADDR_VAR 0 7
1545: PUSH
1546: CALL_OW 44
1550: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1551: LD_VAR 0 7
1555: PPUSH
1556: LD_VAR 0 2
1560: PPUSH
1561: CALL_OW 52
// end ; end else
1565: GO 1736
// begin if others11 > 0 then
1567: LD_EXP 14
1571: PUSH
1572: LD_INT 0
1574: GREATER
1575: IFFALSE 1648
// begin if spawnMode = 1 then
1577: LD_VAR 0 3
1581: PUSH
1582: LD_INT 1
1584: EQUAL
1585: IFFALSE 1610
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1587: LD_EXP 14
1591: PUSH
1592: LD_INT 1
1594: ARRAY
1595: PPUSH
1596: LD_VAR 0 1
1600: PPUSH
1601: LD_INT 0
1603: PPUSH
1604: CALL_OW 49
1608: GO 1628
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1610: LD_EXP 14
1614: PUSH
1615: LD_INT 1
1617: ARRAY
1618: PPUSH
1619: LD_VAR 0 2
1623: PPUSH
1624: CALL_OW 52
// others11 = Delete ( others11 , 1 ) ;
1628: LD_ADDR_EXP 14
1632: PUSH
1633: LD_EXP 14
1637: PPUSH
1638: LD_INT 1
1640: PPUSH
1641: CALL_OW 3
1645: ST_TO_ADDR
// end else
1646: GO 1736
// begin hc_name =  ;
1648: LD_ADDR_OWVAR 26
1652: PUSH
1653: LD_STRING 
1655: ST_TO_ADDR
// hc_gallery =  ;
1656: LD_ADDR_OWVAR 33
1660: PUSH
1661: LD_STRING 
1663: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1664: LD_INT 0
1666: PPUSH
1667: LD_INT 1
1669: PUSH
1670: LD_INT 2
1672: PUSH
1673: LD_INT 3
1675: PUSH
1676: LD_INT 4
1678: PUSH
1679: EMPTY
1680: LIST
1681: LIST
1682: LIST
1683: LIST
1684: PUSH
1685: LD_INT 1
1687: PPUSH
1688: LD_INT 4
1690: PPUSH
1691: CALL_OW 12
1695: ARRAY
1696: PPUSH
1697: LD_INT 7
1699: PPUSH
1700: LD_INT 9
1702: PPUSH
1703: CALL_OW 12
1707: PPUSH
1708: CALL_OW 380
// un = CreateHuman ;
1712: LD_ADDR_VAR 0 7
1716: PUSH
1717: CALL_OW 44
1721: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1722: LD_VAR 0 7
1726: PPUSH
1727: LD_VAR 0 2
1731: PPUSH
1732: CALL_OW 52
// end ; end ; end ;
1736: LD_VAR 0 5
1740: RET
// export function PrepareVehicles ; var veh ; begin
1741: LD_INT 0
1743: PPUSH
1744: PPUSH
// uc_side = 1 ;
1745: LD_ADDR_OWVAR 20
1749: PUSH
1750: LD_INT 1
1752: ST_TO_ADDR
// uc_nation = 1 ;
1753: LD_ADDR_OWVAR 21
1757: PUSH
1758: LD_INT 1
1760: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1761: LD_ADDR_OWVAR 37
1765: PUSH
1766: LD_INT 3
1768: ST_TO_ADDR
// vc_engine = 3 ;
1769: LD_ADDR_OWVAR 39
1773: PUSH
1774: LD_INT 3
1776: ST_TO_ADDR
// vc_control = 3 ;
1777: LD_ADDR_OWVAR 38
1781: PUSH
1782: LD_INT 3
1784: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1785: LD_ADDR_OWVAR 40
1789: PUSH
1790: LD_INT 4
1792: ST_TO_ADDR
// veh = CreateVehicle ;
1793: LD_ADDR_VAR 0 2
1797: PUSH
1798: CALL_OW 45
1802: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1803: LD_VAR 0 2
1807: PPUSH
1808: LD_INT 4
1810: PPUSH
1811: LD_INT 0
1813: PPUSH
1814: CALL_OW 49
// vc_weapon = us_double_gun ;
1818: LD_ADDR_OWVAR 40
1822: PUSH
1823: LD_INT 5
1825: ST_TO_ADDR
// vc_control = 1 ;
1826: LD_ADDR_OWVAR 38
1830: PUSH
1831: LD_INT 1
1833: ST_TO_ADDR
// veh = CreateVehicle ;
1834: LD_ADDR_VAR 0 2
1838: PUSH
1839: CALL_OW 45
1843: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1844: LD_VAR 0 2
1848: PPUSH
1849: LD_INT 4
1851: PPUSH
1852: LD_INT 0
1854: PPUSH
1855: CALL_OW 49
// vc_weapon = us_light_gun ;
1859: LD_ADDR_OWVAR 40
1863: PUSH
1864: LD_INT 3
1866: ST_TO_ADDR
// vc_control = 3 ;
1867: LD_ADDR_OWVAR 38
1871: PUSH
1872: LD_INT 3
1874: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
1875: LD_ADDR_OWVAR 37
1879: PUSH
1880: LD_INT 2
1882: ST_TO_ADDR
// veh = CreateVehicle ;
1883: LD_ADDR_VAR 0 2
1887: PUSH
1888: CALL_OW 45
1892: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1893: LD_VAR 0 2
1897: PPUSH
1898: LD_INT 4
1900: PPUSH
1901: LD_INT 0
1903: PPUSH
1904: CALL_OW 49
// vc_weapon = us_gatling_gun ;
1908: LD_ADDR_OWVAR 40
1912: PUSH
1913: LD_INT 4
1915: ST_TO_ADDR
// veh = CreateVehicle ;
1916: LD_ADDR_VAR 0 2
1920: PUSH
1921: CALL_OW 45
1925: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1926: LD_VAR 0 2
1930: PPUSH
1931: LD_INT 4
1933: PPUSH
1934: LD_INT 0
1936: PPUSH
1937: CALL_OW 49
// end ;
1941: LD_VAR 0 1
1945: RET
// export function PowellSupport1 ; var veh , un ; begin
1946: LD_INT 0
1948: PPUSH
1949: PPUSH
1950: PPUSH
// uc_side = 1 ;
1951: LD_ADDR_OWVAR 20
1955: PUSH
1956: LD_INT 1
1958: ST_TO_ADDR
// uc_nation = 1 ;
1959: LD_ADDR_OWVAR 21
1963: PUSH
1964: LD_INT 1
1966: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) = true then
1967: LD_STRING 11_Brown
1969: PPUSH
1970: CALL_OW 28
1974: PUSH
1975: LD_INT 1
1977: EQUAL
1978: IFFALSE 2025
// begin Brown = PrepareUnit ( 11_Brown , true ) ;
1980: LD_ADDR_EXP 7
1984: PUSH
1985: LD_STRING 11_Brown
1987: PPUSH
1988: LD_INT 1
1990: PPUSH
1991: CALL 12191 0 2
1995: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
1996: LD_EXP 7
2000: PPUSH
2001: LD_INT 2
2003: PPUSH
2004: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
2008: LD_EXP 7
2012: PPUSH
2013: LD_INT 4
2015: PPUSH
2016: LD_INT 0
2018: PPUSH
2019: CALL_OW 49
// end else
2023: GO 2041
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2025: LD_INT 4
2027: PPUSH
2028: LD_INT 0
2030: PPUSH
2031: LD_INT 1
2033: PPUSH
2034: LD_INT 0
2036: PPUSH
2037: CALL 1315 0 4
// end ; if TestCharacters ( 11_Gary ) = true then
2041: LD_STRING 11_Gary
2043: PPUSH
2044: CALL_OW 28
2048: PUSH
2049: LD_INT 1
2051: EQUAL
2052: IFFALSE 2099
// begin Gary = PrepareUnit ( 11_Gary , true ) ;
2054: LD_ADDR_EXP 11
2058: PUSH
2059: LD_STRING 11_Gary
2061: PPUSH
2062: LD_INT 1
2064: PPUSH
2065: CALL 12191 0 2
2069: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
2070: LD_EXP 11
2074: PPUSH
2075: LD_INT 2
2077: PPUSH
2078: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2082: LD_EXP 11
2086: PPUSH
2087: LD_INT 4
2089: PPUSH
2090: LD_INT 0
2092: PPUSH
2093: CALL_OW 49
// end else
2097: GO 2115
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2099: LD_INT 4
2101: PPUSH
2102: LD_INT 0
2104: PPUSH
2105: LD_INT 1
2107: PPUSH
2108: LD_INT 0
2110: PPUSH
2111: CALL 1315 0 4
// end ; vc_chassis = us_medium_tracked ;
2115: LD_ADDR_OWVAR 37
2119: PUSH
2120: LD_INT 3
2122: ST_TO_ADDR
// vc_engine = 3 ;
2123: LD_ADDR_OWVAR 39
2127: PUSH
2128: LD_INT 3
2130: ST_TO_ADDR
// vc_control = 1 ;
2131: LD_ADDR_OWVAR 38
2135: PUSH
2136: LD_INT 1
2138: ST_TO_ADDR
// vc_weapon = us_crane ;
2139: LD_ADDR_OWVAR 40
2143: PUSH
2144: LD_INT 13
2146: ST_TO_ADDR
// veh = CreateVehicle ;
2147: LD_ADDR_VAR 0 2
2151: PUSH
2152: CALL_OW 45
2156: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2157: LD_VAR 0 2
2161: PPUSH
2162: LD_INT 4
2164: PPUSH
2165: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2169: LD_VAR 0 2
2173: PPUSH
2174: LD_INT 4
2176: PPUSH
2177: LD_INT 0
2179: PPUSH
2180: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2184: LD_INT 4
2186: PPUSH
2187: LD_VAR 0 2
2191: PPUSH
2192: LD_INT 2
2194: PPUSH
2195: LD_INT 1
2197: PPUSH
2198: CALL 1315 0 4
// vc_weapon = 9 ;
2202: LD_ADDR_OWVAR 40
2206: PUSH
2207: LD_INT 9
2209: ST_TO_ADDR
// veh = CreateVehicle ;
2210: LD_ADDR_VAR 0 2
2214: PUSH
2215: CALL_OW 45
2219: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_INT 4
2227: PPUSH
2228: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2232: LD_VAR 0 2
2236: PPUSH
2237: LD_INT 4
2239: PPUSH
2240: LD_INT 0
2242: PPUSH
2243: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2247: LD_INT 4
2249: PPUSH
2250: LD_VAR 0 2
2254: PPUSH
2255: LD_INT 2
2257: PPUSH
2258: LD_INT 1
2260: PPUSH
2261: CALL 1315 0 4
// vc_control = 3 ;
2265: LD_ADDR_OWVAR 38
2269: PUSH
2270: LD_INT 3
2272: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2273: LD_ADDR_OWVAR 40
2277: PUSH
2278: LD_INT 12
2280: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
2281: LD_ADDR_EXP 15
2285: PUSH
2286: CALL_OW 45
2290: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
2291: LD_ADDR_EXP 16
2295: PUSH
2296: CALL_OW 45
2300: ST_TO_ADDR
// SetDir ( amCargo1 , 4 ) ;
2301: LD_EXP 15
2305: PPUSH
2306: LD_INT 4
2308: PPUSH
2309: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
2313: LD_EXP 16
2317: PPUSH
2318: LD_INT 4
2320: PPUSH
2321: CALL_OW 233
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
2325: LD_EXP 15
2329: PPUSH
2330: LD_INT 4
2332: PPUSH
2333: LD_INT 0
2335: PPUSH
2336: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
2340: LD_EXP 16
2344: PPUSH
2345: LD_INT 4
2347: PPUSH
2348: LD_INT 0
2350: PPUSH
2351: CALL_OW 49
// AddCargo ( amCargo1 , 3 , 100 ) ;
2355: LD_EXP 15
2359: PPUSH
2360: LD_INT 3
2362: PPUSH
2363: LD_INT 100
2365: PPUSH
2366: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
2370: LD_EXP 16
2374: PPUSH
2375: LD_INT 1
2377: PPUSH
2378: LD_INT 80
2380: PPUSH
2381: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
2385: LD_EXP 16
2389: PPUSH
2390: LD_INT 3
2392: PPUSH
2393: LD_INT 20
2395: PPUSH
2396: CALL_OW 291
// end ;
2400: LD_VAR 0 1
2404: RET
// export function PowellSupport2 ; var veh , un ; begin
2405: LD_INT 0
2407: PPUSH
2408: PPUSH
2409: PPUSH
// uc_side = 1 ;
2410: LD_ADDR_OWVAR 20
2414: PUSH
2415: LD_INT 1
2417: ST_TO_ADDR
// uc_nation = 1 ;
2418: LD_ADDR_OWVAR 21
2422: PUSH
2423: LD_INT 1
2425: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2426: LD_ADDR_OWVAR 37
2430: PUSH
2431: LD_INT 2
2433: ST_TO_ADDR
// vc_engine = 3 ;
2434: LD_ADDR_OWVAR 39
2438: PUSH
2439: LD_INT 3
2441: ST_TO_ADDR
// vc_control = 3 ;
2442: LD_ADDR_OWVAR 38
2446: PUSH
2447: LD_INT 3
2449: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2450: LD_ADDR_OWVAR 40
2454: PUSH
2455: LD_INT 3
2457: ST_TO_ADDR
// veh = CreateVehicle ;
2458: LD_ADDR_VAR 0 2
2462: PUSH
2463: CALL_OW 45
2467: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2468: LD_VAR 0 2
2472: PPUSH
2473: LD_INT 4
2475: PPUSH
2476: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2480: LD_VAR 0 2
2484: PPUSH
2485: LD_INT 4
2487: PPUSH
2488: LD_INT 0
2490: PPUSH
2491: CALL_OW 49
// vc_control = 1 ;
2495: LD_ADDR_OWVAR 38
2499: PUSH
2500: LD_INT 1
2502: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2503: LD_ADDR_OWVAR 37
2507: PUSH
2508: LD_INT 2
2510: ST_TO_ADDR
// vc_weapon = us_double_gun ;
2511: LD_ADDR_OWVAR 40
2515: PUSH
2516: LD_INT 5
2518: ST_TO_ADDR
// veh = CreateVehicle ;
2519: LD_ADDR_VAR 0 2
2523: PUSH
2524: CALL_OW 45
2528: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2529: LD_VAR 0 2
2533: PPUSH
2534: LD_INT 4
2536: PPUSH
2537: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2541: LD_VAR 0 2
2545: PPUSH
2546: LD_INT 4
2548: PPUSH
2549: LD_INT 0
2551: PPUSH
2552: CALL_OW 49
// if TestCharacters ( 11_Bobby ) = true then
2556: LD_STRING 11_Bobby
2558: PPUSH
2559: CALL_OW 28
2563: PUSH
2564: LD_INT 1
2566: EQUAL
2567: IFFALSE 2613
// begin Bobby = PrepareUnit ( 11_Bobby , true ) ;
2569: LD_ADDR_EXP 4
2573: PUSH
2574: LD_STRING 11_Bobby
2576: PPUSH
2577: LD_INT 1
2579: PPUSH
2580: CALL 12191 0 2
2584: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2585: LD_EXP 4
2589: PPUSH
2590: LD_INT 3
2592: PPUSH
2593: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2597: LD_EXP 4
2601: PPUSH
2602: LD_VAR 0 2
2606: PPUSH
2607: CALL_OW 52
// end else
2611: GO 2631
// begin PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2613: LD_INT 0
2615: PPUSH
2616: LD_VAR 0 2
2620: PPUSH
2621: LD_INT 2
2623: PPUSH
2624: LD_INT 0
2626: PPUSH
2627: CALL 1315 0 4
// end ; if TestCharacters ( 11_Houten ) = true then
2631: LD_STRING 11_Houten
2633: PPUSH
2634: CALL_OW 28
2638: PUSH
2639: LD_INT 1
2641: EQUAL
2642: IFFALSE 2689
// begin Houten = PrepareUnit ( 11_Houten , true ) ;
2644: LD_ADDR_EXP 9
2648: PUSH
2649: LD_STRING 11_Houten
2651: PPUSH
2652: LD_INT 1
2654: PPUSH
2655: CALL 12191 0 2
2659: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2660: LD_EXP 9
2664: PPUSH
2665: LD_INT 1
2667: PPUSH
2668: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2672: LD_EXP 9
2676: PPUSH
2677: LD_INT 4
2679: PPUSH
2680: LD_INT 0
2682: PPUSH
2683: CALL_OW 49
// end else
2687: GO 2705
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2689: LD_INT 4
2691: PPUSH
2692: LD_INT 0
2694: PPUSH
2695: LD_INT 1
2697: PPUSH
2698: LD_INT 0
2700: PPUSH
2701: CALL 1315 0 4
// end ; vc_control = 3 ;
2705: LD_ADDR_OWVAR 38
2709: PUSH
2710: LD_INT 3
2712: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2713: LD_ADDR_OWVAR 40
2717: PUSH
2718: LD_INT 12
2720: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
2721: LD_ADDR_EXP 17
2725: PUSH
2726: CALL_OW 45
2730: ST_TO_ADDR
// SetDir ( amCargo3 , 4 ) ;
2731: LD_EXP 17
2735: PPUSH
2736: LD_INT 4
2738: PPUSH
2739: CALL_OW 233
// amCargo4 = CreateVehicle ;
2743: LD_ADDR_EXP 18
2747: PUSH
2748: CALL_OW 45
2752: ST_TO_ADDR
// SetDir ( amCargo4 , 4 ) ;
2753: LD_EXP 18
2757: PPUSH
2758: LD_INT 4
2760: PPUSH
2761: CALL_OW 233
// amCargo5 = CreateVehicle ;
2765: LD_ADDR_EXP 19
2769: PUSH
2770: CALL_OW 45
2774: ST_TO_ADDR
// SetDir ( amCargo5 , 4 ) ;
2775: LD_EXP 19
2779: PPUSH
2780: LD_INT 4
2782: PPUSH
2783: CALL_OW 233
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
2787: LD_EXP 17
2791: PPUSH
2792: LD_INT 4
2794: PPUSH
2795: LD_INT 0
2797: PPUSH
2798: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
2802: LD_EXP 18
2806: PPUSH
2807: LD_INT 4
2809: PPUSH
2810: LD_INT 0
2812: PPUSH
2813: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
2817: LD_EXP 19
2821: PPUSH
2822: LD_INT 4
2824: PPUSH
2825: LD_INT 0
2827: PPUSH
2828: CALL_OW 49
// if kurtStatus > 0 then
2832: LD_EXP 26
2836: PUSH
2837: LD_INT 0
2839: GREATER
2840: IFFALSE 2889
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2842: LD_EXP 17
2846: PPUSH
2847: LD_INT 1
2849: PPUSH
2850: LD_INT 100
2852: PPUSH
2853: CALL_OW 291
// AddCargo ( amCargo4 , 1 , 100 ) ;
2857: LD_EXP 18
2861: PPUSH
2862: LD_INT 1
2864: PPUSH
2865: LD_INT 100
2867: PPUSH
2868: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 80 ) ;
2872: LD_EXP 19
2876: PPUSH
2877: LD_INT 3
2879: PPUSH
2880: LD_INT 80
2882: PPUSH
2883: CALL_OW 291
// end else
2887: GO 2934
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2889: LD_EXP 17
2893: PPUSH
2894: LD_INT 1
2896: PPUSH
2897: LD_INT 100
2899: PPUSH
2900: CALL_OW 291
// AddCargo ( amCargo4 , 3 , 60 ) ;
2904: LD_EXP 18
2908: PPUSH
2909: LD_INT 3
2911: PPUSH
2912: LD_INT 60
2914: PPUSH
2915: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 100 ) ;
2919: LD_EXP 19
2923: PPUSH
2924: LD_INT 3
2926: PPUSH
2927: LD_INT 100
2929: PPUSH
2930: CALL_OW 291
// end ; end ;
2934: LD_VAR 0 1
2938: RET
// export function PowellSupport3 ; var veh , un ; begin
2939: LD_INT 0
2941: PPUSH
2942: PPUSH
2943: PPUSH
// uc_side = 1 ;
2944: LD_ADDR_OWVAR 20
2948: PUSH
2949: LD_INT 1
2951: ST_TO_ADDR
// uc_nation = 1 ;
2952: LD_ADDR_OWVAR 21
2956: PUSH
2957: LD_INT 1
2959: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2960: LD_INT 4
2962: PPUSH
2963: LD_INT 0
2965: PPUSH
2966: LD_INT 1
2968: PPUSH
2969: LD_INT 0
2971: PPUSH
2972: CALL 1315 0 4
// vc_chassis = us_medium_wheeled ;
2976: LD_ADDR_OWVAR 37
2980: PUSH
2981: LD_INT 2
2983: ST_TO_ADDR
// vc_engine = 3 ;
2984: LD_ADDR_OWVAR 39
2988: PUSH
2989: LD_INT 3
2991: ST_TO_ADDR
// vc_control = 3 ;
2992: LD_ADDR_OWVAR 38
2996: PUSH
2997: LD_INT 3
2999: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
3000: LD_ADDR_OWVAR 40
3004: PUSH
3005: LD_INT 12
3007: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
3008: LD_ADDR_EXP 20
3012: PUSH
3013: CALL_OW 45
3017: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
3018: LD_ADDR_EXP 21
3022: PUSH
3023: CALL_OW 45
3027: ST_TO_ADDR
// SetDir ( amCargo6 , 4 ) ;
3028: LD_EXP 20
3032: PPUSH
3033: LD_INT 4
3035: PPUSH
3036: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
3040: LD_EXP 21
3044: PPUSH
3045: LD_INT 4
3047: PPUSH
3048: CALL_OW 233
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
3052: LD_EXP 20
3056: PPUSH
3057: LD_INT 4
3059: PPUSH
3060: LD_INT 0
3062: PPUSH
3063: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
3067: LD_EXP 21
3071: PPUSH
3072: LD_INT 4
3074: PPUSH
3075: LD_INT 0
3077: PPUSH
3078: CALL_OW 49
// AddCargo ( amCargo6 , 1 , 100 ) ;
3082: LD_EXP 20
3086: PPUSH
3087: LD_INT 1
3089: PPUSH
3090: LD_INT 100
3092: PPUSH
3093: CALL_OW 291
// AddCargo ( amCargo7 , 1 , 100 ) ;
3097: LD_EXP 21
3101: PPUSH
3102: LD_INT 1
3104: PPUSH
3105: LD_INT 100
3107: PPUSH
3108: CALL_OW 291
// end ; end_of_file
3112: LD_VAR 0 1
3116: RET
// export function PrepareRussianCommander ; begin
3117: LD_INT 0
3119: PPUSH
// uc_side = 3 ;
3120: LD_ADDR_OWVAR 20
3124: PUSH
3125: LD_INT 3
3127: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ) ;
3128: LD_ADDR_EXP 23
3132: PUSH
3133: LD_STRING Davidov
3135: PPUSH
3136: LD_INT 0
3138: PPUSH
3139: CALL 12191 0 2
3143: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3144: LD_EXP 23
3148: PPUSH
3149: LD_INT 3
3151: PPUSH
3152: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
3156: LD_ADDR_EXP 34
3160: PUSH
3161: LD_EXP 34
3165: PUSH
3166: LD_EXP 23
3170: ADD
3171: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3172: LD_EXP 34
3176: PPUSH
3177: LD_INT 4
3179: PPUSH
3180: CALL_OW 336
// end ;
3184: LD_VAR 0 1
3188: RET
// export function PrepareEastBase ; var i , un ; begin
3189: LD_INT 0
3191: PPUSH
3192: PPUSH
3193: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3194: LD_INT 3
3196: PPUSH
3197: LD_INT 3
3199: PPUSH
3200: LD_INT 121
3202: PPUSH
3203: LD_EXP 36
3207: PPUSH
3208: LD_EXP 37
3212: PPUSH
3213: CALL_OW 12
3217: PPUSH
3218: LD_INT 1
3220: PPUSH
3221: LD_INT 3
3223: PPUSH
3224: CALL 12905 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3228: LD_INT 3
3230: PPUSH
3231: LD_INT 3
3233: PPUSH
3234: LD_INT 121
3236: PPUSH
3237: LD_EXP 36
3241: PPUSH
3242: LD_EXP 37
3246: PPUSH
3247: CALL_OW 12
3251: PPUSH
3252: LD_INT 9
3254: PPUSH
3255: LD_INT 3
3257: PPUSH
3258: CALL 12905 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3262: LD_INT 3
3264: PPUSH
3265: LD_INT 3
3267: PPUSH
3268: LD_INT 4
3270: PPUSH
3271: LD_EXP 36
3275: PPUSH
3276: LD_EXP 37
3280: PPUSH
3281: CALL_OW 12
3285: PPUSH
3286: LD_INT 2
3288: PPUSH
3289: LD_INT 6
3291: PPUSH
3292: CALL 12905 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3296: LD_INT 3
3298: PPUSH
3299: LD_INT 3
3301: PPUSH
3302: LD_INT 112
3304: PPUSH
3305: LD_EXP 36
3309: PPUSH
3310: LD_EXP 37
3314: PPUSH
3315: CALL_OW 12
3319: PPUSH
3320: LD_INT 3
3322: PPUSH
3323: LD_INT 6
3325: PPUSH
3326: CALL 12905 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3330: LD_INT 3
3332: PPUSH
3333: LD_INT 3
3335: PPUSH
3336: LD_INT 47
3338: PPUSH
3339: LD_EXP 36
3343: PPUSH
3344: LD_EXP 37
3348: PPUSH
3349: CALL_OW 12
3353: PPUSH
3354: LD_INT 4
3356: PPUSH
3357: LD_INT 6
3359: PPUSH
3360: CALL 12905 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3364: LD_INT 3
3366: PPUSH
3367: LD_INT 3
3369: PPUSH
3370: LD_INT 129
3372: PPUSH
3373: LD_EXP 36
3377: PPUSH
3378: LD_EXP 37
3382: PPUSH
3383: CALL_OW 12
3387: PPUSH
3388: LD_INT 4
3390: PPUSH
3391: LD_INT 6
3393: PPUSH
3394: CALL 12905 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3398: LD_INT 3
3400: PPUSH
3401: LD_INT 3
3403: PPUSH
3404: LD_INT 135
3406: PPUSH
3407: LD_EXP 36
3411: PPUSH
3412: LD_EXP 37
3416: PPUSH
3417: CALL_OW 12
3421: PPUSH
3422: LD_INT 4
3424: PPUSH
3425: LD_INT 6
3427: PPUSH
3428: CALL 12905 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3432: LD_ADDR_VAR 0 2
3436: PUSH
3437: LD_INT 22
3439: PUSH
3440: LD_INT 3
3442: PUSH
3443: EMPTY
3444: LIST
3445: LIST
3446: PUSH
3447: LD_INT 30
3449: PUSH
3450: LD_INT 32
3452: PUSH
3453: EMPTY
3454: LIST
3455: LIST
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: PPUSH
3461: CALL_OW 69
3465: PUSH
3466: FOR_IN
3467: IFFALSE 3507
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3469: LD_INT 3
3471: PPUSH
3472: LD_INT 3
3474: PPUSH
3475: LD_VAR 0 2
3479: PPUSH
3480: LD_EXP 36
3484: PPUSH
3485: LD_EXP 37
3489: PPUSH
3490: CALL_OW 12
3494: PPUSH
3495: LD_INT 1
3497: PPUSH
3498: LD_INT 1
3500: PPUSH
3501: CALL 12905 0 6
3505: GO 3466
3507: POP
3508: POP
// for i = 1 to 5 do
3509: LD_ADDR_VAR 0 2
3513: PUSH
3514: DOUBLE
3515: LD_INT 1
3517: DEC
3518: ST_TO_ADDR
3519: LD_INT 5
3521: PUSH
3522: FOR_TO
3523: IFFALSE 3622
// begin uc_side = 3 ;
3525: LD_ADDR_OWVAR 20
3529: PUSH
3530: LD_INT 3
3532: ST_TO_ADDR
// uc_nation = 3 ;
3533: LD_ADDR_OWVAR 21
3537: PUSH
3538: LD_INT 3
3540: ST_TO_ADDR
// hc_gallery =  ;
3541: LD_ADDR_OWVAR 33
3545: PUSH
3546: LD_STRING 
3548: ST_TO_ADDR
// hc_name =  ;
3549: LD_ADDR_OWVAR 26
3553: PUSH
3554: LD_STRING 
3556: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3557: LD_INT 0
3559: PPUSH
3560: LD_INT 4
3562: PPUSH
3563: LD_EXP 36
3567: PPUSH
3568: LD_EXP 37
3572: PPUSH
3573: CALL_OW 12
3577: PPUSH
3578: CALL_OW 380
// un = CreateHuman ;
3582: LD_ADDR_VAR 0 3
3586: PUSH
3587: CALL_OW 44
3591: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3592: LD_VAR 0 3
3596: PPUSH
3597: LD_INT 3
3599: PPUSH
3600: CALL_OW 52
// RuScientists = RuScientists ^ un ;
3604: LD_ADDR_EXP 34
3608: PUSH
3609: LD_EXP 34
3613: PUSH
3614: LD_VAR 0 3
3618: ADD
3619: ST_TO_ADDR
// end ;
3620: GO 3522
3622: POP
3623: POP
// end ;
3624: LD_VAR 0 1
3628: RET
// export function PrepareWestBase ; var i , un ; begin
3629: LD_INT 0
3631: PPUSH
3632: PPUSH
3633: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3634: LD_INT 3
3636: PPUSH
3637: LD_INT 3
3639: PPUSH
3640: LD_INT 6
3642: PPUSH
3643: LD_EXP 36
3647: PPUSH
3648: LD_EXP 37
3652: PPUSH
3653: CALL_OW 12
3657: PPUSH
3658: LD_INT 2
3660: PPUSH
3661: LD_INT 3
3663: PPUSH
3664: CALL 12905 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3668: LD_INT 3
3670: PPUSH
3671: LD_INT 3
3673: PPUSH
3674: LD_INT 91
3676: PPUSH
3677: LD_EXP 36
3681: PPUSH
3682: LD_EXP 37
3686: PPUSH
3687: CALL_OW 12
3691: PPUSH
3692: LD_INT 4
3694: PPUSH
3695: LD_INT 3
3697: PPUSH
3698: CALL 12905 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3702: LD_INT 3
3704: PPUSH
3705: LD_INT 3
3707: PPUSH
3708: LD_INT 21
3710: PPUSH
3711: LD_EXP 36
3715: PPUSH
3716: LD_EXP 37
3720: PPUSH
3721: CALL_OW 12
3725: PPUSH
3726: LD_INT 3
3728: PPUSH
3729: LD_INT 6
3731: PPUSH
3732: CALL 12905 0 6
// end ;
3736: LD_VAR 0 1
3740: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3741: LD_INT 0
3743: PPUSH
3744: PPUSH
3745: PPUSH
3746: PPUSH
// uc_side = 3 ;
3747: LD_ADDR_OWVAR 20
3751: PUSH
3752: LD_INT 3
3754: ST_TO_ADDR
// uc_nation = 3 ;
3755: LD_ADDR_OWVAR 21
3759: PUSH
3760: LD_INT 3
3762: ST_TO_ADDR
// for i = 1 to 5 do
3763: LD_ADDR_VAR 0 2
3767: PUSH
3768: DOUBLE
3769: LD_INT 1
3771: DEC
3772: ST_TO_ADDR
3773: LD_INT 5
3775: PUSH
3776: FOR_TO
3777: IFFALSE 3847
// begin hc_gallery =  ;
3779: LD_ADDR_OWVAR 33
3783: PUSH
3784: LD_STRING 
3786: ST_TO_ADDR
// hc_name =  ;
3787: LD_ADDR_OWVAR 26
3791: PUSH
3792: LD_STRING 
3794: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3795: LD_INT 0
3797: PPUSH
3798: LD_INT 9
3800: PPUSH
3801: LD_EXP 36
3805: PPUSH
3806: LD_EXP 37
3810: PPUSH
3811: CALL_OW 12
3815: PPUSH
3816: CALL_OW 380
// un = CreateHuman ;
3820: LD_ADDR_VAR 0 3
3824: PUSH
3825: CALL_OW 44
3829: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3830: LD_VAR 0 3
3834: PPUSH
3835: LD_INT 8
3837: PPUSH
3838: LD_INT 0
3840: PPUSH
3841: CALL_OW 49
// end ;
3845: GO 3776
3847: POP
3848: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
3849: LD_ADDR_VAR 0 2
3853: PUSH
3854: DOUBLE
3855: LD_INT 1
3857: DEC
3858: ST_TO_ADDR
3859: LD_INT 2
3861: PUSH
3862: LD_INT 3
3864: PUSH
3865: LD_INT 4
3867: PUSH
3868: EMPTY
3869: LIST
3870: LIST
3871: LIST
3872: PUSH
3873: LD_OWVAR 67
3877: ARRAY
3878: PUSH
3879: FOR_TO
3880: IFFALSE 3950
// begin hc_gallery =  ;
3882: LD_ADDR_OWVAR 33
3886: PUSH
3887: LD_STRING 
3889: ST_TO_ADDR
// hc_name =  ;
3890: LD_ADDR_OWVAR 26
3894: PUSH
3895: LD_STRING 
3897: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3898: LD_INT 0
3900: PPUSH
3901: LD_INT 4
3903: PPUSH
3904: LD_EXP 36
3908: PPUSH
3909: LD_EXP 37
3913: PPUSH
3914: CALL_OW 12
3918: PPUSH
3919: CALL_OW 380
// un = CreateHuman ;
3923: LD_ADDR_VAR 0 3
3927: PUSH
3928: CALL_OW 44
3932: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3933: LD_VAR 0 3
3937: PPUSH
3938: LD_INT 8
3940: PPUSH
3941: LD_INT 0
3943: PPUSH
3944: CALL_OW 49
// end ;
3948: GO 3879
3950: POP
3951: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3952: LD_ADDR_VAR 0 2
3956: PUSH
3957: DOUBLE
3958: LD_INT 1
3960: DEC
3961: ST_TO_ADDR
3962: LD_INT 3
3964: PUSH
3965: LD_INT 4
3967: PUSH
3968: LD_INT 5
3970: PUSH
3971: EMPTY
3972: LIST
3973: LIST
3974: LIST
3975: PUSH
3976: LD_OWVAR 67
3980: ARRAY
3981: PUSH
3982: FOR_TO
3983: IFFALSE 4179
// begin vc_engine = 3 ;
3985: LD_ADDR_OWVAR 39
3989: PUSH
3990: LD_INT 3
3992: ST_TO_ADDR
// vc_control = 1 ;
3993: LD_ADDR_OWVAR 38
3997: PUSH
3998: LD_INT 1
4000: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
4001: LD_ADDR_OWVAR 40
4005: PUSH
4006: LD_INT 42
4008: PUSH
4009: LD_INT 43
4011: PUSH
4012: LD_INT 44
4014: PUSH
4015: LD_INT 45
4017: PUSH
4018: LD_INT 46
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: PUSH
4028: LD_INT 1
4030: PPUSH
4031: LD_INT 5
4033: PPUSH
4034: CALL_OW 12
4038: ARRAY
4039: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4040: LD_OWVAR 40
4044: PUSH
4045: LD_INT 46
4047: EQUAL
4048: IFFALSE 4060
// vc_chassis = ru_heavy_tracked else
4050: LD_ADDR_OWVAR 37
4054: PUSH
4055: LD_INT 24
4057: ST_TO_ADDR
4058: GO 4087
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4060: LD_ADDR_OWVAR 37
4064: PUSH
4065: LD_INT 22
4067: PUSH
4068: LD_INT 21
4070: PUSH
4071: EMPTY
4072: LIST
4073: LIST
4074: PUSH
4075: LD_INT 1
4077: PPUSH
4078: LD_INT 2
4080: PPUSH
4081: CALL_OW 12
4085: ARRAY
4086: ST_TO_ADDR
// veh = CreateVehicle ;
4087: LD_ADDR_VAR 0 4
4091: PUSH
4092: CALL_OW 45
4096: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4097: LD_VAR 0 4
4101: PPUSH
4102: LD_INT 3
4104: PPUSH
4105: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4109: LD_VAR 0 4
4113: PPUSH
4114: LD_INT 5
4116: PPUSH
4117: LD_INT 0
4119: PPUSH
4120: CALL_OW 49
// hc_gallery =  ;
4124: LD_ADDR_OWVAR 33
4128: PUSH
4129: LD_STRING 
4131: ST_TO_ADDR
// hc_name =  ;
4132: LD_ADDR_OWVAR 26
4136: PUSH
4137: LD_STRING 
4139: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
4140: LD_INT 0
4142: PPUSH
4143: LD_INT 3
4145: PPUSH
4146: LD_INT 10
4148: PPUSH
4149: CALL_OW 380
// un = CreateHuman ;
4153: LD_ADDR_VAR 0 3
4157: PUSH
4158: CALL_OW 44
4162: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4163: LD_VAR 0 3
4167: PPUSH
4168: LD_VAR 0 4
4172: PPUSH
4173: CALL_OW 52
// end ;
4177: GO 3982
4179: POP
4180: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
4181: LD_ADDR_VAR 0 2
4185: PUSH
4186: DOUBLE
4187: LD_INT 1
4189: DEC
4190: ST_TO_ADDR
4191: LD_INT 3
4193: PUSH
4194: LD_INT 4
4196: PUSH
4197: LD_INT 5
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: LIST
4204: PUSH
4205: LD_OWVAR 67
4209: ARRAY
4210: PUSH
4211: FOR_TO
4212: IFFALSE 4359
// begin vc_engine = 3 ;
4214: LD_ADDR_OWVAR 39
4218: PUSH
4219: LD_INT 3
4221: ST_TO_ADDR
// vc_control = 3 ;
4222: LD_ADDR_OWVAR 38
4226: PUSH
4227: LD_INT 3
4229: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
4230: LD_ADDR_OWVAR 40
4234: PUSH
4235: LD_INT 42
4237: PUSH
4238: LD_INT 43
4240: PUSH
4241: LD_INT 44
4243: PUSH
4244: LD_INT 45
4246: PUSH
4247: LD_INT 46
4249: PUSH
4250: LD_INT 49
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: LIST
4257: LIST
4258: LIST
4259: LIST
4260: PUSH
4261: LD_INT 1
4263: PPUSH
4264: LD_INT 5
4266: PPUSH
4267: CALL_OW 12
4271: ARRAY
4272: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4273: LD_OWVAR 40
4277: PUSH
4278: LD_INT 46
4280: EQUAL
4281: IFFALSE 4293
// vc_chassis = ru_heavy_tracked else
4283: LD_ADDR_OWVAR 37
4287: PUSH
4288: LD_INT 24
4290: ST_TO_ADDR
4291: GO 4320
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4293: LD_ADDR_OWVAR 37
4297: PUSH
4298: LD_INT 22
4300: PUSH
4301: LD_INT 21
4303: PUSH
4304: EMPTY
4305: LIST
4306: LIST
4307: PUSH
4308: LD_INT 1
4310: PPUSH
4311: LD_INT 2
4313: PPUSH
4314: CALL_OW 12
4318: ARRAY
4319: ST_TO_ADDR
// veh = CreateVehicle ;
4320: LD_ADDR_VAR 0 4
4324: PUSH
4325: CALL_OW 45
4329: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4330: LD_VAR 0 4
4334: PPUSH
4335: LD_INT 3
4337: PPUSH
4338: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4342: LD_VAR 0 4
4346: PPUSH
4347: LD_INT 6
4349: PPUSH
4350: LD_INT 0
4352: PPUSH
4353: CALL_OW 49
// end ;
4357: GO 4211
4359: POP
4360: POP
// end ; end_of_file
4361: LD_VAR 0 1
4365: RET
// export function PrepareKurt ; begin
4366: LD_INT 0
4368: PPUSH
// uc_side = 8 ;
4369: LD_ADDR_OWVAR 20
4373: PUSH
4374: LD_INT 8
4376: ST_TO_ADDR
// uc_nation = 2 ;
4377: LD_ADDR_OWVAR 21
4381: PUSH
4382: LD_INT 2
4384: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4385: LD_ADDR_OWVAR 37
4389: PUSH
4390: LD_INT 13
4392: ST_TO_ADDR
// vc_engine = 1 ;
4393: LD_ADDR_OWVAR 39
4397: PUSH
4398: LD_INT 1
4400: ST_TO_ADDR
// vc_control = 1 ;
4401: LD_ADDR_OWVAR 38
4405: PUSH
4406: LD_INT 1
4408: ST_TO_ADDR
// vc_weapon = 24 ;
4409: LD_ADDR_OWVAR 40
4413: PUSH
4414: LD_INT 24
4416: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4417: LD_ADDR_EXP 25
4421: PUSH
4422: CALL_OW 45
4426: ST_TO_ADDR
// if kurtStatus > 0 then
4427: LD_EXP 26
4431: PUSH
4432: LD_INT 0
4434: GREATER
4435: IFFALSE 4484
// begin Kurt = PrepareUnit ( Kurt , false ) ;
4437: LD_ADDR_EXP 24
4441: PUSH
4442: LD_STRING Kurt
4444: PPUSH
4445: LD_INT 0
4447: PPUSH
4448: CALL 12191 0 2
4452: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4453: LD_EXP 25
4457: PPUSH
4458: LD_INT 4
4460: PPUSH
4461: LD_INT 0
4463: PPUSH
4464: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4468: LD_EXP 24
4472: PPUSH
4473: LD_EXP 25
4477: PPUSH
4478: CALL_OW 52
// end else
4482: GO 4561
// begin hc_name =  ;
4484: LD_ADDR_OWVAR 26
4488: PUSH
4489: LD_STRING 
4491: ST_TO_ADDR
// hc_gallery =  ;
4492: LD_ADDR_OWVAR 33
4496: PUSH
4497: LD_STRING 
4499: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4500: LD_INT 1
4502: PPUSH
4503: LD_INT 10
4505: PPUSH
4506: CALL_OW 381
// Kurt = CreateHuman ;
4510: LD_ADDR_EXP 24
4514: PUSH
4515: CALL_OW 44
4519: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4520: LD_EXP 25
4524: PPUSH
4525: LD_INT 4
4527: PPUSH
4528: LD_INT 0
4530: PPUSH
4531: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4535: LD_EXP 24
4539: PPUSH
4540: LD_EXP 25
4544: PPUSH
4545: CALL_OW 52
// SaveCharacters ( Kurt , AltKurt ) ;
4549: LD_EXP 24
4553: PPUSH
4554: LD_STRING AltKurt
4556: PPUSH
4557: CALL_OW 38
// end ; end ;
4561: LD_VAR 0 1
4565: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4566: LD_INT 0
4568: PPUSH
4569: PPUSH
4570: PPUSH
4571: PPUSH
// for i = 1 to 3 do
4572: LD_ADDR_VAR 0 2
4576: PUSH
4577: DOUBLE
4578: LD_INT 1
4580: DEC
4581: ST_TO_ADDR
4582: LD_INT 3
4584: PUSH
4585: FOR_TO
4586: IFFALSE 4707
// begin uc_side = 1 ;
4588: LD_ADDR_OWVAR 20
4592: PUSH
4593: LD_INT 1
4595: ST_TO_ADDR
// uc_nation = 2 ;
4596: LD_ADDR_OWVAR 21
4600: PUSH
4601: LD_INT 2
4603: ST_TO_ADDR
// hc_gallery =  ;
4604: LD_ADDR_OWVAR 33
4608: PUSH
4609: LD_STRING 
4611: ST_TO_ADDR
// hc_name =  ;
4612: LD_ADDR_OWVAR 26
4616: PUSH
4617: LD_STRING 
4619: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4620: LD_EXP 26
4624: PUSH
4625: LD_INT 0
4627: EQUAL
4628: PUSH
4629: LD_EXP 26
4633: PUSH
4634: LD_INT 2
4636: EQUAL
4637: OR
4638: IFFALSE 4655
// PrepareHuman ( false , 1 , 6 ) else
4640: LD_INT 0
4642: PPUSH
4643: LD_INT 1
4645: PPUSH
4646: LD_INT 6
4648: PPUSH
4649: CALL_OW 380
4653: GO 4668
// PrepareHuman ( false , 1 , 8 ) ;
4655: LD_INT 0
4657: PPUSH
4658: LD_INT 1
4660: PPUSH
4661: LD_INT 8
4663: PPUSH
4664: CALL_OW 380
// un = CreateHuman ;
4668: LD_ADDR_VAR 0 3
4672: PUSH
4673: CALL_OW 44
4677: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4678: LD_VAR 0 3
4682: PPUSH
4683: LD_INT 4
4685: PPUSH
4686: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4690: LD_VAR 0 3
4694: PPUSH
4695: LD_INT 4
4697: PPUSH
4698: LD_INT 0
4700: PPUSH
4701: CALL_OW 49
// end ;
4705: GO 4585
4707: POP
4708: POP
// vc_chassis = 14 ;
4709: LD_ADDR_OWVAR 37
4713: PUSH
4714: LD_INT 14
4716: ST_TO_ADDR
// vc_engine = 3 ;
4717: LD_ADDR_OWVAR 39
4721: PUSH
4722: LD_INT 3
4724: ST_TO_ADDR
// vc_control = 1 ;
4725: LD_ADDR_OWVAR 38
4729: PUSH
4730: LD_INT 1
4732: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4733: LD_ADDR_OWVAR 40
4737: PUSH
4738: LD_INT 27
4740: PUSH
4741: LD_INT 26
4743: PUSH
4744: LD_INT 28
4746: PUSH
4747: EMPTY
4748: LIST
4749: LIST
4750: LIST
4751: PUSH
4752: LD_INT 1
4754: PPUSH
4755: LD_INT 3
4757: PPUSH
4758: CALL_OW 12
4762: ARRAY
4763: ST_TO_ADDR
// veh = CreateVehicle ;
4764: LD_ADDR_VAR 0 4
4768: PUSH
4769: CALL_OW 45
4773: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4774: LD_VAR 0 4
4778: PPUSH
4779: LD_INT 4
4781: PPUSH
4782: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4786: LD_VAR 0 4
4790: PPUSH
4791: LD_INT 4
4793: PPUSH
4794: LD_INT 0
4796: PPUSH
4797: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4801: LD_EXP 26
4805: PUSH
4806: LD_INT 0
4808: EQUAL
4809: PUSH
4810: LD_EXP 26
4814: PUSH
4815: LD_INT 2
4817: EQUAL
4818: OR
4819: IFFALSE 4836
// PrepareHuman ( false , 3 , 6 ) else
4821: LD_INT 0
4823: PPUSH
4824: LD_INT 3
4826: PPUSH
4827: LD_INT 6
4829: PPUSH
4830: CALL_OW 380
4834: GO 4849
// PrepareHuman ( false , 3 , 8 ) ;
4836: LD_INT 0
4838: PPUSH
4839: LD_INT 3
4841: PPUSH
4842: LD_INT 8
4844: PPUSH
4845: CALL_OW 380
// un = CreateHuman ;
4849: LD_ADDR_VAR 0 3
4853: PUSH
4854: CALL_OW 44
4858: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4859: LD_VAR 0 3
4863: PPUSH
4864: LD_VAR 0 4
4868: PPUSH
4869: CALL_OW 52
// vc_chassis = 14 ;
4873: LD_ADDR_OWVAR 37
4877: PUSH
4878: LD_INT 14
4880: ST_TO_ADDR
// vc_engine = 3 ;
4881: LD_ADDR_OWVAR 39
4885: PUSH
4886: LD_INT 3
4888: ST_TO_ADDR
// vc_control = 1 ;
4889: LD_ADDR_OWVAR 38
4893: PUSH
4894: LD_INT 1
4896: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4897: LD_ADDR_OWVAR 40
4901: PUSH
4902: LD_INT 27
4904: PUSH
4905: LD_INT 26
4907: PUSH
4908: LD_INT 28
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: LIST
4915: PUSH
4916: LD_INT 1
4918: PPUSH
4919: LD_INT 3
4921: PPUSH
4922: CALL_OW 12
4926: ARRAY
4927: ST_TO_ADDR
// veh = CreateVehicle ;
4928: LD_ADDR_VAR 0 4
4932: PUSH
4933: CALL_OW 45
4937: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4938: LD_VAR 0 4
4942: PPUSH
4943: LD_INT 4
4945: PPUSH
4946: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4950: LD_VAR 0 4
4954: PPUSH
4955: LD_INT 4
4957: PPUSH
4958: LD_INT 0
4960: PPUSH
4961: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4965: LD_EXP 26
4969: PUSH
4970: LD_INT 0
4972: EQUAL
4973: PUSH
4974: LD_EXP 26
4978: PUSH
4979: LD_INT 2
4981: EQUAL
4982: OR
4983: IFFALSE 5000
// PrepareHuman ( false , 4 , 6 ) else
4985: LD_INT 0
4987: PPUSH
4988: LD_INT 4
4990: PPUSH
4991: LD_INT 6
4993: PPUSH
4994: CALL_OW 380
4998: GO 5013
// PrepareHuman ( false , 4 , 8 ) ;
5000: LD_INT 0
5002: PPUSH
5003: LD_INT 4
5005: PPUSH
5006: LD_INT 8
5008: PPUSH
5009: CALL_OW 380
// un = CreateHuman ;
5013: LD_ADDR_VAR 0 3
5017: PUSH
5018: CALL_OW 44
5022: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5023: LD_VAR 0 3
5027: PPUSH
5028: LD_INT 4
5030: PPUSH
5031: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5035: LD_VAR 0 3
5039: PPUSH
5040: LD_VAR 0 4
5044: PPUSH
5045: CALL_OW 52
// vc_chassis = 14 ;
5049: LD_ADDR_OWVAR 37
5053: PUSH
5054: LD_INT 14
5056: ST_TO_ADDR
// vc_engine = 3 ;
5057: LD_ADDR_OWVAR 39
5061: PUSH
5062: LD_INT 3
5064: ST_TO_ADDR
// vc_control = 1 ;
5065: LD_ADDR_OWVAR 38
5069: PUSH
5070: LD_INT 1
5072: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
5073: LD_ADDR_OWVAR 40
5077: PUSH
5078: LD_INT 27
5080: PUSH
5081: LD_INT 26
5083: PUSH
5084: LD_INT 28
5086: PUSH
5087: EMPTY
5088: LIST
5089: LIST
5090: LIST
5091: PUSH
5092: LD_INT 1
5094: PPUSH
5095: LD_INT 3
5097: PPUSH
5098: CALL_OW 12
5102: ARRAY
5103: ST_TO_ADDR
// veh = CreateVehicle ;
5104: LD_ADDR_VAR 0 4
5108: PUSH
5109: CALL_OW 45
5113: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5114: LD_VAR 0 4
5118: PPUSH
5119: LD_INT 4
5121: PPUSH
5122: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5126: LD_VAR 0 4
5130: PPUSH
5131: LD_INT 4
5133: PPUSH
5134: LD_INT 0
5136: PPUSH
5137: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5141: LD_EXP 26
5145: PUSH
5146: LD_INT 0
5148: EQUAL
5149: PUSH
5150: LD_EXP 26
5154: PUSH
5155: LD_INT 2
5157: EQUAL
5158: OR
5159: IFFALSE 5176
// PrepareHuman ( false , 2 , 4 ) else
5161: LD_INT 0
5163: PPUSH
5164: LD_INT 2
5166: PPUSH
5167: LD_INT 4
5169: PPUSH
5170: CALL_OW 380
5174: GO 5189
// PrepareHuman ( false , 2 , 8 ) ;
5176: LD_INT 0
5178: PPUSH
5179: LD_INT 2
5181: PPUSH
5182: LD_INT 8
5184: PPUSH
5185: CALL_OW 380
// un = CreateHuman ;
5189: LD_ADDR_VAR 0 3
5193: PUSH
5194: CALL_OW 44
5198: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5199: LD_VAR 0 3
5203: PPUSH
5204: LD_INT 4
5206: PPUSH
5207: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5211: LD_VAR 0 3
5215: PPUSH
5216: LD_VAR 0 4
5220: PPUSH
5221: CALL_OW 52
// end ;
5225: LD_VAR 0 1
5229: RET
// export function PrepareAttackLegion ; var i , un ; begin
5230: LD_INT 0
5232: PPUSH
5233: PPUSH
5234: PPUSH
// for i = 1 to 4 do
5235: LD_ADDR_VAR 0 2
5239: PUSH
5240: DOUBLE
5241: LD_INT 1
5243: DEC
5244: ST_TO_ADDR
5245: LD_INT 4
5247: PUSH
5248: FOR_TO
5249: IFFALSE 5359
// begin uc_side = 8 ;
5251: LD_ADDR_OWVAR 20
5255: PUSH
5256: LD_INT 8
5258: ST_TO_ADDR
// uc_nation = 2 ;
5259: LD_ADDR_OWVAR 21
5263: PUSH
5264: LD_INT 2
5266: ST_TO_ADDR
// hc_gallery =  ;
5267: LD_ADDR_OWVAR 33
5271: PUSH
5272: LD_STRING 
5274: ST_TO_ADDR
// hc_name =  ;
5275: LD_ADDR_OWVAR 26
5279: PUSH
5280: LD_STRING 
5282: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5283: LD_INT 0
5285: PPUSH
5286: LD_INT 1
5288: PUSH
5289: LD_INT 8
5291: PUSH
5292: EMPTY
5293: LIST
5294: LIST
5295: PUSH
5296: LD_INT 1
5298: PPUSH
5299: LD_INT 2
5301: PPUSH
5302: CALL_OW 12
5306: ARRAY
5307: PPUSH
5308: LD_INT 6
5310: PPUSH
5311: LD_INT 8
5313: PPUSH
5314: CALL_OW 12
5318: PPUSH
5319: CALL_OW 380
// un = CreateHuman ;
5323: LD_ADDR_VAR 0 3
5327: PUSH
5328: CALL_OW 44
5332: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5333: LD_VAR 0 3
5337: PPUSH
5338: LD_INT 19
5340: PPUSH
5341: LD_INT 0
5343: PPUSH
5344: CALL_OW 49
// ComCrawl ( un ) ;
5348: LD_VAR 0 3
5352: PPUSH
5353: CALL_OW 137
// end ;
5357: GO 5248
5359: POP
5360: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5361: LD_INT 1
5363: PPUSH
5364: LD_INT 8
5366: PPUSH
5367: LD_INT 2
5369: PPUSH
5370: LD_INT 1
5372: PPUSH
5373: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5377: LD_INT 20
5379: PPUSH
5380: LD_INT 3
5382: PPUSH
5383: CALL 15467 0 2
// end ; end_of_file
5387: LD_VAR 0 1
5391: RET
// every 1 do var i ;
5392: GO 5394
5394: DISABLE
5395: LD_INT 0
5397: PPUSH
// begin TeleportExit ( ruteleprt , 122 , 145 ) ;
5398: LD_INT 10
5400: PPUSH
5401: LD_INT 122
5403: PPUSH
5404: LD_INT 145
5406: PPUSH
5407: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
5411: LD_INT 137
5413: PPUSH
5414: LD_INT 84
5416: PPUSH
5417: LD_INT 61
5419: PPUSH
5420: CALL_OW 243
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5424: LD_EXP 1
5428: PPUSH
5429: CALL_OW 310
5433: PPUSH
5434: CALL_OW 87
// InGameOn ;
5438: CALL_OW 8
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 130 , 103 ) ;
5442: LD_INT 22
5444: PUSH
5445: LD_INT 1
5447: PUSH
5448: EMPTY
5449: LIST
5450: LIST
5451: PPUSH
5452: CALL_OW 69
5456: PPUSH
5457: LD_INT 130
5459: PPUSH
5460: LD_INT 103
5462: PPUSH
5463: CALL_OW 111
// AddComMoveXY ( i , 114 , 102 ) ;
5467: LD_VAR 0 1
5471: PPUSH
5472: LD_INT 114
5474: PPUSH
5475: LD_INT 102
5477: PPUSH
5478: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5482: LD_EXP 1
5486: PPUSH
5487: LD_STRING D1-JMM-1
5489: PPUSH
5490: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5494: LD_EXP 1
5498: PPUSH
5499: CALL_OW 310
5503: PPUSH
5504: CALL_OW 87
// if IsOk ( Donaldson ) then
5508: LD_EXP 3
5512: PPUSH
5513: CALL_OW 302
5517: IFFALSE 5597
// begin Say ( Donaldson , D1-Don-1 ) ;
5519: LD_EXP 3
5523: PPUSH
5524: LD_STRING D1-Don-1
5526: PPUSH
5527: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5531: LD_EXP 1
5535: PPUSH
5536: CALL_OW 310
5540: PPUSH
5541: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5545: LD_EXP 1
5549: PPUSH
5550: LD_STRING D1-JMM-2
5552: PPUSH
5553: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5557: LD_EXP 1
5561: PPUSH
5562: CALL_OW 310
5566: PPUSH
5567: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5571: LD_EXP 3
5575: PPUSH
5576: LD_STRING D1-Don-2
5578: PPUSH
5579: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5583: LD_EXP 1
5587: PPUSH
5588: CALL_OW 310
5592: PPUSH
5593: CALL_OW 87
// end ; AddComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 110 , 101 ) ;
5597: LD_INT 22
5599: PUSH
5600: LD_INT 1
5602: PUSH
5603: EMPTY
5604: LIST
5605: LIST
5606: PPUSH
5607: CALL_OW 69
5611: PPUSH
5612: LD_INT 110
5614: PPUSH
5615: LD_INT 101
5617: PPUSH
5618: CALL_OW 171
// wait ( 0 0$1 ) ;
5622: LD_INT 35
5624: PPUSH
5625: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5629: LD_EXP 1
5633: PPUSH
5634: CALL_OW 310
5638: PPUSH
5639: CALL_OW 87
// wait ( 0 0$1 ) ;
5643: LD_INT 35
5645: PPUSH
5646: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5650: LD_EXP 1
5654: PPUSH
5655: CALL_OW 310
5659: PPUSH
5660: CALL_OW 87
// wait ( 0 0$1 ) ;
5664: LD_INT 35
5666: PPUSH
5667: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5671: LD_EXP 1
5675: PPUSH
5676: CALL_OW 310
5680: PPUSH
5681: CALL_OW 87
// wait ( 0 0$1 ) ;
5685: LD_INT 35
5687: PPUSH
5688: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5692: LD_EXP 1
5696: PPUSH
5697: CALL_OW 310
5701: PPUSH
5702: CALL_OW 87
// end ;
5706: PPOPN 1
5708: END
// every 0 0$1 trigger SeeXY ( 1 , 102 , 94 ) do var i ;
5709: LD_INT 1
5711: PPUSH
5712: LD_INT 102
5714: PPUSH
5715: LD_INT 94
5717: PPUSH
5718: CALL_OW 293
5722: IFFALSE 5913
5724: GO 5726
5726: DISABLE
5727: LD_INT 0
5729: PPUSH
// begin CenterOnXY ( 102 , 94 ) ;
5730: LD_INT 102
5732: PPUSH
5733: LD_INT 94
5735: PPUSH
5736: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1-Sol1-2 ,  ) ;
5740: LD_INT 22
5742: PUSH
5743: LD_INT 1
5745: PUSH
5746: EMPTY
5747: LIST
5748: LIST
5749: PUSH
5750: LD_INT 26
5752: PUSH
5753: LD_INT 1
5755: PUSH
5756: EMPTY
5757: LIST
5758: LIST
5759: PUSH
5760: LD_INT 2
5762: PUSH
5763: LD_INT 25
5765: PUSH
5766: LD_INT 1
5768: PUSH
5769: EMPTY
5770: LIST
5771: LIST
5772: PUSH
5773: LD_INT 25
5775: PUSH
5776: LD_INT 2
5778: PUSH
5779: EMPTY
5780: LIST
5781: LIST
5782: PUSH
5783: LD_INT 25
5785: PUSH
5786: LD_INT 3
5788: PUSH
5789: EMPTY
5790: LIST
5791: LIST
5792: PUSH
5793: LD_INT 25
5795: PUSH
5796: LD_INT 4
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: PUSH
5803: LD_INT 25
5805: PUSH
5806: LD_INT 5
5808: PUSH
5809: EMPTY
5810: LIST
5811: LIST
5812: PUSH
5813: LD_INT 25
5815: PUSH
5816: LD_INT 8
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: LIST
5827: LIST
5828: LIST
5829: LIST
5830: LIST
5831: PUSH
5832: EMPTY
5833: LIST
5834: LIST
5835: LIST
5836: PPUSH
5837: CALL_OW 69
5841: PPUSH
5842: LD_STRING D1-Sol1-2
5844: PPUSH
5845: LD_STRING 
5847: PPUSH
5848: CALL 12288 0 3
// Say ( JMM , D1-JMM-3 ) ;
5852: LD_EXP 1
5856: PPUSH
5857: LD_STRING D1-JMM-3
5859: PPUSH
5860: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5864: LD_STRING M1
5866: PPUSH
5867: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5871: LD_ADDR_VAR 0 1
5875: PUSH
5876: LD_INT 22
5878: PUSH
5879: LD_INT 1
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: PPUSH
5886: CALL_OW 69
5890: PUSH
5891: FOR_IN
5892: IFFALSE 5911
// ComMoveXY ( i , 95 , 84 ) ;
5894: LD_VAR 0 1
5898: PPUSH
5899: LD_INT 95
5901: PPUSH
5902: LD_INT 84
5904: PPUSH
5905: CALL_OW 111
5909: GO 5891
5911: POP
5912: POP
// end ;
5913: PPOPN 1
5915: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5916: GO 5918
5918: DISABLE
5919: LD_INT 0
5921: PPUSH
5922: PPUSH
5923: PPUSH
5924: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5925: LD_ADDR_VAR 0 2
5929: PUSH
5930: LD_INT 8
5932: PPUSH
5933: LD_INT 22
5935: PUSH
5936: LD_INT 3
5938: PUSH
5939: EMPTY
5940: LIST
5941: LIST
5942: PUSH
5943: LD_INT 25
5945: PUSH
5946: LD_INT 9
5948: PUSH
5949: EMPTY
5950: LIST
5951: LIST
5952: PUSH
5953: EMPTY
5954: LIST
5955: LIST
5956: PPUSH
5957: CALL_OW 70
5961: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
5962: LD_ADDR_VAR 0 3
5966: PUSH
5967: LD_INT 22
5969: PUSH
5970: LD_INT 1
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: PUSH
5977: EMPTY
5978: LIST
5979: PPUSH
5980: CALL_OW 69
5984: ST_TO_ADDR
// enable ;
5985: ENABLE
// for i in your_units do
5986: LD_ADDR_VAR 0 1
5990: PUSH
5991: LD_VAR 0 3
5995: PUSH
5996: FOR_IN
5997: IFFALSE 6663
// begin if See ( 3 , i ) then
5999: LD_INT 3
6001: PPUSH
6002: LD_VAR 0 1
6006: PPUSH
6007: CALL_OW 292
6011: IFFALSE 6661
// begin disable ;
6013: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
6014: LD_VAR 0 2
6018: PPUSH
6019: LD_INT 96
6021: PPUSH
6022: LD_INT 85
6024: PPUSH
6025: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6029: LD_VAR 0 2
6033: PPUSH
6034: LD_INT 96
6036: PPUSH
6037: LD_INT 85
6039: PPUSH
6040: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6044: LD_VAR 0 2
6048: PPUSH
6049: LD_INT 96
6051: PPUSH
6052: LD_INT 85
6054: PPUSH
6055: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6059: LD_VAR 0 2
6063: PPUSH
6064: LD_INT 96
6066: PPUSH
6067: LD_INT 85
6069: PPUSH
6070: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6074: LD_VAR 0 2
6078: PPUSH
6079: LD_INT 96
6081: PPUSH
6082: LD_INT 85
6084: PPUSH
6085: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6089: LD_VAR 0 2
6093: PPUSH
6094: LD_INT 96
6096: PPUSH
6097: LD_INT 85
6099: PPUSH
6100: CALL_OW 214
// wait ( 0 0$2 ) ;
6104: LD_INT 70
6106: PPUSH
6107: CALL_OW 67
// Say ( JMM , D1a-JMM-1 ) ;
6111: LD_EXP 1
6115: PPUSH
6116: LD_STRING D1a-JMM-1
6118: PPUSH
6119: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
6123: LD_EXP 3
6127: PPUSH
6128: LD_STRING D1a-Don-1
6130: PPUSH
6131: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6135: LD_ADDR_VAR 0 1
6139: PUSH
6140: LD_INT 22
6142: PUSH
6143: LD_INT 1
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PPUSH
6150: CALL_OW 69
6154: PUSH
6155: FOR_IN
6156: IFFALSE 6175
// ComMoveXY ( i , 109 , 102 ) ;
6158: LD_VAR 0 1
6162: PPUSH
6163: LD_INT 109
6165: PPUSH
6166: LD_INT 102
6168: PPUSH
6169: CALL_OW 111
6173: GO 6155
6175: POP
6176: POP
// Say ( JMM , D1a-JMM-2 ) ;
6177: LD_EXP 1
6181: PPUSH
6182: LD_STRING D1a-JMM-2
6184: PPUSH
6185: CALL_OW 88
// wait ( 0 0$10 ) ;
6189: LD_INT 350
6191: PPUSH
6192: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6196: LD_EXP 1
6200: PPUSH
6201: CALL_OW 310
6205: PPUSH
6206: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6210: LD_EXP 3
6214: PPUSH
6215: LD_STRING D1b-Don-1
6217: PPUSH
6218: CALL_OW 88
// if IsOk ( Donaldson ) then
6222: LD_EXP 3
6226: PPUSH
6227: CALL_OW 302
6231: IFFALSE 6245
// Say ( JMM , D1b-JMM-1 ) ;
6233: LD_EXP 1
6237: PPUSH
6238: LD_STRING D1b-JMM-1
6240: PPUSH
6241: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6245: LD_INT 22
6247: PUSH
6248: LD_INT 1
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: PUSH
6255: LD_INT 26
6257: PUSH
6258: LD_INT 1
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: PUSH
6265: LD_INT 2
6267: PUSH
6268: LD_INT 25
6270: PUSH
6271: LD_INT 1
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: PUSH
6278: LD_INT 25
6280: PUSH
6281: LD_INT 2
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: PUSH
6288: LD_INT 25
6290: PUSH
6291: LD_INT 3
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: PUSH
6298: LD_INT 25
6300: PUSH
6301: LD_INT 4
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: PUSH
6308: LD_INT 25
6310: PUSH
6311: LD_INT 5
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: PUSH
6318: LD_INT 25
6320: PUSH
6321: LD_INT 8
6323: PUSH
6324: EMPTY
6325: LIST
6326: LIST
6327: PUSH
6328: EMPTY
6329: LIST
6330: LIST
6331: LIST
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: LIST
6341: PPUSH
6342: CALL_OW 69
6346: PPUSH
6347: LD_STRING D1b-Sol1-1
6349: PPUSH
6350: LD_STRING 
6352: PPUSH
6353: CALL 12288 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6357: LD_EXP 3
6361: PPUSH
6362: LD_STRING D1b-Don-2
6364: PPUSH
6365: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6369: LD_EXP 1
6373: PPUSH
6374: LD_STRING D1b-JMM-2
6376: PPUSH
6377: CALL_OW 88
// dec = ShowQuery1 ;
6381: LD_ADDR_VAR 0 4
6385: PUSH
6386: CALL 12757 0 0
6390: ST_TO_ADDR
// if dec = 1 then
6391: LD_VAR 0 4
6395: PUSH
6396: LD_INT 1
6398: EQUAL
6399: IFFALSE 6505
// begin Say ( JMM , D2-JMM-1 ) ;
6401: LD_EXP 1
6405: PPUSH
6406: LD_STRING D2-JMM-1
6408: PPUSH
6409: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6413: LD_EXP 22
6417: PPUSH
6418: LD_STRING D2-Pow-1
6420: PPUSH
6421: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6425: LD_EXP 1
6429: PPUSH
6430: LD_STRING D2a-JMM-1
6432: PPUSH
6433: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6437: LD_EXP 22
6441: PPUSH
6442: LD_STRING D2a-Pow-1
6444: PPUSH
6445: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6449: LD_EXP 1
6453: PPUSH
6454: LD_STRING D2a-JMM-2
6456: PPUSH
6457: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6461: LD_EXP 22
6465: PPUSH
6466: LD_STRING D2a-Pow-2
6468: PPUSH
6469: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6473: LD_EXP 1
6477: PPUSH
6478: LD_STRING D2a-JMM-3
6480: PPUSH
6481: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6485: LD_EXP 22
6489: PPUSH
6490: LD_STRING D2a-Pow-3
6492: PPUSH
6493: CALL_OW 94
// secondPass = 2 ;
6497: LD_ADDR_EXP 27
6501: PUSH
6502: LD_INT 2
6504: ST_TO_ADDR
// end ; if dec = 2 then
6505: LD_VAR 0 4
6509: PUSH
6510: LD_INT 2
6512: EQUAL
6513: IFFALSE 6607
// begin Say ( JMM , D2-JMM-1 ) ;
6515: LD_EXP 1
6519: PPUSH
6520: LD_STRING D2-JMM-1
6522: PPUSH
6523: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6527: LD_EXP 22
6531: PPUSH
6532: LD_STRING D2-Pow-1
6534: PPUSH
6535: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6539: LD_EXP 1
6543: PPUSH
6544: LD_STRING D2b-JMM-1
6546: PPUSH
6547: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6551: LD_EXP 22
6555: PPUSH
6556: LD_STRING D2b-Pow-1
6558: PPUSH
6559: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6563: LD_EXP 1
6567: PPUSH
6568: LD_STRING D2c-JMM-1
6570: PPUSH
6571: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6575: LD_EXP 22
6579: PPUSH
6580: LD_STRING D2c-Pow-1
6582: PPUSH
6583: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6587: LD_EXP 1
6591: PPUSH
6592: LD_STRING D2c-JMM-2
6594: PPUSH
6595: CALL_OW 88
// secondPass = 2 ;
6599: LD_ADDR_EXP 27
6603: PUSH
6604: LD_INT 2
6606: ST_TO_ADDR
// end ; if dec = 3 then
6607: LD_VAR 0 4
6611: PUSH
6612: LD_INT 3
6614: EQUAL
6615: IFFALSE 6625
// secondPass = 1 ;
6617: LD_ADDR_EXP 27
6621: PUSH
6622: LD_INT 1
6624: ST_TO_ADDR
// InGameOff ;
6625: CALL_OW 9
// ruAI = 1 ;
6629: LD_ADDR_EXP 41
6633: PUSH
6634: LD_INT 1
6636: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6637: LD_INT 1
6639: PPUSH
6640: LD_INT 3
6642: PPUSH
6643: LD_INT 2
6645: PPUSH
6646: LD_INT 1
6648: PPUSH
6649: CALL_OW 80
// SaveForQuickRestart ;
6653: CALL_OW 22
// exit ;
6657: POP
6658: POP
6659: GO 6665
// end ; end ;
6661: GO 5996
6663: POP
6664: POP
// end ;
6665: PPOPN 4
6667: END
// every 1 1$0 trigger secondPass = 2 do
6668: LD_EXP 27
6672: PUSH
6673: LD_INT 2
6675: EQUAL
6676: IFFALSE 6896
6678: GO 6680
6680: DISABLE
// begin PowellSupport1 ;
6681: CALL 1946 0 0
// DialogueOn ;
6685: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6689: LD_EXP 1
6693: PPUSH
6694: LD_STRING DC1-JMM-1
6696: PPUSH
6697: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6701: LD_EXP 22
6705: PPUSH
6706: LD_STRING DC1-Pow-1
6708: PPUSH
6709: CALL_OW 94
// DialogueOff ;
6713: CALL_OW 7
// wait ( 3 3$0 ) ;
6717: LD_INT 6300
6719: PPUSH
6720: CALL_OW 67
// PowellSupport2 ;
6724: CALL 2405 0 0
// DialogueOn ;
6728: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6732: LD_EXP 1
6736: PPUSH
6737: LD_STRING DC2-JMM-1
6739: PPUSH
6740: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6744: LD_EXP 22
6748: PPUSH
6749: LD_STRING DC2-Pow-1
6751: PPUSH
6752: CALL_OW 94
// DialogueOff ;
6756: CALL_OW 7
// wait ( 3 3$00 ) ;
6760: LD_INT 6300
6762: PPUSH
6763: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6767: LD_INT 35
6769: PPUSH
6770: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and not FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
6774: LD_INT 22
6776: PUSH
6777: LD_INT 1
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: PUSH
6784: LD_INT 2
6786: PUSH
6787: LD_INT 30
6789: PUSH
6790: LD_INT 0
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: PUSH
6797: LD_INT 30
6799: PUSH
6800: LD_INT 1
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: LIST
6811: PUSH
6812: EMPTY
6813: LIST
6814: LIST
6815: PPUSH
6816: CALL_OW 69
6820: PUSH
6821: LD_INT 11
6823: PPUSH
6824: LD_INT 22
6826: PUSH
6827: LD_INT 3
6829: PUSH
6830: EMPTY
6831: LIST
6832: LIST
6833: PPUSH
6834: CALL_OW 70
6838: NOT
6839: AND
6840: IFFALSE 6767
// wait ( 0 0$10 ) ;
6842: LD_INT 350
6844: PPUSH
6845: CALL_OW 67
// Legion ;
6849: CALL 6897 0 0
// wait ( 6 6$0 ) ;
6853: LD_INT 12600
6855: PPUSH
6856: CALL_OW 67
// PowellSupport3 ;
6860: CALL 2939 0 0
// DialogueOn ;
6864: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6868: LD_EXP 22
6872: PPUSH
6873: LD_STRING DC3-Pow-1
6875: PPUSH
6876: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6880: LD_EXP 1
6884: PPUSH
6885: LD_STRING DC3-JMM-1
6887: PPUSH
6888: CALL_OW 88
// DialogueOff ;
6892: CALL_OW 7
// end ;
6896: END
// export function Legion ; var i , dec1 , dec2 , tmp , tmp2 , tmp3 , crates , oil , siberite , cr , sb , payForNeutral , payForHelp , query1 , query2 ; begin
6897: LD_INT 0
6899: PPUSH
6900: PPUSH
6901: PPUSH
6902: PPUSH
6903: PPUSH
6904: PPUSH
6905: PPUSH
6906: PPUSH
6907: PPUSH
6908: PPUSH
6909: PPUSH
6910: PPUSH
6911: PPUSH
6912: PPUSH
6913: PPUSH
6914: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6915: LD_ADDR_VAR 0 5
6919: PUSH
6920: LD_INT 22
6922: PUSH
6923: LD_INT 1
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: LD_INT 21
6932: PUSH
6933: LD_INT 3
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: LD_INT 2
6942: PUSH
6943: LD_INT 30
6945: PUSH
6946: LD_INT 0
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PUSH
6953: LD_INT 30
6955: PUSH
6956: LD_INT 1
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: LIST
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: LIST
6972: PPUSH
6973: CALL_OW 69
6977: ST_TO_ADDR
// crates := 0 ;
6978: LD_ADDR_VAR 0 8
6982: PUSH
6983: LD_INT 0
6985: ST_TO_ADDR
// oil := 0 ;
6986: LD_ADDR_VAR 0 9
6990: PUSH
6991: LD_INT 0
6993: ST_TO_ADDR
// siberite := 0 ;
6994: LD_ADDR_VAR 0 10
6998: PUSH
6999: LD_INT 0
7001: ST_TO_ADDR
// payForNeutral := false ;
7002: LD_ADDR_VAR 0 13
7006: PUSH
7007: LD_INT 0
7009: ST_TO_ADDR
// payForHelp := false ;
7010: LD_ADDR_VAR 0 14
7014: PUSH
7015: LD_INT 0
7017: ST_TO_ADDR
// for i in tmp do
7018: LD_ADDR_VAR 0 2
7022: PUSH
7023: LD_VAR 0 5
7027: PUSH
7028: FOR_IN
7029: IFFALSE 7120
// begin crates := crates + GetResourceType ( GetBase ( i ) , 1 ) ;
7031: LD_ADDR_VAR 0 8
7035: PUSH
7036: LD_VAR 0 8
7040: PUSH
7041: LD_VAR 0 2
7045: PPUSH
7046: CALL_OW 274
7050: PPUSH
7051: LD_INT 1
7053: PPUSH
7054: CALL_OW 275
7058: PLUS
7059: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( i ) , 2 ) ;
7060: LD_ADDR_VAR 0 9
7064: PUSH
7065: LD_VAR 0 9
7069: PUSH
7070: LD_VAR 0 2
7074: PPUSH
7075: CALL_OW 274
7079: PPUSH
7080: LD_INT 2
7082: PPUSH
7083: CALL_OW 275
7087: PLUS
7088: ST_TO_ADDR
// siberite := siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
7089: LD_ADDR_VAR 0 10
7093: PUSH
7094: LD_VAR 0 10
7098: PUSH
7099: LD_VAR 0 2
7103: PPUSH
7104: CALL_OW 274
7108: PPUSH
7109: LD_INT 3
7111: PPUSH
7112: CALL_OW 275
7116: PLUS
7117: ST_TO_ADDR
// end ;
7118: GO 7028
7120: POP
7121: POP
// PrepareKurt ;
7122: CALL 4366 0 0
// if not Kurt then
7126: LD_EXP 24
7130: NOT
7131: IFFALSE 7135
// exit ;
7133: GO 9215
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7135: LD_EXP 25
7139: PPUSH
7140: LD_INT 144
7142: PPUSH
7143: LD_INT 111
7145: PPUSH
7146: CALL_OW 111
// wait ( 0 0$2 ) ;
7150: LD_INT 70
7152: PPUSH
7153: CALL_OW 67
// PlaceSeeing ( 167 , 121 , 1 , - 10 ) ;
7157: LD_INT 167
7159: PPUSH
7160: LD_INT 121
7162: PPUSH
7163: LD_INT 1
7165: PPUSH
7166: LD_INT 10
7168: NEG
7169: PPUSH
7170: CALL_OW 330
// ComExitVehicle ( Kurt ) ;
7174: LD_EXP 24
7178: PPUSH
7179: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7183: LD_EXP 24
7187: PPUSH
7188: CALL_OW 87
// wait ( 0 0$1 ) ;
7192: LD_INT 35
7194: PPUSH
7195: CALL_OW 67
// DialogueOn ;
7199: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7203: LD_INT 22
7205: PUSH
7206: LD_INT 1
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: PUSH
7213: LD_INT 26
7215: PUSH
7216: LD_INT 1
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: PUSH
7223: LD_INT 2
7225: PUSH
7226: LD_INT 25
7228: PUSH
7229: LD_INT 1
7231: PUSH
7232: EMPTY
7233: LIST
7234: LIST
7235: PUSH
7236: LD_INT 25
7238: PUSH
7239: LD_INT 2
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: PUSH
7246: LD_INT 25
7248: PUSH
7249: LD_INT 3
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PUSH
7256: LD_INT 25
7258: PUSH
7259: LD_INT 4
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: PUSH
7266: LD_INT 25
7268: PUSH
7269: LD_INT 5
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: PUSH
7276: LD_INT 25
7278: PUSH
7279: LD_INT 8
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: LIST
7290: LIST
7291: LIST
7292: LIST
7293: LIST
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: LIST
7299: PPUSH
7300: CALL_OW 69
7304: PPUSH
7305: LD_STRING D3-Sol1-1
7307: PPUSH
7308: LD_STRING 
7310: PPUSH
7311: CALL 12288 0 3
// if KurtStatus then
7315: LD_EXP 26
7319: IFFALSE 7419
// begin Say ( Kurt , D3-Kurt-1 ) ;
7321: LD_EXP 24
7325: PPUSH
7326: LD_STRING D3-Kurt-1
7328: PPUSH
7329: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7333: LD_EXP 1
7337: PPUSH
7338: LD_STRING D3-JMM-1
7340: PPUSH
7341: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7345: LD_EXP 24
7349: PPUSH
7350: LD_STRING D3-Kurt-2
7352: PPUSH
7353: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7357: LD_EXP 1
7361: PPUSH
7362: LD_STRING D3-JMM-2
7364: PPUSH
7365: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7369: LD_EXP 24
7373: PPUSH
7374: LD_STRING D3-Kurt-4
7376: PPUSH
7377: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7381: LD_EXP 1
7385: PPUSH
7386: LD_STRING D3-JMM-4
7388: PPUSH
7389: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7393: LD_EXP 24
7397: PPUSH
7398: LD_STRING D3-Kurt-5
7400: PPUSH
7401: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7405: LD_EXP 24
7409: PPUSH
7410: LD_STRING D3-Kurt-5a
7412: PPUSH
7413: CALL_OW 88
// end else
7417: GO 7515
// begin Say ( Kurt , D3-Kurt-1 ) ;
7419: LD_EXP 24
7423: PPUSH
7424: LD_STRING D3-Kurt-1
7426: PPUSH
7427: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7431: LD_EXP 1
7435: PPUSH
7436: LD_STRING D3-JMM-1
7438: PPUSH
7439: CALL_OW 88
// Say ( Kurt , D3-Kurt-3 ) ;
7443: LD_EXP 24
7447: PPUSH
7448: LD_STRING D3-Kurt-3
7450: PPUSH
7451: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7455: LD_EXP 1
7459: PPUSH
7460: LD_STRING D3-JMM-3
7462: PPUSH
7463: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7467: LD_EXP 24
7471: PPUSH
7472: LD_STRING D3-Kurt-4
7474: PPUSH
7475: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7479: LD_EXP 1
7483: PPUSH
7484: LD_STRING D3-JMM-4
7486: PPUSH
7487: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7491: LD_EXP 24
7495: PPUSH
7496: LD_STRING D3-Kurt-5
7498: PPUSH
7499: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
7503: LD_EXP 24
7507: PPUSH
7508: LD_STRING D3-Kurt-5b
7510: PPUSH
7511: CALL_OW 88
// end ; if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
7515: LD_VAR 0 8
7519: PUSH
7520: LD_INT 120
7522: PUSH
7523: LD_INT 60
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: PUSH
7530: LD_EXP 26
7534: PUSH
7535: LD_INT 1
7537: PLUS
7538: ARRAY
7539: GREATEREQUAL
7540: PUSH
7541: LD_VAR 0 10
7545: PUSH
7546: LD_INT 120
7548: PUSH
7549: LD_INT 60
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: PUSH
7556: LD_EXP 26
7560: PUSH
7561: LD_INT 1
7563: PLUS
7564: ARRAY
7565: GREATEREQUAL
7566: AND
7567: IFFALSE 7619
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
7569: LD_ADDR_VAR 0 3
7573: PUSH
7574: LD_STRING Q2
7576: PUSH
7577: LD_STRING Q2K
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: PUSH
7584: LD_EXP 26
7588: PUSH
7589: LD_INT 1
7591: PLUS
7592: ARRAY
7593: PPUSH
7594: LD_INT 1
7596: PUSH
7597: LD_INT 2
7599: PUSH
7600: LD_INT 3
7602: PUSH
7603: LD_INT 4
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: PPUSH
7612: CALL_OW 98
7616: ST_TO_ADDR
7617: GO 7663
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 3 , 4 ] ) ;
7619: LD_ADDR_VAR 0 3
7623: PUSH
7624: LD_STRING Q2
7626: PUSH
7627: LD_STRING Q2K
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: PUSH
7634: LD_EXP 26
7638: PUSH
7639: LD_INT 1
7641: PLUS
7642: ARRAY
7643: PPUSH
7644: LD_INT 1
7646: PUSH
7647: LD_INT 3
7649: PUSH
7650: LD_INT 4
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: LIST
7657: PPUSH
7658: CALL_OW 98
7662: ST_TO_ADDR
// if dec1 = 1 then
7663: LD_VAR 0 3
7667: PUSH
7668: LD_INT 1
7670: EQUAL
7671: IFFALSE 7705
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7673: LD_EXP 1
7677: PPUSH
7678: LD_STRING D3Ka-JMM-1
7680: PPUSH
7681: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7685: LD_EXP 24
7689: PPUSH
7690: LD_STRING D3Ka-Kurt-1
7692: PPUSH
7693: CALL_OW 88
// warWithLegion = 1 ;
7697: LD_ADDR_EXP 30
7701: PUSH
7702: LD_INT 1
7704: ST_TO_ADDR
// end ; if dec1 = 2 then
7705: LD_VAR 0 3
7709: PUSH
7710: LD_INT 2
7712: EQUAL
7713: IFFALSE 7797
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7715: LD_EXP 1
7719: PPUSH
7720: LD_STRING D3Kb-JMM-1
7722: PPUSH
7723: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7727: LD_EXP 24
7731: PPUSH
7732: LD_STRING D3Kb-Kurt-1
7734: PPUSH
7735: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7739: LD_ADDR_VAR 0 11
7743: PUSH
7744: LD_INT 120
7746: PUSH
7747: LD_INT 60
7749: PUSH
7750: EMPTY
7751: LIST
7752: LIST
7753: PUSH
7754: LD_EXP 26
7758: PUSH
7759: LD_INT 1
7761: PLUS
7762: ARRAY
7763: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7764: LD_ADDR_VAR 0 12
7768: PUSH
7769: LD_INT 120
7771: PUSH
7772: LD_INT 60
7774: PUSH
7775: EMPTY
7776: LIST
7777: LIST
7778: PUSH
7779: LD_EXP 26
7783: PUSH
7784: LD_INT 1
7786: PLUS
7787: ARRAY
7788: ST_TO_ADDR
// payForNeutral := true ;
7789: LD_ADDR_VAR 0 13
7793: PUSH
7794: LD_INT 1
7796: ST_TO_ADDR
// end ; if dec1 = 3 then
7797: LD_VAR 0 3
7801: PUSH
7802: LD_INT 3
7804: EQUAL
7805: IFFALSE 8040
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7807: LD_EXP 1
7811: PPUSH
7812: LD_STRING D3Kc1-JMM-1
7814: PPUSH
7815: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7819: LD_EXP 24
7823: PPUSH
7824: LD_STRING D3Kc1-Kurt-1
7826: PPUSH
7827: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7831: LD_EXP 1
7835: PPUSH
7836: LD_STRING D3Kc1-JMM-2
7838: PPUSH
7839: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7843: LD_EXP 24
7847: PPUSH
7848: LD_STRING D3Kc1-Kurt-2
7850: PPUSH
7851: CALL_OW 88
// askSiberite = 1 ;
7855: LD_ADDR_EXP 32
7859: PUSH
7860: LD_INT 1
7862: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7863: LD_ADDR_VAR 0 4
7867: PUSH
7868: LD_STRING Q2b
7870: PPUSH
7871: LD_INT 1
7873: PUSH
7874: LD_INT 2
7876: PUSH
7877: LD_INT 3
7879: PUSH
7880: EMPTY
7881: LIST
7882: LIST
7883: LIST
7884: PPUSH
7885: CALL_OW 98
7889: ST_TO_ADDR
// if dec2 = 1 then
7890: LD_VAR 0 4
7894: PUSH
7895: LD_INT 1
7897: EQUAL
7898: IFFALSE 7932
// begin Say ( JMM , D4a-JMM-1 ) ;
7900: LD_EXP 1
7904: PPUSH
7905: LD_STRING D4a-JMM-1
7907: PPUSH
7908: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7912: LD_EXP 24
7916: PPUSH
7917: LD_STRING D4b-Kurt-1
7919: PPUSH
7920: CALL_OW 88
// warWithLegion = 1 ;
7924: LD_ADDR_EXP 30
7928: PUSH
7929: LD_INT 1
7931: ST_TO_ADDR
// end ; if dec2 = 2 then
7932: LD_VAR 0 4
7936: PUSH
7937: LD_INT 2
7939: EQUAL
7940: IFFALSE 7974
// begin Say ( JMM , D4b-JMM-1 ) ;
7942: LD_EXP 1
7946: PPUSH
7947: LD_STRING D4b-JMM-1
7949: PPUSH
7950: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7954: LD_EXP 24
7958: PPUSH
7959: LD_STRING D4b-Kurt-1
7961: PPUSH
7962: CALL_OW 88
// warWithLegion = 1 ;
7966: LD_ADDR_EXP 30
7970: PUSH
7971: LD_INT 1
7973: ST_TO_ADDR
// end ; if dec2 = 3 then
7974: LD_VAR 0 4
7978: PUSH
7979: LD_INT 3
7981: EQUAL
7982: IFFALSE 8040
// begin Say ( JMM , D4c-JMM-1 ) ;
7984: LD_EXP 1
7988: PPUSH
7989: LD_STRING D4c-JMM-1
7991: PPUSH
7992: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7996: LD_EXP 24
8000: PPUSH
8001: LD_STRING D4c-Kurt-1
8003: PPUSH
8004: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8008: LD_EXP 1
8012: PPUSH
8013: LD_STRING D4c-JMM-2
8015: PPUSH
8016: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8020: LD_EXP 24
8024: PPUSH
8025: LD_STRING D4c-Kurt-2
8027: PPUSH
8028: CALL_OW 88
// fakeInfo = 1 ;
8032: LD_ADDR_EXP 31
8036: PUSH
8037: LD_INT 1
8039: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
8040: LD_VAR 0 3
8044: PUSH
8045: LD_INT 4
8047: EQUAL
8048: IFFALSE 9123
// begin Say ( JMM , D3Kd-JMM-1 ) ;
8050: LD_EXP 1
8054: PPUSH
8055: LD_STRING D3Kd-JMM-1
8057: PPUSH
8058: CALL_OW 88
// if crates >= [ 200 , 120 ] [ KurtStatus + 1 ] and siberite >= [ 200 , 120 ] [ KurtStatus + 1 ] then
8062: LD_VAR 0 8
8066: PUSH
8067: LD_INT 200
8069: PUSH
8070: LD_INT 120
8072: PUSH
8073: EMPTY
8074: LIST
8075: LIST
8076: PUSH
8077: LD_EXP 26
8081: PUSH
8082: LD_INT 1
8084: PLUS
8085: ARRAY
8086: GREATEREQUAL
8087: PUSH
8088: LD_VAR 0 10
8092: PUSH
8093: LD_INT 200
8095: PUSH
8096: LD_INT 120
8098: PUSH
8099: EMPTY
8100: LIST
8101: LIST
8102: PUSH
8103: LD_EXP 26
8107: PUSH
8108: LD_INT 1
8110: PLUS
8111: ARRAY
8112: GREATEREQUAL
8113: AND
8114: IFFALSE 8166
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8116: LD_ADDR_VAR 0 4
8120: PUSH
8121: LD_STRING Q2a
8123: PUSH
8124: LD_STRING Q2aK
8126: PUSH
8127: EMPTY
8128: LIST
8129: LIST
8130: PUSH
8131: LD_EXP 26
8135: PUSH
8136: LD_INT 1
8138: PLUS
8139: ARRAY
8140: PPUSH
8141: LD_INT 1
8143: PUSH
8144: LD_INT 2
8146: PUSH
8147: LD_INT 3
8149: PUSH
8150: LD_INT 4
8152: PUSH
8153: EMPTY
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: PPUSH
8159: CALL_OW 98
8163: ST_TO_ADDR
8164: GO 8343
// if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
8166: LD_VAR 0 8
8170: PUSH
8171: LD_INT 120
8173: PUSH
8174: LD_INT 60
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: PUSH
8181: LD_EXP 26
8185: PUSH
8186: LD_INT 1
8188: PLUS
8189: ARRAY
8190: GREATEREQUAL
8191: PUSH
8192: LD_VAR 0 10
8196: PUSH
8197: LD_INT 120
8199: PUSH
8200: LD_INT 60
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: PUSH
8207: LD_EXP 26
8211: PUSH
8212: LD_INT 1
8214: PLUS
8215: ARRAY
8216: GREATEREQUAL
8217: AND
8218: IFFALSE 8266
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 4 ] ) else
8220: LD_ADDR_VAR 0 4
8224: PUSH
8225: LD_STRING Q2a
8227: PUSH
8228: LD_STRING Q2aK
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: PUSH
8235: LD_EXP 26
8239: PUSH
8240: LD_INT 1
8242: PLUS
8243: ARRAY
8244: PPUSH
8245: LD_INT 1
8247: PUSH
8248: LD_INT 2
8250: PUSH
8251: LD_INT 4
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: LIST
8258: PPUSH
8259: CALL_OW 98
8263: ST_TO_ADDR
8264: GO 8343
// begin case Query ( [ Q2d , Q2dK ] [ KurtStatus + 1 ] ) of 1 :
8266: LD_STRING Q2d
8268: PUSH
8269: LD_STRING Q2dK
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: PUSH
8276: LD_EXP 26
8280: PUSH
8281: LD_INT 1
8283: PLUS
8284: ARRAY
8285: PPUSH
8286: CALL_OW 97
8290: PUSH
8291: LD_INT 1
8293: DOUBLE
8294: EQUAL
8295: IFTRUE 8299
8297: GO 8302
8299: POP
// ; end ;
8300: GO 8303
8302: POP
// dec2 := 0 ;
8303: LD_ADDR_VAR 0 4
8307: PUSH
8308: LD_INT 0
8310: ST_TO_ADDR
// Say ( JMM , D3Kc1-JMM-1 ) ;
8311: LD_EXP 1
8315: PPUSH
8316: LD_STRING D3Kc1-JMM-1
8318: PPUSH
8319: CALL_OW 88
// Say ( Kurt , D3Kc2-Kurt-1 ) ;
8323: LD_EXP 24
8327: PPUSH
8328: LD_STRING D3Kc2-Kurt-1
8330: PPUSH
8331: CALL_OW 88
// warWithLegion := 1 ;
8335: LD_ADDR_EXP 30
8339: PUSH
8340: LD_INT 1
8342: ST_TO_ADDR
// end ; if dec2 = 1 then
8343: LD_VAR 0 4
8347: PUSH
8348: LD_INT 1
8350: EQUAL
8351: IFFALSE 8385
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8353: LD_EXP 1
8357: PPUSH
8358: LD_STRING D5Ka-JMM-1
8360: PPUSH
8361: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
8365: LD_EXP 24
8369: PPUSH
8370: LD_STRING D5Ka-Kurt-1
8372: PPUSH
8373: CALL_OW 88
// warWithLegion = 1 ;
8377: LD_ADDR_EXP 30
8381: PUSH
8382: LD_INT 1
8384: ST_TO_ADDR
// end ; if dec2 = 2 then
8385: LD_VAR 0 4
8389: PUSH
8390: LD_INT 2
8392: EQUAL
8393: IFFALSE 8477
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8395: LD_EXP 1
8399: PPUSH
8400: LD_STRING D3Kb-JMM-1
8402: PPUSH
8403: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8407: LD_EXP 24
8411: PPUSH
8412: LD_STRING D3Kb-Kurt-1
8414: PPUSH
8415: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8419: LD_ADDR_VAR 0 11
8423: PUSH
8424: LD_INT 120
8426: PUSH
8427: LD_INT 60
8429: PUSH
8430: EMPTY
8431: LIST
8432: LIST
8433: PUSH
8434: LD_EXP 26
8438: PUSH
8439: LD_INT 1
8441: PLUS
8442: ARRAY
8443: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8444: LD_ADDR_VAR 0 12
8448: PUSH
8449: LD_INT 120
8451: PUSH
8452: LD_INT 60
8454: PUSH
8455: EMPTY
8456: LIST
8457: LIST
8458: PUSH
8459: LD_EXP 26
8463: PUSH
8464: LD_INT 1
8466: PLUS
8467: ARRAY
8468: ST_TO_ADDR
// payForNeutral := true ;
8469: LD_ADDR_VAR 0 13
8473: PUSH
8474: LD_INT 1
8476: ST_TO_ADDR
// end ; if dec2 = 3 then
8477: LD_VAR 0 4
8481: PUSH
8482: LD_INT 3
8484: EQUAL
8485: IFFALSE 8569
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8487: LD_EXP 1
8491: PPUSH
8492: LD_STRING D3Ke-JMM-1
8494: PPUSH
8495: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
8499: LD_EXP 24
8503: PPUSH
8504: LD_STRING D3Ke-Kurt-1
8506: PPUSH
8507: CALL_OW 88
// cr := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8511: LD_ADDR_VAR 0 11
8515: PUSH
8516: LD_INT 200
8518: PUSH
8519: LD_INT 120
8521: PUSH
8522: EMPTY
8523: LIST
8524: LIST
8525: PUSH
8526: LD_EXP 26
8530: PUSH
8531: LD_INT 1
8533: PLUS
8534: ARRAY
8535: ST_TO_ADDR
// sb := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8536: LD_ADDR_VAR 0 12
8540: PUSH
8541: LD_INT 200
8543: PUSH
8544: LD_INT 120
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PUSH
8551: LD_EXP 26
8555: PUSH
8556: LD_INT 1
8558: PLUS
8559: ARRAY
8560: ST_TO_ADDR
// payForHelp := true ;
8561: LD_ADDR_VAR 0 14
8565: PUSH
8566: LD_INT 1
8568: ST_TO_ADDR
// end ; if dec2 = 4 then
8569: LD_VAR 0 4
8573: PUSH
8574: LD_INT 4
8576: EQUAL
8577: IFFALSE 8812
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8579: LD_EXP 1
8583: PPUSH
8584: LD_STRING D3Kc1-JMM-1
8586: PPUSH
8587: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8591: LD_EXP 24
8595: PPUSH
8596: LD_STRING D3Kc1-Kurt-1
8598: PPUSH
8599: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8603: LD_EXP 1
8607: PPUSH
8608: LD_STRING D3Kc1-JMM-2
8610: PPUSH
8611: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8615: LD_EXP 24
8619: PPUSH
8620: LD_STRING D3Kc1-Kurt-2
8622: PPUSH
8623: CALL_OW 88
// askSiberite = 1 ;
8627: LD_ADDR_EXP 32
8631: PUSH
8632: LD_INT 1
8634: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8635: LD_ADDR_VAR 0 4
8639: PUSH
8640: LD_STRING Q2b
8642: PPUSH
8643: LD_INT 1
8645: PUSH
8646: LD_INT 2
8648: PUSH
8649: LD_INT 3
8651: PUSH
8652: EMPTY
8653: LIST
8654: LIST
8655: LIST
8656: PPUSH
8657: CALL_OW 98
8661: ST_TO_ADDR
// if dec2 = 1 then
8662: LD_VAR 0 4
8666: PUSH
8667: LD_INT 1
8669: EQUAL
8670: IFFALSE 8704
// begin Say ( JMM , D4a-JMM-1 ) ;
8672: LD_EXP 1
8676: PPUSH
8677: LD_STRING D4a-JMM-1
8679: PPUSH
8680: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8684: LD_EXP 24
8688: PPUSH
8689: LD_STRING D4b-Kurt-1
8691: PPUSH
8692: CALL_OW 88
// warWithLegion = 1 ;
8696: LD_ADDR_EXP 30
8700: PUSH
8701: LD_INT 1
8703: ST_TO_ADDR
// end ; if dec2 = 2 then
8704: LD_VAR 0 4
8708: PUSH
8709: LD_INT 2
8711: EQUAL
8712: IFFALSE 8746
// begin Say ( JMM , D4b-JMM-1 ) ;
8714: LD_EXP 1
8718: PPUSH
8719: LD_STRING D4b-JMM-1
8721: PPUSH
8722: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8726: LD_EXP 24
8730: PPUSH
8731: LD_STRING D4b-Kurt-1
8733: PPUSH
8734: CALL_OW 88
// warWithLegion = 1 ;
8738: LD_ADDR_EXP 30
8742: PUSH
8743: LD_INT 1
8745: ST_TO_ADDR
// end ; if dec2 = 3 then
8746: LD_VAR 0 4
8750: PUSH
8751: LD_INT 3
8753: EQUAL
8754: IFFALSE 8812
// begin Say ( JMM , D4c-JMM-1 ) ;
8756: LD_EXP 1
8760: PPUSH
8761: LD_STRING D4c-JMM-1
8763: PPUSH
8764: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8768: LD_EXP 24
8772: PPUSH
8773: LD_STRING D4c-Kurt-1
8775: PPUSH
8776: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8780: LD_EXP 1
8784: PPUSH
8785: LD_STRING D4c-JMM-2
8787: PPUSH
8788: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8792: LD_EXP 24
8796: PPUSH
8797: LD_STRING D4c-Kurt-2
8799: PPUSH
8800: CALL_OW 88
// fakeInfo = 1 ;
8804: LD_ADDR_EXP 31
8808: PUSH
8809: LD_INT 1
8811: ST_TO_ADDR
// end ; end ; if payForNeutral or payForHelp then
8812: LD_VAR 0 13
8816: PUSH
8817: LD_VAR 0 14
8821: OR
8822: IFFALSE 9123
// begin for i in tmp do
8824: LD_ADDR_VAR 0 2
8828: PUSH
8829: LD_VAR 0 5
8833: PUSH
8834: FOR_IN
8835: IFFALSE 9121
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
8837: LD_ADDR_VAR 0 6
8841: PUSH
8842: LD_VAR 0 2
8846: PPUSH
8847: CALL_OW 274
8851: PPUSH
8852: LD_INT 1
8854: PPUSH
8855: CALL_OW 275
8859: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
8860: LD_ADDR_VAR 0 7
8864: PUSH
8865: LD_VAR 0 2
8869: PPUSH
8870: CALL_OW 274
8874: PPUSH
8875: LD_INT 3
8877: PPUSH
8878: CALL_OW 275
8882: ST_TO_ADDR
// if cr then
8883: LD_VAR 0 11
8887: IFFALSE 9001
// begin if tmp2 and tmp2 < cr then
8889: LD_VAR 0 6
8893: PUSH
8894: LD_VAR 0 6
8898: PUSH
8899: LD_VAR 0 11
8903: LESS
8904: AND
8905: IFFALSE 8953
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
8907: LD_VAR 0 2
8911: PPUSH
8912: CALL_OW 274
8916: PPUSH
8917: LD_INT 1
8919: PPUSH
8920: LD_VAR 0 11
8924: PUSH
8925: LD_VAR 0 6
8929: MINUS
8930: PPUSH
8931: CALL_OW 277
// cr := cr - tmp2 ;
8935: LD_ADDR_VAR 0 11
8939: PUSH
8940: LD_VAR 0 11
8944: PUSH
8945: LD_VAR 0 6
8949: MINUS
8950: ST_TO_ADDR
// end else
8951: GO 9001
// if tmp2 > cr then
8953: LD_VAR 0 6
8957: PUSH
8958: LD_VAR 0 11
8962: GREATER
8963: IFFALSE 9001
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
8965: LD_VAR 0 2
8969: PPUSH
8970: CALL_OW 274
8974: PPUSH
8975: LD_INT 1
8977: PPUSH
8978: LD_VAR 0 6
8982: PUSH
8983: LD_VAR 0 11
8987: MINUS
8988: PPUSH
8989: CALL_OW 277
// cr := 0 ;
8993: LD_ADDR_VAR 0 11
8997: PUSH
8998: LD_INT 0
9000: ST_TO_ADDR
// end ; end ; if sb then
9001: LD_VAR 0 12
9005: IFFALSE 9119
// begin if tmp3 and tmp3 < sb then
9007: LD_VAR 0 7
9011: PUSH
9012: LD_VAR 0 7
9016: PUSH
9017: LD_VAR 0 12
9021: LESS
9022: AND
9023: IFFALSE 9071
// begin SetResourceType ( GetBase ( i ) , 3 , sb - tmp3 ) ;
9025: LD_VAR 0 2
9029: PPUSH
9030: CALL_OW 274
9034: PPUSH
9035: LD_INT 3
9037: PPUSH
9038: LD_VAR 0 12
9042: PUSH
9043: LD_VAR 0 7
9047: MINUS
9048: PPUSH
9049: CALL_OW 277
// sb := sb - tmp3 ;
9053: LD_ADDR_VAR 0 12
9057: PUSH
9058: LD_VAR 0 12
9062: PUSH
9063: LD_VAR 0 7
9067: MINUS
9068: ST_TO_ADDR
// end else
9069: GO 9119
// if tmp3 > sb then
9071: LD_VAR 0 7
9075: PUSH
9076: LD_VAR 0 12
9080: GREATER
9081: IFFALSE 9119
// begin SetResourceType ( GetBase ( i ) , 3 , tmp3 - sb ) ;
9083: LD_VAR 0 2
9087: PPUSH
9088: CALL_OW 274
9092: PPUSH
9093: LD_INT 3
9095: PPUSH
9096: LD_VAR 0 7
9100: PUSH
9101: LD_VAR 0 12
9105: MINUS
9106: PPUSH
9107: CALL_OW 277
// sb := 0 ;
9111: LD_ADDR_VAR 0 12
9115: PUSH
9116: LD_INT 0
9118: ST_TO_ADDR
// end ; end ; end ;
9119: GO 8834
9121: POP
9122: POP
// end ; end ; DialogueOff ;
9123: CALL_OW 7
// RemoveSeeing ( 167 , 121 , 1 ) ;
9127: LD_INT 167
9129: PPUSH
9130: LD_INT 121
9132: PPUSH
9133: LD_INT 1
9135: PPUSH
9136: CALL_OW 331
// ComEnterUnit ( Kurt , KurtVeh ) ;
9140: LD_EXP 24
9144: PPUSH
9145: LD_EXP 25
9149: PPUSH
9150: CALL_OW 120
// wait ( 0 0$1 ) ;
9154: LD_INT 35
9156: PPUSH
9157: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9161: LD_EXP 25
9165: PPUSH
9166: LD_INT 4
9168: PPUSH
9169: CALL_OW 113
// wait ( 0 0$3 ) ;
9173: LD_INT 105
9175: PPUSH
9176: CALL_OW 67
// RemoveUnit ( Kurt ) ;
9180: LD_EXP 24
9184: PPUSH
9185: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9189: LD_EXP 25
9193: PPUSH
9194: CALL_OW 64
// wait ( 0 0$3 ) ;
9198: LD_INT 105
9200: PPUSH
9201: CALL_OW 67
// if payForHelp then
9205: LD_VAR 0 14
9209: IFFALSE 9215
// PrepareLegionForPlayer ;
9211: CALL 4566 0 0
// end ;
9215: LD_VAR 0 1
9219: RET
// every 0 0$10 trigger warWithLegion = 1 do
9220: LD_EXP 30
9224: PUSH
9225: LD_INT 1
9227: EQUAL
9228: IFFALSE 9237
9230: GO 9232
9232: DISABLE
// PrepareAttackLegion ;
9233: CALL 5230 0 0
9237: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 1 ) and not GetCargo ( amCargo1 , 2 ) and not GetCargo ( amCargo1 , 3 ) do
9238: LD_EXP 15
9242: PPUSH
9243: CALL_OW 305
9247: PUSH
9248: LD_EXP 15
9252: PPUSH
9253: LD_INT 1
9255: PPUSH
9256: CALL_OW 289
9260: NOT
9261: AND
9262: PUSH
9263: LD_EXP 15
9267: PPUSH
9268: LD_INT 2
9270: PPUSH
9271: CALL_OW 289
9275: NOT
9276: AND
9277: PUSH
9278: LD_EXP 15
9282: PPUSH
9283: LD_INT 3
9285: PPUSH
9286: CALL_OW 289
9290: NOT
9291: AND
9292: IFFALSE 9309
9294: GO 9296
9296: DISABLE
// SetSide ( amCargo1 , 4 ) ;
9297: LD_EXP 15
9301: PPUSH
9302: LD_INT 4
9304: PPUSH
9305: CALL_OW 235
9309: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 2 ) and not GetCargo ( amCargo2 , 3 ) do
9310: LD_EXP 16
9314: PPUSH
9315: CALL_OW 305
9319: PUSH
9320: LD_EXP 16
9324: PPUSH
9325: LD_INT 1
9327: PPUSH
9328: CALL_OW 289
9332: NOT
9333: AND
9334: PUSH
9335: LD_EXP 16
9339: PPUSH
9340: LD_INT 2
9342: PPUSH
9343: CALL_OW 289
9347: NOT
9348: AND
9349: PUSH
9350: LD_EXP 16
9354: PPUSH
9355: LD_INT 3
9357: PPUSH
9358: CALL_OW 289
9362: NOT
9363: AND
9364: IFFALSE 9381
9366: GO 9368
9368: DISABLE
// SetSide ( amCargo2 , 4 ) ;
9369: LD_EXP 16
9373: PPUSH
9374: LD_INT 4
9376: PPUSH
9377: CALL_OW 235
9381: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo3 , 1 ) and not GetCargo ( amCargo3 , 2 ) and not GetCargo ( amCargo3 , 3 ) do
9382: LD_EXP 17
9386: PPUSH
9387: CALL_OW 305
9391: PUSH
9392: LD_EXP 17
9396: PPUSH
9397: LD_INT 1
9399: PPUSH
9400: CALL_OW 289
9404: NOT
9405: AND
9406: PUSH
9407: LD_EXP 17
9411: PPUSH
9412: LD_INT 2
9414: PPUSH
9415: CALL_OW 289
9419: NOT
9420: AND
9421: PUSH
9422: LD_EXP 17
9426: PPUSH
9427: LD_INT 3
9429: PPUSH
9430: CALL_OW 289
9434: NOT
9435: AND
9436: IFFALSE 9453
9438: GO 9440
9440: DISABLE
// SetSide ( amCargo3 , 4 ) ;
9441: LD_EXP 17
9445: PPUSH
9446: LD_INT 4
9448: PPUSH
9449: CALL_OW 235
9453: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo4 , 1 ) and not GetCargo ( amCargo4 , 2 ) and not GetCargo ( amCargo4 , 3 ) do
9454: LD_EXP 18
9458: PPUSH
9459: CALL_OW 305
9463: PUSH
9464: LD_EXP 18
9468: PPUSH
9469: LD_INT 1
9471: PPUSH
9472: CALL_OW 289
9476: NOT
9477: AND
9478: PUSH
9479: LD_EXP 18
9483: PPUSH
9484: LD_INT 2
9486: PPUSH
9487: CALL_OW 289
9491: NOT
9492: AND
9493: PUSH
9494: LD_EXP 18
9498: PPUSH
9499: LD_INT 3
9501: PPUSH
9502: CALL_OW 289
9506: NOT
9507: AND
9508: IFFALSE 9525
9510: GO 9512
9512: DISABLE
// SetSide ( amCargo4 , 4 ) ;
9513: LD_EXP 18
9517: PPUSH
9518: LD_INT 4
9520: PPUSH
9521: CALL_OW 235
9525: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) and not GetCargo ( amCargo5 , 3 ) and not GetCargo ( amCargo5 , 2 ) do
9526: LD_EXP 19
9530: PPUSH
9531: CALL_OW 305
9535: PUSH
9536: LD_EXP 19
9540: PPUSH
9541: LD_INT 1
9543: PPUSH
9544: CALL_OW 289
9548: NOT
9549: AND
9550: PUSH
9551: LD_EXP 19
9555: PPUSH
9556: LD_INT 2
9558: PPUSH
9559: CALL_OW 289
9563: NOT
9564: AND
9565: PUSH
9566: LD_EXP 19
9570: PPUSH
9571: LD_INT 3
9573: PPUSH
9574: CALL_OW 289
9578: NOT
9579: AND
9580: PUSH
9581: LD_EXP 19
9585: PPUSH
9586: LD_INT 2
9588: PPUSH
9589: CALL_OW 289
9593: NOT
9594: AND
9595: IFFALSE 9612
9597: GO 9599
9599: DISABLE
// SetSide ( amCargo5 , 4 ) ;
9600: LD_EXP 19
9604: PPUSH
9605: LD_INT 4
9607: PPUSH
9608: CALL_OW 235
9612: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 1 ) and not GetCargo ( amCargo6 , 2 ) and not GetCargo ( amCargo6 , 3 ) do
9613: LD_EXP 20
9617: PPUSH
9618: CALL_OW 305
9622: PUSH
9623: LD_EXP 20
9627: PPUSH
9628: LD_INT 1
9630: PPUSH
9631: CALL_OW 289
9635: NOT
9636: AND
9637: PUSH
9638: LD_EXP 20
9642: PPUSH
9643: LD_INT 2
9645: PPUSH
9646: CALL_OW 289
9650: NOT
9651: AND
9652: PUSH
9653: LD_EXP 20
9657: PPUSH
9658: LD_INT 3
9660: PPUSH
9661: CALL_OW 289
9665: NOT
9666: AND
9667: IFFALSE 9684
9669: GO 9671
9671: DISABLE
// SetSide ( amCargo6 , 4 ) ;
9672: LD_EXP 20
9676: PPUSH
9677: LD_INT 4
9679: PPUSH
9680: CALL_OW 235
9684: END
// every 0 0$1 trigger IsPlaced ( amCargo7 ) and not GetCargo ( amCargo7 , 1 ) and not GetCargo ( amCargo7 , 2 ) and not GetCargo ( amCargo7 , 3 ) do
9685: LD_EXP 21
9689: PPUSH
9690: CALL_OW 305
9694: PUSH
9695: LD_EXP 21
9699: PPUSH
9700: LD_INT 1
9702: PPUSH
9703: CALL_OW 289
9707: NOT
9708: AND
9709: PUSH
9710: LD_EXP 21
9714: PPUSH
9715: LD_INT 2
9717: PPUSH
9718: CALL_OW 289
9722: NOT
9723: AND
9724: PUSH
9725: LD_EXP 21
9729: PPUSH
9730: LD_INT 3
9732: PPUSH
9733: CALL_OW 289
9737: NOT
9738: AND
9739: IFFALSE 9756
9741: GO 9743
9743: DISABLE
// SetSide ( amCargo7 , 4 ) ;
9744: LD_EXP 21
9748: PPUSH
9749: LD_INT 4
9751: PPUSH
9752: CALL_OW 235
9756: END
// every 0 0$1 do var i ;
9757: GO 9759
9759: DISABLE
9760: LD_INT 0
9762: PPUSH
// begin enable ;
9763: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
9764: LD_ADDR_VAR 0 1
9768: PUSH
9769: LD_INT 22
9771: PUSH
9772: LD_INT 4
9774: PUSH
9775: EMPTY
9776: LIST
9777: LIST
9778: PPUSH
9779: CALL_OW 69
9783: PUSH
9784: FOR_IN
9785: IFFALSE 9824
// begin ComMoveToArea ( i , PlayerSpawn ) ;
9787: LD_VAR 0 1
9791: PPUSH
9792: LD_INT 4
9794: PPUSH
9795: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
9799: LD_VAR 0 1
9803: PPUSH
9804: LD_INT 4
9806: PPUSH
9807: CALL_OW 308
9811: IFFALSE 9822
// RemoveUnit ( i ) ;
9813: LD_VAR 0 1
9817: PPUSH
9818: CALL_OW 64
// end ;
9822: GO 9784
9824: POP
9825: POP
// end ;
9826: PPOPN 1
9828: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
9829: LD_EXP 27
9833: PUSH
9834: LD_INT 1
9836: EQUAL
9837: IFFALSE 10276
9839: GO 9841
9841: DISABLE
9842: LD_INT 0
9844: PPUSH
9845: PPUSH
9846: PPUSH
// begin enable ;
9847: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9848: LD_ADDR_VAR 0 2
9852: PUSH
9853: LD_INT 12
9855: PPUSH
9856: LD_INT 22
9858: PUSH
9859: LD_INT 3
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: PUSH
9866: LD_INT 21
9868: PUSH
9869: LD_INT 2
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: PPUSH
9880: CALL_OW 70
9884: ST_TO_ADDR
// for i in enemyVehs do
9885: LD_ADDR_VAR 0 1
9889: PUSH
9890: LD_VAR 0 2
9894: PUSH
9895: FOR_IN
9896: IFFALSE 10274
// begin if See ( 1 , i ) then
9898: LD_INT 1
9900: PPUSH
9901: LD_VAR 0 1
9905: PPUSH
9906: CALL_OW 292
9910: IFFALSE 10272
// begin disable ;
9912: DISABLE
// DialogueOn ;
9913: CALL_OW 6
// CenterNowOnUnits ( i ) ;
9917: LD_VAR 0 1
9921: PPUSH
9922: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
9926: LD_INT 22
9928: PUSH
9929: LD_INT 1
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: PUSH
9936: LD_INT 26
9938: PUSH
9939: LD_INT 1
9941: PUSH
9942: EMPTY
9943: LIST
9944: LIST
9945: PUSH
9946: LD_INT 2
9948: PUSH
9949: LD_INT 25
9951: PUSH
9952: LD_INT 1
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: PUSH
9959: LD_INT 25
9961: PUSH
9962: LD_INT 2
9964: PUSH
9965: EMPTY
9966: LIST
9967: LIST
9968: PUSH
9969: LD_INT 25
9971: PUSH
9972: LD_INT 3
9974: PUSH
9975: EMPTY
9976: LIST
9977: LIST
9978: PUSH
9979: LD_INT 25
9981: PUSH
9982: LD_INT 4
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: PUSH
9989: LD_INT 25
9991: PUSH
9992: LD_INT 5
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: PUSH
9999: LD_INT 25
10001: PUSH
10002: LD_INT 8
10004: PUSH
10005: EMPTY
10006: LIST
10007: LIST
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: LIST
10022: PPUSH
10023: CALL_OW 69
10027: PPUSH
10028: LD_STRING DT1-Sol1-1
10030: PPUSH
10031: LD_STRING DT1-FSol1-1
10033: PPUSH
10034: CALL 12288 0 3
// dec = ShowQuery2 ;
10038: LD_ADDR_VAR 0 3
10042: PUSH
10043: CALL 12831 0 0
10047: ST_TO_ADDR
// if dec = 1 then
10048: LD_VAR 0 3
10052: PUSH
10053: LD_INT 1
10055: EQUAL
10056: IFFALSE 10162
// begin Say ( JMM , D2-JMM-1 ) ;
10058: LD_EXP 1
10062: PPUSH
10063: LD_STRING D2-JMM-1
10065: PPUSH
10066: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10070: LD_EXP 22
10074: PPUSH
10075: LD_STRING D2-Pow-1
10077: PPUSH
10078: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
10082: LD_EXP 1
10086: PPUSH
10087: LD_STRING D2a-JMM-1
10089: PPUSH
10090: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
10094: LD_EXP 22
10098: PPUSH
10099: LD_STRING D2a-Pow-1
10101: PPUSH
10102: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
10106: LD_EXP 1
10110: PPUSH
10111: LD_STRING D2a-JMM-2
10113: PPUSH
10114: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10118: LD_EXP 22
10122: PPUSH
10123: LD_STRING D2a-Pow-2
10125: PPUSH
10126: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10130: LD_EXP 1
10134: PPUSH
10135: LD_STRING D2a-JMM-3
10137: PPUSH
10138: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10142: LD_EXP 22
10146: PPUSH
10147: LD_STRING D2a-Pow-3
10149: PPUSH
10150: CALL_OW 94
// secondPass = 2 ;
10154: LD_ADDR_EXP 27
10158: PUSH
10159: LD_INT 2
10161: ST_TO_ADDR
// end ; if dec = 2 then
10162: LD_VAR 0 3
10166: PUSH
10167: LD_INT 2
10169: EQUAL
10170: IFFALSE 10264
// begin Say ( JMM , D2-JMM-1 ) ;
10172: LD_EXP 1
10176: PPUSH
10177: LD_STRING D2-JMM-1
10179: PPUSH
10180: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10184: LD_EXP 22
10188: PPUSH
10189: LD_STRING D2-Pow-1
10191: PPUSH
10192: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
10196: LD_EXP 1
10200: PPUSH
10201: LD_STRING D2b-JMM-1
10203: PPUSH
10204: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
10208: LD_EXP 22
10212: PPUSH
10213: LD_STRING D2b-Pow-1
10215: PPUSH
10216: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10220: LD_EXP 1
10224: PPUSH
10225: LD_STRING D2c-JMM-1
10227: PPUSH
10228: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10232: LD_EXP 22
10236: PPUSH
10237: LD_STRING D2c-Pow-1
10239: PPUSH
10240: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10244: LD_EXP 1
10248: PPUSH
10249: LD_STRING D2c-JMM-2
10251: PPUSH
10252: CALL_OW 88
// secondPass = 2 ;
10256: LD_ADDR_EXP 27
10260: PUSH
10261: LD_INT 2
10263: ST_TO_ADDR
// end ; DialogueOff ;
10264: CALL_OW 7
// exit ;
10268: POP
10269: POP
10270: GO 10276
// end ; end ;
10272: GO 9895
10274: POP
10275: POP
// end ;
10276: PPOPN 3
10278: END
// every 0 0$1 trigger vehicleTeleported = 1 do var i , vehicles ;
10279: LD_EXP 28
10283: PUSH
10284: LD_INT 1
10286: EQUAL
10287: IFFALSE 10520
10289: GO 10291
10291: DISABLE
10292: LD_INT 0
10294: PPUSH
10295: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
10296: LD_ADDR_VAR 0 2
10300: PUSH
10301: LD_INT 11
10303: PPUSH
10304: LD_INT 22
10306: PUSH
10307: LD_INT 3
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: PUSH
10314: LD_INT 24
10316: PUSH
10317: LD_INT 250
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: PPUSH
10328: CALL_OW 70
10332: ST_TO_ADDR
// enable ;
10333: ENABLE
// for i in vehicles do
10334: LD_ADDR_VAR 0 1
10338: PUSH
10339: LD_VAR 0 2
10343: PUSH
10344: FOR_IN
10345: IFFALSE 10518
// begin if See ( 1 , i ) and vehicleTeleported = 1 and tpCounter <= 4 then
10347: LD_INT 1
10349: PPUSH
10350: LD_VAR 0 1
10354: PPUSH
10355: CALL_OW 292
10359: PUSH
10360: LD_EXP 28
10364: PUSH
10365: LD_INT 1
10367: EQUAL
10368: AND
10369: PUSH
10370: LD_EXP 29
10374: PUSH
10375: LD_INT 4
10377: LESSEQUAL
10378: AND
10379: IFFALSE 10516
// begin disable ;
10381: DISABLE
// DialogueOn ;
10382: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10386: LD_INT 22
10388: PUSH
10389: LD_INT 1
10391: PUSH
10392: EMPTY
10393: LIST
10394: LIST
10395: PUSH
10396: LD_INT 26
10398: PUSH
10399: LD_INT 1
10401: PUSH
10402: EMPTY
10403: LIST
10404: LIST
10405: PUSH
10406: LD_INT 2
10408: PUSH
10409: LD_INT 25
10411: PUSH
10412: LD_INT 1
10414: PUSH
10415: EMPTY
10416: LIST
10417: LIST
10418: PUSH
10419: LD_INT 25
10421: PUSH
10422: LD_INT 2
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: PUSH
10429: LD_INT 25
10431: PUSH
10432: LD_INT 3
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: PUSH
10439: LD_INT 25
10441: PUSH
10442: LD_INT 4
10444: PUSH
10445: EMPTY
10446: LIST
10447: LIST
10448: PUSH
10449: LD_INT 25
10451: PUSH
10452: LD_INT 5
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PUSH
10459: LD_INT 25
10461: PUSH
10462: LD_INT 8
10464: PUSH
10465: EMPTY
10466: LIST
10467: LIST
10468: PUSH
10469: EMPTY
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: LIST
10482: PPUSH
10483: CALL_OW 69
10487: PPUSH
10488: LD_STRING DT1-Sol1-1
10490: PPUSH
10491: LD_STRING DT1-FSol1-1
10493: PPUSH
10494: CALL 12288 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10498: LD_EXP 1
10502: PPUSH
10503: LD_STRING DT1-JMM-1
10505: PPUSH
10506: CALL_OW 88
// DialogueOff ;
10510: CALL_OW 7
// break ;
10514: GO 10518
// end ; end ;
10516: GO 10344
10518: POP
10519: POP
// end ;
10520: PPOPN 2
10522: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter do
10523: LD_EXP 28
10527: PUSH
10528: LD_INT 1
10530: EQUAL
10531: PUSH
10532: LD_INT 11
10534: PPUSH
10535: LD_INT 22
10537: PUSH
10538: LD_INT 3
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: PUSH
10545: LD_INT 24
10547: PUSH
10548: LD_INT 251
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: PUSH
10555: LD_INT 2
10557: PUSH
10558: LD_INT 21
10560: PUSH
10561: LD_INT 2
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: PUSH
10568: LD_INT 21
10570: PUSH
10571: LD_INT 1
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: PUSH
10578: EMPTY
10579: LIST
10580: LIST
10581: LIST
10582: PUSH
10583: EMPTY
10584: LIST
10585: LIST
10586: LIST
10587: PPUSH
10588: CALL_OW 70
10592: PUSH
10593: LD_INT 0
10595: EQUAL
10596: AND
10597: PUSH
10598: LD_EXP 29
10602: AND
10603: IFFALSE 10760
10605: GO 10607
10607: DISABLE
// begin vehicleTeleported = 2 ;
10608: LD_ADDR_EXP 28
10612: PUSH
10613: LD_INT 2
10615: ST_TO_ADDR
// DialogueOn ;
10616: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
10620: LD_EXP 1
10624: PPUSH
10625: LD_STRING DT1a-JMM-1
10627: PPUSH
10628: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
10632: LD_INT 22
10634: PUSH
10635: LD_INT 1
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PUSH
10642: LD_INT 26
10644: PUSH
10645: LD_INT 1
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: PUSH
10652: LD_INT 2
10654: PUSH
10655: LD_INT 25
10657: PUSH
10658: LD_INT 1
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: PUSH
10665: LD_INT 25
10667: PUSH
10668: LD_INT 2
10670: PUSH
10671: EMPTY
10672: LIST
10673: LIST
10674: PUSH
10675: LD_INT 25
10677: PUSH
10678: LD_INT 3
10680: PUSH
10681: EMPTY
10682: LIST
10683: LIST
10684: PUSH
10685: LD_INT 25
10687: PUSH
10688: LD_INT 4
10690: PUSH
10691: EMPTY
10692: LIST
10693: LIST
10694: PUSH
10695: LD_INT 25
10697: PUSH
10698: LD_INT 5
10700: PUSH
10701: EMPTY
10702: LIST
10703: LIST
10704: PUSH
10705: LD_INT 25
10707: PUSH
10708: LD_INT 8
10710: PUSH
10711: EMPTY
10712: LIST
10713: LIST
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: LIST
10728: PPUSH
10729: CALL_OW 69
10733: PPUSH
10734: LD_STRING DT1a-Sol1-1
10736: PPUSH
10737: LD_STRING DT1a-FSol1-1
10739: PPUSH
10740: CALL 12288 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
10744: LD_EXP 1
10748: PPUSH
10749: LD_STRING DT1a-JMM-2
10751: PPUSH
10752: CALL_OW 88
// DialogueOff ;
10756: CALL_OW 7
// end ;
10760: END
// every 0 0$2 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] ] ) do var i , vehicles , speaker ;
10761: LD_EXP 28
10765: PUSH
10766: LD_INT 3
10768: EQUAL
10769: PUSH
10770: LD_INT 11
10772: PPUSH
10773: LD_INT 22
10775: PUSH
10776: LD_INT 3
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: PUSH
10783: LD_INT 101
10785: PUSH
10786: LD_INT 1
10788: PUSH
10789: EMPTY
10790: LIST
10791: LIST
10792: PUSH
10793: EMPTY
10794: LIST
10795: LIST
10796: PPUSH
10797: CALL_OW 70
10801: AND
10802: IFFALSE 11083
10804: GO 10806
10806: DISABLE
10807: LD_INT 0
10809: PPUSH
10810: PPUSH
10811: PPUSH
// begin wait ( 0 0$0.3 ) ;
10812: LD_INT 10
10814: PPUSH
10815: CALL_OW 67
// DialogueOn ;
10819: CALL_OW 6
// speaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
10823: LD_ADDR_VAR 0 3
10827: PUSH
10828: LD_INT 22
10830: PUSH
10831: LD_INT 1
10833: PUSH
10834: EMPTY
10835: LIST
10836: LIST
10837: PUSH
10838: LD_INT 26
10840: PUSH
10841: LD_INT 1
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: PUSH
10848: LD_INT 2
10850: PUSH
10851: LD_INT 25
10853: PUSH
10854: LD_INT 1
10856: PUSH
10857: EMPTY
10858: LIST
10859: LIST
10860: PUSH
10861: LD_INT 25
10863: PUSH
10864: LD_INT 2
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: PUSH
10871: LD_INT 25
10873: PUSH
10874: LD_INT 3
10876: PUSH
10877: EMPTY
10878: LIST
10879: LIST
10880: PUSH
10881: LD_INT 25
10883: PUSH
10884: LD_INT 4
10886: PUSH
10887: EMPTY
10888: LIST
10889: LIST
10890: PUSH
10891: LD_INT 25
10893: PUSH
10894: LD_INT 5
10896: PUSH
10897: EMPTY
10898: LIST
10899: LIST
10900: PUSH
10901: LD_INT 25
10903: PUSH
10904: LD_INT 8
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: PUSH
10920: EMPTY
10921: LIST
10922: LIST
10923: LIST
10924: PPUSH
10925: CALL_OW 69
10929: PPUSH
10930: LD_STRING DT2-Sol1-1
10932: PPUSH
10933: LD_STRING DT2-FSol1-1
10935: PPUSH
10936: CALL 12288 0 3
10940: ST_TO_ADDR
// DialogueOff ;
10941: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
10945: LD_INT 35
10947: PPUSH
10948: CALL_OW 67
// until FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) = 0 ;
10952: LD_INT 11
10954: PPUSH
10955: LD_INT 22
10957: PUSH
10958: LD_INT 3
10960: PUSH
10961: EMPTY
10962: LIST
10963: LIST
10964: PUSH
10965: LD_INT 24
10967: PUSH
10968: LD_INT 250
10970: PUSH
10971: EMPTY
10972: LIST
10973: LIST
10974: PUSH
10975: EMPTY
10976: LIST
10977: LIST
10978: PPUSH
10979: CALL_OW 70
10983: PUSH
10984: LD_INT 0
10986: EQUAL
10987: IFFALSE 10945
// wait ( 0 0$2 ) ;
10989: LD_INT 70
10991: PPUSH
10992: CALL_OW 67
// vehicleTeleported = 4 ;
10996: LD_ADDR_EXP 28
11000: PUSH
11001: LD_INT 4
11003: ST_TO_ADDR
// DialogueOn ;
11004: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
11008: LD_EXP 1
11012: PPUSH
11013: LD_STRING DT2a-JMM-1
11015: PPUSH
11016: CALL_OW 88
// if speaker then
11020: LD_VAR 0 3
11024: IFFALSE 11067
// if GetSex ( speaker ) = 1 then
11026: LD_VAR 0 3
11030: PPUSH
11031: CALL_OW 258
11035: PUSH
11036: LD_INT 1
11038: EQUAL
11039: IFFALSE 11055
// Say ( speaker , DT2a-Sol1-1 ) else
11041: LD_VAR 0 3
11045: PPUSH
11046: LD_STRING DT2a-Sol1-1
11048: PPUSH
11049: CALL_OW 88
11053: GO 11067
// Say ( speaker , DT2a-FSol1-1 ) ;
11055: LD_VAR 0 3
11059: PPUSH
11060: LD_STRING DT2a-FSol1-1
11062: PPUSH
11063: CALL_OW 88
// Say ( Donaldson , DT2a-Don-1 ) ;
11067: LD_EXP 3
11071: PPUSH
11072: LD_STRING DT2a-Don-1
11074: PPUSH
11075: CALL_OW 88
// DialogueOff ;
11079: CALL_OW 7
// end ;
11083: PPOPN 3
11085: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
11086: LD_INT 1
11088: PPUSH
11089: LD_INT 45
11091: PPUSH
11092: LD_INT 74
11094: PPUSH
11095: CALL_OW 293
11099: IFFALSE 11263
11101: GO 11103
11103: DISABLE
// begin DialogueOn ;
11104: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
11108: LD_INT 36
11110: PPUSH
11111: LD_INT 55
11113: PPUSH
11114: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
11118: LD_INT 22
11120: PUSH
11121: LD_INT 1
11123: PUSH
11124: EMPTY
11125: LIST
11126: LIST
11127: PUSH
11128: LD_INT 26
11130: PUSH
11131: LD_INT 1
11133: PUSH
11134: EMPTY
11135: LIST
11136: LIST
11137: PUSH
11138: LD_INT 2
11140: PUSH
11141: LD_INT 25
11143: PUSH
11144: LD_INT 1
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: PUSH
11151: LD_INT 25
11153: PUSH
11154: LD_INT 2
11156: PUSH
11157: EMPTY
11158: LIST
11159: LIST
11160: PUSH
11161: LD_INT 25
11163: PUSH
11164: LD_INT 3
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: PUSH
11171: LD_INT 25
11173: PUSH
11174: LD_INT 4
11176: PUSH
11177: EMPTY
11178: LIST
11179: LIST
11180: PUSH
11181: LD_INT 25
11183: PUSH
11184: LD_INT 5
11186: PUSH
11187: EMPTY
11188: LIST
11189: LIST
11190: PUSH
11191: LD_INT 25
11193: PUSH
11194: LD_INT 8
11196: PUSH
11197: EMPTY
11198: LIST
11199: LIST
11200: PUSH
11201: EMPTY
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: PUSH
11210: EMPTY
11211: LIST
11212: LIST
11213: LIST
11214: PPUSH
11215: CALL_OW 69
11219: PPUSH
11220: LD_STRING D5-Sol1-1
11222: PPUSH
11223: LD_STRING D5-FSol1-
11225: PPUSH
11226: CALL 12288 0 3
// if warWithLegion and IsOk ( Donaldson ) then
11230: LD_EXP 30
11234: PUSH
11235: LD_EXP 3
11239: PPUSH
11240: CALL_OW 302
11244: AND
11245: IFFALSE 11259
// Say ( Donaldson , D5-Don-1 ) ;
11247: LD_EXP 3
11251: PPUSH
11252: LD_STRING D5-Don-1
11254: PPUSH
11255: CALL_OW 88
// DialogueOff ;
11259: CALL_OW 7
// end ;
11263: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
11264: LD_INT 1
11266: PPUSH
11267: LD_INT 10
11269: PPUSH
11270: CALL_OW 292
11274: PUSH
11275: LD_INT 1
11277: PPUSH
11278: LD_INT 137
11280: PPUSH
11281: CALL_OW 292
11285: OR
11286: IFFALSE 11430
11288: GO 11290
11290: DISABLE
// begin DialogueOn ;
11291: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
11295: LD_INT 22
11297: PUSH
11298: LD_INT 1
11300: PUSH
11301: EMPTY
11302: LIST
11303: LIST
11304: PUSH
11305: LD_INT 26
11307: PUSH
11308: LD_INT 1
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: PUSH
11315: LD_INT 2
11317: PUSH
11318: LD_INT 25
11320: PUSH
11321: LD_INT 1
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PUSH
11328: LD_INT 25
11330: PUSH
11331: LD_INT 2
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: PUSH
11338: LD_INT 25
11340: PUSH
11341: LD_INT 3
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: PUSH
11348: LD_INT 25
11350: PUSH
11351: LD_INT 4
11353: PUSH
11354: EMPTY
11355: LIST
11356: LIST
11357: PUSH
11358: LD_INT 25
11360: PUSH
11361: LD_INT 5
11363: PUSH
11364: EMPTY
11365: LIST
11366: LIST
11367: PUSH
11368: LD_INT 25
11370: PUSH
11371: LD_INT 8
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: LIST
11385: LIST
11386: PUSH
11387: EMPTY
11388: LIST
11389: LIST
11390: LIST
11391: PPUSH
11392: CALL_OW 69
11396: PPUSH
11397: LD_STRING DT3-Sol1-1
11399: PPUSH
11400: LD_STRING DT3-FSol1-1
11402: PPUSH
11403: CALL 12288 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11407: LD_EXP 1
11411: PPUSH
11412: LD_STRING DT3-JMM-1
11414: PPUSH
11415: CALL_OW 88
// DialogueOff ;
11419: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11423: LD_STRING M2
11425: PPUSH
11426: CALL_OW 337
// end ;
11430: END
// every 0 0$1 trigger ruEscape = 0 do var i ;
11431: LD_EXP 42
11435: PUSH
11436: LD_INT 0
11438: EQUAL
11439: IFFALSE 11522
11441: GO 11443
11443: DISABLE
11444: LD_INT 0
11446: PPUSH
// begin enable ;
11447: ENABLE
// for i in FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
11448: LD_ADDR_VAR 0 1
11452: PUSH
11453: LD_INT 10
11455: PPUSH
11456: LD_INT 22
11458: PUSH
11459: LD_INT 3
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: PUSH
11466: LD_INT 21
11468: PUSH
11469: LD_INT 2
11471: PUSH
11472: EMPTY
11473: LIST
11474: LIST
11475: PUSH
11476: LD_INT 58
11478: PUSH
11479: EMPTY
11480: LIST
11481: PUSH
11482: EMPTY
11483: LIST
11484: LIST
11485: LIST
11486: PPUSH
11487: CALL_OW 70
11491: PUSH
11492: FOR_IN
11493: IFFALSE 11520
// if GetLives ( i ) < 1000 then
11495: LD_VAR 0 1
11499: PPUSH
11500: CALL_OW 256
11504: PUSH
11505: LD_INT 1000
11507: LESS
11508: IFFALSE 11518
// ruEscape = 1 ;
11510: LD_ADDR_EXP 42
11514: PUSH
11515: LD_INT 1
11517: ST_TO_ADDR
11518: GO 11492
11520: POP
11521: POP
// end ;
11522: PPOPN 1
11524: END
// every 0 0$1 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or FilterUnitsInArea ( EscapeTriggerArea , [ f_side , 1 ] ) > 0 or ruEscape = 1 do var i , j , vehs ;
11525: LD_INT 3
11527: PPUSH
11528: CALL_OW 303
11532: PUSH
11533: LD_INT 4
11535: PPUSH
11536: CALL_OW 303
11540: OR
11541: PUSH
11542: LD_INT 22
11544: PPUSH
11545: LD_INT 22
11547: PUSH
11548: LD_INT 1
11550: PUSH
11551: EMPTY
11552: LIST
11553: LIST
11554: PPUSH
11555: CALL_OW 70
11559: PUSH
11560: LD_INT 0
11562: GREATER
11563: OR
11564: PUSH
11565: LD_EXP 42
11569: PUSH
11570: LD_INT 1
11572: EQUAL
11573: OR
11574: IFFALSE 11805
11576: GO 11578
11578: DISABLE
11579: LD_INT 0
11581: PPUSH
11582: PPUSH
11583: PPUSH
// begin ruAI = 0 ;
11584: LD_ADDR_EXP 41
11588: PUSH
11589: LD_INT 0
11591: ST_TO_ADDR
// vehs = FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11592: LD_ADDR_VAR 0 3
11596: PUSH
11597: LD_INT 10
11599: PPUSH
11600: LD_INT 22
11602: PUSH
11603: LD_INT 3
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: PUSH
11610: LD_INT 21
11612: PUSH
11613: LD_INT 2
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: PUSH
11620: LD_INT 58
11622: PUSH
11623: EMPTY
11624: LIST
11625: PUSH
11626: EMPTY
11627: LIST
11628: LIST
11629: LIST
11630: PPUSH
11631: CALL_OW 70
11635: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
11636: LD_EXP 34
11640: PPUSH
11641: CALL_OW 122
// wait ( 0 0$1 ) ;
11645: LD_INT 35
11647: PPUSH
11648: CALL_OW 67
// DialogueOn ;
11652: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
11656: LD_EXP 1
11660: PPUSH
11661: LD_STRING D6-JMM-1
11663: PPUSH
11664: CALL_OW 88
// DialogueOff ;
11668: CALL_OW 7
// if vehs > 0 then
11672: LD_VAR 0 3
11676: PUSH
11677: LD_INT 0
11679: GREATER
11680: IFFALSE 11750
// for i := 1 to RuScientists do
11682: LD_ADDR_VAR 0 1
11686: PUSH
11687: DOUBLE
11688: LD_INT 1
11690: DEC
11691: ST_TO_ADDR
11692: LD_EXP 34
11696: PUSH
11697: FOR_TO
11698: IFFALSE 11746
// ComEnterUnit ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , vehs [ i ] ) else
11700: LD_EXP 34
11704: PUSH
11705: LD_VAR 0 1
11709: ARRAY
11710: PPUSH
11711: LD_INT 3
11713: PUSH
11714: LD_INT 60
11716: PUSH
11717: EMPTY
11718: LIST
11719: PUSH
11720: EMPTY
11721: LIST
11722: LIST
11723: PPUSH
11724: CALL_OW 72
11728: PPUSH
11729: LD_VAR 0 3
11733: PUSH
11734: LD_VAR 0 1
11738: ARRAY
11739: PPUSH
11740: CALL_OW 120
11744: GO 11697
11746: POP
11747: POP
11748: GO 11805
// ComMoveToArea ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
11750: LD_EXP 34
11754: PUSH
11755: LD_VAR 0 1
11759: ARRAY
11760: PPUSH
11761: LD_INT 3
11763: PUSH
11764: LD_INT 60
11766: PUSH
11767: EMPTY
11768: LIST
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PPUSH
11774: CALL_OW 72
11778: PPUSH
11779: LD_INT 13
11781: PUSH
11782: LD_INT 14
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: PUSH
11789: LD_INT 1
11791: PPUSH
11792: LD_INT 2
11794: PPUSH
11795: CALL_OW 12
11799: ARRAY
11800: PPUSH
11801: CALL_OW 113
// end ;
11805: PPOPN 3
11807: END
// every 0 0$0.3 trigger ruAI = 0 do var i , unit , veh , tmp ;
11808: LD_EXP 41
11812: PUSH
11813: LD_INT 0
11815: EQUAL
11816: IFFALSE 12188
11818: GO 11820
11820: DISABLE
11821: LD_INT 0
11823: PPUSH
11824: PPUSH
11825: PPUSH
11826: PPUSH
// begin enable ;
11827: ENABLE
// if UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) or FilterAllUnits ( [ [ f_control , control_manual ] , [ f_nation , 3 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ] ) then
11828: LD_EXP 34
11832: PPUSH
11833: LD_INT 2
11835: PUSH
11836: LD_INT 95
11838: PUSH
11839: LD_INT 13
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: PUSH
11846: LD_INT 95
11848: PUSH
11849: LD_INT 14
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: PUSH
11856: EMPTY
11857: LIST
11858: LIST
11859: LIST
11860: PPUSH
11861: CALL_OW 72
11865: PUSH
11866: LD_INT 33
11868: PUSH
11869: LD_INT 1
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PUSH
11876: LD_INT 23
11878: PUSH
11879: LD_INT 3
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: PUSH
11886: LD_INT 2
11888: PUSH
11889: LD_INT 95
11891: PUSH
11892: LD_INT 13
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PUSH
11899: LD_INT 95
11901: PUSH
11902: LD_INT 14
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: LIST
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: LIST
11918: PPUSH
11919: CALL_OW 69
11923: OR
11924: IFFALSE 12113
// begin unit := UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) [ 1 ] ;
11926: LD_ADDR_VAR 0 2
11930: PUSH
11931: LD_EXP 34
11935: PPUSH
11936: LD_INT 2
11938: PUSH
11939: LD_INT 95
11941: PUSH
11942: LD_INT 13
11944: PUSH
11945: EMPTY
11946: LIST
11947: LIST
11948: PUSH
11949: LD_INT 95
11951: PUSH
11952: LD_INT 14
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: LIST
11963: PPUSH
11964: CALL_OW 72
11968: PUSH
11969: LD_INT 1
11971: ARRAY
11972: ST_TO_ADDR
// if not unit then
11973: LD_VAR 0 2
11977: NOT
11978: IFFALSE 12113
// begin tmp := FilterAllUnits ( [ [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] , [ f_control , control_manual ] , [ f_nation , 3 ] ] ) ;
11980: LD_ADDR_VAR 0 4
11984: PUSH
11985: LD_INT 2
11987: PUSH
11988: LD_INT 95
11990: PUSH
11991: LD_INT 13
11993: PUSH
11994: EMPTY
11995: LIST
11996: LIST
11997: PUSH
11998: LD_INT 95
12000: PUSH
12001: LD_INT 14
12003: PUSH
12004: EMPTY
12005: LIST
12006: LIST
12007: PUSH
12008: EMPTY
12009: LIST
12010: LIST
12011: LIST
12012: PUSH
12013: LD_INT 33
12015: PUSH
12016: LD_INT 1
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: PUSH
12023: LD_INT 23
12025: PUSH
12026: LD_INT 3
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: PUSH
12033: EMPTY
12034: LIST
12035: LIST
12036: LIST
12037: PPUSH
12038: CALL_OW 69
12042: ST_TO_ADDR
// if not tmp then
12043: LD_VAR 0 4
12047: NOT
12048: IFFALSE 12052
// exit ;
12050: GO 12188
// for i in tmp do
12052: LD_ADDR_VAR 0 1
12056: PUSH
12057: LD_VAR 0 4
12061: PUSH
12062: FOR_IN
12063: IFFALSE 12111
// if IsDrivenBy ( i ) in RuScientists then
12065: LD_VAR 0 1
12069: PPUSH
12070: CALL_OW 311
12074: PUSH
12075: LD_EXP 34
12079: IN
12080: IFFALSE 12109
// begin unit := IsDrivenBy ( i ) ;
12082: LD_ADDR_VAR 0 2
12086: PUSH
12087: LD_VAR 0 1
12091: PPUSH
12092: CALL_OW 311
12096: ST_TO_ADDR
// veh := i ;
12097: LD_ADDR_VAR 0 3
12101: PUSH
12102: LD_VAR 0 1
12106: ST_TO_ADDR
// break ;
12107: GO 12111
// end ;
12109: GO 12062
12111: POP
12112: POP
// end ; end ; if not unit then
12113: LD_VAR 0 2
12117: NOT
12118: IFFALSE 12122
// exit ;
12120: GO 12188
// RuScientists = RuScientists diff unit ;
12122: LD_ADDR_EXP 34
12126: PUSH
12127: LD_EXP 34
12131: PUSH
12132: LD_VAR 0 2
12136: DIFF
12137: ST_TO_ADDR
// RemoveUnit ( unit ) ;
12138: LD_VAR 0 2
12142: PPUSH
12143: CALL_OW 64
// if veh then
12147: LD_VAR 0 3
12151: IFFALSE 12188
// begin if GetWeapon ( veh ) = 49 then
12153: LD_VAR 0 3
12157: PPUSH
12158: CALL_OW 264
12162: PUSH
12163: LD_INT 49
12165: EQUAL
12166: IFFALSE 12179
// KillUnit ( veh ) else
12168: LD_VAR 0 3
12172: PPUSH
12173: CALL_OW 66
12177: GO 12188
// RemoveUnit ( veh ) ;
12179: LD_VAR 0 3
12183: PPUSH
12184: CALL_OW 64
// end ; end ; end_of_file
12188: PPOPN 4
12190: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
12191: LD_INT 0
12193: PPUSH
12194: PPUSH
// if exist_mode then
12195: LD_VAR 0 2
12199: IFFALSE 12218
// unit := CreateCharacter ( ident ) else
12201: LD_ADDR_VAR 0 4
12205: PUSH
12206: LD_VAR 0 1
12210: PPUSH
12211: CALL_OW 34
12215: ST_TO_ADDR
12216: GO 12233
// unit := NewCharacter ( ident ) ;
12218: LD_ADDR_VAR 0 4
12222: PUSH
12223: LD_VAR 0 1
12227: PPUSH
12228: CALL_OW 25
12232: ST_TO_ADDR
// result := unit ;
12233: LD_ADDR_VAR 0 3
12237: PUSH
12238: LD_VAR 0 4
12242: ST_TO_ADDR
// end ;
12243: LD_VAR 0 3
12247: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12248: LD_INT 0
12250: PPUSH
12251: PPUSH
// for i in charactersList do
12252: LD_ADDR_VAR 0 4
12256: PUSH
12257: LD_VAR 0 1
12261: PUSH
12262: FOR_IN
12263: IFFALSE 12281
// SaveCharacters ( i , ident ) ;
12265: LD_VAR 0 4
12269: PPUSH
12270: LD_VAR 0 2
12274: PPUSH
12275: CALL_OW 38
12279: GO 12262
12281: POP
12282: POP
// end ;
12283: LD_VAR 0 3
12287: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
12288: LD_INT 0
12290: PPUSH
12291: PPUSH
12292: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12293: LD_ADDR_VAR 0 1
12297: PUSH
12298: LD_VAR 0 1
12302: PUSH
12303: LD_EXP 1
12307: PUSH
12308: LD_EXP 7
12312: PUSH
12313: LD_EXP 3
12317: PUSH
12318: LD_EXP 4
12322: PUSH
12323: LD_EXP 5
12327: PUSH
12328: LD_EXP 2
12332: PUSH
12333: LD_EXP 12
12337: PUSH
12338: LD_EXP 13
12342: PUSH
12343: LD_EXP 9
12347: PUSH
12348: LD_EXP 11
12352: PUSH
12353: LD_EXP 6
12357: PUSH
12358: LD_EXP 8
12362: PUSH
12363: LD_EXP 10
12367: PUSH
12368: LD_EXP 22
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: DIFF
12389: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
12390: LD_ADDR_VAR 0 6
12394: PUSH
12395: LD_VAR 0 1
12399: PUSH
12400: LD_INT 1
12402: PPUSH
12403: LD_VAR 0 1
12407: PPUSH
12408: CALL_OW 12
12412: ARRAY
12413: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
12414: LD_VAR 0 6
12418: PPUSH
12419: CALL_OW 258
12423: PUSH
12424: LD_INT 1
12426: EQUAL
12427: IFFALSE 12445
// Say ( speaker , dialogMID ) else
12429: LD_VAR 0 6
12433: PPUSH
12434: LD_VAR 0 2
12438: PPUSH
12439: CALL_OW 88
12443: GO 12459
// Say ( speaker , dialogFID ) ;
12445: LD_VAR 0 6
12449: PPUSH
12450: LD_VAR 0 3
12454: PPUSH
12455: CALL_OW 88
// result := speaker ;
12459: LD_ADDR_VAR 0 4
12463: PUSH
12464: LD_VAR 0 6
12468: ST_TO_ADDR
// end ;
12469: LD_VAR 0 4
12473: RET
// export function PrepareDifficulty ; var tmp ; begin
12474: LD_INT 0
12476: PPUSH
12477: PPUSH
// if Difficulty = 1 then
12478: LD_OWVAR 67
12482: PUSH
12483: LD_INT 1
12485: EQUAL
12486: IFFALSE 12504
// begin RuSolMinLevel = 8 ;
12488: LD_ADDR_EXP 36
12492: PUSH
12493: LD_INT 8
12495: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12496: LD_ADDR_EXP 37
12500: PUSH
12501: LD_INT 10
12503: ST_TO_ADDR
// end ; if Difficulty = 2 then
12504: LD_OWVAR 67
12508: PUSH
12509: LD_INT 2
12511: EQUAL
12512: IFFALSE 12606
// begin RuSolMinLevel = 9 ;
12514: LD_ADDR_EXP 36
12518: PUSH
12519: LD_INT 9
12521: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12522: LD_ADDR_EXP 37
12526: PUSH
12527: LD_INT 10
12529: ST_TO_ADDR
// uc_nation = 3 ;
12530: LD_ADDR_OWVAR 21
12534: PUSH
12535: LD_INT 3
12537: ST_TO_ADDR
// uc_side = 3 ;
12538: LD_ADDR_OWVAR 20
12542: PUSH
12543: LD_INT 3
12545: ST_TO_ADDR
// bc_level = 10 ;
12546: LD_ADDR_OWVAR 43
12550: PUSH
12551: LD_INT 10
12553: ST_TO_ADDR
// bc_type = b_turret ;
12554: LD_ADDR_OWVAR 42
12558: PUSH
12559: LD_INT 33
12561: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12562: LD_ADDR_VAR 0 2
12566: PUSH
12567: LD_INT 86
12569: PPUSH
12570: LD_INT 34
12572: PPUSH
12573: LD_INT 2
12575: PPUSH
12576: CALL_OW 47
12580: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12581: LD_VAR 0 2
12585: PPUSH
12586: LD_INT 49
12588: PPUSH
12589: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12593: LD_INT 64
12595: PPUSH
12596: LD_INT 3
12598: PPUSH
12599: LD_INT 1
12601: PPUSH
12602: CALL_OW 322
// end ; if Difficulty = 3 then
12606: LD_OWVAR 67
12610: PUSH
12611: LD_INT 3
12613: EQUAL
12614: IFFALSE 12752
// begin RuSolMinLevel = 10 ;
12616: LD_ADDR_EXP 36
12620: PUSH
12621: LD_INT 10
12623: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12624: LD_ADDR_EXP 37
12628: PUSH
12629: LD_INT 10
12631: ST_TO_ADDR
// uc_nation = 3 ;
12632: LD_ADDR_OWVAR 21
12636: PUSH
12637: LD_INT 3
12639: ST_TO_ADDR
// uc_side = 3 ;
12640: LD_ADDR_OWVAR 20
12644: PUSH
12645: LD_INT 3
12647: ST_TO_ADDR
// bc_level = 10 ;
12648: LD_ADDR_OWVAR 43
12652: PUSH
12653: LD_INT 10
12655: ST_TO_ADDR
// bc_type = b_turret ;
12656: LD_ADDR_OWVAR 42
12660: PUSH
12661: LD_INT 33
12663: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12664: LD_ADDR_VAR 0 2
12668: PUSH
12669: LD_INT 86
12671: PPUSH
12672: LD_INT 34
12674: PPUSH
12675: LD_INT 2
12677: PPUSH
12678: CALL_OW 47
12682: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12683: LD_VAR 0 2
12687: PPUSH
12688: LD_INT 49
12690: PPUSH
12691: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
12695: LD_ADDR_VAR 0 2
12699: PUSH
12700: LD_INT 93
12702: PPUSH
12703: LD_INT 31
12705: PPUSH
12706: LD_INT 2
12708: PPUSH
12709: CALL_OW 47
12713: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12714: LD_VAR 0 2
12718: PPUSH
12719: LD_INT 49
12721: PPUSH
12722: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12726: LD_INT 64
12728: PPUSH
12729: LD_INT 3
12731: PPUSH
12732: LD_INT 1
12734: PPUSH
12735: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
12739: LD_INT 65
12741: PPUSH
12742: LD_INT 3
12744: PPUSH
12745: LD_INT 1
12747: PPUSH
12748: CALL_OW 322
// end ; end ;
12752: LD_VAR 0 1
12756: RET
// export function ShowQuery1 ; begin
12757: LD_INT 0
12759: PPUSH
// case query ( Q1 ) of 1 :
12760: LD_STRING Q1
12762: PPUSH
12763: CALL_OW 97
12767: PUSH
12768: LD_INT 1
12770: DOUBLE
12771: EQUAL
12772: IFTRUE 12776
12774: GO 12787
12776: POP
// result = 1 ; 2 :
12777: LD_ADDR_VAR 0 1
12781: PUSH
12782: LD_INT 1
12784: ST_TO_ADDR
12785: GO 12826
12787: LD_INT 2
12789: DOUBLE
12790: EQUAL
12791: IFTRUE 12795
12793: GO 12806
12795: POP
// result = 2 ; 3 :
12796: LD_ADDR_VAR 0 1
12800: PUSH
12801: LD_INT 2
12803: ST_TO_ADDR
12804: GO 12826
12806: LD_INT 3
12808: DOUBLE
12809: EQUAL
12810: IFTRUE 12814
12812: GO 12825
12814: POP
// result = 3 ; end ;
12815: LD_ADDR_VAR 0 1
12819: PUSH
12820: LD_INT 3
12822: ST_TO_ADDR
12823: GO 12826
12825: POP
// end ;
12826: LD_VAR 0 1
12830: RET
// export function ShowQuery2 ; begin
12831: LD_INT 0
12833: PPUSH
// case query ( Q1a ) of 1 :
12834: LD_STRING Q1a
12836: PPUSH
12837: CALL_OW 97
12841: PUSH
12842: LD_INT 1
12844: DOUBLE
12845: EQUAL
12846: IFTRUE 12850
12848: GO 12861
12850: POP
// result = 1 ; 2 :
12851: LD_ADDR_VAR 0 1
12855: PUSH
12856: LD_INT 1
12858: ST_TO_ADDR
12859: GO 12900
12861: LD_INT 2
12863: DOUBLE
12864: EQUAL
12865: IFTRUE 12869
12867: GO 12880
12869: POP
// result = 2 ; 3 :
12870: LD_ADDR_VAR 0 1
12874: PUSH
12875: LD_INT 2
12877: ST_TO_ADDR
12878: GO 12900
12880: LD_INT 3
12882: DOUBLE
12883: EQUAL
12884: IFTRUE 12888
12886: GO 12899
12888: POP
// result = 3 ; end ;
12889: LD_ADDR_VAR 0 1
12893: PUSH
12894: LD_INT 3
12896: ST_TO_ADDR
12897: GO 12900
12899: POP
// end ;
12900: LD_VAR 0 1
12904: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
12905: LD_INT 0
12907: PPUSH
12908: PPUSH
12909: PPUSH
12910: PPUSH
12911: PPUSH
// for i = 1 to count do
12912: LD_ADDR_VAR 0 8
12916: PUSH
12917: DOUBLE
12918: LD_INT 1
12920: DEC
12921: ST_TO_ADDR
12922: LD_VAR 0 6
12926: PUSH
12927: FOR_TO
12928: IFFALSE 13009
// begin uc_side = side ;
12930: LD_ADDR_OWVAR 20
12934: PUSH
12935: LD_VAR 0 1
12939: ST_TO_ADDR
// uc_nation = nation ;
12940: LD_ADDR_OWVAR 21
12944: PUSH
12945: LD_VAR 0 2
12949: ST_TO_ADDR
// hc_gallery =  ;
12950: LD_ADDR_OWVAR 33
12954: PUSH
12955: LD_STRING 
12957: ST_TO_ADDR
// hc_name =  ;
12958: LD_ADDR_OWVAR 26
12962: PUSH
12963: LD_STRING 
12965: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
12966: LD_INT 0
12968: PPUSH
12969: LD_VAR 0 5
12973: PPUSH
12974: LD_VAR 0 4
12978: PPUSH
12979: CALL_OW 380
// un = CreateHuman ;
12983: LD_ADDR_VAR 0 10
12987: PUSH
12988: CALL_OW 44
12992: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
12993: LD_VAR 0 10
12997: PPUSH
12998: LD_VAR 0 3
13002: PPUSH
13003: CALL_OW 52
// end ;
13007: GO 12927
13009: POP
13010: POP
// end ;
13011: LD_VAR 0 7
13015: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
13016: LD_INT 0
13018: PPUSH
13019: PPUSH
13020: PPUSH
13021: PPUSH
13022: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
13023: LD_ADDR_VAR 0 8
13027: PUSH
13028: LD_INT 48
13030: PUSH
13031: LD_INT 49
13033: PUSH
13034: LD_INT 50
13036: PUSH
13037: LD_INT 20
13039: PUSH
13040: LD_INT 1
13042: PUSH
13043: LD_INT 51
13045: PUSH
13046: LD_INT 52
13048: PUSH
13049: LD_INT 69
13051: PUSH
13052: LD_INT 39
13054: PUSH
13055: LD_INT 34
13057: PUSH
13058: LD_INT 40
13060: PUSH
13061: LD_INT 53
13063: PUSH
13064: LD_INT 71
13066: PUSH
13067: LD_INT 57
13069: PUSH
13070: LD_INT 58
13072: PUSH
13073: LD_INT 44
13075: PUSH
13076: LD_INT 32
13078: PUSH
13079: LD_INT 27
13081: PUSH
13082: LD_INT 23
13084: PUSH
13085: LD_INT 33
13087: PUSH
13088: LD_INT 59
13090: PUSH
13091: LD_INT 54
13093: PUSH
13094: LD_INT 55
13096: PUSH
13097: LD_INT 56
13099: PUSH
13100: LD_INT 63
13102: PUSH
13103: LD_INT 64
13105: PUSH
13106: LD_INT 65
13108: PUSH
13109: LD_INT 30
13111: PUSH
13112: LD_INT 31
13114: PUSH
13115: LD_INT 21
13117: PUSH
13118: LD_INT 22
13120: PUSH
13121: LD_INT 25
13123: PUSH
13124: EMPTY
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: ST_TO_ADDR
// for i = 1 to ru_tech_list do
13158: LD_ADDR_VAR 0 5
13162: PUSH
13163: DOUBLE
13164: LD_INT 1
13166: DEC
13167: ST_TO_ADDR
13168: LD_VAR 0 8
13172: PUSH
13173: FOR_TO
13174: IFFALSE 13250
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
13176: LD_VAR 0 8
13180: PUSH
13181: LD_VAR 0 5
13185: ARRAY
13186: PPUSH
13187: LD_VAR 0 1
13191: PPUSH
13192: CALL_OW 321
13196: PUSH
13197: LD_INT 1
13199: EQUAL
13200: PUSH
13201: LD_VAR 0 8
13205: PUSH
13206: LD_VAR 0 5
13210: ARRAY
13211: PPUSH
13212: LD_VAR 0 3
13216: PPUSH
13217: CALL_OW 482
13221: PUSH
13222: LD_INT 1
13224: EQUAL
13225: AND
13226: IFFALSE 13248
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
13228: LD_VAR 0 2
13232: PPUSH
13233: LD_VAR 0 8
13237: PUSH
13238: LD_VAR 0 5
13242: ARRAY
13243: PPUSH
13244: CALL_OW 184
13248: GO 13173
13250: POP
13251: POP
// end ;
13252: LD_VAR 0 4
13256: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
13257: LD_INT 0
13259: PPUSH
13260: PPUSH
13261: PPUSH
13262: PPUSH
13263: PPUSH
13264: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
13265: LD_ADDR_VAR 0 8
13269: PUSH
13270: LD_VAR 0 2
13274: PPUSH
13275: CALL_OW 313
13279: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13280: LD_ADDR_VAR 0 9
13284: PUSH
13285: LD_VAR 0 3
13289: PPUSH
13290: LD_INT 22
13292: PUSH
13293: LD_VAR 0 1
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: PUSH
13302: LD_INT 25
13304: PUSH
13305: LD_INT 2
13307: PUSH
13308: EMPTY
13309: LIST
13310: LIST
13311: PUSH
13312: LD_INT 24
13314: PUSH
13315: LD_INT 750
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: PUSH
13322: LD_INT 3
13324: PUSH
13325: LD_INT 54
13327: PUSH
13328: EMPTY
13329: LIST
13330: PUSH
13331: EMPTY
13332: LIST
13333: LIST
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: PPUSH
13341: CALL_OW 70
13345: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13346: LD_ADDR_VAR 0 6
13350: PUSH
13351: LD_VAR 0 3
13355: PPUSH
13356: LD_INT 22
13358: PUSH
13359: LD_VAR 0 1
13363: PUSH
13364: EMPTY
13365: LIST
13366: LIST
13367: PUSH
13368: LD_INT 21
13370: PUSH
13371: LD_INT 3
13373: PUSH
13374: EMPTY
13375: LIST
13376: LIST
13377: PUSH
13378: LD_INT 3
13380: PUSH
13381: LD_INT 24
13383: PUSH
13384: LD_INT 1000
13386: PUSH
13387: EMPTY
13388: LIST
13389: LIST
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: LIST
13399: PUSH
13400: EMPTY
13401: LIST
13402: PPUSH
13403: CALL_OW 70
13407: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13408: LD_VAR 0 6
13412: NOT
13413: PUSH
13414: LD_INT 22
13416: PUSH
13417: LD_VAR 0 1
13421: PUSH
13422: EMPTY
13423: LIST
13424: LIST
13425: PUSH
13426: LD_INT 25
13428: PUSH
13429: LD_INT 2
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: PUSH
13436: LD_INT 24
13438: PUSH
13439: LD_INT 250
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: LIST
13450: PPUSH
13451: CALL_OW 69
13455: NOT
13456: AND
13457: IFFALSE 13461
// exit ;
13459: GO 13643
// if buildings_list > 0 and engineerOkInside then
13461: LD_VAR 0 6
13465: PUSH
13466: LD_INT 0
13468: GREATER
13469: PUSH
13470: LD_VAR 0 8
13474: AND
13475: IFFALSE 13486
// ComExitBuilding ( engineerOkInside ) ;
13477: LD_VAR 0 8
13481: PPUSH
13482: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
13486: LD_VAR 0 6
13490: PUSH
13491: LD_INT 0
13493: GREATER
13494: PUSH
13495: LD_VAR 0 9
13499: PUSH
13500: LD_INT 0
13502: GREATER
13503: AND
13504: IFFALSE 13524
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
13506: LD_VAR 0 9
13510: PPUSH
13511: LD_VAR 0 6
13515: PUSH
13516: LD_INT 1
13518: ARRAY
13519: PPUSH
13520: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
13524: LD_VAR 0 6
13528: PUSH
13529: LD_INT 0
13531: EQUAL
13532: PUSH
13533: LD_VAR 0 4
13537: PUSH
13538: LD_INT 0
13540: EQUAL
13541: AND
13542: PUSH
13543: LD_VAR 0 9
13547: PUSH
13548: LD_INT 0
13550: GREATER
13551: AND
13552: IFFALSE 13568
// ComEnterUnit ( engineerOkOutside , building ) ;
13554: LD_VAR 0 9
13558: PPUSH
13559: LD_VAR 0 2
13563: PPUSH
13564: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
13568: LD_VAR 0 9
13572: PUSH
13573: LD_INT 0
13575: GREATER
13576: PUSH
13577: LD_VAR 0 6
13581: PUSH
13582: LD_INT 0
13584: EQUAL
13585: AND
13586: PUSH
13587: LD_VAR 0 4
13591: PUSH
13592: LD_INT 0
13594: GREATER
13595: AND
13596: IFFALSE 13643
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13598: LD_VAR 0 9
13602: PPUSH
13603: LD_VAR 0 4
13607: PUSH
13608: LD_INT 1
13610: ARRAY
13611: PPUSH
13612: LD_VAR 0 4
13616: PUSH
13617: LD_INT 2
13619: ARRAY
13620: PPUSH
13621: LD_VAR 0 4
13625: PUSH
13626: LD_INT 3
13628: ARRAY
13629: PPUSH
13630: LD_VAR 0 4
13634: PUSH
13635: LD_INT 4
13637: ARRAY
13638: PPUSH
13639: CALL_OW 145
// end ;
13643: LD_VAR 0 5
13647: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13648: LD_INT 0
13650: PPUSH
13651: PPUSH
13652: PPUSH
13653: PPUSH
13654: PPUSH
13655: PPUSH
13656: PPUSH
13657: PPUSH
13658: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13659: LD_ADDR_VAR 0 6
13663: PUSH
13664: LD_INT 22
13666: PUSH
13667: LD_VAR 0 1
13671: PUSH
13672: EMPTY
13673: LIST
13674: LIST
13675: PUSH
13676: LD_INT 25
13678: PUSH
13679: LD_INT 4
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: PUSH
13686: LD_INT 24
13688: PUSH
13689: LD_INT 251
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: LIST
13700: PPUSH
13701: CALL_OW 69
13705: PUSH
13706: LD_EXP 34
13710: PUSH
13711: EMPTY
13712: LIST
13713: DIFF
13714: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13715: LD_ADDR_VAR 0 7
13719: PUSH
13720: LD_VAR 0 3
13724: PPUSH
13725: LD_INT 22
13727: PUSH
13728: LD_VAR 0 1
13732: PUSH
13733: EMPTY
13734: LIST
13735: LIST
13736: PUSH
13737: LD_INT 25
13739: PUSH
13740: LD_INT 4
13742: PUSH
13743: EMPTY
13744: LIST
13745: LIST
13746: PUSH
13747: LD_INT 50
13749: PUSH
13750: EMPTY
13751: LIST
13752: PUSH
13753: EMPTY
13754: LIST
13755: LIST
13756: LIST
13757: PPUSH
13758: CALL_OW 70
13762: PUSH
13763: LD_EXP 34
13767: PUSH
13768: EMPTY
13769: LIST
13770: DIFF
13771: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13772: LD_ADDR_VAR 0 10
13776: PUSH
13777: LD_VAR 0 3
13781: PPUSH
13782: LD_INT 22
13784: PUSH
13785: LD_VAR 0 1
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: PUSH
13794: LD_INT 21
13796: PUSH
13797: LD_INT 1
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: PUSH
13804: LD_INT 3
13806: PUSH
13807: LD_INT 24
13809: PUSH
13810: LD_INT 750
13812: PUSH
13813: EMPTY
13814: LIST
13815: LIST
13816: PUSH
13817: EMPTY
13818: LIST
13819: LIST
13820: PUSH
13821: EMPTY
13822: LIST
13823: LIST
13824: LIST
13825: PPUSH
13826: CALL_OW 70
13830: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13831: LD_ADDR_VAR 0 11
13835: PUSH
13836: LD_VAR 0 2
13840: PPUSH
13841: LD_INT 22
13843: PUSH
13844: LD_VAR 0 1
13848: PUSH
13849: EMPTY
13850: LIST
13851: LIST
13852: PUSH
13853: LD_INT 21
13855: PUSH
13856: LD_INT 1
13858: PUSH
13859: EMPTY
13860: LIST
13861: LIST
13862: PUSH
13863: LD_INT 3
13865: PUSH
13866: LD_INT 24
13868: PUSH
13869: LD_INT 1000
13871: PUSH
13872: EMPTY
13873: LIST
13874: LIST
13875: PUSH
13876: EMPTY
13877: LIST
13878: LIST
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: LIST
13884: PPUSH
13885: CALL_OW 70
13889: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
13890: LD_VAR 0 10
13894: PUSH
13895: LD_INT 0
13897: GREATER
13898: PUSH
13899: LD_VAR 0 6
13903: PUSH
13904: LD_INT 0
13906: GREATER
13907: AND
13908: IFFALSE 13924
// ComMoveToArea ( damageUnits , healArea ) ;
13910: LD_VAR 0 10
13914: PPUSH
13915: LD_VAR 0 2
13919: PPUSH
13920: CALL_OW 113
// if unitsToHeal > 0 and sci_listOutside > 0 then
13924: LD_VAR 0 11
13928: PUSH
13929: LD_INT 0
13931: GREATER
13932: PUSH
13933: LD_VAR 0 7
13937: PUSH
13938: LD_INT 0
13940: GREATER
13941: AND
13942: IFFALSE 13962
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
13944: LD_VAR 0 7
13948: PPUSH
13949: LD_VAR 0 11
13953: PUSH
13954: LD_INT 1
13956: ARRAY
13957: PPUSH
13958: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
13962: LD_VAR 0 10
13966: PUSH
13967: LD_INT 0
13969: EQUAL
13970: PUSH
13971: LD_VAR 0 11
13975: PUSH
13976: LD_INT 0
13978: EQUAL
13979: AND
13980: PUSH
13981: LD_VAR 0 7
13985: PUSH
13986: LD_INT 0
13988: GREATER
13989: AND
13990: IFFALSE 14095
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
13992: LD_ADDR_VAR 0 12
13996: PUSH
13997: LD_INT 22
13999: PUSH
14000: LD_VAR 0 1
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: PUSH
14009: LD_INT 21
14011: PUSH
14012: LD_INT 3
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: PUSH
14019: LD_INT 30
14021: PUSH
14022: LD_INT 8
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: LIST
14033: PPUSH
14034: CALL_OW 69
14038: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
14039: LD_ADDR_VAR 0 13
14043: PUSH
14044: LD_INT 1
14046: PPUSH
14047: LD_VAR 0 12
14051: PPUSH
14052: CALL_OW 12
14056: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
14057: LD_VAR 0 7
14061: PPUSH
14062: LD_INT 3
14064: PUSH
14065: LD_INT 60
14067: PUSH
14068: EMPTY
14069: LIST
14070: PUSH
14071: EMPTY
14072: LIST
14073: LIST
14074: PPUSH
14075: CALL_OW 72
14079: PPUSH
14080: LD_VAR 0 12
14084: PUSH
14085: LD_VAR 0 13
14089: ARRAY
14090: PPUSH
14091: CALL_OW 120
// end ; if FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) > 0 and IsOk ( ru_fact ) and GetSide ( ru_fact ) = 3 then
14095: LD_VAR 0 3
14099: PPUSH
14100: LD_INT 22
14102: PUSH
14103: LD_VAR 0 1
14107: PUSH
14108: EMPTY
14109: LIST
14110: LIST
14111: PUSH
14112: LD_INT 25
14114: PUSH
14115: LD_INT 3
14117: PUSH
14118: EMPTY
14119: LIST
14120: LIST
14121: PUSH
14122: LD_INT 24
14124: PUSH
14125: LD_INT 751
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: LIST
14136: PPUSH
14137: CALL_OW 70
14141: PUSH
14142: LD_INT 0
14144: GREATER
14145: PUSH
14146: LD_INT 21
14148: PPUSH
14149: CALL_OW 302
14153: AND
14154: PUSH
14155: LD_INT 21
14157: PPUSH
14158: CALL_OW 255
14162: PUSH
14163: LD_INT 3
14165: EQUAL
14166: AND
14167: IFFALSE 14223
// ComEnterUnit ( FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) , ru_fact ) ;
14169: LD_VAR 0 3
14173: PPUSH
14174: LD_INT 22
14176: PUSH
14177: LD_VAR 0 1
14181: PUSH
14182: EMPTY
14183: LIST
14184: LIST
14185: PUSH
14186: LD_INT 25
14188: PUSH
14189: LD_INT 3
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: PUSH
14196: LD_INT 24
14198: PUSH
14199: LD_INT 751
14201: PUSH
14202: EMPTY
14203: LIST
14204: LIST
14205: PUSH
14206: EMPTY
14207: LIST
14208: LIST
14209: LIST
14210: PPUSH
14211: CALL_OW 70
14215: PPUSH
14216: LD_INT 21
14218: PPUSH
14219: CALL_OW 120
// end ;
14223: LD_VAR 0 5
14227: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
14228: LD_INT 0
14230: PPUSH
14231: PPUSH
14232: PPUSH
14233: PPUSH
14234: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
14235: LD_ADDR_VAR 0 6
14239: PUSH
14240: LD_INT 22
14242: PUSH
14243: LD_VAR 0 1
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: PUSH
14252: LD_INT 2
14254: PUSH
14255: LD_INT 30
14257: PUSH
14258: LD_INT 31
14260: PUSH
14261: EMPTY
14262: LIST
14263: LIST
14264: PUSH
14265: LD_INT 30
14267: PUSH
14268: LD_INT 32
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: PUSH
14275: LD_INT 30
14277: PUSH
14278: LD_INT 33
14280: PUSH
14281: EMPTY
14282: LIST
14283: LIST
14284: PUSH
14285: LD_INT 30
14287: PUSH
14288: LD_INT 4
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: PUSH
14295: LD_INT 30
14297: PUSH
14298: LD_INT 5
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: PPUSH
14317: CALL_OW 69
14321: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
14322: LD_ADDR_VAR 0 7
14326: PUSH
14327: LD_INT 22
14329: PUSH
14330: LD_VAR 0 2
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: PUSH
14339: LD_INT 21
14341: PUSH
14342: LD_INT 3
14344: PUSH
14345: EMPTY
14346: LIST
14347: LIST
14348: PUSH
14349: LD_INT 58
14351: PUSH
14352: EMPTY
14353: LIST
14354: PUSH
14355: EMPTY
14356: LIST
14357: LIST
14358: LIST
14359: PPUSH
14360: CALL_OW 69
14364: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
14365: LD_VAR 0 6
14369: PUSH
14370: LD_INT 0
14372: GREATER
14373: PUSH
14374: LD_VAR 0 7
14378: PUSH
14379: LD_INT 0
14381: GREATER
14382: AND
14383: IFFALSE 14453
// begin for i in turretsList do
14385: LD_ADDR_VAR 0 4
14389: PUSH
14390: LD_VAR 0 6
14394: PUSH
14395: FOR_IN
14396: IFFALSE 14451
// begin for j in enemyBuildings do
14398: LD_ADDR_VAR 0 5
14402: PUSH
14403: LD_VAR 0 7
14407: PUSH
14408: FOR_IN
14409: IFFALSE 14447
// begin if GetDistUnits ( i , j ) < 20 then
14411: LD_VAR 0 4
14415: PPUSH
14416: LD_VAR 0 5
14420: PPUSH
14421: CALL_OW 296
14425: PUSH
14426: LD_INT 20
14428: LESS
14429: IFFALSE 14445
// begin ComAttackUnit ( i , j ) ;
14431: LD_VAR 0 4
14435: PPUSH
14436: LD_VAR 0 5
14440: PPUSH
14441: CALL_OW 115
// end ; end ;
14445: GO 14408
14447: POP
14448: POP
// end ;
14449: GO 14395
14451: POP
14452: POP
// end ; end ;
14453: LD_VAR 0 3
14457: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
14458: LD_INT 0
14460: PPUSH
14461: PPUSH
14462: PPUSH
14463: PPUSH
14464: PPUSH
14465: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
14466: LD_ADDR_VAR 0 7
14470: PUSH
14471: LD_VAR 0 2
14475: PPUSH
14476: LD_INT 22
14478: PUSH
14479: LD_VAR 0 1
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: PUSH
14488: LD_INT 21
14490: PUSH
14491: LD_INT 2
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: PUSH
14498: LD_INT 34
14500: PUSH
14501: LD_INT 52
14503: PUSH
14504: EMPTY
14505: LIST
14506: LIST
14507: PUSH
14508: EMPTY
14509: LIST
14510: LIST
14511: LIST
14512: PPUSH
14513: CALL_OW 70
14517: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14518: LD_ADDR_VAR 0 8
14522: PUSH
14523: LD_VAR 0 2
14527: PPUSH
14528: LD_INT 22
14530: PUSH
14531: LD_VAR 0 1
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: PUSH
14540: LD_INT 21
14542: PUSH
14543: LD_INT 3
14545: PUSH
14546: EMPTY
14547: LIST
14548: LIST
14549: PUSH
14550: LD_INT 3
14552: PUSH
14553: LD_INT 24
14555: PUSH
14556: LD_INT 1000
14558: PUSH
14559: EMPTY
14560: LIST
14561: LIST
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: LIST
14571: PUSH
14572: EMPTY
14573: LIST
14574: PPUSH
14575: CALL_OW 70
14579: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
14580: LD_VAR 0 8
14584: PUSH
14585: LD_INT 0
14587: GREATER
14588: PUSH
14589: LD_VAR 0 7
14593: PPUSH
14594: LD_INT 24
14596: PUSH
14597: LD_INT 750
14599: PUSH
14600: EMPTY
14601: LIST
14602: LIST
14603: PPUSH
14604: CALL_OW 72
14608: PUSH
14609: LD_INT 0
14611: GREATER
14612: AND
14613: IFFALSE 14633
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
14615: LD_VAR 0 7
14619: PPUSH
14620: LD_VAR 0 8
14624: PUSH
14625: LD_INT 1
14627: ARRAY
14628: PPUSH
14629: CALL_OW 130
// end ;
14633: LD_VAR 0 3
14637: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14638: LD_INT 0
14640: PPUSH
14641: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14642: LD_INT 22
14644: PUSH
14645: LD_VAR 0 1
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: PUSH
14654: LD_INT 21
14656: PUSH
14657: LD_INT 2
14659: PUSH
14660: EMPTY
14661: LIST
14662: LIST
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: PPUSH
14668: CALL_OW 69
14672: PUSH
14673: LD_INT 18
14675: PPUSH
14676: LD_INT 22
14678: PUSH
14679: LD_VAR 0 1
14683: PUSH
14684: EMPTY
14685: LIST
14686: LIST
14687: PUSH
14688: LD_INT 21
14690: PUSH
14691: LD_INT 2
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: PUSH
14698: EMPTY
14699: LIST
14700: LIST
14701: PPUSH
14702: CALL_OW 70
14706: PUSH
14707: LD_VAR 0 3
14711: LESSEQUAL
14712: DIFF
14713: IFFALSE 14780
// for i = 1 to vehCount do
14715: LD_ADDR_VAR 0 9
14719: PUSH
14720: DOUBLE
14721: LD_INT 1
14723: DEC
14724: ST_TO_ADDR
14725: LD_VAR 0 3
14729: PUSH
14730: FOR_TO
14731: IFFALSE 14778
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14733: LD_VAR 0 2
14737: PPUSH
14738: LD_VAR 0 7
14742: PPUSH
14743: LD_VAR 0 5
14747: PPUSH
14748: LD_VAR 0 6
14752: PPUSH
14753: LD_VAR 0 4
14757: PUSH
14758: LD_INT 1
14760: PPUSH
14761: LD_VAR 0 4
14765: PPUSH
14766: CALL_OW 12
14770: ARRAY
14771: PPUSH
14772: CALL_OW 185
14776: GO 14730
14778: POP
14779: POP
// end ;
14780: LD_VAR 0 8
14784: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
14785: LD_INT 0
14787: PPUSH
14788: PPUSH
14789: PPUSH
14790: PPUSH
14791: PPUSH
14792: PPUSH
// if russianTanks >= [ 3 , 4 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
14793: LD_EXP 39
14797: PUSH
14798: LD_INT 3
14800: PUSH
14801: LD_INT 4
14803: PUSH
14804: LD_INT 4
14806: PUSH
14807: EMPTY
14808: LIST
14809: LIST
14810: LIST
14811: PUSH
14812: LD_OWVAR 67
14816: ARRAY
14817: GREATEREQUAL
14818: PUSH
14819: LD_EXP 40
14823: PUSH
14824: LD_INT 1
14826: PUSH
14827: LD_INT 2
14829: PUSH
14830: LD_INT 2
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: LIST
14837: PUSH
14838: LD_OWVAR 67
14842: ARRAY
14843: GREATEREQUAL
14844: AND
14845: IFFALSE 15134
// begin repeat wait ( 0 0$3 ) ;
14847: LD_INT 105
14849: PPUSH
14850: CALL_OW 67
// for j in russianTanks do
14854: LD_ADDR_VAR 0 4
14858: PUSH
14859: LD_EXP 39
14863: PUSH
14864: FOR_IN
14865: IFFALSE 15122
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
14867: LD_ADDR_VAR 0 6
14871: PUSH
14872: LD_INT 81
14874: PUSH
14875: LD_VAR 0 1
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: PUSH
14884: LD_INT 101
14886: PUSH
14887: LD_INT 1
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: PUSH
14894: EMPTY
14895: LIST
14896: LIST
14897: PPUSH
14898: CALL_OW 69
14902: PPUSH
14903: LD_VAR 0 4
14907: PPUSH
14908: CALL_OW 74
14912: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
14913: LD_ADDR_VAR 0 7
14917: PUSH
14918: LD_INT 81
14920: PUSH
14921: LD_VAR 0 1
14925: PUSH
14926: EMPTY
14927: LIST
14928: LIST
14929: PUSH
14930: LD_INT 101
14932: PUSH
14933: LD_INT 1
14935: PUSH
14936: EMPTY
14937: LIST
14938: LIST
14939: PUSH
14940: LD_INT 2
14942: PUSH
14943: LD_INT 59
14945: PUSH
14946: EMPTY
14947: LIST
14948: PUSH
14949: LD_INT 21
14951: PUSH
14952: LD_INT 1
14954: PUSH
14955: EMPTY
14956: LIST
14957: LIST
14958: PUSH
14959: LD_INT 21
14961: PUSH
14962: LD_INT 2
14964: PUSH
14965: EMPTY
14966: LIST
14967: LIST
14968: PUSH
14969: EMPTY
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: PUSH
14975: EMPTY
14976: LIST
14977: LIST
14978: LIST
14979: PUSH
14980: EMPTY
14981: LIST
14982: PPUSH
14983: CALL_OW 69
14987: PPUSH
14988: LD_VAR 0 4
14992: PPUSH
14993: CALL_OW 74
14997: ST_TO_ADDR
// if UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) then
14998: LD_EXP 40
15002: PPUSH
15003: LD_INT 3
15005: PUSH
15006: LD_INT 60
15008: PUSH
15009: EMPTY
15010: LIST
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: PPUSH
15016: CALL_OW 72
15020: IFFALSE 15054
// ComMoveUnit ( UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) , j ) ;
15022: LD_EXP 40
15026: PPUSH
15027: LD_INT 3
15029: PUSH
15030: LD_INT 60
15032: PUSH
15033: EMPTY
15034: LIST
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: PPUSH
15040: CALL_OW 72
15044: PPUSH
15045: LD_VAR 0 4
15049: PPUSH
15050: CALL_OW 112
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
15054: LD_VAR 0 4
15058: PPUSH
15059: LD_VAR 0 6
15063: PPUSH
15064: CALL_OW 296
15068: PUSH
15069: LD_INT 8
15071: PLUS
15072: PUSH
15073: LD_VAR 0 4
15077: PPUSH
15078: LD_VAR 0 7
15082: PPUSH
15083: CALL_OW 296
15087: LESS
15088: IFFALSE 15106
// ComAttackUnit ( j , target1 ) else
15090: LD_VAR 0 4
15094: PPUSH
15095: LD_VAR 0 6
15099: PPUSH
15100: CALL_OW 115
15104: GO 15120
// ComAttackUnit ( j , target2 ) ;
15106: LD_VAR 0 4
15110: PPUSH
15111: LD_VAR 0 7
15115: PPUSH
15116: CALL_OW 115
// end ;
15120: GO 14864
15122: POP
15123: POP
// until russianTanks = 0 ;
15124: LD_EXP 39
15128: PUSH
15129: LD_INT 0
15131: EQUAL
15132: IFFALSE 14847
// end ; end ;
15134: LD_VAR 0 2
15138: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
15139: LD_INT 0
15141: PPUSH
15142: PPUSH
15143: PPUSH
15144: PPUSH
15145: PPUSH
15146: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
15147: LD_ADDR_VAR 0 6
15151: PUSH
15152: LD_INT 22
15154: PUSH
15155: LD_VAR 0 1
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: PUSH
15164: LD_INT 25
15166: PUSH
15167: LD_INT 9
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: PPUSH
15178: CALL_OW 69
15182: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15183: LD_ADDR_VAR 0 7
15187: PUSH
15188: LD_INT 81
15190: PUSH
15191: LD_VAR 0 1
15195: PUSH
15196: EMPTY
15197: LIST
15198: LIST
15199: PUSH
15200: LD_INT 3
15202: PUSH
15203: LD_INT 21
15205: PUSH
15206: LD_INT 3
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: PUSH
15213: EMPTY
15214: LIST
15215: LIST
15216: PUSH
15217: EMPTY
15218: LIST
15219: LIST
15220: PPUSH
15221: CALL_OW 69
15225: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
15226: LD_ADDR_VAR 0 4
15230: PUSH
15231: LD_INT 1
15233: PPUSH
15234: LD_INT 3
15236: PPUSH
15237: CALL_OW 12
15241: ST_TO_ADDR
// for i = 1 to list do
15242: LD_ADDR_VAR 0 5
15246: PUSH
15247: DOUBLE
15248: LD_INT 1
15250: DEC
15251: ST_TO_ADDR
15252: LD_VAR 0 6
15256: PUSH
15257: FOR_TO
15258: IFFALSE 15460
// for ta in filter do
15260: LD_ADDR_VAR 0 3
15264: PUSH
15265: LD_VAR 0 7
15269: PUSH
15270: FOR_IN
15271: IFFALSE 15456
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
15273: LD_VAR 0 6
15277: PUSH
15278: LD_VAR 0 5
15282: ARRAY
15283: PPUSH
15284: LD_VAR 0 3
15288: PPUSH
15289: CALL_OW 296
15293: PUSH
15294: LD_INT 15
15296: LESSEQUAL
15297: IFFALSE 15454
// begin case c of 1 :
15299: LD_VAR 0 4
15303: PUSH
15304: LD_INT 1
15306: DOUBLE
15307: EQUAL
15308: IFTRUE 15312
15310: GO 15350
15312: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
15313: LD_VAR 0 6
15317: PUSH
15318: LD_VAR 0 5
15322: ARRAY
15323: PPUSH
15324: LD_VAR 0 3
15328: PPUSH
15329: CALL_OW 250
15333: PPUSH
15334: LD_VAR 0 3
15338: PPUSH
15339: CALL_OW 251
15343: PPUSH
15344: CALL_OW 154
15348: GO 15454
15350: LD_INT 2
15352: DOUBLE
15353: EQUAL
15354: IFTRUE 15358
15356: GO 15422
15358: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
15359: LD_VAR 0 6
15363: PUSH
15364: LD_VAR 0 5
15368: ARRAY
15369: PPUSH
15370: LD_VAR 0 3
15374: PPUSH
15375: CALL_OW 250
15379: PUSH
15380: LD_INT 1
15382: NEG
15383: PPUSH
15384: LD_INT 1
15386: PPUSH
15387: CALL_OW 12
15391: PLUS
15392: PPUSH
15393: LD_VAR 0 3
15397: PPUSH
15398: CALL_OW 251
15402: PUSH
15403: LD_INT 1
15405: NEG
15406: PPUSH
15407: LD_INT 1
15409: PPUSH
15410: CALL_OW 12
15414: PLUS
15415: PPUSH
15416: CALL_OW 153
15420: GO 15454
15422: LD_INT 3
15424: DOUBLE
15425: EQUAL
15426: IFTRUE 15430
15428: GO 15453
15430: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15431: LD_VAR 0 6
15435: PUSH
15436: LD_VAR 0 5
15440: ARRAY
15441: PPUSH
15442: LD_VAR 0 3
15446: PPUSH
15447: CALL_OW 115
15451: GO 15454
15453: POP
// end ; end ;
15454: GO 15270
15456: POP
15457: POP
15458: GO 15257
15460: POP
15461: POP
// end ;
15462: LD_VAR 0 2
15466: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
15467: LD_INT 0
15469: PPUSH
15470: PPUSH
15471: PPUSH
15472: PPUSH
// r := 100 ;
15473: LD_ADDR_VAR 0 5
15477: PUSH
15478: LD_INT 100
15480: ST_TO_ADDR
// x := 0 ;
15481: LD_ADDR_VAR 0 6
15485: PUSH
15486: LD_INT 0
15488: ST_TO_ADDR
// while ( x < n ) do
15489: LD_VAR 0 6
15493: PUSH
15494: LD_VAR 0 2
15498: LESS
15499: IFFALSE 15786
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
15501: LD_ADDR_VAR 0 4
15505: PUSH
15506: DOUBLE
15507: LD_INT 1
15509: DEC
15510: ST_TO_ADDR
15511: LD_VAR 0 1
15515: PPUSH
15516: LD_INT 0
15518: PPUSH
15519: CALL_OW 517
15523: PUSH
15524: LD_INT 1
15526: ARRAY
15527: PUSH
15528: FOR_TO
15529: IFFALSE 15782
// begin if r > 50 then
15531: LD_VAR 0 5
15535: PUSH
15536: LD_INT 50
15538: GREATER
15539: IFFALSE 15758
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
15541: LD_VAR 0 1
15545: PPUSH
15546: LD_INT 0
15548: PPUSH
15549: CALL_OW 517
15553: PUSH
15554: LD_INT 1
15556: ARRAY
15557: PUSH
15558: LD_VAR 0 4
15562: ARRAY
15563: PPUSH
15564: LD_VAR 0 1
15568: PPUSH
15569: LD_INT 0
15571: PPUSH
15572: CALL_OW 517
15576: PUSH
15577: LD_INT 2
15579: ARRAY
15580: PUSH
15581: LD_VAR 0 4
15585: ARRAY
15586: PPUSH
15587: CALL_OW 458
15591: NOT
15592: IFFALSE 15742
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
15594: LD_VAR 0 1
15598: PPUSH
15599: LD_INT 0
15601: PPUSH
15602: CALL_OW 517
15606: PUSH
15607: LD_INT 1
15609: ARRAY
15610: PUSH
15611: LD_VAR 0 4
15615: ARRAY
15616: PPUSH
15617: LD_VAR 0 1
15621: PPUSH
15622: LD_INT 0
15624: PPUSH
15625: CALL_OW 517
15629: PUSH
15630: LD_INT 2
15632: ARRAY
15633: PUSH
15634: LD_VAR 0 4
15638: ARRAY
15639: PPUSH
15640: LD_INT 8
15642: PPUSH
15643: LD_INT 0
15645: PPUSH
15646: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
15650: LD_ADDR_EXP 44
15654: PUSH
15655: LD_EXP 44
15659: PPUSH
15660: LD_INT 1
15662: PPUSH
15663: LD_VAR 0 1
15667: PPUSH
15668: LD_INT 0
15670: PPUSH
15671: CALL_OW 517
15675: PUSH
15676: LD_INT 1
15678: ARRAY
15679: PUSH
15680: LD_VAR 0 4
15684: ARRAY
15685: PUSH
15686: LD_VAR 0 1
15690: PPUSH
15691: LD_INT 0
15693: PPUSH
15694: CALL_OW 517
15698: PUSH
15699: LD_INT 2
15701: ARRAY
15702: PUSH
15703: LD_VAR 0 4
15707: ARRAY
15708: PUSH
15709: EMPTY
15710: LIST
15711: LIST
15712: PPUSH
15713: CALL_OW 2
15717: ST_TO_ADDR
// r := 0 ;
15718: LD_ADDR_VAR 0 5
15722: PUSH
15723: LD_INT 0
15725: ST_TO_ADDR
// x := x + 1 ;
15726: LD_ADDR_VAR 0 6
15730: PUSH
15731: LD_VAR 0 6
15735: PUSH
15736: LD_INT 1
15738: PLUS
15739: ST_TO_ADDR
// end else
15740: GO 15756
// r := r + 35 ;
15742: LD_ADDR_VAR 0 5
15746: PUSH
15747: LD_VAR 0 5
15751: PUSH
15752: LD_INT 35
15754: PLUS
15755: ST_TO_ADDR
// end else
15756: GO 15780
// r := r + rand ( 10 , 25 ) ;
15758: LD_ADDR_VAR 0 5
15762: PUSH
15763: LD_VAR 0 5
15767: PUSH
15768: LD_INT 10
15770: PPUSH
15771: LD_INT 25
15773: PPUSH
15774: CALL_OW 12
15778: PLUS
15779: ST_TO_ADDR
// end ;
15780: GO 15528
15782: POP
15783: POP
15784: GO 15489
// end ;
15786: LD_VAR 0 3
15790: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
15791: LD_INT 0
15793: PPUSH
15794: PPUSH
15795: PPUSH
15796: PPUSH
// tmpTab = [ ] ;
15797: LD_ADDR_VAR 0 6
15801: PUSH
15802: EMPTY
15803: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
15804: LD_INT 22
15806: PUSH
15807: LD_VAR 0 1
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: PUSH
15816: LD_INT 30
15818: PUSH
15819: LD_INT 32
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PPUSH
15830: CALL_OW 69
15834: PUSH
15835: LD_INT 0
15837: GREATER
15838: IFFALSE 15921
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
15840: LD_ADDR_VAR 0 4
15844: PUSH
15845: LD_INT 22
15847: PUSH
15848: LD_VAR 0 1
15852: PUSH
15853: EMPTY
15854: LIST
15855: LIST
15856: PUSH
15857: LD_INT 30
15859: PUSH
15860: LD_INT 32
15862: PUSH
15863: EMPTY
15864: LIST
15865: LIST
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: PPUSH
15871: CALL_OW 69
15875: PUSH
15876: FOR_IN
15877: IFFALSE 15919
// begin for j in UnitsInside ( i ) do
15879: LD_ADDR_VAR 0 5
15883: PUSH
15884: LD_VAR 0 4
15888: PPUSH
15889: CALL_OW 313
15893: PUSH
15894: FOR_IN
15895: IFFALSE 15915
// tmpTab = tmpTab ^ j ;
15897: LD_ADDR_VAR 0 6
15901: PUSH
15902: LD_VAR 0 6
15906: PUSH
15907: LD_VAR 0 5
15911: ADD
15912: ST_TO_ADDR
15913: GO 15894
15915: POP
15916: POP
// end ;
15917: GO 15876
15919: POP
15920: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
15921: LD_VAR 0 6
15925: PPUSH
15926: LD_VAR 0 2
15930: PPUSH
15931: CALL_OW 250
15935: PPUSH
15936: LD_VAR 0 2
15940: PPUSH
15941: CALL_OW 251
15945: PPUSH
15946: CALL_OW 114
// end ;
15950: LD_VAR 0 3
15954: RET
// export function PrepareNature ; var i , un ; begin
15955: LD_INT 0
15957: PPUSH
15958: PPUSH
15959: PPUSH
// uc_side := 0 ;
15960: LD_ADDR_OWVAR 20
15964: PUSH
15965: LD_INT 0
15967: ST_TO_ADDR
// uc_nation := 0 ;
15968: LD_ADDR_OWVAR 21
15972: PUSH
15973: LD_INT 0
15975: ST_TO_ADDR
// InitHc ;
15976: CALL_OW 19
// hc_class := class_fish ;
15980: LD_ADDR_OWVAR 28
15984: PUSH
15985: LD_INT 20
15987: ST_TO_ADDR
// for i = 1 to 6 do
15988: LD_ADDR_VAR 0 2
15992: PUSH
15993: DOUBLE
15994: LD_INT 1
15996: DEC
15997: ST_TO_ADDR
15998: LD_INT 6
16000: PUSH
16001: FOR_TO
16002: IFFALSE 16021
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
16004: CALL_OW 44
16008: PPUSH
16009: LD_INT 23
16011: PPUSH
16012: LD_INT 0
16014: PPUSH
16015: CALL_OW 49
16019: GO 16001
16021: POP
16022: POP
// for i = 1 to Difficulty + 2 do
16023: LD_ADDR_VAR 0 2
16027: PUSH
16028: DOUBLE
16029: LD_INT 1
16031: DEC
16032: ST_TO_ADDR
16033: LD_OWVAR 67
16037: PUSH
16038: LD_INT 2
16040: PLUS
16041: PUSH
16042: FOR_TO
16043: IFFALSE 16152
// begin hc_sex = sex_male ;
16045: LD_ADDR_OWVAR 27
16049: PUSH
16050: LD_INT 1
16052: ST_TO_ADDR
// uc_side = 0 ;
16053: LD_ADDR_OWVAR 20
16057: PUSH
16058: LD_INT 0
16060: ST_TO_ADDR
// uc_nation = nation_nature ;
16061: LD_ADDR_OWVAR 21
16065: PUSH
16066: LD_INT 0
16068: ST_TO_ADDR
// hc_class = class_tiger ;
16069: LD_ADDR_OWVAR 28
16073: PUSH
16074: LD_INT 14
16076: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
16077: LD_ADDR_OWVAR 31
16081: PUSH
16082: LD_EXP 37
16086: PUSH
16087: LD_INT 0
16089: PUSH
16090: LD_INT 0
16092: PUSH
16093: LD_INT 0
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
16102: LD_ADDR_OWVAR 35
16106: PUSH
16107: LD_INT 5
16109: NEG
16110: PPUSH
16111: LD_INT 5
16113: PPUSH
16114: CALL_OW 12
16118: PUSH
16119: LD_OWVAR 67
16123: MUL
16124: ST_TO_ADDR
// un = CreateHuman ;
16125: LD_ADDR_VAR 0 3
16129: PUSH
16130: CALL_OW 44
16134: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16135: LD_VAR 0 3
16139: PPUSH
16140: LD_INT 24
16142: PPUSH
16143: LD_INT 0
16145: PPUSH
16146: CALL_OW 49
// end ;
16150: GO 16042
16152: POP
16153: POP
// for i = 1 to rand ( 3 , 4 ) do
16154: LD_ADDR_VAR 0 2
16158: PUSH
16159: DOUBLE
16160: LD_INT 1
16162: DEC
16163: ST_TO_ADDR
16164: LD_INT 3
16166: PPUSH
16167: LD_INT 4
16169: PPUSH
16170: CALL_OW 12
16174: PUSH
16175: FOR_TO
16176: IFFALSE 16268
// begin hc_sex = sex_male ;
16178: LD_ADDR_OWVAR 27
16182: PUSH
16183: LD_INT 1
16185: ST_TO_ADDR
// uc_side = 0 ;
16186: LD_ADDR_OWVAR 20
16190: PUSH
16191: LD_INT 0
16193: ST_TO_ADDR
// uc_nation = nation_nature ;
16194: LD_ADDR_OWVAR 21
16198: PUSH
16199: LD_INT 0
16201: ST_TO_ADDR
// hc_class = 18 ;
16202: LD_ADDR_OWVAR 28
16206: PUSH
16207: LD_INT 18
16209: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
16210: LD_ADDR_OWVAR 31
16214: PUSH
16215: LD_INT 0
16217: PUSH
16218: LD_INT 0
16220: PUSH
16221: LD_INT 0
16223: PUSH
16224: LD_INT 0
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: ST_TO_ADDR
// hc_agressivity = 0 ;
16233: LD_ADDR_OWVAR 35
16237: PUSH
16238: LD_INT 0
16240: ST_TO_ADDR
// un = CreateHuman ;
16241: LD_ADDR_VAR 0 3
16245: PUSH
16246: CALL_OW 44
16250: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16251: LD_VAR 0 3
16255: PPUSH
16256: LD_INT 24
16258: PPUSH
16259: LD_INT 0
16261: PPUSH
16262: CALL_OW 49
// end ;
16266: GO 16175
16268: POP
16269: POP
// for i = 1 to rand ( 1 , 3 ) do
16270: LD_ADDR_VAR 0 2
16274: PUSH
16275: DOUBLE
16276: LD_INT 1
16278: DEC
16279: ST_TO_ADDR
16280: LD_INT 1
16282: PPUSH
16283: LD_INT 3
16285: PPUSH
16286: CALL_OW 12
16290: PUSH
16291: FOR_TO
16292: IFFALSE 16440
// begin hc_sex = sex_male ;
16294: LD_ADDR_OWVAR 27
16298: PUSH
16299: LD_INT 1
16301: ST_TO_ADDR
// uc_side = 0 ;
16302: LD_ADDR_OWVAR 20
16306: PUSH
16307: LD_INT 0
16309: ST_TO_ADDR
// uc_nation = nation_nature ;
16310: LD_ADDR_OWVAR 21
16314: PUSH
16315: LD_INT 0
16317: ST_TO_ADDR
// hc_class = class_apeman ;
16318: LD_ADDR_OWVAR 28
16322: PUSH
16323: LD_INT 12
16325: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
16326: LD_ADDR_OWVAR 31
16330: PUSH
16331: LD_EXP 36
16335: PPUSH
16336: LD_EXP 37
16340: PPUSH
16341: CALL_OW 12
16345: PUSH
16346: LD_EXP 36
16350: PPUSH
16351: LD_EXP 37
16355: PPUSH
16356: CALL_OW 12
16360: PUSH
16361: LD_EXP 36
16365: PPUSH
16366: LD_EXP 37
16370: PPUSH
16371: CALL_OW 12
16375: PUSH
16376: LD_EXP 36
16380: PPUSH
16381: LD_EXP 37
16385: PPUSH
16386: CALL_OW 12
16390: PUSH
16391: EMPTY
16392: LIST
16393: LIST
16394: LIST
16395: LIST
16396: ST_TO_ADDR
// hc_agressivity = rand ( 1 , 20 ) ;
16397: LD_ADDR_OWVAR 35
16401: PUSH
16402: LD_INT 1
16404: PPUSH
16405: LD_INT 20
16407: PPUSH
16408: CALL_OW 12
16412: ST_TO_ADDR
// un = CreateHuman ;
16413: LD_ADDR_VAR 0 3
16417: PUSH
16418: CALL_OW 44
16422: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16423: LD_VAR 0 3
16427: PPUSH
16428: LD_INT 24
16430: PPUSH
16431: LD_INT 0
16433: PPUSH
16434: CALL_OW 49
// end ;
16438: GO 16291
16440: POP
16441: POP
// end ; end_of_file
16442: LD_VAR 0 1
16446: RET
// on UnitDestroyed ( unit ) do var i ;
16447: LD_INT 0
16449: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
16450: LD_VAR 0 1
16454: PPUSH
16455: CALL_OW 255
16459: PUSH
16460: LD_INT 3
16462: EQUAL
16463: PUSH
16464: LD_VAR 0 1
16468: PPUSH
16469: CALL_OW 247
16473: PUSH
16474: LD_INT 1
16476: EQUAL
16477: AND
16478: IFFALSE 16542
// begin for i in RuScientists do
16480: LD_ADDR_VAR 0 2
16484: PUSH
16485: LD_EXP 34
16489: PUSH
16490: FOR_IN
16491: IFFALSE 16540
// if i = unit then
16493: LD_VAR 0 2
16497: PUSH
16498: LD_VAR 0 1
16502: EQUAL
16503: IFFALSE 16538
// begin RuScientists = RuScientists diff [ unit ] ;
16505: LD_ADDR_EXP 34
16509: PUSH
16510: LD_EXP 34
16514: PUSH
16515: LD_VAR 0 1
16519: PUSH
16520: EMPTY
16521: LIST
16522: DIFF
16523: ST_TO_ADDR
// sciCounter = sciCounter + 1 ;
16524: LD_ADDR_EXP 35
16528: PUSH
16529: LD_EXP 35
16533: PUSH
16534: LD_INT 1
16536: PLUS
16537: ST_TO_ADDR
// end ;
16538: GO 16490
16540: POP
16541: POP
// end ; end ;
16542: PPOPN 2
16544: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_laser then
16545: LD_VAR 0 3
16549: PPUSH
16550: CALL_OW 264
16554: PUSH
16555: LD_INT 9
16557: EQUAL
16558: IFFALSE 16574
// laserCounterDestroy := laserCounterDestroy + 1 ;
16560: LD_ADDR_EXP 50
16564: PUSH
16565: LD_EXP 50
16569: PUSH
16570: LD_INT 1
16572: PLUS
16573: ST_TO_ADDR
// end ;
16574: PPOPN 3
16576: END
// on UnitTeleported ( building , human ) do begin if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
16577: LD_VAR 0 1
16581: PUSH
16582: LD_INT 10
16584: EQUAL
16585: PUSH
16586: LD_VAR 0 2
16590: PPUSH
16591: CALL_OW 255
16595: PUSH
16596: LD_INT 1
16598: EQUAL
16599: AND
16600: PUSH
16601: LD_EXP 47
16605: PUSH
16606: LD_INT 0
16608: EQUAL
16609: AND
16610: IFFALSE 16722
// begin eventVar1 = 1 ;
16612: LD_ADDR_EXP 47
16616: PUSH
16617: LD_INT 1
16619: ST_TO_ADDR
// teleportExplored = 1 ;
16620: LD_ADDR_EXP 33
16624: PUSH
16625: LD_INT 1
16627: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
16628: LD_STRING M2a
16630: PPUSH
16631: CALL_OW 337
// wait ( 0 0$2 ) ;
16635: LD_INT 70
16637: PPUSH
16638: CALL_OW 67
// DialogueOn ;
16642: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
16646: LD_INT 22
16648: PUSH
16649: LD_INT 1
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: LD_INT 21
16658: PUSH
16659: LD_INT 1
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PPUSH
16670: CALL_OW 69
16674: PPUSH
16675: LD_STRING DT3a-Sol1-1
16677: PPUSH
16678: LD_STRING DT3a-FSol1-1
16680: PPUSH
16681: CALL 12288 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
16685: LD_EXP 1
16689: PPUSH
16690: LD_STRING DT3a-JMM-1
16692: PPUSH
16693: CALL_OW 88
// CenterNowOnUnits ( human ) ;
16697: LD_VAR 0 2
16701: PPUSH
16702: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
16706: LD_EXP 1
16710: PPUSH
16711: LD_STRING DT3a-JMM-1a
16713: PPUSH
16714: CALL_OW 88
// DialogueOff ;
16718: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 0 then
16722: LD_VAR 0 1
16726: PUSH
16727: LD_INT 10
16729: EQUAL
16730: PUSH
16731: LD_VAR 0 2
16735: PPUSH
16736: CALL_OW 247
16740: PUSH
16741: LD_INT 2
16743: EQUAL
16744: AND
16745: PUSH
16746: LD_VAR 0 2
16750: PPUSH
16751: CALL_OW 255
16755: PUSH
16756: LD_INT 3
16758: EQUAL
16759: AND
16760: PUSH
16761: LD_EXP 28
16765: PUSH
16766: LD_INT 0
16768: EQUAL
16769: AND
16770: IFFALSE 16787
// begin wait ( 0 0$3 ) ;
16772: LD_INT 105
16774: PPUSH
16775: CALL_OW 67
// vehicleTeleported = 1 ;
16779: LD_ADDR_EXP 28
16783: PUSH
16784: LD_INT 1
16786: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 2 then
16787: LD_VAR 0 1
16791: PUSH
16792: LD_INT 10
16794: EQUAL
16795: PUSH
16796: LD_VAR 0 2
16800: PPUSH
16801: CALL_OW 247
16805: PUSH
16806: LD_INT 2
16808: EQUAL
16809: AND
16810: PUSH
16811: LD_VAR 0 2
16815: PPUSH
16816: CALL_OW 255
16820: PUSH
16821: LD_INT 3
16823: EQUAL
16824: AND
16825: PUSH
16826: LD_EXP 28
16830: PUSH
16831: LD_INT 2
16833: EQUAL
16834: AND
16835: IFFALSE 16852
// begin wait ( 0 0$3 ) ;
16837: LD_INT 105
16839: PPUSH
16840: CALL_OW 67
// vehicleTeleported = 3 ;
16844: LD_ADDR_EXP 28
16848: PUSH
16849: LD_INT 3
16851: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
16852: LD_VAR 0 1
16856: PUSH
16857: LD_INT 10
16859: EQUAL
16860: PUSH
16861: LD_VAR 0 2
16865: PPUSH
16866: CALL_OW 247
16870: PUSH
16871: LD_INT 2
16873: EQUAL
16874: AND
16875: PUSH
16876: LD_VAR 0 2
16880: PPUSH
16881: CALL_OW 255
16885: PUSH
16886: LD_INT 3
16888: EQUAL
16889: AND
16890: IFFALSE 16906
// tpCounter = tpCounter + 1 ;
16892: LD_ADDR_EXP 29
16896: PUSH
16897: LD_EXP 29
16901: PUSH
16902: LD_INT 1
16904: PLUS
16905: ST_TO_ADDR
// end ;
16906: PPOPN 2
16908: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetWeapon ( vehicle ) = us_rocket_launcher then
16909: LD_VAR 0 1
16913: PPUSH
16914: CALL_OW 264
16918: PUSH
16919: LD_INT 7
16921: EQUAL
16922: IFFALSE 16932
// rocketBuilded := true ;
16924: LD_ADDR_EXP 51
16928: PUSH
16929: LD_INT 1
16931: ST_TO_ADDR
// if factory = ru_fact or factory = rufab2 then
16932: LD_VAR 0 2
16936: PUSH
16937: LD_INT 21
16939: EQUAL
16940: PUSH
16941: LD_VAR 0 2
16945: PUSH
16946: LD_INT 112
16948: EQUAL
16949: OR
16950: IFFALSE 17128
// if GetSide ( vehicle ) = 3 then
16952: LD_VAR 0 1
16956: PPUSH
16957: CALL_OW 255
16961: PUSH
16962: LD_INT 3
16964: EQUAL
16965: IFFALSE 17128
// begin if GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
16967: LD_VAR 0 1
16971: PPUSH
16972: CALL_OW 264
16976: PUSH
16977: LD_INT 46
16979: EQUAL
16980: PUSH
16981: LD_VAR 0 1
16985: PPUSH
16986: CALL_OW 264
16990: PUSH
16991: LD_INT 45
16993: EQUAL
16994: OR
16995: PUSH
16996: LD_VAR 0 1
17000: PPUSH
17001: CALL_OW 264
17005: PUSH
17006: LD_INT 44
17008: EQUAL
17009: OR
17010: IFFALSE 17085
// begin russianTanks = russianTanks ^ vehicle ;
17012: LD_ADDR_EXP 39
17016: PUSH
17017: LD_EXP 39
17021: PUSH
17022: LD_VAR 0 1
17026: ADD
17027: ST_TO_ADDR
// if attackTactic = 1 or attackTactic = 0 then
17028: LD_EXP 43
17032: PUSH
17033: LD_INT 1
17035: EQUAL
17036: PUSH
17037: LD_EXP 43
17041: PUSH
17042: LD_INT 0
17044: EQUAL
17045: OR
17046: IFFALSE 17060
// ComEnterUnit ( vehicle , ruteleprt ) ;
17048: LD_VAR 0 1
17052: PPUSH
17053: LD_INT 10
17055: PPUSH
17056: CALL_OW 120
// if attackTactic = 2 then
17060: LD_EXP 43
17064: PUSH
17065: LD_INT 2
17067: EQUAL
17068: IFFALSE 17085
// ComMoveXY ( vehicle , 88 , 69 ) ;
17070: LD_VAR 0 1
17074: PPUSH
17075: LD_INT 88
17077: PPUSH
17078: LD_INT 69
17080: PPUSH
17081: CALL_OW 111
// end ; if GetWeapon ( vehicle ) = 49 then
17085: LD_VAR 0 1
17089: PPUSH
17090: CALL_OW 264
17094: PUSH
17095: LD_INT 49
17097: EQUAL
17098: IFFALSE 17128
// begin russianTimeLapsers = russianTimeLapsers ^ vehicle ;
17100: LD_ADDR_EXP 40
17104: PUSH
17105: LD_EXP 40
17109: PUSH
17110: LD_VAR 0 1
17114: ADD
17115: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
17116: LD_VAR 0 1
17120: PPUSH
17121: LD_INT 137
17123: PPUSH
17124: CALL_OW 120
// end ; end ; end ;
17128: PPOPN 2
17130: END
// on UnitGoesToRed ( unit ) do var i ;
17131: LD_INT 0
17133: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
17134: LD_VAR 0 1
17138: PPUSH
17139: CALL_OW 255
17143: PUSH
17144: LD_INT 3
17146: EQUAL
17147: PUSH
17148: LD_VAR 0 1
17152: PPUSH
17153: CALL_OW 247
17157: PUSH
17158: LD_INT 2
17160: EQUAL
17161: AND
17162: IFFALSE 17280
// begin if russianTanks > 0 then
17164: LD_EXP 39
17168: PUSH
17169: LD_INT 0
17171: GREATER
17172: IFFALSE 17222
// for i in russianTanks do
17174: LD_ADDR_VAR 0 2
17178: PUSH
17179: LD_EXP 39
17183: PUSH
17184: FOR_IN
17185: IFFALSE 17220
// if i = unit then
17187: LD_VAR 0 2
17191: PUSH
17192: LD_VAR 0 1
17196: EQUAL
17197: IFFALSE 17218
// russianTanks = russianTanks diff [ unit ] ;
17199: LD_ADDR_EXP 39
17203: PUSH
17204: LD_EXP 39
17208: PUSH
17209: LD_VAR 0 1
17213: PUSH
17214: EMPTY
17215: LIST
17216: DIFF
17217: ST_TO_ADDR
17218: GO 17184
17220: POP
17221: POP
// if russianTimeLapsers > 0 then
17222: LD_EXP 40
17226: PUSH
17227: LD_INT 0
17229: GREATER
17230: IFFALSE 17280
// for i in russianTimeLapsers do
17232: LD_ADDR_VAR 0 2
17236: PUSH
17237: LD_EXP 40
17241: PUSH
17242: FOR_IN
17243: IFFALSE 17278
// if i = unit then
17245: LD_VAR 0 2
17249: PUSH
17250: LD_VAR 0 1
17254: EQUAL
17255: IFFALSE 17276
// russianTimeLapsers = russianTimeLapsers diff [ unit ] ;
17257: LD_ADDR_EXP 40
17261: PUSH
17262: LD_EXP 40
17266: PUSH
17267: LD_VAR 0 1
17271: PUSH
17272: EMPTY
17273: LIST
17274: DIFF
17275: ST_TO_ADDR
17276: GO 17242
17278: POP
17279: POP
// end ; end ;
17280: PPOPN 2
17282: END
// on LeaveVehicle ( vehicle , human ) do var i ;
17283: LD_INT 0
17285: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
17286: LD_VAR 0 2
17290: PPUSH
17291: CALL_OW 255
17295: PUSH
17296: LD_INT 3
17298: EQUAL
17299: PUSH
17300: LD_VAR 0 2
17304: PPUSH
17305: CALL_OW 257
17309: PUSH
17310: LD_INT 3
17312: EQUAL
17313: AND
17314: PUSH
17315: LD_INT 21
17317: PPUSH
17318: CALL_OW 255
17322: PUSH
17323: LD_INT 3
17325: EQUAL
17326: AND
17327: PUSH
17328: LD_INT 21
17330: PPUSH
17331: CALL_OW 302
17335: AND
17336: IFFALSE 17350
// ComEnterUnit ( human , ru_fact ) ;
17338: LD_VAR 0 2
17342: PPUSH
17343: LD_INT 21
17345: PPUSH
17346: CALL_OW 120
// if GetClass ( human ) = 4 and GetSide ( human ) = 3 and ruAI = 0 then
17350: LD_VAR 0 2
17354: PPUSH
17355: CALL_OW 257
17359: PUSH
17360: LD_INT 4
17362: EQUAL
17363: PUSH
17364: LD_VAR 0 2
17368: PPUSH
17369: CALL_OW 255
17373: PUSH
17374: LD_INT 3
17376: EQUAL
17377: AND
17378: PUSH
17379: LD_EXP 41
17383: PUSH
17384: LD_INT 0
17386: EQUAL
17387: AND
17388: IFFALSE 17450
// for i in RuScientists do
17390: LD_ADDR_VAR 0 3
17394: PUSH
17395: LD_EXP 34
17399: PUSH
17400: FOR_IN
17401: IFFALSE 17448
// if i = human then
17403: LD_VAR 0 3
17407: PUSH
17408: LD_VAR 0 2
17412: EQUAL
17413: IFFALSE 17446
// ComMoveToArea ( i , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
17415: LD_VAR 0 3
17419: PPUSH
17420: LD_INT 13
17422: PUSH
17423: LD_INT 14
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: PUSH
17430: LD_INT 1
17432: PPUSH
17433: LD_INT 2
17435: PPUSH
17436: CALL_OW 12
17440: ARRAY
17441: PPUSH
17442: CALL_OW 113
17446: GO 17400
17448: POP
17449: POP
// end ;
17450: PPOPN 3
17452: END
// on EnterVehicle ( vehicle , human ) do var i , rnd ;
17453: LD_INT 0
17455: PPUSH
17456: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 4 then
17457: LD_VAR 0 2
17461: PPUSH
17462: CALL_OW 255
17466: PUSH
17467: LD_INT 3
17469: EQUAL
17470: PUSH
17471: LD_VAR 0 2
17475: PPUSH
17476: CALL_OW 257
17480: PUSH
17481: LD_INT 4
17483: EQUAL
17484: AND
17485: IFFALSE 17627
// for i in RuScientists do
17487: LD_ADDR_VAR 0 3
17491: PUSH
17492: LD_EXP 34
17496: PUSH
17497: FOR_IN
17498: IFFALSE 17625
// if i = human then
17500: LD_VAR 0 3
17504: PUSH
17505: LD_VAR 0 2
17509: EQUAL
17510: IFFALSE 17623
// if IsOk ( rutp ) then
17512: LD_INT 137
17514: PPUSH
17515: CALL_OW 302
17519: IFFALSE 17592
// begin rnd = rand ( 1 , 2 ) ;
17521: LD_ADDR_VAR 0 4
17525: PUSH
17526: LD_INT 1
17528: PPUSH
17529: LD_INT 2
17531: PPUSH
17532: CALL_OW 12
17536: ST_TO_ADDR
// if rnd = 1 then
17537: LD_VAR 0 4
17541: PUSH
17542: LD_INT 1
17544: EQUAL
17545: IFFALSE 17559
// ComEnterUnit ( vehicle , rutp ) ;
17547: LD_VAR 0 1
17551: PPUSH
17552: LD_INT 137
17554: PPUSH
17555: CALL_OW 120
// AddComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
17559: LD_VAR 0 1
17563: PPUSH
17564: LD_INT 13
17566: PUSH
17567: LD_INT 14
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: LD_INT 1
17576: PPUSH
17577: LD_INT 2
17579: PPUSH
17580: CALL_OW 12
17584: ARRAY
17585: PPUSH
17586: CALL_OW 173
// end else
17590: GO 17623
// begin ComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
17592: LD_VAR 0 1
17596: PPUSH
17597: LD_INT 13
17599: PUSH
17600: LD_INT 14
17602: PUSH
17603: EMPTY
17604: LIST
17605: LIST
17606: PUSH
17607: LD_INT 1
17609: PPUSH
17610: LD_INT 2
17612: PPUSH
17613: CALL_OW 12
17617: ARRAY
17618: PPUSH
17619: CALL_OW 113
// end ;
17623: GO 17497
17625: POP
17626: POP
// end ;
17627: PPOPN 4
17629: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
17630: LD_VAR 0 1
17634: PPUSH
17635: CALL 19862 0 1
// end ; end_of_file
17639: PPOPN 1
17641: END
// every 0 0$1 trigger ruAI = 1 do
17642: LD_EXP 41
17646: PUSH
17647: LD_INT 1
17649: EQUAL
17650: IFFALSE 17779
17652: GO 17654
17654: DISABLE
// begin enable ;
17655: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
17656: LD_INT 3
17658: PPUSH
17659: LD_INT 6
17661: PPUSH
17662: LD_INT 9
17664: PPUSH
17665: LD_EXP 38
17669: PPUSH
17670: CALL 13257 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
17674: LD_INT 3
17676: PPUSH
17677: LD_INT 4
17679: PPUSH
17680: LD_INT 10
17682: PPUSH
17683: LD_EXP 38
17687: PPUSH
17688: CALL 13257 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
17692: LD_INT 3
17694: PPUSH
17695: LD_INT 9
17697: PPUSH
17698: CALL 14458 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
17702: LD_INT 3
17704: PPUSH
17705: LD_INT 10
17707: PPUSH
17708: CALL 14458 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
17712: LD_INT 3
17714: PPUSH
17715: LD_INT 16
17717: PPUSH
17718: LD_INT 9
17720: PPUSH
17721: LD_INT 91
17723: PPUSH
17724: CALL 13648 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
17728: LD_INT 3
17730: PPUSH
17731: LD_INT 17
17733: PPUSH
17734: LD_INT 10
17736: PPUSH
17737: LD_INT 47
17739: PUSH
17740: LD_INT 129
17742: PUSH
17743: LD_INT 135
17745: PUSH
17746: EMPTY
17747: LIST
17748: LIST
17749: LIST
17750: PPUSH
17751: CALL 13648 0 4
// AttackVehicles ( 3 ) ;
17755: LD_INT 3
17757: PPUSH
17758: CALL 14785 0 1
// IntBazooka ( 3 ) ;
17762: LD_INT 3
17764: PPUSH
17765: CALL 15139 0 1
// AttackNearBuildings ( 3 , 1 ) ;
17769: LD_INT 3
17771: PPUSH
17772: LD_INT 1
17774: PPUSH
17775: CALL 14228 0 2
// end ;
17779: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
17780: LD_INT 4
17782: PPUSH
17783: CALL_OW 303
17787: IFFALSE 17802
17789: GO 17791
17791: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
17792: LD_INT 3
17794: PPUSH
17795: LD_INT 4
17797: PPUSH
17798: CALL 15791 0 2
17802: END
// every 0 0$1 do
17803: GO 17805
17805: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
17806: LD_INT 3
17808: PPUSH
17809: LD_INT 91
17811: PPUSH
17812: LD_INT 3
17814: PPUSH
17815: CALL 13016 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
17819: LD_INT 3
17821: PPUSH
17822: LD_INT 47
17824: PPUSH
17825: LD_INT 3
17827: PPUSH
17828: CALL 13016 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
17832: LD_INT 3
17834: PPUSH
17835: LD_INT 129
17837: PPUSH
17838: LD_INT 3
17840: PPUSH
17841: CALL 13016 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
17845: LD_INT 3
17847: PPUSH
17848: LD_INT 3
17850: PPUSH
17851: LD_INT 3
17853: PPUSH
17854: CALL 13016 0 3
// end ;
17858: END
// every 5 5$0 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
17859: LD_EXP 27
17863: PUSH
17864: LD_INT 2
17866: EQUAL
17867: PUSH
17868: LD_INT 21
17870: PPUSH
17871: CALL_OW 255
17875: PUSH
17876: LD_INT 3
17878: EQUAL
17879: AND
17880: PUSH
17881: LD_INT 112
17883: PPUSH
17884: CALL_OW 255
17888: PUSH
17889: LD_INT 3
17891: EQUAL
17892: AND
17893: PUSH
17894: LD_INT 21
17896: PPUSH
17897: CALL_OW 302
17901: AND
17902: PUSH
17903: LD_INT 112
17905: PPUSH
17906: CALL_OW 302
17910: AND
17911: PUSH
17912: LD_INT 22
17914: PUSH
17915: LD_INT 3
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: PUSH
17922: LD_INT 21
17924: PUSH
17925: LD_INT 2
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: PUSH
17932: LD_INT 50
17934: PUSH
17935: EMPTY
17936: LIST
17937: PUSH
17938: LD_INT 3
17940: PUSH
17941: LD_INT 58
17943: PUSH
17944: EMPTY
17945: LIST
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: PPUSH
17957: CALL_OW 69
17961: PUSH
17962: LD_INT 18
17964: PPUSH
17965: LD_INT 22
17967: PUSH
17968: LD_INT 3
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: PUSH
17975: LD_INT 21
17977: PUSH
17978: LD_INT 2
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PPUSH
17989: CALL_OW 70
17993: PUSH
17994: LD_INT 0
17996: EQUAL
17997: DIFF
17998: AND
17999: IFFALSE 18117
18001: GO 18003
18003: DISABLE
// begin enable ;
18004: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
18005: LD_INT 3
18007: PPUSH
18008: LD_INT 21
18010: PPUSH
18011: LD_INT 3
18013: PUSH
18014: LD_INT 4
18016: PUSH
18017: LD_INT 4
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: LIST
18024: PUSH
18025: LD_OWVAR 67
18029: ARRAY
18030: PPUSH
18031: LD_INT 46
18033: PUSH
18034: LD_INT 45
18036: PUSH
18037: LD_INT 44
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: LIST
18044: PPUSH
18045: LD_INT 3
18047: PPUSH
18048: LD_INT 3
18050: PPUSH
18051: LD_INT 24
18053: PPUSH
18054: CALL 14638 0 7
// if russianTimeLapsers = 0 then
18058: LD_EXP 40
18062: PUSH
18063: LD_INT 0
18065: EQUAL
18066: IFFALSE 18117
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
18068: LD_INT 3
18070: PPUSH
18071: LD_INT 112
18073: PPUSH
18074: LD_INT 1
18076: PUSH
18077: LD_INT 2
18079: PUSH
18080: LD_INT 2
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: LIST
18087: PUSH
18088: LD_OWVAR 67
18092: ARRAY
18093: PPUSH
18094: LD_INT 49
18096: PUSH
18097: LD_INT 49
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PPUSH
18104: LD_INT 3
18106: PPUSH
18107: LD_INT 3
18109: PPUSH
18110: LD_INT 24
18112: PPUSH
18113: CALL 14638 0 7
// end ;
18117: END
// every 0 0$1 trigger arabianMines do var i ;
18118: LD_EXP 44
18122: IFFALSE 18243
18124: GO 18126
18126: DISABLE
18127: LD_INT 0
18129: PPUSH
// begin enable ;
18130: ENABLE
// for i in arabianMines do
18131: LD_ADDR_VAR 0 1
18135: PUSH
18136: LD_EXP 44
18140: PUSH
18141: FOR_IN
18142: IFFALSE 18241
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
18144: LD_INT 22
18146: PUSH
18147: LD_INT 1
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PUSH
18154: LD_INT 92
18156: PUSH
18157: LD_VAR 0 1
18161: PUSH
18162: LD_INT 1
18164: ARRAY
18165: PUSH
18166: LD_VAR 0 1
18170: PUSH
18171: LD_INT 2
18173: ARRAY
18174: PUSH
18175: LD_INT 3
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PPUSH
18188: CALL_OW 69
18192: IFFALSE 18239
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
18194: LD_VAR 0 1
18198: PUSH
18199: LD_INT 1
18201: ARRAY
18202: PPUSH
18203: LD_VAR 0 1
18207: PUSH
18208: LD_INT 2
18210: ARRAY
18211: PPUSH
18212: LD_INT 5
18214: PPUSH
18215: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
18219: LD_ADDR_EXP 44
18223: PUSH
18224: LD_EXP 44
18228: PPUSH
18229: LD_VAR 0 1
18233: PPUSH
18234: CALL_OW 3
18238: ST_TO_ADDR
// end ; end ;
18239: GO 18141
18241: POP
18242: POP
// end ;
18243: PPOPN 1
18245: END
// every 0 0$1 trigger vehicleTeleported = 4 and tpCounter = [ 6 , 8 , 8 ] [ Difficulty ] do
18246: LD_EXP 28
18250: PUSH
18251: LD_INT 4
18253: EQUAL
18254: PUSH
18255: LD_EXP 29
18259: PUSH
18260: LD_INT 6
18262: PUSH
18263: LD_INT 8
18265: PUSH
18266: LD_INT 8
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: LIST
18273: PUSH
18274: LD_OWVAR 67
18278: ARRAY
18279: EQUAL
18280: AND
18281: IFFALSE 18299
18283: GO 18285
18285: DISABLE
// TeleportExit ( ruteleprt , 47 , 82 ) ;
18286: LD_INT 10
18288: PPUSH
18289: LD_INT 47
18291: PPUSH
18292: LD_INT 82
18294: PPUSH
18295: CALL_OW 243
18299: END
// every 2 2$0 trigger vehicleTeleported = 4 do
18300: LD_EXP 28
18304: PUSH
18305: LD_INT 4
18307: EQUAL
18308: IFFALSE 18330
18310: GO 18312
18312: DISABLE
// begin enable ;
18313: ENABLE
// attackTactic = rand ( 1 , 2 ) ;
18314: LD_ADDR_EXP 43
18318: PUSH
18319: LD_INT 1
18321: PPUSH
18322: LD_INT 2
18324: PPUSH
18325: CALL_OW 12
18329: ST_TO_ADDR
// end ; end_of_file
18330: END
// every 0 0$1 trigger RuScientists = [ ] and IsDead ( ruheadlab ) do
18331: LD_EXP 34
18335: PUSH
18336: EMPTY
18337: EQUAL
18338: PUSH
18339: LD_INT 3
18341: PPUSH
18342: CALL_OW 301
18346: AND
18347: IFFALSE 18552
18349: GO 18351
18351: DISABLE
// begin if sciCounter = 0 then
18352: LD_EXP 35
18356: PUSH
18357: LD_INT 0
18359: EQUAL
18360: IFFALSE 18386
// begin Say ( JMM , D7a-JMM-1 ) ;
18362: LD_EXP 1
18366: PPUSH
18367: LD_STRING D7a-JMM-1
18369: PPUSH
18370: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
18374: LD_EXP 22
18378: PPUSH
18379: LD_STRING D7a-Pow-1
18381: PPUSH
18382: CALL_OW 94
// end ; if sciCounter > 0 and sciCounter < 6 then
18386: LD_EXP 35
18390: PUSH
18391: LD_INT 0
18393: GREATER
18394: PUSH
18395: LD_EXP 35
18399: PUSH
18400: LD_INT 6
18402: LESS
18403: AND
18404: IFFALSE 18430
// begin Say ( JMM , D7b-JMM-1 ) ;
18406: LD_EXP 1
18410: PPUSH
18411: LD_STRING D7b-JMM-1
18413: PPUSH
18414: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
18418: LD_EXP 22
18422: PPUSH
18423: LD_STRING D7b-Pow-1
18425: PPUSH
18426: CALL_OW 94
// end ; if sciCounter = 6 then
18430: LD_EXP 35
18434: PUSH
18435: LD_INT 6
18437: EQUAL
18438: IFFALSE 18548
// begin Say ( JMM , D7c-JMM-1 ) ;
18440: LD_EXP 1
18444: PPUSH
18445: LD_STRING D7c-JMM-1
18447: PPUSH
18448: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
18452: LD_EXP 22
18456: PPUSH
18457: LD_STRING D7c-Pow-1
18459: PPUSH
18460: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
18464: LD_EXP 1
18468: PPUSH
18469: LD_STRING D7d-JMM-1
18471: PPUSH
18472: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
18476: LD_EXP 22
18480: PPUSH
18481: LD_STRING D7d-Pow-1
18483: PPUSH
18484: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
18488: LD_EXP 1
18492: PPUSH
18493: LD_STRING D7d-JMM-2
18495: PPUSH
18496: CALL_OW 88
// if askSiberite = 1 then
18500: LD_EXP 32
18504: PUSH
18505: LD_INT 1
18507: EQUAL
18508: IFFALSE 18524
// begin Say ( JMM , D7d-JMM-2a ) ;
18510: LD_EXP 1
18514: PPUSH
18515: LD_STRING D7d-JMM-2a
18517: PPUSH
18518: CALL_OW 88
// end else
18522: GO 18536
// begin SayRadio ( Powell , D7d-Pow-2 ) ;
18524: LD_EXP 22
18528: PPUSH
18529: LD_STRING D7d-Pow-2
18531: PPUSH
18532: CALL_OW 94
// end ; SayRadio ( Powell , D7d-Pow-2a ) ;
18536: LD_EXP 22
18540: PPUSH
18541: LD_STRING D7d-Pow-2a
18543: PPUSH
18544: CALL_OW 94
// end ; FinishMission ;
18548: CALL 18553 0 0
// end ;
18552: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
18553: LD_INT 0
18555: PPUSH
18556: PPUSH
18557: PPUSH
18558: PPUSH
// m1 := false ;
18559: LD_ADDR_VAR 0 2
18563: PUSH
18564: LD_INT 0
18566: ST_TO_ADDR
// m2 := false ;
18567: LD_ADDR_VAR 0 3
18571: PUSH
18572: LD_INT 0
18574: ST_TO_ADDR
// m3 := false ;
18575: LD_ADDR_VAR 0 4
18579: PUSH
18580: LD_INT 0
18582: ST_TO_ADDR
// if not westPathUsed then
18583: LD_EXP 49
18587: NOT
18588: IFFALSE 18597
// SetAchievement ( ACH_PATH ) ;
18590: LD_STRING ACH_PATH
18592: PPUSH
18593: CALL_OW 543
// if not rocketBuilded then
18597: LD_EXP 51
18601: NOT
18602: IFFALSE 18618
// begin wait ( 3 ) ;
18604: LD_INT 3
18606: PPUSH
18607: CALL_OW 67
// SetAchievement ( ACH_ROCKET ) ;
18611: LD_STRING ACH_ROCKET
18613: PPUSH
18614: CALL_OW 543
// end ; if tick <= 40 40$00 then
18618: LD_OWVAR 1
18622: PUSH
18623: LD_INT 84000
18625: LESSEQUAL
18626: IFFALSE 18642
// begin wait ( 3 ) ;
18628: LD_INT 3
18630: PPUSH
18631: CALL_OW 67
// SetAchievement ( ACH_ASPEED_12 ) ;
18635: LD_STRING ACH_ASPEED_12
18637: PPUSH
18638: CALL_OW 543
// end ; if teleportExplored = 1 then
18642: LD_EXP 33
18646: PUSH
18647: LD_INT 1
18649: EQUAL
18650: IFFALSE 18672
// begin m1 := true ;
18652: LD_ADDR_VAR 0 2
18656: PUSH
18657: LD_INT 1
18659: ST_TO_ADDR
// AddMedal ( Teleport , 1 ) ;
18660: LD_STRING Teleport
18662: PPUSH
18663: LD_INT 1
18665: PPUSH
18666: CALL_OW 101
// end else
18670: GO 18683
// AddMedal ( Teleport , - 1 ) ;
18672: LD_STRING Teleport
18674: PPUSH
18675: LD_INT 1
18677: NEG
18678: PPUSH
18679: CALL_OW 101
// if sciCounter > 2 then
18683: LD_EXP 35
18687: PUSH
18688: LD_INT 2
18690: GREATER
18691: IFFALSE 18713
// begin m2 := true ;
18693: LD_ADDR_VAR 0 3
18697: PUSH
18698: LD_INT 1
18700: ST_TO_ADDR
// AddMedal ( Materials , 1 ) ;
18701: LD_STRING Materials
18703: PPUSH
18704: LD_INT 1
18706: PPUSH
18707: CALL_OW 101
// end else
18711: GO 18724
// AddMedal ( Materials , - 1 ) ;
18713: LD_STRING Materials
18715: PPUSH
18716: LD_INT 1
18718: NEG
18719: PPUSH
18720: CALL_OW 101
// if sciCounter >= 6 then
18724: LD_EXP 35
18728: PUSH
18729: LD_INT 6
18731: GREATEREQUAL
18732: IFFALSE 18764
// begin m3 := true ;
18734: LD_ADDR_VAR 0 4
18738: PUSH
18739: LD_INT 1
18741: ST_TO_ADDR
// AddMedal ( Scientists , 1 ) ;
18742: LD_STRING Scientists
18744: PPUSH
18745: LD_INT 1
18747: PPUSH
18748: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
18752: LD_INT 1
18754: PPUSH
18755: LD_STRING 12_SciDed_1
18757: PPUSH
18758: CALL_OW 39
// end else
18762: GO 18785
// begin AddMedal ( Scientists , - 1 ) ;
18764: LD_STRING Scientists
18766: PPUSH
18767: LD_INT 1
18769: NEG
18770: PPUSH
18771: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
18775: LD_INT 0
18777: PPUSH
18778: LD_STRING 12_SciDed_1
18780: PPUSH
18781: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
18785: LD_EXP 31
18789: PPUSH
18790: LD_STRING 12_MainDepositFake_1
18792: PPUSH
18793: CALL_OW 39
// if m1 and m2 and m3 and Difficulty = 3 then
18797: LD_VAR 0 2
18801: PUSH
18802: LD_VAR 0 3
18806: AND
18807: PUSH
18808: LD_VAR 0 4
18812: AND
18813: PUSH
18814: LD_OWVAR 67
18818: PUSH
18819: LD_INT 3
18821: EQUAL
18822: AND
18823: IFFALSE 18835
// SetAchievementEX ( ACH_AMER , 12 ) ;
18825: LD_STRING ACH_AMER
18827: PPUSH
18828: LD_INT 12
18830: PPUSH
18831: CALL_OW 564
// GiveMedals ( MAIN ) ;
18835: LD_STRING MAIN
18837: PPUSH
18838: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
18842: LD_INT 22
18844: PUSH
18845: LD_INT 1
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: PUSH
18852: LD_INT 21
18854: PUSH
18855: LD_INT 1
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: PUSH
18862: LD_INT 2
18864: PUSH
18865: LD_INT 25
18867: PUSH
18868: LD_INT 1
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: PUSH
18875: LD_INT 25
18877: PUSH
18878: LD_INT 2
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: PUSH
18885: LD_INT 25
18887: PUSH
18888: LD_INT 3
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: PUSH
18895: LD_INT 25
18897: PUSH
18898: LD_INT 4
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: PUSH
18905: LD_INT 25
18907: PUSH
18908: LD_INT 5
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: PUSH
18915: LD_INT 25
18917: PUSH
18918: LD_INT 8
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: LIST
18938: PPUSH
18939: CALL_OW 69
18943: PPUSH
18944: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18948: LD_EXP 1
18952: PPUSH
18953: LD_EXP 46
18957: PUSH
18958: LD_STRING JMM
18960: STR
18961: PPUSH
18962: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18966: LD_EXP 7
18970: PPUSH
18971: LD_EXP 46
18975: PUSH
18976: LD_STRING Brown
18978: STR
18979: PPUSH
18980: CALL 12248 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18984: LD_EXP 3
18988: PPUSH
18989: LD_EXP 46
18993: PUSH
18994: LD_STRING Donaldson
18996: STR
18997: PPUSH
18998: CALL 12248 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
19002: LD_EXP 4
19006: PPUSH
19007: LD_EXP 46
19011: PUSH
19012: LD_STRING Bobby
19014: STR
19015: PPUSH
19016: CALL 12248 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
19020: LD_EXP 5
19024: PPUSH
19025: LD_EXP 46
19029: PUSH
19030: LD_STRING Cyrus
19032: STR
19033: PPUSH
19034: CALL 12248 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
19038: LD_EXP 2
19042: PPUSH
19043: LD_EXP 46
19047: PUSH
19048: LD_STRING Lisa
19050: STR
19051: PPUSH
19052: CALL 12248 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
19056: LD_EXP 12
19060: PPUSH
19061: LD_EXP 46
19065: PUSH
19066: LD_STRING Frank
19068: STR
19069: PPUSH
19070: CALL 12248 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
19074: LD_EXP 13
19078: PPUSH
19079: LD_EXP 46
19083: PUSH
19084: LD_STRING Kikuchi
19086: STR
19087: PPUSH
19088: CALL 12248 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
19092: LD_EXP 9
19096: PPUSH
19097: LD_EXP 46
19101: PUSH
19102: LD_STRING Houten
19104: STR
19105: PPUSH
19106: CALL 12248 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
19110: LD_EXP 11
19114: PPUSH
19115: LD_EXP 46
19119: PUSH
19120: LD_STRING Gary
19122: STR
19123: PPUSH
19124: CALL 12248 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
19128: LD_EXP 10
19132: PPUSH
19133: LD_EXP 46
19137: PUSH
19138: LD_STRING Cornell
19140: STR
19141: PPUSH
19142: CALL 12248 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
19146: LD_EXP 6
19150: PPUSH
19151: LD_EXP 46
19155: PUSH
19156: LD_STRING Denis
19158: STR
19159: PPUSH
19160: CALL 12248 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
19164: LD_EXP 8
19168: PPUSH
19169: LD_EXP 46
19173: PUSH
19174: LD_STRING Gladstone
19176: STR
19177: PPUSH
19178: CALL 12248 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
19182: LD_INT 22
19184: PUSH
19185: LD_INT 1
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PUSH
19192: LD_INT 23
19194: PUSH
19195: LD_INT 1
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: PUSH
19202: LD_INT 21
19204: PUSH
19205: LD_INT 1
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: PUSH
19212: LD_INT 2
19214: PUSH
19215: LD_INT 25
19217: PUSH
19218: LD_INT 1
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: LD_INT 25
19227: PUSH
19228: LD_INT 2
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PUSH
19235: LD_INT 25
19237: PUSH
19238: LD_INT 3
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: PUSH
19245: LD_INT 25
19247: PUSH
19248: LD_INT 4
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PUSH
19255: LD_INT 25
19257: PUSH
19258: LD_INT 5
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: PUSH
19265: LD_INT 25
19267: PUSH
19268: LD_INT 8
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: PPUSH
19290: CALL_OW 69
19294: PUSH
19295: LD_EXP 1
19299: PUSH
19300: LD_EXP 7
19304: PUSH
19305: LD_EXP 3
19309: PUSH
19310: LD_EXP 4
19314: PUSH
19315: LD_EXP 5
19319: PUSH
19320: LD_EXP 2
19324: PUSH
19325: LD_EXP 12
19329: PUSH
19330: LD_EXP 8
19334: PUSH
19335: LD_EXP 13
19339: PUSH
19340: LD_EXP 6
19344: PUSH
19345: LD_EXP 9
19349: PUSH
19350: LD_EXP 11
19354: PUSH
19355: LD_EXP 10
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: DIFF
19375: PPUSH
19376: LD_STRING 12_other_survivors
19378: PPUSH
19379: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
19383: LD_INT 22
19385: PUSH
19386: LD_INT 1
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: PUSH
19393: LD_INT 23
19395: PUSH
19396: LD_INT 2
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: LD_INT 21
19405: PUSH
19406: LD_INT 1
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: LD_INT 2
19415: PUSH
19416: LD_INT 25
19418: PUSH
19419: LD_INT 1
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: PUSH
19426: LD_INT 25
19428: PUSH
19429: LD_INT 2
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: LD_INT 25
19438: PUSH
19439: LD_INT 3
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: PUSH
19446: LD_INT 25
19448: PUSH
19449: LD_INT 4
19451: PUSH
19452: EMPTY
19453: LIST
19454: LIST
19455: PUSH
19456: LD_INT 25
19458: PUSH
19459: LD_INT 5
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: PUSH
19466: LD_INT 25
19468: PUSH
19469: LD_INT 8
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: PUSH
19476: EMPTY
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: LIST
19489: LIST
19490: PPUSH
19491: CALL_OW 69
19495: PPUSH
19496: LD_STRING 12_kurt_squad
19498: PPUSH
19499: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
19503: LD_EXP 14
19507: PPUSH
19508: LD_STRING 12_others
19510: PPUSH
19511: CALL_OW 38
// YouWin ;
19515: CALL_OW 103
// end ; end_of_file
19519: LD_VAR 0 1
19523: RET
// every 0 0$1 trigger IsDead ( JMM ) do
19524: LD_EXP 1
19528: PPUSH
19529: CALL_OW 301
19533: IFFALSE 19545
19535: GO 19537
19537: DISABLE
// YouLost ( JMM ) ; end_of_file
19538: LD_STRING JMM
19540: PPUSH
19541: CALL_OW 104
19545: END
// every 0 0$01 do
19546: GO 19548
19548: DISABLE
// begin repeat wait ( 0 0$30 ) ;
19549: LD_INT 1050
19551: PPUSH
19552: CALL_OW 67
// if cratesSpawned < 6 then
19556: LD_EXP 45
19560: PUSH
19561: LD_INT 6
19563: LESS
19564: IFFALSE 19601
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19566: LD_INT 3
19568: PPUSH
19569: LD_INT 5
19571: PPUSH
19572: CALL_OW 12
19576: PPUSH
19577: LD_INT 21
19579: PPUSH
19580: LD_INT 1
19582: PPUSH
19583: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19587: LD_ADDR_EXP 45
19591: PUSH
19592: LD_EXP 45
19596: PUSH
19597: LD_INT 1
19599: PLUS
19600: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
19601: LD_EXP 45
19605: PUSH
19606: LD_INT 6
19608: GREATEREQUAL
19609: PUSH
19610: LD_EXP 45
19614: PUSH
19615: LD_INT 12
19617: LESS
19618: AND
19619: IFFALSE 19663
// begin wait ( 0 0$50 ) ;
19621: LD_INT 1750
19623: PPUSH
19624: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19628: LD_INT 3
19630: PPUSH
19631: LD_INT 5
19633: PPUSH
19634: CALL_OW 12
19638: PPUSH
19639: LD_INT 21
19641: PPUSH
19642: LD_INT 1
19644: PPUSH
19645: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19649: LD_ADDR_EXP 45
19653: PUSH
19654: LD_EXP 45
19658: PUSH
19659: LD_INT 1
19661: PLUS
19662: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
19663: LD_EXP 45
19667: PUSH
19668: LD_INT 12
19670: GREATEREQUAL
19671: IFFALSE 19715
// begin wait ( 1 1$40 ) ;
19673: LD_INT 3500
19675: PPUSH
19676: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19680: LD_INT 3
19682: PPUSH
19683: LD_INT 5
19685: PPUSH
19686: CALL_OW 12
19690: PPUSH
19691: LD_INT 21
19693: PPUSH
19694: LD_INT 1
19696: PPUSH
19697: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19701: LD_ADDR_EXP 45
19705: PUSH
19706: LD_EXP 45
19710: PUSH
19711: LD_INT 1
19713: PLUS
19714: ST_TO_ADDR
// end ; until false ;
19715: LD_INT 0
19717: IFFALSE 19549
// end ; end_of_file
19719: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
19720: GO 19722
19722: DISABLE
// begin ru_radar := 98 ;
19723: LD_ADDR_EXP 52
19727: PUSH
19728: LD_INT 98
19730: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19731: LD_ADDR_EXP 53
19735: PUSH
19736: LD_INT 89
19738: ST_TO_ADDR
// us_hack := 99 ;
19739: LD_ADDR_EXP 54
19743: PUSH
19744: LD_INT 99
19746: ST_TO_ADDR
// us_artillery := 97 ;
19747: LD_ADDR_EXP 55
19751: PUSH
19752: LD_INT 97
19754: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19755: LD_ADDR_EXP 56
19759: PUSH
19760: LD_INT 91
19762: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
19763: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
19764: LD_INT 0
19766: PPUSH
19767: PPUSH
19768: PPUSH
19769: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19770: LD_VAR 0 1
19774: PPUSH
19775: CALL_OW 264
19779: PUSH
19780: LD_EXP 56
19784: EQUAL
19785: IFFALSE 19857
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19787: LD_INT 68
19789: PPUSH
19790: LD_VAR 0 1
19794: PPUSH
19795: CALL_OW 255
19799: PPUSH
19800: CALL_OW 321
19804: PUSH
19805: LD_INT 2
19807: EQUAL
19808: IFFALSE 19820
// eff := 70 else
19810: LD_ADDR_VAR 0 6
19814: PUSH
19815: LD_INT 70
19817: ST_TO_ADDR
19818: GO 19828
// eff := 30 ;
19820: LD_ADDR_VAR 0 6
19824: PUSH
19825: LD_INT 30
19827: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19828: LD_VAR 0 1
19832: PPUSH
19833: CALL_OW 250
19837: PPUSH
19838: LD_VAR 0 1
19842: PPUSH
19843: CALL_OW 251
19847: PPUSH
19848: LD_VAR 0 6
19852: PPUSH
19853: CALL_OW 495
// end ; end ;
19857: LD_VAR 0 4
19861: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
19862: LD_INT 0
19864: PPUSH
19865: PPUSH
19866: PPUSH
19867: PPUSH
19868: PPUSH
19869: PPUSH
// if cmd = 124 then
19870: LD_VAR 0 1
19874: PUSH
19875: LD_INT 124
19877: EQUAL
19878: IFFALSE 20084
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
19880: LD_ADDR_VAR 0 5
19884: PUSH
19885: LD_INT 2
19887: PUSH
19888: LD_INT 34
19890: PUSH
19891: LD_INT 53
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: PUSH
19898: LD_INT 34
19900: PUSH
19901: LD_INT 14
19903: PUSH
19904: EMPTY
19905: LIST
19906: LIST
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: LIST
19912: PPUSH
19913: CALL_OW 69
19917: ST_TO_ADDR
// if not tmp then
19918: LD_VAR 0 5
19922: NOT
19923: IFFALSE 19927
// exit ;
19925: GO 20084
// for i in tmp do
19927: LD_ADDR_VAR 0 3
19931: PUSH
19932: LD_VAR 0 5
19936: PUSH
19937: FOR_IN
19938: IFFALSE 20082
// begin taskList := GetTaskList ( i ) ;
19940: LD_ADDR_VAR 0 6
19944: PUSH
19945: LD_VAR 0 3
19949: PPUSH
19950: CALL_OW 437
19954: ST_TO_ADDR
// if not taskList then
19955: LD_VAR 0 6
19959: NOT
19960: IFFALSE 19964
// continue ;
19962: GO 19937
// for j = 1 to taskList do
19964: LD_ADDR_VAR 0 4
19968: PUSH
19969: DOUBLE
19970: LD_INT 1
19972: DEC
19973: ST_TO_ADDR
19974: LD_VAR 0 6
19978: PUSH
19979: FOR_TO
19980: IFFALSE 20078
// if taskList [ j ] [ 1 ] = | then
19982: LD_VAR 0 6
19986: PUSH
19987: LD_VAR 0 4
19991: ARRAY
19992: PUSH
19993: LD_INT 1
19995: ARRAY
19996: PUSH
19997: LD_STRING |
19999: EQUAL
20000: IFFALSE 20076
// begin _taskList := Delete ( taskList , 1 ) ;
20002: LD_ADDR_VAR 0 7
20006: PUSH
20007: LD_VAR 0 6
20011: PPUSH
20012: LD_INT 1
20014: PPUSH
20015: CALL_OW 3
20019: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
20020: LD_VAR 0 3
20024: PPUSH
20025: LD_VAR 0 7
20029: PPUSH
20030: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
20034: LD_VAR 0 3
20038: PPUSH
20039: LD_VAR 0 6
20043: PUSH
20044: LD_VAR 0 4
20048: ARRAY
20049: PUSH
20050: LD_INT 2
20052: ARRAY
20053: PPUSH
20054: LD_VAR 0 6
20058: PUSH
20059: LD_VAR 0 4
20063: ARRAY
20064: PUSH
20065: LD_INT 3
20067: ARRAY
20068: PPUSH
20069: LD_INT 8
20071: PPUSH
20072: CALL 20089 0 4
// end ;
20076: GO 19979
20078: POP
20079: POP
// end ;
20080: GO 19937
20082: POP
20083: POP
// end ; end ;
20084: LD_VAR 0 2
20088: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20089: LD_INT 0
20091: PPUSH
20092: PPUSH
20093: PPUSH
20094: PPUSH
20095: PPUSH
20096: PPUSH
20097: PPUSH
20098: PPUSH
20099: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20100: LD_VAR 0 1
20104: NOT
20105: PUSH
20106: LD_VAR 0 2
20110: PPUSH
20111: LD_VAR 0 3
20115: PPUSH
20116: CALL_OW 488
20120: NOT
20121: OR
20122: PUSH
20123: LD_VAR 0 4
20127: NOT
20128: OR
20129: IFFALSE 20133
// exit ;
20131: GO 20473
// list := [ ] ;
20133: LD_ADDR_VAR 0 13
20137: PUSH
20138: EMPTY
20139: ST_TO_ADDR
// if x - r < 0 then
20140: LD_VAR 0 2
20144: PUSH
20145: LD_VAR 0 4
20149: MINUS
20150: PUSH
20151: LD_INT 0
20153: LESS
20154: IFFALSE 20166
// min_x := 0 else
20156: LD_ADDR_VAR 0 7
20160: PUSH
20161: LD_INT 0
20163: ST_TO_ADDR
20164: GO 20182
// min_x := x - r ;
20166: LD_ADDR_VAR 0 7
20170: PUSH
20171: LD_VAR 0 2
20175: PUSH
20176: LD_VAR 0 4
20180: MINUS
20181: ST_TO_ADDR
// if y - r < 0 then
20182: LD_VAR 0 3
20186: PUSH
20187: LD_VAR 0 4
20191: MINUS
20192: PUSH
20193: LD_INT 0
20195: LESS
20196: IFFALSE 20208
// min_y := 0 else
20198: LD_ADDR_VAR 0 8
20202: PUSH
20203: LD_INT 0
20205: ST_TO_ADDR
20206: GO 20224
// min_y := y - r ;
20208: LD_ADDR_VAR 0 8
20212: PUSH
20213: LD_VAR 0 3
20217: PUSH
20218: LD_VAR 0 4
20222: MINUS
20223: ST_TO_ADDR
// max_x := x + r ;
20224: LD_ADDR_VAR 0 9
20228: PUSH
20229: LD_VAR 0 2
20233: PUSH
20234: LD_VAR 0 4
20238: PLUS
20239: ST_TO_ADDR
// max_y := y + r ;
20240: LD_ADDR_VAR 0 10
20244: PUSH
20245: LD_VAR 0 3
20249: PUSH
20250: LD_VAR 0 4
20254: PLUS
20255: ST_TO_ADDR
// for _x = min_x to max_x do
20256: LD_ADDR_VAR 0 11
20260: PUSH
20261: DOUBLE
20262: LD_VAR 0 7
20266: DEC
20267: ST_TO_ADDR
20268: LD_VAR 0 9
20272: PUSH
20273: FOR_TO
20274: IFFALSE 20391
// for _y = min_y to max_y do
20276: LD_ADDR_VAR 0 12
20280: PUSH
20281: DOUBLE
20282: LD_VAR 0 8
20286: DEC
20287: ST_TO_ADDR
20288: LD_VAR 0 10
20292: PUSH
20293: FOR_TO
20294: IFFALSE 20387
// begin if not ValidHex ( _x , _y ) then
20296: LD_VAR 0 11
20300: PPUSH
20301: LD_VAR 0 12
20305: PPUSH
20306: CALL_OW 488
20310: NOT
20311: IFFALSE 20315
// continue ;
20313: GO 20293
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20315: LD_VAR 0 11
20319: PPUSH
20320: LD_VAR 0 12
20324: PPUSH
20325: CALL_OW 351
20329: PUSH
20330: LD_VAR 0 11
20334: PPUSH
20335: LD_VAR 0 12
20339: PPUSH
20340: CALL_OW 554
20344: AND
20345: IFFALSE 20385
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20347: LD_ADDR_VAR 0 13
20351: PUSH
20352: LD_VAR 0 13
20356: PPUSH
20357: LD_VAR 0 13
20361: PUSH
20362: LD_INT 1
20364: PLUS
20365: PPUSH
20366: LD_VAR 0 11
20370: PUSH
20371: LD_VAR 0 12
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: PPUSH
20380: CALL_OW 2
20384: ST_TO_ADDR
// end ;
20385: GO 20293
20387: POP
20388: POP
20389: GO 20273
20391: POP
20392: POP
// if not list then
20393: LD_VAR 0 13
20397: NOT
20398: IFFALSE 20402
// exit ;
20400: GO 20473
// for i in list do
20402: LD_ADDR_VAR 0 6
20406: PUSH
20407: LD_VAR 0 13
20411: PUSH
20412: FOR_IN
20413: IFFALSE 20471
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
20415: LD_VAR 0 1
20419: PPUSH
20420: LD_STRING M
20422: PUSH
20423: LD_VAR 0 6
20427: PUSH
20428: LD_INT 1
20430: ARRAY
20431: PUSH
20432: LD_VAR 0 6
20436: PUSH
20437: LD_INT 2
20439: ARRAY
20440: PUSH
20441: LD_INT 0
20443: PUSH
20444: LD_INT 0
20446: PUSH
20447: LD_INT 0
20449: PUSH
20450: LD_INT 0
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: PUSH
20462: EMPTY
20463: LIST
20464: PPUSH
20465: CALL_OW 447
20469: GO 20412
20471: POP
20472: POP
// end ;
20473: LD_VAR 0 5
20477: RET
