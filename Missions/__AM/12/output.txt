// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export Powell ; export Davidov ; export Kurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; export westPathUsed , laserCounterDestroy , rocketBuilded ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_STRING ryutin
  20: PPUSH
  21: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  25: LD_INT 6
  27: PPUSH
  28: LD_STRING yegorov
  30: PPUSH
  31: CALL_OW 500
// RuScientists = [ ] ;
  35: LD_ADDR_EXP 27
  39: PUSH
  40: EMPTY
  41: ST_TO_ADDR
// sciCounter = 0 ;
  42: LD_ADDR_EXP 28
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  50: LD_ADDR_EXP 31
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTanks = [ ] ;
  57: LD_ADDR_EXP 32
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  64: LD_ADDR_EXP 33
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// arabianMines = [ ] ;
  71: LD_ADDR_EXP 37
  75: PUSH
  76: EMPTY
  77: ST_TO_ADDR
// kurtStatus = LoadVariable ( 06_KurtStatus_1 , 0 ) ;
  78: LD_ADDR_EXP 19
  82: PUSH
  83: LD_STRING 06_KurtStatus_1
  85: PPUSH
  86: LD_INT 0
  88: PPUSH
  89: CALL_OW 30
  93: ST_TO_ADDR
// secondPass = 0 ;
  94: LD_ADDR_EXP 20
  98: PUSH
  99: LD_INT 0
 101: ST_TO_ADDR
// teleportExplored = 0 ;
 102: LD_ADDR_EXP 26
 106: PUSH
 107: LD_INT 0
 109: ST_TO_ADDR
// attackTactic = 0 ;
 110: LD_ADDR_EXP 36
 114: PUSH
 115: LD_INT 0
 117: ST_TO_ADDR
// tpCounter = 0 ;
 118: LD_ADDR_EXP 22
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// askSiberite = 0 ;
 126: LD_ADDR_EXP 25
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// warWithLegion = 0 ;
 134: LD_ADDR_EXP 23
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// fakeInfo = 0 ;
 142: LD_ADDR_EXP 24
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// cratesSpawned = 0 ;
 150: LD_ADDR_EXP 38
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// ruAI = 0 ;
 158: LD_ADDR_EXP 34
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// ruEscape = 0 ;
 166: LD_ADDR_EXP 35
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// eventVar1 = 0 ;
 174: LD_ADDR_EXP 40
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// mission_prefix = 12_ ;
 182: LD_ADDR_EXP 39
 186: PUSH
 187: LD_STRING 12_
 189: ST_TO_ADDR
// debugMode = 0 ;
 190: LD_ADDR_EXP 41
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// westPathUsed := false ;
 198: LD_ADDR_EXP 42
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// laserCounterDestroy := 0 ;
 206: LD_ADDR_EXP 43
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// rocketBuilded := false ;
 214: LD_ADDR_EXP 44
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// CreateNature ;
 222: CALL 15053 0 0
// PrepareDifficulty ;
 226: CALL 12268 0 0
// PrepareVehicles ;
 230: CALL 1804 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 234: LD_INT 4
 236: PPUSH
 237: LD_INT 0
 239: PPUSH
 240: LD_INT 1
 242: PPUSH
 243: LD_INT 0
 245: PPUSH
 246: CALL 1378 0 4
// PrepareAmericanHeroes ;
 250: CALL 644 0 0
// PrepareRussianCommander ;
 254: CALL 3269 0 0
// PrepareWestBase ;
 258: CALL 3784 0 0
// PrepareEastBase ;
 262: CALL 3344 0 0
// PrepareOtherRussians ;
 266: CALL 3922 0 0
// Action ;
 270: CALL 5588 0 0
// end ;
 274: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 275: LD_EXP 41
 279: PUSH
 280: LD_INT 1
 282: EQUAL
 283: IFFALSE 589
 285: GO 287
 287: DISABLE
 288: LD_INT 0
 290: PPUSH
// begin enable ;
 291: ENABLE
// fogoff ( true ) ;
 292: LD_INT 1
 294: PPUSH
 295: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 299: LD_ADDR_VAR 0 1
 303: PUSH
 304: LD_INT 22
 306: PUSH
 307: LD_INT 1
 309: PUSH
 310: EMPTY
 311: LIST
 312: LIST
 313: PUSH
 314: LD_INT 21
 316: PUSH
 317: LD_INT 1
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: PPUSH
 328: CALL_OW 69
 332: PUSH
 333: FOR_IN
 334: IFFALSE 350
// SetLives ( i , 1000 ) ;
 336: LD_VAR 0 1
 340: PPUSH
 341: LD_INT 1000
 343: PPUSH
 344: CALL_OW 234
 348: GO 333
 350: POP
 351: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 352: LD_ADDR_VAR 0 1
 356: PUSH
 357: LD_INT 22
 359: PUSH
 360: LD_INT 1
 362: PUSH
 363: EMPTY
 364: LIST
 365: LIST
 366: PUSH
 367: LD_INT 2
 369: PUSH
 370: LD_INT 30
 372: PUSH
 373: LD_INT 0
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: PUSH
 380: LD_INT 30
 382: PUSH
 383: LD_INT 1
 385: PUSH
 386: EMPTY
 387: LIST
 388: LIST
 389: PUSH
 390: EMPTY
 391: LIST
 392: LIST
 393: LIST
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: PPUSH
 399: CALL_OW 69
 403: PUSH
 404: FOR_IN
 405: IFFALSE 429
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 407: LD_VAR 0 1
 411: PPUSH
 412: CALL_OW 274
 416: PPUSH
 417: LD_INT 1
 419: PPUSH
 420: LD_INT 9999
 422: PPUSH
 423: CALL_OW 277
 427: GO 404
 429: POP
 430: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 431: LD_ADDR_VAR 0 1
 435: PUSH
 436: LD_INT 22
 438: PUSH
 439: LD_INT 1
 441: PUSH
 442: EMPTY
 443: LIST
 444: LIST
 445: PUSH
 446: LD_INT 2
 448: PUSH
 449: LD_INT 30
 451: PUSH
 452: LD_INT 0
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: PUSH
 459: LD_INT 30
 461: PUSH
 462: LD_INT 1
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: PUSH
 469: EMPTY
 470: LIST
 471: LIST
 472: LIST
 473: PUSH
 474: EMPTY
 475: LIST
 476: LIST
 477: PPUSH
 478: CALL_OW 69
 482: PUSH
 483: FOR_IN
 484: IFFALSE 508
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 274
 495: PPUSH
 496: LD_INT 2
 498: PPUSH
 499: LD_INT 9999
 501: PPUSH
 502: CALL_OW 277
 506: GO 483
 508: POP
 509: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 510: LD_ADDR_VAR 0 1
 514: PUSH
 515: LD_INT 22
 517: PUSH
 518: LD_INT 1
 520: PUSH
 521: EMPTY
 522: LIST
 523: LIST
 524: PUSH
 525: LD_INT 2
 527: PUSH
 528: LD_INT 30
 530: PUSH
 531: LD_INT 0
 533: PUSH
 534: EMPTY
 535: LIST
 536: LIST
 537: PUSH
 538: LD_INT 30
 540: PUSH
 541: LD_INT 1
 543: PUSH
 544: EMPTY
 545: LIST
 546: LIST
 547: PUSH
 548: EMPTY
 549: LIST
 550: LIST
 551: LIST
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: PPUSH
 557: CALL_OW 69
 561: PUSH
 562: FOR_IN
 563: IFFALSE 587
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 565: LD_VAR 0 1
 569: PPUSH
 570: CALL_OW 274
 574: PPUSH
 575: LD_INT 3
 577: PPUSH
 578: LD_INT 9999
 580: PPUSH
 581: CALL_OW 277
 585: GO 562
 587: POP
 588: POP
// end ;
 589: PPOPN 1
 591: END
// every 0 0$1 trigger FilterUnitsInArea ( westPathArea , [ f_side , 1 ] ) do
 592: LD_INT 25
 594: PPUSH
 595: LD_INT 22
 597: PUSH
 598: LD_INT 1
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: PPUSH
 605: CALL_OW 70
 609: IFFALSE 622
 611: GO 613
 613: DISABLE
// westPathUsed := true ;
 614: LD_ADDR_EXP 42
 618: PUSH
 619: LD_INT 1
 621: ST_TO_ADDR
 622: END
// every 0 0$1 trigger laserCounterDestroy >= 3 do
 623: LD_EXP 43
 627: PUSH
 628: LD_INT 3
 630: GREATEREQUAL
 631: IFFALSE 643
 633: GO 635
 635: DISABLE
// SetAchievement ( ACH_LASER ) ; end_of_file
 636: LD_STRING ACH_LASER
 638: PPUSH
 639: CALL_OW 543
 643: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 644: LD_INT 0
 646: PPUSH
 647: PPUSH
 648: PPUSH
// uc_side = 1 ;
 649: LD_ADDR_OWVAR 20
 653: PUSH
 654: LD_INT 1
 656: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 657: LD_ADDR_EXP 14
 661: PUSH
 662: LD_STRING 11c_others
 664: PPUSH
 665: CALL_OW 31
 669: PUSH
 670: LD_STRING 11_others
 672: PPUSH
 673: CALL_OW 31
 677: UNION
 678: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 11_ ) ;
 679: LD_ADDR_EXP 1
 683: PUSH
 684: LD_STRING JMM
 686: PPUSH
 687: LD_INT 1
 689: PPUSH
 690: LD_STRING 11_
 692: PPUSH
 693: CALL 38209 0 3
 697: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 698: LD_EXP 1
 702: PPUSH
 703: LD_INT 1
 705: PPUSH
 706: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 710: LD_EXP 1
 714: PPUSH
 715: LD_INT 22
 717: PUSH
 718: LD_INT 1
 720: PUSH
 721: EMPTY
 722: LIST
 723: LIST
 724: PUSH
 725: LD_INT 21
 727: PUSH
 728: LD_INT 2
 730: PUSH
 731: EMPTY
 732: LIST
 733: LIST
 734: PUSH
 735: LD_INT 58
 737: PUSH
 738: EMPTY
 739: LIST
 740: PUSH
 741: EMPTY
 742: LIST
 743: LIST
 744: LIST
 745: PPUSH
 746: CALL_OW 69
 750: PUSH
 751: LD_INT 1
 753: ARRAY
 754: PPUSH
 755: CALL_OW 52
// if TestCharacters ( 11_Lisa ) = true then
 759: LD_STRING 11_Lisa
 761: PPUSH
 762: CALL_OW 28
 766: PUSH
 767: LD_INT 1
 769: EQUAL
 770: IFFALSE 820
// begin Lisa = PrepareUnit ( Lisa , true , 11_ ) ;
 772: LD_ADDR_EXP 2
 776: PUSH
 777: LD_STRING Lisa
 779: PPUSH
 780: LD_INT 1
 782: PPUSH
 783: LD_STRING 11_
 785: PPUSH
 786: CALL 38209 0 3
 790: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 791: LD_EXP 2
 795: PPUSH
 796: LD_INT 1
 798: PPUSH
 799: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 803: LD_EXP 2
 807: PPUSH
 808: LD_INT 4
 810: PPUSH
 811: LD_INT 0
 813: PPUSH
 814: CALL_OW 49
// end else
 818: GO 836
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 820: LD_INT 4
 822: PPUSH
 823: LD_INT 0
 825: PPUSH
 826: LD_INT 1
 828: PPUSH
 829: LD_INT 0
 831: PPUSH
 832: CALL 1378 0 4
// end ; if TestCharacters ( 11_Donaldson ) = true then
 836: LD_STRING 11_Donaldson
 838: PPUSH
 839: CALL_OW 28
 843: PUSH
 844: LD_INT 1
 846: EQUAL
 847: IFFALSE 897
// begin Donaldson = PrepareUnit ( Donaldson , true , 11_ ) ;
 849: LD_ADDR_EXP 3
 853: PUSH
 854: LD_STRING Donaldson
 856: PPUSH
 857: LD_INT 1
 859: PPUSH
 860: LD_STRING 11_
 862: PPUSH
 863: CALL 38209 0 3
 867: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 868: LD_EXP 3
 872: PPUSH
 873: LD_INT 1
 875: PPUSH
 876: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 880: LD_EXP 3
 884: PPUSH
 885: LD_INT 4
 887: PPUSH
 888: LD_INT 0
 890: PPUSH
 891: CALL_OW 49
// end else
 895: GO 913
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 897: LD_INT 4
 899: PPUSH
 900: LD_INT 0
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: LD_INT 0
 908: PPUSH
 909: CALL 1378 0 4
// end ; if TestCharacters ( 11_Cyrus ) = true then
 913: LD_STRING 11_Cyrus
 915: PPUSH
 916: CALL_OW 28
 920: PUSH
 921: LD_INT 1
 923: EQUAL
 924: IFFALSE 974
// begin Cyrus = PrepareUnit ( Cyrus , true , 11_ ) ;
 926: LD_ADDR_EXP 5
 930: PUSH
 931: LD_STRING Cyrus
 933: PPUSH
 934: LD_INT 1
 936: PPUSH
 937: LD_STRING 11_
 939: PPUSH
 940: CALL 38209 0 3
 944: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 945: LD_EXP 5
 949: PPUSH
 950: LD_INT 1
 952: PPUSH
 953: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 957: LD_EXP 5
 961: PPUSH
 962: LD_INT 4
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end else
 972: GO 990
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 974: LD_INT 4
 976: PPUSH
 977: LD_INT 0
 979: PPUSH
 980: LD_INT 1
 982: PPUSH
 983: LD_INT 0
 985: PPUSH
 986: CALL 1378 0 4
// end ; if TestCharacters ( 11_Denis ) = true then
 990: LD_STRING 11_Denis
 992: PPUSH
 993: CALL_OW 28
 997: PUSH
 998: LD_INT 1
1000: EQUAL
1001: IFFALSE 1051
// begin Denis = PrepareUnit ( Denis , true , 11_ ) ;
1003: LD_ADDR_EXP 6
1007: PUSH
1008: LD_STRING Denis
1010: PPUSH
1011: LD_INT 1
1013: PPUSH
1014: LD_STRING 11_
1016: PPUSH
1017: CALL 38209 0 3
1021: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1022: LD_EXP 6
1026: PPUSH
1027: LD_INT 4
1029: PPUSH
1030: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1034: LD_EXP 6
1038: PPUSH
1039: LD_INT 4
1041: PPUSH
1042: LD_INT 0
1044: PPUSH
1045: CALL_OW 49
// end else
1049: GO 1067
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1051: LD_INT 4
1053: PPUSH
1054: LD_INT 0
1056: PPUSH
1057: LD_INT 1
1059: PPUSH
1060: LD_INT 0
1062: PPUSH
1063: CALL 1378 0 4
// end ; if TestCharacters ( 11_Frank ) = true then
1067: LD_STRING 11_Frank
1069: PPUSH
1070: CALL_OW 28
1074: PUSH
1075: LD_INT 1
1077: EQUAL
1078: IFFALSE 1128
// begin Frank = PrepareUnit ( Frank , true , 11_ ) ;
1080: LD_ADDR_EXP 12
1084: PUSH
1085: LD_STRING Frank
1087: PPUSH
1088: LD_INT 1
1090: PPUSH
1091: LD_STRING 11_
1093: PPUSH
1094: CALL 38209 0 3
1098: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1099: LD_EXP 12
1103: PPUSH
1104: LD_INT 1
1106: PPUSH
1107: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1111: LD_EXP 12
1115: PPUSH
1116: LD_INT 4
1118: PPUSH
1119: LD_INT 0
1121: PPUSH
1122: CALL_OW 49
// end else
1126: GO 1144
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1128: LD_INT 4
1130: PPUSH
1131: LD_INT 0
1133: PPUSH
1134: LD_INT 1
1136: PPUSH
1137: LD_INT 0
1139: PPUSH
1140: CALL 1378 0 4
// end ; if TestCharacters ( 11_Cornell ) = true then
1144: LD_STRING 11_Cornell
1146: PPUSH
1147: CALL_OW 28
1151: PUSH
1152: LD_INT 1
1154: EQUAL
1155: IFFALSE 1205
// begin Cornel = PrepareUnit ( Cornell , true , 11_ ) ;
1157: LD_ADDR_EXP 10
1161: PUSH
1162: LD_STRING Cornell
1164: PPUSH
1165: LD_INT 1
1167: PPUSH
1168: LD_STRING 11_
1170: PPUSH
1171: CALL 38209 0 3
1175: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1176: LD_EXP 10
1180: PPUSH
1181: LD_INT 1
1183: PPUSH
1184: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1188: LD_EXP 10
1192: PPUSH
1193: LD_INT 4
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: CALL_OW 49
// end else
1203: GO 1221
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1205: LD_INT 4
1207: PPUSH
1208: LD_INT 0
1210: PPUSH
1211: LD_INT 1
1213: PPUSH
1214: LD_INT 0
1216: PPUSH
1217: CALL 1378 0 4
// end ; tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: LD_EXP 14
1230: PPUSH
1231: LD_INT 26
1233: PUSH
1234: LD_INT 1
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: PPUSH
1241: CALL_OW 72
1245: ST_TO_ADDR
// if not tmp then
1246: LD_VAR 0 2
1250: NOT
1251: IFFALSE 1280
// begin PrepareSoldier ( sex_male , 8 ) ;
1253: LD_INT 1
1255: PPUSH
1256: LD_INT 8
1258: PPUSH
1259: CALL_OW 381
// PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1263: CALL_OW 44
1267: PPUSH
1268: LD_INT 4
1270: PPUSH
1271: LD_INT 0
1273: PPUSH
1274: CALL_OW 49
// end else
1278: GO 1354
// begin if GetClass ( tmp [ 1 ] ) <> class_soldier then
1280: LD_VAR 0 2
1284: PUSH
1285: LD_INT 1
1287: ARRAY
1288: PPUSH
1289: CALL_OW 257
1293: PUSH
1294: LD_INT 1
1296: NONEQUAL
1297: IFFALSE 1315
// SetClass ( tmp [ 1 ] , class_soldier ) ;
1299: LD_VAR 0 2
1303: PUSH
1304: LD_INT 1
1306: ARRAY
1307: PPUSH
1308: LD_INT 1
1310: PPUSH
1311: CALL_OW 336
// PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1315: LD_VAR 0 2
1319: PUSH
1320: LD_INT 1
1322: ARRAY
1323: PPUSH
1324: LD_INT 4
1326: PPUSH
1327: LD_INT 0
1329: PPUSH
1330: CALL_OW 49
// others11 := others11 diff tmp [ 1 ] ;
1334: LD_ADDR_EXP 14
1338: PUSH
1339: LD_EXP 14
1343: PUSH
1344: LD_VAR 0 2
1348: PUSH
1349: LD_INT 1
1351: ARRAY
1352: DIFF
1353: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ,  ) ;
1354: LD_ADDR_EXP 15
1358: PUSH
1359: LD_STRING Powell
1361: PPUSH
1362: LD_INT 0
1364: PPUSH
1365: LD_STRING 
1367: PPUSH
1368: CALL 38209 0 3
1372: ST_TO_ADDR
// end ;
1373: LD_VAR 0 1
1377: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1378: LD_INT 0
1380: PPUSH
1381: PPUSH
1382: PPUSH
1383: PPUSH
1384: PPUSH
// if mech = 1 then
1385: LD_VAR 0 4
1389: PUSH
1390: LD_INT 1
1392: EQUAL
1393: IFFALSE 1630
// begin if others11 > 0 then
1395: LD_EXP 14
1399: PUSH
1400: LD_INT 0
1402: GREATER
1403: IFFALSE 1570
// begin for i := 1 to others11 - 1 do
1405: LD_ADDR_VAR 0 6
1409: PUSH
1410: DOUBLE
1411: LD_INT 1
1413: DEC
1414: ST_TO_ADDR
1415: LD_EXP 14
1419: PUSH
1420: LD_INT 1
1422: MINUS
1423: PUSH
1424: FOR_TO
1425: IFFALSE 1507
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1427: LD_EXP 14
1431: PUSH
1432: LD_VAR 0 6
1436: ARRAY
1437: PPUSH
1438: LD_INT 3
1440: PPUSH
1441: CALL_OW 259
1445: PUSH
1446: LD_EXP 14
1450: PUSH
1451: LD_VAR 0 6
1455: PUSH
1456: LD_INT 1
1458: PLUS
1459: ARRAY
1460: PPUSH
1461: LD_INT 3
1463: PPUSH
1464: CALL_OW 259
1468: LESS
1469: IFFALSE 1505
// begin mecha = others11 [ i + 1 ] ;
1471: LD_ADDR_VAR 0 9
1475: PUSH
1476: LD_EXP 14
1480: PUSH
1481: LD_VAR 0 6
1485: PUSH
1486: LD_INT 1
1488: PLUS
1489: ARRAY
1490: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1491: LD_VAR 0 9
1495: PPUSH
1496: LD_INT 3
1498: PPUSH
1499: CALL_OW 336
// break ;
1503: GO 1507
// end ; end ;
1505: GO 1424
1507: POP
1508: POP
// if spawnMode = 1 then
1509: LD_VAR 0 3
1513: PUSH
1514: LD_INT 1
1516: EQUAL
1517: IFFALSE 1538
// PlaceUnitArea ( mecha , area , false ) else
1519: LD_VAR 0 9
1523: PPUSH
1524: LD_VAR 0 1
1528: PPUSH
1529: LD_INT 0
1531: PPUSH
1532: CALL_OW 49
1536: GO 1552
// PlaceHumanInUnit ( mecha , veh ) ;
1538: LD_VAR 0 9
1542: PPUSH
1543: LD_VAR 0 2
1547: PPUSH
1548: CALL_OW 52
// others11 = others11 diff mecha ;
1552: LD_ADDR_EXP 14
1556: PUSH
1557: LD_EXP 14
1561: PUSH
1562: LD_VAR 0 9
1566: DIFF
1567: ST_TO_ADDR
// end else
1568: GO 1628
// begin hc_name =  ;
1570: LD_ADDR_OWVAR 26
1574: PUSH
1575: LD_STRING 
1577: ST_TO_ADDR
// hc_gallery =  ;
1578: LD_ADDR_OWVAR 33
1582: PUSH
1583: LD_STRING 
1585: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1586: LD_INT 0
1588: PPUSH
1589: LD_INT 7
1591: PPUSH
1592: LD_INT 9
1594: PPUSH
1595: CALL_OW 12
1599: PPUSH
1600: CALL_OW 383
// un = CreateHuman ;
1604: LD_ADDR_VAR 0 7
1608: PUSH
1609: CALL_OW 44
1613: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1614: LD_VAR 0 7
1618: PPUSH
1619: LD_VAR 0 2
1623: PPUSH
1624: CALL_OW 52
// end ; end else
1628: GO 1799
// begin if others11 > 0 then
1630: LD_EXP 14
1634: PUSH
1635: LD_INT 0
1637: GREATER
1638: IFFALSE 1711
// begin if spawnMode = 1 then
1640: LD_VAR 0 3
1644: PUSH
1645: LD_INT 1
1647: EQUAL
1648: IFFALSE 1673
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1650: LD_EXP 14
1654: PUSH
1655: LD_INT 1
1657: ARRAY
1658: PPUSH
1659: LD_VAR 0 1
1663: PPUSH
1664: LD_INT 0
1666: PPUSH
1667: CALL_OW 49
1671: GO 1691
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1673: LD_EXP 14
1677: PUSH
1678: LD_INT 1
1680: ARRAY
1681: PPUSH
1682: LD_VAR 0 2
1686: PPUSH
1687: CALL_OW 52
// others11 = Delete ( others11 , 1 ) ;
1691: LD_ADDR_EXP 14
1695: PUSH
1696: LD_EXP 14
1700: PPUSH
1701: LD_INT 1
1703: PPUSH
1704: CALL_OW 3
1708: ST_TO_ADDR
// end else
1709: GO 1799
// begin hc_name =  ;
1711: LD_ADDR_OWVAR 26
1715: PUSH
1716: LD_STRING 
1718: ST_TO_ADDR
// hc_gallery =  ;
1719: LD_ADDR_OWVAR 33
1723: PUSH
1724: LD_STRING 
1726: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1727: LD_INT 0
1729: PPUSH
1730: LD_INT 1
1732: PUSH
1733: LD_INT 2
1735: PUSH
1736: LD_INT 3
1738: PUSH
1739: LD_INT 4
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 1
1750: PPUSH
1751: LD_INT 4
1753: PPUSH
1754: CALL_OW 12
1758: ARRAY
1759: PPUSH
1760: LD_INT 7
1762: PPUSH
1763: LD_INT 9
1765: PPUSH
1766: CALL_OW 12
1770: PPUSH
1771: CALL_OW 380
// un = CreateHuman ;
1775: LD_ADDR_VAR 0 7
1779: PUSH
1780: CALL_OW 44
1784: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1785: LD_VAR 0 7
1789: PPUSH
1790: LD_VAR 0 2
1794: PPUSH
1795: CALL_OW 52
// end ; end ; end ;
1799: LD_VAR 0 5
1803: RET
// export function PrepareVehicles ; var veh ; begin
1804: LD_INT 0
1806: PPUSH
1807: PPUSH
// uc_side := 1 ;
1808: LD_ADDR_OWVAR 20
1812: PUSH
1813: LD_INT 1
1815: ST_TO_ADDR
// uc_nation := 1 ;
1816: LD_ADDR_OWVAR 21
1820: PUSH
1821: LD_INT 1
1823: ST_TO_ADDR
// vc_chassis := us_medium_tracked ;
1824: LD_ADDR_OWVAR 37
1828: PUSH
1829: LD_INT 3
1831: ST_TO_ADDR
// vc_engine := engine_siberite ;
1832: LD_ADDR_OWVAR 39
1836: PUSH
1837: LD_INT 3
1839: ST_TO_ADDR
// vc_control := control_computer ;
1840: LD_ADDR_OWVAR 38
1844: PUSH
1845: LD_INT 3
1847: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1848: LD_ADDR_OWVAR 40
1852: PUSH
1853: LD_INT 4
1855: ST_TO_ADDR
// veh := CreateVehicle ;
1856: LD_ADDR_VAR 0 2
1860: PUSH
1861: CALL_OW 45
1865: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1866: LD_VAR 0 2
1870: PPUSH
1871: LD_INT 4
1873: PPUSH
1874: LD_INT 0
1876: PPUSH
1877: CALL_OW 49
// vc_weapon := us_double_gun ;
1881: LD_ADDR_OWVAR 40
1885: PUSH
1886: LD_INT 5
1888: ST_TO_ADDR
// vc_control := control_manual ;
1889: LD_ADDR_OWVAR 38
1893: PUSH
1894: LD_INT 1
1896: ST_TO_ADDR
// veh := CreateVehicle ;
1897: LD_ADDR_VAR 0 2
1901: PUSH
1902: CALL_OW 45
1906: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1907: LD_VAR 0 2
1911: PPUSH
1912: LD_INT 4
1914: PPUSH
1915: LD_INT 0
1917: PPUSH
1918: CALL_OW 49
// vc_weapon := us_light_gun ;
1922: LD_ADDR_OWVAR 40
1926: PUSH
1927: LD_INT 3
1929: ST_TO_ADDR
// vc_control := control_computer ;
1930: LD_ADDR_OWVAR 38
1934: PUSH
1935: LD_INT 3
1937: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1938: LD_ADDR_OWVAR 37
1942: PUSH
1943: LD_INT 2
1945: ST_TO_ADDR
// veh := CreateVehicle ;
1946: LD_ADDR_VAR 0 2
1950: PUSH
1951: CALL_OW 45
1955: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1956: LD_VAR 0 2
1960: PPUSH
1961: LD_INT 4
1963: PPUSH
1964: LD_INT 0
1966: PPUSH
1967: CALL_OW 49
// vc_weapon := us_gatling_gun ;
1971: LD_ADDR_OWVAR 40
1975: PUSH
1976: LD_INT 4
1978: ST_TO_ADDR
// veh := CreateVehicle ;
1979: LD_ADDR_VAR 0 2
1983: PUSH
1984: CALL_OW 45
1988: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1989: LD_VAR 0 2
1993: PPUSH
1994: LD_INT 4
1996: PPUSH
1997: LD_INT 0
1999: PPUSH
2000: CALL_OW 49
// end ;
2004: LD_VAR 0 1
2008: RET
// export function PowellSupport1 ; var veh , un ; begin
2009: LD_INT 0
2011: PPUSH
2012: PPUSH
2013: PPUSH
// uc_side := 1 ;
2014: LD_ADDR_OWVAR 20
2018: PUSH
2019: LD_INT 1
2021: ST_TO_ADDR
// uc_nation := 1 ;
2022: LD_ADDR_OWVAR 21
2026: PUSH
2027: LD_INT 1
2029: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) then
2030: LD_STRING 11_Brown
2032: PPUSH
2033: CALL_OW 28
2037: IFFALSE 2087
// begin Brown := PrepareUnit ( Brown , true , 11_ ) ;
2039: LD_ADDR_EXP 7
2043: PUSH
2044: LD_STRING Brown
2046: PPUSH
2047: LD_INT 1
2049: PPUSH
2050: LD_STRING 11_
2052: PPUSH
2053: CALL 38209 0 3
2057: ST_TO_ADDR
// SetClass ( Brown , class_engineer ) ;
2058: LD_EXP 7
2062: PPUSH
2063: LD_INT 2
2065: PPUSH
2066: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
2070: LD_EXP 7
2074: PPUSH
2075: LD_INT 4
2077: PPUSH
2078: LD_INT 0
2080: PPUSH
2081: CALL_OW 49
// end else
2085: GO 2103
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2087: LD_INT 4
2089: PPUSH
2090: LD_INT 0
2092: PPUSH
2093: LD_INT 1
2095: PPUSH
2096: LD_INT 0
2098: PPUSH
2099: CALL 1378 0 4
// if TestCharacters ( 11_Gary ) then
2103: LD_STRING 11_Gary
2105: PPUSH
2106: CALL_OW 28
2110: IFFALSE 2160
// begin Gary := PrepareUnit ( Gary , true , 11_ ) ;
2112: LD_ADDR_EXP 11
2116: PUSH
2117: LD_STRING Gary
2119: PPUSH
2120: LD_INT 1
2122: PPUSH
2123: LD_STRING 11_
2125: PPUSH
2126: CALL 38209 0 3
2130: ST_TO_ADDR
// SetClass ( Gary , class_engineer ) ;
2131: LD_EXP 11
2135: PPUSH
2136: LD_INT 2
2138: PPUSH
2139: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2143: LD_EXP 11
2147: PPUSH
2148: LD_INT 4
2150: PPUSH
2151: LD_INT 0
2153: PPUSH
2154: CALL_OW 49
// end else
2158: GO 2176
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2160: LD_INT 4
2162: PPUSH
2163: LD_INT 0
2165: PPUSH
2166: LD_INT 1
2168: PPUSH
2169: LD_INT 0
2171: PPUSH
2172: CALL 1378 0 4
// vc_chassis := us_medium_tracked ;
2176: LD_ADDR_OWVAR 37
2180: PUSH
2181: LD_INT 3
2183: ST_TO_ADDR
// vc_engine := engine_siberite ;
2184: LD_ADDR_OWVAR 39
2188: PUSH
2189: LD_INT 3
2191: ST_TO_ADDR
// vc_control := control_manual ;
2192: LD_ADDR_OWVAR 38
2196: PUSH
2197: LD_INT 1
2199: ST_TO_ADDR
// vc_weapon := us_crane ;
2200: LD_ADDR_OWVAR 40
2204: PUSH
2205: LD_INT 13
2207: ST_TO_ADDR
// veh := CreateVehicle ;
2208: LD_ADDR_VAR 0 2
2212: PUSH
2213: CALL_OW 45
2217: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2218: LD_VAR 0 2
2222: PPUSH
2223: LD_INT 4
2225: PPUSH
2226: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2230: LD_VAR 0 2
2234: PPUSH
2235: LD_INT 4
2237: PPUSH
2238: LD_INT 0
2240: PPUSH
2241: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2245: LD_INT 4
2247: PPUSH
2248: LD_VAR 0 2
2252: PPUSH
2253: LD_INT 2
2255: PPUSH
2256: LD_INT 1
2258: PPUSH
2259: CALL 1378 0 4
// vc_weapon := us_laser ;
2263: LD_ADDR_OWVAR 40
2267: PUSH
2268: LD_INT 9
2270: ST_TO_ADDR
// veh := CreateVehicle ;
2271: LD_ADDR_VAR 0 2
2275: PUSH
2276: CALL_OW 45
2280: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2281: LD_VAR 0 2
2285: PPUSH
2286: LD_INT 4
2288: PPUSH
2289: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2293: LD_VAR 0 2
2297: PPUSH
2298: LD_INT 4
2300: PPUSH
2301: LD_INT 0
2303: PPUSH
2304: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2308: LD_INT 4
2310: PPUSH
2311: LD_VAR 0 2
2315: PPUSH
2316: LD_INT 2
2318: PPUSH
2319: LD_INT 1
2321: PPUSH
2322: CALL 1378 0 4
// vc_control := control_computer ;
2326: LD_ADDR_OWVAR 38
2330: PUSH
2331: LD_INT 3
2333: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2334: LD_ADDR_OWVAR 40
2338: PUSH
2339: LD_INT 12
2341: ST_TO_ADDR
// veh := CreateVehicle ;
2342: LD_ADDR_VAR 0 2
2346: PUSH
2347: CALL_OW 45
2351: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2352: LD_VAR 0 2
2356: PPUSH
2357: LD_INT 17
2359: PPUSH
2360: CALL_OW 109
// SetDir ( veh , 4 ) ;
2364: LD_VAR 0 2
2368: PPUSH
2369: LD_INT 4
2371: PPUSH
2372: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2376: LD_VAR 0 2
2380: PPUSH
2381: LD_INT 4
2383: PPUSH
2384: LD_INT 0
2386: PPUSH
2387: CALL_OW 49
// AddCargo ( veh , mat_siberit , 100 ) ;
2391: LD_VAR 0 2
2395: PPUSH
2396: LD_INT 3
2398: PPUSH
2399: LD_INT 100
2401: PPUSH
2402: CALL_OW 291
// veh := CreateVehicle ;
2406: LD_ADDR_VAR 0 2
2410: PUSH
2411: CALL_OW 45
2415: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2416: LD_VAR 0 2
2420: PPUSH
2421: LD_INT 17
2423: PPUSH
2424: CALL_OW 109
// SetDir ( veh , 4 ) ;
2428: LD_VAR 0 2
2432: PPUSH
2433: LD_INT 4
2435: PPUSH
2436: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2440: LD_VAR 0 2
2444: PPUSH
2445: LD_INT 4
2447: PPUSH
2448: LD_INT 0
2450: PPUSH
2451: CALL_OW 49
// AddCargo ( veh , mat_siberit , 20 ) ;
2455: LD_VAR 0 2
2459: PPUSH
2460: LD_INT 3
2462: PPUSH
2463: LD_INT 20
2465: PPUSH
2466: CALL_OW 291
// AddCargo ( veh , mat_cans , 80 ) ;
2470: LD_VAR 0 2
2474: PPUSH
2475: LD_INT 1
2477: PPUSH
2478: LD_INT 80
2480: PPUSH
2481: CALL_OW 291
// end ;
2485: LD_VAR 0 1
2489: RET
// export function PowellSupport2 ; var veh , un ; begin
2490: LD_INT 0
2492: PPUSH
2493: PPUSH
2494: PPUSH
// uc_side := 1 ;
2495: LD_ADDR_OWVAR 20
2499: PUSH
2500: LD_INT 1
2502: ST_TO_ADDR
// uc_nation := 1 ;
2503: LD_ADDR_OWVAR 21
2507: PUSH
2508: LD_INT 1
2510: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2511: LD_ADDR_OWVAR 37
2515: PUSH
2516: LD_INT 2
2518: ST_TO_ADDR
// vc_engine := engine_siberite ;
2519: LD_ADDR_OWVAR 39
2523: PUSH
2524: LD_INT 3
2526: ST_TO_ADDR
// vc_control := control_computer ;
2527: LD_ADDR_OWVAR 38
2531: PUSH
2532: LD_INT 3
2534: ST_TO_ADDR
// vc_weapon := us_light_gun ;
2535: LD_ADDR_OWVAR 40
2539: PUSH
2540: LD_INT 3
2542: ST_TO_ADDR
// veh := CreateVehicle ;
2543: LD_ADDR_VAR 0 2
2547: PUSH
2548: CALL_OW 45
2552: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2553: LD_VAR 0 2
2557: PPUSH
2558: LD_INT 4
2560: PPUSH
2561: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2565: LD_VAR 0 2
2569: PPUSH
2570: LD_INT 4
2572: PPUSH
2573: LD_INT 0
2575: PPUSH
2576: CALL_OW 49
// vc_control := control_manual ;
2580: LD_ADDR_OWVAR 38
2584: PUSH
2585: LD_INT 1
2587: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2588: LD_ADDR_OWVAR 37
2592: PUSH
2593: LD_INT 2
2595: ST_TO_ADDR
// vc_weapon := us_double_gun ;
2596: LD_ADDR_OWVAR 40
2600: PUSH
2601: LD_INT 5
2603: ST_TO_ADDR
// veh := CreateVehicle ;
2604: LD_ADDR_VAR 0 2
2608: PUSH
2609: CALL_OW 45
2613: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2614: LD_VAR 0 2
2618: PPUSH
2619: LD_INT 4
2621: PPUSH
2622: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2626: LD_VAR 0 2
2630: PPUSH
2631: LD_INT 4
2633: PPUSH
2634: LD_INT 0
2636: PPUSH
2637: CALL_OW 49
// if TestCharacters ( 11_Bobby ) then
2641: LD_STRING 11_Bobby
2643: PPUSH
2644: CALL_OW 28
2648: IFFALSE 2697
// begin Bobby := PrepareUnit ( Bobby , true , 11_ ) ;
2650: LD_ADDR_EXP 4
2654: PUSH
2655: LD_STRING Bobby
2657: PPUSH
2658: LD_INT 1
2660: PPUSH
2661: LD_STRING 11_
2663: PPUSH
2664: CALL 38209 0 3
2668: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2669: LD_EXP 4
2673: PPUSH
2674: LD_INT 3
2676: PPUSH
2677: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2681: LD_EXP 4
2685: PPUSH
2686: LD_VAR 0 2
2690: PPUSH
2691: CALL_OW 52
// end else
2695: GO 2715
// PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2697: LD_INT 0
2699: PPUSH
2700: LD_VAR 0 2
2704: PPUSH
2705: LD_INT 2
2707: PPUSH
2708: LD_INT 0
2710: PPUSH
2711: CALL 1378 0 4
// if TestCharacters ( 11_Houten ) then
2715: LD_STRING 11_Houten
2717: PPUSH
2718: CALL_OW 28
2722: IFFALSE 2772
// begin Houten := PrepareUnit ( Houten , true , 11_ ) ;
2724: LD_ADDR_EXP 9
2728: PUSH
2729: LD_STRING Houten
2731: PPUSH
2732: LD_INT 1
2734: PPUSH
2735: LD_STRING 11_
2737: PPUSH
2738: CALL 38209 0 3
2742: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2743: LD_EXP 9
2747: PPUSH
2748: LD_INT 1
2750: PPUSH
2751: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2755: LD_EXP 9
2759: PPUSH
2760: LD_INT 4
2762: PPUSH
2763: LD_INT 0
2765: PPUSH
2766: CALL_OW 49
// end else
2770: GO 2788
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2772: LD_INT 4
2774: PPUSH
2775: LD_INT 0
2777: PPUSH
2778: LD_INT 1
2780: PPUSH
2781: LD_INT 0
2783: PPUSH
2784: CALL 1378 0 4
// vc_control := control_computer ;
2788: LD_ADDR_OWVAR 38
2792: PUSH
2793: LD_INT 3
2795: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2796: LD_ADDR_OWVAR 40
2800: PUSH
2801: LD_INT 12
2803: ST_TO_ADDR
// veh := CreateVehicle ;
2804: LD_ADDR_VAR 0 2
2808: PUSH
2809: CALL_OW 45
2813: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2814: LD_VAR 0 2
2818: PPUSH
2819: LD_INT 4
2821: PPUSH
2822: CALL_OW 233
// SetTag ( veh , 17 ) ;
2826: LD_VAR 0 2
2830: PPUSH
2831: LD_INT 17
2833: PPUSH
2834: CALL_OW 109
// AddCargo ( veh , mat_cans , 100 ) ;
2838: LD_VAR 0 2
2842: PPUSH
2843: LD_INT 1
2845: PPUSH
2846: LD_INT 100
2848: PPUSH
2849: CALL_OW 291
// veh := CreateVehicle ;
2853: LD_ADDR_VAR 0 2
2857: PUSH
2858: CALL_OW 45
2862: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2863: LD_VAR 0 2
2867: PPUSH
2868: LD_INT 4
2870: PPUSH
2871: CALL_OW 233
// SetTag ( veh , 17 ) ;
2875: LD_VAR 0 2
2879: PPUSH
2880: LD_INT 17
2882: PPUSH
2883: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2887: LD_VAR 0 2
2891: PPUSH
2892: LD_INT 4
2894: PPUSH
2895: LD_INT 0
2897: PPUSH
2898: CALL_OW 49
// if kurtStatus then
2902: LD_EXP 19
2906: IFFALSE 2925
// AddCargo ( veh , mat_cans , 100 ) else
2908: LD_VAR 0 2
2912: PPUSH
2913: LD_INT 1
2915: PPUSH
2916: LD_INT 100
2918: PPUSH
2919: CALL_OW 291
2923: GO 2940
// AddCargo ( veh , mat_siberit , 60 ) ;
2925: LD_VAR 0 2
2929: PPUSH
2930: LD_INT 3
2932: PPUSH
2933: LD_INT 60
2935: PPUSH
2936: CALL_OW 291
// veh := CreateVehicle ;
2940: LD_ADDR_VAR 0 2
2944: PUSH
2945: CALL_OW 45
2949: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2950: LD_VAR 0 2
2954: PPUSH
2955: LD_INT 4
2957: PPUSH
2958: CALL_OW 233
// SetTag ( veh , 17 ) ;
2962: LD_VAR 0 2
2966: PPUSH
2967: LD_INT 17
2969: PPUSH
2970: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2974: LD_VAR 0 2
2978: PPUSH
2979: LD_INT 4
2981: PPUSH
2982: LD_INT 0
2984: PPUSH
2985: CALL_OW 49
// if kurtStatus then
2989: LD_EXP 19
2993: IFFALSE 3012
// AddCargo ( veh , mat_siberit , 80 ) else
2995: LD_VAR 0 2
2999: PPUSH
3000: LD_INT 3
3002: PPUSH
3003: LD_INT 80
3005: PPUSH
3006: CALL_OW 291
3010: GO 3027
// AddCargo ( veh , mat_siberit , 100 ) ;
3012: LD_VAR 0 2
3016: PPUSH
3017: LD_INT 3
3019: PPUSH
3020: LD_INT 100
3022: PPUSH
3023: CALL_OW 291
// veh := CreateVehicle ;
3027: LD_ADDR_VAR 0 2
3031: PUSH
3032: CALL_OW 45
3036: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3037: LD_VAR 0 2
3041: PPUSH
3042: LD_INT 4
3044: PPUSH
3045: CALL_OW 233
// SetTag ( veh , 17 ) ;
3049: LD_VAR 0 2
3053: PPUSH
3054: LD_INT 17
3056: PPUSH
3057: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
3061: LD_VAR 0 2
3065: PPUSH
3066: LD_INT 4
3068: PPUSH
3069: LD_INT 0
3071: PPUSH
3072: CALL_OW 49
// AddCargo ( veh , mat_oil , 60 ) ;
3076: LD_VAR 0 2
3080: PPUSH
3081: LD_INT 2
3083: PPUSH
3084: LD_INT 60
3086: PPUSH
3087: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
3091: LD_VAR 0 2
3095: PPUSH
3096: LD_INT 1
3098: PPUSH
3099: LD_INT 40
3101: PPUSH
3102: CALL_OW 291
// end ;
3106: LD_VAR 0 1
3110: RET
// export function PowellSupport3 ; var i , cargo ; begin
3111: LD_INT 0
3113: PPUSH
3114: PPUSH
3115: PPUSH
// uc_side := 1 ;
3116: LD_ADDR_OWVAR 20
3120: PUSH
3121: LD_INT 1
3123: ST_TO_ADDR
// uc_nation := 1 ;
3124: LD_ADDR_OWVAR 21
3128: PUSH
3129: LD_INT 1
3131: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3132: LD_INT 4
3134: PPUSH
3135: LD_INT 0
3137: PPUSH
3138: LD_INT 1
3140: PPUSH
3141: LD_INT 0
3143: PPUSH
3144: CALL 1378 0 4
// for i := 1 to 2 do
3148: LD_ADDR_VAR 0 2
3152: PUSH
3153: DOUBLE
3154: LD_INT 1
3156: DEC
3157: ST_TO_ADDR
3158: LD_INT 2
3160: PUSH
3161: FOR_TO
3162: IFFALSE 3262
// begin vc_chassis := us_medium_wheeled ;
3164: LD_ADDR_OWVAR 37
3168: PUSH
3169: LD_INT 2
3171: ST_TO_ADDR
// vc_engine := engine_siberite ;
3172: LD_ADDR_OWVAR 39
3176: PUSH
3177: LD_INT 3
3179: ST_TO_ADDR
// vc_control = control_computer ;
3180: LD_ADDR_OWVAR 38
3184: PUSH
3185: LD_INT 3
3187: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
3188: LD_ADDR_OWVAR 40
3192: PUSH
3193: LD_INT 12
3195: ST_TO_ADDR
// cargo := CreateVehicle ;
3196: LD_ADDR_VAR 0 3
3200: PUSH
3201: CALL_OW 45
3205: ST_TO_ADDR
// SetDir ( cargo , 4 ) ;
3206: LD_VAR 0 3
3210: PPUSH
3211: LD_INT 4
3213: PPUSH
3214: CALL_OW 233
// SetTag ( cargo , 17 ) ;
3218: LD_VAR 0 3
3222: PPUSH
3223: LD_INT 17
3225: PPUSH
3226: CALL_OW 109
// PlaceUnitArea ( cargo , PlayerSpawn , false ) ;
3230: LD_VAR 0 3
3234: PPUSH
3235: LD_INT 4
3237: PPUSH
3238: LD_INT 0
3240: PPUSH
3241: CALL_OW 49
// AddCargo ( cargo , mat_cans , 100 ) ;
3245: LD_VAR 0 3
3249: PPUSH
3250: LD_INT 1
3252: PPUSH
3253: LD_INT 100
3255: PPUSH
3256: CALL_OW 291
// end ;
3260: GO 3161
3262: POP
3263: POP
// end ; end_of_file
3264: LD_VAR 0 1
3268: RET
// export function PrepareRussianCommander ; begin
3269: LD_INT 0
3271: PPUSH
// uc_side = 3 ;
3272: LD_ADDR_OWVAR 20
3276: PUSH
3277: LD_INT 3
3279: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ,  ) ;
3280: LD_ADDR_EXP 16
3284: PUSH
3285: LD_STRING Davidov
3287: PPUSH
3288: LD_INT 0
3290: PPUSH
3291: LD_STRING 
3293: PPUSH
3294: CALL 38209 0 3
3298: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3299: LD_EXP 16
3303: PPUSH
3304: LD_INT 3
3306: PPUSH
3307: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
3311: LD_ADDR_EXP 27
3315: PUSH
3316: LD_EXP 27
3320: PUSH
3321: LD_EXP 16
3325: ADD
3326: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3327: LD_EXP 27
3331: PPUSH
3332: LD_INT 4
3334: PPUSH
3335: CALL_OW 336
// end ;
3339: LD_VAR 0 1
3343: RET
// export function PrepareEastBase ; var i , un ; begin
3344: LD_INT 0
3346: PPUSH
3347: PPUSH
3348: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3349: LD_INT 3
3351: PPUSH
3352: LD_INT 3
3354: PPUSH
3355: LD_INT 121
3357: PPUSH
3358: LD_EXP 29
3362: PPUSH
3363: LD_EXP 30
3367: PPUSH
3368: CALL_OW 12
3372: PPUSH
3373: LD_INT 1
3375: PPUSH
3376: LD_INT 3
3378: PPUSH
3379: CALL 12587 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3383: LD_INT 3
3385: PPUSH
3386: LD_INT 3
3388: PPUSH
3389: LD_INT 121
3391: PPUSH
3392: LD_EXP 29
3396: PPUSH
3397: LD_EXP 30
3401: PPUSH
3402: CALL_OW 12
3406: PPUSH
3407: LD_INT 9
3409: PPUSH
3410: LD_INT 3
3412: PPUSH
3413: CALL 12587 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3417: LD_INT 3
3419: PPUSH
3420: LD_INT 3
3422: PPUSH
3423: LD_INT 4
3425: PPUSH
3426: LD_EXP 29
3430: PPUSH
3431: LD_EXP 30
3435: PPUSH
3436: CALL_OW 12
3440: PPUSH
3441: LD_INT 2
3443: PPUSH
3444: LD_INT 6
3446: PPUSH
3447: CALL 12587 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3451: LD_INT 3
3453: PPUSH
3454: LD_INT 3
3456: PPUSH
3457: LD_INT 112
3459: PPUSH
3460: LD_EXP 29
3464: PPUSH
3465: LD_EXP 30
3469: PPUSH
3470: CALL_OW 12
3474: PPUSH
3475: LD_INT 3
3477: PPUSH
3478: LD_INT 6
3480: PPUSH
3481: CALL 12587 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3485: LD_INT 3
3487: PPUSH
3488: LD_INT 3
3490: PPUSH
3491: LD_INT 47
3493: PPUSH
3494: LD_EXP 29
3498: PPUSH
3499: LD_EXP 30
3503: PPUSH
3504: CALL_OW 12
3508: PPUSH
3509: LD_INT 4
3511: PPUSH
3512: LD_INT 6
3514: PPUSH
3515: CALL 12587 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3519: LD_INT 3
3521: PPUSH
3522: LD_INT 3
3524: PPUSH
3525: LD_INT 129
3527: PPUSH
3528: LD_EXP 29
3532: PPUSH
3533: LD_EXP 30
3537: PPUSH
3538: CALL_OW 12
3542: PPUSH
3543: LD_INT 4
3545: PPUSH
3546: LD_INT 6
3548: PPUSH
3549: CALL 12587 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3553: LD_INT 3
3555: PPUSH
3556: LD_INT 3
3558: PPUSH
3559: LD_INT 135
3561: PPUSH
3562: LD_EXP 29
3566: PPUSH
3567: LD_EXP 30
3571: PPUSH
3572: CALL_OW 12
3576: PPUSH
3577: LD_INT 4
3579: PPUSH
3580: LD_INT 6
3582: PPUSH
3583: CALL 12587 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3587: LD_ADDR_VAR 0 2
3591: PUSH
3592: LD_INT 22
3594: PUSH
3595: LD_INT 3
3597: PUSH
3598: EMPTY
3599: LIST
3600: LIST
3601: PUSH
3602: LD_INT 30
3604: PUSH
3605: LD_INT 32
3607: PUSH
3608: EMPTY
3609: LIST
3610: LIST
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: PPUSH
3616: CALL_OW 69
3620: PUSH
3621: FOR_IN
3622: IFFALSE 3662
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3624: LD_INT 3
3626: PPUSH
3627: LD_INT 3
3629: PPUSH
3630: LD_VAR 0 2
3634: PPUSH
3635: LD_EXP 29
3639: PPUSH
3640: LD_EXP 30
3644: PPUSH
3645: CALL_OW 12
3649: PPUSH
3650: LD_INT 1
3652: PPUSH
3653: LD_INT 1
3655: PPUSH
3656: CALL 12587 0 6
3660: GO 3621
3662: POP
3663: POP
// for i = 1 to 5 do
3664: LD_ADDR_VAR 0 2
3668: PUSH
3669: DOUBLE
3670: LD_INT 1
3672: DEC
3673: ST_TO_ADDR
3674: LD_INT 5
3676: PUSH
3677: FOR_TO
3678: IFFALSE 3777
// begin uc_side = 3 ;
3680: LD_ADDR_OWVAR 20
3684: PUSH
3685: LD_INT 3
3687: ST_TO_ADDR
// uc_nation = 3 ;
3688: LD_ADDR_OWVAR 21
3692: PUSH
3693: LD_INT 3
3695: ST_TO_ADDR
// hc_gallery =  ;
3696: LD_ADDR_OWVAR 33
3700: PUSH
3701: LD_STRING 
3703: ST_TO_ADDR
// hc_name =  ;
3704: LD_ADDR_OWVAR 26
3708: PUSH
3709: LD_STRING 
3711: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3712: LD_INT 0
3714: PPUSH
3715: LD_INT 4
3717: PPUSH
3718: LD_EXP 29
3722: PPUSH
3723: LD_EXP 30
3727: PPUSH
3728: CALL_OW 12
3732: PPUSH
3733: CALL_OW 380
// un = CreateHuman ;
3737: LD_ADDR_VAR 0 3
3741: PUSH
3742: CALL_OW 44
3746: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3747: LD_VAR 0 3
3751: PPUSH
3752: LD_INT 3
3754: PPUSH
3755: CALL_OW 52
// RuScientists = RuScientists ^ un ;
3759: LD_ADDR_EXP 27
3763: PUSH
3764: LD_EXP 27
3768: PUSH
3769: LD_VAR 0 3
3773: ADD
3774: ST_TO_ADDR
// end ;
3775: GO 3677
3777: POP
3778: POP
// end ;
3779: LD_VAR 0 1
3783: RET
// export function PrepareWestBase ; var i , un ; begin
3784: LD_INT 0
3786: PPUSH
3787: PPUSH
3788: PPUSH
// TeleportExit ( ruteleprt , 122 , 145 ) ;
3789: LD_INT 10
3791: PPUSH
3792: LD_INT 122
3794: PPUSH
3795: LD_INT 145
3797: PPUSH
3798: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
3802: LD_INT 137
3804: PPUSH
3805: LD_INT 84
3807: PPUSH
3808: LD_INT 61
3810: PPUSH
3811: CALL_OW 243
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3815: LD_INT 3
3817: PPUSH
3818: LD_INT 3
3820: PPUSH
3821: LD_INT 6
3823: PPUSH
3824: LD_EXP 29
3828: PPUSH
3829: LD_EXP 30
3833: PPUSH
3834: CALL_OW 12
3838: PPUSH
3839: LD_INT 2
3841: PPUSH
3842: LD_INT 3
3844: PPUSH
3845: CALL 12587 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3849: LD_INT 3
3851: PPUSH
3852: LD_INT 3
3854: PPUSH
3855: LD_INT 91
3857: PPUSH
3858: LD_EXP 29
3862: PPUSH
3863: LD_EXP 30
3867: PPUSH
3868: CALL_OW 12
3872: PPUSH
3873: LD_INT 4
3875: PPUSH
3876: LD_INT 3
3878: PPUSH
3879: CALL 12587 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3883: LD_INT 3
3885: PPUSH
3886: LD_INT 3
3888: PPUSH
3889: LD_INT 21
3891: PPUSH
3892: LD_EXP 29
3896: PPUSH
3897: LD_EXP 30
3901: PPUSH
3902: CALL_OW 12
3906: PPUSH
3907: LD_INT 3
3909: PPUSH
3910: LD_INT 6
3912: PPUSH
3913: CALL 12587 0 6
// end ;
3917: LD_VAR 0 1
3921: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3922: LD_INT 0
3924: PPUSH
3925: PPUSH
3926: PPUSH
3927: PPUSH
// uc_side = 3 ;
3928: LD_ADDR_OWVAR 20
3932: PUSH
3933: LD_INT 3
3935: ST_TO_ADDR
// uc_nation = 3 ;
3936: LD_ADDR_OWVAR 21
3940: PUSH
3941: LD_INT 3
3943: ST_TO_ADDR
// for i = 1 to 5 do
3944: LD_ADDR_VAR 0 2
3948: PUSH
3949: DOUBLE
3950: LD_INT 1
3952: DEC
3953: ST_TO_ADDR
3954: LD_INT 5
3956: PUSH
3957: FOR_TO
3958: IFFALSE 4028
// begin hc_gallery =  ;
3960: LD_ADDR_OWVAR 33
3964: PUSH
3965: LD_STRING 
3967: ST_TO_ADDR
// hc_name =  ;
3968: LD_ADDR_OWVAR 26
3972: PUSH
3973: LD_STRING 
3975: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3976: LD_INT 0
3978: PPUSH
3979: LD_INT 9
3981: PPUSH
3982: LD_EXP 29
3986: PPUSH
3987: LD_EXP 30
3991: PPUSH
3992: CALL_OW 12
3996: PPUSH
3997: CALL_OW 380
// un = CreateHuman ;
4001: LD_ADDR_VAR 0 3
4005: PUSH
4006: CALL_OW 44
4010: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4011: LD_VAR 0 3
4015: PPUSH
4016: LD_INT 8
4018: PPUSH
4019: LD_INT 0
4021: PPUSH
4022: CALL_OW 49
// end ;
4026: GO 3957
4028: POP
4029: POP
// for i = 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4030: LD_ADDR_VAR 0 2
4034: PUSH
4035: DOUBLE
4036: LD_INT 1
4038: DEC
4039: ST_TO_ADDR
4040: LD_INT 2
4042: PUSH
4043: LD_INT 3
4045: PUSH
4046: LD_INT 4
4048: PUSH
4049: LD_INT 4
4051: PUSH
4052: EMPTY
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: PUSH
4058: LD_OWVAR 67
4062: ARRAY
4063: PUSH
4064: FOR_TO
4065: IFFALSE 4135
// begin hc_gallery =  ;
4067: LD_ADDR_OWVAR 33
4071: PUSH
4072: LD_STRING 
4074: ST_TO_ADDR
// hc_name =  ;
4075: LD_ADDR_OWVAR 26
4079: PUSH
4080: LD_STRING 
4082: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4083: LD_INT 0
4085: PPUSH
4086: LD_INT 4
4088: PPUSH
4089: LD_EXP 29
4093: PPUSH
4094: LD_EXP 30
4098: PPUSH
4099: CALL_OW 12
4103: PPUSH
4104: CALL_OW 380
// un = CreateHuman ;
4108: LD_ADDR_VAR 0 3
4112: PUSH
4113: CALL_OW 44
4117: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4118: LD_VAR 0 3
4122: PPUSH
4123: LD_INT 8
4125: PPUSH
4126: LD_INT 0
4128: PPUSH
4129: CALL_OW 49
// end ;
4133: GO 4064
4135: POP
4136: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4137: LD_ADDR_VAR 0 2
4141: PUSH
4142: DOUBLE
4143: LD_INT 1
4145: DEC
4146: ST_TO_ADDR
4147: LD_INT 3
4149: PUSH
4150: LD_INT 4
4152: PUSH
4153: LD_INT 5
4155: PUSH
4156: LD_INT 5
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: PUSH
4165: LD_OWVAR 67
4169: ARRAY
4170: PUSH
4171: FOR_TO
4172: IFFALSE 4368
// begin vc_engine = 3 ;
4174: LD_ADDR_OWVAR 39
4178: PUSH
4179: LD_INT 3
4181: ST_TO_ADDR
// vc_control = 1 ;
4182: LD_ADDR_OWVAR 38
4186: PUSH
4187: LD_INT 1
4189: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
4190: LD_ADDR_OWVAR 40
4194: PUSH
4195: LD_INT 42
4197: PUSH
4198: LD_INT 43
4200: PUSH
4201: LD_INT 44
4203: PUSH
4204: LD_INT 45
4206: PUSH
4207: LD_INT 46
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: LIST
4214: LIST
4215: LIST
4216: PUSH
4217: LD_INT 1
4219: PPUSH
4220: LD_INT 5
4222: PPUSH
4223: CALL_OW 12
4227: ARRAY
4228: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4229: LD_OWVAR 40
4233: PUSH
4234: LD_INT 46
4236: EQUAL
4237: IFFALSE 4249
// vc_chassis = ru_heavy_tracked else
4239: LD_ADDR_OWVAR 37
4243: PUSH
4244: LD_INT 24
4246: ST_TO_ADDR
4247: GO 4276
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4249: LD_ADDR_OWVAR 37
4253: PUSH
4254: LD_INT 22
4256: PUSH
4257: LD_INT 21
4259: PUSH
4260: EMPTY
4261: LIST
4262: LIST
4263: PUSH
4264: LD_INT 1
4266: PPUSH
4267: LD_INT 2
4269: PPUSH
4270: CALL_OW 12
4274: ARRAY
4275: ST_TO_ADDR
// veh = CreateVehicle ;
4276: LD_ADDR_VAR 0 4
4280: PUSH
4281: CALL_OW 45
4285: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4286: LD_VAR 0 4
4290: PPUSH
4291: LD_INT 3
4293: PPUSH
4294: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4298: LD_VAR 0 4
4302: PPUSH
4303: LD_INT 5
4305: PPUSH
4306: LD_INT 0
4308: PPUSH
4309: CALL_OW 49
// hc_gallery =  ;
4313: LD_ADDR_OWVAR 33
4317: PUSH
4318: LD_STRING 
4320: ST_TO_ADDR
// hc_name =  ;
4321: LD_ADDR_OWVAR 26
4325: PUSH
4326: LD_STRING 
4328: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
4329: LD_INT 0
4331: PPUSH
4332: LD_INT 3
4334: PPUSH
4335: LD_INT 10
4337: PPUSH
4338: CALL_OW 380
// un = CreateHuman ;
4342: LD_ADDR_VAR 0 3
4346: PUSH
4347: CALL_OW 44
4351: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4352: LD_VAR 0 3
4356: PPUSH
4357: LD_VAR 0 4
4361: PPUSH
4362: CALL_OW 52
// end ;
4366: GO 4171
4368: POP
4369: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4370: LD_ADDR_VAR 0 2
4374: PUSH
4375: DOUBLE
4376: LD_INT 1
4378: DEC
4379: ST_TO_ADDR
4380: LD_INT 3
4382: PUSH
4383: LD_INT 4
4385: PUSH
4386: LD_INT 5
4388: PUSH
4389: LD_INT 5
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: PUSH
4398: LD_OWVAR 67
4402: ARRAY
4403: PUSH
4404: FOR_TO
4405: IFFALSE 4552
// begin vc_engine = 3 ;
4407: LD_ADDR_OWVAR 39
4411: PUSH
4412: LD_INT 3
4414: ST_TO_ADDR
// vc_control = 3 ;
4415: LD_ADDR_OWVAR 38
4419: PUSH
4420: LD_INT 3
4422: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
4423: LD_ADDR_OWVAR 40
4427: PUSH
4428: LD_INT 42
4430: PUSH
4431: LD_INT 43
4433: PUSH
4434: LD_INT 44
4436: PUSH
4437: LD_INT 45
4439: PUSH
4440: LD_INT 46
4442: PUSH
4443: LD_INT 49
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: LIST
4452: LIST
4453: PUSH
4454: LD_INT 1
4456: PPUSH
4457: LD_INT 5
4459: PPUSH
4460: CALL_OW 12
4464: ARRAY
4465: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4466: LD_OWVAR 40
4470: PUSH
4471: LD_INT 46
4473: EQUAL
4474: IFFALSE 4486
// vc_chassis = ru_heavy_tracked else
4476: LD_ADDR_OWVAR 37
4480: PUSH
4481: LD_INT 24
4483: ST_TO_ADDR
4484: GO 4513
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4486: LD_ADDR_OWVAR 37
4490: PUSH
4491: LD_INT 22
4493: PUSH
4494: LD_INT 21
4496: PUSH
4497: EMPTY
4498: LIST
4499: LIST
4500: PUSH
4501: LD_INT 1
4503: PPUSH
4504: LD_INT 2
4506: PPUSH
4507: CALL_OW 12
4511: ARRAY
4512: ST_TO_ADDR
// veh = CreateVehicle ;
4513: LD_ADDR_VAR 0 4
4517: PUSH
4518: CALL_OW 45
4522: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4523: LD_VAR 0 4
4527: PPUSH
4528: LD_INT 3
4530: PPUSH
4531: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4535: LD_VAR 0 4
4539: PPUSH
4540: LD_INT 6
4542: PPUSH
4543: LD_INT 0
4545: PPUSH
4546: CALL_OW 49
// end ;
4550: GO 4404
4552: POP
4553: POP
// end ; end_of_file
4554: LD_VAR 0 1
4558: RET
// export function PrepareKurt ; begin
4559: LD_INT 0
4561: PPUSH
// uc_side = 8 ;
4562: LD_ADDR_OWVAR 20
4566: PUSH
4567: LD_INT 8
4569: ST_TO_ADDR
// uc_nation = 2 ;
4570: LD_ADDR_OWVAR 21
4574: PUSH
4575: LD_INT 2
4577: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4578: LD_ADDR_OWVAR 37
4582: PUSH
4583: LD_INT 13
4585: ST_TO_ADDR
// vc_engine = 1 ;
4586: LD_ADDR_OWVAR 39
4590: PUSH
4591: LD_INT 1
4593: ST_TO_ADDR
// vc_control = 1 ;
4594: LD_ADDR_OWVAR 38
4598: PUSH
4599: LD_INT 1
4601: ST_TO_ADDR
// vc_weapon = 24 ;
4602: LD_ADDR_OWVAR 40
4606: PUSH
4607: LD_INT 24
4609: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4610: LD_ADDR_EXP 18
4614: PUSH
4615: CALL_OW 45
4619: ST_TO_ADDR
// if kurtStatus > 0 then
4620: LD_EXP 19
4624: PUSH
4625: LD_INT 0
4627: GREATER
4628: IFFALSE 4680
// begin Kurt = PrepareUnit ( Kurt , false ,  ) ;
4630: LD_ADDR_EXP 17
4634: PUSH
4635: LD_STRING Kurt
4637: PPUSH
4638: LD_INT 0
4640: PPUSH
4641: LD_STRING 
4643: PPUSH
4644: CALL 38209 0 3
4648: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4649: LD_EXP 18
4653: PPUSH
4654: LD_INT 4
4656: PPUSH
4657: LD_INT 0
4659: PPUSH
4660: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4664: LD_EXP 17
4668: PPUSH
4669: LD_EXP 18
4673: PPUSH
4674: CALL_OW 52
// end else
4678: GO 4757
// begin hc_name =  ;
4680: LD_ADDR_OWVAR 26
4684: PUSH
4685: LD_STRING 
4687: ST_TO_ADDR
// hc_gallery =  ;
4688: LD_ADDR_OWVAR 33
4692: PUSH
4693: LD_STRING 
4695: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4696: LD_INT 1
4698: PPUSH
4699: LD_INT 10
4701: PPUSH
4702: CALL_OW 381
// Kurt = CreateHuman ;
4706: LD_ADDR_EXP 17
4710: PUSH
4711: CALL_OW 44
4715: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4716: LD_EXP 18
4720: PPUSH
4721: LD_INT 4
4723: PPUSH
4724: LD_INT 0
4726: PPUSH
4727: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4731: LD_EXP 17
4735: PPUSH
4736: LD_EXP 18
4740: PPUSH
4741: CALL_OW 52
// SaveCharacters ( Kurt , AltKurt ) ;
4745: LD_EXP 17
4749: PPUSH
4750: LD_STRING AltKurt
4752: PPUSH
4753: CALL_OW 38
// end ; end ;
4757: LD_VAR 0 1
4761: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4762: LD_INT 0
4764: PPUSH
4765: PPUSH
4766: PPUSH
4767: PPUSH
// for i = 1 to 3 do
4768: LD_ADDR_VAR 0 2
4772: PUSH
4773: DOUBLE
4774: LD_INT 1
4776: DEC
4777: ST_TO_ADDR
4778: LD_INT 3
4780: PUSH
4781: FOR_TO
4782: IFFALSE 4903
// begin uc_side = 1 ;
4784: LD_ADDR_OWVAR 20
4788: PUSH
4789: LD_INT 1
4791: ST_TO_ADDR
// uc_nation = 2 ;
4792: LD_ADDR_OWVAR 21
4796: PUSH
4797: LD_INT 2
4799: ST_TO_ADDR
// hc_gallery =  ;
4800: LD_ADDR_OWVAR 33
4804: PUSH
4805: LD_STRING 
4807: ST_TO_ADDR
// hc_name =  ;
4808: LD_ADDR_OWVAR 26
4812: PUSH
4813: LD_STRING 
4815: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4816: LD_EXP 19
4820: PUSH
4821: LD_INT 0
4823: EQUAL
4824: PUSH
4825: LD_EXP 19
4829: PUSH
4830: LD_INT 2
4832: EQUAL
4833: OR
4834: IFFALSE 4851
// PrepareHuman ( false , 1 , 6 ) else
4836: LD_INT 0
4838: PPUSH
4839: LD_INT 1
4841: PPUSH
4842: LD_INT 6
4844: PPUSH
4845: CALL_OW 380
4849: GO 4864
// PrepareHuman ( false , 1 , 8 ) ;
4851: LD_INT 0
4853: PPUSH
4854: LD_INT 1
4856: PPUSH
4857: LD_INT 8
4859: PPUSH
4860: CALL_OW 380
// un = CreateHuman ;
4864: LD_ADDR_VAR 0 3
4868: PUSH
4869: CALL_OW 44
4873: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4874: LD_VAR 0 3
4878: PPUSH
4879: LD_INT 4
4881: PPUSH
4882: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4886: LD_VAR 0 3
4890: PPUSH
4891: LD_INT 4
4893: PPUSH
4894: LD_INT 0
4896: PPUSH
4897: CALL_OW 49
// end ;
4901: GO 4781
4903: POP
4904: POP
// vc_chassis = 14 ;
4905: LD_ADDR_OWVAR 37
4909: PUSH
4910: LD_INT 14
4912: ST_TO_ADDR
// vc_engine = 3 ;
4913: LD_ADDR_OWVAR 39
4917: PUSH
4918: LD_INT 3
4920: ST_TO_ADDR
// vc_control = 1 ;
4921: LD_ADDR_OWVAR 38
4925: PUSH
4926: LD_INT 1
4928: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4929: LD_ADDR_OWVAR 40
4933: PUSH
4934: LD_INT 27
4936: PUSH
4937: LD_INT 26
4939: PUSH
4940: LD_INT 28
4942: PUSH
4943: EMPTY
4944: LIST
4945: LIST
4946: LIST
4947: PUSH
4948: LD_INT 1
4950: PPUSH
4951: LD_INT 3
4953: PPUSH
4954: CALL_OW 12
4958: ARRAY
4959: ST_TO_ADDR
// veh = CreateVehicle ;
4960: LD_ADDR_VAR 0 4
4964: PUSH
4965: CALL_OW 45
4969: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4970: LD_VAR 0 4
4974: PPUSH
4975: LD_INT 4
4977: PPUSH
4978: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4982: LD_VAR 0 4
4986: PPUSH
4987: LD_INT 4
4989: PPUSH
4990: LD_INT 0
4992: PPUSH
4993: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4997: LD_EXP 19
5001: PUSH
5002: LD_INT 0
5004: EQUAL
5005: PUSH
5006: LD_EXP 19
5010: PUSH
5011: LD_INT 2
5013: EQUAL
5014: OR
5015: IFFALSE 5032
// PrepareHuman ( false , 3 , 6 ) else
5017: LD_INT 0
5019: PPUSH
5020: LD_INT 3
5022: PPUSH
5023: LD_INT 6
5025: PPUSH
5026: CALL_OW 380
5030: GO 5045
// PrepareHuman ( false , 3 , 8 ) ;
5032: LD_INT 0
5034: PPUSH
5035: LD_INT 3
5037: PPUSH
5038: LD_INT 8
5040: PPUSH
5041: CALL_OW 380
// un = CreateHuman ;
5045: LD_ADDR_VAR 0 3
5049: PUSH
5050: CALL_OW 44
5054: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5055: LD_VAR 0 3
5059: PPUSH
5060: LD_VAR 0 4
5064: PPUSH
5065: CALL_OW 52
// vc_chassis = 14 ;
5069: LD_ADDR_OWVAR 37
5073: PUSH
5074: LD_INT 14
5076: ST_TO_ADDR
// vc_engine = 3 ;
5077: LD_ADDR_OWVAR 39
5081: PUSH
5082: LD_INT 3
5084: ST_TO_ADDR
// vc_control = 1 ;
5085: LD_ADDR_OWVAR 38
5089: PUSH
5090: LD_INT 1
5092: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
5093: LD_ADDR_OWVAR 40
5097: PUSH
5098: LD_INT 27
5100: PUSH
5101: LD_INT 26
5103: PUSH
5104: LD_INT 28
5106: PUSH
5107: EMPTY
5108: LIST
5109: LIST
5110: LIST
5111: PUSH
5112: LD_INT 1
5114: PPUSH
5115: LD_INT 3
5117: PPUSH
5118: CALL_OW 12
5122: ARRAY
5123: ST_TO_ADDR
// veh = CreateVehicle ;
5124: LD_ADDR_VAR 0 4
5128: PUSH
5129: CALL_OW 45
5133: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5134: LD_VAR 0 4
5138: PPUSH
5139: LD_INT 4
5141: PPUSH
5142: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5146: LD_VAR 0 4
5150: PPUSH
5151: LD_INT 4
5153: PPUSH
5154: LD_INT 0
5156: PPUSH
5157: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5161: LD_EXP 19
5165: PUSH
5166: LD_INT 0
5168: EQUAL
5169: PUSH
5170: LD_EXP 19
5174: PUSH
5175: LD_INT 2
5177: EQUAL
5178: OR
5179: IFFALSE 5196
// PrepareHuman ( false , 4 , 6 ) else
5181: LD_INT 0
5183: PPUSH
5184: LD_INT 4
5186: PPUSH
5187: LD_INT 6
5189: PPUSH
5190: CALL_OW 380
5194: GO 5209
// PrepareHuman ( false , 4 , 8 ) ;
5196: LD_INT 0
5198: PPUSH
5199: LD_INT 4
5201: PPUSH
5202: LD_INT 8
5204: PPUSH
5205: CALL_OW 380
// un = CreateHuman ;
5209: LD_ADDR_VAR 0 3
5213: PUSH
5214: CALL_OW 44
5218: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5219: LD_VAR 0 3
5223: PPUSH
5224: LD_INT 4
5226: PPUSH
5227: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5231: LD_VAR 0 3
5235: PPUSH
5236: LD_VAR 0 4
5240: PPUSH
5241: CALL_OW 52
// vc_chassis = 14 ;
5245: LD_ADDR_OWVAR 37
5249: PUSH
5250: LD_INT 14
5252: ST_TO_ADDR
// vc_engine = 3 ;
5253: LD_ADDR_OWVAR 39
5257: PUSH
5258: LD_INT 3
5260: ST_TO_ADDR
// vc_control = 1 ;
5261: LD_ADDR_OWVAR 38
5265: PUSH
5266: LD_INT 1
5268: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
5269: LD_ADDR_OWVAR 40
5273: PUSH
5274: LD_INT 27
5276: PUSH
5277: LD_INT 26
5279: PUSH
5280: LD_INT 28
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: LIST
5287: PUSH
5288: LD_INT 1
5290: PPUSH
5291: LD_INT 3
5293: PPUSH
5294: CALL_OW 12
5298: ARRAY
5299: ST_TO_ADDR
// veh = CreateVehicle ;
5300: LD_ADDR_VAR 0 4
5304: PUSH
5305: CALL_OW 45
5309: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5310: LD_VAR 0 4
5314: PPUSH
5315: LD_INT 4
5317: PPUSH
5318: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5322: LD_VAR 0 4
5326: PPUSH
5327: LD_INT 4
5329: PPUSH
5330: LD_INT 0
5332: PPUSH
5333: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5337: LD_EXP 19
5341: PUSH
5342: LD_INT 0
5344: EQUAL
5345: PUSH
5346: LD_EXP 19
5350: PUSH
5351: LD_INT 2
5353: EQUAL
5354: OR
5355: IFFALSE 5372
// PrepareHuman ( false , 2 , 4 ) else
5357: LD_INT 0
5359: PPUSH
5360: LD_INT 2
5362: PPUSH
5363: LD_INT 4
5365: PPUSH
5366: CALL_OW 380
5370: GO 5385
// PrepareHuman ( false , 2 , 8 ) ;
5372: LD_INT 0
5374: PPUSH
5375: LD_INT 2
5377: PPUSH
5378: LD_INT 8
5380: PPUSH
5381: CALL_OW 380
// un = CreateHuman ;
5385: LD_ADDR_VAR 0 3
5389: PUSH
5390: CALL_OW 44
5394: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5395: LD_VAR 0 3
5399: PPUSH
5400: LD_INT 4
5402: PPUSH
5403: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5407: LD_VAR 0 3
5411: PPUSH
5412: LD_VAR 0 4
5416: PPUSH
5417: CALL_OW 52
// end ;
5421: LD_VAR 0 1
5425: RET
// export function PrepareAttackLegion ; var i , un ; begin
5426: LD_INT 0
5428: PPUSH
5429: PPUSH
5430: PPUSH
// for i = 1 to 4 do
5431: LD_ADDR_VAR 0 2
5435: PUSH
5436: DOUBLE
5437: LD_INT 1
5439: DEC
5440: ST_TO_ADDR
5441: LD_INT 4
5443: PUSH
5444: FOR_TO
5445: IFFALSE 5555
// begin uc_side = 8 ;
5447: LD_ADDR_OWVAR 20
5451: PUSH
5452: LD_INT 8
5454: ST_TO_ADDR
// uc_nation = 2 ;
5455: LD_ADDR_OWVAR 21
5459: PUSH
5460: LD_INT 2
5462: ST_TO_ADDR
// hc_gallery =  ;
5463: LD_ADDR_OWVAR 33
5467: PUSH
5468: LD_STRING 
5470: ST_TO_ADDR
// hc_name =  ;
5471: LD_ADDR_OWVAR 26
5475: PUSH
5476: LD_STRING 
5478: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5479: LD_INT 0
5481: PPUSH
5482: LD_INT 1
5484: PUSH
5485: LD_INT 8
5487: PUSH
5488: EMPTY
5489: LIST
5490: LIST
5491: PUSH
5492: LD_INT 1
5494: PPUSH
5495: LD_INT 2
5497: PPUSH
5498: CALL_OW 12
5502: ARRAY
5503: PPUSH
5504: LD_INT 6
5506: PPUSH
5507: LD_INT 8
5509: PPUSH
5510: CALL_OW 12
5514: PPUSH
5515: CALL_OW 380
// un = CreateHuman ;
5519: LD_ADDR_VAR 0 3
5523: PUSH
5524: CALL_OW 44
5528: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5529: LD_VAR 0 3
5533: PPUSH
5534: LD_INT 19
5536: PPUSH
5537: LD_INT 0
5539: PPUSH
5540: CALL_OW 49
// ComCrawl ( un ) ;
5544: LD_VAR 0 3
5548: PPUSH
5549: CALL_OW 137
// end ;
5553: GO 5444
5555: POP
5556: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5557: LD_INT 1
5559: PPUSH
5560: LD_INT 8
5562: PPUSH
5563: LD_INT 2
5565: PPUSH
5566: LD_INT 1
5568: PPUSH
5569: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5573: LD_INT 20
5575: PPUSH
5576: LD_INT 3
5578: PPUSH
5579: CALL 14565 0 2
// end ; end_of_file
5583: LD_VAR 0 1
5587: RET
// export function Action ; var i , tmp , group ; begin
5588: LD_INT 0
5590: PPUSH
5591: PPUSH
5592: PPUSH
5593: PPUSH
// InGameOn ;
5594: CALL_OW 8
// group := FilterAllUnits ( [ f_side , 1 ] ) ;
5598: LD_ADDR_VAR 0 4
5602: PUSH
5603: LD_INT 22
5605: PUSH
5606: LD_INT 1
5608: PUSH
5609: EMPTY
5610: LIST
5611: LIST
5612: PPUSH
5613: CALL_OW 69
5617: ST_TO_ADDR
// tmp := IsInUnit ( JMM ) ;
5618: LD_ADDR_VAR 0 3
5622: PUSH
5623: LD_EXP 1
5627: PPUSH
5628: CALL_OW 310
5632: ST_TO_ADDR
// CenterNowOnUnits ( tmp ) ;
5633: LD_VAR 0 3
5637: PPUSH
5638: CALL_OW 87
// ComMoveXY ( group , 130 , 103 ) ;
5642: LD_VAR 0 4
5646: PPUSH
5647: LD_INT 130
5649: PPUSH
5650: LD_INT 103
5652: PPUSH
5653: CALL_OW 111
// AddComMoveXY ( tmp , 114 , 102 ) ;
5657: LD_VAR 0 3
5661: PPUSH
5662: LD_INT 114
5664: PPUSH
5665: LD_INT 102
5667: PPUSH
5668: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5672: LD_EXP 1
5676: PPUSH
5677: LD_STRING D1-JMM-1
5679: PPUSH
5680: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5684: LD_VAR 0 3
5688: PPUSH
5689: CALL_OW 87
// if IsOk ( Donaldson ) then
5693: LD_EXP 3
5697: PPUSH
5698: CALL_OW 302
5702: IFFALSE 5767
// begin Say ( Donaldson , D1-Don-1 ) ;
5704: LD_EXP 3
5708: PPUSH
5709: LD_STRING D1-Don-1
5711: PPUSH
5712: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5716: LD_VAR 0 3
5720: PPUSH
5721: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5725: LD_EXP 1
5729: PPUSH
5730: LD_STRING D1-JMM-2
5732: PPUSH
5733: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5737: LD_VAR 0 3
5741: PPUSH
5742: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5746: LD_EXP 3
5750: PPUSH
5751: LD_STRING D1-Don-2
5753: PPUSH
5754: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5758: LD_VAR 0 3
5762: PPUSH
5763: CALL_OW 87
// end ; AddComMoveXY ( group , 110 , 101 ) ;
5767: LD_VAR 0 4
5771: PPUSH
5772: LD_INT 110
5774: PPUSH
5775: LD_INT 101
5777: PPUSH
5778: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5782: LD_INT 35
5784: PPUSH
5785: CALL_OW 67
// CenterNowOnUnits ( tmp ) ;
5789: LD_VAR 0 3
5793: PPUSH
5794: CALL_OW 87
// until SeeXY ( 1 , 102 , 94 ) ;
5798: LD_INT 1
5800: PPUSH
5801: LD_INT 102
5803: PPUSH
5804: LD_INT 94
5806: PPUSH
5807: CALL_OW 293
5811: IFFALSE 5782
// CenterOnXY ( 102 , 94 ) ;
5813: LD_INT 102
5815: PPUSH
5816: LD_INT 94
5818: PPUSH
5819: CALL_OW 84
// DialogRandom ( UnitFilter ( group , [ f_sex , sex_male ] ) , D1-Sol1-2 ,  ) ;
5823: LD_VAR 0 4
5827: PPUSH
5828: LD_INT 26
5830: PUSH
5831: LD_INT 1
5833: PUSH
5834: EMPTY
5835: LIST
5836: LIST
5837: PPUSH
5838: CALL_OW 72
5842: PPUSH
5843: LD_STRING D1-Sol1-2
5845: PPUSH
5846: LD_STRING 
5848: PPUSH
5849: CALL 12082 0 3
// Say ( JMM , D1-JMM-3 ) ;
5853: LD_EXP 1
5857: PPUSH
5858: LD_STRING D1-JMM-3
5860: PPUSH
5861: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5865: LD_STRING M1
5867: PPUSH
5868: CALL_OW 337
// for i in group do
5872: LD_ADDR_VAR 0 2
5876: PUSH
5877: LD_VAR 0 4
5881: PUSH
5882: FOR_IN
5883: IFFALSE 5902
// ComMoveXY ( i , 95 , 84 ) ;
5885: LD_VAR 0 2
5889: PPUSH
5890: LD_INT 95
5892: PPUSH
5893: LD_INT 84
5895: PPUSH
5896: CALL_OW 111
5900: GO 5882
5902: POP
5903: POP
// end ;
5904: LD_VAR 0 1
5908: RET
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5909: GO 5911
5911: DISABLE
5912: LD_INT 0
5914: PPUSH
5915: PPUSH
5916: PPUSH
5917: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5918: LD_ADDR_VAR 0 2
5922: PUSH
5923: LD_INT 8
5925: PPUSH
5926: LD_INT 22
5928: PUSH
5929: LD_INT 3
5931: PUSH
5932: EMPTY
5933: LIST
5934: LIST
5935: PUSH
5936: LD_INT 25
5938: PUSH
5939: LD_INT 9
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: PUSH
5946: EMPTY
5947: LIST
5948: LIST
5949: PPUSH
5950: CALL_OW 70
5954: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
5955: LD_ADDR_VAR 0 3
5959: PUSH
5960: LD_INT 22
5962: PUSH
5963: LD_INT 1
5965: PUSH
5966: EMPTY
5967: LIST
5968: LIST
5969: PUSH
5970: EMPTY
5971: LIST
5972: PPUSH
5973: CALL_OW 69
5977: ST_TO_ADDR
// enable ;
5978: ENABLE
// for i in your_units do
5979: LD_ADDR_VAR 0 1
5983: PUSH
5984: LD_VAR 0 3
5988: PUSH
5989: FOR_IN
5990: IFFALSE 6656
// begin if See ( 3 , i ) then
5992: LD_INT 3
5994: PPUSH
5995: LD_VAR 0 1
5999: PPUSH
6000: CALL_OW 292
6004: IFFALSE 6654
// begin disable ;
6006: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
6007: LD_VAR 0 2
6011: PPUSH
6012: LD_INT 96
6014: PPUSH
6015: LD_INT 85
6017: PPUSH
6018: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6022: LD_VAR 0 2
6026: PPUSH
6027: LD_INT 96
6029: PPUSH
6030: LD_INT 85
6032: PPUSH
6033: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6037: LD_VAR 0 2
6041: PPUSH
6042: LD_INT 96
6044: PPUSH
6045: LD_INT 85
6047: PPUSH
6048: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6052: LD_VAR 0 2
6056: PPUSH
6057: LD_INT 96
6059: PPUSH
6060: LD_INT 85
6062: PPUSH
6063: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6067: LD_VAR 0 2
6071: PPUSH
6072: LD_INT 96
6074: PPUSH
6075: LD_INT 85
6077: PPUSH
6078: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6082: LD_VAR 0 2
6086: PPUSH
6087: LD_INT 96
6089: PPUSH
6090: LD_INT 85
6092: PPUSH
6093: CALL_OW 214
// wait ( 0 0$2 ) ;
6097: LD_INT 70
6099: PPUSH
6100: CALL_OW 67
// Say ( JMM , D1a-JMM-1 ) ;
6104: LD_EXP 1
6108: PPUSH
6109: LD_STRING D1a-JMM-1
6111: PPUSH
6112: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
6116: LD_EXP 3
6120: PPUSH
6121: LD_STRING D1a-Don-1
6123: PPUSH
6124: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6128: LD_ADDR_VAR 0 1
6132: PUSH
6133: LD_INT 22
6135: PUSH
6136: LD_INT 1
6138: PUSH
6139: EMPTY
6140: LIST
6141: LIST
6142: PPUSH
6143: CALL_OW 69
6147: PUSH
6148: FOR_IN
6149: IFFALSE 6168
// ComMoveXY ( i , 109 , 102 ) ;
6151: LD_VAR 0 1
6155: PPUSH
6156: LD_INT 109
6158: PPUSH
6159: LD_INT 102
6161: PPUSH
6162: CALL_OW 111
6166: GO 6148
6168: POP
6169: POP
// Say ( JMM , D1a-JMM-2 ) ;
6170: LD_EXP 1
6174: PPUSH
6175: LD_STRING D1a-JMM-2
6177: PPUSH
6178: CALL_OW 88
// wait ( 0 0$10 ) ;
6182: LD_INT 350
6184: PPUSH
6185: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6189: LD_EXP 1
6193: PPUSH
6194: CALL_OW 310
6198: PPUSH
6199: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6203: LD_EXP 3
6207: PPUSH
6208: LD_STRING D1b-Don-1
6210: PPUSH
6211: CALL_OW 88
// if IsOk ( Donaldson ) then
6215: LD_EXP 3
6219: PPUSH
6220: CALL_OW 302
6224: IFFALSE 6238
// Say ( JMM , D1b-JMM-1 ) ;
6226: LD_EXP 1
6230: PPUSH
6231: LD_STRING D1b-JMM-1
6233: PPUSH
6234: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6238: LD_INT 22
6240: PUSH
6241: LD_INT 1
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: PUSH
6248: LD_INT 26
6250: PUSH
6251: LD_INT 1
6253: PUSH
6254: EMPTY
6255: LIST
6256: LIST
6257: PUSH
6258: LD_INT 2
6260: PUSH
6261: LD_INT 25
6263: PUSH
6264: LD_INT 1
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: PUSH
6271: LD_INT 25
6273: PUSH
6274: LD_INT 2
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: PUSH
6281: LD_INT 25
6283: PUSH
6284: LD_INT 3
6286: PUSH
6287: EMPTY
6288: LIST
6289: LIST
6290: PUSH
6291: LD_INT 25
6293: PUSH
6294: LD_INT 4
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: PUSH
6301: LD_INT 25
6303: PUSH
6304: LD_INT 5
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PUSH
6311: LD_INT 25
6313: PUSH
6314: LD_INT 8
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: PUSH
6321: EMPTY
6322: LIST
6323: LIST
6324: LIST
6325: LIST
6326: LIST
6327: LIST
6328: LIST
6329: PUSH
6330: EMPTY
6331: LIST
6332: LIST
6333: LIST
6334: PPUSH
6335: CALL_OW 69
6339: PPUSH
6340: LD_STRING D1b-Sol1-1
6342: PPUSH
6343: LD_STRING 
6345: PPUSH
6346: CALL 12082 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6350: LD_EXP 3
6354: PPUSH
6355: LD_STRING D1b-Don-2
6357: PPUSH
6358: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6362: LD_EXP 1
6366: PPUSH
6367: LD_STRING D1b-JMM-2
6369: PPUSH
6370: CALL_OW 88
// dec = ShowQuery1 ;
6374: LD_ADDR_VAR 0 4
6378: PUSH
6379: CALL 12545 0 0
6383: ST_TO_ADDR
// if dec = 1 then
6384: LD_VAR 0 4
6388: PUSH
6389: LD_INT 1
6391: EQUAL
6392: IFFALSE 6498
// begin Say ( JMM , D2-JMM-1 ) ;
6394: LD_EXP 1
6398: PPUSH
6399: LD_STRING D2-JMM-1
6401: PPUSH
6402: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6406: LD_EXP 15
6410: PPUSH
6411: LD_STRING D2-Pow-1
6413: PPUSH
6414: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6418: LD_EXP 1
6422: PPUSH
6423: LD_STRING D2a-JMM-1
6425: PPUSH
6426: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6430: LD_EXP 15
6434: PPUSH
6435: LD_STRING D2a-Pow-1
6437: PPUSH
6438: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6442: LD_EXP 1
6446: PPUSH
6447: LD_STRING D2a-JMM-2
6449: PPUSH
6450: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6454: LD_EXP 15
6458: PPUSH
6459: LD_STRING D2a-Pow-2
6461: PPUSH
6462: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6466: LD_EXP 1
6470: PPUSH
6471: LD_STRING D2a-JMM-3
6473: PPUSH
6474: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6478: LD_EXP 15
6482: PPUSH
6483: LD_STRING D2a-Pow-3
6485: PPUSH
6486: CALL_OW 94
// secondPass = 2 ;
6490: LD_ADDR_EXP 20
6494: PUSH
6495: LD_INT 2
6497: ST_TO_ADDR
// end ; if dec = 2 then
6498: LD_VAR 0 4
6502: PUSH
6503: LD_INT 2
6505: EQUAL
6506: IFFALSE 6600
// begin Say ( JMM , D2-JMM-1 ) ;
6508: LD_EXP 1
6512: PPUSH
6513: LD_STRING D2-JMM-1
6515: PPUSH
6516: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6520: LD_EXP 15
6524: PPUSH
6525: LD_STRING D2-Pow-1
6527: PPUSH
6528: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6532: LD_EXP 1
6536: PPUSH
6537: LD_STRING D2b-JMM-1
6539: PPUSH
6540: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6544: LD_EXP 15
6548: PPUSH
6549: LD_STRING D2b-Pow-1
6551: PPUSH
6552: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6556: LD_EXP 1
6560: PPUSH
6561: LD_STRING D2c-JMM-1
6563: PPUSH
6564: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6568: LD_EXP 15
6572: PPUSH
6573: LD_STRING D2c-Pow-1
6575: PPUSH
6576: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6580: LD_EXP 1
6584: PPUSH
6585: LD_STRING D2c-JMM-2
6587: PPUSH
6588: CALL_OW 88
// secondPass = 2 ;
6592: LD_ADDR_EXP 20
6596: PUSH
6597: LD_INT 2
6599: ST_TO_ADDR
// end ; if dec = 3 then
6600: LD_VAR 0 4
6604: PUSH
6605: LD_INT 3
6607: EQUAL
6608: IFFALSE 6618
// secondPass = 1 ;
6610: LD_ADDR_EXP 20
6614: PUSH
6615: LD_INT 1
6617: ST_TO_ADDR
// InGameOff ;
6618: CALL_OW 9
// ruAI = 1 ;
6622: LD_ADDR_EXP 34
6626: PUSH
6627: LD_INT 1
6629: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6630: LD_INT 1
6632: PPUSH
6633: LD_INT 3
6635: PPUSH
6636: LD_INT 2
6638: PPUSH
6639: LD_INT 1
6641: PPUSH
6642: CALL_OW 80
// SaveForQuickRestart ;
6646: CALL_OW 22
// exit ;
6650: POP
6651: POP
6652: GO 6658
// end ; end ;
6654: GO 5989
6656: POP
6657: POP
// end ;
6658: PPOPN 4
6660: END
// every 1 1$0 trigger secondPass = 2 do
6661: LD_EXP 20
6665: PUSH
6666: LD_INT 2
6668: EQUAL
6669: IFFALSE 6889
6671: GO 6673
6673: DISABLE
// begin PowellSupport1 ;
6674: CALL 2009 0 0
// DialogueOn ;
6678: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6682: LD_EXP 1
6686: PPUSH
6687: LD_STRING DC1-JMM-1
6689: PPUSH
6690: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6694: LD_EXP 15
6698: PPUSH
6699: LD_STRING DC1-Pow-1
6701: PPUSH
6702: CALL_OW 94
// DialogueOff ;
6706: CALL_OW 7
// wait ( 3 3$0 ) ;
6710: LD_INT 6300
6712: PPUSH
6713: CALL_OW 67
// PowellSupport2 ;
6717: CALL 2490 0 0
// DialogueOn ;
6721: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6725: LD_EXP 1
6729: PPUSH
6730: LD_STRING DC2-JMM-1
6732: PPUSH
6733: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6737: LD_EXP 15
6741: PPUSH
6742: LD_STRING DC2-Pow-1
6744: PPUSH
6745: CALL_OW 94
// DialogueOff ;
6749: CALL_OW 7
// wait ( 3 3$00 ) ;
6753: LD_INT 6300
6755: PPUSH
6756: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6760: LD_INT 35
6762: PPUSH
6763: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and not FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
6767: LD_INT 22
6769: PUSH
6770: LD_INT 1
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: PUSH
6777: LD_INT 2
6779: PUSH
6780: LD_INT 30
6782: PUSH
6783: LD_INT 0
6785: PUSH
6786: EMPTY
6787: LIST
6788: LIST
6789: PUSH
6790: LD_INT 30
6792: PUSH
6793: LD_INT 1
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: LIST
6804: PUSH
6805: EMPTY
6806: LIST
6807: LIST
6808: PPUSH
6809: CALL_OW 69
6813: PUSH
6814: LD_INT 11
6816: PPUSH
6817: LD_INT 22
6819: PUSH
6820: LD_INT 3
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: PPUSH
6827: CALL_OW 70
6831: NOT
6832: AND
6833: IFFALSE 6760
// wait ( 0 0$10 ) ;
6835: LD_INT 350
6837: PPUSH
6838: CALL_OW 67
// Legion ;
6842: CALL 6890 0 0
// wait ( 6 6$0 ) ;
6846: LD_INT 12600
6848: PPUSH
6849: CALL_OW 67
// PowellSupport3 ;
6853: CALL 3111 0 0
// DialogueOn ;
6857: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6861: LD_EXP 15
6865: PPUSH
6866: LD_STRING DC3-Pow-1
6868: PPUSH
6869: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6873: LD_EXP 1
6877: PPUSH
6878: LD_STRING DC3-JMM-1
6880: PPUSH
6881: CALL_OW 88
// DialogueOff ;
6885: CALL_OW 7
// end ;
6889: END
// export function Legion ; var i , dec1 , dec2 , tmp , tmp2 , tmp3 , crates , oil , siberite , cr , sb , payForNeutral , payForHelp , query1 , query2 ; begin
6890: LD_INT 0
6892: PPUSH
6893: PPUSH
6894: PPUSH
6895: PPUSH
6896: PPUSH
6897: PPUSH
6898: PPUSH
6899: PPUSH
6900: PPUSH
6901: PPUSH
6902: PPUSH
6903: PPUSH
6904: PPUSH
6905: PPUSH
6906: PPUSH
6907: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6908: LD_ADDR_VAR 0 5
6912: PUSH
6913: LD_INT 22
6915: PUSH
6916: LD_INT 1
6918: PUSH
6919: EMPTY
6920: LIST
6921: LIST
6922: PUSH
6923: LD_INT 21
6925: PUSH
6926: LD_INT 3
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PUSH
6933: LD_INT 2
6935: PUSH
6936: LD_INT 30
6938: PUSH
6939: LD_INT 0
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: PUSH
6946: LD_INT 30
6948: PUSH
6949: LD_INT 1
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: LIST
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: LIST
6965: PPUSH
6966: CALL_OW 69
6970: ST_TO_ADDR
// crates := 0 ;
6971: LD_ADDR_VAR 0 8
6975: PUSH
6976: LD_INT 0
6978: ST_TO_ADDR
// oil := 0 ;
6979: LD_ADDR_VAR 0 9
6983: PUSH
6984: LD_INT 0
6986: ST_TO_ADDR
// siberite := 0 ;
6987: LD_ADDR_VAR 0 10
6991: PUSH
6992: LD_INT 0
6994: ST_TO_ADDR
// payForNeutral := false ;
6995: LD_ADDR_VAR 0 13
6999: PUSH
7000: LD_INT 0
7002: ST_TO_ADDR
// payForHelp := false ;
7003: LD_ADDR_VAR 0 14
7007: PUSH
7008: LD_INT 0
7010: ST_TO_ADDR
// for i in tmp do
7011: LD_ADDR_VAR 0 2
7015: PUSH
7016: LD_VAR 0 5
7020: PUSH
7021: FOR_IN
7022: IFFALSE 7113
// begin crates := crates + GetResourceType ( GetBase ( i ) , 1 ) ;
7024: LD_ADDR_VAR 0 8
7028: PUSH
7029: LD_VAR 0 8
7033: PUSH
7034: LD_VAR 0 2
7038: PPUSH
7039: CALL_OW 274
7043: PPUSH
7044: LD_INT 1
7046: PPUSH
7047: CALL_OW 275
7051: PLUS
7052: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( i ) , 2 ) ;
7053: LD_ADDR_VAR 0 9
7057: PUSH
7058: LD_VAR 0 9
7062: PUSH
7063: LD_VAR 0 2
7067: PPUSH
7068: CALL_OW 274
7072: PPUSH
7073: LD_INT 2
7075: PPUSH
7076: CALL_OW 275
7080: PLUS
7081: ST_TO_ADDR
// siberite := siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
7082: LD_ADDR_VAR 0 10
7086: PUSH
7087: LD_VAR 0 10
7091: PUSH
7092: LD_VAR 0 2
7096: PPUSH
7097: CALL_OW 274
7101: PPUSH
7102: LD_INT 3
7104: PPUSH
7105: CALL_OW 275
7109: PLUS
7110: ST_TO_ADDR
// end ;
7111: GO 7021
7113: POP
7114: POP
// PrepareKurt ;
7115: CALL 4559 0 0
// if not Kurt then
7119: LD_EXP 17
7123: NOT
7124: IFFALSE 7128
// exit ;
7126: GO 9247
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7128: LD_EXP 18
7132: PPUSH
7133: LD_INT 144
7135: PPUSH
7136: LD_INT 111
7138: PPUSH
7139: CALL_OW 111
// wait ( 0 0$2 ) ;
7143: LD_INT 70
7145: PPUSH
7146: CALL_OW 67
// PlaceSeeing ( 167 , 121 , 1 , - 10 ) ;
7150: LD_INT 167
7152: PPUSH
7153: LD_INT 121
7155: PPUSH
7156: LD_INT 1
7158: PPUSH
7159: LD_INT 10
7161: NEG
7162: PPUSH
7163: CALL_OW 330
// ComExitVehicle ( Kurt ) ;
7167: LD_EXP 17
7171: PPUSH
7172: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7176: LD_EXP 17
7180: PPUSH
7181: CALL_OW 87
// wait ( 0 0$1 ) ;
7185: LD_INT 35
7187: PPUSH
7188: CALL_OW 67
// DialogueOn ;
7192: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7196: LD_INT 22
7198: PUSH
7199: LD_INT 1
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: PUSH
7206: LD_INT 26
7208: PUSH
7209: LD_INT 1
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: PUSH
7216: LD_INT 2
7218: PUSH
7219: LD_INT 25
7221: PUSH
7222: LD_INT 1
7224: PUSH
7225: EMPTY
7226: LIST
7227: LIST
7228: PUSH
7229: LD_INT 25
7231: PUSH
7232: LD_INT 2
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: PUSH
7239: LD_INT 25
7241: PUSH
7242: LD_INT 3
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: PUSH
7249: LD_INT 25
7251: PUSH
7252: LD_INT 4
7254: PUSH
7255: EMPTY
7256: LIST
7257: LIST
7258: PUSH
7259: LD_INT 25
7261: PUSH
7262: LD_INT 5
7264: PUSH
7265: EMPTY
7266: LIST
7267: LIST
7268: PUSH
7269: LD_INT 25
7271: PUSH
7272: LD_INT 8
7274: PUSH
7275: EMPTY
7276: LIST
7277: LIST
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: LIST
7283: LIST
7284: LIST
7285: LIST
7286: LIST
7287: PUSH
7288: EMPTY
7289: LIST
7290: LIST
7291: LIST
7292: PPUSH
7293: CALL_OW 69
7297: PPUSH
7298: LD_STRING D3-Sol1-1
7300: PPUSH
7301: LD_STRING 
7303: PPUSH
7304: CALL 12082 0 3
// if KurtStatus then
7308: LD_EXP 19
7312: IFFALSE 7412
// begin Say ( Kurt , D3-Kurt-1 ) ;
7314: LD_EXP 17
7318: PPUSH
7319: LD_STRING D3-Kurt-1
7321: PPUSH
7322: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7326: LD_EXP 1
7330: PPUSH
7331: LD_STRING D3-JMM-1
7333: PPUSH
7334: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7338: LD_EXP 17
7342: PPUSH
7343: LD_STRING D3-Kurt-2
7345: PPUSH
7346: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7350: LD_EXP 1
7354: PPUSH
7355: LD_STRING D3-JMM-2
7357: PPUSH
7358: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7362: LD_EXP 17
7366: PPUSH
7367: LD_STRING D3-Kurt-4
7369: PPUSH
7370: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7374: LD_EXP 1
7378: PPUSH
7379: LD_STRING D3-JMM-4
7381: PPUSH
7382: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7386: LD_EXP 17
7390: PPUSH
7391: LD_STRING D3-Kurt-5
7393: PPUSH
7394: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7398: LD_EXP 17
7402: PPUSH
7403: LD_STRING D3-Kurt-5a
7405: PPUSH
7406: CALL_OW 88
// end else
7410: GO 7508
// begin Say ( Kurt , D3-Kurt-1 ) ;
7412: LD_EXP 17
7416: PPUSH
7417: LD_STRING D3-Kurt-1
7419: PPUSH
7420: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7424: LD_EXP 1
7428: PPUSH
7429: LD_STRING D3-JMM-1
7431: PPUSH
7432: CALL_OW 88
// Say ( Kurt , D3-Kurt-3 ) ;
7436: LD_EXP 17
7440: PPUSH
7441: LD_STRING D3-Kurt-3
7443: PPUSH
7444: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7448: LD_EXP 1
7452: PPUSH
7453: LD_STRING D3-JMM-3
7455: PPUSH
7456: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7460: LD_EXP 17
7464: PPUSH
7465: LD_STRING D3-Kurt-4
7467: PPUSH
7468: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7472: LD_EXP 1
7476: PPUSH
7477: LD_STRING D3-JMM-4
7479: PPUSH
7480: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7484: LD_EXP 17
7488: PPUSH
7489: LD_STRING D3-Kurt-5
7491: PPUSH
7492: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
7496: LD_EXP 17
7500: PPUSH
7501: LD_STRING D3-Kurt-5b
7503: PPUSH
7504: CALL_OW 88
// end ; if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
7508: LD_VAR 0 8
7512: PUSH
7513: LD_INT 120
7515: PUSH
7516: LD_INT 60
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: PUSH
7523: LD_EXP 19
7527: PUSH
7528: LD_INT 1
7530: PLUS
7531: ARRAY
7532: GREATEREQUAL
7533: PUSH
7534: LD_VAR 0 10
7538: PUSH
7539: LD_INT 120
7541: PUSH
7542: LD_INT 60
7544: PUSH
7545: EMPTY
7546: LIST
7547: LIST
7548: PUSH
7549: LD_EXP 19
7553: PUSH
7554: LD_INT 1
7556: PLUS
7557: ARRAY
7558: GREATEREQUAL
7559: AND
7560: IFFALSE 7612
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
7562: LD_ADDR_VAR 0 3
7566: PUSH
7567: LD_STRING Q2
7569: PUSH
7570: LD_STRING Q2K
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: PUSH
7577: LD_EXP 19
7581: PUSH
7582: LD_INT 1
7584: PLUS
7585: ARRAY
7586: PPUSH
7587: LD_INT 1
7589: PUSH
7590: LD_INT 2
7592: PUSH
7593: LD_INT 3
7595: PUSH
7596: LD_INT 4
7598: PUSH
7599: EMPTY
7600: LIST
7601: LIST
7602: LIST
7603: LIST
7604: PPUSH
7605: CALL_OW 98
7609: ST_TO_ADDR
7610: GO 7656
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 3 , 4 ] ) ;
7612: LD_ADDR_VAR 0 3
7616: PUSH
7617: LD_STRING Q2
7619: PUSH
7620: LD_STRING Q2K
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: PUSH
7627: LD_EXP 19
7631: PUSH
7632: LD_INT 1
7634: PLUS
7635: ARRAY
7636: PPUSH
7637: LD_INT 1
7639: PUSH
7640: LD_INT 3
7642: PUSH
7643: LD_INT 4
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: LIST
7650: PPUSH
7651: CALL_OW 98
7655: ST_TO_ADDR
// if dec1 = 1 then
7656: LD_VAR 0 3
7660: PUSH
7661: LD_INT 1
7663: EQUAL
7664: IFFALSE 7698
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7666: LD_EXP 1
7670: PPUSH
7671: LD_STRING D3Ka-JMM-1
7673: PPUSH
7674: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7678: LD_EXP 17
7682: PPUSH
7683: LD_STRING D3Ka-Kurt-1
7685: PPUSH
7686: CALL_OW 88
// warWithLegion = 1 ;
7690: LD_ADDR_EXP 23
7694: PUSH
7695: LD_INT 1
7697: ST_TO_ADDR
// end ; if dec1 = 2 then
7698: LD_VAR 0 3
7702: PUSH
7703: LD_INT 2
7705: EQUAL
7706: IFFALSE 7790
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7708: LD_EXP 1
7712: PPUSH
7713: LD_STRING D3Kb-JMM-1
7715: PPUSH
7716: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7720: LD_EXP 17
7724: PPUSH
7725: LD_STRING D3Kb-Kurt-1
7727: PPUSH
7728: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7732: LD_ADDR_VAR 0 11
7736: PUSH
7737: LD_INT 120
7739: PUSH
7740: LD_INT 60
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: PUSH
7747: LD_EXP 19
7751: PUSH
7752: LD_INT 1
7754: PLUS
7755: ARRAY
7756: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7757: LD_ADDR_VAR 0 12
7761: PUSH
7762: LD_INT 120
7764: PUSH
7765: LD_INT 60
7767: PUSH
7768: EMPTY
7769: LIST
7770: LIST
7771: PUSH
7772: LD_EXP 19
7776: PUSH
7777: LD_INT 1
7779: PLUS
7780: ARRAY
7781: ST_TO_ADDR
// payForNeutral := true ;
7782: LD_ADDR_VAR 0 13
7786: PUSH
7787: LD_INT 1
7789: ST_TO_ADDR
// end ; if dec1 = 3 then
7790: LD_VAR 0 3
7794: PUSH
7795: LD_INT 3
7797: EQUAL
7798: IFFALSE 8033
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7800: LD_EXP 1
7804: PPUSH
7805: LD_STRING D3Kc1-JMM-1
7807: PPUSH
7808: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7812: LD_EXP 17
7816: PPUSH
7817: LD_STRING D3Kc1-Kurt-1
7819: PPUSH
7820: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7824: LD_EXP 1
7828: PPUSH
7829: LD_STRING D3Kc1-JMM-2
7831: PPUSH
7832: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7836: LD_EXP 17
7840: PPUSH
7841: LD_STRING D3Kc1-Kurt-2
7843: PPUSH
7844: CALL_OW 88
// askSiberite = 1 ;
7848: LD_ADDR_EXP 25
7852: PUSH
7853: LD_INT 1
7855: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7856: LD_ADDR_VAR 0 4
7860: PUSH
7861: LD_STRING Q2b
7863: PPUSH
7864: LD_INT 1
7866: PUSH
7867: LD_INT 2
7869: PUSH
7870: LD_INT 3
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: LIST
7877: PPUSH
7878: CALL_OW 98
7882: ST_TO_ADDR
// if dec2 = 1 then
7883: LD_VAR 0 4
7887: PUSH
7888: LD_INT 1
7890: EQUAL
7891: IFFALSE 7925
// begin Say ( JMM , D4a-JMM-1 ) ;
7893: LD_EXP 1
7897: PPUSH
7898: LD_STRING D4a-JMM-1
7900: PPUSH
7901: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7905: LD_EXP 17
7909: PPUSH
7910: LD_STRING D4b-Kurt-1
7912: PPUSH
7913: CALL_OW 88
// warWithLegion = 1 ;
7917: LD_ADDR_EXP 23
7921: PUSH
7922: LD_INT 1
7924: ST_TO_ADDR
// end ; if dec2 = 2 then
7925: LD_VAR 0 4
7929: PUSH
7930: LD_INT 2
7932: EQUAL
7933: IFFALSE 7967
// begin Say ( JMM , D4b-JMM-1 ) ;
7935: LD_EXP 1
7939: PPUSH
7940: LD_STRING D4b-JMM-1
7942: PPUSH
7943: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7947: LD_EXP 17
7951: PPUSH
7952: LD_STRING D4b-Kurt-1
7954: PPUSH
7955: CALL_OW 88
// warWithLegion = 1 ;
7959: LD_ADDR_EXP 23
7963: PUSH
7964: LD_INT 1
7966: ST_TO_ADDR
// end ; if dec2 = 3 then
7967: LD_VAR 0 4
7971: PUSH
7972: LD_INT 3
7974: EQUAL
7975: IFFALSE 8033
// begin Say ( JMM , D4c-JMM-1 ) ;
7977: LD_EXP 1
7981: PPUSH
7982: LD_STRING D4c-JMM-1
7984: PPUSH
7985: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7989: LD_EXP 17
7993: PPUSH
7994: LD_STRING D4c-Kurt-1
7996: PPUSH
7997: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8001: LD_EXP 1
8005: PPUSH
8006: LD_STRING D4c-JMM-2
8008: PPUSH
8009: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8013: LD_EXP 17
8017: PPUSH
8018: LD_STRING D4c-Kurt-2
8020: PPUSH
8021: CALL_OW 88
// fakeInfo = 1 ;
8025: LD_ADDR_EXP 24
8029: PUSH
8030: LD_INT 1
8032: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
8033: LD_VAR 0 3
8037: PUSH
8038: LD_INT 4
8040: EQUAL
8041: IFFALSE 9103
// begin Say ( JMM , D3Kd-JMM-1 ) ;
8043: LD_EXP 1
8047: PPUSH
8048: LD_STRING D3Kd-JMM-1
8050: PPUSH
8051: CALL_OW 88
// if crates >= [ 200 , 120 ] [ KurtStatus + 1 ] and siberite >= [ 200 , 120 ] [ KurtStatus + 1 ] then
8055: LD_VAR 0 8
8059: PUSH
8060: LD_INT 200
8062: PUSH
8063: LD_INT 120
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: PUSH
8070: LD_EXP 19
8074: PUSH
8075: LD_INT 1
8077: PLUS
8078: ARRAY
8079: GREATEREQUAL
8080: PUSH
8081: LD_VAR 0 10
8085: PUSH
8086: LD_INT 200
8088: PUSH
8089: LD_INT 120
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: PUSH
8096: LD_EXP 19
8100: PUSH
8101: LD_INT 1
8103: PLUS
8104: ARRAY
8105: GREATEREQUAL
8106: AND
8107: IFFALSE 8159
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8109: LD_ADDR_VAR 0 4
8113: PUSH
8114: LD_STRING Q2a
8116: PUSH
8117: LD_STRING Q2aK
8119: PUSH
8120: EMPTY
8121: LIST
8122: LIST
8123: PUSH
8124: LD_EXP 19
8128: PUSH
8129: LD_INT 1
8131: PLUS
8132: ARRAY
8133: PPUSH
8134: LD_INT 1
8136: PUSH
8137: LD_INT 2
8139: PUSH
8140: LD_INT 3
8142: PUSH
8143: LD_INT 4
8145: PUSH
8146: EMPTY
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: PPUSH
8152: CALL_OW 98
8156: ST_TO_ADDR
8157: GO 8323
// if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
8159: LD_VAR 0 8
8163: PUSH
8164: LD_INT 120
8166: PUSH
8167: LD_INT 60
8169: PUSH
8170: EMPTY
8171: LIST
8172: LIST
8173: PUSH
8174: LD_EXP 19
8178: PUSH
8179: LD_INT 1
8181: PLUS
8182: ARRAY
8183: GREATEREQUAL
8184: PUSH
8185: LD_VAR 0 10
8189: PUSH
8190: LD_INT 120
8192: PUSH
8193: LD_INT 60
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: PUSH
8200: LD_EXP 19
8204: PUSH
8205: LD_INT 1
8207: PLUS
8208: ARRAY
8209: GREATEREQUAL
8210: AND
8211: IFFALSE 8259
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 4 ] ) else
8213: LD_ADDR_VAR 0 4
8217: PUSH
8218: LD_STRING Q2a
8220: PUSH
8221: LD_STRING Q2aK
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: PUSH
8228: LD_EXP 19
8232: PUSH
8233: LD_INT 1
8235: PLUS
8236: ARRAY
8237: PPUSH
8238: LD_INT 1
8240: PUSH
8241: LD_INT 2
8243: PUSH
8244: LD_INT 4
8246: PUSH
8247: EMPTY
8248: LIST
8249: LIST
8250: LIST
8251: PPUSH
8252: CALL_OW 98
8256: ST_TO_ADDR
8257: GO 8323
// begin Query ( [ Q2d , Q2dK ] [ KurtStatus + 1 ] ) ;
8259: LD_STRING Q2d
8261: PUSH
8262: LD_STRING Q2dK
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: PUSH
8269: LD_EXP 19
8273: PUSH
8274: LD_INT 1
8276: PLUS
8277: ARRAY
8278: PPUSH
8279: CALL_OW 97
// dec2 := 0 ;
8283: LD_ADDR_VAR 0 4
8287: PUSH
8288: LD_INT 0
8290: ST_TO_ADDR
// Say ( JMM , D3Kc1-JMM-1 ) ;
8291: LD_EXP 1
8295: PPUSH
8296: LD_STRING D3Kc1-JMM-1
8298: PPUSH
8299: CALL_OW 88
// Say ( Kurt , D3Kc2-Kurt-1 ) ;
8303: LD_EXP 17
8307: PPUSH
8308: LD_STRING D3Kc2-Kurt-1
8310: PPUSH
8311: CALL_OW 88
// warWithLegion := 1 ;
8315: LD_ADDR_EXP 23
8319: PUSH
8320: LD_INT 1
8322: ST_TO_ADDR
// end ; if dec2 = 1 then
8323: LD_VAR 0 4
8327: PUSH
8328: LD_INT 1
8330: EQUAL
8331: IFFALSE 8365
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8333: LD_EXP 1
8337: PPUSH
8338: LD_STRING D5Ka-JMM-1
8340: PPUSH
8341: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
8345: LD_EXP 17
8349: PPUSH
8350: LD_STRING D5Ka-Kurt-1
8352: PPUSH
8353: CALL_OW 88
// warWithLegion = 1 ;
8357: LD_ADDR_EXP 23
8361: PUSH
8362: LD_INT 1
8364: ST_TO_ADDR
// end ; if dec2 = 2 then
8365: LD_VAR 0 4
8369: PUSH
8370: LD_INT 2
8372: EQUAL
8373: IFFALSE 8457
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8375: LD_EXP 1
8379: PPUSH
8380: LD_STRING D3Kb-JMM-1
8382: PPUSH
8383: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8387: LD_EXP 17
8391: PPUSH
8392: LD_STRING D3Kb-Kurt-1
8394: PPUSH
8395: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8399: LD_ADDR_VAR 0 11
8403: PUSH
8404: LD_INT 120
8406: PUSH
8407: LD_INT 60
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: PUSH
8414: LD_EXP 19
8418: PUSH
8419: LD_INT 1
8421: PLUS
8422: ARRAY
8423: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8424: LD_ADDR_VAR 0 12
8428: PUSH
8429: LD_INT 120
8431: PUSH
8432: LD_INT 60
8434: PUSH
8435: EMPTY
8436: LIST
8437: LIST
8438: PUSH
8439: LD_EXP 19
8443: PUSH
8444: LD_INT 1
8446: PLUS
8447: ARRAY
8448: ST_TO_ADDR
// payForNeutral := true ;
8449: LD_ADDR_VAR 0 13
8453: PUSH
8454: LD_INT 1
8456: ST_TO_ADDR
// end ; if dec2 = 3 then
8457: LD_VAR 0 4
8461: PUSH
8462: LD_INT 3
8464: EQUAL
8465: IFFALSE 8549
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8467: LD_EXP 1
8471: PPUSH
8472: LD_STRING D3Ke-JMM-1
8474: PPUSH
8475: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
8479: LD_EXP 17
8483: PPUSH
8484: LD_STRING D3Ke-Kurt-1
8486: PPUSH
8487: CALL_OW 88
// cr := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8491: LD_ADDR_VAR 0 11
8495: PUSH
8496: LD_INT 200
8498: PUSH
8499: LD_INT 120
8501: PUSH
8502: EMPTY
8503: LIST
8504: LIST
8505: PUSH
8506: LD_EXP 19
8510: PUSH
8511: LD_INT 1
8513: PLUS
8514: ARRAY
8515: ST_TO_ADDR
// sb := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8516: LD_ADDR_VAR 0 12
8520: PUSH
8521: LD_INT 200
8523: PUSH
8524: LD_INT 120
8526: PUSH
8527: EMPTY
8528: LIST
8529: LIST
8530: PUSH
8531: LD_EXP 19
8535: PUSH
8536: LD_INT 1
8538: PLUS
8539: ARRAY
8540: ST_TO_ADDR
// payForHelp := true ;
8541: LD_ADDR_VAR 0 14
8545: PUSH
8546: LD_INT 1
8548: ST_TO_ADDR
// end ; if dec2 = 4 then
8549: LD_VAR 0 4
8553: PUSH
8554: LD_INT 4
8556: EQUAL
8557: IFFALSE 8792
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8559: LD_EXP 1
8563: PPUSH
8564: LD_STRING D3Kc1-JMM-1
8566: PPUSH
8567: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8571: LD_EXP 17
8575: PPUSH
8576: LD_STRING D3Kc1-Kurt-1
8578: PPUSH
8579: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8583: LD_EXP 1
8587: PPUSH
8588: LD_STRING D3Kc1-JMM-2
8590: PPUSH
8591: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8595: LD_EXP 17
8599: PPUSH
8600: LD_STRING D3Kc1-Kurt-2
8602: PPUSH
8603: CALL_OW 88
// askSiberite = 1 ;
8607: LD_ADDR_EXP 25
8611: PUSH
8612: LD_INT 1
8614: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8615: LD_ADDR_VAR 0 4
8619: PUSH
8620: LD_STRING Q2b
8622: PPUSH
8623: LD_INT 1
8625: PUSH
8626: LD_INT 2
8628: PUSH
8629: LD_INT 3
8631: PUSH
8632: EMPTY
8633: LIST
8634: LIST
8635: LIST
8636: PPUSH
8637: CALL_OW 98
8641: ST_TO_ADDR
// if dec2 = 1 then
8642: LD_VAR 0 4
8646: PUSH
8647: LD_INT 1
8649: EQUAL
8650: IFFALSE 8684
// begin Say ( JMM , D4a-JMM-1 ) ;
8652: LD_EXP 1
8656: PPUSH
8657: LD_STRING D4a-JMM-1
8659: PPUSH
8660: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8664: LD_EXP 17
8668: PPUSH
8669: LD_STRING D4b-Kurt-1
8671: PPUSH
8672: CALL_OW 88
// warWithLegion = 1 ;
8676: LD_ADDR_EXP 23
8680: PUSH
8681: LD_INT 1
8683: ST_TO_ADDR
// end ; if dec2 = 2 then
8684: LD_VAR 0 4
8688: PUSH
8689: LD_INT 2
8691: EQUAL
8692: IFFALSE 8726
// begin Say ( JMM , D4b-JMM-1 ) ;
8694: LD_EXP 1
8698: PPUSH
8699: LD_STRING D4b-JMM-1
8701: PPUSH
8702: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8706: LD_EXP 17
8710: PPUSH
8711: LD_STRING D4b-Kurt-1
8713: PPUSH
8714: CALL_OW 88
// warWithLegion = 1 ;
8718: LD_ADDR_EXP 23
8722: PUSH
8723: LD_INT 1
8725: ST_TO_ADDR
// end ; if dec2 = 3 then
8726: LD_VAR 0 4
8730: PUSH
8731: LD_INT 3
8733: EQUAL
8734: IFFALSE 8792
// begin Say ( JMM , D4c-JMM-1 ) ;
8736: LD_EXP 1
8740: PPUSH
8741: LD_STRING D4c-JMM-1
8743: PPUSH
8744: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8748: LD_EXP 17
8752: PPUSH
8753: LD_STRING D4c-Kurt-1
8755: PPUSH
8756: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8760: LD_EXP 1
8764: PPUSH
8765: LD_STRING D4c-JMM-2
8767: PPUSH
8768: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8772: LD_EXP 17
8776: PPUSH
8777: LD_STRING D4c-Kurt-2
8779: PPUSH
8780: CALL_OW 88
// fakeInfo = 1 ;
8784: LD_ADDR_EXP 24
8788: PUSH
8789: LD_INT 1
8791: ST_TO_ADDR
// end ; end ; if payForNeutral or payForHelp then
8792: LD_VAR 0 13
8796: PUSH
8797: LD_VAR 0 14
8801: OR
8802: IFFALSE 9103
// begin for i in tmp do
8804: LD_ADDR_VAR 0 2
8808: PUSH
8809: LD_VAR 0 5
8813: PUSH
8814: FOR_IN
8815: IFFALSE 9101
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
8817: LD_ADDR_VAR 0 6
8821: PUSH
8822: LD_VAR 0 2
8826: PPUSH
8827: CALL_OW 274
8831: PPUSH
8832: LD_INT 1
8834: PPUSH
8835: CALL_OW 275
8839: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
8840: LD_ADDR_VAR 0 7
8844: PUSH
8845: LD_VAR 0 2
8849: PPUSH
8850: CALL_OW 274
8854: PPUSH
8855: LD_INT 3
8857: PPUSH
8858: CALL_OW 275
8862: ST_TO_ADDR
// if cr then
8863: LD_VAR 0 11
8867: IFFALSE 8981
// begin if tmp2 and tmp2 < cr then
8869: LD_VAR 0 6
8873: PUSH
8874: LD_VAR 0 6
8878: PUSH
8879: LD_VAR 0 11
8883: LESS
8884: AND
8885: IFFALSE 8933
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
8887: LD_VAR 0 2
8891: PPUSH
8892: CALL_OW 274
8896: PPUSH
8897: LD_INT 1
8899: PPUSH
8900: LD_VAR 0 11
8904: PUSH
8905: LD_VAR 0 6
8909: MINUS
8910: PPUSH
8911: CALL_OW 277
// cr := cr - tmp2 ;
8915: LD_ADDR_VAR 0 11
8919: PUSH
8920: LD_VAR 0 11
8924: PUSH
8925: LD_VAR 0 6
8929: MINUS
8930: ST_TO_ADDR
// end else
8931: GO 8981
// if tmp2 > cr then
8933: LD_VAR 0 6
8937: PUSH
8938: LD_VAR 0 11
8942: GREATER
8943: IFFALSE 8981
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
8945: LD_VAR 0 2
8949: PPUSH
8950: CALL_OW 274
8954: PPUSH
8955: LD_INT 1
8957: PPUSH
8958: LD_VAR 0 6
8962: PUSH
8963: LD_VAR 0 11
8967: MINUS
8968: PPUSH
8969: CALL_OW 277
// cr := 0 ;
8973: LD_ADDR_VAR 0 11
8977: PUSH
8978: LD_INT 0
8980: ST_TO_ADDR
// end ; end ; if sb then
8981: LD_VAR 0 12
8985: IFFALSE 9099
// begin if tmp3 and tmp3 < sb then
8987: LD_VAR 0 7
8991: PUSH
8992: LD_VAR 0 7
8996: PUSH
8997: LD_VAR 0 12
9001: LESS
9002: AND
9003: IFFALSE 9051
// begin SetResourceType ( GetBase ( i ) , 3 , sb - tmp3 ) ;
9005: LD_VAR 0 2
9009: PPUSH
9010: CALL_OW 274
9014: PPUSH
9015: LD_INT 3
9017: PPUSH
9018: LD_VAR 0 12
9022: PUSH
9023: LD_VAR 0 7
9027: MINUS
9028: PPUSH
9029: CALL_OW 277
// sb := sb - tmp3 ;
9033: LD_ADDR_VAR 0 12
9037: PUSH
9038: LD_VAR 0 12
9042: PUSH
9043: LD_VAR 0 7
9047: MINUS
9048: ST_TO_ADDR
// end else
9049: GO 9099
// if tmp3 > sb then
9051: LD_VAR 0 7
9055: PUSH
9056: LD_VAR 0 12
9060: GREATER
9061: IFFALSE 9099
// begin SetResourceType ( GetBase ( i ) , 3 , tmp3 - sb ) ;
9063: LD_VAR 0 2
9067: PPUSH
9068: CALL_OW 274
9072: PPUSH
9073: LD_INT 3
9075: PPUSH
9076: LD_VAR 0 7
9080: PUSH
9081: LD_VAR 0 12
9085: MINUS
9086: PPUSH
9087: CALL_OW 277
// sb := 0 ;
9091: LD_ADDR_VAR 0 12
9095: PUSH
9096: LD_INT 0
9098: ST_TO_ADDR
// end ; end ; end ;
9099: GO 8814
9101: POP
9102: POP
// end ; end ; DialogueOff ;
9103: CALL_OW 7
// RemoveSeeing ( 167 , 121 , 1 ) ;
9107: LD_INT 167
9109: PPUSH
9110: LD_INT 121
9112: PPUSH
9113: LD_INT 1
9115: PPUSH
9116: CALL_OW 331
// ComEnterUnit ( Kurt , KurtVeh ) ;
9120: LD_EXP 17
9124: PPUSH
9125: LD_EXP 18
9129: PPUSH
9130: CALL_OW 120
// wait ( 0 0$1 ) ;
9134: LD_INT 35
9136: PPUSH
9137: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9141: LD_EXP 18
9145: PPUSH
9146: LD_INT 4
9148: PPUSH
9149: CALL_OW 113
// wait ( 0 0$3 ) ;
9153: LD_INT 105
9155: PPUSH
9156: CALL_OW 67
// RemoveUnit ( Kurt ) ;
9160: LD_EXP 17
9164: PPUSH
9165: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9169: LD_EXP 18
9173: PPUSH
9174: CALL_OW 64
// wait ( 0 0$3 ) ;
9178: LD_INT 105
9180: PPUSH
9181: CALL_OW 67
// if payForHelp then
9185: LD_VAR 0 14
9189: IFFALSE 9247
// begin HiddenCamera ( 36 , 57 , 1 ) ;
9191: LD_INT 36
9193: PPUSH
9194: LD_INT 57
9196: PPUSH
9197: LD_INT 1
9199: PPUSH
9200: CALL_OW 244
// HiddenCamera ( 51 , 63 , 1 ) ;
9204: LD_INT 51
9206: PPUSH
9207: LD_INT 63
9209: PPUSH
9210: LD_INT 1
9212: PPUSH
9213: CALL_OW 244
// HiddenCamera ( 93 , 65 , 1 ) ;
9217: LD_INT 93
9219: PPUSH
9220: LD_INT 65
9222: PPUSH
9223: LD_INT 1
9225: PPUSH
9226: CALL_OW 244
// HiddenCamera ( 42 , 12 , 1 ) ;
9230: LD_INT 42
9232: PPUSH
9233: LD_INT 12
9235: PPUSH
9236: LD_INT 1
9238: PPUSH
9239: CALL_OW 244
// PrepareLegionForPlayer ;
9243: CALL 4762 0 0
// end ; end ;
9247: LD_VAR 0 1
9251: RET
// every 0 0$10 trigger warWithLegion = 1 do
9252: LD_EXP 23
9256: PUSH
9257: LD_INT 1
9259: EQUAL
9260: IFFALSE 9276
9262: GO 9264
9264: DISABLE
// begin wait ( 0 0$30 ) ;
9265: LD_INT 1050
9267: PPUSH
9268: CALL_OW 67
// PrepareAttackLegion ;
9272: CALL 5426 0 0
// end ;
9276: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do var i ;
9277: LD_INT 120
9279: PUSH
9280: LD_INT 17
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: PUSH
9287: LD_INT 52
9289: PUSH
9290: EMPTY
9291: LIST
9292: PUSH
9293: EMPTY
9294: LIST
9295: LIST
9296: PPUSH
9297: CALL_OW 69
9301: IFFALSE 9446
9303: GO 9305
9305: DISABLE
9306: LD_INT 0
9308: PPUSH
// begin enable ;
9309: ENABLE
// for i in FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do
9310: LD_ADDR_VAR 0 1
9314: PUSH
9315: LD_INT 120
9317: PUSH
9318: LD_INT 17
9320: PUSH
9321: EMPTY
9322: LIST
9323: LIST
9324: PUSH
9325: LD_INT 52
9327: PUSH
9328: EMPTY
9329: LIST
9330: PUSH
9331: EMPTY
9332: LIST
9333: LIST
9334: PPUSH
9335: CALL_OW 69
9339: PUSH
9340: FOR_IN
9341: IFFALSE 9444
// begin if GetMultiCargo ( i ) [ 4 ] = 0 and GetSide ( i ) = 1 then
9343: LD_VAR 0 1
9347: PPUSH
9348: CALL 78348 0 1
9352: PUSH
9353: LD_INT 4
9355: ARRAY
9356: PUSH
9357: LD_INT 0
9359: EQUAL
9360: PUSH
9361: LD_VAR 0 1
9365: PPUSH
9366: CALL_OW 255
9370: PUSH
9371: LD_INT 1
9373: EQUAL
9374: AND
9375: IFFALSE 9389
// SetSide ( i , 4 ) ;
9377: LD_VAR 0 1
9381: PPUSH
9382: LD_INT 4
9384: PPUSH
9385: CALL_OW 235
// if GetSide ( i ) = 4 then
9389: LD_VAR 0 1
9393: PPUSH
9394: CALL_OW 255
9398: PUSH
9399: LD_INT 4
9401: EQUAL
9402: IFFALSE 9442
// if not IsInArea ( i , PlayerSpawn ) then
9404: LD_VAR 0 1
9408: PPUSH
9409: LD_INT 4
9411: PPUSH
9412: CALL_OW 308
9416: NOT
9417: IFFALSE 9433
// ComMoveToArea ( i , PlayerSpawn ) else
9419: LD_VAR 0 1
9423: PPUSH
9424: LD_INT 4
9426: PPUSH
9427: CALL_OW 113
9431: GO 9442
// RemoveUnit ( i ) ;
9433: LD_VAR 0 1
9437: PPUSH
9438: CALL_OW 64
// end ;
9442: GO 9340
9444: POP
9445: POP
// end ;
9446: PPOPN 1
9448: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
9449: LD_EXP 20
9453: PUSH
9454: LD_INT 1
9456: EQUAL
9457: IFFALSE 9896
9459: GO 9461
9461: DISABLE
9462: LD_INT 0
9464: PPUSH
9465: PPUSH
9466: PPUSH
// begin enable ;
9467: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9468: LD_ADDR_VAR 0 2
9472: PUSH
9473: LD_INT 12
9475: PPUSH
9476: LD_INT 22
9478: PUSH
9479: LD_INT 3
9481: PUSH
9482: EMPTY
9483: LIST
9484: LIST
9485: PUSH
9486: LD_INT 21
9488: PUSH
9489: LD_INT 2
9491: PUSH
9492: EMPTY
9493: LIST
9494: LIST
9495: PUSH
9496: EMPTY
9497: LIST
9498: LIST
9499: PPUSH
9500: CALL_OW 70
9504: ST_TO_ADDR
// for i in enemyVehs do
9505: LD_ADDR_VAR 0 1
9509: PUSH
9510: LD_VAR 0 2
9514: PUSH
9515: FOR_IN
9516: IFFALSE 9894
// begin if See ( 1 , i ) then
9518: LD_INT 1
9520: PPUSH
9521: LD_VAR 0 1
9525: PPUSH
9526: CALL_OW 292
9530: IFFALSE 9892
// begin disable ;
9532: DISABLE
// DialogueOn ;
9533: CALL_OW 6
// CenterNowOnUnits ( i ) ;
9537: LD_VAR 0 1
9541: PPUSH
9542: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
9546: LD_INT 22
9548: PUSH
9549: LD_INT 1
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: PUSH
9556: LD_INT 26
9558: PUSH
9559: LD_INT 1
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: PUSH
9566: LD_INT 2
9568: PUSH
9569: LD_INT 25
9571: PUSH
9572: LD_INT 1
9574: PUSH
9575: EMPTY
9576: LIST
9577: LIST
9578: PUSH
9579: LD_INT 25
9581: PUSH
9582: LD_INT 2
9584: PUSH
9585: EMPTY
9586: LIST
9587: LIST
9588: PUSH
9589: LD_INT 25
9591: PUSH
9592: LD_INT 3
9594: PUSH
9595: EMPTY
9596: LIST
9597: LIST
9598: PUSH
9599: LD_INT 25
9601: PUSH
9602: LD_INT 4
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: PUSH
9609: LD_INT 25
9611: PUSH
9612: LD_INT 5
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: PUSH
9619: LD_INT 25
9621: PUSH
9622: LD_INT 8
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: PUSH
9629: EMPTY
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: LIST
9642: PPUSH
9643: CALL_OW 69
9647: PPUSH
9648: LD_STRING DT1-Sol1-1
9650: PPUSH
9651: LD_STRING DT1-FSol1-1
9653: PPUSH
9654: CALL 12082 0 3
// dec = ShowQuery2 ;
9658: LD_ADDR_VAR 0 3
9662: PUSH
9663: CALL 12566 0 0
9667: ST_TO_ADDR
// if dec = 1 then
9668: LD_VAR 0 3
9672: PUSH
9673: LD_INT 1
9675: EQUAL
9676: IFFALSE 9782
// begin Say ( JMM , D2-JMM-1 ) ;
9678: LD_EXP 1
9682: PPUSH
9683: LD_STRING D2-JMM-1
9685: PPUSH
9686: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9690: LD_EXP 15
9694: PPUSH
9695: LD_STRING D2-Pow-1
9697: PPUSH
9698: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
9702: LD_EXP 1
9706: PPUSH
9707: LD_STRING D2a-JMM-1
9709: PPUSH
9710: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
9714: LD_EXP 15
9718: PPUSH
9719: LD_STRING D2a-Pow-1
9721: PPUSH
9722: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
9726: LD_EXP 1
9730: PPUSH
9731: LD_STRING D2a-JMM-2
9733: PPUSH
9734: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
9738: LD_EXP 15
9742: PPUSH
9743: LD_STRING D2a-Pow-2
9745: PPUSH
9746: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
9750: LD_EXP 1
9754: PPUSH
9755: LD_STRING D2a-JMM-3
9757: PPUSH
9758: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
9762: LD_EXP 15
9766: PPUSH
9767: LD_STRING D2a-Pow-3
9769: PPUSH
9770: CALL_OW 94
// secondPass = 2 ;
9774: LD_ADDR_EXP 20
9778: PUSH
9779: LD_INT 2
9781: ST_TO_ADDR
// end ; if dec = 2 then
9782: LD_VAR 0 3
9786: PUSH
9787: LD_INT 2
9789: EQUAL
9790: IFFALSE 9884
// begin Say ( JMM , D2-JMM-1 ) ;
9792: LD_EXP 1
9796: PPUSH
9797: LD_STRING D2-JMM-1
9799: PPUSH
9800: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9804: LD_EXP 15
9808: PPUSH
9809: LD_STRING D2-Pow-1
9811: PPUSH
9812: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
9816: LD_EXP 1
9820: PPUSH
9821: LD_STRING D2b-JMM-1
9823: PPUSH
9824: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
9828: LD_EXP 15
9832: PPUSH
9833: LD_STRING D2b-Pow-1
9835: PPUSH
9836: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
9840: LD_EXP 1
9844: PPUSH
9845: LD_STRING D2c-JMM-1
9847: PPUSH
9848: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
9852: LD_EXP 15
9856: PPUSH
9857: LD_STRING D2c-Pow-1
9859: PPUSH
9860: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
9864: LD_EXP 1
9868: PPUSH
9869: LD_STRING D2c-JMM-2
9871: PPUSH
9872: CALL_OW 88
// secondPass = 2 ;
9876: LD_ADDR_EXP 20
9880: PUSH
9881: LD_INT 2
9883: ST_TO_ADDR
// end ; DialogueOff ;
9884: CALL_OW 7
// exit ;
9888: POP
9889: POP
9890: GO 9896
// end ; end ;
9892: GO 9515
9894: POP
9895: POP
// end ;
9896: PPOPN 3
9898: END
// every 0 0$1 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) do var vehicles ;
9899: LD_EXP 21
9903: PUSH
9904: LD_INT 1
9906: EQUAL
9907: PUSH
9908: LD_INT 11
9910: PPUSH
9911: LD_INT 22
9913: PUSH
9914: LD_INT 3
9916: PUSH
9917: EMPTY
9918: LIST
9919: LIST
9920: PPUSH
9921: CALL_OW 70
9925: AND
9926: IFFALSE 10154
9928: GO 9930
9930: DISABLE
9931: LD_INT 0
9933: PPUSH
// begin vehicles := FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
9934: LD_ADDR_VAR 0 1
9938: PUSH
9939: LD_INT 11
9941: PPUSH
9942: LD_INT 22
9944: PUSH
9945: LD_INT 3
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: PPUSH
9952: CALL_OW 70
9956: ST_TO_ADDR
// if not vehicles then
9957: LD_VAR 0 1
9961: NOT
9962: IFFALSE 9966
// exit ;
9964: GO 10154
// repeat wait ( 0 0$1 ) ;
9966: LD_INT 35
9968: PPUSH
9969: CALL_OW 67
// until UnitFilter ( vehicles , [ f_see , 1 ] ) ;
9973: LD_VAR 0 1
9977: PPUSH
9978: LD_INT 101
9980: PUSH
9981: LD_INT 1
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: PPUSH
9988: CALL_OW 72
9992: IFFALSE 9966
// CenterNowOnUnits ( UnitFilter ( vehicles , [ f_see , 1 ] ) [ 1 ] ) ;
9994: LD_VAR 0 1
9998: PPUSH
9999: LD_INT 101
10001: PUSH
10002: LD_INT 1
10004: PUSH
10005: EMPTY
10006: LIST
10007: LIST
10008: PPUSH
10009: CALL_OW 72
10013: PUSH
10014: LD_INT 1
10016: ARRAY
10017: PPUSH
10018: CALL_OW 87
// DialogueOn ;
10022: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10026: LD_INT 22
10028: PUSH
10029: LD_INT 1
10031: PUSH
10032: EMPTY
10033: LIST
10034: LIST
10035: PUSH
10036: LD_INT 26
10038: PUSH
10039: LD_INT 1
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: PUSH
10046: LD_INT 2
10048: PUSH
10049: LD_INT 25
10051: PUSH
10052: LD_INT 1
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: PUSH
10059: LD_INT 25
10061: PUSH
10062: LD_INT 2
10064: PUSH
10065: EMPTY
10066: LIST
10067: LIST
10068: PUSH
10069: LD_INT 25
10071: PUSH
10072: LD_INT 3
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: PUSH
10079: LD_INT 25
10081: PUSH
10082: LD_INT 4
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: PUSH
10089: LD_INT 25
10091: PUSH
10092: LD_INT 5
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PUSH
10099: LD_INT 25
10101: PUSH
10102: LD_INT 8
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: PUSH
10109: EMPTY
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: PUSH
10118: EMPTY
10119: LIST
10120: LIST
10121: LIST
10122: PPUSH
10123: CALL_OW 69
10127: PPUSH
10128: LD_STRING DT1-Sol1-1
10130: PPUSH
10131: LD_STRING DT1-FSol1-1
10133: PPUSH
10134: CALL 12082 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10138: LD_EXP 1
10142: PPUSH
10143: LD_STRING DT1-JMM-1
10145: PPUSH
10146: CALL_OW 88
// DialogueOff ;
10150: CALL_OW 7
// end ;
10154: PPOPN 1
10156: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter do
10157: LD_EXP 21
10161: PUSH
10162: LD_INT 1
10164: EQUAL
10165: PUSH
10166: LD_INT 11
10168: PPUSH
10169: LD_INT 22
10171: PUSH
10172: LD_INT 3
10174: PUSH
10175: EMPTY
10176: LIST
10177: LIST
10178: PUSH
10179: LD_INT 50
10181: PUSH
10182: EMPTY
10183: LIST
10184: PUSH
10185: LD_INT 2
10187: PUSH
10188: LD_INT 21
10190: PUSH
10191: LD_INT 2
10193: PUSH
10194: EMPTY
10195: LIST
10196: LIST
10197: PUSH
10198: LD_INT 21
10200: PUSH
10201: LD_INT 1
10203: PUSH
10204: EMPTY
10205: LIST
10206: LIST
10207: PUSH
10208: EMPTY
10209: LIST
10210: LIST
10211: LIST
10212: PUSH
10213: EMPTY
10214: LIST
10215: LIST
10216: LIST
10217: PPUSH
10218: CALL_OW 70
10222: PUSH
10223: LD_INT 0
10225: EQUAL
10226: AND
10227: PUSH
10228: LD_EXP 22
10232: AND
10233: IFFALSE 10390
10235: GO 10237
10237: DISABLE
// begin vehicleTeleported = 2 ;
10238: LD_ADDR_EXP 21
10242: PUSH
10243: LD_INT 2
10245: ST_TO_ADDR
// DialogueOn ;
10246: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
10250: LD_EXP 1
10254: PPUSH
10255: LD_STRING DT1a-JMM-1
10257: PPUSH
10258: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
10262: LD_INT 22
10264: PUSH
10265: LD_INT 1
10267: PUSH
10268: EMPTY
10269: LIST
10270: LIST
10271: PUSH
10272: LD_INT 26
10274: PUSH
10275: LD_INT 1
10277: PUSH
10278: EMPTY
10279: LIST
10280: LIST
10281: PUSH
10282: LD_INT 2
10284: PUSH
10285: LD_INT 25
10287: PUSH
10288: LD_INT 1
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: PUSH
10295: LD_INT 25
10297: PUSH
10298: LD_INT 2
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: PUSH
10305: LD_INT 25
10307: PUSH
10308: LD_INT 3
10310: PUSH
10311: EMPTY
10312: LIST
10313: LIST
10314: PUSH
10315: LD_INT 25
10317: PUSH
10318: LD_INT 4
10320: PUSH
10321: EMPTY
10322: LIST
10323: LIST
10324: PUSH
10325: LD_INT 25
10327: PUSH
10328: LD_INT 5
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: PUSH
10335: LD_INT 25
10337: PUSH
10338: LD_INT 8
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: LIST
10358: PPUSH
10359: CALL_OW 69
10363: PPUSH
10364: LD_STRING DT1a-Sol1-1
10366: PPUSH
10367: LD_STRING DT1a-FSol1-1
10369: PPUSH
10370: CALL 12082 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
10374: LD_EXP 1
10378: PPUSH
10379: LD_STRING DT1a-JMM-2
10381: PPUSH
10382: CALL_OW 88
// DialogueOff ;
10386: CALL_OW 7
// end ;
10390: END
// every 0 0$2 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] ] ) do var i , vehicles , speaker ;
10391: LD_EXP 21
10395: PUSH
10396: LD_INT 3
10398: EQUAL
10399: PUSH
10400: LD_INT 11
10402: PPUSH
10403: LD_INT 22
10405: PUSH
10406: LD_INT 3
10408: PUSH
10409: EMPTY
10410: LIST
10411: LIST
10412: PUSH
10413: LD_INT 101
10415: PUSH
10416: LD_INT 1
10418: PUSH
10419: EMPTY
10420: LIST
10421: LIST
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: PPUSH
10427: CALL_OW 70
10431: AND
10432: IFFALSE 10706
10434: GO 10436
10436: DISABLE
10437: LD_INT 0
10439: PPUSH
10440: PPUSH
10441: PPUSH
// begin wait ( 0 0$0.3 ) ;
10442: LD_INT 10
10444: PPUSH
10445: CALL_OW 67
// DialogueOn ;
10449: CALL_OW 6
// speaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
10453: LD_ADDR_VAR 0 3
10457: PUSH
10458: LD_INT 22
10460: PUSH
10461: LD_INT 1
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PUSH
10468: LD_INT 26
10470: PUSH
10471: LD_INT 1
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: PUSH
10478: LD_INT 2
10480: PUSH
10481: LD_INT 25
10483: PUSH
10484: LD_INT 1
10486: PUSH
10487: EMPTY
10488: LIST
10489: LIST
10490: PUSH
10491: LD_INT 25
10493: PUSH
10494: LD_INT 2
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: PUSH
10501: LD_INT 25
10503: PUSH
10504: LD_INT 3
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: PUSH
10511: LD_INT 25
10513: PUSH
10514: LD_INT 4
10516: PUSH
10517: EMPTY
10518: LIST
10519: LIST
10520: PUSH
10521: LD_INT 25
10523: PUSH
10524: LD_INT 5
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: PUSH
10531: LD_INT 25
10533: PUSH
10534: LD_INT 8
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: PUSH
10550: EMPTY
10551: LIST
10552: LIST
10553: LIST
10554: PPUSH
10555: CALL_OW 69
10559: PPUSH
10560: LD_STRING DT2-Sol1-1
10562: PPUSH
10563: LD_STRING DT2-FSol1-1
10565: PPUSH
10566: CALL 12082 0 3
10570: ST_TO_ADDR
// DialogueOff ;
10571: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
10575: LD_INT 35
10577: PPUSH
10578: CALL_OW 67
// until not FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] ] ) ;
10582: LD_INT 11
10584: PPUSH
10585: LD_INT 22
10587: PUSH
10588: LD_INT 3
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: PUSH
10595: LD_INT 50
10597: PUSH
10598: EMPTY
10599: LIST
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: PPUSH
10605: CALL_OW 70
10609: NOT
10610: IFFALSE 10575
// wait ( 0 0$2 ) ;
10612: LD_INT 70
10614: PPUSH
10615: CALL_OW 67
// vehicleTeleported = 4 ;
10619: LD_ADDR_EXP 21
10623: PUSH
10624: LD_INT 4
10626: ST_TO_ADDR
// DialogueOn ;
10627: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
10631: LD_EXP 1
10635: PPUSH
10636: LD_STRING DT2a-JMM-1
10638: PPUSH
10639: CALL_OW 88
// if speaker then
10643: LD_VAR 0 3
10647: IFFALSE 10690
// if GetSex ( speaker ) = 1 then
10649: LD_VAR 0 3
10653: PPUSH
10654: CALL_OW 258
10658: PUSH
10659: LD_INT 1
10661: EQUAL
10662: IFFALSE 10678
// Say ( speaker , DT2a-Sol1-1 ) else
10664: LD_VAR 0 3
10668: PPUSH
10669: LD_STRING DT2a-Sol1-1
10671: PPUSH
10672: CALL_OW 88
10676: GO 10690
// Say ( speaker , DT2a-FSol1-1 ) ;
10678: LD_VAR 0 3
10682: PPUSH
10683: LD_STRING DT2a-FSol1-1
10685: PPUSH
10686: CALL_OW 88
// Say ( Donaldson , DT2a-Don-1 ) ;
10690: LD_EXP 3
10694: PPUSH
10695: LD_STRING DT2a-Don-1
10697: PPUSH
10698: CALL_OW 88
// DialogueOff ;
10702: CALL_OW 7
// end ;
10706: PPOPN 3
10708: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
10709: LD_INT 1
10711: PPUSH
10712: LD_INT 45
10714: PPUSH
10715: LD_INT 74
10717: PPUSH
10718: CALL_OW 293
10722: IFFALSE 10886
10724: GO 10726
10726: DISABLE
// begin DialogueOn ;
10727: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
10731: LD_INT 36
10733: PPUSH
10734: LD_INT 55
10736: PPUSH
10737: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
10741: LD_INT 22
10743: PUSH
10744: LD_INT 1
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: PUSH
10751: LD_INT 26
10753: PUSH
10754: LD_INT 1
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: PUSH
10761: LD_INT 2
10763: PUSH
10764: LD_INT 25
10766: PUSH
10767: LD_INT 1
10769: PUSH
10770: EMPTY
10771: LIST
10772: LIST
10773: PUSH
10774: LD_INT 25
10776: PUSH
10777: LD_INT 2
10779: PUSH
10780: EMPTY
10781: LIST
10782: LIST
10783: PUSH
10784: LD_INT 25
10786: PUSH
10787: LD_INT 3
10789: PUSH
10790: EMPTY
10791: LIST
10792: LIST
10793: PUSH
10794: LD_INT 25
10796: PUSH
10797: LD_INT 4
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: PUSH
10804: LD_INT 25
10806: PUSH
10807: LD_INT 5
10809: PUSH
10810: EMPTY
10811: LIST
10812: LIST
10813: PUSH
10814: LD_INT 25
10816: PUSH
10817: LD_INT 8
10819: PUSH
10820: EMPTY
10821: LIST
10822: LIST
10823: PUSH
10824: EMPTY
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: LIST
10837: PPUSH
10838: CALL_OW 69
10842: PPUSH
10843: LD_STRING D5-Sol1-1
10845: PPUSH
10846: LD_STRING D5-FSol1-
10848: PPUSH
10849: CALL 12082 0 3
// if warWithLegion and IsOk ( Donaldson ) then
10853: LD_EXP 23
10857: PUSH
10858: LD_EXP 3
10862: PPUSH
10863: CALL_OW 302
10867: AND
10868: IFFALSE 10882
// Say ( Donaldson , D5-Don-1 ) ;
10870: LD_EXP 3
10874: PPUSH
10875: LD_STRING D5-Don-1
10877: PPUSH
10878: CALL_OW 88
// DialogueOff ;
10882: CALL_OW 7
// end ;
10886: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
10887: LD_INT 1
10889: PPUSH
10890: LD_INT 10
10892: PPUSH
10893: CALL_OW 292
10897: PUSH
10898: LD_INT 1
10900: PPUSH
10901: LD_INT 137
10903: PPUSH
10904: CALL_OW 292
10908: OR
10909: IFFALSE 11053
10911: GO 10913
10913: DISABLE
// begin DialogueOn ;
10914: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
10918: LD_INT 22
10920: PUSH
10921: LD_INT 1
10923: PUSH
10924: EMPTY
10925: LIST
10926: LIST
10927: PUSH
10928: LD_INT 26
10930: PUSH
10931: LD_INT 1
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: PUSH
10938: LD_INT 2
10940: PUSH
10941: LD_INT 25
10943: PUSH
10944: LD_INT 1
10946: PUSH
10947: EMPTY
10948: LIST
10949: LIST
10950: PUSH
10951: LD_INT 25
10953: PUSH
10954: LD_INT 2
10956: PUSH
10957: EMPTY
10958: LIST
10959: LIST
10960: PUSH
10961: LD_INT 25
10963: PUSH
10964: LD_INT 3
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: PUSH
10971: LD_INT 25
10973: PUSH
10974: LD_INT 4
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: PUSH
10981: LD_INT 25
10983: PUSH
10984: LD_INT 5
10986: PUSH
10987: EMPTY
10988: LIST
10989: LIST
10990: PUSH
10991: LD_INT 25
10993: PUSH
10994: LD_INT 8
10996: PUSH
10997: EMPTY
10998: LIST
10999: LIST
11000: PUSH
11001: EMPTY
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: PUSH
11010: EMPTY
11011: LIST
11012: LIST
11013: LIST
11014: PPUSH
11015: CALL_OW 69
11019: PPUSH
11020: LD_STRING DT3-Sol1-1
11022: PPUSH
11023: LD_STRING DT3-FSol1-1
11025: PPUSH
11026: CALL 12082 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11030: LD_EXP 1
11034: PPUSH
11035: LD_STRING DT3-JMM-1
11037: PPUSH
11038: CALL_OW 88
// DialogueOff ;
11042: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11046: LD_STRING M2
11048: PPUSH
11049: CALL_OW 337
// end ;
11053: END
// every 0 0$1 trigger ruEscape = 0 and ( FilterUnitsInArea ( RuEastBase , [ f_side , 1 ] ) or FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ) do
11054: LD_EXP 35
11058: PUSH
11059: LD_INT 0
11061: EQUAL
11062: PUSH
11063: LD_INT 10
11065: PPUSH
11066: LD_INT 22
11068: PUSH
11069: LD_INT 1
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: PPUSH
11076: CALL_OW 70
11080: PUSH
11081: LD_INT 10
11083: PPUSH
11084: LD_INT 22
11086: PUSH
11087: LD_INT 3
11089: PUSH
11090: EMPTY
11091: LIST
11092: LIST
11093: PUSH
11094: LD_INT 3
11096: PUSH
11097: LD_INT 24
11099: PUSH
11100: LD_INT 1000
11102: PUSH
11103: EMPTY
11104: LIST
11105: LIST
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: PUSH
11111: LD_INT 21
11113: PUSH
11114: LD_INT 2
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: PUSH
11121: LD_INT 58
11123: PUSH
11124: EMPTY
11125: LIST
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: PPUSH
11133: CALL_OW 70
11137: OR
11138: AND
11139: IFFALSE 11152
11141: GO 11143
11143: DISABLE
// ruEscape := 1 ;
11144: LD_ADDR_EXP 35
11148: PUSH
11149: LD_INT 1
11151: ST_TO_ADDR
11152: END
// every 0 0$3 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or FilterUnitsInArea ( EscapeTriggerArea , [ f_side , 1 ] ) > 0 or ruEscape = 1 do var i , unit , tmp ;
11153: LD_INT 3
11155: PPUSH
11156: CALL_OW 303
11160: PUSH
11161: LD_INT 4
11163: PPUSH
11164: CALL_OW 303
11168: OR
11169: PUSH
11170: LD_INT 22
11172: PPUSH
11173: LD_INT 22
11175: PUSH
11176: LD_INT 1
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: PPUSH
11183: CALL_OW 70
11187: PUSH
11188: LD_INT 0
11190: GREATER
11191: OR
11192: PUSH
11193: LD_EXP 35
11197: PUSH
11198: LD_INT 1
11200: EQUAL
11201: OR
11202: IFFALSE 11750
11204: GO 11206
11206: DISABLE
11207: LD_INT 0
11209: PPUSH
11210: PPUSH
11211: PPUSH
// begin ruAI := 0 ;
11212: LD_ADDR_EXP 34
11216: PUSH
11217: LD_INT 0
11219: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
11220: LD_EXP 27
11224: PPUSH
11225: CALL_OW 122
// wait ( 0 0$1 ) ;
11229: LD_INT 35
11231: PPUSH
11232: CALL_OW 67
// DialogueOn ;
11236: CALL_OW 6
// PlaceSeeing ( 75 , 21 , 1 , 12 ) ;
11240: LD_INT 75
11242: PPUSH
11243: LD_INT 21
11245: PPUSH
11246: LD_INT 1
11248: PPUSH
11249: LD_INT 12
11251: PPUSH
11252: CALL_OW 330
// CenterNowOnXY ( 75 , 21 ) ;
11256: LD_INT 75
11258: PPUSH
11259: LD_INT 21
11261: PPUSH
11262: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
11266: LD_INT 10
11268: PPUSH
11269: CALL_OW 68
// Say ( JMM , D6-JMM-1 ) ;
11273: LD_EXP 1
11277: PPUSH
11278: LD_STRING D6-JMM-1
11280: PPUSH
11281: CALL_OW 88
// RemoveSeeing ( 75 , 21 , 1 ) ;
11285: LD_INT 75
11287: PPUSH
11288: LD_INT 21
11290: PPUSH
11291: LD_INT 1
11293: PPUSH
11294: CALL_OW 331
// DialogueOff ;
11298: CALL_OW 7
// for i in RuScientists do
11302: LD_ADDR_VAR 0 1
11306: PUSH
11307: LD_EXP 27
11311: PUSH
11312: FOR_IN
11313: IFFALSE 11349
// begin SetSide ( i , 6 ) ;
11315: LD_VAR 0 1
11319: PPUSH
11320: LD_INT 6
11322: PPUSH
11323: CALL_OW 235
// SetTag ( i , rand ( 1 , 3 ) ) ;
11327: LD_VAR 0 1
11331: PPUSH
11332: LD_INT 1
11334: PPUSH
11335: LD_INT 3
11337: PPUSH
11338: CALL_OW 12
11342: PPUSH
11343: CALL_OW 109
// end ;
11347: GO 11312
11349: POP
11350: POP
// repeat wait ( 0 0$1 ) ;
11351: LD_INT 35
11353: PPUSH
11354: CALL_OW 67
// for i in RuScientists do
11358: LD_ADDR_VAR 0 1
11362: PUSH
11363: LD_EXP 27
11367: PUSH
11368: FOR_IN
11369: IFFALSE 11741
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , i , 10 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11371: LD_ADDR_VAR 0 3
11375: PUSH
11376: LD_INT 22
11378: PUSH
11379: LD_INT 3
11381: PUSH
11382: EMPTY
11383: LIST
11384: LIST
11385: PUSH
11386: LD_INT 91
11388: PUSH
11389: LD_VAR 0 1
11393: PUSH
11394: LD_INT 10
11396: PUSH
11397: EMPTY
11398: LIST
11399: LIST
11400: LIST
11401: PUSH
11402: LD_INT 21
11404: PUSH
11405: LD_INT 2
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: LD_INT 58
11414: PUSH
11415: EMPTY
11416: LIST
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: PPUSH
11424: CALL_OW 69
11428: ST_TO_ADDR
// if tmp and not IsInUnit ( i ) then
11429: LD_VAR 0 3
11433: PUSH
11434: LD_VAR 0 1
11438: PPUSH
11439: CALL_OW 310
11443: NOT
11444: AND
11445: IFFALSE 11473
// begin ComEnterUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
11447: LD_VAR 0 1
11451: PPUSH
11452: LD_VAR 0 3
11456: PPUSH
11457: LD_VAR 0 1
11461: PPUSH
11462: CALL_OW 74
11466: PPUSH
11467: CALL_OW 120
// continue ;
11471: GO 11368
// end ; if IsInUnit ( i ) then
11473: LD_VAR 0 1
11477: PPUSH
11478: CALL_OW 310
11482: IFFALSE 11501
// unit := IsInUnit ( i ) else
11484: LD_ADDR_VAR 0 2
11488: PUSH
11489: LD_VAR 0 1
11493: PPUSH
11494: CALL_OW 310
11498: ST_TO_ADDR
11499: GO 11511
// unit := i ;
11501: LD_ADDR_VAR 0 2
11505: PUSH
11506: LD_VAR 0 1
11510: ST_TO_ADDR
// case GetTag ( i ) of 1 :
11511: LD_VAR 0 1
11515: PPUSH
11516: CALL_OW 110
11520: PUSH
11521: LD_INT 1
11523: DOUBLE
11524: EQUAL
11525: IFTRUE 11529
11527: GO 11579
11529: POP
// begin if GetDistUnits ( unit , rutp ) < 13 then
11530: LD_VAR 0 2
11534: PPUSH
11535: LD_INT 137
11537: PPUSH
11538: CALL_OW 296
11542: PUSH
11543: LD_INT 13
11545: LESS
11546: IFFALSE 11562
// ComEnterUnit ( unit , rutp ) else
11548: LD_VAR 0 2
11552: PPUSH
11553: LD_INT 137
11555: PPUSH
11556: CALL_OW 120
11560: GO 11577
// ComMoveXY ( unit , 16 , 28 ) ;
11562: LD_VAR 0 2
11566: PPUSH
11567: LD_INT 16
11569: PPUSH
11570: LD_INT 28
11572: PPUSH
11573: CALL_OW 111
// end ; 2 :
11577: GO 11739
11579: LD_INT 2
11581: DOUBLE
11582: EQUAL
11583: IFTRUE 11587
11585: GO 11605
11587: POP
// ComMoveXY ( unit , 97 , 2 ) ; 3 :
11588: LD_VAR 0 2
11592: PPUSH
11593: LD_INT 97
11595: PPUSH
11596: LD_INT 2
11598: PPUSH
11599: CALL_OW 111
11603: GO 11739
11605: LD_INT 3
11607: DOUBLE
11608: EQUAL
11609: IFTRUE 11613
11611: GO 11663
11613: POP
// begin if GetDistUnits ( unit , rutp ) < 13 then
11614: LD_VAR 0 2
11618: PPUSH
11619: LD_INT 137
11621: PPUSH
11622: CALL_OW 296
11626: PUSH
11627: LD_INT 13
11629: LESS
11630: IFFALSE 11646
// ComEnterUnit ( unit , rutp ) else
11632: LD_VAR 0 2
11636: PPUSH
11637: LD_INT 137
11639: PPUSH
11640: CALL_OW 120
11644: GO 11661
// ComMoveXY ( unit , 128 , 155 ) ;
11646: LD_VAR 0 2
11650: PPUSH
11651: LD_INT 128
11653: PPUSH
11654: LD_INT 155
11656: PPUSH
11657: CALL_OW 111
// end ; 11 :
11661: GO 11739
11663: LD_INT 11
11665: DOUBLE
11666: EQUAL
11667: IFTRUE 11671
11669: GO 11689
11671: POP
// ComMoveXY ( unit , 16 , 28 ) ; 13 :
11672: LD_VAR 0 2
11676: PPUSH
11677: LD_INT 16
11679: PPUSH
11680: LD_INT 28
11682: PPUSH
11683: CALL_OW 111
11687: GO 11739
11689: LD_INT 13
11691: DOUBLE
11692: EQUAL
11693: IFTRUE 11697
11695: GO 11712
11697: POP
// ComEnterUnit ( unit , ruteleprt ) ; 23 :
11698: LD_VAR 0 2
11702: PPUSH
11703: LD_INT 10
11705: PPUSH
11706: CALL_OW 120
11710: GO 11739
11712: LD_INT 23
11714: DOUBLE
11715: EQUAL
11716: IFTRUE 11720
11718: GO 11738
11720: POP
// ComMoveXY ( unit , 128 , 155 ) ; end ;
11721: LD_VAR 0 2
11725: PPUSH
11726: LD_INT 128
11728: PPUSH
11729: LD_INT 155
11731: PPUSH
11732: CALL_OW 111
11736: GO 11739
11738: POP
// end ;
11739: GO 11368
11741: POP
11742: POP
// until not RuScientists ;
11743: LD_EXP 27
11747: NOT
11748: IFFALSE 11351
// end ;
11750: PPOPN 3
11752: END
// every 0 0$1 trigger ruAI = 0 and RuScientists and FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do var i , unit , veh , tmp ;
11753: LD_EXP 34
11757: PUSH
11758: LD_INT 0
11760: EQUAL
11761: PUSH
11762: LD_EXP 27
11766: AND
11767: PUSH
11768: LD_INT 22
11770: PUSH
11771: LD_INT 6
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: PUSH
11778: LD_INT 2
11780: PUSH
11781: LD_INT 95
11783: PUSH
11784: LD_INT 13
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: PUSH
11791: LD_INT 95
11793: PUSH
11794: LD_INT 14
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: PUSH
11801: LD_INT 95
11803: PUSH
11804: LD_INT 27
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: PUSH
11811: EMPTY
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PPUSH
11821: CALL_OW 69
11825: AND
11826: IFFALSE 12039
11828: GO 11830
11830: DISABLE
11831: LD_INT 0
11833: PPUSH
11834: PPUSH
11835: PPUSH
11836: PPUSH
// begin enable ;
11837: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do
11838: LD_ADDR_VAR 0 1
11842: PUSH
11843: LD_INT 22
11845: PUSH
11846: LD_INT 6
11848: PUSH
11849: EMPTY
11850: LIST
11851: LIST
11852: PUSH
11853: LD_INT 2
11855: PUSH
11856: LD_INT 95
11858: PUSH
11859: LD_INT 13
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: PUSH
11866: LD_INT 95
11868: PUSH
11869: LD_INT 14
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PUSH
11876: LD_INT 95
11878: PUSH
11879: LD_INT 27
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: PPUSH
11896: CALL_OW 69
11900: PUSH
11901: FOR_IN
11902: IFFALSE 12037
// begin if i in RuScientists then
11904: LD_VAR 0 1
11908: PUSH
11909: LD_EXP 27
11913: IN
11914: IFFALSE 11943
// begin RuScientists = RuScientists diff i ;
11916: LD_ADDR_EXP 27
11920: PUSH
11921: LD_EXP 27
11925: PUSH
11926: LD_VAR 0 1
11930: DIFF
11931: ST_TO_ADDR
// RemoveUnit ( i ) ;
11932: LD_VAR 0 1
11936: PPUSH
11937: CALL_OW 64
// continue ;
11941: GO 11901
// end ; if i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_manual ] ] ) then
11943: LD_VAR 0 1
11947: PUSH
11948: LD_INT 22
11950: PUSH
11951: LD_INT 6
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: PUSH
11958: LD_INT 33
11960: PUSH
11961: LD_INT 1
11963: PUSH
11964: EMPTY
11965: LIST
11966: LIST
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: PPUSH
11972: CALL_OW 69
11976: IN
11977: IFFALSE 12035
// begin if IsDrivenBy ( i ) in RuScientists then
11979: LD_VAR 0 1
11983: PPUSH
11984: CALL_OW 311
11988: PUSH
11989: LD_EXP 27
11993: IN
11994: IFFALSE 12012
// RuScientists = RuScientists diff i ;
11996: LD_ADDR_EXP 27
12000: PUSH
12001: LD_EXP 27
12005: PUSH
12006: LD_VAR 0 1
12010: DIFF
12011: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
12012: LD_VAR 0 1
12016: PPUSH
12017: CALL_OW 311
12021: PPUSH
12022: CALL_OW 64
// RemoveUnit ( i ) ;
12026: LD_VAR 0 1
12030: PPUSH
12031: CALL_OW 64
// end ; end ;
12035: GO 11901
12037: POP
12038: POP
// end ; end_of_file
12039: PPOPN 4
12041: END
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12042: LD_INT 0
12044: PPUSH
12045: PPUSH
// for i in charactersList do
12046: LD_ADDR_VAR 0 4
12050: PUSH
12051: LD_VAR 0 1
12055: PUSH
12056: FOR_IN
12057: IFFALSE 12075
// SaveCharacters ( i , ident ) ;
12059: LD_VAR 0 4
12063: PPUSH
12064: LD_VAR 0 2
12068: PPUSH
12069: CALL_OW 38
12073: GO 12056
12075: POP
12076: POP
// end ;
12077: LD_VAR 0 3
12081: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
12082: LD_INT 0
12084: PPUSH
12085: PPUSH
12086: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12087: LD_ADDR_VAR 0 1
12091: PUSH
12092: LD_VAR 0 1
12096: PUSH
12097: LD_EXP 1
12101: PUSH
12102: LD_EXP 7
12106: PUSH
12107: LD_EXP 3
12111: PUSH
12112: LD_EXP 4
12116: PUSH
12117: LD_EXP 5
12121: PUSH
12122: LD_EXP 2
12126: PUSH
12127: LD_EXP 12
12131: PUSH
12132: LD_EXP 13
12136: PUSH
12137: LD_EXP 9
12141: PUSH
12142: LD_EXP 11
12146: PUSH
12147: LD_EXP 6
12151: PUSH
12152: LD_EXP 8
12156: PUSH
12157: LD_EXP 10
12161: PUSH
12162: LD_EXP 15
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: DIFF
12183: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
12184: LD_ADDR_VAR 0 6
12188: PUSH
12189: LD_VAR 0 1
12193: PUSH
12194: LD_INT 1
12196: PPUSH
12197: LD_VAR 0 1
12201: PPUSH
12202: CALL_OW 12
12206: ARRAY
12207: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
12208: LD_VAR 0 6
12212: PPUSH
12213: CALL_OW 258
12217: PUSH
12218: LD_INT 1
12220: EQUAL
12221: IFFALSE 12239
// Say ( speaker , dialogMID ) else
12223: LD_VAR 0 6
12227: PPUSH
12228: LD_VAR 0 2
12232: PPUSH
12233: CALL_OW 88
12237: GO 12253
// Say ( speaker , dialogFID ) ;
12239: LD_VAR 0 6
12243: PPUSH
12244: LD_VAR 0 3
12248: PPUSH
12249: CALL_OW 88
// result := speaker ;
12253: LD_ADDR_VAR 0 4
12257: PUSH
12258: LD_VAR 0 6
12262: ST_TO_ADDR
// end ;
12263: LD_VAR 0 4
12267: RET
// export function PrepareDifficulty ; var tmp ; begin
12268: LD_INT 0
12270: PPUSH
12271: PPUSH
// if Difficulty = 1 then
12272: LD_OWVAR 67
12276: PUSH
12277: LD_INT 1
12279: EQUAL
12280: IFFALSE 12300
// begin RuSolMinLevel = 8 ;
12282: LD_ADDR_EXP 29
12286: PUSH
12287: LD_INT 8
12289: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12290: LD_ADDR_EXP 30
12294: PUSH
12295: LD_INT 10
12297: ST_TO_ADDR
// end else
12298: GO 12540
// if Difficulty = 2 then
12300: LD_OWVAR 67
12304: PUSH
12305: LD_INT 2
12307: EQUAL
12308: IFFALSE 12404
// begin RuSolMinLevel = 9 ;
12310: LD_ADDR_EXP 29
12314: PUSH
12315: LD_INT 9
12317: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12318: LD_ADDR_EXP 30
12322: PUSH
12323: LD_INT 10
12325: ST_TO_ADDR
// uc_nation = 3 ;
12326: LD_ADDR_OWVAR 21
12330: PUSH
12331: LD_INT 3
12333: ST_TO_ADDR
// uc_side = 3 ;
12334: LD_ADDR_OWVAR 20
12338: PUSH
12339: LD_INT 3
12341: ST_TO_ADDR
// bc_level = 10 ;
12342: LD_ADDR_OWVAR 43
12346: PUSH
12347: LD_INT 10
12349: ST_TO_ADDR
// bc_type = b_turret ;
12350: LD_ADDR_OWVAR 42
12354: PUSH
12355: LD_INT 33
12357: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12358: LD_ADDR_VAR 0 2
12362: PUSH
12363: LD_INT 86
12365: PPUSH
12366: LD_INT 34
12368: PPUSH
12369: LD_INT 2
12371: PPUSH
12372: CALL_OW 47
12376: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12377: LD_VAR 0 2
12381: PPUSH
12382: LD_INT 49
12384: PPUSH
12385: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12389: LD_INT 64
12391: PPUSH
12392: LD_INT 3
12394: PPUSH
12395: LD_INT 1
12397: PPUSH
12398: CALL_OW 322
// end else
12402: GO 12540
// begin RuSolMinLevel = 10 ;
12404: LD_ADDR_EXP 29
12408: PUSH
12409: LD_INT 10
12411: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12412: LD_ADDR_EXP 30
12416: PUSH
12417: LD_INT 10
12419: ST_TO_ADDR
// uc_nation = 3 ;
12420: LD_ADDR_OWVAR 21
12424: PUSH
12425: LD_INT 3
12427: ST_TO_ADDR
// uc_side = 3 ;
12428: LD_ADDR_OWVAR 20
12432: PUSH
12433: LD_INT 3
12435: ST_TO_ADDR
// bc_level = 10 ;
12436: LD_ADDR_OWVAR 43
12440: PUSH
12441: LD_INT 10
12443: ST_TO_ADDR
// bc_type = b_turret ;
12444: LD_ADDR_OWVAR 42
12448: PUSH
12449: LD_INT 33
12451: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12452: LD_ADDR_VAR 0 2
12456: PUSH
12457: LD_INT 86
12459: PPUSH
12460: LD_INT 34
12462: PPUSH
12463: LD_INT 2
12465: PPUSH
12466: CALL_OW 47
12470: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12471: LD_VAR 0 2
12475: PPUSH
12476: LD_INT 49
12478: PPUSH
12479: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
12483: LD_ADDR_VAR 0 2
12487: PUSH
12488: LD_INT 93
12490: PPUSH
12491: LD_INT 31
12493: PPUSH
12494: LD_INT 2
12496: PPUSH
12497: CALL_OW 47
12501: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12502: LD_VAR 0 2
12506: PPUSH
12507: LD_INT 49
12509: PPUSH
12510: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12514: LD_INT 64
12516: PPUSH
12517: LD_INT 3
12519: PPUSH
12520: LD_INT 1
12522: PPUSH
12523: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
12527: LD_INT 65
12529: PPUSH
12530: LD_INT 3
12532: PPUSH
12533: LD_INT 1
12535: PPUSH
12536: CALL_OW 322
// end ; end ;
12540: LD_VAR 0 1
12544: RET
// export function ShowQuery1 ; begin
12545: LD_INT 0
12547: PPUSH
// result := Query ( Q1 ) ;
12548: LD_ADDR_VAR 0 1
12552: PUSH
12553: LD_STRING Q1
12555: PPUSH
12556: CALL_OW 97
12560: ST_TO_ADDR
// end ;
12561: LD_VAR 0 1
12565: RET
// export function ShowQuery2 ; begin
12566: LD_INT 0
12568: PPUSH
// result := Query ( Q1a ) ;
12569: LD_ADDR_VAR 0 1
12573: PUSH
12574: LD_STRING Q1a
12576: PPUSH
12577: CALL_OW 97
12581: ST_TO_ADDR
// end ;
12582: LD_VAR 0 1
12586: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
12587: LD_INT 0
12589: PPUSH
12590: PPUSH
12591: PPUSH
12592: PPUSH
12593: PPUSH
// for i = 1 to count do
12594: LD_ADDR_VAR 0 8
12598: PUSH
12599: DOUBLE
12600: LD_INT 1
12602: DEC
12603: ST_TO_ADDR
12604: LD_VAR 0 6
12608: PUSH
12609: FOR_TO
12610: IFFALSE 12691
// begin uc_side = side ;
12612: LD_ADDR_OWVAR 20
12616: PUSH
12617: LD_VAR 0 1
12621: ST_TO_ADDR
// uc_nation = nation ;
12622: LD_ADDR_OWVAR 21
12626: PUSH
12627: LD_VAR 0 2
12631: ST_TO_ADDR
// hc_gallery =  ;
12632: LD_ADDR_OWVAR 33
12636: PUSH
12637: LD_STRING 
12639: ST_TO_ADDR
// hc_name =  ;
12640: LD_ADDR_OWVAR 26
12644: PUSH
12645: LD_STRING 
12647: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
12648: LD_INT 0
12650: PPUSH
12651: LD_VAR 0 5
12655: PPUSH
12656: LD_VAR 0 4
12660: PPUSH
12661: CALL_OW 380
// un = CreateHuman ;
12665: LD_ADDR_VAR 0 10
12669: PUSH
12670: CALL_OW 44
12674: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
12675: LD_VAR 0 10
12679: PPUSH
12680: LD_VAR 0 3
12684: PPUSH
12685: CALL_OW 52
// end ;
12689: GO 12609
12691: POP
12692: POP
// end ;
12693: LD_VAR 0 7
12697: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
12698: LD_INT 0
12700: PPUSH
12701: PPUSH
12702: PPUSH
12703: PPUSH
12704: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
12705: LD_ADDR_VAR 0 8
12709: PUSH
12710: LD_INT 48
12712: PUSH
12713: LD_INT 49
12715: PUSH
12716: LD_INT 50
12718: PUSH
12719: LD_INT 20
12721: PUSH
12722: LD_INT 1
12724: PUSH
12725: LD_INT 51
12727: PUSH
12728: LD_INT 52
12730: PUSH
12731: LD_INT 69
12733: PUSH
12734: LD_INT 39
12736: PUSH
12737: LD_INT 34
12739: PUSH
12740: LD_INT 40
12742: PUSH
12743: LD_INT 53
12745: PUSH
12746: LD_INT 71
12748: PUSH
12749: LD_INT 57
12751: PUSH
12752: LD_INT 58
12754: PUSH
12755: LD_INT 44
12757: PUSH
12758: LD_INT 32
12760: PUSH
12761: LD_INT 27
12763: PUSH
12764: LD_INT 23
12766: PUSH
12767: LD_INT 33
12769: PUSH
12770: LD_INT 59
12772: PUSH
12773: LD_INT 54
12775: PUSH
12776: LD_INT 55
12778: PUSH
12779: LD_INT 56
12781: PUSH
12782: LD_INT 63
12784: PUSH
12785: LD_INT 64
12787: PUSH
12788: LD_INT 65
12790: PUSH
12791: LD_INT 30
12793: PUSH
12794: LD_INT 31
12796: PUSH
12797: LD_INT 21
12799: PUSH
12800: LD_INT 22
12802: PUSH
12803: LD_INT 25
12805: PUSH
12806: EMPTY
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: ST_TO_ADDR
// for i = 1 to ru_tech_list do
12840: LD_ADDR_VAR 0 5
12844: PUSH
12845: DOUBLE
12846: LD_INT 1
12848: DEC
12849: ST_TO_ADDR
12850: LD_VAR 0 8
12854: PUSH
12855: FOR_TO
12856: IFFALSE 12932
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
12858: LD_VAR 0 8
12862: PUSH
12863: LD_VAR 0 5
12867: ARRAY
12868: PPUSH
12869: LD_VAR 0 1
12873: PPUSH
12874: CALL_OW 321
12878: PUSH
12879: LD_INT 1
12881: EQUAL
12882: PUSH
12883: LD_VAR 0 8
12887: PUSH
12888: LD_VAR 0 5
12892: ARRAY
12893: PPUSH
12894: LD_VAR 0 3
12898: PPUSH
12899: CALL_OW 482
12903: PUSH
12904: LD_INT 1
12906: EQUAL
12907: AND
12908: IFFALSE 12930
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
12910: LD_VAR 0 2
12914: PPUSH
12915: LD_VAR 0 8
12919: PUSH
12920: LD_VAR 0 5
12924: ARRAY
12925: PPUSH
12926: CALL_OW 184
12930: GO 12855
12932: POP
12933: POP
// end ;
12934: LD_VAR 0 4
12938: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
12939: LD_INT 0
12941: PPUSH
12942: PPUSH
12943: PPUSH
12944: PPUSH
12945: PPUSH
12946: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
12947: LD_ADDR_VAR 0 8
12951: PUSH
12952: LD_VAR 0 2
12956: PPUSH
12957: CALL_OW 313
12961: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
12962: LD_ADDR_VAR 0 9
12966: PUSH
12967: LD_VAR 0 3
12971: PPUSH
12972: LD_INT 22
12974: PUSH
12975: LD_VAR 0 1
12979: PUSH
12980: EMPTY
12981: LIST
12982: LIST
12983: PUSH
12984: LD_INT 25
12986: PUSH
12987: LD_INT 2
12989: PUSH
12990: EMPTY
12991: LIST
12992: LIST
12993: PUSH
12994: LD_INT 24
12996: PUSH
12997: LD_INT 750
12999: PUSH
13000: EMPTY
13001: LIST
13002: LIST
13003: PUSH
13004: LD_INT 3
13006: PUSH
13007: LD_INT 54
13009: PUSH
13010: EMPTY
13011: LIST
13012: PUSH
13013: EMPTY
13014: LIST
13015: LIST
13016: PUSH
13017: EMPTY
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: PPUSH
13023: CALL_OW 70
13027: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13028: LD_ADDR_VAR 0 6
13032: PUSH
13033: LD_VAR 0 3
13037: PPUSH
13038: LD_INT 22
13040: PUSH
13041: LD_VAR 0 1
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: PUSH
13050: LD_INT 21
13052: PUSH
13053: LD_INT 3
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: PUSH
13060: LD_INT 3
13062: PUSH
13063: LD_INT 24
13065: PUSH
13066: LD_INT 1000
13068: PUSH
13069: EMPTY
13070: LIST
13071: LIST
13072: PUSH
13073: EMPTY
13074: LIST
13075: LIST
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: LIST
13081: PUSH
13082: EMPTY
13083: LIST
13084: PPUSH
13085: CALL_OW 70
13089: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13090: LD_VAR 0 6
13094: NOT
13095: PUSH
13096: LD_INT 22
13098: PUSH
13099: LD_VAR 0 1
13103: PUSH
13104: EMPTY
13105: LIST
13106: LIST
13107: PUSH
13108: LD_INT 25
13110: PUSH
13111: LD_INT 2
13113: PUSH
13114: EMPTY
13115: LIST
13116: LIST
13117: PUSH
13118: LD_INT 24
13120: PUSH
13121: LD_INT 250
13123: PUSH
13124: EMPTY
13125: LIST
13126: LIST
13127: PUSH
13128: EMPTY
13129: LIST
13130: LIST
13131: LIST
13132: PPUSH
13133: CALL_OW 69
13137: NOT
13138: AND
13139: IFFALSE 13143
// exit ;
13141: GO 13325
// if buildings_list > 0 and engineerOkInside then
13143: LD_VAR 0 6
13147: PUSH
13148: LD_INT 0
13150: GREATER
13151: PUSH
13152: LD_VAR 0 8
13156: AND
13157: IFFALSE 13168
// ComExitBuilding ( engineerOkInside ) ;
13159: LD_VAR 0 8
13163: PPUSH
13164: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
13168: LD_VAR 0 6
13172: PUSH
13173: LD_INT 0
13175: GREATER
13176: PUSH
13177: LD_VAR 0 9
13181: PUSH
13182: LD_INT 0
13184: GREATER
13185: AND
13186: IFFALSE 13206
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
13188: LD_VAR 0 9
13192: PPUSH
13193: LD_VAR 0 6
13197: PUSH
13198: LD_INT 1
13200: ARRAY
13201: PPUSH
13202: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
13206: LD_VAR 0 6
13210: PUSH
13211: LD_INT 0
13213: EQUAL
13214: PUSH
13215: LD_VAR 0 4
13219: PUSH
13220: LD_INT 0
13222: EQUAL
13223: AND
13224: PUSH
13225: LD_VAR 0 9
13229: PUSH
13230: LD_INT 0
13232: GREATER
13233: AND
13234: IFFALSE 13250
// ComEnterUnit ( engineerOkOutside , building ) ;
13236: LD_VAR 0 9
13240: PPUSH
13241: LD_VAR 0 2
13245: PPUSH
13246: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
13250: LD_VAR 0 9
13254: PUSH
13255: LD_INT 0
13257: GREATER
13258: PUSH
13259: LD_VAR 0 6
13263: PUSH
13264: LD_INT 0
13266: EQUAL
13267: AND
13268: PUSH
13269: LD_VAR 0 4
13273: PUSH
13274: LD_INT 0
13276: GREATER
13277: AND
13278: IFFALSE 13325
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13280: LD_VAR 0 9
13284: PPUSH
13285: LD_VAR 0 4
13289: PUSH
13290: LD_INT 1
13292: ARRAY
13293: PPUSH
13294: LD_VAR 0 4
13298: PUSH
13299: LD_INT 2
13301: ARRAY
13302: PPUSH
13303: LD_VAR 0 4
13307: PUSH
13308: LD_INT 3
13310: ARRAY
13311: PPUSH
13312: LD_VAR 0 4
13316: PUSH
13317: LD_INT 4
13319: ARRAY
13320: PPUSH
13321: CALL_OW 145
// end ;
13325: LD_VAR 0 5
13329: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13330: LD_INT 0
13332: PPUSH
13333: PPUSH
13334: PPUSH
13335: PPUSH
13336: PPUSH
13337: PPUSH
13338: PPUSH
13339: PPUSH
13340: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13341: LD_ADDR_VAR 0 6
13345: PUSH
13346: LD_INT 22
13348: PUSH
13349: LD_VAR 0 1
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: PUSH
13358: LD_INT 25
13360: PUSH
13361: LD_INT 4
13363: PUSH
13364: EMPTY
13365: LIST
13366: LIST
13367: PUSH
13368: LD_INT 24
13370: PUSH
13371: LD_INT 251
13373: PUSH
13374: EMPTY
13375: LIST
13376: LIST
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: LIST
13382: PPUSH
13383: CALL_OW 69
13387: PUSH
13388: LD_EXP 27
13392: PUSH
13393: EMPTY
13394: LIST
13395: DIFF
13396: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13397: LD_ADDR_VAR 0 7
13401: PUSH
13402: LD_VAR 0 3
13406: PPUSH
13407: LD_INT 22
13409: PUSH
13410: LD_VAR 0 1
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: PUSH
13419: LD_INT 25
13421: PUSH
13422: LD_INT 4
13424: PUSH
13425: EMPTY
13426: LIST
13427: LIST
13428: PUSH
13429: LD_INT 50
13431: PUSH
13432: EMPTY
13433: LIST
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: LIST
13439: PPUSH
13440: CALL_OW 70
13444: PUSH
13445: LD_EXP 27
13449: PUSH
13450: EMPTY
13451: LIST
13452: DIFF
13453: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13454: LD_ADDR_VAR 0 10
13458: PUSH
13459: LD_VAR 0 3
13463: PPUSH
13464: LD_INT 22
13466: PUSH
13467: LD_VAR 0 1
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: PUSH
13476: LD_INT 21
13478: PUSH
13479: LD_INT 1
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: PUSH
13486: LD_INT 3
13488: PUSH
13489: LD_INT 24
13491: PUSH
13492: LD_INT 750
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: LIST
13507: PPUSH
13508: CALL_OW 70
13512: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13513: LD_ADDR_VAR 0 11
13517: PUSH
13518: LD_VAR 0 2
13522: PPUSH
13523: LD_INT 22
13525: PUSH
13526: LD_VAR 0 1
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: PUSH
13535: LD_INT 21
13537: PUSH
13538: LD_INT 1
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: PUSH
13545: LD_INT 3
13547: PUSH
13548: LD_INT 24
13550: PUSH
13551: LD_INT 1000
13553: PUSH
13554: EMPTY
13555: LIST
13556: LIST
13557: PUSH
13558: EMPTY
13559: LIST
13560: LIST
13561: PUSH
13562: EMPTY
13563: LIST
13564: LIST
13565: LIST
13566: PPUSH
13567: CALL_OW 70
13571: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
13572: LD_VAR 0 10
13576: PUSH
13577: LD_INT 0
13579: GREATER
13580: PUSH
13581: LD_VAR 0 6
13585: PUSH
13586: LD_INT 0
13588: GREATER
13589: AND
13590: IFFALSE 13606
// ComMoveToArea ( damageUnits , healArea ) ;
13592: LD_VAR 0 10
13596: PPUSH
13597: LD_VAR 0 2
13601: PPUSH
13602: CALL_OW 113
// if unitsToHeal > 0 and sci_listOutside > 0 then
13606: LD_VAR 0 11
13610: PUSH
13611: LD_INT 0
13613: GREATER
13614: PUSH
13615: LD_VAR 0 7
13619: PUSH
13620: LD_INT 0
13622: GREATER
13623: AND
13624: IFFALSE 13644
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
13626: LD_VAR 0 7
13630: PPUSH
13631: LD_VAR 0 11
13635: PUSH
13636: LD_INT 1
13638: ARRAY
13639: PPUSH
13640: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
13644: LD_VAR 0 10
13648: PUSH
13649: LD_INT 0
13651: EQUAL
13652: PUSH
13653: LD_VAR 0 11
13657: PUSH
13658: LD_INT 0
13660: EQUAL
13661: AND
13662: PUSH
13663: LD_VAR 0 7
13667: PUSH
13668: LD_INT 0
13670: GREATER
13671: AND
13672: IFFALSE 13777
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
13674: LD_ADDR_VAR 0 12
13678: PUSH
13679: LD_INT 22
13681: PUSH
13682: LD_VAR 0 1
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: PUSH
13691: LD_INT 21
13693: PUSH
13694: LD_INT 3
13696: PUSH
13697: EMPTY
13698: LIST
13699: LIST
13700: PUSH
13701: LD_INT 30
13703: PUSH
13704: LD_INT 8
13706: PUSH
13707: EMPTY
13708: LIST
13709: LIST
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: LIST
13715: PPUSH
13716: CALL_OW 69
13720: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
13721: LD_ADDR_VAR 0 13
13725: PUSH
13726: LD_INT 1
13728: PPUSH
13729: LD_VAR 0 12
13733: PPUSH
13734: CALL_OW 12
13738: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
13739: LD_VAR 0 7
13743: PPUSH
13744: LD_INT 3
13746: PUSH
13747: LD_INT 60
13749: PUSH
13750: EMPTY
13751: LIST
13752: PUSH
13753: EMPTY
13754: LIST
13755: LIST
13756: PPUSH
13757: CALL_OW 72
13761: PPUSH
13762: LD_VAR 0 12
13766: PUSH
13767: LD_VAR 0 13
13771: ARRAY
13772: PPUSH
13773: CALL_OW 120
// end ; if FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) > 0 and IsOk ( ru_fact ) and GetSide ( ru_fact ) = 3 then
13777: LD_VAR 0 3
13781: PPUSH
13782: LD_INT 22
13784: PUSH
13785: LD_VAR 0 1
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: PUSH
13794: LD_INT 25
13796: PUSH
13797: LD_INT 3
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: PUSH
13804: LD_INT 24
13806: PUSH
13807: LD_INT 751
13809: PUSH
13810: EMPTY
13811: LIST
13812: LIST
13813: PUSH
13814: EMPTY
13815: LIST
13816: LIST
13817: LIST
13818: PPUSH
13819: CALL_OW 70
13823: PUSH
13824: LD_INT 0
13826: GREATER
13827: PUSH
13828: LD_INT 21
13830: PPUSH
13831: CALL_OW 302
13835: AND
13836: PUSH
13837: LD_INT 21
13839: PPUSH
13840: CALL_OW 255
13844: PUSH
13845: LD_INT 3
13847: EQUAL
13848: AND
13849: IFFALSE 13905
// ComEnterUnit ( FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) , ru_fact ) ;
13851: LD_VAR 0 3
13855: PPUSH
13856: LD_INT 22
13858: PUSH
13859: LD_VAR 0 1
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: PUSH
13868: LD_INT 25
13870: PUSH
13871: LD_INT 3
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: PUSH
13878: LD_INT 24
13880: PUSH
13881: LD_INT 751
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: PUSH
13888: EMPTY
13889: LIST
13890: LIST
13891: LIST
13892: PPUSH
13893: CALL_OW 70
13897: PPUSH
13898: LD_INT 21
13900: PPUSH
13901: CALL_OW 120
// end ;
13905: LD_VAR 0 5
13909: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
13910: LD_INT 0
13912: PPUSH
13913: PPUSH
13914: PPUSH
13915: PPUSH
13916: PPUSH
13917: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
13918: LD_ADDR_VAR 0 7
13922: PUSH
13923: LD_VAR 0 2
13927: PPUSH
13928: LD_INT 22
13930: PUSH
13931: LD_VAR 0 1
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: PUSH
13940: LD_INT 21
13942: PUSH
13943: LD_INT 2
13945: PUSH
13946: EMPTY
13947: LIST
13948: LIST
13949: PUSH
13950: LD_INT 34
13952: PUSH
13953: LD_INT 52
13955: PUSH
13956: EMPTY
13957: LIST
13958: LIST
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: LIST
13964: PPUSH
13965: CALL_OW 70
13969: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13970: LD_ADDR_VAR 0 8
13974: PUSH
13975: LD_VAR 0 2
13979: PPUSH
13980: LD_INT 22
13982: PUSH
13983: LD_VAR 0 1
13987: PUSH
13988: EMPTY
13989: LIST
13990: LIST
13991: PUSH
13992: LD_INT 21
13994: PUSH
13995: LD_INT 3
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: PUSH
14002: LD_INT 3
14004: PUSH
14005: LD_INT 24
14007: PUSH
14008: LD_INT 1000
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: PUSH
14019: EMPTY
14020: LIST
14021: LIST
14022: LIST
14023: PUSH
14024: EMPTY
14025: LIST
14026: PPUSH
14027: CALL_OW 70
14031: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
14032: LD_VAR 0 8
14036: PUSH
14037: LD_INT 0
14039: GREATER
14040: PUSH
14041: LD_VAR 0 7
14045: PPUSH
14046: LD_INT 24
14048: PUSH
14049: LD_INT 750
14051: PUSH
14052: EMPTY
14053: LIST
14054: LIST
14055: PPUSH
14056: CALL_OW 72
14060: PUSH
14061: LD_INT 0
14063: GREATER
14064: AND
14065: IFFALSE 14085
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
14067: LD_VAR 0 7
14071: PPUSH
14072: LD_VAR 0 8
14076: PUSH
14077: LD_INT 1
14079: ARRAY
14080: PPUSH
14081: CALL_OW 130
// end ;
14085: LD_VAR 0 3
14089: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14090: LD_INT 0
14092: PPUSH
14093: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14094: LD_INT 22
14096: PUSH
14097: LD_VAR 0 1
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: PUSH
14106: LD_INT 21
14108: PUSH
14109: LD_INT 2
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PPUSH
14120: CALL_OW 69
14124: PUSH
14125: LD_INT 18
14127: PPUSH
14128: LD_INT 22
14130: PUSH
14131: LD_VAR 0 1
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: PUSH
14140: LD_INT 21
14142: PUSH
14143: LD_INT 2
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: PUSH
14150: EMPTY
14151: LIST
14152: LIST
14153: PPUSH
14154: CALL_OW 70
14158: PUSH
14159: LD_VAR 0 3
14163: LESSEQUAL
14164: DIFF
14165: IFFALSE 14232
// for i = 1 to vehCount do
14167: LD_ADDR_VAR 0 9
14171: PUSH
14172: DOUBLE
14173: LD_INT 1
14175: DEC
14176: ST_TO_ADDR
14177: LD_VAR 0 3
14181: PUSH
14182: FOR_TO
14183: IFFALSE 14230
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14185: LD_VAR 0 2
14189: PPUSH
14190: LD_VAR 0 7
14194: PPUSH
14195: LD_VAR 0 5
14199: PPUSH
14200: LD_VAR 0 6
14204: PPUSH
14205: LD_VAR 0 4
14209: PUSH
14210: LD_INT 1
14212: PPUSH
14213: LD_VAR 0 4
14217: PPUSH
14218: CALL_OW 12
14222: ARRAY
14223: PPUSH
14224: CALL_OW 185
14228: GO 14182
14230: POP
14231: POP
// end ;
14232: LD_VAR 0 8
14236: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
14237: LD_INT 0
14239: PPUSH
14240: PPUSH
14241: PPUSH
14242: PPUSH
14243: PPUSH
14244: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14245: LD_ADDR_VAR 0 6
14249: PUSH
14250: LD_INT 22
14252: PUSH
14253: LD_VAR 0 1
14257: PUSH
14258: EMPTY
14259: LIST
14260: LIST
14261: PUSH
14262: LD_INT 25
14264: PUSH
14265: LD_INT 9
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: PPUSH
14276: CALL_OW 69
14280: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14281: LD_ADDR_VAR 0 7
14285: PUSH
14286: LD_INT 81
14288: PUSH
14289: LD_VAR 0 1
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: PUSH
14298: LD_INT 3
14300: PUSH
14301: LD_INT 21
14303: PUSH
14304: LD_INT 3
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: PUSH
14311: EMPTY
14312: LIST
14313: LIST
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PPUSH
14319: CALL_OW 69
14323: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14324: LD_ADDR_VAR 0 4
14328: PUSH
14329: LD_INT 1
14331: PPUSH
14332: LD_INT 3
14334: PPUSH
14335: CALL_OW 12
14339: ST_TO_ADDR
// for i = 1 to list do
14340: LD_ADDR_VAR 0 5
14344: PUSH
14345: DOUBLE
14346: LD_INT 1
14348: DEC
14349: ST_TO_ADDR
14350: LD_VAR 0 6
14354: PUSH
14355: FOR_TO
14356: IFFALSE 14558
// for ta in filter do
14358: LD_ADDR_VAR 0 3
14362: PUSH
14363: LD_VAR 0 7
14367: PUSH
14368: FOR_IN
14369: IFFALSE 14554
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14371: LD_VAR 0 6
14375: PUSH
14376: LD_VAR 0 5
14380: ARRAY
14381: PPUSH
14382: LD_VAR 0 3
14386: PPUSH
14387: CALL_OW 296
14391: PUSH
14392: LD_INT 15
14394: LESSEQUAL
14395: IFFALSE 14552
// begin case c of 1 :
14397: LD_VAR 0 4
14401: PUSH
14402: LD_INT 1
14404: DOUBLE
14405: EQUAL
14406: IFTRUE 14410
14408: GO 14448
14410: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
14411: LD_VAR 0 6
14415: PUSH
14416: LD_VAR 0 5
14420: ARRAY
14421: PPUSH
14422: LD_VAR 0 3
14426: PPUSH
14427: CALL_OW 250
14431: PPUSH
14432: LD_VAR 0 3
14436: PPUSH
14437: CALL_OW 251
14441: PPUSH
14442: CALL_OW 154
14446: GO 14552
14448: LD_INT 2
14450: DOUBLE
14451: EQUAL
14452: IFTRUE 14456
14454: GO 14520
14456: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
14457: LD_VAR 0 6
14461: PUSH
14462: LD_VAR 0 5
14466: ARRAY
14467: PPUSH
14468: LD_VAR 0 3
14472: PPUSH
14473: CALL_OW 250
14477: PUSH
14478: LD_INT 1
14480: NEG
14481: PPUSH
14482: LD_INT 1
14484: PPUSH
14485: CALL_OW 12
14489: PLUS
14490: PPUSH
14491: LD_VAR 0 3
14495: PPUSH
14496: CALL_OW 251
14500: PUSH
14501: LD_INT 1
14503: NEG
14504: PPUSH
14505: LD_INT 1
14507: PPUSH
14508: CALL_OW 12
14512: PLUS
14513: PPUSH
14514: CALL_OW 153
14518: GO 14552
14520: LD_INT 3
14522: DOUBLE
14523: EQUAL
14524: IFTRUE 14528
14526: GO 14551
14528: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14529: LD_VAR 0 6
14533: PUSH
14534: LD_VAR 0 5
14538: ARRAY
14539: PPUSH
14540: LD_VAR 0 3
14544: PPUSH
14545: CALL_OW 115
14549: GO 14552
14551: POP
// end ; end ;
14552: GO 14368
14554: POP
14555: POP
14556: GO 14355
14558: POP
14559: POP
// end ;
14560: LD_VAR 0 2
14564: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
14565: LD_INT 0
14567: PPUSH
14568: PPUSH
14569: PPUSH
14570: PPUSH
// r := 100 ;
14571: LD_ADDR_VAR 0 5
14575: PUSH
14576: LD_INT 100
14578: ST_TO_ADDR
// x := 0 ;
14579: LD_ADDR_VAR 0 6
14583: PUSH
14584: LD_INT 0
14586: ST_TO_ADDR
// while ( x < n ) do
14587: LD_VAR 0 6
14591: PUSH
14592: LD_VAR 0 2
14596: LESS
14597: IFFALSE 14884
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
14599: LD_ADDR_VAR 0 4
14603: PUSH
14604: DOUBLE
14605: LD_INT 1
14607: DEC
14608: ST_TO_ADDR
14609: LD_VAR 0 1
14613: PPUSH
14614: LD_INT 0
14616: PPUSH
14617: CALL_OW 517
14621: PUSH
14622: LD_INT 1
14624: ARRAY
14625: PUSH
14626: FOR_TO
14627: IFFALSE 14880
// begin if r > 50 then
14629: LD_VAR 0 5
14633: PUSH
14634: LD_INT 50
14636: GREATER
14637: IFFALSE 14856
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
14639: LD_VAR 0 1
14643: PPUSH
14644: LD_INT 0
14646: PPUSH
14647: CALL_OW 517
14651: PUSH
14652: LD_INT 1
14654: ARRAY
14655: PUSH
14656: LD_VAR 0 4
14660: ARRAY
14661: PPUSH
14662: LD_VAR 0 1
14666: PPUSH
14667: LD_INT 0
14669: PPUSH
14670: CALL_OW 517
14674: PUSH
14675: LD_INT 2
14677: ARRAY
14678: PUSH
14679: LD_VAR 0 4
14683: ARRAY
14684: PPUSH
14685: CALL_OW 458
14689: NOT
14690: IFFALSE 14840
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
14692: LD_VAR 0 1
14696: PPUSH
14697: LD_INT 0
14699: PPUSH
14700: CALL_OW 517
14704: PUSH
14705: LD_INT 1
14707: ARRAY
14708: PUSH
14709: LD_VAR 0 4
14713: ARRAY
14714: PPUSH
14715: LD_VAR 0 1
14719: PPUSH
14720: LD_INT 0
14722: PPUSH
14723: CALL_OW 517
14727: PUSH
14728: LD_INT 2
14730: ARRAY
14731: PUSH
14732: LD_VAR 0 4
14736: ARRAY
14737: PPUSH
14738: LD_INT 8
14740: PPUSH
14741: LD_INT 0
14743: PPUSH
14744: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
14748: LD_ADDR_EXP 37
14752: PUSH
14753: LD_EXP 37
14757: PPUSH
14758: LD_INT 1
14760: PPUSH
14761: LD_VAR 0 1
14765: PPUSH
14766: LD_INT 0
14768: PPUSH
14769: CALL_OW 517
14773: PUSH
14774: LD_INT 1
14776: ARRAY
14777: PUSH
14778: LD_VAR 0 4
14782: ARRAY
14783: PUSH
14784: LD_VAR 0 1
14788: PPUSH
14789: LD_INT 0
14791: PPUSH
14792: CALL_OW 517
14796: PUSH
14797: LD_INT 2
14799: ARRAY
14800: PUSH
14801: LD_VAR 0 4
14805: ARRAY
14806: PUSH
14807: EMPTY
14808: LIST
14809: LIST
14810: PPUSH
14811: CALL_OW 2
14815: ST_TO_ADDR
// r := 0 ;
14816: LD_ADDR_VAR 0 5
14820: PUSH
14821: LD_INT 0
14823: ST_TO_ADDR
// x := x + 1 ;
14824: LD_ADDR_VAR 0 6
14828: PUSH
14829: LD_VAR 0 6
14833: PUSH
14834: LD_INT 1
14836: PLUS
14837: ST_TO_ADDR
// end else
14838: GO 14854
// r := r + 35 ;
14840: LD_ADDR_VAR 0 5
14844: PUSH
14845: LD_VAR 0 5
14849: PUSH
14850: LD_INT 35
14852: PLUS
14853: ST_TO_ADDR
// end else
14854: GO 14878
// r := r + rand ( 10 , 25 ) ;
14856: LD_ADDR_VAR 0 5
14860: PUSH
14861: LD_VAR 0 5
14865: PUSH
14866: LD_INT 10
14868: PPUSH
14869: LD_INT 25
14871: PPUSH
14872: CALL_OW 12
14876: PLUS
14877: ST_TO_ADDR
// end ;
14878: GO 14626
14880: POP
14881: POP
14882: GO 14587
// end ;
14884: LD_VAR 0 3
14888: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
14889: LD_INT 0
14891: PPUSH
14892: PPUSH
14893: PPUSH
14894: PPUSH
// tmpTab = [ ] ;
14895: LD_ADDR_VAR 0 6
14899: PUSH
14900: EMPTY
14901: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
14902: LD_INT 22
14904: PUSH
14905: LD_VAR 0 1
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: PUSH
14914: LD_INT 30
14916: PUSH
14917: LD_INT 32
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: PUSH
14924: EMPTY
14925: LIST
14926: LIST
14927: PPUSH
14928: CALL_OW 69
14932: PUSH
14933: LD_INT 0
14935: GREATER
14936: IFFALSE 15019
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
14938: LD_ADDR_VAR 0 4
14942: PUSH
14943: LD_INT 22
14945: PUSH
14946: LD_VAR 0 1
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: PUSH
14955: LD_INT 30
14957: PUSH
14958: LD_INT 32
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: PUSH
14965: EMPTY
14966: LIST
14967: LIST
14968: PPUSH
14969: CALL_OW 69
14973: PUSH
14974: FOR_IN
14975: IFFALSE 15017
// begin for j in UnitsInside ( i ) do
14977: LD_ADDR_VAR 0 5
14981: PUSH
14982: LD_VAR 0 4
14986: PPUSH
14987: CALL_OW 313
14991: PUSH
14992: FOR_IN
14993: IFFALSE 15013
// tmpTab = tmpTab ^ j ;
14995: LD_ADDR_VAR 0 6
14999: PUSH
15000: LD_VAR 0 6
15004: PUSH
15005: LD_VAR 0 5
15009: ADD
15010: ST_TO_ADDR
15011: GO 14992
15013: POP
15014: POP
// end ;
15015: GO 14974
15017: POP
15018: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
15019: LD_VAR 0 6
15023: PPUSH
15024: LD_VAR 0 2
15028: PPUSH
15029: CALL_OW 250
15033: PPUSH
15034: LD_VAR 0 2
15038: PPUSH
15039: CALL_OW 251
15043: PPUSH
15044: CALL_OW 114
// end ;
15048: LD_VAR 0 3
15052: RET
// export function CreateNature ; var i , un ; begin
15053: LD_INT 0
15055: PPUSH
15056: PPUSH
15057: PPUSH
// uc_side := 0 ;
15058: LD_ADDR_OWVAR 20
15062: PUSH
15063: LD_INT 0
15065: ST_TO_ADDR
// uc_nation := 0 ;
15066: LD_ADDR_OWVAR 21
15070: PUSH
15071: LD_INT 0
15073: ST_TO_ADDR
// InitHc ;
15074: CALL_OW 19
// hc_class := class_fish ;
15078: LD_ADDR_OWVAR 28
15082: PUSH
15083: LD_INT 20
15085: ST_TO_ADDR
// for i = 1 to 6 do
15086: LD_ADDR_VAR 0 2
15090: PUSH
15091: DOUBLE
15092: LD_INT 1
15094: DEC
15095: ST_TO_ADDR
15096: LD_INT 6
15098: PUSH
15099: FOR_TO
15100: IFFALSE 15119
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
15102: CALL_OW 44
15106: PPUSH
15107: LD_INT 23
15109: PPUSH
15110: LD_INT 0
15112: PPUSH
15113: CALL_OW 49
15117: GO 15099
15119: POP
15120: POP
// for i = 1 to Difficulty + 2 do
15121: LD_ADDR_VAR 0 2
15125: PUSH
15126: DOUBLE
15127: LD_INT 1
15129: DEC
15130: ST_TO_ADDR
15131: LD_OWVAR 67
15135: PUSH
15136: LD_INT 2
15138: PLUS
15139: PUSH
15140: FOR_TO
15141: IFFALSE 15250
// begin hc_sex = sex_male ;
15143: LD_ADDR_OWVAR 27
15147: PUSH
15148: LD_INT 1
15150: ST_TO_ADDR
// uc_side = 0 ;
15151: LD_ADDR_OWVAR 20
15155: PUSH
15156: LD_INT 0
15158: ST_TO_ADDR
// uc_nation = nation_nature ;
15159: LD_ADDR_OWVAR 21
15163: PUSH
15164: LD_INT 0
15166: ST_TO_ADDR
// hc_class = class_tiger ;
15167: LD_ADDR_OWVAR 28
15171: PUSH
15172: LD_INT 14
15174: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
15175: LD_ADDR_OWVAR 31
15179: PUSH
15180: LD_EXP 30
15184: PUSH
15185: LD_INT 0
15187: PUSH
15188: LD_INT 0
15190: PUSH
15191: LD_INT 0
15193: PUSH
15194: EMPTY
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
15200: LD_ADDR_OWVAR 35
15204: PUSH
15205: LD_INT 5
15207: NEG
15208: PPUSH
15209: LD_INT 5
15211: PPUSH
15212: CALL_OW 12
15216: PUSH
15217: LD_OWVAR 67
15221: MUL
15222: ST_TO_ADDR
// un = CreateHuman ;
15223: LD_ADDR_VAR 0 3
15227: PUSH
15228: CALL_OW 44
15232: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15233: LD_VAR 0 3
15237: PPUSH
15238: LD_INT 24
15240: PPUSH
15241: LD_INT 0
15243: PPUSH
15244: CALL_OW 49
// end ;
15248: GO 15140
15250: POP
15251: POP
// for i = 1 to rand ( 3 , 4 ) do
15252: LD_ADDR_VAR 0 2
15256: PUSH
15257: DOUBLE
15258: LD_INT 1
15260: DEC
15261: ST_TO_ADDR
15262: LD_INT 3
15264: PPUSH
15265: LD_INT 4
15267: PPUSH
15268: CALL_OW 12
15272: PUSH
15273: FOR_TO
15274: IFFALSE 15366
// begin hc_sex = sex_male ;
15276: LD_ADDR_OWVAR 27
15280: PUSH
15281: LD_INT 1
15283: ST_TO_ADDR
// uc_side = 0 ;
15284: LD_ADDR_OWVAR 20
15288: PUSH
15289: LD_INT 0
15291: ST_TO_ADDR
// uc_nation = nation_nature ;
15292: LD_ADDR_OWVAR 21
15296: PUSH
15297: LD_INT 0
15299: ST_TO_ADDR
// hc_class = 18 ;
15300: LD_ADDR_OWVAR 28
15304: PUSH
15305: LD_INT 18
15307: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
15308: LD_ADDR_OWVAR 31
15312: PUSH
15313: LD_INT 0
15315: PUSH
15316: LD_INT 0
15318: PUSH
15319: LD_INT 0
15321: PUSH
15322: LD_INT 0
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: ST_TO_ADDR
// hc_agressivity = 0 ;
15331: LD_ADDR_OWVAR 35
15335: PUSH
15336: LD_INT 0
15338: ST_TO_ADDR
// un = CreateHuman ;
15339: LD_ADDR_VAR 0 3
15343: PUSH
15344: CALL_OW 44
15348: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15349: LD_VAR 0 3
15353: PPUSH
15354: LD_INT 24
15356: PPUSH
15357: LD_INT 0
15359: PPUSH
15360: CALL_OW 49
// end ;
15364: GO 15273
15366: POP
15367: POP
// for i = 1 to [ 4 , 3 , 3 , 3 ] [ Difficulty ] do
15368: LD_ADDR_VAR 0 2
15372: PUSH
15373: DOUBLE
15374: LD_INT 1
15376: DEC
15377: ST_TO_ADDR
15378: LD_INT 4
15380: PUSH
15381: LD_INT 3
15383: PUSH
15384: LD_INT 3
15386: PUSH
15387: LD_INT 3
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: PUSH
15396: LD_OWVAR 67
15400: ARRAY
15401: PUSH
15402: FOR_TO
15403: IFFALSE 15512
// begin hc_sex := sex_male ;
15405: LD_ADDR_OWVAR 27
15409: PUSH
15410: LD_INT 1
15412: ST_TO_ADDR
// uc_side := 0 ;
15413: LD_ADDR_OWVAR 20
15417: PUSH
15418: LD_INT 0
15420: ST_TO_ADDR
// uc_nation := nation_nature ;
15421: LD_ADDR_OWVAR 21
15425: PUSH
15426: LD_INT 0
15428: ST_TO_ADDR
// hc_class := class_apeman ;
15429: LD_ADDR_OWVAR 28
15433: PUSH
15434: LD_INT 12
15436: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
15437: LD_ADDR_OWVAR 31
15441: PUSH
15442: LD_INT 0
15444: PPUSH
15445: LD_INT 2
15447: PPUSH
15448: CALL_OW 12
15452: PUSH
15453: LD_INT 0
15455: PUSH
15456: LD_INT 0
15458: PUSH
15459: LD_INT 0
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: ST_TO_ADDR
// hc_agressivity = rand ( - 10 , 10 ) ;
15468: LD_ADDR_OWVAR 35
15472: PUSH
15473: LD_INT 10
15475: NEG
15476: PPUSH
15477: LD_INT 10
15479: PPUSH
15480: CALL_OW 12
15484: ST_TO_ADDR
// un := CreateHuman ;
15485: LD_ADDR_VAR 0 3
15489: PUSH
15490: CALL_OW 44
15494: ST_TO_ADDR
// PlaceUnitArea ( un , ApeNatureArea , false ) ;
15495: LD_VAR 0 3
15499: PPUSH
15500: LD_INT 28
15502: PPUSH
15503: LD_INT 0
15505: PPUSH
15506: CALL_OW 49
// end ;
15510: GO 15402
15512: POP
15513: POP
// end ; end_of_file
15514: LD_VAR 0 1
15518: RET
// on UnitDestroyed ( unit ) do var i ;
15519: LD_INT 0
15521: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
15522: LD_VAR 0 1
15526: PPUSH
15527: CALL 33569 0 1
// if unit = JMM then
15531: LD_VAR 0 1
15535: PUSH
15536: LD_EXP 1
15540: EQUAL
15541: IFFALSE 15550
// YouLost ( JMM ) ;
15543: LD_STRING JMM
15545: PPUSH
15546: CALL_OW 104
// if unit in russianTanks then
15550: LD_VAR 0 1
15554: PUSH
15555: LD_EXP 32
15559: IN
15560: IFFALSE 15578
// russianTanks := russianTanks diff unit ;
15562: LD_ADDR_EXP 32
15566: PUSH
15567: LD_EXP 32
15571: PUSH
15572: LD_VAR 0 1
15576: DIFF
15577: ST_TO_ADDR
// if unit in russianTimeLapsers then
15578: LD_VAR 0 1
15582: PUSH
15583: LD_EXP 33
15587: IN
15588: IFFALSE 15606
// russianTimeLapsers := russianTimeLapsers diff unit ;
15590: LD_ADDR_EXP 33
15594: PUSH
15595: LD_EXP 33
15599: PUSH
15600: LD_VAR 0 1
15604: DIFF
15605: ST_TO_ADDR
// if unit in RuScientists then
15606: LD_VAR 0 1
15610: PUSH
15611: LD_EXP 27
15615: IN
15616: IFFALSE 15648
// begin RuScientists := RuScientists diff unit ;
15618: LD_ADDR_EXP 27
15622: PUSH
15623: LD_EXP 27
15627: PUSH
15628: LD_VAR 0 1
15632: DIFF
15633: ST_TO_ADDR
// sciCounter := sciCounter + 1 ;
15634: LD_ADDR_EXP 28
15638: PUSH
15639: LD_EXP 28
15643: PUSH
15644: LD_INT 1
15646: PLUS
15647: ST_TO_ADDR
// end ; end ;
15648: PPOPN 2
15650: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_laser then
15651: LD_VAR 0 3
15655: PPUSH
15656: CALL_OW 264
15660: PUSH
15661: LD_INT 9
15663: EQUAL
15664: IFFALSE 15680
// laserCounterDestroy := laserCounterDestroy + 1 ;
15666: LD_ADDR_EXP 43
15670: PUSH
15671: LD_EXP 43
15675: PUSH
15676: LD_INT 1
15678: PLUS
15679: ST_TO_ADDR
// end ;
15680: PPOPN 3
15682: END
// on UnitTeleported ( building , human ) do begin if human in FilterAllUnits ( [ f_side , 6 ] ) then
15683: LD_VAR 0 2
15687: PUSH
15688: LD_INT 22
15690: PUSH
15691: LD_INT 6
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: PPUSH
15698: CALL_OW 69
15702: IN
15703: IFFALSE 15758
// begin if GetType ( human ) = unit_vehicle then
15705: LD_VAR 0 2
15709: PPUSH
15710: CALL_OW 247
15714: PUSH
15715: LD_INT 2
15717: EQUAL
15718: IFFALSE 15735
// human := IsDrivenBy ( human ) ;
15720: LD_ADDR_VAR 0 2
15724: PUSH
15725: LD_VAR 0 2
15729: PPUSH
15730: CALL_OW 311
15734: ST_TO_ADDR
// SetTag ( human , GetTag ( human ) + 10 ) ;
15735: LD_VAR 0 2
15739: PPUSH
15740: LD_VAR 0 2
15744: PPUSH
15745: CALL_OW 110
15749: PUSH
15750: LD_INT 10
15752: PLUS
15753: PPUSH
15754: CALL_OW 109
// end ; if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
15758: LD_VAR 0 1
15762: PUSH
15763: LD_INT 10
15765: EQUAL
15766: PUSH
15767: LD_VAR 0 2
15771: PPUSH
15772: CALL_OW 255
15776: PUSH
15777: LD_INT 1
15779: EQUAL
15780: AND
15781: PUSH
15782: LD_EXP 40
15786: PUSH
15787: LD_INT 0
15789: EQUAL
15790: AND
15791: IFFALSE 15903
// begin eventVar1 = 1 ;
15793: LD_ADDR_EXP 40
15797: PUSH
15798: LD_INT 1
15800: ST_TO_ADDR
// teleportExplored = 1 ;
15801: LD_ADDR_EXP 26
15805: PUSH
15806: LD_INT 1
15808: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
15809: LD_STRING M2a
15811: PPUSH
15812: CALL_OW 337
// wait ( 0 0$2 ) ;
15816: LD_INT 70
15818: PPUSH
15819: CALL_OW 67
// DialogueOn ;
15823: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
15827: LD_INT 22
15829: PUSH
15830: LD_INT 1
15832: PUSH
15833: EMPTY
15834: LIST
15835: LIST
15836: PUSH
15837: LD_INT 21
15839: PUSH
15840: LD_INT 1
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: PPUSH
15851: CALL_OW 69
15855: PPUSH
15856: LD_STRING DT3a-Sol1-1
15858: PPUSH
15859: LD_STRING DT3a-FSol1-1
15861: PPUSH
15862: CALL 12082 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
15866: LD_EXP 1
15870: PPUSH
15871: LD_STRING DT3a-JMM-1
15873: PPUSH
15874: CALL_OW 88
// CenterNowOnUnits ( human ) ;
15878: LD_VAR 0 2
15882: PPUSH
15883: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
15887: LD_EXP 1
15891: PPUSH
15892: LD_STRING DT3a-JMM-1a
15894: PPUSH
15895: CALL_OW 88
// DialogueOff ;
15899: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
15903: LD_VAR 0 1
15907: PUSH
15908: LD_INT 10
15910: EQUAL
15911: PUSH
15912: LD_VAR 0 2
15916: PPUSH
15917: CALL_OW 247
15921: PUSH
15922: LD_INT 2
15924: EQUAL
15925: AND
15926: PUSH
15927: LD_VAR 0 2
15931: PPUSH
15932: CALL_OW 255
15936: PUSH
15937: LD_INT 3
15939: EQUAL
15940: AND
15941: IFFALSE 16007
// begin if vehicleTeleported = 0 then
15943: LD_EXP 21
15947: PUSH
15948: LD_INT 0
15950: EQUAL
15951: IFFALSE 15968
// begin wait ( 0 0$3 ) ;
15953: LD_INT 105
15955: PPUSH
15956: CALL_OW 67
// vehicleTeleported := 1 ;
15960: LD_ADDR_EXP 21
15964: PUSH
15965: LD_INT 1
15967: ST_TO_ADDR
// end ; if vehicleTeleported = 2 then
15968: LD_EXP 21
15972: PUSH
15973: LD_INT 2
15975: EQUAL
15976: IFFALSE 15993
// begin wait ( 0 0$3 ) ;
15978: LD_INT 105
15980: PPUSH
15981: CALL_OW 67
// vehicleTeleported := 3 ;
15985: LD_ADDR_EXP 21
15989: PUSH
15990: LD_INT 3
15992: ST_TO_ADDR
// end ; tpCounter := tpCounter + 1 ;
15993: LD_ADDR_EXP 22
15997: PUSH
15998: LD_EXP 22
16002: PUSH
16003: LD_INT 1
16005: PLUS
16006: ST_TO_ADDR
// end ; end ;
16007: PPOPN 2
16009: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
16010: LD_VAR 0 1
16014: PPUSH
16015: LD_VAR 0 2
16019: PPUSH
16020: CALL 33691 0 2
// if GetWeapon ( vehicle ) = us_rocket_launcher then
16024: LD_VAR 0 1
16028: PPUSH
16029: CALL_OW 264
16033: PUSH
16034: LD_INT 7
16036: EQUAL
16037: IFFALSE 16047
// rocketBuilded := true ;
16039: LD_ADDR_EXP 44
16043: PUSH
16044: LD_INT 1
16046: ST_TO_ADDR
// if GetSide ( vehicle ) <> 3 then
16047: LD_VAR 0 1
16051: PPUSH
16052: CALL_OW 255
16056: PUSH
16057: LD_INT 3
16059: NONEQUAL
16060: IFFALSE 16064
// exit ;
16062: GO 16183
// if factory in [ ru_fact , rufab2 ] then
16064: LD_VAR 0 2
16068: PUSH
16069: LD_INT 21
16071: PUSH
16072: LD_INT 112
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: IN
16079: IFFALSE 16183
// begin if GetWeapon ( vehicle ) = ru_time_lapser then
16081: LD_VAR 0 1
16085: PPUSH
16086: CALL_OW 264
16090: PUSH
16091: LD_INT 49
16093: EQUAL
16094: IFFALSE 16130
// begin russianTimeLapsers := Join ( russianTimeLapsers , vehicle ) ;
16096: LD_ADDR_EXP 33
16100: PUSH
16101: LD_EXP 33
16105: PPUSH
16106: LD_VAR 0 1
16110: PPUSH
16111: CALL 74890 0 2
16115: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
16116: LD_VAR 0 1
16120: PPUSH
16121: LD_INT 137
16123: PPUSH
16124: CALL_OW 120
// end else
16128: GO 16183
// if not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_big_cargo_bay , ru_crane , ru_bulldozer ] then
16130: LD_VAR 0 1
16134: PPUSH
16135: CALL_OW 264
16139: PUSH
16140: LD_INT 51
16142: PUSH
16143: LD_EXP 46
16147: PUSH
16148: LD_INT 52
16150: PUSH
16151: LD_INT 53
16153: PUSH
16154: EMPTY
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: IN
16160: NOT
16161: IFFALSE 16183
// begin russianTanks := Join ( russianTanks , vehicle ) ;
16163: LD_ADDR_EXP 32
16167: PUSH
16168: LD_EXP 32
16172: PPUSH
16173: LD_VAR 0 1
16177: PPUSH
16178: CALL 74890 0 2
16182: ST_TO_ADDR
// end ; end ; end ;
16183: PPOPN 2
16185: END
// on LeaveVehicle ( vehicle , human ) do var i ;
16186: LD_INT 0
16188: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
16189: LD_VAR 0 2
16193: PPUSH
16194: CALL_OW 255
16198: PUSH
16199: LD_INT 3
16201: EQUAL
16202: PUSH
16203: LD_VAR 0 2
16207: PPUSH
16208: CALL_OW 257
16212: PUSH
16213: LD_INT 3
16215: EQUAL
16216: AND
16217: PUSH
16218: LD_INT 21
16220: PPUSH
16221: CALL_OW 255
16225: PUSH
16226: LD_INT 3
16228: EQUAL
16229: AND
16230: PUSH
16231: LD_INT 21
16233: PPUSH
16234: CALL_OW 302
16238: AND
16239: IFFALSE 16253
// ComEnterUnit ( human , ru_fact ) ;
16241: LD_VAR 0 2
16245: PPUSH
16246: LD_INT 21
16248: PPUSH
16249: CALL_OW 120
// end ;
16253: PPOPN 3
16255: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16256: LD_VAR 0 1
16260: PPUSH
16261: CALL 33675 0 1
// end ; end_of_file
16265: PPOPN 1
16267: END
// every 0 0$1 trigger ruAI = 1 do
16268: LD_EXP 34
16272: PUSH
16273: LD_INT 1
16275: EQUAL
16276: IFFALSE 16388
16278: GO 16280
16280: DISABLE
// begin enable ;
16281: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
16282: LD_INT 3
16284: PPUSH
16285: LD_INT 6
16287: PPUSH
16288: LD_INT 9
16290: PPUSH
16291: LD_EXP 31
16295: PPUSH
16296: CALL 12939 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
16300: LD_INT 3
16302: PPUSH
16303: LD_INT 4
16305: PPUSH
16306: LD_INT 10
16308: PPUSH
16309: LD_EXP 31
16313: PPUSH
16314: CALL 12939 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
16318: LD_INT 3
16320: PPUSH
16321: LD_INT 9
16323: PPUSH
16324: CALL 13910 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
16328: LD_INT 3
16330: PPUSH
16331: LD_INT 10
16333: PPUSH
16334: CALL 13910 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
16338: LD_INT 3
16340: PPUSH
16341: LD_INT 16
16343: PPUSH
16344: LD_INT 9
16346: PPUSH
16347: LD_INT 91
16349: PPUSH
16350: CALL 13330 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
16354: LD_INT 3
16356: PPUSH
16357: LD_INT 17
16359: PPUSH
16360: LD_INT 10
16362: PPUSH
16363: LD_INT 47
16365: PUSH
16366: LD_INT 129
16368: PUSH
16369: LD_INT 135
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: LIST
16376: PPUSH
16377: CALL 13330 0 4
// IntBazooka ( 3 ) ;
16381: LD_INT 3
16383: PPUSH
16384: CALL 14237 0 1
// end ;
16388: END
// every 0 0$30 trigger russianTanks >= [ 3 , 4 , 4 , 5 ] [ Difficulty ] do var j , tmp , target1 , target2 ;
16389: LD_EXP 32
16393: PUSH
16394: LD_INT 3
16396: PUSH
16397: LD_INT 4
16399: PUSH
16400: LD_INT 4
16402: PUSH
16403: LD_INT 5
16405: PUSH
16406: EMPTY
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: PUSH
16412: LD_OWVAR 67
16416: ARRAY
16417: GREATEREQUAL
16418: IFFALSE 16918
16420: GO 16422
16422: DISABLE
16423: LD_INT 0
16425: PPUSH
16426: PPUSH
16427: PPUSH
16428: PPUSH
// begin enable ;
16429: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
16430: LD_ADDR_VAR 0 2
16434: PUSH
16435: LD_EXP 32
16439: PUSH
16440: LD_EXP 33
16444: UNION
16445: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
16446: LD_ADDR_EXP 32
16450: PUSH
16451: LD_EXP 32
16455: PUSH
16456: LD_VAR 0 2
16460: DIFF
16461: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
16462: LD_ADDR_EXP 33
16466: PUSH
16467: LD_EXP 33
16471: PUSH
16472: LD_VAR 0 2
16476: DIFF
16477: ST_TO_ADDR
// if IsOk ( ruteleprt ) then
16478: LD_INT 10
16480: PPUSH
16481: CALL_OW 302
16485: IFFALSE 16568
// begin for j in tmp do
16487: LD_ADDR_VAR 0 1
16491: PUSH
16492: LD_VAR 0 2
16496: PUSH
16497: FOR_IN
16498: IFFALSE 16541
// if attackTactic < 2 then
16500: LD_EXP 36
16504: PUSH
16505: LD_INT 2
16507: LESS
16508: IFFALSE 16524
// ComEnterUnit ( j , ruteleprt ) else
16510: LD_VAR 0 1
16514: PPUSH
16515: LD_INT 10
16517: PPUSH
16518: CALL_OW 120
16522: GO 16539
// ComMoveXY ( j , 88 , 69 ) ;
16524: LD_VAR 0 1
16528: PPUSH
16529: LD_INT 88
16531: PPUSH
16532: LD_INT 69
16534: PPUSH
16535: CALL_OW 111
16539: GO 16497
16541: POP
16542: POP
// repeat wait ( 0 0$1 ) ;
16543: LD_INT 35
16545: PPUSH
16546: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
16550: LD_VAR 0 2
16554: PPUSH
16555: LD_INT 60
16557: PUSH
16558: EMPTY
16559: LIST
16560: PPUSH
16561: CALL_OW 72
16565: NOT
16566: IFFALSE 16543
// end ; repeat wait ( 0 0$1 ) ;
16568: LD_INT 35
16570: PPUSH
16571: CALL_OW 67
// for j in tmp do
16575: LD_ADDR_VAR 0 1
16579: PUSH
16580: LD_VAR 0 2
16584: PUSH
16585: FOR_IN
16586: IFFALSE 16909
// begin if IsDead ( j ) then
16588: LD_VAR 0 1
16592: PPUSH
16593: CALL_OW 301
16597: IFFALSE 16615
// tmp := tmp diff j ;
16599: LD_ADDR_VAR 0 2
16603: PUSH
16604: LD_VAR 0 2
16608: PUSH
16609: LD_VAR 0 1
16613: DIFF
16614: ST_TO_ADDR
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , j ) ;
16615: LD_ADDR_VAR 0 3
16619: PUSH
16620: LD_INT 81
16622: PUSH
16623: LD_INT 3
16625: PUSH
16626: EMPTY
16627: LIST
16628: LIST
16629: PPUSH
16630: CALL_OW 69
16634: PPUSH
16635: LD_VAR 0 1
16639: PPUSH
16640: CALL_OW 74
16644: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 3 ] , [ f_type , unit_human ] ] ] ) , j ) ;
16645: LD_ADDR_VAR 0 4
16649: PUSH
16650: LD_INT 81
16652: PUSH
16653: LD_INT 3
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: PUSH
16660: LD_INT 21
16662: PUSH
16663: LD_INT 1
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PUSH
16674: EMPTY
16675: LIST
16676: PPUSH
16677: CALL_OW 69
16681: PPUSH
16682: LD_VAR 0 1
16686: PPUSH
16687: CALL_OW 74
16691: ST_TO_ADDR
// if GetWeapon ( j ) = ru_time_lapser then
16692: LD_VAR 0 1
16696: PPUSH
16697: CALL_OW 264
16701: PUSH
16702: LD_INT 49
16704: EQUAL
16705: IFFALSE 16841
// begin if UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) > 1 and UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) then
16707: LD_VAR 0 2
16711: PPUSH
16712: LD_INT 3
16714: PUSH
16715: LD_INT 34
16717: PUSH
16718: LD_INT 49
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: PUSH
16725: EMPTY
16726: LIST
16727: LIST
16728: PPUSH
16729: CALL_OW 72
16733: PUSH
16734: LD_INT 1
16736: GREATER
16737: PUSH
16738: LD_VAR 0 2
16742: PPUSH
16743: LD_INT 3
16745: PUSH
16746: LD_INT 34
16748: PUSH
16749: LD_INT 49
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PPUSH
16760: CALL_OW 72
16764: AND
16765: IFFALSE 16815
// ComMoveUnit ( j , NearestUnitToUnit ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , j ) ) else
16767: LD_VAR 0 1
16771: PPUSH
16772: LD_VAR 0 2
16776: PPUSH
16777: LD_INT 3
16779: PUSH
16780: LD_INT 34
16782: PUSH
16783: LD_INT 49
16785: PUSH
16786: EMPTY
16787: LIST
16788: LIST
16789: PUSH
16790: EMPTY
16791: LIST
16792: LIST
16793: PPUSH
16794: CALL_OW 72
16798: PPUSH
16799: LD_VAR 0 1
16803: PPUSH
16804: CALL_OW 74
16808: PPUSH
16809: CALL_OW 112
16813: GO 16839
// ComMoveUnit ( j , NearestUnitToUnit ( target1 , j ) ) ;
16815: LD_VAR 0 1
16819: PPUSH
16820: LD_VAR 0 3
16824: PPUSH
16825: LD_VAR 0 1
16829: PPUSH
16830: CALL_OW 74
16834: PPUSH
16835: CALL_OW 112
// end else
16839: GO 16907
// begin if GetDistUnits ( j , target2 ) < GetDistUnits ( j , target1 ) + 2 then
16841: LD_VAR 0 1
16845: PPUSH
16846: LD_VAR 0 4
16850: PPUSH
16851: CALL_OW 296
16855: PUSH
16856: LD_VAR 0 1
16860: PPUSH
16861: LD_VAR 0 3
16865: PPUSH
16866: CALL_OW 296
16870: PUSH
16871: LD_INT 2
16873: PLUS
16874: LESS
16875: IFFALSE 16893
// ComAttackUnit ( j , target2 ) else
16877: LD_VAR 0 1
16881: PPUSH
16882: LD_VAR 0 4
16886: PPUSH
16887: CALL_OW 115
16891: GO 16907
// ComAttackUnit ( j , target1 ) ;
16893: LD_VAR 0 1
16897: PPUSH
16898: LD_VAR 0 3
16902: PPUSH
16903: CALL_OW 115
// end ; end ;
16907: GO 16585
16909: POP
16910: POP
// until not tmp ;
16911: LD_VAR 0 2
16915: NOT
16916: IFFALSE 16568
// end ;
16918: PPOPN 4
16920: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
16921: LD_INT 4
16923: PPUSH
16924: CALL_OW 303
16928: IFFALSE 16943
16930: GO 16932
16932: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
16933: LD_INT 3
16935: PPUSH
16936: LD_INT 4
16938: PPUSH
16939: CALL 14889 0 2
16943: END
// every 0 0$1 do
16944: GO 16946
16946: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
16947: LD_INT 3
16949: PPUSH
16950: LD_INT 91
16952: PPUSH
16953: LD_INT 3
16955: PPUSH
16956: CALL 12698 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
16960: LD_INT 3
16962: PPUSH
16963: LD_INT 47
16965: PPUSH
16966: LD_INT 3
16968: PPUSH
16969: CALL 12698 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
16973: LD_INT 3
16975: PPUSH
16976: LD_INT 129
16978: PPUSH
16979: LD_INT 3
16981: PPUSH
16982: CALL 12698 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
16986: LD_INT 3
16988: PPUSH
16989: LD_INT 3
16991: PPUSH
16992: LD_INT 3
16994: PPUSH
16995: CALL 12698 0 3
// end ;
16999: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
17000: LD_INT 22
17002: PUSH
17003: LD_INT 1
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PUSH
17010: LD_INT 21
17012: PUSH
17013: LD_INT 3
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PPUSH
17024: CALL_OW 69
17028: IFFALSE 17097
17030: GO 17032
17032: DISABLE
// begin wait ( 0 0$40 ) ;
17033: LD_INT 1400
17035: PPUSH
17036: CALL_OW 67
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 , 5 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17040: LD_INT 3
17042: PPUSH
17043: LD_INT 21
17045: PPUSH
17046: LD_INT 3
17048: PUSH
17049: LD_INT 4
17051: PUSH
17052: LD_INT 4
17054: PUSH
17055: LD_INT 5
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: PUSH
17064: LD_OWVAR 67
17068: ARRAY
17069: PPUSH
17070: LD_INT 46
17072: PUSH
17073: LD_INT 45
17075: PUSH
17076: LD_INT 44
17078: PUSH
17079: EMPTY
17080: LIST
17081: LIST
17082: LIST
17083: PPUSH
17084: LD_INT 3
17086: PPUSH
17087: LD_INT 3
17089: PPUSH
17090: LD_INT 24
17092: PPUSH
17093: CALL 14090 0 7
// end ;
17097: END
// every 6 6$0 + 2 2$00 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
17098: LD_EXP 20
17102: PUSH
17103: LD_INT 2
17105: EQUAL
17106: PUSH
17107: LD_INT 21
17109: PPUSH
17110: CALL_OW 255
17114: PUSH
17115: LD_INT 3
17117: EQUAL
17118: AND
17119: PUSH
17120: LD_INT 112
17122: PPUSH
17123: CALL_OW 255
17127: PUSH
17128: LD_INT 3
17130: EQUAL
17131: AND
17132: PUSH
17133: LD_INT 21
17135: PPUSH
17136: CALL_OW 302
17140: AND
17141: PUSH
17142: LD_INT 112
17144: PPUSH
17145: CALL_OW 302
17149: AND
17150: PUSH
17151: LD_INT 22
17153: PUSH
17154: LD_INT 3
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: PUSH
17161: LD_INT 21
17163: PUSH
17164: LD_INT 2
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: PUSH
17171: LD_INT 50
17173: PUSH
17174: EMPTY
17175: LIST
17176: PUSH
17177: LD_INT 3
17179: PUSH
17180: LD_INT 58
17182: PUSH
17183: EMPTY
17184: LIST
17185: PUSH
17186: EMPTY
17187: LIST
17188: LIST
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: PPUSH
17196: CALL_OW 69
17200: PUSH
17201: LD_INT 18
17203: PPUSH
17204: LD_INT 22
17206: PUSH
17207: LD_INT 3
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: PUSH
17214: LD_INT 21
17216: PUSH
17217: LD_INT 2
17219: PUSH
17220: EMPTY
17221: LIST
17222: LIST
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: PPUSH
17228: CALL_OW 70
17232: PUSH
17233: LD_INT 0
17235: EQUAL
17236: DIFF
17237: AND
17238: IFFALSE 17364
17240: GO 17242
17242: DISABLE
// begin enable ;
17243: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 , 5 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17244: LD_INT 3
17246: PPUSH
17247: LD_INT 21
17249: PPUSH
17250: LD_INT 3
17252: PUSH
17253: LD_INT 4
17255: PUSH
17256: LD_INT 4
17258: PUSH
17259: LD_INT 5
17261: PUSH
17262: EMPTY
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: PUSH
17268: LD_OWVAR 67
17272: ARRAY
17273: PPUSH
17274: LD_INT 46
17276: PUSH
17277: LD_INT 45
17279: PUSH
17280: LD_INT 44
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: LIST
17287: PPUSH
17288: LD_INT 3
17290: PPUSH
17291: LD_INT 3
17293: PPUSH
17294: LD_INT 24
17296: PPUSH
17297: CALL 14090 0 7
// if russianTimeLapsers = 0 then
17301: LD_EXP 33
17305: PUSH
17306: LD_INT 0
17308: EQUAL
17309: IFFALSE 17364
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
17311: LD_INT 3
17313: PPUSH
17314: LD_INT 112
17316: PPUSH
17317: LD_INT 1
17319: PUSH
17320: LD_INT 2
17322: PUSH
17323: LD_INT 2
17325: PUSH
17326: LD_INT 2
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: PUSH
17335: LD_OWVAR 67
17339: ARRAY
17340: PPUSH
17341: LD_INT 49
17343: PUSH
17344: LD_INT 49
17346: PUSH
17347: EMPTY
17348: LIST
17349: LIST
17350: PPUSH
17351: LD_INT 3
17353: PPUSH
17354: LD_INT 3
17356: PPUSH
17357: LD_INT 24
17359: PPUSH
17360: CALL 14090 0 7
// end ;
17364: END
// every 0 0$1 trigger arabianMines do var i ;
17365: LD_EXP 37
17369: IFFALSE 17490
17371: GO 17373
17373: DISABLE
17374: LD_INT 0
17376: PPUSH
// begin enable ;
17377: ENABLE
// for i in arabianMines do
17378: LD_ADDR_VAR 0 1
17382: PUSH
17383: LD_EXP 37
17387: PUSH
17388: FOR_IN
17389: IFFALSE 17488
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
17391: LD_INT 22
17393: PUSH
17394: LD_INT 1
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: PUSH
17401: LD_INT 92
17403: PUSH
17404: LD_VAR 0 1
17408: PUSH
17409: LD_INT 1
17411: ARRAY
17412: PUSH
17413: LD_VAR 0 1
17417: PUSH
17418: LD_INT 2
17420: ARRAY
17421: PUSH
17422: LD_INT 3
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: PPUSH
17435: CALL_OW 69
17439: IFFALSE 17486
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
17441: LD_VAR 0 1
17445: PUSH
17446: LD_INT 1
17448: ARRAY
17449: PPUSH
17450: LD_VAR 0 1
17454: PUSH
17455: LD_INT 2
17457: ARRAY
17458: PPUSH
17459: LD_INT 5
17461: PPUSH
17462: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
17466: LD_ADDR_EXP 37
17470: PUSH
17471: LD_EXP 37
17475: PPUSH
17476: LD_VAR 0 1
17480: PPUSH
17481: CALL_OW 3
17485: ST_TO_ADDR
// end ; end ;
17486: GO 17388
17488: POP
17489: POP
// end ;
17490: PPOPN 1
17492: END
// every 0 0$1 trigger vehicleTeleported = 4 and tpCounter = [ 6 , 8 , 8 , 8 ] [ Difficulty ] do
17493: LD_EXP 21
17497: PUSH
17498: LD_INT 4
17500: EQUAL
17501: PUSH
17502: LD_EXP 22
17506: PUSH
17507: LD_INT 6
17509: PUSH
17510: LD_INT 8
17512: PUSH
17513: LD_INT 8
17515: PUSH
17516: LD_INT 8
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: PUSH
17525: LD_OWVAR 67
17529: ARRAY
17530: EQUAL
17531: AND
17532: IFFALSE 17550
17534: GO 17536
17536: DISABLE
// TeleportExit ( ruteleprt , 47 , 82 ) ;
17537: LD_INT 10
17539: PPUSH
17540: LD_INT 47
17542: PPUSH
17543: LD_INT 82
17545: PPUSH
17546: CALL_OW 243
17550: END
// every 2 2$0 trigger vehicleTeleported = 4 do
17551: LD_EXP 21
17555: PUSH
17556: LD_INT 4
17558: EQUAL
17559: IFFALSE 17581
17561: GO 17563
17563: DISABLE
// begin enable ;
17564: ENABLE
// attackTactic = rand ( 1 , 2 ) ;
17565: LD_ADDR_EXP 36
17569: PUSH
17570: LD_INT 1
17572: PPUSH
17573: LD_INT 2
17575: PPUSH
17576: CALL_OW 12
17580: ST_TO_ADDR
// end ; end_of_file
17581: END
// every 0 0$1 trigger IsDead ( ruheadlab ) do
17582: LD_INT 3
17584: PPUSH
17585: CALL_OW 301
17589: IFFALSE 17778
17591: GO 17593
17593: DISABLE
// begin if sciCounter = 0 then
17594: LD_EXP 28
17598: PUSH
17599: LD_INT 0
17601: EQUAL
17602: IFFALSE 17630
// begin Say ( JMM , D7a-JMM-1 ) ;
17604: LD_EXP 1
17608: PPUSH
17609: LD_STRING D7a-JMM-1
17611: PPUSH
17612: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
17616: LD_EXP 15
17620: PPUSH
17621: LD_STRING D7a-Pow-1
17623: PPUSH
17624: CALL_OW 94
// end else
17628: GO 17774
// if sciCounter < 6 then
17630: LD_EXP 28
17634: PUSH
17635: LD_INT 6
17637: LESS
17638: IFFALSE 17666
// begin Say ( JMM , D7b-JMM-1 ) ;
17640: LD_EXP 1
17644: PPUSH
17645: LD_STRING D7b-JMM-1
17647: PPUSH
17648: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
17652: LD_EXP 15
17656: PPUSH
17657: LD_STRING D7b-Pow-1
17659: PPUSH
17660: CALL_OW 94
// end else
17664: GO 17774
// begin Say ( JMM , D7c-JMM-1 ) ;
17666: LD_EXP 1
17670: PPUSH
17671: LD_STRING D7c-JMM-1
17673: PPUSH
17674: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
17678: LD_EXP 15
17682: PPUSH
17683: LD_STRING D7c-Pow-1
17685: PPUSH
17686: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
17690: LD_EXP 1
17694: PPUSH
17695: LD_STRING D7d-JMM-1
17697: PPUSH
17698: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
17702: LD_EXP 15
17706: PPUSH
17707: LD_STRING D7d-Pow-1
17709: PPUSH
17710: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
17714: LD_EXP 1
17718: PPUSH
17719: LD_STRING D7d-JMM-2
17721: PPUSH
17722: CALL_OW 88
// if askSiberite = 1 then
17726: LD_EXP 25
17730: PUSH
17731: LD_INT 1
17733: EQUAL
17734: IFFALSE 17750
// Say ( JMM , D7d-JMM-2a ) else
17736: LD_EXP 1
17740: PPUSH
17741: LD_STRING D7d-JMM-2a
17743: PPUSH
17744: CALL_OW 88
17748: GO 17762
// SayRadio ( Powell , D7d-Pow-2 ) ;
17750: LD_EXP 15
17754: PPUSH
17755: LD_STRING D7d-Pow-2
17757: PPUSH
17758: CALL_OW 94
// SayRadio ( Powell , D7d-Pow-2a ) ;
17762: LD_EXP 15
17766: PPUSH
17767: LD_STRING D7d-Pow-2a
17769: PPUSH
17770: CALL_OW 94
// end ; FinishMission ;
17774: CALL 17779 0 0
// end ;
17778: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
17779: LD_INT 0
17781: PPUSH
17782: PPUSH
17783: PPUSH
17784: PPUSH
// m1 := false ;
17785: LD_ADDR_VAR 0 2
17789: PUSH
17790: LD_INT 0
17792: ST_TO_ADDR
// m2 := false ;
17793: LD_ADDR_VAR 0 3
17797: PUSH
17798: LD_INT 0
17800: ST_TO_ADDR
// m3 := false ;
17801: LD_ADDR_VAR 0 4
17805: PUSH
17806: LD_INT 0
17808: ST_TO_ADDR
// if not westPathUsed then
17809: LD_EXP 42
17813: NOT
17814: IFFALSE 17823
// SetAchievement ( ACH_PATH ) ;
17816: LD_STRING ACH_PATH
17818: PPUSH
17819: CALL_OW 543
// if not rocketBuilded then
17823: LD_EXP 44
17827: NOT
17828: IFFALSE 17844
// begin wait ( 3 ) ;
17830: LD_INT 3
17832: PPUSH
17833: CALL_OW 67
// SetAchievement ( ACH_ROCKET ) ;
17837: LD_STRING ACH_ROCKET
17839: PPUSH
17840: CALL_OW 543
// end ; if tick <= 40 40$00 then
17844: LD_OWVAR 1
17848: PUSH
17849: LD_INT 84000
17851: LESSEQUAL
17852: IFFALSE 17868
// begin wait ( 3 ) ;
17854: LD_INT 3
17856: PPUSH
17857: CALL_OW 67
// SetAchievement ( ACH_ASPEED_12 ) ;
17861: LD_STRING ACH_ASPEED_12
17863: PPUSH
17864: CALL_OW 543
// end ; if teleportExplored = 1 then
17868: LD_EXP 26
17872: PUSH
17873: LD_INT 1
17875: EQUAL
17876: IFFALSE 17898
// begin m1 := true ;
17878: LD_ADDR_VAR 0 2
17882: PUSH
17883: LD_INT 1
17885: ST_TO_ADDR
// AddMedal ( Teleport , 1 ) ;
17886: LD_STRING Teleport
17888: PPUSH
17889: LD_INT 1
17891: PPUSH
17892: CALL_OW 101
// end else
17896: GO 17909
// AddMedal ( Teleport , - 1 ) ;
17898: LD_STRING Teleport
17900: PPUSH
17901: LD_INT 1
17903: NEG
17904: PPUSH
17905: CALL_OW 101
// if sciCounter > 2 then
17909: LD_EXP 28
17913: PUSH
17914: LD_INT 2
17916: GREATER
17917: IFFALSE 17939
// begin m2 := true ;
17919: LD_ADDR_VAR 0 3
17923: PUSH
17924: LD_INT 1
17926: ST_TO_ADDR
// AddMedal ( Materials , 1 ) ;
17927: LD_STRING Materials
17929: PPUSH
17930: LD_INT 1
17932: PPUSH
17933: CALL_OW 101
// end else
17937: GO 17950
// AddMedal ( Materials , - 1 ) ;
17939: LD_STRING Materials
17941: PPUSH
17942: LD_INT 1
17944: NEG
17945: PPUSH
17946: CALL_OW 101
// if sciCounter >= 6 then
17950: LD_EXP 28
17954: PUSH
17955: LD_INT 6
17957: GREATEREQUAL
17958: IFFALSE 17990
// begin m3 := true ;
17960: LD_ADDR_VAR 0 4
17964: PUSH
17965: LD_INT 1
17967: ST_TO_ADDR
// AddMedal ( Scientists , 1 ) ;
17968: LD_STRING Scientists
17970: PPUSH
17971: LD_INT 1
17973: PPUSH
17974: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
17978: LD_INT 1
17980: PPUSH
17981: LD_STRING 12_SciDed_1
17983: PPUSH
17984: CALL_OW 39
// end else
17988: GO 18011
// begin AddMedal ( Scientists , - 1 ) ;
17990: LD_STRING Scientists
17992: PPUSH
17993: LD_INT 1
17995: NEG
17996: PPUSH
17997: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
18001: LD_INT 0
18003: PPUSH
18004: LD_STRING 12_SciDed_1
18006: PPUSH
18007: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
18011: LD_EXP 24
18015: PPUSH
18016: LD_STRING 12_MainDepositFake_1
18018: PPUSH
18019: CALL_OW 39
// if m1 and m2 and m3 and Difficulty >= 3 then
18023: LD_VAR 0 2
18027: PUSH
18028: LD_VAR 0 3
18032: AND
18033: PUSH
18034: LD_VAR 0 4
18038: AND
18039: PUSH
18040: LD_OWVAR 67
18044: PUSH
18045: LD_INT 3
18047: GREATEREQUAL
18048: AND
18049: IFFALSE 18061
// SetAchievementEX ( ACH_AMER , 12 ) ;
18051: LD_STRING ACH_AMER
18053: PPUSH
18054: LD_INT 12
18056: PPUSH
18057: CALL_OW 564
// GiveMedals ( MAIN ) ;
18061: LD_STRING MAIN
18063: PPUSH
18064: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
18068: LD_INT 22
18070: PUSH
18071: LD_INT 1
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PUSH
18078: LD_INT 21
18080: PUSH
18081: LD_INT 1
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: LD_INT 2
18090: PUSH
18091: LD_INT 25
18093: PUSH
18094: LD_INT 1
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: PUSH
18101: LD_INT 25
18103: PUSH
18104: LD_INT 2
18106: PUSH
18107: EMPTY
18108: LIST
18109: LIST
18110: PUSH
18111: LD_INT 25
18113: PUSH
18114: LD_INT 3
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: PUSH
18121: LD_INT 25
18123: PUSH
18124: LD_INT 4
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: PUSH
18131: LD_INT 25
18133: PUSH
18134: LD_INT 5
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: PUSH
18141: LD_INT 25
18143: PUSH
18144: LD_INT 8
18146: PUSH
18147: EMPTY
18148: LIST
18149: LIST
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: LIST
18164: PPUSH
18165: CALL_OW 69
18169: PPUSH
18170: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18174: LD_EXP 1
18178: PPUSH
18179: LD_EXP 39
18183: PUSH
18184: LD_STRING JMM
18186: STR
18187: PPUSH
18188: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18192: LD_EXP 7
18196: PPUSH
18197: LD_EXP 39
18201: PUSH
18202: LD_STRING Brown
18204: STR
18205: PPUSH
18206: CALL 12042 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18210: LD_EXP 3
18214: PPUSH
18215: LD_EXP 39
18219: PUSH
18220: LD_STRING Donaldson
18222: STR
18223: PPUSH
18224: CALL 12042 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18228: LD_EXP 4
18232: PPUSH
18233: LD_EXP 39
18237: PUSH
18238: LD_STRING Bobby
18240: STR
18241: PPUSH
18242: CALL 12042 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18246: LD_EXP 5
18250: PPUSH
18251: LD_EXP 39
18255: PUSH
18256: LD_STRING Cyrus
18258: STR
18259: PPUSH
18260: CALL 12042 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18264: LD_EXP 2
18268: PPUSH
18269: LD_EXP 39
18273: PUSH
18274: LD_STRING Lisa
18276: STR
18277: PPUSH
18278: CALL 12042 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18282: LD_EXP 12
18286: PPUSH
18287: LD_EXP 39
18291: PUSH
18292: LD_STRING Frank
18294: STR
18295: PPUSH
18296: CALL 12042 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
18300: LD_EXP 13
18304: PPUSH
18305: LD_EXP 39
18309: PUSH
18310: LD_STRING Kikuchi
18312: STR
18313: PPUSH
18314: CALL 12042 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
18318: LD_EXP 9
18322: PPUSH
18323: LD_EXP 39
18327: PUSH
18328: LD_STRING Houten
18330: STR
18331: PPUSH
18332: CALL 12042 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
18336: LD_EXP 11
18340: PPUSH
18341: LD_EXP 39
18345: PUSH
18346: LD_STRING Gary
18348: STR
18349: PPUSH
18350: CALL 12042 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
18354: LD_EXP 10
18358: PPUSH
18359: LD_EXP 39
18363: PUSH
18364: LD_STRING Cornell
18366: STR
18367: PPUSH
18368: CALL 12042 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18372: LD_EXP 6
18376: PPUSH
18377: LD_EXP 39
18381: PUSH
18382: LD_STRING Denis
18384: STR
18385: PPUSH
18386: CALL 12042 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18390: LD_EXP 8
18394: PPUSH
18395: LD_EXP 39
18399: PUSH
18400: LD_STRING Gladstone
18402: STR
18403: PPUSH
18404: CALL 12042 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
18408: LD_INT 22
18410: PUSH
18411: LD_INT 1
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: LD_INT 23
18420: PUSH
18421: LD_INT 1
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: LD_INT 21
18430: PUSH
18431: LD_INT 1
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PUSH
18438: LD_INT 2
18440: PUSH
18441: LD_INT 25
18443: PUSH
18444: LD_INT 1
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: PUSH
18451: LD_INT 25
18453: PUSH
18454: LD_INT 2
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: LD_INT 25
18463: PUSH
18464: LD_INT 3
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PUSH
18471: LD_INT 25
18473: PUSH
18474: LD_INT 4
18476: PUSH
18477: EMPTY
18478: LIST
18479: LIST
18480: PUSH
18481: LD_INT 25
18483: PUSH
18484: LD_INT 5
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: PUSH
18491: LD_INT 25
18493: PUSH
18494: LD_INT 8
18496: PUSH
18497: EMPTY
18498: LIST
18499: LIST
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: PPUSH
18516: CALL_OW 69
18520: PUSH
18521: LD_EXP 1
18525: PUSH
18526: LD_EXP 7
18530: PUSH
18531: LD_EXP 3
18535: PUSH
18536: LD_EXP 4
18540: PUSH
18541: LD_EXP 5
18545: PUSH
18546: LD_EXP 2
18550: PUSH
18551: LD_EXP 12
18555: PUSH
18556: LD_EXP 8
18560: PUSH
18561: LD_EXP 13
18565: PUSH
18566: LD_EXP 6
18570: PUSH
18571: LD_EXP 9
18575: PUSH
18576: LD_EXP 11
18580: PUSH
18581: LD_EXP 10
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: DIFF
18601: PPUSH
18602: LD_STRING 12_other_survivors
18604: PPUSH
18605: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
18609: LD_INT 22
18611: PUSH
18612: LD_INT 1
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: PUSH
18619: LD_INT 23
18621: PUSH
18622: LD_INT 2
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: PUSH
18629: LD_INT 21
18631: PUSH
18632: LD_INT 1
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: PUSH
18639: LD_INT 2
18641: PUSH
18642: LD_INT 25
18644: PUSH
18645: LD_INT 1
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: PUSH
18652: LD_INT 25
18654: PUSH
18655: LD_INT 2
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: PUSH
18662: LD_INT 25
18664: PUSH
18665: LD_INT 3
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: PUSH
18672: LD_INT 25
18674: PUSH
18675: LD_INT 4
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: PUSH
18682: LD_INT 25
18684: PUSH
18685: LD_INT 5
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: PUSH
18692: LD_INT 25
18694: PUSH
18695: LD_INT 8
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: PPUSH
18717: CALL_OW 69
18721: PPUSH
18722: LD_STRING 12_kurt_squad
18724: PPUSH
18725: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
18729: LD_EXP 14
18733: PPUSH
18734: LD_STRING 12_others
18736: PPUSH
18737: CALL_OW 38
// YouWin ;
18741: CALL_OW 103
// end ; end_of_file
18745: LD_VAR 0 1
18749: RET
// every 0 0$01 do
18750: GO 18752
18752: DISABLE
// begin repeat wait ( 0 0$10 ) ;
18753: LD_INT 350
18755: PPUSH
18756: CALL_OW 67
// if cratesSpawned < 8 then
18760: LD_EXP 38
18764: PUSH
18765: LD_INT 8
18767: LESS
18768: IFFALSE 18820
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
18770: LD_INT 105
18772: PPUSH
18773: LD_INT 350
18775: PPUSH
18776: CALL_OW 12
18780: PPUSH
18781: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18785: LD_INT 3
18787: PPUSH
18788: LD_INT 5
18790: PPUSH
18791: CALL_OW 12
18795: PPUSH
18796: LD_INT 21
18798: PPUSH
18799: LD_INT 1
18801: PPUSH
18802: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18806: LD_ADDR_EXP 38
18810: PUSH
18811: LD_EXP 38
18815: PUSH
18816: LD_INT 1
18818: PLUS
18819: ST_TO_ADDR
// end ; if cratesSpawned >= 8 and cratesSpawned < 20 then
18820: LD_EXP 38
18824: PUSH
18825: LD_INT 8
18827: GREATEREQUAL
18828: PUSH
18829: LD_EXP 38
18833: PUSH
18834: LD_INT 20
18836: LESS
18837: AND
18838: IFFALSE 18890
// begin wait ( rand ( 0 0$10 , 0 0$20 ) ) ;
18840: LD_INT 350
18842: PPUSH
18843: LD_INT 700
18845: PPUSH
18846: CALL_OW 12
18850: PPUSH
18851: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18855: LD_INT 3
18857: PPUSH
18858: LD_INT 5
18860: PPUSH
18861: CALL_OW 12
18865: PPUSH
18866: LD_INT 21
18868: PPUSH
18869: LD_INT 1
18871: PPUSH
18872: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18876: LD_ADDR_EXP 38
18880: PUSH
18881: LD_EXP 38
18885: PUSH
18886: LD_INT 1
18888: PLUS
18889: ST_TO_ADDR
// end ; if cratesSpawned >= 20 then
18890: LD_EXP 38
18894: PUSH
18895: LD_INT 20
18897: GREATEREQUAL
18898: IFFALSE 18972
// begin if GetListOfCratesInArea ( CratesArea ) < 30 then
18900: LD_INT 21
18902: PPUSH
18903: CALL_OW 435
18907: PUSH
18908: LD_INT 30
18910: LESS
18911: IFFALSE 18922
// wait ( 0 0$10 ) else
18913: LD_INT 350
18915: PPUSH
18916: CALL_OW 67
18920: GO 18937
// wait ( rand ( 1 1$00 , 1 1$40 ) ) ;
18922: LD_INT 2100
18924: PPUSH
18925: LD_INT 3500
18927: PPUSH
18928: CALL_OW 12
18932: PPUSH
18933: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
18937: LD_INT 1
18939: PPUSH
18940: LD_INT 5
18942: PPUSH
18943: CALL_OW 12
18947: PPUSH
18948: LD_INT 21
18950: PPUSH
18951: LD_INT 1
18953: PPUSH
18954: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18958: LD_ADDR_EXP 38
18962: PUSH
18963: LD_EXP 38
18967: PUSH
18968: LD_INT 1
18970: PLUS
18971: ST_TO_ADDR
// end ; if cratesSpawned >= 90 then
18972: LD_EXP 38
18976: PUSH
18977: LD_INT 90
18979: GREATEREQUAL
18980: IFFALSE 19054
// begin if GetListOfCratesInArea ( CratesArea ) < 30 then
18982: LD_INT 21
18984: PPUSH
18985: CALL_OW 435
18989: PUSH
18990: LD_INT 30
18992: LESS
18993: IFFALSE 19004
// wait ( 0 0$20 ) else
18995: LD_INT 700
18997: PPUSH
18998: CALL_OW 67
19002: GO 19019
// wait ( rand ( 1 1$20 , 2 2$00 ) ) ;
19004: LD_INT 2800
19006: PPUSH
19007: LD_INT 4200
19009: PPUSH
19010: CALL_OW 12
19014: PPUSH
19015: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
19019: LD_INT 1
19021: PPUSH
19022: LD_INT 5
19024: PPUSH
19025: CALL_OW 12
19029: PPUSH
19030: LD_INT 21
19032: PPUSH
19033: LD_INT 1
19035: PPUSH
19036: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19040: LD_ADDR_EXP 38
19044: PUSH
19045: LD_EXP 38
19049: PUSH
19050: LD_INT 1
19052: PLUS
19053: ST_TO_ADDR
// end ; until false ;
19054: LD_INT 0
19056: IFFALSE 18753
// end ; end_of_file
19058: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
19059: LD_INT 0
19061: PPUSH
// ar_miner := 81 ;
19062: LD_ADDR_EXP 52
19066: PUSH
19067: LD_INT 81
19069: ST_TO_ADDR
// ar_crane := 88 ;
19070: LD_ADDR_EXP 51
19074: PUSH
19075: LD_INT 88
19077: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19078: LD_ADDR_EXP 46
19082: PUSH
19083: LD_INT 89
19085: ST_TO_ADDR
// us_hack := 99 ;
19086: LD_ADDR_EXP 47
19090: PUSH
19091: LD_INT 99
19093: ST_TO_ADDR
// us_artillery := 97 ;
19094: LD_ADDR_EXP 48
19098: PUSH
19099: LD_INT 97
19101: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19102: LD_ADDR_EXP 49
19106: PUSH
19107: LD_INT 91
19109: ST_TO_ADDR
// ar_mortar := 92 ;
19110: LD_ADDR_EXP 50
19114: PUSH
19115: LD_INT 92
19117: ST_TO_ADDR
// ru_flamethrower := 93 ;
19118: LD_ADDR_EXP 53
19122: PUSH
19123: LD_INT 93
19125: ST_TO_ADDR
// ru_radar := 98 ;
19126: LD_ADDR_EXP 45
19130: PUSH
19131: LD_INT 98
19133: ST_TO_ADDR
// tech_Artillery := 80 ;
19134: LD_ADDR_EXP 54
19138: PUSH
19139: LD_INT 80
19141: ST_TO_ADDR
// tech_RadMat := 81 ;
19142: LD_ADDR_EXP 55
19146: PUSH
19147: LD_INT 81
19149: ST_TO_ADDR
// tech_BasicTools := 82 ;
19150: LD_ADDR_EXP 56
19154: PUSH
19155: LD_INT 82
19157: ST_TO_ADDR
// tech_Cargo := 83 ;
19158: LD_ADDR_EXP 57
19162: PUSH
19163: LD_INT 83
19165: ST_TO_ADDR
// tech_Track := 84 ;
19166: LD_ADDR_EXP 58
19170: PUSH
19171: LD_INT 84
19173: ST_TO_ADDR
// tech_Crane := 85 ;
19174: LD_ADDR_EXP 59
19178: PUSH
19179: LD_INT 85
19181: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19182: LD_ADDR_EXP 60
19186: PUSH
19187: LD_INT 86
19189: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19190: LD_ADDR_EXP 61
19194: PUSH
19195: LD_INT 87
19197: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19198: LD_ADDR_EXP 62
19202: PUSH
19203: LD_INT 88
19205: ST_TO_ADDR
// class_mastodont := 31 ;
19206: LD_ADDR_EXP 63
19210: PUSH
19211: LD_INT 31
19213: ST_TO_ADDR
// class_horse := 21 ;
19214: LD_ADDR_EXP 64
19218: PUSH
19219: LD_INT 21
19221: ST_TO_ADDR
// end ;
19222: LD_VAR 0 1
19226: RET
// every 1 do
19227: GO 19229
19229: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
19230: CALL 19059 0 0
19234: END
// every 0 0$1 do
19235: GO 19237
19237: DISABLE
// begin enable ;
19238: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19239: LD_STRING updateTimer(
19241: PUSH
19242: LD_OWVAR 1
19246: STR
19247: PUSH
19248: LD_STRING );
19250: STR
19251: PPUSH
19252: CALL_OW 559
// end ;
19256: END
// export function SOS_MapStart ( ) ; begin
19257: LD_INT 0
19259: PPUSH
// if streamModeActive then
19260: LD_EXP 65
19264: IFFALSE 19273
// DefineStreamItems ( true ) ;
19266: LD_INT 1
19268: PPUSH
19269: CALL 20923 0 1
// UpdateFactoryWaypoints ( ) ;
19273: CALL 34507 0 0
// end ;
19277: LD_VAR 0 1
19281: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19282: LD_INT 0
19284: PPUSH
// if p2 = 100 then
19285: LD_VAR 0 2
19289: PUSH
19290: LD_INT 100
19292: EQUAL
19293: IFFALSE 20296
// begin if not StreamModeActive then
19295: LD_EXP 65
19299: NOT
19300: IFFALSE 19310
// StreamModeActive := true ;
19302: LD_ADDR_EXP 65
19306: PUSH
19307: LD_INT 1
19309: ST_TO_ADDR
// if p3 = 0 then
19310: LD_VAR 0 3
19314: PUSH
19315: LD_INT 0
19317: EQUAL
19318: IFFALSE 19324
// InitStreamMode ;
19320: CALL 20459 0 0
// if p3 = 1 then
19324: LD_VAR 0 3
19328: PUSH
19329: LD_INT 1
19331: EQUAL
19332: IFFALSE 19342
// sRocket := true ;
19334: LD_ADDR_EXP 70
19338: PUSH
19339: LD_INT 1
19341: ST_TO_ADDR
// if p3 = 2 then
19342: LD_VAR 0 3
19346: PUSH
19347: LD_INT 2
19349: EQUAL
19350: IFFALSE 19360
// sSpeed := true ;
19352: LD_ADDR_EXP 69
19356: PUSH
19357: LD_INT 1
19359: ST_TO_ADDR
// if p3 = 3 then
19360: LD_VAR 0 3
19364: PUSH
19365: LD_INT 3
19367: EQUAL
19368: IFFALSE 19378
// sEngine := true ;
19370: LD_ADDR_EXP 71
19374: PUSH
19375: LD_INT 1
19377: ST_TO_ADDR
// if p3 = 4 then
19378: LD_VAR 0 3
19382: PUSH
19383: LD_INT 4
19385: EQUAL
19386: IFFALSE 19396
// sSpec := true ;
19388: LD_ADDR_EXP 68
19392: PUSH
19393: LD_INT 1
19395: ST_TO_ADDR
// if p3 = 5 then
19396: LD_VAR 0 3
19400: PUSH
19401: LD_INT 5
19403: EQUAL
19404: IFFALSE 19414
// sLevel := true ;
19406: LD_ADDR_EXP 72
19410: PUSH
19411: LD_INT 1
19413: ST_TO_ADDR
// if p3 = 6 then
19414: LD_VAR 0 3
19418: PUSH
19419: LD_INT 6
19421: EQUAL
19422: IFFALSE 19432
// sArmoury := true ;
19424: LD_ADDR_EXP 73
19428: PUSH
19429: LD_INT 1
19431: ST_TO_ADDR
// if p3 = 7 then
19432: LD_VAR 0 3
19436: PUSH
19437: LD_INT 7
19439: EQUAL
19440: IFFALSE 19450
// sRadar := true ;
19442: LD_ADDR_EXP 74
19446: PUSH
19447: LD_INT 1
19449: ST_TO_ADDR
// if p3 = 8 then
19450: LD_VAR 0 3
19454: PUSH
19455: LD_INT 8
19457: EQUAL
19458: IFFALSE 19468
// sBunker := true ;
19460: LD_ADDR_EXP 75
19464: PUSH
19465: LD_INT 1
19467: ST_TO_ADDR
// if p3 = 9 then
19468: LD_VAR 0 3
19472: PUSH
19473: LD_INT 9
19475: EQUAL
19476: IFFALSE 19486
// sHack := true ;
19478: LD_ADDR_EXP 76
19482: PUSH
19483: LD_INT 1
19485: ST_TO_ADDR
// if p3 = 10 then
19486: LD_VAR 0 3
19490: PUSH
19491: LD_INT 10
19493: EQUAL
19494: IFFALSE 19504
// sFire := true ;
19496: LD_ADDR_EXP 77
19500: PUSH
19501: LD_INT 1
19503: ST_TO_ADDR
// if p3 = 11 then
19504: LD_VAR 0 3
19508: PUSH
19509: LD_INT 11
19511: EQUAL
19512: IFFALSE 19522
// sRefresh := true ;
19514: LD_ADDR_EXP 78
19518: PUSH
19519: LD_INT 1
19521: ST_TO_ADDR
// if p3 = 12 then
19522: LD_VAR 0 3
19526: PUSH
19527: LD_INT 12
19529: EQUAL
19530: IFFALSE 19540
// sExp := true ;
19532: LD_ADDR_EXP 79
19536: PUSH
19537: LD_INT 1
19539: ST_TO_ADDR
// if p3 = 13 then
19540: LD_VAR 0 3
19544: PUSH
19545: LD_INT 13
19547: EQUAL
19548: IFFALSE 19558
// sDepot := true ;
19550: LD_ADDR_EXP 80
19554: PUSH
19555: LD_INT 1
19557: ST_TO_ADDR
// if p3 = 14 then
19558: LD_VAR 0 3
19562: PUSH
19563: LD_INT 14
19565: EQUAL
19566: IFFALSE 19576
// sFlag := true ;
19568: LD_ADDR_EXP 81
19572: PUSH
19573: LD_INT 1
19575: ST_TO_ADDR
// if p3 = 15 then
19576: LD_VAR 0 3
19580: PUSH
19581: LD_INT 15
19583: EQUAL
19584: IFFALSE 19594
// sKamikadze := true ;
19586: LD_ADDR_EXP 89
19590: PUSH
19591: LD_INT 1
19593: ST_TO_ADDR
// if p3 = 16 then
19594: LD_VAR 0 3
19598: PUSH
19599: LD_INT 16
19601: EQUAL
19602: IFFALSE 19612
// sTroll := true ;
19604: LD_ADDR_EXP 90
19608: PUSH
19609: LD_INT 1
19611: ST_TO_ADDR
// if p3 = 17 then
19612: LD_VAR 0 3
19616: PUSH
19617: LD_INT 17
19619: EQUAL
19620: IFFALSE 19630
// sSlow := true ;
19622: LD_ADDR_EXP 91
19626: PUSH
19627: LD_INT 1
19629: ST_TO_ADDR
// if p3 = 18 then
19630: LD_VAR 0 3
19634: PUSH
19635: LD_INT 18
19637: EQUAL
19638: IFFALSE 19648
// sLack := true ;
19640: LD_ADDR_EXP 92
19644: PUSH
19645: LD_INT 1
19647: ST_TO_ADDR
// if p3 = 19 then
19648: LD_VAR 0 3
19652: PUSH
19653: LD_INT 19
19655: EQUAL
19656: IFFALSE 19666
// sTank := true ;
19658: LD_ADDR_EXP 94
19662: PUSH
19663: LD_INT 1
19665: ST_TO_ADDR
// if p3 = 20 then
19666: LD_VAR 0 3
19670: PUSH
19671: LD_INT 20
19673: EQUAL
19674: IFFALSE 19684
// sRemote := true ;
19676: LD_ADDR_EXP 95
19680: PUSH
19681: LD_INT 1
19683: ST_TO_ADDR
// if p3 = 21 then
19684: LD_VAR 0 3
19688: PUSH
19689: LD_INT 21
19691: EQUAL
19692: IFFALSE 19702
// sPowell := true ;
19694: LD_ADDR_EXP 96
19698: PUSH
19699: LD_INT 1
19701: ST_TO_ADDR
// if p3 = 22 then
19702: LD_VAR 0 3
19706: PUSH
19707: LD_INT 22
19709: EQUAL
19710: IFFALSE 19720
// sTeleport := true ;
19712: LD_ADDR_EXP 99
19716: PUSH
19717: LD_INT 1
19719: ST_TO_ADDR
// if p3 = 23 then
19720: LD_VAR 0 3
19724: PUSH
19725: LD_INT 23
19727: EQUAL
19728: IFFALSE 19738
// sOilTower := true ;
19730: LD_ADDR_EXP 101
19734: PUSH
19735: LD_INT 1
19737: ST_TO_ADDR
// if p3 = 24 then
19738: LD_VAR 0 3
19742: PUSH
19743: LD_INT 24
19745: EQUAL
19746: IFFALSE 19756
// sShovel := true ;
19748: LD_ADDR_EXP 102
19752: PUSH
19753: LD_INT 1
19755: ST_TO_ADDR
// if p3 = 25 then
19756: LD_VAR 0 3
19760: PUSH
19761: LD_INT 25
19763: EQUAL
19764: IFFALSE 19774
// sSheik := true ;
19766: LD_ADDR_EXP 103
19770: PUSH
19771: LD_INT 1
19773: ST_TO_ADDR
// if p3 = 26 then
19774: LD_VAR 0 3
19778: PUSH
19779: LD_INT 26
19781: EQUAL
19782: IFFALSE 19792
// sEarthquake := true ;
19784: LD_ADDR_EXP 105
19788: PUSH
19789: LD_INT 1
19791: ST_TO_ADDR
// if p3 = 27 then
19792: LD_VAR 0 3
19796: PUSH
19797: LD_INT 27
19799: EQUAL
19800: IFFALSE 19810
// sAI := true ;
19802: LD_ADDR_EXP 106
19806: PUSH
19807: LD_INT 1
19809: ST_TO_ADDR
// if p3 = 28 then
19810: LD_VAR 0 3
19814: PUSH
19815: LD_INT 28
19817: EQUAL
19818: IFFALSE 19828
// sCargo := true ;
19820: LD_ADDR_EXP 109
19824: PUSH
19825: LD_INT 1
19827: ST_TO_ADDR
// if p3 = 29 then
19828: LD_VAR 0 3
19832: PUSH
19833: LD_INT 29
19835: EQUAL
19836: IFFALSE 19846
// sDLaser := true ;
19838: LD_ADDR_EXP 110
19842: PUSH
19843: LD_INT 1
19845: ST_TO_ADDR
// if p3 = 30 then
19846: LD_VAR 0 3
19850: PUSH
19851: LD_INT 30
19853: EQUAL
19854: IFFALSE 19864
// sExchange := true ;
19856: LD_ADDR_EXP 111
19860: PUSH
19861: LD_INT 1
19863: ST_TO_ADDR
// if p3 = 31 then
19864: LD_VAR 0 3
19868: PUSH
19869: LD_INT 31
19871: EQUAL
19872: IFFALSE 19882
// sFac := true ;
19874: LD_ADDR_EXP 112
19878: PUSH
19879: LD_INT 1
19881: ST_TO_ADDR
// if p3 = 32 then
19882: LD_VAR 0 3
19886: PUSH
19887: LD_INT 32
19889: EQUAL
19890: IFFALSE 19900
// sPower := true ;
19892: LD_ADDR_EXP 113
19896: PUSH
19897: LD_INT 1
19899: ST_TO_ADDR
// if p3 = 33 then
19900: LD_VAR 0 3
19904: PUSH
19905: LD_INT 33
19907: EQUAL
19908: IFFALSE 19918
// sRandom := true ;
19910: LD_ADDR_EXP 114
19914: PUSH
19915: LD_INT 1
19917: ST_TO_ADDR
// if p3 = 34 then
19918: LD_VAR 0 3
19922: PUSH
19923: LD_INT 34
19925: EQUAL
19926: IFFALSE 19936
// sShield := true ;
19928: LD_ADDR_EXP 115
19932: PUSH
19933: LD_INT 1
19935: ST_TO_ADDR
// if p3 = 35 then
19936: LD_VAR 0 3
19940: PUSH
19941: LD_INT 35
19943: EQUAL
19944: IFFALSE 19954
// sTime := true ;
19946: LD_ADDR_EXP 116
19950: PUSH
19951: LD_INT 1
19953: ST_TO_ADDR
// if p3 = 36 then
19954: LD_VAR 0 3
19958: PUSH
19959: LD_INT 36
19961: EQUAL
19962: IFFALSE 19972
// sTools := true ;
19964: LD_ADDR_EXP 117
19968: PUSH
19969: LD_INT 1
19971: ST_TO_ADDR
// if p3 = 101 then
19972: LD_VAR 0 3
19976: PUSH
19977: LD_INT 101
19979: EQUAL
19980: IFFALSE 19990
// sSold := true ;
19982: LD_ADDR_EXP 82
19986: PUSH
19987: LD_INT 1
19989: ST_TO_ADDR
// if p3 = 102 then
19990: LD_VAR 0 3
19994: PUSH
19995: LD_INT 102
19997: EQUAL
19998: IFFALSE 20008
// sDiff := true ;
20000: LD_ADDR_EXP 83
20004: PUSH
20005: LD_INT 1
20007: ST_TO_ADDR
// if p3 = 103 then
20008: LD_VAR 0 3
20012: PUSH
20013: LD_INT 103
20015: EQUAL
20016: IFFALSE 20026
// sFog := true ;
20018: LD_ADDR_EXP 86
20022: PUSH
20023: LD_INT 1
20025: ST_TO_ADDR
// if p3 = 104 then
20026: LD_VAR 0 3
20030: PUSH
20031: LD_INT 104
20033: EQUAL
20034: IFFALSE 20044
// sReset := true ;
20036: LD_ADDR_EXP 87
20040: PUSH
20041: LD_INT 1
20043: ST_TO_ADDR
// if p3 = 105 then
20044: LD_VAR 0 3
20048: PUSH
20049: LD_INT 105
20051: EQUAL
20052: IFFALSE 20062
// sSun := true ;
20054: LD_ADDR_EXP 88
20058: PUSH
20059: LD_INT 1
20061: ST_TO_ADDR
// if p3 = 106 then
20062: LD_VAR 0 3
20066: PUSH
20067: LD_INT 106
20069: EQUAL
20070: IFFALSE 20080
// sTiger := true ;
20072: LD_ADDR_EXP 84
20076: PUSH
20077: LD_INT 1
20079: ST_TO_ADDR
// if p3 = 107 then
20080: LD_VAR 0 3
20084: PUSH
20085: LD_INT 107
20087: EQUAL
20088: IFFALSE 20098
// sBomb := true ;
20090: LD_ADDR_EXP 85
20094: PUSH
20095: LD_INT 1
20097: ST_TO_ADDR
// if p3 = 108 then
20098: LD_VAR 0 3
20102: PUSH
20103: LD_INT 108
20105: EQUAL
20106: IFFALSE 20116
// sWound := true ;
20108: LD_ADDR_EXP 93
20112: PUSH
20113: LD_INT 1
20115: ST_TO_ADDR
// if p3 = 109 then
20116: LD_VAR 0 3
20120: PUSH
20121: LD_INT 109
20123: EQUAL
20124: IFFALSE 20134
// sBetray := true ;
20126: LD_ADDR_EXP 97
20130: PUSH
20131: LD_INT 1
20133: ST_TO_ADDR
// if p3 = 110 then
20134: LD_VAR 0 3
20138: PUSH
20139: LD_INT 110
20141: EQUAL
20142: IFFALSE 20152
// sContamin := true ;
20144: LD_ADDR_EXP 98
20148: PUSH
20149: LD_INT 1
20151: ST_TO_ADDR
// if p3 = 111 then
20152: LD_VAR 0 3
20156: PUSH
20157: LD_INT 111
20159: EQUAL
20160: IFFALSE 20170
// sOil := true ;
20162: LD_ADDR_EXP 100
20166: PUSH
20167: LD_INT 1
20169: ST_TO_ADDR
// if p3 = 112 then
20170: LD_VAR 0 3
20174: PUSH
20175: LD_INT 112
20177: EQUAL
20178: IFFALSE 20188
// sStu := true ;
20180: LD_ADDR_EXP 104
20184: PUSH
20185: LD_INT 1
20187: ST_TO_ADDR
// if p3 = 113 then
20188: LD_VAR 0 3
20192: PUSH
20193: LD_INT 113
20195: EQUAL
20196: IFFALSE 20206
// sBazooka := true ;
20198: LD_ADDR_EXP 107
20202: PUSH
20203: LD_INT 1
20205: ST_TO_ADDR
// if p3 = 114 then
20206: LD_VAR 0 3
20210: PUSH
20211: LD_INT 114
20213: EQUAL
20214: IFFALSE 20224
// sMortar := true ;
20216: LD_ADDR_EXP 108
20220: PUSH
20221: LD_INT 1
20223: ST_TO_ADDR
// if p3 = 115 then
20224: LD_VAR 0 3
20228: PUSH
20229: LD_INT 115
20231: EQUAL
20232: IFFALSE 20242
// sRanger := true ;
20234: LD_ADDR_EXP 118
20238: PUSH
20239: LD_INT 1
20241: ST_TO_ADDR
// if p3 = 116 then
20242: LD_VAR 0 3
20246: PUSH
20247: LD_INT 116
20249: EQUAL
20250: IFFALSE 20260
// sComputer := true ;
20252: LD_ADDR_EXP 119
20256: PUSH
20257: LD_INT 1
20259: ST_TO_ADDR
// if p3 = 117 then
20260: LD_VAR 0 3
20264: PUSH
20265: LD_INT 117
20267: EQUAL
20268: IFFALSE 20278
// s30 := true ;
20270: LD_ADDR_EXP 120
20274: PUSH
20275: LD_INT 1
20277: ST_TO_ADDR
// if p3 = 118 then
20278: LD_VAR 0 3
20282: PUSH
20283: LD_INT 118
20285: EQUAL
20286: IFFALSE 20296
// s60 := true ;
20288: LD_ADDR_EXP 121
20292: PUSH
20293: LD_INT 1
20295: ST_TO_ADDR
// end ; if p2 = 101 then
20296: LD_VAR 0 2
20300: PUSH
20301: LD_INT 101
20303: EQUAL
20304: IFFALSE 20432
// begin case p3 of 1 :
20306: LD_VAR 0 3
20310: PUSH
20311: LD_INT 1
20313: DOUBLE
20314: EQUAL
20315: IFTRUE 20319
20317: GO 20326
20319: POP
// hHackUnlimitedResources ; 2 :
20320: CALL 32530 0 0
20324: GO 20432
20326: LD_INT 2
20328: DOUBLE
20329: EQUAL
20330: IFTRUE 20334
20332: GO 20341
20334: POP
// hHackSetLevel10 ; 3 :
20335: CALL 32663 0 0
20339: GO 20432
20341: LD_INT 3
20343: DOUBLE
20344: EQUAL
20345: IFTRUE 20349
20347: GO 20356
20349: POP
// hHackSetLevel10YourUnits ; 4 :
20350: CALL 32748 0 0
20354: GO 20432
20356: LD_INT 4
20358: DOUBLE
20359: EQUAL
20360: IFTRUE 20364
20362: GO 20371
20364: POP
// hHackInvincible ; 5 :
20365: CALL 33196 0 0
20369: GO 20432
20371: LD_INT 5
20373: DOUBLE
20374: EQUAL
20375: IFTRUE 20379
20377: GO 20386
20379: POP
// hHackInvisible ; 6 :
20380: CALL 33307 0 0
20384: GO 20432
20386: LD_INT 6
20388: DOUBLE
20389: EQUAL
20390: IFTRUE 20394
20392: GO 20401
20394: POP
// hHackChangeYourSide ; 7 :
20395: CALL 33364 0 0
20399: GO 20432
20401: LD_INT 7
20403: DOUBLE
20404: EQUAL
20405: IFTRUE 20409
20407: GO 20416
20409: POP
// hHackChangeUnitSide ; 8 :
20410: CALL 33406 0 0
20414: GO 20432
20416: LD_INT 8
20418: DOUBLE
20419: EQUAL
20420: IFTRUE 20424
20422: GO 20431
20424: POP
// hHackFog ; end ;
20425: CALL 33507 0 0
20429: GO 20432
20431: POP
// end ; end ;
20432: LD_VAR 0 7
20436: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20437: GO 20439
20439: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20440: LD_STRING initStreamRollete();
20442: PPUSH
20443: CALL_OW 559
// InitStreamMode ;
20447: CALL 20459 0 0
// DefineStreamItems ( false ) ;
20451: LD_INT 0
20453: PPUSH
20454: CALL 20923 0 1
// end ;
20458: END
// function InitStreamMode ; begin
20459: LD_INT 0
20461: PPUSH
// streamModeActive := false ;
20462: LD_ADDR_EXP 65
20466: PUSH
20467: LD_INT 0
20469: ST_TO_ADDR
// normalCounter := 36 ;
20470: LD_ADDR_EXP 66
20474: PUSH
20475: LD_INT 36
20477: ST_TO_ADDR
// hardcoreCounter := 18 ;
20478: LD_ADDR_EXP 67
20482: PUSH
20483: LD_INT 18
20485: ST_TO_ADDR
// sRocket := false ;
20486: LD_ADDR_EXP 70
20490: PUSH
20491: LD_INT 0
20493: ST_TO_ADDR
// sSpeed := false ;
20494: LD_ADDR_EXP 69
20498: PUSH
20499: LD_INT 0
20501: ST_TO_ADDR
// sEngine := false ;
20502: LD_ADDR_EXP 71
20506: PUSH
20507: LD_INT 0
20509: ST_TO_ADDR
// sSpec := false ;
20510: LD_ADDR_EXP 68
20514: PUSH
20515: LD_INT 0
20517: ST_TO_ADDR
// sLevel := false ;
20518: LD_ADDR_EXP 72
20522: PUSH
20523: LD_INT 0
20525: ST_TO_ADDR
// sArmoury := false ;
20526: LD_ADDR_EXP 73
20530: PUSH
20531: LD_INT 0
20533: ST_TO_ADDR
// sRadar := false ;
20534: LD_ADDR_EXP 74
20538: PUSH
20539: LD_INT 0
20541: ST_TO_ADDR
// sBunker := false ;
20542: LD_ADDR_EXP 75
20546: PUSH
20547: LD_INT 0
20549: ST_TO_ADDR
// sHack := false ;
20550: LD_ADDR_EXP 76
20554: PUSH
20555: LD_INT 0
20557: ST_TO_ADDR
// sFire := false ;
20558: LD_ADDR_EXP 77
20562: PUSH
20563: LD_INT 0
20565: ST_TO_ADDR
// sRefresh := false ;
20566: LD_ADDR_EXP 78
20570: PUSH
20571: LD_INT 0
20573: ST_TO_ADDR
// sExp := false ;
20574: LD_ADDR_EXP 79
20578: PUSH
20579: LD_INT 0
20581: ST_TO_ADDR
// sDepot := false ;
20582: LD_ADDR_EXP 80
20586: PUSH
20587: LD_INT 0
20589: ST_TO_ADDR
// sFlag := false ;
20590: LD_ADDR_EXP 81
20594: PUSH
20595: LD_INT 0
20597: ST_TO_ADDR
// sKamikadze := false ;
20598: LD_ADDR_EXP 89
20602: PUSH
20603: LD_INT 0
20605: ST_TO_ADDR
// sTroll := false ;
20606: LD_ADDR_EXP 90
20610: PUSH
20611: LD_INT 0
20613: ST_TO_ADDR
// sSlow := false ;
20614: LD_ADDR_EXP 91
20618: PUSH
20619: LD_INT 0
20621: ST_TO_ADDR
// sLack := false ;
20622: LD_ADDR_EXP 92
20626: PUSH
20627: LD_INT 0
20629: ST_TO_ADDR
// sTank := false ;
20630: LD_ADDR_EXP 94
20634: PUSH
20635: LD_INT 0
20637: ST_TO_ADDR
// sRemote := false ;
20638: LD_ADDR_EXP 95
20642: PUSH
20643: LD_INT 0
20645: ST_TO_ADDR
// sPowell := false ;
20646: LD_ADDR_EXP 96
20650: PUSH
20651: LD_INT 0
20653: ST_TO_ADDR
// sTeleport := false ;
20654: LD_ADDR_EXP 99
20658: PUSH
20659: LD_INT 0
20661: ST_TO_ADDR
// sOilTower := false ;
20662: LD_ADDR_EXP 101
20666: PUSH
20667: LD_INT 0
20669: ST_TO_ADDR
// sShovel := false ;
20670: LD_ADDR_EXP 102
20674: PUSH
20675: LD_INT 0
20677: ST_TO_ADDR
// sSheik := false ;
20678: LD_ADDR_EXP 103
20682: PUSH
20683: LD_INT 0
20685: ST_TO_ADDR
// sEarthquake := false ;
20686: LD_ADDR_EXP 105
20690: PUSH
20691: LD_INT 0
20693: ST_TO_ADDR
// sAI := false ;
20694: LD_ADDR_EXP 106
20698: PUSH
20699: LD_INT 0
20701: ST_TO_ADDR
// sCargo := false ;
20702: LD_ADDR_EXP 109
20706: PUSH
20707: LD_INT 0
20709: ST_TO_ADDR
// sDLaser := false ;
20710: LD_ADDR_EXP 110
20714: PUSH
20715: LD_INT 0
20717: ST_TO_ADDR
// sExchange := false ;
20718: LD_ADDR_EXP 111
20722: PUSH
20723: LD_INT 0
20725: ST_TO_ADDR
// sFac := false ;
20726: LD_ADDR_EXP 112
20730: PUSH
20731: LD_INT 0
20733: ST_TO_ADDR
// sPower := false ;
20734: LD_ADDR_EXP 113
20738: PUSH
20739: LD_INT 0
20741: ST_TO_ADDR
// sRandom := false ;
20742: LD_ADDR_EXP 114
20746: PUSH
20747: LD_INT 0
20749: ST_TO_ADDR
// sShield := false ;
20750: LD_ADDR_EXP 115
20754: PUSH
20755: LD_INT 0
20757: ST_TO_ADDR
// sTime := false ;
20758: LD_ADDR_EXP 116
20762: PUSH
20763: LD_INT 0
20765: ST_TO_ADDR
// sTools := false ;
20766: LD_ADDR_EXP 117
20770: PUSH
20771: LD_INT 0
20773: ST_TO_ADDR
// sSold := false ;
20774: LD_ADDR_EXP 82
20778: PUSH
20779: LD_INT 0
20781: ST_TO_ADDR
// sDiff := false ;
20782: LD_ADDR_EXP 83
20786: PUSH
20787: LD_INT 0
20789: ST_TO_ADDR
// sFog := false ;
20790: LD_ADDR_EXP 86
20794: PUSH
20795: LD_INT 0
20797: ST_TO_ADDR
// sReset := false ;
20798: LD_ADDR_EXP 87
20802: PUSH
20803: LD_INT 0
20805: ST_TO_ADDR
// sSun := false ;
20806: LD_ADDR_EXP 88
20810: PUSH
20811: LD_INT 0
20813: ST_TO_ADDR
// sTiger := false ;
20814: LD_ADDR_EXP 84
20818: PUSH
20819: LD_INT 0
20821: ST_TO_ADDR
// sBomb := false ;
20822: LD_ADDR_EXP 85
20826: PUSH
20827: LD_INT 0
20829: ST_TO_ADDR
// sWound := false ;
20830: LD_ADDR_EXP 93
20834: PUSH
20835: LD_INT 0
20837: ST_TO_ADDR
// sBetray := false ;
20838: LD_ADDR_EXP 97
20842: PUSH
20843: LD_INT 0
20845: ST_TO_ADDR
// sContamin := false ;
20846: LD_ADDR_EXP 98
20850: PUSH
20851: LD_INT 0
20853: ST_TO_ADDR
// sOil := false ;
20854: LD_ADDR_EXP 100
20858: PUSH
20859: LD_INT 0
20861: ST_TO_ADDR
// sStu := false ;
20862: LD_ADDR_EXP 104
20866: PUSH
20867: LD_INT 0
20869: ST_TO_ADDR
// sBazooka := false ;
20870: LD_ADDR_EXP 107
20874: PUSH
20875: LD_INT 0
20877: ST_TO_ADDR
// sMortar := false ;
20878: LD_ADDR_EXP 108
20882: PUSH
20883: LD_INT 0
20885: ST_TO_ADDR
// sRanger := false ;
20886: LD_ADDR_EXP 118
20890: PUSH
20891: LD_INT 0
20893: ST_TO_ADDR
// sComputer := false ;
20894: LD_ADDR_EXP 119
20898: PUSH
20899: LD_INT 0
20901: ST_TO_ADDR
// s30 := false ;
20902: LD_ADDR_EXP 120
20906: PUSH
20907: LD_INT 0
20909: ST_TO_ADDR
// s60 := false ;
20910: LD_ADDR_EXP 121
20914: PUSH
20915: LD_INT 0
20917: ST_TO_ADDR
// end ;
20918: LD_VAR 0 1
20922: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20923: LD_INT 0
20925: PPUSH
20926: PPUSH
20927: PPUSH
20928: PPUSH
20929: PPUSH
20930: PPUSH
20931: PPUSH
// result := [ ] ;
20932: LD_ADDR_VAR 0 2
20936: PUSH
20937: EMPTY
20938: ST_TO_ADDR
// if campaign_id = 1 then
20939: LD_OWVAR 69
20943: PUSH
20944: LD_INT 1
20946: EQUAL
20947: IFFALSE 24113
// begin case mission_number of 1 :
20949: LD_OWVAR 70
20953: PUSH
20954: LD_INT 1
20956: DOUBLE
20957: EQUAL
20958: IFTRUE 20962
20960: GO 21038
20962: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20963: LD_ADDR_VAR 0 2
20967: PUSH
20968: LD_INT 2
20970: PUSH
20971: LD_INT 4
20973: PUSH
20974: LD_INT 11
20976: PUSH
20977: LD_INT 12
20979: PUSH
20980: LD_INT 15
20982: PUSH
20983: LD_INT 16
20985: PUSH
20986: LD_INT 22
20988: PUSH
20989: LD_INT 23
20991: PUSH
20992: LD_INT 26
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: PUSH
21006: LD_INT 101
21008: PUSH
21009: LD_INT 102
21011: PUSH
21012: LD_INT 106
21014: PUSH
21015: LD_INT 116
21017: PUSH
21018: LD_INT 117
21020: PUSH
21021: LD_INT 118
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: ST_TO_ADDR
21036: GO 24111
21038: LD_INT 2
21040: DOUBLE
21041: EQUAL
21042: IFTRUE 21046
21044: GO 21130
21046: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21047: LD_ADDR_VAR 0 2
21051: PUSH
21052: LD_INT 2
21054: PUSH
21055: LD_INT 4
21057: PUSH
21058: LD_INT 11
21060: PUSH
21061: LD_INT 12
21063: PUSH
21064: LD_INT 15
21066: PUSH
21067: LD_INT 16
21069: PUSH
21070: LD_INT 22
21072: PUSH
21073: LD_INT 23
21075: PUSH
21076: LD_INT 26
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: PUSH
21090: LD_INT 101
21092: PUSH
21093: LD_INT 102
21095: PUSH
21096: LD_INT 105
21098: PUSH
21099: LD_INT 106
21101: PUSH
21102: LD_INT 108
21104: PUSH
21105: LD_INT 116
21107: PUSH
21108: LD_INT 117
21110: PUSH
21111: LD_INT 118
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: ST_TO_ADDR
21128: GO 24111
21130: LD_INT 3
21132: DOUBLE
21133: EQUAL
21134: IFTRUE 21138
21136: GO 21226
21138: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21139: LD_ADDR_VAR 0 2
21143: PUSH
21144: LD_INT 2
21146: PUSH
21147: LD_INT 4
21149: PUSH
21150: LD_INT 5
21152: PUSH
21153: LD_INT 11
21155: PUSH
21156: LD_INT 12
21158: PUSH
21159: LD_INT 15
21161: PUSH
21162: LD_INT 16
21164: PUSH
21165: LD_INT 22
21167: PUSH
21168: LD_INT 26
21170: PUSH
21171: LD_INT 36
21173: PUSH
21174: EMPTY
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: PUSH
21186: LD_INT 101
21188: PUSH
21189: LD_INT 102
21191: PUSH
21192: LD_INT 105
21194: PUSH
21195: LD_INT 106
21197: PUSH
21198: LD_INT 108
21200: PUSH
21201: LD_INT 116
21203: PUSH
21204: LD_INT 117
21206: PUSH
21207: LD_INT 118
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: ST_TO_ADDR
21224: GO 24111
21226: LD_INT 4
21228: DOUBLE
21229: EQUAL
21230: IFTRUE 21234
21232: GO 21330
21234: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21235: LD_ADDR_VAR 0 2
21239: PUSH
21240: LD_INT 2
21242: PUSH
21243: LD_INT 4
21245: PUSH
21246: LD_INT 5
21248: PUSH
21249: LD_INT 8
21251: PUSH
21252: LD_INT 11
21254: PUSH
21255: LD_INT 12
21257: PUSH
21258: LD_INT 15
21260: PUSH
21261: LD_INT 16
21263: PUSH
21264: LD_INT 22
21266: PUSH
21267: LD_INT 23
21269: PUSH
21270: LD_INT 26
21272: PUSH
21273: LD_INT 36
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: PUSH
21290: LD_INT 101
21292: PUSH
21293: LD_INT 102
21295: PUSH
21296: LD_INT 105
21298: PUSH
21299: LD_INT 106
21301: PUSH
21302: LD_INT 108
21304: PUSH
21305: LD_INT 116
21307: PUSH
21308: LD_INT 117
21310: PUSH
21311: LD_INT 118
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: ST_TO_ADDR
21328: GO 24111
21330: LD_INT 5
21332: DOUBLE
21333: EQUAL
21334: IFTRUE 21338
21336: GO 21450
21338: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21339: LD_ADDR_VAR 0 2
21343: PUSH
21344: LD_INT 2
21346: PUSH
21347: LD_INT 4
21349: PUSH
21350: LD_INT 5
21352: PUSH
21353: LD_INT 6
21355: PUSH
21356: LD_INT 8
21358: PUSH
21359: LD_INT 11
21361: PUSH
21362: LD_INT 12
21364: PUSH
21365: LD_INT 15
21367: PUSH
21368: LD_INT 16
21370: PUSH
21371: LD_INT 22
21373: PUSH
21374: LD_INT 23
21376: PUSH
21377: LD_INT 25
21379: PUSH
21380: LD_INT 26
21382: PUSH
21383: LD_INT 36
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: PUSH
21402: LD_INT 101
21404: PUSH
21405: LD_INT 102
21407: PUSH
21408: LD_INT 105
21410: PUSH
21411: LD_INT 106
21413: PUSH
21414: LD_INT 108
21416: PUSH
21417: LD_INT 109
21419: PUSH
21420: LD_INT 112
21422: PUSH
21423: LD_INT 116
21425: PUSH
21426: LD_INT 117
21428: PUSH
21429: LD_INT 118
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: ST_TO_ADDR
21448: GO 24111
21450: LD_INT 6
21452: DOUBLE
21453: EQUAL
21454: IFTRUE 21458
21456: GO 21590
21458: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21459: LD_ADDR_VAR 0 2
21463: PUSH
21464: LD_INT 2
21466: PUSH
21467: LD_INT 4
21469: PUSH
21470: LD_INT 5
21472: PUSH
21473: LD_INT 6
21475: PUSH
21476: LD_INT 8
21478: PUSH
21479: LD_INT 11
21481: PUSH
21482: LD_INT 12
21484: PUSH
21485: LD_INT 15
21487: PUSH
21488: LD_INT 16
21490: PUSH
21491: LD_INT 20
21493: PUSH
21494: LD_INT 21
21496: PUSH
21497: LD_INT 22
21499: PUSH
21500: LD_INT 23
21502: PUSH
21503: LD_INT 25
21505: PUSH
21506: LD_INT 26
21508: PUSH
21509: LD_INT 30
21511: PUSH
21512: LD_INT 31
21514: PUSH
21515: LD_INT 32
21517: PUSH
21518: LD_INT 36
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: PUSH
21542: LD_INT 101
21544: PUSH
21545: LD_INT 102
21547: PUSH
21548: LD_INT 105
21550: PUSH
21551: LD_INT 106
21553: PUSH
21554: LD_INT 108
21556: PUSH
21557: LD_INT 109
21559: PUSH
21560: LD_INT 112
21562: PUSH
21563: LD_INT 116
21565: PUSH
21566: LD_INT 117
21568: PUSH
21569: LD_INT 118
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: ST_TO_ADDR
21588: GO 24111
21590: LD_INT 7
21592: DOUBLE
21593: EQUAL
21594: IFTRUE 21598
21596: GO 21710
21598: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21599: LD_ADDR_VAR 0 2
21603: PUSH
21604: LD_INT 2
21606: PUSH
21607: LD_INT 4
21609: PUSH
21610: LD_INT 5
21612: PUSH
21613: LD_INT 7
21615: PUSH
21616: LD_INT 11
21618: PUSH
21619: LD_INT 12
21621: PUSH
21622: LD_INT 15
21624: PUSH
21625: LD_INT 16
21627: PUSH
21628: LD_INT 20
21630: PUSH
21631: LD_INT 21
21633: PUSH
21634: LD_INT 22
21636: PUSH
21637: LD_INT 23
21639: PUSH
21640: LD_INT 25
21642: PUSH
21643: LD_INT 26
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: PUSH
21662: LD_INT 101
21664: PUSH
21665: LD_INT 102
21667: PUSH
21668: LD_INT 103
21670: PUSH
21671: LD_INT 105
21673: PUSH
21674: LD_INT 106
21676: PUSH
21677: LD_INT 108
21679: PUSH
21680: LD_INT 112
21682: PUSH
21683: LD_INT 116
21685: PUSH
21686: LD_INT 117
21688: PUSH
21689: LD_INT 118
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: ST_TO_ADDR
21708: GO 24111
21710: LD_INT 8
21712: DOUBLE
21713: EQUAL
21714: IFTRUE 21718
21716: GO 21858
21718: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21719: LD_ADDR_VAR 0 2
21723: PUSH
21724: LD_INT 2
21726: PUSH
21727: LD_INT 4
21729: PUSH
21730: LD_INT 5
21732: PUSH
21733: LD_INT 6
21735: PUSH
21736: LD_INT 7
21738: PUSH
21739: LD_INT 8
21741: PUSH
21742: LD_INT 11
21744: PUSH
21745: LD_INT 12
21747: PUSH
21748: LD_INT 15
21750: PUSH
21751: LD_INT 16
21753: PUSH
21754: LD_INT 20
21756: PUSH
21757: LD_INT 21
21759: PUSH
21760: LD_INT 22
21762: PUSH
21763: LD_INT 23
21765: PUSH
21766: LD_INT 25
21768: PUSH
21769: LD_INT 26
21771: PUSH
21772: LD_INT 30
21774: PUSH
21775: LD_INT 31
21777: PUSH
21778: LD_INT 32
21780: PUSH
21781: LD_INT 36
21783: PUSH
21784: EMPTY
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: PUSH
21806: LD_INT 101
21808: PUSH
21809: LD_INT 102
21811: PUSH
21812: LD_INT 103
21814: PUSH
21815: LD_INT 105
21817: PUSH
21818: LD_INT 106
21820: PUSH
21821: LD_INT 108
21823: PUSH
21824: LD_INT 109
21826: PUSH
21827: LD_INT 112
21829: PUSH
21830: LD_INT 116
21832: PUSH
21833: LD_INT 117
21835: PUSH
21836: LD_INT 118
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: ST_TO_ADDR
21856: GO 24111
21858: LD_INT 9
21860: DOUBLE
21861: EQUAL
21862: IFTRUE 21866
21864: GO 22014
21866: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21867: LD_ADDR_VAR 0 2
21871: PUSH
21872: LD_INT 2
21874: PUSH
21875: LD_INT 4
21877: PUSH
21878: LD_INT 5
21880: PUSH
21881: LD_INT 6
21883: PUSH
21884: LD_INT 7
21886: PUSH
21887: LD_INT 8
21889: PUSH
21890: LD_INT 11
21892: PUSH
21893: LD_INT 12
21895: PUSH
21896: LD_INT 15
21898: PUSH
21899: LD_INT 16
21901: PUSH
21902: LD_INT 20
21904: PUSH
21905: LD_INT 21
21907: PUSH
21908: LD_INT 22
21910: PUSH
21911: LD_INT 23
21913: PUSH
21914: LD_INT 25
21916: PUSH
21917: LD_INT 26
21919: PUSH
21920: LD_INT 28
21922: PUSH
21923: LD_INT 30
21925: PUSH
21926: LD_INT 31
21928: PUSH
21929: LD_INT 32
21931: PUSH
21932: LD_INT 36
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: PUSH
21958: LD_INT 101
21960: PUSH
21961: LD_INT 102
21963: PUSH
21964: LD_INT 103
21966: PUSH
21967: LD_INT 105
21969: PUSH
21970: LD_INT 106
21972: PUSH
21973: LD_INT 108
21975: PUSH
21976: LD_INT 109
21978: PUSH
21979: LD_INT 112
21981: PUSH
21982: LD_INT 114
21984: PUSH
21985: LD_INT 116
21987: PUSH
21988: LD_INT 117
21990: PUSH
21991: LD_INT 118
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: PUSH
22008: EMPTY
22009: LIST
22010: LIST
22011: ST_TO_ADDR
22012: GO 24111
22014: LD_INT 10
22016: DOUBLE
22017: EQUAL
22018: IFTRUE 22022
22020: GO 22218
22022: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22023: LD_ADDR_VAR 0 2
22027: PUSH
22028: LD_INT 2
22030: PUSH
22031: LD_INT 4
22033: PUSH
22034: LD_INT 5
22036: PUSH
22037: LD_INT 6
22039: PUSH
22040: LD_INT 7
22042: PUSH
22043: LD_INT 8
22045: PUSH
22046: LD_INT 9
22048: PUSH
22049: LD_INT 10
22051: PUSH
22052: LD_INT 11
22054: PUSH
22055: LD_INT 12
22057: PUSH
22058: LD_INT 13
22060: PUSH
22061: LD_INT 14
22063: PUSH
22064: LD_INT 15
22066: PUSH
22067: LD_INT 16
22069: PUSH
22070: LD_INT 17
22072: PUSH
22073: LD_INT 18
22075: PUSH
22076: LD_INT 19
22078: PUSH
22079: LD_INT 20
22081: PUSH
22082: LD_INT 21
22084: PUSH
22085: LD_INT 22
22087: PUSH
22088: LD_INT 23
22090: PUSH
22091: LD_INT 24
22093: PUSH
22094: LD_INT 25
22096: PUSH
22097: LD_INT 26
22099: PUSH
22100: LD_INT 28
22102: PUSH
22103: LD_INT 30
22105: PUSH
22106: LD_INT 31
22108: PUSH
22109: LD_INT 32
22111: PUSH
22112: LD_INT 36
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: PUSH
22146: LD_INT 101
22148: PUSH
22149: LD_INT 102
22151: PUSH
22152: LD_INT 103
22154: PUSH
22155: LD_INT 104
22157: PUSH
22158: LD_INT 105
22160: PUSH
22161: LD_INT 106
22163: PUSH
22164: LD_INT 107
22166: PUSH
22167: LD_INT 108
22169: PUSH
22170: LD_INT 109
22172: PUSH
22173: LD_INT 110
22175: PUSH
22176: LD_INT 111
22178: PUSH
22179: LD_INT 112
22181: PUSH
22182: LD_INT 114
22184: PUSH
22185: LD_INT 116
22187: PUSH
22188: LD_INT 117
22190: PUSH
22191: LD_INT 118
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: ST_TO_ADDR
22216: GO 24111
22218: LD_INT 11
22220: DOUBLE
22221: EQUAL
22222: IFTRUE 22226
22224: GO 22430
22226: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22227: LD_ADDR_VAR 0 2
22231: PUSH
22232: LD_INT 2
22234: PUSH
22235: LD_INT 3
22237: PUSH
22238: LD_INT 4
22240: PUSH
22241: LD_INT 5
22243: PUSH
22244: LD_INT 6
22246: PUSH
22247: LD_INT 7
22249: PUSH
22250: LD_INT 8
22252: PUSH
22253: LD_INT 9
22255: PUSH
22256: LD_INT 10
22258: PUSH
22259: LD_INT 11
22261: PUSH
22262: LD_INT 12
22264: PUSH
22265: LD_INT 13
22267: PUSH
22268: LD_INT 14
22270: PUSH
22271: LD_INT 15
22273: PUSH
22274: LD_INT 16
22276: PUSH
22277: LD_INT 17
22279: PUSH
22280: LD_INT 18
22282: PUSH
22283: LD_INT 19
22285: PUSH
22286: LD_INT 20
22288: PUSH
22289: LD_INT 21
22291: PUSH
22292: LD_INT 22
22294: PUSH
22295: LD_INT 23
22297: PUSH
22298: LD_INT 24
22300: PUSH
22301: LD_INT 25
22303: PUSH
22304: LD_INT 26
22306: PUSH
22307: LD_INT 28
22309: PUSH
22310: LD_INT 30
22312: PUSH
22313: LD_INT 31
22315: PUSH
22316: LD_INT 32
22318: PUSH
22319: LD_INT 34
22321: PUSH
22322: LD_INT 36
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: PUSH
22358: LD_INT 101
22360: PUSH
22361: LD_INT 102
22363: PUSH
22364: LD_INT 103
22366: PUSH
22367: LD_INT 104
22369: PUSH
22370: LD_INT 105
22372: PUSH
22373: LD_INT 106
22375: PUSH
22376: LD_INT 107
22378: PUSH
22379: LD_INT 108
22381: PUSH
22382: LD_INT 109
22384: PUSH
22385: LD_INT 110
22387: PUSH
22388: LD_INT 111
22390: PUSH
22391: LD_INT 112
22393: PUSH
22394: LD_INT 114
22396: PUSH
22397: LD_INT 116
22399: PUSH
22400: LD_INT 117
22402: PUSH
22403: LD_INT 118
22405: PUSH
22406: EMPTY
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: ST_TO_ADDR
22428: GO 24111
22430: LD_INT 12
22432: DOUBLE
22433: EQUAL
22434: IFTRUE 22438
22436: GO 22658
22438: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22439: LD_ADDR_VAR 0 2
22443: PUSH
22444: LD_INT 1
22446: PUSH
22447: LD_INT 2
22449: PUSH
22450: LD_INT 3
22452: PUSH
22453: LD_INT 4
22455: PUSH
22456: LD_INT 5
22458: PUSH
22459: LD_INT 6
22461: PUSH
22462: LD_INT 7
22464: PUSH
22465: LD_INT 8
22467: PUSH
22468: LD_INT 9
22470: PUSH
22471: LD_INT 10
22473: PUSH
22474: LD_INT 11
22476: PUSH
22477: LD_INT 12
22479: PUSH
22480: LD_INT 13
22482: PUSH
22483: LD_INT 14
22485: PUSH
22486: LD_INT 15
22488: PUSH
22489: LD_INT 16
22491: PUSH
22492: LD_INT 17
22494: PUSH
22495: LD_INT 18
22497: PUSH
22498: LD_INT 19
22500: PUSH
22501: LD_INT 20
22503: PUSH
22504: LD_INT 21
22506: PUSH
22507: LD_INT 22
22509: PUSH
22510: LD_INT 23
22512: PUSH
22513: LD_INT 24
22515: PUSH
22516: LD_INT 25
22518: PUSH
22519: LD_INT 26
22521: PUSH
22522: LD_INT 27
22524: PUSH
22525: LD_INT 28
22527: PUSH
22528: LD_INT 30
22530: PUSH
22531: LD_INT 31
22533: PUSH
22534: LD_INT 32
22536: PUSH
22537: LD_INT 33
22539: PUSH
22540: LD_INT 34
22542: PUSH
22543: LD_INT 36
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: PUSH
22582: LD_INT 101
22584: PUSH
22585: LD_INT 102
22587: PUSH
22588: LD_INT 103
22590: PUSH
22591: LD_INT 104
22593: PUSH
22594: LD_INT 105
22596: PUSH
22597: LD_INT 106
22599: PUSH
22600: LD_INT 107
22602: PUSH
22603: LD_INT 108
22605: PUSH
22606: LD_INT 109
22608: PUSH
22609: LD_INT 110
22611: PUSH
22612: LD_INT 111
22614: PUSH
22615: LD_INT 112
22617: PUSH
22618: LD_INT 113
22620: PUSH
22621: LD_INT 114
22623: PUSH
22624: LD_INT 116
22626: PUSH
22627: LD_INT 117
22629: PUSH
22630: LD_INT 118
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: ST_TO_ADDR
22656: GO 24111
22658: LD_INT 13
22660: DOUBLE
22661: EQUAL
22662: IFTRUE 22666
22664: GO 22874
22666: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22667: LD_ADDR_VAR 0 2
22671: PUSH
22672: LD_INT 1
22674: PUSH
22675: LD_INT 2
22677: PUSH
22678: LD_INT 3
22680: PUSH
22681: LD_INT 4
22683: PUSH
22684: LD_INT 5
22686: PUSH
22687: LD_INT 8
22689: PUSH
22690: LD_INT 9
22692: PUSH
22693: LD_INT 10
22695: PUSH
22696: LD_INT 11
22698: PUSH
22699: LD_INT 12
22701: PUSH
22702: LD_INT 14
22704: PUSH
22705: LD_INT 15
22707: PUSH
22708: LD_INT 16
22710: PUSH
22711: LD_INT 17
22713: PUSH
22714: LD_INT 18
22716: PUSH
22717: LD_INT 19
22719: PUSH
22720: LD_INT 20
22722: PUSH
22723: LD_INT 21
22725: PUSH
22726: LD_INT 22
22728: PUSH
22729: LD_INT 23
22731: PUSH
22732: LD_INT 24
22734: PUSH
22735: LD_INT 25
22737: PUSH
22738: LD_INT 26
22740: PUSH
22741: LD_INT 27
22743: PUSH
22744: LD_INT 28
22746: PUSH
22747: LD_INT 30
22749: PUSH
22750: LD_INT 31
22752: PUSH
22753: LD_INT 32
22755: PUSH
22756: LD_INT 33
22758: PUSH
22759: LD_INT 34
22761: PUSH
22762: LD_INT 36
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: PUSH
22798: LD_INT 101
22800: PUSH
22801: LD_INT 102
22803: PUSH
22804: LD_INT 103
22806: PUSH
22807: LD_INT 104
22809: PUSH
22810: LD_INT 105
22812: PUSH
22813: LD_INT 106
22815: PUSH
22816: LD_INT 107
22818: PUSH
22819: LD_INT 108
22821: PUSH
22822: LD_INT 109
22824: PUSH
22825: LD_INT 110
22827: PUSH
22828: LD_INT 111
22830: PUSH
22831: LD_INT 112
22833: PUSH
22834: LD_INT 113
22836: PUSH
22837: LD_INT 114
22839: PUSH
22840: LD_INT 116
22842: PUSH
22843: LD_INT 117
22845: PUSH
22846: LD_INT 118
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: ST_TO_ADDR
22872: GO 24111
22874: LD_INT 14
22876: DOUBLE
22877: EQUAL
22878: IFTRUE 22882
22880: GO 23106
22882: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22883: LD_ADDR_VAR 0 2
22887: PUSH
22888: LD_INT 1
22890: PUSH
22891: LD_INT 2
22893: PUSH
22894: LD_INT 3
22896: PUSH
22897: LD_INT 4
22899: PUSH
22900: LD_INT 5
22902: PUSH
22903: LD_INT 6
22905: PUSH
22906: LD_INT 7
22908: PUSH
22909: LD_INT 8
22911: PUSH
22912: LD_INT 9
22914: PUSH
22915: LD_INT 10
22917: PUSH
22918: LD_INT 11
22920: PUSH
22921: LD_INT 12
22923: PUSH
22924: LD_INT 13
22926: PUSH
22927: LD_INT 14
22929: PUSH
22930: LD_INT 15
22932: PUSH
22933: LD_INT 16
22935: PUSH
22936: LD_INT 17
22938: PUSH
22939: LD_INT 18
22941: PUSH
22942: LD_INT 19
22944: PUSH
22945: LD_INT 20
22947: PUSH
22948: LD_INT 21
22950: PUSH
22951: LD_INT 22
22953: PUSH
22954: LD_INT 23
22956: PUSH
22957: LD_INT 24
22959: PUSH
22960: LD_INT 25
22962: PUSH
22963: LD_INT 26
22965: PUSH
22966: LD_INT 27
22968: PUSH
22969: LD_INT 28
22971: PUSH
22972: LD_INT 29
22974: PUSH
22975: LD_INT 30
22977: PUSH
22978: LD_INT 31
22980: PUSH
22981: LD_INT 32
22983: PUSH
22984: LD_INT 33
22986: PUSH
22987: LD_INT 34
22989: PUSH
22990: LD_INT 36
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 101
23032: PUSH
23033: LD_INT 102
23035: PUSH
23036: LD_INT 103
23038: PUSH
23039: LD_INT 104
23041: PUSH
23042: LD_INT 105
23044: PUSH
23045: LD_INT 106
23047: PUSH
23048: LD_INT 107
23050: PUSH
23051: LD_INT 108
23053: PUSH
23054: LD_INT 109
23056: PUSH
23057: LD_INT 110
23059: PUSH
23060: LD_INT 111
23062: PUSH
23063: LD_INT 112
23065: PUSH
23066: LD_INT 113
23068: PUSH
23069: LD_INT 114
23071: PUSH
23072: LD_INT 116
23074: PUSH
23075: LD_INT 117
23077: PUSH
23078: LD_INT 118
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: PUSH
23100: EMPTY
23101: LIST
23102: LIST
23103: ST_TO_ADDR
23104: GO 24111
23106: LD_INT 15
23108: DOUBLE
23109: EQUAL
23110: IFTRUE 23114
23112: GO 23338
23114: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23115: LD_ADDR_VAR 0 2
23119: PUSH
23120: LD_INT 1
23122: PUSH
23123: LD_INT 2
23125: PUSH
23126: LD_INT 3
23128: PUSH
23129: LD_INT 4
23131: PUSH
23132: LD_INT 5
23134: PUSH
23135: LD_INT 6
23137: PUSH
23138: LD_INT 7
23140: PUSH
23141: LD_INT 8
23143: PUSH
23144: LD_INT 9
23146: PUSH
23147: LD_INT 10
23149: PUSH
23150: LD_INT 11
23152: PUSH
23153: LD_INT 12
23155: PUSH
23156: LD_INT 13
23158: PUSH
23159: LD_INT 14
23161: PUSH
23162: LD_INT 15
23164: PUSH
23165: LD_INT 16
23167: PUSH
23168: LD_INT 17
23170: PUSH
23171: LD_INT 18
23173: PUSH
23174: LD_INT 19
23176: PUSH
23177: LD_INT 20
23179: PUSH
23180: LD_INT 21
23182: PUSH
23183: LD_INT 22
23185: PUSH
23186: LD_INT 23
23188: PUSH
23189: LD_INT 24
23191: PUSH
23192: LD_INT 25
23194: PUSH
23195: LD_INT 26
23197: PUSH
23198: LD_INT 27
23200: PUSH
23201: LD_INT 28
23203: PUSH
23204: LD_INT 29
23206: PUSH
23207: LD_INT 30
23209: PUSH
23210: LD_INT 31
23212: PUSH
23213: LD_INT 32
23215: PUSH
23216: LD_INT 33
23218: PUSH
23219: LD_INT 34
23221: PUSH
23222: LD_INT 36
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: PUSH
23262: LD_INT 101
23264: PUSH
23265: LD_INT 102
23267: PUSH
23268: LD_INT 103
23270: PUSH
23271: LD_INT 104
23273: PUSH
23274: LD_INT 105
23276: PUSH
23277: LD_INT 106
23279: PUSH
23280: LD_INT 107
23282: PUSH
23283: LD_INT 108
23285: PUSH
23286: LD_INT 109
23288: PUSH
23289: LD_INT 110
23291: PUSH
23292: LD_INT 111
23294: PUSH
23295: LD_INT 112
23297: PUSH
23298: LD_INT 113
23300: PUSH
23301: LD_INT 114
23303: PUSH
23304: LD_INT 116
23306: PUSH
23307: LD_INT 117
23309: PUSH
23310: LD_INT 118
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: ST_TO_ADDR
23336: GO 24111
23338: LD_INT 16
23340: DOUBLE
23341: EQUAL
23342: IFTRUE 23346
23344: GO 23482
23346: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23347: LD_ADDR_VAR 0 2
23351: PUSH
23352: LD_INT 2
23354: PUSH
23355: LD_INT 4
23357: PUSH
23358: LD_INT 5
23360: PUSH
23361: LD_INT 7
23363: PUSH
23364: LD_INT 11
23366: PUSH
23367: LD_INT 12
23369: PUSH
23370: LD_INT 15
23372: PUSH
23373: LD_INT 16
23375: PUSH
23376: LD_INT 20
23378: PUSH
23379: LD_INT 21
23381: PUSH
23382: LD_INT 22
23384: PUSH
23385: LD_INT 23
23387: PUSH
23388: LD_INT 25
23390: PUSH
23391: LD_INT 26
23393: PUSH
23394: LD_INT 30
23396: PUSH
23397: LD_INT 31
23399: PUSH
23400: LD_INT 32
23402: PUSH
23403: LD_INT 33
23405: PUSH
23406: LD_INT 34
23408: PUSH
23409: EMPTY
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: PUSH
23430: LD_INT 101
23432: PUSH
23433: LD_INT 102
23435: PUSH
23436: LD_INT 103
23438: PUSH
23439: LD_INT 106
23441: PUSH
23442: LD_INT 108
23444: PUSH
23445: LD_INT 112
23447: PUSH
23448: LD_INT 113
23450: PUSH
23451: LD_INT 114
23453: PUSH
23454: LD_INT 116
23456: PUSH
23457: LD_INT 117
23459: PUSH
23460: LD_INT 118
23462: PUSH
23463: EMPTY
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: ST_TO_ADDR
23480: GO 24111
23482: LD_INT 17
23484: DOUBLE
23485: EQUAL
23486: IFTRUE 23490
23488: GO 23714
23490: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23491: LD_ADDR_VAR 0 2
23495: PUSH
23496: LD_INT 1
23498: PUSH
23499: LD_INT 2
23501: PUSH
23502: LD_INT 3
23504: PUSH
23505: LD_INT 4
23507: PUSH
23508: LD_INT 5
23510: PUSH
23511: LD_INT 6
23513: PUSH
23514: LD_INT 7
23516: PUSH
23517: LD_INT 8
23519: PUSH
23520: LD_INT 9
23522: PUSH
23523: LD_INT 10
23525: PUSH
23526: LD_INT 11
23528: PUSH
23529: LD_INT 12
23531: PUSH
23532: LD_INT 13
23534: PUSH
23535: LD_INT 14
23537: PUSH
23538: LD_INT 15
23540: PUSH
23541: LD_INT 16
23543: PUSH
23544: LD_INT 17
23546: PUSH
23547: LD_INT 18
23549: PUSH
23550: LD_INT 19
23552: PUSH
23553: LD_INT 20
23555: PUSH
23556: LD_INT 21
23558: PUSH
23559: LD_INT 22
23561: PUSH
23562: LD_INT 23
23564: PUSH
23565: LD_INT 24
23567: PUSH
23568: LD_INT 25
23570: PUSH
23571: LD_INT 26
23573: PUSH
23574: LD_INT 27
23576: PUSH
23577: LD_INT 28
23579: PUSH
23580: LD_INT 29
23582: PUSH
23583: LD_INT 30
23585: PUSH
23586: LD_INT 31
23588: PUSH
23589: LD_INT 32
23591: PUSH
23592: LD_INT 33
23594: PUSH
23595: LD_INT 34
23597: PUSH
23598: LD_INT 36
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: PUSH
23638: LD_INT 101
23640: PUSH
23641: LD_INT 102
23643: PUSH
23644: LD_INT 103
23646: PUSH
23647: LD_INT 104
23649: PUSH
23650: LD_INT 105
23652: PUSH
23653: LD_INT 106
23655: PUSH
23656: LD_INT 107
23658: PUSH
23659: LD_INT 108
23661: PUSH
23662: LD_INT 109
23664: PUSH
23665: LD_INT 110
23667: PUSH
23668: LD_INT 111
23670: PUSH
23671: LD_INT 112
23673: PUSH
23674: LD_INT 113
23676: PUSH
23677: LD_INT 114
23679: PUSH
23680: LD_INT 116
23682: PUSH
23683: LD_INT 117
23685: PUSH
23686: LD_INT 118
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: ST_TO_ADDR
23712: GO 24111
23714: LD_INT 18
23716: DOUBLE
23717: EQUAL
23718: IFTRUE 23722
23720: GO 23870
23722: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23723: LD_ADDR_VAR 0 2
23727: PUSH
23728: LD_INT 2
23730: PUSH
23731: LD_INT 4
23733: PUSH
23734: LD_INT 5
23736: PUSH
23737: LD_INT 7
23739: PUSH
23740: LD_INT 11
23742: PUSH
23743: LD_INT 12
23745: PUSH
23746: LD_INT 15
23748: PUSH
23749: LD_INT 16
23751: PUSH
23752: LD_INT 20
23754: PUSH
23755: LD_INT 21
23757: PUSH
23758: LD_INT 22
23760: PUSH
23761: LD_INT 23
23763: PUSH
23764: LD_INT 25
23766: PUSH
23767: LD_INT 26
23769: PUSH
23770: LD_INT 30
23772: PUSH
23773: LD_INT 31
23775: PUSH
23776: LD_INT 32
23778: PUSH
23779: LD_INT 33
23781: PUSH
23782: LD_INT 34
23784: PUSH
23785: LD_INT 35
23787: PUSH
23788: LD_INT 36
23790: PUSH
23791: EMPTY
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: PUSH
23814: LD_INT 101
23816: PUSH
23817: LD_INT 102
23819: PUSH
23820: LD_INT 103
23822: PUSH
23823: LD_INT 106
23825: PUSH
23826: LD_INT 108
23828: PUSH
23829: LD_INT 112
23831: PUSH
23832: LD_INT 113
23834: PUSH
23835: LD_INT 114
23837: PUSH
23838: LD_INT 115
23840: PUSH
23841: LD_INT 116
23843: PUSH
23844: LD_INT 117
23846: PUSH
23847: LD_INT 118
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: ST_TO_ADDR
23868: GO 24111
23870: LD_INT 19
23872: DOUBLE
23873: EQUAL
23874: IFTRUE 23878
23876: GO 24110
23878: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23879: LD_ADDR_VAR 0 2
23883: PUSH
23884: LD_INT 1
23886: PUSH
23887: LD_INT 2
23889: PUSH
23890: LD_INT 3
23892: PUSH
23893: LD_INT 4
23895: PUSH
23896: LD_INT 5
23898: PUSH
23899: LD_INT 6
23901: PUSH
23902: LD_INT 7
23904: PUSH
23905: LD_INT 8
23907: PUSH
23908: LD_INT 9
23910: PUSH
23911: LD_INT 10
23913: PUSH
23914: LD_INT 11
23916: PUSH
23917: LD_INT 12
23919: PUSH
23920: LD_INT 13
23922: PUSH
23923: LD_INT 14
23925: PUSH
23926: LD_INT 15
23928: PUSH
23929: LD_INT 16
23931: PUSH
23932: LD_INT 17
23934: PUSH
23935: LD_INT 18
23937: PUSH
23938: LD_INT 19
23940: PUSH
23941: LD_INT 20
23943: PUSH
23944: LD_INT 21
23946: PUSH
23947: LD_INT 22
23949: PUSH
23950: LD_INT 23
23952: PUSH
23953: LD_INT 24
23955: PUSH
23956: LD_INT 25
23958: PUSH
23959: LD_INT 26
23961: PUSH
23962: LD_INT 27
23964: PUSH
23965: LD_INT 28
23967: PUSH
23968: LD_INT 29
23970: PUSH
23971: LD_INT 30
23973: PUSH
23974: LD_INT 31
23976: PUSH
23977: LD_INT 32
23979: PUSH
23980: LD_INT 33
23982: PUSH
23983: LD_INT 34
23985: PUSH
23986: LD_INT 35
23988: PUSH
23989: LD_INT 36
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: PUSH
24030: LD_INT 101
24032: PUSH
24033: LD_INT 102
24035: PUSH
24036: LD_INT 103
24038: PUSH
24039: LD_INT 104
24041: PUSH
24042: LD_INT 105
24044: PUSH
24045: LD_INT 106
24047: PUSH
24048: LD_INT 107
24050: PUSH
24051: LD_INT 108
24053: PUSH
24054: LD_INT 109
24056: PUSH
24057: LD_INT 110
24059: PUSH
24060: LD_INT 111
24062: PUSH
24063: LD_INT 112
24065: PUSH
24066: LD_INT 113
24068: PUSH
24069: LD_INT 114
24071: PUSH
24072: LD_INT 115
24074: PUSH
24075: LD_INT 116
24077: PUSH
24078: LD_INT 117
24080: PUSH
24081: LD_INT 118
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: PUSH
24104: EMPTY
24105: LIST
24106: LIST
24107: ST_TO_ADDR
24108: GO 24111
24110: POP
// end else
24111: GO 24342
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24113: LD_ADDR_VAR 0 2
24117: PUSH
24118: LD_INT 1
24120: PUSH
24121: LD_INT 2
24123: PUSH
24124: LD_INT 3
24126: PUSH
24127: LD_INT 4
24129: PUSH
24130: LD_INT 5
24132: PUSH
24133: LD_INT 6
24135: PUSH
24136: LD_INT 7
24138: PUSH
24139: LD_INT 8
24141: PUSH
24142: LD_INT 9
24144: PUSH
24145: LD_INT 10
24147: PUSH
24148: LD_INT 11
24150: PUSH
24151: LD_INT 12
24153: PUSH
24154: LD_INT 13
24156: PUSH
24157: LD_INT 14
24159: PUSH
24160: LD_INT 15
24162: PUSH
24163: LD_INT 16
24165: PUSH
24166: LD_INT 17
24168: PUSH
24169: LD_INT 18
24171: PUSH
24172: LD_INT 19
24174: PUSH
24175: LD_INT 20
24177: PUSH
24178: LD_INT 21
24180: PUSH
24181: LD_INT 22
24183: PUSH
24184: LD_INT 23
24186: PUSH
24187: LD_INT 24
24189: PUSH
24190: LD_INT 25
24192: PUSH
24193: LD_INT 26
24195: PUSH
24196: LD_INT 27
24198: PUSH
24199: LD_INT 28
24201: PUSH
24202: LD_INT 29
24204: PUSH
24205: LD_INT 30
24207: PUSH
24208: LD_INT 31
24210: PUSH
24211: LD_INT 32
24213: PUSH
24214: LD_INT 33
24216: PUSH
24217: LD_INT 34
24219: PUSH
24220: LD_INT 35
24222: PUSH
24223: LD_INT 36
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: PUSH
24264: LD_INT 101
24266: PUSH
24267: LD_INT 102
24269: PUSH
24270: LD_INT 103
24272: PUSH
24273: LD_INT 104
24275: PUSH
24276: LD_INT 105
24278: PUSH
24279: LD_INT 106
24281: PUSH
24282: LD_INT 107
24284: PUSH
24285: LD_INT 108
24287: PUSH
24288: LD_INT 109
24290: PUSH
24291: LD_INT 110
24293: PUSH
24294: LD_INT 111
24296: PUSH
24297: LD_INT 112
24299: PUSH
24300: LD_INT 113
24302: PUSH
24303: LD_INT 114
24305: PUSH
24306: LD_INT 115
24308: PUSH
24309: LD_INT 116
24311: PUSH
24312: LD_INT 117
24314: PUSH
24315: LD_INT 118
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: ST_TO_ADDR
// if result then
24342: LD_VAR 0 2
24346: IFFALSE 25132
// begin normal :=  ;
24348: LD_ADDR_VAR 0 5
24352: PUSH
24353: LD_STRING 
24355: ST_TO_ADDR
// hardcore :=  ;
24356: LD_ADDR_VAR 0 6
24360: PUSH
24361: LD_STRING 
24363: ST_TO_ADDR
// active :=  ;
24364: LD_ADDR_VAR 0 7
24368: PUSH
24369: LD_STRING 
24371: ST_TO_ADDR
// for i = 1 to normalCounter do
24372: LD_ADDR_VAR 0 8
24376: PUSH
24377: DOUBLE
24378: LD_INT 1
24380: DEC
24381: ST_TO_ADDR
24382: LD_EXP 66
24386: PUSH
24387: FOR_TO
24388: IFFALSE 24489
// begin tmp := 0 ;
24390: LD_ADDR_VAR 0 3
24394: PUSH
24395: LD_STRING 0
24397: ST_TO_ADDR
// if result [ 1 ] then
24398: LD_VAR 0 2
24402: PUSH
24403: LD_INT 1
24405: ARRAY
24406: IFFALSE 24471
// if result [ 1 ] [ 1 ] = i then
24408: LD_VAR 0 2
24412: PUSH
24413: LD_INT 1
24415: ARRAY
24416: PUSH
24417: LD_INT 1
24419: ARRAY
24420: PUSH
24421: LD_VAR 0 8
24425: EQUAL
24426: IFFALSE 24471
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24428: LD_ADDR_VAR 0 2
24432: PUSH
24433: LD_VAR 0 2
24437: PPUSH
24438: LD_INT 1
24440: PPUSH
24441: LD_VAR 0 2
24445: PUSH
24446: LD_INT 1
24448: ARRAY
24449: PPUSH
24450: LD_INT 1
24452: PPUSH
24453: CALL_OW 3
24457: PPUSH
24458: CALL_OW 1
24462: ST_TO_ADDR
// tmp := 1 ;
24463: LD_ADDR_VAR 0 3
24467: PUSH
24468: LD_STRING 1
24470: ST_TO_ADDR
// end ; normal := normal & tmp ;
24471: LD_ADDR_VAR 0 5
24475: PUSH
24476: LD_VAR 0 5
24480: PUSH
24481: LD_VAR 0 3
24485: STR
24486: ST_TO_ADDR
// end ;
24487: GO 24387
24489: POP
24490: POP
// for i = 1 to hardcoreCounter do
24491: LD_ADDR_VAR 0 8
24495: PUSH
24496: DOUBLE
24497: LD_INT 1
24499: DEC
24500: ST_TO_ADDR
24501: LD_EXP 67
24505: PUSH
24506: FOR_TO
24507: IFFALSE 24612
// begin tmp := 0 ;
24509: LD_ADDR_VAR 0 3
24513: PUSH
24514: LD_STRING 0
24516: ST_TO_ADDR
// if result [ 2 ] then
24517: LD_VAR 0 2
24521: PUSH
24522: LD_INT 2
24524: ARRAY
24525: IFFALSE 24594
// if result [ 2 ] [ 1 ] = 100 + i then
24527: LD_VAR 0 2
24531: PUSH
24532: LD_INT 2
24534: ARRAY
24535: PUSH
24536: LD_INT 1
24538: ARRAY
24539: PUSH
24540: LD_INT 100
24542: PUSH
24543: LD_VAR 0 8
24547: PLUS
24548: EQUAL
24549: IFFALSE 24594
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24551: LD_ADDR_VAR 0 2
24555: PUSH
24556: LD_VAR 0 2
24560: PPUSH
24561: LD_INT 2
24563: PPUSH
24564: LD_VAR 0 2
24568: PUSH
24569: LD_INT 2
24571: ARRAY
24572: PPUSH
24573: LD_INT 1
24575: PPUSH
24576: CALL_OW 3
24580: PPUSH
24581: CALL_OW 1
24585: ST_TO_ADDR
// tmp := 1 ;
24586: LD_ADDR_VAR 0 3
24590: PUSH
24591: LD_STRING 1
24593: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24594: LD_ADDR_VAR 0 6
24598: PUSH
24599: LD_VAR 0 6
24603: PUSH
24604: LD_VAR 0 3
24608: STR
24609: ST_TO_ADDR
// end ;
24610: GO 24506
24612: POP
24613: POP
// if isGameLoad then
24614: LD_VAR 0 1
24618: IFFALSE 25093
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24620: LD_ADDR_VAR 0 4
24624: PUSH
24625: LD_EXP 70
24629: PUSH
24630: LD_EXP 69
24634: PUSH
24635: LD_EXP 71
24639: PUSH
24640: LD_EXP 68
24644: PUSH
24645: LD_EXP 72
24649: PUSH
24650: LD_EXP 73
24654: PUSH
24655: LD_EXP 74
24659: PUSH
24660: LD_EXP 75
24664: PUSH
24665: LD_EXP 76
24669: PUSH
24670: LD_EXP 77
24674: PUSH
24675: LD_EXP 78
24679: PUSH
24680: LD_EXP 79
24684: PUSH
24685: LD_EXP 80
24689: PUSH
24690: LD_EXP 81
24694: PUSH
24695: LD_EXP 89
24699: PUSH
24700: LD_EXP 90
24704: PUSH
24705: LD_EXP 91
24709: PUSH
24710: LD_EXP 92
24714: PUSH
24715: LD_EXP 94
24719: PUSH
24720: LD_EXP 95
24724: PUSH
24725: LD_EXP 96
24729: PUSH
24730: LD_EXP 99
24734: PUSH
24735: LD_EXP 101
24739: PUSH
24740: LD_EXP 102
24744: PUSH
24745: LD_EXP 103
24749: PUSH
24750: LD_EXP 105
24754: PUSH
24755: LD_EXP 106
24759: PUSH
24760: LD_EXP 109
24764: PUSH
24765: LD_EXP 110
24769: PUSH
24770: LD_EXP 111
24774: PUSH
24775: LD_EXP 112
24779: PUSH
24780: LD_EXP 113
24784: PUSH
24785: LD_EXP 114
24789: PUSH
24790: LD_EXP 115
24794: PUSH
24795: LD_EXP 116
24799: PUSH
24800: LD_EXP 117
24804: PUSH
24805: LD_EXP 82
24809: PUSH
24810: LD_EXP 83
24814: PUSH
24815: LD_EXP 86
24819: PUSH
24820: LD_EXP 87
24824: PUSH
24825: LD_EXP 88
24829: PUSH
24830: LD_EXP 84
24834: PUSH
24835: LD_EXP 85
24839: PUSH
24840: LD_EXP 93
24844: PUSH
24845: LD_EXP 97
24849: PUSH
24850: LD_EXP 98
24854: PUSH
24855: LD_EXP 100
24859: PUSH
24860: LD_EXP 104
24864: PUSH
24865: LD_EXP 107
24869: PUSH
24870: LD_EXP 108
24874: PUSH
24875: LD_EXP 118
24879: PUSH
24880: LD_EXP 119
24884: PUSH
24885: LD_EXP 120
24889: PUSH
24890: LD_EXP 121
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: ST_TO_ADDR
// tmp :=  ;
24951: LD_ADDR_VAR 0 3
24955: PUSH
24956: LD_STRING 
24958: ST_TO_ADDR
// for i = 1 to normalCounter do
24959: LD_ADDR_VAR 0 8
24963: PUSH
24964: DOUBLE
24965: LD_INT 1
24967: DEC
24968: ST_TO_ADDR
24969: LD_EXP 66
24973: PUSH
24974: FOR_TO
24975: IFFALSE 25011
// begin if flags [ i ] then
24977: LD_VAR 0 4
24981: PUSH
24982: LD_VAR 0 8
24986: ARRAY
24987: IFFALSE 25009
// tmp := tmp & i & ; ;
24989: LD_ADDR_VAR 0 3
24993: PUSH
24994: LD_VAR 0 3
24998: PUSH
24999: LD_VAR 0 8
25003: STR
25004: PUSH
25005: LD_STRING ;
25007: STR
25008: ST_TO_ADDR
// end ;
25009: GO 24974
25011: POP
25012: POP
// for i = 1 to hardcoreCounter do
25013: LD_ADDR_VAR 0 8
25017: PUSH
25018: DOUBLE
25019: LD_INT 1
25021: DEC
25022: ST_TO_ADDR
25023: LD_EXP 67
25027: PUSH
25028: FOR_TO
25029: IFFALSE 25075
// begin if flags [ normalCounter + i ] then
25031: LD_VAR 0 4
25035: PUSH
25036: LD_EXP 66
25040: PUSH
25041: LD_VAR 0 8
25045: PLUS
25046: ARRAY
25047: IFFALSE 25073
// tmp := tmp & ( 100 + i ) & ; ;
25049: LD_ADDR_VAR 0 3
25053: PUSH
25054: LD_VAR 0 3
25058: PUSH
25059: LD_INT 100
25061: PUSH
25062: LD_VAR 0 8
25066: PLUS
25067: STR
25068: PUSH
25069: LD_STRING ;
25071: STR
25072: ST_TO_ADDR
// end ;
25073: GO 25028
25075: POP
25076: POP
// if tmp then
25077: LD_VAR 0 3
25081: IFFALSE 25093
// active := tmp ;
25083: LD_ADDR_VAR 0 7
25087: PUSH
25088: LD_VAR 0 3
25092: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25093: LD_STRING getStreamItemsFromMission("
25095: PUSH
25096: LD_VAR 0 5
25100: STR
25101: PUSH
25102: LD_STRING ","
25104: STR
25105: PUSH
25106: LD_VAR 0 6
25110: STR
25111: PUSH
25112: LD_STRING ","
25114: STR
25115: PUSH
25116: LD_VAR 0 7
25120: STR
25121: PUSH
25122: LD_STRING ")
25124: STR
25125: PPUSH
25126: CALL_OW 559
// end else
25130: GO 25139
// ToLua ( getStreamItemsFromMission("","","") ) ;
25132: LD_STRING getStreamItemsFromMission("","","")
25134: PPUSH
25135: CALL_OW 559
// end ;
25139: LD_VAR 0 2
25143: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25144: LD_EXP 65
25148: PUSH
25149: LD_EXP 70
25153: AND
25154: IFFALSE 25278
25156: GO 25158
25158: DISABLE
25159: LD_INT 0
25161: PPUSH
25162: PPUSH
// begin enable ;
25163: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25164: LD_ADDR_VAR 0 2
25168: PUSH
25169: LD_INT 22
25171: PUSH
25172: LD_OWVAR 2
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 2
25183: PUSH
25184: LD_INT 34
25186: PUSH
25187: LD_INT 7
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: PUSH
25194: LD_INT 34
25196: PUSH
25197: LD_INT 45
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PUSH
25204: LD_INT 34
25206: PUSH
25207: LD_INT 28
25209: PUSH
25210: EMPTY
25211: LIST
25212: LIST
25213: PUSH
25214: LD_INT 34
25216: PUSH
25217: LD_INT 47
25219: PUSH
25220: EMPTY
25221: LIST
25222: LIST
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PPUSH
25235: CALL_OW 69
25239: ST_TO_ADDR
// if not tmp then
25240: LD_VAR 0 2
25244: NOT
25245: IFFALSE 25249
// exit ;
25247: GO 25278
// for i in tmp do
25249: LD_ADDR_VAR 0 1
25253: PUSH
25254: LD_VAR 0 2
25258: PUSH
25259: FOR_IN
25260: IFFALSE 25276
// begin SetLives ( i , 0 ) ;
25262: LD_VAR 0 1
25266: PPUSH
25267: LD_INT 0
25269: PPUSH
25270: CALL_OW 234
// end ;
25274: GO 25259
25276: POP
25277: POP
// end ;
25278: PPOPN 2
25280: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25281: LD_EXP 65
25285: PUSH
25286: LD_EXP 71
25290: AND
25291: IFFALSE 25375
25293: GO 25295
25295: DISABLE
25296: LD_INT 0
25298: PPUSH
25299: PPUSH
// begin enable ;
25300: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25301: LD_ADDR_VAR 0 2
25305: PUSH
25306: LD_INT 22
25308: PUSH
25309: LD_OWVAR 2
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: PUSH
25318: LD_INT 32
25320: PUSH
25321: LD_INT 3
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: PPUSH
25332: CALL_OW 69
25336: ST_TO_ADDR
// if not tmp then
25337: LD_VAR 0 2
25341: NOT
25342: IFFALSE 25346
// exit ;
25344: GO 25375
// for i in tmp do
25346: LD_ADDR_VAR 0 1
25350: PUSH
25351: LD_VAR 0 2
25355: PUSH
25356: FOR_IN
25357: IFFALSE 25373
// begin SetLives ( i , 0 ) ;
25359: LD_VAR 0 1
25363: PPUSH
25364: LD_INT 0
25366: PPUSH
25367: CALL_OW 234
// end ;
25371: GO 25356
25373: POP
25374: POP
// end ;
25375: PPOPN 2
25377: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25378: LD_EXP 65
25382: PUSH
25383: LD_EXP 68
25387: AND
25388: IFFALSE 25481
25390: GO 25392
25392: DISABLE
25393: LD_INT 0
25395: PPUSH
// begin enable ;
25396: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25397: LD_ADDR_VAR 0 1
25401: PUSH
25402: LD_INT 22
25404: PUSH
25405: LD_OWVAR 2
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: PUSH
25414: LD_INT 2
25416: PUSH
25417: LD_INT 25
25419: PUSH
25420: LD_INT 5
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PUSH
25427: LD_INT 25
25429: PUSH
25430: LD_INT 9
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: PUSH
25437: LD_INT 25
25439: PUSH
25440: LD_INT 8
25442: PUSH
25443: EMPTY
25444: LIST
25445: LIST
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PPUSH
25457: CALL_OW 69
25461: PUSH
25462: FOR_IN
25463: IFFALSE 25479
// begin SetClass ( i , 1 ) ;
25465: LD_VAR 0 1
25469: PPUSH
25470: LD_INT 1
25472: PPUSH
25473: CALL_OW 336
// end ;
25477: GO 25462
25479: POP
25480: POP
// end ;
25481: PPOPN 1
25483: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25484: LD_EXP 65
25488: PUSH
25489: LD_EXP 69
25493: AND
25494: PUSH
25495: LD_OWVAR 65
25499: PUSH
25500: LD_INT 7
25502: LESS
25503: AND
25504: IFFALSE 25518
25506: GO 25508
25508: DISABLE
// begin enable ;
25509: ENABLE
// game_speed := 7 ;
25510: LD_ADDR_OWVAR 65
25514: PUSH
25515: LD_INT 7
25517: ST_TO_ADDR
// end ;
25518: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25519: LD_EXP 65
25523: PUSH
25524: LD_EXP 72
25528: AND
25529: IFFALSE 25731
25531: GO 25533
25533: DISABLE
25534: LD_INT 0
25536: PPUSH
25537: PPUSH
25538: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25539: LD_ADDR_VAR 0 3
25543: PUSH
25544: LD_INT 81
25546: PUSH
25547: LD_OWVAR 2
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: PUSH
25556: LD_INT 21
25558: PUSH
25559: LD_INT 1
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: EMPTY
25567: LIST
25568: LIST
25569: PPUSH
25570: CALL_OW 69
25574: ST_TO_ADDR
// if not tmp then
25575: LD_VAR 0 3
25579: NOT
25580: IFFALSE 25584
// exit ;
25582: GO 25731
// if tmp > 5 then
25584: LD_VAR 0 3
25588: PUSH
25589: LD_INT 5
25591: GREATER
25592: IFFALSE 25604
// k := 5 else
25594: LD_ADDR_VAR 0 2
25598: PUSH
25599: LD_INT 5
25601: ST_TO_ADDR
25602: GO 25614
// k := tmp ;
25604: LD_ADDR_VAR 0 2
25608: PUSH
25609: LD_VAR 0 3
25613: ST_TO_ADDR
// for i := 1 to k do
25614: LD_ADDR_VAR 0 1
25618: PUSH
25619: DOUBLE
25620: LD_INT 1
25622: DEC
25623: ST_TO_ADDR
25624: LD_VAR 0 2
25628: PUSH
25629: FOR_TO
25630: IFFALSE 25729
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25632: LD_VAR 0 3
25636: PUSH
25637: LD_VAR 0 1
25641: ARRAY
25642: PPUSH
25643: LD_VAR 0 1
25647: PUSH
25648: LD_INT 4
25650: MOD
25651: PUSH
25652: LD_INT 1
25654: PLUS
25655: PPUSH
25656: CALL_OW 259
25660: PUSH
25661: LD_INT 10
25663: LESS
25664: IFFALSE 25727
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25666: LD_VAR 0 3
25670: PUSH
25671: LD_VAR 0 1
25675: ARRAY
25676: PPUSH
25677: LD_VAR 0 1
25681: PUSH
25682: LD_INT 4
25684: MOD
25685: PUSH
25686: LD_INT 1
25688: PLUS
25689: PPUSH
25690: LD_VAR 0 3
25694: PUSH
25695: LD_VAR 0 1
25699: ARRAY
25700: PPUSH
25701: LD_VAR 0 1
25705: PUSH
25706: LD_INT 4
25708: MOD
25709: PUSH
25710: LD_INT 1
25712: PLUS
25713: PPUSH
25714: CALL_OW 259
25718: PUSH
25719: LD_INT 1
25721: PLUS
25722: PPUSH
25723: CALL_OW 237
25727: GO 25629
25729: POP
25730: POP
// end ;
25731: PPOPN 3
25733: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25734: LD_EXP 65
25738: PUSH
25739: LD_EXP 73
25743: AND
25744: IFFALSE 25764
25746: GO 25748
25748: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25749: LD_INT 4
25751: PPUSH
25752: LD_OWVAR 2
25756: PPUSH
25757: LD_INT 0
25759: PPUSH
25760: CALL_OW 324
25764: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25765: LD_EXP 65
25769: PUSH
25770: LD_EXP 102
25774: AND
25775: IFFALSE 25795
25777: GO 25779
25779: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25780: LD_INT 19
25782: PPUSH
25783: LD_OWVAR 2
25787: PPUSH
25788: LD_INT 0
25790: PPUSH
25791: CALL_OW 324
25795: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25796: LD_EXP 65
25800: PUSH
25801: LD_EXP 74
25805: AND
25806: IFFALSE 25908
25808: GO 25810
25810: DISABLE
25811: LD_INT 0
25813: PPUSH
25814: PPUSH
// begin enable ;
25815: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25816: LD_ADDR_VAR 0 2
25820: PUSH
25821: LD_INT 22
25823: PUSH
25824: LD_OWVAR 2
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PUSH
25833: LD_INT 2
25835: PUSH
25836: LD_INT 34
25838: PUSH
25839: LD_INT 11
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: PUSH
25846: LD_INT 34
25848: PUSH
25849: LD_INT 30
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: LIST
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: PPUSH
25865: CALL_OW 69
25869: ST_TO_ADDR
// if not tmp then
25870: LD_VAR 0 2
25874: NOT
25875: IFFALSE 25879
// exit ;
25877: GO 25908
// for i in tmp do
25879: LD_ADDR_VAR 0 1
25883: PUSH
25884: LD_VAR 0 2
25888: PUSH
25889: FOR_IN
25890: IFFALSE 25906
// begin SetLives ( i , 0 ) ;
25892: LD_VAR 0 1
25896: PPUSH
25897: LD_INT 0
25899: PPUSH
25900: CALL_OW 234
// end ;
25904: GO 25889
25906: POP
25907: POP
// end ;
25908: PPOPN 2
25910: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25911: LD_EXP 65
25915: PUSH
25916: LD_EXP 75
25920: AND
25921: IFFALSE 25941
25923: GO 25925
25925: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25926: LD_INT 32
25928: PPUSH
25929: LD_OWVAR 2
25933: PPUSH
25934: LD_INT 0
25936: PPUSH
25937: CALL_OW 324
25941: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25942: LD_EXP 65
25946: PUSH
25947: LD_EXP 76
25951: AND
25952: IFFALSE 26133
25954: GO 25956
25956: DISABLE
25957: LD_INT 0
25959: PPUSH
25960: PPUSH
25961: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25962: LD_ADDR_VAR 0 2
25966: PUSH
25967: LD_INT 22
25969: PUSH
25970: LD_OWVAR 2
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PUSH
25979: LD_INT 33
25981: PUSH
25982: LD_INT 3
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PPUSH
25993: CALL_OW 69
25997: ST_TO_ADDR
// if not tmp then
25998: LD_VAR 0 2
26002: NOT
26003: IFFALSE 26007
// exit ;
26005: GO 26133
// side := 0 ;
26007: LD_ADDR_VAR 0 3
26011: PUSH
26012: LD_INT 0
26014: ST_TO_ADDR
// for i := 1 to 8 do
26015: LD_ADDR_VAR 0 1
26019: PUSH
26020: DOUBLE
26021: LD_INT 1
26023: DEC
26024: ST_TO_ADDR
26025: LD_INT 8
26027: PUSH
26028: FOR_TO
26029: IFFALSE 26077
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26031: LD_OWVAR 2
26035: PUSH
26036: LD_VAR 0 1
26040: NONEQUAL
26041: PUSH
26042: LD_OWVAR 2
26046: PPUSH
26047: LD_VAR 0 1
26051: PPUSH
26052: CALL_OW 81
26056: PUSH
26057: LD_INT 2
26059: EQUAL
26060: AND
26061: IFFALSE 26075
// begin side := i ;
26063: LD_ADDR_VAR 0 3
26067: PUSH
26068: LD_VAR 0 1
26072: ST_TO_ADDR
// break ;
26073: GO 26077
// end ;
26075: GO 26028
26077: POP
26078: POP
// if not side then
26079: LD_VAR 0 3
26083: NOT
26084: IFFALSE 26088
// exit ;
26086: GO 26133
// for i := 1 to tmp do
26088: LD_ADDR_VAR 0 1
26092: PUSH
26093: DOUBLE
26094: LD_INT 1
26096: DEC
26097: ST_TO_ADDR
26098: LD_VAR 0 2
26102: PUSH
26103: FOR_TO
26104: IFFALSE 26131
// if Prob ( 60 ) then
26106: LD_INT 60
26108: PPUSH
26109: CALL_OW 13
26113: IFFALSE 26129
// SetSide ( i , side ) ;
26115: LD_VAR 0 1
26119: PPUSH
26120: LD_VAR 0 3
26124: PPUSH
26125: CALL_OW 235
26129: GO 26103
26131: POP
26132: POP
// end ;
26133: PPOPN 3
26135: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26136: LD_EXP 65
26140: PUSH
26141: LD_EXP 78
26145: AND
26146: IFFALSE 26265
26148: GO 26150
26150: DISABLE
26151: LD_INT 0
26153: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26154: LD_ADDR_VAR 0 1
26158: PUSH
26159: LD_INT 22
26161: PUSH
26162: LD_OWVAR 2
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: PUSH
26171: LD_INT 21
26173: PUSH
26174: LD_INT 1
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PUSH
26181: LD_INT 3
26183: PUSH
26184: LD_INT 23
26186: PUSH
26187: LD_INT 0
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: LIST
26202: PPUSH
26203: CALL_OW 69
26207: PUSH
26208: FOR_IN
26209: IFFALSE 26263
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26211: LD_VAR 0 1
26215: PPUSH
26216: CALL_OW 257
26220: PUSH
26221: LD_INT 1
26223: PUSH
26224: LD_INT 2
26226: PUSH
26227: LD_INT 3
26229: PUSH
26230: LD_INT 4
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: IN
26239: IFFALSE 26261
// SetClass ( un , rand ( 1 , 4 ) ) ;
26241: LD_VAR 0 1
26245: PPUSH
26246: LD_INT 1
26248: PPUSH
26249: LD_INT 4
26251: PPUSH
26252: CALL_OW 12
26256: PPUSH
26257: CALL_OW 336
26261: GO 26208
26263: POP
26264: POP
// end ;
26265: PPOPN 1
26267: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26268: LD_EXP 65
26272: PUSH
26273: LD_EXP 77
26277: AND
26278: IFFALSE 26357
26280: GO 26282
26282: DISABLE
26283: LD_INT 0
26285: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26286: LD_ADDR_VAR 0 1
26290: PUSH
26291: LD_INT 22
26293: PUSH
26294: LD_OWVAR 2
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: PUSH
26303: LD_INT 21
26305: PUSH
26306: LD_INT 3
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PPUSH
26317: CALL_OW 69
26321: ST_TO_ADDR
// if not tmp then
26322: LD_VAR 0 1
26326: NOT
26327: IFFALSE 26331
// exit ;
26329: GO 26357
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26331: LD_VAR 0 1
26335: PUSH
26336: LD_INT 1
26338: PPUSH
26339: LD_VAR 0 1
26343: PPUSH
26344: CALL_OW 12
26348: ARRAY
26349: PPUSH
26350: LD_INT 100
26352: PPUSH
26353: CALL_OW 234
// end ;
26357: PPOPN 1
26359: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26360: LD_EXP 65
26364: PUSH
26365: LD_EXP 79
26369: AND
26370: IFFALSE 26468
26372: GO 26374
26374: DISABLE
26375: LD_INT 0
26377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26378: LD_ADDR_VAR 0 1
26382: PUSH
26383: LD_INT 22
26385: PUSH
26386: LD_OWVAR 2
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: PUSH
26395: LD_INT 21
26397: PUSH
26398: LD_INT 1
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PPUSH
26409: CALL_OW 69
26413: ST_TO_ADDR
// if not tmp then
26414: LD_VAR 0 1
26418: NOT
26419: IFFALSE 26423
// exit ;
26421: GO 26468
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26423: LD_VAR 0 1
26427: PUSH
26428: LD_INT 1
26430: PPUSH
26431: LD_VAR 0 1
26435: PPUSH
26436: CALL_OW 12
26440: ARRAY
26441: PPUSH
26442: LD_INT 1
26444: PPUSH
26445: LD_INT 4
26447: PPUSH
26448: CALL_OW 12
26452: PPUSH
26453: LD_INT 3000
26455: PPUSH
26456: LD_INT 9000
26458: PPUSH
26459: CALL_OW 12
26463: PPUSH
26464: CALL_OW 492
// end ;
26468: PPOPN 1
26470: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26471: LD_EXP 65
26475: PUSH
26476: LD_EXP 80
26480: AND
26481: IFFALSE 26501
26483: GO 26485
26485: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26486: LD_INT 1
26488: PPUSH
26489: LD_OWVAR 2
26493: PPUSH
26494: LD_INT 0
26496: PPUSH
26497: CALL_OW 324
26501: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26502: LD_EXP 65
26506: PUSH
26507: LD_EXP 81
26511: AND
26512: IFFALSE 26595
26514: GO 26516
26516: DISABLE
26517: LD_INT 0
26519: PPUSH
26520: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26521: LD_ADDR_VAR 0 2
26525: PUSH
26526: LD_INT 22
26528: PUSH
26529: LD_OWVAR 2
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: PUSH
26538: LD_INT 21
26540: PUSH
26541: LD_INT 3
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PPUSH
26552: CALL_OW 69
26556: ST_TO_ADDR
// if not tmp then
26557: LD_VAR 0 2
26561: NOT
26562: IFFALSE 26566
// exit ;
26564: GO 26595
// for i in tmp do
26566: LD_ADDR_VAR 0 1
26570: PUSH
26571: LD_VAR 0 2
26575: PUSH
26576: FOR_IN
26577: IFFALSE 26593
// SetBLevel ( i , 10 ) ;
26579: LD_VAR 0 1
26583: PPUSH
26584: LD_INT 10
26586: PPUSH
26587: CALL_OW 241
26591: GO 26576
26593: POP
26594: POP
// end ;
26595: PPOPN 2
26597: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26598: LD_EXP 65
26602: PUSH
26603: LD_EXP 82
26607: AND
26608: IFFALSE 26719
26610: GO 26612
26612: DISABLE
26613: LD_INT 0
26615: PPUSH
26616: PPUSH
26617: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26618: LD_ADDR_VAR 0 3
26622: PUSH
26623: LD_INT 22
26625: PUSH
26626: LD_OWVAR 2
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: LD_INT 25
26637: PUSH
26638: LD_INT 1
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: PPUSH
26649: CALL_OW 69
26653: ST_TO_ADDR
// if not tmp then
26654: LD_VAR 0 3
26658: NOT
26659: IFFALSE 26663
// exit ;
26661: GO 26719
// un := tmp [ rand ( 1 , tmp ) ] ;
26663: LD_ADDR_VAR 0 2
26667: PUSH
26668: LD_VAR 0 3
26672: PUSH
26673: LD_INT 1
26675: PPUSH
26676: LD_VAR 0 3
26680: PPUSH
26681: CALL_OW 12
26685: ARRAY
26686: ST_TO_ADDR
// if Crawls ( un ) then
26687: LD_VAR 0 2
26691: PPUSH
26692: CALL_OW 318
26696: IFFALSE 26707
// ComWalk ( un ) ;
26698: LD_VAR 0 2
26702: PPUSH
26703: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26707: LD_VAR 0 2
26711: PPUSH
26712: LD_INT 5
26714: PPUSH
26715: CALL_OW 336
// end ;
26719: PPOPN 3
26721: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26722: LD_EXP 65
26726: PUSH
26727: LD_EXP 83
26731: AND
26732: PUSH
26733: LD_OWVAR 67
26737: PUSH
26738: LD_INT 4
26740: LESS
26741: AND
26742: IFFALSE 26761
26744: GO 26746
26746: DISABLE
// begin Difficulty := Difficulty + 1 ;
26747: LD_ADDR_OWVAR 67
26751: PUSH
26752: LD_OWVAR 67
26756: PUSH
26757: LD_INT 1
26759: PLUS
26760: ST_TO_ADDR
// end ;
26761: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26762: LD_EXP 65
26766: PUSH
26767: LD_EXP 84
26771: AND
26772: IFFALSE 26875
26774: GO 26776
26776: DISABLE
26777: LD_INT 0
26779: PPUSH
// begin for i := 1 to 5 do
26780: LD_ADDR_VAR 0 1
26784: PUSH
26785: DOUBLE
26786: LD_INT 1
26788: DEC
26789: ST_TO_ADDR
26790: LD_INT 5
26792: PUSH
26793: FOR_TO
26794: IFFALSE 26873
// begin uc_nation := nation_nature ;
26796: LD_ADDR_OWVAR 21
26800: PUSH
26801: LD_INT 0
26803: ST_TO_ADDR
// uc_side := 0 ;
26804: LD_ADDR_OWVAR 20
26808: PUSH
26809: LD_INT 0
26811: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26812: LD_ADDR_OWVAR 29
26816: PUSH
26817: LD_INT 12
26819: PUSH
26820: LD_INT 12
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: ST_TO_ADDR
// hc_agressivity := 20 ;
26827: LD_ADDR_OWVAR 35
26831: PUSH
26832: LD_INT 20
26834: ST_TO_ADDR
// hc_class := class_tiger ;
26835: LD_ADDR_OWVAR 28
26839: PUSH
26840: LD_INT 14
26842: ST_TO_ADDR
// hc_gallery :=  ;
26843: LD_ADDR_OWVAR 33
26847: PUSH
26848: LD_STRING 
26850: ST_TO_ADDR
// hc_name :=  ;
26851: LD_ADDR_OWVAR 26
26855: PUSH
26856: LD_STRING 
26858: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26859: CALL_OW 44
26863: PPUSH
26864: LD_INT 0
26866: PPUSH
26867: CALL_OW 51
// end ;
26871: GO 26793
26873: POP
26874: POP
// end ;
26875: PPOPN 1
26877: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26878: LD_EXP 65
26882: PUSH
26883: LD_EXP 85
26887: AND
26888: IFFALSE 26897
26890: GO 26892
26892: DISABLE
// StreamSibBomb ;
26893: CALL 26898 0 0
26897: END
// export function StreamSibBomb ; var i , x , y ; begin
26898: LD_INT 0
26900: PPUSH
26901: PPUSH
26902: PPUSH
26903: PPUSH
// result := false ;
26904: LD_ADDR_VAR 0 1
26908: PUSH
26909: LD_INT 0
26911: ST_TO_ADDR
// for i := 1 to 16 do
26912: LD_ADDR_VAR 0 2
26916: PUSH
26917: DOUBLE
26918: LD_INT 1
26920: DEC
26921: ST_TO_ADDR
26922: LD_INT 16
26924: PUSH
26925: FOR_TO
26926: IFFALSE 27125
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26928: LD_ADDR_VAR 0 3
26932: PUSH
26933: LD_INT 10
26935: PUSH
26936: LD_INT 20
26938: PUSH
26939: LD_INT 30
26941: PUSH
26942: LD_INT 40
26944: PUSH
26945: LD_INT 50
26947: PUSH
26948: LD_INT 60
26950: PUSH
26951: LD_INT 70
26953: PUSH
26954: LD_INT 80
26956: PUSH
26957: LD_INT 90
26959: PUSH
26960: LD_INT 100
26962: PUSH
26963: LD_INT 110
26965: PUSH
26966: LD_INT 120
26968: PUSH
26969: LD_INT 130
26971: PUSH
26972: LD_INT 140
26974: PUSH
26975: LD_INT 150
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 1
26997: PPUSH
26998: LD_INT 15
27000: PPUSH
27001: CALL_OW 12
27005: ARRAY
27006: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27007: LD_ADDR_VAR 0 4
27011: PUSH
27012: LD_INT 10
27014: PUSH
27015: LD_INT 20
27017: PUSH
27018: LD_INT 30
27020: PUSH
27021: LD_INT 40
27023: PUSH
27024: LD_INT 50
27026: PUSH
27027: LD_INT 60
27029: PUSH
27030: LD_INT 70
27032: PUSH
27033: LD_INT 80
27035: PUSH
27036: LD_INT 90
27038: PUSH
27039: LD_INT 100
27041: PUSH
27042: LD_INT 110
27044: PUSH
27045: LD_INT 120
27047: PUSH
27048: LD_INT 130
27050: PUSH
27051: LD_INT 140
27053: PUSH
27054: LD_INT 150
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: PUSH
27074: LD_INT 1
27076: PPUSH
27077: LD_INT 15
27079: PPUSH
27080: CALL_OW 12
27084: ARRAY
27085: ST_TO_ADDR
// if ValidHex ( x , y ) then
27086: LD_VAR 0 3
27090: PPUSH
27091: LD_VAR 0 4
27095: PPUSH
27096: CALL_OW 488
27100: IFFALSE 27123
// begin result := [ x , y ] ;
27102: LD_ADDR_VAR 0 1
27106: PUSH
27107: LD_VAR 0 3
27111: PUSH
27112: LD_VAR 0 4
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: ST_TO_ADDR
// break ;
27121: GO 27125
// end ; end ;
27123: GO 26925
27125: POP
27126: POP
// if result then
27127: LD_VAR 0 1
27131: IFFALSE 27191
// begin ToLua ( playSibBomb() ) ;
27133: LD_STRING playSibBomb()
27135: PPUSH
27136: CALL_OW 559
// wait ( 0 0$14 ) ;
27140: LD_INT 490
27142: PPUSH
27143: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27147: LD_VAR 0 1
27151: PUSH
27152: LD_INT 1
27154: ARRAY
27155: PPUSH
27156: LD_VAR 0 1
27160: PUSH
27161: LD_INT 2
27163: ARRAY
27164: PPUSH
27165: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27169: LD_VAR 0 1
27173: PUSH
27174: LD_INT 1
27176: ARRAY
27177: PPUSH
27178: LD_VAR 0 1
27182: PUSH
27183: LD_INT 2
27185: ARRAY
27186: PPUSH
27187: CALL_OW 429
// end ; end ;
27191: LD_VAR 0 1
27195: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27196: LD_EXP 65
27200: PUSH
27201: LD_EXP 87
27205: AND
27206: IFFALSE 27218
27208: GO 27210
27210: DISABLE
// YouLost (  ) ;
27211: LD_STRING 
27213: PPUSH
27214: CALL_OW 104
27218: END
// every 0 0$1 trigger StreamModeActive and sFog do
27219: LD_EXP 65
27223: PUSH
27224: LD_EXP 86
27228: AND
27229: IFFALSE 27243
27231: GO 27233
27233: DISABLE
// FogOff ( your_side ) ;
27234: LD_OWVAR 2
27238: PPUSH
27239: CALL_OW 344
27243: END
// every 0 0$1 trigger StreamModeActive and sSun do
27244: LD_EXP 65
27248: PUSH
27249: LD_EXP 88
27253: AND
27254: IFFALSE 27282
27256: GO 27258
27258: DISABLE
// begin solar_recharge_percent := 0 ;
27259: LD_ADDR_OWVAR 79
27263: PUSH
27264: LD_INT 0
27266: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27267: LD_INT 10500
27269: PPUSH
27270: CALL_OW 67
// solar_recharge_percent := 100 ;
27274: LD_ADDR_OWVAR 79
27278: PUSH
27279: LD_INT 100
27281: ST_TO_ADDR
// end ;
27282: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27283: LD_EXP 65
27287: PUSH
27288: LD_EXP 89
27292: AND
27293: IFFALSE 27532
27295: GO 27297
27297: DISABLE
27298: LD_INT 0
27300: PPUSH
27301: PPUSH
27302: PPUSH
// begin tmp := [ ] ;
27303: LD_ADDR_VAR 0 3
27307: PUSH
27308: EMPTY
27309: ST_TO_ADDR
// for i := 1 to 6 do
27310: LD_ADDR_VAR 0 1
27314: PUSH
27315: DOUBLE
27316: LD_INT 1
27318: DEC
27319: ST_TO_ADDR
27320: LD_INT 6
27322: PUSH
27323: FOR_TO
27324: IFFALSE 27429
// begin uc_nation := nation_nature ;
27326: LD_ADDR_OWVAR 21
27330: PUSH
27331: LD_INT 0
27333: ST_TO_ADDR
// uc_side := 0 ;
27334: LD_ADDR_OWVAR 20
27338: PUSH
27339: LD_INT 0
27341: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27342: LD_ADDR_OWVAR 29
27346: PUSH
27347: LD_INT 12
27349: PUSH
27350: LD_INT 12
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: ST_TO_ADDR
// hc_agressivity := 20 ;
27357: LD_ADDR_OWVAR 35
27361: PUSH
27362: LD_INT 20
27364: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27365: LD_ADDR_OWVAR 28
27369: PUSH
27370: LD_INT 17
27372: ST_TO_ADDR
// hc_gallery :=  ;
27373: LD_ADDR_OWVAR 33
27377: PUSH
27378: LD_STRING 
27380: ST_TO_ADDR
// hc_name :=  ;
27381: LD_ADDR_OWVAR 26
27385: PUSH
27386: LD_STRING 
27388: ST_TO_ADDR
// un := CreateHuman ;
27389: LD_ADDR_VAR 0 2
27393: PUSH
27394: CALL_OW 44
27398: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27399: LD_VAR 0 2
27403: PPUSH
27404: LD_INT 1
27406: PPUSH
27407: CALL_OW 51
// tmp := tmp ^ un ;
27411: LD_ADDR_VAR 0 3
27415: PUSH
27416: LD_VAR 0 3
27420: PUSH
27421: LD_VAR 0 2
27425: ADD
27426: ST_TO_ADDR
// end ;
27427: GO 27323
27429: POP
27430: POP
// repeat wait ( 0 0$1 ) ;
27431: LD_INT 35
27433: PPUSH
27434: CALL_OW 67
// for un in tmp do
27438: LD_ADDR_VAR 0 2
27442: PUSH
27443: LD_VAR 0 3
27447: PUSH
27448: FOR_IN
27449: IFFALSE 27523
// begin if IsDead ( un ) then
27451: LD_VAR 0 2
27455: PPUSH
27456: CALL_OW 301
27460: IFFALSE 27480
// begin tmp := tmp diff un ;
27462: LD_ADDR_VAR 0 3
27466: PUSH
27467: LD_VAR 0 3
27471: PUSH
27472: LD_VAR 0 2
27476: DIFF
27477: ST_TO_ADDR
// continue ;
27478: GO 27448
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27480: LD_VAR 0 2
27484: PPUSH
27485: LD_INT 3
27487: PUSH
27488: LD_INT 22
27490: PUSH
27491: LD_INT 0
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PPUSH
27502: CALL_OW 69
27506: PPUSH
27507: LD_VAR 0 2
27511: PPUSH
27512: CALL_OW 74
27516: PPUSH
27517: CALL_OW 115
// end ;
27521: GO 27448
27523: POP
27524: POP
// until not tmp ;
27525: LD_VAR 0 3
27529: NOT
27530: IFFALSE 27431
// end ;
27532: PPOPN 3
27534: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27535: LD_EXP 65
27539: PUSH
27540: LD_EXP 90
27544: AND
27545: IFFALSE 27599
27547: GO 27549
27549: DISABLE
// begin ToLua ( displayTroll(); ) ;
27550: LD_STRING displayTroll();
27552: PPUSH
27553: CALL_OW 559
// wait ( 3 3$00 ) ;
27557: LD_INT 6300
27559: PPUSH
27560: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27564: LD_STRING hideTroll();
27566: PPUSH
27567: CALL_OW 559
// wait ( 1 1$00 ) ;
27571: LD_INT 2100
27573: PPUSH
27574: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27578: LD_STRING displayTroll();
27580: PPUSH
27581: CALL_OW 559
// wait ( 1 1$00 ) ;
27585: LD_INT 2100
27587: PPUSH
27588: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27592: LD_STRING hideTroll();
27594: PPUSH
27595: CALL_OW 559
// end ;
27599: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27600: LD_EXP 65
27604: PUSH
27605: LD_EXP 91
27609: AND
27610: IFFALSE 27673
27612: GO 27614
27614: DISABLE
27615: LD_INT 0
27617: PPUSH
// begin p := 0 ;
27618: LD_ADDR_VAR 0 1
27622: PUSH
27623: LD_INT 0
27625: ST_TO_ADDR
// repeat game_speed := 1 ;
27626: LD_ADDR_OWVAR 65
27630: PUSH
27631: LD_INT 1
27633: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27634: LD_INT 35
27636: PPUSH
27637: CALL_OW 67
// p := p + 1 ;
27641: LD_ADDR_VAR 0 1
27645: PUSH
27646: LD_VAR 0 1
27650: PUSH
27651: LD_INT 1
27653: PLUS
27654: ST_TO_ADDR
// until p >= 60 ;
27655: LD_VAR 0 1
27659: PUSH
27660: LD_INT 60
27662: GREATEREQUAL
27663: IFFALSE 27626
// game_speed := 4 ;
27665: LD_ADDR_OWVAR 65
27669: PUSH
27670: LD_INT 4
27672: ST_TO_ADDR
// end ;
27673: PPOPN 1
27675: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27676: LD_EXP 65
27680: PUSH
27681: LD_EXP 92
27685: AND
27686: IFFALSE 27832
27688: GO 27690
27690: DISABLE
27691: LD_INT 0
27693: PPUSH
27694: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27695: LD_ADDR_VAR 0 1
27699: PUSH
27700: LD_INT 22
27702: PUSH
27703: LD_OWVAR 2
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: PUSH
27712: LD_INT 2
27714: PUSH
27715: LD_INT 30
27717: PUSH
27718: LD_INT 0
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: PUSH
27725: LD_INT 30
27727: PUSH
27728: LD_INT 1
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: PUSH
27735: EMPTY
27736: LIST
27737: LIST
27738: LIST
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PPUSH
27744: CALL_OW 69
27748: ST_TO_ADDR
// if not depot then
27749: LD_VAR 0 1
27753: NOT
27754: IFFALSE 27758
// exit ;
27756: GO 27832
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27758: LD_ADDR_VAR 0 2
27762: PUSH
27763: LD_VAR 0 1
27767: PUSH
27768: LD_INT 1
27770: PPUSH
27771: LD_VAR 0 1
27775: PPUSH
27776: CALL_OW 12
27780: ARRAY
27781: PPUSH
27782: CALL_OW 274
27786: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27787: LD_VAR 0 2
27791: PPUSH
27792: LD_INT 1
27794: PPUSH
27795: LD_INT 0
27797: PPUSH
27798: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27802: LD_VAR 0 2
27806: PPUSH
27807: LD_INT 2
27809: PPUSH
27810: LD_INT 0
27812: PPUSH
27813: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27817: LD_VAR 0 2
27821: PPUSH
27822: LD_INT 3
27824: PPUSH
27825: LD_INT 0
27827: PPUSH
27828: CALL_OW 277
// end ;
27832: PPOPN 2
27834: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27835: LD_EXP 65
27839: PUSH
27840: LD_EXP 93
27844: AND
27845: IFFALSE 27942
27847: GO 27849
27849: DISABLE
27850: LD_INT 0
27852: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27853: LD_ADDR_VAR 0 1
27857: PUSH
27858: LD_INT 22
27860: PUSH
27861: LD_OWVAR 2
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: PUSH
27870: LD_INT 21
27872: PUSH
27873: LD_INT 1
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 3
27882: PUSH
27883: LD_INT 23
27885: PUSH
27886: LD_INT 0
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: LIST
27901: PPUSH
27902: CALL_OW 69
27906: ST_TO_ADDR
// if not tmp then
27907: LD_VAR 0 1
27911: NOT
27912: IFFALSE 27916
// exit ;
27914: GO 27942
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27916: LD_VAR 0 1
27920: PUSH
27921: LD_INT 1
27923: PPUSH
27924: LD_VAR 0 1
27928: PPUSH
27929: CALL_OW 12
27933: ARRAY
27934: PPUSH
27935: LD_INT 200
27937: PPUSH
27938: CALL_OW 234
// end ;
27942: PPOPN 1
27944: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27945: LD_EXP 65
27949: PUSH
27950: LD_EXP 94
27954: AND
27955: IFFALSE 28034
27957: GO 27959
27959: DISABLE
27960: LD_INT 0
27962: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27963: LD_ADDR_VAR 0 1
27967: PUSH
27968: LD_INT 22
27970: PUSH
27971: LD_OWVAR 2
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: PUSH
27980: LD_INT 21
27982: PUSH
27983: LD_INT 2
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: PPUSH
27994: CALL_OW 69
27998: ST_TO_ADDR
// if not tmp then
27999: LD_VAR 0 1
28003: NOT
28004: IFFALSE 28008
// exit ;
28006: GO 28034
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28008: LD_VAR 0 1
28012: PUSH
28013: LD_INT 1
28015: PPUSH
28016: LD_VAR 0 1
28020: PPUSH
28021: CALL_OW 12
28025: ARRAY
28026: PPUSH
28027: LD_INT 60
28029: PPUSH
28030: CALL_OW 234
// end ;
28034: PPOPN 1
28036: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28037: LD_EXP 65
28041: PUSH
28042: LD_EXP 95
28046: AND
28047: IFFALSE 28146
28049: GO 28051
28051: DISABLE
28052: LD_INT 0
28054: PPUSH
28055: PPUSH
// begin enable ;
28056: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28057: LD_ADDR_VAR 0 1
28061: PUSH
28062: LD_INT 22
28064: PUSH
28065: LD_OWVAR 2
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 61
28076: PUSH
28077: EMPTY
28078: LIST
28079: PUSH
28080: LD_INT 33
28082: PUSH
28083: LD_INT 2
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: LIST
28094: PPUSH
28095: CALL_OW 69
28099: ST_TO_ADDR
// if not tmp then
28100: LD_VAR 0 1
28104: NOT
28105: IFFALSE 28109
// exit ;
28107: GO 28146
// for i in tmp do
28109: LD_ADDR_VAR 0 2
28113: PUSH
28114: LD_VAR 0 1
28118: PUSH
28119: FOR_IN
28120: IFFALSE 28144
// if IsControledBy ( i ) then
28122: LD_VAR 0 2
28126: PPUSH
28127: CALL_OW 312
28131: IFFALSE 28142
// ComUnlink ( i ) ;
28133: LD_VAR 0 2
28137: PPUSH
28138: CALL_OW 136
28142: GO 28119
28144: POP
28145: POP
// end ;
28146: PPOPN 2
28148: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28149: LD_EXP 65
28153: PUSH
28154: LD_EXP 96
28158: AND
28159: IFFALSE 28299
28161: GO 28163
28163: DISABLE
28164: LD_INT 0
28166: PPUSH
28167: PPUSH
// begin ToLua ( displayPowell(); ) ;
28168: LD_STRING displayPowell();
28170: PPUSH
28171: CALL_OW 559
// uc_side := 0 ;
28175: LD_ADDR_OWVAR 20
28179: PUSH
28180: LD_INT 0
28182: ST_TO_ADDR
// uc_nation := 2 ;
28183: LD_ADDR_OWVAR 21
28187: PUSH
28188: LD_INT 2
28190: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28191: LD_ADDR_OWVAR 37
28195: PUSH
28196: LD_INT 14
28198: ST_TO_ADDR
// vc_engine := engine_siberite ;
28199: LD_ADDR_OWVAR 39
28203: PUSH
28204: LD_INT 3
28206: ST_TO_ADDR
// vc_control := control_apeman ;
28207: LD_ADDR_OWVAR 38
28211: PUSH
28212: LD_INT 5
28214: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28215: LD_ADDR_OWVAR 40
28219: PUSH
28220: LD_INT 29
28222: ST_TO_ADDR
// un := CreateVehicle ;
28223: LD_ADDR_VAR 0 2
28227: PUSH
28228: CALL_OW 45
28232: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28233: LD_VAR 0 2
28237: PPUSH
28238: LD_INT 1
28240: PPUSH
28241: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28245: LD_INT 35
28247: PPUSH
28248: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28252: LD_VAR 0 2
28256: PPUSH
28257: LD_INT 22
28259: PUSH
28260: LD_OWVAR 2
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PPUSH
28269: CALL_OW 69
28273: PPUSH
28274: LD_VAR 0 2
28278: PPUSH
28279: CALL_OW 74
28283: PPUSH
28284: CALL_OW 115
// until IsDead ( un ) ;
28288: LD_VAR 0 2
28292: PPUSH
28293: CALL_OW 301
28297: IFFALSE 28245
// end ;
28299: PPOPN 2
28301: END
// every 0 0$1 trigger StreamModeActive and sStu do
28302: LD_EXP 65
28306: PUSH
28307: LD_EXP 104
28311: AND
28312: IFFALSE 28328
28314: GO 28316
28316: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28317: LD_STRING displayStucuk();
28319: PPUSH
28320: CALL_OW 559
// ResetFog ;
28324: CALL_OW 335
// end ;
28328: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28329: LD_EXP 65
28333: PUSH
28334: LD_EXP 97
28338: AND
28339: IFFALSE 28480
28341: GO 28343
28343: DISABLE
28344: LD_INT 0
28346: PPUSH
28347: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28348: LD_ADDR_VAR 0 2
28352: PUSH
28353: LD_INT 22
28355: PUSH
28356: LD_OWVAR 2
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: PUSH
28365: LD_INT 21
28367: PUSH
28368: LD_INT 1
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PPUSH
28379: CALL_OW 69
28383: ST_TO_ADDR
// if not tmp then
28384: LD_VAR 0 2
28388: NOT
28389: IFFALSE 28393
// exit ;
28391: GO 28480
// un := tmp [ rand ( 1 , tmp ) ] ;
28393: LD_ADDR_VAR 0 1
28397: PUSH
28398: LD_VAR 0 2
28402: PUSH
28403: LD_INT 1
28405: PPUSH
28406: LD_VAR 0 2
28410: PPUSH
28411: CALL_OW 12
28415: ARRAY
28416: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28417: LD_VAR 0 1
28421: PPUSH
28422: LD_INT 0
28424: PPUSH
28425: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28429: LD_VAR 0 1
28433: PPUSH
28434: LD_OWVAR 3
28438: PUSH
28439: LD_VAR 0 1
28443: DIFF
28444: PPUSH
28445: LD_VAR 0 1
28449: PPUSH
28450: CALL_OW 74
28454: PPUSH
28455: CALL_OW 115
// wait ( 0 0$20 ) ;
28459: LD_INT 700
28461: PPUSH
28462: CALL_OW 67
// SetSide ( un , your_side ) ;
28466: LD_VAR 0 1
28470: PPUSH
28471: LD_OWVAR 2
28475: PPUSH
28476: CALL_OW 235
// end ;
28480: PPOPN 2
28482: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28483: LD_EXP 65
28487: PUSH
28488: LD_EXP 98
28492: AND
28493: IFFALSE 28599
28495: GO 28497
28497: DISABLE
28498: LD_INT 0
28500: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28501: LD_ADDR_VAR 0 1
28505: PUSH
28506: LD_INT 22
28508: PUSH
28509: LD_OWVAR 2
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: PUSH
28518: LD_INT 2
28520: PUSH
28521: LD_INT 30
28523: PUSH
28524: LD_INT 0
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 30
28533: PUSH
28534: LD_INT 1
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: LIST
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PPUSH
28550: CALL_OW 69
28554: ST_TO_ADDR
// if not depot then
28555: LD_VAR 0 1
28559: NOT
28560: IFFALSE 28564
// exit ;
28562: GO 28599
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28564: LD_VAR 0 1
28568: PUSH
28569: LD_INT 1
28571: ARRAY
28572: PPUSH
28573: CALL_OW 250
28577: PPUSH
28578: LD_VAR 0 1
28582: PUSH
28583: LD_INT 1
28585: ARRAY
28586: PPUSH
28587: CALL_OW 251
28591: PPUSH
28592: LD_INT 70
28594: PPUSH
28595: CALL_OW 495
// end ;
28599: PPOPN 1
28601: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28602: LD_EXP 65
28606: PUSH
28607: LD_EXP 99
28611: AND
28612: IFFALSE 28823
28614: GO 28616
28616: DISABLE
28617: LD_INT 0
28619: PPUSH
28620: PPUSH
28621: PPUSH
28622: PPUSH
28623: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28624: LD_ADDR_VAR 0 5
28628: PUSH
28629: LD_INT 22
28631: PUSH
28632: LD_OWVAR 2
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PUSH
28641: LD_INT 21
28643: PUSH
28644: LD_INT 1
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PPUSH
28655: CALL_OW 69
28659: ST_TO_ADDR
// if not tmp then
28660: LD_VAR 0 5
28664: NOT
28665: IFFALSE 28669
// exit ;
28667: GO 28823
// for i in tmp do
28669: LD_ADDR_VAR 0 1
28673: PUSH
28674: LD_VAR 0 5
28678: PUSH
28679: FOR_IN
28680: IFFALSE 28821
// begin d := rand ( 0 , 5 ) ;
28682: LD_ADDR_VAR 0 4
28686: PUSH
28687: LD_INT 0
28689: PPUSH
28690: LD_INT 5
28692: PPUSH
28693: CALL_OW 12
28697: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28698: LD_ADDR_VAR 0 2
28702: PUSH
28703: LD_VAR 0 1
28707: PPUSH
28708: CALL_OW 250
28712: PPUSH
28713: LD_VAR 0 4
28717: PPUSH
28718: LD_INT 3
28720: PPUSH
28721: LD_INT 12
28723: PPUSH
28724: CALL_OW 12
28728: PPUSH
28729: CALL_OW 272
28733: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28734: LD_ADDR_VAR 0 3
28738: PUSH
28739: LD_VAR 0 1
28743: PPUSH
28744: CALL_OW 251
28748: PPUSH
28749: LD_VAR 0 4
28753: PPUSH
28754: LD_INT 3
28756: PPUSH
28757: LD_INT 12
28759: PPUSH
28760: CALL_OW 12
28764: PPUSH
28765: CALL_OW 273
28769: ST_TO_ADDR
// if ValidHex ( x , y ) then
28770: LD_VAR 0 2
28774: PPUSH
28775: LD_VAR 0 3
28779: PPUSH
28780: CALL_OW 488
28784: IFFALSE 28819
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28786: LD_VAR 0 1
28790: PPUSH
28791: LD_VAR 0 2
28795: PPUSH
28796: LD_VAR 0 3
28800: PPUSH
28801: LD_INT 3
28803: PPUSH
28804: LD_INT 6
28806: PPUSH
28807: CALL_OW 12
28811: PPUSH
28812: LD_INT 1
28814: PPUSH
28815: CALL_OW 483
// end ;
28819: GO 28679
28821: POP
28822: POP
// end ;
28823: PPOPN 5
28825: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28826: LD_EXP 65
28830: PUSH
28831: LD_EXP 100
28835: AND
28836: IFFALSE 28930
28838: GO 28840
28840: DISABLE
28841: LD_INT 0
28843: PPUSH
28844: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28845: LD_ADDR_VAR 0 2
28849: PUSH
28850: LD_INT 22
28852: PUSH
28853: LD_OWVAR 2
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 32
28864: PUSH
28865: LD_INT 1
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 21
28874: PUSH
28875: LD_INT 2
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: LIST
28886: PPUSH
28887: CALL_OW 69
28891: ST_TO_ADDR
// if not tmp then
28892: LD_VAR 0 2
28896: NOT
28897: IFFALSE 28901
// exit ;
28899: GO 28930
// for i in tmp do
28901: LD_ADDR_VAR 0 1
28905: PUSH
28906: LD_VAR 0 2
28910: PUSH
28911: FOR_IN
28912: IFFALSE 28928
// SetFuel ( i , 0 ) ;
28914: LD_VAR 0 1
28918: PPUSH
28919: LD_INT 0
28921: PPUSH
28922: CALL_OW 240
28926: GO 28911
28928: POP
28929: POP
// end ;
28930: PPOPN 2
28932: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28933: LD_EXP 65
28937: PUSH
28938: LD_EXP 101
28942: AND
28943: IFFALSE 29009
28945: GO 28947
28947: DISABLE
28948: LD_INT 0
28950: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28951: LD_ADDR_VAR 0 1
28955: PUSH
28956: LD_INT 22
28958: PUSH
28959: LD_OWVAR 2
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: PUSH
28968: LD_INT 30
28970: PUSH
28971: LD_INT 29
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: PPUSH
28982: CALL_OW 69
28986: ST_TO_ADDR
// if not tmp then
28987: LD_VAR 0 1
28991: NOT
28992: IFFALSE 28996
// exit ;
28994: GO 29009
// DestroyUnit ( tmp [ 1 ] ) ;
28996: LD_VAR 0 1
29000: PUSH
29001: LD_INT 1
29003: ARRAY
29004: PPUSH
29005: CALL_OW 65
// end ;
29009: PPOPN 1
29011: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29012: LD_EXP 65
29016: PUSH
29017: LD_EXP 103
29021: AND
29022: IFFALSE 29151
29024: GO 29026
29026: DISABLE
29027: LD_INT 0
29029: PPUSH
// begin uc_side := 0 ;
29030: LD_ADDR_OWVAR 20
29034: PUSH
29035: LD_INT 0
29037: ST_TO_ADDR
// uc_nation := nation_arabian ;
29038: LD_ADDR_OWVAR 21
29042: PUSH
29043: LD_INT 2
29045: ST_TO_ADDR
// hc_gallery :=  ;
29046: LD_ADDR_OWVAR 33
29050: PUSH
29051: LD_STRING 
29053: ST_TO_ADDR
// hc_name :=  ;
29054: LD_ADDR_OWVAR 26
29058: PUSH
29059: LD_STRING 
29061: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29062: LD_INT 1
29064: PPUSH
29065: LD_INT 11
29067: PPUSH
29068: LD_INT 10
29070: PPUSH
29071: CALL_OW 380
// un := CreateHuman ;
29075: LD_ADDR_VAR 0 1
29079: PUSH
29080: CALL_OW 44
29084: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29085: LD_VAR 0 1
29089: PPUSH
29090: LD_INT 1
29092: PPUSH
29093: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29097: LD_INT 35
29099: PPUSH
29100: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29104: LD_VAR 0 1
29108: PPUSH
29109: LD_INT 22
29111: PUSH
29112: LD_OWVAR 2
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PPUSH
29121: CALL_OW 69
29125: PPUSH
29126: LD_VAR 0 1
29130: PPUSH
29131: CALL_OW 74
29135: PPUSH
29136: CALL_OW 115
// until IsDead ( un ) ;
29140: LD_VAR 0 1
29144: PPUSH
29145: CALL_OW 301
29149: IFFALSE 29097
// end ;
29151: PPOPN 1
29153: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29154: LD_EXP 65
29158: PUSH
29159: LD_EXP 105
29163: AND
29164: IFFALSE 29176
29166: GO 29168
29168: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29169: LD_STRING earthquake(getX(game), 0, 32)
29171: PPUSH
29172: CALL_OW 559
29176: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29177: LD_EXP 65
29181: PUSH
29182: LD_EXP 106
29186: AND
29187: IFFALSE 29278
29189: GO 29191
29191: DISABLE
29192: LD_INT 0
29194: PPUSH
// begin enable ;
29195: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29196: LD_ADDR_VAR 0 1
29200: PUSH
29201: LD_INT 22
29203: PUSH
29204: LD_OWVAR 2
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 21
29215: PUSH
29216: LD_INT 2
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: LD_INT 33
29225: PUSH
29226: LD_INT 3
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: LIST
29237: PPUSH
29238: CALL_OW 69
29242: ST_TO_ADDR
// if not tmp then
29243: LD_VAR 0 1
29247: NOT
29248: IFFALSE 29252
// exit ;
29250: GO 29278
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29252: LD_VAR 0 1
29256: PUSH
29257: LD_INT 1
29259: PPUSH
29260: LD_VAR 0 1
29264: PPUSH
29265: CALL_OW 12
29269: ARRAY
29270: PPUSH
29271: LD_INT 1
29273: PPUSH
29274: CALL_OW 234
// end ;
29278: PPOPN 1
29280: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29281: LD_EXP 65
29285: PUSH
29286: LD_EXP 107
29290: AND
29291: IFFALSE 29432
29293: GO 29295
29295: DISABLE
29296: LD_INT 0
29298: PPUSH
29299: PPUSH
29300: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29301: LD_ADDR_VAR 0 3
29305: PUSH
29306: LD_INT 22
29308: PUSH
29309: LD_OWVAR 2
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: LD_INT 25
29320: PUSH
29321: LD_INT 1
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PPUSH
29332: CALL_OW 69
29336: ST_TO_ADDR
// if not tmp then
29337: LD_VAR 0 3
29341: NOT
29342: IFFALSE 29346
// exit ;
29344: GO 29432
// un := tmp [ rand ( 1 , tmp ) ] ;
29346: LD_ADDR_VAR 0 2
29350: PUSH
29351: LD_VAR 0 3
29355: PUSH
29356: LD_INT 1
29358: PPUSH
29359: LD_VAR 0 3
29363: PPUSH
29364: CALL_OW 12
29368: ARRAY
29369: ST_TO_ADDR
// if Crawls ( un ) then
29370: LD_VAR 0 2
29374: PPUSH
29375: CALL_OW 318
29379: IFFALSE 29390
// ComWalk ( un ) ;
29381: LD_VAR 0 2
29385: PPUSH
29386: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29390: LD_VAR 0 2
29394: PPUSH
29395: LD_INT 9
29397: PPUSH
29398: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29402: LD_INT 28
29404: PPUSH
29405: LD_OWVAR 2
29409: PPUSH
29410: LD_INT 2
29412: PPUSH
29413: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29417: LD_INT 29
29419: PPUSH
29420: LD_OWVAR 2
29424: PPUSH
29425: LD_INT 2
29427: PPUSH
29428: CALL_OW 322
// end ;
29432: PPOPN 3
29434: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29435: LD_EXP 65
29439: PUSH
29440: LD_EXP 108
29444: AND
29445: IFFALSE 29556
29447: GO 29449
29449: DISABLE
29450: LD_INT 0
29452: PPUSH
29453: PPUSH
29454: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29455: LD_ADDR_VAR 0 3
29459: PUSH
29460: LD_INT 22
29462: PUSH
29463: LD_OWVAR 2
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: LD_INT 25
29474: PUSH
29475: LD_INT 1
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PPUSH
29486: CALL_OW 69
29490: ST_TO_ADDR
// if not tmp then
29491: LD_VAR 0 3
29495: NOT
29496: IFFALSE 29500
// exit ;
29498: GO 29556
// un := tmp [ rand ( 1 , tmp ) ] ;
29500: LD_ADDR_VAR 0 2
29504: PUSH
29505: LD_VAR 0 3
29509: PUSH
29510: LD_INT 1
29512: PPUSH
29513: LD_VAR 0 3
29517: PPUSH
29518: CALL_OW 12
29522: ARRAY
29523: ST_TO_ADDR
// if Crawls ( un ) then
29524: LD_VAR 0 2
29528: PPUSH
29529: CALL_OW 318
29533: IFFALSE 29544
// ComWalk ( un ) ;
29535: LD_VAR 0 2
29539: PPUSH
29540: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29544: LD_VAR 0 2
29548: PPUSH
29549: LD_INT 8
29551: PPUSH
29552: CALL_OW 336
// end ;
29556: PPOPN 3
29558: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29559: LD_EXP 65
29563: PUSH
29564: LD_EXP 109
29568: AND
29569: IFFALSE 29713
29571: GO 29573
29573: DISABLE
29574: LD_INT 0
29576: PPUSH
29577: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29578: LD_ADDR_VAR 0 2
29582: PUSH
29583: LD_INT 22
29585: PUSH
29586: LD_OWVAR 2
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: PUSH
29595: LD_INT 21
29597: PUSH
29598: LD_INT 2
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: PUSH
29605: LD_INT 2
29607: PUSH
29608: LD_INT 34
29610: PUSH
29611: LD_INT 12
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: PUSH
29618: LD_INT 34
29620: PUSH
29621: LD_INT 51
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 34
29630: PUSH
29631: LD_INT 32
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: LIST
29642: LIST
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: LIST
29648: PPUSH
29649: CALL_OW 69
29653: ST_TO_ADDR
// if not tmp then
29654: LD_VAR 0 2
29658: NOT
29659: IFFALSE 29663
// exit ;
29661: GO 29713
// for i in tmp do
29663: LD_ADDR_VAR 0 1
29667: PUSH
29668: LD_VAR 0 2
29672: PUSH
29673: FOR_IN
29674: IFFALSE 29711
// if GetCargo ( i , mat_artifact ) = 0 then
29676: LD_VAR 0 1
29680: PPUSH
29681: LD_INT 4
29683: PPUSH
29684: CALL_OW 289
29688: PUSH
29689: LD_INT 0
29691: EQUAL
29692: IFFALSE 29709
// SetCargo ( i , mat_siberit , 100 ) ;
29694: LD_VAR 0 1
29698: PPUSH
29699: LD_INT 3
29701: PPUSH
29702: LD_INT 100
29704: PPUSH
29705: CALL_OW 290
29709: GO 29673
29711: POP
29712: POP
// end ;
29713: PPOPN 2
29715: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29716: LD_EXP 65
29720: PUSH
29721: LD_EXP 110
29725: AND
29726: IFFALSE 29909
29728: GO 29730
29730: DISABLE
29731: LD_INT 0
29733: PPUSH
29734: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29735: LD_ADDR_VAR 0 2
29739: PUSH
29740: LD_INT 22
29742: PUSH
29743: LD_OWVAR 2
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PPUSH
29752: CALL_OW 69
29756: ST_TO_ADDR
// if not tmp then
29757: LD_VAR 0 2
29761: NOT
29762: IFFALSE 29766
// exit ;
29764: GO 29909
// for i := 1 to 2 do
29766: LD_ADDR_VAR 0 1
29770: PUSH
29771: DOUBLE
29772: LD_INT 1
29774: DEC
29775: ST_TO_ADDR
29776: LD_INT 2
29778: PUSH
29779: FOR_TO
29780: IFFALSE 29907
// begin uc_side := your_side ;
29782: LD_ADDR_OWVAR 20
29786: PUSH
29787: LD_OWVAR 2
29791: ST_TO_ADDR
// uc_nation := nation_american ;
29792: LD_ADDR_OWVAR 21
29796: PUSH
29797: LD_INT 1
29799: ST_TO_ADDR
// vc_chassis := us_morphling ;
29800: LD_ADDR_OWVAR 37
29804: PUSH
29805: LD_INT 5
29807: ST_TO_ADDR
// vc_engine := engine_siberite ;
29808: LD_ADDR_OWVAR 39
29812: PUSH
29813: LD_INT 3
29815: ST_TO_ADDR
// vc_control := control_computer ;
29816: LD_ADDR_OWVAR 38
29820: PUSH
29821: LD_INT 3
29823: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29824: LD_ADDR_OWVAR 40
29828: PUSH
29829: LD_INT 10
29831: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29832: LD_VAR 0 2
29836: PUSH
29837: LD_INT 1
29839: ARRAY
29840: PPUSH
29841: CALL_OW 310
29845: NOT
29846: IFFALSE 29893
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29848: CALL_OW 45
29852: PPUSH
29853: LD_VAR 0 2
29857: PUSH
29858: LD_INT 1
29860: ARRAY
29861: PPUSH
29862: CALL_OW 250
29866: PPUSH
29867: LD_VAR 0 2
29871: PUSH
29872: LD_INT 1
29874: ARRAY
29875: PPUSH
29876: CALL_OW 251
29880: PPUSH
29881: LD_INT 12
29883: PPUSH
29884: LD_INT 1
29886: PPUSH
29887: CALL_OW 50
29891: GO 29905
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29893: CALL_OW 45
29897: PPUSH
29898: LD_INT 1
29900: PPUSH
29901: CALL_OW 51
// end ;
29905: GO 29779
29907: POP
29908: POP
// end ;
29909: PPOPN 2
29911: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29912: LD_EXP 65
29916: PUSH
29917: LD_EXP 111
29921: AND
29922: IFFALSE 30144
29924: GO 29926
29926: DISABLE
29927: LD_INT 0
29929: PPUSH
29930: PPUSH
29931: PPUSH
29932: PPUSH
29933: PPUSH
29934: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29935: LD_ADDR_VAR 0 6
29939: PUSH
29940: LD_INT 22
29942: PUSH
29943: LD_OWVAR 2
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: LD_INT 21
29954: PUSH
29955: LD_INT 1
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: LD_INT 3
29964: PUSH
29965: LD_INT 23
29967: PUSH
29968: LD_INT 0
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: LIST
29983: PPUSH
29984: CALL_OW 69
29988: ST_TO_ADDR
// if not tmp then
29989: LD_VAR 0 6
29993: NOT
29994: IFFALSE 29998
// exit ;
29996: GO 30144
// s1 := rand ( 1 , 4 ) ;
29998: LD_ADDR_VAR 0 2
30002: PUSH
30003: LD_INT 1
30005: PPUSH
30006: LD_INT 4
30008: PPUSH
30009: CALL_OW 12
30013: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30014: LD_ADDR_VAR 0 4
30018: PUSH
30019: LD_VAR 0 6
30023: PUSH
30024: LD_INT 1
30026: ARRAY
30027: PPUSH
30028: LD_VAR 0 2
30032: PPUSH
30033: CALL_OW 259
30037: ST_TO_ADDR
// if s1 = 1 then
30038: LD_VAR 0 2
30042: PUSH
30043: LD_INT 1
30045: EQUAL
30046: IFFALSE 30066
// s2 := rand ( 2 , 4 ) else
30048: LD_ADDR_VAR 0 3
30052: PUSH
30053: LD_INT 2
30055: PPUSH
30056: LD_INT 4
30058: PPUSH
30059: CALL_OW 12
30063: ST_TO_ADDR
30064: GO 30074
// s2 := 1 ;
30066: LD_ADDR_VAR 0 3
30070: PUSH
30071: LD_INT 1
30073: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30074: LD_ADDR_VAR 0 5
30078: PUSH
30079: LD_VAR 0 6
30083: PUSH
30084: LD_INT 1
30086: ARRAY
30087: PPUSH
30088: LD_VAR 0 3
30092: PPUSH
30093: CALL_OW 259
30097: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30098: LD_VAR 0 6
30102: PUSH
30103: LD_INT 1
30105: ARRAY
30106: PPUSH
30107: LD_VAR 0 2
30111: PPUSH
30112: LD_VAR 0 5
30116: PPUSH
30117: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30121: LD_VAR 0 6
30125: PUSH
30126: LD_INT 1
30128: ARRAY
30129: PPUSH
30130: LD_VAR 0 3
30134: PPUSH
30135: LD_VAR 0 4
30139: PPUSH
30140: CALL_OW 237
// end ;
30144: PPOPN 6
30146: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30147: LD_EXP 65
30151: PUSH
30152: LD_EXP 112
30156: AND
30157: IFFALSE 30236
30159: GO 30161
30161: DISABLE
30162: LD_INT 0
30164: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30165: LD_ADDR_VAR 0 1
30169: PUSH
30170: LD_INT 22
30172: PUSH
30173: LD_OWVAR 2
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: LD_INT 30
30184: PUSH
30185: LD_INT 3
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PPUSH
30196: CALL_OW 69
30200: ST_TO_ADDR
// if not tmp then
30201: LD_VAR 0 1
30205: NOT
30206: IFFALSE 30210
// exit ;
30208: GO 30236
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30210: LD_VAR 0 1
30214: PUSH
30215: LD_INT 1
30217: PPUSH
30218: LD_VAR 0 1
30222: PPUSH
30223: CALL_OW 12
30227: ARRAY
30228: PPUSH
30229: LD_INT 1
30231: PPUSH
30232: CALL_OW 234
// end ;
30236: PPOPN 1
30238: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30239: LD_EXP 65
30243: PUSH
30244: LD_EXP 113
30248: AND
30249: IFFALSE 30361
30251: GO 30253
30253: DISABLE
30254: LD_INT 0
30256: PPUSH
30257: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30258: LD_ADDR_VAR 0 2
30262: PUSH
30263: LD_INT 22
30265: PUSH
30266: LD_OWVAR 2
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: LD_INT 2
30277: PUSH
30278: LD_INT 30
30280: PUSH
30281: LD_INT 27
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 30
30290: PUSH
30291: LD_INT 26
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 30
30300: PUSH
30301: LD_INT 28
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: PPUSH
30318: CALL_OW 69
30322: ST_TO_ADDR
// if not tmp then
30323: LD_VAR 0 2
30327: NOT
30328: IFFALSE 30332
// exit ;
30330: GO 30361
// for i in tmp do
30332: LD_ADDR_VAR 0 1
30336: PUSH
30337: LD_VAR 0 2
30341: PUSH
30342: FOR_IN
30343: IFFALSE 30359
// SetLives ( i , 1 ) ;
30345: LD_VAR 0 1
30349: PPUSH
30350: LD_INT 1
30352: PPUSH
30353: CALL_OW 234
30357: GO 30342
30359: POP
30360: POP
// end ;
30361: PPOPN 2
30363: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30364: LD_EXP 65
30368: PUSH
30369: LD_EXP 114
30373: AND
30374: IFFALSE 30661
30376: GO 30378
30378: DISABLE
30379: LD_INT 0
30381: PPUSH
30382: PPUSH
30383: PPUSH
// begin i := rand ( 1 , 7 ) ;
30384: LD_ADDR_VAR 0 1
30388: PUSH
30389: LD_INT 1
30391: PPUSH
30392: LD_INT 7
30394: PPUSH
30395: CALL_OW 12
30399: ST_TO_ADDR
// case i of 1 :
30400: LD_VAR 0 1
30404: PUSH
30405: LD_INT 1
30407: DOUBLE
30408: EQUAL
30409: IFTRUE 30413
30411: GO 30423
30413: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30414: LD_STRING earthquake(getX(game), 0, 32)
30416: PPUSH
30417: CALL_OW 559
30421: GO 30661
30423: LD_INT 2
30425: DOUBLE
30426: EQUAL
30427: IFTRUE 30431
30429: GO 30445
30431: POP
// begin ToLua ( displayStucuk(); ) ;
30432: LD_STRING displayStucuk();
30434: PPUSH
30435: CALL_OW 559
// ResetFog ;
30439: CALL_OW 335
// end ; 3 :
30443: GO 30661
30445: LD_INT 3
30447: DOUBLE
30448: EQUAL
30449: IFTRUE 30453
30451: GO 30557
30453: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30454: LD_ADDR_VAR 0 2
30458: PUSH
30459: LD_INT 22
30461: PUSH
30462: LD_OWVAR 2
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: LD_INT 25
30473: PUSH
30474: LD_INT 1
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: PPUSH
30485: CALL_OW 69
30489: ST_TO_ADDR
// if not tmp then
30490: LD_VAR 0 2
30494: NOT
30495: IFFALSE 30499
// exit ;
30497: GO 30661
// un := tmp [ rand ( 1 , tmp ) ] ;
30499: LD_ADDR_VAR 0 3
30503: PUSH
30504: LD_VAR 0 2
30508: PUSH
30509: LD_INT 1
30511: PPUSH
30512: LD_VAR 0 2
30516: PPUSH
30517: CALL_OW 12
30521: ARRAY
30522: ST_TO_ADDR
// if Crawls ( un ) then
30523: LD_VAR 0 3
30527: PPUSH
30528: CALL_OW 318
30532: IFFALSE 30543
// ComWalk ( un ) ;
30534: LD_VAR 0 3
30538: PPUSH
30539: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30543: LD_VAR 0 3
30547: PPUSH
30548: LD_INT 8
30550: PPUSH
30551: CALL_OW 336
// end ; 4 :
30555: GO 30661
30557: LD_INT 4
30559: DOUBLE
30560: EQUAL
30561: IFTRUE 30565
30563: GO 30639
30565: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30566: LD_ADDR_VAR 0 2
30570: PUSH
30571: LD_INT 22
30573: PUSH
30574: LD_OWVAR 2
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: LD_INT 30
30585: PUSH
30586: LD_INT 29
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PPUSH
30597: CALL_OW 69
30601: ST_TO_ADDR
// if not tmp then
30602: LD_VAR 0 2
30606: NOT
30607: IFFALSE 30611
// exit ;
30609: GO 30661
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30611: LD_VAR 0 2
30615: PUSH
30616: LD_INT 1
30618: ARRAY
30619: PPUSH
30620: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30624: LD_VAR 0 2
30628: PUSH
30629: LD_INT 1
30631: ARRAY
30632: PPUSH
30633: CALL_OW 65
// end ; 5 .. 7 :
30637: GO 30661
30639: LD_INT 5
30641: DOUBLE
30642: GREATEREQUAL
30643: IFFALSE 30651
30645: LD_INT 7
30647: DOUBLE
30648: LESSEQUAL
30649: IFTRUE 30653
30651: GO 30660
30653: POP
// StreamSibBomb ; end ;
30654: CALL 26898 0 0
30658: GO 30661
30660: POP
// end ;
30661: PPOPN 3
30663: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30664: LD_EXP 65
30668: PUSH
30669: LD_EXP 115
30673: AND
30674: IFFALSE 30830
30676: GO 30678
30678: DISABLE
30679: LD_INT 0
30681: PPUSH
30682: PPUSH
30683: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30684: LD_ADDR_VAR 0 2
30688: PUSH
30689: LD_INT 81
30691: PUSH
30692: LD_OWVAR 2
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: LD_INT 2
30703: PUSH
30704: LD_INT 21
30706: PUSH
30707: LD_INT 1
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 21
30716: PUSH
30717: LD_INT 2
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: LIST
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PPUSH
30733: CALL_OW 69
30737: ST_TO_ADDR
// if not tmp then
30738: LD_VAR 0 2
30742: NOT
30743: IFFALSE 30747
// exit ;
30745: GO 30830
// p := 0 ;
30747: LD_ADDR_VAR 0 3
30751: PUSH
30752: LD_INT 0
30754: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30755: LD_INT 35
30757: PPUSH
30758: CALL_OW 67
// p := p + 1 ;
30762: LD_ADDR_VAR 0 3
30766: PUSH
30767: LD_VAR 0 3
30771: PUSH
30772: LD_INT 1
30774: PLUS
30775: ST_TO_ADDR
// for i in tmp do
30776: LD_ADDR_VAR 0 1
30780: PUSH
30781: LD_VAR 0 2
30785: PUSH
30786: FOR_IN
30787: IFFALSE 30818
// if GetLives ( i ) < 1000 then
30789: LD_VAR 0 1
30793: PPUSH
30794: CALL_OW 256
30798: PUSH
30799: LD_INT 1000
30801: LESS
30802: IFFALSE 30816
// SetLives ( i , 1000 ) ;
30804: LD_VAR 0 1
30808: PPUSH
30809: LD_INT 1000
30811: PPUSH
30812: CALL_OW 234
30816: GO 30786
30818: POP
30819: POP
// until p > 20 ;
30820: LD_VAR 0 3
30824: PUSH
30825: LD_INT 20
30827: GREATER
30828: IFFALSE 30755
// end ;
30830: PPOPN 3
30832: END
// every 0 0$1 trigger StreamModeActive and sTime do
30833: LD_EXP 65
30837: PUSH
30838: LD_EXP 116
30842: AND
30843: IFFALSE 30878
30845: GO 30847
30847: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30848: LD_INT 28
30850: PPUSH
30851: LD_OWVAR 2
30855: PPUSH
30856: LD_INT 2
30858: PPUSH
30859: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30863: LD_INT 30
30865: PPUSH
30866: LD_OWVAR 2
30870: PPUSH
30871: LD_INT 2
30873: PPUSH
30874: CALL_OW 322
// end ;
30878: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30879: LD_EXP 65
30883: PUSH
30884: LD_EXP 117
30888: AND
30889: IFFALSE 31010
30891: GO 30893
30893: DISABLE
30894: LD_INT 0
30896: PPUSH
30897: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30898: LD_ADDR_VAR 0 2
30902: PUSH
30903: LD_INT 22
30905: PUSH
30906: LD_OWVAR 2
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 21
30917: PUSH
30918: LD_INT 1
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: LD_INT 3
30927: PUSH
30928: LD_INT 23
30930: PUSH
30931: LD_INT 0
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PUSH
30942: EMPTY
30943: LIST
30944: LIST
30945: LIST
30946: PPUSH
30947: CALL_OW 69
30951: ST_TO_ADDR
// if not tmp then
30952: LD_VAR 0 2
30956: NOT
30957: IFFALSE 30961
// exit ;
30959: GO 31010
// for i in tmp do
30961: LD_ADDR_VAR 0 1
30965: PUSH
30966: LD_VAR 0 2
30970: PUSH
30971: FOR_IN
30972: IFFALSE 31008
// begin if Crawls ( i ) then
30974: LD_VAR 0 1
30978: PPUSH
30979: CALL_OW 318
30983: IFFALSE 30994
// ComWalk ( i ) ;
30985: LD_VAR 0 1
30989: PPUSH
30990: CALL_OW 138
// SetClass ( i , 2 ) ;
30994: LD_VAR 0 1
30998: PPUSH
30999: LD_INT 2
31001: PPUSH
31002: CALL_OW 336
// end ;
31006: GO 30971
31008: POP
31009: POP
// end ;
31010: PPOPN 2
31012: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31013: LD_EXP 65
31017: PUSH
31018: LD_EXP 118
31022: AND
31023: IFFALSE 31311
31025: GO 31027
31027: DISABLE
31028: LD_INT 0
31030: PPUSH
31031: PPUSH
31032: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31033: LD_OWVAR 2
31037: PPUSH
31038: LD_INT 9
31040: PPUSH
31041: LD_INT 1
31043: PPUSH
31044: LD_INT 1
31046: PPUSH
31047: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31051: LD_INT 9
31053: PPUSH
31054: LD_OWVAR 2
31058: PPUSH
31059: CALL_OW 343
// uc_side := 9 ;
31063: LD_ADDR_OWVAR 20
31067: PUSH
31068: LD_INT 9
31070: ST_TO_ADDR
// uc_nation := 2 ;
31071: LD_ADDR_OWVAR 21
31075: PUSH
31076: LD_INT 2
31078: ST_TO_ADDR
// hc_name := Dark Warrior ;
31079: LD_ADDR_OWVAR 26
31083: PUSH
31084: LD_STRING Dark Warrior
31086: ST_TO_ADDR
// hc_gallery :=  ;
31087: LD_ADDR_OWVAR 33
31091: PUSH
31092: LD_STRING 
31094: ST_TO_ADDR
// hc_noskilllimit := true ;
31095: LD_ADDR_OWVAR 76
31099: PUSH
31100: LD_INT 1
31102: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31103: LD_ADDR_OWVAR 31
31107: PUSH
31108: LD_INT 30
31110: PUSH
31111: LD_INT 30
31113: PUSH
31114: LD_INT 30
31116: PUSH
31117: LD_INT 30
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: ST_TO_ADDR
// un := CreateHuman ;
31126: LD_ADDR_VAR 0 3
31130: PUSH
31131: CALL_OW 44
31135: ST_TO_ADDR
// hc_noskilllimit := false ;
31136: LD_ADDR_OWVAR 76
31140: PUSH
31141: LD_INT 0
31143: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31144: LD_VAR 0 3
31148: PPUSH
31149: LD_INT 1
31151: PPUSH
31152: CALL_OW 51
// ToLua ( playRanger() ) ;
31156: LD_STRING playRanger()
31158: PPUSH
31159: CALL_OW 559
// p := 0 ;
31163: LD_ADDR_VAR 0 2
31167: PUSH
31168: LD_INT 0
31170: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31171: LD_INT 35
31173: PPUSH
31174: CALL_OW 67
// p := p + 1 ;
31178: LD_ADDR_VAR 0 2
31182: PUSH
31183: LD_VAR 0 2
31187: PUSH
31188: LD_INT 1
31190: PLUS
31191: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31192: LD_VAR 0 3
31196: PPUSH
31197: CALL_OW 256
31201: PUSH
31202: LD_INT 1000
31204: LESS
31205: IFFALSE 31219
// SetLives ( un , 1000 ) ;
31207: LD_VAR 0 3
31211: PPUSH
31212: LD_INT 1000
31214: PPUSH
31215: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31219: LD_VAR 0 3
31223: PPUSH
31224: LD_INT 81
31226: PUSH
31227: LD_OWVAR 2
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 91
31238: PUSH
31239: LD_VAR 0 3
31243: PUSH
31244: LD_INT 30
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: LIST
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PPUSH
31256: CALL_OW 69
31260: PPUSH
31261: LD_VAR 0 3
31265: PPUSH
31266: CALL_OW 74
31270: PPUSH
31271: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31275: LD_VAR 0 2
31279: PUSH
31280: LD_INT 80
31282: GREATER
31283: PUSH
31284: LD_VAR 0 3
31288: PPUSH
31289: CALL_OW 301
31293: OR
31294: IFFALSE 31171
// if un then
31296: LD_VAR 0 3
31300: IFFALSE 31311
// RemoveUnit ( un ) ;
31302: LD_VAR 0 3
31306: PPUSH
31307: CALL_OW 64
// end ;
31311: PPOPN 3
31313: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31314: LD_EXP 119
31318: IFFALSE 31434
31320: GO 31322
31322: DISABLE
31323: LD_INT 0
31325: PPUSH
31326: PPUSH
31327: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31328: LD_ADDR_VAR 0 2
31332: PUSH
31333: LD_INT 81
31335: PUSH
31336: LD_OWVAR 2
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 21
31347: PUSH
31348: LD_INT 1
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PPUSH
31359: CALL_OW 69
31363: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31364: LD_STRING playComputer()
31366: PPUSH
31367: CALL_OW 559
// if not tmp then
31371: LD_VAR 0 2
31375: NOT
31376: IFFALSE 31380
// exit ;
31378: GO 31434
// for i in tmp do
31380: LD_ADDR_VAR 0 1
31384: PUSH
31385: LD_VAR 0 2
31389: PUSH
31390: FOR_IN
31391: IFFALSE 31432
// for j := 1 to 4 do
31393: LD_ADDR_VAR 0 3
31397: PUSH
31398: DOUBLE
31399: LD_INT 1
31401: DEC
31402: ST_TO_ADDR
31403: LD_INT 4
31405: PUSH
31406: FOR_TO
31407: IFFALSE 31428
// SetSkill ( i , j , 10 ) ;
31409: LD_VAR 0 1
31413: PPUSH
31414: LD_VAR 0 3
31418: PPUSH
31419: LD_INT 10
31421: PPUSH
31422: CALL_OW 237
31426: GO 31406
31428: POP
31429: POP
31430: GO 31390
31432: POP
31433: POP
// end ;
31434: PPOPN 3
31436: END
// every 0 0$1 trigger s30 do var i , tmp ;
31437: LD_EXP 120
31441: IFFALSE 31510
31443: GO 31445
31445: DISABLE
31446: LD_INT 0
31448: PPUSH
31449: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31450: LD_ADDR_VAR 0 2
31454: PUSH
31455: LD_INT 22
31457: PUSH
31458: LD_OWVAR 2
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PPUSH
31467: CALL_OW 69
31471: ST_TO_ADDR
// if not tmp then
31472: LD_VAR 0 2
31476: NOT
31477: IFFALSE 31481
// exit ;
31479: GO 31510
// for i in tmp do
31481: LD_ADDR_VAR 0 1
31485: PUSH
31486: LD_VAR 0 2
31490: PUSH
31491: FOR_IN
31492: IFFALSE 31508
// SetLives ( i , 300 ) ;
31494: LD_VAR 0 1
31498: PPUSH
31499: LD_INT 300
31501: PPUSH
31502: CALL_OW 234
31506: GO 31491
31508: POP
31509: POP
// end ;
31510: PPOPN 2
31512: END
// every 0 0$1 trigger s60 do var i , tmp ;
31513: LD_EXP 121
31517: IFFALSE 31586
31519: GO 31521
31521: DISABLE
31522: LD_INT 0
31524: PPUSH
31525: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31526: LD_ADDR_VAR 0 2
31530: PUSH
31531: LD_INT 22
31533: PUSH
31534: LD_OWVAR 2
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PPUSH
31543: CALL_OW 69
31547: ST_TO_ADDR
// if not tmp then
31548: LD_VAR 0 2
31552: NOT
31553: IFFALSE 31557
// exit ;
31555: GO 31586
// for i in tmp do
31557: LD_ADDR_VAR 0 1
31561: PUSH
31562: LD_VAR 0 2
31566: PUSH
31567: FOR_IN
31568: IFFALSE 31584
// SetLives ( i , 600 ) ;
31570: LD_VAR 0 1
31574: PPUSH
31575: LD_INT 600
31577: PPUSH
31578: CALL_OW 234
31582: GO 31567
31584: POP
31585: POP
// end ;
31586: PPOPN 2
31588: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31589: LD_INT 0
31591: PPUSH
// case cmd of 301 :
31592: LD_VAR 0 1
31596: PUSH
31597: LD_INT 301
31599: DOUBLE
31600: EQUAL
31601: IFTRUE 31605
31603: GO 31637
31605: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31606: LD_VAR 0 6
31610: PPUSH
31611: LD_VAR 0 7
31615: PPUSH
31616: LD_VAR 0 8
31620: PPUSH
31621: LD_VAR 0 4
31625: PPUSH
31626: LD_VAR 0 5
31630: PPUSH
31631: CALL 32838 0 5
31635: GO 31758
31637: LD_INT 302
31639: DOUBLE
31640: EQUAL
31641: IFTRUE 31645
31643: GO 31682
31645: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31646: LD_VAR 0 6
31650: PPUSH
31651: LD_VAR 0 7
31655: PPUSH
31656: LD_VAR 0 8
31660: PPUSH
31661: LD_VAR 0 9
31665: PPUSH
31666: LD_VAR 0 4
31670: PPUSH
31671: LD_VAR 0 5
31675: PPUSH
31676: CALL 32929 0 6
31680: GO 31758
31682: LD_INT 303
31684: DOUBLE
31685: EQUAL
31686: IFTRUE 31690
31688: GO 31727
31690: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31691: LD_VAR 0 6
31695: PPUSH
31696: LD_VAR 0 7
31700: PPUSH
31701: LD_VAR 0 8
31705: PPUSH
31706: LD_VAR 0 9
31710: PPUSH
31711: LD_VAR 0 4
31715: PPUSH
31716: LD_VAR 0 5
31720: PPUSH
31721: CALL 31763 0 6
31725: GO 31758
31727: LD_INT 304
31729: DOUBLE
31730: EQUAL
31731: IFTRUE 31735
31733: GO 31757
31735: POP
// hHackTeleport ( unit , x , y ) ; end ;
31736: LD_VAR 0 2
31740: PPUSH
31741: LD_VAR 0 4
31745: PPUSH
31746: LD_VAR 0 5
31750: PPUSH
31751: CALL 33522 0 3
31755: GO 31758
31757: POP
// end ;
31758: LD_VAR 0 12
31762: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31763: LD_INT 0
31765: PPUSH
31766: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31767: LD_VAR 0 1
31771: PUSH
31772: LD_INT 1
31774: LESS
31775: PUSH
31776: LD_VAR 0 1
31780: PUSH
31781: LD_INT 3
31783: GREATER
31784: OR
31785: PUSH
31786: LD_VAR 0 5
31790: PPUSH
31791: LD_VAR 0 6
31795: PPUSH
31796: CALL_OW 428
31800: OR
31801: IFFALSE 31805
// exit ;
31803: GO 32525
// uc_side := your_side ;
31805: LD_ADDR_OWVAR 20
31809: PUSH
31810: LD_OWVAR 2
31814: ST_TO_ADDR
// uc_nation := nation ;
31815: LD_ADDR_OWVAR 21
31819: PUSH
31820: LD_VAR 0 1
31824: ST_TO_ADDR
// bc_level = 1 ;
31825: LD_ADDR_OWVAR 43
31829: PUSH
31830: LD_INT 1
31832: ST_TO_ADDR
// case btype of 1 :
31833: LD_VAR 0 2
31837: PUSH
31838: LD_INT 1
31840: DOUBLE
31841: EQUAL
31842: IFTRUE 31846
31844: GO 31857
31846: POP
// bc_type := b_depot ; 2 :
31847: LD_ADDR_OWVAR 42
31851: PUSH
31852: LD_INT 0
31854: ST_TO_ADDR
31855: GO 32469
31857: LD_INT 2
31859: DOUBLE
31860: EQUAL
31861: IFTRUE 31865
31863: GO 31876
31865: POP
// bc_type := b_warehouse ; 3 :
31866: LD_ADDR_OWVAR 42
31870: PUSH
31871: LD_INT 1
31873: ST_TO_ADDR
31874: GO 32469
31876: LD_INT 3
31878: DOUBLE
31879: EQUAL
31880: IFTRUE 31884
31882: GO 31895
31884: POP
// bc_type := b_lab ; 4 .. 9 :
31885: LD_ADDR_OWVAR 42
31889: PUSH
31890: LD_INT 6
31892: ST_TO_ADDR
31893: GO 32469
31895: LD_INT 4
31897: DOUBLE
31898: GREATEREQUAL
31899: IFFALSE 31907
31901: LD_INT 9
31903: DOUBLE
31904: LESSEQUAL
31905: IFTRUE 31909
31907: GO 31961
31909: POP
// begin bc_type := b_lab_half ;
31910: LD_ADDR_OWVAR 42
31914: PUSH
31915: LD_INT 7
31917: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31918: LD_ADDR_OWVAR 44
31922: PUSH
31923: LD_INT 10
31925: PUSH
31926: LD_INT 11
31928: PUSH
31929: LD_INT 12
31931: PUSH
31932: LD_INT 15
31934: PUSH
31935: LD_INT 14
31937: PUSH
31938: LD_INT 13
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: PUSH
31949: LD_VAR 0 2
31953: PUSH
31954: LD_INT 3
31956: MINUS
31957: ARRAY
31958: ST_TO_ADDR
// end ; 10 .. 13 :
31959: GO 32469
31961: LD_INT 10
31963: DOUBLE
31964: GREATEREQUAL
31965: IFFALSE 31973
31967: LD_INT 13
31969: DOUBLE
31970: LESSEQUAL
31971: IFTRUE 31975
31973: GO 32052
31975: POP
// begin bc_type := b_lab_full ;
31976: LD_ADDR_OWVAR 42
31980: PUSH
31981: LD_INT 8
31983: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31984: LD_ADDR_OWVAR 44
31988: PUSH
31989: LD_INT 10
31991: PUSH
31992: LD_INT 12
31994: PUSH
31995: LD_INT 14
31997: PUSH
31998: LD_INT 13
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: PUSH
32007: LD_VAR 0 2
32011: PUSH
32012: LD_INT 9
32014: MINUS
32015: ARRAY
32016: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32017: LD_ADDR_OWVAR 45
32021: PUSH
32022: LD_INT 11
32024: PUSH
32025: LD_INT 15
32027: PUSH
32028: LD_INT 12
32030: PUSH
32031: LD_INT 15
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: PUSH
32040: LD_VAR 0 2
32044: PUSH
32045: LD_INT 9
32047: MINUS
32048: ARRAY
32049: ST_TO_ADDR
// end ; 14 :
32050: GO 32469
32052: LD_INT 14
32054: DOUBLE
32055: EQUAL
32056: IFTRUE 32060
32058: GO 32071
32060: POP
// bc_type := b_workshop ; 15 :
32061: LD_ADDR_OWVAR 42
32065: PUSH
32066: LD_INT 2
32068: ST_TO_ADDR
32069: GO 32469
32071: LD_INT 15
32073: DOUBLE
32074: EQUAL
32075: IFTRUE 32079
32077: GO 32090
32079: POP
// bc_type := b_factory ; 16 :
32080: LD_ADDR_OWVAR 42
32084: PUSH
32085: LD_INT 3
32087: ST_TO_ADDR
32088: GO 32469
32090: LD_INT 16
32092: DOUBLE
32093: EQUAL
32094: IFTRUE 32098
32096: GO 32109
32098: POP
// bc_type := b_ext_gun ; 17 :
32099: LD_ADDR_OWVAR 42
32103: PUSH
32104: LD_INT 17
32106: ST_TO_ADDR
32107: GO 32469
32109: LD_INT 17
32111: DOUBLE
32112: EQUAL
32113: IFTRUE 32117
32115: GO 32145
32117: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32118: LD_ADDR_OWVAR 42
32122: PUSH
32123: LD_INT 19
32125: PUSH
32126: LD_INT 23
32128: PUSH
32129: LD_INT 19
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: LIST
32136: PUSH
32137: LD_VAR 0 1
32141: ARRAY
32142: ST_TO_ADDR
32143: GO 32469
32145: LD_INT 18
32147: DOUBLE
32148: EQUAL
32149: IFTRUE 32153
32151: GO 32164
32153: POP
// bc_type := b_ext_radar ; 19 :
32154: LD_ADDR_OWVAR 42
32158: PUSH
32159: LD_INT 20
32161: ST_TO_ADDR
32162: GO 32469
32164: LD_INT 19
32166: DOUBLE
32167: EQUAL
32168: IFTRUE 32172
32170: GO 32183
32172: POP
// bc_type := b_ext_radio ; 20 :
32173: LD_ADDR_OWVAR 42
32177: PUSH
32178: LD_INT 22
32180: ST_TO_ADDR
32181: GO 32469
32183: LD_INT 20
32185: DOUBLE
32186: EQUAL
32187: IFTRUE 32191
32189: GO 32202
32191: POP
// bc_type := b_ext_siberium ; 21 :
32192: LD_ADDR_OWVAR 42
32196: PUSH
32197: LD_INT 21
32199: ST_TO_ADDR
32200: GO 32469
32202: LD_INT 21
32204: DOUBLE
32205: EQUAL
32206: IFTRUE 32210
32208: GO 32221
32210: POP
// bc_type := b_ext_computer ; 22 :
32211: LD_ADDR_OWVAR 42
32215: PUSH
32216: LD_INT 24
32218: ST_TO_ADDR
32219: GO 32469
32221: LD_INT 22
32223: DOUBLE
32224: EQUAL
32225: IFTRUE 32229
32227: GO 32240
32229: POP
// bc_type := b_ext_track ; 23 :
32230: LD_ADDR_OWVAR 42
32234: PUSH
32235: LD_INT 16
32237: ST_TO_ADDR
32238: GO 32469
32240: LD_INT 23
32242: DOUBLE
32243: EQUAL
32244: IFTRUE 32248
32246: GO 32259
32248: POP
// bc_type := b_ext_laser ; 24 :
32249: LD_ADDR_OWVAR 42
32253: PUSH
32254: LD_INT 25
32256: ST_TO_ADDR
32257: GO 32469
32259: LD_INT 24
32261: DOUBLE
32262: EQUAL
32263: IFTRUE 32267
32265: GO 32278
32267: POP
// bc_type := b_control_tower ; 25 :
32268: LD_ADDR_OWVAR 42
32272: PUSH
32273: LD_INT 36
32275: ST_TO_ADDR
32276: GO 32469
32278: LD_INT 25
32280: DOUBLE
32281: EQUAL
32282: IFTRUE 32286
32284: GO 32297
32286: POP
// bc_type := b_breastwork ; 26 :
32287: LD_ADDR_OWVAR 42
32291: PUSH
32292: LD_INT 31
32294: ST_TO_ADDR
32295: GO 32469
32297: LD_INT 26
32299: DOUBLE
32300: EQUAL
32301: IFTRUE 32305
32303: GO 32316
32305: POP
// bc_type := b_bunker ; 27 :
32306: LD_ADDR_OWVAR 42
32310: PUSH
32311: LD_INT 32
32313: ST_TO_ADDR
32314: GO 32469
32316: LD_INT 27
32318: DOUBLE
32319: EQUAL
32320: IFTRUE 32324
32322: GO 32335
32324: POP
// bc_type := b_turret ; 28 :
32325: LD_ADDR_OWVAR 42
32329: PUSH
32330: LD_INT 33
32332: ST_TO_ADDR
32333: GO 32469
32335: LD_INT 28
32337: DOUBLE
32338: EQUAL
32339: IFTRUE 32343
32341: GO 32354
32343: POP
// bc_type := b_armoury ; 29 :
32344: LD_ADDR_OWVAR 42
32348: PUSH
32349: LD_INT 4
32351: ST_TO_ADDR
32352: GO 32469
32354: LD_INT 29
32356: DOUBLE
32357: EQUAL
32358: IFTRUE 32362
32360: GO 32373
32362: POP
// bc_type := b_barracks ; 30 :
32363: LD_ADDR_OWVAR 42
32367: PUSH
32368: LD_INT 5
32370: ST_TO_ADDR
32371: GO 32469
32373: LD_INT 30
32375: DOUBLE
32376: EQUAL
32377: IFTRUE 32381
32379: GO 32392
32381: POP
// bc_type := b_solar_power ; 31 :
32382: LD_ADDR_OWVAR 42
32386: PUSH
32387: LD_INT 27
32389: ST_TO_ADDR
32390: GO 32469
32392: LD_INT 31
32394: DOUBLE
32395: EQUAL
32396: IFTRUE 32400
32398: GO 32411
32400: POP
// bc_type := b_oil_power ; 32 :
32401: LD_ADDR_OWVAR 42
32405: PUSH
32406: LD_INT 26
32408: ST_TO_ADDR
32409: GO 32469
32411: LD_INT 32
32413: DOUBLE
32414: EQUAL
32415: IFTRUE 32419
32417: GO 32430
32419: POP
// bc_type := b_siberite_power ; 33 :
32420: LD_ADDR_OWVAR 42
32424: PUSH
32425: LD_INT 28
32427: ST_TO_ADDR
32428: GO 32469
32430: LD_INT 33
32432: DOUBLE
32433: EQUAL
32434: IFTRUE 32438
32436: GO 32449
32438: POP
// bc_type := b_oil_mine ; 34 :
32439: LD_ADDR_OWVAR 42
32443: PUSH
32444: LD_INT 29
32446: ST_TO_ADDR
32447: GO 32469
32449: LD_INT 34
32451: DOUBLE
32452: EQUAL
32453: IFTRUE 32457
32455: GO 32468
32457: POP
// bc_type := b_siberite_mine ; end ;
32458: LD_ADDR_OWVAR 42
32462: PUSH
32463: LD_INT 30
32465: ST_TO_ADDR
32466: GO 32469
32468: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32469: LD_ADDR_VAR 0 8
32473: PUSH
32474: LD_VAR 0 5
32478: PPUSH
32479: LD_VAR 0 6
32483: PPUSH
32484: LD_VAR 0 3
32488: PPUSH
32489: CALL_OW 47
32493: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32494: LD_OWVAR 42
32498: PUSH
32499: LD_INT 32
32501: PUSH
32502: LD_INT 33
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: IN
32509: IFFALSE 32525
// PlaceWeaponTurret ( b , weapon ) ;
32511: LD_VAR 0 8
32515: PPUSH
32516: LD_VAR 0 4
32520: PPUSH
32521: CALL_OW 431
// end ;
32525: LD_VAR 0 7
32529: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32530: LD_INT 0
32532: PPUSH
32533: PPUSH
32534: PPUSH
32535: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32536: LD_ADDR_VAR 0 4
32540: PUSH
32541: LD_INT 22
32543: PUSH
32544: LD_OWVAR 2
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 2
32555: PUSH
32556: LD_INT 30
32558: PUSH
32559: LD_INT 0
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 30
32568: PUSH
32569: LD_INT 1
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: LIST
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PPUSH
32585: CALL_OW 69
32589: ST_TO_ADDR
// if not tmp then
32590: LD_VAR 0 4
32594: NOT
32595: IFFALSE 32599
// exit ;
32597: GO 32658
// for i in tmp do
32599: LD_ADDR_VAR 0 2
32603: PUSH
32604: LD_VAR 0 4
32608: PUSH
32609: FOR_IN
32610: IFFALSE 32656
// for j = 1 to 3 do
32612: LD_ADDR_VAR 0 3
32616: PUSH
32617: DOUBLE
32618: LD_INT 1
32620: DEC
32621: ST_TO_ADDR
32622: LD_INT 3
32624: PUSH
32625: FOR_TO
32626: IFFALSE 32652
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32628: LD_VAR 0 2
32632: PPUSH
32633: CALL_OW 274
32637: PPUSH
32638: LD_VAR 0 3
32642: PPUSH
32643: LD_INT 99999
32645: PPUSH
32646: CALL_OW 277
32650: GO 32625
32652: POP
32653: POP
32654: GO 32609
32656: POP
32657: POP
// end ;
32658: LD_VAR 0 1
32662: RET
// export function hHackSetLevel10 ; var i , j ; begin
32663: LD_INT 0
32665: PPUSH
32666: PPUSH
32667: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32668: LD_ADDR_VAR 0 2
32672: PUSH
32673: LD_INT 21
32675: PUSH
32676: LD_INT 1
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PPUSH
32683: CALL_OW 69
32687: PUSH
32688: FOR_IN
32689: IFFALSE 32741
// if IsSelected ( i ) then
32691: LD_VAR 0 2
32695: PPUSH
32696: CALL_OW 306
32700: IFFALSE 32739
// begin for j := 1 to 4 do
32702: LD_ADDR_VAR 0 3
32706: PUSH
32707: DOUBLE
32708: LD_INT 1
32710: DEC
32711: ST_TO_ADDR
32712: LD_INT 4
32714: PUSH
32715: FOR_TO
32716: IFFALSE 32737
// SetSkill ( i , j , 10 ) ;
32718: LD_VAR 0 2
32722: PPUSH
32723: LD_VAR 0 3
32727: PPUSH
32728: LD_INT 10
32730: PPUSH
32731: CALL_OW 237
32735: GO 32715
32737: POP
32738: POP
// end ;
32739: GO 32688
32741: POP
32742: POP
// end ;
32743: LD_VAR 0 1
32747: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32748: LD_INT 0
32750: PPUSH
32751: PPUSH
32752: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32753: LD_ADDR_VAR 0 2
32757: PUSH
32758: LD_INT 22
32760: PUSH
32761: LD_OWVAR 2
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 21
32772: PUSH
32773: LD_INT 1
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PPUSH
32784: CALL_OW 69
32788: PUSH
32789: FOR_IN
32790: IFFALSE 32831
// begin for j := 1 to 4 do
32792: LD_ADDR_VAR 0 3
32796: PUSH
32797: DOUBLE
32798: LD_INT 1
32800: DEC
32801: ST_TO_ADDR
32802: LD_INT 4
32804: PUSH
32805: FOR_TO
32806: IFFALSE 32827
// SetSkill ( i , j , 10 ) ;
32808: LD_VAR 0 2
32812: PPUSH
32813: LD_VAR 0 3
32817: PPUSH
32818: LD_INT 10
32820: PPUSH
32821: CALL_OW 237
32825: GO 32805
32827: POP
32828: POP
// end ;
32829: GO 32789
32831: POP
32832: POP
// end ;
32833: LD_VAR 0 1
32837: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32838: LD_INT 0
32840: PPUSH
// uc_side := your_side ;
32841: LD_ADDR_OWVAR 20
32845: PUSH
32846: LD_OWVAR 2
32850: ST_TO_ADDR
// uc_nation := nation ;
32851: LD_ADDR_OWVAR 21
32855: PUSH
32856: LD_VAR 0 1
32860: ST_TO_ADDR
// InitHc ;
32861: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32865: LD_INT 0
32867: PPUSH
32868: LD_VAR 0 2
32872: PPUSH
32873: LD_VAR 0 3
32877: PPUSH
32878: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32882: LD_VAR 0 4
32886: PPUSH
32887: LD_VAR 0 5
32891: PPUSH
32892: CALL_OW 428
32896: PUSH
32897: LD_INT 0
32899: EQUAL
32900: IFFALSE 32924
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32902: CALL_OW 44
32906: PPUSH
32907: LD_VAR 0 4
32911: PPUSH
32912: LD_VAR 0 5
32916: PPUSH
32917: LD_INT 1
32919: PPUSH
32920: CALL_OW 48
// end ;
32924: LD_VAR 0 6
32928: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32929: LD_INT 0
32931: PPUSH
32932: PPUSH
// uc_side := your_side ;
32933: LD_ADDR_OWVAR 20
32937: PUSH
32938: LD_OWVAR 2
32942: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32943: LD_VAR 0 1
32947: PUSH
32948: LD_INT 1
32950: PUSH
32951: LD_INT 2
32953: PUSH
32954: LD_INT 3
32956: PUSH
32957: LD_INT 4
32959: PUSH
32960: LD_INT 5
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: IN
32970: IFFALSE 32982
// uc_nation := nation_american else
32972: LD_ADDR_OWVAR 21
32976: PUSH
32977: LD_INT 1
32979: ST_TO_ADDR
32980: GO 33025
// if chassis in [ 11 , 12 , 13 , 14 ] then
32982: LD_VAR 0 1
32986: PUSH
32987: LD_INT 11
32989: PUSH
32990: LD_INT 12
32992: PUSH
32993: LD_INT 13
32995: PUSH
32996: LD_INT 14
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: LIST
33003: LIST
33004: IN
33005: IFFALSE 33017
// uc_nation := nation_arabian else
33007: LD_ADDR_OWVAR 21
33011: PUSH
33012: LD_INT 2
33014: ST_TO_ADDR
33015: GO 33025
// uc_nation := nation_russian ;
33017: LD_ADDR_OWVAR 21
33021: PUSH
33022: LD_INT 3
33024: ST_TO_ADDR
// vc_chassis := chassis ;
33025: LD_ADDR_OWVAR 37
33029: PUSH
33030: LD_VAR 0 1
33034: ST_TO_ADDR
// vc_engine := engine ;
33035: LD_ADDR_OWVAR 39
33039: PUSH
33040: LD_VAR 0 2
33044: ST_TO_ADDR
// vc_control := control ;
33045: LD_ADDR_OWVAR 38
33049: PUSH
33050: LD_VAR 0 3
33054: ST_TO_ADDR
// vc_weapon := weapon ;
33055: LD_ADDR_OWVAR 40
33059: PUSH
33060: LD_VAR 0 4
33064: ST_TO_ADDR
// un := CreateVehicle ;
33065: LD_ADDR_VAR 0 8
33069: PUSH
33070: CALL_OW 45
33074: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33075: LD_VAR 0 8
33079: PPUSH
33080: LD_INT 0
33082: PPUSH
33083: LD_INT 5
33085: PPUSH
33086: CALL_OW 12
33090: PPUSH
33091: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33095: LD_VAR 0 8
33099: PPUSH
33100: LD_VAR 0 5
33104: PPUSH
33105: LD_VAR 0 6
33109: PPUSH
33110: LD_INT 1
33112: PPUSH
33113: CALL_OW 48
// end ;
33117: LD_VAR 0 7
33121: RET
// export hInvincible ; every 1 do
33122: GO 33124
33124: DISABLE
// hInvincible := [ ] ;
33125: LD_ADDR_EXP 122
33129: PUSH
33130: EMPTY
33131: ST_TO_ADDR
33132: END
// every 10 do var i ;
33133: GO 33135
33135: DISABLE
33136: LD_INT 0
33138: PPUSH
// begin enable ;
33139: ENABLE
// if not hInvincible then
33140: LD_EXP 122
33144: NOT
33145: IFFALSE 33149
// exit ;
33147: GO 33193
// for i in hInvincible do
33149: LD_ADDR_VAR 0 1
33153: PUSH
33154: LD_EXP 122
33158: PUSH
33159: FOR_IN
33160: IFFALSE 33191
// if GetLives ( i ) < 1000 then
33162: LD_VAR 0 1
33166: PPUSH
33167: CALL_OW 256
33171: PUSH
33172: LD_INT 1000
33174: LESS
33175: IFFALSE 33189
// SetLives ( i , 1000 ) ;
33177: LD_VAR 0 1
33181: PPUSH
33182: LD_INT 1000
33184: PPUSH
33185: CALL_OW 234
33189: GO 33159
33191: POP
33192: POP
// end ;
33193: PPOPN 1
33195: END
// export function hHackInvincible ; var i ; begin
33196: LD_INT 0
33198: PPUSH
33199: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33200: LD_ADDR_VAR 0 2
33204: PUSH
33205: LD_INT 2
33207: PUSH
33208: LD_INT 21
33210: PUSH
33211: LD_INT 1
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: PUSH
33218: LD_INT 21
33220: PUSH
33221: LD_INT 2
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: LIST
33232: PPUSH
33233: CALL_OW 69
33237: PUSH
33238: FOR_IN
33239: IFFALSE 33300
// if IsSelected ( i ) then
33241: LD_VAR 0 2
33245: PPUSH
33246: CALL_OW 306
33250: IFFALSE 33298
// begin if i in hInvincible then
33252: LD_VAR 0 2
33256: PUSH
33257: LD_EXP 122
33261: IN
33262: IFFALSE 33282
// hInvincible := hInvincible diff i else
33264: LD_ADDR_EXP 122
33268: PUSH
33269: LD_EXP 122
33273: PUSH
33274: LD_VAR 0 2
33278: DIFF
33279: ST_TO_ADDR
33280: GO 33298
// hInvincible := hInvincible union i ;
33282: LD_ADDR_EXP 122
33286: PUSH
33287: LD_EXP 122
33291: PUSH
33292: LD_VAR 0 2
33296: UNION
33297: ST_TO_ADDR
// end ;
33298: GO 33238
33300: POP
33301: POP
// end ;
33302: LD_VAR 0 1
33306: RET
// export function hHackInvisible ; var i , j ; begin
33307: LD_INT 0
33309: PPUSH
33310: PPUSH
33311: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33312: LD_ADDR_VAR 0 2
33316: PUSH
33317: LD_INT 21
33319: PUSH
33320: LD_INT 1
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PPUSH
33327: CALL_OW 69
33331: PUSH
33332: FOR_IN
33333: IFFALSE 33357
// if IsSelected ( i ) then
33335: LD_VAR 0 2
33339: PPUSH
33340: CALL_OW 306
33344: IFFALSE 33355
// ComForceInvisible ( i ) ;
33346: LD_VAR 0 2
33350: PPUSH
33351: CALL_OW 496
33355: GO 33332
33357: POP
33358: POP
// end ;
33359: LD_VAR 0 1
33363: RET
// export function hHackChangeYourSide ; begin
33364: LD_INT 0
33366: PPUSH
// if your_side = 8 then
33367: LD_OWVAR 2
33371: PUSH
33372: LD_INT 8
33374: EQUAL
33375: IFFALSE 33387
// your_side := 0 else
33377: LD_ADDR_OWVAR 2
33381: PUSH
33382: LD_INT 0
33384: ST_TO_ADDR
33385: GO 33401
// your_side := your_side + 1 ;
33387: LD_ADDR_OWVAR 2
33391: PUSH
33392: LD_OWVAR 2
33396: PUSH
33397: LD_INT 1
33399: PLUS
33400: ST_TO_ADDR
// end ;
33401: LD_VAR 0 1
33405: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33406: LD_INT 0
33408: PPUSH
33409: PPUSH
33410: PPUSH
// for i in all_units do
33411: LD_ADDR_VAR 0 2
33415: PUSH
33416: LD_OWVAR 3
33420: PUSH
33421: FOR_IN
33422: IFFALSE 33500
// if IsSelected ( i ) then
33424: LD_VAR 0 2
33428: PPUSH
33429: CALL_OW 306
33433: IFFALSE 33498
// begin j := GetSide ( i ) ;
33435: LD_ADDR_VAR 0 3
33439: PUSH
33440: LD_VAR 0 2
33444: PPUSH
33445: CALL_OW 255
33449: ST_TO_ADDR
// if j = 8 then
33450: LD_VAR 0 3
33454: PUSH
33455: LD_INT 8
33457: EQUAL
33458: IFFALSE 33470
// j := 0 else
33460: LD_ADDR_VAR 0 3
33464: PUSH
33465: LD_INT 0
33467: ST_TO_ADDR
33468: GO 33484
// j := j + 1 ;
33470: LD_ADDR_VAR 0 3
33474: PUSH
33475: LD_VAR 0 3
33479: PUSH
33480: LD_INT 1
33482: PLUS
33483: ST_TO_ADDR
// SetSide ( i , j ) ;
33484: LD_VAR 0 2
33488: PPUSH
33489: LD_VAR 0 3
33493: PPUSH
33494: CALL_OW 235
// end ;
33498: GO 33421
33500: POP
33501: POP
// end ;
33502: LD_VAR 0 1
33506: RET
// export function hHackFog ; begin
33507: LD_INT 0
33509: PPUSH
// FogOff ( true ) ;
33510: LD_INT 1
33512: PPUSH
33513: CALL_OW 344
// end ;
33517: LD_VAR 0 1
33521: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33522: LD_INT 0
33524: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33525: LD_VAR 0 1
33529: PPUSH
33530: LD_VAR 0 2
33534: PPUSH
33535: LD_VAR 0 3
33539: PPUSH
33540: LD_INT 1
33542: PPUSH
33543: LD_INT 1
33545: PPUSH
33546: CALL_OW 483
// CenterOnXY ( x , y ) ;
33550: LD_VAR 0 2
33554: PPUSH
33555: LD_VAR 0 3
33559: PPUSH
33560: CALL_OW 84
// end ; end_of_file
33564: LD_VAR 0 4
33568: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
33569: LD_INT 0
33571: PPUSH
33572: PPUSH
33573: PPUSH
33574: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33575: LD_VAR 0 1
33579: PPUSH
33580: CALL_OW 264
33584: PUSH
33585: LD_EXP 49
33589: EQUAL
33590: IFFALSE 33662
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33592: LD_INT 68
33594: PPUSH
33595: LD_VAR 0 1
33599: PPUSH
33600: CALL_OW 255
33604: PPUSH
33605: CALL_OW 321
33609: PUSH
33610: LD_INT 2
33612: EQUAL
33613: IFFALSE 33625
// eff := 70 else
33615: LD_ADDR_VAR 0 4
33619: PUSH
33620: LD_INT 70
33622: ST_TO_ADDR
33623: GO 33633
// eff := 30 ;
33625: LD_ADDR_VAR 0 4
33629: PUSH
33630: LD_INT 30
33632: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33633: LD_VAR 0 1
33637: PPUSH
33638: CALL_OW 250
33642: PPUSH
33643: LD_VAR 0 1
33647: PPUSH
33648: CALL_OW 251
33652: PPUSH
33653: LD_VAR 0 4
33657: PPUSH
33658: CALL_OW 495
// end ; end ;
33662: LD_VAR 0 2
33666: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
33667: LD_INT 0
33669: PPUSH
// end ;
33670: LD_VAR 0 4
33674: RET
// export function SOS_Command ( cmd ) ; begin
33675: LD_INT 0
33677: PPUSH
// end ;
33678: LD_VAR 0 2
33682: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
33683: LD_INT 0
33685: PPUSH
// end ;
33686: LD_VAR 0 6
33690: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
33691: LD_INT 0
33693: PPUSH
33694: PPUSH
// if not vehicle or not factory then
33695: LD_VAR 0 1
33699: NOT
33700: PUSH
33701: LD_VAR 0 2
33705: NOT
33706: OR
33707: IFFALSE 33711
// exit ;
33709: GO 33942
// if factoryWaypoints >= factory then
33711: LD_EXP 123
33715: PUSH
33716: LD_VAR 0 2
33720: GREATEREQUAL
33721: IFFALSE 33942
// if factoryWaypoints [ factory ] then
33723: LD_EXP 123
33727: PUSH
33728: LD_VAR 0 2
33732: ARRAY
33733: IFFALSE 33942
// begin if GetControl ( vehicle ) = control_manual then
33735: LD_VAR 0 1
33739: PPUSH
33740: CALL_OW 263
33744: PUSH
33745: LD_INT 1
33747: EQUAL
33748: IFFALSE 33829
// begin driver := IsDrivenBy ( vehicle ) ;
33750: LD_ADDR_VAR 0 4
33754: PUSH
33755: LD_VAR 0 1
33759: PPUSH
33760: CALL_OW 311
33764: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33765: LD_VAR 0 4
33769: PPUSH
33770: LD_EXP 123
33774: PUSH
33775: LD_VAR 0 2
33779: ARRAY
33780: PUSH
33781: LD_INT 3
33783: ARRAY
33784: PPUSH
33785: LD_EXP 123
33789: PUSH
33790: LD_VAR 0 2
33794: ARRAY
33795: PUSH
33796: LD_INT 4
33798: ARRAY
33799: PPUSH
33800: CALL_OW 171
// AddComExitVehicle ( driver ) ;
33804: LD_VAR 0 4
33808: PPUSH
33809: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
33813: LD_VAR 0 4
33817: PPUSH
33818: LD_VAR 0 2
33822: PPUSH
33823: CALL_OW 180
// end else
33827: GO 33942
// if GetControl ( vehicle ) = control_remote then
33829: LD_VAR 0 1
33833: PPUSH
33834: CALL_OW 263
33838: PUSH
33839: LD_INT 2
33841: EQUAL
33842: IFFALSE 33903
// begin wait ( 0 0$2 ) ;
33844: LD_INT 70
33846: PPUSH
33847: CALL_OW 67
// if Connect ( vehicle ) then
33851: LD_VAR 0 1
33855: PPUSH
33856: CALL 46166 0 1
33860: IFFALSE 33901
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33862: LD_VAR 0 1
33866: PPUSH
33867: LD_EXP 123
33871: PUSH
33872: LD_VAR 0 2
33876: ARRAY
33877: PUSH
33878: LD_INT 3
33880: ARRAY
33881: PPUSH
33882: LD_EXP 123
33886: PUSH
33887: LD_VAR 0 2
33891: ARRAY
33892: PUSH
33893: LD_INT 4
33895: ARRAY
33896: PPUSH
33897: CALL_OW 171
// end else
33901: GO 33942
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33903: LD_VAR 0 1
33907: PPUSH
33908: LD_EXP 123
33912: PUSH
33913: LD_VAR 0 2
33917: ARRAY
33918: PUSH
33919: LD_INT 3
33921: ARRAY
33922: PPUSH
33923: LD_EXP 123
33927: PUSH
33928: LD_VAR 0 2
33932: ARRAY
33933: PUSH
33934: LD_INT 4
33936: ARRAY
33937: PPUSH
33938: CALL_OW 171
// end ; end ;
33942: LD_VAR 0 3
33946: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
33947: LD_INT 0
33949: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
33950: LD_VAR 0 1
33954: PUSH
33955: LD_INT 250
33957: EQUAL
33958: PUSH
33959: LD_VAR 0 2
33963: PPUSH
33964: CALL_OW 264
33968: PUSH
33969: LD_EXP 52
33973: EQUAL
33974: AND
33975: IFFALSE 33996
// MinerPlaceMine ( unit , x , y ) ;
33977: LD_VAR 0 2
33981: PPUSH
33982: LD_VAR 0 4
33986: PPUSH
33987: LD_VAR 0 5
33991: PPUSH
33992: CALL 36724 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
33996: LD_VAR 0 1
34000: PUSH
34001: LD_INT 251
34003: EQUAL
34004: PUSH
34005: LD_VAR 0 2
34009: PPUSH
34010: CALL_OW 264
34014: PUSH
34015: LD_EXP 52
34019: EQUAL
34020: AND
34021: IFFALSE 34042
// MinerDetonateMine ( unit , x , y ) ;
34023: LD_VAR 0 2
34027: PPUSH
34028: LD_VAR 0 4
34032: PPUSH
34033: LD_VAR 0 5
34037: PPUSH
34038: CALL 37001 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34042: LD_VAR 0 1
34046: PUSH
34047: LD_INT 252
34049: EQUAL
34050: PUSH
34051: LD_VAR 0 2
34055: PPUSH
34056: CALL_OW 264
34060: PUSH
34061: LD_EXP 52
34065: EQUAL
34066: AND
34067: IFFALSE 34088
// MinerCreateMinefield ( unit , x , y ) ;
34069: LD_VAR 0 2
34073: PPUSH
34074: LD_VAR 0 4
34078: PPUSH
34079: LD_VAR 0 5
34083: PPUSH
34084: CALL 37418 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
34088: LD_VAR 0 1
34092: PUSH
34093: LD_INT 253
34095: EQUAL
34096: PUSH
34097: LD_VAR 0 2
34101: PPUSH
34102: CALL_OW 257
34106: PUSH
34107: LD_INT 5
34109: EQUAL
34110: AND
34111: IFFALSE 34132
// ComBinocular ( unit , x , y ) ;
34113: LD_VAR 0 2
34117: PPUSH
34118: LD_VAR 0 4
34122: PPUSH
34123: LD_VAR 0 5
34127: PPUSH
34128: CALL 37789 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34132: LD_VAR 0 1
34136: PUSH
34137: LD_INT 254
34139: EQUAL
34140: PUSH
34141: LD_VAR 0 2
34145: PPUSH
34146: CALL_OW 264
34150: PUSH
34151: LD_EXP 47
34155: EQUAL
34156: AND
34157: PUSH
34158: LD_VAR 0 3
34162: PPUSH
34163: CALL_OW 263
34167: PUSH
34168: LD_INT 3
34170: EQUAL
34171: AND
34172: IFFALSE 34188
// HackDestroyVehicle ( unit , selectedUnit ) ;
34174: LD_VAR 0 2
34178: PPUSH
34179: LD_VAR 0 3
34183: PPUSH
34184: CALL 36084 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34188: LD_VAR 0 1
34192: PUSH
34193: LD_INT 255
34195: EQUAL
34196: PUSH
34197: LD_VAR 0 2
34201: PPUSH
34202: CALL_OW 264
34206: PUSH
34207: LD_INT 14
34209: PUSH
34210: LD_INT 53
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: IN
34217: AND
34218: PUSH
34219: LD_VAR 0 4
34223: PPUSH
34224: LD_VAR 0 5
34228: PPUSH
34229: CALL_OW 488
34233: AND
34234: IFFALSE 34258
// CutTreeXYR ( unit , x , y , 12 ) ;
34236: LD_VAR 0 2
34240: PPUSH
34241: LD_VAR 0 4
34245: PPUSH
34246: LD_VAR 0 5
34250: PPUSH
34251: LD_INT 12
34253: PPUSH
34254: CALL 34650 0 4
// if cmd = 256 then
34258: LD_VAR 0 1
34262: PUSH
34263: LD_INT 256
34265: EQUAL
34266: IFFALSE 34287
// SetFactoryWaypoint ( unit , x , y ) ;
34268: LD_VAR 0 2
34272: PPUSH
34273: LD_VAR 0 4
34277: PPUSH
34278: LD_VAR 0 5
34282: PPUSH
34283: CALL 34292 0 3
// end ;
34287: LD_VAR 0 6
34291: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34292: LD_INT 0
34294: PPUSH
34295: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34296: LD_VAR 0 1
34300: NOT
34301: PUSH
34302: LD_VAR 0 2
34306: PPUSH
34307: LD_VAR 0 3
34311: PPUSH
34312: CALL_OW 488
34316: NOT
34317: OR
34318: PUSH
34319: LD_VAR 0 1
34323: PPUSH
34324: CALL_OW 266
34328: PUSH
34329: LD_INT 3
34331: NONEQUAL
34332: PUSH
34333: LD_VAR 0 1
34337: PPUSH
34338: CALL_OW 247
34342: PUSH
34343: LD_INT 1
34345: EQUAL
34346: NOT
34347: AND
34348: OR
34349: IFFALSE 34353
// exit ;
34351: GO 34502
// if GetType ( factory ) = unit_human then
34353: LD_VAR 0 1
34357: PPUSH
34358: CALL_OW 247
34362: PUSH
34363: LD_INT 1
34365: EQUAL
34366: IFFALSE 34383
// factory := IsInUnit ( factory ) ;
34368: LD_ADDR_VAR 0 1
34372: PUSH
34373: LD_VAR 0 1
34377: PPUSH
34378: CALL_OW 310
34382: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34383: LD_VAR 0 1
34387: PPUSH
34388: CALL_OW 266
34392: PUSH
34393: LD_INT 3
34395: NONEQUAL
34396: IFFALSE 34400
// exit ;
34398: GO 34502
// if HexInfo ( x , y ) = factory then
34400: LD_VAR 0 2
34404: PPUSH
34405: LD_VAR 0 3
34409: PPUSH
34410: CALL_OW 428
34414: PUSH
34415: LD_VAR 0 1
34419: EQUAL
34420: IFFALSE 34447
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34422: LD_ADDR_EXP 123
34426: PUSH
34427: LD_EXP 123
34431: PPUSH
34432: LD_VAR 0 1
34436: PPUSH
34437: LD_INT 0
34439: PPUSH
34440: CALL_OW 1
34444: ST_TO_ADDR
34445: GO 34498
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34447: LD_ADDR_EXP 123
34451: PUSH
34452: LD_EXP 123
34456: PPUSH
34457: LD_VAR 0 1
34461: PPUSH
34462: LD_VAR 0 1
34466: PPUSH
34467: CALL_OW 255
34471: PUSH
34472: LD_VAR 0 1
34476: PUSH
34477: LD_VAR 0 2
34481: PUSH
34482: LD_VAR 0 3
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: PPUSH
34493: CALL_OW 1
34497: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34498: CALL 34507 0 0
// end ;
34502: LD_VAR 0 4
34506: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
34507: LD_INT 0
34509: PPUSH
34510: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34511: LD_STRING resetFactoryWaypoint();
34513: PPUSH
34514: CALL_OW 559
// if factoryWaypoints then
34518: LD_EXP 123
34522: IFFALSE 34645
// begin for i := 1 to factoryWaypoints do
34524: LD_ADDR_VAR 0 2
34528: PUSH
34529: DOUBLE
34530: LD_INT 1
34532: DEC
34533: ST_TO_ADDR
34534: LD_EXP 123
34538: PUSH
34539: FOR_TO
34540: IFFALSE 34643
// if factoryWaypoints [ i ] then
34542: LD_EXP 123
34546: PUSH
34547: LD_VAR 0 2
34551: ARRAY
34552: IFFALSE 34641
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
34554: LD_STRING setFactoryWaypointXY(
34556: PUSH
34557: LD_EXP 123
34561: PUSH
34562: LD_VAR 0 2
34566: ARRAY
34567: PUSH
34568: LD_INT 1
34570: ARRAY
34571: STR
34572: PUSH
34573: LD_STRING ,
34575: STR
34576: PUSH
34577: LD_EXP 123
34581: PUSH
34582: LD_VAR 0 2
34586: ARRAY
34587: PUSH
34588: LD_INT 2
34590: ARRAY
34591: STR
34592: PUSH
34593: LD_STRING ,
34595: STR
34596: PUSH
34597: LD_EXP 123
34601: PUSH
34602: LD_VAR 0 2
34606: ARRAY
34607: PUSH
34608: LD_INT 3
34610: ARRAY
34611: STR
34612: PUSH
34613: LD_STRING ,
34615: STR
34616: PUSH
34617: LD_EXP 123
34621: PUSH
34622: LD_VAR 0 2
34626: ARRAY
34627: PUSH
34628: LD_INT 4
34630: ARRAY
34631: STR
34632: PUSH
34633: LD_STRING )
34635: STR
34636: PPUSH
34637: CALL_OW 559
34641: GO 34539
34643: POP
34644: POP
// end ; end ;
34645: LD_VAR 0 1
34649: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34650: LD_INT 0
34652: PPUSH
34653: PPUSH
34654: PPUSH
34655: PPUSH
34656: PPUSH
34657: PPUSH
34658: PPUSH
34659: PPUSH
34660: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
34661: LD_VAR 0 1
34665: NOT
34666: PUSH
34667: LD_VAR 0 2
34671: PPUSH
34672: LD_VAR 0 3
34676: PPUSH
34677: CALL_OW 488
34681: NOT
34682: OR
34683: PUSH
34684: LD_VAR 0 4
34688: NOT
34689: OR
34690: IFFALSE 34694
// exit ;
34692: GO 35034
// list := [ ] ;
34694: LD_ADDR_VAR 0 13
34698: PUSH
34699: EMPTY
34700: ST_TO_ADDR
// if x - r < 0 then
34701: LD_VAR 0 2
34705: PUSH
34706: LD_VAR 0 4
34710: MINUS
34711: PUSH
34712: LD_INT 0
34714: LESS
34715: IFFALSE 34727
// min_x := 0 else
34717: LD_ADDR_VAR 0 7
34721: PUSH
34722: LD_INT 0
34724: ST_TO_ADDR
34725: GO 34743
// min_x := x - r ;
34727: LD_ADDR_VAR 0 7
34731: PUSH
34732: LD_VAR 0 2
34736: PUSH
34737: LD_VAR 0 4
34741: MINUS
34742: ST_TO_ADDR
// if y - r < 0 then
34743: LD_VAR 0 3
34747: PUSH
34748: LD_VAR 0 4
34752: MINUS
34753: PUSH
34754: LD_INT 0
34756: LESS
34757: IFFALSE 34769
// min_y := 0 else
34759: LD_ADDR_VAR 0 8
34763: PUSH
34764: LD_INT 0
34766: ST_TO_ADDR
34767: GO 34785
// min_y := y - r ;
34769: LD_ADDR_VAR 0 8
34773: PUSH
34774: LD_VAR 0 3
34778: PUSH
34779: LD_VAR 0 4
34783: MINUS
34784: ST_TO_ADDR
// max_x := x + r ;
34785: LD_ADDR_VAR 0 9
34789: PUSH
34790: LD_VAR 0 2
34794: PUSH
34795: LD_VAR 0 4
34799: PLUS
34800: ST_TO_ADDR
// max_y := y + r ;
34801: LD_ADDR_VAR 0 10
34805: PUSH
34806: LD_VAR 0 3
34810: PUSH
34811: LD_VAR 0 4
34815: PLUS
34816: ST_TO_ADDR
// for _x = min_x to max_x do
34817: LD_ADDR_VAR 0 11
34821: PUSH
34822: DOUBLE
34823: LD_VAR 0 7
34827: DEC
34828: ST_TO_ADDR
34829: LD_VAR 0 9
34833: PUSH
34834: FOR_TO
34835: IFFALSE 34952
// for _y = min_y to max_y do
34837: LD_ADDR_VAR 0 12
34841: PUSH
34842: DOUBLE
34843: LD_VAR 0 8
34847: DEC
34848: ST_TO_ADDR
34849: LD_VAR 0 10
34853: PUSH
34854: FOR_TO
34855: IFFALSE 34948
// begin if not ValidHex ( _x , _y ) then
34857: LD_VAR 0 11
34861: PPUSH
34862: LD_VAR 0 12
34866: PPUSH
34867: CALL_OW 488
34871: NOT
34872: IFFALSE 34876
// continue ;
34874: GO 34854
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34876: LD_VAR 0 11
34880: PPUSH
34881: LD_VAR 0 12
34885: PPUSH
34886: CALL_OW 351
34890: PUSH
34891: LD_VAR 0 11
34895: PPUSH
34896: LD_VAR 0 12
34900: PPUSH
34901: CALL_OW 554
34905: AND
34906: IFFALSE 34946
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34908: LD_ADDR_VAR 0 13
34912: PUSH
34913: LD_VAR 0 13
34917: PPUSH
34918: LD_VAR 0 13
34922: PUSH
34923: LD_INT 1
34925: PLUS
34926: PPUSH
34927: LD_VAR 0 11
34931: PUSH
34932: LD_VAR 0 12
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PPUSH
34941: CALL_OW 2
34945: ST_TO_ADDR
// end ;
34946: GO 34854
34948: POP
34949: POP
34950: GO 34834
34952: POP
34953: POP
// if not list then
34954: LD_VAR 0 13
34958: NOT
34959: IFFALSE 34963
// exit ;
34961: GO 35034
// for i in list do
34963: LD_ADDR_VAR 0 6
34967: PUSH
34968: LD_VAR 0 13
34972: PUSH
34973: FOR_IN
34974: IFFALSE 35032
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34976: LD_VAR 0 1
34980: PPUSH
34981: LD_STRING M
34983: PUSH
34984: LD_VAR 0 6
34988: PUSH
34989: LD_INT 1
34991: ARRAY
34992: PUSH
34993: LD_VAR 0 6
34997: PUSH
34998: LD_INT 2
35000: ARRAY
35001: PUSH
35002: LD_INT 0
35004: PUSH
35005: LD_INT 0
35007: PUSH
35008: LD_INT 0
35010: PUSH
35011: LD_INT 0
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: PUSH
35023: EMPTY
35024: LIST
35025: PPUSH
35026: CALL_OW 447
35030: GO 34973
35032: POP
35033: POP
// end ;
35034: LD_VAR 0 5
35038: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35039: LD_EXP 124
35043: NOT
35044: IFFALSE 35094
35046: GO 35048
35048: DISABLE
// begin initHack := true ;
35049: LD_ADDR_EXP 124
35053: PUSH
35054: LD_INT 1
35056: ST_TO_ADDR
// hackTanks := [ ] ;
35057: LD_ADDR_EXP 125
35061: PUSH
35062: EMPTY
35063: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35064: LD_ADDR_EXP 126
35068: PUSH
35069: EMPTY
35070: ST_TO_ADDR
// hackLimit := 3 ;
35071: LD_ADDR_EXP 127
35075: PUSH
35076: LD_INT 3
35078: ST_TO_ADDR
// hackDist := 12 ;
35079: LD_ADDR_EXP 128
35083: PUSH
35084: LD_INT 12
35086: ST_TO_ADDR
// hackCounter := [ ] ;
35087: LD_ADDR_EXP 129
35091: PUSH
35092: EMPTY
35093: ST_TO_ADDR
// end ;
35094: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35095: LD_EXP 124
35099: PUSH
35100: LD_INT 34
35102: PUSH
35103: LD_EXP 47
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PPUSH
35112: CALL_OW 69
35116: AND
35117: IFFALSE 35372
35119: GO 35121
35121: DISABLE
35122: LD_INT 0
35124: PPUSH
35125: PPUSH
// begin enable ;
35126: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35127: LD_ADDR_VAR 0 1
35131: PUSH
35132: LD_INT 34
35134: PUSH
35135: LD_EXP 47
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PPUSH
35144: CALL_OW 69
35148: PUSH
35149: FOR_IN
35150: IFFALSE 35370
// begin if not i in hackTanks then
35152: LD_VAR 0 1
35156: PUSH
35157: LD_EXP 125
35161: IN
35162: NOT
35163: IFFALSE 35246
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35165: LD_ADDR_EXP 125
35169: PUSH
35170: LD_EXP 125
35174: PPUSH
35175: LD_EXP 125
35179: PUSH
35180: LD_INT 1
35182: PLUS
35183: PPUSH
35184: LD_VAR 0 1
35188: PPUSH
35189: CALL_OW 1
35193: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35194: LD_ADDR_EXP 126
35198: PUSH
35199: LD_EXP 126
35203: PPUSH
35204: LD_EXP 126
35208: PUSH
35209: LD_INT 1
35211: PLUS
35212: PPUSH
35213: EMPTY
35214: PPUSH
35215: CALL_OW 1
35219: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35220: LD_ADDR_EXP 129
35224: PUSH
35225: LD_EXP 129
35229: PPUSH
35230: LD_EXP 129
35234: PUSH
35235: LD_INT 1
35237: PLUS
35238: PPUSH
35239: EMPTY
35240: PPUSH
35241: CALL_OW 1
35245: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35246: LD_VAR 0 1
35250: PPUSH
35251: CALL_OW 302
35255: NOT
35256: IFFALSE 35269
// begin HackUnlinkAll ( i ) ;
35258: LD_VAR 0 1
35262: PPUSH
35263: CALL 35375 0 1
// continue ;
35267: GO 35149
// end ; HackCheckCapturedStatus ( i ) ;
35269: LD_VAR 0 1
35273: PPUSH
35274: CALL 35818 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35278: LD_ADDR_VAR 0 2
35282: PUSH
35283: LD_INT 81
35285: PUSH
35286: LD_VAR 0 1
35290: PPUSH
35291: CALL_OW 255
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: LD_INT 33
35302: PUSH
35303: LD_INT 3
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: LD_INT 91
35312: PUSH
35313: LD_VAR 0 1
35317: PUSH
35318: LD_EXP 128
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 50
35330: PUSH
35331: EMPTY
35332: LIST
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: PPUSH
35340: CALL_OW 69
35344: ST_TO_ADDR
// if not tmp then
35345: LD_VAR 0 2
35349: NOT
35350: IFFALSE 35354
// continue ;
35352: GO 35149
// HackLink ( i , tmp ) ;
35354: LD_VAR 0 1
35358: PPUSH
35359: LD_VAR 0 2
35363: PPUSH
35364: CALL 35511 0 2
// end ;
35368: GO 35149
35370: POP
35371: POP
// end ;
35372: PPOPN 2
35374: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35375: LD_INT 0
35377: PPUSH
35378: PPUSH
35379: PPUSH
// if not hack in hackTanks then
35380: LD_VAR 0 1
35384: PUSH
35385: LD_EXP 125
35389: IN
35390: NOT
35391: IFFALSE 35395
// exit ;
35393: GO 35506
// index := GetElementIndex ( hackTanks , hack ) ;
35395: LD_ADDR_VAR 0 4
35399: PUSH
35400: LD_EXP 125
35404: PPUSH
35405: LD_VAR 0 1
35409: PPUSH
35410: CALL 42980 0 2
35414: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
35415: LD_EXP 126
35419: PUSH
35420: LD_VAR 0 4
35424: ARRAY
35425: IFFALSE 35506
// begin for i in hackTanksCaptured [ index ] do
35427: LD_ADDR_VAR 0 3
35431: PUSH
35432: LD_EXP 126
35436: PUSH
35437: LD_VAR 0 4
35441: ARRAY
35442: PUSH
35443: FOR_IN
35444: IFFALSE 35470
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
35446: LD_VAR 0 3
35450: PUSH
35451: LD_INT 1
35453: ARRAY
35454: PPUSH
35455: LD_VAR 0 3
35459: PUSH
35460: LD_INT 2
35462: ARRAY
35463: PPUSH
35464: CALL_OW 235
35468: GO 35443
35470: POP
35471: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
35472: LD_ADDR_EXP 126
35476: PUSH
35477: LD_EXP 126
35481: PPUSH
35482: LD_VAR 0 4
35486: PPUSH
35487: EMPTY
35488: PPUSH
35489: CALL_OW 1
35493: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
35494: LD_VAR 0 1
35498: PPUSH
35499: LD_INT 0
35501: PPUSH
35502: CALL_OW 505
// end ; end ;
35506: LD_VAR 0 2
35510: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35511: LD_INT 0
35513: PPUSH
35514: PPUSH
35515: PPUSH
// if not hack in hackTanks or not vehicles then
35516: LD_VAR 0 1
35520: PUSH
35521: LD_EXP 125
35525: IN
35526: NOT
35527: PUSH
35528: LD_VAR 0 2
35532: NOT
35533: OR
35534: IFFALSE 35538
// exit ;
35536: GO 35813
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35538: LD_ADDR_VAR 0 2
35542: PUSH
35543: LD_VAR 0 1
35547: PPUSH
35548: LD_VAR 0 2
35552: PPUSH
35553: LD_INT 1
35555: PPUSH
35556: LD_INT 1
35558: PPUSH
35559: CALL 43630 0 4
35563: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35564: LD_ADDR_VAR 0 5
35568: PUSH
35569: LD_EXP 125
35573: PPUSH
35574: LD_VAR 0 1
35578: PPUSH
35579: CALL 42980 0 2
35583: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35584: LD_EXP 126
35588: PUSH
35589: LD_VAR 0 5
35593: ARRAY
35594: PUSH
35595: LD_EXP 127
35599: LESS
35600: IFFALSE 35789
// begin for i := 1 to vehicles do
35602: LD_ADDR_VAR 0 4
35606: PUSH
35607: DOUBLE
35608: LD_INT 1
35610: DEC
35611: ST_TO_ADDR
35612: LD_VAR 0 2
35616: PUSH
35617: FOR_TO
35618: IFFALSE 35787
// begin if hackTanksCaptured [ index ] = hackLimit then
35620: LD_EXP 126
35624: PUSH
35625: LD_VAR 0 5
35629: ARRAY
35630: PUSH
35631: LD_EXP 127
35635: EQUAL
35636: IFFALSE 35640
// break ;
35638: GO 35787
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
35640: LD_ADDR_EXP 129
35644: PUSH
35645: LD_EXP 129
35649: PPUSH
35650: LD_VAR 0 5
35654: PPUSH
35655: LD_EXP 129
35659: PUSH
35660: LD_VAR 0 5
35664: ARRAY
35665: PUSH
35666: LD_INT 1
35668: PLUS
35669: PPUSH
35670: CALL_OW 1
35674: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
35675: LD_ADDR_EXP 126
35679: PUSH
35680: LD_EXP 126
35684: PPUSH
35685: LD_VAR 0 5
35689: PUSH
35690: LD_EXP 126
35694: PUSH
35695: LD_VAR 0 5
35699: ARRAY
35700: PUSH
35701: LD_INT 1
35703: PLUS
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PPUSH
35709: LD_VAR 0 2
35713: PUSH
35714: LD_VAR 0 4
35718: ARRAY
35719: PUSH
35720: LD_VAR 0 2
35724: PUSH
35725: LD_VAR 0 4
35729: ARRAY
35730: PPUSH
35731: CALL_OW 255
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PPUSH
35740: CALL 43195 0 3
35744: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
35745: LD_VAR 0 2
35749: PUSH
35750: LD_VAR 0 4
35754: ARRAY
35755: PPUSH
35756: LD_VAR 0 1
35760: PPUSH
35761: CALL_OW 255
35765: PPUSH
35766: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
35770: LD_VAR 0 2
35774: PUSH
35775: LD_VAR 0 4
35779: ARRAY
35780: PPUSH
35781: CALL_OW 141
// end ;
35785: GO 35617
35787: POP
35788: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35789: LD_VAR 0 1
35793: PPUSH
35794: LD_EXP 126
35798: PUSH
35799: LD_VAR 0 5
35803: ARRAY
35804: PUSH
35805: LD_INT 0
35807: PLUS
35808: PPUSH
35809: CALL_OW 505
// end ;
35813: LD_VAR 0 3
35817: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35818: LD_INT 0
35820: PPUSH
35821: PPUSH
35822: PPUSH
35823: PPUSH
// if not hack in hackTanks then
35824: LD_VAR 0 1
35828: PUSH
35829: LD_EXP 125
35833: IN
35834: NOT
35835: IFFALSE 35839
// exit ;
35837: GO 36079
// index := GetElementIndex ( hackTanks , hack ) ;
35839: LD_ADDR_VAR 0 4
35843: PUSH
35844: LD_EXP 125
35848: PPUSH
35849: LD_VAR 0 1
35853: PPUSH
35854: CALL 42980 0 2
35858: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35859: LD_ADDR_VAR 0 3
35863: PUSH
35864: DOUBLE
35865: LD_EXP 126
35869: PUSH
35870: LD_VAR 0 4
35874: ARRAY
35875: INC
35876: ST_TO_ADDR
35877: LD_INT 1
35879: PUSH
35880: FOR_DOWNTO
35881: IFFALSE 36053
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35883: LD_ADDR_VAR 0 5
35887: PUSH
35888: LD_EXP 126
35892: PUSH
35893: LD_VAR 0 4
35897: ARRAY
35898: PUSH
35899: LD_VAR 0 3
35903: ARRAY
35904: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35905: LD_VAR 0 5
35909: PUSH
35910: LD_INT 1
35912: ARRAY
35913: PPUSH
35914: CALL_OW 302
35918: NOT
35919: PUSH
35920: LD_VAR 0 5
35924: PUSH
35925: LD_INT 1
35927: ARRAY
35928: PPUSH
35929: CALL_OW 255
35933: PUSH
35934: LD_VAR 0 1
35938: PPUSH
35939: CALL_OW 255
35943: NONEQUAL
35944: OR
35945: IFFALSE 36051
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35947: LD_VAR 0 5
35951: PUSH
35952: LD_INT 1
35954: ARRAY
35955: PPUSH
35956: CALL_OW 305
35960: PUSH
35961: LD_VAR 0 5
35965: PUSH
35966: LD_INT 1
35968: ARRAY
35969: PPUSH
35970: CALL_OW 255
35974: PUSH
35975: LD_VAR 0 1
35979: PPUSH
35980: CALL_OW 255
35984: EQUAL
35985: AND
35986: IFFALSE 36010
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35988: LD_VAR 0 5
35992: PUSH
35993: LD_INT 1
35995: ARRAY
35996: PPUSH
35997: LD_VAR 0 5
36001: PUSH
36002: LD_INT 2
36004: ARRAY
36005: PPUSH
36006: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36010: LD_ADDR_EXP 126
36014: PUSH
36015: LD_EXP 126
36019: PPUSH
36020: LD_VAR 0 4
36024: PPUSH
36025: LD_EXP 126
36029: PUSH
36030: LD_VAR 0 4
36034: ARRAY
36035: PPUSH
36036: LD_VAR 0 3
36040: PPUSH
36041: CALL_OW 3
36045: PPUSH
36046: CALL_OW 1
36050: ST_TO_ADDR
// end ; end ;
36051: GO 35880
36053: POP
36054: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36055: LD_VAR 0 1
36059: PPUSH
36060: LD_EXP 126
36064: PUSH
36065: LD_VAR 0 4
36069: ARRAY
36070: PUSH
36071: LD_INT 0
36073: PLUS
36074: PPUSH
36075: CALL_OW 505
// end ;
36079: LD_VAR 0 2
36083: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36084: LD_INT 0
36086: PPUSH
36087: PPUSH
36088: PPUSH
36089: PPUSH
// if not hack in hackTanks then
36090: LD_VAR 0 1
36094: PUSH
36095: LD_EXP 125
36099: IN
36100: NOT
36101: IFFALSE 36105
// exit ;
36103: GO 36190
// index := GetElementIndex ( hackTanks , hack ) ;
36105: LD_ADDR_VAR 0 5
36109: PUSH
36110: LD_EXP 125
36114: PPUSH
36115: LD_VAR 0 1
36119: PPUSH
36120: CALL 42980 0 2
36124: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36125: LD_ADDR_VAR 0 4
36129: PUSH
36130: DOUBLE
36131: LD_INT 1
36133: DEC
36134: ST_TO_ADDR
36135: LD_EXP 126
36139: PUSH
36140: LD_VAR 0 5
36144: ARRAY
36145: PUSH
36146: FOR_TO
36147: IFFALSE 36188
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36149: LD_EXP 126
36153: PUSH
36154: LD_VAR 0 5
36158: ARRAY
36159: PUSH
36160: LD_VAR 0 4
36164: ARRAY
36165: PUSH
36166: LD_INT 1
36168: ARRAY
36169: PUSH
36170: LD_VAR 0 2
36174: EQUAL
36175: IFFALSE 36186
// KillUnit ( vehicle ) ;
36177: LD_VAR 0 2
36181: PPUSH
36182: CALL_OW 66
36186: GO 36146
36188: POP
36189: POP
// end ;
36190: LD_VAR 0 3
36194: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36195: LD_EXP 130
36199: NOT
36200: IFFALSE 36235
36202: GO 36204
36204: DISABLE
// begin initMiner := true ;
36205: LD_ADDR_EXP 130
36209: PUSH
36210: LD_INT 1
36212: ST_TO_ADDR
// minersList := [ ] ;
36213: LD_ADDR_EXP 131
36217: PUSH
36218: EMPTY
36219: ST_TO_ADDR
// minerMinesList := [ ] ;
36220: LD_ADDR_EXP 132
36224: PUSH
36225: EMPTY
36226: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36227: LD_ADDR_EXP 133
36231: PUSH
36232: LD_INT 5
36234: ST_TO_ADDR
// end ;
36235: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36236: LD_EXP 130
36240: PUSH
36241: LD_INT 34
36243: PUSH
36244: LD_EXP 52
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: PPUSH
36253: CALL_OW 69
36257: AND
36258: IFFALSE 36721
36260: GO 36262
36262: DISABLE
36263: LD_INT 0
36265: PPUSH
36266: PPUSH
36267: PPUSH
36268: PPUSH
// begin enable ;
36269: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36270: LD_ADDR_VAR 0 1
36274: PUSH
36275: LD_INT 34
36277: PUSH
36278: LD_EXP 52
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PPUSH
36287: CALL_OW 69
36291: PUSH
36292: FOR_IN
36293: IFFALSE 36365
// begin if not i in minersList then
36295: LD_VAR 0 1
36299: PUSH
36300: LD_EXP 131
36304: IN
36305: NOT
36306: IFFALSE 36363
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36308: LD_ADDR_EXP 131
36312: PUSH
36313: LD_EXP 131
36317: PPUSH
36318: LD_EXP 131
36322: PUSH
36323: LD_INT 1
36325: PLUS
36326: PPUSH
36327: LD_VAR 0 1
36331: PPUSH
36332: CALL_OW 1
36336: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36337: LD_ADDR_EXP 132
36341: PUSH
36342: LD_EXP 132
36346: PPUSH
36347: LD_EXP 132
36351: PUSH
36352: LD_INT 1
36354: PLUS
36355: PPUSH
36356: EMPTY
36357: PPUSH
36358: CALL_OW 1
36362: ST_TO_ADDR
// end end ;
36363: GO 36292
36365: POP
36366: POP
// for i := minerMinesList downto 1 do
36367: LD_ADDR_VAR 0 1
36371: PUSH
36372: DOUBLE
36373: LD_EXP 132
36377: INC
36378: ST_TO_ADDR
36379: LD_INT 1
36381: PUSH
36382: FOR_DOWNTO
36383: IFFALSE 36719
// begin if IsLive ( minersList [ i ] ) then
36385: LD_EXP 131
36389: PUSH
36390: LD_VAR 0 1
36394: ARRAY
36395: PPUSH
36396: CALL_OW 300
36400: IFFALSE 36428
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
36402: LD_EXP 131
36406: PUSH
36407: LD_VAR 0 1
36411: ARRAY
36412: PPUSH
36413: LD_EXP 132
36417: PUSH
36418: LD_VAR 0 1
36422: ARRAY
36423: PPUSH
36424: CALL_OW 505
// if not minerMinesList [ i ] then
36428: LD_EXP 132
36432: PUSH
36433: LD_VAR 0 1
36437: ARRAY
36438: NOT
36439: IFFALSE 36443
// continue ;
36441: GO 36382
// for j := minerMinesList [ i ] downto 1 do
36443: LD_ADDR_VAR 0 2
36447: PUSH
36448: DOUBLE
36449: LD_EXP 132
36453: PUSH
36454: LD_VAR 0 1
36458: ARRAY
36459: INC
36460: ST_TO_ADDR
36461: LD_INT 1
36463: PUSH
36464: FOR_DOWNTO
36465: IFFALSE 36715
// begin side := GetSide ( minersList [ i ] ) ;
36467: LD_ADDR_VAR 0 3
36471: PUSH
36472: LD_EXP 131
36476: PUSH
36477: LD_VAR 0 1
36481: ARRAY
36482: PPUSH
36483: CALL_OW 255
36487: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
36488: LD_ADDR_VAR 0 4
36492: PUSH
36493: LD_EXP 132
36497: PUSH
36498: LD_VAR 0 1
36502: ARRAY
36503: PUSH
36504: LD_VAR 0 2
36508: ARRAY
36509: PUSH
36510: LD_INT 1
36512: ARRAY
36513: PPUSH
36514: LD_EXP 132
36518: PUSH
36519: LD_VAR 0 1
36523: ARRAY
36524: PUSH
36525: LD_VAR 0 2
36529: ARRAY
36530: PUSH
36531: LD_INT 2
36533: ARRAY
36534: PPUSH
36535: CALL_OW 428
36539: ST_TO_ADDR
// if not tmp then
36540: LD_VAR 0 4
36544: NOT
36545: IFFALSE 36549
// continue ;
36547: GO 36464
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
36549: LD_VAR 0 4
36553: PUSH
36554: LD_INT 81
36556: PUSH
36557: LD_VAR 0 3
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PPUSH
36566: CALL_OW 69
36570: IN
36571: PUSH
36572: LD_EXP 132
36576: PUSH
36577: LD_VAR 0 1
36581: ARRAY
36582: PUSH
36583: LD_VAR 0 2
36587: ARRAY
36588: PUSH
36589: LD_INT 1
36591: ARRAY
36592: PPUSH
36593: LD_EXP 132
36597: PUSH
36598: LD_VAR 0 1
36602: ARRAY
36603: PUSH
36604: LD_VAR 0 2
36608: ARRAY
36609: PUSH
36610: LD_INT 2
36612: ARRAY
36613: PPUSH
36614: CALL_OW 458
36618: AND
36619: IFFALSE 36713
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
36621: LD_EXP 132
36625: PUSH
36626: LD_VAR 0 1
36630: ARRAY
36631: PUSH
36632: LD_VAR 0 2
36636: ARRAY
36637: PUSH
36638: LD_INT 1
36640: ARRAY
36641: PPUSH
36642: LD_EXP 132
36646: PUSH
36647: LD_VAR 0 1
36651: ARRAY
36652: PUSH
36653: LD_VAR 0 2
36657: ARRAY
36658: PUSH
36659: LD_INT 2
36661: ARRAY
36662: PPUSH
36663: LD_VAR 0 3
36667: PPUSH
36668: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
36672: LD_ADDR_EXP 132
36676: PUSH
36677: LD_EXP 132
36681: PPUSH
36682: LD_VAR 0 1
36686: PPUSH
36687: LD_EXP 132
36691: PUSH
36692: LD_VAR 0 1
36696: ARRAY
36697: PPUSH
36698: LD_VAR 0 2
36702: PPUSH
36703: CALL_OW 3
36707: PPUSH
36708: CALL_OW 1
36712: ST_TO_ADDR
// end ; end ;
36713: GO 36464
36715: POP
36716: POP
// end ;
36717: GO 36382
36719: POP
36720: POP
// end ;
36721: PPOPN 4
36723: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
36724: LD_INT 0
36726: PPUSH
36727: PPUSH
// result := false ;
36728: LD_ADDR_VAR 0 4
36732: PUSH
36733: LD_INT 0
36735: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
36736: LD_VAR 0 1
36740: PPUSH
36741: CALL_OW 264
36745: PUSH
36746: LD_EXP 52
36750: EQUAL
36751: NOT
36752: IFFALSE 36756
// exit ;
36754: GO 36996
// index := GetElementIndex ( minersList , unit ) ;
36756: LD_ADDR_VAR 0 5
36760: PUSH
36761: LD_EXP 131
36765: PPUSH
36766: LD_VAR 0 1
36770: PPUSH
36771: CALL 42980 0 2
36775: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
36776: LD_EXP 132
36780: PUSH
36781: LD_VAR 0 5
36785: ARRAY
36786: PUSH
36787: LD_EXP 133
36791: GREATEREQUAL
36792: IFFALSE 36796
// exit ;
36794: GO 36996
// ComMoveXY ( unit , x , y ) ;
36796: LD_VAR 0 1
36800: PPUSH
36801: LD_VAR 0 2
36805: PPUSH
36806: LD_VAR 0 3
36810: PPUSH
36811: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36815: LD_INT 35
36817: PPUSH
36818: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36822: LD_VAR 0 1
36826: PPUSH
36827: LD_VAR 0 2
36831: PPUSH
36832: LD_VAR 0 3
36836: PPUSH
36837: CALL 73699 0 3
36841: NOT
36842: PUSH
36843: LD_VAR 0 1
36847: PPUSH
36848: CALL_OW 314
36852: AND
36853: IFFALSE 36857
// exit ;
36855: GO 36996
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36857: LD_VAR 0 2
36861: PPUSH
36862: LD_VAR 0 3
36866: PPUSH
36867: CALL_OW 428
36871: PUSH
36872: LD_VAR 0 1
36876: EQUAL
36877: PUSH
36878: LD_VAR 0 1
36882: PPUSH
36883: CALL_OW 314
36887: NOT
36888: AND
36889: IFFALSE 36815
// PlaySoundXY ( x , y , PlantMine ) ;
36891: LD_VAR 0 2
36895: PPUSH
36896: LD_VAR 0 3
36900: PPUSH
36901: LD_STRING PlantMine
36903: PPUSH
36904: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
36908: LD_VAR 0 2
36912: PPUSH
36913: LD_VAR 0 3
36917: PPUSH
36918: LD_VAR 0 1
36922: PPUSH
36923: CALL_OW 255
36927: PPUSH
36928: LD_INT 0
36930: PPUSH
36931: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36935: LD_ADDR_EXP 132
36939: PUSH
36940: LD_EXP 132
36944: PPUSH
36945: LD_VAR 0 5
36949: PUSH
36950: LD_EXP 132
36954: PUSH
36955: LD_VAR 0 5
36959: ARRAY
36960: PUSH
36961: LD_INT 1
36963: PLUS
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PPUSH
36969: LD_VAR 0 2
36973: PUSH
36974: LD_VAR 0 3
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PPUSH
36983: CALL 43195 0 3
36987: ST_TO_ADDR
// result := true ;
36988: LD_ADDR_VAR 0 4
36992: PUSH
36993: LD_INT 1
36995: ST_TO_ADDR
// end ;
36996: LD_VAR 0 4
37000: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37001: LD_INT 0
37003: PPUSH
37004: PPUSH
37005: PPUSH
// if not unit in minersList then
37006: LD_VAR 0 1
37010: PUSH
37011: LD_EXP 131
37015: IN
37016: NOT
37017: IFFALSE 37021
// exit ;
37019: GO 37413
// index := GetElementIndex ( minersList , unit ) ;
37021: LD_ADDR_VAR 0 6
37025: PUSH
37026: LD_EXP 131
37030: PPUSH
37031: LD_VAR 0 1
37035: PPUSH
37036: CALL 42980 0 2
37040: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37041: LD_ADDR_VAR 0 5
37045: PUSH
37046: DOUBLE
37047: LD_EXP 132
37051: PUSH
37052: LD_VAR 0 6
37056: ARRAY
37057: INC
37058: ST_TO_ADDR
37059: LD_INT 1
37061: PUSH
37062: FOR_DOWNTO
37063: IFFALSE 37224
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37065: LD_EXP 132
37069: PUSH
37070: LD_VAR 0 6
37074: ARRAY
37075: PUSH
37076: LD_VAR 0 5
37080: ARRAY
37081: PUSH
37082: LD_INT 1
37084: ARRAY
37085: PUSH
37086: LD_VAR 0 2
37090: EQUAL
37091: PUSH
37092: LD_EXP 132
37096: PUSH
37097: LD_VAR 0 6
37101: ARRAY
37102: PUSH
37103: LD_VAR 0 5
37107: ARRAY
37108: PUSH
37109: LD_INT 2
37111: ARRAY
37112: PUSH
37113: LD_VAR 0 3
37117: EQUAL
37118: AND
37119: IFFALSE 37222
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37121: LD_EXP 132
37125: PUSH
37126: LD_VAR 0 6
37130: ARRAY
37131: PUSH
37132: LD_VAR 0 5
37136: ARRAY
37137: PUSH
37138: LD_INT 1
37140: ARRAY
37141: PPUSH
37142: LD_EXP 132
37146: PUSH
37147: LD_VAR 0 6
37151: ARRAY
37152: PUSH
37153: LD_VAR 0 5
37157: ARRAY
37158: PUSH
37159: LD_INT 2
37161: ARRAY
37162: PPUSH
37163: LD_VAR 0 1
37167: PPUSH
37168: CALL_OW 255
37172: PPUSH
37173: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37177: LD_ADDR_EXP 132
37181: PUSH
37182: LD_EXP 132
37186: PPUSH
37187: LD_VAR 0 6
37191: PPUSH
37192: LD_EXP 132
37196: PUSH
37197: LD_VAR 0 6
37201: ARRAY
37202: PPUSH
37203: LD_VAR 0 5
37207: PPUSH
37208: CALL_OW 3
37212: PPUSH
37213: CALL_OW 1
37217: ST_TO_ADDR
// exit ;
37218: POP
37219: POP
37220: GO 37413
// end ; end ;
37222: GO 37062
37224: POP
37225: POP
// for i := minerMinesList [ index ] downto 1 do
37226: LD_ADDR_VAR 0 5
37230: PUSH
37231: DOUBLE
37232: LD_EXP 132
37236: PUSH
37237: LD_VAR 0 6
37241: ARRAY
37242: INC
37243: ST_TO_ADDR
37244: LD_INT 1
37246: PUSH
37247: FOR_DOWNTO
37248: IFFALSE 37411
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37250: LD_EXP 132
37254: PUSH
37255: LD_VAR 0 6
37259: ARRAY
37260: PUSH
37261: LD_VAR 0 5
37265: ARRAY
37266: PUSH
37267: LD_INT 1
37269: ARRAY
37270: PPUSH
37271: LD_EXP 132
37275: PUSH
37276: LD_VAR 0 6
37280: ARRAY
37281: PUSH
37282: LD_VAR 0 5
37286: ARRAY
37287: PUSH
37288: LD_INT 2
37290: ARRAY
37291: PPUSH
37292: LD_VAR 0 2
37296: PPUSH
37297: LD_VAR 0 3
37301: PPUSH
37302: CALL_OW 298
37306: PUSH
37307: LD_INT 6
37309: LESS
37310: IFFALSE 37409
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37312: LD_EXP 132
37316: PUSH
37317: LD_VAR 0 6
37321: ARRAY
37322: PUSH
37323: LD_VAR 0 5
37327: ARRAY
37328: PUSH
37329: LD_INT 1
37331: ARRAY
37332: PPUSH
37333: LD_EXP 132
37337: PUSH
37338: LD_VAR 0 6
37342: ARRAY
37343: PUSH
37344: LD_VAR 0 5
37348: ARRAY
37349: PUSH
37350: LD_INT 2
37352: ARRAY
37353: PPUSH
37354: LD_VAR 0 1
37358: PPUSH
37359: CALL_OW 255
37363: PPUSH
37364: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37368: LD_ADDR_EXP 132
37372: PUSH
37373: LD_EXP 132
37377: PPUSH
37378: LD_VAR 0 6
37382: PPUSH
37383: LD_EXP 132
37387: PUSH
37388: LD_VAR 0 6
37392: ARRAY
37393: PPUSH
37394: LD_VAR 0 5
37398: PPUSH
37399: CALL_OW 3
37403: PPUSH
37404: CALL_OW 1
37408: ST_TO_ADDR
// end ; end ;
37409: GO 37247
37411: POP
37412: POP
// end ;
37413: LD_VAR 0 4
37417: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
37418: LD_INT 0
37420: PPUSH
37421: PPUSH
37422: PPUSH
37423: PPUSH
37424: PPUSH
37425: PPUSH
37426: PPUSH
37427: PPUSH
37428: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
37429: LD_VAR 0 1
37433: PPUSH
37434: CALL_OW 264
37438: PUSH
37439: LD_EXP 52
37443: EQUAL
37444: NOT
37445: PUSH
37446: LD_VAR 0 1
37450: PUSH
37451: LD_EXP 131
37455: IN
37456: NOT
37457: OR
37458: IFFALSE 37462
// exit ;
37460: GO 37784
// index := GetElementIndex ( minersList , unit ) ;
37462: LD_ADDR_VAR 0 6
37466: PUSH
37467: LD_EXP 131
37471: PPUSH
37472: LD_VAR 0 1
37476: PPUSH
37477: CALL 42980 0 2
37481: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
37482: LD_ADDR_VAR 0 8
37486: PUSH
37487: LD_EXP 133
37491: PUSH
37492: LD_EXP 132
37496: PUSH
37497: LD_VAR 0 6
37501: ARRAY
37502: MINUS
37503: ST_TO_ADDR
// if not minesFreeAmount then
37504: LD_VAR 0 8
37508: NOT
37509: IFFALSE 37513
// exit ;
37511: GO 37784
// tmp := [ ] ;
37513: LD_ADDR_VAR 0 7
37517: PUSH
37518: EMPTY
37519: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
37520: LD_ADDR_VAR 0 5
37524: PUSH
37525: DOUBLE
37526: LD_INT 1
37528: DEC
37529: ST_TO_ADDR
37530: LD_VAR 0 8
37534: PUSH
37535: FOR_TO
37536: IFFALSE 37731
// begin _d := rand ( 0 , 5 ) ;
37538: LD_ADDR_VAR 0 11
37542: PUSH
37543: LD_INT 0
37545: PPUSH
37546: LD_INT 5
37548: PPUSH
37549: CALL_OW 12
37553: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
37554: LD_ADDR_VAR 0 12
37558: PUSH
37559: LD_INT 2
37561: PPUSH
37562: LD_INT 6
37564: PPUSH
37565: CALL_OW 12
37569: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
37570: LD_ADDR_VAR 0 9
37574: PUSH
37575: LD_VAR 0 2
37579: PPUSH
37580: LD_VAR 0 11
37584: PPUSH
37585: LD_VAR 0 12
37589: PPUSH
37590: CALL_OW 272
37594: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
37595: LD_ADDR_VAR 0 10
37599: PUSH
37600: LD_VAR 0 3
37604: PPUSH
37605: LD_VAR 0 11
37609: PPUSH
37610: LD_VAR 0 12
37614: PPUSH
37615: CALL_OW 273
37619: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
37620: LD_VAR 0 9
37624: PPUSH
37625: LD_VAR 0 10
37629: PPUSH
37630: CALL_OW 488
37634: PUSH
37635: LD_VAR 0 9
37639: PUSH
37640: LD_VAR 0 10
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: LD_VAR 0 7
37653: IN
37654: NOT
37655: AND
37656: PUSH
37657: LD_VAR 0 9
37661: PPUSH
37662: LD_VAR 0 10
37666: PPUSH
37667: CALL_OW 458
37671: NOT
37672: AND
37673: IFFALSE 37715
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
37675: LD_ADDR_VAR 0 7
37679: PUSH
37680: LD_VAR 0 7
37684: PPUSH
37685: LD_VAR 0 7
37689: PUSH
37690: LD_INT 1
37692: PLUS
37693: PPUSH
37694: LD_VAR 0 9
37698: PUSH
37699: LD_VAR 0 10
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: PPUSH
37708: CALL_OW 1
37712: ST_TO_ADDR
37713: GO 37729
// i := i - 1 ;
37715: LD_ADDR_VAR 0 5
37719: PUSH
37720: LD_VAR 0 5
37724: PUSH
37725: LD_INT 1
37727: MINUS
37728: ST_TO_ADDR
// end ;
37729: GO 37535
37731: POP
37732: POP
// for i in tmp do
37733: LD_ADDR_VAR 0 5
37737: PUSH
37738: LD_VAR 0 7
37742: PUSH
37743: FOR_IN
37744: IFFALSE 37782
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
37746: LD_VAR 0 1
37750: PPUSH
37751: LD_VAR 0 5
37755: PUSH
37756: LD_INT 1
37758: ARRAY
37759: PPUSH
37760: LD_VAR 0 5
37764: PUSH
37765: LD_INT 2
37767: ARRAY
37768: PPUSH
37769: CALL 36724 0 3
37773: NOT
37774: IFFALSE 37780
// exit ;
37776: POP
37777: POP
37778: GO 37784
37780: GO 37743
37782: POP
37783: POP
// end ;
37784: LD_VAR 0 4
37788: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
37789: LD_INT 0
37791: PPUSH
37792: PPUSH
37793: PPUSH
37794: PPUSH
37795: PPUSH
37796: PPUSH
37797: PPUSH
// if not GetClass ( unit ) = class_sniper then
37798: LD_VAR 0 1
37802: PPUSH
37803: CALL_OW 257
37807: PUSH
37808: LD_INT 5
37810: EQUAL
37811: NOT
37812: IFFALSE 37816
// exit ;
37814: GO 38204
// dist := 8 ;
37816: LD_ADDR_VAR 0 5
37820: PUSH
37821: LD_INT 8
37823: ST_TO_ADDR
// viewRange := 12 ;
37824: LD_ADDR_VAR 0 7
37828: PUSH
37829: LD_INT 12
37831: ST_TO_ADDR
// side := GetSide ( unit ) ;
37832: LD_ADDR_VAR 0 6
37836: PUSH
37837: LD_VAR 0 1
37841: PPUSH
37842: CALL_OW 255
37846: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37847: LD_INT 61
37849: PPUSH
37850: LD_VAR 0 6
37854: PPUSH
37855: CALL_OW 321
37859: PUSH
37860: LD_INT 2
37862: EQUAL
37863: IFFALSE 37873
// viewRange := 16 ;
37865: LD_ADDR_VAR 0 7
37869: PUSH
37870: LD_INT 16
37872: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
37873: LD_VAR 0 1
37877: PPUSH
37878: LD_VAR 0 2
37882: PPUSH
37883: LD_VAR 0 3
37887: PPUSH
37888: CALL_OW 297
37892: PUSH
37893: LD_VAR 0 5
37897: GREATER
37898: IFFALSE 37977
// begin ComMoveXY ( unit , x , y ) ;
37900: LD_VAR 0 1
37904: PPUSH
37905: LD_VAR 0 2
37909: PPUSH
37910: LD_VAR 0 3
37914: PPUSH
37915: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37919: LD_INT 35
37921: PPUSH
37922: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37926: LD_VAR 0 1
37930: PPUSH
37931: LD_VAR 0 2
37935: PPUSH
37936: LD_VAR 0 3
37940: PPUSH
37941: CALL 73699 0 3
37945: NOT
37946: IFFALSE 37950
// exit ;
37948: GO 38204
// until GetDistUnitXY ( unit , x , y ) < dist ;
37950: LD_VAR 0 1
37954: PPUSH
37955: LD_VAR 0 2
37959: PPUSH
37960: LD_VAR 0 3
37964: PPUSH
37965: CALL_OW 297
37969: PUSH
37970: LD_VAR 0 5
37974: LESS
37975: IFFALSE 37919
// end ; ComTurnXY ( unit , x , y ) ;
37977: LD_VAR 0 1
37981: PPUSH
37982: LD_VAR 0 2
37986: PPUSH
37987: LD_VAR 0 3
37991: PPUSH
37992: CALL_OW 118
// wait ( 5 ) ;
37996: LD_INT 5
37998: PPUSH
37999: CALL_OW 67
// _d := GetDir ( unit ) ;
38003: LD_ADDR_VAR 0 10
38007: PUSH
38008: LD_VAR 0 1
38012: PPUSH
38013: CALL_OW 254
38017: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38018: LD_ADDR_VAR 0 8
38022: PUSH
38023: LD_VAR 0 1
38027: PPUSH
38028: CALL_OW 250
38032: PPUSH
38033: LD_VAR 0 10
38037: PPUSH
38038: LD_VAR 0 5
38042: PPUSH
38043: CALL_OW 272
38047: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38048: LD_ADDR_VAR 0 9
38052: PUSH
38053: LD_VAR 0 1
38057: PPUSH
38058: CALL_OW 251
38062: PPUSH
38063: LD_VAR 0 10
38067: PPUSH
38068: LD_VAR 0 5
38072: PPUSH
38073: CALL_OW 273
38077: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38078: LD_VAR 0 8
38082: PPUSH
38083: LD_VAR 0 9
38087: PPUSH
38088: CALL_OW 488
38092: NOT
38093: IFFALSE 38097
// exit ;
38095: GO 38204
// ComAnimCustom ( unit , 1 ) ;
38097: LD_VAR 0 1
38101: PPUSH
38102: LD_INT 1
38104: PPUSH
38105: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38109: LD_VAR 0 8
38113: PPUSH
38114: LD_VAR 0 9
38118: PPUSH
38119: LD_VAR 0 6
38123: PPUSH
38124: LD_VAR 0 7
38128: PPUSH
38129: CALL_OW 330
// repeat wait ( 1 ) ;
38133: LD_INT 1
38135: PPUSH
38136: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
38140: LD_VAR 0 1
38144: PPUSH
38145: CALL_OW 316
38149: PUSH
38150: LD_VAR 0 1
38154: PPUSH
38155: CALL_OW 314
38159: OR
38160: PUSH
38161: LD_VAR 0 1
38165: PPUSH
38166: CALL_OW 302
38170: NOT
38171: OR
38172: PUSH
38173: LD_VAR 0 1
38177: PPUSH
38178: CALL_OW 301
38182: OR
38183: IFFALSE 38133
// RemoveSeeing ( _x , _y , side ) ;
38185: LD_VAR 0 8
38189: PPUSH
38190: LD_VAR 0 9
38194: PPUSH
38195: LD_VAR 0 6
38199: PPUSH
38200: CALL_OW 331
// end ; end_of_file
38204: LD_VAR 0 4
38208: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38209: LD_INT 0
38211: PPUSH
38212: PPUSH
// if exist_mode then
38213: LD_VAR 0 2
38217: IFFALSE 38242
// unit := CreateCharacter ( prefix & ident ) else
38219: LD_ADDR_VAR 0 5
38223: PUSH
38224: LD_VAR 0 3
38228: PUSH
38229: LD_VAR 0 1
38233: STR
38234: PPUSH
38235: CALL_OW 34
38239: ST_TO_ADDR
38240: GO 38257
// unit := NewCharacter ( ident ) ;
38242: LD_ADDR_VAR 0 5
38246: PUSH
38247: LD_VAR 0 1
38251: PPUSH
38252: CALL_OW 25
38256: ST_TO_ADDR
// result := unit ;
38257: LD_ADDR_VAR 0 4
38261: PUSH
38262: LD_VAR 0 5
38266: ST_TO_ADDR
// end ;
38267: LD_VAR 0 4
38271: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38272: LD_INT 0
38274: PPUSH
38275: PPUSH
// if not side or not nation then
38276: LD_VAR 0 1
38280: NOT
38281: PUSH
38282: LD_VAR 0 2
38286: NOT
38287: OR
38288: IFFALSE 38292
// exit ;
38290: GO 39060
// case nation of nation_american :
38292: LD_VAR 0 2
38296: PUSH
38297: LD_INT 1
38299: DOUBLE
38300: EQUAL
38301: IFTRUE 38305
38303: GO 38519
38305: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38306: LD_ADDR_VAR 0 4
38310: PUSH
38311: LD_INT 35
38313: PUSH
38314: LD_INT 45
38316: PUSH
38317: LD_INT 46
38319: PUSH
38320: LD_INT 47
38322: PUSH
38323: LD_INT 82
38325: PUSH
38326: LD_INT 83
38328: PUSH
38329: LD_INT 84
38331: PUSH
38332: LD_INT 85
38334: PUSH
38335: LD_INT 86
38337: PUSH
38338: LD_INT 1
38340: PUSH
38341: LD_INT 2
38343: PUSH
38344: LD_INT 6
38346: PUSH
38347: LD_INT 15
38349: PUSH
38350: LD_INT 16
38352: PUSH
38353: LD_INT 7
38355: PUSH
38356: LD_INT 12
38358: PUSH
38359: LD_INT 13
38361: PUSH
38362: LD_INT 10
38364: PUSH
38365: LD_INT 14
38367: PUSH
38368: LD_INT 20
38370: PUSH
38371: LD_INT 21
38373: PUSH
38374: LD_INT 22
38376: PUSH
38377: LD_INT 25
38379: PUSH
38380: LD_INT 32
38382: PUSH
38383: LD_INT 27
38385: PUSH
38386: LD_INT 36
38388: PUSH
38389: LD_INT 69
38391: PUSH
38392: LD_INT 39
38394: PUSH
38395: LD_INT 34
38397: PUSH
38398: LD_INT 40
38400: PUSH
38401: LD_INT 48
38403: PUSH
38404: LD_INT 49
38406: PUSH
38407: LD_INT 50
38409: PUSH
38410: LD_INT 51
38412: PUSH
38413: LD_INT 52
38415: PUSH
38416: LD_INT 53
38418: PUSH
38419: LD_INT 54
38421: PUSH
38422: LD_INT 55
38424: PUSH
38425: LD_INT 56
38427: PUSH
38428: LD_INT 57
38430: PUSH
38431: LD_INT 58
38433: PUSH
38434: LD_INT 59
38436: PUSH
38437: LD_INT 60
38439: PUSH
38440: LD_INT 61
38442: PUSH
38443: LD_INT 62
38445: PUSH
38446: LD_INT 80
38448: PUSH
38449: LD_INT 82
38451: PUSH
38452: LD_INT 83
38454: PUSH
38455: LD_INT 84
38457: PUSH
38458: LD_INT 85
38460: PUSH
38461: LD_INT 86
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: LIST
38508: LIST
38509: LIST
38510: LIST
38511: LIST
38512: LIST
38513: LIST
38514: LIST
38515: LIST
38516: ST_TO_ADDR
38517: GO 38984
38519: LD_INT 2
38521: DOUBLE
38522: EQUAL
38523: IFTRUE 38527
38525: GO 38753
38527: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
38528: LD_ADDR_VAR 0 4
38532: PUSH
38533: LD_INT 35
38535: PUSH
38536: LD_INT 45
38538: PUSH
38539: LD_INT 46
38541: PUSH
38542: LD_INT 47
38544: PUSH
38545: LD_INT 82
38547: PUSH
38548: LD_INT 83
38550: PUSH
38551: LD_INT 84
38553: PUSH
38554: LD_INT 85
38556: PUSH
38557: LD_INT 87
38559: PUSH
38560: LD_INT 70
38562: PUSH
38563: LD_INT 1
38565: PUSH
38566: LD_INT 11
38568: PUSH
38569: LD_INT 3
38571: PUSH
38572: LD_INT 4
38574: PUSH
38575: LD_INT 5
38577: PUSH
38578: LD_INT 6
38580: PUSH
38581: LD_INT 15
38583: PUSH
38584: LD_INT 18
38586: PUSH
38587: LD_INT 7
38589: PUSH
38590: LD_INT 17
38592: PUSH
38593: LD_INT 8
38595: PUSH
38596: LD_INT 20
38598: PUSH
38599: LD_INT 21
38601: PUSH
38602: LD_INT 22
38604: PUSH
38605: LD_INT 72
38607: PUSH
38608: LD_INT 26
38610: PUSH
38611: LD_INT 69
38613: PUSH
38614: LD_INT 39
38616: PUSH
38617: LD_INT 40
38619: PUSH
38620: LD_INT 41
38622: PUSH
38623: LD_INT 42
38625: PUSH
38626: LD_INT 43
38628: PUSH
38629: LD_INT 48
38631: PUSH
38632: LD_INT 49
38634: PUSH
38635: LD_INT 50
38637: PUSH
38638: LD_INT 51
38640: PUSH
38641: LD_INT 52
38643: PUSH
38644: LD_INT 53
38646: PUSH
38647: LD_INT 54
38649: PUSH
38650: LD_INT 55
38652: PUSH
38653: LD_INT 56
38655: PUSH
38656: LD_INT 60
38658: PUSH
38659: LD_INT 61
38661: PUSH
38662: LD_INT 62
38664: PUSH
38665: LD_INT 66
38667: PUSH
38668: LD_INT 67
38670: PUSH
38671: LD_INT 68
38673: PUSH
38674: LD_INT 81
38676: PUSH
38677: LD_INT 82
38679: PUSH
38680: LD_INT 83
38682: PUSH
38683: LD_INT 84
38685: PUSH
38686: LD_INT 85
38688: PUSH
38689: LD_INT 87
38691: PUSH
38692: LD_INT 88
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: LIST
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: LIST
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: ST_TO_ADDR
38751: GO 38984
38753: LD_INT 3
38755: DOUBLE
38756: EQUAL
38757: IFTRUE 38761
38759: GO 38983
38761: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
38762: LD_ADDR_VAR 0 4
38766: PUSH
38767: LD_INT 46
38769: PUSH
38770: LD_INT 47
38772: PUSH
38773: LD_INT 1
38775: PUSH
38776: LD_INT 2
38778: PUSH
38779: LD_INT 82
38781: PUSH
38782: LD_INT 83
38784: PUSH
38785: LD_INT 84
38787: PUSH
38788: LD_INT 85
38790: PUSH
38791: LD_INT 86
38793: PUSH
38794: LD_INT 11
38796: PUSH
38797: LD_INT 9
38799: PUSH
38800: LD_INT 20
38802: PUSH
38803: LD_INT 19
38805: PUSH
38806: LD_INT 21
38808: PUSH
38809: LD_INT 24
38811: PUSH
38812: LD_INT 22
38814: PUSH
38815: LD_INT 25
38817: PUSH
38818: LD_INT 28
38820: PUSH
38821: LD_INT 29
38823: PUSH
38824: LD_INT 30
38826: PUSH
38827: LD_INT 31
38829: PUSH
38830: LD_INT 37
38832: PUSH
38833: LD_INT 38
38835: PUSH
38836: LD_INT 32
38838: PUSH
38839: LD_INT 27
38841: PUSH
38842: LD_INT 33
38844: PUSH
38845: LD_INT 69
38847: PUSH
38848: LD_INT 39
38850: PUSH
38851: LD_INT 34
38853: PUSH
38854: LD_INT 40
38856: PUSH
38857: LD_INT 71
38859: PUSH
38860: LD_INT 23
38862: PUSH
38863: LD_INT 44
38865: PUSH
38866: LD_INT 48
38868: PUSH
38869: LD_INT 49
38871: PUSH
38872: LD_INT 50
38874: PUSH
38875: LD_INT 51
38877: PUSH
38878: LD_INT 52
38880: PUSH
38881: LD_INT 53
38883: PUSH
38884: LD_INT 54
38886: PUSH
38887: LD_INT 55
38889: PUSH
38890: LD_INT 56
38892: PUSH
38893: LD_INT 57
38895: PUSH
38896: LD_INT 58
38898: PUSH
38899: LD_INT 59
38901: PUSH
38902: LD_INT 63
38904: PUSH
38905: LD_INT 64
38907: PUSH
38908: LD_INT 65
38910: PUSH
38911: LD_INT 82
38913: PUSH
38914: LD_INT 83
38916: PUSH
38917: LD_INT 84
38919: PUSH
38920: LD_INT 85
38922: PUSH
38923: LD_INT 86
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: ST_TO_ADDR
38981: GO 38984
38983: POP
// if state > - 1 and state < 3 then
38984: LD_VAR 0 3
38988: PUSH
38989: LD_INT 1
38991: NEG
38992: GREATER
38993: PUSH
38994: LD_VAR 0 3
38998: PUSH
38999: LD_INT 3
39001: LESS
39002: AND
39003: IFFALSE 39060
// for i in result do
39005: LD_ADDR_VAR 0 5
39009: PUSH
39010: LD_VAR 0 4
39014: PUSH
39015: FOR_IN
39016: IFFALSE 39058
// if GetTech ( i , side ) <> state then
39018: LD_VAR 0 5
39022: PPUSH
39023: LD_VAR 0 1
39027: PPUSH
39028: CALL_OW 321
39032: PUSH
39033: LD_VAR 0 3
39037: NONEQUAL
39038: IFFALSE 39056
// result := result diff i ;
39040: LD_ADDR_VAR 0 4
39044: PUSH
39045: LD_VAR 0 4
39049: PUSH
39050: LD_VAR 0 5
39054: DIFF
39055: ST_TO_ADDR
39056: GO 39015
39058: POP
39059: POP
// end ;
39060: LD_VAR 0 4
39064: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39065: LD_INT 0
39067: PPUSH
39068: PPUSH
39069: PPUSH
// result := true ;
39070: LD_ADDR_VAR 0 3
39074: PUSH
39075: LD_INT 1
39077: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39078: LD_ADDR_VAR 0 5
39082: PUSH
39083: LD_VAR 0 2
39087: PPUSH
39088: CALL_OW 480
39092: ST_TO_ADDR
// if not tmp then
39093: LD_VAR 0 5
39097: NOT
39098: IFFALSE 39102
// exit ;
39100: GO 39151
// for i in tmp do
39102: LD_ADDR_VAR 0 4
39106: PUSH
39107: LD_VAR 0 5
39111: PUSH
39112: FOR_IN
39113: IFFALSE 39149
// if GetTech ( i , side ) <> state_researched then
39115: LD_VAR 0 4
39119: PPUSH
39120: LD_VAR 0 1
39124: PPUSH
39125: CALL_OW 321
39129: PUSH
39130: LD_INT 2
39132: NONEQUAL
39133: IFFALSE 39147
// begin result := false ;
39135: LD_ADDR_VAR 0 3
39139: PUSH
39140: LD_INT 0
39142: ST_TO_ADDR
// exit ;
39143: POP
39144: POP
39145: GO 39151
// end ;
39147: GO 39112
39149: POP
39150: POP
// end ;
39151: LD_VAR 0 3
39155: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39156: LD_INT 0
39158: PPUSH
39159: PPUSH
39160: PPUSH
39161: PPUSH
39162: PPUSH
39163: PPUSH
39164: PPUSH
39165: PPUSH
39166: PPUSH
39167: PPUSH
39168: PPUSH
39169: PPUSH
39170: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39171: LD_VAR 0 1
39175: NOT
39176: PUSH
39177: LD_VAR 0 1
39181: PPUSH
39182: CALL_OW 257
39186: PUSH
39187: LD_INT 9
39189: NONEQUAL
39190: OR
39191: IFFALSE 39195
// exit ;
39193: GO 39768
// side := GetSide ( unit ) ;
39195: LD_ADDR_VAR 0 9
39199: PUSH
39200: LD_VAR 0 1
39204: PPUSH
39205: CALL_OW 255
39209: ST_TO_ADDR
// tech_space := tech_spacanom ;
39210: LD_ADDR_VAR 0 12
39214: PUSH
39215: LD_INT 29
39217: ST_TO_ADDR
// tech_time := tech_taurad ;
39218: LD_ADDR_VAR 0 13
39222: PUSH
39223: LD_INT 28
39225: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39226: LD_ADDR_VAR 0 11
39230: PUSH
39231: LD_VAR 0 1
39235: PPUSH
39236: CALL_OW 310
39240: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39241: LD_VAR 0 11
39245: PPUSH
39246: CALL_OW 247
39250: PUSH
39251: LD_INT 2
39253: EQUAL
39254: IFFALSE 39258
// exit ;
39256: GO 39768
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39258: LD_ADDR_VAR 0 8
39262: PUSH
39263: LD_INT 81
39265: PUSH
39266: LD_VAR 0 9
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 3
39277: PUSH
39278: LD_INT 21
39280: PUSH
39281: LD_INT 3
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PPUSH
39296: CALL_OW 69
39300: ST_TO_ADDR
// if not tmp then
39301: LD_VAR 0 8
39305: NOT
39306: IFFALSE 39310
// exit ;
39308: GO 39768
// if in_unit then
39310: LD_VAR 0 11
39314: IFFALSE 39338
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39316: LD_ADDR_VAR 0 10
39320: PUSH
39321: LD_VAR 0 8
39325: PPUSH
39326: LD_VAR 0 11
39330: PPUSH
39331: CALL_OW 74
39335: ST_TO_ADDR
39336: GO 39358
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39338: LD_ADDR_VAR 0 10
39342: PUSH
39343: LD_VAR 0 8
39347: PPUSH
39348: LD_VAR 0 1
39352: PPUSH
39353: CALL_OW 74
39357: ST_TO_ADDR
// if not enemy then
39358: LD_VAR 0 10
39362: NOT
39363: IFFALSE 39367
// exit ;
39365: GO 39768
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39367: LD_VAR 0 11
39371: PUSH
39372: LD_VAR 0 11
39376: PPUSH
39377: LD_VAR 0 10
39381: PPUSH
39382: CALL_OW 296
39386: PUSH
39387: LD_INT 13
39389: GREATER
39390: AND
39391: PUSH
39392: LD_VAR 0 1
39396: PPUSH
39397: LD_VAR 0 10
39401: PPUSH
39402: CALL_OW 296
39406: PUSH
39407: LD_INT 12
39409: GREATER
39410: OR
39411: IFFALSE 39415
// exit ;
39413: GO 39768
// missile := [ 1 ] ;
39415: LD_ADDR_VAR 0 14
39419: PUSH
39420: LD_INT 1
39422: PUSH
39423: EMPTY
39424: LIST
39425: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39426: LD_VAR 0 9
39430: PPUSH
39431: LD_VAR 0 12
39435: PPUSH
39436: CALL_OW 325
39440: IFFALSE 39469
// missile := Replace ( missile , missile + 1 , 2 ) ;
39442: LD_ADDR_VAR 0 14
39446: PUSH
39447: LD_VAR 0 14
39451: PPUSH
39452: LD_VAR 0 14
39456: PUSH
39457: LD_INT 1
39459: PLUS
39460: PPUSH
39461: LD_INT 2
39463: PPUSH
39464: CALL_OW 1
39468: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39469: LD_VAR 0 9
39473: PPUSH
39474: LD_VAR 0 13
39478: PPUSH
39479: CALL_OW 325
39483: PUSH
39484: LD_VAR 0 10
39488: PPUSH
39489: CALL_OW 255
39493: PPUSH
39494: LD_VAR 0 13
39498: PPUSH
39499: CALL_OW 325
39503: NOT
39504: AND
39505: IFFALSE 39534
// missile := Replace ( missile , missile + 1 , 3 ) ;
39507: LD_ADDR_VAR 0 14
39511: PUSH
39512: LD_VAR 0 14
39516: PPUSH
39517: LD_VAR 0 14
39521: PUSH
39522: LD_INT 1
39524: PLUS
39525: PPUSH
39526: LD_INT 3
39528: PPUSH
39529: CALL_OW 1
39533: ST_TO_ADDR
// if missile < 2 then
39534: LD_VAR 0 14
39538: PUSH
39539: LD_INT 2
39541: LESS
39542: IFFALSE 39546
// exit ;
39544: GO 39768
// x := GetX ( enemy ) ;
39546: LD_ADDR_VAR 0 4
39550: PUSH
39551: LD_VAR 0 10
39555: PPUSH
39556: CALL_OW 250
39560: ST_TO_ADDR
// y := GetY ( enemy ) ;
39561: LD_ADDR_VAR 0 5
39565: PUSH
39566: LD_VAR 0 10
39570: PPUSH
39571: CALL_OW 251
39575: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39576: LD_ADDR_VAR 0 6
39580: PUSH
39581: LD_VAR 0 4
39585: PUSH
39586: LD_INT 1
39588: NEG
39589: PPUSH
39590: LD_INT 1
39592: PPUSH
39593: CALL_OW 12
39597: PLUS
39598: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39599: LD_ADDR_VAR 0 7
39603: PUSH
39604: LD_VAR 0 5
39608: PUSH
39609: LD_INT 1
39611: NEG
39612: PPUSH
39613: LD_INT 1
39615: PPUSH
39616: CALL_OW 12
39620: PLUS
39621: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39622: LD_VAR 0 6
39626: PPUSH
39627: LD_VAR 0 7
39631: PPUSH
39632: CALL_OW 488
39636: NOT
39637: IFFALSE 39659
// begin _x := x ;
39639: LD_ADDR_VAR 0 6
39643: PUSH
39644: LD_VAR 0 4
39648: ST_TO_ADDR
// _y := y ;
39649: LD_ADDR_VAR 0 7
39653: PUSH
39654: LD_VAR 0 5
39658: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39659: LD_ADDR_VAR 0 3
39663: PUSH
39664: LD_INT 1
39666: PPUSH
39667: LD_VAR 0 14
39671: PPUSH
39672: CALL_OW 12
39676: ST_TO_ADDR
// case i of 1 :
39677: LD_VAR 0 3
39681: PUSH
39682: LD_INT 1
39684: DOUBLE
39685: EQUAL
39686: IFTRUE 39690
39688: GO 39707
39690: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39691: LD_VAR 0 1
39695: PPUSH
39696: LD_VAR 0 10
39700: PPUSH
39701: CALL_OW 115
39705: GO 39768
39707: LD_INT 2
39709: DOUBLE
39710: EQUAL
39711: IFTRUE 39715
39713: GO 39737
39715: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39716: LD_VAR 0 1
39720: PPUSH
39721: LD_VAR 0 6
39725: PPUSH
39726: LD_VAR 0 7
39730: PPUSH
39731: CALL_OW 153
39735: GO 39768
39737: LD_INT 3
39739: DOUBLE
39740: EQUAL
39741: IFTRUE 39745
39743: GO 39767
39745: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39746: LD_VAR 0 1
39750: PPUSH
39751: LD_VAR 0 6
39755: PPUSH
39756: LD_VAR 0 7
39760: PPUSH
39761: CALL_OW 154
39765: GO 39768
39767: POP
// end ;
39768: LD_VAR 0 2
39772: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39773: LD_INT 0
39775: PPUSH
39776: PPUSH
39777: PPUSH
39778: PPUSH
39779: PPUSH
39780: PPUSH
// if not unit or not building then
39781: LD_VAR 0 1
39785: NOT
39786: PUSH
39787: LD_VAR 0 2
39791: NOT
39792: OR
39793: IFFALSE 39797
// exit ;
39795: GO 39955
// x := GetX ( building ) ;
39797: LD_ADDR_VAR 0 5
39801: PUSH
39802: LD_VAR 0 2
39806: PPUSH
39807: CALL_OW 250
39811: ST_TO_ADDR
// y := GetY ( building ) ;
39812: LD_ADDR_VAR 0 6
39816: PUSH
39817: LD_VAR 0 2
39821: PPUSH
39822: CALL_OW 251
39826: ST_TO_ADDR
// for i = 0 to 5 do
39827: LD_ADDR_VAR 0 4
39831: PUSH
39832: DOUBLE
39833: LD_INT 0
39835: DEC
39836: ST_TO_ADDR
39837: LD_INT 5
39839: PUSH
39840: FOR_TO
39841: IFFALSE 39953
// begin _x := ShiftX ( x , i , 3 ) ;
39843: LD_ADDR_VAR 0 7
39847: PUSH
39848: LD_VAR 0 5
39852: PPUSH
39853: LD_VAR 0 4
39857: PPUSH
39858: LD_INT 3
39860: PPUSH
39861: CALL_OW 272
39865: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39866: LD_ADDR_VAR 0 8
39870: PUSH
39871: LD_VAR 0 6
39875: PPUSH
39876: LD_VAR 0 4
39880: PPUSH
39881: LD_INT 3
39883: PPUSH
39884: CALL_OW 273
39888: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39889: LD_VAR 0 7
39893: PPUSH
39894: LD_VAR 0 8
39898: PPUSH
39899: CALL_OW 488
39903: NOT
39904: IFFALSE 39908
// continue ;
39906: GO 39840
// if HexInfo ( _x , _y ) = 0 then
39908: LD_VAR 0 7
39912: PPUSH
39913: LD_VAR 0 8
39917: PPUSH
39918: CALL_OW 428
39922: PUSH
39923: LD_INT 0
39925: EQUAL
39926: IFFALSE 39951
// begin ComMoveXY ( unit , _x , _y ) ;
39928: LD_VAR 0 1
39932: PPUSH
39933: LD_VAR 0 7
39937: PPUSH
39938: LD_VAR 0 8
39942: PPUSH
39943: CALL_OW 111
// exit ;
39947: POP
39948: POP
39949: GO 39955
// end ; end ;
39951: GO 39840
39953: POP
39954: POP
// end ;
39955: LD_VAR 0 3
39959: RET
// export function ScanBase ( side , base_area ) ; begin
39960: LD_INT 0
39962: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39963: LD_ADDR_VAR 0 3
39967: PUSH
39968: LD_VAR 0 2
39972: PPUSH
39973: LD_INT 81
39975: PUSH
39976: LD_VAR 0 1
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PPUSH
39985: CALL_OW 70
39989: ST_TO_ADDR
// end ;
39990: LD_VAR 0 3
39994: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39995: LD_INT 0
39997: PPUSH
39998: PPUSH
39999: PPUSH
40000: PPUSH
// result := false ;
40001: LD_ADDR_VAR 0 2
40005: PUSH
40006: LD_INT 0
40008: ST_TO_ADDR
// side := GetSide ( unit ) ;
40009: LD_ADDR_VAR 0 3
40013: PUSH
40014: LD_VAR 0 1
40018: PPUSH
40019: CALL_OW 255
40023: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40024: LD_ADDR_VAR 0 4
40028: PUSH
40029: LD_VAR 0 1
40033: PPUSH
40034: CALL_OW 248
40038: ST_TO_ADDR
// case nat of 1 :
40039: LD_VAR 0 4
40043: PUSH
40044: LD_INT 1
40046: DOUBLE
40047: EQUAL
40048: IFTRUE 40052
40050: GO 40063
40052: POP
// tech := tech_lassight ; 2 :
40053: LD_ADDR_VAR 0 5
40057: PUSH
40058: LD_INT 12
40060: ST_TO_ADDR
40061: GO 40102
40063: LD_INT 2
40065: DOUBLE
40066: EQUAL
40067: IFTRUE 40071
40069: GO 40082
40071: POP
// tech := tech_mortar ; 3 :
40072: LD_ADDR_VAR 0 5
40076: PUSH
40077: LD_INT 41
40079: ST_TO_ADDR
40080: GO 40102
40082: LD_INT 3
40084: DOUBLE
40085: EQUAL
40086: IFTRUE 40090
40088: GO 40101
40090: POP
// tech := tech_bazooka ; end ;
40091: LD_ADDR_VAR 0 5
40095: PUSH
40096: LD_INT 44
40098: ST_TO_ADDR
40099: GO 40102
40101: POP
// if Researched ( side , tech ) then
40102: LD_VAR 0 3
40106: PPUSH
40107: LD_VAR 0 5
40111: PPUSH
40112: CALL_OW 325
40116: IFFALSE 40143
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40118: LD_ADDR_VAR 0 2
40122: PUSH
40123: LD_INT 5
40125: PUSH
40126: LD_INT 8
40128: PUSH
40129: LD_INT 9
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: LIST
40136: PUSH
40137: LD_VAR 0 4
40141: ARRAY
40142: ST_TO_ADDR
// end ;
40143: LD_VAR 0 2
40147: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40148: LD_INT 0
40150: PPUSH
40151: PPUSH
40152: PPUSH
// if not mines then
40153: LD_VAR 0 2
40157: NOT
40158: IFFALSE 40162
// exit ;
40160: GO 40306
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40162: LD_ADDR_VAR 0 5
40166: PUSH
40167: LD_INT 81
40169: PUSH
40170: LD_VAR 0 1
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 3
40181: PUSH
40182: LD_INT 21
40184: PUSH
40185: LD_INT 3
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PPUSH
40200: CALL_OW 69
40204: ST_TO_ADDR
// for i in mines do
40205: LD_ADDR_VAR 0 4
40209: PUSH
40210: LD_VAR 0 2
40214: PUSH
40215: FOR_IN
40216: IFFALSE 40304
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40218: LD_VAR 0 4
40222: PUSH
40223: LD_INT 1
40225: ARRAY
40226: PPUSH
40227: LD_VAR 0 4
40231: PUSH
40232: LD_INT 2
40234: ARRAY
40235: PPUSH
40236: CALL_OW 458
40240: NOT
40241: IFFALSE 40245
// continue ;
40243: GO 40215
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40245: LD_VAR 0 4
40249: PUSH
40250: LD_INT 1
40252: ARRAY
40253: PPUSH
40254: LD_VAR 0 4
40258: PUSH
40259: LD_INT 2
40261: ARRAY
40262: PPUSH
40263: CALL_OW 428
40267: PUSH
40268: LD_VAR 0 5
40272: IN
40273: IFFALSE 40302
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40275: LD_VAR 0 4
40279: PUSH
40280: LD_INT 1
40282: ARRAY
40283: PPUSH
40284: LD_VAR 0 4
40288: PUSH
40289: LD_INT 2
40291: ARRAY
40292: PPUSH
40293: LD_VAR 0 1
40297: PPUSH
40298: CALL_OW 456
// end ;
40302: GO 40215
40304: POP
40305: POP
// end ;
40306: LD_VAR 0 3
40310: RET
// export function Count ( array ) ; var i ; begin
40311: LD_INT 0
40313: PPUSH
40314: PPUSH
// result := 0 ;
40315: LD_ADDR_VAR 0 2
40319: PUSH
40320: LD_INT 0
40322: ST_TO_ADDR
// for i in array do
40323: LD_ADDR_VAR 0 3
40327: PUSH
40328: LD_VAR 0 1
40332: PUSH
40333: FOR_IN
40334: IFFALSE 40358
// if i then
40336: LD_VAR 0 3
40340: IFFALSE 40356
// result := result + 1 ;
40342: LD_ADDR_VAR 0 2
40346: PUSH
40347: LD_VAR 0 2
40351: PUSH
40352: LD_INT 1
40354: PLUS
40355: ST_TO_ADDR
40356: GO 40333
40358: POP
40359: POP
// end ;
40360: LD_VAR 0 2
40364: RET
// export function IsEmpty ( building ) ; begin
40365: LD_INT 0
40367: PPUSH
// if not building then
40368: LD_VAR 0 1
40372: NOT
40373: IFFALSE 40377
// exit ;
40375: GO 40420
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40377: LD_ADDR_VAR 0 2
40381: PUSH
40382: LD_VAR 0 1
40386: PUSH
40387: LD_INT 22
40389: PUSH
40390: LD_VAR 0 1
40394: PPUSH
40395: CALL_OW 255
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 58
40406: PUSH
40407: EMPTY
40408: LIST
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PPUSH
40414: CALL_OW 69
40418: IN
40419: ST_TO_ADDR
// end ;
40420: LD_VAR 0 2
40424: RET
// export function IsNotFull ( building ) ; begin
40425: LD_INT 0
40427: PPUSH
// if not building then
40428: LD_VAR 0 1
40432: NOT
40433: IFFALSE 40437
// exit ;
40435: GO 40456
// result := UnitsInside ( building ) < 6 ;
40437: LD_ADDR_VAR 0 2
40441: PUSH
40442: LD_VAR 0 1
40446: PPUSH
40447: CALL_OW 313
40451: PUSH
40452: LD_INT 6
40454: LESS
40455: ST_TO_ADDR
// end ;
40456: LD_VAR 0 2
40460: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40461: LD_INT 0
40463: PPUSH
40464: PPUSH
40465: PPUSH
40466: PPUSH
// tmp := [ ] ;
40467: LD_ADDR_VAR 0 3
40471: PUSH
40472: EMPTY
40473: ST_TO_ADDR
// list := [ ] ;
40474: LD_ADDR_VAR 0 5
40478: PUSH
40479: EMPTY
40480: ST_TO_ADDR
// for i = 16 to 25 do
40481: LD_ADDR_VAR 0 4
40485: PUSH
40486: DOUBLE
40487: LD_INT 16
40489: DEC
40490: ST_TO_ADDR
40491: LD_INT 25
40493: PUSH
40494: FOR_TO
40495: IFFALSE 40568
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40497: LD_ADDR_VAR 0 3
40501: PUSH
40502: LD_VAR 0 3
40506: PUSH
40507: LD_INT 22
40509: PUSH
40510: LD_VAR 0 1
40514: PPUSH
40515: CALL_OW 255
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 91
40526: PUSH
40527: LD_VAR 0 1
40531: PUSH
40532: LD_INT 6
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 30
40542: PUSH
40543: LD_VAR 0 4
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: LIST
40556: PUSH
40557: EMPTY
40558: LIST
40559: PPUSH
40560: CALL_OW 69
40564: ADD
40565: ST_TO_ADDR
40566: GO 40494
40568: POP
40569: POP
// for i = 1 to tmp do
40570: LD_ADDR_VAR 0 4
40574: PUSH
40575: DOUBLE
40576: LD_INT 1
40578: DEC
40579: ST_TO_ADDR
40580: LD_VAR 0 3
40584: PUSH
40585: FOR_TO
40586: IFFALSE 40674
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40588: LD_ADDR_VAR 0 5
40592: PUSH
40593: LD_VAR 0 5
40597: PUSH
40598: LD_VAR 0 3
40602: PUSH
40603: LD_VAR 0 4
40607: ARRAY
40608: PPUSH
40609: CALL_OW 266
40613: PUSH
40614: LD_VAR 0 3
40618: PUSH
40619: LD_VAR 0 4
40623: ARRAY
40624: PPUSH
40625: CALL_OW 250
40629: PUSH
40630: LD_VAR 0 3
40634: PUSH
40635: LD_VAR 0 4
40639: ARRAY
40640: PPUSH
40641: CALL_OW 251
40645: PUSH
40646: LD_VAR 0 3
40650: PUSH
40651: LD_VAR 0 4
40655: ARRAY
40656: PPUSH
40657: CALL_OW 254
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: PUSH
40668: EMPTY
40669: LIST
40670: ADD
40671: ST_TO_ADDR
40672: GO 40585
40674: POP
40675: POP
// result := list ;
40676: LD_ADDR_VAR 0 2
40680: PUSH
40681: LD_VAR 0 5
40685: ST_TO_ADDR
// end ;
40686: LD_VAR 0 2
40690: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
40691: LD_INT 0
40693: PPUSH
40694: PPUSH
40695: PPUSH
40696: PPUSH
40697: PPUSH
40698: PPUSH
40699: PPUSH
// if not factory then
40700: LD_VAR 0 1
40704: NOT
40705: IFFALSE 40709
// exit ;
40707: GO 41302
// if control = control_apeman then
40709: LD_VAR 0 4
40713: PUSH
40714: LD_INT 5
40716: EQUAL
40717: IFFALSE 40826
// begin tmp := UnitsInside ( factory ) ;
40719: LD_ADDR_VAR 0 8
40723: PUSH
40724: LD_VAR 0 1
40728: PPUSH
40729: CALL_OW 313
40733: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
40734: LD_VAR 0 8
40738: PPUSH
40739: LD_INT 25
40741: PUSH
40742: LD_INT 12
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PPUSH
40749: CALL_OW 72
40753: NOT
40754: IFFALSE 40764
// control := control_manual ;
40756: LD_ADDR_VAR 0 4
40760: PUSH
40761: LD_INT 1
40763: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40764: LD_ADDR_VAR 0 8
40768: PUSH
40769: LD_VAR 0 1
40773: PPUSH
40774: CALL 40461 0 1
40778: ST_TO_ADDR
// if tmp then
40779: LD_VAR 0 8
40783: IFFALSE 40826
// begin for i in tmp do
40785: LD_ADDR_VAR 0 7
40789: PUSH
40790: LD_VAR 0 8
40794: PUSH
40795: FOR_IN
40796: IFFALSE 40824
// if i [ 1 ] = b_ext_radio then
40798: LD_VAR 0 7
40802: PUSH
40803: LD_INT 1
40805: ARRAY
40806: PUSH
40807: LD_INT 22
40809: EQUAL
40810: IFFALSE 40822
// begin control := control_remote ;
40812: LD_ADDR_VAR 0 4
40816: PUSH
40817: LD_INT 2
40819: ST_TO_ADDR
// break ;
40820: GO 40824
// end ;
40822: GO 40795
40824: POP
40825: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40826: LD_VAR 0 1
40830: PPUSH
40831: LD_VAR 0 2
40835: PPUSH
40836: LD_VAR 0 3
40840: PPUSH
40841: LD_VAR 0 4
40845: PPUSH
40846: LD_VAR 0 5
40850: PPUSH
40851: CALL_OW 448
40855: IFFALSE 40890
// begin result := [ chassis , engine , control , weapon ] ;
40857: LD_ADDR_VAR 0 6
40861: PUSH
40862: LD_VAR 0 2
40866: PUSH
40867: LD_VAR 0 3
40871: PUSH
40872: LD_VAR 0 4
40876: PUSH
40877: LD_VAR 0 5
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: ST_TO_ADDR
// exit ;
40888: GO 41302
// end ; _chassis := AvailableChassisList ( factory ) ;
40890: LD_ADDR_VAR 0 9
40894: PUSH
40895: LD_VAR 0 1
40899: PPUSH
40900: CALL_OW 475
40904: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40905: LD_ADDR_VAR 0 11
40909: PUSH
40910: LD_VAR 0 1
40914: PPUSH
40915: CALL_OW 476
40919: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40920: LD_ADDR_VAR 0 12
40924: PUSH
40925: LD_VAR 0 1
40929: PPUSH
40930: CALL_OW 477
40934: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40935: LD_ADDR_VAR 0 10
40939: PUSH
40940: LD_VAR 0 1
40944: PPUSH
40945: CALL_OW 478
40949: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40950: LD_VAR 0 9
40954: NOT
40955: PUSH
40956: LD_VAR 0 11
40960: NOT
40961: OR
40962: PUSH
40963: LD_VAR 0 12
40967: NOT
40968: OR
40969: PUSH
40970: LD_VAR 0 10
40974: NOT
40975: OR
40976: IFFALSE 41011
// begin result := [ chassis , engine , control , weapon ] ;
40978: LD_ADDR_VAR 0 6
40982: PUSH
40983: LD_VAR 0 2
40987: PUSH
40988: LD_VAR 0 3
40992: PUSH
40993: LD_VAR 0 4
40997: PUSH
40998: LD_VAR 0 5
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: ST_TO_ADDR
// exit ;
41009: GO 41302
// end ; if not chassis in _chassis then
41011: LD_VAR 0 2
41015: PUSH
41016: LD_VAR 0 9
41020: IN
41021: NOT
41022: IFFALSE 41048
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41024: LD_ADDR_VAR 0 2
41028: PUSH
41029: LD_VAR 0 9
41033: PUSH
41034: LD_INT 1
41036: PPUSH
41037: LD_VAR 0 9
41041: PPUSH
41042: CALL_OW 12
41046: ARRAY
41047: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41048: LD_VAR 0 2
41052: PPUSH
41053: LD_VAR 0 3
41057: PPUSH
41058: CALL 41307 0 2
41062: NOT
41063: IFFALSE 41122
// repeat engine := _engine [ 1 ] ;
41065: LD_ADDR_VAR 0 3
41069: PUSH
41070: LD_VAR 0 11
41074: PUSH
41075: LD_INT 1
41077: ARRAY
41078: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41079: LD_ADDR_VAR 0 11
41083: PUSH
41084: LD_VAR 0 11
41088: PPUSH
41089: LD_INT 1
41091: PPUSH
41092: CALL_OW 3
41096: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41097: LD_VAR 0 2
41101: PPUSH
41102: LD_VAR 0 3
41106: PPUSH
41107: CALL 41307 0 2
41111: PUSH
41112: LD_VAR 0 11
41116: PUSH
41117: EMPTY
41118: EQUAL
41119: OR
41120: IFFALSE 41065
// if not control in _control then
41122: LD_VAR 0 4
41126: PUSH
41127: LD_VAR 0 12
41131: IN
41132: NOT
41133: IFFALSE 41159
// control := _control [ rand ( 1 , _control ) ] ;
41135: LD_ADDR_VAR 0 4
41139: PUSH
41140: LD_VAR 0 12
41144: PUSH
41145: LD_INT 1
41147: PPUSH
41148: LD_VAR 0 12
41152: PPUSH
41153: CALL_OW 12
41157: ARRAY
41158: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41159: LD_VAR 0 2
41163: PPUSH
41164: LD_VAR 0 5
41168: PPUSH
41169: CALL 41527 0 2
41173: NOT
41174: IFFALSE 41233
// repeat weapon := _weapon [ 1 ] ;
41176: LD_ADDR_VAR 0 5
41180: PUSH
41181: LD_VAR 0 10
41185: PUSH
41186: LD_INT 1
41188: ARRAY
41189: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41190: LD_ADDR_VAR 0 10
41194: PUSH
41195: LD_VAR 0 10
41199: PPUSH
41200: LD_INT 1
41202: PPUSH
41203: CALL_OW 3
41207: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41208: LD_VAR 0 2
41212: PPUSH
41213: LD_VAR 0 5
41217: PPUSH
41218: CALL 41527 0 2
41222: PUSH
41223: LD_VAR 0 10
41227: PUSH
41228: EMPTY
41229: EQUAL
41230: OR
41231: IFFALSE 41176
// result := [ ] ;
41233: LD_ADDR_VAR 0 6
41237: PUSH
41238: EMPTY
41239: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41240: LD_VAR 0 1
41244: PPUSH
41245: LD_VAR 0 2
41249: PPUSH
41250: LD_VAR 0 3
41254: PPUSH
41255: LD_VAR 0 4
41259: PPUSH
41260: LD_VAR 0 5
41264: PPUSH
41265: CALL_OW 448
41269: IFFALSE 41302
// result := [ chassis , engine , control , weapon ] ;
41271: LD_ADDR_VAR 0 6
41275: PUSH
41276: LD_VAR 0 2
41280: PUSH
41281: LD_VAR 0 3
41285: PUSH
41286: LD_VAR 0 4
41290: PUSH
41291: LD_VAR 0 5
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: ST_TO_ADDR
// end ;
41302: LD_VAR 0 6
41306: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41307: LD_INT 0
41309: PPUSH
// if not chassis or not engine then
41310: LD_VAR 0 1
41314: NOT
41315: PUSH
41316: LD_VAR 0 2
41320: NOT
41321: OR
41322: IFFALSE 41326
// exit ;
41324: GO 41522
// case engine of engine_solar :
41326: LD_VAR 0 2
41330: PUSH
41331: LD_INT 2
41333: DOUBLE
41334: EQUAL
41335: IFTRUE 41339
41337: GO 41377
41339: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41340: LD_ADDR_VAR 0 3
41344: PUSH
41345: LD_INT 11
41347: PUSH
41348: LD_INT 12
41350: PUSH
41351: LD_INT 13
41353: PUSH
41354: LD_INT 14
41356: PUSH
41357: LD_INT 1
41359: PUSH
41360: LD_INT 2
41362: PUSH
41363: LD_INT 3
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: ST_TO_ADDR
41375: GO 41506
41377: LD_INT 1
41379: DOUBLE
41380: EQUAL
41381: IFTRUE 41385
41383: GO 41447
41385: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41386: LD_ADDR_VAR 0 3
41390: PUSH
41391: LD_INT 11
41393: PUSH
41394: LD_INT 12
41396: PUSH
41397: LD_INT 13
41399: PUSH
41400: LD_INT 14
41402: PUSH
41403: LD_INT 1
41405: PUSH
41406: LD_INT 2
41408: PUSH
41409: LD_INT 3
41411: PUSH
41412: LD_INT 4
41414: PUSH
41415: LD_INT 5
41417: PUSH
41418: LD_INT 21
41420: PUSH
41421: LD_INT 23
41423: PUSH
41424: LD_INT 22
41426: PUSH
41427: LD_INT 24
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: ST_TO_ADDR
41445: GO 41506
41447: LD_INT 3
41449: DOUBLE
41450: EQUAL
41451: IFTRUE 41455
41453: GO 41505
41455: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41456: LD_ADDR_VAR 0 3
41460: PUSH
41461: LD_INT 13
41463: PUSH
41464: LD_INT 14
41466: PUSH
41467: LD_INT 2
41469: PUSH
41470: LD_INT 3
41472: PUSH
41473: LD_INT 4
41475: PUSH
41476: LD_INT 5
41478: PUSH
41479: LD_INT 21
41481: PUSH
41482: LD_INT 22
41484: PUSH
41485: LD_INT 23
41487: PUSH
41488: LD_INT 24
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: ST_TO_ADDR
41503: GO 41506
41505: POP
// result := ( chassis in result ) ;
41506: LD_ADDR_VAR 0 3
41510: PUSH
41511: LD_VAR 0 1
41515: PUSH
41516: LD_VAR 0 3
41520: IN
41521: ST_TO_ADDR
// end ;
41522: LD_VAR 0 3
41526: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41527: LD_INT 0
41529: PPUSH
// if not chassis or not weapon then
41530: LD_VAR 0 1
41534: NOT
41535: PUSH
41536: LD_VAR 0 2
41540: NOT
41541: OR
41542: IFFALSE 41546
// exit ;
41544: GO 42608
// case weapon of us_machine_gun :
41546: LD_VAR 0 2
41550: PUSH
41551: LD_INT 2
41553: DOUBLE
41554: EQUAL
41555: IFTRUE 41559
41557: GO 41589
41559: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41560: LD_ADDR_VAR 0 3
41564: PUSH
41565: LD_INT 1
41567: PUSH
41568: LD_INT 2
41570: PUSH
41571: LD_INT 3
41573: PUSH
41574: LD_INT 4
41576: PUSH
41577: LD_INT 5
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: ST_TO_ADDR
41587: GO 42592
41589: LD_INT 3
41591: DOUBLE
41592: EQUAL
41593: IFTRUE 41597
41595: GO 41627
41597: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41598: LD_ADDR_VAR 0 3
41602: PUSH
41603: LD_INT 1
41605: PUSH
41606: LD_INT 2
41608: PUSH
41609: LD_INT 3
41611: PUSH
41612: LD_INT 4
41614: PUSH
41615: LD_INT 5
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: ST_TO_ADDR
41625: GO 42592
41627: LD_INT 11
41629: DOUBLE
41630: EQUAL
41631: IFTRUE 41635
41633: GO 41665
41635: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
41636: LD_ADDR_VAR 0 3
41640: PUSH
41641: LD_INT 1
41643: PUSH
41644: LD_INT 2
41646: PUSH
41647: LD_INT 3
41649: PUSH
41650: LD_INT 4
41652: PUSH
41653: LD_INT 5
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: ST_TO_ADDR
41663: GO 42592
41665: LD_INT 4
41667: DOUBLE
41668: EQUAL
41669: IFTRUE 41673
41671: GO 41699
41673: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
41674: LD_ADDR_VAR 0 3
41678: PUSH
41679: LD_INT 2
41681: PUSH
41682: LD_INT 3
41684: PUSH
41685: LD_INT 4
41687: PUSH
41688: LD_INT 5
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: ST_TO_ADDR
41697: GO 42592
41699: LD_INT 5
41701: DOUBLE
41702: EQUAL
41703: IFTRUE 41707
41705: GO 41733
41707: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
41708: LD_ADDR_VAR 0 3
41712: PUSH
41713: LD_INT 2
41715: PUSH
41716: LD_INT 3
41718: PUSH
41719: LD_INT 4
41721: PUSH
41722: LD_INT 5
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: ST_TO_ADDR
41731: GO 42592
41733: LD_INT 9
41735: DOUBLE
41736: EQUAL
41737: IFTRUE 41741
41739: GO 41767
41741: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41742: LD_ADDR_VAR 0 3
41746: PUSH
41747: LD_INT 2
41749: PUSH
41750: LD_INT 3
41752: PUSH
41753: LD_INT 4
41755: PUSH
41756: LD_INT 5
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: ST_TO_ADDR
41765: GO 42592
41767: LD_INT 7
41769: DOUBLE
41770: EQUAL
41771: IFTRUE 41775
41773: GO 41801
41775: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41776: LD_ADDR_VAR 0 3
41780: PUSH
41781: LD_INT 2
41783: PUSH
41784: LD_INT 3
41786: PUSH
41787: LD_INT 4
41789: PUSH
41790: LD_INT 5
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: ST_TO_ADDR
41799: GO 42592
41801: LD_INT 12
41803: DOUBLE
41804: EQUAL
41805: IFTRUE 41809
41807: GO 41835
41809: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41810: LD_ADDR_VAR 0 3
41814: PUSH
41815: LD_INT 2
41817: PUSH
41818: LD_INT 3
41820: PUSH
41821: LD_INT 4
41823: PUSH
41824: LD_INT 5
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: ST_TO_ADDR
41833: GO 42592
41835: LD_INT 13
41837: DOUBLE
41838: EQUAL
41839: IFTRUE 41843
41841: GO 41869
41843: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41844: LD_ADDR_VAR 0 3
41848: PUSH
41849: LD_INT 2
41851: PUSH
41852: LD_INT 3
41854: PUSH
41855: LD_INT 4
41857: PUSH
41858: LD_INT 5
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: ST_TO_ADDR
41867: GO 42592
41869: LD_INT 14
41871: DOUBLE
41872: EQUAL
41873: IFTRUE 41877
41875: GO 41895
41877: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41878: LD_ADDR_VAR 0 3
41882: PUSH
41883: LD_INT 4
41885: PUSH
41886: LD_INT 5
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: ST_TO_ADDR
41893: GO 42592
41895: LD_INT 6
41897: DOUBLE
41898: EQUAL
41899: IFTRUE 41903
41901: GO 41921
41903: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41904: LD_ADDR_VAR 0 3
41908: PUSH
41909: LD_INT 4
41911: PUSH
41912: LD_INT 5
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: ST_TO_ADDR
41919: GO 42592
41921: LD_INT 10
41923: DOUBLE
41924: EQUAL
41925: IFTRUE 41929
41927: GO 41947
41929: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41930: LD_ADDR_VAR 0 3
41934: PUSH
41935: LD_INT 4
41937: PUSH
41938: LD_INT 5
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: ST_TO_ADDR
41945: GO 42592
41947: LD_INT 22
41949: DOUBLE
41950: EQUAL
41951: IFTRUE 41955
41953: GO 41981
41955: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41956: LD_ADDR_VAR 0 3
41960: PUSH
41961: LD_INT 11
41963: PUSH
41964: LD_INT 12
41966: PUSH
41967: LD_INT 13
41969: PUSH
41970: LD_INT 14
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: ST_TO_ADDR
41979: GO 42592
41981: LD_INT 23
41983: DOUBLE
41984: EQUAL
41985: IFTRUE 41989
41987: GO 42015
41989: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41990: LD_ADDR_VAR 0 3
41994: PUSH
41995: LD_INT 11
41997: PUSH
41998: LD_INT 12
42000: PUSH
42001: LD_INT 13
42003: PUSH
42004: LD_INT 14
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: ST_TO_ADDR
42013: GO 42592
42015: LD_INT 24
42017: DOUBLE
42018: EQUAL
42019: IFTRUE 42023
42021: GO 42049
42023: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42024: LD_ADDR_VAR 0 3
42028: PUSH
42029: LD_INT 11
42031: PUSH
42032: LD_INT 12
42034: PUSH
42035: LD_INT 13
42037: PUSH
42038: LD_INT 14
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: ST_TO_ADDR
42047: GO 42592
42049: LD_INT 30
42051: DOUBLE
42052: EQUAL
42053: IFTRUE 42057
42055: GO 42083
42057: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42058: LD_ADDR_VAR 0 3
42062: PUSH
42063: LD_INT 11
42065: PUSH
42066: LD_INT 12
42068: PUSH
42069: LD_INT 13
42071: PUSH
42072: LD_INT 14
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: ST_TO_ADDR
42081: GO 42592
42083: LD_INT 25
42085: DOUBLE
42086: EQUAL
42087: IFTRUE 42091
42089: GO 42109
42091: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42092: LD_ADDR_VAR 0 3
42096: PUSH
42097: LD_INT 13
42099: PUSH
42100: LD_INT 14
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: ST_TO_ADDR
42107: GO 42592
42109: LD_INT 27
42111: DOUBLE
42112: EQUAL
42113: IFTRUE 42117
42115: GO 42135
42117: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42118: LD_ADDR_VAR 0 3
42122: PUSH
42123: LD_INT 13
42125: PUSH
42126: LD_INT 14
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: ST_TO_ADDR
42133: GO 42592
42135: LD_EXP 50
42139: DOUBLE
42140: EQUAL
42141: IFTRUE 42145
42143: GO 42171
42145: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42146: LD_ADDR_VAR 0 3
42150: PUSH
42151: LD_INT 11
42153: PUSH
42154: LD_INT 12
42156: PUSH
42157: LD_INT 13
42159: PUSH
42160: LD_INT 14
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: ST_TO_ADDR
42169: GO 42592
42171: LD_INT 28
42173: DOUBLE
42174: EQUAL
42175: IFTRUE 42179
42177: GO 42197
42179: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42180: LD_ADDR_VAR 0 3
42184: PUSH
42185: LD_INT 13
42187: PUSH
42188: LD_INT 14
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: ST_TO_ADDR
42195: GO 42592
42197: LD_INT 29
42199: DOUBLE
42200: EQUAL
42201: IFTRUE 42205
42203: GO 42223
42205: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42206: LD_ADDR_VAR 0 3
42210: PUSH
42211: LD_INT 13
42213: PUSH
42214: LD_INT 14
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: ST_TO_ADDR
42221: GO 42592
42223: LD_INT 31
42225: DOUBLE
42226: EQUAL
42227: IFTRUE 42231
42229: GO 42249
42231: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42232: LD_ADDR_VAR 0 3
42236: PUSH
42237: LD_INT 13
42239: PUSH
42240: LD_INT 14
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: ST_TO_ADDR
42247: GO 42592
42249: LD_INT 26
42251: DOUBLE
42252: EQUAL
42253: IFTRUE 42257
42255: GO 42275
42257: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42258: LD_ADDR_VAR 0 3
42262: PUSH
42263: LD_INT 13
42265: PUSH
42266: LD_INT 14
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: ST_TO_ADDR
42273: GO 42592
42275: LD_INT 42
42277: DOUBLE
42278: EQUAL
42279: IFTRUE 42283
42281: GO 42309
42283: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42284: LD_ADDR_VAR 0 3
42288: PUSH
42289: LD_INT 21
42291: PUSH
42292: LD_INT 22
42294: PUSH
42295: LD_INT 23
42297: PUSH
42298: LD_INT 24
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: ST_TO_ADDR
42307: GO 42592
42309: LD_INT 43
42311: DOUBLE
42312: EQUAL
42313: IFTRUE 42317
42315: GO 42343
42317: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42318: LD_ADDR_VAR 0 3
42322: PUSH
42323: LD_INT 21
42325: PUSH
42326: LD_INT 22
42328: PUSH
42329: LD_INT 23
42331: PUSH
42332: LD_INT 24
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: ST_TO_ADDR
42341: GO 42592
42343: LD_INT 44
42345: DOUBLE
42346: EQUAL
42347: IFTRUE 42351
42349: GO 42377
42351: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42352: LD_ADDR_VAR 0 3
42356: PUSH
42357: LD_INT 21
42359: PUSH
42360: LD_INT 22
42362: PUSH
42363: LD_INT 23
42365: PUSH
42366: LD_INT 24
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: ST_TO_ADDR
42375: GO 42592
42377: LD_INT 45
42379: DOUBLE
42380: EQUAL
42381: IFTRUE 42385
42383: GO 42411
42385: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42386: LD_ADDR_VAR 0 3
42390: PUSH
42391: LD_INT 21
42393: PUSH
42394: LD_INT 22
42396: PUSH
42397: LD_INT 23
42399: PUSH
42400: LD_INT 24
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: ST_TO_ADDR
42409: GO 42592
42411: LD_INT 49
42413: DOUBLE
42414: EQUAL
42415: IFTRUE 42419
42417: GO 42445
42419: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42420: LD_ADDR_VAR 0 3
42424: PUSH
42425: LD_INT 21
42427: PUSH
42428: LD_INT 22
42430: PUSH
42431: LD_INT 23
42433: PUSH
42434: LD_INT 24
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: ST_TO_ADDR
42443: GO 42592
42445: LD_INT 51
42447: DOUBLE
42448: EQUAL
42449: IFTRUE 42453
42451: GO 42479
42453: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42454: LD_ADDR_VAR 0 3
42458: PUSH
42459: LD_INT 21
42461: PUSH
42462: LD_INT 22
42464: PUSH
42465: LD_INT 23
42467: PUSH
42468: LD_INT 24
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: ST_TO_ADDR
42477: GO 42592
42479: LD_INT 52
42481: DOUBLE
42482: EQUAL
42483: IFTRUE 42487
42485: GO 42513
42487: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42488: LD_ADDR_VAR 0 3
42492: PUSH
42493: LD_INT 21
42495: PUSH
42496: LD_INT 22
42498: PUSH
42499: LD_INT 23
42501: PUSH
42502: LD_INT 24
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: ST_TO_ADDR
42511: GO 42592
42513: LD_INT 53
42515: DOUBLE
42516: EQUAL
42517: IFTRUE 42521
42519: GO 42539
42521: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42522: LD_ADDR_VAR 0 3
42526: PUSH
42527: LD_INT 23
42529: PUSH
42530: LD_INT 24
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: ST_TO_ADDR
42537: GO 42592
42539: LD_INT 46
42541: DOUBLE
42542: EQUAL
42543: IFTRUE 42547
42545: GO 42565
42547: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42548: LD_ADDR_VAR 0 3
42552: PUSH
42553: LD_INT 23
42555: PUSH
42556: LD_INT 24
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: ST_TO_ADDR
42563: GO 42592
42565: LD_INT 47
42567: DOUBLE
42568: EQUAL
42569: IFTRUE 42573
42571: GO 42591
42573: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42574: LD_ADDR_VAR 0 3
42578: PUSH
42579: LD_INT 23
42581: PUSH
42582: LD_INT 24
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: ST_TO_ADDR
42589: GO 42592
42591: POP
// result := ( chassis in result ) ;
42592: LD_ADDR_VAR 0 3
42596: PUSH
42597: LD_VAR 0 1
42601: PUSH
42602: LD_VAR 0 3
42606: IN
42607: ST_TO_ADDR
// end ;
42608: LD_VAR 0 3
42612: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42613: LD_INT 0
42615: PPUSH
42616: PPUSH
42617: PPUSH
42618: PPUSH
42619: PPUSH
42620: PPUSH
42621: PPUSH
// result := array ;
42622: LD_ADDR_VAR 0 5
42626: PUSH
42627: LD_VAR 0 1
42631: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42632: LD_VAR 0 1
42636: NOT
42637: PUSH
42638: LD_VAR 0 2
42642: NOT
42643: OR
42644: PUSH
42645: LD_VAR 0 3
42649: NOT
42650: OR
42651: PUSH
42652: LD_VAR 0 2
42656: PUSH
42657: LD_VAR 0 1
42661: GREATER
42662: OR
42663: PUSH
42664: LD_VAR 0 3
42668: PUSH
42669: LD_VAR 0 1
42673: GREATER
42674: OR
42675: IFFALSE 42679
// exit ;
42677: GO 42975
// if direction then
42679: LD_VAR 0 4
42683: IFFALSE 42747
// begin d := 1 ;
42685: LD_ADDR_VAR 0 9
42689: PUSH
42690: LD_INT 1
42692: ST_TO_ADDR
// if i_from > i_to then
42693: LD_VAR 0 2
42697: PUSH
42698: LD_VAR 0 3
42702: GREATER
42703: IFFALSE 42729
// length := ( array - i_from ) + i_to else
42705: LD_ADDR_VAR 0 11
42709: PUSH
42710: LD_VAR 0 1
42714: PUSH
42715: LD_VAR 0 2
42719: MINUS
42720: PUSH
42721: LD_VAR 0 3
42725: PLUS
42726: ST_TO_ADDR
42727: GO 42745
// length := i_to - i_from ;
42729: LD_ADDR_VAR 0 11
42733: PUSH
42734: LD_VAR 0 3
42738: PUSH
42739: LD_VAR 0 2
42743: MINUS
42744: ST_TO_ADDR
// end else
42745: GO 42808
// begin d := - 1 ;
42747: LD_ADDR_VAR 0 9
42751: PUSH
42752: LD_INT 1
42754: NEG
42755: ST_TO_ADDR
// if i_from > i_to then
42756: LD_VAR 0 2
42760: PUSH
42761: LD_VAR 0 3
42765: GREATER
42766: IFFALSE 42786
// length := i_from - i_to else
42768: LD_ADDR_VAR 0 11
42772: PUSH
42773: LD_VAR 0 2
42777: PUSH
42778: LD_VAR 0 3
42782: MINUS
42783: ST_TO_ADDR
42784: GO 42808
// length := ( array - i_to ) + i_from ;
42786: LD_ADDR_VAR 0 11
42790: PUSH
42791: LD_VAR 0 1
42795: PUSH
42796: LD_VAR 0 3
42800: MINUS
42801: PUSH
42802: LD_VAR 0 2
42806: PLUS
42807: ST_TO_ADDR
// end ; if not length then
42808: LD_VAR 0 11
42812: NOT
42813: IFFALSE 42817
// exit ;
42815: GO 42975
// tmp := array ;
42817: LD_ADDR_VAR 0 10
42821: PUSH
42822: LD_VAR 0 1
42826: ST_TO_ADDR
// for i = 1 to length do
42827: LD_ADDR_VAR 0 6
42831: PUSH
42832: DOUBLE
42833: LD_INT 1
42835: DEC
42836: ST_TO_ADDR
42837: LD_VAR 0 11
42841: PUSH
42842: FOR_TO
42843: IFFALSE 42963
// begin for j = 1 to array do
42845: LD_ADDR_VAR 0 7
42849: PUSH
42850: DOUBLE
42851: LD_INT 1
42853: DEC
42854: ST_TO_ADDR
42855: LD_VAR 0 1
42859: PUSH
42860: FOR_TO
42861: IFFALSE 42949
// begin k := j + d ;
42863: LD_ADDR_VAR 0 8
42867: PUSH
42868: LD_VAR 0 7
42872: PUSH
42873: LD_VAR 0 9
42877: PLUS
42878: ST_TO_ADDR
// if k > array then
42879: LD_VAR 0 8
42883: PUSH
42884: LD_VAR 0 1
42888: GREATER
42889: IFFALSE 42899
// k := 1 ;
42891: LD_ADDR_VAR 0 8
42895: PUSH
42896: LD_INT 1
42898: ST_TO_ADDR
// if not k then
42899: LD_VAR 0 8
42903: NOT
42904: IFFALSE 42916
// k := array ;
42906: LD_ADDR_VAR 0 8
42910: PUSH
42911: LD_VAR 0 1
42915: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42916: LD_ADDR_VAR 0 10
42920: PUSH
42921: LD_VAR 0 10
42925: PPUSH
42926: LD_VAR 0 8
42930: PPUSH
42931: LD_VAR 0 1
42935: PUSH
42936: LD_VAR 0 7
42940: ARRAY
42941: PPUSH
42942: CALL_OW 1
42946: ST_TO_ADDR
// end ;
42947: GO 42860
42949: POP
42950: POP
// array := tmp ;
42951: LD_ADDR_VAR 0 1
42955: PUSH
42956: LD_VAR 0 10
42960: ST_TO_ADDR
// end ;
42961: GO 42842
42963: POP
42964: POP
// result := array ;
42965: LD_ADDR_VAR 0 5
42969: PUSH
42970: LD_VAR 0 1
42974: ST_TO_ADDR
// end ;
42975: LD_VAR 0 5
42979: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42980: LD_INT 0
42982: PPUSH
42983: PPUSH
// result := 0 ;
42984: LD_ADDR_VAR 0 3
42988: PUSH
42989: LD_INT 0
42991: ST_TO_ADDR
// if not array or not value in array then
42992: LD_VAR 0 1
42996: NOT
42997: PUSH
42998: LD_VAR 0 2
43002: PUSH
43003: LD_VAR 0 1
43007: IN
43008: NOT
43009: OR
43010: IFFALSE 43014
// exit ;
43012: GO 43068
// for i = 1 to array do
43014: LD_ADDR_VAR 0 4
43018: PUSH
43019: DOUBLE
43020: LD_INT 1
43022: DEC
43023: ST_TO_ADDR
43024: LD_VAR 0 1
43028: PUSH
43029: FOR_TO
43030: IFFALSE 43066
// if value = array [ i ] then
43032: LD_VAR 0 2
43036: PUSH
43037: LD_VAR 0 1
43041: PUSH
43042: LD_VAR 0 4
43046: ARRAY
43047: EQUAL
43048: IFFALSE 43064
// begin result := i ;
43050: LD_ADDR_VAR 0 3
43054: PUSH
43055: LD_VAR 0 4
43059: ST_TO_ADDR
// exit ;
43060: POP
43061: POP
43062: GO 43068
// end ;
43064: GO 43029
43066: POP
43067: POP
// end ;
43068: LD_VAR 0 3
43072: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43073: LD_INT 0
43075: PPUSH
// vc_chassis := chassis ;
43076: LD_ADDR_OWVAR 37
43080: PUSH
43081: LD_VAR 0 1
43085: ST_TO_ADDR
// vc_engine := engine ;
43086: LD_ADDR_OWVAR 39
43090: PUSH
43091: LD_VAR 0 2
43095: ST_TO_ADDR
// vc_control := control ;
43096: LD_ADDR_OWVAR 38
43100: PUSH
43101: LD_VAR 0 3
43105: ST_TO_ADDR
// vc_weapon := weapon ;
43106: LD_ADDR_OWVAR 40
43110: PUSH
43111: LD_VAR 0 4
43115: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43116: LD_ADDR_OWVAR 41
43120: PUSH
43121: LD_VAR 0 5
43125: ST_TO_ADDR
// end ;
43126: LD_VAR 0 6
43130: RET
// export function WantPlant ( unit ) ; var task ; begin
43131: LD_INT 0
43133: PPUSH
43134: PPUSH
// result := false ;
43135: LD_ADDR_VAR 0 2
43139: PUSH
43140: LD_INT 0
43142: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43143: LD_ADDR_VAR 0 3
43147: PUSH
43148: LD_VAR 0 1
43152: PPUSH
43153: CALL_OW 437
43157: ST_TO_ADDR
// if task then
43158: LD_VAR 0 3
43162: IFFALSE 43190
// if task [ 1 ] [ 1 ] = p then
43164: LD_VAR 0 3
43168: PUSH
43169: LD_INT 1
43171: ARRAY
43172: PUSH
43173: LD_INT 1
43175: ARRAY
43176: PUSH
43177: LD_STRING p
43179: EQUAL
43180: IFFALSE 43190
// result := true ;
43182: LD_ADDR_VAR 0 2
43186: PUSH
43187: LD_INT 1
43189: ST_TO_ADDR
// end ;
43190: LD_VAR 0 2
43194: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43195: LD_INT 0
43197: PPUSH
43198: PPUSH
43199: PPUSH
43200: PPUSH
// if pos < 1 then
43201: LD_VAR 0 2
43205: PUSH
43206: LD_INT 1
43208: LESS
43209: IFFALSE 43213
// exit ;
43211: GO 43516
// if pos = 1 then
43213: LD_VAR 0 2
43217: PUSH
43218: LD_INT 1
43220: EQUAL
43221: IFFALSE 43254
// result := Replace ( arr , pos [ 1 ] , value ) else
43223: LD_ADDR_VAR 0 4
43227: PUSH
43228: LD_VAR 0 1
43232: PPUSH
43233: LD_VAR 0 2
43237: PUSH
43238: LD_INT 1
43240: ARRAY
43241: PPUSH
43242: LD_VAR 0 3
43246: PPUSH
43247: CALL_OW 1
43251: ST_TO_ADDR
43252: GO 43516
// begin tmp := arr ;
43254: LD_ADDR_VAR 0 6
43258: PUSH
43259: LD_VAR 0 1
43263: ST_TO_ADDR
// s_arr := [ tmp ] ;
43264: LD_ADDR_VAR 0 7
43268: PUSH
43269: LD_VAR 0 6
43273: PUSH
43274: EMPTY
43275: LIST
43276: ST_TO_ADDR
// for i = 1 to pos - 1 do
43277: LD_ADDR_VAR 0 5
43281: PUSH
43282: DOUBLE
43283: LD_INT 1
43285: DEC
43286: ST_TO_ADDR
43287: LD_VAR 0 2
43291: PUSH
43292: LD_INT 1
43294: MINUS
43295: PUSH
43296: FOR_TO
43297: IFFALSE 43342
// begin tmp := tmp [ pos [ i ] ] ;
43299: LD_ADDR_VAR 0 6
43303: PUSH
43304: LD_VAR 0 6
43308: PUSH
43309: LD_VAR 0 2
43313: PUSH
43314: LD_VAR 0 5
43318: ARRAY
43319: ARRAY
43320: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43321: LD_ADDR_VAR 0 7
43325: PUSH
43326: LD_VAR 0 7
43330: PUSH
43331: LD_VAR 0 6
43335: PUSH
43336: EMPTY
43337: LIST
43338: ADD
43339: ST_TO_ADDR
// end ;
43340: GO 43296
43342: POP
43343: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43344: LD_ADDR_VAR 0 6
43348: PUSH
43349: LD_VAR 0 6
43353: PPUSH
43354: LD_VAR 0 2
43358: PUSH
43359: LD_VAR 0 2
43363: ARRAY
43364: PPUSH
43365: LD_VAR 0 3
43369: PPUSH
43370: CALL_OW 1
43374: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43375: LD_ADDR_VAR 0 7
43379: PUSH
43380: LD_VAR 0 7
43384: PPUSH
43385: LD_VAR 0 7
43389: PPUSH
43390: LD_VAR 0 6
43394: PPUSH
43395: CALL_OW 1
43399: ST_TO_ADDR
// for i = s_arr downto 2 do
43400: LD_ADDR_VAR 0 5
43404: PUSH
43405: DOUBLE
43406: LD_VAR 0 7
43410: INC
43411: ST_TO_ADDR
43412: LD_INT 2
43414: PUSH
43415: FOR_DOWNTO
43416: IFFALSE 43500
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43418: LD_ADDR_VAR 0 6
43422: PUSH
43423: LD_VAR 0 7
43427: PUSH
43428: LD_VAR 0 5
43432: PUSH
43433: LD_INT 1
43435: MINUS
43436: ARRAY
43437: PPUSH
43438: LD_VAR 0 2
43442: PUSH
43443: LD_VAR 0 5
43447: PUSH
43448: LD_INT 1
43450: MINUS
43451: ARRAY
43452: PPUSH
43453: LD_VAR 0 7
43457: PUSH
43458: LD_VAR 0 5
43462: ARRAY
43463: PPUSH
43464: CALL_OW 1
43468: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
43469: LD_ADDR_VAR 0 7
43473: PUSH
43474: LD_VAR 0 7
43478: PPUSH
43479: LD_VAR 0 5
43483: PUSH
43484: LD_INT 1
43486: MINUS
43487: PPUSH
43488: LD_VAR 0 6
43492: PPUSH
43493: CALL_OW 1
43497: ST_TO_ADDR
// end ;
43498: GO 43415
43500: POP
43501: POP
// result := s_arr [ 1 ] ;
43502: LD_ADDR_VAR 0 4
43506: PUSH
43507: LD_VAR 0 7
43511: PUSH
43512: LD_INT 1
43514: ARRAY
43515: ST_TO_ADDR
// end ; end ;
43516: LD_VAR 0 4
43520: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43521: LD_INT 0
43523: PPUSH
43524: PPUSH
// if not list then
43525: LD_VAR 0 1
43529: NOT
43530: IFFALSE 43534
// exit ;
43532: GO 43625
// i := list [ pos1 ] ;
43534: LD_ADDR_VAR 0 5
43538: PUSH
43539: LD_VAR 0 1
43543: PUSH
43544: LD_VAR 0 2
43548: ARRAY
43549: ST_TO_ADDR
// if not i then
43550: LD_VAR 0 5
43554: NOT
43555: IFFALSE 43559
// exit ;
43557: GO 43625
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43559: LD_ADDR_VAR 0 1
43563: PUSH
43564: LD_VAR 0 1
43568: PPUSH
43569: LD_VAR 0 2
43573: PPUSH
43574: LD_VAR 0 1
43578: PUSH
43579: LD_VAR 0 3
43583: ARRAY
43584: PPUSH
43585: CALL_OW 1
43589: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43590: LD_ADDR_VAR 0 1
43594: PUSH
43595: LD_VAR 0 1
43599: PPUSH
43600: LD_VAR 0 3
43604: PPUSH
43605: LD_VAR 0 5
43609: PPUSH
43610: CALL_OW 1
43614: ST_TO_ADDR
// result := list ;
43615: LD_ADDR_VAR 0 4
43619: PUSH
43620: LD_VAR 0 1
43624: ST_TO_ADDR
// end ;
43625: LD_VAR 0 4
43629: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43630: LD_INT 0
43632: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43633: LD_ADDR_VAR 0 5
43637: PUSH
43638: LD_VAR 0 1
43642: PPUSH
43643: CALL_OW 250
43647: PPUSH
43648: LD_VAR 0 1
43652: PPUSH
43653: CALL_OW 251
43657: PPUSH
43658: LD_VAR 0 2
43662: PPUSH
43663: LD_VAR 0 3
43667: PPUSH
43668: LD_VAR 0 4
43672: PPUSH
43673: CALL 43683 0 5
43677: ST_TO_ADDR
// end ;
43678: LD_VAR 0 5
43682: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
43683: LD_INT 0
43685: PPUSH
43686: PPUSH
43687: PPUSH
43688: PPUSH
// if not list then
43689: LD_VAR 0 3
43693: NOT
43694: IFFALSE 43698
// exit ;
43696: GO 44086
// result := [ ] ;
43698: LD_ADDR_VAR 0 6
43702: PUSH
43703: EMPTY
43704: ST_TO_ADDR
// for i in list do
43705: LD_ADDR_VAR 0 7
43709: PUSH
43710: LD_VAR 0 3
43714: PUSH
43715: FOR_IN
43716: IFFALSE 43918
// begin tmp := GetDistUnitXY ( i , x , y ) ;
43718: LD_ADDR_VAR 0 9
43722: PUSH
43723: LD_VAR 0 7
43727: PPUSH
43728: LD_VAR 0 1
43732: PPUSH
43733: LD_VAR 0 2
43737: PPUSH
43738: CALL_OW 297
43742: ST_TO_ADDR
// if not result then
43743: LD_VAR 0 6
43747: NOT
43748: IFFALSE 43774
// result := [ [ i , tmp ] ] else
43750: LD_ADDR_VAR 0 6
43754: PUSH
43755: LD_VAR 0 7
43759: PUSH
43760: LD_VAR 0 9
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: EMPTY
43770: LIST
43771: ST_TO_ADDR
43772: GO 43916
// begin if result [ result ] [ 2 ] < tmp then
43774: LD_VAR 0 6
43778: PUSH
43779: LD_VAR 0 6
43783: ARRAY
43784: PUSH
43785: LD_INT 2
43787: ARRAY
43788: PUSH
43789: LD_VAR 0 9
43793: LESS
43794: IFFALSE 43836
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43796: LD_ADDR_VAR 0 6
43800: PUSH
43801: LD_VAR 0 6
43805: PPUSH
43806: LD_VAR 0 6
43810: PUSH
43811: LD_INT 1
43813: PLUS
43814: PPUSH
43815: LD_VAR 0 7
43819: PUSH
43820: LD_VAR 0 9
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PPUSH
43829: CALL_OW 2
43833: ST_TO_ADDR
43834: GO 43916
// for j = 1 to result do
43836: LD_ADDR_VAR 0 8
43840: PUSH
43841: DOUBLE
43842: LD_INT 1
43844: DEC
43845: ST_TO_ADDR
43846: LD_VAR 0 6
43850: PUSH
43851: FOR_TO
43852: IFFALSE 43914
// begin if tmp < result [ j ] [ 2 ] then
43854: LD_VAR 0 9
43858: PUSH
43859: LD_VAR 0 6
43863: PUSH
43864: LD_VAR 0 8
43868: ARRAY
43869: PUSH
43870: LD_INT 2
43872: ARRAY
43873: LESS
43874: IFFALSE 43912
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43876: LD_ADDR_VAR 0 6
43880: PUSH
43881: LD_VAR 0 6
43885: PPUSH
43886: LD_VAR 0 8
43890: PPUSH
43891: LD_VAR 0 7
43895: PUSH
43896: LD_VAR 0 9
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PPUSH
43905: CALL_OW 2
43909: ST_TO_ADDR
// break ;
43910: GO 43914
// end ; end ;
43912: GO 43851
43914: POP
43915: POP
// end ; end ;
43916: GO 43715
43918: POP
43919: POP
// if result and not asc then
43920: LD_VAR 0 6
43924: PUSH
43925: LD_VAR 0 4
43929: NOT
43930: AND
43931: IFFALSE 44006
// begin tmp := result ;
43933: LD_ADDR_VAR 0 9
43937: PUSH
43938: LD_VAR 0 6
43942: ST_TO_ADDR
// for i = tmp downto 1 do
43943: LD_ADDR_VAR 0 7
43947: PUSH
43948: DOUBLE
43949: LD_VAR 0 9
43953: INC
43954: ST_TO_ADDR
43955: LD_INT 1
43957: PUSH
43958: FOR_DOWNTO
43959: IFFALSE 44004
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43961: LD_ADDR_VAR 0 6
43965: PUSH
43966: LD_VAR 0 6
43970: PPUSH
43971: LD_VAR 0 9
43975: PUSH
43976: LD_VAR 0 7
43980: MINUS
43981: PUSH
43982: LD_INT 1
43984: PLUS
43985: PPUSH
43986: LD_VAR 0 9
43990: PUSH
43991: LD_VAR 0 7
43995: ARRAY
43996: PPUSH
43997: CALL_OW 1
44001: ST_TO_ADDR
44002: GO 43958
44004: POP
44005: POP
// end ; tmp := [ ] ;
44006: LD_ADDR_VAR 0 9
44010: PUSH
44011: EMPTY
44012: ST_TO_ADDR
// if mode then
44013: LD_VAR 0 5
44017: IFFALSE 44086
// begin for i = 1 to result do
44019: LD_ADDR_VAR 0 7
44023: PUSH
44024: DOUBLE
44025: LD_INT 1
44027: DEC
44028: ST_TO_ADDR
44029: LD_VAR 0 6
44033: PUSH
44034: FOR_TO
44035: IFFALSE 44074
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44037: LD_ADDR_VAR 0 9
44041: PUSH
44042: LD_VAR 0 9
44046: PPUSH
44047: LD_VAR 0 7
44051: PPUSH
44052: LD_VAR 0 6
44056: PUSH
44057: LD_VAR 0 7
44061: ARRAY
44062: PUSH
44063: LD_INT 1
44065: ARRAY
44066: PPUSH
44067: CALL_OW 1
44071: ST_TO_ADDR
44072: GO 44034
44074: POP
44075: POP
// result := tmp ;
44076: LD_ADDR_VAR 0 6
44080: PUSH
44081: LD_VAR 0 9
44085: ST_TO_ADDR
// end ; end ;
44086: LD_VAR 0 6
44090: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44091: LD_INT 0
44093: PPUSH
44094: PPUSH
44095: PPUSH
44096: PPUSH
44097: PPUSH
44098: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44099: LD_ADDR_VAR 0 5
44103: PUSH
44104: LD_INT 0
44106: PUSH
44107: LD_INT 0
44109: PUSH
44110: LD_INT 0
44112: PUSH
44113: EMPTY
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: ST_TO_ADDR
// if not x or not y then
44121: LD_VAR 0 2
44125: NOT
44126: PUSH
44127: LD_VAR 0 3
44131: NOT
44132: OR
44133: IFFALSE 44137
// exit ;
44135: GO 45789
// if not range then
44137: LD_VAR 0 4
44141: NOT
44142: IFFALSE 44152
// range := 10 ;
44144: LD_ADDR_VAR 0 4
44148: PUSH
44149: LD_INT 10
44151: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44152: LD_ADDR_VAR 0 8
44156: PUSH
44157: LD_INT 81
44159: PUSH
44160: LD_VAR 0 1
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 92
44171: PUSH
44172: LD_VAR 0 2
44176: PUSH
44177: LD_VAR 0 3
44181: PUSH
44182: LD_VAR 0 4
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 3
44195: PUSH
44196: LD_INT 21
44198: PUSH
44199: LD_INT 3
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: LIST
44214: PPUSH
44215: CALL_OW 69
44219: ST_TO_ADDR
// if not tmp then
44220: LD_VAR 0 8
44224: NOT
44225: IFFALSE 44229
// exit ;
44227: GO 45789
// for i in tmp do
44229: LD_ADDR_VAR 0 6
44233: PUSH
44234: LD_VAR 0 8
44238: PUSH
44239: FOR_IN
44240: IFFALSE 45764
// begin points := [ 0 , 0 , 0 ] ;
44242: LD_ADDR_VAR 0 9
44246: PUSH
44247: LD_INT 0
44249: PUSH
44250: LD_INT 0
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: LIST
44260: ST_TO_ADDR
// bpoints := 1 ;
44261: LD_ADDR_VAR 0 10
44265: PUSH
44266: LD_INT 1
44268: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44269: LD_VAR 0 6
44273: PPUSH
44274: CALL_OW 247
44278: PUSH
44279: LD_INT 1
44281: DOUBLE
44282: EQUAL
44283: IFTRUE 44287
44285: GO 44865
44287: POP
// begin if GetClass ( i ) = 1 then
44288: LD_VAR 0 6
44292: PPUSH
44293: CALL_OW 257
44297: PUSH
44298: LD_INT 1
44300: EQUAL
44301: IFFALSE 44322
// points := [ 10 , 5 , 3 ] ;
44303: LD_ADDR_VAR 0 9
44307: PUSH
44308: LD_INT 10
44310: PUSH
44311: LD_INT 5
44313: PUSH
44314: LD_INT 3
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: LIST
44321: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44322: LD_VAR 0 6
44326: PPUSH
44327: CALL_OW 257
44331: PUSH
44332: LD_INT 2
44334: PUSH
44335: LD_INT 3
44337: PUSH
44338: LD_INT 4
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: LIST
44345: IN
44346: IFFALSE 44367
// points := [ 3 , 2 , 1 ] ;
44348: LD_ADDR_VAR 0 9
44352: PUSH
44353: LD_INT 3
44355: PUSH
44356: LD_INT 2
44358: PUSH
44359: LD_INT 1
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: LIST
44366: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44367: LD_VAR 0 6
44371: PPUSH
44372: CALL_OW 257
44376: PUSH
44377: LD_INT 5
44379: EQUAL
44380: IFFALSE 44401
// points := [ 130 , 5 , 2 ] ;
44382: LD_ADDR_VAR 0 9
44386: PUSH
44387: LD_INT 130
44389: PUSH
44390: LD_INT 5
44392: PUSH
44393: LD_INT 2
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: LIST
44400: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44401: LD_VAR 0 6
44405: PPUSH
44406: CALL_OW 257
44410: PUSH
44411: LD_INT 8
44413: EQUAL
44414: IFFALSE 44435
// points := [ 35 , 35 , 30 ] ;
44416: LD_ADDR_VAR 0 9
44420: PUSH
44421: LD_INT 35
44423: PUSH
44424: LD_INT 35
44426: PUSH
44427: LD_INT 30
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: LIST
44434: ST_TO_ADDR
// if GetClass ( i ) = 9 then
44435: LD_VAR 0 6
44439: PPUSH
44440: CALL_OW 257
44444: PUSH
44445: LD_INT 9
44447: EQUAL
44448: IFFALSE 44469
// points := [ 20 , 55 , 40 ] ;
44450: LD_ADDR_VAR 0 9
44454: PUSH
44455: LD_INT 20
44457: PUSH
44458: LD_INT 55
44460: PUSH
44461: LD_INT 40
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: LIST
44468: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
44469: LD_VAR 0 6
44473: PPUSH
44474: CALL_OW 257
44478: PUSH
44479: LD_INT 12
44481: PUSH
44482: LD_INT 16
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: IN
44489: IFFALSE 44510
// points := [ 5 , 3 , 2 ] ;
44491: LD_ADDR_VAR 0 9
44495: PUSH
44496: LD_INT 5
44498: PUSH
44499: LD_INT 3
44501: PUSH
44502: LD_INT 2
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: LIST
44509: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44510: LD_VAR 0 6
44514: PPUSH
44515: CALL_OW 257
44519: PUSH
44520: LD_INT 17
44522: EQUAL
44523: IFFALSE 44544
// points := [ 100 , 50 , 75 ] ;
44525: LD_ADDR_VAR 0 9
44529: PUSH
44530: LD_INT 100
44532: PUSH
44533: LD_INT 50
44535: PUSH
44536: LD_INT 75
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: LIST
44543: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44544: LD_VAR 0 6
44548: PPUSH
44549: CALL_OW 257
44553: PUSH
44554: LD_INT 15
44556: EQUAL
44557: IFFALSE 44578
// points := [ 10 , 5 , 3 ] ;
44559: LD_ADDR_VAR 0 9
44563: PUSH
44564: LD_INT 10
44566: PUSH
44567: LD_INT 5
44569: PUSH
44570: LD_INT 3
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: LIST
44577: ST_TO_ADDR
// if GetClass ( i ) = 14 then
44578: LD_VAR 0 6
44582: PPUSH
44583: CALL_OW 257
44587: PUSH
44588: LD_INT 14
44590: EQUAL
44591: IFFALSE 44612
// points := [ 10 , 0 , 0 ] ;
44593: LD_ADDR_VAR 0 9
44597: PUSH
44598: LD_INT 10
44600: PUSH
44601: LD_INT 0
44603: PUSH
44604: LD_INT 0
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: LIST
44611: ST_TO_ADDR
// if GetClass ( i ) = 11 then
44612: LD_VAR 0 6
44616: PPUSH
44617: CALL_OW 257
44621: PUSH
44622: LD_INT 11
44624: EQUAL
44625: IFFALSE 44646
// points := [ 30 , 10 , 5 ] ;
44627: LD_ADDR_VAR 0 9
44631: PUSH
44632: LD_INT 30
44634: PUSH
44635: LD_INT 10
44637: PUSH
44638: LD_INT 5
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: LIST
44645: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
44646: LD_VAR 0 1
44650: PPUSH
44651: LD_INT 5
44653: PPUSH
44654: CALL_OW 321
44658: PUSH
44659: LD_INT 2
44661: EQUAL
44662: IFFALSE 44679
// bpoints := bpoints * 1.8 ;
44664: LD_ADDR_VAR 0 10
44668: PUSH
44669: LD_VAR 0 10
44673: PUSH
44674: LD_REAL  1.80000000000000E+0000
44677: MUL
44678: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
44679: LD_VAR 0 6
44683: PPUSH
44684: CALL_OW 257
44688: PUSH
44689: LD_INT 1
44691: PUSH
44692: LD_INT 2
44694: PUSH
44695: LD_INT 3
44697: PUSH
44698: LD_INT 4
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: IN
44707: PUSH
44708: LD_VAR 0 1
44712: PPUSH
44713: LD_INT 51
44715: PPUSH
44716: CALL_OW 321
44720: PUSH
44721: LD_INT 2
44723: EQUAL
44724: AND
44725: IFFALSE 44742
// bpoints := bpoints * 1.2 ;
44727: LD_ADDR_VAR 0 10
44731: PUSH
44732: LD_VAR 0 10
44736: PUSH
44737: LD_REAL  1.20000000000000E+0000
44740: MUL
44741: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
44742: LD_VAR 0 6
44746: PPUSH
44747: CALL_OW 257
44751: PUSH
44752: LD_INT 5
44754: PUSH
44755: LD_INT 7
44757: PUSH
44758: LD_INT 9
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: LIST
44765: IN
44766: PUSH
44767: LD_VAR 0 1
44771: PPUSH
44772: LD_INT 52
44774: PPUSH
44775: CALL_OW 321
44779: PUSH
44780: LD_INT 2
44782: EQUAL
44783: AND
44784: IFFALSE 44801
// bpoints := bpoints * 1.5 ;
44786: LD_ADDR_VAR 0 10
44790: PUSH
44791: LD_VAR 0 10
44795: PUSH
44796: LD_REAL  1.50000000000000E+0000
44799: MUL
44800: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44801: LD_VAR 0 1
44805: PPUSH
44806: LD_INT 66
44808: PPUSH
44809: CALL_OW 321
44813: PUSH
44814: LD_INT 2
44816: EQUAL
44817: IFFALSE 44834
// bpoints := bpoints * 1.1 ;
44819: LD_ADDR_VAR 0 10
44823: PUSH
44824: LD_VAR 0 10
44828: PUSH
44829: LD_REAL  1.10000000000000E+0000
44832: MUL
44833: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44834: LD_ADDR_VAR 0 10
44838: PUSH
44839: LD_VAR 0 10
44843: PUSH
44844: LD_VAR 0 6
44848: PPUSH
44849: LD_INT 1
44851: PPUSH
44852: CALL_OW 259
44856: PUSH
44857: LD_REAL  1.15000000000000E+0000
44860: MUL
44861: MUL
44862: ST_TO_ADDR
// end ; unit_vehicle :
44863: GO 45693
44865: LD_INT 2
44867: DOUBLE
44868: EQUAL
44869: IFTRUE 44873
44871: GO 45681
44873: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44874: LD_VAR 0 6
44878: PPUSH
44879: CALL_OW 264
44883: PUSH
44884: LD_INT 2
44886: PUSH
44887: LD_INT 42
44889: PUSH
44890: LD_INT 24
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: LIST
44897: IN
44898: IFFALSE 44919
// points := [ 25 , 5 , 3 ] ;
44900: LD_ADDR_VAR 0 9
44904: PUSH
44905: LD_INT 25
44907: PUSH
44908: LD_INT 5
44910: PUSH
44911: LD_INT 3
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: LIST
44918: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44919: LD_VAR 0 6
44923: PPUSH
44924: CALL_OW 264
44928: PUSH
44929: LD_INT 4
44931: PUSH
44932: LD_INT 43
44934: PUSH
44935: LD_INT 25
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: LIST
44942: IN
44943: IFFALSE 44964
// points := [ 40 , 15 , 5 ] ;
44945: LD_ADDR_VAR 0 9
44949: PUSH
44950: LD_INT 40
44952: PUSH
44953: LD_INT 15
44955: PUSH
44956: LD_INT 5
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: LIST
44963: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44964: LD_VAR 0 6
44968: PPUSH
44969: CALL_OW 264
44973: PUSH
44974: LD_INT 3
44976: PUSH
44977: LD_INT 23
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: IN
44984: IFFALSE 45005
// points := [ 7 , 25 , 8 ] ;
44986: LD_ADDR_VAR 0 9
44990: PUSH
44991: LD_INT 7
44993: PUSH
44994: LD_INT 25
44996: PUSH
44997: LD_INT 8
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: LIST
45004: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45005: LD_VAR 0 6
45009: PPUSH
45010: CALL_OW 264
45014: PUSH
45015: LD_INT 5
45017: PUSH
45018: LD_INT 27
45020: PUSH
45021: LD_INT 44
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: LIST
45028: IN
45029: IFFALSE 45050
// points := [ 14 , 50 , 16 ] ;
45031: LD_ADDR_VAR 0 9
45035: PUSH
45036: LD_INT 14
45038: PUSH
45039: LD_INT 50
45041: PUSH
45042: LD_INT 16
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: LIST
45049: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45050: LD_VAR 0 6
45054: PPUSH
45055: CALL_OW 264
45059: PUSH
45060: LD_INT 6
45062: PUSH
45063: LD_INT 46
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: IN
45070: IFFALSE 45091
// points := [ 32 , 120 , 70 ] ;
45072: LD_ADDR_VAR 0 9
45076: PUSH
45077: LD_INT 32
45079: PUSH
45080: LD_INT 120
45082: PUSH
45083: LD_INT 70
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: LIST
45090: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45091: LD_VAR 0 6
45095: PPUSH
45096: CALL_OW 264
45100: PUSH
45101: LD_INT 7
45103: PUSH
45104: LD_INT 28
45106: PUSH
45107: LD_INT 45
45109: PUSH
45110: LD_EXP 50
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: IN
45121: IFFALSE 45142
// points := [ 35 , 20 , 45 ] ;
45123: LD_ADDR_VAR 0 9
45127: PUSH
45128: LD_INT 35
45130: PUSH
45131: LD_INT 20
45133: PUSH
45134: LD_INT 45
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: LIST
45141: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45142: LD_VAR 0 6
45146: PPUSH
45147: CALL_OW 264
45151: PUSH
45152: LD_INT 47
45154: PUSH
45155: EMPTY
45156: LIST
45157: IN
45158: IFFALSE 45179
// points := [ 67 , 45 , 75 ] ;
45160: LD_ADDR_VAR 0 9
45164: PUSH
45165: LD_INT 67
45167: PUSH
45168: LD_INT 45
45170: PUSH
45171: LD_INT 75
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: LIST
45178: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45179: LD_VAR 0 6
45183: PPUSH
45184: CALL_OW 264
45188: PUSH
45189: LD_INT 26
45191: PUSH
45192: EMPTY
45193: LIST
45194: IN
45195: IFFALSE 45216
// points := [ 120 , 30 , 80 ] ;
45197: LD_ADDR_VAR 0 9
45201: PUSH
45202: LD_INT 120
45204: PUSH
45205: LD_INT 30
45207: PUSH
45208: LD_INT 80
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: LIST
45215: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45216: LD_VAR 0 6
45220: PPUSH
45221: CALL_OW 264
45225: PUSH
45226: LD_INT 22
45228: PUSH
45229: EMPTY
45230: LIST
45231: IN
45232: IFFALSE 45253
// points := [ 40 , 1 , 1 ] ;
45234: LD_ADDR_VAR 0 9
45238: PUSH
45239: LD_INT 40
45241: PUSH
45242: LD_INT 1
45244: PUSH
45245: LD_INT 1
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: LIST
45252: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45253: LD_VAR 0 6
45257: PPUSH
45258: CALL_OW 264
45262: PUSH
45263: LD_INT 29
45265: PUSH
45266: EMPTY
45267: LIST
45268: IN
45269: IFFALSE 45290
// points := [ 70 , 200 , 400 ] ;
45271: LD_ADDR_VAR 0 9
45275: PUSH
45276: LD_INT 70
45278: PUSH
45279: LD_INT 200
45281: PUSH
45282: LD_INT 400
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: LIST
45289: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45290: LD_VAR 0 6
45294: PPUSH
45295: CALL_OW 264
45299: PUSH
45300: LD_INT 14
45302: PUSH
45303: LD_INT 53
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: IN
45310: IFFALSE 45331
// points := [ 40 , 10 , 20 ] ;
45312: LD_ADDR_VAR 0 9
45316: PUSH
45317: LD_INT 40
45319: PUSH
45320: LD_INT 10
45322: PUSH
45323: LD_INT 20
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: LIST
45330: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45331: LD_VAR 0 6
45335: PPUSH
45336: CALL_OW 264
45340: PUSH
45341: LD_INT 9
45343: PUSH
45344: EMPTY
45345: LIST
45346: IN
45347: IFFALSE 45368
// points := [ 5 , 70 , 20 ] ;
45349: LD_ADDR_VAR 0 9
45353: PUSH
45354: LD_INT 5
45356: PUSH
45357: LD_INT 70
45359: PUSH
45360: LD_INT 20
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: LIST
45367: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45368: LD_VAR 0 6
45372: PPUSH
45373: CALL_OW 264
45377: PUSH
45378: LD_INT 10
45380: PUSH
45381: EMPTY
45382: LIST
45383: IN
45384: IFFALSE 45405
// points := [ 35 , 110 , 70 ] ;
45386: LD_ADDR_VAR 0 9
45390: PUSH
45391: LD_INT 35
45393: PUSH
45394: LD_INT 110
45396: PUSH
45397: LD_INT 70
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: LIST
45404: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45405: LD_VAR 0 6
45409: PPUSH
45410: CALL_OW 265
45414: PUSH
45415: LD_INT 25
45417: EQUAL
45418: IFFALSE 45439
// points := [ 80 , 65 , 100 ] ;
45420: LD_ADDR_VAR 0 9
45424: PUSH
45425: LD_INT 80
45427: PUSH
45428: LD_INT 65
45430: PUSH
45431: LD_INT 100
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: LIST
45438: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
45439: LD_VAR 0 6
45443: PPUSH
45444: CALL_OW 263
45448: PUSH
45449: LD_INT 1
45451: EQUAL
45452: IFFALSE 45487
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
45454: LD_ADDR_VAR 0 10
45458: PUSH
45459: LD_VAR 0 10
45463: PUSH
45464: LD_VAR 0 6
45468: PPUSH
45469: CALL_OW 311
45473: PPUSH
45474: LD_INT 3
45476: PPUSH
45477: CALL_OW 259
45481: PUSH
45482: LD_INT 4
45484: MUL
45485: MUL
45486: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
45487: LD_VAR 0 6
45491: PPUSH
45492: CALL_OW 263
45496: PUSH
45497: LD_INT 2
45499: EQUAL
45500: IFFALSE 45551
// begin j := IsControledBy ( i ) ;
45502: LD_ADDR_VAR 0 7
45506: PUSH
45507: LD_VAR 0 6
45511: PPUSH
45512: CALL_OW 312
45516: ST_TO_ADDR
// if j then
45517: LD_VAR 0 7
45521: IFFALSE 45551
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45523: LD_ADDR_VAR 0 10
45527: PUSH
45528: LD_VAR 0 10
45532: PUSH
45533: LD_VAR 0 7
45537: PPUSH
45538: LD_INT 3
45540: PPUSH
45541: CALL_OW 259
45545: PUSH
45546: LD_INT 3
45548: MUL
45549: MUL
45550: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
45551: LD_VAR 0 6
45555: PPUSH
45556: CALL_OW 264
45560: PUSH
45561: LD_INT 5
45563: PUSH
45564: LD_INT 6
45566: PUSH
45567: LD_INT 46
45569: PUSH
45570: LD_INT 44
45572: PUSH
45573: LD_INT 47
45575: PUSH
45576: LD_INT 45
45578: PUSH
45579: LD_INT 28
45581: PUSH
45582: LD_INT 7
45584: PUSH
45585: LD_INT 27
45587: PUSH
45588: LD_INT 29
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: IN
45603: PUSH
45604: LD_VAR 0 1
45608: PPUSH
45609: LD_INT 52
45611: PPUSH
45612: CALL_OW 321
45616: PUSH
45617: LD_INT 2
45619: EQUAL
45620: AND
45621: IFFALSE 45638
// bpoints := bpoints * 1.2 ;
45623: LD_ADDR_VAR 0 10
45627: PUSH
45628: LD_VAR 0 10
45632: PUSH
45633: LD_REAL  1.20000000000000E+0000
45636: MUL
45637: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
45638: LD_VAR 0 6
45642: PPUSH
45643: CALL_OW 264
45647: PUSH
45648: LD_INT 6
45650: PUSH
45651: LD_INT 46
45653: PUSH
45654: LD_INT 47
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: LIST
45661: IN
45662: IFFALSE 45679
// bpoints := bpoints * 1.2 ;
45664: LD_ADDR_VAR 0 10
45668: PUSH
45669: LD_VAR 0 10
45673: PUSH
45674: LD_REAL  1.20000000000000E+0000
45677: MUL
45678: ST_TO_ADDR
// end ; unit_building :
45679: GO 45693
45681: LD_INT 3
45683: DOUBLE
45684: EQUAL
45685: IFTRUE 45689
45687: GO 45692
45689: POP
// ; end ;
45690: GO 45693
45692: POP
// for j = 1 to 3 do
45693: LD_ADDR_VAR 0 7
45697: PUSH
45698: DOUBLE
45699: LD_INT 1
45701: DEC
45702: ST_TO_ADDR
45703: LD_INT 3
45705: PUSH
45706: FOR_TO
45707: IFFALSE 45760
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
45709: LD_ADDR_VAR 0 5
45713: PUSH
45714: LD_VAR 0 5
45718: PPUSH
45719: LD_VAR 0 7
45723: PPUSH
45724: LD_VAR 0 5
45728: PUSH
45729: LD_VAR 0 7
45733: ARRAY
45734: PUSH
45735: LD_VAR 0 9
45739: PUSH
45740: LD_VAR 0 7
45744: ARRAY
45745: PUSH
45746: LD_VAR 0 10
45750: MUL
45751: PLUS
45752: PPUSH
45753: CALL_OW 1
45757: ST_TO_ADDR
45758: GO 45706
45760: POP
45761: POP
// end ;
45762: GO 44239
45764: POP
45765: POP
// result := Replace ( result , 4 , tmp ) ;
45766: LD_ADDR_VAR 0 5
45770: PUSH
45771: LD_VAR 0 5
45775: PPUSH
45776: LD_INT 4
45778: PPUSH
45779: LD_VAR 0 8
45783: PPUSH
45784: CALL_OW 1
45788: ST_TO_ADDR
// end ;
45789: LD_VAR 0 5
45793: RET
// export function DangerAtRange ( unit , range ) ; begin
45794: LD_INT 0
45796: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45797: LD_ADDR_VAR 0 3
45801: PUSH
45802: LD_VAR 0 1
45806: PPUSH
45807: CALL_OW 255
45811: PPUSH
45812: LD_VAR 0 1
45816: PPUSH
45817: CALL_OW 250
45821: PPUSH
45822: LD_VAR 0 1
45826: PPUSH
45827: CALL_OW 251
45831: PPUSH
45832: LD_VAR 0 2
45836: PPUSH
45837: CALL 44091 0 4
45841: ST_TO_ADDR
// end ;
45842: LD_VAR 0 3
45846: RET
// export function DangerInArea ( side , area ) ; begin
45847: LD_INT 0
45849: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45850: LD_ADDR_VAR 0 3
45854: PUSH
45855: LD_VAR 0 2
45859: PPUSH
45860: LD_INT 81
45862: PUSH
45863: LD_VAR 0 1
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PPUSH
45872: CALL_OW 70
45876: ST_TO_ADDR
// end ;
45877: LD_VAR 0 3
45881: RET
// export function IsExtension ( b ) ; begin
45882: LD_INT 0
45884: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45885: LD_ADDR_VAR 0 2
45889: PUSH
45890: LD_VAR 0 1
45894: PUSH
45895: LD_INT 23
45897: PUSH
45898: LD_INT 20
45900: PUSH
45901: LD_INT 22
45903: PUSH
45904: LD_INT 17
45906: PUSH
45907: LD_INT 24
45909: PUSH
45910: LD_INT 21
45912: PUSH
45913: LD_INT 19
45915: PUSH
45916: LD_INT 16
45918: PUSH
45919: LD_INT 25
45921: PUSH
45922: LD_INT 18
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: IN
45937: ST_TO_ADDR
// end ;
45938: LD_VAR 0 2
45942: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45943: LD_INT 0
45945: PPUSH
45946: PPUSH
45947: PPUSH
// result := [ ] ;
45948: LD_ADDR_VAR 0 4
45952: PUSH
45953: EMPTY
45954: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45955: LD_ADDR_VAR 0 5
45959: PUSH
45960: LD_VAR 0 2
45964: PPUSH
45965: LD_INT 21
45967: PUSH
45968: LD_INT 3
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PPUSH
45975: CALL_OW 70
45979: ST_TO_ADDR
// if not tmp then
45980: LD_VAR 0 5
45984: NOT
45985: IFFALSE 45989
// exit ;
45987: GO 46053
// if checkLink then
45989: LD_VAR 0 3
45993: IFFALSE 46043
// begin for i in tmp do
45995: LD_ADDR_VAR 0 6
45999: PUSH
46000: LD_VAR 0 5
46004: PUSH
46005: FOR_IN
46006: IFFALSE 46041
// if GetBase ( i ) <> base then
46008: LD_VAR 0 6
46012: PPUSH
46013: CALL_OW 274
46017: PUSH
46018: LD_VAR 0 1
46022: NONEQUAL
46023: IFFALSE 46039
// ComLinkToBase ( base , i ) ;
46025: LD_VAR 0 1
46029: PPUSH
46030: LD_VAR 0 6
46034: PPUSH
46035: CALL_OW 169
46039: GO 46005
46041: POP
46042: POP
// end ; result := tmp ;
46043: LD_ADDR_VAR 0 4
46047: PUSH
46048: LD_VAR 0 5
46052: ST_TO_ADDR
// end ;
46053: LD_VAR 0 4
46057: RET
// export function ComComplete ( units , b ) ; var i ; begin
46058: LD_INT 0
46060: PPUSH
46061: PPUSH
// if not units then
46062: LD_VAR 0 1
46066: NOT
46067: IFFALSE 46071
// exit ;
46069: GO 46161
// for i in units do
46071: LD_ADDR_VAR 0 4
46075: PUSH
46076: LD_VAR 0 1
46080: PUSH
46081: FOR_IN
46082: IFFALSE 46159
// if BuildingStatus ( b ) = bs_build then
46084: LD_VAR 0 2
46088: PPUSH
46089: CALL_OW 461
46093: PUSH
46094: LD_INT 1
46096: EQUAL
46097: IFFALSE 46157
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46099: LD_VAR 0 4
46103: PPUSH
46104: LD_STRING h
46106: PUSH
46107: LD_VAR 0 2
46111: PPUSH
46112: CALL_OW 250
46116: PUSH
46117: LD_VAR 0 2
46121: PPUSH
46122: CALL_OW 251
46126: PUSH
46127: LD_VAR 0 2
46131: PUSH
46132: LD_INT 0
46134: PUSH
46135: LD_INT 0
46137: PUSH
46138: LD_INT 0
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: PUSH
46150: EMPTY
46151: LIST
46152: PPUSH
46153: CALL_OW 446
46157: GO 46081
46159: POP
46160: POP
// end ;
46161: LD_VAR 0 3
46165: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46166: LD_INT 0
46168: PPUSH
46169: PPUSH
46170: PPUSH
46171: PPUSH
46172: PPUSH
46173: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46174: LD_VAR 0 1
46178: NOT
46179: PUSH
46180: LD_VAR 0 1
46184: PPUSH
46185: CALL_OW 263
46189: PUSH
46190: LD_INT 2
46192: NONEQUAL
46193: OR
46194: IFFALSE 46198
// exit ;
46196: GO 46514
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46198: LD_ADDR_VAR 0 6
46202: PUSH
46203: LD_INT 22
46205: PUSH
46206: LD_VAR 0 1
46210: PPUSH
46211: CALL_OW 255
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 2
46222: PUSH
46223: LD_INT 30
46225: PUSH
46226: LD_INT 36
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 34
46235: PUSH
46236: LD_INT 31
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: LIST
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PPUSH
46252: CALL_OW 69
46256: ST_TO_ADDR
// if not tmp then
46257: LD_VAR 0 6
46261: NOT
46262: IFFALSE 46266
// exit ;
46264: GO 46514
// result := [ ] ;
46266: LD_ADDR_VAR 0 2
46270: PUSH
46271: EMPTY
46272: ST_TO_ADDR
// for i in tmp do
46273: LD_ADDR_VAR 0 3
46277: PUSH
46278: LD_VAR 0 6
46282: PUSH
46283: FOR_IN
46284: IFFALSE 46355
// begin t := UnitsInside ( i ) ;
46286: LD_ADDR_VAR 0 4
46290: PUSH
46291: LD_VAR 0 3
46295: PPUSH
46296: CALL_OW 313
46300: ST_TO_ADDR
// if t then
46301: LD_VAR 0 4
46305: IFFALSE 46353
// for j in t do
46307: LD_ADDR_VAR 0 7
46311: PUSH
46312: LD_VAR 0 4
46316: PUSH
46317: FOR_IN
46318: IFFALSE 46351
// result := Replace ( result , result + 1 , j ) ;
46320: LD_ADDR_VAR 0 2
46324: PUSH
46325: LD_VAR 0 2
46329: PPUSH
46330: LD_VAR 0 2
46334: PUSH
46335: LD_INT 1
46337: PLUS
46338: PPUSH
46339: LD_VAR 0 7
46343: PPUSH
46344: CALL_OW 1
46348: ST_TO_ADDR
46349: GO 46317
46351: POP
46352: POP
// end ;
46353: GO 46283
46355: POP
46356: POP
// if not result then
46357: LD_VAR 0 2
46361: NOT
46362: IFFALSE 46366
// exit ;
46364: GO 46514
// mech := result [ 1 ] ;
46366: LD_ADDR_VAR 0 5
46370: PUSH
46371: LD_VAR 0 2
46375: PUSH
46376: LD_INT 1
46378: ARRAY
46379: ST_TO_ADDR
// if result > 1 then
46380: LD_VAR 0 2
46384: PUSH
46385: LD_INT 1
46387: GREATER
46388: IFFALSE 46500
// begin for i = 2 to result do
46390: LD_ADDR_VAR 0 3
46394: PUSH
46395: DOUBLE
46396: LD_INT 2
46398: DEC
46399: ST_TO_ADDR
46400: LD_VAR 0 2
46404: PUSH
46405: FOR_TO
46406: IFFALSE 46498
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46408: LD_ADDR_VAR 0 4
46412: PUSH
46413: LD_VAR 0 2
46417: PUSH
46418: LD_VAR 0 3
46422: ARRAY
46423: PPUSH
46424: LD_INT 3
46426: PPUSH
46427: CALL_OW 259
46431: PUSH
46432: LD_VAR 0 2
46436: PUSH
46437: LD_VAR 0 3
46441: ARRAY
46442: PPUSH
46443: CALL_OW 432
46447: MINUS
46448: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
46449: LD_VAR 0 4
46453: PUSH
46454: LD_VAR 0 5
46458: PPUSH
46459: LD_INT 3
46461: PPUSH
46462: CALL_OW 259
46466: PUSH
46467: LD_VAR 0 5
46471: PPUSH
46472: CALL_OW 432
46476: MINUS
46477: GREATEREQUAL
46478: IFFALSE 46496
// mech := result [ i ] ;
46480: LD_ADDR_VAR 0 5
46484: PUSH
46485: LD_VAR 0 2
46489: PUSH
46490: LD_VAR 0 3
46494: ARRAY
46495: ST_TO_ADDR
// end ;
46496: GO 46405
46498: POP
46499: POP
// end ; ComLinkTo ( vehicle , mech ) ;
46500: LD_VAR 0 1
46504: PPUSH
46505: LD_VAR 0 5
46509: PPUSH
46510: CALL_OW 135
// end ;
46514: LD_VAR 0 2
46518: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
46519: LD_INT 0
46521: PPUSH
46522: PPUSH
46523: PPUSH
46524: PPUSH
46525: PPUSH
46526: PPUSH
46527: PPUSH
46528: PPUSH
46529: PPUSH
46530: PPUSH
46531: PPUSH
46532: PPUSH
46533: PPUSH
// result := [ ] ;
46534: LD_ADDR_VAR 0 7
46538: PUSH
46539: EMPTY
46540: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46541: LD_VAR 0 1
46545: PPUSH
46546: CALL_OW 266
46550: PUSH
46551: LD_INT 0
46553: PUSH
46554: LD_INT 1
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: IN
46561: NOT
46562: IFFALSE 46566
// exit ;
46564: GO 48200
// if name then
46566: LD_VAR 0 3
46570: IFFALSE 46586
// SetBName ( base_dep , name ) ;
46572: LD_VAR 0 1
46576: PPUSH
46577: LD_VAR 0 3
46581: PPUSH
46582: CALL_OW 500
// base := GetBase ( base_dep ) ;
46586: LD_ADDR_VAR 0 15
46590: PUSH
46591: LD_VAR 0 1
46595: PPUSH
46596: CALL_OW 274
46600: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
46601: LD_ADDR_VAR 0 16
46605: PUSH
46606: LD_VAR 0 1
46610: PPUSH
46611: CALL_OW 255
46615: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
46616: LD_ADDR_VAR 0 17
46620: PUSH
46621: LD_VAR 0 1
46625: PPUSH
46626: CALL_OW 248
46630: ST_TO_ADDR
// if sources then
46631: LD_VAR 0 5
46635: IFFALSE 46682
// for i = 1 to 3 do
46637: LD_ADDR_VAR 0 8
46641: PUSH
46642: DOUBLE
46643: LD_INT 1
46645: DEC
46646: ST_TO_ADDR
46647: LD_INT 3
46649: PUSH
46650: FOR_TO
46651: IFFALSE 46680
// AddResourceType ( base , i , sources [ i ] ) ;
46653: LD_VAR 0 15
46657: PPUSH
46658: LD_VAR 0 8
46662: PPUSH
46663: LD_VAR 0 5
46667: PUSH
46668: LD_VAR 0 8
46672: ARRAY
46673: PPUSH
46674: CALL_OW 276
46678: GO 46650
46680: POP
46681: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
46682: LD_ADDR_VAR 0 18
46686: PUSH
46687: LD_VAR 0 15
46691: PPUSH
46692: LD_VAR 0 2
46696: PPUSH
46697: LD_INT 1
46699: PPUSH
46700: CALL 45943 0 3
46704: ST_TO_ADDR
// InitHc ;
46705: CALL_OW 19
// InitUc ;
46709: CALL_OW 18
// uc_side := side ;
46713: LD_ADDR_OWVAR 20
46717: PUSH
46718: LD_VAR 0 16
46722: ST_TO_ADDR
// uc_nation := nation ;
46723: LD_ADDR_OWVAR 21
46727: PUSH
46728: LD_VAR 0 17
46732: ST_TO_ADDR
// if buildings then
46733: LD_VAR 0 18
46737: IFFALSE 48059
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
46739: LD_ADDR_VAR 0 19
46743: PUSH
46744: LD_VAR 0 18
46748: PPUSH
46749: LD_INT 2
46751: PUSH
46752: LD_INT 30
46754: PUSH
46755: LD_INT 29
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 30
46764: PUSH
46765: LD_INT 30
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: LIST
46776: PPUSH
46777: CALL_OW 72
46781: ST_TO_ADDR
// if tmp then
46782: LD_VAR 0 19
46786: IFFALSE 46834
// for i in tmp do
46788: LD_ADDR_VAR 0 8
46792: PUSH
46793: LD_VAR 0 19
46797: PUSH
46798: FOR_IN
46799: IFFALSE 46832
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46801: LD_VAR 0 8
46805: PPUSH
46806: CALL_OW 250
46810: PPUSH
46811: LD_VAR 0 8
46815: PPUSH
46816: CALL_OW 251
46820: PPUSH
46821: LD_VAR 0 16
46825: PPUSH
46826: CALL_OW 441
46830: GO 46798
46832: POP
46833: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46834: LD_VAR 0 18
46838: PPUSH
46839: LD_INT 2
46841: PUSH
46842: LD_INT 30
46844: PUSH
46845: LD_INT 32
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 30
46854: PUSH
46855: LD_INT 33
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: LIST
46866: PPUSH
46867: CALL_OW 72
46871: IFFALSE 46959
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46873: LD_ADDR_VAR 0 8
46877: PUSH
46878: LD_VAR 0 18
46882: PPUSH
46883: LD_INT 2
46885: PUSH
46886: LD_INT 30
46888: PUSH
46889: LD_INT 32
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 30
46898: PUSH
46899: LD_INT 33
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: LIST
46910: PPUSH
46911: CALL_OW 72
46915: PUSH
46916: FOR_IN
46917: IFFALSE 46957
// begin if not GetBWeapon ( i ) then
46919: LD_VAR 0 8
46923: PPUSH
46924: CALL_OW 269
46928: NOT
46929: IFFALSE 46955
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46931: LD_VAR 0 8
46935: PPUSH
46936: LD_VAR 0 8
46940: PPUSH
46941: LD_VAR 0 2
46945: PPUSH
46946: CALL 48205 0 2
46950: PPUSH
46951: CALL_OW 431
// end ;
46955: GO 46916
46957: POP
46958: POP
// end ; for i = 1 to personel do
46959: LD_ADDR_VAR 0 8
46963: PUSH
46964: DOUBLE
46965: LD_INT 1
46967: DEC
46968: ST_TO_ADDR
46969: LD_VAR 0 6
46973: PUSH
46974: FOR_TO
46975: IFFALSE 48039
// begin if i > 4 then
46977: LD_VAR 0 8
46981: PUSH
46982: LD_INT 4
46984: GREATER
46985: IFFALSE 46989
// break ;
46987: GO 48039
// case i of 1 :
46989: LD_VAR 0 8
46993: PUSH
46994: LD_INT 1
46996: DOUBLE
46997: EQUAL
46998: IFTRUE 47002
47000: GO 47082
47002: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47003: LD_ADDR_VAR 0 12
47007: PUSH
47008: LD_VAR 0 18
47012: PPUSH
47013: LD_INT 22
47015: PUSH
47016: LD_VAR 0 16
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 58
47027: PUSH
47028: EMPTY
47029: LIST
47030: PUSH
47031: LD_INT 2
47033: PUSH
47034: LD_INT 30
47036: PUSH
47037: LD_INT 32
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 30
47046: PUSH
47047: LD_INT 4
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 30
47056: PUSH
47057: LD_INT 5
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: LIST
47074: PPUSH
47075: CALL_OW 72
47079: ST_TO_ADDR
47080: GO 47304
47082: LD_INT 2
47084: DOUBLE
47085: EQUAL
47086: IFTRUE 47090
47088: GO 47152
47090: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47091: LD_ADDR_VAR 0 12
47095: PUSH
47096: LD_VAR 0 18
47100: PPUSH
47101: LD_INT 22
47103: PUSH
47104: LD_VAR 0 16
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 2
47115: PUSH
47116: LD_INT 30
47118: PUSH
47119: LD_INT 0
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 30
47128: PUSH
47129: LD_INT 1
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: LIST
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PPUSH
47145: CALL_OW 72
47149: ST_TO_ADDR
47150: GO 47304
47152: LD_INT 3
47154: DOUBLE
47155: EQUAL
47156: IFTRUE 47160
47158: GO 47222
47160: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47161: LD_ADDR_VAR 0 12
47165: PUSH
47166: LD_VAR 0 18
47170: PPUSH
47171: LD_INT 22
47173: PUSH
47174: LD_VAR 0 16
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 2
47185: PUSH
47186: LD_INT 30
47188: PUSH
47189: LD_INT 2
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 30
47198: PUSH
47199: LD_INT 3
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: LIST
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PPUSH
47215: CALL_OW 72
47219: ST_TO_ADDR
47220: GO 47304
47222: LD_INT 4
47224: DOUBLE
47225: EQUAL
47226: IFTRUE 47230
47228: GO 47303
47230: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47231: LD_ADDR_VAR 0 12
47235: PUSH
47236: LD_VAR 0 18
47240: PPUSH
47241: LD_INT 22
47243: PUSH
47244: LD_VAR 0 16
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 2
47255: PUSH
47256: LD_INT 30
47258: PUSH
47259: LD_INT 6
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 30
47268: PUSH
47269: LD_INT 7
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 30
47278: PUSH
47279: LD_INT 8
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PPUSH
47296: CALL_OW 72
47300: ST_TO_ADDR
47301: GO 47304
47303: POP
// if i = 1 then
47304: LD_VAR 0 8
47308: PUSH
47309: LD_INT 1
47311: EQUAL
47312: IFFALSE 47423
// begin tmp := [ ] ;
47314: LD_ADDR_VAR 0 19
47318: PUSH
47319: EMPTY
47320: ST_TO_ADDR
// for j in f do
47321: LD_ADDR_VAR 0 9
47325: PUSH
47326: LD_VAR 0 12
47330: PUSH
47331: FOR_IN
47332: IFFALSE 47405
// if GetBType ( j ) = b_bunker then
47334: LD_VAR 0 9
47338: PPUSH
47339: CALL_OW 266
47343: PUSH
47344: LD_INT 32
47346: EQUAL
47347: IFFALSE 47374
// tmp := Insert ( tmp , 1 , j ) else
47349: LD_ADDR_VAR 0 19
47353: PUSH
47354: LD_VAR 0 19
47358: PPUSH
47359: LD_INT 1
47361: PPUSH
47362: LD_VAR 0 9
47366: PPUSH
47367: CALL_OW 2
47371: ST_TO_ADDR
47372: GO 47403
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47374: LD_ADDR_VAR 0 19
47378: PUSH
47379: LD_VAR 0 19
47383: PPUSH
47384: LD_VAR 0 19
47388: PUSH
47389: LD_INT 1
47391: PLUS
47392: PPUSH
47393: LD_VAR 0 9
47397: PPUSH
47398: CALL_OW 2
47402: ST_TO_ADDR
47403: GO 47331
47405: POP
47406: POP
// if tmp then
47407: LD_VAR 0 19
47411: IFFALSE 47423
// f := tmp ;
47413: LD_ADDR_VAR 0 12
47417: PUSH
47418: LD_VAR 0 19
47422: ST_TO_ADDR
// end ; x := personel [ i ] ;
47423: LD_ADDR_VAR 0 13
47427: PUSH
47428: LD_VAR 0 6
47432: PUSH
47433: LD_VAR 0 8
47437: ARRAY
47438: ST_TO_ADDR
// if x = - 1 then
47439: LD_VAR 0 13
47443: PUSH
47444: LD_INT 1
47446: NEG
47447: EQUAL
47448: IFFALSE 47657
// begin for j in f do
47450: LD_ADDR_VAR 0 9
47454: PUSH
47455: LD_VAR 0 12
47459: PUSH
47460: FOR_IN
47461: IFFALSE 47653
// repeat InitHc ;
47463: CALL_OW 19
// if GetBType ( j ) = b_barracks then
47467: LD_VAR 0 9
47471: PPUSH
47472: CALL_OW 266
47476: PUSH
47477: LD_INT 5
47479: EQUAL
47480: IFFALSE 47550
// begin if UnitsInside ( j ) < 3 then
47482: LD_VAR 0 9
47486: PPUSH
47487: CALL_OW 313
47491: PUSH
47492: LD_INT 3
47494: LESS
47495: IFFALSE 47531
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47497: LD_INT 0
47499: PPUSH
47500: LD_INT 5
47502: PUSH
47503: LD_INT 8
47505: PUSH
47506: LD_INT 9
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: LIST
47513: PUSH
47514: LD_VAR 0 17
47518: ARRAY
47519: PPUSH
47520: LD_VAR 0 4
47524: PPUSH
47525: CALL_OW 380
47529: GO 47548
// PrepareHuman ( false , i , skill ) ;
47531: LD_INT 0
47533: PPUSH
47534: LD_VAR 0 8
47538: PPUSH
47539: LD_VAR 0 4
47543: PPUSH
47544: CALL_OW 380
// end else
47548: GO 47567
// PrepareHuman ( false , i , skill ) ;
47550: LD_INT 0
47552: PPUSH
47553: LD_VAR 0 8
47557: PPUSH
47558: LD_VAR 0 4
47562: PPUSH
47563: CALL_OW 380
// un := CreateHuman ;
47567: LD_ADDR_VAR 0 14
47571: PUSH
47572: CALL_OW 44
47576: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47577: LD_ADDR_VAR 0 7
47581: PUSH
47582: LD_VAR 0 7
47586: PPUSH
47587: LD_INT 1
47589: PPUSH
47590: LD_VAR 0 14
47594: PPUSH
47595: CALL_OW 2
47599: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
47600: LD_VAR 0 14
47604: PPUSH
47605: LD_VAR 0 9
47609: PPUSH
47610: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
47614: LD_VAR 0 9
47618: PPUSH
47619: CALL_OW 313
47623: PUSH
47624: LD_INT 6
47626: EQUAL
47627: PUSH
47628: LD_VAR 0 9
47632: PPUSH
47633: CALL_OW 266
47637: PUSH
47638: LD_INT 32
47640: PUSH
47641: LD_INT 31
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: IN
47648: OR
47649: IFFALSE 47463
47651: GO 47460
47653: POP
47654: POP
// end else
47655: GO 48037
// for j = 1 to x do
47657: LD_ADDR_VAR 0 9
47661: PUSH
47662: DOUBLE
47663: LD_INT 1
47665: DEC
47666: ST_TO_ADDR
47667: LD_VAR 0 13
47671: PUSH
47672: FOR_TO
47673: IFFALSE 48035
// begin InitHc ;
47675: CALL_OW 19
// if not f then
47679: LD_VAR 0 12
47683: NOT
47684: IFFALSE 47773
// begin PrepareHuman ( false , i , skill ) ;
47686: LD_INT 0
47688: PPUSH
47689: LD_VAR 0 8
47693: PPUSH
47694: LD_VAR 0 4
47698: PPUSH
47699: CALL_OW 380
// un := CreateHuman ;
47703: LD_ADDR_VAR 0 14
47707: PUSH
47708: CALL_OW 44
47712: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47713: LD_ADDR_VAR 0 7
47717: PUSH
47718: LD_VAR 0 7
47722: PPUSH
47723: LD_INT 1
47725: PPUSH
47726: LD_VAR 0 14
47730: PPUSH
47731: CALL_OW 2
47735: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47736: LD_VAR 0 14
47740: PPUSH
47741: LD_VAR 0 1
47745: PPUSH
47746: CALL_OW 250
47750: PPUSH
47751: LD_VAR 0 1
47755: PPUSH
47756: CALL_OW 251
47760: PPUSH
47761: LD_INT 10
47763: PPUSH
47764: LD_INT 0
47766: PPUSH
47767: CALL_OW 50
// continue ;
47771: GO 47672
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47773: LD_VAR 0 12
47777: PUSH
47778: LD_INT 1
47780: ARRAY
47781: PPUSH
47782: CALL_OW 313
47786: PUSH
47787: LD_VAR 0 12
47791: PUSH
47792: LD_INT 1
47794: ARRAY
47795: PPUSH
47796: CALL_OW 266
47800: PUSH
47801: LD_INT 32
47803: PUSH
47804: LD_INT 31
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: IN
47811: AND
47812: PUSH
47813: LD_VAR 0 12
47817: PUSH
47818: LD_INT 1
47820: ARRAY
47821: PPUSH
47822: CALL_OW 313
47826: PUSH
47827: LD_INT 6
47829: EQUAL
47830: OR
47831: IFFALSE 47851
// f := Delete ( f , 1 ) ;
47833: LD_ADDR_VAR 0 12
47837: PUSH
47838: LD_VAR 0 12
47842: PPUSH
47843: LD_INT 1
47845: PPUSH
47846: CALL_OW 3
47850: ST_TO_ADDR
// if not f then
47851: LD_VAR 0 12
47855: NOT
47856: IFFALSE 47874
// begin x := x + 2 ;
47858: LD_ADDR_VAR 0 13
47862: PUSH
47863: LD_VAR 0 13
47867: PUSH
47868: LD_INT 2
47870: PLUS
47871: ST_TO_ADDR
// continue ;
47872: GO 47672
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47874: LD_VAR 0 12
47878: PUSH
47879: LD_INT 1
47881: ARRAY
47882: PPUSH
47883: CALL_OW 266
47887: PUSH
47888: LD_INT 5
47890: EQUAL
47891: IFFALSE 47965
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47893: LD_VAR 0 12
47897: PUSH
47898: LD_INT 1
47900: ARRAY
47901: PPUSH
47902: CALL_OW 313
47906: PUSH
47907: LD_INT 3
47909: LESS
47910: IFFALSE 47946
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47912: LD_INT 0
47914: PPUSH
47915: LD_INT 5
47917: PUSH
47918: LD_INT 8
47920: PUSH
47921: LD_INT 9
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: LIST
47928: PUSH
47929: LD_VAR 0 17
47933: ARRAY
47934: PPUSH
47935: LD_VAR 0 4
47939: PPUSH
47940: CALL_OW 380
47944: GO 47963
// PrepareHuman ( false , i , skill ) ;
47946: LD_INT 0
47948: PPUSH
47949: LD_VAR 0 8
47953: PPUSH
47954: LD_VAR 0 4
47958: PPUSH
47959: CALL_OW 380
// end else
47963: GO 47982
// PrepareHuman ( false , i , skill ) ;
47965: LD_INT 0
47967: PPUSH
47968: LD_VAR 0 8
47972: PPUSH
47973: LD_VAR 0 4
47977: PPUSH
47978: CALL_OW 380
// un := CreateHuman ;
47982: LD_ADDR_VAR 0 14
47986: PUSH
47987: CALL_OW 44
47991: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47992: LD_ADDR_VAR 0 7
47996: PUSH
47997: LD_VAR 0 7
48001: PPUSH
48002: LD_INT 1
48004: PPUSH
48005: LD_VAR 0 14
48009: PPUSH
48010: CALL_OW 2
48014: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48015: LD_VAR 0 14
48019: PPUSH
48020: LD_VAR 0 12
48024: PUSH
48025: LD_INT 1
48027: ARRAY
48028: PPUSH
48029: CALL_OW 52
// end ;
48033: GO 47672
48035: POP
48036: POP
// end ;
48037: GO 46974
48039: POP
48040: POP
// result := result ^ buildings ;
48041: LD_ADDR_VAR 0 7
48045: PUSH
48046: LD_VAR 0 7
48050: PUSH
48051: LD_VAR 0 18
48055: ADD
48056: ST_TO_ADDR
// end else
48057: GO 48200
// begin for i = 1 to personel do
48059: LD_ADDR_VAR 0 8
48063: PUSH
48064: DOUBLE
48065: LD_INT 1
48067: DEC
48068: ST_TO_ADDR
48069: LD_VAR 0 6
48073: PUSH
48074: FOR_TO
48075: IFFALSE 48198
// begin if i > 4 then
48077: LD_VAR 0 8
48081: PUSH
48082: LD_INT 4
48084: GREATER
48085: IFFALSE 48089
// break ;
48087: GO 48198
// x := personel [ i ] ;
48089: LD_ADDR_VAR 0 13
48093: PUSH
48094: LD_VAR 0 6
48098: PUSH
48099: LD_VAR 0 8
48103: ARRAY
48104: ST_TO_ADDR
// if x = - 1 then
48105: LD_VAR 0 13
48109: PUSH
48110: LD_INT 1
48112: NEG
48113: EQUAL
48114: IFFALSE 48118
// continue ;
48116: GO 48074
// PrepareHuman ( false , i , skill ) ;
48118: LD_INT 0
48120: PPUSH
48121: LD_VAR 0 8
48125: PPUSH
48126: LD_VAR 0 4
48130: PPUSH
48131: CALL_OW 380
// un := CreateHuman ;
48135: LD_ADDR_VAR 0 14
48139: PUSH
48140: CALL_OW 44
48144: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48145: LD_VAR 0 14
48149: PPUSH
48150: LD_VAR 0 1
48154: PPUSH
48155: CALL_OW 250
48159: PPUSH
48160: LD_VAR 0 1
48164: PPUSH
48165: CALL_OW 251
48169: PPUSH
48170: LD_INT 10
48172: PPUSH
48173: LD_INT 0
48175: PPUSH
48176: CALL_OW 50
// result := result ^ un ;
48180: LD_ADDR_VAR 0 7
48184: PUSH
48185: LD_VAR 0 7
48189: PUSH
48190: LD_VAR 0 14
48194: ADD
48195: ST_TO_ADDR
// end ;
48196: GO 48074
48198: POP
48199: POP
// end ; end ;
48200: LD_VAR 0 7
48204: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48205: LD_INT 0
48207: PPUSH
48208: PPUSH
48209: PPUSH
48210: PPUSH
48211: PPUSH
48212: PPUSH
48213: PPUSH
48214: PPUSH
48215: PPUSH
48216: PPUSH
48217: PPUSH
48218: PPUSH
48219: PPUSH
48220: PPUSH
48221: PPUSH
48222: PPUSH
// result := false ;
48223: LD_ADDR_VAR 0 3
48227: PUSH
48228: LD_INT 0
48230: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48231: LD_VAR 0 1
48235: NOT
48236: PUSH
48237: LD_VAR 0 1
48241: PPUSH
48242: CALL_OW 266
48246: PUSH
48247: LD_INT 32
48249: PUSH
48250: LD_INT 33
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: IN
48257: NOT
48258: OR
48259: IFFALSE 48263
// exit ;
48261: GO 49372
// nat := GetNation ( tower ) ;
48263: LD_ADDR_VAR 0 12
48267: PUSH
48268: LD_VAR 0 1
48272: PPUSH
48273: CALL_OW 248
48277: ST_TO_ADDR
// side := GetSide ( tower ) ;
48278: LD_ADDR_VAR 0 16
48282: PUSH
48283: LD_VAR 0 1
48287: PPUSH
48288: CALL_OW 255
48292: ST_TO_ADDR
// x := GetX ( tower ) ;
48293: LD_ADDR_VAR 0 10
48297: PUSH
48298: LD_VAR 0 1
48302: PPUSH
48303: CALL_OW 250
48307: ST_TO_ADDR
// y := GetY ( tower ) ;
48308: LD_ADDR_VAR 0 11
48312: PUSH
48313: LD_VAR 0 1
48317: PPUSH
48318: CALL_OW 251
48322: ST_TO_ADDR
// if not x or not y then
48323: LD_VAR 0 10
48327: NOT
48328: PUSH
48329: LD_VAR 0 11
48333: NOT
48334: OR
48335: IFFALSE 48339
// exit ;
48337: GO 49372
// weapon := 0 ;
48339: LD_ADDR_VAR 0 18
48343: PUSH
48344: LD_INT 0
48346: ST_TO_ADDR
// fac_list := [ ] ;
48347: LD_ADDR_VAR 0 17
48351: PUSH
48352: EMPTY
48353: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48354: LD_ADDR_VAR 0 6
48358: PUSH
48359: LD_VAR 0 1
48363: PPUSH
48364: CALL_OW 274
48368: PPUSH
48369: LD_VAR 0 2
48373: PPUSH
48374: LD_INT 0
48376: PPUSH
48377: CALL 45943 0 3
48381: PPUSH
48382: LD_INT 30
48384: PUSH
48385: LD_INT 3
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PPUSH
48392: CALL_OW 72
48396: ST_TO_ADDR
// if not factories then
48397: LD_VAR 0 6
48401: NOT
48402: IFFALSE 48406
// exit ;
48404: GO 49372
// for i in factories do
48406: LD_ADDR_VAR 0 8
48410: PUSH
48411: LD_VAR 0 6
48415: PUSH
48416: FOR_IN
48417: IFFALSE 48442
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48419: LD_ADDR_VAR 0 17
48423: PUSH
48424: LD_VAR 0 17
48428: PUSH
48429: LD_VAR 0 8
48433: PPUSH
48434: CALL_OW 478
48438: UNION
48439: ST_TO_ADDR
48440: GO 48416
48442: POP
48443: POP
// if not fac_list then
48444: LD_VAR 0 17
48448: NOT
48449: IFFALSE 48453
// exit ;
48451: GO 49372
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48453: LD_ADDR_VAR 0 5
48457: PUSH
48458: LD_INT 4
48460: PUSH
48461: LD_INT 5
48463: PUSH
48464: LD_INT 9
48466: PUSH
48467: LD_INT 10
48469: PUSH
48470: LD_INT 6
48472: PUSH
48473: LD_INT 7
48475: PUSH
48476: LD_INT 11
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 27
48490: PUSH
48491: LD_INT 28
48493: PUSH
48494: LD_INT 26
48496: PUSH
48497: LD_INT 30
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 43
48508: PUSH
48509: LD_INT 44
48511: PUSH
48512: LD_INT 46
48514: PUSH
48515: LD_INT 45
48517: PUSH
48518: LD_INT 47
48520: PUSH
48521: LD_INT 49
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: LIST
48536: PUSH
48537: LD_VAR 0 12
48541: ARRAY
48542: ST_TO_ADDR
// list := list isect fac_list ;
48543: LD_ADDR_VAR 0 5
48547: PUSH
48548: LD_VAR 0 5
48552: PUSH
48553: LD_VAR 0 17
48557: ISECT
48558: ST_TO_ADDR
// if not list then
48559: LD_VAR 0 5
48563: NOT
48564: IFFALSE 48568
// exit ;
48566: GO 49372
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
48568: LD_VAR 0 12
48572: PUSH
48573: LD_INT 3
48575: EQUAL
48576: PUSH
48577: LD_INT 49
48579: PUSH
48580: LD_VAR 0 5
48584: IN
48585: AND
48586: PUSH
48587: LD_INT 31
48589: PPUSH
48590: LD_VAR 0 16
48594: PPUSH
48595: CALL_OW 321
48599: PUSH
48600: LD_INT 2
48602: EQUAL
48603: AND
48604: IFFALSE 48664
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
48606: LD_INT 22
48608: PUSH
48609: LD_VAR 0 16
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 35
48620: PUSH
48621: LD_INT 49
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 91
48630: PUSH
48631: LD_VAR 0 1
48635: PUSH
48636: LD_INT 10
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: LIST
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: LIST
48648: PPUSH
48649: CALL_OW 69
48653: NOT
48654: IFFALSE 48664
// weapon := ru_time_lapser ;
48656: LD_ADDR_VAR 0 18
48660: PUSH
48661: LD_INT 49
48663: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
48664: LD_VAR 0 12
48668: PUSH
48669: LD_INT 1
48671: PUSH
48672: LD_INT 2
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: IN
48679: PUSH
48680: LD_INT 11
48682: PUSH
48683: LD_VAR 0 5
48687: IN
48688: PUSH
48689: LD_INT 30
48691: PUSH
48692: LD_VAR 0 5
48696: IN
48697: OR
48698: AND
48699: PUSH
48700: LD_INT 6
48702: PPUSH
48703: LD_VAR 0 16
48707: PPUSH
48708: CALL_OW 321
48712: PUSH
48713: LD_INT 2
48715: EQUAL
48716: AND
48717: IFFALSE 48882
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
48719: LD_INT 22
48721: PUSH
48722: LD_VAR 0 16
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 2
48733: PUSH
48734: LD_INT 35
48736: PUSH
48737: LD_INT 11
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 35
48746: PUSH
48747: LD_INT 30
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 91
48761: PUSH
48762: LD_VAR 0 1
48766: PUSH
48767: LD_INT 18
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: LIST
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: LIST
48779: PPUSH
48780: CALL_OW 69
48784: NOT
48785: PUSH
48786: LD_INT 22
48788: PUSH
48789: LD_VAR 0 16
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 2
48800: PUSH
48801: LD_INT 30
48803: PUSH
48804: LD_INT 32
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 30
48813: PUSH
48814: LD_INT 33
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 91
48828: PUSH
48829: LD_VAR 0 1
48833: PUSH
48834: LD_INT 12
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: LIST
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: LIST
48846: PUSH
48847: EMPTY
48848: LIST
48849: PPUSH
48850: CALL_OW 69
48854: PUSH
48855: LD_INT 2
48857: GREATER
48858: AND
48859: IFFALSE 48882
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48861: LD_ADDR_VAR 0 18
48865: PUSH
48866: LD_INT 11
48868: PUSH
48869: LD_INT 30
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_VAR 0 12
48880: ARRAY
48881: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48882: LD_VAR 0 18
48886: NOT
48887: PUSH
48888: LD_INT 40
48890: PPUSH
48891: LD_VAR 0 16
48895: PPUSH
48896: CALL_OW 321
48900: PUSH
48901: LD_INT 2
48903: EQUAL
48904: AND
48905: PUSH
48906: LD_INT 7
48908: PUSH
48909: LD_VAR 0 5
48913: IN
48914: PUSH
48915: LD_INT 28
48917: PUSH
48918: LD_VAR 0 5
48922: IN
48923: OR
48924: PUSH
48925: LD_INT 45
48927: PUSH
48928: LD_VAR 0 5
48932: IN
48933: OR
48934: AND
48935: IFFALSE 49189
// begin hex := GetHexInfo ( x , y ) ;
48937: LD_ADDR_VAR 0 4
48941: PUSH
48942: LD_VAR 0 10
48946: PPUSH
48947: LD_VAR 0 11
48951: PPUSH
48952: CALL_OW 546
48956: ST_TO_ADDR
// if hex [ 1 ] then
48957: LD_VAR 0 4
48961: PUSH
48962: LD_INT 1
48964: ARRAY
48965: IFFALSE 48969
// exit ;
48967: GO 49372
// height := hex [ 2 ] ;
48969: LD_ADDR_VAR 0 15
48973: PUSH
48974: LD_VAR 0 4
48978: PUSH
48979: LD_INT 2
48981: ARRAY
48982: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48983: LD_ADDR_VAR 0 14
48987: PUSH
48988: LD_INT 0
48990: PUSH
48991: LD_INT 2
48993: PUSH
48994: LD_INT 3
48996: PUSH
48997: LD_INT 5
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: ST_TO_ADDR
// for i in tmp do
49006: LD_ADDR_VAR 0 8
49010: PUSH
49011: LD_VAR 0 14
49015: PUSH
49016: FOR_IN
49017: IFFALSE 49187
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49019: LD_ADDR_VAR 0 9
49023: PUSH
49024: LD_VAR 0 10
49028: PPUSH
49029: LD_VAR 0 8
49033: PPUSH
49034: LD_INT 5
49036: PPUSH
49037: CALL_OW 272
49041: PUSH
49042: LD_VAR 0 11
49046: PPUSH
49047: LD_VAR 0 8
49051: PPUSH
49052: LD_INT 5
49054: PPUSH
49055: CALL_OW 273
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49064: LD_VAR 0 9
49068: PUSH
49069: LD_INT 1
49071: ARRAY
49072: PPUSH
49073: LD_VAR 0 9
49077: PUSH
49078: LD_INT 2
49080: ARRAY
49081: PPUSH
49082: CALL_OW 488
49086: IFFALSE 49185
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49088: LD_ADDR_VAR 0 4
49092: PUSH
49093: LD_VAR 0 9
49097: PUSH
49098: LD_INT 1
49100: ARRAY
49101: PPUSH
49102: LD_VAR 0 9
49106: PUSH
49107: LD_INT 2
49109: ARRAY
49110: PPUSH
49111: CALL_OW 546
49115: ST_TO_ADDR
// if hex [ 1 ] then
49116: LD_VAR 0 4
49120: PUSH
49121: LD_INT 1
49123: ARRAY
49124: IFFALSE 49128
// continue ;
49126: GO 49016
// h := hex [ 2 ] ;
49128: LD_ADDR_VAR 0 13
49132: PUSH
49133: LD_VAR 0 4
49137: PUSH
49138: LD_INT 2
49140: ARRAY
49141: ST_TO_ADDR
// if h + 7 < height then
49142: LD_VAR 0 13
49146: PUSH
49147: LD_INT 7
49149: PLUS
49150: PUSH
49151: LD_VAR 0 15
49155: LESS
49156: IFFALSE 49185
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49158: LD_ADDR_VAR 0 18
49162: PUSH
49163: LD_INT 7
49165: PUSH
49166: LD_INT 28
49168: PUSH
49169: LD_INT 45
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: LIST
49176: PUSH
49177: LD_VAR 0 12
49181: ARRAY
49182: ST_TO_ADDR
// break ;
49183: GO 49187
// end ; end ; end ;
49185: GO 49016
49187: POP
49188: POP
// end ; if not weapon then
49189: LD_VAR 0 18
49193: NOT
49194: IFFALSE 49254
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49196: LD_ADDR_VAR 0 5
49200: PUSH
49201: LD_VAR 0 5
49205: PUSH
49206: LD_INT 11
49208: PUSH
49209: LD_INT 30
49211: PUSH
49212: LD_INT 49
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: LIST
49219: DIFF
49220: ST_TO_ADDR
// if not list then
49221: LD_VAR 0 5
49225: NOT
49226: IFFALSE 49230
// exit ;
49228: GO 49372
// weapon := list [ rand ( 1 , list ) ] ;
49230: LD_ADDR_VAR 0 18
49234: PUSH
49235: LD_VAR 0 5
49239: PUSH
49240: LD_INT 1
49242: PPUSH
49243: LD_VAR 0 5
49247: PPUSH
49248: CALL_OW 12
49252: ARRAY
49253: ST_TO_ADDR
// end ; if weapon then
49254: LD_VAR 0 18
49258: IFFALSE 49372
// begin tmp := CostOfWeapon ( weapon ) ;
49260: LD_ADDR_VAR 0 14
49264: PUSH
49265: LD_VAR 0 18
49269: PPUSH
49270: CALL_OW 451
49274: ST_TO_ADDR
// j := GetBase ( tower ) ;
49275: LD_ADDR_VAR 0 9
49279: PUSH
49280: LD_VAR 0 1
49284: PPUSH
49285: CALL_OW 274
49289: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49290: LD_VAR 0 9
49294: PPUSH
49295: LD_INT 1
49297: PPUSH
49298: CALL_OW 275
49302: PUSH
49303: LD_VAR 0 14
49307: PUSH
49308: LD_INT 1
49310: ARRAY
49311: GREATEREQUAL
49312: PUSH
49313: LD_VAR 0 9
49317: PPUSH
49318: LD_INT 2
49320: PPUSH
49321: CALL_OW 275
49325: PUSH
49326: LD_VAR 0 14
49330: PUSH
49331: LD_INT 2
49333: ARRAY
49334: GREATEREQUAL
49335: AND
49336: PUSH
49337: LD_VAR 0 9
49341: PPUSH
49342: LD_INT 3
49344: PPUSH
49345: CALL_OW 275
49349: PUSH
49350: LD_VAR 0 14
49354: PUSH
49355: LD_INT 3
49357: ARRAY
49358: GREATEREQUAL
49359: AND
49360: IFFALSE 49372
// result := weapon ;
49362: LD_ADDR_VAR 0 3
49366: PUSH
49367: LD_VAR 0 18
49371: ST_TO_ADDR
// end ; end ;
49372: LD_VAR 0 3
49376: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49377: LD_INT 0
49379: PPUSH
49380: PPUSH
// result := true ;
49381: LD_ADDR_VAR 0 3
49385: PUSH
49386: LD_INT 1
49388: ST_TO_ADDR
// if array1 = array2 then
49389: LD_VAR 0 1
49393: PUSH
49394: LD_VAR 0 2
49398: EQUAL
49399: IFFALSE 49459
// begin for i = 1 to array1 do
49401: LD_ADDR_VAR 0 4
49405: PUSH
49406: DOUBLE
49407: LD_INT 1
49409: DEC
49410: ST_TO_ADDR
49411: LD_VAR 0 1
49415: PUSH
49416: FOR_TO
49417: IFFALSE 49455
// if array1 [ i ] <> array2 [ i ] then
49419: LD_VAR 0 1
49423: PUSH
49424: LD_VAR 0 4
49428: ARRAY
49429: PUSH
49430: LD_VAR 0 2
49434: PUSH
49435: LD_VAR 0 4
49439: ARRAY
49440: NONEQUAL
49441: IFFALSE 49453
// begin result := false ;
49443: LD_ADDR_VAR 0 3
49447: PUSH
49448: LD_INT 0
49450: ST_TO_ADDR
// break ;
49451: GO 49455
// end ;
49453: GO 49416
49455: POP
49456: POP
// end else
49457: GO 49467
// result := false ;
49459: LD_ADDR_VAR 0 3
49463: PUSH
49464: LD_INT 0
49466: ST_TO_ADDR
// end ;
49467: LD_VAR 0 3
49471: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
49472: LD_INT 0
49474: PPUSH
49475: PPUSH
// if not array1 or not array2 then
49476: LD_VAR 0 1
49480: NOT
49481: PUSH
49482: LD_VAR 0 2
49486: NOT
49487: OR
49488: IFFALSE 49492
// exit ;
49490: GO 49556
// result := true ;
49492: LD_ADDR_VAR 0 3
49496: PUSH
49497: LD_INT 1
49499: ST_TO_ADDR
// for i = 1 to array1 do
49500: LD_ADDR_VAR 0 4
49504: PUSH
49505: DOUBLE
49506: LD_INT 1
49508: DEC
49509: ST_TO_ADDR
49510: LD_VAR 0 1
49514: PUSH
49515: FOR_TO
49516: IFFALSE 49554
// if array1 [ i ] <> array2 [ i ] then
49518: LD_VAR 0 1
49522: PUSH
49523: LD_VAR 0 4
49527: ARRAY
49528: PUSH
49529: LD_VAR 0 2
49533: PUSH
49534: LD_VAR 0 4
49538: ARRAY
49539: NONEQUAL
49540: IFFALSE 49552
// begin result := false ;
49542: LD_ADDR_VAR 0 3
49546: PUSH
49547: LD_INT 0
49549: ST_TO_ADDR
// break ;
49550: GO 49554
// end ;
49552: GO 49515
49554: POP
49555: POP
// end ;
49556: LD_VAR 0 3
49560: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
49561: LD_INT 0
49563: PPUSH
49564: PPUSH
49565: PPUSH
// pom := GetBase ( fac ) ;
49566: LD_ADDR_VAR 0 5
49570: PUSH
49571: LD_VAR 0 1
49575: PPUSH
49576: CALL_OW 274
49580: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
49581: LD_ADDR_VAR 0 4
49585: PUSH
49586: LD_VAR 0 2
49590: PUSH
49591: LD_INT 1
49593: ARRAY
49594: PPUSH
49595: LD_VAR 0 2
49599: PUSH
49600: LD_INT 2
49602: ARRAY
49603: PPUSH
49604: LD_VAR 0 2
49608: PUSH
49609: LD_INT 3
49611: ARRAY
49612: PPUSH
49613: LD_VAR 0 2
49617: PUSH
49618: LD_INT 4
49620: ARRAY
49621: PPUSH
49622: CALL_OW 449
49626: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49627: LD_ADDR_VAR 0 3
49631: PUSH
49632: LD_VAR 0 5
49636: PPUSH
49637: LD_INT 1
49639: PPUSH
49640: CALL_OW 275
49644: PUSH
49645: LD_VAR 0 4
49649: PUSH
49650: LD_INT 1
49652: ARRAY
49653: GREATEREQUAL
49654: PUSH
49655: LD_VAR 0 5
49659: PPUSH
49660: LD_INT 2
49662: PPUSH
49663: CALL_OW 275
49667: PUSH
49668: LD_VAR 0 4
49672: PUSH
49673: LD_INT 2
49675: ARRAY
49676: GREATEREQUAL
49677: AND
49678: PUSH
49679: LD_VAR 0 5
49683: PPUSH
49684: LD_INT 3
49686: PPUSH
49687: CALL_OW 275
49691: PUSH
49692: LD_VAR 0 4
49696: PUSH
49697: LD_INT 3
49699: ARRAY
49700: GREATEREQUAL
49701: AND
49702: ST_TO_ADDR
// end ;
49703: LD_VAR 0 3
49707: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
49708: LD_INT 0
49710: PPUSH
49711: PPUSH
49712: PPUSH
49713: PPUSH
// pom := GetBase ( building ) ;
49714: LD_ADDR_VAR 0 3
49718: PUSH
49719: LD_VAR 0 1
49723: PPUSH
49724: CALL_OW 274
49728: ST_TO_ADDR
// if not pom then
49729: LD_VAR 0 3
49733: NOT
49734: IFFALSE 49738
// exit ;
49736: GO 49908
// btype := GetBType ( building ) ;
49738: LD_ADDR_VAR 0 5
49742: PUSH
49743: LD_VAR 0 1
49747: PPUSH
49748: CALL_OW 266
49752: ST_TO_ADDR
// if btype = b_armoury then
49753: LD_VAR 0 5
49757: PUSH
49758: LD_INT 4
49760: EQUAL
49761: IFFALSE 49771
// btype := b_barracks ;
49763: LD_ADDR_VAR 0 5
49767: PUSH
49768: LD_INT 5
49770: ST_TO_ADDR
// if btype = b_depot then
49771: LD_VAR 0 5
49775: PUSH
49776: LD_INT 0
49778: EQUAL
49779: IFFALSE 49789
// btype := b_warehouse ;
49781: LD_ADDR_VAR 0 5
49785: PUSH
49786: LD_INT 1
49788: ST_TO_ADDR
// if btype = b_workshop then
49789: LD_VAR 0 5
49793: PUSH
49794: LD_INT 2
49796: EQUAL
49797: IFFALSE 49807
// btype := b_factory ;
49799: LD_ADDR_VAR 0 5
49803: PUSH
49804: LD_INT 3
49806: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49807: LD_ADDR_VAR 0 4
49811: PUSH
49812: LD_VAR 0 5
49816: PPUSH
49817: LD_VAR 0 1
49821: PPUSH
49822: CALL_OW 248
49826: PPUSH
49827: CALL_OW 450
49831: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49832: LD_ADDR_VAR 0 2
49836: PUSH
49837: LD_VAR 0 3
49841: PPUSH
49842: LD_INT 1
49844: PPUSH
49845: CALL_OW 275
49849: PUSH
49850: LD_VAR 0 4
49854: PUSH
49855: LD_INT 1
49857: ARRAY
49858: GREATEREQUAL
49859: PUSH
49860: LD_VAR 0 3
49864: PPUSH
49865: LD_INT 2
49867: PPUSH
49868: CALL_OW 275
49872: PUSH
49873: LD_VAR 0 4
49877: PUSH
49878: LD_INT 2
49880: ARRAY
49881: GREATEREQUAL
49882: AND
49883: PUSH
49884: LD_VAR 0 3
49888: PPUSH
49889: LD_INT 3
49891: PPUSH
49892: CALL_OW 275
49896: PUSH
49897: LD_VAR 0 4
49901: PUSH
49902: LD_INT 3
49904: ARRAY
49905: GREATEREQUAL
49906: AND
49907: ST_TO_ADDR
// end ;
49908: LD_VAR 0 2
49912: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49913: LD_INT 0
49915: PPUSH
49916: PPUSH
49917: PPUSH
// pom := GetBase ( building ) ;
49918: LD_ADDR_VAR 0 4
49922: PUSH
49923: LD_VAR 0 1
49927: PPUSH
49928: CALL_OW 274
49932: ST_TO_ADDR
// if not pom then
49933: LD_VAR 0 4
49937: NOT
49938: IFFALSE 49942
// exit ;
49940: GO 50043
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49942: LD_ADDR_VAR 0 5
49946: PUSH
49947: LD_VAR 0 2
49951: PPUSH
49952: LD_VAR 0 1
49956: PPUSH
49957: CALL_OW 248
49961: PPUSH
49962: CALL_OW 450
49966: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49967: LD_ADDR_VAR 0 3
49971: PUSH
49972: LD_VAR 0 4
49976: PPUSH
49977: LD_INT 1
49979: PPUSH
49980: CALL_OW 275
49984: PUSH
49985: LD_VAR 0 5
49989: PUSH
49990: LD_INT 1
49992: ARRAY
49993: GREATEREQUAL
49994: PUSH
49995: LD_VAR 0 4
49999: PPUSH
50000: LD_INT 2
50002: PPUSH
50003: CALL_OW 275
50007: PUSH
50008: LD_VAR 0 5
50012: PUSH
50013: LD_INT 2
50015: ARRAY
50016: GREATEREQUAL
50017: AND
50018: PUSH
50019: LD_VAR 0 4
50023: PPUSH
50024: LD_INT 3
50026: PPUSH
50027: CALL_OW 275
50031: PUSH
50032: LD_VAR 0 5
50036: PUSH
50037: LD_INT 3
50039: ARRAY
50040: GREATEREQUAL
50041: AND
50042: ST_TO_ADDR
// end ;
50043: LD_VAR 0 3
50047: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50048: LD_INT 0
50050: PPUSH
50051: PPUSH
50052: PPUSH
50053: PPUSH
50054: PPUSH
50055: PPUSH
50056: PPUSH
50057: PPUSH
50058: PPUSH
50059: PPUSH
50060: PPUSH
// result := false ;
50061: LD_ADDR_VAR 0 8
50065: PUSH
50066: LD_INT 0
50068: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50069: LD_VAR 0 5
50073: NOT
50074: PUSH
50075: LD_VAR 0 1
50079: NOT
50080: OR
50081: PUSH
50082: LD_VAR 0 2
50086: NOT
50087: OR
50088: PUSH
50089: LD_VAR 0 3
50093: NOT
50094: OR
50095: IFFALSE 50099
// exit ;
50097: GO 50913
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50099: LD_ADDR_VAR 0 14
50103: PUSH
50104: LD_VAR 0 1
50108: PPUSH
50109: LD_VAR 0 2
50113: PPUSH
50114: LD_VAR 0 3
50118: PPUSH
50119: LD_VAR 0 4
50123: PPUSH
50124: LD_VAR 0 5
50128: PUSH
50129: LD_INT 1
50131: ARRAY
50132: PPUSH
50133: CALL_OW 248
50137: PPUSH
50138: LD_INT 0
50140: PPUSH
50141: CALL 52150 0 6
50145: ST_TO_ADDR
// if not hexes then
50146: LD_VAR 0 14
50150: NOT
50151: IFFALSE 50155
// exit ;
50153: GO 50913
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50155: LD_ADDR_VAR 0 17
50159: PUSH
50160: LD_VAR 0 5
50164: PPUSH
50165: LD_INT 22
50167: PUSH
50168: LD_VAR 0 13
50172: PPUSH
50173: CALL_OW 255
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 2
50184: PUSH
50185: LD_INT 30
50187: PUSH
50188: LD_INT 0
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 30
50197: PUSH
50198: LD_INT 1
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: LIST
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PPUSH
50214: CALL_OW 72
50218: ST_TO_ADDR
// for i = 1 to hexes do
50219: LD_ADDR_VAR 0 9
50223: PUSH
50224: DOUBLE
50225: LD_INT 1
50227: DEC
50228: ST_TO_ADDR
50229: LD_VAR 0 14
50233: PUSH
50234: FOR_TO
50235: IFFALSE 50911
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50237: LD_ADDR_VAR 0 13
50241: PUSH
50242: LD_VAR 0 14
50246: PUSH
50247: LD_VAR 0 9
50251: ARRAY
50252: PUSH
50253: LD_INT 1
50255: ARRAY
50256: PPUSH
50257: LD_VAR 0 14
50261: PUSH
50262: LD_VAR 0 9
50266: ARRAY
50267: PUSH
50268: LD_INT 2
50270: ARRAY
50271: PPUSH
50272: CALL_OW 428
50276: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50277: LD_VAR 0 14
50281: PUSH
50282: LD_VAR 0 9
50286: ARRAY
50287: PUSH
50288: LD_INT 1
50290: ARRAY
50291: PPUSH
50292: LD_VAR 0 14
50296: PUSH
50297: LD_VAR 0 9
50301: ARRAY
50302: PUSH
50303: LD_INT 2
50305: ARRAY
50306: PPUSH
50307: CALL_OW 351
50311: PUSH
50312: LD_VAR 0 14
50316: PUSH
50317: LD_VAR 0 9
50321: ARRAY
50322: PUSH
50323: LD_INT 1
50325: ARRAY
50326: PPUSH
50327: LD_VAR 0 14
50331: PUSH
50332: LD_VAR 0 9
50336: ARRAY
50337: PUSH
50338: LD_INT 2
50340: ARRAY
50341: PPUSH
50342: CALL_OW 488
50346: NOT
50347: OR
50348: PUSH
50349: LD_VAR 0 13
50353: PPUSH
50354: CALL_OW 247
50358: PUSH
50359: LD_INT 3
50361: EQUAL
50362: OR
50363: IFFALSE 50369
// exit ;
50365: POP
50366: POP
50367: GO 50913
// if not tmp then
50369: LD_VAR 0 13
50373: NOT
50374: IFFALSE 50378
// continue ;
50376: GO 50234
// result := true ;
50378: LD_ADDR_VAR 0 8
50382: PUSH
50383: LD_INT 1
50385: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50386: LD_VAR 0 6
50390: PUSH
50391: LD_VAR 0 13
50395: PPUSH
50396: CALL_OW 247
50400: PUSH
50401: LD_INT 2
50403: EQUAL
50404: AND
50405: PUSH
50406: LD_VAR 0 13
50410: PPUSH
50411: CALL_OW 263
50415: PUSH
50416: LD_INT 1
50418: EQUAL
50419: AND
50420: IFFALSE 50584
// begin if IsDrivenBy ( tmp ) then
50422: LD_VAR 0 13
50426: PPUSH
50427: CALL_OW 311
50431: IFFALSE 50435
// continue ;
50433: GO 50234
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
50435: LD_VAR 0 6
50439: PPUSH
50440: LD_INT 3
50442: PUSH
50443: LD_INT 60
50445: PUSH
50446: EMPTY
50447: LIST
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 3
50455: PUSH
50456: LD_INT 55
50458: PUSH
50459: EMPTY
50460: LIST
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PPUSH
50470: CALL_OW 72
50474: IFFALSE 50582
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
50476: LD_ADDR_VAR 0 18
50480: PUSH
50481: LD_VAR 0 6
50485: PPUSH
50486: LD_INT 3
50488: PUSH
50489: LD_INT 60
50491: PUSH
50492: EMPTY
50493: LIST
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 3
50501: PUSH
50502: LD_INT 55
50504: PUSH
50505: EMPTY
50506: LIST
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PPUSH
50516: CALL_OW 72
50520: PUSH
50521: LD_INT 1
50523: ARRAY
50524: ST_TO_ADDR
// if IsInUnit ( driver ) then
50525: LD_VAR 0 18
50529: PPUSH
50530: CALL_OW 310
50534: IFFALSE 50545
// ComExit ( driver ) ;
50536: LD_VAR 0 18
50540: PPUSH
50541: CALL 75278 0 1
// AddComEnterUnit ( driver , tmp ) ;
50545: LD_VAR 0 18
50549: PPUSH
50550: LD_VAR 0 13
50554: PPUSH
50555: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
50559: LD_VAR 0 18
50563: PPUSH
50564: LD_VAR 0 7
50568: PPUSH
50569: CALL_OW 173
// AddComExitVehicle ( driver ) ;
50573: LD_VAR 0 18
50577: PPUSH
50578: CALL_OW 181
// end ; continue ;
50582: GO 50234
// end ; if not cleaners or not tmp in cleaners then
50584: LD_VAR 0 6
50588: NOT
50589: PUSH
50590: LD_VAR 0 13
50594: PUSH
50595: LD_VAR 0 6
50599: IN
50600: NOT
50601: OR
50602: IFFALSE 50909
// begin if dep then
50604: LD_VAR 0 17
50608: IFFALSE 50744
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
50610: LD_ADDR_VAR 0 16
50614: PUSH
50615: LD_VAR 0 17
50619: PUSH
50620: LD_INT 1
50622: ARRAY
50623: PPUSH
50624: CALL_OW 250
50628: PPUSH
50629: LD_VAR 0 17
50633: PUSH
50634: LD_INT 1
50636: ARRAY
50637: PPUSH
50638: CALL_OW 254
50642: PPUSH
50643: LD_INT 5
50645: PPUSH
50646: CALL_OW 272
50650: PUSH
50651: LD_VAR 0 17
50655: PUSH
50656: LD_INT 1
50658: ARRAY
50659: PPUSH
50660: CALL_OW 251
50664: PPUSH
50665: LD_VAR 0 17
50669: PUSH
50670: LD_INT 1
50672: ARRAY
50673: PPUSH
50674: CALL_OW 254
50678: PPUSH
50679: LD_INT 5
50681: PPUSH
50682: CALL_OW 273
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
50691: LD_VAR 0 16
50695: PUSH
50696: LD_INT 1
50698: ARRAY
50699: PPUSH
50700: LD_VAR 0 16
50704: PUSH
50705: LD_INT 2
50707: ARRAY
50708: PPUSH
50709: CALL_OW 488
50713: IFFALSE 50744
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
50715: LD_VAR 0 13
50719: PPUSH
50720: LD_VAR 0 16
50724: PUSH
50725: LD_INT 1
50727: ARRAY
50728: PPUSH
50729: LD_VAR 0 16
50733: PUSH
50734: LD_INT 2
50736: ARRAY
50737: PPUSH
50738: CALL_OW 111
// continue ;
50742: GO 50234
// end ; end ; r := GetDir ( tmp ) ;
50744: LD_ADDR_VAR 0 15
50748: PUSH
50749: LD_VAR 0 13
50753: PPUSH
50754: CALL_OW 254
50758: ST_TO_ADDR
// if r = 5 then
50759: LD_VAR 0 15
50763: PUSH
50764: LD_INT 5
50766: EQUAL
50767: IFFALSE 50777
// r := 0 ;
50769: LD_ADDR_VAR 0 15
50773: PUSH
50774: LD_INT 0
50776: ST_TO_ADDR
// for j = r to 5 do
50777: LD_ADDR_VAR 0 10
50781: PUSH
50782: DOUBLE
50783: LD_VAR 0 15
50787: DEC
50788: ST_TO_ADDR
50789: LD_INT 5
50791: PUSH
50792: FOR_TO
50793: IFFALSE 50907
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50795: LD_ADDR_VAR 0 11
50799: PUSH
50800: LD_VAR 0 13
50804: PPUSH
50805: CALL_OW 250
50809: PPUSH
50810: LD_VAR 0 10
50814: PPUSH
50815: LD_INT 2
50817: PPUSH
50818: CALL_OW 272
50822: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50823: LD_ADDR_VAR 0 12
50827: PUSH
50828: LD_VAR 0 13
50832: PPUSH
50833: CALL_OW 251
50837: PPUSH
50838: LD_VAR 0 10
50842: PPUSH
50843: LD_INT 2
50845: PPUSH
50846: CALL_OW 273
50850: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50851: LD_VAR 0 11
50855: PPUSH
50856: LD_VAR 0 12
50860: PPUSH
50861: CALL_OW 488
50865: PUSH
50866: LD_VAR 0 11
50870: PPUSH
50871: LD_VAR 0 12
50875: PPUSH
50876: CALL_OW 428
50880: NOT
50881: AND
50882: IFFALSE 50905
// begin ComMoveXY ( tmp , _x , _y ) ;
50884: LD_VAR 0 13
50888: PPUSH
50889: LD_VAR 0 11
50893: PPUSH
50894: LD_VAR 0 12
50898: PPUSH
50899: CALL_OW 111
// break ;
50903: GO 50907
// end ; end ;
50905: GO 50792
50907: POP
50908: POP
// end ; end ;
50909: GO 50234
50911: POP
50912: POP
// end ;
50913: LD_VAR 0 8
50917: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50918: LD_INT 0
50920: PPUSH
// result := true ;
50921: LD_ADDR_VAR 0 3
50925: PUSH
50926: LD_INT 1
50928: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50929: LD_VAR 0 2
50933: PUSH
50934: LD_INT 24
50936: DOUBLE
50937: EQUAL
50938: IFTRUE 50948
50940: LD_INT 33
50942: DOUBLE
50943: EQUAL
50944: IFTRUE 50948
50946: GO 50973
50948: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50949: LD_ADDR_VAR 0 3
50953: PUSH
50954: LD_INT 32
50956: PPUSH
50957: LD_VAR 0 1
50961: PPUSH
50962: CALL_OW 321
50966: PUSH
50967: LD_INT 2
50969: EQUAL
50970: ST_TO_ADDR
50971: GO 51293
50973: LD_INT 20
50975: DOUBLE
50976: EQUAL
50977: IFTRUE 50981
50979: GO 51006
50981: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50982: LD_ADDR_VAR 0 3
50986: PUSH
50987: LD_INT 6
50989: PPUSH
50990: LD_VAR 0 1
50994: PPUSH
50995: CALL_OW 321
50999: PUSH
51000: LD_INT 2
51002: EQUAL
51003: ST_TO_ADDR
51004: GO 51293
51006: LD_INT 22
51008: DOUBLE
51009: EQUAL
51010: IFTRUE 51020
51012: LD_INT 36
51014: DOUBLE
51015: EQUAL
51016: IFTRUE 51020
51018: GO 51045
51020: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51021: LD_ADDR_VAR 0 3
51025: PUSH
51026: LD_INT 15
51028: PPUSH
51029: LD_VAR 0 1
51033: PPUSH
51034: CALL_OW 321
51038: PUSH
51039: LD_INT 2
51041: EQUAL
51042: ST_TO_ADDR
51043: GO 51293
51045: LD_INT 30
51047: DOUBLE
51048: EQUAL
51049: IFTRUE 51053
51051: GO 51078
51053: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51054: LD_ADDR_VAR 0 3
51058: PUSH
51059: LD_INT 20
51061: PPUSH
51062: LD_VAR 0 1
51066: PPUSH
51067: CALL_OW 321
51071: PUSH
51072: LD_INT 2
51074: EQUAL
51075: ST_TO_ADDR
51076: GO 51293
51078: LD_INT 28
51080: DOUBLE
51081: EQUAL
51082: IFTRUE 51092
51084: LD_INT 21
51086: DOUBLE
51087: EQUAL
51088: IFTRUE 51092
51090: GO 51117
51092: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51093: LD_ADDR_VAR 0 3
51097: PUSH
51098: LD_INT 21
51100: PPUSH
51101: LD_VAR 0 1
51105: PPUSH
51106: CALL_OW 321
51110: PUSH
51111: LD_INT 2
51113: EQUAL
51114: ST_TO_ADDR
51115: GO 51293
51117: LD_INT 16
51119: DOUBLE
51120: EQUAL
51121: IFTRUE 51125
51123: GO 51152
51125: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51126: LD_ADDR_VAR 0 3
51130: PUSH
51131: LD_EXP 58
51135: PPUSH
51136: LD_VAR 0 1
51140: PPUSH
51141: CALL_OW 321
51145: PUSH
51146: LD_INT 2
51148: EQUAL
51149: ST_TO_ADDR
51150: GO 51293
51152: LD_INT 19
51154: DOUBLE
51155: EQUAL
51156: IFTRUE 51166
51158: LD_INT 23
51160: DOUBLE
51161: EQUAL
51162: IFTRUE 51166
51164: GO 51193
51166: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51167: LD_ADDR_VAR 0 3
51171: PUSH
51172: LD_EXP 57
51176: PPUSH
51177: LD_VAR 0 1
51181: PPUSH
51182: CALL_OW 321
51186: PUSH
51187: LD_INT 2
51189: EQUAL
51190: ST_TO_ADDR
51191: GO 51293
51193: LD_INT 17
51195: DOUBLE
51196: EQUAL
51197: IFTRUE 51201
51199: GO 51226
51201: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51202: LD_ADDR_VAR 0 3
51206: PUSH
51207: LD_INT 39
51209: PPUSH
51210: LD_VAR 0 1
51214: PPUSH
51215: CALL_OW 321
51219: PUSH
51220: LD_INT 2
51222: EQUAL
51223: ST_TO_ADDR
51224: GO 51293
51226: LD_INT 18
51228: DOUBLE
51229: EQUAL
51230: IFTRUE 51234
51232: GO 51259
51234: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51235: LD_ADDR_VAR 0 3
51239: PUSH
51240: LD_INT 40
51242: PPUSH
51243: LD_VAR 0 1
51247: PPUSH
51248: CALL_OW 321
51252: PUSH
51253: LD_INT 2
51255: EQUAL
51256: ST_TO_ADDR
51257: GO 51293
51259: LD_INT 27
51261: DOUBLE
51262: EQUAL
51263: IFTRUE 51267
51265: GO 51292
51267: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51268: LD_ADDR_VAR 0 3
51272: PUSH
51273: LD_INT 35
51275: PPUSH
51276: LD_VAR 0 1
51280: PPUSH
51281: CALL_OW 321
51285: PUSH
51286: LD_INT 2
51288: EQUAL
51289: ST_TO_ADDR
51290: GO 51293
51292: POP
// end ;
51293: LD_VAR 0 3
51297: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
51298: LD_INT 0
51300: PPUSH
51301: PPUSH
51302: PPUSH
51303: PPUSH
51304: PPUSH
51305: PPUSH
51306: PPUSH
51307: PPUSH
51308: PPUSH
51309: PPUSH
51310: PPUSH
// result := false ;
51311: LD_ADDR_VAR 0 6
51315: PUSH
51316: LD_INT 0
51318: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51319: LD_VAR 0 1
51323: NOT
51324: PUSH
51325: LD_VAR 0 1
51329: PPUSH
51330: CALL_OW 266
51334: PUSH
51335: LD_INT 0
51337: PUSH
51338: LD_INT 1
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: IN
51345: NOT
51346: OR
51347: PUSH
51348: LD_VAR 0 2
51352: NOT
51353: OR
51354: PUSH
51355: LD_VAR 0 5
51359: PUSH
51360: LD_INT 0
51362: PUSH
51363: LD_INT 1
51365: PUSH
51366: LD_INT 2
51368: PUSH
51369: LD_INT 3
51371: PUSH
51372: LD_INT 4
51374: PUSH
51375: LD_INT 5
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: IN
51386: NOT
51387: OR
51388: PUSH
51389: LD_VAR 0 3
51393: PPUSH
51394: LD_VAR 0 4
51398: PPUSH
51399: CALL_OW 488
51403: NOT
51404: OR
51405: IFFALSE 51409
// exit ;
51407: GO 52145
// side := GetSide ( depot ) ;
51409: LD_ADDR_VAR 0 9
51413: PUSH
51414: LD_VAR 0 1
51418: PPUSH
51419: CALL_OW 255
51423: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
51424: LD_VAR 0 9
51428: PPUSH
51429: LD_VAR 0 2
51433: PPUSH
51434: CALL 50918 0 2
51438: NOT
51439: IFFALSE 51443
// exit ;
51441: GO 52145
// pom := GetBase ( depot ) ;
51443: LD_ADDR_VAR 0 10
51447: PUSH
51448: LD_VAR 0 1
51452: PPUSH
51453: CALL_OW 274
51457: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51458: LD_ADDR_VAR 0 11
51462: PUSH
51463: LD_VAR 0 2
51467: PPUSH
51468: LD_VAR 0 1
51472: PPUSH
51473: CALL_OW 248
51477: PPUSH
51478: CALL_OW 450
51482: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51483: LD_VAR 0 10
51487: PPUSH
51488: LD_INT 1
51490: PPUSH
51491: CALL_OW 275
51495: PUSH
51496: LD_VAR 0 11
51500: PUSH
51501: LD_INT 1
51503: ARRAY
51504: GREATEREQUAL
51505: PUSH
51506: LD_VAR 0 10
51510: PPUSH
51511: LD_INT 2
51513: PPUSH
51514: CALL_OW 275
51518: PUSH
51519: LD_VAR 0 11
51523: PUSH
51524: LD_INT 2
51526: ARRAY
51527: GREATEREQUAL
51528: AND
51529: PUSH
51530: LD_VAR 0 10
51534: PPUSH
51535: LD_INT 3
51537: PPUSH
51538: CALL_OW 275
51542: PUSH
51543: LD_VAR 0 11
51547: PUSH
51548: LD_INT 3
51550: ARRAY
51551: GREATEREQUAL
51552: AND
51553: NOT
51554: IFFALSE 51558
// exit ;
51556: GO 52145
// if GetBType ( depot ) = b_depot then
51558: LD_VAR 0 1
51562: PPUSH
51563: CALL_OW 266
51567: PUSH
51568: LD_INT 0
51570: EQUAL
51571: IFFALSE 51583
// dist := 28 else
51573: LD_ADDR_VAR 0 14
51577: PUSH
51578: LD_INT 28
51580: ST_TO_ADDR
51581: GO 51591
// dist := 36 ;
51583: LD_ADDR_VAR 0 14
51587: PUSH
51588: LD_INT 36
51590: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
51591: LD_VAR 0 1
51595: PPUSH
51596: LD_VAR 0 3
51600: PPUSH
51601: LD_VAR 0 4
51605: PPUSH
51606: CALL_OW 297
51610: PUSH
51611: LD_VAR 0 14
51615: GREATER
51616: IFFALSE 51620
// exit ;
51618: GO 52145
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
51620: LD_ADDR_VAR 0 12
51624: PUSH
51625: LD_VAR 0 2
51629: PPUSH
51630: LD_VAR 0 3
51634: PPUSH
51635: LD_VAR 0 4
51639: PPUSH
51640: LD_VAR 0 5
51644: PPUSH
51645: LD_VAR 0 1
51649: PPUSH
51650: CALL_OW 248
51654: PPUSH
51655: LD_INT 0
51657: PPUSH
51658: CALL 52150 0 6
51662: ST_TO_ADDR
// if not hexes then
51663: LD_VAR 0 12
51667: NOT
51668: IFFALSE 51672
// exit ;
51670: GO 52145
// hex := GetHexInfo ( x , y ) ;
51672: LD_ADDR_VAR 0 15
51676: PUSH
51677: LD_VAR 0 3
51681: PPUSH
51682: LD_VAR 0 4
51686: PPUSH
51687: CALL_OW 546
51691: ST_TO_ADDR
// if hex [ 1 ] then
51692: LD_VAR 0 15
51696: PUSH
51697: LD_INT 1
51699: ARRAY
51700: IFFALSE 51704
// exit ;
51702: GO 52145
// height := hex [ 2 ] ;
51704: LD_ADDR_VAR 0 13
51708: PUSH
51709: LD_VAR 0 15
51713: PUSH
51714: LD_INT 2
51716: ARRAY
51717: ST_TO_ADDR
// for i = 1 to hexes do
51718: LD_ADDR_VAR 0 7
51722: PUSH
51723: DOUBLE
51724: LD_INT 1
51726: DEC
51727: ST_TO_ADDR
51728: LD_VAR 0 12
51732: PUSH
51733: FOR_TO
51734: IFFALSE 52064
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51736: LD_VAR 0 12
51740: PUSH
51741: LD_VAR 0 7
51745: ARRAY
51746: PUSH
51747: LD_INT 1
51749: ARRAY
51750: PPUSH
51751: LD_VAR 0 12
51755: PUSH
51756: LD_VAR 0 7
51760: ARRAY
51761: PUSH
51762: LD_INT 2
51764: ARRAY
51765: PPUSH
51766: CALL_OW 488
51770: NOT
51771: PUSH
51772: LD_VAR 0 12
51776: PUSH
51777: LD_VAR 0 7
51781: ARRAY
51782: PUSH
51783: LD_INT 1
51785: ARRAY
51786: PPUSH
51787: LD_VAR 0 12
51791: PUSH
51792: LD_VAR 0 7
51796: ARRAY
51797: PUSH
51798: LD_INT 2
51800: ARRAY
51801: PPUSH
51802: CALL_OW 428
51806: PUSH
51807: LD_INT 0
51809: GREATER
51810: OR
51811: PUSH
51812: LD_VAR 0 12
51816: PUSH
51817: LD_VAR 0 7
51821: ARRAY
51822: PUSH
51823: LD_INT 1
51825: ARRAY
51826: PPUSH
51827: LD_VAR 0 12
51831: PUSH
51832: LD_VAR 0 7
51836: ARRAY
51837: PUSH
51838: LD_INT 2
51840: ARRAY
51841: PPUSH
51842: CALL_OW 351
51846: OR
51847: IFFALSE 51853
// exit ;
51849: POP
51850: POP
51851: GO 52145
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51853: LD_ADDR_VAR 0 8
51857: PUSH
51858: LD_VAR 0 12
51862: PUSH
51863: LD_VAR 0 7
51867: ARRAY
51868: PUSH
51869: LD_INT 1
51871: ARRAY
51872: PPUSH
51873: LD_VAR 0 12
51877: PUSH
51878: LD_VAR 0 7
51882: ARRAY
51883: PUSH
51884: LD_INT 2
51886: ARRAY
51887: PPUSH
51888: CALL_OW 546
51892: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51893: LD_VAR 0 8
51897: PUSH
51898: LD_INT 1
51900: ARRAY
51901: PUSH
51902: LD_VAR 0 8
51906: PUSH
51907: LD_INT 2
51909: ARRAY
51910: PUSH
51911: LD_VAR 0 13
51915: PUSH
51916: LD_INT 2
51918: PLUS
51919: GREATER
51920: OR
51921: PUSH
51922: LD_VAR 0 8
51926: PUSH
51927: LD_INT 2
51929: ARRAY
51930: PUSH
51931: LD_VAR 0 13
51935: PUSH
51936: LD_INT 2
51938: MINUS
51939: LESS
51940: OR
51941: PUSH
51942: LD_VAR 0 8
51946: PUSH
51947: LD_INT 3
51949: ARRAY
51950: PUSH
51951: LD_INT 0
51953: PUSH
51954: LD_INT 8
51956: PUSH
51957: LD_INT 9
51959: PUSH
51960: LD_INT 10
51962: PUSH
51963: LD_INT 11
51965: PUSH
51966: LD_INT 12
51968: PUSH
51969: LD_INT 13
51971: PUSH
51972: LD_INT 16
51974: PUSH
51975: LD_INT 17
51977: PUSH
51978: LD_INT 18
51980: PUSH
51981: LD_INT 19
51983: PUSH
51984: LD_INT 20
51986: PUSH
51987: LD_INT 21
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: IN
52005: NOT
52006: OR
52007: PUSH
52008: LD_VAR 0 8
52012: PUSH
52013: LD_INT 5
52015: ARRAY
52016: NOT
52017: OR
52018: PUSH
52019: LD_VAR 0 8
52023: PUSH
52024: LD_INT 6
52026: ARRAY
52027: PUSH
52028: LD_INT 1
52030: PUSH
52031: LD_INT 2
52033: PUSH
52034: LD_INT 7
52036: PUSH
52037: LD_INT 9
52039: PUSH
52040: LD_INT 10
52042: PUSH
52043: LD_INT 11
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: IN
52054: NOT
52055: OR
52056: IFFALSE 52062
// exit ;
52058: POP
52059: POP
52060: GO 52145
// end ;
52062: GO 51733
52064: POP
52065: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52066: LD_VAR 0 9
52070: PPUSH
52071: LD_VAR 0 3
52075: PPUSH
52076: LD_VAR 0 4
52080: PPUSH
52081: LD_INT 20
52083: PPUSH
52084: CALL 44091 0 4
52088: PUSH
52089: LD_INT 4
52091: ARRAY
52092: IFFALSE 52096
// exit ;
52094: GO 52145
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52096: LD_VAR 0 2
52100: PUSH
52101: LD_INT 29
52103: PUSH
52104: LD_INT 30
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: IN
52111: PUSH
52112: LD_VAR 0 3
52116: PPUSH
52117: LD_VAR 0 4
52121: PPUSH
52122: LD_VAR 0 9
52126: PPUSH
52127: CALL_OW 440
52131: NOT
52132: AND
52133: IFFALSE 52137
// exit ;
52135: GO 52145
// result := true ;
52137: LD_ADDR_VAR 0 6
52141: PUSH
52142: LD_INT 1
52144: ST_TO_ADDR
// end ;
52145: LD_VAR 0 6
52149: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52150: LD_INT 0
52152: PPUSH
52153: PPUSH
52154: PPUSH
52155: PPUSH
52156: PPUSH
52157: PPUSH
52158: PPUSH
52159: PPUSH
52160: PPUSH
52161: PPUSH
52162: PPUSH
52163: PPUSH
52164: PPUSH
52165: PPUSH
52166: PPUSH
52167: PPUSH
52168: PPUSH
52169: PPUSH
52170: PPUSH
52171: PPUSH
52172: PPUSH
52173: PPUSH
52174: PPUSH
52175: PPUSH
52176: PPUSH
52177: PPUSH
52178: PPUSH
52179: PPUSH
52180: PPUSH
52181: PPUSH
52182: PPUSH
52183: PPUSH
52184: PPUSH
52185: PPUSH
52186: PPUSH
52187: PPUSH
52188: PPUSH
52189: PPUSH
52190: PPUSH
52191: PPUSH
52192: PPUSH
52193: PPUSH
52194: PPUSH
52195: PPUSH
52196: PPUSH
52197: PPUSH
52198: PPUSH
52199: PPUSH
52200: PPUSH
52201: PPUSH
52202: PPUSH
52203: PPUSH
52204: PPUSH
52205: PPUSH
52206: PPUSH
52207: PPUSH
52208: PPUSH
52209: PPUSH
// result = [ ] ;
52210: LD_ADDR_VAR 0 7
52214: PUSH
52215: EMPTY
52216: ST_TO_ADDR
// temp_list = [ ] ;
52217: LD_ADDR_VAR 0 9
52221: PUSH
52222: EMPTY
52223: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52224: LD_VAR 0 4
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: LD_INT 1
52234: PUSH
52235: LD_INT 2
52237: PUSH
52238: LD_INT 3
52240: PUSH
52241: LD_INT 4
52243: PUSH
52244: LD_INT 5
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: IN
52255: NOT
52256: PUSH
52257: LD_VAR 0 1
52261: PUSH
52262: LD_INT 0
52264: PUSH
52265: LD_INT 1
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: IN
52272: PUSH
52273: LD_VAR 0 5
52277: PUSH
52278: LD_INT 1
52280: PUSH
52281: LD_INT 2
52283: PUSH
52284: LD_INT 3
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: LIST
52291: IN
52292: NOT
52293: AND
52294: OR
52295: IFFALSE 52299
// exit ;
52297: GO 70690
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52299: LD_VAR 0 1
52303: PUSH
52304: LD_INT 6
52306: PUSH
52307: LD_INT 7
52309: PUSH
52310: LD_INT 8
52312: PUSH
52313: LD_INT 13
52315: PUSH
52316: LD_INT 12
52318: PUSH
52319: LD_INT 15
52321: PUSH
52322: LD_INT 11
52324: PUSH
52325: LD_INT 14
52327: PUSH
52328: LD_INT 10
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: IN
52342: IFFALSE 52352
// btype = b_lab ;
52344: LD_ADDR_VAR 0 1
52348: PUSH
52349: LD_INT 6
52351: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52352: LD_VAR 0 6
52356: PUSH
52357: LD_INT 0
52359: PUSH
52360: LD_INT 1
52362: PUSH
52363: LD_INT 2
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: LIST
52370: IN
52371: NOT
52372: PUSH
52373: LD_VAR 0 1
52377: PUSH
52378: LD_INT 0
52380: PUSH
52381: LD_INT 1
52383: PUSH
52384: LD_INT 2
52386: PUSH
52387: LD_INT 3
52389: PUSH
52390: LD_INT 6
52392: PUSH
52393: LD_INT 36
52395: PUSH
52396: LD_INT 4
52398: PUSH
52399: LD_INT 5
52401: PUSH
52402: LD_INT 31
52404: PUSH
52405: LD_INT 32
52407: PUSH
52408: LD_INT 33
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: IN
52424: NOT
52425: PUSH
52426: LD_VAR 0 6
52430: PUSH
52431: LD_INT 1
52433: EQUAL
52434: AND
52435: OR
52436: PUSH
52437: LD_VAR 0 1
52441: PUSH
52442: LD_INT 2
52444: PUSH
52445: LD_INT 3
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: IN
52452: NOT
52453: PUSH
52454: LD_VAR 0 6
52458: PUSH
52459: LD_INT 2
52461: EQUAL
52462: AND
52463: OR
52464: IFFALSE 52474
// mode = 0 ;
52466: LD_ADDR_VAR 0 6
52470: PUSH
52471: LD_INT 0
52473: ST_TO_ADDR
// case mode of 0 :
52474: LD_VAR 0 6
52478: PUSH
52479: LD_INT 0
52481: DOUBLE
52482: EQUAL
52483: IFTRUE 52487
52485: GO 63940
52487: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52488: LD_ADDR_VAR 0 11
52492: PUSH
52493: LD_INT 0
52495: PUSH
52496: LD_INT 0
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 0
52505: PUSH
52506: LD_INT 1
52508: NEG
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 1
52516: PUSH
52517: LD_INT 0
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 1
52526: PUSH
52527: LD_INT 1
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 0
52536: PUSH
52537: LD_INT 1
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 1
52546: NEG
52547: PUSH
52548: LD_INT 0
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 1
52557: NEG
52558: PUSH
52559: LD_INT 1
52561: NEG
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 1
52569: NEG
52570: PUSH
52571: LD_INT 2
52573: NEG
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 0
52581: PUSH
52582: LD_INT 2
52584: NEG
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 1
52592: PUSH
52593: LD_INT 1
52595: NEG
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 1
52603: PUSH
52604: LD_INT 2
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 0
52613: PUSH
52614: LD_INT 2
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 1
52623: NEG
52624: PUSH
52625: LD_INT 1
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 1
52634: PUSH
52635: LD_INT 3
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 0
52644: PUSH
52645: LD_INT 3
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 1
52654: NEG
52655: PUSH
52656: LD_INT 2
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52681: LD_ADDR_VAR 0 12
52685: PUSH
52686: LD_INT 0
52688: PUSH
52689: LD_INT 0
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 0
52698: PUSH
52699: LD_INT 1
52701: NEG
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 1
52709: PUSH
52710: LD_INT 0
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 1
52719: PUSH
52720: LD_INT 1
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 0
52729: PUSH
52730: LD_INT 1
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 1
52739: NEG
52740: PUSH
52741: LD_INT 0
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 1
52750: NEG
52751: PUSH
52752: LD_INT 1
52754: NEG
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 1
52762: PUSH
52763: LD_INT 1
52765: NEG
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 2
52773: PUSH
52774: LD_INT 0
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 2
52783: PUSH
52784: LD_INT 1
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 1
52793: NEG
52794: PUSH
52795: LD_INT 1
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 2
52804: NEG
52805: PUSH
52806: LD_INT 0
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 2
52815: NEG
52816: PUSH
52817: LD_INT 1
52819: NEG
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 2
52827: NEG
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 3
52838: NEG
52839: PUSH
52840: LD_INT 0
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 3
52849: NEG
52850: PUSH
52851: LD_INT 1
52853: NEG
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52877: LD_ADDR_VAR 0 13
52881: PUSH
52882: LD_INT 0
52884: PUSH
52885: LD_INT 0
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 0
52894: PUSH
52895: LD_INT 1
52897: NEG
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 1
52905: PUSH
52906: LD_INT 0
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 1
52915: PUSH
52916: LD_INT 1
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 0
52925: PUSH
52926: LD_INT 1
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 1
52935: NEG
52936: PUSH
52937: LD_INT 0
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 1
52946: NEG
52947: PUSH
52948: LD_INT 1
52950: NEG
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 1
52958: NEG
52959: PUSH
52960: LD_INT 2
52962: NEG
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 2
52970: PUSH
52971: LD_INT 1
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 2
52980: PUSH
52981: LD_INT 2
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 1
52990: PUSH
52991: LD_INT 2
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 2
53000: NEG
53001: PUSH
53002: LD_INT 1
53004: NEG
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 2
53012: NEG
53013: PUSH
53014: LD_INT 2
53016: NEG
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 2
53024: NEG
53025: PUSH
53026: LD_INT 3
53028: NEG
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 3
53036: NEG
53037: PUSH
53038: LD_INT 2
53040: NEG
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 3
53048: NEG
53049: PUSH
53050: LD_INT 3
53052: NEG
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53076: LD_ADDR_VAR 0 14
53080: PUSH
53081: LD_INT 0
53083: PUSH
53084: LD_INT 0
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 0
53093: PUSH
53094: LD_INT 1
53096: NEG
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 1
53104: PUSH
53105: LD_INT 0
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 1
53114: PUSH
53115: LD_INT 1
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 0
53124: PUSH
53125: LD_INT 1
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 1
53134: NEG
53135: PUSH
53136: LD_INT 0
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 1
53145: NEG
53146: PUSH
53147: LD_INT 1
53149: NEG
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 1
53157: NEG
53158: PUSH
53159: LD_INT 2
53161: NEG
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: LD_INT 2
53172: NEG
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 1
53180: PUSH
53181: LD_INT 1
53183: NEG
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 1
53191: PUSH
53192: LD_INT 2
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 0
53201: PUSH
53202: LD_INT 2
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 1
53211: NEG
53212: PUSH
53213: LD_INT 1
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 1
53222: NEG
53223: PUSH
53224: LD_INT 3
53226: NEG
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 0
53234: PUSH
53235: LD_INT 3
53237: NEG
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 1
53245: PUSH
53246: LD_INT 2
53248: NEG
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53272: LD_ADDR_VAR 0 15
53276: PUSH
53277: LD_INT 0
53279: PUSH
53280: LD_INT 0
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 0
53289: PUSH
53290: LD_INT 1
53292: NEG
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 1
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 1
53310: PUSH
53311: LD_INT 1
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 0
53320: PUSH
53321: LD_INT 1
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 1
53330: NEG
53331: PUSH
53332: LD_INT 0
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 1
53341: NEG
53342: PUSH
53343: LD_INT 1
53345: NEG
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 1
53353: PUSH
53354: LD_INT 1
53356: NEG
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 2
53364: PUSH
53365: LD_INT 0
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 2
53374: PUSH
53375: LD_INT 1
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 1
53384: NEG
53385: PUSH
53386: LD_INT 1
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 2
53395: NEG
53396: PUSH
53397: LD_INT 0
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 2
53406: NEG
53407: PUSH
53408: LD_INT 1
53410: NEG
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 2
53418: PUSH
53419: LD_INT 1
53421: NEG
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 3
53429: PUSH
53430: LD_INT 0
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 3
53439: PUSH
53440: LD_INT 1
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53465: LD_ADDR_VAR 0 16
53469: PUSH
53470: LD_INT 0
53472: PUSH
53473: LD_INT 0
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 0
53482: PUSH
53483: LD_INT 1
53485: NEG
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 1
53493: PUSH
53494: LD_INT 0
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 1
53503: PUSH
53504: LD_INT 1
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 0
53513: PUSH
53514: LD_INT 1
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 1
53523: NEG
53524: PUSH
53525: LD_INT 0
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 1
53534: NEG
53535: PUSH
53536: LD_INT 1
53538: NEG
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 1
53546: NEG
53547: PUSH
53548: LD_INT 2
53550: NEG
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 2
53558: PUSH
53559: LD_INT 1
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 2
53568: PUSH
53569: LD_INT 2
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 1
53578: PUSH
53579: LD_INT 2
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 2
53588: NEG
53589: PUSH
53590: LD_INT 1
53592: NEG
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 2
53600: NEG
53601: PUSH
53602: LD_INT 2
53604: NEG
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 3
53612: PUSH
53613: LD_INT 2
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 3
53622: PUSH
53623: LD_INT 3
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 2
53632: PUSH
53633: LD_INT 3
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53658: LD_ADDR_VAR 0 17
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: LD_INT 0
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 0
53675: PUSH
53676: LD_INT 1
53678: NEG
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 1
53686: PUSH
53687: LD_INT 0
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 1
53696: PUSH
53697: LD_INT 1
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 0
53706: PUSH
53707: LD_INT 1
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 1
53716: NEG
53717: PUSH
53718: LD_INT 0
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 1
53727: NEG
53728: PUSH
53729: LD_INT 1
53731: NEG
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 1
53739: NEG
53740: PUSH
53741: LD_INT 2
53743: NEG
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 0
53751: PUSH
53752: LD_INT 2
53754: NEG
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 1
53762: PUSH
53763: LD_INT 1
53765: NEG
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 2
53773: PUSH
53774: LD_INT 0
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 2
53783: PUSH
53784: LD_INT 1
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 2
53793: PUSH
53794: LD_INT 2
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 1
53803: PUSH
53804: LD_INT 2
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 0
53813: PUSH
53814: LD_INT 2
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 1
53823: NEG
53824: PUSH
53825: LD_INT 1
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 2
53834: NEG
53835: PUSH
53836: LD_INT 0
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 2
53845: NEG
53846: PUSH
53847: LD_INT 1
53849: NEG
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 2
53857: NEG
53858: PUSH
53859: LD_INT 2
53861: NEG
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53888: LD_ADDR_VAR 0 18
53892: PUSH
53893: LD_INT 0
53895: PUSH
53896: LD_INT 0
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 0
53905: PUSH
53906: LD_INT 1
53908: NEG
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 1
53916: PUSH
53917: LD_INT 0
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 1
53926: PUSH
53927: LD_INT 1
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 0
53936: PUSH
53937: LD_INT 1
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 1
53946: NEG
53947: PUSH
53948: LD_INT 0
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 1
53957: NEG
53958: PUSH
53959: LD_INT 1
53961: NEG
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 1
53969: NEG
53970: PUSH
53971: LD_INT 2
53973: NEG
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 0
53981: PUSH
53982: LD_INT 2
53984: NEG
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 1
53992: PUSH
53993: LD_INT 1
53995: NEG
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 2
54003: PUSH
54004: LD_INT 0
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 2
54013: PUSH
54014: LD_INT 1
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 2
54023: PUSH
54024: LD_INT 2
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 1
54033: PUSH
54034: LD_INT 2
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 0
54043: PUSH
54044: LD_INT 2
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 1
54053: NEG
54054: PUSH
54055: LD_INT 1
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 2
54064: NEG
54065: PUSH
54066: LD_INT 0
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 2
54075: NEG
54076: PUSH
54077: LD_INT 1
54079: NEG
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 2
54087: NEG
54088: PUSH
54089: LD_INT 2
54091: NEG
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54118: LD_ADDR_VAR 0 19
54122: PUSH
54123: LD_INT 0
54125: PUSH
54126: LD_INT 0
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 0
54135: PUSH
54136: LD_INT 1
54138: NEG
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 1
54146: PUSH
54147: LD_INT 0
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 1
54156: PUSH
54157: LD_INT 1
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 0
54166: PUSH
54167: LD_INT 1
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 1
54176: NEG
54177: PUSH
54178: LD_INT 0
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 1
54187: NEG
54188: PUSH
54189: LD_INT 1
54191: NEG
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 1
54199: NEG
54200: PUSH
54201: LD_INT 2
54203: NEG
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 0
54211: PUSH
54212: LD_INT 2
54214: NEG
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 1
54222: PUSH
54223: LD_INT 1
54225: NEG
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 2
54233: PUSH
54234: LD_INT 0
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 2
54243: PUSH
54244: LD_INT 1
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 2
54253: PUSH
54254: LD_INT 2
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 1
54263: PUSH
54264: LD_INT 2
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 0
54273: PUSH
54274: LD_INT 2
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 1
54283: NEG
54284: PUSH
54285: LD_INT 1
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 2
54294: NEG
54295: PUSH
54296: LD_INT 0
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 2
54305: NEG
54306: PUSH
54307: LD_INT 1
54309: NEG
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 2
54317: NEG
54318: PUSH
54319: LD_INT 2
54321: NEG
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54348: LD_ADDR_VAR 0 20
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 0
54365: PUSH
54366: LD_INT 1
54368: NEG
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 1
54376: PUSH
54377: LD_INT 0
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 1
54386: PUSH
54387: LD_INT 1
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 0
54396: PUSH
54397: LD_INT 1
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 1
54406: NEG
54407: PUSH
54408: LD_INT 0
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 1
54417: NEG
54418: PUSH
54419: LD_INT 1
54421: NEG
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 1
54429: NEG
54430: PUSH
54431: LD_INT 2
54433: NEG
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 0
54441: PUSH
54442: LD_INT 2
54444: NEG
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 1
54452: PUSH
54453: LD_INT 1
54455: NEG
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 2
54463: PUSH
54464: LD_INT 0
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 2
54473: PUSH
54474: LD_INT 1
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 2
54483: PUSH
54484: LD_INT 2
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 1
54493: PUSH
54494: LD_INT 2
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 0
54503: PUSH
54504: LD_INT 2
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 1
54513: NEG
54514: PUSH
54515: LD_INT 1
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 2
54524: NEG
54525: PUSH
54526: LD_INT 0
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 2
54535: NEG
54536: PUSH
54537: LD_INT 1
54539: NEG
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 2
54547: NEG
54548: PUSH
54549: LD_INT 2
54551: NEG
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54578: LD_ADDR_VAR 0 21
54582: PUSH
54583: LD_INT 0
54585: PUSH
54586: LD_INT 0
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 0
54595: PUSH
54596: LD_INT 1
54598: NEG
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 1
54606: PUSH
54607: LD_INT 0
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 1
54616: PUSH
54617: LD_INT 1
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 0
54626: PUSH
54627: LD_INT 1
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 1
54636: NEG
54637: PUSH
54638: LD_INT 0
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 1
54647: NEG
54648: PUSH
54649: LD_INT 1
54651: NEG
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 1
54659: NEG
54660: PUSH
54661: LD_INT 2
54663: NEG
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: LD_INT 2
54674: NEG
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 1
54682: PUSH
54683: LD_INT 1
54685: NEG
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 2
54693: PUSH
54694: LD_INT 0
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 2
54703: PUSH
54704: LD_INT 1
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 2
54713: PUSH
54714: LD_INT 2
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 1
54723: PUSH
54724: LD_INT 2
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 0
54733: PUSH
54734: LD_INT 2
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 1
54743: NEG
54744: PUSH
54745: LD_INT 1
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 2
54754: NEG
54755: PUSH
54756: LD_INT 0
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 2
54765: NEG
54766: PUSH
54767: LD_INT 1
54769: NEG
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 2
54777: NEG
54778: PUSH
54779: LD_INT 2
54781: NEG
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54808: LD_ADDR_VAR 0 22
54812: PUSH
54813: LD_INT 0
54815: PUSH
54816: LD_INT 0
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: LD_INT 1
54828: NEG
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 1
54836: PUSH
54837: LD_INT 0
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 1
54846: PUSH
54847: LD_INT 1
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 0
54856: PUSH
54857: LD_INT 1
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 1
54866: NEG
54867: PUSH
54868: LD_INT 0
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 1
54877: NEG
54878: PUSH
54879: LD_INT 1
54881: NEG
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 1
54889: NEG
54890: PUSH
54891: LD_INT 2
54893: NEG
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 0
54901: PUSH
54902: LD_INT 2
54904: NEG
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 1
54912: PUSH
54913: LD_INT 1
54915: NEG
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 2
54923: PUSH
54924: LD_INT 0
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 2
54933: PUSH
54934: LD_INT 1
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 2
54943: PUSH
54944: LD_INT 2
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 1
54953: PUSH
54954: LD_INT 2
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 0
54963: PUSH
54964: LD_INT 2
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 1
54973: NEG
54974: PUSH
54975: LD_INT 1
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 2
54984: NEG
54985: PUSH
54986: LD_INT 0
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 2
54995: NEG
54996: PUSH
54997: LD_INT 1
54999: NEG
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 2
55007: NEG
55008: PUSH
55009: LD_INT 2
55011: NEG
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55038: LD_ADDR_VAR 0 23
55042: PUSH
55043: LD_INT 0
55045: PUSH
55046: LD_INT 0
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 0
55055: PUSH
55056: LD_INT 1
55058: NEG
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 1
55066: PUSH
55067: LD_INT 0
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 1
55076: PUSH
55077: LD_INT 1
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 0
55086: PUSH
55087: LD_INT 1
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 1
55096: NEG
55097: PUSH
55098: LD_INT 0
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 1
55107: NEG
55108: PUSH
55109: LD_INT 1
55111: NEG
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 1
55119: NEG
55120: PUSH
55121: LD_INT 2
55123: NEG
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 0
55131: PUSH
55132: LD_INT 2
55134: NEG
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 1
55142: PUSH
55143: LD_INT 1
55145: NEG
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 2
55153: PUSH
55154: LD_INT 0
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 2
55163: PUSH
55164: LD_INT 1
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 2
55173: PUSH
55174: LD_INT 2
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 1
55183: PUSH
55184: LD_INT 2
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 0
55193: PUSH
55194: LD_INT 2
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 1
55203: NEG
55204: PUSH
55205: LD_INT 1
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 2
55214: NEG
55215: PUSH
55216: LD_INT 0
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 2
55225: NEG
55226: PUSH
55227: LD_INT 1
55229: NEG
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 2
55237: NEG
55238: PUSH
55239: LD_INT 2
55241: NEG
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 2
55249: NEG
55250: PUSH
55251: LD_INT 3
55253: NEG
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 1
55261: NEG
55262: PUSH
55263: LD_INT 3
55265: NEG
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 1
55273: PUSH
55274: LD_INT 2
55276: NEG
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 2
55284: PUSH
55285: LD_INT 1
55287: NEG
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55318: LD_ADDR_VAR 0 24
55322: PUSH
55323: LD_INT 0
55325: PUSH
55326: LD_INT 0
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 0
55335: PUSH
55336: LD_INT 1
55338: NEG
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 1
55346: PUSH
55347: LD_INT 0
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 1
55356: PUSH
55357: LD_INT 1
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 0
55366: PUSH
55367: LD_INT 1
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 1
55376: NEG
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 1
55387: NEG
55388: PUSH
55389: LD_INT 1
55391: NEG
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 1
55399: NEG
55400: PUSH
55401: LD_INT 2
55403: NEG
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 0
55411: PUSH
55412: LD_INT 2
55414: NEG
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 1
55422: PUSH
55423: LD_INT 1
55425: NEG
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 2
55433: PUSH
55434: LD_INT 0
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 2
55443: PUSH
55444: LD_INT 1
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 2
55453: PUSH
55454: LD_INT 2
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 1
55463: PUSH
55464: LD_INT 2
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 0
55473: PUSH
55474: LD_INT 2
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 1
55483: NEG
55484: PUSH
55485: LD_INT 1
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 2
55494: NEG
55495: PUSH
55496: LD_INT 0
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 2
55505: NEG
55506: PUSH
55507: LD_INT 1
55509: NEG
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 2
55517: NEG
55518: PUSH
55519: LD_INT 2
55521: NEG
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 1
55529: PUSH
55530: LD_INT 2
55532: NEG
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 2
55540: PUSH
55541: LD_INT 1
55543: NEG
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 3
55551: PUSH
55552: LD_INT 1
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 3
55561: PUSH
55562: LD_INT 2
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55594: LD_ADDR_VAR 0 25
55598: PUSH
55599: LD_INT 0
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 0
55611: PUSH
55612: LD_INT 1
55614: NEG
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 1
55622: PUSH
55623: LD_INT 0
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 1
55632: PUSH
55633: LD_INT 1
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 0
55642: PUSH
55643: LD_INT 1
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 1
55652: NEG
55653: PUSH
55654: LD_INT 0
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 1
55663: NEG
55664: PUSH
55665: LD_INT 1
55667: NEG
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 1
55675: NEG
55676: PUSH
55677: LD_INT 2
55679: NEG
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 0
55687: PUSH
55688: LD_INT 2
55690: NEG
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 1
55698: PUSH
55699: LD_INT 1
55701: NEG
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 2
55709: PUSH
55710: LD_INT 0
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 2
55719: PUSH
55720: LD_INT 1
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 2
55729: PUSH
55730: LD_INT 2
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 1
55739: PUSH
55740: LD_INT 2
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 0
55749: PUSH
55750: LD_INT 2
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 1
55759: NEG
55760: PUSH
55761: LD_INT 1
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 2
55770: NEG
55771: PUSH
55772: LD_INT 0
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 2
55781: NEG
55782: PUSH
55783: LD_INT 1
55785: NEG
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 2
55793: NEG
55794: PUSH
55795: LD_INT 2
55797: NEG
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 3
55805: PUSH
55806: LD_INT 1
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 3
55815: PUSH
55816: LD_INT 2
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 2
55825: PUSH
55826: LD_INT 3
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 1
55835: PUSH
55836: LD_INT 3
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55868: LD_ADDR_VAR 0 26
55872: PUSH
55873: LD_INT 0
55875: PUSH
55876: LD_INT 0
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 0
55885: PUSH
55886: LD_INT 1
55888: NEG
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 1
55896: PUSH
55897: LD_INT 0
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 1
55906: PUSH
55907: LD_INT 1
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 0
55916: PUSH
55917: LD_INT 1
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 1
55926: NEG
55927: PUSH
55928: LD_INT 0
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 1
55937: NEG
55938: PUSH
55939: LD_INT 1
55941: NEG
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 1
55949: NEG
55950: PUSH
55951: LD_INT 2
55953: NEG
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 0
55961: PUSH
55962: LD_INT 2
55964: NEG
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 1
55972: PUSH
55973: LD_INT 1
55975: NEG
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 2
55983: PUSH
55984: LD_INT 0
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 2
55993: PUSH
55994: LD_INT 1
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 2
56003: PUSH
56004: LD_INT 2
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 1
56013: PUSH
56014: LD_INT 2
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 0
56023: PUSH
56024: LD_INT 2
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 1
56033: NEG
56034: PUSH
56035: LD_INT 1
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 2
56044: NEG
56045: PUSH
56046: LD_INT 0
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 2
56055: NEG
56056: PUSH
56057: LD_INT 1
56059: NEG
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 2
56067: NEG
56068: PUSH
56069: LD_INT 2
56071: NEG
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 2
56079: PUSH
56080: LD_INT 3
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 1
56089: PUSH
56090: LD_INT 3
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 1
56099: NEG
56100: PUSH
56101: LD_INT 2
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 2
56110: NEG
56111: PUSH
56112: LD_INT 1
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56144: LD_ADDR_VAR 0 27
56148: PUSH
56149: LD_INT 0
56151: PUSH
56152: LD_INT 0
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 0
56161: PUSH
56162: LD_INT 1
56164: NEG
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 1
56172: PUSH
56173: LD_INT 0
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 1
56182: PUSH
56183: LD_INT 1
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 0
56192: PUSH
56193: LD_INT 1
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 1
56202: NEG
56203: PUSH
56204: LD_INT 0
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 1
56213: NEG
56214: PUSH
56215: LD_INT 1
56217: NEG
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 1
56225: NEG
56226: PUSH
56227: LD_INT 2
56229: NEG
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 0
56237: PUSH
56238: LD_INT 2
56240: NEG
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 1
56248: PUSH
56249: LD_INT 1
56251: NEG
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 2
56259: PUSH
56260: LD_INT 0
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 2
56269: PUSH
56270: LD_INT 1
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 2
56279: PUSH
56280: LD_INT 2
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 1
56289: PUSH
56290: LD_INT 2
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 0
56299: PUSH
56300: LD_INT 2
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 1
56309: NEG
56310: PUSH
56311: LD_INT 1
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 2
56320: NEG
56321: PUSH
56322: LD_INT 0
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 2
56331: NEG
56332: PUSH
56333: LD_INT 1
56335: NEG
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 2
56343: NEG
56344: PUSH
56345: LD_INT 2
56347: NEG
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 1
56355: NEG
56356: PUSH
56357: LD_INT 2
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 2
56366: NEG
56367: PUSH
56368: LD_INT 1
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 3
56377: NEG
56378: PUSH
56379: LD_INT 1
56381: NEG
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 3
56389: NEG
56390: PUSH
56391: LD_INT 2
56393: NEG
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56424: LD_ADDR_VAR 0 28
56428: PUSH
56429: LD_INT 0
56431: PUSH
56432: LD_INT 0
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 0
56441: PUSH
56442: LD_INT 1
56444: NEG
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 1
56452: PUSH
56453: LD_INT 0
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 1
56462: PUSH
56463: LD_INT 1
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 0
56472: PUSH
56473: LD_INT 1
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 1
56482: NEG
56483: PUSH
56484: LD_INT 0
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 1
56493: NEG
56494: PUSH
56495: LD_INT 1
56497: NEG
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 1
56505: NEG
56506: PUSH
56507: LD_INT 2
56509: NEG
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 0
56517: PUSH
56518: LD_INT 2
56520: NEG
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 1
56528: PUSH
56529: LD_INT 1
56531: NEG
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 2
56539: PUSH
56540: LD_INT 0
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 2
56549: PUSH
56550: LD_INT 1
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 2
56559: PUSH
56560: LD_INT 2
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 1
56569: PUSH
56570: LD_INT 2
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 0
56579: PUSH
56580: LD_INT 2
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 1
56589: NEG
56590: PUSH
56591: LD_INT 1
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 2
56600: NEG
56601: PUSH
56602: LD_INT 0
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 2
56611: NEG
56612: PUSH
56613: LD_INT 1
56615: NEG
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 2
56623: NEG
56624: PUSH
56625: LD_INT 2
56627: NEG
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 2
56635: NEG
56636: PUSH
56637: LD_INT 3
56639: NEG
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 1
56647: NEG
56648: PUSH
56649: LD_INT 3
56651: NEG
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 3
56659: NEG
56660: PUSH
56661: LD_INT 1
56663: NEG
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 3
56671: NEG
56672: PUSH
56673: LD_INT 2
56675: NEG
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56706: LD_ADDR_VAR 0 29
56710: PUSH
56711: LD_INT 0
56713: PUSH
56714: LD_INT 0
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 0
56723: PUSH
56724: LD_INT 1
56726: NEG
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 1
56734: PUSH
56735: LD_INT 0
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 1
56744: PUSH
56745: LD_INT 1
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 0
56754: PUSH
56755: LD_INT 1
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 1
56764: NEG
56765: PUSH
56766: LD_INT 0
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 1
56775: NEG
56776: PUSH
56777: LD_INT 1
56779: NEG
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 1
56787: NEG
56788: PUSH
56789: LD_INT 2
56791: NEG
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 0
56799: PUSH
56800: LD_INT 2
56802: NEG
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 1
56810: PUSH
56811: LD_INT 1
56813: NEG
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 2
56821: PUSH
56822: LD_INT 0
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 2
56831: PUSH
56832: LD_INT 1
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 1
56841: PUSH
56842: LD_INT 2
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 0
56851: PUSH
56852: LD_INT 2
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 1
56861: NEG
56862: PUSH
56863: LD_INT 1
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 2
56872: NEG
56873: PUSH
56874: LD_INT 1
56876: NEG
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 2
56884: NEG
56885: PUSH
56886: LD_INT 2
56888: NEG
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 2
56896: NEG
56897: PUSH
56898: LD_INT 3
56900: NEG
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 2
56908: PUSH
56909: LD_INT 1
56911: NEG
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 3
56919: PUSH
56920: LD_INT 1
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 1
56929: PUSH
56930: LD_INT 3
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 1
56939: NEG
56940: PUSH
56941: LD_INT 2
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 3
56950: NEG
56951: PUSH
56952: LD_INT 2
56954: NEG
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56985: LD_ADDR_VAR 0 30
56989: PUSH
56990: LD_INT 0
56992: PUSH
56993: LD_INT 0
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 0
57002: PUSH
57003: LD_INT 1
57005: NEG
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 1
57013: PUSH
57014: LD_INT 0
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 1
57023: PUSH
57024: LD_INT 1
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 0
57033: PUSH
57034: LD_INT 1
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 1
57043: NEG
57044: PUSH
57045: LD_INT 0
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 1
57054: NEG
57055: PUSH
57056: LD_INT 1
57058: NEG
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 1
57066: NEG
57067: PUSH
57068: LD_INT 2
57070: NEG
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 0
57078: PUSH
57079: LD_INT 2
57081: NEG
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 1
57089: PUSH
57090: LD_INT 1
57092: NEG
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 2
57100: PUSH
57101: LD_INT 0
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 2
57110: PUSH
57111: LD_INT 1
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 2
57120: PUSH
57121: LD_INT 2
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 1
57130: PUSH
57131: LD_INT 2
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 1
57140: NEG
57141: PUSH
57142: LD_INT 1
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 2
57151: NEG
57152: PUSH
57153: LD_INT 0
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 2
57162: NEG
57163: PUSH
57164: LD_INT 1
57166: NEG
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 1
57174: NEG
57175: PUSH
57176: LD_INT 3
57178: NEG
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 1
57186: PUSH
57187: LD_INT 2
57189: NEG
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 3
57197: PUSH
57198: LD_INT 2
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 2
57207: PUSH
57208: LD_INT 3
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 2
57217: NEG
57218: PUSH
57219: LD_INT 1
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 3
57228: NEG
57229: PUSH
57230: LD_INT 1
57232: NEG
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57263: LD_ADDR_VAR 0 31
57267: PUSH
57268: LD_INT 0
57270: PUSH
57271: LD_INT 0
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 0
57280: PUSH
57281: LD_INT 1
57283: NEG
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 1
57291: PUSH
57292: LD_INT 0
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 1
57301: PUSH
57302: LD_INT 1
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 0
57311: PUSH
57312: LD_INT 1
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 1
57321: NEG
57322: PUSH
57323: LD_INT 0
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 1
57332: NEG
57333: PUSH
57334: LD_INT 1
57336: NEG
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 1
57344: NEG
57345: PUSH
57346: LD_INT 2
57348: NEG
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 1
57356: PUSH
57357: LD_INT 1
57359: NEG
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 2
57367: PUSH
57368: LD_INT 0
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 2
57377: PUSH
57378: LD_INT 1
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 2
57387: PUSH
57388: LD_INT 2
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 1
57397: PUSH
57398: LD_INT 2
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 0
57407: PUSH
57408: LD_INT 2
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 1
57417: NEG
57418: PUSH
57419: LD_INT 1
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 2
57428: NEG
57429: PUSH
57430: LD_INT 1
57432: NEG
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 2
57440: NEG
57441: PUSH
57442: LD_INT 2
57444: NEG
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 2
57452: NEG
57453: PUSH
57454: LD_INT 3
57456: NEG
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 2
57464: PUSH
57465: LD_INT 1
57467: NEG
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 3
57475: PUSH
57476: LD_INT 1
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 1
57485: PUSH
57486: LD_INT 3
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 1
57495: NEG
57496: PUSH
57497: LD_INT 2
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 3
57506: NEG
57507: PUSH
57508: LD_INT 2
57510: NEG
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57541: LD_ADDR_VAR 0 32
57545: PUSH
57546: LD_INT 0
57548: PUSH
57549: LD_INT 0
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 0
57558: PUSH
57559: LD_INT 1
57561: NEG
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 1
57569: PUSH
57570: LD_INT 0
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 1
57579: PUSH
57580: LD_INT 1
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 0
57589: PUSH
57590: LD_INT 1
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 1
57599: NEG
57600: PUSH
57601: LD_INT 0
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 1
57610: NEG
57611: PUSH
57612: LD_INT 1
57614: NEG
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 1
57622: NEG
57623: PUSH
57624: LD_INT 2
57626: NEG
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 0
57634: PUSH
57635: LD_INT 2
57637: NEG
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 1
57645: PUSH
57646: LD_INT 1
57648: NEG
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 2
57656: PUSH
57657: LD_INT 1
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 2
57666: PUSH
57667: LD_INT 2
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 1
57676: PUSH
57677: LD_INT 2
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 0
57686: PUSH
57687: LD_INT 2
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 1
57696: NEG
57697: PUSH
57698: LD_INT 1
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 2
57707: NEG
57708: PUSH
57709: LD_INT 0
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 2
57718: NEG
57719: PUSH
57720: LD_INT 1
57722: NEG
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 1
57730: NEG
57731: PUSH
57732: LD_INT 3
57734: NEG
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 1
57742: PUSH
57743: LD_INT 2
57745: NEG
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 3
57753: PUSH
57754: LD_INT 2
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 2
57763: PUSH
57764: LD_INT 3
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 2
57773: NEG
57774: PUSH
57775: LD_INT 1
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 3
57784: NEG
57785: PUSH
57786: LD_INT 1
57788: NEG
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57819: LD_ADDR_VAR 0 33
57823: PUSH
57824: LD_INT 0
57826: PUSH
57827: LD_INT 0
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 0
57836: PUSH
57837: LD_INT 1
57839: NEG
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 1
57847: PUSH
57848: LD_INT 0
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 1
57857: PUSH
57858: LD_INT 1
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 0
57867: PUSH
57868: LD_INT 1
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 1
57877: NEG
57878: PUSH
57879: LD_INT 0
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 1
57888: NEG
57889: PUSH
57890: LD_INT 1
57892: NEG
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 1
57900: NEG
57901: PUSH
57902: LD_INT 2
57904: NEG
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 1
57912: PUSH
57913: LD_INT 1
57915: NEG
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 2
57923: PUSH
57924: LD_INT 0
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 2
57933: PUSH
57934: LD_INT 1
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 1
57943: PUSH
57944: LD_INT 2
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 0
57953: PUSH
57954: LD_INT 2
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 1
57963: NEG
57964: PUSH
57965: LD_INT 1
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 2
57974: NEG
57975: PUSH
57976: LD_INT 0
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 2
57985: NEG
57986: PUSH
57987: LD_INT 1
57989: NEG
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 2
57997: NEG
57998: PUSH
57999: LD_INT 2
58001: NEG
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 2
58009: NEG
58010: PUSH
58011: LD_INT 3
58013: NEG
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 2
58021: PUSH
58022: LD_INT 1
58024: NEG
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 3
58032: PUSH
58033: LD_INT 1
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 1
58042: PUSH
58043: LD_INT 3
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 1
58052: NEG
58053: PUSH
58054: LD_INT 2
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 3
58063: NEG
58064: PUSH
58065: LD_INT 2
58067: NEG
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58098: LD_ADDR_VAR 0 34
58102: PUSH
58103: LD_INT 0
58105: PUSH
58106: LD_INT 0
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 0
58115: PUSH
58116: LD_INT 1
58118: NEG
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 1
58126: PUSH
58127: LD_INT 0
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 1
58136: PUSH
58137: LD_INT 1
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 0
58146: PUSH
58147: LD_INT 1
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 1
58156: NEG
58157: PUSH
58158: LD_INT 0
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 1
58167: NEG
58168: PUSH
58169: LD_INT 1
58171: NEG
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 1
58179: NEG
58180: PUSH
58181: LD_INT 2
58183: NEG
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 0
58191: PUSH
58192: LD_INT 2
58194: NEG
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 1
58202: PUSH
58203: LD_INT 1
58205: NEG
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 2
58213: PUSH
58214: LD_INT 1
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 2
58223: PUSH
58224: LD_INT 2
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 1
58233: PUSH
58234: LD_INT 2
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 1
58243: NEG
58244: PUSH
58245: LD_INT 1
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 2
58254: NEG
58255: PUSH
58256: LD_INT 0
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 2
58265: NEG
58266: PUSH
58267: LD_INT 1
58269: NEG
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 2
58277: NEG
58278: PUSH
58279: LD_INT 2
58281: NEG
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 1
58289: NEG
58290: PUSH
58291: LD_INT 3
58293: NEG
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 1
58301: PUSH
58302: LD_INT 2
58304: NEG
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 3
58312: PUSH
58313: LD_INT 2
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 2
58322: PUSH
58323: LD_INT 3
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 2
58332: NEG
58333: PUSH
58334: LD_INT 1
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 3
58343: NEG
58344: PUSH
58345: LD_INT 1
58347: NEG
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58378: LD_ADDR_VAR 0 35
58382: PUSH
58383: LD_INT 0
58385: PUSH
58386: LD_INT 0
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 0
58395: PUSH
58396: LD_INT 1
58398: NEG
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 1
58406: PUSH
58407: LD_INT 0
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 1
58416: PUSH
58417: LD_INT 1
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 0
58426: PUSH
58427: LD_INT 1
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 1
58436: NEG
58437: PUSH
58438: LD_INT 0
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 1
58447: NEG
58448: PUSH
58449: LD_INT 1
58451: NEG
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 2
58459: PUSH
58460: LD_INT 1
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 2
58469: NEG
58470: PUSH
58471: LD_INT 1
58473: NEG
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58490: LD_ADDR_VAR 0 36
58494: PUSH
58495: LD_INT 0
58497: PUSH
58498: LD_INT 0
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 0
58507: PUSH
58508: LD_INT 1
58510: NEG
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 1
58518: PUSH
58519: LD_INT 0
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 1
58528: PUSH
58529: LD_INT 1
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 0
58538: PUSH
58539: LD_INT 1
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 1
58548: NEG
58549: PUSH
58550: LD_INT 0
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 1
58559: NEG
58560: PUSH
58561: LD_INT 1
58563: NEG
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 1
58571: NEG
58572: PUSH
58573: LD_INT 2
58575: NEG
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 1
58583: PUSH
58584: LD_INT 2
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58602: LD_ADDR_VAR 0 37
58606: PUSH
58607: LD_INT 0
58609: PUSH
58610: LD_INT 0
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 0
58619: PUSH
58620: LD_INT 1
58622: NEG
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 1
58630: PUSH
58631: LD_INT 0
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 1
58640: PUSH
58641: LD_INT 1
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 0
58650: PUSH
58651: LD_INT 1
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 1
58660: NEG
58661: PUSH
58662: LD_INT 0
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 1
58671: NEG
58672: PUSH
58673: LD_INT 1
58675: NEG
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 1
58683: PUSH
58684: LD_INT 1
58686: NEG
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 1
58694: NEG
58695: PUSH
58696: LD_INT 1
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58714: LD_ADDR_VAR 0 38
58718: PUSH
58719: LD_INT 0
58721: PUSH
58722: LD_INT 0
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 0
58731: PUSH
58732: LD_INT 1
58734: NEG
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 1
58742: PUSH
58743: LD_INT 0
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 1
58752: PUSH
58753: LD_INT 1
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 0
58762: PUSH
58763: LD_INT 1
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 1
58772: NEG
58773: PUSH
58774: LD_INT 0
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 1
58783: NEG
58784: PUSH
58785: LD_INT 1
58787: NEG
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 2
58795: PUSH
58796: LD_INT 1
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 2
58805: NEG
58806: PUSH
58807: LD_INT 1
58809: NEG
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58826: LD_ADDR_VAR 0 39
58830: PUSH
58831: LD_INT 0
58833: PUSH
58834: LD_INT 0
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 0
58843: PUSH
58844: LD_INT 1
58846: NEG
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 1
58854: PUSH
58855: LD_INT 0
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 1
58864: PUSH
58865: LD_INT 1
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 0
58874: PUSH
58875: LD_INT 1
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 1
58884: NEG
58885: PUSH
58886: LD_INT 0
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 1
58895: NEG
58896: PUSH
58897: LD_INT 1
58899: NEG
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 1
58907: NEG
58908: PUSH
58909: LD_INT 2
58911: NEG
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 1
58919: PUSH
58920: LD_INT 2
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58938: LD_ADDR_VAR 0 40
58942: PUSH
58943: LD_INT 0
58945: PUSH
58946: LD_INT 0
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 0
58955: PUSH
58956: LD_INT 1
58958: NEG
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 1
58966: PUSH
58967: LD_INT 0
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 1
58976: PUSH
58977: LD_INT 1
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 0
58986: PUSH
58987: LD_INT 1
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 1
58996: NEG
58997: PUSH
58998: LD_INT 0
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 1
59007: NEG
59008: PUSH
59009: LD_INT 1
59011: NEG
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 1
59019: PUSH
59020: LD_INT 1
59022: NEG
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 1
59030: NEG
59031: PUSH
59032: LD_INT 1
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59050: LD_ADDR_VAR 0 41
59054: PUSH
59055: LD_INT 0
59057: PUSH
59058: LD_INT 0
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 0
59067: PUSH
59068: LD_INT 1
59070: NEG
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 1
59078: PUSH
59079: LD_INT 0
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 1
59088: PUSH
59089: LD_INT 1
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 0
59098: PUSH
59099: LD_INT 1
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 1
59108: NEG
59109: PUSH
59110: LD_INT 0
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 1
59119: NEG
59120: PUSH
59121: LD_INT 1
59123: NEG
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 1
59131: NEG
59132: PUSH
59133: LD_INT 2
59135: NEG
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 1
59143: PUSH
59144: LD_INT 1
59146: NEG
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 2
59154: PUSH
59155: LD_INT 0
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 2
59164: PUSH
59165: LD_INT 1
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 2
59174: PUSH
59175: LD_INT 2
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 1
59184: PUSH
59185: LD_INT 2
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 1
59194: NEG
59195: PUSH
59196: LD_INT 1
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 2
59205: NEG
59206: PUSH
59207: LD_INT 0
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 2
59216: NEG
59217: PUSH
59218: LD_INT 1
59220: NEG
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 2
59228: NEG
59229: PUSH
59230: LD_INT 2
59232: NEG
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 2
59240: NEG
59241: PUSH
59242: LD_INT 3
59244: NEG
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 2
59252: PUSH
59253: LD_INT 1
59255: NEG
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 3
59263: PUSH
59264: LD_INT 0
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 3
59273: PUSH
59274: LD_INT 1
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 3
59283: PUSH
59284: LD_INT 2
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 3
59293: PUSH
59294: LD_INT 3
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 2
59303: PUSH
59304: LD_INT 3
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 2
59313: NEG
59314: PUSH
59315: LD_INT 1
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 3
59324: NEG
59325: PUSH
59326: LD_INT 0
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 3
59335: NEG
59336: PUSH
59337: LD_INT 1
59339: NEG
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 3
59347: NEG
59348: PUSH
59349: LD_INT 2
59351: NEG
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 3
59359: NEG
59360: PUSH
59361: LD_INT 3
59363: NEG
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59400: LD_ADDR_VAR 0 42
59404: PUSH
59405: LD_INT 0
59407: PUSH
59408: LD_INT 0
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 0
59417: PUSH
59418: LD_INT 1
59420: NEG
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 1
59428: PUSH
59429: LD_INT 0
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 1
59438: PUSH
59439: LD_INT 1
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 0
59448: PUSH
59449: LD_INT 1
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 1
59458: NEG
59459: PUSH
59460: LD_INT 0
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 1
59469: NEG
59470: PUSH
59471: LD_INT 1
59473: NEG
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 1
59481: NEG
59482: PUSH
59483: LD_INT 2
59485: NEG
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 0
59493: PUSH
59494: LD_INT 2
59496: NEG
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 1
59504: PUSH
59505: LD_INT 1
59507: NEG
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 2
59515: PUSH
59516: LD_INT 1
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 2
59525: PUSH
59526: LD_INT 2
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 1
59535: PUSH
59536: LD_INT 2
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 0
59545: PUSH
59546: LD_INT 2
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 1
59555: NEG
59556: PUSH
59557: LD_INT 1
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 2
59566: NEG
59567: PUSH
59568: LD_INT 1
59570: NEG
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 2
59578: NEG
59579: PUSH
59580: LD_INT 2
59582: NEG
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 2
59590: NEG
59591: PUSH
59592: LD_INT 3
59594: NEG
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 1
59602: NEG
59603: PUSH
59604: LD_INT 3
59606: NEG
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 0
59614: PUSH
59615: LD_INT 3
59617: NEG
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 1
59625: PUSH
59626: LD_INT 2
59628: NEG
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 3
59636: PUSH
59637: LD_INT 2
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 3
59646: PUSH
59647: LD_INT 3
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 2
59656: PUSH
59657: LD_INT 3
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 1
59666: PUSH
59667: LD_INT 3
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 0
59676: PUSH
59677: LD_INT 3
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 1
59686: NEG
59687: PUSH
59688: LD_INT 2
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 3
59697: NEG
59698: PUSH
59699: LD_INT 2
59701: NEG
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 3
59709: NEG
59710: PUSH
59711: LD_INT 3
59713: NEG
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59750: LD_ADDR_VAR 0 43
59754: PUSH
59755: LD_INT 0
59757: PUSH
59758: LD_INT 0
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 0
59767: PUSH
59768: LD_INT 1
59770: NEG
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 1
59778: PUSH
59779: LD_INT 0
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 1
59788: PUSH
59789: LD_INT 1
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 0
59798: PUSH
59799: LD_INT 1
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 1
59808: NEG
59809: PUSH
59810: LD_INT 0
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 1
59819: NEG
59820: PUSH
59821: LD_INT 1
59823: NEG
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 1
59831: NEG
59832: PUSH
59833: LD_INT 2
59835: NEG
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 0
59843: PUSH
59844: LD_INT 2
59846: NEG
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 1
59854: PUSH
59855: LD_INT 1
59857: NEG
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 2
59865: PUSH
59866: LD_INT 0
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 2
59875: PUSH
59876: LD_INT 1
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 1
59885: PUSH
59886: LD_INT 2
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 0
59895: PUSH
59896: LD_INT 2
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 1
59905: NEG
59906: PUSH
59907: LD_INT 1
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 2
59916: NEG
59917: PUSH
59918: LD_INT 0
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 2
59927: NEG
59928: PUSH
59929: LD_INT 1
59931: NEG
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 1
59939: NEG
59940: PUSH
59941: LD_INT 3
59943: NEG
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 0
59951: PUSH
59952: LD_INT 3
59954: NEG
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 1
59962: PUSH
59963: LD_INT 2
59965: NEG
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 2
59973: PUSH
59974: LD_INT 1
59976: NEG
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 3
59984: PUSH
59985: LD_INT 0
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 3
59994: PUSH
59995: LD_INT 1
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 1
60004: PUSH
60005: LD_INT 3
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 0
60014: PUSH
60015: LD_INT 3
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 1
60024: NEG
60025: PUSH
60026: LD_INT 2
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 2
60035: NEG
60036: PUSH
60037: LD_INT 1
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 3
60046: NEG
60047: PUSH
60048: LD_INT 0
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 3
60057: NEG
60058: PUSH
60059: LD_INT 1
60061: NEG
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60098: LD_ADDR_VAR 0 44
60102: PUSH
60103: LD_INT 0
60105: PUSH
60106: LD_INT 0
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 0
60115: PUSH
60116: LD_INT 1
60118: NEG
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 1
60126: PUSH
60127: LD_INT 0
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 1
60136: PUSH
60137: LD_INT 1
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 0
60146: PUSH
60147: LD_INT 1
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 1
60156: NEG
60157: PUSH
60158: LD_INT 0
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 1
60167: NEG
60168: PUSH
60169: LD_INT 1
60171: NEG
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 1
60179: NEG
60180: PUSH
60181: LD_INT 2
60183: NEG
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 1
60191: PUSH
60192: LD_INT 1
60194: NEG
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 2
60202: PUSH
60203: LD_INT 0
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 2
60212: PUSH
60213: LD_INT 1
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 2
60222: PUSH
60223: LD_INT 2
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 1
60232: PUSH
60233: LD_INT 2
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 1
60242: NEG
60243: PUSH
60244: LD_INT 1
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 2
60253: NEG
60254: PUSH
60255: LD_INT 0
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 2
60264: NEG
60265: PUSH
60266: LD_INT 1
60268: NEG
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 2
60276: NEG
60277: PUSH
60278: LD_INT 2
60280: NEG
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 2
60288: NEG
60289: PUSH
60290: LD_INT 3
60292: NEG
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 2
60300: PUSH
60301: LD_INT 1
60303: NEG
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 3
60311: PUSH
60312: LD_INT 0
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 3
60321: PUSH
60322: LD_INT 1
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 3
60331: PUSH
60332: LD_INT 2
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 3
60341: PUSH
60342: LD_INT 3
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 2
60351: PUSH
60352: LD_INT 3
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 2
60361: NEG
60362: PUSH
60363: LD_INT 1
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 3
60372: NEG
60373: PUSH
60374: LD_INT 0
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 3
60383: NEG
60384: PUSH
60385: LD_INT 1
60387: NEG
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 3
60395: NEG
60396: PUSH
60397: LD_INT 2
60399: NEG
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 3
60407: NEG
60408: PUSH
60409: LD_INT 3
60411: NEG
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60448: LD_ADDR_VAR 0 45
60452: PUSH
60453: LD_INT 0
60455: PUSH
60456: LD_INT 0
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 0
60465: PUSH
60466: LD_INT 1
60468: NEG
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 1
60476: PUSH
60477: LD_INT 0
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 1
60486: PUSH
60487: LD_INT 1
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 0
60496: PUSH
60497: LD_INT 1
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 1
60506: NEG
60507: PUSH
60508: LD_INT 0
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 1
60517: NEG
60518: PUSH
60519: LD_INT 1
60521: NEG
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 1
60529: NEG
60530: PUSH
60531: LD_INT 2
60533: NEG
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 0
60541: PUSH
60542: LD_INT 2
60544: NEG
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 1
60552: PUSH
60553: LD_INT 1
60555: NEG
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 2
60563: PUSH
60564: LD_INT 1
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 2
60573: PUSH
60574: LD_INT 2
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 1
60583: PUSH
60584: LD_INT 2
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 0
60593: PUSH
60594: LD_INT 2
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 1
60603: NEG
60604: PUSH
60605: LD_INT 1
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 2
60614: NEG
60615: PUSH
60616: LD_INT 1
60618: NEG
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 2
60626: NEG
60627: PUSH
60628: LD_INT 2
60630: NEG
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: LD_INT 2
60638: NEG
60639: PUSH
60640: LD_INT 3
60642: NEG
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 1
60650: NEG
60651: PUSH
60652: LD_INT 3
60654: NEG
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 0
60662: PUSH
60663: LD_INT 3
60665: NEG
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 1
60673: PUSH
60674: LD_INT 2
60676: NEG
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 3
60684: PUSH
60685: LD_INT 2
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 3
60694: PUSH
60695: LD_INT 3
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 2
60704: PUSH
60705: LD_INT 3
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 1
60714: PUSH
60715: LD_INT 3
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 0
60724: PUSH
60725: LD_INT 3
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 1
60734: NEG
60735: PUSH
60736: LD_INT 2
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 3
60745: NEG
60746: PUSH
60747: LD_INT 2
60749: NEG
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 3
60757: NEG
60758: PUSH
60759: LD_INT 3
60761: NEG
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60798: LD_ADDR_VAR 0 46
60802: PUSH
60803: LD_INT 0
60805: PUSH
60806: LD_INT 0
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 0
60815: PUSH
60816: LD_INT 1
60818: NEG
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 1
60826: PUSH
60827: LD_INT 0
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 1
60836: PUSH
60837: LD_INT 1
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 0
60846: PUSH
60847: LD_INT 1
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 1
60856: NEG
60857: PUSH
60858: LD_INT 0
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 1
60867: NEG
60868: PUSH
60869: LD_INT 1
60871: NEG
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 1
60879: NEG
60880: PUSH
60881: LD_INT 2
60883: NEG
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 0
60891: PUSH
60892: LD_INT 2
60894: NEG
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 1
60902: PUSH
60903: LD_INT 1
60905: NEG
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 2
60913: PUSH
60914: LD_INT 0
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 2
60923: PUSH
60924: LD_INT 1
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 1
60933: PUSH
60934: LD_INT 2
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 0
60943: PUSH
60944: LD_INT 2
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 1
60953: NEG
60954: PUSH
60955: LD_INT 1
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 2
60964: NEG
60965: PUSH
60966: LD_INT 0
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 2
60975: NEG
60976: PUSH
60977: LD_INT 1
60979: NEG
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 1
60987: NEG
60988: PUSH
60989: LD_INT 3
60991: NEG
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 0
60999: PUSH
61000: LD_INT 3
61002: NEG
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 1
61010: PUSH
61011: LD_INT 2
61013: NEG
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 2
61021: PUSH
61022: LD_INT 1
61024: NEG
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 3
61032: PUSH
61033: LD_INT 0
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 3
61042: PUSH
61043: LD_INT 1
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 1
61052: PUSH
61053: LD_INT 3
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 0
61062: PUSH
61063: LD_INT 3
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 1
61072: NEG
61073: PUSH
61074: LD_INT 2
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 2
61083: NEG
61084: PUSH
61085: LD_INT 1
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 3
61094: NEG
61095: PUSH
61096: LD_INT 0
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 3
61105: NEG
61106: PUSH
61107: LD_INT 1
61109: NEG
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61146: LD_ADDR_VAR 0 47
61150: PUSH
61151: LD_INT 0
61153: PUSH
61154: LD_INT 0
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 0
61163: PUSH
61164: LD_INT 1
61166: NEG
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 1
61174: PUSH
61175: LD_INT 0
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 1
61184: PUSH
61185: LD_INT 1
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 0
61194: PUSH
61195: LD_INT 1
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 1
61204: NEG
61205: PUSH
61206: LD_INT 0
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 1
61215: NEG
61216: PUSH
61217: LD_INT 1
61219: NEG
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 1
61227: NEG
61228: PUSH
61229: LD_INT 2
61231: NEG
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 0
61239: PUSH
61240: LD_INT 2
61242: NEG
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 1
61250: PUSH
61251: LD_INT 1
61253: NEG
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 2
61261: NEG
61262: PUSH
61263: LD_INT 1
61265: NEG
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 2
61273: NEG
61274: PUSH
61275: LD_INT 2
61277: NEG
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61297: LD_ADDR_VAR 0 48
61301: PUSH
61302: LD_INT 0
61304: PUSH
61305: LD_INT 0
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 0
61314: PUSH
61315: LD_INT 1
61317: NEG
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 1
61325: PUSH
61326: LD_INT 0
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 1
61335: PUSH
61336: LD_INT 1
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 0
61345: PUSH
61346: LD_INT 1
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 1
61355: NEG
61356: PUSH
61357: LD_INT 0
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 1
61366: NEG
61367: PUSH
61368: LD_INT 1
61370: NEG
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 1
61378: NEG
61379: PUSH
61380: LD_INT 2
61382: NEG
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 0
61390: PUSH
61391: LD_INT 2
61393: NEG
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 1
61401: PUSH
61402: LD_INT 1
61404: NEG
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 2
61412: PUSH
61413: LD_INT 0
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 2
61422: PUSH
61423: LD_INT 1
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61444: LD_ADDR_VAR 0 49
61448: PUSH
61449: LD_INT 0
61451: PUSH
61452: LD_INT 0
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 0
61461: PUSH
61462: LD_INT 1
61464: NEG
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 1
61472: PUSH
61473: LD_INT 0
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 1
61482: PUSH
61483: LD_INT 1
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 0
61492: PUSH
61493: LD_INT 1
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 1
61502: NEG
61503: PUSH
61504: LD_INT 0
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: LD_INT 1
61513: NEG
61514: PUSH
61515: LD_INT 1
61517: NEG
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 1
61525: PUSH
61526: LD_INT 1
61528: NEG
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: LD_INT 2
61536: PUSH
61537: LD_INT 0
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 2
61546: PUSH
61547: LD_INT 1
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 2
61556: PUSH
61557: LD_INT 2
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 1
61566: PUSH
61567: LD_INT 2
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61588: LD_ADDR_VAR 0 50
61592: PUSH
61593: LD_INT 0
61595: PUSH
61596: LD_INT 0
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 0
61605: PUSH
61606: LD_INT 1
61608: NEG
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 1
61616: PUSH
61617: LD_INT 0
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 1
61626: PUSH
61627: LD_INT 1
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 0
61636: PUSH
61637: LD_INT 1
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 1
61646: NEG
61647: PUSH
61648: LD_INT 0
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 1
61657: NEG
61658: PUSH
61659: LD_INT 1
61661: NEG
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 2
61669: PUSH
61670: LD_INT 1
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 2
61679: PUSH
61680: LD_INT 2
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 1
61689: PUSH
61690: LD_INT 2
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 0
61699: PUSH
61700: LD_INT 2
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 1
61709: NEG
61710: PUSH
61711: LD_INT 1
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61732: LD_ADDR_VAR 0 51
61736: PUSH
61737: LD_INT 0
61739: PUSH
61740: LD_INT 0
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 0
61749: PUSH
61750: LD_INT 1
61752: NEG
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 1
61760: PUSH
61761: LD_INT 0
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 1
61770: PUSH
61771: LD_INT 1
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 0
61780: PUSH
61781: LD_INT 1
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 1
61790: NEG
61791: PUSH
61792: LD_INT 0
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 1
61801: NEG
61802: PUSH
61803: LD_INT 1
61805: NEG
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 1
61813: PUSH
61814: LD_INT 2
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 0
61823: PUSH
61824: LD_INT 2
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 1
61833: NEG
61834: PUSH
61835: LD_INT 1
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 2
61844: NEG
61845: PUSH
61846: LD_INT 0
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 2
61855: NEG
61856: PUSH
61857: LD_INT 1
61859: NEG
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61879: LD_ADDR_VAR 0 52
61883: PUSH
61884: LD_INT 0
61886: PUSH
61887: LD_INT 0
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 0
61896: PUSH
61897: LD_INT 1
61899: NEG
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 1
61907: PUSH
61908: LD_INT 0
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 1
61917: PUSH
61918: LD_INT 1
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 0
61927: PUSH
61928: LD_INT 1
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 1
61937: NEG
61938: PUSH
61939: LD_INT 0
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: PUSH
61946: LD_INT 1
61948: NEG
61949: PUSH
61950: LD_INT 1
61952: NEG
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 1
61960: NEG
61961: PUSH
61962: LD_INT 2
61964: NEG
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 1
61972: NEG
61973: PUSH
61974: LD_INT 1
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 2
61983: NEG
61984: PUSH
61985: LD_INT 0
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 2
61994: NEG
61995: PUSH
61996: LD_INT 1
61998: NEG
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 2
62006: NEG
62007: PUSH
62008: LD_INT 2
62010: NEG
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62030: LD_ADDR_VAR 0 53
62034: PUSH
62035: LD_INT 0
62037: PUSH
62038: LD_INT 0
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 0
62047: PUSH
62048: LD_INT 1
62050: NEG
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 1
62058: PUSH
62059: LD_INT 0
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 1
62068: PUSH
62069: LD_INT 1
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 0
62078: PUSH
62079: LD_INT 1
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 1
62088: NEG
62089: PUSH
62090: LD_INT 0
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 1
62099: NEG
62100: PUSH
62101: LD_INT 1
62103: NEG
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 1
62111: NEG
62112: PUSH
62113: LD_INT 2
62115: NEG
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 0
62123: PUSH
62124: LD_INT 2
62126: NEG
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 1
62134: PUSH
62135: LD_INT 1
62137: NEG
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 2
62145: PUSH
62146: LD_INT 0
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 2
62155: PUSH
62156: LD_INT 1
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 2
62165: PUSH
62166: LD_INT 2
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 1
62175: PUSH
62176: LD_INT 2
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 0
62185: PUSH
62186: LD_INT 2
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 1
62195: NEG
62196: PUSH
62197: LD_INT 1
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 2
62206: NEG
62207: PUSH
62208: LD_INT 0
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 2
62217: NEG
62218: PUSH
62219: LD_INT 1
62221: NEG
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 2
62229: NEG
62230: PUSH
62231: LD_INT 2
62233: NEG
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62260: LD_ADDR_VAR 0 54
62264: PUSH
62265: LD_INT 0
62267: PUSH
62268: LD_INT 0
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: LD_INT 0
62277: PUSH
62278: LD_INT 1
62280: NEG
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: LD_INT 1
62288: PUSH
62289: LD_INT 0
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 1
62298: PUSH
62299: LD_INT 1
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 0
62308: PUSH
62309: LD_INT 1
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 1
62318: NEG
62319: PUSH
62320: LD_INT 0
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: LD_INT 1
62329: NEG
62330: PUSH
62331: LD_INT 1
62333: NEG
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: PUSH
62339: LD_INT 1
62341: NEG
62342: PUSH
62343: LD_INT 2
62345: NEG
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 0
62353: PUSH
62354: LD_INT 2
62356: NEG
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: LD_INT 1
62364: PUSH
62365: LD_INT 1
62367: NEG
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 2
62375: PUSH
62376: LD_INT 0
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: LD_INT 2
62385: PUSH
62386: LD_INT 1
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 2
62395: PUSH
62396: LD_INT 2
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 1
62405: PUSH
62406: LD_INT 2
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 0
62415: PUSH
62416: LD_INT 2
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 1
62425: NEG
62426: PUSH
62427: LD_INT 1
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 2
62436: NEG
62437: PUSH
62438: LD_INT 0
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 2
62447: NEG
62448: PUSH
62449: LD_INT 1
62451: NEG
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 2
62459: NEG
62460: PUSH
62461: LD_INT 2
62463: NEG
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62490: LD_ADDR_VAR 0 55
62494: PUSH
62495: LD_INT 0
62497: PUSH
62498: LD_INT 0
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 0
62507: PUSH
62508: LD_INT 1
62510: NEG
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 1
62518: PUSH
62519: LD_INT 0
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 1
62528: PUSH
62529: LD_INT 1
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 0
62538: PUSH
62539: LD_INT 1
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 1
62548: NEG
62549: PUSH
62550: LD_INT 0
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 1
62559: NEG
62560: PUSH
62561: LD_INT 1
62563: NEG
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: LD_INT 1
62571: NEG
62572: PUSH
62573: LD_INT 2
62575: NEG
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 0
62583: PUSH
62584: LD_INT 2
62586: NEG
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 1
62594: PUSH
62595: LD_INT 1
62597: NEG
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 2
62605: PUSH
62606: LD_INT 0
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 2
62615: PUSH
62616: LD_INT 1
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 2
62625: PUSH
62626: LD_INT 2
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: LD_INT 1
62635: PUSH
62636: LD_INT 2
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 0
62645: PUSH
62646: LD_INT 2
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 1
62655: NEG
62656: PUSH
62657: LD_INT 1
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 2
62666: NEG
62667: PUSH
62668: LD_INT 0
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 2
62677: NEG
62678: PUSH
62679: LD_INT 1
62681: NEG
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 2
62689: NEG
62690: PUSH
62691: LD_INT 2
62693: NEG
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: LIST
62712: LIST
62713: LIST
62714: LIST
62715: LIST
62716: LIST
62717: LIST
62718: LIST
62719: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62720: LD_ADDR_VAR 0 56
62724: PUSH
62725: LD_INT 0
62727: PUSH
62728: LD_INT 0
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 0
62737: PUSH
62738: LD_INT 1
62740: NEG
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 1
62748: PUSH
62749: LD_INT 0
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 1
62758: PUSH
62759: LD_INT 1
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 0
62768: PUSH
62769: LD_INT 1
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 1
62778: NEG
62779: PUSH
62780: LD_INT 0
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 1
62789: NEG
62790: PUSH
62791: LD_INT 1
62793: NEG
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: PUSH
62799: LD_INT 1
62801: NEG
62802: PUSH
62803: LD_INT 2
62805: NEG
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 0
62813: PUSH
62814: LD_INT 2
62816: NEG
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 1
62824: PUSH
62825: LD_INT 1
62827: NEG
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 2
62835: PUSH
62836: LD_INT 0
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 2
62845: PUSH
62846: LD_INT 1
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 2
62855: PUSH
62856: LD_INT 2
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 1
62865: PUSH
62866: LD_INT 2
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 0
62875: PUSH
62876: LD_INT 2
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 1
62885: NEG
62886: PUSH
62887: LD_INT 1
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 2
62896: NEG
62897: PUSH
62898: LD_INT 0
62900: PUSH
62901: EMPTY
62902: LIST
62903: LIST
62904: PUSH
62905: LD_INT 2
62907: NEG
62908: PUSH
62909: LD_INT 1
62911: NEG
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: LD_INT 2
62919: NEG
62920: PUSH
62921: LD_INT 2
62923: NEG
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: LIST
62939: LIST
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62950: LD_ADDR_VAR 0 57
62954: PUSH
62955: LD_INT 0
62957: PUSH
62958: LD_INT 0
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 0
62967: PUSH
62968: LD_INT 1
62970: NEG
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 1
62978: PUSH
62979: LD_INT 0
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 1
62988: PUSH
62989: LD_INT 1
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: LD_INT 0
62998: PUSH
62999: LD_INT 1
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 1
63008: NEG
63009: PUSH
63010: LD_INT 0
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 1
63019: NEG
63020: PUSH
63021: LD_INT 1
63023: NEG
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: LD_INT 1
63031: NEG
63032: PUSH
63033: LD_INT 2
63035: NEG
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 0
63043: PUSH
63044: LD_INT 2
63046: NEG
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: PUSH
63052: LD_INT 1
63054: PUSH
63055: LD_INT 1
63057: NEG
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: LD_INT 2
63065: PUSH
63066: LD_INT 0
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: LD_INT 2
63075: PUSH
63076: LD_INT 1
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 2
63085: PUSH
63086: LD_INT 2
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: LD_INT 1
63095: PUSH
63096: LD_INT 2
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 0
63105: PUSH
63106: LD_INT 2
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 1
63115: NEG
63116: PUSH
63117: LD_INT 1
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 2
63126: NEG
63127: PUSH
63128: LD_INT 0
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 2
63137: NEG
63138: PUSH
63139: LD_INT 1
63141: NEG
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 2
63149: NEG
63150: PUSH
63151: LD_INT 2
63153: NEG
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: LIST
63179: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63180: LD_ADDR_VAR 0 58
63184: PUSH
63185: LD_INT 0
63187: PUSH
63188: LD_INT 0
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 0
63197: PUSH
63198: LD_INT 1
63200: NEG
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 1
63208: PUSH
63209: LD_INT 0
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 1
63218: PUSH
63219: LD_INT 1
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 0
63228: PUSH
63229: LD_INT 1
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 1
63238: NEG
63239: PUSH
63240: LD_INT 0
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 1
63249: NEG
63250: PUSH
63251: LD_INT 1
63253: NEG
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 1
63261: NEG
63262: PUSH
63263: LD_INT 2
63265: NEG
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: LD_INT 0
63273: PUSH
63274: LD_INT 2
63276: NEG
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: PUSH
63282: LD_INT 1
63284: PUSH
63285: LD_INT 1
63287: NEG
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 2
63295: PUSH
63296: LD_INT 0
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: LD_INT 2
63305: PUSH
63306: LD_INT 1
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 2
63315: PUSH
63316: LD_INT 2
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PUSH
63323: LD_INT 1
63325: PUSH
63326: LD_INT 2
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: LD_INT 0
63335: PUSH
63336: LD_INT 2
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 1
63345: NEG
63346: PUSH
63347: LD_INT 1
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 2
63356: NEG
63357: PUSH
63358: LD_INT 0
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 2
63367: NEG
63368: PUSH
63369: LD_INT 1
63371: NEG
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 2
63379: NEG
63380: PUSH
63381: LD_INT 2
63383: NEG
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: LIST
63405: LIST
63406: LIST
63407: LIST
63408: LIST
63409: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63410: LD_ADDR_VAR 0 59
63414: PUSH
63415: LD_INT 0
63417: PUSH
63418: LD_INT 0
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 0
63427: PUSH
63428: LD_INT 1
63430: NEG
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 1
63438: PUSH
63439: LD_INT 0
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 1
63448: PUSH
63449: LD_INT 1
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 0
63458: PUSH
63459: LD_INT 1
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 1
63468: NEG
63469: PUSH
63470: LD_INT 0
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 1
63479: NEG
63480: PUSH
63481: LD_INT 1
63483: NEG
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63498: LD_ADDR_VAR 0 60
63502: PUSH
63503: LD_INT 0
63505: PUSH
63506: LD_INT 0
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PUSH
63513: LD_INT 0
63515: PUSH
63516: LD_INT 1
63518: NEG
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: LD_INT 1
63526: PUSH
63527: LD_INT 0
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: LD_INT 1
63536: PUSH
63537: LD_INT 1
63539: PUSH
63540: EMPTY
63541: LIST
63542: LIST
63543: PUSH
63544: LD_INT 0
63546: PUSH
63547: LD_INT 1
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 1
63556: NEG
63557: PUSH
63558: LD_INT 0
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: PUSH
63565: LD_INT 1
63567: NEG
63568: PUSH
63569: LD_INT 1
63571: NEG
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: LIST
63581: LIST
63582: LIST
63583: LIST
63584: LIST
63585: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63586: LD_ADDR_VAR 0 61
63590: PUSH
63591: LD_INT 0
63593: PUSH
63594: LD_INT 0
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 0
63603: PUSH
63604: LD_INT 1
63606: NEG
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: LD_INT 1
63614: PUSH
63615: LD_INT 0
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PUSH
63622: LD_INT 1
63624: PUSH
63625: LD_INT 1
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: LD_INT 0
63634: PUSH
63635: LD_INT 1
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 1
63644: NEG
63645: PUSH
63646: LD_INT 0
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 1
63655: NEG
63656: PUSH
63657: LD_INT 1
63659: NEG
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: LIST
63673: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63674: LD_ADDR_VAR 0 62
63678: PUSH
63679: LD_INT 0
63681: PUSH
63682: LD_INT 0
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: LD_INT 0
63691: PUSH
63692: LD_INT 1
63694: NEG
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PUSH
63700: LD_INT 1
63702: PUSH
63703: LD_INT 0
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 1
63712: PUSH
63713: LD_INT 1
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: PUSH
63720: LD_INT 0
63722: PUSH
63723: LD_INT 1
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: PUSH
63730: LD_INT 1
63732: NEG
63733: PUSH
63734: LD_INT 0
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: PUSH
63741: LD_INT 1
63743: NEG
63744: PUSH
63745: LD_INT 1
63747: NEG
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: LIST
63759: LIST
63760: LIST
63761: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63762: LD_ADDR_VAR 0 63
63766: PUSH
63767: LD_INT 0
63769: PUSH
63770: LD_INT 0
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 0
63779: PUSH
63780: LD_INT 1
63782: NEG
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: LD_INT 1
63790: PUSH
63791: LD_INT 0
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 1
63800: PUSH
63801: LD_INT 1
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 0
63810: PUSH
63811: LD_INT 1
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 1
63820: NEG
63821: PUSH
63822: LD_INT 0
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: LD_INT 1
63831: NEG
63832: PUSH
63833: LD_INT 1
63835: NEG
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: LIST
63848: LIST
63849: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63850: LD_ADDR_VAR 0 64
63854: PUSH
63855: LD_INT 0
63857: PUSH
63858: LD_INT 0
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 0
63867: PUSH
63868: LD_INT 1
63870: NEG
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: LD_INT 1
63878: PUSH
63879: LD_INT 0
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 1
63888: PUSH
63889: LD_INT 1
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: LD_INT 0
63898: PUSH
63899: LD_INT 1
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 1
63908: NEG
63909: PUSH
63910: LD_INT 0
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 1
63919: NEG
63920: PUSH
63921: LD_INT 1
63923: NEG
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: ST_TO_ADDR
// end ; 1 :
63938: GO 69835
63940: LD_INT 1
63942: DOUBLE
63943: EQUAL
63944: IFTRUE 63948
63946: GO 66571
63948: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63949: LD_ADDR_VAR 0 11
63953: PUSH
63954: LD_INT 1
63956: NEG
63957: PUSH
63958: LD_INT 3
63960: NEG
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: PUSH
63966: LD_INT 0
63968: PUSH
63969: LD_INT 3
63971: NEG
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 1
63979: PUSH
63980: LD_INT 2
63982: NEG
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: LIST
63992: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63993: LD_ADDR_VAR 0 12
63997: PUSH
63998: LD_INT 2
64000: PUSH
64001: LD_INT 1
64003: NEG
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 3
64011: PUSH
64012: LD_INT 0
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: LD_INT 3
64021: PUSH
64022: LD_INT 1
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: LIST
64033: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64034: LD_ADDR_VAR 0 13
64038: PUSH
64039: LD_INT 3
64041: PUSH
64042: LD_INT 2
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PUSH
64049: LD_INT 3
64051: PUSH
64052: LD_INT 3
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: PUSH
64059: LD_INT 2
64061: PUSH
64062: LD_INT 3
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: LIST
64073: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64074: LD_ADDR_VAR 0 14
64078: PUSH
64079: LD_INT 1
64081: PUSH
64082: LD_INT 3
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: PUSH
64089: LD_INT 0
64091: PUSH
64092: LD_INT 3
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: PUSH
64099: LD_INT 1
64101: NEG
64102: PUSH
64103: LD_INT 2
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: LIST
64114: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64115: LD_ADDR_VAR 0 15
64119: PUSH
64120: LD_INT 2
64122: NEG
64123: PUSH
64124: LD_INT 1
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: LD_INT 3
64133: NEG
64134: PUSH
64135: LD_INT 0
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PUSH
64142: LD_INT 3
64144: NEG
64145: PUSH
64146: LD_INT 1
64148: NEG
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: LIST
64158: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64159: LD_ADDR_VAR 0 16
64163: PUSH
64164: LD_INT 2
64166: NEG
64167: PUSH
64168: LD_INT 3
64170: NEG
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: PUSH
64176: LD_INT 3
64178: NEG
64179: PUSH
64180: LD_INT 2
64182: NEG
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: PUSH
64188: LD_INT 3
64190: NEG
64191: PUSH
64192: LD_INT 3
64194: NEG
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: LIST
64204: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64205: LD_ADDR_VAR 0 17
64209: PUSH
64210: LD_INT 1
64212: NEG
64213: PUSH
64214: LD_INT 3
64216: NEG
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: PUSH
64222: LD_INT 0
64224: PUSH
64225: LD_INT 3
64227: NEG
64228: PUSH
64229: EMPTY
64230: LIST
64231: LIST
64232: PUSH
64233: LD_INT 1
64235: PUSH
64236: LD_INT 2
64238: NEG
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: LIST
64248: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64249: LD_ADDR_VAR 0 18
64253: PUSH
64254: LD_INT 2
64256: PUSH
64257: LD_INT 1
64259: NEG
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: LD_INT 3
64267: PUSH
64268: LD_INT 0
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: PUSH
64275: LD_INT 3
64277: PUSH
64278: LD_INT 1
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: LIST
64289: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64290: LD_ADDR_VAR 0 19
64294: PUSH
64295: LD_INT 3
64297: PUSH
64298: LD_INT 2
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PUSH
64305: LD_INT 3
64307: PUSH
64308: LD_INT 3
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: PUSH
64315: LD_INT 2
64317: PUSH
64318: LD_INT 3
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: LIST
64329: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64330: LD_ADDR_VAR 0 20
64334: PUSH
64335: LD_INT 1
64337: PUSH
64338: LD_INT 3
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: PUSH
64345: LD_INT 0
64347: PUSH
64348: LD_INT 3
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 1
64357: NEG
64358: PUSH
64359: LD_INT 2
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: LIST
64370: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64371: LD_ADDR_VAR 0 21
64375: PUSH
64376: LD_INT 2
64378: NEG
64379: PUSH
64380: LD_INT 1
64382: PUSH
64383: EMPTY
64384: LIST
64385: LIST
64386: PUSH
64387: LD_INT 3
64389: NEG
64390: PUSH
64391: LD_INT 0
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: PUSH
64398: LD_INT 3
64400: NEG
64401: PUSH
64402: LD_INT 1
64404: NEG
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: LIST
64414: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64415: LD_ADDR_VAR 0 22
64419: PUSH
64420: LD_INT 2
64422: NEG
64423: PUSH
64424: LD_INT 3
64426: NEG
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 3
64434: NEG
64435: PUSH
64436: LD_INT 2
64438: NEG
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 3
64446: NEG
64447: PUSH
64448: LD_INT 3
64450: NEG
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: LIST
64460: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64461: LD_ADDR_VAR 0 23
64465: PUSH
64466: LD_INT 0
64468: PUSH
64469: LD_INT 3
64471: NEG
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: LD_INT 1
64479: NEG
64480: PUSH
64481: LD_INT 4
64483: NEG
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 1
64491: PUSH
64492: LD_INT 3
64494: NEG
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: LIST
64504: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64505: LD_ADDR_VAR 0 24
64509: PUSH
64510: LD_INT 3
64512: PUSH
64513: LD_INT 0
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: PUSH
64520: LD_INT 3
64522: PUSH
64523: LD_INT 1
64525: NEG
64526: PUSH
64527: EMPTY
64528: LIST
64529: LIST
64530: PUSH
64531: LD_INT 4
64533: PUSH
64534: LD_INT 1
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: LIST
64545: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64546: LD_ADDR_VAR 0 25
64550: PUSH
64551: LD_INT 3
64553: PUSH
64554: LD_INT 3
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: PUSH
64561: LD_INT 4
64563: PUSH
64564: LD_INT 3
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: PUSH
64571: LD_INT 3
64573: PUSH
64574: LD_INT 4
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: LIST
64585: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64586: LD_ADDR_VAR 0 26
64590: PUSH
64591: LD_INT 0
64593: PUSH
64594: LD_INT 3
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: PUSH
64601: LD_INT 1
64603: PUSH
64604: LD_INT 4
64606: PUSH
64607: EMPTY
64608: LIST
64609: LIST
64610: PUSH
64611: LD_INT 1
64613: NEG
64614: PUSH
64615: LD_INT 3
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: LIST
64626: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
64627: LD_ADDR_VAR 0 27
64631: PUSH
64632: LD_INT 3
64634: NEG
64635: PUSH
64636: LD_INT 0
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: PUSH
64643: LD_INT 3
64645: NEG
64646: PUSH
64647: LD_INT 1
64649: PUSH
64650: EMPTY
64651: LIST
64652: LIST
64653: PUSH
64654: LD_INT 4
64656: NEG
64657: PUSH
64658: LD_INT 1
64660: NEG
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: LIST
64670: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
64671: LD_ADDR_VAR 0 28
64675: PUSH
64676: LD_INT 3
64678: NEG
64679: PUSH
64680: LD_INT 3
64682: NEG
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: LD_INT 3
64690: NEG
64691: PUSH
64692: LD_INT 4
64694: NEG
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: LD_INT 4
64702: NEG
64703: PUSH
64704: LD_INT 3
64706: NEG
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: PUSH
64712: EMPTY
64713: LIST
64714: LIST
64715: LIST
64716: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
64717: LD_ADDR_VAR 0 29
64721: PUSH
64722: LD_INT 1
64724: NEG
64725: PUSH
64726: LD_INT 3
64728: NEG
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: PUSH
64734: LD_INT 0
64736: PUSH
64737: LD_INT 3
64739: NEG
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: PUSH
64745: LD_INT 1
64747: PUSH
64748: LD_INT 2
64750: NEG
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 1
64758: NEG
64759: PUSH
64760: LD_INT 4
64762: NEG
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: PUSH
64768: LD_INT 0
64770: PUSH
64771: LD_INT 4
64773: NEG
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: PUSH
64779: LD_INT 1
64781: PUSH
64782: LD_INT 3
64784: NEG
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: LD_INT 1
64792: NEG
64793: PUSH
64794: LD_INT 5
64796: NEG
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: LD_INT 0
64804: PUSH
64805: LD_INT 5
64807: NEG
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: PUSH
64813: LD_INT 1
64815: PUSH
64816: LD_INT 4
64818: NEG
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: PUSH
64824: LD_INT 1
64826: NEG
64827: PUSH
64828: LD_INT 6
64830: NEG
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: LD_INT 0
64838: PUSH
64839: LD_INT 6
64841: NEG
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: LD_INT 1
64849: PUSH
64850: LD_INT 5
64852: NEG
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: LIST
64862: LIST
64863: LIST
64864: LIST
64865: LIST
64866: LIST
64867: LIST
64868: LIST
64869: LIST
64870: LIST
64871: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64872: LD_ADDR_VAR 0 30
64876: PUSH
64877: LD_INT 2
64879: PUSH
64880: LD_INT 1
64882: NEG
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: PUSH
64888: LD_INT 3
64890: PUSH
64891: LD_INT 0
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: PUSH
64898: LD_INT 3
64900: PUSH
64901: LD_INT 1
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PUSH
64908: LD_INT 3
64910: PUSH
64911: LD_INT 1
64913: NEG
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: PUSH
64919: LD_INT 4
64921: PUSH
64922: LD_INT 0
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 4
64931: PUSH
64932: LD_INT 1
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 4
64941: PUSH
64942: LD_INT 1
64944: NEG
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: PUSH
64950: LD_INT 5
64952: PUSH
64953: LD_INT 0
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: PUSH
64960: LD_INT 5
64962: PUSH
64963: LD_INT 1
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: PUSH
64970: LD_INT 5
64972: PUSH
64973: LD_INT 1
64975: NEG
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: PUSH
64981: LD_INT 6
64983: PUSH
64984: LD_INT 0
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: PUSH
64991: LD_INT 6
64993: PUSH
64994: LD_INT 1
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65015: LD_ADDR_VAR 0 31
65019: PUSH
65020: LD_INT 3
65022: PUSH
65023: LD_INT 2
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: PUSH
65030: LD_INT 3
65032: PUSH
65033: LD_INT 3
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 2
65042: PUSH
65043: LD_INT 3
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 4
65052: PUSH
65053: LD_INT 3
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 4
65062: PUSH
65063: LD_INT 4
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 3
65072: PUSH
65073: LD_INT 4
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: PUSH
65080: LD_INT 5
65082: PUSH
65083: LD_INT 4
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PUSH
65090: LD_INT 5
65092: PUSH
65093: LD_INT 5
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: PUSH
65100: LD_INT 4
65102: PUSH
65103: LD_INT 5
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: PUSH
65110: LD_INT 6
65112: PUSH
65113: LD_INT 5
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: LD_INT 6
65122: PUSH
65123: LD_INT 6
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: LD_INT 5
65132: PUSH
65133: LD_INT 6
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65154: LD_ADDR_VAR 0 32
65158: PUSH
65159: LD_INT 1
65161: PUSH
65162: LD_INT 3
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: PUSH
65169: LD_INT 0
65171: PUSH
65172: LD_INT 3
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: LD_INT 1
65181: NEG
65182: PUSH
65183: LD_INT 2
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: PUSH
65190: LD_INT 1
65192: PUSH
65193: LD_INT 4
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PUSH
65200: LD_INT 0
65202: PUSH
65203: LD_INT 4
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: PUSH
65210: LD_INT 1
65212: NEG
65213: PUSH
65214: LD_INT 3
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: PUSH
65221: LD_INT 1
65223: PUSH
65224: LD_INT 5
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: PUSH
65231: LD_INT 0
65233: PUSH
65234: LD_INT 5
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: LD_INT 1
65243: NEG
65244: PUSH
65245: LD_INT 4
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: PUSH
65252: LD_INT 1
65254: PUSH
65255: LD_INT 6
65257: PUSH
65258: EMPTY
65259: LIST
65260: LIST
65261: PUSH
65262: LD_INT 0
65264: PUSH
65265: LD_INT 6
65267: PUSH
65268: EMPTY
65269: LIST
65270: LIST
65271: PUSH
65272: LD_INT 1
65274: NEG
65275: PUSH
65276: LD_INT 5
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: LIST
65295: LIST
65296: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65297: LD_ADDR_VAR 0 33
65301: PUSH
65302: LD_INT 2
65304: NEG
65305: PUSH
65306: LD_INT 1
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: LD_INT 3
65315: NEG
65316: PUSH
65317: LD_INT 0
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: LD_INT 3
65326: NEG
65327: PUSH
65328: LD_INT 1
65330: NEG
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PUSH
65336: LD_INT 3
65338: NEG
65339: PUSH
65340: LD_INT 1
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 4
65349: NEG
65350: PUSH
65351: LD_INT 0
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PUSH
65358: LD_INT 4
65360: NEG
65361: PUSH
65362: LD_INT 1
65364: NEG
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PUSH
65370: LD_INT 4
65372: NEG
65373: PUSH
65374: LD_INT 1
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: PUSH
65381: LD_INT 5
65383: NEG
65384: PUSH
65385: LD_INT 0
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 5
65394: NEG
65395: PUSH
65396: LD_INT 1
65398: NEG
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: PUSH
65404: LD_INT 5
65406: NEG
65407: PUSH
65408: LD_INT 1
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: PUSH
65415: LD_INT 6
65417: NEG
65418: PUSH
65419: LD_INT 0
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: PUSH
65426: LD_INT 6
65428: NEG
65429: PUSH
65430: LD_INT 1
65432: NEG
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: LIST
65442: LIST
65443: LIST
65444: LIST
65445: LIST
65446: LIST
65447: LIST
65448: LIST
65449: LIST
65450: LIST
65451: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65452: LD_ADDR_VAR 0 34
65456: PUSH
65457: LD_INT 2
65459: NEG
65460: PUSH
65461: LD_INT 3
65463: NEG
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: PUSH
65469: LD_INT 3
65471: NEG
65472: PUSH
65473: LD_INT 2
65475: NEG
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: LD_INT 3
65483: NEG
65484: PUSH
65485: LD_INT 3
65487: NEG
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: LD_INT 3
65495: NEG
65496: PUSH
65497: LD_INT 4
65499: NEG
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: LD_INT 4
65507: NEG
65508: PUSH
65509: LD_INT 3
65511: NEG
65512: PUSH
65513: EMPTY
65514: LIST
65515: LIST
65516: PUSH
65517: LD_INT 4
65519: NEG
65520: PUSH
65521: LD_INT 4
65523: NEG
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: LD_INT 4
65531: NEG
65532: PUSH
65533: LD_INT 5
65535: NEG
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: PUSH
65541: LD_INT 5
65543: NEG
65544: PUSH
65545: LD_INT 4
65547: NEG
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: PUSH
65553: LD_INT 5
65555: NEG
65556: PUSH
65557: LD_INT 5
65559: NEG
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: PUSH
65565: LD_INT 5
65567: NEG
65568: PUSH
65569: LD_INT 6
65571: NEG
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: PUSH
65577: LD_INT 6
65579: NEG
65580: PUSH
65581: LD_INT 5
65583: NEG
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: PUSH
65589: LD_INT 6
65591: NEG
65592: PUSH
65593: LD_INT 6
65595: NEG
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
65615: LD_ADDR_VAR 0 41
65619: PUSH
65620: LD_INT 0
65622: PUSH
65623: LD_INT 2
65625: NEG
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: PUSH
65631: LD_INT 1
65633: NEG
65634: PUSH
65635: LD_INT 3
65637: NEG
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 1
65645: PUSH
65646: LD_INT 2
65648: NEG
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: LIST
65658: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
65659: LD_ADDR_VAR 0 42
65663: PUSH
65664: LD_INT 2
65666: PUSH
65667: LD_INT 0
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: PUSH
65674: LD_INT 2
65676: PUSH
65677: LD_INT 1
65679: NEG
65680: PUSH
65681: EMPTY
65682: LIST
65683: LIST
65684: PUSH
65685: LD_INT 3
65687: PUSH
65688: LD_INT 1
65690: PUSH
65691: EMPTY
65692: LIST
65693: LIST
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: LIST
65699: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
65700: LD_ADDR_VAR 0 43
65704: PUSH
65705: LD_INT 2
65707: PUSH
65708: LD_INT 2
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: LD_INT 3
65717: PUSH
65718: LD_INT 2
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: PUSH
65725: LD_INT 2
65727: PUSH
65728: LD_INT 3
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: LIST
65739: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
65740: LD_ADDR_VAR 0 44
65744: PUSH
65745: LD_INT 0
65747: PUSH
65748: LD_INT 2
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: LD_INT 1
65757: PUSH
65758: LD_INT 3
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: LD_INT 1
65767: NEG
65768: PUSH
65769: LD_INT 2
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: LIST
65780: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65781: LD_ADDR_VAR 0 45
65785: PUSH
65786: LD_INT 2
65788: NEG
65789: PUSH
65790: LD_INT 0
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: PUSH
65797: LD_INT 2
65799: NEG
65800: PUSH
65801: LD_INT 1
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PUSH
65808: LD_INT 3
65810: NEG
65811: PUSH
65812: LD_INT 1
65814: NEG
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: LIST
65824: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65825: LD_ADDR_VAR 0 46
65829: PUSH
65830: LD_INT 2
65832: NEG
65833: PUSH
65834: LD_INT 2
65836: NEG
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: LD_INT 2
65844: NEG
65845: PUSH
65846: LD_INT 3
65848: NEG
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: PUSH
65854: LD_INT 3
65856: NEG
65857: PUSH
65858: LD_INT 2
65860: NEG
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: LIST
65870: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65871: LD_ADDR_VAR 0 47
65875: PUSH
65876: LD_INT 2
65878: NEG
65879: PUSH
65880: LD_INT 3
65882: NEG
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: PUSH
65888: LD_INT 1
65890: NEG
65891: PUSH
65892: LD_INT 3
65894: NEG
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65904: LD_ADDR_VAR 0 48
65908: PUSH
65909: LD_INT 1
65911: PUSH
65912: LD_INT 2
65914: NEG
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: PUSH
65920: LD_INT 2
65922: PUSH
65923: LD_INT 1
65925: NEG
65926: PUSH
65927: EMPTY
65928: LIST
65929: LIST
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65935: LD_ADDR_VAR 0 49
65939: PUSH
65940: LD_INT 3
65942: PUSH
65943: LD_INT 1
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 3
65952: PUSH
65953: LD_INT 2
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65964: LD_ADDR_VAR 0 50
65968: PUSH
65969: LD_INT 2
65971: PUSH
65972: LD_INT 3
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: LD_INT 1
65981: PUSH
65982: LD_INT 3
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65993: LD_ADDR_VAR 0 51
65997: PUSH
65998: LD_INT 1
66000: NEG
66001: PUSH
66002: LD_INT 2
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: PUSH
66009: LD_INT 2
66011: NEG
66012: PUSH
66013: LD_INT 1
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66024: LD_ADDR_VAR 0 52
66028: PUSH
66029: LD_INT 3
66031: NEG
66032: PUSH
66033: LD_INT 1
66035: NEG
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: PUSH
66041: LD_INT 3
66043: NEG
66044: PUSH
66045: LD_INT 2
66047: NEG
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66057: LD_ADDR_VAR 0 53
66061: PUSH
66062: LD_INT 1
66064: NEG
66065: PUSH
66066: LD_INT 3
66068: NEG
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: PUSH
66074: LD_INT 0
66076: PUSH
66077: LD_INT 3
66079: NEG
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: LD_INT 1
66087: PUSH
66088: LD_INT 2
66090: NEG
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: PUSH
66096: EMPTY
66097: LIST
66098: LIST
66099: LIST
66100: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66101: LD_ADDR_VAR 0 54
66105: PUSH
66106: LD_INT 2
66108: PUSH
66109: LD_INT 1
66111: NEG
66112: PUSH
66113: EMPTY
66114: LIST
66115: LIST
66116: PUSH
66117: LD_INT 3
66119: PUSH
66120: LD_INT 0
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: PUSH
66127: LD_INT 3
66129: PUSH
66130: LD_INT 1
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: LIST
66141: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66142: LD_ADDR_VAR 0 55
66146: PUSH
66147: LD_INT 3
66149: PUSH
66150: LD_INT 2
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: PUSH
66157: LD_INT 3
66159: PUSH
66160: LD_INT 3
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: PUSH
66167: LD_INT 2
66169: PUSH
66170: LD_INT 3
66172: PUSH
66173: EMPTY
66174: LIST
66175: LIST
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: LIST
66181: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66182: LD_ADDR_VAR 0 56
66186: PUSH
66187: LD_INT 1
66189: PUSH
66190: LD_INT 3
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: PUSH
66197: LD_INT 0
66199: PUSH
66200: LD_INT 3
66202: PUSH
66203: EMPTY
66204: LIST
66205: LIST
66206: PUSH
66207: LD_INT 1
66209: NEG
66210: PUSH
66211: LD_INT 2
66213: PUSH
66214: EMPTY
66215: LIST
66216: LIST
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: LIST
66222: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66223: LD_ADDR_VAR 0 57
66227: PUSH
66228: LD_INT 2
66230: NEG
66231: PUSH
66232: LD_INT 1
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: PUSH
66239: LD_INT 3
66241: NEG
66242: PUSH
66243: LD_INT 0
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: PUSH
66250: LD_INT 3
66252: NEG
66253: PUSH
66254: LD_INT 1
66256: NEG
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: LIST
66266: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66267: LD_ADDR_VAR 0 58
66271: PUSH
66272: LD_INT 2
66274: NEG
66275: PUSH
66276: LD_INT 3
66278: NEG
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: PUSH
66284: LD_INT 3
66286: NEG
66287: PUSH
66288: LD_INT 2
66290: NEG
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: PUSH
66296: LD_INT 3
66298: NEG
66299: PUSH
66300: LD_INT 3
66302: NEG
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: LIST
66312: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66313: LD_ADDR_VAR 0 59
66317: PUSH
66318: LD_INT 1
66320: NEG
66321: PUSH
66322: LD_INT 2
66324: NEG
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: PUSH
66330: LD_INT 0
66332: PUSH
66333: LD_INT 2
66335: NEG
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: PUSH
66341: LD_INT 1
66343: PUSH
66344: LD_INT 1
66346: NEG
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: LIST
66356: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66357: LD_ADDR_VAR 0 60
66361: PUSH
66362: LD_INT 1
66364: PUSH
66365: LD_INT 1
66367: NEG
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: PUSH
66373: LD_INT 2
66375: PUSH
66376: LD_INT 0
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: PUSH
66383: LD_INT 2
66385: PUSH
66386: LD_INT 1
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: LIST
66397: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66398: LD_ADDR_VAR 0 61
66402: PUSH
66403: LD_INT 2
66405: PUSH
66406: LD_INT 1
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: LD_INT 2
66415: PUSH
66416: LD_INT 2
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: LD_INT 1
66425: PUSH
66426: LD_INT 2
66428: PUSH
66429: EMPTY
66430: LIST
66431: LIST
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: LIST
66437: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66438: LD_ADDR_VAR 0 62
66442: PUSH
66443: LD_INT 1
66445: PUSH
66446: LD_INT 2
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: PUSH
66453: LD_INT 0
66455: PUSH
66456: LD_INT 2
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: PUSH
66463: LD_INT 1
66465: NEG
66466: PUSH
66467: LD_INT 1
66469: PUSH
66470: EMPTY
66471: LIST
66472: LIST
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: LIST
66478: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66479: LD_ADDR_VAR 0 63
66483: PUSH
66484: LD_INT 1
66486: NEG
66487: PUSH
66488: LD_INT 1
66490: PUSH
66491: EMPTY
66492: LIST
66493: LIST
66494: PUSH
66495: LD_INT 2
66497: NEG
66498: PUSH
66499: LD_INT 0
66501: PUSH
66502: EMPTY
66503: LIST
66504: LIST
66505: PUSH
66506: LD_INT 2
66508: NEG
66509: PUSH
66510: LD_INT 1
66512: NEG
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: LIST
66522: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66523: LD_ADDR_VAR 0 64
66527: PUSH
66528: LD_INT 1
66530: NEG
66531: PUSH
66532: LD_INT 2
66534: NEG
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: LD_INT 2
66542: NEG
66543: PUSH
66544: LD_INT 1
66546: NEG
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: PUSH
66552: LD_INT 2
66554: NEG
66555: PUSH
66556: LD_INT 2
66558: NEG
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: LIST
66568: ST_TO_ADDR
// end ; 2 :
66569: GO 69835
66571: LD_INT 2
66573: DOUBLE
66574: EQUAL
66575: IFTRUE 66579
66577: GO 69834
66579: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66580: LD_ADDR_VAR 0 29
66584: PUSH
66585: LD_INT 4
66587: PUSH
66588: LD_INT 0
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: PUSH
66595: LD_INT 4
66597: PUSH
66598: LD_INT 1
66600: NEG
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: PUSH
66606: LD_INT 5
66608: PUSH
66609: LD_INT 0
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: PUSH
66616: LD_INT 5
66618: PUSH
66619: LD_INT 1
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: PUSH
66626: LD_INT 4
66628: PUSH
66629: LD_INT 1
66631: PUSH
66632: EMPTY
66633: LIST
66634: LIST
66635: PUSH
66636: LD_INT 3
66638: PUSH
66639: LD_INT 0
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: PUSH
66646: LD_INT 3
66648: PUSH
66649: LD_INT 1
66651: NEG
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PUSH
66657: LD_INT 3
66659: PUSH
66660: LD_INT 2
66662: NEG
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: PUSH
66668: LD_INT 5
66670: PUSH
66671: LD_INT 2
66673: PUSH
66674: EMPTY
66675: LIST
66676: LIST
66677: PUSH
66678: LD_INT 3
66680: PUSH
66681: LD_INT 3
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: PUSH
66688: LD_INT 3
66690: PUSH
66691: LD_INT 2
66693: PUSH
66694: EMPTY
66695: LIST
66696: LIST
66697: PUSH
66698: LD_INT 4
66700: PUSH
66701: LD_INT 3
66703: PUSH
66704: EMPTY
66705: LIST
66706: LIST
66707: PUSH
66708: LD_INT 4
66710: PUSH
66711: LD_INT 4
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: LD_INT 3
66720: PUSH
66721: LD_INT 4
66723: PUSH
66724: EMPTY
66725: LIST
66726: LIST
66727: PUSH
66728: LD_INT 2
66730: PUSH
66731: LD_INT 3
66733: PUSH
66734: EMPTY
66735: LIST
66736: LIST
66737: PUSH
66738: LD_INT 2
66740: PUSH
66741: LD_INT 2
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: PUSH
66748: LD_INT 4
66750: PUSH
66751: LD_INT 2
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: PUSH
66758: LD_INT 2
66760: PUSH
66761: LD_INT 4
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: PUSH
66768: LD_INT 0
66770: PUSH
66771: LD_INT 4
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: PUSH
66778: LD_INT 0
66780: PUSH
66781: LD_INT 3
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: PUSH
66788: LD_INT 1
66790: PUSH
66791: LD_INT 4
66793: PUSH
66794: EMPTY
66795: LIST
66796: LIST
66797: PUSH
66798: LD_INT 1
66800: PUSH
66801: LD_INT 5
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: PUSH
66808: LD_INT 0
66810: PUSH
66811: LD_INT 5
66813: PUSH
66814: EMPTY
66815: LIST
66816: LIST
66817: PUSH
66818: LD_INT 1
66820: NEG
66821: PUSH
66822: LD_INT 4
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: LD_INT 1
66831: NEG
66832: PUSH
66833: LD_INT 3
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: PUSH
66840: LD_INT 2
66842: PUSH
66843: LD_INT 5
66845: PUSH
66846: EMPTY
66847: LIST
66848: LIST
66849: PUSH
66850: LD_INT 2
66852: NEG
66853: PUSH
66854: LD_INT 3
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: PUSH
66861: LD_INT 3
66863: NEG
66864: PUSH
66865: LD_INT 0
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: PUSH
66872: LD_INT 3
66874: NEG
66875: PUSH
66876: LD_INT 1
66878: NEG
66879: PUSH
66880: EMPTY
66881: LIST
66882: LIST
66883: PUSH
66884: LD_INT 2
66886: NEG
66887: PUSH
66888: LD_INT 0
66890: PUSH
66891: EMPTY
66892: LIST
66893: LIST
66894: PUSH
66895: LD_INT 2
66897: NEG
66898: PUSH
66899: LD_INT 1
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: PUSH
66906: LD_INT 3
66908: NEG
66909: PUSH
66910: LD_INT 1
66912: PUSH
66913: EMPTY
66914: LIST
66915: LIST
66916: PUSH
66917: LD_INT 4
66919: NEG
66920: PUSH
66921: LD_INT 0
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: PUSH
66928: LD_INT 4
66930: NEG
66931: PUSH
66932: LD_INT 1
66934: NEG
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: PUSH
66940: LD_INT 4
66942: NEG
66943: PUSH
66944: LD_INT 2
66946: NEG
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: LD_INT 2
66954: NEG
66955: PUSH
66956: LD_INT 2
66958: PUSH
66959: EMPTY
66960: LIST
66961: LIST
66962: PUSH
66963: LD_INT 4
66965: NEG
66966: PUSH
66967: LD_INT 4
66969: NEG
66970: PUSH
66971: EMPTY
66972: LIST
66973: LIST
66974: PUSH
66975: LD_INT 4
66977: NEG
66978: PUSH
66979: LD_INT 5
66981: NEG
66982: PUSH
66983: EMPTY
66984: LIST
66985: LIST
66986: PUSH
66987: LD_INT 3
66989: NEG
66990: PUSH
66991: LD_INT 4
66993: NEG
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: LD_INT 3
67001: NEG
67002: PUSH
67003: LD_INT 3
67005: NEG
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: PUSH
67011: LD_INT 4
67013: NEG
67014: PUSH
67015: LD_INT 3
67017: NEG
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: PUSH
67023: LD_INT 5
67025: NEG
67026: PUSH
67027: LD_INT 4
67029: NEG
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: PUSH
67035: LD_INT 5
67037: NEG
67038: PUSH
67039: LD_INT 5
67041: NEG
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: PUSH
67047: LD_INT 3
67049: NEG
67050: PUSH
67051: LD_INT 5
67053: NEG
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: LD_INT 5
67061: NEG
67062: PUSH
67063: LD_INT 3
67065: NEG
67066: PUSH
67067: EMPTY
67068: LIST
67069: LIST
67070: PUSH
67071: EMPTY
67072: LIST
67073: LIST
67074: LIST
67075: LIST
67076: LIST
67077: LIST
67078: LIST
67079: LIST
67080: LIST
67081: LIST
67082: LIST
67083: LIST
67084: LIST
67085: LIST
67086: LIST
67087: LIST
67088: LIST
67089: LIST
67090: LIST
67091: LIST
67092: LIST
67093: LIST
67094: LIST
67095: LIST
67096: LIST
67097: LIST
67098: LIST
67099: LIST
67100: LIST
67101: LIST
67102: LIST
67103: LIST
67104: LIST
67105: LIST
67106: LIST
67107: LIST
67108: LIST
67109: LIST
67110: LIST
67111: LIST
67112: LIST
67113: LIST
67114: LIST
67115: LIST
67116: LIST
67117: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67118: LD_ADDR_VAR 0 30
67122: PUSH
67123: LD_INT 4
67125: PUSH
67126: LD_INT 4
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: PUSH
67133: LD_INT 4
67135: PUSH
67136: LD_INT 3
67138: PUSH
67139: EMPTY
67140: LIST
67141: LIST
67142: PUSH
67143: LD_INT 5
67145: PUSH
67146: LD_INT 4
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: PUSH
67153: LD_INT 5
67155: PUSH
67156: LD_INT 5
67158: PUSH
67159: EMPTY
67160: LIST
67161: LIST
67162: PUSH
67163: LD_INT 4
67165: PUSH
67166: LD_INT 5
67168: PUSH
67169: EMPTY
67170: LIST
67171: LIST
67172: PUSH
67173: LD_INT 3
67175: PUSH
67176: LD_INT 4
67178: PUSH
67179: EMPTY
67180: LIST
67181: LIST
67182: PUSH
67183: LD_INT 3
67185: PUSH
67186: LD_INT 3
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: PUSH
67193: LD_INT 5
67195: PUSH
67196: LD_INT 3
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: LD_INT 3
67205: PUSH
67206: LD_INT 5
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: PUSH
67213: LD_INT 0
67215: PUSH
67216: LD_INT 3
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: PUSH
67223: LD_INT 0
67225: PUSH
67226: LD_INT 2
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PUSH
67233: LD_INT 1
67235: PUSH
67236: LD_INT 3
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: PUSH
67243: LD_INT 1
67245: PUSH
67246: LD_INT 4
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: PUSH
67253: LD_INT 0
67255: PUSH
67256: LD_INT 4
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: PUSH
67263: LD_INT 1
67265: NEG
67266: PUSH
67267: LD_INT 3
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: PUSH
67274: LD_INT 1
67276: NEG
67277: PUSH
67278: LD_INT 2
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: PUSH
67285: LD_INT 2
67287: PUSH
67288: LD_INT 4
67290: PUSH
67291: EMPTY
67292: LIST
67293: LIST
67294: PUSH
67295: LD_INT 2
67297: NEG
67298: PUSH
67299: LD_INT 2
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: PUSH
67306: LD_INT 4
67308: NEG
67309: PUSH
67310: LD_INT 0
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: PUSH
67317: LD_INT 4
67319: NEG
67320: PUSH
67321: LD_INT 1
67323: NEG
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: PUSH
67329: LD_INT 3
67331: NEG
67332: PUSH
67333: LD_INT 0
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: PUSH
67340: LD_INT 3
67342: NEG
67343: PUSH
67344: LD_INT 1
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: PUSH
67351: LD_INT 4
67353: NEG
67354: PUSH
67355: LD_INT 1
67357: PUSH
67358: EMPTY
67359: LIST
67360: LIST
67361: PUSH
67362: LD_INT 5
67364: NEG
67365: PUSH
67366: LD_INT 0
67368: PUSH
67369: EMPTY
67370: LIST
67371: LIST
67372: PUSH
67373: LD_INT 5
67375: NEG
67376: PUSH
67377: LD_INT 1
67379: NEG
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: PUSH
67385: LD_INT 5
67387: NEG
67388: PUSH
67389: LD_INT 2
67391: NEG
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PUSH
67397: LD_INT 3
67399: NEG
67400: PUSH
67401: LD_INT 2
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: PUSH
67408: LD_INT 3
67410: NEG
67411: PUSH
67412: LD_INT 3
67414: NEG
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: LD_INT 3
67422: NEG
67423: PUSH
67424: LD_INT 4
67426: NEG
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PUSH
67432: LD_INT 2
67434: NEG
67435: PUSH
67436: LD_INT 3
67438: NEG
67439: PUSH
67440: EMPTY
67441: LIST
67442: LIST
67443: PUSH
67444: LD_INT 2
67446: NEG
67447: PUSH
67448: LD_INT 2
67450: NEG
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: PUSH
67456: LD_INT 3
67458: NEG
67459: PUSH
67460: LD_INT 2
67462: NEG
67463: PUSH
67464: EMPTY
67465: LIST
67466: LIST
67467: PUSH
67468: LD_INT 4
67470: NEG
67471: PUSH
67472: LD_INT 3
67474: NEG
67475: PUSH
67476: EMPTY
67477: LIST
67478: LIST
67479: PUSH
67480: LD_INT 4
67482: NEG
67483: PUSH
67484: LD_INT 4
67486: NEG
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: PUSH
67492: LD_INT 2
67494: NEG
67495: PUSH
67496: LD_INT 4
67498: NEG
67499: PUSH
67500: EMPTY
67501: LIST
67502: LIST
67503: PUSH
67504: LD_INT 4
67506: NEG
67507: PUSH
67508: LD_INT 2
67510: NEG
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: PUSH
67516: LD_INT 0
67518: PUSH
67519: LD_INT 4
67521: NEG
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: PUSH
67527: LD_INT 0
67529: PUSH
67530: LD_INT 5
67532: NEG
67533: PUSH
67534: EMPTY
67535: LIST
67536: LIST
67537: PUSH
67538: LD_INT 1
67540: PUSH
67541: LD_INT 4
67543: NEG
67544: PUSH
67545: EMPTY
67546: LIST
67547: LIST
67548: PUSH
67549: LD_INT 1
67551: PUSH
67552: LD_INT 3
67554: NEG
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: PUSH
67560: LD_INT 0
67562: PUSH
67563: LD_INT 3
67565: NEG
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: PUSH
67571: LD_INT 1
67573: NEG
67574: PUSH
67575: LD_INT 4
67577: NEG
67578: PUSH
67579: EMPTY
67580: LIST
67581: LIST
67582: PUSH
67583: LD_INT 1
67585: NEG
67586: PUSH
67587: LD_INT 5
67589: NEG
67590: PUSH
67591: EMPTY
67592: LIST
67593: LIST
67594: PUSH
67595: LD_INT 2
67597: PUSH
67598: LD_INT 3
67600: NEG
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PUSH
67606: LD_INT 2
67608: NEG
67609: PUSH
67610: LD_INT 5
67612: NEG
67613: PUSH
67614: EMPTY
67615: LIST
67616: LIST
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: LIST
67622: LIST
67623: LIST
67624: LIST
67625: LIST
67626: LIST
67627: LIST
67628: LIST
67629: LIST
67630: LIST
67631: LIST
67632: LIST
67633: LIST
67634: LIST
67635: LIST
67636: LIST
67637: LIST
67638: LIST
67639: LIST
67640: LIST
67641: LIST
67642: LIST
67643: LIST
67644: LIST
67645: LIST
67646: LIST
67647: LIST
67648: LIST
67649: LIST
67650: LIST
67651: LIST
67652: LIST
67653: LIST
67654: LIST
67655: LIST
67656: LIST
67657: LIST
67658: LIST
67659: LIST
67660: LIST
67661: LIST
67662: LIST
67663: LIST
67664: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
67665: LD_ADDR_VAR 0 31
67669: PUSH
67670: LD_INT 0
67672: PUSH
67673: LD_INT 4
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: PUSH
67680: LD_INT 0
67682: PUSH
67683: LD_INT 3
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: PUSH
67690: LD_INT 1
67692: PUSH
67693: LD_INT 4
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: PUSH
67700: LD_INT 1
67702: PUSH
67703: LD_INT 5
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: LD_INT 0
67712: PUSH
67713: LD_INT 5
67715: PUSH
67716: EMPTY
67717: LIST
67718: LIST
67719: PUSH
67720: LD_INT 1
67722: NEG
67723: PUSH
67724: LD_INT 4
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: PUSH
67731: LD_INT 1
67733: NEG
67734: PUSH
67735: LD_INT 3
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: PUSH
67742: LD_INT 2
67744: PUSH
67745: LD_INT 5
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: PUSH
67752: LD_INT 2
67754: NEG
67755: PUSH
67756: LD_INT 3
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: PUSH
67763: LD_INT 3
67765: NEG
67766: PUSH
67767: LD_INT 0
67769: PUSH
67770: EMPTY
67771: LIST
67772: LIST
67773: PUSH
67774: LD_INT 3
67776: NEG
67777: PUSH
67778: LD_INT 1
67780: NEG
67781: PUSH
67782: EMPTY
67783: LIST
67784: LIST
67785: PUSH
67786: LD_INT 2
67788: NEG
67789: PUSH
67790: LD_INT 0
67792: PUSH
67793: EMPTY
67794: LIST
67795: LIST
67796: PUSH
67797: LD_INT 2
67799: NEG
67800: PUSH
67801: LD_INT 1
67803: PUSH
67804: EMPTY
67805: LIST
67806: LIST
67807: PUSH
67808: LD_INT 3
67810: NEG
67811: PUSH
67812: LD_INT 1
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: PUSH
67819: LD_INT 4
67821: NEG
67822: PUSH
67823: LD_INT 0
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: PUSH
67830: LD_INT 4
67832: NEG
67833: PUSH
67834: LD_INT 1
67836: NEG
67837: PUSH
67838: EMPTY
67839: LIST
67840: LIST
67841: PUSH
67842: LD_INT 4
67844: NEG
67845: PUSH
67846: LD_INT 2
67848: NEG
67849: PUSH
67850: EMPTY
67851: LIST
67852: LIST
67853: PUSH
67854: LD_INT 2
67856: NEG
67857: PUSH
67858: LD_INT 2
67860: PUSH
67861: EMPTY
67862: LIST
67863: LIST
67864: PUSH
67865: LD_INT 4
67867: NEG
67868: PUSH
67869: LD_INT 4
67871: NEG
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: PUSH
67877: LD_INT 4
67879: NEG
67880: PUSH
67881: LD_INT 5
67883: NEG
67884: PUSH
67885: EMPTY
67886: LIST
67887: LIST
67888: PUSH
67889: LD_INT 3
67891: NEG
67892: PUSH
67893: LD_INT 4
67895: NEG
67896: PUSH
67897: EMPTY
67898: LIST
67899: LIST
67900: PUSH
67901: LD_INT 3
67903: NEG
67904: PUSH
67905: LD_INT 3
67907: NEG
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: PUSH
67913: LD_INT 4
67915: NEG
67916: PUSH
67917: LD_INT 3
67919: NEG
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: PUSH
67925: LD_INT 5
67927: NEG
67928: PUSH
67929: LD_INT 4
67931: NEG
67932: PUSH
67933: EMPTY
67934: LIST
67935: LIST
67936: PUSH
67937: LD_INT 5
67939: NEG
67940: PUSH
67941: LD_INT 5
67943: NEG
67944: PUSH
67945: EMPTY
67946: LIST
67947: LIST
67948: PUSH
67949: LD_INT 3
67951: NEG
67952: PUSH
67953: LD_INT 5
67955: NEG
67956: PUSH
67957: EMPTY
67958: LIST
67959: LIST
67960: PUSH
67961: LD_INT 5
67963: NEG
67964: PUSH
67965: LD_INT 3
67967: NEG
67968: PUSH
67969: EMPTY
67970: LIST
67971: LIST
67972: PUSH
67973: LD_INT 0
67975: PUSH
67976: LD_INT 3
67978: NEG
67979: PUSH
67980: EMPTY
67981: LIST
67982: LIST
67983: PUSH
67984: LD_INT 0
67986: PUSH
67987: LD_INT 4
67989: NEG
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: PUSH
67995: LD_INT 1
67997: PUSH
67998: LD_INT 3
68000: NEG
68001: PUSH
68002: EMPTY
68003: LIST
68004: LIST
68005: PUSH
68006: LD_INT 1
68008: PUSH
68009: LD_INT 2
68011: NEG
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: PUSH
68017: LD_INT 0
68019: PUSH
68020: LD_INT 2
68022: NEG
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: PUSH
68028: LD_INT 1
68030: NEG
68031: PUSH
68032: LD_INT 3
68034: NEG
68035: PUSH
68036: EMPTY
68037: LIST
68038: LIST
68039: PUSH
68040: LD_INT 1
68042: NEG
68043: PUSH
68044: LD_INT 4
68046: NEG
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: PUSH
68052: LD_INT 2
68054: PUSH
68055: LD_INT 2
68057: NEG
68058: PUSH
68059: EMPTY
68060: LIST
68061: LIST
68062: PUSH
68063: LD_INT 2
68065: NEG
68066: PUSH
68067: LD_INT 4
68069: NEG
68070: PUSH
68071: EMPTY
68072: LIST
68073: LIST
68074: PUSH
68075: LD_INT 4
68077: PUSH
68078: LD_INT 0
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: PUSH
68085: LD_INT 4
68087: PUSH
68088: LD_INT 1
68090: NEG
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: PUSH
68096: LD_INT 5
68098: PUSH
68099: LD_INT 0
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: PUSH
68106: LD_INT 5
68108: PUSH
68109: LD_INT 1
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: PUSH
68116: LD_INT 4
68118: PUSH
68119: LD_INT 1
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 3
68128: PUSH
68129: LD_INT 0
68131: PUSH
68132: EMPTY
68133: LIST
68134: LIST
68135: PUSH
68136: LD_INT 3
68138: PUSH
68139: LD_INT 1
68141: NEG
68142: PUSH
68143: EMPTY
68144: LIST
68145: LIST
68146: PUSH
68147: LD_INT 3
68149: PUSH
68150: LD_INT 2
68152: NEG
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: PUSH
68158: LD_INT 5
68160: PUSH
68161: LD_INT 2
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: LIST
68172: LIST
68173: LIST
68174: LIST
68175: LIST
68176: LIST
68177: LIST
68178: LIST
68179: LIST
68180: LIST
68181: LIST
68182: LIST
68183: LIST
68184: LIST
68185: LIST
68186: LIST
68187: LIST
68188: LIST
68189: LIST
68190: LIST
68191: LIST
68192: LIST
68193: LIST
68194: LIST
68195: LIST
68196: LIST
68197: LIST
68198: LIST
68199: LIST
68200: LIST
68201: LIST
68202: LIST
68203: LIST
68204: LIST
68205: LIST
68206: LIST
68207: LIST
68208: LIST
68209: LIST
68210: LIST
68211: LIST
68212: LIST
68213: LIST
68214: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68215: LD_ADDR_VAR 0 32
68219: PUSH
68220: LD_INT 4
68222: NEG
68223: PUSH
68224: LD_INT 0
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PUSH
68231: LD_INT 4
68233: NEG
68234: PUSH
68235: LD_INT 1
68237: NEG
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: PUSH
68243: LD_INT 3
68245: NEG
68246: PUSH
68247: LD_INT 0
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: PUSH
68254: LD_INT 3
68256: NEG
68257: PUSH
68258: LD_INT 1
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: PUSH
68265: LD_INT 4
68267: NEG
68268: PUSH
68269: LD_INT 1
68271: PUSH
68272: EMPTY
68273: LIST
68274: LIST
68275: PUSH
68276: LD_INT 5
68278: NEG
68279: PUSH
68280: LD_INT 0
68282: PUSH
68283: EMPTY
68284: LIST
68285: LIST
68286: PUSH
68287: LD_INT 5
68289: NEG
68290: PUSH
68291: LD_INT 1
68293: NEG
68294: PUSH
68295: EMPTY
68296: LIST
68297: LIST
68298: PUSH
68299: LD_INT 5
68301: NEG
68302: PUSH
68303: LD_INT 2
68305: NEG
68306: PUSH
68307: EMPTY
68308: LIST
68309: LIST
68310: PUSH
68311: LD_INT 3
68313: NEG
68314: PUSH
68315: LD_INT 2
68317: PUSH
68318: EMPTY
68319: LIST
68320: LIST
68321: PUSH
68322: LD_INT 3
68324: NEG
68325: PUSH
68326: LD_INT 3
68328: NEG
68329: PUSH
68330: EMPTY
68331: LIST
68332: LIST
68333: PUSH
68334: LD_INT 3
68336: NEG
68337: PUSH
68338: LD_INT 4
68340: NEG
68341: PUSH
68342: EMPTY
68343: LIST
68344: LIST
68345: PUSH
68346: LD_INT 2
68348: NEG
68349: PUSH
68350: LD_INT 3
68352: NEG
68353: PUSH
68354: EMPTY
68355: LIST
68356: LIST
68357: PUSH
68358: LD_INT 2
68360: NEG
68361: PUSH
68362: LD_INT 2
68364: NEG
68365: PUSH
68366: EMPTY
68367: LIST
68368: LIST
68369: PUSH
68370: LD_INT 3
68372: NEG
68373: PUSH
68374: LD_INT 2
68376: NEG
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: PUSH
68382: LD_INT 4
68384: NEG
68385: PUSH
68386: LD_INT 3
68388: NEG
68389: PUSH
68390: EMPTY
68391: LIST
68392: LIST
68393: PUSH
68394: LD_INT 4
68396: NEG
68397: PUSH
68398: LD_INT 4
68400: NEG
68401: PUSH
68402: EMPTY
68403: LIST
68404: LIST
68405: PUSH
68406: LD_INT 2
68408: NEG
68409: PUSH
68410: LD_INT 4
68412: NEG
68413: PUSH
68414: EMPTY
68415: LIST
68416: LIST
68417: PUSH
68418: LD_INT 4
68420: NEG
68421: PUSH
68422: LD_INT 2
68424: NEG
68425: PUSH
68426: EMPTY
68427: LIST
68428: LIST
68429: PUSH
68430: LD_INT 0
68432: PUSH
68433: LD_INT 4
68435: NEG
68436: PUSH
68437: EMPTY
68438: LIST
68439: LIST
68440: PUSH
68441: LD_INT 0
68443: PUSH
68444: LD_INT 5
68446: NEG
68447: PUSH
68448: EMPTY
68449: LIST
68450: LIST
68451: PUSH
68452: LD_INT 1
68454: PUSH
68455: LD_INT 4
68457: NEG
68458: PUSH
68459: EMPTY
68460: LIST
68461: LIST
68462: PUSH
68463: LD_INT 1
68465: PUSH
68466: LD_INT 3
68468: NEG
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: PUSH
68474: LD_INT 0
68476: PUSH
68477: LD_INT 3
68479: NEG
68480: PUSH
68481: EMPTY
68482: LIST
68483: LIST
68484: PUSH
68485: LD_INT 1
68487: NEG
68488: PUSH
68489: LD_INT 4
68491: NEG
68492: PUSH
68493: EMPTY
68494: LIST
68495: LIST
68496: PUSH
68497: LD_INT 1
68499: NEG
68500: PUSH
68501: LD_INT 5
68503: NEG
68504: PUSH
68505: EMPTY
68506: LIST
68507: LIST
68508: PUSH
68509: LD_INT 2
68511: PUSH
68512: LD_INT 3
68514: NEG
68515: PUSH
68516: EMPTY
68517: LIST
68518: LIST
68519: PUSH
68520: LD_INT 2
68522: NEG
68523: PUSH
68524: LD_INT 5
68526: NEG
68527: PUSH
68528: EMPTY
68529: LIST
68530: LIST
68531: PUSH
68532: LD_INT 3
68534: PUSH
68535: LD_INT 0
68537: PUSH
68538: EMPTY
68539: LIST
68540: LIST
68541: PUSH
68542: LD_INT 3
68544: PUSH
68545: LD_INT 1
68547: NEG
68548: PUSH
68549: EMPTY
68550: LIST
68551: LIST
68552: PUSH
68553: LD_INT 4
68555: PUSH
68556: LD_INT 0
68558: PUSH
68559: EMPTY
68560: LIST
68561: LIST
68562: PUSH
68563: LD_INT 4
68565: PUSH
68566: LD_INT 1
68568: PUSH
68569: EMPTY
68570: LIST
68571: LIST
68572: PUSH
68573: LD_INT 3
68575: PUSH
68576: LD_INT 1
68578: PUSH
68579: EMPTY
68580: LIST
68581: LIST
68582: PUSH
68583: LD_INT 2
68585: PUSH
68586: LD_INT 0
68588: PUSH
68589: EMPTY
68590: LIST
68591: LIST
68592: PUSH
68593: LD_INT 2
68595: PUSH
68596: LD_INT 1
68598: NEG
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: PUSH
68604: LD_INT 2
68606: PUSH
68607: LD_INT 2
68609: NEG
68610: PUSH
68611: EMPTY
68612: LIST
68613: LIST
68614: PUSH
68615: LD_INT 4
68617: PUSH
68618: LD_INT 2
68620: PUSH
68621: EMPTY
68622: LIST
68623: LIST
68624: PUSH
68625: LD_INT 4
68627: PUSH
68628: LD_INT 4
68630: PUSH
68631: EMPTY
68632: LIST
68633: LIST
68634: PUSH
68635: LD_INT 4
68637: PUSH
68638: LD_INT 3
68640: PUSH
68641: EMPTY
68642: LIST
68643: LIST
68644: PUSH
68645: LD_INT 5
68647: PUSH
68648: LD_INT 4
68650: PUSH
68651: EMPTY
68652: LIST
68653: LIST
68654: PUSH
68655: LD_INT 5
68657: PUSH
68658: LD_INT 5
68660: PUSH
68661: EMPTY
68662: LIST
68663: LIST
68664: PUSH
68665: LD_INT 4
68667: PUSH
68668: LD_INT 5
68670: PUSH
68671: EMPTY
68672: LIST
68673: LIST
68674: PUSH
68675: LD_INT 3
68677: PUSH
68678: LD_INT 4
68680: PUSH
68681: EMPTY
68682: LIST
68683: LIST
68684: PUSH
68685: LD_INT 3
68687: PUSH
68688: LD_INT 3
68690: PUSH
68691: EMPTY
68692: LIST
68693: LIST
68694: PUSH
68695: LD_INT 5
68697: PUSH
68698: LD_INT 3
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: PUSH
68705: LD_INT 3
68707: PUSH
68708: LD_INT 5
68710: PUSH
68711: EMPTY
68712: LIST
68713: LIST
68714: PUSH
68715: EMPTY
68716: LIST
68717: LIST
68718: LIST
68719: LIST
68720: LIST
68721: LIST
68722: LIST
68723: LIST
68724: LIST
68725: LIST
68726: LIST
68727: LIST
68728: LIST
68729: LIST
68730: LIST
68731: LIST
68732: LIST
68733: LIST
68734: LIST
68735: LIST
68736: LIST
68737: LIST
68738: LIST
68739: LIST
68740: LIST
68741: LIST
68742: LIST
68743: LIST
68744: LIST
68745: LIST
68746: LIST
68747: LIST
68748: LIST
68749: LIST
68750: LIST
68751: LIST
68752: LIST
68753: LIST
68754: LIST
68755: LIST
68756: LIST
68757: LIST
68758: LIST
68759: LIST
68760: LIST
68761: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68762: LD_ADDR_VAR 0 33
68766: PUSH
68767: LD_INT 4
68769: NEG
68770: PUSH
68771: LD_INT 4
68773: NEG
68774: PUSH
68775: EMPTY
68776: LIST
68777: LIST
68778: PUSH
68779: LD_INT 4
68781: NEG
68782: PUSH
68783: LD_INT 5
68785: NEG
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: PUSH
68791: LD_INT 3
68793: NEG
68794: PUSH
68795: LD_INT 4
68797: NEG
68798: PUSH
68799: EMPTY
68800: LIST
68801: LIST
68802: PUSH
68803: LD_INT 3
68805: NEG
68806: PUSH
68807: LD_INT 3
68809: NEG
68810: PUSH
68811: EMPTY
68812: LIST
68813: LIST
68814: PUSH
68815: LD_INT 4
68817: NEG
68818: PUSH
68819: LD_INT 3
68821: NEG
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: PUSH
68827: LD_INT 5
68829: NEG
68830: PUSH
68831: LD_INT 4
68833: NEG
68834: PUSH
68835: EMPTY
68836: LIST
68837: LIST
68838: PUSH
68839: LD_INT 5
68841: NEG
68842: PUSH
68843: LD_INT 5
68845: NEG
68846: PUSH
68847: EMPTY
68848: LIST
68849: LIST
68850: PUSH
68851: LD_INT 3
68853: NEG
68854: PUSH
68855: LD_INT 5
68857: NEG
68858: PUSH
68859: EMPTY
68860: LIST
68861: LIST
68862: PUSH
68863: LD_INT 5
68865: NEG
68866: PUSH
68867: LD_INT 3
68869: NEG
68870: PUSH
68871: EMPTY
68872: LIST
68873: LIST
68874: PUSH
68875: LD_INT 0
68877: PUSH
68878: LD_INT 3
68880: NEG
68881: PUSH
68882: EMPTY
68883: LIST
68884: LIST
68885: PUSH
68886: LD_INT 0
68888: PUSH
68889: LD_INT 4
68891: NEG
68892: PUSH
68893: EMPTY
68894: LIST
68895: LIST
68896: PUSH
68897: LD_INT 1
68899: PUSH
68900: LD_INT 3
68902: NEG
68903: PUSH
68904: EMPTY
68905: LIST
68906: LIST
68907: PUSH
68908: LD_INT 1
68910: PUSH
68911: LD_INT 2
68913: NEG
68914: PUSH
68915: EMPTY
68916: LIST
68917: LIST
68918: PUSH
68919: LD_INT 0
68921: PUSH
68922: LD_INT 2
68924: NEG
68925: PUSH
68926: EMPTY
68927: LIST
68928: LIST
68929: PUSH
68930: LD_INT 1
68932: NEG
68933: PUSH
68934: LD_INT 3
68936: NEG
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: PUSH
68942: LD_INT 1
68944: NEG
68945: PUSH
68946: LD_INT 4
68948: NEG
68949: PUSH
68950: EMPTY
68951: LIST
68952: LIST
68953: PUSH
68954: LD_INT 2
68956: PUSH
68957: LD_INT 2
68959: NEG
68960: PUSH
68961: EMPTY
68962: LIST
68963: LIST
68964: PUSH
68965: LD_INT 2
68967: NEG
68968: PUSH
68969: LD_INT 4
68971: NEG
68972: PUSH
68973: EMPTY
68974: LIST
68975: LIST
68976: PUSH
68977: LD_INT 4
68979: PUSH
68980: LD_INT 0
68982: PUSH
68983: EMPTY
68984: LIST
68985: LIST
68986: PUSH
68987: LD_INT 4
68989: PUSH
68990: LD_INT 1
68992: NEG
68993: PUSH
68994: EMPTY
68995: LIST
68996: LIST
68997: PUSH
68998: LD_INT 5
69000: PUSH
69001: LD_INT 0
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: PUSH
69008: LD_INT 5
69010: PUSH
69011: LD_INT 1
69013: PUSH
69014: EMPTY
69015: LIST
69016: LIST
69017: PUSH
69018: LD_INT 4
69020: PUSH
69021: LD_INT 1
69023: PUSH
69024: EMPTY
69025: LIST
69026: LIST
69027: PUSH
69028: LD_INT 3
69030: PUSH
69031: LD_INT 0
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: PUSH
69038: LD_INT 3
69040: PUSH
69041: LD_INT 1
69043: NEG
69044: PUSH
69045: EMPTY
69046: LIST
69047: LIST
69048: PUSH
69049: LD_INT 3
69051: PUSH
69052: LD_INT 2
69054: NEG
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: PUSH
69060: LD_INT 5
69062: PUSH
69063: LD_INT 2
69065: PUSH
69066: EMPTY
69067: LIST
69068: LIST
69069: PUSH
69070: LD_INT 3
69072: PUSH
69073: LD_INT 3
69075: PUSH
69076: EMPTY
69077: LIST
69078: LIST
69079: PUSH
69080: LD_INT 3
69082: PUSH
69083: LD_INT 2
69085: PUSH
69086: EMPTY
69087: LIST
69088: LIST
69089: PUSH
69090: LD_INT 4
69092: PUSH
69093: LD_INT 3
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: PUSH
69100: LD_INT 4
69102: PUSH
69103: LD_INT 4
69105: PUSH
69106: EMPTY
69107: LIST
69108: LIST
69109: PUSH
69110: LD_INT 3
69112: PUSH
69113: LD_INT 4
69115: PUSH
69116: EMPTY
69117: LIST
69118: LIST
69119: PUSH
69120: LD_INT 2
69122: PUSH
69123: LD_INT 3
69125: PUSH
69126: EMPTY
69127: LIST
69128: LIST
69129: PUSH
69130: LD_INT 2
69132: PUSH
69133: LD_INT 2
69135: PUSH
69136: EMPTY
69137: LIST
69138: LIST
69139: PUSH
69140: LD_INT 4
69142: PUSH
69143: LD_INT 2
69145: PUSH
69146: EMPTY
69147: LIST
69148: LIST
69149: PUSH
69150: LD_INT 2
69152: PUSH
69153: LD_INT 4
69155: PUSH
69156: EMPTY
69157: LIST
69158: LIST
69159: PUSH
69160: LD_INT 0
69162: PUSH
69163: LD_INT 4
69165: PUSH
69166: EMPTY
69167: LIST
69168: LIST
69169: PUSH
69170: LD_INT 0
69172: PUSH
69173: LD_INT 3
69175: PUSH
69176: EMPTY
69177: LIST
69178: LIST
69179: PUSH
69180: LD_INT 1
69182: PUSH
69183: LD_INT 4
69185: PUSH
69186: EMPTY
69187: LIST
69188: LIST
69189: PUSH
69190: LD_INT 1
69192: PUSH
69193: LD_INT 5
69195: PUSH
69196: EMPTY
69197: LIST
69198: LIST
69199: PUSH
69200: LD_INT 0
69202: PUSH
69203: LD_INT 5
69205: PUSH
69206: EMPTY
69207: LIST
69208: LIST
69209: PUSH
69210: LD_INT 1
69212: NEG
69213: PUSH
69214: LD_INT 4
69216: PUSH
69217: EMPTY
69218: LIST
69219: LIST
69220: PUSH
69221: LD_INT 1
69223: NEG
69224: PUSH
69225: LD_INT 3
69227: PUSH
69228: EMPTY
69229: LIST
69230: LIST
69231: PUSH
69232: LD_INT 2
69234: PUSH
69235: LD_INT 5
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: PUSH
69242: LD_INT 2
69244: NEG
69245: PUSH
69246: LD_INT 3
69248: PUSH
69249: EMPTY
69250: LIST
69251: LIST
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: LIST
69257: LIST
69258: LIST
69259: LIST
69260: LIST
69261: LIST
69262: LIST
69263: LIST
69264: LIST
69265: LIST
69266: LIST
69267: LIST
69268: LIST
69269: LIST
69270: LIST
69271: LIST
69272: LIST
69273: LIST
69274: LIST
69275: LIST
69276: LIST
69277: LIST
69278: LIST
69279: LIST
69280: LIST
69281: LIST
69282: LIST
69283: LIST
69284: LIST
69285: LIST
69286: LIST
69287: LIST
69288: LIST
69289: LIST
69290: LIST
69291: LIST
69292: LIST
69293: LIST
69294: LIST
69295: LIST
69296: LIST
69297: LIST
69298: LIST
69299: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69300: LD_ADDR_VAR 0 34
69304: PUSH
69305: LD_INT 0
69307: PUSH
69308: LD_INT 4
69310: NEG
69311: PUSH
69312: EMPTY
69313: LIST
69314: LIST
69315: PUSH
69316: LD_INT 0
69318: PUSH
69319: LD_INT 5
69321: NEG
69322: PUSH
69323: EMPTY
69324: LIST
69325: LIST
69326: PUSH
69327: LD_INT 1
69329: PUSH
69330: LD_INT 4
69332: NEG
69333: PUSH
69334: EMPTY
69335: LIST
69336: LIST
69337: PUSH
69338: LD_INT 1
69340: PUSH
69341: LD_INT 3
69343: NEG
69344: PUSH
69345: EMPTY
69346: LIST
69347: LIST
69348: PUSH
69349: LD_INT 0
69351: PUSH
69352: LD_INT 3
69354: NEG
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: PUSH
69360: LD_INT 1
69362: NEG
69363: PUSH
69364: LD_INT 4
69366: NEG
69367: PUSH
69368: EMPTY
69369: LIST
69370: LIST
69371: PUSH
69372: LD_INT 1
69374: NEG
69375: PUSH
69376: LD_INT 5
69378: NEG
69379: PUSH
69380: EMPTY
69381: LIST
69382: LIST
69383: PUSH
69384: LD_INT 2
69386: PUSH
69387: LD_INT 3
69389: NEG
69390: PUSH
69391: EMPTY
69392: LIST
69393: LIST
69394: PUSH
69395: LD_INT 2
69397: NEG
69398: PUSH
69399: LD_INT 5
69401: NEG
69402: PUSH
69403: EMPTY
69404: LIST
69405: LIST
69406: PUSH
69407: LD_INT 3
69409: PUSH
69410: LD_INT 0
69412: PUSH
69413: EMPTY
69414: LIST
69415: LIST
69416: PUSH
69417: LD_INT 3
69419: PUSH
69420: LD_INT 1
69422: NEG
69423: PUSH
69424: EMPTY
69425: LIST
69426: LIST
69427: PUSH
69428: LD_INT 4
69430: PUSH
69431: LD_INT 0
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: PUSH
69438: LD_INT 4
69440: PUSH
69441: LD_INT 1
69443: PUSH
69444: EMPTY
69445: LIST
69446: LIST
69447: PUSH
69448: LD_INT 3
69450: PUSH
69451: LD_INT 1
69453: PUSH
69454: EMPTY
69455: LIST
69456: LIST
69457: PUSH
69458: LD_INT 2
69460: PUSH
69461: LD_INT 0
69463: PUSH
69464: EMPTY
69465: LIST
69466: LIST
69467: PUSH
69468: LD_INT 2
69470: PUSH
69471: LD_INT 1
69473: NEG
69474: PUSH
69475: EMPTY
69476: LIST
69477: LIST
69478: PUSH
69479: LD_INT 2
69481: PUSH
69482: LD_INT 2
69484: NEG
69485: PUSH
69486: EMPTY
69487: LIST
69488: LIST
69489: PUSH
69490: LD_INT 4
69492: PUSH
69493: LD_INT 2
69495: PUSH
69496: EMPTY
69497: LIST
69498: LIST
69499: PUSH
69500: LD_INT 4
69502: PUSH
69503: LD_INT 4
69505: PUSH
69506: EMPTY
69507: LIST
69508: LIST
69509: PUSH
69510: LD_INT 4
69512: PUSH
69513: LD_INT 3
69515: PUSH
69516: EMPTY
69517: LIST
69518: LIST
69519: PUSH
69520: LD_INT 5
69522: PUSH
69523: LD_INT 4
69525: PUSH
69526: EMPTY
69527: LIST
69528: LIST
69529: PUSH
69530: LD_INT 5
69532: PUSH
69533: LD_INT 5
69535: PUSH
69536: EMPTY
69537: LIST
69538: LIST
69539: PUSH
69540: LD_INT 4
69542: PUSH
69543: LD_INT 5
69545: PUSH
69546: EMPTY
69547: LIST
69548: LIST
69549: PUSH
69550: LD_INT 3
69552: PUSH
69553: LD_INT 4
69555: PUSH
69556: EMPTY
69557: LIST
69558: LIST
69559: PUSH
69560: LD_INT 3
69562: PUSH
69563: LD_INT 3
69565: PUSH
69566: EMPTY
69567: LIST
69568: LIST
69569: PUSH
69570: LD_INT 5
69572: PUSH
69573: LD_INT 3
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: PUSH
69580: LD_INT 3
69582: PUSH
69583: LD_INT 5
69585: PUSH
69586: EMPTY
69587: LIST
69588: LIST
69589: PUSH
69590: LD_INT 0
69592: PUSH
69593: LD_INT 3
69595: PUSH
69596: EMPTY
69597: LIST
69598: LIST
69599: PUSH
69600: LD_INT 0
69602: PUSH
69603: LD_INT 2
69605: PUSH
69606: EMPTY
69607: LIST
69608: LIST
69609: PUSH
69610: LD_INT 1
69612: PUSH
69613: LD_INT 3
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: LD_INT 1
69622: PUSH
69623: LD_INT 4
69625: PUSH
69626: EMPTY
69627: LIST
69628: LIST
69629: PUSH
69630: LD_INT 0
69632: PUSH
69633: LD_INT 4
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: PUSH
69640: LD_INT 1
69642: NEG
69643: PUSH
69644: LD_INT 3
69646: PUSH
69647: EMPTY
69648: LIST
69649: LIST
69650: PUSH
69651: LD_INT 1
69653: NEG
69654: PUSH
69655: LD_INT 2
69657: PUSH
69658: EMPTY
69659: LIST
69660: LIST
69661: PUSH
69662: LD_INT 2
69664: PUSH
69665: LD_INT 4
69667: PUSH
69668: EMPTY
69669: LIST
69670: LIST
69671: PUSH
69672: LD_INT 2
69674: NEG
69675: PUSH
69676: LD_INT 2
69678: PUSH
69679: EMPTY
69680: LIST
69681: LIST
69682: PUSH
69683: LD_INT 4
69685: NEG
69686: PUSH
69687: LD_INT 0
69689: PUSH
69690: EMPTY
69691: LIST
69692: LIST
69693: PUSH
69694: LD_INT 4
69696: NEG
69697: PUSH
69698: LD_INT 1
69700: NEG
69701: PUSH
69702: EMPTY
69703: LIST
69704: LIST
69705: PUSH
69706: LD_INT 3
69708: NEG
69709: PUSH
69710: LD_INT 0
69712: PUSH
69713: EMPTY
69714: LIST
69715: LIST
69716: PUSH
69717: LD_INT 3
69719: NEG
69720: PUSH
69721: LD_INT 1
69723: PUSH
69724: EMPTY
69725: LIST
69726: LIST
69727: PUSH
69728: LD_INT 4
69730: NEG
69731: PUSH
69732: LD_INT 1
69734: PUSH
69735: EMPTY
69736: LIST
69737: LIST
69738: PUSH
69739: LD_INT 5
69741: NEG
69742: PUSH
69743: LD_INT 0
69745: PUSH
69746: EMPTY
69747: LIST
69748: LIST
69749: PUSH
69750: LD_INT 5
69752: NEG
69753: PUSH
69754: LD_INT 1
69756: NEG
69757: PUSH
69758: EMPTY
69759: LIST
69760: LIST
69761: PUSH
69762: LD_INT 5
69764: NEG
69765: PUSH
69766: LD_INT 2
69768: NEG
69769: PUSH
69770: EMPTY
69771: LIST
69772: LIST
69773: PUSH
69774: LD_INT 3
69776: NEG
69777: PUSH
69778: LD_INT 2
69780: PUSH
69781: EMPTY
69782: LIST
69783: LIST
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: LIST
69789: LIST
69790: LIST
69791: LIST
69792: LIST
69793: LIST
69794: LIST
69795: LIST
69796: LIST
69797: LIST
69798: LIST
69799: LIST
69800: LIST
69801: LIST
69802: LIST
69803: LIST
69804: LIST
69805: LIST
69806: LIST
69807: LIST
69808: LIST
69809: LIST
69810: LIST
69811: LIST
69812: LIST
69813: LIST
69814: LIST
69815: LIST
69816: LIST
69817: LIST
69818: LIST
69819: LIST
69820: LIST
69821: LIST
69822: LIST
69823: LIST
69824: LIST
69825: LIST
69826: LIST
69827: LIST
69828: LIST
69829: LIST
69830: LIST
69831: ST_TO_ADDR
// end ; end ;
69832: GO 69835
69834: POP
// case btype of b_depot , b_warehouse :
69835: LD_VAR 0 1
69839: PUSH
69840: LD_INT 0
69842: DOUBLE
69843: EQUAL
69844: IFTRUE 69854
69846: LD_INT 1
69848: DOUBLE
69849: EQUAL
69850: IFTRUE 69854
69852: GO 70055
69854: POP
// case nation of nation_american :
69855: LD_VAR 0 5
69859: PUSH
69860: LD_INT 1
69862: DOUBLE
69863: EQUAL
69864: IFTRUE 69868
69866: GO 69924
69868: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69869: LD_ADDR_VAR 0 9
69873: PUSH
69874: LD_VAR 0 11
69878: PUSH
69879: LD_VAR 0 12
69883: PUSH
69884: LD_VAR 0 13
69888: PUSH
69889: LD_VAR 0 14
69893: PUSH
69894: LD_VAR 0 15
69898: PUSH
69899: LD_VAR 0 16
69903: PUSH
69904: EMPTY
69905: LIST
69906: LIST
69907: LIST
69908: LIST
69909: LIST
69910: LIST
69911: PUSH
69912: LD_VAR 0 4
69916: PUSH
69917: LD_INT 1
69919: PLUS
69920: ARRAY
69921: ST_TO_ADDR
69922: GO 70053
69924: LD_INT 2
69926: DOUBLE
69927: EQUAL
69928: IFTRUE 69932
69930: GO 69988
69932: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69933: LD_ADDR_VAR 0 9
69937: PUSH
69938: LD_VAR 0 17
69942: PUSH
69943: LD_VAR 0 18
69947: PUSH
69948: LD_VAR 0 19
69952: PUSH
69953: LD_VAR 0 20
69957: PUSH
69958: LD_VAR 0 21
69962: PUSH
69963: LD_VAR 0 22
69967: PUSH
69968: EMPTY
69969: LIST
69970: LIST
69971: LIST
69972: LIST
69973: LIST
69974: LIST
69975: PUSH
69976: LD_VAR 0 4
69980: PUSH
69981: LD_INT 1
69983: PLUS
69984: ARRAY
69985: ST_TO_ADDR
69986: GO 70053
69988: LD_INT 3
69990: DOUBLE
69991: EQUAL
69992: IFTRUE 69996
69994: GO 70052
69996: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69997: LD_ADDR_VAR 0 9
70001: PUSH
70002: LD_VAR 0 23
70006: PUSH
70007: LD_VAR 0 24
70011: PUSH
70012: LD_VAR 0 25
70016: PUSH
70017: LD_VAR 0 26
70021: PUSH
70022: LD_VAR 0 27
70026: PUSH
70027: LD_VAR 0 28
70031: PUSH
70032: EMPTY
70033: LIST
70034: LIST
70035: LIST
70036: LIST
70037: LIST
70038: LIST
70039: PUSH
70040: LD_VAR 0 4
70044: PUSH
70045: LD_INT 1
70047: PLUS
70048: ARRAY
70049: ST_TO_ADDR
70050: GO 70053
70052: POP
70053: GO 70608
70055: LD_INT 2
70057: DOUBLE
70058: EQUAL
70059: IFTRUE 70069
70061: LD_INT 3
70063: DOUBLE
70064: EQUAL
70065: IFTRUE 70069
70067: GO 70125
70069: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70070: LD_ADDR_VAR 0 9
70074: PUSH
70075: LD_VAR 0 29
70079: PUSH
70080: LD_VAR 0 30
70084: PUSH
70085: LD_VAR 0 31
70089: PUSH
70090: LD_VAR 0 32
70094: PUSH
70095: LD_VAR 0 33
70099: PUSH
70100: LD_VAR 0 34
70104: PUSH
70105: EMPTY
70106: LIST
70107: LIST
70108: LIST
70109: LIST
70110: LIST
70111: LIST
70112: PUSH
70113: LD_VAR 0 4
70117: PUSH
70118: LD_INT 1
70120: PLUS
70121: ARRAY
70122: ST_TO_ADDR
70123: GO 70608
70125: LD_INT 16
70127: DOUBLE
70128: EQUAL
70129: IFTRUE 70187
70131: LD_INT 17
70133: DOUBLE
70134: EQUAL
70135: IFTRUE 70187
70137: LD_INT 18
70139: DOUBLE
70140: EQUAL
70141: IFTRUE 70187
70143: LD_INT 19
70145: DOUBLE
70146: EQUAL
70147: IFTRUE 70187
70149: LD_INT 22
70151: DOUBLE
70152: EQUAL
70153: IFTRUE 70187
70155: LD_INT 20
70157: DOUBLE
70158: EQUAL
70159: IFTRUE 70187
70161: LD_INT 21
70163: DOUBLE
70164: EQUAL
70165: IFTRUE 70187
70167: LD_INT 23
70169: DOUBLE
70170: EQUAL
70171: IFTRUE 70187
70173: LD_INT 24
70175: DOUBLE
70176: EQUAL
70177: IFTRUE 70187
70179: LD_INT 25
70181: DOUBLE
70182: EQUAL
70183: IFTRUE 70187
70185: GO 70243
70187: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70188: LD_ADDR_VAR 0 9
70192: PUSH
70193: LD_VAR 0 35
70197: PUSH
70198: LD_VAR 0 36
70202: PUSH
70203: LD_VAR 0 37
70207: PUSH
70208: LD_VAR 0 38
70212: PUSH
70213: LD_VAR 0 39
70217: PUSH
70218: LD_VAR 0 40
70222: PUSH
70223: EMPTY
70224: LIST
70225: LIST
70226: LIST
70227: LIST
70228: LIST
70229: LIST
70230: PUSH
70231: LD_VAR 0 4
70235: PUSH
70236: LD_INT 1
70238: PLUS
70239: ARRAY
70240: ST_TO_ADDR
70241: GO 70608
70243: LD_INT 6
70245: DOUBLE
70246: EQUAL
70247: IFTRUE 70299
70249: LD_INT 7
70251: DOUBLE
70252: EQUAL
70253: IFTRUE 70299
70255: LD_INT 8
70257: DOUBLE
70258: EQUAL
70259: IFTRUE 70299
70261: LD_INT 13
70263: DOUBLE
70264: EQUAL
70265: IFTRUE 70299
70267: LD_INT 12
70269: DOUBLE
70270: EQUAL
70271: IFTRUE 70299
70273: LD_INT 15
70275: DOUBLE
70276: EQUAL
70277: IFTRUE 70299
70279: LD_INT 11
70281: DOUBLE
70282: EQUAL
70283: IFTRUE 70299
70285: LD_INT 14
70287: DOUBLE
70288: EQUAL
70289: IFTRUE 70299
70291: LD_INT 10
70293: DOUBLE
70294: EQUAL
70295: IFTRUE 70299
70297: GO 70355
70299: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70300: LD_ADDR_VAR 0 9
70304: PUSH
70305: LD_VAR 0 41
70309: PUSH
70310: LD_VAR 0 42
70314: PUSH
70315: LD_VAR 0 43
70319: PUSH
70320: LD_VAR 0 44
70324: PUSH
70325: LD_VAR 0 45
70329: PUSH
70330: LD_VAR 0 46
70334: PUSH
70335: EMPTY
70336: LIST
70337: LIST
70338: LIST
70339: LIST
70340: LIST
70341: LIST
70342: PUSH
70343: LD_VAR 0 4
70347: PUSH
70348: LD_INT 1
70350: PLUS
70351: ARRAY
70352: ST_TO_ADDR
70353: GO 70608
70355: LD_INT 36
70357: DOUBLE
70358: EQUAL
70359: IFTRUE 70363
70361: GO 70419
70363: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70364: LD_ADDR_VAR 0 9
70368: PUSH
70369: LD_VAR 0 47
70373: PUSH
70374: LD_VAR 0 48
70378: PUSH
70379: LD_VAR 0 49
70383: PUSH
70384: LD_VAR 0 50
70388: PUSH
70389: LD_VAR 0 51
70393: PUSH
70394: LD_VAR 0 52
70398: PUSH
70399: EMPTY
70400: LIST
70401: LIST
70402: LIST
70403: LIST
70404: LIST
70405: LIST
70406: PUSH
70407: LD_VAR 0 4
70411: PUSH
70412: LD_INT 1
70414: PLUS
70415: ARRAY
70416: ST_TO_ADDR
70417: GO 70608
70419: LD_INT 4
70421: DOUBLE
70422: EQUAL
70423: IFTRUE 70445
70425: LD_INT 5
70427: DOUBLE
70428: EQUAL
70429: IFTRUE 70445
70431: LD_INT 34
70433: DOUBLE
70434: EQUAL
70435: IFTRUE 70445
70437: LD_INT 37
70439: DOUBLE
70440: EQUAL
70441: IFTRUE 70445
70443: GO 70501
70445: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70446: LD_ADDR_VAR 0 9
70450: PUSH
70451: LD_VAR 0 53
70455: PUSH
70456: LD_VAR 0 54
70460: PUSH
70461: LD_VAR 0 55
70465: PUSH
70466: LD_VAR 0 56
70470: PUSH
70471: LD_VAR 0 57
70475: PUSH
70476: LD_VAR 0 58
70480: PUSH
70481: EMPTY
70482: LIST
70483: LIST
70484: LIST
70485: LIST
70486: LIST
70487: LIST
70488: PUSH
70489: LD_VAR 0 4
70493: PUSH
70494: LD_INT 1
70496: PLUS
70497: ARRAY
70498: ST_TO_ADDR
70499: GO 70608
70501: LD_INT 31
70503: DOUBLE
70504: EQUAL
70505: IFTRUE 70551
70507: LD_INT 32
70509: DOUBLE
70510: EQUAL
70511: IFTRUE 70551
70513: LD_INT 33
70515: DOUBLE
70516: EQUAL
70517: IFTRUE 70551
70519: LD_INT 27
70521: DOUBLE
70522: EQUAL
70523: IFTRUE 70551
70525: LD_INT 26
70527: DOUBLE
70528: EQUAL
70529: IFTRUE 70551
70531: LD_INT 28
70533: DOUBLE
70534: EQUAL
70535: IFTRUE 70551
70537: LD_INT 29
70539: DOUBLE
70540: EQUAL
70541: IFTRUE 70551
70543: LD_INT 30
70545: DOUBLE
70546: EQUAL
70547: IFTRUE 70551
70549: GO 70607
70551: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
70552: LD_ADDR_VAR 0 9
70556: PUSH
70557: LD_VAR 0 59
70561: PUSH
70562: LD_VAR 0 60
70566: PUSH
70567: LD_VAR 0 61
70571: PUSH
70572: LD_VAR 0 62
70576: PUSH
70577: LD_VAR 0 63
70581: PUSH
70582: LD_VAR 0 64
70586: PUSH
70587: EMPTY
70588: LIST
70589: LIST
70590: LIST
70591: LIST
70592: LIST
70593: LIST
70594: PUSH
70595: LD_VAR 0 4
70599: PUSH
70600: LD_INT 1
70602: PLUS
70603: ARRAY
70604: ST_TO_ADDR
70605: GO 70608
70607: POP
// temp_list2 = [ ] ;
70608: LD_ADDR_VAR 0 10
70612: PUSH
70613: EMPTY
70614: ST_TO_ADDR
// for i in temp_list do
70615: LD_ADDR_VAR 0 8
70619: PUSH
70620: LD_VAR 0 9
70624: PUSH
70625: FOR_IN
70626: IFFALSE 70678
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70628: LD_ADDR_VAR 0 10
70632: PUSH
70633: LD_VAR 0 10
70637: PUSH
70638: LD_VAR 0 8
70642: PUSH
70643: LD_INT 1
70645: ARRAY
70646: PUSH
70647: LD_VAR 0 2
70651: PLUS
70652: PUSH
70653: LD_VAR 0 8
70657: PUSH
70658: LD_INT 2
70660: ARRAY
70661: PUSH
70662: LD_VAR 0 3
70666: PLUS
70667: PUSH
70668: EMPTY
70669: LIST
70670: LIST
70671: PUSH
70672: EMPTY
70673: LIST
70674: ADD
70675: ST_TO_ADDR
70676: GO 70625
70678: POP
70679: POP
// result = temp_list2 ;
70680: LD_ADDR_VAR 0 7
70684: PUSH
70685: LD_VAR 0 10
70689: ST_TO_ADDR
// end ;
70690: LD_VAR 0 7
70694: RET
// export function EnemyInRange ( unit , dist ) ; begin
70695: LD_INT 0
70697: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
70698: LD_ADDR_VAR 0 3
70702: PUSH
70703: LD_VAR 0 1
70707: PPUSH
70708: CALL_OW 255
70712: PPUSH
70713: LD_VAR 0 1
70717: PPUSH
70718: CALL_OW 250
70722: PPUSH
70723: LD_VAR 0 1
70727: PPUSH
70728: CALL_OW 251
70732: PPUSH
70733: LD_VAR 0 2
70737: PPUSH
70738: CALL 44091 0 4
70742: PUSH
70743: LD_INT 4
70745: ARRAY
70746: ST_TO_ADDR
// end ;
70747: LD_VAR 0 3
70751: RET
// export function PlayerSeeMe ( unit ) ; begin
70752: LD_INT 0
70754: PPUSH
// result := See ( your_side , unit ) ;
70755: LD_ADDR_VAR 0 2
70759: PUSH
70760: LD_OWVAR 2
70764: PPUSH
70765: LD_VAR 0 1
70769: PPUSH
70770: CALL_OW 292
70774: ST_TO_ADDR
// end ;
70775: LD_VAR 0 2
70779: RET
// export function ReverseDir ( unit ) ; begin
70780: LD_INT 0
70782: PPUSH
// if not unit then
70783: LD_VAR 0 1
70787: NOT
70788: IFFALSE 70792
// exit ;
70790: GO 70815
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
70792: LD_ADDR_VAR 0 2
70796: PUSH
70797: LD_VAR 0 1
70801: PPUSH
70802: CALL_OW 254
70806: PUSH
70807: LD_INT 3
70809: PLUS
70810: PUSH
70811: LD_INT 6
70813: MOD
70814: ST_TO_ADDR
// end ;
70815: LD_VAR 0 2
70819: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
70820: LD_INT 0
70822: PPUSH
70823: PPUSH
70824: PPUSH
70825: PPUSH
70826: PPUSH
// if not hexes then
70827: LD_VAR 0 2
70831: NOT
70832: IFFALSE 70836
// exit ;
70834: GO 70984
// dist := 9999 ;
70836: LD_ADDR_VAR 0 5
70840: PUSH
70841: LD_INT 9999
70843: ST_TO_ADDR
// for i = 1 to hexes do
70844: LD_ADDR_VAR 0 4
70848: PUSH
70849: DOUBLE
70850: LD_INT 1
70852: DEC
70853: ST_TO_ADDR
70854: LD_VAR 0 2
70858: PUSH
70859: FOR_TO
70860: IFFALSE 70972
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
70862: LD_VAR 0 1
70866: PPUSH
70867: LD_VAR 0 2
70871: PUSH
70872: LD_VAR 0 4
70876: ARRAY
70877: PUSH
70878: LD_INT 1
70880: ARRAY
70881: PPUSH
70882: LD_VAR 0 2
70886: PUSH
70887: LD_VAR 0 4
70891: ARRAY
70892: PUSH
70893: LD_INT 2
70895: ARRAY
70896: PPUSH
70897: CALL_OW 297
70901: PUSH
70902: LD_VAR 0 5
70906: LESS
70907: IFFALSE 70970
// begin hex := hexes [ i ] ;
70909: LD_ADDR_VAR 0 7
70913: PUSH
70914: LD_VAR 0 2
70918: PUSH
70919: LD_VAR 0 4
70923: ARRAY
70924: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70925: LD_ADDR_VAR 0 5
70929: PUSH
70930: LD_VAR 0 1
70934: PPUSH
70935: LD_VAR 0 2
70939: PUSH
70940: LD_VAR 0 4
70944: ARRAY
70945: PUSH
70946: LD_INT 1
70948: ARRAY
70949: PPUSH
70950: LD_VAR 0 2
70954: PUSH
70955: LD_VAR 0 4
70959: ARRAY
70960: PUSH
70961: LD_INT 2
70963: ARRAY
70964: PPUSH
70965: CALL_OW 297
70969: ST_TO_ADDR
// end ; end ;
70970: GO 70859
70972: POP
70973: POP
// result := hex ;
70974: LD_ADDR_VAR 0 3
70978: PUSH
70979: LD_VAR 0 7
70983: ST_TO_ADDR
// end ;
70984: LD_VAR 0 3
70988: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70989: LD_INT 0
70991: PPUSH
70992: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70993: LD_VAR 0 1
70997: NOT
70998: PUSH
70999: LD_VAR 0 1
71003: PUSH
71004: LD_INT 21
71006: PUSH
71007: LD_INT 2
71009: PUSH
71010: EMPTY
71011: LIST
71012: LIST
71013: PUSH
71014: LD_INT 23
71016: PUSH
71017: LD_INT 2
71019: PUSH
71020: EMPTY
71021: LIST
71022: LIST
71023: PUSH
71024: EMPTY
71025: LIST
71026: LIST
71027: PPUSH
71028: CALL_OW 69
71032: IN
71033: NOT
71034: OR
71035: IFFALSE 71039
// exit ;
71037: GO 71086
// for i = 1 to 3 do
71039: LD_ADDR_VAR 0 3
71043: PUSH
71044: DOUBLE
71045: LD_INT 1
71047: DEC
71048: ST_TO_ADDR
71049: LD_INT 3
71051: PUSH
71052: FOR_TO
71053: IFFALSE 71084
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71055: LD_VAR 0 1
71059: PPUSH
71060: CALL_OW 250
71064: PPUSH
71065: LD_VAR 0 1
71069: PPUSH
71070: CALL_OW 251
71074: PPUSH
71075: LD_INT 1
71077: PPUSH
71078: CALL_OW 453
71082: GO 71052
71084: POP
71085: POP
// end ;
71086: LD_VAR 0 2
71090: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71091: LD_INT 0
71093: PPUSH
71094: PPUSH
71095: PPUSH
71096: PPUSH
71097: PPUSH
71098: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71099: LD_VAR 0 1
71103: NOT
71104: PUSH
71105: LD_VAR 0 2
71109: NOT
71110: OR
71111: PUSH
71112: LD_VAR 0 1
71116: PPUSH
71117: CALL_OW 314
71121: OR
71122: IFFALSE 71126
// exit ;
71124: GO 71567
// x := GetX ( enemy_unit ) ;
71126: LD_ADDR_VAR 0 7
71130: PUSH
71131: LD_VAR 0 2
71135: PPUSH
71136: CALL_OW 250
71140: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71141: LD_ADDR_VAR 0 8
71145: PUSH
71146: LD_VAR 0 2
71150: PPUSH
71151: CALL_OW 251
71155: ST_TO_ADDR
// if not x or not y then
71156: LD_VAR 0 7
71160: NOT
71161: PUSH
71162: LD_VAR 0 8
71166: NOT
71167: OR
71168: IFFALSE 71172
// exit ;
71170: GO 71567
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71172: LD_ADDR_VAR 0 6
71176: PUSH
71177: LD_VAR 0 7
71181: PPUSH
71182: LD_INT 0
71184: PPUSH
71185: LD_INT 4
71187: PPUSH
71188: CALL_OW 272
71192: PUSH
71193: LD_VAR 0 8
71197: PPUSH
71198: LD_INT 0
71200: PPUSH
71201: LD_INT 4
71203: PPUSH
71204: CALL_OW 273
71208: PUSH
71209: EMPTY
71210: LIST
71211: LIST
71212: PUSH
71213: LD_VAR 0 7
71217: PPUSH
71218: LD_INT 1
71220: PPUSH
71221: LD_INT 4
71223: PPUSH
71224: CALL_OW 272
71228: PUSH
71229: LD_VAR 0 8
71233: PPUSH
71234: LD_INT 1
71236: PPUSH
71237: LD_INT 4
71239: PPUSH
71240: CALL_OW 273
71244: PUSH
71245: EMPTY
71246: LIST
71247: LIST
71248: PUSH
71249: LD_VAR 0 7
71253: PPUSH
71254: LD_INT 2
71256: PPUSH
71257: LD_INT 4
71259: PPUSH
71260: CALL_OW 272
71264: PUSH
71265: LD_VAR 0 8
71269: PPUSH
71270: LD_INT 2
71272: PPUSH
71273: LD_INT 4
71275: PPUSH
71276: CALL_OW 273
71280: PUSH
71281: EMPTY
71282: LIST
71283: LIST
71284: PUSH
71285: LD_VAR 0 7
71289: PPUSH
71290: LD_INT 3
71292: PPUSH
71293: LD_INT 4
71295: PPUSH
71296: CALL_OW 272
71300: PUSH
71301: LD_VAR 0 8
71305: PPUSH
71306: LD_INT 3
71308: PPUSH
71309: LD_INT 4
71311: PPUSH
71312: CALL_OW 273
71316: PUSH
71317: EMPTY
71318: LIST
71319: LIST
71320: PUSH
71321: LD_VAR 0 7
71325: PPUSH
71326: LD_INT 4
71328: PPUSH
71329: LD_INT 4
71331: PPUSH
71332: CALL_OW 272
71336: PUSH
71337: LD_VAR 0 8
71341: PPUSH
71342: LD_INT 4
71344: PPUSH
71345: LD_INT 4
71347: PPUSH
71348: CALL_OW 273
71352: PUSH
71353: EMPTY
71354: LIST
71355: LIST
71356: PUSH
71357: LD_VAR 0 7
71361: PPUSH
71362: LD_INT 5
71364: PPUSH
71365: LD_INT 4
71367: PPUSH
71368: CALL_OW 272
71372: PUSH
71373: LD_VAR 0 8
71377: PPUSH
71378: LD_INT 5
71380: PPUSH
71381: LD_INT 4
71383: PPUSH
71384: CALL_OW 273
71388: PUSH
71389: EMPTY
71390: LIST
71391: LIST
71392: PUSH
71393: EMPTY
71394: LIST
71395: LIST
71396: LIST
71397: LIST
71398: LIST
71399: LIST
71400: ST_TO_ADDR
// for i = tmp downto 1 do
71401: LD_ADDR_VAR 0 4
71405: PUSH
71406: DOUBLE
71407: LD_VAR 0 6
71411: INC
71412: ST_TO_ADDR
71413: LD_INT 1
71415: PUSH
71416: FOR_DOWNTO
71417: IFFALSE 71518
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71419: LD_VAR 0 6
71423: PUSH
71424: LD_VAR 0 4
71428: ARRAY
71429: PUSH
71430: LD_INT 1
71432: ARRAY
71433: PPUSH
71434: LD_VAR 0 6
71438: PUSH
71439: LD_VAR 0 4
71443: ARRAY
71444: PUSH
71445: LD_INT 2
71447: ARRAY
71448: PPUSH
71449: CALL_OW 488
71453: NOT
71454: PUSH
71455: LD_VAR 0 6
71459: PUSH
71460: LD_VAR 0 4
71464: ARRAY
71465: PUSH
71466: LD_INT 1
71468: ARRAY
71469: PPUSH
71470: LD_VAR 0 6
71474: PUSH
71475: LD_VAR 0 4
71479: ARRAY
71480: PUSH
71481: LD_INT 2
71483: ARRAY
71484: PPUSH
71485: CALL_OW 428
71489: PUSH
71490: LD_INT 0
71492: NONEQUAL
71493: OR
71494: IFFALSE 71516
// tmp := Delete ( tmp , i ) ;
71496: LD_ADDR_VAR 0 6
71500: PUSH
71501: LD_VAR 0 6
71505: PPUSH
71506: LD_VAR 0 4
71510: PPUSH
71511: CALL_OW 3
71515: ST_TO_ADDR
71516: GO 71416
71518: POP
71519: POP
// j := GetClosestHex ( unit , tmp ) ;
71520: LD_ADDR_VAR 0 5
71524: PUSH
71525: LD_VAR 0 1
71529: PPUSH
71530: LD_VAR 0 6
71534: PPUSH
71535: CALL 70820 0 2
71539: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71540: LD_VAR 0 1
71544: PPUSH
71545: LD_VAR 0 5
71549: PUSH
71550: LD_INT 1
71552: ARRAY
71553: PPUSH
71554: LD_VAR 0 5
71558: PUSH
71559: LD_INT 2
71561: ARRAY
71562: PPUSH
71563: CALL_OW 111
// end ;
71567: LD_VAR 0 3
71571: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
71572: LD_INT 0
71574: PPUSH
71575: PPUSH
71576: PPUSH
// uc_side = 0 ;
71577: LD_ADDR_OWVAR 20
71581: PUSH
71582: LD_INT 0
71584: ST_TO_ADDR
// uc_nation = 0 ;
71585: LD_ADDR_OWVAR 21
71589: PUSH
71590: LD_INT 0
71592: ST_TO_ADDR
// InitHc_All ( ) ;
71593: CALL_OW 584
// InitVc ;
71597: CALL_OW 20
// if mastodonts then
71601: LD_VAR 0 6
71605: IFFALSE 71672
// for i = 1 to mastodonts do
71607: LD_ADDR_VAR 0 11
71611: PUSH
71612: DOUBLE
71613: LD_INT 1
71615: DEC
71616: ST_TO_ADDR
71617: LD_VAR 0 6
71621: PUSH
71622: FOR_TO
71623: IFFALSE 71670
// begin vc_chassis := 31 ;
71625: LD_ADDR_OWVAR 37
71629: PUSH
71630: LD_INT 31
71632: ST_TO_ADDR
// vc_control := control_rider ;
71633: LD_ADDR_OWVAR 38
71637: PUSH
71638: LD_INT 4
71640: ST_TO_ADDR
// animal := CreateVehicle ;
71641: LD_ADDR_VAR 0 12
71645: PUSH
71646: CALL_OW 45
71650: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71651: LD_VAR 0 12
71655: PPUSH
71656: LD_VAR 0 8
71660: PPUSH
71661: LD_INT 0
71663: PPUSH
71664: CALL 73807 0 3
// end ;
71668: GO 71622
71670: POP
71671: POP
// if horses then
71672: LD_VAR 0 5
71676: IFFALSE 71743
// for i = 1 to horses do
71678: LD_ADDR_VAR 0 11
71682: PUSH
71683: DOUBLE
71684: LD_INT 1
71686: DEC
71687: ST_TO_ADDR
71688: LD_VAR 0 5
71692: PUSH
71693: FOR_TO
71694: IFFALSE 71741
// begin hc_class := 21 ;
71696: LD_ADDR_OWVAR 28
71700: PUSH
71701: LD_INT 21
71703: ST_TO_ADDR
// hc_gallery :=  ;
71704: LD_ADDR_OWVAR 33
71708: PUSH
71709: LD_STRING 
71711: ST_TO_ADDR
// animal := CreateHuman ;
71712: LD_ADDR_VAR 0 12
71716: PUSH
71717: CALL_OW 44
71721: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71722: LD_VAR 0 12
71726: PPUSH
71727: LD_VAR 0 8
71731: PPUSH
71732: LD_INT 0
71734: PPUSH
71735: CALL 73807 0 3
// end ;
71739: GO 71693
71741: POP
71742: POP
// if birds then
71743: LD_VAR 0 1
71747: IFFALSE 71814
// for i = 1 to birds do
71749: LD_ADDR_VAR 0 11
71753: PUSH
71754: DOUBLE
71755: LD_INT 1
71757: DEC
71758: ST_TO_ADDR
71759: LD_VAR 0 1
71763: PUSH
71764: FOR_TO
71765: IFFALSE 71812
// begin hc_class = 18 ;
71767: LD_ADDR_OWVAR 28
71771: PUSH
71772: LD_INT 18
71774: ST_TO_ADDR
// hc_gallery =  ;
71775: LD_ADDR_OWVAR 33
71779: PUSH
71780: LD_STRING 
71782: ST_TO_ADDR
// animal := CreateHuman ;
71783: LD_ADDR_VAR 0 12
71787: PUSH
71788: CALL_OW 44
71792: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71793: LD_VAR 0 12
71797: PPUSH
71798: LD_VAR 0 8
71802: PPUSH
71803: LD_INT 0
71805: PPUSH
71806: CALL 73807 0 3
// end ;
71810: GO 71764
71812: POP
71813: POP
// if tigers then
71814: LD_VAR 0 2
71818: IFFALSE 71902
// for i = 1 to tigers do
71820: LD_ADDR_VAR 0 11
71824: PUSH
71825: DOUBLE
71826: LD_INT 1
71828: DEC
71829: ST_TO_ADDR
71830: LD_VAR 0 2
71834: PUSH
71835: FOR_TO
71836: IFFALSE 71900
// begin hc_class = class_tiger ;
71838: LD_ADDR_OWVAR 28
71842: PUSH
71843: LD_INT 14
71845: ST_TO_ADDR
// hc_gallery =  ;
71846: LD_ADDR_OWVAR 33
71850: PUSH
71851: LD_STRING 
71853: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71854: LD_ADDR_OWVAR 35
71858: PUSH
71859: LD_INT 7
71861: NEG
71862: PPUSH
71863: LD_INT 7
71865: PPUSH
71866: CALL_OW 12
71870: ST_TO_ADDR
// animal := CreateHuman ;
71871: LD_ADDR_VAR 0 12
71875: PUSH
71876: CALL_OW 44
71880: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71881: LD_VAR 0 12
71885: PPUSH
71886: LD_VAR 0 8
71890: PPUSH
71891: LD_INT 0
71893: PPUSH
71894: CALL 73807 0 3
// end ;
71898: GO 71835
71900: POP
71901: POP
// if apemans then
71902: LD_VAR 0 3
71906: IFFALSE 72029
// for i = 1 to apemans do
71908: LD_ADDR_VAR 0 11
71912: PUSH
71913: DOUBLE
71914: LD_INT 1
71916: DEC
71917: ST_TO_ADDR
71918: LD_VAR 0 3
71922: PUSH
71923: FOR_TO
71924: IFFALSE 72027
// begin hc_class = class_apeman ;
71926: LD_ADDR_OWVAR 28
71930: PUSH
71931: LD_INT 12
71933: ST_TO_ADDR
// hc_gallery =  ;
71934: LD_ADDR_OWVAR 33
71938: PUSH
71939: LD_STRING 
71941: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71942: LD_ADDR_OWVAR 35
71946: PUSH
71947: LD_INT 2
71949: NEG
71950: PPUSH
71951: LD_INT 2
71953: PPUSH
71954: CALL_OW 12
71958: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71959: LD_ADDR_OWVAR 31
71963: PUSH
71964: LD_INT 1
71966: PPUSH
71967: LD_INT 3
71969: PPUSH
71970: CALL_OW 12
71974: PUSH
71975: LD_INT 1
71977: PPUSH
71978: LD_INT 3
71980: PPUSH
71981: CALL_OW 12
71985: PUSH
71986: LD_INT 0
71988: PUSH
71989: LD_INT 0
71991: PUSH
71992: EMPTY
71993: LIST
71994: LIST
71995: LIST
71996: LIST
71997: ST_TO_ADDR
// animal := CreateHuman ;
71998: LD_ADDR_VAR 0 12
72002: PUSH
72003: CALL_OW 44
72007: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72008: LD_VAR 0 12
72012: PPUSH
72013: LD_VAR 0 8
72017: PPUSH
72018: LD_INT 0
72020: PPUSH
72021: CALL 73807 0 3
// end ;
72025: GO 71923
72027: POP
72028: POP
// if enchidnas then
72029: LD_VAR 0 4
72033: IFFALSE 72100
// for i = 1 to enchidnas do
72035: LD_ADDR_VAR 0 11
72039: PUSH
72040: DOUBLE
72041: LD_INT 1
72043: DEC
72044: ST_TO_ADDR
72045: LD_VAR 0 4
72049: PUSH
72050: FOR_TO
72051: IFFALSE 72098
// begin hc_class = 13 ;
72053: LD_ADDR_OWVAR 28
72057: PUSH
72058: LD_INT 13
72060: ST_TO_ADDR
// hc_gallery =  ;
72061: LD_ADDR_OWVAR 33
72065: PUSH
72066: LD_STRING 
72068: ST_TO_ADDR
// animal := CreateHuman ;
72069: LD_ADDR_VAR 0 12
72073: PUSH
72074: CALL_OW 44
72078: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72079: LD_VAR 0 12
72083: PPUSH
72084: LD_VAR 0 8
72088: PPUSH
72089: LD_INT 0
72091: PPUSH
72092: CALL 73807 0 3
// end ;
72096: GO 72050
72098: POP
72099: POP
// if fishes then
72100: LD_VAR 0 7
72104: IFFALSE 72171
// for i = 1 to fishes do
72106: LD_ADDR_VAR 0 11
72110: PUSH
72111: DOUBLE
72112: LD_INT 1
72114: DEC
72115: ST_TO_ADDR
72116: LD_VAR 0 7
72120: PUSH
72121: FOR_TO
72122: IFFALSE 72169
// begin hc_class = 20 ;
72124: LD_ADDR_OWVAR 28
72128: PUSH
72129: LD_INT 20
72131: ST_TO_ADDR
// hc_gallery =  ;
72132: LD_ADDR_OWVAR 33
72136: PUSH
72137: LD_STRING 
72139: ST_TO_ADDR
// animal := CreateHuman ;
72140: LD_ADDR_VAR 0 12
72144: PUSH
72145: CALL_OW 44
72149: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
72150: LD_VAR 0 12
72154: PPUSH
72155: LD_VAR 0 9
72159: PPUSH
72160: LD_INT 0
72162: PPUSH
72163: CALL 73807 0 3
// end ;
72167: GO 72121
72169: POP
72170: POP
// end ;
72171: LD_VAR 0 10
72175: RET
// export function WantHeal ( sci , unit ) ; begin
72176: LD_INT 0
72178: PPUSH
// if GetTaskList ( sci ) > 0 then
72179: LD_VAR 0 1
72183: PPUSH
72184: CALL_OW 437
72188: PUSH
72189: LD_INT 0
72191: GREATER
72192: IFFALSE 72262
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
72194: LD_VAR 0 1
72198: PPUSH
72199: CALL_OW 437
72203: PUSH
72204: LD_INT 1
72206: ARRAY
72207: PUSH
72208: LD_INT 1
72210: ARRAY
72211: PUSH
72212: LD_STRING l
72214: EQUAL
72215: PUSH
72216: LD_VAR 0 1
72220: PPUSH
72221: CALL_OW 437
72225: PUSH
72226: LD_INT 1
72228: ARRAY
72229: PUSH
72230: LD_INT 4
72232: ARRAY
72233: PUSH
72234: LD_VAR 0 2
72238: EQUAL
72239: AND
72240: IFFALSE 72252
// result := true else
72242: LD_ADDR_VAR 0 3
72246: PUSH
72247: LD_INT 1
72249: ST_TO_ADDR
72250: GO 72260
// result := false ;
72252: LD_ADDR_VAR 0 3
72256: PUSH
72257: LD_INT 0
72259: ST_TO_ADDR
// end else
72260: GO 72270
// result := false ;
72262: LD_ADDR_VAR 0 3
72266: PUSH
72267: LD_INT 0
72269: ST_TO_ADDR
// end ;
72270: LD_VAR 0 3
72274: RET
// export function HealTarget ( sci ) ; begin
72275: LD_INT 0
72277: PPUSH
// if not sci then
72278: LD_VAR 0 1
72282: NOT
72283: IFFALSE 72287
// exit ;
72285: GO 72352
// result := 0 ;
72287: LD_ADDR_VAR 0 2
72291: PUSH
72292: LD_INT 0
72294: ST_TO_ADDR
// if GetTaskList ( sci ) then
72295: LD_VAR 0 1
72299: PPUSH
72300: CALL_OW 437
72304: IFFALSE 72352
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
72306: LD_VAR 0 1
72310: PPUSH
72311: CALL_OW 437
72315: PUSH
72316: LD_INT 1
72318: ARRAY
72319: PUSH
72320: LD_INT 1
72322: ARRAY
72323: PUSH
72324: LD_STRING l
72326: EQUAL
72327: IFFALSE 72352
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
72329: LD_ADDR_VAR 0 2
72333: PUSH
72334: LD_VAR 0 1
72338: PPUSH
72339: CALL_OW 437
72343: PUSH
72344: LD_INT 1
72346: ARRAY
72347: PUSH
72348: LD_INT 4
72350: ARRAY
72351: ST_TO_ADDR
// end ;
72352: LD_VAR 0 2
72356: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
72357: LD_INT 0
72359: PPUSH
72360: PPUSH
72361: PPUSH
72362: PPUSH
// if not base_units then
72363: LD_VAR 0 1
72367: NOT
72368: IFFALSE 72372
// exit ;
72370: GO 72459
// result := false ;
72372: LD_ADDR_VAR 0 2
72376: PUSH
72377: LD_INT 0
72379: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
72380: LD_ADDR_VAR 0 5
72384: PUSH
72385: LD_VAR 0 1
72389: PPUSH
72390: LD_INT 21
72392: PUSH
72393: LD_INT 3
72395: PUSH
72396: EMPTY
72397: LIST
72398: LIST
72399: PPUSH
72400: CALL_OW 72
72404: ST_TO_ADDR
// if not tmp then
72405: LD_VAR 0 5
72409: NOT
72410: IFFALSE 72414
// exit ;
72412: GO 72459
// for i in tmp do
72414: LD_ADDR_VAR 0 3
72418: PUSH
72419: LD_VAR 0 5
72423: PUSH
72424: FOR_IN
72425: IFFALSE 72457
// begin result := EnemyInRange ( i , 22 ) ;
72427: LD_ADDR_VAR 0 2
72431: PUSH
72432: LD_VAR 0 3
72436: PPUSH
72437: LD_INT 22
72439: PPUSH
72440: CALL 70695 0 2
72444: ST_TO_ADDR
// if result then
72445: LD_VAR 0 2
72449: IFFALSE 72455
// exit ;
72451: POP
72452: POP
72453: GO 72459
// end ;
72455: GO 72424
72457: POP
72458: POP
// end ;
72459: LD_VAR 0 2
72463: RET
// export function FilterByTag ( units , tag ) ; begin
72464: LD_INT 0
72466: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
72467: LD_ADDR_VAR 0 3
72471: PUSH
72472: LD_VAR 0 1
72476: PPUSH
72477: LD_INT 120
72479: PUSH
72480: LD_VAR 0 2
72484: PUSH
72485: EMPTY
72486: LIST
72487: LIST
72488: PPUSH
72489: CALL_OW 72
72493: ST_TO_ADDR
// end ;
72494: LD_VAR 0 3
72498: RET
// export function IsDriver ( un ) ; begin
72499: LD_INT 0
72501: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
72502: LD_ADDR_VAR 0 2
72506: PUSH
72507: LD_VAR 0 1
72511: PUSH
72512: LD_INT 55
72514: PUSH
72515: EMPTY
72516: LIST
72517: PPUSH
72518: CALL_OW 69
72522: IN
72523: ST_TO_ADDR
// end ;
72524: LD_VAR 0 2
72528: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
72529: LD_INT 0
72531: PPUSH
72532: PPUSH
// list := [ ] ;
72533: LD_ADDR_VAR 0 5
72537: PUSH
72538: EMPTY
72539: ST_TO_ADDR
// case d of 0 :
72540: LD_VAR 0 3
72544: PUSH
72545: LD_INT 0
72547: DOUBLE
72548: EQUAL
72549: IFTRUE 72553
72551: GO 72686
72553: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
72554: LD_ADDR_VAR 0 5
72558: PUSH
72559: LD_VAR 0 1
72563: PUSH
72564: LD_INT 4
72566: MINUS
72567: PUSH
72568: LD_VAR 0 2
72572: PUSH
72573: LD_INT 4
72575: MINUS
72576: PUSH
72577: LD_INT 2
72579: PUSH
72580: EMPTY
72581: LIST
72582: LIST
72583: LIST
72584: PUSH
72585: LD_VAR 0 1
72589: PUSH
72590: LD_INT 3
72592: MINUS
72593: PUSH
72594: LD_VAR 0 2
72598: PUSH
72599: LD_INT 1
72601: PUSH
72602: EMPTY
72603: LIST
72604: LIST
72605: LIST
72606: PUSH
72607: LD_VAR 0 1
72611: PUSH
72612: LD_INT 4
72614: PLUS
72615: PUSH
72616: LD_VAR 0 2
72620: PUSH
72621: LD_INT 4
72623: PUSH
72624: EMPTY
72625: LIST
72626: LIST
72627: LIST
72628: PUSH
72629: LD_VAR 0 1
72633: PUSH
72634: LD_INT 3
72636: PLUS
72637: PUSH
72638: LD_VAR 0 2
72642: PUSH
72643: LD_INT 3
72645: PLUS
72646: PUSH
72647: LD_INT 5
72649: PUSH
72650: EMPTY
72651: LIST
72652: LIST
72653: LIST
72654: PUSH
72655: LD_VAR 0 1
72659: PUSH
72660: LD_VAR 0 2
72664: PUSH
72665: LD_INT 4
72667: PLUS
72668: PUSH
72669: LD_INT 0
72671: PUSH
72672: EMPTY
72673: LIST
72674: LIST
72675: LIST
72676: PUSH
72677: EMPTY
72678: LIST
72679: LIST
72680: LIST
72681: LIST
72682: LIST
72683: ST_TO_ADDR
// end ; 1 :
72684: GO 73384
72686: LD_INT 1
72688: DOUBLE
72689: EQUAL
72690: IFTRUE 72694
72692: GO 72827
72694: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
72695: LD_ADDR_VAR 0 5
72699: PUSH
72700: LD_VAR 0 1
72704: PUSH
72705: LD_VAR 0 2
72709: PUSH
72710: LD_INT 4
72712: MINUS
72713: PUSH
72714: LD_INT 3
72716: PUSH
72717: EMPTY
72718: LIST
72719: LIST
72720: LIST
72721: PUSH
72722: LD_VAR 0 1
72726: PUSH
72727: LD_INT 3
72729: MINUS
72730: PUSH
72731: LD_VAR 0 2
72735: PUSH
72736: LD_INT 3
72738: MINUS
72739: PUSH
72740: LD_INT 2
72742: PUSH
72743: EMPTY
72744: LIST
72745: LIST
72746: LIST
72747: PUSH
72748: LD_VAR 0 1
72752: PUSH
72753: LD_INT 4
72755: MINUS
72756: PUSH
72757: LD_VAR 0 2
72761: PUSH
72762: LD_INT 1
72764: PUSH
72765: EMPTY
72766: LIST
72767: LIST
72768: LIST
72769: PUSH
72770: LD_VAR 0 1
72774: PUSH
72775: LD_VAR 0 2
72779: PUSH
72780: LD_INT 3
72782: PLUS
72783: PUSH
72784: LD_INT 0
72786: PUSH
72787: EMPTY
72788: LIST
72789: LIST
72790: LIST
72791: PUSH
72792: LD_VAR 0 1
72796: PUSH
72797: LD_INT 4
72799: PLUS
72800: PUSH
72801: LD_VAR 0 2
72805: PUSH
72806: LD_INT 4
72808: PLUS
72809: PUSH
72810: LD_INT 5
72812: PUSH
72813: EMPTY
72814: LIST
72815: LIST
72816: LIST
72817: PUSH
72818: EMPTY
72819: LIST
72820: LIST
72821: LIST
72822: LIST
72823: LIST
72824: ST_TO_ADDR
// end ; 2 :
72825: GO 73384
72827: LD_INT 2
72829: DOUBLE
72830: EQUAL
72831: IFTRUE 72835
72833: GO 72964
72835: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72836: LD_ADDR_VAR 0 5
72840: PUSH
72841: LD_VAR 0 1
72845: PUSH
72846: LD_VAR 0 2
72850: PUSH
72851: LD_INT 3
72853: MINUS
72854: PUSH
72855: LD_INT 3
72857: PUSH
72858: EMPTY
72859: LIST
72860: LIST
72861: LIST
72862: PUSH
72863: LD_VAR 0 1
72867: PUSH
72868: LD_INT 4
72870: PLUS
72871: PUSH
72872: LD_VAR 0 2
72876: PUSH
72877: LD_INT 4
72879: PUSH
72880: EMPTY
72881: LIST
72882: LIST
72883: LIST
72884: PUSH
72885: LD_VAR 0 1
72889: PUSH
72890: LD_VAR 0 2
72894: PUSH
72895: LD_INT 4
72897: PLUS
72898: PUSH
72899: LD_INT 0
72901: PUSH
72902: EMPTY
72903: LIST
72904: LIST
72905: LIST
72906: PUSH
72907: LD_VAR 0 1
72911: PUSH
72912: LD_INT 3
72914: MINUS
72915: PUSH
72916: LD_VAR 0 2
72920: PUSH
72921: LD_INT 1
72923: PUSH
72924: EMPTY
72925: LIST
72926: LIST
72927: LIST
72928: PUSH
72929: LD_VAR 0 1
72933: PUSH
72934: LD_INT 4
72936: MINUS
72937: PUSH
72938: LD_VAR 0 2
72942: PUSH
72943: LD_INT 4
72945: MINUS
72946: PUSH
72947: LD_INT 2
72949: PUSH
72950: EMPTY
72951: LIST
72952: LIST
72953: LIST
72954: PUSH
72955: EMPTY
72956: LIST
72957: LIST
72958: LIST
72959: LIST
72960: LIST
72961: ST_TO_ADDR
// end ; 3 :
72962: GO 73384
72964: LD_INT 3
72966: DOUBLE
72967: EQUAL
72968: IFTRUE 72972
72970: GO 73105
72972: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72973: LD_ADDR_VAR 0 5
72977: PUSH
72978: LD_VAR 0 1
72982: PUSH
72983: LD_INT 3
72985: PLUS
72986: PUSH
72987: LD_VAR 0 2
72991: PUSH
72992: LD_INT 4
72994: PUSH
72995: EMPTY
72996: LIST
72997: LIST
72998: LIST
72999: PUSH
73000: LD_VAR 0 1
73004: PUSH
73005: LD_INT 4
73007: PLUS
73008: PUSH
73009: LD_VAR 0 2
73013: PUSH
73014: LD_INT 4
73016: PLUS
73017: PUSH
73018: LD_INT 5
73020: PUSH
73021: EMPTY
73022: LIST
73023: LIST
73024: LIST
73025: PUSH
73026: LD_VAR 0 1
73030: PUSH
73031: LD_INT 4
73033: MINUS
73034: PUSH
73035: LD_VAR 0 2
73039: PUSH
73040: LD_INT 1
73042: PUSH
73043: EMPTY
73044: LIST
73045: LIST
73046: LIST
73047: PUSH
73048: LD_VAR 0 1
73052: PUSH
73053: LD_VAR 0 2
73057: PUSH
73058: LD_INT 4
73060: MINUS
73061: PUSH
73062: LD_INT 3
73064: PUSH
73065: EMPTY
73066: LIST
73067: LIST
73068: LIST
73069: PUSH
73070: LD_VAR 0 1
73074: PUSH
73075: LD_INT 3
73077: MINUS
73078: PUSH
73079: LD_VAR 0 2
73083: PUSH
73084: LD_INT 3
73086: MINUS
73087: PUSH
73088: LD_INT 2
73090: PUSH
73091: EMPTY
73092: LIST
73093: LIST
73094: LIST
73095: PUSH
73096: EMPTY
73097: LIST
73098: LIST
73099: LIST
73100: LIST
73101: LIST
73102: ST_TO_ADDR
// end ; 4 :
73103: GO 73384
73105: LD_INT 4
73107: DOUBLE
73108: EQUAL
73109: IFTRUE 73113
73111: GO 73246
73113: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
73114: LD_ADDR_VAR 0 5
73118: PUSH
73119: LD_VAR 0 1
73123: PUSH
73124: LD_VAR 0 2
73128: PUSH
73129: LD_INT 4
73131: PLUS
73132: PUSH
73133: LD_INT 0
73135: PUSH
73136: EMPTY
73137: LIST
73138: LIST
73139: LIST
73140: PUSH
73141: LD_VAR 0 1
73145: PUSH
73146: LD_INT 3
73148: PLUS
73149: PUSH
73150: LD_VAR 0 2
73154: PUSH
73155: LD_INT 3
73157: PLUS
73158: PUSH
73159: LD_INT 5
73161: PUSH
73162: EMPTY
73163: LIST
73164: LIST
73165: LIST
73166: PUSH
73167: LD_VAR 0 1
73171: PUSH
73172: LD_INT 4
73174: PLUS
73175: PUSH
73176: LD_VAR 0 2
73180: PUSH
73181: LD_INT 4
73183: PUSH
73184: EMPTY
73185: LIST
73186: LIST
73187: LIST
73188: PUSH
73189: LD_VAR 0 1
73193: PUSH
73194: LD_VAR 0 2
73198: PUSH
73199: LD_INT 3
73201: MINUS
73202: PUSH
73203: LD_INT 3
73205: PUSH
73206: EMPTY
73207: LIST
73208: LIST
73209: LIST
73210: PUSH
73211: LD_VAR 0 1
73215: PUSH
73216: LD_INT 4
73218: MINUS
73219: PUSH
73220: LD_VAR 0 2
73224: PUSH
73225: LD_INT 4
73227: MINUS
73228: PUSH
73229: LD_INT 2
73231: PUSH
73232: EMPTY
73233: LIST
73234: LIST
73235: LIST
73236: PUSH
73237: EMPTY
73238: LIST
73239: LIST
73240: LIST
73241: LIST
73242: LIST
73243: ST_TO_ADDR
// end ; 5 :
73244: GO 73384
73246: LD_INT 5
73248: DOUBLE
73249: EQUAL
73250: IFTRUE 73254
73252: GO 73383
73254: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
73255: LD_ADDR_VAR 0 5
73259: PUSH
73260: LD_VAR 0 1
73264: PUSH
73265: LD_INT 4
73267: MINUS
73268: PUSH
73269: LD_VAR 0 2
73273: PUSH
73274: LD_INT 1
73276: PUSH
73277: EMPTY
73278: LIST
73279: LIST
73280: LIST
73281: PUSH
73282: LD_VAR 0 1
73286: PUSH
73287: LD_VAR 0 2
73291: PUSH
73292: LD_INT 4
73294: MINUS
73295: PUSH
73296: LD_INT 3
73298: PUSH
73299: EMPTY
73300: LIST
73301: LIST
73302: LIST
73303: PUSH
73304: LD_VAR 0 1
73308: PUSH
73309: LD_INT 4
73311: PLUS
73312: PUSH
73313: LD_VAR 0 2
73317: PUSH
73318: LD_INT 4
73320: PLUS
73321: PUSH
73322: LD_INT 5
73324: PUSH
73325: EMPTY
73326: LIST
73327: LIST
73328: LIST
73329: PUSH
73330: LD_VAR 0 1
73334: PUSH
73335: LD_INT 3
73337: PLUS
73338: PUSH
73339: LD_VAR 0 2
73343: PUSH
73344: LD_INT 4
73346: PUSH
73347: EMPTY
73348: LIST
73349: LIST
73350: LIST
73351: PUSH
73352: LD_VAR 0 1
73356: PUSH
73357: LD_VAR 0 2
73361: PUSH
73362: LD_INT 3
73364: PLUS
73365: PUSH
73366: LD_INT 0
73368: PUSH
73369: EMPTY
73370: LIST
73371: LIST
73372: LIST
73373: PUSH
73374: EMPTY
73375: LIST
73376: LIST
73377: LIST
73378: LIST
73379: LIST
73380: ST_TO_ADDR
// end ; end ;
73381: GO 73384
73383: POP
// result := list ;
73384: LD_ADDR_VAR 0 4
73388: PUSH
73389: LD_VAR 0 5
73393: ST_TO_ADDR
// end ;
73394: LD_VAR 0 4
73398: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
73399: LD_INT 0
73401: PPUSH
73402: PPUSH
73403: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
73404: LD_VAR 0 1
73408: NOT
73409: PUSH
73410: LD_VAR 0 2
73414: PUSH
73415: LD_INT 1
73417: PUSH
73418: LD_INT 2
73420: PUSH
73421: LD_INT 3
73423: PUSH
73424: LD_INT 4
73426: PUSH
73427: EMPTY
73428: LIST
73429: LIST
73430: LIST
73431: LIST
73432: IN
73433: NOT
73434: OR
73435: IFFALSE 73439
// exit ;
73437: GO 73531
// tmp := [ ] ;
73439: LD_ADDR_VAR 0 5
73443: PUSH
73444: EMPTY
73445: ST_TO_ADDR
// for i in units do
73446: LD_ADDR_VAR 0 4
73450: PUSH
73451: LD_VAR 0 1
73455: PUSH
73456: FOR_IN
73457: IFFALSE 73500
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
73459: LD_ADDR_VAR 0 5
73463: PUSH
73464: LD_VAR 0 5
73468: PPUSH
73469: LD_VAR 0 5
73473: PUSH
73474: LD_INT 1
73476: PLUS
73477: PPUSH
73478: LD_VAR 0 4
73482: PPUSH
73483: LD_VAR 0 2
73487: PPUSH
73488: CALL_OW 259
73492: PPUSH
73493: CALL_OW 2
73497: ST_TO_ADDR
73498: GO 73456
73500: POP
73501: POP
// if not tmp then
73502: LD_VAR 0 5
73506: NOT
73507: IFFALSE 73511
// exit ;
73509: GO 73531
// result := SortListByListDesc ( units , tmp ) ;
73511: LD_ADDR_VAR 0 3
73515: PUSH
73516: LD_VAR 0 1
73520: PPUSH
73521: LD_VAR 0 5
73525: PPUSH
73526: CALL_OW 77
73530: ST_TO_ADDR
// end ;
73531: LD_VAR 0 3
73535: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
73536: LD_INT 0
73538: PPUSH
73539: PPUSH
73540: PPUSH
// result := false ;
73541: LD_ADDR_VAR 0 3
73545: PUSH
73546: LD_INT 0
73548: ST_TO_ADDR
// x := GetX ( building ) ;
73549: LD_ADDR_VAR 0 4
73553: PUSH
73554: LD_VAR 0 2
73558: PPUSH
73559: CALL_OW 250
73563: ST_TO_ADDR
// y := GetY ( building ) ;
73564: LD_ADDR_VAR 0 5
73568: PUSH
73569: LD_VAR 0 2
73573: PPUSH
73574: CALL_OW 251
73578: ST_TO_ADDR
// if not building or not x or not y then
73579: LD_VAR 0 2
73583: NOT
73584: PUSH
73585: LD_VAR 0 4
73589: NOT
73590: OR
73591: PUSH
73592: LD_VAR 0 5
73596: NOT
73597: OR
73598: IFFALSE 73602
// exit ;
73600: GO 73694
// if GetTaskList ( unit ) then
73602: LD_VAR 0 1
73606: PPUSH
73607: CALL_OW 437
73611: IFFALSE 73694
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73613: LD_STRING e
73615: PUSH
73616: LD_VAR 0 1
73620: PPUSH
73621: CALL_OW 437
73625: PUSH
73626: LD_INT 1
73628: ARRAY
73629: PUSH
73630: LD_INT 1
73632: ARRAY
73633: EQUAL
73634: PUSH
73635: LD_VAR 0 4
73639: PUSH
73640: LD_VAR 0 1
73644: PPUSH
73645: CALL_OW 437
73649: PUSH
73650: LD_INT 1
73652: ARRAY
73653: PUSH
73654: LD_INT 2
73656: ARRAY
73657: EQUAL
73658: AND
73659: PUSH
73660: LD_VAR 0 5
73664: PUSH
73665: LD_VAR 0 1
73669: PPUSH
73670: CALL_OW 437
73674: PUSH
73675: LD_INT 1
73677: ARRAY
73678: PUSH
73679: LD_INT 3
73681: ARRAY
73682: EQUAL
73683: AND
73684: IFFALSE 73694
// result := true end ;
73686: LD_ADDR_VAR 0 3
73690: PUSH
73691: LD_INT 1
73693: ST_TO_ADDR
// end ;
73694: LD_VAR 0 3
73698: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
73699: LD_INT 0
73701: PPUSH
// result := false ;
73702: LD_ADDR_VAR 0 4
73706: PUSH
73707: LD_INT 0
73709: ST_TO_ADDR
// if GetTaskList ( unit ) then
73710: LD_VAR 0 1
73714: PPUSH
73715: CALL_OW 437
73719: IFFALSE 73802
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73721: LD_STRING M
73723: PUSH
73724: LD_VAR 0 1
73728: PPUSH
73729: CALL_OW 437
73733: PUSH
73734: LD_INT 1
73736: ARRAY
73737: PUSH
73738: LD_INT 1
73740: ARRAY
73741: EQUAL
73742: PUSH
73743: LD_VAR 0 2
73747: PUSH
73748: LD_VAR 0 1
73752: PPUSH
73753: CALL_OW 437
73757: PUSH
73758: LD_INT 1
73760: ARRAY
73761: PUSH
73762: LD_INT 2
73764: ARRAY
73765: EQUAL
73766: AND
73767: PUSH
73768: LD_VAR 0 3
73772: PUSH
73773: LD_VAR 0 1
73777: PPUSH
73778: CALL_OW 437
73782: PUSH
73783: LD_INT 1
73785: ARRAY
73786: PUSH
73787: LD_INT 3
73789: ARRAY
73790: EQUAL
73791: AND
73792: IFFALSE 73802
// result := true ;
73794: LD_ADDR_VAR 0 4
73798: PUSH
73799: LD_INT 1
73801: ST_TO_ADDR
// end ; end ;
73802: LD_VAR 0 4
73806: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73807: LD_INT 0
73809: PPUSH
73810: PPUSH
73811: PPUSH
73812: PPUSH
// if not unit or not area then
73813: LD_VAR 0 1
73817: NOT
73818: PUSH
73819: LD_VAR 0 2
73823: NOT
73824: OR
73825: IFFALSE 73829
// exit ;
73827: GO 73993
// tmp := AreaToList ( area , i ) ;
73829: LD_ADDR_VAR 0 6
73833: PUSH
73834: LD_VAR 0 2
73838: PPUSH
73839: LD_VAR 0 5
73843: PPUSH
73844: CALL_OW 517
73848: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73849: LD_ADDR_VAR 0 5
73853: PUSH
73854: DOUBLE
73855: LD_INT 1
73857: DEC
73858: ST_TO_ADDR
73859: LD_VAR 0 6
73863: PUSH
73864: LD_INT 1
73866: ARRAY
73867: PUSH
73868: FOR_TO
73869: IFFALSE 73991
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73871: LD_ADDR_VAR 0 7
73875: PUSH
73876: LD_VAR 0 6
73880: PUSH
73881: LD_INT 1
73883: ARRAY
73884: PUSH
73885: LD_VAR 0 5
73889: ARRAY
73890: PUSH
73891: LD_VAR 0 6
73895: PUSH
73896: LD_INT 2
73898: ARRAY
73899: PUSH
73900: LD_VAR 0 5
73904: ARRAY
73905: PUSH
73906: EMPTY
73907: LIST
73908: LIST
73909: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
73910: LD_VAR 0 7
73914: PUSH
73915: LD_INT 1
73917: ARRAY
73918: PPUSH
73919: LD_VAR 0 7
73923: PUSH
73924: LD_INT 2
73926: ARRAY
73927: PPUSH
73928: CALL_OW 428
73932: PUSH
73933: LD_INT 0
73935: EQUAL
73936: IFFALSE 73989
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73938: LD_VAR 0 1
73942: PPUSH
73943: LD_VAR 0 7
73947: PUSH
73948: LD_INT 1
73950: ARRAY
73951: PPUSH
73952: LD_VAR 0 7
73956: PUSH
73957: LD_INT 2
73959: ARRAY
73960: PPUSH
73961: LD_VAR 0 3
73965: PPUSH
73966: CALL_OW 48
// result := IsPlaced ( unit ) ;
73970: LD_ADDR_VAR 0 4
73974: PUSH
73975: LD_VAR 0 1
73979: PPUSH
73980: CALL_OW 305
73984: ST_TO_ADDR
// exit ;
73985: POP
73986: POP
73987: GO 73993
// end ; end ;
73989: GO 73868
73991: POP
73992: POP
// end ;
73993: LD_VAR 0 4
73997: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73998: LD_INT 0
74000: PPUSH
74001: PPUSH
74002: PPUSH
// if not side or side > 8 then
74003: LD_VAR 0 1
74007: NOT
74008: PUSH
74009: LD_VAR 0 1
74013: PUSH
74014: LD_INT 8
74016: GREATER
74017: OR
74018: IFFALSE 74022
// exit ;
74020: GO 74209
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
74022: LD_ADDR_VAR 0 4
74026: PUSH
74027: LD_INT 22
74029: PUSH
74030: LD_VAR 0 1
74034: PUSH
74035: EMPTY
74036: LIST
74037: LIST
74038: PUSH
74039: LD_INT 21
74041: PUSH
74042: LD_INT 3
74044: PUSH
74045: EMPTY
74046: LIST
74047: LIST
74048: PUSH
74049: EMPTY
74050: LIST
74051: LIST
74052: PPUSH
74053: CALL_OW 69
74057: ST_TO_ADDR
// if not tmp then
74058: LD_VAR 0 4
74062: NOT
74063: IFFALSE 74067
// exit ;
74065: GO 74209
// enable_addtolog := true ;
74067: LD_ADDR_OWVAR 81
74071: PUSH
74072: LD_INT 1
74074: ST_TO_ADDR
// AddToLog ( [ ) ;
74075: LD_STRING [
74077: PPUSH
74078: CALL_OW 561
// for i in tmp do
74082: LD_ADDR_VAR 0 3
74086: PUSH
74087: LD_VAR 0 4
74091: PUSH
74092: FOR_IN
74093: IFFALSE 74200
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
74095: LD_STRING [
74097: PUSH
74098: LD_VAR 0 3
74102: PPUSH
74103: CALL_OW 266
74107: STR
74108: PUSH
74109: LD_STRING , 
74111: STR
74112: PUSH
74113: LD_VAR 0 3
74117: PPUSH
74118: CALL_OW 250
74122: STR
74123: PUSH
74124: LD_STRING , 
74126: STR
74127: PUSH
74128: LD_VAR 0 3
74132: PPUSH
74133: CALL_OW 251
74137: STR
74138: PUSH
74139: LD_STRING , 
74141: STR
74142: PUSH
74143: LD_VAR 0 3
74147: PPUSH
74148: CALL_OW 254
74152: STR
74153: PUSH
74154: LD_STRING , 
74156: STR
74157: PUSH
74158: LD_VAR 0 3
74162: PPUSH
74163: LD_INT 1
74165: PPUSH
74166: CALL_OW 268
74170: STR
74171: PUSH
74172: LD_STRING , 
74174: STR
74175: PUSH
74176: LD_VAR 0 3
74180: PPUSH
74181: LD_INT 2
74183: PPUSH
74184: CALL_OW 268
74188: STR
74189: PUSH
74190: LD_STRING ],
74192: STR
74193: PPUSH
74194: CALL_OW 561
// end ;
74198: GO 74092
74200: POP
74201: POP
// AddToLog ( ]; ) ;
74202: LD_STRING ];
74204: PPUSH
74205: CALL_OW 561
// end ;
74209: LD_VAR 0 2
74213: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
74214: LD_INT 0
74216: PPUSH
74217: PPUSH
74218: PPUSH
74219: PPUSH
74220: PPUSH
// if not area or not rate or not max then
74221: LD_VAR 0 1
74225: NOT
74226: PUSH
74227: LD_VAR 0 2
74231: NOT
74232: OR
74233: PUSH
74234: LD_VAR 0 4
74238: NOT
74239: OR
74240: IFFALSE 74244
// exit ;
74242: GO 74433
// while 1 do
74244: LD_INT 1
74246: IFFALSE 74433
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
74248: LD_ADDR_VAR 0 9
74252: PUSH
74253: LD_VAR 0 1
74257: PPUSH
74258: LD_INT 1
74260: PPUSH
74261: CALL_OW 287
74265: PUSH
74266: LD_INT 10
74268: MUL
74269: ST_TO_ADDR
// r := rate / 10 ;
74270: LD_ADDR_VAR 0 7
74274: PUSH
74275: LD_VAR 0 2
74279: PUSH
74280: LD_INT 10
74282: DIVREAL
74283: ST_TO_ADDR
// time := 1 1$00 ;
74284: LD_ADDR_VAR 0 8
74288: PUSH
74289: LD_INT 2100
74291: ST_TO_ADDR
// if amount < min then
74292: LD_VAR 0 9
74296: PUSH
74297: LD_VAR 0 3
74301: LESS
74302: IFFALSE 74320
// r := r * 2 else
74304: LD_ADDR_VAR 0 7
74308: PUSH
74309: LD_VAR 0 7
74313: PUSH
74314: LD_INT 2
74316: MUL
74317: ST_TO_ADDR
74318: GO 74346
// if amount > max then
74320: LD_VAR 0 9
74324: PUSH
74325: LD_VAR 0 4
74329: GREATER
74330: IFFALSE 74346
// r := r / 2 ;
74332: LD_ADDR_VAR 0 7
74336: PUSH
74337: LD_VAR 0 7
74341: PUSH
74342: LD_INT 2
74344: DIVREAL
74345: ST_TO_ADDR
// time := time / r ;
74346: LD_ADDR_VAR 0 8
74350: PUSH
74351: LD_VAR 0 8
74355: PUSH
74356: LD_VAR 0 7
74360: DIVREAL
74361: ST_TO_ADDR
// if time < 0 then
74362: LD_VAR 0 8
74366: PUSH
74367: LD_INT 0
74369: LESS
74370: IFFALSE 74387
// time := time * - 1 ;
74372: LD_ADDR_VAR 0 8
74376: PUSH
74377: LD_VAR 0 8
74381: PUSH
74382: LD_INT 1
74384: NEG
74385: MUL
74386: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
74387: LD_VAR 0 8
74391: PUSH
74392: LD_INT 35
74394: PPUSH
74395: LD_INT 875
74397: PPUSH
74398: CALL_OW 12
74402: PLUS
74403: PPUSH
74404: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
74408: LD_INT 1
74410: PPUSH
74411: LD_INT 5
74413: PPUSH
74414: CALL_OW 12
74418: PPUSH
74419: LD_VAR 0 1
74423: PPUSH
74424: LD_INT 1
74426: PPUSH
74427: CALL_OW 55
// end ;
74431: GO 74244
// end ;
74433: LD_VAR 0 5
74437: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
74438: LD_INT 0
74440: PPUSH
74441: PPUSH
74442: PPUSH
74443: PPUSH
74444: PPUSH
74445: PPUSH
74446: PPUSH
74447: PPUSH
// if not turrets or not factories then
74448: LD_VAR 0 1
74452: NOT
74453: PUSH
74454: LD_VAR 0 2
74458: NOT
74459: OR
74460: IFFALSE 74464
// exit ;
74462: GO 74771
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
74464: LD_ADDR_VAR 0 10
74468: PUSH
74469: LD_INT 5
74471: PUSH
74472: LD_INT 6
74474: PUSH
74475: EMPTY
74476: LIST
74477: LIST
74478: PUSH
74479: LD_INT 2
74481: PUSH
74482: LD_INT 4
74484: PUSH
74485: EMPTY
74486: LIST
74487: LIST
74488: PUSH
74489: LD_INT 3
74491: PUSH
74492: LD_INT 5
74494: PUSH
74495: EMPTY
74496: LIST
74497: LIST
74498: PUSH
74499: EMPTY
74500: LIST
74501: LIST
74502: LIST
74503: PUSH
74504: LD_INT 24
74506: PUSH
74507: LD_INT 25
74509: PUSH
74510: EMPTY
74511: LIST
74512: LIST
74513: PUSH
74514: LD_INT 23
74516: PUSH
74517: LD_INT 27
74519: PUSH
74520: EMPTY
74521: LIST
74522: LIST
74523: PUSH
74524: EMPTY
74525: LIST
74526: LIST
74527: PUSH
74528: LD_INT 42
74530: PUSH
74531: LD_INT 43
74533: PUSH
74534: EMPTY
74535: LIST
74536: LIST
74537: PUSH
74538: LD_INT 44
74540: PUSH
74541: LD_INT 46
74543: PUSH
74544: EMPTY
74545: LIST
74546: LIST
74547: PUSH
74548: LD_INT 45
74550: PUSH
74551: LD_INT 47
74553: PUSH
74554: EMPTY
74555: LIST
74556: LIST
74557: PUSH
74558: EMPTY
74559: LIST
74560: LIST
74561: LIST
74562: PUSH
74563: EMPTY
74564: LIST
74565: LIST
74566: LIST
74567: ST_TO_ADDR
// result := [ ] ;
74568: LD_ADDR_VAR 0 3
74572: PUSH
74573: EMPTY
74574: ST_TO_ADDR
// for i in turrets do
74575: LD_ADDR_VAR 0 4
74579: PUSH
74580: LD_VAR 0 1
74584: PUSH
74585: FOR_IN
74586: IFFALSE 74769
// begin nat := GetNation ( i ) ;
74588: LD_ADDR_VAR 0 7
74592: PUSH
74593: LD_VAR 0 4
74597: PPUSH
74598: CALL_OW 248
74602: ST_TO_ADDR
// weapon := 0 ;
74603: LD_ADDR_VAR 0 8
74607: PUSH
74608: LD_INT 0
74610: ST_TO_ADDR
// if not nat then
74611: LD_VAR 0 7
74615: NOT
74616: IFFALSE 74620
// continue ;
74618: GO 74585
// for j in list [ nat ] do
74620: LD_ADDR_VAR 0 5
74624: PUSH
74625: LD_VAR 0 10
74629: PUSH
74630: LD_VAR 0 7
74634: ARRAY
74635: PUSH
74636: FOR_IN
74637: IFFALSE 74678
// if GetBWeapon ( i ) = j [ 1 ] then
74639: LD_VAR 0 4
74643: PPUSH
74644: CALL_OW 269
74648: PUSH
74649: LD_VAR 0 5
74653: PUSH
74654: LD_INT 1
74656: ARRAY
74657: EQUAL
74658: IFFALSE 74676
// begin weapon := j [ 2 ] ;
74660: LD_ADDR_VAR 0 8
74664: PUSH
74665: LD_VAR 0 5
74669: PUSH
74670: LD_INT 2
74672: ARRAY
74673: ST_TO_ADDR
// break ;
74674: GO 74678
// end ;
74676: GO 74636
74678: POP
74679: POP
// if not weapon then
74680: LD_VAR 0 8
74684: NOT
74685: IFFALSE 74689
// continue ;
74687: GO 74585
// for k in factories do
74689: LD_ADDR_VAR 0 6
74693: PUSH
74694: LD_VAR 0 2
74698: PUSH
74699: FOR_IN
74700: IFFALSE 74765
// begin weapons := AvailableWeaponList ( k ) ;
74702: LD_ADDR_VAR 0 9
74706: PUSH
74707: LD_VAR 0 6
74711: PPUSH
74712: CALL_OW 478
74716: ST_TO_ADDR
// if not weapons then
74717: LD_VAR 0 9
74721: NOT
74722: IFFALSE 74726
// continue ;
74724: GO 74699
// if weapon in weapons then
74726: LD_VAR 0 8
74730: PUSH
74731: LD_VAR 0 9
74735: IN
74736: IFFALSE 74763
// begin result := [ i , weapon ] ;
74738: LD_ADDR_VAR 0 3
74742: PUSH
74743: LD_VAR 0 4
74747: PUSH
74748: LD_VAR 0 8
74752: PUSH
74753: EMPTY
74754: LIST
74755: LIST
74756: ST_TO_ADDR
// exit ;
74757: POP
74758: POP
74759: POP
74760: POP
74761: GO 74771
// end ; end ;
74763: GO 74699
74765: POP
74766: POP
// end ;
74767: GO 74585
74769: POP
74770: POP
// end ;
74771: LD_VAR 0 3
74775: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
74776: LD_INT 0
74778: PPUSH
// if not side or side > 8 then
74779: LD_VAR 0 3
74783: NOT
74784: PUSH
74785: LD_VAR 0 3
74789: PUSH
74790: LD_INT 8
74792: GREATER
74793: OR
74794: IFFALSE 74798
// exit ;
74796: GO 74857
// if not range then
74798: LD_VAR 0 4
74802: NOT
74803: IFFALSE 74814
// range := - 12 ;
74805: LD_ADDR_VAR 0 4
74809: PUSH
74810: LD_INT 12
74812: NEG
74813: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74814: LD_VAR 0 1
74818: PPUSH
74819: LD_VAR 0 2
74823: PPUSH
74824: LD_VAR 0 3
74828: PPUSH
74829: LD_VAR 0 4
74833: PPUSH
74834: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74838: LD_VAR 0 1
74842: PPUSH
74843: LD_VAR 0 2
74847: PPUSH
74848: LD_VAR 0 3
74852: PPUSH
74853: CALL_OW 331
// end ;
74857: LD_VAR 0 5
74861: RET
// export function Video ( mode ) ; begin
74862: LD_INT 0
74864: PPUSH
// ingame_video = mode ;
74865: LD_ADDR_OWVAR 52
74869: PUSH
74870: LD_VAR 0 1
74874: ST_TO_ADDR
// interface_hidden = mode ;
74875: LD_ADDR_OWVAR 54
74879: PUSH
74880: LD_VAR 0 1
74884: ST_TO_ADDR
// end ;
74885: LD_VAR 0 2
74889: RET
// export function Join ( array , element ) ; begin
74890: LD_INT 0
74892: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74893: LD_ADDR_VAR 0 3
74897: PUSH
74898: LD_VAR 0 1
74902: PPUSH
74903: LD_VAR 0 1
74907: PUSH
74908: LD_INT 1
74910: PLUS
74911: PPUSH
74912: LD_VAR 0 2
74916: PPUSH
74917: CALL_OW 1
74921: ST_TO_ADDR
// end ;
74922: LD_VAR 0 3
74926: RET
// export function JoinUnion ( array , element ) ; begin
74927: LD_INT 0
74929: PPUSH
// result := array union element ;
74930: LD_ADDR_VAR 0 3
74934: PUSH
74935: LD_VAR 0 1
74939: PUSH
74940: LD_VAR 0 2
74944: UNION
74945: ST_TO_ADDR
// end ;
74946: LD_VAR 0 3
74950: RET
// export function GetBehemoths ( side ) ; begin
74951: LD_INT 0
74953: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
74954: LD_ADDR_VAR 0 2
74958: PUSH
74959: LD_INT 22
74961: PUSH
74962: LD_VAR 0 1
74966: PUSH
74967: EMPTY
74968: LIST
74969: LIST
74970: PUSH
74971: LD_INT 31
74973: PUSH
74974: LD_INT 25
74976: PUSH
74977: EMPTY
74978: LIST
74979: LIST
74980: PUSH
74981: EMPTY
74982: LIST
74983: LIST
74984: PPUSH
74985: CALL_OW 69
74989: ST_TO_ADDR
// end ;
74990: LD_VAR 0 2
74994: RET
// export function Shuffle ( array ) ; var i , index ; begin
74995: LD_INT 0
74997: PPUSH
74998: PPUSH
74999: PPUSH
// result := [ ] ;
75000: LD_ADDR_VAR 0 2
75004: PUSH
75005: EMPTY
75006: ST_TO_ADDR
// if not array then
75007: LD_VAR 0 1
75011: NOT
75012: IFFALSE 75016
// exit ;
75014: GO 75115
// Randomize ;
75016: CALL_OW 10
// for i = array downto 1 do
75020: LD_ADDR_VAR 0 3
75024: PUSH
75025: DOUBLE
75026: LD_VAR 0 1
75030: INC
75031: ST_TO_ADDR
75032: LD_INT 1
75034: PUSH
75035: FOR_DOWNTO
75036: IFFALSE 75113
// begin index := rand ( 1 , array ) ;
75038: LD_ADDR_VAR 0 4
75042: PUSH
75043: LD_INT 1
75045: PPUSH
75046: LD_VAR 0 1
75050: PPUSH
75051: CALL_OW 12
75055: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
75056: LD_ADDR_VAR 0 2
75060: PUSH
75061: LD_VAR 0 2
75065: PPUSH
75066: LD_VAR 0 2
75070: PUSH
75071: LD_INT 1
75073: PLUS
75074: PPUSH
75075: LD_VAR 0 1
75079: PUSH
75080: LD_VAR 0 4
75084: ARRAY
75085: PPUSH
75086: CALL_OW 2
75090: ST_TO_ADDR
// array := Delete ( array , index ) ;
75091: LD_ADDR_VAR 0 1
75095: PUSH
75096: LD_VAR 0 1
75100: PPUSH
75101: LD_VAR 0 4
75105: PPUSH
75106: CALL_OW 3
75110: ST_TO_ADDR
// end ;
75111: GO 75035
75113: POP
75114: POP
// end ;
75115: LD_VAR 0 2
75119: RET
// export function GetBaseMaterials ( base ) ; begin
75120: LD_INT 0
75122: PPUSH
// result := [ 0 , 0 , 0 ] ;
75123: LD_ADDR_VAR 0 2
75127: PUSH
75128: LD_INT 0
75130: PUSH
75131: LD_INT 0
75133: PUSH
75134: LD_INT 0
75136: PUSH
75137: EMPTY
75138: LIST
75139: LIST
75140: LIST
75141: ST_TO_ADDR
// if not base then
75142: LD_VAR 0 1
75146: NOT
75147: IFFALSE 75151
// exit ;
75149: GO 75200
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
75151: LD_ADDR_VAR 0 2
75155: PUSH
75156: LD_VAR 0 1
75160: PPUSH
75161: LD_INT 1
75163: PPUSH
75164: CALL_OW 275
75168: PUSH
75169: LD_VAR 0 1
75173: PPUSH
75174: LD_INT 2
75176: PPUSH
75177: CALL_OW 275
75181: PUSH
75182: LD_VAR 0 1
75186: PPUSH
75187: LD_INT 3
75189: PPUSH
75190: CALL_OW 275
75194: PUSH
75195: EMPTY
75196: LIST
75197: LIST
75198: LIST
75199: ST_TO_ADDR
// end ;
75200: LD_VAR 0 2
75204: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
75205: LD_INT 0
75207: PPUSH
75208: PPUSH
// result := array ;
75209: LD_ADDR_VAR 0 3
75213: PUSH
75214: LD_VAR 0 1
75218: ST_TO_ADDR
// if size > 0 then
75219: LD_VAR 0 2
75223: PUSH
75224: LD_INT 0
75226: GREATER
75227: IFFALSE 75273
// for i := array downto size do
75229: LD_ADDR_VAR 0 4
75233: PUSH
75234: DOUBLE
75235: LD_VAR 0 1
75239: INC
75240: ST_TO_ADDR
75241: LD_VAR 0 2
75245: PUSH
75246: FOR_DOWNTO
75247: IFFALSE 75271
// result := Delete ( result , result ) ;
75249: LD_ADDR_VAR 0 3
75253: PUSH
75254: LD_VAR 0 3
75258: PPUSH
75259: LD_VAR 0 3
75263: PPUSH
75264: CALL_OW 3
75268: ST_TO_ADDR
75269: GO 75246
75271: POP
75272: POP
// end ;
75273: LD_VAR 0 3
75277: RET
// export function ComExit ( unit ) ; var tmp ; begin
75278: LD_INT 0
75280: PPUSH
75281: PPUSH
// if not IsInUnit ( unit ) then
75282: LD_VAR 0 1
75286: PPUSH
75287: CALL_OW 310
75291: NOT
75292: IFFALSE 75296
// exit ;
75294: GO 75356
// tmp := IsInUnit ( unit ) ;
75296: LD_ADDR_VAR 0 3
75300: PUSH
75301: LD_VAR 0 1
75305: PPUSH
75306: CALL_OW 310
75310: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
75311: LD_VAR 0 3
75315: PPUSH
75316: CALL_OW 247
75320: PUSH
75321: LD_INT 2
75323: EQUAL
75324: IFFALSE 75337
// ComExitVehicle ( unit ) else
75326: LD_VAR 0 1
75330: PPUSH
75331: CALL_OW 121
75335: GO 75346
// ComExitBuilding ( unit ) ;
75337: LD_VAR 0 1
75341: PPUSH
75342: CALL_OW 122
// result := tmp ;
75346: LD_ADDR_VAR 0 2
75350: PUSH
75351: LD_VAR 0 3
75355: ST_TO_ADDR
// end ;
75356: LD_VAR 0 2
75360: RET
// export function ComExitAll ( units ) ; var i ; begin
75361: LD_INT 0
75363: PPUSH
75364: PPUSH
// if not units then
75365: LD_VAR 0 1
75369: NOT
75370: IFFALSE 75374
// exit ;
75372: GO 75400
// for i in units do
75374: LD_ADDR_VAR 0 3
75378: PUSH
75379: LD_VAR 0 1
75383: PUSH
75384: FOR_IN
75385: IFFALSE 75398
// ComExit ( i ) ;
75387: LD_VAR 0 3
75391: PPUSH
75392: CALL 75278 0 1
75396: GO 75384
75398: POP
75399: POP
// end ;
75400: LD_VAR 0 2
75404: RET
// export function ResetHc ; begin
75405: LD_INT 0
75407: PPUSH
// InitHc ;
75408: CALL_OW 19
// hc_importance := 0 ;
75412: LD_ADDR_OWVAR 32
75416: PUSH
75417: LD_INT 0
75419: ST_TO_ADDR
// end ;
75420: LD_VAR 0 1
75424: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
75425: LD_INT 0
75427: PPUSH
75428: PPUSH
75429: PPUSH
// _x := ( x1 + x2 ) div 2 ;
75430: LD_ADDR_VAR 0 6
75434: PUSH
75435: LD_VAR 0 1
75439: PUSH
75440: LD_VAR 0 3
75444: PLUS
75445: PUSH
75446: LD_INT 2
75448: DIV
75449: ST_TO_ADDR
// if _x < 0 then
75450: LD_VAR 0 6
75454: PUSH
75455: LD_INT 0
75457: LESS
75458: IFFALSE 75475
// _x := _x * - 1 ;
75460: LD_ADDR_VAR 0 6
75464: PUSH
75465: LD_VAR 0 6
75469: PUSH
75470: LD_INT 1
75472: NEG
75473: MUL
75474: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
75475: LD_ADDR_VAR 0 7
75479: PUSH
75480: LD_VAR 0 2
75484: PUSH
75485: LD_VAR 0 4
75489: PLUS
75490: PUSH
75491: LD_INT 2
75493: DIV
75494: ST_TO_ADDR
// if _y < 0 then
75495: LD_VAR 0 7
75499: PUSH
75500: LD_INT 0
75502: LESS
75503: IFFALSE 75520
// _y := _y * - 1 ;
75505: LD_ADDR_VAR 0 7
75509: PUSH
75510: LD_VAR 0 7
75514: PUSH
75515: LD_INT 1
75517: NEG
75518: MUL
75519: ST_TO_ADDR
// result := [ _x , _y ] ;
75520: LD_ADDR_VAR 0 5
75524: PUSH
75525: LD_VAR 0 6
75529: PUSH
75530: LD_VAR 0 7
75534: PUSH
75535: EMPTY
75536: LIST
75537: LIST
75538: ST_TO_ADDR
// end ;
75539: LD_VAR 0 5
75543: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
75544: LD_INT 0
75546: PPUSH
75547: PPUSH
75548: PPUSH
75549: PPUSH
// task := GetTaskList ( unit ) ;
75550: LD_ADDR_VAR 0 7
75554: PUSH
75555: LD_VAR 0 1
75559: PPUSH
75560: CALL_OW 437
75564: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
75565: LD_VAR 0 7
75569: NOT
75570: PUSH
75571: LD_VAR 0 1
75575: PPUSH
75576: LD_VAR 0 2
75580: PPUSH
75581: CALL_OW 308
75585: NOT
75586: AND
75587: IFFALSE 75591
// exit ;
75589: GO 75709
// if IsInArea ( unit , area ) then
75591: LD_VAR 0 1
75595: PPUSH
75596: LD_VAR 0 2
75600: PPUSH
75601: CALL_OW 308
75605: IFFALSE 75623
// begin ComMoveToArea ( unit , goAway ) ;
75607: LD_VAR 0 1
75611: PPUSH
75612: LD_VAR 0 3
75616: PPUSH
75617: CALL_OW 113
// exit ;
75621: GO 75709
// end ; if task [ 1 ] [ 1 ] <> M then
75623: LD_VAR 0 7
75627: PUSH
75628: LD_INT 1
75630: ARRAY
75631: PUSH
75632: LD_INT 1
75634: ARRAY
75635: PUSH
75636: LD_STRING M
75638: NONEQUAL
75639: IFFALSE 75643
// exit ;
75641: GO 75709
// x := task [ 1 ] [ 2 ] ;
75643: LD_ADDR_VAR 0 5
75647: PUSH
75648: LD_VAR 0 7
75652: PUSH
75653: LD_INT 1
75655: ARRAY
75656: PUSH
75657: LD_INT 2
75659: ARRAY
75660: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
75661: LD_ADDR_VAR 0 6
75665: PUSH
75666: LD_VAR 0 7
75670: PUSH
75671: LD_INT 1
75673: ARRAY
75674: PUSH
75675: LD_INT 3
75677: ARRAY
75678: ST_TO_ADDR
// if InArea ( x , y , area ) then
75679: LD_VAR 0 5
75683: PPUSH
75684: LD_VAR 0 6
75688: PPUSH
75689: LD_VAR 0 2
75693: PPUSH
75694: CALL_OW 309
75698: IFFALSE 75709
// ComStop ( unit ) ;
75700: LD_VAR 0 1
75704: PPUSH
75705: CALL_OW 141
// end ;
75709: LD_VAR 0 4
75713: RET
// export function Abs ( value ) ; begin
75714: LD_INT 0
75716: PPUSH
// result := value ;
75717: LD_ADDR_VAR 0 2
75721: PUSH
75722: LD_VAR 0 1
75726: ST_TO_ADDR
// if value < 0 then
75727: LD_VAR 0 1
75731: PUSH
75732: LD_INT 0
75734: LESS
75735: IFFALSE 75752
// result := value * - 1 ;
75737: LD_ADDR_VAR 0 2
75741: PUSH
75742: LD_VAR 0 1
75746: PUSH
75747: LD_INT 1
75749: NEG
75750: MUL
75751: ST_TO_ADDR
// end ;
75752: LD_VAR 0 2
75756: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
75757: LD_INT 0
75759: PPUSH
75760: PPUSH
75761: PPUSH
75762: PPUSH
75763: PPUSH
75764: PPUSH
75765: PPUSH
75766: PPUSH
// if not unit or not building then
75767: LD_VAR 0 1
75771: NOT
75772: PUSH
75773: LD_VAR 0 2
75777: NOT
75778: OR
75779: IFFALSE 75783
// exit ;
75781: GO 76009
// x := GetX ( building ) ;
75783: LD_ADDR_VAR 0 4
75787: PUSH
75788: LD_VAR 0 2
75792: PPUSH
75793: CALL_OW 250
75797: ST_TO_ADDR
// y := GetY ( building ) ;
75798: LD_ADDR_VAR 0 6
75802: PUSH
75803: LD_VAR 0 2
75807: PPUSH
75808: CALL_OW 251
75812: ST_TO_ADDR
// d := GetDir ( building ) ;
75813: LD_ADDR_VAR 0 8
75817: PUSH
75818: LD_VAR 0 2
75822: PPUSH
75823: CALL_OW 254
75827: ST_TO_ADDR
// r := 4 ;
75828: LD_ADDR_VAR 0 9
75832: PUSH
75833: LD_INT 4
75835: ST_TO_ADDR
// for i := 1 to 5 do
75836: LD_ADDR_VAR 0 10
75840: PUSH
75841: DOUBLE
75842: LD_INT 1
75844: DEC
75845: ST_TO_ADDR
75846: LD_INT 5
75848: PUSH
75849: FOR_TO
75850: IFFALSE 76007
// begin _x := ShiftX ( x , d , r + i ) ;
75852: LD_ADDR_VAR 0 5
75856: PUSH
75857: LD_VAR 0 4
75861: PPUSH
75862: LD_VAR 0 8
75866: PPUSH
75867: LD_VAR 0 9
75871: PUSH
75872: LD_VAR 0 10
75876: PLUS
75877: PPUSH
75878: CALL_OW 272
75882: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75883: LD_ADDR_VAR 0 7
75887: PUSH
75888: LD_VAR 0 6
75892: PPUSH
75893: LD_VAR 0 8
75897: PPUSH
75898: LD_VAR 0 9
75902: PUSH
75903: LD_VAR 0 10
75907: PLUS
75908: PPUSH
75909: CALL_OW 273
75913: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75914: LD_VAR 0 5
75918: PPUSH
75919: LD_VAR 0 7
75923: PPUSH
75924: CALL_OW 488
75928: PUSH
75929: LD_VAR 0 5
75933: PPUSH
75934: LD_VAR 0 7
75938: PPUSH
75939: CALL_OW 428
75943: PPUSH
75944: CALL_OW 247
75948: PUSH
75949: LD_INT 3
75951: PUSH
75952: LD_INT 2
75954: PUSH
75955: EMPTY
75956: LIST
75957: LIST
75958: IN
75959: NOT
75960: AND
75961: IFFALSE 76005
// begin ComMoveXY ( unit , _x , _y ) ;
75963: LD_VAR 0 1
75967: PPUSH
75968: LD_VAR 0 5
75972: PPUSH
75973: LD_VAR 0 7
75977: PPUSH
75978: CALL_OW 111
// result := [ _x , _y ] ;
75982: LD_ADDR_VAR 0 3
75986: PUSH
75987: LD_VAR 0 5
75991: PUSH
75992: LD_VAR 0 7
75996: PUSH
75997: EMPTY
75998: LIST
75999: LIST
76000: ST_TO_ADDR
// exit ;
76001: POP
76002: POP
76003: GO 76009
// end ; end ;
76005: GO 75849
76007: POP
76008: POP
// end ;
76009: LD_VAR 0 3
76013: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
76014: LD_INT 0
76016: PPUSH
76017: PPUSH
76018: PPUSH
// result := 0 ;
76019: LD_ADDR_VAR 0 3
76023: PUSH
76024: LD_INT 0
76026: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
76027: LD_VAR 0 1
76031: PUSH
76032: LD_INT 0
76034: LESS
76035: PUSH
76036: LD_VAR 0 1
76040: PUSH
76041: LD_INT 8
76043: GREATER
76044: OR
76045: PUSH
76046: LD_VAR 0 2
76050: PUSH
76051: LD_INT 0
76053: LESS
76054: OR
76055: PUSH
76056: LD_VAR 0 2
76060: PUSH
76061: LD_INT 8
76063: GREATER
76064: OR
76065: IFFALSE 76069
// exit ;
76067: GO 76144
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
76069: LD_ADDR_VAR 0 4
76073: PUSH
76074: LD_INT 22
76076: PUSH
76077: LD_VAR 0 2
76081: PUSH
76082: EMPTY
76083: LIST
76084: LIST
76085: PPUSH
76086: CALL_OW 69
76090: PUSH
76091: FOR_IN
76092: IFFALSE 76142
// begin un := UnitShoot ( i ) ;
76094: LD_ADDR_VAR 0 5
76098: PUSH
76099: LD_VAR 0 4
76103: PPUSH
76104: CALL_OW 504
76108: ST_TO_ADDR
// if GetSide ( un ) = side1 then
76109: LD_VAR 0 5
76113: PPUSH
76114: CALL_OW 255
76118: PUSH
76119: LD_VAR 0 1
76123: EQUAL
76124: IFFALSE 76140
// begin result := un ;
76126: LD_ADDR_VAR 0 3
76130: PUSH
76131: LD_VAR 0 5
76135: ST_TO_ADDR
// exit ;
76136: POP
76137: POP
76138: GO 76144
// end ; end ;
76140: GO 76091
76142: POP
76143: POP
// end ;
76144: LD_VAR 0 3
76148: RET
// export function GetCargoBay ( units ) ; begin
76149: LD_INT 0
76151: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
76152: LD_ADDR_VAR 0 2
76156: PUSH
76157: LD_VAR 0 1
76161: PPUSH
76162: LD_INT 2
76164: PUSH
76165: LD_INT 34
76167: PUSH
76168: LD_INT 12
76170: PUSH
76171: EMPTY
76172: LIST
76173: LIST
76174: PUSH
76175: LD_INT 34
76177: PUSH
76178: LD_INT 51
76180: PUSH
76181: EMPTY
76182: LIST
76183: LIST
76184: PUSH
76185: LD_INT 34
76187: PUSH
76188: LD_INT 32
76190: PUSH
76191: EMPTY
76192: LIST
76193: LIST
76194: PUSH
76195: LD_INT 34
76197: PUSH
76198: LD_EXP 46
76202: PUSH
76203: EMPTY
76204: LIST
76205: LIST
76206: PUSH
76207: EMPTY
76208: LIST
76209: LIST
76210: LIST
76211: LIST
76212: LIST
76213: PPUSH
76214: CALL_OW 72
76218: ST_TO_ADDR
// end ;
76219: LD_VAR 0 2
76223: RET
// export function Negate ( value ) ; begin
76224: LD_INT 0
76226: PPUSH
// result := not value ;
76227: LD_ADDR_VAR 0 2
76231: PUSH
76232: LD_VAR 0 1
76236: NOT
76237: ST_TO_ADDR
// end ;
76238: LD_VAR 0 2
76242: RET
// export function Inc ( value ) ; begin
76243: LD_INT 0
76245: PPUSH
// result := value + 1 ;
76246: LD_ADDR_VAR 0 2
76250: PUSH
76251: LD_VAR 0 1
76255: PUSH
76256: LD_INT 1
76258: PLUS
76259: ST_TO_ADDR
// end ;
76260: LD_VAR 0 2
76264: RET
// export function Dec ( value ) ; begin
76265: LD_INT 0
76267: PPUSH
// result := value - 1 ;
76268: LD_ADDR_VAR 0 2
76272: PUSH
76273: LD_VAR 0 1
76277: PUSH
76278: LD_INT 1
76280: MINUS
76281: ST_TO_ADDR
// end ;
76282: LD_VAR 0 2
76286: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
76287: LD_INT 0
76289: PPUSH
76290: PPUSH
76291: PPUSH
76292: PPUSH
76293: PPUSH
76294: PPUSH
76295: PPUSH
76296: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
76297: LD_VAR 0 1
76301: PPUSH
76302: LD_VAR 0 2
76306: PPUSH
76307: CALL_OW 488
76311: NOT
76312: PUSH
76313: LD_VAR 0 3
76317: PPUSH
76318: LD_VAR 0 4
76322: PPUSH
76323: CALL_OW 488
76327: NOT
76328: OR
76329: IFFALSE 76342
// begin result := - 1 ;
76331: LD_ADDR_VAR 0 5
76335: PUSH
76336: LD_INT 1
76338: NEG
76339: ST_TO_ADDR
// exit ;
76340: GO 76577
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
76342: LD_ADDR_VAR 0 12
76346: PUSH
76347: LD_VAR 0 1
76351: PPUSH
76352: LD_VAR 0 2
76356: PPUSH
76357: LD_VAR 0 3
76361: PPUSH
76362: LD_VAR 0 4
76366: PPUSH
76367: CALL 75425 0 4
76371: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
76372: LD_ADDR_VAR 0 11
76376: PUSH
76377: LD_VAR 0 1
76381: PPUSH
76382: LD_VAR 0 2
76386: PPUSH
76387: LD_VAR 0 12
76391: PUSH
76392: LD_INT 1
76394: ARRAY
76395: PPUSH
76396: LD_VAR 0 12
76400: PUSH
76401: LD_INT 2
76403: ARRAY
76404: PPUSH
76405: CALL_OW 298
76409: ST_TO_ADDR
// distance := 9999 ;
76410: LD_ADDR_VAR 0 10
76414: PUSH
76415: LD_INT 9999
76417: ST_TO_ADDR
// for i := 0 to 5 do
76418: LD_ADDR_VAR 0 6
76422: PUSH
76423: DOUBLE
76424: LD_INT 0
76426: DEC
76427: ST_TO_ADDR
76428: LD_INT 5
76430: PUSH
76431: FOR_TO
76432: IFFALSE 76575
// begin _x := ShiftX ( x1 , i , centerDist ) ;
76434: LD_ADDR_VAR 0 7
76438: PUSH
76439: LD_VAR 0 1
76443: PPUSH
76444: LD_VAR 0 6
76448: PPUSH
76449: LD_VAR 0 11
76453: PPUSH
76454: CALL_OW 272
76458: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
76459: LD_ADDR_VAR 0 8
76463: PUSH
76464: LD_VAR 0 2
76468: PPUSH
76469: LD_VAR 0 6
76473: PPUSH
76474: LD_VAR 0 11
76478: PPUSH
76479: CALL_OW 273
76483: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
76484: LD_VAR 0 7
76488: PPUSH
76489: LD_VAR 0 8
76493: PPUSH
76494: CALL_OW 488
76498: NOT
76499: IFFALSE 76503
// continue ;
76501: GO 76431
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
76503: LD_ADDR_VAR 0 9
76507: PUSH
76508: LD_VAR 0 12
76512: PUSH
76513: LD_INT 1
76515: ARRAY
76516: PPUSH
76517: LD_VAR 0 12
76521: PUSH
76522: LD_INT 2
76524: ARRAY
76525: PPUSH
76526: LD_VAR 0 7
76530: PPUSH
76531: LD_VAR 0 8
76535: PPUSH
76536: CALL_OW 298
76540: ST_TO_ADDR
// if tmp < distance then
76541: LD_VAR 0 9
76545: PUSH
76546: LD_VAR 0 10
76550: LESS
76551: IFFALSE 76573
// begin result := i ;
76553: LD_ADDR_VAR 0 5
76557: PUSH
76558: LD_VAR 0 6
76562: ST_TO_ADDR
// distance := tmp ;
76563: LD_ADDR_VAR 0 10
76567: PUSH
76568: LD_VAR 0 9
76572: ST_TO_ADDR
// end ; end ;
76573: GO 76431
76575: POP
76576: POP
// end ;
76577: LD_VAR 0 5
76581: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76582: LD_INT 0
76584: PPUSH
76585: PPUSH
// if not driver or not IsInUnit ( driver ) then
76586: LD_VAR 0 1
76590: NOT
76591: PUSH
76592: LD_VAR 0 1
76596: PPUSH
76597: CALL_OW 310
76601: NOT
76602: OR
76603: IFFALSE 76607
// exit ;
76605: GO 76697
// vehicle := IsInUnit ( driver ) ;
76607: LD_ADDR_VAR 0 3
76611: PUSH
76612: LD_VAR 0 1
76616: PPUSH
76617: CALL_OW 310
76621: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76622: LD_VAR 0 1
76626: PPUSH
76627: LD_STRING \
76629: PUSH
76630: LD_INT 0
76632: PUSH
76633: LD_INT 0
76635: PUSH
76636: LD_INT 0
76638: PUSH
76639: LD_INT 0
76641: PUSH
76642: LD_INT 0
76644: PUSH
76645: LD_INT 0
76647: PUSH
76648: EMPTY
76649: LIST
76650: LIST
76651: LIST
76652: LIST
76653: LIST
76654: LIST
76655: LIST
76656: PUSH
76657: LD_STRING E
76659: PUSH
76660: LD_INT 0
76662: PUSH
76663: LD_INT 0
76665: PUSH
76666: LD_VAR 0 3
76670: PUSH
76671: LD_INT 0
76673: PUSH
76674: LD_INT 0
76676: PUSH
76677: LD_INT 0
76679: PUSH
76680: EMPTY
76681: LIST
76682: LIST
76683: LIST
76684: LIST
76685: LIST
76686: LIST
76687: LIST
76688: PUSH
76689: EMPTY
76690: LIST
76691: LIST
76692: PPUSH
76693: CALL_OW 446
// end ;
76697: LD_VAR 0 2
76701: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76702: LD_INT 0
76704: PPUSH
76705: PPUSH
// if not driver or not IsInUnit ( driver ) then
76706: LD_VAR 0 1
76710: NOT
76711: PUSH
76712: LD_VAR 0 1
76716: PPUSH
76717: CALL_OW 310
76721: NOT
76722: OR
76723: IFFALSE 76727
// exit ;
76725: GO 76817
// vehicle := IsInUnit ( driver ) ;
76727: LD_ADDR_VAR 0 3
76731: PUSH
76732: LD_VAR 0 1
76736: PPUSH
76737: CALL_OW 310
76741: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76742: LD_VAR 0 1
76746: PPUSH
76747: LD_STRING \
76749: PUSH
76750: LD_INT 0
76752: PUSH
76753: LD_INT 0
76755: PUSH
76756: LD_INT 0
76758: PUSH
76759: LD_INT 0
76761: PUSH
76762: LD_INT 0
76764: PUSH
76765: LD_INT 0
76767: PUSH
76768: EMPTY
76769: LIST
76770: LIST
76771: LIST
76772: LIST
76773: LIST
76774: LIST
76775: LIST
76776: PUSH
76777: LD_STRING E
76779: PUSH
76780: LD_INT 0
76782: PUSH
76783: LD_INT 0
76785: PUSH
76786: LD_VAR 0 3
76790: PUSH
76791: LD_INT 0
76793: PUSH
76794: LD_INT 0
76796: PUSH
76797: LD_INT 0
76799: PUSH
76800: EMPTY
76801: LIST
76802: LIST
76803: LIST
76804: LIST
76805: LIST
76806: LIST
76807: LIST
76808: PUSH
76809: EMPTY
76810: LIST
76811: LIST
76812: PPUSH
76813: CALL_OW 447
// end ;
76817: LD_VAR 0 2
76821: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
76822: LD_INT 0
76824: PPUSH
76825: PPUSH
76826: PPUSH
// tmp := [ ] ;
76827: LD_ADDR_VAR 0 5
76831: PUSH
76832: EMPTY
76833: ST_TO_ADDR
// for i in units do
76834: LD_ADDR_VAR 0 4
76838: PUSH
76839: LD_VAR 0 1
76843: PUSH
76844: FOR_IN
76845: IFFALSE 76883
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
76847: LD_ADDR_VAR 0 5
76851: PUSH
76852: LD_VAR 0 5
76856: PPUSH
76857: LD_VAR 0 5
76861: PUSH
76862: LD_INT 1
76864: PLUS
76865: PPUSH
76866: LD_VAR 0 4
76870: PPUSH
76871: CALL_OW 256
76875: PPUSH
76876: CALL_OW 2
76880: ST_TO_ADDR
76881: GO 76844
76883: POP
76884: POP
// if not tmp then
76885: LD_VAR 0 5
76889: NOT
76890: IFFALSE 76894
// exit ;
76892: GO 76942
// if asc then
76894: LD_VAR 0 2
76898: IFFALSE 76922
// result := SortListByListAsc ( units , tmp ) else
76900: LD_ADDR_VAR 0 3
76904: PUSH
76905: LD_VAR 0 1
76909: PPUSH
76910: LD_VAR 0 5
76914: PPUSH
76915: CALL_OW 76
76919: ST_TO_ADDR
76920: GO 76942
// result := SortListByListDesc ( units , tmp ) ;
76922: LD_ADDR_VAR 0 3
76926: PUSH
76927: LD_VAR 0 1
76931: PPUSH
76932: LD_VAR 0 5
76936: PPUSH
76937: CALL_OW 77
76941: ST_TO_ADDR
// end ;
76942: LD_VAR 0 3
76946: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76947: LD_INT 0
76949: PPUSH
76950: PPUSH
// task := GetTaskList ( mech ) ;
76951: LD_ADDR_VAR 0 4
76955: PUSH
76956: LD_VAR 0 1
76960: PPUSH
76961: CALL_OW 437
76965: ST_TO_ADDR
// if not task then
76966: LD_VAR 0 4
76970: NOT
76971: IFFALSE 76975
// exit ;
76973: GO 77017
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76975: LD_ADDR_VAR 0 3
76979: PUSH
76980: LD_VAR 0 4
76984: PUSH
76985: LD_INT 1
76987: ARRAY
76988: PUSH
76989: LD_INT 1
76991: ARRAY
76992: PUSH
76993: LD_STRING r
76995: EQUAL
76996: PUSH
76997: LD_VAR 0 4
77001: PUSH
77002: LD_INT 1
77004: ARRAY
77005: PUSH
77006: LD_INT 4
77008: ARRAY
77009: PUSH
77010: LD_VAR 0 2
77014: EQUAL
77015: AND
77016: ST_TO_ADDR
// end ;
77017: LD_VAR 0 3
77021: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
77022: LD_INT 0
77024: PPUSH
// SetDir ( unit , d ) ;
77025: LD_VAR 0 1
77029: PPUSH
77030: LD_VAR 0 4
77034: PPUSH
77035: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
77039: LD_VAR 0 1
77043: PPUSH
77044: LD_VAR 0 2
77048: PPUSH
77049: LD_VAR 0 3
77053: PPUSH
77054: LD_VAR 0 5
77058: PPUSH
77059: CALL_OW 48
// end ;
77063: LD_VAR 0 6
77067: RET
// export function ToNaturalNumber ( number ) ; begin
77068: LD_INT 0
77070: PPUSH
// result := number div 1 ;
77071: LD_ADDR_VAR 0 2
77075: PUSH
77076: LD_VAR 0 1
77080: PUSH
77081: LD_INT 1
77083: DIV
77084: ST_TO_ADDR
// if number < 0 then
77085: LD_VAR 0 1
77089: PUSH
77090: LD_INT 0
77092: LESS
77093: IFFALSE 77103
// result := 0 ;
77095: LD_ADDR_VAR 0 2
77099: PUSH
77100: LD_INT 0
77102: ST_TO_ADDR
// end ;
77103: LD_VAR 0 2
77107: RET
// export function SortByClass ( units , class ) ; var un ; begin
77108: LD_INT 0
77110: PPUSH
77111: PPUSH
// if not units or not class then
77112: LD_VAR 0 1
77116: NOT
77117: PUSH
77118: LD_VAR 0 2
77122: NOT
77123: OR
77124: IFFALSE 77128
// exit ;
77126: GO 77223
// result := [ ] ;
77128: LD_ADDR_VAR 0 3
77132: PUSH
77133: EMPTY
77134: ST_TO_ADDR
// for un in units do
77135: LD_ADDR_VAR 0 4
77139: PUSH
77140: LD_VAR 0 1
77144: PUSH
77145: FOR_IN
77146: IFFALSE 77221
// if GetClass ( un ) = class then
77148: LD_VAR 0 4
77152: PPUSH
77153: CALL_OW 257
77157: PUSH
77158: LD_VAR 0 2
77162: EQUAL
77163: IFFALSE 77190
// result := Insert ( result , 1 , un ) else
77165: LD_ADDR_VAR 0 3
77169: PUSH
77170: LD_VAR 0 3
77174: PPUSH
77175: LD_INT 1
77177: PPUSH
77178: LD_VAR 0 4
77182: PPUSH
77183: CALL_OW 2
77187: ST_TO_ADDR
77188: GO 77219
// result := Replace ( result , result + 1 , un ) ;
77190: LD_ADDR_VAR 0 3
77194: PUSH
77195: LD_VAR 0 3
77199: PPUSH
77200: LD_VAR 0 3
77204: PUSH
77205: LD_INT 1
77207: PLUS
77208: PPUSH
77209: LD_VAR 0 4
77213: PPUSH
77214: CALL_OW 1
77218: ST_TO_ADDR
77219: GO 77145
77221: POP
77222: POP
// end ;
77223: LD_VAR 0 3
77227: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
77228: LD_INT 0
77230: PPUSH
77231: PPUSH
77232: PPUSH
77233: PPUSH
77234: PPUSH
77235: PPUSH
77236: PPUSH
// result := [ ] ;
77237: LD_ADDR_VAR 0 4
77241: PUSH
77242: EMPTY
77243: ST_TO_ADDR
// if x - r < 0 then
77244: LD_VAR 0 1
77248: PUSH
77249: LD_VAR 0 3
77253: MINUS
77254: PUSH
77255: LD_INT 0
77257: LESS
77258: IFFALSE 77270
// min_x := 0 else
77260: LD_ADDR_VAR 0 8
77264: PUSH
77265: LD_INT 0
77267: ST_TO_ADDR
77268: GO 77286
// min_x := x - r ;
77270: LD_ADDR_VAR 0 8
77274: PUSH
77275: LD_VAR 0 1
77279: PUSH
77280: LD_VAR 0 3
77284: MINUS
77285: ST_TO_ADDR
// if y - r < 0 then
77286: LD_VAR 0 2
77290: PUSH
77291: LD_VAR 0 3
77295: MINUS
77296: PUSH
77297: LD_INT 0
77299: LESS
77300: IFFALSE 77312
// min_y := 0 else
77302: LD_ADDR_VAR 0 7
77306: PUSH
77307: LD_INT 0
77309: ST_TO_ADDR
77310: GO 77328
// min_y := y - r ;
77312: LD_ADDR_VAR 0 7
77316: PUSH
77317: LD_VAR 0 2
77321: PUSH
77322: LD_VAR 0 3
77326: MINUS
77327: ST_TO_ADDR
// max_x := x + r ;
77328: LD_ADDR_VAR 0 9
77332: PUSH
77333: LD_VAR 0 1
77337: PUSH
77338: LD_VAR 0 3
77342: PLUS
77343: ST_TO_ADDR
// max_y := y + r ;
77344: LD_ADDR_VAR 0 10
77348: PUSH
77349: LD_VAR 0 2
77353: PUSH
77354: LD_VAR 0 3
77358: PLUS
77359: ST_TO_ADDR
// for _x = min_x to max_x do
77360: LD_ADDR_VAR 0 5
77364: PUSH
77365: DOUBLE
77366: LD_VAR 0 8
77370: DEC
77371: ST_TO_ADDR
77372: LD_VAR 0 9
77376: PUSH
77377: FOR_TO
77378: IFFALSE 77479
// for _y = min_y to max_y do
77380: LD_ADDR_VAR 0 6
77384: PUSH
77385: DOUBLE
77386: LD_VAR 0 7
77390: DEC
77391: ST_TO_ADDR
77392: LD_VAR 0 10
77396: PUSH
77397: FOR_TO
77398: IFFALSE 77475
// begin if not ValidHex ( _x , _y ) then
77400: LD_VAR 0 5
77404: PPUSH
77405: LD_VAR 0 6
77409: PPUSH
77410: CALL_OW 488
77414: NOT
77415: IFFALSE 77419
// continue ;
77417: GO 77397
// if GetResourceTypeXY ( _x , _y ) then
77419: LD_VAR 0 5
77423: PPUSH
77424: LD_VAR 0 6
77428: PPUSH
77429: CALL_OW 283
77433: IFFALSE 77473
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
77435: LD_ADDR_VAR 0 4
77439: PUSH
77440: LD_VAR 0 4
77444: PPUSH
77445: LD_VAR 0 4
77449: PUSH
77450: LD_INT 1
77452: PLUS
77453: PPUSH
77454: LD_VAR 0 5
77458: PUSH
77459: LD_VAR 0 6
77463: PUSH
77464: EMPTY
77465: LIST
77466: LIST
77467: PPUSH
77468: CALL_OW 1
77472: ST_TO_ADDR
// end ;
77473: GO 77397
77475: POP
77476: POP
77477: GO 77377
77479: POP
77480: POP
// end ;
77481: LD_VAR 0 4
77485: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
77486: LD_INT 0
77488: PPUSH
77489: PPUSH
77490: PPUSH
77491: PPUSH
77492: PPUSH
77493: PPUSH
77494: PPUSH
77495: PPUSH
// if not units then
77496: LD_VAR 0 1
77500: NOT
77501: IFFALSE 77505
// exit ;
77503: GO 77930
// result := UnitFilter ( units , [ f_ok ] ) ;
77505: LD_ADDR_VAR 0 3
77509: PUSH
77510: LD_VAR 0 1
77514: PPUSH
77515: LD_INT 50
77517: PUSH
77518: EMPTY
77519: LIST
77520: PPUSH
77521: CALL_OW 72
77525: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
77526: LD_ADDR_VAR 0 8
77530: PUSH
77531: LD_VAR 0 1
77535: PUSH
77536: LD_INT 1
77538: ARRAY
77539: PPUSH
77540: CALL_OW 255
77544: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
77545: LD_ADDR_VAR 0 10
77549: PUSH
77550: LD_INT 29
77552: PUSH
77553: LD_EXP 49
77557: PUSH
77558: EMPTY
77559: LIST
77560: LIST
77561: ST_TO_ADDR
// if not result then
77562: LD_VAR 0 3
77566: NOT
77567: IFFALSE 77571
// exit ;
77569: GO 77930
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
77571: LD_ADDR_VAR 0 5
77575: PUSH
77576: LD_INT 81
77578: PUSH
77579: LD_VAR 0 8
77583: PUSH
77584: EMPTY
77585: LIST
77586: LIST
77587: PPUSH
77588: CALL_OW 69
77592: ST_TO_ADDR
// for i in result do
77593: LD_ADDR_VAR 0 4
77597: PUSH
77598: LD_VAR 0 3
77602: PUSH
77603: FOR_IN
77604: IFFALSE 77928
// begin tag := GetTag ( i ) + 1 ;
77606: LD_ADDR_VAR 0 9
77610: PUSH
77611: LD_VAR 0 4
77615: PPUSH
77616: CALL_OW 110
77620: PUSH
77621: LD_INT 1
77623: PLUS
77624: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
77625: LD_ADDR_VAR 0 7
77629: PUSH
77630: LD_VAR 0 4
77634: PPUSH
77635: CALL_OW 250
77639: PPUSH
77640: LD_VAR 0 4
77644: PPUSH
77645: CALL_OW 251
77649: PPUSH
77650: LD_INT 6
77652: PPUSH
77653: CALL 77228 0 3
77657: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
77658: LD_VAR 0 7
77662: PUSH
77663: LD_VAR 0 4
77667: PPUSH
77668: CALL_OW 264
77672: PUSH
77673: LD_VAR 0 10
77677: IN
77678: NOT
77679: AND
77680: IFFALSE 77719
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
77682: LD_VAR 0 4
77686: PPUSH
77687: LD_VAR 0 7
77691: PUSH
77692: LD_INT 1
77694: ARRAY
77695: PUSH
77696: LD_INT 1
77698: ARRAY
77699: PPUSH
77700: LD_VAR 0 7
77704: PUSH
77705: LD_INT 1
77707: ARRAY
77708: PUSH
77709: LD_INT 2
77711: ARRAY
77712: PPUSH
77713: CALL_OW 116
77717: GO 77926
// if path > tag then
77719: LD_VAR 0 2
77723: PUSH
77724: LD_VAR 0 9
77728: GREATER
77729: IFFALSE 77896
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
77731: LD_ADDR_VAR 0 6
77735: PUSH
77736: LD_VAR 0 5
77740: PPUSH
77741: LD_INT 91
77743: PUSH
77744: LD_VAR 0 4
77748: PUSH
77749: LD_INT 12
77751: PUSH
77752: EMPTY
77753: LIST
77754: LIST
77755: LIST
77756: PPUSH
77757: CALL_OW 72
77761: ST_TO_ADDR
// if nearEnemy then
77762: LD_VAR 0 6
77766: IFFALSE 77794
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
77768: LD_VAR 0 4
77772: PPUSH
77773: LD_VAR 0 6
77777: PPUSH
77778: LD_VAR 0 4
77782: PPUSH
77783: CALL_OW 74
77787: PPUSH
77788: CALL_OW 115
77792: GO 77894
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
77794: LD_VAR 0 4
77798: PPUSH
77799: LD_VAR 0 2
77803: PUSH
77804: LD_VAR 0 9
77808: ARRAY
77809: PUSH
77810: LD_INT 1
77812: ARRAY
77813: PPUSH
77814: LD_VAR 0 2
77818: PUSH
77819: LD_VAR 0 9
77823: ARRAY
77824: PUSH
77825: LD_INT 2
77827: ARRAY
77828: PPUSH
77829: CALL_OW 297
77833: PUSH
77834: LD_INT 6
77836: GREATER
77837: IFFALSE 77880
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
77839: LD_VAR 0 4
77843: PPUSH
77844: LD_VAR 0 2
77848: PUSH
77849: LD_VAR 0 9
77853: ARRAY
77854: PUSH
77855: LD_INT 1
77857: ARRAY
77858: PPUSH
77859: LD_VAR 0 2
77863: PUSH
77864: LD_VAR 0 9
77868: ARRAY
77869: PUSH
77870: LD_INT 2
77872: ARRAY
77873: PPUSH
77874: CALL_OW 114
77878: GO 77894
// SetTag ( i , tag ) ;
77880: LD_VAR 0 4
77884: PPUSH
77885: LD_VAR 0 9
77889: PPUSH
77890: CALL_OW 109
// end else
77894: GO 77926
// if enemy then
77896: LD_VAR 0 5
77900: IFFALSE 77926
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
77902: LD_VAR 0 4
77906: PPUSH
77907: LD_VAR 0 5
77911: PPUSH
77912: LD_VAR 0 4
77916: PPUSH
77917: CALL_OW 74
77921: PPUSH
77922: CALL_OW 115
// end ;
77926: GO 77603
77928: POP
77929: POP
// end ;
77930: LD_VAR 0 3
77934: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
77935: LD_INT 0
77937: PPUSH
77938: PPUSH
77939: PPUSH
// if not unit or IsInUnit ( unit ) then
77940: LD_VAR 0 1
77944: NOT
77945: PUSH
77946: LD_VAR 0 1
77950: PPUSH
77951: CALL_OW 310
77955: OR
77956: IFFALSE 77960
// exit ;
77958: GO 78051
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
77960: LD_ADDR_VAR 0 4
77964: PUSH
77965: LD_VAR 0 1
77969: PPUSH
77970: CALL_OW 250
77974: PPUSH
77975: LD_VAR 0 2
77979: PPUSH
77980: LD_INT 1
77982: PPUSH
77983: CALL_OW 272
77987: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
77988: LD_ADDR_VAR 0 5
77992: PUSH
77993: LD_VAR 0 1
77997: PPUSH
77998: CALL_OW 251
78002: PPUSH
78003: LD_VAR 0 2
78007: PPUSH
78008: LD_INT 1
78010: PPUSH
78011: CALL_OW 273
78015: ST_TO_ADDR
// if ValidHex ( x , y ) then
78016: LD_VAR 0 4
78020: PPUSH
78021: LD_VAR 0 5
78025: PPUSH
78026: CALL_OW 488
78030: IFFALSE 78051
// ComTurnXY ( unit , x , y ) ;
78032: LD_VAR 0 1
78036: PPUSH
78037: LD_VAR 0 4
78041: PPUSH
78042: LD_VAR 0 5
78046: PPUSH
78047: CALL_OW 118
// end ;
78051: LD_VAR 0 3
78055: RET
// export function SeeUnits ( side , units ) ; var i ; begin
78056: LD_INT 0
78058: PPUSH
78059: PPUSH
// result := false ;
78060: LD_ADDR_VAR 0 3
78064: PUSH
78065: LD_INT 0
78067: ST_TO_ADDR
// if not units then
78068: LD_VAR 0 2
78072: NOT
78073: IFFALSE 78077
// exit ;
78075: GO 78122
// for i in units do
78077: LD_ADDR_VAR 0 4
78081: PUSH
78082: LD_VAR 0 2
78086: PUSH
78087: FOR_IN
78088: IFFALSE 78120
// if See ( side , i ) then
78090: LD_VAR 0 1
78094: PPUSH
78095: LD_VAR 0 4
78099: PPUSH
78100: CALL_OW 292
78104: IFFALSE 78118
// begin result := true ;
78106: LD_ADDR_VAR 0 3
78110: PUSH
78111: LD_INT 1
78113: ST_TO_ADDR
// exit ;
78114: POP
78115: POP
78116: GO 78122
// end ;
78118: GO 78087
78120: POP
78121: POP
// end ;
78122: LD_VAR 0 3
78126: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
78127: LD_INT 0
78129: PPUSH
78130: PPUSH
78131: PPUSH
78132: PPUSH
// if not unit or not points then
78133: LD_VAR 0 1
78137: NOT
78138: PUSH
78139: LD_VAR 0 2
78143: NOT
78144: OR
78145: IFFALSE 78149
// exit ;
78147: GO 78239
// dist := 99999 ;
78149: LD_ADDR_VAR 0 5
78153: PUSH
78154: LD_INT 99999
78156: ST_TO_ADDR
// for i in points do
78157: LD_ADDR_VAR 0 4
78161: PUSH
78162: LD_VAR 0 2
78166: PUSH
78167: FOR_IN
78168: IFFALSE 78237
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
78170: LD_ADDR_VAR 0 6
78174: PUSH
78175: LD_VAR 0 1
78179: PPUSH
78180: LD_VAR 0 4
78184: PUSH
78185: LD_INT 1
78187: ARRAY
78188: PPUSH
78189: LD_VAR 0 4
78193: PUSH
78194: LD_INT 2
78196: ARRAY
78197: PPUSH
78198: CALL_OW 297
78202: ST_TO_ADDR
// if tmpDist < dist then
78203: LD_VAR 0 6
78207: PUSH
78208: LD_VAR 0 5
78212: LESS
78213: IFFALSE 78235
// begin result := i ;
78215: LD_ADDR_VAR 0 3
78219: PUSH
78220: LD_VAR 0 4
78224: ST_TO_ADDR
// dist := tmpDist ;
78225: LD_ADDR_VAR 0 5
78229: PUSH
78230: LD_VAR 0 6
78234: ST_TO_ADDR
// end ; end ;
78235: GO 78167
78237: POP
78238: POP
// end ;
78239: LD_VAR 0 3
78243: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
78244: LD_INT 0
78246: PPUSH
// uc_side := side ;
78247: LD_ADDR_OWVAR 20
78251: PUSH
78252: LD_VAR 0 1
78256: ST_TO_ADDR
// uc_nation := 3 ;
78257: LD_ADDR_OWVAR 21
78261: PUSH
78262: LD_INT 3
78264: ST_TO_ADDR
// vc_chassis := 25 ;
78265: LD_ADDR_OWVAR 37
78269: PUSH
78270: LD_INT 25
78272: ST_TO_ADDR
// vc_engine := engine_siberite ;
78273: LD_ADDR_OWVAR 39
78277: PUSH
78278: LD_INT 3
78280: ST_TO_ADDR
// vc_control := control_computer ;
78281: LD_ADDR_OWVAR 38
78285: PUSH
78286: LD_INT 3
78288: ST_TO_ADDR
// vc_weapon := 59 ;
78289: LD_ADDR_OWVAR 40
78293: PUSH
78294: LD_INT 59
78296: ST_TO_ADDR
// result := CreateVehicle ;
78297: LD_ADDR_VAR 0 5
78301: PUSH
78302: CALL_OW 45
78306: ST_TO_ADDR
// SetDir ( result , d ) ;
78307: LD_VAR 0 5
78311: PPUSH
78312: LD_VAR 0 4
78316: PPUSH
78317: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
78321: LD_VAR 0 5
78325: PPUSH
78326: LD_VAR 0 2
78330: PPUSH
78331: LD_VAR 0 3
78335: PPUSH
78336: LD_INT 0
78338: PPUSH
78339: CALL_OW 48
// end ;
78343: LD_VAR 0 5
78347: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
78348: LD_INT 0
78350: PPUSH
78351: PPUSH
78352: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
78353: LD_ADDR_VAR 0 2
78357: PUSH
78358: LD_INT 0
78360: PUSH
78361: LD_INT 0
78363: PUSH
78364: LD_INT 0
78366: PUSH
78367: LD_INT 0
78369: PUSH
78370: EMPTY
78371: LIST
78372: LIST
78373: LIST
78374: LIST
78375: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
78376: LD_VAR 0 1
78380: NOT
78381: PUSH
78382: LD_VAR 0 1
78386: PPUSH
78387: CALL_OW 264
78391: PUSH
78392: LD_INT 12
78394: PUSH
78395: LD_INT 51
78397: PUSH
78398: LD_INT 32
78400: PUSH
78401: LD_EXP 46
78405: PUSH
78406: EMPTY
78407: LIST
78408: LIST
78409: LIST
78410: LIST
78411: IN
78412: NOT
78413: OR
78414: IFFALSE 78418
// exit ;
78416: GO 78516
// for i := 1 to 3 do
78418: LD_ADDR_VAR 0 3
78422: PUSH
78423: DOUBLE
78424: LD_INT 1
78426: DEC
78427: ST_TO_ADDR
78428: LD_INT 3
78430: PUSH
78431: FOR_TO
78432: IFFALSE 78514
// begin tmp := GetCargo ( cargo , i ) ;
78434: LD_ADDR_VAR 0 4
78438: PUSH
78439: LD_VAR 0 1
78443: PPUSH
78444: LD_VAR 0 3
78448: PPUSH
78449: CALL_OW 289
78453: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
78454: LD_ADDR_VAR 0 2
78458: PUSH
78459: LD_VAR 0 2
78463: PPUSH
78464: LD_VAR 0 3
78468: PPUSH
78469: LD_VAR 0 4
78473: PPUSH
78474: CALL_OW 1
78478: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
78479: LD_ADDR_VAR 0 2
78483: PUSH
78484: LD_VAR 0 2
78488: PPUSH
78489: LD_INT 4
78491: PPUSH
78492: LD_VAR 0 2
78496: PUSH
78497: LD_INT 4
78499: ARRAY
78500: PUSH
78501: LD_VAR 0 4
78505: PLUS
78506: PPUSH
78507: CALL_OW 1
78511: ST_TO_ADDR
// end ;
78512: GO 78431
78514: POP
78515: POP
// end ; end_of_file
78516: LD_VAR 0 2
78520: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
78521: LD_VAR 0 1
78525: PUSH
78526: LD_INT 200
78528: DOUBLE
78529: GREATEREQUAL
78530: IFFALSE 78538
78532: LD_INT 299
78534: DOUBLE
78535: LESSEQUAL
78536: IFTRUE 78540
78538: GO 78572
78540: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
78541: LD_VAR 0 1
78545: PPUSH
78546: LD_VAR 0 2
78550: PPUSH
78551: LD_VAR 0 3
78555: PPUSH
78556: LD_VAR 0 4
78560: PPUSH
78561: LD_VAR 0 5
78565: PPUSH
78566: CALL 33947 0 5
78570: GO 78649
78572: LD_INT 300
78574: DOUBLE
78575: GREATEREQUAL
78576: IFFALSE 78584
78578: LD_INT 399
78580: DOUBLE
78581: LESSEQUAL
78582: IFTRUE 78586
78584: GO 78648
78586: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
78587: LD_VAR 0 1
78591: PPUSH
78592: LD_VAR 0 2
78596: PPUSH
78597: LD_VAR 0 3
78601: PPUSH
78602: LD_VAR 0 4
78606: PPUSH
78607: LD_VAR 0 5
78611: PPUSH
78612: LD_VAR 0 6
78616: PPUSH
78617: LD_VAR 0 7
78621: PPUSH
78622: LD_VAR 0 8
78626: PPUSH
78627: LD_VAR 0 9
78631: PPUSH
78632: LD_VAR 0 10
78636: PPUSH
78637: LD_VAR 0 11
78641: PPUSH
78642: CALL 31589 0 11
78646: GO 78649
78648: POP
// end ;
78649: PPOPN 11
78651: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
78652: LD_VAR 0 1
78656: PPUSH
78657: LD_VAR 0 2
78661: PPUSH
78662: LD_VAR 0 3
78666: PPUSH
78667: LD_VAR 0 4
78671: PPUSH
78672: LD_VAR 0 5
78676: PPUSH
78677: CALL 33683 0 5
// end ; end_of_file
78681: PPOPN 5
78683: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78684: LD_VAR 0 1
78688: PPUSH
78689: LD_VAR 0 2
78693: PPUSH
78694: LD_VAR 0 3
78698: PPUSH
78699: LD_VAR 0 4
78703: PPUSH
78704: LD_VAR 0 5
78708: PPUSH
78709: LD_VAR 0 6
78713: PPUSH
78714: CALL 19282 0 6
// end ;
78718: PPOPN 6
78720: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
78721: CALL 19257 0 0
// end ;
78725: PPOPN 1
78727: END
