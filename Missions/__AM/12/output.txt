// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export amCargo1 , amCargo2 ; export amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; export westPathUsed , laserCounterDestroy , rocketBuilded ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_STRING ryutin
  20: PPUSH
  21: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  25: LD_INT 6
  27: PPUSH
  28: LD_STRING yegorov
  30: PPUSH
  31: CALL_OW 500
// RuScientists = [ ] ;
  35: LD_ADDR_EXP 34
  39: PUSH
  40: EMPTY
  41: ST_TO_ADDR
// sciCounter = 0 ;
  42: LD_ADDR_EXP 35
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  50: LD_ADDR_EXP 38
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTanks = [ ] ;
  57: LD_ADDR_EXP 39
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  64: LD_ADDR_EXP 40
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// arabianMines = [ ] ;
  71: LD_ADDR_EXP 44
  75: PUSH
  76: EMPTY
  77: ST_TO_ADDR
// kurtStatus = LoadVariable ( 06_KurtStatus_1 , 0 ) ;
  78: LD_ADDR_EXP 26
  82: PUSH
  83: LD_STRING 06_KurtStatus_1
  85: PPUSH
  86: LD_INT 0
  88: PPUSH
  89: CALL_OW 30
  93: ST_TO_ADDR
// secondPass = 0 ;
  94: LD_ADDR_EXP 27
  98: PUSH
  99: LD_INT 0
 101: ST_TO_ADDR
// teleportExplored = 0 ;
 102: LD_ADDR_EXP 33
 106: PUSH
 107: LD_INT 0
 109: ST_TO_ADDR
// attackTactic = 0 ;
 110: LD_ADDR_EXP 43
 114: PUSH
 115: LD_INT 0
 117: ST_TO_ADDR
// tpCounter = 0 ;
 118: LD_ADDR_EXP 29
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// askSiberite = 0 ;
 126: LD_ADDR_EXP 32
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// warWithLegion = 0 ;
 134: LD_ADDR_EXP 30
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// fakeInfo = 0 ;
 142: LD_ADDR_EXP 31
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// cratesSpawned = 0 ;
 150: LD_ADDR_EXP 45
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// ruAI = 0 ;
 158: LD_ADDR_EXP 41
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// ruEscape = 0 ;
 166: LD_ADDR_EXP 42
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// eventVar1 = 0 ;
 174: LD_ADDR_EXP 47
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// mission_prefix = 12_ ;
 182: LD_ADDR_EXP 46
 186: PUSH
 187: LD_STRING 12_
 189: ST_TO_ADDR
// debugMode = 0 ;
 190: LD_ADDR_EXP 48
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// westPathUsed := false ;
 198: LD_ADDR_EXP 49
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// laserCounterDestroy := 0 ;
 206: LD_ADDR_EXP 50
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// rocketBuilded := false ;
 214: LD_ADDR_EXP 51
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// PrepareNature ;
 222: CALL 16007 0 0
// PrepareDifficulty ;
 226: CALL 12526 0 0
// PrepareVehicles ;
 230: CALL 1741 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 234: LD_INT 4
 236: PPUSH
 237: LD_INT 0
 239: PPUSH
 240: LD_INT 1
 242: PPUSH
 243: LD_INT 0
 245: PPUSH
 246: CALL 1315 0 4
// PrepareAmericanHeroes ;
 250: CALL 640 0 0
// PrepareRussianCommander ;
 254: CALL 3117 0 0
// PrepareWestBase ;
 258: CALL 3629 0 0
// PrepareEastBase ;
 262: CALL 3189 0 0
// PrepareOtherRussians ;
 266: CALL 3741 0 0
// end ;
 270: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 271: LD_EXP 48
 275: PUSH
 276: LD_INT 1
 278: EQUAL
 279: IFFALSE 585
 281: GO 283
 283: DISABLE
 284: LD_INT 0
 286: PPUSH
// begin enable ;
 287: ENABLE
// fogoff ( true ) ;
 288: LD_INT 1
 290: PPUSH
 291: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 295: LD_ADDR_VAR 0 1
 299: PUSH
 300: LD_INT 22
 302: PUSH
 303: LD_INT 1
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: PUSH
 310: LD_INT 21
 312: PUSH
 313: LD_INT 1
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: PPUSH
 324: CALL_OW 69
 328: PUSH
 329: FOR_IN
 330: IFFALSE 346
// SetLives ( i , 1000 ) ;
 332: LD_VAR 0 1
 336: PPUSH
 337: LD_INT 1000
 339: PPUSH
 340: CALL_OW 234
 344: GO 329
 346: POP
 347: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 348: LD_ADDR_VAR 0 1
 352: PUSH
 353: LD_INT 22
 355: PUSH
 356: LD_INT 1
 358: PUSH
 359: EMPTY
 360: LIST
 361: LIST
 362: PUSH
 363: LD_INT 2
 365: PUSH
 366: LD_INT 30
 368: PUSH
 369: LD_INT 0
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: PUSH
 376: LD_INT 30
 378: PUSH
 379: LD_INT 1
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: PUSH
 386: EMPTY
 387: LIST
 388: LIST
 389: LIST
 390: PUSH
 391: EMPTY
 392: LIST
 393: LIST
 394: PPUSH
 395: CALL_OW 69
 399: PUSH
 400: FOR_IN
 401: IFFALSE 425
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 403: LD_VAR 0 1
 407: PPUSH
 408: CALL_OW 274
 412: PPUSH
 413: LD_INT 1
 415: PPUSH
 416: LD_INT 9999
 418: PPUSH
 419: CALL_OW 277
 423: GO 400
 425: POP
 426: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 427: LD_ADDR_VAR 0 1
 431: PUSH
 432: LD_INT 22
 434: PUSH
 435: LD_INT 1
 437: PUSH
 438: EMPTY
 439: LIST
 440: LIST
 441: PUSH
 442: LD_INT 2
 444: PUSH
 445: LD_INT 30
 447: PUSH
 448: LD_INT 0
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: PUSH
 455: LD_INT 30
 457: PUSH
 458: LD_INT 1
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: LIST
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PPUSH
 474: CALL_OW 69
 478: PUSH
 479: FOR_IN
 480: IFFALSE 504
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 482: LD_VAR 0 1
 486: PPUSH
 487: CALL_OW 274
 491: PPUSH
 492: LD_INT 2
 494: PPUSH
 495: LD_INT 9999
 497: PPUSH
 498: CALL_OW 277
 502: GO 479
 504: POP
 505: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 506: LD_ADDR_VAR 0 1
 510: PUSH
 511: LD_INT 22
 513: PUSH
 514: LD_INT 1
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: PUSH
 521: LD_INT 2
 523: PUSH
 524: LD_INT 30
 526: PUSH
 527: LD_INT 0
 529: PUSH
 530: EMPTY
 531: LIST
 532: LIST
 533: PUSH
 534: LD_INT 30
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: EMPTY
 545: LIST
 546: LIST
 547: LIST
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: PPUSH
 553: CALL_OW 69
 557: PUSH
 558: FOR_IN
 559: IFFALSE 583
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 561: LD_VAR 0 1
 565: PPUSH
 566: CALL_OW 274
 570: PPUSH
 571: LD_INT 3
 573: PPUSH
 574: LD_INT 9999
 576: PPUSH
 577: CALL_OW 277
 581: GO 558
 583: POP
 584: POP
// end ;
 585: PPOPN 1
 587: END
// every 0 0$1 trigger FilterUnitsInArea ( westPathArea , [ f_side , 1 ] ) do
 588: LD_INT 25
 590: PPUSH
 591: LD_INT 22
 593: PUSH
 594: LD_INT 1
 596: PUSH
 597: EMPTY
 598: LIST
 599: LIST
 600: PPUSH
 601: CALL_OW 70
 605: IFFALSE 618
 607: GO 609
 609: DISABLE
// westPathUsed := true ;
 610: LD_ADDR_EXP 49
 614: PUSH
 615: LD_INT 1
 617: ST_TO_ADDR
 618: END
// every 0 0$1 trigger laserCounterDestroy >= 3 do
 619: LD_EXP 50
 623: PUSH
 624: LD_INT 3
 626: GREATEREQUAL
 627: IFFALSE 639
 629: GO 631
 631: DISABLE
// SetAchievement ( ACH_LASER ) ; end_of_file
 632: LD_STRING ACH_LASER
 634: PPUSH
 635: CALL_OW 543
 639: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 640: LD_INT 0
 642: PPUSH
 643: PPUSH
 644: PPUSH
// uc_side = 1 ;
 645: LD_ADDR_OWVAR 20
 649: PUSH
 650: LD_INT 1
 652: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 653: LD_ADDR_EXP 14
 657: PUSH
 658: LD_STRING 11c_others
 660: PPUSH
 661: CALL_OW 31
 665: PUSH
 666: LD_STRING 11_others
 668: PPUSH
 669: CALL_OW 31
 673: UNION
 674: ST_TO_ADDR
// JMM = PrepareUnit ( 11_JMM , true ) ;
 675: LD_ADDR_EXP 1
 679: PUSH
 680: LD_STRING 11_JMM
 682: PPUSH
 683: LD_INT 1
 685: PPUSH
 686: CALL 12243 0 2
 690: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 691: LD_EXP 1
 695: PPUSH
 696: LD_INT 1
 698: PPUSH
 699: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 703: LD_EXP 1
 707: PPUSH
 708: LD_INT 22
 710: PUSH
 711: LD_INT 1
 713: PUSH
 714: EMPTY
 715: LIST
 716: LIST
 717: PUSH
 718: LD_INT 21
 720: PUSH
 721: LD_INT 2
 723: PUSH
 724: EMPTY
 725: LIST
 726: LIST
 727: PUSH
 728: LD_INT 58
 730: PUSH
 731: EMPTY
 732: LIST
 733: PUSH
 734: EMPTY
 735: LIST
 736: LIST
 737: LIST
 738: PPUSH
 739: CALL_OW 69
 743: PUSH
 744: LD_INT 1
 746: ARRAY
 747: PPUSH
 748: CALL_OW 52
// if TestCharacters ( 11_Lisa ) = true then
 752: LD_STRING 11_Lisa
 754: PPUSH
 755: CALL_OW 28
 759: PUSH
 760: LD_INT 1
 762: EQUAL
 763: IFFALSE 810
// begin Lisa = PrepareUnit ( 11_Lisa , true ) ;
 765: LD_ADDR_EXP 2
 769: PUSH
 770: LD_STRING 11_Lisa
 772: PPUSH
 773: LD_INT 1
 775: PPUSH
 776: CALL 12243 0 2
 780: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 781: LD_EXP 2
 785: PPUSH
 786: LD_INT 1
 788: PPUSH
 789: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 793: LD_EXP 2
 797: PPUSH
 798: LD_INT 4
 800: PPUSH
 801: LD_INT 0
 803: PPUSH
 804: CALL_OW 49
// end else
 808: GO 826
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 810: LD_INT 4
 812: PPUSH
 813: LD_INT 0
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: LD_INT 0
 821: PPUSH
 822: CALL 1315 0 4
// end ; if TestCharacters ( 11_Donaldson ) = true then
 826: LD_STRING 11_Donaldson
 828: PPUSH
 829: CALL_OW 28
 833: PUSH
 834: LD_INT 1
 836: EQUAL
 837: IFFALSE 884
// begin Donaldson = PrepareUnit ( 11_Donaldson , true ) ;
 839: LD_ADDR_EXP 3
 843: PUSH
 844: LD_STRING 11_Donaldson
 846: PPUSH
 847: LD_INT 1
 849: PPUSH
 850: CALL 12243 0 2
 854: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 855: LD_EXP 3
 859: PPUSH
 860: LD_INT 1
 862: PPUSH
 863: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 867: LD_EXP 3
 871: PPUSH
 872: LD_INT 4
 874: PPUSH
 875: LD_INT 0
 877: PPUSH
 878: CALL_OW 49
// end else
 882: GO 900
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 884: LD_INT 4
 886: PPUSH
 887: LD_INT 0
 889: PPUSH
 890: LD_INT 1
 892: PPUSH
 893: LD_INT 0
 895: PPUSH
 896: CALL 1315 0 4
// end ; if TestCharacters ( 11_Cyrus ) = true then
 900: LD_STRING 11_Cyrus
 902: PPUSH
 903: CALL_OW 28
 907: PUSH
 908: LD_INT 1
 910: EQUAL
 911: IFFALSE 958
// begin Cyrus = PrepareUnit ( 11_Cyrus , true ) ;
 913: LD_ADDR_EXP 5
 917: PUSH
 918: LD_STRING 11_Cyrus
 920: PPUSH
 921: LD_INT 1
 923: PPUSH
 924: CALL 12243 0 2
 928: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 929: LD_EXP 5
 933: PPUSH
 934: LD_INT 1
 936: PPUSH
 937: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 941: LD_EXP 5
 945: PPUSH
 946: LD_INT 4
 948: PPUSH
 949: LD_INT 0
 951: PPUSH
 952: CALL_OW 49
// end else
 956: GO 974
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 958: LD_INT 4
 960: PPUSH
 961: LD_INT 0
 963: PPUSH
 964: LD_INT 1
 966: PPUSH
 967: LD_INT 0
 969: PPUSH
 970: CALL 1315 0 4
// end ; if TestCharacters ( 11_Denis ) = true then
 974: LD_STRING 11_Denis
 976: PPUSH
 977: CALL_OW 28
 981: PUSH
 982: LD_INT 1
 984: EQUAL
 985: IFFALSE 1032
// begin Denis = PrepareUnit ( 11_Denis , true ) ;
 987: LD_ADDR_EXP 6
 991: PUSH
 992: LD_STRING 11_Denis
 994: PPUSH
 995: LD_INT 1
 997: PPUSH
 998: CALL 12243 0 2
1002: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1003: LD_EXP 6
1007: PPUSH
1008: LD_INT 4
1010: PPUSH
1011: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1015: LD_EXP 6
1019: PPUSH
1020: LD_INT 4
1022: PPUSH
1023: LD_INT 0
1025: PPUSH
1026: CALL_OW 49
// end else
1030: GO 1048
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1032: LD_INT 4
1034: PPUSH
1035: LD_INT 0
1037: PPUSH
1038: LD_INT 1
1040: PPUSH
1041: LD_INT 0
1043: PPUSH
1044: CALL 1315 0 4
// end ; if TestCharacters ( 11_Frank ) = true then
1048: LD_STRING 11_Frank
1050: PPUSH
1051: CALL_OW 28
1055: PUSH
1056: LD_INT 1
1058: EQUAL
1059: IFFALSE 1106
// begin Frank = PrepareUnit ( 11_Frank , true ) ;
1061: LD_ADDR_EXP 12
1065: PUSH
1066: LD_STRING 11_Frank
1068: PPUSH
1069: LD_INT 1
1071: PPUSH
1072: CALL 12243 0 2
1076: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1077: LD_EXP 12
1081: PPUSH
1082: LD_INT 1
1084: PPUSH
1085: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1089: LD_EXP 12
1093: PPUSH
1094: LD_INT 4
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: CALL_OW 49
// end else
1104: GO 1122
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1106: LD_INT 4
1108: PPUSH
1109: LD_INT 0
1111: PPUSH
1112: LD_INT 1
1114: PPUSH
1115: LD_INT 0
1117: PPUSH
1118: CALL 1315 0 4
// end ; if TestCharacters ( 11_Cornell ) = true then
1122: LD_STRING 11_Cornell
1124: PPUSH
1125: CALL_OW 28
1129: PUSH
1130: LD_INT 1
1132: EQUAL
1133: IFFALSE 1180
// begin Cornel = PrepareUnit ( 11_Cornell , true ) ;
1135: LD_ADDR_EXP 10
1139: PUSH
1140: LD_STRING 11_Cornell
1142: PPUSH
1143: LD_INT 1
1145: PPUSH
1146: CALL 12243 0 2
1150: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1151: LD_EXP 10
1155: PPUSH
1156: LD_INT 1
1158: PPUSH
1159: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1163: LD_EXP 10
1167: PPUSH
1168: LD_INT 4
1170: PPUSH
1171: LD_INT 0
1173: PPUSH
1174: CALL_OW 49
// end else
1178: GO 1196
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1180: LD_INT 4
1182: PPUSH
1183: LD_INT 0
1185: PPUSH
1186: LD_INT 1
1188: PPUSH
1189: LD_INT 0
1191: PPUSH
1192: CALL 1315 0 4
// end ; tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1196: LD_ADDR_VAR 0 2
1200: PUSH
1201: LD_EXP 14
1205: PPUSH
1206: LD_INT 26
1208: PUSH
1209: LD_INT 1
1211: PUSH
1212: EMPTY
1213: LIST
1214: LIST
1215: PPUSH
1216: CALL_OW 72
1220: ST_TO_ADDR
// if not tmp then
1221: LD_VAR 0 2
1225: NOT
1226: IFFALSE 1255
// begin PrepareSoldier ( sex_male , 8 ) ;
1228: LD_INT 1
1230: PPUSH
1231: LD_INT 8
1233: PPUSH
1234: CALL_OW 381
// PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1238: CALL_OW 44
1242: PPUSH
1243: LD_INT 4
1245: PPUSH
1246: LD_INT 0
1248: PPUSH
1249: CALL_OW 49
// end else
1253: GO 1294
// begin PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1255: LD_VAR 0 2
1259: PUSH
1260: LD_INT 1
1262: ARRAY
1263: PPUSH
1264: LD_INT 4
1266: PPUSH
1267: LD_INT 0
1269: PPUSH
1270: CALL_OW 49
// others11 := others11 diff tmp [ 1 ] ;
1274: LD_ADDR_EXP 14
1278: PUSH
1279: LD_EXP 14
1283: PUSH
1284: LD_VAR 0 2
1288: PUSH
1289: LD_INT 1
1291: ARRAY
1292: DIFF
1293: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ) ;
1294: LD_ADDR_EXP 22
1298: PUSH
1299: LD_STRING Powell
1301: PPUSH
1302: LD_INT 0
1304: PPUSH
1305: CALL 12243 0 2
1309: ST_TO_ADDR
// end ;
1310: LD_VAR 0 1
1314: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1315: LD_INT 0
1317: PPUSH
1318: PPUSH
1319: PPUSH
1320: PPUSH
1321: PPUSH
// if mech = 1 then
1322: LD_VAR 0 4
1326: PUSH
1327: LD_INT 1
1329: EQUAL
1330: IFFALSE 1567
// begin if others11 > 0 then
1332: LD_EXP 14
1336: PUSH
1337: LD_INT 0
1339: GREATER
1340: IFFALSE 1507
// begin for i := 1 to others11 - 1 do
1342: LD_ADDR_VAR 0 6
1346: PUSH
1347: DOUBLE
1348: LD_INT 1
1350: DEC
1351: ST_TO_ADDR
1352: LD_EXP 14
1356: PUSH
1357: LD_INT 1
1359: MINUS
1360: PUSH
1361: FOR_TO
1362: IFFALSE 1444
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1364: LD_EXP 14
1368: PUSH
1369: LD_VAR 0 6
1373: ARRAY
1374: PPUSH
1375: LD_INT 3
1377: PPUSH
1378: CALL_OW 259
1382: PUSH
1383: LD_EXP 14
1387: PUSH
1388: LD_VAR 0 6
1392: PUSH
1393: LD_INT 1
1395: PLUS
1396: ARRAY
1397: PPUSH
1398: LD_INT 3
1400: PPUSH
1401: CALL_OW 259
1405: LESS
1406: IFFALSE 1442
// begin mecha = others11 [ i + 1 ] ;
1408: LD_ADDR_VAR 0 9
1412: PUSH
1413: LD_EXP 14
1417: PUSH
1418: LD_VAR 0 6
1422: PUSH
1423: LD_INT 1
1425: PLUS
1426: ARRAY
1427: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1428: LD_VAR 0 9
1432: PPUSH
1433: LD_INT 3
1435: PPUSH
1436: CALL_OW 336
// break ;
1440: GO 1444
// end ; end ;
1442: GO 1361
1444: POP
1445: POP
// if spawnMode = 1 then
1446: LD_VAR 0 3
1450: PUSH
1451: LD_INT 1
1453: EQUAL
1454: IFFALSE 1475
// PlaceUnitArea ( mecha , area , false ) else
1456: LD_VAR 0 9
1460: PPUSH
1461: LD_VAR 0 1
1465: PPUSH
1466: LD_INT 0
1468: PPUSH
1469: CALL_OW 49
1473: GO 1489
// PlaceHumanInUnit ( mecha , veh ) ;
1475: LD_VAR 0 9
1479: PPUSH
1480: LD_VAR 0 2
1484: PPUSH
1485: CALL_OW 52
// others11 = others11 diff mecha ;
1489: LD_ADDR_EXP 14
1493: PUSH
1494: LD_EXP 14
1498: PUSH
1499: LD_VAR 0 9
1503: DIFF
1504: ST_TO_ADDR
// end else
1505: GO 1565
// begin hc_name =  ;
1507: LD_ADDR_OWVAR 26
1511: PUSH
1512: LD_STRING 
1514: ST_TO_ADDR
// hc_gallery =  ;
1515: LD_ADDR_OWVAR 33
1519: PUSH
1520: LD_STRING 
1522: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1523: LD_INT 0
1525: PPUSH
1526: LD_INT 7
1528: PPUSH
1529: LD_INT 9
1531: PPUSH
1532: CALL_OW 12
1536: PPUSH
1537: CALL_OW 383
// un = CreateHuman ;
1541: LD_ADDR_VAR 0 7
1545: PUSH
1546: CALL_OW 44
1550: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1551: LD_VAR 0 7
1555: PPUSH
1556: LD_VAR 0 2
1560: PPUSH
1561: CALL_OW 52
// end ; end else
1565: GO 1736
// begin if others11 > 0 then
1567: LD_EXP 14
1571: PUSH
1572: LD_INT 0
1574: GREATER
1575: IFFALSE 1648
// begin if spawnMode = 1 then
1577: LD_VAR 0 3
1581: PUSH
1582: LD_INT 1
1584: EQUAL
1585: IFFALSE 1610
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1587: LD_EXP 14
1591: PUSH
1592: LD_INT 1
1594: ARRAY
1595: PPUSH
1596: LD_VAR 0 1
1600: PPUSH
1601: LD_INT 0
1603: PPUSH
1604: CALL_OW 49
1608: GO 1628
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1610: LD_EXP 14
1614: PUSH
1615: LD_INT 1
1617: ARRAY
1618: PPUSH
1619: LD_VAR 0 2
1623: PPUSH
1624: CALL_OW 52
// others11 = Delete ( others11 , 1 ) ;
1628: LD_ADDR_EXP 14
1632: PUSH
1633: LD_EXP 14
1637: PPUSH
1638: LD_INT 1
1640: PPUSH
1641: CALL_OW 3
1645: ST_TO_ADDR
// end else
1646: GO 1736
// begin hc_name =  ;
1648: LD_ADDR_OWVAR 26
1652: PUSH
1653: LD_STRING 
1655: ST_TO_ADDR
// hc_gallery =  ;
1656: LD_ADDR_OWVAR 33
1660: PUSH
1661: LD_STRING 
1663: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1664: LD_INT 0
1666: PPUSH
1667: LD_INT 1
1669: PUSH
1670: LD_INT 2
1672: PUSH
1673: LD_INT 3
1675: PUSH
1676: LD_INT 4
1678: PUSH
1679: EMPTY
1680: LIST
1681: LIST
1682: LIST
1683: LIST
1684: PUSH
1685: LD_INT 1
1687: PPUSH
1688: LD_INT 4
1690: PPUSH
1691: CALL_OW 12
1695: ARRAY
1696: PPUSH
1697: LD_INT 7
1699: PPUSH
1700: LD_INT 9
1702: PPUSH
1703: CALL_OW 12
1707: PPUSH
1708: CALL_OW 380
// un = CreateHuman ;
1712: LD_ADDR_VAR 0 7
1716: PUSH
1717: CALL_OW 44
1721: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1722: LD_VAR 0 7
1726: PPUSH
1727: LD_VAR 0 2
1731: PPUSH
1732: CALL_OW 52
// end ; end ; end ;
1736: LD_VAR 0 5
1740: RET
// export function PrepareVehicles ; var veh ; begin
1741: LD_INT 0
1743: PPUSH
1744: PPUSH
// uc_side = 1 ;
1745: LD_ADDR_OWVAR 20
1749: PUSH
1750: LD_INT 1
1752: ST_TO_ADDR
// uc_nation = 1 ;
1753: LD_ADDR_OWVAR 21
1757: PUSH
1758: LD_INT 1
1760: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1761: LD_ADDR_OWVAR 37
1765: PUSH
1766: LD_INT 3
1768: ST_TO_ADDR
// vc_engine = 3 ;
1769: LD_ADDR_OWVAR 39
1773: PUSH
1774: LD_INT 3
1776: ST_TO_ADDR
// vc_control = 3 ;
1777: LD_ADDR_OWVAR 38
1781: PUSH
1782: LD_INT 3
1784: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1785: LD_ADDR_OWVAR 40
1789: PUSH
1790: LD_INT 4
1792: ST_TO_ADDR
// veh = CreateVehicle ;
1793: LD_ADDR_VAR 0 2
1797: PUSH
1798: CALL_OW 45
1802: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1803: LD_VAR 0 2
1807: PPUSH
1808: LD_INT 4
1810: PPUSH
1811: LD_INT 0
1813: PPUSH
1814: CALL_OW 49
// vc_weapon = us_double_gun ;
1818: LD_ADDR_OWVAR 40
1822: PUSH
1823: LD_INT 5
1825: ST_TO_ADDR
// vc_control = 1 ;
1826: LD_ADDR_OWVAR 38
1830: PUSH
1831: LD_INT 1
1833: ST_TO_ADDR
// veh = CreateVehicle ;
1834: LD_ADDR_VAR 0 2
1838: PUSH
1839: CALL_OW 45
1843: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1844: LD_VAR 0 2
1848: PPUSH
1849: LD_INT 4
1851: PPUSH
1852: LD_INT 0
1854: PPUSH
1855: CALL_OW 49
// vc_weapon = us_light_gun ;
1859: LD_ADDR_OWVAR 40
1863: PUSH
1864: LD_INT 3
1866: ST_TO_ADDR
// vc_control = 3 ;
1867: LD_ADDR_OWVAR 38
1871: PUSH
1872: LD_INT 3
1874: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
1875: LD_ADDR_OWVAR 37
1879: PUSH
1880: LD_INT 2
1882: ST_TO_ADDR
// veh = CreateVehicle ;
1883: LD_ADDR_VAR 0 2
1887: PUSH
1888: CALL_OW 45
1892: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1893: LD_VAR 0 2
1897: PPUSH
1898: LD_INT 4
1900: PPUSH
1901: LD_INT 0
1903: PPUSH
1904: CALL_OW 49
// vc_weapon = us_gatling_gun ;
1908: LD_ADDR_OWVAR 40
1912: PUSH
1913: LD_INT 4
1915: ST_TO_ADDR
// veh = CreateVehicle ;
1916: LD_ADDR_VAR 0 2
1920: PUSH
1921: CALL_OW 45
1925: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1926: LD_VAR 0 2
1930: PPUSH
1931: LD_INT 4
1933: PPUSH
1934: LD_INT 0
1936: PPUSH
1937: CALL_OW 49
// end ;
1941: LD_VAR 0 1
1945: RET
// export function PowellSupport1 ; var veh , un ; begin
1946: LD_INT 0
1948: PPUSH
1949: PPUSH
1950: PPUSH
// uc_side = 1 ;
1951: LD_ADDR_OWVAR 20
1955: PUSH
1956: LD_INT 1
1958: ST_TO_ADDR
// uc_nation = 1 ;
1959: LD_ADDR_OWVAR 21
1963: PUSH
1964: LD_INT 1
1966: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) = true then
1967: LD_STRING 11_Brown
1969: PPUSH
1970: CALL_OW 28
1974: PUSH
1975: LD_INT 1
1977: EQUAL
1978: IFFALSE 2025
// begin Brown = PrepareUnit ( 11_Brown , true ) ;
1980: LD_ADDR_EXP 7
1984: PUSH
1985: LD_STRING 11_Brown
1987: PPUSH
1988: LD_INT 1
1990: PPUSH
1991: CALL 12243 0 2
1995: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
1996: LD_EXP 7
2000: PPUSH
2001: LD_INT 2
2003: PPUSH
2004: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
2008: LD_EXP 7
2012: PPUSH
2013: LD_INT 4
2015: PPUSH
2016: LD_INT 0
2018: PPUSH
2019: CALL_OW 49
// end else
2023: GO 2041
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2025: LD_INT 4
2027: PPUSH
2028: LD_INT 0
2030: PPUSH
2031: LD_INT 1
2033: PPUSH
2034: LD_INT 0
2036: PPUSH
2037: CALL 1315 0 4
// end ; if TestCharacters ( 11_Gary ) = true then
2041: LD_STRING 11_Gary
2043: PPUSH
2044: CALL_OW 28
2048: PUSH
2049: LD_INT 1
2051: EQUAL
2052: IFFALSE 2099
// begin Gary = PrepareUnit ( 11_Gary , true ) ;
2054: LD_ADDR_EXP 11
2058: PUSH
2059: LD_STRING 11_Gary
2061: PPUSH
2062: LD_INT 1
2064: PPUSH
2065: CALL 12243 0 2
2069: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
2070: LD_EXP 11
2074: PPUSH
2075: LD_INT 2
2077: PPUSH
2078: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2082: LD_EXP 11
2086: PPUSH
2087: LD_INT 4
2089: PPUSH
2090: LD_INT 0
2092: PPUSH
2093: CALL_OW 49
// end else
2097: GO 2115
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2099: LD_INT 4
2101: PPUSH
2102: LD_INT 0
2104: PPUSH
2105: LD_INT 1
2107: PPUSH
2108: LD_INT 0
2110: PPUSH
2111: CALL 1315 0 4
// end ; vc_chassis = us_medium_tracked ;
2115: LD_ADDR_OWVAR 37
2119: PUSH
2120: LD_INT 3
2122: ST_TO_ADDR
// vc_engine = 3 ;
2123: LD_ADDR_OWVAR 39
2127: PUSH
2128: LD_INT 3
2130: ST_TO_ADDR
// vc_control = 1 ;
2131: LD_ADDR_OWVAR 38
2135: PUSH
2136: LD_INT 1
2138: ST_TO_ADDR
// vc_weapon = us_crane ;
2139: LD_ADDR_OWVAR 40
2143: PUSH
2144: LD_INT 13
2146: ST_TO_ADDR
// veh = CreateVehicle ;
2147: LD_ADDR_VAR 0 2
2151: PUSH
2152: CALL_OW 45
2156: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2157: LD_VAR 0 2
2161: PPUSH
2162: LD_INT 4
2164: PPUSH
2165: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2169: LD_VAR 0 2
2173: PPUSH
2174: LD_INT 4
2176: PPUSH
2177: LD_INT 0
2179: PPUSH
2180: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2184: LD_INT 4
2186: PPUSH
2187: LD_VAR 0 2
2191: PPUSH
2192: LD_INT 2
2194: PPUSH
2195: LD_INT 1
2197: PPUSH
2198: CALL 1315 0 4
// vc_weapon = 9 ;
2202: LD_ADDR_OWVAR 40
2206: PUSH
2207: LD_INT 9
2209: ST_TO_ADDR
// veh = CreateVehicle ;
2210: LD_ADDR_VAR 0 2
2214: PUSH
2215: CALL_OW 45
2219: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_INT 4
2227: PPUSH
2228: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2232: LD_VAR 0 2
2236: PPUSH
2237: LD_INT 4
2239: PPUSH
2240: LD_INT 0
2242: PPUSH
2243: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2247: LD_INT 4
2249: PPUSH
2250: LD_VAR 0 2
2254: PPUSH
2255: LD_INT 2
2257: PPUSH
2258: LD_INT 1
2260: PPUSH
2261: CALL 1315 0 4
// vc_control = 3 ;
2265: LD_ADDR_OWVAR 38
2269: PUSH
2270: LD_INT 3
2272: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2273: LD_ADDR_OWVAR 40
2277: PUSH
2278: LD_INT 12
2280: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
2281: LD_ADDR_EXP 15
2285: PUSH
2286: CALL_OW 45
2290: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
2291: LD_ADDR_EXP 16
2295: PUSH
2296: CALL_OW 45
2300: ST_TO_ADDR
// SetDir ( amCargo1 , 4 ) ;
2301: LD_EXP 15
2305: PPUSH
2306: LD_INT 4
2308: PPUSH
2309: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
2313: LD_EXP 16
2317: PPUSH
2318: LD_INT 4
2320: PPUSH
2321: CALL_OW 233
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
2325: LD_EXP 15
2329: PPUSH
2330: LD_INT 4
2332: PPUSH
2333: LD_INT 0
2335: PPUSH
2336: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
2340: LD_EXP 16
2344: PPUSH
2345: LD_INT 4
2347: PPUSH
2348: LD_INT 0
2350: PPUSH
2351: CALL_OW 49
// AddCargo ( amCargo1 , 3 , 100 ) ;
2355: LD_EXP 15
2359: PPUSH
2360: LD_INT 3
2362: PPUSH
2363: LD_INT 100
2365: PPUSH
2366: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
2370: LD_EXP 16
2374: PPUSH
2375: LD_INT 1
2377: PPUSH
2378: LD_INT 80
2380: PPUSH
2381: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
2385: LD_EXP 16
2389: PPUSH
2390: LD_INT 3
2392: PPUSH
2393: LD_INT 20
2395: PPUSH
2396: CALL_OW 291
// end ;
2400: LD_VAR 0 1
2404: RET
// export function PowellSupport2 ; var veh , un ; begin
2405: LD_INT 0
2407: PPUSH
2408: PPUSH
2409: PPUSH
// uc_side = 1 ;
2410: LD_ADDR_OWVAR 20
2414: PUSH
2415: LD_INT 1
2417: ST_TO_ADDR
// uc_nation = 1 ;
2418: LD_ADDR_OWVAR 21
2422: PUSH
2423: LD_INT 1
2425: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2426: LD_ADDR_OWVAR 37
2430: PUSH
2431: LD_INT 2
2433: ST_TO_ADDR
// vc_engine = 3 ;
2434: LD_ADDR_OWVAR 39
2438: PUSH
2439: LD_INT 3
2441: ST_TO_ADDR
// vc_control = 3 ;
2442: LD_ADDR_OWVAR 38
2446: PUSH
2447: LD_INT 3
2449: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2450: LD_ADDR_OWVAR 40
2454: PUSH
2455: LD_INT 3
2457: ST_TO_ADDR
// veh = CreateVehicle ;
2458: LD_ADDR_VAR 0 2
2462: PUSH
2463: CALL_OW 45
2467: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2468: LD_VAR 0 2
2472: PPUSH
2473: LD_INT 4
2475: PPUSH
2476: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2480: LD_VAR 0 2
2484: PPUSH
2485: LD_INT 4
2487: PPUSH
2488: LD_INT 0
2490: PPUSH
2491: CALL_OW 49
// vc_control = 1 ;
2495: LD_ADDR_OWVAR 38
2499: PUSH
2500: LD_INT 1
2502: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2503: LD_ADDR_OWVAR 37
2507: PUSH
2508: LD_INT 2
2510: ST_TO_ADDR
// vc_weapon = us_double_gun ;
2511: LD_ADDR_OWVAR 40
2515: PUSH
2516: LD_INT 5
2518: ST_TO_ADDR
// veh = CreateVehicle ;
2519: LD_ADDR_VAR 0 2
2523: PUSH
2524: CALL_OW 45
2528: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2529: LD_VAR 0 2
2533: PPUSH
2534: LD_INT 4
2536: PPUSH
2537: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2541: LD_VAR 0 2
2545: PPUSH
2546: LD_INT 4
2548: PPUSH
2549: LD_INT 0
2551: PPUSH
2552: CALL_OW 49
// if TestCharacters ( 11_Bobby ) = true then
2556: LD_STRING 11_Bobby
2558: PPUSH
2559: CALL_OW 28
2563: PUSH
2564: LD_INT 1
2566: EQUAL
2567: IFFALSE 2613
// begin Bobby = PrepareUnit ( 11_Bobby , true ) ;
2569: LD_ADDR_EXP 4
2573: PUSH
2574: LD_STRING 11_Bobby
2576: PPUSH
2577: LD_INT 1
2579: PPUSH
2580: CALL 12243 0 2
2584: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2585: LD_EXP 4
2589: PPUSH
2590: LD_INT 3
2592: PPUSH
2593: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2597: LD_EXP 4
2601: PPUSH
2602: LD_VAR 0 2
2606: PPUSH
2607: CALL_OW 52
// end else
2611: GO 2631
// begin PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2613: LD_INT 0
2615: PPUSH
2616: LD_VAR 0 2
2620: PPUSH
2621: LD_INT 2
2623: PPUSH
2624: LD_INT 0
2626: PPUSH
2627: CALL 1315 0 4
// end ; if TestCharacters ( 11_Houten ) = true then
2631: LD_STRING 11_Houten
2633: PPUSH
2634: CALL_OW 28
2638: PUSH
2639: LD_INT 1
2641: EQUAL
2642: IFFALSE 2689
// begin Houten = PrepareUnit ( 11_Houten , true ) ;
2644: LD_ADDR_EXP 9
2648: PUSH
2649: LD_STRING 11_Houten
2651: PPUSH
2652: LD_INT 1
2654: PPUSH
2655: CALL 12243 0 2
2659: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2660: LD_EXP 9
2664: PPUSH
2665: LD_INT 1
2667: PPUSH
2668: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2672: LD_EXP 9
2676: PPUSH
2677: LD_INT 4
2679: PPUSH
2680: LD_INT 0
2682: PPUSH
2683: CALL_OW 49
// end else
2687: GO 2705
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2689: LD_INT 4
2691: PPUSH
2692: LD_INT 0
2694: PPUSH
2695: LD_INT 1
2697: PPUSH
2698: LD_INT 0
2700: PPUSH
2701: CALL 1315 0 4
// end ; vc_control = 3 ;
2705: LD_ADDR_OWVAR 38
2709: PUSH
2710: LD_INT 3
2712: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2713: LD_ADDR_OWVAR 40
2717: PUSH
2718: LD_INT 12
2720: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
2721: LD_ADDR_EXP 17
2725: PUSH
2726: CALL_OW 45
2730: ST_TO_ADDR
// SetDir ( amCargo3 , 4 ) ;
2731: LD_EXP 17
2735: PPUSH
2736: LD_INT 4
2738: PPUSH
2739: CALL_OW 233
// amCargo4 = CreateVehicle ;
2743: LD_ADDR_EXP 18
2747: PUSH
2748: CALL_OW 45
2752: ST_TO_ADDR
// SetDir ( amCargo4 , 4 ) ;
2753: LD_EXP 18
2757: PPUSH
2758: LD_INT 4
2760: PPUSH
2761: CALL_OW 233
// amCargo5 = CreateVehicle ;
2765: LD_ADDR_EXP 19
2769: PUSH
2770: CALL_OW 45
2774: ST_TO_ADDR
// SetDir ( amCargo5 , 4 ) ;
2775: LD_EXP 19
2779: PPUSH
2780: LD_INT 4
2782: PPUSH
2783: CALL_OW 233
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
2787: LD_EXP 17
2791: PPUSH
2792: LD_INT 4
2794: PPUSH
2795: LD_INT 0
2797: PPUSH
2798: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
2802: LD_EXP 18
2806: PPUSH
2807: LD_INT 4
2809: PPUSH
2810: LD_INT 0
2812: PPUSH
2813: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
2817: LD_EXP 19
2821: PPUSH
2822: LD_INT 4
2824: PPUSH
2825: LD_INT 0
2827: PPUSH
2828: CALL_OW 49
// if kurtStatus > 0 then
2832: LD_EXP 26
2836: PUSH
2837: LD_INT 0
2839: GREATER
2840: IFFALSE 2889
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2842: LD_EXP 17
2846: PPUSH
2847: LD_INT 1
2849: PPUSH
2850: LD_INT 100
2852: PPUSH
2853: CALL_OW 291
// AddCargo ( amCargo4 , 1 , 100 ) ;
2857: LD_EXP 18
2861: PPUSH
2862: LD_INT 1
2864: PPUSH
2865: LD_INT 100
2867: PPUSH
2868: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 80 ) ;
2872: LD_EXP 19
2876: PPUSH
2877: LD_INT 3
2879: PPUSH
2880: LD_INT 80
2882: PPUSH
2883: CALL_OW 291
// end else
2887: GO 2934
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2889: LD_EXP 17
2893: PPUSH
2894: LD_INT 1
2896: PPUSH
2897: LD_INT 100
2899: PPUSH
2900: CALL_OW 291
// AddCargo ( amCargo4 , 3 , 60 ) ;
2904: LD_EXP 18
2908: PPUSH
2909: LD_INT 3
2911: PPUSH
2912: LD_INT 60
2914: PPUSH
2915: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 100 ) ;
2919: LD_EXP 19
2923: PPUSH
2924: LD_INT 3
2926: PPUSH
2927: LD_INT 100
2929: PPUSH
2930: CALL_OW 291
// end ; end ;
2934: LD_VAR 0 1
2938: RET
// export function PowellSupport3 ; var veh , un ; begin
2939: LD_INT 0
2941: PPUSH
2942: PPUSH
2943: PPUSH
// uc_side = 1 ;
2944: LD_ADDR_OWVAR 20
2948: PUSH
2949: LD_INT 1
2951: ST_TO_ADDR
// uc_nation = 1 ;
2952: LD_ADDR_OWVAR 21
2956: PUSH
2957: LD_INT 1
2959: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2960: LD_INT 4
2962: PPUSH
2963: LD_INT 0
2965: PPUSH
2966: LD_INT 1
2968: PPUSH
2969: LD_INT 0
2971: PPUSH
2972: CALL 1315 0 4
// vc_chassis = us_medium_wheeled ;
2976: LD_ADDR_OWVAR 37
2980: PUSH
2981: LD_INT 2
2983: ST_TO_ADDR
// vc_engine = 3 ;
2984: LD_ADDR_OWVAR 39
2988: PUSH
2989: LD_INT 3
2991: ST_TO_ADDR
// vc_control = 3 ;
2992: LD_ADDR_OWVAR 38
2996: PUSH
2997: LD_INT 3
2999: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
3000: LD_ADDR_OWVAR 40
3004: PUSH
3005: LD_INT 12
3007: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
3008: LD_ADDR_EXP 20
3012: PUSH
3013: CALL_OW 45
3017: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
3018: LD_ADDR_EXP 21
3022: PUSH
3023: CALL_OW 45
3027: ST_TO_ADDR
// SetDir ( amCargo6 , 4 ) ;
3028: LD_EXP 20
3032: PPUSH
3033: LD_INT 4
3035: PPUSH
3036: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
3040: LD_EXP 21
3044: PPUSH
3045: LD_INT 4
3047: PPUSH
3048: CALL_OW 233
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
3052: LD_EXP 20
3056: PPUSH
3057: LD_INT 4
3059: PPUSH
3060: LD_INT 0
3062: PPUSH
3063: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
3067: LD_EXP 21
3071: PPUSH
3072: LD_INT 4
3074: PPUSH
3075: LD_INT 0
3077: PPUSH
3078: CALL_OW 49
// AddCargo ( amCargo6 , 1 , 100 ) ;
3082: LD_EXP 20
3086: PPUSH
3087: LD_INT 1
3089: PPUSH
3090: LD_INT 100
3092: PPUSH
3093: CALL_OW 291
// AddCargo ( amCargo7 , 1 , 100 ) ;
3097: LD_EXP 21
3101: PPUSH
3102: LD_INT 1
3104: PPUSH
3105: LD_INT 100
3107: PPUSH
3108: CALL_OW 291
// end ; end_of_file
3112: LD_VAR 0 1
3116: RET
// export function PrepareRussianCommander ; begin
3117: LD_INT 0
3119: PPUSH
// uc_side = 3 ;
3120: LD_ADDR_OWVAR 20
3124: PUSH
3125: LD_INT 3
3127: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ) ;
3128: LD_ADDR_EXP 23
3132: PUSH
3133: LD_STRING Davidov
3135: PPUSH
3136: LD_INT 0
3138: PPUSH
3139: CALL 12243 0 2
3143: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3144: LD_EXP 23
3148: PPUSH
3149: LD_INT 3
3151: PPUSH
3152: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
3156: LD_ADDR_EXP 34
3160: PUSH
3161: LD_EXP 34
3165: PUSH
3166: LD_EXP 23
3170: ADD
3171: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3172: LD_EXP 34
3176: PPUSH
3177: LD_INT 4
3179: PPUSH
3180: CALL_OW 336
// end ;
3184: LD_VAR 0 1
3188: RET
// export function PrepareEastBase ; var i , un ; begin
3189: LD_INT 0
3191: PPUSH
3192: PPUSH
3193: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3194: LD_INT 3
3196: PPUSH
3197: LD_INT 3
3199: PPUSH
3200: LD_INT 121
3202: PPUSH
3203: LD_EXP 36
3207: PPUSH
3208: LD_EXP 37
3212: PPUSH
3213: CALL_OW 12
3217: PPUSH
3218: LD_INT 1
3220: PPUSH
3221: LD_INT 3
3223: PPUSH
3224: CALL 12957 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3228: LD_INT 3
3230: PPUSH
3231: LD_INT 3
3233: PPUSH
3234: LD_INT 121
3236: PPUSH
3237: LD_EXP 36
3241: PPUSH
3242: LD_EXP 37
3246: PPUSH
3247: CALL_OW 12
3251: PPUSH
3252: LD_INT 9
3254: PPUSH
3255: LD_INT 3
3257: PPUSH
3258: CALL 12957 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3262: LD_INT 3
3264: PPUSH
3265: LD_INT 3
3267: PPUSH
3268: LD_INT 4
3270: PPUSH
3271: LD_EXP 36
3275: PPUSH
3276: LD_EXP 37
3280: PPUSH
3281: CALL_OW 12
3285: PPUSH
3286: LD_INT 2
3288: PPUSH
3289: LD_INT 6
3291: PPUSH
3292: CALL 12957 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3296: LD_INT 3
3298: PPUSH
3299: LD_INT 3
3301: PPUSH
3302: LD_INT 112
3304: PPUSH
3305: LD_EXP 36
3309: PPUSH
3310: LD_EXP 37
3314: PPUSH
3315: CALL_OW 12
3319: PPUSH
3320: LD_INT 3
3322: PPUSH
3323: LD_INT 6
3325: PPUSH
3326: CALL 12957 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3330: LD_INT 3
3332: PPUSH
3333: LD_INT 3
3335: PPUSH
3336: LD_INT 47
3338: PPUSH
3339: LD_EXP 36
3343: PPUSH
3344: LD_EXP 37
3348: PPUSH
3349: CALL_OW 12
3353: PPUSH
3354: LD_INT 4
3356: PPUSH
3357: LD_INT 6
3359: PPUSH
3360: CALL 12957 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3364: LD_INT 3
3366: PPUSH
3367: LD_INT 3
3369: PPUSH
3370: LD_INT 129
3372: PPUSH
3373: LD_EXP 36
3377: PPUSH
3378: LD_EXP 37
3382: PPUSH
3383: CALL_OW 12
3387: PPUSH
3388: LD_INT 4
3390: PPUSH
3391: LD_INT 6
3393: PPUSH
3394: CALL 12957 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3398: LD_INT 3
3400: PPUSH
3401: LD_INT 3
3403: PPUSH
3404: LD_INT 135
3406: PPUSH
3407: LD_EXP 36
3411: PPUSH
3412: LD_EXP 37
3416: PPUSH
3417: CALL_OW 12
3421: PPUSH
3422: LD_INT 4
3424: PPUSH
3425: LD_INT 6
3427: PPUSH
3428: CALL 12957 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3432: LD_ADDR_VAR 0 2
3436: PUSH
3437: LD_INT 22
3439: PUSH
3440: LD_INT 3
3442: PUSH
3443: EMPTY
3444: LIST
3445: LIST
3446: PUSH
3447: LD_INT 30
3449: PUSH
3450: LD_INT 32
3452: PUSH
3453: EMPTY
3454: LIST
3455: LIST
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: PPUSH
3461: CALL_OW 69
3465: PUSH
3466: FOR_IN
3467: IFFALSE 3507
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3469: LD_INT 3
3471: PPUSH
3472: LD_INT 3
3474: PPUSH
3475: LD_VAR 0 2
3479: PPUSH
3480: LD_EXP 36
3484: PPUSH
3485: LD_EXP 37
3489: PPUSH
3490: CALL_OW 12
3494: PPUSH
3495: LD_INT 1
3497: PPUSH
3498: LD_INT 1
3500: PPUSH
3501: CALL 12957 0 6
3505: GO 3466
3507: POP
3508: POP
// for i = 1 to 5 do
3509: LD_ADDR_VAR 0 2
3513: PUSH
3514: DOUBLE
3515: LD_INT 1
3517: DEC
3518: ST_TO_ADDR
3519: LD_INT 5
3521: PUSH
3522: FOR_TO
3523: IFFALSE 3622
// begin uc_side = 3 ;
3525: LD_ADDR_OWVAR 20
3529: PUSH
3530: LD_INT 3
3532: ST_TO_ADDR
// uc_nation = 3 ;
3533: LD_ADDR_OWVAR 21
3537: PUSH
3538: LD_INT 3
3540: ST_TO_ADDR
// hc_gallery =  ;
3541: LD_ADDR_OWVAR 33
3545: PUSH
3546: LD_STRING 
3548: ST_TO_ADDR
// hc_name =  ;
3549: LD_ADDR_OWVAR 26
3553: PUSH
3554: LD_STRING 
3556: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3557: LD_INT 0
3559: PPUSH
3560: LD_INT 4
3562: PPUSH
3563: LD_EXP 36
3567: PPUSH
3568: LD_EXP 37
3572: PPUSH
3573: CALL_OW 12
3577: PPUSH
3578: CALL_OW 380
// un = CreateHuman ;
3582: LD_ADDR_VAR 0 3
3586: PUSH
3587: CALL_OW 44
3591: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3592: LD_VAR 0 3
3596: PPUSH
3597: LD_INT 3
3599: PPUSH
3600: CALL_OW 52
// RuScientists = RuScientists ^ un ;
3604: LD_ADDR_EXP 34
3608: PUSH
3609: LD_EXP 34
3613: PUSH
3614: LD_VAR 0 3
3618: ADD
3619: ST_TO_ADDR
// end ;
3620: GO 3522
3622: POP
3623: POP
// end ;
3624: LD_VAR 0 1
3628: RET
// export function PrepareWestBase ; var i , un ; begin
3629: LD_INT 0
3631: PPUSH
3632: PPUSH
3633: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3634: LD_INT 3
3636: PPUSH
3637: LD_INT 3
3639: PPUSH
3640: LD_INT 6
3642: PPUSH
3643: LD_EXP 36
3647: PPUSH
3648: LD_EXP 37
3652: PPUSH
3653: CALL_OW 12
3657: PPUSH
3658: LD_INT 2
3660: PPUSH
3661: LD_INT 3
3663: PPUSH
3664: CALL 12957 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3668: LD_INT 3
3670: PPUSH
3671: LD_INT 3
3673: PPUSH
3674: LD_INT 91
3676: PPUSH
3677: LD_EXP 36
3681: PPUSH
3682: LD_EXP 37
3686: PPUSH
3687: CALL_OW 12
3691: PPUSH
3692: LD_INT 4
3694: PPUSH
3695: LD_INT 3
3697: PPUSH
3698: CALL 12957 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3702: LD_INT 3
3704: PPUSH
3705: LD_INT 3
3707: PPUSH
3708: LD_INT 21
3710: PPUSH
3711: LD_EXP 36
3715: PPUSH
3716: LD_EXP 37
3720: PPUSH
3721: CALL_OW 12
3725: PPUSH
3726: LD_INT 3
3728: PPUSH
3729: LD_INT 6
3731: PPUSH
3732: CALL 12957 0 6
// end ;
3736: LD_VAR 0 1
3740: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3741: LD_INT 0
3743: PPUSH
3744: PPUSH
3745: PPUSH
3746: PPUSH
// uc_side = 3 ;
3747: LD_ADDR_OWVAR 20
3751: PUSH
3752: LD_INT 3
3754: ST_TO_ADDR
// uc_nation = 3 ;
3755: LD_ADDR_OWVAR 21
3759: PUSH
3760: LD_INT 3
3762: ST_TO_ADDR
// for i = 1 to 5 do
3763: LD_ADDR_VAR 0 2
3767: PUSH
3768: DOUBLE
3769: LD_INT 1
3771: DEC
3772: ST_TO_ADDR
3773: LD_INT 5
3775: PUSH
3776: FOR_TO
3777: IFFALSE 3847
// begin hc_gallery =  ;
3779: LD_ADDR_OWVAR 33
3783: PUSH
3784: LD_STRING 
3786: ST_TO_ADDR
// hc_name =  ;
3787: LD_ADDR_OWVAR 26
3791: PUSH
3792: LD_STRING 
3794: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3795: LD_INT 0
3797: PPUSH
3798: LD_INT 9
3800: PPUSH
3801: LD_EXP 36
3805: PPUSH
3806: LD_EXP 37
3810: PPUSH
3811: CALL_OW 12
3815: PPUSH
3816: CALL_OW 380
// un = CreateHuman ;
3820: LD_ADDR_VAR 0 3
3824: PUSH
3825: CALL_OW 44
3829: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3830: LD_VAR 0 3
3834: PPUSH
3835: LD_INT 8
3837: PPUSH
3838: LD_INT 0
3840: PPUSH
3841: CALL_OW 49
// end ;
3845: GO 3776
3847: POP
3848: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
3849: LD_ADDR_VAR 0 2
3853: PUSH
3854: DOUBLE
3855: LD_INT 1
3857: DEC
3858: ST_TO_ADDR
3859: LD_INT 2
3861: PUSH
3862: LD_INT 3
3864: PUSH
3865: LD_INT 4
3867: PUSH
3868: EMPTY
3869: LIST
3870: LIST
3871: LIST
3872: PUSH
3873: LD_OWVAR 67
3877: ARRAY
3878: PUSH
3879: FOR_TO
3880: IFFALSE 3950
// begin hc_gallery =  ;
3882: LD_ADDR_OWVAR 33
3886: PUSH
3887: LD_STRING 
3889: ST_TO_ADDR
// hc_name =  ;
3890: LD_ADDR_OWVAR 26
3894: PUSH
3895: LD_STRING 
3897: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3898: LD_INT 0
3900: PPUSH
3901: LD_INT 4
3903: PPUSH
3904: LD_EXP 36
3908: PPUSH
3909: LD_EXP 37
3913: PPUSH
3914: CALL_OW 12
3918: PPUSH
3919: CALL_OW 380
// un = CreateHuman ;
3923: LD_ADDR_VAR 0 3
3927: PUSH
3928: CALL_OW 44
3932: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3933: LD_VAR 0 3
3937: PPUSH
3938: LD_INT 8
3940: PPUSH
3941: LD_INT 0
3943: PPUSH
3944: CALL_OW 49
// end ;
3948: GO 3879
3950: POP
3951: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3952: LD_ADDR_VAR 0 2
3956: PUSH
3957: DOUBLE
3958: LD_INT 1
3960: DEC
3961: ST_TO_ADDR
3962: LD_INT 3
3964: PUSH
3965: LD_INT 4
3967: PUSH
3968: LD_INT 5
3970: PUSH
3971: EMPTY
3972: LIST
3973: LIST
3974: LIST
3975: PUSH
3976: LD_OWVAR 67
3980: ARRAY
3981: PUSH
3982: FOR_TO
3983: IFFALSE 4179
// begin vc_engine = 3 ;
3985: LD_ADDR_OWVAR 39
3989: PUSH
3990: LD_INT 3
3992: ST_TO_ADDR
// vc_control = 1 ;
3993: LD_ADDR_OWVAR 38
3997: PUSH
3998: LD_INT 1
4000: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
4001: LD_ADDR_OWVAR 40
4005: PUSH
4006: LD_INT 42
4008: PUSH
4009: LD_INT 43
4011: PUSH
4012: LD_INT 44
4014: PUSH
4015: LD_INT 45
4017: PUSH
4018: LD_INT 46
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: PUSH
4028: LD_INT 1
4030: PPUSH
4031: LD_INT 5
4033: PPUSH
4034: CALL_OW 12
4038: ARRAY
4039: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4040: LD_OWVAR 40
4044: PUSH
4045: LD_INT 46
4047: EQUAL
4048: IFFALSE 4060
// vc_chassis = ru_heavy_tracked else
4050: LD_ADDR_OWVAR 37
4054: PUSH
4055: LD_INT 24
4057: ST_TO_ADDR
4058: GO 4087
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4060: LD_ADDR_OWVAR 37
4064: PUSH
4065: LD_INT 22
4067: PUSH
4068: LD_INT 21
4070: PUSH
4071: EMPTY
4072: LIST
4073: LIST
4074: PUSH
4075: LD_INT 1
4077: PPUSH
4078: LD_INT 2
4080: PPUSH
4081: CALL_OW 12
4085: ARRAY
4086: ST_TO_ADDR
// veh = CreateVehicle ;
4087: LD_ADDR_VAR 0 4
4091: PUSH
4092: CALL_OW 45
4096: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4097: LD_VAR 0 4
4101: PPUSH
4102: LD_INT 3
4104: PPUSH
4105: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4109: LD_VAR 0 4
4113: PPUSH
4114: LD_INT 5
4116: PPUSH
4117: LD_INT 0
4119: PPUSH
4120: CALL_OW 49
// hc_gallery =  ;
4124: LD_ADDR_OWVAR 33
4128: PUSH
4129: LD_STRING 
4131: ST_TO_ADDR
// hc_name =  ;
4132: LD_ADDR_OWVAR 26
4136: PUSH
4137: LD_STRING 
4139: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
4140: LD_INT 0
4142: PPUSH
4143: LD_INT 3
4145: PPUSH
4146: LD_INT 10
4148: PPUSH
4149: CALL_OW 380
// un = CreateHuman ;
4153: LD_ADDR_VAR 0 3
4157: PUSH
4158: CALL_OW 44
4162: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4163: LD_VAR 0 3
4167: PPUSH
4168: LD_VAR 0 4
4172: PPUSH
4173: CALL_OW 52
// end ;
4177: GO 3982
4179: POP
4180: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
4181: LD_ADDR_VAR 0 2
4185: PUSH
4186: DOUBLE
4187: LD_INT 1
4189: DEC
4190: ST_TO_ADDR
4191: LD_INT 3
4193: PUSH
4194: LD_INT 4
4196: PUSH
4197: LD_INT 5
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: LIST
4204: PUSH
4205: LD_OWVAR 67
4209: ARRAY
4210: PUSH
4211: FOR_TO
4212: IFFALSE 4359
// begin vc_engine = 3 ;
4214: LD_ADDR_OWVAR 39
4218: PUSH
4219: LD_INT 3
4221: ST_TO_ADDR
// vc_control = 3 ;
4222: LD_ADDR_OWVAR 38
4226: PUSH
4227: LD_INT 3
4229: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
4230: LD_ADDR_OWVAR 40
4234: PUSH
4235: LD_INT 42
4237: PUSH
4238: LD_INT 43
4240: PUSH
4241: LD_INT 44
4243: PUSH
4244: LD_INT 45
4246: PUSH
4247: LD_INT 46
4249: PUSH
4250: LD_INT 49
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: LIST
4257: LIST
4258: LIST
4259: LIST
4260: PUSH
4261: LD_INT 1
4263: PPUSH
4264: LD_INT 5
4266: PPUSH
4267: CALL_OW 12
4271: ARRAY
4272: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4273: LD_OWVAR 40
4277: PUSH
4278: LD_INT 46
4280: EQUAL
4281: IFFALSE 4293
// vc_chassis = ru_heavy_tracked else
4283: LD_ADDR_OWVAR 37
4287: PUSH
4288: LD_INT 24
4290: ST_TO_ADDR
4291: GO 4320
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4293: LD_ADDR_OWVAR 37
4297: PUSH
4298: LD_INT 22
4300: PUSH
4301: LD_INT 21
4303: PUSH
4304: EMPTY
4305: LIST
4306: LIST
4307: PUSH
4308: LD_INT 1
4310: PPUSH
4311: LD_INT 2
4313: PPUSH
4314: CALL_OW 12
4318: ARRAY
4319: ST_TO_ADDR
// veh = CreateVehicle ;
4320: LD_ADDR_VAR 0 4
4324: PUSH
4325: CALL_OW 45
4329: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4330: LD_VAR 0 4
4334: PPUSH
4335: LD_INT 3
4337: PPUSH
4338: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4342: LD_VAR 0 4
4346: PPUSH
4347: LD_INT 6
4349: PPUSH
4350: LD_INT 0
4352: PPUSH
4353: CALL_OW 49
// end ;
4357: GO 4211
4359: POP
4360: POP
// end ; end_of_file
4361: LD_VAR 0 1
4365: RET
// export function PrepareKurt ; begin
4366: LD_INT 0
4368: PPUSH
// uc_side = 8 ;
4369: LD_ADDR_OWVAR 20
4373: PUSH
4374: LD_INT 8
4376: ST_TO_ADDR
// uc_nation = 2 ;
4377: LD_ADDR_OWVAR 21
4381: PUSH
4382: LD_INT 2
4384: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4385: LD_ADDR_OWVAR 37
4389: PUSH
4390: LD_INT 13
4392: ST_TO_ADDR
// vc_engine = 1 ;
4393: LD_ADDR_OWVAR 39
4397: PUSH
4398: LD_INT 1
4400: ST_TO_ADDR
// vc_control = 1 ;
4401: LD_ADDR_OWVAR 38
4405: PUSH
4406: LD_INT 1
4408: ST_TO_ADDR
// vc_weapon = 24 ;
4409: LD_ADDR_OWVAR 40
4413: PUSH
4414: LD_INT 24
4416: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4417: LD_ADDR_EXP 25
4421: PUSH
4422: CALL_OW 45
4426: ST_TO_ADDR
// if kurtStatus > 0 then
4427: LD_EXP 26
4431: PUSH
4432: LD_INT 0
4434: GREATER
4435: IFFALSE 4484
// begin Kurt = PrepareUnit ( Kurt , false ) ;
4437: LD_ADDR_EXP 24
4441: PUSH
4442: LD_STRING Kurt
4444: PPUSH
4445: LD_INT 0
4447: PPUSH
4448: CALL 12243 0 2
4452: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4453: LD_EXP 25
4457: PPUSH
4458: LD_INT 4
4460: PPUSH
4461: LD_INT 0
4463: PPUSH
4464: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4468: LD_EXP 24
4472: PPUSH
4473: LD_EXP 25
4477: PPUSH
4478: CALL_OW 52
// end else
4482: GO 4561
// begin hc_name =  ;
4484: LD_ADDR_OWVAR 26
4488: PUSH
4489: LD_STRING 
4491: ST_TO_ADDR
// hc_gallery =  ;
4492: LD_ADDR_OWVAR 33
4496: PUSH
4497: LD_STRING 
4499: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4500: LD_INT 1
4502: PPUSH
4503: LD_INT 10
4505: PPUSH
4506: CALL_OW 381
// Kurt = CreateHuman ;
4510: LD_ADDR_EXP 24
4514: PUSH
4515: CALL_OW 44
4519: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4520: LD_EXP 25
4524: PPUSH
4525: LD_INT 4
4527: PPUSH
4528: LD_INT 0
4530: PPUSH
4531: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4535: LD_EXP 24
4539: PPUSH
4540: LD_EXP 25
4544: PPUSH
4545: CALL_OW 52
// SaveCharacters ( Kurt , AltKurt ) ;
4549: LD_EXP 24
4553: PPUSH
4554: LD_STRING AltKurt
4556: PPUSH
4557: CALL_OW 38
// end ; end ;
4561: LD_VAR 0 1
4565: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4566: LD_INT 0
4568: PPUSH
4569: PPUSH
4570: PPUSH
4571: PPUSH
// for i = 1 to 3 do
4572: LD_ADDR_VAR 0 2
4576: PUSH
4577: DOUBLE
4578: LD_INT 1
4580: DEC
4581: ST_TO_ADDR
4582: LD_INT 3
4584: PUSH
4585: FOR_TO
4586: IFFALSE 4707
// begin uc_side = 1 ;
4588: LD_ADDR_OWVAR 20
4592: PUSH
4593: LD_INT 1
4595: ST_TO_ADDR
// uc_nation = 2 ;
4596: LD_ADDR_OWVAR 21
4600: PUSH
4601: LD_INT 2
4603: ST_TO_ADDR
// hc_gallery =  ;
4604: LD_ADDR_OWVAR 33
4608: PUSH
4609: LD_STRING 
4611: ST_TO_ADDR
// hc_name =  ;
4612: LD_ADDR_OWVAR 26
4616: PUSH
4617: LD_STRING 
4619: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4620: LD_EXP 26
4624: PUSH
4625: LD_INT 0
4627: EQUAL
4628: PUSH
4629: LD_EXP 26
4633: PUSH
4634: LD_INT 2
4636: EQUAL
4637: OR
4638: IFFALSE 4655
// PrepareHuman ( false , 1 , 6 ) else
4640: LD_INT 0
4642: PPUSH
4643: LD_INT 1
4645: PPUSH
4646: LD_INT 6
4648: PPUSH
4649: CALL_OW 380
4653: GO 4668
// PrepareHuman ( false , 1 , 8 ) ;
4655: LD_INT 0
4657: PPUSH
4658: LD_INT 1
4660: PPUSH
4661: LD_INT 8
4663: PPUSH
4664: CALL_OW 380
// un = CreateHuman ;
4668: LD_ADDR_VAR 0 3
4672: PUSH
4673: CALL_OW 44
4677: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4678: LD_VAR 0 3
4682: PPUSH
4683: LD_INT 4
4685: PPUSH
4686: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4690: LD_VAR 0 3
4694: PPUSH
4695: LD_INT 4
4697: PPUSH
4698: LD_INT 0
4700: PPUSH
4701: CALL_OW 49
// end ;
4705: GO 4585
4707: POP
4708: POP
// vc_chassis = 14 ;
4709: LD_ADDR_OWVAR 37
4713: PUSH
4714: LD_INT 14
4716: ST_TO_ADDR
// vc_engine = 3 ;
4717: LD_ADDR_OWVAR 39
4721: PUSH
4722: LD_INT 3
4724: ST_TO_ADDR
// vc_control = 1 ;
4725: LD_ADDR_OWVAR 38
4729: PUSH
4730: LD_INT 1
4732: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4733: LD_ADDR_OWVAR 40
4737: PUSH
4738: LD_INT 27
4740: PUSH
4741: LD_INT 26
4743: PUSH
4744: LD_INT 28
4746: PUSH
4747: EMPTY
4748: LIST
4749: LIST
4750: LIST
4751: PUSH
4752: LD_INT 1
4754: PPUSH
4755: LD_INT 3
4757: PPUSH
4758: CALL_OW 12
4762: ARRAY
4763: ST_TO_ADDR
// veh = CreateVehicle ;
4764: LD_ADDR_VAR 0 4
4768: PUSH
4769: CALL_OW 45
4773: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4774: LD_VAR 0 4
4778: PPUSH
4779: LD_INT 4
4781: PPUSH
4782: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4786: LD_VAR 0 4
4790: PPUSH
4791: LD_INT 4
4793: PPUSH
4794: LD_INT 0
4796: PPUSH
4797: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4801: LD_EXP 26
4805: PUSH
4806: LD_INT 0
4808: EQUAL
4809: PUSH
4810: LD_EXP 26
4814: PUSH
4815: LD_INT 2
4817: EQUAL
4818: OR
4819: IFFALSE 4836
// PrepareHuman ( false , 3 , 6 ) else
4821: LD_INT 0
4823: PPUSH
4824: LD_INT 3
4826: PPUSH
4827: LD_INT 6
4829: PPUSH
4830: CALL_OW 380
4834: GO 4849
// PrepareHuman ( false , 3 , 8 ) ;
4836: LD_INT 0
4838: PPUSH
4839: LD_INT 3
4841: PPUSH
4842: LD_INT 8
4844: PPUSH
4845: CALL_OW 380
// un = CreateHuman ;
4849: LD_ADDR_VAR 0 3
4853: PUSH
4854: CALL_OW 44
4858: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4859: LD_VAR 0 3
4863: PPUSH
4864: LD_VAR 0 4
4868: PPUSH
4869: CALL_OW 52
// vc_chassis = 14 ;
4873: LD_ADDR_OWVAR 37
4877: PUSH
4878: LD_INT 14
4880: ST_TO_ADDR
// vc_engine = 3 ;
4881: LD_ADDR_OWVAR 39
4885: PUSH
4886: LD_INT 3
4888: ST_TO_ADDR
// vc_control = 1 ;
4889: LD_ADDR_OWVAR 38
4893: PUSH
4894: LD_INT 1
4896: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4897: LD_ADDR_OWVAR 40
4901: PUSH
4902: LD_INT 27
4904: PUSH
4905: LD_INT 26
4907: PUSH
4908: LD_INT 28
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: LIST
4915: PUSH
4916: LD_INT 1
4918: PPUSH
4919: LD_INT 3
4921: PPUSH
4922: CALL_OW 12
4926: ARRAY
4927: ST_TO_ADDR
// veh = CreateVehicle ;
4928: LD_ADDR_VAR 0 4
4932: PUSH
4933: CALL_OW 45
4937: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4938: LD_VAR 0 4
4942: PPUSH
4943: LD_INT 4
4945: PPUSH
4946: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4950: LD_VAR 0 4
4954: PPUSH
4955: LD_INT 4
4957: PPUSH
4958: LD_INT 0
4960: PPUSH
4961: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4965: LD_EXP 26
4969: PUSH
4970: LD_INT 0
4972: EQUAL
4973: PUSH
4974: LD_EXP 26
4978: PUSH
4979: LD_INT 2
4981: EQUAL
4982: OR
4983: IFFALSE 5000
// PrepareHuman ( false , 4 , 6 ) else
4985: LD_INT 0
4987: PPUSH
4988: LD_INT 4
4990: PPUSH
4991: LD_INT 6
4993: PPUSH
4994: CALL_OW 380
4998: GO 5013
// PrepareHuman ( false , 4 , 8 ) ;
5000: LD_INT 0
5002: PPUSH
5003: LD_INT 4
5005: PPUSH
5006: LD_INT 8
5008: PPUSH
5009: CALL_OW 380
// un = CreateHuman ;
5013: LD_ADDR_VAR 0 3
5017: PUSH
5018: CALL_OW 44
5022: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5023: LD_VAR 0 3
5027: PPUSH
5028: LD_INT 4
5030: PPUSH
5031: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5035: LD_VAR 0 3
5039: PPUSH
5040: LD_VAR 0 4
5044: PPUSH
5045: CALL_OW 52
// vc_chassis = 14 ;
5049: LD_ADDR_OWVAR 37
5053: PUSH
5054: LD_INT 14
5056: ST_TO_ADDR
// vc_engine = 3 ;
5057: LD_ADDR_OWVAR 39
5061: PUSH
5062: LD_INT 3
5064: ST_TO_ADDR
// vc_control = 1 ;
5065: LD_ADDR_OWVAR 38
5069: PUSH
5070: LD_INT 1
5072: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
5073: LD_ADDR_OWVAR 40
5077: PUSH
5078: LD_INT 27
5080: PUSH
5081: LD_INT 26
5083: PUSH
5084: LD_INT 28
5086: PUSH
5087: EMPTY
5088: LIST
5089: LIST
5090: LIST
5091: PUSH
5092: LD_INT 1
5094: PPUSH
5095: LD_INT 3
5097: PPUSH
5098: CALL_OW 12
5102: ARRAY
5103: ST_TO_ADDR
// veh = CreateVehicle ;
5104: LD_ADDR_VAR 0 4
5108: PUSH
5109: CALL_OW 45
5113: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5114: LD_VAR 0 4
5118: PPUSH
5119: LD_INT 4
5121: PPUSH
5122: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5126: LD_VAR 0 4
5130: PPUSH
5131: LD_INT 4
5133: PPUSH
5134: LD_INT 0
5136: PPUSH
5137: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5141: LD_EXP 26
5145: PUSH
5146: LD_INT 0
5148: EQUAL
5149: PUSH
5150: LD_EXP 26
5154: PUSH
5155: LD_INT 2
5157: EQUAL
5158: OR
5159: IFFALSE 5176
// PrepareHuman ( false , 2 , 4 ) else
5161: LD_INT 0
5163: PPUSH
5164: LD_INT 2
5166: PPUSH
5167: LD_INT 4
5169: PPUSH
5170: CALL_OW 380
5174: GO 5189
// PrepareHuman ( false , 2 , 8 ) ;
5176: LD_INT 0
5178: PPUSH
5179: LD_INT 2
5181: PPUSH
5182: LD_INT 8
5184: PPUSH
5185: CALL_OW 380
// un = CreateHuman ;
5189: LD_ADDR_VAR 0 3
5193: PUSH
5194: CALL_OW 44
5198: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5199: LD_VAR 0 3
5203: PPUSH
5204: LD_INT 4
5206: PPUSH
5207: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5211: LD_VAR 0 3
5215: PPUSH
5216: LD_VAR 0 4
5220: PPUSH
5221: CALL_OW 52
// end ;
5225: LD_VAR 0 1
5229: RET
// export function PrepareAttackLegion ; var i , un ; begin
5230: LD_INT 0
5232: PPUSH
5233: PPUSH
5234: PPUSH
// for i = 1 to 4 do
5235: LD_ADDR_VAR 0 2
5239: PUSH
5240: DOUBLE
5241: LD_INT 1
5243: DEC
5244: ST_TO_ADDR
5245: LD_INT 4
5247: PUSH
5248: FOR_TO
5249: IFFALSE 5359
// begin uc_side = 8 ;
5251: LD_ADDR_OWVAR 20
5255: PUSH
5256: LD_INT 8
5258: ST_TO_ADDR
// uc_nation = 2 ;
5259: LD_ADDR_OWVAR 21
5263: PUSH
5264: LD_INT 2
5266: ST_TO_ADDR
// hc_gallery =  ;
5267: LD_ADDR_OWVAR 33
5271: PUSH
5272: LD_STRING 
5274: ST_TO_ADDR
// hc_name =  ;
5275: LD_ADDR_OWVAR 26
5279: PUSH
5280: LD_STRING 
5282: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5283: LD_INT 0
5285: PPUSH
5286: LD_INT 1
5288: PUSH
5289: LD_INT 8
5291: PUSH
5292: EMPTY
5293: LIST
5294: LIST
5295: PUSH
5296: LD_INT 1
5298: PPUSH
5299: LD_INT 2
5301: PPUSH
5302: CALL_OW 12
5306: ARRAY
5307: PPUSH
5308: LD_INT 6
5310: PPUSH
5311: LD_INT 8
5313: PPUSH
5314: CALL_OW 12
5318: PPUSH
5319: CALL_OW 380
// un = CreateHuman ;
5323: LD_ADDR_VAR 0 3
5327: PUSH
5328: CALL_OW 44
5332: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5333: LD_VAR 0 3
5337: PPUSH
5338: LD_INT 19
5340: PPUSH
5341: LD_INT 0
5343: PPUSH
5344: CALL_OW 49
// ComCrawl ( un ) ;
5348: LD_VAR 0 3
5352: PPUSH
5353: CALL_OW 137
// end ;
5357: GO 5248
5359: POP
5360: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5361: LD_INT 1
5363: PPUSH
5364: LD_INT 8
5366: PPUSH
5367: LD_INT 2
5369: PPUSH
5370: LD_INT 1
5372: PPUSH
5373: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5377: LD_INT 20
5379: PPUSH
5380: LD_INT 3
5382: PPUSH
5383: CALL 15519 0 2
// end ; end_of_file
5387: LD_VAR 0 1
5391: RET
// every 1 do var i ;
5392: GO 5394
5394: DISABLE
5395: LD_INT 0
5397: PPUSH
// begin TeleportExit ( ruteleprt , 122 , 145 ) ;
5398: LD_INT 10
5400: PPUSH
5401: LD_INT 122
5403: PPUSH
5404: LD_INT 145
5406: PPUSH
5407: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
5411: LD_INT 137
5413: PPUSH
5414: LD_INT 84
5416: PPUSH
5417: LD_INT 61
5419: PPUSH
5420: CALL_OW 243
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5424: LD_EXP 1
5428: PPUSH
5429: CALL_OW 310
5433: PPUSH
5434: CALL_OW 87
// InGameOn ;
5438: CALL_OW 8
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 130 , 103 ) ;
5442: LD_INT 22
5444: PUSH
5445: LD_INT 1
5447: PUSH
5448: EMPTY
5449: LIST
5450: LIST
5451: PPUSH
5452: CALL_OW 69
5456: PPUSH
5457: LD_INT 130
5459: PPUSH
5460: LD_INT 103
5462: PPUSH
5463: CALL_OW 111
// AddComMoveXY ( i , 114 , 102 ) ;
5467: LD_VAR 0 1
5471: PPUSH
5472: LD_INT 114
5474: PPUSH
5475: LD_INT 102
5477: PPUSH
5478: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5482: LD_EXP 1
5486: PPUSH
5487: LD_STRING D1-JMM-1
5489: PPUSH
5490: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5494: LD_EXP 1
5498: PPUSH
5499: CALL_OW 310
5503: PPUSH
5504: CALL_OW 87
// if IsOk ( Donaldson ) then
5508: LD_EXP 3
5512: PPUSH
5513: CALL_OW 302
5517: IFFALSE 5597
// begin Say ( Donaldson , D1-Don-1 ) ;
5519: LD_EXP 3
5523: PPUSH
5524: LD_STRING D1-Don-1
5526: PPUSH
5527: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5531: LD_EXP 1
5535: PPUSH
5536: CALL_OW 310
5540: PPUSH
5541: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5545: LD_EXP 1
5549: PPUSH
5550: LD_STRING D1-JMM-2
5552: PPUSH
5553: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5557: LD_EXP 1
5561: PPUSH
5562: CALL_OW 310
5566: PPUSH
5567: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5571: LD_EXP 3
5575: PPUSH
5576: LD_STRING D1-Don-2
5578: PPUSH
5579: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5583: LD_EXP 1
5587: PPUSH
5588: CALL_OW 310
5592: PPUSH
5593: CALL_OW 87
// end ; AddComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 110 , 101 ) ;
5597: LD_INT 22
5599: PUSH
5600: LD_INT 1
5602: PUSH
5603: EMPTY
5604: LIST
5605: LIST
5606: PPUSH
5607: CALL_OW 69
5611: PPUSH
5612: LD_INT 110
5614: PPUSH
5615: LD_INT 101
5617: PPUSH
5618: CALL_OW 171
// wait ( 0 0$1 ) ;
5622: LD_INT 35
5624: PPUSH
5625: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5629: LD_EXP 1
5633: PPUSH
5634: CALL_OW 310
5638: PPUSH
5639: CALL_OW 87
// wait ( 0 0$1 ) ;
5643: LD_INT 35
5645: PPUSH
5646: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5650: LD_EXP 1
5654: PPUSH
5655: CALL_OW 310
5659: PPUSH
5660: CALL_OW 87
// wait ( 0 0$1 ) ;
5664: LD_INT 35
5666: PPUSH
5667: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5671: LD_EXP 1
5675: PPUSH
5676: CALL_OW 310
5680: PPUSH
5681: CALL_OW 87
// wait ( 0 0$1 ) ;
5685: LD_INT 35
5687: PPUSH
5688: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5692: LD_EXP 1
5696: PPUSH
5697: CALL_OW 310
5701: PPUSH
5702: CALL_OW 87
// end ;
5706: PPOPN 1
5708: END
// every 0 0$1 trigger SeeXY ( 1 , 102 , 94 ) do var i ;
5709: LD_INT 1
5711: PPUSH
5712: LD_INT 102
5714: PPUSH
5715: LD_INT 94
5717: PPUSH
5718: CALL_OW 293
5722: IFFALSE 5913
5724: GO 5726
5726: DISABLE
5727: LD_INT 0
5729: PPUSH
// begin CenterOnXY ( 102 , 94 ) ;
5730: LD_INT 102
5732: PPUSH
5733: LD_INT 94
5735: PPUSH
5736: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1-Sol1-2 ,  ) ;
5740: LD_INT 22
5742: PUSH
5743: LD_INT 1
5745: PUSH
5746: EMPTY
5747: LIST
5748: LIST
5749: PUSH
5750: LD_INT 26
5752: PUSH
5753: LD_INT 1
5755: PUSH
5756: EMPTY
5757: LIST
5758: LIST
5759: PUSH
5760: LD_INT 2
5762: PUSH
5763: LD_INT 25
5765: PUSH
5766: LD_INT 1
5768: PUSH
5769: EMPTY
5770: LIST
5771: LIST
5772: PUSH
5773: LD_INT 25
5775: PUSH
5776: LD_INT 2
5778: PUSH
5779: EMPTY
5780: LIST
5781: LIST
5782: PUSH
5783: LD_INT 25
5785: PUSH
5786: LD_INT 3
5788: PUSH
5789: EMPTY
5790: LIST
5791: LIST
5792: PUSH
5793: LD_INT 25
5795: PUSH
5796: LD_INT 4
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: PUSH
5803: LD_INT 25
5805: PUSH
5806: LD_INT 5
5808: PUSH
5809: EMPTY
5810: LIST
5811: LIST
5812: PUSH
5813: LD_INT 25
5815: PUSH
5816: LD_INT 8
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: LIST
5827: LIST
5828: LIST
5829: LIST
5830: LIST
5831: PUSH
5832: EMPTY
5833: LIST
5834: LIST
5835: LIST
5836: PPUSH
5837: CALL_OW 69
5841: PPUSH
5842: LD_STRING D1-Sol1-2
5844: PPUSH
5845: LD_STRING 
5847: PPUSH
5848: CALL 12340 0 3
// Say ( JMM , D1-JMM-3 ) ;
5852: LD_EXP 1
5856: PPUSH
5857: LD_STRING D1-JMM-3
5859: PPUSH
5860: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5864: LD_STRING M1
5866: PPUSH
5867: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5871: LD_ADDR_VAR 0 1
5875: PUSH
5876: LD_INT 22
5878: PUSH
5879: LD_INT 1
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: PPUSH
5886: CALL_OW 69
5890: PUSH
5891: FOR_IN
5892: IFFALSE 5911
// ComMoveXY ( i , 95 , 84 ) ;
5894: LD_VAR 0 1
5898: PPUSH
5899: LD_INT 95
5901: PPUSH
5902: LD_INT 84
5904: PPUSH
5905: CALL_OW 111
5909: GO 5891
5911: POP
5912: POP
// end ;
5913: PPOPN 1
5915: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5916: GO 5918
5918: DISABLE
5919: LD_INT 0
5921: PPUSH
5922: PPUSH
5923: PPUSH
5924: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5925: LD_ADDR_VAR 0 2
5929: PUSH
5930: LD_INT 8
5932: PPUSH
5933: LD_INT 22
5935: PUSH
5936: LD_INT 3
5938: PUSH
5939: EMPTY
5940: LIST
5941: LIST
5942: PUSH
5943: LD_INT 25
5945: PUSH
5946: LD_INT 9
5948: PUSH
5949: EMPTY
5950: LIST
5951: LIST
5952: PUSH
5953: EMPTY
5954: LIST
5955: LIST
5956: PPUSH
5957: CALL_OW 70
5961: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
5962: LD_ADDR_VAR 0 3
5966: PUSH
5967: LD_INT 22
5969: PUSH
5970: LD_INT 1
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: PUSH
5977: EMPTY
5978: LIST
5979: PPUSH
5980: CALL_OW 69
5984: ST_TO_ADDR
// enable ;
5985: ENABLE
// for i in your_units do
5986: LD_ADDR_VAR 0 1
5990: PUSH
5991: LD_VAR 0 3
5995: PUSH
5996: FOR_IN
5997: IFFALSE 6663
// begin if See ( 3 , i ) then
5999: LD_INT 3
6001: PPUSH
6002: LD_VAR 0 1
6006: PPUSH
6007: CALL_OW 292
6011: IFFALSE 6661
// begin disable ;
6013: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
6014: LD_VAR 0 2
6018: PPUSH
6019: LD_INT 96
6021: PPUSH
6022: LD_INT 85
6024: PPUSH
6025: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6029: LD_VAR 0 2
6033: PPUSH
6034: LD_INT 96
6036: PPUSH
6037: LD_INT 85
6039: PPUSH
6040: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6044: LD_VAR 0 2
6048: PPUSH
6049: LD_INT 96
6051: PPUSH
6052: LD_INT 85
6054: PPUSH
6055: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6059: LD_VAR 0 2
6063: PPUSH
6064: LD_INT 96
6066: PPUSH
6067: LD_INT 85
6069: PPUSH
6070: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6074: LD_VAR 0 2
6078: PPUSH
6079: LD_INT 96
6081: PPUSH
6082: LD_INT 85
6084: PPUSH
6085: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6089: LD_VAR 0 2
6093: PPUSH
6094: LD_INT 96
6096: PPUSH
6097: LD_INT 85
6099: PPUSH
6100: CALL_OW 214
// wait ( 0 0$2 ) ;
6104: LD_INT 70
6106: PPUSH
6107: CALL_OW 67
// Say ( JMM , D1a-JMM-1 ) ;
6111: LD_EXP 1
6115: PPUSH
6116: LD_STRING D1a-JMM-1
6118: PPUSH
6119: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
6123: LD_EXP 3
6127: PPUSH
6128: LD_STRING D1a-Don-1
6130: PPUSH
6131: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6135: LD_ADDR_VAR 0 1
6139: PUSH
6140: LD_INT 22
6142: PUSH
6143: LD_INT 1
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PPUSH
6150: CALL_OW 69
6154: PUSH
6155: FOR_IN
6156: IFFALSE 6175
// ComMoveXY ( i , 109 , 102 ) ;
6158: LD_VAR 0 1
6162: PPUSH
6163: LD_INT 109
6165: PPUSH
6166: LD_INT 102
6168: PPUSH
6169: CALL_OW 111
6173: GO 6155
6175: POP
6176: POP
// Say ( JMM , D1a-JMM-2 ) ;
6177: LD_EXP 1
6181: PPUSH
6182: LD_STRING D1a-JMM-2
6184: PPUSH
6185: CALL_OW 88
// wait ( 0 0$10 ) ;
6189: LD_INT 350
6191: PPUSH
6192: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6196: LD_EXP 1
6200: PPUSH
6201: CALL_OW 310
6205: PPUSH
6206: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6210: LD_EXP 3
6214: PPUSH
6215: LD_STRING D1b-Don-1
6217: PPUSH
6218: CALL_OW 88
// if IsOk ( Donaldson ) then
6222: LD_EXP 3
6226: PPUSH
6227: CALL_OW 302
6231: IFFALSE 6245
// Say ( JMM , D1b-JMM-1 ) ;
6233: LD_EXP 1
6237: PPUSH
6238: LD_STRING D1b-JMM-1
6240: PPUSH
6241: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6245: LD_INT 22
6247: PUSH
6248: LD_INT 1
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: PUSH
6255: LD_INT 26
6257: PUSH
6258: LD_INT 1
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: PUSH
6265: LD_INT 2
6267: PUSH
6268: LD_INT 25
6270: PUSH
6271: LD_INT 1
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: PUSH
6278: LD_INT 25
6280: PUSH
6281: LD_INT 2
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: PUSH
6288: LD_INT 25
6290: PUSH
6291: LD_INT 3
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: PUSH
6298: LD_INT 25
6300: PUSH
6301: LD_INT 4
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: PUSH
6308: LD_INT 25
6310: PUSH
6311: LD_INT 5
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: PUSH
6318: LD_INT 25
6320: PUSH
6321: LD_INT 8
6323: PUSH
6324: EMPTY
6325: LIST
6326: LIST
6327: PUSH
6328: EMPTY
6329: LIST
6330: LIST
6331: LIST
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: LIST
6341: PPUSH
6342: CALL_OW 69
6346: PPUSH
6347: LD_STRING D1b-Sol1-1
6349: PPUSH
6350: LD_STRING 
6352: PPUSH
6353: CALL 12340 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6357: LD_EXP 3
6361: PPUSH
6362: LD_STRING D1b-Don-2
6364: PPUSH
6365: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6369: LD_EXP 1
6373: PPUSH
6374: LD_STRING D1b-JMM-2
6376: PPUSH
6377: CALL_OW 88
// dec = ShowQuery1 ;
6381: LD_ADDR_VAR 0 4
6385: PUSH
6386: CALL 12809 0 0
6390: ST_TO_ADDR
// if dec = 1 then
6391: LD_VAR 0 4
6395: PUSH
6396: LD_INT 1
6398: EQUAL
6399: IFFALSE 6505
// begin Say ( JMM , D2-JMM-1 ) ;
6401: LD_EXP 1
6405: PPUSH
6406: LD_STRING D2-JMM-1
6408: PPUSH
6409: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6413: LD_EXP 22
6417: PPUSH
6418: LD_STRING D2-Pow-1
6420: PPUSH
6421: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6425: LD_EXP 1
6429: PPUSH
6430: LD_STRING D2a-JMM-1
6432: PPUSH
6433: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6437: LD_EXP 22
6441: PPUSH
6442: LD_STRING D2a-Pow-1
6444: PPUSH
6445: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6449: LD_EXP 1
6453: PPUSH
6454: LD_STRING D2a-JMM-2
6456: PPUSH
6457: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6461: LD_EXP 22
6465: PPUSH
6466: LD_STRING D2a-Pow-2
6468: PPUSH
6469: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6473: LD_EXP 1
6477: PPUSH
6478: LD_STRING D2a-JMM-3
6480: PPUSH
6481: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6485: LD_EXP 22
6489: PPUSH
6490: LD_STRING D2a-Pow-3
6492: PPUSH
6493: CALL_OW 94
// secondPass = 2 ;
6497: LD_ADDR_EXP 27
6501: PUSH
6502: LD_INT 2
6504: ST_TO_ADDR
// end ; if dec = 2 then
6505: LD_VAR 0 4
6509: PUSH
6510: LD_INT 2
6512: EQUAL
6513: IFFALSE 6607
// begin Say ( JMM , D2-JMM-1 ) ;
6515: LD_EXP 1
6519: PPUSH
6520: LD_STRING D2-JMM-1
6522: PPUSH
6523: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6527: LD_EXP 22
6531: PPUSH
6532: LD_STRING D2-Pow-1
6534: PPUSH
6535: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6539: LD_EXP 1
6543: PPUSH
6544: LD_STRING D2b-JMM-1
6546: PPUSH
6547: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6551: LD_EXP 22
6555: PPUSH
6556: LD_STRING D2b-Pow-1
6558: PPUSH
6559: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6563: LD_EXP 1
6567: PPUSH
6568: LD_STRING D2c-JMM-1
6570: PPUSH
6571: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6575: LD_EXP 22
6579: PPUSH
6580: LD_STRING D2c-Pow-1
6582: PPUSH
6583: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6587: LD_EXP 1
6591: PPUSH
6592: LD_STRING D2c-JMM-2
6594: PPUSH
6595: CALL_OW 88
// secondPass = 2 ;
6599: LD_ADDR_EXP 27
6603: PUSH
6604: LD_INT 2
6606: ST_TO_ADDR
// end ; if dec = 3 then
6607: LD_VAR 0 4
6611: PUSH
6612: LD_INT 3
6614: EQUAL
6615: IFFALSE 6625
// secondPass = 1 ;
6617: LD_ADDR_EXP 27
6621: PUSH
6622: LD_INT 1
6624: ST_TO_ADDR
// InGameOff ;
6625: CALL_OW 9
// ruAI = 1 ;
6629: LD_ADDR_EXP 41
6633: PUSH
6634: LD_INT 1
6636: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6637: LD_INT 1
6639: PPUSH
6640: LD_INT 3
6642: PPUSH
6643: LD_INT 2
6645: PPUSH
6646: LD_INT 1
6648: PPUSH
6649: CALL_OW 80
// SaveForQuickRestart ;
6653: CALL_OW 22
// exit ;
6657: POP
6658: POP
6659: GO 6665
// end ; end ;
6661: GO 5996
6663: POP
6664: POP
// end ;
6665: PPOPN 4
6667: END
// every 1 1$0 trigger secondPass = 2 do
6668: LD_EXP 27
6672: PUSH
6673: LD_INT 2
6675: EQUAL
6676: IFFALSE 6896
6678: GO 6680
6680: DISABLE
// begin PowellSupport1 ;
6681: CALL 1946 0 0
// DialogueOn ;
6685: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6689: LD_EXP 1
6693: PPUSH
6694: LD_STRING DC1-JMM-1
6696: PPUSH
6697: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6701: LD_EXP 22
6705: PPUSH
6706: LD_STRING DC1-Pow-1
6708: PPUSH
6709: CALL_OW 94
// DialogueOff ;
6713: CALL_OW 7
// wait ( 3 3$0 ) ;
6717: LD_INT 6300
6719: PPUSH
6720: CALL_OW 67
// PowellSupport2 ;
6724: CALL 2405 0 0
// DialogueOn ;
6728: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6732: LD_EXP 1
6736: PPUSH
6737: LD_STRING DC2-JMM-1
6739: PPUSH
6740: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6744: LD_EXP 22
6748: PPUSH
6749: LD_STRING DC2-Pow-1
6751: PPUSH
6752: CALL_OW 94
// DialogueOff ;
6756: CALL_OW 7
// wait ( 3 3$00 ) ;
6760: LD_INT 6300
6762: PPUSH
6763: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6767: LD_INT 35
6769: PPUSH
6770: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and not FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
6774: LD_INT 22
6776: PUSH
6777: LD_INT 1
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: PUSH
6784: LD_INT 2
6786: PUSH
6787: LD_INT 30
6789: PUSH
6790: LD_INT 0
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: PUSH
6797: LD_INT 30
6799: PUSH
6800: LD_INT 1
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: LIST
6811: PUSH
6812: EMPTY
6813: LIST
6814: LIST
6815: PPUSH
6816: CALL_OW 69
6820: PUSH
6821: LD_INT 11
6823: PPUSH
6824: LD_INT 22
6826: PUSH
6827: LD_INT 3
6829: PUSH
6830: EMPTY
6831: LIST
6832: LIST
6833: PPUSH
6834: CALL_OW 70
6838: NOT
6839: AND
6840: IFFALSE 6767
// wait ( 0 0$10 ) ;
6842: LD_INT 350
6844: PPUSH
6845: CALL_OW 67
// Legion ;
6849: CALL 6897 0 0
// wait ( 6 6$0 ) ;
6853: LD_INT 12600
6855: PPUSH
6856: CALL_OW 67
// PowellSupport3 ;
6860: CALL 2939 0 0
// DialogueOn ;
6864: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6868: LD_EXP 22
6872: PPUSH
6873: LD_STRING DC3-Pow-1
6875: PPUSH
6876: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6880: LD_EXP 1
6884: PPUSH
6885: LD_STRING DC3-JMM-1
6887: PPUSH
6888: CALL_OW 88
// DialogueOff ;
6892: CALL_OW 7
// end ;
6896: END
// export function Legion ; var i , dec1 , dec2 , tmp , tmp2 , tmp3 , crates , oil , siberite , cr , sb , payForNeutral , payForHelp , query1 , query2 ; begin
6897: LD_INT 0
6899: PPUSH
6900: PPUSH
6901: PPUSH
6902: PPUSH
6903: PPUSH
6904: PPUSH
6905: PPUSH
6906: PPUSH
6907: PPUSH
6908: PPUSH
6909: PPUSH
6910: PPUSH
6911: PPUSH
6912: PPUSH
6913: PPUSH
6914: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6915: LD_ADDR_VAR 0 5
6919: PUSH
6920: LD_INT 22
6922: PUSH
6923: LD_INT 1
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: LD_INT 21
6932: PUSH
6933: LD_INT 3
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: LD_INT 2
6942: PUSH
6943: LD_INT 30
6945: PUSH
6946: LD_INT 0
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PUSH
6953: LD_INT 30
6955: PUSH
6956: LD_INT 1
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: LIST
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: LIST
6972: PPUSH
6973: CALL_OW 69
6977: ST_TO_ADDR
// crates := 0 ;
6978: LD_ADDR_VAR 0 8
6982: PUSH
6983: LD_INT 0
6985: ST_TO_ADDR
// oil := 0 ;
6986: LD_ADDR_VAR 0 9
6990: PUSH
6991: LD_INT 0
6993: ST_TO_ADDR
// siberite := 0 ;
6994: LD_ADDR_VAR 0 10
6998: PUSH
6999: LD_INT 0
7001: ST_TO_ADDR
// payForNeutral := false ;
7002: LD_ADDR_VAR 0 13
7006: PUSH
7007: LD_INT 0
7009: ST_TO_ADDR
// payForHelp := false ;
7010: LD_ADDR_VAR 0 14
7014: PUSH
7015: LD_INT 0
7017: ST_TO_ADDR
// for i in tmp do
7018: LD_ADDR_VAR 0 2
7022: PUSH
7023: LD_VAR 0 5
7027: PUSH
7028: FOR_IN
7029: IFFALSE 7120
// begin crates := crates + GetResourceType ( GetBase ( i ) , 1 ) ;
7031: LD_ADDR_VAR 0 8
7035: PUSH
7036: LD_VAR 0 8
7040: PUSH
7041: LD_VAR 0 2
7045: PPUSH
7046: CALL_OW 274
7050: PPUSH
7051: LD_INT 1
7053: PPUSH
7054: CALL_OW 275
7058: PLUS
7059: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( i ) , 2 ) ;
7060: LD_ADDR_VAR 0 9
7064: PUSH
7065: LD_VAR 0 9
7069: PUSH
7070: LD_VAR 0 2
7074: PPUSH
7075: CALL_OW 274
7079: PPUSH
7080: LD_INT 2
7082: PPUSH
7083: CALL_OW 275
7087: PLUS
7088: ST_TO_ADDR
// siberite := siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
7089: LD_ADDR_VAR 0 10
7093: PUSH
7094: LD_VAR 0 10
7098: PUSH
7099: LD_VAR 0 2
7103: PPUSH
7104: CALL_OW 274
7108: PPUSH
7109: LD_INT 3
7111: PPUSH
7112: CALL_OW 275
7116: PLUS
7117: ST_TO_ADDR
// end ;
7118: GO 7028
7120: POP
7121: POP
// PrepareKurt ;
7122: CALL 4366 0 0
// if not Kurt then
7126: LD_EXP 24
7130: NOT
7131: IFFALSE 7135
// exit ;
7133: GO 9267
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7135: LD_EXP 25
7139: PPUSH
7140: LD_INT 144
7142: PPUSH
7143: LD_INT 111
7145: PPUSH
7146: CALL_OW 111
// wait ( 0 0$2 ) ;
7150: LD_INT 70
7152: PPUSH
7153: CALL_OW 67
// PlaceSeeing ( 167 , 121 , 1 , - 10 ) ;
7157: LD_INT 167
7159: PPUSH
7160: LD_INT 121
7162: PPUSH
7163: LD_INT 1
7165: PPUSH
7166: LD_INT 10
7168: NEG
7169: PPUSH
7170: CALL_OW 330
// ComExitVehicle ( Kurt ) ;
7174: LD_EXP 24
7178: PPUSH
7179: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7183: LD_EXP 24
7187: PPUSH
7188: CALL_OW 87
// wait ( 0 0$1 ) ;
7192: LD_INT 35
7194: PPUSH
7195: CALL_OW 67
// DialogueOn ;
7199: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7203: LD_INT 22
7205: PUSH
7206: LD_INT 1
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: PUSH
7213: LD_INT 26
7215: PUSH
7216: LD_INT 1
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: PUSH
7223: LD_INT 2
7225: PUSH
7226: LD_INT 25
7228: PUSH
7229: LD_INT 1
7231: PUSH
7232: EMPTY
7233: LIST
7234: LIST
7235: PUSH
7236: LD_INT 25
7238: PUSH
7239: LD_INT 2
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: PUSH
7246: LD_INT 25
7248: PUSH
7249: LD_INT 3
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PUSH
7256: LD_INT 25
7258: PUSH
7259: LD_INT 4
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: PUSH
7266: LD_INT 25
7268: PUSH
7269: LD_INT 5
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: PUSH
7276: LD_INT 25
7278: PUSH
7279: LD_INT 8
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: LIST
7290: LIST
7291: LIST
7292: LIST
7293: LIST
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: LIST
7299: PPUSH
7300: CALL_OW 69
7304: PPUSH
7305: LD_STRING D3-Sol1-1
7307: PPUSH
7308: LD_STRING 
7310: PPUSH
7311: CALL 12340 0 3
// if KurtStatus then
7315: LD_EXP 26
7319: IFFALSE 7419
// begin Say ( Kurt , D3-Kurt-1 ) ;
7321: LD_EXP 24
7325: PPUSH
7326: LD_STRING D3-Kurt-1
7328: PPUSH
7329: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7333: LD_EXP 1
7337: PPUSH
7338: LD_STRING D3-JMM-1
7340: PPUSH
7341: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7345: LD_EXP 24
7349: PPUSH
7350: LD_STRING D3-Kurt-2
7352: PPUSH
7353: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7357: LD_EXP 1
7361: PPUSH
7362: LD_STRING D3-JMM-2
7364: PPUSH
7365: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7369: LD_EXP 24
7373: PPUSH
7374: LD_STRING D3-Kurt-4
7376: PPUSH
7377: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7381: LD_EXP 1
7385: PPUSH
7386: LD_STRING D3-JMM-4
7388: PPUSH
7389: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7393: LD_EXP 24
7397: PPUSH
7398: LD_STRING D3-Kurt-5
7400: PPUSH
7401: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7405: LD_EXP 24
7409: PPUSH
7410: LD_STRING D3-Kurt-5a
7412: PPUSH
7413: CALL_OW 88
// end else
7417: GO 7515
// begin Say ( Kurt , D3-Kurt-1 ) ;
7419: LD_EXP 24
7423: PPUSH
7424: LD_STRING D3-Kurt-1
7426: PPUSH
7427: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7431: LD_EXP 1
7435: PPUSH
7436: LD_STRING D3-JMM-1
7438: PPUSH
7439: CALL_OW 88
// Say ( Kurt , D3-Kurt-3 ) ;
7443: LD_EXP 24
7447: PPUSH
7448: LD_STRING D3-Kurt-3
7450: PPUSH
7451: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7455: LD_EXP 1
7459: PPUSH
7460: LD_STRING D3-JMM-3
7462: PPUSH
7463: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7467: LD_EXP 24
7471: PPUSH
7472: LD_STRING D3-Kurt-4
7474: PPUSH
7475: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7479: LD_EXP 1
7483: PPUSH
7484: LD_STRING D3-JMM-4
7486: PPUSH
7487: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7491: LD_EXP 24
7495: PPUSH
7496: LD_STRING D3-Kurt-5
7498: PPUSH
7499: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
7503: LD_EXP 24
7507: PPUSH
7508: LD_STRING D3-Kurt-5b
7510: PPUSH
7511: CALL_OW 88
// end ; if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
7515: LD_VAR 0 8
7519: PUSH
7520: LD_INT 120
7522: PUSH
7523: LD_INT 60
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: PUSH
7530: LD_EXP 26
7534: PUSH
7535: LD_INT 1
7537: PLUS
7538: ARRAY
7539: GREATEREQUAL
7540: PUSH
7541: LD_VAR 0 10
7545: PUSH
7546: LD_INT 120
7548: PUSH
7549: LD_INT 60
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: PUSH
7556: LD_EXP 26
7560: PUSH
7561: LD_INT 1
7563: PLUS
7564: ARRAY
7565: GREATEREQUAL
7566: AND
7567: IFFALSE 7619
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
7569: LD_ADDR_VAR 0 3
7573: PUSH
7574: LD_STRING Q2
7576: PUSH
7577: LD_STRING Q2K
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: PUSH
7584: LD_EXP 26
7588: PUSH
7589: LD_INT 1
7591: PLUS
7592: ARRAY
7593: PPUSH
7594: LD_INT 1
7596: PUSH
7597: LD_INT 2
7599: PUSH
7600: LD_INT 3
7602: PUSH
7603: LD_INT 4
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: PPUSH
7612: CALL_OW 98
7616: ST_TO_ADDR
7617: GO 7663
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 3 , 4 ] ) ;
7619: LD_ADDR_VAR 0 3
7623: PUSH
7624: LD_STRING Q2
7626: PUSH
7627: LD_STRING Q2K
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: PUSH
7634: LD_EXP 26
7638: PUSH
7639: LD_INT 1
7641: PLUS
7642: ARRAY
7643: PPUSH
7644: LD_INT 1
7646: PUSH
7647: LD_INT 3
7649: PUSH
7650: LD_INT 4
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: LIST
7657: PPUSH
7658: CALL_OW 98
7662: ST_TO_ADDR
// if dec1 = 1 then
7663: LD_VAR 0 3
7667: PUSH
7668: LD_INT 1
7670: EQUAL
7671: IFFALSE 7705
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7673: LD_EXP 1
7677: PPUSH
7678: LD_STRING D3Ka-JMM-1
7680: PPUSH
7681: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7685: LD_EXP 24
7689: PPUSH
7690: LD_STRING D3Ka-Kurt-1
7692: PPUSH
7693: CALL_OW 88
// warWithLegion = 1 ;
7697: LD_ADDR_EXP 30
7701: PUSH
7702: LD_INT 1
7704: ST_TO_ADDR
// end ; if dec1 = 2 then
7705: LD_VAR 0 3
7709: PUSH
7710: LD_INT 2
7712: EQUAL
7713: IFFALSE 7797
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7715: LD_EXP 1
7719: PPUSH
7720: LD_STRING D3Kb-JMM-1
7722: PPUSH
7723: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7727: LD_EXP 24
7731: PPUSH
7732: LD_STRING D3Kb-Kurt-1
7734: PPUSH
7735: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7739: LD_ADDR_VAR 0 11
7743: PUSH
7744: LD_INT 120
7746: PUSH
7747: LD_INT 60
7749: PUSH
7750: EMPTY
7751: LIST
7752: LIST
7753: PUSH
7754: LD_EXP 26
7758: PUSH
7759: LD_INT 1
7761: PLUS
7762: ARRAY
7763: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7764: LD_ADDR_VAR 0 12
7768: PUSH
7769: LD_INT 120
7771: PUSH
7772: LD_INT 60
7774: PUSH
7775: EMPTY
7776: LIST
7777: LIST
7778: PUSH
7779: LD_EXP 26
7783: PUSH
7784: LD_INT 1
7786: PLUS
7787: ARRAY
7788: ST_TO_ADDR
// payForNeutral := true ;
7789: LD_ADDR_VAR 0 13
7793: PUSH
7794: LD_INT 1
7796: ST_TO_ADDR
// end ; if dec1 = 3 then
7797: LD_VAR 0 3
7801: PUSH
7802: LD_INT 3
7804: EQUAL
7805: IFFALSE 8040
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7807: LD_EXP 1
7811: PPUSH
7812: LD_STRING D3Kc1-JMM-1
7814: PPUSH
7815: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7819: LD_EXP 24
7823: PPUSH
7824: LD_STRING D3Kc1-Kurt-1
7826: PPUSH
7827: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7831: LD_EXP 1
7835: PPUSH
7836: LD_STRING D3Kc1-JMM-2
7838: PPUSH
7839: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7843: LD_EXP 24
7847: PPUSH
7848: LD_STRING D3Kc1-Kurt-2
7850: PPUSH
7851: CALL_OW 88
// askSiberite = 1 ;
7855: LD_ADDR_EXP 32
7859: PUSH
7860: LD_INT 1
7862: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7863: LD_ADDR_VAR 0 4
7867: PUSH
7868: LD_STRING Q2b
7870: PPUSH
7871: LD_INT 1
7873: PUSH
7874: LD_INT 2
7876: PUSH
7877: LD_INT 3
7879: PUSH
7880: EMPTY
7881: LIST
7882: LIST
7883: LIST
7884: PPUSH
7885: CALL_OW 98
7889: ST_TO_ADDR
// if dec2 = 1 then
7890: LD_VAR 0 4
7894: PUSH
7895: LD_INT 1
7897: EQUAL
7898: IFFALSE 7932
// begin Say ( JMM , D4a-JMM-1 ) ;
7900: LD_EXP 1
7904: PPUSH
7905: LD_STRING D4a-JMM-1
7907: PPUSH
7908: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7912: LD_EXP 24
7916: PPUSH
7917: LD_STRING D4b-Kurt-1
7919: PPUSH
7920: CALL_OW 88
// warWithLegion = 1 ;
7924: LD_ADDR_EXP 30
7928: PUSH
7929: LD_INT 1
7931: ST_TO_ADDR
// end ; if dec2 = 2 then
7932: LD_VAR 0 4
7936: PUSH
7937: LD_INT 2
7939: EQUAL
7940: IFFALSE 7974
// begin Say ( JMM , D4b-JMM-1 ) ;
7942: LD_EXP 1
7946: PPUSH
7947: LD_STRING D4b-JMM-1
7949: PPUSH
7950: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7954: LD_EXP 24
7958: PPUSH
7959: LD_STRING D4b-Kurt-1
7961: PPUSH
7962: CALL_OW 88
// warWithLegion = 1 ;
7966: LD_ADDR_EXP 30
7970: PUSH
7971: LD_INT 1
7973: ST_TO_ADDR
// end ; if dec2 = 3 then
7974: LD_VAR 0 4
7978: PUSH
7979: LD_INT 3
7981: EQUAL
7982: IFFALSE 8040
// begin Say ( JMM , D4c-JMM-1 ) ;
7984: LD_EXP 1
7988: PPUSH
7989: LD_STRING D4c-JMM-1
7991: PPUSH
7992: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7996: LD_EXP 24
8000: PPUSH
8001: LD_STRING D4c-Kurt-1
8003: PPUSH
8004: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8008: LD_EXP 1
8012: PPUSH
8013: LD_STRING D4c-JMM-2
8015: PPUSH
8016: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8020: LD_EXP 24
8024: PPUSH
8025: LD_STRING D4c-Kurt-2
8027: PPUSH
8028: CALL_OW 88
// fakeInfo = 1 ;
8032: LD_ADDR_EXP 31
8036: PUSH
8037: LD_INT 1
8039: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
8040: LD_VAR 0 3
8044: PUSH
8045: LD_INT 4
8047: EQUAL
8048: IFFALSE 9123
// begin Say ( JMM , D3Kd-JMM-1 ) ;
8050: LD_EXP 1
8054: PPUSH
8055: LD_STRING D3Kd-JMM-1
8057: PPUSH
8058: CALL_OW 88
// if crates >= [ 200 , 120 ] [ KurtStatus + 1 ] and siberite >= [ 200 , 120 ] [ KurtStatus + 1 ] then
8062: LD_VAR 0 8
8066: PUSH
8067: LD_INT 200
8069: PUSH
8070: LD_INT 120
8072: PUSH
8073: EMPTY
8074: LIST
8075: LIST
8076: PUSH
8077: LD_EXP 26
8081: PUSH
8082: LD_INT 1
8084: PLUS
8085: ARRAY
8086: GREATEREQUAL
8087: PUSH
8088: LD_VAR 0 10
8092: PUSH
8093: LD_INT 200
8095: PUSH
8096: LD_INT 120
8098: PUSH
8099: EMPTY
8100: LIST
8101: LIST
8102: PUSH
8103: LD_EXP 26
8107: PUSH
8108: LD_INT 1
8110: PLUS
8111: ARRAY
8112: GREATEREQUAL
8113: AND
8114: IFFALSE 8166
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8116: LD_ADDR_VAR 0 4
8120: PUSH
8121: LD_STRING Q2a
8123: PUSH
8124: LD_STRING Q2aK
8126: PUSH
8127: EMPTY
8128: LIST
8129: LIST
8130: PUSH
8131: LD_EXP 26
8135: PUSH
8136: LD_INT 1
8138: PLUS
8139: ARRAY
8140: PPUSH
8141: LD_INT 1
8143: PUSH
8144: LD_INT 2
8146: PUSH
8147: LD_INT 3
8149: PUSH
8150: LD_INT 4
8152: PUSH
8153: EMPTY
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: PPUSH
8159: CALL_OW 98
8163: ST_TO_ADDR
8164: GO 8343
// if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
8166: LD_VAR 0 8
8170: PUSH
8171: LD_INT 120
8173: PUSH
8174: LD_INT 60
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: PUSH
8181: LD_EXP 26
8185: PUSH
8186: LD_INT 1
8188: PLUS
8189: ARRAY
8190: GREATEREQUAL
8191: PUSH
8192: LD_VAR 0 10
8196: PUSH
8197: LD_INT 120
8199: PUSH
8200: LD_INT 60
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: PUSH
8207: LD_EXP 26
8211: PUSH
8212: LD_INT 1
8214: PLUS
8215: ARRAY
8216: GREATEREQUAL
8217: AND
8218: IFFALSE 8266
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 4 ] ) else
8220: LD_ADDR_VAR 0 4
8224: PUSH
8225: LD_STRING Q2a
8227: PUSH
8228: LD_STRING Q2aK
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: PUSH
8235: LD_EXP 26
8239: PUSH
8240: LD_INT 1
8242: PLUS
8243: ARRAY
8244: PPUSH
8245: LD_INT 1
8247: PUSH
8248: LD_INT 2
8250: PUSH
8251: LD_INT 4
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: LIST
8258: PPUSH
8259: CALL_OW 98
8263: ST_TO_ADDR
8264: GO 8343
// begin case Query ( [ Q2d , Q2dK ] [ KurtStatus + 1 ] ) of 1 :
8266: LD_STRING Q2d
8268: PUSH
8269: LD_STRING Q2dK
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: PUSH
8276: LD_EXP 26
8280: PUSH
8281: LD_INT 1
8283: PLUS
8284: ARRAY
8285: PPUSH
8286: CALL_OW 97
8290: PUSH
8291: LD_INT 1
8293: DOUBLE
8294: EQUAL
8295: IFTRUE 8299
8297: GO 8302
8299: POP
// ; end ;
8300: GO 8303
8302: POP
// dec2 := 0 ;
8303: LD_ADDR_VAR 0 4
8307: PUSH
8308: LD_INT 0
8310: ST_TO_ADDR
// Say ( JMM , D3Kc1-JMM-1 ) ;
8311: LD_EXP 1
8315: PPUSH
8316: LD_STRING D3Kc1-JMM-1
8318: PPUSH
8319: CALL_OW 88
// Say ( Kurt , D3Kc2-Kurt-1 ) ;
8323: LD_EXP 24
8327: PPUSH
8328: LD_STRING D3Kc2-Kurt-1
8330: PPUSH
8331: CALL_OW 88
// warWithLegion := 1 ;
8335: LD_ADDR_EXP 30
8339: PUSH
8340: LD_INT 1
8342: ST_TO_ADDR
// end ; if dec2 = 1 then
8343: LD_VAR 0 4
8347: PUSH
8348: LD_INT 1
8350: EQUAL
8351: IFFALSE 8385
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8353: LD_EXP 1
8357: PPUSH
8358: LD_STRING D5Ka-JMM-1
8360: PPUSH
8361: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
8365: LD_EXP 24
8369: PPUSH
8370: LD_STRING D5Ka-Kurt-1
8372: PPUSH
8373: CALL_OW 88
// warWithLegion = 1 ;
8377: LD_ADDR_EXP 30
8381: PUSH
8382: LD_INT 1
8384: ST_TO_ADDR
// end ; if dec2 = 2 then
8385: LD_VAR 0 4
8389: PUSH
8390: LD_INT 2
8392: EQUAL
8393: IFFALSE 8477
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8395: LD_EXP 1
8399: PPUSH
8400: LD_STRING D3Kb-JMM-1
8402: PPUSH
8403: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8407: LD_EXP 24
8411: PPUSH
8412: LD_STRING D3Kb-Kurt-1
8414: PPUSH
8415: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8419: LD_ADDR_VAR 0 11
8423: PUSH
8424: LD_INT 120
8426: PUSH
8427: LD_INT 60
8429: PUSH
8430: EMPTY
8431: LIST
8432: LIST
8433: PUSH
8434: LD_EXP 26
8438: PUSH
8439: LD_INT 1
8441: PLUS
8442: ARRAY
8443: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8444: LD_ADDR_VAR 0 12
8448: PUSH
8449: LD_INT 120
8451: PUSH
8452: LD_INT 60
8454: PUSH
8455: EMPTY
8456: LIST
8457: LIST
8458: PUSH
8459: LD_EXP 26
8463: PUSH
8464: LD_INT 1
8466: PLUS
8467: ARRAY
8468: ST_TO_ADDR
// payForNeutral := true ;
8469: LD_ADDR_VAR 0 13
8473: PUSH
8474: LD_INT 1
8476: ST_TO_ADDR
// end ; if dec2 = 3 then
8477: LD_VAR 0 4
8481: PUSH
8482: LD_INT 3
8484: EQUAL
8485: IFFALSE 8569
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8487: LD_EXP 1
8491: PPUSH
8492: LD_STRING D3Ke-JMM-1
8494: PPUSH
8495: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
8499: LD_EXP 24
8503: PPUSH
8504: LD_STRING D3Ke-Kurt-1
8506: PPUSH
8507: CALL_OW 88
// cr := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8511: LD_ADDR_VAR 0 11
8515: PUSH
8516: LD_INT 200
8518: PUSH
8519: LD_INT 120
8521: PUSH
8522: EMPTY
8523: LIST
8524: LIST
8525: PUSH
8526: LD_EXP 26
8530: PUSH
8531: LD_INT 1
8533: PLUS
8534: ARRAY
8535: ST_TO_ADDR
// sb := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8536: LD_ADDR_VAR 0 12
8540: PUSH
8541: LD_INT 200
8543: PUSH
8544: LD_INT 120
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PUSH
8551: LD_EXP 26
8555: PUSH
8556: LD_INT 1
8558: PLUS
8559: ARRAY
8560: ST_TO_ADDR
// payForHelp := true ;
8561: LD_ADDR_VAR 0 14
8565: PUSH
8566: LD_INT 1
8568: ST_TO_ADDR
// end ; if dec2 = 4 then
8569: LD_VAR 0 4
8573: PUSH
8574: LD_INT 4
8576: EQUAL
8577: IFFALSE 8812
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8579: LD_EXP 1
8583: PPUSH
8584: LD_STRING D3Kc1-JMM-1
8586: PPUSH
8587: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8591: LD_EXP 24
8595: PPUSH
8596: LD_STRING D3Kc1-Kurt-1
8598: PPUSH
8599: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8603: LD_EXP 1
8607: PPUSH
8608: LD_STRING D3Kc1-JMM-2
8610: PPUSH
8611: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8615: LD_EXP 24
8619: PPUSH
8620: LD_STRING D3Kc1-Kurt-2
8622: PPUSH
8623: CALL_OW 88
// askSiberite = 1 ;
8627: LD_ADDR_EXP 32
8631: PUSH
8632: LD_INT 1
8634: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8635: LD_ADDR_VAR 0 4
8639: PUSH
8640: LD_STRING Q2b
8642: PPUSH
8643: LD_INT 1
8645: PUSH
8646: LD_INT 2
8648: PUSH
8649: LD_INT 3
8651: PUSH
8652: EMPTY
8653: LIST
8654: LIST
8655: LIST
8656: PPUSH
8657: CALL_OW 98
8661: ST_TO_ADDR
// if dec2 = 1 then
8662: LD_VAR 0 4
8666: PUSH
8667: LD_INT 1
8669: EQUAL
8670: IFFALSE 8704
// begin Say ( JMM , D4a-JMM-1 ) ;
8672: LD_EXP 1
8676: PPUSH
8677: LD_STRING D4a-JMM-1
8679: PPUSH
8680: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8684: LD_EXP 24
8688: PPUSH
8689: LD_STRING D4b-Kurt-1
8691: PPUSH
8692: CALL_OW 88
// warWithLegion = 1 ;
8696: LD_ADDR_EXP 30
8700: PUSH
8701: LD_INT 1
8703: ST_TO_ADDR
// end ; if dec2 = 2 then
8704: LD_VAR 0 4
8708: PUSH
8709: LD_INT 2
8711: EQUAL
8712: IFFALSE 8746
// begin Say ( JMM , D4b-JMM-1 ) ;
8714: LD_EXP 1
8718: PPUSH
8719: LD_STRING D4b-JMM-1
8721: PPUSH
8722: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8726: LD_EXP 24
8730: PPUSH
8731: LD_STRING D4b-Kurt-1
8733: PPUSH
8734: CALL_OW 88
// warWithLegion = 1 ;
8738: LD_ADDR_EXP 30
8742: PUSH
8743: LD_INT 1
8745: ST_TO_ADDR
// end ; if dec2 = 3 then
8746: LD_VAR 0 4
8750: PUSH
8751: LD_INT 3
8753: EQUAL
8754: IFFALSE 8812
// begin Say ( JMM , D4c-JMM-1 ) ;
8756: LD_EXP 1
8760: PPUSH
8761: LD_STRING D4c-JMM-1
8763: PPUSH
8764: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8768: LD_EXP 24
8772: PPUSH
8773: LD_STRING D4c-Kurt-1
8775: PPUSH
8776: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8780: LD_EXP 1
8784: PPUSH
8785: LD_STRING D4c-JMM-2
8787: PPUSH
8788: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8792: LD_EXP 24
8796: PPUSH
8797: LD_STRING D4c-Kurt-2
8799: PPUSH
8800: CALL_OW 88
// fakeInfo = 1 ;
8804: LD_ADDR_EXP 31
8808: PUSH
8809: LD_INT 1
8811: ST_TO_ADDR
// end ; end ; if payForNeutral or payForHelp then
8812: LD_VAR 0 13
8816: PUSH
8817: LD_VAR 0 14
8821: OR
8822: IFFALSE 9123
// begin for i in tmp do
8824: LD_ADDR_VAR 0 2
8828: PUSH
8829: LD_VAR 0 5
8833: PUSH
8834: FOR_IN
8835: IFFALSE 9121
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
8837: LD_ADDR_VAR 0 6
8841: PUSH
8842: LD_VAR 0 2
8846: PPUSH
8847: CALL_OW 274
8851: PPUSH
8852: LD_INT 1
8854: PPUSH
8855: CALL_OW 275
8859: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
8860: LD_ADDR_VAR 0 7
8864: PUSH
8865: LD_VAR 0 2
8869: PPUSH
8870: CALL_OW 274
8874: PPUSH
8875: LD_INT 3
8877: PPUSH
8878: CALL_OW 275
8882: ST_TO_ADDR
// if cr then
8883: LD_VAR 0 11
8887: IFFALSE 9001
// begin if tmp2 and tmp2 < cr then
8889: LD_VAR 0 6
8893: PUSH
8894: LD_VAR 0 6
8898: PUSH
8899: LD_VAR 0 11
8903: LESS
8904: AND
8905: IFFALSE 8953
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
8907: LD_VAR 0 2
8911: PPUSH
8912: CALL_OW 274
8916: PPUSH
8917: LD_INT 1
8919: PPUSH
8920: LD_VAR 0 11
8924: PUSH
8925: LD_VAR 0 6
8929: MINUS
8930: PPUSH
8931: CALL_OW 277
// cr := cr - tmp2 ;
8935: LD_ADDR_VAR 0 11
8939: PUSH
8940: LD_VAR 0 11
8944: PUSH
8945: LD_VAR 0 6
8949: MINUS
8950: ST_TO_ADDR
// end else
8951: GO 9001
// if tmp2 > cr then
8953: LD_VAR 0 6
8957: PUSH
8958: LD_VAR 0 11
8962: GREATER
8963: IFFALSE 9001
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
8965: LD_VAR 0 2
8969: PPUSH
8970: CALL_OW 274
8974: PPUSH
8975: LD_INT 1
8977: PPUSH
8978: LD_VAR 0 6
8982: PUSH
8983: LD_VAR 0 11
8987: MINUS
8988: PPUSH
8989: CALL_OW 277
// cr := 0 ;
8993: LD_ADDR_VAR 0 11
8997: PUSH
8998: LD_INT 0
9000: ST_TO_ADDR
// end ; end ; if sb then
9001: LD_VAR 0 12
9005: IFFALSE 9119
// begin if tmp3 and tmp3 < sb then
9007: LD_VAR 0 7
9011: PUSH
9012: LD_VAR 0 7
9016: PUSH
9017: LD_VAR 0 12
9021: LESS
9022: AND
9023: IFFALSE 9071
// begin SetResourceType ( GetBase ( i ) , 3 , sb - tmp3 ) ;
9025: LD_VAR 0 2
9029: PPUSH
9030: CALL_OW 274
9034: PPUSH
9035: LD_INT 3
9037: PPUSH
9038: LD_VAR 0 12
9042: PUSH
9043: LD_VAR 0 7
9047: MINUS
9048: PPUSH
9049: CALL_OW 277
// sb := sb - tmp3 ;
9053: LD_ADDR_VAR 0 12
9057: PUSH
9058: LD_VAR 0 12
9062: PUSH
9063: LD_VAR 0 7
9067: MINUS
9068: ST_TO_ADDR
// end else
9069: GO 9119
// if tmp3 > sb then
9071: LD_VAR 0 7
9075: PUSH
9076: LD_VAR 0 12
9080: GREATER
9081: IFFALSE 9119
// begin SetResourceType ( GetBase ( i ) , 3 , tmp3 - sb ) ;
9083: LD_VAR 0 2
9087: PPUSH
9088: CALL_OW 274
9092: PPUSH
9093: LD_INT 3
9095: PPUSH
9096: LD_VAR 0 7
9100: PUSH
9101: LD_VAR 0 12
9105: MINUS
9106: PPUSH
9107: CALL_OW 277
// sb := 0 ;
9111: LD_ADDR_VAR 0 12
9115: PUSH
9116: LD_INT 0
9118: ST_TO_ADDR
// end ; end ; end ;
9119: GO 8834
9121: POP
9122: POP
// end ; end ; DialogueOff ;
9123: CALL_OW 7
// RemoveSeeing ( 167 , 121 , 1 ) ;
9127: LD_INT 167
9129: PPUSH
9130: LD_INT 121
9132: PPUSH
9133: LD_INT 1
9135: PPUSH
9136: CALL_OW 331
// ComEnterUnit ( Kurt , KurtVeh ) ;
9140: LD_EXP 24
9144: PPUSH
9145: LD_EXP 25
9149: PPUSH
9150: CALL_OW 120
// wait ( 0 0$1 ) ;
9154: LD_INT 35
9156: PPUSH
9157: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9161: LD_EXP 25
9165: PPUSH
9166: LD_INT 4
9168: PPUSH
9169: CALL_OW 113
// wait ( 0 0$3 ) ;
9173: LD_INT 105
9175: PPUSH
9176: CALL_OW 67
// RemoveUnit ( Kurt ) ;
9180: LD_EXP 24
9184: PPUSH
9185: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9189: LD_EXP 25
9193: PPUSH
9194: CALL_OW 64
// wait ( 0 0$3 ) ;
9198: LD_INT 105
9200: PPUSH
9201: CALL_OW 67
// if payForHelp then
9205: LD_VAR 0 14
9209: IFFALSE 9267
// begin HiddenCamera ( 36 , 57 , 1 ) ;
9211: LD_INT 36
9213: PPUSH
9214: LD_INT 57
9216: PPUSH
9217: LD_INT 1
9219: PPUSH
9220: CALL_OW 244
// HiddenCamera ( 51 , 63 , 1 ) ;
9224: LD_INT 51
9226: PPUSH
9227: LD_INT 63
9229: PPUSH
9230: LD_INT 1
9232: PPUSH
9233: CALL_OW 244
// HiddenCamera ( 93 , 65 , 1 ) ;
9237: LD_INT 93
9239: PPUSH
9240: LD_INT 65
9242: PPUSH
9243: LD_INT 1
9245: PPUSH
9246: CALL_OW 244
// HiddenCamera ( 42 , 12 , 1 ) ;
9250: LD_INT 42
9252: PPUSH
9253: LD_INT 12
9255: PPUSH
9256: LD_INT 1
9258: PPUSH
9259: CALL_OW 244
// PrepareLegionForPlayer ;
9263: CALL 4566 0 0
// end ; end ;
9267: LD_VAR 0 1
9271: RET
// every 0 0$10 trigger warWithLegion = 1 do
9272: LD_EXP 30
9276: PUSH
9277: LD_INT 1
9279: EQUAL
9280: IFFALSE 9289
9282: GO 9284
9284: DISABLE
// PrepareAttackLegion ;
9285: CALL 5230 0 0
9289: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 1 ) and not GetCargo ( amCargo1 , 2 ) and not GetCargo ( amCargo1 , 3 ) do
9290: LD_EXP 15
9294: PPUSH
9295: CALL_OW 305
9299: PUSH
9300: LD_EXP 15
9304: PPUSH
9305: LD_INT 1
9307: PPUSH
9308: CALL_OW 289
9312: NOT
9313: AND
9314: PUSH
9315: LD_EXP 15
9319: PPUSH
9320: LD_INT 2
9322: PPUSH
9323: CALL_OW 289
9327: NOT
9328: AND
9329: PUSH
9330: LD_EXP 15
9334: PPUSH
9335: LD_INT 3
9337: PPUSH
9338: CALL_OW 289
9342: NOT
9343: AND
9344: IFFALSE 9361
9346: GO 9348
9348: DISABLE
// SetSide ( amCargo1 , 4 ) ;
9349: LD_EXP 15
9353: PPUSH
9354: LD_INT 4
9356: PPUSH
9357: CALL_OW 235
9361: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 2 ) and not GetCargo ( amCargo2 , 3 ) do
9362: LD_EXP 16
9366: PPUSH
9367: CALL_OW 305
9371: PUSH
9372: LD_EXP 16
9376: PPUSH
9377: LD_INT 1
9379: PPUSH
9380: CALL_OW 289
9384: NOT
9385: AND
9386: PUSH
9387: LD_EXP 16
9391: PPUSH
9392: LD_INT 2
9394: PPUSH
9395: CALL_OW 289
9399: NOT
9400: AND
9401: PUSH
9402: LD_EXP 16
9406: PPUSH
9407: LD_INT 3
9409: PPUSH
9410: CALL_OW 289
9414: NOT
9415: AND
9416: IFFALSE 9433
9418: GO 9420
9420: DISABLE
// SetSide ( amCargo2 , 4 ) ;
9421: LD_EXP 16
9425: PPUSH
9426: LD_INT 4
9428: PPUSH
9429: CALL_OW 235
9433: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo3 , 1 ) and not GetCargo ( amCargo3 , 2 ) and not GetCargo ( amCargo3 , 3 ) do
9434: LD_EXP 17
9438: PPUSH
9439: CALL_OW 305
9443: PUSH
9444: LD_EXP 17
9448: PPUSH
9449: LD_INT 1
9451: PPUSH
9452: CALL_OW 289
9456: NOT
9457: AND
9458: PUSH
9459: LD_EXP 17
9463: PPUSH
9464: LD_INT 2
9466: PPUSH
9467: CALL_OW 289
9471: NOT
9472: AND
9473: PUSH
9474: LD_EXP 17
9478: PPUSH
9479: LD_INT 3
9481: PPUSH
9482: CALL_OW 289
9486: NOT
9487: AND
9488: IFFALSE 9505
9490: GO 9492
9492: DISABLE
// SetSide ( amCargo3 , 4 ) ;
9493: LD_EXP 17
9497: PPUSH
9498: LD_INT 4
9500: PPUSH
9501: CALL_OW 235
9505: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo4 , 1 ) and not GetCargo ( amCargo4 , 2 ) and not GetCargo ( amCargo4 , 3 ) do
9506: LD_EXP 18
9510: PPUSH
9511: CALL_OW 305
9515: PUSH
9516: LD_EXP 18
9520: PPUSH
9521: LD_INT 1
9523: PPUSH
9524: CALL_OW 289
9528: NOT
9529: AND
9530: PUSH
9531: LD_EXP 18
9535: PPUSH
9536: LD_INT 2
9538: PPUSH
9539: CALL_OW 289
9543: NOT
9544: AND
9545: PUSH
9546: LD_EXP 18
9550: PPUSH
9551: LD_INT 3
9553: PPUSH
9554: CALL_OW 289
9558: NOT
9559: AND
9560: IFFALSE 9577
9562: GO 9564
9564: DISABLE
// SetSide ( amCargo4 , 4 ) ;
9565: LD_EXP 18
9569: PPUSH
9570: LD_INT 4
9572: PPUSH
9573: CALL_OW 235
9577: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) and not GetCargo ( amCargo5 , 3 ) and not GetCargo ( amCargo5 , 2 ) do
9578: LD_EXP 19
9582: PPUSH
9583: CALL_OW 305
9587: PUSH
9588: LD_EXP 19
9592: PPUSH
9593: LD_INT 1
9595: PPUSH
9596: CALL_OW 289
9600: NOT
9601: AND
9602: PUSH
9603: LD_EXP 19
9607: PPUSH
9608: LD_INT 2
9610: PPUSH
9611: CALL_OW 289
9615: NOT
9616: AND
9617: PUSH
9618: LD_EXP 19
9622: PPUSH
9623: LD_INT 3
9625: PPUSH
9626: CALL_OW 289
9630: NOT
9631: AND
9632: PUSH
9633: LD_EXP 19
9637: PPUSH
9638: LD_INT 2
9640: PPUSH
9641: CALL_OW 289
9645: NOT
9646: AND
9647: IFFALSE 9664
9649: GO 9651
9651: DISABLE
// SetSide ( amCargo5 , 4 ) ;
9652: LD_EXP 19
9656: PPUSH
9657: LD_INT 4
9659: PPUSH
9660: CALL_OW 235
9664: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 1 ) and not GetCargo ( amCargo6 , 2 ) and not GetCargo ( amCargo6 , 3 ) do
9665: LD_EXP 20
9669: PPUSH
9670: CALL_OW 305
9674: PUSH
9675: LD_EXP 20
9679: PPUSH
9680: LD_INT 1
9682: PPUSH
9683: CALL_OW 289
9687: NOT
9688: AND
9689: PUSH
9690: LD_EXP 20
9694: PPUSH
9695: LD_INT 2
9697: PPUSH
9698: CALL_OW 289
9702: NOT
9703: AND
9704: PUSH
9705: LD_EXP 20
9709: PPUSH
9710: LD_INT 3
9712: PPUSH
9713: CALL_OW 289
9717: NOT
9718: AND
9719: IFFALSE 9736
9721: GO 9723
9723: DISABLE
// SetSide ( amCargo6 , 4 ) ;
9724: LD_EXP 20
9728: PPUSH
9729: LD_INT 4
9731: PPUSH
9732: CALL_OW 235
9736: END
// every 0 0$1 trigger IsPlaced ( amCargo7 ) and not GetCargo ( amCargo7 , 1 ) and not GetCargo ( amCargo7 , 2 ) and not GetCargo ( amCargo7 , 3 ) do
9737: LD_EXP 21
9741: PPUSH
9742: CALL_OW 305
9746: PUSH
9747: LD_EXP 21
9751: PPUSH
9752: LD_INT 1
9754: PPUSH
9755: CALL_OW 289
9759: NOT
9760: AND
9761: PUSH
9762: LD_EXP 21
9766: PPUSH
9767: LD_INT 2
9769: PPUSH
9770: CALL_OW 289
9774: NOT
9775: AND
9776: PUSH
9777: LD_EXP 21
9781: PPUSH
9782: LD_INT 3
9784: PPUSH
9785: CALL_OW 289
9789: NOT
9790: AND
9791: IFFALSE 9808
9793: GO 9795
9795: DISABLE
// SetSide ( amCargo7 , 4 ) ;
9796: LD_EXP 21
9800: PPUSH
9801: LD_INT 4
9803: PPUSH
9804: CALL_OW 235
9808: END
// every 0 0$1 do var i ;
9809: GO 9811
9811: DISABLE
9812: LD_INT 0
9814: PPUSH
// begin enable ;
9815: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
9816: LD_ADDR_VAR 0 1
9820: PUSH
9821: LD_INT 22
9823: PUSH
9824: LD_INT 4
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: PPUSH
9831: CALL_OW 69
9835: PUSH
9836: FOR_IN
9837: IFFALSE 9876
// begin ComMoveToArea ( i , PlayerSpawn ) ;
9839: LD_VAR 0 1
9843: PPUSH
9844: LD_INT 4
9846: PPUSH
9847: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
9851: LD_VAR 0 1
9855: PPUSH
9856: LD_INT 4
9858: PPUSH
9859: CALL_OW 308
9863: IFFALSE 9874
// RemoveUnit ( i ) ;
9865: LD_VAR 0 1
9869: PPUSH
9870: CALL_OW 64
// end ;
9874: GO 9836
9876: POP
9877: POP
// end ;
9878: PPOPN 1
9880: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
9881: LD_EXP 27
9885: PUSH
9886: LD_INT 1
9888: EQUAL
9889: IFFALSE 10328
9891: GO 9893
9893: DISABLE
9894: LD_INT 0
9896: PPUSH
9897: PPUSH
9898: PPUSH
// begin enable ;
9899: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9900: LD_ADDR_VAR 0 2
9904: PUSH
9905: LD_INT 12
9907: PPUSH
9908: LD_INT 22
9910: PUSH
9911: LD_INT 3
9913: PUSH
9914: EMPTY
9915: LIST
9916: LIST
9917: PUSH
9918: LD_INT 21
9920: PUSH
9921: LD_INT 2
9923: PUSH
9924: EMPTY
9925: LIST
9926: LIST
9927: PUSH
9928: EMPTY
9929: LIST
9930: LIST
9931: PPUSH
9932: CALL_OW 70
9936: ST_TO_ADDR
// for i in enemyVehs do
9937: LD_ADDR_VAR 0 1
9941: PUSH
9942: LD_VAR 0 2
9946: PUSH
9947: FOR_IN
9948: IFFALSE 10326
// begin if See ( 1 , i ) then
9950: LD_INT 1
9952: PPUSH
9953: LD_VAR 0 1
9957: PPUSH
9958: CALL_OW 292
9962: IFFALSE 10324
// begin disable ;
9964: DISABLE
// DialogueOn ;
9965: CALL_OW 6
// CenterNowOnUnits ( i ) ;
9969: LD_VAR 0 1
9973: PPUSH
9974: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
9978: LD_INT 22
9980: PUSH
9981: LD_INT 1
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: PUSH
9988: LD_INT 26
9990: PUSH
9991: LD_INT 1
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: PUSH
9998: LD_INT 2
10000: PUSH
10001: LD_INT 25
10003: PUSH
10004: LD_INT 1
10006: PUSH
10007: EMPTY
10008: LIST
10009: LIST
10010: PUSH
10011: LD_INT 25
10013: PUSH
10014: LD_INT 2
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: PUSH
10021: LD_INT 25
10023: PUSH
10024: LD_INT 3
10026: PUSH
10027: EMPTY
10028: LIST
10029: LIST
10030: PUSH
10031: LD_INT 25
10033: PUSH
10034: LD_INT 4
10036: PUSH
10037: EMPTY
10038: LIST
10039: LIST
10040: PUSH
10041: LD_INT 25
10043: PUSH
10044: LD_INT 5
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: PUSH
10051: LD_INT 25
10053: PUSH
10054: LD_INT 8
10056: PUSH
10057: EMPTY
10058: LIST
10059: LIST
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: PUSH
10070: EMPTY
10071: LIST
10072: LIST
10073: LIST
10074: PPUSH
10075: CALL_OW 69
10079: PPUSH
10080: LD_STRING DT1-Sol1-1
10082: PPUSH
10083: LD_STRING DT1-FSol1-1
10085: PPUSH
10086: CALL 12340 0 3
// dec = ShowQuery2 ;
10090: LD_ADDR_VAR 0 3
10094: PUSH
10095: CALL 12883 0 0
10099: ST_TO_ADDR
// if dec = 1 then
10100: LD_VAR 0 3
10104: PUSH
10105: LD_INT 1
10107: EQUAL
10108: IFFALSE 10214
// begin Say ( JMM , D2-JMM-1 ) ;
10110: LD_EXP 1
10114: PPUSH
10115: LD_STRING D2-JMM-1
10117: PPUSH
10118: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10122: LD_EXP 22
10126: PPUSH
10127: LD_STRING D2-Pow-1
10129: PPUSH
10130: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
10134: LD_EXP 1
10138: PPUSH
10139: LD_STRING D2a-JMM-1
10141: PPUSH
10142: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
10146: LD_EXP 22
10150: PPUSH
10151: LD_STRING D2a-Pow-1
10153: PPUSH
10154: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
10158: LD_EXP 1
10162: PPUSH
10163: LD_STRING D2a-JMM-2
10165: PPUSH
10166: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10170: LD_EXP 22
10174: PPUSH
10175: LD_STRING D2a-Pow-2
10177: PPUSH
10178: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10182: LD_EXP 1
10186: PPUSH
10187: LD_STRING D2a-JMM-3
10189: PPUSH
10190: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10194: LD_EXP 22
10198: PPUSH
10199: LD_STRING D2a-Pow-3
10201: PPUSH
10202: CALL_OW 94
// secondPass = 2 ;
10206: LD_ADDR_EXP 27
10210: PUSH
10211: LD_INT 2
10213: ST_TO_ADDR
// end ; if dec = 2 then
10214: LD_VAR 0 3
10218: PUSH
10219: LD_INT 2
10221: EQUAL
10222: IFFALSE 10316
// begin Say ( JMM , D2-JMM-1 ) ;
10224: LD_EXP 1
10228: PPUSH
10229: LD_STRING D2-JMM-1
10231: PPUSH
10232: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10236: LD_EXP 22
10240: PPUSH
10241: LD_STRING D2-Pow-1
10243: PPUSH
10244: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
10248: LD_EXP 1
10252: PPUSH
10253: LD_STRING D2b-JMM-1
10255: PPUSH
10256: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
10260: LD_EXP 22
10264: PPUSH
10265: LD_STRING D2b-Pow-1
10267: PPUSH
10268: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10272: LD_EXP 1
10276: PPUSH
10277: LD_STRING D2c-JMM-1
10279: PPUSH
10280: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10284: LD_EXP 22
10288: PPUSH
10289: LD_STRING D2c-Pow-1
10291: PPUSH
10292: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10296: LD_EXP 1
10300: PPUSH
10301: LD_STRING D2c-JMM-2
10303: PPUSH
10304: CALL_OW 88
// secondPass = 2 ;
10308: LD_ADDR_EXP 27
10312: PUSH
10313: LD_INT 2
10315: ST_TO_ADDR
// end ; DialogueOff ;
10316: CALL_OW 7
// exit ;
10320: POP
10321: POP
10322: GO 10328
// end ; end ;
10324: GO 9947
10326: POP
10327: POP
// end ;
10328: PPOPN 3
10330: END
// every 0 0$1 trigger vehicleTeleported = 1 do var i , vehicles ;
10331: LD_EXP 28
10335: PUSH
10336: LD_INT 1
10338: EQUAL
10339: IFFALSE 10572
10341: GO 10343
10343: DISABLE
10344: LD_INT 0
10346: PPUSH
10347: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
10348: LD_ADDR_VAR 0 2
10352: PUSH
10353: LD_INT 11
10355: PPUSH
10356: LD_INT 22
10358: PUSH
10359: LD_INT 3
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: PUSH
10366: LD_INT 24
10368: PUSH
10369: LD_INT 250
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: PPUSH
10380: CALL_OW 70
10384: ST_TO_ADDR
// enable ;
10385: ENABLE
// for i in vehicles do
10386: LD_ADDR_VAR 0 1
10390: PUSH
10391: LD_VAR 0 2
10395: PUSH
10396: FOR_IN
10397: IFFALSE 10570
// begin if See ( 1 , i ) and vehicleTeleported = 1 and tpCounter <= 4 then
10399: LD_INT 1
10401: PPUSH
10402: LD_VAR 0 1
10406: PPUSH
10407: CALL_OW 292
10411: PUSH
10412: LD_EXP 28
10416: PUSH
10417: LD_INT 1
10419: EQUAL
10420: AND
10421: PUSH
10422: LD_EXP 29
10426: PUSH
10427: LD_INT 4
10429: LESSEQUAL
10430: AND
10431: IFFALSE 10568
// begin disable ;
10433: DISABLE
// DialogueOn ;
10434: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10438: LD_INT 22
10440: PUSH
10441: LD_INT 1
10443: PUSH
10444: EMPTY
10445: LIST
10446: LIST
10447: PUSH
10448: LD_INT 26
10450: PUSH
10451: LD_INT 1
10453: PUSH
10454: EMPTY
10455: LIST
10456: LIST
10457: PUSH
10458: LD_INT 2
10460: PUSH
10461: LD_INT 25
10463: PUSH
10464: LD_INT 1
10466: PUSH
10467: EMPTY
10468: LIST
10469: LIST
10470: PUSH
10471: LD_INT 25
10473: PUSH
10474: LD_INT 2
10476: PUSH
10477: EMPTY
10478: LIST
10479: LIST
10480: PUSH
10481: LD_INT 25
10483: PUSH
10484: LD_INT 3
10486: PUSH
10487: EMPTY
10488: LIST
10489: LIST
10490: PUSH
10491: LD_INT 25
10493: PUSH
10494: LD_INT 4
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: PUSH
10501: LD_INT 25
10503: PUSH
10504: LD_INT 5
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: PUSH
10511: LD_INT 25
10513: PUSH
10514: LD_INT 8
10516: PUSH
10517: EMPTY
10518: LIST
10519: LIST
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: PUSH
10530: EMPTY
10531: LIST
10532: LIST
10533: LIST
10534: PPUSH
10535: CALL_OW 69
10539: PPUSH
10540: LD_STRING DT1-Sol1-1
10542: PPUSH
10543: LD_STRING DT1-FSol1-1
10545: PPUSH
10546: CALL 12340 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10550: LD_EXP 1
10554: PPUSH
10555: LD_STRING DT1-JMM-1
10557: PPUSH
10558: CALL_OW 88
// DialogueOff ;
10562: CALL_OW 7
// break ;
10566: GO 10570
// end ; end ;
10568: GO 10396
10570: POP
10571: POP
// end ;
10572: PPOPN 2
10574: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter do
10575: LD_EXP 28
10579: PUSH
10580: LD_INT 1
10582: EQUAL
10583: PUSH
10584: LD_INT 11
10586: PPUSH
10587: LD_INT 22
10589: PUSH
10590: LD_INT 3
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: PUSH
10597: LD_INT 24
10599: PUSH
10600: LD_INT 251
10602: PUSH
10603: EMPTY
10604: LIST
10605: LIST
10606: PUSH
10607: LD_INT 2
10609: PUSH
10610: LD_INT 21
10612: PUSH
10613: LD_INT 2
10615: PUSH
10616: EMPTY
10617: LIST
10618: LIST
10619: PUSH
10620: LD_INT 21
10622: PUSH
10623: LD_INT 1
10625: PUSH
10626: EMPTY
10627: LIST
10628: LIST
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: LIST
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: LIST
10639: PPUSH
10640: CALL_OW 70
10644: PUSH
10645: LD_INT 0
10647: EQUAL
10648: AND
10649: PUSH
10650: LD_EXP 29
10654: AND
10655: IFFALSE 10812
10657: GO 10659
10659: DISABLE
// begin vehicleTeleported = 2 ;
10660: LD_ADDR_EXP 28
10664: PUSH
10665: LD_INT 2
10667: ST_TO_ADDR
// DialogueOn ;
10668: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
10672: LD_EXP 1
10676: PPUSH
10677: LD_STRING DT1a-JMM-1
10679: PPUSH
10680: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
10684: LD_INT 22
10686: PUSH
10687: LD_INT 1
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: PUSH
10694: LD_INT 26
10696: PUSH
10697: LD_INT 1
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: PUSH
10704: LD_INT 2
10706: PUSH
10707: LD_INT 25
10709: PUSH
10710: LD_INT 1
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: PUSH
10717: LD_INT 25
10719: PUSH
10720: LD_INT 2
10722: PUSH
10723: EMPTY
10724: LIST
10725: LIST
10726: PUSH
10727: LD_INT 25
10729: PUSH
10730: LD_INT 3
10732: PUSH
10733: EMPTY
10734: LIST
10735: LIST
10736: PUSH
10737: LD_INT 25
10739: PUSH
10740: LD_INT 4
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PUSH
10747: LD_INT 25
10749: PUSH
10750: LD_INT 5
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: PUSH
10757: LD_INT 25
10759: PUSH
10760: LD_INT 8
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: PUSH
10776: EMPTY
10777: LIST
10778: LIST
10779: LIST
10780: PPUSH
10781: CALL_OW 69
10785: PPUSH
10786: LD_STRING DT1a-Sol1-1
10788: PPUSH
10789: LD_STRING DT1a-FSol1-1
10791: PPUSH
10792: CALL 12340 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
10796: LD_EXP 1
10800: PPUSH
10801: LD_STRING DT1a-JMM-2
10803: PPUSH
10804: CALL_OW 88
// DialogueOff ;
10808: CALL_OW 7
// end ;
10812: END
// every 0 0$2 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] ] ) do var i , vehicles , speaker ;
10813: LD_EXP 28
10817: PUSH
10818: LD_INT 3
10820: EQUAL
10821: PUSH
10822: LD_INT 11
10824: PPUSH
10825: LD_INT 22
10827: PUSH
10828: LD_INT 3
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: PUSH
10835: LD_INT 101
10837: PUSH
10838: LD_INT 1
10840: PUSH
10841: EMPTY
10842: LIST
10843: LIST
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PPUSH
10849: CALL_OW 70
10853: AND
10854: IFFALSE 11135
10856: GO 10858
10858: DISABLE
10859: LD_INT 0
10861: PPUSH
10862: PPUSH
10863: PPUSH
// begin wait ( 0 0$0.3 ) ;
10864: LD_INT 10
10866: PPUSH
10867: CALL_OW 67
// DialogueOn ;
10871: CALL_OW 6
// speaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
10875: LD_ADDR_VAR 0 3
10879: PUSH
10880: LD_INT 22
10882: PUSH
10883: LD_INT 1
10885: PUSH
10886: EMPTY
10887: LIST
10888: LIST
10889: PUSH
10890: LD_INT 26
10892: PUSH
10893: LD_INT 1
10895: PUSH
10896: EMPTY
10897: LIST
10898: LIST
10899: PUSH
10900: LD_INT 2
10902: PUSH
10903: LD_INT 25
10905: PUSH
10906: LD_INT 1
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: PUSH
10913: LD_INT 25
10915: PUSH
10916: LD_INT 2
10918: PUSH
10919: EMPTY
10920: LIST
10921: LIST
10922: PUSH
10923: LD_INT 25
10925: PUSH
10926: LD_INT 3
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: PUSH
10933: LD_INT 25
10935: PUSH
10936: LD_INT 4
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: PUSH
10943: LD_INT 25
10945: PUSH
10946: LD_INT 5
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PUSH
10953: LD_INT 25
10955: PUSH
10956: LD_INT 8
10958: PUSH
10959: EMPTY
10960: LIST
10961: LIST
10962: PUSH
10963: EMPTY
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: PUSH
10972: EMPTY
10973: LIST
10974: LIST
10975: LIST
10976: PPUSH
10977: CALL_OW 69
10981: PPUSH
10982: LD_STRING DT2-Sol1-1
10984: PPUSH
10985: LD_STRING DT2-FSol1-1
10987: PPUSH
10988: CALL 12340 0 3
10992: ST_TO_ADDR
// DialogueOff ;
10993: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
10997: LD_INT 35
10999: PPUSH
11000: CALL_OW 67
// until FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) = 0 ;
11004: LD_INT 11
11006: PPUSH
11007: LD_INT 22
11009: PUSH
11010: LD_INT 3
11012: PUSH
11013: EMPTY
11014: LIST
11015: LIST
11016: PUSH
11017: LD_INT 24
11019: PUSH
11020: LD_INT 250
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: PPUSH
11031: CALL_OW 70
11035: PUSH
11036: LD_INT 0
11038: EQUAL
11039: IFFALSE 10997
// wait ( 0 0$2 ) ;
11041: LD_INT 70
11043: PPUSH
11044: CALL_OW 67
// vehicleTeleported = 4 ;
11048: LD_ADDR_EXP 28
11052: PUSH
11053: LD_INT 4
11055: ST_TO_ADDR
// DialogueOn ;
11056: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
11060: LD_EXP 1
11064: PPUSH
11065: LD_STRING DT2a-JMM-1
11067: PPUSH
11068: CALL_OW 88
// if speaker then
11072: LD_VAR 0 3
11076: IFFALSE 11119
// if GetSex ( speaker ) = 1 then
11078: LD_VAR 0 3
11082: PPUSH
11083: CALL_OW 258
11087: PUSH
11088: LD_INT 1
11090: EQUAL
11091: IFFALSE 11107
// Say ( speaker , DT2a-Sol1-1 ) else
11093: LD_VAR 0 3
11097: PPUSH
11098: LD_STRING DT2a-Sol1-1
11100: PPUSH
11101: CALL_OW 88
11105: GO 11119
// Say ( speaker , DT2a-FSol1-1 ) ;
11107: LD_VAR 0 3
11111: PPUSH
11112: LD_STRING DT2a-FSol1-1
11114: PPUSH
11115: CALL_OW 88
// Say ( Donaldson , DT2a-Don-1 ) ;
11119: LD_EXP 3
11123: PPUSH
11124: LD_STRING DT2a-Don-1
11126: PPUSH
11127: CALL_OW 88
// DialogueOff ;
11131: CALL_OW 7
// end ;
11135: PPOPN 3
11137: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
11138: LD_INT 1
11140: PPUSH
11141: LD_INT 45
11143: PPUSH
11144: LD_INT 74
11146: PPUSH
11147: CALL_OW 293
11151: IFFALSE 11315
11153: GO 11155
11155: DISABLE
// begin DialogueOn ;
11156: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
11160: LD_INT 36
11162: PPUSH
11163: LD_INT 55
11165: PPUSH
11166: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
11170: LD_INT 22
11172: PUSH
11173: LD_INT 1
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: PUSH
11180: LD_INT 26
11182: PUSH
11183: LD_INT 1
11185: PUSH
11186: EMPTY
11187: LIST
11188: LIST
11189: PUSH
11190: LD_INT 2
11192: PUSH
11193: LD_INT 25
11195: PUSH
11196: LD_INT 1
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: PUSH
11203: LD_INT 25
11205: PUSH
11206: LD_INT 2
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: PUSH
11213: LD_INT 25
11215: PUSH
11216: LD_INT 3
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: PUSH
11223: LD_INT 25
11225: PUSH
11226: LD_INT 4
11228: PUSH
11229: EMPTY
11230: LIST
11231: LIST
11232: PUSH
11233: LD_INT 25
11235: PUSH
11236: LD_INT 5
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: PUSH
11243: LD_INT 25
11245: PUSH
11246: LD_INT 8
11248: PUSH
11249: EMPTY
11250: LIST
11251: LIST
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: LIST
11266: PPUSH
11267: CALL_OW 69
11271: PPUSH
11272: LD_STRING D5-Sol1-1
11274: PPUSH
11275: LD_STRING D5-FSol1-
11277: PPUSH
11278: CALL 12340 0 3
// if warWithLegion and IsOk ( Donaldson ) then
11282: LD_EXP 30
11286: PUSH
11287: LD_EXP 3
11291: PPUSH
11292: CALL_OW 302
11296: AND
11297: IFFALSE 11311
// Say ( Donaldson , D5-Don-1 ) ;
11299: LD_EXP 3
11303: PPUSH
11304: LD_STRING D5-Don-1
11306: PPUSH
11307: CALL_OW 88
// DialogueOff ;
11311: CALL_OW 7
// end ;
11315: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
11316: LD_INT 1
11318: PPUSH
11319: LD_INT 10
11321: PPUSH
11322: CALL_OW 292
11326: PUSH
11327: LD_INT 1
11329: PPUSH
11330: LD_INT 137
11332: PPUSH
11333: CALL_OW 292
11337: OR
11338: IFFALSE 11482
11340: GO 11342
11342: DISABLE
// begin DialogueOn ;
11343: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
11347: LD_INT 22
11349: PUSH
11350: LD_INT 1
11352: PUSH
11353: EMPTY
11354: LIST
11355: LIST
11356: PUSH
11357: LD_INT 26
11359: PUSH
11360: LD_INT 1
11362: PUSH
11363: EMPTY
11364: LIST
11365: LIST
11366: PUSH
11367: LD_INT 2
11369: PUSH
11370: LD_INT 25
11372: PUSH
11373: LD_INT 1
11375: PUSH
11376: EMPTY
11377: LIST
11378: LIST
11379: PUSH
11380: LD_INT 25
11382: PUSH
11383: LD_INT 2
11385: PUSH
11386: EMPTY
11387: LIST
11388: LIST
11389: PUSH
11390: LD_INT 25
11392: PUSH
11393: LD_INT 3
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: PUSH
11400: LD_INT 25
11402: PUSH
11403: LD_INT 4
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: PUSH
11410: LD_INT 25
11412: PUSH
11413: LD_INT 5
11415: PUSH
11416: EMPTY
11417: LIST
11418: LIST
11419: PUSH
11420: LD_INT 25
11422: PUSH
11423: LD_INT 8
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: LIST
11443: PPUSH
11444: CALL_OW 69
11448: PPUSH
11449: LD_STRING DT3-Sol1-1
11451: PPUSH
11452: LD_STRING DT3-FSol1-1
11454: PPUSH
11455: CALL 12340 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11459: LD_EXP 1
11463: PPUSH
11464: LD_STRING DT3-JMM-1
11466: PPUSH
11467: CALL_OW 88
// DialogueOff ;
11471: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11475: LD_STRING M2
11477: PPUSH
11478: CALL_OW 337
// end ;
11482: END
// every 0 0$1 trigger ruEscape = 0 do var i ;
11483: LD_EXP 42
11487: PUSH
11488: LD_INT 0
11490: EQUAL
11491: IFFALSE 11574
11493: GO 11495
11495: DISABLE
11496: LD_INT 0
11498: PPUSH
// begin enable ;
11499: ENABLE
// for i in FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
11500: LD_ADDR_VAR 0 1
11504: PUSH
11505: LD_INT 10
11507: PPUSH
11508: LD_INT 22
11510: PUSH
11511: LD_INT 3
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: PUSH
11518: LD_INT 21
11520: PUSH
11521: LD_INT 2
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: PUSH
11528: LD_INT 58
11530: PUSH
11531: EMPTY
11532: LIST
11533: PUSH
11534: EMPTY
11535: LIST
11536: LIST
11537: LIST
11538: PPUSH
11539: CALL_OW 70
11543: PUSH
11544: FOR_IN
11545: IFFALSE 11572
// if GetLives ( i ) < 1000 then
11547: LD_VAR 0 1
11551: PPUSH
11552: CALL_OW 256
11556: PUSH
11557: LD_INT 1000
11559: LESS
11560: IFFALSE 11570
// ruEscape = 1 ;
11562: LD_ADDR_EXP 42
11566: PUSH
11567: LD_INT 1
11569: ST_TO_ADDR
11570: GO 11544
11572: POP
11573: POP
// end ;
11574: PPOPN 1
11576: END
// every 0 0$1 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or FilterUnitsInArea ( EscapeTriggerArea , [ f_side , 1 ] ) > 0 or ruEscape = 1 do var i , j , vehs ;
11577: LD_INT 3
11579: PPUSH
11580: CALL_OW 303
11584: PUSH
11585: LD_INT 4
11587: PPUSH
11588: CALL_OW 303
11592: OR
11593: PUSH
11594: LD_INT 22
11596: PPUSH
11597: LD_INT 22
11599: PUSH
11600: LD_INT 1
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: PPUSH
11607: CALL_OW 70
11611: PUSH
11612: LD_INT 0
11614: GREATER
11615: OR
11616: PUSH
11617: LD_EXP 42
11621: PUSH
11622: LD_INT 1
11624: EQUAL
11625: OR
11626: IFFALSE 11857
11628: GO 11630
11630: DISABLE
11631: LD_INT 0
11633: PPUSH
11634: PPUSH
11635: PPUSH
// begin ruAI = 0 ;
11636: LD_ADDR_EXP 41
11640: PUSH
11641: LD_INT 0
11643: ST_TO_ADDR
// vehs = FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11644: LD_ADDR_VAR 0 3
11648: PUSH
11649: LD_INT 10
11651: PPUSH
11652: LD_INT 22
11654: PUSH
11655: LD_INT 3
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: PUSH
11662: LD_INT 21
11664: PUSH
11665: LD_INT 2
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: PUSH
11672: LD_INT 58
11674: PUSH
11675: EMPTY
11676: LIST
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: LIST
11682: PPUSH
11683: CALL_OW 70
11687: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
11688: LD_EXP 34
11692: PPUSH
11693: CALL_OW 122
// wait ( 0 0$1 ) ;
11697: LD_INT 35
11699: PPUSH
11700: CALL_OW 67
// DialogueOn ;
11704: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
11708: LD_EXP 1
11712: PPUSH
11713: LD_STRING D6-JMM-1
11715: PPUSH
11716: CALL_OW 88
// DialogueOff ;
11720: CALL_OW 7
// if vehs > 0 then
11724: LD_VAR 0 3
11728: PUSH
11729: LD_INT 0
11731: GREATER
11732: IFFALSE 11802
// for i := 1 to RuScientists do
11734: LD_ADDR_VAR 0 1
11738: PUSH
11739: DOUBLE
11740: LD_INT 1
11742: DEC
11743: ST_TO_ADDR
11744: LD_EXP 34
11748: PUSH
11749: FOR_TO
11750: IFFALSE 11798
// ComEnterUnit ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , vehs [ i ] ) else
11752: LD_EXP 34
11756: PUSH
11757: LD_VAR 0 1
11761: ARRAY
11762: PPUSH
11763: LD_INT 3
11765: PUSH
11766: LD_INT 60
11768: PUSH
11769: EMPTY
11770: LIST
11771: PUSH
11772: EMPTY
11773: LIST
11774: LIST
11775: PPUSH
11776: CALL_OW 72
11780: PPUSH
11781: LD_VAR 0 3
11785: PUSH
11786: LD_VAR 0 1
11790: ARRAY
11791: PPUSH
11792: CALL_OW 120
11796: GO 11749
11798: POP
11799: POP
11800: GO 11857
// ComMoveToArea ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
11802: LD_EXP 34
11806: PUSH
11807: LD_VAR 0 1
11811: ARRAY
11812: PPUSH
11813: LD_INT 3
11815: PUSH
11816: LD_INT 60
11818: PUSH
11819: EMPTY
11820: LIST
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: PPUSH
11826: CALL_OW 72
11830: PPUSH
11831: LD_INT 13
11833: PUSH
11834: LD_INT 14
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PUSH
11841: LD_INT 1
11843: PPUSH
11844: LD_INT 2
11846: PPUSH
11847: CALL_OW 12
11851: ARRAY
11852: PPUSH
11853: CALL_OW 113
// end ;
11857: PPOPN 3
11859: END
// every 0 0$0.3 trigger ruAI = 0 do var i , unit , veh , tmp ;
11860: LD_EXP 41
11864: PUSH
11865: LD_INT 0
11867: EQUAL
11868: IFFALSE 12240
11870: GO 11872
11872: DISABLE
11873: LD_INT 0
11875: PPUSH
11876: PPUSH
11877: PPUSH
11878: PPUSH
// begin enable ;
11879: ENABLE
// if UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) or FilterAllUnits ( [ [ f_control , control_manual ] , [ f_nation , 3 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ] ) then
11880: LD_EXP 34
11884: PPUSH
11885: LD_INT 2
11887: PUSH
11888: LD_INT 95
11890: PUSH
11891: LD_INT 13
11893: PUSH
11894: EMPTY
11895: LIST
11896: LIST
11897: PUSH
11898: LD_INT 95
11900: PUSH
11901: LD_INT 14
11903: PUSH
11904: EMPTY
11905: LIST
11906: LIST
11907: PUSH
11908: EMPTY
11909: LIST
11910: LIST
11911: LIST
11912: PPUSH
11913: CALL_OW 72
11917: PUSH
11918: LD_INT 33
11920: PUSH
11921: LD_INT 1
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: PUSH
11928: LD_INT 23
11930: PUSH
11931: LD_INT 3
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: PUSH
11938: LD_INT 2
11940: PUSH
11941: LD_INT 95
11943: PUSH
11944: LD_INT 13
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: PUSH
11951: LD_INT 95
11953: PUSH
11954: LD_INT 14
11956: PUSH
11957: EMPTY
11958: LIST
11959: LIST
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: LIST
11965: PUSH
11966: EMPTY
11967: LIST
11968: LIST
11969: LIST
11970: PPUSH
11971: CALL_OW 69
11975: OR
11976: IFFALSE 12165
// begin unit := UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) [ 1 ] ;
11978: LD_ADDR_VAR 0 2
11982: PUSH
11983: LD_EXP 34
11987: PPUSH
11988: LD_INT 2
11990: PUSH
11991: LD_INT 95
11993: PUSH
11994: LD_INT 13
11996: PUSH
11997: EMPTY
11998: LIST
11999: LIST
12000: PUSH
12001: LD_INT 95
12003: PUSH
12004: LD_INT 14
12006: PUSH
12007: EMPTY
12008: LIST
12009: LIST
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: LIST
12015: PPUSH
12016: CALL_OW 72
12020: PUSH
12021: LD_INT 1
12023: ARRAY
12024: ST_TO_ADDR
// if not unit then
12025: LD_VAR 0 2
12029: NOT
12030: IFFALSE 12165
// begin tmp := FilterAllUnits ( [ [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] , [ f_control , control_manual ] , [ f_nation , 3 ] ] ) ;
12032: LD_ADDR_VAR 0 4
12036: PUSH
12037: LD_INT 2
12039: PUSH
12040: LD_INT 95
12042: PUSH
12043: LD_INT 13
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: PUSH
12050: LD_INT 95
12052: PUSH
12053: LD_INT 14
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: PUSH
12060: EMPTY
12061: LIST
12062: LIST
12063: LIST
12064: PUSH
12065: LD_INT 33
12067: PUSH
12068: LD_INT 1
12070: PUSH
12071: EMPTY
12072: LIST
12073: LIST
12074: PUSH
12075: LD_INT 23
12077: PUSH
12078: LD_INT 3
12080: PUSH
12081: EMPTY
12082: LIST
12083: LIST
12084: PUSH
12085: EMPTY
12086: LIST
12087: LIST
12088: LIST
12089: PPUSH
12090: CALL_OW 69
12094: ST_TO_ADDR
// if not tmp then
12095: LD_VAR 0 4
12099: NOT
12100: IFFALSE 12104
// exit ;
12102: GO 12240
// for i in tmp do
12104: LD_ADDR_VAR 0 1
12108: PUSH
12109: LD_VAR 0 4
12113: PUSH
12114: FOR_IN
12115: IFFALSE 12163
// if IsDrivenBy ( i ) in RuScientists then
12117: LD_VAR 0 1
12121: PPUSH
12122: CALL_OW 311
12126: PUSH
12127: LD_EXP 34
12131: IN
12132: IFFALSE 12161
// begin unit := IsDrivenBy ( i ) ;
12134: LD_ADDR_VAR 0 2
12138: PUSH
12139: LD_VAR 0 1
12143: PPUSH
12144: CALL_OW 311
12148: ST_TO_ADDR
// veh := i ;
12149: LD_ADDR_VAR 0 3
12153: PUSH
12154: LD_VAR 0 1
12158: ST_TO_ADDR
// break ;
12159: GO 12163
// end ;
12161: GO 12114
12163: POP
12164: POP
// end ; end ; if not unit then
12165: LD_VAR 0 2
12169: NOT
12170: IFFALSE 12174
// exit ;
12172: GO 12240
// RuScientists = RuScientists diff unit ;
12174: LD_ADDR_EXP 34
12178: PUSH
12179: LD_EXP 34
12183: PUSH
12184: LD_VAR 0 2
12188: DIFF
12189: ST_TO_ADDR
// RemoveUnit ( unit ) ;
12190: LD_VAR 0 2
12194: PPUSH
12195: CALL_OW 64
// if veh then
12199: LD_VAR 0 3
12203: IFFALSE 12240
// begin if GetWeapon ( veh ) = 49 then
12205: LD_VAR 0 3
12209: PPUSH
12210: CALL_OW 264
12214: PUSH
12215: LD_INT 49
12217: EQUAL
12218: IFFALSE 12231
// KillUnit ( veh ) else
12220: LD_VAR 0 3
12224: PPUSH
12225: CALL_OW 66
12229: GO 12240
// RemoveUnit ( veh ) ;
12231: LD_VAR 0 3
12235: PPUSH
12236: CALL_OW 64
// end ; end ; end_of_file
12240: PPOPN 4
12242: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
12243: LD_INT 0
12245: PPUSH
12246: PPUSH
// if exist_mode then
12247: LD_VAR 0 2
12251: IFFALSE 12270
// unit := CreateCharacter ( ident ) else
12253: LD_ADDR_VAR 0 4
12257: PUSH
12258: LD_VAR 0 1
12262: PPUSH
12263: CALL_OW 34
12267: ST_TO_ADDR
12268: GO 12285
// unit := NewCharacter ( ident ) ;
12270: LD_ADDR_VAR 0 4
12274: PUSH
12275: LD_VAR 0 1
12279: PPUSH
12280: CALL_OW 25
12284: ST_TO_ADDR
// result := unit ;
12285: LD_ADDR_VAR 0 3
12289: PUSH
12290: LD_VAR 0 4
12294: ST_TO_ADDR
// end ;
12295: LD_VAR 0 3
12299: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12300: LD_INT 0
12302: PPUSH
12303: PPUSH
// for i in charactersList do
12304: LD_ADDR_VAR 0 4
12308: PUSH
12309: LD_VAR 0 1
12313: PUSH
12314: FOR_IN
12315: IFFALSE 12333
// SaveCharacters ( i , ident ) ;
12317: LD_VAR 0 4
12321: PPUSH
12322: LD_VAR 0 2
12326: PPUSH
12327: CALL_OW 38
12331: GO 12314
12333: POP
12334: POP
// end ;
12335: LD_VAR 0 3
12339: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
12340: LD_INT 0
12342: PPUSH
12343: PPUSH
12344: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12345: LD_ADDR_VAR 0 1
12349: PUSH
12350: LD_VAR 0 1
12354: PUSH
12355: LD_EXP 1
12359: PUSH
12360: LD_EXP 7
12364: PUSH
12365: LD_EXP 3
12369: PUSH
12370: LD_EXP 4
12374: PUSH
12375: LD_EXP 5
12379: PUSH
12380: LD_EXP 2
12384: PUSH
12385: LD_EXP 12
12389: PUSH
12390: LD_EXP 13
12394: PUSH
12395: LD_EXP 9
12399: PUSH
12400: LD_EXP 11
12404: PUSH
12405: LD_EXP 6
12409: PUSH
12410: LD_EXP 8
12414: PUSH
12415: LD_EXP 10
12419: PUSH
12420: LD_EXP 22
12424: PUSH
12425: EMPTY
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: DIFF
12441: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
12442: LD_ADDR_VAR 0 6
12446: PUSH
12447: LD_VAR 0 1
12451: PUSH
12452: LD_INT 1
12454: PPUSH
12455: LD_VAR 0 1
12459: PPUSH
12460: CALL_OW 12
12464: ARRAY
12465: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
12466: LD_VAR 0 6
12470: PPUSH
12471: CALL_OW 258
12475: PUSH
12476: LD_INT 1
12478: EQUAL
12479: IFFALSE 12497
// Say ( speaker , dialogMID ) else
12481: LD_VAR 0 6
12485: PPUSH
12486: LD_VAR 0 2
12490: PPUSH
12491: CALL_OW 88
12495: GO 12511
// Say ( speaker , dialogFID ) ;
12497: LD_VAR 0 6
12501: PPUSH
12502: LD_VAR 0 3
12506: PPUSH
12507: CALL_OW 88
// result := speaker ;
12511: LD_ADDR_VAR 0 4
12515: PUSH
12516: LD_VAR 0 6
12520: ST_TO_ADDR
// end ;
12521: LD_VAR 0 4
12525: RET
// export function PrepareDifficulty ; var tmp ; begin
12526: LD_INT 0
12528: PPUSH
12529: PPUSH
// if Difficulty = 1 then
12530: LD_OWVAR 67
12534: PUSH
12535: LD_INT 1
12537: EQUAL
12538: IFFALSE 12556
// begin RuSolMinLevel = 8 ;
12540: LD_ADDR_EXP 36
12544: PUSH
12545: LD_INT 8
12547: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12548: LD_ADDR_EXP 37
12552: PUSH
12553: LD_INT 10
12555: ST_TO_ADDR
// end ; if Difficulty = 2 then
12556: LD_OWVAR 67
12560: PUSH
12561: LD_INT 2
12563: EQUAL
12564: IFFALSE 12658
// begin RuSolMinLevel = 9 ;
12566: LD_ADDR_EXP 36
12570: PUSH
12571: LD_INT 9
12573: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12574: LD_ADDR_EXP 37
12578: PUSH
12579: LD_INT 10
12581: ST_TO_ADDR
// uc_nation = 3 ;
12582: LD_ADDR_OWVAR 21
12586: PUSH
12587: LD_INT 3
12589: ST_TO_ADDR
// uc_side = 3 ;
12590: LD_ADDR_OWVAR 20
12594: PUSH
12595: LD_INT 3
12597: ST_TO_ADDR
// bc_level = 10 ;
12598: LD_ADDR_OWVAR 43
12602: PUSH
12603: LD_INT 10
12605: ST_TO_ADDR
// bc_type = b_turret ;
12606: LD_ADDR_OWVAR 42
12610: PUSH
12611: LD_INT 33
12613: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12614: LD_ADDR_VAR 0 2
12618: PUSH
12619: LD_INT 86
12621: PPUSH
12622: LD_INT 34
12624: PPUSH
12625: LD_INT 2
12627: PPUSH
12628: CALL_OW 47
12632: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12633: LD_VAR 0 2
12637: PPUSH
12638: LD_INT 49
12640: PPUSH
12641: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12645: LD_INT 64
12647: PPUSH
12648: LD_INT 3
12650: PPUSH
12651: LD_INT 1
12653: PPUSH
12654: CALL_OW 322
// end ; if Difficulty = 3 then
12658: LD_OWVAR 67
12662: PUSH
12663: LD_INT 3
12665: EQUAL
12666: IFFALSE 12804
// begin RuSolMinLevel = 10 ;
12668: LD_ADDR_EXP 36
12672: PUSH
12673: LD_INT 10
12675: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12676: LD_ADDR_EXP 37
12680: PUSH
12681: LD_INT 10
12683: ST_TO_ADDR
// uc_nation = 3 ;
12684: LD_ADDR_OWVAR 21
12688: PUSH
12689: LD_INT 3
12691: ST_TO_ADDR
// uc_side = 3 ;
12692: LD_ADDR_OWVAR 20
12696: PUSH
12697: LD_INT 3
12699: ST_TO_ADDR
// bc_level = 10 ;
12700: LD_ADDR_OWVAR 43
12704: PUSH
12705: LD_INT 10
12707: ST_TO_ADDR
// bc_type = b_turret ;
12708: LD_ADDR_OWVAR 42
12712: PUSH
12713: LD_INT 33
12715: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12716: LD_ADDR_VAR 0 2
12720: PUSH
12721: LD_INT 86
12723: PPUSH
12724: LD_INT 34
12726: PPUSH
12727: LD_INT 2
12729: PPUSH
12730: CALL_OW 47
12734: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12735: LD_VAR 0 2
12739: PPUSH
12740: LD_INT 49
12742: PPUSH
12743: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
12747: LD_ADDR_VAR 0 2
12751: PUSH
12752: LD_INT 93
12754: PPUSH
12755: LD_INT 31
12757: PPUSH
12758: LD_INT 2
12760: PPUSH
12761: CALL_OW 47
12765: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12766: LD_VAR 0 2
12770: PPUSH
12771: LD_INT 49
12773: PPUSH
12774: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12778: LD_INT 64
12780: PPUSH
12781: LD_INT 3
12783: PPUSH
12784: LD_INT 1
12786: PPUSH
12787: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
12791: LD_INT 65
12793: PPUSH
12794: LD_INT 3
12796: PPUSH
12797: LD_INT 1
12799: PPUSH
12800: CALL_OW 322
// end ; end ;
12804: LD_VAR 0 1
12808: RET
// export function ShowQuery1 ; begin
12809: LD_INT 0
12811: PPUSH
// case query ( Q1 ) of 1 :
12812: LD_STRING Q1
12814: PPUSH
12815: CALL_OW 97
12819: PUSH
12820: LD_INT 1
12822: DOUBLE
12823: EQUAL
12824: IFTRUE 12828
12826: GO 12839
12828: POP
// result = 1 ; 2 :
12829: LD_ADDR_VAR 0 1
12833: PUSH
12834: LD_INT 1
12836: ST_TO_ADDR
12837: GO 12878
12839: LD_INT 2
12841: DOUBLE
12842: EQUAL
12843: IFTRUE 12847
12845: GO 12858
12847: POP
// result = 2 ; 3 :
12848: LD_ADDR_VAR 0 1
12852: PUSH
12853: LD_INT 2
12855: ST_TO_ADDR
12856: GO 12878
12858: LD_INT 3
12860: DOUBLE
12861: EQUAL
12862: IFTRUE 12866
12864: GO 12877
12866: POP
// result = 3 ; end ;
12867: LD_ADDR_VAR 0 1
12871: PUSH
12872: LD_INT 3
12874: ST_TO_ADDR
12875: GO 12878
12877: POP
// end ;
12878: LD_VAR 0 1
12882: RET
// export function ShowQuery2 ; begin
12883: LD_INT 0
12885: PPUSH
// case query ( Q1a ) of 1 :
12886: LD_STRING Q1a
12888: PPUSH
12889: CALL_OW 97
12893: PUSH
12894: LD_INT 1
12896: DOUBLE
12897: EQUAL
12898: IFTRUE 12902
12900: GO 12913
12902: POP
// result = 1 ; 2 :
12903: LD_ADDR_VAR 0 1
12907: PUSH
12908: LD_INT 1
12910: ST_TO_ADDR
12911: GO 12952
12913: LD_INT 2
12915: DOUBLE
12916: EQUAL
12917: IFTRUE 12921
12919: GO 12932
12921: POP
// result = 2 ; 3 :
12922: LD_ADDR_VAR 0 1
12926: PUSH
12927: LD_INT 2
12929: ST_TO_ADDR
12930: GO 12952
12932: LD_INT 3
12934: DOUBLE
12935: EQUAL
12936: IFTRUE 12940
12938: GO 12951
12940: POP
// result = 3 ; end ;
12941: LD_ADDR_VAR 0 1
12945: PUSH
12946: LD_INT 3
12948: ST_TO_ADDR
12949: GO 12952
12951: POP
// end ;
12952: LD_VAR 0 1
12956: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
12957: LD_INT 0
12959: PPUSH
12960: PPUSH
12961: PPUSH
12962: PPUSH
12963: PPUSH
// for i = 1 to count do
12964: LD_ADDR_VAR 0 8
12968: PUSH
12969: DOUBLE
12970: LD_INT 1
12972: DEC
12973: ST_TO_ADDR
12974: LD_VAR 0 6
12978: PUSH
12979: FOR_TO
12980: IFFALSE 13061
// begin uc_side = side ;
12982: LD_ADDR_OWVAR 20
12986: PUSH
12987: LD_VAR 0 1
12991: ST_TO_ADDR
// uc_nation = nation ;
12992: LD_ADDR_OWVAR 21
12996: PUSH
12997: LD_VAR 0 2
13001: ST_TO_ADDR
// hc_gallery =  ;
13002: LD_ADDR_OWVAR 33
13006: PUSH
13007: LD_STRING 
13009: ST_TO_ADDR
// hc_name =  ;
13010: LD_ADDR_OWVAR 26
13014: PUSH
13015: LD_STRING 
13017: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
13018: LD_INT 0
13020: PPUSH
13021: LD_VAR 0 5
13025: PPUSH
13026: LD_VAR 0 4
13030: PPUSH
13031: CALL_OW 380
// un = CreateHuman ;
13035: LD_ADDR_VAR 0 10
13039: PUSH
13040: CALL_OW 44
13044: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
13045: LD_VAR 0 10
13049: PPUSH
13050: LD_VAR 0 3
13054: PPUSH
13055: CALL_OW 52
// end ;
13059: GO 12979
13061: POP
13062: POP
// end ;
13063: LD_VAR 0 7
13067: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
13068: LD_INT 0
13070: PPUSH
13071: PPUSH
13072: PPUSH
13073: PPUSH
13074: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
13075: LD_ADDR_VAR 0 8
13079: PUSH
13080: LD_INT 48
13082: PUSH
13083: LD_INT 49
13085: PUSH
13086: LD_INT 50
13088: PUSH
13089: LD_INT 20
13091: PUSH
13092: LD_INT 1
13094: PUSH
13095: LD_INT 51
13097: PUSH
13098: LD_INT 52
13100: PUSH
13101: LD_INT 69
13103: PUSH
13104: LD_INT 39
13106: PUSH
13107: LD_INT 34
13109: PUSH
13110: LD_INT 40
13112: PUSH
13113: LD_INT 53
13115: PUSH
13116: LD_INT 71
13118: PUSH
13119: LD_INT 57
13121: PUSH
13122: LD_INT 58
13124: PUSH
13125: LD_INT 44
13127: PUSH
13128: LD_INT 32
13130: PUSH
13131: LD_INT 27
13133: PUSH
13134: LD_INT 23
13136: PUSH
13137: LD_INT 33
13139: PUSH
13140: LD_INT 59
13142: PUSH
13143: LD_INT 54
13145: PUSH
13146: LD_INT 55
13148: PUSH
13149: LD_INT 56
13151: PUSH
13152: LD_INT 63
13154: PUSH
13155: LD_INT 64
13157: PUSH
13158: LD_INT 65
13160: PUSH
13161: LD_INT 30
13163: PUSH
13164: LD_INT 31
13166: PUSH
13167: LD_INT 21
13169: PUSH
13170: LD_INT 22
13172: PUSH
13173: LD_INT 25
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: ST_TO_ADDR
// for i = 1 to ru_tech_list do
13210: LD_ADDR_VAR 0 5
13214: PUSH
13215: DOUBLE
13216: LD_INT 1
13218: DEC
13219: ST_TO_ADDR
13220: LD_VAR 0 8
13224: PUSH
13225: FOR_TO
13226: IFFALSE 13302
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
13228: LD_VAR 0 8
13232: PUSH
13233: LD_VAR 0 5
13237: ARRAY
13238: PPUSH
13239: LD_VAR 0 1
13243: PPUSH
13244: CALL_OW 321
13248: PUSH
13249: LD_INT 1
13251: EQUAL
13252: PUSH
13253: LD_VAR 0 8
13257: PUSH
13258: LD_VAR 0 5
13262: ARRAY
13263: PPUSH
13264: LD_VAR 0 3
13268: PPUSH
13269: CALL_OW 482
13273: PUSH
13274: LD_INT 1
13276: EQUAL
13277: AND
13278: IFFALSE 13300
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
13280: LD_VAR 0 2
13284: PPUSH
13285: LD_VAR 0 8
13289: PUSH
13290: LD_VAR 0 5
13294: ARRAY
13295: PPUSH
13296: CALL_OW 184
13300: GO 13225
13302: POP
13303: POP
// end ;
13304: LD_VAR 0 4
13308: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
13309: LD_INT 0
13311: PPUSH
13312: PPUSH
13313: PPUSH
13314: PPUSH
13315: PPUSH
13316: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
13317: LD_ADDR_VAR 0 8
13321: PUSH
13322: LD_VAR 0 2
13326: PPUSH
13327: CALL_OW 313
13331: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13332: LD_ADDR_VAR 0 9
13336: PUSH
13337: LD_VAR 0 3
13341: PPUSH
13342: LD_INT 22
13344: PUSH
13345: LD_VAR 0 1
13349: PUSH
13350: EMPTY
13351: LIST
13352: LIST
13353: PUSH
13354: LD_INT 25
13356: PUSH
13357: LD_INT 2
13359: PUSH
13360: EMPTY
13361: LIST
13362: LIST
13363: PUSH
13364: LD_INT 24
13366: PUSH
13367: LD_INT 750
13369: PUSH
13370: EMPTY
13371: LIST
13372: LIST
13373: PUSH
13374: LD_INT 3
13376: PUSH
13377: LD_INT 54
13379: PUSH
13380: EMPTY
13381: LIST
13382: PUSH
13383: EMPTY
13384: LIST
13385: LIST
13386: PUSH
13387: EMPTY
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: PPUSH
13393: CALL_OW 70
13397: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13398: LD_ADDR_VAR 0 6
13402: PUSH
13403: LD_VAR 0 3
13407: PPUSH
13408: LD_INT 22
13410: PUSH
13411: LD_VAR 0 1
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: PUSH
13420: LD_INT 21
13422: PUSH
13423: LD_INT 3
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: PUSH
13430: LD_INT 3
13432: PUSH
13433: LD_INT 24
13435: PUSH
13436: LD_INT 1000
13438: PUSH
13439: EMPTY
13440: LIST
13441: LIST
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: LIST
13451: PUSH
13452: EMPTY
13453: LIST
13454: PPUSH
13455: CALL_OW 70
13459: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13460: LD_VAR 0 6
13464: NOT
13465: PUSH
13466: LD_INT 22
13468: PUSH
13469: LD_VAR 0 1
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: PUSH
13478: LD_INT 25
13480: PUSH
13481: LD_INT 2
13483: PUSH
13484: EMPTY
13485: LIST
13486: LIST
13487: PUSH
13488: LD_INT 24
13490: PUSH
13491: LD_INT 250
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: PUSH
13498: EMPTY
13499: LIST
13500: LIST
13501: LIST
13502: PPUSH
13503: CALL_OW 69
13507: NOT
13508: AND
13509: IFFALSE 13513
// exit ;
13511: GO 13695
// if buildings_list > 0 and engineerOkInside then
13513: LD_VAR 0 6
13517: PUSH
13518: LD_INT 0
13520: GREATER
13521: PUSH
13522: LD_VAR 0 8
13526: AND
13527: IFFALSE 13538
// ComExitBuilding ( engineerOkInside ) ;
13529: LD_VAR 0 8
13533: PPUSH
13534: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
13538: LD_VAR 0 6
13542: PUSH
13543: LD_INT 0
13545: GREATER
13546: PUSH
13547: LD_VAR 0 9
13551: PUSH
13552: LD_INT 0
13554: GREATER
13555: AND
13556: IFFALSE 13576
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
13558: LD_VAR 0 9
13562: PPUSH
13563: LD_VAR 0 6
13567: PUSH
13568: LD_INT 1
13570: ARRAY
13571: PPUSH
13572: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
13576: LD_VAR 0 6
13580: PUSH
13581: LD_INT 0
13583: EQUAL
13584: PUSH
13585: LD_VAR 0 4
13589: PUSH
13590: LD_INT 0
13592: EQUAL
13593: AND
13594: PUSH
13595: LD_VAR 0 9
13599: PUSH
13600: LD_INT 0
13602: GREATER
13603: AND
13604: IFFALSE 13620
// ComEnterUnit ( engineerOkOutside , building ) ;
13606: LD_VAR 0 9
13610: PPUSH
13611: LD_VAR 0 2
13615: PPUSH
13616: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
13620: LD_VAR 0 9
13624: PUSH
13625: LD_INT 0
13627: GREATER
13628: PUSH
13629: LD_VAR 0 6
13633: PUSH
13634: LD_INT 0
13636: EQUAL
13637: AND
13638: PUSH
13639: LD_VAR 0 4
13643: PUSH
13644: LD_INT 0
13646: GREATER
13647: AND
13648: IFFALSE 13695
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13650: LD_VAR 0 9
13654: PPUSH
13655: LD_VAR 0 4
13659: PUSH
13660: LD_INT 1
13662: ARRAY
13663: PPUSH
13664: LD_VAR 0 4
13668: PUSH
13669: LD_INT 2
13671: ARRAY
13672: PPUSH
13673: LD_VAR 0 4
13677: PUSH
13678: LD_INT 3
13680: ARRAY
13681: PPUSH
13682: LD_VAR 0 4
13686: PUSH
13687: LD_INT 4
13689: ARRAY
13690: PPUSH
13691: CALL_OW 145
// end ;
13695: LD_VAR 0 5
13699: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13700: LD_INT 0
13702: PPUSH
13703: PPUSH
13704: PPUSH
13705: PPUSH
13706: PPUSH
13707: PPUSH
13708: PPUSH
13709: PPUSH
13710: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13711: LD_ADDR_VAR 0 6
13715: PUSH
13716: LD_INT 22
13718: PUSH
13719: LD_VAR 0 1
13723: PUSH
13724: EMPTY
13725: LIST
13726: LIST
13727: PUSH
13728: LD_INT 25
13730: PUSH
13731: LD_INT 4
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: PUSH
13738: LD_INT 24
13740: PUSH
13741: LD_INT 251
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: PUSH
13748: EMPTY
13749: LIST
13750: LIST
13751: LIST
13752: PPUSH
13753: CALL_OW 69
13757: PUSH
13758: LD_EXP 34
13762: PUSH
13763: EMPTY
13764: LIST
13765: DIFF
13766: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13767: LD_ADDR_VAR 0 7
13771: PUSH
13772: LD_VAR 0 3
13776: PPUSH
13777: LD_INT 22
13779: PUSH
13780: LD_VAR 0 1
13784: PUSH
13785: EMPTY
13786: LIST
13787: LIST
13788: PUSH
13789: LD_INT 25
13791: PUSH
13792: LD_INT 4
13794: PUSH
13795: EMPTY
13796: LIST
13797: LIST
13798: PUSH
13799: LD_INT 50
13801: PUSH
13802: EMPTY
13803: LIST
13804: PUSH
13805: EMPTY
13806: LIST
13807: LIST
13808: LIST
13809: PPUSH
13810: CALL_OW 70
13814: PUSH
13815: LD_EXP 34
13819: PUSH
13820: EMPTY
13821: LIST
13822: DIFF
13823: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13824: LD_ADDR_VAR 0 10
13828: PUSH
13829: LD_VAR 0 3
13833: PPUSH
13834: LD_INT 22
13836: PUSH
13837: LD_VAR 0 1
13841: PUSH
13842: EMPTY
13843: LIST
13844: LIST
13845: PUSH
13846: LD_INT 21
13848: PUSH
13849: LD_INT 1
13851: PUSH
13852: EMPTY
13853: LIST
13854: LIST
13855: PUSH
13856: LD_INT 3
13858: PUSH
13859: LD_INT 24
13861: PUSH
13862: LD_INT 750
13864: PUSH
13865: EMPTY
13866: LIST
13867: LIST
13868: PUSH
13869: EMPTY
13870: LIST
13871: LIST
13872: PUSH
13873: EMPTY
13874: LIST
13875: LIST
13876: LIST
13877: PPUSH
13878: CALL_OW 70
13882: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13883: LD_ADDR_VAR 0 11
13887: PUSH
13888: LD_VAR 0 2
13892: PPUSH
13893: LD_INT 22
13895: PUSH
13896: LD_VAR 0 1
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: PUSH
13905: LD_INT 21
13907: PUSH
13908: LD_INT 1
13910: PUSH
13911: EMPTY
13912: LIST
13913: LIST
13914: PUSH
13915: LD_INT 3
13917: PUSH
13918: LD_INT 24
13920: PUSH
13921: LD_INT 1000
13923: PUSH
13924: EMPTY
13925: LIST
13926: LIST
13927: PUSH
13928: EMPTY
13929: LIST
13930: LIST
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: LIST
13936: PPUSH
13937: CALL_OW 70
13941: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
13942: LD_VAR 0 10
13946: PUSH
13947: LD_INT 0
13949: GREATER
13950: PUSH
13951: LD_VAR 0 6
13955: PUSH
13956: LD_INT 0
13958: GREATER
13959: AND
13960: IFFALSE 13976
// ComMoveToArea ( damageUnits , healArea ) ;
13962: LD_VAR 0 10
13966: PPUSH
13967: LD_VAR 0 2
13971: PPUSH
13972: CALL_OW 113
// if unitsToHeal > 0 and sci_listOutside > 0 then
13976: LD_VAR 0 11
13980: PUSH
13981: LD_INT 0
13983: GREATER
13984: PUSH
13985: LD_VAR 0 7
13989: PUSH
13990: LD_INT 0
13992: GREATER
13993: AND
13994: IFFALSE 14014
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
13996: LD_VAR 0 7
14000: PPUSH
14001: LD_VAR 0 11
14005: PUSH
14006: LD_INT 1
14008: ARRAY
14009: PPUSH
14010: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
14014: LD_VAR 0 10
14018: PUSH
14019: LD_INT 0
14021: EQUAL
14022: PUSH
14023: LD_VAR 0 11
14027: PUSH
14028: LD_INT 0
14030: EQUAL
14031: AND
14032: PUSH
14033: LD_VAR 0 7
14037: PUSH
14038: LD_INT 0
14040: GREATER
14041: AND
14042: IFFALSE 14147
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
14044: LD_ADDR_VAR 0 12
14048: PUSH
14049: LD_INT 22
14051: PUSH
14052: LD_VAR 0 1
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: PUSH
14061: LD_INT 21
14063: PUSH
14064: LD_INT 3
14066: PUSH
14067: EMPTY
14068: LIST
14069: LIST
14070: PUSH
14071: LD_INT 30
14073: PUSH
14074: LD_INT 8
14076: PUSH
14077: EMPTY
14078: LIST
14079: LIST
14080: PUSH
14081: EMPTY
14082: LIST
14083: LIST
14084: LIST
14085: PPUSH
14086: CALL_OW 69
14090: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
14091: LD_ADDR_VAR 0 13
14095: PUSH
14096: LD_INT 1
14098: PPUSH
14099: LD_VAR 0 12
14103: PPUSH
14104: CALL_OW 12
14108: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
14109: LD_VAR 0 7
14113: PPUSH
14114: LD_INT 3
14116: PUSH
14117: LD_INT 60
14119: PUSH
14120: EMPTY
14121: LIST
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: PPUSH
14127: CALL_OW 72
14131: PPUSH
14132: LD_VAR 0 12
14136: PUSH
14137: LD_VAR 0 13
14141: ARRAY
14142: PPUSH
14143: CALL_OW 120
// end ; if FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) > 0 and IsOk ( ru_fact ) and GetSide ( ru_fact ) = 3 then
14147: LD_VAR 0 3
14151: PPUSH
14152: LD_INT 22
14154: PUSH
14155: LD_VAR 0 1
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: PUSH
14164: LD_INT 25
14166: PUSH
14167: LD_INT 3
14169: PUSH
14170: EMPTY
14171: LIST
14172: LIST
14173: PUSH
14174: LD_INT 24
14176: PUSH
14177: LD_INT 751
14179: PUSH
14180: EMPTY
14181: LIST
14182: LIST
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: LIST
14188: PPUSH
14189: CALL_OW 70
14193: PUSH
14194: LD_INT 0
14196: GREATER
14197: PUSH
14198: LD_INT 21
14200: PPUSH
14201: CALL_OW 302
14205: AND
14206: PUSH
14207: LD_INT 21
14209: PPUSH
14210: CALL_OW 255
14214: PUSH
14215: LD_INT 3
14217: EQUAL
14218: AND
14219: IFFALSE 14275
// ComEnterUnit ( FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) , ru_fact ) ;
14221: LD_VAR 0 3
14225: PPUSH
14226: LD_INT 22
14228: PUSH
14229: LD_VAR 0 1
14233: PUSH
14234: EMPTY
14235: LIST
14236: LIST
14237: PUSH
14238: LD_INT 25
14240: PUSH
14241: LD_INT 3
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: PUSH
14248: LD_INT 24
14250: PUSH
14251: LD_INT 751
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: PUSH
14258: EMPTY
14259: LIST
14260: LIST
14261: LIST
14262: PPUSH
14263: CALL_OW 70
14267: PPUSH
14268: LD_INT 21
14270: PPUSH
14271: CALL_OW 120
// end ;
14275: LD_VAR 0 5
14279: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
14280: LD_INT 0
14282: PPUSH
14283: PPUSH
14284: PPUSH
14285: PPUSH
14286: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
14287: LD_ADDR_VAR 0 6
14291: PUSH
14292: LD_INT 22
14294: PUSH
14295: LD_VAR 0 1
14299: PUSH
14300: EMPTY
14301: LIST
14302: LIST
14303: PUSH
14304: LD_INT 2
14306: PUSH
14307: LD_INT 30
14309: PUSH
14310: LD_INT 31
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: PUSH
14317: LD_INT 30
14319: PUSH
14320: LD_INT 32
14322: PUSH
14323: EMPTY
14324: LIST
14325: LIST
14326: PUSH
14327: LD_INT 30
14329: PUSH
14330: LD_INT 33
14332: PUSH
14333: EMPTY
14334: LIST
14335: LIST
14336: PUSH
14337: LD_INT 30
14339: PUSH
14340: LD_INT 4
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: PUSH
14347: LD_INT 30
14349: PUSH
14350: LD_INT 5
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: PUSH
14365: EMPTY
14366: LIST
14367: LIST
14368: PPUSH
14369: CALL_OW 69
14373: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
14374: LD_ADDR_VAR 0 7
14378: PUSH
14379: LD_INT 22
14381: PUSH
14382: LD_VAR 0 2
14386: PUSH
14387: EMPTY
14388: LIST
14389: LIST
14390: PUSH
14391: LD_INT 21
14393: PUSH
14394: LD_INT 3
14396: PUSH
14397: EMPTY
14398: LIST
14399: LIST
14400: PUSH
14401: LD_INT 58
14403: PUSH
14404: EMPTY
14405: LIST
14406: PUSH
14407: EMPTY
14408: LIST
14409: LIST
14410: LIST
14411: PPUSH
14412: CALL_OW 69
14416: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
14417: LD_VAR 0 6
14421: PUSH
14422: LD_INT 0
14424: GREATER
14425: PUSH
14426: LD_VAR 0 7
14430: PUSH
14431: LD_INT 0
14433: GREATER
14434: AND
14435: IFFALSE 14505
// begin for i in turretsList do
14437: LD_ADDR_VAR 0 4
14441: PUSH
14442: LD_VAR 0 6
14446: PUSH
14447: FOR_IN
14448: IFFALSE 14503
// begin for j in enemyBuildings do
14450: LD_ADDR_VAR 0 5
14454: PUSH
14455: LD_VAR 0 7
14459: PUSH
14460: FOR_IN
14461: IFFALSE 14499
// begin if GetDistUnits ( i , j ) < 20 then
14463: LD_VAR 0 4
14467: PPUSH
14468: LD_VAR 0 5
14472: PPUSH
14473: CALL_OW 296
14477: PUSH
14478: LD_INT 20
14480: LESS
14481: IFFALSE 14497
// begin ComAttackUnit ( i , j ) ;
14483: LD_VAR 0 4
14487: PPUSH
14488: LD_VAR 0 5
14492: PPUSH
14493: CALL_OW 115
// end ; end ;
14497: GO 14460
14499: POP
14500: POP
// end ;
14501: GO 14447
14503: POP
14504: POP
// end ; end ;
14505: LD_VAR 0 3
14509: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
14510: LD_INT 0
14512: PPUSH
14513: PPUSH
14514: PPUSH
14515: PPUSH
14516: PPUSH
14517: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
14518: LD_ADDR_VAR 0 7
14522: PUSH
14523: LD_VAR 0 2
14527: PPUSH
14528: LD_INT 22
14530: PUSH
14531: LD_VAR 0 1
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: PUSH
14540: LD_INT 21
14542: PUSH
14543: LD_INT 2
14545: PUSH
14546: EMPTY
14547: LIST
14548: LIST
14549: PUSH
14550: LD_INT 34
14552: PUSH
14553: LD_INT 52
14555: PUSH
14556: EMPTY
14557: LIST
14558: LIST
14559: PUSH
14560: EMPTY
14561: LIST
14562: LIST
14563: LIST
14564: PPUSH
14565: CALL_OW 70
14569: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14570: LD_ADDR_VAR 0 8
14574: PUSH
14575: LD_VAR 0 2
14579: PPUSH
14580: LD_INT 22
14582: PUSH
14583: LD_VAR 0 1
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: PUSH
14592: LD_INT 21
14594: PUSH
14595: LD_INT 3
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: PUSH
14602: LD_INT 3
14604: PUSH
14605: LD_INT 24
14607: PUSH
14608: LD_INT 1000
14610: PUSH
14611: EMPTY
14612: LIST
14613: LIST
14614: PUSH
14615: EMPTY
14616: LIST
14617: LIST
14618: PUSH
14619: EMPTY
14620: LIST
14621: LIST
14622: LIST
14623: PUSH
14624: EMPTY
14625: LIST
14626: PPUSH
14627: CALL_OW 70
14631: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
14632: LD_VAR 0 8
14636: PUSH
14637: LD_INT 0
14639: GREATER
14640: PUSH
14641: LD_VAR 0 7
14645: PPUSH
14646: LD_INT 24
14648: PUSH
14649: LD_INT 750
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: PPUSH
14656: CALL_OW 72
14660: PUSH
14661: LD_INT 0
14663: GREATER
14664: AND
14665: IFFALSE 14685
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
14667: LD_VAR 0 7
14671: PPUSH
14672: LD_VAR 0 8
14676: PUSH
14677: LD_INT 1
14679: ARRAY
14680: PPUSH
14681: CALL_OW 130
// end ;
14685: LD_VAR 0 3
14689: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14690: LD_INT 0
14692: PPUSH
14693: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14694: LD_INT 22
14696: PUSH
14697: LD_VAR 0 1
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: PUSH
14706: LD_INT 21
14708: PUSH
14709: LD_INT 2
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: PPUSH
14720: CALL_OW 69
14724: PUSH
14725: LD_INT 18
14727: PPUSH
14728: LD_INT 22
14730: PUSH
14731: LD_VAR 0 1
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: PUSH
14740: LD_INT 21
14742: PUSH
14743: LD_INT 2
14745: PUSH
14746: EMPTY
14747: LIST
14748: LIST
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: PPUSH
14754: CALL_OW 70
14758: PUSH
14759: LD_VAR 0 3
14763: LESSEQUAL
14764: DIFF
14765: IFFALSE 14832
// for i = 1 to vehCount do
14767: LD_ADDR_VAR 0 9
14771: PUSH
14772: DOUBLE
14773: LD_INT 1
14775: DEC
14776: ST_TO_ADDR
14777: LD_VAR 0 3
14781: PUSH
14782: FOR_TO
14783: IFFALSE 14830
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14785: LD_VAR 0 2
14789: PPUSH
14790: LD_VAR 0 7
14794: PPUSH
14795: LD_VAR 0 5
14799: PPUSH
14800: LD_VAR 0 6
14804: PPUSH
14805: LD_VAR 0 4
14809: PUSH
14810: LD_INT 1
14812: PPUSH
14813: LD_VAR 0 4
14817: PPUSH
14818: CALL_OW 12
14822: ARRAY
14823: PPUSH
14824: CALL_OW 185
14828: GO 14782
14830: POP
14831: POP
// end ;
14832: LD_VAR 0 8
14836: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
14837: LD_INT 0
14839: PPUSH
14840: PPUSH
14841: PPUSH
14842: PPUSH
14843: PPUSH
14844: PPUSH
// if russianTanks >= [ 3 , 4 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
14845: LD_EXP 39
14849: PUSH
14850: LD_INT 3
14852: PUSH
14853: LD_INT 4
14855: PUSH
14856: LD_INT 4
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: LIST
14863: PUSH
14864: LD_OWVAR 67
14868: ARRAY
14869: GREATEREQUAL
14870: PUSH
14871: LD_EXP 40
14875: PUSH
14876: LD_INT 1
14878: PUSH
14879: LD_INT 2
14881: PUSH
14882: LD_INT 2
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: LIST
14889: PUSH
14890: LD_OWVAR 67
14894: ARRAY
14895: GREATEREQUAL
14896: AND
14897: IFFALSE 15186
// begin repeat wait ( 0 0$3 ) ;
14899: LD_INT 105
14901: PPUSH
14902: CALL_OW 67
// for j in russianTanks do
14906: LD_ADDR_VAR 0 4
14910: PUSH
14911: LD_EXP 39
14915: PUSH
14916: FOR_IN
14917: IFFALSE 15174
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
14919: LD_ADDR_VAR 0 6
14923: PUSH
14924: LD_INT 81
14926: PUSH
14927: LD_VAR 0 1
14931: PUSH
14932: EMPTY
14933: LIST
14934: LIST
14935: PUSH
14936: LD_INT 101
14938: PUSH
14939: LD_INT 1
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: PUSH
14946: EMPTY
14947: LIST
14948: LIST
14949: PPUSH
14950: CALL_OW 69
14954: PPUSH
14955: LD_VAR 0 4
14959: PPUSH
14960: CALL_OW 74
14964: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
14965: LD_ADDR_VAR 0 7
14969: PUSH
14970: LD_INT 81
14972: PUSH
14973: LD_VAR 0 1
14977: PUSH
14978: EMPTY
14979: LIST
14980: LIST
14981: PUSH
14982: LD_INT 101
14984: PUSH
14985: LD_INT 1
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: PUSH
14992: LD_INT 2
14994: PUSH
14995: LD_INT 59
14997: PUSH
14998: EMPTY
14999: LIST
15000: PUSH
15001: LD_INT 21
15003: PUSH
15004: LD_INT 1
15006: PUSH
15007: EMPTY
15008: LIST
15009: LIST
15010: PUSH
15011: LD_INT 21
15013: PUSH
15014: LD_INT 2
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: PUSH
15021: EMPTY
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: PUSH
15027: EMPTY
15028: LIST
15029: LIST
15030: LIST
15031: PUSH
15032: EMPTY
15033: LIST
15034: PPUSH
15035: CALL_OW 69
15039: PPUSH
15040: LD_VAR 0 4
15044: PPUSH
15045: CALL_OW 74
15049: ST_TO_ADDR
// if UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) then
15050: LD_EXP 40
15054: PPUSH
15055: LD_INT 3
15057: PUSH
15058: LD_INT 60
15060: PUSH
15061: EMPTY
15062: LIST
15063: PUSH
15064: EMPTY
15065: LIST
15066: LIST
15067: PPUSH
15068: CALL_OW 72
15072: IFFALSE 15106
// ComMoveUnit ( UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) , j ) ;
15074: LD_EXP 40
15078: PPUSH
15079: LD_INT 3
15081: PUSH
15082: LD_INT 60
15084: PUSH
15085: EMPTY
15086: LIST
15087: PUSH
15088: EMPTY
15089: LIST
15090: LIST
15091: PPUSH
15092: CALL_OW 72
15096: PPUSH
15097: LD_VAR 0 4
15101: PPUSH
15102: CALL_OW 112
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
15106: LD_VAR 0 4
15110: PPUSH
15111: LD_VAR 0 6
15115: PPUSH
15116: CALL_OW 296
15120: PUSH
15121: LD_INT 8
15123: PLUS
15124: PUSH
15125: LD_VAR 0 4
15129: PPUSH
15130: LD_VAR 0 7
15134: PPUSH
15135: CALL_OW 296
15139: LESS
15140: IFFALSE 15158
// ComAttackUnit ( j , target1 ) else
15142: LD_VAR 0 4
15146: PPUSH
15147: LD_VAR 0 6
15151: PPUSH
15152: CALL_OW 115
15156: GO 15172
// ComAttackUnit ( j , target2 ) ;
15158: LD_VAR 0 4
15162: PPUSH
15163: LD_VAR 0 7
15167: PPUSH
15168: CALL_OW 115
// end ;
15172: GO 14916
15174: POP
15175: POP
// until russianTanks = 0 ;
15176: LD_EXP 39
15180: PUSH
15181: LD_INT 0
15183: EQUAL
15184: IFFALSE 14899
// end ; end ;
15186: LD_VAR 0 2
15190: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
15191: LD_INT 0
15193: PPUSH
15194: PPUSH
15195: PPUSH
15196: PPUSH
15197: PPUSH
15198: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
15199: LD_ADDR_VAR 0 6
15203: PUSH
15204: LD_INT 22
15206: PUSH
15207: LD_VAR 0 1
15211: PUSH
15212: EMPTY
15213: LIST
15214: LIST
15215: PUSH
15216: LD_INT 25
15218: PUSH
15219: LD_INT 9
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: PUSH
15226: EMPTY
15227: LIST
15228: LIST
15229: PPUSH
15230: CALL_OW 69
15234: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15235: LD_ADDR_VAR 0 7
15239: PUSH
15240: LD_INT 81
15242: PUSH
15243: LD_VAR 0 1
15247: PUSH
15248: EMPTY
15249: LIST
15250: LIST
15251: PUSH
15252: LD_INT 3
15254: PUSH
15255: LD_INT 21
15257: PUSH
15258: LD_INT 3
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: PUSH
15265: EMPTY
15266: LIST
15267: LIST
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: PPUSH
15273: CALL_OW 69
15277: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
15278: LD_ADDR_VAR 0 4
15282: PUSH
15283: LD_INT 1
15285: PPUSH
15286: LD_INT 3
15288: PPUSH
15289: CALL_OW 12
15293: ST_TO_ADDR
// for i = 1 to list do
15294: LD_ADDR_VAR 0 5
15298: PUSH
15299: DOUBLE
15300: LD_INT 1
15302: DEC
15303: ST_TO_ADDR
15304: LD_VAR 0 6
15308: PUSH
15309: FOR_TO
15310: IFFALSE 15512
// for ta in filter do
15312: LD_ADDR_VAR 0 3
15316: PUSH
15317: LD_VAR 0 7
15321: PUSH
15322: FOR_IN
15323: IFFALSE 15508
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
15325: LD_VAR 0 6
15329: PUSH
15330: LD_VAR 0 5
15334: ARRAY
15335: PPUSH
15336: LD_VAR 0 3
15340: PPUSH
15341: CALL_OW 296
15345: PUSH
15346: LD_INT 15
15348: LESSEQUAL
15349: IFFALSE 15506
// begin case c of 1 :
15351: LD_VAR 0 4
15355: PUSH
15356: LD_INT 1
15358: DOUBLE
15359: EQUAL
15360: IFTRUE 15364
15362: GO 15402
15364: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
15365: LD_VAR 0 6
15369: PUSH
15370: LD_VAR 0 5
15374: ARRAY
15375: PPUSH
15376: LD_VAR 0 3
15380: PPUSH
15381: CALL_OW 250
15385: PPUSH
15386: LD_VAR 0 3
15390: PPUSH
15391: CALL_OW 251
15395: PPUSH
15396: CALL_OW 154
15400: GO 15506
15402: LD_INT 2
15404: DOUBLE
15405: EQUAL
15406: IFTRUE 15410
15408: GO 15474
15410: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
15411: LD_VAR 0 6
15415: PUSH
15416: LD_VAR 0 5
15420: ARRAY
15421: PPUSH
15422: LD_VAR 0 3
15426: PPUSH
15427: CALL_OW 250
15431: PUSH
15432: LD_INT 1
15434: NEG
15435: PPUSH
15436: LD_INT 1
15438: PPUSH
15439: CALL_OW 12
15443: PLUS
15444: PPUSH
15445: LD_VAR 0 3
15449: PPUSH
15450: CALL_OW 251
15454: PUSH
15455: LD_INT 1
15457: NEG
15458: PPUSH
15459: LD_INT 1
15461: PPUSH
15462: CALL_OW 12
15466: PLUS
15467: PPUSH
15468: CALL_OW 153
15472: GO 15506
15474: LD_INT 3
15476: DOUBLE
15477: EQUAL
15478: IFTRUE 15482
15480: GO 15505
15482: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15483: LD_VAR 0 6
15487: PUSH
15488: LD_VAR 0 5
15492: ARRAY
15493: PPUSH
15494: LD_VAR 0 3
15498: PPUSH
15499: CALL_OW 115
15503: GO 15506
15505: POP
// end ; end ;
15506: GO 15322
15508: POP
15509: POP
15510: GO 15309
15512: POP
15513: POP
// end ;
15514: LD_VAR 0 2
15518: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
15519: LD_INT 0
15521: PPUSH
15522: PPUSH
15523: PPUSH
15524: PPUSH
// r := 100 ;
15525: LD_ADDR_VAR 0 5
15529: PUSH
15530: LD_INT 100
15532: ST_TO_ADDR
// x := 0 ;
15533: LD_ADDR_VAR 0 6
15537: PUSH
15538: LD_INT 0
15540: ST_TO_ADDR
// while ( x < n ) do
15541: LD_VAR 0 6
15545: PUSH
15546: LD_VAR 0 2
15550: LESS
15551: IFFALSE 15838
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
15553: LD_ADDR_VAR 0 4
15557: PUSH
15558: DOUBLE
15559: LD_INT 1
15561: DEC
15562: ST_TO_ADDR
15563: LD_VAR 0 1
15567: PPUSH
15568: LD_INT 0
15570: PPUSH
15571: CALL_OW 517
15575: PUSH
15576: LD_INT 1
15578: ARRAY
15579: PUSH
15580: FOR_TO
15581: IFFALSE 15834
// begin if r > 50 then
15583: LD_VAR 0 5
15587: PUSH
15588: LD_INT 50
15590: GREATER
15591: IFFALSE 15810
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
15593: LD_VAR 0 1
15597: PPUSH
15598: LD_INT 0
15600: PPUSH
15601: CALL_OW 517
15605: PUSH
15606: LD_INT 1
15608: ARRAY
15609: PUSH
15610: LD_VAR 0 4
15614: ARRAY
15615: PPUSH
15616: LD_VAR 0 1
15620: PPUSH
15621: LD_INT 0
15623: PPUSH
15624: CALL_OW 517
15628: PUSH
15629: LD_INT 2
15631: ARRAY
15632: PUSH
15633: LD_VAR 0 4
15637: ARRAY
15638: PPUSH
15639: CALL_OW 458
15643: NOT
15644: IFFALSE 15794
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
15646: LD_VAR 0 1
15650: PPUSH
15651: LD_INT 0
15653: PPUSH
15654: CALL_OW 517
15658: PUSH
15659: LD_INT 1
15661: ARRAY
15662: PUSH
15663: LD_VAR 0 4
15667: ARRAY
15668: PPUSH
15669: LD_VAR 0 1
15673: PPUSH
15674: LD_INT 0
15676: PPUSH
15677: CALL_OW 517
15681: PUSH
15682: LD_INT 2
15684: ARRAY
15685: PUSH
15686: LD_VAR 0 4
15690: ARRAY
15691: PPUSH
15692: LD_INT 8
15694: PPUSH
15695: LD_INT 0
15697: PPUSH
15698: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
15702: LD_ADDR_EXP 44
15706: PUSH
15707: LD_EXP 44
15711: PPUSH
15712: LD_INT 1
15714: PPUSH
15715: LD_VAR 0 1
15719: PPUSH
15720: LD_INT 0
15722: PPUSH
15723: CALL_OW 517
15727: PUSH
15728: LD_INT 1
15730: ARRAY
15731: PUSH
15732: LD_VAR 0 4
15736: ARRAY
15737: PUSH
15738: LD_VAR 0 1
15742: PPUSH
15743: LD_INT 0
15745: PPUSH
15746: CALL_OW 517
15750: PUSH
15751: LD_INT 2
15753: ARRAY
15754: PUSH
15755: LD_VAR 0 4
15759: ARRAY
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: PPUSH
15765: CALL_OW 2
15769: ST_TO_ADDR
// r := 0 ;
15770: LD_ADDR_VAR 0 5
15774: PUSH
15775: LD_INT 0
15777: ST_TO_ADDR
// x := x + 1 ;
15778: LD_ADDR_VAR 0 6
15782: PUSH
15783: LD_VAR 0 6
15787: PUSH
15788: LD_INT 1
15790: PLUS
15791: ST_TO_ADDR
// end else
15792: GO 15808
// r := r + 35 ;
15794: LD_ADDR_VAR 0 5
15798: PUSH
15799: LD_VAR 0 5
15803: PUSH
15804: LD_INT 35
15806: PLUS
15807: ST_TO_ADDR
// end else
15808: GO 15832
// r := r + rand ( 10 , 25 ) ;
15810: LD_ADDR_VAR 0 5
15814: PUSH
15815: LD_VAR 0 5
15819: PUSH
15820: LD_INT 10
15822: PPUSH
15823: LD_INT 25
15825: PPUSH
15826: CALL_OW 12
15830: PLUS
15831: ST_TO_ADDR
// end ;
15832: GO 15580
15834: POP
15835: POP
15836: GO 15541
// end ;
15838: LD_VAR 0 3
15842: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
15843: LD_INT 0
15845: PPUSH
15846: PPUSH
15847: PPUSH
15848: PPUSH
// tmpTab = [ ] ;
15849: LD_ADDR_VAR 0 6
15853: PUSH
15854: EMPTY
15855: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
15856: LD_INT 22
15858: PUSH
15859: LD_VAR 0 1
15863: PUSH
15864: EMPTY
15865: LIST
15866: LIST
15867: PUSH
15868: LD_INT 30
15870: PUSH
15871: LD_INT 32
15873: PUSH
15874: EMPTY
15875: LIST
15876: LIST
15877: PUSH
15878: EMPTY
15879: LIST
15880: LIST
15881: PPUSH
15882: CALL_OW 69
15886: PUSH
15887: LD_INT 0
15889: GREATER
15890: IFFALSE 15973
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
15892: LD_ADDR_VAR 0 4
15896: PUSH
15897: LD_INT 22
15899: PUSH
15900: LD_VAR 0 1
15904: PUSH
15905: EMPTY
15906: LIST
15907: LIST
15908: PUSH
15909: LD_INT 30
15911: PUSH
15912: LD_INT 32
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PPUSH
15923: CALL_OW 69
15927: PUSH
15928: FOR_IN
15929: IFFALSE 15971
// begin for j in UnitsInside ( i ) do
15931: LD_ADDR_VAR 0 5
15935: PUSH
15936: LD_VAR 0 4
15940: PPUSH
15941: CALL_OW 313
15945: PUSH
15946: FOR_IN
15947: IFFALSE 15967
// tmpTab = tmpTab ^ j ;
15949: LD_ADDR_VAR 0 6
15953: PUSH
15954: LD_VAR 0 6
15958: PUSH
15959: LD_VAR 0 5
15963: ADD
15964: ST_TO_ADDR
15965: GO 15946
15967: POP
15968: POP
// end ;
15969: GO 15928
15971: POP
15972: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
15973: LD_VAR 0 6
15977: PPUSH
15978: LD_VAR 0 2
15982: PPUSH
15983: CALL_OW 250
15987: PPUSH
15988: LD_VAR 0 2
15992: PPUSH
15993: CALL_OW 251
15997: PPUSH
15998: CALL_OW 114
// end ;
16002: LD_VAR 0 3
16006: RET
// export function PrepareNature ; var i , un ; begin
16007: LD_INT 0
16009: PPUSH
16010: PPUSH
16011: PPUSH
// uc_side := 0 ;
16012: LD_ADDR_OWVAR 20
16016: PUSH
16017: LD_INT 0
16019: ST_TO_ADDR
// uc_nation := 0 ;
16020: LD_ADDR_OWVAR 21
16024: PUSH
16025: LD_INT 0
16027: ST_TO_ADDR
// InitHc ;
16028: CALL_OW 19
// hc_class := class_fish ;
16032: LD_ADDR_OWVAR 28
16036: PUSH
16037: LD_INT 20
16039: ST_TO_ADDR
// for i = 1 to 6 do
16040: LD_ADDR_VAR 0 2
16044: PUSH
16045: DOUBLE
16046: LD_INT 1
16048: DEC
16049: ST_TO_ADDR
16050: LD_INT 6
16052: PUSH
16053: FOR_TO
16054: IFFALSE 16073
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
16056: CALL_OW 44
16060: PPUSH
16061: LD_INT 23
16063: PPUSH
16064: LD_INT 0
16066: PPUSH
16067: CALL_OW 49
16071: GO 16053
16073: POP
16074: POP
// for i = 1 to Difficulty + 2 do
16075: LD_ADDR_VAR 0 2
16079: PUSH
16080: DOUBLE
16081: LD_INT 1
16083: DEC
16084: ST_TO_ADDR
16085: LD_OWVAR 67
16089: PUSH
16090: LD_INT 2
16092: PLUS
16093: PUSH
16094: FOR_TO
16095: IFFALSE 16204
// begin hc_sex = sex_male ;
16097: LD_ADDR_OWVAR 27
16101: PUSH
16102: LD_INT 1
16104: ST_TO_ADDR
// uc_side = 0 ;
16105: LD_ADDR_OWVAR 20
16109: PUSH
16110: LD_INT 0
16112: ST_TO_ADDR
// uc_nation = nation_nature ;
16113: LD_ADDR_OWVAR 21
16117: PUSH
16118: LD_INT 0
16120: ST_TO_ADDR
// hc_class = class_tiger ;
16121: LD_ADDR_OWVAR 28
16125: PUSH
16126: LD_INT 14
16128: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
16129: LD_ADDR_OWVAR 31
16133: PUSH
16134: LD_EXP 37
16138: PUSH
16139: LD_INT 0
16141: PUSH
16142: LD_INT 0
16144: PUSH
16145: LD_INT 0
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
16154: LD_ADDR_OWVAR 35
16158: PUSH
16159: LD_INT 5
16161: NEG
16162: PPUSH
16163: LD_INT 5
16165: PPUSH
16166: CALL_OW 12
16170: PUSH
16171: LD_OWVAR 67
16175: MUL
16176: ST_TO_ADDR
// un = CreateHuman ;
16177: LD_ADDR_VAR 0 3
16181: PUSH
16182: CALL_OW 44
16186: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16187: LD_VAR 0 3
16191: PPUSH
16192: LD_INT 24
16194: PPUSH
16195: LD_INT 0
16197: PPUSH
16198: CALL_OW 49
// end ;
16202: GO 16094
16204: POP
16205: POP
// for i = 1 to rand ( 3 , 4 ) do
16206: LD_ADDR_VAR 0 2
16210: PUSH
16211: DOUBLE
16212: LD_INT 1
16214: DEC
16215: ST_TO_ADDR
16216: LD_INT 3
16218: PPUSH
16219: LD_INT 4
16221: PPUSH
16222: CALL_OW 12
16226: PUSH
16227: FOR_TO
16228: IFFALSE 16320
// begin hc_sex = sex_male ;
16230: LD_ADDR_OWVAR 27
16234: PUSH
16235: LD_INT 1
16237: ST_TO_ADDR
// uc_side = 0 ;
16238: LD_ADDR_OWVAR 20
16242: PUSH
16243: LD_INT 0
16245: ST_TO_ADDR
// uc_nation = nation_nature ;
16246: LD_ADDR_OWVAR 21
16250: PUSH
16251: LD_INT 0
16253: ST_TO_ADDR
// hc_class = 18 ;
16254: LD_ADDR_OWVAR 28
16258: PUSH
16259: LD_INT 18
16261: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
16262: LD_ADDR_OWVAR 31
16266: PUSH
16267: LD_INT 0
16269: PUSH
16270: LD_INT 0
16272: PUSH
16273: LD_INT 0
16275: PUSH
16276: LD_INT 0
16278: PUSH
16279: EMPTY
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: ST_TO_ADDR
// hc_agressivity = 0 ;
16285: LD_ADDR_OWVAR 35
16289: PUSH
16290: LD_INT 0
16292: ST_TO_ADDR
// un = CreateHuman ;
16293: LD_ADDR_VAR 0 3
16297: PUSH
16298: CALL_OW 44
16302: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16303: LD_VAR 0 3
16307: PPUSH
16308: LD_INT 24
16310: PPUSH
16311: LD_INT 0
16313: PPUSH
16314: CALL_OW 49
// end ;
16318: GO 16227
16320: POP
16321: POP
// for i = 1 to rand ( 1 , 3 ) do
16322: LD_ADDR_VAR 0 2
16326: PUSH
16327: DOUBLE
16328: LD_INT 1
16330: DEC
16331: ST_TO_ADDR
16332: LD_INT 1
16334: PPUSH
16335: LD_INT 3
16337: PPUSH
16338: CALL_OW 12
16342: PUSH
16343: FOR_TO
16344: IFFALSE 16492
// begin hc_sex = sex_male ;
16346: LD_ADDR_OWVAR 27
16350: PUSH
16351: LD_INT 1
16353: ST_TO_ADDR
// uc_side = 0 ;
16354: LD_ADDR_OWVAR 20
16358: PUSH
16359: LD_INT 0
16361: ST_TO_ADDR
// uc_nation = nation_nature ;
16362: LD_ADDR_OWVAR 21
16366: PUSH
16367: LD_INT 0
16369: ST_TO_ADDR
// hc_class = class_apeman ;
16370: LD_ADDR_OWVAR 28
16374: PUSH
16375: LD_INT 12
16377: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
16378: LD_ADDR_OWVAR 31
16382: PUSH
16383: LD_EXP 36
16387: PPUSH
16388: LD_EXP 37
16392: PPUSH
16393: CALL_OW 12
16397: PUSH
16398: LD_EXP 36
16402: PPUSH
16403: LD_EXP 37
16407: PPUSH
16408: CALL_OW 12
16412: PUSH
16413: LD_EXP 36
16417: PPUSH
16418: LD_EXP 37
16422: PPUSH
16423: CALL_OW 12
16427: PUSH
16428: LD_EXP 36
16432: PPUSH
16433: LD_EXP 37
16437: PPUSH
16438: CALL_OW 12
16442: PUSH
16443: EMPTY
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: ST_TO_ADDR
// hc_agressivity = rand ( 1 , 20 ) ;
16449: LD_ADDR_OWVAR 35
16453: PUSH
16454: LD_INT 1
16456: PPUSH
16457: LD_INT 20
16459: PPUSH
16460: CALL_OW 12
16464: ST_TO_ADDR
// un = CreateHuman ;
16465: LD_ADDR_VAR 0 3
16469: PUSH
16470: CALL_OW 44
16474: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16475: LD_VAR 0 3
16479: PPUSH
16480: LD_INT 24
16482: PPUSH
16483: LD_INT 0
16485: PPUSH
16486: CALL_OW 49
// end ;
16490: GO 16343
16492: POP
16493: POP
// end ; end_of_file
16494: LD_VAR 0 1
16498: RET
// on UnitDestroyed ( unit ) do var i ;
16499: LD_INT 0
16501: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
16502: LD_VAR 0 1
16506: PPUSH
16507: CALL_OW 255
16511: PUSH
16512: LD_INT 3
16514: EQUAL
16515: PUSH
16516: LD_VAR 0 1
16520: PPUSH
16521: CALL_OW 247
16525: PUSH
16526: LD_INT 1
16528: EQUAL
16529: AND
16530: IFFALSE 16594
// begin for i in RuScientists do
16532: LD_ADDR_VAR 0 2
16536: PUSH
16537: LD_EXP 34
16541: PUSH
16542: FOR_IN
16543: IFFALSE 16592
// if i = unit then
16545: LD_VAR 0 2
16549: PUSH
16550: LD_VAR 0 1
16554: EQUAL
16555: IFFALSE 16590
// begin RuScientists = RuScientists diff [ unit ] ;
16557: LD_ADDR_EXP 34
16561: PUSH
16562: LD_EXP 34
16566: PUSH
16567: LD_VAR 0 1
16571: PUSH
16572: EMPTY
16573: LIST
16574: DIFF
16575: ST_TO_ADDR
// sciCounter = sciCounter + 1 ;
16576: LD_ADDR_EXP 35
16580: PUSH
16581: LD_EXP 35
16585: PUSH
16586: LD_INT 1
16588: PLUS
16589: ST_TO_ADDR
// end ;
16590: GO 16542
16592: POP
16593: POP
// end ; end ;
16594: PPOPN 2
16596: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_laser then
16597: LD_VAR 0 3
16601: PPUSH
16602: CALL_OW 264
16606: PUSH
16607: LD_INT 9
16609: EQUAL
16610: IFFALSE 16626
// laserCounterDestroy := laserCounterDestroy + 1 ;
16612: LD_ADDR_EXP 50
16616: PUSH
16617: LD_EXP 50
16621: PUSH
16622: LD_INT 1
16624: PLUS
16625: ST_TO_ADDR
// end ;
16626: PPOPN 3
16628: END
// on UnitTeleported ( building , human ) do begin if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
16629: LD_VAR 0 1
16633: PUSH
16634: LD_INT 10
16636: EQUAL
16637: PUSH
16638: LD_VAR 0 2
16642: PPUSH
16643: CALL_OW 255
16647: PUSH
16648: LD_INT 1
16650: EQUAL
16651: AND
16652: PUSH
16653: LD_EXP 47
16657: PUSH
16658: LD_INT 0
16660: EQUAL
16661: AND
16662: IFFALSE 16774
// begin eventVar1 = 1 ;
16664: LD_ADDR_EXP 47
16668: PUSH
16669: LD_INT 1
16671: ST_TO_ADDR
// teleportExplored = 1 ;
16672: LD_ADDR_EXP 33
16676: PUSH
16677: LD_INT 1
16679: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
16680: LD_STRING M2a
16682: PPUSH
16683: CALL_OW 337
// wait ( 0 0$2 ) ;
16687: LD_INT 70
16689: PPUSH
16690: CALL_OW 67
// DialogueOn ;
16694: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
16698: LD_INT 22
16700: PUSH
16701: LD_INT 1
16703: PUSH
16704: EMPTY
16705: LIST
16706: LIST
16707: PUSH
16708: LD_INT 21
16710: PUSH
16711: LD_INT 1
16713: PUSH
16714: EMPTY
16715: LIST
16716: LIST
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: PPUSH
16722: CALL_OW 69
16726: PPUSH
16727: LD_STRING DT3a-Sol1-1
16729: PPUSH
16730: LD_STRING DT3a-FSol1-1
16732: PPUSH
16733: CALL 12340 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
16737: LD_EXP 1
16741: PPUSH
16742: LD_STRING DT3a-JMM-1
16744: PPUSH
16745: CALL_OW 88
// CenterNowOnUnits ( human ) ;
16749: LD_VAR 0 2
16753: PPUSH
16754: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
16758: LD_EXP 1
16762: PPUSH
16763: LD_STRING DT3a-JMM-1a
16765: PPUSH
16766: CALL_OW 88
// DialogueOff ;
16770: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 0 then
16774: LD_VAR 0 1
16778: PUSH
16779: LD_INT 10
16781: EQUAL
16782: PUSH
16783: LD_VAR 0 2
16787: PPUSH
16788: CALL_OW 247
16792: PUSH
16793: LD_INT 2
16795: EQUAL
16796: AND
16797: PUSH
16798: LD_VAR 0 2
16802: PPUSH
16803: CALL_OW 255
16807: PUSH
16808: LD_INT 3
16810: EQUAL
16811: AND
16812: PUSH
16813: LD_EXP 28
16817: PUSH
16818: LD_INT 0
16820: EQUAL
16821: AND
16822: IFFALSE 16839
// begin wait ( 0 0$3 ) ;
16824: LD_INT 105
16826: PPUSH
16827: CALL_OW 67
// vehicleTeleported = 1 ;
16831: LD_ADDR_EXP 28
16835: PUSH
16836: LD_INT 1
16838: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 2 then
16839: LD_VAR 0 1
16843: PUSH
16844: LD_INT 10
16846: EQUAL
16847: PUSH
16848: LD_VAR 0 2
16852: PPUSH
16853: CALL_OW 247
16857: PUSH
16858: LD_INT 2
16860: EQUAL
16861: AND
16862: PUSH
16863: LD_VAR 0 2
16867: PPUSH
16868: CALL_OW 255
16872: PUSH
16873: LD_INT 3
16875: EQUAL
16876: AND
16877: PUSH
16878: LD_EXP 28
16882: PUSH
16883: LD_INT 2
16885: EQUAL
16886: AND
16887: IFFALSE 16904
// begin wait ( 0 0$3 ) ;
16889: LD_INT 105
16891: PPUSH
16892: CALL_OW 67
// vehicleTeleported = 3 ;
16896: LD_ADDR_EXP 28
16900: PUSH
16901: LD_INT 3
16903: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
16904: LD_VAR 0 1
16908: PUSH
16909: LD_INT 10
16911: EQUAL
16912: PUSH
16913: LD_VAR 0 2
16917: PPUSH
16918: CALL_OW 247
16922: PUSH
16923: LD_INT 2
16925: EQUAL
16926: AND
16927: PUSH
16928: LD_VAR 0 2
16932: PPUSH
16933: CALL_OW 255
16937: PUSH
16938: LD_INT 3
16940: EQUAL
16941: AND
16942: IFFALSE 16958
// tpCounter = tpCounter + 1 ;
16944: LD_ADDR_EXP 29
16948: PUSH
16949: LD_EXP 29
16953: PUSH
16954: LD_INT 1
16956: PLUS
16957: ST_TO_ADDR
// end ;
16958: PPOPN 2
16960: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetWeapon ( vehicle ) = us_rocket_launcher then
16961: LD_VAR 0 1
16965: PPUSH
16966: CALL_OW 264
16970: PUSH
16971: LD_INT 7
16973: EQUAL
16974: IFFALSE 16984
// rocketBuilded := true ;
16976: LD_ADDR_EXP 51
16980: PUSH
16981: LD_INT 1
16983: ST_TO_ADDR
// if factory = ru_fact or factory = rufab2 then
16984: LD_VAR 0 2
16988: PUSH
16989: LD_INT 21
16991: EQUAL
16992: PUSH
16993: LD_VAR 0 2
16997: PUSH
16998: LD_INT 112
17000: EQUAL
17001: OR
17002: IFFALSE 17180
// if GetSide ( vehicle ) = 3 then
17004: LD_VAR 0 1
17008: PPUSH
17009: CALL_OW 255
17013: PUSH
17014: LD_INT 3
17016: EQUAL
17017: IFFALSE 17180
// begin if GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
17019: LD_VAR 0 1
17023: PPUSH
17024: CALL_OW 264
17028: PUSH
17029: LD_INT 46
17031: EQUAL
17032: PUSH
17033: LD_VAR 0 1
17037: PPUSH
17038: CALL_OW 264
17042: PUSH
17043: LD_INT 45
17045: EQUAL
17046: OR
17047: PUSH
17048: LD_VAR 0 1
17052: PPUSH
17053: CALL_OW 264
17057: PUSH
17058: LD_INT 44
17060: EQUAL
17061: OR
17062: IFFALSE 17137
// begin russianTanks = russianTanks ^ vehicle ;
17064: LD_ADDR_EXP 39
17068: PUSH
17069: LD_EXP 39
17073: PUSH
17074: LD_VAR 0 1
17078: ADD
17079: ST_TO_ADDR
// if attackTactic = 1 or attackTactic = 0 then
17080: LD_EXP 43
17084: PUSH
17085: LD_INT 1
17087: EQUAL
17088: PUSH
17089: LD_EXP 43
17093: PUSH
17094: LD_INT 0
17096: EQUAL
17097: OR
17098: IFFALSE 17112
// ComEnterUnit ( vehicle , ruteleprt ) ;
17100: LD_VAR 0 1
17104: PPUSH
17105: LD_INT 10
17107: PPUSH
17108: CALL_OW 120
// if attackTactic = 2 then
17112: LD_EXP 43
17116: PUSH
17117: LD_INT 2
17119: EQUAL
17120: IFFALSE 17137
// ComMoveXY ( vehicle , 88 , 69 ) ;
17122: LD_VAR 0 1
17126: PPUSH
17127: LD_INT 88
17129: PPUSH
17130: LD_INT 69
17132: PPUSH
17133: CALL_OW 111
// end ; if GetWeapon ( vehicle ) = 49 then
17137: LD_VAR 0 1
17141: PPUSH
17142: CALL_OW 264
17146: PUSH
17147: LD_INT 49
17149: EQUAL
17150: IFFALSE 17180
// begin russianTimeLapsers = russianTimeLapsers ^ vehicle ;
17152: LD_ADDR_EXP 40
17156: PUSH
17157: LD_EXP 40
17161: PUSH
17162: LD_VAR 0 1
17166: ADD
17167: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
17168: LD_VAR 0 1
17172: PPUSH
17173: LD_INT 137
17175: PPUSH
17176: CALL_OW 120
// end ; end ; end ;
17180: PPOPN 2
17182: END
// on UnitGoesToRed ( unit ) do var i ;
17183: LD_INT 0
17185: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
17186: LD_VAR 0 1
17190: PPUSH
17191: CALL_OW 255
17195: PUSH
17196: LD_INT 3
17198: EQUAL
17199: PUSH
17200: LD_VAR 0 1
17204: PPUSH
17205: CALL_OW 247
17209: PUSH
17210: LD_INT 2
17212: EQUAL
17213: AND
17214: IFFALSE 17332
// begin if russianTanks > 0 then
17216: LD_EXP 39
17220: PUSH
17221: LD_INT 0
17223: GREATER
17224: IFFALSE 17274
// for i in russianTanks do
17226: LD_ADDR_VAR 0 2
17230: PUSH
17231: LD_EXP 39
17235: PUSH
17236: FOR_IN
17237: IFFALSE 17272
// if i = unit then
17239: LD_VAR 0 2
17243: PUSH
17244: LD_VAR 0 1
17248: EQUAL
17249: IFFALSE 17270
// russianTanks = russianTanks diff [ unit ] ;
17251: LD_ADDR_EXP 39
17255: PUSH
17256: LD_EXP 39
17260: PUSH
17261: LD_VAR 0 1
17265: PUSH
17266: EMPTY
17267: LIST
17268: DIFF
17269: ST_TO_ADDR
17270: GO 17236
17272: POP
17273: POP
// if russianTimeLapsers > 0 then
17274: LD_EXP 40
17278: PUSH
17279: LD_INT 0
17281: GREATER
17282: IFFALSE 17332
// for i in russianTimeLapsers do
17284: LD_ADDR_VAR 0 2
17288: PUSH
17289: LD_EXP 40
17293: PUSH
17294: FOR_IN
17295: IFFALSE 17330
// if i = unit then
17297: LD_VAR 0 2
17301: PUSH
17302: LD_VAR 0 1
17306: EQUAL
17307: IFFALSE 17328
// russianTimeLapsers = russianTimeLapsers diff [ unit ] ;
17309: LD_ADDR_EXP 40
17313: PUSH
17314: LD_EXP 40
17318: PUSH
17319: LD_VAR 0 1
17323: PUSH
17324: EMPTY
17325: LIST
17326: DIFF
17327: ST_TO_ADDR
17328: GO 17294
17330: POP
17331: POP
// end ; end ;
17332: PPOPN 2
17334: END
// on LeaveVehicle ( vehicle , human ) do var i ;
17335: LD_INT 0
17337: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
17338: LD_VAR 0 2
17342: PPUSH
17343: CALL_OW 255
17347: PUSH
17348: LD_INT 3
17350: EQUAL
17351: PUSH
17352: LD_VAR 0 2
17356: PPUSH
17357: CALL_OW 257
17361: PUSH
17362: LD_INT 3
17364: EQUAL
17365: AND
17366: PUSH
17367: LD_INT 21
17369: PPUSH
17370: CALL_OW 255
17374: PUSH
17375: LD_INT 3
17377: EQUAL
17378: AND
17379: PUSH
17380: LD_INT 21
17382: PPUSH
17383: CALL_OW 302
17387: AND
17388: IFFALSE 17402
// ComEnterUnit ( human , ru_fact ) ;
17390: LD_VAR 0 2
17394: PPUSH
17395: LD_INT 21
17397: PPUSH
17398: CALL_OW 120
// if GetClass ( human ) = 4 and GetSide ( human ) = 3 and ruAI = 0 then
17402: LD_VAR 0 2
17406: PPUSH
17407: CALL_OW 257
17411: PUSH
17412: LD_INT 4
17414: EQUAL
17415: PUSH
17416: LD_VAR 0 2
17420: PPUSH
17421: CALL_OW 255
17425: PUSH
17426: LD_INT 3
17428: EQUAL
17429: AND
17430: PUSH
17431: LD_EXP 41
17435: PUSH
17436: LD_INT 0
17438: EQUAL
17439: AND
17440: IFFALSE 17502
// for i in RuScientists do
17442: LD_ADDR_VAR 0 3
17446: PUSH
17447: LD_EXP 34
17451: PUSH
17452: FOR_IN
17453: IFFALSE 17500
// if i = human then
17455: LD_VAR 0 3
17459: PUSH
17460: LD_VAR 0 2
17464: EQUAL
17465: IFFALSE 17498
// ComMoveToArea ( i , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
17467: LD_VAR 0 3
17471: PPUSH
17472: LD_INT 13
17474: PUSH
17475: LD_INT 14
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: PUSH
17482: LD_INT 1
17484: PPUSH
17485: LD_INT 2
17487: PPUSH
17488: CALL_OW 12
17492: ARRAY
17493: PPUSH
17494: CALL_OW 113
17498: GO 17452
17500: POP
17501: POP
// end ;
17502: PPOPN 3
17504: END
// on EnterVehicle ( vehicle , human ) do var i , rnd ;
17505: LD_INT 0
17507: PPUSH
17508: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 4 then
17509: LD_VAR 0 2
17513: PPUSH
17514: CALL_OW 255
17518: PUSH
17519: LD_INT 3
17521: EQUAL
17522: PUSH
17523: LD_VAR 0 2
17527: PPUSH
17528: CALL_OW 257
17532: PUSH
17533: LD_INT 4
17535: EQUAL
17536: AND
17537: IFFALSE 17679
// for i in RuScientists do
17539: LD_ADDR_VAR 0 3
17543: PUSH
17544: LD_EXP 34
17548: PUSH
17549: FOR_IN
17550: IFFALSE 17677
// if i = human then
17552: LD_VAR 0 3
17556: PUSH
17557: LD_VAR 0 2
17561: EQUAL
17562: IFFALSE 17675
// if IsOk ( rutp ) then
17564: LD_INT 137
17566: PPUSH
17567: CALL_OW 302
17571: IFFALSE 17644
// begin rnd = rand ( 1 , 2 ) ;
17573: LD_ADDR_VAR 0 4
17577: PUSH
17578: LD_INT 1
17580: PPUSH
17581: LD_INT 2
17583: PPUSH
17584: CALL_OW 12
17588: ST_TO_ADDR
// if rnd = 1 then
17589: LD_VAR 0 4
17593: PUSH
17594: LD_INT 1
17596: EQUAL
17597: IFFALSE 17611
// ComEnterUnit ( vehicle , rutp ) ;
17599: LD_VAR 0 1
17603: PPUSH
17604: LD_INT 137
17606: PPUSH
17607: CALL_OW 120
// AddComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
17611: LD_VAR 0 1
17615: PPUSH
17616: LD_INT 13
17618: PUSH
17619: LD_INT 14
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: PUSH
17626: LD_INT 1
17628: PPUSH
17629: LD_INT 2
17631: PPUSH
17632: CALL_OW 12
17636: ARRAY
17637: PPUSH
17638: CALL_OW 173
// end else
17642: GO 17675
// begin ComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
17644: LD_VAR 0 1
17648: PPUSH
17649: LD_INT 13
17651: PUSH
17652: LD_INT 14
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: PUSH
17659: LD_INT 1
17661: PPUSH
17662: LD_INT 2
17664: PPUSH
17665: CALL_OW 12
17669: ARRAY
17670: PPUSH
17671: CALL_OW 113
// end ;
17675: GO 17549
17677: POP
17678: POP
// end ;
17679: PPOPN 4
17681: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
17682: LD_VAR 0 1
17686: PPUSH
17687: CALL 19914 0 1
// end ; end_of_file
17691: PPOPN 1
17693: END
// every 0 0$1 trigger ruAI = 1 do
17694: LD_EXP 41
17698: PUSH
17699: LD_INT 1
17701: EQUAL
17702: IFFALSE 17831
17704: GO 17706
17706: DISABLE
// begin enable ;
17707: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
17708: LD_INT 3
17710: PPUSH
17711: LD_INT 6
17713: PPUSH
17714: LD_INT 9
17716: PPUSH
17717: LD_EXP 38
17721: PPUSH
17722: CALL 13309 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
17726: LD_INT 3
17728: PPUSH
17729: LD_INT 4
17731: PPUSH
17732: LD_INT 10
17734: PPUSH
17735: LD_EXP 38
17739: PPUSH
17740: CALL 13309 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
17744: LD_INT 3
17746: PPUSH
17747: LD_INT 9
17749: PPUSH
17750: CALL 14510 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
17754: LD_INT 3
17756: PPUSH
17757: LD_INT 10
17759: PPUSH
17760: CALL 14510 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
17764: LD_INT 3
17766: PPUSH
17767: LD_INT 16
17769: PPUSH
17770: LD_INT 9
17772: PPUSH
17773: LD_INT 91
17775: PPUSH
17776: CALL 13700 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
17780: LD_INT 3
17782: PPUSH
17783: LD_INT 17
17785: PPUSH
17786: LD_INT 10
17788: PPUSH
17789: LD_INT 47
17791: PUSH
17792: LD_INT 129
17794: PUSH
17795: LD_INT 135
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: LIST
17802: PPUSH
17803: CALL 13700 0 4
// AttackVehicles ( 3 ) ;
17807: LD_INT 3
17809: PPUSH
17810: CALL 14837 0 1
// IntBazooka ( 3 ) ;
17814: LD_INT 3
17816: PPUSH
17817: CALL 15191 0 1
// AttackNearBuildings ( 3 , 1 ) ;
17821: LD_INT 3
17823: PPUSH
17824: LD_INT 1
17826: PPUSH
17827: CALL 14280 0 2
// end ;
17831: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
17832: LD_INT 4
17834: PPUSH
17835: CALL_OW 303
17839: IFFALSE 17854
17841: GO 17843
17843: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
17844: LD_INT 3
17846: PPUSH
17847: LD_INT 4
17849: PPUSH
17850: CALL 15843 0 2
17854: END
// every 0 0$1 do
17855: GO 17857
17857: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
17858: LD_INT 3
17860: PPUSH
17861: LD_INT 91
17863: PPUSH
17864: LD_INT 3
17866: PPUSH
17867: CALL 13068 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
17871: LD_INT 3
17873: PPUSH
17874: LD_INT 47
17876: PPUSH
17877: LD_INT 3
17879: PPUSH
17880: CALL 13068 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
17884: LD_INT 3
17886: PPUSH
17887: LD_INT 129
17889: PPUSH
17890: LD_INT 3
17892: PPUSH
17893: CALL 13068 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
17897: LD_INT 3
17899: PPUSH
17900: LD_INT 3
17902: PPUSH
17903: LD_INT 3
17905: PPUSH
17906: CALL 13068 0 3
// end ;
17910: END
// every 5 5$0 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
17911: LD_EXP 27
17915: PUSH
17916: LD_INT 2
17918: EQUAL
17919: PUSH
17920: LD_INT 21
17922: PPUSH
17923: CALL_OW 255
17927: PUSH
17928: LD_INT 3
17930: EQUAL
17931: AND
17932: PUSH
17933: LD_INT 112
17935: PPUSH
17936: CALL_OW 255
17940: PUSH
17941: LD_INT 3
17943: EQUAL
17944: AND
17945: PUSH
17946: LD_INT 21
17948: PPUSH
17949: CALL_OW 302
17953: AND
17954: PUSH
17955: LD_INT 112
17957: PPUSH
17958: CALL_OW 302
17962: AND
17963: PUSH
17964: LD_INT 22
17966: PUSH
17967: LD_INT 3
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PUSH
17974: LD_INT 21
17976: PUSH
17977: LD_INT 2
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: LD_INT 50
17986: PUSH
17987: EMPTY
17988: LIST
17989: PUSH
17990: LD_INT 3
17992: PUSH
17993: LD_INT 58
17995: PUSH
17996: EMPTY
17997: LIST
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: PPUSH
18009: CALL_OW 69
18013: PUSH
18014: LD_INT 18
18016: PPUSH
18017: LD_INT 22
18019: PUSH
18020: LD_INT 3
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PUSH
18027: LD_INT 21
18029: PUSH
18030: LD_INT 2
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PPUSH
18041: CALL_OW 70
18045: PUSH
18046: LD_INT 0
18048: EQUAL
18049: DIFF
18050: AND
18051: IFFALSE 18169
18053: GO 18055
18055: DISABLE
// begin enable ;
18056: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
18057: LD_INT 3
18059: PPUSH
18060: LD_INT 21
18062: PPUSH
18063: LD_INT 3
18065: PUSH
18066: LD_INT 4
18068: PUSH
18069: LD_INT 4
18071: PUSH
18072: EMPTY
18073: LIST
18074: LIST
18075: LIST
18076: PUSH
18077: LD_OWVAR 67
18081: ARRAY
18082: PPUSH
18083: LD_INT 46
18085: PUSH
18086: LD_INT 45
18088: PUSH
18089: LD_INT 44
18091: PUSH
18092: EMPTY
18093: LIST
18094: LIST
18095: LIST
18096: PPUSH
18097: LD_INT 3
18099: PPUSH
18100: LD_INT 3
18102: PPUSH
18103: LD_INT 24
18105: PPUSH
18106: CALL 14690 0 7
// if russianTimeLapsers = 0 then
18110: LD_EXP 40
18114: PUSH
18115: LD_INT 0
18117: EQUAL
18118: IFFALSE 18169
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
18120: LD_INT 3
18122: PPUSH
18123: LD_INT 112
18125: PPUSH
18126: LD_INT 1
18128: PUSH
18129: LD_INT 2
18131: PUSH
18132: LD_INT 2
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: LIST
18139: PUSH
18140: LD_OWVAR 67
18144: ARRAY
18145: PPUSH
18146: LD_INT 49
18148: PUSH
18149: LD_INT 49
18151: PUSH
18152: EMPTY
18153: LIST
18154: LIST
18155: PPUSH
18156: LD_INT 3
18158: PPUSH
18159: LD_INT 3
18161: PPUSH
18162: LD_INT 24
18164: PPUSH
18165: CALL 14690 0 7
// end ;
18169: END
// every 0 0$1 trigger arabianMines do var i ;
18170: LD_EXP 44
18174: IFFALSE 18295
18176: GO 18178
18178: DISABLE
18179: LD_INT 0
18181: PPUSH
// begin enable ;
18182: ENABLE
// for i in arabianMines do
18183: LD_ADDR_VAR 0 1
18187: PUSH
18188: LD_EXP 44
18192: PUSH
18193: FOR_IN
18194: IFFALSE 18293
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
18196: LD_INT 22
18198: PUSH
18199: LD_INT 1
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PUSH
18206: LD_INT 92
18208: PUSH
18209: LD_VAR 0 1
18213: PUSH
18214: LD_INT 1
18216: ARRAY
18217: PUSH
18218: LD_VAR 0 1
18222: PUSH
18223: LD_INT 2
18225: ARRAY
18226: PUSH
18227: LD_INT 3
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: PPUSH
18240: CALL_OW 69
18244: IFFALSE 18291
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
18246: LD_VAR 0 1
18250: PUSH
18251: LD_INT 1
18253: ARRAY
18254: PPUSH
18255: LD_VAR 0 1
18259: PUSH
18260: LD_INT 2
18262: ARRAY
18263: PPUSH
18264: LD_INT 5
18266: PPUSH
18267: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
18271: LD_ADDR_EXP 44
18275: PUSH
18276: LD_EXP 44
18280: PPUSH
18281: LD_VAR 0 1
18285: PPUSH
18286: CALL_OW 3
18290: ST_TO_ADDR
// end ; end ;
18291: GO 18193
18293: POP
18294: POP
// end ;
18295: PPOPN 1
18297: END
// every 0 0$1 trigger vehicleTeleported = 4 and tpCounter = [ 6 , 8 , 8 ] [ Difficulty ] do
18298: LD_EXP 28
18302: PUSH
18303: LD_INT 4
18305: EQUAL
18306: PUSH
18307: LD_EXP 29
18311: PUSH
18312: LD_INT 6
18314: PUSH
18315: LD_INT 8
18317: PUSH
18318: LD_INT 8
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: LIST
18325: PUSH
18326: LD_OWVAR 67
18330: ARRAY
18331: EQUAL
18332: AND
18333: IFFALSE 18351
18335: GO 18337
18337: DISABLE
// TeleportExit ( ruteleprt , 47 , 82 ) ;
18338: LD_INT 10
18340: PPUSH
18341: LD_INT 47
18343: PPUSH
18344: LD_INT 82
18346: PPUSH
18347: CALL_OW 243
18351: END
// every 2 2$0 trigger vehicleTeleported = 4 do
18352: LD_EXP 28
18356: PUSH
18357: LD_INT 4
18359: EQUAL
18360: IFFALSE 18382
18362: GO 18364
18364: DISABLE
// begin enable ;
18365: ENABLE
// attackTactic = rand ( 1 , 2 ) ;
18366: LD_ADDR_EXP 43
18370: PUSH
18371: LD_INT 1
18373: PPUSH
18374: LD_INT 2
18376: PPUSH
18377: CALL_OW 12
18381: ST_TO_ADDR
// end ; end_of_file
18382: END
// every 0 0$1 trigger RuScientists = [ ] and IsDead ( ruheadlab ) do
18383: LD_EXP 34
18387: PUSH
18388: EMPTY
18389: EQUAL
18390: PUSH
18391: LD_INT 3
18393: PPUSH
18394: CALL_OW 301
18398: AND
18399: IFFALSE 18604
18401: GO 18403
18403: DISABLE
// begin if sciCounter = 0 then
18404: LD_EXP 35
18408: PUSH
18409: LD_INT 0
18411: EQUAL
18412: IFFALSE 18438
// begin Say ( JMM , D7a-JMM-1 ) ;
18414: LD_EXP 1
18418: PPUSH
18419: LD_STRING D7a-JMM-1
18421: PPUSH
18422: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
18426: LD_EXP 22
18430: PPUSH
18431: LD_STRING D7a-Pow-1
18433: PPUSH
18434: CALL_OW 94
// end ; if sciCounter > 0 and sciCounter < 6 then
18438: LD_EXP 35
18442: PUSH
18443: LD_INT 0
18445: GREATER
18446: PUSH
18447: LD_EXP 35
18451: PUSH
18452: LD_INT 6
18454: LESS
18455: AND
18456: IFFALSE 18482
// begin Say ( JMM , D7b-JMM-1 ) ;
18458: LD_EXP 1
18462: PPUSH
18463: LD_STRING D7b-JMM-1
18465: PPUSH
18466: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
18470: LD_EXP 22
18474: PPUSH
18475: LD_STRING D7b-Pow-1
18477: PPUSH
18478: CALL_OW 94
// end ; if sciCounter = 6 then
18482: LD_EXP 35
18486: PUSH
18487: LD_INT 6
18489: EQUAL
18490: IFFALSE 18600
// begin Say ( JMM , D7c-JMM-1 ) ;
18492: LD_EXP 1
18496: PPUSH
18497: LD_STRING D7c-JMM-1
18499: PPUSH
18500: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
18504: LD_EXP 22
18508: PPUSH
18509: LD_STRING D7c-Pow-1
18511: PPUSH
18512: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
18516: LD_EXP 1
18520: PPUSH
18521: LD_STRING D7d-JMM-1
18523: PPUSH
18524: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
18528: LD_EXP 22
18532: PPUSH
18533: LD_STRING D7d-Pow-1
18535: PPUSH
18536: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
18540: LD_EXP 1
18544: PPUSH
18545: LD_STRING D7d-JMM-2
18547: PPUSH
18548: CALL_OW 88
// if askSiberite = 1 then
18552: LD_EXP 32
18556: PUSH
18557: LD_INT 1
18559: EQUAL
18560: IFFALSE 18576
// begin Say ( JMM , D7d-JMM-2a ) ;
18562: LD_EXP 1
18566: PPUSH
18567: LD_STRING D7d-JMM-2a
18569: PPUSH
18570: CALL_OW 88
// end else
18574: GO 18588
// begin SayRadio ( Powell , D7d-Pow-2 ) ;
18576: LD_EXP 22
18580: PPUSH
18581: LD_STRING D7d-Pow-2
18583: PPUSH
18584: CALL_OW 94
// end ; SayRadio ( Powell , D7d-Pow-2a ) ;
18588: LD_EXP 22
18592: PPUSH
18593: LD_STRING D7d-Pow-2a
18595: PPUSH
18596: CALL_OW 94
// end ; FinishMission ;
18600: CALL 18605 0 0
// end ;
18604: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
18605: LD_INT 0
18607: PPUSH
18608: PPUSH
18609: PPUSH
18610: PPUSH
// m1 := false ;
18611: LD_ADDR_VAR 0 2
18615: PUSH
18616: LD_INT 0
18618: ST_TO_ADDR
// m2 := false ;
18619: LD_ADDR_VAR 0 3
18623: PUSH
18624: LD_INT 0
18626: ST_TO_ADDR
// m3 := false ;
18627: LD_ADDR_VAR 0 4
18631: PUSH
18632: LD_INT 0
18634: ST_TO_ADDR
// if not westPathUsed then
18635: LD_EXP 49
18639: NOT
18640: IFFALSE 18649
// SetAchievement ( ACH_PATH ) ;
18642: LD_STRING ACH_PATH
18644: PPUSH
18645: CALL_OW 543
// if not rocketBuilded then
18649: LD_EXP 51
18653: NOT
18654: IFFALSE 18670
// begin wait ( 3 ) ;
18656: LD_INT 3
18658: PPUSH
18659: CALL_OW 67
// SetAchievement ( ACH_ROCKET ) ;
18663: LD_STRING ACH_ROCKET
18665: PPUSH
18666: CALL_OW 543
// end ; if tick <= 40 40$00 then
18670: LD_OWVAR 1
18674: PUSH
18675: LD_INT 84000
18677: LESSEQUAL
18678: IFFALSE 18694
// begin wait ( 3 ) ;
18680: LD_INT 3
18682: PPUSH
18683: CALL_OW 67
// SetAchievement ( ACH_ASPEED_12 ) ;
18687: LD_STRING ACH_ASPEED_12
18689: PPUSH
18690: CALL_OW 543
// end ; if teleportExplored = 1 then
18694: LD_EXP 33
18698: PUSH
18699: LD_INT 1
18701: EQUAL
18702: IFFALSE 18724
// begin m1 := true ;
18704: LD_ADDR_VAR 0 2
18708: PUSH
18709: LD_INT 1
18711: ST_TO_ADDR
// AddMedal ( Teleport , 1 ) ;
18712: LD_STRING Teleport
18714: PPUSH
18715: LD_INT 1
18717: PPUSH
18718: CALL_OW 101
// end else
18722: GO 18735
// AddMedal ( Teleport , - 1 ) ;
18724: LD_STRING Teleport
18726: PPUSH
18727: LD_INT 1
18729: NEG
18730: PPUSH
18731: CALL_OW 101
// if sciCounter > 2 then
18735: LD_EXP 35
18739: PUSH
18740: LD_INT 2
18742: GREATER
18743: IFFALSE 18765
// begin m2 := true ;
18745: LD_ADDR_VAR 0 3
18749: PUSH
18750: LD_INT 1
18752: ST_TO_ADDR
// AddMedal ( Materials , 1 ) ;
18753: LD_STRING Materials
18755: PPUSH
18756: LD_INT 1
18758: PPUSH
18759: CALL_OW 101
// end else
18763: GO 18776
// AddMedal ( Materials , - 1 ) ;
18765: LD_STRING Materials
18767: PPUSH
18768: LD_INT 1
18770: NEG
18771: PPUSH
18772: CALL_OW 101
// if sciCounter >= 6 then
18776: LD_EXP 35
18780: PUSH
18781: LD_INT 6
18783: GREATEREQUAL
18784: IFFALSE 18816
// begin m3 := true ;
18786: LD_ADDR_VAR 0 4
18790: PUSH
18791: LD_INT 1
18793: ST_TO_ADDR
// AddMedal ( Scientists , 1 ) ;
18794: LD_STRING Scientists
18796: PPUSH
18797: LD_INT 1
18799: PPUSH
18800: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
18804: LD_INT 1
18806: PPUSH
18807: LD_STRING 12_SciDed_1
18809: PPUSH
18810: CALL_OW 39
// end else
18814: GO 18837
// begin AddMedal ( Scientists , - 1 ) ;
18816: LD_STRING Scientists
18818: PPUSH
18819: LD_INT 1
18821: NEG
18822: PPUSH
18823: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
18827: LD_INT 0
18829: PPUSH
18830: LD_STRING 12_SciDed_1
18832: PPUSH
18833: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
18837: LD_EXP 31
18841: PPUSH
18842: LD_STRING 12_MainDepositFake_1
18844: PPUSH
18845: CALL_OW 39
// if m1 and m2 and m3 and Difficulty = 3 then
18849: LD_VAR 0 2
18853: PUSH
18854: LD_VAR 0 3
18858: AND
18859: PUSH
18860: LD_VAR 0 4
18864: AND
18865: PUSH
18866: LD_OWVAR 67
18870: PUSH
18871: LD_INT 3
18873: EQUAL
18874: AND
18875: IFFALSE 18887
// SetAchievementEX ( ACH_AMER , 12 ) ;
18877: LD_STRING ACH_AMER
18879: PPUSH
18880: LD_INT 12
18882: PPUSH
18883: CALL_OW 564
// GiveMedals ( MAIN ) ;
18887: LD_STRING MAIN
18889: PPUSH
18890: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
18894: LD_INT 22
18896: PUSH
18897: LD_INT 1
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PUSH
18904: LD_INT 21
18906: PUSH
18907: LD_INT 1
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: PUSH
18914: LD_INT 2
18916: PUSH
18917: LD_INT 25
18919: PUSH
18920: LD_INT 1
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: PUSH
18927: LD_INT 25
18929: PUSH
18930: LD_INT 2
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: PUSH
18937: LD_INT 25
18939: PUSH
18940: LD_INT 3
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: PUSH
18947: LD_INT 25
18949: PUSH
18950: LD_INT 4
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: PUSH
18957: LD_INT 25
18959: PUSH
18960: LD_INT 5
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: LD_INT 25
18969: PUSH
18970: LD_INT 8
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: LIST
18990: PPUSH
18991: CALL_OW 69
18995: PPUSH
18996: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19000: LD_EXP 1
19004: PPUSH
19005: LD_EXP 46
19009: PUSH
19010: LD_STRING JMM
19012: STR
19013: PPUSH
19014: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
19018: LD_EXP 7
19022: PPUSH
19023: LD_EXP 46
19027: PUSH
19028: LD_STRING Brown
19030: STR
19031: PPUSH
19032: CALL 12300 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19036: LD_EXP 3
19040: PPUSH
19041: LD_EXP 46
19045: PUSH
19046: LD_STRING Donaldson
19048: STR
19049: PPUSH
19050: CALL 12300 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
19054: LD_EXP 4
19058: PPUSH
19059: LD_EXP 46
19063: PUSH
19064: LD_STRING Bobby
19066: STR
19067: PPUSH
19068: CALL 12300 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
19072: LD_EXP 5
19076: PPUSH
19077: LD_EXP 46
19081: PUSH
19082: LD_STRING Cyrus
19084: STR
19085: PPUSH
19086: CALL 12300 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
19090: LD_EXP 2
19094: PPUSH
19095: LD_EXP 46
19099: PUSH
19100: LD_STRING Lisa
19102: STR
19103: PPUSH
19104: CALL 12300 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
19108: LD_EXP 12
19112: PPUSH
19113: LD_EXP 46
19117: PUSH
19118: LD_STRING Frank
19120: STR
19121: PPUSH
19122: CALL 12300 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
19126: LD_EXP 13
19130: PPUSH
19131: LD_EXP 46
19135: PUSH
19136: LD_STRING Kikuchi
19138: STR
19139: PPUSH
19140: CALL 12300 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
19144: LD_EXP 9
19148: PPUSH
19149: LD_EXP 46
19153: PUSH
19154: LD_STRING Houten
19156: STR
19157: PPUSH
19158: CALL 12300 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
19162: LD_EXP 11
19166: PPUSH
19167: LD_EXP 46
19171: PUSH
19172: LD_STRING Gary
19174: STR
19175: PPUSH
19176: CALL 12300 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
19180: LD_EXP 10
19184: PPUSH
19185: LD_EXP 46
19189: PUSH
19190: LD_STRING Cornell
19192: STR
19193: PPUSH
19194: CALL 12300 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
19198: LD_EXP 6
19202: PPUSH
19203: LD_EXP 46
19207: PUSH
19208: LD_STRING Denis
19210: STR
19211: PPUSH
19212: CALL 12300 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
19216: LD_EXP 8
19220: PPUSH
19221: LD_EXP 46
19225: PUSH
19226: LD_STRING Gladstone
19228: STR
19229: PPUSH
19230: CALL 12300 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
19234: LD_INT 22
19236: PUSH
19237: LD_INT 1
19239: PUSH
19240: EMPTY
19241: LIST
19242: LIST
19243: PUSH
19244: LD_INT 23
19246: PUSH
19247: LD_INT 1
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PUSH
19254: LD_INT 21
19256: PUSH
19257: LD_INT 1
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: PUSH
19264: LD_INT 2
19266: PUSH
19267: LD_INT 25
19269: PUSH
19270: LD_INT 1
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: PUSH
19277: LD_INT 25
19279: PUSH
19280: LD_INT 2
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: PUSH
19287: LD_INT 25
19289: PUSH
19290: LD_INT 3
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PUSH
19297: LD_INT 25
19299: PUSH
19300: LD_INT 4
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: LD_INT 25
19309: PUSH
19310: LD_INT 5
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PUSH
19317: LD_INT 25
19319: PUSH
19320: LD_INT 8
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: PPUSH
19342: CALL_OW 69
19346: PUSH
19347: LD_EXP 1
19351: PUSH
19352: LD_EXP 7
19356: PUSH
19357: LD_EXP 3
19361: PUSH
19362: LD_EXP 4
19366: PUSH
19367: LD_EXP 5
19371: PUSH
19372: LD_EXP 2
19376: PUSH
19377: LD_EXP 12
19381: PUSH
19382: LD_EXP 8
19386: PUSH
19387: LD_EXP 13
19391: PUSH
19392: LD_EXP 6
19396: PUSH
19397: LD_EXP 9
19401: PUSH
19402: LD_EXP 11
19406: PUSH
19407: LD_EXP 10
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: DIFF
19427: PPUSH
19428: LD_STRING 12_other_survivors
19430: PPUSH
19431: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
19435: LD_INT 22
19437: PUSH
19438: LD_INT 1
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: PUSH
19445: LD_INT 23
19447: PUSH
19448: LD_INT 2
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: PUSH
19455: LD_INT 21
19457: PUSH
19458: LD_INT 1
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: PUSH
19465: LD_INT 2
19467: PUSH
19468: LD_INT 25
19470: PUSH
19471: LD_INT 1
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 25
19480: PUSH
19481: LD_INT 2
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 25
19490: PUSH
19491: LD_INT 3
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PUSH
19498: LD_INT 25
19500: PUSH
19501: LD_INT 4
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 25
19510: PUSH
19511: LD_INT 5
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PUSH
19518: LD_INT 25
19520: PUSH
19521: LD_INT 8
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: PPUSH
19543: CALL_OW 69
19547: PPUSH
19548: LD_STRING 12_kurt_squad
19550: PPUSH
19551: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
19555: LD_EXP 14
19559: PPUSH
19560: LD_STRING 12_others
19562: PPUSH
19563: CALL_OW 38
// YouWin ;
19567: CALL_OW 103
// end ; end_of_file
19571: LD_VAR 0 1
19575: RET
// every 0 0$1 trigger IsDead ( JMM ) do
19576: LD_EXP 1
19580: PPUSH
19581: CALL_OW 301
19585: IFFALSE 19597
19587: GO 19589
19589: DISABLE
// YouLost ( JMM ) ; end_of_file
19590: LD_STRING JMM
19592: PPUSH
19593: CALL_OW 104
19597: END
// every 0 0$01 do
19598: GO 19600
19600: DISABLE
// begin repeat wait ( 0 0$30 ) ;
19601: LD_INT 1050
19603: PPUSH
19604: CALL_OW 67
// if cratesSpawned < 6 then
19608: LD_EXP 45
19612: PUSH
19613: LD_INT 6
19615: LESS
19616: IFFALSE 19653
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19618: LD_INT 3
19620: PPUSH
19621: LD_INT 5
19623: PPUSH
19624: CALL_OW 12
19628: PPUSH
19629: LD_INT 21
19631: PPUSH
19632: LD_INT 1
19634: PPUSH
19635: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19639: LD_ADDR_EXP 45
19643: PUSH
19644: LD_EXP 45
19648: PUSH
19649: LD_INT 1
19651: PLUS
19652: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
19653: LD_EXP 45
19657: PUSH
19658: LD_INT 6
19660: GREATEREQUAL
19661: PUSH
19662: LD_EXP 45
19666: PUSH
19667: LD_INT 12
19669: LESS
19670: AND
19671: IFFALSE 19715
// begin wait ( 0 0$50 ) ;
19673: LD_INT 1750
19675: PPUSH
19676: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19680: LD_INT 3
19682: PPUSH
19683: LD_INT 5
19685: PPUSH
19686: CALL_OW 12
19690: PPUSH
19691: LD_INT 21
19693: PPUSH
19694: LD_INT 1
19696: PPUSH
19697: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19701: LD_ADDR_EXP 45
19705: PUSH
19706: LD_EXP 45
19710: PUSH
19711: LD_INT 1
19713: PLUS
19714: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
19715: LD_EXP 45
19719: PUSH
19720: LD_INT 12
19722: GREATEREQUAL
19723: IFFALSE 19767
// begin wait ( 1 1$40 ) ;
19725: LD_INT 3500
19727: PPUSH
19728: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19732: LD_INT 3
19734: PPUSH
19735: LD_INT 5
19737: PPUSH
19738: CALL_OW 12
19742: PPUSH
19743: LD_INT 21
19745: PPUSH
19746: LD_INT 1
19748: PPUSH
19749: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19753: LD_ADDR_EXP 45
19757: PUSH
19758: LD_EXP 45
19762: PUSH
19763: LD_INT 1
19765: PLUS
19766: ST_TO_ADDR
// end ; until false ;
19767: LD_INT 0
19769: IFFALSE 19601
// end ; end_of_file
19771: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
19772: GO 19774
19774: DISABLE
// begin ru_radar := 98 ;
19775: LD_ADDR_EXP 52
19779: PUSH
19780: LD_INT 98
19782: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19783: LD_ADDR_EXP 53
19787: PUSH
19788: LD_INT 89
19790: ST_TO_ADDR
// us_hack := 99 ;
19791: LD_ADDR_EXP 54
19795: PUSH
19796: LD_INT 99
19798: ST_TO_ADDR
// us_artillery := 97 ;
19799: LD_ADDR_EXP 55
19803: PUSH
19804: LD_INT 97
19806: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19807: LD_ADDR_EXP 56
19811: PUSH
19812: LD_INT 91
19814: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
19815: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
19816: LD_INT 0
19818: PPUSH
19819: PPUSH
19820: PPUSH
19821: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19822: LD_VAR 0 1
19826: PPUSH
19827: CALL_OW 264
19831: PUSH
19832: LD_EXP 56
19836: EQUAL
19837: IFFALSE 19909
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19839: LD_INT 68
19841: PPUSH
19842: LD_VAR 0 1
19846: PPUSH
19847: CALL_OW 255
19851: PPUSH
19852: CALL_OW 321
19856: PUSH
19857: LD_INT 2
19859: EQUAL
19860: IFFALSE 19872
// eff := 70 else
19862: LD_ADDR_VAR 0 6
19866: PUSH
19867: LD_INT 70
19869: ST_TO_ADDR
19870: GO 19880
// eff := 30 ;
19872: LD_ADDR_VAR 0 6
19876: PUSH
19877: LD_INT 30
19879: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19880: LD_VAR 0 1
19884: PPUSH
19885: CALL_OW 250
19889: PPUSH
19890: LD_VAR 0 1
19894: PPUSH
19895: CALL_OW 251
19899: PPUSH
19900: LD_VAR 0 6
19904: PPUSH
19905: CALL_OW 495
// end ; end ;
19909: LD_VAR 0 4
19913: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
19914: LD_INT 0
19916: PPUSH
19917: PPUSH
19918: PPUSH
19919: PPUSH
19920: PPUSH
19921: PPUSH
// if cmd = 124 then
19922: LD_VAR 0 1
19926: PUSH
19927: LD_INT 124
19929: EQUAL
19930: IFFALSE 20136
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
19932: LD_ADDR_VAR 0 5
19936: PUSH
19937: LD_INT 2
19939: PUSH
19940: LD_INT 34
19942: PUSH
19943: LD_INT 53
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: PUSH
19950: LD_INT 34
19952: PUSH
19953: LD_INT 14
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: LIST
19964: PPUSH
19965: CALL_OW 69
19969: ST_TO_ADDR
// if not tmp then
19970: LD_VAR 0 5
19974: NOT
19975: IFFALSE 19979
// exit ;
19977: GO 20136
// for i in tmp do
19979: LD_ADDR_VAR 0 3
19983: PUSH
19984: LD_VAR 0 5
19988: PUSH
19989: FOR_IN
19990: IFFALSE 20134
// begin taskList := GetTaskList ( i ) ;
19992: LD_ADDR_VAR 0 6
19996: PUSH
19997: LD_VAR 0 3
20001: PPUSH
20002: CALL_OW 437
20006: ST_TO_ADDR
// if not taskList then
20007: LD_VAR 0 6
20011: NOT
20012: IFFALSE 20016
// continue ;
20014: GO 19989
// for j = 1 to taskList do
20016: LD_ADDR_VAR 0 4
20020: PUSH
20021: DOUBLE
20022: LD_INT 1
20024: DEC
20025: ST_TO_ADDR
20026: LD_VAR 0 6
20030: PUSH
20031: FOR_TO
20032: IFFALSE 20130
// if taskList [ j ] [ 1 ] = | then
20034: LD_VAR 0 6
20038: PUSH
20039: LD_VAR 0 4
20043: ARRAY
20044: PUSH
20045: LD_INT 1
20047: ARRAY
20048: PUSH
20049: LD_STRING |
20051: EQUAL
20052: IFFALSE 20128
// begin _taskList := Delete ( taskList , 1 ) ;
20054: LD_ADDR_VAR 0 7
20058: PUSH
20059: LD_VAR 0 6
20063: PPUSH
20064: LD_INT 1
20066: PPUSH
20067: CALL_OW 3
20071: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
20072: LD_VAR 0 3
20076: PPUSH
20077: LD_VAR 0 7
20081: PPUSH
20082: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
20086: LD_VAR 0 3
20090: PPUSH
20091: LD_VAR 0 6
20095: PUSH
20096: LD_VAR 0 4
20100: ARRAY
20101: PUSH
20102: LD_INT 2
20104: ARRAY
20105: PPUSH
20106: LD_VAR 0 6
20110: PUSH
20111: LD_VAR 0 4
20115: ARRAY
20116: PUSH
20117: LD_INT 3
20119: ARRAY
20120: PPUSH
20121: LD_INT 8
20123: PPUSH
20124: CALL 20141 0 4
// end ;
20128: GO 20031
20130: POP
20131: POP
// end ;
20132: GO 19989
20134: POP
20135: POP
// end ; end ;
20136: LD_VAR 0 2
20140: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20141: LD_INT 0
20143: PPUSH
20144: PPUSH
20145: PPUSH
20146: PPUSH
20147: PPUSH
20148: PPUSH
20149: PPUSH
20150: PPUSH
20151: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20152: LD_VAR 0 1
20156: NOT
20157: PUSH
20158: LD_VAR 0 2
20162: PPUSH
20163: LD_VAR 0 3
20167: PPUSH
20168: CALL_OW 488
20172: NOT
20173: OR
20174: PUSH
20175: LD_VAR 0 4
20179: NOT
20180: OR
20181: IFFALSE 20185
// exit ;
20183: GO 20525
// list := [ ] ;
20185: LD_ADDR_VAR 0 13
20189: PUSH
20190: EMPTY
20191: ST_TO_ADDR
// if x - r < 0 then
20192: LD_VAR 0 2
20196: PUSH
20197: LD_VAR 0 4
20201: MINUS
20202: PUSH
20203: LD_INT 0
20205: LESS
20206: IFFALSE 20218
// min_x := 0 else
20208: LD_ADDR_VAR 0 7
20212: PUSH
20213: LD_INT 0
20215: ST_TO_ADDR
20216: GO 20234
// min_x := x - r ;
20218: LD_ADDR_VAR 0 7
20222: PUSH
20223: LD_VAR 0 2
20227: PUSH
20228: LD_VAR 0 4
20232: MINUS
20233: ST_TO_ADDR
// if y - r < 0 then
20234: LD_VAR 0 3
20238: PUSH
20239: LD_VAR 0 4
20243: MINUS
20244: PUSH
20245: LD_INT 0
20247: LESS
20248: IFFALSE 20260
// min_y := 0 else
20250: LD_ADDR_VAR 0 8
20254: PUSH
20255: LD_INT 0
20257: ST_TO_ADDR
20258: GO 20276
// min_y := y - r ;
20260: LD_ADDR_VAR 0 8
20264: PUSH
20265: LD_VAR 0 3
20269: PUSH
20270: LD_VAR 0 4
20274: MINUS
20275: ST_TO_ADDR
// max_x := x + r ;
20276: LD_ADDR_VAR 0 9
20280: PUSH
20281: LD_VAR 0 2
20285: PUSH
20286: LD_VAR 0 4
20290: PLUS
20291: ST_TO_ADDR
// max_y := y + r ;
20292: LD_ADDR_VAR 0 10
20296: PUSH
20297: LD_VAR 0 3
20301: PUSH
20302: LD_VAR 0 4
20306: PLUS
20307: ST_TO_ADDR
// for _x = min_x to max_x do
20308: LD_ADDR_VAR 0 11
20312: PUSH
20313: DOUBLE
20314: LD_VAR 0 7
20318: DEC
20319: ST_TO_ADDR
20320: LD_VAR 0 9
20324: PUSH
20325: FOR_TO
20326: IFFALSE 20443
// for _y = min_y to max_y do
20328: LD_ADDR_VAR 0 12
20332: PUSH
20333: DOUBLE
20334: LD_VAR 0 8
20338: DEC
20339: ST_TO_ADDR
20340: LD_VAR 0 10
20344: PUSH
20345: FOR_TO
20346: IFFALSE 20439
// begin if not ValidHex ( _x , _y ) then
20348: LD_VAR 0 11
20352: PPUSH
20353: LD_VAR 0 12
20357: PPUSH
20358: CALL_OW 488
20362: NOT
20363: IFFALSE 20367
// continue ;
20365: GO 20345
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20367: LD_VAR 0 11
20371: PPUSH
20372: LD_VAR 0 12
20376: PPUSH
20377: CALL_OW 351
20381: PUSH
20382: LD_VAR 0 11
20386: PPUSH
20387: LD_VAR 0 12
20391: PPUSH
20392: CALL_OW 554
20396: AND
20397: IFFALSE 20437
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20399: LD_ADDR_VAR 0 13
20403: PUSH
20404: LD_VAR 0 13
20408: PPUSH
20409: LD_VAR 0 13
20413: PUSH
20414: LD_INT 1
20416: PLUS
20417: PPUSH
20418: LD_VAR 0 11
20422: PUSH
20423: LD_VAR 0 12
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PPUSH
20432: CALL_OW 2
20436: ST_TO_ADDR
// end ;
20437: GO 20345
20439: POP
20440: POP
20441: GO 20325
20443: POP
20444: POP
// if not list then
20445: LD_VAR 0 13
20449: NOT
20450: IFFALSE 20454
// exit ;
20452: GO 20525
// for i in list do
20454: LD_ADDR_VAR 0 6
20458: PUSH
20459: LD_VAR 0 13
20463: PUSH
20464: FOR_IN
20465: IFFALSE 20523
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
20467: LD_VAR 0 1
20471: PPUSH
20472: LD_STRING M
20474: PUSH
20475: LD_VAR 0 6
20479: PUSH
20480: LD_INT 1
20482: ARRAY
20483: PUSH
20484: LD_VAR 0 6
20488: PUSH
20489: LD_INT 2
20491: ARRAY
20492: PUSH
20493: LD_INT 0
20495: PUSH
20496: LD_INT 0
20498: PUSH
20499: LD_INT 0
20501: PUSH
20502: LD_INT 0
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: PUSH
20514: EMPTY
20515: LIST
20516: PPUSH
20517: CALL_OW 447
20521: GO 20464
20523: POP
20524: POP
// end ;
20525: LD_VAR 0 5
20529: RET
