// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export Powell ; export Davidov ; export Kurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; export westPathUsed , laserCounterDestroy , rocketBuilded , cratesAllow ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 103 0 0
// InGameOn ;
  19: CALL_OW 8
// CenterNowOnXY ( 67 , 22 ) ;
  23: LD_INT 67
  25: PPUSH
  26: LD_INT 22
  28: PPUSH
  29: CALL_OW 86
// PlaceSeeing ( 67 , 22 , 1 , - 6 ) ;
  33: LD_INT 67
  35: PPUSH
  36: LD_INT 22
  38: PPUSH
  39: LD_INT 1
  41: PPUSH
  42: LD_INT 6
  44: NEG
  45: PPUSH
  46: CALL_OW 330
// RemoveSeeing ( 67 , 22 , 1 ) ;
  50: LD_INT 67
  52: PPUSH
  53: LD_INT 22
  55: PPUSH
  56: LD_INT 1
  58: PPUSH
  59: CALL_OW 331
// CreateNature ;
  63: CALL 15917 0 0
// RaiseSailEvent ( 1 ) ;
  67: LD_INT 1
  69: PPUSH
  70: CALL_OW 427
// PrepareVehicles ;
  74: CALL 1922 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
  78: LD_INT 4
  80: PPUSH
  81: LD_INT 0
  83: PPUSH
  84: LD_INT 1
  86: PPUSH
  87: LD_INT 0
  89: PPUSH
  90: CALL 1474 0 4
// PrepareAmericanHeroes ;
  94: CALL 671 0 0
// Action ;
  98: CALL 6289 0 0
// end ;
 102: END
// function Init ; begin
 103: LD_INT 0
 105: PPUSH
// RuScientists := [ ] ;
 106: LD_ADDR_EXP 27
 110: PUSH
 111: EMPTY
 112: ST_TO_ADDR
// sciCounter := 0 ;
 113: LD_ADDR_EXP 28
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// ruDestroyedBuildings := [ ] ;
 121: LD_ADDR_EXP 31
 125: PUSH
 126: EMPTY
 127: ST_TO_ADDR
// russianTanks := [ ] ;
 128: LD_ADDR_EXP 32
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// russianTimeLapsers := [ ] ;
 135: LD_ADDR_EXP 33
 139: PUSH
 140: EMPTY
 141: ST_TO_ADDR
// arabianMines := [ ] ;
 142: LD_ADDR_EXP 37
 146: PUSH
 147: EMPTY
 148: ST_TO_ADDR
// kurtStatus := LoadVariable ( 06_KurtStatus_1 , 0 ) ;
 149: LD_ADDR_EXP 19
 153: PUSH
 154: LD_STRING 06_KurtStatus_1
 156: PPUSH
 157: LD_INT 0
 159: PPUSH
 160: CALL_OW 30
 164: ST_TO_ADDR
// secondPass := 0 ;
 165: LD_ADDR_EXP 20
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// teleportExplored := 0 ;
 173: LD_ADDR_EXP 26
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// attackTactic := 0 ;
 181: LD_ADDR_EXP 36
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// tpCounter := 0 ;
 189: LD_ADDR_EXP 22
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// askSiberite := 0 ;
 197: LD_ADDR_EXP 25
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// warWithLegion := 0 ;
 205: LD_ADDR_EXP 23
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// fakeInfo := 0 ;
 213: LD_ADDR_EXP 24
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// cratesSpawned := 0 ;
 221: LD_ADDR_EXP 38
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// ruAI := 0 ;
 229: LD_ADDR_EXP 34
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// ruEscape := 0 ;
 237: LD_ADDR_EXP 35
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// eventVar1 := 0 ;
 245: LD_ADDR_EXP 40
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// mission_prefix := 12_ ;
 253: LD_ADDR_EXP 39
 257: PUSH
 258: LD_STRING 12_
 260: ST_TO_ADDR
// debugMode := 0 ;
 261: LD_ADDR_EXP 41
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// westPathUsed := false ;
 269: LD_ADDR_EXP 42
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// laserCounterDestroy := 0 ;
 277: LD_ADDR_EXP 43
 281: PUSH
 282: LD_INT 0
 284: ST_TO_ADDR
// rocketBuilded := false ;
 285: LD_ADDR_EXP 44
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// cratesAllow := false ;
 293: LD_ADDR_EXP 45
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// end ;
 301: LD_VAR 0 1
 305: RET
// every 0 0$1 trigger debugMode do var i ;
 306: LD_EXP 41
 310: IFFALSE 616
 312: GO 314
 314: DISABLE
 315: LD_INT 0
 317: PPUSH
// begin enable ;
 318: ENABLE
// FogOff ( true ) ;
 319: LD_INT 1
 321: PPUSH
 322: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 326: LD_ADDR_VAR 0 1
 330: PUSH
 331: LD_INT 22
 333: PUSH
 334: LD_INT 1
 336: PUSH
 337: EMPTY
 338: LIST
 339: LIST
 340: PUSH
 341: LD_INT 21
 343: PUSH
 344: LD_INT 1
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: PPUSH
 355: CALL_OW 69
 359: PUSH
 360: FOR_IN
 361: IFFALSE 377
// SetLives ( i , 1000 ) ;
 363: LD_VAR 0 1
 367: PPUSH
 368: LD_INT 1000
 370: PPUSH
 371: CALL_OW 234
 375: GO 360
 377: POP
 378: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 379: LD_ADDR_VAR 0 1
 383: PUSH
 384: LD_INT 22
 386: PUSH
 387: LD_INT 1
 389: PUSH
 390: EMPTY
 391: LIST
 392: LIST
 393: PUSH
 394: LD_INT 2
 396: PUSH
 397: LD_INT 30
 399: PUSH
 400: LD_INT 0
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: PUSH
 407: LD_INT 30
 409: PUSH
 410: LD_INT 1
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: PUSH
 417: EMPTY
 418: LIST
 419: LIST
 420: LIST
 421: PUSH
 422: EMPTY
 423: LIST
 424: LIST
 425: PPUSH
 426: CALL_OW 69
 430: PUSH
 431: FOR_IN
 432: IFFALSE 456
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 434: LD_VAR 0 1
 438: PPUSH
 439: CALL_OW 274
 443: PPUSH
 444: LD_INT 1
 446: PPUSH
 447: LD_INT 9999
 449: PPUSH
 450: CALL_OW 277
 454: GO 431
 456: POP
 457: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 458: LD_ADDR_VAR 0 1
 462: PUSH
 463: LD_INT 22
 465: PUSH
 466: LD_INT 1
 468: PUSH
 469: EMPTY
 470: LIST
 471: LIST
 472: PUSH
 473: LD_INT 2
 475: PUSH
 476: LD_INT 30
 478: PUSH
 479: LD_INT 0
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PUSH
 486: LD_INT 30
 488: PUSH
 489: LD_INT 1
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: LIST
 500: PUSH
 501: EMPTY
 502: LIST
 503: LIST
 504: PPUSH
 505: CALL_OW 69
 509: PUSH
 510: FOR_IN
 511: IFFALSE 535
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 513: LD_VAR 0 1
 517: PPUSH
 518: CALL_OW 274
 522: PPUSH
 523: LD_INT 2
 525: PPUSH
 526: LD_INT 9999
 528: PPUSH
 529: CALL_OW 277
 533: GO 510
 535: POP
 536: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 537: LD_ADDR_VAR 0 1
 541: PUSH
 542: LD_INT 22
 544: PUSH
 545: LD_INT 1
 547: PUSH
 548: EMPTY
 549: LIST
 550: LIST
 551: PUSH
 552: LD_INT 2
 554: PUSH
 555: LD_INT 30
 557: PUSH
 558: LD_INT 0
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: PUSH
 565: LD_INT 30
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: EMPTY
 572: LIST
 573: LIST
 574: PUSH
 575: EMPTY
 576: LIST
 577: LIST
 578: LIST
 579: PUSH
 580: EMPTY
 581: LIST
 582: LIST
 583: PPUSH
 584: CALL_OW 69
 588: PUSH
 589: FOR_IN
 590: IFFALSE 614
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 592: LD_VAR 0 1
 596: PPUSH
 597: CALL_OW 274
 601: PPUSH
 602: LD_INT 3
 604: PPUSH
 605: LD_INT 9999
 607: PPUSH
 608: CALL_OW 277
 612: GO 589
 614: POP
 615: POP
// end ;
 616: PPOPN 1
 618: END
// every 0 0$1 trigger FilterUnitsInArea ( westPathArea , [ f_side , 1 ] ) do
 619: LD_INT 24
 621: PPUSH
 622: LD_INT 22
 624: PUSH
 625: LD_INT 1
 627: PUSH
 628: EMPTY
 629: LIST
 630: LIST
 631: PPUSH
 632: CALL_OW 70
 636: IFFALSE 649
 638: GO 640
 640: DISABLE
// westPathUsed := true ;
 641: LD_ADDR_EXP 42
 645: PUSH
 646: LD_INT 1
 648: ST_TO_ADDR
 649: END
// every 0 0$1 trigger laserCounterDestroy >= 3 do
 650: LD_EXP 43
 654: PUSH
 655: LD_INT 3
 657: GREATEREQUAL
 658: IFFALSE 670
 660: GO 662
 662: DISABLE
// SetAchievement ( ACH_LASER ) ; end_of_file
 663: LD_STRING ACH_LASER
 665: PPUSH
 666: CALL_OW 543
 670: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 671: LD_INT 0
 673: PPUSH
 674: PPUSH
 675: PPUSH
// uc_side := 1 ;
 676: LD_ADDR_OWVAR 20
 680: PUSH
 681: LD_INT 1
 683: ST_TO_ADDR
// others11 := CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 684: LD_ADDR_EXP 14
 688: PUSH
 689: LD_STRING 11c_others
 691: PPUSH
 692: CALL_OW 31
 696: PUSH
 697: LD_STRING 11_others
 699: PPUSH
 700: CALL_OW 31
 704: UNION
 705: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , 11_ ) ;
 706: LD_ADDR_EXP 1
 710: PUSH
 711: LD_STRING JMM
 713: PPUSH
 714: LD_EXP 41
 718: NOT
 719: PPUSH
 720: LD_STRING 11_
 722: PPUSH
 723: CALL 41446 0 3
 727: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 728: LD_EXP 1
 732: PPUSH
 733: LD_INT 1
 735: PPUSH
 736: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 740: LD_EXP 1
 744: PPUSH
 745: LD_INT 22
 747: PUSH
 748: LD_INT 1
 750: PUSH
 751: EMPTY
 752: LIST
 753: LIST
 754: PUSH
 755: LD_INT 21
 757: PUSH
 758: LD_INT 2
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: PUSH
 765: LD_INT 58
 767: PUSH
 768: EMPTY
 769: LIST
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PPUSH
 776: CALL_OW 69
 780: PUSH
 781: LD_INT 1
 783: ARRAY
 784: PPUSH
 785: CALL_OW 52
// if TestCharacters ( 11_Lisa ) then
 789: LD_STRING 11_Lisa
 791: PPUSH
 792: CALL_OW 28
 796: IFFALSE 858
// begin Lisa := PrepareUnit ( Lisa , ( not debugMode ) , 11_ ) ;
 798: LD_ADDR_EXP 2
 802: PUSH
 803: LD_STRING Lisa
 805: PPUSH
 806: LD_EXP 41
 810: NOT
 811: PPUSH
 812: LD_STRING 11_
 814: PPUSH
 815: CALL 41446 0 3
 819: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 820: LD_EXP 2
 824: PPUSH
 825: LD_INT 1
 827: PPUSH
 828: CALL_OW 336
// repeat wait ( 1 ) ;
 832: LD_INT 1
 834: PPUSH
 835: CALL_OW 67
// until PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 839: LD_EXP 2
 843: PPUSH
 844: LD_INT 4
 846: PPUSH
 847: LD_INT 0
 849: PPUSH
 850: CALL_OW 49
 854: IFFALSE 832
// end else
 856: GO 874
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 858: LD_INT 4
 860: PPUSH
 861: LD_INT 0
 863: PPUSH
 864: LD_INT 1
 866: PPUSH
 867: LD_INT 0
 869: PPUSH
 870: CALL 1474 0 4
// if TestCharacters ( 11_Donaldson ) then
 874: LD_STRING 11_Donaldson
 876: PPUSH
 877: CALL_OW 28
 881: IFFALSE 943
// begin Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , 11_ ) ;
 883: LD_ADDR_EXP 3
 887: PUSH
 888: LD_STRING Donaldson
 890: PPUSH
 891: LD_EXP 41
 895: NOT
 896: PPUSH
 897: LD_STRING 11_
 899: PPUSH
 900: CALL 41446 0 3
 904: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 905: LD_EXP 3
 909: PPUSH
 910: LD_INT 1
 912: PPUSH
 913: CALL_OW 336
// repeat wait ( 1 ) ;
 917: LD_INT 1
 919: PPUSH
 920: CALL_OW 67
// until PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 924: LD_EXP 3
 928: PPUSH
 929: LD_INT 4
 931: PPUSH
 932: LD_INT 0
 934: PPUSH
 935: CALL_OW 49
 939: IFFALSE 917
// end else
 941: GO 959
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 943: LD_INT 4
 945: PPUSH
 946: LD_INT 0
 948: PPUSH
 949: LD_INT 1
 951: PPUSH
 952: LD_INT 0
 954: PPUSH
 955: CALL 1474 0 4
// if TestCharacters ( 11_Cyrus ) then
 959: LD_STRING 11_Cyrus
 961: PPUSH
 962: CALL_OW 28
 966: IFFALSE 1028
// begin Cyrus := PrepareUnit ( Cyrus , ( not debugMode ) , 11_ ) ;
 968: LD_ADDR_EXP 5
 972: PUSH
 973: LD_STRING Cyrus
 975: PPUSH
 976: LD_EXP 41
 980: NOT
 981: PPUSH
 982: LD_STRING 11_
 984: PPUSH
 985: CALL 41446 0 3
 989: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 990: LD_EXP 5
 994: PPUSH
 995: LD_INT 1
 997: PPUSH
 998: CALL_OW 336
// repeat wait ( 1 ) ;
1002: LD_INT 1
1004: PPUSH
1005: CALL_OW 67
// until PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1009: LD_EXP 5
1013: PPUSH
1014: LD_INT 4
1016: PPUSH
1017: LD_INT 0
1019: PPUSH
1020: CALL_OW 49
1024: IFFALSE 1002
// end else
1026: GO 1044
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1028: LD_INT 4
1030: PPUSH
1031: LD_INT 0
1033: PPUSH
1034: LD_INT 1
1036: PPUSH
1037: LD_INT 0
1039: PPUSH
1040: CALL 1474 0 4
// if TestCharacters ( 11_Denis ) then
1044: LD_STRING 11_Denis
1046: PPUSH
1047: CALL_OW 28
1051: IFFALSE 1113
// begin Denis := PrepareUnit ( Denis , ( not debugMode ) , 11_ ) ;
1053: LD_ADDR_EXP 6
1057: PUSH
1058: LD_STRING Denis
1060: PPUSH
1061: LD_EXP 41
1065: NOT
1066: PPUSH
1067: LD_STRING 11_
1069: PPUSH
1070: CALL 41446 0 3
1074: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1075: LD_EXP 6
1079: PPUSH
1080: LD_INT 4
1082: PPUSH
1083: CALL_OW 336
// repeat wait ( 1 ) ;
1087: LD_INT 1
1089: PPUSH
1090: CALL_OW 67
// until PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1094: LD_EXP 6
1098: PPUSH
1099: LD_INT 4
1101: PPUSH
1102: LD_INT 0
1104: PPUSH
1105: CALL_OW 49
1109: IFFALSE 1087
// end else
1111: GO 1129
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1113: LD_INT 4
1115: PPUSH
1116: LD_INT 0
1118: PPUSH
1119: LD_INT 1
1121: PPUSH
1122: LD_INT 0
1124: PPUSH
1125: CALL 1474 0 4
// if TestCharacters ( 11_Frank ) then
1129: LD_STRING 11_Frank
1131: PPUSH
1132: CALL_OW 28
1136: IFFALSE 1198
// begin Frank := PrepareUnit ( Frank , ( not debugMode ) , 11_ ) ;
1138: LD_ADDR_EXP 12
1142: PUSH
1143: LD_STRING Frank
1145: PPUSH
1146: LD_EXP 41
1150: NOT
1151: PPUSH
1152: LD_STRING 11_
1154: PPUSH
1155: CALL 41446 0 3
1159: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1160: LD_EXP 12
1164: PPUSH
1165: LD_INT 1
1167: PPUSH
1168: CALL_OW 336
// repeat wait ( 1 ) ;
1172: LD_INT 1
1174: PPUSH
1175: CALL_OW 67
// until PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1179: LD_EXP 12
1183: PPUSH
1184: LD_INT 4
1186: PPUSH
1187: LD_INT 0
1189: PPUSH
1190: CALL_OW 49
1194: IFFALSE 1172
// end else
1196: GO 1214
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1198: LD_INT 4
1200: PPUSH
1201: LD_INT 0
1203: PPUSH
1204: LD_INT 1
1206: PPUSH
1207: LD_INT 0
1209: PPUSH
1210: CALL 1474 0 4
// if TestCharacters ( 11_Cornell ) then
1214: LD_STRING 11_Cornell
1216: PPUSH
1217: CALL_OW 28
1221: IFFALSE 1283
// begin Cornel := PrepareUnit ( Cornell , ( not debugMode ) , 11_ ) ;
1223: LD_ADDR_EXP 10
1227: PUSH
1228: LD_STRING Cornell
1230: PPUSH
1231: LD_EXP 41
1235: NOT
1236: PPUSH
1237: LD_STRING 11_
1239: PPUSH
1240: CALL 41446 0 3
1244: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1245: LD_EXP 10
1249: PPUSH
1250: LD_INT 1
1252: PPUSH
1253: CALL_OW 336
// repeat wait ( 1 ) ;
1257: LD_INT 1
1259: PPUSH
1260: CALL_OW 67
// until PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1264: LD_EXP 10
1268: PPUSH
1269: LD_INT 4
1271: PPUSH
1272: LD_INT 0
1274: PPUSH
1275: CALL_OW 49
1279: IFFALSE 1257
// end else
1281: GO 1299
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1283: LD_INT 4
1285: PPUSH
1286: LD_INT 0
1288: PPUSH
1289: LD_INT 1
1291: PPUSH
1292: LD_INT 0
1294: PPUSH
1295: CALL 1474 0 4
// tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1299: LD_ADDR_VAR 0 2
1303: PUSH
1304: LD_EXP 14
1308: PPUSH
1309: LD_INT 26
1311: PUSH
1312: LD_INT 1
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PPUSH
1319: CALL_OW 72
1323: ST_TO_ADDR
// if not tmp then
1324: LD_VAR 0 2
1328: NOT
1329: IFFALSE 1367
// begin PrepareSoldier ( sex_male , 8 ) ;
1331: LD_INT 1
1333: PPUSH
1334: LD_INT 8
1336: PPUSH
1337: CALL_OW 381
// repeat wait ( 1 ) ;
1341: LD_INT 1
1343: PPUSH
1344: CALL_OW 67
// until PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1348: CALL_OW 44
1352: PPUSH
1353: LD_INT 4
1355: PPUSH
1356: LD_INT 0
1358: PPUSH
1359: CALL_OW 49
1363: IFFALSE 1341
// end else
1365: GO 1450
// begin if GetClass ( tmp [ 1 ] ) <> class_soldier then
1367: LD_VAR 0 2
1371: PUSH
1372: LD_INT 1
1374: ARRAY
1375: PPUSH
1376: CALL_OW 257
1380: PUSH
1381: LD_INT 1
1383: NONEQUAL
1384: IFFALSE 1402
// SetClass ( tmp [ 1 ] , class_soldier ) ;
1386: LD_VAR 0 2
1390: PUSH
1391: LD_INT 1
1393: ARRAY
1394: PPUSH
1395: LD_INT 1
1397: PPUSH
1398: CALL_OW 336
// repeat wait ( 1 ) ;
1402: LD_INT 1
1404: PPUSH
1405: CALL_OW 67
// until PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1409: LD_VAR 0 2
1413: PUSH
1414: LD_INT 1
1416: ARRAY
1417: PPUSH
1418: LD_INT 4
1420: PPUSH
1421: LD_INT 0
1423: PPUSH
1424: CALL_OW 49
1428: IFFALSE 1402
// others11 := others11 diff tmp [ 1 ] ;
1430: LD_ADDR_EXP 14
1434: PUSH
1435: LD_EXP 14
1439: PUSH
1440: LD_VAR 0 2
1444: PUSH
1445: LD_INT 1
1447: ARRAY
1448: DIFF
1449: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ,  ) ;
1450: LD_ADDR_EXP 15
1454: PUSH
1455: LD_STRING Powell
1457: PPUSH
1458: LD_INT 0
1460: PPUSH
1461: LD_STRING 
1463: PPUSH
1464: CALL 41446 0 3
1468: ST_TO_ADDR
// end ;
1469: LD_VAR 0 1
1473: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1474: LD_INT 0
1476: PPUSH
1477: PPUSH
1478: PPUSH
1479: PPUSH
1480: PPUSH
// if mech = 1 then
1481: LD_VAR 0 4
1485: PUSH
1486: LD_INT 1
1488: EQUAL
1489: IFFALSE 1743
// begin if others11 then
1491: LD_EXP 14
1495: IFFALSE 1683
// begin for i := 1 to others11 - 1 do
1497: LD_ADDR_VAR 0 6
1501: PUSH
1502: DOUBLE
1503: LD_INT 1
1505: DEC
1506: ST_TO_ADDR
1507: LD_EXP 14
1511: PUSH
1512: LD_INT 1
1514: MINUS
1515: PUSH
1516: FOR_TO
1517: IFFALSE 1599
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1519: LD_EXP 14
1523: PUSH
1524: LD_VAR 0 6
1528: ARRAY
1529: PPUSH
1530: LD_INT 3
1532: PPUSH
1533: CALL_OW 259
1537: PUSH
1538: LD_EXP 14
1542: PUSH
1543: LD_VAR 0 6
1547: PUSH
1548: LD_INT 1
1550: PLUS
1551: ARRAY
1552: PPUSH
1553: LD_INT 3
1555: PPUSH
1556: CALL_OW 259
1560: LESS
1561: IFFALSE 1597
// begin mecha = others11 [ i + 1 ] ;
1563: LD_ADDR_VAR 0 9
1567: PUSH
1568: LD_EXP 14
1572: PUSH
1573: LD_VAR 0 6
1577: PUSH
1578: LD_INT 1
1580: PLUS
1581: ARRAY
1582: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1583: LD_VAR 0 9
1587: PPUSH
1588: LD_INT 3
1590: PPUSH
1591: CALL_OW 336
// break ;
1595: GO 1599
// end ; end ;
1597: GO 1516
1599: POP
1600: POP
// if spawnMode = 1 then
1601: LD_VAR 0 3
1605: PUSH
1606: LD_INT 1
1608: EQUAL
1609: IFFALSE 1651
// begin SetClass ( mecha , class_soldier ) ;
1611: LD_VAR 0 9
1615: PPUSH
1616: LD_INT 1
1618: PPUSH
1619: CALL_OW 336
// repeat wait ( 1 ) ;
1623: LD_INT 1
1625: PPUSH
1626: CALL_OW 67
// until PlaceUnitArea ( mecha , area , false ) ;
1630: LD_VAR 0 9
1634: PPUSH
1635: LD_VAR 0 1
1639: PPUSH
1640: LD_INT 0
1642: PPUSH
1643: CALL_OW 49
1647: IFFALSE 1623
// end else
1649: GO 1665
// PlaceHumanInUnit ( mecha , veh ) ;
1651: LD_VAR 0 9
1655: PPUSH
1656: LD_VAR 0 2
1660: PPUSH
1661: CALL_OW 52
// others11 := others11 diff mecha ;
1665: LD_ADDR_EXP 14
1669: PUSH
1670: LD_EXP 14
1674: PUSH
1675: LD_VAR 0 9
1679: DIFF
1680: ST_TO_ADDR
// end else
1681: GO 1741
// begin hc_name :=  ;
1683: LD_ADDR_OWVAR 26
1687: PUSH
1688: LD_STRING 
1690: ST_TO_ADDR
// hc_gallery :=  ;
1691: LD_ADDR_OWVAR 33
1695: PUSH
1696: LD_STRING 
1698: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1699: LD_INT 0
1701: PPUSH
1702: LD_INT 7
1704: PPUSH
1705: LD_INT 9
1707: PPUSH
1708: CALL_OW 12
1712: PPUSH
1713: CALL_OW 383
// un := CreateHuman ;
1717: LD_ADDR_VAR 0 7
1721: PUSH
1722: CALL_OW 44
1726: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1727: LD_VAR 0 7
1731: PPUSH
1732: LD_VAR 0 2
1736: PPUSH
1737: CALL_OW 52
// end ; end else
1741: GO 1917
// begin if others11 then
1743: LD_EXP 14
1747: IFFALSE 1829
// begin if spawnMode = 1 then
1749: LD_VAR 0 3
1753: PUSH
1754: LD_INT 1
1756: EQUAL
1757: IFFALSE 1791
// begin repeat wait ( 1 ) ;
1759: LD_INT 1
1761: PPUSH
1762: CALL_OW 67
// until PlaceUnitArea ( others11 [ 1 ] , area , false ) ;
1766: LD_EXP 14
1770: PUSH
1771: LD_INT 1
1773: ARRAY
1774: PPUSH
1775: LD_VAR 0 1
1779: PPUSH
1780: LD_INT 0
1782: PPUSH
1783: CALL_OW 49
1787: IFFALSE 1759
// end else
1789: GO 1809
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1791: LD_EXP 14
1795: PUSH
1796: LD_INT 1
1798: ARRAY
1799: PPUSH
1800: LD_VAR 0 2
1804: PPUSH
1805: CALL_OW 52
// others11 := Delete ( others11 , 1 ) ;
1809: LD_ADDR_EXP 14
1813: PUSH
1814: LD_EXP 14
1818: PPUSH
1819: LD_INT 1
1821: PPUSH
1822: CALL_OW 3
1826: ST_TO_ADDR
// end else
1827: GO 1917
// begin hc_name :=  ;
1829: LD_ADDR_OWVAR 26
1833: PUSH
1834: LD_STRING 
1836: ST_TO_ADDR
// hc_gallery :=  ;
1837: LD_ADDR_OWVAR 33
1841: PUSH
1842: LD_STRING 
1844: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1845: LD_INT 0
1847: PPUSH
1848: LD_INT 1
1850: PUSH
1851: LD_INT 2
1853: PUSH
1854: LD_INT 3
1856: PUSH
1857: LD_INT 4
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: LIST
1864: LIST
1865: PUSH
1866: LD_INT 1
1868: PPUSH
1869: LD_INT 4
1871: PPUSH
1872: CALL_OW 12
1876: ARRAY
1877: PPUSH
1878: LD_INT 7
1880: PPUSH
1881: LD_INT 9
1883: PPUSH
1884: CALL_OW 12
1888: PPUSH
1889: CALL_OW 380
// un := CreateHuman ;
1893: LD_ADDR_VAR 0 7
1897: PUSH
1898: CALL_OW 44
1902: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1903: LD_VAR 0 7
1907: PPUSH
1908: LD_VAR 0 2
1912: PPUSH
1913: CALL_OW 52
// end ; end ; end ;
1917: LD_VAR 0 5
1921: RET
// export function PrepareVehicles ; var veh ; begin
1922: LD_INT 0
1924: PPUSH
1925: PPUSH
// uc_side := 1 ;
1926: LD_ADDR_OWVAR 20
1930: PUSH
1931: LD_INT 1
1933: ST_TO_ADDR
// uc_nation := 1 ;
1934: LD_ADDR_OWVAR 21
1938: PUSH
1939: LD_INT 1
1941: ST_TO_ADDR
// vc_chassis := us_medium_tracked ;
1942: LD_ADDR_OWVAR 37
1946: PUSH
1947: LD_INT 3
1949: ST_TO_ADDR
// vc_engine := engine_siberite ;
1950: LD_ADDR_OWVAR 39
1954: PUSH
1955: LD_INT 3
1957: ST_TO_ADDR
// vc_control := control_computer ;
1958: LD_ADDR_OWVAR 38
1962: PUSH
1963: LD_INT 3
1965: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1966: LD_ADDR_OWVAR 40
1970: PUSH
1971: LD_INT 4
1973: ST_TO_ADDR
// veh := CreateVehicle ;
1974: LD_ADDR_VAR 0 2
1978: PUSH
1979: CALL_OW 45
1983: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
1984: LD_VAR 0 2
1988: PPUSH
1989: LD_INT 4
1991: PPUSH
1992: CALL_OW 233
// repeat wait ( 1 ) ;
1996: LD_INT 1
1998: PPUSH
1999: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2003: LD_VAR 0 2
2007: PPUSH
2008: LD_INT 4
2010: PPUSH
2011: LD_INT 0
2013: PPUSH
2014: CALL_OW 49
2018: IFFALSE 1996
// vc_weapon := us_double_gun ;
2020: LD_ADDR_OWVAR 40
2024: PUSH
2025: LD_INT 5
2027: ST_TO_ADDR
// vc_control := control_manual ;
2028: LD_ADDR_OWVAR 38
2032: PUSH
2033: LD_INT 1
2035: ST_TO_ADDR
// veh := CreateVehicle ;
2036: LD_ADDR_VAR 0 2
2040: PUSH
2041: CALL_OW 45
2045: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2046: LD_VAR 0 2
2050: PPUSH
2051: LD_INT 4
2053: PPUSH
2054: CALL_OW 233
// repeat wait ( 3 ) ;
2058: LD_INT 3
2060: PPUSH
2061: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2065: LD_VAR 0 2
2069: PPUSH
2070: LD_INT 4
2072: PPUSH
2073: LD_INT 0
2075: PPUSH
2076: CALL_OW 49
2080: IFFALSE 2058
// vc_weapon := us_radar ;
2082: LD_ADDR_OWVAR 40
2086: PUSH
2087: LD_INT 11
2089: ST_TO_ADDR
// vc_control := control_computer ;
2090: LD_ADDR_OWVAR 38
2094: PUSH
2095: LD_INT 3
2097: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2098: LD_ADDR_OWVAR 37
2102: PUSH
2103: LD_INT 2
2105: ST_TO_ADDR
// veh := CreateVehicle ;
2106: LD_ADDR_VAR 0 2
2110: PUSH
2111: CALL_OW 45
2115: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2116: LD_VAR 0 2
2120: PPUSH
2121: LD_INT 4
2123: PPUSH
2124: CALL_OW 233
// repeat wait ( 1 ) ;
2128: LD_INT 1
2130: PPUSH
2131: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2135: LD_VAR 0 2
2139: PPUSH
2140: LD_INT 4
2142: PPUSH
2143: LD_INT 0
2145: PPUSH
2146: CALL_OW 49
2150: IFFALSE 2128
// vc_weapon := us_double_gun ;
2152: LD_ADDR_OWVAR 40
2156: PUSH
2157: LD_INT 5
2159: ST_TO_ADDR
// veh := CreateVehicle ;
2160: LD_ADDR_VAR 0 2
2164: PUSH
2165: CALL_OW 45
2169: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2170: LD_VAR 0 2
2174: PPUSH
2175: LD_INT 4
2177: PPUSH
2178: CALL_OW 233
// repeat wait ( 1 ) ;
2182: LD_INT 1
2184: PPUSH
2185: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2189: LD_VAR 0 2
2193: PPUSH
2194: LD_INT 4
2196: PPUSH
2197: LD_INT 0
2199: PPUSH
2200: CALL_OW 49
2204: IFFALSE 2182
// end ;
2206: LD_VAR 0 1
2210: RET
// export function PowellSupport1 ; var veh , un ; begin
2211: LD_INT 0
2213: PPUSH
2214: PPUSH
2215: PPUSH
// uc_side := 1 ;
2216: LD_ADDR_OWVAR 20
2220: PUSH
2221: LD_INT 1
2223: ST_TO_ADDR
// uc_nation := 1 ;
2224: LD_ADDR_OWVAR 21
2228: PUSH
2229: LD_INT 1
2231: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) then
2232: LD_STRING 11_Brown
2234: PPUSH
2235: CALL_OW 28
2239: IFFALSE 2292
// begin Brown := PrepareUnit ( Brown , ( not debugMode ) , 11_ ) ;
2241: LD_ADDR_EXP 7
2245: PUSH
2246: LD_STRING Brown
2248: PPUSH
2249: LD_EXP 41
2253: NOT
2254: PPUSH
2255: LD_STRING 11_
2257: PPUSH
2258: CALL 41446 0 3
2262: ST_TO_ADDR
// SetClass ( Brown , class_engineer ) ;
2263: LD_EXP 7
2267: PPUSH
2268: LD_INT 2
2270: PPUSH
2271: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
2275: LD_EXP 7
2279: PPUSH
2280: LD_INT 4
2282: PPUSH
2283: LD_INT 0
2285: PPUSH
2286: CALL_OW 49
// end else
2290: GO 2308
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2292: LD_INT 4
2294: PPUSH
2295: LD_INT 0
2297: PPUSH
2298: LD_INT 1
2300: PPUSH
2301: LD_INT 0
2303: PPUSH
2304: CALL 1474 0 4
// if TestCharacters ( 11_Gary ) then
2308: LD_STRING 11_Gary
2310: PPUSH
2311: CALL_OW 28
2315: IFFALSE 2368
// begin Gary := PrepareUnit ( Gary , ( not debugMode ) , 11_ ) ;
2317: LD_ADDR_EXP 11
2321: PUSH
2322: LD_STRING Gary
2324: PPUSH
2325: LD_EXP 41
2329: NOT
2330: PPUSH
2331: LD_STRING 11_
2333: PPUSH
2334: CALL 41446 0 3
2338: ST_TO_ADDR
// SetClass ( Gary , class_engineer ) ;
2339: LD_EXP 11
2343: PPUSH
2344: LD_INT 2
2346: PPUSH
2347: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2351: LD_EXP 11
2355: PPUSH
2356: LD_INT 4
2358: PPUSH
2359: LD_INT 0
2361: PPUSH
2362: CALL_OW 49
// end else
2366: GO 2384
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2368: LD_INT 4
2370: PPUSH
2371: LD_INT 0
2373: PPUSH
2374: LD_INT 1
2376: PPUSH
2377: LD_INT 0
2379: PPUSH
2380: CALL 1474 0 4
// vc_chassis := us_medium_tracked ;
2384: LD_ADDR_OWVAR 37
2388: PUSH
2389: LD_INT 3
2391: ST_TO_ADDR
// vc_engine := engine_siberite ;
2392: LD_ADDR_OWVAR 39
2396: PUSH
2397: LD_INT 3
2399: ST_TO_ADDR
// vc_control := control_manual ;
2400: LD_ADDR_OWVAR 38
2404: PUSH
2405: LD_INT 1
2407: ST_TO_ADDR
// vc_weapon := us_crane ;
2408: LD_ADDR_OWVAR 40
2412: PUSH
2413: LD_INT 13
2415: ST_TO_ADDR
// veh := CreateVehicle ;
2416: LD_ADDR_VAR 0 2
2420: PUSH
2421: CALL_OW 45
2425: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2426: LD_VAR 0 2
2430: PPUSH
2431: LD_INT 4
2433: PPUSH
2434: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2438: LD_VAR 0 2
2442: PPUSH
2443: LD_INT 4
2445: PPUSH
2446: LD_INT 0
2448: PPUSH
2449: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2453: LD_INT 4
2455: PPUSH
2456: LD_VAR 0 2
2460: PPUSH
2461: LD_INT 2
2463: PPUSH
2464: LD_INT 1
2466: PPUSH
2467: CALL 1474 0 4
// vc_weapon := us_laser ;
2471: LD_ADDR_OWVAR 40
2475: PUSH
2476: LD_INT 9
2478: ST_TO_ADDR
// veh := CreateVehicle ;
2479: LD_ADDR_VAR 0 2
2483: PUSH
2484: CALL_OW 45
2488: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2489: LD_VAR 0 2
2493: PPUSH
2494: LD_INT 4
2496: PPUSH
2497: CALL_OW 233
// repeat wait ( 3 ) ;
2501: LD_INT 3
2503: PPUSH
2504: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2508: LD_VAR 0 2
2512: PPUSH
2513: LD_INT 4
2515: PPUSH
2516: LD_INT 0
2518: PPUSH
2519: CALL_OW 49
2523: IFFALSE 2501
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2525: LD_INT 4
2527: PPUSH
2528: LD_VAR 0 2
2532: PPUSH
2533: LD_INT 2
2535: PPUSH
2536: LD_INT 1
2538: PPUSH
2539: CALL 1474 0 4
// vc_control := control_computer ;
2543: LD_ADDR_OWVAR 38
2547: PUSH
2548: LD_INT 3
2550: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2551: LD_ADDR_OWVAR 40
2555: PUSH
2556: LD_INT 12
2558: ST_TO_ADDR
// veh := CreateVehicle ;
2559: LD_ADDR_VAR 0 2
2563: PUSH
2564: CALL_OW 45
2568: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2569: LD_VAR 0 2
2573: PPUSH
2574: LD_INT 17
2576: PPUSH
2577: CALL_OW 109
// SetDir ( veh , 4 ) ;
2581: LD_VAR 0 2
2585: PPUSH
2586: LD_INT 4
2588: PPUSH
2589: CALL_OW 233
// repeat wait ( 1 ) ;
2593: LD_INT 1
2595: PPUSH
2596: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2600: LD_VAR 0 2
2604: PPUSH
2605: LD_INT 4
2607: PPUSH
2608: LD_INT 0
2610: PPUSH
2611: CALL_OW 49
2615: IFFALSE 2593
// AddCargo ( veh , mat_siberit , 100 ) ;
2617: LD_VAR 0 2
2621: PPUSH
2622: LD_INT 3
2624: PPUSH
2625: LD_INT 100
2627: PPUSH
2628: CALL_OW 291
// veh := CreateVehicle ;
2632: LD_ADDR_VAR 0 2
2636: PUSH
2637: CALL_OW 45
2641: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2642: LD_VAR 0 2
2646: PPUSH
2647: LD_INT 17
2649: PPUSH
2650: CALL_OW 109
// SetDir ( veh , 4 ) ;
2654: LD_VAR 0 2
2658: PPUSH
2659: LD_INT 4
2661: PPUSH
2662: CALL_OW 233
// repeat wait ( 1 ) ;
2666: LD_INT 1
2668: PPUSH
2669: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2673: LD_VAR 0 2
2677: PPUSH
2678: LD_INT 4
2680: PPUSH
2681: LD_INT 0
2683: PPUSH
2684: CALL_OW 49
2688: IFFALSE 2666
// AddCargo ( veh , mat_siberit , 20 ) ;
2690: LD_VAR 0 2
2694: PPUSH
2695: LD_INT 3
2697: PPUSH
2698: LD_INT 20
2700: PPUSH
2701: CALL_OW 291
// AddCargo ( veh , mat_cans , 80 ) ;
2705: LD_VAR 0 2
2709: PPUSH
2710: LD_INT 1
2712: PPUSH
2713: LD_INT 80
2715: PPUSH
2716: CALL_OW 291
// end ;
2720: LD_VAR 0 1
2724: RET
// export function PowellSupport2 ; var veh , un ; begin
2725: LD_INT 0
2727: PPUSH
2728: PPUSH
2729: PPUSH
// uc_side := 1 ;
2730: LD_ADDR_OWVAR 20
2734: PUSH
2735: LD_INT 1
2737: ST_TO_ADDR
// uc_nation := 1 ;
2738: LD_ADDR_OWVAR 21
2742: PUSH
2743: LD_INT 1
2745: ST_TO_ADDR
// vc_engine := engine_siberite ;
2746: LD_ADDR_OWVAR 39
2750: PUSH
2751: LD_INT 3
2753: ST_TO_ADDR
// vc_control := control_computer ;
2754: LD_ADDR_OWVAR 38
2758: PUSH
2759: LD_INT 3
2761: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2762: LD_ADDR_OWVAR 37
2766: PUSH
2767: LD_INT 2
2769: ST_TO_ADDR
// vc_weapon := us_double_gun ;
2770: LD_ADDR_OWVAR 40
2774: PUSH
2775: LD_INT 5
2777: ST_TO_ADDR
// veh := CreateVehicle ;
2778: LD_ADDR_VAR 0 2
2782: PUSH
2783: CALL_OW 45
2787: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2788: LD_VAR 0 2
2792: PPUSH
2793: LD_INT 4
2795: PPUSH
2796: CALL_OW 233
// repeat wait ( 1 ) ;
2800: LD_INT 1
2802: PPUSH
2803: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2807: LD_VAR 0 2
2811: PPUSH
2812: LD_INT 4
2814: PPUSH
2815: LD_INT 0
2817: PPUSH
2818: CALL_OW 49
2822: IFFALSE 2800
// vc_chassis := us_heavy_tracked ;
2824: LD_ADDR_OWVAR 37
2828: PUSH
2829: LD_INT 4
2831: ST_TO_ADDR
// vc_engine := engine_siberite ;
2832: LD_ADDR_OWVAR 39
2836: PUSH
2837: LD_INT 3
2839: ST_TO_ADDR
// vc_control := control_manual ;
2840: LD_ADDR_OWVAR 38
2844: PUSH
2845: LD_INT 1
2847: ST_TO_ADDR
// vc_weapon := us_heavy_gun ;
2848: LD_ADDR_OWVAR 40
2852: PUSH
2853: LD_INT 6
2855: ST_TO_ADDR
// veh := CreateVehicle ;
2856: LD_ADDR_VAR 0 2
2860: PUSH
2861: CALL_OW 45
2865: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2866: LD_VAR 0 2
2870: PPUSH
2871: LD_INT 4
2873: PPUSH
2874: CALL_OW 233
// repeat wait ( 1 ) ;
2878: LD_INT 1
2880: PPUSH
2881: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2885: LD_VAR 0 2
2889: PPUSH
2890: LD_INT 4
2892: PPUSH
2893: LD_INT 0
2895: PPUSH
2896: CALL_OW 49
2900: IFFALSE 2878
// if TestCharacters ( 11_Bobby ) then
2902: LD_STRING 11_Bobby
2904: PPUSH
2905: CALL_OW 28
2909: IFFALSE 2961
// begin Bobby := PrepareUnit ( Bobby , ( not debugMode ) , 11_ ) ;
2911: LD_ADDR_EXP 4
2915: PUSH
2916: LD_STRING Bobby
2918: PPUSH
2919: LD_EXP 41
2923: NOT
2924: PPUSH
2925: LD_STRING 11_
2927: PPUSH
2928: CALL 41446 0 3
2932: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2933: LD_EXP 4
2937: PPUSH
2938: LD_INT 3
2940: PPUSH
2941: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2945: LD_EXP 4
2949: PPUSH
2950: LD_VAR 0 2
2954: PPUSH
2955: CALL_OW 52
// end else
2959: GO 2979
// PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2961: LD_INT 0
2963: PPUSH
2964: LD_VAR 0 2
2968: PPUSH
2969: LD_INT 2
2971: PPUSH
2972: LD_INT 0
2974: PPUSH
2975: CALL 1474 0 4
// if TestCharacters ( 11_Houten ) then
2979: LD_STRING 11_Houten
2981: PPUSH
2982: CALL_OW 28
2986: IFFALSE 3048
// begin Houten := PrepareUnit ( Houten , ( not debugMode ) , 11_ ) ;
2988: LD_ADDR_EXP 9
2992: PUSH
2993: LD_STRING Houten
2995: PPUSH
2996: LD_EXP 41
3000: NOT
3001: PPUSH
3002: LD_STRING 11_
3004: PPUSH
3005: CALL 41446 0 3
3009: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
3010: LD_EXP 9
3014: PPUSH
3015: LD_INT 1
3017: PPUSH
3018: CALL_OW 336
// repeat wait ( 1 ) ;
3022: LD_INT 1
3024: PPUSH
3025: CALL_OW 67
// until PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
3029: LD_EXP 9
3033: PPUSH
3034: LD_INT 4
3036: PPUSH
3037: LD_INT 0
3039: PPUSH
3040: CALL_OW 49
3044: IFFALSE 3022
// end else
3046: GO 3064
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3048: LD_INT 4
3050: PPUSH
3051: LD_INT 0
3053: PPUSH
3054: LD_INT 1
3056: PPUSH
3057: LD_INT 0
3059: PPUSH
3060: CALL 1474 0 4
// vc_chassis := us_medium_wheeled ;
3064: LD_ADDR_OWVAR 37
3068: PUSH
3069: LD_INT 2
3071: ST_TO_ADDR
// vc_control := control_computer ;
3072: LD_ADDR_OWVAR 38
3076: PUSH
3077: LD_INT 3
3079: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
3080: LD_ADDR_OWVAR 40
3084: PUSH
3085: LD_INT 12
3087: ST_TO_ADDR
// veh := CreateVehicle ;
3088: LD_ADDR_VAR 0 2
3092: PUSH
3093: CALL_OW 45
3097: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3098: LD_VAR 0 2
3102: PPUSH
3103: LD_INT 4
3105: PPUSH
3106: CALL_OW 233
// SetTag ( veh , 17 ) ;
3110: LD_VAR 0 2
3114: PPUSH
3115: LD_INT 17
3117: PPUSH
3118: CALL_OW 109
// AddCargo ( veh , mat_cans , 100 ) ;
3122: LD_VAR 0 2
3126: PPUSH
3127: LD_INT 1
3129: PPUSH
3130: LD_INT 100
3132: PPUSH
3133: CALL_OW 291
// veh := CreateVehicle ;
3137: LD_ADDR_VAR 0 2
3141: PUSH
3142: CALL_OW 45
3146: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3147: LD_VAR 0 2
3151: PPUSH
3152: LD_INT 4
3154: PPUSH
3155: CALL_OW 233
// SetTag ( veh , 17 ) ;
3159: LD_VAR 0 2
3163: PPUSH
3164: LD_INT 17
3166: PPUSH
3167: CALL_OW 109
// repeat wait ( 1 ) ;
3171: LD_INT 1
3173: PPUSH
3174: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
3178: LD_VAR 0 2
3182: PPUSH
3183: LD_INT 4
3185: PPUSH
3186: LD_INT 0
3188: PPUSH
3189: CALL_OW 49
3193: IFFALSE 3171
// AddCargo ( veh , mat_cans , 100 ) ;
3195: LD_VAR 0 2
3199: PPUSH
3200: LD_INT 1
3202: PPUSH
3203: LD_INT 100
3205: PPUSH
3206: CALL_OW 291
// veh := CreateVehicle ;
3210: LD_ADDR_VAR 0 2
3214: PUSH
3215: CALL_OW 45
3219: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3220: LD_VAR 0 2
3224: PPUSH
3225: LD_INT 4
3227: PPUSH
3228: CALL_OW 233
// SetTag ( veh , 17 ) ;
3232: LD_VAR 0 2
3236: PPUSH
3237: LD_INT 17
3239: PPUSH
3240: CALL_OW 109
// repeat wait ( 1 ) ;
3244: LD_INT 1
3246: PPUSH
3247: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
3251: LD_VAR 0 2
3255: PPUSH
3256: LD_INT 4
3258: PPUSH
3259: LD_INT 0
3261: PPUSH
3262: CALL_OW 49
3266: IFFALSE 3244
// if kurtStatus then
3268: LD_EXP 19
3272: IFFALSE 3306
// begin AddCargo ( veh , mat_siberit , 60 ) ;
3274: LD_VAR 0 2
3278: PPUSH
3279: LD_INT 3
3281: PPUSH
3282: LD_INT 60
3284: PPUSH
3285: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
3289: LD_VAR 0 2
3293: PPUSH
3294: LD_INT 1
3296: PPUSH
3297: LD_INT 40
3299: PPUSH
3300: CALL_OW 291
// end else
3304: GO 3321
// AddCargo ( veh , mat_cans , 100 ) ;
3306: LD_VAR 0 2
3310: PPUSH
3311: LD_INT 1
3313: PPUSH
3314: LD_INT 100
3316: PPUSH
3317: CALL_OW 291
// veh := CreateVehicle ;
3321: LD_ADDR_VAR 0 2
3325: PUSH
3326: CALL_OW 45
3330: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3331: LD_VAR 0 2
3335: PPUSH
3336: LD_INT 4
3338: PPUSH
3339: CALL_OW 233
// SetTag ( veh , 17 ) ;
3343: LD_VAR 0 2
3347: PPUSH
3348: LD_INT 17
3350: PPUSH
3351: CALL_OW 109
// repeat wait ( 1 ) ;
3355: LD_INT 1
3357: PPUSH
3358: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn , false ) ;
3362: LD_VAR 0 2
3366: PPUSH
3367: LD_INT 4
3369: PPUSH
3370: LD_INT 0
3372: PPUSH
3373: CALL_OW 49
3377: IFFALSE 3355
// AddCargo ( veh , mat_oil , 60 ) ;
3379: LD_VAR 0 2
3383: PPUSH
3384: LD_INT 2
3386: PPUSH
3387: LD_INT 60
3389: PPUSH
3390: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
3394: LD_VAR 0 2
3398: PPUSH
3399: LD_INT 1
3401: PPUSH
3402: LD_INT 40
3404: PPUSH
3405: CALL_OW 291
// end ;
3409: LD_VAR 0 1
3413: RET
// export function PowellSupport3 ; var i , cargo ; begin
3414: LD_INT 0
3416: PPUSH
3417: PPUSH
3418: PPUSH
// uc_side := 1 ;
3419: LD_ADDR_OWVAR 20
3423: PUSH
3424: LD_INT 1
3426: ST_TO_ADDR
// uc_nation := 1 ;
3427: LD_ADDR_OWVAR 21
3431: PUSH
3432: LD_INT 1
3434: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3435: LD_INT 4
3437: PPUSH
3438: LD_INT 0
3440: PPUSH
3441: LD_INT 1
3443: PPUSH
3444: LD_INT 0
3446: PPUSH
3447: CALL 1474 0 4
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3451: LD_INT 4
3453: PPUSH
3454: LD_INT 0
3456: PPUSH
3457: LD_INT 1
3459: PPUSH
3460: LD_INT 0
3462: PPUSH
3463: CALL 1474 0 4
// for i := 1 to 2 do
3467: LD_ADDR_VAR 0 2
3471: PUSH
3472: DOUBLE
3473: LD_INT 1
3475: DEC
3476: ST_TO_ADDR
3477: LD_INT 2
3479: PUSH
3480: FOR_TO
3481: IFFALSE 3590
// begin vc_chassis := us_medium_wheeled ;
3483: LD_ADDR_OWVAR 37
3487: PUSH
3488: LD_INT 2
3490: ST_TO_ADDR
// vc_engine := engine_siberite ;
3491: LD_ADDR_OWVAR 39
3495: PUSH
3496: LD_INT 3
3498: ST_TO_ADDR
// vc_control = control_computer ;
3499: LD_ADDR_OWVAR 38
3503: PUSH
3504: LD_INT 3
3506: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
3507: LD_ADDR_OWVAR 40
3511: PUSH
3512: LD_INT 12
3514: ST_TO_ADDR
// cargo := CreateVehicle ;
3515: LD_ADDR_VAR 0 3
3519: PUSH
3520: CALL_OW 45
3524: ST_TO_ADDR
// SetDir ( cargo , 4 ) ;
3525: LD_VAR 0 3
3529: PPUSH
3530: LD_INT 4
3532: PPUSH
3533: CALL_OW 233
// SetTag ( cargo , 17 ) ;
3537: LD_VAR 0 3
3541: PPUSH
3542: LD_INT 17
3544: PPUSH
3545: CALL_OW 109
// repeat wait ( 1 ) ;
3549: LD_INT 1
3551: PPUSH
3552: CALL_OW 67
// until PlaceUnitArea ( cargo , PlayerSpawn , false ) ;
3556: LD_VAR 0 3
3560: PPUSH
3561: LD_INT 4
3563: PPUSH
3564: LD_INT 0
3566: PPUSH
3567: CALL_OW 49
3571: IFFALSE 3549
// AddCargo ( cargo , mat_cans , 100 ) ;
3573: LD_VAR 0 3
3577: PPUSH
3578: LD_INT 1
3580: PPUSH
3581: LD_INT 100
3583: PPUSH
3584: CALL_OW 291
// end ;
3588: GO 3480
3590: POP
3591: POP
// end ; end_of_file
3592: LD_VAR 0 1
3596: RET
// export function PrepareRussian ; begin
3597: LD_INT 0
3599: PPUSH
// SetBName ( rueastdepot , ryutin ) ;
3600: LD_INT 4
3602: PPUSH
3603: LD_STRING ryutin
3605: PPUSH
3606: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
3610: LD_INT 6
3612: PPUSH
3613: LD_STRING yegorov
3615: PPUSH
3616: CALL_OW 500
// PrepareDifficulty ;
3620: CALL 13260 0 0
// PrepareRussianCommander ;
3624: CALL 3645 0 0
// PrepareWestBase ;
3628: CALL 4370 0 0
// PrepareEastBase ;
3632: CALL 3724 0 0
// PrepareOtherRussians ;
3636: CALL 4596 0 0
// end ;
3640: LD_VAR 0 1
3644: RET
// export function PrepareRussianCommander ; begin
3645: LD_INT 0
3647: PPUSH
// uc_side := 3 ;
3648: LD_ADDR_OWVAR 20
3652: PUSH
3653: LD_INT 3
3655: ST_TO_ADDR
// Davidov := PrepareUnit ( Davidov , false ,  ) ;
3656: LD_ADDR_EXP 16
3660: PUSH
3661: LD_STRING Davidov
3663: PPUSH
3664: LD_INT 0
3666: PPUSH
3667: LD_STRING 
3669: PPUSH
3670: CALL 41446 0 3
3674: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3675: LD_EXP 16
3679: PPUSH
3680: LD_INT 3
3682: PPUSH
3683: CALL_OW 52
// RuScientists := Join ( RuScientists , Davidov ) ;
3687: LD_ADDR_EXP 27
3691: PUSH
3692: LD_EXP 27
3696: PPUSH
3697: LD_EXP 16
3701: PPUSH
3702: CALL 79578 0 2
3706: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3707: LD_EXP 27
3711: PPUSH
3712: LD_INT 4
3714: PPUSH
3715: CALL_OW 336
// end ;
3719: LD_VAR 0 1
3723: RET
// export function PrepareEastBase ; var i , un ; begin
3724: LD_INT 0
3726: PPUSH
3727: PPUSH
3728: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , [ 2 , 2 , 3 , 3 ] [ Difficulty ] ) ;
3729: LD_INT 3
3731: PPUSH
3732: LD_INT 3
3734: PPUSH
3735: LD_INT 121
3737: PPUSH
3738: LD_EXP 29
3742: PPUSH
3743: LD_EXP 30
3747: PPUSH
3748: CALL_OW 12
3752: PPUSH
3753: LD_INT 1
3755: PPUSH
3756: LD_INT 2
3758: PUSH
3759: LD_INT 2
3761: PUSH
3762: LD_INT 3
3764: PUSH
3765: LD_INT 3
3767: PUSH
3768: EMPTY
3769: LIST
3770: LIST
3771: LIST
3772: LIST
3773: PUSH
3774: LD_OWVAR 67
3778: ARRAY
3779: PPUSH
3780: CALL 13579 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
3784: LD_INT 3
3786: PPUSH
3787: LD_INT 3
3789: PPUSH
3790: LD_INT 121
3792: PPUSH
3793: LD_EXP 29
3797: PPUSH
3798: LD_EXP 30
3802: PPUSH
3803: CALL_OW 12
3807: PPUSH
3808: LD_INT 9
3810: PPUSH
3811: LD_INT 1
3813: PUSH
3814: LD_INT 2
3816: PUSH
3817: LD_INT 3
3819: PUSH
3820: LD_INT 3
3822: PUSH
3823: EMPTY
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: PUSH
3829: LD_OWVAR 67
3833: ARRAY
3834: PPUSH
3835: CALL 13579 0 6
// RespawnInside ( 3 , 3 , rubar3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , [ 2 , 3 , 4 , 5 ] [ Difficulty ] ) ;
3839: LD_INT 3
3841: PPUSH
3842: LD_INT 3
3844: PPUSH
3845: LD_INT 226
3847: PPUSH
3848: LD_EXP 29
3852: PPUSH
3853: LD_EXP 30
3857: PPUSH
3858: CALL_OW 12
3862: PPUSH
3863: LD_INT 9
3865: PPUSH
3866: LD_INT 2
3868: PUSH
3869: LD_INT 3
3871: PUSH
3872: LD_INT 4
3874: PUSH
3875: LD_INT 5
3877: PUSH
3878: EMPTY
3879: LIST
3880: LIST
3881: LIST
3882: LIST
3883: PUSH
3884: LD_OWVAR 67
3888: ARRAY
3889: PPUSH
3890: CALL 13579 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3894: LD_INT 3
3896: PPUSH
3897: LD_INT 3
3899: PPUSH
3900: LD_INT 4
3902: PPUSH
3903: LD_EXP 29
3907: PPUSH
3908: LD_EXP 30
3912: PPUSH
3913: CALL_OW 12
3917: PPUSH
3918: LD_INT 2
3920: PPUSH
3921: LD_INT 3
3923: PUSH
3924: LD_INT 4
3926: PUSH
3927: LD_INT 5
3929: PUSH
3930: LD_INT 6
3932: PUSH
3933: EMPTY
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: PUSH
3939: LD_OWVAR 67
3943: ARRAY
3944: PPUSH
3945: CALL 13579 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , [ 4 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3949: LD_INT 3
3951: PPUSH
3952: LD_INT 3
3954: PPUSH
3955: LD_INT 112
3957: PPUSH
3958: LD_EXP 29
3962: PPUSH
3963: LD_EXP 30
3967: PPUSH
3968: CALL_OW 12
3972: PPUSH
3973: LD_INT 3
3975: PPUSH
3976: LD_INT 4
3978: PUSH
3979: LD_INT 4
3981: PUSH
3982: LD_INT 5
3984: PUSH
3985: LD_INT 6
3987: PUSH
3988: EMPTY
3989: LIST
3990: LIST
3991: LIST
3992: LIST
3993: PUSH
3994: LD_OWVAR 67
3998: ARRAY
3999: PPUSH
4000: CALL 13579 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , [ 2 , 3 , 4 , 5 ] [ Difficulty ] ) ;
4004: LD_INT 3
4006: PPUSH
4007: LD_INT 3
4009: PPUSH
4010: LD_INT 47
4012: PPUSH
4013: LD_EXP 29
4017: PPUSH
4018: LD_EXP 30
4022: PPUSH
4023: CALL_OW 12
4027: PPUSH
4028: LD_INT 4
4030: PPUSH
4031: LD_INT 2
4033: PUSH
4034: LD_INT 3
4036: PUSH
4037: LD_INT 4
4039: PUSH
4040: LD_INT 5
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: PUSH
4049: LD_OWVAR 67
4053: ARRAY
4054: PPUSH
4055: CALL 13579 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , [ 2 , 3 , 4 , 5 ] [ Difficulty ] ) ;
4059: LD_INT 3
4061: PPUSH
4062: LD_INT 3
4064: PPUSH
4065: LD_INT 129
4067: PPUSH
4068: LD_EXP 29
4072: PPUSH
4073: LD_EXP 30
4077: PPUSH
4078: CALL_OW 12
4082: PPUSH
4083: LD_INT 4
4085: PPUSH
4086: LD_INT 2
4088: PUSH
4089: LD_INT 3
4091: PUSH
4092: LD_INT 4
4094: PUSH
4095: LD_INT 5
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: PUSH
4104: LD_OWVAR 67
4108: ARRAY
4109: PPUSH
4110: CALL 13579 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , [ 2 , 3 , 4 , 5 ] [ Difficulty ] ) ;
4114: LD_INT 3
4116: PPUSH
4117: LD_INT 3
4119: PPUSH
4120: LD_INT 135
4122: PPUSH
4123: LD_EXP 29
4127: PPUSH
4128: LD_EXP 30
4132: PPUSH
4133: CALL_OW 12
4137: PPUSH
4138: LD_INT 4
4140: PPUSH
4141: LD_INT 2
4143: PUSH
4144: LD_INT 3
4146: PUSH
4147: LD_INT 4
4149: PUSH
4150: LD_INT 5
4152: PUSH
4153: EMPTY
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: PUSH
4159: LD_OWVAR 67
4163: ARRAY
4164: PPUSH
4165: CALL 13579 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
4169: LD_ADDR_VAR 0 2
4173: PUSH
4174: LD_INT 22
4176: PUSH
4177: LD_INT 3
4179: PUSH
4180: EMPTY
4181: LIST
4182: LIST
4183: PUSH
4184: LD_INT 30
4186: PUSH
4187: LD_INT 32
4189: PUSH
4190: EMPTY
4191: LIST
4192: LIST
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PPUSH
4198: CALL_OW 69
4202: PUSH
4203: FOR_IN
4204: IFFALSE 4244
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
4206: LD_INT 3
4208: PPUSH
4209: LD_INT 3
4211: PPUSH
4212: LD_VAR 0 2
4216: PPUSH
4217: LD_EXP 29
4221: PPUSH
4222: LD_EXP 30
4226: PPUSH
4227: CALL_OW 12
4231: PPUSH
4232: LD_INT 1
4234: PPUSH
4235: LD_INT 1
4237: PPUSH
4238: CALL 13579 0 6
4242: GO 4203
4244: POP
4245: POP
// for i := 1 to 5 do
4246: LD_ADDR_VAR 0 2
4250: PUSH
4251: DOUBLE
4252: LD_INT 1
4254: DEC
4255: ST_TO_ADDR
4256: LD_INT 5
4258: PUSH
4259: FOR_TO
4260: IFFALSE 4363
// begin uc_side := 3 ;
4262: LD_ADDR_OWVAR 20
4266: PUSH
4267: LD_INT 3
4269: ST_TO_ADDR
// uc_nation := 3 ;
4270: LD_ADDR_OWVAR 21
4274: PUSH
4275: LD_INT 3
4277: ST_TO_ADDR
// hc_gallery :=  ;
4278: LD_ADDR_OWVAR 33
4282: PUSH
4283: LD_STRING 
4285: ST_TO_ADDR
// hc_name :=  ;
4286: LD_ADDR_OWVAR 26
4290: PUSH
4291: LD_STRING 
4293: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4294: LD_INT 0
4296: PPUSH
4297: LD_INT 4
4299: PPUSH
4300: LD_EXP 29
4304: PPUSH
4305: LD_EXP 30
4309: PPUSH
4310: CALL_OW 12
4314: PPUSH
4315: CALL_OW 380
// un := CreateHuman ;
4319: LD_ADDR_VAR 0 3
4323: PUSH
4324: CALL_OW 44
4328: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
4329: LD_VAR 0 3
4333: PPUSH
4334: LD_INT 3
4336: PPUSH
4337: CALL_OW 52
// RuScientists := Join ( RuScientists , un ) ;
4341: LD_ADDR_EXP 27
4345: PUSH
4346: LD_EXP 27
4350: PPUSH
4351: LD_VAR 0 3
4355: PPUSH
4356: CALL 79578 0 2
4360: ST_TO_ADDR
// end ;
4361: GO 4259
4363: POP
4364: POP
// end ;
4365: LD_VAR 0 1
4369: RET
// export function PrepareWestBase ; var i , un ; begin
4370: LD_INT 0
4372: PPUSH
4373: PPUSH
4374: PPUSH
// if Difficulty = 1 then
4375: LD_OWVAR 67
4379: PUSH
4380: LD_INT 1
4382: EQUAL
4383: IFFALSE 4421
// for i in FilterAllUnits ( [ f_inarea , delBuildingsArea ] ) do
4385: LD_ADDR_VAR 0 2
4389: PUSH
4390: LD_INT 95
4392: PUSH
4393: LD_INT 28
4395: PUSH
4396: EMPTY
4397: LIST
4398: LIST
4399: PPUSH
4400: CALL_OW 69
4404: PUSH
4405: FOR_IN
4406: IFFALSE 4419
// RemoveUnit ( i ) ;
4408: LD_VAR 0 2
4412: PPUSH
4413: CALL_OW 64
4417: GO 4405
4419: POP
4420: POP
// TeleportExit ( ruteleprt , 122 , 145 ) ;
4421: LD_INT 10
4423: PPUSH
4424: LD_INT 122
4426: PPUSH
4427: LD_INT 145
4429: PPUSH
4430: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
4434: LD_INT 137
4436: PPUSH
4437: LD_INT 84
4439: PPUSH
4440: LD_INT 61
4442: PPUSH
4443: CALL_OW 243
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ) ;
4447: LD_INT 3
4449: PPUSH
4450: LD_INT 3
4452: PPUSH
4453: LD_INT 6
4455: PPUSH
4456: LD_EXP 29
4460: PPUSH
4461: LD_EXP 30
4465: PPUSH
4466: CALL_OW 12
4470: PPUSH
4471: LD_INT 2
4473: PPUSH
4474: LD_INT 2
4476: PUSH
4477: LD_INT 3
4479: PUSH
4480: LD_INT 3
4482: PUSH
4483: LD_INT 3
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: PUSH
4492: LD_OWVAR 67
4496: ARRAY
4497: PPUSH
4498: CALL 13579 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
4502: LD_INT 3
4504: PPUSH
4505: LD_INT 3
4507: PPUSH
4508: LD_INT 91
4510: PPUSH
4511: LD_EXP 29
4515: PPUSH
4516: LD_EXP 30
4520: PPUSH
4521: CALL_OW 12
4525: PPUSH
4526: LD_INT 4
4528: PPUSH
4529: LD_INT 3
4531: PPUSH
4532: CALL 13579 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
4536: LD_INT 3
4538: PPUSH
4539: LD_INT 3
4541: PPUSH
4542: LD_INT 21
4544: PPUSH
4545: LD_EXP 29
4549: PPUSH
4550: LD_EXP 30
4554: PPUSH
4555: CALL_OW 12
4559: PPUSH
4560: LD_INT 3
4562: PPUSH
4563: LD_INT 4
4565: PUSH
4566: LD_INT 5
4568: PUSH
4569: LD_INT 6
4571: PUSH
4572: LD_INT 6
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: LIST
4579: LIST
4580: PUSH
4581: LD_OWVAR 67
4585: ARRAY
4586: PPUSH
4587: CALL 13579 0 6
// end ;
4591: LD_VAR 0 1
4595: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
4596: LD_INT 0
4598: PPUSH
4599: PPUSH
4600: PPUSH
4601: PPUSH
// uc_side := 3 ;
4602: LD_ADDR_OWVAR 20
4606: PUSH
4607: LD_INT 3
4609: ST_TO_ADDR
// uc_nation := 3 ;
4610: LD_ADDR_OWVAR 21
4614: PUSH
4615: LD_INT 3
4617: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 5 , 5 ] [ Difficulty ] do
4618: LD_ADDR_VAR 0 2
4622: PUSH
4623: DOUBLE
4624: LD_INT 1
4626: DEC
4627: ST_TO_ADDR
4628: LD_INT 4
4630: PUSH
4631: LD_INT 5
4633: PUSH
4634: LD_INT 5
4636: PUSH
4637: LD_INT 5
4639: PUSH
4640: EMPTY
4641: LIST
4642: LIST
4643: LIST
4644: LIST
4645: PUSH
4646: LD_OWVAR 67
4650: ARRAY
4651: PUSH
4652: FOR_TO
4653: IFFALSE 4723
// begin hc_gallery :=  ;
4655: LD_ADDR_OWVAR 33
4659: PUSH
4660: LD_STRING 
4662: ST_TO_ADDR
// hc_name :=  ;
4663: LD_ADDR_OWVAR 26
4667: PUSH
4668: LD_STRING 
4670: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4671: LD_INT 0
4673: PPUSH
4674: LD_INT 9
4676: PPUSH
4677: LD_EXP 29
4681: PPUSH
4682: LD_EXP 30
4686: PPUSH
4687: CALL_OW 12
4691: PPUSH
4692: CALL_OW 380
// un := CreateHuman ;
4696: LD_ADDR_VAR 0 3
4700: PUSH
4701: CALL_OW 44
4705: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4706: LD_VAR 0 3
4710: PPUSH
4711: LD_INT 8
4713: PPUSH
4714: LD_INT 0
4716: PPUSH
4717: CALL_OW 49
// end ;
4721: GO 4652
4723: POP
4724: POP
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4725: LD_ADDR_VAR 0 2
4729: PUSH
4730: DOUBLE
4731: LD_INT 1
4733: DEC
4734: ST_TO_ADDR
4735: LD_INT 2
4737: PUSH
4738: LD_INT 3
4740: PUSH
4741: LD_INT 4
4743: PUSH
4744: LD_INT 4
4746: PUSH
4747: EMPTY
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: PUSH
4753: LD_OWVAR 67
4757: ARRAY
4758: PUSH
4759: FOR_TO
4760: IFFALSE 4830
// begin hc_gallery :=  ;
4762: LD_ADDR_OWVAR 33
4766: PUSH
4767: LD_STRING 
4769: ST_TO_ADDR
// hc_name :=  ;
4770: LD_ADDR_OWVAR 26
4774: PUSH
4775: LD_STRING 
4777: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4778: LD_INT 0
4780: PPUSH
4781: LD_INT 4
4783: PPUSH
4784: LD_EXP 29
4788: PPUSH
4789: LD_EXP 30
4793: PPUSH
4794: CALL_OW 12
4798: PPUSH
4799: CALL_OW 380
// un := CreateHuman ;
4803: LD_ADDR_VAR 0 3
4807: PUSH
4808: CALL_OW 44
4812: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4813: LD_VAR 0 3
4817: PPUSH
4818: LD_INT 8
4820: PPUSH
4821: LD_INT 0
4823: PPUSH
4824: CALL_OW 49
// end ;
4828: GO 4759
4830: POP
4831: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4832: LD_ADDR_VAR 0 2
4836: PUSH
4837: DOUBLE
4838: LD_INT 1
4840: DEC
4841: ST_TO_ADDR
4842: LD_INT 3
4844: PUSH
4845: LD_INT 4
4847: PUSH
4848: LD_INT 5
4850: PUSH
4851: LD_INT 5
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: PUSH
4860: LD_OWVAR 67
4864: ARRAY
4865: PUSH
4866: FOR_TO
4867: IFFALSE 5084
// begin vc_engine = 3 ;
4869: LD_ADDR_OWVAR 39
4873: PUSH
4874: LD_INT 3
4876: ST_TO_ADDR
// vc_control = 1 ;
4877: LD_ADDR_OWVAR 38
4881: PUSH
4882: LD_INT 1
4884: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ rand ( 1 , 5 ) ] ;
4885: LD_ADDR_OWVAR 40
4889: PUSH
4890: LD_INT 42
4892: PUSH
4893: LD_INT 43
4895: PUSH
4896: LD_INT 44
4898: PUSH
4899: LD_INT 45
4901: PUSH
4902: LD_INT 46
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: LIST
4909: LIST
4910: LIST
4911: PUSH
4912: LD_INT 1
4914: PPUSH
4915: LD_INT 5
4917: PPUSH
4918: CALL_OW 12
4922: ARRAY
4923: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4924: LD_OWVAR 40
4928: PUSH
4929: LD_INT 46
4931: EQUAL
4932: IFFALSE 4944
// vc_chassis := ru_heavy_tracked else
4934: LD_ADDR_OWVAR 37
4938: PUSH
4939: LD_INT 24
4941: ST_TO_ADDR
4942: GO 4971
// vc_chassis := [ ru_medium_tracked , ru_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
4944: LD_ADDR_OWVAR 37
4948: PUSH
4949: LD_INT 22
4951: PUSH
4952: LD_INT 21
4954: PUSH
4955: EMPTY
4956: LIST
4957: LIST
4958: PUSH
4959: LD_INT 1
4961: PPUSH
4962: LD_INT 2
4964: PPUSH
4965: CALL_OW 12
4969: ARRAY
4970: ST_TO_ADDR
// veh := CreateVehicle ;
4971: LD_ADDR_VAR 0 4
4975: PUSH
4976: CALL_OW 45
4980: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4981: LD_VAR 0 4
4985: PPUSH
4986: LD_INT 3
4988: PPUSH
4989: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4993: LD_VAR 0 4
4997: PPUSH
4998: LD_INT 5
5000: PPUSH
5001: LD_INT 0
5003: PPUSH
5004: CALL_OW 49
// hc_gallery :=  ;
5008: LD_ADDR_OWVAR 33
5012: PUSH
5013: LD_STRING 
5015: ST_TO_ADDR
// hc_name :=  ;
5016: LD_ADDR_OWVAR 26
5020: PUSH
5021: LD_STRING 
5023: ST_TO_ADDR
// PrepareHuman ( false , 3 , [ 6 , 7 , 8 , 10 ] [ Difficulty ] ) ;
5024: LD_INT 0
5026: PPUSH
5027: LD_INT 3
5029: PPUSH
5030: LD_INT 6
5032: PUSH
5033: LD_INT 7
5035: PUSH
5036: LD_INT 8
5038: PUSH
5039: LD_INT 10
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: LIST
5046: LIST
5047: PUSH
5048: LD_OWVAR 67
5052: ARRAY
5053: PPUSH
5054: CALL_OW 380
// un = CreateHuman ;
5058: LD_ADDR_VAR 0 3
5062: PUSH
5063: CALL_OW 44
5067: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5068: LD_VAR 0 3
5072: PPUSH
5073: LD_VAR 0 4
5077: PPUSH
5078: CALL_OW 52
// end ;
5082: GO 4866
5084: POP
5085: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
5086: LD_ADDR_VAR 0 2
5090: PUSH
5091: DOUBLE
5092: LD_INT 1
5094: DEC
5095: ST_TO_ADDR
5096: LD_INT 3
5098: PUSH
5099: LD_INT 4
5101: PUSH
5102: LD_INT 5
5104: PUSH
5105: LD_INT 5
5107: PUSH
5108: EMPTY
5109: LIST
5110: LIST
5111: LIST
5112: LIST
5113: PUSH
5114: LD_OWVAR 67
5118: ARRAY
5119: PUSH
5120: FOR_TO
5121: IFFALSE 5268
// begin vc_engine := 3 ;
5123: LD_ADDR_OWVAR 39
5127: PUSH
5128: LD_INT 3
5130: ST_TO_ADDR
// vc_control := 3 ;
5131: LD_ADDR_OWVAR 38
5135: PUSH
5136: LD_INT 3
5138: ST_TO_ADDR
// vc_weapon := [ 42 , 43 , 44 , 45 , 46 , 49 ] [ rand ( 1 , 5 ) ] ;
5139: LD_ADDR_OWVAR 40
5143: PUSH
5144: LD_INT 42
5146: PUSH
5147: LD_INT 43
5149: PUSH
5150: LD_INT 44
5152: PUSH
5153: LD_INT 45
5155: PUSH
5156: LD_INT 46
5158: PUSH
5159: LD_INT 49
5161: PUSH
5162: EMPTY
5163: LIST
5164: LIST
5165: LIST
5166: LIST
5167: LIST
5168: LIST
5169: PUSH
5170: LD_INT 1
5172: PPUSH
5173: LD_INT 5
5175: PPUSH
5176: CALL_OW 12
5180: ARRAY
5181: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
5182: LD_OWVAR 40
5186: PUSH
5187: LD_INT 46
5189: EQUAL
5190: IFFALSE 5202
// vc_chassis := ru_heavy_tracked else
5192: LD_ADDR_OWVAR 37
5196: PUSH
5197: LD_INT 24
5199: ST_TO_ADDR
5200: GO 5229
// vc_chassis := [ ru_medium_tracked , ru_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
5202: LD_ADDR_OWVAR 37
5206: PUSH
5207: LD_INT 22
5209: PUSH
5210: LD_INT 21
5212: PUSH
5213: EMPTY
5214: LIST
5215: LIST
5216: PUSH
5217: LD_INT 1
5219: PPUSH
5220: LD_INT 2
5222: PPUSH
5223: CALL_OW 12
5227: ARRAY
5228: ST_TO_ADDR
// veh := CreateVehicle ;
5229: LD_ADDR_VAR 0 4
5233: PUSH
5234: CALL_OW 45
5238: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
5239: LD_VAR 0 4
5243: PPUSH
5244: LD_INT 3
5246: PPUSH
5247: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
5251: LD_VAR 0 4
5255: PPUSH
5256: LD_INT 6
5258: PPUSH
5259: LD_INT 0
5261: PPUSH
5262: CALL_OW 49
// end ;
5266: GO 5120
5268: POP
5269: POP
// end ; end_of_file
5270: LD_VAR 0 1
5274: RET
// export function PrepareKurt ; begin
5275: LD_INT 0
5277: PPUSH
// uc_side := 8 ;
5278: LD_ADDR_OWVAR 20
5282: PUSH
5283: LD_INT 8
5285: ST_TO_ADDR
// uc_nation := 2 ;
5286: LD_ADDR_OWVAR 21
5290: PUSH
5291: LD_INT 2
5293: ST_TO_ADDR
// vc_chassis := ar_medium_trike ;
5294: LD_ADDR_OWVAR 37
5298: PUSH
5299: LD_INT 13
5301: ST_TO_ADDR
// vc_engine := 1 ;
5302: LD_ADDR_OWVAR 39
5306: PUSH
5307: LD_INT 1
5309: ST_TO_ADDR
// vc_control := 1 ;
5310: LD_ADDR_OWVAR 38
5314: PUSH
5315: LD_INT 1
5317: ST_TO_ADDR
// vc_weapon := 24 ;
5318: LD_ADDR_OWVAR 40
5322: PUSH
5323: LD_INT 24
5325: ST_TO_ADDR
// KurtVeh := CreateVehicle ;
5326: LD_ADDR_EXP 18
5330: PUSH
5331: CALL_OW 45
5335: ST_TO_ADDR
// if kurtStatus > 0 then
5336: LD_EXP 19
5340: PUSH
5341: LD_INT 0
5343: GREATER
5344: IFFALSE 5396
// begin Kurt := PrepareUnit ( Kurt , false ,  ) ;
5346: LD_ADDR_EXP 17
5350: PUSH
5351: LD_STRING Kurt
5353: PPUSH
5354: LD_INT 0
5356: PPUSH
5357: LD_STRING 
5359: PPUSH
5360: CALL 41446 0 3
5364: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
5365: LD_EXP 18
5369: PPUSH
5370: LD_INT 4
5372: PPUSH
5373: LD_INT 0
5375: PPUSH
5376: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
5380: LD_EXP 17
5384: PPUSH
5385: LD_EXP 18
5389: PPUSH
5390: CALL_OW 52
// end else
5394: GO 5473
// begin hc_name :=  ;
5396: LD_ADDR_OWVAR 26
5400: PUSH
5401: LD_STRING 
5403: ST_TO_ADDR
// hc_gallery :=  ;
5404: LD_ADDR_OWVAR 33
5408: PUSH
5409: LD_STRING 
5411: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
5412: LD_INT 1
5414: PPUSH
5415: LD_INT 10
5417: PPUSH
5418: CALL_OW 381
// Kurt := CreateHuman ;
5422: LD_ADDR_EXP 17
5426: PUSH
5427: CALL_OW 44
5431: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
5432: LD_EXP 18
5436: PPUSH
5437: LD_INT 4
5439: PPUSH
5440: LD_INT 0
5442: PPUSH
5443: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
5447: LD_EXP 17
5451: PPUSH
5452: LD_EXP 18
5456: PPUSH
5457: CALL_OW 52
// SaveCharacters ( Kurt , AltKurt ) ;
5461: LD_EXP 17
5465: PPUSH
5466: LD_STRING AltKurt
5468: PPUSH
5469: CALL_OW 38
// end ; end ;
5473: LD_VAR 0 1
5477: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
5478: LD_INT 0
5480: PPUSH
5481: PPUSH
5482: PPUSH
5483: PPUSH
// for i := 1 to 3 do
5484: LD_ADDR_VAR 0 2
5488: PUSH
5489: DOUBLE
5490: LD_INT 1
5492: DEC
5493: ST_TO_ADDR
5494: LD_INT 3
5496: PUSH
5497: FOR_TO
5498: IFFALSE 5621
// begin uc_side := 1 ;
5500: LD_ADDR_OWVAR 20
5504: PUSH
5505: LD_INT 1
5507: ST_TO_ADDR
// uc_nation := 2 ;
5508: LD_ADDR_OWVAR 21
5512: PUSH
5513: LD_INT 2
5515: ST_TO_ADDR
// hc_gallery =  ;
5516: LD_ADDR_OWVAR 33
5520: PUSH
5521: LD_STRING 
5523: ST_TO_ADDR
// hc_name =  ;
5524: LD_ADDR_OWVAR 26
5528: PUSH
5529: LD_STRING 
5531: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
5532: LD_EXP 19
5536: PUSH
5537: LD_INT 0
5539: EQUAL
5540: IFTRUE 5552
5542: PUSH
5543: LD_EXP 19
5547: PUSH
5548: LD_INT 2
5550: EQUAL
5551: OR
5552: IFFALSE 5569
// PrepareHuman ( false , 1 , 6 ) else
5554: LD_INT 0
5556: PPUSH
5557: LD_INT 1
5559: PPUSH
5560: LD_INT 6
5562: PPUSH
5563: CALL_OW 380
5567: GO 5582
// PrepareHuman ( false , 1 , 8 ) ;
5569: LD_INT 0
5571: PPUSH
5572: LD_INT 1
5574: PPUSH
5575: LD_INT 8
5577: PPUSH
5578: CALL_OW 380
// un := CreateHuman ;
5582: LD_ADDR_VAR 0 3
5586: PUSH
5587: CALL_OW 44
5591: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5592: LD_VAR 0 3
5596: PPUSH
5597: LD_INT 4
5599: PPUSH
5600: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
5604: LD_VAR 0 3
5608: PPUSH
5609: LD_INT 4
5611: PPUSH
5612: LD_INT 0
5614: PPUSH
5615: CALL_OW 49
// end ;
5619: GO 5497
5621: POP
5622: POP
// vc_chassis := 14 ;
5623: LD_ADDR_OWVAR 37
5627: PUSH
5628: LD_INT 14
5630: ST_TO_ADDR
// vc_engine := 3 ;
5631: LD_ADDR_OWVAR 39
5635: PUSH
5636: LD_INT 3
5638: ST_TO_ADDR
// vc_control := 1 ;
5639: LD_ADDR_OWVAR 38
5643: PUSH
5644: LD_INT 1
5646: ST_TO_ADDR
// vc_weapon := [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
5647: LD_ADDR_OWVAR 40
5651: PUSH
5652: LD_INT 27
5654: PUSH
5655: LD_INT 26
5657: PUSH
5658: LD_INT 28
5660: PUSH
5661: EMPTY
5662: LIST
5663: LIST
5664: LIST
5665: PUSH
5666: LD_INT 1
5668: PPUSH
5669: LD_INT 3
5671: PPUSH
5672: CALL_OW 12
5676: ARRAY
5677: ST_TO_ADDR
// veh := CreateVehicle ;
5678: LD_ADDR_VAR 0 4
5682: PUSH
5683: CALL_OW 45
5687: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5688: LD_VAR 0 4
5692: PPUSH
5693: LD_INT 4
5695: PPUSH
5696: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5700: LD_VAR 0 4
5704: PPUSH
5705: LD_INT 4
5707: PPUSH
5708: LD_INT 0
5710: PPUSH
5711: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5715: LD_EXP 19
5719: PUSH
5720: LD_INT 0
5722: EQUAL
5723: IFTRUE 5735
5725: PUSH
5726: LD_EXP 19
5730: PUSH
5731: LD_INT 2
5733: EQUAL
5734: OR
5735: IFFALSE 5752
// PrepareHuman ( false , 3 , 6 ) else
5737: LD_INT 0
5739: PPUSH
5740: LD_INT 3
5742: PPUSH
5743: LD_INT 6
5745: PPUSH
5746: CALL_OW 380
5750: GO 5765
// PrepareHuman ( false , 3 , 8 ) ;
5752: LD_INT 0
5754: PPUSH
5755: LD_INT 3
5757: PPUSH
5758: LD_INT 8
5760: PPUSH
5761: CALL_OW 380
// un := CreateHuman ;
5765: LD_ADDR_VAR 0 3
5769: PUSH
5770: CALL_OW 44
5774: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5775: LD_VAR 0 3
5779: PPUSH
5780: LD_VAR 0 4
5784: PPUSH
5785: CALL_OW 52
// vc_chassis := 14 ;
5789: LD_ADDR_OWVAR 37
5793: PUSH
5794: LD_INT 14
5796: ST_TO_ADDR
// vc_engine := 3 ;
5797: LD_ADDR_OWVAR 39
5801: PUSH
5802: LD_INT 3
5804: ST_TO_ADDR
// vc_control := 1 ;
5805: LD_ADDR_OWVAR 38
5809: PUSH
5810: LD_INT 1
5812: ST_TO_ADDR
// vc_weapon := [ 27 , 26 , 28 ] [ rand ( 1 , 3 ) ] ;
5813: LD_ADDR_OWVAR 40
5817: PUSH
5818: LD_INT 27
5820: PUSH
5821: LD_INT 26
5823: PUSH
5824: LD_INT 28
5826: PUSH
5827: EMPTY
5828: LIST
5829: LIST
5830: LIST
5831: PUSH
5832: LD_INT 1
5834: PPUSH
5835: LD_INT 3
5837: PPUSH
5838: CALL_OW 12
5842: ARRAY
5843: ST_TO_ADDR
// veh := CreateVehicle ;
5844: LD_ADDR_VAR 0 4
5848: PUSH
5849: CALL_OW 45
5853: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5854: LD_VAR 0 4
5858: PPUSH
5859: LD_INT 4
5861: PPUSH
5862: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5866: LD_VAR 0 4
5870: PPUSH
5871: LD_INT 4
5873: PPUSH
5874: LD_INT 0
5876: PPUSH
5877: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5881: LD_EXP 19
5885: PUSH
5886: LD_INT 0
5888: EQUAL
5889: IFTRUE 5901
5891: PUSH
5892: LD_EXP 19
5896: PUSH
5897: LD_INT 2
5899: EQUAL
5900: OR
5901: IFFALSE 5918
// PrepareHuman ( false , 4 , 6 ) else
5903: LD_INT 0
5905: PPUSH
5906: LD_INT 4
5908: PPUSH
5909: LD_INT 6
5911: PPUSH
5912: CALL_OW 380
5916: GO 5931
// PrepareHuman ( false , 4 , 8 ) ;
5918: LD_INT 0
5920: PPUSH
5921: LD_INT 4
5923: PPUSH
5924: LD_INT 8
5926: PPUSH
5927: CALL_OW 380
// un := CreateHuman ;
5931: LD_ADDR_VAR 0 3
5935: PUSH
5936: CALL_OW 44
5940: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5941: LD_VAR 0 3
5945: PPUSH
5946: LD_INT 4
5948: PPUSH
5949: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5953: LD_VAR 0 3
5957: PPUSH
5958: LD_VAR 0 4
5962: PPUSH
5963: CALL_OW 52
// vc_chassis := 14 ;
5967: LD_ADDR_OWVAR 37
5971: PUSH
5972: LD_INT 14
5974: ST_TO_ADDR
// vc_engine := 3 ;
5975: LD_ADDR_OWVAR 39
5979: PUSH
5980: LD_INT 3
5982: ST_TO_ADDR
// vc_control := 1 ;
5983: LD_ADDR_OWVAR 38
5987: PUSH
5988: LD_INT 1
5990: ST_TO_ADDR
// vc_weapon := 26 ;
5991: LD_ADDR_OWVAR 40
5995: PUSH
5996: LD_INT 26
5998: ST_TO_ADDR
// veh := CreateVehicle ;
5999: LD_ADDR_VAR 0 4
6003: PUSH
6004: CALL_OW 45
6008: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6009: LD_VAR 0 4
6013: PPUSH
6014: LD_INT 4
6016: PPUSH
6017: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
6021: LD_VAR 0 4
6025: PPUSH
6026: LD_INT 4
6028: PPUSH
6029: LD_INT 0
6031: PPUSH
6032: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
6036: LD_EXP 19
6040: PUSH
6041: LD_INT 0
6043: EQUAL
6044: IFTRUE 6056
6046: PUSH
6047: LD_EXP 19
6051: PUSH
6052: LD_INT 2
6054: EQUAL
6055: OR
6056: IFFALSE 6073
// PrepareHuman ( false , 2 , 4 ) else
6058: LD_INT 0
6060: PPUSH
6061: LD_INT 2
6063: PPUSH
6064: LD_INT 4
6066: PPUSH
6067: CALL_OW 380
6071: GO 6086
// PrepareHuman ( false , 2 , 8 ) ;
6073: LD_INT 0
6075: PPUSH
6076: LD_INT 2
6078: PPUSH
6079: LD_INT 8
6081: PPUSH
6082: CALL_OW 380
// un := CreateHuman ;
6086: LD_ADDR_VAR 0 3
6090: PUSH
6091: CALL_OW 44
6095: ST_TO_ADDR
// SetDir ( un , 4 ) ;
6096: LD_VAR 0 3
6100: PPUSH
6101: LD_INT 4
6103: PPUSH
6104: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
6108: LD_VAR 0 3
6112: PPUSH
6113: LD_VAR 0 4
6117: PPUSH
6118: CALL_OW 52
// end ;
6122: LD_VAR 0 1
6126: RET
// export function PrepareAttackLegion ; var i , un ; begin
6127: LD_INT 0
6129: PPUSH
6130: PPUSH
6131: PPUSH
// for i := 1 to 4 do
6132: LD_ADDR_VAR 0 2
6136: PUSH
6137: DOUBLE
6138: LD_INT 1
6140: DEC
6141: ST_TO_ADDR
6142: LD_INT 4
6144: PUSH
6145: FOR_TO
6146: IFFALSE 6256
// begin uc_side := 8 ;
6148: LD_ADDR_OWVAR 20
6152: PUSH
6153: LD_INT 8
6155: ST_TO_ADDR
// uc_nation := 2 ;
6156: LD_ADDR_OWVAR 21
6160: PUSH
6161: LD_INT 2
6163: ST_TO_ADDR
// hc_gallery :=  ;
6164: LD_ADDR_OWVAR 33
6168: PUSH
6169: LD_STRING 
6171: ST_TO_ADDR
// hc_name :=  ;
6172: LD_ADDR_OWVAR 26
6176: PUSH
6177: LD_STRING 
6179: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
6180: LD_INT 0
6182: PPUSH
6183: LD_INT 1
6185: PUSH
6186: LD_INT 8
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: PUSH
6193: LD_INT 1
6195: PPUSH
6196: LD_INT 2
6198: PPUSH
6199: CALL_OW 12
6203: ARRAY
6204: PPUSH
6205: LD_INT 6
6207: PPUSH
6208: LD_INT 8
6210: PPUSH
6211: CALL_OW 12
6215: PPUSH
6216: CALL_OW 380
// un := CreateHuman ;
6220: LD_ADDR_VAR 0 3
6224: PUSH
6225: CALL_OW 44
6229: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
6230: LD_VAR 0 3
6234: PPUSH
6235: LD_INT 19
6237: PPUSH
6238: LD_INT 0
6240: PPUSH
6241: CALL_OW 49
// ComCrawl ( un ) ;
6245: LD_VAR 0 3
6249: PPUSH
6250: CALL_OW 137
// end ;
6254: GO 6145
6256: POP
6257: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
6258: LD_INT 1
6260: PPUSH
6261: LD_INT 8
6263: PPUSH
6264: LD_INT 2
6266: PPUSH
6267: LD_INT 1
6269: PPUSH
6270: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
6274: LD_INT 20
6276: PPUSH
6277: LD_INT 3
6279: PPUSH
6280: CALL 15444 0 2
// end ; end_of_file
6284: LD_VAR 0 1
6288: RET
// export function Action ; var i , tmp , group ; begin
6289: LD_INT 0
6291: PPUSH
6292: PPUSH
6293: PPUSH
6294: PPUSH
// music_nat := 1 ;
6295: LD_ADDR_OWVAR 71
6299: PUSH
6300: LD_INT 1
6302: ST_TO_ADDR
// group := FilterAllUnits ( [ f_side , 1 ] ) ;
6303: LD_ADDR_VAR 0 4
6307: PUSH
6308: LD_INT 22
6310: PUSH
6311: LD_INT 1
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: PPUSH
6318: CALL_OW 69
6322: ST_TO_ADDR
// tmp := IsInUnit ( JMM ) ;
6323: LD_ADDR_VAR 0 3
6327: PUSH
6328: LD_EXP 1
6332: PPUSH
6333: CALL_OW 310
6337: ST_TO_ADDR
// CenterNowOnUnits ( tmp ) ;
6338: LD_VAR 0 3
6342: PPUSH
6343: CALL_OW 87
// ComMoveXY ( group , 130 , 103 ) ;
6347: LD_VAR 0 4
6351: PPUSH
6352: LD_INT 130
6354: PPUSH
6355: LD_INT 103
6357: PPUSH
6358: CALL_OW 111
// AddComMoveXY ( tmp , 114 , 102 ) ;
6362: LD_VAR 0 3
6366: PPUSH
6367: LD_INT 114
6369: PPUSH
6370: LD_INT 102
6372: PPUSH
6373: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
6377: LD_EXP 1
6381: PPUSH
6382: LD_STRING D1-JMM-1
6384: PPUSH
6385: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
6389: LD_VAR 0 3
6393: PPUSH
6394: CALL_OW 87
// if IsOk ( Donaldson ) then
6398: LD_EXP 3
6402: PPUSH
6403: CALL_OW 302
6407: IFFALSE 6472
// begin Say ( Donaldson , D1-Don-1 ) ;
6409: LD_EXP 3
6413: PPUSH
6414: LD_STRING D1-Don-1
6416: PPUSH
6417: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
6421: LD_VAR 0 3
6425: PPUSH
6426: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
6430: LD_EXP 1
6434: PPUSH
6435: LD_STRING D1-JMM-2
6437: PPUSH
6438: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
6442: LD_VAR 0 3
6446: PPUSH
6447: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
6451: LD_EXP 3
6455: PPUSH
6456: LD_STRING D1-Don-2
6458: PPUSH
6459: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
6463: LD_VAR 0 3
6467: PPUSH
6468: CALL_OW 87
// end ; AddComMoveXY ( group , 110 , 101 ) ;
6472: LD_VAR 0 4
6476: PPUSH
6477: LD_INT 110
6479: PPUSH
6480: LD_INT 101
6482: PPUSH
6483: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
6487: LD_INT 35
6489: PPUSH
6490: CALL_OW 67
// CenterNowOnUnits ( tmp ) ;
6494: LD_VAR 0 3
6498: PPUSH
6499: CALL_OW 87
// until SeeXY ( 1 , 102 , 94 ) ;
6503: LD_INT 1
6505: PPUSH
6506: LD_INT 102
6508: PPUSH
6509: LD_INT 94
6511: PPUSH
6512: CALL_OW 293
6516: IFFALSE 6487
// CenterOnXY ( 102 , 94 ) ;
6518: LD_INT 102
6520: PPUSH
6521: LD_INT 94
6523: PPUSH
6524: CALL_OW 84
// DialogRandom ( UnitFilter ( group , [ f_sex , sex_male ] ) , D1-Sol1-2 ,  ) ;
6528: LD_VAR 0 4
6532: PPUSH
6533: LD_INT 26
6535: PUSH
6536: LD_INT 1
6538: PUSH
6539: EMPTY
6540: LIST
6541: LIST
6542: PPUSH
6543: CALL_OW 72
6547: PPUSH
6548: LD_STRING D1-Sol1-2
6550: PPUSH
6551: LD_STRING 
6553: PPUSH
6554: CALL 13074 0 3
// Say ( JMM , D1-JMM-3 ) ;
6558: LD_EXP 1
6562: PPUSH
6563: LD_STRING D1-JMM-3
6565: PPUSH
6566: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
6570: LD_STRING M1
6572: PPUSH
6573: CALL_OW 337
// for i in group do
6577: LD_ADDR_VAR 0 2
6581: PUSH
6582: LD_VAR 0 4
6586: PUSH
6587: FOR_IN
6588: IFFALSE 6607
// ComMoveXY ( i , 95 , 84 ) ;
6590: LD_VAR 0 2
6594: PPUSH
6595: LD_INT 95
6597: PPUSH
6598: LD_INT 84
6600: PPUSH
6601: CALL_OW 111
6605: GO 6587
6607: POP
6608: POP
// end ;
6609: LD_VAR 0 1
6613: RET
// every 0 0$1 trigger FilterUnitsInArea ( WaterPass , [ f_side , 1 ] ) > 1 do var i , tmp , dec ;
6614: LD_INT 7
6616: PPUSH
6617: LD_INT 22
6619: PUSH
6620: LD_INT 1
6622: PUSH
6623: EMPTY
6624: LIST
6625: LIST
6626: PPUSH
6627: CALL_OW 70
6631: PUSH
6632: LD_INT 1
6634: GREATER
6635: IFFALSE 7321
6637: GO 6639
6639: DISABLE
6640: LD_INT 0
6642: PPUSH
6643: PPUSH
6644: PPUSH
// begin tmp := FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
6645: LD_ADDR_VAR 0 2
6649: PUSH
6650: LD_INT 8
6652: PPUSH
6653: LD_INT 22
6655: PUSH
6656: LD_INT 3
6658: PUSH
6659: EMPTY
6660: LIST
6661: LIST
6662: PUSH
6663: LD_INT 25
6665: PUSH
6666: LD_INT 9
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: PPUSH
6677: CALL_OW 70
6681: ST_TO_ADDR
// ComTimeShift ( tmp , 96 , 85 ) ;
6682: LD_VAR 0 2
6686: PPUSH
6687: LD_INT 96
6689: PPUSH
6690: LD_INT 85
6692: PPUSH
6693: CALL_OW 154
// for i := 1 to 5 do
6697: LD_ADDR_VAR 0 1
6701: PUSH
6702: DOUBLE
6703: LD_INT 1
6705: DEC
6706: ST_TO_ADDR
6707: LD_INT 5
6709: PUSH
6710: FOR_TO
6711: IFFALSE 6730
// AddComTimeShift ( tmp , 96 , 85 ) ;
6713: LD_VAR 0 2
6717: PPUSH
6718: LD_INT 96
6720: PPUSH
6721: LD_INT 85
6723: PPUSH
6724: CALL_OW 214
6728: GO 6710
6730: POP
6731: POP
// wait ( 0 0$2 ) ;
6732: LD_INT 70
6734: PPUSH
6735: CALL_OW 67
// Say ( JMM , D1a-JMM-1 ) ;
6739: LD_EXP 1
6743: PPUSH
6744: LD_STRING D1a-JMM-1
6746: PPUSH
6747: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
6751: LD_EXP 3
6755: PPUSH
6756: LD_STRING D1a-Don-1
6758: PPUSH
6759: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6763: LD_ADDR_VAR 0 1
6767: PUSH
6768: LD_INT 22
6770: PUSH
6771: LD_INT 1
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: PPUSH
6778: CALL_OW 69
6782: PUSH
6783: FOR_IN
6784: IFFALSE 6803
// ComMoveXY ( i , 109 , 102 ) ;
6786: LD_VAR 0 1
6790: PPUSH
6791: LD_INT 109
6793: PPUSH
6794: LD_INT 102
6796: PPUSH
6797: CALL_OW 111
6801: GO 6783
6803: POP
6804: POP
// Say ( JMM , D1a-JMM-2 ) ;
6805: LD_EXP 1
6809: PPUSH
6810: LD_STRING D1a-JMM-2
6812: PPUSH
6813: CALL_OW 88
// wait ( 0 0$10 ) ;
6817: LD_INT 350
6819: PPUSH
6820: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6824: LD_EXP 1
6828: PPUSH
6829: CALL_OW 310
6833: PPUSH
6834: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6838: LD_EXP 3
6842: PPUSH
6843: LD_STRING D1b-Don-1
6845: PPUSH
6846: CALL_OW 88
// if IsOk ( Donaldson ) then
6850: LD_EXP 3
6854: PPUSH
6855: CALL_OW 302
6859: IFFALSE 6873
// Say ( JMM , D1b-JMM-1 ) ;
6861: LD_EXP 1
6865: PPUSH
6866: LD_STRING D1b-JMM-1
6868: PPUSH
6869: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6873: LD_INT 22
6875: PUSH
6876: LD_INT 1
6878: PUSH
6879: EMPTY
6880: LIST
6881: LIST
6882: PUSH
6883: LD_INT 26
6885: PUSH
6886: LD_INT 1
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PUSH
6893: LD_INT 2
6895: PUSH
6896: LD_INT 25
6898: PUSH
6899: LD_INT 1
6901: PUSH
6902: EMPTY
6903: LIST
6904: LIST
6905: PUSH
6906: LD_INT 25
6908: PUSH
6909: LD_INT 2
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: PUSH
6916: LD_INT 25
6918: PUSH
6919: LD_INT 3
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: PUSH
6926: LD_INT 25
6928: PUSH
6929: LD_INT 4
6931: PUSH
6932: EMPTY
6933: LIST
6934: LIST
6935: PUSH
6936: LD_INT 25
6938: PUSH
6939: LD_INT 5
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: PUSH
6946: LD_INT 25
6948: PUSH
6949: LD_INT 8
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: LIST
6969: PPUSH
6970: CALL_OW 69
6974: PPUSH
6975: LD_STRING D1b-Sol1-1
6977: PPUSH
6978: LD_STRING 
6980: PPUSH
6981: CALL 13074 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6985: LD_EXP 3
6989: PPUSH
6990: LD_STRING D1b-Don-2
6992: PPUSH
6993: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6997: LD_EXP 1
7001: PPUSH
7002: LD_STRING D1b-JMM-2
7004: PPUSH
7005: CALL_OW 88
// dec := ShowQuery1 ;
7009: LD_ADDR_VAR 0 3
7013: PUSH
7014: CALL 13537 0 0
7018: ST_TO_ADDR
// if dec = 1 then
7019: LD_VAR 0 3
7023: PUSH
7024: LD_INT 1
7026: EQUAL
7027: IFFALSE 7169
// begin Say ( JMM , D2-JMM-1 ) ;
7029: LD_EXP 1
7033: PPUSH
7034: LD_STRING D2-JMM-1
7036: PPUSH
7037: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
7041: LD_EXP 15
7045: PPUSH
7046: LD_STRING D2-Pow-1
7048: PPUSH
7049: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
7053: LD_EXP 1
7057: PPUSH
7058: LD_STRING D2a-JMM-1
7060: PPUSH
7061: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
7065: LD_EXP 15
7069: PPUSH
7070: LD_STRING D2a-Pow-1
7072: PPUSH
7073: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
7077: LD_EXP 1
7081: PPUSH
7082: LD_STRING D2a-JMM-2
7084: PPUSH
7085: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
7089: LD_EXP 15
7093: PPUSH
7094: LD_STRING D2a-Pow-2
7096: PPUSH
7097: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
7101: LD_EXP 1
7105: PPUSH
7106: LD_STRING D2a-JMM-3
7108: PPUSH
7109: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
7113: LD_EXP 15
7117: PPUSH
7118: LD_STRING D2a-Pow-3
7120: PPUSH
7121: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
7125: LD_EXP 1
7129: PPUSH
7130: LD_STRING D2c-JMM-1
7132: PPUSH
7133: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
7137: LD_EXP 15
7141: PPUSH
7142: LD_STRING D2c-Pow-1
7144: PPUSH
7145: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
7149: LD_EXP 1
7153: PPUSH
7154: LD_STRING D2c-JMM-2
7156: PPUSH
7157: CALL_OW 88
// secondPass := 2 ;
7161: LD_ADDR_EXP 20
7165: PUSH
7166: LD_INT 2
7168: ST_TO_ADDR
// end ; if dec = 2 then
7169: LD_VAR 0 3
7173: PUSH
7174: LD_INT 2
7176: EQUAL
7177: IFFALSE 7271
// begin Say ( JMM , D2-JMM-1 ) ;
7179: LD_EXP 1
7183: PPUSH
7184: LD_STRING D2-JMM-1
7186: PPUSH
7187: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
7191: LD_EXP 15
7195: PPUSH
7196: LD_STRING D2-Pow-1
7198: PPUSH
7199: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
7203: LD_EXP 1
7207: PPUSH
7208: LD_STRING D2b-JMM-1
7210: PPUSH
7211: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
7215: LD_EXP 15
7219: PPUSH
7220: LD_STRING D2b-Pow-1
7222: PPUSH
7223: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
7227: LD_EXP 1
7231: PPUSH
7232: LD_STRING D2c-JMM-1
7234: PPUSH
7235: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
7239: LD_EXP 15
7243: PPUSH
7244: LD_STRING D2c-Pow-1
7246: PPUSH
7247: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
7251: LD_EXP 1
7255: PPUSH
7256: LD_STRING D2c-JMM-2
7258: PPUSH
7259: CALL_OW 88
// secondPass := 2 ;
7263: LD_ADDR_EXP 20
7267: PUSH
7268: LD_INT 2
7270: ST_TO_ADDR
// end ; if dec = 3 then
7271: LD_VAR 0 3
7275: PUSH
7276: LD_INT 3
7278: EQUAL
7279: IFFALSE 7289
// secondPass := 1 ;
7281: LD_ADDR_EXP 20
7285: PUSH
7286: LD_INT 1
7288: ST_TO_ADDR
// InGameOff ;
7289: CALL_OW 9
// ruAI := true ;
7293: LD_ADDR_EXP 34
7297: PUSH
7298: LD_INT 1
7300: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
7301: LD_INT 1
7303: PPUSH
7304: LD_INT 3
7306: PPUSH
7307: LD_INT 2
7309: PPUSH
7310: LD_INT 1
7312: PPUSH
7313: CALL_OW 80
// SaveForQuickRestart ;
7317: CALL_OW 22
// end ;
7321: PPOPN 3
7323: END
// every 1 1$0 trigger secondPass = 2 do
7324: LD_EXP 20
7328: PUSH
7329: LD_INT 2
7331: EQUAL
7332: IFFALSE 7562
7334: GO 7336
7336: DISABLE
// begin cratesAllow := true ;
7337: LD_ADDR_EXP 45
7341: PUSH
7342: LD_INT 1
7344: ST_TO_ADDR
// PowellSupport1 ;
7345: CALL 2211 0 0
// DialogueOn ;
7349: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
7353: LD_EXP 1
7357: PPUSH
7358: LD_STRING DC1-JMM-1
7360: PPUSH
7361: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
7365: LD_EXP 15
7369: PPUSH
7370: LD_STRING DC1-Pow-1
7372: PPUSH
7373: CALL_OW 94
// DialogueOff ;
7377: CALL_OW 7
// wait ( 3 3$0 ) ;
7381: LD_INT 6300
7383: PPUSH
7384: CALL_OW 67
// PowellSupport2 ;
7388: CALL 2725 0 0
// DialogueOn ;
7392: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
7396: LD_EXP 1
7400: PPUSH
7401: LD_STRING DC2-JMM-1
7403: PPUSH
7404: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
7408: LD_EXP 15
7412: PPUSH
7413: LD_STRING DC2-Pow-1
7415: PPUSH
7416: CALL_OW 94
// DialogueOff ;
7420: CALL_OW 7
// wait ( 3 3$00 ) ;
7424: LD_INT 6300
7426: PPUSH
7427: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7431: LD_INT 35
7433: PPUSH
7434: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and not FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
7438: LD_INT 22
7440: PUSH
7441: LD_INT 1
7443: PUSH
7444: EMPTY
7445: LIST
7446: LIST
7447: PUSH
7448: LD_INT 2
7450: PUSH
7451: LD_INT 30
7453: PUSH
7454: LD_INT 0
7456: PUSH
7457: EMPTY
7458: LIST
7459: LIST
7460: PUSH
7461: LD_INT 30
7463: PUSH
7464: LD_INT 1
7466: PUSH
7467: EMPTY
7468: LIST
7469: LIST
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: LIST
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: PPUSH
7480: CALL_OW 69
7484: IFFALSE 7506
7486: PUSH
7487: LD_INT 11
7489: PPUSH
7490: LD_INT 22
7492: PUSH
7493: LD_INT 3
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: PPUSH
7500: CALL_OW 70
7504: NOT
7505: AND
7506: IFFALSE 7431
// wait ( 0 0$10 ) ;
7508: LD_INT 350
7510: PPUSH
7511: CALL_OW 67
// Legion ;
7515: CALL 7563 0 0
// wait ( 5 5$0 ) ;
7519: LD_INT 10500
7521: PPUSH
7522: CALL_OW 67
// PowellSupport3 ;
7526: CALL 3414 0 0
// DialogueOn ;
7530: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
7534: LD_EXP 15
7538: PPUSH
7539: LD_STRING DC3-Pow-1
7541: PPUSH
7542: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
7546: LD_EXP 1
7550: PPUSH
7551: LD_STRING DC3-JMM-1
7553: PPUSH
7554: CALL_OW 88
// DialogueOff ;
7558: CALL_OW 7
// end ;
7562: END
// export function Legion ; var i , dec1 , dec2 , tmp , tmp2 , tmp3 , crates , oil , siberite , cr , sb , payForNeutral , payForHelp , query1 , query2 ; begin
7563: LD_INT 0
7565: PPUSH
7566: PPUSH
7567: PPUSH
7568: PPUSH
7569: PPUSH
7570: PPUSH
7571: PPUSH
7572: PPUSH
7573: PPUSH
7574: PPUSH
7575: PPUSH
7576: PPUSH
7577: PPUSH
7578: PPUSH
7579: PPUSH
7580: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7581: LD_ADDR_VAR 0 5
7585: PUSH
7586: LD_INT 22
7588: PUSH
7589: LD_INT 1
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: PUSH
7596: LD_INT 21
7598: PUSH
7599: LD_INT 3
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: PUSH
7606: LD_INT 2
7608: PUSH
7609: LD_INT 30
7611: PUSH
7612: LD_INT 0
7614: PUSH
7615: EMPTY
7616: LIST
7617: LIST
7618: PUSH
7619: LD_INT 30
7621: PUSH
7622: LD_INT 1
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: PUSH
7629: EMPTY
7630: LIST
7631: LIST
7632: LIST
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: LIST
7638: PPUSH
7639: CALL_OW 69
7643: ST_TO_ADDR
// crates := 0 ;
7644: LD_ADDR_VAR 0 8
7648: PUSH
7649: LD_INT 0
7651: ST_TO_ADDR
// oil := 0 ;
7652: LD_ADDR_VAR 0 9
7656: PUSH
7657: LD_INT 0
7659: ST_TO_ADDR
// siberite := 0 ;
7660: LD_ADDR_VAR 0 10
7664: PUSH
7665: LD_INT 0
7667: ST_TO_ADDR
// payForNeutral := false ;
7668: LD_ADDR_VAR 0 13
7672: PUSH
7673: LD_INT 0
7675: ST_TO_ADDR
// payForHelp := false ;
7676: LD_ADDR_VAR 0 14
7680: PUSH
7681: LD_INT 0
7683: ST_TO_ADDR
// for i in tmp do
7684: LD_ADDR_VAR 0 2
7688: PUSH
7689: LD_VAR 0 5
7693: PUSH
7694: FOR_IN
7695: IFFALSE 7786
// begin crates := crates + GetResourceType ( GetBase ( i ) , 1 ) ;
7697: LD_ADDR_VAR 0 8
7701: PUSH
7702: LD_VAR 0 8
7706: PUSH
7707: LD_VAR 0 2
7711: PPUSH
7712: CALL_OW 274
7716: PPUSH
7717: LD_INT 1
7719: PPUSH
7720: CALL_OW 275
7724: PLUS
7725: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( i ) , 2 ) ;
7726: LD_ADDR_VAR 0 9
7730: PUSH
7731: LD_VAR 0 9
7735: PUSH
7736: LD_VAR 0 2
7740: PPUSH
7741: CALL_OW 274
7745: PPUSH
7746: LD_INT 2
7748: PPUSH
7749: CALL_OW 275
7753: PLUS
7754: ST_TO_ADDR
// siberite := siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
7755: LD_ADDR_VAR 0 10
7759: PUSH
7760: LD_VAR 0 10
7764: PUSH
7765: LD_VAR 0 2
7769: PPUSH
7770: CALL_OW 274
7774: PPUSH
7775: LD_INT 3
7777: PPUSH
7778: CALL_OW 275
7782: PLUS
7783: ST_TO_ADDR
// end ;
7784: GO 7694
7786: POP
7787: POP
// PrepareKurt ;
7788: CALL 5275 0 0
// if not Kurt then
7792: LD_EXP 17
7796: NOT
7797: IFFALSE 7801
// exit ;
7799: GO 9932
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7801: LD_EXP 18
7805: PPUSH
7806: LD_INT 144
7808: PPUSH
7809: LD_INT 111
7811: PPUSH
7812: CALL_OW 111
// wait ( 0 0$2 ) ;
7816: LD_INT 70
7818: PPUSH
7819: CALL_OW 67
// PlaceSeeing ( 167 , 121 , 1 , - 10 ) ;
7823: LD_INT 167
7825: PPUSH
7826: LD_INT 121
7828: PPUSH
7829: LD_INT 1
7831: PPUSH
7832: LD_INT 10
7834: NEG
7835: PPUSH
7836: CALL_OW 330
// ComExitVehicle ( Kurt ) ;
7840: LD_EXP 17
7844: PPUSH
7845: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7849: LD_EXP 17
7853: PPUSH
7854: CALL_OW 87
// wait ( 0 0$1 ) ;
7858: LD_INT 35
7860: PPUSH
7861: CALL_OW 67
// DialogueOn ;
7865: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7869: LD_INT 22
7871: PUSH
7872: LD_INT 1
7874: PUSH
7875: EMPTY
7876: LIST
7877: LIST
7878: PUSH
7879: LD_INT 26
7881: PUSH
7882: LD_INT 1
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: PUSH
7889: LD_INT 2
7891: PUSH
7892: LD_INT 25
7894: PUSH
7895: LD_INT 1
7897: PUSH
7898: EMPTY
7899: LIST
7900: LIST
7901: PUSH
7902: LD_INT 25
7904: PUSH
7905: LD_INT 2
7907: PUSH
7908: EMPTY
7909: LIST
7910: LIST
7911: PUSH
7912: LD_INT 25
7914: PUSH
7915: LD_INT 3
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PUSH
7922: LD_INT 25
7924: PUSH
7925: LD_INT 4
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: PUSH
7932: LD_INT 25
7934: PUSH
7935: LD_INT 5
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: PUSH
7942: LD_INT 25
7944: PUSH
7945: LD_INT 8
7947: PUSH
7948: EMPTY
7949: LIST
7950: LIST
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: LIST
7965: PPUSH
7966: CALL_OW 69
7970: PPUSH
7971: LD_STRING D3-Sol1-1
7973: PPUSH
7974: LD_STRING 
7976: PPUSH
7977: CALL 13074 0 3
// if KurtStatus then
7981: LD_EXP 19
7985: IFFALSE 8085
// begin Say ( Kurt , D3-Kurt-1 ) ;
7987: LD_EXP 17
7991: PPUSH
7992: LD_STRING D3-Kurt-1
7994: PPUSH
7995: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7999: LD_EXP 1
8003: PPUSH
8004: LD_STRING D3-JMM-1
8006: PPUSH
8007: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
8011: LD_EXP 17
8015: PPUSH
8016: LD_STRING D3-Kurt-2
8018: PPUSH
8019: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
8023: LD_EXP 1
8027: PPUSH
8028: LD_STRING D3-JMM-2
8030: PPUSH
8031: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
8035: LD_EXP 17
8039: PPUSH
8040: LD_STRING D3-Kurt-4
8042: PPUSH
8043: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
8047: LD_EXP 1
8051: PPUSH
8052: LD_STRING D3-JMM-4
8054: PPUSH
8055: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
8059: LD_EXP 17
8063: PPUSH
8064: LD_STRING D3-Kurt-5
8066: PPUSH
8067: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
8071: LD_EXP 17
8075: PPUSH
8076: LD_STRING D3-Kurt-5a
8078: PPUSH
8079: CALL_OW 88
// end else
8083: GO 8181
// begin Say ( Kurt , D3-Kurt-1 ) ;
8085: LD_EXP 17
8089: PPUSH
8090: LD_STRING D3-Kurt-1
8092: PPUSH
8093: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
8097: LD_EXP 1
8101: PPUSH
8102: LD_STRING D3-JMM-1
8104: PPUSH
8105: CALL_OW 88
// Say ( Kurt , D3-Kurt-3 ) ;
8109: LD_EXP 17
8113: PPUSH
8114: LD_STRING D3-Kurt-3
8116: PPUSH
8117: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
8121: LD_EXP 1
8125: PPUSH
8126: LD_STRING D3-JMM-3
8128: PPUSH
8129: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
8133: LD_EXP 17
8137: PPUSH
8138: LD_STRING D3-Kurt-4
8140: PPUSH
8141: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
8145: LD_EXP 1
8149: PPUSH
8150: LD_STRING D3-JMM-4
8152: PPUSH
8153: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
8157: LD_EXP 17
8161: PPUSH
8162: LD_STRING D3-Kurt-5
8164: PPUSH
8165: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
8169: LD_EXP 17
8173: PPUSH
8174: LD_STRING D3-Kurt-5b
8176: PPUSH
8177: CALL_OW 88
// end ; if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
8181: LD_VAR 0 8
8185: PUSH
8186: LD_INT 120
8188: PUSH
8189: LD_INT 60
8191: PUSH
8192: EMPTY
8193: LIST
8194: LIST
8195: PUSH
8196: LD_EXP 19
8200: PUSH
8201: LD_INT 1
8203: PLUS
8204: ARRAY
8205: GREATEREQUAL
8206: IFFALSE 8235
8208: PUSH
8209: LD_VAR 0 10
8213: PUSH
8214: LD_INT 120
8216: PUSH
8217: LD_INT 60
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: PUSH
8224: LD_EXP 19
8228: PUSH
8229: LD_INT 1
8231: PLUS
8232: ARRAY
8233: GREATEREQUAL
8234: AND
8235: IFFALSE 8287
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8237: LD_ADDR_VAR 0 3
8241: PUSH
8242: LD_STRING Q2
8244: PUSH
8245: LD_STRING Q2K
8247: PUSH
8248: EMPTY
8249: LIST
8250: LIST
8251: PUSH
8252: LD_EXP 19
8256: PUSH
8257: LD_INT 1
8259: PLUS
8260: ARRAY
8261: PPUSH
8262: LD_INT 1
8264: PUSH
8265: LD_INT 2
8267: PUSH
8268: LD_INT 3
8270: PUSH
8271: LD_INT 4
8273: PUSH
8274: EMPTY
8275: LIST
8276: LIST
8277: LIST
8278: LIST
8279: PPUSH
8280: CALL_OW 98
8284: ST_TO_ADDR
8285: GO 8331
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 3 , 4 ] ) ;
8287: LD_ADDR_VAR 0 3
8291: PUSH
8292: LD_STRING Q2
8294: PUSH
8295: LD_STRING Q2K
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: PUSH
8302: LD_EXP 19
8306: PUSH
8307: LD_INT 1
8309: PLUS
8310: ARRAY
8311: PPUSH
8312: LD_INT 1
8314: PUSH
8315: LD_INT 3
8317: PUSH
8318: LD_INT 4
8320: PUSH
8321: EMPTY
8322: LIST
8323: LIST
8324: LIST
8325: PPUSH
8326: CALL_OW 98
8330: ST_TO_ADDR
// if dec1 = 1 then
8331: LD_VAR 0 3
8335: PUSH
8336: LD_INT 1
8338: EQUAL
8339: IFFALSE 8373
// begin Say ( JMM , D3Ka-JMM-1 ) ;
8341: LD_EXP 1
8345: PPUSH
8346: LD_STRING D3Ka-JMM-1
8348: PPUSH
8349: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
8353: LD_EXP 17
8357: PPUSH
8358: LD_STRING D3Ka-Kurt-1
8360: PPUSH
8361: CALL_OW 88
// warWithLegion = 1 ;
8365: LD_ADDR_EXP 23
8369: PUSH
8370: LD_INT 1
8372: ST_TO_ADDR
// end ; if dec1 = 2 then
8373: LD_VAR 0 3
8377: PUSH
8378: LD_INT 2
8380: EQUAL
8381: IFFALSE 8465
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8383: LD_EXP 1
8387: PPUSH
8388: LD_STRING D3Kb-JMM-1
8390: PPUSH
8391: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8395: LD_EXP 17
8399: PPUSH
8400: LD_STRING D3Kb-Kurt-1
8402: PPUSH
8403: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8407: LD_ADDR_VAR 0 11
8411: PUSH
8412: LD_INT 120
8414: PUSH
8415: LD_INT 60
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: PUSH
8422: LD_EXP 19
8426: PUSH
8427: LD_INT 1
8429: PLUS
8430: ARRAY
8431: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8432: LD_ADDR_VAR 0 12
8436: PUSH
8437: LD_INT 120
8439: PUSH
8440: LD_INT 60
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: PUSH
8447: LD_EXP 19
8451: PUSH
8452: LD_INT 1
8454: PLUS
8455: ARRAY
8456: ST_TO_ADDR
// payForNeutral := true ;
8457: LD_ADDR_VAR 0 13
8461: PUSH
8462: LD_INT 1
8464: ST_TO_ADDR
// end ; if dec1 = 3 then
8465: LD_VAR 0 3
8469: PUSH
8470: LD_INT 3
8472: EQUAL
8473: IFFALSE 8708
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8475: LD_EXP 1
8479: PPUSH
8480: LD_STRING D3Kc1-JMM-1
8482: PPUSH
8483: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8487: LD_EXP 17
8491: PPUSH
8492: LD_STRING D3Kc1-Kurt-1
8494: PPUSH
8495: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8499: LD_EXP 1
8503: PPUSH
8504: LD_STRING D3Kc1-JMM-2
8506: PPUSH
8507: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8511: LD_EXP 17
8515: PPUSH
8516: LD_STRING D3Kc1-Kurt-2
8518: PPUSH
8519: CALL_OW 88
// askSiberite = 1 ;
8523: LD_ADDR_EXP 25
8527: PUSH
8528: LD_INT 1
8530: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8531: LD_ADDR_VAR 0 4
8535: PUSH
8536: LD_STRING Q2b
8538: PPUSH
8539: LD_INT 1
8541: PUSH
8542: LD_INT 2
8544: PUSH
8545: LD_INT 3
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: LIST
8552: PPUSH
8553: CALL_OW 98
8557: ST_TO_ADDR
// if dec2 = 1 then
8558: LD_VAR 0 4
8562: PUSH
8563: LD_INT 1
8565: EQUAL
8566: IFFALSE 8600
// begin Say ( JMM , D4a-JMM-1 ) ;
8568: LD_EXP 1
8572: PPUSH
8573: LD_STRING D4a-JMM-1
8575: PPUSH
8576: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8580: LD_EXP 17
8584: PPUSH
8585: LD_STRING D4b-Kurt-1
8587: PPUSH
8588: CALL_OW 88
// warWithLegion = 1 ;
8592: LD_ADDR_EXP 23
8596: PUSH
8597: LD_INT 1
8599: ST_TO_ADDR
// end ; if dec2 = 2 then
8600: LD_VAR 0 4
8604: PUSH
8605: LD_INT 2
8607: EQUAL
8608: IFFALSE 8642
// begin Say ( JMM , D4b-JMM-1 ) ;
8610: LD_EXP 1
8614: PPUSH
8615: LD_STRING D4b-JMM-1
8617: PPUSH
8618: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8622: LD_EXP 17
8626: PPUSH
8627: LD_STRING D4b-Kurt-1
8629: PPUSH
8630: CALL_OW 88
// warWithLegion = 1 ;
8634: LD_ADDR_EXP 23
8638: PUSH
8639: LD_INT 1
8641: ST_TO_ADDR
// end ; if dec2 = 3 then
8642: LD_VAR 0 4
8646: PUSH
8647: LD_INT 3
8649: EQUAL
8650: IFFALSE 8708
// begin Say ( JMM , D4c-JMM-1 ) ;
8652: LD_EXP 1
8656: PPUSH
8657: LD_STRING D4c-JMM-1
8659: PPUSH
8660: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8664: LD_EXP 17
8668: PPUSH
8669: LD_STRING D4c-Kurt-1
8671: PPUSH
8672: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8676: LD_EXP 1
8680: PPUSH
8681: LD_STRING D4c-JMM-2
8683: PPUSH
8684: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8688: LD_EXP 17
8692: PPUSH
8693: LD_STRING D4c-Kurt-2
8695: PPUSH
8696: CALL_OW 88
// fakeInfo = 1 ;
8700: LD_ADDR_EXP 24
8704: PUSH
8705: LD_INT 1
8707: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
8708: LD_VAR 0 3
8712: PUSH
8713: LD_INT 4
8715: EQUAL
8716: IFFALSE 9788
// begin Say ( JMM , D3Kd-JMM-1 ) ;
8718: LD_EXP 1
8722: PPUSH
8723: LD_STRING D3Kd-JMM-1
8725: PPUSH
8726: CALL_OW 88
// if crates >= [ 200 , 120 ] [ KurtStatus + 1 ] and siberite >= [ 200 , 120 ] [ KurtStatus + 1 ] then
8730: LD_VAR 0 8
8734: PUSH
8735: LD_INT 200
8737: PUSH
8738: LD_INT 120
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: PUSH
8745: LD_EXP 19
8749: PUSH
8750: LD_INT 1
8752: PLUS
8753: ARRAY
8754: GREATEREQUAL
8755: IFFALSE 8784
8757: PUSH
8758: LD_VAR 0 10
8762: PUSH
8763: LD_INT 200
8765: PUSH
8766: LD_INT 120
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: PUSH
8773: LD_EXP 19
8777: PUSH
8778: LD_INT 1
8780: PLUS
8781: ARRAY
8782: GREATEREQUAL
8783: AND
8784: IFFALSE 8836
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8786: LD_ADDR_VAR 0 4
8790: PUSH
8791: LD_STRING Q2a
8793: PUSH
8794: LD_STRING Q2aK
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: PUSH
8801: LD_EXP 19
8805: PUSH
8806: LD_INT 1
8808: PLUS
8809: ARRAY
8810: PPUSH
8811: LD_INT 1
8813: PUSH
8814: LD_INT 2
8816: PUSH
8817: LD_INT 3
8819: PUSH
8820: LD_INT 4
8822: PUSH
8823: EMPTY
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: PPUSH
8829: CALL_OW 98
8833: ST_TO_ADDR
8834: GO 9002
// if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
8836: LD_VAR 0 8
8840: PUSH
8841: LD_INT 120
8843: PUSH
8844: LD_INT 60
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: PUSH
8851: LD_EXP 19
8855: PUSH
8856: LD_INT 1
8858: PLUS
8859: ARRAY
8860: GREATEREQUAL
8861: IFFALSE 8890
8863: PUSH
8864: LD_VAR 0 10
8868: PUSH
8869: LD_INT 120
8871: PUSH
8872: LD_INT 60
8874: PUSH
8875: EMPTY
8876: LIST
8877: LIST
8878: PUSH
8879: LD_EXP 19
8883: PUSH
8884: LD_INT 1
8886: PLUS
8887: ARRAY
8888: GREATEREQUAL
8889: AND
8890: IFFALSE 8938
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 4 ] ) else
8892: LD_ADDR_VAR 0 4
8896: PUSH
8897: LD_STRING Q2a
8899: PUSH
8900: LD_STRING Q2aK
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: PUSH
8907: LD_EXP 19
8911: PUSH
8912: LD_INT 1
8914: PLUS
8915: ARRAY
8916: PPUSH
8917: LD_INT 1
8919: PUSH
8920: LD_INT 2
8922: PUSH
8923: LD_INT 4
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: LIST
8930: PPUSH
8931: CALL_OW 98
8935: ST_TO_ADDR
8936: GO 9002
// begin Query ( [ Q2d , Q2dK ] [ KurtStatus + 1 ] ) ;
8938: LD_STRING Q2d
8940: PUSH
8941: LD_STRING Q2dK
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: PUSH
8948: LD_EXP 19
8952: PUSH
8953: LD_INT 1
8955: PLUS
8956: ARRAY
8957: PPUSH
8958: CALL_OW 97
// dec2 := 0 ;
8962: LD_ADDR_VAR 0 4
8966: PUSH
8967: LD_INT 0
8969: ST_TO_ADDR
// Say ( JMM , D3Kc1-JMM-1 ) ;
8970: LD_EXP 1
8974: PPUSH
8975: LD_STRING D3Kc1-JMM-1
8977: PPUSH
8978: CALL_OW 88
// Say ( Kurt , D3Kc2-Kurt-1 ) ;
8982: LD_EXP 17
8986: PPUSH
8987: LD_STRING D3Kc2-Kurt-1
8989: PPUSH
8990: CALL_OW 88
// warWithLegion := 1 ;
8994: LD_ADDR_EXP 23
8998: PUSH
8999: LD_INT 1
9001: ST_TO_ADDR
// end ; if dec2 = 1 then
9002: LD_VAR 0 4
9006: PUSH
9007: LD_INT 1
9009: EQUAL
9010: IFFALSE 9044
// begin Say ( JMM , D5Ka-JMM-1 ) ;
9012: LD_EXP 1
9016: PPUSH
9017: LD_STRING D5Ka-JMM-1
9019: PPUSH
9020: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
9024: LD_EXP 17
9028: PPUSH
9029: LD_STRING D5Ka-Kurt-1
9031: PPUSH
9032: CALL_OW 88
// warWithLegion = 1 ;
9036: LD_ADDR_EXP 23
9040: PUSH
9041: LD_INT 1
9043: ST_TO_ADDR
// end ; if dec2 = 2 then
9044: LD_VAR 0 4
9048: PUSH
9049: LD_INT 2
9051: EQUAL
9052: IFFALSE 9136
// begin Say ( JMM , D3Kb-JMM-1 ) ;
9054: LD_EXP 1
9058: PPUSH
9059: LD_STRING D3Kb-JMM-1
9061: PPUSH
9062: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
9066: LD_EXP 17
9070: PPUSH
9071: LD_STRING D3Kb-Kurt-1
9073: PPUSH
9074: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
9078: LD_ADDR_VAR 0 11
9082: PUSH
9083: LD_INT 120
9085: PUSH
9086: LD_INT 60
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: PUSH
9093: LD_EXP 19
9097: PUSH
9098: LD_INT 1
9100: PLUS
9101: ARRAY
9102: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
9103: LD_ADDR_VAR 0 12
9107: PUSH
9108: LD_INT 120
9110: PUSH
9111: LD_INT 60
9113: PUSH
9114: EMPTY
9115: LIST
9116: LIST
9117: PUSH
9118: LD_EXP 19
9122: PUSH
9123: LD_INT 1
9125: PLUS
9126: ARRAY
9127: ST_TO_ADDR
// payForNeutral := true ;
9128: LD_ADDR_VAR 0 13
9132: PUSH
9133: LD_INT 1
9135: ST_TO_ADDR
// end ; if dec2 = 3 then
9136: LD_VAR 0 4
9140: PUSH
9141: LD_INT 3
9143: EQUAL
9144: IFFALSE 9228
// begin Say ( JMM , D3Ke-JMM-1 ) ;
9146: LD_EXP 1
9150: PPUSH
9151: LD_STRING D3Ke-JMM-1
9153: PPUSH
9154: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
9158: LD_EXP 17
9162: PPUSH
9163: LD_STRING D3Ke-Kurt-1
9165: PPUSH
9166: CALL_OW 88
// cr := [ 200 , 120 ] [ KurtStatus + 1 ] ;
9170: LD_ADDR_VAR 0 11
9174: PUSH
9175: LD_INT 200
9177: PUSH
9178: LD_INT 120
9180: PUSH
9181: EMPTY
9182: LIST
9183: LIST
9184: PUSH
9185: LD_EXP 19
9189: PUSH
9190: LD_INT 1
9192: PLUS
9193: ARRAY
9194: ST_TO_ADDR
// sb := [ 200 , 120 ] [ KurtStatus + 1 ] ;
9195: LD_ADDR_VAR 0 12
9199: PUSH
9200: LD_INT 200
9202: PUSH
9203: LD_INT 120
9205: PUSH
9206: EMPTY
9207: LIST
9208: LIST
9209: PUSH
9210: LD_EXP 19
9214: PUSH
9215: LD_INT 1
9217: PLUS
9218: ARRAY
9219: ST_TO_ADDR
// payForHelp := true ;
9220: LD_ADDR_VAR 0 14
9224: PUSH
9225: LD_INT 1
9227: ST_TO_ADDR
// end ; if dec2 = 4 then
9228: LD_VAR 0 4
9232: PUSH
9233: LD_INT 4
9235: EQUAL
9236: IFFALSE 9471
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
9238: LD_EXP 1
9242: PPUSH
9243: LD_STRING D3Kc1-JMM-1
9245: PPUSH
9246: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
9250: LD_EXP 17
9254: PPUSH
9255: LD_STRING D3Kc1-Kurt-1
9257: PPUSH
9258: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
9262: LD_EXP 1
9266: PPUSH
9267: LD_STRING D3Kc1-JMM-2
9269: PPUSH
9270: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
9274: LD_EXP 17
9278: PPUSH
9279: LD_STRING D3Kc1-Kurt-2
9281: PPUSH
9282: CALL_OW 88
// askSiberite = 1 ;
9286: LD_ADDR_EXP 25
9290: PUSH
9291: LD_INT 1
9293: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
9294: LD_ADDR_VAR 0 4
9298: PUSH
9299: LD_STRING Q2b
9301: PPUSH
9302: LD_INT 1
9304: PUSH
9305: LD_INT 2
9307: PUSH
9308: LD_INT 3
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: LIST
9315: PPUSH
9316: CALL_OW 98
9320: ST_TO_ADDR
// if dec2 = 1 then
9321: LD_VAR 0 4
9325: PUSH
9326: LD_INT 1
9328: EQUAL
9329: IFFALSE 9363
// begin Say ( JMM , D4a-JMM-1 ) ;
9331: LD_EXP 1
9335: PPUSH
9336: LD_STRING D4a-JMM-1
9338: PPUSH
9339: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
9343: LD_EXP 17
9347: PPUSH
9348: LD_STRING D4b-Kurt-1
9350: PPUSH
9351: CALL_OW 88
// warWithLegion = 1 ;
9355: LD_ADDR_EXP 23
9359: PUSH
9360: LD_INT 1
9362: ST_TO_ADDR
// end ; if dec2 = 2 then
9363: LD_VAR 0 4
9367: PUSH
9368: LD_INT 2
9370: EQUAL
9371: IFFALSE 9405
// begin Say ( JMM , D4b-JMM-1 ) ;
9373: LD_EXP 1
9377: PPUSH
9378: LD_STRING D4b-JMM-1
9380: PPUSH
9381: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
9385: LD_EXP 17
9389: PPUSH
9390: LD_STRING D4b-Kurt-1
9392: PPUSH
9393: CALL_OW 88
// warWithLegion = 1 ;
9397: LD_ADDR_EXP 23
9401: PUSH
9402: LD_INT 1
9404: ST_TO_ADDR
// end ; if dec2 = 3 then
9405: LD_VAR 0 4
9409: PUSH
9410: LD_INT 3
9412: EQUAL
9413: IFFALSE 9471
// begin Say ( JMM , D4c-JMM-1 ) ;
9415: LD_EXP 1
9419: PPUSH
9420: LD_STRING D4c-JMM-1
9422: PPUSH
9423: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
9427: LD_EXP 17
9431: PPUSH
9432: LD_STRING D4c-Kurt-1
9434: PPUSH
9435: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9439: LD_EXP 1
9443: PPUSH
9444: LD_STRING D4c-JMM-2
9446: PPUSH
9447: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
9451: LD_EXP 17
9455: PPUSH
9456: LD_STRING D4c-Kurt-2
9458: PPUSH
9459: CALL_OW 88
// fakeInfo = 1 ;
9463: LD_ADDR_EXP 24
9467: PUSH
9468: LD_INT 1
9470: ST_TO_ADDR
// end ; end ; if payForNeutral or payForHelp then
9471: LD_VAR 0 13
9475: IFTRUE 9483
9477: PUSH
9478: LD_VAR 0 14
9482: OR
9483: IFFALSE 9788
// begin for i in tmp do
9485: LD_ADDR_VAR 0 2
9489: PUSH
9490: LD_VAR 0 5
9494: PUSH
9495: FOR_IN
9496: IFFALSE 9786
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
9498: LD_ADDR_VAR 0 6
9502: PUSH
9503: LD_VAR 0 2
9507: PPUSH
9508: CALL_OW 274
9512: PPUSH
9513: LD_INT 1
9515: PPUSH
9516: CALL_OW 275
9520: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
9521: LD_ADDR_VAR 0 7
9525: PUSH
9526: LD_VAR 0 2
9530: PPUSH
9531: CALL_OW 274
9535: PPUSH
9536: LD_INT 3
9538: PPUSH
9539: CALL_OW 275
9543: ST_TO_ADDR
// if cr then
9544: LD_VAR 0 11
9548: IFFALSE 9664
// begin if tmp2 and tmp2 < cr then
9550: LD_VAR 0 6
9554: IFFALSE 9568
9556: PUSH
9557: LD_VAR 0 6
9561: PUSH
9562: LD_VAR 0 11
9566: LESS
9567: AND
9568: IFFALSE 9616
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
9570: LD_VAR 0 2
9574: PPUSH
9575: CALL_OW 274
9579: PPUSH
9580: LD_INT 1
9582: PPUSH
9583: LD_VAR 0 11
9587: PUSH
9588: LD_VAR 0 6
9592: MINUS
9593: PPUSH
9594: CALL_OW 277
// cr := cr - tmp2 ;
9598: LD_ADDR_VAR 0 11
9602: PUSH
9603: LD_VAR 0 11
9607: PUSH
9608: LD_VAR 0 6
9612: MINUS
9613: ST_TO_ADDR
// end else
9614: GO 9664
// if tmp2 > cr then
9616: LD_VAR 0 6
9620: PUSH
9621: LD_VAR 0 11
9625: GREATER
9626: IFFALSE 9664
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
9628: LD_VAR 0 2
9632: PPUSH
9633: CALL_OW 274
9637: PPUSH
9638: LD_INT 1
9640: PPUSH
9641: LD_VAR 0 6
9645: PUSH
9646: LD_VAR 0 11
9650: MINUS
9651: PPUSH
9652: CALL_OW 277
// cr := 0 ;
9656: LD_ADDR_VAR 0 11
9660: PUSH
9661: LD_INT 0
9663: ST_TO_ADDR
// end ; end ; if sb then
9664: LD_VAR 0 12
9668: IFFALSE 9784
// begin if tmp3 and tmp3 < sb then
9670: LD_VAR 0 7
9674: IFFALSE 9688
9676: PUSH
9677: LD_VAR 0 7
9681: PUSH
9682: LD_VAR 0 12
9686: LESS
9687: AND
9688: IFFALSE 9736
// begin SetResourceType ( GetBase ( i ) , 3 , sb - tmp3 ) ;
9690: LD_VAR 0 2
9694: PPUSH
9695: CALL_OW 274
9699: PPUSH
9700: LD_INT 3
9702: PPUSH
9703: LD_VAR 0 12
9707: PUSH
9708: LD_VAR 0 7
9712: MINUS
9713: PPUSH
9714: CALL_OW 277
// sb := sb - tmp3 ;
9718: LD_ADDR_VAR 0 12
9722: PUSH
9723: LD_VAR 0 12
9727: PUSH
9728: LD_VAR 0 7
9732: MINUS
9733: ST_TO_ADDR
// end else
9734: GO 9784
// if tmp3 > sb then
9736: LD_VAR 0 7
9740: PUSH
9741: LD_VAR 0 12
9745: GREATER
9746: IFFALSE 9784
// begin SetResourceType ( GetBase ( i ) , 3 , tmp3 - sb ) ;
9748: LD_VAR 0 2
9752: PPUSH
9753: CALL_OW 274
9757: PPUSH
9758: LD_INT 3
9760: PPUSH
9761: LD_VAR 0 7
9765: PUSH
9766: LD_VAR 0 12
9770: MINUS
9771: PPUSH
9772: CALL_OW 277
// sb := 0 ;
9776: LD_ADDR_VAR 0 12
9780: PUSH
9781: LD_INT 0
9783: ST_TO_ADDR
// end ; end ; end ;
9784: GO 9495
9786: POP
9787: POP
// end ; end ; DialogueOff ;
9788: CALL_OW 7
// RemoveSeeing ( 167 , 121 , 1 ) ;
9792: LD_INT 167
9794: PPUSH
9795: LD_INT 121
9797: PPUSH
9798: LD_INT 1
9800: PPUSH
9801: CALL_OW 331
// ComEnterUnit ( Kurt , KurtVeh ) ;
9805: LD_EXP 17
9809: PPUSH
9810: LD_EXP 18
9814: PPUSH
9815: CALL_OW 120
// wait ( 0 0$1 ) ;
9819: LD_INT 35
9821: PPUSH
9822: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9826: LD_EXP 18
9830: PPUSH
9831: LD_INT 4
9833: PPUSH
9834: CALL_OW 113
// wait ( 0 0$3 ) ;
9838: LD_INT 105
9840: PPUSH
9841: CALL_OW 67
// RemoveUnit ( Kurt ) ;
9845: LD_EXP 17
9849: PPUSH
9850: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9854: LD_EXP 18
9858: PPUSH
9859: CALL_OW 64
// wait ( 0 0$3 ) ;
9863: LD_INT 105
9865: PPUSH
9866: CALL_OW 67
// if payForHelp then
9870: LD_VAR 0 14
9874: IFFALSE 9932
// begin HiddenCamera ( 36 , 57 , 1 ) ;
9876: LD_INT 36
9878: PPUSH
9879: LD_INT 57
9881: PPUSH
9882: LD_INT 1
9884: PPUSH
9885: CALL_OW 244
// HiddenCamera ( 51 , 63 , 1 ) ;
9889: LD_INT 51
9891: PPUSH
9892: LD_INT 63
9894: PPUSH
9895: LD_INT 1
9897: PPUSH
9898: CALL_OW 244
// HiddenCamera ( 93 , 65 , 1 ) ;
9902: LD_INT 93
9904: PPUSH
9905: LD_INT 65
9907: PPUSH
9908: LD_INT 1
9910: PPUSH
9911: CALL_OW 244
// HiddenCamera ( 42 , 12 , 1 ) ;
9915: LD_INT 42
9917: PPUSH
9918: LD_INT 12
9920: PPUSH
9921: LD_INT 1
9923: PPUSH
9924: CALL_OW 244
// PrepareLegionForPlayer ;
9928: CALL 5478 0 0
// end ; end ;
9932: LD_VAR 0 1
9936: RET
// every 0 0$10 trigger warWithLegion = 1 do
9937: LD_EXP 23
9941: PUSH
9942: LD_INT 1
9944: EQUAL
9945: IFFALSE 9961
9947: GO 9949
9949: DISABLE
// begin wait ( 0 0$30 ) ;
9950: LD_INT 1050
9952: PPUSH
9953: CALL_OW 67
// PrepareAttackLegion ;
9957: CALL 6127 0 0
// end ;
9961: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do var i ;
9962: LD_INT 120
9964: PUSH
9965: LD_INT 17
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: PUSH
9972: LD_INT 52
9974: PUSH
9975: EMPTY
9976: LIST
9977: PUSH
9978: EMPTY
9979: LIST
9980: LIST
9981: PPUSH
9982: CALL_OW 69
9986: IFFALSE 10133
9988: GO 9990
9990: DISABLE
9991: LD_INT 0
9993: PPUSH
// begin enable ;
9994: ENABLE
// for i in FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do
9995: LD_ADDR_VAR 0 1
9999: PUSH
10000: LD_INT 120
10002: PUSH
10003: LD_INT 17
10005: PUSH
10006: EMPTY
10007: LIST
10008: LIST
10009: PUSH
10010: LD_INT 52
10012: PUSH
10013: EMPTY
10014: LIST
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: PPUSH
10020: CALL_OW 69
10024: PUSH
10025: FOR_IN
10026: IFFALSE 10131
// begin if GetMultiCargo ( i ) [ 4 ] = 0 and GetSide ( i ) = 1 then
10028: LD_VAR 0 1
10032: PPUSH
10033: CALL 83317 0 1
10037: PUSH
10038: LD_INT 4
10040: ARRAY
10041: PUSH
10042: LD_INT 0
10044: EQUAL
10045: IFFALSE 10062
10047: PUSH
10048: LD_VAR 0 1
10052: PPUSH
10053: CALL_OW 255
10057: PUSH
10058: LD_INT 1
10060: EQUAL
10061: AND
10062: IFFALSE 10076
// SetSide ( i , 4 ) ;
10064: LD_VAR 0 1
10068: PPUSH
10069: LD_INT 4
10071: PPUSH
10072: CALL_OW 235
// if GetSide ( i ) = 4 then
10076: LD_VAR 0 1
10080: PPUSH
10081: CALL_OW 255
10085: PUSH
10086: LD_INT 4
10088: EQUAL
10089: IFFALSE 10129
// if not IsInArea ( i , PlayerSpawn ) then
10091: LD_VAR 0 1
10095: PPUSH
10096: LD_INT 4
10098: PPUSH
10099: CALL_OW 308
10103: NOT
10104: IFFALSE 10120
// ComMoveToArea ( i , PlayerSpawn ) else
10106: LD_VAR 0 1
10110: PPUSH
10111: LD_INT 4
10113: PPUSH
10114: CALL_OW 113
10118: GO 10129
// RemoveUnit ( i ) ;
10120: LD_VAR 0 1
10124: PPUSH
10125: CALL_OW 64
// end ;
10129: GO 10025
10131: POP
10132: POP
// end ;
10133: PPOPN 1
10135: END
// every 0 0$3 trigger secondPass = 1 and FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_type , unit_vehicle ] ] ) do var i , enemyVehs , dec ;
10136: LD_EXP 20
10140: PUSH
10141: LD_INT 1
10143: EQUAL
10144: IFFALSE 10190
10146: PUSH
10147: LD_INT 12
10149: PPUSH
10150: LD_INT 22
10152: PUSH
10153: LD_INT 3
10155: PUSH
10156: EMPTY
10157: LIST
10158: LIST
10159: PUSH
10160: LD_INT 101
10162: PUSH
10163: LD_INT 1
10165: PUSH
10166: EMPTY
10167: LIST
10168: LIST
10169: PUSH
10170: LD_INT 21
10172: PUSH
10173: LD_INT 2
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: PUSH
10180: EMPTY
10181: LIST
10182: LIST
10183: LIST
10184: PPUSH
10185: CALL_OW 70
10189: AND
10190: IFFALSE 10775
10192: GO 10194
10194: DISABLE
10195: LD_INT 0
10197: PPUSH
10198: PPUSH
10199: PPUSH
// begin DialogueOn ;
10200: CALL_OW 6
// CenterNowOnUnits ( i ) ;
10204: LD_VAR 0 1
10208: PPUSH
10209: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10213: LD_INT 22
10215: PUSH
10216: LD_INT 1
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: PUSH
10223: LD_INT 26
10225: PUSH
10226: LD_INT 1
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: PUSH
10233: LD_INT 2
10235: PUSH
10236: LD_INT 25
10238: PUSH
10239: LD_INT 1
10241: PUSH
10242: EMPTY
10243: LIST
10244: LIST
10245: PUSH
10246: LD_INT 25
10248: PUSH
10249: LD_INT 2
10251: PUSH
10252: EMPTY
10253: LIST
10254: LIST
10255: PUSH
10256: LD_INT 25
10258: PUSH
10259: LD_INT 3
10261: PUSH
10262: EMPTY
10263: LIST
10264: LIST
10265: PUSH
10266: LD_INT 25
10268: PUSH
10269: LD_INT 4
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: PUSH
10276: LD_INT 25
10278: PUSH
10279: LD_INT 5
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: PUSH
10286: LD_INT 25
10288: PUSH
10289: LD_INT 8
10291: PUSH
10292: EMPTY
10293: LIST
10294: LIST
10295: PUSH
10296: EMPTY
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: LIST
10309: PPUSH
10310: CALL_OW 69
10314: PPUSH
10315: LD_STRING DT1-Sol1-1
10317: PPUSH
10318: LD_STRING DT1-FSol1-1
10320: PPUSH
10321: CALL 13074 0 3
// dec := ShowQuery2 ;
10325: LD_ADDR_VAR 0 3
10329: PUSH
10330: CALL 13558 0 0
10334: ST_TO_ADDR
// if dec = 1 then
10335: LD_VAR 0 3
10339: PUSH
10340: LD_INT 1
10342: EQUAL
10343: IFFALSE 10485
// begin Say ( JMM , D2-JMM-1 ) ;
10345: LD_EXP 1
10349: PPUSH
10350: LD_STRING D2-JMM-1
10352: PPUSH
10353: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10357: LD_EXP 15
10361: PPUSH
10362: LD_STRING D2-Pow-1
10364: PPUSH
10365: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
10369: LD_EXP 1
10373: PPUSH
10374: LD_STRING D2a-JMM-1
10376: PPUSH
10377: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
10381: LD_EXP 15
10385: PPUSH
10386: LD_STRING D2a-Pow-1
10388: PPUSH
10389: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
10393: LD_EXP 1
10397: PPUSH
10398: LD_STRING D2a-JMM-2
10400: PPUSH
10401: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10405: LD_EXP 15
10409: PPUSH
10410: LD_STRING D2a-Pow-2
10412: PPUSH
10413: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10417: LD_EXP 1
10421: PPUSH
10422: LD_STRING D2a-JMM-3
10424: PPUSH
10425: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10429: LD_EXP 15
10433: PPUSH
10434: LD_STRING D2a-Pow-3
10436: PPUSH
10437: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10441: LD_EXP 1
10445: PPUSH
10446: LD_STRING D2c-JMM-1
10448: PPUSH
10449: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10453: LD_EXP 15
10457: PPUSH
10458: LD_STRING D2c-Pow-1
10460: PPUSH
10461: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10465: LD_EXP 1
10469: PPUSH
10470: LD_STRING D2c-JMM-2
10472: PPUSH
10473: CALL_OW 88
// secondPass := 2 ;
10477: LD_ADDR_EXP 20
10481: PUSH
10482: LD_INT 2
10484: ST_TO_ADDR
// end ; if dec = 2 then
10485: LD_VAR 0 3
10489: PUSH
10490: LD_INT 2
10492: EQUAL
10493: IFFALSE 10587
// begin Say ( JMM , D2-JMM-1 ) ;
10495: LD_EXP 1
10499: PPUSH
10500: LD_STRING D2-JMM-1
10502: PPUSH
10503: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10507: LD_EXP 15
10511: PPUSH
10512: LD_STRING D2-Pow-1
10514: PPUSH
10515: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
10519: LD_EXP 1
10523: PPUSH
10524: LD_STRING D2b-JMM-1
10526: PPUSH
10527: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
10531: LD_EXP 15
10535: PPUSH
10536: LD_STRING D2b-Pow-1
10538: PPUSH
10539: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10543: LD_EXP 1
10547: PPUSH
10548: LD_STRING D2c-JMM-1
10550: PPUSH
10551: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10555: LD_EXP 15
10559: PPUSH
10560: LD_STRING D2c-Pow-1
10562: PPUSH
10563: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10567: LD_EXP 1
10571: PPUSH
10572: LD_STRING D2c-JMM-2
10574: PPUSH
10575: CALL_OW 88
// secondPass := 2 ;
10579: LD_ADDR_EXP 20
10583: PUSH
10584: LD_INT 2
10586: ST_TO_ADDR
// end ; DialogueOff ;
10587: CALL_OW 7
// if secondPass = 2 then
10591: LD_EXP 20
10595: PUSH
10596: LD_INT 2
10598: EQUAL
10599: IFFALSE 10603
// exit ;
10601: GO 10775
// Query ( HelpRequest ) ;
10603: LD_STRING HelpRequest
10605: PPUSH
10606: CALL_OW 97
// SetAreaMapShow ( helpRequestArea , 1 ) ;
10610: LD_INT 27
10612: PPUSH
10613: LD_INT 1
10615: PPUSH
10616: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
10620: LD_INT 35
10622: PPUSH
10623: CALL_OW 67
// until IsInArea ( JMM , helpRequestArea ) ;
10627: LD_EXP 1
10631: PPUSH
10632: LD_INT 27
10634: PPUSH
10635: CALL_OW 308
10639: IFFALSE 10620
// SetAreaMapShow ( helpRequestArea , 0 ) ;
10641: LD_INT 27
10643: PPUSH
10644: LD_INT 0
10646: PPUSH
10647: CALL_OW 424
// DialogueOn ;
10651: CALL_OW 6
// Say ( JMM , D2-JMM-1 ) ;
10655: LD_EXP 1
10659: PPUSH
10660: LD_STRING D2-JMM-1
10662: PPUSH
10663: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10667: LD_EXP 15
10671: PPUSH
10672: LD_STRING D2-Pow-1
10674: PPUSH
10675: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
10679: LD_EXP 1
10683: PPUSH
10684: LD_STRING D2b-JMM-1
10686: PPUSH
10687: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10691: LD_EXP 15
10695: PPUSH
10696: LD_STRING D2a-Pow-2
10698: PPUSH
10699: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10703: LD_EXP 1
10707: PPUSH
10708: LD_STRING D2a-JMM-3
10710: PPUSH
10711: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10715: LD_EXP 15
10719: PPUSH
10720: LD_STRING D2a-Pow-3
10722: PPUSH
10723: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10727: LD_EXP 1
10731: PPUSH
10732: LD_STRING D2c-JMM-1
10734: PPUSH
10735: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10739: LD_EXP 15
10743: PPUSH
10744: LD_STRING D2c-Pow-1
10746: PPUSH
10747: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10751: LD_EXP 1
10755: PPUSH
10756: LD_STRING D2c-JMM-2
10758: PPUSH
10759: CALL_OW 88
// DialogueOff ;
10763: CALL_OW 7
// secondPass := 2 ;
10767: LD_ADDR_EXP 20
10771: PUSH
10772: LD_INT 2
10774: ST_TO_ADDR
// end ;
10775: PPOPN 3
10777: END
// every 0 0$1 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) do var vehicles ;
10778: LD_EXP 21
10782: PUSH
10783: LD_INT 1
10785: EQUAL
10786: IFFALSE 10807
10788: PUSH
10789: LD_INT 11
10791: PPUSH
10792: LD_INT 22
10794: PUSH
10795: LD_INT 3
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: PPUSH
10802: CALL_OW 70
10806: AND
10807: IFFALSE 11290
10809: GO 10811
10811: DISABLE
10812: LD_INT 0
10814: PPUSH
// begin vehicles := FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
10815: LD_ADDR_VAR 0 1
10819: PUSH
10820: LD_INT 11
10822: PPUSH
10823: LD_INT 22
10825: PUSH
10826: LD_INT 3
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: PPUSH
10833: CALL_OW 70
10837: ST_TO_ADDR
// if not vehicles then
10838: LD_VAR 0 1
10842: NOT
10843: IFFALSE 10847
// exit ;
10845: GO 11290
// repeat wait ( 0 0$1 ) ;
10847: LD_INT 35
10849: PPUSH
10850: CALL_OW 67
// until UnitFilter ( vehicles , [ f_see , 1 ] ) ;
10854: LD_VAR 0 1
10858: PPUSH
10859: LD_INT 101
10861: PUSH
10862: LD_INT 1
10864: PUSH
10865: EMPTY
10866: LIST
10867: LIST
10868: PPUSH
10869: CALL_OW 72
10873: IFFALSE 10847
// CenterNowOnUnits ( UnitFilter ( vehicles , [ f_see , 1 ] ) [ 1 ] ) ;
10875: LD_VAR 0 1
10879: PPUSH
10880: LD_INT 101
10882: PUSH
10883: LD_INT 1
10885: PUSH
10886: EMPTY
10887: LIST
10888: LIST
10889: PPUSH
10890: CALL_OW 72
10894: PUSH
10895: LD_INT 1
10897: ARRAY
10898: PPUSH
10899: CALL_OW 87
// DialogueOn ;
10903: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10907: LD_INT 22
10909: PUSH
10910: LD_INT 1
10912: PUSH
10913: EMPTY
10914: LIST
10915: LIST
10916: PUSH
10917: LD_INT 26
10919: PUSH
10920: LD_INT 1
10922: PUSH
10923: EMPTY
10924: LIST
10925: LIST
10926: PUSH
10927: LD_INT 23
10929: PUSH
10930: LD_INT 1
10932: PUSH
10933: EMPTY
10934: LIST
10935: LIST
10936: PUSH
10937: LD_INT 2
10939: PUSH
10940: LD_INT 25
10942: PUSH
10943: LD_INT 1
10945: PUSH
10946: EMPTY
10947: LIST
10948: LIST
10949: PUSH
10950: LD_INT 25
10952: PUSH
10953: LD_INT 2
10955: PUSH
10956: EMPTY
10957: LIST
10958: LIST
10959: PUSH
10960: LD_INT 25
10962: PUSH
10963: LD_INT 3
10965: PUSH
10966: EMPTY
10967: LIST
10968: LIST
10969: PUSH
10970: LD_INT 25
10972: PUSH
10973: LD_INT 4
10975: PUSH
10976: EMPTY
10977: LIST
10978: LIST
10979: PUSH
10980: LD_INT 25
10982: PUSH
10983: LD_INT 5
10985: PUSH
10986: EMPTY
10987: LIST
10988: LIST
10989: PUSH
10990: LD_INT 25
10992: PUSH
10993: LD_INT 8
10995: PUSH
10996: EMPTY
10997: LIST
10998: LIST
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: PPUSH
11015: CALL_OW 69
11019: PPUSH
11020: LD_STRING DT1-Sol1-1
11022: PPUSH
11023: LD_STRING DT1-FSol1-1
11025: PPUSH
11026: CALL 13074 0 3
// Say ( JMM , DT1-JMM-1 ) ;
11030: LD_EXP 1
11034: PPUSH
11035: LD_STRING DT1-JMM-1
11037: PPUSH
11038: CALL_OW 88
// DialogueOff ;
11042: CALL_OW 7
// repeat wait ( 0 0$05 ) ;
11046: LD_INT 175
11048: PPUSH
11049: CALL_OW 67
// until FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter > 2 ;
11053: LD_INT 11
11055: PPUSH
11056: LD_INT 22
11058: PUSH
11059: LD_INT 3
11061: PUSH
11062: EMPTY
11063: LIST
11064: LIST
11065: PUSH
11066: LD_INT 50
11068: PUSH
11069: EMPTY
11070: LIST
11071: PUSH
11072: LD_INT 2
11074: PUSH
11075: LD_INT 21
11077: PUSH
11078: LD_INT 2
11080: PUSH
11081: EMPTY
11082: LIST
11083: LIST
11084: PUSH
11085: LD_INT 21
11087: PUSH
11088: LD_INT 1
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: PUSH
11095: EMPTY
11096: LIST
11097: LIST
11098: LIST
11099: PUSH
11100: EMPTY
11101: LIST
11102: LIST
11103: LIST
11104: PPUSH
11105: CALL_OW 70
11109: PUSH
11110: LD_INT 0
11112: EQUAL
11113: IFFALSE 11125
11115: PUSH
11116: LD_EXP 22
11120: PUSH
11121: LD_INT 2
11123: GREATER
11124: AND
11125: IFFALSE 11046
// DialogueOn ;
11127: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
11131: LD_EXP 1
11135: PPUSH
11136: LD_STRING DT1a-JMM-1
11138: PPUSH
11139: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
11143: LD_INT 22
11145: PUSH
11146: LD_INT 1
11148: PUSH
11149: EMPTY
11150: LIST
11151: LIST
11152: PUSH
11153: LD_INT 26
11155: PUSH
11156: LD_INT 1
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: PUSH
11163: LD_INT 23
11165: PUSH
11166: LD_INT 1
11168: PUSH
11169: EMPTY
11170: LIST
11171: LIST
11172: PUSH
11173: LD_INT 2
11175: PUSH
11176: LD_INT 25
11178: PUSH
11179: LD_INT 1
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: PUSH
11186: LD_INT 25
11188: PUSH
11189: LD_INT 2
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: PUSH
11196: LD_INT 25
11198: PUSH
11199: LD_INT 3
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: PUSH
11206: LD_INT 25
11208: PUSH
11209: LD_INT 4
11211: PUSH
11212: EMPTY
11213: LIST
11214: LIST
11215: PUSH
11216: LD_INT 25
11218: PUSH
11219: LD_INT 5
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: PUSH
11226: LD_INT 25
11228: PUSH
11229: LD_INT 8
11231: PUSH
11232: EMPTY
11233: LIST
11234: LIST
11235: PUSH
11236: EMPTY
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: PPUSH
11251: CALL_OW 69
11255: PPUSH
11256: LD_STRING DT1a-Sol1-1
11258: PPUSH
11259: LD_STRING DT1a-FSol1-1
11261: PPUSH
11262: CALL 13074 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
11266: LD_EXP 1
11270: PPUSH
11271: LD_STRING DT1a-JMM-2
11273: PPUSH
11274: CALL_OW 88
// DialogueOff ;
11278: CALL_OW 7
// vehicleTeleported := 2 ;
11282: LD_ADDR_EXP 21
11286: PUSH
11287: LD_INT 2
11289: ST_TO_ADDR
// end ;
11290: PPOPN 1
11292: END
// every 0 0$2 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] ] ) do var i , vehicles , speaker ;
11293: LD_EXP 21
11297: PUSH
11298: LD_INT 3
11300: EQUAL
11301: IFFALSE 11336
11303: PUSH
11304: LD_INT 11
11306: PPUSH
11307: LD_INT 22
11309: PUSH
11310: LD_INT 3
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: PUSH
11317: LD_INT 101
11319: PUSH
11320: LD_INT 1
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: PUSH
11327: EMPTY
11328: LIST
11329: LIST
11330: PPUSH
11331: CALL_OW 70
11335: AND
11336: IFFALSE 11621
11338: GO 11340
11340: DISABLE
11341: LD_INT 0
11343: PPUSH
11344: PPUSH
11345: PPUSH
// begin wait ( 0 0$0.3 ) ;
11346: LD_INT 10
11348: PPUSH
11349: CALL_OW 67
// DialogueOn ;
11353: CALL_OW 6
// speaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
11357: LD_ADDR_VAR 0 3
11361: PUSH
11362: LD_INT 22
11364: PUSH
11365: LD_INT 1
11367: PUSH
11368: EMPTY
11369: LIST
11370: LIST
11371: PUSH
11372: LD_INT 23
11374: PUSH
11375: LD_INT 1
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: PUSH
11382: LD_INT 26
11384: PUSH
11385: LD_INT 1
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: PUSH
11392: LD_INT 2
11394: PUSH
11395: LD_INT 25
11397: PUSH
11398: LD_INT 1
11400: PUSH
11401: EMPTY
11402: LIST
11403: LIST
11404: PUSH
11405: LD_INT 25
11407: PUSH
11408: LD_INT 2
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: PUSH
11415: LD_INT 25
11417: PUSH
11418: LD_INT 3
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: PUSH
11425: LD_INT 25
11427: PUSH
11428: LD_INT 4
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: PUSH
11435: LD_INT 25
11437: PUSH
11438: LD_INT 5
11440: PUSH
11441: EMPTY
11442: LIST
11443: LIST
11444: PUSH
11445: LD_INT 25
11447: PUSH
11448: LD_INT 8
11450: PUSH
11451: EMPTY
11452: LIST
11453: LIST
11454: PUSH
11455: EMPTY
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: PUSH
11464: EMPTY
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: PPUSH
11470: CALL_OW 69
11474: PPUSH
11475: LD_STRING DT2-Sol1-1
11477: PPUSH
11478: LD_STRING DT2-FSol1-1
11480: PPUSH
11481: CALL 13074 0 3
11485: ST_TO_ADDR
// DialogueOff ;
11486: CALL_OW 7
// repeat wait ( 0 0$5 ) ;
11490: LD_INT 175
11492: PPUSH
11493: CALL_OW 67
// until not FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] ] ) ;
11497: LD_INT 11
11499: PPUSH
11500: LD_INT 22
11502: PUSH
11503: LD_INT 3
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: PUSH
11510: LD_INT 50
11512: PUSH
11513: EMPTY
11514: LIST
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: PPUSH
11520: CALL_OW 70
11524: NOT
11525: IFFALSE 11490
// wait ( 0 0$2 ) ;
11527: LD_INT 70
11529: PPUSH
11530: CALL_OW 67
// vehicleTeleported := 4 ;
11534: LD_ADDR_EXP 21
11538: PUSH
11539: LD_INT 4
11541: ST_TO_ADDR
// DialogueOn ;
11542: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
11546: LD_EXP 1
11550: PPUSH
11551: LD_STRING DT2a-JMM-1
11553: PPUSH
11554: CALL_OW 88
// if speaker then
11558: LD_VAR 0 3
11562: IFFALSE 11605
// if GetSex ( speaker ) = 1 then
11564: LD_VAR 0 3
11568: PPUSH
11569: CALL_OW 258
11573: PUSH
11574: LD_INT 1
11576: EQUAL
11577: IFFALSE 11593
// Say ( speaker , DT2a-Sol1-1 ) else
11579: LD_VAR 0 3
11583: PPUSH
11584: LD_STRING DT2a-Sol1-1
11586: PPUSH
11587: CALL_OW 88
11591: GO 11605
// Say ( speaker , DT2a-FSol1-1 ) ;
11593: LD_VAR 0 3
11597: PPUSH
11598: LD_STRING DT2a-FSol1-1
11600: PPUSH
11601: CALL_OW 88
// Say ( Donaldson , DT2a-Don-1 ) ;
11605: LD_EXP 3
11609: PPUSH
11610: LD_STRING DT2a-Don-1
11612: PPUSH
11613: CALL_OW 88
// DialogueOff ;
11617: CALL_OW 7
// end ;
11621: PPOPN 3
11623: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
11624: LD_INT 1
11626: PPUSH
11627: LD_INT 45
11629: PPUSH
11630: LD_INT 74
11632: PPUSH
11633: CALL_OW 293
11637: IFFALSE 11814
11639: GO 11641
11641: DISABLE
// begin DialogueOn ;
11642: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
11646: LD_INT 36
11648: PPUSH
11649: LD_INT 55
11651: PPUSH
11652: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
11656: LD_INT 22
11658: PUSH
11659: LD_INT 1
11661: PUSH
11662: EMPTY
11663: LIST
11664: LIST
11665: PUSH
11666: LD_INT 23
11668: PUSH
11669: LD_INT 1
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: PUSH
11676: LD_INT 26
11678: PUSH
11679: LD_INT 1
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: PUSH
11686: LD_INT 2
11688: PUSH
11689: LD_INT 25
11691: PUSH
11692: LD_INT 1
11694: PUSH
11695: EMPTY
11696: LIST
11697: LIST
11698: PUSH
11699: LD_INT 25
11701: PUSH
11702: LD_INT 2
11704: PUSH
11705: EMPTY
11706: LIST
11707: LIST
11708: PUSH
11709: LD_INT 25
11711: PUSH
11712: LD_INT 3
11714: PUSH
11715: EMPTY
11716: LIST
11717: LIST
11718: PUSH
11719: LD_INT 25
11721: PUSH
11722: LD_INT 4
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: PUSH
11729: LD_INT 25
11731: PUSH
11732: LD_INT 5
11734: PUSH
11735: EMPTY
11736: LIST
11737: LIST
11738: PUSH
11739: LD_INT 25
11741: PUSH
11742: LD_INT 8
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: PUSH
11749: EMPTY
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: PUSH
11758: EMPTY
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: PPUSH
11764: CALL_OW 69
11768: PPUSH
11769: LD_STRING D5-Sol1-1
11771: PPUSH
11772: LD_STRING D5-FSol1-
11774: PPUSH
11775: CALL 13074 0 3
// if warWithLegion and IsOk ( Donaldson ) then
11779: LD_EXP 23
11783: IFFALSE 11796
11785: PUSH
11786: LD_EXP 3
11790: PPUSH
11791: CALL_OW 302
11795: AND
11796: IFFALSE 11810
// Say ( Donaldson , D5-Don-1 ) ;
11798: LD_EXP 3
11802: PPUSH
11803: LD_STRING D5-Don-1
11805: PPUSH
11806: CALL_OW 88
// DialogueOff ;
11810: CALL_OW 7
// end ;
11814: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
11815: LD_INT 1
11817: PPUSH
11818: LD_INT 10
11820: PPUSH
11821: CALL_OW 292
11825: IFTRUE 11839
11827: PUSH
11828: LD_INT 1
11830: PPUSH
11831: LD_INT 137
11833: PPUSH
11834: CALL_OW 292
11838: OR
11839: IFFALSE 11994
11841: GO 11843
11843: DISABLE
// begin DialogueOn ;
11844: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
11848: LD_INT 22
11850: PUSH
11851: LD_INT 1
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: PUSH
11858: LD_INT 23
11860: PUSH
11861: LD_INT 1
11863: PUSH
11864: EMPTY
11865: LIST
11866: LIST
11867: PUSH
11868: LD_INT 26
11870: PUSH
11871: LD_INT 1
11873: PUSH
11874: EMPTY
11875: LIST
11876: LIST
11877: PUSH
11878: LD_INT 2
11880: PUSH
11881: LD_INT 25
11883: PUSH
11884: LD_INT 1
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: PUSH
11891: LD_INT 25
11893: PUSH
11894: LD_INT 2
11896: PUSH
11897: EMPTY
11898: LIST
11899: LIST
11900: PUSH
11901: LD_INT 25
11903: PUSH
11904: LD_INT 3
11906: PUSH
11907: EMPTY
11908: LIST
11909: LIST
11910: PUSH
11911: LD_INT 25
11913: PUSH
11914: LD_INT 4
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: PUSH
11921: LD_INT 25
11923: PUSH
11924: LD_INT 5
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: PUSH
11931: LD_INT 25
11933: PUSH
11934: LD_INT 8
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: PPUSH
11956: CALL_OW 69
11960: PPUSH
11961: LD_STRING DT3-Sol1-1
11963: PPUSH
11964: LD_STRING DT3-FSol1-1
11966: PPUSH
11967: CALL 13074 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11971: LD_EXP 1
11975: PPUSH
11976: LD_STRING DT3-JMM-1
11978: PPUSH
11979: CALL_OW 88
// DialogueOff ;
11983: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11987: LD_STRING M2
11989: PPUSH
11990: CALL_OW 337
// end ;
11994: END
// every 0 0$1 trigger ruEscape = 0 and ( FilterUnitsInArea ( RuEastBase , [ f_side , 1 ] ) or FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_not , [ f_lives , 800 ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ) or GetLives ( rutp ) < 900 do
11995: LD_EXP 35
11999: PUSH
12000: LD_INT 0
12002: EQUAL
12003: IFFALSE 12084
12005: PUSH
12006: LD_INT 10
12008: PPUSH
12009: LD_INT 22
12011: PUSH
12012: LD_INT 1
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: PPUSH
12019: CALL_OW 70
12023: IFTRUE 12083
12025: PUSH
12026: LD_INT 10
12028: PPUSH
12029: LD_INT 22
12031: PUSH
12032: LD_INT 3
12034: PUSH
12035: EMPTY
12036: LIST
12037: LIST
12038: PUSH
12039: LD_INT 3
12041: PUSH
12042: LD_INT 24
12044: PUSH
12045: LD_INT 800
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: PUSH
12056: LD_INT 21
12058: PUSH
12059: LD_INT 2
12061: PUSH
12062: EMPTY
12063: LIST
12064: LIST
12065: PUSH
12066: LD_INT 58
12068: PUSH
12069: EMPTY
12070: LIST
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: PPUSH
12078: CALL_OW 70
12082: OR
12083: AND
12084: IFTRUE 12099
12086: PUSH
12087: LD_INT 137
12089: PPUSH
12090: CALL_OW 256
12094: PUSH
12095: LD_INT 900
12097: LESS
12098: OR
12099: IFFALSE 12112
12101: GO 12103
12103: DISABLE
// ruEscape := 1 ;
12104: LD_ADDR_EXP 35
12108: PUSH
12109: LD_INT 1
12111: ST_TO_ADDR
12112: END
// every 0 0$3 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or ruEscape = 1 do var i , unit , tmp ;
12113: LD_INT 3
12115: PPUSH
12116: CALL_OW 303
12120: IFTRUE 12131
12122: PUSH
12123: LD_INT 4
12125: PPUSH
12126: CALL_OW 303
12130: OR
12131: IFTRUE 12143
12133: PUSH
12134: LD_EXP 35
12138: PUSH
12139: LD_INT 1
12141: EQUAL
12142: OR
12143: IFFALSE 12738
12145: GO 12147
12147: DISABLE
12148: LD_INT 0
12150: PPUSH
12151: PPUSH
12152: PPUSH
// begin ruAI := 0 ;
12153: LD_ADDR_EXP 34
12157: PUSH
12158: LD_INT 0
12160: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
12161: LD_EXP 27
12165: PPUSH
12166: CALL_OW 122
// wait ( 0 0$1 ) ;
12170: LD_INT 35
12172: PPUSH
12173: CALL_OW 67
// DialogueOn ;
12177: CALL_OW 6
// PlaceSeeing ( 75 , 21 , 1 , 12 ) ;
12181: LD_INT 75
12183: PPUSH
12184: LD_INT 21
12186: PPUSH
12187: LD_INT 1
12189: PPUSH
12190: LD_INT 12
12192: PPUSH
12193: CALL_OW 330
// CenterNowOnXY ( 75 , 21 ) ;
12197: LD_INT 75
12199: PPUSH
12200: LD_INT 21
12202: PPUSH
12203: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
12207: LD_INT 10
12209: PPUSH
12210: CALL_OW 68
// Say ( JMM , D6-JMM-1 ) ;
12214: LD_EXP 1
12218: PPUSH
12219: LD_STRING D6-JMM-1
12221: PPUSH
12222: CALL_OW 88
// RemoveSeeing ( 75 , 21 , 1 ) ;
12226: LD_INT 75
12228: PPUSH
12229: LD_INT 21
12231: PPUSH
12232: LD_INT 1
12234: PPUSH
12235: CALL_OW 331
// DialogueOff ;
12239: CALL_OW 7
// for i in RuScientists do
12243: LD_ADDR_VAR 0 1
12247: PUSH
12248: LD_EXP 27
12252: PUSH
12253: FOR_IN
12254: IFFALSE 12290
// begin SetSide ( i , 6 ) ;
12256: LD_VAR 0 1
12260: PPUSH
12261: LD_INT 6
12263: PPUSH
12264: CALL_OW 235
// SetTag ( i , rand ( 1 , 3 ) ) ;
12268: LD_VAR 0 1
12272: PPUSH
12273: LD_INT 1
12275: PPUSH
12276: LD_INT 3
12278: PPUSH
12279: CALL_OW 12
12283: PPUSH
12284: CALL_OW 109
// end ;
12288: GO 12253
12290: POP
12291: POP
// repeat wait ( 0 0$1 ) ;
12292: LD_INT 35
12294: PPUSH
12295: CALL_OW 67
// for i in RuScientists do
12299: LD_ADDR_VAR 0 1
12303: PUSH
12304: LD_EXP 27
12308: PUSH
12309: FOR_IN
12310: IFFALSE 12729
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , i , 10 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
12312: LD_ADDR_VAR 0 3
12316: PUSH
12317: LD_INT 22
12319: PUSH
12320: LD_INT 3
12322: PUSH
12323: EMPTY
12324: LIST
12325: LIST
12326: PUSH
12327: LD_INT 91
12329: PUSH
12330: LD_VAR 0 1
12334: PUSH
12335: LD_INT 10
12337: PUSH
12338: EMPTY
12339: LIST
12340: LIST
12341: LIST
12342: PUSH
12343: LD_INT 21
12345: PUSH
12346: LD_INT 2
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: PUSH
12353: LD_INT 58
12355: PUSH
12356: EMPTY
12357: LIST
12358: PUSH
12359: EMPTY
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: PPUSH
12365: CALL_OW 69
12369: ST_TO_ADDR
// if tmp and not IsInUnit ( i ) then
12370: LD_VAR 0 3
12374: IFFALSE 12388
12376: PUSH
12377: LD_VAR 0 1
12381: PPUSH
12382: CALL_OW 310
12386: NOT
12387: AND
12388: IFFALSE 12416
// begin ComEnterUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
12390: LD_VAR 0 1
12394: PPUSH
12395: LD_VAR 0 3
12399: PPUSH
12400: LD_VAR 0 1
12404: PPUSH
12405: CALL_OW 74
12409: PPUSH
12410: CALL_OW 120
// continue ;
12414: GO 12309
// end ; if IsInUnit ( i ) then
12416: LD_VAR 0 1
12420: PPUSH
12421: CALL_OW 310
12425: IFFALSE 12444
// unit := IsInUnit ( i ) else
12427: LD_ADDR_VAR 0 2
12431: PUSH
12432: LD_VAR 0 1
12436: PPUSH
12437: CALL_OW 310
12441: ST_TO_ADDR
12442: GO 12454
// unit := i ;
12444: LD_ADDR_VAR 0 2
12448: PUSH
12449: LD_VAR 0 1
12453: ST_TO_ADDR
// case GetTag ( i ) of 1 :
12454: LD_VAR 0 1
12458: PPUSH
12459: CALL_OW 110
12463: PUSH
12464: LD_INT 1
12466: DOUBLE
12467: EQUAL
12468: IFTRUE 12472
12470: GO 12533
12472: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
12473: LD_VAR 0 2
12477: PPUSH
12478: LD_INT 137
12480: PPUSH
12481: CALL_OW 296
12485: PUSH
12486: LD_INT 13
12488: LESS
12489: IFFALSE 12500
12491: PUSH
12492: LD_INT 137
12494: PPUSH
12495: CALL_OW 302
12499: AND
12500: IFFALSE 12516
// ComEnterUnit ( unit , rutp ) else
12502: LD_VAR 0 2
12506: PPUSH
12507: LD_INT 137
12509: PPUSH
12510: CALL_OW 120
12514: GO 12531
// ComMoveXY ( unit , 16 , 28 ) ;
12516: LD_VAR 0 2
12520: PPUSH
12521: LD_INT 16
12523: PPUSH
12524: LD_INT 28
12526: PPUSH
12527: CALL_OW 111
// end ; 2 :
12531: GO 12727
12533: LD_INT 2
12535: DOUBLE
12536: EQUAL
12537: IFTRUE 12541
12539: GO 12559
12541: POP
// ComMoveXY ( unit , 97 , 2 ) ; 3 :
12542: LD_VAR 0 2
12546: PPUSH
12547: LD_INT 97
12549: PPUSH
12550: LD_INT 2
12552: PPUSH
12553: CALL_OW 111
12557: GO 12727
12559: LD_INT 3
12561: DOUBLE
12562: EQUAL
12563: IFTRUE 12567
12565: GO 12628
12567: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
12568: LD_VAR 0 2
12572: PPUSH
12573: LD_INT 137
12575: PPUSH
12576: CALL_OW 296
12580: PUSH
12581: LD_INT 13
12583: LESS
12584: IFFALSE 12595
12586: PUSH
12587: LD_INT 137
12589: PPUSH
12590: CALL_OW 302
12594: AND
12595: IFFALSE 12611
// ComEnterUnit ( unit , rutp ) else
12597: LD_VAR 0 2
12601: PPUSH
12602: LD_INT 137
12604: PPUSH
12605: CALL_OW 120
12609: GO 12626
// ComMoveXY ( unit , 128 , 155 ) ;
12611: LD_VAR 0 2
12615: PPUSH
12616: LD_INT 128
12618: PPUSH
12619: LD_INT 155
12621: PPUSH
12622: CALL_OW 111
// end ; 11 :
12626: GO 12727
12628: LD_INT 11
12630: DOUBLE
12631: EQUAL
12632: IFTRUE 12636
12634: GO 12654
12636: POP
// ComMoveXY ( unit , 16 , 28 ) ; 13 :
12637: LD_VAR 0 2
12641: PPUSH
12642: LD_INT 16
12644: PPUSH
12645: LD_INT 28
12647: PPUSH
12648: CALL_OW 111
12652: GO 12727
12654: LD_INT 13
12656: DOUBLE
12657: EQUAL
12658: IFTRUE 12662
12660: GO 12700
12662: POP
// begin if IsOk ( ruteleprt ) then
12663: LD_INT 10
12665: PPUSH
12666: CALL_OW 302
12670: IFFALSE 12686
// ComEnterUnit ( unit , ruteleprt ) else
12672: LD_VAR 0 2
12676: PPUSH
12677: LD_INT 10
12679: PPUSH
12680: CALL_OW 120
12684: GO 12698
// SetTag ( unit , 23 ) ;
12686: LD_VAR 0 2
12690: PPUSH
12691: LD_INT 23
12693: PPUSH
12694: CALL_OW 109
// end ; 23 :
12698: GO 12727
12700: LD_INT 23
12702: DOUBLE
12703: EQUAL
12704: IFTRUE 12708
12706: GO 12726
12708: POP
// ComMoveXY ( unit , 128 , 155 ) ; end ;
12709: LD_VAR 0 2
12713: PPUSH
12714: LD_INT 128
12716: PPUSH
12717: LD_INT 155
12719: PPUSH
12720: CALL_OW 111
12724: GO 12727
12726: POP
// end ;
12727: GO 12309
12729: POP
12730: POP
// until not RuScientists ;
12731: LD_EXP 27
12735: NOT
12736: IFFALSE 12292
// end ;
12738: PPOPN 3
12740: END
// every 0 0$1 trigger ruAI = 0 and RuScientists and FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do var i , unit , veh , tmp ;
12741: LD_EXP 34
12745: PUSH
12746: LD_INT 0
12748: EQUAL
12749: IFFALSE 12757
12751: PUSH
12752: LD_EXP 27
12756: AND
12757: IFFALSE 12818
12759: PUSH
12760: LD_INT 22
12762: PUSH
12763: LD_INT 6
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: PUSH
12770: LD_INT 2
12772: PUSH
12773: LD_INT 95
12775: PUSH
12776: LD_INT 13
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: PUSH
12783: LD_INT 95
12785: PUSH
12786: LD_INT 14
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: PUSH
12793: LD_INT 95
12795: PUSH
12796: LD_INT 25
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: PUSH
12803: EMPTY
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: PUSH
12809: EMPTY
12810: LIST
12811: LIST
12812: PPUSH
12813: CALL_OW 69
12817: AND
12818: IFFALSE 13031
12820: GO 12822
12822: DISABLE
12823: LD_INT 0
12825: PPUSH
12826: PPUSH
12827: PPUSH
12828: PPUSH
// begin enable ;
12829: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do
12830: LD_ADDR_VAR 0 1
12834: PUSH
12835: LD_INT 22
12837: PUSH
12838: LD_INT 6
12840: PUSH
12841: EMPTY
12842: LIST
12843: LIST
12844: PUSH
12845: LD_INT 2
12847: PUSH
12848: LD_INT 95
12850: PUSH
12851: LD_INT 13
12853: PUSH
12854: EMPTY
12855: LIST
12856: LIST
12857: PUSH
12858: LD_INT 95
12860: PUSH
12861: LD_INT 14
12863: PUSH
12864: EMPTY
12865: LIST
12866: LIST
12867: PUSH
12868: LD_INT 95
12870: PUSH
12871: LD_INT 25
12873: PUSH
12874: EMPTY
12875: LIST
12876: LIST
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: PPUSH
12888: CALL_OW 69
12892: PUSH
12893: FOR_IN
12894: IFFALSE 13029
// begin if i in RuScientists then
12896: LD_VAR 0 1
12900: PUSH
12901: LD_EXP 27
12905: IN
12906: IFFALSE 12935
// begin RuScientists = RuScientists diff i ;
12908: LD_ADDR_EXP 27
12912: PUSH
12913: LD_EXP 27
12917: PUSH
12918: LD_VAR 0 1
12922: DIFF
12923: ST_TO_ADDR
// RemoveUnit ( i ) ;
12924: LD_VAR 0 1
12928: PPUSH
12929: CALL_OW 64
// continue ;
12933: GO 12893
// end ; if i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_manual ] ] ) then
12935: LD_VAR 0 1
12939: PUSH
12940: LD_INT 22
12942: PUSH
12943: LD_INT 6
12945: PUSH
12946: EMPTY
12947: LIST
12948: LIST
12949: PUSH
12950: LD_INT 33
12952: PUSH
12953: LD_INT 1
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: PPUSH
12964: CALL_OW 69
12968: IN
12969: IFFALSE 13027
// begin if IsDrivenBy ( i ) in RuScientists then
12971: LD_VAR 0 1
12975: PPUSH
12976: CALL_OW 311
12980: PUSH
12981: LD_EXP 27
12985: IN
12986: IFFALSE 13004
// RuScientists = RuScientists diff i ;
12988: LD_ADDR_EXP 27
12992: PUSH
12993: LD_EXP 27
12997: PUSH
12998: LD_VAR 0 1
13002: DIFF
13003: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
13004: LD_VAR 0 1
13008: PPUSH
13009: CALL_OW 311
13013: PPUSH
13014: CALL_OW 64
// RemoveUnit ( i ) ;
13018: LD_VAR 0 1
13022: PPUSH
13023: CALL_OW 64
// end ; end ;
13027: GO 12893
13029: POP
13030: POP
// end ; end_of_file
13031: PPOPN 4
13033: END
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
13034: LD_INT 0
13036: PPUSH
13037: PPUSH
// for i in charactersList do
13038: LD_ADDR_VAR 0 4
13042: PUSH
13043: LD_VAR 0 1
13047: PUSH
13048: FOR_IN
13049: IFFALSE 13067
// SaveCharacters ( i , ident ) ;
13051: LD_VAR 0 4
13055: PPUSH
13056: LD_VAR 0 2
13060: PPUSH
13061: CALL_OW 38
13065: GO 13048
13067: POP
13068: POP
// end ;
13069: LD_VAR 0 3
13073: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
13074: LD_INT 0
13076: PPUSH
13077: PPUSH
13078: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
13079: LD_ADDR_VAR 0 1
13083: PUSH
13084: LD_VAR 0 1
13088: PUSH
13089: LD_EXP 1
13093: PUSH
13094: LD_EXP 7
13098: PUSH
13099: LD_EXP 3
13103: PUSH
13104: LD_EXP 4
13108: PUSH
13109: LD_EXP 5
13113: PUSH
13114: LD_EXP 2
13118: PUSH
13119: LD_EXP 12
13123: PUSH
13124: LD_EXP 13
13128: PUSH
13129: LD_EXP 9
13133: PUSH
13134: LD_EXP 11
13138: PUSH
13139: LD_EXP 6
13143: PUSH
13144: LD_EXP 8
13148: PUSH
13149: LD_EXP 10
13153: PUSH
13154: LD_EXP 15
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: DIFF
13175: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
13176: LD_ADDR_VAR 0 6
13180: PUSH
13181: LD_VAR 0 1
13185: PUSH
13186: LD_INT 1
13188: PPUSH
13189: LD_VAR 0 1
13193: PPUSH
13194: CALL_OW 12
13198: ARRAY
13199: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
13200: LD_VAR 0 6
13204: PPUSH
13205: CALL_OW 258
13209: PUSH
13210: LD_INT 1
13212: EQUAL
13213: IFFALSE 13231
// Say ( speaker , dialogMID ) else
13215: LD_VAR 0 6
13219: PPUSH
13220: LD_VAR 0 2
13224: PPUSH
13225: CALL_OW 88
13229: GO 13245
// Say ( speaker , dialogFID ) ;
13231: LD_VAR 0 6
13235: PPUSH
13236: LD_VAR 0 3
13240: PPUSH
13241: CALL_OW 88
// result := speaker ;
13245: LD_ADDR_VAR 0 4
13249: PUSH
13250: LD_VAR 0 6
13254: ST_TO_ADDR
// end ;
13255: LD_VAR 0 4
13259: RET
// export function PrepareDifficulty ; var tmp ; begin
13260: LD_INT 0
13262: PPUSH
13263: PPUSH
// if Difficulty = 1 then
13264: LD_OWVAR 67
13268: PUSH
13269: LD_INT 1
13271: EQUAL
13272: IFFALSE 13292
// begin RuSolMinLevel = 6 ;
13274: LD_ADDR_EXP 29
13278: PUSH
13279: LD_INT 6
13281: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
13282: LD_ADDR_EXP 30
13286: PUSH
13287: LD_INT 8
13289: ST_TO_ADDR
// end else
13290: GO 13532
// if Difficulty = 2 then
13292: LD_OWVAR 67
13296: PUSH
13297: LD_INT 2
13299: EQUAL
13300: IFFALSE 13396
// begin RuSolMinLevel = 7 ;
13302: LD_ADDR_EXP 29
13306: PUSH
13307: LD_INT 7
13309: ST_TO_ADDR
// RuSolMaxLevel = 9 ;
13310: LD_ADDR_EXP 30
13314: PUSH
13315: LD_INT 9
13317: ST_TO_ADDR
// uc_nation = 3 ;
13318: LD_ADDR_OWVAR 21
13322: PUSH
13323: LD_INT 3
13325: ST_TO_ADDR
// uc_side = 3 ;
13326: LD_ADDR_OWVAR 20
13330: PUSH
13331: LD_INT 3
13333: ST_TO_ADDR
// bc_level = 10 ;
13334: LD_ADDR_OWVAR 43
13338: PUSH
13339: LD_INT 10
13341: ST_TO_ADDR
// bc_type = b_turret ;
13342: LD_ADDR_OWVAR 42
13346: PUSH
13347: LD_INT 33
13349: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
13350: LD_ADDR_VAR 0 2
13354: PUSH
13355: LD_INT 86
13357: PPUSH
13358: LD_INT 34
13360: PPUSH
13361: LD_INT 2
13363: PPUSH
13364: CALL_OW 47
13368: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13369: LD_VAR 0 2
13373: PPUSH
13374: LD_INT 49
13376: PPUSH
13377: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
13381: LD_INT 64
13383: PPUSH
13384: LD_INT 3
13386: PPUSH
13387: LD_INT 1
13389: PPUSH
13390: CALL_OW 322
// end else
13394: GO 13532
// begin RuSolMinLevel = 8 ;
13396: LD_ADDR_EXP 29
13400: PUSH
13401: LD_INT 8
13403: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13404: LD_ADDR_EXP 30
13408: PUSH
13409: LD_INT 10
13411: ST_TO_ADDR
// uc_nation = 3 ;
13412: LD_ADDR_OWVAR 21
13416: PUSH
13417: LD_INT 3
13419: ST_TO_ADDR
// uc_side = 3 ;
13420: LD_ADDR_OWVAR 20
13424: PUSH
13425: LD_INT 3
13427: ST_TO_ADDR
// bc_level = 10 ;
13428: LD_ADDR_OWVAR 43
13432: PUSH
13433: LD_INT 10
13435: ST_TO_ADDR
// bc_type = b_turret ;
13436: LD_ADDR_OWVAR 42
13440: PUSH
13441: LD_INT 33
13443: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
13444: LD_ADDR_VAR 0 2
13448: PUSH
13449: LD_INT 86
13451: PPUSH
13452: LD_INT 34
13454: PPUSH
13455: LD_INT 2
13457: PPUSH
13458: CALL_OW 47
13462: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13463: LD_VAR 0 2
13467: PPUSH
13468: LD_INT 49
13470: PPUSH
13471: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
13475: LD_ADDR_VAR 0 2
13479: PUSH
13480: LD_INT 93
13482: PPUSH
13483: LD_INT 31
13485: PPUSH
13486: LD_INT 2
13488: PPUSH
13489: CALL_OW 47
13493: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13494: LD_VAR 0 2
13498: PPUSH
13499: LD_INT 49
13501: PPUSH
13502: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
13506: LD_INT 64
13508: PPUSH
13509: LD_INT 3
13511: PPUSH
13512: LD_INT 1
13514: PPUSH
13515: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
13519: LD_INT 65
13521: PPUSH
13522: LD_INT 3
13524: PPUSH
13525: LD_INT 1
13527: PPUSH
13528: CALL_OW 322
// end ; end ;
13532: LD_VAR 0 1
13536: RET
// export function ShowQuery1 ; begin
13537: LD_INT 0
13539: PPUSH
// result := Query ( Q1 ) ;
13540: LD_ADDR_VAR 0 1
13544: PUSH
13545: LD_STRING Q1
13547: PPUSH
13548: CALL_OW 97
13552: ST_TO_ADDR
// end ;
13553: LD_VAR 0 1
13557: RET
// export function ShowQuery2 ; begin
13558: LD_INT 0
13560: PPUSH
// result := Query ( Q1a ) ;
13561: LD_ADDR_VAR 0 1
13565: PUSH
13566: LD_STRING Q1a
13568: PPUSH
13569: CALL_OW 97
13573: ST_TO_ADDR
// end ;
13574: LD_VAR 0 1
13578: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
13579: LD_INT 0
13581: PPUSH
13582: PPUSH
13583: PPUSH
13584: PPUSH
// for i = 1 to count do
13585: LD_ADDR_VAR 0 8
13589: PUSH
13590: DOUBLE
13591: LD_INT 1
13593: DEC
13594: ST_TO_ADDR
13595: LD_VAR 0 6
13599: PUSH
13600: FOR_TO
13601: IFFALSE 13682
// begin uc_side = side ;
13603: LD_ADDR_OWVAR 20
13607: PUSH
13608: LD_VAR 0 1
13612: ST_TO_ADDR
// uc_nation = nation ;
13613: LD_ADDR_OWVAR 21
13617: PUSH
13618: LD_VAR 0 2
13622: ST_TO_ADDR
// hc_gallery =  ;
13623: LD_ADDR_OWVAR 33
13627: PUSH
13628: LD_STRING 
13630: ST_TO_ADDR
// hc_name =  ;
13631: LD_ADDR_OWVAR 26
13635: PUSH
13636: LD_STRING 
13638: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
13639: LD_INT 0
13641: PPUSH
13642: LD_VAR 0 5
13646: PPUSH
13647: LD_VAR 0 4
13651: PPUSH
13652: CALL_OW 380
// un = CreateHuman ;
13656: LD_ADDR_VAR 0 10
13660: PUSH
13661: CALL_OW 44
13665: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
13666: LD_VAR 0 10
13670: PPUSH
13671: LD_VAR 0 3
13675: PPUSH
13676: CALL_OW 52
// end ;
13680: GO 13600
13682: POP
13683: POP
// end ;
13684: LD_VAR 0 7
13688: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , list ; begin
13689: LD_INT 0
13691: PPUSH
13692: PPUSH
13693: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
13694: LD_ADDR_VAR 0 6
13698: PUSH
13699: LD_INT 48
13701: PUSH
13702: LD_INT 49
13704: PUSH
13705: LD_INT 50
13707: PUSH
13708: LD_INT 20
13710: PUSH
13711: LD_INT 1
13713: PUSH
13714: LD_INT 51
13716: PUSH
13717: LD_INT 52
13719: PUSH
13720: LD_INT 69
13722: PUSH
13723: LD_INT 39
13725: PUSH
13726: LD_INT 34
13728: PUSH
13729: LD_INT 40
13731: PUSH
13732: LD_INT 53
13734: PUSH
13735: LD_INT 71
13737: PUSH
13738: LD_INT 57
13740: PUSH
13741: LD_INT 58
13743: PUSH
13744: LD_INT 44
13746: PUSH
13747: LD_INT 32
13749: PUSH
13750: LD_INT 27
13752: PUSH
13753: LD_INT 23
13755: PUSH
13756: LD_INT 33
13758: PUSH
13759: LD_INT 59
13761: PUSH
13762: LD_INT 54
13764: PUSH
13765: LD_INT 55
13767: PUSH
13768: LD_INT 56
13770: PUSH
13771: LD_INT 63
13773: PUSH
13774: LD_INT 64
13776: PUSH
13777: LD_INT 65
13779: PUSH
13780: LD_INT 30
13782: PUSH
13783: LD_INT 31
13785: PUSH
13786: LD_INT 21
13788: PUSH
13789: LD_INT 22
13791: PUSH
13792: LD_INT 25
13794: PUSH
13795: EMPTY
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: ST_TO_ADDR
// for i := 1 to list do
13829: LD_ADDR_VAR 0 5
13833: PUSH
13834: DOUBLE
13835: LD_INT 1
13837: DEC
13838: ST_TO_ADDR
13839: LD_VAR 0 6
13843: PUSH
13844: FOR_TO
13845: IFFALSE 13919
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
13847: LD_VAR 0 6
13851: PUSH
13852: LD_VAR 0 5
13856: ARRAY
13857: PPUSH
13858: LD_VAR 0 1
13862: PPUSH
13863: CALL_OW 321
13867: PUSH
13868: LD_INT 1
13870: EQUAL
13871: IFFALSE 13895
13873: PUSH
13874: LD_VAR 0 6
13878: PUSH
13879: LD_VAR 0 5
13883: ARRAY
13884: PPUSH
13885: LD_VAR 0 3
13889: PPUSH
13890: CALL_OW 482
13894: AND
13895: IFFALSE 13917
// AddComResearch ( lab , list [ i ] ) ;
13897: LD_VAR 0 2
13901: PPUSH
13902: LD_VAR 0 6
13906: PUSH
13907: LD_VAR 0 5
13911: ARRAY
13912: PPUSH
13913: CALL_OW 184
13917: GO 13844
13919: POP
13920: POP
// end ;
13921: LD_VAR 0 4
13925: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
13926: LD_INT 0
13928: PPUSH
13929: PPUSH
13930: PPUSH
13931: PPUSH
13932: PPUSH
13933: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
13934: LD_ADDR_VAR 0 8
13938: PUSH
13939: LD_VAR 0 2
13943: PPUSH
13944: CALL_OW 313
13948: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13949: LD_ADDR_VAR 0 9
13953: PUSH
13954: LD_VAR 0 3
13958: PPUSH
13959: LD_INT 22
13961: PUSH
13962: LD_VAR 0 1
13966: PUSH
13967: EMPTY
13968: LIST
13969: LIST
13970: PUSH
13971: LD_INT 25
13973: PUSH
13974: LD_INT 2
13976: PUSH
13977: EMPTY
13978: LIST
13979: LIST
13980: PUSH
13981: LD_INT 24
13983: PUSH
13984: LD_INT 750
13986: PUSH
13987: EMPTY
13988: LIST
13989: LIST
13990: PUSH
13991: LD_INT 3
13993: PUSH
13994: LD_INT 54
13996: PUSH
13997: EMPTY
13998: LIST
13999: PUSH
14000: EMPTY
14001: LIST
14002: LIST
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: PPUSH
14010: CALL_OW 70
14014: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14015: LD_ADDR_VAR 0 6
14019: PUSH
14020: LD_VAR 0 3
14024: PPUSH
14025: LD_INT 22
14027: PUSH
14028: LD_VAR 0 1
14032: PUSH
14033: EMPTY
14034: LIST
14035: LIST
14036: PUSH
14037: LD_INT 21
14039: PUSH
14040: LD_INT 3
14042: PUSH
14043: EMPTY
14044: LIST
14045: LIST
14046: PUSH
14047: LD_INT 3
14049: PUSH
14050: LD_INT 24
14052: PUSH
14053: LD_INT 1000
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: PUSH
14064: EMPTY
14065: LIST
14066: LIST
14067: LIST
14068: PUSH
14069: EMPTY
14070: LIST
14071: PPUSH
14072: CALL_OW 70
14076: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
14077: LD_VAR 0 6
14081: NOT
14082: IFFALSE 14128
14084: PUSH
14085: LD_INT 22
14087: PUSH
14088: LD_VAR 0 1
14092: PUSH
14093: EMPTY
14094: LIST
14095: LIST
14096: PUSH
14097: LD_INT 25
14099: PUSH
14100: LD_INT 2
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: PUSH
14107: LD_INT 24
14109: PUSH
14110: LD_INT 250
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: LIST
14121: PPUSH
14122: CALL_OW 69
14126: NOT
14127: AND
14128: IFFALSE 14132
// exit ;
14130: GO 14302
// if buildingsList and engineerOkInside then
14132: LD_VAR 0 6
14136: IFFALSE 14144
14138: PUSH
14139: LD_VAR 0 8
14143: AND
14144: IFFALSE 14155
// ComExitBuilding ( engineerOkInside ) ;
14146: LD_VAR 0 8
14150: PPUSH
14151: CALL_OW 122
// if buildingsList and engineerOkOutside then
14155: LD_VAR 0 6
14159: IFFALSE 14167
14161: PUSH
14162: LD_VAR 0 9
14166: AND
14167: IFFALSE 14187
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
14169: LD_VAR 0 9
14173: PPUSH
14174: LD_VAR 0 6
14178: PUSH
14179: LD_INT 1
14181: ARRAY
14182: PPUSH
14183: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
14187: LD_VAR 0 6
14191: PUSH
14192: LD_INT 0
14194: EQUAL
14195: IFFALSE 14207
14197: PUSH
14198: LD_VAR 0 4
14202: PUSH
14203: LD_INT 0
14205: EQUAL
14206: AND
14207: IFFALSE 14215
14209: PUSH
14210: LD_VAR 0 9
14214: AND
14215: IFFALSE 14231
// ComEnterUnit ( engineerOkOutside , depot ) ;
14217: LD_VAR 0 9
14221: PPUSH
14222: LD_VAR 0 2
14226: PPUSH
14227: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
14231: LD_VAR 0 9
14235: IFFALSE 14247
14237: PUSH
14238: LD_VAR 0 6
14242: PUSH
14243: LD_INT 0
14245: EQUAL
14246: AND
14247: IFFALSE 14255
14249: PUSH
14250: LD_VAR 0 4
14254: AND
14255: IFFALSE 14302
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
14257: LD_VAR 0 9
14261: PPUSH
14262: LD_VAR 0 4
14266: PUSH
14267: LD_INT 1
14269: ARRAY
14270: PPUSH
14271: LD_VAR 0 4
14275: PUSH
14276: LD_INT 2
14278: ARRAY
14279: PPUSH
14280: LD_VAR 0 4
14284: PUSH
14285: LD_INT 3
14287: ARRAY
14288: PPUSH
14289: LD_VAR 0 4
14293: PUSH
14294: LD_INT 4
14296: ARRAY
14297: PPUSH
14298: CALL_OW 145
// end ;
14302: LD_VAR 0 5
14306: RET
// export function HealUnitInBase ( side , healArea , baseArea , buildings ) ; var sciList , sciListOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
14307: LD_INT 0
14309: PPUSH
14310: PPUSH
14311: PPUSH
14312: PPUSH
14313: PPUSH
14314: PPUSH
14315: PPUSH
14316: PPUSH
14317: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
14318: LD_ADDR_VAR 0 6
14322: PUSH
14323: LD_INT 22
14325: PUSH
14326: LD_VAR 0 1
14330: PUSH
14331: EMPTY
14332: LIST
14333: LIST
14334: PUSH
14335: LD_INT 25
14337: PUSH
14338: LD_INT 4
14340: PUSH
14341: EMPTY
14342: LIST
14343: LIST
14344: PUSH
14345: LD_INT 24
14347: PUSH
14348: LD_INT 251
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: PUSH
14355: EMPTY
14356: LIST
14357: LIST
14358: LIST
14359: PPUSH
14360: CALL_OW 69
14364: PUSH
14365: LD_EXP 27
14369: PUSH
14370: EMPTY
14371: LIST
14372: DIFF
14373: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_outside ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
14374: LD_ADDR_VAR 0 7
14378: PUSH
14379: LD_VAR 0 3
14383: PPUSH
14384: LD_INT 22
14386: PUSH
14387: LD_VAR 0 1
14391: PUSH
14392: EMPTY
14393: LIST
14394: LIST
14395: PUSH
14396: LD_INT 56
14398: PUSH
14399: EMPTY
14400: LIST
14401: PUSH
14402: LD_INT 25
14404: PUSH
14405: LD_INT 4
14407: PUSH
14408: EMPTY
14409: LIST
14410: LIST
14411: PUSH
14412: LD_INT 50
14414: PUSH
14415: EMPTY
14416: LIST
14417: PUSH
14418: EMPTY
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: PPUSH
14424: CALL_OW 70
14428: PUSH
14429: LD_EXP 27
14433: PUSH
14434: EMPTY
14435: LIST
14436: DIFF
14437: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
14438: LD_ADDR_VAR 0 10
14442: PUSH
14443: LD_VAR 0 3
14447: PPUSH
14448: LD_INT 22
14450: PUSH
14451: LD_VAR 0 1
14455: PUSH
14456: EMPTY
14457: LIST
14458: LIST
14459: PUSH
14460: LD_INT 21
14462: PUSH
14463: LD_INT 1
14465: PUSH
14466: EMPTY
14467: LIST
14468: LIST
14469: PUSH
14470: LD_INT 3
14472: PUSH
14473: LD_INT 24
14475: PUSH
14476: LD_INT 750
14478: PUSH
14479: EMPTY
14480: LIST
14481: LIST
14482: PUSH
14483: EMPTY
14484: LIST
14485: LIST
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: LIST
14491: PPUSH
14492: CALL_OW 70
14496: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
14497: LD_ADDR_VAR 0 11
14501: PUSH
14502: LD_VAR 0 2
14506: PPUSH
14507: LD_INT 22
14509: PUSH
14510: LD_VAR 0 1
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: PUSH
14519: LD_INT 21
14521: PUSH
14522: LD_INT 1
14524: PUSH
14525: EMPTY
14526: LIST
14527: LIST
14528: PUSH
14529: LD_INT 3
14531: PUSH
14532: LD_INT 24
14534: PUSH
14535: LD_INT 1000
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: PUSH
14542: EMPTY
14543: LIST
14544: LIST
14545: PUSH
14546: EMPTY
14547: LIST
14548: LIST
14549: LIST
14550: PPUSH
14551: CALL_OW 70
14555: ST_TO_ADDR
// if damageUnits and sciList then
14556: LD_VAR 0 10
14560: IFFALSE 14568
14562: PUSH
14563: LD_VAR 0 6
14567: AND
14568: IFFALSE 14584
// ComMoveToArea ( damageUnits , healArea ) ;
14570: LD_VAR 0 10
14574: PPUSH
14575: LD_VAR 0 2
14579: PPUSH
14580: CALL_OW 113
// if unitsToHeal and sciList and sciListOutside = 0 then
14584: LD_VAR 0 11
14588: IFFALSE 14596
14590: PUSH
14591: LD_VAR 0 6
14595: AND
14596: IFFALSE 14608
14598: PUSH
14599: LD_VAR 0 7
14603: PUSH
14604: LD_INT 0
14606: EQUAL
14607: AND
14608: IFFALSE 14654
// for i in buildings do
14610: LD_ADDR_VAR 0 8
14614: PUSH
14615: LD_VAR 0 4
14619: PUSH
14620: FOR_IN
14621: IFFALSE 14652
// begin if UnitsInside ( i ) then
14623: LD_VAR 0 8
14627: PPUSH
14628: CALL_OW 313
14632: IFFALSE 14650
// begin ComExitBuilding ( UnitsInside ( i ) ) ;
14634: LD_VAR 0 8
14638: PPUSH
14639: CALL_OW 313
14643: PPUSH
14644: CALL_OW 122
// break ;
14648: GO 14652
// end ; end ;
14650: GO 14620
14652: POP
14653: POP
// if unitsToHeal and sciListOutside then
14654: LD_VAR 0 11
14658: IFFALSE 14666
14660: PUSH
14661: LD_VAR 0 7
14665: AND
14666: IFFALSE 14686
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
14668: LD_VAR 0 7
14672: PPUSH
14673: LD_VAR 0 11
14677: PUSH
14678: LD_INT 1
14680: ARRAY
14681: PPUSH
14682: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
14686: LD_VAR 0 10
14690: PUSH
14691: LD_INT 0
14693: EQUAL
14694: IFFALSE 14706
14696: PUSH
14697: LD_VAR 0 11
14701: PUSH
14702: LD_INT 0
14704: EQUAL
14705: AND
14706: IFFALSE 14714
14708: PUSH
14709: LD_VAR 0 7
14713: AND
14714: IFFALSE 14782
// begin tmp := buildings ;
14716: LD_ADDR_VAR 0 12
14720: PUSH
14721: LD_VAR 0 4
14725: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
14726: LD_ADDR_VAR 0 13
14730: PUSH
14731: LD_INT 1
14733: PPUSH
14734: LD_VAR 0 12
14738: PPUSH
14739: CALL_OW 12
14743: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
14744: LD_VAR 0 7
14748: PPUSH
14749: LD_INT 3
14751: PUSH
14752: LD_INT 60
14754: PUSH
14755: EMPTY
14756: LIST
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: PPUSH
14762: CALL_OW 72
14766: PPUSH
14767: LD_VAR 0 12
14771: PUSH
14772: LD_VAR 0 13
14776: ARRAY
14777: PPUSH
14778: CALL_OW 120
// end ; end ;
14782: LD_VAR 0 5
14786: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
14787: LD_INT 0
14789: PPUSH
14790: PPUSH
14791: PPUSH
14792: PPUSH
14793: PPUSH
14794: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
14795: LD_ADDR_VAR 0 7
14799: PUSH
14800: LD_VAR 0 2
14804: PPUSH
14805: LD_INT 22
14807: PUSH
14808: LD_VAR 0 1
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: PUSH
14817: LD_INT 21
14819: PUSH
14820: LD_INT 2
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: PUSH
14827: LD_INT 34
14829: PUSH
14830: LD_INT 52
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: LIST
14841: PPUSH
14842: CALL_OW 70
14846: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14847: LD_ADDR_VAR 0 8
14851: PUSH
14852: LD_VAR 0 2
14856: PPUSH
14857: LD_INT 22
14859: PUSH
14860: LD_VAR 0 1
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: PUSH
14869: LD_INT 21
14871: PUSH
14872: LD_INT 3
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: LD_INT 3
14881: PUSH
14882: LD_INT 24
14884: PUSH
14885: LD_INT 1000
14887: PUSH
14888: EMPTY
14889: LIST
14890: LIST
14891: PUSH
14892: EMPTY
14893: LIST
14894: LIST
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: LIST
14900: PUSH
14901: EMPTY
14902: LIST
14903: PPUSH
14904: CALL_OW 70
14908: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
14909: LD_VAR 0 8
14913: PUSH
14914: LD_INT 0
14916: GREATER
14917: IFFALSE 14944
14919: PUSH
14920: LD_VAR 0 7
14924: PPUSH
14925: LD_INT 24
14927: PUSH
14928: LD_INT 750
14930: PUSH
14931: EMPTY
14932: LIST
14933: LIST
14934: PPUSH
14935: CALL_OW 72
14939: PUSH
14940: LD_INT 0
14942: GREATER
14943: AND
14944: IFFALSE 14964
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
14946: LD_VAR 0 7
14950: PPUSH
14951: LD_VAR 0 8
14955: PUSH
14956: LD_INT 1
14958: ARRAY
14959: PPUSH
14960: CALL_OW 130
// end ;
14964: LD_VAR 0 3
14968: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14969: LD_INT 0
14971: PPUSH
14972: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14973: LD_INT 22
14975: PUSH
14976: LD_VAR 0 1
14980: PUSH
14981: EMPTY
14982: LIST
14983: LIST
14984: PUSH
14985: LD_INT 21
14987: PUSH
14988: LD_INT 2
14990: PUSH
14991: EMPTY
14992: LIST
14993: LIST
14994: PUSH
14995: EMPTY
14996: LIST
14997: LIST
14998: PPUSH
14999: CALL_OW 69
15003: PUSH
15004: LD_INT 18
15006: PPUSH
15007: LD_INT 22
15009: PUSH
15010: LD_VAR 0 1
15014: PUSH
15015: EMPTY
15016: LIST
15017: LIST
15018: PUSH
15019: LD_INT 21
15021: PUSH
15022: LD_INT 2
15024: PUSH
15025: EMPTY
15026: LIST
15027: LIST
15028: PUSH
15029: EMPTY
15030: LIST
15031: LIST
15032: PPUSH
15033: CALL_OW 70
15037: PUSH
15038: LD_VAR 0 3
15042: LESSEQUAL
15043: DIFF
15044: IFFALSE 15111
// for i := 1 to vehCount do
15046: LD_ADDR_VAR 0 9
15050: PUSH
15051: DOUBLE
15052: LD_INT 1
15054: DEC
15055: ST_TO_ADDR
15056: LD_VAR 0 3
15060: PUSH
15061: FOR_TO
15062: IFFALSE 15109
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
15064: LD_VAR 0 2
15068: PPUSH
15069: LD_VAR 0 7
15073: PPUSH
15074: LD_VAR 0 5
15078: PPUSH
15079: LD_VAR 0 6
15083: PPUSH
15084: LD_VAR 0 4
15088: PUSH
15089: LD_INT 1
15091: PPUSH
15092: LD_VAR 0 4
15096: PPUSH
15097: CALL_OW 12
15101: ARRAY
15102: PPUSH
15103: CALL_OW 185
15107: GO 15061
15109: POP
15110: POP
// end ;
15111: LD_VAR 0 8
15115: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
15116: LD_INT 0
15118: PPUSH
15119: PPUSH
15120: PPUSH
15121: PPUSH
15122: PPUSH
15123: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
15124: LD_ADDR_VAR 0 6
15128: PUSH
15129: LD_INT 22
15131: PUSH
15132: LD_VAR 0 1
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: PUSH
15141: LD_INT 25
15143: PUSH
15144: LD_INT 9
15146: PUSH
15147: EMPTY
15148: LIST
15149: LIST
15150: PUSH
15151: EMPTY
15152: LIST
15153: LIST
15154: PPUSH
15155: CALL_OW 69
15159: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15160: LD_ADDR_VAR 0 7
15164: PUSH
15165: LD_INT 81
15167: PUSH
15168: LD_VAR 0 1
15172: PUSH
15173: EMPTY
15174: LIST
15175: LIST
15176: PUSH
15177: LD_INT 3
15179: PUSH
15180: LD_INT 21
15182: PUSH
15183: LD_INT 3
15185: PUSH
15186: EMPTY
15187: LIST
15188: LIST
15189: PUSH
15190: EMPTY
15191: LIST
15192: LIST
15193: PUSH
15194: EMPTY
15195: LIST
15196: LIST
15197: PPUSH
15198: CALL_OW 69
15202: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
15203: LD_ADDR_VAR 0 4
15207: PUSH
15208: LD_INT 1
15210: PPUSH
15211: LD_INT 3
15213: PPUSH
15214: CALL_OW 12
15218: ST_TO_ADDR
// for i := 1 to list do
15219: LD_ADDR_VAR 0 5
15223: PUSH
15224: DOUBLE
15225: LD_INT 1
15227: DEC
15228: ST_TO_ADDR
15229: LD_VAR 0 6
15233: PUSH
15234: FOR_TO
15235: IFFALSE 15437
// for ta in filter do
15237: LD_ADDR_VAR 0 3
15241: PUSH
15242: LD_VAR 0 7
15246: PUSH
15247: FOR_IN
15248: IFFALSE 15433
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
15250: LD_VAR 0 6
15254: PUSH
15255: LD_VAR 0 5
15259: ARRAY
15260: PPUSH
15261: LD_VAR 0 3
15265: PPUSH
15266: CALL_OW 296
15270: PUSH
15271: LD_INT 15
15273: LESSEQUAL
15274: IFFALSE 15431
// begin case c of 1 :
15276: LD_VAR 0 4
15280: PUSH
15281: LD_INT 1
15283: DOUBLE
15284: EQUAL
15285: IFTRUE 15289
15287: GO 15327
15289: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
15290: LD_VAR 0 6
15294: PUSH
15295: LD_VAR 0 5
15299: ARRAY
15300: PPUSH
15301: LD_VAR 0 3
15305: PPUSH
15306: CALL_OW 250
15310: PPUSH
15311: LD_VAR 0 3
15315: PPUSH
15316: CALL_OW 251
15320: PPUSH
15321: CALL_OW 154
15325: GO 15431
15327: LD_INT 2
15329: DOUBLE
15330: EQUAL
15331: IFTRUE 15335
15333: GO 15399
15335: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
15336: LD_VAR 0 6
15340: PUSH
15341: LD_VAR 0 5
15345: ARRAY
15346: PPUSH
15347: LD_VAR 0 3
15351: PPUSH
15352: CALL_OW 250
15356: PUSH
15357: LD_INT 1
15359: NEG
15360: PPUSH
15361: LD_INT 1
15363: PPUSH
15364: CALL_OW 12
15368: PLUS
15369: PPUSH
15370: LD_VAR 0 3
15374: PPUSH
15375: CALL_OW 251
15379: PUSH
15380: LD_INT 1
15382: NEG
15383: PPUSH
15384: LD_INT 1
15386: PPUSH
15387: CALL_OW 12
15391: PLUS
15392: PPUSH
15393: CALL_OW 153
15397: GO 15431
15399: LD_INT 3
15401: DOUBLE
15402: EQUAL
15403: IFTRUE 15407
15405: GO 15430
15407: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15408: LD_VAR 0 6
15412: PUSH
15413: LD_VAR 0 5
15417: ARRAY
15418: PPUSH
15419: LD_VAR 0 3
15423: PPUSH
15424: CALL_OW 115
15428: GO 15431
15430: POP
// end ; end ;
15431: GO 15247
15433: POP
15434: POP
15435: GO 15234
15437: POP
15438: POP
// end ;
15439: LD_VAR 0 2
15443: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
15444: LD_INT 0
15446: PPUSH
15447: PPUSH
15448: PPUSH
15449: PPUSH
// r := 100 ;
15450: LD_ADDR_VAR 0 5
15454: PUSH
15455: LD_INT 100
15457: ST_TO_ADDR
// x := 0 ;
15458: LD_ADDR_VAR 0 6
15462: PUSH
15463: LD_INT 0
15465: ST_TO_ADDR
// while ( x < n ) do
15466: LD_VAR 0 6
15470: PUSH
15471: LD_VAR 0 2
15475: LESS
15476: IFFALSE 15739
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
15478: LD_ADDR_VAR 0 4
15482: PUSH
15483: DOUBLE
15484: LD_INT 1
15486: DEC
15487: ST_TO_ADDR
15488: LD_VAR 0 1
15492: PPUSH
15493: LD_INT 0
15495: PPUSH
15496: CALL_OW 517
15500: PUSH
15501: LD_INT 1
15503: ARRAY
15504: PUSH
15505: FOR_TO
15506: IFFALSE 15735
// begin if r > 50 then
15508: LD_VAR 0 5
15512: PUSH
15513: LD_INT 50
15515: GREATER
15516: IFFALSE 15719
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
15518: LD_VAR 0 1
15522: PPUSH
15523: LD_INT 0
15525: PPUSH
15526: CALL_OW 517
15530: PUSH
15531: LD_INT 1
15533: ARRAY
15534: PUSH
15535: LD_VAR 0 4
15539: ARRAY
15540: PPUSH
15541: LD_VAR 0 1
15545: PPUSH
15546: LD_INT 0
15548: PPUSH
15549: CALL_OW 517
15553: PUSH
15554: LD_INT 2
15556: ARRAY
15557: PUSH
15558: LD_VAR 0 4
15562: ARRAY
15563: PPUSH
15564: CALL_OW 458
15568: NOT
15569: IFFALSE 15717
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
15571: LD_VAR 0 1
15575: PPUSH
15576: LD_INT 0
15578: PPUSH
15579: CALL_OW 517
15583: PUSH
15584: LD_INT 1
15586: ARRAY
15587: PUSH
15588: LD_VAR 0 4
15592: ARRAY
15593: PPUSH
15594: LD_VAR 0 1
15598: PPUSH
15599: LD_INT 0
15601: PPUSH
15602: CALL_OW 517
15606: PUSH
15607: LD_INT 2
15609: ARRAY
15610: PUSH
15611: LD_VAR 0 4
15615: ARRAY
15616: PPUSH
15617: LD_INT 8
15619: PPUSH
15620: LD_INT 0
15622: PPUSH
15623: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
15627: LD_ADDR_EXP 37
15631: PUSH
15632: LD_EXP 37
15636: PPUSH
15637: LD_INT 1
15639: PPUSH
15640: LD_VAR 0 1
15644: PPUSH
15645: LD_INT 0
15647: PPUSH
15648: CALL_OW 517
15652: PUSH
15653: LD_INT 1
15655: ARRAY
15656: PUSH
15657: LD_VAR 0 4
15661: ARRAY
15662: PUSH
15663: LD_VAR 0 1
15667: PPUSH
15668: LD_INT 0
15670: PPUSH
15671: CALL_OW 517
15675: PUSH
15676: LD_INT 2
15678: ARRAY
15679: PUSH
15680: LD_VAR 0 4
15684: ARRAY
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: PPUSH
15690: CALL_OW 2
15694: ST_TO_ADDR
// r := 0 ;
15695: LD_ADDR_VAR 0 5
15699: PUSH
15700: LD_INT 0
15702: ST_TO_ADDR
// x := x + 1 ;
15703: LD_ADDR_VAR 0 6
15707: PUSH
15708: LD_VAR 0 6
15712: PUSH
15713: LD_INT 1
15715: PLUS
15716: ST_TO_ADDR
// end end else
15717: GO 15733
// r := r + 35 ;
15719: LD_ADDR_VAR 0 5
15723: PUSH
15724: LD_VAR 0 5
15728: PUSH
15729: LD_INT 35
15731: PLUS
15732: ST_TO_ADDR
// end end ;
15733: GO 15505
15735: POP
15736: POP
15737: GO 15466
15739: LD_VAR 0 3
15743: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
15744: LD_INT 0
15746: PPUSH
15747: PPUSH
15748: PPUSH
15749: PPUSH
15750: PPUSH
// tmp := [ ] ;
15751: LD_ADDR_VAR 0 6
15755: PUSH
15756: EMPTY
15757: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
15758: LD_ADDR_VAR 0 7
15762: PUSH
15763: LD_INT 22
15765: PUSH
15766: LD_VAR 0 1
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: PUSH
15775: LD_INT 30
15777: PUSH
15778: LD_INT 32
15780: PUSH
15781: EMPTY
15782: LIST
15783: LIST
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PPUSH
15789: CALL_OW 69
15793: ST_TO_ADDR
// if bunkers then
15794: LD_VAR 0 7
15798: IFFALSE 15868
// for i in bunkers do
15800: LD_ADDR_VAR 0 4
15804: PUSH
15805: LD_VAR 0 7
15809: PUSH
15810: FOR_IN
15811: IFFALSE 15866
// for j in UnitsInside ( i ) do
15813: LD_ADDR_VAR 0 5
15817: PUSH
15818: LD_VAR 0 4
15822: PPUSH
15823: CALL_OW 313
15827: PUSH
15828: FOR_IN
15829: IFFALSE 15862
// tmp := Replace ( tmp , tmp + 1 , j ) ;
15831: LD_ADDR_VAR 0 6
15835: PUSH
15836: LD_VAR 0 6
15840: PPUSH
15841: LD_VAR 0 6
15845: PUSH
15846: LD_INT 1
15848: PLUS
15849: PPUSH
15850: LD_VAR 0 5
15854: PPUSH
15855: CALL_OW 1
15859: ST_TO_ADDR
15860: GO 15828
15862: POP
15863: POP
15864: GO 15810
15866: POP
15867: POP
// if tmp then
15868: LD_VAR 0 6
15872: IFFALSE 15912
// begin ComExitBuilding ( tmp ) ;
15874: LD_VAR 0 6
15878: PPUSH
15879: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
15883: LD_VAR 0 6
15887: PPUSH
15888: LD_VAR 0 2
15892: PPUSH
15893: CALL_OW 250
15897: PPUSH
15898: LD_VAR 0 2
15902: PPUSH
15903: CALL_OW 251
15907: PPUSH
15908: CALL_OW 174
// end ; end ;
15912: LD_VAR 0 3
15916: RET
// export function CreateNature ; var i , un ; begin
15917: LD_INT 0
15919: PPUSH
15920: PPUSH
15921: PPUSH
// uc_side := 0 ;
15922: LD_ADDR_OWVAR 20
15926: PUSH
15927: LD_INT 0
15929: ST_TO_ADDR
// uc_nation := 0 ;
15930: LD_ADDR_OWVAR 21
15934: PUSH
15935: LD_INT 0
15937: ST_TO_ADDR
// InitHc ;
15938: CALL_OW 19
// hc_class := class_fish ;
15942: LD_ADDR_OWVAR 28
15946: PUSH
15947: LD_INT 20
15949: ST_TO_ADDR
// for i := 1 to 6 do
15950: LD_ADDR_VAR 0 2
15954: PUSH
15955: DOUBLE
15956: LD_INT 1
15958: DEC
15959: ST_TO_ADDR
15960: LD_INT 6
15962: PUSH
15963: FOR_TO
15964: IFFALSE 15983
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
15966: CALL_OW 44
15970: PPUSH
15971: LD_INT 22
15973: PPUSH
15974: LD_INT 0
15976: PPUSH
15977: CALL_OW 49
15981: GO 15963
15983: POP
15984: POP
// for i := 1 to Difficulty + 2 do
15985: LD_ADDR_VAR 0 2
15989: PUSH
15990: DOUBLE
15991: LD_INT 1
15993: DEC
15994: ST_TO_ADDR
15995: LD_OWVAR 67
15999: PUSH
16000: LD_INT 2
16002: PLUS
16003: PUSH
16004: FOR_TO
16005: IFFALSE 16114
// begin hc_sex := sex_male ;
16007: LD_ADDR_OWVAR 27
16011: PUSH
16012: LD_INT 1
16014: ST_TO_ADDR
// uc_side := 0 ;
16015: LD_ADDR_OWVAR 20
16019: PUSH
16020: LD_INT 0
16022: ST_TO_ADDR
// uc_nation := nation_nature ;
16023: LD_ADDR_OWVAR 21
16027: PUSH
16028: LD_INT 0
16030: ST_TO_ADDR
// hc_class := class_tiger ;
16031: LD_ADDR_OWVAR 28
16035: PUSH
16036: LD_INT 14
16038: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
16039: LD_ADDR_OWVAR 31
16043: PUSH
16044: LD_EXP 30
16048: PUSH
16049: LD_INT 0
16051: PUSH
16052: LD_INT 0
16054: PUSH
16055: LD_INT 0
16057: PUSH
16058: EMPTY
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
16064: LD_ADDR_OWVAR 35
16068: PUSH
16069: LD_INT 5
16071: NEG
16072: PPUSH
16073: LD_INT 5
16075: PPUSH
16076: CALL_OW 12
16080: PUSH
16081: LD_OWVAR 67
16085: MUL
16086: ST_TO_ADDR
// un := CreateHuman ;
16087: LD_ADDR_VAR 0 3
16091: PUSH
16092: CALL_OW 44
16096: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16097: LD_VAR 0 3
16101: PPUSH
16102: LD_INT 23
16104: PPUSH
16105: LD_INT 0
16107: PPUSH
16108: CALL_OW 49
// end ;
16112: GO 16004
16114: POP
16115: POP
// for i := 1 to rand ( 3 , 4 ) do
16116: LD_ADDR_VAR 0 2
16120: PUSH
16121: DOUBLE
16122: LD_INT 1
16124: DEC
16125: ST_TO_ADDR
16126: LD_INT 3
16128: PPUSH
16129: LD_INT 4
16131: PPUSH
16132: CALL_OW 12
16136: PUSH
16137: FOR_TO
16138: IFFALSE 16230
// begin hc_sex := sex_male ;
16140: LD_ADDR_OWVAR 27
16144: PUSH
16145: LD_INT 1
16147: ST_TO_ADDR
// uc_side := 0 ;
16148: LD_ADDR_OWVAR 20
16152: PUSH
16153: LD_INT 0
16155: ST_TO_ADDR
// uc_nation := nation_nature ;
16156: LD_ADDR_OWVAR 21
16160: PUSH
16161: LD_INT 0
16163: ST_TO_ADDR
// hc_class := 18 ;
16164: LD_ADDR_OWVAR 28
16168: PUSH
16169: LD_INT 18
16171: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
16172: LD_ADDR_OWVAR 31
16176: PUSH
16177: LD_INT 0
16179: PUSH
16180: LD_INT 0
16182: PUSH
16183: LD_INT 0
16185: PUSH
16186: LD_INT 0
16188: PUSH
16189: EMPTY
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: ST_TO_ADDR
// hc_agressivity := 0 ;
16195: LD_ADDR_OWVAR 35
16199: PUSH
16200: LD_INT 0
16202: ST_TO_ADDR
// un := CreateHuman ;
16203: LD_ADDR_VAR 0 3
16207: PUSH
16208: CALL_OW 44
16212: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16213: LD_VAR 0 3
16217: PPUSH
16218: LD_INT 23
16220: PPUSH
16221: LD_INT 0
16223: PPUSH
16224: CALL_OW 49
// end ;
16228: GO 16137
16230: POP
16231: POP
// for i := 1 to [ 4 , 3 , 3 , 3 ] [ Difficulty ] do
16232: LD_ADDR_VAR 0 2
16236: PUSH
16237: DOUBLE
16238: LD_INT 1
16240: DEC
16241: ST_TO_ADDR
16242: LD_INT 4
16244: PUSH
16245: LD_INT 3
16247: PUSH
16248: LD_INT 3
16250: PUSH
16251: LD_INT 3
16253: PUSH
16254: EMPTY
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: PUSH
16260: LD_OWVAR 67
16264: ARRAY
16265: PUSH
16266: FOR_TO
16267: IFFALSE 16376
// begin hc_sex := sex_male ;
16269: LD_ADDR_OWVAR 27
16273: PUSH
16274: LD_INT 1
16276: ST_TO_ADDR
// uc_side := 0 ;
16277: LD_ADDR_OWVAR 20
16281: PUSH
16282: LD_INT 0
16284: ST_TO_ADDR
// uc_nation := nation_nature ;
16285: LD_ADDR_OWVAR 21
16289: PUSH
16290: LD_INT 0
16292: ST_TO_ADDR
// hc_class := class_apeman ;
16293: LD_ADDR_OWVAR 28
16297: PUSH
16298: LD_INT 12
16300: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
16301: LD_ADDR_OWVAR 31
16305: PUSH
16306: LD_INT 0
16308: PPUSH
16309: LD_INT 2
16311: PPUSH
16312: CALL_OW 12
16316: PUSH
16317: LD_INT 0
16319: PUSH
16320: LD_INT 0
16322: PUSH
16323: LD_INT 0
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: ST_TO_ADDR
// hc_agressivity = rand ( - 10 , 10 ) ;
16332: LD_ADDR_OWVAR 35
16336: PUSH
16337: LD_INT 10
16339: NEG
16340: PPUSH
16341: LD_INT 10
16343: PPUSH
16344: CALL_OW 12
16348: ST_TO_ADDR
// un := CreateHuman ;
16349: LD_ADDR_VAR 0 3
16353: PUSH
16354: CALL_OW 44
16358: ST_TO_ADDR
// PlaceUnitArea ( un , ApeNatureArea , false ) ;
16359: LD_VAR 0 3
16363: PPUSH
16364: LD_INT 26
16366: PPUSH
16367: LD_INT 0
16369: PPUSH
16370: CALL_OW 49
// end ;
16374: GO 16266
16376: POP
16377: POP
// end ; end_of_file
16378: LD_VAR 0 1
16382: RET
// on UnitDestroyed ( unit ) do var i ;
16383: LD_INT 0
16385: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
16386: LD_VAR 0 1
16390: PPUSH
16391: CALL 36020 0 1
// if unit = JMM then
16395: LD_VAR 0 1
16399: PUSH
16400: LD_EXP 1
16404: EQUAL
16405: IFFALSE 16414
// YouLost ( JMM ) ;
16407: LD_STRING JMM
16409: PPUSH
16410: CALL_OW 104
// if unit in russianTanks then
16414: LD_VAR 0 1
16418: PUSH
16419: LD_EXP 32
16423: IN
16424: IFFALSE 16442
// russianTanks := russianTanks diff unit ;
16426: LD_ADDR_EXP 32
16430: PUSH
16431: LD_EXP 32
16435: PUSH
16436: LD_VAR 0 1
16440: DIFF
16441: ST_TO_ADDR
// if unit in russianTimeLapsers then
16442: LD_VAR 0 1
16446: PUSH
16447: LD_EXP 33
16451: IN
16452: IFFALSE 16470
// russianTimeLapsers := russianTimeLapsers diff unit ;
16454: LD_ADDR_EXP 33
16458: PUSH
16459: LD_EXP 33
16463: PUSH
16464: LD_VAR 0 1
16468: DIFF
16469: ST_TO_ADDR
// if unit in RuScientists then
16470: LD_VAR 0 1
16474: PUSH
16475: LD_EXP 27
16479: IN
16480: IFFALSE 16512
// begin RuScientists := RuScientists diff unit ;
16482: LD_ADDR_EXP 27
16486: PUSH
16487: LD_EXP 27
16491: PUSH
16492: LD_VAR 0 1
16496: DIFF
16497: ST_TO_ADDR
// sciCounter := sciCounter + 1 ;
16498: LD_ADDR_EXP 28
16502: PUSH
16503: LD_EXP 28
16507: PUSH
16508: LD_INT 1
16510: PLUS
16511: ST_TO_ADDR
// end ; end ;
16512: PPOPN 2
16514: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_laser then
16515: LD_VAR 0 3
16519: PPUSH
16520: CALL_OW 264
16524: PUSH
16525: LD_INT 9
16527: EQUAL
16528: IFFALSE 16544
// laserCounterDestroy := laserCounterDestroy + 1 ;
16530: LD_ADDR_EXP 43
16534: PUSH
16535: LD_EXP 43
16539: PUSH
16540: LD_INT 1
16542: PLUS
16543: ST_TO_ADDR
// end ;
16544: PPOPN 3
16546: END
// on UnitTeleported ( building , human ) do begin if human in FilterAllUnits ( [ f_side , 6 ] ) then
16547: LD_VAR 0 2
16551: PUSH
16552: LD_INT 22
16554: PUSH
16555: LD_INT 6
16557: PUSH
16558: EMPTY
16559: LIST
16560: LIST
16561: PPUSH
16562: CALL_OW 69
16566: IN
16567: IFFALSE 16622
// begin if GetType ( human ) = unit_vehicle then
16569: LD_VAR 0 2
16573: PPUSH
16574: CALL_OW 247
16578: PUSH
16579: LD_INT 2
16581: EQUAL
16582: IFFALSE 16599
// human := IsDrivenBy ( human ) ;
16584: LD_ADDR_VAR 0 2
16588: PUSH
16589: LD_VAR 0 2
16593: PPUSH
16594: CALL_OW 311
16598: ST_TO_ADDR
// SetTag ( human , GetTag ( human ) + 10 ) ;
16599: LD_VAR 0 2
16603: PPUSH
16604: LD_VAR 0 2
16608: PPUSH
16609: CALL_OW 110
16613: PUSH
16614: LD_INT 10
16616: PLUS
16617: PPUSH
16618: CALL_OW 109
// end ; if GetSide ( human ) = 1 and eventVar1 = 0 then
16622: LD_VAR 0 2
16626: PPUSH
16627: CALL_OW 255
16631: PUSH
16632: LD_INT 1
16634: EQUAL
16635: IFFALSE 16647
16637: PUSH
16638: LD_EXP 40
16642: PUSH
16643: LD_INT 0
16645: EQUAL
16646: AND
16647: IFFALSE 16759
// begin eventVar1 = 1 ;
16649: LD_ADDR_EXP 40
16653: PUSH
16654: LD_INT 1
16656: ST_TO_ADDR
// teleportExplored = 1 ;
16657: LD_ADDR_EXP 26
16661: PUSH
16662: LD_INT 1
16664: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
16665: LD_STRING M2a
16667: PPUSH
16668: CALL_OW 337
// wait ( 0 0$2 ) ;
16672: LD_INT 70
16674: PPUSH
16675: CALL_OW 67
// DialogueOn ;
16679: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
16683: LD_INT 22
16685: PUSH
16686: LD_INT 1
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: PUSH
16693: LD_INT 21
16695: PUSH
16696: LD_INT 1
16698: PUSH
16699: EMPTY
16700: LIST
16701: LIST
16702: PUSH
16703: EMPTY
16704: LIST
16705: LIST
16706: PPUSH
16707: CALL_OW 69
16711: PPUSH
16712: LD_STRING DT3a-Sol1-1
16714: PPUSH
16715: LD_STRING DT3a-FSol1-1
16717: PPUSH
16718: CALL 13074 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
16722: LD_EXP 1
16726: PPUSH
16727: LD_STRING DT3a-JMM-1
16729: PPUSH
16730: CALL_OW 88
// CenterNowOnUnits ( human ) ;
16734: LD_VAR 0 2
16738: PPUSH
16739: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
16743: LD_EXP 1
16747: PPUSH
16748: LD_STRING DT3a-JMM-1a
16750: PPUSH
16751: CALL_OW 88
// DialogueOff ;
16755: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
16759: LD_VAR 0 1
16763: PUSH
16764: LD_INT 10
16766: EQUAL
16767: IFFALSE 16784
16769: PUSH
16770: LD_VAR 0 2
16774: PPUSH
16775: CALL_OW 247
16779: PUSH
16780: LD_INT 2
16782: EQUAL
16783: AND
16784: IFFALSE 16801
16786: PUSH
16787: LD_VAR 0 2
16791: PPUSH
16792: CALL_OW 255
16796: PUSH
16797: LD_INT 3
16799: EQUAL
16800: AND
16801: IFFALSE 16867
// begin if vehicleTeleported = 0 then
16803: LD_EXP 21
16807: PUSH
16808: LD_INT 0
16810: EQUAL
16811: IFFALSE 16828
// begin wait ( 0 0$03 ) ;
16813: LD_INT 105
16815: PPUSH
16816: CALL_OW 67
// vehicleTeleported := 1 ;
16820: LD_ADDR_EXP 21
16824: PUSH
16825: LD_INT 1
16827: ST_TO_ADDR
// end ; if vehicleTeleported = 2 then
16828: LD_EXP 21
16832: PUSH
16833: LD_INT 2
16835: EQUAL
16836: IFFALSE 16853
// begin wait ( 0 0$03 ) ;
16838: LD_INT 105
16840: PPUSH
16841: CALL_OW 67
// vehicleTeleported := 3 ;
16845: LD_ADDR_EXP 21
16849: PUSH
16850: LD_INT 3
16852: ST_TO_ADDR
// end ; tpCounter := tpCounter + 1 ;
16853: LD_ADDR_EXP 22
16857: PUSH
16858: LD_EXP 22
16862: PUSH
16863: LD_INT 1
16865: PLUS
16866: ST_TO_ADDR
// end ; end ;
16867: PPOPN 2
16869: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
16870: LD_VAR 0 1
16874: PPUSH
16875: LD_VAR 0 2
16879: PPUSH
16880: CALL 36078 0 2
// if GetWeapon ( vehicle ) = us_rocket_launcher then
16884: LD_VAR 0 1
16888: PPUSH
16889: CALL_OW 264
16893: PUSH
16894: LD_INT 7
16896: EQUAL
16897: IFFALSE 16907
// rocketBuilded := true ;
16899: LD_ADDR_EXP 44
16903: PUSH
16904: LD_INT 1
16906: ST_TO_ADDR
// if GetSide ( vehicle ) <> 3 then
16907: LD_VAR 0 1
16911: PPUSH
16912: CALL_OW 255
16916: PUSH
16917: LD_INT 3
16919: NONEQUAL
16920: IFFALSE 16924
// exit ;
16922: GO 17041
// if factory in [ ru_fact , rufab2 ] then
16924: LD_VAR 0 2
16928: PUSH
16929: LD_INT 21
16931: PUSH
16932: LD_INT 112
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: IN
16939: IFFALSE 17041
// begin if GetWeapon ( vehicle ) = ru_time_lapser then
16941: LD_VAR 0 1
16945: PPUSH
16946: CALL_OW 264
16950: PUSH
16951: LD_INT 49
16953: EQUAL
16954: IFFALSE 16990
// begin russianTimeLapsers := Join ( russianTimeLapsers , vehicle ) ;
16956: LD_ADDR_EXP 33
16960: PUSH
16961: LD_EXP 33
16965: PPUSH
16966: LD_VAR 0 1
16970: PPUSH
16971: CALL 79578 0 2
16975: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
16976: LD_VAR 0 1
16980: PPUSH
16981: LD_INT 137
16983: PPUSH
16984: CALL_OW 120
// end else
16988: GO 17041
// if not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_big_cargo_bay , ru_crane , ru_bulldozer ] then
16990: LD_VAR 0 1
16994: PPUSH
16995: CALL_OW 264
16999: PUSH
17000: LD_INT 51
17002: PUSH
17003: LD_INT 89
17005: PUSH
17006: LD_INT 52
17008: PUSH
17009: LD_INT 53
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: IN
17018: NOT
17019: IFFALSE 17041
// begin russianTanks := Join ( russianTanks , vehicle ) ;
17021: LD_ADDR_EXP 32
17025: PUSH
17026: LD_EXP 32
17030: PPUSH
17031: LD_VAR 0 1
17035: PPUSH
17036: CALL 79578 0 2
17040: ST_TO_ADDR
// end ; end ; end ;
17041: PPOPN 2
17043: END
// on LeaveVehicle ( vehicle , human ) do var i ;
17044: LD_INT 0
17046: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
17047: LD_VAR 0 2
17051: PPUSH
17052: CALL_OW 255
17056: PUSH
17057: LD_INT 3
17059: EQUAL
17060: IFFALSE 17077
17062: PUSH
17063: LD_VAR 0 2
17067: PPUSH
17068: CALL_OW 257
17072: PUSH
17073: LD_INT 3
17075: EQUAL
17076: AND
17077: IFFALSE 17092
17079: PUSH
17080: LD_INT 21
17082: PPUSH
17083: CALL_OW 255
17087: PUSH
17088: LD_INT 3
17090: EQUAL
17091: AND
17092: IFFALSE 17103
17094: PUSH
17095: LD_INT 21
17097: PPUSH
17098: CALL_OW 302
17102: AND
17103: IFFALSE 17117
// ComEnterUnit ( human , ru_fact ) ;
17105: LD_VAR 0 2
17109: PPUSH
17110: LD_INT 21
17112: PPUSH
17113: CALL_OW 120
// end ;
17117: PPOPN 3
17119: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
17120: LD_VAR 0 1
17124: PPUSH
17125: CALL 36062 0 1
// end ;
17129: PPOPN 1
17131: END
// on SailEvent ( event ) do begin if event = 1 then
17132: LD_VAR 0 1
17136: PUSH
17137: LD_INT 1
17139: EQUAL
17140: IFFALSE 17146
// PrepareRussian ;
17142: CALL 3597 0 0
// end ; end_of_file
17146: PPOPN 1
17148: END
// every 0 0$1 trigger ruAI = 1 do
17149: LD_EXP 34
17153: PUSH
17154: LD_INT 1
17156: EQUAL
17157: IFFALSE 17269
17159: GO 17161
17161: DISABLE
// begin enable ;
17162: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
17163: LD_INT 3
17165: PPUSH
17166: LD_INT 6
17168: PPUSH
17169: LD_INT 9
17171: PPUSH
17172: LD_EXP 31
17176: PPUSH
17177: CALL 13926 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
17181: LD_INT 3
17183: PPUSH
17184: LD_INT 4
17186: PPUSH
17187: LD_INT 10
17189: PPUSH
17190: LD_EXP 31
17194: PPUSH
17195: CALL 13926 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
17199: LD_INT 3
17201: PPUSH
17202: LD_INT 9
17204: PPUSH
17205: CALL 14787 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
17209: LD_INT 3
17211: PPUSH
17212: LD_INT 10
17214: PPUSH
17215: CALL 14787 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
17219: LD_INT 3
17221: PPUSH
17222: LD_INT 16
17224: PPUSH
17225: LD_INT 9
17227: PPUSH
17228: LD_INT 91
17230: PPUSH
17231: CALL 14307 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
17235: LD_INT 3
17237: PPUSH
17238: LD_INT 17
17240: PPUSH
17241: LD_INT 10
17243: PPUSH
17244: LD_INT 47
17246: PUSH
17247: LD_INT 129
17249: PUSH
17250: LD_INT 135
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: LIST
17257: PPUSH
17258: CALL 14307 0 4
// IntBazooka ( 3 ) ;
17262: LD_INT 3
17264: PPUSH
17265: CALL 15116 0 1
// end ;
17269: END
// every 0 0$50 trigger russianTanks >= [ 3 , 4 , 5 , 6 ] [ Difficulty ] do var i , tmp , p , path ;
17270: LD_EXP 32
17274: PUSH
17275: LD_INT 3
17277: PUSH
17278: LD_INT 4
17280: PUSH
17281: LD_INT 5
17283: PUSH
17284: LD_INT 6
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: PUSH
17293: LD_OWVAR 67
17297: ARRAY
17298: GREATEREQUAL
17299: IFFALSE 17673
17301: GO 17303
17303: DISABLE
17304: LD_INT 0
17306: PPUSH
17307: PPUSH
17308: PPUSH
17309: PPUSH
// begin enable ;
17310: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
17311: LD_ADDR_VAR 0 2
17315: PUSH
17316: LD_EXP 32
17320: PUSH
17321: LD_EXP 33
17325: UNION
17326: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
17327: LD_ADDR_EXP 32
17331: PUSH
17332: LD_EXP 32
17336: PUSH
17337: LD_VAR 0 2
17341: DIFF
17342: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
17343: LD_ADDR_EXP 33
17347: PUSH
17348: LD_EXP 33
17352: PUSH
17353: LD_VAR 0 2
17357: DIFF
17358: ST_TO_ADDR
// if vehicleTeleported >= 4 then
17359: LD_EXP 21
17363: PUSH
17364: LD_INT 4
17366: GREATEREQUAL
17367: IFFALSE 17385
// attackTactic := rand ( 1 , 2 ) ;
17369: LD_ADDR_EXP 36
17373: PUSH
17374: LD_INT 1
17376: PPUSH
17377: LD_INT 2
17379: PPUSH
17380: CALL_OW 12
17384: ST_TO_ADDR
// path := [ [ 93 , 77 ] , [ 107 , 99 ] , [ 123 , 112 ] , [ 140 , 112 ] ] ;
17385: LD_ADDR_VAR 0 4
17389: PUSH
17390: LD_INT 93
17392: PUSH
17393: LD_INT 77
17395: PUSH
17396: EMPTY
17397: LIST
17398: LIST
17399: PUSH
17400: LD_INT 107
17402: PUSH
17403: LD_INT 99
17405: PUSH
17406: EMPTY
17407: LIST
17408: LIST
17409: PUSH
17410: LD_INT 123
17412: PUSH
17413: LD_INT 112
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: PUSH
17420: LD_INT 140
17422: PUSH
17423: LD_INT 112
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: ST_TO_ADDR
// if attackTactic < 2 then
17436: LD_EXP 36
17440: PUSH
17441: LD_INT 2
17443: LESS
17444: IFFALSE 17475
// path := [ [ 131 , 136 ] , [ 140 , 112 ] ] ;
17446: LD_ADDR_VAR 0 4
17450: PUSH
17451: LD_INT 131
17453: PUSH
17454: LD_INT 136
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PUSH
17461: LD_INT 140
17463: PUSH
17464: LD_INT 112
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: ST_TO_ADDR
// if IsOk ( ruteleprt ) then
17475: LD_INT 10
17477: PPUSH
17478: CALL_OW 302
17482: IFFALSE 17600
// begin for i in tmp do
17484: LD_ADDR_VAR 0 1
17488: PUSH
17489: LD_VAR 0 2
17493: PUSH
17494: FOR_IN
17495: IFFALSE 17538
// if attackTactic < 2 then
17497: LD_EXP 36
17501: PUSH
17502: LD_INT 2
17504: LESS
17505: IFFALSE 17521
// ComEnterUnit ( i , ruteleprt ) else
17507: LD_VAR 0 1
17511: PPUSH
17512: LD_INT 10
17514: PPUSH
17515: CALL_OW 120
17519: GO 17536
// ComMoveXY ( i , 88 , 69 ) ;
17521: LD_VAR 0 1
17525: PPUSH
17526: LD_INT 88
17528: PPUSH
17529: LD_INT 69
17531: PPUSH
17532: CALL_OW 111
17536: GO 17494
17538: POP
17539: POP
// p := 0 ;
17540: LD_ADDR_VAR 0 3
17544: PUSH
17545: LD_INT 0
17547: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
17548: LD_INT 70
17550: PPUSH
17551: CALL_OW 67
// p := Inc ( p ) ;
17555: LD_ADDR_VAR 0 3
17559: PUSH
17560: LD_VAR 0 3
17564: PPUSH
17565: CALL 80951 0 1
17569: ST_TO_ADDR
// until not UnitFilter ( tmp , [ f_hastask ] ) or p > 30 ;
17570: LD_VAR 0 2
17574: PPUSH
17575: LD_INT 60
17577: PUSH
17578: EMPTY
17579: LIST
17580: PPUSH
17581: CALL_OW 72
17585: NOT
17586: IFTRUE 17598
17588: PUSH
17589: LD_VAR 0 3
17593: PUSH
17594: LD_INT 30
17596: GREATER
17597: OR
17598: IFFALSE 17548
// end ; repeat wait ( 0 0$1 ) ;
17600: LD_INT 35
17602: PPUSH
17603: CALL_OW 67
// for i in tmp do
17607: LD_ADDR_VAR 0 1
17611: PUSH
17612: LD_VAR 0 2
17616: PUSH
17617: FOR_IN
17618: IFFALSE 17650
// if not IsOk ( i ) then
17620: LD_VAR 0 1
17624: PPUSH
17625: CALL_OW 302
17629: NOT
17630: IFFALSE 17648
// tmp := tmp diff i ;
17632: LD_ADDR_VAR 0 2
17636: PUSH
17637: LD_VAR 0 2
17641: PUSH
17642: LD_VAR 0 1
17646: DIFF
17647: ST_TO_ADDR
17648: GO 17617
17650: POP
17651: POP
// AgressiveMove ( tmp , path ) ;
17652: LD_VAR 0 2
17656: PPUSH
17657: LD_VAR 0 4
17661: PPUSH
17662: CALL 82344 0 2
// until not tmp ;
17666: LD_VAR 0 2
17670: NOT
17671: IFFALSE 17600
// end ;
17673: PPOPN 4
17675: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
17676: LD_INT 4
17678: PPUSH
17679: CALL_OW 303
17683: IFFALSE 17698
17685: GO 17687
17687: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
17688: LD_INT 3
17690: PPUSH
17691: LD_INT 4
17693: PPUSH
17694: CALL 15744 0 2
17698: END
// every 0 0$1 do
17699: GO 17701
17701: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
17702: LD_INT 3
17704: PPUSH
17705: LD_INT 91
17707: PPUSH
17708: LD_INT 3
17710: PPUSH
17711: CALL 13689 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
17715: LD_INT 3
17717: PPUSH
17718: LD_INT 47
17720: PPUSH
17721: LD_INT 3
17723: PPUSH
17724: CALL 13689 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
17728: LD_INT 3
17730: PPUSH
17731: LD_INT 129
17733: PPUSH
17734: LD_INT 3
17736: PPUSH
17737: CALL 13689 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
17741: LD_INT 3
17743: PPUSH
17744: LD_INT 3
17746: PPUSH
17747: LD_INT 3
17749: PPUSH
17750: CALL 13689 0 3
// end ;
17754: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
17755: LD_INT 22
17757: PUSH
17758: LD_INT 1
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: PUSH
17765: LD_INT 21
17767: PUSH
17768: LD_INT 3
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: PPUSH
17779: CALL_OW 69
17783: IFFALSE 17852
17785: GO 17787
17787: DISABLE
// begin wait ( 0 0$40 ) ;
17788: LD_INT 1400
17790: PPUSH
17791: CALL_OW 67
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17795: LD_INT 3
17797: PPUSH
17798: LD_INT 21
17800: PPUSH
17801: LD_INT 3
17803: PUSH
17804: LD_INT 4
17806: PUSH
17807: LD_INT 5
17809: PUSH
17810: LD_INT 6
17812: PUSH
17813: EMPTY
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: PUSH
17819: LD_OWVAR 67
17823: ARRAY
17824: PPUSH
17825: LD_INT 46
17827: PUSH
17828: LD_INT 45
17830: PUSH
17831: LD_INT 44
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: LIST
17838: PPUSH
17839: LD_INT 3
17841: PPUSH
17842: LD_INT 3
17844: PPUSH
17845: LD_INT 24
17847: PPUSH
17848: CALL 14969 0 7
// end ;
17852: END
// every 6 6$0 + 2 2$00 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
17853: LD_EXP 20
17857: PUSH
17858: LD_INT 2
17860: EQUAL
17861: IFFALSE 17876
17863: PUSH
17864: LD_INT 21
17866: PPUSH
17867: CALL_OW 255
17871: PUSH
17872: LD_INT 3
17874: EQUAL
17875: AND
17876: IFFALSE 17891
17878: PUSH
17879: LD_INT 112
17881: PPUSH
17882: CALL_OW 255
17886: PUSH
17887: LD_INT 3
17889: EQUAL
17890: AND
17891: IFFALSE 17902
17893: PUSH
17894: LD_INT 21
17896: PPUSH
17897: CALL_OW 302
17901: AND
17902: IFFALSE 17913
17904: PUSH
17905: LD_INT 112
17907: PPUSH
17908: CALL_OW 302
17912: AND
17913: IFFALSE 18003
17915: PUSH
17916: LD_INT 22
17918: PUSH
17919: LD_INT 3
17921: PUSH
17922: EMPTY
17923: LIST
17924: LIST
17925: PUSH
17926: LD_INT 21
17928: PUSH
17929: LD_INT 2
17931: PUSH
17932: EMPTY
17933: LIST
17934: LIST
17935: PUSH
17936: LD_INT 50
17938: PUSH
17939: EMPTY
17940: LIST
17941: PUSH
17942: LD_INT 3
17944: PUSH
17945: LD_INT 58
17947: PUSH
17948: EMPTY
17949: LIST
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: PPUSH
17961: CALL_OW 69
17965: PUSH
17966: LD_INT 18
17968: PPUSH
17969: LD_INT 22
17971: PUSH
17972: LD_INT 3
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: PUSH
17979: LD_INT 21
17981: PUSH
17982: LD_INT 2
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: PPUSH
17993: CALL_OW 70
17997: PUSH
17998: LD_INT 0
18000: EQUAL
18001: DIFF
18002: AND
18003: IFFALSE 18129
18005: GO 18007
18007: DISABLE
// begin enable ;
18008: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
18009: LD_INT 3
18011: PPUSH
18012: LD_INT 21
18014: PPUSH
18015: LD_INT 3
18017: PUSH
18018: LD_INT 4
18020: PUSH
18021: LD_INT 5
18023: PUSH
18024: LD_INT 6
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: PUSH
18033: LD_OWVAR 67
18037: ARRAY
18038: PPUSH
18039: LD_INT 46
18041: PUSH
18042: LD_INT 45
18044: PUSH
18045: LD_INT 44
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: LIST
18052: PPUSH
18053: LD_INT 3
18055: PPUSH
18056: LD_INT 3
18058: PPUSH
18059: LD_INT 24
18061: PPUSH
18062: CALL 14969 0 7
// if russianTimeLapsers = 0 then
18066: LD_EXP 33
18070: PUSH
18071: LD_INT 0
18073: EQUAL
18074: IFFALSE 18129
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
18076: LD_INT 3
18078: PPUSH
18079: LD_INT 112
18081: PPUSH
18082: LD_INT 1
18084: PUSH
18085: LD_INT 2
18087: PUSH
18088: LD_INT 2
18090: PUSH
18091: LD_INT 2
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: PUSH
18100: LD_OWVAR 67
18104: ARRAY
18105: PPUSH
18106: LD_INT 49
18108: PUSH
18109: LD_INT 49
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PPUSH
18116: LD_INT 3
18118: PPUSH
18119: LD_INT 3
18121: PPUSH
18122: LD_INT 24
18124: PPUSH
18125: CALL 14969 0 7
// end ;
18129: END
// every 0 0$1 trigger arabianMines do var i ;
18130: LD_EXP 37
18134: IFFALSE 18255
18136: GO 18138
18138: DISABLE
18139: LD_INT 0
18141: PPUSH
// begin enable ;
18142: ENABLE
// for i in arabianMines do
18143: LD_ADDR_VAR 0 1
18147: PUSH
18148: LD_EXP 37
18152: PUSH
18153: FOR_IN
18154: IFFALSE 18253
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
18156: LD_INT 22
18158: PUSH
18159: LD_INT 1
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: PUSH
18166: LD_INT 92
18168: PUSH
18169: LD_VAR 0 1
18173: PUSH
18174: LD_INT 1
18176: ARRAY
18177: PUSH
18178: LD_VAR 0 1
18182: PUSH
18183: LD_INT 2
18185: ARRAY
18186: PUSH
18187: LD_INT 3
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: PPUSH
18200: CALL_OW 69
18204: IFFALSE 18251
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
18206: LD_VAR 0 1
18210: PUSH
18211: LD_INT 1
18213: ARRAY
18214: PPUSH
18215: LD_VAR 0 1
18219: PUSH
18220: LD_INT 2
18222: ARRAY
18223: PPUSH
18224: LD_INT 5
18226: PPUSH
18227: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
18231: LD_ADDR_EXP 37
18235: PUSH
18236: LD_EXP 37
18240: PPUSH
18241: LD_VAR 0 1
18245: PPUSH
18246: CALL_OW 3
18250: ST_TO_ADDR
// end ; end ;
18251: GO 18153
18253: POP
18254: POP
// end ;
18255: PPOPN 1
18257: END
// every 0 0$10 trigger vehicleTeleported >= 4 and tpCounter mod 12 = 0 do var i , hexes ;
18258: LD_EXP 21
18262: PUSH
18263: LD_INT 4
18265: GREATEREQUAL
18266: IFFALSE 18282
18268: PUSH
18269: LD_EXP 22
18273: PUSH
18274: LD_INT 12
18276: MOD
18277: PUSH
18278: LD_INT 0
18280: EQUAL
18281: AND
18282: IFFALSE 18396
18284: GO 18286
18286: DISABLE
18287: LD_INT 0
18289: PPUSH
18290: PPUSH
// begin enable ;
18291: ENABLE
// hexes := [ [ 122 , 142 ] , [ 101 , 127 ] , [ 104 , 104 ] , [ 46 , 81 ] ] ;
18292: LD_ADDR_VAR 0 2
18296: PUSH
18297: LD_INT 122
18299: PUSH
18300: LD_INT 142
18302: PUSH
18303: EMPTY
18304: LIST
18305: LIST
18306: PUSH
18307: LD_INT 101
18309: PUSH
18310: LD_INT 127
18312: PUSH
18313: EMPTY
18314: LIST
18315: LIST
18316: PUSH
18317: LD_INT 104
18319: PUSH
18320: LD_INT 104
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: PUSH
18327: LD_INT 46
18329: PUSH
18330: LD_INT 81
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: ST_TO_ADDR
// i := rand ( 1 , 4 ) ;
18343: LD_ADDR_VAR 0 1
18347: PUSH
18348: LD_INT 1
18350: PPUSH
18351: LD_INT 4
18353: PPUSH
18354: CALL_OW 12
18358: ST_TO_ADDR
// TeleportExit ( ruteleprt , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18359: LD_INT 10
18361: PPUSH
18362: LD_VAR 0 2
18366: PUSH
18367: LD_VAR 0 1
18371: ARRAY
18372: PUSH
18373: LD_INT 1
18375: ARRAY
18376: PPUSH
18377: LD_VAR 0 2
18381: PUSH
18382: LD_VAR 0 1
18386: ARRAY
18387: PUSH
18388: LD_INT 2
18390: ARRAY
18391: PPUSH
18392: CALL_OW 243
// end ; end_of_file
18396: PPOPN 2
18398: END
// every 0 0$1 trigger IsDead ( ruheadlab ) do
18399: LD_INT 3
18401: PPUSH
18402: CALL_OW 301
18406: IFFALSE 18627
18408: GO 18410
18410: DISABLE
// begin if UnitFilter ( RuScientists , [ f_ok ] ) then
18411: LD_EXP 27
18415: PPUSH
18416: LD_INT 50
18418: PUSH
18419: EMPTY
18420: LIST
18421: PPUSH
18422: CALL_OW 72
18426: IFFALSE 18435
// wait ( 0 0$10 ) ;
18428: LD_INT 350
18430: PPUSH
18431: CALL_OW 67
// DialogueOn ;
18435: CALL_OW 6
// if sciCounter = 0 then
18439: LD_EXP 28
18443: PUSH
18444: LD_INT 0
18446: EQUAL
18447: IFFALSE 18475
// begin Say ( JMM , D7a-JMM-1 ) ;
18449: LD_EXP 1
18453: PPUSH
18454: LD_STRING D7a-JMM-1
18456: PPUSH
18457: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
18461: LD_EXP 15
18465: PPUSH
18466: LD_STRING D7a-Pow-1
18468: PPUSH
18469: CALL_OW 94
// end else
18473: GO 18619
// if sciCounter < 6 then
18475: LD_EXP 28
18479: PUSH
18480: LD_INT 6
18482: LESS
18483: IFFALSE 18511
// begin Say ( JMM , D7b-JMM-1 ) ;
18485: LD_EXP 1
18489: PPUSH
18490: LD_STRING D7b-JMM-1
18492: PPUSH
18493: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
18497: LD_EXP 15
18501: PPUSH
18502: LD_STRING D7b-Pow-1
18504: PPUSH
18505: CALL_OW 94
// end else
18509: GO 18619
// begin Say ( JMM , D7c-JMM-1 ) ;
18511: LD_EXP 1
18515: PPUSH
18516: LD_STRING D7c-JMM-1
18518: PPUSH
18519: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
18523: LD_EXP 15
18527: PPUSH
18528: LD_STRING D7c-Pow-1
18530: PPUSH
18531: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
18535: LD_EXP 1
18539: PPUSH
18540: LD_STRING D7d-JMM-1
18542: PPUSH
18543: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
18547: LD_EXP 15
18551: PPUSH
18552: LD_STRING D7d-Pow-1
18554: PPUSH
18555: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
18559: LD_EXP 1
18563: PPUSH
18564: LD_STRING D7d-JMM-2
18566: PPUSH
18567: CALL_OW 88
// if askSiberite = 1 then
18571: LD_EXP 25
18575: PUSH
18576: LD_INT 1
18578: EQUAL
18579: IFFALSE 18595
// Say ( JMM , D7d-JMM-2a ) else
18581: LD_EXP 1
18585: PPUSH
18586: LD_STRING D7d-JMM-2a
18588: PPUSH
18589: CALL_OW 88
18593: GO 18607
// SayRadio ( Powell , D7d-Pow-2 ) ;
18595: LD_EXP 15
18599: PPUSH
18600: LD_STRING D7d-Pow-2
18602: PPUSH
18603: CALL_OW 94
// SayRadio ( Powell , D7d-Pow-2a ) ;
18607: LD_EXP 15
18611: PPUSH
18612: LD_STRING D7d-Pow-2a
18614: PPUSH
18615: CALL_OW 94
// end ; DialogueOff ;
18619: CALL_OW 7
// FinishMission ;
18623: CALL 18628 0 0
// end ;
18627: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
18628: LD_INT 0
18630: PPUSH
18631: PPUSH
18632: PPUSH
18633: PPUSH
// m1 := false ;
18634: LD_ADDR_VAR 0 2
18638: PUSH
18639: LD_INT 0
18641: ST_TO_ADDR
// m2 := false ;
18642: LD_ADDR_VAR 0 3
18646: PUSH
18647: LD_INT 0
18649: ST_TO_ADDR
// m3 := false ;
18650: LD_ADDR_VAR 0 4
18654: PUSH
18655: LD_INT 0
18657: ST_TO_ADDR
// if not westPathUsed then
18658: LD_EXP 42
18662: NOT
18663: IFFALSE 18672
// SetAchievement ( ACH_PATH ) ;
18665: LD_STRING ACH_PATH
18667: PPUSH
18668: CALL_OW 543
// if not rocketBuilded then
18672: LD_EXP 44
18676: NOT
18677: IFFALSE 18693
// begin wait ( 3 ) ;
18679: LD_INT 3
18681: PPUSH
18682: CALL_OW 67
// SetAchievement ( ACH_ROCKET ) ;
18686: LD_STRING ACH_ROCKET
18688: PPUSH
18689: CALL_OW 543
// end ; if tick <= 40 40$00 then
18693: LD_OWVAR 1
18697: PUSH
18698: LD_INT 84000
18700: LESSEQUAL
18701: IFFALSE 18717
// begin wait ( 3 ) ;
18703: LD_INT 3
18705: PPUSH
18706: CALL_OW 67
// SetAchievement ( ACH_ASPEED_12 ) ;
18710: LD_STRING ACH_ASPEED_12
18712: PPUSH
18713: CALL_OW 543
// end ; if teleportExplored = 1 then
18717: LD_EXP 26
18721: PUSH
18722: LD_INT 1
18724: EQUAL
18725: IFFALSE 18747
// begin m1 := true ;
18727: LD_ADDR_VAR 0 2
18731: PUSH
18732: LD_INT 1
18734: ST_TO_ADDR
// AddMedal ( Teleport , 1 ) ;
18735: LD_STRING Teleport
18737: PPUSH
18738: LD_INT 1
18740: PPUSH
18741: CALL_OW 101
// end else
18745: GO 18758
// AddMedal ( Teleport , - 1 ) ;
18747: LD_STRING Teleport
18749: PPUSH
18750: LD_INT 1
18752: NEG
18753: PPUSH
18754: CALL_OW 101
// if sciCounter > 2 then
18758: LD_EXP 28
18762: PUSH
18763: LD_INT 2
18765: GREATER
18766: IFFALSE 18788
// begin m2 := true ;
18768: LD_ADDR_VAR 0 3
18772: PUSH
18773: LD_INT 1
18775: ST_TO_ADDR
// AddMedal ( Materials , 1 ) ;
18776: LD_STRING Materials
18778: PPUSH
18779: LD_INT 1
18781: PPUSH
18782: CALL_OW 101
// end else
18786: GO 18799
// AddMedal ( Materials , - 1 ) ;
18788: LD_STRING Materials
18790: PPUSH
18791: LD_INT 1
18793: NEG
18794: PPUSH
18795: CALL_OW 101
// if sciCounter >= 6 then
18799: LD_EXP 28
18803: PUSH
18804: LD_INT 6
18806: GREATEREQUAL
18807: IFFALSE 18839
// begin m3 := true ;
18809: LD_ADDR_VAR 0 4
18813: PUSH
18814: LD_INT 1
18816: ST_TO_ADDR
// AddMedal ( Scientists , 1 ) ;
18817: LD_STRING Scientists
18819: PPUSH
18820: LD_INT 1
18822: PPUSH
18823: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
18827: LD_INT 1
18829: PPUSH
18830: LD_STRING 12_SciDed_1
18832: PPUSH
18833: CALL_OW 39
// end else
18837: GO 18860
// begin AddMedal ( Scientists , - 1 ) ;
18839: LD_STRING Scientists
18841: PPUSH
18842: LD_INT 1
18844: NEG
18845: PPUSH
18846: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
18850: LD_INT 0
18852: PPUSH
18853: LD_STRING 12_SciDed_1
18855: PPUSH
18856: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
18860: LD_EXP 24
18864: PPUSH
18865: LD_STRING 12_MainDepositFake_1
18867: PPUSH
18868: CALL_OW 39
// if m1 and m2 and m3 and Difficulty >= 3 then
18872: LD_VAR 0 2
18876: IFFALSE 18884
18878: PUSH
18879: LD_VAR 0 3
18883: AND
18884: IFFALSE 18892
18886: PUSH
18887: LD_VAR 0 4
18891: AND
18892: IFFALSE 18904
18894: PUSH
18895: LD_OWVAR 67
18899: PUSH
18900: LD_INT 3
18902: GREATEREQUAL
18903: AND
18904: IFFALSE 18916
// SetAchievementEX ( ACH_AMER , 12 ) ;
18906: LD_STRING ACH_AMER
18908: PPUSH
18909: LD_INT 12
18911: PPUSH
18912: CALL_OW 564
// GiveMedals ( MAIN ) ;
18916: LD_STRING MAIN
18918: PPUSH
18919: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
18923: LD_INT 22
18925: PUSH
18926: LD_INT 1
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PUSH
18933: LD_INT 23
18935: PUSH
18936: LD_INT 1
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: PUSH
18943: LD_INT 21
18945: PUSH
18946: LD_INT 1
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: PUSH
18953: LD_INT 2
18955: PUSH
18956: LD_INT 25
18958: PUSH
18959: LD_INT 1
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: PUSH
18966: LD_INT 25
18968: PUSH
18969: LD_INT 2
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: PUSH
18976: LD_INT 25
18978: PUSH
18979: LD_INT 3
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: PUSH
18986: LD_INT 25
18988: PUSH
18989: LD_INT 4
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: PUSH
18996: LD_INT 25
18998: PUSH
18999: LD_INT 5
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: PUSH
19006: LD_INT 25
19008: PUSH
19009: LD_INT 8
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: LIST
19023: LIST
19024: PUSH
19025: EMPTY
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: PPUSH
19031: CALL_OW 69
19035: PPUSH
19036: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19040: LD_EXP 1
19044: PPUSH
19045: LD_EXP 39
19049: PUSH
19050: LD_STRING JMM
19052: STR
19053: PPUSH
19054: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
19058: LD_EXP 7
19062: PPUSH
19063: LD_EXP 39
19067: PUSH
19068: LD_STRING Brown
19070: STR
19071: PPUSH
19072: CALL 13034 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19076: LD_EXP 3
19080: PPUSH
19081: LD_EXP 39
19085: PUSH
19086: LD_STRING Donaldson
19088: STR
19089: PPUSH
19090: CALL 13034 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
19094: LD_EXP 4
19098: PPUSH
19099: LD_EXP 39
19103: PUSH
19104: LD_STRING Bobby
19106: STR
19107: PPUSH
19108: CALL 13034 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
19112: LD_EXP 5
19116: PPUSH
19117: LD_EXP 39
19121: PUSH
19122: LD_STRING Cyrus
19124: STR
19125: PPUSH
19126: CALL 13034 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
19130: LD_EXP 2
19134: PPUSH
19135: LD_EXP 39
19139: PUSH
19140: LD_STRING Lisa
19142: STR
19143: PPUSH
19144: CALL 13034 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
19148: LD_EXP 12
19152: PPUSH
19153: LD_EXP 39
19157: PUSH
19158: LD_STRING Frank
19160: STR
19161: PPUSH
19162: CALL 13034 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
19166: LD_EXP 13
19170: PPUSH
19171: LD_EXP 39
19175: PUSH
19176: LD_STRING Kikuchi
19178: STR
19179: PPUSH
19180: CALL 13034 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
19184: LD_EXP 9
19188: PPUSH
19189: LD_EXP 39
19193: PUSH
19194: LD_STRING Houten
19196: STR
19197: PPUSH
19198: CALL 13034 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
19202: LD_EXP 11
19206: PPUSH
19207: LD_EXP 39
19211: PUSH
19212: LD_STRING Gary
19214: STR
19215: PPUSH
19216: CALL 13034 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
19220: LD_EXP 10
19224: PPUSH
19225: LD_EXP 39
19229: PUSH
19230: LD_STRING Cornell
19232: STR
19233: PPUSH
19234: CALL 13034 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
19238: LD_EXP 6
19242: PPUSH
19243: LD_EXP 39
19247: PUSH
19248: LD_STRING Denis
19250: STR
19251: PPUSH
19252: CALL 13034 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
19256: LD_EXP 8
19260: PPUSH
19261: LD_EXP 39
19265: PUSH
19266: LD_STRING Gladstone
19268: STR
19269: PPUSH
19270: CALL 13034 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
19274: LD_INT 22
19276: PUSH
19277: LD_INT 1
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PUSH
19284: LD_INT 23
19286: PUSH
19287: LD_INT 1
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PUSH
19294: LD_INT 21
19296: PUSH
19297: LD_INT 1
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 2
19306: PUSH
19307: LD_INT 25
19309: PUSH
19310: LD_INT 1
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PUSH
19317: LD_INT 25
19319: PUSH
19320: LD_INT 2
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: PUSH
19327: LD_INT 25
19329: PUSH
19330: LD_INT 3
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: PUSH
19337: LD_INT 25
19339: PUSH
19340: LD_INT 4
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: PUSH
19347: LD_INT 25
19349: PUSH
19350: LD_INT 5
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: PUSH
19357: LD_INT 25
19359: PUSH
19360: LD_INT 8
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: PPUSH
19382: CALL_OW 69
19386: PUSH
19387: LD_EXP 1
19391: PUSH
19392: LD_EXP 7
19396: PUSH
19397: LD_EXP 3
19401: PUSH
19402: LD_EXP 4
19406: PUSH
19407: LD_EXP 5
19411: PUSH
19412: LD_EXP 2
19416: PUSH
19417: LD_EXP 12
19421: PUSH
19422: LD_EXP 8
19426: PUSH
19427: LD_EXP 13
19431: PUSH
19432: LD_EXP 6
19436: PUSH
19437: LD_EXP 9
19441: PUSH
19442: LD_EXP 11
19446: PUSH
19447: LD_EXP 10
19451: PUSH
19452: EMPTY
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: DIFF
19467: PPUSH
19468: LD_STRING 12_other_survivors
19470: PPUSH
19471: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
19475: LD_INT 22
19477: PUSH
19478: LD_INT 1
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: PUSH
19485: LD_INT 23
19487: PUSH
19488: LD_INT 2
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: PUSH
19495: LD_INT 21
19497: PUSH
19498: LD_INT 1
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: PUSH
19505: LD_INT 2
19507: PUSH
19508: LD_INT 25
19510: PUSH
19511: LD_INT 1
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PUSH
19518: LD_INT 25
19520: PUSH
19521: LD_INT 2
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: PUSH
19528: LD_INT 25
19530: PUSH
19531: LD_INT 3
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: PUSH
19538: LD_INT 25
19540: PUSH
19541: LD_INT 4
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: PUSH
19548: LD_INT 25
19550: PUSH
19551: LD_INT 5
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: PUSH
19558: LD_INT 25
19560: PUSH
19561: LD_INT 8
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: PPUSH
19583: CALL_OW 69
19587: PPUSH
19588: LD_STRING 12_kurt_squad
19590: PPUSH
19591: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
19595: LD_EXP 14
19599: PPUSH
19600: LD_STRING 12_others
19602: PPUSH
19603: CALL_OW 38
// YouWin ;
19607: CALL_OW 103
// end ; end_of_file
19611: LD_VAR 0 1
19615: RET
// every 0 0$01 trigger ruAI and cratesAllow do
19616: LD_EXP 34
19620: IFFALSE 19628
19622: PUSH
19623: LD_EXP 45
19627: AND
19628: IFFALSE 19940
19630: GO 19632
19632: DISABLE
// begin repeat wait ( 0 0$08 ) ;
19633: LD_INT 280
19635: PPUSH
19636: CALL_OW 67
// if cratesSpawned < 12 then
19640: LD_EXP 38
19644: PUSH
19645: LD_INT 12
19647: LESS
19648: IFFALSE 19700
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
19650: LD_INT 105
19652: PPUSH
19653: LD_INT 350
19655: PPUSH
19656: CALL_OW 12
19660: PPUSH
19661: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19665: LD_INT 3
19667: PPUSH
19668: LD_INT 5
19670: PPUSH
19671: CALL_OW 12
19675: PPUSH
19676: LD_INT 21
19678: PPUSH
19679: LD_INT 1
19681: PPUSH
19682: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19686: LD_ADDR_EXP 38
19690: PUSH
19691: LD_EXP 38
19695: PUSH
19696: LD_INT 1
19698: PLUS
19699: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 32 then
19700: LD_EXP 38
19704: PUSH
19705: LD_INT 12
19707: GREATEREQUAL
19708: IFFALSE 19720
19710: PUSH
19711: LD_EXP 38
19715: PUSH
19716: LD_INT 32
19718: LESS
19719: AND
19720: IFFALSE 19772
// begin wait ( rand ( 0 0$12 , 0 0$20 ) ) ;
19722: LD_INT 420
19724: PPUSH
19725: LD_INT 700
19727: PPUSH
19728: CALL_OW 12
19732: PPUSH
19733: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19737: LD_INT 3
19739: PPUSH
19740: LD_INT 5
19742: PPUSH
19743: CALL_OW 12
19747: PPUSH
19748: LD_INT 21
19750: PPUSH
19751: LD_INT 1
19753: PPUSH
19754: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19758: LD_ADDR_EXP 38
19762: PUSH
19763: LD_EXP 38
19767: PUSH
19768: LD_INT 1
19770: PLUS
19771: ST_TO_ADDR
// end ; if cratesSpawned >= 32 then
19772: LD_EXP 38
19776: PUSH
19777: LD_INT 32
19779: GREATEREQUAL
19780: IFFALSE 19854
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
19782: LD_INT 21
19784: PPUSH
19785: CALL_OW 435
19789: PUSH
19790: LD_INT 14
19792: LESS
19793: IFFALSE 19804
// wait ( 0 0$10 ) else
19795: LD_INT 350
19797: PPUSH
19798: CALL_OW 67
19802: GO 19819
// wait ( rand ( 0 0$50 , 1 1$30 ) ) ;
19804: LD_INT 1750
19806: PPUSH
19807: LD_INT 3150
19809: PPUSH
19810: CALL_OW 12
19814: PPUSH
19815: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
19819: LD_INT 2
19821: PPUSH
19822: LD_INT 5
19824: PPUSH
19825: CALL_OW 12
19829: PPUSH
19830: LD_INT 21
19832: PPUSH
19833: LD_INT 1
19835: PPUSH
19836: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19840: LD_ADDR_EXP 38
19844: PUSH
19845: LD_EXP 38
19849: PUSH
19850: LD_INT 1
19852: PLUS
19853: ST_TO_ADDR
// end ; if cratesSpawned >= 110 then
19854: LD_EXP 38
19858: PUSH
19859: LD_INT 110
19861: GREATEREQUAL
19862: IFFALSE 19936
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
19864: LD_INT 21
19866: PPUSH
19867: CALL_OW 435
19871: PUSH
19872: LD_INT 14
19874: LESS
19875: IFFALSE 19886
// wait ( 0 0$20 ) else
19877: LD_INT 700
19879: PPUSH
19880: CALL_OW 67
19884: GO 19901
// wait ( rand ( 1 1$10 , 1 1$50 ) ) ;
19886: LD_INT 2450
19888: PPUSH
19889: LD_INT 3850
19891: PPUSH
19892: CALL_OW 12
19896: PPUSH
19897: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
19901: LD_INT 1
19903: PPUSH
19904: LD_INT 5
19906: PPUSH
19907: CALL_OW 12
19911: PPUSH
19912: LD_INT 21
19914: PPUSH
19915: LD_INT 1
19917: PPUSH
19918: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19922: LD_ADDR_EXP 38
19926: PUSH
19927: LD_EXP 38
19931: PUSH
19932: LD_INT 1
19934: PLUS
19935: ST_TO_ADDR
// end ; until false ;
19936: LD_INT 0
19938: IFFALSE 19633
// end ; end_of_file end_of_file
19940: END
// export globalGameSaveCounter ; every 0 0$1 do
19941: GO 19943
19943: DISABLE
// begin enable ;
19944: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19945: LD_STRING updateTimer(
19947: PUSH
19948: LD_OWVAR 1
19952: STR
19953: PUSH
19954: LD_STRING );
19956: STR
19957: PPUSH
19958: CALL_OW 559
// end ;
19962: END
// every 0 0$1 do
19963: GO 19965
19965: DISABLE
// begin globalGameSaveCounter := 0 ;
19966: LD_ADDR_EXP 46
19970: PUSH
19971: LD_INT 0
19973: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19974: LD_STRING setGameSaveCounter(0)
19976: PPUSH
19977: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19981: LD_STRING initStreamRollete();
19983: PPUSH
19984: CALL_OW 559
// InitStreamMode ;
19988: CALL 21333 0 0
// DefineStreamItems ( false ) ;
19992: LD_INT 0
19994: PPUSH
19995: CALL 21797 0 1
// end ;
19999: END
// export function SOS_MapStart ( ) ; begin
20000: LD_INT 0
20002: PPUSH
// if streamModeActive then
20003: LD_EXP 47
20007: IFFALSE 20016
// DefineStreamItems ( true ) ;
20009: LD_INT 1
20011: PPUSH
20012: CALL 21797 0 1
// UpdateLuaVariables ( ) ;
20016: CALL 20033 0 0
// UpdateFactoryWaypoints ( ) ;
20020: CALL 34919 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20024: CALL 35171 0 0
// end ;
20028: LD_VAR 0 1
20032: RET
// function UpdateLuaVariables ( ) ; begin
20033: LD_INT 0
20035: PPUSH
// if globalGameSaveCounter then
20036: LD_EXP 46
20040: IFFALSE 20074
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20042: LD_ADDR_EXP 46
20046: PUSH
20047: LD_EXP 46
20051: PPUSH
20052: CALL 80951 0 1
20056: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20057: LD_STRING setGameSaveCounter(
20059: PUSH
20060: LD_EXP 46
20064: STR
20065: PUSH
20066: LD_STRING )
20068: STR
20069: PPUSH
20070: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20074: LD_STRING setGameDifficulty(
20076: PUSH
20077: LD_OWVAR 67
20081: STR
20082: PUSH
20083: LD_STRING )
20085: STR
20086: PPUSH
20087: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
20091: LD_STRING displayDifficulty(
20093: PUSH
20094: LD_OWVAR 67
20098: STR
20099: PUSH
20100: LD_STRING )
20102: STR
20103: PPUSH
20104: CALL_OW 559
// end ;
20108: LD_VAR 0 1
20112: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20113: LD_INT 0
20115: PPUSH
// if p2 = stream_mode then
20116: LD_VAR 0 2
20120: PUSH
20121: LD_INT 100
20123: EQUAL
20124: IFFALSE 21127
// begin if not StreamModeActive then
20126: LD_EXP 47
20130: NOT
20131: IFFALSE 20141
// StreamModeActive := true ;
20133: LD_ADDR_EXP 47
20137: PUSH
20138: LD_INT 1
20140: ST_TO_ADDR
// if p3 = 0 then
20141: LD_VAR 0 3
20145: PUSH
20146: LD_INT 0
20148: EQUAL
20149: IFFALSE 20155
// InitStreamMode ;
20151: CALL 21333 0 0
// if p3 = 1 then
20155: LD_VAR 0 3
20159: PUSH
20160: LD_INT 1
20162: EQUAL
20163: IFFALSE 20173
// sRocket := true ;
20165: LD_ADDR_EXP 52
20169: PUSH
20170: LD_INT 1
20172: ST_TO_ADDR
// if p3 = 2 then
20173: LD_VAR 0 3
20177: PUSH
20178: LD_INT 2
20180: EQUAL
20181: IFFALSE 20191
// sSpeed := true ;
20183: LD_ADDR_EXP 51
20187: PUSH
20188: LD_INT 1
20190: ST_TO_ADDR
// if p3 = 3 then
20191: LD_VAR 0 3
20195: PUSH
20196: LD_INT 3
20198: EQUAL
20199: IFFALSE 20209
// sEngine := true ;
20201: LD_ADDR_EXP 53
20205: PUSH
20206: LD_INT 1
20208: ST_TO_ADDR
// if p3 = 4 then
20209: LD_VAR 0 3
20213: PUSH
20214: LD_INT 4
20216: EQUAL
20217: IFFALSE 20227
// sSpec := true ;
20219: LD_ADDR_EXP 50
20223: PUSH
20224: LD_INT 1
20226: ST_TO_ADDR
// if p3 = 5 then
20227: LD_VAR 0 3
20231: PUSH
20232: LD_INT 5
20234: EQUAL
20235: IFFALSE 20245
// sLevel := true ;
20237: LD_ADDR_EXP 54
20241: PUSH
20242: LD_INT 1
20244: ST_TO_ADDR
// if p3 = 6 then
20245: LD_VAR 0 3
20249: PUSH
20250: LD_INT 6
20252: EQUAL
20253: IFFALSE 20263
// sArmoury := true ;
20255: LD_ADDR_EXP 55
20259: PUSH
20260: LD_INT 1
20262: ST_TO_ADDR
// if p3 = 7 then
20263: LD_VAR 0 3
20267: PUSH
20268: LD_INT 7
20270: EQUAL
20271: IFFALSE 20281
// sRadar := true ;
20273: LD_ADDR_EXP 56
20277: PUSH
20278: LD_INT 1
20280: ST_TO_ADDR
// if p3 = 8 then
20281: LD_VAR 0 3
20285: PUSH
20286: LD_INT 8
20288: EQUAL
20289: IFFALSE 20299
// sBunker := true ;
20291: LD_ADDR_EXP 57
20295: PUSH
20296: LD_INT 1
20298: ST_TO_ADDR
// if p3 = 9 then
20299: LD_VAR 0 3
20303: PUSH
20304: LD_INT 9
20306: EQUAL
20307: IFFALSE 20317
// sHack := true ;
20309: LD_ADDR_EXP 58
20313: PUSH
20314: LD_INT 1
20316: ST_TO_ADDR
// if p3 = 10 then
20317: LD_VAR 0 3
20321: PUSH
20322: LD_INT 10
20324: EQUAL
20325: IFFALSE 20335
// sFire := true ;
20327: LD_ADDR_EXP 59
20331: PUSH
20332: LD_INT 1
20334: ST_TO_ADDR
// if p3 = 11 then
20335: LD_VAR 0 3
20339: PUSH
20340: LD_INT 11
20342: EQUAL
20343: IFFALSE 20353
// sRefresh := true ;
20345: LD_ADDR_EXP 60
20349: PUSH
20350: LD_INT 1
20352: ST_TO_ADDR
// if p3 = 12 then
20353: LD_VAR 0 3
20357: PUSH
20358: LD_INT 12
20360: EQUAL
20361: IFFALSE 20371
// sExp := true ;
20363: LD_ADDR_EXP 61
20367: PUSH
20368: LD_INT 1
20370: ST_TO_ADDR
// if p3 = 13 then
20371: LD_VAR 0 3
20375: PUSH
20376: LD_INT 13
20378: EQUAL
20379: IFFALSE 20389
// sDepot := true ;
20381: LD_ADDR_EXP 62
20385: PUSH
20386: LD_INT 1
20388: ST_TO_ADDR
// if p3 = 14 then
20389: LD_VAR 0 3
20393: PUSH
20394: LD_INT 14
20396: EQUAL
20397: IFFALSE 20407
// sFlag := true ;
20399: LD_ADDR_EXP 63
20403: PUSH
20404: LD_INT 1
20406: ST_TO_ADDR
// if p3 = 15 then
20407: LD_VAR 0 3
20411: PUSH
20412: LD_INT 15
20414: EQUAL
20415: IFFALSE 20425
// sKamikadze := true ;
20417: LD_ADDR_EXP 71
20421: PUSH
20422: LD_INT 1
20424: ST_TO_ADDR
// if p3 = 16 then
20425: LD_VAR 0 3
20429: PUSH
20430: LD_INT 16
20432: EQUAL
20433: IFFALSE 20443
// sTroll := true ;
20435: LD_ADDR_EXP 72
20439: PUSH
20440: LD_INT 1
20442: ST_TO_ADDR
// if p3 = 17 then
20443: LD_VAR 0 3
20447: PUSH
20448: LD_INT 17
20450: EQUAL
20451: IFFALSE 20461
// sSlow := true ;
20453: LD_ADDR_EXP 73
20457: PUSH
20458: LD_INT 1
20460: ST_TO_ADDR
// if p3 = 18 then
20461: LD_VAR 0 3
20465: PUSH
20466: LD_INT 18
20468: EQUAL
20469: IFFALSE 20479
// sLack := true ;
20471: LD_ADDR_EXP 74
20475: PUSH
20476: LD_INT 1
20478: ST_TO_ADDR
// if p3 = 19 then
20479: LD_VAR 0 3
20483: PUSH
20484: LD_INT 19
20486: EQUAL
20487: IFFALSE 20497
// sTank := true ;
20489: LD_ADDR_EXP 76
20493: PUSH
20494: LD_INT 1
20496: ST_TO_ADDR
// if p3 = 20 then
20497: LD_VAR 0 3
20501: PUSH
20502: LD_INT 20
20504: EQUAL
20505: IFFALSE 20515
// sRemote := true ;
20507: LD_ADDR_EXP 77
20511: PUSH
20512: LD_INT 1
20514: ST_TO_ADDR
// if p3 = 21 then
20515: LD_VAR 0 3
20519: PUSH
20520: LD_INT 21
20522: EQUAL
20523: IFFALSE 20533
// sPowell := true ;
20525: LD_ADDR_EXP 78
20529: PUSH
20530: LD_INT 1
20532: ST_TO_ADDR
// if p3 = 22 then
20533: LD_VAR 0 3
20537: PUSH
20538: LD_INT 22
20540: EQUAL
20541: IFFALSE 20551
// sTeleport := true ;
20543: LD_ADDR_EXP 81
20547: PUSH
20548: LD_INT 1
20550: ST_TO_ADDR
// if p3 = 23 then
20551: LD_VAR 0 3
20555: PUSH
20556: LD_INT 23
20558: EQUAL
20559: IFFALSE 20569
// sOilTower := true ;
20561: LD_ADDR_EXP 83
20565: PUSH
20566: LD_INT 1
20568: ST_TO_ADDR
// if p3 = 24 then
20569: LD_VAR 0 3
20573: PUSH
20574: LD_INT 24
20576: EQUAL
20577: IFFALSE 20587
// sShovel := true ;
20579: LD_ADDR_EXP 84
20583: PUSH
20584: LD_INT 1
20586: ST_TO_ADDR
// if p3 = 25 then
20587: LD_VAR 0 3
20591: PUSH
20592: LD_INT 25
20594: EQUAL
20595: IFFALSE 20605
// sSheik := true ;
20597: LD_ADDR_EXP 85
20601: PUSH
20602: LD_INT 1
20604: ST_TO_ADDR
// if p3 = 26 then
20605: LD_VAR 0 3
20609: PUSH
20610: LD_INT 26
20612: EQUAL
20613: IFFALSE 20623
// sEarthquake := true ;
20615: LD_ADDR_EXP 87
20619: PUSH
20620: LD_INT 1
20622: ST_TO_ADDR
// if p3 = 27 then
20623: LD_VAR 0 3
20627: PUSH
20628: LD_INT 27
20630: EQUAL
20631: IFFALSE 20641
// sAI := true ;
20633: LD_ADDR_EXP 88
20637: PUSH
20638: LD_INT 1
20640: ST_TO_ADDR
// if p3 = 28 then
20641: LD_VAR 0 3
20645: PUSH
20646: LD_INT 28
20648: EQUAL
20649: IFFALSE 20659
// sCargo := true ;
20651: LD_ADDR_EXP 91
20655: PUSH
20656: LD_INT 1
20658: ST_TO_ADDR
// if p3 = 29 then
20659: LD_VAR 0 3
20663: PUSH
20664: LD_INT 29
20666: EQUAL
20667: IFFALSE 20677
// sDLaser := true ;
20669: LD_ADDR_EXP 92
20673: PUSH
20674: LD_INT 1
20676: ST_TO_ADDR
// if p3 = 30 then
20677: LD_VAR 0 3
20681: PUSH
20682: LD_INT 30
20684: EQUAL
20685: IFFALSE 20695
// sExchange := true ;
20687: LD_ADDR_EXP 93
20691: PUSH
20692: LD_INT 1
20694: ST_TO_ADDR
// if p3 = 31 then
20695: LD_VAR 0 3
20699: PUSH
20700: LD_INT 31
20702: EQUAL
20703: IFFALSE 20713
// sFac := true ;
20705: LD_ADDR_EXP 94
20709: PUSH
20710: LD_INT 1
20712: ST_TO_ADDR
// if p3 = 32 then
20713: LD_VAR 0 3
20717: PUSH
20718: LD_INT 32
20720: EQUAL
20721: IFFALSE 20731
// sPower := true ;
20723: LD_ADDR_EXP 95
20727: PUSH
20728: LD_INT 1
20730: ST_TO_ADDR
// if p3 = 33 then
20731: LD_VAR 0 3
20735: PUSH
20736: LD_INT 33
20738: EQUAL
20739: IFFALSE 20749
// sRandom := true ;
20741: LD_ADDR_EXP 96
20745: PUSH
20746: LD_INT 1
20748: ST_TO_ADDR
// if p3 = 34 then
20749: LD_VAR 0 3
20753: PUSH
20754: LD_INT 34
20756: EQUAL
20757: IFFALSE 20767
// sShield := true ;
20759: LD_ADDR_EXP 97
20763: PUSH
20764: LD_INT 1
20766: ST_TO_ADDR
// if p3 = 35 then
20767: LD_VAR 0 3
20771: PUSH
20772: LD_INT 35
20774: EQUAL
20775: IFFALSE 20785
// sTime := true ;
20777: LD_ADDR_EXP 98
20781: PUSH
20782: LD_INT 1
20784: ST_TO_ADDR
// if p3 = 36 then
20785: LD_VAR 0 3
20789: PUSH
20790: LD_INT 36
20792: EQUAL
20793: IFFALSE 20803
// sTools := true ;
20795: LD_ADDR_EXP 99
20799: PUSH
20800: LD_INT 1
20802: ST_TO_ADDR
// if p3 = 101 then
20803: LD_VAR 0 3
20807: PUSH
20808: LD_INT 101
20810: EQUAL
20811: IFFALSE 20821
// sSold := true ;
20813: LD_ADDR_EXP 64
20817: PUSH
20818: LD_INT 1
20820: ST_TO_ADDR
// if p3 = 102 then
20821: LD_VAR 0 3
20825: PUSH
20826: LD_INT 102
20828: EQUAL
20829: IFFALSE 20839
// sDiff := true ;
20831: LD_ADDR_EXP 65
20835: PUSH
20836: LD_INT 1
20838: ST_TO_ADDR
// if p3 = 103 then
20839: LD_VAR 0 3
20843: PUSH
20844: LD_INT 103
20846: EQUAL
20847: IFFALSE 20857
// sFog := true ;
20849: LD_ADDR_EXP 68
20853: PUSH
20854: LD_INT 1
20856: ST_TO_ADDR
// if p3 = 104 then
20857: LD_VAR 0 3
20861: PUSH
20862: LD_INT 104
20864: EQUAL
20865: IFFALSE 20875
// sReset := true ;
20867: LD_ADDR_EXP 69
20871: PUSH
20872: LD_INT 1
20874: ST_TO_ADDR
// if p3 = 105 then
20875: LD_VAR 0 3
20879: PUSH
20880: LD_INT 105
20882: EQUAL
20883: IFFALSE 20893
// sSun := true ;
20885: LD_ADDR_EXP 70
20889: PUSH
20890: LD_INT 1
20892: ST_TO_ADDR
// if p3 = 106 then
20893: LD_VAR 0 3
20897: PUSH
20898: LD_INT 106
20900: EQUAL
20901: IFFALSE 20911
// sTiger := true ;
20903: LD_ADDR_EXP 66
20907: PUSH
20908: LD_INT 1
20910: ST_TO_ADDR
// if p3 = 107 then
20911: LD_VAR 0 3
20915: PUSH
20916: LD_INT 107
20918: EQUAL
20919: IFFALSE 20929
// sBomb := true ;
20921: LD_ADDR_EXP 67
20925: PUSH
20926: LD_INT 1
20928: ST_TO_ADDR
// if p3 = 108 then
20929: LD_VAR 0 3
20933: PUSH
20934: LD_INT 108
20936: EQUAL
20937: IFFALSE 20947
// sWound := true ;
20939: LD_ADDR_EXP 75
20943: PUSH
20944: LD_INT 1
20946: ST_TO_ADDR
// if p3 = 109 then
20947: LD_VAR 0 3
20951: PUSH
20952: LD_INT 109
20954: EQUAL
20955: IFFALSE 20965
// sBetray := true ;
20957: LD_ADDR_EXP 79
20961: PUSH
20962: LD_INT 1
20964: ST_TO_ADDR
// if p3 = 110 then
20965: LD_VAR 0 3
20969: PUSH
20970: LD_INT 110
20972: EQUAL
20973: IFFALSE 20983
// sContamin := true ;
20975: LD_ADDR_EXP 80
20979: PUSH
20980: LD_INT 1
20982: ST_TO_ADDR
// if p3 = 111 then
20983: LD_VAR 0 3
20987: PUSH
20988: LD_INT 111
20990: EQUAL
20991: IFFALSE 21001
// sOil := true ;
20993: LD_ADDR_EXP 82
20997: PUSH
20998: LD_INT 1
21000: ST_TO_ADDR
// if p3 = 112 then
21001: LD_VAR 0 3
21005: PUSH
21006: LD_INT 112
21008: EQUAL
21009: IFFALSE 21019
// sStu := true ;
21011: LD_ADDR_EXP 86
21015: PUSH
21016: LD_INT 1
21018: ST_TO_ADDR
// if p3 = 113 then
21019: LD_VAR 0 3
21023: PUSH
21024: LD_INT 113
21026: EQUAL
21027: IFFALSE 21037
// sBazooka := true ;
21029: LD_ADDR_EXP 89
21033: PUSH
21034: LD_INT 1
21036: ST_TO_ADDR
// if p3 = 114 then
21037: LD_VAR 0 3
21041: PUSH
21042: LD_INT 114
21044: EQUAL
21045: IFFALSE 21055
// sMortar := true ;
21047: LD_ADDR_EXP 90
21051: PUSH
21052: LD_INT 1
21054: ST_TO_ADDR
// if p3 = 115 then
21055: LD_VAR 0 3
21059: PUSH
21060: LD_INT 115
21062: EQUAL
21063: IFFALSE 21073
// sRanger := true ;
21065: LD_ADDR_EXP 100
21069: PUSH
21070: LD_INT 1
21072: ST_TO_ADDR
// if p3 = 116 then
21073: LD_VAR 0 3
21077: PUSH
21078: LD_INT 116
21080: EQUAL
21081: IFFALSE 21091
// sComputer := true ;
21083: LD_ADDR_EXP 101
21087: PUSH
21088: LD_INT 1
21090: ST_TO_ADDR
// if p3 = 117 then
21091: LD_VAR 0 3
21095: PUSH
21096: LD_INT 117
21098: EQUAL
21099: IFFALSE 21109
// s30 := true ;
21101: LD_ADDR_EXP 102
21105: PUSH
21106: LD_INT 1
21108: ST_TO_ADDR
// if p3 = 118 then
21109: LD_VAR 0 3
21113: PUSH
21114: LD_INT 118
21116: EQUAL
21117: IFFALSE 21127
// s60 := true ;
21119: LD_ADDR_EXP 103
21123: PUSH
21124: LD_INT 1
21126: ST_TO_ADDR
// end ; if p2 = hack_mode then
21127: LD_VAR 0 2
21131: PUSH
21132: LD_INT 101
21134: EQUAL
21135: IFFALSE 21263
// begin case p3 of 1 :
21137: LD_VAR 0 3
21141: PUSH
21142: LD_INT 1
21144: DOUBLE
21145: EQUAL
21146: IFTRUE 21150
21148: GO 21157
21150: POP
// hHackUnlimitedResources ; 2 :
21151: CALL 33526 0 0
21155: GO 21263
21157: LD_INT 2
21159: DOUBLE
21160: EQUAL
21161: IFTRUE 21165
21163: GO 21172
21165: POP
// hHackSetLevel10 ; 3 :
21166: CALL 33659 0 0
21170: GO 21263
21172: LD_INT 3
21174: DOUBLE
21175: EQUAL
21176: IFTRUE 21180
21178: GO 21187
21180: POP
// hHackSetLevel10YourUnits ; 4 :
21181: CALL 33744 0 0
21185: GO 21263
21187: LD_INT 4
21189: DOUBLE
21190: EQUAL
21191: IFTRUE 21195
21193: GO 21202
21195: POP
// hHackInvincible ; 5 :
21196: CALL 34192 0 0
21200: GO 21263
21202: LD_INT 5
21204: DOUBLE
21205: EQUAL
21206: IFTRUE 21210
21208: GO 21217
21210: POP
// hHackInvisible ; 6 :
21211: CALL 34303 0 0
21215: GO 21263
21217: LD_INT 6
21219: DOUBLE
21220: EQUAL
21221: IFTRUE 21225
21223: GO 21232
21225: POP
// hHackChangeYourSide ; 7 :
21226: CALL 34360 0 0
21230: GO 21263
21232: LD_INT 7
21234: DOUBLE
21235: EQUAL
21236: IFTRUE 21240
21238: GO 21247
21240: POP
// hHackChangeUnitSide ; 8 :
21241: CALL 34402 0 0
21245: GO 21263
21247: LD_INT 8
21249: DOUBLE
21250: EQUAL
21251: IFTRUE 21255
21253: GO 21262
21255: POP
// hHackFog ; end ;
21256: CALL 34503 0 0
21260: GO 21263
21262: POP
// end ; if p2 = game_save_mode then
21263: LD_VAR 0 2
21267: PUSH
21268: LD_INT 102
21270: EQUAL
21271: IFFALSE 21328
// begin if p3 = 1 then
21273: LD_VAR 0 3
21277: PUSH
21278: LD_INT 1
21280: EQUAL
21281: IFFALSE 21293
// globalGameSaveCounter := p4 ;
21283: LD_ADDR_EXP 46
21287: PUSH
21288: LD_VAR 0 4
21292: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21293: LD_VAR 0 3
21297: PUSH
21298: LD_INT 2
21300: EQUAL
21301: IFFALSE 21309
21303: PUSH
21304: LD_EXP 46
21308: AND
21309: IFFALSE 21328
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21311: LD_STRING setGameSaveCounter(
21313: PUSH
21314: LD_EXP 46
21318: STR
21319: PUSH
21320: LD_STRING )
21322: STR
21323: PPUSH
21324: CALL_OW 559
// end ; end ;
21328: LD_VAR 0 7
21332: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21333: LD_INT 0
21335: PPUSH
// streamModeActive := false ;
21336: LD_ADDR_EXP 47
21340: PUSH
21341: LD_INT 0
21343: ST_TO_ADDR
// normalCounter := 36 ;
21344: LD_ADDR_EXP 48
21348: PUSH
21349: LD_INT 36
21351: ST_TO_ADDR
// hardcoreCounter := 18 ;
21352: LD_ADDR_EXP 49
21356: PUSH
21357: LD_INT 18
21359: ST_TO_ADDR
// sRocket := false ;
21360: LD_ADDR_EXP 52
21364: PUSH
21365: LD_INT 0
21367: ST_TO_ADDR
// sSpeed := false ;
21368: LD_ADDR_EXP 51
21372: PUSH
21373: LD_INT 0
21375: ST_TO_ADDR
// sEngine := false ;
21376: LD_ADDR_EXP 53
21380: PUSH
21381: LD_INT 0
21383: ST_TO_ADDR
// sSpec := false ;
21384: LD_ADDR_EXP 50
21388: PUSH
21389: LD_INT 0
21391: ST_TO_ADDR
// sLevel := false ;
21392: LD_ADDR_EXP 54
21396: PUSH
21397: LD_INT 0
21399: ST_TO_ADDR
// sArmoury := false ;
21400: LD_ADDR_EXP 55
21404: PUSH
21405: LD_INT 0
21407: ST_TO_ADDR
// sRadar := false ;
21408: LD_ADDR_EXP 56
21412: PUSH
21413: LD_INT 0
21415: ST_TO_ADDR
// sBunker := false ;
21416: LD_ADDR_EXP 57
21420: PUSH
21421: LD_INT 0
21423: ST_TO_ADDR
// sHack := false ;
21424: LD_ADDR_EXP 58
21428: PUSH
21429: LD_INT 0
21431: ST_TO_ADDR
// sFire := false ;
21432: LD_ADDR_EXP 59
21436: PUSH
21437: LD_INT 0
21439: ST_TO_ADDR
// sRefresh := false ;
21440: LD_ADDR_EXP 60
21444: PUSH
21445: LD_INT 0
21447: ST_TO_ADDR
// sExp := false ;
21448: LD_ADDR_EXP 61
21452: PUSH
21453: LD_INT 0
21455: ST_TO_ADDR
// sDepot := false ;
21456: LD_ADDR_EXP 62
21460: PUSH
21461: LD_INT 0
21463: ST_TO_ADDR
// sFlag := false ;
21464: LD_ADDR_EXP 63
21468: PUSH
21469: LD_INT 0
21471: ST_TO_ADDR
// sKamikadze := false ;
21472: LD_ADDR_EXP 71
21476: PUSH
21477: LD_INT 0
21479: ST_TO_ADDR
// sTroll := false ;
21480: LD_ADDR_EXP 72
21484: PUSH
21485: LD_INT 0
21487: ST_TO_ADDR
// sSlow := false ;
21488: LD_ADDR_EXP 73
21492: PUSH
21493: LD_INT 0
21495: ST_TO_ADDR
// sLack := false ;
21496: LD_ADDR_EXP 74
21500: PUSH
21501: LD_INT 0
21503: ST_TO_ADDR
// sTank := false ;
21504: LD_ADDR_EXP 76
21508: PUSH
21509: LD_INT 0
21511: ST_TO_ADDR
// sRemote := false ;
21512: LD_ADDR_EXP 77
21516: PUSH
21517: LD_INT 0
21519: ST_TO_ADDR
// sPowell := false ;
21520: LD_ADDR_EXP 78
21524: PUSH
21525: LD_INT 0
21527: ST_TO_ADDR
// sTeleport := false ;
21528: LD_ADDR_EXP 81
21532: PUSH
21533: LD_INT 0
21535: ST_TO_ADDR
// sOilTower := false ;
21536: LD_ADDR_EXP 83
21540: PUSH
21541: LD_INT 0
21543: ST_TO_ADDR
// sShovel := false ;
21544: LD_ADDR_EXP 84
21548: PUSH
21549: LD_INT 0
21551: ST_TO_ADDR
// sSheik := false ;
21552: LD_ADDR_EXP 85
21556: PUSH
21557: LD_INT 0
21559: ST_TO_ADDR
// sEarthquake := false ;
21560: LD_ADDR_EXP 87
21564: PUSH
21565: LD_INT 0
21567: ST_TO_ADDR
// sAI := false ;
21568: LD_ADDR_EXP 88
21572: PUSH
21573: LD_INT 0
21575: ST_TO_ADDR
// sCargo := false ;
21576: LD_ADDR_EXP 91
21580: PUSH
21581: LD_INT 0
21583: ST_TO_ADDR
// sDLaser := false ;
21584: LD_ADDR_EXP 92
21588: PUSH
21589: LD_INT 0
21591: ST_TO_ADDR
// sExchange := false ;
21592: LD_ADDR_EXP 93
21596: PUSH
21597: LD_INT 0
21599: ST_TO_ADDR
// sFac := false ;
21600: LD_ADDR_EXP 94
21604: PUSH
21605: LD_INT 0
21607: ST_TO_ADDR
// sPower := false ;
21608: LD_ADDR_EXP 95
21612: PUSH
21613: LD_INT 0
21615: ST_TO_ADDR
// sRandom := false ;
21616: LD_ADDR_EXP 96
21620: PUSH
21621: LD_INT 0
21623: ST_TO_ADDR
// sShield := false ;
21624: LD_ADDR_EXP 97
21628: PUSH
21629: LD_INT 0
21631: ST_TO_ADDR
// sTime := false ;
21632: LD_ADDR_EXP 98
21636: PUSH
21637: LD_INT 0
21639: ST_TO_ADDR
// sTools := false ;
21640: LD_ADDR_EXP 99
21644: PUSH
21645: LD_INT 0
21647: ST_TO_ADDR
// sSold := false ;
21648: LD_ADDR_EXP 64
21652: PUSH
21653: LD_INT 0
21655: ST_TO_ADDR
// sDiff := false ;
21656: LD_ADDR_EXP 65
21660: PUSH
21661: LD_INT 0
21663: ST_TO_ADDR
// sFog := false ;
21664: LD_ADDR_EXP 68
21668: PUSH
21669: LD_INT 0
21671: ST_TO_ADDR
// sReset := false ;
21672: LD_ADDR_EXP 69
21676: PUSH
21677: LD_INT 0
21679: ST_TO_ADDR
// sSun := false ;
21680: LD_ADDR_EXP 70
21684: PUSH
21685: LD_INT 0
21687: ST_TO_ADDR
// sTiger := false ;
21688: LD_ADDR_EXP 66
21692: PUSH
21693: LD_INT 0
21695: ST_TO_ADDR
// sBomb := false ;
21696: LD_ADDR_EXP 67
21700: PUSH
21701: LD_INT 0
21703: ST_TO_ADDR
// sWound := false ;
21704: LD_ADDR_EXP 75
21708: PUSH
21709: LD_INT 0
21711: ST_TO_ADDR
// sBetray := false ;
21712: LD_ADDR_EXP 79
21716: PUSH
21717: LD_INT 0
21719: ST_TO_ADDR
// sContamin := false ;
21720: LD_ADDR_EXP 80
21724: PUSH
21725: LD_INT 0
21727: ST_TO_ADDR
// sOil := false ;
21728: LD_ADDR_EXP 82
21732: PUSH
21733: LD_INT 0
21735: ST_TO_ADDR
// sStu := false ;
21736: LD_ADDR_EXP 86
21740: PUSH
21741: LD_INT 0
21743: ST_TO_ADDR
// sBazooka := false ;
21744: LD_ADDR_EXP 89
21748: PUSH
21749: LD_INT 0
21751: ST_TO_ADDR
// sMortar := false ;
21752: LD_ADDR_EXP 90
21756: PUSH
21757: LD_INT 0
21759: ST_TO_ADDR
// sRanger := false ;
21760: LD_ADDR_EXP 100
21764: PUSH
21765: LD_INT 0
21767: ST_TO_ADDR
// sComputer := false ;
21768: LD_ADDR_EXP 101
21772: PUSH
21773: LD_INT 0
21775: ST_TO_ADDR
// s30 := false ;
21776: LD_ADDR_EXP 102
21780: PUSH
21781: LD_INT 0
21783: ST_TO_ADDR
// s60 := false ;
21784: LD_ADDR_EXP 103
21788: PUSH
21789: LD_INT 0
21791: ST_TO_ADDR
// end ;
21792: LD_VAR 0 1
21796: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21797: LD_INT 0
21799: PPUSH
21800: PPUSH
21801: PPUSH
21802: PPUSH
21803: PPUSH
21804: PPUSH
21805: PPUSH
// result := [ ] ;
21806: LD_ADDR_VAR 0 2
21810: PUSH
21811: EMPTY
21812: ST_TO_ADDR
// if campaign_id = 1 then
21813: LD_OWVAR 69
21817: PUSH
21818: LD_INT 1
21820: EQUAL
21821: IFFALSE 24987
// begin case mission_number of 1 :
21823: LD_OWVAR 70
21827: PUSH
21828: LD_INT 1
21830: DOUBLE
21831: EQUAL
21832: IFTRUE 21836
21834: GO 21912
21836: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21837: LD_ADDR_VAR 0 2
21841: PUSH
21842: LD_INT 2
21844: PUSH
21845: LD_INT 4
21847: PUSH
21848: LD_INT 11
21850: PUSH
21851: LD_INT 12
21853: PUSH
21854: LD_INT 15
21856: PUSH
21857: LD_INT 16
21859: PUSH
21860: LD_INT 22
21862: PUSH
21863: LD_INT 23
21865: PUSH
21866: LD_INT 26
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: PUSH
21880: LD_INT 101
21882: PUSH
21883: LD_INT 102
21885: PUSH
21886: LD_INT 106
21888: PUSH
21889: LD_INT 116
21891: PUSH
21892: LD_INT 117
21894: PUSH
21895: LD_INT 118
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: ST_TO_ADDR
21910: GO 24985
21912: LD_INT 2
21914: DOUBLE
21915: EQUAL
21916: IFTRUE 21920
21918: GO 22004
21920: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21921: LD_ADDR_VAR 0 2
21925: PUSH
21926: LD_INT 2
21928: PUSH
21929: LD_INT 4
21931: PUSH
21932: LD_INT 11
21934: PUSH
21935: LD_INT 12
21937: PUSH
21938: LD_INT 15
21940: PUSH
21941: LD_INT 16
21943: PUSH
21944: LD_INT 22
21946: PUSH
21947: LD_INT 23
21949: PUSH
21950: LD_INT 26
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: PUSH
21964: LD_INT 101
21966: PUSH
21967: LD_INT 102
21969: PUSH
21970: LD_INT 105
21972: PUSH
21973: LD_INT 106
21975: PUSH
21976: LD_INT 108
21978: PUSH
21979: LD_INT 116
21981: PUSH
21982: LD_INT 117
21984: PUSH
21985: LD_INT 118
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: PUSH
21998: EMPTY
21999: LIST
22000: LIST
22001: ST_TO_ADDR
22002: GO 24985
22004: LD_INT 3
22006: DOUBLE
22007: EQUAL
22008: IFTRUE 22012
22010: GO 22100
22012: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22013: LD_ADDR_VAR 0 2
22017: PUSH
22018: LD_INT 2
22020: PUSH
22021: LD_INT 4
22023: PUSH
22024: LD_INT 5
22026: PUSH
22027: LD_INT 11
22029: PUSH
22030: LD_INT 12
22032: PUSH
22033: LD_INT 15
22035: PUSH
22036: LD_INT 16
22038: PUSH
22039: LD_INT 22
22041: PUSH
22042: LD_INT 26
22044: PUSH
22045: LD_INT 36
22047: PUSH
22048: EMPTY
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: PUSH
22060: LD_INT 101
22062: PUSH
22063: LD_INT 102
22065: PUSH
22066: LD_INT 105
22068: PUSH
22069: LD_INT 106
22071: PUSH
22072: LD_INT 108
22074: PUSH
22075: LD_INT 116
22077: PUSH
22078: LD_INT 117
22080: PUSH
22081: LD_INT 118
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: ST_TO_ADDR
22098: GO 24985
22100: LD_INT 4
22102: DOUBLE
22103: EQUAL
22104: IFTRUE 22108
22106: GO 22204
22108: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22109: LD_ADDR_VAR 0 2
22113: PUSH
22114: LD_INT 2
22116: PUSH
22117: LD_INT 4
22119: PUSH
22120: LD_INT 5
22122: PUSH
22123: LD_INT 8
22125: PUSH
22126: LD_INT 11
22128: PUSH
22129: LD_INT 12
22131: PUSH
22132: LD_INT 15
22134: PUSH
22135: LD_INT 16
22137: PUSH
22138: LD_INT 22
22140: PUSH
22141: LD_INT 23
22143: PUSH
22144: LD_INT 26
22146: PUSH
22147: LD_INT 36
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: PUSH
22164: LD_INT 101
22166: PUSH
22167: LD_INT 102
22169: PUSH
22170: LD_INT 105
22172: PUSH
22173: LD_INT 106
22175: PUSH
22176: LD_INT 108
22178: PUSH
22179: LD_INT 116
22181: PUSH
22182: LD_INT 117
22184: PUSH
22185: LD_INT 118
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: ST_TO_ADDR
22202: GO 24985
22204: LD_INT 5
22206: DOUBLE
22207: EQUAL
22208: IFTRUE 22212
22210: GO 22324
22212: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22213: LD_ADDR_VAR 0 2
22217: PUSH
22218: LD_INT 2
22220: PUSH
22221: LD_INT 4
22223: PUSH
22224: LD_INT 5
22226: PUSH
22227: LD_INT 6
22229: PUSH
22230: LD_INT 8
22232: PUSH
22233: LD_INT 11
22235: PUSH
22236: LD_INT 12
22238: PUSH
22239: LD_INT 15
22241: PUSH
22242: LD_INT 16
22244: PUSH
22245: LD_INT 22
22247: PUSH
22248: LD_INT 23
22250: PUSH
22251: LD_INT 25
22253: PUSH
22254: LD_INT 26
22256: PUSH
22257: LD_INT 36
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: PUSH
22276: LD_INT 101
22278: PUSH
22279: LD_INT 102
22281: PUSH
22282: LD_INT 105
22284: PUSH
22285: LD_INT 106
22287: PUSH
22288: LD_INT 108
22290: PUSH
22291: LD_INT 109
22293: PUSH
22294: LD_INT 112
22296: PUSH
22297: LD_INT 116
22299: PUSH
22300: LD_INT 117
22302: PUSH
22303: LD_INT 118
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: ST_TO_ADDR
22322: GO 24985
22324: LD_INT 6
22326: DOUBLE
22327: EQUAL
22328: IFTRUE 22332
22330: GO 22464
22332: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22333: LD_ADDR_VAR 0 2
22337: PUSH
22338: LD_INT 2
22340: PUSH
22341: LD_INT 4
22343: PUSH
22344: LD_INT 5
22346: PUSH
22347: LD_INT 6
22349: PUSH
22350: LD_INT 8
22352: PUSH
22353: LD_INT 11
22355: PUSH
22356: LD_INT 12
22358: PUSH
22359: LD_INT 15
22361: PUSH
22362: LD_INT 16
22364: PUSH
22365: LD_INT 20
22367: PUSH
22368: LD_INT 21
22370: PUSH
22371: LD_INT 22
22373: PUSH
22374: LD_INT 23
22376: PUSH
22377: LD_INT 25
22379: PUSH
22380: LD_INT 26
22382: PUSH
22383: LD_INT 30
22385: PUSH
22386: LD_INT 31
22388: PUSH
22389: LD_INT 32
22391: PUSH
22392: LD_INT 36
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: PUSH
22416: LD_INT 101
22418: PUSH
22419: LD_INT 102
22421: PUSH
22422: LD_INT 105
22424: PUSH
22425: LD_INT 106
22427: PUSH
22428: LD_INT 108
22430: PUSH
22431: LD_INT 109
22433: PUSH
22434: LD_INT 112
22436: PUSH
22437: LD_INT 116
22439: PUSH
22440: LD_INT 117
22442: PUSH
22443: LD_INT 118
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: ST_TO_ADDR
22462: GO 24985
22464: LD_INT 7
22466: DOUBLE
22467: EQUAL
22468: IFTRUE 22472
22470: GO 22584
22472: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22473: LD_ADDR_VAR 0 2
22477: PUSH
22478: LD_INT 2
22480: PUSH
22481: LD_INT 4
22483: PUSH
22484: LD_INT 5
22486: PUSH
22487: LD_INT 7
22489: PUSH
22490: LD_INT 11
22492: PUSH
22493: LD_INT 12
22495: PUSH
22496: LD_INT 15
22498: PUSH
22499: LD_INT 16
22501: PUSH
22502: LD_INT 20
22504: PUSH
22505: LD_INT 21
22507: PUSH
22508: LD_INT 22
22510: PUSH
22511: LD_INT 23
22513: PUSH
22514: LD_INT 25
22516: PUSH
22517: LD_INT 26
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: PUSH
22536: LD_INT 101
22538: PUSH
22539: LD_INT 102
22541: PUSH
22542: LD_INT 103
22544: PUSH
22545: LD_INT 105
22547: PUSH
22548: LD_INT 106
22550: PUSH
22551: LD_INT 108
22553: PUSH
22554: LD_INT 112
22556: PUSH
22557: LD_INT 116
22559: PUSH
22560: LD_INT 117
22562: PUSH
22563: LD_INT 118
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: ST_TO_ADDR
22582: GO 24985
22584: LD_INT 8
22586: DOUBLE
22587: EQUAL
22588: IFTRUE 22592
22590: GO 22732
22592: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22593: LD_ADDR_VAR 0 2
22597: PUSH
22598: LD_INT 2
22600: PUSH
22601: LD_INT 4
22603: PUSH
22604: LD_INT 5
22606: PUSH
22607: LD_INT 6
22609: PUSH
22610: LD_INT 7
22612: PUSH
22613: LD_INT 8
22615: PUSH
22616: LD_INT 11
22618: PUSH
22619: LD_INT 12
22621: PUSH
22622: LD_INT 15
22624: PUSH
22625: LD_INT 16
22627: PUSH
22628: LD_INT 20
22630: PUSH
22631: LD_INT 21
22633: PUSH
22634: LD_INT 22
22636: PUSH
22637: LD_INT 23
22639: PUSH
22640: LD_INT 25
22642: PUSH
22643: LD_INT 26
22645: PUSH
22646: LD_INT 30
22648: PUSH
22649: LD_INT 31
22651: PUSH
22652: LD_INT 32
22654: PUSH
22655: LD_INT 36
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: PUSH
22680: LD_INT 101
22682: PUSH
22683: LD_INT 102
22685: PUSH
22686: LD_INT 103
22688: PUSH
22689: LD_INT 105
22691: PUSH
22692: LD_INT 106
22694: PUSH
22695: LD_INT 108
22697: PUSH
22698: LD_INT 109
22700: PUSH
22701: LD_INT 112
22703: PUSH
22704: LD_INT 116
22706: PUSH
22707: LD_INT 117
22709: PUSH
22710: LD_INT 118
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: ST_TO_ADDR
22730: GO 24985
22732: LD_INT 9
22734: DOUBLE
22735: EQUAL
22736: IFTRUE 22740
22738: GO 22888
22740: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22741: LD_ADDR_VAR 0 2
22745: PUSH
22746: LD_INT 2
22748: PUSH
22749: LD_INT 4
22751: PUSH
22752: LD_INT 5
22754: PUSH
22755: LD_INT 6
22757: PUSH
22758: LD_INT 7
22760: PUSH
22761: LD_INT 8
22763: PUSH
22764: LD_INT 11
22766: PUSH
22767: LD_INT 12
22769: PUSH
22770: LD_INT 15
22772: PUSH
22773: LD_INT 16
22775: PUSH
22776: LD_INT 20
22778: PUSH
22779: LD_INT 21
22781: PUSH
22782: LD_INT 22
22784: PUSH
22785: LD_INT 23
22787: PUSH
22788: LD_INT 25
22790: PUSH
22791: LD_INT 26
22793: PUSH
22794: LD_INT 28
22796: PUSH
22797: LD_INT 30
22799: PUSH
22800: LD_INT 31
22802: PUSH
22803: LD_INT 32
22805: PUSH
22806: LD_INT 36
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: PUSH
22832: LD_INT 101
22834: PUSH
22835: LD_INT 102
22837: PUSH
22838: LD_INT 103
22840: PUSH
22841: LD_INT 105
22843: PUSH
22844: LD_INT 106
22846: PUSH
22847: LD_INT 108
22849: PUSH
22850: LD_INT 109
22852: PUSH
22853: LD_INT 112
22855: PUSH
22856: LD_INT 114
22858: PUSH
22859: LD_INT 116
22861: PUSH
22862: LD_INT 117
22864: PUSH
22865: LD_INT 118
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: PUSH
22882: EMPTY
22883: LIST
22884: LIST
22885: ST_TO_ADDR
22886: GO 24985
22888: LD_INT 10
22890: DOUBLE
22891: EQUAL
22892: IFTRUE 22896
22894: GO 23092
22896: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22897: LD_ADDR_VAR 0 2
22901: PUSH
22902: LD_INT 2
22904: PUSH
22905: LD_INT 4
22907: PUSH
22908: LD_INT 5
22910: PUSH
22911: LD_INT 6
22913: PUSH
22914: LD_INT 7
22916: PUSH
22917: LD_INT 8
22919: PUSH
22920: LD_INT 9
22922: PUSH
22923: LD_INT 10
22925: PUSH
22926: LD_INT 11
22928: PUSH
22929: LD_INT 12
22931: PUSH
22932: LD_INT 13
22934: PUSH
22935: LD_INT 14
22937: PUSH
22938: LD_INT 15
22940: PUSH
22941: LD_INT 16
22943: PUSH
22944: LD_INT 17
22946: PUSH
22947: LD_INT 18
22949: PUSH
22950: LD_INT 19
22952: PUSH
22953: LD_INT 20
22955: PUSH
22956: LD_INT 21
22958: PUSH
22959: LD_INT 22
22961: PUSH
22962: LD_INT 23
22964: PUSH
22965: LD_INT 24
22967: PUSH
22968: LD_INT 25
22970: PUSH
22971: LD_INT 26
22973: PUSH
22974: LD_INT 28
22976: PUSH
22977: LD_INT 30
22979: PUSH
22980: LD_INT 31
22982: PUSH
22983: LD_INT 32
22985: PUSH
22986: LD_INT 36
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: PUSH
23020: LD_INT 101
23022: PUSH
23023: LD_INT 102
23025: PUSH
23026: LD_INT 103
23028: PUSH
23029: LD_INT 104
23031: PUSH
23032: LD_INT 105
23034: PUSH
23035: LD_INT 106
23037: PUSH
23038: LD_INT 107
23040: PUSH
23041: LD_INT 108
23043: PUSH
23044: LD_INT 109
23046: PUSH
23047: LD_INT 110
23049: PUSH
23050: LD_INT 111
23052: PUSH
23053: LD_INT 112
23055: PUSH
23056: LD_INT 114
23058: PUSH
23059: LD_INT 116
23061: PUSH
23062: LD_INT 117
23064: PUSH
23065: LD_INT 118
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: ST_TO_ADDR
23090: GO 24985
23092: LD_INT 11
23094: DOUBLE
23095: EQUAL
23096: IFTRUE 23100
23098: GO 23304
23100: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23101: LD_ADDR_VAR 0 2
23105: PUSH
23106: LD_INT 2
23108: PUSH
23109: LD_INT 3
23111: PUSH
23112: LD_INT 4
23114: PUSH
23115: LD_INT 5
23117: PUSH
23118: LD_INT 6
23120: PUSH
23121: LD_INT 7
23123: PUSH
23124: LD_INT 8
23126: PUSH
23127: LD_INT 9
23129: PUSH
23130: LD_INT 10
23132: PUSH
23133: LD_INT 11
23135: PUSH
23136: LD_INT 12
23138: PUSH
23139: LD_INT 13
23141: PUSH
23142: LD_INT 14
23144: PUSH
23145: LD_INT 15
23147: PUSH
23148: LD_INT 16
23150: PUSH
23151: LD_INT 17
23153: PUSH
23154: LD_INT 18
23156: PUSH
23157: LD_INT 19
23159: PUSH
23160: LD_INT 20
23162: PUSH
23163: LD_INT 21
23165: PUSH
23166: LD_INT 22
23168: PUSH
23169: LD_INT 23
23171: PUSH
23172: LD_INT 24
23174: PUSH
23175: LD_INT 25
23177: PUSH
23178: LD_INT 26
23180: PUSH
23181: LD_INT 28
23183: PUSH
23184: LD_INT 30
23186: PUSH
23187: LD_INT 31
23189: PUSH
23190: LD_INT 32
23192: PUSH
23193: LD_INT 34
23195: PUSH
23196: LD_INT 36
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: PUSH
23232: LD_INT 101
23234: PUSH
23235: LD_INT 102
23237: PUSH
23238: LD_INT 103
23240: PUSH
23241: LD_INT 104
23243: PUSH
23244: LD_INT 105
23246: PUSH
23247: LD_INT 106
23249: PUSH
23250: LD_INT 107
23252: PUSH
23253: LD_INT 108
23255: PUSH
23256: LD_INT 109
23258: PUSH
23259: LD_INT 110
23261: PUSH
23262: LD_INT 111
23264: PUSH
23265: LD_INT 112
23267: PUSH
23268: LD_INT 114
23270: PUSH
23271: LD_INT 116
23273: PUSH
23274: LD_INT 117
23276: PUSH
23277: LD_INT 118
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: ST_TO_ADDR
23302: GO 24985
23304: LD_INT 12
23306: DOUBLE
23307: EQUAL
23308: IFTRUE 23312
23310: GO 23532
23312: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23313: LD_ADDR_VAR 0 2
23317: PUSH
23318: LD_INT 1
23320: PUSH
23321: LD_INT 2
23323: PUSH
23324: LD_INT 3
23326: PUSH
23327: LD_INT 4
23329: PUSH
23330: LD_INT 5
23332: PUSH
23333: LD_INT 6
23335: PUSH
23336: LD_INT 7
23338: PUSH
23339: LD_INT 8
23341: PUSH
23342: LD_INT 9
23344: PUSH
23345: LD_INT 10
23347: PUSH
23348: LD_INT 11
23350: PUSH
23351: LD_INT 12
23353: PUSH
23354: LD_INT 13
23356: PUSH
23357: LD_INT 14
23359: PUSH
23360: LD_INT 15
23362: PUSH
23363: LD_INT 16
23365: PUSH
23366: LD_INT 17
23368: PUSH
23369: LD_INT 18
23371: PUSH
23372: LD_INT 19
23374: PUSH
23375: LD_INT 20
23377: PUSH
23378: LD_INT 21
23380: PUSH
23381: LD_INT 22
23383: PUSH
23384: LD_INT 23
23386: PUSH
23387: LD_INT 24
23389: PUSH
23390: LD_INT 25
23392: PUSH
23393: LD_INT 26
23395: PUSH
23396: LD_INT 27
23398: PUSH
23399: LD_INT 28
23401: PUSH
23402: LD_INT 30
23404: PUSH
23405: LD_INT 31
23407: PUSH
23408: LD_INT 32
23410: PUSH
23411: LD_INT 33
23413: PUSH
23414: LD_INT 34
23416: PUSH
23417: LD_INT 36
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: PUSH
23456: LD_INT 101
23458: PUSH
23459: LD_INT 102
23461: PUSH
23462: LD_INT 103
23464: PUSH
23465: LD_INT 104
23467: PUSH
23468: LD_INT 105
23470: PUSH
23471: LD_INT 106
23473: PUSH
23474: LD_INT 107
23476: PUSH
23477: LD_INT 108
23479: PUSH
23480: LD_INT 109
23482: PUSH
23483: LD_INT 110
23485: PUSH
23486: LD_INT 111
23488: PUSH
23489: LD_INT 112
23491: PUSH
23492: LD_INT 113
23494: PUSH
23495: LD_INT 114
23497: PUSH
23498: LD_INT 116
23500: PUSH
23501: LD_INT 117
23503: PUSH
23504: LD_INT 118
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: ST_TO_ADDR
23530: GO 24985
23532: LD_INT 13
23534: DOUBLE
23535: EQUAL
23536: IFTRUE 23540
23538: GO 23748
23540: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23541: LD_ADDR_VAR 0 2
23545: PUSH
23546: LD_INT 1
23548: PUSH
23549: LD_INT 2
23551: PUSH
23552: LD_INT 3
23554: PUSH
23555: LD_INT 4
23557: PUSH
23558: LD_INT 5
23560: PUSH
23561: LD_INT 8
23563: PUSH
23564: LD_INT 9
23566: PUSH
23567: LD_INT 10
23569: PUSH
23570: LD_INT 11
23572: PUSH
23573: LD_INT 12
23575: PUSH
23576: LD_INT 14
23578: PUSH
23579: LD_INT 15
23581: PUSH
23582: LD_INT 16
23584: PUSH
23585: LD_INT 17
23587: PUSH
23588: LD_INT 18
23590: PUSH
23591: LD_INT 19
23593: PUSH
23594: LD_INT 20
23596: PUSH
23597: LD_INT 21
23599: PUSH
23600: LD_INT 22
23602: PUSH
23603: LD_INT 23
23605: PUSH
23606: LD_INT 24
23608: PUSH
23609: LD_INT 25
23611: PUSH
23612: LD_INT 26
23614: PUSH
23615: LD_INT 27
23617: PUSH
23618: LD_INT 28
23620: PUSH
23621: LD_INT 30
23623: PUSH
23624: LD_INT 31
23626: PUSH
23627: LD_INT 32
23629: PUSH
23630: LD_INT 33
23632: PUSH
23633: LD_INT 34
23635: PUSH
23636: LD_INT 36
23638: PUSH
23639: EMPTY
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: PUSH
23672: LD_INT 101
23674: PUSH
23675: LD_INT 102
23677: PUSH
23678: LD_INT 103
23680: PUSH
23681: LD_INT 104
23683: PUSH
23684: LD_INT 105
23686: PUSH
23687: LD_INT 106
23689: PUSH
23690: LD_INT 107
23692: PUSH
23693: LD_INT 108
23695: PUSH
23696: LD_INT 109
23698: PUSH
23699: LD_INT 110
23701: PUSH
23702: LD_INT 111
23704: PUSH
23705: LD_INT 112
23707: PUSH
23708: LD_INT 113
23710: PUSH
23711: LD_INT 114
23713: PUSH
23714: LD_INT 116
23716: PUSH
23717: LD_INT 117
23719: PUSH
23720: LD_INT 118
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: ST_TO_ADDR
23746: GO 24985
23748: LD_INT 14
23750: DOUBLE
23751: EQUAL
23752: IFTRUE 23756
23754: GO 23980
23756: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23757: LD_ADDR_VAR 0 2
23761: PUSH
23762: LD_INT 1
23764: PUSH
23765: LD_INT 2
23767: PUSH
23768: LD_INT 3
23770: PUSH
23771: LD_INT 4
23773: PUSH
23774: LD_INT 5
23776: PUSH
23777: LD_INT 6
23779: PUSH
23780: LD_INT 7
23782: PUSH
23783: LD_INT 8
23785: PUSH
23786: LD_INT 9
23788: PUSH
23789: LD_INT 10
23791: PUSH
23792: LD_INT 11
23794: PUSH
23795: LD_INT 12
23797: PUSH
23798: LD_INT 13
23800: PUSH
23801: LD_INT 14
23803: PUSH
23804: LD_INT 15
23806: PUSH
23807: LD_INT 16
23809: PUSH
23810: LD_INT 17
23812: PUSH
23813: LD_INT 18
23815: PUSH
23816: LD_INT 19
23818: PUSH
23819: LD_INT 20
23821: PUSH
23822: LD_INT 21
23824: PUSH
23825: LD_INT 22
23827: PUSH
23828: LD_INT 23
23830: PUSH
23831: LD_INT 24
23833: PUSH
23834: LD_INT 25
23836: PUSH
23837: LD_INT 26
23839: PUSH
23840: LD_INT 27
23842: PUSH
23843: LD_INT 28
23845: PUSH
23846: LD_INT 29
23848: PUSH
23849: LD_INT 30
23851: PUSH
23852: LD_INT 31
23854: PUSH
23855: LD_INT 32
23857: PUSH
23858: LD_INT 33
23860: PUSH
23861: LD_INT 34
23863: PUSH
23864: LD_INT 36
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: PUSH
23904: LD_INT 101
23906: PUSH
23907: LD_INT 102
23909: PUSH
23910: LD_INT 103
23912: PUSH
23913: LD_INT 104
23915: PUSH
23916: LD_INT 105
23918: PUSH
23919: LD_INT 106
23921: PUSH
23922: LD_INT 107
23924: PUSH
23925: LD_INT 108
23927: PUSH
23928: LD_INT 109
23930: PUSH
23931: LD_INT 110
23933: PUSH
23934: LD_INT 111
23936: PUSH
23937: LD_INT 112
23939: PUSH
23940: LD_INT 113
23942: PUSH
23943: LD_INT 114
23945: PUSH
23946: LD_INT 116
23948: PUSH
23949: LD_INT 117
23951: PUSH
23952: LD_INT 118
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: ST_TO_ADDR
23978: GO 24985
23980: LD_INT 15
23982: DOUBLE
23983: EQUAL
23984: IFTRUE 23988
23986: GO 24212
23988: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23989: LD_ADDR_VAR 0 2
23993: PUSH
23994: LD_INT 1
23996: PUSH
23997: LD_INT 2
23999: PUSH
24000: LD_INT 3
24002: PUSH
24003: LD_INT 4
24005: PUSH
24006: LD_INT 5
24008: PUSH
24009: LD_INT 6
24011: PUSH
24012: LD_INT 7
24014: PUSH
24015: LD_INT 8
24017: PUSH
24018: LD_INT 9
24020: PUSH
24021: LD_INT 10
24023: PUSH
24024: LD_INT 11
24026: PUSH
24027: LD_INT 12
24029: PUSH
24030: LD_INT 13
24032: PUSH
24033: LD_INT 14
24035: PUSH
24036: LD_INT 15
24038: PUSH
24039: LD_INT 16
24041: PUSH
24042: LD_INT 17
24044: PUSH
24045: LD_INT 18
24047: PUSH
24048: LD_INT 19
24050: PUSH
24051: LD_INT 20
24053: PUSH
24054: LD_INT 21
24056: PUSH
24057: LD_INT 22
24059: PUSH
24060: LD_INT 23
24062: PUSH
24063: LD_INT 24
24065: PUSH
24066: LD_INT 25
24068: PUSH
24069: LD_INT 26
24071: PUSH
24072: LD_INT 27
24074: PUSH
24075: LD_INT 28
24077: PUSH
24078: LD_INT 29
24080: PUSH
24081: LD_INT 30
24083: PUSH
24084: LD_INT 31
24086: PUSH
24087: LD_INT 32
24089: PUSH
24090: LD_INT 33
24092: PUSH
24093: LD_INT 34
24095: PUSH
24096: LD_INT 36
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: PUSH
24136: LD_INT 101
24138: PUSH
24139: LD_INT 102
24141: PUSH
24142: LD_INT 103
24144: PUSH
24145: LD_INT 104
24147: PUSH
24148: LD_INT 105
24150: PUSH
24151: LD_INT 106
24153: PUSH
24154: LD_INT 107
24156: PUSH
24157: LD_INT 108
24159: PUSH
24160: LD_INT 109
24162: PUSH
24163: LD_INT 110
24165: PUSH
24166: LD_INT 111
24168: PUSH
24169: LD_INT 112
24171: PUSH
24172: LD_INT 113
24174: PUSH
24175: LD_INT 114
24177: PUSH
24178: LD_INT 116
24180: PUSH
24181: LD_INT 117
24183: PUSH
24184: LD_INT 118
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: ST_TO_ADDR
24210: GO 24985
24212: LD_INT 16
24214: DOUBLE
24215: EQUAL
24216: IFTRUE 24220
24218: GO 24356
24220: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24221: LD_ADDR_VAR 0 2
24225: PUSH
24226: LD_INT 2
24228: PUSH
24229: LD_INT 4
24231: PUSH
24232: LD_INT 5
24234: PUSH
24235: LD_INT 7
24237: PUSH
24238: LD_INT 11
24240: PUSH
24241: LD_INT 12
24243: PUSH
24244: LD_INT 15
24246: PUSH
24247: LD_INT 16
24249: PUSH
24250: LD_INT 20
24252: PUSH
24253: LD_INT 21
24255: PUSH
24256: LD_INT 22
24258: PUSH
24259: LD_INT 23
24261: PUSH
24262: LD_INT 25
24264: PUSH
24265: LD_INT 26
24267: PUSH
24268: LD_INT 30
24270: PUSH
24271: LD_INT 31
24273: PUSH
24274: LD_INT 32
24276: PUSH
24277: LD_INT 33
24279: PUSH
24280: LD_INT 34
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: PUSH
24304: LD_INT 101
24306: PUSH
24307: LD_INT 102
24309: PUSH
24310: LD_INT 103
24312: PUSH
24313: LD_INT 106
24315: PUSH
24316: LD_INT 108
24318: PUSH
24319: LD_INT 112
24321: PUSH
24322: LD_INT 113
24324: PUSH
24325: LD_INT 114
24327: PUSH
24328: LD_INT 116
24330: PUSH
24331: LD_INT 117
24333: PUSH
24334: LD_INT 118
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: ST_TO_ADDR
24354: GO 24985
24356: LD_INT 17
24358: DOUBLE
24359: EQUAL
24360: IFTRUE 24364
24362: GO 24588
24364: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24365: LD_ADDR_VAR 0 2
24369: PUSH
24370: LD_INT 1
24372: PUSH
24373: LD_INT 2
24375: PUSH
24376: LD_INT 3
24378: PUSH
24379: LD_INT 4
24381: PUSH
24382: LD_INT 5
24384: PUSH
24385: LD_INT 6
24387: PUSH
24388: LD_INT 7
24390: PUSH
24391: LD_INT 8
24393: PUSH
24394: LD_INT 9
24396: PUSH
24397: LD_INT 10
24399: PUSH
24400: LD_INT 11
24402: PUSH
24403: LD_INT 12
24405: PUSH
24406: LD_INT 13
24408: PUSH
24409: LD_INT 14
24411: PUSH
24412: LD_INT 15
24414: PUSH
24415: LD_INT 16
24417: PUSH
24418: LD_INT 17
24420: PUSH
24421: LD_INT 18
24423: PUSH
24424: LD_INT 19
24426: PUSH
24427: LD_INT 20
24429: PUSH
24430: LD_INT 21
24432: PUSH
24433: LD_INT 22
24435: PUSH
24436: LD_INT 23
24438: PUSH
24439: LD_INT 24
24441: PUSH
24442: LD_INT 25
24444: PUSH
24445: LD_INT 26
24447: PUSH
24448: LD_INT 27
24450: PUSH
24451: LD_INT 28
24453: PUSH
24454: LD_INT 29
24456: PUSH
24457: LD_INT 30
24459: PUSH
24460: LD_INT 31
24462: PUSH
24463: LD_INT 32
24465: PUSH
24466: LD_INT 33
24468: PUSH
24469: LD_INT 34
24471: PUSH
24472: LD_INT 36
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: PUSH
24512: LD_INT 101
24514: PUSH
24515: LD_INT 102
24517: PUSH
24518: LD_INT 103
24520: PUSH
24521: LD_INT 104
24523: PUSH
24524: LD_INT 105
24526: PUSH
24527: LD_INT 106
24529: PUSH
24530: LD_INT 107
24532: PUSH
24533: LD_INT 108
24535: PUSH
24536: LD_INT 109
24538: PUSH
24539: LD_INT 110
24541: PUSH
24542: LD_INT 111
24544: PUSH
24545: LD_INT 112
24547: PUSH
24548: LD_INT 113
24550: PUSH
24551: LD_INT 114
24553: PUSH
24554: LD_INT 116
24556: PUSH
24557: LD_INT 117
24559: PUSH
24560: LD_INT 118
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: ST_TO_ADDR
24586: GO 24985
24588: LD_INT 18
24590: DOUBLE
24591: EQUAL
24592: IFTRUE 24596
24594: GO 24744
24596: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24597: LD_ADDR_VAR 0 2
24601: PUSH
24602: LD_INT 2
24604: PUSH
24605: LD_INT 4
24607: PUSH
24608: LD_INT 5
24610: PUSH
24611: LD_INT 7
24613: PUSH
24614: LD_INT 11
24616: PUSH
24617: LD_INT 12
24619: PUSH
24620: LD_INT 15
24622: PUSH
24623: LD_INT 16
24625: PUSH
24626: LD_INT 20
24628: PUSH
24629: LD_INT 21
24631: PUSH
24632: LD_INT 22
24634: PUSH
24635: LD_INT 23
24637: PUSH
24638: LD_INT 25
24640: PUSH
24641: LD_INT 26
24643: PUSH
24644: LD_INT 30
24646: PUSH
24647: LD_INT 31
24649: PUSH
24650: LD_INT 32
24652: PUSH
24653: LD_INT 33
24655: PUSH
24656: LD_INT 34
24658: PUSH
24659: LD_INT 35
24661: PUSH
24662: LD_INT 36
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: PUSH
24688: LD_INT 101
24690: PUSH
24691: LD_INT 102
24693: PUSH
24694: LD_INT 103
24696: PUSH
24697: LD_INT 106
24699: PUSH
24700: LD_INT 108
24702: PUSH
24703: LD_INT 112
24705: PUSH
24706: LD_INT 113
24708: PUSH
24709: LD_INT 114
24711: PUSH
24712: LD_INT 115
24714: PUSH
24715: LD_INT 116
24717: PUSH
24718: LD_INT 117
24720: PUSH
24721: LD_INT 118
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: ST_TO_ADDR
24742: GO 24985
24744: LD_INT 19
24746: DOUBLE
24747: EQUAL
24748: IFTRUE 24752
24750: GO 24984
24752: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24753: LD_ADDR_VAR 0 2
24757: PUSH
24758: LD_INT 1
24760: PUSH
24761: LD_INT 2
24763: PUSH
24764: LD_INT 3
24766: PUSH
24767: LD_INT 4
24769: PUSH
24770: LD_INT 5
24772: PUSH
24773: LD_INT 6
24775: PUSH
24776: LD_INT 7
24778: PUSH
24779: LD_INT 8
24781: PUSH
24782: LD_INT 9
24784: PUSH
24785: LD_INT 10
24787: PUSH
24788: LD_INT 11
24790: PUSH
24791: LD_INT 12
24793: PUSH
24794: LD_INT 13
24796: PUSH
24797: LD_INT 14
24799: PUSH
24800: LD_INT 15
24802: PUSH
24803: LD_INT 16
24805: PUSH
24806: LD_INT 17
24808: PUSH
24809: LD_INT 18
24811: PUSH
24812: LD_INT 19
24814: PUSH
24815: LD_INT 20
24817: PUSH
24818: LD_INT 21
24820: PUSH
24821: LD_INT 22
24823: PUSH
24824: LD_INT 23
24826: PUSH
24827: LD_INT 24
24829: PUSH
24830: LD_INT 25
24832: PUSH
24833: LD_INT 26
24835: PUSH
24836: LD_INT 27
24838: PUSH
24839: LD_INT 28
24841: PUSH
24842: LD_INT 29
24844: PUSH
24845: LD_INT 30
24847: PUSH
24848: LD_INT 31
24850: PUSH
24851: LD_INT 32
24853: PUSH
24854: LD_INT 33
24856: PUSH
24857: LD_INT 34
24859: PUSH
24860: LD_INT 35
24862: PUSH
24863: LD_INT 36
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: PUSH
24904: LD_INT 101
24906: PUSH
24907: LD_INT 102
24909: PUSH
24910: LD_INT 103
24912: PUSH
24913: LD_INT 104
24915: PUSH
24916: LD_INT 105
24918: PUSH
24919: LD_INT 106
24921: PUSH
24922: LD_INT 107
24924: PUSH
24925: LD_INT 108
24927: PUSH
24928: LD_INT 109
24930: PUSH
24931: LD_INT 110
24933: PUSH
24934: LD_INT 111
24936: PUSH
24937: LD_INT 112
24939: PUSH
24940: LD_INT 113
24942: PUSH
24943: LD_INT 114
24945: PUSH
24946: LD_INT 115
24948: PUSH
24949: LD_INT 116
24951: PUSH
24952: LD_INT 117
24954: PUSH
24955: LD_INT 118
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: ST_TO_ADDR
24982: GO 24985
24984: POP
// end else
24985: GO 25216
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24987: LD_ADDR_VAR 0 2
24991: PUSH
24992: LD_INT 1
24994: PUSH
24995: LD_INT 2
24997: PUSH
24998: LD_INT 3
25000: PUSH
25001: LD_INT 4
25003: PUSH
25004: LD_INT 5
25006: PUSH
25007: LD_INT 6
25009: PUSH
25010: LD_INT 7
25012: PUSH
25013: LD_INT 8
25015: PUSH
25016: LD_INT 9
25018: PUSH
25019: LD_INT 10
25021: PUSH
25022: LD_INT 11
25024: PUSH
25025: LD_INT 12
25027: PUSH
25028: LD_INT 13
25030: PUSH
25031: LD_INT 14
25033: PUSH
25034: LD_INT 15
25036: PUSH
25037: LD_INT 16
25039: PUSH
25040: LD_INT 17
25042: PUSH
25043: LD_INT 18
25045: PUSH
25046: LD_INT 19
25048: PUSH
25049: LD_INT 20
25051: PUSH
25052: LD_INT 21
25054: PUSH
25055: LD_INT 22
25057: PUSH
25058: LD_INT 23
25060: PUSH
25061: LD_INT 24
25063: PUSH
25064: LD_INT 25
25066: PUSH
25067: LD_INT 26
25069: PUSH
25070: LD_INT 27
25072: PUSH
25073: LD_INT 28
25075: PUSH
25076: LD_INT 29
25078: PUSH
25079: LD_INT 30
25081: PUSH
25082: LD_INT 31
25084: PUSH
25085: LD_INT 32
25087: PUSH
25088: LD_INT 33
25090: PUSH
25091: LD_INT 34
25093: PUSH
25094: LD_INT 35
25096: PUSH
25097: LD_INT 36
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 101
25140: PUSH
25141: LD_INT 102
25143: PUSH
25144: LD_INT 103
25146: PUSH
25147: LD_INT 104
25149: PUSH
25150: LD_INT 105
25152: PUSH
25153: LD_INT 106
25155: PUSH
25156: LD_INT 107
25158: PUSH
25159: LD_INT 108
25161: PUSH
25162: LD_INT 109
25164: PUSH
25165: LD_INT 110
25167: PUSH
25168: LD_INT 111
25170: PUSH
25171: LD_INT 112
25173: PUSH
25174: LD_INT 113
25176: PUSH
25177: LD_INT 114
25179: PUSH
25180: LD_INT 115
25182: PUSH
25183: LD_INT 116
25185: PUSH
25186: LD_INT 117
25188: PUSH
25189: LD_INT 118
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: ST_TO_ADDR
// if result then
25216: LD_VAR 0 2
25220: IFFALSE 26006
// begin normal :=  ;
25222: LD_ADDR_VAR 0 5
25226: PUSH
25227: LD_STRING 
25229: ST_TO_ADDR
// hardcore :=  ;
25230: LD_ADDR_VAR 0 6
25234: PUSH
25235: LD_STRING 
25237: ST_TO_ADDR
// active :=  ;
25238: LD_ADDR_VAR 0 7
25242: PUSH
25243: LD_STRING 
25245: ST_TO_ADDR
// for i = 1 to normalCounter do
25246: LD_ADDR_VAR 0 8
25250: PUSH
25251: DOUBLE
25252: LD_INT 1
25254: DEC
25255: ST_TO_ADDR
25256: LD_EXP 48
25260: PUSH
25261: FOR_TO
25262: IFFALSE 25363
// begin tmp := 0 ;
25264: LD_ADDR_VAR 0 3
25268: PUSH
25269: LD_STRING 0
25271: ST_TO_ADDR
// if result [ 1 ] then
25272: LD_VAR 0 2
25276: PUSH
25277: LD_INT 1
25279: ARRAY
25280: IFFALSE 25345
// if result [ 1 ] [ 1 ] = i then
25282: LD_VAR 0 2
25286: PUSH
25287: LD_INT 1
25289: ARRAY
25290: PUSH
25291: LD_INT 1
25293: ARRAY
25294: PUSH
25295: LD_VAR 0 8
25299: EQUAL
25300: IFFALSE 25345
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25302: LD_ADDR_VAR 0 2
25306: PUSH
25307: LD_VAR 0 2
25311: PPUSH
25312: LD_INT 1
25314: PPUSH
25315: LD_VAR 0 2
25319: PUSH
25320: LD_INT 1
25322: ARRAY
25323: PPUSH
25324: LD_INT 1
25326: PPUSH
25327: CALL_OW 3
25331: PPUSH
25332: CALL_OW 1
25336: ST_TO_ADDR
// tmp := 1 ;
25337: LD_ADDR_VAR 0 3
25341: PUSH
25342: LD_STRING 1
25344: ST_TO_ADDR
// end ; normal := normal & tmp ;
25345: LD_ADDR_VAR 0 5
25349: PUSH
25350: LD_VAR 0 5
25354: PUSH
25355: LD_VAR 0 3
25359: STR
25360: ST_TO_ADDR
// end ;
25361: GO 25261
25363: POP
25364: POP
// for i = 1 to hardcoreCounter do
25365: LD_ADDR_VAR 0 8
25369: PUSH
25370: DOUBLE
25371: LD_INT 1
25373: DEC
25374: ST_TO_ADDR
25375: LD_EXP 49
25379: PUSH
25380: FOR_TO
25381: IFFALSE 25486
// begin tmp := 0 ;
25383: LD_ADDR_VAR 0 3
25387: PUSH
25388: LD_STRING 0
25390: ST_TO_ADDR
// if result [ 2 ] then
25391: LD_VAR 0 2
25395: PUSH
25396: LD_INT 2
25398: ARRAY
25399: IFFALSE 25468
// if result [ 2 ] [ 1 ] = 100 + i then
25401: LD_VAR 0 2
25405: PUSH
25406: LD_INT 2
25408: ARRAY
25409: PUSH
25410: LD_INT 1
25412: ARRAY
25413: PUSH
25414: LD_INT 100
25416: PUSH
25417: LD_VAR 0 8
25421: PLUS
25422: EQUAL
25423: IFFALSE 25468
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25425: LD_ADDR_VAR 0 2
25429: PUSH
25430: LD_VAR 0 2
25434: PPUSH
25435: LD_INT 2
25437: PPUSH
25438: LD_VAR 0 2
25442: PUSH
25443: LD_INT 2
25445: ARRAY
25446: PPUSH
25447: LD_INT 1
25449: PPUSH
25450: CALL_OW 3
25454: PPUSH
25455: CALL_OW 1
25459: ST_TO_ADDR
// tmp := 1 ;
25460: LD_ADDR_VAR 0 3
25464: PUSH
25465: LD_STRING 1
25467: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25468: LD_ADDR_VAR 0 6
25472: PUSH
25473: LD_VAR 0 6
25477: PUSH
25478: LD_VAR 0 3
25482: STR
25483: ST_TO_ADDR
// end ;
25484: GO 25380
25486: POP
25487: POP
// if isGameLoad then
25488: LD_VAR 0 1
25492: IFFALSE 25967
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25494: LD_ADDR_VAR 0 4
25498: PUSH
25499: LD_EXP 52
25503: PUSH
25504: LD_EXP 51
25508: PUSH
25509: LD_EXP 53
25513: PUSH
25514: LD_EXP 50
25518: PUSH
25519: LD_EXP 54
25523: PUSH
25524: LD_EXP 55
25528: PUSH
25529: LD_EXP 56
25533: PUSH
25534: LD_EXP 57
25538: PUSH
25539: LD_EXP 58
25543: PUSH
25544: LD_EXP 59
25548: PUSH
25549: LD_EXP 60
25553: PUSH
25554: LD_EXP 61
25558: PUSH
25559: LD_EXP 62
25563: PUSH
25564: LD_EXP 63
25568: PUSH
25569: LD_EXP 71
25573: PUSH
25574: LD_EXP 72
25578: PUSH
25579: LD_EXP 73
25583: PUSH
25584: LD_EXP 74
25588: PUSH
25589: LD_EXP 76
25593: PUSH
25594: LD_EXP 77
25598: PUSH
25599: LD_EXP 78
25603: PUSH
25604: LD_EXP 81
25608: PUSH
25609: LD_EXP 83
25613: PUSH
25614: LD_EXP 84
25618: PUSH
25619: LD_EXP 85
25623: PUSH
25624: LD_EXP 87
25628: PUSH
25629: LD_EXP 88
25633: PUSH
25634: LD_EXP 91
25638: PUSH
25639: LD_EXP 92
25643: PUSH
25644: LD_EXP 93
25648: PUSH
25649: LD_EXP 94
25653: PUSH
25654: LD_EXP 95
25658: PUSH
25659: LD_EXP 96
25663: PUSH
25664: LD_EXP 97
25668: PUSH
25669: LD_EXP 98
25673: PUSH
25674: LD_EXP 99
25678: PUSH
25679: LD_EXP 64
25683: PUSH
25684: LD_EXP 65
25688: PUSH
25689: LD_EXP 68
25693: PUSH
25694: LD_EXP 69
25698: PUSH
25699: LD_EXP 70
25703: PUSH
25704: LD_EXP 66
25708: PUSH
25709: LD_EXP 67
25713: PUSH
25714: LD_EXP 75
25718: PUSH
25719: LD_EXP 79
25723: PUSH
25724: LD_EXP 80
25728: PUSH
25729: LD_EXP 82
25733: PUSH
25734: LD_EXP 86
25738: PUSH
25739: LD_EXP 89
25743: PUSH
25744: LD_EXP 90
25748: PUSH
25749: LD_EXP 100
25753: PUSH
25754: LD_EXP 101
25758: PUSH
25759: LD_EXP 102
25763: PUSH
25764: LD_EXP 103
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: ST_TO_ADDR
// tmp :=  ;
25825: LD_ADDR_VAR 0 3
25829: PUSH
25830: LD_STRING 
25832: ST_TO_ADDR
// for i = 1 to normalCounter do
25833: LD_ADDR_VAR 0 8
25837: PUSH
25838: DOUBLE
25839: LD_INT 1
25841: DEC
25842: ST_TO_ADDR
25843: LD_EXP 48
25847: PUSH
25848: FOR_TO
25849: IFFALSE 25885
// begin if flags [ i ] then
25851: LD_VAR 0 4
25855: PUSH
25856: LD_VAR 0 8
25860: ARRAY
25861: IFFALSE 25883
// tmp := tmp & i & ; ;
25863: LD_ADDR_VAR 0 3
25867: PUSH
25868: LD_VAR 0 3
25872: PUSH
25873: LD_VAR 0 8
25877: STR
25878: PUSH
25879: LD_STRING ;
25881: STR
25882: ST_TO_ADDR
// end ;
25883: GO 25848
25885: POP
25886: POP
// for i = 1 to hardcoreCounter do
25887: LD_ADDR_VAR 0 8
25891: PUSH
25892: DOUBLE
25893: LD_INT 1
25895: DEC
25896: ST_TO_ADDR
25897: LD_EXP 49
25901: PUSH
25902: FOR_TO
25903: IFFALSE 25949
// begin if flags [ normalCounter + i ] then
25905: LD_VAR 0 4
25909: PUSH
25910: LD_EXP 48
25914: PUSH
25915: LD_VAR 0 8
25919: PLUS
25920: ARRAY
25921: IFFALSE 25947
// tmp := tmp & ( 100 + i ) & ; ;
25923: LD_ADDR_VAR 0 3
25927: PUSH
25928: LD_VAR 0 3
25932: PUSH
25933: LD_INT 100
25935: PUSH
25936: LD_VAR 0 8
25940: PLUS
25941: STR
25942: PUSH
25943: LD_STRING ;
25945: STR
25946: ST_TO_ADDR
// end ;
25947: GO 25902
25949: POP
25950: POP
// if tmp then
25951: LD_VAR 0 3
25955: IFFALSE 25967
// active := tmp ;
25957: LD_ADDR_VAR 0 7
25961: PUSH
25962: LD_VAR 0 3
25966: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25967: LD_STRING getStreamItemsFromMission("
25969: PUSH
25970: LD_VAR 0 5
25974: STR
25975: PUSH
25976: LD_STRING ","
25978: STR
25979: PUSH
25980: LD_VAR 0 6
25984: STR
25985: PUSH
25986: LD_STRING ","
25988: STR
25989: PUSH
25990: LD_VAR 0 7
25994: STR
25995: PUSH
25996: LD_STRING ")
25998: STR
25999: PPUSH
26000: CALL_OW 559
// end else
26004: GO 26013
// ToLua ( getStreamItemsFromMission("","","") ) ;
26006: LD_STRING getStreamItemsFromMission("","","")
26008: PPUSH
26009: CALL_OW 559
// end ;
26013: LD_VAR 0 2
26017: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26018: LD_EXP 47
26022: IFFALSE 26030
26024: PUSH
26025: LD_EXP 52
26029: AND
26030: IFFALSE 26154
26032: GO 26034
26034: DISABLE
26035: LD_INT 0
26037: PPUSH
26038: PPUSH
// begin enable ;
26039: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26040: LD_ADDR_VAR 0 2
26044: PUSH
26045: LD_INT 22
26047: PUSH
26048: LD_OWVAR 2
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 2
26059: PUSH
26060: LD_INT 34
26062: PUSH
26063: LD_INT 7
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 34
26072: PUSH
26073: LD_INT 45
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: LD_INT 34
26082: PUSH
26083: LD_INT 28
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: PUSH
26090: LD_INT 34
26092: PUSH
26093: LD_INT 47
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PPUSH
26111: CALL_OW 69
26115: ST_TO_ADDR
// if not tmp then
26116: LD_VAR 0 2
26120: NOT
26121: IFFALSE 26125
// exit ;
26123: GO 26154
// for i in tmp do
26125: LD_ADDR_VAR 0 1
26129: PUSH
26130: LD_VAR 0 2
26134: PUSH
26135: FOR_IN
26136: IFFALSE 26152
// begin SetLives ( i , 0 ) ;
26138: LD_VAR 0 1
26142: PPUSH
26143: LD_INT 0
26145: PPUSH
26146: CALL_OW 234
// end ;
26150: GO 26135
26152: POP
26153: POP
// end ;
26154: PPOPN 2
26156: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26157: LD_EXP 47
26161: IFFALSE 26169
26163: PUSH
26164: LD_EXP 53
26168: AND
26169: IFFALSE 26253
26171: GO 26173
26173: DISABLE
26174: LD_INT 0
26176: PPUSH
26177: PPUSH
// begin enable ;
26178: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26179: LD_ADDR_VAR 0 2
26183: PUSH
26184: LD_INT 22
26186: PUSH
26187: LD_OWVAR 2
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PUSH
26196: LD_INT 32
26198: PUSH
26199: LD_INT 3
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PPUSH
26210: CALL_OW 69
26214: ST_TO_ADDR
// if not tmp then
26215: LD_VAR 0 2
26219: NOT
26220: IFFALSE 26224
// exit ;
26222: GO 26253
// for i in tmp do
26224: LD_ADDR_VAR 0 1
26228: PUSH
26229: LD_VAR 0 2
26233: PUSH
26234: FOR_IN
26235: IFFALSE 26251
// begin SetLives ( i , 0 ) ;
26237: LD_VAR 0 1
26241: PPUSH
26242: LD_INT 0
26244: PPUSH
26245: CALL_OW 234
// end ;
26249: GO 26234
26251: POP
26252: POP
// end ;
26253: PPOPN 2
26255: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26256: LD_EXP 47
26260: IFFALSE 26268
26262: PUSH
26263: LD_EXP 50
26267: AND
26268: IFFALSE 26361
26270: GO 26272
26272: DISABLE
26273: LD_INT 0
26275: PPUSH
// begin enable ;
26276: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26277: LD_ADDR_VAR 0 1
26281: PUSH
26282: LD_INT 22
26284: PUSH
26285: LD_OWVAR 2
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PUSH
26294: LD_INT 2
26296: PUSH
26297: LD_INT 25
26299: PUSH
26300: LD_INT 5
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: LD_INT 25
26309: PUSH
26310: LD_INT 9
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 25
26319: PUSH
26320: LD_INT 8
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: EMPTY
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PPUSH
26337: CALL_OW 69
26341: PUSH
26342: FOR_IN
26343: IFFALSE 26359
// begin SetClass ( i , 1 ) ;
26345: LD_VAR 0 1
26349: PPUSH
26350: LD_INT 1
26352: PPUSH
26353: CALL_OW 336
// end ;
26357: GO 26342
26359: POP
26360: POP
// end ;
26361: PPOPN 1
26363: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26364: LD_EXP 47
26368: IFFALSE 26376
26370: PUSH
26371: LD_EXP 51
26375: AND
26376: IFFALSE 26388
26378: PUSH
26379: LD_OWVAR 65
26383: PUSH
26384: LD_INT 7
26386: LESS
26387: AND
26388: IFFALSE 26402
26390: GO 26392
26392: DISABLE
// begin enable ;
26393: ENABLE
// game_speed := 7 ;
26394: LD_ADDR_OWVAR 65
26398: PUSH
26399: LD_INT 7
26401: ST_TO_ADDR
// end ;
26402: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26403: LD_EXP 47
26407: IFFALSE 26415
26409: PUSH
26410: LD_EXP 54
26414: AND
26415: IFFALSE 26617
26417: GO 26419
26419: DISABLE
26420: LD_INT 0
26422: PPUSH
26423: PPUSH
26424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26425: LD_ADDR_VAR 0 3
26429: PUSH
26430: LD_INT 81
26432: PUSH
26433: LD_OWVAR 2
26437: PUSH
26438: EMPTY
26439: LIST
26440: LIST
26441: PUSH
26442: LD_INT 21
26444: PUSH
26445: LD_INT 1
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PPUSH
26456: CALL_OW 69
26460: ST_TO_ADDR
// if not tmp then
26461: LD_VAR 0 3
26465: NOT
26466: IFFALSE 26470
// exit ;
26468: GO 26617
// if tmp > 5 then
26470: LD_VAR 0 3
26474: PUSH
26475: LD_INT 5
26477: GREATER
26478: IFFALSE 26490
// k := 5 else
26480: LD_ADDR_VAR 0 2
26484: PUSH
26485: LD_INT 5
26487: ST_TO_ADDR
26488: GO 26500
// k := tmp ;
26490: LD_ADDR_VAR 0 2
26494: PUSH
26495: LD_VAR 0 3
26499: ST_TO_ADDR
// for i := 1 to k do
26500: LD_ADDR_VAR 0 1
26504: PUSH
26505: DOUBLE
26506: LD_INT 1
26508: DEC
26509: ST_TO_ADDR
26510: LD_VAR 0 2
26514: PUSH
26515: FOR_TO
26516: IFFALSE 26615
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26518: LD_VAR 0 3
26522: PUSH
26523: LD_VAR 0 1
26527: ARRAY
26528: PPUSH
26529: LD_VAR 0 1
26533: PUSH
26534: LD_INT 4
26536: MOD
26537: PUSH
26538: LD_INT 1
26540: PLUS
26541: PPUSH
26542: CALL_OW 259
26546: PUSH
26547: LD_INT 10
26549: LESS
26550: IFFALSE 26613
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26552: LD_VAR 0 3
26556: PUSH
26557: LD_VAR 0 1
26561: ARRAY
26562: PPUSH
26563: LD_VAR 0 1
26567: PUSH
26568: LD_INT 4
26570: MOD
26571: PUSH
26572: LD_INT 1
26574: PLUS
26575: PPUSH
26576: LD_VAR 0 3
26580: PUSH
26581: LD_VAR 0 1
26585: ARRAY
26586: PPUSH
26587: LD_VAR 0 1
26591: PUSH
26592: LD_INT 4
26594: MOD
26595: PUSH
26596: LD_INT 1
26598: PLUS
26599: PPUSH
26600: CALL_OW 259
26604: PUSH
26605: LD_INT 1
26607: PLUS
26608: PPUSH
26609: CALL_OW 237
26613: GO 26515
26615: POP
26616: POP
// end ;
26617: PPOPN 3
26619: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26620: LD_EXP 47
26624: IFFALSE 26632
26626: PUSH
26627: LD_EXP 55
26631: AND
26632: IFFALSE 26652
26634: GO 26636
26636: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26637: LD_INT 4
26639: PPUSH
26640: LD_OWVAR 2
26644: PPUSH
26645: LD_INT 0
26647: PPUSH
26648: CALL_OW 324
26652: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26653: LD_EXP 47
26657: IFFALSE 26665
26659: PUSH
26660: LD_EXP 84
26664: AND
26665: IFFALSE 26685
26667: GO 26669
26669: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26670: LD_INT 19
26672: PPUSH
26673: LD_OWVAR 2
26677: PPUSH
26678: LD_INT 0
26680: PPUSH
26681: CALL_OW 324
26685: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26686: LD_EXP 47
26690: IFFALSE 26698
26692: PUSH
26693: LD_EXP 56
26697: AND
26698: IFFALSE 26800
26700: GO 26702
26702: DISABLE
26703: LD_INT 0
26705: PPUSH
26706: PPUSH
// begin enable ;
26707: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26708: LD_ADDR_VAR 0 2
26712: PUSH
26713: LD_INT 22
26715: PUSH
26716: LD_OWVAR 2
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: PUSH
26725: LD_INT 2
26727: PUSH
26728: LD_INT 34
26730: PUSH
26731: LD_INT 11
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: PUSH
26738: LD_INT 34
26740: PUSH
26741: LD_INT 30
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: LIST
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PPUSH
26757: CALL_OW 69
26761: ST_TO_ADDR
// if not tmp then
26762: LD_VAR 0 2
26766: NOT
26767: IFFALSE 26771
// exit ;
26769: GO 26800
// for i in tmp do
26771: LD_ADDR_VAR 0 1
26775: PUSH
26776: LD_VAR 0 2
26780: PUSH
26781: FOR_IN
26782: IFFALSE 26798
// begin SetLives ( i , 0 ) ;
26784: LD_VAR 0 1
26788: PPUSH
26789: LD_INT 0
26791: PPUSH
26792: CALL_OW 234
// end ;
26796: GO 26781
26798: POP
26799: POP
// end ;
26800: PPOPN 2
26802: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26803: LD_EXP 47
26807: IFFALSE 26815
26809: PUSH
26810: LD_EXP 57
26814: AND
26815: IFFALSE 26835
26817: GO 26819
26819: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26820: LD_INT 32
26822: PPUSH
26823: LD_OWVAR 2
26827: PPUSH
26828: LD_INT 0
26830: PPUSH
26831: CALL_OW 324
26835: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26836: LD_EXP 47
26840: IFFALSE 26848
26842: PUSH
26843: LD_EXP 58
26847: AND
26848: IFFALSE 27031
26850: GO 26852
26852: DISABLE
26853: LD_INT 0
26855: PPUSH
26856: PPUSH
26857: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26858: LD_ADDR_VAR 0 2
26862: PUSH
26863: LD_INT 22
26865: PUSH
26866: LD_OWVAR 2
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: LD_INT 33
26877: PUSH
26878: LD_INT 3
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PPUSH
26889: CALL_OW 69
26893: ST_TO_ADDR
// if not tmp then
26894: LD_VAR 0 2
26898: NOT
26899: IFFALSE 26903
// exit ;
26901: GO 27031
// side := 0 ;
26903: LD_ADDR_VAR 0 3
26907: PUSH
26908: LD_INT 0
26910: ST_TO_ADDR
// for i := 1 to 8 do
26911: LD_ADDR_VAR 0 1
26915: PUSH
26916: DOUBLE
26917: LD_INT 1
26919: DEC
26920: ST_TO_ADDR
26921: LD_INT 8
26923: PUSH
26924: FOR_TO
26925: IFFALSE 26975
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26927: LD_OWVAR 2
26931: PUSH
26932: LD_VAR 0 1
26936: NONEQUAL
26937: IFFALSE 26959
26939: PUSH
26940: LD_OWVAR 2
26944: PPUSH
26945: LD_VAR 0 1
26949: PPUSH
26950: CALL_OW 81
26954: PUSH
26955: LD_INT 2
26957: EQUAL
26958: AND
26959: IFFALSE 26973
// begin side := i ;
26961: LD_ADDR_VAR 0 3
26965: PUSH
26966: LD_VAR 0 1
26970: ST_TO_ADDR
// break ;
26971: GO 26975
// end ;
26973: GO 26924
26975: POP
26976: POP
// if not side then
26977: LD_VAR 0 3
26981: NOT
26982: IFFALSE 26986
// exit ;
26984: GO 27031
// for i := 1 to tmp do
26986: LD_ADDR_VAR 0 1
26990: PUSH
26991: DOUBLE
26992: LD_INT 1
26994: DEC
26995: ST_TO_ADDR
26996: LD_VAR 0 2
27000: PUSH
27001: FOR_TO
27002: IFFALSE 27029
// if Prob ( 60 ) then
27004: LD_INT 60
27006: PPUSH
27007: CALL_OW 13
27011: IFFALSE 27027
// SetSide ( i , side ) ;
27013: LD_VAR 0 1
27017: PPUSH
27018: LD_VAR 0 3
27022: PPUSH
27023: CALL_OW 235
27027: GO 27001
27029: POP
27030: POP
// end ;
27031: PPOPN 3
27033: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27034: LD_EXP 47
27038: IFFALSE 27046
27040: PUSH
27041: LD_EXP 60
27045: AND
27046: IFFALSE 27165
27048: GO 27050
27050: DISABLE
27051: LD_INT 0
27053: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27054: LD_ADDR_VAR 0 1
27058: PUSH
27059: LD_INT 22
27061: PUSH
27062: LD_OWVAR 2
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PUSH
27071: LD_INT 21
27073: PUSH
27074: LD_INT 1
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: PUSH
27081: LD_INT 3
27083: PUSH
27084: LD_INT 23
27086: PUSH
27087: LD_INT 0
27089: PUSH
27090: EMPTY
27091: LIST
27092: LIST
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: LIST
27102: PPUSH
27103: CALL_OW 69
27107: PUSH
27108: FOR_IN
27109: IFFALSE 27163
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27111: LD_VAR 0 1
27115: PPUSH
27116: CALL_OW 257
27120: PUSH
27121: LD_INT 1
27123: PUSH
27124: LD_INT 2
27126: PUSH
27127: LD_INT 3
27129: PUSH
27130: LD_INT 4
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: IN
27139: IFFALSE 27161
// SetClass ( un , rand ( 1 , 4 ) ) ;
27141: LD_VAR 0 1
27145: PPUSH
27146: LD_INT 1
27148: PPUSH
27149: LD_INT 4
27151: PPUSH
27152: CALL_OW 12
27156: PPUSH
27157: CALL_OW 336
27161: GO 27108
27163: POP
27164: POP
// end ;
27165: PPOPN 1
27167: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27168: LD_EXP 47
27172: IFFALSE 27180
27174: PUSH
27175: LD_EXP 59
27179: AND
27180: IFFALSE 27259
27182: GO 27184
27184: DISABLE
27185: LD_INT 0
27187: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27188: LD_ADDR_VAR 0 1
27192: PUSH
27193: LD_INT 22
27195: PUSH
27196: LD_OWVAR 2
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: PUSH
27205: LD_INT 21
27207: PUSH
27208: LD_INT 3
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PPUSH
27219: CALL_OW 69
27223: ST_TO_ADDR
// if not tmp then
27224: LD_VAR 0 1
27228: NOT
27229: IFFALSE 27233
// exit ;
27231: GO 27259
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27233: LD_VAR 0 1
27237: PUSH
27238: LD_INT 1
27240: PPUSH
27241: LD_VAR 0 1
27245: PPUSH
27246: CALL_OW 12
27250: ARRAY
27251: PPUSH
27252: LD_INT 100
27254: PPUSH
27255: CALL_OW 234
// end ;
27259: PPOPN 1
27261: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27262: LD_EXP 47
27266: IFFALSE 27274
27268: PUSH
27269: LD_EXP 61
27273: AND
27274: IFFALSE 27372
27276: GO 27278
27278: DISABLE
27279: LD_INT 0
27281: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27282: LD_ADDR_VAR 0 1
27286: PUSH
27287: LD_INT 22
27289: PUSH
27290: LD_OWVAR 2
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: LD_INT 21
27301: PUSH
27302: LD_INT 1
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: PPUSH
27313: CALL_OW 69
27317: ST_TO_ADDR
// if not tmp then
27318: LD_VAR 0 1
27322: NOT
27323: IFFALSE 27327
// exit ;
27325: GO 27372
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27327: LD_VAR 0 1
27331: PUSH
27332: LD_INT 1
27334: PPUSH
27335: LD_VAR 0 1
27339: PPUSH
27340: CALL_OW 12
27344: ARRAY
27345: PPUSH
27346: LD_INT 1
27348: PPUSH
27349: LD_INT 4
27351: PPUSH
27352: CALL_OW 12
27356: PPUSH
27357: LD_INT 3000
27359: PPUSH
27360: LD_INT 9000
27362: PPUSH
27363: CALL_OW 12
27367: PPUSH
27368: CALL_OW 492
// end ;
27372: PPOPN 1
27374: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27375: LD_EXP 47
27379: IFFALSE 27387
27381: PUSH
27382: LD_EXP 62
27386: AND
27387: IFFALSE 27407
27389: GO 27391
27391: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27392: LD_INT 1
27394: PPUSH
27395: LD_OWVAR 2
27399: PPUSH
27400: LD_INT 0
27402: PPUSH
27403: CALL_OW 324
27407: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27408: LD_EXP 47
27412: IFFALSE 27420
27414: PUSH
27415: LD_EXP 63
27419: AND
27420: IFFALSE 27503
27422: GO 27424
27424: DISABLE
27425: LD_INT 0
27427: PPUSH
27428: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27429: LD_ADDR_VAR 0 2
27433: PUSH
27434: LD_INT 22
27436: PUSH
27437: LD_OWVAR 2
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: PUSH
27446: LD_INT 21
27448: PUSH
27449: LD_INT 3
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: PPUSH
27460: CALL_OW 69
27464: ST_TO_ADDR
// if not tmp then
27465: LD_VAR 0 2
27469: NOT
27470: IFFALSE 27474
// exit ;
27472: GO 27503
// for i in tmp do
27474: LD_ADDR_VAR 0 1
27478: PUSH
27479: LD_VAR 0 2
27483: PUSH
27484: FOR_IN
27485: IFFALSE 27501
// SetBLevel ( i , 10 ) ;
27487: LD_VAR 0 1
27491: PPUSH
27492: LD_INT 10
27494: PPUSH
27495: CALL_OW 241
27499: GO 27484
27501: POP
27502: POP
// end ;
27503: PPOPN 2
27505: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27506: LD_EXP 47
27510: IFFALSE 27518
27512: PUSH
27513: LD_EXP 64
27517: AND
27518: IFFALSE 27629
27520: GO 27522
27522: DISABLE
27523: LD_INT 0
27525: PPUSH
27526: PPUSH
27527: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27528: LD_ADDR_VAR 0 3
27532: PUSH
27533: LD_INT 22
27535: PUSH
27536: LD_OWVAR 2
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 25
27547: PUSH
27548: LD_INT 1
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: PPUSH
27559: CALL_OW 69
27563: ST_TO_ADDR
// if not tmp then
27564: LD_VAR 0 3
27568: NOT
27569: IFFALSE 27573
// exit ;
27571: GO 27629
// un := tmp [ rand ( 1 , tmp ) ] ;
27573: LD_ADDR_VAR 0 2
27577: PUSH
27578: LD_VAR 0 3
27582: PUSH
27583: LD_INT 1
27585: PPUSH
27586: LD_VAR 0 3
27590: PPUSH
27591: CALL_OW 12
27595: ARRAY
27596: ST_TO_ADDR
// if Crawls ( un ) then
27597: LD_VAR 0 2
27601: PPUSH
27602: CALL_OW 318
27606: IFFALSE 27617
// ComWalk ( un ) ;
27608: LD_VAR 0 2
27612: PPUSH
27613: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27617: LD_VAR 0 2
27621: PPUSH
27622: LD_INT 5
27624: PPUSH
27625: CALL_OW 336
// end ;
27629: PPOPN 3
27631: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27632: LD_EXP 47
27636: IFFALSE 27644
27638: PUSH
27639: LD_EXP 65
27643: AND
27644: IFFALSE 27656
27646: PUSH
27647: LD_OWVAR 67
27651: PUSH
27652: LD_INT 4
27654: LESS
27655: AND
27656: IFFALSE 27675
27658: GO 27660
27660: DISABLE
// begin Difficulty := Difficulty + 1 ;
27661: LD_ADDR_OWVAR 67
27665: PUSH
27666: LD_OWVAR 67
27670: PUSH
27671: LD_INT 1
27673: PLUS
27674: ST_TO_ADDR
// end ;
27675: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27676: LD_EXP 47
27680: IFFALSE 27688
27682: PUSH
27683: LD_EXP 66
27687: AND
27688: IFFALSE 27791
27690: GO 27692
27692: DISABLE
27693: LD_INT 0
27695: PPUSH
// begin for i := 1 to 5 do
27696: LD_ADDR_VAR 0 1
27700: PUSH
27701: DOUBLE
27702: LD_INT 1
27704: DEC
27705: ST_TO_ADDR
27706: LD_INT 5
27708: PUSH
27709: FOR_TO
27710: IFFALSE 27789
// begin uc_nation := nation_nature ;
27712: LD_ADDR_OWVAR 21
27716: PUSH
27717: LD_INT 0
27719: ST_TO_ADDR
// uc_side := 0 ;
27720: LD_ADDR_OWVAR 20
27724: PUSH
27725: LD_INT 0
27727: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27728: LD_ADDR_OWVAR 29
27732: PUSH
27733: LD_INT 12
27735: PUSH
27736: LD_INT 12
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: ST_TO_ADDR
// hc_agressivity := 20 ;
27743: LD_ADDR_OWVAR 35
27747: PUSH
27748: LD_INT 20
27750: ST_TO_ADDR
// hc_class := class_tiger ;
27751: LD_ADDR_OWVAR 28
27755: PUSH
27756: LD_INT 14
27758: ST_TO_ADDR
// hc_gallery :=  ;
27759: LD_ADDR_OWVAR 33
27763: PUSH
27764: LD_STRING 
27766: ST_TO_ADDR
// hc_name :=  ;
27767: LD_ADDR_OWVAR 26
27771: PUSH
27772: LD_STRING 
27774: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27775: CALL_OW 44
27779: PPUSH
27780: LD_INT 0
27782: PPUSH
27783: CALL_OW 51
// end ;
27787: GO 27709
27789: POP
27790: POP
// end ;
27791: PPOPN 1
27793: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27794: LD_EXP 47
27798: IFFALSE 27806
27800: PUSH
27801: LD_EXP 67
27805: AND
27806: IFFALSE 27815
27808: GO 27810
27810: DISABLE
// StreamSibBomb ;
27811: CALL 27816 0 0
27815: END
// export function StreamSibBomb ; var i , x , y ; begin
27816: LD_INT 0
27818: PPUSH
27819: PPUSH
27820: PPUSH
27821: PPUSH
// result := false ;
27822: LD_ADDR_VAR 0 1
27826: PUSH
27827: LD_INT 0
27829: ST_TO_ADDR
// for i := 1 to 16 do
27830: LD_ADDR_VAR 0 2
27834: PUSH
27835: DOUBLE
27836: LD_INT 1
27838: DEC
27839: ST_TO_ADDR
27840: LD_INT 16
27842: PUSH
27843: FOR_TO
27844: IFFALSE 28043
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27846: LD_ADDR_VAR 0 3
27850: PUSH
27851: LD_INT 10
27853: PUSH
27854: LD_INT 20
27856: PUSH
27857: LD_INT 30
27859: PUSH
27860: LD_INT 40
27862: PUSH
27863: LD_INT 50
27865: PUSH
27866: LD_INT 60
27868: PUSH
27869: LD_INT 70
27871: PUSH
27872: LD_INT 80
27874: PUSH
27875: LD_INT 90
27877: PUSH
27878: LD_INT 100
27880: PUSH
27881: LD_INT 110
27883: PUSH
27884: LD_INT 120
27886: PUSH
27887: LD_INT 130
27889: PUSH
27890: LD_INT 140
27892: PUSH
27893: LD_INT 150
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: PUSH
27913: LD_INT 1
27915: PPUSH
27916: LD_INT 15
27918: PPUSH
27919: CALL_OW 12
27923: ARRAY
27924: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27925: LD_ADDR_VAR 0 4
27929: PUSH
27930: LD_INT 10
27932: PUSH
27933: LD_INT 20
27935: PUSH
27936: LD_INT 30
27938: PUSH
27939: LD_INT 40
27941: PUSH
27942: LD_INT 50
27944: PUSH
27945: LD_INT 60
27947: PUSH
27948: LD_INT 70
27950: PUSH
27951: LD_INT 80
27953: PUSH
27954: LD_INT 90
27956: PUSH
27957: LD_INT 100
27959: PUSH
27960: LD_INT 110
27962: PUSH
27963: LD_INT 120
27965: PUSH
27966: LD_INT 130
27968: PUSH
27969: LD_INT 140
27971: PUSH
27972: LD_INT 150
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: LIST
27979: LIST
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: LIST
27990: LIST
27991: PUSH
27992: LD_INT 1
27994: PPUSH
27995: LD_INT 15
27997: PPUSH
27998: CALL_OW 12
28002: ARRAY
28003: ST_TO_ADDR
// if ValidHex ( x , y ) then
28004: LD_VAR 0 3
28008: PPUSH
28009: LD_VAR 0 4
28013: PPUSH
28014: CALL_OW 488
28018: IFFALSE 28041
// begin result := [ x , y ] ;
28020: LD_ADDR_VAR 0 1
28024: PUSH
28025: LD_VAR 0 3
28029: PUSH
28030: LD_VAR 0 4
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: ST_TO_ADDR
// break ;
28039: GO 28043
// end ; end ;
28041: GO 27843
28043: POP
28044: POP
// if result then
28045: LD_VAR 0 1
28049: IFFALSE 28109
// begin ToLua ( playSibBomb() ) ;
28051: LD_STRING playSibBomb()
28053: PPUSH
28054: CALL_OW 559
// wait ( 0 0$14 ) ;
28058: LD_INT 490
28060: PPUSH
28061: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28065: LD_VAR 0 1
28069: PUSH
28070: LD_INT 1
28072: ARRAY
28073: PPUSH
28074: LD_VAR 0 1
28078: PUSH
28079: LD_INT 2
28081: ARRAY
28082: PPUSH
28083: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28087: LD_VAR 0 1
28091: PUSH
28092: LD_INT 1
28094: ARRAY
28095: PPUSH
28096: LD_VAR 0 1
28100: PUSH
28101: LD_INT 2
28103: ARRAY
28104: PPUSH
28105: CALL_OW 429
// end ; end ;
28109: LD_VAR 0 1
28113: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28114: LD_EXP 47
28118: IFFALSE 28126
28120: PUSH
28121: LD_EXP 69
28125: AND
28126: IFFALSE 28138
28128: GO 28130
28130: DISABLE
// YouLost (  ) ;
28131: LD_STRING 
28133: PPUSH
28134: CALL_OW 104
28138: END
// every 0 0$1 trigger StreamModeActive and sFog do
28139: LD_EXP 47
28143: IFFALSE 28151
28145: PUSH
28146: LD_EXP 68
28150: AND
28151: IFFALSE 28165
28153: GO 28155
28155: DISABLE
// FogOff ( your_side ) ;
28156: LD_OWVAR 2
28160: PPUSH
28161: CALL_OW 344
28165: END
// every 0 0$1 trigger StreamModeActive and sSun do
28166: LD_EXP 47
28170: IFFALSE 28178
28172: PUSH
28173: LD_EXP 70
28177: AND
28178: IFFALSE 28206
28180: GO 28182
28182: DISABLE
// begin solar_recharge_percent := 0 ;
28183: LD_ADDR_OWVAR 79
28187: PUSH
28188: LD_INT 0
28190: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28191: LD_INT 10500
28193: PPUSH
28194: CALL_OW 67
// solar_recharge_percent := 100 ;
28198: LD_ADDR_OWVAR 79
28202: PUSH
28203: LD_INT 100
28205: ST_TO_ADDR
// end ;
28206: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28207: LD_EXP 47
28211: IFFALSE 28219
28213: PUSH
28214: LD_EXP 71
28218: AND
28219: IFFALSE 28458
28221: GO 28223
28223: DISABLE
28224: LD_INT 0
28226: PPUSH
28227: PPUSH
28228: PPUSH
// begin tmp := [ ] ;
28229: LD_ADDR_VAR 0 3
28233: PUSH
28234: EMPTY
28235: ST_TO_ADDR
// for i := 1 to 6 do
28236: LD_ADDR_VAR 0 1
28240: PUSH
28241: DOUBLE
28242: LD_INT 1
28244: DEC
28245: ST_TO_ADDR
28246: LD_INT 6
28248: PUSH
28249: FOR_TO
28250: IFFALSE 28355
// begin uc_nation := nation_nature ;
28252: LD_ADDR_OWVAR 21
28256: PUSH
28257: LD_INT 0
28259: ST_TO_ADDR
// uc_side := 0 ;
28260: LD_ADDR_OWVAR 20
28264: PUSH
28265: LD_INT 0
28267: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28268: LD_ADDR_OWVAR 29
28272: PUSH
28273: LD_INT 12
28275: PUSH
28276: LD_INT 12
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: ST_TO_ADDR
// hc_agressivity := 20 ;
28283: LD_ADDR_OWVAR 35
28287: PUSH
28288: LD_INT 20
28290: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28291: LD_ADDR_OWVAR 28
28295: PUSH
28296: LD_INT 17
28298: ST_TO_ADDR
// hc_gallery :=  ;
28299: LD_ADDR_OWVAR 33
28303: PUSH
28304: LD_STRING 
28306: ST_TO_ADDR
// hc_name :=  ;
28307: LD_ADDR_OWVAR 26
28311: PUSH
28312: LD_STRING 
28314: ST_TO_ADDR
// un := CreateHuman ;
28315: LD_ADDR_VAR 0 2
28319: PUSH
28320: CALL_OW 44
28324: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28325: LD_VAR 0 2
28329: PPUSH
28330: LD_INT 1
28332: PPUSH
28333: CALL_OW 51
// tmp := tmp ^ un ;
28337: LD_ADDR_VAR 0 3
28341: PUSH
28342: LD_VAR 0 3
28346: PUSH
28347: LD_VAR 0 2
28351: ADD
28352: ST_TO_ADDR
// end ;
28353: GO 28249
28355: POP
28356: POP
// repeat wait ( 0 0$1 ) ;
28357: LD_INT 35
28359: PPUSH
28360: CALL_OW 67
// for un in tmp do
28364: LD_ADDR_VAR 0 2
28368: PUSH
28369: LD_VAR 0 3
28373: PUSH
28374: FOR_IN
28375: IFFALSE 28449
// begin if IsDead ( un ) then
28377: LD_VAR 0 2
28381: PPUSH
28382: CALL_OW 301
28386: IFFALSE 28406
// begin tmp := tmp diff un ;
28388: LD_ADDR_VAR 0 3
28392: PUSH
28393: LD_VAR 0 3
28397: PUSH
28398: LD_VAR 0 2
28402: DIFF
28403: ST_TO_ADDR
// continue ;
28404: GO 28374
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28406: LD_VAR 0 2
28410: PPUSH
28411: LD_INT 3
28413: PUSH
28414: LD_INT 22
28416: PUSH
28417: LD_INT 0
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: PPUSH
28428: CALL_OW 69
28432: PPUSH
28433: LD_VAR 0 2
28437: PPUSH
28438: CALL_OW 74
28442: PPUSH
28443: CALL_OW 115
// end ;
28447: GO 28374
28449: POP
28450: POP
// until not tmp ;
28451: LD_VAR 0 3
28455: NOT
28456: IFFALSE 28357
// end ;
28458: PPOPN 3
28460: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28461: LD_EXP 47
28465: IFFALSE 28473
28467: PUSH
28468: LD_EXP 72
28472: AND
28473: IFFALSE 28527
28475: GO 28477
28477: DISABLE
// begin ToLua ( displayTroll(); ) ;
28478: LD_STRING displayTroll();
28480: PPUSH
28481: CALL_OW 559
// wait ( 3 3$00 ) ;
28485: LD_INT 6300
28487: PPUSH
28488: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28492: LD_STRING hideTroll();
28494: PPUSH
28495: CALL_OW 559
// wait ( 1 1$00 ) ;
28499: LD_INT 2100
28501: PPUSH
28502: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28506: LD_STRING displayTroll();
28508: PPUSH
28509: CALL_OW 559
// wait ( 1 1$00 ) ;
28513: LD_INT 2100
28515: PPUSH
28516: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28520: LD_STRING hideTroll();
28522: PPUSH
28523: CALL_OW 559
// end ;
28527: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28528: LD_EXP 47
28532: IFFALSE 28540
28534: PUSH
28535: LD_EXP 73
28539: AND
28540: IFFALSE 28603
28542: GO 28544
28544: DISABLE
28545: LD_INT 0
28547: PPUSH
// begin p := 0 ;
28548: LD_ADDR_VAR 0 1
28552: PUSH
28553: LD_INT 0
28555: ST_TO_ADDR
// repeat game_speed := 1 ;
28556: LD_ADDR_OWVAR 65
28560: PUSH
28561: LD_INT 1
28563: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28564: LD_INT 35
28566: PPUSH
28567: CALL_OW 67
// p := p + 1 ;
28571: LD_ADDR_VAR 0 1
28575: PUSH
28576: LD_VAR 0 1
28580: PUSH
28581: LD_INT 1
28583: PLUS
28584: ST_TO_ADDR
// until p >= 60 ;
28585: LD_VAR 0 1
28589: PUSH
28590: LD_INT 60
28592: GREATEREQUAL
28593: IFFALSE 28556
// game_speed := 4 ;
28595: LD_ADDR_OWVAR 65
28599: PUSH
28600: LD_INT 4
28602: ST_TO_ADDR
// end ;
28603: PPOPN 1
28605: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28606: LD_EXP 47
28610: IFFALSE 28618
28612: PUSH
28613: LD_EXP 74
28617: AND
28618: IFFALSE 28764
28620: GO 28622
28622: DISABLE
28623: LD_INT 0
28625: PPUSH
28626: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28627: LD_ADDR_VAR 0 1
28631: PUSH
28632: LD_INT 22
28634: PUSH
28635: LD_OWVAR 2
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PUSH
28644: LD_INT 2
28646: PUSH
28647: LD_INT 30
28649: PUSH
28650: LD_INT 0
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 30
28659: PUSH
28660: LD_INT 1
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: LIST
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: PPUSH
28676: CALL_OW 69
28680: ST_TO_ADDR
// if not depot then
28681: LD_VAR 0 1
28685: NOT
28686: IFFALSE 28690
// exit ;
28688: GO 28764
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28690: LD_ADDR_VAR 0 2
28694: PUSH
28695: LD_VAR 0 1
28699: PUSH
28700: LD_INT 1
28702: PPUSH
28703: LD_VAR 0 1
28707: PPUSH
28708: CALL_OW 12
28712: ARRAY
28713: PPUSH
28714: CALL_OW 274
28718: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28719: LD_VAR 0 2
28723: PPUSH
28724: LD_INT 1
28726: PPUSH
28727: LD_INT 0
28729: PPUSH
28730: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28734: LD_VAR 0 2
28738: PPUSH
28739: LD_INT 2
28741: PPUSH
28742: LD_INT 0
28744: PPUSH
28745: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28749: LD_VAR 0 2
28753: PPUSH
28754: LD_INT 3
28756: PPUSH
28757: LD_INT 0
28759: PPUSH
28760: CALL_OW 277
// end ;
28764: PPOPN 2
28766: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28767: LD_EXP 47
28771: IFFALSE 28779
28773: PUSH
28774: LD_EXP 75
28778: AND
28779: IFFALSE 28876
28781: GO 28783
28783: DISABLE
28784: LD_INT 0
28786: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28787: LD_ADDR_VAR 0 1
28791: PUSH
28792: LD_INT 22
28794: PUSH
28795: LD_OWVAR 2
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: PUSH
28804: LD_INT 21
28806: PUSH
28807: LD_INT 1
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: LD_INT 3
28816: PUSH
28817: LD_INT 23
28819: PUSH
28820: LD_INT 0
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: LIST
28835: PPUSH
28836: CALL_OW 69
28840: ST_TO_ADDR
// if not tmp then
28841: LD_VAR 0 1
28845: NOT
28846: IFFALSE 28850
// exit ;
28848: GO 28876
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28850: LD_VAR 0 1
28854: PUSH
28855: LD_INT 1
28857: PPUSH
28858: LD_VAR 0 1
28862: PPUSH
28863: CALL_OW 12
28867: ARRAY
28868: PPUSH
28869: LD_INT 200
28871: PPUSH
28872: CALL_OW 234
// end ;
28876: PPOPN 1
28878: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28879: LD_EXP 47
28883: IFFALSE 28891
28885: PUSH
28886: LD_EXP 76
28890: AND
28891: IFFALSE 28970
28893: GO 28895
28895: DISABLE
28896: LD_INT 0
28898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28899: LD_ADDR_VAR 0 1
28903: PUSH
28904: LD_INT 22
28906: PUSH
28907: LD_OWVAR 2
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: PUSH
28916: LD_INT 21
28918: PUSH
28919: LD_INT 2
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PPUSH
28930: CALL_OW 69
28934: ST_TO_ADDR
// if not tmp then
28935: LD_VAR 0 1
28939: NOT
28940: IFFALSE 28944
// exit ;
28942: GO 28970
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28944: LD_VAR 0 1
28948: PUSH
28949: LD_INT 1
28951: PPUSH
28952: LD_VAR 0 1
28956: PPUSH
28957: CALL_OW 12
28961: ARRAY
28962: PPUSH
28963: LD_INT 60
28965: PPUSH
28966: CALL_OW 234
// end ;
28970: PPOPN 1
28972: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28973: LD_EXP 47
28977: IFFALSE 28985
28979: PUSH
28980: LD_EXP 77
28984: AND
28985: IFFALSE 29084
28987: GO 28989
28989: DISABLE
28990: LD_INT 0
28992: PPUSH
28993: PPUSH
// begin enable ;
28994: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28995: LD_ADDR_VAR 0 1
28999: PUSH
29000: LD_INT 22
29002: PUSH
29003: LD_OWVAR 2
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: LD_INT 61
29014: PUSH
29015: EMPTY
29016: LIST
29017: PUSH
29018: LD_INT 33
29020: PUSH
29021: LD_INT 2
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: LIST
29032: PPUSH
29033: CALL_OW 69
29037: ST_TO_ADDR
// if not tmp then
29038: LD_VAR 0 1
29042: NOT
29043: IFFALSE 29047
// exit ;
29045: GO 29084
// for i in tmp do
29047: LD_ADDR_VAR 0 2
29051: PUSH
29052: LD_VAR 0 1
29056: PUSH
29057: FOR_IN
29058: IFFALSE 29082
// if IsControledBy ( i ) then
29060: LD_VAR 0 2
29064: PPUSH
29065: CALL_OW 312
29069: IFFALSE 29080
// ComUnlink ( i ) ;
29071: LD_VAR 0 2
29075: PPUSH
29076: CALL_OW 136
29080: GO 29057
29082: POP
29083: POP
// end ;
29084: PPOPN 2
29086: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29087: LD_EXP 47
29091: IFFALSE 29099
29093: PUSH
29094: LD_EXP 78
29098: AND
29099: IFFALSE 29239
29101: GO 29103
29103: DISABLE
29104: LD_INT 0
29106: PPUSH
29107: PPUSH
// begin ToLua ( displayPowell(); ) ;
29108: LD_STRING displayPowell();
29110: PPUSH
29111: CALL_OW 559
// uc_side := 0 ;
29115: LD_ADDR_OWVAR 20
29119: PUSH
29120: LD_INT 0
29122: ST_TO_ADDR
// uc_nation := 2 ;
29123: LD_ADDR_OWVAR 21
29127: PUSH
29128: LD_INT 2
29130: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29131: LD_ADDR_OWVAR 37
29135: PUSH
29136: LD_INT 14
29138: ST_TO_ADDR
// vc_engine := engine_siberite ;
29139: LD_ADDR_OWVAR 39
29143: PUSH
29144: LD_INT 3
29146: ST_TO_ADDR
// vc_control := control_apeman ;
29147: LD_ADDR_OWVAR 38
29151: PUSH
29152: LD_INT 5
29154: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29155: LD_ADDR_OWVAR 40
29159: PUSH
29160: LD_INT 29
29162: ST_TO_ADDR
// un := CreateVehicle ;
29163: LD_ADDR_VAR 0 2
29167: PUSH
29168: CALL_OW 45
29172: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29173: LD_VAR 0 2
29177: PPUSH
29178: LD_INT 1
29180: PPUSH
29181: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29185: LD_INT 35
29187: PPUSH
29188: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29192: LD_VAR 0 2
29196: PPUSH
29197: LD_INT 22
29199: PUSH
29200: LD_OWVAR 2
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: PPUSH
29209: CALL_OW 69
29213: PPUSH
29214: LD_VAR 0 2
29218: PPUSH
29219: CALL_OW 74
29223: PPUSH
29224: CALL_OW 115
// until IsDead ( un ) ;
29228: LD_VAR 0 2
29232: PPUSH
29233: CALL_OW 301
29237: IFFALSE 29185
// end ;
29239: PPOPN 2
29241: END
// every 0 0$1 trigger StreamModeActive and sStu do
29242: LD_EXP 47
29246: IFFALSE 29254
29248: PUSH
29249: LD_EXP 86
29253: AND
29254: IFFALSE 29270
29256: GO 29258
29258: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29259: LD_STRING displayStucuk();
29261: PPUSH
29262: CALL_OW 559
// ResetFog ;
29266: CALL_OW 335
// end ;
29270: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29271: LD_EXP 47
29275: IFFALSE 29283
29277: PUSH
29278: LD_EXP 79
29282: AND
29283: IFFALSE 29424
29285: GO 29287
29287: DISABLE
29288: LD_INT 0
29290: PPUSH
29291: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29292: LD_ADDR_VAR 0 2
29296: PUSH
29297: LD_INT 22
29299: PUSH
29300: LD_OWVAR 2
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: LD_INT 21
29311: PUSH
29312: LD_INT 1
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: PPUSH
29323: CALL_OW 69
29327: ST_TO_ADDR
// if not tmp then
29328: LD_VAR 0 2
29332: NOT
29333: IFFALSE 29337
// exit ;
29335: GO 29424
// un := tmp [ rand ( 1 , tmp ) ] ;
29337: LD_ADDR_VAR 0 1
29341: PUSH
29342: LD_VAR 0 2
29346: PUSH
29347: LD_INT 1
29349: PPUSH
29350: LD_VAR 0 2
29354: PPUSH
29355: CALL_OW 12
29359: ARRAY
29360: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29361: LD_VAR 0 1
29365: PPUSH
29366: LD_INT 0
29368: PPUSH
29369: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29373: LD_VAR 0 1
29377: PPUSH
29378: LD_OWVAR 3
29382: PUSH
29383: LD_VAR 0 1
29387: DIFF
29388: PPUSH
29389: LD_VAR 0 1
29393: PPUSH
29394: CALL_OW 74
29398: PPUSH
29399: CALL_OW 115
// wait ( 0 0$20 ) ;
29403: LD_INT 700
29405: PPUSH
29406: CALL_OW 67
// SetSide ( un , your_side ) ;
29410: LD_VAR 0 1
29414: PPUSH
29415: LD_OWVAR 2
29419: PPUSH
29420: CALL_OW 235
// end ;
29424: PPOPN 2
29426: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29427: LD_EXP 47
29431: IFFALSE 29439
29433: PUSH
29434: LD_EXP 80
29438: AND
29439: IFFALSE 29545
29441: GO 29443
29443: DISABLE
29444: LD_INT 0
29446: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29447: LD_ADDR_VAR 0 1
29451: PUSH
29452: LD_INT 22
29454: PUSH
29455: LD_OWVAR 2
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: PUSH
29464: LD_INT 2
29466: PUSH
29467: LD_INT 30
29469: PUSH
29470: LD_INT 0
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: LD_INT 30
29479: PUSH
29480: LD_INT 1
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: LIST
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PPUSH
29496: CALL_OW 69
29500: ST_TO_ADDR
// if not depot then
29501: LD_VAR 0 1
29505: NOT
29506: IFFALSE 29510
// exit ;
29508: GO 29545
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29510: LD_VAR 0 1
29514: PUSH
29515: LD_INT 1
29517: ARRAY
29518: PPUSH
29519: CALL_OW 250
29523: PPUSH
29524: LD_VAR 0 1
29528: PUSH
29529: LD_INT 1
29531: ARRAY
29532: PPUSH
29533: CALL_OW 251
29537: PPUSH
29538: LD_INT 70
29540: PPUSH
29541: CALL_OW 495
// end ;
29545: PPOPN 1
29547: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29548: LD_EXP 47
29552: IFFALSE 29560
29554: PUSH
29555: LD_EXP 81
29559: AND
29560: IFFALSE 29771
29562: GO 29564
29564: DISABLE
29565: LD_INT 0
29567: PPUSH
29568: PPUSH
29569: PPUSH
29570: PPUSH
29571: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29572: LD_ADDR_VAR 0 5
29576: PUSH
29577: LD_INT 22
29579: PUSH
29580: LD_OWVAR 2
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: PUSH
29589: LD_INT 21
29591: PUSH
29592: LD_INT 1
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PPUSH
29603: CALL_OW 69
29607: ST_TO_ADDR
// if not tmp then
29608: LD_VAR 0 5
29612: NOT
29613: IFFALSE 29617
// exit ;
29615: GO 29771
// for i in tmp do
29617: LD_ADDR_VAR 0 1
29621: PUSH
29622: LD_VAR 0 5
29626: PUSH
29627: FOR_IN
29628: IFFALSE 29769
// begin d := rand ( 0 , 5 ) ;
29630: LD_ADDR_VAR 0 4
29634: PUSH
29635: LD_INT 0
29637: PPUSH
29638: LD_INT 5
29640: PPUSH
29641: CALL_OW 12
29645: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29646: LD_ADDR_VAR 0 2
29650: PUSH
29651: LD_VAR 0 1
29655: PPUSH
29656: CALL_OW 250
29660: PPUSH
29661: LD_VAR 0 4
29665: PPUSH
29666: LD_INT 3
29668: PPUSH
29669: LD_INT 12
29671: PPUSH
29672: CALL_OW 12
29676: PPUSH
29677: CALL_OW 272
29681: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29682: LD_ADDR_VAR 0 3
29686: PUSH
29687: LD_VAR 0 1
29691: PPUSH
29692: CALL_OW 251
29696: PPUSH
29697: LD_VAR 0 4
29701: PPUSH
29702: LD_INT 3
29704: PPUSH
29705: LD_INT 12
29707: PPUSH
29708: CALL_OW 12
29712: PPUSH
29713: CALL_OW 273
29717: ST_TO_ADDR
// if ValidHex ( x , y ) then
29718: LD_VAR 0 2
29722: PPUSH
29723: LD_VAR 0 3
29727: PPUSH
29728: CALL_OW 488
29732: IFFALSE 29767
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29734: LD_VAR 0 1
29738: PPUSH
29739: LD_VAR 0 2
29743: PPUSH
29744: LD_VAR 0 3
29748: PPUSH
29749: LD_INT 3
29751: PPUSH
29752: LD_INT 6
29754: PPUSH
29755: CALL_OW 12
29759: PPUSH
29760: LD_INT 1
29762: PPUSH
29763: CALL_OW 483
// end ;
29767: GO 29627
29769: POP
29770: POP
// end ;
29771: PPOPN 5
29773: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29774: LD_EXP 47
29778: IFFALSE 29786
29780: PUSH
29781: LD_EXP 82
29785: AND
29786: IFFALSE 29880
29788: GO 29790
29790: DISABLE
29791: LD_INT 0
29793: PPUSH
29794: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29795: LD_ADDR_VAR 0 2
29799: PUSH
29800: LD_INT 22
29802: PUSH
29803: LD_OWVAR 2
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: LD_INT 32
29814: PUSH
29815: LD_INT 1
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: PUSH
29822: LD_INT 21
29824: PUSH
29825: LD_INT 2
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: LIST
29836: PPUSH
29837: CALL_OW 69
29841: ST_TO_ADDR
// if not tmp then
29842: LD_VAR 0 2
29846: NOT
29847: IFFALSE 29851
// exit ;
29849: GO 29880
// for i in tmp do
29851: LD_ADDR_VAR 0 1
29855: PUSH
29856: LD_VAR 0 2
29860: PUSH
29861: FOR_IN
29862: IFFALSE 29878
// SetFuel ( i , 0 ) ;
29864: LD_VAR 0 1
29868: PPUSH
29869: LD_INT 0
29871: PPUSH
29872: CALL_OW 240
29876: GO 29861
29878: POP
29879: POP
// end ;
29880: PPOPN 2
29882: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29883: LD_EXP 47
29887: IFFALSE 29895
29889: PUSH
29890: LD_EXP 83
29894: AND
29895: IFFALSE 29961
29897: GO 29899
29899: DISABLE
29900: LD_INT 0
29902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29903: LD_ADDR_VAR 0 1
29907: PUSH
29908: LD_INT 22
29910: PUSH
29911: LD_OWVAR 2
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 30
29922: PUSH
29923: LD_INT 29
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PPUSH
29934: CALL_OW 69
29938: ST_TO_ADDR
// if not tmp then
29939: LD_VAR 0 1
29943: NOT
29944: IFFALSE 29948
// exit ;
29946: GO 29961
// DestroyUnit ( tmp [ 1 ] ) ;
29948: LD_VAR 0 1
29952: PUSH
29953: LD_INT 1
29955: ARRAY
29956: PPUSH
29957: CALL_OW 65
// end ;
29961: PPOPN 1
29963: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29964: LD_EXP 47
29968: IFFALSE 29976
29970: PUSH
29971: LD_EXP 85
29975: AND
29976: IFFALSE 30105
29978: GO 29980
29980: DISABLE
29981: LD_INT 0
29983: PPUSH
// begin uc_side := 0 ;
29984: LD_ADDR_OWVAR 20
29988: PUSH
29989: LD_INT 0
29991: ST_TO_ADDR
// uc_nation := nation_arabian ;
29992: LD_ADDR_OWVAR 21
29996: PUSH
29997: LD_INT 2
29999: ST_TO_ADDR
// hc_gallery :=  ;
30000: LD_ADDR_OWVAR 33
30004: PUSH
30005: LD_STRING 
30007: ST_TO_ADDR
// hc_name :=  ;
30008: LD_ADDR_OWVAR 26
30012: PUSH
30013: LD_STRING 
30015: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30016: LD_INT 1
30018: PPUSH
30019: LD_INT 11
30021: PPUSH
30022: LD_INT 10
30024: PPUSH
30025: CALL_OW 380
// un := CreateHuman ;
30029: LD_ADDR_VAR 0 1
30033: PUSH
30034: CALL_OW 44
30038: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30039: LD_VAR 0 1
30043: PPUSH
30044: LD_INT 1
30046: PPUSH
30047: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30051: LD_INT 35
30053: PPUSH
30054: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30058: LD_VAR 0 1
30062: PPUSH
30063: LD_INT 22
30065: PUSH
30066: LD_OWVAR 2
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PPUSH
30075: CALL_OW 69
30079: PPUSH
30080: LD_VAR 0 1
30084: PPUSH
30085: CALL_OW 74
30089: PPUSH
30090: CALL_OW 115
// until IsDead ( un ) ;
30094: LD_VAR 0 1
30098: PPUSH
30099: CALL_OW 301
30103: IFFALSE 30051
// end ;
30105: PPOPN 1
30107: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30108: LD_EXP 47
30112: IFFALSE 30120
30114: PUSH
30115: LD_EXP 87
30119: AND
30120: IFFALSE 30132
30122: GO 30124
30124: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30125: LD_STRING earthquake(getX(game), 0, 32)
30127: PPUSH
30128: CALL_OW 559
30132: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30133: LD_EXP 47
30137: IFFALSE 30145
30139: PUSH
30140: LD_EXP 88
30144: AND
30145: IFFALSE 30236
30147: GO 30149
30149: DISABLE
30150: LD_INT 0
30152: PPUSH
// begin enable ;
30153: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30154: LD_ADDR_VAR 0 1
30158: PUSH
30159: LD_INT 22
30161: PUSH
30162: LD_OWVAR 2
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: PUSH
30171: LD_INT 21
30173: PUSH
30174: LD_INT 2
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: LD_INT 33
30183: PUSH
30184: LD_INT 3
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: LIST
30195: PPUSH
30196: CALL_OW 69
30200: ST_TO_ADDR
// if not tmp then
30201: LD_VAR 0 1
30205: NOT
30206: IFFALSE 30210
// exit ;
30208: GO 30236
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30210: LD_VAR 0 1
30214: PUSH
30215: LD_INT 1
30217: PPUSH
30218: LD_VAR 0 1
30222: PPUSH
30223: CALL_OW 12
30227: ARRAY
30228: PPUSH
30229: LD_INT 1
30231: PPUSH
30232: CALL_OW 234
// end ;
30236: PPOPN 1
30238: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30239: LD_EXP 47
30243: IFFALSE 30251
30245: PUSH
30246: LD_EXP 89
30250: AND
30251: IFFALSE 30392
30253: GO 30255
30255: DISABLE
30256: LD_INT 0
30258: PPUSH
30259: PPUSH
30260: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30261: LD_ADDR_VAR 0 3
30265: PUSH
30266: LD_INT 22
30268: PUSH
30269: LD_OWVAR 2
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: LD_INT 25
30280: PUSH
30281: LD_INT 1
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PPUSH
30292: CALL_OW 69
30296: ST_TO_ADDR
// if not tmp then
30297: LD_VAR 0 3
30301: NOT
30302: IFFALSE 30306
// exit ;
30304: GO 30392
// un := tmp [ rand ( 1 , tmp ) ] ;
30306: LD_ADDR_VAR 0 2
30310: PUSH
30311: LD_VAR 0 3
30315: PUSH
30316: LD_INT 1
30318: PPUSH
30319: LD_VAR 0 3
30323: PPUSH
30324: CALL_OW 12
30328: ARRAY
30329: ST_TO_ADDR
// if Crawls ( un ) then
30330: LD_VAR 0 2
30334: PPUSH
30335: CALL_OW 318
30339: IFFALSE 30350
// ComWalk ( un ) ;
30341: LD_VAR 0 2
30345: PPUSH
30346: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30350: LD_VAR 0 2
30354: PPUSH
30355: LD_INT 9
30357: PPUSH
30358: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30362: LD_INT 28
30364: PPUSH
30365: LD_OWVAR 2
30369: PPUSH
30370: LD_INT 2
30372: PPUSH
30373: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30377: LD_INT 29
30379: PPUSH
30380: LD_OWVAR 2
30384: PPUSH
30385: LD_INT 2
30387: PPUSH
30388: CALL_OW 322
// end ;
30392: PPOPN 3
30394: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30395: LD_EXP 47
30399: IFFALSE 30407
30401: PUSH
30402: LD_EXP 90
30406: AND
30407: IFFALSE 30518
30409: GO 30411
30411: DISABLE
30412: LD_INT 0
30414: PPUSH
30415: PPUSH
30416: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30417: LD_ADDR_VAR 0 3
30421: PUSH
30422: LD_INT 22
30424: PUSH
30425: LD_OWVAR 2
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: PUSH
30434: LD_INT 25
30436: PUSH
30437: LD_INT 1
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PPUSH
30448: CALL_OW 69
30452: ST_TO_ADDR
// if not tmp then
30453: LD_VAR 0 3
30457: NOT
30458: IFFALSE 30462
// exit ;
30460: GO 30518
// un := tmp [ rand ( 1 , tmp ) ] ;
30462: LD_ADDR_VAR 0 2
30466: PUSH
30467: LD_VAR 0 3
30471: PUSH
30472: LD_INT 1
30474: PPUSH
30475: LD_VAR 0 3
30479: PPUSH
30480: CALL_OW 12
30484: ARRAY
30485: ST_TO_ADDR
// if Crawls ( un ) then
30486: LD_VAR 0 2
30490: PPUSH
30491: CALL_OW 318
30495: IFFALSE 30506
// ComWalk ( un ) ;
30497: LD_VAR 0 2
30501: PPUSH
30502: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30506: LD_VAR 0 2
30510: PPUSH
30511: LD_INT 8
30513: PPUSH
30514: CALL_OW 336
// end ;
30518: PPOPN 3
30520: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30521: LD_EXP 47
30525: IFFALSE 30533
30527: PUSH
30528: LD_EXP 91
30532: AND
30533: IFFALSE 30677
30535: GO 30537
30537: DISABLE
30538: LD_INT 0
30540: PPUSH
30541: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30542: LD_ADDR_VAR 0 2
30546: PUSH
30547: LD_INT 22
30549: PUSH
30550: LD_OWVAR 2
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: LD_INT 21
30561: PUSH
30562: LD_INT 2
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 2
30571: PUSH
30572: LD_INT 34
30574: PUSH
30575: LD_INT 12
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: LD_INT 34
30584: PUSH
30585: LD_INT 51
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 34
30594: PUSH
30595: LD_INT 32
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: LIST
30612: PPUSH
30613: CALL_OW 69
30617: ST_TO_ADDR
// if not tmp then
30618: LD_VAR 0 2
30622: NOT
30623: IFFALSE 30627
// exit ;
30625: GO 30677
// for i in tmp do
30627: LD_ADDR_VAR 0 1
30631: PUSH
30632: LD_VAR 0 2
30636: PUSH
30637: FOR_IN
30638: IFFALSE 30675
// if GetCargo ( i , mat_artifact ) = 0 then
30640: LD_VAR 0 1
30644: PPUSH
30645: LD_INT 4
30647: PPUSH
30648: CALL_OW 289
30652: PUSH
30653: LD_INT 0
30655: EQUAL
30656: IFFALSE 30673
// SetCargo ( i , mat_siberit , 100 ) ;
30658: LD_VAR 0 1
30662: PPUSH
30663: LD_INT 3
30665: PPUSH
30666: LD_INT 100
30668: PPUSH
30669: CALL_OW 290
30673: GO 30637
30675: POP
30676: POP
// end ;
30677: PPOPN 2
30679: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30680: LD_EXP 47
30684: IFFALSE 30692
30686: PUSH
30687: LD_EXP 92
30691: AND
30692: IFFALSE 30875
30694: GO 30696
30696: DISABLE
30697: LD_INT 0
30699: PPUSH
30700: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30701: LD_ADDR_VAR 0 2
30705: PUSH
30706: LD_INT 22
30708: PUSH
30709: LD_OWVAR 2
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PPUSH
30718: CALL_OW 69
30722: ST_TO_ADDR
// if not tmp then
30723: LD_VAR 0 2
30727: NOT
30728: IFFALSE 30732
// exit ;
30730: GO 30875
// for i := 1 to 2 do
30732: LD_ADDR_VAR 0 1
30736: PUSH
30737: DOUBLE
30738: LD_INT 1
30740: DEC
30741: ST_TO_ADDR
30742: LD_INT 2
30744: PUSH
30745: FOR_TO
30746: IFFALSE 30873
// begin uc_side := your_side ;
30748: LD_ADDR_OWVAR 20
30752: PUSH
30753: LD_OWVAR 2
30757: ST_TO_ADDR
// uc_nation := nation_american ;
30758: LD_ADDR_OWVAR 21
30762: PUSH
30763: LD_INT 1
30765: ST_TO_ADDR
// vc_chassis := us_morphling ;
30766: LD_ADDR_OWVAR 37
30770: PUSH
30771: LD_INT 5
30773: ST_TO_ADDR
// vc_engine := engine_siberite ;
30774: LD_ADDR_OWVAR 39
30778: PUSH
30779: LD_INT 3
30781: ST_TO_ADDR
// vc_control := control_computer ;
30782: LD_ADDR_OWVAR 38
30786: PUSH
30787: LD_INT 3
30789: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30790: LD_ADDR_OWVAR 40
30794: PUSH
30795: LD_INT 10
30797: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30798: LD_VAR 0 2
30802: PUSH
30803: LD_INT 1
30805: ARRAY
30806: PPUSH
30807: CALL_OW 310
30811: NOT
30812: IFFALSE 30859
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30814: CALL_OW 45
30818: PPUSH
30819: LD_VAR 0 2
30823: PUSH
30824: LD_INT 1
30826: ARRAY
30827: PPUSH
30828: CALL_OW 250
30832: PPUSH
30833: LD_VAR 0 2
30837: PUSH
30838: LD_INT 1
30840: ARRAY
30841: PPUSH
30842: CALL_OW 251
30846: PPUSH
30847: LD_INT 12
30849: PPUSH
30850: LD_INT 1
30852: PPUSH
30853: CALL_OW 50
30857: GO 30871
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30859: CALL_OW 45
30863: PPUSH
30864: LD_INT 1
30866: PPUSH
30867: CALL_OW 51
// end ;
30871: GO 30745
30873: POP
30874: POP
// end ;
30875: PPOPN 2
30877: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30878: LD_EXP 47
30882: IFFALSE 30890
30884: PUSH
30885: LD_EXP 93
30889: AND
30890: IFFALSE 31112
30892: GO 30894
30894: DISABLE
30895: LD_INT 0
30897: PPUSH
30898: PPUSH
30899: PPUSH
30900: PPUSH
30901: PPUSH
30902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30903: LD_ADDR_VAR 0 6
30907: PUSH
30908: LD_INT 22
30910: PUSH
30911: LD_OWVAR 2
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: PUSH
30920: LD_INT 21
30922: PUSH
30923: LD_INT 1
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PUSH
30930: LD_INT 3
30932: PUSH
30933: LD_INT 23
30935: PUSH
30936: LD_INT 0
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: LIST
30951: PPUSH
30952: CALL_OW 69
30956: ST_TO_ADDR
// if not tmp then
30957: LD_VAR 0 6
30961: NOT
30962: IFFALSE 30966
// exit ;
30964: GO 31112
// s1 := rand ( 1 , 4 ) ;
30966: LD_ADDR_VAR 0 2
30970: PUSH
30971: LD_INT 1
30973: PPUSH
30974: LD_INT 4
30976: PPUSH
30977: CALL_OW 12
30981: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30982: LD_ADDR_VAR 0 4
30986: PUSH
30987: LD_VAR 0 6
30991: PUSH
30992: LD_INT 1
30994: ARRAY
30995: PPUSH
30996: LD_VAR 0 2
31000: PPUSH
31001: CALL_OW 259
31005: ST_TO_ADDR
// if s1 = 1 then
31006: LD_VAR 0 2
31010: PUSH
31011: LD_INT 1
31013: EQUAL
31014: IFFALSE 31034
// s2 := rand ( 2 , 4 ) else
31016: LD_ADDR_VAR 0 3
31020: PUSH
31021: LD_INT 2
31023: PPUSH
31024: LD_INT 4
31026: PPUSH
31027: CALL_OW 12
31031: ST_TO_ADDR
31032: GO 31042
// s2 := 1 ;
31034: LD_ADDR_VAR 0 3
31038: PUSH
31039: LD_INT 1
31041: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31042: LD_ADDR_VAR 0 5
31046: PUSH
31047: LD_VAR 0 6
31051: PUSH
31052: LD_INT 1
31054: ARRAY
31055: PPUSH
31056: LD_VAR 0 3
31060: PPUSH
31061: CALL_OW 259
31065: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31066: LD_VAR 0 6
31070: PUSH
31071: LD_INT 1
31073: ARRAY
31074: PPUSH
31075: LD_VAR 0 2
31079: PPUSH
31080: LD_VAR 0 5
31084: PPUSH
31085: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31089: LD_VAR 0 6
31093: PUSH
31094: LD_INT 1
31096: ARRAY
31097: PPUSH
31098: LD_VAR 0 3
31102: PPUSH
31103: LD_VAR 0 4
31107: PPUSH
31108: CALL_OW 237
// end ;
31112: PPOPN 6
31114: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31115: LD_EXP 47
31119: IFFALSE 31127
31121: PUSH
31122: LD_EXP 94
31126: AND
31127: IFFALSE 31206
31129: GO 31131
31131: DISABLE
31132: LD_INT 0
31134: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31135: LD_ADDR_VAR 0 1
31139: PUSH
31140: LD_INT 22
31142: PUSH
31143: LD_OWVAR 2
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: LD_INT 30
31154: PUSH
31155: LD_INT 3
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PPUSH
31166: CALL_OW 69
31170: ST_TO_ADDR
// if not tmp then
31171: LD_VAR 0 1
31175: NOT
31176: IFFALSE 31180
// exit ;
31178: GO 31206
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31180: LD_VAR 0 1
31184: PUSH
31185: LD_INT 1
31187: PPUSH
31188: LD_VAR 0 1
31192: PPUSH
31193: CALL_OW 12
31197: ARRAY
31198: PPUSH
31199: LD_INT 1
31201: PPUSH
31202: CALL_OW 234
// end ;
31206: PPOPN 1
31208: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31209: LD_EXP 47
31213: IFFALSE 31221
31215: PUSH
31216: LD_EXP 95
31220: AND
31221: IFFALSE 31333
31223: GO 31225
31225: DISABLE
31226: LD_INT 0
31228: PPUSH
31229: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31230: LD_ADDR_VAR 0 2
31234: PUSH
31235: LD_INT 22
31237: PUSH
31238: LD_OWVAR 2
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: LD_INT 2
31249: PUSH
31250: LD_INT 30
31252: PUSH
31253: LD_INT 27
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: LD_INT 30
31262: PUSH
31263: LD_INT 26
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: LD_INT 30
31272: PUSH
31273: LD_INT 28
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PPUSH
31290: CALL_OW 69
31294: ST_TO_ADDR
// if not tmp then
31295: LD_VAR 0 2
31299: NOT
31300: IFFALSE 31304
// exit ;
31302: GO 31333
// for i in tmp do
31304: LD_ADDR_VAR 0 1
31308: PUSH
31309: LD_VAR 0 2
31313: PUSH
31314: FOR_IN
31315: IFFALSE 31331
// SetLives ( i , 1 ) ;
31317: LD_VAR 0 1
31321: PPUSH
31322: LD_INT 1
31324: PPUSH
31325: CALL_OW 234
31329: GO 31314
31331: POP
31332: POP
// end ;
31333: PPOPN 2
31335: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31336: LD_EXP 47
31340: IFFALSE 31348
31342: PUSH
31343: LD_EXP 96
31347: AND
31348: IFFALSE 31635
31350: GO 31352
31352: DISABLE
31353: LD_INT 0
31355: PPUSH
31356: PPUSH
31357: PPUSH
// begin i := rand ( 1 , 7 ) ;
31358: LD_ADDR_VAR 0 1
31362: PUSH
31363: LD_INT 1
31365: PPUSH
31366: LD_INT 7
31368: PPUSH
31369: CALL_OW 12
31373: ST_TO_ADDR
// case i of 1 :
31374: LD_VAR 0 1
31378: PUSH
31379: LD_INT 1
31381: DOUBLE
31382: EQUAL
31383: IFTRUE 31387
31385: GO 31397
31387: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31388: LD_STRING earthquake(getX(game), 0, 32)
31390: PPUSH
31391: CALL_OW 559
31395: GO 31635
31397: LD_INT 2
31399: DOUBLE
31400: EQUAL
31401: IFTRUE 31405
31403: GO 31419
31405: POP
// begin ToLua ( displayStucuk(); ) ;
31406: LD_STRING displayStucuk();
31408: PPUSH
31409: CALL_OW 559
// ResetFog ;
31413: CALL_OW 335
// end ; 3 :
31417: GO 31635
31419: LD_INT 3
31421: DOUBLE
31422: EQUAL
31423: IFTRUE 31427
31425: GO 31531
31427: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31428: LD_ADDR_VAR 0 2
31432: PUSH
31433: LD_INT 22
31435: PUSH
31436: LD_OWVAR 2
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PUSH
31445: LD_INT 25
31447: PUSH
31448: LD_INT 1
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: PPUSH
31459: CALL_OW 69
31463: ST_TO_ADDR
// if not tmp then
31464: LD_VAR 0 2
31468: NOT
31469: IFFALSE 31473
// exit ;
31471: GO 31635
// un := tmp [ rand ( 1 , tmp ) ] ;
31473: LD_ADDR_VAR 0 3
31477: PUSH
31478: LD_VAR 0 2
31482: PUSH
31483: LD_INT 1
31485: PPUSH
31486: LD_VAR 0 2
31490: PPUSH
31491: CALL_OW 12
31495: ARRAY
31496: ST_TO_ADDR
// if Crawls ( un ) then
31497: LD_VAR 0 3
31501: PPUSH
31502: CALL_OW 318
31506: IFFALSE 31517
// ComWalk ( un ) ;
31508: LD_VAR 0 3
31512: PPUSH
31513: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31517: LD_VAR 0 3
31521: PPUSH
31522: LD_INT 8
31524: PPUSH
31525: CALL_OW 336
// end ; 4 :
31529: GO 31635
31531: LD_INT 4
31533: DOUBLE
31534: EQUAL
31535: IFTRUE 31539
31537: GO 31613
31539: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31540: LD_ADDR_VAR 0 2
31544: PUSH
31545: LD_INT 22
31547: PUSH
31548: LD_OWVAR 2
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 30
31559: PUSH
31560: LD_INT 29
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: EMPTY
31568: LIST
31569: LIST
31570: PPUSH
31571: CALL_OW 69
31575: ST_TO_ADDR
// if not tmp then
31576: LD_VAR 0 2
31580: NOT
31581: IFFALSE 31585
// exit ;
31583: GO 31635
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31585: LD_VAR 0 2
31589: PUSH
31590: LD_INT 1
31592: ARRAY
31593: PPUSH
31594: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31598: LD_VAR 0 2
31602: PUSH
31603: LD_INT 1
31605: ARRAY
31606: PPUSH
31607: CALL_OW 65
// end ; 5 .. 7 :
31611: GO 31635
31613: LD_INT 5
31615: DOUBLE
31616: GREATEREQUAL
31617: IFFALSE 31625
31619: LD_INT 7
31621: DOUBLE
31622: LESSEQUAL
31623: IFTRUE 31627
31625: GO 31634
31627: POP
// StreamSibBomb ; end ;
31628: CALL 27816 0 0
31632: GO 31635
31634: POP
// end ;
31635: PPOPN 3
31637: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31638: LD_EXP 47
31642: IFFALSE 31650
31644: PUSH
31645: LD_EXP 97
31649: AND
31650: IFFALSE 31806
31652: GO 31654
31654: DISABLE
31655: LD_INT 0
31657: PPUSH
31658: PPUSH
31659: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31660: LD_ADDR_VAR 0 2
31664: PUSH
31665: LD_INT 81
31667: PUSH
31668: LD_OWVAR 2
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: PUSH
31677: LD_INT 2
31679: PUSH
31680: LD_INT 21
31682: PUSH
31683: LD_INT 1
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 21
31692: PUSH
31693: LD_INT 2
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: LIST
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PPUSH
31709: CALL_OW 69
31713: ST_TO_ADDR
// if not tmp then
31714: LD_VAR 0 2
31718: NOT
31719: IFFALSE 31723
// exit ;
31721: GO 31806
// p := 0 ;
31723: LD_ADDR_VAR 0 3
31727: PUSH
31728: LD_INT 0
31730: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31731: LD_INT 35
31733: PPUSH
31734: CALL_OW 67
// p := p + 1 ;
31738: LD_ADDR_VAR 0 3
31742: PUSH
31743: LD_VAR 0 3
31747: PUSH
31748: LD_INT 1
31750: PLUS
31751: ST_TO_ADDR
// for i in tmp do
31752: LD_ADDR_VAR 0 1
31756: PUSH
31757: LD_VAR 0 2
31761: PUSH
31762: FOR_IN
31763: IFFALSE 31794
// if GetLives ( i ) < 1000 then
31765: LD_VAR 0 1
31769: PPUSH
31770: CALL_OW 256
31774: PUSH
31775: LD_INT 1000
31777: LESS
31778: IFFALSE 31792
// SetLives ( i , 1000 ) ;
31780: LD_VAR 0 1
31784: PPUSH
31785: LD_INT 1000
31787: PPUSH
31788: CALL_OW 234
31792: GO 31762
31794: POP
31795: POP
// until p > 20 ;
31796: LD_VAR 0 3
31800: PUSH
31801: LD_INT 20
31803: GREATER
31804: IFFALSE 31731
// end ;
31806: PPOPN 3
31808: END
// every 0 0$1 trigger StreamModeActive and sTime do
31809: LD_EXP 47
31813: IFFALSE 31821
31815: PUSH
31816: LD_EXP 98
31820: AND
31821: IFFALSE 31856
31823: GO 31825
31825: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31826: LD_INT 28
31828: PPUSH
31829: LD_OWVAR 2
31833: PPUSH
31834: LD_INT 2
31836: PPUSH
31837: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31841: LD_INT 30
31843: PPUSH
31844: LD_OWVAR 2
31848: PPUSH
31849: LD_INT 2
31851: PPUSH
31852: CALL_OW 322
// end ;
31856: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31857: LD_EXP 47
31861: IFFALSE 31869
31863: PUSH
31864: LD_EXP 99
31868: AND
31869: IFFALSE 31990
31871: GO 31873
31873: DISABLE
31874: LD_INT 0
31876: PPUSH
31877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31878: LD_ADDR_VAR 0 2
31882: PUSH
31883: LD_INT 22
31885: PUSH
31886: LD_OWVAR 2
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 21
31897: PUSH
31898: LD_INT 1
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 3
31907: PUSH
31908: LD_INT 23
31910: PUSH
31911: LD_INT 0
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: LIST
31926: PPUSH
31927: CALL_OW 69
31931: ST_TO_ADDR
// if not tmp then
31932: LD_VAR 0 2
31936: NOT
31937: IFFALSE 31941
// exit ;
31939: GO 31990
// for i in tmp do
31941: LD_ADDR_VAR 0 1
31945: PUSH
31946: LD_VAR 0 2
31950: PUSH
31951: FOR_IN
31952: IFFALSE 31988
// begin if Crawls ( i ) then
31954: LD_VAR 0 1
31958: PPUSH
31959: CALL_OW 318
31963: IFFALSE 31974
// ComWalk ( i ) ;
31965: LD_VAR 0 1
31969: PPUSH
31970: CALL_OW 138
// SetClass ( i , 2 ) ;
31974: LD_VAR 0 1
31978: PPUSH
31979: LD_INT 2
31981: PPUSH
31982: CALL_OW 336
// end ;
31986: GO 31951
31988: POP
31989: POP
// end ;
31990: PPOPN 2
31992: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31993: LD_EXP 47
31997: IFFALSE 32005
31999: PUSH
32000: LD_EXP 100
32004: AND
32005: IFFALSE 32295
32007: GO 32009
32009: DISABLE
32010: LD_INT 0
32012: PPUSH
32013: PPUSH
32014: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32015: LD_OWVAR 2
32019: PPUSH
32020: LD_INT 9
32022: PPUSH
32023: LD_INT 1
32025: PPUSH
32026: LD_INT 1
32028: PPUSH
32029: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32033: LD_INT 9
32035: PPUSH
32036: LD_OWVAR 2
32040: PPUSH
32041: CALL_OW 343
// uc_side := 9 ;
32045: LD_ADDR_OWVAR 20
32049: PUSH
32050: LD_INT 9
32052: ST_TO_ADDR
// uc_nation := 2 ;
32053: LD_ADDR_OWVAR 21
32057: PUSH
32058: LD_INT 2
32060: ST_TO_ADDR
// hc_name := Dark Warrior ;
32061: LD_ADDR_OWVAR 26
32065: PUSH
32066: LD_STRING Dark Warrior
32068: ST_TO_ADDR
// hc_gallery :=  ;
32069: LD_ADDR_OWVAR 33
32073: PUSH
32074: LD_STRING 
32076: ST_TO_ADDR
// hc_noskilllimit := true ;
32077: LD_ADDR_OWVAR 76
32081: PUSH
32082: LD_INT 1
32084: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32085: LD_ADDR_OWVAR 31
32089: PUSH
32090: LD_INT 30
32092: PUSH
32093: LD_INT 30
32095: PUSH
32096: LD_INT 30
32098: PUSH
32099: LD_INT 30
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: ST_TO_ADDR
// un := CreateHuman ;
32108: LD_ADDR_VAR 0 3
32112: PUSH
32113: CALL_OW 44
32117: ST_TO_ADDR
// hc_noskilllimit := false ;
32118: LD_ADDR_OWVAR 76
32122: PUSH
32123: LD_INT 0
32125: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32126: LD_VAR 0 3
32130: PPUSH
32131: LD_INT 1
32133: PPUSH
32134: CALL_OW 51
// ToLua ( playRanger() ) ;
32138: LD_STRING playRanger()
32140: PPUSH
32141: CALL_OW 559
// p := 0 ;
32145: LD_ADDR_VAR 0 2
32149: PUSH
32150: LD_INT 0
32152: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32153: LD_INT 35
32155: PPUSH
32156: CALL_OW 67
// p := p + 1 ;
32160: LD_ADDR_VAR 0 2
32164: PUSH
32165: LD_VAR 0 2
32169: PUSH
32170: LD_INT 1
32172: PLUS
32173: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32174: LD_VAR 0 3
32178: PPUSH
32179: CALL_OW 256
32183: PUSH
32184: LD_INT 1000
32186: LESS
32187: IFFALSE 32201
// SetLives ( un , 1000 ) ;
32189: LD_VAR 0 3
32193: PPUSH
32194: LD_INT 1000
32196: PPUSH
32197: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32201: LD_VAR 0 3
32205: PPUSH
32206: LD_INT 81
32208: PUSH
32209: LD_OWVAR 2
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: LD_INT 91
32220: PUSH
32221: LD_VAR 0 3
32225: PUSH
32226: LD_INT 30
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: LIST
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PPUSH
32238: CALL_OW 69
32242: PPUSH
32243: LD_VAR 0 3
32247: PPUSH
32248: CALL_OW 74
32252: PPUSH
32253: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32257: LD_VAR 0 2
32261: PUSH
32262: LD_INT 80
32264: GREATER
32265: IFTRUE 32278
32267: PUSH
32268: LD_VAR 0 3
32272: PPUSH
32273: CALL_OW 301
32277: OR
32278: IFFALSE 32153
// if un then
32280: LD_VAR 0 3
32284: IFFALSE 32295
// RemoveUnit ( un ) ;
32286: LD_VAR 0 3
32290: PPUSH
32291: CALL_OW 64
// end ;
32295: PPOPN 3
32297: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32298: LD_EXP 101
32302: IFFALSE 32418
32304: GO 32306
32306: DISABLE
32307: LD_INT 0
32309: PPUSH
32310: PPUSH
32311: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32312: LD_ADDR_VAR 0 2
32316: PUSH
32317: LD_INT 81
32319: PUSH
32320: LD_OWVAR 2
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 21
32331: PUSH
32332: LD_INT 1
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PPUSH
32343: CALL_OW 69
32347: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32348: LD_STRING playComputer()
32350: PPUSH
32351: CALL_OW 559
// if not tmp then
32355: LD_VAR 0 2
32359: NOT
32360: IFFALSE 32364
// exit ;
32362: GO 32418
// for i in tmp do
32364: LD_ADDR_VAR 0 1
32368: PUSH
32369: LD_VAR 0 2
32373: PUSH
32374: FOR_IN
32375: IFFALSE 32416
// for j := 1 to 4 do
32377: LD_ADDR_VAR 0 3
32381: PUSH
32382: DOUBLE
32383: LD_INT 1
32385: DEC
32386: ST_TO_ADDR
32387: LD_INT 4
32389: PUSH
32390: FOR_TO
32391: IFFALSE 32412
// SetSkill ( i , j , 10 ) ;
32393: LD_VAR 0 1
32397: PPUSH
32398: LD_VAR 0 3
32402: PPUSH
32403: LD_INT 10
32405: PPUSH
32406: CALL_OW 237
32410: GO 32390
32412: POP
32413: POP
32414: GO 32374
32416: POP
32417: POP
// end ;
32418: PPOPN 3
32420: END
// every 0 0$1 trigger s30 do var i , tmp ;
32421: LD_EXP 102
32425: IFFALSE 32494
32427: GO 32429
32429: DISABLE
32430: LD_INT 0
32432: PPUSH
32433: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32434: LD_ADDR_VAR 0 2
32438: PUSH
32439: LD_INT 22
32441: PUSH
32442: LD_OWVAR 2
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PPUSH
32451: CALL_OW 69
32455: ST_TO_ADDR
// if not tmp then
32456: LD_VAR 0 2
32460: NOT
32461: IFFALSE 32465
// exit ;
32463: GO 32494
// for i in tmp do
32465: LD_ADDR_VAR 0 1
32469: PUSH
32470: LD_VAR 0 2
32474: PUSH
32475: FOR_IN
32476: IFFALSE 32492
// SetLives ( i , 300 ) ;
32478: LD_VAR 0 1
32482: PPUSH
32483: LD_INT 300
32485: PPUSH
32486: CALL_OW 234
32490: GO 32475
32492: POP
32493: POP
// end ;
32494: PPOPN 2
32496: END
// every 0 0$1 trigger s60 do var i , tmp ;
32497: LD_EXP 103
32501: IFFALSE 32570
32503: GO 32505
32505: DISABLE
32506: LD_INT 0
32508: PPUSH
32509: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32510: LD_ADDR_VAR 0 2
32514: PUSH
32515: LD_INT 22
32517: PUSH
32518: LD_OWVAR 2
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PPUSH
32527: CALL_OW 69
32531: ST_TO_ADDR
// if not tmp then
32532: LD_VAR 0 2
32536: NOT
32537: IFFALSE 32541
// exit ;
32539: GO 32570
// for i in tmp do
32541: LD_ADDR_VAR 0 1
32545: PUSH
32546: LD_VAR 0 2
32550: PUSH
32551: FOR_IN
32552: IFFALSE 32568
// SetLives ( i , 600 ) ;
32554: LD_VAR 0 1
32558: PPUSH
32559: LD_INT 600
32561: PPUSH
32562: CALL_OW 234
32566: GO 32551
32568: POP
32569: POP
// end ;
32570: PPOPN 2
32572: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32573: LD_INT 0
32575: PPUSH
// case cmd of 301 :
32576: LD_VAR 0 1
32580: PUSH
32581: LD_INT 301
32583: DOUBLE
32584: EQUAL
32585: IFTRUE 32589
32587: GO 32621
32589: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32590: LD_VAR 0 6
32594: PPUSH
32595: LD_VAR 0 7
32599: PPUSH
32600: LD_VAR 0 8
32604: PPUSH
32605: LD_VAR 0 4
32609: PPUSH
32610: LD_VAR 0 5
32614: PPUSH
32615: CALL 33834 0 5
32619: GO 32742
32621: LD_INT 302
32623: DOUBLE
32624: EQUAL
32625: IFTRUE 32629
32627: GO 32666
32629: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32630: LD_VAR 0 6
32634: PPUSH
32635: LD_VAR 0 7
32639: PPUSH
32640: LD_VAR 0 8
32644: PPUSH
32645: LD_VAR 0 9
32649: PPUSH
32650: LD_VAR 0 4
32654: PPUSH
32655: LD_VAR 0 5
32659: PPUSH
32660: CALL 33925 0 6
32664: GO 32742
32666: LD_INT 303
32668: DOUBLE
32669: EQUAL
32670: IFTRUE 32674
32672: GO 32711
32674: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32675: LD_VAR 0 6
32679: PPUSH
32680: LD_VAR 0 7
32684: PPUSH
32685: LD_VAR 0 8
32689: PPUSH
32690: LD_VAR 0 9
32694: PPUSH
32695: LD_VAR 0 4
32699: PPUSH
32700: LD_VAR 0 5
32704: PPUSH
32705: CALL 32747 0 6
32709: GO 32742
32711: LD_INT 304
32713: DOUBLE
32714: EQUAL
32715: IFTRUE 32719
32717: GO 32741
32719: POP
// hHackTeleport ( unit , x , y ) ; end ;
32720: LD_VAR 0 2
32724: PPUSH
32725: LD_VAR 0 4
32729: PPUSH
32730: LD_VAR 0 5
32734: PPUSH
32735: CALL 34518 0 3
32739: GO 32742
32741: POP
// end ;
32742: LD_VAR 0 12
32746: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32747: LD_INT 0
32749: PPUSH
32750: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32751: LD_VAR 0 1
32755: PUSH
32756: LD_INT 1
32758: LESS
32759: IFTRUE 32771
32761: PUSH
32762: LD_VAR 0 1
32766: PUSH
32767: LD_INT 3
32769: GREATER
32770: OR
32771: IFTRUE 32789
32773: PUSH
32774: LD_VAR 0 5
32778: PPUSH
32779: LD_VAR 0 6
32783: PPUSH
32784: CALL_OW 428
32788: OR
32789: IFFALSE 32793
// exit ;
32791: GO 33521
// uc_side := your_side ;
32793: LD_ADDR_OWVAR 20
32797: PUSH
32798: LD_OWVAR 2
32802: ST_TO_ADDR
// uc_nation := nation ;
32803: LD_ADDR_OWVAR 21
32807: PUSH
32808: LD_VAR 0 1
32812: ST_TO_ADDR
// bc_level = 1 ;
32813: LD_ADDR_OWVAR 43
32817: PUSH
32818: LD_INT 1
32820: ST_TO_ADDR
// case btype of 1 :
32821: LD_VAR 0 2
32825: PUSH
32826: LD_INT 1
32828: DOUBLE
32829: EQUAL
32830: IFTRUE 32834
32832: GO 32845
32834: POP
// bc_type := b_depot ; 2 :
32835: LD_ADDR_OWVAR 42
32839: PUSH
32840: LD_INT 0
32842: ST_TO_ADDR
32843: GO 33465
32845: LD_INT 2
32847: DOUBLE
32848: EQUAL
32849: IFTRUE 32853
32851: GO 32864
32853: POP
// bc_type := b_warehouse ; 3 :
32854: LD_ADDR_OWVAR 42
32858: PUSH
32859: LD_INT 1
32861: ST_TO_ADDR
32862: GO 33465
32864: LD_INT 3
32866: DOUBLE
32867: EQUAL
32868: IFTRUE 32872
32870: GO 32883
32872: POP
// bc_type := b_lab ; 4 .. 9 :
32873: LD_ADDR_OWVAR 42
32877: PUSH
32878: LD_INT 6
32880: ST_TO_ADDR
32881: GO 33465
32883: LD_INT 4
32885: DOUBLE
32886: GREATEREQUAL
32887: IFFALSE 32895
32889: LD_INT 9
32891: DOUBLE
32892: LESSEQUAL
32893: IFTRUE 32897
32895: GO 32957
32897: POP
// begin bc_type := b_lab_half ;
32898: LD_ADDR_OWVAR 42
32902: PUSH
32903: LD_INT 7
32905: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32906: LD_ADDR_OWVAR 44
32910: PUSH
32911: LD_INT 10
32913: PUSH
32914: LD_INT 11
32916: PUSH
32917: LD_INT 12
32919: PUSH
32920: LD_INT 15
32922: PUSH
32923: LD_INT 14
32925: PUSH
32926: LD_INT 13
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: PUSH
32937: LD_VAR 0 2
32941: PUSH
32942: LD_INT 3
32944: MINUS
32945: ARRAY
32946: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32947: LD_ADDR_OWVAR 45
32951: PUSH
32952: LD_INT 9
32954: ST_TO_ADDR
// end ; 10 .. 13 :
32955: GO 33465
32957: LD_INT 10
32959: DOUBLE
32960: GREATEREQUAL
32961: IFFALSE 32969
32963: LD_INT 13
32965: DOUBLE
32966: LESSEQUAL
32967: IFTRUE 32971
32969: GO 33048
32971: POP
// begin bc_type := b_lab_full ;
32972: LD_ADDR_OWVAR 42
32976: PUSH
32977: LD_INT 8
32979: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32980: LD_ADDR_OWVAR 44
32984: PUSH
32985: LD_INT 10
32987: PUSH
32988: LD_INT 12
32990: PUSH
32991: LD_INT 14
32993: PUSH
32994: LD_INT 13
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: LIST
33001: LIST
33002: PUSH
33003: LD_VAR 0 2
33007: PUSH
33008: LD_INT 9
33010: MINUS
33011: ARRAY
33012: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33013: LD_ADDR_OWVAR 45
33017: PUSH
33018: LD_INT 11
33020: PUSH
33021: LD_INT 15
33023: PUSH
33024: LD_INT 12
33026: PUSH
33027: LD_INT 15
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: PUSH
33036: LD_VAR 0 2
33040: PUSH
33041: LD_INT 9
33043: MINUS
33044: ARRAY
33045: ST_TO_ADDR
// end ; 14 :
33046: GO 33465
33048: LD_INT 14
33050: DOUBLE
33051: EQUAL
33052: IFTRUE 33056
33054: GO 33067
33056: POP
// bc_type := b_workshop ; 15 :
33057: LD_ADDR_OWVAR 42
33061: PUSH
33062: LD_INT 2
33064: ST_TO_ADDR
33065: GO 33465
33067: LD_INT 15
33069: DOUBLE
33070: EQUAL
33071: IFTRUE 33075
33073: GO 33086
33075: POP
// bc_type := b_factory ; 16 :
33076: LD_ADDR_OWVAR 42
33080: PUSH
33081: LD_INT 3
33083: ST_TO_ADDR
33084: GO 33465
33086: LD_INT 16
33088: DOUBLE
33089: EQUAL
33090: IFTRUE 33094
33092: GO 33105
33094: POP
// bc_type := b_ext_gun ; 17 :
33095: LD_ADDR_OWVAR 42
33099: PUSH
33100: LD_INT 17
33102: ST_TO_ADDR
33103: GO 33465
33105: LD_INT 17
33107: DOUBLE
33108: EQUAL
33109: IFTRUE 33113
33111: GO 33141
33113: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33114: LD_ADDR_OWVAR 42
33118: PUSH
33119: LD_INT 19
33121: PUSH
33122: LD_INT 23
33124: PUSH
33125: LD_INT 19
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: LIST
33132: PUSH
33133: LD_VAR 0 1
33137: ARRAY
33138: ST_TO_ADDR
33139: GO 33465
33141: LD_INT 18
33143: DOUBLE
33144: EQUAL
33145: IFTRUE 33149
33147: GO 33160
33149: POP
// bc_type := b_ext_radar ; 19 :
33150: LD_ADDR_OWVAR 42
33154: PUSH
33155: LD_INT 20
33157: ST_TO_ADDR
33158: GO 33465
33160: LD_INT 19
33162: DOUBLE
33163: EQUAL
33164: IFTRUE 33168
33166: GO 33179
33168: POP
// bc_type := b_ext_radio ; 20 :
33169: LD_ADDR_OWVAR 42
33173: PUSH
33174: LD_INT 22
33176: ST_TO_ADDR
33177: GO 33465
33179: LD_INT 20
33181: DOUBLE
33182: EQUAL
33183: IFTRUE 33187
33185: GO 33198
33187: POP
// bc_type := b_ext_siberium ; 21 :
33188: LD_ADDR_OWVAR 42
33192: PUSH
33193: LD_INT 21
33195: ST_TO_ADDR
33196: GO 33465
33198: LD_INT 21
33200: DOUBLE
33201: EQUAL
33202: IFTRUE 33206
33204: GO 33217
33206: POP
// bc_type := b_ext_computer ; 22 :
33207: LD_ADDR_OWVAR 42
33211: PUSH
33212: LD_INT 24
33214: ST_TO_ADDR
33215: GO 33465
33217: LD_INT 22
33219: DOUBLE
33220: EQUAL
33221: IFTRUE 33225
33223: GO 33236
33225: POP
// bc_type := b_ext_track ; 23 :
33226: LD_ADDR_OWVAR 42
33230: PUSH
33231: LD_INT 16
33233: ST_TO_ADDR
33234: GO 33465
33236: LD_INT 23
33238: DOUBLE
33239: EQUAL
33240: IFTRUE 33244
33242: GO 33255
33244: POP
// bc_type := b_ext_laser ; 24 :
33245: LD_ADDR_OWVAR 42
33249: PUSH
33250: LD_INT 25
33252: ST_TO_ADDR
33253: GO 33465
33255: LD_INT 24
33257: DOUBLE
33258: EQUAL
33259: IFTRUE 33263
33261: GO 33274
33263: POP
// bc_type := b_control_tower ; 25 :
33264: LD_ADDR_OWVAR 42
33268: PUSH
33269: LD_INT 36
33271: ST_TO_ADDR
33272: GO 33465
33274: LD_INT 25
33276: DOUBLE
33277: EQUAL
33278: IFTRUE 33282
33280: GO 33293
33282: POP
// bc_type := b_breastwork ; 26 :
33283: LD_ADDR_OWVAR 42
33287: PUSH
33288: LD_INT 31
33290: ST_TO_ADDR
33291: GO 33465
33293: LD_INT 26
33295: DOUBLE
33296: EQUAL
33297: IFTRUE 33301
33299: GO 33312
33301: POP
// bc_type := b_bunker ; 27 :
33302: LD_ADDR_OWVAR 42
33306: PUSH
33307: LD_INT 32
33309: ST_TO_ADDR
33310: GO 33465
33312: LD_INT 27
33314: DOUBLE
33315: EQUAL
33316: IFTRUE 33320
33318: GO 33331
33320: POP
// bc_type := b_turret ; 28 :
33321: LD_ADDR_OWVAR 42
33325: PUSH
33326: LD_INT 33
33328: ST_TO_ADDR
33329: GO 33465
33331: LD_INT 28
33333: DOUBLE
33334: EQUAL
33335: IFTRUE 33339
33337: GO 33350
33339: POP
// bc_type := b_armoury ; 29 :
33340: LD_ADDR_OWVAR 42
33344: PUSH
33345: LD_INT 4
33347: ST_TO_ADDR
33348: GO 33465
33350: LD_INT 29
33352: DOUBLE
33353: EQUAL
33354: IFTRUE 33358
33356: GO 33369
33358: POP
// bc_type := b_barracks ; 30 :
33359: LD_ADDR_OWVAR 42
33363: PUSH
33364: LD_INT 5
33366: ST_TO_ADDR
33367: GO 33465
33369: LD_INT 30
33371: DOUBLE
33372: EQUAL
33373: IFTRUE 33377
33375: GO 33388
33377: POP
// bc_type := b_solar_power ; 31 :
33378: LD_ADDR_OWVAR 42
33382: PUSH
33383: LD_INT 27
33385: ST_TO_ADDR
33386: GO 33465
33388: LD_INT 31
33390: DOUBLE
33391: EQUAL
33392: IFTRUE 33396
33394: GO 33407
33396: POP
// bc_type := b_oil_power ; 32 :
33397: LD_ADDR_OWVAR 42
33401: PUSH
33402: LD_INT 26
33404: ST_TO_ADDR
33405: GO 33465
33407: LD_INT 32
33409: DOUBLE
33410: EQUAL
33411: IFTRUE 33415
33413: GO 33426
33415: POP
// bc_type := b_siberite_power ; 33 :
33416: LD_ADDR_OWVAR 42
33420: PUSH
33421: LD_INT 28
33423: ST_TO_ADDR
33424: GO 33465
33426: LD_INT 33
33428: DOUBLE
33429: EQUAL
33430: IFTRUE 33434
33432: GO 33445
33434: POP
// bc_type := b_oil_mine ; 34 :
33435: LD_ADDR_OWVAR 42
33439: PUSH
33440: LD_INT 29
33442: ST_TO_ADDR
33443: GO 33465
33445: LD_INT 34
33447: DOUBLE
33448: EQUAL
33449: IFTRUE 33453
33451: GO 33464
33453: POP
// bc_type := b_siberite_mine ; end ;
33454: LD_ADDR_OWVAR 42
33458: PUSH
33459: LD_INT 30
33461: ST_TO_ADDR
33462: GO 33465
33464: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33465: LD_ADDR_VAR 0 8
33469: PUSH
33470: LD_VAR 0 5
33474: PPUSH
33475: LD_VAR 0 6
33479: PPUSH
33480: LD_VAR 0 3
33484: PPUSH
33485: CALL_OW 47
33489: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33490: LD_OWVAR 42
33494: PUSH
33495: LD_INT 32
33497: PUSH
33498: LD_INT 33
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: IN
33505: IFFALSE 33521
// PlaceWeaponTurret ( b , weapon ) ;
33507: LD_VAR 0 8
33511: PPUSH
33512: LD_VAR 0 4
33516: PPUSH
33517: CALL_OW 431
// end ;
33521: LD_VAR 0 7
33525: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33526: LD_INT 0
33528: PPUSH
33529: PPUSH
33530: PPUSH
33531: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33532: LD_ADDR_VAR 0 4
33536: PUSH
33537: LD_INT 22
33539: PUSH
33540: LD_OWVAR 2
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 2
33551: PUSH
33552: LD_INT 30
33554: PUSH
33555: LD_INT 0
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: PUSH
33562: LD_INT 30
33564: PUSH
33565: LD_INT 1
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: LIST
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PPUSH
33581: CALL_OW 69
33585: ST_TO_ADDR
// if not tmp then
33586: LD_VAR 0 4
33590: NOT
33591: IFFALSE 33595
// exit ;
33593: GO 33654
// for i in tmp do
33595: LD_ADDR_VAR 0 2
33599: PUSH
33600: LD_VAR 0 4
33604: PUSH
33605: FOR_IN
33606: IFFALSE 33652
// for j = 1 to 3 do
33608: LD_ADDR_VAR 0 3
33612: PUSH
33613: DOUBLE
33614: LD_INT 1
33616: DEC
33617: ST_TO_ADDR
33618: LD_INT 3
33620: PUSH
33621: FOR_TO
33622: IFFALSE 33648
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33624: LD_VAR 0 2
33628: PPUSH
33629: CALL_OW 274
33633: PPUSH
33634: LD_VAR 0 3
33638: PPUSH
33639: LD_INT 99999
33641: PPUSH
33642: CALL_OW 277
33646: GO 33621
33648: POP
33649: POP
33650: GO 33605
33652: POP
33653: POP
// end ;
33654: LD_VAR 0 1
33658: RET
// export function hHackSetLevel10 ; var i , j ; begin
33659: LD_INT 0
33661: PPUSH
33662: PPUSH
33663: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33664: LD_ADDR_VAR 0 2
33668: PUSH
33669: LD_INT 21
33671: PUSH
33672: LD_INT 1
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PPUSH
33679: CALL_OW 69
33683: PUSH
33684: FOR_IN
33685: IFFALSE 33737
// if IsSelected ( i ) then
33687: LD_VAR 0 2
33691: PPUSH
33692: CALL_OW 306
33696: IFFALSE 33735
// begin for j := 1 to 4 do
33698: LD_ADDR_VAR 0 3
33702: PUSH
33703: DOUBLE
33704: LD_INT 1
33706: DEC
33707: ST_TO_ADDR
33708: LD_INT 4
33710: PUSH
33711: FOR_TO
33712: IFFALSE 33733
// SetSkill ( i , j , 10 ) ;
33714: LD_VAR 0 2
33718: PPUSH
33719: LD_VAR 0 3
33723: PPUSH
33724: LD_INT 10
33726: PPUSH
33727: CALL_OW 237
33731: GO 33711
33733: POP
33734: POP
// end ;
33735: GO 33684
33737: POP
33738: POP
// end ;
33739: LD_VAR 0 1
33743: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33744: LD_INT 0
33746: PPUSH
33747: PPUSH
33748: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33749: LD_ADDR_VAR 0 2
33753: PUSH
33754: LD_INT 22
33756: PUSH
33757: LD_OWVAR 2
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 21
33768: PUSH
33769: LD_INT 1
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PPUSH
33780: CALL_OW 69
33784: PUSH
33785: FOR_IN
33786: IFFALSE 33827
// begin for j := 1 to 4 do
33788: LD_ADDR_VAR 0 3
33792: PUSH
33793: DOUBLE
33794: LD_INT 1
33796: DEC
33797: ST_TO_ADDR
33798: LD_INT 4
33800: PUSH
33801: FOR_TO
33802: IFFALSE 33823
// SetSkill ( i , j , 10 ) ;
33804: LD_VAR 0 2
33808: PPUSH
33809: LD_VAR 0 3
33813: PPUSH
33814: LD_INT 10
33816: PPUSH
33817: CALL_OW 237
33821: GO 33801
33823: POP
33824: POP
// end ;
33825: GO 33785
33827: POP
33828: POP
// end ;
33829: LD_VAR 0 1
33833: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33834: LD_INT 0
33836: PPUSH
// uc_side := your_side ;
33837: LD_ADDR_OWVAR 20
33841: PUSH
33842: LD_OWVAR 2
33846: ST_TO_ADDR
// uc_nation := nation ;
33847: LD_ADDR_OWVAR 21
33851: PUSH
33852: LD_VAR 0 1
33856: ST_TO_ADDR
// InitHc ;
33857: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33861: LD_INT 0
33863: PPUSH
33864: LD_VAR 0 2
33868: PPUSH
33869: LD_VAR 0 3
33873: PPUSH
33874: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33878: LD_VAR 0 4
33882: PPUSH
33883: LD_VAR 0 5
33887: PPUSH
33888: CALL_OW 428
33892: PUSH
33893: LD_INT 0
33895: EQUAL
33896: IFFALSE 33920
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33898: CALL_OW 44
33902: PPUSH
33903: LD_VAR 0 4
33907: PPUSH
33908: LD_VAR 0 5
33912: PPUSH
33913: LD_INT 1
33915: PPUSH
33916: CALL_OW 48
// end ;
33920: LD_VAR 0 6
33924: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33925: LD_INT 0
33927: PPUSH
33928: PPUSH
// uc_side := your_side ;
33929: LD_ADDR_OWVAR 20
33933: PUSH
33934: LD_OWVAR 2
33938: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33939: LD_VAR 0 1
33943: PUSH
33944: LD_INT 1
33946: PUSH
33947: LD_INT 2
33949: PUSH
33950: LD_INT 3
33952: PUSH
33953: LD_INT 4
33955: PUSH
33956: LD_INT 5
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: IN
33966: IFFALSE 33978
// uc_nation := nation_american else
33968: LD_ADDR_OWVAR 21
33972: PUSH
33973: LD_INT 1
33975: ST_TO_ADDR
33976: GO 34021
// if chassis in [ 11 , 12 , 13 , 14 ] then
33978: LD_VAR 0 1
33982: PUSH
33983: LD_INT 11
33985: PUSH
33986: LD_INT 12
33988: PUSH
33989: LD_INT 13
33991: PUSH
33992: LD_INT 14
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: IN
34001: IFFALSE 34013
// uc_nation := nation_arabian else
34003: LD_ADDR_OWVAR 21
34007: PUSH
34008: LD_INT 2
34010: ST_TO_ADDR
34011: GO 34021
// uc_nation := nation_russian ;
34013: LD_ADDR_OWVAR 21
34017: PUSH
34018: LD_INT 3
34020: ST_TO_ADDR
// vc_chassis := chassis ;
34021: LD_ADDR_OWVAR 37
34025: PUSH
34026: LD_VAR 0 1
34030: ST_TO_ADDR
// vc_engine := engine ;
34031: LD_ADDR_OWVAR 39
34035: PUSH
34036: LD_VAR 0 2
34040: ST_TO_ADDR
// vc_control := control ;
34041: LD_ADDR_OWVAR 38
34045: PUSH
34046: LD_VAR 0 3
34050: ST_TO_ADDR
// vc_weapon := weapon ;
34051: LD_ADDR_OWVAR 40
34055: PUSH
34056: LD_VAR 0 4
34060: ST_TO_ADDR
// un := CreateVehicle ;
34061: LD_ADDR_VAR 0 8
34065: PUSH
34066: CALL_OW 45
34070: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34071: LD_VAR 0 8
34075: PPUSH
34076: LD_INT 0
34078: PPUSH
34079: LD_INT 5
34081: PPUSH
34082: CALL_OW 12
34086: PPUSH
34087: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34091: LD_VAR 0 8
34095: PPUSH
34096: LD_VAR 0 5
34100: PPUSH
34101: LD_VAR 0 6
34105: PPUSH
34106: LD_INT 1
34108: PPUSH
34109: CALL_OW 48
// end ;
34113: LD_VAR 0 7
34117: RET
// export hInvincible ; every 1 do
34118: GO 34120
34120: DISABLE
// hInvincible := [ ] ;
34121: LD_ADDR_EXP 104
34125: PUSH
34126: EMPTY
34127: ST_TO_ADDR
34128: END
// every 10 do var i ;
34129: GO 34131
34131: DISABLE
34132: LD_INT 0
34134: PPUSH
// begin enable ;
34135: ENABLE
// if not hInvincible then
34136: LD_EXP 104
34140: NOT
34141: IFFALSE 34145
// exit ;
34143: GO 34189
// for i in hInvincible do
34145: LD_ADDR_VAR 0 1
34149: PUSH
34150: LD_EXP 104
34154: PUSH
34155: FOR_IN
34156: IFFALSE 34187
// if GetLives ( i ) < 1000 then
34158: LD_VAR 0 1
34162: PPUSH
34163: CALL_OW 256
34167: PUSH
34168: LD_INT 1000
34170: LESS
34171: IFFALSE 34185
// SetLives ( i , 1000 ) ;
34173: LD_VAR 0 1
34177: PPUSH
34178: LD_INT 1000
34180: PPUSH
34181: CALL_OW 234
34185: GO 34155
34187: POP
34188: POP
// end ;
34189: PPOPN 1
34191: END
// export function hHackInvincible ; var i ; begin
34192: LD_INT 0
34194: PPUSH
34195: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34196: LD_ADDR_VAR 0 2
34200: PUSH
34201: LD_INT 2
34203: PUSH
34204: LD_INT 21
34206: PUSH
34207: LD_INT 1
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: PUSH
34214: LD_INT 21
34216: PUSH
34217: LD_INT 2
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: LIST
34228: PPUSH
34229: CALL_OW 69
34233: PUSH
34234: FOR_IN
34235: IFFALSE 34296
// if IsSelected ( i ) then
34237: LD_VAR 0 2
34241: PPUSH
34242: CALL_OW 306
34246: IFFALSE 34294
// begin if i in hInvincible then
34248: LD_VAR 0 2
34252: PUSH
34253: LD_EXP 104
34257: IN
34258: IFFALSE 34278
// hInvincible := hInvincible diff i else
34260: LD_ADDR_EXP 104
34264: PUSH
34265: LD_EXP 104
34269: PUSH
34270: LD_VAR 0 2
34274: DIFF
34275: ST_TO_ADDR
34276: GO 34294
// hInvincible := hInvincible union i ;
34278: LD_ADDR_EXP 104
34282: PUSH
34283: LD_EXP 104
34287: PUSH
34288: LD_VAR 0 2
34292: UNION
34293: ST_TO_ADDR
// end ;
34294: GO 34234
34296: POP
34297: POP
// end ;
34298: LD_VAR 0 1
34302: RET
// export function hHackInvisible ; var i , j ; begin
34303: LD_INT 0
34305: PPUSH
34306: PPUSH
34307: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34308: LD_ADDR_VAR 0 2
34312: PUSH
34313: LD_INT 21
34315: PUSH
34316: LD_INT 1
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: PPUSH
34323: CALL_OW 69
34327: PUSH
34328: FOR_IN
34329: IFFALSE 34353
// if IsSelected ( i ) then
34331: LD_VAR 0 2
34335: PPUSH
34336: CALL_OW 306
34340: IFFALSE 34351
// ComForceInvisible ( i ) ;
34342: LD_VAR 0 2
34346: PPUSH
34347: CALL_OW 496
34351: GO 34328
34353: POP
34354: POP
// end ;
34355: LD_VAR 0 1
34359: RET
// export function hHackChangeYourSide ; begin
34360: LD_INT 0
34362: PPUSH
// if your_side = 8 then
34363: LD_OWVAR 2
34367: PUSH
34368: LD_INT 8
34370: EQUAL
34371: IFFALSE 34383
// your_side := 0 else
34373: LD_ADDR_OWVAR 2
34377: PUSH
34378: LD_INT 0
34380: ST_TO_ADDR
34381: GO 34397
// your_side := your_side + 1 ;
34383: LD_ADDR_OWVAR 2
34387: PUSH
34388: LD_OWVAR 2
34392: PUSH
34393: LD_INT 1
34395: PLUS
34396: ST_TO_ADDR
// end ;
34397: LD_VAR 0 1
34401: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34402: LD_INT 0
34404: PPUSH
34405: PPUSH
34406: PPUSH
// for i in all_units do
34407: LD_ADDR_VAR 0 2
34411: PUSH
34412: LD_OWVAR 3
34416: PUSH
34417: FOR_IN
34418: IFFALSE 34496
// if IsSelected ( i ) then
34420: LD_VAR 0 2
34424: PPUSH
34425: CALL_OW 306
34429: IFFALSE 34494
// begin j := GetSide ( i ) ;
34431: LD_ADDR_VAR 0 3
34435: PUSH
34436: LD_VAR 0 2
34440: PPUSH
34441: CALL_OW 255
34445: ST_TO_ADDR
// if j = 8 then
34446: LD_VAR 0 3
34450: PUSH
34451: LD_INT 8
34453: EQUAL
34454: IFFALSE 34466
// j := 0 else
34456: LD_ADDR_VAR 0 3
34460: PUSH
34461: LD_INT 0
34463: ST_TO_ADDR
34464: GO 34480
// j := j + 1 ;
34466: LD_ADDR_VAR 0 3
34470: PUSH
34471: LD_VAR 0 3
34475: PUSH
34476: LD_INT 1
34478: PLUS
34479: ST_TO_ADDR
// SetSide ( i , j ) ;
34480: LD_VAR 0 2
34484: PPUSH
34485: LD_VAR 0 3
34489: PPUSH
34490: CALL_OW 235
// end ;
34494: GO 34417
34496: POP
34497: POP
// end ;
34498: LD_VAR 0 1
34502: RET
// export function hHackFog ; begin
34503: LD_INT 0
34505: PPUSH
// FogOff ( true ) ;
34506: LD_INT 1
34508: PPUSH
34509: CALL_OW 344
// end ;
34513: LD_VAR 0 1
34517: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34518: LD_INT 0
34520: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34521: LD_VAR 0 1
34525: PPUSH
34526: LD_VAR 0 2
34530: PPUSH
34531: LD_VAR 0 3
34535: PPUSH
34536: LD_INT 1
34538: PPUSH
34539: LD_INT 1
34541: PPUSH
34542: CALL_OW 483
// CenterOnXY ( x , y ) ;
34546: LD_VAR 0 2
34550: PPUSH
34551: LD_VAR 0 3
34555: PPUSH
34556: CALL_OW 84
// end ;
34560: LD_VAR 0 4
34564: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34565: LD_INT 0
34567: PPUSH
34568: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34569: LD_VAR 0 1
34573: NOT
34574: IFTRUE 34593
34576: PUSH
34577: LD_VAR 0 2
34581: PPUSH
34582: LD_VAR 0 3
34586: PPUSH
34587: CALL_OW 488
34591: NOT
34592: OR
34593: IFTRUE 34628
34595: PUSH
34596: LD_VAR 0 1
34600: PPUSH
34601: CALL_OW 266
34605: PUSH
34606: LD_INT 3
34608: NONEQUAL
34609: IFFALSE 34627
34611: PUSH
34612: LD_VAR 0 1
34616: PPUSH
34617: CALL_OW 247
34621: PUSH
34622: LD_INT 1
34624: EQUAL
34625: NOT
34626: AND
34627: OR
34628: IFFALSE 34632
// exit ;
34630: GO 34914
// if GetType ( factory ) = unit_human then
34632: LD_VAR 0 1
34636: PPUSH
34637: CALL_OW 247
34641: PUSH
34642: LD_INT 1
34644: EQUAL
34645: IFFALSE 34662
// factory := IsInUnit ( factory ) ;
34647: LD_ADDR_VAR 0 1
34651: PUSH
34652: LD_VAR 0 1
34656: PPUSH
34657: CALL_OW 310
34661: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34662: LD_VAR 0 1
34666: PPUSH
34667: CALL_OW 266
34671: PUSH
34672: LD_INT 3
34674: NONEQUAL
34675: IFFALSE 34679
// exit ;
34677: GO 34914
// for i := 1 to Count ( factoryWaypoints ) do
34679: LD_ADDR_VAR 0 5
34683: PUSH
34684: DOUBLE
34685: LD_INT 1
34687: DEC
34688: ST_TO_ADDR
34689: LD_EXP 105
34693: PPUSH
34694: CALL 43646 0 1
34698: PUSH
34699: FOR_TO
34700: IFFALSE 34862
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
34702: LD_VAR 0 2
34706: PPUSH
34707: LD_VAR 0 3
34711: PPUSH
34712: CALL_OW 428
34716: PUSH
34717: LD_EXP 105
34721: PUSH
34722: LD_VAR 0 5
34726: ARRAY
34727: PUSH
34728: LD_INT 2
34730: ARRAY
34731: EQUAL
34732: IFFALSE 34764
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
34734: LD_ADDR_EXP 105
34738: PUSH
34739: LD_EXP 105
34743: PPUSH
34744: LD_VAR 0 5
34748: PPUSH
34749: CALL_OW 3
34753: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34754: CALL 34919 0 0
// exit ;
34758: POP
34759: POP
34760: GO 34914
// end else
34762: GO 34860
// if factory = factoryWaypoints [ i ] [ 2 ] then
34764: LD_VAR 0 1
34768: PUSH
34769: LD_EXP 105
34773: PUSH
34774: LD_VAR 0 5
34778: ARRAY
34779: PUSH
34780: LD_INT 2
34782: ARRAY
34783: EQUAL
34784: IFFALSE 34860
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
34786: LD_ADDR_EXP 105
34790: PUSH
34791: LD_EXP 105
34795: PPUSH
34796: LD_VAR 0 5
34800: PPUSH
34801: CALL_OW 3
34805: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
34806: LD_ADDR_EXP 105
34810: PUSH
34811: LD_EXP 105
34815: PPUSH
34816: LD_VAR 0 1
34820: PPUSH
34821: CALL_OW 255
34825: PUSH
34826: LD_VAR 0 1
34830: PUSH
34831: LD_VAR 0 2
34835: PUSH
34836: LD_VAR 0 3
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: PPUSH
34847: CALL 79578 0 2
34851: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34852: CALL 34919 0 0
// exit ;
34856: POP
34857: POP
34858: GO 34914
// end ; end ;
34860: GO 34699
34862: POP
34863: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
34864: LD_ADDR_EXP 105
34868: PUSH
34869: LD_EXP 105
34873: PPUSH
34874: LD_VAR 0 1
34878: PPUSH
34879: CALL_OW 255
34883: PUSH
34884: LD_VAR 0 1
34888: PUSH
34889: LD_VAR 0 2
34893: PUSH
34894: LD_VAR 0 3
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: PPUSH
34905: CALL 79578 0 2
34909: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34910: CALL 34919 0 0
// end ;
34914: LD_VAR 0 4
34918: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34919: LD_INT 0
34921: PPUSH
34922: PPUSH
34923: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34924: LD_STRING resetFactoryWaypoint();
34926: PPUSH
34927: CALL_OW 559
// if factoryWaypoints then
34931: LD_EXP 105
34935: IFFALSE 35056
// begin list := factoryWaypoints ;
34937: LD_ADDR_VAR 0 3
34941: PUSH
34942: LD_EXP 105
34946: ST_TO_ADDR
// for i := 1 to list do
34947: LD_ADDR_VAR 0 2
34951: PUSH
34952: DOUBLE
34953: LD_INT 1
34955: DEC
34956: ST_TO_ADDR
34957: LD_VAR 0 3
34961: PUSH
34962: FOR_TO
34963: IFFALSE 35054
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34965: LD_STRING setFactoryWaypointXY(
34967: PUSH
34968: LD_VAR 0 3
34972: PUSH
34973: LD_VAR 0 2
34977: ARRAY
34978: PUSH
34979: LD_INT 1
34981: ARRAY
34982: STR
34983: PUSH
34984: LD_STRING ,
34986: STR
34987: PUSH
34988: LD_VAR 0 3
34992: PUSH
34993: LD_VAR 0 2
34997: ARRAY
34998: PUSH
34999: LD_INT 2
35001: ARRAY
35002: STR
35003: PUSH
35004: LD_STRING ,
35006: STR
35007: PUSH
35008: LD_VAR 0 3
35012: PUSH
35013: LD_VAR 0 2
35017: ARRAY
35018: PUSH
35019: LD_INT 3
35021: ARRAY
35022: STR
35023: PUSH
35024: LD_STRING ,
35026: STR
35027: PUSH
35028: LD_VAR 0 3
35032: PUSH
35033: LD_VAR 0 2
35037: ARRAY
35038: PUSH
35039: LD_INT 4
35041: ARRAY
35042: STR
35043: PUSH
35044: LD_STRING )
35046: STR
35047: PPUSH
35048: CALL_OW 559
35052: GO 34962
35054: POP
35055: POP
// end ; end ;
35056: LD_VAR 0 1
35060: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
35061: LD_INT 0
35063: PPUSH
// if HexInfo ( x , y ) = warehouse then
35064: LD_VAR 0 2
35068: PPUSH
35069: LD_VAR 0 3
35073: PPUSH
35074: CALL_OW 428
35078: PUSH
35079: LD_VAR 0 1
35083: EQUAL
35084: IFFALSE 35111
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
35086: LD_ADDR_EXP 107
35090: PUSH
35091: LD_EXP 107
35095: PPUSH
35096: LD_VAR 0 1
35100: PPUSH
35101: LD_INT 0
35103: PPUSH
35104: CALL_OW 1
35108: ST_TO_ADDR
35109: GO 35162
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35111: LD_ADDR_EXP 107
35115: PUSH
35116: LD_EXP 107
35120: PPUSH
35121: LD_VAR 0 1
35125: PPUSH
35126: LD_VAR 0 1
35130: PPUSH
35131: CALL_OW 255
35135: PUSH
35136: LD_VAR 0 1
35140: PUSH
35141: LD_VAR 0 2
35145: PUSH
35146: LD_VAR 0 3
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: PPUSH
35157: CALL_OW 1
35161: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35162: CALL 35171 0 0
// end ;
35166: LD_VAR 0 4
35170: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35171: LD_INT 0
35173: PPUSH
35174: PPUSH
35175: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35176: LD_STRING resetWarehouseGatheringPoints();
35178: PPUSH
35179: CALL_OW 559
// if warehouseGatheringPoints then
35183: LD_EXP 107
35187: IFFALSE 35313
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35189: LD_ADDR_VAR 0 3
35193: PUSH
35194: LD_EXP 107
35198: PPUSH
35199: CALL 83512 0 1
35203: ST_TO_ADDR
// for i := 1 to list do
35204: LD_ADDR_VAR 0 2
35208: PUSH
35209: DOUBLE
35210: LD_INT 1
35212: DEC
35213: ST_TO_ADDR
35214: LD_VAR 0 3
35218: PUSH
35219: FOR_TO
35220: IFFALSE 35311
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35222: LD_STRING setWarehouseGatheringPointXY(
35224: PUSH
35225: LD_VAR 0 3
35229: PUSH
35230: LD_VAR 0 2
35234: ARRAY
35235: PUSH
35236: LD_INT 1
35238: ARRAY
35239: STR
35240: PUSH
35241: LD_STRING ,
35243: STR
35244: PUSH
35245: LD_VAR 0 3
35249: PUSH
35250: LD_VAR 0 2
35254: ARRAY
35255: PUSH
35256: LD_INT 2
35258: ARRAY
35259: STR
35260: PUSH
35261: LD_STRING ,
35263: STR
35264: PUSH
35265: LD_VAR 0 3
35269: PUSH
35270: LD_VAR 0 2
35274: ARRAY
35275: PUSH
35276: LD_INT 3
35278: ARRAY
35279: STR
35280: PUSH
35281: LD_STRING ,
35283: STR
35284: PUSH
35285: LD_VAR 0 3
35289: PUSH
35290: LD_VAR 0 2
35294: ARRAY
35295: PUSH
35296: LD_INT 4
35298: ARRAY
35299: STR
35300: PUSH
35301: LD_STRING )
35303: STR
35304: PPUSH
35305: CALL_OW 559
35309: GO 35219
35311: POP
35312: POP
// end ; end ;
35313: LD_VAR 0 1
35317: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35318: LD_EXP 107
35322: IFFALSE 36017
35324: GO 35326
35326: DISABLE
35327: LD_INT 0
35329: PPUSH
35330: PPUSH
35331: PPUSH
35332: PPUSH
35333: PPUSH
35334: PPUSH
35335: PPUSH
35336: PPUSH
35337: PPUSH
// begin enable ;
35338: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35339: LD_ADDR_VAR 0 3
35343: PUSH
35344: LD_EXP 107
35348: PPUSH
35349: CALL 83512 0 1
35353: ST_TO_ADDR
// if not list then
35354: LD_VAR 0 3
35358: NOT
35359: IFFALSE 35363
// exit ;
35361: GO 36017
// for i := 1 to list do
35363: LD_ADDR_VAR 0 1
35367: PUSH
35368: DOUBLE
35369: LD_INT 1
35371: DEC
35372: ST_TO_ADDR
35373: LD_VAR 0 3
35377: PUSH
35378: FOR_TO
35379: IFFALSE 36015
// begin depot := list [ i ] [ 2 ] ;
35381: LD_ADDR_VAR 0 8
35385: PUSH
35386: LD_VAR 0 3
35390: PUSH
35391: LD_VAR 0 1
35395: ARRAY
35396: PUSH
35397: LD_INT 2
35399: ARRAY
35400: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35401: LD_ADDR_VAR 0 5
35405: PUSH
35406: LD_VAR 0 3
35410: PUSH
35411: LD_VAR 0 1
35415: ARRAY
35416: PUSH
35417: LD_INT 1
35419: ARRAY
35420: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35421: LD_VAR 0 8
35425: PPUSH
35426: CALL_OW 301
35430: IFTRUE 35449
35432: PUSH
35433: LD_VAR 0 5
35437: PUSH
35438: LD_VAR 0 8
35442: PPUSH
35443: CALL_OW 255
35447: NONEQUAL
35448: OR
35449: IFFALSE 35478
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35451: LD_ADDR_EXP 107
35455: PUSH
35456: LD_EXP 107
35460: PPUSH
35461: LD_VAR 0 8
35465: PPUSH
35466: LD_INT 0
35468: PPUSH
35469: CALL_OW 1
35473: ST_TO_ADDR
// exit ;
35474: POP
35475: POP
35476: GO 36017
// end ; x := list [ i ] [ 3 ] ;
35478: LD_ADDR_VAR 0 6
35482: PUSH
35483: LD_VAR 0 3
35487: PUSH
35488: LD_VAR 0 1
35492: ARRAY
35493: PUSH
35494: LD_INT 3
35496: ARRAY
35497: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35498: LD_ADDR_VAR 0 7
35502: PUSH
35503: LD_VAR 0 3
35507: PUSH
35508: LD_VAR 0 1
35512: ARRAY
35513: PUSH
35514: LD_INT 4
35516: ARRAY
35517: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35518: LD_ADDR_VAR 0 9
35522: PUSH
35523: LD_VAR 0 6
35527: PPUSH
35528: LD_VAR 0 7
35532: PPUSH
35533: LD_INT 16
35535: PPUSH
35536: CALL 82086 0 3
35540: ST_TO_ADDR
// if not cratesNearbyPoint then
35541: LD_VAR 0 9
35545: NOT
35546: IFFALSE 35552
// exit ;
35548: POP
35549: POP
35550: GO 36017
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35552: LD_ADDR_VAR 0 4
35556: PUSH
35557: LD_INT 22
35559: PUSH
35560: LD_VAR 0 5
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 3
35571: PUSH
35572: LD_INT 60
35574: PUSH
35575: EMPTY
35576: LIST
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: PUSH
35582: LD_INT 91
35584: PUSH
35585: LD_VAR 0 8
35589: PUSH
35590: LD_INT 6
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: LIST
35597: PUSH
35598: LD_INT 2
35600: PUSH
35601: LD_INT 25
35603: PUSH
35604: LD_INT 2
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: LD_INT 25
35613: PUSH
35614: LD_INT 16
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: LIST
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: PPUSH
35632: CALL_OW 69
35636: PUSH
35637: LD_VAR 0 8
35641: PPUSH
35642: CALL_OW 313
35646: PPUSH
35647: LD_INT 3
35649: PUSH
35650: LD_INT 60
35652: PUSH
35653: EMPTY
35654: LIST
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: PUSH
35660: LD_INT 2
35662: PUSH
35663: LD_INT 25
35665: PUSH
35666: LD_INT 2
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: LD_INT 25
35675: PUSH
35676: LD_INT 16
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: LIST
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: PPUSH
35692: CALL_OW 72
35696: UNION
35697: ST_TO_ADDR
// if tmp then
35698: LD_VAR 0 4
35702: IFFALSE 35782
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35704: LD_ADDR_VAR 0 4
35708: PUSH
35709: LD_VAR 0 4
35713: PPUSH
35714: LD_INT 3
35716: PPUSH
35717: CALL 79893 0 2
35721: ST_TO_ADDR
// for j in tmp do
35722: LD_ADDR_VAR 0 2
35726: PUSH
35727: LD_VAR 0 4
35731: PUSH
35732: FOR_IN
35733: IFFALSE 35776
// begin if IsInUnit ( j ) then
35735: LD_VAR 0 2
35739: PPUSH
35740: CALL_OW 310
35744: IFFALSE 35755
// ComExit ( j ) ;
35746: LD_VAR 0 2
35750: PPUSH
35751: CALL 79976 0 1
// AddComCollect ( j , x , y ) ;
35755: LD_VAR 0 2
35759: PPUSH
35760: LD_VAR 0 6
35764: PPUSH
35765: LD_VAR 0 7
35769: PPUSH
35770: CALL_OW 177
// end ;
35774: GO 35732
35776: POP
35777: POP
// exit ;
35778: POP
35779: POP
35780: GO 36017
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35782: LD_ADDR_VAR 0 4
35786: PUSH
35787: LD_INT 22
35789: PUSH
35790: LD_VAR 0 5
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: LD_INT 91
35801: PUSH
35802: LD_VAR 0 8
35806: PUSH
35807: LD_INT 8
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: LIST
35814: PUSH
35815: LD_INT 2
35817: PUSH
35818: LD_INT 34
35820: PUSH
35821: LD_INT 12
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 34
35830: PUSH
35831: LD_INT 51
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PUSH
35838: LD_INT 34
35840: PUSH
35841: LD_INT 32
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: PUSH
35848: LD_INT 34
35850: PUSH
35851: LD_INT 89
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: LIST
35869: PPUSH
35870: CALL_OW 69
35874: ST_TO_ADDR
// if tmp then
35875: LD_VAR 0 4
35879: IFFALSE 36013
// begin for j in tmp do
35881: LD_ADDR_VAR 0 2
35885: PUSH
35886: LD_VAR 0 4
35890: PUSH
35891: FOR_IN
35892: IFFALSE 36011
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35894: LD_VAR 0 2
35898: PPUSH
35899: CALL_OW 262
35903: PUSH
35904: LD_INT 3
35906: EQUAL
35907: IFTRUE 35924
35909: PUSH
35910: LD_VAR 0 2
35914: PPUSH
35915: CALL_OW 261
35919: PUSH
35920: LD_INT 20
35922: GREATER
35923: OR
35924: IFFALSE 35938
35926: PUSH
35927: LD_VAR 0 2
35931: PPUSH
35932: CALL_OW 314
35936: NOT
35937: AND
35938: IFFALSE 35968
35940: PUSH
35941: LD_VAR 0 2
35945: PPUSH
35946: CALL_OW 263
35950: PUSH
35951: LD_INT 1
35953: NONEQUAL
35954: IFTRUE 35967
35956: PUSH
35957: LD_VAR 0 2
35961: PPUSH
35962: CALL_OW 311
35966: OR
35967: AND
35968: IFFALSE 36009
// begin ComCollect ( j , x , y ) ;
35970: LD_VAR 0 2
35974: PPUSH
35975: LD_VAR 0 6
35979: PPUSH
35980: LD_VAR 0 7
35984: PPUSH
35985: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35989: LD_VAR 0 2
35993: PPUSH
35994: LD_VAR 0 8
35998: PPUSH
35999: CALL_OW 172
// exit ;
36003: POP
36004: POP
36005: POP
36006: POP
36007: GO 36017
// end ;
36009: GO 35891
36011: POP
36012: POP
// end ; end ;
36013: GO 35378
36015: POP
36016: POP
// end ; end_of_file
36017: PPOPN 9
36019: END
// export function SOS_UnitDestroyed ( un ) ; begin
36020: LD_INT 0
36022: PPUSH
// ComRadiation ( un ) ;
36023: LD_VAR 0 1
36027: PPUSH
36028: CALL 37109 0 1
// end ;
36032: LD_VAR 0 2
36036: RET
// export function SOS_UnitKamikazed ( un ) ; begin
36037: LD_INT 0
36039: PPUSH
// ComRadiation ( un ) ;
36040: LD_VAR 0 1
36044: PPUSH
36045: CALL 37109 0 1
// end ;
36049: LD_VAR 0 2
36053: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
36054: LD_INT 0
36056: PPUSH
// end ;
36057: LD_VAR 0 4
36061: RET
// export function SOS_Command ( cmd ) ; begin
36062: LD_INT 0
36064: PPUSH
// end ;
36065: LD_VAR 0 2
36069: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
36070: LD_INT 0
36072: PPUSH
// end ;
36073: LD_VAR 0 6
36077: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
36078: LD_INT 0
36080: PPUSH
36081: PPUSH
36082: PPUSH
36083: PPUSH
// if not vehicle or not factory then
36084: LD_VAR 0 1
36088: NOT
36089: IFTRUE 36098
36091: PUSH
36092: LD_VAR 0 2
36096: NOT
36097: OR
36098: IFFALSE 36102
// exit ;
36100: GO 36684
// if not factoryWaypoints then
36102: LD_EXP 105
36106: NOT
36107: IFFALSE 36111
// exit ;
36109: GO 36684
// for i := 1 to Count ( factoryWaypoints ) do
36111: LD_ADDR_VAR 0 4
36115: PUSH
36116: DOUBLE
36117: LD_INT 1
36119: DEC
36120: ST_TO_ADDR
36121: LD_EXP 105
36125: PPUSH
36126: CALL 43646 0 1
36130: PUSH
36131: FOR_TO
36132: IFFALSE 36682
// if factoryWaypoints [ i ] [ 2 ] = factory then
36134: LD_EXP 105
36138: PUSH
36139: LD_VAR 0 4
36143: ARRAY
36144: PUSH
36145: LD_INT 2
36147: ARRAY
36148: PUSH
36149: LD_VAR 0 2
36153: EQUAL
36154: IFFALSE 36680
// begin if GetControl ( vehicle ) = control_manual then
36156: LD_VAR 0 1
36160: PPUSH
36161: CALL_OW 263
36165: PUSH
36166: LD_INT 1
36168: EQUAL
36169: IFFALSE 36533
// begin driver := IsDrivenBy ( vehicle ) ;
36171: LD_ADDR_VAR 0 5
36175: PUSH
36176: LD_VAR 0 1
36180: PPUSH
36181: CALL_OW 311
36185: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
36186: LD_VAR 0 5
36190: PUSH
36191: LD_EXP 106
36195: IN
36196: IFTRUE 36210
36198: PUSH
36199: LD_VAR 0 1
36203: PUSH
36204: LD_EXP 106
36208: IN
36209: OR
36210: IFFALSE 36216
// exit ;
36212: POP
36213: POP
36214: GO 36684
// if not HasTask ( driver ) then
36216: LD_VAR 0 5
36220: PPUSH
36221: CALL_OW 314
36225: NOT
36226: IFFALSE 36531
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
36228: LD_ADDR_EXP 106
36232: PUSH
36233: LD_EXP 106
36237: PPUSH
36238: LD_VAR 0 5
36242: PPUSH
36243: CALL 79578 0 2
36247: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
36248: LD_ADDR_EXP 106
36252: PUSH
36253: LD_EXP 106
36257: PPUSH
36258: LD_VAR 0 1
36262: PPUSH
36263: CALL 79578 0 2
36267: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36268: LD_ADDR_VAR 0 6
36272: PUSH
36273: LD_EXP 105
36277: PUSH
36278: LD_VAR 0 4
36282: ARRAY
36283: PUSH
36284: LD_INT 3
36286: ARRAY
36287: PPUSH
36288: LD_EXP 105
36292: PUSH
36293: LD_VAR 0 4
36297: ARRAY
36298: PUSH
36299: LD_INT 4
36301: ARRAY
36302: PPUSH
36303: CALL_OW 428
36307: ST_TO_ADDR
// if hex then
36308: LD_VAR 0 6
36312: IFFALSE 36330
// ComMoveUnit ( driver , hex ) else
36314: LD_VAR 0 5
36318: PPUSH
36319: LD_VAR 0 6
36323: PPUSH
36324: CALL_OW 112
36328: GO 36414
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
36330: LD_VAR 0 1
36334: PPUSH
36335: LD_EXP 105
36339: PUSH
36340: LD_VAR 0 4
36344: ARRAY
36345: PUSH
36346: LD_INT 3
36348: ARRAY
36349: PPUSH
36350: LD_EXP 105
36354: PUSH
36355: LD_VAR 0 4
36359: ARRAY
36360: PUSH
36361: LD_INT 4
36363: ARRAY
36364: PPUSH
36365: CALL_OW 297
36369: PUSH
36370: LD_INT 0
36372: GREATER
36373: IFFALSE 36414
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36375: LD_VAR 0 5
36379: PPUSH
36380: LD_EXP 105
36384: PUSH
36385: LD_VAR 0 4
36389: ARRAY
36390: PUSH
36391: LD_INT 3
36393: ARRAY
36394: PPUSH
36395: LD_EXP 105
36399: PUSH
36400: LD_VAR 0 4
36404: ARRAY
36405: PUSH
36406: LD_INT 4
36408: ARRAY
36409: PPUSH
36410: CALL_OW 111
// AddComExitVehicle ( driver ) ;
36414: LD_VAR 0 5
36418: PPUSH
36419: CALL_OW 181
// if Multiplayer then
36423: LD_OWVAR 4
36427: IFFALSE 36476
// begin repeat wait ( 10 ) ;
36429: LD_INT 10
36431: PPUSH
36432: CALL_OW 67
// until not IsInUnit ( driver ) ;
36436: LD_VAR 0 5
36440: PPUSH
36441: CALL_OW 310
36445: NOT
36446: IFFALSE 36429
// if not HasTask ( driver ) then
36448: LD_VAR 0 5
36452: PPUSH
36453: CALL_OW 314
36457: NOT
36458: IFFALSE 36474
// ComEnterUnit ( driver , factory ) ;
36460: LD_VAR 0 5
36464: PPUSH
36465: LD_VAR 0 2
36469: PPUSH
36470: CALL_OW 120
// end else
36474: GO 36490
// AddComEnterUnit ( driver , factory ) ;
36476: LD_VAR 0 5
36480: PPUSH
36481: LD_VAR 0 2
36485: PPUSH
36486: CALL_OW 180
// wait ( 0 0$1 ) ;
36490: LD_INT 35
36492: PPUSH
36493: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
36497: LD_ADDR_EXP 106
36501: PUSH
36502: LD_EXP 106
36506: PUSH
36507: LD_VAR 0 5
36511: DIFF
36512: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
36513: LD_ADDR_EXP 106
36517: PUSH
36518: LD_EXP 106
36522: PUSH
36523: LD_VAR 0 1
36527: DIFF
36528: ST_TO_ADDR
// break ;
36529: GO 36682
// end ; end else
36531: GO 36680
// if GetControl ( vehicle ) = control_remote then
36533: LD_VAR 0 1
36537: PPUSH
36538: CALL_OW 263
36542: PUSH
36543: LD_INT 2
36545: EQUAL
36546: IFFALSE 36632
// begin wait ( 0 0$2 ) ;
36548: LD_INT 70
36550: PPUSH
36551: CALL_OW 67
// repeat wait ( 10 ) ;
36555: LD_INT 10
36557: PPUSH
36558: CALL_OW 67
// Connect ( vehicle ) ;
36562: LD_VAR 0 1
36566: PPUSH
36567: CALL 49890 0 1
// until IsControledBy ( vehicle ) ;
36571: LD_VAR 0 1
36575: PPUSH
36576: CALL_OW 312
36580: IFFALSE 36555
// wait ( 10 ) ;
36582: LD_INT 10
36584: PPUSH
36585: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36589: LD_VAR 0 1
36593: PPUSH
36594: LD_EXP 105
36598: PUSH
36599: LD_VAR 0 4
36603: ARRAY
36604: PUSH
36605: LD_INT 3
36607: ARRAY
36608: PPUSH
36609: LD_EXP 105
36613: PUSH
36614: LD_VAR 0 4
36618: ARRAY
36619: PUSH
36620: LD_INT 4
36622: ARRAY
36623: PPUSH
36624: CALL_OW 111
// break ;
36628: GO 36682
// end else
36630: GO 36680
// begin wait ( 0 0$3 ) ;
36632: LD_INT 105
36634: PPUSH
36635: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36639: LD_VAR 0 1
36643: PPUSH
36644: LD_EXP 105
36648: PUSH
36649: LD_VAR 0 4
36653: ARRAY
36654: PUSH
36655: LD_INT 3
36657: ARRAY
36658: PPUSH
36659: LD_EXP 105
36663: PUSH
36664: LD_VAR 0 4
36668: ARRAY
36669: PUSH
36670: LD_INT 4
36672: ARRAY
36673: PPUSH
36674: CALL_OW 111
// break ;
36678: GO 36682
// end ; end ;
36680: GO 36131
36682: POP
36683: POP
// end ;
36684: LD_VAR 0 3
36688: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36689: LD_INT 0
36691: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36692: LD_VAR 0 1
36696: PUSH
36697: LD_INT 250
36699: EQUAL
36700: IFFALSE 36717
36702: PUSH
36703: LD_VAR 0 2
36707: PPUSH
36708: CALL_OW 264
36712: PUSH
36713: LD_INT 81
36715: EQUAL
36716: AND
36717: IFFALSE 36738
// MinerPlaceMine ( unit , x , y ) ;
36719: LD_VAR 0 2
36723: PPUSH
36724: LD_VAR 0 4
36728: PPUSH
36729: LD_VAR 0 5
36733: PPUSH
36734: CALL 39870 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36738: LD_VAR 0 1
36742: PUSH
36743: LD_INT 251
36745: EQUAL
36746: IFFALSE 36763
36748: PUSH
36749: LD_VAR 0 2
36753: PPUSH
36754: CALL_OW 264
36758: PUSH
36759: LD_INT 81
36761: EQUAL
36762: AND
36763: IFFALSE 36784
// MinerDetonateMine ( unit , x , y ) ;
36765: LD_VAR 0 2
36769: PPUSH
36770: LD_VAR 0 4
36774: PPUSH
36775: LD_VAR 0 5
36779: PPUSH
36780: CALL 40149 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36784: LD_VAR 0 1
36788: PUSH
36789: LD_INT 252
36791: EQUAL
36792: IFFALSE 36809
36794: PUSH
36795: LD_VAR 0 2
36799: PPUSH
36800: CALL_OW 264
36804: PUSH
36805: LD_INT 81
36807: EQUAL
36808: AND
36809: IFFALSE 36830
// MinerCreateMinefield ( unit , x , y ) ;
36811: LD_VAR 0 2
36815: PPUSH
36816: LD_VAR 0 4
36820: PPUSH
36821: LD_VAR 0 5
36825: PPUSH
36826: CALL 40568 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36830: LD_VAR 0 1
36834: PUSH
36835: LD_INT 253
36837: EQUAL
36838: IFFALSE 36855
36840: PUSH
36841: LD_VAR 0 2
36845: PPUSH
36846: CALL_OW 257
36850: PUSH
36851: LD_INT 5
36853: EQUAL
36854: AND
36855: IFFALSE 36876
// ComBinocular ( unit , x , y ) ;
36857: LD_VAR 0 2
36861: PPUSH
36862: LD_VAR 0 4
36866: PPUSH
36867: LD_VAR 0 5
36871: PPUSH
36872: CALL 40943 0 3
// if selectedUnit then
36876: LD_VAR 0 3
36880: IFFALSE 36940
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36882: LD_VAR 0 1
36886: PUSH
36887: LD_INT 254
36889: EQUAL
36890: IFFALSE 36907
36892: PUSH
36893: LD_VAR 0 2
36897: PPUSH
36898: CALL_OW 264
36902: PUSH
36903: LD_INT 99
36905: EQUAL
36906: AND
36907: IFFALSE 36924
36909: PUSH
36910: LD_VAR 0 3
36914: PPUSH
36915: CALL_OW 263
36919: PUSH
36920: LD_INT 3
36922: EQUAL
36923: AND
36924: IFFALSE 36940
// HackDestroyVehicle ( unit , selectedUnit ) ;
36926: LD_VAR 0 2
36930: PPUSH
36931: LD_VAR 0 3
36935: PPUSH
36936: CALL 39230 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36940: LD_VAR 0 1
36944: PUSH
36945: LD_INT 255
36947: EQUAL
36948: IFFALSE 36972
36950: PUSH
36951: LD_VAR 0 2
36955: PPUSH
36956: CALL_OW 264
36960: PUSH
36961: LD_INT 14
36963: PUSH
36964: LD_INT 53
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: IN
36971: AND
36972: IFFALSE 36990
36974: PUSH
36975: LD_VAR 0 4
36979: PPUSH
36980: LD_VAR 0 5
36984: PPUSH
36985: CALL_OW 488
36989: AND
36990: IFFALSE 37014
// CutTreeXYR ( unit , x , y , 12 ) ;
36992: LD_VAR 0 2
36996: PPUSH
36997: LD_VAR 0 4
37001: PPUSH
37002: LD_VAR 0 5
37006: PPUSH
37007: LD_INT 12
37009: PPUSH
37010: CALL 37205 0 4
// if cmd = 256 then
37014: LD_VAR 0 1
37018: PUSH
37019: LD_INT 256
37021: EQUAL
37022: IFFALSE 37043
// SetFactoryWaypoint ( unit , x , y ) ;
37024: LD_VAR 0 2
37028: PPUSH
37029: LD_VAR 0 4
37033: PPUSH
37034: LD_VAR 0 5
37038: PPUSH
37039: CALL 34565 0 3
// if cmd = 257 then
37043: LD_VAR 0 1
37047: PUSH
37048: LD_INT 257
37050: EQUAL
37051: IFFALSE 37072
// SetWarehouseGatheringPoint ( unit , x , y ) ;
37053: LD_VAR 0 2
37057: PPUSH
37058: LD_VAR 0 4
37062: PPUSH
37063: LD_VAR 0 5
37067: PPUSH
37068: CALL 35061 0 3
// if cmd = 258 then
37072: LD_VAR 0 1
37076: PUSH
37077: LD_INT 258
37079: EQUAL
37080: IFFALSE 37104
// BurnTreeXYR ( unit , x , y , 8 ) ;
37082: LD_VAR 0 2
37086: PPUSH
37087: LD_VAR 0 4
37091: PPUSH
37092: LD_VAR 0 5
37096: PPUSH
37097: LD_INT 8
37099: PPUSH
37100: CALL 37605 0 4
// end ;
37104: LD_VAR 0 6
37108: RET
// export function ComRadiation ( un ) ; var eff ; begin
37109: LD_INT 0
37111: PPUSH
37112: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
37113: LD_VAR 0 1
37117: PPUSH
37118: CALL_OW 264
37122: PUSH
37123: LD_INT 91
37125: NONEQUAL
37126: IFFALSE 37130
// exit ;
37128: GO 37200
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
37130: LD_INT 68
37132: PPUSH
37133: LD_VAR 0 1
37137: PPUSH
37138: CALL_OW 255
37142: PPUSH
37143: CALL_OW 321
37147: PUSH
37148: LD_INT 2
37150: EQUAL
37151: IFFALSE 37163
// eff := 50 else
37153: LD_ADDR_VAR 0 3
37157: PUSH
37158: LD_INT 50
37160: ST_TO_ADDR
37161: GO 37171
// eff := 25 ;
37163: LD_ADDR_VAR 0 3
37167: PUSH
37168: LD_INT 25
37170: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
37171: LD_VAR 0 1
37175: PPUSH
37176: CALL_OW 250
37180: PPUSH
37181: LD_VAR 0 1
37185: PPUSH
37186: CALL_OW 251
37190: PPUSH
37191: LD_VAR 0 3
37195: PPUSH
37196: CALL_OW 495
// end ;
37200: LD_VAR 0 2
37204: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
37205: LD_INT 0
37207: PPUSH
37208: PPUSH
37209: PPUSH
37210: PPUSH
37211: PPUSH
37212: PPUSH
37213: PPUSH
37214: PPUSH
37215: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
37216: LD_VAR 0 1
37220: PPUSH
37221: CALL_OW 302
37225: NOT
37226: IFTRUE 37245
37228: PUSH
37229: LD_VAR 0 2
37233: PPUSH
37234: LD_VAR 0 3
37238: PPUSH
37239: CALL_OW 488
37243: NOT
37244: OR
37245: IFTRUE 37254
37247: PUSH
37248: LD_VAR 0 4
37252: NOT
37253: OR
37254: IFFALSE 37258
// exit ;
37256: GO 37600
// list := [ ] ;
37258: LD_ADDR_VAR 0 13
37262: PUSH
37263: EMPTY
37264: ST_TO_ADDR
// if x - r < 0 then
37265: LD_VAR 0 2
37269: PUSH
37270: LD_VAR 0 4
37274: MINUS
37275: PUSH
37276: LD_INT 0
37278: LESS
37279: IFFALSE 37291
// min_x := 0 else
37281: LD_ADDR_VAR 0 7
37285: PUSH
37286: LD_INT 0
37288: ST_TO_ADDR
37289: GO 37307
// min_x := x - r ;
37291: LD_ADDR_VAR 0 7
37295: PUSH
37296: LD_VAR 0 2
37300: PUSH
37301: LD_VAR 0 4
37305: MINUS
37306: ST_TO_ADDR
// if y - r < 0 then
37307: LD_VAR 0 3
37311: PUSH
37312: LD_VAR 0 4
37316: MINUS
37317: PUSH
37318: LD_INT 0
37320: LESS
37321: IFFALSE 37333
// min_y := 0 else
37323: LD_ADDR_VAR 0 8
37327: PUSH
37328: LD_INT 0
37330: ST_TO_ADDR
37331: GO 37349
// min_y := y - r ;
37333: LD_ADDR_VAR 0 8
37337: PUSH
37338: LD_VAR 0 3
37342: PUSH
37343: LD_VAR 0 4
37347: MINUS
37348: ST_TO_ADDR
// max_x := x + r ;
37349: LD_ADDR_VAR 0 9
37353: PUSH
37354: LD_VAR 0 2
37358: PUSH
37359: LD_VAR 0 4
37363: PLUS
37364: ST_TO_ADDR
// max_y := y + r ;
37365: LD_ADDR_VAR 0 10
37369: PUSH
37370: LD_VAR 0 3
37374: PUSH
37375: LD_VAR 0 4
37379: PLUS
37380: ST_TO_ADDR
// for _x = min_x to max_x do
37381: LD_ADDR_VAR 0 11
37385: PUSH
37386: DOUBLE
37387: LD_VAR 0 7
37391: DEC
37392: ST_TO_ADDR
37393: LD_VAR 0 9
37397: PUSH
37398: FOR_TO
37399: IFFALSE 37518
// for _y = min_y to max_y do
37401: LD_ADDR_VAR 0 12
37405: PUSH
37406: DOUBLE
37407: LD_VAR 0 8
37411: DEC
37412: ST_TO_ADDR
37413: LD_VAR 0 10
37417: PUSH
37418: FOR_TO
37419: IFFALSE 37514
// begin if not ValidHex ( _x , _y ) then
37421: LD_VAR 0 11
37425: PPUSH
37426: LD_VAR 0 12
37430: PPUSH
37431: CALL_OW 488
37435: NOT
37436: IFFALSE 37440
// continue ;
37438: GO 37418
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37440: LD_VAR 0 11
37444: PPUSH
37445: LD_VAR 0 12
37449: PPUSH
37450: CALL_OW 351
37454: IFFALSE 37472
37456: PUSH
37457: LD_VAR 0 11
37461: PPUSH
37462: LD_VAR 0 12
37466: PPUSH
37467: CALL_OW 554
37471: AND
37472: IFFALSE 37512
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37474: LD_ADDR_VAR 0 13
37478: PUSH
37479: LD_VAR 0 13
37483: PPUSH
37484: LD_VAR 0 13
37488: PUSH
37489: LD_INT 1
37491: PLUS
37492: PPUSH
37493: LD_VAR 0 11
37497: PUSH
37498: LD_VAR 0 12
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PPUSH
37507: CALL_OW 2
37511: ST_TO_ADDR
// end ;
37512: GO 37418
37514: POP
37515: POP
37516: GO 37398
37518: POP
37519: POP
// if not list then
37520: LD_VAR 0 13
37524: NOT
37525: IFFALSE 37529
// exit ;
37527: GO 37600
// for i in list do
37529: LD_ADDR_VAR 0 6
37533: PUSH
37534: LD_VAR 0 13
37538: PUSH
37539: FOR_IN
37540: IFFALSE 37598
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37542: LD_VAR 0 1
37546: PPUSH
37547: LD_STRING M
37549: PUSH
37550: LD_VAR 0 6
37554: PUSH
37555: LD_INT 1
37557: ARRAY
37558: PUSH
37559: LD_VAR 0 6
37563: PUSH
37564: LD_INT 2
37566: ARRAY
37567: PUSH
37568: LD_INT 0
37570: PUSH
37571: LD_INT 0
37573: PUSH
37574: LD_INT 0
37576: PUSH
37577: LD_INT 0
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: PUSH
37589: EMPTY
37590: LIST
37591: PPUSH
37592: CALL_OW 447
37596: GO 37539
37598: POP
37599: POP
// end ;
37600: LD_VAR 0 5
37604: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
37605: LD_INT 0
37607: PPUSH
37608: PPUSH
37609: PPUSH
37610: PPUSH
37611: PPUSH
37612: PPUSH
37613: PPUSH
37614: PPUSH
37615: PPUSH
37616: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
37617: LD_VAR 0 1
37621: PPUSH
37622: CALL_OW 302
37626: NOT
37627: IFTRUE 37646
37629: PUSH
37630: LD_VAR 0 2
37634: PPUSH
37635: LD_VAR 0 3
37639: PPUSH
37640: CALL_OW 488
37644: NOT
37645: OR
37646: IFTRUE 37655
37648: PUSH
37649: LD_VAR 0 4
37653: NOT
37654: OR
37655: IFFALSE 37659
// exit ;
37657: GO 38176
// list := [ ] ;
37659: LD_ADDR_VAR 0 13
37663: PUSH
37664: EMPTY
37665: ST_TO_ADDR
// if x - r < 0 then
37666: LD_VAR 0 2
37670: PUSH
37671: LD_VAR 0 4
37675: MINUS
37676: PUSH
37677: LD_INT 0
37679: LESS
37680: IFFALSE 37692
// min_x := 0 else
37682: LD_ADDR_VAR 0 7
37686: PUSH
37687: LD_INT 0
37689: ST_TO_ADDR
37690: GO 37708
// min_x := x - r ;
37692: LD_ADDR_VAR 0 7
37696: PUSH
37697: LD_VAR 0 2
37701: PUSH
37702: LD_VAR 0 4
37706: MINUS
37707: ST_TO_ADDR
// if y - r < 0 then
37708: LD_VAR 0 3
37712: PUSH
37713: LD_VAR 0 4
37717: MINUS
37718: PUSH
37719: LD_INT 0
37721: LESS
37722: IFFALSE 37734
// min_y := 0 else
37724: LD_ADDR_VAR 0 8
37728: PUSH
37729: LD_INT 0
37731: ST_TO_ADDR
37732: GO 37750
// min_y := y - r ;
37734: LD_ADDR_VAR 0 8
37738: PUSH
37739: LD_VAR 0 3
37743: PUSH
37744: LD_VAR 0 4
37748: MINUS
37749: ST_TO_ADDR
// max_x := x + r ;
37750: LD_ADDR_VAR 0 9
37754: PUSH
37755: LD_VAR 0 2
37759: PUSH
37760: LD_VAR 0 4
37764: PLUS
37765: ST_TO_ADDR
// max_y := y + r ;
37766: LD_ADDR_VAR 0 10
37770: PUSH
37771: LD_VAR 0 3
37775: PUSH
37776: LD_VAR 0 4
37780: PLUS
37781: ST_TO_ADDR
// for _x = min_x to max_x do
37782: LD_ADDR_VAR 0 11
37786: PUSH
37787: DOUBLE
37788: LD_VAR 0 7
37792: DEC
37793: ST_TO_ADDR
37794: LD_VAR 0 9
37798: PUSH
37799: FOR_TO
37800: IFFALSE 37919
// for _y = min_y to max_y do
37802: LD_ADDR_VAR 0 12
37806: PUSH
37807: DOUBLE
37808: LD_VAR 0 8
37812: DEC
37813: ST_TO_ADDR
37814: LD_VAR 0 10
37818: PUSH
37819: FOR_TO
37820: IFFALSE 37915
// begin if not ValidHex ( _x , _y ) then
37822: LD_VAR 0 11
37826: PPUSH
37827: LD_VAR 0 12
37831: PPUSH
37832: CALL_OW 488
37836: NOT
37837: IFFALSE 37841
// continue ;
37839: GO 37819
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37841: LD_VAR 0 11
37845: PPUSH
37846: LD_VAR 0 12
37850: PPUSH
37851: CALL_OW 351
37855: IFFALSE 37873
37857: PUSH
37858: LD_VAR 0 11
37862: PPUSH
37863: LD_VAR 0 12
37867: PPUSH
37868: CALL_OW 554
37872: AND
37873: IFFALSE 37913
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37875: LD_ADDR_VAR 0 13
37879: PUSH
37880: LD_VAR 0 13
37884: PPUSH
37885: LD_VAR 0 13
37889: PUSH
37890: LD_INT 1
37892: PLUS
37893: PPUSH
37894: LD_VAR 0 11
37898: PUSH
37899: LD_VAR 0 12
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: PPUSH
37908: CALL_OW 2
37912: ST_TO_ADDR
// end ;
37913: GO 37819
37915: POP
37916: POP
37917: GO 37799
37919: POP
37920: POP
// if not list then
37921: LD_VAR 0 13
37925: NOT
37926: IFFALSE 37930
// exit ;
37928: GO 38176
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
37930: LD_ADDR_VAR 0 13
37934: PUSH
37935: LD_VAR 0 1
37939: PPUSH
37940: LD_VAR 0 13
37944: PPUSH
37945: LD_INT 1
37947: PPUSH
37948: LD_INT 1
37950: PPUSH
37951: CALL 47018 0 4
37955: ST_TO_ADDR
// ComStop ( flame ) ;
37956: LD_VAR 0 1
37960: PPUSH
37961: CALL_OW 141
// for i in list do
37965: LD_ADDR_VAR 0 6
37969: PUSH
37970: LD_VAR 0 13
37974: PUSH
37975: FOR_IN
37976: IFFALSE 38007
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
37978: LD_VAR 0 1
37982: PPUSH
37983: LD_VAR 0 6
37987: PUSH
37988: LD_INT 1
37990: ARRAY
37991: PPUSH
37992: LD_VAR 0 6
37996: PUSH
37997: LD_INT 2
37999: ARRAY
38000: PPUSH
38001: CALL_OW 176
38005: GO 37975
38007: POP
38008: POP
// repeat wait ( 0 0$1 ) ;
38009: LD_INT 35
38011: PPUSH
38012: CALL_OW 67
// task := GetTaskList ( flame ) ;
38016: LD_ADDR_VAR 0 14
38020: PUSH
38021: LD_VAR 0 1
38025: PPUSH
38026: CALL_OW 437
38030: ST_TO_ADDR
// if not task then
38031: LD_VAR 0 14
38035: NOT
38036: IFFALSE 38040
// exit ;
38038: GO 38176
// if task [ 1 ] [ 1 ] <> | then
38040: LD_VAR 0 14
38044: PUSH
38045: LD_INT 1
38047: ARRAY
38048: PUSH
38049: LD_INT 1
38051: ARRAY
38052: PUSH
38053: LD_STRING |
38055: NONEQUAL
38056: IFFALSE 38060
// exit ;
38058: GO 38176
// _x := task [ 1 ] [ 2 ] ;
38060: LD_ADDR_VAR 0 11
38064: PUSH
38065: LD_VAR 0 14
38069: PUSH
38070: LD_INT 1
38072: ARRAY
38073: PUSH
38074: LD_INT 2
38076: ARRAY
38077: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
38078: LD_ADDR_VAR 0 12
38082: PUSH
38083: LD_VAR 0 14
38087: PUSH
38088: LD_INT 1
38090: ARRAY
38091: PUSH
38092: LD_INT 3
38094: ARRAY
38095: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
38096: LD_VAR 0 11
38100: PPUSH
38101: LD_VAR 0 12
38105: PPUSH
38106: CALL_OW 351
38110: NOT
38111: IFTRUE 38130
38113: PUSH
38114: LD_VAR 0 11
38118: PPUSH
38119: LD_VAR 0 12
38123: PPUSH
38124: CALL_OW 554
38128: NOT
38129: OR
38130: IFFALSE 38164
// begin task := Delete ( task , 1 ) ;
38132: LD_ADDR_VAR 0 14
38136: PUSH
38137: LD_VAR 0 14
38141: PPUSH
38142: LD_INT 1
38144: PPUSH
38145: CALL_OW 3
38149: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
38150: LD_VAR 0 1
38154: PPUSH
38155: LD_VAR 0 14
38159: PPUSH
38160: CALL_OW 446
// end ; until not HasTask ( flame ) ;
38164: LD_VAR 0 1
38168: PPUSH
38169: CALL_OW 314
38173: NOT
38174: IFFALSE 38009
// end ;
38176: LD_VAR 0 5
38180: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
38181: LD_EXP 109
38185: NOT
38186: IFFALSE 38236
38188: GO 38190
38190: DISABLE
// begin initHack := true ;
38191: LD_ADDR_EXP 109
38195: PUSH
38196: LD_INT 1
38198: ST_TO_ADDR
// hackTanks := [ ] ;
38199: LD_ADDR_EXP 110
38203: PUSH
38204: EMPTY
38205: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
38206: LD_ADDR_EXP 111
38210: PUSH
38211: EMPTY
38212: ST_TO_ADDR
// hackLimit := 3 ;
38213: LD_ADDR_EXP 112
38217: PUSH
38218: LD_INT 3
38220: ST_TO_ADDR
// hackDist := 12 ;
38221: LD_ADDR_EXP 113
38225: PUSH
38226: LD_INT 12
38228: ST_TO_ADDR
// hackCounter := [ ] ;
38229: LD_ADDR_EXP 114
38233: PUSH
38234: EMPTY
38235: ST_TO_ADDR
// end ;
38236: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
38237: LD_EXP 109
38241: IFFALSE 38259
38243: PUSH
38244: LD_INT 34
38246: PUSH
38247: LD_INT 99
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PPUSH
38254: CALL_OW 69
38258: AND
38259: IFFALSE 38512
38261: GO 38263
38263: DISABLE
38264: LD_INT 0
38266: PPUSH
38267: PPUSH
// begin enable ;
38268: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38269: LD_ADDR_VAR 0 1
38273: PUSH
38274: LD_INT 34
38276: PUSH
38277: LD_INT 99
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PPUSH
38284: CALL_OW 69
38288: PUSH
38289: FOR_IN
38290: IFFALSE 38510
// begin if not i in hackTanks then
38292: LD_VAR 0 1
38296: PUSH
38297: LD_EXP 110
38301: IN
38302: NOT
38303: IFFALSE 38386
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38305: LD_ADDR_EXP 110
38309: PUSH
38310: LD_EXP 110
38314: PPUSH
38315: LD_EXP 110
38319: PUSH
38320: LD_INT 1
38322: PLUS
38323: PPUSH
38324: LD_VAR 0 1
38328: PPUSH
38329: CALL_OW 1
38333: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38334: LD_ADDR_EXP 111
38338: PUSH
38339: LD_EXP 111
38343: PPUSH
38344: LD_EXP 111
38348: PUSH
38349: LD_INT 1
38351: PLUS
38352: PPUSH
38353: EMPTY
38354: PPUSH
38355: CALL_OW 1
38359: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38360: LD_ADDR_EXP 114
38364: PUSH
38365: LD_EXP 114
38369: PPUSH
38370: LD_EXP 114
38374: PUSH
38375: LD_INT 1
38377: PLUS
38378: PPUSH
38379: EMPTY
38380: PPUSH
38381: CALL_OW 1
38385: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38386: LD_VAR 0 1
38390: PPUSH
38391: CALL_OW 302
38395: NOT
38396: IFFALSE 38409
// begin HackUnlinkAll ( i ) ;
38398: LD_VAR 0 1
38402: PPUSH
38403: CALL 38515 0 1
// continue ;
38407: GO 38289
// end ; HackCheckCapturedStatus ( i ) ;
38409: LD_VAR 0 1
38413: PPUSH
38414: CALL 38960 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38418: LD_ADDR_VAR 0 2
38422: PUSH
38423: LD_INT 81
38425: PUSH
38426: LD_VAR 0 1
38430: PPUSH
38431: CALL_OW 255
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: LD_INT 33
38442: PUSH
38443: LD_INT 3
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 91
38452: PUSH
38453: LD_VAR 0 1
38457: PUSH
38458: LD_EXP 113
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: LIST
38467: PUSH
38468: LD_INT 50
38470: PUSH
38471: EMPTY
38472: LIST
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: PPUSH
38480: CALL_OW 69
38484: ST_TO_ADDR
// if not tmp then
38485: LD_VAR 0 2
38489: NOT
38490: IFFALSE 38494
// continue ;
38492: GO 38289
// HackLink ( i , tmp ) ;
38494: LD_VAR 0 1
38498: PPUSH
38499: LD_VAR 0 2
38503: PPUSH
38504: CALL 38651 0 2
// end ;
38508: GO 38289
38510: POP
38511: POP
// end ;
38512: PPOPN 2
38514: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38515: LD_INT 0
38517: PPUSH
38518: PPUSH
38519: PPUSH
// if not hack in hackTanks then
38520: LD_VAR 0 1
38524: PUSH
38525: LD_EXP 110
38529: IN
38530: NOT
38531: IFFALSE 38535
// exit ;
38533: GO 38646
// index := GetElementIndex ( hackTanks , hack ) ;
38535: LD_ADDR_VAR 0 4
38539: PUSH
38540: LD_EXP 110
38544: PPUSH
38545: LD_VAR 0 1
38549: PPUSH
38550: CALL 46313 0 2
38554: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38555: LD_EXP 111
38559: PUSH
38560: LD_VAR 0 4
38564: ARRAY
38565: IFFALSE 38646
// begin for i in hackTanksCaptured [ index ] do
38567: LD_ADDR_VAR 0 3
38571: PUSH
38572: LD_EXP 111
38576: PUSH
38577: LD_VAR 0 4
38581: ARRAY
38582: PUSH
38583: FOR_IN
38584: IFFALSE 38610
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38586: LD_VAR 0 3
38590: PUSH
38591: LD_INT 1
38593: ARRAY
38594: PPUSH
38595: LD_VAR 0 3
38599: PUSH
38600: LD_INT 2
38602: ARRAY
38603: PPUSH
38604: CALL_OW 235
38608: GO 38583
38610: POP
38611: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38612: LD_ADDR_EXP 111
38616: PUSH
38617: LD_EXP 111
38621: PPUSH
38622: LD_VAR 0 4
38626: PPUSH
38627: EMPTY
38628: PPUSH
38629: CALL_OW 1
38633: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38634: LD_VAR 0 1
38638: PPUSH
38639: LD_INT 0
38641: PPUSH
38642: CALL_OW 505
// end ; end ;
38646: LD_VAR 0 2
38650: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38651: LD_INT 0
38653: PPUSH
38654: PPUSH
38655: PPUSH
// if not hack in hackTanks or not vehicles then
38656: LD_VAR 0 1
38660: PUSH
38661: LD_EXP 110
38665: IN
38666: NOT
38667: IFTRUE 38676
38669: PUSH
38670: LD_VAR 0 2
38674: NOT
38675: OR
38676: IFFALSE 38680
// exit ;
38678: GO 38955
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38680: LD_ADDR_VAR 0 2
38684: PUSH
38685: LD_VAR 0 1
38689: PPUSH
38690: LD_VAR 0 2
38694: PPUSH
38695: LD_INT 1
38697: PPUSH
38698: LD_INT 1
38700: PPUSH
38701: CALL 46965 0 4
38705: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38706: LD_ADDR_VAR 0 5
38710: PUSH
38711: LD_EXP 110
38715: PPUSH
38716: LD_VAR 0 1
38720: PPUSH
38721: CALL 46313 0 2
38725: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38726: LD_EXP 111
38730: PUSH
38731: LD_VAR 0 5
38735: ARRAY
38736: PUSH
38737: LD_EXP 112
38741: LESS
38742: IFFALSE 38931
// begin for i := 1 to vehicles do
38744: LD_ADDR_VAR 0 4
38748: PUSH
38749: DOUBLE
38750: LD_INT 1
38752: DEC
38753: ST_TO_ADDR
38754: LD_VAR 0 2
38758: PUSH
38759: FOR_TO
38760: IFFALSE 38929
// begin if hackTanksCaptured [ index ] = hackLimit then
38762: LD_EXP 111
38766: PUSH
38767: LD_VAR 0 5
38771: ARRAY
38772: PUSH
38773: LD_EXP 112
38777: EQUAL
38778: IFFALSE 38782
// break ;
38780: GO 38929
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38782: LD_ADDR_EXP 114
38786: PUSH
38787: LD_EXP 114
38791: PPUSH
38792: LD_VAR 0 5
38796: PPUSH
38797: LD_EXP 114
38801: PUSH
38802: LD_VAR 0 5
38806: ARRAY
38807: PUSH
38808: LD_INT 1
38810: PLUS
38811: PPUSH
38812: CALL_OW 1
38816: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38817: LD_ADDR_EXP 111
38821: PUSH
38822: LD_EXP 111
38826: PPUSH
38827: LD_VAR 0 5
38831: PUSH
38832: LD_EXP 111
38836: PUSH
38837: LD_VAR 0 5
38841: ARRAY
38842: PUSH
38843: LD_INT 1
38845: PLUS
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PPUSH
38851: LD_VAR 0 2
38855: PUSH
38856: LD_VAR 0 4
38860: ARRAY
38861: PUSH
38862: LD_VAR 0 2
38866: PUSH
38867: LD_VAR 0 4
38871: ARRAY
38872: PPUSH
38873: CALL_OW 255
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PPUSH
38882: CALL 46530 0 3
38886: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38887: LD_VAR 0 2
38891: PUSH
38892: LD_VAR 0 4
38896: ARRAY
38897: PPUSH
38898: LD_VAR 0 1
38902: PPUSH
38903: CALL_OW 255
38907: PPUSH
38908: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38912: LD_VAR 0 2
38916: PUSH
38917: LD_VAR 0 4
38921: ARRAY
38922: PPUSH
38923: CALL_OW 141
// end ;
38927: GO 38759
38929: POP
38930: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38931: LD_VAR 0 1
38935: PPUSH
38936: LD_EXP 111
38940: PUSH
38941: LD_VAR 0 5
38945: ARRAY
38946: PUSH
38947: LD_INT 0
38949: PLUS
38950: PPUSH
38951: CALL_OW 505
// end ;
38955: LD_VAR 0 3
38959: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38960: LD_INT 0
38962: PPUSH
38963: PPUSH
38964: PPUSH
38965: PPUSH
// if not hack in hackTanks then
38966: LD_VAR 0 1
38970: PUSH
38971: LD_EXP 110
38975: IN
38976: NOT
38977: IFFALSE 38981
// exit ;
38979: GO 39225
// index := GetElementIndex ( hackTanks , hack ) ;
38981: LD_ADDR_VAR 0 4
38985: PUSH
38986: LD_EXP 110
38990: PPUSH
38991: LD_VAR 0 1
38995: PPUSH
38996: CALL 46313 0 2
39000: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
39001: LD_ADDR_VAR 0 3
39005: PUSH
39006: DOUBLE
39007: LD_EXP 111
39011: PUSH
39012: LD_VAR 0 4
39016: ARRAY
39017: INC
39018: ST_TO_ADDR
39019: LD_INT 1
39021: PUSH
39022: FOR_DOWNTO
39023: IFFALSE 39199
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
39025: LD_ADDR_VAR 0 5
39029: PUSH
39030: LD_EXP 111
39034: PUSH
39035: LD_VAR 0 4
39039: ARRAY
39040: PUSH
39041: LD_VAR 0 3
39045: ARRAY
39046: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
39047: LD_VAR 0 5
39051: PUSH
39052: LD_INT 1
39054: ARRAY
39055: PPUSH
39056: CALL_OW 302
39060: NOT
39061: IFTRUE 39089
39063: PUSH
39064: LD_VAR 0 5
39068: PUSH
39069: LD_INT 1
39071: ARRAY
39072: PPUSH
39073: CALL_OW 255
39077: PUSH
39078: LD_VAR 0 1
39082: PPUSH
39083: CALL_OW 255
39087: NONEQUAL
39088: OR
39089: IFFALSE 39197
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
39091: LD_VAR 0 5
39095: PUSH
39096: LD_INT 1
39098: ARRAY
39099: PPUSH
39100: CALL_OW 305
39104: IFFALSE 39132
39106: PUSH
39107: LD_VAR 0 5
39111: PUSH
39112: LD_INT 1
39114: ARRAY
39115: PPUSH
39116: CALL_OW 255
39120: PUSH
39121: LD_VAR 0 1
39125: PPUSH
39126: CALL_OW 255
39130: EQUAL
39131: AND
39132: IFFALSE 39156
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
39134: LD_VAR 0 5
39138: PUSH
39139: LD_INT 1
39141: ARRAY
39142: PPUSH
39143: LD_VAR 0 5
39147: PUSH
39148: LD_INT 2
39150: ARRAY
39151: PPUSH
39152: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
39156: LD_ADDR_EXP 111
39160: PUSH
39161: LD_EXP 111
39165: PPUSH
39166: LD_VAR 0 4
39170: PPUSH
39171: LD_EXP 111
39175: PUSH
39176: LD_VAR 0 4
39180: ARRAY
39181: PPUSH
39182: LD_VAR 0 3
39186: PPUSH
39187: CALL_OW 3
39191: PPUSH
39192: CALL_OW 1
39196: ST_TO_ADDR
// end ; end ;
39197: GO 39022
39199: POP
39200: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39201: LD_VAR 0 1
39205: PPUSH
39206: LD_EXP 111
39210: PUSH
39211: LD_VAR 0 4
39215: ARRAY
39216: PUSH
39217: LD_INT 0
39219: PLUS
39220: PPUSH
39221: CALL_OW 505
// end ;
39225: LD_VAR 0 2
39229: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
39230: LD_INT 0
39232: PPUSH
39233: PPUSH
39234: PPUSH
39235: PPUSH
// if not hack in hackTanks then
39236: LD_VAR 0 1
39240: PUSH
39241: LD_EXP 110
39245: IN
39246: NOT
39247: IFFALSE 39251
// exit ;
39249: GO 39336
// index := GetElementIndex ( hackTanks , hack ) ;
39251: LD_ADDR_VAR 0 5
39255: PUSH
39256: LD_EXP 110
39260: PPUSH
39261: LD_VAR 0 1
39265: PPUSH
39266: CALL 46313 0 2
39270: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39271: LD_ADDR_VAR 0 4
39275: PUSH
39276: DOUBLE
39277: LD_INT 1
39279: DEC
39280: ST_TO_ADDR
39281: LD_EXP 111
39285: PUSH
39286: LD_VAR 0 5
39290: ARRAY
39291: PUSH
39292: FOR_TO
39293: IFFALSE 39334
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39295: LD_EXP 111
39299: PUSH
39300: LD_VAR 0 5
39304: ARRAY
39305: PUSH
39306: LD_VAR 0 4
39310: ARRAY
39311: PUSH
39312: LD_INT 1
39314: ARRAY
39315: PUSH
39316: LD_VAR 0 2
39320: EQUAL
39321: IFFALSE 39332
// KillUnit ( vehicle ) ;
39323: LD_VAR 0 2
39327: PPUSH
39328: CALL_OW 66
39332: GO 39292
39334: POP
39335: POP
// end ;
39336: LD_VAR 0 3
39340: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
39341: LD_EXP 115
39345: NOT
39346: IFFALSE 39381
39348: GO 39350
39350: DISABLE
// begin initMiner := true ;
39351: LD_ADDR_EXP 115
39355: PUSH
39356: LD_INT 1
39358: ST_TO_ADDR
// minersList := [ ] ;
39359: LD_ADDR_EXP 116
39363: PUSH
39364: EMPTY
39365: ST_TO_ADDR
// minerMinesList := [ ] ;
39366: LD_ADDR_EXP 117
39370: PUSH
39371: EMPTY
39372: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
39373: LD_ADDR_EXP 118
39377: PUSH
39378: LD_INT 5
39380: ST_TO_ADDR
// end ;
39381: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
39382: LD_EXP 115
39386: IFFALSE 39404
39388: PUSH
39389: LD_INT 34
39391: PUSH
39392: LD_INT 81
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PPUSH
39399: CALL_OW 69
39403: AND
39404: IFFALSE 39867
39406: GO 39408
39408: DISABLE
39409: LD_INT 0
39411: PPUSH
39412: PPUSH
39413: PPUSH
39414: PPUSH
// begin enable ;
39415: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39416: LD_ADDR_VAR 0 1
39420: PUSH
39421: LD_INT 34
39423: PUSH
39424: LD_INT 81
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PPUSH
39431: CALL_OW 69
39435: PUSH
39436: FOR_IN
39437: IFFALSE 39509
// begin if not i in minersList then
39439: LD_VAR 0 1
39443: PUSH
39444: LD_EXP 116
39448: IN
39449: NOT
39450: IFFALSE 39507
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39452: LD_ADDR_EXP 116
39456: PUSH
39457: LD_EXP 116
39461: PPUSH
39462: LD_EXP 116
39466: PUSH
39467: LD_INT 1
39469: PLUS
39470: PPUSH
39471: LD_VAR 0 1
39475: PPUSH
39476: CALL_OW 1
39480: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39481: LD_ADDR_EXP 117
39485: PUSH
39486: LD_EXP 117
39490: PPUSH
39491: LD_EXP 117
39495: PUSH
39496: LD_INT 1
39498: PLUS
39499: PPUSH
39500: EMPTY
39501: PPUSH
39502: CALL_OW 1
39506: ST_TO_ADDR
// end end ;
39507: GO 39436
39509: POP
39510: POP
// for i := minerMinesList downto 1 do
39511: LD_ADDR_VAR 0 1
39515: PUSH
39516: DOUBLE
39517: LD_EXP 117
39521: INC
39522: ST_TO_ADDR
39523: LD_INT 1
39525: PUSH
39526: FOR_DOWNTO
39527: IFFALSE 39865
// begin if IsLive ( minersList [ i ] ) then
39529: LD_EXP 116
39533: PUSH
39534: LD_VAR 0 1
39538: ARRAY
39539: PPUSH
39540: CALL_OW 300
39544: IFFALSE 39572
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39546: LD_EXP 116
39550: PUSH
39551: LD_VAR 0 1
39555: ARRAY
39556: PPUSH
39557: LD_EXP 117
39561: PUSH
39562: LD_VAR 0 1
39566: ARRAY
39567: PPUSH
39568: CALL_OW 505
// if not minerMinesList [ i ] then
39572: LD_EXP 117
39576: PUSH
39577: LD_VAR 0 1
39581: ARRAY
39582: NOT
39583: IFFALSE 39587
// continue ;
39585: GO 39526
// for j := minerMinesList [ i ] downto 1 do
39587: LD_ADDR_VAR 0 2
39591: PUSH
39592: DOUBLE
39593: LD_EXP 117
39597: PUSH
39598: LD_VAR 0 1
39602: ARRAY
39603: INC
39604: ST_TO_ADDR
39605: LD_INT 1
39607: PUSH
39608: FOR_DOWNTO
39609: IFFALSE 39861
// begin side := GetSide ( minersList [ i ] ) ;
39611: LD_ADDR_VAR 0 3
39615: PUSH
39616: LD_EXP 116
39620: PUSH
39621: LD_VAR 0 1
39625: ARRAY
39626: PPUSH
39627: CALL_OW 255
39631: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39632: LD_ADDR_VAR 0 4
39636: PUSH
39637: LD_EXP 117
39641: PUSH
39642: LD_VAR 0 1
39646: ARRAY
39647: PUSH
39648: LD_VAR 0 2
39652: ARRAY
39653: PUSH
39654: LD_INT 1
39656: ARRAY
39657: PPUSH
39658: LD_EXP 117
39662: PUSH
39663: LD_VAR 0 1
39667: ARRAY
39668: PUSH
39669: LD_VAR 0 2
39673: ARRAY
39674: PUSH
39675: LD_INT 2
39677: ARRAY
39678: PPUSH
39679: CALL_OW 428
39683: ST_TO_ADDR
// if not tmp then
39684: LD_VAR 0 4
39688: NOT
39689: IFFALSE 39693
// continue ;
39691: GO 39608
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39693: LD_VAR 0 4
39697: PUSH
39698: LD_INT 81
39700: PUSH
39701: LD_VAR 0 3
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PPUSH
39710: CALL_OW 69
39714: IN
39715: IFFALSE 39765
39717: PUSH
39718: LD_EXP 117
39722: PUSH
39723: LD_VAR 0 1
39727: ARRAY
39728: PUSH
39729: LD_VAR 0 2
39733: ARRAY
39734: PUSH
39735: LD_INT 1
39737: ARRAY
39738: PPUSH
39739: LD_EXP 117
39743: PUSH
39744: LD_VAR 0 1
39748: ARRAY
39749: PUSH
39750: LD_VAR 0 2
39754: ARRAY
39755: PUSH
39756: LD_INT 2
39758: ARRAY
39759: PPUSH
39760: CALL_OW 458
39764: AND
39765: IFFALSE 39859
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39767: LD_EXP 117
39771: PUSH
39772: LD_VAR 0 1
39776: ARRAY
39777: PUSH
39778: LD_VAR 0 2
39782: ARRAY
39783: PUSH
39784: LD_INT 1
39786: ARRAY
39787: PPUSH
39788: LD_EXP 117
39792: PUSH
39793: LD_VAR 0 1
39797: ARRAY
39798: PUSH
39799: LD_VAR 0 2
39803: ARRAY
39804: PUSH
39805: LD_INT 2
39807: ARRAY
39808: PPUSH
39809: LD_VAR 0 3
39813: PPUSH
39814: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39818: LD_ADDR_EXP 117
39822: PUSH
39823: LD_EXP 117
39827: PPUSH
39828: LD_VAR 0 1
39832: PPUSH
39833: LD_EXP 117
39837: PUSH
39838: LD_VAR 0 1
39842: ARRAY
39843: PPUSH
39844: LD_VAR 0 2
39848: PPUSH
39849: CALL_OW 3
39853: PPUSH
39854: CALL_OW 1
39858: ST_TO_ADDR
// end ; end ;
39859: GO 39608
39861: POP
39862: POP
// end ;
39863: GO 39526
39865: POP
39866: POP
// end ;
39867: PPOPN 4
39869: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
39870: LD_INT 0
39872: PPUSH
39873: PPUSH
// result := false ;
39874: LD_ADDR_VAR 0 4
39878: PUSH
39879: LD_INT 0
39881: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39882: LD_VAR 0 1
39886: PPUSH
39887: CALL_OW 264
39891: PUSH
39892: LD_INT 81
39894: EQUAL
39895: NOT
39896: IFFALSE 39900
// exit ;
39898: GO 40144
// index := GetElementIndex ( minersList , unit ) ;
39900: LD_ADDR_VAR 0 5
39904: PUSH
39905: LD_EXP 116
39909: PPUSH
39910: LD_VAR 0 1
39914: PPUSH
39915: CALL 46313 0 2
39919: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39920: LD_EXP 117
39924: PUSH
39925: LD_VAR 0 5
39929: ARRAY
39930: PUSH
39931: LD_EXP 118
39935: GREATEREQUAL
39936: IFFALSE 39940
// exit ;
39938: GO 40144
// ComMoveXY ( unit , x , y ) ;
39940: LD_VAR 0 1
39944: PPUSH
39945: LD_VAR 0 2
39949: PPUSH
39950: LD_VAR 0 3
39954: PPUSH
39955: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39959: LD_INT 35
39961: PPUSH
39962: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39966: LD_VAR 0 1
39970: PPUSH
39971: LD_VAR 0 2
39975: PPUSH
39976: LD_VAR 0 3
39980: PPUSH
39981: CALL 78359 0 3
39985: NOT
39986: IFFALSE 39999
39988: PUSH
39989: LD_VAR 0 1
39993: PPUSH
39994: CALL_OW 314
39998: AND
39999: IFFALSE 40003
// exit ;
40001: GO 40144
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
40003: LD_VAR 0 2
40007: PPUSH
40008: LD_VAR 0 3
40012: PPUSH
40013: CALL_OW 428
40017: PUSH
40018: LD_VAR 0 1
40022: EQUAL
40023: IFFALSE 40037
40025: PUSH
40026: LD_VAR 0 1
40030: PPUSH
40031: CALL_OW 314
40035: NOT
40036: AND
40037: IFFALSE 39959
// PlaySoundXY ( x , y , PlantMine ) ;
40039: LD_VAR 0 2
40043: PPUSH
40044: LD_VAR 0 3
40048: PPUSH
40049: LD_STRING PlantMine
40051: PPUSH
40052: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
40056: LD_VAR 0 2
40060: PPUSH
40061: LD_VAR 0 3
40065: PPUSH
40066: LD_VAR 0 1
40070: PPUSH
40071: CALL_OW 255
40075: PPUSH
40076: LD_INT 0
40078: PPUSH
40079: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
40083: LD_ADDR_EXP 117
40087: PUSH
40088: LD_EXP 117
40092: PPUSH
40093: LD_VAR 0 5
40097: PUSH
40098: LD_EXP 117
40102: PUSH
40103: LD_VAR 0 5
40107: ARRAY
40108: PUSH
40109: LD_INT 1
40111: PLUS
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PPUSH
40117: LD_VAR 0 2
40121: PUSH
40122: LD_VAR 0 3
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PPUSH
40131: CALL 46530 0 3
40135: ST_TO_ADDR
// result := true ;
40136: LD_ADDR_VAR 0 4
40140: PUSH
40141: LD_INT 1
40143: ST_TO_ADDR
// end ;
40144: LD_VAR 0 4
40148: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
40149: LD_INT 0
40151: PPUSH
40152: PPUSH
40153: PPUSH
// if not unit in minersList then
40154: LD_VAR 0 1
40158: PUSH
40159: LD_EXP 116
40163: IN
40164: NOT
40165: IFFALSE 40169
// exit ;
40167: GO 40563
// index := GetElementIndex ( minersList , unit ) ;
40169: LD_ADDR_VAR 0 6
40173: PUSH
40174: LD_EXP 116
40178: PPUSH
40179: LD_VAR 0 1
40183: PPUSH
40184: CALL 46313 0 2
40188: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
40189: LD_ADDR_VAR 0 5
40193: PUSH
40194: DOUBLE
40195: LD_EXP 117
40199: PUSH
40200: LD_VAR 0 6
40204: ARRAY
40205: INC
40206: ST_TO_ADDR
40207: LD_INT 1
40209: PUSH
40210: FOR_DOWNTO
40211: IFFALSE 40374
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
40213: LD_EXP 117
40217: PUSH
40218: LD_VAR 0 6
40222: ARRAY
40223: PUSH
40224: LD_VAR 0 5
40228: ARRAY
40229: PUSH
40230: LD_INT 1
40232: ARRAY
40233: PUSH
40234: LD_VAR 0 2
40238: EQUAL
40239: IFFALSE 40269
40241: PUSH
40242: LD_EXP 117
40246: PUSH
40247: LD_VAR 0 6
40251: ARRAY
40252: PUSH
40253: LD_VAR 0 5
40257: ARRAY
40258: PUSH
40259: LD_INT 2
40261: ARRAY
40262: PUSH
40263: LD_VAR 0 3
40267: EQUAL
40268: AND
40269: IFFALSE 40372
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40271: LD_EXP 117
40275: PUSH
40276: LD_VAR 0 6
40280: ARRAY
40281: PUSH
40282: LD_VAR 0 5
40286: ARRAY
40287: PUSH
40288: LD_INT 1
40290: ARRAY
40291: PPUSH
40292: LD_EXP 117
40296: PUSH
40297: LD_VAR 0 6
40301: ARRAY
40302: PUSH
40303: LD_VAR 0 5
40307: ARRAY
40308: PUSH
40309: LD_INT 2
40311: ARRAY
40312: PPUSH
40313: LD_VAR 0 1
40317: PPUSH
40318: CALL_OW 255
40322: PPUSH
40323: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40327: LD_ADDR_EXP 117
40331: PUSH
40332: LD_EXP 117
40336: PPUSH
40337: LD_VAR 0 6
40341: PPUSH
40342: LD_EXP 117
40346: PUSH
40347: LD_VAR 0 6
40351: ARRAY
40352: PPUSH
40353: LD_VAR 0 5
40357: PPUSH
40358: CALL_OW 3
40362: PPUSH
40363: CALL_OW 1
40367: ST_TO_ADDR
// exit ;
40368: POP
40369: POP
40370: GO 40563
// end ; end ;
40372: GO 40210
40374: POP
40375: POP
// for i := minerMinesList [ index ] downto 1 do
40376: LD_ADDR_VAR 0 5
40380: PUSH
40381: DOUBLE
40382: LD_EXP 117
40386: PUSH
40387: LD_VAR 0 6
40391: ARRAY
40392: INC
40393: ST_TO_ADDR
40394: LD_INT 1
40396: PUSH
40397: FOR_DOWNTO
40398: IFFALSE 40561
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40400: LD_EXP 117
40404: PUSH
40405: LD_VAR 0 6
40409: ARRAY
40410: PUSH
40411: LD_VAR 0 5
40415: ARRAY
40416: PUSH
40417: LD_INT 1
40419: ARRAY
40420: PPUSH
40421: LD_EXP 117
40425: PUSH
40426: LD_VAR 0 6
40430: ARRAY
40431: PUSH
40432: LD_VAR 0 5
40436: ARRAY
40437: PUSH
40438: LD_INT 2
40440: ARRAY
40441: PPUSH
40442: LD_VAR 0 2
40446: PPUSH
40447: LD_VAR 0 3
40451: PPUSH
40452: CALL_OW 298
40456: PUSH
40457: LD_INT 6
40459: LESS
40460: IFFALSE 40559
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40462: LD_EXP 117
40466: PUSH
40467: LD_VAR 0 6
40471: ARRAY
40472: PUSH
40473: LD_VAR 0 5
40477: ARRAY
40478: PUSH
40479: LD_INT 1
40481: ARRAY
40482: PPUSH
40483: LD_EXP 117
40487: PUSH
40488: LD_VAR 0 6
40492: ARRAY
40493: PUSH
40494: LD_VAR 0 5
40498: ARRAY
40499: PUSH
40500: LD_INT 2
40502: ARRAY
40503: PPUSH
40504: LD_VAR 0 1
40508: PPUSH
40509: CALL_OW 255
40513: PPUSH
40514: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40518: LD_ADDR_EXP 117
40522: PUSH
40523: LD_EXP 117
40527: PPUSH
40528: LD_VAR 0 6
40532: PPUSH
40533: LD_EXP 117
40537: PUSH
40538: LD_VAR 0 6
40542: ARRAY
40543: PPUSH
40544: LD_VAR 0 5
40548: PPUSH
40549: CALL_OW 3
40553: PPUSH
40554: CALL_OW 1
40558: ST_TO_ADDR
// end ; end ;
40559: GO 40397
40561: POP
40562: POP
// end ;
40563: LD_VAR 0 4
40567: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40568: LD_INT 0
40570: PPUSH
40571: PPUSH
40572: PPUSH
40573: PPUSH
40574: PPUSH
40575: PPUSH
40576: PPUSH
40577: PPUSH
40578: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40579: LD_VAR 0 1
40583: PPUSH
40584: CALL_OW 264
40588: PUSH
40589: LD_INT 81
40591: EQUAL
40592: NOT
40593: IFTRUE 40608
40595: PUSH
40596: LD_VAR 0 1
40600: PUSH
40601: LD_EXP 116
40605: IN
40606: NOT
40607: OR
40608: IFFALSE 40612
// exit ;
40610: GO 40938
// index := GetElementIndex ( minersList , unit ) ;
40612: LD_ADDR_VAR 0 6
40616: PUSH
40617: LD_EXP 116
40621: PPUSH
40622: LD_VAR 0 1
40626: PPUSH
40627: CALL 46313 0 2
40631: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40632: LD_ADDR_VAR 0 8
40636: PUSH
40637: LD_EXP 118
40641: PUSH
40642: LD_EXP 117
40646: PUSH
40647: LD_VAR 0 6
40651: ARRAY
40652: MINUS
40653: ST_TO_ADDR
// if not minesFreeAmount then
40654: LD_VAR 0 8
40658: NOT
40659: IFFALSE 40663
// exit ;
40661: GO 40938
// tmp := [ ] ;
40663: LD_ADDR_VAR 0 7
40667: PUSH
40668: EMPTY
40669: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40670: LD_ADDR_VAR 0 5
40674: PUSH
40675: DOUBLE
40676: LD_INT 1
40678: DEC
40679: ST_TO_ADDR
40680: LD_VAR 0 8
40684: PUSH
40685: FOR_TO
40686: IFFALSE 40885
// begin _d := rand ( 0 , 5 ) ;
40688: LD_ADDR_VAR 0 11
40692: PUSH
40693: LD_INT 0
40695: PPUSH
40696: LD_INT 5
40698: PPUSH
40699: CALL_OW 12
40703: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40704: LD_ADDR_VAR 0 12
40708: PUSH
40709: LD_INT 2
40711: PPUSH
40712: LD_INT 6
40714: PPUSH
40715: CALL_OW 12
40719: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40720: LD_ADDR_VAR 0 9
40724: PUSH
40725: LD_VAR 0 2
40729: PPUSH
40730: LD_VAR 0 11
40734: PPUSH
40735: LD_VAR 0 12
40739: PPUSH
40740: CALL_OW 272
40744: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40745: LD_ADDR_VAR 0 10
40749: PUSH
40750: LD_VAR 0 3
40754: PPUSH
40755: LD_VAR 0 11
40759: PPUSH
40760: LD_VAR 0 12
40764: PPUSH
40765: CALL_OW 273
40769: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40770: LD_VAR 0 9
40774: PPUSH
40775: LD_VAR 0 10
40779: PPUSH
40780: CALL_OW 488
40784: IFFALSE 40808
40786: PUSH
40787: LD_VAR 0 9
40791: PUSH
40792: LD_VAR 0 10
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: PUSH
40801: LD_VAR 0 7
40805: IN
40806: NOT
40807: AND
40808: IFFALSE 40827
40810: PUSH
40811: LD_VAR 0 9
40815: PPUSH
40816: LD_VAR 0 10
40820: PPUSH
40821: CALL_OW 458
40825: NOT
40826: AND
40827: IFFALSE 40869
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40829: LD_ADDR_VAR 0 7
40833: PUSH
40834: LD_VAR 0 7
40838: PPUSH
40839: LD_VAR 0 7
40843: PUSH
40844: LD_INT 1
40846: PLUS
40847: PPUSH
40848: LD_VAR 0 9
40852: PUSH
40853: LD_VAR 0 10
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PPUSH
40862: CALL_OW 1
40866: ST_TO_ADDR
40867: GO 40883
// i := i - 1 ;
40869: LD_ADDR_VAR 0 5
40873: PUSH
40874: LD_VAR 0 5
40878: PUSH
40879: LD_INT 1
40881: MINUS
40882: ST_TO_ADDR
// end ;
40883: GO 40685
40885: POP
40886: POP
// for i in tmp do
40887: LD_ADDR_VAR 0 5
40891: PUSH
40892: LD_VAR 0 7
40896: PUSH
40897: FOR_IN
40898: IFFALSE 40936
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40900: LD_VAR 0 1
40904: PPUSH
40905: LD_VAR 0 5
40909: PUSH
40910: LD_INT 1
40912: ARRAY
40913: PPUSH
40914: LD_VAR 0 5
40918: PUSH
40919: LD_INT 2
40921: ARRAY
40922: PPUSH
40923: CALL 39870 0 3
40927: NOT
40928: IFFALSE 40934
// exit ;
40930: POP
40931: POP
40932: GO 40938
40934: GO 40897
40936: POP
40937: POP
// end ;
40938: LD_VAR 0 4
40942: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
40943: LD_INT 0
40945: PPUSH
40946: PPUSH
40947: PPUSH
40948: PPUSH
40949: PPUSH
40950: PPUSH
40951: PPUSH
40952: PPUSH
40953: PPUSH
// if GetClass ( unit ) <> class_sniper then
40954: LD_VAR 0 1
40958: PPUSH
40959: CALL_OW 257
40963: PUSH
40964: LD_INT 5
40966: NONEQUAL
40967: IFFALSE 40971
// exit ;
40969: GO 41441
// dist := 8 ;
40971: LD_ADDR_VAR 0 5
40975: PUSH
40976: LD_INT 8
40978: ST_TO_ADDR
// viewRange := 12 ;
40979: LD_ADDR_VAR 0 8
40983: PUSH
40984: LD_INT 12
40986: ST_TO_ADDR
// side := GetSide ( unit ) ;
40987: LD_ADDR_VAR 0 6
40991: PUSH
40992: LD_VAR 0 1
40996: PPUSH
40997: CALL_OW 255
41001: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
41002: LD_INT 61
41004: PPUSH
41005: LD_VAR 0 6
41009: PPUSH
41010: CALL_OW 321
41014: PUSH
41015: LD_INT 2
41017: EQUAL
41018: IFFALSE 41028
// viewRange := 16 ;
41020: LD_ADDR_VAR 0 8
41024: PUSH
41025: LD_INT 16
41027: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
41028: LD_VAR 0 1
41032: PPUSH
41033: LD_VAR 0 2
41037: PPUSH
41038: LD_VAR 0 3
41042: PPUSH
41043: CALL_OW 297
41047: PUSH
41048: LD_VAR 0 5
41052: GREATER
41053: IFFALSE 41132
// begin ComMoveXY ( unit , x , y ) ;
41055: LD_VAR 0 1
41059: PPUSH
41060: LD_VAR 0 2
41064: PPUSH
41065: LD_VAR 0 3
41069: PPUSH
41070: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
41074: LD_INT 35
41076: PPUSH
41077: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
41081: LD_VAR 0 1
41085: PPUSH
41086: LD_VAR 0 2
41090: PPUSH
41091: LD_VAR 0 3
41095: PPUSH
41096: CALL 78359 0 3
41100: NOT
41101: IFFALSE 41105
// exit ;
41103: GO 41441
// until GetDistUnitXY ( unit , x , y ) < dist ;
41105: LD_VAR 0 1
41109: PPUSH
41110: LD_VAR 0 2
41114: PPUSH
41115: LD_VAR 0 3
41119: PPUSH
41120: CALL_OW 297
41124: PUSH
41125: LD_VAR 0 5
41129: LESS
41130: IFFALSE 41074
// end ; ComTurnXY ( unit , x , y ) ;
41132: LD_VAR 0 1
41136: PPUSH
41137: LD_VAR 0 2
41141: PPUSH
41142: LD_VAR 0 3
41146: PPUSH
41147: CALL_OW 118
// repeat if Multiplayer then
41151: LD_OWVAR 4
41155: IFFALSE 41166
// wait ( 35 ) else
41157: LD_INT 35
41159: PPUSH
41160: CALL_OW 67
41164: GO 41173
// wait ( 5 ) ;
41166: LD_INT 5
41168: PPUSH
41169: CALL_OW 67
// _d := GetDir ( unit ) ;
41173: LD_ADDR_VAR 0 11
41177: PUSH
41178: LD_VAR 0 1
41182: PPUSH
41183: CALL_OW 254
41187: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
41188: LD_ADDR_VAR 0 7
41192: PUSH
41193: LD_VAR 0 1
41197: PPUSH
41198: CALL_OW 250
41202: PPUSH
41203: LD_VAR 0 1
41207: PPUSH
41208: CALL_OW 251
41212: PPUSH
41213: LD_VAR 0 2
41217: PPUSH
41218: LD_VAR 0 3
41222: PPUSH
41223: CALL 80995 0 4
41227: ST_TO_ADDR
// until dir = _d ;
41228: LD_VAR 0 7
41232: PUSH
41233: LD_VAR 0 11
41237: EQUAL
41238: IFFALSE 41151
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
41240: LD_ADDR_VAR 0 9
41244: PUSH
41245: LD_VAR 0 1
41249: PPUSH
41250: CALL_OW 250
41254: PPUSH
41255: LD_VAR 0 7
41259: PPUSH
41260: LD_VAR 0 5
41264: PPUSH
41265: CALL_OW 272
41269: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
41270: LD_ADDR_VAR 0 10
41274: PUSH
41275: LD_VAR 0 1
41279: PPUSH
41280: CALL_OW 251
41284: PPUSH
41285: LD_VAR 0 7
41289: PPUSH
41290: LD_VAR 0 5
41294: PPUSH
41295: CALL_OW 273
41299: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41300: LD_VAR 0 9
41304: PPUSH
41305: LD_VAR 0 10
41309: PPUSH
41310: CALL_OW 488
41314: NOT
41315: IFFALSE 41319
// exit ;
41317: GO 41441
// ComAnimCustom ( unit , 1 ) ;
41319: LD_VAR 0 1
41323: PPUSH
41324: LD_INT 1
41326: PPUSH
41327: CALL_OW 592
// p := 0 ;
41331: LD_ADDR_VAR 0 12
41335: PUSH
41336: LD_INT 0
41338: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
41339: LD_VAR 0 9
41343: PPUSH
41344: LD_VAR 0 10
41348: PPUSH
41349: LD_VAR 0 6
41353: PPUSH
41354: LD_VAR 0 8
41358: PPUSH
41359: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
41363: LD_INT 35
41365: PPUSH
41366: CALL_OW 67
// p := Inc ( p ) ;
41370: LD_ADDR_VAR 0 12
41374: PUSH
41375: LD_VAR 0 12
41379: PPUSH
41380: CALL 80951 0 1
41384: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
41385: LD_VAR 0 12
41389: PUSH
41390: LD_INT 3
41392: EQUAL
41393: IFTRUE 41407
41395: PUSH
41396: LD_VAR 0 1
41400: PPUSH
41401: CALL_OW 302
41405: NOT
41406: OR
41407: IFTRUE 41420
41409: PUSH
41410: LD_VAR 0 1
41414: PPUSH
41415: CALL_OW 301
41419: OR
41420: IFFALSE 41363
// RemoveSeeing ( _x , _y , side ) ;
41422: LD_VAR 0 9
41426: PPUSH
41427: LD_VAR 0 10
41431: PPUSH
41432: LD_VAR 0 6
41436: PPUSH
41437: CALL_OW 331
// end ; end_of_file
41441: LD_VAR 0 4
41445: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41446: LD_INT 0
41448: PPUSH
41449: PPUSH
// if exist_mode then
41450: LD_VAR 0 2
41454: IFFALSE 41500
// begin unit := CreateCharacter ( prefix & ident ) ;
41456: LD_ADDR_VAR 0 5
41460: PUSH
41461: LD_VAR 0 3
41465: PUSH
41466: LD_VAR 0 1
41470: STR
41471: PPUSH
41472: CALL_OW 34
41476: ST_TO_ADDR
// if unit then
41477: LD_VAR 0 5
41481: IFFALSE 41498
// DeleteCharacters ( prefix & ident ) ;
41483: LD_VAR 0 3
41487: PUSH
41488: LD_VAR 0 1
41492: STR
41493: PPUSH
41494: CALL_OW 40
// end else
41498: GO 41515
// unit := NewCharacter ( ident ) ;
41500: LD_ADDR_VAR 0 5
41504: PUSH
41505: LD_VAR 0 1
41509: PPUSH
41510: CALL_OW 25
41514: ST_TO_ADDR
// result := unit ;
41515: LD_ADDR_VAR 0 4
41519: PUSH
41520: LD_VAR 0 5
41524: ST_TO_ADDR
// end ;
41525: LD_VAR 0 4
41529: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
41530: LD_INT 0
41532: PPUSH
41533: PPUSH
// if exist_mode then
41534: LD_VAR 0 2
41538: IFFALSE 41563
// unit := CreateCharacter ( prefix & ident ) else
41540: LD_ADDR_VAR 0 5
41544: PUSH
41545: LD_VAR 0 3
41549: PUSH
41550: LD_VAR 0 1
41554: STR
41555: PPUSH
41556: CALL_OW 34
41560: ST_TO_ADDR
41561: GO 41578
// unit := NewCharacter ( ident ) ;
41563: LD_ADDR_VAR 0 5
41567: PUSH
41568: LD_VAR 0 1
41572: PPUSH
41573: CALL_OW 25
41577: ST_TO_ADDR
// result := unit ;
41578: LD_ADDR_VAR 0 4
41582: PUSH
41583: LD_VAR 0 5
41587: ST_TO_ADDR
// end ;
41588: LD_VAR 0 4
41592: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41593: LD_INT 0
41595: PPUSH
41596: PPUSH
// if not side or not nation then
41597: LD_VAR 0 1
41601: NOT
41602: IFTRUE 41611
41604: PUSH
41605: LD_VAR 0 2
41609: NOT
41610: OR
41611: IFFALSE 41615
// exit ;
41613: GO 42385
// case nation of nation_american :
41615: LD_VAR 0 2
41619: PUSH
41620: LD_INT 1
41622: DOUBLE
41623: EQUAL
41624: IFTRUE 41628
41626: GO 41842
41628: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41629: LD_ADDR_VAR 0 4
41633: PUSH
41634: LD_INT 35
41636: PUSH
41637: LD_INT 45
41639: PUSH
41640: LD_INT 46
41642: PUSH
41643: LD_INT 47
41645: PUSH
41646: LD_INT 82
41648: PUSH
41649: LD_INT 83
41651: PUSH
41652: LD_INT 84
41654: PUSH
41655: LD_INT 85
41657: PUSH
41658: LD_INT 86
41660: PUSH
41661: LD_INT 1
41663: PUSH
41664: LD_INT 2
41666: PUSH
41667: LD_INT 6
41669: PUSH
41670: LD_INT 15
41672: PUSH
41673: LD_INT 16
41675: PUSH
41676: LD_INT 7
41678: PUSH
41679: LD_INT 12
41681: PUSH
41682: LD_INT 13
41684: PUSH
41685: LD_INT 10
41687: PUSH
41688: LD_INT 14
41690: PUSH
41691: LD_INT 20
41693: PUSH
41694: LD_INT 21
41696: PUSH
41697: LD_INT 22
41699: PUSH
41700: LD_INT 25
41702: PUSH
41703: LD_INT 32
41705: PUSH
41706: LD_INT 27
41708: PUSH
41709: LD_INT 36
41711: PUSH
41712: LD_INT 69
41714: PUSH
41715: LD_INT 39
41717: PUSH
41718: LD_INT 34
41720: PUSH
41721: LD_INT 40
41723: PUSH
41724: LD_INT 48
41726: PUSH
41727: LD_INT 49
41729: PUSH
41730: LD_INT 50
41732: PUSH
41733: LD_INT 51
41735: PUSH
41736: LD_INT 52
41738: PUSH
41739: LD_INT 53
41741: PUSH
41742: LD_INT 54
41744: PUSH
41745: LD_INT 55
41747: PUSH
41748: LD_INT 56
41750: PUSH
41751: LD_INT 57
41753: PUSH
41754: LD_INT 58
41756: PUSH
41757: LD_INT 59
41759: PUSH
41760: LD_INT 60
41762: PUSH
41763: LD_INT 61
41765: PUSH
41766: LD_INT 62
41768: PUSH
41769: LD_INT 80
41771: PUSH
41772: LD_INT 82
41774: PUSH
41775: LD_INT 83
41777: PUSH
41778: LD_INT 84
41780: PUSH
41781: LD_INT 85
41783: PUSH
41784: LD_INT 86
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: ST_TO_ADDR
41840: GO 42307
41842: LD_INT 2
41844: DOUBLE
41845: EQUAL
41846: IFTRUE 41850
41848: GO 42076
41850: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
41851: LD_ADDR_VAR 0 4
41855: PUSH
41856: LD_INT 35
41858: PUSH
41859: LD_INT 45
41861: PUSH
41862: LD_INT 46
41864: PUSH
41865: LD_INT 47
41867: PUSH
41868: LD_INT 82
41870: PUSH
41871: LD_INT 83
41873: PUSH
41874: LD_INT 84
41876: PUSH
41877: LD_INT 85
41879: PUSH
41880: LD_INT 87
41882: PUSH
41883: LD_INT 70
41885: PUSH
41886: LD_INT 1
41888: PUSH
41889: LD_INT 11
41891: PUSH
41892: LD_INT 3
41894: PUSH
41895: LD_INT 4
41897: PUSH
41898: LD_INT 5
41900: PUSH
41901: LD_INT 6
41903: PUSH
41904: LD_INT 15
41906: PUSH
41907: LD_INT 18
41909: PUSH
41910: LD_INT 7
41912: PUSH
41913: LD_INT 17
41915: PUSH
41916: LD_INT 8
41918: PUSH
41919: LD_INT 20
41921: PUSH
41922: LD_INT 21
41924: PUSH
41925: LD_INT 22
41927: PUSH
41928: LD_INT 72
41930: PUSH
41931: LD_INT 26
41933: PUSH
41934: LD_INT 69
41936: PUSH
41937: LD_INT 39
41939: PUSH
41940: LD_INT 40
41942: PUSH
41943: LD_INT 41
41945: PUSH
41946: LD_INT 42
41948: PUSH
41949: LD_INT 43
41951: PUSH
41952: LD_INT 48
41954: PUSH
41955: LD_INT 49
41957: PUSH
41958: LD_INT 50
41960: PUSH
41961: LD_INT 51
41963: PUSH
41964: LD_INT 52
41966: PUSH
41967: LD_INT 53
41969: PUSH
41970: LD_INT 54
41972: PUSH
41973: LD_INT 55
41975: PUSH
41976: LD_INT 56
41978: PUSH
41979: LD_INT 60
41981: PUSH
41982: LD_INT 61
41984: PUSH
41985: LD_INT 62
41987: PUSH
41988: LD_INT 66
41990: PUSH
41991: LD_INT 67
41993: PUSH
41994: LD_INT 68
41996: PUSH
41997: LD_INT 81
41999: PUSH
42000: LD_INT 82
42002: PUSH
42003: LD_INT 83
42005: PUSH
42006: LD_INT 84
42008: PUSH
42009: LD_INT 85
42011: PUSH
42012: LD_INT 87
42014: PUSH
42015: LD_INT 88
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: ST_TO_ADDR
42074: GO 42307
42076: LD_INT 3
42078: DOUBLE
42079: EQUAL
42080: IFTRUE 42084
42082: GO 42306
42084: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
42085: LD_ADDR_VAR 0 4
42089: PUSH
42090: LD_INT 46
42092: PUSH
42093: LD_INT 47
42095: PUSH
42096: LD_INT 1
42098: PUSH
42099: LD_INT 2
42101: PUSH
42102: LD_INT 82
42104: PUSH
42105: LD_INT 83
42107: PUSH
42108: LD_INT 84
42110: PUSH
42111: LD_INT 85
42113: PUSH
42114: LD_INT 86
42116: PUSH
42117: LD_INT 11
42119: PUSH
42120: LD_INT 9
42122: PUSH
42123: LD_INT 20
42125: PUSH
42126: LD_INT 19
42128: PUSH
42129: LD_INT 21
42131: PUSH
42132: LD_INT 24
42134: PUSH
42135: LD_INT 22
42137: PUSH
42138: LD_INT 25
42140: PUSH
42141: LD_INT 28
42143: PUSH
42144: LD_INT 29
42146: PUSH
42147: LD_INT 30
42149: PUSH
42150: LD_INT 31
42152: PUSH
42153: LD_INT 37
42155: PUSH
42156: LD_INT 38
42158: PUSH
42159: LD_INT 32
42161: PUSH
42162: LD_INT 27
42164: PUSH
42165: LD_INT 33
42167: PUSH
42168: LD_INT 69
42170: PUSH
42171: LD_INT 39
42173: PUSH
42174: LD_INT 34
42176: PUSH
42177: LD_INT 40
42179: PUSH
42180: LD_INT 71
42182: PUSH
42183: LD_INT 23
42185: PUSH
42186: LD_INT 44
42188: PUSH
42189: LD_INT 48
42191: PUSH
42192: LD_INT 49
42194: PUSH
42195: LD_INT 50
42197: PUSH
42198: LD_INT 51
42200: PUSH
42201: LD_INT 52
42203: PUSH
42204: LD_INT 53
42206: PUSH
42207: LD_INT 54
42209: PUSH
42210: LD_INT 55
42212: PUSH
42213: LD_INT 56
42215: PUSH
42216: LD_INT 57
42218: PUSH
42219: LD_INT 58
42221: PUSH
42222: LD_INT 59
42224: PUSH
42225: LD_INT 63
42227: PUSH
42228: LD_INT 64
42230: PUSH
42231: LD_INT 65
42233: PUSH
42234: LD_INT 82
42236: PUSH
42237: LD_INT 83
42239: PUSH
42240: LD_INT 84
42242: PUSH
42243: LD_INT 85
42245: PUSH
42246: LD_INT 86
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: ST_TO_ADDR
42304: GO 42307
42306: POP
// if state > - 1 and state < 3 then
42307: LD_VAR 0 3
42311: PUSH
42312: LD_INT 1
42314: NEG
42315: GREATER
42316: IFFALSE 42328
42318: PUSH
42319: LD_VAR 0 3
42323: PUSH
42324: LD_INT 3
42326: LESS
42327: AND
42328: IFFALSE 42385
// for i in result do
42330: LD_ADDR_VAR 0 5
42334: PUSH
42335: LD_VAR 0 4
42339: PUSH
42340: FOR_IN
42341: IFFALSE 42383
// if GetTech ( i , side ) <> state then
42343: LD_VAR 0 5
42347: PPUSH
42348: LD_VAR 0 1
42352: PPUSH
42353: CALL_OW 321
42357: PUSH
42358: LD_VAR 0 3
42362: NONEQUAL
42363: IFFALSE 42381
// result := result diff i ;
42365: LD_ADDR_VAR 0 4
42369: PUSH
42370: LD_VAR 0 4
42374: PUSH
42375: LD_VAR 0 5
42379: DIFF
42380: ST_TO_ADDR
42381: GO 42340
42383: POP
42384: POP
// end ;
42385: LD_VAR 0 4
42389: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
42390: LD_INT 0
42392: PPUSH
42393: PPUSH
42394: PPUSH
// result := true ;
42395: LD_ADDR_VAR 0 3
42399: PUSH
42400: LD_INT 1
42402: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
42403: LD_ADDR_VAR 0 5
42407: PUSH
42408: LD_VAR 0 2
42412: PPUSH
42413: CALL_OW 480
42417: ST_TO_ADDR
// if not tmp then
42418: LD_VAR 0 5
42422: NOT
42423: IFFALSE 42427
// exit ;
42425: GO 42476
// for i in tmp do
42427: LD_ADDR_VAR 0 4
42431: PUSH
42432: LD_VAR 0 5
42436: PUSH
42437: FOR_IN
42438: IFFALSE 42474
// if GetTech ( i , side ) <> state_researched then
42440: LD_VAR 0 4
42444: PPUSH
42445: LD_VAR 0 1
42449: PPUSH
42450: CALL_OW 321
42454: PUSH
42455: LD_INT 2
42457: NONEQUAL
42458: IFFALSE 42472
// begin result := false ;
42460: LD_ADDR_VAR 0 3
42464: PUSH
42465: LD_INT 0
42467: ST_TO_ADDR
// exit ;
42468: POP
42469: POP
42470: GO 42476
// end ;
42472: GO 42437
42474: POP
42475: POP
// end ;
42476: LD_VAR 0 3
42480: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42481: LD_INT 0
42483: PPUSH
42484: PPUSH
42485: PPUSH
42486: PPUSH
42487: PPUSH
42488: PPUSH
42489: PPUSH
42490: PPUSH
42491: PPUSH
42492: PPUSH
42493: PPUSH
42494: PPUSH
42495: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42496: LD_VAR 0 1
42500: NOT
42501: IFTRUE 42518
42503: PUSH
42504: LD_VAR 0 1
42508: PPUSH
42509: CALL_OW 257
42513: PUSH
42514: LD_INT 9
42516: NONEQUAL
42517: OR
42518: IFFALSE 42522
// exit ;
42520: GO 43101
// side := GetSide ( unit ) ;
42522: LD_ADDR_VAR 0 9
42526: PUSH
42527: LD_VAR 0 1
42531: PPUSH
42532: CALL_OW 255
42536: ST_TO_ADDR
// tech_space := tech_spacanom ;
42537: LD_ADDR_VAR 0 12
42541: PUSH
42542: LD_INT 29
42544: ST_TO_ADDR
// tech_time := tech_taurad ;
42545: LD_ADDR_VAR 0 13
42549: PUSH
42550: LD_INT 28
42552: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42553: LD_ADDR_VAR 0 11
42557: PUSH
42558: LD_VAR 0 1
42562: PPUSH
42563: CALL_OW 310
42567: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42568: LD_VAR 0 11
42572: PPUSH
42573: CALL_OW 247
42577: PUSH
42578: LD_INT 2
42580: EQUAL
42581: IFFALSE 42585
// exit ;
42583: GO 43101
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42585: LD_ADDR_VAR 0 8
42589: PUSH
42590: LD_INT 81
42592: PUSH
42593: LD_VAR 0 9
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 3
42604: PUSH
42605: LD_INT 21
42607: PUSH
42608: LD_INT 3
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PPUSH
42623: CALL_OW 69
42627: ST_TO_ADDR
// if not tmp then
42628: LD_VAR 0 8
42632: NOT
42633: IFFALSE 42637
// exit ;
42635: GO 43101
// if in_unit then
42637: LD_VAR 0 11
42641: IFFALSE 42665
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42643: LD_ADDR_VAR 0 10
42647: PUSH
42648: LD_VAR 0 8
42652: PPUSH
42653: LD_VAR 0 11
42657: PPUSH
42658: CALL_OW 74
42662: ST_TO_ADDR
42663: GO 42685
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42665: LD_ADDR_VAR 0 10
42669: PUSH
42670: LD_VAR 0 8
42674: PPUSH
42675: LD_VAR 0 1
42679: PPUSH
42680: CALL_OW 74
42684: ST_TO_ADDR
// if not enemy then
42685: LD_VAR 0 10
42689: NOT
42690: IFFALSE 42694
// exit ;
42692: GO 43101
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42694: LD_VAR 0 11
42698: IFFALSE 42720
42700: PUSH
42701: LD_VAR 0 11
42705: PPUSH
42706: LD_VAR 0 10
42710: PPUSH
42711: CALL_OW 296
42715: PUSH
42716: LD_INT 13
42718: GREATER
42719: AND
42720: IFTRUE 42742
42722: PUSH
42723: LD_VAR 0 1
42727: PPUSH
42728: LD_VAR 0 10
42732: PPUSH
42733: CALL_OW 296
42737: PUSH
42738: LD_INT 12
42740: GREATER
42741: OR
42742: IFFALSE 42746
// exit ;
42744: GO 43101
// missile := [ 1 ] ;
42746: LD_ADDR_VAR 0 14
42750: PUSH
42751: LD_INT 1
42753: PUSH
42754: EMPTY
42755: LIST
42756: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42757: LD_VAR 0 9
42761: PPUSH
42762: LD_VAR 0 12
42766: PPUSH
42767: CALL_OW 325
42771: IFFALSE 42800
// missile := Replace ( missile , missile + 1 , 2 ) ;
42773: LD_ADDR_VAR 0 14
42777: PUSH
42778: LD_VAR 0 14
42782: PPUSH
42783: LD_VAR 0 14
42787: PUSH
42788: LD_INT 1
42790: PLUS
42791: PPUSH
42792: LD_INT 2
42794: PPUSH
42795: CALL_OW 1
42799: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42800: LD_VAR 0 9
42804: PPUSH
42805: LD_VAR 0 13
42809: PPUSH
42810: CALL_OW 325
42814: IFFALSE 42838
42816: PUSH
42817: LD_VAR 0 10
42821: PPUSH
42822: CALL_OW 255
42826: PPUSH
42827: LD_VAR 0 13
42831: PPUSH
42832: CALL_OW 325
42836: NOT
42837: AND
42838: IFFALSE 42867
// missile := Replace ( missile , missile + 1 , 3 ) ;
42840: LD_ADDR_VAR 0 14
42844: PUSH
42845: LD_VAR 0 14
42849: PPUSH
42850: LD_VAR 0 14
42854: PUSH
42855: LD_INT 1
42857: PLUS
42858: PPUSH
42859: LD_INT 3
42861: PPUSH
42862: CALL_OW 1
42866: ST_TO_ADDR
// if missile < 2 then
42867: LD_VAR 0 14
42871: PUSH
42872: LD_INT 2
42874: LESS
42875: IFFALSE 42879
// exit ;
42877: GO 43101
// x := GetX ( enemy ) ;
42879: LD_ADDR_VAR 0 4
42883: PUSH
42884: LD_VAR 0 10
42888: PPUSH
42889: CALL_OW 250
42893: ST_TO_ADDR
// y := GetY ( enemy ) ;
42894: LD_ADDR_VAR 0 5
42898: PUSH
42899: LD_VAR 0 10
42903: PPUSH
42904: CALL_OW 251
42908: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42909: LD_ADDR_VAR 0 6
42913: PUSH
42914: LD_VAR 0 4
42918: PUSH
42919: LD_INT 1
42921: NEG
42922: PPUSH
42923: LD_INT 1
42925: PPUSH
42926: CALL_OW 12
42930: PLUS
42931: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42932: LD_ADDR_VAR 0 7
42936: PUSH
42937: LD_VAR 0 5
42941: PUSH
42942: LD_INT 1
42944: NEG
42945: PPUSH
42946: LD_INT 1
42948: PPUSH
42949: CALL_OW 12
42953: PLUS
42954: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42955: LD_VAR 0 6
42959: PPUSH
42960: LD_VAR 0 7
42964: PPUSH
42965: CALL_OW 488
42969: NOT
42970: IFFALSE 42992
// begin _x := x ;
42972: LD_ADDR_VAR 0 6
42976: PUSH
42977: LD_VAR 0 4
42981: ST_TO_ADDR
// _y := y ;
42982: LD_ADDR_VAR 0 7
42986: PUSH
42987: LD_VAR 0 5
42991: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42992: LD_ADDR_VAR 0 3
42996: PUSH
42997: LD_INT 1
42999: PPUSH
43000: LD_VAR 0 14
43004: PPUSH
43005: CALL_OW 12
43009: ST_TO_ADDR
// case i of 1 :
43010: LD_VAR 0 3
43014: PUSH
43015: LD_INT 1
43017: DOUBLE
43018: EQUAL
43019: IFTRUE 43023
43021: GO 43040
43023: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
43024: LD_VAR 0 1
43028: PPUSH
43029: LD_VAR 0 10
43033: PPUSH
43034: CALL_OW 115
43038: GO 43101
43040: LD_INT 2
43042: DOUBLE
43043: EQUAL
43044: IFTRUE 43048
43046: GO 43070
43048: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
43049: LD_VAR 0 1
43053: PPUSH
43054: LD_VAR 0 6
43058: PPUSH
43059: LD_VAR 0 7
43063: PPUSH
43064: CALL_OW 153
43068: GO 43101
43070: LD_INT 3
43072: DOUBLE
43073: EQUAL
43074: IFTRUE 43078
43076: GO 43100
43078: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
43079: LD_VAR 0 1
43083: PPUSH
43084: LD_VAR 0 6
43088: PPUSH
43089: LD_VAR 0 7
43093: PPUSH
43094: CALL_OW 154
43098: GO 43101
43100: POP
// end ;
43101: LD_VAR 0 2
43105: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
43106: LD_INT 0
43108: PPUSH
43109: PPUSH
43110: PPUSH
43111: PPUSH
43112: PPUSH
43113: PPUSH
// if not unit or not building then
43114: LD_VAR 0 1
43118: NOT
43119: IFTRUE 43128
43121: PUSH
43122: LD_VAR 0 2
43126: NOT
43127: OR
43128: IFFALSE 43132
// exit ;
43130: GO 43290
// x := GetX ( building ) ;
43132: LD_ADDR_VAR 0 5
43136: PUSH
43137: LD_VAR 0 2
43141: PPUSH
43142: CALL_OW 250
43146: ST_TO_ADDR
// y := GetY ( building ) ;
43147: LD_ADDR_VAR 0 6
43151: PUSH
43152: LD_VAR 0 2
43156: PPUSH
43157: CALL_OW 251
43161: ST_TO_ADDR
// for i := 0 to 5 do
43162: LD_ADDR_VAR 0 4
43166: PUSH
43167: DOUBLE
43168: LD_INT 0
43170: DEC
43171: ST_TO_ADDR
43172: LD_INT 5
43174: PUSH
43175: FOR_TO
43176: IFFALSE 43288
// begin _x := ShiftX ( x , i , 3 ) ;
43178: LD_ADDR_VAR 0 7
43182: PUSH
43183: LD_VAR 0 5
43187: PPUSH
43188: LD_VAR 0 4
43192: PPUSH
43193: LD_INT 3
43195: PPUSH
43196: CALL_OW 272
43200: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
43201: LD_ADDR_VAR 0 8
43205: PUSH
43206: LD_VAR 0 6
43210: PPUSH
43211: LD_VAR 0 4
43215: PPUSH
43216: LD_INT 3
43218: PPUSH
43219: CALL_OW 273
43223: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43224: LD_VAR 0 7
43228: PPUSH
43229: LD_VAR 0 8
43233: PPUSH
43234: CALL_OW 488
43238: NOT
43239: IFFALSE 43243
// continue ;
43241: GO 43175
// if HexInfo ( _x , _y ) = 0 then
43243: LD_VAR 0 7
43247: PPUSH
43248: LD_VAR 0 8
43252: PPUSH
43253: CALL_OW 428
43257: PUSH
43258: LD_INT 0
43260: EQUAL
43261: IFFALSE 43286
// begin ComMoveXY ( unit , _x , _y ) ;
43263: LD_VAR 0 1
43267: PPUSH
43268: LD_VAR 0 7
43272: PPUSH
43273: LD_VAR 0 8
43277: PPUSH
43278: CALL_OW 111
// exit ;
43282: POP
43283: POP
43284: GO 43290
// end ; end ;
43286: GO 43175
43288: POP
43289: POP
// end ;
43290: LD_VAR 0 3
43294: RET
// export function ScanBase ( side , base_area ) ; begin
43295: LD_INT 0
43297: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
43298: LD_ADDR_VAR 0 3
43302: PUSH
43303: LD_VAR 0 2
43307: PPUSH
43308: LD_INT 81
43310: PUSH
43311: LD_VAR 0 1
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PPUSH
43320: CALL_OW 70
43324: ST_TO_ADDR
// end ;
43325: LD_VAR 0 3
43329: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
43330: LD_INT 0
43332: PPUSH
43333: PPUSH
43334: PPUSH
43335: PPUSH
// result := false ;
43336: LD_ADDR_VAR 0 2
43340: PUSH
43341: LD_INT 0
43343: ST_TO_ADDR
// side := GetSide ( unit ) ;
43344: LD_ADDR_VAR 0 3
43348: PUSH
43349: LD_VAR 0 1
43353: PPUSH
43354: CALL_OW 255
43358: ST_TO_ADDR
// nat := GetNation ( unit ) ;
43359: LD_ADDR_VAR 0 4
43363: PUSH
43364: LD_VAR 0 1
43368: PPUSH
43369: CALL_OW 248
43373: ST_TO_ADDR
// case nat of 1 :
43374: LD_VAR 0 4
43378: PUSH
43379: LD_INT 1
43381: DOUBLE
43382: EQUAL
43383: IFTRUE 43387
43385: GO 43398
43387: POP
// tech := tech_lassight ; 2 :
43388: LD_ADDR_VAR 0 5
43392: PUSH
43393: LD_INT 12
43395: ST_TO_ADDR
43396: GO 43437
43398: LD_INT 2
43400: DOUBLE
43401: EQUAL
43402: IFTRUE 43406
43404: GO 43417
43406: POP
// tech := tech_mortar ; 3 :
43407: LD_ADDR_VAR 0 5
43411: PUSH
43412: LD_INT 41
43414: ST_TO_ADDR
43415: GO 43437
43417: LD_INT 3
43419: DOUBLE
43420: EQUAL
43421: IFTRUE 43425
43423: GO 43436
43425: POP
// tech := tech_bazooka ; end ;
43426: LD_ADDR_VAR 0 5
43430: PUSH
43431: LD_INT 44
43433: ST_TO_ADDR
43434: GO 43437
43436: POP
// if Researched ( side , tech ) then
43437: LD_VAR 0 3
43441: PPUSH
43442: LD_VAR 0 5
43446: PPUSH
43447: CALL_OW 325
43451: IFFALSE 43478
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
43453: LD_ADDR_VAR 0 2
43457: PUSH
43458: LD_INT 5
43460: PUSH
43461: LD_INT 8
43463: PUSH
43464: LD_INT 9
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: LIST
43471: PUSH
43472: LD_VAR 0 4
43476: ARRAY
43477: ST_TO_ADDR
// end ;
43478: LD_VAR 0 2
43482: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
43483: LD_INT 0
43485: PPUSH
43486: PPUSH
43487: PPUSH
// if not mines then
43488: LD_VAR 0 2
43492: NOT
43493: IFFALSE 43497
// exit ;
43495: GO 43641
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43497: LD_ADDR_VAR 0 5
43501: PUSH
43502: LD_INT 81
43504: PUSH
43505: LD_VAR 0 1
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 3
43516: PUSH
43517: LD_INT 21
43519: PUSH
43520: LD_INT 3
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PPUSH
43535: CALL_OW 69
43539: ST_TO_ADDR
// for i in mines do
43540: LD_ADDR_VAR 0 4
43544: PUSH
43545: LD_VAR 0 2
43549: PUSH
43550: FOR_IN
43551: IFFALSE 43639
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43553: LD_VAR 0 4
43557: PUSH
43558: LD_INT 1
43560: ARRAY
43561: PPUSH
43562: LD_VAR 0 4
43566: PUSH
43567: LD_INT 2
43569: ARRAY
43570: PPUSH
43571: CALL_OW 458
43575: NOT
43576: IFFALSE 43580
// continue ;
43578: GO 43550
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43580: LD_VAR 0 4
43584: PUSH
43585: LD_INT 1
43587: ARRAY
43588: PPUSH
43589: LD_VAR 0 4
43593: PUSH
43594: LD_INT 2
43596: ARRAY
43597: PPUSH
43598: CALL_OW 428
43602: PUSH
43603: LD_VAR 0 5
43607: IN
43608: IFFALSE 43637
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43610: LD_VAR 0 4
43614: PUSH
43615: LD_INT 1
43617: ARRAY
43618: PPUSH
43619: LD_VAR 0 4
43623: PUSH
43624: LD_INT 2
43626: ARRAY
43627: PPUSH
43628: LD_VAR 0 1
43632: PPUSH
43633: CALL_OW 456
// end ;
43637: GO 43550
43639: POP
43640: POP
// end ;
43641: LD_VAR 0 3
43645: RET
// export function Count ( array ) ; begin
43646: LD_INT 0
43648: PPUSH
// result := array + 0 ;
43649: LD_ADDR_VAR 0 2
43653: PUSH
43654: LD_VAR 0 1
43658: PUSH
43659: LD_INT 0
43661: PLUS
43662: ST_TO_ADDR
// end ;
43663: LD_VAR 0 2
43667: RET
// export function IsEmpty ( building ) ; begin
43668: LD_INT 0
43670: PPUSH
// if not building then
43671: LD_VAR 0 1
43675: NOT
43676: IFFALSE 43680
// exit ;
43678: GO 43723
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43680: LD_ADDR_VAR 0 2
43684: PUSH
43685: LD_VAR 0 1
43689: PUSH
43690: LD_INT 22
43692: PUSH
43693: LD_VAR 0 1
43697: PPUSH
43698: CALL_OW 255
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 58
43709: PUSH
43710: EMPTY
43711: LIST
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PPUSH
43717: CALL_OW 69
43721: IN
43722: ST_TO_ADDR
// end ;
43723: LD_VAR 0 2
43727: RET
// export function IsNotFull ( building ) ; var places ; begin
43728: LD_INT 0
43730: PPUSH
43731: PPUSH
// if not building then
43732: LD_VAR 0 1
43736: NOT
43737: IFFALSE 43741
// exit ;
43739: GO 43769
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
43741: LD_ADDR_VAR 0 2
43745: PUSH
43746: LD_VAR 0 1
43750: PPUSH
43751: LD_INT 3
43753: PUSH
43754: LD_INT 62
43756: PUSH
43757: EMPTY
43758: LIST
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PPUSH
43764: CALL_OW 72
43768: ST_TO_ADDR
// end ;
43769: LD_VAR 0 2
43773: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43774: LD_INT 0
43776: PPUSH
43777: PPUSH
43778: PPUSH
43779: PPUSH
// tmp := [ ] ;
43780: LD_ADDR_VAR 0 3
43784: PUSH
43785: EMPTY
43786: ST_TO_ADDR
// list := [ ] ;
43787: LD_ADDR_VAR 0 5
43791: PUSH
43792: EMPTY
43793: ST_TO_ADDR
// for i = 16 to 25 do
43794: LD_ADDR_VAR 0 4
43798: PUSH
43799: DOUBLE
43800: LD_INT 16
43802: DEC
43803: ST_TO_ADDR
43804: LD_INT 25
43806: PUSH
43807: FOR_TO
43808: IFFALSE 43881
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43810: LD_ADDR_VAR 0 3
43814: PUSH
43815: LD_VAR 0 3
43819: PUSH
43820: LD_INT 22
43822: PUSH
43823: LD_VAR 0 1
43827: PPUSH
43828: CALL_OW 255
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 91
43839: PUSH
43840: LD_VAR 0 1
43844: PUSH
43845: LD_INT 6
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 30
43855: PUSH
43856: LD_VAR 0 4
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: LIST
43869: PUSH
43870: EMPTY
43871: LIST
43872: PPUSH
43873: CALL_OW 69
43877: ADD
43878: ST_TO_ADDR
43879: GO 43807
43881: POP
43882: POP
// for i = 1 to tmp do
43883: LD_ADDR_VAR 0 4
43887: PUSH
43888: DOUBLE
43889: LD_INT 1
43891: DEC
43892: ST_TO_ADDR
43893: LD_VAR 0 3
43897: PUSH
43898: FOR_TO
43899: IFFALSE 43987
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43901: LD_ADDR_VAR 0 5
43905: PUSH
43906: LD_VAR 0 5
43910: PUSH
43911: LD_VAR 0 3
43915: PUSH
43916: LD_VAR 0 4
43920: ARRAY
43921: PPUSH
43922: CALL_OW 266
43926: PUSH
43927: LD_VAR 0 3
43931: PUSH
43932: LD_VAR 0 4
43936: ARRAY
43937: PPUSH
43938: CALL_OW 250
43942: PUSH
43943: LD_VAR 0 3
43947: PUSH
43948: LD_VAR 0 4
43952: ARRAY
43953: PPUSH
43954: CALL_OW 251
43958: PUSH
43959: LD_VAR 0 3
43963: PUSH
43964: LD_VAR 0 4
43968: ARRAY
43969: PPUSH
43970: CALL_OW 254
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: PUSH
43981: EMPTY
43982: LIST
43983: ADD
43984: ST_TO_ADDR
43985: GO 43898
43987: POP
43988: POP
// result := list ;
43989: LD_ADDR_VAR 0 2
43993: PUSH
43994: LD_VAR 0 5
43998: ST_TO_ADDR
// end ;
43999: LD_VAR 0 2
44003: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
44004: LD_INT 0
44006: PPUSH
44007: PPUSH
44008: PPUSH
44009: PPUSH
44010: PPUSH
44011: PPUSH
44012: PPUSH
// if not factory then
44013: LD_VAR 0 1
44017: NOT
44018: IFFALSE 44022
// exit ;
44020: GO 44625
// if control = control_apeman then
44022: LD_VAR 0 4
44026: PUSH
44027: LD_INT 5
44029: EQUAL
44030: IFFALSE 44139
// begin tmp := UnitsInside ( factory ) ;
44032: LD_ADDR_VAR 0 8
44036: PUSH
44037: LD_VAR 0 1
44041: PPUSH
44042: CALL_OW 313
44046: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
44047: LD_VAR 0 8
44051: PPUSH
44052: LD_INT 25
44054: PUSH
44055: LD_INT 12
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PPUSH
44062: CALL_OW 72
44066: NOT
44067: IFFALSE 44077
// control := control_manual ;
44069: LD_ADDR_VAR 0 4
44073: PUSH
44074: LD_INT 1
44076: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
44077: LD_ADDR_VAR 0 8
44081: PUSH
44082: LD_VAR 0 1
44086: PPUSH
44087: CALL 43774 0 1
44091: ST_TO_ADDR
// if tmp then
44092: LD_VAR 0 8
44096: IFFALSE 44139
// begin for i in tmp do
44098: LD_ADDR_VAR 0 7
44102: PUSH
44103: LD_VAR 0 8
44107: PUSH
44108: FOR_IN
44109: IFFALSE 44137
// if i [ 1 ] = b_ext_radio then
44111: LD_VAR 0 7
44115: PUSH
44116: LD_INT 1
44118: ARRAY
44119: PUSH
44120: LD_INT 22
44122: EQUAL
44123: IFFALSE 44135
// begin control := control_remote ;
44125: LD_ADDR_VAR 0 4
44129: PUSH
44130: LD_INT 2
44132: ST_TO_ADDR
// break ;
44133: GO 44137
// end ;
44135: GO 44108
44137: POP
44138: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44139: LD_VAR 0 1
44143: PPUSH
44144: LD_VAR 0 2
44148: PPUSH
44149: LD_VAR 0 3
44153: PPUSH
44154: LD_VAR 0 4
44158: PPUSH
44159: LD_VAR 0 5
44163: PPUSH
44164: CALL_OW 448
44168: IFFALSE 44203
// begin result := [ chassis , engine , control , weapon ] ;
44170: LD_ADDR_VAR 0 6
44174: PUSH
44175: LD_VAR 0 2
44179: PUSH
44180: LD_VAR 0 3
44184: PUSH
44185: LD_VAR 0 4
44189: PUSH
44190: LD_VAR 0 5
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: LIST
44199: LIST
44200: ST_TO_ADDR
// exit ;
44201: GO 44625
// end ; _chassis := AvailableChassisList ( factory ) ;
44203: LD_ADDR_VAR 0 9
44207: PUSH
44208: LD_VAR 0 1
44212: PPUSH
44213: CALL_OW 475
44217: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
44218: LD_ADDR_VAR 0 11
44222: PUSH
44223: LD_VAR 0 1
44227: PPUSH
44228: CALL_OW 476
44232: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
44233: LD_ADDR_VAR 0 12
44237: PUSH
44238: LD_VAR 0 1
44242: PPUSH
44243: CALL_OW 477
44247: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
44248: LD_ADDR_VAR 0 10
44252: PUSH
44253: LD_VAR 0 1
44257: PPUSH
44258: CALL_OW 478
44262: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
44263: LD_VAR 0 9
44267: NOT
44268: IFTRUE 44277
44270: PUSH
44271: LD_VAR 0 11
44275: NOT
44276: OR
44277: IFTRUE 44286
44279: PUSH
44280: LD_VAR 0 12
44284: NOT
44285: OR
44286: IFTRUE 44295
44288: PUSH
44289: LD_VAR 0 10
44293: NOT
44294: OR
44295: IFFALSE 44330
// begin result := [ chassis , engine , control , weapon ] ;
44297: LD_ADDR_VAR 0 6
44301: PUSH
44302: LD_VAR 0 2
44306: PUSH
44307: LD_VAR 0 3
44311: PUSH
44312: LD_VAR 0 4
44316: PUSH
44317: LD_VAR 0 5
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: ST_TO_ADDR
// exit ;
44328: GO 44625
// end ; if not chassis in _chassis then
44330: LD_VAR 0 2
44334: PUSH
44335: LD_VAR 0 9
44339: IN
44340: NOT
44341: IFFALSE 44367
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
44343: LD_ADDR_VAR 0 2
44347: PUSH
44348: LD_VAR 0 9
44352: PUSH
44353: LD_INT 1
44355: PPUSH
44356: LD_VAR 0 9
44360: PPUSH
44361: CALL_OW 12
44365: ARRAY
44366: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
44367: LD_VAR 0 2
44371: PPUSH
44372: LD_VAR 0 3
44376: PPUSH
44377: CALL 44630 0 2
44381: NOT
44382: IFFALSE 44443
// repeat engine := _engine [ 1 ] ;
44384: LD_ADDR_VAR 0 3
44388: PUSH
44389: LD_VAR 0 11
44393: PUSH
44394: LD_INT 1
44396: ARRAY
44397: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44398: LD_ADDR_VAR 0 11
44402: PUSH
44403: LD_VAR 0 11
44407: PPUSH
44408: LD_INT 1
44410: PPUSH
44411: CALL_OW 3
44415: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44416: LD_VAR 0 2
44420: PPUSH
44421: LD_VAR 0 3
44425: PPUSH
44426: CALL 44630 0 2
44430: IFTRUE 44441
44432: PUSH
44433: LD_VAR 0 11
44437: PUSH
44438: EMPTY
44439: EQUAL
44440: OR
44441: IFFALSE 44384
// if not control in _control then
44443: LD_VAR 0 4
44447: PUSH
44448: LD_VAR 0 12
44452: IN
44453: NOT
44454: IFFALSE 44480
// control := _control [ rand ( 1 , _control ) ] ;
44456: LD_ADDR_VAR 0 4
44460: PUSH
44461: LD_VAR 0 12
44465: PUSH
44466: LD_INT 1
44468: PPUSH
44469: LD_VAR 0 12
44473: PPUSH
44474: CALL_OW 12
44478: ARRAY
44479: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44480: LD_VAR 0 2
44484: PPUSH
44485: LD_VAR 0 5
44489: PPUSH
44490: CALL 44852 0 2
44494: NOT
44495: IFFALSE 44556
// repeat weapon := _weapon [ 1 ] ;
44497: LD_ADDR_VAR 0 5
44501: PUSH
44502: LD_VAR 0 10
44506: PUSH
44507: LD_INT 1
44509: ARRAY
44510: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44511: LD_ADDR_VAR 0 10
44515: PUSH
44516: LD_VAR 0 10
44520: PPUSH
44521: LD_INT 1
44523: PPUSH
44524: CALL_OW 3
44528: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44529: LD_VAR 0 2
44533: PPUSH
44534: LD_VAR 0 5
44538: PPUSH
44539: CALL 44852 0 2
44543: IFTRUE 44554
44545: PUSH
44546: LD_VAR 0 10
44550: PUSH
44551: EMPTY
44552: EQUAL
44553: OR
44554: IFFALSE 44497
// result := [ ] ;
44556: LD_ADDR_VAR 0 6
44560: PUSH
44561: EMPTY
44562: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44563: LD_VAR 0 1
44567: PPUSH
44568: LD_VAR 0 2
44572: PPUSH
44573: LD_VAR 0 3
44577: PPUSH
44578: LD_VAR 0 4
44582: PPUSH
44583: LD_VAR 0 5
44587: PPUSH
44588: CALL_OW 448
44592: IFFALSE 44625
// result := [ chassis , engine , control , weapon ] ;
44594: LD_ADDR_VAR 0 6
44598: PUSH
44599: LD_VAR 0 2
44603: PUSH
44604: LD_VAR 0 3
44608: PUSH
44609: LD_VAR 0 4
44613: PUSH
44614: LD_VAR 0 5
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: ST_TO_ADDR
// end ;
44625: LD_VAR 0 6
44629: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44630: LD_INT 0
44632: PPUSH
// if not chassis or not engine then
44633: LD_VAR 0 1
44637: NOT
44638: IFTRUE 44647
44640: PUSH
44641: LD_VAR 0 2
44645: NOT
44646: OR
44647: IFFALSE 44651
// exit ;
44649: GO 44847
// case engine of engine_solar :
44651: LD_VAR 0 2
44655: PUSH
44656: LD_INT 2
44658: DOUBLE
44659: EQUAL
44660: IFTRUE 44664
44662: GO 44702
44664: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44665: LD_ADDR_VAR 0 3
44669: PUSH
44670: LD_INT 11
44672: PUSH
44673: LD_INT 12
44675: PUSH
44676: LD_INT 13
44678: PUSH
44679: LD_INT 14
44681: PUSH
44682: LD_INT 1
44684: PUSH
44685: LD_INT 2
44687: PUSH
44688: LD_INT 3
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: ST_TO_ADDR
44700: GO 44831
44702: LD_INT 1
44704: DOUBLE
44705: EQUAL
44706: IFTRUE 44710
44708: GO 44772
44710: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44711: LD_ADDR_VAR 0 3
44715: PUSH
44716: LD_INT 11
44718: PUSH
44719: LD_INT 12
44721: PUSH
44722: LD_INT 13
44724: PUSH
44725: LD_INT 14
44727: PUSH
44728: LD_INT 1
44730: PUSH
44731: LD_INT 2
44733: PUSH
44734: LD_INT 3
44736: PUSH
44737: LD_INT 4
44739: PUSH
44740: LD_INT 5
44742: PUSH
44743: LD_INT 21
44745: PUSH
44746: LD_INT 23
44748: PUSH
44749: LD_INT 22
44751: PUSH
44752: LD_INT 24
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: ST_TO_ADDR
44770: GO 44831
44772: LD_INT 3
44774: DOUBLE
44775: EQUAL
44776: IFTRUE 44780
44778: GO 44830
44780: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44781: LD_ADDR_VAR 0 3
44785: PUSH
44786: LD_INT 13
44788: PUSH
44789: LD_INT 14
44791: PUSH
44792: LD_INT 2
44794: PUSH
44795: LD_INT 3
44797: PUSH
44798: LD_INT 4
44800: PUSH
44801: LD_INT 5
44803: PUSH
44804: LD_INT 21
44806: PUSH
44807: LD_INT 22
44809: PUSH
44810: LD_INT 23
44812: PUSH
44813: LD_INT 24
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: ST_TO_ADDR
44828: GO 44831
44830: POP
// result := ( chassis in result ) ;
44831: LD_ADDR_VAR 0 3
44835: PUSH
44836: LD_VAR 0 1
44840: PUSH
44841: LD_VAR 0 3
44845: IN
44846: ST_TO_ADDR
// end ;
44847: LD_VAR 0 3
44851: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44852: LD_INT 0
44854: PPUSH
// if not chassis or not weapon then
44855: LD_VAR 0 1
44859: NOT
44860: IFTRUE 44869
44862: PUSH
44863: LD_VAR 0 2
44867: NOT
44868: OR
44869: IFFALSE 44873
// exit ;
44871: GO 45933
// case weapon of us_machine_gun :
44873: LD_VAR 0 2
44877: PUSH
44878: LD_INT 2
44880: DOUBLE
44881: EQUAL
44882: IFTRUE 44886
44884: GO 44916
44886: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44887: LD_ADDR_VAR 0 3
44891: PUSH
44892: LD_INT 1
44894: PUSH
44895: LD_INT 2
44897: PUSH
44898: LD_INT 3
44900: PUSH
44901: LD_INT 4
44903: PUSH
44904: LD_INT 5
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: ST_TO_ADDR
44914: GO 45917
44916: LD_INT 3
44918: DOUBLE
44919: EQUAL
44920: IFTRUE 44924
44922: GO 44954
44924: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44925: LD_ADDR_VAR 0 3
44929: PUSH
44930: LD_INT 1
44932: PUSH
44933: LD_INT 2
44935: PUSH
44936: LD_INT 3
44938: PUSH
44939: LD_INT 4
44941: PUSH
44942: LD_INT 5
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: ST_TO_ADDR
44952: GO 45917
44954: LD_INT 11
44956: DOUBLE
44957: EQUAL
44958: IFTRUE 44962
44960: GO 44992
44962: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44963: LD_ADDR_VAR 0 3
44967: PUSH
44968: LD_INT 1
44970: PUSH
44971: LD_INT 2
44973: PUSH
44974: LD_INT 3
44976: PUSH
44977: LD_INT 4
44979: PUSH
44980: LD_INT 5
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: ST_TO_ADDR
44990: GO 45917
44992: LD_INT 4
44994: DOUBLE
44995: EQUAL
44996: IFTRUE 45000
44998: GO 45026
45000: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
45001: LD_ADDR_VAR 0 3
45005: PUSH
45006: LD_INT 2
45008: PUSH
45009: LD_INT 3
45011: PUSH
45012: LD_INT 4
45014: PUSH
45015: LD_INT 5
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: ST_TO_ADDR
45024: GO 45917
45026: LD_INT 5
45028: DOUBLE
45029: EQUAL
45030: IFTRUE 45034
45032: GO 45060
45034: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
45035: LD_ADDR_VAR 0 3
45039: PUSH
45040: LD_INT 2
45042: PUSH
45043: LD_INT 3
45045: PUSH
45046: LD_INT 4
45048: PUSH
45049: LD_INT 5
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: ST_TO_ADDR
45058: GO 45917
45060: LD_INT 9
45062: DOUBLE
45063: EQUAL
45064: IFTRUE 45068
45066: GO 45094
45068: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
45069: LD_ADDR_VAR 0 3
45073: PUSH
45074: LD_INT 2
45076: PUSH
45077: LD_INT 3
45079: PUSH
45080: LD_INT 4
45082: PUSH
45083: LD_INT 5
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: ST_TO_ADDR
45092: GO 45917
45094: LD_INT 7
45096: DOUBLE
45097: EQUAL
45098: IFTRUE 45102
45100: GO 45128
45102: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
45103: LD_ADDR_VAR 0 3
45107: PUSH
45108: LD_INT 2
45110: PUSH
45111: LD_INT 3
45113: PUSH
45114: LD_INT 4
45116: PUSH
45117: LD_INT 5
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: ST_TO_ADDR
45126: GO 45917
45128: LD_INT 12
45130: DOUBLE
45131: EQUAL
45132: IFTRUE 45136
45134: GO 45162
45136: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
45137: LD_ADDR_VAR 0 3
45141: PUSH
45142: LD_INT 2
45144: PUSH
45145: LD_INT 3
45147: PUSH
45148: LD_INT 4
45150: PUSH
45151: LD_INT 5
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: ST_TO_ADDR
45160: GO 45917
45162: LD_INT 13
45164: DOUBLE
45165: EQUAL
45166: IFTRUE 45170
45168: GO 45196
45170: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
45171: LD_ADDR_VAR 0 3
45175: PUSH
45176: LD_INT 2
45178: PUSH
45179: LD_INT 3
45181: PUSH
45182: LD_INT 4
45184: PUSH
45185: LD_INT 5
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: ST_TO_ADDR
45194: GO 45917
45196: LD_INT 14
45198: DOUBLE
45199: EQUAL
45200: IFTRUE 45204
45202: GO 45222
45204: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
45205: LD_ADDR_VAR 0 3
45209: PUSH
45210: LD_INT 4
45212: PUSH
45213: LD_INT 5
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: ST_TO_ADDR
45220: GO 45917
45222: LD_INT 6
45224: DOUBLE
45225: EQUAL
45226: IFTRUE 45230
45228: GO 45248
45230: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
45231: LD_ADDR_VAR 0 3
45235: PUSH
45236: LD_INT 4
45238: PUSH
45239: LD_INT 5
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: ST_TO_ADDR
45246: GO 45917
45248: LD_INT 10
45250: DOUBLE
45251: EQUAL
45252: IFTRUE 45256
45254: GO 45274
45256: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
45257: LD_ADDR_VAR 0 3
45261: PUSH
45262: LD_INT 4
45264: PUSH
45265: LD_INT 5
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: ST_TO_ADDR
45272: GO 45917
45274: LD_INT 22
45276: DOUBLE
45277: EQUAL
45278: IFTRUE 45282
45280: GO 45308
45282: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
45283: LD_ADDR_VAR 0 3
45287: PUSH
45288: LD_INT 11
45290: PUSH
45291: LD_INT 12
45293: PUSH
45294: LD_INT 13
45296: PUSH
45297: LD_INT 14
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: ST_TO_ADDR
45306: GO 45917
45308: LD_INT 23
45310: DOUBLE
45311: EQUAL
45312: IFTRUE 45316
45314: GO 45342
45316: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
45317: LD_ADDR_VAR 0 3
45321: PUSH
45322: LD_INT 11
45324: PUSH
45325: LD_INT 12
45327: PUSH
45328: LD_INT 13
45330: PUSH
45331: LD_INT 14
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: ST_TO_ADDR
45340: GO 45917
45342: LD_INT 24
45344: DOUBLE
45345: EQUAL
45346: IFTRUE 45350
45348: GO 45376
45350: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
45351: LD_ADDR_VAR 0 3
45355: PUSH
45356: LD_INT 11
45358: PUSH
45359: LD_INT 12
45361: PUSH
45362: LD_INT 13
45364: PUSH
45365: LD_INT 14
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: ST_TO_ADDR
45374: GO 45917
45376: LD_INT 30
45378: DOUBLE
45379: EQUAL
45380: IFTRUE 45384
45382: GO 45410
45384: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45385: LD_ADDR_VAR 0 3
45389: PUSH
45390: LD_INT 11
45392: PUSH
45393: LD_INT 12
45395: PUSH
45396: LD_INT 13
45398: PUSH
45399: LD_INT 14
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: ST_TO_ADDR
45408: GO 45917
45410: LD_INT 25
45412: DOUBLE
45413: EQUAL
45414: IFTRUE 45418
45416: GO 45436
45418: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45419: LD_ADDR_VAR 0 3
45423: PUSH
45424: LD_INT 13
45426: PUSH
45427: LD_INT 14
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: ST_TO_ADDR
45434: GO 45917
45436: LD_INT 27
45438: DOUBLE
45439: EQUAL
45440: IFTRUE 45444
45442: GO 45462
45444: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
45445: LD_ADDR_VAR 0 3
45449: PUSH
45450: LD_INT 13
45452: PUSH
45453: LD_INT 14
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: ST_TO_ADDR
45460: GO 45917
45462: LD_INT 92
45464: DOUBLE
45465: EQUAL
45466: IFTRUE 45470
45468: GO 45496
45470: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45471: LD_ADDR_VAR 0 3
45475: PUSH
45476: LD_INT 11
45478: PUSH
45479: LD_INT 12
45481: PUSH
45482: LD_INT 13
45484: PUSH
45485: LD_INT 14
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: ST_TO_ADDR
45494: GO 45917
45496: LD_INT 28
45498: DOUBLE
45499: EQUAL
45500: IFTRUE 45504
45502: GO 45522
45504: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45505: LD_ADDR_VAR 0 3
45509: PUSH
45510: LD_INT 13
45512: PUSH
45513: LD_INT 14
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: ST_TO_ADDR
45520: GO 45917
45522: LD_INT 29
45524: DOUBLE
45525: EQUAL
45526: IFTRUE 45530
45528: GO 45548
45530: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45531: LD_ADDR_VAR 0 3
45535: PUSH
45536: LD_INT 13
45538: PUSH
45539: LD_INT 14
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: ST_TO_ADDR
45546: GO 45917
45548: LD_INT 31
45550: DOUBLE
45551: EQUAL
45552: IFTRUE 45556
45554: GO 45574
45556: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45557: LD_ADDR_VAR 0 3
45561: PUSH
45562: LD_INT 13
45564: PUSH
45565: LD_INT 14
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: ST_TO_ADDR
45572: GO 45917
45574: LD_INT 26
45576: DOUBLE
45577: EQUAL
45578: IFTRUE 45582
45580: GO 45600
45582: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45583: LD_ADDR_VAR 0 3
45587: PUSH
45588: LD_INT 13
45590: PUSH
45591: LD_INT 14
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: ST_TO_ADDR
45598: GO 45917
45600: LD_INT 42
45602: DOUBLE
45603: EQUAL
45604: IFTRUE 45608
45606: GO 45634
45608: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45609: LD_ADDR_VAR 0 3
45613: PUSH
45614: LD_INT 21
45616: PUSH
45617: LD_INT 22
45619: PUSH
45620: LD_INT 23
45622: PUSH
45623: LD_INT 24
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: ST_TO_ADDR
45632: GO 45917
45634: LD_INT 43
45636: DOUBLE
45637: EQUAL
45638: IFTRUE 45642
45640: GO 45668
45642: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45643: LD_ADDR_VAR 0 3
45647: PUSH
45648: LD_INT 21
45650: PUSH
45651: LD_INT 22
45653: PUSH
45654: LD_INT 23
45656: PUSH
45657: LD_INT 24
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: ST_TO_ADDR
45666: GO 45917
45668: LD_INT 44
45670: DOUBLE
45671: EQUAL
45672: IFTRUE 45676
45674: GO 45702
45676: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45677: LD_ADDR_VAR 0 3
45681: PUSH
45682: LD_INT 21
45684: PUSH
45685: LD_INT 22
45687: PUSH
45688: LD_INT 23
45690: PUSH
45691: LD_INT 24
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: ST_TO_ADDR
45700: GO 45917
45702: LD_INT 45
45704: DOUBLE
45705: EQUAL
45706: IFTRUE 45710
45708: GO 45736
45710: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45711: LD_ADDR_VAR 0 3
45715: PUSH
45716: LD_INT 21
45718: PUSH
45719: LD_INT 22
45721: PUSH
45722: LD_INT 23
45724: PUSH
45725: LD_INT 24
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: ST_TO_ADDR
45734: GO 45917
45736: LD_INT 49
45738: DOUBLE
45739: EQUAL
45740: IFTRUE 45744
45742: GO 45770
45744: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45745: LD_ADDR_VAR 0 3
45749: PUSH
45750: LD_INT 21
45752: PUSH
45753: LD_INT 22
45755: PUSH
45756: LD_INT 23
45758: PUSH
45759: LD_INT 24
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: ST_TO_ADDR
45768: GO 45917
45770: LD_INT 51
45772: DOUBLE
45773: EQUAL
45774: IFTRUE 45778
45776: GO 45804
45778: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45779: LD_ADDR_VAR 0 3
45783: PUSH
45784: LD_INT 21
45786: PUSH
45787: LD_INT 22
45789: PUSH
45790: LD_INT 23
45792: PUSH
45793: LD_INT 24
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: ST_TO_ADDR
45802: GO 45917
45804: LD_INT 52
45806: DOUBLE
45807: EQUAL
45808: IFTRUE 45812
45810: GO 45838
45812: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45813: LD_ADDR_VAR 0 3
45817: PUSH
45818: LD_INT 21
45820: PUSH
45821: LD_INT 22
45823: PUSH
45824: LD_INT 23
45826: PUSH
45827: LD_INT 24
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: ST_TO_ADDR
45836: GO 45917
45838: LD_INT 53
45840: DOUBLE
45841: EQUAL
45842: IFTRUE 45846
45844: GO 45864
45846: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45847: LD_ADDR_VAR 0 3
45851: PUSH
45852: LD_INT 23
45854: PUSH
45855: LD_INT 24
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: ST_TO_ADDR
45862: GO 45917
45864: LD_INT 46
45866: DOUBLE
45867: EQUAL
45868: IFTRUE 45872
45870: GO 45890
45872: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45873: LD_ADDR_VAR 0 3
45877: PUSH
45878: LD_INT 23
45880: PUSH
45881: LD_INT 24
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: ST_TO_ADDR
45888: GO 45917
45890: LD_INT 47
45892: DOUBLE
45893: EQUAL
45894: IFTRUE 45898
45896: GO 45916
45898: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45899: LD_ADDR_VAR 0 3
45903: PUSH
45904: LD_INT 23
45906: PUSH
45907: LD_INT 24
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: ST_TO_ADDR
45914: GO 45917
45916: POP
// result := ( chassis in result ) ;
45917: LD_ADDR_VAR 0 3
45921: PUSH
45922: LD_VAR 0 1
45926: PUSH
45927: LD_VAR 0 3
45931: IN
45932: ST_TO_ADDR
// end ;
45933: LD_VAR 0 3
45937: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45938: LD_INT 0
45940: PPUSH
45941: PPUSH
45942: PPUSH
45943: PPUSH
45944: PPUSH
45945: PPUSH
45946: PPUSH
// result := array ;
45947: LD_ADDR_VAR 0 5
45951: PUSH
45952: LD_VAR 0 1
45956: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45957: LD_VAR 0 1
45961: NOT
45962: IFTRUE 45971
45964: PUSH
45965: LD_VAR 0 2
45969: NOT
45970: OR
45971: IFTRUE 45980
45973: PUSH
45974: LD_VAR 0 3
45978: NOT
45979: OR
45980: IFTRUE 45994
45982: PUSH
45983: LD_VAR 0 2
45987: PUSH
45988: LD_VAR 0 1
45992: GREATER
45993: OR
45994: IFTRUE 46008
45996: PUSH
45997: LD_VAR 0 3
46001: PUSH
46002: LD_VAR 0 1
46006: GREATER
46007: OR
46008: IFFALSE 46012
// exit ;
46010: GO 46308
// if direction then
46012: LD_VAR 0 4
46016: IFFALSE 46080
// begin d := 1 ;
46018: LD_ADDR_VAR 0 9
46022: PUSH
46023: LD_INT 1
46025: ST_TO_ADDR
// if i_from > i_to then
46026: LD_VAR 0 2
46030: PUSH
46031: LD_VAR 0 3
46035: GREATER
46036: IFFALSE 46062
// length := ( array - i_from ) + i_to else
46038: LD_ADDR_VAR 0 11
46042: PUSH
46043: LD_VAR 0 1
46047: PUSH
46048: LD_VAR 0 2
46052: MINUS
46053: PUSH
46054: LD_VAR 0 3
46058: PLUS
46059: ST_TO_ADDR
46060: GO 46078
// length := i_to - i_from ;
46062: LD_ADDR_VAR 0 11
46066: PUSH
46067: LD_VAR 0 3
46071: PUSH
46072: LD_VAR 0 2
46076: MINUS
46077: ST_TO_ADDR
// end else
46078: GO 46141
// begin d := - 1 ;
46080: LD_ADDR_VAR 0 9
46084: PUSH
46085: LD_INT 1
46087: NEG
46088: ST_TO_ADDR
// if i_from > i_to then
46089: LD_VAR 0 2
46093: PUSH
46094: LD_VAR 0 3
46098: GREATER
46099: IFFALSE 46119
// length := i_from - i_to else
46101: LD_ADDR_VAR 0 11
46105: PUSH
46106: LD_VAR 0 2
46110: PUSH
46111: LD_VAR 0 3
46115: MINUS
46116: ST_TO_ADDR
46117: GO 46141
// length := ( array - i_to ) + i_from ;
46119: LD_ADDR_VAR 0 11
46123: PUSH
46124: LD_VAR 0 1
46128: PUSH
46129: LD_VAR 0 3
46133: MINUS
46134: PUSH
46135: LD_VAR 0 2
46139: PLUS
46140: ST_TO_ADDR
// end ; if not length then
46141: LD_VAR 0 11
46145: NOT
46146: IFFALSE 46150
// exit ;
46148: GO 46308
// tmp := array ;
46150: LD_ADDR_VAR 0 10
46154: PUSH
46155: LD_VAR 0 1
46159: ST_TO_ADDR
// for i = 1 to length do
46160: LD_ADDR_VAR 0 6
46164: PUSH
46165: DOUBLE
46166: LD_INT 1
46168: DEC
46169: ST_TO_ADDR
46170: LD_VAR 0 11
46174: PUSH
46175: FOR_TO
46176: IFFALSE 46296
// begin for j = 1 to array do
46178: LD_ADDR_VAR 0 7
46182: PUSH
46183: DOUBLE
46184: LD_INT 1
46186: DEC
46187: ST_TO_ADDR
46188: LD_VAR 0 1
46192: PUSH
46193: FOR_TO
46194: IFFALSE 46282
// begin k := j + d ;
46196: LD_ADDR_VAR 0 8
46200: PUSH
46201: LD_VAR 0 7
46205: PUSH
46206: LD_VAR 0 9
46210: PLUS
46211: ST_TO_ADDR
// if k > array then
46212: LD_VAR 0 8
46216: PUSH
46217: LD_VAR 0 1
46221: GREATER
46222: IFFALSE 46232
// k := 1 ;
46224: LD_ADDR_VAR 0 8
46228: PUSH
46229: LD_INT 1
46231: ST_TO_ADDR
// if not k then
46232: LD_VAR 0 8
46236: NOT
46237: IFFALSE 46249
// k := array ;
46239: LD_ADDR_VAR 0 8
46243: PUSH
46244: LD_VAR 0 1
46248: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
46249: LD_ADDR_VAR 0 10
46253: PUSH
46254: LD_VAR 0 10
46258: PPUSH
46259: LD_VAR 0 8
46263: PPUSH
46264: LD_VAR 0 1
46268: PUSH
46269: LD_VAR 0 7
46273: ARRAY
46274: PPUSH
46275: CALL_OW 1
46279: ST_TO_ADDR
// end ;
46280: GO 46193
46282: POP
46283: POP
// array := tmp ;
46284: LD_ADDR_VAR 0 1
46288: PUSH
46289: LD_VAR 0 10
46293: ST_TO_ADDR
// end ;
46294: GO 46175
46296: POP
46297: POP
// result := array ;
46298: LD_ADDR_VAR 0 5
46302: PUSH
46303: LD_VAR 0 1
46307: ST_TO_ADDR
// end ;
46308: LD_VAR 0 5
46312: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
46313: LD_INT 0
46315: PPUSH
46316: PPUSH
// result := 0 ;
46317: LD_ADDR_VAR 0 3
46321: PUSH
46322: LD_INT 0
46324: ST_TO_ADDR
// if not array or not value in array then
46325: LD_VAR 0 1
46329: NOT
46330: IFTRUE 46345
46332: PUSH
46333: LD_VAR 0 2
46337: PUSH
46338: LD_VAR 0 1
46342: IN
46343: NOT
46344: OR
46345: IFFALSE 46349
// exit ;
46347: GO 46403
// for i = 1 to array do
46349: LD_ADDR_VAR 0 4
46353: PUSH
46354: DOUBLE
46355: LD_INT 1
46357: DEC
46358: ST_TO_ADDR
46359: LD_VAR 0 1
46363: PUSH
46364: FOR_TO
46365: IFFALSE 46401
// if value = array [ i ] then
46367: LD_VAR 0 2
46371: PUSH
46372: LD_VAR 0 1
46376: PUSH
46377: LD_VAR 0 4
46381: ARRAY
46382: EQUAL
46383: IFFALSE 46399
// begin result := i ;
46385: LD_ADDR_VAR 0 3
46389: PUSH
46390: LD_VAR 0 4
46394: ST_TO_ADDR
// exit ;
46395: POP
46396: POP
46397: GO 46403
// end ;
46399: GO 46364
46401: POP
46402: POP
// end ;
46403: LD_VAR 0 3
46407: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46408: LD_INT 0
46410: PPUSH
// vc_chassis := chassis ;
46411: LD_ADDR_OWVAR 37
46415: PUSH
46416: LD_VAR 0 1
46420: ST_TO_ADDR
// vc_engine := engine ;
46421: LD_ADDR_OWVAR 39
46425: PUSH
46426: LD_VAR 0 2
46430: ST_TO_ADDR
// vc_control := control ;
46431: LD_ADDR_OWVAR 38
46435: PUSH
46436: LD_VAR 0 3
46440: ST_TO_ADDR
// vc_weapon := weapon ;
46441: LD_ADDR_OWVAR 40
46445: PUSH
46446: LD_VAR 0 4
46450: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46451: LD_ADDR_OWVAR 41
46455: PUSH
46456: LD_VAR 0 5
46460: ST_TO_ADDR
// end ;
46461: LD_VAR 0 6
46465: RET
// export function WantPlant ( unit ) ; var task ; begin
46466: LD_INT 0
46468: PPUSH
46469: PPUSH
// result := false ;
46470: LD_ADDR_VAR 0 2
46474: PUSH
46475: LD_INT 0
46477: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46478: LD_ADDR_VAR 0 3
46482: PUSH
46483: LD_VAR 0 1
46487: PPUSH
46488: CALL_OW 437
46492: ST_TO_ADDR
// if task then
46493: LD_VAR 0 3
46497: IFFALSE 46525
// if task [ 1 ] [ 1 ] = p then
46499: LD_VAR 0 3
46503: PUSH
46504: LD_INT 1
46506: ARRAY
46507: PUSH
46508: LD_INT 1
46510: ARRAY
46511: PUSH
46512: LD_STRING p
46514: EQUAL
46515: IFFALSE 46525
// result := true ;
46517: LD_ADDR_VAR 0 2
46521: PUSH
46522: LD_INT 1
46524: ST_TO_ADDR
// end ;
46525: LD_VAR 0 2
46529: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46530: LD_INT 0
46532: PPUSH
46533: PPUSH
46534: PPUSH
46535: PPUSH
// if pos < 1 then
46536: LD_VAR 0 2
46540: PUSH
46541: LD_INT 1
46543: LESS
46544: IFFALSE 46548
// exit ;
46546: GO 46851
// if pos = 1 then
46548: LD_VAR 0 2
46552: PUSH
46553: LD_INT 1
46555: EQUAL
46556: IFFALSE 46589
// result := Replace ( arr , pos [ 1 ] , value ) else
46558: LD_ADDR_VAR 0 4
46562: PUSH
46563: LD_VAR 0 1
46567: PPUSH
46568: LD_VAR 0 2
46572: PUSH
46573: LD_INT 1
46575: ARRAY
46576: PPUSH
46577: LD_VAR 0 3
46581: PPUSH
46582: CALL_OW 1
46586: ST_TO_ADDR
46587: GO 46851
// begin tmp := arr ;
46589: LD_ADDR_VAR 0 6
46593: PUSH
46594: LD_VAR 0 1
46598: ST_TO_ADDR
// s_arr := [ tmp ] ;
46599: LD_ADDR_VAR 0 7
46603: PUSH
46604: LD_VAR 0 6
46608: PUSH
46609: EMPTY
46610: LIST
46611: ST_TO_ADDR
// for i = 1 to pos - 1 do
46612: LD_ADDR_VAR 0 5
46616: PUSH
46617: DOUBLE
46618: LD_INT 1
46620: DEC
46621: ST_TO_ADDR
46622: LD_VAR 0 2
46626: PUSH
46627: LD_INT 1
46629: MINUS
46630: PUSH
46631: FOR_TO
46632: IFFALSE 46677
// begin tmp := tmp [ pos [ i ] ] ;
46634: LD_ADDR_VAR 0 6
46638: PUSH
46639: LD_VAR 0 6
46643: PUSH
46644: LD_VAR 0 2
46648: PUSH
46649: LD_VAR 0 5
46653: ARRAY
46654: ARRAY
46655: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46656: LD_ADDR_VAR 0 7
46660: PUSH
46661: LD_VAR 0 7
46665: PUSH
46666: LD_VAR 0 6
46670: PUSH
46671: EMPTY
46672: LIST
46673: ADD
46674: ST_TO_ADDR
// end ;
46675: GO 46631
46677: POP
46678: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46679: LD_ADDR_VAR 0 6
46683: PUSH
46684: LD_VAR 0 6
46688: PPUSH
46689: LD_VAR 0 2
46693: PUSH
46694: LD_VAR 0 2
46698: ARRAY
46699: PPUSH
46700: LD_VAR 0 3
46704: PPUSH
46705: CALL_OW 1
46709: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46710: LD_ADDR_VAR 0 7
46714: PUSH
46715: LD_VAR 0 7
46719: PPUSH
46720: LD_VAR 0 7
46724: PPUSH
46725: LD_VAR 0 6
46729: PPUSH
46730: CALL_OW 1
46734: ST_TO_ADDR
// for i = s_arr downto 2 do
46735: LD_ADDR_VAR 0 5
46739: PUSH
46740: DOUBLE
46741: LD_VAR 0 7
46745: INC
46746: ST_TO_ADDR
46747: LD_INT 2
46749: PUSH
46750: FOR_DOWNTO
46751: IFFALSE 46835
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46753: LD_ADDR_VAR 0 6
46757: PUSH
46758: LD_VAR 0 7
46762: PUSH
46763: LD_VAR 0 5
46767: PUSH
46768: LD_INT 1
46770: MINUS
46771: ARRAY
46772: PPUSH
46773: LD_VAR 0 2
46777: PUSH
46778: LD_VAR 0 5
46782: PUSH
46783: LD_INT 1
46785: MINUS
46786: ARRAY
46787: PPUSH
46788: LD_VAR 0 7
46792: PUSH
46793: LD_VAR 0 5
46797: ARRAY
46798: PPUSH
46799: CALL_OW 1
46803: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46804: LD_ADDR_VAR 0 7
46808: PUSH
46809: LD_VAR 0 7
46813: PPUSH
46814: LD_VAR 0 5
46818: PUSH
46819: LD_INT 1
46821: MINUS
46822: PPUSH
46823: LD_VAR 0 6
46827: PPUSH
46828: CALL_OW 1
46832: ST_TO_ADDR
// end ;
46833: GO 46750
46835: POP
46836: POP
// result := s_arr [ 1 ] ;
46837: LD_ADDR_VAR 0 4
46841: PUSH
46842: LD_VAR 0 7
46846: PUSH
46847: LD_INT 1
46849: ARRAY
46850: ST_TO_ADDR
// end ; end ;
46851: LD_VAR 0 4
46855: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46856: LD_INT 0
46858: PPUSH
46859: PPUSH
// if not list then
46860: LD_VAR 0 1
46864: NOT
46865: IFFALSE 46869
// exit ;
46867: GO 46960
// i := list [ pos1 ] ;
46869: LD_ADDR_VAR 0 5
46873: PUSH
46874: LD_VAR 0 1
46878: PUSH
46879: LD_VAR 0 2
46883: ARRAY
46884: ST_TO_ADDR
// if not i then
46885: LD_VAR 0 5
46889: NOT
46890: IFFALSE 46894
// exit ;
46892: GO 46960
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46894: LD_ADDR_VAR 0 1
46898: PUSH
46899: LD_VAR 0 1
46903: PPUSH
46904: LD_VAR 0 2
46908: PPUSH
46909: LD_VAR 0 1
46913: PUSH
46914: LD_VAR 0 3
46918: ARRAY
46919: PPUSH
46920: CALL_OW 1
46924: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46925: LD_ADDR_VAR 0 1
46929: PUSH
46930: LD_VAR 0 1
46934: PPUSH
46935: LD_VAR 0 3
46939: PPUSH
46940: LD_VAR 0 5
46944: PPUSH
46945: CALL_OW 1
46949: ST_TO_ADDR
// result := list ;
46950: LD_ADDR_VAR 0 4
46954: PUSH
46955: LD_VAR 0 1
46959: ST_TO_ADDR
// end ;
46960: LD_VAR 0 4
46964: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46965: LD_INT 0
46967: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46968: LD_ADDR_VAR 0 5
46972: PUSH
46973: LD_VAR 0 1
46977: PPUSH
46978: CALL_OW 250
46982: PPUSH
46983: LD_VAR 0 1
46987: PPUSH
46988: CALL_OW 251
46992: PPUSH
46993: LD_VAR 0 2
46997: PPUSH
46998: LD_VAR 0 3
47002: PPUSH
47003: LD_VAR 0 4
47007: PPUSH
47008: CALL 47390 0 5
47012: ST_TO_ADDR
// end ;
47013: LD_VAR 0 5
47017: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
47018: LD_INT 0
47020: PPUSH
47021: PPUSH
47022: PPUSH
47023: PPUSH
// if not list or not unit then
47024: LD_VAR 0 2
47028: NOT
47029: IFTRUE 47038
47031: PUSH
47032: LD_VAR 0 1
47036: NOT
47037: OR
47038: IFFALSE 47042
// exit ;
47040: GO 47385
// result := [ ] ;
47042: LD_ADDR_VAR 0 5
47046: PUSH
47047: EMPTY
47048: ST_TO_ADDR
// for i in list do
47049: LD_ADDR_VAR 0 6
47053: PUSH
47054: LD_VAR 0 2
47058: PUSH
47059: FOR_IN
47060: IFFALSE 47278
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
47062: LD_ADDR_VAR 0 8
47066: PUSH
47067: LD_VAR 0 1
47071: PPUSH
47072: LD_VAR 0 6
47076: PUSH
47077: LD_INT 1
47079: ARRAY
47080: PPUSH
47081: LD_VAR 0 6
47085: PUSH
47086: LD_INT 2
47088: ARRAY
47089: PPUSH
47090: CALL_OW 297
47094: ST_TO_ADDR
// if not Count ( result ) then
47095: LD_VAR 0 5
47099: PPUSH
47100: CALL 43646 0 1
47104: NOT
47105: IFFALSE 47138
// begin result := Join ( result , [ i , tmp ] ) ;
47107: LD_ADDR_VAR 0 5
47111: PUSH
47112: LD_VAR 0 5
47116: PPUSH
47117: LD_VAR 0 6
47121: PUSH
47122: LD_VAR 0 8
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PPUSH
47131: CALL 79578 0 2
47135: ST_TO_ADDR
// continue ;
47136: GO 47059
// end ; if result [ result ] [ 2 ] <= tmp then
47138: LD_VAR 0 5
47142: PUSH
47143: LD_VAR 0 5
47147: ARRAY
47148: PUSH
47149: LD_INT 2
47151: ARRAY
47152: PUSH
47153: LD_VAR 0 8
47157: LESSEQUAL
47158: IFFALSE 47191
// result := Join ( result , [ i , tmp ] ) else
47160: LD_ADDR_VAR 0 5
47164: PUSH
47165: LD_VAR 0 5
47169: PPUSH
47170: LD_VAR 0 6
47174: PUSH
47175: LD_VAR 0 8
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PPUSH
47184: CALL 79578 0 2
47188: ST_TO_ADDR
47189: GO 47276
// begin for j := 1 to Count ( result ) do
47191: LD_ADDR_VAR 0 7
47195: PUSH
47196: DOUBLE
47197: LD_INT 1
47199: DEC
47200: ST_TO_ADDR
47201: LD_VAR 0 5
47205: PPUSH
47206: CALL 43646 0 1
47210: PUSH
47211: FOR_TO
47212: IFFALSE 47274
// begin if tmp < result [ j ] [ 2 ] then
47214: LD_VAR 0 8
47218: PUSH
47219: LD_VAR 0 5
47223: PUSH
47224: LD_VAR 0 7
47228: ARRAY
47229: PUSH
47230: LD_INT 2
47232: ARRAY
47233: LESS
47234: IFFALSE 47272
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47236: LD_ADDR_VAR 0 5
47240: PUSH
47241: LD_VAR 0 5
47245: PPUSH
47246: LD_VAR 0 7
47250: PPUSH
47251: LD_VAR 0 6
47255: PUSH
47256: LD_VAR 0 8
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PPUSH
47265: CALL_OW 2
47269: ST_TO_ADDR
// break ;
47270: GO 47274
// end ; end ;
47272: GO 47211
47274: POP
47275: POP
// end ; end ;
47276: GO 47059
47278: POP
47279: POP
// if result and not asc then
47280: LD_VAR 0 5
47284: IFFALSE 47293
47286: PUSH
47287: LD_VAR 0 3
47291: NOT
47292: AND
47293: IFFALSE 47310
// result := ReverseArray ( result ) ;
47295: LD_ADDR_VAR 0 5
47299: PUSH
47300: LD_VAR 0 5
47304: PPUSH
47305: CALL 74668 0 1
47309: ST_TO_ADDR
// tmp := [ ] ;
47310: LD_ADDR_VAR 0 8
47314: PUSH
47315: EMPTY
47316: ST_TO_ADDR
// if mode then
47317: LD_VAR 0 4
47321: IFFALSE 47385
// begin for i := 1 to result do
47323: LD_ADDR_VAR 0 6
47327: PUSH
47328: DOUBLE
47329: LD_INT 1
47331: DEC
47332: ST_TO_ADDR
47333: LD_VAR 0 5
47337: PUSH
47338: FOR_TO
47339: IFFALSE 47373
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
47341: LD_ADDR_VAR 0 8
47345: PUSH
47346: LD_VAR 0 8
47350: PPUSH
47351: LD_VAR 0 5
47355: PUSH
47356: LD_VAR 0 6
47360: ARRAY
47361: PUSH
47362: LD_INT 1
47364: ARRAY
47365: PPUSH
47366: CALL 79578 0 2
47370: ST_TO_ADDR
47371: GO 47338
47373: POP
47374: POP
// result := tmp ;
47375: LD_ADDR_VAR 0 5
47379: PUSH
47380: LD_VAR 0 8
47384: ST_TO_ADDR
// end ; end ;
47385: LD_VAR 0 5
47389: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
47390: LD_INT 0
47392: PPUSH
47393: PPUSH
47394: PPUSH
47395: PPUSH
// if not list then
47396: LD_VAR 0 3
47400: NOT
47401: IFFALSE 47405
// exit ;
47403: GO 47795
// result := [ ] ;
47405: LD_ADDR_VAR 0 6
47409: PUSH
47410: EMPTY
47411: ST_TO_ADDR
// for i in list do
47412: LD_ADDR_VAR 0 7
47416: PUSH
47417: LD_VAR 0 3
47421: PUSH
47422: FOR_IN
47423: IFFALSE 47625
// begin tmp := GetDistUnitXY ( i , x , y ) ;
47425: LD_ADDR_VAR 0 9
47429: PUSH
47430: LD_VAR 0 7
47434: PPUSH
47435: LD_VAR 0 1
47439: PPUSH
47440: LD_VAR 0 2
47444: PPUSH
47445: CALL_OW 297
47449: ST_TO_ADDR
// if not result then
47450: LD_VAR 0 6
47454: NOT
47455: IFFALSE 47481
// result := [ [ i , tmp ] ] else
47457: LD_ADDR_VAR 0 6
47461: PUSH
47462: LD_VAR 0 7
47466: PUSH
47467: LD_VAR 0 9
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: EMPTY
47477: LIST
47478: ST_TO_ADDR
47479: GO 47623
// begin if result [ result ] [ 2 ] <= tmp then
47481: LD_VAR 0 6
47485: PUSH
47486: LD_VAR 0 6
47490: ARRAY
47491: PUSH
47492: LD_INT 2
47494: ARRAY
47495: PUSH
47496: LD_VAR 0 9
47500: LESSEQUAL
47501: IFFALSE 47543
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
47503: LD_ADDR_VAR 0 6
47507: PUSH
47508: LD_VAR 0 6
47512: PPUSH
47513: LD_VAR 0 6
47517: PUSH
47518: LD_INT 1
47520: PLUS
47521: PPUSH
47522: LD_VAR 0 7
47526: PUSH
47527: LD_VAR 0 9
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PPUSH
47536: CALL_OW 2
47540: ST_TO_ADDR
47541: GO 47623
// for j := 1 to result do
47543: LD_ADDR_VAR 0 8
47547: PUSH
47548: DOUBLE
47549: LD_INT 1
47551: DEC
47552: ST_TO_ADDR
47553: LD_VAR 0 6
47557: PUSH
47558: FOR_TO
47559: IFFALSE 47621
// begin if tmp < result [ j ] [ 2 ] then
47561: LD_VAR 0 9
47565: PUSH
47566: LD_VAR 0 6
47570: PUSH
47571: LD_VAR 0 8
47575: ARRAY
47576: PUSH
47577: LD_INT 2
47579: ARRAY
47580: LESS
47581: IFFALSE 47619
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47583: LD_ADDR_VAR 0 6
47587: PUSH
47588: LD_VAR 0 6
47592: PPUSH
47593: LD_VAR 0 8
47597: PPUSH
47598: LD_VAR 0 7
47602: PUSH
47603: LD_VAR 0 9
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PPUSH
47612: CALL_OW 2
47616: ST_TO_ADDR
// break ;
47617: GO 47621
// end ; end ;
47619: GO 47558
47621: POP
47622: POP
// end ; end ;
47623: GO 47422
47625: POP
47626: POP
// if result and not asc then
47627: LD_VAR 0 6
47631: IFFALSE 47640
47633: PUSH
47634: LD_VAR 0 4
47638: NOT
47639: AND
47640: IFFALSE 47715
// begin tmp := result ;
47642: LD_ADDR_VAR 0 9
47646: PUSH
47647: LD_VAR 0 6
47651: ST_TO_ADDR
// for i = tmp downto 1 do
47652: LD_ADDR_VAR 0 7
47656: PUSH
47657: DOUBLE
47658: LD_VAR 0 9
47662: INC
47663: ST_TO_ADDR
47664: LD_INT 1
47666: PUSH
47667: FOR_DOWNTO
47668: IFFALSE 47713
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47670: LD_ADDR_VAR 0 6
47674: PUSH
47675: LD_VAR 0 6
47679: PPUSH
47680: LD_VAR 0 9
47684: PUSH
47685: LD_VAR 0 7
47689: MINUS
47690: PUSH
47691: LD_INT 1
47693: PLUS
47694: PPUSH
47695: LD_VAR 0 9
47699: PUSH
47700: LD_VAR 0 7
47704: ARRAY
47705: PPUSH
47706: CALL_OW 1
47710: ST_TO_ADDR
47711: GO 47667
47713: POP
47714: POP
// end ; tmp := [ ] ;
47715: LD_ADDR_VAR 0 9
47719: PUSH
47720: EMPTY
47721: ST_TO_ADDR
// if mode then
47722: LD_VAR 0 5
47726: IFFALSE 47795
// begin for i = 1 to result do
47728: LD_ADDR_VAR 0 7
47732: PUSH
47733: DOUBLE
47734: LD_INT 1
47736: DEC
47737: ST_TO_ADDR
47738: LD_VAR 0 6
47742: PUSH
47743: FOR_TO
47744: IFFALSE 47783
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47746: LD_ADDR_VAR 0 9
47750: PUSH
47751: LD_VAR 0 9
47755: PPUSH
47756: LD_VAR 0 7
47760: PPUSH
47761: LD_VAR 0 6
47765: PUSH
47766: LD_VAR 0 7
47770: ARRAY
47771: PUSH
47772: LD_INT 1
47774: ARRAY
47775: PPUSH
47776: CALL_OW 1
47780: ST_TO_ADDR
47781: GO 47743
47783: POP
47784: POP
// result := tmp ;
47785: LD_ADDR_VAR 0 6
47789: PUSH
47790: LD_VAR 0 9
47794: ST_TO_ADDR
// end ; end ;
47795: LD_VAR 0 6
47799: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47800: LD_INT 0
47802: PPUSH
47803: PPUSH
47804: PPUSH
47805: PPUSH
47806: PPUSH
47807: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47808: LD_ADDR_VAR 0 5
47812: PUSH
47813: LD_INT 0
47815: PUSH
47816: LD_INT 0
47818: PUSH
47819: LD_INT 0
47821: PUSH
47822: EMPTY
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: ST_TO_ADDR
// if not x or not y then
47830: LD_VAR 0 2
47834: NOT
47835: IFTRUE 47844
47837: PUSH
47838: LD_VAR 0 3
47842: NOT
47843: OR
47844: IFFALSE 47848
// exit ;
47846: GO 49504
// if not range then
47848: LD_VAR 0 4
47852: NOT
47853: IFFALSE 47863
// range := 10 ;
47855: LD_ADDR_VAR 0 4
47859: PUSH
47860: LD_INT 10
47862: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47863: LD_ADDR_VAR 0 8
47867: PUSH
47868: LD_INT 81
47870: PUSH
47871: LD_VAR 0 1
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 92
47882: PUSH
47883: LD_VAR 0 2
47887: PUSH
47888: LD_VAR 0 3
47892: PUSH
47893: LD_VAR 0 4
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 3
47906: PUSH
47907: LD_INT 21
47909: PUSH
47910: LD_INT 3
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: LIST
47925: PPUSH
47926: CALL_OW 69
47930: ST_TO_ADDR
// if not tmp then
47931: LD_VAR 0 8
47935: NOT
47936: IFFALSE 47940
// exit ;
47938: GO 49504
// for i in tmp do
47940: LD_ADDR_VAR 0 6
47944: PUSH
47945: LD_VAR 0 8
47949: PUSH
47950: FOR_IN
47951: IFFALSE 49479
// begin points := [ 0 , 0 , 0 ] ;
47953: LD_ADDR_VAR 0 9
47957: PUSH
47958: LD_INT 0
47960: PUSH
47961: LD_INT 0
47963: PUSH
47964: LD_INT 0
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: LIST
47971: ST_TO_ADDR
// bpoints := 1 ;
47972: LD_ADDR_VAR 0 10
47976: PUSH
47977: LD_INT 1
47979: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47980: LD_VAR 0 6
47984: PPUSH
47985: CALL_OW 247
47989: PUSH
47990: LD_INT 1
47992: DOUBLE
47993: EQUAL
47994: IFTRUE 47998
47996: GO 48580
47998: POP
// begin if GetClass ( i ) = 1 then
47999: LD_VAR 0 6
48003: PPUSH
48004: CALL_OW 257
48008: PUSH
48009: LD_INT 1
48011: EQUAL
48012: IFFALSE 48033
// points := [ 10 , 5 , 3 ] ;
48014: LD_ADDR_VAR 0 9
48018: PUSH
48019: LD_INT 10
48021: PUSH
48022: LD_INT 5
48024: PUSH
48025: LD_INT 3
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: LIST
48032: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
48033: LD_VAR 0 6
48037: PPUSH
48038: CALL_OW 257
48042: PUSH
48043: LD_INT 2
48045: PUSH
48046: LD_INT 3
48048: PUSH
48049: LD_INT 4
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: LIST
48056: IN
48057: IFFALSE 48078
// points := [ 3 , 2 , 1 ] ;
48059: LD_ADDR_VAR 0 9
48063: PUSH
48064: LD_INT 3
48066: PUSH
48067: LD_INT 2
48069: PUSH
48070: LD_INT 1
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: LIST
48077: ST_TO_ADDR
// if GetClass ( i ) = 5 then
48078: LD_VAR 0 6
48082: PPUSH
48083: CALL_OW 257
48087: PUSH
48088: LD_INT 5
48090: EQUAL
48091: IFFALSE 48112
// points := [ 130 , 5 , 2 ] ;
48093: LD_ADDR_VAR 0 9
48097: PUSH
48098: LD_INT 130
48100: PUSH
48101: LD_INT 5
48103: PUSH
48104: LD_INT 2
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: LIST
48111: ST_TO_ADDR
// if GetClass ( i ) = 8 then
48112: LD_VAR 0 6
48116: PPUSH
48117: CALL_OW 257
48121: PUSH
48122: LD_INT 8
48124: EQUAL
48125: IFFALSE 48146
// points := [ 35 , 35 , 30 ] ;
48127: LD_ADDR_VAR 0 9
48131: PUSH
48132: LD_INT 35
48134: PUSH
48135: LD_INT 35
48137: PUSH
48138: LD_INT 30
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: LIST
48145: ST_TO_ADDR
// if GetClass ( i ) = 9 then
48146: LD_VAR 0 6
48150: PPUSH
48151: CALL_OW 257
48155: PUSH
48156: LD_INT 9
48158: EQUAL
48159: IFFALSE 48180
// points := [ 20 , 55 , 40 ] ;
48161: LD_ADDR_VAR 0 9
48165: PUSH
48166: LD_INT 20
48168: PUSH
48169: LD_INT 55
48171: PUSH
48172: LD_INT 40
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: LIST
48179: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
48180: LD_VAR 0 6
48184: PPUSH
48185: CALL_OW 257
48189: PUSH
48190: LD_INT 12
48192: PUSH
48193: LD_INT 16
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: IN
48200: IFFALSE 48221
// points := [ 5 , 3 , 2 ] ;
48202: LD_ADDR_VAR 0 9
48206: PUSH
48207: LD_INT 5
48209: PUSH
48210: LD_INT 3
48212: PUSH
48213: LD_INT 2
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: LIST
48220: ST_TO_ADDR
// if GetClass ( i ) = 17 then
48221: LD_VAR 0 6
48225: PPUSH
48226: CALL_OW 257
48230: PUSH
48231: LD_INT 17
48233: EQUAL
48234: IFFALSE 48255
// points := [ 100 , 50 , 75 ] ;
48236: LD_ADDR_VAR 0 9
48240: PUSH
48241: LD_INT 100
48243: PUSH
48244: LD_INT 50
48246: PUSH
48247: LD_INT 75
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: LIST
48254: ST_TO_ADDR
// if GetClass ( i ) = 15 then
48255: LD_VAR 0 6
48259: PPUSH
48260: CALL_OW 257
48264: PUSH
48265: LD_INT 15
48267: EQUAL
48268: IFFALSE 48289
// points := [ 10 , 5 , 3 ] ;
48270: LD_ADDR_VAR 0 9
48274: PUSH
48275: LD_INT 10
48277: PUSH
48278: LD_INT 5
48280: PUSH
48281: LD_INT 3
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: LIST
48288: ST_TO_ADDR
// if GetClass ( i ) = 14 then
48289: LD_VAR 0 6
48293: PPUSH
48294: CALL_OW 257
48298: PUSH
48299: LD_INT 14
48301: EQUAL
48302: IFFALSE 48323
// points := [ 10 , 0 , 0 ] ;
48304: LD_ADDR_VAR 0 9
48308: PUSH
48309: LD_INT 10
48311: PUSH
48312: LD_INT 0
48314: PUSH
48315: LD_INT 0
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: LIST
48322: ST_TO_ADDR
// if GetClass ( i ) = 11 then
48323: LD_VAR 0 6
48327: PPUSH
48328: CALL_OW 257
48332: PUSH
48333: LD_INT 11
48335: EQUAL
48336: IFFALSE 48357
// points := [ 30 , 10 , 5 ] ;
48338: LD_ADDR_VAR 0 9
48342: PUSH
48343: LD_INT 30
48345: PUSH
48346: LD_INT 10
48348: PUSH
48349: LD_INT 5
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: LIST
48356: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
48357: LD_VAR 0 1
48361: PPUSH
48362: LD_INT 5
48364: PPUSH
48365: CALL_OW 321
48369: PUSH
48370: LD_INT 2
48372: EQUAL
48373: IFFALSE 48390
// bpoints := bpoints * 1.8 ;
48375: LD_ADDR_VAR 0 10
48379: PUSH
48380: LD_VAR 0 10
48384: PUSH
48385: LD_REAL  1.80000000000000E+0000
48388: MUL
48389: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
48390: LD_VAR 0 6
48394: PPUSH
48395: CALL_OW 257
48399: PUSH
48400: LD_INT 1
48402: PUSH
48403: LD_INT 2
48405: PUSH
48406: LD_INT 3
48408: PUSH
48409: LD_INT 4
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: IN
48418: IFFALSE 48438
48420: PUSH
48421: LD_VAR 0 1
48425: PPUSH
48426: LD_INT 51
48428: PPUSH
48429: CALL_OW 321
48433: PUSH
48434: LD_INT 2
48436: EQUAL
48437: AND
48438: IFFALSE 48455
// bpoints := bpoints * 1.2 ;
48440: LD_ADDR_VAR 0 10
48444: PUSH
48445: LD_VAR 0 10
48449: PUSH
48450: LD_REAL  1.20000000000000E+0000
48453: MUL
48454: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
48455: LD_VAR 0 6
48459: PPUSH
48460: CALL_OW 257
48464: PUSH
48465: LD_INT 5
48467: PUSH
48468: LD_INT 7
48470: PUSH
48471: LD_INT 9
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: LIST
48478: IN
48479: IFFALSE 48499
48481: PUSH
48482: LD_VAR 0 1
48486: PPUSH
48487: LD_INT 52
48489: PPUSH
48490: CALL_OW 321
48494: PUSH
48495: LD_INT 2
48497: EQUAL
48498: AND
48499: IFFALSE 48516
// bpoints := bpoints * 1.5 ;
48501: LD_ADDR_VAR 0 10
48505: PUSH
48506: LD_VAR 0 10
48510: PUSH
48511: LD_REAL  1.50000000000000E+0000
48514: MUL
48515: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
48516: LD_VAR 0 1
48520: PPUSH
48521: LD_INT 66
48523: PPUSH
48524: CALL_OW 321
48528: PUSH
48529: LD_INT 2
48531: EQUAL
48532: IFFALSE 48549
// bpoints := bpoints * 1.1 ;
48534: LD_ADDR_VAR 0 10
48538: PUSH
48539: LD_VAR 0 10
48543: PUSH
48544: LD_REAL  1.10000000000000E+0000
48547: MUL
48548: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
48549: LD_ADDR_VAR 0 10
48553: PUSH
48554: LD_VAR 0 10
48558: PUSH
48559: LD_VAR 0 6
48563: PPUSH
48564: LD_INT 1
48566: PPUSH
48567: CALL_OW 259
48571: PUSH
48572: LD_REAL  1.15000000000000E+0000
48575: MUL
48576: MUL
48577: ST_TO_ADDR
// end ; unit_vehicle :
48578: GO 49408
48580: LD_INT 2
48582: DOUBLE
48583: EQUAL
48584: IFTRUE 48588
48586: GO 49396
48588: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
48589: LD_VAR 0 6
48593: PPUSH
48594: CALL_OW 264
48598: PUSH
48599: LD_INT 2
48601: PUSH
48602: LD_INT 42
48604: PUSH
48605: LD_INT 24
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: LIST
48612: IN
48613: IFFALSE 48634
// points := [ 25 , 5 , 3 ] ;
48615: LD_ADDR_VAR 0 9
48619: PUSH
48620: LD_INT 25
48622: PUSH
48623: LD_INT 5
48625: PUSH
48626: LD_INT 3
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: LIST
48633: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48634: LD_VAR 0 6
48638: PPUSH
48639: CALL_OW 264
48643: PUSH
48644: LD_INT 4
48646: PUSH
48647: LD_INT 43
48649: PUSH
48650: LD_INT 25
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: LIST
48657: IN
48658: IFFALSE 48679
// points := [ 40 , 15 , 5 ] ;
48660: LD_ADDR_VAR 0 9
48664: PUSH
48665: LD_INT 40
48667: PUSH
48668: LD_INT 15
48670: PUSH
48671: LD_INT 5
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: LIST
48678: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48679: LD_VAR 0 6
48683: PPUSH
48684: CALL_OW 264
48688: PUSH
48689: LD_INT 3
48691: PUSH
48692: LD_INT 23
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: IN
48699: IFFALSE 48720
// points := [ 7 , 25 , 8 ] ;
48701: LD_ADDR_VAR 0 9
48705: PUSH
48706: LD_INT 7
48708: PUSH
48709: LD_INT 25
48711: PUSH
48712: LD_INT 8
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: LIST
48719: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48720: LD_VAR 0 6
48724: PPUSH
48725: CALL_OW 264
48729: PUSH
48730: LD_INT 5
48732: PUSH
48733: LD_INT 27
48735: PUSH
48736: LD_INT 44
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: LIST
48743: IN
48744: IFFALSE 48765
// points := [ 14 , 50 , 16 ] ;
48746: LD_ADDR_VAR 0 9
48750: PUSH
48751: LD_INT 14
48753: PUSH
48754: LD_INT 50
48756: PUSH
48757: LD_INT 16
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: LIST
48764: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48765: LD_VAR 0 6
48769: PPUSH
48770: CALL_OW 264
48774: PUSH
48775: LD_INT 6
48777: PUSH
48778: LD_INT 46
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: IN
48785: IFFALSE 48806
// points := [ 32 , 120 , 70 ] ;
48787: LD_ADDR_VAR 0 9
48791: PUSH
48792: LD_INT 32
48794: PUSH
48795: LD_INT 120
48797: PUSH
48798: LD_INT 70
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: LIST
48805: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48806: LD_VAR 0 6
48810: PPUSH
48811: CALL_OW 264
48815: PUSH
48816: LD_INT 7
48818: PUSH
48819: LD_INT 28
48821: PUSH
48822: LD_INT 45
48824: PUSH
48825: LD_INT 92
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: IN
48834: IFFALSE 48855
// points := [ 35 , 20 , 45 ] ;
48836: LD_ADDR_VAR 0 9
48840: PUSH
48841: LD_INT 35
48843: PUSH
48844: LD_INT 20
48846: PUSH
48847: LD_INT 45
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: LIST
48854: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48855: LD_VAR 0 6
48859: PPUSH
48860: CALL_OW 264
48864: PUSH
48865: LD_INT 47
48867: PUSH
48868: EMPTY
48869: LIST
48870: IN
48871: IFFALSE 48892
// points := [ 67 , 45 , 75 ] ;
48873: LD_ADDR_VAR 0 9
48877: PUSH
48878: LD_INT 67
48880: PUSH
48881: LD_INT 45
48883: PUSH
48884: LD_INT 75
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: LIST
48891: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48892: LD_VAR 0 6
48896: PPUSH
48897: CALL_OW 264
48901: PUSH
48902: LD_INT 26
48904: PUSH
48905: EMPTY
48906: LIST
48907: IN
48908: IFFALSE 48929
// points := [ 120 , 30 , 80 ] ;
48910: LD_ADDR_VAR 0 9
48914: PUSH
48915: LD_INT 120
48917: PUSH
48918: LD_INT 30
48920: PUSH
48921: LD_INT 80
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: LIST
48928: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48929: LD_VAR 0 6
48933: PPUSH
48934: CALL_OW 264
48938: PUSH
48939: LD_INT 22
48941: PUSH
48942: EMPTY
48943: LIST
48944: IN
48945: IFFALSE 48966
// points := [ 40 , 1 , 1 ] ;
48947: LD_ADDR_VAR 0 9
48951: PUSH
48952: LD_INT 40
48954: PUSH
48955: LD_INT 1
48957: PUSH
48958: LD_INT 1
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: LIST
48965: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48966: LD_VAR 0 6
48970: PPUSH
48971: CALL_OW 264
48975: PUSH
48976: LD_INT 29
48978: PUSH
48979: EMPTY
48980: LIST
48981: IN
48982: IFFALSE 49003
// points := [ 70 , 200 , 400 ] ;
48984: LD_ADDR_VAR 0 9
48988: PUSH
48989: LD_INT 70
48991: PUSH
48992: LD_INT 200
48994: PUSH
48995: LD_INT 400
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: LIST
49002: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
49003: LD_VAR 0 6
49007: PPUSH
49008: CALL_OW 264
49012: PUSH
49013: LD_INT 14
49015: PUSH
49016: LD_INT 53
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: IN
49023: IFFALSE 49044
// points := [ 40 , 10 , 20 ] ;
49025: LD_ADDR_VAR 0 9
49029: PUSH
49030: LD_INT 40
49032: PUSH
49033: LD_INT 10
49035: PUSH
49036: LD_INT 20
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: LIST
49043: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
49044: LD_VAR 0 6
49048: PPUSH
49049: CALL_OW 264
49053: PUSH
49054: LD_INT 9
49056: PUSH
49057: EMPTY
49058: LIST
49059: IN
49060: IFFALSE 49081
// points := [ 5 , 70 , 20 ] ;
49062: LD_ADDR_VAR 0 9
49066: PUSH
49067: LD_INT 5
49069: PUSH
49070: LD_INT 70
49072: PUSH
49073: LD_INT 20
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: LIST
49080: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
49081: LD_VAR 0 6
49085: PPUSH
49086: CALL_OW 264
49090: PUSH
49091: LD_INT 10
49093: PUSH
49094: EMPTY
49095: LIST
49096: IN
49097: IFFALSE 49118
// points := [ 35 , 110 , 70 ] ;
49099: LD_ADDR_VAR 0 9
49103: PUSH
49104: LD_INT 35
49106: PUSH
49107: LD_INT 110
49109: PUSH
49110: LD_INT 70
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: LIST
49117: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
49118: LD_VAR 0 6
49122: PPUSH
49123: CALL_OW 265
49127: PUSH
49128: LD_INT 25
49130: EQUAL
49131: IFFALSE 49152
// points := [ 80 , 65 , 100 ] ;
49133: LD_ADDR_VAR 0 9
49137: PUSH
49138: LD_INT 80
49140: PUSH
49141: LD_INT 65
49143: PUSH
49144: LD_INT 100
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: LIST
49151: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
49152: LD_VAR 0 6
49156: PPUSH
49157: CALL_OW 263
49161: PUSH
49162: LD_INT 1
49164: EQUAL
49165: IFFALSE 49200
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
49167: LD_ADDR_VAR 0 10
49171: PUSH
49172: LD_VAR 0 10
49176: PUSH
49177: LD_VAR 0 6
49181: PPUSH
49182: CALL_OW 311
49186: PPUSH
49187: LD_INT 3
49189: PPUSH
49190: CALL_OW 259
49194: PUSH
49195: LD_INT 4
49197: MUL
49198: MUL
49199: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
49200: LD_VAR 0 6
49204: PPUSH
49205: CALL_OW 263
49209: PUSH
49210: LD_INT 2
49212: EQUAL
49213: IFFALSE 49264
// begin j := IsControledBy ( i ) ;
49215: LD_ADDR_VAR 0 7
49219: PUSH
49220: LD_VAR 0 6
49224: PPUSH
49225: CALL_OW 312
49229: ST_TO_ADDR
// if j then
49230: LD_VAR 0 7
49234: IFFALSE 49264
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
49236: LD_ADDR_VAR 0 10
49240: PUSH
49241: LD_VAR 0 10
49245: PUSH
49246: LD_VAR 0 7
49250: PPUSH
49251: LD_INT 3
49253: PPUSH
49254: CALL_OW 259
49258: PUSH
49259: LD_INT 3
49261: MUL
49262: MUL
49263: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
49264: LD_VAR 0 6
49268: PPUSH
49269: CALL_OW 264
49273: PUSH
49274: LD_INT 5
49276: PUSH
49277: LD_INT 6
49279: PUSH
49280: LD_INT 46
49282: PUSH
49283: LD_INT 44
49285: PUSH
49286: LD_INT 47
49288: PUSH
49289: LD_INT 45
49291: PUSH
49292: LD_INT 28
49294: PUSH
49295: LD_INT 7
49297: PUSH
49298: LD_INT 27
49300: PUSH
49301: LD_INT 29
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: IN
49316: IFFALSE 49336
49318: PUSH
49319: LD_VAR 0 1
49323: PPUSH
49324: LD_INT 52
49326: PPUSH
49327: CALL_OW 321
49331: PUSH
49332: LD_INT 2
49334: EQUAL
49335: AND
49336: IFFALSE 49353
// bpoints := bpoints * 1.2 ;
49338: LD_ADDR_VAR 0 10
49342: PUSH
49343: LD_VAR 0 10
49347: PUSH
49348: LD_REAL  1.20000000000000E+0000
49351: MUL
49352: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
49353: LD_VAR 0 6
49357: PPUSH
49358: CALL_OW 264
49362: PUSH
49363: LD_INT 6
49365: PUSH
49366: LD_INT 46
49368: PUSH
49369: LD_INT 47
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: LIST
49376: IN
49377: IFFALSE 49394
// bpoints := bpoints * 1.2 ;
49379: LD_ADDR_VAR 0 10
49383: PUSH
49384: LD_VAR 0 10
49388: PUSH
49389: LD_REAL  1.20000000000000E+0000
49392: MUL
49393: ST_TO_ADDR
// end ; unit_building :
49394: GO 49408
49396: LD_INT 3
49398: DOUBLE
49399: EQUAL
49400: IFTRUE 49404
49402: GO 49407
49404: POP
// ; end ;
49405: GO 49408
49407: POP
// for j = 1 to 3 do
49408: LD_ADDR_VAR 0 7
49412: PUSH
49413: DOUBLE
49414: LD_INT 1
49416: DEC
49417: ST_TO_ADDR
49418: LD_INT 3
49420: PUSH
49421: FOR_TO
49422: IFFALSE 49475
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
49424: LD_ADDR_VAR 0 5
49428: PUSH
49429: LD_VAR 0 5
49433: PPUSH
49434: LD_VAR 0 7
49438: PPUSH
49439: LD_VAR 0 5
49443: PUSH
49444: LD_VAR 0 7
49448: ARRAY
49449: PUSH
49450: LD_VAR 0 9
49454: PUSH
49455: LD_VAR 0 7
49459: ARRAY
49460: PUSH
49461: LD_VAR 0 10
49465: MUL
49466: PLUS
49467: PPUSH
49468: CALL_OW 1
49472: ST_TO_ADDR
49473: GO 49421
49475: POP
49476: POP
// end ;
49477: GO 47950
49479: POP
49480: POP
// result := Replace ( result , 4 , tmp ) ;
49481: LD_ADDR_VAR 0 5
49485: PUSH
49486: LD_VAR 0 5
49490: PPUSH
49491: LD_INT 4
49493: PPUSH
49494: LD_VAR 0 8
49498: PPUSH
49499: CALL_OW 1
49503: ST_TO_ADDR
// end ;
49504: LD_VAR 0 5
49508: RET
// export function DangerAtRange ( unit , range ) ; begin
49509: LD_INT 0
49511: PPUSH
// if not unit then
49512: LD_VAR 0 1
49516: NOT
49517: IFFALSE 49521
// exit ;
49519: GO 49566
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
49521: LD_ADDR_VAR 0 3
49525: PUSH
49526: LD_VAR 0 1
49530: PPUSH
49531: CALL_OW 255
49535: PPUSH
49536: LD_VAR 0 1
49540: PPUSH
49541: CALL_OW 250
49545: PPUSH
49546: LD_VAR 0 1
49550: PPUSH
49551: CALL_OW 251
49555: PPUSH
49556: LD_VAR 0 2
49560: PPUSH
49561: CALL 47800 0 4
49565: ST_TO_ADDR
// end ;
49566: LD_VAR 0 3
49570: RET
// export function DangerInArea ( side , area ) ; begin
49571: LD_INT 0
49573: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
49574: LD_ADDR_VAR 0 3
49578: PUSH
49579: LD_VAR 0 2
49583: PPUSH
49584: LD_INT 81
49586: PUSH
49587: LD_VAR 0 1
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PPUSH
49596: CALL_OW 70
49600: ST_TO_ADDR
// end ;
49601: LD_VAR 0 3
49605: RET
// export function IsExtension ( b ) ; begin
49606: LD_INT 0
49608: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
49609: LD_ADDR_VAR 0 2
49613: PUSH
49614: LD_VAR 0 1
49618: PUSH
49619: LD_INT 23
49621: PUSH
49622: LD_INT 20
49624: PUSH
49625: LD_INT 22
49627: PUSH
49628: LD_INT 17
49630: PUSH
49631: LD_INT 24
49633: PUSH
49634: LD_INT 21
49636: PUSH
49637: LD_INT 19
49639: PUSH
49640: LD_INT 16
49642: PUSH
49643: LD_INT 25
49645: PUSH
49646: LD_INT 18
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: IN
49661: ST_TO_ADDR
// end ;
49662: LD_VAR 0 2
49666: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
49667: LD_INT 0
49669: PPUSH
49670: PPUSH
49671: PPUSH
// result := [ ] ;
49672: LD_ADDR_VAR 0 4
49676: PUSH
49677: EMPTY
49678: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49679: LD_ADDR_VAR 0 5
49683: PUSH
49684: LD_VAR 0 2
49688: PPUSH
49689: LD_INT 21
49691: PUSH
49692: LD_INT 3
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PPUSH
49699: CALL_OW 70
49703: ST_TO_ADDR
// if not tmp then
49704: LD_VAR 0 5
49708: NOT
49709: IFFALSE 49713
// exit ;
49711: GO 49777
// if checkLink then
49713: LD_VAR 0 3
49717: IFFALSE 49767
// begin for i in tmp do
49719: LD_ADDR_VAR 0 6
49723: PUSH
49724: LD_VAR 0 5
49728: PUSH
49729: FOR_IN
49730: IFFALSE 49765
// if GetBase ( i ) <> base then
49732: LD_VAR 0 6
49736: PPUSH
49737: CALL_OW 274
49741: PUSH
49742: LD_VAR 0 1
49746: NONEQUAL
49747: IFFALSE 49763
// ComLinkToBase ( base , i ) ;
49749: LD_VAR 0 1
49753: PPUSH
49754: LD_VAR 0 6
49758: PPUSH
49759: CALL_OW 169
49763: GO 49729
49765: POP
49766: POP
// end ; result := tmp ;
49767: LD_ADDR_VAR 0 4
49771: PUSH
49772: LD_VAR 0 5
49776: ST_TO_ADDR
// end ;
49777: LD_VAR 0 4
49781: RET
// export function ComComplete ( units , b ) ; var i ; begin
49782: LD_INT 0
49784: PPUSH
49785: PPUSH
// if not units then
49786: LD_VAR 0 1
49790: NOT
49791: IFFALSE 49795
// exit ;
49793: GO 49885
// for i in units do
49795: LD_ADDR_VAR 0 4
49799: PUSH
49800: LD_VAR 0 1
49804: PUSH
49805: FOR_IN
49806: IFFALSE 49883
// if BuildingStatus ( b ) = bs_build then
49808: LD_VAR 0 2
49812: PPUSH
49813: CALL_OW 461
49817: PUSH
49818: LD_INT 1
49820: EQUAL
49821: IFFALSE 49881
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49823: LD_VAR 0 4
49827: PPUSH
49828: LD_STRING h
49830: PUSH
49831: LD_VAR 0 2
49835: PPUSH
49836: CALL_OW 250
49840: PUSH
49841: LD_VAR 0 2
49845: PPUSH
49846: CALL_OW 251
49850: PUSH
49851: LD_VAR 0 2
49855: PUSH
49856: LD_INT 0
49858: PUSH
49859: LD_INT 0
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: PUSH
49874: EMPTY
49875: LIST
49876: PPUSH
49877: CALL_OW 446
49881: GO 49805
49883: POP
49884: POP
// end ;
49885: LD_VAR 0 3
49889: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49890: LD_INT 0
49892: PPUSH
49893: PPUSH
49894: PPUSH
49895: PPUSH
49896: PPUSH
49897: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49898: LD_VAR 0 1
49902: NOT
49903: IFTRUE 49920
49905: PUSH
49906: LD_VAR 0 1
49910: PPUSH
49911: CALL_OW 263
49915: PUSH
49916: LD_INT 2
49918: NONEQUAL
49919: OR
49920: IFFALSE 49924
// exit ;
49922: GO 50240
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49924: LD_ADDR_VAR 0 6
49928: PUSH
49929: LD_INT 22
49931: PUSH
49932: LD_VAR 0 1
49936: PPUSH
49937: CALL_OW 255
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 2
49948: PUSH
49949: LD_INT 30
49951: PUSH
49952: LD_INT 36
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 34
49961: PUSH
49962: LD_INT 31
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: LIST
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PPUSH
49978: CALL_OW 69
49982: ST_TO_ADDR
// if not tmp then
49983: LD_VAR 0 6
49987: NOT
49988: IFFALSE 49992
// exit ;
49990: GO 50240
// result := [ ] ;
49992: LD_ADDR_VAR 0 2
49996: PUSH
49997: EMPTY
49998: ST_TO_ADDR
// for i in tmp do
49999: LD_ADDR_VAR 0 3
50003: PUSH
50004: LD_VAR 0 6
50008: PUSH
50009: FOR_IN
50010: IFFALSE 50081
// begin t := UnitsInside ( i ) ;
50012: LD_ADDR_VAR 0 4
50016: PUSH
50017: LD_VAR 0 3
50021: PPUSH
50022: CALL_OW 313
50026: ST_TO_ADDR
// if t then
50027: LD_VAR 0 4
50031: IFFALSE 50079
// for j in t do
50033: LD_ADDR_VAR 0 7
50037: PUSH
50038: LD_VAR 0 4
50042: PUSH
50043: FOR_IN
50044: IFFALSE 50077
// result := Replace ( result , result + 1 , j ) ;
50046: LD_ADDR_VAR 0 2
50050: PUSH
50051: LD_VAR 0 2
50055: PPUSH
50056: LD_VAR 0 2
50060: PUSH
50061: LD_INT 1
50063: PLUS
50064: PPUSH
50065: LD_VAR 0 7
50069: PPUSH
50070: CALL_OW 1
50074: ST_TO_ADDR
50075: GO 50043
50077: POP
50078: POP
// end ;
50079: GO 50009
50081: POP
50082: POP
// if not result then
50083: LD_VAR 0 2
50087: NOT
50088: IFFALSE 50092
// exit ;
50090: GO 50240
// mech := result [ 1 ] ;
50092: LD_ADDR_VAR 0 5
50096: PUSH
50097: LD_VAR 0 2
50101: PUSH
50102: LD_INT 1
50104: ARRAY
50105: ST_TO_ADDR
// if result > 1 then
50106: LD_VAR 0 2
50110: PUSH
50111: LD_INT 1
50113: GREATER
50114: IFFALSE 50226
// begin for i = 2 to result do
50116: LD_ADDR_VAR 0 3
50120: PUSH
50121: DOUBLE
50122: LD_INT 2
50124: DEC
50125: ST_TO_ADDR
50126: LD_VAR 0 2
50130: PUSH
50131: FOR_TO
50132: IFFALSE 50224
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
50134: LD_ADDR_VAR 0 4
50138: PUSH
50139: LD_VAR 0 2
50143: PUSH
50144: LD_VAR 0 3
50148: ARRAY
50149: PPUSH
50150: LD_INT 3
50152: PPUSH
50153: CALL_OW 259
50157: PUSH
50158: LD_VAR 0 2
50162: PUSH
50163: LD_VAR 0 3
50167: ARRAY
50168: PPUSH
50169: CALL_OW 432
50173: MINUS
50174: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
50175: LD_VAR 0 4
50179: PUSH
50180: LD_VAR 0 5
50184: PPUSH
50185: LD_INT 3
50187: PPUSH
50188: CALL_OW 259
50192: PUSH
50193: LD_VAR 0 5
50197: PPUSH
50198: CALL_OW 432
50202: MINUS
50203: GREATEREQUAL
50204: IFFALSE 50222
// mech := result [ i ] ;
50206: LD_ADDR_VAR 0 5
50210: PUSH
50211: LD_VAR 0 2
50215: PUSH
50216: LD_VAR 0 3
50220: ARRAY
50221: ST_TO_ADDR
// end ;
50222: GO 50131
50224: POP
50225: POP
// end ; ComLinkTo ( vehicle , mech ) ;
50226: LD_VAR 0 1
50230: PPUSH
50231: LD_VAR 0 5
50235: PPUSH
50236: CALL_OW 135
// end ;
50240: LD_VAR 0 2
50244: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
50245: LD_INT 0
50247: PPUSH
50248: PPUSH
50249: PPUSH
50250: PPUSH
50251: PPUSH
50252: PPUSH
50253: PPUSH
50254: PPUSH
50255: PPUSH
50256: PPUSH
50257: PPUSH
50258: PPUSH
50259: PPUSH
// result := [ ] ;
50260: LD_ADDR_VAR 0 7
50264: PUSH
50265: EMPTY
50266: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
50267: LD_VAR 0 1
50271: PPUSH
50272: CALL_OW 266
50276: PUSH
50277: LD_INT 0
50279: PUSH
50280: LD_INT 1
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: IN
50287: NOT
50288: IFFALSE 50292
// exit ;
50290: GO 51932
// if name then
50292: LD_VAR 0 3
50296: IFFALSE 50312
// SetBName ( base_dep , name ) ;
50298: LD_VAR 0 1
50302: PPUSH
50303: LD_VAR 0 3
50307: PPUSH
50308: CALL_OW 500
// base := GetBase ( base_dep ) ;
50312: LD_ADDR_VAR 0 15
50316: PUSH
50317: LD_VAR 0 1
50321: PPUSH
50322: CALL_OW 274
50326: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
50327: LD_ADDR_VAR 0 16
50331: PUSH
50332: LD_VAR 0 1
50336: PPUSH
50337: CALL_OW 255
50341: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
50342: LD_ADDR_VAR 0 17
50346: PUSH
50347: LD_VAR 0 1
50351: PPUSH
50352: CALL_OW 248
50356: ST_TO_ADDR
// if sources then
50357: LD_VAR 0 5
50361: IFFALSE 50408
// for i = 1 to 3 do
50363: LD_ADDR_VAR 0 8
50367: PUSH
50368: DOUBLE
50369: LD_INT 1
50371: DEC
50372: ST_TO_ADDR
50373: LD_INT 3
50375: PUSH
50376: FOR_TO
50377: IFFALSE 50406
// AddResourceType ( base , i , sources [ i ] ) ;
50379: LD_VAR 0 15
50383: PPUSH
50384: LD_VAR 0 8
50388: PPUSH
50389: LD_VAR 0 5
50393: PUSH
50394: LD_VAR 0 8
50398: ARRAY
50399: PPUSH
50400: CALL_OW 276
50404: GO 50376
50406: POP
50407: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
50408: LD_ADDR_VAR 0 18
50412: PUSH
50413: LD_VAR 0 15
50417: PPUSH
50418: LD_VAR 0 2
50422: PPUSH
50423: LD_INT 1
50425: PPUSH
50426: CALL 49667 0 3
50430: ST_TO_ADDR
// InitHc ;
50431: CALL_OW 19
// InitUc ;
50435: CALL_OW 18
// uc_side := side ;
50439: LD_ADDR_OWVAR 20
50443: PUSH
50444: LD_VAR 0 16
50448: ST_TO_ADDR
// uc_nation := nation ;
50449: LD_ADDR_OWVAR 21
50453: PUSH
50454: LD_VAR 0 17
50458: ST_TO_ADDR
// if buildings then
50459: LD_VAR 0 18
50463: IFFALSE 51791
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
50465: LD_ADDR_VAR 0 19
50469: PUSH
50470: LD_VAR 0 18
50474: PPUSH
50475: LD_INT 2
50477: PUSH
50478: LD_INT 30
50480: PUSH
50481: LD_INT 29
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 30
50490: PUSH
50491: LD_INT 30
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: LIST
50502: PPUSH
50503: CALL_OW 72
50507: ST_TO_ADDR
// if tmp then
50508: LD_VAR 0 19
50512: IFFALSE 50560
// for i in tmp do
50514: LD_ADDR_VAR 0 8
50518: PUSH
50519: LD_VAR 0 19
50523: PUSH
50524: FOR_IN
50525: IFFALSE 50558
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
50527: LD_VAR 0 8
50531: PPUSH
50532: CALL_OW 250
50536: PPUSH
50537: LD_VAR 0 8
50541: PPUSH
50542: CALL_OW 251
50546: PPUSH
50547: LD_VAR 0 16
50551: PPUSH
50552: CALL_OW 441
50556: GO 50524
50558: POP
50559: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
50560: LD_VAR 0 18
50564: PPUSH
50565: LD_INT 2
50567: PUSH
50568: LD_INT 30
50570: PUSH
50571: LD_INT 32
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 30
50580: PUSH
50581: LD_INT 33
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: LIST
50592: PPUSH
50593: CALL_OW 72
50597: IFFALSE 50685
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
50599: LD_ADDR_VAR 0 8
50603: PUSH
50604: LD_VAR 0 18
50608: PPUSH
50609: LD_INT 2
50611: PUSH
50612: LD_INT 30
50614: PUSH
50615: LD_INT 32
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 30
50624: PUSH
50625: LD_INT 33
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: LIST
50636: PPUSH
50637: CALL_OW 72
50641: PUSH
50642: FOR_IN
50643: IFFALSE 50683
// begin if not GetBWeapon ( i ) then
50645: LD_VAR 0 8
50649: PPUSH
50650: CALL_OW 269
50654: NOT
50655: IFFALSE 50681
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50657: LD_VAR 0 8
50661: PPUSH
50662: LD_VAR 0 8
50666: PPUSH
50667: LD_VAR 0 2
50671: PPUSH
50672: CALL 51937 0 2
50676: PPUSH
50677: CALL_OW 431
// end ;
50681: GO 50642
50683: POP
50684: POP
// end ; for i = 1 to personel do
50685: LD_ADDR_VAR 0 8
50689: PUSH
50690: DOUBLE
50691: LD_INT 1
50693: DEC
50694: ST_TO_ADDR
50695: LD_VAR 0 6
50699: PUSH
50700: FOR_TO
50701: IFFALSE 51771
// begin if i > 4 then
50703: LD_VAR 0 8
50707: PUSH
50708: LD_INT 4
50710: GREATER
50711: IFFALSE 50715
// break ;
50713: GO 51771
// case i of 1 :
50715: LD_VAR 0 8
50719: PUSH
50720: LD_INT 1
50722: DOUBLE
50723: EQUAL
50724: IFTRUE 50728
50726: GO 50808
50728: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50729: LD_ADDR_VAR 0 12
50733: PUSH
50734: LD_VAR 0 18
50738: PPUSH
50739: LD_INT 22
50741: PUSH
50742: LD_VAR 0 16
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 58
50753: PUSH
50754: EMPTY
50755: LIST
50756: PUSH
50757: LD_INT 2
50759: PUSH
50760: LD_INT 30
50762: PUSH
50763: LD_INT 32
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 30
50772: PUSH
50773: LD_INT 4
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 30
50782: PUSH
50783: LD_INT 5
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: LIST
50800: PPUSH
50801: CALL_OW 72
50805: ST_TO_ADDR
50806: GO 51030
50808: LD_INT 2
50810: DOUBLE
50811: EQUAL
50812: IFTRUE 50816
50814: GO 50878
50816: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50817: LD_ADDR_VAR 0 12
50821: PUSH
50822: LD_VAR 0 18
50826: PPUSH
50827: LD_INT 22
50829: PUSH
50830: LD_VAR 0 16
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 2
50841: PUSH
50842: LD_INT 30
50844: PUSH
50845: LD_INT 0
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 30
50854: PUSH
50855: LD_INT 1
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: LIST
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PPUSH
50871: CALL_OW 72
50875: ST_TO_ADDR
50876: GO 51030
50878: LD_INT 3
50880: DOUBLE
50881: EQUAL
50882: IFTRUE 50886
50884: GO 50948
50886: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50887: LD_ADDR_VAR 0 12
50891: PUSH
50892: LD_VAR 0 18
50896: PPUSH
50897: LD_INT 22
50899: PUSH
50900: LD_VAR 0 16
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 2
50911: PUSH
50912: LD_INT 30
50914: PUSH
50915: LD_INT 2
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 30
50924: PUSH
50925: LD_INT 3
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: LIST
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PPUSH
50941: CALL_OW 72
50945: ST_TO_ADDR
50946: GO 51030
50948: LD_INT 4
50950: DOUBLE
50951: EQUAL
50952: IFTRUE 50956
50954: GO 51029
50956: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50957: LD_ADDR_VAR 0 12
50961: PUSH
50962: LD_VAR 0 18
50966: PPUSH
50967: LD_INT 22
50969: PUSH
50970: LD_VAR 0 16
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 2
50981: PUSH
50982: LD_INT 30
50984: PUSH
50985: LD_INT 6
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 30
50994: PUSH
50995: LD_INT 7
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 30
51004: PUSH
51005: LD_INT 8
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PPUSH
51022: CALL_OW 72
51026: ST_TO_ADDR
51027: GO 51030
51029: POP
// if i = 1 then
51030: LD_VAR 0 8
51034: PUSH
51035: LD_INT 1
51037: EQUAL
51038: IFFALSE 51149
// begin tmp := [ ] ;
51040: LD_ADDR_VAR 0 19
51044: PUSH
51045: EMPTY
51046: ST_TO_ADDR
// for j in f do
51047: LD_ADDR_VAR 0 9
51051: PUSH
51052: LD_VAR 0 12
51056: PUSH
51057: FOR_IN
51058: IFFALSE 51131
// if GetBType ( j ) = b_bunker then
51060: LD_VAR 0 9
51064: PPUSH
51065: CALL_OW 266
51069: PUSH
51070: LD_INT 32
51072: EQUAL
51073: IFFALSE 51100
// tmp := Insert ( tmp , 1 , j ) else
51075: LD_ADDR_VAR 0 19
51079: PUSH
51080: LD_VAR 0 19
51084: PPUSH
51085: LD_INT 1
51087: PPUSH
51088: LD_VAR 0 9
51092: PPUSH
51093: CALL_OW 2
51097: ST_TO_ADDR
51098: GO 51129
// tmp := Insert ( tmp , tmp + 1 , j ) ;
51100: LD_ADDR_VAR 0 19
51104: PUSH
51105: LD_VAR 0 19
51109: PPUSH
51110: LD_VAR 0 19
51114: PUSH
51115: LD_INT 1
51117: PLUS
51118: PPUSH
51119: LD_VAR 0 9
51123: PPUSH
51124: CALL_OW 2
51128: ST_TO_ADDR
51129: GO 51057
51131: POP
51132: POP
// if tmp then
51133: LD_VAR 0 19
51137: IFFALSE 51149
// f := tmp ;
51139: LD_ADDR_VAR 0 12
51143: PUSH
51144: LD_VAR 0 19
51148: ST_TO_ADDR
// end ; x := personel [ i ] ;
51149: LD_ADDR_VAR 0 13
51153: PUSH
51154: LD_VAR 0 6
51158: PUSH
51159: LD_VAR 0 8
51163: ARRAY
51164: ST_TO_ADDR
// if x = - 1 then
51165: LD_VAR 0 13
51169: PUSH
51170: LD_INT 1
51172: NEG
51173: EQUAL
51174: IFFALSE 51385
// begin for j in f do
51176: LD_ADDR_VAR 0 9
51180: PUSH
51181: LD_VAR 0 12
51185: PUSH
51186: FOR_IN
51187: IFFALSE 51381
// repeat InitHc ;
51189: CALL_OW 19
// if GetBType ( j ) = b_barracks then
51193: LD_VAR 0 9
51197: PPUSH
51198: CALL_OW 266
51202: PUSH
51203: LD_INT 5
51205: EQUAL
51206: IFFALSE 51276
// begin if UnitsInside ( j ) < 3 then
51208: LD_VAR 0 9
51212: PPUSH
51213: CALL_OW 313
51217: PUSH
51218: LD_INT 3
51220: LESS
51221: IFFALSE 51257
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51223: LD_INT 0
51225: PPUSH
51226: LD_INT 5
51228: PUSH
51229: LD_INT 8
51231: PUSH
51232: LD_INT 9
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: LIST
51239: PUSH
51240: LD_VAR 0 17
51244: ARRAY
51245: PPUSH
51246: LD_VAR 0 4
51250: PPUSH
51251: CALL_OW 380
51255: GO 51274
// PrepareHuman ( false , i , skill ) ;
51257: LD_INT 0
51259: PPUSH
51260: LD_VAR 0 8
51264: PPUSH
51265: LD_VAR 0 4
51269: PPUSH
51270: CALL_OW 380
// end else
51274: GO 51293
// PrepareHuman ( false , i , skill ) ;
51276: LD_INT 0
51278: PPUSH
51279: LD_VAR 0 8
51283: PPUSH
51284: LD_VAR 0 4
51288: PPUSH
51289: CALL_OW 380
// un := CreateHuman ;
51293: LD_ADDR_VAR 0 14
51297: PUSH
51298: CALL_OW 44
51302: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51303: LD_ADDR_VAR 0 7
51307: PUSH
51308: LD_VAR 0 7
51312: PPUSH
51313: LD_INT 1
51315: PPUSH
51316: LD_VAR 0 14
51320: PPUSH
51321: CALL_OW 2
51325: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
51326: LD_VAR 0 14
51330: PPUSH
51331: LD_VAR 0 9
51335: PPUSH
51336: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
51340: LD_VAR 0 9
51344: PPUSH
51345: CALL_OW 313
51349: PUSH
51350: LD_INT 6
51352: EQUAL
51353: IFTRUE 51377
51355: PUSH
51356: LD_VAR 0 9
51360: PPUSH
51361: CALL_OW 266
51365: PUSH
51366: LD_INT 32
51368: PUSH
51369: LD_INT 31
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: IN
51376: OR
51377: IFFALSE 51189
51379: GO 51186
51381: POP
51382: POP
// end else
51383: GO 51769
// for j = 1 to x do
51385: LD_ADDR_VAR 0 9
51389: PUSH
51390: DOUBLE
51391: LD_INT 1
51393: DEC
51394: ST_TO_ADDR
51395: LD_VAR 0 13
51399: PUSH
51400: FOR_TO
51401: IFFALSE 51767
// begin InitHc ;
51403: CALL_OW 19
// if not f then
51407: LD_VAR 0 12
51411: NOT
51412: IFFALSE 51501
// begin PrepareHuman ( false , i , skill ) ;
51414: LD_INT 0
51416: PPUSH
51417: LD_VAR 0 8
51421: PPUSH
51422: LD_VAR 0 4
51426: PPUSH
51427: CALL_OW 380
// un := CreateHuman ;
51431: LD_ADDR_VAR 0 14
51435: PUSH
51436: CALL_OW 44
51440: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51441: LD_ADDR_VAR 0 7
51445: PUSH
51446: LD_VAR 0 7
51450: PPUSH
51451: LD_INT 1
51453: PPUSH
51454: LD_VAR 0 14
51458: PPUSH
51459: CALL_OW 2
51463: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51464: LD_VAR 0 14
51468: PPUSH
51469: LD_VAR 0 1
51473: PPUSH
51474: CALL_OW 250
51478: PPUSH
51479: LD_VAR 0 1
51483: PPUSH
51484: CALL_OW 251
51488: PPUSH
51489: LD_INT 10
51491: PPUSH
51492: LD_INT 0
51494: PPUSH
51495: CALL_OW 50
// continue ;
51499: GO 51400
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
51501: LD_VAR 0 12
51505: PUSH
51506: LD_INT 1
51508: ARRAY
51509: PPUSH
51510: CALL_OW 313
51514: IFFALSE 51542
51516: PUSH
51517: LD_VAR 0 12
51521: PUSH
51522: LD_INT 1
51524: ARRAY
51525: PPUSH
51526: CALL_OW 266
51530: PUSH
51531: LD_INT 32
51533: PUSH
51534: LD_INT 31
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: IN
51541: AND
51542: IFTRUE 51563
51544: PUSH
51545: LD_VAR 0 12
51549: PUSH
51550: LD_INT 1
51552: ARRAY
51553: PPUSH
51554: CALL_OW 313
51558: PUSH
51559: LD_INT 6
51561: EQUAL
51562: OR
51563: IFFALSE 51583
// f := Delete ( f , 1 ) ;
51565: LD_ADDR_VAR 0 12
51569: PUSH
51570: LD_VAR 0 12
51574: PPUSH
51575: LD_INT 1
51577: PPUSH
51578: CALL_OW 3
51582: ST_TO_ADDR
// if not f then
51583: LD_VAR 0 12
51587: NOT
51588: IFFALSE 51606
// begin x := x + 2 ;
51590: LD_ADDR_VAR 0 13
51594: PUSH
51595: LD_VAR 0 13
51599: PUSH
51600: LD_INT 2
51602: PLUS
51603: ST_TO_ADDR
// continue ;
51604: GO 51400
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
51606: LD_VAR 0 12
51610: PUSH
51611: LD_INT 1
51613: ARRAY
51614: PPUSH
51615: CALL_OW 266
51619: PUSH
51620: LD_INT 5
51622: EQUAL
51623: IFFALSE 51697
// begin if UnitsInside ( f [ 1 ] ) < 3 then
51625: LD_VAR 0 12
51629: PUSH
51630: LD_INT 1
51632: ARRAY
51633: PPUSH
51634: CALL_OW 313
51638: PUSH
51639: LD_INT 3
51641: LESS
51642: IFFALSE 51678
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51644: LD_INT 0
51646: PPUSH
51647: LD_INT 5
51649: PUSH
51650: LD_INT 8
51652: PUSH
51653: LD_INT 9
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: LIST
51660: PUSH
51661: LD_VAR 0 17
51665: ARRAY
51666: PPUSH
51667: LD_VAR 0 4
51671: PPUSH
51672: CALL_OW 380
51676: GO 51695
// PrepareHuman ( false , i , skill ) ;
51678: LD_INT 0
51680: PPUSH
51681: LD_VAR 0 8
51685: PPUSH
51686: LD_VAR 0 4
51690: PPUSH
51691: CALL_OW 380
// end else
51695: GO 51714
// PrepareHuman ( false , i , skill ) ;
51697: LD_INT 0
51699: PPUSH
51700: LD_VAR 0 8
51704: PPUSH
51705: LD_VAR 0 4
51709: PPUSH
51710: CALL_OW 380
// un := CreateHuman ;
51714: LD_ADDR_VAR 0 14
51718: PUSH
51719: CALL_OW 44
51723: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51724: LD_ADDR_VAR 0 7
51728: PUSH
51729: LD_VAR 0 7
51733: PPUSH
51734: LD_INT 1
51736: PPUSH
51737: LD_VAR 0 14
51741: PPUSH
51742: CALL_OW 2
51746: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51747: LD_VAR 0 14
51751: PPUSH
51752: LD_VAR 0 12
51756: PUSH
51757: LD_INT 1
51759: ARRAY
51760: PPUSH
51761: CALL_OW 52
// end ;
51765: GO 51400
51767: POP
51768: POP
// end ;
51769: GO 50700
51771: POP
51772: POP
// result := result ^ buildings ;
51773: LD_ADDR_VAR 0 7
51777: PUSH
51778: LD_VAR 0 7
51782: PUSH
51783: LD_VAR 0 18
51787: ADD
51788: ST_TO_ADDR
// end else
51789: GO 51932
// begin for i = 1 to personel do
51791: LD_ADDR_VAR 0 8
51795: PUSH
51796: DOUBLE
51797: LD_INT 1
51799: DEC
51800: ST_TO_ADDR
51801: LD_VAR 0 6
51805: PUSH
51806: FOR_TO
51807: IFFALSE 51930
// begin if i > 4 then
51809: LD_VAR 0 8
51813: PUSH
51814: LD_INT 4
51816: GREATER
51817: IFFALSE 51821
// break ;
51819: GO 51930
// x := personel [ i ] ;
51821: LD_ADDR_VAR 0 13
51825: PUSH
51826: LD_VAR 0 6
51830: PUSH
51831: LD_VAR 0 8
51835: ARRAY
51836: ST_TO_ADDR
// if x = - 1 then
51837: LD_VAR 0 13
51841: PUSH
51842: LD_INT 1
51844: NEG
51845: EQUAL
51846: IFFALSE 51850
// continue ;
51848: GO 51806
// PrepareHuman ( false , i , skill ) ;
51850: LD_INT 0
51852: PPUSH
51853: LD_VAR 0 8
51857: PPUSH
51858: LD_VAR 0 4
51862: PPUSH
51863: CALL_OW 380
// un := CreateHuman ;
51867: LD_ADDR_VAR 0 14
51871: PUSH
51872: CALL_OW 44
51876: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51877: LD_VAR 0 14
51881: PPUSH
51882: LD_VAR 0 1
51886: PPUSH
51887: CALL_OW 250
51891: PPUSH
51892: LD_VAR 0 1
51896: PPUSH
51897: CALL_OW 251
51901: PPUSH
51902: LD_INT 10
51904: PPUSH
51905: LD_INT 0
51907: PPUSH
51908: CALL_OW 50
// result := result ^ un ;
51912: LD_ADDR_VAR 0 7
51916: PUSH
51917: LD_VAR 0 7
51921: PUSH
51922: LD_VAR 0 14
51926: ADD
51927: ST_TO_ADDR
// end ;
51928: GO 51806
51930: POP
51931: POP
// end ; end ;
51932: LD_VAR 0 7
51936: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51937: LD_INT 0
51939: PPUSH
51940: PPUSH
51941: PPUSH
51942: PPUSH
51943: PPUSH
51944: PPUSH
51945: PPUSH
51946: PPUSH
51947: PPUSH
51948: PPUSH
51949: PPUSH
51950: PPUSH
51951: PPUSH
51952: PPUSH
51953: PPUSH
51954: PPUSH
// result := false ;
51955: LD_ADDR_VAR 0 3
51959: PUSH
51960: LD_INT 0
51962: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51963: LD_VAR 0 1
51967: NOT
51968: IFTRUE 51993
51970: PUSH
51971: LD_VAR 0 1
51975: PPUSH
51976: CALL_OW 266
51980: PUSH
51981: LD_INT 32
51983: PUSH
51984: LD_INT 33
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: IN
51991: NOT
51992: OR
51993: IFFALSE 51997
// exit ;
51995: GO 53132
// nat := GetNation ( tower ) ;
51997: LD_ADDR_VAR 0 12
52001: PUSH
52002: LD_VAR 0 1
52006: PPUSH
52007: CALL_OW 248
52011: ST_TO_ADDR
// side := GetSide ( tower ) ;
52012: LD_ADDR_VAR 0 16
52016: PUSH
52017: LD_VAR 0 1
52021: PPUSH
52022: CALL_OW 255
52026: ST_TO_ADDR
// x := GetX ( tower ) ;
52027: LD_ADDR_VAR 0 10
52031: PUSH
52032: LD_VAR 0 1
52036: PPUSH
52037: CALL_OW 250
52041: ST_TO_ADDR
// y := GetY ( tower ) ;
52042: LD_ADDR_VAR 0 11
52046: PUSH
52047: LD_VAR 0 1
52051: PPUSH
52052: CALL_OW 251
52056: ST_TO_ADDR
// if not x or not y then
52057: LD_VAR 0 10
52061: NOT
52062: IFTRUE 52071
52064: PUSH
52065: LD_VAR 0 11
52069: NOT
52070: OR
52071: IFFALSE 52075
// exit ;
52073: GO 53132
// weapon := 0 ;
52075: LD_ADDR_VAR 0 18
52079: PUSH
52080: LD_INT 0
52082: ST_TO_ADDR
// fac_list := [ ] ;
52083: LD_ADDR_VAR 0 17
52087: PUSH
52088: EMPTY
52089: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
52090: LD_ADDR_VAR 0 6
52094: PUSH
52095: LD_VAR 0 1
52099: PPUSH
52100: CALL_OW 274
52104: PPUSH
52105: LD_VAR 0 2
52109: PPUSH
52110: LD_INT 0
52112: PPUSH
52113: CALL 49667 0 3
52117: PPUSH
52118: LD_INT 30
52120: PUSH
52121: LD_INT 3
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PPUSH
52128: CALL_OW 72
52132: ST_TO_ADDR
// if not factories then
52133: LD_VAR 0 6
52137: NOT
52138: IFFALSE 52142
// exit ;
52140: GO 53132
// for i in factories do
52142: LD_ADDR_VAR 0 8
52146: PUSH
52147: LD_VAR 0 6
52151: PUSH
52152: FOR_IN
52153: IFFALSE 52178
// fac_list := fac_list union AvailableWeaponList ( i ) ;
52155: LD_ADDR_VAR 0 17
52159: PUSH
52160: LD_VAR 0 17
52164: PUSH
52165: LD_VAR 0 8
52169: PPUSH
52170: CALL_OW 478
52174: UNION
52175: ST_TO_ADDR
52176: GO 52152
52178: POP
52179: POP
// if not fac_list then
52180: LD_VAR 0 17
52184: NOT
52185: IFFALSE 52189
// exit ;
52187: GO 53132
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
52189: LD_ADDR_VAR 0 5
52193: PUSH
52194: LD_INT 4
52196: PUSH
52197: LD_INT 5
52199: PUSH
52200: LD_INT 9
52202: PUSH
52203: LD_INT 10
52205: PUSH
52206: LD_INT 6
52208: PUSH
52209: LD_INT 7
52211: PUSH
52212: LD_INT 11
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 27
52226: PUSH
52227: LD_INT 28
52229: PUSH
52230: LD_INT 26
52232: PUSH
52233: LD_INT 30
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 43
52244: PUSH
52245: LD_INT 44
52247: PUSH
52248: LD_INT 46
52250: PUSH
52251: LD_INT 45
52253: PUSH
52254: LD_INT 47
52256: PUSH
52257: LD_INT 49
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: LIST
52272: PUSH
52273: LD_VAR 0 12
52277: ARRAY
52278: ST_TO_ADDR
// list := list isect fac_list ;
52279: LD_ADDR_VAR 0 5
52283: PUSH
52284: LD_VAR 0 5
52288: PUSH
52289: LD_VAR 0 17
52293: ISECT
52294: ST_TO_ADDR
// if not list then
52295: LD_VAR 0 5
52299: NOT
52300: IFFALSE 52304
// exit ;
52302: GO 53132
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
52304: LD_VAR 0 12
52308: PUSH
52309: LD_INT 3
52311: EQUAL
52312: IFFALSE 52324
52314: PUSH
52315: LD_INT 49
52317: PUSH
52318: LD_VAR 0 5
52322: IN
52323: AND
52324: IFFALSE 52344
52326: PUSH
52327: LD_INT 31
52329: PPUSH
52330: LD_VAR 0 16
52334: PPUSH
52335: CALL_OW 321
52339: PUSH
52340: LD_INT 2
52342: EQUAL
52343: AND
52344: IFFALSE 52404
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
52346: LD_INT 22
52348: PUSH
52349: LD_VAR 0 16
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 35
52360: PUSH
52361: LD_INT 49
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 91
52370: PUSH
52371: LD_VAR 0 1
52375: PUSH
52376: LD_INT 10
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: LIST
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: LIST
52388: PPUSH
52389: CALL_OW 69
52393: NOT
52394: IFFALSE 52404
// weapon := ru_time_lapser ;
52396: LD_ADDR_VAR 0 18
52400: PUSH
52401: LD_INT 49
52403: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
52404: LD_VAR 0 12
52408: PUSH
52409: LD_INT 1
52411: PUSH
52412: LD_INT 2
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: IN
52419: IFFALSE 52443
52421: PUSH
52422: LD_INT 11
52424: PUSH
52425: LD_VAR 0 5
52429: IN
52430: IFTRUE 52442
52432: PUSH
52433: LD_INT 30
52435: PUSH
52436: LD_VAR 0 5
52440: IN
52441: OR
52442: AND
52443: IFFALSE 52463
52445: PUSH
52446: LD_INT 6
52448: PPUSH
52449: LD_VAR 0 16
52453: PPUSH
52454: CALL_OW 321
52458: PUSH
52459: LD_INT 2
52461: EQUAL
52462: AND
52463: IFFALSE 52630
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
52465: LD_INT 22
52467: PUSH
52468: LD_VAR 0 16
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 2
52479: PUSH
52480: LD_INT 35
52482: PUSH
52483: LD_INT 11
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 35
52492: PUSH
52493: LD_INT 30
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 91
52507: PUSH
52508: LD_VAR 0 1
52512: PUSH
52513: LD_INT 18
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: LIST
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: LIST
52525: PPUSH
52526: CALL_OW 69
52530: NOT
52531: IFFALSE 52607
52533: PUSH
52534: LD_INT 22
52536: PUSH
52537: LD_VAR 0 16
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 2
52548: PUSH
52549: LD_INT 30
52551: PUSH
52552: LD_INT 32
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 30
52561: PUSH
52562: LD_INT 33
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 91
52576: PUSH
52577: LD_VAR 0 1
52581: PUSH
52582: LD_INT 12
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: LIST
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: LIST
52594: PUSH
52595: EMPTY
52596: LIST
52597: PPUSH
52598: CALL_OW 69
52602: PUSH
52603: LD_INT 2
52605: GREATER
52606: AND
52607: IFFALSE 52630
// weapon := [ us_radar , ar_radar ] [ nat ] ;
52609: LD_ADDR_VAR 0 18
52613: PUSH
52614: LD_INT 11
52616: PUSH
52617: LD_INT 30
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_VAR 0 12
52628: ARRAY
52629: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
52630: LD_VAR 0 18
52634: NOT
52635: IFFALSE 52655
52637: PUSH
52638: LD_INT 40
52640: PPUSH
52641: LD_VAR 0 16
52645: PPUSH
52646: CALL_OW 321
52650: PUSH
52651: LD_INT 2
52653: EQUAL
52654: AND
52655: IFFALSE 52691
52657: PUSH
52658: LD_INT 7
52660: PUSH
52661: LD_VAR 0 5
52665: IN
52666: IFTRUE 52678
52668: PUSH
52669: LD_INT 28
52671: PUSH
52672: LD_VAR 0 5
52676: IN
52677: OR
52678: IFTRUE 52690
52680: PUSH
52681: LD_INT 45
52683: PUSH
52684: LD_VAR 0 5
52688: IN
52689: OR
52690: AND
52691: IFFALSE 52945
// begin hex := GetHexInfo ( x , y ) ;
52693: LD_ADDR_VAR 0 4
52697: PUSH
52698: LD_VAR 0 10
52702: PPUSH
52703: LD_VAR 0 11
52707: PPUSH
52708: CALL_OW 546
52712: ST_TO_ADDR
// if hex [ 1 ] then
52713: LD_VAR 0 4
52717: PUSH
52718: LD_INT 1
52720: ARRAY
52721: IFFALSE 52725
// exit ;
52723: GO 53132
// height := hex [ 2 ] ;
52725: LD_ADDR_VAR 0 15
52729: PUSH
52730: LD_VAR 0 4
52734: PUSH
52735: LD_INT 2
52737: ARRAY
52738: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52739: LD_ADDR_VAR 0 14
52743: PUSH
52744: LD_INT 0
52746: PUSH
52747: LD_INT 2
52749: PUSH
52750: LD_INT 3
52752: PUSH
52753: LD_INT 5
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: ST_TO_ADDR
// for i in tmp do
52762: LD_ADDR_VAR 0 8
52766: PUSH
52767: LD_VAR 0 14
52771: PUSH
52772: FOR_IN
52773: IFFALSE 52943
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52775: LD_ADDR_VAR 0 9
52779: PUSH
52780: LD_VAR 0 10
52784: PPUSH
52785: LD_VAR 0 8
52789: PPUSH
52790: LD_INT 5
52792: PPUSH
52793: CALL_OW 272
52797: PUSH
52798: LD_VAR 0 11
52802: PPUSH
52803: LD_VAR 0 8
52807: PPUSH
52808: LD_INT 5
52810: PPUSH
52811: CALL_OW 273
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52820: LD_VAR 0 9
52824: PUSH
52825: LD_INT 1
52827: ARRAY
52828: PPUSH
52829: LD_VAR 0 9
52833: PUSH
52834: LD_INT 2
52836: ARRAY
52837: PPUSH
52838: CALL_OW 488
52842: IFFALSE 52941
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52844: LD_ADDR_VAR 0 4
52848: PUSH
52849: LD_VAR 0 9
52853: PUSH
52854: LD_INT 1
52856: ARRAY
52857: PPUSH
52858: LD_VAR 0 9
52862: PUSH
52863: LD_INT 2
52865: ARRAY
52866: PPUSH
52867: CALL_OW 546
52871: ST_TO_ADDR
// if hex [ 1 ] then
52872: LD_VAR 0 4
52876: PUSH
52877: LD_INT 1
52879: ARRAY
52880: IFFALSE 52884
// continue ;
52882: GO 52772
// h := hex [ 2 ] ;
52884: LD_ADDR_VAR 0 13
52888: PUSH
52889: LD_VAR 0 4
52893: PUSH
52894: LD_INT 2
52896: ARRAY
52897: ST_TO_ADDR
// if h + 7 < height then
52898: LD_VAR 0 13
52902: PUSH
52903: LD_INT 7
52905: PLUS
52906: PUSH
52907: LD_VAR 0 15
52911: LESS
52912: IFFALSE 52941
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52914: LD_ADDR_VAR 0 18
52918: PUSH
52919: LD_INT 7
52921: PUSH
52922: LD_INT 28
52924: PUSH
52925: LD_INT 45
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: LIST
52932: PUSH
52933: LD_VAR 0 12
52937: ARRAY
52938: ST_TO_ADDR
// break ;
52939: GO 52943
// end ; end ; end ;
52941: GO 52772
52943: POP
52944: POP
// end ; if not weapon then
52945: LD_VAR 0 18
52949: NOT
52950: IFFALSE 53010
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52952: LD_ADDR_VAR 0 5
52956: PUSH
52957: LD_VAR 0 5
52961: PUSH
52962: LD_INT 11
52964: PUSH
52965: LD_INT 30
52967: PUSH
52968: LD_INT 49
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: LIST
52975: DIFF
52976: ST_TO_ADDR
// if not list then
52977: LD_VAR 0 5
52981: NOT
52982: IFFALSE 52986
// exit ;
52984: GO 53132
// weapon := list [ rand ( 1 , list ) ] ;
52986: LD_ADDR_VAR 0 18
52990: PUSH
52991: LD_VAR 0 5
52995: PUSH
52996: LD_INT 1
52998: PPUSH
52999: LD_VAR 0 5
53003: PPUSH
53004: CALL_OW 12
53008: ARRAY
53009: ST_TO_ADDR
// end ; if weapon then
53010: LD_VAR 0 18
53014: IFFALSE 53132
// begin tmp := CostOfWeapon ( weapon ) ;
53016: LD_ADDR_VAR 0 14
53020: PUSH
53021: LD_VAR 0 18
53025: PPUSH
53026: CALL_OW 451
53030: ST_TO_ADDR
// j := GetBase ( tower ) ;
53031: LD_ADDR_VAR 0 9
53035: PUSH
53036: LD_VAR 0 1
53040: PPUSH
53041: CALL_OW 274
53045: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
53046: LD_VAR 0 9
53050: PPUSH
53051: LD_INT 1
53053: PPUSH
53054: CALL_OW 275
53058: PUSH
53059: LD_VAR 0 14
53063: PUSH
53064: LD_INT 1
53066: ARRAY
53067: GREATEREQUAL
53068: IFFALSE 53094
53070: PUSH
53071: LD_VAR 0 9
53075: PPUSH
53076: LD_INT 2
53078: PPUSH
53079: CALL_OW 275
53083: PUSH
53084: LD_VAR 0 14
53088: PUSH
53089: LD_INT 2
53091: ARRAY
53092: GREATEREQUAL
53093: AND
53094: IFFALSE 53120
53096: PUSH
53097: LD_VAR 0 9
53101: PPUSH
53102: LD_INT 3
53104: PPUSH
53105: CALL_OW 275
53109: PUSH
53110: LD_VAR 0 14
53114: PUSH
53115: LD_INT 3
53117: ARRAY
53118: GREATEREQUAL
53119: AND
53120: IFFALSE 53132
// result := weapon ;
53122: LD_ADDR_VAR 0 3
53126: PUSH
53127: LD_VAR 0 18
53131: ST_TO_ADDR
// end ; end ;
53132: LD_VAR 0 3
53136: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
53137: LD_INT 0
53139: PPUSH
53140: PPUSH
// result := true ;
53141: LD_ADDR_VAR 0 3
53145: PUSH
53146: LD_INT 1
53148: ST_TO_ADDR
// if array1 = array2 then
53149: LD_VAR 0 1
53153: PUSH
53154: LD_VAR 0 2
53158: EQUAL
53159: IFFALSE 53219
// begin for i = 1 to array1 do
53161: LD_ADDR_VAR 0 4
53165: PUSH
53166: DOUBLE
53167: LD_INT 1
53169: DEC
53170: ST_TO_ADDR
53171: LD_VAR 0 1
53175: PUSH
53176: FOR_TO
53177: IFFALSE 53215
// if array1 [ i ] <> array2 [ i ] then
53179: LD_VAR 0 1
53183: PUSH
53184: LD_VAR 0 4
53188: ARRAY
53189: PUSH
53190: LD_VAR 0 2
53194: PUSH
53195: LD_VAR 0 4
53199: ARRAY
53200: NONEQUAL
53201: IFFALSE 53213
// begin result := false ;
53203: LD_ADDR_VAR 0 3
53207: PUSH
53208: LD_INT 0
53210: ST_TO_ADDR
// break ;
53211: GO 53215
// end ;
53213: GO 53176
53215: POP
53216: POP
// end else
53217: GO 53227
// result := false ;
53219: LD_ADDR_VAR 0 3
53223: PUSH
53224: LD_INT 0
53226: ST_TO_ADDR
// end ;
53227: LD_VAR 0 3
53231: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
53232: LD_INT 0
53234: PPUSH
53235: PPUSH
// if not array1 or not array2 then
53236: LD_VAR 0 1
53240: NOT
53241: IFTRUE 53250
53243: PUSH
53244: LD_VAR 0 2
53248: NOT
53249: OR
53250: IFFALSE 53254
// exit ;
53252: GO 53318
// result := true ;
53254: LD_ADDR_VAR 0 3
53258: PUSH
53259: LD_INT 1
53261: ST_TO_ADDR
// for i = 1 to array1 do
53262: LD_ADDR_VAR 0 4
53266: PUSH
53267: DOUBLE
53268: LD_INT 1
53270: DEC
53271: ST_TO_ADDR
53272: LD_VAR 0 1
53276: PUSH
53277: FOR_TO
53278: IFFALSE 53316
// if array1 [ i ] <> array2 [ i ] then
53280: LD_VAR 0 1
53284: PUSH
53285: LD_VAR 0 4
53289: ARRAY
53290: PUSH
53291: LD_VAR 0 2
53295: PUSH
53296: LD_VAR 0 4
53300: ARRAY
53301: NONEQUAL
53302: IFFALSE 53314
// begin result := false ;
53304: LD_ADDR_VAR 0 3
53308: PUSH
53309: LD_INT 0
53311: ST_TO_ADDR
// break ;
53312: GO 53316
// end ;
53314: GO 53277
53316: POP
53317: POP
// end ;
53318: LD_VAR 0 3
53322: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
53323: LD_INT 0
53325: PPUSH
53326: PPUSH
53327: PPUSH
// pom := GetBase ( fac ) ;
53328: LD_ADDR_VAR 0 5
53332: PUSH
53333: LD_VAR 0 1
53337: PPUSH
53338: CALL_OW 274
53342: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
53343: LD_ADDR_VAR 0 4
53347: PUSH
53348: LD_VAR 0 2
53352: PUSH
53353: LD_INT 1
53355: ARRAY
53356: PPUSH
53357: LD_VAR 0 2
53361: PUSH
53362: LD_INT 2
53364: ARRAY
53365: PPUSH
53366: LD_VAR 0 2
53370: PUSH
53371: LD_INT 3
53373: ARRAY
53374: PPUSH
53375: LD_VAR 0 2
53379: PUSH
53380: LD_INT 4
53382: ARRAY
53383: PPUSH
53384: CALL_OW 449
53388: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53389: LD_ADDR_VAR 0 3
53393: PUSH
53394: LD_VAR 0 5
53398: PPUSH
53399: LD_INT 1
53401: PPUSH
53402: CALL_OW 275
53406: PUSH
53407: LD_VAR 0 4
53411: PUSH
53412: LD_INT 1
53414: ARRAY
53415: GREATEREQUAL
53416: IFFALSE 53442
53418: PUSH
53419: LD_VAR 0 5
53423: PPUSH
53424: LD_INT 2
53426: PPUSH
53427: CALL_OW 275
53431: PUSH
53432: LD_VAR 0 4
53436: PUSH
53437: LD_INT 2
53439: ARRAY
53440: GREATEREQUAL
53441: AND
53442: IFFALSE 53468
53444: PUSH
53445: LD_VAR 0 5
53449: PPUSH
53450: LD_INT 3
53452: PPUSH
53453: CALL_OW 275
53457: PUSH
53458: LD_VAR 0 4
53462: PUSH
53463: LD_INT 3
53465: ARRAY
53466: GREATEREQUAL
53467: AND
53468: ST_TO_ADDR
// end ;
53469: LD_VAR 0 3
53473: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
53474: LD_INT 0
53476: PPUSH
53477: PPUSH
53478: PPUSH
53479: PPUSH
// pom := GetBase ( building ) ;
53480: LD_ADDR_VAR 0 3
53484: PUSH
53485: LD_VAR 0 1
53489: PPUSH
53490: CALL_OW 274
53494: ST_TO_ADDR
// if not pom then
53495: LD_VAR 0 3
53499: NOT
53500: IFFALSE 53504
// exit ;
53502: GO 53678
// btype := GetBType ( building ) ;
53504: LD_ADDR_VAR 0 5
53508: PUSH
53509: LD_VAR 0 1
53513: PPUSH
53514: CALL_OW 266
53518: ST_TO_ADDR
// if btype = b_armoury then
53519: LD_VAR 0 5
53523: PUSH
53524: LD_INT 4
53526: EQUAL
53527: IFFALSE 53537
// btype := b_barracks ;
53529: LD_ADDR_VAR 0 5
53533: PUSH
53534: LD_INT 5
53536: ST_TO_ADDR
// if btype = b_depot then
53537: LD_VAR 0 5
53541: PUSH
53542: LD_INT 0
53544: EQUAL
53545: IFFALSE 53555
// btype := b_warehouse ;
53547: LD_ADDR_VAR 0 5
53551: PUSH
53552: LD_INT 1
53554: ST_TO_ADDR
// if btype = b_workshop then
53555: LD_VAR 0 5
53559: PUSH
53560: LD_INT 2
53562: EQUAL
53563: IFFALSE 53573
// btype := b_factory ;
53565: LD_ADDR_VAR 0 5
53569: PUSH
53570: LD_INT 3
53572: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53573: LD_ADDR_VAR 0 4
53577: PUSH
53578: LD_VAR 0 5
53582: PPUSH
53583: LD_VAR 0 1
53587: PPUSH
53588: CALL_OW 248
53592: PPUSH
53593: CALL_OW 450
53597: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53598: LD_ADDR_VAR 0 2
53602: PUSH
53603: LD_VAR 0 3
53607: PPUSH
53608: LD_INT 1
53610: PPUSH
53611: CALL_OW 275
53615: PUSH
53616: LD_VAR 0 4
53620: PUSH
53621: LD_INT 1
53623: ARRAY
53624: GREATEREQUAL
53625: IFFALSE 53651
53627: PUSH
53628: LD_VAR 0 3
53632: PPUSH
53633: LD_INT 2
53635: PPUSH
53636: CALL_OW 275
53640: PUSH
53641: LD_VAR 0 4
53645: PUSH
53646: LD_INT 2
53648: ARRAY
53649: GREATEREQUAL
53650: AND
53651: IFFALSE 53677
53653: PUSH
53654: LD_VAR 0 3
53658: PPUSH
53659: LD_INT 3
53661: PPUSH
53662: CALL_OW 275
53666: PUSH
53667: LD_VAR 0 4
53671: PUSH
53672: LD_INT 3
53674: ARRAY
53675: GREATEREQUAL
53676: AND
53677: ST_TO_ADDR
// end ;
53678: LD_VAR 0 2
53682: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
53683: LD_INT 0
53685: PPUSH
53686: PPUSH
53687: PPUSH
// pom := GetBase ( building ) ;
53688: LD_ADDR_VAR 0 4
53692: PUSH
53693: LD_VAR 0 1
53697: PPUSH
53698: CALL_OW 274
53702: ST_TO_ADDR
// if not pom then
53703: LD_VAR 0 4
53707: NOT
53708: IFFALSE 53712
// exit ;
53710: GO 53817
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53712: LD_ADDR_VAR 0 5
53716: PUSH
53717: LD_VAR 0 2
53721: PPUSH
53722: LD_VAR 0 1
53726: PPUSH
53727: CALL_OW 248
53731: PPUSH
53732: CALL_OW 450
53736: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53737: LD_ADDR_VAR 0 3
53741: PUSH
53742: LD_VAR 0 4
53746: PPUSH
53747: LD_INT 1
53749: PPUSH
53750: CALL_OW 275
53754: PUSH
53755: LD_VAR 0 5
53759: PUSH
53760: LD_INT 1
53762: ARRAY
53763: GREATEREQUAL
53764: IFFALSE 53790
53766: PUSH
53767: LD_VAR 0 4
53771: PPUSH
53772: LD_INT 2
53774: PPUSH
53775: CALL_OW 275
53779: PUSH
53780: LD_VAR 0 5
53784: PUSH
53785: LD_INT 2
53787: ARRAY
53788: GREATEREQUAL
53789: AND
53790: IFFALSE 53816
53792: PUSH
53793: LD_VAR 0 4
53797: PPUSH
53798: LD_INT 3
53800: PPUSH
53801: CALL_OW 275
53805: PUSH
53806: LD_VAR 0 5
53810: PUSH
53811: LD_INT 3
53813: ARRAY
53814: GREATEREQUAL
53815: AND
53816: ST_TO_ADDR
// end ;
53817: LD_VAR 0 3
53821: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53822: LD_INT 0
53824: PPUSH
53825: PPUSH
53826: PPUSH
53827: PPUSH
53828: PPUSH
53829: PPUSH
53830: PPUSH
53831: PPUSH
53832: PPUSH
53833: PPUSH
53834: PPUSH
// result := false ;
53835: LD_ADDR_VAR 0 8
53839: PUSH
53840: LD_INT 0
53842: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53843: LD_VAR 0 5
53847: NOT
53848: IFTRUE 53857
53850: PUSH
53851: LD_VAR 0 1
53855: NOT
53856: OR
53857: IFTRUE 53866
53859: PUSH
53860: LD_VAR 0 2
53864: NOT
53865: OR
53866: IFTRUE 53875
53868: PUSH
53869: LD_VAR 0 3
53873: NOT
53874: OR
53875: IFFALSE 53879
// exit ;
53877: GO 54705
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53879: LD_ADDR_VAR 0 14
53883: PUSH
53884: LD_VAR 0 1
53888: PPUSH
53889: LD_VAR 0 2
53893: PPUSH
53894: LD_VAR 0 3
53898: PPUSH
53899: LD_VAR 0 4
53903: PPUSH
53904: LD_VAR 0 5
53908: PUSH
53909: LD_INT 1
53911: ARRAY
53912: PPUSH
53913: CALL_OW 248
53917: PPUSH
53918: LD_INT 0
53920: PPUSH
53921: CALL 55986 0 6
53925: ST_TO_ADDR
// if not hexes then
53926: LD_VAR 0 14
53930: NOT
53931: IFFALSE 53935
// exit ;
53933: GO 54705
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53935: LD_ADDR_VAR 0 17
53939: PUSH
53940: LD_VAR 0 5
53944: PPUSH
53945: LD_INT 22
53947: PUSH
53948: LD_VAR 0 13
53952: PPUSH
53953: CALL_OW 255
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 2
53964: PUSH
53965: LD_INT 30
53967: PUSH
53968: LD_INT 0
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 30
53977: PUSH
53978: LD_INT 1
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: LIST
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PPUSH
53994: CALL_OW 72
53998: ST_TO_ADDR
// for i = 1 to hexes do
53999: LD_ADDR_VAR 0 9
54003: PUSH
54004: DOUBLE
54005: LD_INT 1
54007: DEC
54008: ST_TO_ADDR
54009: LD_VAR 0 14
54013: PUSH
54014: FOR_TO
54015: IFFALSE 54703
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54017: LD_ADDR_VAR 0 13
54021: PUSH
54022: LD_VAR 0 14
54026: PUSH
54027: LD_VAR 0 9
54031: ARRAY
54032: PUSH
54033: LD_INT 1
54035: ARRAY
54036: PPUSH
54037: LD_VAR 0 14
54041: PUSH
54042: LD_VAR 0 9
54046: ARRAY
54047: PUSH
54048: LD_INT 2
54050: ARRAY
54051: PPUSH
54052: CALL_OW 428
54056: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
54057: LD_VAR 0 14
54061: PUSH
54062: LD_VAR 0 9
54066: ARRAY
54067: PUSH
54068: LD_INT 1
54070: ARRAY
54071: PPUSH
54072: LD_VAR 0 14
54076: PUSH
54077: LD_VAR 0 9
54081: ARRAY
54082: PUSH
54083: LD_INT 2
54085: ARRAY
54086: PPUSH
54087: CALL_OW 351
54091: IFTRUE 54130
54093: PUSH
54094: LD_VAR 0 14
54098: PUSH
54099: LD_VAR 0 9
54103: ARRAY
54104: PUSH
54105: LD_INT 1
54107: ARRAY
54108: PPUSH
54109: LD_VAR 0 14
54113: PUSH
54114: LD_VAR 0 9
54118: ARRAY
54119: PUSH
54120: LD_INT 2
54122: ARRAY
54123: PPUSH
54124: CALL_OW 488
54128: NOT
54129: OR
54130: IFTRUE 54147
54132: PUSH
54133: LD_VAR 0 13
54137: PPUSH
54138: CALL_OW 247
54142: PUSH
54143: LD_INT 3
54145: EQUAL
54146: OR
54147: IFFALSE 54153
// exit ;
54149: POP
54150: POP
54151: GO 54705
// if not tmp then
54153: LD_VAR 0 13
54157: NOT
54158: IFFALSE 54162
// continue ;
54160: GO 54014
// result := true ;
54162: LD_ADDR_VAR 0 8
54166: PUSH
54167: LD_INT 1
54169: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
54170: LD_VAR 0 6
54174: IFFALSE 54191
54176: PUSH
54177: LD_VAR 0 13
54181: PPUSH
54182: CALL_OW 247
54186: PUSH
54187: LD_INT 2
54189: EQUAL
54190: AND
54191: IFFALSE 54208
54193: PUSH
54194: LD_VAR 0 13
54198: PPUSH
54199: CALL_OW 263
54203: PUSH
54204: LD_INT 1
54206: EQUAL
54207: AND
54208: IFFALSE 54372
// begin if IsDrivenBy ( tmp ) then
54210: LD_VAR 0 13
54214: PPUSH
54215: CALL_OW 311
54219: IFFALSE 54223
// continue ;
54221: GO 54014
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
54223: LD_VAR 0 6
54227: PPUSH
54228: LD_INT 3
54230: PUSH
54231: LD_INT 60
54233: PUSH
54234: EMPTY
54235: LIST
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 3
54243: PUSH
54244: LD_INT 55
54246: PUSH
54247: EMPTY
54248: LIST
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PPUSH
54258: CALL_OW 72
54262: IFFALSE 54370
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
54264: LD_ADDR_VAR 0 18
54268: PUSH
54269: LD_VAR 0 6
54273: PPUSH
54274: LD_INT 3
54276: PUSH
54277: LD_INT 60
54279: PUSH
54280: EMPTY
54281: LIST
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 3
54289: PUSH
54290: LD_INT 55
54292: PUSH
54293: EMPTY
54294: LIST
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PPUSH
54304: CALL_OW 72
54308: PUSH
54309: LD_INT 1
54311: ARRAY
54312: ST_TO_ADDR
// if IsInUnit ( driver ) then
54313: LD_VAR 0 18
54317: PPUSH
54318: CALL_OW 310
54322: IFFALSE 54333
// ComExit ( driver ) ;
54324: LD_VAR 0 18
54328: PPUSH
54329: CALL 79976 0 1
// AddComEnterUnit ( driver , tmp ) ;
54333: LD_VAR 0 18
54337: PPUSH
54338: LD_VAR 0 13
54342: PPUSH
54343: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
54347: LD_VAR 0 18
54351: PPUSH
54352: LD_VAR 0 7
54356: PPUSH
54357: CALL_OW 173
// AddComExitVehicle ( driver ) ;
54361: LD_VAR 0 18
54365: PPUSH
54366: CALL_OW 181
// end ; continue ;
54370: GO 54014
// end ; if not cleaners or not tmp in cleaners then
54372: LD_VAR 0 6
54376: NOT
54377: IFTRUE 54392
54379: PUSH
54380: LD_VAR 0 13
54384: PUSH
54385: LD_VAR 0 6
54389: IN
54390: NOT
54391: OR
54392: IFFALSE 54701
// begin if dep then
54394: LD_VAR 0 17
54398: IFFALSE 54534
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
54400: LD_ADDR_VAR 0 16
54404: PUSH
54405: LD_VAR 0 17
54409: PUSH
54410: LD_INT 1
54412: ARRAY
54413: PPUSH
54414: CALL_OW 250
54418: PPUSH
54419: LD_VAR 0 17
54423: PUSH
54424: LD_INT 1
54426: ARRAY
54427: PPUSH
54428: CALL_OW 254
54432: PPUSH
54433: LD_INT 5
54435: PPUSH
54436: CALL_OW 272
54440: PUSH
54441: LD_VAR 0 17
54445: PUSH
54446: LD_INT 1
54448: ARRAY
54449: PPUSH
54450: CALL_OW 251
54454: PPUSH
54455: LD_VAR 0 17
54459: PUSH
54460: LD_INT 1
54462: ARRAY
54463: PPUSH
54464: CALL_OW 254
54468: PPUSH
54469: LD_INT 5
54471: PPUSH
54472: CALL_OW 273
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
54481: LD_VAR 0 16
54485: PUSH
54486: LD_INT 1
54488: ARRAY
54489: PPUSH
54490: LD_VAR 0 16
54494: PUSH
54495: LD_INT 2
54497: ARRAY
54498: PPUSH
54499: CALL_OW 488
54503: IFFALSE 54534
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
54505: LD_VAR 0 13
54509: PPUSH
54510: LD_VAR 0 16
54514: PUSH
54515: LD_INT 1
54517: ARRAY
54518: PPUSH
54519: LD_VAR 0 16
54523: PUSH
54524: LD_INT 2
54526: ARRAY
54527: PPUSH
54528: CALL_OW 111
// continue ;
54532: GO 54014
// end ; end ; r := GetDir ( tmp ) ;
54534: LD_ADDR_VAR 0 15
54538: PUSH
54539: LD_VAR 0 13
54543: PPUSH
54544: CALL_OW 254
54548: ST_TO_ADDR
// if r = 5 then
54549: LD_VAR 0 15
54553: PUSH
54554: LD_INT 5
54556: EQUAL
54557: IFFALSE 54567
// r := 0 ;
54559: LD_ADDR_VAR 0 15
54563: PUSH
54564: LD_INT 0
54566: ST_TO_ADDR
// for j = r to 5 do
54567: LD_ADDR_VAR 0 10
54571: PUSH
54572: DOUBLE
54573: LD_VAR 0 15
54577: DEC
54578: ST_TO_ADDR
54579: LD_INT 5
54581: PUSH
54582: FOR_TO
54583: IFFALSE 54699
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
54585: LD_ADDR_VAR 0 11
54589: PUSH
54590: LD_VAR 0 13
54594: PPUSH
54595: CALL_OW 250
54599: PPUSH
54600: LD_VAR 0 10
54604: PPUSH
54605: LD_INT 2
54607: PPUSH
54608: CALL_OW 272
54612: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
54613: LD_ADDR_VAR 0 12
54617: PUSH
54618: LD_VAR 0 13
54622: PPUSH
54623: CALL_OW 251
54627: PPUSH
54628: LD_VAR 0 10
54632: PPUSH
54633: LD_INT 2
54635: PPUSH
54636: CALL_OW 273
54640: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
54641: LD_VAR 0 11
54645: PPUSH
54646: LD_VAR 0 12
54650: PPUSH
54651: CALL_OW 488
54655: IFFALSE 54674
54657: PUSH
54658: LD_VAR 0 11
54662: PPUSH
54663: LD_VAR 0 12
54667: PPUSH
54668: CALL_OW 428
54672: NOT
54673: AND
54674: IFFALSE 54697
// begin ComMoveXY ( tmp , _x , _y ) ;
54676: LD_VAR 0 13
54680: PPUSH
54681: LD_VAR 0 11
54685: PPUSH
54686: LD_VAR 0 12
54690: PPUSH
54691: CALL_OW 111
// break ;
54695: GO 54699
// end ; end ;
54697: GO 54582
54699: POP
54700: POP
// end ; end ;
54701: GO 54014
54703: POP
54704: POP
// end ;
54705: LD_VAR 0 8
54709: RET
// export function BuildingTechInvented ( side , btype ) ; begin
54710: LD_INT 0
54712: PPUSH
// result := true ;
54713: LD_ADDR_VAR 0 3
54717: PUSH
54718: LD_INT 1
54720: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
54721: LD_VAR 0 2
54725: PUSH
54726: LD_INT 24
54728: DOUBLE
54729: EQUAL
54730: IFTRUE 54740
54732: LD_INT 33
54734: DOUBLE
54735: EQUAL
54736: IFTRUE 54740
54738: GO 54765
54740: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
54741: LD_ADDR_VAR 0 3
54745: PUSH
54746: LD_INT 32
54748: PPUSH
54749: LD_VAR 0 1
54753: PPUSH
54754: CALL_OW 321
54758: PUSH
54759: LD_INT 2
54761: EQUAL
54762: ST_TO_ADDR
54763: GO 55081
54765: LD_INT 20
54767: DOUBLE
54768: EQUAL
54769: IFTRUE 54773
54771: GO 54798
54773: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
54774: LD_ADDR_VAR 0 3
54778: PUSH
54779: LD_INT 6
54781: PPUSH
54782: LD_VAR 0 1
54786: PPUSH
54787: CALL_OW 321
54791: PUSH
54792: LD_INT 2
54794: EQUAL
54795: ST_TO_ADDR
54796: GO 55081
54798: LD_INT 22
54800: DOUBLE
54801: EQUAL
54802: IFTRUE 54812
54804: LD_INT 36
54806: DOUBLE
54807: EQUAL
54808: IFTRUE 54812
54810: GO 54837
54812: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
54813: LD_ADDR_VAR 0 3
54817: PUSH
54818: LD_INT 15
54820: PPUSH
54821: LD_VAR 0 1
54825: PPUSH
54826: CALL_OW 321
54830: PUSH
54831: LD_INT 2
54833: EQUAL
54834: ST_TO_ADDR
54835: GO 55081
54837: LD_INT 30
54839: DOUBLE
54840: EQUAL
54841: IFTRUE 54845
54843: GO 54870
54845: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54846: LD_ADDR_VAR 0 3
54850: PUSH
54851: LD_INT 20
54853: PPUSH
54854: LD_VAR 0 1
54858: PPUSH
54859: CALL_OW 321
54863: PUSH
54864: LD_INT 2
54866: EQUAL
54867: ST_TO_ADDR
54868: GO 55081
54870: LD_INT 28
54872: DOUBLE
54873: EQUAL
54874: IFTRUE 54884
54876: LD_INT 21
54878: DOUBLE
54879: EQUAL
54880: IFTRUE 54884
54882: GO 54909
54884: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54885: LD_ADDR_VAR 0 3
54889: PUSH
54890: LD_INT 21
54892: PPUSH
54893: LD_VAR 0 1
54897: PPUSH
54898: CALL_OW 321
54902: PUSH
54903: LD_INT 2
54905: EQUAL
54906: ST_TO_ADDR
54907: GO 55081
54909: LD_INT 16
54911: DOUBLE
54912: EQUAL
54913: IFTRUE 54917
54915: GO 54942
54917: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54918: LD_ADDR_VAR 0 3
54922: PUSH
54923: LD_INT 84
54925: PPUSH
54926: LD_VAR 0 1
54930: PPUSH
54931: CALL_OW 321
54935: PUSH
54936: LD_INT 2
54938: EQUAL
54939: ST_TO_ADDR
54940: GO 55081
54942: LD_INT 19
54944: DOUBLE
54945: EQUAL
54946: IFTRUE 54956
54948: LD_INT 23
54950: DOUBLE
54951: EQUAL
54952: IFTRUE 54956
54954: GO 54981
54956: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54957: LD_ADDR_VAR 0 3
54961: PUSH
54962: LD_INT 83
54964: PPUSH
54965: LD_VAR 0 1
54969: PPUSH
54970: CALL_OW 321
54974: PUSH
54975: LD_INT 2
54977: EQUAL
54978: ST_TO_ADDR
54979: GO 55081
54981: LD_INT 17
54983: DOUBLE
54984: EQUAL
54985: IFTRUE 54989
54987: GO 55014
54989: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54990: LD_ADDR_VAR 0 3
54994: PUSH
54995: LD_INT 39
54997: PPUSH
54998: LD_VAR 0 1
55002: PPUSH
55003: CALL_OW 321
55007: PUSH
55008: LD_INT 2
55010: EQUAL
55011: ST_TO_ADDR
55012: GO 55081
55014: LD_INT 18
55016: DOUBLE
55017: EQUAL
55018: IFTRUE 55022
55020: GO 55047
55022: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
55023: LD_ADDR_VAR 0 3
55027: PUSH
55028: LD_INT 40
55030: PPUSH
55031: LD_VAR 0 1
55035: PPUSH
55036: CALL_OW 321
55040: PUSH
55041: LD_INT 2
55043: EQUAL
55044: ST_TO_ADDR
55045: GO 55081
55047: LD_INT 27
55049: DOUBLE
55050: EQUAL
55051: IFTRUE 55055
55053: GO 55080
55055: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
55056: LD_ADDR_VAR 0 3
55060: PUSH
55061: LD_INT 35
55063: PPUSH
55064: LD_VAR 0 1
55068: PPUSH
55069: CALL_OW 321
55073: PUSH
55074: LD_INT 2
55076: EQUAL
55077: ST_TO_ADDR
55078: GO 55081
55080: POP
// end ;
55081: LD_VAR 0 3
55085: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
55086: LD_INT 0
55088: PPUSH
55089: PPUSH
55090: PPUSH
55091: PPUSH
55092: PPUSH
55093: PPUSH
55094: PPUSH
55095: PPUSH
55096: PPUSH
55097: PPUSH
55098: PPUSH
// result := false ;
55099: LD_ADDR_VAR 0 6
55103: PUSH
55104: LD_INT 0
55106: ST_TO_ADDR
// if btype = b_depot then
55107: LD_VAR 0 2
55111: PUSH
55112: LD_INT 0
55114: EQUAL
55115: IFFALSE 55127
// begin result := true ;
55117: LD_ADDR_VAR 0 6
55121: PUSH
55122: LD_INT 1
55124: ST_TO_ADDR
// exit ;
55125: GO 55981
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
55127: LD_VAR 0 1
55131: NOT
55132: IFTRUE 55157
55134: PUSH
55135: LD_VAR 0 1
55139: PPUSH
55140: CALL_OW 266
55144: PUSH
55145: LD_INT 0
55147: PUSH
55148: LD_INT 1
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: IN
55155: NOT
55156: OR
55157: IFTRUE 55166
55159: PUSH
55160: LD_VAR 0 2
55164: NOT
55165: OR
55166: IFTRUE 55202
55168: PUSH
55169: LD_VAR 0 5
55173: PUSH
55174: LD_INT 0
55176: PUSH
55177: LD_INT 1
55179: PUSH
55180: LD_INT 2
55182: PUSH
55183: LD_INT 3
55185: PUSH
55186: LD_INT 4
55188: PUSH
55189: LD_INT 5
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: IN
55200: NOT
55201: OR
55202: IFTRUE 55221
55204: PUSH
55205: LD_VAR 0 3
55209: PPUSH
55210: LD_VAR 0 4
55214: PPUSH
55215: CALL_OW 488
55219: NOT
55220: OR
55221: IFFALSE 55225
// exit ;
55223: GO 55981
// side := GetSide ( depot ) ;
55225: LD_ADDR_VAR 0 9
55229: PUSH
55230: LD_VAR 0 1
55234: PPUSH
55235: CALL_OW 255
55239: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
55240: LD_VAR 0 9
55244: PPUSH
55245: LD_VAR 0 2
55249: PPUSH
55250: CALL 54710 0 2
55254: NOT
55255: IFFALSE 55259
// exit ;
55257: GO 55981
// pom := GetBase ( depot ) ;
55259: LD_ADDR_VAR 0 10
55263: PUSH
55264: LD_VAR 0 1
55268: PPUSH
55269: CALL_OW 274
55273: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
55274: LD_ADDR_VAR 0 11
55278: PUSH
55279: LD_VAR 0 2
55283: PPUSH
55284: LD_VAR 0 1
55288: PPUSH
55289: CALL_OW 248
55293: PPUSH
55294: CALL_OW 450
55298: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
55299: LD_VAR 0 10
55303: PPUSH
55304: LD_INT 1
55306: PPUSH
55307: CALL_OW 275
55311: PUSH
55312: LD_VAR 0 11
55316: PUSH
55317: LD_INT 1
55319: ARRAY
55320: GREATEREQUAL
55321: IFFALSE 55347
55323: PUSH
55324: LD_VAR 0 10
55328: PPUSH
55329: LD_INT 2
55331: PPUSH
55332: CALL_OW 275
55336: PUSH
55337: LD_VAR 0 11
55341: PUSH
55342: LD_INT 2
55344: ARRAY
55345: GREATEREQUAL
55346: AND
55347: IFFALSE 55373
55349: PUSH
55350: LD_VAR 0 10
55354: PPUSH
55355: LD_INT 3
55357: PPUSH
55358: CALL_OW 275
55362: PUSH
55363: LD_VAR 0 11
55367: PUSH
55368: LD_INT 3
55370: ARRAY
55371: GREATEREQUAL
55372: AND
55373: NOT
55374: IFFALSE 55378
// exit ;
55376: GO 55981
// if GetBType ( depot ) = b_depot then
55378: LD_VAR 0 1
55382: PPUSH
55383: CALL_OW 266
55387: PUSH
55388: LD_INT 0
55390: EQUAL
55391: IFFALSE 55403
// dist := 28 else
55393: LD_ADDR_VAR 0 14
55397: PUSH
55398: LD_INT 28
55400: ST_TO_ADDR
55401: GO 55411
// dist := 36 ;
55403: LD_ADDR_VAR 0 14
55407: PUSH
55408: LD_INT 36
55410: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
55411: LD_VAR 0 1
55415: PPUSH
55416: LD_VAR 0 3
55420: PPUSH
55421: LD_VAR 0 4
55425: PPUSH
55426: CALL_OW 297
55430: PUSH
55431: LD_VAR 0 14
55435: GREATER
55436: IFFALSE 55440
// exit ;
55438: GO 55981
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
55440: LD_ADDR_VAR 0 12
55444: PUSH
55445: LD_VAR 0 2
55449: PPUSH
55450: LD_VAR 0 3
55454: PPUSH
55455: LD_VAR 0 4
55459: PPUSH
55460: LD_VAR 0 5
55464: PPUSH
55465: LD_VAR 0 1
55469: PPUSH
55470: CALL_OW 248
55474: PPUSH
55475: LD_INT 0
55477: PPUSH
55478: CALL 55986 0 6
55482: ST_TO_ADDR
// if not hexes then
55483: LD_VAR 0 12
55487: NOT
55488: IFFALSE 55492
// exit ;
55490: GO 55981
// hex := GetHexInfo ( x , y ) ;
55492: LD_ADDR_VAR 0 15
55496: PUSH
55497: LD_VAR 0 3
55501: PPUSH
55502: LD_VAR 0 4
55506: PPUSH
55507: CALL_OW 546
55511: ST_TO_ADDR
// if hex [ 1 ] then
55512: LD_VAR 0 15
55516: PUSH
55517: LD_INT 1
55519: ARRAY
55520: IFFALSE 55524
// exit ;
55522: GO 55981
// height := hex [ 2 ] ;
55524: LD_ADDR_VAR 0 13
55528: PUSH
55529: LD_VAR 0 15
55533: PUSH
55534: LD_INT 2
55536: ARRAY
55537: ST_TO_ADDR
// for i = 1 to hexes do
55538: LD_ADDR_VAR 0 7
55542: PUSH
55543: DOUBLE
55544: LD_INT 1
55546: DEC
55547: ST_TO_ADDR
55548: LD_VAR 0 12
55552: PUSH
55553: FOR_TO
55554: IFFALSE 55898
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
55556: LD_VAR 0 12
55560: PUSH
55561: LD_VAR 0 7
55565: ARRAY
55566: PUSH
55567: LD_INT 1
55569: ARRAY
55570: PPUSH
55571: LD_VAR 0 12
55575: PUSH
55576: LD_VAR 0 7
55580: ARRAY
55581: PUSH
55582: LD_INT 2
55584: ARRAY
55585: PPUSH
55586: CALL_OW 488
55590: NOT
55591: IFTRUE 55633
55593: PUSH
55594: LD_VAR 0 12
55598: PUSH
55599: LD_VAR 0 7
55603: ARRAY
55604: PUSH
55605: LD_INT 1
55607: ARRAY
55608: PPUSH
55609: LD_VAR 0 12
55613: PUSH
55614: LD_VAR 0 7
55618: ARRAY
55619: PUSH
55620: LD_INT 2
55622: ARRAY
55623: PPUSH
55624: CALL_OW 428
55628: PUSH
55629: LD_INT 0
55631: GREATER
55632: OR
55633: IFTRUE 55671
55635: PUSH
55636: LD_VAR 0 12
55640: PUSH
55641: LD_VAR 0 7
55645: ARRAY
55646: PUSH
55647: LD_INT 1
55649: ARRAY
55650: PPUSH
55651: LD_VAR 0 12
55655: PUSH
55656: LD_VAR 0 7
55660: ARRAY
55661: PUSH
55662: LD_INT 2
55664: ARRAY
55665: PPUSH
55666: CALL_OW 351
55670: OR
55671: IFFALSE 55677
// exit ;
55673: POP
55674: POP
55675: GO 55981
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55677: LD_ADDR_VAR 0 8
55681: PUSH
55682: LD_VAR 0 12
55686: PUSH
55687: LD_VAR 0 7
55691: ARRAY
55692: PUSH
55693: LD_INT 1
55695: ARRAY
55696: PPUSH
55697: LD_VAR 0 12
55701: PUSH
55702: LD_VAR 0 7
55706: ARRAY
55707: PUSH
55708: LD_INT 2
55710: ARRAY
55711: PPUSH
55712: CALL_OW 546
55716: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
55717: LD_VAR 0 8
55721: PUSH
55722: LD_INT 1
55724: ARRAY
55725: IFTRUE 55747
55727: PUSH
55728: LD_VAR 0 8
55732: PUSH
55733: LD_INT 2
55735: ARRAY
55736: PUSH
55737: LD_VAR 0 13
55741: PUSH
55742: LD_INT 2
55744: PLUS
55745: GREATER
55746: OR
55747: IFTRUE 55769
55749: PUSH
55750: LD_VAR 0 8
55754: PUSH
55755: LD_INT 2
55757: ARRAY
55758: PUSH
55759: LD_VAR 0 13
55763: PUSH
55764: LD_INT 2
55766: MINUS
55767: LESS
55768: OR
55769: IFTRUE 55837
55771: PUSH
55772: LD_VAR 0 8
55776: PUSH
55777: LD_INT 3
55779: ARRAY
55780: PUSH
55781: LD_INT 0
55783: PUSH
55784: LD_INT 8
55786: PUSH
55787: LD_INT 9
55789: PUSH
55790: LD_INT 10
55792: PUSH
55793: LD_INT 11
55795: PUSH
55796: LD_INT 12
55798: PUSH
55799: LD_INT 13
55801: PUSH
55802: LD_INT 16
55804: PUSH
55805: LD_INT 17
55807: PUSH
55808: LD_INT 18
55810: PUSH
55811: LD_INT 19
55813: PUSH
55814: LD_INT 20
55816: PUSH
55817: LD_INT 21
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: IN
55835: NOT
55836: OR
55837: IFTRUE 55850
55839: PUSH
55840: LD_VAR 0 8
55844: PUSH
55845: LD_INT 5
55847: ARRAY
55848: NOT
55849: OR
55850: IFTRUE 55890
55852: PUSH
55853: LD_VAR 0 8
55857: PUSH
55858: LD_INT 6
55860: ARRAY
55861: PUSH
55862: LD_INT 1
55864: PUSH
55865: LD_INT 2
55867: PUSH
55868: LD_INT 7
55870: PUSH
55871: LD_INT 9
55873: PUSH
55874: LD_INT 10
55876: PUSH
55877: LD_INT 11
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: IN
55888: NOT
55889: OR
55890: IFFALSE 55896
// exit ;
55892: POP
55893: POP
55894: GO 55981
// end ;
55896: GO 55553
55898: POP
55899: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55900: LD_VAR 0 9
55904: PPUSH
55905: LD_VAR 0 3
55909: PPUSH
55910: LD_VAR 0 4
55914: PPUSH
55915: LD_INT 20
55917: PPUSH
55918: CALL 47800 0 4
55922: PUSH
55923: LD_INT 4
55925: ARRAY
55926: IFFALSE 55930
// exit ;
55928: GO 55981
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55930: LD_VAR 0 2
55934: PUSH
55935: LD_INT 29
55937: PUSH
55938: LD_INT 30
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: IN
55945: IFFALSE 55969
55947: PUSH
55948: LD_VAR 0 3
55952: PPUSH
55953: LD_VAR 0 4
55957: PPUSH
55958: LD_VAR 0 9
55962: PPUSH
55963: CALL_OW 440
55967: NOT
55968: AND
55969: IFFALSE 55973
// exit ;
55971: GO 55981
// result := true ;
55973: LD_ADDR_VAR 0 6
55977: PUSH
55978: LD_INT 1
55980: ST_TO_ADDR
// end ;
55981: LD_VAR 0 6
55985: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55986: LD_INT 0
55988: PPUSH
55989: PPUSH
55990: PPUSH
55991: PPUSH
55992: PPUSH
55993: PPUSH
55994: PPUSH
55995: PPUSH
55996: PPUSH
55997: PPUSH
55998: PPUSH
55999: PPUSH
56000: PPUSH
56001: PPUSH
56002: PPUSH
56003: PPUSH
56004: PPUSH
56005: PPUSH
56006: PPUSH
56007: PPUSH
56008: PPUSH
56009: PPUSH
56010: PPUSH
56011: PPUSH
56012: PPUSH
56013: PPUSH
56014: PPUSH
56015: PPUSH
56016: PPUSH
56017: PPUSH
56018: PPUSH
56019: PPUSH
56020: PPUSH
56021: PPUSH
56022: PPUSH
56023: PPUSH
56024: PPUSH
56025: PPUSH
56026: PPUSH
56027: PPUSH
56028: PPUSH
56029: PPUSH
56030: PPUSH
56031: PPUSH
56032: PPUSH
56033: PPUSH
56034: PPUSH
56035: PPUSH
56036: PPUSH
56037: PPUSH
56038: PPUSH
56039: PPUSH
56040: PPUSH
56041: PPUSH
56042: PPUSH
56043: PPUSH
56044: PPUSH
56045: PPUSH
// result = [ ] ;
56046: LD_ADDR_VAR 0 7
56050: PUSH
56051: EMPTY
56052: ST_TO_ADDR
// temp_list = [ ] ;
56053: LD_ADDR_VAR 0 9
56057: PUSH
56058: EMPTY
56059: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
56060: LD_VAR 0 4
56064: PUSH
56065: LD_INT 0
56067: PUSH
56068: LD_INT 1
56070: PUSH
56071: LD_INT 2
56073: PUSH
56074: LD_INT 3
56076: PUSH
56077: LD_INT 4
56079: PUSH
56080: LD_INT 5
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: IN
56091: NOT
56092: IFTRUE 56135
56094: PUSH
56095: LD_VAR 0 1
56099: PUSH
56100: LD_INT 0
56102: PUSH
56103: LD_INT 1
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: IN
56110: IFFALSE 56134
56112: PUSH
56113: LD_VAR 0 5
56117: PUSH
56118: LD_INT 1
56120: PUSH
56121: LD_INT 2
56123: PUSH
56124: LD_INT 3
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: LIST
56131: IN
56132: NOT
56133: AND
56134: OR
56135: IFFALSE 56139
// exit ;
56137: GO 74538
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
56139: LD_VAR 0 1
56143: PUSH
56144: LD_INT 6
56146: PUSH
56147: LD_INT 7
56149: PUSH
56150: LD_INT 8
56152: PUSH
56153: LD_INT 13
56155: PUSH
56156: LD_INT 12
56158: PUSH
56159: LD_INT 15
56161: PUSH
56162: LD_INT 11
56164: PUSH
56165: LD_INT 14
56167: PUSH
56168: LD_INT 10
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: IN
56182: IFFALSE 56192
// btype = b_lab ;
56184: LD_ADDR_VAR 0 1
56188: PUSH
56189: LD_INT 6
56191: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
56192: LD_VAR 0 6
56196: PUSH
56197: LD_INT 0
56199: PUSH
56200: LD_INT 1
56202: PUSH
56203: LD_INT 2
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: LIST
56210: IN
56211: NOT
56212: IFTRUE 56280
56214: PUSH
56215: LD_VAR 0 1
56219: PUSH
56220: LD_INT 0
56222: PUSH
56223: LD_INT 1
56225: PUSH
56226: LD_INT 2
56228: PUSH
56229: LD_INT 3
56231: PUSH
56232: LD_INT 6
56234: PUSH
56235: LD_INT 36
56237: PUSH
56238: LD_INT 4
56240: PUSH
56241: LD_INT 5
56243: PUSH
56244: LD_INT 31
56246: PUSH
56247: LD_INT 32
56249: PUSH
56250: LD_INT 33
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: IN
56266: NOT
56267: IFFALSE 56279
56269: PUSH
56270: LD_VAR 0 6
56274: PUSH
56275: LD_INT 1
56277: EQUAL
56278: AND
56279: OR
56280: IFTRUE 56312
56282: PUSH
56283: LD_VAR 0 1
56287: PUSH
56288: LD_INT 2
56290: PUSH
56291: LD_INT 3
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: IN
56298: NOT
56299: IFFALSE 56311
56301: PUSH
56302: LD_VAR 0 6
56306: PUSH
56307: LD_INT 2
56309: EQUAL
56310: AND
56311: OR
56312: IFFALSE 56322
// mode = 0 ;
56314: LD_ADDR_VAR 0 6
56318: PUSH
56319: LD_INT 0
56321: ST_TO_ADDR
// case mode of 0 :
56322: LD_VAR 0 6
56326: PUSH
56327: LD_INT 0
56329: DOUBLE
56330: EQUAL
56331: IFTRUE 56335
56333: GO 67788
56335: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56336: LD_ADDR_VAR 0 11
56340: PUSH
56341: LD_INT 0
56343: PUSH
56344: LD_INT 0
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 0
56353: PUSH
56354: LD_INT 1
56356: NEG
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 1
56364: PUSH
56365: LD_INT 0
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 1
56374: PUSH
56375: LD_INT 1
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 0
56384: PUSH
56385: LD_INT 1
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 1
56394: NEG
56395: PUSH
56396: LD_INT 0
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 1
56405: NEG
56406: PUSH
56407: LD_INT 1
56409: NEG
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 1
56417: NEG
56418: PUSH
56419: LD_INT 2
56421: NEG
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 0
56429: PUSH
56430: LD_INT 2
56432: NEG
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 1
56440: PUSH
56441: LD_INT 1
56443: NEG
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 1
56451: PUSH
56452: LD_INT 2
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 0
56461: PUSH
56462: LD_INT 2
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 1
56471: NEG
56472: PUSH
56473: LD_INT 1
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 1
56482: PUSH
56483: LD_INT 3
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 0
56492: PUSH
56493: LD_INT 3
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 1
56502: NEG
56503: PUSH
56504: LD_INT 2
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56529: LD_ADDR_VAR 0 12
56533: PUSH
56534: LD_INT 0
56536: PUSH
56537: LD_INT 0
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 0
56546: PUSH
56547: LD_INT 1
56549: NEG
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 1
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 1
56567: PUSH
56568: LD_INT 1
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 0
56577: PUSH
56578: LD_INT 1
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 1
56587: NEG
56588: PUSH
56589: LD_INT 0
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 1
56598: NEG
56599: PUSH
56600: LD_INT 1
56602: NEG
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 1
56610: PUSH
56611: LD_INT 1
56613: NEG
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 2
56621: PUSH
56622: LD_INT 0
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 2
56631: PUSH
56632: LD_INT 1
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 1
56641: NEG
56642: PUSH
56643: LD_INT 1
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 2
56652: NEG
56653: PUSH
56654: LD_INT 0
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 2
56663: NEG
56664: PUSH
56665: LD_INT 1
56667: NEG
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 2
56675: NEG
56676: PUSH
56677: LD_INT 1
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 3
56686: NEG
56687: PUSH
56688: LD_INT 0
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 3
56697: NEG
56698: PUSH
56699: LD_INT 1
56701: NEG
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56725: LD_ADDR_VAR 0 13
56729: PUSH
56730: LD_INT 0
56732: PUSH
56733: LD_INT 0
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 0
56742: PUSH
56743: LD_INT 1
56745: NEG
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 1
56753: PUSH
56754: LD_INT 0
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 1
56763: PUSH
56764: LD_INT 1
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 0
56773: PUSH
56774: LD_INT 1
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 1
56783: NEG
56784: PUSH
56785: LD_INT 0
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 1
56794: NEG
56795: PUSH
56796: LD_INT 1
56798: NEG
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 1
56806: NEG
56807: PUSH
56808: LD_INT 2
56810: NEG
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 2
56818: PUSH
56819: LD_INT 1
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 2
56828: PUSH
56829: LD_INT 2
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 1
56838: PUSH
56839: LD_INT 2
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 2
56848: NEG
56849: PUSH
56850: LD_INT 1
56852: NEG
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 2
56860: NEG
56861: PUSH
56862: LD_INT 2
56864: NEG
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 2
56872: NEG
56873: PUSH
56874: LD_INT 3
56876: NEG
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 3
56884: NEG
56885: PUSH
56886: LD_INT 2
56888: NEG
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 3
56896: NEG
56897: PUSH
56898: LD_INT 3
56900: NEG
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56924: LD_ADDR_VAR 0 14
56928: PUSH
56929: LD_INT 0
56931: PUSH
56932: LD_INT 0
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 0
56941: PUSH
56942: LD_INT 1
56944: NEG
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 1
56952: PUSH
56953: LD_INT 0
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 1
56962: PUSH
56963: LD_INT 1
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 0
56972: PUSH
56973: LD_INT 1
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 1
56982: NEG
56983: PUSH
56984: LD_INT 0
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 1
56993: NEG
56994: PUSH
56995: LD_INT 1
56997: NEG
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 1
57005: NEG
57006: PUSH
57007: LD_INT 2
57009: NEG
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 0
57017: PUSH
57018: LD_INT 2
57020: NEG
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 1
57028: PUSH
57029: LD_INT 1
57031: NEG
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 1
57039: PUSH
57040: LD_INT 2
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 0
57049: PUSH
57050: LD_INT 2
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 1
57059: NEG
57060: PUSH
57061: LD_INT 1
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 1
57070: NEG
57071: PUSH
57072: LD_INT 3
57074: NEG
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 0
57082: PUSH
57083: LD_INT 3
57085: NEG
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 1
57093: PUSH
57094: LD_INT 2
57096: NEG
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57120: LD_ADDR_VAR 0 15
57124: PUSH
57125: LD_INT 0
57127: PUSH
57128: LD_INT 0
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 0
57137: PUSH
57138: LD_INT 1
57140: NEG
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 1
57148: PUSH
57149: LD_INT 0
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 1
57158: PUSH
57159: LD_INT 1
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 0
57168: PUSH
57169: LD_INT 1
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 1
57178: NEG
57179: PUSH
57180: LD_INT 0
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 1
57189: NEG
57190: PUSH
57191: LD_INT 1
57193: NEG
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 1
57201: PUSH
57202: LD_INT 1
57204: NEG
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 2
57212: PUSH
57213: LD_INT 0
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 2
57222: PUSH
57223: LD_INT 1
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 1
57232: NEG
57233: PUSH
57234: LD_INT 1
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 2
57243: NEG
57244: PUSH
57245: LD_INT 0
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 2
57254: NEG
57255: PUSH
57256: LD_INT 1
57258: NEG
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 2
57266: PUSH
57267: LD_INT 1
57269: NEG
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 3
57277: PUSH
57278: LD_INT 0
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 3
57287: PUSH
57288: LD_INT 1
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57313: LD_ADDR_VAR 0 16
57317: PUSH
57318: LD_INT 0
57320: PUSH
57321: LD_INT 0
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 0
57330: PUSH
57331: LD_INT 1
57333: NEG
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 1
57341: PUSH
57342: LD_INT 0
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 1
57351: PUSH
57352: LD_INT 1
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 0
57361: PUSH
57362: LD_INT 1
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 1
57371: NEG
57372: PUSH
57373: LD_INT 0
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 1
57382: NEG
57383: PUSH
57384: LD_INT 1
57386: NEG
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 1
57394: NEG
57395: PUSH
57396: LD_INT 2
57398: NEG
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 2
57406: PUSH
57407: LD_INT 1
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 2
57416: PUSH
57417: LD_INT 2
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 1
57426: PUSH
57427: LD_INT 2
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 2
57436: NEG
57437: PUSH
57438: LD_INT 1
57440: NEG
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 2
57448: NEG
57449: PUSH
57450: LD_INT 2
57452: NEG
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 3
57460: PUSH
57461: LD_INT 2
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 3
57470: PUSH
57471: LD_INT 3
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 2
57480: PUSH
57481: LD_INT 3
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57506: LD_ADDR_VAR 0 17
57510: PUSH
57511: LD_INT 0
57513: PUSH
57514: LD_INT 0
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 0
57523: PUSH
57524: LD_INT 1
57526: NEG
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 1
57534: PUSH
57535: LD_INT 0
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 1
57544: PUSH
57545: LD_INT 1
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 0
57554: PUSH
57555: LD_INT 1
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 1
57564: NEG
57565: PUSH
57566: LD_INT 0
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 1
57575: NEG
57576: PUSH
57577: LD_INT 1
57579: NEG
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 1
57587: NEG
57588: PUSH
57589: LD_INT 2
57591: NEG
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 0
57599: PUSH
57600: LD_INT 2
57602: NEG
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 1
57610: PUSH
57611: LD_INT 1
57613: NEG
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 2
57621: PUSH
57622: LD_INT 0
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 2
57631: PUSH
57632: LD_INT 1
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 2
57641: PUSH
57642: LD_INT 2
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 1
57651: PUSH
57652: LD_INT 2
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 0
57661: PUSH
57662: LD_INT 2
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 1
57671: NEG
57672: PUSH
57673: LD_INT 1
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 2
57682: NEG
57683: PUSH
57684: LD_INT 0
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 2
57693: NEG
57694: PUSH
57695: LD_INT 1
57697: NEG
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 2
57705: NEG
57706: PUSH
57707: LD_INT 2
57709: NEG
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57736: LD_ADDR_VAR 0 18
57740: PUSH
57741: LD_INT 0
57743: PUSH
57744: LD_INT 0
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 0
57753: PUSH
57754: LD_INT 1
57756: NEG
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 1
57764: PUSH
57765: LD_INT 0
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 1
57774: PUSH
57775: LD_INT 1
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 0
57784: PUSH
57785: LD_INT 1
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 1
57794: NEG
57795: PUSH
57796: LD_INT 0
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 1
57805: NEG
57806: PUSH
57807: LD_INT 1
57809: NEG
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 1
57817: NEG
57818: PUSH
57819: LD_INT 2
57821: NEG
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 0
57829: PUSH
57830: LD_INT 2
57832: NEG
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 1
57840: PUSH
57841: LD_INT 1
57843: NEG
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 2
57851: PUSH
57852: LD_INT 0
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 2
57861: PUSH
57862: LD_INT 1
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 2
57871: PUSH
57872: LD_INT 2
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 1
57881: PUSH
57882: LD_INT 2
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 0
57891: PUSH
57892: LD_INT 2
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 1
57901: NEG
57902: PUSH
57903: LD_INT 1
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 2
57912: NEG
57913: PUSH
57914: LD_INT 0
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 2
57923: NEG
57924: PUSH
57925: LD_INT 1
57927: NEG
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 2
57935: NEG
57936: PUSH
57937: LD_INT 2
57939: NEG
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57966: LD_ADDR_VAR 0 19
57970: PUSH
57971: LD_INT 0
57973: PUSH
57974: LD_INT 0
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 0
57983: PUSH
57984: LD_INT 1
57986: NEG
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 1
57994: PUSH
57995: LD_INT 0
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 1
58004: PUSH
58005: LD_INT 1
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 0
58014: PUSH
58015: LD_INT 1
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 1
58024: NEG
58025: PUSH
58026: LD_INT 0
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 1
58035: NEG
58036: PUSH
58037: LD_INT 1
58039: NEG
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 1
58047: NEG
58048: PUSH
58049: LD_INT 2
58051: NEG
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 0
58059: PUSH
58060: LD_INT 2
58062: NEG
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 1
58070: PUSH
58071: LD_INT 1
58073: NEG
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 2
58081: PUSH
58082: LD_INT 0
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 2
58091: PUSH
58092: LD_INT 1
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 2
58101: PUSH
58102: LD_INT 2
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 1
58111: PUSH
58112: LD_INT 2
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 0
58121: PUSH
58122: LD_INT 2
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 1
58131: NEG
58132: PUSH
58133: LD_INT 1
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 2
58142: NEG
58143: PUSH
58144: LD_INT 0
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 2
58153: NEG
58154: PUSH
58155: LD_INT 1
58157: NEG
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 2
58165: NEG
58166: PUSH
58167: LD_INT 2
58169: NEG
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58196: LD_ADDR_VAR 0 20
58200: PUSH
58201: LD_INT 0
58203: PUSH
58204: LD_INT 0
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 0
58213: PUSH
58214: LD_INT 1
58216: NEG
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 1
58224: PUSH
58225: LD_INT 0
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 1
58234: PUSH
58235: LD_INT 1
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 0
58244: PUSH
58245: LD_INT 1
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 1
58254: NEG
58255: PUSH
58256: LD_INT 0
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 1
58265: NEG
58266: PUSH
58267: LD_INT 1
58269: NEG
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 1
58277: NEG
58278: PUSH
58279: LD_INT 2
58281: NEG
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 0
58289: PUSH
58290: LD_INT 2
58292: NEG
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 1
58300: PUSH
58301: LD_INT 1
58303: NEG
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 2
58311: PUSH
58312: LD_INT 0
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 2
58321: PUSH
58322: LD_INT 1
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 2
58331: PUSH
58332: LD_INT 2
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 1
58341: PUSH
58342: LD_INT 2
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 0
58351: PUSH
58352: LD_INT 2
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 1
58361: NEG
58362: PUSH
58363: LD_INT 1
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 2
58372: NEG
58373: PUSH
58374: LD_INT 0
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 2
58383: NEG
58384: PUSH
58385: LD_INT 1
58387: NEG
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 2
58395: NEG
58396: PUSH
58397: LD_INT 2
58399: NEG
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58426: LD_ADDR_VAR 0 21
58430: PUSH
58431: LD_INT 0
58433: PUSH
58434: LD_INT 0
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 0
58443: PUSH
58444: LD_INT 1
58446: NEG
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 1
58454: PUSH
58455: LD_INT 0
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 1
58464: PUSH
58465: LD_INT 1
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 0
58474: PUSH
58475: LD_INT 1
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 1
58484: NEG
58485: PUSH
58486: LD_INT 0
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 1
58495: NEG
58496: PUSH
58497: LD_INT 1
58499: NEG
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 1
58507: NEG
58508: PUSH
58509: LD_INT 2
58511: NEG
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 0
58519: PUSH
58520: LD_INT 2
58522: NEG
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 1
58530: PUSH
58531: LD_INT 1
58533: NEG
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 2
58541: PUSH
58542: LD_INT 0
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 2
58551: PUSH
58552: LD_INT 1
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 2
58561: PUSH
58562: LD_INT 2
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 1
58571: PUSH
58572: LD_INT 2
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 0
58581: PUSH
58582: LD_INT 2
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 1
58591: NEG
58592: PUSH
58593: LD_INT 1
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 2
58602: NEG
58603: PUSH
58604: LD_INT 0
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 2
58613: NEG
58614: PUSH
58615: LD_INT 1
58617: NEG
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 2
58625: NEG
58626: PUSH
58627: LD_INT 2
58629: NEG
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58656: LD_ADDR_VAR 0 22
58660: PUSH
58661: LD_INT 0
58663: PUSH
58664: LD_INT 0
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 0
58673: PUSH
58674: LD_INT 1
58676: NEG
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 1
58684: PUSH
58685: LD_INT 0
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 1
58694: PUSH
58695: LD_INT 1
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 0
58704: PUSH
58705: LD_INT 1
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 1
58714: NEG
58715: PUSH
58716: LD_INT 0
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 1
58725: NEG
58726: PUSH
58727: LD_INT 1
58729: NEG
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 1
58737: NEG
58738: PUSH
58739: LD_INT 2
58741: NEG
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 0
58749: PUSH
58750: LD_INT 2
58752: NEG
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 1
58760: PUSH
58761: LD_INT 1
58763: NEG
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 2
58771: PUSH
58772: LD_INT 0
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 2
58781: PUSH
58782: LD_INT 1
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 2
58791: PUSH
58792: LD_INT 2
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 1
58801: PUSH
58802: LD_INT 2
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 0
58811: PUSH
58812: LD_INT 2
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 1
58821: NEG
58822: PUSH
58823: LD_INT 1
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 2
58832: NEG
58833: PUSH
58834: LD_INT 0
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 2
58843: NEG
58844: PUSH
58845: LD_INT 1
58847: NEG
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 2
58855: NEG
58856: PUSH
58857: LD_INT 2
58859: NEG
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58886: LD_ADDR_VAR 0 23
58890: PUSH
58891: LD_INT 0
58893: PUSH
58894: LD_INT 0
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 0
58903: PUSH
58904: LD_INT 1
58906: NEG
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 1
58914: PUSH
58915: LD_INT 0
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 1
58924: PUSH
58925: LD_INT 1
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 0
58934: PUSH
58935: LD_INT 1
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 1
58944: NEG
58945: PUSH
58946: LD_INT 0
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 1
58955: NEG
58956: PUSH
58957: LD_INT 1
58959: NEG
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 1
58967: NEG
58968: PUSH
58969: LD_INT 2
58971: NEG
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 0
58979: PUSH
58980: LD_INT 2
58982: NEG
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 1
58990: PUSH
58991: LD_INT 1
58993: NEG
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 2
59001: PUSH
59002: LD_INT 0
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 2
59011: PUSH
59012: LD_INT 1
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 2
59021: PUSH
59022: LD_INT 2
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 1
59031: PUSH
59032: LD_INT 2
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 0
59041: PUSH
59042: LD_INT 2
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 1
59051: NEG
59052: PUSH
59053: LD_INT 1
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 2
59062: NEG
59063: PUSH
59064: LD_INT 0
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 2
59073: NEG
59074: PUSH
59075: LD_INT 1
59077: NEG
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 2
59085: NEG
59086: PUSH
59087: LD_INT 2
59089: NEG
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 2
59097: NEG
59098: PUSH
59099: LD_INT 3
59101: NEG
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 1
59109: NEG
59110: PUSH
59111: LD_INT 3
59113: NEG
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 1
59121: PUSH
59122: LD_INT 2
59124: NEG
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 2
59132: PUSH
59133: LD_INT 1
59135: NEG
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
59166: LD_ADDR_VAR 0 24
59170: PUSH
59171: LD_INT 0
59173: PUSH
59174: LD_INT 0
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 0
59183: PUSH
59184: LD_INT 1
59186: NEG
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 1
59194: PUSH
59195: LD_INT 0
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 1
59204: PUSH
59205: LD_INT 1
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 0
59214: PUSH
59215: LD_INT 1
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 1
59224: NEG
59225: PUSH
59226: LD_INT 0
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 1
59235: NEG
59236: PUSH
59237: LD_INT 1
59239: NEG
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 1
59247: NEG
59248: PUSH
59249: LD_INT 2
59251: NEG
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 0
59259: PUSH
59260: LD_INT 2
59262: NEG
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 1
59270: PUSH
59271: LD_INT 1
59273: NEG
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 2
59281: PUSH
59282: LD_INT 0
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 2
59291: PUSH
59292: LD_INT 1
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 2
59301: PUSH
59302: LD_INT 2
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 1
59311: PUSH
59312: LD_INT 2
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 0
59321: PUSH
59322: LD_INT 2
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 1
59331: NEG
59332: PUSH
59333: LD_INT 1
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 2
59342: NEG
59343: PUSH
59344: LD_INT 0
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 2
59353: NEG
59354: PUSH
59355: LD_INT 1
59357: NEG
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 2
59365: NEG
59366: PUSH
59367: LD_INT 2
59369: NEG
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 1
59377: PUSH
59378: LD_INT 2
59380: NEG
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 2
59388: PUSH
59389: LD_INT 1
59391: NEG
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 3
59399: PUSH
59400: LD_INT 1
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 3
59409: PUSH
59410: LD_INT 2
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
59442: LD_ADDR_VAR 0 25
59446: PUSH
59447: LD_INT 0
59449: PUSH
59450: LD_INT 0
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 0
59459: PUSH
59460: LD_INT 1
59462: NEG
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 1
59470: PUSH
59471: LD_INT 0
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 1
59480: PUSH
59481: LD_INT 1
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 0
59490: PUSH
59491: LD_INT 1
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 1
59500: NEG
59501: PUSH
59502: LD_INT 0
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 1
59511: NEG
59512: PUSH
59513: LD_INT 1
59515: NEG
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 1
59523: NEG
59524: PUSH
59525: LD_INT 2
59527: NEG
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 0
59535: PUSH
59536: LD_INT 2
59538: NEG
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 1
59546: PUSH
59547: LD_INT 1
59549: NEG
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 2
59557: PUSH
59558: LD_INT 0
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 2
59567: PUSH
59568: LD_INT 1
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 2
59577: PUSH
59578: LD_INT 2
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 1
59587: PUSH
59588: LD_INT 2
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 0
59597: PUSH
59598: LD_INT 2
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 1
59607: NEG
59608: PUSH
59609: LD_INT 1
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 2
59618: NEG
59619: PUSH
59620: LD_INT 0
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 2
59629: NEG
59630: PUSH
59631: LD_INT 1
59633: NEG
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 2
59641: NEG
59642: PUSH
59643: LD_INT 2
59645: NEG
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 3
59653: PUSH
59654: LD_INT 1
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 3
59663: PUSH
59664: LD_INT 2
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 2
59673: PUSH
59674: LD_INT 3
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 1
59683: PUSH
59684: LD_INT 3
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59716: LD_ADDR_VAR 0 26
59720: PUSH
59721: LD_INT 0
59723: PUSH
59724: LD_INT 0
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 0
59733: PUSH
59734: LD_INT 1
59736: NEG
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 1
59744: PUSH
59745: LD_INT 0
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 1
59754: PUSH
59755: LD_INT 1
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 0
59764: PUSH
59765: LD_INT 1
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 1
59774: NEG
59775: PUSH
59776: LD_INT 0
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 1
59785: NEG
59786: PUSH
59787: LD_INT 1
59789: NEG
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 1
59797: NEG
59798: PUSH
59799: LD_INT 2
59801: NEG
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 0
59809: PUSH
59810: LD_INT 2
59812: NEG
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 1
59820: PUSH
59821: LD_INT 1
59823: NEG
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 2
59831: PUSH
59832: LD_INT 0
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 2
59841: PUSH
59842: LD_INT 1
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 2
59851: PUSH
59852: LD_INT 2
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 1
59861: PUSH
59862: LD_INT 2
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 0
59871: PUSH
59872: LD_INT 2
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 1
59881: NEG
59882: PUSH
59883: LD_INT 1
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 2
59892: NEG
59893: PUSH
59894: LD_INT 0
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 2
59903: NEG
59904: PUSH
59905: LD_INT 1
59907: NEG
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 2
59915: NEG
59916: PUSH
59917: LD_INT 2
59919: NEG
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 2
59927: PUSH
59928: LD_INT 3
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 1
59937: PUSH
59938: LD_INT 3
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 1
59947: NEG
59948: PUSH
59949: LD_INT 2
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 2
59958: NEG
59959: PUSH
59960: LD_INT 1
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59992: LD_ADDR_VAR 0 27
59996: PUSH
59997: LD_INT 0
59999: PUSH
60000: LD_INT 0
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 0
60009: PUSH
60010: LD_INT 1
60012: NEG
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 1
60020: PUSH
60021: LD_INT 0
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 1
60030: PUSH
60031: LD_INT 1
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 0
60040: PUSH
60041: LD_INT 1
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 1
60050: NEG
60051: PUSH
60052: LD_INT 0
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 1
60061: NEG
60062: PUSH
60063: LD_INT 1
60065: NEG
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 1
60073: NEG
60074: PUSH
60075: LD_INT 2
60077: NEG
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 0
60085: PUSH
60086: LD_INT 2
60088: NEG
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 1
60096: PUSH
60097: LD_INT 1
60099: NEG
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 2
60107: PUSH
60108: LD_INT 0
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 2
60117: PUSH
60118: LD_INT 1
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 2
60127: PUSH
60128: LD_INT 2
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 1
60137: PUSH
60138: LD_INT 2
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 0
60147: PUSH
60148: LD_INT 2
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 1
60157: NEG
60158: PUSH
60159: LD_INT 1
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 2
60168: NEG
60169: PUSH
60170: LD_INT 0
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 2
60179: NEG
60180: PUSH
60181: LD_INT 1
60183: NEG
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 2
60191: NEG
60192: PUSH
60193: LD_INT 2
60195: NEG
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 1
60203: NEG
60204: PUSH
60205: LD_INT 2
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 2
60214: NEG
60215: PUSH
60216: LD_INT 1
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 3
60225: NEG
60226: PUSH
60227: LD_INT 1
60229: NEG
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 3
60237: NEG
60238: PUSH
60239: LD_INT 2
60241: NEG
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60272: LD_ADDR_VAR 0 28
60276: PUSH
60277: LD_INT 0
60279: PUSH
60280: LD_INT 0
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 0
60289: PUSH
60290: LD_INT 1
60292: NEG
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 1
60300: PUSH
60301: LD_INT 0
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 1
60310: PUSH
60311: LD_INT 1
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 0
60320: PUSH
60321: LD_INT 1
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 1
60330: NEG
60331: PUSH
60332: LD_INT 0
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 1
60341: NEG
60342: PUSH
60343: LD_INT 1
60345: NEG
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 1
60353: NEG
60354: PUSH
60355: LD_INT 2
60357: NEG
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 0
60365: PUSH
60366: LD_INT 2
60368: NEG
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 1
60376: PUSH
60377: LD_INT 1
60379: NEG
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 2
60387: PUSH
60388: LD_INT 0
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 2
60397: PUSH
60398: LD_INT 1
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 2
60407: PUSH
60408: LD_INT 2
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 1
60417: PUSH
60418: LD_INT 2
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 0
60427: PUSH
60428: LD_INT 2
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 1
60437: NEG
60438: PUSH
60439: LD_INT 1
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: LD_INT 2
60448: NEG
60449: PUSH
60450: LD_INT 0
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 2
60459: NEG
60460: PUSH
60461: LD_INT 1
60463: NEG
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 2
60471: NEG
60472: PUSH
60473: LD_INT 2
60475: NEG
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 2
60483: NEG
60484: PUSH
60485: LD_INT 3
60487: NEG
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 1
60495: NEG
60496: PUSH
60497: LD_INT 3
60499: NEG
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 3
60507: NEG
60508: PUSH
60509: LD_INT 1
60511: NEG
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 3
60519: NEG
60520: PUSH
60521: LD_INT 2
60523: NEG
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60554: LD_ADDR_VAR 0 29
60558: PUSH
60559: LD_INT 0
60561: PUSH
60562: LD_INT 0
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 0
60571: PUSH
60572: LD_INT 1
60574: NEG
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 1
60582: PUSH
60583: LD_INT 0
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 1
60592: PUSH
60593: LD_INT 1
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 0
60602: PUSH
60603: LD_INT 1
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 1
60612: NEG
60613: PUSH
60614: LD_INT 0
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 1
60623: NEG
60624: PUSH
60625: LD_INT 1
60627: NEG
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 1
60635: NEG
60636: PUSH
60637: LD_INT 2
60639: NEG
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 0
60647: PUSH
60648: LD_INT 2
60650: NEG
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 1
60658: PUSH
60659: LD_INT 1
60661: NEG
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 2
60669: PUSH
60670: LD_INT 0
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 2
60679: PUSH
60680: LD_INT 1
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 1
60689: PUSH
60690: LD_INT 2
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 0
60699: PUSH
60700: LD_INT 2
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 1
60709: NEG
60710: PUSH
60711: LD_INT 1
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 2
60720: NEG
60721: PUSH
60722: LD_INT 1
60724: NEG
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 2
60732: NEG
60733: PUSH
60734: LD_INT 2
60736: NEG
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 2
60744: NEG
60745: PUSH
60746: LD_INT 3
60748: NEG
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 2
60756: PUSH
60757: LD_INT 1
60759: NEG
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 3
60767: PUSH
60768: LD_INT 1
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 1
60777: PUSH
60778: LD_INT 3
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 1
60787: NEG
60788: PUSH
60789: LD_INT 2
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 3
60798: NEG
60799: PUSH
60800: LD_INT 2
60802: NEG
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60833: LD_ADDR_VAR 0 30
60837: PUSH
60838: LD_INT 0
60840: PUSH
60841: LD_INT 0
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 0
60850: PUSH
60851: LD_INT 1
60853: NEG
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 1
60861: PUSH
60862: LD_INT 0
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 1
60871: PUSH
60872: LD_INT 1
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 0
60881: PUSH
60882: LD_INT 1
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 1
60891: NEG
60892: PUSH
60893: LD_INT 0
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 1
60902: NEG
60903: PUSH
60904: LD_INT 1
60906: NEG
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 1
60914: NEG
60915: PUSH
60916: LD_INT 2
60918: NEG
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 0
60926: PUSH
60927: LD_INT 2
60929: NEG
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 1
60937: PUSH
60938: LD_INT 1
60940: NEG
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 2
60948: PUSH
60949: LD_INT 0
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 2
60958: PUSH
60959: LD_INT 1
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 2
60968: PUSH
60969: LD_INT 2
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 1
60978: PUSH
60979: LD_INT 2
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 1
60988: NEG
60989: PUSH
60990: LD_INT 1
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 2
60999: NEG
61000: PUSH
61001: LD_INT 0
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 2
61010: NEG
61011: PUSH
61012: LD_INT 1
61014: NEG
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 1
61022: NEG
61023: PUSH
61024: LD_INT 3
61026: NEG
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 1
61034: PUSH
61035: LD_INT 2
61037: NEG
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 3
61045: PUSH
61046: LD_INT 2
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 2
61055: PUSH
61056: LD_INT 3
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 2
61065: NEG
61066: PUSH
61067: LD_INT 1
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 3
61076: NEG
61077: PUSH
61078: LD_INT 1
61080: NEG
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61111: LD_ADDR_VAR 0 31
61115: PUSH
61116: LD_INT 0
61118: PUSH
61119: LD_INT 0
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: LD_INT 0
61128: PUSH
61129: LD_INT 1
61131: NEG
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 1
61139: PUSH
61140: LD_INT 0
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 1
61149: PUSH
61150: LD_INT 1
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 0
61159: PUSH
61160: LD_INT 1
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 1
61169: NEG
61170: PUSH
61171: LD_INT 0
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 1
61180: NEG
61181: PUSH
61182: LD_INT 1
61184: NEG
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 1
61192: NEG
61193: PUSH
61194: LD_INT 2
61196: NEG
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 1
61204: PUSH
61205: LD_INT 1
61207: NEG
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 2
61215: PUSH
61216: LD_INT 0
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 2
61225: PUSH
61226: LD_INT 1
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 2
61235: PUSH
61236: LD_INT 2
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 1
61245: PUSH
61246: LD_INT 2
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 0
61255: PUSH
61256: LD_INT 2
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 1
61265: NEG
61266: PUSH
61267: LD_INT 1
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 2
61276: NEG
61277: PUSH
61278: LD_INT 1
61280: NEG
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 2
61288: NEG
61289: PUSH
61290: LD_INT 2
61292: NEG
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 2
61300: NEG
61301: PUSH
61302: LD_INT 3
61304: NEG
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 2
61312: PUSH
61313: LD_INT 1
61315: NEG
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 3
61323: PUSH
61324: LD_INT 1
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 1
61333: PUSH
61334: LD_INT 3
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 1
61343: NEG
61344: PUSH
61345: LD_INT 2
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 3
61354: NEG
61355: PUSH
61356: LD_INT 2
61358: NEG
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61389: LD_ADDR_VAR 0 32
61393: PUSH
61394: LD_INT 0
61396: PUSH
61397: LD_INT 0
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 0
61406: PUSH
61407: LD_INT 1
61409: NEG
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 1
61417: PUSH
61418: LD_INT 0
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 1
61427: PUSH
61428: LD_INT 1
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 0
61437: PUSH
61438: LD_INT 1
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 1
61447: NEG
61448: PUSH
61449: LD_INT 0
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 1
61458: NEG
61459: PUSH
61460: LD_INT 1
61462: NEG
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 1
61470: NEG
61471: PUSH
61472: LD_INT 2
61474: NEG
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 0
61482: PUSH
61483: LD_INT 2
61485: NEG
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 1
61493: PUSH
61494: LD_INT 1
61496: NEG
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 2
61504: PUSH
61505: LD_INT 1
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 2
61514: PUSH
61515: LD_INT 2
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 1
61524: PUSH
61525: LD_INT 2
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 0
61534: PUSH
61535: LD_INT 2
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 1
61544: NEG
61545: PUSH
61546: LD_INT 1
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 2
61555: NEG
61556: PUSH
61557: LD_INT 0
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 2
61566: NEG
61567: PUSH
61568: LD_INT 1
61570: NEG
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 1
61578: NEG
61579: PUSH
61580: LD_INT 3
61582: NEG
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 1
61590: PUSH
61591: LD_INT 2
61593: NEG
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 3
61601: PUSH
61602: LD_INT 2
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 2
61611: PUSH
61612: LD_INT 3
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 2
61621: NEG
61622: PUSH
61623: LD_INT 1
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 3
61632: NEG
61633: PUSH
61634: LD_INT 1
61636: NEG
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61667: LD_ADDR_VAR 0 33
61671: PUSH
61672: LD_INT 0
61674: PUSH
61675: LD_INT 0
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 0
61684: PUSH
61685: LD_INT 1
61687: NEG
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: LD_INT 1
61695: PUSH
61696: LD_INT 0
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 1
61705: PUSH
61706: LD_INT 1
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 0
61715: PUSH
61716: LD_INT 1
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 1
61725: NEG
61726: PUSH
61727: LD_INT 0
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 1
61736: NEG
61737: PUSH
61738: LD_INT 1
61740: NEG
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 1
61748: NEG
61749: PUSH
61750: LD_INT 2
61752: NEG
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 1
61760: PUSH
61761: LD_INT 1
61763: NEG
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: LD_INT 2
61771: PUSH
61772: LD_INT 0
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: LD_INT 2
61781: PUSH
61782: LD_INT 1
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 1
61791: PUSH
61792: LD_INT 2
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 0
61801: PUSH
61802: LD_INT 2
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: LD_INT 1
61811: NEG
61812: PUSH
61813: LD_INT 1
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 2
61822: NEG
61823: PUSH
61824: LD_INT 0
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 2
61833: NEG
61834: PUSH
61835: LD_INT 1
61837: NEG
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 2
61845: NEG
61846: PUSH
61847: LD_INT 2
61849: NEG
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 2
61857: NEG
61858: PUSH
61859: LD_INT 3
61861: NEG
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 2
61869: PUSH
61870: LD_INT 1
61872: NEG
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: LD_INT 3
61880: PUSH
61881: LD_INT 1
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 1
61890: PUSH
61891: LD_INT 3
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 1
61900: NEG
61901: PUSH
61902: LD_INT 2
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 3
61911: NEG
61912: PUSH
61913: LD_INT 2
61915: NEG
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61946: LD_ADDR_VAR 0 34
61950: PUSH
61951: LD_INT 0
61953: PUSH
61954: LD_INT 0
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PUSH
61961: LD_INT 0
61963: PUSH
61964: LD_INT 1
61966: NEG
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 1
61974: PUSH
61975: LD_INT 0
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 1
61984: PUSH
61985: LD_INT 1
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 0
61994: PUSH
61995: LD_INT 1
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: LD_INT 1
62004: NEG
62005: PUSH
62006: LD_INT 0
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 1
62015: NEG
62016: PUSH
62017: LD_INT 1
62019: NEG
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 1
62027: NEG
62028: PUSH
62029: LD_INT 2
62031: NEG
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: PUSH
62037: LD_INT 0
62039: PUSH
62040: LD_INT 2
62042: NEG
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: LD_INT 1
62050: PUSH
62051: LD_INT 1
62053: NEG
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 2
62061: PUSH
62062: LD_INT 1
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 2
62071: PUSH
62072: LD_INT 2
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 1
62081: PUSH
62082: LD_INT 2
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: LD_INT 1
62091: NEG
62092: PUSH
62093: LD_INT 1
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 2
62102: NEG
62103: PUSH
62104: LD_INT 0
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 2
62113: NEG
62114: PUSH
62115: LD_INT 1
62117: NEG
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 2
62125: NEG
62126: PUSH
62127: LD_INT 2
62129: NEG
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 1
62137: NEG
62138: PUSH
62139: LD_INT 3
62141: NEG
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 1
62149: PUSH
62150: LD_INT 2
62152: NEG
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 3
62160: PUSH
62161: LD_INT 2
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 2
62170: PUSH
62171: LD_INT 3
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 2
62180: NEG
62181: PUSH
62182: LD_INT 1
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 3
62191: NEG
62192: PUSH
62193: LD_INT 1
62195: NEG
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62226: LD_ADDR_VAR 0 35
62230: PUSH
62231: LD_INT 0
62233: PUSH
62234: LD_INT 0
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 0
62243: PUSH
62244: LD_INT 1
62246: NEG
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 1
62254: PUSH
62255: LD_INT 0
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 1
62264: PUSH
62265: LD_INT 1
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: PUSH
62272: LD_INT 0
62274: PUSH
62275: LD_INT 1
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 1
62284: NEG
62285: PUSH
62286: LD_INT 0
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 1
62295: NEG
62296: PUSH
62297: LD_INT 1
62299: NEG
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_INT 2
62307: PUSH
62308: LD_INT 1
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 2
62317: NEG
62318: PUSH
62319: LD_INT 1
62321: NEG
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62338: LD_ADDR_VAR 0 36
62342: PUSH
62343: LD_INT 0
62345: PUSH
62346: LD_INT 0
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 0
62355: PUSH
62356: LD_INT 1
62358: NEG
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: LD_INT 1
62366: PUSH
62367: LD_INT 0
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: LD_INT 1
62376: PUSH
62377: LD_INT 1
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 0
62386: PUSH
62387: LD_INT 1
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 1
62396: NEG
62397: PUSH
62398: LD_INT 0
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 1
62407: NEG
62408: PUSH
62409: LD_INT 1
62411: NEG
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 1
62419: NEG
62420: PUSH
62421: LD_INT 2
62423: NEG
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 1
62431: PUSH
62432: LD_INT 2
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62450: LD_ADDR_VAR 0 37
62454: PUSH
62455: LD_INT 0
62457: PUSH
62458: LD_INT 0
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: PUSH
62465: LD_INT 0
62467: PUSH
62468: LD_INT 1
62470: NEG
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 1
62478: PUSH
62479: LD_INT 0
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: LD_INT 1
62488: PUSH
62489: LD_INT 1
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 0
62498: PUSH
62499: LD_INT 1
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 1
62508: NEG
62509: PUSH
62510: LD_INT 0
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 1
62519: NEG
62520: PUSH
62521: LD_INT 1
62523: NEG
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 1
62531: PUSH
62532: LD_INT 1
62534: NEG
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: LD_INT 1
62542: NEG
62543: PUSH
62544: LD_INT 1
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62562: LD_ADDR_VAR 0 38
62566: PUSH
62567: LD_INT 0
62569: PUSH
62570: LD_INT 0
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 0
62579: PUSH
62580: LD_INT 1
62582: NEG
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 1
62590: PUSH
62591: LD_INT 0
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: LD_INT 1
62600: PUSH
62601: LD_INT 1
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 0
62610: PUSH
62611: LD_INT 1
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 1
62620: NEG
62621: PUSH
62622: LD_INT 0
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_INT 1
62631: NEG
62632: PUSH
62633: LD_INT 1
62635: NEG
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 2
62643: PUSH
62644: LD_INT 1
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 2
62653: NEG
62654: PUSH
62655: LD_INT 1
62657: NEG
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: LIST
62672: LIST
62673: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62674: LD_ADDR_VAR 0 39
62678: PUSH
62679: LD_INT 0
62681: PUSH
62682: LD_INT 0
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 0
62691: PUSH
62692: LD_INT 1
62694: NEG
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 1
62702: PUSH
62703: LD_INT 0
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 1
62712: PUSH
62713: LD_INT 1
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 0
62722: PUSH
62723: LD_INT 1
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 1
62732: NEG
62733: PUSH
62734: LD_INT 0
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PUSH
62741: LD_INT 1
62743: NEG
62744: PUSH
62745: LD_INT 1
62747: NEG
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 1
62755: NEG
62756: PUSH
62757: LD_INT 2
62759: NEG
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: LD_INT 1
62767: PUSH
62768: LD_INT 2
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62786: LD_ADDR_VAR 0 40
62790: PUSH
62791: LD_INT 0
62793: PUSH
62794: LD_INT 0
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: LD_INT 0
62803: PUSH
62804: LD_INT 1
62806: NEG
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: LD_INT 1
62814: PUSH
62815: LD_INT 0
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 1
62824: PUSH
62825: LD_INT 1
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 0
62834: PUSH
62835: LD_INT 1
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 1
62844: NEG
62845: PUSH
62846: LD_INT 0
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 1
62855: NEG
62856: PUSH
62857: LD_INT 1
62859: NEG
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: LD_INT 1
62867: PUSH
62868: LD_INT 1
62870: NEG
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PUSH
62876: LD_INT 1
62878: NEG
62879: PUSH
62880: LD_INT 1
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62898: LD_ADDR_VAR 0 41
62902: PUSH
62903: LD_INT 0
62905: PUSH
62906: LD_INT 0
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: LD_INT 0
62915: PUSH
62916: LD_INT 1
62918: NEG
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: LD_INT 1
62926: PUSH
62927: LD_INT 0
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: LD_INT 1
62936: PUSH
62937: LD_INT 1
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 0
62946: PUSH
62947: LD_INT 1
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 1
62956: NEG
62957: PUSH
62958: LD_INT 0
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 1
62967: NEG
62968: PUSH
62969: LD_INT 1
62971: NEG
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 1
62979: NEG
62980: PUSH
62981: LD_INT 2
62983: NEG
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 1
62991: PUSH
62992: LD_INT 1
62994: NEG
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 2
63002: PUSH
63003: LD_INT 0
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 2
63012: PUSH
63013: LD_INT 1
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 2
63022: PUSH
63023: LD_INT 2
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 1
63032: PUSH
63033: LD_INT 2
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 1
63042: NEG
63043: PUSH
63044: LD_INT 1
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 2
63053: NEG
63054: PUSH
63055: LD_INT 0
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 2
63064: NEG
63065: PUSH
63066: LD_INT 1
63068: NEG
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: LD_INT 2
63076: NEG
63077: PUSH
63078: LD_INT 2
63080: NEG
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PUSH
63086: LD_INT 2
63088: NEG
63089: PUSH
63090: LD_INT 3
63092: NEG
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: PUSH
63098: LD_INT 2
63100: PUSH
63101: LD_INT 1
63103: NEG
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 3
63111: PUSH
63112: LD_INT 0
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 3
63121: PUSH
63122: LD_INT 1
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 3
63131: PUSH
63132: LD_INT 2
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: LD_INT 3
63141: PUSH
63142: LD_INT 3
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 2
63151: PUSH
63152: LD_INT 3
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 2
63161: NEG
63162: PUSH
63163: LD_INT 1
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: LD_INT 3
63172: NEG
63173: PUSH
63174: LD_INT 0
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 3
63183: NEG
63184: PUSH
63185: LD_INT 1
63187: NEG
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: PUSH
63193: LD_INT 3
63195: NEG
63196: PUSH
63197: LD_INT 2
63199: NEG
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: LD_INT 3
63207: NEG
63208: PUSH
63209: LD_INT 3
63211: NEG
63212: PUSH
63213: EMPTY
63214: LIST
63215: LIST
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: LIST
63221: LIST
63222: LIST
63223: LIST
63224: LIST
63225: LIST
63226: LIST
63227: LIST
63228: LIST
63229: LIST
63230: LIST
63231: LIST
63232: LIST
63233: LIST
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: LIST
63240: LIST
63241: LIST
63242: LIST
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63248: LD_ADDR_VAR 0 42
63252: PUSH
63253: LD_INT 0
63255: PUSH
63256: LD_INT 0
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: PUSH
63263: LD_INT 0
63265: PUSH
63266: LD_INT 1
63268: NEG
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 1
63276: PUSH
63277: LD_INT 0
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: LD_INT 1
63286: PUSH
63287: LD_INT 1
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: LD_INT 0
63296: PUSH
63297: LD_INT 1
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: LD_INT 1
63306: NEG
63307: PUSH
63308: LD_INT 0
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 1
63317: NEG
63318: PUSH
63319: LD_INT 1
63321: NEG
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 1
63329: NEG
63330: PUSH
63331: LD_INT 2
63333: NEG
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 0
63341: PUSH
63342: LD_INT 2
63344: NEG
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: PUSH
63350: LD_INT 1
63352: PUSH
63353: LD_INT 1
63355: NEG
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PUSH
63361: LD_INT 2
63363: PUSH
63364: LD_INT 1
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: LD_INT 2
63373: PUSH
63374: LD_INT 2
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: LD_INT 1
63383: PUSH
63384: LD_INT 2
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: PUSH
63391: LD_INT 0
63393: PUSH
63394: LD_INT 2
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 1
63403: NEG
63404: PUSH
63405: LD_INT 1
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: LD_INT 2
63414: NEG
63415: PUSH
63416: LD_INT 1
63418: NEG
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 2
63426: NEG
63427: PUSH
63428: LD_INT 2
63430: NEG
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 2
63438: NEG
63439: PUSH
63440: LD_INT 3
63442: NEG
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 1
63450: NEG
63451: PUSH
63452: LD_INT 3
63454: NEG
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: LD_INT 0
63462: PUSH
63463: LD_INT 3
63465: NEG
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: LD_INT 1
63473: PUSH
63474: LD_INT 2
63476: NEG
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 3
63484: PUSH
63485: LD_INT 2
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 3
63494: PUSH
63495: LD_INT 3
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PUSH
63502: LD_INT 2
63504: PUSH
63505: LD_INT 3
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: PUSH
63512: LD_INT 1
63514: PUSH
63515: LD_INT 3
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 0
63524: PUSH
63525: LD_INT 3
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: LD_INT 1
63534: NEG
63535: PUSH
63536: LD_INT 2
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: LD_INT 3
63545: NEG
63546: PUSH
63547: LD_INT 2
63549: NEG
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: PUSH
63555: LD_INT 3
63557: NEG
63558: PUSH
63559: LD_INT 3
63561: NEG
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: LIST
63573: LIST
63574: LIST
63575: LIST
63576: LIST
63577: LIST
63578: LIST
63579: LIST
63580: LIST
63581: LIST
63582: LIST
63583: LIST
63584: LIST
63585: LIST
63586: LIST
63587: LIST
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63598: LD_ADDR_VAR 0 43
63602: PUSH
63603: LD_INT 0
63605: PUSH
63606: LD_INT 0
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: PUSH
63613: LD_INT 0
63615: PUSH
63616: LD_INT 1
63618: NEG
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PUSH
63624: LD_INT 1
63626: PUSH
63627: LD_INT 0
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: LD_INT 1
63636: PUSH
63637: LD_INT 1
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 0
63646: PUSH
63647: LD_INT 1
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: LD_INT 1
63656: NEG
63657: PUSH
63658: LD_INT 0
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 1
63667: NEG
63668: PUSH
63669: LD_INT 1
63671: NEG
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: PUSH
63677: LD_INT 1
63679: NEG
63680: PUSH
63681: LD_INT 2
63683: NEG
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: LD_INT 0
63691: PUSH
63692: LD_INT 2
63694: NEG
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PUSH
63700: LD_INT 1
63702: PUSH
63703: LD_INT 1
63705: NEG
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 2
63713: PUSH
63714: LD_INT 0
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 2
63723: PUSH
63724: LD_INT 1
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: PUSH
63731: LD_INT 1
63733: PUSH
63734: LD_INT 2
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: PUSH
63741: LD_INT 0
63743: PUSH
63744: LD_INT 2
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_INT 1
63753: NEG
63754: PUSH
63755: LD_INT 1
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 2
63764: NEG
63765: PUSH
63766: LD_INT 0
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: PUSH
63773: LD_INT 2
63775: NEG
63776: PUSH
63777: LD_INT 1
63779: NEG
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 1
63787: NEG
63788: PUSH
63789: LD_INT 3
63791: NEG
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 0
63799: PUSH
63800: LD_INT 3
63802: NEG
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 1
63810: PUSH
63811: LD_INT 2
63813: NEG
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PUSH
63819: LD_INT 2
63821: PUSH
63822: LD_INT 1
63824: NEG
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: LD_INT 3
63832: PUSH
63833: LD_INT 0
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: LD_INT 3
63842: PUSH
63843: LD_INT 1
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 1
63852: PUSH
63853: LD_INT 3
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 0
63862: PUSH
63863: LD_INT 3
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 1
63872: NEG
63873: PUSH
63874: LD_INT 2
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 2
63883: NEG
63884: PUSH
63885: LD_INT 1
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: LD_INT 3
63894: NEG
63895: PUSH
63896: LD_INT 0
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: PUSH
63903: LD_INT 3
63905: NEG
63906: PUSH
63907: LD_INT 1
63909: NEG
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63946: LD_ADDR_VAR 0 44
63950: PUSH
63951: LD_INT 0
63953: PUSH
63954: LD_INT 0
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: PUSH
63961: LD_INT 0
63963: PUSH
63964: LD_INT 1
63966: NEG
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PUSH
63972: LD_INT 1
63974: PUSH
63975: LD_INT 0
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: LD_INT 1
63984: PUSH
63985: LD_INT 1
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 0
63994: PUSH
63995: LD_INT 1
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: PUSH
64002: LD_INT 1
64004: NEG
64005: PUSH
64006: LD_INT 0
64008: PUSH
64009: EMPTY
64010: LIST
64011: LIST
64012: PUSH
64013: LD_INT 1
64015: NEG
64016: PUSH
64017: LD_INT 1
64019: NEG
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PUSH
64025: LD_INT 1
64027: NEG
64028: PUSH
64029: LD_INT 2
64031: NEG
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: PUSH
64037: LD_INT 1
64039: PUSH
64040: LD_INT 1
64042: NEG
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: PUSH
64048: LD_INT 2
64050: PUSH
64051: LD_INT 0
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 2
64060: PUSH
64061: LD_INT 1
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: LD_INT 2
64070: PUSH
64071: LD_INT 2
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: PUSH
64078: LD_INT 1
64080: PUSH
64081: LD_INT 2
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: LD_INT 1
64090: NEG
64091: PUSH
64092: LD_INT 1
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: PUSH
64099: LD_INT 2
64101: NEG
64102: PUSH
64103: LD_INT 0
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 2
64112: NEG
64113: PUSH
64114: LD_INT 1
64116: NEG
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 2
64124: NEG
64125: PUSH
64126: LD_INT 2
64128: NEG
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: LD_INT 2
64136: NEG
64137: PUSH
64138: LD_INT 3
64140: NEG
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: PUSH
64146: LD_INT 2
64148: PUSH
64149: LD_INT 1
64151: NEG
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: PUSH
64157: LD_INT 3
64159: PUSH
64160: LD_INT 0
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: PUSH
64167: LD_INT 3
64169: PUSH
64170: LD_INT 1
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 3
64179: PUSH
64180: LD_INT 2
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: LD_INT 3
64189: PUSH
64190: LD_INT 3
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: PUSH
64197: LD_INT 2
64199: PUSH
64200: LD_INT 3
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: LD_INT 2
64209: NEG
64210: PUSH
64211: LD_INT 1
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: LD_INT 3
64220: NEG
64221: PUSH
64222: LD_INT 0
64224: PUSH
64225: EMPTY
64226: LIST
64227: LIST
64228: PUSH
64229: LD_INT 3
64231: NEG
64232: PUSH
64233: LD_INT 1
64235: NEG
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PUSH
64241: LD_INT 3
64243: NEG
64244: PUSH
64245: LD_INT 2
64247: NEG
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 3
64255: NEG
64256: PUSH
64257: LD_INT 3
64259: NEG
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: LIST
64269: LIST
64270: LIST
64271: LIST
64272: LIST
64273: LIST
64274: LIST
64275: LIST
64276: LIST
64277: LIST
64278: LIST
64279: LIST
64280: LIST
64281: LIST
64282: LIST
64283: LIST
64284: LIST
64285: LIST
64286: LIST
64287: LIST
64288: LIST
64289: LIST
64290: LIST
64291: LIST
64292: LIST
64293: LIST
64294: LIST
64295: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64296: LD_ADDR_VAR 0 45
64300: PUSH
64301: LD_INT 0
64303: PUSH
64304: LD_INT 0
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: LD_INT 0
64313: PUSH
64314: LD_INT 1
64316: NEG
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 1
64324: PUSH
64325: LD_INT 0
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 1
64334: PUSH
64335: LD_INT 1
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: LD_INT 0
64344: PUSH
64345: LD_INT 1
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: PUSH
64352: LD_INT 1
64354: NEG
64355: PUSH
64356: LD_INT 0
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PUSH
64363: LD_INT 1
64365: NEG
64366: PUSH
64367: LD_INT 1
64369: NEG
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PUSH
64375: LD_INT 1
64377: NEG
64378: PUSH
64379: LD_INT 2
64381: NEG
64382: PUSH
64383: EMPTY
64384: LIST
64385: LIST
64386: PUSH
64387: LD_INT 0
64389: PUSH
64390: LD_INT 2
64392: NEG
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: PUSH
64398: LD_INT 1
64400: PUSH
64401: LD_INT 1
64403: NEG
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 2
64411: PUSH
64412: LD_INT 1
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: LD_INT 2
64421: PUSH
64422: LD_INT 2
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: PUSH
64429: LD_INT 1
64431: PUSH
64432: LD_INT 2
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: LD_INT 0
64441: PUSH
64442: LD_INT 2
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: PUSH
64449: LD_INT 1
64451: NEG
64452: PUSH
64453: LD_INT 1
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: PUSH
64460: LD_INT 2
64462: NEG
64463: PUSH
64464: LD_INT 1
64466: NEG
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: LD_INT 2
64474: NEG
64475: PUSH
64476: LD_INT 2
64478: NEG
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: LD_INT 2
64486: NEG
64487: PUSH
64488: LD_INT 3
64490: NEG
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PUSH
64496: LD_INT 1
64498: NEG
64499: PUSH
64500: LD_INT 3
64502: NEG
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: LD_INT 0
64510: PUSH
64511: LD_INT 3
64513: NEG
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: LD_INT 1
64521: PUSH
64522: LD_INT 2
64524: NEG
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: LD_INT 3
64532: PUSH
64533: LD_INT 2
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: PUSH
64540: LD_INT 3
64542: PUSH
64543: LD_INT 3
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: PUSH
64550: LD_INT 2
64552: PUSH
64553: LD_INT 3
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: LD_INT 1
64562: PUSH
64563: LD_INT 3
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: LD_INT 0
64572: PUSH
64573: LD_INT 3
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: PUSH
64580: LD_INT 1
64582: NEG
64583: PUSH
64584: LD_INT 2
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: PUSH
64591: LD_INT 3
64593: NEG
64594: PUSH
64595: LD_INT 2
64597: NEG
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 3
64605: NEG
64606: PUSH
64607: LD_INT 3
64609: NEG
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: LIST
64625: LIST
64626: LIST
64627: LIST
64628: LIST
64629: LIST
64630: LIST
64631: LIST
64632: LIST
64633: LIST
64634: LIST
64635: LIST
64636: LIST
64637: LIST
64638: LIST
64639: LIST
64640: LIST
64641: LIST
64642: LIST
64643: LIST
64644: LIST
64645: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64646: LD_ADDR_VAR 0 46
64650: PUSH
64651: LD_INT 0
64653: PUSH
64654: LD_INT 0
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: PUSH
64661: LD_INT 0
64663: PUSH
64664: LD_INT 1
64666: NEG
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: PUSH
64672: LD_INT 1
64674: PUSH
64675: LD_INT 0
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: LD_INT 1
64684: PUSH
64685: LD_INT 1
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: PUSH
64692: LD_INT 0
64694: PUSH
64695: LD_INT 1
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: PUSH
64702: LD_INT 1
64704: NEG
64705: PUSH
64706: LD_INT 0
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: PUSH
64713: LD_INT 1
64715: NEG
64716: PUSH
64717: LD_INT 1
64719: NEG
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: LD_INT 1
64727: NEG
64728: PUSH
64729: LD_INT 2
64731: NEG
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: PUSH
64737: LD_INT 0
64739: PUSH
64740: LD_INT 2
64742: NEG
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: PUSH
64748: LD_INT 1
64750: PUSH
64751: LD_INT 1
64753: NEG
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: LD_INT 2
64761: PUSH
64762: LD_INT 0
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: PUSH
64769: LD_INT 2
64771: PUSH
64772: LD_INT 1
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: PUSH
64779: LD_INT 1
64781: PUSH
64782: LD_INT 2
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: LD_INT 0
64791: PUSH
64792: LD_INT 2
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: PUSH
64799: LD_INT 1
64801: NEG
64802: PUSH
64803: LD_INT 1
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: LD_INT 2
64812: NEG
64813: PUSH
64814: LD_INT 0
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: LD_INT 2
64823: NEG
64824: PUSH
64825: LD_INT 1
64827: NEG
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 1
64835: NEG
64836: PUSH
64837: LD_INT 3
64839: NEG
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PUSH
64845: LD_INT 0
64847: PUSH
64848: LD_INT 3
64850: NEG
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: LD_INT 1
64858: PUSH
64859: LD_INT 2
64861: NEG
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: PUSH
64867: LD_INT 2
64869: PUSH
64870: LD_INT 1
64872: NEG
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: LD_INT 3
64880: PUSH
64881: LD_INT 0
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: PUSH
64888: LD_INT 3
64890: PUSH
64891: LD_INT 1
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: PUSH
64898: LD_INT 1
64900: PUSH
64901: LD_INT 3
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PUSH
64908: LD_INT 0
64910: PUSH
64911: LD_INT 3
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 1
64920: NEG
64921: PUSH
64922: LD_INT 2
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 2
64931: NEG
64932: PUSH
64933: LD_INT 1
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: LD_INT 3
64942: NEG
64943: PUSH
64944: LD_INT 0
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 3
64953: NEG
64954: PUSH
64955: LD_INT 1
64957: NEG
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: LIST
64973: LIST
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64994: LD_ADDR_VAR 0 47
64998: PUSH
64999: LD_INT 0
65001: PUSH
65002: LD_INT 0
65004: PUSH
65005: EMPTY
65006: LIST
65007: LIST
65008: PUSH
65009: LD_INT 0
65011: PUSH
65012: LD_INT 1
65014: NEG
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: LD_INT 1
65022: PUSH
65023: LD_INT 0
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: PUSH
65030: LD_INT 1
65032: PUSH
65033: LD_INT 1
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 0
65042: PUSH
65043: LD_INT 1
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 1
65052: NEG
65053: PUSH
65054: LD_INT 0
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PUSH
65061: LD_INT 1
65063: NEG
65064: PUSH
65065: LD_INT 1
65067: NEG
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: PUSH
65073: LD_INT 1
65075: NEG
65076: PUSH
65077: LD_INT 2
65079: NEG
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: PUSH
65085: LD_INT 0
65087: PUSH
65088: LD_INT 2
65090: NEG
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: PUSH
65096: LD_INT 1
65098: PUSH
65099: LD_INT 1
65101: NEG
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: PUSH
65107: LD_INT 2
65109: NEG
65110: PUSH
65111: LD_INT 1
65113: NEG
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: PUSH
65119: LD_INT 2
65121: NEG
65122: PUSH
65123: LD_INT 2
65125: NEG
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65145: LD_ADDR_VAR 0 48
65149: PUSH
65150: LD_INT 0
65152: PUSH
65153: LD_INT 0
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: PUSH
65160: LD_INT 0
65162: PUSH
65163: LD_INT 1
65165: NEG
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: PUSH
65171: LD_INT 1
65173: PUSH
65174: LD_INT 0
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: LD_INT 1
65183: PUSH
65184: LD_INT 1
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 0
65193: PUSH
65194: LD_INT 1
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PUSH
65201: LD_INT 1
65203: NEG
65204: PUSH
65205: LD_INT 0
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PUSH
65212: LD_INT 1
65214: NEG
65215: PUSH
65216: LD_INT 1
65218: NEG
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 1
65226: NEG
65227: PUSH
65228: LD_INT 2
65230: NEG
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: LD_INT 0
65238: PUSH
65239: LD_INT 2
65241: NEG
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 1
65249: PUSH
65250: LD_INT 1
65252: NEG
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: PUSH
65258: LD_INT 2
65260: PUSH
65261: LD_INT 0
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: PUSH
65268: LD_INT 2
65270: PUSH
65271: LD_INT 1
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: LIST
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65292: LD_ADDR_VAR 0 49
65296: PUSH
65297: LD_INT 0
65299: PUSH
65300: LD_INT 0
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: PUSH
65307: LD_INT 0
65309: PUSH
65310: LD_INT 1
65312: NEG
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PUSH
65318: LD_INT 1
65320: PUSH
65321: LD_INT 0
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_INT 1
65330: PUSH
65331: LD_INT 1
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: PUSH
65338: LD_INT 0
65340: PUSH
65341: LD_INT 1
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PUSH
65348: LD_INT 1
65350: NEG
65351: PUSH
65352: LD_INT 0
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: PUSH
65359: LD_INT 1
65361: NEG
65362: PUSH
65363: LD_INT 1
65365: NEG
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: LD_INT 1
65373: PUSH
65374: LD_INT 1
65376: NEG
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: PUSH
65382: LD_INT 2
65384: PUSH
65385: LD_INT 0
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 2
65394: PUSH
65395: LD_INT 1
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: LD_INT 2
65404: PUSH
65405: LD_INT 2
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 1
65414: PUSH
65415: LD_INT 2
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: LIST
65426: LIST
65427: LIST
65428: LIST
65429: LIST
65430: LIST
65431: LIST
65432: LIST
65433: LIST
65434: LIST
65435: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65436: LD_ADDR_VAR 0 50
65440: PUSH
65441: LD_INT 0
65443: PUSH
65444: LD_INT 0
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: PUSH
65451: LD_INT 0
65453: PUSH
65454: LD_INT 1
65456: NEG
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: PUSH
65462: LD_INT 1
65464: PUSH
65465: LD_INT 0
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: PUSH
65472: LD_INT 1
65474: PUSH
65475: LD_INT 1
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: PUSH
65482: LD_INT 0
65484: PUSH
65485: LD_INT 1
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: LD_INT 1
65494: NEG
65495: PUSH
65496: LD_INT 0
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: LD_INT 1
65505: NEG
65506: PUSH
65507: LD_INT 1
65509: NEG
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: LD_INT 2
65517: PUSH
65518: LD_INT 1
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: LD_INT 2
65527: PUSH
65528: LD_INT 2
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 1
65537: PUSH
65538: LD_INT 2
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: PUSH
65545: LD_INT 0
65547: PUSH
65548: LD_INT 2
65550: PUSH
65551: EMPTY
65552: LIST
65553: LIST
65554: PUSH
65555: LD_INT 1
65557: NEG
65558: PUSH
65559: LD_INT 1
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: LIST
65572: LIST
65573: LIST
65574: LIST
65575: LIST
65576: LIST
65577: LIST
65578: LIST
65579: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65580: LD_ADDR_VAR 0 51
65584: PUSH
65585: LD_INT 0
65587: PUSH
65588: LD_INT 0
65590: PUSH
65591: EMPTY
65592: LIST
65593: LIST
65594: PUSH
65595: LD_INT 0
65597: PUSH
65598: LD_INT 1
65600: NEG
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: PUSH
65606: LD_INT 1
65608: PUSH
65609: LD_INT 0
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: LD_INT 1
65618: PUSH
65619: LD_INT 1
65621: PUSH
65622: EMPTY
65623: LIST
65624: LIST
65625: PUSH
65626: LD_INT 0
65628: PUSH
65629: LD_INT 1
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: PUSH
65636: LD_INT 1
65638: NEG
65639: PUSH
65640: LD_INT 0
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: PUSH
65647: LD_INT 1
65649: NEG
65650: PUSH
65651: LD_INT 1
65653: NEG
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: PUSH
65659: LD_INT 1
65661: PUSH
65662: LD_INT 2
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: LD_INT 0
65671: PUSH
65672: LD_INT 2
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: PUSH
65679: LD_INT 1
65681: NEG
65682: PUSH
65683: LD_INT 1
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: PUSH
65690: LD_INT 2
65692: NEG
65693: PUSH
65694: LD_INT 0
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: PUSH
65701: LD_INT 2
65703: NEG
65704: PUSH
65705: LD_INT 1
65707: NEG
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: LIST
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: LIST
65722: LIST
65723: LIST
65724: LIST
65725: LIST
65726: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65727: LD_ADDR_VAR 0 52
65731: PUSH
65732: LD_INT 0
65734: PUSH
65735: LD_INT 0
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: PUSH
65742: LD_INT 0
65744: PUSH
65745: LD_INT 1
65747: NEG
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: PUSH
65753: LD_INT 1
65755: PUSH
65756: LD_INT 0
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: PUSH
65763: LD_INT 1
65765: PUSH
65766: LD_INT 1
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: PUSH
65773: LD_INT 0
65775: PUSH
65776: LD_INT 1
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: PUSH
65783: LD_INT 1
65785: NEG
65786: PUSH
65787: LD_INT 0
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: PUSH
65794: LD_INT 1
65796: NEG
65797: PUSH
65798: LD_INT 1
65800: NEG
65801: PUSH
65802: EMPTY
65803: LIST
65804: LIST
65805: PUSH
65806: LD_INT 1
65808: NEG
65809: PUSH
65810: LD_INT 2
65812: NEG
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: PUSH
65818: LD_INT 1
65820: NEG
65821: PUSH
65822: LD_INT 1
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: PUSH
65829: LD_INT 2
65831: NEG
65832: PUSH
65833: LD_INT 0
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 2
65842: NEG
65843: PUSH
65844: LD_INT 1
65846: NEG
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PUSH
65852: LD_INT 2
65854: NEG
65855: PUSH
65856: LD_INT 2
65858: NEG
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: LIST
65868: LIST
65869: LIST
65870: LIST
65871: LIST
65872: LIST
65873: LIST
65874: LIST
65875: LIST
65876: LIST
65877: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65878: LD_ADDR_VAR 0 53
65882: PUSH
65883: LD_INT 0
65885: PUSH
65886: LD_INT 0
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: PUSH
65893: LD_INT 0
65895: PUSH
65896: LD_INT 1
65898: NEG
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PUSH
65904: LD_INT 1
65906: PUSH
65907: LD_INT 0
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 1
65916: PUSH
65917: LD_INT 1
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: LD_INT 0
65926: PUSH
65927: LD_INT 1
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: PUSH
65934: LD_INT 1
65936: NEG
65937: PUSH
65938: LD_INT 0
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: PUSH
65945: LD_INT 1
65947: NEG
65948: PUSH
65949: LD_INT 1
65951: NEG
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: PUSH
65957: LD_INT 1
65959: NEG
65960: PUSH
65961: LD_INT 2
65963: NEG
65964: PUSH
65965: EMPTY
65966: LIST
65967: LIST
65968: PUSH
65969: LD_INT 0
65971: PUSH
65972: LD_INT 2
65974: NEG
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: PUSH
65980: LD_INT 1
65982: PUSH
65983: LD_INT 1
65985: NEG
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: PUSH
65991: LD_INT 2
65993: PUSH
65994: LD_INT 0
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: PUSH
66001: LD_INT 2
66003: PUSH
66004: LD_INT 1
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: PUSH
66011: LD_INT 2
66013: PUSH
66014: LD_INT 2
66016: PUSH
66017: EMPTY
66018: LIST
66019: LIST
66020: PUSH
66021: LD_INT 1
66023: PUSH
66024: LD_INT 2
66026: PUSH
66027: EMPTY
66028: LIST
66029: LIST
66030: PUSH
66031: LD_INT 0
66033: PUSH
66034: LD_INT 2
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: PUSH
66041: LD_INT 1
66043: NEG
66044: PUSH
66045: LD_INT 1
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PUSH
66052: LD_INT 2
66054: NEG
66055: PUSH
66056: LD_INT 0
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: LD_INT 2
66065: NEG
66066: PUSH
66067: LD_INT 1
66069: NEG
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: PUSH
66075: LD_INT 2
66077: NEG
66078: PUSH
66079: LD_INT 2
66081: NEG
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66108: LD_ADDR_VAR 0 54
66112: PUSH
66113: LD_INT 0
66115: PUSH
66116: LD_INT 0
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: PUSH
66123: LD_INT 0
66125: PUSH
66126: LD_INT 1
66128: NEG
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: PUSH
66134: LD_INT 1
66136: PUSH
66137: LD_INT 0
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: PUSH
66144: LD_INT 1
66146: PUSH
66147: LD_INT 1
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: PUSH
66154: LD_INT 0
66156: PUSH
66157: LD_INT 1
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: PUSH
66164: LD_INT 1
66166: NEG
66167: PUSH
66168: LD_INT 0
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: PUSH
66175: LD_INT 1
66177: NEG
66178: PUSH
66179: LD_INT 1
66181: NEG
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: PUSH
66187: LD_INT 1
66189: NEG
66190: PUSH
66191: LD_INT 2
66193: NEG
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: LD_INT 0
66201: PUSH
66202: LD_INT 2
66204: NEG
66205: PUSH
66206: EMPTY
66207: LIST
66208: LIST
66209: PUSH
66210: LD_INT 1
66212: PUSH
66213: LD_INT 1
66215: NEG
66216: PUSH
66217: EMPTY
66218: LIST
66219: LIST
66220: PUSH
66221: LD_INT 2
66223: PUSH
66224: LD_INT 0
66226: PUSH
66227: EMPTY
66228: LIST
66229: LIST
66230: PUSH
66231: LD_INT 2
66233: PUSH
66234: LD_INT 1
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: PUSH
66241: LD_INT 2
66243: PUSH
66244: LD_INT 2
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: PUSH
66251: LD_INT 1
66253: PUSH
66254: LD_INT 2
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: PUSH
66261: LD_INT 0
66263: PUSH
66264: LD_INT 2
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: PUSH
66271: LD_INT 1
66273: NEG
66274: PUSH
66275: LD_INT 1
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: PUSH
66282: LD_INT 2
66284: NEG
66285: PUSH
66286: LD_INT 0
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: PUSH
66293: LD_INT 2
66295: NEG
66296: PUSH
66297: LD_INT 1
66299: NEG
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: PUSH
66305: LD_INT 2
66307: NEG
66308: PUSH
66309: LD_INT 2
66311: NEG
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: LIST
66321: LIST
66322: LIST
66323: LIST
66324: LIST
66325: LIST
66326: LIST
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: LIST
66332: LIST
66333: LIST
66334: LIST
66335: LIST
66336: LIST
66337: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66338: LD_ADDR_VAR 0 55
66342: PUSH
66343: LD_INT 0
66345: PUSH
66346: LD_INT 0
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: PUSH
66353: LD_INT 0
66355: PUSH
66356: LD_INT 1
66358: NEG
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: LD_INT 1
66366: PUSH
66367: LD_INT 0
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 1
66376: PUSH
66377: LD_INT 1
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: LD_INT 0
66386: PUSH
66387: LD_INT 1
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: PUSH
66394: LD_INT 1
66396: NEG
66397: PUSH
66398: LD_INT 0
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: LD_INT 1
66407: NEG
66408: PUSH
66409: LD_INT 1
66411: NEG
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PUSH
66417: LD_INT 1
66419: NEG
66420: PUSH
66421: LD_INT 2
66423: NEG
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: PUSH
66429: LD_INT 0
66431: PUSH
66432: LD_INT 2
66434: NEG
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PUSH
66440: LD_INT 1
66442: PUSH
66443: LD_INT 1
66445: NEG
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PUSH
66451: LD_INT 2
66453: PUSH
66454: LD_INT 0
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: PUSH
66461: LD_INT 2
66463: PUSH
66464: LD_INT 1
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: PUSH
66471: LD_INT 2
66473: PUSH
66474: LD_INT 2
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: PUSH
66481: LD_INT 1
66483: PUSH
66484: LD_INT 2
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: PUSH
66491: LD_INT 0
66493: PUSH
66494: LD_INT 2
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: PUSH
66501: LD_INT 1
66503: NEG
66504: PUSH
66505: LD_INT 1
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: LD_INT 2
66514: NEG
66515: PUSH
66516: LD_INT 0
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 2
66525: NEG
66526: PUSH
66527: LD_INT 1
66529: NEG
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: LD_INT 2
66537: NEG
66538: PUSH
66539: LD_INT 2
66541: NEG
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: LIST
66551: LIST
66552: LIST
66553: LIST
66554: LIST
66555: LIST
66556: LIST
66557: LIST
66558: LIST
66559: LIST
66560: LIST
66561: LIST
66562: LIST
66563: LIST
66564: LIST
66565: LIST
66566: LIST
66567: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66568: LD_ADDR_VAR 0 56
66572: PUSH
66573: LD_INT 0
66575: PUSH
66576: LD_INT 0
66578: PUSH
66579: EMPTY
66580: LIST
66581: LIST
66582: PUSH
66583: LD_INT 0
66585: PUSH
66586: LD_INT 1
66588: NEG
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: LD_INT 1
66596: PUSH
66597: LD_INT 0
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: PUSH
66604: LD_INT 1
66606: PUSH
66607: LD_INT 1
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: LD_INT 0
66616: PUSH
66617: LD_INT 1
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: LD_INT 1
66626: NEG
66627: PUSH
66628: LD_INT 0
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: PUSH
66635: LD_INT 1
66637: NEG
66638: PUSH
66639: LD_INT 1
66641: NEG
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: PUSH
66647: LD_INT 1
66649: NEG
66650: PUSH
66651: LD_INT 2
66653: NEG
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: PUSH
66659: LD_INT 0
66661: PUSH
66662: LD_INT 2
66664: NEG
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: PUSH
66670: LD_INT 1
66672: PUSH
66673: LD_INT 1
66675: NEG
66676: PUSH
66677: EMPTY
66678: LIST
66679: LIST
66680: PUSH
66681: LD_INT 2
66683: PUSH
66684: LD_INT 0
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: PUSH
66691: LD_INT 2
66693: PUSH
66694: LD_INT 1
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: LD_INT 2
66703: PUSH
66704: LD_INT 2
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: LD_INT 1
66713: PUSH
66714: LD_INT 2
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: PUSH
66721: LD_INT 0
66723: PUSH
66724: LD_INT 2
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: LD_INT 1
66733: NEG
66734: PUSH
66735: LD_INT 1
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: PUSH
66742: LD_INT 2
66744: NEG
66745: PUSH
66746: LD_INT 0
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: LD_INT 2
66755: NEG
66756: PUSH
66757: LD_INT 1
66759: NEG
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: PUSH
66765: LD_INT 2
66767: NEG
66768: PUSH
66769: LD_INT 2
66771: NEG
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: PUSH
66777: EMPTY
66778: LIST
66779: LIST
66780: LIST
66781: LIST
66782: LIST
66783: LIST
66784: LIST
66785: LIST
66786: LIST
66787: LIST
66788: LIST
66789: LIST
66790: LIST
66791: LIST
66792: LIST
66793: LIST
66794: LIST
66795: LIST
66796: LIST
66797: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66798: LD_ADDR_VAR 0 57
66802: PUSH
66803: LD_INT 0
66805: PUSH
66806: LD_INT 0
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: LD_INT 0
66815: PUSH
66816: LD_INT 1
66818: NEG
66819: PUSH
66820: EMPTY
66821: LIST
66822: LIST
66823: PUSH
66824: LD_INT 1
66826: PUSH
66827: LD_INT 0
66829: PUSH
66830: EMPTY
66831: LIST
66832: LIST
66833: PUSH
66834: LD_INT 1
66836: PUSH
66837: LD_INT 1
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: PUSH
66844: LD_INT 0
66846: PUSH
66847: LD_INT 1
66849: PUSH
66850: EMPTY
66851: LIST
66852: LIST
66853: PUSH
66854: LD_INT 1
66856: NEG
66857: PUSH
66858: LD_INT 0
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: PUSH
66865: LD_INT 1
66867: NEG
66868: PUSH
66869: LD_INT 1
66871: NEG
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: LD_INT 1
66879: NEG
66880: PUSH
66881: LD_INT 2
66883: NEG
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: LD_INT 0
66891: PUSH
66892: LD_INT 2
66894: NEG
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 1
66902: PUSH
66903: LD_INT 1
66905: NEG
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: PUSH
66911: LD_INT 2
66913: PUSH
66914: LD_INT 0
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: LD_INT 2
66923: PUSH
66924: LD_INT 1
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: PUSH
66931: LD_INT 2
66933: PUSH
66934: LD_INT 2
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: PUSH
66941: LD_INT 1
66943: PUSH
66944: LD_INT 2
66946: PUSH
66947: EMPTY
66948: LIST
66949: LIST
66950: PUSH
66951: LD_INT 0
66953: PUSH
66954: LD_INT 2
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: PUSH
66961: LD_INT 1
66963: NEG
66964: PUSH
66965: LD_INT 1
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 2
66974: NEG
66975: PUSH
66976: LD_INT 0
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: PUSH
66983: LD_INT 2
66985: NEG
66986: PUSH
66987: LD_INT 1
66989: NEG
66990: PUSH
66991: EMPTY
66992: LIST
66993: LIST
66994: PUSH
66995: LD_INT 2
66997: NEG
66998: PUSH
66999: LD_INT 2
67001: NEG
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: LIST
67011: LIST
67012: LIST
67013: LIST
67014: LIST
67015: LIST
67016: LIST
67017: LIST
67018: LIST
67019: LIST
67020: LIST
67021: LIST
67022: LIST
67023: LIST
67024: LIST
67025: LIST
67026: LIST
67027: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67028: LD_ADDR_VAR 0 58
67032: PUSH
67033: LD_INT 0
67035: PUSH
67036: LD_INT 0
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: PUSH
67043: LD_INT 0
67045: PUSH
67046: LD_INT 1
67048: NEG
67049: PUSH
67050: EMPTY
67051: LIST
67052: LIST
67053: PUSH
67054: LD_INT 1
67056: PUSH
67057: LD_INT 0
67059: PUSH
67060: EMPTY
67061: LIST
67062: LIST
67063: PUSH
67064: LD_INT 1
67066: PUSH
67067: LD_INT 1
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: PUSH
67074: LD_INT 0
67076: PUSH
67077: LD_INT 1
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 1
67086: NEG
67087: PUSH
67088: LD_INT 0
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: LD_INT 1
67097: NEG
67098: PUSH
67099: LD_INT 1
67101: NEG
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: PUSH
67107: LD_INT 1
67109: NEG
67110: PUSH
67111: LD_INT 2
67113: NEG
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: PUSH
67119: LD_INT 0
67121: PUSH
67122: LD_INT 2
67124: NEG
67125: PUSH
67126: EMPTY
67127: LIST
67128: LIST
67129: PUSH
67130: LD_INT 1
67132: PUSH
67133: LD_INT 1
67135: NEG
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: PUSH
67141: LD_INT 2
67143: PUSH
67144: LD_INT 0
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: PUSH
67151: LD_INT 2
67153: PUSH
67154: LD_INT 1
67156: PUSH
67157: EMPTY
67158: LIST
67159: LIST
67160: PUSH
67161: LD_INT 2
67163: PUSH
67164: LD_INT 2
67166: PUSH
67167: EMPTY
67168: LIST
67169: LIST
67170: PUSH
67171: LD_INT 1
67173: PUSH
67174: LD_INT 2
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: LD_INT 0
67183: PUSH
67184: LD_INT 2
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: PUSH
67191: LD_INT 1
67193: NEG
67194: PUSH
67195: LD_INT 1
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: PUSH
67202: LD_INT 2
67204: NEG
67205: PUSH
67206: LD_INT 0
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: PUSH
67213: LD_INT 2
67215: NEG
67216: PUSH
67217: LD_INT 1
67219: NEG
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: LD_INT 2
67227: NEG
67228: PUSH
67229: LD_INT 2
67231: NEG
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PUSH
67237: EMPTY
67238: LIST
67239: LIST
67240: LIST
67241: LIST
67242: LIST
67243: LIST
67244: LIST
67245: LIST
67246: LIST
67247: LIST
67248: LIST
67249: LIST
67250: LIST
67251: LIST
67252: LIST
67253: LIST
67254: LIST
67255: LIST
67256: LIST
67257: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67258: LD_ADDR_VAR 0 59
67262: PUSH
67263: LD_INT 0
67265: PUSH
67266: LD_INT 0
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_INT 0
67275: PUSH
67276: LD_INT 1
67278: NEG
67279: PUSH
67280: EMPTY
67281: LIST
67282: LIST
67283: PUSH
67284: LD_INT 1
67286: PUSH
67287: LD_INT 0
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: PUSH
67294: LD_INT 1
67296: PUSH
67297: LD_INT 1
67299: PUSH
67300: EMPTY
67301: LIST
67302: LIST
67303: PUSH
67304: LD_INT 0
67306: PUSH
67307: LD_INT 1
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: PUSH
67314: LD_INT 1
67316: NEG
67317: PUSH
67318: LD_INT 0
67320: PUSH
67321: EMPTY
67322: LIST
67323: LIST
67324: PUSH
67325: LD_INT 1
67327: NEG
67328: PUSH
67329: LD_INT 1
67331: NEG
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: PUSH
67337: EMPTY
67338: LIST
67339: LIST
67340: LIST
67341: LIST
67342: LIST
67343: LIST
67344: LIST
67345: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67346: LD_ADDR_VAR 0 60
67350: PUSH
67351: LD_INT 0
67353: PUSH
67354: LD_INT 0
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: PUSH
67361: LD_INT 0
67363: PUSH
67364: LD_INT 1
67366: NEG
67367: PUSH
67368: EMPTY
67369: LIST
67370: LIST
67371: PUSH
67372: LD_INT 1
67374: PUSH
67375: LD_INT 0
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: PUSH
67382: LD_INT 1
67384: PUSH
67385: LD_INT 1
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: PUSH
67392: LD_INT 0
67394: PUSH
67395: LD_INT 1
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: PUSH
67402: LD_INT 1
67404: NEG
67405: PUSH
67406: LD_INT 0
67408: PUSH
67409: EMPTY
67410: LIST
67411: LIST
67412: PUSH
67413: LD_INT 1
67415: NEG
67416: PUSH
67417: LD_INT 1
67419: NEG
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: PUSH
67425: EMPTY
67426: LIST
67427: LIST
67428: LIST
67429: LIST
67430: LIST
67431: LIST
67432: LIST
67433: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67434: LD_ADDR_VAR 0 61
67438: PUSH
67439: LD_INT 0
67441: PUSH
67442: LD_INT 0
67444: PUSH
67445: EMPTY
67446: LIST
67447: LIST
67448: PUSH
67449: LD_INT 0
67451: PUSH
67452: LD_INT 1
67454: NEG
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: PUSH
67460: LD_INT 1
67462: PUSH
67463: LD_INT 0
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: PUSH
67470: LD_INT 1
67472: PUSH
67473: LD_INT 1
67475: PUSH
67476: EMPTY
67477: LIST
67478: LIST
67479: PUSH
67480: LD_INT 0
67482: PUSH
67483: LD_INT 1
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: PUSH
67490: LD_INT 1
67492: NEG
67493: PUSH
67494: LD_INT 0
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PUSH
67501: LD_INT 1
67503: NEG
67504: PUSH
67505: LD_INT 1
67507: NEG
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: LIST
67517: LIST
67518: LIST
67519: LIST
67520: LIST
67521: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67522: LD_ADDR_VAR 0 62
67526: PUSH
67527: LD_INT 0
67529: PUSH
67530: LD_INT 0
67532: PUSH
67533: EMPTY
67534: LIST
67535: LIST
67536: PUSH
67537: LD_INT 0
67539: PUSH
67540: LD_INT 1
67542: NEG
67543: PUSH
67544: EMPTY
67545: LIST
67546: LIST
67547: PUSH
67548: LD_INT 1
67550: PUSH
67551: LD_INT 0
67553: PUSH
67554: EMPTY
67555: LIST
67556: LIST
67557: PUSH
67558: LD_INT 1
67560: PUSH
67561: LD_INT 1
67563: PUSH
67564: EMPTY
67565: LIST
67566: LIST
67567: PUSH
67568: LD_INT 0
67570: PUSH
67571: LD_INT 1
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: PUSH
67578: LD_INT 1
67580: NEG
67581: PUSH
67582: LD_INT 0
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: PUSH
67589: LD_INT 1
67591: NEG
67592: PUSH
67593: LD_INT 1
67595: NEG
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: PUSH
67601: EMPTY
67602: LIST
67603: LIST
67604: LIST
67605: LIST
67606: LIST
67607: LIST
67608: LIST
67609: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67610: LD_ADDR_VAR 0 63
67614: PUSH
67615: LD_INT 0
67617: PUSH
67618: LD_INT 0
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: PUSH
67625: LD_INT 0
67627: PUSH
67628: LD_INT 1
67630: NEG
67631: PUSH
67632: EMPTY
67633: LIST
67634: LIST
67635: PUSH
67636: LD_INT 1
67638: PUSH
67639: LD_INT 0
67641: PUSH
67642: EMPTY
67643: LIST
67644: LIST
67645: PUSH
67646: LD_INT 1
67648: PUSH
67649: LD_INT 1
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: PUSH
67656: LD_INT 0
67658: PUSH
67659: LD_INT 1
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: PUSH
67666: LD_INT 1
67668: NEG
67669: PUSH
67670: LD_INT 0
67672: PUSH
67673: EMPTY
67674: LIST
67675: LIST
67676: PUSH
67677: LD_INT 1
67679: NEG
67680: PUSH
67681: LD_INT 1
67683: NEG
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: LIST
67693: LIST
67694: LIST
67695: LIST
67696: LIST
67697: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67698: LD_ADDR_VAR 0 64
67702: PUSH
67703: LD_INT 0
67705: PUSH
67706: LD_INT 0
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: PUSH
67713: LD_INT 0
67715: PUSH
67716: LD_INT 1
67718: NEG
67719: PUSH
67720: EMPTY
67721: LIST
67722: LIST
67723: PUSH
67724: LD_INT 1
67726: PUSH
67727: LD_INT 0
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: PUSH
67734: LD_INT 1
67736: PUSH
67737: LD_INT 1
67739: PUSH
67740: EMPTY
67741: LIST
67742: LIST
67743: PUSH
67744: LD_INT 0
67746: PUSH
67747: LD_INT 1
67749: PUSH
67750: EMPTY
67751: LIST
67752: LIST
67753: PUSH
67754: LD_INT 1
67756: NEG
67757: PUSH
67758: LD_INT 0
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: PUSH
67765: LD_INT 1
67767: NEG
67768: PUSH
67769: LD_INT 1
67771: NEG
67772: PUSH
67773: EMPTY
67774: LIST
67775: LIST
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: LIST
67781: LIST
67782: LIST
67783: LIST
67784: LIST
67785: ST_TO_ADDR
// end ; 1 :
67786: GO 73683
67788: LD_INT 1
67790: DOUBLE
67791: EQUAL
67792: IFTRUE 67796
67794: GO 70419
67796: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67797: LD_ADDR_VAR 0 11
67801: PUSH
67802: LD_INT 1
67804: NEG
67805: PUSH
67806: LD_INT 3
67808: NEG
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: PUSH
67814: LD_INT 0
67816: PUSH
67817: LD_INT 3
67819: NEG
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: PUSH
67825: LD_INT 1
67827: PUSH
67828: LD_INT 2
67830: NEG
67831: PUSH
67832: EMPTY
67833: LIST
67834: LIST
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: LIST
67840: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67841: LD_ADDR_VAR 0 12
67845: PUSH
67846: LD_INT 2
67848: PUSH
67849: LD_INT 1
67851: NEG
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: PUSH
67857: LD_INT 3
67859: PUSH
67860: LD_INT 0
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: LD_INT 3
67869: PUSH
67870: LD_INT 1
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: PUSH
67877: EMPTY
67878: LIST
67879: LIST
67880: LIST
67881: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67882: LD_ADDR_VAR 0 13
67886: PUSH
67887: LD_INT 3
67889: PUSH
67890: LD_INT 2
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: PUSH
67897: LD_INT 3
67899: PUSH
67900: LD_INT 3
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: LD_INT 2
67909: PUSH
67910: LD_INT 3
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: LIST
67921: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67922: LD_ADDR_VAR 0 14
67926: PUSH
67927: LD_INT 1
67929: PUSH
67930: LD_INT 3
67932: PUSH
67933: EMPTY
67934: LIST
67935: LIST
67936: PUSH
67937: LD_INT 0
67939: PUSH
67940: LD_INT 3
67942: PUSH
67943: EMPTY
67944: LIST
67945: LIST
67946: PUSH
67947: LD_INT 1
67949: NEG
67950: PUSH
67951: LD_INT 2
67953: PUSH
67954: EMPTY
67955: LIST
67956: LIST
67957: PUSH
67958: EMPTY
67959: LIST
67960: LIST
67961: LIST
67962: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67963: LD_ADDR_VAR 0 15
67967: PUSH
67968: LD_INT 2
67970: NEG
67971: PUSH
67972: LD_INT 1
67974: PUSH
67975: EMPTY
67976: LIST
67977: LIST
67978: PUSH
67979: LD_INT 3
67981: NEG
67982: PUSH
67983: LD_INT 0
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PUSH
67990: LD_INT 3
67992: NEG
67993: PUSH
67994: LD_INT 1
67996: NEG
67997: PUSH
67998: EMPTY
67999: LIST
68000: LIST
68001: PUSH
68002: EMPTY
68003: LIST
68004: LIST
68005: LIST
68006: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68007: LD_ADDR_VAR 0 16
68011: PUSH
68012: LD_INT 2
68014: NEG
68015: PUSH
68016: LD_INT 3
68018: NEG
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PUSH
68024: LD_INT 3
68026: NEG
68027: PUSH
68028: LD_INT 2
68030: NEG
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: PUSH
68036: LD_INT 3
68038: NEG
68039: PUSH
68040: LD_INT 3
68042: NEG
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: LIST
68052: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68053: LD_ADDR_VAR 0 17
68057: PUSH
68058: LD_INT 1
68060: NEG
68061: PUSH
68062: LD_INT 3
68064: NEG
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: PUSH
68070: LD_INT 0
68072: PUSH
68073: LD_INT 3
68075: NEG
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: PUSH
68081: LD_INT 1
68083: PUSH
68084: LD_INT 2
68086: NEG
68087: PUSH
68088: EMPTY
68089: LIST
68090: LIST
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: LIST
68096: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68097: LD_ADDR_VAR 0 18
68101: PUSH
68102: LD_INT 2
68104: PUSH
68105: LD_INT 1
68107: NEG
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: PUSH
68113: LD_INT 3
68115: PUSH
68116: LD_INT 0
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: PUSH
68123: LD_INT 3
68125: PUSH
68126: LD_INT 1
68128: PUSH
68129: EMPTY
68130: LIST
68131: LIST
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: LIST
68137: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68138: LD_ADDR_VAR 0 19
68142: PUSH
68143: LD_INT 3
68145: PUSH
68146: LD_INT 2
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: PUSH
68153: LD_INT 3
68155: PUSH
68156: LD_INT 3
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: PUSH
68163: LD_INT 2
68165: PUSH
68166: LD_INT 3
68168: PUSH
68169: EMPTY
68170: LIST
68171: LIST
68172: PUSH
68173: EMPTY
68174: LIST
68175: LIST
68176: LIST
68177: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68178: LD_ADDR_VAR 0 20
68182: PUSH
68183: LD_INT 1
68185: PUSH
68186: LD_INT 3
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: PUSH
68193: LD_INT 0
68195: PUSH
68196: LD_INT 3
68198: PUSH
68199: EMPTY
68200: LIST
68201: LIST
68202: PUSH
68203: LD_INT 1
68205: NEG
68206: PUSH
68207: LD_INT 2
68209: PUSH
68210: EMPTY
68211: LIST
68212: LIST
68213: PUSH
68214: EMPTY
68215: LIST
68216: LIST
68217: LIST
68218: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68219: LD_ADDR_VAR 0 21
68223: PUSH
68224: LD_INT 2
68226: NEG
68227: PUSH
68228: LD_INT 1
68230: PUSH
68231: EMPTY
68232: LIST
68233: LIST
68234: PUSH
68235: LD_INT 3
68237: NEG
68238: PUSH
68239: LD_INT 0
68241: PUSH
68242: EMPTY
68243: LIST
68244: LIST
68245: PUSH
68246: LD_INT 3
68248: NEG
68249: PUSH
68250: LD_INT 1
68252: NEG
68253: PUSH
68254: EMPTY
68255: LIST
68256: LIST
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: LIST
68262: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68263: LD_ADDR_VAR 0 22
68267: PUSH
68268: LD_INT 2
68270: NEG
68271: PUSH
68272: LD_INT 3
68274: NEG
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: PUSH
68280: LD_INT 3
68282: NEG
68283: PUSH
68284: LD_INT 2
68286: NEG
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: PUSH
68292: LD_INT 3
68294: NEG
68295: PUSH
68296: LD_INT 3
68298: NEG
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: PUSH
68304: EMPTY
68305: LIST
68306: LIST
68307: LIST
68308: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
68309: LD_ADDR_VAR 0 23
68313: PUSH
68314: LD_INT 0
68316: PUSH
68317: LD_INT 3
68319: NEG
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: PUSH
68325: LD_INT 1
68327: NEG
68328: PUSH
68329: LD_INT 4
68331: NEG
68332: PUSH
68333: EMPTY
68334: LIST
68335: LIST
68336: PUSH
68337: LD_INT 1
68339: PUSH
68340: LD_INT 3
68342: NEG
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: LIST
68352: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
68353: LD_ADDR_VAR 0 24
68357: PUSH
68358: LD_INT 3
68360: PUSH
68361: LD_INT 0
68363: PUSH
68364: EMPTY
68365: LIST
68366: LIST
68367: PUSH
68368: LD_INT 3
68370: PUSH
68371: LD_INT 1
68373: NEG
68374: PUSH
68375: EMPTY
68376: LIST
68377: LIST
68378: PUSH
68379: LD_INT 4
68381: PUSH
68382: LD_INT 1
68384: PUSH
68385: EMPTY
68386: LIST
68387: LIST
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: LIST
68393: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
68394: LD_ADDR_VAR 0 25
68398: PUSH
68399: LD_INT 3
68401: PUSH
68402: LD_INT 3
68404: PUSH
68405: EMPTY
68406: LIST
68407: LIST
68408: PUSH
68409: LD_INT 4
68411: PUSH
68412: LD_INT 3
68414: PUSH
68415: EMPTY
68416: LIST
68417: LIST
68418: PUSH
68419: LD_INT 3
68421: PUSH
68422: LD_INT 4
68424: PUSH
68425: EMPTY
68426: LIST
68427: LIST
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: LIST
68433: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
68434: LD_ADDR_VAR 0 26
68438: PUSH
68439: LD_INT 0
68441: PUSH
68442: LD_INT 3
68444: PUSH
68445: EMPTY
68446: LIST
68447: LIST
68448: PUSH
68449: LD_INT 1
68451: PUSH
68452: LD_INT 4
68454: PUSH
68455: EMPTY
68456: LIST
68457: LIST
68458: PUSH
68459: LD_INT 1
68461: NEG
68462: PUSH
68463: LD_INT 3
68465: PUSH
68466: EMPTY
68467: LIST
68468: LIST
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: LIST
68474: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
68475: LD_ADDR_VAR 0 27
68479: PUSH
68480: LD_INT 3
68482: NEG
68483: PUSH
68484: LD_INT 0
68486: PUSH
68487: EMPTY
68488: LIST
68489: LIST
68490: PUSH
68491: LD_INT 3
68493: NEG
68494: PUSH
68495: LD_INT 1
68497: PUSH
68498: EMPTY
68499: LIST
68500: LIST
68501: PUSH
68502: LD_INT 4
68504: NEG
68505: PUSH
68506: LD_INT 1
68508: NEG
68509: PUSH
68510: EMPTY
68511: LIST
68512: LIST
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: LIST
68518: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
68519: LD_ADDR_VAR 0 28
68523: PUSH
68524: LD_INT 3
68526: NEG
68527: PUSH
68528: LD_INT 3
68530: NEG
68531: PUSH
68532: EMPTY
68533: LIST
68534: LIST
68535: PUSH
68536: LD_INT 3
68538: NEG
68539: PUSH
68540: LD_INT 4
68542: NEG
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: PUSH
68548: LD_INT 4
68550: NEG
68551: PUSH
68552: LD_INT 3
68554: NEG
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PUSH
68560: EMPTY
68561: LIST
68562: LIST
68563: LIST
68564: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
68565: LD_ADDR_VAR 0 29
68569: PUSH
68570: LD_INT 1
68572: NEG
68573: PUSH
68574: LD_INT 3
68576: NEG
68577: PUSH
68578: EMPTY
68579: LIST
68580: LIST
68581: PUSH
68582: LD_INT 0
68584: PUSH
68585: LD_INT 3
68587: NEG
68588: PUSH
68589: EMPTY
68590: LIST
68591: LIST
68592: PUSH
68593: LD_INT 1
68595: PUSH
68596: LD_INT 2
68598: NEG
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: PUSH
68604: LD_INT 1
68606: NEG
68607: PUSH
68608: LD_INT 4
68610: NEG
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: PUSH
68616: LD_INT 0
68618: PUSH
68619: LD_INT 4
68621: NEG
68622: PUSH
68623: EMPTY
68624: LIST
68625: LIST
68626: PUSH
68627: LD_INT 1
68629: PUSH
68630: LD_INT 3
68632: NEG
68633: PUSH
68634: EMPTY
68635: LIST
68636: LIST
68637: PUSH
68638: LD_INT 1
68640: NEG
68641: PUSH
68642: LD_INT 5
68644: NEG
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: PUSH
68650: LD_INT 0
68652: PUSH
68653: LD_INT 5
68655: NEG
68656: PUSH
68657: EMPTY
68658: LIST
68659: LIST
68660: PUSH
68661: LD_INT 1
68663: PUSH
68664: LD_INT 4
68666: NEG
68667: PUSH
68668: EMPTY
68669: LIST
68670: LIST
68671: PUSH
68672: LD_INT 1
68674: NEG
68675: PUSH
68676: LD_INT 6
68678: NEG
68679: PUSH
68680: EMPTY
68681: LIST
68682: LIST
68683: PUSH
68684: LD_INT 0
68686: PUSH
68687: LD_INT 6
68689: NEG
68690: PUSH
68691: EMPTY
68692: LIST
68693: LIST
68694: PUSH
68695: LD_INT 1
68697: PUSH
68698: LD_INT 5
68700: NEG
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: PUSH
68706: EMPTY
68707: LIST
68708: LIST
68709: LIST
68710: LIST
68711: LIST
68712: LIST
68713: LIST
68714: LIST
68715: LIST
68716: LIST
68717: LIST
68718: LIST
68719: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
68720: LD_ADDR_VAR 0 30
68724: PUSH
68725: LD_INT 2
68727: PUSH
68728: LD_INT 1
68730: NEG
68731: PUSH
68732: EMPTY
68733: LIST
68734: LIST
68735: PUSH
68736: LD_INT 3
68738: PUSH
68739: LD_INT 0
68741: PUSH
68742: EMPTY
68743: LIST
68744: LIST
68745: PUSH
68746: LD_INT 3
68748: PUSH
68749: LD_INT 1
68751: PUSH
68752: EMPTY
68753: LIST
68754: LIST
68755: PUSH
68756: LD_INT 3
68758: PUSH
68759: LD_INT 1
68761: NEG
68762: PUSH
68763: EMPTY
68764: LIST
68765: LIST
68766: PUSH
68767: LD_INT 4
68769: PUSH
68770: LD_INT 0
68772: PUSH
68773: EMPTY
68774: LIST
68775: LIST
68776: PUSH
68777: LD_INT 4
68779: PUSH
68780: LD_INT 1
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PUSH
68787: LD_INT 4
68789: PUSH
68790: LD_INT 1
68792: NEG
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: PUSH
68798: LD_INT 5
68800: PUSH
68801: LD_INT 0
68803: PUSH
68804: EMPTY
68805: LIST
68806: LIST
68807: PUSH
68808: LD_INT 5
68810: PUSH
68811: LD_INT 1
68813: PUSH
68814: EMPTY
68815: LIST
68816: LIST
68817: PUSH
68818: LD_INT 5
68820: PUSH
68821: LD_INT 1
68823: NEG
68824: PUSH
68825: EMPTY
68826: LIST
68827: LIST
68828: PUSH
68829: LD_INT 6
68831: PUSH
68832: LD_INT 0
68834: PUSH
68835: EMPTY
68836: LIST
68837: LIST
68838: PUSH
68839: LD_INT 6
68841: PUSH
68842: LD_INT 1
68844: PUSH
68845: EMPTY
68846: LIST
68847: LIST
68848: PUSH
68849: EMPTY
68850: LIST
68851: LIST
68852: LIST
68853: LIST
68854: LIST
68855: LIST
68856: LIST
68857: LIST
68858: LIST
68859: LIST
68860: LIST
68861: LIST
68862: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
68863: LD_ADDR_VAR 0 31
68867: PUSH
68868: LD_INT 3
68870: PUSH
68871: LD_INT 2
68873: PUSH
68874: EMPTY
68875: LIST
68876: LIST
68877: PUSH
68878: LD_INT 3
68880: PUSH
68881: LD_INT 3
68883: PUSH
68884: EMPTY
68885: LIST
68886: LIST
68887: PUSH
68888: LD_INT 2
68890: PUSH
68891: LD_INT 3
68893: PUSH
68894: EMPTY
68895: LIST
68896: LIST
68897: PUSH
68898: LD_INT 4
68900: PUSH
68901: LD_INT 3
68903: PUSH
68904: EMPTY
68905: LIST
68906: LIST
68907: PUSH
68908: LD_INT 4
68910: PUSH
68911: LD_INT 4
68913: PUSH
68914: EMPTY
68915: LIST
68916: LIST
68917: PUSH
68918: LD_INT 3
68920: PUSH
68921: LD_INT 4
68923: PUSH
68924: EMPTY
68925: LIST
68926: LIST
68927: PUSH
68928: LD_INT 5
68930: PUSH
68931: LD_INT 4
68933: PUSH
68934: EMPTY
68935: LIST
68936: LIST
68937: PUSH
68938: LD_INT 5
68940: PUSH
68941: LD_INT 5
68943: PUSH
68944: EMPTY
68945: LIST
68946: LIST
68947: PUSH
68948: LD_INT 4
68950: PUSH
68951: LD_INT 5
68953: PUSH
68954: EMPTY
68955: LIST
68956: LIST
68957: PUSH
68958: LD_INT 6
68960: PUSH
68961: LD_INT 5
68963: PUSH
68964: EMPTY
68965: LIST
68966: LIST
68967: PUSH
68968: LD_INT 6
68970: PUSH
68971: LD_INT 6
68973: PUSH
68974: EMPTY
68975: LIST
68976: LIST
68977: PUSH
68978: LD_INT 5
68980: PUSH
68981: LD_INT 6
68983: PUSH
68984: EMPTY
68985: LIST
68986: LIST
68987: PUSH
68988: EMPTY
68989: LIST
68990: LIST
68991: LIST
68992: LIST
68993: LIST
68994: LIST
68995: LIST
68996: LIST
68997: LIST
68998: LIST
68999: LIST
69000: LIST
69001: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
69002: LD_ADDR_VAR 0 32
69006: PUSH
69007: LD_INT 1
69009: PUSH
69010: LD_INT 3
69012: PUSH
69013: EMPTY
69014: LIST
69015: LIST
69016: PUSH
69017: LD_INT 0
69019: PUSH
69020: LD_INT 3
69022: PUSH
69023: EMPTY
69024: LIST
69025: LIST
69026: PUSH
69027: LD_INT 1
69029: NEG
69030: PUSH
69031: LD_INT 2
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: PUSH
69038: LD_INT 1
69040: PUSH
69041: LD_INT 4
69043: PUSH
69044: EMPTY
69045: LIST
69046: LIST
69047: PUSH
69048: LD_INT 0
69050: PUSH
69051: LD_INT 4
69053: PUSH
69054: EMPTY
69055: LIST
69056: LIST
69057: PUSH
69058: LD_INT 1
69060: NEG
69061: PUSH
69062: LD_INT 3
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: PUSH
69069: LD_INT 1
69071: PUSH
69072: LD_INT 5
69074: PUSH
69075: EMPTY
69076: LIST
69077: LIST
69078: PUSH
69079: LD_INT 0
69081: PUSH
69082: LD_INT 5
69084: PUSH
69085: EMPTY
69086: LIST
69087: LIST
69088: PUSH
69089: LD_INT 1
69091: NEG
69092: PUSH
69093: LD_INT 4
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: PUSH
69100: LD_INT 1
69102: PUSH
69103: LD_INT 6
69105: PUSH
69106: EMPTY
69107: LIST
69108: LIST
69109: PUSH
69110: LD_INT 0
69112: PUSH
69113: LD_INT 6
69115: PUSH
69116: EMPTY
69117: LIST
69118: LIST
69119: PUSH
69120: LD_INT 1
69122: NEG
69123: PUSH
69124: LD_INT 5
69126: PUSH
69127: EMPTY
69128: LIST
69129: LIST
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: LIST
69135: LIST
69136: LIST
69137: LIST
69138: LIST
69139: LIST
69140: LIST
69141: LIST
69142: LIST
69143: LIST
69144: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
69145: LD_ADDR_VAR 0 33
69149: PUSH
69150: LD_INT 2
69152: NEG
69153: PUSH
69154: LD_INT 1
69156: PUSH
69157: EMPTY
69158: LIST
69159: LIST
69160: PUSH
69161: LD_INT 3
69163: NEG
69164: PUSH
69165: LD_INT 0
69167: PUSH
69168: EMPTY
69169: LIST
69170: LIST
69171: PUSH
69172: LD_INT 3
69174: NEG
69175: PUSH
69176: LD_INT 1
69178: NEG
69179: PUSH
69180: EMPTY
69181: LIST
69182: LIST
69183: PUSH
69184: LD_INT 3
69186: NEG
69187: PUSH
69188: LD_INT 1
69190: PUSH
69191: EMPTY
69192: LIST
69193: LIST
69194: PUSH
69195: LD_INT 4
69197: NEG
69198: PUSH
69199: LD_INT 0
69201: PUSH
69202: EMPTY
69203: LIST
69204: LIST
69205: PUSH
69206: LD_INT 4
69208: NEG
69209: PUSH
69210: LD_INT 1
69212: NEG
69213: PUSH
69214: EMPTY
69215: LIST
69216: LIST
69217: PUSH
69218: LD_INT 4
69220: NEG
69221: PUSH
69222: LD_INT 1
69224: PUSH
69225: EMPTY
69226: LIST
69227: LIST
69228: PUSH
69229: LD_INT 5
69231: NEG
69232: PUSH
69233: LD_INT 0
69235: PUSH
69236: EMPTY
69237: LIST
69238: LIST
69239: PUSH
69240: LD_INT 5
69242: NEG
69243: PUSH
69244: LD_INT 1
69246: NEG
69247: PUSH
69248: EMPTY
69249: LIST
69250: LIST
69251: PUSH
69252: LD_INT 5
69254: NEG
69255: PUSH
69256: LD_INT 1
69258: PUSH
69259: EMPTY
69260: LIST
69261: LIST
69262: PUSH
69263: LD_INT 6
69265: NEG
69266: PUSH
69267: LD_INT 0
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: PUSH
69274: LD_INT 6
69276: NEG
69277: PUSH
69278: LD_INT 1
69280: NEG
69281: PUSH
69282: EMPTY
69283: LIST
69284: LIST
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: LIST
69290: LIST
69291: LIST
69292: LIST
69293: LIST
69294: LIST
69295: LIST
69296: LIST
69297: LIST
69298: LIST
69299: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
69300: LD_ADDR_VAR 0 34
69304: PUSH
69305: LD_INT 2
69307: NEG
69308: PUSH
69309: LD_INT 3
69311: NEG
69312: PUSH
69313: EMPTY
69314: LIST
69315: LIST
69316: PUSH
69317: LD_INT 3
69319: NEG
69320: PUSH
69321: LD_INT 2
69323: NEG
69324: PUSH
69325: EMPTY
69326: LIST
69327: LIST
69328: PUSH
69329: LD_INT 3
69331: NEG
69332: PUSH
69333: LD_INT 3
69335: NEG
69336: PUSH
69337: EMPTY
69338: LIST
69339: LIST
69340: PUSH
69341: LD_INT 3
69343: NEG
69344: PUSH
69345: LD_INT 4
69347: NEG
69348: PUSH
69349: EMPTY
69350: LIST
69351: LIST
69352: PUSH
69353: LD_INT 4
69355: NEG
69356: PUSH
69357: LD_INT 3
69359: NEG
69360: PUSH
69361: EMPTY
69362: LIST
69363: LIST
69364: PUSH
69365: LD_INT 4
69367: NEG
69368: PUSH
69369: LD_INT 4
69371: NEG
69372: PUSH
69373: EMPTY
69374: LIST
69375: LIST
69376: PUSH
69377: LD_INT 4
69379: NEG
69380: PUSH
69381: LD_INT 5
69383: NEG
69384: PUSH
69385: EMPTY
69386: LIST
69387: LIST
69388: PUSH
69389: LD_INT 5
69391: NEG
69392: PUSH
69393: LD_INT 4
69395: NEG
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: PUSH
69401: LD_INT 5
69403: NEG
69404: PUSH
69405: LD_INT 5
69407: NEG
69408: PUSH
69409: EMPTY
69410: LIST
69411: LIST
69412: PUSH
69413: LD_INT 5
69415: NEG
69416: PUSH
69417: LD_INT 6
69419: NEG
69420: PUSH
69421: EMPTY
69422: LIST
69423: LIST
69424: PUSH
69425: LD_INT 6
69427: NEG
69428: PUSH
69429: LD_INT 5
69431: NEG
69432: PUSH
69433: EMPTY
69434: LIST
69435: LIST
69436: PUSH
69437: LD_INT 6
69439: NEG
69440: PUSH
69441: LD_INT 6
69443: NEG
69444: PUSH
69445: EMPTY
69446: LIST
69447: LIST
69448: PUSH
69449: EMPTY
69450: LIST
69451: LIST
69452: LIST
69453: LIST
69454: LIST
69455: LIST
69456: LIST
69457: LIST
69458: LIST
69459: LIST
69460: LIST
69461: LIST
69462: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
69463: LD_ADDR_VAR 0 41
69467: PUSH
69468: LD_INT 0
69470: PUSH
69471: LD_INT 2
69473: NEG
69474: PUSH
69475: EMPTY
69476: LIST
69477: LIST
69478: PUSH
69479: LD_INT 1
69481: NEG
69482: PUSH
69483: LD_INT 3
69485: NEG
69486: PUSH
69487: EMPTY
69488: LIST
69489: LIST
69490: PUSH
69491: LD_INT 1
69493: PUSH
69494: LD_INT 2
69496: NEG
69497: PUSH
69498: EMPTY
69499: LIST
69500: LIST
69501: PUSH
69502: EMPTY
69503: LIST
69504: LIST
69505: LIST
69506: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
69507: LD_ADDR_VAR 0 42
69511: PUSH
69512: LD_INT 2
69514: PUSH
69515: LD_INT 0
69517: PUSH
69518: EMPTY
69519: LIST
69520: LIST
69521: PUSH
69522: LD_INT 2
69524: PUSH
69525: LD_INT 1
69527: NEG
69528: PUSH
69529: EMPTY
69530: LIST
69531: LIST
69532: PUSH
69533: LD_INT 3
69535: PUSH
69536: LD_INT 1
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: EMPTY
69544: LIST
69545: LIST
69546: LIST
69547: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
69548: LD_ADDR_VAR 0 43
69552: PUSH
69553: LD_INT 2
69555: PUSH
69556: LD_INT 2
69558: PUSH
69559: EMPTY
69560: LIST
69561: LIST
69562: PUSH
69563: LD_INT 3
69565: PUSH
69566: LD_INT 2
69568: PUSH
69569: EMPTY
69570: LIST
69571: LIST
69572: PUSH
69573: LD_INT 2
69575: PUSH
69576: LD_INT 3
69578: PUSH
69579: EMPTY
69580: LIST
69581: LIST
69582: PUSH
69583: EMPTY
69584: LIST
69585: LIST
69586: LIST
69587: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
69588: LD_ADDR_VAR 0 44
69592: PUSH
69593: LD_INT 0
69595: PUSH
69596: LD_INT 2
69598: PUSH
69599: EMPTY
69600: LIST
69601: LIST
69602: PUSH
69603: LD_INT 1
69605: PUSH
69606: LD_INT 3
69608: PUSH
69609: EMPTY
69610: LIST
69611: LIST
69612: PUSH
69613: LD_INT 1
69615: NEG
69616: PUSH
69617: LD_INT 2
69619: PUSH
69620: EMPTY
69621: LIST
69622: LIST
69623: PUSH
69624: EMPTY
69625: LIST
69626: LIST
69627: LIST
69628: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69629: LD_ADDR_VAR 0 45
69633: PUSH
69634: LD_INT 2
69636: NEG
69637: PUSH
69638: LD_INT 0
69640: PUSH
69641: EMPTY
69642: LIST
69643: LIST
69644: PUSH
69645: LD_INT 2
69647: NEG
69648: PUSH
69649: LD_INT 1
69651: PUSH
69652: EMPTY
69653: LIST
69654: LIST
69655: PUSH
69656: LD_INT 3
69658: NEG
69659: PUSH
69660: LD_INT 1
69662: NEG
69663: PUSH
69664: EMPTY
69665: LIST
69666: LIST
69667: PUSH
69668: EMPTY
69669: LIST
69670: LIST
69671: LIST
69672: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
69673: LD_ADDR_VAR 0 46
69677: PUSH
69678: LD_INT 2
69680: NEG
69681: PUSH
69682: LD_INT 2
69684: NEG
69685: PUSH
69686: EMPTY
69687: LIST
69688: LIST
69689: PUSH
69690: LD_INT 2
69692: NEG
69693: PUSH
69694: LD_INT 3
69696: NEG
69697: PUSH
69698: EMPTY
69699: LIST
69700: LIST
69701: PUSH
69702: LD_INT 3
69704: NEG
69705: PUSH
69706: LD_INT 2
69708: NEG
69709: PUSH
69710: EMPTY
69711: LIST
69712: LIST
69713: PUSH
69714: EMPTY
69715: LIST
69716: LIST
69717: LIST
69718: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
69719: LD_ADDR_VAR 0 47
69723: PUSH
69724: LD_INT 2
69726: NEG
69727: PUSH
69728: LD_INT 3
69730: NEG
69731: PUSH
69732: EMPTY
69733: LIST
69734: LIST
69735: PUSH
69736: LD_INT 1
69738: NEG
69739: PUSH
69740: LD_INT 3
69742: NEG
69743: PUSH
69744: EMPTY
69745: LIST
69746: LIST
69747: PUSH
69748: EMPTY
69749: LIST
69750: LIST
69751: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
69752: LD_ADDR_VAR 0 48
69756: PUSH
69757: LD_INT 1
69759: PUSH
69760: LD_INT 2
69762: NEG
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: PUSH
69768: LD_INT 2
69770: PUSH
69771: LD_INT 1
69773: NEG
69774: PUSH
69775: EMPTY
69776: LIST
69777: LIST
69778: PUSH
69779: EMPTY
69780: LIST
69781: LIST
69782: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
69783: LD_ADDR_VAR 0 49
69787: PUSH
69788: LD_INT 3
69790: PUSH
69791: LD_INT 1
69793: PUSH
69794: EMPTY
69795: LIST
69796: LIST
69797: PUSH
69798: LD_INT 3
69800: PUSH
69801: LD_INT 2
69803: PUSH
69804: EMPTY
69805: LIST
69806: LIST
69807: PUSH
69808: EMPTY
69809: LIST
69810: LIST
69811: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
69812: LD_ADDR_VAR 0 50
69816: PUSH
69817: LD_INT 2
69819: PUSH
69820: LD_INT 3
69822: PUSH
69823: EMPTY
69824: LIST
69825: LIST
69826: PUSH
69827: LD_INT 1
69829: PUSH
69830: LD_INT 3
69832: PUSH
69833: EMPTY
69834: LIST
69835: LIST
69836: PUSH
69837: EMPTY
69838: LIST
69839: LIST
69840: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
69841: LD_ADDR_VAR 0 51
69845: PUSH
69846: LD_INT 1
69848: NEG
69849: PUSH
69850: LD_INT 2
69852: PUSH
69853: EMPTY
69854: LIST
69855: LIST
69856: PUSH
69857: LD_INT 2
69859: NEG
69860: PUSH
69861: LD_INT 1
69863: PUSH
69864: EMPTY
69865: LIST
69866: LIST
69867: PUSH
69868: EMPTY
69869: LIST
69870: LIST
69871: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69872: LD_ADDR_VAR 0 52
69876: PUSH
69877: LD_INT 3
69879: NEG
69880: PUSH
69881: LD_INT 1
69883: NEG
69884: PUSH
69885: EMPTY
69886: LIST
69887: LIST
69888: PUSH
69889: LD_INT 3
69891: NEG
69892: PUSH
69893: LD_INT 2
69895: NEG
69896: PUSH
69897: EMPTY
69898: LIST
69899: LIST
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69905: LD_ADDR_VAR 0 53
69909: PUSH
69910: LD_INT 1
69912: NEG
69913: PUSH
69914: LD_INT 3
69916: NEG
69917: PUSH
69918: EMPTY
69919: LIST
69920: LIST
69921: PUSH
69922: LD_INT 0
69924: PUSH
69925: LD_INT 3
69927: NEG
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: PUSH
69933: LD_INT 1
69935: PUSH
69936: LD_INT 2
69938: NEG
69939: PUSH
69940: EMPTY
69941: LIST
69942: LIST
69943: PUSH
69944: EMPTY
69945: LIST
69946: LIST
69947: LIST
69948: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69949: LD_ADDR_VAR 0 54
69953: PUSH
69954: LD_INT 2
69956: PUSH
69957: LD_INT 1
69959: NEG
69960: PUSH
69961: EMPTY
69962: LIST
69963: LIST
69964: PUSH
69965: LD_INT 3
69967: PUSH
69968: LD_INT 0
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: PUSH
69975: LD_INT 3
69977: PUSH
69978: LD_INT 1
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: PUSH
69985: EMPTY
69986: LIST
69987: LIST
69988: LIST
69989: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69990: LD_ADDR_VAR 0 55
69994: PUSH
69995: LD_INT 3
69997: PUSH
69998: LD_INT 2
70000: PUSH
70001: EMPTY
70002: LIST
70003: LIST
70004: PUSH
70005: LD_INT 3
70007: PUSH
70008: LD_INT 3
70010: PUSH
70011: EMPTY
70012: LIST
70013: LIST
70014: PUSH
70015: LD_INT 2
70017: PUSH
70018: LD_INT 3
70020: PUSH
70021: EMPTY
70022: LIST
70023: LIST
70024: PUSH
70025: EMPTY
70026: LIST
70027: LIST
70028: LIST
70029: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70030: LD_ADDR_VAR 0 56
70034: PUSH
70035: LD_INT 1
70037: PUSH
70038: LD_INT 3
70040: PUSH
70041: EMPTY
70042: LIST
70043: LIST
70044: PUSH
70045: LD_INT 0
70047: PUSH
70048: LD_INT 3
70050: PUSH
70051: EMPTY
70052: LIST
70053: LIST
70054: PUSH
70055: LD_INT 1
70057: NEG
70058: PUSH
70059: LD_INT 2
70061: PUSH
70062: EMPTY
70063: LIST
70064: LIST
70065: PUSH
70066: EMPTY
70067: LIST
70068: LIST
70069: LIST
70070: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70071: LD_ADDR_VAR 0 57
70075: PUSH
70076: LD_INT 2
70078: NEG
70079: PUSH
70080: LD_INT 1
70082: PUSH
70083: EMPTY
70084: LIST
70085: LIST
70086: PUSH
70087: LD_INT 3
70089: NEG
70090: PUSH
70091: LD_INT 0
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: PUSH
70098: LD_INT 3
70100: NEG
70101: PUSH
70102: LD_INT 1
70104: NEG
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: PUSH
70110: EMPTY
70111: LIST
70112: LIST
70113: LIST
70114: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70115: LD_ADDR_VAR 0 58
70119: PUSH
70120: LD_INT 2
70122: NEG
70123: PUSH
70124: LD_INT 3
70126: NEG
70127: PUSH
70128: EMPTY
70129: LIST
70130: LIST
70131: PUSH
70132: LD_INT 3
70134: NEG
70135: PUSH
70136: LD_INT 2
70138: NEG
70139: PUSH
70140: EMPTY
70141: LIST
70142: LIST
70143: PUSH
70144: LD_INT 3
70146: NEG
70147: PUSH
70148: LD_INT 3
70150: NEG
70151: PUSH
70152: EMPTY
70153: LIST
70154: LIST
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: LIST
70160: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
70161: LD_ADDR_VAR 0 59
70165: PUSH
70166: LD_INT 1
70168: NEG
70169: PUSH
70170: LD_INT 2
70172: NEG
70173: PUSH
70174: EMPTY
70175: LIST
70176: LIST
70177: PUSH
70178: LD_INT 0
70180: PUSH
70181: LD_INT 2
70183: NEG
70184: PUSH
70185: EMPTY
70186: LIST
70187: LIST
70188: PUSH
70189: LD_INT 1
70191: PUSH
70192: LD_INT 1
70194: NEG
70195: PUSH
70196: EMPTY
70197: LIST
70198: LIST
70199: PUSH
70200: EMPTY
70201: LIST
70202: LIST
70203: LIST
70204: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
70205: LD_ADDR_VAR 0 60
70209: PUSH
70210: LD_INT 1
70212: PUSH
70213: LD_INT 1
70215: NEG
70216: PUSH
70217: EMPTY
70218: LIST
70219: LIST
70220: PUSH
70221: LD_INT 2
70223: PUSH
70224: LD_INT 0
70226: PUSH
70227: EMPTY
70228: LIST
70229: LIST
70230: PUSH
70231: LD_INT 2
70233: PUSH
70234: LD_INT 1
70236: PUSH
70237: EMPTY
70238: LIST
70239: LIST
70240: PUSH
70241: EMPTY
70242: LIST
70243: LIST
70244: LIST
70245: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
70246: LD_ADDR_VAR 0 61
70250: PUSH
70251: LD_INT 2
70253: PUSH
70254: LD_INT 1
70256: PUSH
70257: EMPTY
70258: LIST
70259: LIST
70260: PUSH
70261: LD_INT 2
70263: PUSH
70264: LD_INT 2
70266: PUSH
70267: EMPTY
70268: LIST
70269: LIST
70270: PUSH
70271: LD_INT 1
70273: PUSH
70274: LD_INT 2
70276: PUSH
70277: EMPTY
70278: LIST
70279: LIST
70280: PUSH
70281: EMPTY
70282: LIST
70283: LIST
70284: LIST
70285: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
70286: LD_ADDR_VAR 0 62
70290: PUSH
70291: LD_INT 1
70293: PUSH
70294: LD_INT 2
70296: PUSH
70297: EMPTY
70298: LIST
70299: LIST
70300: PUSH
70301: LD_INT 0
70303: PUSH
70304: LD_INT 2
70306: PUSH
70307: EMPTY
70308: LIST
70309: LIST
70310: PUSH
70311: LD_INT 1
70313: NEG
70314: PUSH
70315: LD_INT 1
70317: PUSH
70318: EMPTY
70319: LIST
70320: LIST
70321: PUSH
70322: EMPTY
70323: LIST
70324: LIST
70325: LIST
70326: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
70327: LD_ADDR_VAR 0 63
70331: PUSH
70332: LD_INT 1
70334: NEG
70335: PUSH
70336: LD_INT 1
70338: PUSH
70339: EMPTY
70340: LIST
70341: LIST
70342: PUSH
70343: LD_INT 2
70345: NEG
70346: PUSH
70347: LD_INT 0
70349: PUSH
70350: EMPTY
70351: LIST
70352: LIST
70353: PUSH
70354: LD_INT 2
70356: NEG
70357: PUSH
70358: LD_INT 1
70360: NEG
70361: PUSH
70362: EMPTY
70363: LIST
70364: LIST
70365: PUSH
70366: EMPTY
70367: LIST
70368: LIST
70369: LIST
70370: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70371: LD_ADDR_VAR 0 64
70375: PUSH
70376: LD_INT 1
70378: NEG
70379: PUSH
70380: LD_INT 2
70382: NEG
70383: PUSH
70384: EMPTY
70385: LIST
70386: LIST
70387: PUSH
70388: LD_INT 2
70390: NEG
70391: PUSH
70392: LD_INT 1
70394: NEG
70395: PUSH
70396: EMPTY
70397: LIST
70398: LIST
70399: PUSH
70400: LD_INT 2
70402: NEG
70403: PUSH
70404: LD_INT 2
70406: NEG
70407: PUSH
70408: EMPTY
70409: LIST
70410: LIST
70411: PUSH
70412: EMPTY
70413: LIST
70414: LIST
70415: LIST
70416: ST_TO_ADDR
// end ; 2 :
70417: GO 73683
70419: LD_INT 2
70421: DOUBLE
70422: EQUAL
70423: IFTRUE 70427
70425: GO 73682
70427: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
70428: LD_ADDR_VAR 0 29
70432: PUSH
70433: LD_INT 4
70435: PUSH
70436: LD_INT 0
70438: PUSH
70439: EMPTY
70440: LIST
70441: LIST
70442: PUSH
70443: LD_INT 4
70445: PUSH
70446: LD_INT 1
70448: NEG
70449: PUSH
70450: EMPTY
70451: LIST
70452: LIST
70453: PUSH
70454: LD_INT 5
70456: PUSH
70457: LD_INT 0
70459: PUSH
70460: EMPTY
70461: LIST
70462: LIST
70463: PUSH
70464: LD_INT 5
70466: PUSH
70467: LD_INT 1
70469: PUSH
70470: EMPTY
70471: LIST
70472: LIST
70473: PUSH
70474: LD_INT 4
70476: PUSH
70477: LD_INT 1
70479: PUSH
70480: EMPTY
70481: LIST
70482: LIST
70483: PUSH
70484: LD_INT 3
70486: PUSH
70487: LD_INT 0
70489: PUSH
70490: EMPTY
70491: LIST
70492: LIST
70493: PUSH
70494: LD_INT 3
70496: PUSH
70497: LD_INT 1
70499: NEG
70500: PUSH
70501: EMPTY
70502: LIST
70503: LIST
70504: PUSH
70505: LD_INT 3
70507: PUSH
70508: LD_INT 2
70510: NEG
70511: PUSH
70512: EMPTY
70513: LIST
70514: LIST
70515: PUSH
70516: LD_INT 5
70518: PUSH
70519: LD_INT 2
70521: PUSH
70522: EMPTY
70523: LIST
70524: LIST
70525: PUSH
70526: LD_INT 3
70528: PUSH
70529: LD_INT 3
70531: PUSH
70532: EMPTY
70533: LIST
70534: LIST
70535: PUSH
70536: LD_INT 3
70538: PUSH
70539: LD_INT 2
70541: PUSH
70542: EMPTY
70543: LIST
70544: LIST
70545: PUSH
70546: LD_INT 4
70548: PUSH
70549: LD_INT 3
70551: PUSH
70552: EMPTY
70553: LIST
70554: LIST
70555: PUSH
70556: LD_INT 4
70558: PUSH
70559: LD_INT 4
70561: PUSH
70562: EMPTY
70563: LIST
70564: LIST
70565: PUSH
70566: LD_INT 3
70568: PUSH
70569: LD_INT 4
70571: PUSH
70572: EMPTY
70573: LIST
70574: LIST
70575: PUSH
70576: LD_INT 2
70578: PUSH
70579: LD_INT 3
70581: PUSH
70582: EMPTY
70583: LIST
70584: LIST
70585: PUSH
70586: LD_INT 2
70588: PUSH
70589: LD_INT 2
70591: PUSH
70592: EMPTY
70593: LIST
70594: LIST
70595: PUSH
70596: LD_INT 4
70598: PUSH
70599: LD_INT 2
70601: PUSH
70602: EMPTY
70603: LIST
70604: LIST
70605: PUSH
70606: LD_INT 2
70608: PUSH
70609: LD_INT 4
70611: PUSH
70612: EMPTY
70613: LIST
70614: LIST
70615: PUSH
70616: LD_INT 0
70618: PUSH
70619: LD_INT 4
70621: PUSH
70622: EMPTY
70623: LIST
70624: LIST
70625: PUSH
70626: LD_INT 0
70628: PUSH
70629: LD_INT 3
70631: PUSH
70632: EMPTY
70633: LIST
70634: LIST
70635: PUSH
70636: LD_INT 1
70638: PUSH
70639: LD_INT 4
70641: PUSH
70642: EMPTY
70643: LIST
70644: LIST
70645: PUSH
70646: LD_INT 1
70648: PUSH
70649: LD_INT 5
70651: PUSH
70652: EMPTY
70653: LIST
70654: LIST
70655: PUSH
70656: LD_INT 0
70658: PUSH
70659: LD_INT 5
70661: PUSH
70662: EMPTY
70663: LIST
70664: LIST
70665: PUSH
70666: LD_INT 1
70668: NEG
70669: PUSH
70670: LD_INT 4
70672: PUSH
70673: EMPTY
70674: LIST
70675: LIST
70676: PUSH
70677: LD_INT 1
70679: NEG
70680: PUSH
70681: LD_INT 3
70683: PUSH
70684: EMPTY
70685: LIST
70686: LIST
70687: PUSH
70688: LD_INT 2
70690: PUSH
70691: LD_INT 5
70693: PUSH
70694: EMPTY
70695: LIST
70696: LIST
70697: PUSH
70698: LD_INT 2
70700: NEG
70701: PUSH
70702: LD_INT 3
70704: PUSH
70705: EMPTY
70706: LIST
70707: LIST
70708: PUSH
70709: LD_INT 3
70711: NEG
70712: PUSH
70713: LD_INT 0
70715: PUSH
70716: EMPTY
70717: LIST
70718: LIST
70719: PUSH
70720: LD_INT 3
70722: NEG
70723: PUSH
70724: LD_INT 1
70726: NEG
70727: PUSH
70728: EMPTY
70729: LIST
70730: LIST
70731: PUSH
70732: LD_INT 2
70734: NEG
70735: PUSH
70736: LD_INT 0
70738: PUSH
70739: EMPTY
70740: LIST
70741: LIST
70742: PUSH
70743: LD_INT 2
70745: NEG
70746: PUSH
70747: LD_INT 1
70749: PUSH
70750: EMPTY
70751: LIST
70752: LIST
70753: PUSH
70754: LD_INT 3
70756: NEG
70757: PUSH
70758: LD_INT 1
70760: PUSH
70761: EMPTY
70762: LIST
70763: LIST
70764: PUSH
70765: LD_INT 4
70767: NEG
70768: PUSH
70769: LD_INT 0
70771: PUSH
70772: EMPTY
70773: LIST
70774: LIST
70775: PUSH
70776: LD_INT 4
70778: NEG
70779: PUSH
70780: LD_INT 1
70782: NEG
70783: PUSH
70784: EMPTY
70785: LIST
70786: LIST
70787: PUSH
70788: LD_INT 4
70790: NEG
70791: PUSH
70792: LD_INT 2
70794: NEG
70795: PUSH
70796: EMPTY
70797: LIST
70798: LIST
70799: PUSH
70800: LD_INT 2
70802: NEG
70803: PUSH
70804: LD_INT 2
70806: PUSH
70807: EMPTY
70808: LIST
70809: LIST
70810: PUSH
70811: LD_INT 4
70813: NEG
70814: PUSH
70815: LD_INT 4
70817: NEG
70818: PUSH
70819: EMPTY
70820: LIST
70821: LIST
70822: PUSH
70823: LD_INT 4
70825: NEG
70826: PUSH
70827: LD_INT 5
70829: NEG
70830: PUSH
70831: EMPTY
70832: LIST
70833: LIST
70834: PUSH
70835: LD_INT 3
70837: NEG
70838: PUSH
70839: LD_INT 4
70841: NEG
70842: PUSH
70843: EMPTY
70844: LIST
70845: LIST
70846: PUSH
70847: LD_INT 3
70849: NEG
70850: PUSH
70851: LD_INT 3
70853: NEG
70854: PUSH
70855: EMPTY
70856: LIST
70857: LIST
70858: PUSH
70859: LD_INT 4
70861: NEG
70862: PUSH
70863: LD_INT 3
70865: NEG
70866: PUSH
70867: EMPTY
70868: LIST
70869: LIST
70870: PUSH
70871: LD_INT 5
70873: NEG
70874: PUSH
70875: LD_INT 4
70877: NEG
70878: PUSH
70879: EMPTY
70880: LIST
70881: LIST
70882: PUSH
70883: LD_INT 5
70885: NEG
70886: PUSH
70887: LD_INT 5
70889: NEG
70890: PUSH
70891: EMPTY
70892: LIST
70893: LIST
70894: PUSH
70895: LD_INT 3
70897: NEG
70898: PUSH
70899: LD_INT 5
70901: NEG
70902: PUSH
70903: EMPTY
70904: LIST
70905: LIST
70906: PUSH
70907: LD_INT 5
70909: NEG
70910: PUSH
70911: LD_INT 3
70913: NEG
70914: PUSH
70915: EMPTY
70916: LIST
70917: LIST
70918: PUSH
70919: EMPTY
70920: LIST
70921: LIST
70922: LIST
70923: LIST
70924: LIST
70925: LIST
70926: LIST
70927: LIST
70928: LIST
70929: LIST
70930: LIST
70931: LIST
70932: LIST
70933: LIST
70934: LIST
70935: LIST
70936: LIST
70937: LIST
70938: LIST
70939: LIST
70940: LIST
70941: LIST
70942: LIST
70943: LIST
70944: LIST
70945: LIST
70946: LIST
70947: LIST
70948: LIST
70949: LIST
70950: LIST
70951: LIST
70952: LIST
70953: LIST
70954: LIST
70955: LIST
70956: LIST
70957: LIST
70958: LIST
70959: LIST
70960: LIST
70961: LIST
70962: LIST
70963: LIST
70964: LIST
70965: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
70966: LD_ADDR_VAR 0 30
70970: PUSH
70971: LD_INT 4
70973: PUSH
70974: LD_INT 4
70976: PUSH
70977: EMPTY
70978: LIST
70979: LIST
70980: PUSH
70981: LD_INT 4
70983: PUSH
70984: LD_INT 3
70986: PUSH
70987: EMPTY
70988: LIST
70989: LIST
70990: PUSH
70991: LD_INT 5
70993: PUSH
70994: LD_INT 4
70996: PUSH
70997: EMPTY
70998: LIST
70999: LIST
71000: PUSH
71001: LD_INT 5
71003: PUSH
71004: LD_INT 5
71006: PUSH
71007: EMPTY
71008: LIST
71009: LIST
71010: PUSH
71011: LD_INT 4
71013: PUSH
71014: LD_INT 5
71016: PUSH
71017: EMPTY
71018: LIST
71019: LIST
71020: PUSH
71021: LD_INT 3
71023: PUSH
71024: LD_INT 4
71026: PUSH
71027: EMPTY
71028: LIST
71029: LIST
71030: PUSH
71031: LD_INT 3
71033: PUSH
71034: LD_INT 3
71036: PUSH
71037: EMPTY
71038: LIST
71039: LIST
71040: PUSH
71041: LD_INT 5
71043: PUSH
71044: LD_INT 3
71046: PUSH
71047: EMPTY
71048: LIST
71049: LIST
71050: PUSH
71051: LD_INT 3
71053: PUSH
71054: LD_INT 5
71056: PUSH
71057: EMPTY
71058: LIST
71059: LIST
71060: PUSH
71061: LD_INT 0
71063: PUSH
71064: LD_INT 3
71066: PUSH
71067: EMPTY
71068: LIST
71069: LIST
71070: PUSH
71071: LD_INT 0
71073: PUSH
71074: LD_INT 2
71076: PUSH
71077: EMPTY
71078: LIST
71079: LIST
71080: PUSH
71081: LD_INT 1
71083: PUSH
71084: LD_INT 3
71086: PUSH
71087: EMPTY
71088: LIST
71089: LIST
71090: PUSH
71091: LD_INT 1
71093: PUSH
71094: LD_INT 4
71096: PUSH
71097: EMPTY
71098: LIST
71099: LIST
71100: PUSH
71101: LD_INT 0
71103: PUSH
71104: LD_INT 4
71106: PUSH
71107: EMPTY
71108: LIST
71109: LIST
71110: PUSH
71111: LD_INT 1
71113: NEG
71114: PUSH
71115: LD_INT 3
71117: PUSH
71118: EMPTY
71119: LIST
71120: LIST
71121: PUSH
71122: LD_INT 1
71124: NEG
71125: PUSH
71126: LD_INT 2
71128: PUSH
71129: EMPTY
71130: LIST
71131: LIST
71132: PUSH
71133: LD_INT 2
71135: PUSH
71136: LD_INT 4
71138: PUSH
71139: EMPTY
71140: LIST
71141: LIST
71142: PUSH
71143: LD_INT 2
71145: NEG
71146: PUSH
71147: LD_INT 2
71149: PUSH
71150: EMPTY
71151: LIST
71152: LIST
71153: PUSH
71154: LD_INT 4
71156: NEG
71157: PUSH
71158: LD_INT 0
71160: PUSH
71161: EMPTY
71162: LIST
71163: LIST
71164: PUSH
71165: LD_INT 4
71167: NEG
71168: PUSH
71169: LD_INT 1
71171: NEG
71172: PUSH
71173: EMPTY
71174: LIST
71175: LIST
71176: PUSH
71177: LD_INT 3
71179: NEG
71180: PUSH
71181: LD_INT 0
71183: PUSH
71184: EMPTY
71185: LIST
71186: LIST
71187: PUSH
71188: LD_INT 3
71190: NEG
71191: PUSH
71192: LD_INT 1
71194: PUSH
71195: EMPTY
71196: LIST
71197: LIST
71198: PUSH
71199: LD_INT 4
71201: NEG
71202: PUSH
71203: LD_INT 1
71205: PUSH
71206: EMPTY
71207: LIST
71208: LIST
71209: PUSH
71210: LD_INT 5
71212: NEG
71213: PUSH
71214: LD_INT 0
71216: PUSH
71217: EMPTY
71218: LIST
71219: LIST
71220: PUSH
71221: LD_INT 5
71223: NEG
71224: PUSH
71225: LD_INT 1
71227: NEG
71228: PUSH
71229: EMPTY
71230: LIST
71231: LIST
71232: PUSH
71233: LD_INT 5
71235: NEG
71236: PUSH
71237: LD_INT 2
71239: NEG
71240: PUSH
71241: EMPTY
71242: LIST
71243: LIST
71244: PUSH
71245: LD_INT 3
71247: NEG
71248: PUSH
71249: LD_INT 2
71251: PUSH
71252: EMPTY
71253: LIST
71254: LIST
71255: PUSH
71256: LD_INT 3
71258: NEG
71259: PUSH
71260: LD_INT 3
71262: NEG
71263: PUSH
71264: EMPTY
71265: LIST
71266: LIST
71267: PUSH
71268: LD_INT 3
71270: NEG
71271: PUSH
71272: LD_INT 4
71274: NEG
71275: PUSH
71276: EMPTY
71277: LIST
71278: LIST
71279: PUSH
71280: LD_INT 2
71282: NEG
71283: PUSH
71284: LD_INT 3
71286: NEG
71287: PUSH
71288: EMPTY
71289: LIST
71290: LIST
71291: PUSH
71292: LD_INT 2
71294: NEG
71295: PUSH
71296: LD_INT 2
71298: NEG
71299: PUSH
71300: EMPTY
71301: LIST
71302: LIST
71303: PUSH
71304: LD_INT 3
71306: NEG
71307: PUSH
71308: LD_INT 2
71310: NEG
71311: PUSH
71312: EMPTY
71313: LIST
71314: LIST
71315: PUSH
71316: LD_INT 4
71318: NEG
71319: PUSH
71320: LD_INT 3
71322: NEG
71323: PUSH
71324: EMPTY
71325: LIST
71326: LIST
71327: PUSH
71328: LD_INT 4
71330: NEG
71331: PUSH
71332: LD_INT 4
71334: NEG
71335: PUSH
71336: EMPTY
71337: LIST
71338: LIST
71339: PUSH
71340: LD_INT 2
71342: NEG
71343: PUSH
71344: LD_INT 4
71346: NEG
71347: PUSH
71348: EMPTY
71349: LIST
71350: LIST
71351: PUSH
71352: LD_INT 4
71354: NEG
71355: PUSH
71356: LD_INT 2
71358: NEG
71359: PUSH
71360: EMPTY
71361: LIST
71362: LIST
71363: PUSH
71364: LD_INT 0
71366: PUSH
71367: LD_INT 4
71369: NEG
71370: PUSH
71371: EMPTY
71372: LIST
71373: LIST
71374: PUSH
71375: LD_INT 0
71377: PUSH
71378: LD_INT 5
71380: NEG
71381: PUSH
71382: EMPTY
71383: LIST
71384: LIST
71385: PUSH
71386: LD_INT 1
71388: PUSH
71389: LD_INT 4
71391: NEG
71392: PUSH
71393: EMPTY
71394: LIST
71395: LIST
71396: PUSH
71397: LD_INT 1
71399: PUSH
71400: LD_INT 3
71402: NEG
71403: PUSH
71404: EMPTY
71405: LIST
71406: LIST
71407: PUSH
71408: LD_INT 0
71410: PUSH
71411: LD_INT 3
71413: NEG
71414: PUSH
71415: EMPTY
71416: LIST
71417: LIST
71418: PUSH
71419: LD_INT 1
71421: NEG
71422: PUSH
71423: LD_INT 4
71425: NEG
71426: PUSH
71427: EMPTY
71428: LIST
71429: LIST
71430: PUSH
71431: LD_INT 1
71433: NEG
71434: PUSH
71435: LD_INT 5
71437: NEG
71438: PUSH
71439: EMPTY
71440: LIST
71441: LIST
71442: PUSH
71443: LD_INT 2
71445: PUSH
71446: LD_INT 3
71448: NEG
71449: PUSH
71450: EMPTY
71451: LIST
71452: LIST
71453: PUSH
71454: LD_INT 2
71456: NEG
71457: PUSH
71458: LD_INT 5
71460: NEG
71461: PUSH
71462: EMPTY
71463: LIST
71464: LIST
71465: PUSH
71466: EMPTY
71467: LIST
71468: LIST
71469: LIST
71470: LIST
71471: LIST
71472: LIST
71473: LIST
71474: LIST
71475: LIST
71476: LIST
71477: LIST
71478: LIST
71479: LIST
71480: LIST
71481: LIST
71482: LIST
71483: LIST
71484: LIST
71485: LIST
71486: LIST
71487: LIST
71488: LIST
71489: LIST
71490: LIST
71491: LIST
71492: LIST
71493: LIST
71494: LIST
71495: LIST
71496: LIST
71497: LIST
71498: LIST
71499: LIST
71500: LIST
71501: LIST
71502: LIST
71503: LIST
71504: LIST
71505: LIST
71506: LIST
71507: LIST
71508: LIST
71509: LIST
71510: LIST
71511: LIST
71512: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
71513: LD_ADDR_VAR 0 31
71517: PUSH
71518: LD_INT 0
71520: PUSH
71521: LD_INT 4
71523: PUSH
71524: EMPTY
71525: LIST
71526: LIST
71527: PUSH
71528: LD_INT 0
71530: PUSH
71531: LD_INT 3
71533: PUSH
71534: EMPTY
71535: LIST
71536: LIST
71537: PUSH
71538: LD_INT 1
71540: PUSH
71541: LD_INT 4
71543: PUSH
71544: EMPTY
71545: LIST
71546: LIST
71547: PUSH
71548: LD_INT 1
71550: PUSH
71551: LD_INT 5
71553: PUSH
71554: EMPTY
71555: LIST
71556: LIST
71557: PUSH
71558: LD_INT 0
71560: PUSH
71561: LD_INT 5
71563: PUSH
71564: EMPTY
71565: LIST
71566: LIST
71567: PUSH
71568: LD_INT 1
71570: NEG
71571: PUSH
71572: LD_INT 4
71574: PUSH
71575: EMPTY
71576: LIST
71577: LIST
71578: PUSH
71579: LD_INT 1
71581: NEG
71582: PUSH
71583: LD_INT 3
71585: PUSH
71586: EMPTY
71587: LIST
71588: LIST
71589: PUSH
71590: LD_INT 2
71592: PUSH
71593: LD_INT 5
71595: PUSH
71596: EMPTY
71597: LIST
71598: LIST
71599: PUSH
71600: LD_INT 2
71602: NEG
71603: PUSH
71604: LD_INT 3
71606: PUSH
71607: EMPTY
71608: LIST
71609: LIST
71610: PUSH
71611: LD_INT 3
71613: NEG
71614: PUSH
71615: LD_INT 0
71617: PUSH
71618: EMPTY
71619: LIST
71620: LIST
71621: PUSH
71622: LD_INT 3
71624: NEG
71625: PUSH
71626: LD_INT 1
71628: NEG
71629: PUSH
71630: EMPTY
71631: LIST
71632: LIST
71633: PUSH
71634: LD_INT 2
71636: NEG
71637: PUSH
71638: LD_INT 0
71640: PUSH
71641: EMPTY
71642: LIST
71643: LIST
71644: PUSH
71645: LD_INT 2
71647: NEG
71648: PUSH
71649: LD_INT 1
71651: PUSH
71652: EMPTY
71653: LIST
71654: LIST
71655: PUSH
71656: LD_INT 3
71658: NEG
71659: PUSH
71660: LD_INT 1
71662: PUSH
71663: EMPTY
71664: LIST
71665: LIST
71666: PUSH
71667: LD_INT 4
71669: NEG
71670: PUSH
71671: LD_INT 0
71673: PUSH
71674: EMPTY
71675: LIST
71676: LIST
71677: PUSH
71678: LD_INT 4
71680: NEG
71681: PUSH
71682: LD_INT 1
71684: NEG
71685: PUSH
71686: EMPTY
71687: LIST
71688: LIST
71689: PUSH
71690: LD_INT 4
71692: NEG
71693: PUSH
71694: LD_INT 2
71696: NEG
71697: PUSH
71698: EMPTY
71699: LIST
71700: LIST
71701: PUSH
71702: LD_INT 2
71704: NEG
71705: PUSH
71706: LD_INT 2
71708: PUSH
71709: EMPTY
71710: LIST
71711: LIST
71712: PUSH
71713: LD_INT 4
71715: NEG
71716: PUSH
71717: LD_INT 4
71719: NEG
71720: PUSH
71721: EMPTY
71722: LIST
71723: LIST
71724: PUSH
71725: LD_INT 4
71727: NEG
71728: PUSH
71729: LD_INT 5
71731: NEG
71732: PUSH
71733: EMPTY
71734: LIST
71735: LIST
71736: PUSH
71737: LD_INT 3
71739: NEG
71740: PUSH
71741: LD_INT 4
71743: NEG
71744: PUSH
71745: EMPTY
71746: LIST
71747: LIST
71748: PUSH
71749: LD_INT 3
71751: NEG
71752: PUSH
71753: LD_INT 3
71755: NEG
71756: PUSH
71757: EMPTY
71758: LIST
71759: LIST
71760: PUSH
71761: LD_INT 4
71763: NEG
71764: PUSH
71765: LD_INT 3
71767: NEG
71768: PUSH
71769: EMPTY
71770: LIST
71771: LIST
71772: PUSH
71773: LD_INT 5
71775: NEG
71776: PUSH
71777: LD_INT 4
71779: NEG
71780: PUSH
71781: EMPTY
71782: LIST
71783: LIST
71784: PUSH
71785: LD_INT 5
71787: NEG
71788: PUSH
71789: LD_INT 5
71791: NEG
71792: PUSH
71793: EMPTY
71794: LIST
71795: LIST
71796: PUSH
71797: LD_INT 3
71799: NEG
71800: PUSH
71801: LD_INT 5
71803: NEG
71804: PUSH
71805: EMPTY
71806: LIST
71807: LIST
71808: PUSH
71809: LD_INT 5
71811: NEG
71812: PUSH
71813: LD_INT 3
71815: NEG
71816: PUSH
71817: EMPTY
71818: LIST
71819: LIST
71820: PUSH
71821: LD_INT 0
71823: PUSH
71824: LD_INT 3
71826: NEG
71827: PUSH
71828: EMPTY
71829: LIST
71830: LIST
71831: PUSH
71832: LD_INT 0
71834: PUSH
71835: LD_INT 4
71837: NEG
71838: PUSH
71839: EMPTY
71840: LIST
71841: LIST
71842: PUSH
71843: LD_INT 1
71845: PUSH
71846: LD_INT 3
71848: NEG
71849: PUSH
71850: EMPTY
71851: LIST
71852: LIST
71853: PUSH
71854: LD_INT 1
71856: PUSH
71857: LD_INT 2
71859: NEG
71860: PUSH
71861: EMPTY
71862: LIST
71863: LIST
71864: PUSH
71865: LD_INT 0
71867: PUSH
71868: LD_INT 2
71870: NEG
71871: PUSH
71872: EMPTY
71873: LIST
71874: LIST
71875: PUSH
71876: LD_INT 1
71878: NEG
71879: PUSH
71880: LD_INT 3
71882: NEG
71883: PUSH
71884: EMPTY
71885: LIST
71886: LIST
71887: PUSH
71888: LD_INT 1
71890: NEG
71891: PUSH
71892: LD_INT 4
71894: NEG
71895: PUSH
71896: EMPTY
71897: LIST
71898: LIST
71899: PUSH
71900: LD_INT 2
71902: PUSH
71903: LD_INT 2
71905: NEG
71906: PUSH
71907: EMPTY
71908: LIST
71909: LIST
71910: PUSH
71911: LD_INT 2
71913: NEG
71914: PUSH
71915: LD_INT 4
71917: NEG
71918: PUSH
71919: EMPTY
71920: LIST
71921: LIST
71922: PUSH
71923: LD_INT 4
71925: PUSH
71926: LD_INT 0
71928: PUSH
71929: EMPTY
71930: LIST
71931: LIST
71932: PUSH
71933: LD_INT 4
71935: PUSH
71936: LD_INT 1
71938: NEG
71939: PUSH
71940: EMPTY
71941: LIST
71942: LIST
71943: PUSH
71944: LD_INT 5
71946: PUSH
71947: LD_INT 0
71949: PUSH
71950: EMPTY
71951: LIST
71952: LIST
71953: PUSH
71954: LD_INT 5
71956: PUSH
71957: LD_INT 1
71959: PUSH
71960: EMPTY
71961: LIST
71962: LIST
71963: PUSH
71964: LD_INT 4
71966: PUSH
71967: LD_INT 1
71969: PUSH
71970: EMPTY
71971: LIST
71972: LIST
71973: PUSH
71974: LD_INT 3
71976: PUSH
71977: LD_INT 0
71979: PUSH
71980: EMPTY
71981: LIST
71982: LIST
71983: PUSH
71984: LD_INT 3
71986: PUSH
71987: LD_INT 1
71989: NEG
71990: PUSH
71991: EMPTY
71992: LIST
71993: LIST
71994: PUSH
71995: LD_INT 3
71997: PUSH
71998: LD_INT 2
72000: NEG
72001: PUSH
72002: EMPTY
72003: LIST
72004: LIST
72005: PUSH
72006: LD_INT 5
72008: PUSH
72009: LD_INT 2
72011: PUSH
72012: EMPTY
72013: LIST
72014: LIST
72015: PUSH
72016: EMPTY
72017: LIST
72018: LIST
72019: LIST
72020: LIST
72021: LIST
72022: LIST
72023: LIST
72024: LIST
72025: LIST
72026: LIST
72027: LIST
72028: LIST
72029: LIST
72030: LIST
72031: LIST
72032: LIST
72033: LIST
72034: LIST
72035: LIST
72036: LIST
72037: LIST
72038: LIST
72039: LIST
72040: LIST
72041: LIST
72042: LIST
72043: LIST
72044: LIST
72045: LIST
72046: LIST
72047: LIST
72048: LIST
72049: LIST
72050: LIST
72051: LIST
72052: LIST
72053: LIST
72054: LIST
72055: LIST
72056: LIST
72057: LIST
72058: LIST
72059: LIST
72060: LIST
72061: LIST
72062: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
72063: LD_ADDR_VAR 0 32
72067: PUSH
72068: LD_INT 4
72070: NEG
72071: PUSH
72072: LD_INT 0
72074: PUSH
72075: EMPTY
72076: LIST
72077: LIST
72078: PUSH
72079: LD_INT 4
72081: NEG
72082: PUSH
72083: LD_INT 1
72085: NEG
72086: PUSH
72087: EMPTY
72088: LIST
72089: LIST
72090: PUSH
72091: LD_INT 3
72093: NEG
72094: PUSH
72095: LD_INT 0
72097: PUSH
72098: EMPTY
72099: LIST
72100: LIST
72101: PUSH
72102: LD_INT 3
72104: NEG
72105: PUSH
72106: LD_INT 1
72108: PUSH
72109: EMPTY
72110: LIST
72111: LIST
72112: PUSH
72113: LD_INT 4
72115: NEG
72116: PUSH
72117: LD_INT 1
72119: PUSH
72120: EMPTY
72121: LIST
72122: LIST
72123: PUSH
72124: LD_INT 5
72126: NEG
72127: PUSH
72128: LD_INT 0
72130: PUSH
72131: EMPTY
72132: LIST
72133: LIST
72134: PUSH
72135: LD_INT 5
72137: NEG
72138: PUSH
72139: LD_INT 1
72141: NEG
72142: PUSH
72143: EMPTY
72144: LIST
72145: LIST
72146: PUSH
72147: LD_INT 5
72149: NEG
72150: PUSH
72151: LD_INT 2
72153: NEG
72154: PUSH
72155: EMPTY
72156: LIST
72157: LIST
72158: PUSH
72159: LD_INT 3
72161: NEG
72162: PUSH
72163: LD_INT 2
72165: PUSH
72166: EMPTY
72167: LIST
72168: LIST
72169: PUSH
72170: LD_INT 3
72172: NEG
72173: PUSH
72174: LD_INT 3
72176: NEG
72177: PUSH
72178: EMPTY
72179: LIST
72180: LIST
72181: PUSH
72182: LD_INT 3
72184: NEG
72185: PUSH
72186: LD_INT 4
72188: NEG
72189: PUSH
72190: EMPTY
72191: LIST
72192: LIST
72193: PUSH
72194: LD_INT 2
72196: NEG
72197: PUSH
72198: LD_INT 3
72200: NEG
72201: PUSH
72202: EMPTY
72203: LIST
72204: LIST
72205: PUSH
72206: LD_INT 2
72208: NEG
72209: PUSH
72210: LD_INT 2
72212: NEG
72213: PUSH
72214: EMPTY
72215: LIST
72216: LIST
72217: PUSH
72218: LD_INT 3
72220: NEG
72221: PUSH
72222: LD_INT 2
72224: NEG
72225: PUSH
72226: EMPTY
72227: LIST
72228: LIST
72229: PUSH
72230: LD_INT 4
72232: NEG
72233: PUSH
72234: LD_INT 3
72236: NEG
72237: PUSH
72238: EMPTY
72239: LIST
72240: LIST
72241: PUSH
72242: LD_INT 4
72244: NEG
72245: PUSH
72246: LD_INT 4
72248: NEG
72249: PUSH
72250: EMPTY
72251: LIST
72252: LIST
72253: PUSH
72254: LD_INT 2
72256: NEG
72257: PUSH
72258: LD_INT 4
72260: NEG
72261: PUSH
72262: EMPTY
72263: LIST
72264: LIST
72265: PUSH
72266: LD_INT 4
72268: NEG
72269: PUSH
72270: LD_INT 2
72272: NEG
72273: PUSH
72274: EMPTY
72275: LIST
72276: LIST
72277: PUSH
72278: LD_INT 0
72280: PUSH
72281: LD_INT 4
72283: NEG
72284: PUSH
72285: EMPTY
72286: LIST
72287: LIST
72288: PUSH
72289: LD_INT 0
72291: PUSH
72292: LD_INT 5
72294: NEG
72295: PUSH
72296: EMPTY
72297: LIST
72298: LIST
72299: PUSH
72300: LD_INT 1
72302: PUSH
72303: LD_INT 4
72305: NEG
72306: PUSH
72307: EMPTY
72308: LIST
72309: LIST
72310: PUSH
72311: LD_INT 1
72313: PUSH
72314: LD_INT 3
72316: NEG
72317: PUSH
72318: EMPTY
72319: LIST
72320: LIST
72321: PUSH
72322: LD_INT 0
72324: PUSH
72325: LD_INT 3
72327: NEG
72328: PUSH
72329: EMPTY
72330: LIST
72331: LIST
72332: PUSH
72333: LD_INT 1
72335: NEG
72336: PUSH
72337: LD_INT 4
72339: NEG
72340: PUSH
72341: EMPTY
72342: LIST
72343: LIST
72344: PUSH
72345: LD_INT 1
72347: NEG
72348: PUSH
72349: LD_INT 5
72351: NEG
72352: PUSH
72353: EMPTY
72354: LIST
72355: LIST
72356: PUSH
72357: LD_INT 2
72359: PUSH
72360: LD_INT 3
72362: NEG
72363: PUSH
72364: EMPTY
72365: LIST
72366: LIST
72367: PUSH
72368: LD_INT 2
72370: NEG
72371: PUSH
72372: LD_INT 5
72374: NEG
72375: PUSH
72376: EMPTY
72377: LIST
72378: LIST
72379: PUSH
72380: LD_INT 3
72382: PUSH
72383: LD_INT 0
72385: PUSH
72386: EMPTY
72387: LIST
72388: LIST
72389: PUSH
72390: LD_INT 3
72392: PUSH
72393: LD_INT 1
72395: NEG
72396: PUSH
72397: EMPTY
72398: LIST
72399: LIST
72400: PUSH
72401: LD_INT 4
72403: PUSH
72404: LD_INT 0
72406: PUSH
72407: EMPTY
72408: LIST
72409: LIST
72410: PUSH
72411: LD_INT 4
72413: PUSH
72414: LD_INT 1
72416: PUSH
72417: EMPTY
72418: LIST
72419: LIST
72420: PUSH
72421: LD_INT 3
72423: PUSH
72424: LD_INT 1
72426: PUSH
72427: EMPTY
72428: LIST
72429: LIST
72430: PUSH
72431: LD_INT 2
72433: PUSH
72434: LD_INT 0
72436: PUSH
72437: EMPTY
72438: LIST
72439: LIST
72440: PUSH
72441: LD_INT 2
72443: PUSH
72444: LD_INT 1
72446: NEG
72447: PUSH
72448: EMPTY
72449: LIST
72450: LIST
72451: PUSH
72452: LD_INT 2
72454: PUSH
72455: LD_INT 2
72457: NEG
72458: PUSH
72459: EMPTY
72460: LIST
72461: LIST
72462: PUSH
72463: LD_INT 4
72465: PUSH
72466: LD_INT 2
72468: PUSH
72469: EMPTY
72470: LIST
72471: LIST
72472: PUSH
72473: LD_INT 4
72475: PUSH
72476: LD_INT 4
72478: PUSH
72479: EMPTY
72480: LIST
72481: LIST
72482: PUSH
72483: LD_INT 4
72485: PUSH
72486: LD_INT 3
72488: PUSH
72489: EMPTY
72490: LIST
72491: LIST
72492: PUSH
72493: LD_INT 5
72495: PUSH
72496: LD_INT 4
72498: PUSH
72499: EMPTY
72500: LIST
72501: LIST
72502: PUSH
72503: LD_INT 5
72505: PUSH
72506: LD_INT 5
72508: PUSH
72509: EMPTY
72510: LIST
72511: LIST
72512: PUSH
72513: LD_INT 4
72515: PUSH
72516: LD_INT 5
72518: PUSH
72519: EMPTY
72520: LIST
72521: LIST
72522: PUSH
72523: LD_INT 3
72525: PUSH
72526: LD_INT 4
72528: PUSH
72529: EMPTY
72530: LIST
72531: LIST
72532: PUSH
72533: LD_INT 3
72535: PUSH
72536: LD_INT 3
72538: PUSH
72539: EMPTY
72540: LIST
72541: LIST
72542: PUSH
72543: LD_INT 5
72545: PUSH
72546: LD_INT 3
72548: PUSH
72549: EMPTY
72550: LIST
72551: LIST
72552: PUSH
72553: LD_INT 3
72555: PUSH
72556: LD_INT 5
72558: PUSH
72559: EMPTY
72560: LIST
72561: LIST
72562: PUSH
72563: EMPTY
72564: LIST
72565: LIST
72566: LIST
72567: LIST
72568: LIST
72569: LIST
72570: LIST
72571: LIST
72572: LIST
72573: LIST
72574: LIST
72575: LIST
72576: LIST
72577: LIST
72578: LIST
72579: LIST
72580: LIST
72581: LIST
72582: LIST
72583: LIST
72584: LIST
72585: LIST
72586: LIST
72587: LIST
72588: LIST
72589: LIST
72590: LIST
72591: LIST
72592: LIST
72593: LIST
72594: LIST
72595: LIST
72596: LIST
72597: LIST
72598: LIST
72599: LIST
72600: LIST
72601: LIST
72602: LIST
72603: LIST
72604: LIST
72605: LIST
72606: LIST
72607: LIST
72608: LIST
72609: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
72610: LD_ADDR_VAR 0 33
72614: PUSH
72615: LD_INT 4
72617: NEG
72618: PUSH
72619: LD_INT 4
72621: NEG
72622: PUSH
72623: EMPTY
72624: LIST
72625: LIST
72626: PUSH
72627: LD_INT 4
72629: NEG
72630: PUSH
72631: LD_INT 5
72633: NEG
72634: PUSH
72635: EMPTY
72636: LIST
72637: LIST
72638: PUSH
72639: LD_INT 3
72641: NEG
72642: PUSH
72643: LD_INT 4
72645: NEG
72646: PUSH
72647: EMPTY
72648: LIST
72649: LIST
72650: PUSH
72651: LD_INT 3
72653: NEG
72654: PUSH
72655: LD_INT 3
72657: NEG
72658: PUSH
72659: EMPTY
72660: LIST
72661: LIST
72662: PUSH
72663: LD_INT 4
72665: NEG
72666: PUSH
72667: LD_INT 3
72669: NEG
72670: PUSH
72671: EMPTY
72672: LIST
72673: LIST
72674: PUSH
72675: LD_INT 5
72677: NEG
72678: PUSH
72679: LD_INT 4
72681: NEG
72682: PUSH
72683: EMPTY
72684: LIST
72685: LIST
72686: PUSH
72687: LD_INT 5
72689: NEG
72690: PUSH
72691: LD_INT 5
72693: NEG
72694: PUSH
72695: EMPTY
72696: LIST
72697: LIST
72698: PUSH
72699: LD_INT 3
72701: NEG
72702: PUSH
72703: LD_INT 5
72705: NEG
72706: PUSH
72707: EMPTY
72708: LIST
72709: LIST
72710: PUSH
72711: LD_INT 5
72713: NEG
72714: PUSH
72715: LD_INT 3
72717: NEG
72718: PUSH
72719: EMPTY
72720: LIST
72721: LIST
72722: PUSH
72723: LD_INT 0
72725: PUSH
72726: LD_INT 3
72728: NEG
72729: PUSH
72730: EMPTY
72731: LIST
72732: LIST
72733: PUSH
72734: LD_INT 0
72736: PUSH
72737: LD_INT 4
72739: NEG
72740: PUSH
72741: EMPTY
72742: LIST
72743: LIST
72744: PUSH
72745: LD_INT 1
72747: PUSH
72748: LD_INT 3
72750: NEG
72751: PUSH
72752: EMPTY
72753: LIST
72754: LIST
72755: PUSH
72756: LD_INT 1
72758: PUSH
72759: LD_INT 2
72761: NEG
72762: PUSH
72763: EMPTY
72764: LIST
72765: LIST
72766: PUSH
72767: LD_INT 0
72769: PUSH
72770: LD_INT 2
72772: NEG
72773: PUSH
72774: EMPTY
72775: LIST
72776: LIST
72777: PUSH
72778: LD_INT 1
72780: NEG
72781: PUSH
72782: LD_INT 3
72784: NEG
72785: PUSH
72786: EMPTY
72787: LIST
72788: LIST
72789: PUSH
72790: LD_INT 1
72792: NEG
72793: PUSH
72794: LD_INT 4
72796: NEG
72797: PUSH
72798: EMPTY
72799: LIST
72800: LIST
72801: PUSH
72802: LD_INT 2
72804: PUSH
72805: LD_INT 2
72807: NEG
72808: PUSH
72809: EMPTY
72810: LIST
72811: LIST
72812: PUSH
72813: LD_INT 2
72815: NEG
72816: PUSH
72817: LD_INT 4
72819: NEG
72820: PUSH
72821: EMPTY
72822: LIST
72823: LIST
72824: PUSH
72825: LD_INT 4
72827: PUSH
72828: LD_INT 0
72830: PUSH
72831: EMPTY
72832: LIST
72833: LIST
72834: PUSH
72835: LD_INT 4
72837: PUSH
72838: LD_INT 1
72840: NEG
72841: PUSH
72842: EMPTY
72843: LIST
72844: LIST
72845: PUSH
72846: LD_INT 5
72848: PUSH
72849: LD_INT 0
72851: PUSH
72852: EMPTY
72853: LIST
72854: LIST
72855: PUSH
72856: LD_INT 5
72858: PUSH
72859: LD_INT 1
72861: PUSH
72862: EMPTY
72863: LIST
72864: LIST
72865: PUSH
72866: LD_INT 4
72868: PUSH
72869: LD_INT 1
72871: PUSH
72872: EMPTY
72873: LIST
72874: LIST
72875: PUSH
72876: LD_INT 3
72878: PUSH
72879: LD_INT 0
72881: PUSH
72882: EMPTY
72883: LIST
72884: LIST
72885: PUSH
72886: LD_INT 3
72888: PUSH
72889: LD_INT 1
72891: NEG
72892: PUSH
72893: EMPTY
72894: LIST
72895: LIST
72896: PUSH
72897: LD_INT 3
72899: PUSH
72900: LD_INT 2
72902: NEG
72903: PUSH
72904: EMPTY
72905: LIST
72906: LIST
72907: PUSH
72908: LD_INT 5
72910: PUSH
72911: LD_INT 2
72913: PUSH
72914: EMPTY
72915: LIST
72916: LIST
72917: PUSH
72918: LD_INT 3
72920: PUSH
72921: LD_INT 3
72923: PUSH
72924: EMPTY
72925: LIST
72926: LIST
72927: PUSH
72928: LD_INT 3
72930: PUSH
72931: LD_INT 2
72933: PUSH
72934: EMPTY
72935: LIST
72936: LIST
72937: PUSH
72938: LD_INT 4
72940: PUSH
72941: LD_INT 3
72943: PUSH
72944: EMPTY
72945: LIST
72946: LIST
72947: PUSH
72948: LD_INT 4
72950: PUSH
72951: LD_INT 4
72953: PUSH
72954: EMPTY
72955: LIST
72956: LIST
72957: PUSH
72958: LD_INT 3
72960: PUSH
72961: LD_INT 4
72963: PUSH
72964: EMPTY
72965: LIST
72966: LIST
72967: PUSH
72968: LD_INT 2
72970: PUSH
72971: LD_INT 3
72973: PUSH
72974: EMPTY
72975: LIST
72976: LIST
72977: PUSH
72978: LD_INT 2
72980: PUSH
72981: LD_INT 2
72983: PUSH
72984: EMPTY
72985: LIST
72986: LIST
72987: PUSH
72988: LD_INT 4
72990: PUSH
72991: LD_INT 2
72993: PUSH
72994: EMPTY
72995: LIST
72996: LIST
72997: PUSH
72998: LD_INT 2
73000: PUSH
73001: LD_INT 4
73003: PUSH
73004: EMPTY
73005: LIST
73006: LIST
73007: PUSH
73008: LD_INT 0
73010: PUSH
73011: LD_INT 4
73013: PUSH
73014: EMPTY
73015: LIST
73016: LIST
73017: PUSH
73018: LD_INT 0
73020: PUSH
73021: LD_INT 3
73023: PUSH
73024: EMPTY
73025: LIST
73026: LIST
73027: PUSH
73028: LD_INT 1
73030: PUSH
73031: LD_INT 4
73033: PUSH
73034: EMPTY
73035: LIST
73036: LIST
73037: PUSH
73038: LD_INT 1
73040: PUSH
73041: LD_INT 5
73043: PUSH
73044: EMPTY
73045: LIST
73046: LIST
73047: PUSH
73048: LD_INT 0
73050: PUSH
73051: LD_INT 5
73053: PUSH
73054: EMPTY
73055: LIST
73056: LIST
73057: PUSH
73058: LD_INT 1
73060: NEG
73061: PUSH
73062: LD_INT 4
73064: PUSH
73065: EMPTY
73066: LIST
73067: LIST
73068: PUSH
73069: LD_INT 1
73071: NEG
73072: PUSH
73073: LD_INT 3
73075: PUSH
73076: EMPTY
73077: LIST
73078: LIST
73079: PUSH
73080: LD_INT 2
73082: PUSH
73083: LD_INT 5
73085: PUSH
73086: EMPTY
73087: LIST
73088: LIST
73089: PUSH
73090: LD_INT 2
73092: NEG
73093: PUSH
73094: LD_INT 3
73096: PUSH
73097: EMPTY
73098: LIST
73099: LIST
73100: PUSH
73101: EMPTY
73102: LIST
73103: LIST
73104: LIST
73105: LIST
73106: LIST
73107: LIST
73108: LIST
73109: LIST
73110: LIST
73111: LIST
73112: LIST
73113: LIST
73114: LIST
73115: LIST
73116: LIST
73117: LIST
73118: LIST
73119: LIST
73120: LIST
73121: LIST
73122: LIST
73123: LIST
73124: LIST
73125: LIST
73126: LIST
73127: LIST
73128: LIST
73129: LIST
73130: LIST
73131: LIST
73132: LIST
73133: LIST
73134: LIST
73135: LIST
73136: LIST
73137: LIST
73138: LIST
73139: LIST
73140: LIST
73141: LIST
73142: LIST
73143: LIST
73144: LIST
73145: LIST
73146: LIST
73147: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
73148: LD_ADDR_VAR 0 34
73152: PUSH
73153: LD_INT 0
73155: PUSH
73156: LD_INT 4
73158: NEG
73159: PUSH
73160: EMPTY
73161: LIST
73162: LIST
73163: PUSH
73164: LD_INT 0
73166: PUSH
73167: LD_INT 5
73169: NEG
73170: PUSH
73171: EMPTY
73172: LIST
73173: LIST
73174: PUSH
73175: LD_INT 1
73177: PUSH
73178: LD_INT 4
73180: NEG
73181: PUSH
73182: EMPTY
73183: LIST
73184: LIST
73185: PUSH
73186: LD_INT 1
73188: PUSH
73189: LD_INT 3
73191: NEG
73192: PUSH
73193: EMPTY
73194: LIST
73195: LIST
73196: PUSH
73197: LD_INT 0
73199: PUSH
73200: LD_INT 3
73202: NEG
73203: PUSH
73204: EMPTY
73205: LIST
73206: LIST
73207: PUSH
73208: LD_INT 1
73210: NEG
73211: PUSH
73212: LD_INT 4
73214: NEG
73215: PUSH
73216: EMPTY
73217: LIST
73218: LIST
73219: PUSH
73220: LD_INT 1
73222: NEG
73223: PUSH
73224: LD_INT 5
73226: NEG
73227: PUSH
73228: EMPTY
73229: LIST
73230: LIST
73231: PUSH
73232: LD_INT 2
73234: PUSH
73235: LD_INT 3
73237: NEG
73238: PUSH
73239: EMPTY
73240: LIST
73241: LIST
73242: PUSH
73243: LD_INT 2
73245: NEG
73246: PUSH
73247: LD_INT 5
73249: NEG
73250: PUSH
73251: EMPTY
73252: LIST
73253: LIST
73254: PUSH
73255: LD_INT 3
73257: PUSH
73258: LD_INT 0
73260: PUSH
73261: EMPTY
73262: LIST
73263: LIST
73264: PUSH
73265: LD_INT 3
73267: PUSH
73268: LD_INT 1
73270: NEG
73271: PUSH
73272: EMPTY
73273: LIST
73274: LIST
73275: PUSH
73276: LD_INT 4
73278: PUSH
73279: LD_INT 0
73281: PUSH
73282: EMPTY
73283: LIST
73284: LIST
73285: PUSH
73286: LD_INT 4
73288: PUSH
73289: LD_INT 1
73291: PUSH
73292: EMPTY
73293: LIST
73294: LIST
73295: PUSH
73296: LD_INT 3
73298: PUSH
73299: LD_INT 1
73301: PUSH
73302: EMPTY
73303: LIST
73304: LIST
73305: PUSH
73306: LD_INT 2
73308: PUSH
73309: LD_INT 0
73311: PUSH
73312: EMPTY
73313: LIST
73314: LIST
73315: PUSH
73316: LD_INT 2
73318: PUSH
73319: LD_INT 1
73321: NEG
73322: PUSH
73323: EMPTY
73324: LIST
73325: LIST
73326: PUSH
73327: LD_INT 2
73329: PUSH
73330: LD_INT 2
73332: NEG
73333: PUSH
73334: EMPTY
73335: LIST
73336: LIST
73337: PUSH
73338: LD_INT 4
73340: PUSH
73341: LD_INT 2
73343: PUSH
73344: EMPTY
73345: LIST
73346: LIST
73347: PUSH
73348: LD_INT 4
73350: PUSH
73351: LD_INT 4
73353: PUSH
73354: EMPTY
73355: LIST
73356: LIST
73357: PUSH
73358: LD_INT 4
73360: PUSH
73361: LD_INT 3
73363: PUSH
73364: EMPTY
73365: LIST
73366: LIST
73367: PUSH
73368: LD_INT 5
73370: PUSH
73371: LD_INT 4
73373: PUSH
73374: EMPTY
73375: LIST
73376: LIST
73377: PUSH
73378: LD_INT 5
73380: PUSH
73381: LD_INT 5
73383: PUSH
73384: EMPTY
73385: LIST
73386: LIST
73387: PUSH
73388: LD_INT 4
73390: PUSH
73391: LD_INT 5
73393: PUSH
73394: EMPTY
73395: LIST
73396: LIST
73397: PUSH
73398: LD_INT 3
73400: PUSH
73401: LD_INT 4
73403: PUSH
73404: EMPTY
73405: LIST
73406: LIST
73407: PUSH
73408: LD_INT 3
73410: PUSH
73411: LD_INT 3
73413: PUSH
73414: EMPTY
73415: LIST
73416: LIST
73417: PUSH
73418: LD_INT 5
73420: PUSH
73421: LD_INT 3
73423: PUSH
73424: EMPTY
73425: LIST
73426: LIST
73427: PUSH
73428: LD_INT 3
73430: PUSH
73431: LD_INT 5
73433: PUSH
73434: EMPTY
73435: LIST
73436: LIST
73437: PUSH
73438: LD_INT 0
73440: PUSH
73441: LD_INT 3
73443: PUSH
73444: EMPTY
73445: LIST
73446: LIST
73447: PUSH
73448: LD_INT 0
73450: PUSH
73451: LD_INT 2
73453: PUSH
73454: EMPTY
73455: LIST
73456: LIST
73457: PUSH
73458: LD_INT 1
73460: PUSH
73461: LD_INT 3
73463: PUSH
73464: EMPTY
73465: LIST
73466: LIST
73467: PUSH
73468: LD_INT 1
73470: PUSH
73471: LD_INT 4
73473: PUSH
73474: EMPTY
73475: LIST
73476: LIST
73477: PUSH
73478: LD_INT 0
73480: PUSH
73481: LD_INT 4
73483: PUSH
73484: EMPTY
73485: LIST
73486: LIST
73487: PUSH
73488: LD_INT 1
73490: NEG
73491: PUSH
73492: LD_INT 3
73494: PUSH
73495: EMPTY
73496: LIST
73497: LIST
73498: PUSH
73499: LD_INT 1
73501: NEG
73502: PUSH
73503: LD_INT 2
73505: PUSH
73506: EMPTY
73507: LIST
73508: LIST
73509: PUSH
73510: LD_INT 2
73512: PUSH
73513: LD_INT 4
73515: PUSH
73516: EMPTY
73517: LIST
73518: LIST
73519: PUSH
73520: LD_INT 2
73522: NEG
73523: PUSH
73524: LD_INT 2
73526: PUSH
73527: EMPTY
73528: LIST
73529: LIST
73530: PUSH
73531: LD_INT 4
73533: NEG
73534: PUSH
73535: LD_INT 0
73537: PUSH
73538: EMPTY
73539: LIST
73540: LIST
73541: PUSH
73542: LD_INT 4
73544: NEG
73545: PUSH
73546: LD_INT 1
73548: NEG
73549: PUSH
73550: EMPTY
73551: LIST
73552: LIST
73553: PUSH
73554: LD_INT 3
73556: NEG
73557: PUSH
73558: LD_INT 0
73560: PUSH
73561: EMPTY
73562: LIST
73563: LIST
73564: PUSH
73565: LD_INT 3
73567: NEG
73568: PUSH
73569: LD_INT 1
73571: PUSH
73572: EMPTY
73573: LIST
73574: LIST
73575: PUSH
73576: LD_INT 4
73578: NEG
73579: PUSH
73580: LD_INT 1
73582: PUSH
73583: EMPTY
73584: LIST
73585: LIST
73586: PUSH
73587: LD_INT 5
73589: NEG
73590: PUSH
73591: LD_INT 0
73593: PUSH
73594: EMPTY
73595: LIST
73596: LIST
73597: PUSH
73598: LD_INT 5
73600: NEG
73601: PUSH
73602: LD_INT 1
73604: NEG
73605: PUSH
73606: EMPTY
73607: LIST
73608: LIST
73609: PUSH
73610: LD_INT 5
73612: NEG
73613: PUSH
73614: LD_INT 2
73616: NEG
73617: PUSH
73618: EMPTY
73619: LIST
73620: LIST
73621: PUSH
73622: LD_INT 3
73624: NEG
73625: PUSH
73626: LD_INT 2
73628: PUSH
73629: EMPTY
73630: LIST
73631: LIST
73632: PUSH
73633: EMPTY
73634: LIST
73635: LIST
73636: LIST
73637: LIST
73638: LIST
73639: LIST
73640: LIST
73641: LIST
73642: LIST
73643: LIST
73644: LIST
73645: LIST
73646: LIST
73647: LIST
73648: LIST
73649: LIST
73650: LIST
73651: LIST
73652: LIST
73653: LIST
73654: LIST
73655: LIST
73656: LIST
73657: LIST
73658: LIST
73659: LIST
73660: LIST
73661: LIST
73662: LIST
73663: LIST
73664: LIST
73665: LIST
73666: LIST
73667: LIST
73668: LIST
73669: LIST
73670: LIST
73671: LIST
73672: LIST
73673: LIST
73674: LIST
73675: LIST
73676: LIST
73677: LIST
73678: LIST
73679: ST_TO_ADDR
// end ; end ;
73680: GO 73683
73682: POP
// case btype of b_depot , b_warehouse :
73683: LD_VAR 0 1
73687: PUSH
73688: LD_INT 0
73690: DOUBLE
73691: EQUAL
73692: IFTRUE 73702
73694: LD_INT 1
73696: DOUBLE
73697: EQUAL
73698: IFTRUE 73702
73700: GO 73903
73702: POP
// case nation of nation_american :
73703: LD_VAR 0 5
73707: PUSH
73708: LD_INT 1
73710: DOUBLE
73711: EQUAL
73712: IFTRUE 73716
73714: GO 73772
73716: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
73717: LD_ADDR_VAR 0 9
73721: PUSH
73722: LD_VAR 0 11
73726: PUSH
73727: LD_VAR 0 12
73731: PUSH
73732: LD_VAR 0 13
73736: PUSH
73737: LD_VAR 0 14
73741: PUSH
73742: LD_VAR 0 15
73746: PUSH
73747: LD_VAR 0 16
73751: PUSH
73752: EMPTY
73753: LIST
73754: LIST
73755: LIST
73756: LIST
73757: LIST
73758: LIST
73759: PUSH
73760: LD_VAR 0 4
73764: PUSH
73765: LD_INT 1
73767: PLUS
73768: ARRAY
73769: ST_TO_ADDR
73770: GO 73901
73772: LD_INT 2
73774: DOUBLE
73775: EQUAL
73776: IFTRUE 73780
73778: GO 73836
73780: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
73781: LD_ADDR_VAR 0 9
73785: PUSH
73786: LD_VAR 0 17
73790: PUSH
73791: LD_VAR 0 18
73795: PUSH
73796: LD_VAR 0 19
73800: PUSH
73801: LD_VAR 0 20
73805: PUSH
73806: LD_VAR 0 21
73810: PUSH
73811: LD_VAR 0 22
73815: PUSH
73816: EMPTY
73817: LIST
73818: LIST
73819: LIST
73820: LIST
73821: LIST
73822: LIST
73823: PUSH
73824: LD_VAR 0 4
73828: PUSH
73829: LD_INT 1
73831: PLUS
73832: ARRAY
73833: ST_TO_ADDR
73834: GO 73901
73836: LD_INT 3
73838: DOUBLE
73839: EQUAL
73840: IFTRUE 73844
73842: GO 73900
73844: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
73845: LD_ADDR_VAR 0 9
73849: PUSH
73850: LD_VAR 0 23
73854: PUSH
73855: LD_VAR 0 24
73859: PUSH
73860: LD_VAR 0 25
73864: PUSH
73865: LD_VAR 0 26
73869: PUSH
73870: LD_VAR 0 27
73874: PUSH
73875: LD_VAR 0 28
73879: PUSH
73880: EMPTY
73881: LIST
73882: LIST
73883: LIST
73884: LIST
73885: LIST
73886: LIST
73887: PUSH
73888: LD_VAR 0 4
73892: PUSH
73893: LD_INT 1
73895: PLUS
73896: ARRAY
73897: ST_TO_ADDR
73898: GO 73901
73900: POP
73901: GO 74456
73903: LD_INT 2
73905: DOUBLE
73906: EQUAL
73907: IFTRUE 73917
73909: LD_INT 3
73911: DOUBLE
73912: EQUAL
73913: IFTRUE 73917
73915: GO 73973
73917: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
73918: LD_ADDR_VAR 0 9
73922: PUSH
73923: LD_VAR 0 29
73927: PUSH
73928: LD_VAR 0 30
73932: PUSH
73933: LD_VAR 0 31
73937: PUSH
73938: LD_VAR 0 32
73942: PUSH
73943: LD_VAR 0 33
73947: PUSH
73948: LD_VAR 0 34
73952: PUSH
73953: EMPTY
73954: LIST
73955: LIST
73956: LIST
73957: LIST
73958: LIST
73959: LIST
73960: PUSH
73961: LD_VAR 0 4
73965: PUSH
73966: LD_INT 1
73968: PLUS
73969: ARRAY
73970: ST_TO_ADDR
73971: GO 74456
73973: LD_INT 16
73975: DOUBLE
73976: EQUAL
73977: IFTRUE 74035
73979: LD_INT 17
73981: DOUBLE
73982: EQUAL
73983: IFTRUE 74035
73985: LD_INT 18
73987: DOUBLE
73988: EQUAL
73989: IFTRUE 74035
73991: LD_INT 19
73993: DOUBLE
73994: EQUAL
73995: IFTRUE 74035
73997: LD_INT 22
73999: DOUBLE
74000: EQUAL
74001: IFTRUE 74035
74003: LD_INT 20
74005: DOUBLE
74006: EQUAL
74007: IFTRUE 74035
74009: LD_INT 21
74011: DOUBLE
74012: EQUAL
74013: IFTRUE 74035
74015: LD_INT 23
74017: DOUBLE
74018: EQUAL
74019: IFTRUE 74035
74021: LD_INT 24
74023: DOUBLE
74024: EQUAL
74025: IFTRUE 74035
74027: LD_INT 25
74029: DOUBLE
74030: EQUAL
74031: IFTRUE 74035
74033: GO 74091
74035: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
74036: LD_ADDR_VAR 0 9
74040: PUSH
74041: LD_VAR 0 35
74045: PUSH
74046: LD_VAR 0 36
74050: PUSH
74051: LD_VAR 0 37
74055: PUSH
74056: LD_VAR 0 38
74060: PUSH
74061: LD_VAR 0 39
74065: PUSH
74066: LD_VAR 0 40
74070: PUSH
74071: EMPTY
74072: LIST
74073: LIST
74074: LIST
74075: LIST
74076: LIST
74077: LIST
74078: PUSH
74079: LD_VAR 0 4
74083: PUSH
74084: LD_INT 1
74086: PLUS
74087: ARRAY
74088: ST_TO_ADDR
74089: GO 74456
74091: LD_INT 6
74093: DOUBLE
74094: EQUAL
74095: IFTRUE 74147
74097: LD_INT 7
74099: DOUBLE
74100: EQUAL
74101: IFTRUE 74147
74103: LD_INT 8
74105: DOUBLE
74106: EQUAL
74107: IFTRUE 74147
74109: LD_INT 13
74111: DOUBLE
74112: EQUAL
74113: IFTRUE 74147
74115: LD_INT 12
74117: DOUBLE
74118: EQUAL
74119: IFTRUE 74147
74121: LD_INT 15
74123: DOUBLE
74124: EQUAL
74125: IFTRUE 74147
74127: LD_INT 11
74129: DOUBLE
74130: EQUAL
74131: IFTRUE 74147
74133: LD_INT 14
74135: DOUBLE
74136: EQUAL
74137: IFTRUE 74147
74139: LD_INT 10
74141: DOUBLE
74142: EQUAL
74143: IFTRUE 74147
74145: GO 74203
74147: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
74148: LD_ADDR_VAR 0 9
74152: PUSH
74153: LD_VAR 0 41
74157: PUSH
74158: LD_VAR 0 42
74162: PUSH
74163: LD_VAR 0 43
74167: PUSH
74168: LD_VAR 0 44
74172: PUSH
74173: LD_VAR 0 45
74177: PUSH
74178: LD_VAR 0 46
74182: PUSH
74183: EMPTY
74184: LIST
74185: LIST
74186: LIST
74187: LIST
74188: LIST
74189: LIST
74190: PUSH
74191: LD_VAR 0 4
74195: PUSH
74196: LD_INT 1
74198: PLUS
74199: ARRAY
74200: ST_TO_ADDR
74201: GO 74456
74203: LD_INT 36
74205: DOUBLE
74206: EQUAL
74207: IFTRUE 74211
74209: GO 74267
74211: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
74212: LD_ADDR_VAR 0 9
74216: PUSH
74217: LD_VAR 0 47
74221: PUSH
74222: LD_VAR 0 48
74226: PUSH
74227: LD_VAR 0 49
74231: PUSH
74232: LD_VAR 0 50
74236: PUSH
74237: LD_VAR 0 51
74241: PUSH
74242: LD_VAR 0 52
74246: PUSH
74247: EMPTY
74248: LIST
74249: LIST
74250: LIST
74251: LIST
74252: LIST
74253: LIST
74254: PUSH
74255: LD_VAR 0 4
74259: PUSH
74260: LD_INT 1
74262: PLUS
74263: ARRAY
74264: ST_TO_ADDR
74265: GO 74456
74267: LD_INT 4
74269: DOUBLE
74270: EQUAL
74271: IFTRUE 74293
74273: LD_INT 5
74275: DOUBLE
74276: EQUAL
74277: IFTRUE 74293
74279: LD_INT 34
74281: DOUBLE
74282: EQUAL
74283: IFTRUE 74293
74285: LD_INT 37
74287: DOUBLE
74288: EQUAL
74289: IFTRUE 74293
74291: GO 74349
74293: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
74294: LD_ADDR_VAR 0 9
74298: PUSH
74299: LD_VAR 0 53
74303: PUSH
74304: LD_VAR 0 54
74308: PUSH
74309: LD_VAR 0 55
74313: PUSH
74314: LD_VAR 0 56
74318: PUSH
74319: LD_VAR 0 57
74323: PUSH
74324: LD_VAR 0 58
74328: PUSH
74329: EMPTY
74330: LIST
74331: LIST
74332: LIST
74333: LIST
74334: LIST
74335: LIST
74336: PUSH
74337: LD_VAR 0 4
74341: PUSH
74342: LD_INT 1
74344: PLUS
74345: ARRAY
74346: ST_TO_ADDR
74347: GO 74456
74349: LD_INT 31
74351: DOUBLE
74352: EQUAL
74353: IFTRUE 74399
74355: LD_INT 32
74357: DOUBLE
74358: EQUAL
74359: IFTRUE 74399
74361: LD_INT 33
74363: DOUBLE
74364: EQUAL
74365: IFTRUE 74399
74367: LD_INT 27
74369: DOUBLE
74370: EQUAL
74371: IFTRUE 74399
74373: LD_INT 26
74375: DOUBLE
74376: EQUAL
74377: IFTRUE 74399
74379: LD_INT 28
74381: DOUBLE
74382: EQUAL
74383: IFTRUE 74399
74385: LD_INT 29
74387: DOUBLE
74388: EQUAL
74389: IFTRUE 74399
74391: LD_INT 30
74393: DOUBLE
74394: EQUAL
74395: IFTRUE 74399
74397: GO 74455
74399: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
74400: LD_ADDR_VAR 0 9
74404: PUSH
74405: LD_VAR 0 59
74409: PUSH
74410: LD_VAR 0 60
74414: PUSH
74415: LD_VAR 0 61
74419: PUSH
74420: LD_VAR 0 62
74424: PUSH
74425: LD_VAR 0 63
74429: PUSH
74430: LD_VAR 0 64
74434: PUSH
74435: EMPTY
74436: LIST
74437: LIST
74438: LIST
74439: LIST
74440: LIST
74441: LIST
74442: PUSH
74443: LD_VAR 0 4
74447: PUSH
74448: LD_INT 1
74450: PLUS
74451: ARRAY
74452: ST_TO_ADDR
74453: GO 74456
74455: POP
// temp_list2 = [ ] ;
74456: LD_ADDR_VAR 0 10
74460: PUSH
74461: EMPTY
74462: ST_TO_ADDR
// for i in temp_list do
74463: LD_ADDR_VAR 0 8
74467: PUSH
74468: LD_VAR 0 9
74472: PUSH
74473: FOR_IN
74474: IFFALSE 74526
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
74476: LD_ADDR_VAR 0 10
74480: PUSH
74481: LD_VAR 0 10
74485: PUSH
74486: LD_VAR 0 8
74490: PUSH
74491: LD_INT 1
74493: ARRAY
74494: PUSH
74495: LD_VAR 0 2
74499: PLUS
74500: PUSH
74501: LD_VAR 0 8
74505: PUSH
74506: LD_INT 2
74508: ARRAY
74509: PUSH
74510: LD_VAR 0 3
74514: PLUS
74515: PUSH
74516: EMPTY
74517: LIST
74518: LIST
74519: PUSH
74520: EMPTY
74521: LIST
74522: ADD
74523: ST_TO_ADDR
74524: GO 74473
74526: POP
74527: POP
// result = temp_list2 ;
74528: LD_ADDR_VAR 0 7
74532: PUSH
74533: LD_VAR 0 10
74537: ST_TO_ADDR
// end ;
74538: LD_VAR 0 7
74542: RET
// export function EnemyInRange ( unit , dist ) ; begin
74543: LD_INT 0
74545: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
74546: LD_ADDR_VAR 0 3
74550: PUSH
74551: LD_VAR 0 1
74555: PPUSH
74556: CALL_OW 255
74560: PPUSH
74561: LD_VAR 0 1
74565: PPUSH
74566: CALL_OW 250
74570: PPUSH
74571: LD_VAR 0 1
74575: PPUSH
74576: CALL_OW 251
74580: PPUSH
74581: LD_VAR 0 2
74585: PPUSH
74586: CALL 47800 0 4
74590: PUSH
74591: LD_INT 4
74593: ARRAY
74594: ST_TO_ADDR
// end ;
74595: LD_VAR 0 3
74599: RET
// export function PlayerSeeMe ( unit ) ; begin
74600: LD_INT 0
74602: PPUSH
// result := See ( your_side , unit ) ;
74603: LD_ADDR_VAR 0 2
74607: PUSH
74608: LD_OWVAR 2
74612: PPUSH
74613: LD_VAR 0 1
74617: PPUSH
74618: CALL_OW 292
74622: ST_TO_ADDR
// end ;
74623: LD_VAR 0 2
74627: RET
// export function ReverseDir ( unit ) ; begin
74628: LD_INT 0
74630: PPUSH
// if not unit then
74631: LD_VAR 0 1
74635: NOT
74636: IFFALSE 74640
// exit ;
74638: GO 74663
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
74640: LD_ADDR_VAR 0 2
74644: PUSH
74645: LD_VAR 0 1
74649: PPUSH
74650: CALL_OW 254
74654: PUSH
74655: LD_INT 3
74657: PLUS
74658: PUSH
74659: LD_INT 6
74661: MOD
74662: ST_TO_ADDR
// end ;
74663: LD_VAR 0 2
74667: RET
// export function ReverseArray ( array ) ; var i ; begin
74668: LD_INT 0
74670: PPUSH
74671: PPUSH
// if not array then
74672: LD_VAR 0 1
74676: NOT
74677: IFFALSE 74681
// exit ;
74679: GO 74736
// result := [ ] ;
74681: LD_ADDR_VAR 0 2
74685: PUSH
74686: EMPTY
74687: ST_TO_ADDR
// for i := array downto 1 do
74688: LD_ADDR_VAR 0 3
74692: PUSH
74693: DOUBLE
74694: LD_VAR 0 1
74698: INC
74699: ST_TO_ADDR
74700: LD_INT 1
74702: PUSH
74703: FOR_DOWNTO
74704: IFFALSE 74734
// result := Join ( result , array [ i ] ) ;
74706: LD_ADDR_VAR 0 2
74710: PUSH
74711: LD_VAR 0 2
74715: PPUSH
74716: LD_VAR 0 1
74720: PUSH
74721: LD_VAR 0 3
74725: ARRAY
74726: PPUSH
74727: CALL 79578 0 2
74731: ST_TO_ADDR
74732: GO 74703
74734: POP
74735: POP
// end ;
74736: LD_VAR 0 2
74740: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
74741: LD_INT 0
74743: PPUSH
74744: PPUSH
74745: PPUSH
74746: PPUSH
74747: PPUSH
74748: PPUSH
// if not unit or not hexes then
74749: LD_VAR 0 1
74753: NOT
74754: IFTRUE 74763
74756: PUSH
74757: LD_VAR 0 2
74761: NOT
74762: OR
74763: IFFALSE 74767
// exit ;
74765: GO 74890
// dist := 9999 ;
74767: LD_ADDR_VAR 0 5
74771: PUSH
74772: LD_INT 9999
74774: ST_TO_ADDR
// for i = 1 to hexes do
74775: LD_ADDR_VAR 0 4
74779: PUSH
74780: DOUBLE
74781: LD_INT 1
74783: DEC
74784: ST_TO_ADDR
74785: LD_VAR 0 2
74789: PUSH
74790: FOR_TO
74791: IFFALSE 74878
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
74793: LD_ADDR_VAR 0 6
74797: PUSH
74798: LD_VAR 0 1
74802: PPUSH
74803: LD_VAR 0 2
74807: PUSH
74808: LD_VAR 0 4
74812: ARRAY
74813: PUSH
74814: LD_INT 1
74816: ARRAY
74817: PPUSH
74818: LD_VAR 0 2
74822: PUSH
74823: LD_VAR 0 4
74827: ARRAY
74828: PUSH
74829: LD_INT 2
74831: ARRAY
74832: PPUSH
74833: CALL_OW 297
74837: ST_TO_ADDR
// if tdist < dist then
74838: LD_VAR 0 6
74842: PUSH
74843: LD_VAR 0 5
74847: LESS
74848: IFFALSE 74876
// begin hex := hexes [ i ] ;
74850: LD_ADDR_VAR 0 8
74854: PUSH
74855: LD_VAR 0 2
74859: PUSH
74860: LD_VAR 0 4
74864: ARRAY
74865: ST_TO_ADDR
// dist := tdist ;
74866: LD_ADDR_VAR 0 5
74870: PUSH
74871: LD_VAR 0 6
74875: ST_TO_ADDR
// end ; end ;
74876: GO 74790
74878: POP
74879: POP
// result := hex ;
74880: LD_ADDR_VAR 0 3
74884: PUSH
74885: LD_VAR 0 8
74889: ST_TO_ADDR
// end ;
74890: LD_VAR 0 3
74894: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74895: LD_INT 0
74897: PPUSH
74898: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74899: LD_VAR 0 1
74903: NOT
74904: IFTRUE 74943
74906: PUSH
74907: LD_VAR 0 1
74911: PUSH
74912: LD_INT 21
74914: PUSH
74915: LD_INT 2
74917: PUSH
74918: EMPTY
74919: LIST
74920: LIST
74921: PUSH
74922: LD_INT 23
74924: PUSH
74925: LD_INT 2
74927: PUSH
74928: EMPTY
74929: LIST
74930: LIST
74931: PUSH
74932: EMPTY
74933: LIST
74934: LIST
74935: PPUSH
74936: CALL_OW 69
74940: IN
74941: NOT
74942: OR
74943: IFFALSE 74947
// exit ;
74945: GO 74994
// for i = 1 to 3 do
74947: LD_ADDR_VAR 0 3
74951: PUSH
74952: DOUBLE
74953: LD_INT 1
74955: DEC
74956: ST_TO_ADDR
74957: LD_INT 3
74959: PUSH
74960: FOR_TO
74961: IFFALSE 74992
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
74963: LD_VAR 0 1
74967: PPUSH
74968: CALL_OW 250
74972: PPUSH
74973: LD_VAR 0 1
74977: PPUSH
74978: CALL_OW 251
74982: PPUSH
74983: LD_INT 1
74985: PPUSH
74986: CALL_OW 453
74990: GO 74960
74992: POP
74993: POP
// end ;
74994: LD_VAR 0 2
74998: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74999: LD_INT 0
75001: PPUSH
75002: PPUSH
75003: PPUSH
75004: PPUSH
75005: PPUSH
75006: PPUSH
// if not unit or not enemy_unit then
75007: LD_VAR 0 1
75011: NOT
75012: IFTRUE 75021
75014: PUSH
75015: LD_VAR 0 2
75019: NOT
75020: OR
75021: IFFALSE 75025
// exit ;
75023: GO 75496
// if GetLives ( i ) < 250 then
75025: LD_VAR 0 4
75029: PPUSH
75030: CALL_OW 256
75034: PUSH
75035: LD_INT 250
75037: LESS
75038: IFFALSE 75051
// begin ComAutodestruct ( i ) ;
75040: LD_VAR 0 4
75044: PPUSH
75045: CALL 74895 0 1
// exit ;
75049: GO 75496
// end ; x := GetX ( enemy_unit ) ;
75051: LD_ADDR_VAR 0 7
75055: PUSH
75056: LD_VAR 0 2
75060: PPUSH
75061: CALL_OW 250
75065: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
75066: LD_ADDR_VAR 0 8
75070: PUSH
75071: LD_VAR 0 2
75075: PPUSH
75076: CALL_OW 251
75080: ST_TO_ADDR
// if not x or not y then
75081: LD_VAR 0 7
75085: NOT
75086: IFTRUE 75095
75088: PUSH
75089: LD_VAR 0 8
75093: NOT
75094: OR
75095: IFFALSE 75099
// exit ;
75097: GO 75496
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
75099: LD_ADDR_VAR 0 6
75103: PUSH
75104: LD_VAR 0 7
75108: PPUSH
75109: LD_INT 0
75111: PPUSH
75112: LD_INT 4
75114: PPUSH
75115: CALL_OW 272
75119: PUSH
75120: LD_VAR 0 8
75124: PPUSH
75125: LD_INT 0
75127: PPUSH
75128: LD_INT 4
75130: PPUSH
75131: CALL_OW 273
75135: PUSH
75136: EMPTY
75137: LIST
75138: LIST
75139: PUSH
75140: LD_VAR 0 7
75144: PPUSH
75145: LD_INT 1
75147: PPUSH
75148: LD_INT 4
75150: PPUSH
75151: CALL_OW 272
75155: PUSH
75156: LD_VAR 0 8
75160: PPUSH
75161: LD_INT 1
75163: PPUSH
75164: LD_INT 4
75166: PPUSH
75167: CALL_OW 273
75171: PUSH
75172: EMPTY
75173: LIST
75174: LIST
75175: PUSH
75176: LD_VAR 0 7
75180: PPUSH
75181: LD_INT 2
75183: PPUSH
75184: LD_INT 4
75186: PPUSH
75187: CALL_OW 272
75191: PUSH
75192: LD_VAR 0 8
75196: PPUSH
75197: LD_INT 2
75199: PPUSH
75200: LD_INT 4
75202: PPUSH
75203: CALL_OW 273
75207: PUSH
75208: EMPTY
75209: LIST
75210: LIST
75211: PUSH
75212: LD_VAR 0 7
75216: PPUSH
75217: LD_INT 3
75219: PPUSH
75220: LD_INT 4
75222: PPUSH
75223: CALL_OW 272
75227: PUSH
75228: LD_VAR 0 8
75232: PPUSH
75233: LD_INT 3
75235: PPUSH
75236: LD_INT 4
75238: PPUSH
75239: CALL_OW 273
75243: PUSH
75244: EMPTY
75245: LIST
75246: LIST
75247: PUSH
75248: LD_VAR 0 7
75252: PPUSH
75253: LD_INT 4
75255: PPUSH
75256: LD_INT 4
75258: PPUSH
75259: CALL_OW 272
75263: PUSH
75264: LD_VAR 0 8
75268: PPUSH
75269: LD_INT 4
75271: PPUSH
75272: LD_INT 4
75274: PPUSH
75275: CALL_OW 273
75279: PUSH
75280: EMPTY
75281: LIST
75282: LIST
75283: PUSH
75284: LD_VAR 0 7
75288: PPUSH
75289: LD_INT 5
75291: PPUSH
75292: LD_INT 4
75294: PPUSH
75295: CALL_OW 272
75299: PUSH
75300: LD_VAR 0 8
75304: PPUSH
75305: LD_INT 5
75307: PPUSH
75308: LD_INT 4
75310: PPUSH
75311: CALL_OW 273
75315: PUSH
75316: EMPTY
75317: LIST
75318: LIST
75319: PUSH
75320: EMPTY
75321: LIST
75322: LIST
75323: LIST
75324: LIST
75325: LIST
75326: LIST
75327: ST_TO_ADDR
// for i = tmp downto 1 do
75328: LD_ADDR_VAR 0 4
75332: PUSH
75333: DOUBLE
75334: LD_VAR 0 6
75338: INC
75339: ST_TO_ADDR
75340: LD_INT 1
75342: PUSH
75343: FOR_DOWNTO
75344: IFFALSE 75447
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
75346: LD_VAR 0 6
75350: PUSH
75351: LD_VAR 0 4
75355: ARRAY
75356: PUSH
75357: LD_INT 1
75359: ARRAY
75360: PPUSH
75361: LD_VAR 0 6
75365: PUSH
75366: LD_VAR 0 4
75370: ARRAY
75371: PUSH
75372: LD_INT 2
75374: ARRAY
75375: PPUSH
75376: CALL_OW 488
75380: NOT
75381: IFTRUE 75423
75383: PUSH
75384: LD_VAR 0 6
75388: PUSH
75389: LD_VAR 0 4
75393: ARRAY
75394: PUSH
75395: LD_INT 1
75397: ARRAY
75398: PPUSH
75399: LD_VAR 0 6
75403: PUSH
75404: LD_VAR 0 4
75408: ARRAY
75409: PUSH
75410: LD_INT 2
75412: ARRAY
75413: PPUSH
75414: CALL_OW 428
75418: PUSH
75419: LD_INT 0
75421: NONEQUAL
75422: OR
75423: IFFALSE 75445
// tmp := Delete ( tmp , i ) ;
75425: LD_ADDR_VAR 0 6
75429: PUSH
75430: LD_VAR 0 6
75434: PPUSH
75435: LD_VAR 0 4
75439: PPUSH
75440: CALL_OW 3
75444: ST_TO_ADDR
75445: GO 75343
75447: POP
75448: POP
// j := GetClosestHex ( unit , tmp ) ;
75449: LD_ADDR_VAR 0 5
75453: PUSH
75454: LD_VAR 0 1
75458: PPUSH
75459: LD_VAR 0 6
75463: PPUSH
75464: CALL 74741 0 2
75468: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
75469: LD_VAR 0 1
75473: PPUSH
75474: LD_VAR 0 5
75478: PUSH
75479: LD_INT 1
75481: ARRAY
75482: PPUSH
75483: LD_VAR 0 5
75487: PUSH
75488: LD_INT 2
75490: ARRAY
75491: PPUSH
75492: CALL_OW 111
// end ;
75496: LD_VAR 0 3
75500: RET
// export function PrepareApemanSoldier ( ) ; begin
75501: LD_INT 0
75503: PPUSH
// uc_nation := 0 ;
75504: LD_ADDR_OWVAR 21
75508: PUSH
75509: LD_INT 0
75511: ST_TO_ADDR
// hc_sex := sex_male ;
75512: LD_ADDR_OWVAR 27
75516: PUSH
75517: LD_INT 1
75519: ST_TO_ADDR
// hc_name :=  ;
75520: LD_ADDR_OWVAR 26
75524: PUSH
75525: LD_STRING 
75527: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
75528: LD_ADDR_OWVAR 28
75532: PUSH
75533: LD_INT 15
75535: ST_TO_ADDR
// hc_gallery :=  ;
75536: LD_ADDR_OWVAR 33
75540: PUSH
75541: LD_STRING 
75543: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75544: LD_ADDR_OWVAR 31
75548: PUSH
75549: LD_INT 0
75551: PPUSH
75552: LD_INT 3
75554: PPUSH
75555: CALL_OW 12
75559: PUSH
75560: LD_INT 0
75562: PPUSH
75563: LD_INT 3
75565: PPUSH
75566: CALL_OW 12
75570: PUSH
75571: LD_INT 0
75573: PUSH
75574: LD_INT 0
75576: PUSH
75577: EMPTY
75578: LIST
75579: LIST
75580: LIST
75581: LIST
75582: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
75583: LD_ADDR_OWVAR 29
75587: PUSH
75588: LD_INT 12
75590: PUSH
75591: LD_INT 12
75593: PUSH
75594: EMPTY
75595: LIST
75596: LIST
75597: ST_TO_ADDR
// end ;
75598: LD_VAR 0 1
75602: RET
// export function PrepareApemanEngineer ( ) ; begin
75603: LD_INT 0
75605: PPUSH
// uc_nation := 0 ;
75606: LD_ADDR_OWVAR 21
75610: PUSH
75611: LD_INT 0
75613: ST_TO_ADDR
// hc_sex := sex_male ;
75614: LD_ADDR_OWVAR 27
75618: PUSH
75619: LD_INT 1
75621: ST_TO_ADDR
// hc_name :=  ;
75622: LD_ADDR_OWVAR 26
75626: PUSH
75627: LD_STRING 
75629: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
75630: LD_ADDR_OWVAR 28
75634: PUSH
75635: LD_INT 16
75637: ST_TO_ADDR
// hc_gallery :=  ;
75638: LD_ADDR_OWVAR 33
75642: PUSH
75643: LD_STRING 
75645: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75646: LD_ADDR_OWVAR 31
75650: PUSH
75651: LD_INT 0
75653: PPUSH
75654: LD_INT 3
75656: PPUSH
75657: CALL_OW 12
75661: PUSH
75662: LD_INT 0
75664: PPUSH
75665: LD_INT 3
75667: PPUSH
75668: CALL_OW 12
75672: PUSH
75673: LD_INT 0
75675: PUSH
75676: LD_INT 0
75678: PUSH
75679: EMPTY
75680: LIST
75681: LIST
75682: LIST
75683: LIST
75684: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
75685: LD_ADDR_OWVAR 29
75689: PUSH
75690: LD_INT 12
75692: PUSH
75693: LD_INT 12
75695: PUSH
75696: EMPTY
75697: LIST
75698: LIST
75699: ST_TO_ADDR
// end ;
75700: LD_VAR 0 1
75704: RET
// export function PrepareApeman ( agressivity ) ; begin
75705: LD_INT 0
75707: PPUSH
// uc_side := 0 ;
75708: LD_ADDR_OWVAR 20
75712: PUSH
75713: LD_INT 0
75715: ST_TO_ADDR
// uc_nation := 0 ;
75716: LD_ADDR_OWVAR 21
75720: PUSH
75721: LD_INT 0
75723: ST_TO_ADDR
// hc_sex := sex_male ;
75724: LD_ADDR_OWVAR 27
75728: PUSH
75729: LD_INT 1
75731: ST_TO_ADDR
// hc_class := class_apeman ;
75732: LD_ADDR_OWVAR 28
75736: PUSH
75737: LD_INT 12
75739: ST_TO_ADDR
// hc_gallery :=  ;
75740: LD_ADDR_OWVAR 33
75744: PUSH
75745: LD_STRING 
75747: ST_TO_ADDR
// hc_name :=  ;
75748: LD_ADDR_OWVAR 26
75752: PUSH
75753: LD_STRING 
75755: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
75756: LD_ADDR_OWVAR 29
75760: PUSH
75761: LD_INT 12
75763: PUSH
75764: LD_INT 12
75766: PUSH
75767: EMPTY
75768: LIST
75769: LIST
75770: ST_TO_ADDR
// if agressivity = 0 then
75771: LD_VAR 0 1
75775: PUSH
75776: LD_INT 0
75778: EQUAL
75779: IFFALSE 75791
// hc_agressivity := 0 else
75781: LD_ADDR_OWVAR 35
75785: PUSH
75786: LD_INT 0
75788: ST_TO_ADDR
75789: GO 75812
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75791: LD_ADDR_OWVAR 35
75795: PUSH
75796: LD_VAR 0 1
75800: NEG
75801: PPUSH
75802: LD_VAR 0 1
75806: PPUSH
75807: CALL_OW 12
75811: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75812: LD_ADDR_OWVAR 31
75816: PUSH
75817: LD_INT 0
75819: PPUSH
75820: LD_INT 3
75822: PPUSH
75823: CALL_OW 12
75827: PUSH
75828: LD_INT 0
75830: PPUSH
75831: LD_INT 3
75833: PPUSH
75834: CALL_OW 12
75838: PUSH
75839: LD_INT 0
75841: PUSH
75842: LD_INT 0
75844: PUSH
75845: EMPTY
75846: LIST
75847: LIST
75848: LIST
75849: LIST
75850: ST_TO_ADDR
// end ;
75851: LD_VAR 0 2
75855: RET
// export function PrepareTiger ( agressivity ) ; begin
75856: LD_INT 0
75858: PPUSH
// uc_side := 0 ;
75859: LD_ADDR_OWVAR 20
75863: PUSH
75864: LD_INT 0
75866: ST_TO_ADDR
// uc_nation := 0 ;
75867: LD_ADDR_OWVAR 21
75871: PUSH
75872: LD_INT 0
75874: ST_TO_ADDR
// InitHc ;
75875: CALL_OW 19
// hc_class := class_tiger ;
75879: LD_ADDR_OWVAR 28
75883: PUSH
75884: LD_INT 14
75886: ST_TO_ADDR
// hc_gallery :=  ;
75887: LD_ADDR_OWVAR 33
75891: PUSH
75892: LD_STRING 
75894: ST_TO_ADDR
// hc_name :=  ;
75895: LD_ADDR_OWVAR 26
75899: PUSH
75900: LD_STRING 
75902: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75903: LD_ADDR_OWVAR 35
75907: PUSH
75908: LD_VAR 0 1
75912: NEG
75913: PPUSH
75914: LD_VAR 0 1
75918: PPUSH
75919: CALL_OW 12
75923: ST_TO_ADDR
// end ;
75924: LD_VAR 0 2
75928: RET
// export function PrepareEnchidna ( ) ; begin
75929: LD_INT 0
75931: PPUSH
// uc_side := 0 ;
75932: LD_ADDR_OWVAR 20
75936: PUSH
75937: LD_INT 0
75939: ST_TO_ADDR
// uc_nation := 0 ;
75940: LD_ADDR_OWVAR 21
75944: PUSH
75945: LD_INT 0
75947: ST_TO_ADDR
// InitHc ;
75948: CALL_OW 19
// hc_class := class_baggie ;
75952: LD_ADDR_OWVAR 28
75956: PUSH
75957: LD_INT 13
75959: ST_TO_ADDR
// hc_gallery :=  ;
75960: LD_ADDR_OWVAR 33
75964: PUSH
75965: LD_STRING 
75967: ST_TO_ADDR
// hc_name :=  ;
75968: LD_ADDR_OWVAR 26
75972: PUSH
75973: LD_STRING 
75975: ST_TO_ADDR
// end ;
75976: LD_VAR 0 1
75980: RET
// export function PrepareFrog ( ) ; begin
75981: LD_INT 0
75983: PPUSH
// uc_side := 0 ;
75984: LD_ADDR_OWVAR 20
75988: PUSH
75989: LD_INT 0
75991: ST_TO_ADDR
// uc_nation := 0 ;
75992: LD_ADDR_OWVAR 21
75996: PUSH
75997: LD_INT 0
75999: ST_TO_ADDR
// InitHc ;
76000: CALL_OW 19
// hc_class := class_frog ;
76004: LD_ADDR_OWVAR 28
76008: PUSH
76009: LD_INT 19
76011: ST_TO_ADDR
// hc_gallery :=  ;
76012: LD_ADDR_OWVAR 33
76016: PUSH
76017: LD_STRING 
76019: ST_TO_ADDR
// hc_name :=  ;
76020: LD_ADDR_OWVAR 26
76024: PUSH
76025: LD_STRING 
76027: ST_TO_ADDR
// end ;
76028: LD_VAR 0 1
76032: RET
// export function PrepareFish ( ) ; begin
76033: LD_INT 0
76035: PPUSH
// uc_side := 0 ;
76036: LD_ADDR_OWVAR 20
76040: PUSH
76041: LD_INT 0
76043: ST_TO_ADDR
// uc_nation := 0 ;
76044: LD_ADDR_OWVAR 21
76048: PUSH
76049: LD_INT 0
76051: ST_TO_ADDR
// InitHc ;
76052: CALL_OW 19
// hc_class := class_fish ;
76056: LD_ADDR_OWVAR 28
76060: PUSH
76061: LD_INT 20
76063: ST_TO_ADDR
// hc_gallery :=  ;
76064: LD_ADDR_OWVAR 33
76068: PUSH
76069: LD_STRING 
76071: ST_TO_ADDR
// hc_name :=  ;
76072: LD_ADDR_OWVAR 26
76076: PUSH
76077: LD_STRING 
76079: ST_TO_ADDR
// end ;
76080: LD_VAR 0 1
76084: RET
// export function PrepareBird ( ) ; begin
76085: LD_INT 0
76087: PPUSH
// uc_side := 0 ;
76088: LD_ADDR_OWVAR 20
76092: PUSH
76093: LD_INT 0
76095: ST_TO_ADDR
// uc_nation := 0 ;
76096: LD_ADDR_OWVAR 21
76100: PUSH
76101: LD_INT 0
76103: ST_TO_ADDR
// InitHc ;
76104: CALL_OW 19
// hc_class := class_phororhacos ;
76108: LD_ADDR_OWVAR 28
76112: PUSH
76113: LD_INT 18
76115: ST_TO_ADDR
// hc_gallery :=  ;
76116: LD_ADDR_OWVAR 33
76120: PUSH
76121: LD_STRING 
76123: ST_TO_ADDR
// hc_name :=  ;
76124: LD_ADDR_OWVAR 26
76128: PUSH
76129: LD_STRING 
76131: ST_TO_ADDR
// end ;
76132: LD_VAR 0 1
76136: RET
// export function PrepareHorse ( ) ; begin
76137: LD_INT 0
76139: PPUSH
// uc_side := 0 ;
76140: LD_ADDR_OWVAR 20
76144: PUSH
76145: LD_INT 0
76147: ST_TO_ADDR
// uc_nation := 0 ;
76148: LD_ADDR_OWVAR 21
76152: PUSH
76153: LD_INT 0
76155: ST_TO_ADDR
// InitHc ;
76156: CALL_OW 19
// hc_class := class_horse ;
76160: LD_ADDR_OWVAR 28
76164: PUSH
76165: LD_INT 21
76167: ST_TO_ADDR
// hc_gallery :=  ;
76168: LD_ADDR_OWVAR 33
76172: PUSH
76173: LD_STRING 
76175: ST_TO_ADDR
// hc_name :=  ;
76176: LD_ADDR_OWVAR 26
76180: PUSH
76181: LD_STRING 
76183: ST_TO_ADDR
// end ;
76184: LD_VAR 0 1
76188: RET
// export function PrepareMastodont ( ) ; begin
76189: LD_INT 0
76191: PPUSH
// uc_side := 0 ;
76192: LD_ADDR_OWVAR 20
76196: PUSH
76197: LD_INT 0
76199: ST_TO_ADDR
// uc_nation := 0 ;
76200: LD_ADDR_OWVAR 21
76204: PUSH
76205: LD_INT 0
76207: ST_TO_ADDR
// vc_chassis := class_mastodont ;
76208: LD_ADDR_OWVAR 37
76212: PUSH
76213: LD_INT 31
76215: ST_TO_ADDR
// vc_control := control_rider ;
76216: LD_ADDR_OWVAR 38
76220: PUSH
76221: LD_INT 4
76223: ST_TO_ADDR
// end ;
76224: LD_VAR 0 1
76228: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
76229: LD_INT 0
76231: PPUSH
76232: PPUSH
76233: PPUSH
// uc_side = 0 ;
76234: LD_ADDR_OWVAR 20
76238: PUSH
76239: LD_INT 0
76241: ST_TO_ADDR
// uc_nation = 0 ;
76242: LD_ADDR_OWVAR 21
76246: PUSH
76247: LD_INT 0
76249: ST_TO_ADDR
// InitHc_All ( ) ;
76250: CALL_OW 584
// InitVc ;
76254: CALL_OW 20
// if mastodonts then
76258: LD_VAR 0 6
76262: IFFALSE 76329
// for i = 1 to mastodonts do
76264: LD_ADDR_VAR 0 11
76268: PUSH
76269: DOUBLE
76270: LD_INT 1
76272: DEC
76273: ST_TO_ADDR
76274: LD_VAR 0 6
76278: PUSH
76279: FOR_TO
76280: IFFALSE 76327
// begin vc_chassis := 31 ;
76282: LD_ADDR_OWVAR 37
76286: PUSH
76287: LD_INT 31
76289: ST_TO_ADDR
// vc_control := control_rider ;
76290: LD_ADDR_OWVAR 38
76294: PUSH
76295: LD_INT 4
76297: ST_TO_ADDR
// animal := CreateVehicle ;
76298: LD_ADDR_VAR 0 12
76302: PUSH
76303: CALL_OW 45
76307: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76308: LD_VAR 0 12
76312: PPUSH
76313: LD_VAR 0 8
76317: PPUSH
76318: LD_INT 0
76320: PPUSH
76321: CALL 78471 0 3
// end ;
76325: GO 76279
76327: POP
76328: POP
// if horses then
76329: LD_VAR 0 5
76333: IFFALSE 76400
// for i = 1 to horses do
76335: LD_ADDR_VAR 0 11
76339: PUSH
76340: DOUBLE
76341: LD_INT 1
76343: DEC
76344: ST_TO_ADDR
76345: LD_VAR 0 5
76349: PUSH
76350: FOR_TO
76351: IFFALSE 76398
// begin hc_class := 21 ;
76353: LD_ADDR_OWVAR 28
76357: PUSH
76358: LD_INT 21
76360: ST_TO_ADDR
// hc_gallery :=  ;
76361: LD_ADDR_OWVAR 33
76365: PUSH
76366: LD_STRING 
76368: ST_TO_ADDR
// animal := CreateHuman ;
76369: LD_ADDR_VAR 0 12
76373: PUSH
76374: CALL_OW 44
76378: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76379: LD_VAR 0 12
76383: PPUSH
76384: LD_VAR 0 8
76388: PPUSH
76389: LD_INT 0
76391: PPUSH
76392: CALL 78471 0 3
// end ;
76396: GO 76350
76398: POP
76399: POP
// if birds then
76400: LD_VAR 0 1
76404: IFFALSE 76471
// for i = 1 to birds do
76406: LD_ADDR_VAR 0 11
76410: PUSH
76411: DOUBLE
76412: LD_INT 1
76414: DEC
76415: ST_TO_ADDR
76416: LD_VAR 0 1
76420: PUSH
76421: FOR_TO
76422: IFFALSE 76469
// begin hc_class := 18 ;
76424: LD_ADDR_OWVAR 28
76428: PUSH
76429: LD_INT 18
76431: ST_TO_ADDR
// hc_gallery =  ;
76432: LD_ADDR_OWVAR 33
76436: PUSH
76437: LD_STRING 
76439: ST_TO_ADDR
// animal := CreateHuman ;
76440: LD_ADDR_VAR 0 12
76444: PUSH
76445: CALL_OW 44
76449: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76450: LD_VAR 0 12
76454: PPUSH
76455: LD_VAR 0 8
76459: PPUSH
76460: LD_INT 0
76462: PPUSH
76463: CALL 78471 0 3
// end ;
76467: GO 76421
76469: POP
76470: POP
// if tigers then
76471: LD_VAR 0 2
76475: IFFALSE 76559
// for i = 1 to tigers do
76477: LD_ADDR_VAR 0 11
76481: PUSH
76482: DOUBLE
76483: LD_INT 1
76485: DEC
76486: ST_TO_ADDR
76487: LD_VAR 0 2
76491: PUSH
76492: FOR_TO
76493: IFFALSE 76557
// begin hc_class = class_tiger ;
76495: LD_ADDR_OWVAR 28
76499: PUSH
76500: LD_INT 14
76502: ST_TO_ADDR
// hc_gallery =  ;
76503: LD_ADDR_OWVAR 33
76507: PUSH
76508: LD_STRING 
76510: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
76511: LD_ADDR_OWVAR 35
76515: PUSH
76516: LD_INT 7
76518: NEG
76519: PPUSH
76520: LD_INT 7
76522: PPUSH
76523: CALL_OW 12
76527: ST_TO_ADDR
// animal := CreateHuman ;
76528: LD_ADDR_VAR 0 12
76532: PUSH
76533: CALL_OW 44
76537: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76538: LD_VAR 0 12
76542: PPUSH
76543: LD_VAR 0 8
76547: PPUSH
76548: LD_INT 0
76550: PPUSH
76551: CALL 78471 0 3
// end ;
76555: GO 76492
76557: POP
76558: POP
// if apemans then
76559: LD_VAR 0 3
76563: IFFALSE 76686
// for i = 1 to apemans do
76565: LD_ADDR_VAR 0 11
76569: PUSH
76570: DOUBLE
76571: LD_INT 1
76573: DEC
76574: ST_TO_ADDR
76575: LD_VAR 0 3
76579: PUSH
76580: FOR_TO
76581: IFFALSE 76684
// begin hc_class = class_apeman ;
76583: LD_ADDR_OWVAR 28
76587: PUSH
76588: LD_INT 12
76590: ST_TO_ADDR
// hc_gallery =  ;
76591: LD_ADDR_OWVAR 33
76595: PUSH
76596: LD_STRING 
76598: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
76599: LD_ADDR_OWVAR 35
76603: PUSH
76604: LD_INT 2
76606: NEG
76607: PPUSH
76608: LD_INT 2
76610: PPUSH
76611: CALL_OW 12
76615: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
76616: LD_ADDR_OWVAR 31
76620: PUSH
76621: LD_INT 1
76623: PPUSH
76624: LD_INT 3
76626: PPUSH
76627: CALL_OW 12
76631: PUSH
76632: LD_INT 1
76634: PPUSH
76635: LD_INT 3
76637: PPUSH
76638: CALL_OW 12
76642: PUSH
76643: LD_INT 0
76645: PUSH
76646: LD_INT 0
76648: PUSH
76649: EMPTY
76650: LIST
76651: LIST
76652: LIST
76653: LIST
76654: ST_TO_ADDR
// animal := CreateHuman ;
76655: LD_ADDR_VAR 0 12
76659: PUSH
76660: CALL_OW 44
76664: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76665: LD_VAR 0 12
76669: PPUSH
76670: LD_VAR 0 8
76674: PPUSH
76675: LD_INT 0
76677: PPUSH
76678: CALL 78471 0 3
// end ;
76682: GO 76580
76684: POP
76685: POP
// if enchidnas then
76686: LD_VAR 0 4
76690: IFFALSE 76757
// for i = 1 to enchidnas do
76692: LD_ADDR_VAR 0 11
76696: PUSH
76697: DOUBLE
76698: LD_INT 1
76700: DEC
76701: ST_TO_ADDR
76702: LD_VAR 0 4
76706: PUSH
76707: FOR_TO
76708: IFFALSE 76755
// begin hc_class = 13 ;
76710: LD_ADDR_OWVAR 28
76714: PUSH
76715: LD_INT 13
76717: ST_TO_ADDR
// hc_gallery =  ;
76718: LD_ADDR_OWVAR 33
76722: PUSH
76723: LD_STRING 
76725: ST_TO_ADDR
// animal := CreateHuman ;
76726: LD_ADDR_VAR 0 12
76730: PUSH
76731: CALL_OW 44
76735: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76736: LD_VAR 0 12
76740: PPUSH
76741: LD_VAR 0 8
76745: PPUSH
76746: LD_INT 0
76748: PPUSH
76749: CALL 78471 0 3
// end ;
76753: GO 76707
76755: POP
76756: POP
// if fishes then
76757: LD_VAR 0 7
76761: IFFALSE 76828
// for i = 1 to fishes do
76763: LD_ADDR_VAR 0 11
76767: PUSH
76768: DOUBLE
76769: LD_INT 1
76771: DEC
76772: ST_TO_ADDR
76773: LD_VAR 0 7
76777: PUSH
76778: FOR_TO
76779: IFFALSE 76826
// begin hc_class = 20 ;
76781: LD_ADDR_OWVAR 28
76785: PUSH
76786: LD_INT 20
76788: ST_TO_ADDR
// hc_gallery =  ;
76789: LD_ADDR_OWVAR 33
76793: PUSH
76794: LD_STRING 
76796: ST_TO_ADDR
// animal := CreateHuman ;
76797: LD_ADDR_VAR 0 12
76801: PUSH
76802: CALL_OW 44
76806: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
76807: LD_VAR 0 12
76811: PPUSH
76812: LD_VAR 0 9
76816: PPUSH
76817: LD_INT 0
76819: PPUSH
76820: CALL 78471 0 3
// end ;
76824: GO 76778
76826: POP
76827: POP
// end ;
76828: LD_VAR 0 10
76832: RET
// export function WantHeal ( sci , unit ) ; begin
76833: LD_INT 0
76835: PPUSH
// if GetTaskList ( sci ) > 0 then
76836: LD_VAR 0 1
76840: PPUSH
76841: CALL_OW 437
76845: PUSH
76846: LD_INT 0
76848: GREATER
76849: IFFALSE 76921
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
76851: LD_VAR 0 1
76855: PPUSH
76856: CALL_OW 437
76860: PUSH
76861: LD_INT 1
76863: ARRAY
76864: PUSH
76865: LD_INT 1
76867: ARRAY
76868: PUSH
76869: LD_STRING l
76871: EQUAL
76872: IFFALSE 76899
76874: PUSH
76875: LD_VAR 0 1
76879: PPUSH
76880: CALL_OW 437
76884: PUSH
76885: LD_INT 1
76887: ARRAY
76888: PUSH
76889: LD_INT 4
76891: ARRAY
76892: PUSH
76893: LD_VAR 0 2
76897: EQUAL
76898: AND
76899: IFFALSE 76911
// result := true else
76901: LD_ADDR_VAR 0 3
76905: PUSH
76906: LD_INT 1
76908: ST_TO_ADDR
76909: GO 76919
// result := false ;
76911: LD_ADDR_VAR 0 3
76915: PUSH
76916: LD_INT 0
76918: ST_TO_ADDR
// end else
76919: GO 76929
// result := false ;
76921: LD_ADDR_VAR 0 3
76925: PUSH
76926: LD_INT 0
76928: ST_TO_ADDR
// end ;
76929: LD_VAR 0 3
76933: RET
// export function HealTarget ( sci ) ; begin
76934: LD_INT 0
76936: PPUSH
// if not sci then
76937: LD_VAR 0 1
76941: NOT
76942: IFFALSE 76946
// exit ;
76944: GO 77011
// result := 0 ;
76946: LD_ADDR_VAR 0 2
76950: PUSH
76951: LD_INT 0
76953: ST_TO_ADDR
// if GetTaskList ( sci ) then
76954: LD_VAR 0 1
76958: PPUSH
76959: CALL_OW 437
76963: IFFALSE 77011
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
76965: LD_VAR 0 1
76969: PPUSH
76970: CALL_OW 437
76974: PUSH
76975: LD_INT 1
76977: ARRAY
76978: PUSH
76979: LD_INT 1
76981: ARRAY
76982: PUSH
76983: LD_STRING l
76985: EQUAL
76986: IFFALSE 77011
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
76988: LD_ADDR_VAR 0 2
76992: PUSH
76993: LD_VAR 0 1
76997: PPUSH
76998: CALL_OW 437
77002: PUSH
77003: LD_INT 1
77005: ARRAY
77006: PUSH
77007: LD_INT 4
77009: ARRAY
77010: ST_TO_ADDR
// end ;
77011: LD_VAR 0 2
77015: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
77016: LD_INT 0
77018: PPUSH
77019: PPUSH
77020: PPUSH
77021: PPUSH
// if not base_units then
77022: LD_VAR 0 1
77026: NOT
77027: IFFALSE 77031
// exit ;
77029: GO 77118
// result := false ;
77031: LD_ADDR_VAR 0 2
77035: PUSH
77036: LD_INT 0
77038: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
77039: LD_ADDR_VAR 0 5
77043: PUSH
77044: LD_VAR 0 1
77048: PPUSH
77049: LD_INT 21
77051: PUSH
77052: LD_INT 3
77054: PUSH
77055: EMPTY
77056: LIST
77057: LIST
77058: PPUSH
77059: CALL_OW 72
77063: ST_TO_ADDR
// if not tmp then
77064: LD_VAR 0 5
77068: NOT
77069: IFFALSE 77073
// exit ;
77071: GO 77118
// for i in tmp do
77073: LD_ADDR_VAR 0 3
77077: PUSH
77078: LD_VAR 0 5
77082: PUSH
77083: FOR_IN
77084: IFFALSE 77116
// begin result := EnemyInRange ( i , 22 ) ;
77086: LD_ADDR_VAR 0 2
77090: PUSH
77091: LD_VAR 0 3
77095: PPUSH
77096: LD_INT 22
77098: PPUSH
77099: CALL 74543 0 2
77103: ST_TO_ADDR
// if result then
77104: LD_VAR 0 2
77108: IFFALSE 77114
// exit ;
77110: POP
77111: POP
77112: GO 77118
// end ;
77114: GO 77083
77116: POP
77117: POP
// end ;
77118: LD_VAR 0 2
77122: RET
// export function FilterByTag ( units , tag ) ; begin
77123: LD_INT 0
77125: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
77126: LD_ADDR_VAR 0 3
77130: PUSH
77131: LD_VAR 0 1
77135: PPUSH
77136: LD_INT 120
77138: PUSH
77139: LD_VAR 0 2
77143: PUSH
77144: EMPTY
77145: LIST
77146: LIST
77147: PPUSH
77148: CALL_OW 72
77152: ST_TO_ADDR
// end ;
77153: LD_VAR 0 3
77157: RET
// export function IsDriver ( un ) ; begin
77158: LD_INT 0
77160: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
77161: LD_ADDR_VAR 0 2
77165: PUSH
77166: LD_VAR 0 1
77170: PUSH
77171: LD_INT 55
77173: PUSH
77174: EMPTY
77175: LIST
77176: PPUSH
77177: CALL_OW 69
77181: IN
77182: ST_TO_ADDR
// end ;
77183: LD_VAR 0 2
77187: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
77188: LD_INT 0
77190: PPUSH
77191: PPUSH
// list := [ ] ;
77192: LD_ADDR_VAR 0 5
77196: PUSH
77197: EMPTY
77198: ST_TO_ADDR
// case d of 0 :
77199: LD_VAR 0 3
77203: PUSH
77204: LD_INT 0
77206: DOUBLE
77207: EQUAL
77208: IFTRUE 77212
77210: GO 77345
77212: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
77213: LD_ADDR_VAR 0 5
77217: PUSH
77218: LD_VAR 0 1
77222: PUSH
77223: LD_INT 4
77225: MINUS
77226: PUSH
77227: LD_VAR 0 2
77231: PUSH
77232: LD_INT 4
77234: MINUS
77235: PUSH
77236: LD_INT 2
77238: PUSH
77239: EMPTY
77240: LIST
77241: LIST
77242: LIST
77243: PUSH
77244: LD_VAR 0 1
77248: PUSH
77249: LD_INT 3
77251: MINUS
77252: PUSH
77253: LD_VAR 0 2
77257: PUSH
77258: LD_INT 1
77260: PUSH
77261: EMPTY
77262: LIST
77263: LIST
77264: LIST
77265: PUSH
77266: LD_VAR 0 1
77270: PUSH
77271: LD_INT 4
77273: PLUS
77274: PUSH
77275: LD_VAR 0 2
77279: PUSH
77280: LD_INT 4
77282: PUSH
77283: EMPTY
77284: LIST
77285: LIST
77286: LIST
77287: PUSH
77288: LD_VAR 0 1
77292: PUSH
77293: LD_INT 3
77295: PLUS
77296: PUSH
77297: LD_VAR 0 2
77301: PUSH
77302: LD_INT 3
77304: PLUS
77305: PUSH
77306: LD_INT 5
77308: PUSH
77309: EMPTY
77310: LIST
77311: LIST
77312: LIST
77313: PUSH
77314: LD_VAR 0 1
77318: PUSH
77319: LD_VAR 0 2
77323: PUSH
77324: LD_INT 4
77326: PLUS
77327: PUSH
77328: LD_INT 0
77330: PUSH
77331: EMPTY
77332: LIST
77333: LIST
77334: LIST
77335: PUSH
77336: EMPTY
77337: LIST
77338: LIST
77339: LIST
77340: LIST
77341: LIST
77342: ST_TO_ADDR
// end ; 1 :
77343: GO 78043
77345: LD_INT 1
77347: DOUBLE
77348: EQUAL
77349: IFTRUE 77353
77351: GO 77486
77353: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
77354: LD_ADDR_VAR 0 5
77358: PUSH
77359: LD_VAR 0 1
77363: PUSH
77364: LD_VAR 0 2
77368: PUSH
77369: LD_INT 4
77371: MINUS
77372: PUSH
77373: LD_INT 3
77375: PUSH
77376: EMPTY
77377: LIST
77378: LIST
77379: LIST
77380: PUSH
77381: LD_VAR 0 1
77385: PUSH
77386: LD_INT 3
77388: MINUS
77389: PUSH
77390: LD_VAR 0 2
77394: PUSH
77395: LD_INT 3
77397: MINUS
77398: PUSH
77399: LD_INT 2
77401: PUSH
77402: EMPTY
77403: LIST
77404: LIST
77405: LIST
77406: PUSH
77407: LD_VAR 0 1
77411: PUSH
77412: LD_INT 4
77414: MINUS
77415: PUSH
77416: LD_VAR 0 2
77420: PUSH
77421: LD_INT 1
77423: PUSH
77424: EMPTY
77425: LIST
77426: LIST
77427: LIST
77428: PUSH
77429: LD_VAR 0 1
77433: PUSH
77434: LD_VAR 0 2
77438: PUSH
77439: LD_INT 3
77441: PLUS
77442: PUSH
77443: LD_INT 0
77445: PUSH
77446: EMPTY
77447: LIST
77448: LIST
77449: LIST
77450: PUSH
77451: LD_VAR 0 1
77455: PUSH
77456: LD_INT 4
77458: PLUS
77459: PUSH
77460: LD_VAR 0 2
77464: PUSH
77465: LD_INT 4
77467: PLUS
77468: PUSH
77469: LD_INT 5
77471: PUSH
77472: EMPTY
77473: LIST
77474: LIST
77475: LIST
77476: PUSH
77477: EMPTY
77478: LIST
77479: LIST
77480: LIST
77481: LIST
77482: LIST
77483: ST_TO_ADDR
// end ; 2 :
77484: GO 78043
77486: LD_INT 2
77488: DOUBLE
77489: EQUAL
77490: IFTRUE 77494
77492: GO 77623
77494: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
77495: LD_ADDR_VAR 0 5
77499: PUSH
77500: LD_VAR 0 1
77504: PUSH
77505: LD_VAR 0 2
77509: PUSH
77510: LD_INT 3
77512: MINUS
77513: PUSH
77514: LD_INT 3
77516: PUSH
77517: EMPTY
77518: LIST
77519: LIST
77520: LIST
77521: PUSH
77522: LD_VAR 0 1
77526: PUSH
77527: LD_INT 4
77529: PLUS
77530: PUSH
77531: LD_VAR 0 2
77535: PUSH
77536: LD_INT 4
77538: PUSH
77539: EMPTY
77540: LIST
77541: LIST
77542: LIST
77543: PUSH
77544: LD_VAR 0 1
77548: PUSH
77549: LD_VAR 0 2
77553: PUSH
77554: LD_INT 4
77556: PLUS
77557: PUSH
77558: LD_INT 0
77560: PUSH
77561: EMPTY
77562: LIST
77563: LIST
77564: LIST
77565: PUSH
77566: LD_VAR 0 1
77570: PUSH
77571: LD_INT 3
77573: MINUS
77574: PUSH
77575: LD_VAR 0 2
77579: PUSH
77580: LD_INT 1
77582: PUSH
77583: EMPTY
77584: LIST
77585: LIST
77586: LIST
77587: PUSH
77588: LD_VAR 0 1
77592: PUSH
77593: LD_INT 4
77595: MINUS
77596: PUSH
77597: LD_VAR 0 2
77601: PUSH
77602: LD_INT 4
77604: MINUS
77605: PUSH
77606: LD_INT 2
77608: PUSH
77609: EMPTY
77610: LIST
77611: LIST
77612: LIST
77613: PUSH
77614: EMPTY
77615: LIST
77616: LIST
77617: LIST
77618: LIST
77619: LIST
77620: ST_TO_ADDR
// end ; 3 :
77621: GO 78043
77623: LD_INT 3
77625: DOUBLE
77626: EQUAL
77627: IFTRUE 77631
77629: GO 77764
77631: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
77632: LD_ADDR_VAR 0 5
77636: PUSH
77637: LD_VAR 0 1
77641: PUSH
77642: LD_INT 3
77644: PLUS
77645: PUSH
77646: LD_VAR 0 2
77650: PUSH
77651: LD_INT 4
77653: PUSH
77654: EMPTY
77655: LIST
77656: LIST
77657: LIST
77658: PUSH
77659: LD_VAR 0 1
77663: PUSH
77664: LD_INT 4
77666: PLUS
77667: PUSH
77668: LD_VAR 0 2
77672: PUSH
77673: LD_INT 4
77675: PLUS
77676: PUSH
77677: LD_INT 5
77679: PUSH
77680: EMPTY
77681: LIST
77682: LIST
77683: LIST
77684: PUSH
77685: LD_VAR 0 1
77689: PUSH
77690: LD_INT 4
77692: MINUS
77693: PUSH
77694: LD_VAR 0 2
77698: PUSH
77699: LD_INT 1
77701: PUSH
77702: EMPTY
77703: LIST
77704: LIST
77705: LIST
77706: PUSH
77707: LD_VAR 0 1
77711: PUSH
77712: LD_VAR 0 2
77716: PUSH
77717: LD_INT 4
77719: MINUS
77720: PUSH
77721: LD_INT 3
77723: PUSH
77724: EMPTY
77725: LIST
77726: LIST
77727: LIST
77728: PUSH
77729: LD_VAR 0 1
77733: PUSH
77734: LD_INT 3
77736: MINUS
77737: PUSH
77738: LD_VAR 0 2
77742: PUSH
77743: LD_INT 3
77745: MINUS
77746: PUSH
77747: LD_INT 2
77749: PUSH
77750: EMPTY
77751: LIST
77752: LIST
77753: LIST
77754: PUSH
77755: EMPTY
77756: LIST
77757: LIST
77758: LIST
77759: LIST
77760: LIST
77761: ST_TO_ADDR
// end ; 4 :
77762: GO 78043
77764: LD_INT 4
77766: DOUBLE
77767: EQUAL
77768: IFTRUE 77772
77770: GO 77905
77772: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
77773: LD_ADDR_VAR 0 5
77777: PUSH
77778: LD_VAR 0 1
77782: PUSH
77783: LD_VAR 0 2
77787: PUSH
77788: LD_INT 4
77790: PLUS
77791: PUSH
77792: LD_INT 0
77794: PUSH
77795: EMPTY
77796: LIST
77797: LIST
77798: LIST
77799: PUSH
77800: LD_VAR 0 1
77804: PUSH
77805: LD_INT 3
77807: PLUS
77808: PUSH
77809: LD_VAR 0 2
77813: PUSH
77814: LD_INT 3
77816: PLUS
77817: PUSH
77818: LD_INT 5
77820: PUSH
77821: EMPTY
77822: LIST
77823: LIST
77824: LIST
77825: PUSH
77826: LD_VAR 0 1
77830: PUSH
77831: LD_INT 4
77833: PLUS
77834: PUSH
77835: LD_VAR 0 2
77839: PUSH
77840: LD_INT 4
77842: PUSH
77843: EMPTY
77844: LIST
77845: LIST
77846: LIST
77847: PUSH
77848: LD_VAR 0 1
77852: PUSH
77853: LD_VAR 0 2
77857: PUSH
77858: LD_INT 3
77860: MINUS
77861: PUSH
77862: LD_INT 3
77864: PUSH
77865: EMPTY
77866: LIST
77867: LIST
77868: LIST
77869: PUSH
77870: LD_VAR 0 1
77874: PUSH
77875: LD_INT 4
77877: MINUS
77878: PUSH
77879: LD_VAR 0 2
77883: PUSH
77884: LD_INT 4
77886: MINUS
77887: PUSH
77888: LD_INT 2
77890: PUSH
77891: EMPTY
77892: LIST
77893: LIST
77894: LIST
77895: PUSH
77896: EMPTY
77897: LIST
77898: LIST
77899: LIST
77900: LIST
77901: LIST
77902: ST_TO_ADDR
// end ; 5 :
77903: GO 78043
77905: LD_INT 5
77907: DOUBLE
77908: EQUAL
77909: IFTRUE 77913
77911: GO 78042
77913: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
77914: LD_ADDR_VAR 0 5
77918: PUSH
77919: LD_VAR 0 1
77923: PUSH
77924: LD_INT 4
77926: MINUS
77927: PUSH
77928: LD_VAR 0 2
77932: PUSH
77933: LD_INT 1
77935: PUSH
77936: EMPTY
77937: LIST
77938: LIST
77939: LIST
77940: PUSH
77941: LD_VAR 0 1
77945: PUSH
77946: LD_VAR 0 2
77950: PUSH
77951: LD_INT 4
77953: MINUS
77954: PUSH
77955: LD_INT 3
77957: PUSH
77958: EMPTY
77959: LIST
77960: LIST
77961: LIST
77962: PUSH
77963: LD_VAR 0 1
77967: PUSH
77968: LD_INT 4
77970: PLUS
77971: PUSH
77972: LD_VAR 0 2
77976: PUSH
77977: LD_INT 4
77979: PLUS
77980: PUSH
77981: LD_INT 5
77983: PUSH
77984: EMPTY
77985: LIST
77986: LIST
77987: LIST
77988: PUSH
77989: LD_VAR 0 1
77993: PUSH
77994: LD_INT 3
77996: PLUS
77997: PUSH
77998: LD_VAR 0 2
78002: PUSH
78003: LD_INT 4
78005: PUSH
78006: EMPTY
78007: LIST
78008: LIST
78009: LIST
78010: PUSH
78011: LD_VAR 0 1
78015: PUSH
78016: LD_VAR 0 2
78020: PUSH
78021: LD_INT 3
78023: PLUS
78024: PUSH
78025: LD_INT 0
78027: PUSH
78028: EMPTY
78029: LIST
78030: LIST
78031: LIST
78032: PUSH
78033: EMPTY
78034: LIST
78035: LIST
78036: LIST
78037: LIST
78038: LIST
78039: ST_TO_ADDR
// end ; end ;
78040: GO 78043
78042: POP
// result := list ;
78043: LD_ADDR_VAR 0 4
78047: PUSH
78048: LD_VAR 0 5
78052: ST_TO_ADDR
// end ;
78053: LD_VAR 0 4
78057: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
78058: LD_INT 0
78060: PPUSH
78061: PPUSH
78062: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
78063: LD_VAR 0 1
78067: NOT
78068: IFTRUE 78096
78070: PUSH
78071: LD_VAR 0 2
78075: PUSH
78076: LD_INT 1
78078: PUSH
78079: LD_INT 2
78081: PUSH
78082: LD_INT 3
78084: PUSH
78085: LD_INT 4
78087: PUSH
78088: EMPTY
78089: LIST
78090: LIST
78091: LIST
78092: LIST
78093: IN
78094: NOT
78095: OR
78096: IFFALSE 78100
// exit ;
78098: GO 78183
// tmp := [ ] ;
78100: LD_ADDR_VAR 0 5
78104: PUSH
78105: EMPTY
78106: ST_TO_ADDR
// for i in units do
78107: LD_ADDR_VAR 0 4
78111: PUSH
78112: LD_VAR 0 1
78116: PUSH
78117: FOR_IN
78118: IFFALSE 78152
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
78120: LD_ADDR_VAR 0 5
78124: PUSH
78125: LD_VAR 0 5
78129: PPUSH
78130: LD_VAR 0 4
78134: PPUSH
78135: LD_VAR 0 2
78139: PPUSH
78140: CALL_OW 259
78144: PPUSH
78145: CALL 79578 0 2
78149: ST_TO_ADDR
78150: GO 78117
78152: POP
78153: POP
// if not tmp then
78154: LD_VAR 0 5
78158: NOT
78159: IFFALSE 78163
// exit ;
78161: GO 78183
// result := SortListByListDesc ( units , tmp ) ;
78163: LD_ADDR_VAR 0 3
78167: PUSH
78168: LD_VAR 0 1
78172: PPUSH
78173: LD_VAR 0 5
78177: PPUSH
78178: CALL_OW 77
78182: ST_TO_ADDR
// end ;
78183: LD_VAR 0 3
78187: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
78188: LD_INT 0
78190: PPUSH
78191: PPUSH
78192: PPUSH
// result := false ;
78193: LD_ADDR_VAR 0 3
78197: PUSH
78198: LD_INT 0
78200: ST_TO_ADDR
// if not building then
78201: LD_VAR 0 2
78205: NOT
78206: IFFALSE 78210
// exit ;
78208: GO 78354
// x := GetX ( building ) ;
78210: LD_ADDR_VAR 0 4
78214: PUSH
78215: LD_VAR 0 2
78219: PPUSH
78220: CALL_OW 250
78224: ST_TO_ADDR
// y := GetY ( building ) ;
78225: LD_ADDR_VAR 0 5
78229: PUSH
78230: LD_VAR 0 2
78234: PPUSH
78235: CALL_OW 251
78239: ST_TO_ADDR
// if not x or not y then
78240: LD_VAR 0 4
78244: NOT
78245: IFTRUE 78254
78247: PUSH
78248: LD_VAR 0 5
78252: NOT
78253: OR
78254: IFFALSE 78258
// exit ;
78256: GO 78354
// if GetTaskList ( unit ) then
78258: LD_VAR 0 1
78262: PPUSH
78263: CALL_OW 437
78267: IFFALSE 78354
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78269: LD_STRING e
78271: PUSH
78272: LD_VAR 0 1
78276: PPUSH
78277: CALL_OW 437
78281: PUSH
78282: LD_INT 1
78284: ARRAY
78285: PUSH
78286: LD_INT 1
78288: ARRAY
78289: EQUAL
78290: IFFALSE 78317
78292: PUSH
78293: LD_VAR 0 4
78297: PUSH
78298: LD_VAR 0 1
78302: PPUSH
78303: CALL_OW 437
78307: PUSH
78308: LD_INT 1
78310: ARRAY
78311: PUSH
78312: LD_INT 2
78314: ARRAY
78315: EQUAL
78316: AND
78317: IFFALSE 78344
78319: PUSH
78320: LD_VAR 0 5
78324: PUSH
78325: LD_VAR 0 1
78329: PPUSH
78330: CALL_OW 437
78334: PUSH
78335: LD_INT 1
78337: ARRAY
78338: PUSH
78339: LD_INT 3
78341: ARRAY
78342: EQUAL
78343: AND
78344: IFFALSE 78354
// result := true end ;
78346: LD_ADDR_VAR 0 3
78350: PUSH
78351: LD_INT 1
78353: ST_TO_ADDR
// end ;
78354: LD_VAR 0 3
78358: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
78359: LD_INT 0
78361: PPUSH
// result := false ;
78362: LD_ADDR_VAR 0 4
78366: PUSH
78367: LD_INT 0
78369: ST_TO_ADDR
// if GetTaskList ( unit ) then
78370: LD_VAR 0 1
78374: PPUSH
78375: CALL_OW 437
78379: IFFALSE 78466
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78381: LD_STRING M
78383: PUSH
78384: LD_VAR 0 1
78388: PPUSH
78389: CALL_OW 437
78393: PUSH
78394: LD_INT 1
78396: ARRAY
78397: PUSH
78398: LD_INT 1
78400: ARRAY
78401: EQUAL
78402: IFFALSE 78429
78404: PUSH
78405: LD_VAR 0 2
78409: PUSH
78410: LD_VAR 0 1
78414: PPUSH
78415: CALL_OW 437
78419: PUSH
78420: LD_INT 1
78422: ARRAY
78423: PUSH
78424: LD_INT 2
78426: ARRAY
78427: EQUAL
78428: AND
78429: IFFALSE 78456
78431: PUSH
78432: LD_VAR 0 3
78436: PUSH
78437: LD_VAR 0 1
78441: PPUSH
78442: CALL_OW 437
78446: PUSH
78447: LD_INT 1
78449: ARRAY
78450: PUSH
78451: LD_INT 3
78453: ARRAY
78454: EQUAL
78455: AND
78456: IFFALSE 78466
// result := true ;
78458: LD_ADDR_VAR 0 4
78462: PUSH
78463: LD_INT 1
78465: ST_TO_ADDR
// end ; end ;
78466: LD_VAR 0 4
78470: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
78471: LD_INT 0
78473: PPUSH
78474: PPUSH
78475: PPUSH
78476: PPUSH
// if not unit or not area then
78477: LD_VAR 0 1
78481: NOT
78482: IFTRUE 78491
78484: PUSH
78485: LD_VAR 0 2
78489: NOT
78490: OR
78491: IFFALSE 78495
// exit ;
78493: GO 78671
// tmp := AreaToList ( area , i ) ;
78495: LD_ADDR_VAR 0 6
78499: PUSH
78500: LD_VAR 0 2
78504: PPUSH
78505: LD_VAR 0 5
78509: PPUSH
78510: CALL_OW 517
78514: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
78515: LD_ADDR_VAR 0 5
78519: PUSH
78520: DOUBLE
78521: LD_INT 1
78523: DEC
78524: ST_TO_ADDR
78525: LD_VAR 0 6
78529: PUSH
78530: LD_INT 1
78532: ARRAY
78533: PUSH
78534: FOR_TO
78535: IFFALSE 78669
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
78537: LD_ADDR_VAR 0 7
78541: PUSH
78542: LD_VAR 0 6
78546: PUSH
78547: LD_INT 1
78549: ARRAY
78550: PUSH
78551: LD_VAR 0 5
78555: ARRAY
78556: PUSH
78557: LD_VAR 0 6
78561: PUSH
78562: LD_INT 2
78564: ARRAY
78565: PUSH
78566: LD_VAR 0 5
78570: ARRAY
78571: PUSH
78572: EMPTY
78573: LIST
78574: LIST
78575: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
78576: LD_INT 92
78578: PUSH
78579: LD_VAR 0 7
78583: PUSH
78584: LD_INT 1
78586: ARRAY
78587: PUSH
78588: LD_VAR 0 7
78592: PUSH
78593: LD_INT 2
78595: ARRAY
78596: PUSH
78597: LD_INT 2
78599: PUSH
78600: EMPTY
78601: LIST
78602: LIST
78603: LIST
78604: LIST
78605: PPUSH
78606: CALL_OW 69
78610: PUSH
78611: LD_INT 0
78613: EQUAL
78614: IFFALSE 78667
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
78616: LD_VAR 0 1
78620: PPUSH
78621: LD_VAR 0 7
78625: PUSH
78626: LD_INT 1
78628: ARRAY
78629: PPUSH
78630: LD_VAR 0 7
78634: PUSH
78635: LD_INT 2
78637: ARRAY
78638: PPUSH
78639: LD_VAR 0 3
78643: PPUSH
78644: CALL_OW 48
// result := IsPlaced ( unit ) ;
78648: LD_ADDR_VAR 0 4
78652: PUSH
78653: LD_VAR 0 1
78657: PPUSH
78658: CALL_OW 305
78662: ST_TO_ADDR
// exit ;
78663: POP
78664: POP
78665: GO 78671
// end ; end ;
78667: GO 78534
78669: POP
78670: POP
// end ;
78671: LD_VAR 0 4
78675: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
78676: LD_INT 0
78678: PPUSH
78679: PPUSH
78680: PPUSH
// if not side or side > 8 then
78681: LD_VAR 0 1
78685: NOT
78686: IFTRUE 78698
78688: PUSH
78689: LD_VAR 0 1
78693: PUSH
78694: LD_INT 8
78696: GREATER
78697: OR
78698: IFFALSE 78702
// exit ;
78700: GO 78889
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
78702: LD_ADDR_VAR 0 4
78706: PUSH
78707: LD_INT 22
78709: PUSH
78710: LD_VAR 0 1
78714: PUSH
78715: EMPTY
78716: LIST
78717: LIST
78718: PUSH
78719: LD_INT 21
78721: PUSH
78722: LD_INT 3
78724: PUSH
78725: EMPTY
78726: LIST
78727: LIST
78728: PUSH
78729: EMPTY
78730: LIST
78731: LIST
78732: PPUSH
78733: CALL_OW 69
78737: ST_TO_ADDR
// if not tmp then
78738: LD_VAR 0 4
78742: NOT
78743: IFFALSE 78747
// exit ;
78745: GO 78889
// enable_addtolog := true ;
78747: LD_ADDR_OWVAR 81
78751: PUSH
78752: LD_INT 1
78754: ST_TO_ADDR
// AddToLog ( [ ) ;
78755: LD_STRING [
78757: PPUSH
78758: CALL_OW 561
// for i in tmp do
78762: LD_ADDR_VAR 0 3
78766: PUSH
78767: LD_VAR 0 4
78771: PUSH
78772: FOR_IN
78773: IFFALSE 78880
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
78775: LD_STRING [
78777: PUSH
78778: LD_VAR 0 3
78782: PPUSH
78783: CALL_OW 266
78787: STR
78788: PUSH
78789: LD_STRING , 
78791: STR
78792: PUSH
78793: LD_VAR 0 3
78797: PPUSH
78798: CALL_OW 250
78802: STR
78803: PUSH
78804: LD_STRING , 
78806: STR
78807: PUSH
78808: LD_VAR 0 3
78812: PPUSH
78813: CALL_OW 251
78817: STR
78818: PUSH
78819: LD_STRING , 
78821: STR
78822: PUSH
78823: LD_VAR 0 3
78827: PPUSH
78828: CALL_OW 254
78832: STR
78833: PUSH
78834: LD_STRING , 
78836: STR
78837: PUSH
78838: LD_VAR 0 3
78842: PPUSH
78843: LD_INT 1
78845: PPUSH
78846: CALL_OW 268
78850: STR
78851: PUSH
78852: LD_STRING , 
78854: STR
78855: PUSH
78856: LD_VAR 0 3
78860: PPUSH
78861: LD_INT 2
78863: PPUSH
78864: CALL_OW 268
78868: STR
78869: PUSH
78870: LD_STRING ],
78872: STR
78873: PPUSH
78874: CALL_OW 561
// end ;
78878: GO 78772
78880: POP
78881: POP
// AddToLog ( ]; ) ;
78882: LD_STRING ];
78884: PPUSH
78885: CALL_OW 561
// end ;
78889: LD_VAR 0 2
78893: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
78894: LD_INT 0
78896: PPUSH
78897: PPUSH
78898: PPUSH
78899: PPUSH
78900: PPUSH
// if not area or not rate or not max then
78901: LD_VAR 0 1
78905: NOT
78906: IFTRUE 78915
78908: PUSH
78909: LD_VAR 0 2
78913: NOT
78914: OR
78915: IFTRUE 78924
78917: PUSH
78918: LD_VAR 0 4
78922: NOT
78923: OR
78924: IFFALSE 78928
// exit ;
78926: GO 79117
// while 1 do
78928: LD_INT 1
78930: IFFALSE 79117
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
78932: LD_ADDR_VAR 0 9
78936: PUSH
78937: LD_VAR 0 1
78941: PPUSH
78942: LD_INT 1
78944: PPUSH
78945: CALL_OW 287
78949: PUSH
78950: LD_INT 10
78952: MUL
78953: ST_TO_ADDR
// r := rate / 10 ;
78954: LD_ADDR_VAR 0 7
78958: PUSH
78959: LD_VAR 0 2
78963: PUSH
78964: LD_INT 10
78966: DIVREAL
78967: ST_TO_ADDR
// time := 1 1$00 ;
78968: LD_ADDR_VAR 0 8
78972: PUSH
78973: LD_INT 2100
78975: ST_TO_ADDR
// if amount < min then
78976: LD_VAR 0 9
78980: PUSH
78981: LD_VAR 0 3
78985: LESS
78986: IFFALSE 79004
// r := r * 2 else
78988: LD_ADDR_VAR 0 7
78992: PUSH
78993: LD_VAR 0 7
78997: PUSH
78998: LD_INT 2
79000: MUL
79001: ST_TO_ADDR
79002: GO 79030
// if amount > max then
79004: LD_VAR 0 9
79008: PUSH
79009: LD_VAR 0 4
79013: GREATER
79014: IFFALSE 79030
// r := r / 2 ;
79016: LD_ADDR_VAR 0 7
79020: PUSH
79021: LD_VAR 0 7
79025: PUSH
79026: LD_INT 2
79028: DIVREAL
79029: ST_TO_ADDR
// time := time / r ;
79030: LD_ADDR_VAR 0 8
79034: PUSH
79035: LD_VAR 0 8
79039: PUSH
79040: LD_VAR 0 7
79044: DIVREAL
79045: ST_TO_ADDR
// if time < 0 then
79046: LD_VAR 0 8
79050: PUSH
79051: LD_INT 0
79053: LESS
79054: IFFALSE 79071
// time := time * - 1 ;
79056: LD_ADDR_VAR 0 8
79060: PUSH
79061: LD_VAR 0 8
79065: PUSH
79066: LD_INT 1
79068: NEG
79069: MUL
79070: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
79071: LD_VAR 0 8
79075: PUSH
79076: LD_INT 35
79078: PPUSH
79079: LD_INT 875
79081: PPUSH
79082: CALL_OW 12
79086: PLUS
79087: PPUSH
79088: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
79092: LD_INT 1
79094: PPUSH
79095: LD_INT 5
79097: PPUSH
79098: CALL_OW 12
79102: PPUSH
79103: LD_VAR 0 1
79107: PPUSH
79108: LD_INT 1
79110: PPUSH
79111: CALL_OW 55
// end ;
79115: GO 78928
// end ;
79117: LD_VAR 0 5
79121: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
79122: LD_INT 0
79124: PPUSH
79125: PPUSH
79126: PPUSH
79127: PPUSH
79128: PPUSH
79129: PPUSH
79130: PPUSH
79131: PPUSH
// if not turrets or not factories then
79132: LD_VAR 0 1
79136: NOT
79137: IFTRUE 79146
79139: PUSH
79140: LD_VAR 0 2
79144: NOT
79145: OR
79146: IFFALSE 79150
// exit ;
79148: GO 79457
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
79150: LD_ADDR_VAR 0 10
79154: PUSH
79155: LD_INT 5
79157: PUSH
79158: LD_INT 6
79160: PUSH
79161: EMPTY
79162: LIST
79163: LIST
79164: PUSH
79165: LD_INT 2
79167: PUSH
79168: LD_INT 4
79170: PUSH
79171: EMPTY
79172: LIST
79173: LIST
79174: PUSH
79175: LD_INT 3
79177: PUSH
79178: LD_INT 5
79180: PUSH
79181: EMPTY
79182: LIST
79183: LIST
79184: PUSH
79185: EMPTY
79186: LIST
79187: LIST
79188: LIST
79189: PUSH
79190: LD_INT 24
79192: PUSH
79193: LD_INT 25
79195: PUSH
79196: EMPTY
79197: LIST
79198: LIST
79199: PUSH
79200: LD_INT 23
79202: PUSH
79203: LD_INT 27
79205: PUSH
79206: EMPTY
79207: LIST
79208: LIST
79209: PUSH
79210: EMPTY
79211: LIST
79212: LIST
79213: PUSH
79214: LD_INT 42
79216: PUSH
79217: LD_INT 43
79219: PUSH
79220: EMPTY
79221: LIST
79222: LIST
79223: PUSH
79224: LD_INT 44
79226: PUSH
79227: LD_INT 46
79229: PUSH
79230: EMPTY
79231: LIST
79232: LIST
79233: PUSH
79234: LD_INT 45
79236: PUSH
79237: LD_INT 47
79239: PUSH
79240: EMPTY
79241: LIST
79242: LIST
79243: PUSH
79244: EMPTY
79245: LIST
79246: LIST
79247: LIST
79248: PUSH
79249: EMPTY
79250: LIST
79251: LIST
79252: LIST
79253: ST_TO_ADDR
// result := [ ] ;
79254: LD_ADDR_VAR 0 3
79258: PUSH
79259: EMPTY
79260: ST_TO_ADDR
// for i in turrets do
79261: LD_ADDR_VAR 0 4
79265: PUSH
79266: LD_VAR 0 1
79270: PUSH
79271: FOR_IN
79272: IFFALSE 79455
// begin nat := GetNation ( i ) ;
79274: LD_ADDR_VAR 0 7
79278: PUSH
79279: LD_VAR 0 4
79283: PPUSH
79284: CALL_OW 248
79288: ST_TO_ADDR
// weapon := 0 ;
79289: LD_ADDR_VAR 0 8
79293: PUSH
79294: LD_INT 0
79296: ST_TO_ADDR
// if not nat then
79297: LD_VAR 0 7
79301: NOT
79302: IFFALSE 79306
// continue ;
79304: GO 79271
// for j in list [ nat ] do
79306: LD_ADDR_VAR 0 5
79310: PUSH
79311: LD_VAR 0 10
79315: PUSH
79316: LD_VAR 0 7
79320: ARRAY
79321: PUSH
79322: FOR_IN
79323: IFFALSE 79364
// if GetBWeapon ( i ) = j [ 1 ] then
79325: LD_VAR 0 4
79329: PPUSH
79330: CALL_OW 269
79334: PUSH
79335: LD_VAR 0 5
79339: PUSH
79340: LD_INT 1
79342: ARRAY
79343: EQUAL
79344: IFFALSE 79362
// begin weapon := j [ 2 ] ;
79346: LD_ADDR_VAR 0 8
79350: PUSH
79351: LD_VAR 0 5
79355: PUSH
79356: LD_INT 2
79358: ARRAY
79359: ST_TO_ADDR
// break ;
79360: GO 79364
// end ;
79362: GO 79322
79364: POP
79365: POP
// if not weapon then
79366: LD_VAR 0 8
79370: NOT
79371: IFFALSE 79375
// continue ;
79373: GO 79271
// for k in factories do
79375: LD_ADDR_VAR 0 6
79379: PUSH
79380: LD_VAR 0 2
79384: PUSH
79385: FOR_IN
79386: IFFALSE 79451
// begin weapons := AvailableWeaponList ( k ) ;
79388: LD_ADDR_VAR 0 9
79392: PUSH
79393: LD_VAR 0 6
79397: PPUSH
79398: CALL_OW 478
79402: ST_TO_ADDR
// if not weapons then
79403: LD_VAR 0 9
79407: NOT
79408: IFFALSE 79412
// continue ;
79410: GO 79385
// if weapon in weapons then
79412: LD_VAR 0 8
79416: PUSH
79417: LD_VAR 0 9
79421: IN
79422: IFFALSE 79449
// begin result := [ i , weapon ] ;
79424: LD_ADDR_VAR 0 3
79428: PUSH
79429: LD_VAR 0 4
79433: PUSH
79434: LD_VAR 0 8
79438: PUSH
79439: EMPTY
79440: LIST
79441: LIST
79442: ST_TO_ADDR
// exit ;
79443: POP
79444: POP
79445: POP
79446: POP
79447: GO 79457
// end ; end ;
79449: GO 79385
79451: POP
79452: POP
// end ;
79453: GO 79271
79455: POP
79456: POP
// end ;
79457: LD_VAR 0 3
79461: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
79462: LD_INT 0
79464: PPUSH
// if not side or side > 8 then
79465: LD_VAR 0 3
79469: NOT
79470: IFTRUE 79482
79472: PUSH
79473: LD_VAR 0 3
79477: PUSH
79478: LD_INT 8
79480: GREATER
79481: OR
79482: IFFALSE 79486
// exit ;
79484: GO 79545
// if not range then
79486: LD_VAR 0 4
79490: NOT
79491: IFFALSE 79502
// range := - 12 ;
79493: LD_ADDR_VAR 0 4
79497: PUSH
79498: LD_INT 12
79500: NEG
79501: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
79502: LD_VAR 0 1
79506: PPUSH
79507: LD_VAR 0 2
79511: PPUSH
79512: LD_VAR 0 3
79516: PPUSH
79517: LD_VAR 0 4
79521: PPUSH
79522: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
79526: LD_VAR 0 1
79530: PPUSH
79531: LD_VAR 0 2
79535: PPUSH
79536: LD_VAR 0 3
79540: PPUSH
79541: CALL_OW 331
// end ;
79545: LD_VAR 0 5
79549: RET
// export function Video ( mode ) ; begin
79550: LD_INT 0
79552: PPUSH
// ingame_video = mode ;
79553: LD_ADDR_OWVAR 52
79557: PUSH
79558: LD_VAR 0 1
79562: ST_TO_ADDR
// interface_hidden = mode ;
79563: LD_ADDR_OWVAR 54
79567: PUSH
79568: LD_VAR 0 1
79572: ST_TO_ADDR
// end ;
79573: LD_VAR 0 2
79577: RET
// export function Join ( array , element ) ; begin
79578: LD_INT 0
79580: PPUSH
// result := Replace ( array , array + 1 , element ) ;
79581: LD_ADDR_VAR 0 3
79585: PUSH
79586: LD_VAR 0 1
79590: PPUSH
79591: LD_VAR 0 1
79595: PUSH
79596: LD_INT 1
79598: PLUS
79599: PPUSH
79600: LD_VAR 0 2
79604: PPUSH
79605: CALL_OW 1
79609: ST_TO_ADDR
// end ;
79610: LD_VAR 0 3
79614: RET
// export function JoinUnion ( array , element ) ; begin
79615: LD_INT 0
79617: PPUSH
// result := array union element ;
79618: LD_ADDR_VAR 0 3
79622: PUSH
79623: LD_VAR 0 1
79627: PUSH
79628: LD_VAR 0 2
79632: UNION
79633: ST_TO_ADDR
// end ;
79634: LD_VAR 0 3
79638: RET
// export function GetBehemoths ( side ) ; begin
79639: LD_INT 0
79641: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
79642: LD_ADDR_VAR 0 2
79646: PUSH
79647: LD_INT 22
79649: PUSH
79650: LD_VAR 0 1
79654: PUSH
79655: EMPTY
79656: LIST
79657: LIST
79658: PUSH
79659: LD_INT 31
79661: PUSH
79662: LD_INT 25
79664: PUSH
79665: EMPTY
79666: LIST
79667: LIST
79668: PUSH
79669: EMPTY
79670: LIST
79671: LIST
79672: PPUSH
79673: CALL_OW 69
79677: ST_TO_ADDR
// end ;
79678: LD_VAR 0 2
79682: RET
// export function Shuffle ( array ) ; var i , index ; begin
79683: LD_INT 0
79685: PPUSH
79686: PPUSH
79687: PPUSH
// result := [ ] ;
79688: LD_ADDR_VAR 0 2
79692: PUSH
79693: EMPTY
79694: ST_TO_ADDR
// if not array then
79695: LD_VAR 0 1
79699: NOT
79700: IFFALSE 79704
// exit ;
79702: GO 79803
// Randomize ;
79704: CALL_OW 10
// for i = array downto 1 do
79708: LD_ADDR_VAR 0 3
79712: PUSH
79713: DOUBLE
79714: LD_VAR 0 1
79718: INC
79719: ST_TO_ADDR
79720: LD_INT 1
79722: PUSH
79723: FOR_DOWNTO
79724: IFFALSE 79801
// begin index := rand ( 1 , array ) ;
79726: LD_ADDR_VAR 0 4
79730: PUSH
79731: LD_INT 1
79733: PPUSH
79734: LD_VAR 0 1
79738: PPUSH
79739: CALL_OW 12
79743: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
79744: LD_ADDR_VAR 0 2
79748: PUSH
79749: LD_VAR 0 2
79753: PPUSH
79754: LD_VAR 0 2
79758: PUSH
79759: LD_INT 1
79761: PLUS
79762: PPUSH
79763: LD_VAR 0 1
79767: PUSH
79768: LD_VAR 0 4
79772: ARRAY
79773: PPUSH
79774: CALL_OW 2
79778: ST_TO_ADDR
// array := Delete ( array , index ) ;
79779: LD_ADDR_VAR 0 1
79783: PUSH
79784: LD_VAR 0 1
79788: PPUSH
79789: LD_VAR 0 4
79793: PPUSH
79794: CALL_OW 3
79798: ST_TO_ADDR
// end ;
79799: GO 79723
79801: POP
79802: POP
// end ;
79803: LD_VAR 0 2
79807: RET
// export function GetBaseMaterials ( base ) ; begin
79808: LD_INT 0
79810: PPUSH
// result := [ 0 , 0 , 0 ] ;
79811: LD_ADDR_VAR 0 2
79815: PUSH
79816: LD_INT 0
79818: PUSH
79819: LD_INT 0
79821: PUSH
79822: LD_INT 0
79824: PUSH
79825: EMPTY
79826: LIST
79827: LIST
79828: LIST
79829: ST_TO_ADDR
// if not base then
79830: LD_VAR 0 1
79834: NOT
79835: IFFALSE 79839
// exit ;
79837: GO 79888
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
79839: LD_ADDR_VAR 0 2
79843: PUSH
79844: LD_VAR 0 1
79848: PPUSH
79849: LD_INT 1
79851: PPUSH
79852: CALL_OW 275
79856: PUSH
79857: LD_VAR 0 1
79861: PPUSH
79862: LD_INT 2
79864: PPUSH
79865: CALL_OW 275
79869: PUSH
79870: LD_VAR 0 1
79874: PPUSH
79875: LD_INT 3
79877: PPUSH
79878: CALL_OW 275
79882: PUSH
79883: EMPTY
79884: LIST
79885: LIST
79886: LIST
79887: ST_TO_ADDR
// end ;
79888: LD_VAR 0 2
79892: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
79893: LD_INT 0
79895: PPUSH
79896: PPUSH
// result := array ;
79897: LD_ADDR_VAR 0 3
79901: PUSH
79902: LD_VAR 0 1
79906: ST_TO_ADDR
// if size >= result then
79907: LD_VAR 0 2
79911: PUSH
79912: LD_VAR 0 3
79916: GREATEREQUAL
79917: IFFALSE 79921
// exit ;
79919: GO 79971
// if size then
79921: LD_VAR 0 2
79925: IFFALSE 79971
// for i := array downto size do
79927: LD_ADDR_VAR 0 4
79931: PUSH
79932: DOUBLE
79933: LD_VAR 0 1
79937: INC
79938: ST_TO_ADDR
79939: LD_VAR 0 2
79943: PUSH
79944: FOR_DOWNTO
79945: IFFALSE 79969
// result := Delete ( result , result ) ;
79947: LD_ADDR_VAR 0 3
79951: PUSH
79952: LD_VAR 0 3
79956: PPUSH
79957: LD_VAR 0 3
79961: PPUSH
79962: CALL_OW 3
79966: ST_TO_ADDR
79967: GO 79944
79969: POP
79970: POP
// end ;
79971: LD_VAR 0 3
79975: RET
// export function ComExit ( unit ) ; var tmp ; begin
79976: LD_INT 0
79978: PPUSH
79979: PPUSH
// if not IsInUnit ( unit ) then
79980: LD_VAR 0 1
79984: PPUSH
79985: CALL_OW 310
79989: NOT
79990: IFFALSE 79994
// exit ;
79992: GO 80054
// tmp := IsInUnit ( unit ) ;
79994: LD_ADDR_VAR 0 3
79998: PUSH
79999: LD_VAR 0 1
80003: PPUSH
80004: CALL_OW 310
80008: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
80009: LD_VAR 0 3
80013: PPUSH
80014: CALL_OW 247
80018: PUSH
80019: LD_INT 2
80021: EQUAL
80022: IFFALSE 80035
// ComExitVehicle ( unit ) else
80024: LD_VAR 0 1
80028: PPUSH
80029: CALL_OW 121
80033: GO 80044
// ComExitBuilding ( unit ) ;
80035: LD_VAR 0 1
80039: PPUSH
80040: CALL_OW 122
// result := tmp ;
80044: LD_ADDR_VAR 0 2
80048: PUSH
80049: LD_VAR 0 3
80053: ST_TO_ADDR
// end ;
80054: LD_VAR 0 2
80058: RET
// export function ComExitAll ( units ) ; var i ; begin
80059: LD_INT 0
80061: PPUSH
80062: PPUSH
// if not units then
80063: LD_VAR 0 1
80067: NOT
80068: IFFALSE 80072
// exit ;
80070: GO 80098
// for i in units do
80072: LD_ADDR_VAR 0 3
80076: PUSH
80077: LD_VAR 0 1
80081: PUSH
80082: FOR_IN
80083: IFFALSE 80096
// ComExit ( i ) ;
80085: LD_VAR 0 3
80089: PPUSH
80090: CALL 79976 0 1
80094: GO 80082
80096: POP
80097: POP
// end ;
80098: LD_VAR 0 2
80102: RET
// export function ResetHc ; begin
80103: LD_INT 0
80105: PPUSH
// InitHc ;
80106: CALL_OW 19
// hc_importance := 0 ;
80110: LD_ADDR_OWVAR 32
80114: PUSH
80115: LD_INT 0
80117: ST_TO_ADDR
// end ;
80118: LD_VAR 0 1
80122: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
80123: LD_INT 0
80125: PPUSH
80126: PPUSH
80127: PPUSH
// _x := ( x1 + x2 ) div 2 ;
80128: LD_ADDR_VAR 0 6
80132: PUSH
80133: LD_VAR 0 1
80137: PUSH
80138: LD_VAR 0 3
80142: PLUS
80143: PUSH
80144: LD_INT 2
80146: DIV
80147: ST_TO_ADDR
// if _x < 0 then
80148: LD_VAR 0 6
80152: PUSH
80153: LD_INT 0
80155: LESS
80156: IFFALSE 80173
// _x := _x * - 1 ;
80158: LD_ADDR_VAR 0 6
80162: PUSH
80163: LD_VAR 0 6
80167: PUSH
80168: LD_INT 1
80170: NEG
80171: MUL
80172: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
80173: LD_ADDR_VAR 0 7
80177: PUSH
80178: LD_VAR 0 2
80182: PUSH
80183: LD_VAR 0 4
80187: PLUS
80188: PUSH
80189: LD_INT 2
80191: DIV
80192: ST_TO_ADDR
// if _y < 0 then
80193: LD_VAR 0 7
80197: PUSH
80198: LD_INT 0
80200: LESS
80201: IFFALSE 80218
// _y := _y * - 1 ;
80203: LD_ADDR_VAR 0 7
80207: PUSH
80208: LD_VAR 0 7
80212: PUSH
80213: LD_INT 1
80215: NEG
80216: MUL
80217: ST_TO_ADDR
// result := [ _x , _y ] ;
80218: LD_ADDR_VAR 0 5
80222: PUSH
80223: LD_VAR 0 6
80227: PUSH
80228: LD_VAR 0 7
80232: PUSH
80233: EMPTY
80234: LIST
80235: LIST
80236: ST_TO_ADDR
// end ;
80237: LD_VAR 0 5
80241: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
80242: LD_INT 0
80244: PPUSH
80245: PPUSH
80246: PPUSH
80247: PPUSH
// task := GetTaskList ( unit ) ;
80248: LD_ADDR_VAR 0 7
80252: PUSH
80253: LD_VAR 0 1
80257: PPUSH
80258: CALL_OW 437
80262: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
80263: LD_VAR 0 7
80267: NOT
80268: IFFALSE 80287
80270: PUSH
80271: LD_VAR 0 1
80275: PPUSH
80276: LD_VAR 0 2
80280: PPUSH
80281: CALL_OW 308
80285: NOT
80286: AND
80287: IFFALSE 80291
// exit ;
80289: GO 80409
// if IsInArea ( unit , area ) then
80291: LD_VAR 0 1
80295: PPUSH
80296: LD_VAR 0 2
80300: PPUSH
80301: CALL_OW 308
80305: IFFALSE 80323
// begin ComMoveToArea ( unit , goAway ) ;
80307: LD_VAR 0 1
80311: PPUSH
80312: LD_VAR 0 3
80316: PPUSH
80317: CALL_OW 113
// exit ;
80321: GO 80409
// end ; if task [ 1 ] [ 1 ] <> M then
80323: LD_VAR 0 7
80327: PUSH
80328: LD_INT 1
80330: ARRAY
80331: PUSH
80332: LD_INT 1
80334: ARRAY
80335: PUSH
80336: LD_STRING M
80338: NONEQUAL
80339: IFFALSE 80343
// exit ;
80341: GO 80409
// x := task [ 1 ] [ 2 ] ;
80343: LD_ADDR_VAR 0 5
80347: PUSH
80348: LD_VAR 0 7
80352: PUSH
80353: LD_INT 1
80355: ARRAY
80356: PUSH
80357: LD_INT 2
80359: ARRAY
80360: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
80361: LD_ADDR_VAR 0 6
80365: PUSH
80366: LD_VAR 0 7
80370: PUSH
80371: LD_INT 1
80373: ARRAY
80374: PUSH
80375: LD_INT 3
80377: ARRAY
80378: ST_TO_ADDR
// if InArea ( x , y , area ) then
80379: LD_VAR 0 5
80383: PPUSH
80384: LD_VAR 0 6
80388: PPUSH
80389: LD_VAR 0 2
80393: PPUSH
80394: CALL_OW 309
80398: IFFALSE 80409
// ComStop ( unit ) ;
80400: LD_VAR 0 1
80404: PPUSH
80405: CALL_OW 141
// end ;
80409: LD_VAR 0 4
80413: RET
// export function Abs ( value ) ; begin
80414: LD_INT 0
80416: PPUSH
// result := value ;
80417: LD_ADDR_VAR 0 2
80421: PUSH
80422: LD_VAR 0 1
80426: ST_TO_ADDR
// if value < 0 then
80427: LD_VAR 0 1
80431: PUSH
80432: LD_INT 0
80434: LESS
80435: IFFALSE 80452
// result := value * - 1 ;
80437: LD_ADDR_VAR 0 2
80441: PUSH
80442: LD_VAR 0 1
80446: PUSH
80447: LD_INT 1
80449: NEG
80450: MUL
80451: ST_TO_ADDR
// end ;
80452: LD_VAR 0 2
80456: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
80457: LD_INT 0
80459: PPUSH
80460: PPUSH
80461: PPUSH
80462: PPUSH
80463: PPUSH
80464: PPUSH
80465: PPUSH
80466: PPUSH
// if not unit or not building then
80467: LD_VAR 0 1
80471: NOT
80472: IFTRUE 80481
80474: PUSH
80475: LD_VAR 0 2
80479: NOT
80480: OR
80481: IFFALSE 80485
// exit ;
80483: GO 80713
// x := GetX ( building ) ;
80485: LD_ADDR_VAR 0 4
80489: PUSH
80490: LD_VAR 0 2
80494: PPUSH
80495: CALL_OW 250
80499: ST_TO_ADDR
// y := GetY ( building ) ;
80500: LD_ADDR_VAR 0 6
80504: PUSH
80505: LD_VAR 0 2
80509: PPUSH
80510: CALL_OW 251
80514: ST_TO_ADDR
// d := GetDir ( building ) ;
80515: LD_ADDR_VAR 0 8
80519: PUSH
80520: LD_VAR 0 2
80524: PPUSH
80525: CALL_OW 254
80529: ST_TO_ADDR
// r := 4 ;
80530: LD_ADDR_VAR 0 9
80534: PUSH
80535: LD_INT 4
80537: ST_TO_ADDR
// for i := 1 to 5 do
80538: LD_ADDR_VAR 0 10
80542: PUSH
80543: DOUBLE
80544: LD_INT 1
80546: DEC
80547: ST_TO_ADDR
80548: LD_INT 5
80550: PUSH
80551: FOR_TO
80552: IFFALSE 80711
// begin _x := ShiftX ( x , d , r + i ) ;
80554: LD_ADDR_VAR 0 5
80558: PUSH
80559: LD_VAR 0 4
80563: PPUSH
80564: LD_VAR 0 8
80568: PPUSH
80569: LD_VAR 0 9
80573: PUSH
80574: LD_VAR 0 10
80578: PLUS
80579: PPUSH
80580: CALL_OW 272
80584: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
80585: LD_ADDR_VAR 0 7
80589: PUSH
80590: LD_VAR 0 6
80594: PPUSH
80595: LD_VAR 0 8
80599: PPUSH
80600: LD_VAR 0 9
80604: PUSH
80605: LD_VAR 0 10
80609: PLUS
80610: PPUSH
80611: CALL_OW 273
80615: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
80616: LD_VAR 0 5
80620: PPUSH
80621: LD_VAR 0 7
80625: PPUSH
80626: CALL_OW 488
80630: IFFALSE 80665
80632: PUSH
80633: LD_VAR 0 5
80637: PPUSH
80638: LD_VAR 0 7
80642: PPUSH
80643: CALL_OW 428
80647: PPUSH
80648: CALL_OW 247
80652: PUSH
80653: LD_INT 3
80655: PUSH
80656: LD_INT 2
80658: PUSH
80659: EMPTY
80660: LIST
80661: LIST
80662: IN
80663: NOT
80664: AND
80665: IFFALSE 80709
// begin ComMoveXY ( unit , _x , _y ) ;
80667: LD_VAR 0 1
80671: PPUSH
80672: LD_VAR 0 5
80676: PPUSH
80677: LD_VAR 0 7
80681: PPUSH
80682: CALL_OW 111
// result := [ _x , _y ] ;
80686: LD_ADDR_VAR 0 3
80690: PUSH
80691: LD_VAR 0 5
80695: PUSH
80696: LD_VAR 0 7
80700: PUSH
80701: EMPTY
80702: LIST
80703: LIST
80704: ST_TO_ADDR
// exit ;
80705: POP
80706: POP
80707: GO 80713
// end ; end ;
80709: GO 80551
80711: POP
80712: POP
// end ;
80713: LD_VAR 0 3
80717: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
80718: LD_INT 0
80720: PPUSH
80721: PPUSH
80722: PPUSH
// result := 0 ;
80723: LD_ADDR_VAR 0 3
80727: PUSH
80728: LD_INT 0
80730: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
80731: LD_VAR 0 1
80735: PUSH
80736: LD_INT 0
80738: LESS
80739: IFTRUE 80751
80741: PUSH
80742: LD_VAR 0 1
80746: PUSH
80747: LD_INT 8
80749: GREATER
80750: OR
80751: IFTRUE 80763
80753: PUSH
80754: LD_VAR 0 2
80758: PUSH
80759: LD_INT 0
80761: LESS
80762: OR
80763: IFTRUE 80775
80765: PUSH
80766: LD_VAR 0 2
80770: PUSH
80771: LD_INT 8
80773: GREATER
80774: OR
80775: IFFALSE 80779
// exit ;
80777: GO 80854
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
80779: LD_ADDR_VAR 0 4
80783: PUSH
80784: LD_INT 22
80786: PUSH
80787: LD_VAR 0 2
80791: PUSH
80792: EMPTY
80793: LIST
80794: LIST
80795: PPUSH
80796: CALL_OW 69
80800: PUSH
80801: FOR_IN
80802: IFFALSE 80852
// begin un := UnitShoot ( i ) ;
80804: LD_ADDR_VAR 0 5
80808: PUSH
80809: LD_VAR 0 4
80813: PPUSH
80814: CALL_OW 504
80818: ST_TO_ADDR
// if GetSide ( un ) = side1 then
80819: LD_VAR 0 5
80823: PPUSH
80824: CALL_OW 255
80828: PUSH
80829: LD_VAR 0 1
80833: EQUAL
80834: IFFALSE 80850
// begin result := un ;
80836: LD_ADDR_VAR 0 3
80840: PUSH
80841: LD_VAR 0 5
80845: ST_TO_ADDR
// exit ;
80846: POP
80847: POP
80848: GO 80854
// end ; end ;
80850: GO 80801
80852: POP
80853: POP
// end ;
80854: LD_VAR 0 3
80858: RET
// export function GetCargoBay ( units ) ; begin
80859: LD_INT 0
80861: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
80862: LD_ADDR_VAR 0 2
80866: PUSH
80867: LD_VAR 0 1
80871: PPUSH
80872: LD_INT 2
80874: PUSH
80875: LD_INT 34
80877: PUSH
80878: LD_INT 12
80880: PUSH
80881: EMPTY
80882: LIST
80883: LIST
80884: PUSH
80885: LD_INT 34
80887: PUSH
80888: LD_INT 51
80890: PUSH
80891: EMPTY
80892: LIST
80893: LIST
80894: PUSH
80895: LD_INT 34
80897: PUSH
80898: LD_INT 32
80900: PUSH
80901: EMPTY
80902: LIST
80903: LIST
80904: PUSH
80905: LD_INT 34
80907: PUSH
80908: LD_INT 89
80910: PUSH
80911: EMPTY
80912: LIST
80913: LIST
80914: PUSH
80915: EMPTY
80916: LIST
80917: LIST
80918: LIST
80919: LIST
80920: LIST
80921: PPUSH
80922: CALL_OW 72
80926: ST_TO_ADDR
// end ;
80927: LD_VAR 0 2
80931: RET
// export function Negate ( value ) ; begin
80932: LD_INT 0
80934: PPUSH
// result := not value ;
80935: LD_ADDR_VAR 0 2
80939: PUSH
80940: LD_VAR 0 1
80944: NOT
80945: ST_TO_ADDR
// end ;
80946: LD_VAR 0 2
80950: RET
// export function Inc ( value ) ; begin
80951: LD_INT 0
80953: PPUSH
// result := value + 1 ;
80954: LD_ADDR_VAR 0 2
80958: PUSH
80959: LD_VAR 0 1
80963: PUSH
80964: LD_INT 1
80966: PLUS
80967: ST_TO_ADDR
// end ;
80968: LD_VAR 0 2
80972: RET
// export function Dec ( value ) ; begin
80973: LD_INT 0
80975: PPUSH
// result := value - 1 ;
80976: LD_ADDR_VAR 0 2
80980: PUSH
80981: LD_VAR 0 1
80985: PUSH
80986: LD_INT 1
80988: MINUS
80989: ST_TO_ADDR
// end ;
80990: LD_VAR 0 2
80994: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
80995: LD_INT 0
80997: PPUSH
80998: PPUSH
80999: PPUSH
81000: PPUSH
81001: PPUSH
81002: PPUSH
81003: PPUSH
81004: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
81005: LD_VAR 0 1
81009: PPUSH
81010: LD_VAR 0 2
81014: PPUSH
81015: CALL_OW 488
81019: NOT
81020: IFTRUE 81039
81022: PUSH
81023: LD_VAR 0 3
81027: PPUSH
81028: LD_VAR 0 4
81032: PPUSH
81033: CALL_OW 488
81037: NOT
81038: OR
81039: IFFALSE 81052
// begin result := - 1 ;
81041: LD_ADDR_VAR 0 5
81045: PUSH
81046: LD_INT 1
81048: NEG
81049: ST_TO_ADDR
// exit ;
81050: GO 81287
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
81052: LD_ADDR_VAR 0 12
81056: PUSH
81057: LD_VAR 0 1
81061: PPUSH
81062: LD_VAR 0 2
81066: PPUSH
81067: LD_VAR 0 3
81071: PPUSH
81072: LD_VAR 0 4
81076: PPUSH
81077: CALL 80123 0 4
81081: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
81082: LD_ADDR_VAR 0 11
81086: PUSH
81087: LD_VAR 0 1
81091: PPUSH
81092: LD_VAR 0 2
81096: PPUSH
81097: LD_VAR 0 12
81101: PUSH
81102: LD_INT 1
81104: ARRAY
81105: PPUSH
81106: LD_VAR 0 12
81110: PUSH
81111: LD_INT 2
81113: ARRAY
81114: PPUSH
81115: CALL_OW 298
81119: ST_TO_ADDR
// distance := 9999 ;
81120: LD_ADDR_VAR 0 10
81124: PUSH
81125: LD_INT 9999
81127: ST_TO_ADDR
// for i := 0 to 5 do
81128: LD_ADDR_VAR 0 6
81132: PUSH
81133: DOUBLE
81134: LD_INT 0
81136: DEC
81137: ST_TO_ADDR
81138: LD_INT 5
81140: PUSH
81141: FOR_TO
81142: IFFALSE 81285
// begin _x := ShiftX ( x1 , i , centerDist ) ;
81144: LD_ADDR_VAR 0 7
81148: PUSH
81149: LD_VAR 0 1
81153: PPUSH
81154: LD_VAR 0 6
81158: PPUSH
81159: LD_VAR 0 11
81163: PPUSH
81164: CALL_OW 272
81168: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
81169: LD_ADDR_VAR 0 8
81173: PUSH
81174: LD_VAR 0 2
81178: PPUSH
81179: LD_VAR 0 6
81183: PPUSH
81184: LD_VAR 0 11
81188: PPUSH
81189: CALL_OW 273
81193: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
81194: LD_VAR 0 7
81198: PPUSH
81199: LD_VAR 0 8
81203: PPUSH
81204: CALL_OW 488
81208: NOT
81209: IFFALSE 81213
// continue ;
81211: GO 81141
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
81213: LD_ADDR_VAR 0 9
81217: PUSH
81218: LD_VAR 0 12
81222: PUSH
81223: LD_INT 1
81225: ARRAY
81226: PPUSH
81227: LD_VAR 0 12
81231: PUSH
81232: LD_INT 2
81234: ARRAY
81235: PPUSH
81236: LD_VAR 0 7
81240: PPUSH
81241: LD_VAR 0 8
81245: PPUSH
81246: CALL_OW 298
81250: ST_TO_ADDR
// if tmp < distance then
81251: LD_VAR 0 9
81255: PUSH
81256: LD_VAR 0 10
81260: LESS
81261: IFFALSE 81283
// begin result := i ;
81263: LD_ADDR_VAR 0 5
81267: PUSH
81268: LD_VAR 0 6
81272: ST_TO_ADDR
// distance := tmp ;
81273: LD_ADDR_VAR 0 10
81277: PUSH
81278: LD_VAR 0 9
81282: ST_TO_ADDR
// end ; end ;
81283: GO 81141
81285: POP
81286: POP
// end ;
81287: LD_VAR 0 5
81291: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
81292: LD_INT 0
81294: PPUSH
81295: PPUSH
// if not driver or not IsInUnit ( driver ) then
81296: LD_VAR 0 1
81300: NOT
81301: IFTRUE 81315
81303: PUSH
81304: LD_VAR 0 1
81308: PPUSH
81309: CALL_OW 310
81313: NOT
81314: OR
81315: IFFALSE 81319
// exit ;
81317: GO 81409
// vehicle := IsInUnit ( driver ) ;
81319: LD_ADDR_VAR 0 3
81323: PUSH
81324: LD_VAR 0 1
81328: PPUSH
81329: CALL_OW 310
81333: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
81334: LD_VAR 0 1
81338: PPUSH
81339: LD_STRING \
81341: PUSH
81342: LD_INT 0
81344: PUSH
81345: LD_INT 0
81347: PUSH
81348: LD_INT 0
81350: PUSH
81351: LD_INT 0
81353: PUSH
81354: LD_INT 0
81356: PUSH
81357: LD_INT 0
81359: PUSH
81360: EMPTY
81361: LIST
81362: LIST
81363: LIST
81364: LIST
81365: LIST
81366: LIST
81367: LIST
81368: PUSH
81369: LD_STRING E
81371: PUSH
81372: LD_INT 0
81374: PUSH
81375: LD_INT 0
81377: PUSH
81378: LD_VAR 0 3
81382: PUSH
81383: LD_INT 0
81385: PUSH
81386: LD_INT 0
81388: PUSH
81389: LD_INT 0
81391: PUSH
81392: EMPTY
81393: LIST
81394: LIST
81395: LIST
81396: LIST
81397: LIST
81398: LIST
81399: LIST
81400: PUSH
81401: EMPTY
81402: LIST
81403: LIST
81404: PPUSH
81405: CALL_OW 446
// end ;
81409: LD_VAR 0 2
81413: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
81414: LD_INT 0
81416: PPUSH
81417: PPUSH
// if not driver or not IsInUnit ( driver ) then
81418: LD_VAR 0 1
81422: NOT
81423: IFTRUE 81437
81425: PUSH
81426: LD_VAR 0 1
81430: PPUSH
81431: CALL_OW 310
81435: NOT
81436: OR
81437: IFFALSE 81441
// exit ;
81439: GO 81531
// vehicle := IsInUnit ( driver ) ;
81441: LD_ADDR_VAR 0 3
81445: PUSH
81446: LD_VAR 0 1
81450: PPUSH
81451: CALL_OW 310
81455: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
81456: LD_VAR 0 1
81460: PPUSH
81461: LD_STRING \
81463: PUSH
81464: LD_INT 0
81466: PUSH
81467: LD_INT 0
81469: PUSH
81470: LD_INT 0
81472: PUSH
81473: LD_INT 0
81475: PUSH
81476: LD_INT 0
81478: PUSH
81479: LD_INT 0
81481: PUSH
81482: EMPTY
81483: LIST
81484: LIST
81485: LIST
81486: LIST
81487: LIST
81488: LIST
81489: LIST
81490: PUSH
81491: LD_STRING E
81493: PUSH
81494: LD_INT 0
81496: PUSH
81497: LD_INT 0
81499: PUSH
81500: LD_VAR 0 3
81504: PUSH
81505: LD_INT 0
81507: PUSH
81508: LD_INT 0
81510: PUSH
81511: LD_INT 0
81513: PUSH
81514: EMPTY
81515: LIST
81516: LIST
81517: LIST
81518: LIST
81519: LIST
81520: LIST
81521: LIST
81522: PUSH
81523: EMPTY
81524: LIST
81525: LIST
81526: PPUSH
81527: CALL_OW 447
// end ;
81531: LD_VAR 0 2
81535: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
81536: LD_INT 0
81538: PPUSH
81539: PPUSH
81540: PPUSH
// tmp := [ ] ;
81541: LD_ADDR_VAR 0 5
81545: PUSH
81546: EMPTY
81547: ST_TO_ADDR
// for i in units do
81548: LD_ADDR_VAR 0 4
81552: PUSH
81553: LD_VAR 0 1
81557: PUSH
81558: FOR_IN
81559: IFFALSE 81597
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
81561: LD_ADDR_VAR 0 5
81565: PUSH
81566: LD_VAR 0 5
81570: PPUSH
81571: LD_VAR 0 5
81575: PUSH
81576: LD_INT 1
81578: PLUS
81579: PPUSH
81580: LD_VAR 0 4
81584: PPUSH
81585: CALL_OW 256
81589: PPUSH
81590: CALL_OW 2
81594: ST_TO_ADDR
81595: GO 81558
81597: POP
81598: POP
// if not tmp then
81599: LD_VAR 0 5
81603: NOT
81604: IFFALSE 81608
// exit ;
81606: GO 81656
// if asc then
81608: LD_VAR 0 2
81612: IFFALSE 81636
// result := SortListByListAsc ( units , tmp ) else
81614: LD_ADDR_VAR 0 3
81618: PUSH
81619: LD_VAR 0 1
81623: PPUSH
81624: LD_VAR 0 5
81628: PPUSH
81629: CALL_OW 76
81633: ST_TO_ADDR
81634: GO 81656
// result := SortListByListDesc ( units , tmp ) ;
81636: LD_ADDR_VAR 0 3
81640: PUSH
81641: LD_VAR 0 1
81645: PPUSH
81646: LD_VAR 0 5
81650: PPUSH
81651: CALL_OW 77
81655: ST_TO_ADDR
// end ;
81656: LD_VAR 0 3
81660: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
81661: LD_INT 0
81663: PPUSH
81664: PPUSH
// task := GetTaskList ( mech ) ;
81665: LD_ADDR_VAR 0 4
81669: PUSH
81670: LD_VAR 0 1
81674: PPUSH
81675: CALL_OW 437
81679: ST_TO_ADDR
// if not task then
81680: LD_VAR 0 4
81684: NOT
81685: IFFALSE 81689
// exit ;
81687: GO 81733
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
81689: LD_ADDR_VAR 0 3
81693: PUSH
81694: LD_VAR 0 4
81698: PUSH
81699: LD_INT 1
81701: ARRAY
81702: PUSH
81703: LD_INT 1
81705: ARRAY
81706: PUSH
81707: LD_STRING r
81709: EQUAL
81710: IFFALSE 81732
81712: PUSH
81713: LD_VAR 0 4
81717: PUSH
81718: LD_INT 1
81720: ARRAY
81721: PUSH
81722: LD_INT 4
81724: ARRAY
81725: PUSH
81726: LD_VAR 0 2
81730: EQUAL
81731: AND
81732: ST_TO_ADDR
// end ;
81733: LD_VAR 0 3
81737: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
81738: LD_INT 0
81740: PPUSH
// SetDir ( unit , d ) ;
81741: LD_VAR 0 1
81745: PPUSH
81746: LD_VAR 0 4
81750: PPUSH
81751: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
81755: LD_ADDR_VAR 0 6
81759: PUSH
81760: LD_VAR 0 1
81764: PPUSH
81765: LD_VAR 0 2
81769: PPUSH
81770: LD_VAR 0 3
81774: PPUSH
81775: LD_VAR 0 5
81779: PPUSH
81780: CALL_OW 48
81784: ST_TO_ADDR
// end ;
81785: LD_VAR 0 6
81789: RET
// export function ToNaturalNumber ( number ) ; begin
81790: LD_INT 0
81792: PPUSH
// result := number div 1 ;
81793: LD_ADDR_VAR 0 2
81797: PUSH
81798: LD_VAR 0 1
81802: PUSH
81803: LD_INT 1
81805: DIV
81806: ST_TO_ADDR
// if number < 0 then
81807: LD_VAR 0 1
81811: PUSH
81812: LD_INT 0
81814: LESS
81815: IFFALSE 81825
// result := 0 ;
81817: LD_ADDR_VAR 0 2
81821: PUSH
81822: LD_INT 0
81824: ST_TO_ADDR
// end ;
81825: LD_VAR 0 2
81829: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
81830: LD_INT 0
81832: PPUSH
81833: PPUSH
81834: PPUSH
// if not buildings then
81835: LD_VAR 0 1
81839: NOT
81840: IFFALSE 81844
// exit ;
81842: GO 81959
// tmp := [ ] ;
81844: LD_ADDR_VAR 0 5
81848: PUSH
81849: EMPTY
81850: ST_TO_ADDR
// for b in buildings do
81851: LD_ADDR_VAR 0 4
81855: PUSH
81856: LD_VAR 0 1
81860: PUSH
81861: FOR_IN
81862: IFFALSE 81900
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
81864: LD_ADDR_VAR 0 5
81868: PUSH
81869: LD_VAR 0 5
81873: PPUSH
81874: LD_VAR 0 5
81878: PUSH
81879: LD_INT 1
81881: PLUS
81882: PPUSH
81883: LD_VAR 0 4
81887: PPUSH
81888: CALL_OW 266
81892: PPUSH
81893: CALL_OW 1
81897: ST_TO_ADDR
81898: GO 81861
81900: POP
81901: POP
// if not tmp then
81902: LD_VAR 0 5
81906: NOT
81907: IFFALSE 81911
// exit ;
81909: GO 81959
// if asc then
81911: LD_VAR 0 2
81915: IFFALSE 81939
// result := SortListByListAsc ( buildings , tmp ) else
81917: LD_ADDR_VAR 0 3
81921: PUSH
81922: LD_VAR 0 1
81926: PPUSH
81927: LD_VAR 0 5
81931: PPUSH
81932: CALL_OW 76
81936: ST_TO_ADDR
81937: GO 81959
// result := SortListByListDesc ( buildings , tmp ) ;
81939: LD_ADDR_VAR 0 3
81943: PUSH
81944: LD_VAR 0 1
81948: PPUSH
81949: LD_VAR 0 5
81953: PPUSH
81954: CALL_OW 77
81958: ST_TO_ADDR
// end ;
81959: LD_VAR 0 3
81963: RET
// export function SortByClass ( units , class ) ; var un ; begin
81964: LD_INT 0
81966: PPUSH
81967: PPUSH
// if not units or not class then
81968: LD_VAR 0 1
81972: NOT
81973: IFTRUE 81982
81975: PUSH
81976: LD_VAR 0 2
81980: NOT
81981: OR
81982: IFFALSE 81986
// exit ;
81984: GO 82081
// result := [ ] ;
81986: LD_ADDR_VAR 0 3
81990: PUSH
81991: EMPTY
81992: ST_TO_ADDR
// for un in units do
81993: LD_ADDR_VAR 0 4
81997: PUSH
81998: LD_VAR 0 1
82002: PUSH
82003: FOR_IN
82004: IFFALSE 82079
// if GetClass ( un ) = class then
82006: LD_VAR 0 4
82010: PPUSH
82011: CALL_OW 257
82015: PUSH
82016: LD_VAR 0 2
82020: EQUAL
82021: IFFALSE 82048
// result := Insert ( result , 1 , un ) else
82023: LD_ADDR_VAR 0 3
82027: PUSH
82028: LD_VAR 0 3
82032: PPUSH
82033: LD_INT 1
82035: PPUSH
82036: LD_VAR 0 4
82040: PPUSH
82041: CALL_OW 2
82045: ST_TO_ADDR
82046: GO 82077
// result := Replace ( result , result + 1 , un ) ;
82048: LD_ADDR_VAR 0 3
82052: PUSH
82053: LD_VAR 0 3
82057: PPUSH
82058: LD_VAR 0 3
82062: PUSH
82063: LD_INT 1
82065: PLUS
82066: PPUSH
82067: LD_VAR 0 4
82071: PPUSH
82072: CALL_OW 1
82076: ST_TO_ADDR
82077: GO 82003
82079: POP
82080: POP
// end ;
82081: LD_VAR 0 3
82085: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
82086: LD_INT 0
82088: PPUSH
82089: PPUSH
82090: PPUSH
82091: PPUSH
82092: PPUSH
82093: PPUSH
82094: PPUSH
// result := [ ] ;
82095: LD_ADDR_VAR 0 4
82099: PUSH
82100: EMPTY
82101: ST_TO_ADDR
// if x - r < 0 then
82102: LD_VAR 0 1
82106: PUSH
82107: LD_VAR 0 3
82111: MINUS
82112: PUSH
82113: LD_INT 0
82115: LESS
82116: IFFALSE 82128
// min_x := 0 else
82118: LD_ADDR_VAR 0 8
82122: PUSH
82123: LD_INT 0
82125: ST_TO_ADDR
82126: GO 82144
// min_x := x - r ;
82128: LD_ADDR_VAR 0 8
82132: PUSH
82133: LD_VAR 0 1
82137: PUSH
82138: LD_VAR 0 3
82142: MINUS
82143: ST_TO_ADDR
// if y - r < 0 then
82144: LD_VAR 0 2
82148: PUSH
82149: LD_VAR 0 3
82153: MINUS
82154: PUSH
82155: LD_INT 0
82157: LESS
82158: IFFALSE 82170
// min_y := 0 else
82160: LD_ADDR_VAR 0 7
82164: PUSH
82165: LD_INT 0
82167: ST_TO_ADDR
82168: GO 82186
// min_y := y - r ;
82170: LD_ADDR_VAR 0 7
82174: PUSH
82175: LD_VAR 0 2
82179: PUSH
82180: LD_VAR 0 3
82184: MINUS
82185: ST_TO_ADDR
// max_x := x + r ;
82186: LD_ADDR_VAR 0 9
82190: PUSH
82191: LD_VAR 0 1
82195: PUSH
82196: LD_VAR 0 3
82200: PLUS
82201: ST_TO_ADDR
// max_y := y + r ;
82202: LD_ADDR_VAR 0 10
82206: PUSH
82207: LD_VAR 0 2
82211: PUSH
82212: LD_VAR 0 3
82216: PLUS
82217: ST_TO_ADDR
// for _x = min_x to max_x do
82218: LD_ADDR_VAR 0 5
82222: PUSH
82223: DOUBLE
82224: LD_VAR 0 8
82228: DEC
82229: ST_TO_ADDR
82230: LD_VAR 0 9
82234: PUSH
82235: FOR_TO
82236: IFFALSE 82337
// for _y = min_y to max_y do
82238: LD_ADDR_VAR 0 6
82242: PUSH
82243: DOUBLE
82244: LD_VAR 0 7
82248: DEC
82249: ST_TO_ADDR
82250: LD_VAR 0 10
82254: PUSH
82255: FOR_TO
82256: IFFALSE 82333
// begin if not ValidHex ( _x , _y ) then
82258: LD_VAR 0 5
82262: PPUSH
82263: LD_VAR 0 6
82267: PPUSH
82268: CALL_OW 488
82272: NOT
82273: IFFALSE 82277
// continue ;
82275: GO 82255
// if GetResourceTypeXY ( _x , _y ) then
82277: LD_VAR 0 5
82281: PPUSH
82282: LD_VAR 0 6
82286: PPUSH
82287: CALL_OW 283
82291: IFFALSE 82331
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
82293: LD_ADDR_VAR 0 4
82297: PUSH
82298: LD_VAR 0 4
82302: PPUSH
82303: LD_VAR 0 4
82307: PUSH
82308: LD_INT 1
82310: PLUS
82311: PPUSH
82312: LD_VAR 0 5
82316: PUSH
82317: LD_VAR 0 6
82321: PUSH
82322: EMPTY
82323: LIST
82324: LIST
82325: PPUSH
82326: CALL_OW 1
82330: ST_TO_ADDR
// end ;
82331: GO 82255
82333: POP
82334: POP
82335: GO 82235
82337: POP
82338: POP
// end ;
82339: LD_VAR 0 4
82343: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
82344: LD_INT 0
82346: PPUSH
82347: PPUSH
82348: PPUSH
82349: PPUSH
82350: PPUSH
82351: PPUSH
82352: PPUSH
82353: PPUSH
// if not units then
82354: LD_VAR 0 1
82358: NOT
82359: IFFALSE 82363
// exit ;
82361: GO 82895
// result := UnitFilter ( units , [ f_ok ] ) ;
82363: LD_ADDR_VAR 0 3
82367: PUSH
82368: LD_VAR 0 1
82372: PPUSH
82373: LD_INT 50
82375: PUSH
82376: EMPTY
82377: LIST
82378: PPUSH
82379: CALL_OW 72
82383: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
82384: LD_ADDR_VAR 0 8
82388: PUSH
82389: LD_VAR 0 1
82393: PUSH
82394: LD_INT 1
82396: ARRAY
82397: PPUSH
82398: CALL_OW 255
82402: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
82403: LD_ADDR_VAR 0 10
82407: PUSH
82408: LD_INT 29
82410: PUSH
82411: LD_INT 91
82413: PUSH
82414: LD_INT 49
82416: PUSH
82417: EMPTY
82418: LIST
82419: LIST
82420: LIST
82421: ST_TO_ADDR
// if not result then
82422: LD_VAR 0 3
82426: NOT
82427: IFFALSE 82431
// exit ;
82429: GO 82895
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
82431: LD_ADDR_VAR 0 5
82435: PUSH
82436: LD_INT 81
82438: PUSH
82439: LD_VAR 0 8
82443: PUSH
82444: EMPTY
82445: LIST
82446: LIST
82447: PPUSH
82448: CALL_OW 69
82452: ST_TO_ADDR
// for i in result do
82453: LD_ADDR_VAR 0 4
82457: PUSH
82458: LD_VAR 0 3
82462: PUSH
82463: FOR_IN
82464: IFFALSE 82893
// begin tag := GetTag ( i ) + 1 ;
82466: LD_ADDR_VAR 0 9
82470: PUSH
82471: LD_VAR 0 4
82475: PPUSH
82476: CALL_OW 110
82480: PUSH
82481: LD_INT 1
82483: PLUS
82484: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
82485: LD_ADDR_VAR 0 7
82489: PUSH
82490: LD_VAR 0 4
82494: PPUSH
82495: CALL_OW 250
82499: PPUSH
82500: LD_VAR 0 4
82504: PPUSH
82505: CALL_OW 251
82509: PPUSH
82510: LD_INT 4
82512: PPUSH
82513: CALL 82086 0 3
82517: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
82518: LD_VAR 0 4
82522: PPUSH
82523: CALL_OW 247
82527: PUSH
82528: LD_INT 2
82530: EQUAL
82531: IFFALSE 82543
82533: PUSH
82534: LD_VAR 0 7
82538: PUSH
82539: LD_INT 2
82541: GREATER
82542: AND
82543: IFFALSE 82563
82545: PUSH
82546: LD_VAR 0 4
82550: PPUSH
82551: CALL_OW 264
82555: PUSH
82556: LD_VAR 0 10
82560: IN
82561: NOT
82562: AND
82563: IFFALSE 82602
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
82565: LD_VAR 0 4
82569: PPUSH
82570: LD_VAR 0 7
82574: PUSH
82575: LD_INT 1
82577: ARRAY
82578: PUSH
82579: LD_INT 1
82581: ARRAY
82582: PPUSH
82583: LD_VAR 0 7
82587: PUSH
82588: LD_INT 1
82590: ARRAY
82591: PUSH
82592: LD_INT 2
82594: ARRAY
82595: PPUSH
82596: CALL_OW 116
82600: GO 82891
// if path > tag then
82602: LD_VAR 0 2
82606: PUSH
82607: LD_VAR 0 9
82611: GREATER
82612: IFFALSE 82820
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
82614: LD_ADDR_VAR 0 6
82618: PUSH
82619: LD_VAR 0 5
82623: PPUSH
82624: LD_INT 91
82626: PUSH
82627: LD_VAR 0 4
82631: PUSH
82632: LD_INT 8
82634: PUSH
82635: EMPTY
82636: LIST
82637: LIST
82638: LIST
82639: PPUSH
82640: CALL_OW 72
82644: ST_TO_ADDR
// if nearEnemy then
82645: LD_VAR 0 6
82649: IFFALSE 82718
// begin if GetWeapon ( i ) = ru_time_lapser then
82651: LD_VAR 0 4
82655: PPUSH
82656: CALL_OW 264
82660: PUSH
82661: LD_INT 49
82663: EQUAL
82664: IFFALSE 82692
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
82666: LD_VAR 0 4
82670: PPUSH
82671: LD_VAR 0 6
82675: PPUSH
82676: LD_VAR 0 4
82680: PPUSH
82681: CALL_OW 74
82685: PPUSH
82686: CALL_OW 112
82690: GO 82716
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
82692: LD_VAR 0 4
82696: PPUSH
82697: LD_VAR 0 6
82701: PPUSH
82702: LD_VAR 0 4
82706: PPUSH
82707: CALL_OW 74
82711: PPUSH
82712: CALL 83976 0 2
// end else
82716: GO 82818
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
82718: LD_VAR 0 4
82722: PPUSH
82723: LD_VAR 0 2
82727: PUSH
82728: LD_VAR 0 9
82732: ARRAY
82733: PUSH
82734: LD_INT 1
82736: ARRAY
82737: PPUSH
82738: LD_VAR 0 2
82742: PUSH
82743: LD_VAR 0 9
82747: ARRAY
82748: PUSH
82749: LD_INT 2
82751: ARRAY
82752: PPUSH
82753: CALL_OW 297
82757: PUSH
82758: LD_INT 6
82760: GREATER
82761: IFFALSE 82804
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
82763: LD_VAR 0 4
82767: PPUSH
82768: LD_VAR 0 2
82772: PUSH
82773: LD_VAR 0 9
82777: ARRAY
82778: PUSH
82779: LD_INT 1
82781: ARRAY
82782: PPUSH
82783: LD_VAR 0 2
82787: PUSH
82788: LD_VAR 0 9
82792: ARRAY
82793: PUSH
82794: LD_INT 2
82796: ARRAY
82797: PPUSH
82798: CALL_OW 114
82802: GO 82818
// SetTag ( i , tag ) ;
82804: LD_VAR 0 4
82808: PPUSH
82809: LD_VAR 0 9
82813: PPUSH
82814: CALL_OW 109
// end else
82818: GO 82891
// if enemy then
82820: LD_VAR 0 5
82824: IFFALSE 82891
// begin if GetWeapon ( i ) = ru_time_lapser then
82826: LD_VAR 0 4
82830: PPUSH
82831: CALL_OW 264
82835: PUSH
82836: LD_INT 49
82838: EQUAL
82839: IFFALSE 82867
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
82841: LD_VAR 0 4
82845: PPUSH
82846: LD_VAR 0 5
82850: PPUSH
82851: LD_VAR 0 4
82855: PPUSH
82856: CALL_OW 74
82860: PPUSH
82861: CALL_OW 112
82865: GO 82891
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
82867: LD_VAR 0 4
82871: PPUSH
82872: LD_VAR 0 5
82876: PPUSH
82877: LD_VAR 0 4
82881: PPUSH
82882: CALL_OW 74
82886: PPUSH
82887: CALL 83976 0 2
// end ; end ;
82891: GO 82463
82893: POP
82894: POP
// end ;
82895: LD_VAR 0 3
82899: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
82900: LD_INT 0
82902: PPUSH
82903: PPUSH
82904: PPUSH
// if not unit or IsInUnit ( unit ) then
82905: LD_VAR 0 1
82909: NOT
82910: IFTRUE 82923
82912: PUSH
82913: LD_VAR 0 1
82917: PPUSH
82918: CALL_OW 310
82922: OR
82923: IFFALSE 82927
// exit ;
82925: GO 83018
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
82927: LD_ADDR_VAR 0 4
82931: PUSH
82932: LD_VAR 0 1
82936: PPUSH
82937: CALL_OW 250
82941: PPUSH
82942: LD_VAR 0 2
82946: PPUSH
82947: LD_INT 1
82949: PPUSH
82950: CALL_OW 272
82954: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
82955: LD_ADDR_VAR 0 5
82959: PUSH
82960: LD_VAR 0 1
82964: PPUSH
82965: CALL_OW 251
82969: PPUSH
82970: LD_VAR 0 2
82974: PPUSH
82975: LD_INT 1
82977: PPUSH
82978: CALL_OW 273
82982: ST_TO_ADDR
// if ValidHex ( x , y ) then
82983: LD_VAR 0 4
82987: PPUSH
82988: LD_VAR 0 5
82992: PPUSH
82993: CALL_OW 488
82997: IFFALSE 83018
// ComTurnXY ( unit , x , y ) ;
82999: LD_VAR 0 1
83003: PPUSH
83004: LD_VAR 0 4
83008: PPUSH
83009: LD_VAR 0 5
83013: PPUSH
83014: CALL_OW 118
// end ;
83018: LD_VAR 0 3
83022: RET
// export function SeeUnits ( side , units ) ; var i ; begin
83023: LD_INT 0
83025: PPUSH
83026: PPUSH
// result := false ;
83027: LD_ADDR_VAR 0 3
83031: PUSH
83032: LD_INT 0
83034: ST_TO_ADDR
// if not units then
83035: LD_VAR 0 2
83039: NOT
83040: IFFALSE 83044
// exit ;
83042: GO 83089
// for i in units do
83044: LD_ADDR_VAR 0 4
83048: PUSH
83049: LD_VAR 0 2
83053: PUSH
83054: FOR_IN
83055: IFFALSE 83087
// if See ( side , i ) then
83057: LD_VAR 0 1
83061: PPUSH
83062: LD_VAR 0 4
83066: PPUSH
83067: CALL_OW 292
83071: IFFALSE 83085
// begin result := true ;
83073: LD_ADDR_VAR 0 3
83077: PUSH
83078: LD_INT 1
83080: ST_TO_ADDR
// exit ;
83081: POP
83082: POP
83083: GO 83089
// end ;
83085: GO 83054
83087: POP
83088: POP
// end ;
83089: LD_VAR 0 3
83093: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
83094: LD_INT 0
83096: PPUSH
83097: PPUSH
83098: PPUSH
83099: PPUSH
// if not unit or not points then
83100: LD_VAR 0 1
83104: NOT
83105: IFTRUE 83114
83107: PUSH
83108: LD_VAR 0 2
83112: NOT
83113: OR
83114: IFFALSE 83118
// exit ;
83116: GO 83208
// dist := 99999 ;
83118: LD_ADDR_VAR 0 5
83122: PUSH
83123: LD_INT 99999
83125: ST_TO_ADDR
// for i in points do
83126: LD_ADDR_VAR 0 4
83130: PUSH
83131: LD_VAR 0 2
83135: PUSH
83136: FOR_IN
83137: IFFALSE 83206
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
83139: LD_ADDR_VAR 0 6
83143: PUSH
83144: LD_VAR 0 1
83148: PPUSH
83149: LD_VAR 0 4
83153: PUSH
83154: LD_INT 1
83156: ARRAY
83157: PPUSH
83158: LD_VAR 0 4
83162: PUSH
83163: LD_INT 2
83165: ARRAY
83166: PPUSH
83167: CALL_OW 297
83171: ST_TO_ADDR
// if tmpDist < dist then
83172: LD_VAR 0 6
83176: PUSH
83177: LD_VAR 0 5
83181: LESS
83182: IFFALSE 83204
// begin result := i ;
83184: LD_ADDR_VAR 0 3
83188: PUSH
83189: LD_VAR 0 4
83193: ST_TO_ADDR
// dist := tmpDist ;
83194: LD_ADDR_VAR 0 5
83198: PUSH
83199: LD_VAR 0 6
83203: ST_TO_ADDR
// end ; end ;
83204: GO 83136
83206: POP
83207: POP
// end ;
83208: LD_VAR 0 3
83212: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
83213: LD_INT 0
83215: PPUSH
// uc_side := side ;
83216: LD_ADDR_OWVAR 20
83220: PUSH
83221: LD_VAR 0 1
83225: ST_TO_ADDR
// uc_nation := 3 ;
83226: LD_ADDR_OWVAR 21
83230: PUSH
83231: LD_INT 3
83233: ST_TO_ADDR
// vc_chassis := 25 ;
83234: LD_ADDR_OWVAR 37
83238: PUSH
83239: LD_INT 25
83241: ST_TO_ADDR
// vc_engine := engine_siberite ;
83242: LD_ADDR_OWVAR 39
83246: PUSH
83247: LD_INT 3
83249: ST_TO_ADDR
// vc_control := control_computer ;
83250: LD_ADDR_OWVAR 38
83254: PUSH
83255: LD_INT 3
83257: ST_TO_ADDR
// vc_weapon := 59 ;
83258: LD_ADDR_OWVAR 40
83262: PUSH
83263: LD_INT 59
83265: ST_TO_ADDR
// result := CreateVehicle ;
83266: LD_ADDR_VAR 0 5
83270: PUSH
83271: CALL_OW 45
83275: ST_TO_ADDR
// SetDir ( result , d ) ;
83276: LD_VAR 0 5
83280: PPUSH
83281: LD_VAR 0 4
83285: PPUSH
83286: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
83290: LD_VAR 0 5
83294: PPUSH
83295: LD_VAR 0 2
83299: PPUSH
83300: LD_VAR 0 3
83304: PPUSH
83305: LD_INT 0
83307: PPUSH
83308: CALL_OW 48
// end ;
83312: LD_VAR 0 5
83316: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
83317: LD_INT 0
83319: PPUSH
83320: PPUSH
83321: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
83322: LD_ADDR_VAR 0 2
83326: PUSH
83327: LD_INT 0
83329: PUSH
83330: LD_INT 0
83332: PUSH
83333: LD_INT 0
83335: PUSH
83336: LD_INT 0
83338: PUSH
83339: EMPTY
83340: LIST
83341: LIST
83342: LIST
83343: LIST
83344: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
83345: LD_VAR 0 1
83349: NOT
83350: IFTRUE 83383
83352: PUSH
83353: LD_VAR 0 1
83357: PPUSH
83358: CALL_OW 264
83362: PUSH
83363: LD_INT 12
83365: PUSH
83366: LD_INT 51
83368: PUSH
83369: LD_INT 32
83371: PUSH
83372: LD_INT 89
83374: PUSH
83375: EMPTY
83376: LIST
83377: LIST
83378: LIST
83379: LIST
83380: IN
83381: NOT
83382: OR
83383: IFFALSE 83387
// exit ;
83385: GO 83485
// for i := 1 to 3 do
83387: LD_ADDR_VAR 0 3
83391: PUSH
83392: DOUBLE
83393: LD_INT 1
83395: DEC
83396: ST_TO_ADDR
83397: LD_INT 3
83399: PUSH
83400: FOR_TO
83401: IFFALSE 83483
// begin tmp := GetCargo ( cargo , i ) ;
83403: LD_ADDR_VAR 0 4
83407: PUSH
83408: LD_VAR 0 1
83412: PPUSH
83413: LD_VAR 0 3
83417: PPUSH
83418: CALL_OW 289
83422: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
83423: LD_ADDR_VAR 0 2
83427: PUSH
83428: LD_VAR 0 2
83432: PPUSH
83433: LD_VAR 0 3
83437: PPUSH
83438: LD_VAR 0 4
83442: PPUSH
83443: CALL_OW 1
83447: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
83448: LD_ADDR_VAR 0 2
83452: PUSH
83453: LD_VAR 0 2
83457: PPUSH
83458: LD_INT 4
83460: PPUSH
83461: LD_VAR 0 2
83465: PUSH
83466: LD_INT 4
83468: ARRAY
83469: PUSH
83470: LD_VAR 0 4
83474: PLUS
83475: PPUSH
83476: CALL_OW 1
83480: ST_TO_ADDR
// end ;
83481: GO 83400
83483: POP
83484: POP
// end ;
83485: LD_VAR 0 2
83489: RET
// export function Length ( array ) ; begin
83490: LD_INT 0
83492: PPUSH
// result := array + 0 ;
83493: LD_ADDR_VAR 0 2
83497: PUSH
83498: LD_VAR 0 1
83502: PUSH
83503: LD_INT 0
83505: PLUS
83506: ST_TO_ADDR
// end ;
83507: LD_VAR 0 2
83511: RET
// export function PrepareArray ( array ) ; begin
83512: LD_INT 0
83514: PPUSH
// result := array diff 0 ;
83515: LD_ADDR_VAR 0 2
83519: PUSH
83520: LD_VAR 0 1
83524: PUSH
83525: LD_INT 0
83527: DIFF
83528: ST_TO_ADDR
// if not result [ 1 ] then
83529: LD_VAR 0 2
83533: PUSH
83534: LD_INT 1
83536: ARRAY
83537: NOT
83538: IFFALSE 83558
// result := Delete ( result , 1 ) ;
83540: LD_ADDR_VAR 0 2
83544: PUSH
83545: LD_VAR 0 2
83549: PPUSH
83550: LD_INT 1
83552: PPUSH
83553: CALL_OW 3
83557: ST_TO_ADDR
// end ;
83558: LD_VAR 0 2
83562: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
83563: LD_INT 0
83565: PPUSH
83566: PPUSH
83567: PPUSH
83568: PPUSH
// sibRocketRange := 25 ;
83569: LD_ADDR_VAR 0 6
83573: PUSH
83574: LD_INT 25
83576: ST_TO_ADDR
// result := false ;
83577: LD_ADDR_VAR 0 4
83581: PUSH
83582: LD_INT 0
83584: ST_TO_ADDR
// for i := 0 to 5 do
83585: LD_ADDR_VAR 0 5
83589: PUSH
83590: DOUBLE
83591: LD_INT 0
83593: DEC
83594: ST_TO_ADDR
83595: LD_INT 5
83597: PUSH
83598: FOR_TO
83599: IFFALSE 83666
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
83601: LD_VAR 0 1
83605: PPUSH
83606: LD_VAR 0 5
83610: PPUSH
83611: LD_VAR 0 6
83615: PPUSH
83616: CALL_OW 272
83620: PPUSH
83621: LD_VAR 0 2
83625: PPUSH
83626: LD_VAR 0 5
83630: PPUSH
83631: LD_VAR 0 6
83635: PPUSH
83636: CALL_OW 273
83640: PPUSH
83641: LD_VAR 0 3
83645: PPUSH
83646: CALL_OW 309
83650: IFFALSE 83664
// begin result := true ;
83652: LD_ADDR_VAR 0 4
83656: PUSH
83657: LD_INT 1
83659: ST_TO_ADDR
// exit ;
83660: POP
83661: POP
83662: GO 83668
// end ;
83664: GO 83598
83666: POP
83667: POP
// end ;
83668: LD_VAR 0 4
83672: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
83673: LD_INT 0
83675: PPUSH
83676: PPUSH
83677: PPUSH
// if btype = b_depot then
83678: LD_VAR 0 2
83682: PUSH
83683: LD_INT 0
83685: EQUAL
83686: IFFALSE 83698
// begin result := true ;
83688: LD_ADDR_VAR 0 3
83692: PUSH
83693: LD_INT 1
83695: ST_TO_ADDR
// exit ;
83696: GO 83818
// end ; pom := GetBase ( depot ) ;
83698: LD_ADDR_VAR 0 4
83702: PUSH
83703: LD_VAR 0 1
83707: PPUSH
83708: CALL_OW 274
83712: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
83713: LD_ADDR_VAR 0 5
83717: PUSH
83718: LD_VAR 0 2
83722: PPUSH
83723: LD_VAR 0 1
83727: PPUSH
83728: CALL_OW 248
83732: PPUSH
83733: CALL_OW 450
83737: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
83738: LD_ADDR_VAR 0 3
83742: PUSH
83743: LD_VAR 0 4
83747: PPUSH
83748: LD_INT 1
83750: PPUSH
83751: CALL_OW 275
83755: PUSH
83756: LD_VAR 0 5
83760: PUSH
83761: LD_INT 1
83763: ARRAY
83764: GREATEREQUAL
83765: IFFALSE 83791
83767: PUSH
83768: LD_VAR 0 4
83772: PPUSH
83773: LD_INT 2
83775: PPUSH
83776: CALL_OW 275
83780: PUSH
83781: LD_VAR 0 5
83785: PUSH
83786: LD_INT 2
83788: ARRAY
83789: GREATEREQUAL
83790: AND
83791: IFFALSE 83817
83793: PUSH
83794: LD_VAR 0 4
83798: PPUSH
83799: LD_INT 3
83801: PPUSH
83802: CALL_OW 275
83806: PUSH
83807: LD_VAR 0 5
83811: PUSH
83812: LD_INT 3
83814: ARRAY
83815: GREATEREQUAL
83816: AND
83817: ST_TO_ADDR
// end ;
83818: LD_VAR 0 3
83822: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
83823: LD_INT 0
83825: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
83826: LD_VAR 0 1
83830: PPUSH
83831: LD_VAR 0 2
83835: PPUSH
83836: LD_INT 0
83838: PPUSH
83839: LD_INT 0
83841: PPUSH
83842: LD_INT 1
83844: PPUSH
83845: LD_INT 0
83847: PPUSH
83848: CALL_OW 587
// end ;
83852: LD_VAR 0 3
83856: RET
// export function CenterOnNow ( unit ) ; begin
83857: LD_INT 0
83859: PPUSH
// result := IsInUnit ( unit ) ;
83860: LD_ADDR_VAR 0 2
83864: PUSH
83865: LD_VAR 0 1
83869: PPUSH
83870: CALL_OW 310
83874: ST_TO_ADDR
// if not result then
83875: LD_VAR 0 2
83879: NOT
83880: IFFALSE 83892
// result := unit ;
83882: LD_ADDR_VAR 0 2
83886: PUSH
83887: LD_VAR 0 1
83891: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
83892: LD_VAR 0 1
83896: PPUSH
83897: CALL_OW 87
// end ;
83901: LD_VAR 0 2
83905: RET
// export function ComMoveHex ( unit , hex ) ; begin
83906: LD_INT 0
83908: PPUSH
// if not hex then
83909: LD_VAR 0 2
83913: NOT
83914: IFFALSE 83918
// exit ;
83916: GO 83971
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
83918: LD_VAR 0 2
83922: PUSH
83923: LD_INT 1
83925: ARRAY
83926: PPUSH
83927: LD_VAR 0 2
83931: PUSH
83932: LD_INT 2
83934: ARRAY
83935: PPUSH
83936: CALL_OW 428
83940: IFFALSE 83944
// exit ;
83942: GO 83971
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
83944: LD_VAR 0 1
83948: PPUSH
83949: LD_VAR 0 2
83953: PUSH
83954: LD_INT 1
83956: ARRAY
83957: PPUSH
83958: LD_VAR 0 2
83962: PUSH
83963: LD_INT 2
83965: ARRAY
83966: PPUSH
83967: CALL_OW 111
// end ;
83971: LD_VAR 0 3
83975: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
83976: LD_INT 0
83978: PPUSH
83979: PPUSH
83980: PPUSH
// if not unit or not enemy then
83981: LD_VAR 0 1
83985: NOT
83986: IFTRUE 83995
83988: PUSH
83989: LD_VAR 0 2
83993: NOT
83994: OR
83995: IFFALSE 83999
// exit ;
83997: GO 84125
// x := GetX ( enemy ) ;
83999: LD_ADDR_VAR 0 4
84003: PUSH
84004: LD_VAR 0 2
84008: PPUSH
84009: CALL_OW 250
84013: ST_TO_ADDR
// y := GetY ( enemy ) ;
84014: LD_ADDR_VAR 0 5
84018: PUSH
84019: LD_VAR 0 2
84023: PPUSH
84024: CALL_OW 251
84028: ST_TO_ADDR
// if ValidHex ( x , y ) then
84029: LD_VAR 0 4
84033: PPUSH
84034: LD_VAR 0 5
84038: PPUSH
84039: CALL_OW 488
84043: IFFALSE 84125
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
84045: LD_VAR 0 2
84049: PPUSH
84050: CALL_OW 247
84054: PUSH
84055: LD_INT 3
84057: PUSH
84058: LD_INT 2
84060: PUSH
84061: EMPTY
84062: LIST
84063: LIST
84064: IN
84065: IFTRUE 84088
84067: PUSH
84068: LD_VAR 0 1
84072: PPUSH
84073: CALL_OW 255
84077: PPUSH
84078: LD_VAR 0 2
84082: PPUSH
84083: CALL_OW 292
84087: OR
84088: IFFALSE 84106
// ComAttackUnit ( unit , enemy ) else
84090: LD_VAR 0 1
84094: PPUSH
84095: LD_VAR 0 2
84099: PPUSH
84100: CALL_OW 115
84104: GO 84125
// ComAgressiveMove ( unit , x , y ) ;
84106: LD_VAR 0 1
84110: PPUSH
84111: LD_VAR 0 4
84115: PPUSH
84116: LD_VAR 0 5
84120: PPUSH
84121: CALL_OW 114
// end ;
84125: LD_VAR 0 3
84129: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
84130: LD_INT 0
84132: PPUSH
84133: PPUSH
84134: PPUSH
// list := AreaToList ( area , 0 ) ;
84135: LD_ADDR_VAR 0 5
84139: PUSH
84140: LD_VAR 0 1
84144: PPUSH
84145: LD_INT 0
84147: PPUSH
84148: CALL_OW 517
84152: ST_TO_ADDR
// if not list then
84153: LD_VAR 0 5
84157: NOT
84158: IFFALSE 84162
// exit ;
84160: GO 84292
// if all then
84162: LD_VAR 0 2
84166: IFFALSE 84254
// begin for i := 1 to list [ 1 ] do
84168: LD_ADDR_VAR 0 4
84172: PUSH
84173: DOUBLE
84174: LD_INT 1
84176: DEC
84177: ST_TO_ADDR
84178: LD_VAR 0 5
84182: PUSH
84183: LD_INT 1
84185: ARRAY
84186: PUSH
84187: FOR_TO
84188: IFFALSE 84250
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
84190: LD_ADDR_VAR 0 3
84194: PUSH
84195: LD_VAR 0 3
84199: PPUSH
84200: LD_VAR 0 3
84204: PUSH
84205: LD_INT 1
84207: PLUS
84208: PPUSH
84209: LD_VAR 0 5
84213: PUSH
84214: LD_INT 1
84216: ARRAY
84217: PUSH
84218: LD_VAR 0 4
84222: ARRAY
84223: PUSH
84224: LD_VAR 0 5
84228: PUSH
84229: LD_INT 2
84231: ARRAY
84232: PUSH
84233: LD_VAR 0 4
84237: ARRAY
84238: PUSH
84239: EMPTY
84240: LIST
84241: LIST
84242: PPUSH
84243: CALL_OW 1
84247: ST_TO_ADDR
84248: GO 84187
84250: POP
84251: POP
// exit ;
84252: GO 84292
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
84254: LD_ADDR_VAR 0 3
84258: PUSH
84259: LD_VAR 0 5
84263: PUSH
84264: LD_INT 1
84266: ARRAY
84267: PUSH
84268: LD_INT 1
84270: ARRAY
84271: PUSH
84272: LD_VAR 0 5
84276: PUSH
84277: LD_INT 2
84279: ARRAY
84280: PUSH
84281: LD_INT 1
84283: ARRAY
84284: PUSH
84285: EMPTY
84286: LIST
84287: LIST
84288: PUSH
84289: EMPTY
84290: LIST
84291: ST_TO_ADDR
// end ;
84292: LD_VAR 0 3
84296: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
84297: LD_INT 0
84299: PPUSH
84300: PPUSH
// list := AreaToList ( area , 0 ) ;
84301: LD_ADDR_VAR 0 4
84305: PUSH
84306: LD_VAR 0 1
84310: PPUSH
84311: LD_INT 0
84313: PPUSH
84314: CALL_OW 517
84318: ST_TO_ADDR
// if not list then
84319: LD_VAR 0 4
84323: NOT
84324: IFFALSE 84328
// exit ;
84326: GO 84369
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
84328: LD_ADDR_VAR 0 3
84332: PUSH
84333: LD_VAR 0 4
84337: PUSH
84338: LD_INT 1
84340: ARRAY
84341: PUSH
84342: LD_INT 1
84344: ARRAY
84345: PUSH
84346: LD_VAR 0 4
84350: PUSH
84351: LD_INT 2
84353: ARRAY
84354: PUSH
84355: LD_INT 1
84357: ARRAY
84358: PUSH
84359: LD_VAR 0 2
84363: PUSH
84364: EMPTY
84365: LIST
84366: LIST
84367: LIST
84368: ST_TO_ADDR
// end ;
84369: LD_VAR 0 3
84373: RET
// export function First ( array ) ; begin
84374: LD_INT 0
84376: PPUSH
// if not array then
84377: LD_VAR 0 1
84381: NOT
84382: IFFALSE 84386
// exit ;
84384: GO 84400
// result := array [ 1 ] ;
84386: LD_ADDR_VAR 0 2
84390: PUSH
84391: LD_VAR 0 1
84395: PUSH
84396: LD_INT 1
84398: ARRAY
84399: ST_TO_ADDR
// end ;
84400: LD_VAR 0 2
84404: RET
// export function Last ( array ) ; begin
84405: LD_INT 0
84407: PPUSH
// if not array then
84408: LD_VAR 0 1
84412: NOT
84413: IFFALSE 84417
// exit ;
84415: GO 84433
// result := array [ array ] ;
84417: LD_ADDR_VAR 0 2
84421: PUSH
84422: LD_VAR 0 1
84426: PUSH
84427: LD_VAR 0 1
84431: ARRAY
84432: ST_TO_ADDR
// end ;
84433: LD_VAR 0 2
84437: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
84438: LD_INT 0
84440: PPUSH
84441: PPUSH
// result := [ ] ;
84442: LD_ADDR_VAR 0 5
84446: PUSH
84447: EMPTY
84448: ST_TO_ADDR
// if not array then
84449: LD_VAR 0 1
84453: NOT
84454: IFFALSE 84458
// exit ;
84456: GO 84570
// for i := 1 to array do
84458: LD_ADDR_VAR 0 6
84462: PUSH
84463: DOUBLE
84464: LD_INT 1
84466: DEC
84467: ST_TO_ADDR
84468: LD_VAR 0 1
84472: PUSH
84473: FOR_TO
84474: IFFALSE 84568
// if array [ i ] [ index ] = value then
84476: LD_VAR 0 1
84480: PUSH
84481: LD_VAR 0 6
84485: ARRAY
84486: PUSH
84487: LD_VAR 0 2
84491: ARRAY
84492: PUSH
84493: LD_VAR 0 3
84497: EQUAL
84498: IFFALSE 84566
// begin if indexColumn then
84500: LD_VAR 0 4
84504: IFFALSE 84540
// result := Join ( result , array [ i ] [ indexColumn ] ) else
84506: LD_ADDR_VAR 0 5
84510: PUSH
84511: LD_VAR 0 5
84515: PPUSH
84516: LD_VAR 0 1
84520: PUSH
84521: LD_VAR 0 6
84525: ARRAY
84526: PUSH
84527: LD_VAR 0 4
84531: ARRAY
84532: PPUSH
84533: CALL 79578 0 2
84537: ST_TO_ADDR
84538: GO 84566
// result := Join ( result , array [ i ] ) ;
84540: LD_ADDR_VAR 0 5
84544: PUSH
84545: LD_VAR 0 5
84549: PPUSH
84550: LD_VAR 0 1
84554: PUSH
84555: LD_VAR 0 6
84559: ARRAY
84560: PPUSH
84561: CALL 79578 0 2
84565: ST_TO_ADDR
// end ;
84566: GO 84473
84568: POP
84569: POP
// end ;
84570: LD_VAR 0 5
84574: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
84575: LD_INT 0
84577: PPUSH
// if not vehicles or not parkingPoint then
84578: LD_VAR 0 1
84582: NOT
84583: IFTRUE 84592
84585: PUSH
84586: LD_VAR 0 2
84590: NOT
84591: OR
84592: IFFALSE 84596
// exit ;
84594: GO 84694
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
84596: LD_ADDR_VAR 0 1
84600: PUSH
84601: LD_VAR 0 1
84605: PPUSH
84606: LD_INT 50
84608: PUSH
84609: EMPTY
84610: LIST
84611: PUSH
84612: LD_INT 3
84614: PUSH
84615: LD_INT 92
84617: PUSH
84618: LD_VAR 0 2
84622: PUSH
84623: LD_INT 1
84625: ARRAY
84626: PUSH
84627: LD_VAR 0 2
84631: PUSH
84632: LD_INT 2
84634: ARRAY
84635: PUSH
84636: LD_INT 8
84638: PUSH
84639: EMPTY
84640: LIST
84641: LIST
84642: LIST
84643: LIST
84644: PUSH
84645: EMPTY
84646: LIST
84647: LIST
84648: PUSH
84649: EMPTY
84650: LIST
84651: LIST
84652: PPUSH
84653: CALL_OW 72
84657: ST_TO_ADDR
// if not vehicles then
84658: LD_VAR 0 1
84662: NOT
84663: IFFALSE 84667
// exit ;
84665: GO 84694
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
84667: LD_VAR 0 1
84671: PPUSH
84672: LD_VAR 0 2
84676: PUSH
84677: LD_INT 1
84679: ARRAY
84680: PPUSH
84681: LD_VAR 0 2
84685: PUSH
84686: LD_INT 2
84688: ARRAY
84689: PPUSH
84690: CALL_OW 111
// end ;
84694: LD_VAR 0 3
84698: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
84699: LD_INT 0
84701: PPUSH
84702: PPUSH
84703: PPUSH
// if not side or not area then
84704: LD_VAR 0 1
84708: NOT
84709: IFTRUE 84718
84711: PUSH
84712: LD_VAR 0 2
84716: NOT
84717: OR
84718: IFFALSE 84722
// exit ;
84720: GO 84841
// tmp := AreaToList ( area , 0 ) ;
84722: LD_ADDR_VAR 0 5
84726: PUSH
84727: LD_VAR 0 2
84731: PPUSH
84732: LD_INT 0
84734: PPUSH
84735: CALL_OW 517
84739: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
84740: LD_ADDR_VAR 0 4
84744: PUSH
84745: DOUBLE
84746: LD_INT 1
84748: DEC
84749: ST_TO_ADDR
84750: LD_VAR 0 5
84754: PUSH
84755: LD_INT 1
84757: ARRAY
84758: PUSH
84759: FOR_TO
84760: IFFALSE 84839
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
84762: LD_VAR 0 5
84766: PUSH
84767: LD_INT 1
84769: ARRAY
84770: PUSH
84771: LD_VAR 0 4
84775: ARRAY
84776: PPUSH
84777: LD_VAR 0 5
84781: PUSH
84782: LD_INT 2
84784: ARRAY
84785: PUSH
84786: LD_VAR 0 4
84790: ARRAY
84791: PPUSH
84792: CALL_OW 351
84796: IFFALSE 84837
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
84798: LD_VAR 0 5
84802: PUSH
84803: LD_INT 1
84805: ARRAY
84806: PUSH
84807: LD_VAR 0 4
84811: ARRAY
84812: PPUSH
84813: LD_VAR 0 5
84817: PUSH
84818: LD_INT 2
84820: ARRAY
84821: PUSH
84822: LD_VAR 0 4
84826: ARRAY
84827: PPUSH
84828: LD_VAR 0 1
84832: PPUSH
84833: CALL_OW 244
// end ;
84837: GO 84759
84839: POP
84840: POP
// end ; end_of_file
84841: LD_VAR 0 3
84845: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
84846: LD_VAR 0 1
84850: PUSH
84851: LD_INT 200
84853: DOUBLE
84854: GREATEREQUAL
84855: IFFALSE 84863
84857: LD_INT 299
84859: DOUBLE
84860: LESSEQUAL
84861: IFTRUE 84865
84863: GO 84897
84865: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
84866: LD_VAR 0 1
84870: PPUSH
84871: LD_VAR 0 2
84875: PPUSH
84876: LD_VAR 0 3
84880: PPUSH
84881: LD_VAR 0 4
84885: PPUSH
84886: LD_VAR 0 5
84890: PPUSH
84891: CALL 36689 0 5
84895: GO 84974
84897: LD_INT 300
84899: DOUBLE
84900: GREATEREQUAL
84901: IFFALSE 84909
84903: LD_INT 399
84905: DOUBLE
84906: LESSEQUAL
84907: IFTRUE 84911
84909: GO 84973
84911: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
84912: LD_VAR 0 1
84916: PPUSH
84917: LD_VAR 0 2
84921: PPUSH
84922: LD_VAR 0 3
84926: PPUSH
84927: LD_VAR 0 4
84931: PPUSH
84932: LD_VAR 0 5
84936: PPUSH
84937: LD_VAR 0 6
84941: PPUSH
84942: LD_VAR 0 7
84946: PPUSH
84947: LD_VAR 0 8
84951: PPUSH
84952: LD_VAR 0 9
84956: PPUSH
84957: LD_VAR 0 10
84961: PPUSH
84962: LD_VAR 0 11
84966: PPUSH
84967: CALL 32573 0 11
84971: GO 84974
84973: POP
// end ;
84974: PPOPN 11
84976: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
84977: LD_VAR 0 1
84981: PPUSH
84982: LD_VAR 0 2
84986: PPUSH
84987: LD_VAR 0 3
84991: PPUSH
84992: LD_VAR 0 4
84996: PPUSH
84997: LD_VAR 0 5
85001: PPUSH
85002: CALL 36070 0 5
// end ; end_of_file
85006: PPOPN 5
85008: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
85009: LD_VAR 0 1
85013: PPUSH
85014: LD_VAR 0 2
85018: PPUSH
85019: LD_VAR 0 3
85023: PPUSH
85024: LD_VAR 0 4
85028: PPUSH
85029: LD_VAR 0 5
85033: PPUSH
85034: LD_VAR 0 6
85038: PPUSH
85039: CALL 20113 0 6
// end ;
85043: PPOPN 6
85045: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
85046: LD_INT 0
85048: PPUSH
// begin if not units then
85049: LD_VAR 0 1
85053: NOT
85054: IFFALSE 85058
// exit ;
85056: GO 85058
// end ;
85058: PPOPN 7
85060: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
85061: CALL 20000 0 0
// end ;
85065: PPOPN 1
85067: END
