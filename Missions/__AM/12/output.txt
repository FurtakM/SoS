// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export Powell ; export Davidov ; export Kurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; export westPathUsed , laserCounterDestroy , rocketBuilded ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 92 0 0
// SetBName ( rueastdepot , ryutin ) ;
  19: LD_INT 4
  21: PPUSH
  22: LD_STRING ryutin
  24: PPUSH
  25: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  29: LD_INT 6
  31: PPUSH
  32: LD_STRING yegorov
  34: PPUSH
  35: CALL_OW 500
// CreateNature ;
  39: CALL 15086 0 0
// PrepareDifficulty ;
  43: CALL 12459 0 0
// PrepareVehicles ;
  47: CALL 1780 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
  51: LD_INT 4
  53: PPUSH
  54: LD_INT 0
  56: PPUSH
  57: LD_INT 1
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL 1362 0 4
// PrepareAmericanHeroes ;
  67: CALL 652 0 0
// PrepareRussianCommander ;
  71: CALL 3253 0 0
// PrepareWestBase ;
  75: CALL 3810 0 0
// PrepareEastBase ;
  79: CALL 3332 0 0
// PrepareOtherRussians ;
  83: CALL 3948 0 0
// Action ;
  87: CALL 5612 0 0
// end ;
  91: END
// function Init ; begin
  92: LD_INT 0
  94: PPUSH
// RuScientists := [ ] ;
  95: LD_ADDR_EXP 27
  99: PUSH
 100: EMPTY
 101: ST_TO_ADDR
// sciCounter := 0 ;
 102: LD_ADDR_EXP 28
 106: PUSH
 107: LD_INT 0
 109: ST_TO_ADDR
// ruDestroyedBuildings := [ ] ;
 110: LD_ADDR_EXP 31
 114: PUSH
 115: EMPTY
 116: ST_TO_ADDR
// russianTanks := [ ] ;
 117: LD_ADDR_EXP 32
 121: PUSH
 122: EMPTY
 123: ST_TO_ADDR
// russianTimeLapsers := [ ] ;
 124: LD_ADDR_EXP 33
 128: PUSH
 129: EMPTY
 130: ST_TO_ADDR
// arabianMines := [ ] ;
 131: LD_ADDR_EXP 37
 135: PUSH
 136: EMPTY
 137: ST_TO_ADDR
// kurtStatus := LoadVariable ( 06_KurtStatus_1 , 0 ) ;
 138: LD_ADDR_EXP 19
 142: PUSH
 143: LD_STRING 06_KurtStatus_1
 145: PPUSH
 146: LD_INT 0
 148: PPUSH
 149: CALL_OW 30
 153: ST_TO_ADDR
// secondPass := 0 ;
 154: LD_ADDR_EXP 20
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// teleportExplored := 0 ;
 162: LD_ADDR_EXP 26
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// attackTactic := 0 ;
 170: LD_ADDR_EXP 36
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// tpCounter := 0 ;
 178: LD_ADDR_EXP 22
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// askSiberite := 0 ;
 186: LD_ADDR_EXP 25
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// warWithLegion := 0 ;
 194: LD_ADDR_EXP 23
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// fakeInfo := 0 ;
 202: LD_ADDR_EXP 24
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// cratesSpawned := 0 ;
 210: LD_ADDR_EXP 38
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// ruAI := 0 ;
 218: LD_ADDR_EXP 34
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// ruEscape := 0 ;
 226: LD_ADDR_EXP 35
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// eventVar1 := 0 ;
 234: LD_ADDR_EXP 40
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// mission_prefix := 12_ ;
 242: LD_ADDR_EXP 39
 246: PUSH
 247: LD_STRING 12_
 249: ST_TO_ADDR
// debugMode := 0 ;
 250: LD_ADDR_EXP 41
 254: PUSH
 255: LD_INT 0
 257: ST_TO_ADDR
// westPathUsed := false ;
 258: LD_ADDR_EXP 42
 262: PUSH
 263: LD_INT 0
 265: ST_TO_ADDR
// laserCounterDestroy := 0 ;
 266: LD_ADDR_EXP 43
 270: PUSH
 271: LD_INT 0
 273: ST_TO_ADDR
// rocketBuilded := false ;
 274: LD_ADDR_EXP 44
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// end ;
 282: LD_VAR 0 1
 286: RET
// every 0 0$1 trigger debugMode do var i ;
 287: LD_EXP 41
 291: IFFALSE 597
 293: GO 295
 295: DISABLE
 296: LD_INT 0
 298: PPUSH
// begin enable ;
 299: ENABLE
// FogOff ( true ) ;
 300: LD_INT 1
 302: PPUSH
 303: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 307: LD_ADDR_VAR 0 1
 311: PUSH
 312: LD_INT 22
 314: PUSH
 315: LD_INT 1
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: PUSH
 322: LD_INT 21
 324: PUSH
 325: LD_INT 1
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PPUSH
 336: CALL_OW 69
 340: PUSH
 341: FOR_IN
 342: IFFALSE 358
// SetLives ( i , 1000 ) ;
 344: LD_VAR 0 1
 348: PPUSH
 349: LD_INT 1000
 351: PPUSH
 352: CALL_OW 234
 356: GO 341
 358: POP
 359: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 360: LD_ADDR_VAR 0 1
 364: PUSH
 365: LD_INT 22
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 2
 377: PUSH
 378: LD_INT 30
 380: PUSH
 381: LD_INT 0
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PUSH
 388: LD_INT 30
 390: PUSH
 391: LD_INT 1
 393: PUSH
 394: EMPTY
 395: LIST
 396: LIST
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: LIST
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: PPUSH
 407: CALL_OW 69
 411: PUSH
 412: FOR_IN
 413: IFFALSE 437
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 415: LD_VAR 0 1
 419: PPUSH
 420: CALL_OW 274
 424: PPUSH
 425: LD_INT 1
 427: PPUSH
 428: LD_INT 9999
 430: PPUSH
 431: CALL_OW 277
 435: GO 412
 437: POP
 438: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 439: LD_ADDR_VAR 0 1
 443: PUSH
 444: LD_INT 22
 446: PUSH
 447: LD_INT 1
 449: PUSH
 450: EMPTY
 451: LIST
 452: LIST
 453: PUSH
 454: LD_INT 2
 456: PUSH
 457: LD_INT 30
 459: PUSH
 460: LD_INT 0
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: PUSH
 467: LD_INT 30
 469: PUSH
 470: LD_INT 1
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PPUSH
 486: CALL_OW 69
 490: PUSH
 491: FOR_IN
 492: IFFALSE 516
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 494: LD_VAR 0 1
 498: PPUSH
 499: CALL_OW 274
 503: PPUSH
 504: LD_INT 2
 506: PPUSH
 507: LD_INT 9999
 509: PPUSH
 510: CALL_OW 277
 514: GO 491
 516: POP
 517: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 518: LD_ADDR_VAR 0 1
 522: PUSH
 523: LD_INT 22
 525: PUSH
 526: LD_INT 1
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PUSH
 533: LD_INT 2
 535: PUSH
 536: LD_INT 30
 538: PUSH
 539: LD_INT 0
 541: PUSH
 542: EMPTY
 543: LIST
 544: LIST
 545: PUSH
 546: LD_INT 30
 548: PUSH
 549: LD_INT 1
 551: PUSH
 552: EMPTY
 553: LIST
 554: LIST
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: LIST
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: PPUSH
 565: CALL_OW 69
 569: PUSH
 570: FOR_IN
 571: IFFALSE 595
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 573: LD_VAR 0 1
 577: PPUSH
 578: CALL_OW 274
 582: PPUSH
 583: LD_INT 3
 585: PPUSH
 586: LD_INT 9999
 588: PPUSH
 589: CALL_OW 277
 593: GO 570
 595: POP
 596: POP
// end ;
 597: PPOPN 1
 599: END
// every 0 0$1 trigger FilterUnitsInArea ( westPathArea , [ f_side , 1 ] ) do
 600: LD_INT 24
 602: PPUSH
 603: LD_INT 22
 605: PUSH
 606: LD_INT 1
 608: PUSH
 609: EMPTY
 610: LIST
 611: LIST
 612: PPUSH
 613: CALL_OW 70
 617: IFFALSE 630
 619: GO 621
 621: DISABLE
// westPathUsed := true ;
 622: LD_ADDR_EXP 42
 626: PUSH
 627: LD_INT 1
 629: ST_TO_ADDR
 630: END
// every 0 0$1 trigger laserCounterDestroy >= 3 do
 631: LD_EXP 43
 635: PUSH
 636: LD_INT 3
 638: GREATEREQUAL
 639: IFFALSE 651
 641: GO 643
 643: DISABLE
// SetAchievement ( ACH_LASER ) ; end_of_file
 644: LD_STRING ACH_LASER
 646: PPUSH
 647: CALL_OW 543
 651: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 652: LD_INT 0
 654: PPUSH
 655: PPUSH
 656: PPUSH
// uc_side := 1 ;
 657: LD_ADDR_OWVAR 20
 661: PUSH
 662: LD_INT 1
 664: ST_TO_ADDR
// others11 := CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 665: LD_ADDR_EXP 14
 669: PUSH
 670: LD_STRING 11c_others
 672: PPUSH
 673: CALL_OW 31
 677: PUSH
 678: LD_STRING 11_others
 680: PPUSH
 681: CALL_OW 31
 685: UNION
 686: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true , 11_ ) ;
 687: LD_ADDR_EXP 1
 691: PUSH
 692: LD_STRING JMM
 694: PPUSH
 695: LD_INT 1
 697: PPUSH
 698: LD_STRING 11_
 700: PPUSH
 701: CALL 39764 0 3
 705: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 706: LD_EXP 1
 710: PPUSH
 711: LD_INT 1
 713: PPUSH
 714: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 718: LD_EXP 1
 722: PPUSH
 723: LD_INT 22
 725: PUSH
 726: LD_INT 1
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: PUSH
 733: LD_INT 21
 735: PUSH
 736: LD_INT 2
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: PUSH
 743: LD_INT 58
 745: PUSH
 746: EMPTY
 747: LIST
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: LIST
 753: PPUSH
 754: CALL_OW 69
 758: PUSH
 759: LD_INT 1
 761: ARRAY
 762: PPUSH
 763: CALL_OW 52
// if TestCharacters ( 11_Lisa ) then
 767: LD_STRING 11_Lisa
 769: PPUSH
 770: CALL_OW 28
 774: IFFALSE 824
// begin Lisa := PrepareUnit ( Lisa , true , 11_ ) ;
 776: LD_ADDR_EXP 2
 780: PUSH
 781: LD_STRING Lisa
 783: PPUSH
 784: LD_INT 1
 786: PPUSH
 787: LD_STRING 11_
 789: PPUSH
 790: CALL 39764 0 3
 794: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 795: LD_EXP 2
 799: PPUSH
 800: LD_INT 1
 802: PPUSH
 803: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 807: LD_EXP 2
 811: PPUSH
 812: LD_INT 4
 814: PPUSH
 815: LD_INT 0
 817: PPUSH
 818: CALL_OW 49
// end else
 822: GO 840
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 824: LD_INT 4
 826: PPUSH
 827: LD_INT 0
 829: PPUSH
 830: LD_INT 1
 832: PPUSH
 833: LD_INT 0
 835: PPUSH
 836: CALL 1362 0 4
// if TestCharacters ( 11_Donaldson ) then
 840: LD_STRING 11_Donaldson
 842: PPUSH
 843: CALL_OW 28
 847: IFFALSE 897
// begin Donaldson := PrepareUnit ( Donaldson , true , 11_ ) ;
 849: LD_ADDR_EXP 3
 853: PUSH
 854: LD_STRING Donaldson
 856: PPUSH
 857: LD_INT 1
 859: PPUSH
 860: LD_STRING 11_
 862: PPUSH
 863: CALL 39764 0 3
 867: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 868: LD_EXP 3
 872: PPUSH
 873: LD_INT 1
 875: PPUSH
 876: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 880: LD_EXP 3
 884: PPUSH
 885: LD_INT 4
 887: PPUSH
 888: LD_INT 0
 890: PPUSH
 891: CALL_OW 49
// end else
 895: GO 913
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 897: LD_INT 4
 899: PPUSH
 900: LD_INT 0
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: LD_INT 0
 908: PPUSH
 909: CALL 1362 0 4
// if TestCharacters ( 11_Cyrus ) then
 913: LD_STRING 11_Cyrus
 915: PPUSH
 916: CALL_OW 28
 920: IFFALSE 970
// begin Cyrus := PrepareUnit ( Cyrus , true , 11_ ) ;
 922: LD_ADDR_EXP 5
 926: PUSH
 927: LD_STRING Cyrus
 929: PPUSH
 930: LD_INT 1
 932: PPUSH
 933: LD_STRING 11_
 935: PPUSH
 936: CALL 39764 0 3
 940: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 941: LD_EXP 5
 945: PPUSH
 946: LD_INT 1
 948: PPUSH
 949: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 953: LD_EXP 5
 957: PPUSH
 958: LD_INT 4
 960: PPUSH
 961: LD_INT 0
 963: PPUSH
 964: CALL_OW 49
// end else
 968: GO 986
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 970: LD_INT 4
 972: PPUSH
 973: LD_INT 0
 975: PPUSH
 976: LD_INT 1
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL 1362 0 4
// if TestCharacters ( 11_Denis ) then
 986: LD_STRING 11_Denis
 988: PPUSH
 989: CALL_OW 28
 993: IFFALSE 1043
// begin Denis := PrepareUnit ( Denis , true , 11_ ) ;
 995: LD_ADDR_EXP 6
 999: PUSH
1000: LD_STRING Denis
1002: PPUSH
1003: LD_INT 1
1005: PPUSH
1006: LD_STRING 11_
1008: PPUSH
1009: CALL 39764 0 3
1013: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1014: LD_EXP 6
1018: PPUSH
1019: LD_INT 4
1021: PPUSH
1022: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1026: LD_EXP 6
1030: PPUSH
1031: LD_INT 4
1033: PPUSH
1034: LD_INT 0
1036: PPUSH
1037: CALL_OW 49
// end else
1041: GO 1059
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1043: LD_INT 4
1045: PPUSH
1046: LD_INT 0
1048: PPUSH
1049: LD_INT 1
1051: PPUSH
1052: LD_INT 0
1054: PPUSH
1055: CALL 1362 0 4
// if TestCharacters ( 11_Frank ) then
1059: LD_STRING 11_Frank
1061: PPUSH
1062: CALL_OW 28
1066: IFFALSE 1116
// begin Frank := PrepareUnit ( Frank , true , 11_ ) ;
1068: LD_ADDR_EXP 12
1072: PUSH
1073: LD_STRING Frank
1075: PPUSH
1076: LD_INT 1
1078: PPUSH
1079: LD_STRING 11_
1081: PPUSH
1082: CALL 39764 0 3
1086: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1087: LD_EXP 12
1091: PPUSH
1092: LD_INT 1
1094: PPUSH
1095: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1099: LD_EXP 12
1103: PPUSH
1104: LD_INT 4
1106: PPUSH
1107: LD_INT 0
1109: PPUSH
1110: CALL_OW 49
// end else
1114: GO 1132
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1116: LD_INT 4
1118: PPUSH
1119: LD_INT 0
1121: PPUSH
1122: LD_INT 1
1124: PPUSH
1125: LD_INT 0
1127: PPUSH
1128: CALL 1362 0 4
// if TestCharacters ( 11_Cornell ) then
1132: LD_STRING 11_Cornell
1134: PPUSH
1135: CALL_OW 28
1139: IFFALSE 1189
// begin Cornel := PrepareUnit ( Cornell , true , 11_ ) ;
1141: LD_ADDR_EXP 10
1145: PUSH
1146: LD_STRING Cornell
1148: PPUSH
1149: LD_INT 1
1151: PPUSH
1152: LD_STRING 11_
1154: PPUSH
1155: CALL 39764 0 3
1159: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1160: LD_EXP 10
1164: PPUSH
1165: LD_INT 1
1167: PPUSH
1168: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1172: LD_EXP 10
1176: PPUSH
1177: LD_INT 4
1179: PPUSH
1180: LD_INT 0
1182: PPUSH
1183: CALL_OW 49
// end else
1187: GO 1205
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1189: LD_INT 4
1191: PPUSH
1192: LD_INT 0
1194: PPUSH
1195: LD_INT 1
1197: PPUSH
1198: LD_INT 0
1200: PPUSH
1201: CALL 1362 0 4
// tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1205: LD_ADDR_VAR 0 2
1209: PUSH
1210: LD_EXP 14
1214: PPUSH
1215: LD_INT 26
1217: PUSH
1218: LD_INT 1
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: PPUSH
1225: CALL_OW 72
1229: ST_TO_ADDR
// if not tmp then
1230: LD_VAR 0 2
1234: NOT
1235: IFFALSE 1264
// begin PrepareSoldier ( sex_male , 8 ) ;
1237: LD_INT 1
1239: PPUSH
1240: LD_INT 8
1242: PPUSH
1243: CALL_OW 381
// PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1247: CALL_OW 44
1251: PPUSH
1252: LD_INT 4
1254: PPUSH
1255: LD_INT 0
1257: PPUSH
1258: CALL_OW 49
// end else
1262: GO 1338
// begin if GetClass ( tmp [ 1 ] ) <> class_soldier then
1264: LD_VAR 0 2
1268: PUSH
1269: LD_INT 1
1271: ARRAY
1272: PPUSH
1273: CALL_OW 257
1277: PUSH
1278: LD_INT 1
1280: NONEQUAL
1281: IFFALSE 1299
// SetClass ( tmp [ 1 ] , class_soldier ) ;
1283: LD_VAR 0 2
1287: PUSH
1288: LD_INT 1
1290: ARRAY
1291: PPUSH
1292: LD_INT 1
1294: PPUSH
1295: CALL_OW 336
// PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1299: LD_VAR 0 2
1303: PUSH
1304: LD_INT 1
1306: ARRAY
1307: PPUSH
1308: LD_INT 4
1310: PPUSH
1311: LD_INT 0
1313: PPUSH
1314: CALL_OW 49
// others11 := others11 diff tmp [ 1 ] ;
1318: LD_ADDR_EXP 14
1322: PUSH
1323: LD_EXP 14
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_INT 1
1335: ARRAY
1336: DIFF
1337: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ,  ) ;
1338: LD_ADDR_EXP 15
1342: PUSH
1343: LD_STRING Powell
1345: PPUSH
1346: LD_INT 0
1348: PPUSH
1349: LD_STRING 
1351: PPUSH
1352: CALL 39764 0 3
1356: ST_TO_ADDR
// end ;
1357: LD_VAR 0 1
1361: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1362: LD_INT 0
1364: PPUSH
1365: PPUSH
1366: PPUSH
1367: PPUSH
1368: PPUSH
// if mech = 1 then
1369: LD_VAR 0 4
1373: PUSH
1374: LD_INT 1
1376: EQUAL
1377: IFFALSE 1610
// begin if others11 then
1379: LD_EXP 14
1383: IFFALSE 1550
// begin for i := 1 to others11 - 1 do
1385: LD_ADDR_VAR 0 6
1389: PUSH
1390: DOUBLE
1391: LD_INT 1
1393: DEC
1394: ST_TO_ADDR
1395: LD_EXP 14
1399: PUSH
1400: LD_INT 1
1402: MINUS
1403: PUSH
1404: FOR_TO
1405: IFFALSE 1487
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1407: LD_EXP 14
1411: PUSH
1412: LD_VAR 0 6
1416: ARRAY
1417: PPUSH
1418: LD_INT 3
1420: PPUSH
1421: CALL_OW 259
1425: PUSH
1426: LD_EXP 14
1430: PUSH
1431: LD_VAR 0 6
1435: PUSH
1436: LD_INT 1
1438: PLUS
1439: ARRAY
1440: PPUSH
1441: LD_INT 3
1443: PPUSH
1444: CALL_OW 259
1448: LESS
1449: IFFALSE 1485
// begin mecha = others11 [ i + 1 ] ;
1451: LD_ADDR_VAR 0 9
1455: PUSH
1456: LD_EXP 14
1460: PUSH
1461: LD_VAR 0 6
1465: PUSH
1466: LD_INT 1
1468: PLUS
1469: ARRAY
1470: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1471: LD_VAR 0 9
1475: PPUSH
1476: LD_INT 3
1478: PPUSH
1479: CALL_OW 336
// break ;
1483: GO 1487
// end ; end ;
1485: GO 1404
1487: POP
1488: POP
// if spawnMode = 1 then
1489: LD_VAR 0 3
1493: PUSH
1494: LD_INT 1
1496: EQUAL
1497: IFFALSE 1518
// PlaceUnitArea ( mecha , area , false ) else
1499: LD_VAR 0 9
1503: PPUSH
1504: LD_VAR 0 1
1508: PPUSH
1509: LD_INT 0
1511: PPUSH
1512: CALL_OW 49
1516: GO 1532
// PlaceHumanInUnit ( mecha , veh ) ;
1518: LD_VAR 0 9
1522: PPUSH
1523: LD_VAR 0 2
1527: PPUSH
1528: CALL_OW 52
// others11 := others11 diff mecha ;
1532: LD_ADDR_EXP 14
1536: PUSH
1537: LD_EXP 14
1541: PUSH
1542: LD_VAR 0 9
1546: DIFF
1547: ST_TO_ADDR
// end else
1548: GO 1608
// begin hc_name :=  ;
1550: LD_ADDR_OWVAR 26
1554: PUSH
1555: LD_STRING 
1557: ST_TO_ADDR
// hc_gallery :=  ;
1558: LD_ADDR_OWVAR 33
1562: PUSH
1563: LD_STRING 
1565: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1566: LD_INT 0
1568: PPUSH
1569: LD_INT 7
1571: PPUSH
1572: LD_INT 9
1574: PPUSH
1575: CALL_OW 12
1579: PPUSH
1580: CALL_OW 383
// un := CreateHuman ;
1584: LD_ADDR_VAR 0 7
1588: PUSH
1589: CALL_OW 44
1593: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1594: LD_VAR 0 7
1598: PPUSH
1599: LD_VAR 0 2
1603: PPUSH
1604: CALL_OW 52
// end ; end else
1608: GO 1775
// begin if others11 then
1610: LD_EXP 14
1614: IFFALSE 1687
// begin if spawnMode = 1 then
1616: LD_VAR 0 3
1620: PUSH
1621: LD_INT 1
1623: EQUAL
1624: IFFALSE 1649
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1626: LD_EXP 14
1630: PUSH
1631: LD_INT 1
1633: ARRAY
1634: PPUSH
1635: LD_VAR 0 1
1639: PPUSH
1640: LD_INT 0
1642: PPUSH
1643: CALL_OW 49
1647: GO 1667
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1649: LD_EXP 14
1653: PUSH
1654: LD_INT 1
1656: ARRAY
1657: PPUSH
1658: LD_VAR 0 2
1662: PPUSH
1663: CALL_OW 52
// others11 := Delete ( others11 , 1 ) ;
1667: LD_ADDR_EXP 14
1671: PUSH
1672: LD_EXP 14
1676: PPUSH
1677: LD_INT 1
1679: PPUSH
1680: CALL_OW 3
1684: ST_TO_ADDR
// end else
1685: GO 1775
// begin hc_name :=  ;
1687: LD_ADDR_OWVAR 26
1691: PUSH
1692: LD_STRING 
1694: ST_TO_ADDR
// hc_gallery :=  ;
1695: LD_ADDR_OWVAR 33
1699: PUSH
1700: LD_STRING 
1702: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1703: LD_INT 0
1705: PPUSH
1706: LD_INT 1
1708: PUSH
1709: LD_INT 2
1711: PUSH
1712: LD_INT 3
1714: PUSH
1715: LD_INT 4
1717: PUSH
1718: EMPTY
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: PUSH
1724: LD_INT 1
1726: PPUSH
1727: LD_INT 4
1729: PPUSH
1730: CALL_OW 12
1734: ARRAY
1735: PPUSH
1736: LD_INT 7
1738: PPUSH
1739: LD_INT 9
1741: PPUSH
1742: CALL_OW 12
1746: PPUSH
1747: CALL_OW 380
// un := CreateHuman ;
1751: LD_ADDR_VAR 0 7
1755: PUSH
1756: CALL_OW 44
1760: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1761: LD_VAR 0 7
1765: PPUSH
1766: LD_VAR 0 2
1770: PPUSH
1771: CALL_OW 52
// end ; end ; end ;
1775: LD_VAR 0 5
1779: RET
// export function PrepareVehicles ; var veh ; begin
1780: LD_INT 0
1782: PPUSH
1783: PPUSH
// uc_side := 1 ;
1784: LD_ADDR_OWVAR 20
1788: PUSH
1789: LD_INT 1
1791: ST_TO_ADDR
// uc_nation := 1 ;
1792: LD_ADDR_OWVAR 21
1796: PUSH
1797: LD_INT 1
1799: ST_TO_ADDR
// vc_chassis := us_medium_tracked ;
1800: LD_ADDR_OWVAR 37
1804: PUSH
1805: LD_INT 3
1807: ST_TO_ADDR
// vc_engine := engine_siberite ;
1808: LD_ADDR_OWVAR 39
1812: PUSH
1813: LD_INT 3
1815: ST_TO_ADDR
// vc_control := control_computer ;
1816: LD_ADDR_OWVAR 38
1820: PUSH
1821: LD_INT 3
1823: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1824: LD_ADDR_OWVAR 40
1828: PUSH
1829: LD_INT 4
1831: ST_TO_ADDR
// veh := CreateVehicle ;
1832: LD_ADDR_VAR 0 2
1836: PUSH
1837: CALL_OW 45
1841: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1842: LD_VAR 0 2
1846: PPUSH
1847: LD_INT 4
1849: PPUSH
1850: LD_INT 0
1852: PPUSH
1853: CALL_OW 49
// vc_weapon := us_double_gun ;
1857: LD_ADDR_OWVAR 40
1861: PUSH
1862: LD_INT 5
1864: ST_TO_ADDR
// vc_control := control_manual ;
1865: LD_ADDR_OWVAR 38
1869: PUSH
1870: LD_INT 1
1872: ST_TO_ADDR
// veh := CreateVehicle ;
1873: LD_ADDR_VAR 0 2
1877: PUSH
1878: CALL_OW 45
1882: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1883: LD_VAR 0 2
1887: PPUSH
1888: LD_INT 4
1890: PPUSH
1891: LD_INT 0
1893: PPUSH
1894: CALL_OW 49
// vc_weapon := us_light_gun ;
1898: LD_ADDR_OWVAR 40
1902: PUSH
1903: LD_INT 3
1905: ST_TO_ADDR
// vc_control := control_computer ;
1906: LD_ADDR_OWVAR 38
1910: PUSH
1911: LD_INT 3
1913: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1914: LD_ADDR_OWVAR 37
1918: PUSH
1919: LD_INT 2
1921: ST_TO_ADDR
// veh := CreateVehicle ;
1922: LD_ADDR_VAR 0 2
1926: PUSH
1927: CALL_OW 45
1931: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1932: LD_VAR 0 2
1936: PPUSH
1937: LD_INT 4
1939: PPUSH
1940: LD_INT 0
1942: PPUSH
1943: CALL_OW 49
// vc_weapon := us_gatling_gun ;
1947: LD_ADDR_OWVAR 40
1951: PUSH
1952: LD_INT 4
1954: ST_TO_ADDR
// veh := CreateVehicle ;
1955: LD_ADDR_VAR 0 2
1959: PUSH
1960: CALL_OW 45
1964: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1965: LD_VAR 0 2
1969: PPUSH
1970: LD_INT 4
1972: PPUSH
1973: LD_INT 0
1975: PPUSH
1976: CALL_OW 49
// end ;
1980: LD_VAR 0 1
1984: RET
// export function PowellSupport1 ; var veh , un ; begin
1985: LD_INT 0
1987: PPUSH
1988: PPUSH
1989: PPUSH
// uc_side := 1 ;
1990: LD_ADDR_OWVAR 20
1994: PUSH
1995: LD_INT 1
1997: ST_TO_ADDR
// uc_nation := 1 ;
1998: LD_ADDR_OWVAR 21
2002: PUSH
2003: LD_INT 1
2005: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) then
2006: LD_STRING 11_Brown
2008: PPUSH
2009: CALL_OW 28
2013: IFFALSE 2063
// begin Brown := PrepareUnit ( Brown , true , 11_ ) ;
2015: LD_ADDR_EXP 7
2019: PUSH
2020: LD_STRING Brown
2022: PPUSH
2023: LD_INT 1
2025: PPUSH
2026: LD_STRING 11_
2028: PPUSH
2029: CALL 39764 0 3
2033: ST_TO_ADDR
// SetClass ( Brown , class_engineer ) ;
2034: LD_EXP 7
2038: PPUSH
2039: LD_INT 2
2041: PPUSH
2042: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
2046: LD_EXP 7
2050: PPUSH
2051: LD_INT 4
2053: PPUSH
2054: LD_INT 0
2056: PPUSH
2057: CALL_OW 49
// end else
2061: GO 2079
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2063: LD_INT 4
2065: PPUSH
2066: LD_INT 0
2068: PPUSH
2069: LD_INT 1
2071: PPUSH
2072: LD_INT 0
2074: PPUSH
2075: CALL 1362 0 4
// if TestCharacters ( 11_Gary ) then
2079: LD_STRING 11_Gary
2081: PPUSH
2082: CALL_OW 28
2086: IFFALSE 2136
// begin Gary := PrepareUnit ( Gary , true , 11_ ) ;
2088: LD_ADDR_EXP 11
2092: PUSH
2093: LD_STRING Gary
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: LD_STRING 11_
2101: PPUSH
2102: CALL 39764 0 3
2106: ST_TO_ADDR
// SetClass ( Gary , class_engineer ) ;
2107: LD_EXP 11
2111: PPUSH
2112: LD_INT 2
2114: PPUSH
2115: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2119: LD_EXP 11
2123: PPUSH
2124: LD_INT 4
2126: PPUSH
2127: LD_INT 0
2129: PPUSH
2130: CALL_OW 49
// end else
2134: GO 2152
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2136: LD_INT 4
2138: PPUSH
2139: LD_INT 0
2141: PPUSH
2142: LD_INT 1
2144: PPUSH
2145: LD_INT 0
2147: PPUSH
2148: CALL 1362 0 4
// vc_chassis := us_medium_tracked ;
2152: LD_ADDR_OWVAR 37
2156: PUSH
2157: LD_INT 3
2159: ST_TO_ADDR
// vc_engine := engine_siberite ;
2160: LD_ADDR_OWVAR 39
2164: PUSH
2165: LD_INT 3
2167: ST_TO_ADDR
// vc_control := control_manual ;
2168: LD_ADDR_OWVAR 38
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// vc_weapon := us_crane ;
2176: LD_ADDR_OWVAR 40
2180: PUSH
2181: LD_INT 13
2183: ST_TO_ADDR
// veh := CreateVehicle ;
2184: LD_ADDR_VAR 0 2
2188: PUSH
2189: CALL_OW 45
2193: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2194: LD_VAR 0 2
2198: PPUSH
2199: LD_INT 4
2201: PPUSH
2202: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2206: LD_VAR 0 2
2210: PPUSH
2211: LD_INT 4
2213: PPUSH
2214: LD_INT 0
2216: PPUSH
2217: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2221: LD_INT 4
2223: PPUSH
2224: LD_VAR 0 2
2228: PPUSH
2229: LD_INT 2
2231: PPUSH
2232: LD_INT 1
2234: PPUSH
2235: CALL 1362 0 4
// vc_weapon := us_laser ;
2239: LD_ADDR_OWVAR 40
2243: PUSH
2244: LD_INT 9
2246: ST_TO_ADDR
// veh := CreateVehicle ;
2247: LD_ADDR_VAR 0 2
2251: PUSH
2252: CALL_OW 45
2256: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2257: LD_VAR 0 2
2261: PPUSH
2262: LD_INT 4
2264: PPUSH
2265: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2269: LD_VAR 0 2
2273: PPUSH
2274: LD_INT 4
2276: PPUSH
2277: LD_INT 0
2279: PPUSH
2280: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2284: LD_INT 4
2286: PPUSH
2287: LD_VAR 0 2
2291: PPUSH
2292: LD_INT 2
2294: PPUSH
2295: LD_INT 1
2297: PPUSH
2298: CALL 1362 0 4
// vc_control := control_computer ;
2302: LD_ADDR_OWVAR 38
2306: PUSH
2307: LD_INT 3
2309: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2310: LD_ADDR_OWVAR 40
2314: PUSH
2315: LD_INT 12
2317: ST_TO_ADDR
// veh := CreateVehicle ;
2318: LD_ADDR_VAR 0 2
2322: PUSH
2323: CALL_OW 45
2327: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2328: LD_VAR 0 2
2332: PPUSH
2333: LD_INT 17
2335: PPUSH
2336: CALL_OW 109
// SetDir ( veh , 4 ) ;
2340: LD_VAR 0 2
2344: PPUSH
2345: LD_INT 4
2347: PPUSH
2348: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2352: LD_VAR 0 2
2356: PPUSH
2357: LD_INT 4
2359: PPUSH
2360: LD_INT 0
2362: PPUSH
2363: CALL_OW 49
// AddCargo ( veh , mat_siberit , 100 ) ;
2367: LD_VAR 0 2
2371: PPUSH
2372: LD_INT 3
2374: PPUSH
2375: LD_INT 100
2377: PPUSH
2378: CALL_OW 291
// veh := CreateVehicle ;
2382: LD_ADDR_VAR 0 2
2386: PUSH
2387: CALL_OW 45
2391: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2392: LD_VAR 0 2
2396: PPUSH
2397: LD_INT 17
2399: PPUSH
2400: CALL_OW 109
// SetDir ( veh , 4 ) ;
2404: LD_VAR 0 2
2408: PPUSH
2409: LD_INT 4
2411: PPUSH
2412: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2416: LD_VAR 0 2
2420: PPUSH
2421: LD_INT 4
2423: PPUSH
2424: LD_INT 0
2426: PPUSH
2427: CALL_OW 49
// AddCargo ( veh , mat_siberit , 20 ) ;
2431: LD_VAR 0 2
2435: PPUSH
2436: LD_INT 3
2438: PPUSH
2439: LD_INT 20
2441: PPUSH
2442: CALL_OW 291
// AddCargo ( veh , mat_cans , 80 ) ;
2446: LD_VAR 0 2
2450: PPUSH
2451: LD_INT 1
2453: PPUSH
2454: LD_INT 80
2456: PPUSH
2457: CALL_OW 291
// end ;
2461: LD_VAR 0 1
2465: RET
// export function PowellSupport2 ; var veh , un ; begin
2466: LD_INT 0
2468: PPUSH
2469: PPUSH
2470: PPUSH
// uc_side := 1 ;
2471: LD_ADDR_OWVAR 20
2475: PUSH
2476: LD_INT 1
2478: ST_TO_ADDR
// uc_nation := 1 ;
2479: LD_ADDR_OWVAR 21
2483: PUSH
2484: LD_INT 1
2486: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2487: LD_ADDR_OWVAR 37
2491: PUSH
2492: LD_INT 2
2494: ST_TO_ADDR
// vc_engine := engine_siberite ;
2495: LD_ADDR_OWVAR 39
2499: PUSH
2500: LD_INT 3
2502: ST_TO_ADDR
// vc_control := control_computer ;
2503: LD_ADDR_OWVAR 38
2507: PUSH
2508: LD_INT 3
2510: ST_TO_ADDR
// vc_weapon := us_light_gun ;
2511: LD_ADDR_OWVAR 40
2515: PUSH
2516: LD_INT 3
2518: ST_TO_ADDR
// veh := CreateVehicle ;
2519: LD_ADDR_VAR 0 2
2523: PUSH
2524: CALL_OW 45
2528: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2529: LD_VAR 0 2
2533: PPUSH
2534: LD_INT 4
2536: PPUSH
2537: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2541: LD_VAR 0 2
2545: PPUSH
2546: LD_INT 4
2548: PPUSH
2549: LD_INT 0
2551: PPUSH
2552: CALL_OW 49
// vc_control := control_manual ;
2556: LD_ADDR_OWVAR 38
2560: PUSH
2561: LD_INT 1
2563: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2564: LD_ADDR_OWVAR 37
2568: PUSH
2569: LD_INT 2
2571: ST_TO_ADDR
// vc_weapon := us_double_gun ;
2572: LD_ADDR_OWVAR 40
2576: PUSH
2577: LD_INT 5
2579: ST_TO_ADDR
// veh := CreateVehicle ;
2580: LD_ADDR_VAR 0 2
2584: PUSH
2585: CALL_OW 45
2589: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2590: LD_VAR 0 2
2594: PPUSH
2595: LD_INT 4
2597: PPUSH
2598: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2602: LD_VAR 0 2
2606: PPUSH
2607: LD_INT 4
2609: PPUSH
2610: LD_INT 0
2612: PPUSH
2613: CALL_OW 49
// if TestCharacters ( 11_Bobby ) then
2617: LD_STRING 11_Bobby
2619: PPUSH
2620: CALL_OW 28
2624: IFFALSE 2673
// begin Bobby := PrepareUnit ( Bobby , true , 11_ ) ;
2626: LD_ADDR_EXP 4
2630: PUSH
2631: LD_STRING Bobby
2633: PPUSH
2634: LD_INT 1
2636: PPUSH
2637: LD_STRING 11_
2639: PPUSH
2640: CALL 39764 0 3
2644: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2645: LD_EXP 4
2649: PPUSH
2650: LD_INT 3
2652: PPUSH
2653: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2657: LD_EXP 4
2661: PPUSH
2662: LD_VAR 0 2
2666: PPUSH
2667: CALL_OW 52
// end else
2671: GO 2691
// PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2673: LD_INT 0
2675: PPUSH
2676: LD_VAR 0 2
2680: PPUSH
2681: LD_INT 2
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: CALL 1362 0 4
// if TestCharacters ( 11_Houten ) then
2691: LD_STRING 11_Houten
2693: PPUSH
2694: CALL_OW 28
2698: IFFALSE 2748
// begin Houten := PrepareUnit ( Houten , true , 11_ ) ;
2700: LD_ADDR_EXP 9
2704: PUSH
2705: LD_STRING Houten
2707: PPUSH
2708: LD_INT 1
2710: PPUSH
2711: LD_STRING 11_
2713: PPUSH
2714: CALL 39764 0 3
2718: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2719: LD_EXP 9
2723: PPUSH
2724: LD_INT 1
2726: PPUSH
2727: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2731: LD_EXP 9
2735: PPUSH
2736: LD_INT 4
2738: PPUSH
2739: LD_INT 0
2741: PPUSH
2742: CALL_OW 49
// end else
2746: GO 2764
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2748: LD_INT 4
2750: PPUSH
2751: LD_INT 0
2753: PPUSH
2754: LD_INT 1
2756: PPUSH
2757: LD_INT 0
2759: PPUSH
2760: CALL 1362 0 4
// vc_control := control_computer ;
2764: LD_ADDR_OWVAR 38
2768: PUSH
2769: LD_INT 3
2771: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2772: LD_ADDR_OWVAR 40
2776: PUSH
2777: LD_INT 12
2779: ST_TO_ADDR
// veh := CreateVehicle ;
2780: LD_ADDR_VAR 0 2
2784: PUSH
2785: CALL_OW 45
2789: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2790: LD_VAR 0 2
2794: PPUSH
2795: LD_INT 4
2797: PPUSH
2798: CALL_OW 233
// SetTag ( veh , 17 ) ;
2802: LD_VAR 0 2
2806: PPUSH
2807: LD_INT 17
2809: PPUSH
2810: CALL_OW 109
// AddCargo ( veh , mat_cans , 100 ) ;
2814: LD_VAR 0 2
2818: PPUSH
2819: LD_INT 1
2821: PPUSH
2822: LD_INT 100
2824: PPUSH
2825: CALL_OW 291
// veh := CreateVehicle ;
2829: LD_ADDR_VAR 0 2
2833: PUSH
2834: CALL_OW 45
2838: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2839: LD_VAR 0 2
2843: PPUSH
2844: LD_INT 4
2846: PPUSH
2847: CALL_OW 233
// SetTag ( veh , 17 ) ;
2851: LD_VAR 0 2
2855: PPUSH
2856: LD_INT 17
2858: PPUSH
2859: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2863: LD_VAR 0 2
2867: PPUSH
2868: LD_INT 4
2870: PPUSH
2871: LD_INT 0
2873: PPUSH
2874: CALL_OW 49
// AddCargo ( veh , mat_cans , 100 ) ;
2878: LD_VAR 0 2
2882: PPUSH
2883: LD_INT 1
2885: PPUSH
2886: LD_INT 100
2888: PPUSH
2889: CALL_OW 291
// veh := CreateVehicle ;
2893: LD_ADDR_VAR 0 2
2897: PUSH
2898: CALL_OW 45
2902: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2903: LD_VAR 0 2
2907: PPUSH
2908: LD_INT 4
2910: PPUSH
2911: CALL_OW 233
// SetTag ( veh , 17 ) ;
2915: LD_VAR 0 2
2919: PPUSH
2920: LD_INT 17
2922: PPUSH
2923: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2927: LD_VAR 0 2
2931: PPUSH
2932: LD_INT 4
2934: PPUSH
2935: LD_INT 0
2937: PPUSH
2938: CALL_OW 49
// if kurtStatus then
2942: LD_EXP 19
2946: IFFALSE 2980
// begin AddCargo ( veh , mat_siberit , 60 ) ;
2948: LD_VAR 0 2
2952: PPUSH
2953: LD_INT 3
2955: PPUSH
2956: LD_INT 60
2958: PPUSH
2959: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
2963: LD_VAR 0 2
2967: PPUSH
2968: LD_INT 1
2970: PPUSH
2971: LD_INT 40
2973: PPUSH
2974: CALL_OW 291
// end else
2978: GO 2995
// AddCargo ( veh , mat_cans , 100 ) ;
2980: LD_VAR 0 2
2984: PPUSH
2985: LD_INT 1
2987: PPUSH
2988: LD_INT 100
2990: PPUSH
2991: CALL_OW 291
// veh := CreateVehicle ;
2995: LD_ADDR_VAR 0 2
2999: PUSH
3000: CALL_OW 45
3004: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3005: LD_VAR 0 2
3009: PPUSH
3010: LD_INT 4
3012: PPUSH
3013: CALL_OW 233
// SetTag ( veh , 17 ) ;
3017: LD_VAR 0 2
3021: PPUSH
3022: LD_INT 17
3024: PPUSH
3025: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
3029: LD_VAR 0 2
3033: PPUSH
3034: LD_INT 4
3036: PPUSH
3037: LD_INT 0
3039: PPUSH
3040: CALL_OW 49
// AddCargo ( veh , mat_oil , 60 ) ;
3044: LD_VAR 0 2
3048: PPUSH
3049: LD_INT 2
3051: PPUSH
3052: LD_INT 60
3054: PPUSH
3055: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
3059: LD_VAR 0 2
3063: PPUSH
3064: LD_INT 1
3066: PPUSH
3067: LD_INT 40
3069: PPUSH
3070: CALL_OW 291
// end ;
3074: LD_VAR 0 1
3078: RET
// export function PowellSupport3 ; var i , cargo ; begin
3079: LD_INT 0
3081: PPUSH
3082: PPUSH
3083: PPUSH
// uc_side := 1 ;
3084: LD_ADDR_OWVAR 20
3088: PUSH
3089: LD_INT 1
3091: ST_TO_ADDR
// uc_nation := 1 ;
3092: LD_ADDR_OWVAR 21
3096: PUSH
3097: LD_INT 1
3099: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3100: LD_INT 4
3102: PPUSH
3103: LD_INT 0
3105: PPUSH
3106: LD_INT 1
3108: PPUSH
3109: LD_INT 0
3111: PPUSH
3112: CALL 1362 0 4
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3116: LD_INT 4
3118: PPUSH
3119: LD_INT 0
3121: PPUSH
3122: LD_INT 1
3124: PPUSH
3125: LD_INT 0
3127: PPUSH
3128: CALL 1362 0 4
// for i := 1 to 2 do
3132: LD_ADDR_VAR 0 2
3136: PUSH
3137: DOUBLE
3138: LD_INT 1
3140: DEC
3141: ST_TO_ADDR
3142: LD_INT 2
3144: PUSH
3145: FOR_TO
3146: IFFALSE 3246
// begin vc_chassis := us_medium_wheeled ;
3148: LD_ADDR_OWVAR 37
3152: PUSH
3153: LD_INT 2
3155: ST_TO_ADDR
// vc_engine := engine_siberite ;
3156: LD_ADDR_OWVAR 39
3160: PUSH
3161: LD_INT 3
3163: ST_TO_ADDR
// vc_control = control_computer ;
3164: LD_ADDR_OWVAR 38
3168: PUSH
3169: LD_INT 3
3171: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
3172: LD_ADDR_OWVAR 40
3176: PUSH
3177: LD_INT 12
3179: ST_TO_ADDR
// cargo := CreateVehicle ;
3180: LD_ADDR_VAR 0 3
3184: PUSH
3185: CALL_OW 45
3189: ST_TO_ADDR
// SetDir ( cargo , 4 ) ;
3190: LD_VAR 0 3
3194: PPUSH
3195: LD_INT 4
3197: PPUSH
3198: CALL_OW 233
// SetTag ( cargo , 17 ) ;
3202: LD_VAR 0 3
3206: PPUSH
3207: LD_INT 17
3209: PPUSH
3210: CALL_OW 109
// PlaceUnitArea ( cargo , PlayerSpawn , false ) ;
3214: LD_VAR 0 3
3218: PPUSH
3219: LD_INT 4
3221: PPUSH
3222: LD_INT 0
3224: PPUSH
3225: CALL_OW 49
// AddCargo ( cargo , mat_cans , 100 ) ;
3229: LD_VAR 0 3
3233: PPUSH
3234: LD_INT 1
3236: PPUSH
3237: LD_INT 100
3239: PPUSH
3240: CALL_OW 291
// end ;
3244: GO 3145
3246: POP
3247: POP
// end ; end_of_file
3248: LD_VAR 0 1
3252: RET
// export function PrepareRussianCommander ; begin
3253: LD_INT 0
3255: PPUSH
// uc_side := 3 ;
3256: LD_ADDR_OWVAR 20
3260: PUSH
3261: LD_INT 3
3263: ST_TO_ADDR
// Davidov := PrepareUnit ( Davidov , false ,  ) ;
3264: LD_ADDR_EXP 16
3268: PUSH
3269: LD_STRING Davidov
3271: PPUSH
3272: LD_INT 0
3274: PPUSH
3275: LD_STRING 
3277: PPUSH
3278: CALL 39764 0 3
3282: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3283: LD_EXP 16
3287: PPUSH
3288: LD_INT 3
3290: PPUSH
3291: CALL_OW 52
// RuScientists := Join ( RuScientists , Davidov ) ;
3295: LD_ADDR_EXP 27
3299: PUSH
3300: LD_EXP 27
3304: PPUSH
3305: LD_EXP 16
3309: PPUSH
3310: CALL 77455 0 2
3314: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3315: LD_EXP 27
3319: PPUSH
3320: LD_INT 4
3322: PPUSH
3323: CALL_OW 336
// end ;
3327: LD_VAR 0 1
3331: RET
// export function PrepareEastBase ; var i , un ; begin
3332: LD_INT 0
3334: PPUSH
3335: PPUSH
3336: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3337: LD_INT 3
3339: PPUSH
3340: LD_INT 3
3342: PPUSH
3343: LD_INT 121
3345: PPUSH
3346: LD_EXP 29
3350: PPUSH
3351: LD_EXP 30
3355: PPUSH
3356: CALL_OW 12
3360: PPUSH
3361: LD_INT 1
3363: PPUSH
3364: LD_INT 3
3366: PPUSH
3367: CALL 12778 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3371: LD_INT 3
3373: PPUSH
3374: LD_INT 3
3376: PPUSH
3377: LD_INT 121
3379: PPUSH
3380: LD_EXP 29
3384: PPUSH
3385: LD_EXP 30
3389: PPUSH
3390: CALL_OW 12
3394: PPUSH
3395: LD_INT 9
3397: PPUSH
3398: LD_INT 3
3400: PPUSH
3401: CALL 12778 0 6
// RespawnInside ( 3 , 3 , rubar3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 5 ) ;
3405: LD_INT 3
3407: PPUSH
3408: LD_INT 3
3410: PPUSH
3411: LD_INT 226
3413: PPUSH
3414: LD_EXP 29
3418: PPUSH
3419: LD_EXP 30
3423: PPUSH
3424: CALL_OW 12
3428: PPUSH
3429: LD_INT 9
3431: PPUSH
3432: LD_INT 5
3434: PPUSH
3435: CALL 12778 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3439: LD_INT 3
3441: PPUSH
3442: LD_INT 3
3444: PPUSH
3445: LD_INT 4
3447: PPUSH
3448: LD_EXP 29
3452: PPUSH
3453: LD_EXP 30
3457: PPUSH
3458: CALL_OW 12
3462: PPUSH
3463: LD_INT 2
3465: PPUSH
3466: LD_INT 6
3468: PPUSH
3469: CALL 12778 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3473: LD_INT 3
3475: PPUSH
3476: LD_INT 3
3478: PPUSH
3479: LD_INT 112
3481: PPUSH
3482: LD_EXP 29
3486: PPUSH
3487: LD_EXP 30
3491: PPUSH
3492: CALL_OW 12
3496: PPUSH
3497: LD_INT 3
3499: PPUSH
3500: LD_INT 6
3502: PPUSH
3503: CALL 12778 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3507: LD_INT 3
3509: PPUSH
3510: LD_INT 3
3512: PPUSH
3513: LD_INT 47
3515: PPUSH
3516: LD_EXP 29
3520: PPUSH
3521: LD_EXP 30
3525: PPUSH
3526: CALL_OW 12
3530: PPUSH
3531: LD_INT 4
3533: PPUSH
3534: LD_INT 6
3536: PPUSH
3537: CALL 12778 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3541: LD_INT 3
3543: PPUSH
3544: LD_INT 3
3546: PPUSH
3547: LD_INT 129
3549: PPUSH
3550: LD_EXP 29
3554: PPUSH
3555: LD_EXP 30
3559: PPUSH
3560: CALL_OW 12
3564: PPUSH
3565: LD_INT 4
3567: PPUSH
3568: LD_INT 6
3570: PPUSH
3571: CALL 12778 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3575: LD_INT 3
3577: PPUSH
3578: LD_INT 3
3580: PPUSH
3581: LD_INT 135
3583: PPUSH
3584: LD_EXP 29
3588: PPUSH
3589: LD_EXP 30
3593: PPUSH
3594: CALL_OW 12
3598: PPUSH
3599: LD_INT 4
3601: PPUSH
3602: LD_INT 6
3604: PPUSH
3605: CALL 12778 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3609: LD_ADDR_VAR 0 2
3613: PUSH
3614: LD_INT 22
3616: PUSH
3617: LD_INT 3
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: PUSH
3624: LD_INT 30
3626: PUSH
3627: LD_INT 32
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: PUSH
3634: EMPTY
3635: LIST
3636: LIST
3637: PPUSH
3638: CALL_OW 69
3642: PUSH
3643: FOR_IN
3644: IFFALSE 3684
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3646: LD_INT 3
3648: PPUSH
3649: LD_INT 3
3651: PPUSH
3652: LD_VAR 0 2
3656: PPUSH
3657: LD_EXP 29
3661: PPUSH
3662: LD_EXP 30
3666: PPUSH
3667: CALL_OW 12
3671: PPUSH
3672: LD_INT 1
3674: PPUSH
3675: LD_INT 1
3677: PPUSH
3678: CALL 12778 0 6
3682: GO 3643
3684: POP
3685: POP
// for i := 1 to 5 do
3686: LD_ADDR_VAR 0 2
3690: PUSH
3691: DOUBLE
3692: LD_INT 1
3694: DEC
3695: ST_TO_ADDR
3696: LD_INT 5
3698: PUSH
3699: FOR_TO
3700: IFFALSE 3803
// begin uc_side := 3 ;
3702: LD_ADDR_OWVAR 20
3706: PUSH
3707: LD_INT 3
3709: ST_TO_ADDR
// uc_nation := 3 ;
3710: LD_ADDR_OWVAR 21
3714: PUSH
3715: LD_INT 3
3717: ST_TO_ADDR
// hc_gallery :=  ;
3718: LD_ADDR_OWVAR 33
3722: PUSH
3723: LD_STRING 
3725: ST_TO_ADDR
// hc_name :=  ;
3726: LD_ADDR_OWVAR 26
3730: PUSH
3731: LD_STRING 
3733: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3734: LD_INT 0
3736: PPUSH
3737: LD_INT 4
3739: PPUSH
3740: LD_EXP 29
3744: PPUSH
3745: LD_EXP 30
3749: PPUSH
3750: CALL_OW 12
3754: PPUSH
3755: CALL_OW 380
// un := CreateHuman ;
3759: LD_ADDR_VAR 0 3
3763: PUSH
3764: CALL_OW 44
3768: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3769: LD_VAR 0 3
3773: PPUSH
3774: LD_INT 3
3776: PPUSH
3777: CALL_OW 52
// RuScientists := Join ( RuScientists , un ) ;
3781: LD_ADDR_EXP 27
3785: PUSH
3786: LD_EXP 27
3790: PPUSH
3791: LD_VAR 0 3
3795: PPUSH
3796: CALL 77455 0 2
3800: ST_TO_ADDR
// end ;
3801: GO 3699
3803: POP
3804: POP
// end ;
3805: LD_VAR 0 1
3809: RET
// export function PrepareWestBase ; var i , un ; begin
3810: LD_INT 0
3812: PPUSH
3813: PPUSH
3814: PPUSH
// TeleportExit ( ruteleprt , 122 , 145 ) ;
3815: LD_INT 10
3817: PPUSH
3818: LD_INT 122
3820: PPUSH
3821: LD_INT 145
3823: PPUSH
3824: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
3828: LD_INT 137
3830: PPUSH
3831: LD_INT 84
3833: PPUSH
3834: LD_INT 61
3836: PPUSH
3837: CALL_OW 243
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3841: LD_INT 3
3843: PPUSH
3844: LD_INT 3
3846: PPUSH
3847: LD_INT 6
3849: PPUSH
3850: LD_EXP 29
3854: PPUSH
3855: LD_EXP 30
3859: PPUSH
3860: CALL_OW 12
3864: PPUSH
3865: LD_INT 2
3867: PPUSH
3868: LD_INT 3
3870: PPUSH
3871: CALL 12778 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3875: LD_INT 3
3877: PPUSH
3878: LD_INT 3
3880: PPUSH
3881: LD_INT 91
3883: PPUSH
3884: LD_EXP 29
3888: PPUSH
3889: LD_EXP 30
3893: PPUSH
3894: CALL_OW 12
3898: PPUSH
3899: LD_INT 4
3901: PPUSH
3902: LD_INT 3
3904: PPUSH
3905: CALL 12778 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3909: LD_INT 3
3911: PPUSH
3912: LD_INT 3
3914: PPUSH
3915: LD_INT 21
3917: PPUSH
3918: LD_EXP 29
3922: PPUSH
3923: LD_EXP 30
3927: PPUSH
3928: CALL_OW 12
3932: PPUSH
3933: LD_INT 3
3935: PPUSH
3936: LD_INT 6
3938: PPUSH
3939: CALL 12778 0 6
// end ;
3943: LD_VAR 0 1
3947: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3948: LD_INT 0
3950: PPUSH
3951: PPUSH
3952: PPUSH
3953: PPUSH
// uc_side := 3 ;
3954: LD_ADDR_OWVAR 20
3958: PUSH
3959: LD_INT 3
3961: ST_TO_ADDR
// uc_nation := 3 ;
3962: LD_ADDR_OWVAR 21
3966: PUSH
3967: LD_INT 3
3969: ST_TO_ADDR
// for i := 1 to 5 do
3970: LD_ADDR_VAR 0 2
3974: PUSH
3975: DOUBLE
3976: LD_INT 1
3978: DEC
3979: ST_TO_ADDR
3980: LD_INT 5
3982: PUSH
3983: FOR_TO
3984: IFFALSE 4054
// begin hc_gallery :=  ;
3986: LD_ADDR_OWVAR 33
3990: PUSH
3991: LD_STRING 
3993: ST_TO_ADDR
// hc_name :=  ;
3994: LD_ADDR_OWVAR 26
3998: PUSH
3999: LD_STRING 
4001: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4002: LD_INT 0
4004: PPUSH
4005: LD_INT 9
4007: PPUSH
4008: LD_EXP 29
4012: PPUSH
4013: LD_EXP 30
4017: PPUSH
4018: CALL_OW 12
4022: PPUSH
4023: CALL_OW 380
// un := CreateHuman ;
4027: LD_ADDR_VAR 0 3
4031: PUSH
4032: CALL_OW 44
4036: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4037: LD_VAR 0 3
4041: PPUSH
4042: LD_INT 8
4044: PPUSH
4045: LD_INT 0
4047: PPUSH
4048: CALL_OW 49
// end ;
4052: GO 3983
4054: POP
4055: POP
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4056: LD_ADDR_VAR 0 2
4060: PUSH
4061: DOUBLE
4062: LD_INT 1
4064: DEC
4065: ST_TO_ADDR
4066: LD_INT 2
4068: PUSH
4069: LD_INT 3
4071: PUSH
4072: LD_INT 4
4074: PUSH
4075: LD_INT 4
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: PUSH
4084: LD_OWVAR 67
4088: ARRAY
4089: PUSH
4090: FOR_TO
4091: IFFALSE 4161
// begin hc_gallery :=  ;
4093: LD_ADDR_OWVAR 33
4097: PUSH
4098: LD_STRING 
4100: ST_TO_ADDR
// hc_name :=  ;
4101: LD_ADDR_OWVAR 26
4105: PUSH
4106: LD_STRING 
4108: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4109: LD_INT 0
4111: PPUSH
4112: LD_INT 4
4114: PPUSH
4115: LD_EXP 29
4119: PPUSH
4120: LD_EXP 30
4124: PPUSH
4125: CALL_OW 12
4129: PPUSH
4130: CALL_OW 380
// un := CreateHuman ;
4134: LD_ADDR_VAR 0 3
4138: PUSH
4139: CALL_OW 44
4143: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4144: LD_VAR 0 3
4148: PPUSH
4149: LD_INT 8
4151: PPUSH
4152: LD_INT 0
4154: PPUSH
4155: CALL_OW 49
// end ;
4159: GO 4090
4161: POP
4162: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4163: LD_ADDR_VAR 0 2
4167: PUSH
4168: DOUBLE
4169: LD_INT 1
4171: DEC
4172: ST_TO_ADDR
4173: LD_INT 3
4175: PUSH
4176: LD_INT 4
4178: PUSH
4179: LD_INT 5
4181: PUSH
4182: LD_INT 5
4184: PUSH
4185: EMPTY
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: PUSH
4191: LD_OWVAR 67
4195: ARRAY
4196: PUSH
4197: FOR_TO
4198: IFFALSE 4415
// begin vc_engine = 3 ;
4200: LD_ADDR_OWVAR 39
4204: PUSH
4205: LD_INT 3
4207: ST_TO_ADDR
// vc_control = 1 ;
4208: LD_ADDR_OWVAR 38
4212: PUSH
4213: LD_INT 1
4215: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ rand ( 1 , 5 ) ] ;
4216: LD_ADDR_OWVAR 40
4220: PUSH
4221: LD_INT 42
4223: PUSH
4224: LD_INT 43
4226: PUSH
4227: LD_INT 44
4229: PUSH
4230: LD_INT 45
4232: PUSH
4233: LD_INT 46
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: LIST
4240: LIST
4241: LIST
4242: PUSH
4243: LD_INT 1
4245: PPUSH
4246: LD_INT 5
4248: PPUSH
4249: CALL_OW 12
4253: ARRAY
4254: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4255: LD_OWVAR 40
4259: PUSH
4260: LD_INT 46
4262: EQUAL
4263: IFFALSE 4275
// vc_chassis := ru_heavy_tracked else
4265: LD_ADDR_OWVAR 37
4269: PUSH
4270: LD_INT 24
4272: ST_TO_ADDR
4273: GO 4302
// vc_chassis := [ ru_medium_tracked , ru_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
4275: LD_ADDR_OWVAR 37
4279: PUSH
4280: LD_INT 22
4282: PUSH
4283: LD_INT 21
4285: PUSH
4286: EMPTY
4287: LIST
4288: LIST
4289: PUSH
4290: LD_INT 1
4292: PPUSH
4293: LD_INT 2
4295: PPUSH
4296: CALL_OW 12
4300: ARRAY
4301: ST_TO_ADDR
// veh := CreateVehicle ;
4302: LD_ADDR_VAR 0 4
4306: PUSH
4307: CALL_OW 45
4311: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4312: LD_VAR 0 4
4316: PPUSH
4317: LD_INT 3
4319: PPUSH
4320: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4324: LD_VAR 0 4
4328: PPUSH
4329: LD_INT 5
4331: PPUSH
4332: LD_INT 0
4334: PPUSH
4335: CALL_OW 49
// hc_gallery :=  ;
4339: LD_ADDR_OWVAR 33
4343: PUSH
4344: LD_STRING 
4346: ST_TO_ADDR
// hc_name :=  ;
4347: LD_ADDR_OWVAR 26
4351: PUSH
4352: LD_STRING 
4354: ST_TO_ADDR
// PrepareHuman ( false , 3 , [ 6 , 7 , 8 , 10 ] [ Difficulty ] ) ;
4355: LD_INT 0
4357: PPUSH
4358: LD_INT 3
4360: PPUSH
4361: LD_INT 6
4363: PUSH
4364: LD_INT 7
4366: PUSH
4367: LD_INT 8
4369: PUSH
4370: LD_INT 10
4372: PUSH
4373: EMPTY
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: PUSH
4379: LD_OWVAR 67
4383: ARRAY
4384: PPUSH
4385: CALL_OW 380
// un = CreateHuman ;
4389: LD_ADDR_VAR 0 3
4393: PUSH
4394: CALL_OW 44
4398: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4399: LD_VAR 0 3
4403: PPUSH
4404: LD_VAR 0 4
4408: PPUSH
4409: CALL_OW 52
// end ;
4413: GO 4197
4415: POP
4416: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4417: LD_ADDR_VAR 0 2
4421: PUSH
4422: DOUBLE
4423: LD_INT 1
4425: DEC
4426: ST_TO_ADDR
4427: LD_INT 3
4429: PUSH
4430: LD_INT 4
4432: PUSH
4433: LD_INT 5
4435: PUSH
4436: LD_INT 5
4438: PUSH
4439: EMPTY
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: PUSH
4445: LD_OWVAR 67
4449: ARRAY
4450: PUSH
4451: FOR_TO
4452: IFFALSE 4599
// begin vc_engine := 3 ;
4454: LD_ADDR_OWVAR 39
4458: PUSH
4459: LD_INT 3
4461: ST_TO_ADDR
// vc_control := 3 ;
4462: LD_ADDR_OWVAR 38
4466: PUSH
4467: LD_INT 3
4469: ST_TO_ADDR
// vc_weapon := [ 42 , 43 , 44 , 45 , 46 , 49 ] [ rand ( 1 , 5 ) ] ;
4470: LD_ADDR_OWVAR 40
4474: PUSH
4475: LD_INT 42
4477: PUSH
4478: LD_INT 43
4480: PUSH
4481: LD_INT 44
4483: PUSH
4484: LD_INT 45
4486: PUSH
4487: LD_INT 46
4489: PUSH
4490: LD_INT 49
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: LIST
4499: LIST
4500: PUSH
4501: LD_INT 1
4503: PPUSH
4504: LD_INT 5
4506: PPUSH
4507: CALL_OW 12
4511: ARRAY
4512: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4513: LD_OWVAR 40
4517: PUSH
4518: LD_INT 46
4520: EQUAL
4521: IFFALSE 4533
// vc_chassis := ru_heavy_tracked else
4523: LD_ADDR_OWVAR 37
4527: PUSH
4528: LD_INT 24
4530: ST_TO_ADDR
4531: GO 4560
// vc_chassis := [ ru_medium_tracked , ru_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
4533: LD_ADDR_OWVAR 37
4537: PUSH
4538: LD_INT 22
4540: PUSH
4541: LD_INT 21
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: PUSH
4548: LD_INT 1
4550: PPUSH
4551: LD_INT 2
4553: PPUSH
4554: CALL_OW 12
4558: ARRAY
4559: ST_TO_ADDR
// veh := CreateVehicle ;
4560: LD_ADDR_VAR 0 4
4564: PUSH
4565: CALL_OW 45
4569: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4570: LD_VAR 0 4
4574: PPUSH
4575: LD_INT 3
4577: PPUSH
4578: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4582: LD_VAR 0 4
4586: PPUSH
4587: LD_INT 6
4589: PPUSH
4590: LD_INT 0
4592: PPUSH
4593: CALL_OW 49
// end ;
4597: GO 4451
4599: POP
4600: POP
// end ; end_of_file
4601: LD_VAR 0 1
4605: RET
// export function PrepareKurt ; begin
4606: LD_INT 0
4608: PPUSH
// uc_side := 8 ;
4609: LD_ADDR_OWVAR 20
4613: PUSH
4614: LD_INT 8
4616: ST_TO_ADDR
// uc_nation := 2 ;
4617: LD_ADDR_OWVAR 21
4621: PUSH
4622: LD_INT 2
4624: ST_TO_ADDR
// vc_chassis := ar_medium_trike ;
4625: LD_ADDR_OWVAR 37
4629: PUSH
4630: LD_INT 13
4632: ST_TO_ADDR
// vc_engine := 1 ;
4633: LD_ADDR_OWVAR 39
4637: PUSH
4638: LD_INT 1
4640: ST_TO_ADDR
// vc_control := 1 ;
4641: LD_ADDR_OWVAR 38
4645: PUSH
4646: LD_INT 1
4648: ST_TO_ADDR
// vc_weapon := 24 ;
4649: LD_ADDR_OWVAR 40
4653: PUSH
4654: LD_INT 24
4656: ST_TO_ADDR
// KurtVeh := CreateVehicle ;
4657: LD_ADDR_EXP 18
4661: PUSH
4662: CALL_OW 45
4666: ST_TO_ADDR
// if kurtStatus > 0 then
4667: LD_EXP 19
4671: PUSH
4672: LD_INT 0
4674: GREATER
4675: IFFALSE 4727
// begin Kurt := PrepareUnit ( Kurt , false ,  ) ;
4677: LD_ADDR_EXP 17
4681: PUSH
4682: LD_STRING Kurt
4684: PPUSH
4685: LD_INT 0
4687: PPUSH
4688: LD_STRING 
4690: PPUSH
4691: CALL 39764 0 3
4695: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4696: LD_EXP 18
4700: PPUSH
4701: LD_INT 4
4703: PPUSH
4704: LD_INT 0
4706: PPUSH
4707: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4711: LD_EXP 17
4715: PPUSH
4716: LD_EXP 18
4720: PPUSH
4721: CALL_OW 52
// end else
4725: GO 4804
// begin hc_name :=  ;
4727: LD_ADDR_OWVAR 26
4731: PUSH
4732: LD_STRING 
4734: ST_TO_ADDR
// hc_gallery :=  ;
4735: LD_ADDR_OWVAR 33
4739: PUSH
4740: LD_STRING 
4742: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4743: LD_INT 1
4745: PPUSH
4746: LD_INT 10
4748: PPUSH
4749: CALL_OW 381
// Kurt := CreateHuman ;
4753: LD_ADDR_EXP 17
4757: PUSH
4758: CALL_OW 44
4762: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4763: LD_EXP 18
4767: PPUSH
4768: LD_INT 4
4770: PPUSH
4771: LD_INT 0
4773: PPUSH
4774: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4778: LD_EXP 17
4782: PPUSH
4783: LD_EXP 18
4787: PPUSH
4788: CALL_OW 52
// SaveCharacters ( Kurt , AltKurt ) ;
4792: LD_EXP 17
4796: PPUSH
4797: LD_STRING AltKurt
4799: PPUSH
4800: CALL_OW 38
// end ; end ;
4804: LD_VAR 0 1
4808: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4809: LD_INT 0
4811: PPUSH
4812: PPUSH
4813: PPUSH
4814: PPUSH
// for i := 1 to 3 do
4815: LD_ADDR_VAR 0 2
4819: PUSH
4820: DOUBLE
4821: LD_INT 1
4823: DEC
4824: ST_TO_ADDR
4825: LD_INT 3
4827: PUSH
4828: FOR_TO
4829: IFFALSE 4950
// begin uc_side := 1 ;
4831: LD_ADDR_OWVAR 20
4835: PUSH
4836: LD_INT 1
4838: ST_TO_ADDR
// uc_nation := 2 ;
4839: LD_ADDR_OWVAR 21
4843: PUSH
4844: LD_INT 2
4846: ST_TO_ADDR
// hc_gallery =  ;
4847: LD_ADDR_OWVAR 33
4851: PUSH
4852: LD_STRING 
4854: ST_TO_ADDR
// hc_name =  ;
4855: LD_ADDR_OWVAR 26
4859: PUSH
4860: LD_STRING 
4862: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4863: LD_EXP 19
4867: PUSH
4868: LD_INT 0
4870: EQUAL
4871: PUSH
4872: LD_EXP 19
4876: PUSH
4877: LD_INT 2
4879: EQUAL
4880: OR
4881: IFFALSE 4898
// PrepareHuman ( false , 1 , 6 ) else
4883: LD_INT 0
4885: PPUSH
4886: LD_INT 1
4888: PPUSH
4889: LD_INT 6
4891: PPUSH
4892: CALL_OW 380
4896: GO 4911
// PrepareHuman ( false , 1 , 8 ) ;
4898: LD_INT 0
4900: PPUSH
4901: LD_INT 1
4903: PPUSH
4904: LD_INT 8
4906: PPUSH
4907: CALL_OW 380
// un := CreateHuman ;
4911: LD_ADDR_VAR 0 3
4915: PUSH
4916: CALL_OW 44
4920: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4921: LD_VAR 0 3
4925: PPUSH
4926: LD_INT 4
4928: PPUSH
4929: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4933: LD_VAR 0 3
4937: PPUSH
4938: LD_INT 4
4940: PPUSH
4941: LD_INT 0
4943: PPUSH
4944: CALL_OW 49
// end ;
4948: GO 4828
4950: POP
4951: POP
// vc_chassis := 14 ;
4952: LD_ADDR_OWVAR 37
4956: PUSH
4957: LD_INT 14
4959: ST_TO_ADDR
// vc_engine := 3 ;
4960: LD_ADDR_OWVAR 39
4964: PUSH
4965: LD_INT 3
4967: ST_TO_ADDR
// vc_control := 1 ;
4968: LD_ADDR_OWVAR 38
4972: PUSH
4973: LD_INT 1
4975: ST_TO_ADDR
// vc_weapon := [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4976: LD_ADDR_OWVAR 40
4980: PUSH
4981: LD_INT 27
4983: PUSH
4984: LD_INT 26
4986: PUSH
4987: LD_INT 28
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: LIST
4994: PUSH
4995: LD_INT 1
4997: PPUSH
4998: LD_INT 3
5000: PPUSH
5001: CALL_OW 12
5005: ARRAY
5006: ST_TO_ADDR
// veh := CreateVehicle ;
5007: LD_ADDR_VAR 0 4
5011: PUSH
5012: CALL_OW 45
5016: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5017: LD_VAR 0 4
5021: PPUSH
5022: LD_INT 4
5024: PPUSH
5025: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5029: LD_VAR 0 4
5033: PPUSH
5034: LD_INT 4
5036: PPUSH
5037: LD_INT 0
5039: PPUSH
5040: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5044: LD_EXP 19
5048: PUSH
5049: LD_INT 0
5051: EQUAL
5052: PUSH
5053: LD_EXP 19
5057: PUSH
5058: LD_INT 2
5060: EQUAL
5061: OR
5062: IFFALSE 5079
// PrepareHuman ( false , 3 , 6 ) else
5064: LD_INT 0
5066: PPUSH
5067: LD_INT 3
5069: PPUSH
5070: LD_INT 6
5072: PPUSH
5073: CALL_OW 380
5077: GO 5092
// PrepareHuman ( false , 3 , 8 ) ;
5079: LD_INT 0
5081: PPUSH
5082: LD_INT 3
5084: PPUSH
5085: LD_INT 8
5087: PPUSH
5088: CALL_OW 380
// un := CreateHuman ;
5092: LD_ADDR_VAR 0 3
5096: PUSH
5097: CALL_OW 44
5101: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5102: LD_VAR 0 3
5106: PPUSH
5107: LD_VAR 0 4
5111: PPUSH
5112: CALL_OW 52
// vc_chassis := 14 ;
5116: LD_ADDR_OWVAR 37
5120: PUSH
5121: LD_INT 14
5123: ST_TO_ADDR
// vc_engine := 3 ;
5124: LD_ADDR_OWVAR 39
5128: PUSH
5129: LD_INT 3
5131: ST_TO_ADDR
// vc_control := 1 ;
5132: LD_ADDR_OWVAR 38
5136: PUSH
5137: LD_INT 1
5139: ST_TO_ADDR
// vc_weapon := [ 27 , 26 , 28 ] [ rand ( 1 , 3 ) ] ;
5140: LD_ADDR_OWVAR 40
5144: PUSH
5145: LD_INT 27
5147: PUSH
5148: LD_INT 26
5150: PUSH
5151: LD_INT 28
5153: PUSH
5154: EMPTY
5155: LIST
5156: LIST
5157: LIST
5158: PUSH
5159: LD_INT 1
5161: PPUSH
5162: LD_INT 3
5164: PPUSH
5165: CALL_OW 12
5169: ARRAY
5170: ST_TO_ADDR
// veh := CreateVehicle ;
5171: LD_ADDR_VAR 0 4
5175: PUSH
5176: CALL_OW 45
5180: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5181: LD_VAR 0 4
5185: PPUSH
5186: LD_INT 4
5188: PPUSH
5189: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5193: LD_VAR 0 4
5197: PPUSH
5198: LD_INT 4
5200: PPUSH
5201: LD_INT 0
5203: PPUSH
5204: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5208: LD_EXP 19
5212: PUSH
5213: LD_INT 0
5215: EQUAL
5216: PUSH
5217: LD_EXP 19
5221: PUSH
5222: LD_INT 2
5224: EQUAL
5225: OR
5226: IFFALSE 5243
// PrepareHuman ( false , 4 , 6 ) else
5228: LD_INT 0
5230: PPUSH
5231: LD_INT 4
5233: PPUSH
5234: LD_INT 6
5236: PPUSH
5237: CALL_OW 380
5241: GO 5256
// PrepareHuman ( false , 4 , 8 ) ;
5243: LD_INT 0
5245: PPUSH
5246: LD_INT 4
5248: PPUSH
5249: LD_INT 8
5251: PPUSH
5252: CALL_OW 380
// un := CreateHuman ;
5256: LD_ADDR_VAR 0 3
5260: PUSH
5261: CALL_OW 44
5265: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5266: LD_VAR 0 3
5270: PPUSH
5271: LD_INT 4
5273: PPUSH
5274: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5278: LD_VAR 0 3
5282: PPUSH
5283: LD_VAR 0 4
5287: PPUSH
5288: CALL_OW 52
// vc_chassis := 14 ;
5292: LD_ADDR_OWVAR 37
5296: PUSH
5297: LD_INT 14
5299: ST_TO_ADDR
// vc_engine := 3 ;
5300: LD_ADDR_OWVAR 39
5304: PUSH
5305: LD_INT 3
5307: ST_TO_ADDR
// vc_control := 1 ;
5308: LD_ADDR_OWVAR 38
5312: PUSH
5313: LD_INT 1
5315: ST_TO_ADDR
// vc_weapon := 26 ;
5316: LD_ADDR_OWVAR 40
5320: PUSH
5321: LD_INT 26
5323: ST_TO_ADDR
// veh := CreateVehicle ;
5324: LD_ADDR_VAR 0 4
5328: PUSH
5329: CALL_OW 45
5333: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5334: LD_VAR 0 4
5338: PPUSH
5339: LD_INT 4
5341: PPUSH
5342: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5346: LD_VAR 0 4
5350: PPUSH
5351: LD_INT 4
5353: PPUSH
5354: LD_INT 0
5356: PPUSH
5357: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5361: LD_EXP 19
5365: PUSH
5366: LD_INT 0
5368: EQUAL
5369: PUSH
5370: LD_EXP 19
5374: PUSH
5375: LD_INT 2
5377: EQUAL
5378: OR
5379: IFFALSE 5396
// PrepareHuman ( false , 2 , 4 ) else
5381: LD_INT 0
5383: PPUSH
5384: LD_INT 2
5386: PPUSH
5387: LD_INT 4
5389: PPUSH
5390: CALL_OW 380
5394: GO 5409
// PrepareHuman ( false , 2 , 8 ) ;
5396: LD_INT 0
5398: PPUSH
5399: LD_INT 2
5401: PPUSH
5402: LD_INT 8
5404: PPUSH
5405: CALL_OW 380
// un := CreateHuman ;
5409: LD_ADDR_VAR 0 3
5413: PUSH
5414: CALL_OW 44
5418: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5419: LD_VAR 0 3
5423: PPUSH
5424: LD_INT 4
5426: PPUSH
5427: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5431: LD_VAR 0 3
5435: PPUSH
5436: LD_VAR 0 4
5440: PPUSH
5441: CALL_OW 52
// end ;
5445: LD_VAR 0 1
5449: RET
// export function PrepareAttackLegion ; var i , un ; begin
5450: LD_INT 0
5452: PPUSH
5453: PPUSH
5454: PPUSH
// for i := 1 to 4 do
5455: LD_ADDR_VAR 0 2
5459: PUSH
5460: DOUBLE
5461: LD_INT 1
5463: DEC
5464: ST_TO_ADDR
5465: LD_INT 4
5467: PUSH
5468: FOR_TO
5469: IFFALSE 5579
// begin uc_side := 8 ;
5471: LD_ADDR_OWVAR 20
5475: PUSH
5476: LD_INT 8
5478: ST_TO_ADDR
// uc_nation := 2 ;
5479: LD_ADDR_OWVAR 21
5483: PUSH
5484: LD_INT 2
5486: ST_TO_ADDR
// hc_gallery :=  ;
5487: LD_ADDR_OWVAR 33
5491: PUSH
5492: LD_STRING 
5494: ST_TO_ADDR
// hc_name :=  ;
5495: LD_ADDR_OWVAR 26
5499: PUSH
5500: LD_STRING 
5502: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5503: LD_INT 0
5505: PPUSH
5506: LD_INT 1
5508: PUSH
5509: LD_INT 8
5511: PUSH
5512: EMPTY
5513: LIST
5514: LIST
5515: PUSH
5516: LD_INT 1
5518: PPUSH
5519: LD_INT 2
5521: PPUSH
5522: CALL_OW 12
5526: ARRAY
5527: PPUSH
5528: LD_INT 6
5530: PPUSH
5531: LD_INT 8
5533: PPUSH
5534: CALL_OW 12
5538: PPUSH
5539: CALL_OW 380
// un := CreateHuman ;
5543: LD_ADDR_VAR 0 3
5547: PUSH
5548: CALL_OW 44
5552: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5553: LD_VAR 0 3
5557: PPUSH
5558: LD_INT 19
5560: PPUSH
5561: LD_INT 0
5563: PPUSH
5564: CALL_OW 49
// ComCrawl ( un ) ;
5568: LD_VAR 0 3
5572: PPUSH
5573: CALL_OW 137
// end ;
5577: GO 5468
5579: POP
5580: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5581: LD_INT 1
5583: PPUSH
5584: LD_INT 8
5586: PPUSH
5587: LD_INT 2
5589: PPUSH
5590: LD_INT 1
5592: PPUSH
5593: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5597: LD_INT 20
5599: PPUSH
5600: LD_INT 3
5602: PPUSH
5603: CALL 14613 0 2
// end ; end_of_file
5607: LD_VAR 0 1
5611: RET
// export function Action ; var i , tmp , group ; begin
5612: LD_INT 0
5614: PPUSH
5615: PPUSH
5616: PPUSH
5617: PPUSH
// InGameOn ;
5618: CALL_OW 8
// music_nat := 1 ;
5622: LD_ADDR_OWVAR 71
5626: PUSH
5627: LD_INT 1
5629: ST_TO_ADDR
// group := FilterAllUnits ( [ f_side , 1 ] ) ;
5630: LD_ADDR_VAR 0 4
5634: PUSH
5635: LD_INT 22
5637: PUSH
5638: LD_INT 1
5640: PUSH
5641: EMPTY
5642: LIST
5643: LIST
5644: PPUSH
5645: CALL_OW 69
5649: ST_TO_ADDR
// tmp := IsInUnit ( JMM ) ;
5650: LD_ADDR_VAR 0 3
5654: PUSH
5655: LD_EXP 1
5659: PPUSH
5660: CALL_OW 310
5664: ST_TO_ADDR
// CenterNowOnUnits ( tmp ) ;
5665: LD_VAR 0 3
5669: PPUSH
5670: CALL_OW 87
// ComMoveXY ( group , 130 , 103 ) ;
5674: LD_VAR 0 4
5678: PPUSH
5679: LD_INT 130
5681: PPUSH
5682: LD_INT 103
5684: PPUSH
5685: CALL_OW 111
// AddComMoveXY ( tmp , 114 , 102 ) ;
5689: LD_VAR 0 3
5693: PPUSH
5694: LD_INT 114
5696: PPUSH
5697: LD_INT 102
5699: PPUSH
5700: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5704: LD_EXP 1
5708: PPUSH
5709: LD_STRING D1-JMM-1
5711: PPUSH
5712: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5716: LD_VAR 0 3
5720: PPUSH
5721: CALL_OW 87
// if IsOk ( Donaldson ) then
5725: LD_EXP 3
5729: PPUSH
5730: CALL_OW 302
5734: IFFALSE 5799
// begin Say ( Donaldson , D1-Don-1 ) ;
5736: LD_EXP 3
5740: PPUSH
5741: LD_STRING D1-Don-1
5743: PPUSH
5744: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5748: LD_VAR 0 3
5752: PPUSH
5753: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5757: LD_EXP 1
5761: PPUSH
5762: LD_STRING D1-JMM-2
5764: PPUSH
5765: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5769: LD_VAR 0 3
5773: PPUSH
5774: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5778: LD_EXP 3
5782: PPUSH
5783: LD_STRING D1-Don-2
5785: PPUSH
5786: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5790: LD_VAR 0 3
5794: PPUSH
5795: CALL_OW 87
// end ; AddComMoveXY ( group , 110 , 101 ) ;
5799: LD_VAR 0 4
5803: PPUSH
5804: LD_INT 110
5806: PPUSH
5807: LD_INT 101
5809: PPUSH
5810: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5814: LD_INT 35
5816: PPUSH
5817: CALL_OW 67
// CenterNowOnUnits ( tmp ) ;
5821: LD_VAR 0 3
5825: PPUSH
5826: CALL_OW 87
// until SeeXY ( 1 , 102 , 94 ) ;
5830: LD_INT 1
5832: PPUSH
5833: LD_INT 102
5835: PPUSH
5836: LD_INT 94
5838: PPUSH
5839: CALL_OW 293
5843: IFFALSE 5814
// CenterOnXY ( 102 , 94 ) ;
5845: LD_INT 102
5847: PPUSH
5848: LD_INT 94
5850: PPUSH
5851: CALL_OW 84
// DialogRandom ( UnitFilter ( group , [ f_sex , sex_male ] ) , D1-Sol1-2 ,  ) ;
5855: LD_VAR 0 4
5859: PPUSH
5860: LD_INT 26
5862: PUSH
5863: LD_INT 1
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: PPUSH
5870: CALL_OW 72
5874: PPUSH
5875: LD_STRING D1-Sol1-2
5877: PPUSH
5878: LD_STRING 
5880: PPUSH
5881: CALL 12273 0 3
// Say ( JMM , D1-JMM-3 ) ;
5885: LD_EXP 1
5889: PPUSH
5890: LD_STRING D1-JMM-3
5892: PPUSH
5893: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5897: LD_STRING M1
5899: PPUSH
5900: CALL_OW 337
// for i in group do
5904: LD_ADDR_VAR 0 2
5908: PUSH
5909: LD_VAR 0 4
5913: PUSH
5914: FOR_IN
5915: IFFALSE 5934
// ComMoveXY ( i , 95 , 84 ) ;
5917: LD_VAR 0 2
5921: PPUSH
5922: LD_INT 95
5924: PPUSH
5925: LD_INT 84
5927: PPUSH
5928: CALL_OW 111
5932: GO 5914
5934: POP
5935: POP
// end ;
5936: LD_VAR 0 1
5940: RET
// every 0 0$1 trigger FilterUnitsInArea ( WaterPass , [ f_side , 1 ] ) > 1 do var i , tmp , dec ;
5941: LD_INT 7
5943: PPUSH
5944: LD_INT 22
5946: PUSH
5947: LD_INT 1
5949: PUSH
5950: EMPTY
5951: LIST
5952: LIST
5953: PPUSH
5954: CALL_OW 70
5958: PUSH
5959: LD_INT 1
5961: GREATER
5962: IFFALSE 6612
5964: GO 5966
5966: DISABLE
5967: LD_INT 0
5969: PPUSH
5970: PPUSH
5971: PPUSH
// begin tmp := FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5972: LD_ADDR_VAR 0 2
5976: PUSH
5977: LD_INT 8
5979: PPUSH
5980: LD_INT 22
5982: PUSH
5983: LD_INT 3
5985: PUSH
5986: EMPTY
5987: LIST
5988: LIST
5989: PUSH
5990: LD_INT 25
5992: PUSH
5993: LD_INT 9
5995: PUSH
5996: EMPTY
5997: LIST
5998: LIST
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: PPUSH
6004: CALL_OW 70
6008: ST_TO_ADDR
// ComTimeShift ( tmp , 96 , 85 ) ;
6009: LD_VAR 0 2
6013: PPUSH
6014: LD_INT 96
6016: PPUSH
6017: LD_INT 85
6019: PPUSH
6020: CALL_OW 154
// for i := 1 to 5 do
6024: LD_ADDR_VAR 0 1
6028: PUSH
6029: DOUBLE
6030: LD_INT 1
6032: DEC
6033: ST_TO_ADDR
6034: LD_INT 5
6036: PUSH
6037: FOR_TO
6038: IFFALSE 6057
// AddComTimeShift ( tmp , 96 , 85 ) ;
6040: LD_VAR 0 2
6044: PPUSH
6045: LD_INT 96
6047: PPUSH
6048: LD_INT 85
6050: PPUSH
6051: CALL_OW 214
6055: GO 6037
6057: POP
6058: POP
// wait ( 0 0$2 ) ;
6059: LD_INT 70
6061: PPUSH
6062: CALL_OW 67
// Say ( JMM , D1a-JMM-1 ) ;
6066: LD_EXP 1
6070: PPUSH
6071: LD_STRING D1a-JMM-1
6073: PPUSH
6074: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
6078: LD_EXP 3
6082: PPUSH
6083: LD_STRING D1a-Don-1
6085: PPUSH
6086: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6090: LD_ADDR_VAR 0 1
6094: PUSH
6095: LD_INT 22
6097: PUSH
6098: LD_INT 1
6100: PUSH
6101: EMPTY
6102: LIST
6103: LIST
6104: PPUSH
6105: CALL_OW 69
6109: PUSH
6110: FOR_IN
6111: IFFALSE 6130
// ComMoveXY ( i , 109 , 102 ) ;
6113: LD_VAR 0 1
6117: PPUSH
6118: LD_INT 109
6120: PPUSH
6121: LD_INT 102
6123: PPUSH
6124: CALL_OW 111
6128: GO 6110
6130: POP
6131: POP
// Say ( JMM , D1a-JMM-2 ) ;
6132: LD_EXP 1
6136: PPUSH
6137: LD_STRING D1a-JMM-2
6139: PPUSH
6140: CALL_OW 88
// wait ( 0 0$10 ) ;
6144: LD_INT 350
6146: PPUSH
6147: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6151: LD_EXP 1
6155: PPUSH
6156: CALL_OW 310
6160: PPUSH
6161: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6165: LD_EXP 3
6169: PPUSH
6170: LD_STRING D1b-Don-1
6172: PPUSH
6173: CALL_OW 88
// if IsOk ( Donaldson ) then
6177: LD_EXP 3
6181: PPUSH
6182: CALL_OW 302
6186: IFFALSE 6200
// Say ( JMM , D1b-JMM-1 ) ;
6188: LD_EXP 1
6192: PPUSH
6193: LD_STRING D1b-JMM-1
6195: PPUSH
6196: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6200: LD_INT 22
6202: PUSH
6203: LD_INT 1
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: PUSH
6210: LD_INT 26
6212: PUSH
6213: LD_INT 1
6215: PUSH
6216: EMPTY
6217: LIST
6218: LIST
6219: PUSH
6220: LD_INT 2
6222: PUSH
6223: LD_INT 25
6225: PUSH
6226: LD_INT 1
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: PUSH
6233: LD_INT 25
6235: PUSH
6236: LD_INT 2
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: PUSH
6243: LD_INT 25
6245: PUSH
6246: LD_INT 3
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: PUSH
6253: LD_INT 25
6255: PUSH
6256: LD_INT 4
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: PUSH
6263: LD_INT 25
6265: PUSH
6266: LD_INT 5
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: PUSH
6273: LD_INT 25
6275: PUSH
6276: LD_INT 8
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: PUSH
6292: EMPTY
6293: LIST
6294: LIST
6295: LIST
6296: PPUSH
6297: CALL_OW 69
6301: PPUSH
6302: LD_STRING D1b-Sol1-1
6304: PPUSH
6305: LD_STRING 
6307: PPUSH
6308: CALL 12273 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6312: LD_EXP 3
6316: PPUSH
6317: LD_STRING D1b-Don-2
6319: PPUSH
6320: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6324: LD_EXP 1
6328: PPUSH
6329: LD_STRING D1b-JMM-2
6331: PPUSH
6332: CALL_OW 88
// dec := ShowQuery1 ;
6336: LD_ADDR_VAR 0 3
6340: PUSH
6341: CALL 12736 0 0
6345: ST_TO_ADDR
// if dec = 1 then
6346: LD_VAR 0 3
6350: PUSH
6351: LD_INT 1
6353: EQUAL
6354: IFFALSE 6460
// begin Say ( JMM , D2-JMM-1 ) ;
6356: LD_EXP 1
6360: PPUSH
6361: LD_STRING D2-JMM-1
6363: PPUSH
6364: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6368: LD_EXP 15
6372: PPUSH
6373: LD_STRING D2-Pow-1
6375: PPUSH
6376: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6380: LD_EXP 1
6384: PPUSH
6385: LD_STRING D2a-JMM-1
6387: PPUSH
6388: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6392: LD_EXP 15
6396: PPUSH
6397: LD_STRING D2a-Pow-1
6399: PPUSH
6400: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6404: LD_EXP 1
6408: PPUSH
6409: LD_STRING D2a-JMM-2
6411: PPUSH
6412: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6416: LD_EXP 15
6420: PPUSH
6421: LD_STRING D2a-Pow-2
6423: PPUSH
6424: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6428: LD_EXP 1
6432: PPUSH
6433: LD_STRING D2a-JMM-3
6435: PPUSH
6436: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6440: LD_EXP 15
6444: PPUSH
6445: LD_STRING D2a-Pow-3
6447: PPUSH
6448: CALL_OW 94
// secondPass := 2 ;
6452: LD_ADDR_EXP 20
6456: PUSH
6457: LD_INT 2
6459: ST_TO_ADDR
// end ; if dec = 2 then
6460: LD_VAR 0 3
6464: PUSH
6465: LD_INT 2
6467: EQUAL
6468: IFFALSE 6562
// begin Say ( JMM , D2-JMM-1 ) ;
6470: LD_EXP 1
6474: PPUSH
6475: LD_STRING D2-JMM-1
6477: PPUSH
6478: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6482: LD_EXP 15
6486: PPUSH
6487: LD_STRING D2-Pow-1
6489: PPUSH
6490: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6494: LD_EXP 1
6498: PPUSH
6499: LD_STRING D2b-JMM-1
6501: PPUSH
6502: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6506: LD_EXP 15
6510: PPUSH
6511: LD_STRING D2b-Pow-1
6513: PPUSH
6514: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6518: LD_EXP 1
6522: PPUSH
6523: LD_STRING D2c-JMM-1
6525: PPUSH
6526: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6530: LD_EXP 15
6534: PPUSH
6535: LD_STRING D2c-Pow-1
6537: PPUSH
6538: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6542: LD_EXP 1
6546: PPUSH
6547: LD_STRING D2c-JMM-2
6549: PPUSH
6550: CALL_OW 88
// secondPass := 2 ;
6554: LD_ADDR_EXP 20
6558: PUSH
6559: LD_INT 2
6561: ST_TO_ADDR
// end ; if dec = 3 then
6562: LD_VAR 0 3
6566: PUSH
6567: LD_INT 3
6569: EQUAL
6570: IFFALSE 6580
// secondPass := 1 ;
6572: LD_ADDR_EXP 20
6576: PUSH
6577: LD_INT 1
6579: ST_TO_ADDR
// InGameOff ;
6580: CALL_OW 9
// ruAI := 1 ;
6584: LD_ADDR_EXP 34
6588: PUSH
6589: LD_INT 1
6591: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6592: LD_INT 1
6594: PPUSH
6595: LD_INT 3
6597: PPUSH
6598: LD_INT 2
6600: PPUSH
6601: LD_INT 1
6603: PPUSH
6604: CALL_OW 80
// SaveForQuickRestart ;
6608: CALL_OW 22
// end ;
6612: PPOPN 3
6614: END
// every 1 1$0 trigger secondPass = 2 do
6615: LD_EXP 20
6619: PUSH
6620: LD_INT 2
6622: EQUAL
6623: IFFALSE 6843
6625: GO 6627
6627: DISABLE
// begin PowellSupport1 ;
6628: CALL 1985 0 0
// DialogueOn ;
6632: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6636: LD_EXP 1
6640: PPUSH
6641: LD_STRING DC1-JMM-1
6643: PPUSH
6644: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6648: LD_EXP 15
6652: PPUSH
6653: LD_STRING DC1-Pow-1
6655: PPUSH
6656: CALL_OW 94
// DialogueOff ;
6660: CALL_OW 7
// wait ( 3 3$0 ) ;
6664: LD_INT 6300
6666: PPUSH
6667: CALL_OW 67
// PowellSupport2 ;
6671: CALL 2466 0 0
// DialogueOn ;
6675: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6679: LD_EXP 1
6683: PPUSH
6684: LD_STRING DC2-JMM-1
6686: PPUSH
6687: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6691: LD_EXP 15
6695: PPUSH
6696: LD_STRING DC2-Pow-1
6698: PPUSH
6699: CALL_OW 94
// DialogueOff ;
6703: CALL_OW 7
// wait ( 3 3$00 ) ;
6707: LD_INT 6300
6709: PPUSH
6710: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6714: LD_INT 35
6716: PPUSH
6717: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and not FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
6721: LD_INT 22
6723: PUSH
6724: LD_INT 1
6726: PUSH
6727: EMPTY
6728: LIST
6729: LIST
6730: PUSH
6731: LD_INT 2
6733: PUSH
6734: LD_INT 30
6736: PUSH
6737: LD_INT 0
6739: PUSH
6740: EMPTY
6741: LIST
6742: LIST
6743: PUSH
6744: LD_INT 30
6746: PUSH
6747: LD_INT 1
6749: PUSH
6750: EMPTY
6751: LIST
6752: LIST
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: LIST
6758: PUSH
6759: EMPTY
6760: LIST
6761: LIST
6762: PPUSH
6763: CALL_OW 69
6767: PUSH
6768: LD_INT 11
6770: PPUSH
6771: LD_INT 22
6773: PUSH
6774: LD_INT 3
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: PPUSH
6781: CALL_OW 70
6785: NOT
6786: AND
6787: IFFALSE 6714
// wait ( 0 0$10 ) ;
6789: LD_INT 350
6791: PPUSH
6792: CALL_OW 67
// Legion ;
6796: CALL 6844 0 0
// wait ( 5 5$0 ) ;
6800: LD_INT 10500
6802: PPUSH
6803: CALL_OW 67
// PowellSupport3 ;
6807: CALL 3079 0 0
// DialogueOn ;
6811: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6815: LD_EXP 15
6819: PPUSH
6820: LD_STRING DC3-Pow-1
6822: PPUSH
6823: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6827: LD_EXP 1
6831: PPUSH
6832: LD_STRING DC3-JMM-1
6834: PPUSH
6835: CALL_OW 88
// DialogueOff ;
6839: CALL_OW 7
// end ;
6843: END
// export function Legion ; var i , dec1 , dec2 , tmp , tmp2 , tmp3 , crates , oil , siberite , cr , sb , payForNeutral , payForHelp , query1 , query2 ; begin
6844: LD_INT 0
6846: PPUSH
6847: PPUSH
6848: PPUSH
6849: PPUSH
6850: PPUSH
6851: PPUSH
6852: PPUSH
6853: PPUSH
6854: PPUSH
6855: PPUSH
6856: PPUSH
6857: PPUSH
6858: PPUSH
6859: PPUSH
6860: PPUSH
6861: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6862: LD_ADDR_VAR 0 5
6866: PUSH
6867: LD_INT 22
6869: PUSH
6870: LD_INT 1
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: PUSH
6877: LD_INT 21
6879: PUSH
6880: LD_INT 3
6882: PUSH
6883: EMPTY
6884: LIST
6885: LIST
6886: PUSH
6887: LD_INT 2
6889: PUSH
6890: LD_INT 30
6892: PUSH
6893: LD_INT 0
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: PUSH
6900: LD_INT 30
6902: PUSH
6903: LD_INT 1
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: LIST
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: LIST
6919: PPUSH
6920: CALL_OW 69
6924: ST_TO_ADDR
// crates := 0 ;
6925: LD_ADDR_VAR 0 8
6929: PUSH
6930: LD_INT 0
6932: ST_TO_ADDR
// oil := 0 ;
6933: LD_ADDR_VAR 0 9
6937: PUSH
6938: LD_INT 0
6940: ST_TO_ADDR
// siberite := 0 ;
6941: LD_ADDR_VAR 0 10
6945: PUSH
6946: LD_INT 0
6948: ST_TO_ADDR
// payForNeutral := false ;
6949: LD_ADDR_VAR 0 13
6953: PUSH
6954: LD_INT 0
6956: ST_TO_ADDR
// payForHelp := false ;
6957: LD_ADDR_VAR 0 14
6961: PUSH
6962: LD_INT 0
6964: ST_TO_ADDR
// for i in tmp do
6965: LD_ADDR_VAR 0 2
6969: PUSH
6970: LD_VAR 0 5
6974: PUSH
6975: FOR_IN
6976: IFFALSE 7067
// begin crates := crates + GetResourceType ( GetBase ( i ) , 1 ) ;
6978: LD_ADDR_VAR 0 8
6982: PUSH
6983: LD_VAR 0 8
6987: PUSH
6988: LD_VAR 0 2
6992: PPUSH
6993: CALL_OW 274
6997: PPUSH
6998: LD_INT 1
7000: PPUSH
7001: CALL_OW 275
7005: PLUS
7006: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( i ) , 2 ) ;
7007: LD_ADDR_VAR 0 9
7011: PUSH
7012: LD_VAR 0 9
7016: PUSH
7017: LD_VAR 0 2
7021: PPUSH
7022: CALL_OW 274
7026: PPUSH
7027: LD_INT 2
7029: PPUSH
7030: CALL_OW 275
7034: PLUS
7035: ST_TO_ADDR
// siberite := siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
7036: LD_ADDR_VAR 0 10
7040: PUSH
7041: LD_VAR 0 10
7045: PUSH
7046: LD_VAR 0 2
7050: PPUSH
7051: CALL_OW 274
7055: PPUSH
7056: LD_INT 3
7058: PPUSH
7059: CALL_OW 275
7063: PLUS
7064: ST_TO_ADDR
// end ;
7065: GO 6975
7067: POP
7068: POP
// PrepareKurt ;
7069: CALL 4606 0 0
// if not Kurt then
7073: LD_EXP 17
7077: NOT
7078: IFFALSE 7082
// exit ;
7080: GO 9201
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7082: LD_EXP 18
7086: PPUSH
7087: LD_INT 144
7089: PPUSH
7090: LD_INT 111
7092: PPUSH
7093: CALL_OW 111
// wait ( 0 0$2 ) ;
7097: LD_INT 70
7099: PPUSH
7100: CALL_OW 67
// PlaceSeeing ( 167 , 121 , 1 , - 10 ) ;
7104: LD_INT 167
7106: PPUSH
7107: LD_INT 121
7109: PPUSH
7110: LD_INT 1
7112: PPUSH
7113: LD_INT 10
7115: NEG
7116: PPUSH
7117: CALL_OW 330
// ComExitVehicle ( Kurt ) ;
7121: LD_EXP 17
7125: PPUSH
7126: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7130: LD_EXP 17
7134: PPUSH
7135: CALL_OW 87
// wait ( 0 0$1 ) ;
7139: LD_INT 35
7141: PPUSH
7142: CALL_OW 67
// DialogueOn ;
7146: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7150: LD_INT 22
7152: PUSH
7153: LD_INT 1
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: PUSH
7160: LD_INT 26
7162: PUSH
7163: LD_INT 1
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: LD_INT 2
7172: PUSH
7173: LD_INT 25
7175: PUSH
7176: LD_INT 1
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: PUSH
7183: LD_INT 25
7185: PUSH
7186: LD_INT 2
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: LD_INT 25
7195: PUSH
7196: LD_INT 3
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: PUSH
7203: LD_INT 25
7205: PUSH
7206: LD_INT 4
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: PUSH
7213: LD_INT 25
7215: PUSH
7216: LD_INT 5
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: PUSH
7223: LD_INT 25
7225: PUSH
7226: LD_INT 8
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: LIST
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: LIST
7246: PPUSH
7247: CALL_OW 69
7251: PPUSH
7252: LD_STRING D3-Sol1-1
7254: PPUSH
7255: LD_STRING 
7257: PPUSH
7258: CALL 12273 0 3
// if KurtStatus then
7262: LD_EXP 19
7266: IFFALSE 7366
// begin Say ( Kurt , D3-Kurt-1 ) ;
7268: LD_EXP 17
7272: PPUSH
7273: LD_STRING D3-Kurt-1
7275: PPUSH
7276: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7280: LD_EXP 1
7284: PPUSH
7285: LD_STRING D3-JMM-1
7287: PPUSH
7288: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7292: LD_EXP 17
7296: PPUSH
7297: LD_STRING D3-Kurt-2
7299: PPUSH
7300: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7304: LD_EXP 1
7308: PPUSH
7309: LD_STRING D3-JMM-2
7311: PPUSH
7312: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7316: LD_EXP 17
7320: PPUSH
7321: LD_STRING D3-Kurt-4
7323: PPUSH
7324: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7328: LD_EXP 1
7332: PPUSH
7333: LD_STRING D3-JMM-4
7335: PPUSH
7336: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7340: LD_EXP 17
7344: PPUSH
7345: LD_STRING D3-Kurt-5
7347: PPUSH
7348: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7352: LD_EXP 17
7356: PPUSH
7357: LD_STRING D3-Kurt-5a
7359: PPUSH
7360: CALL_OW 88
// end else
7364: GO 7462
// begin Say ( Kurt , D3-Kurt-1 ) ;
7366: LD_EXP 17
7370: PPUSH
7371: LD_STRING D3-Kurt-1
7373: PPUSH
7374: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7378: LD_EXP 1
7382: PPUSH
7383: LD_STRING D3-JMM-1
7385: PPUSH
7386: CALL_OW 88
// Say ( Kurt , D3-Kurt-3 ) ;
7390: LD_EXP 17
7394: PPUSH
7395: LD_STRING D3-Kurt-3
7397: PPUSH
7398: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7402: LD_EXP 1
7406: PPUSH
7407: LD_STRING D3-JMM-3
7409: PPUSH
7410: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7414: LD_EXP 17
7418: PPUSH
7419: LD_STRING D3-Kurt-4
7421: PPUSH
7422: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7426: LD_EXP 1
7430: PPUSH
7431: LD_STRING D3-JMM-4
7433: PPUSH
7434: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7438: LD_EXP 17
7442: PPUSH
7443: LD_STRING D3-Kurt-5
7445: PPUSH
7446: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
7450: LD_EXP 17
7454: PPUSH
7455: LD_STRING D3-Kurt-5b
7457: PPUSH
7458: CALL_OW 88
// end ; if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
7462: LD_VAR 0 8
7466: PUSH
7467: LD_INT 120
7469: PUSH
7470: LD_INT 60
7472: PUSH
7473: EMPTY
7474: LIST
7475: LIST
7476: PUSH
7477: LD_EXP 19
7481: PUSH
7482: LD_INT 1
7484: PLUS
7485: ARRAY
7486: GREATEREQUAL
7487: PUSH
7488: LD_VAR 0 10
7492: PUSH
7493: LD_INT 120
7495: PUSH
7496: LD_INT 60
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: PUSH
7503: LD_EXP 19
7507: PUSH
7508: LD_INT 1
7510: PLUS
7511: ARRAY
7512: GREATEREQUAL
7513: AND
7514: IFFALSE 7566
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
7516: LD_ADDR_VAR 0 3
7520: PUSH
7521: LD_STRING Q2
7523: PUSH
7524: LD_STRING Q2K
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: PUSH
7531: LD_EXP 19
7535: PUSH
7536: LD_INT 1
7538: PLUS
7539: ARRAY
7540: PPUSH
7541: LD_INT 1
7543: PUSH
7544: LD_INT 2
7546: PUSH
7547: LD_INT 3
7549: PUSH
7550: LD_INT 4
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: PPUSH
7559: CALL_OW 98
7563: ST_TO_ADDR
7564: GO 7610
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 3 , 4 ] ) ;
7566: LD_ADDR_VAR 0 3
7570: PUSH
7571: LD_STRING Q2
7573: PUSH
7574: LD_STRING Q2K
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: PUSH
7581: LD_EXP 19
7585: PUSH
7586: LD_INT 1
7588: PLUS
7589: ARRAY
7590: PPUSH
7591: LD_INT 1
7593: PUSH
7594: LD_INT 3
7596: PUSH
7597: LD_INT 4
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: LIST
7604: PPUSH
7605: CALL_OW 98
7609: ST_TO_ADDR
// if dec1 = 1 then
7610: LD_VAR 0 3
7614: PUSH
7615: LD_INT 1
7617: EQUAL
7618: IFFALSE 7652
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7620: LD_EXP 1
7624: PPUSH
7625: LD_STRING D3Ka-JMM-1
7627: PPUSH
7628: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7632: LD_EXP 17
7636: PPUSH
7637: LD_STRING D3Ka-Kurt-1
7639: PPUSH
7640: CALL_OW 88
// warWithLegion = 1 ;
7644: LD_ADDR_EXP 23
7648: PUSH
7649: LD_INT 1
7651: ST_TO_ADDR
// end ; if dec1 = 2 then
7652: LD_VAR 0 3
7656: PUSH
7657: LD_INT 2
7659: EQUAL
7660: IFFALSE 7744
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7662: LD_EXP 1
7666: PPUSH
7667: LD_STRING D3Kb-JMM-1
7669: PPUSH
7670: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7674: LD_EXP 17
7678: PPUSH
7679: LD_STRING D3Kb-Kurt-1
7681: PPUSH
7682: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7686: LD_ADDR_VAR 0 11
7690: PUSH
7691: LD_INT 120
7693: PUSH
7694: LD_INT 60
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: PUSH
7701: LD_EXP 19
7705: PUSH
7706: LD_INT 1
7708: PLUS
7709: ARRAY
7710: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7711: LD_ADDR_VAR 0 12
7715: PUSH
7716: LD_INT 120
7718: PUSH
7719: LD_INT 60
7721: PUSH
7722: EMPTY
7723: LIST
7724: LIST
7725: PUSH
7726: LD_EXP 19
7730: PUSH
7731: LD_INT 1
7733: PLUS
7734: ARRAY
7735: ST_TO_ADDR
// payForNeutral := true ;
7736: LD_ADDR_VAR 0 13
7740: PUSH
7741: LD_INT 1
7743: ST_TO_ADDR
// end ; if dec1 = 3 then
7744: LD_VAR 0 3
7748: PUSH
7749: LD_INT 3
7751: EQUAL
7752: IFFALSE 7987
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7754: LD_EXP 1
7758: PPUSH
7759: LD_STRING D3Kc1-JMM-1
7761: PPUSH
7762: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7766: LD_EXP 17
7770: PPUSH
7771: LD_STRING D3Kc1-Kurt-1
7773: PPUSH
7774: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7778: LD_EXP 1
7782: PPUSH
7783: LD_STRING D3Kc1-JMM-2
7785: PPUSH
7786: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7790: LD_EXP 17
7794: PPUSH
7795: LD_STRING D3Kc1-Kurt-2
7797: PPUSH
7798: CALL_OW 88
// askSiberite = 1 ;
7802: LD_ADDR_EXP 25
7806: PUSH
7807: LD_INT 1
7809: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7810: LD_ADDR_VAR 0 4
7814: PUSH
7815: LD_STRING Q2b
7817: PPUSH
7818: LD_INT 1
7820: PUSH
7821: LD_INT 2
7823: PUSH
7824: LD_INT 3
7826: PUSH
7827: EMPTY
7828: LIST
7829: LIST
7830: LIST
7831: PPUSH
7832: CALL_OW 98
7836: ST_TO_ADDR
// if dec2 = 1 then
7837: LD_VAR 0 4
7841: PUSH
7842: LD_INT 1
7844: EQUAL
7845: IFFALSE 7879
// begin Say ( JMM , D4a-JMM-1 ) ;
7847: LD_EXP 1
7851: PPUSH
7852: LD_STRING D4a-JMM-1
7854: PPUSH
7855: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7859: LD_EXP 17
7863: PPUSH
7864: LD_STRING D4b-Kurt-1
7866: PPUSH
7867: CALL_OW 88
// warWithLegion = 1 ;
7871: LD_ADDR_EXP 23
7875: PUSH
7876: LD_INT 1
7878: ST_TO_ADDR
// end ; if dec2 = 2 then
7879: LD_VAR 0 4
7883: PUSH
7884: LD_INT 2
7886: EQUAL
7887: IFFALSE 7921
// begin Say ( JMM , D4b-JMM-1 ) ;
7889: LD_EXP 1
7893: PPUSH
7894: LD_STRING D4b-JMM-1
7896: PPUSH
7897: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7901: LD_EXP 17
7905: PPUSH
7906: LD_STRING D4b-Kurt-1
7908: PPUSH
7909: CALL_OW 88
// warWithLegion = 1 ;
7913: LD_ADDR_EXP 23
7917: PUSH
7918: LD_INT 1
7920: ST_TO_ADDR
// end ; if dec2 = 3 then
7921: LD_VAR 0 4
7925: PUSH
7926: LD_INT 3
7928: EQUAL
7929: IFFALSE 7987
// begin Say ( JMM , D4c-JMM-1 ) ;
7931: LD_EXP 1
7935: PPUSH
7936: LD_STRING D4c-JMM-1
7938: PPUSH
7939: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7943: LD_EXP 17
7947: PPUSH
7948: LD_STRING D4c-Kurt-1
7950: PPUSH
7951: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
7955: LD_EXP 1
7959: PPUSH
7960: LD_STRING D4c-JMM-2
7962: PPUSH
7963: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
7967: LD_EXP 17
7971: PPUSH
7972: LD_STRING D4c-Kurt-2
7974: PPUSH
7975: CALL_OW 88
// fakeInfo = 1 ;
7979: LD_ADDR_EXP 24
7983: PUSH
7984: LD_INT 1
7986: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
7987: LD_VAR 0 3
7991: PUSH
7992: LD_INT 4
7994: EQUAL
7995: IFFALSE 9057
// begin Say ( JMM , D3Kd-JMM-1 ) ;
7997: LD_EXP 1
8001: PPUSH
8002: LD_STRING D3Kd-JMM-1
8004: PPUSH
8005: CALL_OW 88
// if crates >= [ 200 , 120 ] [ KurtStatus + 1 ] and siberite >= [ 200 , 120 ] [ KurtStatus + 1 ] then
8009: LD_VAR 0 8
8013: PUSH
8014: LD_INT 200
8016: PUSH
8017: LD_INT 120
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: PUSH
8024: LD_EXP 19
8028: PUSH
8029: LD_INT 1
8031: PLUS
8032: ARRAY
8033: GREATEREQUAL
8034: PUSH
8035: LD_VAR 0 10
8039: PUSH
8040: LD_INT 200
8042: PUSH
8043: LD_INT 120
8045: PUSH
8046: EMPTY
8047: LIST
8048: LIST
8049: PUSH
8050: LD_EXP 19
8054: PUSH
8055: LD_INT 1
8057: PLUS
8058: ARRAY
8059: GREATEREQUAL
8060: AND
8061: IFFALSE 8113
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8063: LD_ADDR_VAR 0 4
8067: PUSH
8068: LD_STRING Q2a
8070: PUSH
8071: LD_STRING Q2aK
8073: PUSH
8074: EMPTY
8075: LIST
8076: LIST
8077: PUSH
8078: LD_EXP 19
8082: PUSH
8083: LD_INT 1
8085: PLUS
8086: ARRAY
8087: PPUSH
8088: LD_INT 1
8090: PUSH
8091: LD_INT 2
8093: PUSH
8094: LD_INT 3
8096: PUSH
8097: LD_INT 4
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: PPUSH
8106: CALL_OW 98
8110: ST_TO_ADDR
8111: GO 8277
// if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
8113: LD_VAR 0 8
8117: PUSH
8118: LD_INT 120
8120: PUSH
8121: LD_INT 60
8123: PUSH
8124: EMPTY
8125: LIST
8126: LIST
8127: PUSH
8128: LD_EXP 19
8132: PUSH
8133: LD_INT 1
8135: PLUS
8136: ARRAY
8137: GREATEREQUAL
8138: PUSH
8139: LD_VAR 0 10
8143: PUSH
8144: LD_INT 120
8146: PUSH
8147: LD_INT 60
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: PUSH
8154: LD_EXP 19
8158: PUSH
8159: LD_INT 1
8161: PLUS
8162: ARRAY
8163: GREATEREQUAL
8164: AND
8165: IFFALSE 8213
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 4 ] ) else
8167: LD_ADDR_VAR 0 4
8171: PUSH
8172: LD_STRING Q2a
8174: PUSH
8175: LD_STRING Q2aK
8177: PUSH
8178: EMPTY
8179: LIST
8180: LIST
8181: PUSH
8182: LD_EXP 19
8186: PUSH
8187: LD_INT 1
8189: PLUS
8190: ARRAY
8191: PPUSH
8192: LD_INT 1
8194: PUSH
8195: LD_INT 2
8197: PUSH
8198: LD_INT 4
8200: PUSH
8201: EMPTY
8202: LIST
8203: LIST
8204: LIST
8205: PPUSH
8206: CALL_OW 98
8210: ST_TO_ADDR
8211: GO 8277
// begin Query ( [ Q2d , Q2dK ] [ KurtStatus + 1 ] ) ;
8213: LD_STRING Q2d
8215: PUSH
8216: LD_STRING Q2dK
8218: PUSH
8219: EMPTY
8220: LIST
8221: LIST
8222: PUSH
8223: LD_EXP 19
8227: PUSH
8228: LD_INT 1
8230: PLUS
8231: ARRAY
8232: PPUSH
8233: CALL_OW 97
// dec2 := 0 ;
8237: LD_ADDR_VAR 0 4
8241: PUSH
8242: LD_INT 0
8244: ST_TO_ADDR
// Say ( JMM , D3Kc1-JMM-1 ) ;
8245: LD_EXP 1
8249: PPUSH
8250: LD_STRING D3Kc1-JMM-1
8252: PPUSH
8253: CALL_OW 88
// Say ( Kurt , D3Kc2-Kurt-1 ) ;
8257: LD_EXP 17
8261: PPUSH
8262: LD_STRING D3Kc2-Kurt-1
8264: PPUSH
8265: CALL_OW 88
// warWithLegion := 1 ;
8269: LD_ADDR_EXP 23
8273: PUSH
8274: LD_INT 1
8276: ST_TO_ADDR
// end ; if dec2 = 1 then
8277: LD_VAR 0 4
8281: PUSH
8282: LD_INT 1
8284: EQUAL
8285: IFFALSE 8319
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8287: LD_EXP 1
8291: PPUSH
8292: LD_STRING D5Ka-JMM-1
8294: PPUSH
8295: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
8299: LD_EXP 17
8303: PPUSH
8304: LD_STRING D5Ka-Kurt-1
8306: PPUSH
8307: CALL_OW 88
// warWithLegion = 1 ;
8311: LD_ADDR_EXP 23
8315: PUSH
8316: LD_INT 1
8318: ST_TO_ADDR
// end ; if dec2 = 2 then
8319: LD_VAR 0 4
8323: PUSH
8324: LD_INT 2
8326: EQUAL
8327: IFFALSE 8411
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8329: LD_EXP 1
8333: PPUSH
8334: LD_STRING D3Kb-JMM-1
8336: PPUSH
8337: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8341: LD_EXP 17
8345: PPUSH
8346: LD_STRING D3Kb-Kurt-1
8348: PPUSH
8349: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8353: LD_ADDR_VAR 0 11
8357: PUSH
8358: LD_INT 120
8360: PUSH
8361: LD_INT 60
8363: PUSH
8364: EMPTY
8365: LIST
8366: LIST
8367: PUSH
8368: LD_EXP 19
8372: PUSH
8373: LD_INT 1
8375: PLUS
8376: ARRAY
8377: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8378: LD_ADDR_VAR 0 12
8382: PUSH
8383: LD_INT 120
8385: PUSH
8386: LD_INT 60
8388: PUSH
8389: EMPTY
8390: LIST
8391: LIST
8392: PUSH
8393: LD_EXP 19
8397: PUSH
8398: LD_INT 1
8400: PLUS
8401: ARRAY
8402: ST_TO_ADDR
// payForNeutral := true ;
8403: LD_ADDR_VAR 0 13
8407: PUSH
8408: LD_INT 1
8410: ST_TO_ADDR
// end ; if dec2 = 3 then
8411: LD_VAR 0 4
8415: PUSH
8416: LD_INT 3
8418: EQUAL
8419: IFFALSE 8503
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8421: LD_EXP 1
8425: PPUSH
8426: LD_STRING D3Ke-JMM-1
8428: PPUSH
8429: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
8433: LD_EXP 17
8437: PPUSH
8438: LD_STRING D3Ke-Kurt-1
8440: PPUSH
8441: CALL_OW 88
// cr := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8445: LD_ADDR_VAR 0 11
8449: PUSH
8450: LD_INT 200
8452: PUSH
8453: LD_INT 120
8455: PUSH
8456: EMPTY
8457: LIST
8458: LIST
8459: PUSH
8460: LD_EXP 19
8464: PUSH
8465: LD_INT 1
8467: PLUS
8468: ARRAY
8469: ST_TO_ADDR
// sb := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8470: LD_ADDR_VAR 0 12
8474: PUSH
8475: LD_INT 200
8477: PUSH
8478: LD_INT 120
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: PUSH
8485: LD_EXP 19
8489: PUSH
8490: LD_INT 1
8492: PLUS
8493: ARRAY
8494: ST_TO_ADDR
// payForHelp := true ;
8495: LD_ADDR_VAR 0 14
8499: PUSH
8500: LD_INT 1
8502: ST_TO_ADDR
// end ; if dec2 = 4 then
8503: LD_VAR 0 4
8507: PUSH
8508: LD_INT 4
8510: EQUAL
8511: IFFALSE 8746
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8513: LD_EXP 1
8517: PPUSH
8518: LD_STRING D3Kc1-JMM-1
8520: PPUSH
8521: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8525: LD_EXP 17
8529: PPUSH
8530: LD_STRING D3Kc1-Kurt-1
8532: PPUSH
8533: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8537: LD_EXP 1
8541: PPUSH
8542: LD_STRING D3Kc1-JMM-2
8544: PPUSH
8545: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8549: LD_EXP 17
8553: PPUSH
8554: LD_STRING D3Kc1-Kurt-2
8556: PPUSH
8557: CALL_OW 88
// askSiberite = 1 ;
8561: LD_ADDR_EXP 25
8565: PUSH
8566: LD_INT 1
8568: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8569: LD_ADDR_VAR 0 4
8573: PUSH
8574: LD_STRING Q2b
8576: PPUSH
8577: LD_INT 1
8579: PUSH
8580: LD_INT 2
8582: PUSH
8583: LD_INT 3
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: LIST
8590: PPUSH
8591: CALL_OW 98
8595: ST_TO_ADDR
// if dec2 = 1 then
8596: LD_VAR 0 4
8600: PUSH
8601: LD_INT 1
8603: EQUAL
8604: IFFALSE 8638
// begin Say ( JMM , D4a-JMM-1 ) ;
8606: LD_EXP 1
8610: PPUSH
8611: LD_STRING D4a-JMM-1
8613: PPUSH
8614: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8618: LD_EXP 17
8622: PPUSH
8623: LD_STRING D4b-Kurt-1
8625: PPUSH
8626: CALL_OW 88
// warWithLegion = 1 ;
8630: LD_ADDR_EXP 23
8634: PUSH
8635: LD_INT 1
8637: ST_TO_ADDR
// end ; if dec2 = 2 then
8638: LD_VAR 0 4
8642: PUSH
8643: LD_INT 2
8645: EQUAL
8646: IFFALSE 8680
// begin Say ( JMM , D4b-JMM-1 ) ;
8648: LD_EXP 1
8652: PPUSH
8653: LD_STRING D4b-JMM-1
8655: PPUSH
8656: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8660: LD_EXP 17
8664: PPUSH
8665: LD_STRING D4b-Kurt-1
8667: PPUSH
8668: CALL_OW 88
// warWithLegion = 1 ;
8672: LD_ADDR_EXP 23
8676: PUSH
8677: LD_INT 1
8679: ST_TO_ADDR
// end ; if dec2 = 3 then
8680: LD_VAR 0 4
8684: PUSH
8685: LD_INT 3
8687: EQUAL
8688: IFFALSE 8746
// begin Say ( JMM , D4c-JMM-1 ) ;
8690: LD_EXP 1
8694: PPUSH
8695: LD_STRING D4c-JMM-1
8697: PPUSH
8698: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8702: LD_EXP 17
8706: PPUSH
8707: LD_STRING D4c-Kurt-1
8709: PPUSH
8710: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8714: LD_EXP 1
8718: PPUSH
8719: LD_STRING D4c-JMM-2
8721: PPUSH
8722: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8726: LD_EXP 17
8730: PPUSH
8731: LD_STRING D4c-Kurt-2
8733: PPUSH
8734: CALL_OW 88
// fakeInfo = 1 ;
8738: LD_ADDR_EXP 24
8742: PUSH
8743: LD_INT 1
8745: ST_TO_ADDR
// end ; end ; if payForNeutral or payForHelp then
8746: LD_VAR 0 13
8750: PUSH
8751: LD_VAR 0 14
8755: OR
8756: IFFALSE 9057
// begin for i in tmp do
8758: LD_ADDR_VAR 0 2
8762: PUSH
8763: LD_VAR 0 5
8767: PUSH
8768: FOR_IN
8769: IFFALSE 9055
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
8771: LD_ADDR_VAR 0 6
8775: PUSH
8776: LD_VAR 0 2
8780: PPUSH
8781: CALL_OW 274
8785: PPUSH
8786: LD_INT 1
8788: PPUSH
8789: CALL_OW 275
8793: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
8794: LD_ADDR_VAR 0 7
8798: PUSH
8799: LD_VAR 0 2
8803: PPUSH
8804: CALL_OW 274
8808: PPUSH
8809: LD_INT 3
8811: PPUSH
8812: CALL_OW 275
8816: ST_TO_ADDR
// if cr then
8817: LD_VAR 0 11
8821: IFFALSE 8935
// begin if tmp2 and tmp2 < cr then
8823: LD_VAR 0 6
8827: PUSH
8828: LD_VAR 0 6
8832: PUSH
8833: LD_VAR 0 11
8837: LESS
8838: AND
8839: IFFALSE 8887
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
8841: LD_VAR 0 2
8845: PPUSH
8846: CALL_OW 274
8850: PPUSH
8851: LD_INT 1
8853: PPUSH
8854: LD_VAR 0 11
8858: PUSH
8859: LD_VAR 0 6
8863: MINUS
8864: PPUSH
8865: CALL_OW 277
// cr := cr - tmp2 ;
8869: LD_ADDR_VAR 0 11
8873: PUSH
8874: LD_VAR 0 11
8878: PUSH
8879: LD_VAR 0 6
8883: MINUS
8884: ST_TO_ADDR
// end else
8885: GO 8935
// if tmp2 > cr then
8887: LD_VAR 0 6
8891: PUSH
8892: LD_VAR 0 11
8896: GREATER
8897: IFFALSE 8935
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
8899: LD_VAR 0 2
8903: PPUSH
8904: CALL_OW 274
8908: PPUSH
8909: LD_INT 1
8911: PPUSH
8912: LD_VAR 0 6
8916: PUSH
8917: LD_VAR 0 11
8921: MINUS
8922: PPUSH
8923: CALL_OW 277
// cr := 0 ;
8927: LD_ADDR_VAR 0 11
8931: PUSH
8932: LD_INT 0
8934: ST_TO_ADDR
// end ; end ; if sb then
8935: LD_VAR 0 12
8939: IFFALSE 9053
// begin if tmp3 and tmp3 < sb then
8941: LD_VAR 0 7
8945: PUSH
8946: LD_VAR 0 7
8950: PUSH
8951: LD_VAR 0 12
8955: LESS
8956: AND
8957: IFFALSE 9005
// begin SetResourceType ( GetBase ( i ) , 3 , sb - tmp3 ) ;
8959: LD_VAR 0 2
8963: PPUSH
8964: CALL_OW 274
8968: PPUSH
8969: LD_INT 3
8971: PPUSH
8972: LD_VAR 0 12
8976: PUSH
8977: LD_VAR 0 7
8981: MINUS
8982: PPUSH
8983: CALL_OW 277
// sb := sb - tmp3 ;
8987: LD_ADDR_VAR 0 12
8991: PUSH
8992: LD_VAR 0 12
8996: PUSH
8997: LD_VAR 0 7
9001: MINUS
9002: ST_TO_ADDR
// end else
9003: GO 9053
// if tmp3 > sb then
9005: LD_VAR 0 7
9009: PUSH
9010: LD_VAR 0 12
9014: GREATER
9015: IFFALSE 9053
// begin SetResourceType ( GetBase ( i ) , 3 , tmp3 - sb ) ;
9017: LD_VAR 0 2
9021: PPUSH
9022: CALL_OW 274
9026: PPUSH
9027: LD_INT 3
9029: PPUSH
9030: LD_VAR 0 7
9034: PUSH
9035: LD_VAR 0 12
9039: MINUS
9040: PPUSH
9041: CALL_OW 277
// sb := 0 ;
9045: LD_ADDR_VAR 0 12
9049: PUSH
9050: LD_INT 0
9052: ST_TO_ADDR
// end ; end ; end ;
9053: GO 8768
9055: POP
9056: POP
// end ; end ; DialogueOff ;
9057: CALL_OW 7
// RemoveSeeing ( 167 , 121 , 1 ) ;
9061: LD_INT 167
9063: PPUSH
9064: LD_INT 121
9066: PPUSH
9067: LD_INT 1
9069: PPUSH
9070: CALL_OW 331
// ComEnterUnit ( Kurt , KurtVeh ) ;
9074: LD_EXP 17
9078: PPUSH
9079: LD_EXP 18
9083: PPUSH
9084: CALL_OW 120
// wait ( 0 0$1 ) ;
9088: LD_INT 35
9090: PPUSH
9091: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9095: LD_EXP 18
9099: PPUSH
9100: LD_INT 4
9102: PPUSH
9103: CALL_OW 113
// wait ( 0 0$3 ) ;
9107: LD_INT 105
9109: PPUSH
9110: CALL_OW 67
// RemoveUnit ( Kurt ) ;
9114: LD_EXP 17
9118: PPUSH
9119: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9123: LD_EXP 18
9127: PPUSH
9128: CALL_OW 64
// wait ( 0 0$3 ) ;
9132: LD_INT 105
9134: PPUSH
9135: CALL_OW 67
// if payForHelp then
9139: LD_VAR 0 14
9143: IFFALSE 9201
// begin HiddenCamera ( 36 , 57 , 1 ) ;
9145: LD_INT 36
9147: PPUSH
9148: LD_INT 57
9150: PPUSH
9151: LD_INT 1
9153: PPUSH
9154: CALL_OW 244
// HiddenCamera ( 51 , 63 , 1 ) ;
9158: LD_INT 51
9160: PPUSH
9161: LD_INT 63
9163: PPUSH
9164: LD_INT 1
9166: PPUSH
9167: CALL_OW 244
// HiddenCamera ( 93 , 65 , 1 ) ;
9171: LD_INT 93
9173: PPUSH
9174: LD_INT 65
9176: PPUSH
9177: LD_INT 1
9179: PPUSH
9180: CALL_OW 244
// HiddenCamera ( 42 , 12 , 1 ) ;
9184: LD_INT 42
9186: PPUSH
9187: LD_INT 12
9189: PPUSH
9190: LD_INT 1
9192: PPUSH
9193: CALL_OW 244
// PrepareLegionForPlayer ;
9197: CALL 4809 0 0
// end ; end ;
9201: LD_VAR 0 1
9205: RET
// every 0 0$10 trigger warWithLegion = 1 do
9206: LD_EXP 23
9210: PUSH
9211: LD_INT 1
9213: EQUAL
9214: IFFALSE 9230
9216: GO 9218
9218: DISABLE
// begin wait ( 0 0$30 ) ;
9219: LD_INT 1050
9221: PPUSH
9222: CALL_OW 67
// PrepareAttackLegion ;
9226: CALL 5450 0 0
// end ;
9230: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do var i ;
9231: LD_INT 120
9233: PUSH
9234: LD_INT 17
9236: PUSH
9237: EMPTY
9238: LIST
9239: LIST
9240: PUSH
9241: LD_INT 52
9243: PUSH
9244: EMPTY
9245: LIST
9246: PUSH
9247: EMPTY
9248: LIST
9249: LIST
9250: PPUSH
9251: CALL_OW 69
9255: IFFALSE 9400
9257: GO 9259
9259: DISABLE
9260: LD_INT 0
9262: PPUSH
// begin enable ;
9263: ENABLE
// for i in FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do
9264: LD_ADDR_VAR 0 1
9268: PUSH
9269: LD_INT 120
9271: PUSH
9272: LD_INT 17
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: PUSH
9279: LD_INT 52
9281: PUSH
9282: EMPTY
9283: LIST
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: PPUSH
9289: CALL_OW 69
9293: PUSH
9294: FOR_IN
9295: IFFALSE 9398
// begin if GetMultiCargo ( i ) [ 4 ] = 0 and GetSide ( i ) = 1 then
9297: LD_VAR 0 1
9301: PPUSH
9302: CALL 81020 0 1
9306: PUSH
9307: LD_INT 4
9309: ARRAY
9310: PUSH
9311: LD_INT 0
9313: EQUAL
9314: PUSH
9315: LD_VAR 0 1
9319: PPUSH
9320: CALL_OW 255
9324: PUSH
9325: LD_INT 1
9327: EQUAL
9328: AND
9329: IFFALSE 9343
// SetSide ( i , 4 ) ;
9331: LD_VAR 0 1
9335: PPUSH
9336: LD_INT 4
9338: PPUSH
9339: CALL_OW 235
// if GetSide ( i ) = 4 then
9343: LD_VAR 0 1
9347: PPUSH
9348: CALL_OW 255
9352: PUSH
9353: LD_INT 4
9355: EQUAL
9356: IFFALSE 9396
// if not IsInArea ( i , PlayerSpawn ) then
9358: LD_VAR 0 1
9362: PPUSH
9363: LD_INT 4
9365: PPUSH
9366: CALL_OW 308
9370: NOT
9371: IFFALSE 9387
// ComMoveToArea ( i , PlayerSpawn ) else
9373: LD_VAR 0 1
9377: PPUSH
9378: LD_INT 4
9380: PPUSH
9381: CALL_OW 113
9385: GO 9396
// RemoveUnit ( i ) ;
9387: LD_VAR 0 1
9391: PPUSH
9392: CALL_OW 64
// end ;
9396: GO 9294
9398: POP
9399: POP
// end ;
9400: PPOPN 1
9402: END
// every 0 0$3 trigger secondPass = 1 and FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_type , unit_vehicle ] ] ) do var i , enemyVehs , dec ;
9403: LD_EXP 20
9407: PUSH
9408: LD_INT 1
9410: EQUAL
9411: PUSH
9412: LD_INT 12
9414: PPUSH
9415: LD_INT 22
9417: PUSH
9418: LD_INT 3
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: PUSH
9425: LD_INT 101
9427: PUSH
9428: LD_INT 1
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: PUSH
9435: LD_INT 21
9437: PUSH
9438: LD_INT 2
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: LIST
9449: PPUSH
9450: CALL_OW 70
9454: AND
9455: IFFALSE 10004
9457: GO 9459
9459: DISABLE
9460: LD_INT 0
9462: PPUSH
9463: PPUSH
9464: PPUSH
// begin DialogueOn ;
9465: CALL_OW 6
// CenterNowOnUnits ( i ) ;
9469: LD_VAR 0 1
9473: PPUSH
9474: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
9478: LD_INT 22
9480: PUSH
9481: LD_INT 1
9483: PUSH
9484: EMPTY
9485: LIST
9486: LIST
9487: PUSH
9488: LD_INT 26
9490: PUSH
9491: LD_INT 1
9493: PUSH
9494: EMPTY
9495: LIST
9496: LIST
9497: PUSH
9498: LD_INT 2
9500: PUSH
9501: LD_INT 25
9503: PUSH
9504: LD_INT 1
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: PUSH
9511: LD_INT 25
9513: PUSH
9514: LD_INT 2
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: PUSH
9521: LD_INT 25
9523: PUSH
9524: LD_INT 3
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: PUSH
9531: LD_INT 25
9533: PUSH
9534: LD_INT 4
9536: PUSH
9537: EMPTY
9538: LIST
9539: LIST
9540: PUSH
9541: LD_INT 25
9543: PUSH
9544: LD_INT 5
9546: PUSH
9547: EMPTY
9548: LIST
9549: LIST
9550: PUSH
9551: LD_INT 25
9553: PUSH
9554: LD_INT 8
9556: PUSH
9557: EMPTY
9558: LIST
9559: LIST
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: LIST
9574: PPUSH
9575: CALL_OW 69
9579: PPUSH
9580: LD_STRING DT1-Sol1-1
9582: PPUSH
9583: LD_STRING DT1-FSol1-1
9585: PPUSH
9586: CALL 12273 0 3
// dec := ShowQuery2 ;
9590: LD_ADDR_VAR 0 3
9594: PUSH
9595: CALL 12757 0 0
9599: ST_TO_ADDR
// if dec = 1 then
9600: LD_VAR 0 3
9604: PUSH
9605: LD_INT 1
9607: EQUAL
9608: IFFALSE 9714
// begin Say ( JMM , D2-JMM-1 ) ;
9610: LD_EXP 1
9614: PPUSH
9615: LD_STRING D2-JMM-1
9617: PPUSH
9618: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9622: LD_EXP 15
9626: PPUSH
9627: LD_STRING D2-Pow-1
9629: PPUSH
9630: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
9634: LD_EXP 1
9638: PPUSH
9639: LD_STRING D2a-JMM-1
9641: PPUSH
9642: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
9646: LD_EXP 15
9650: PPUSH
9651: LD_STRING D2a-Pow-1
9653: PPUSH
9654: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
9658: LD_EXP 1
9662: PPUSH
9663: LD_STRING D2a-JMM-2
9665: PPUSH
9666: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
9670: LD_EXP 15
9674: PPUSH
9675: LD_STRING D2a-Pow-2
9677: PPUSH
9678: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
9682: LD_EXP 1
9686: PPUSH
9687: LD_STRING D2a-JMM-3
9689: PPUSH
9690: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
9694: LD_EXP 15
9698: PPUSH
9699: LD_STRING D2a-Pow-3
9701: PPUSH
9702: CALL_OW 94
// secondPass := 2 ;
9706: LD_ADDR_EXP 20
9710: PUSH
9711: LD_INT 2
9713: ST_TO_ADDR
// end ; if dec = 2 then
9714: LD_VAR 0 3
9718: PUSH
9719: LD_INT 2
9721: EQUAL
9722: IFFALSE 9816
// begin Say ( JMM , D2-JMM-1 ) ;
9724: LD_EXP 1
9728: PPUSH
9729: LD_STRING D2-JMM-1
9731: PPUSH
9732: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9736: LD_EXP 15
9740: PPUSH
9741: LD_STRING D2-Pow-1
9743: PPUSH
9744: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
9748: LD_EXP 1
9752: PPUSH
9753: LD_STRING D2b-JMM-1
9755: PPUSH
9756: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
9760: LD_EXP 15
9764: PPUSH
9765: LD_STRING D2b-Pow-1
9767: PPUSH
9768: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
9772: LD_EXP 1
9776: PPUSH
9777: LD_STRING D2c-JMM-1
9779: PPUSH
9780: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
9784: LD_EXP 15
9788: PPUSH
9789: LD_STRING D2c-Pow-1
9791: PPUSH
9792: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
9796: LD_EXP 1
9800: PPUSH
9801: LD_STRING D2c-JMM-2
9803: PPUSH
9804: CALL_OW 88
// secondPass := 2 ;
9808: LD_ADDR_EXP 20
9812: PUSH
9813: LD_INT 2
9815: ST_TO_ADDR
// end ; DialogueOff ;
9816: CALL_OW 7
// if secondPass = 2 then
9820: LD_EXP 20
9824: PUSH
9825: LD_INT 2
9827: EQUAL
9828: IFFALSE 9832
// exit ;
9830: GO 10004
// Query ( HelpRequest ) ;
9832: LD_STRING HelpRequest
9834: PPUSH
9835: CALL_OW 97
// SetAreaMapShow ( helpRequestArea , 1 ) ;
9839: LD_INT 27
9841: PPUSH
9842: LD_INT 1
9844: PPUSH
9845: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
9849: LD_INT 35
9851: PPUSH
9852: CALL_OW 67
// until IsInArea ( JMM , helpRequestArea ) ;
9856: LD_EXP 1
9860: PPUSH
9861: LD_INT 27
9863: PPUSH
9864: CALL_OW 308
9868: IFFALSE 9849
// SetAreaMapShow ( helpRequestArea , 0 ) ;
9870: LD_INT 27
9872: PPUSH
9873: LD_INT 0
9875: PPUSH
9876: CALL_OW 424
// DialogueOn ;
9880: CALL_OW 6
// Say ( JMM , D2-JMM-1 ) ;
9884: LD_EXP 1
9888: PPUSH
9889: LD_STRING D2-JMM-1
9891: PPUSH
9892: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9896: LD_EXP 15
9900: PPUSH
9901: LD_STRING D2-Pow-1
9903: PPUSH
9904: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
9908: LD_EXP 1
9912: PPUSH
9913: LD_STRING D2b-JMM-1
9915: PPUSH
9916: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
9920: LD_EXP 15
9924: PPUSH
9925: LD_STRING D2a-Pow-2
9927: PPUSH
9928: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
9932: LD_EXP 1
9936: PPUSH
9937: LD_STRING D2a-JMM-3
9939: PPUSH
9940: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
9944: LD_EXP 15
9948: PPUSH
9949: LD_STRING D2a-Pow-3
9951: PPUSH
9952: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
9956: LD_EXP 1
9960: PPUSH
9961: LD_STRING D2c-JMM-1
9963: PPUSH
9964: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
9968: LD_EXP 15
9972: PPUSH
9973: LD_STRING D2c-Pow-1
9975: PPUSH
9976: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
9980: LD_EXP 1
9984: PPUSH
9985: LD_STRING D2c-JMM-2
9987: PPUSH
9988: CALL_OW 88
// DialogueOff ;
9992: CALL_OW 7
// secondPass := 2 ;
9996: LD_ADDR_EXP 20
10000: PUSH
10001: LD_INT 2
10003: ST_TO_ADDR
// end ;
10004: PPOPN 3
10006: END
// every 0 0$1 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) do var vehicles ;
10007: LD_EXP 21
10011: PUSH
10012: LD_INT 1
10014: EQUAL
10015: PUSH
10016: LD_INT 11
10018: PPUSH
10019: LD_INT 22
10021: PUSH
10022: LD_INT 3
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: PPUSH
10029: CALL_OW 70
10033: AND
10034: IFFALSE 10515
10036: GO 10038
10038: DISABLE
10039: LD_INT 0
10041: PPUSH
// begin vehicles := FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
10042: LD_ADDR_VAR 0 1
10046: PUSH
10047: LD_INT 11
10049: PPUSH
10050: LD_INT 22
10052: PUSH
10053: LD_INT 3
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: PPUSH
10060: CALL_OW 70
10064: ST_TO_ADDR
// if not vehicles then
10065: LD_VAR 0 1
10069: NOT
10070: IFFALSE 10074
// exit ;
10072: GO 10515
// repeat wait ( 0 0$1 ) ;
10074: LD_INT 35
10076: PPUSH
10077: CALL_OW 67
// until UnitFilter ( vehicles , [ f_see , 1 ] ) ;
10081: LD_VAR 0 1
10085: PPUSH
10086: LD_INT 101
10088: PUSH
10089: LD_INT 1
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: PPUSH
10096: CALL_OW 72
10100: IFFALSE 10074
// CenterNowOnUnits ( UnitFilter ( vehicles , [ f_see , 1 ] ) [ 1 ] ) ;
10102: LD_VAR 0 1
10106: PPUSH
10107: LD_INT 101
10109: PUSH
10110: LD_INT 1
10112: PUSH
10113: EMPTY
10114: LIST
10115: LIST
10116: PPUSH
10117: CALL_OW 72
10121: PUSH
10122: LD_INT 1
10124: ARRAY
10125: PPUSH
10126: CALL_OW 87
// DialogueOn ;
10130: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10134: LD_INT 22
10136: PUSH
10137: LD_INT 1
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: PUSH
10144: LD_INT 26
10146: PUSH
10147: LD_INT 1
10149: PUSH
10150: EMPTY
10151: LIST
10152: LIST
10153: PUSH
10154: LD_INT 23
10156: PUSH
10157: LD_INT 1
10159: PUSH
10160: EMPTY
10161: LIST
10162: LIST
10163: PUSH
10164: LD_INT 2
10166: PUSH
10167: LD_INT 25
10169: PUSH
10170: LD_INT 1
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: PUSH
10177: LD_INT 25
10179: PUSH
10180: LD_INT 2
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: PUSH
10187: LD_INT 25
10189: PUSH
10190: LD_INT 3
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: PUSH
10197: LD_INT 25
10199: PUSH
10200: LD_INT 4
10202: PUSH
10203: EMPTY
10204: LIST
10205: LIST
10206: PUSH
10207: LD_INT 25
10209: PUSH
10210: LD_INT 5
10212: PUSH
10213: EMPTY
10214: LIST
10215: LIST
10216: PUSH
10217: LD_INT 25
10219: PUSH
10220: LD_INT 8
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: PUSH
10236: EMPTY
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: PPUSH
10242: CALL_OW 69
10246: PPUSH
10247: LD_STRING DT1-Sol1-1
10249: PPUSH
10250: LD_STRING DT1-FSol1-1
10252: PPUSH
10253: CALL 12273 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10257: LD_EXP 1
10261: PPUSH
10262: LD_STRING DT1-JMM-1
10264: PPUSH
10265: CALL_OW 88
// DialogueOff ;
10269: CALL_OW 7
// repeat wait ( 0 0$05 ) ;
10273: LD_INT 175
10275: PPUSH
10276: CALL_OW 67
// until FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter > 2 ;
10280: LD_INT 11
10282: PPUSH
10283: LD_INT 22
10285: PUSH
10286: LD_INT 3
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: PUSH
10293: LD_INT 50
10295: PUSH
10296: EMPTY
10297: LIST
10298: PUSH
10299: LD_INT 2
10301: PUSH
10302: LD_INT 21
10304: PUSH
10305: LD_INT 2
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: PUSH
10312: LD_INT 21
10314: PUSH
10315: LD_INT 1
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: PUSH
10322: EMPTY
10323: LIST
10324: LIST
10325: LIST
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: LIST
10331: PPUSH
10332: CALL_OW 70
10336: PUSH
10337: LD_INT 0
10339: EQUAL
10340: PUSH
10341: LD_EXP 22
10345: PUSH
10346: LD_INT 2
10348: GREATER
10349: AND
10350: IFFALSE 10273
// DialogueOn ;
10352: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
10356: LD_EXP 1
10360: PPUSH
10361: LD_STRING DT1a-JMM-1
10363: PPUSH
10364: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
10368: LD_INT 22
10370: PUSH
10371: LD_INT 1
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: PUSH
10378: LD_INT 26
10380: PUSH
10381: LD_INT 1
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: LD_INT 23
10390: PUSH
10391: LD_INT 1
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PUSH
10398: LD_INT 2
10400: PUSH
10401: LD_INT 25
10403: PUSH
10404: LD_INT 1
10406: PUSH
10407: EMPTY
10408: LIST
10409: LIST
10410: PUSH
10411: LD_INT 25
10413: PUSH
10414: LD_INT 2
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: PUSH
10421: LD_INT 25
10423: PUSH
10424: LD_INT 3
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PUSH
10431: LD_INT 25
10433: PUSH
10434: LD_INT 4
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PUSH
10441: LD_INT 25
10443: PUSH
10444: LD_INT 5
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PUSH
10451: LD_INT 25
10453: PUSH
10454: LD_INT 8
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: PPUSH
10476: CALL_OW 69
10480: PPUSH
10481: LD_STRING DT1a-Sol1-1
10483: PPUSH
10484: LD_STRING DT1a-FSol1-1
10486: PPUSH
10487: CALL 12273 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
10491: LD_EXP 1
10495: PPUSH
10496: LD_STRING DT1a-JMM-2
10498: PPUSH
10499: CALL_OW 88
// DialogueOff ;
10503: CALL_OW 7
// vehicleTeleported := 2 ;
10507: LD_ADDR_EXP 21
10511: PUSH
10512: LD_INT 2
10514: ST_TO_ADDR
// end ;
10515: PPOPN 1
10517: END
// every 0 0$2 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] ] ) do var i , vehicles , speaker ;
10518: LD_EXP 21
10522: PUSH
10523: LD_INT 3
10525: EQUAL
10526: PUSH
10527: LD_INT 11
10529: PPUSH
10530: LD_INT 22
10532: PUSH
10533: LD_INT 3
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: PUSH
10540: LD_INT 101
10542: PUSH
10543: LD_INT 1
10545: PUSH
10546: EMPTY
10547: LIST
10548: LIST
10549: PUSH
10550: EMPTY
10551: LIST
10552: LIST
10553: PPUSH
10554: CALL_OW 70
10558: AND
10559: IFFALSE 10844
10561: GO 10563
10563: DISABLE
10564: LD_INT 0
10566: PPUSH
10567: PPUSH
10568: PPUSH
// begin wait ( 0 0$0.3 ) ;
10569: LD_INT 10
10571: PPUSH
10572: CALL_OW 67
// DialogueOn ;
10576: CALL_OW 6
// speaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
10580: LD_ADDR_VAR 0 3
10584: PUSH
10585: LD_INT 22
10587: PUSH
10588: LD_INT 1
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: PUSH
10595: LD_INT 23
10597: PUSH
10598: LD_INT 1
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: PUSH
10605: LD_INT 26
10607: PUSH
10608: LD_INT 1
10610: PUSH
10611: EMPTY
10612: LIST
10613: LIST
10614: PUSH
10615: LD_INT 2
10617: PUSH
10618: LD_INT 25
10620: PUSH
10621: LD_INT 1
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: PUSH
10628: LD_INT 25
10630: PUSH
10631: LD_INT 2
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PUSH
10638: LD_INT 25
10640: PUSH
10641: LD_INT 3
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: PUSH
10648: LD_INT 25
10650: PUSH
10651: LD_INT 4
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: PUSH
10658: LD_INT 25
10660: PUSH
10661: LD_INT 5
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PUSH
10668: LD_INT 25
10670: PUSH
10671: LD_INT 8
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: PPUSH
10693: CALL_OW 69
10697: PPUSH
10698: LD_STRING DT2-Sol1-1
10700: PPUSH
10701: LD_STRING DT2-FSol1-1
10703: PPUSH
10704: CALL 12273 0 3
10708: ST_TO_ADDR
// DialogueOff ;
10709: CALL_OW 7
// repeat wait ( 0 0$5 ) ;
10713: LD_INT 175
10715: PPUSH
10716: CALL_OW 67
// until not FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] ] ) ;
10720: LD_INT 11
10722: PPUSH
10723: LD_INT 22
10725: PUSH
10726: LD_INT 3
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: PUSH
10733: LD_INT 50
10735: PUSH
10736: EMPTY
10737: LIST
10738: PUSH
10739: EMPTY
10740: LIST
10741: LIST
10742: PPUSH
10743: CALL_OW 70
10747: NOT
10748: IFFALSE 10713
// wait ( 0 0$2 ) ;
10750: LD_INT 70
10752: PPUSH
10753: CALL_OW 67
// vehicleTeleported := 4 ;
10757: LD_ADDR_EXP 21
10761: PUSH
10762: LD_INT 4
10764: ST_TO_ADDR
// DialogueOn ;
10765: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
10769: LD_EXP 1
10773: PPUSH
10774: LD_STRING DT2a-JMM-1
10776: PPUSH
10777: CALL_OW 88
// if speaker then
10781: LD_VAR 0 3
10785: IFFALSE 10828
// if GetSex ( speaker ) = 1 then
10787: LD_VAR 0 3
10791: PPUSH
10792: CALL_OW 258
10796: PUSH
10797: LD_INT 1
10799: EQUAL
10800: IFFALSE 10816
// Say ( speaker , DT2a-Sol1-1 ) else
10802: LD_VAR 0 3
10806: PPUSH
10807: LD_STRING DT2a-Sol1-1
10809: PPUSH
10810: CALL_OW 88
10814: GO 10828
// Say ( speaker , DT2a-FSol1-1 ) ;
10816: LD_VAR 0 3
10820: PPUSH
10821: LD_STRING DT2a-FSol1-1
10823: PPUSH
10824: CALL_OW 88
// Say ( Donaldson , DT2a-Don-1 ) ;
10828: LD_EXP 3
10832: PPUSH
10833: LD_STRING DT2a-Don-1
10835: PPUSH
10836: CALL_OW 88
// DialogueOff ;
10840: CALL_OW 7
// end ;
10844: PPOPN 3
10846: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
10847: LD_INT 1
10849: PPUSH
10850: LD_INT 45
10852: PPUSH
10853: LD_INT 74
10855: PPUSH
10856: CALL_OW 293
10860: IFFALSE 11035
10862: GO 10864
10864: DISABLE
// begin DialogueOn ;
10865: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
10869: LD_INT 36
10871: PPUSH
10872: LD_INT 55
10874: PPUSH
10875: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
10879: LD_INT 22
10881: PUSH
10882: LD_INT 1
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: PUSH
10889: LD_INT 23
10891: PUSH
10892: LD_INT 1
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: PUSH
10899: LD_INT 26
10901: PUSH
10902: LD_INT 1
10904: PUSH
10905: EMPTY
10906: LIST
10907: LIST
10908: PUSH
10909: LD_INT 2
10911: PUSH
10912: LD_INT 25
10914: PUSH
10915: LD_INT 1
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: PUSH
10922: LD_INT 25
10924: PUSH
10925: LD_INT 2
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: PUSH
10932: LD_INT 25
10934: PUSH
10935: LD_INT 3
10937: PUSH
10938: EMPTY
10939: LIST
10940: LIST
10941: PUSH
10942: LD_INT 25
10944: PUSH
10945: LD_INT 4
10947: PUSH
10948: EMPTY
10949: LIST
10950: LIST
10951: PUSH
10952: LD_INT 25
10954: PUSH
10955: LD_INT 5
10957: PUSH
10958: EMPTY
10959: LIST
10960: LIST
10961: PUSH
10962: LD_INT 25
10964: PUSH
10965: LD_INT 8
10967: PUSH
10968: EMPTY
10969: LIST
10970: LIST
10971: PUSH
10972: EMPTY
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: PUSH
10981: EMPTY
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: PPUSH
10987: CALL_OW 69
10991: PPUSH
10992: LD_STRING D5-Sol1-1
10994: PPUSH
10995: LD_STRING D5-FSol1-
10997: PPUSH
10998: CALL 12273 0 3
// if warWithLegion and IsOk ( Donaldson ) then
11002: LD_EXP 23
11006: PUSH
11007: LD_EXP 3
11011: PPUSH
11012: CALL_OW 302
11016: AND
11017: IFFALSE 11031
// Say ( Donaldson , D5-Don-1 ) ;
11019: LD_EXP 3
11023: PPUSH
11024: LD_STRING D5-Don-1
11026: PPUSH
11027: CALL_OW 88
// DialogueOff ;
11031: CALL_OW 7
// end ;
11035: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
11036: LD_INT 1
11038: PPUSH
11039: LD_INT 10
11041: PPUSH
11042: CALL_OW 292
11046: PUSH
11047: LD_INT 1
11049: PPUSH
11050: LD_INT 137
11052: PPUSH
11053: CALL_OW 292
11057: OR
11058: IFFALSE 11213
11060: GO 11062
11062: DISABLE
// begin DialogueOn ;
11063: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
11067: LD_INT 22
11069: PUSH
11070: LD_INT 1
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: PUSH
11077: LD_INT 23
11079: PUSH
11080: LD_INT 1
11082: PUSH
11083: EMPTY
11084: LIST
11085: LIST
11086: PUSH
11087: LD_INT 26
11089: PUSH
11090: LD_INT 1
11092: PUSH
11093: EMPTY
11094: LIST
11095: LIST
11096: PUSH
11097: LD_INT 2
11099: PUSH
11100: LD_INT 25
11102: PUSH
11103: LD_INT 1
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: PUSH
11110: LD_INT 25
11112: PUSH
11113: LD_INT 2
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: PUSH
11120: LD_INT 25
11122: PUSH
11123: LD_INT 3
11125: PUSH
11126: EMPTY
11127: LIST
11128: LIST
11129: PUSH
11130: LD_INT 25
11132: PUSH
11133: LD_INT 4
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: PUSH
11140: LD_INT 25
11142: PUSH
11143: LD_INT 5
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: PUSH
11150: LD_INT 25
11152: PUSH
11153: LD_INT 8
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: PUSH
11169: EMPTY
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: PPUSH
11175: CALL_OW 69
11179: PPUSH
11180: LD_STRING DT3-Sol1-1
11182: PPUSH
11183: LD_STRING DT3-FSol1-1
11185: PPUSH
11186: CALL 12273 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11190: LD_EXP 1
11194: PPUSH
11195: LD_STRING DT3-JMM-1
11197: PPUSH
11198: CALL_OW 88
// DialogueOff ;
11202: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11206: LD_STRING M2
11208: PPUSH
11209: CALL_OW 337
// end ;
11213: END
// every 0 0$1 trigger ruEscape = 0 and ( FilterUnitsInArea ( RuEastBase , [ f_side , 1 ] ) or FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_not , [ f_lives , 800 ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ) or GetLives ( rutp ) < 900 do
11214: LD_EXP 35
11218: PUSH
11219: LD_INT 0
11221: EQUAL
11222: PUSH
11223: LD_INT 10
11225: PPUSH
11226: LD_INT 22
11228: PUSH
11229: LD_INT 1
11231: PUSH
11232: EMPTY
11233: LIST
11234: LIST
11235: PPUSH
11236: CALL_OW 70
11240: PUSH
11241: LD_INT 10
11243: PPUSH
11244: LD_INT 22
11246: PUSH
11247: LD_INT 3
11249: PUSH
11250: EMPTY
11251: LIST
11252: LIST
11253: PUSH
11254: LD_INT 3
11256: PUSH
11257: LD_INT 24
11259: PUSH
11260: LD_INT 800
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: PUSH
11271: LD_INT 21
11273: PUSH
11274: LD_INT 2
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: PUSH
11281: LD_INT 58
11283: PUSH
11284: EMPTY
11285: LIST
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: PPUSH
11293: CALL_OW 70
11297: OR
11298: AND
11299: PUSH
11300: LD_INT 137
11302: PPUSH
11303: CALL_OW 256
11307: PUSH
11308: LD_INT 900
11310: LESS
11311: OR
11312: IFFALSE 11325
11314: GO 11316
11316: DISABLE
// ruEscape := 1 ;
11317: LD_ADDR_EXP 35
11321: PUSH
11322: LD_INT 1
11324: ST_TO_ADDR
11325: END
// every 0 0$3 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or ruEscape = 1 do var i , unit , tmp ;
11326: LD_INT 3
11328: PPUSH
11329: CALL_OW 303
11333: PUSH
11334: LD_INT 4
11336: PPUSH
11337: CALL_OW 303
11341: OR
11342: PUSH
11343: LD_EXP 35
11347: PUSH
11348: LD_INT 1
11350: EQUAL
11351: OR
11352: IFFALSE 11941
11354: GO 11356
11356: DISABLE
11357: LD_INT 0
11359: PPUSH
11360: PPUSH
11361: PPUSH
// begin ruAI := 0 ;
11362: LD_ADDR_EXP 34
11366: PUSH
11367: LD_INT 0
11369: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
11370: LD_EXP 27
11374: PPUSH
11375: CALL_OW 122
// wait ( 0 0$1 ) ;
11379: LD_INT 35
11381: PPUSH
11382: CALL_OW 67
// DialogueOn ;
11386: CALL_OW 6
// PlaceSeeing ( 75 , 21 , 1 , 12 ) ;
11390: LD_INT 75
11392: PPUSH
11393: LD_INT 21
11395: PPUSH
11396: LD_INT 1
11398: PPUSH
11399: LD_INT 12
11401: PPUSH
11402: CALL_OW 330
// CenterNowOnXY ( 75 , 21 ) ;
11406: LD_INT 75
11408: PPUSH
11409: LD_INT 21
11411: PPUSH
11412: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
11416: LD_INT 10
11418: PPUSH
11419: CALL_OW 68
// Say ( JMM , D6-JMM-1 ) ;
11423: LD_EXP 1
11427: PPUSH
11428: LD_STRING D6-JMM-1
11430: PPUSH
11431: CALL_OW 88
// RemoveSeeing ( 75 , 21 , 1 ) ;
11435: LD_INT 75
11437: PPUSH
11438: LD_INT 21
11440: PPUSH
11441: LD_INT 1
11443: PPUSH
11444: CALL_OW 331
// DialogueOff ;
11448: CALL_OW 7
// for i in RuScientists do
11452: LD_ADDR_VAR 0 1
11456: PUSH
11457: LD_EXP 27
11461: PUSH
11462: FOR_IN
11463: IFFALSE 11499
// begin SetSide ( i , 6 ) ;
11465: LD_VAR 0 1
11469: PPUSH
11470: LD_INT 6
11472: PPUSH
11473: CALL_OW 235
// SetTag ( i , rand ( 1 , 3 ) ) ;
11477: LD_VAR 0 1
11481: PPUSH
11482: LD_INT 1
11484: PPUSH
11485: LD_INT 3
11487: PPUSH
11488: CALL_OW 12
11492: PPUSH
11493: CALL_OW 109
// end ;
11497: GO 11462
11499: POP
11500: POP
// repeat wait ( 0 0$1 ) ;
11501: LD_INT 35
11503: PPUSH
11504: CALL_OW 67
// for i in RuScientists do
11508: LD_ADDR_VAR 0 1
11512: PUSH
11513: LD_EXP 27
11517: PUSH
11518: FOR_IN
11519: IFFALSE 11932
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , i , 10 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11521: LD_ADDR_VAR 0 3
11525: PUSH
11526: LD_INT 22
11528: PUSH
11529: LD_INT 3
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: PUSH
11536: LD_INT 91
11538: PUSH
11539: LD_VAR 0 1
11543: PUSH
11544: LD_INT 10
11546: PUSH
11547: EMPTY
11548: LIST
11549: LIST
11550: LIST
11551: PUSH
11552: LD_INT 21
11554: PUSH
11555: LD_INT 2
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: PUSH
11562: LD_INT 58
11564: PUSH
11565: EMPTY
11566: LIST
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: PPUSH
11574: CALL_OW 69
11578: ST_TO_ADDR
// if tmp and not IsInUnit ( i ) then
11579: LD_VAR 0 3
11583: PUSH
11584: LD_VAR 0 1
11588: PPUSH
11589: CALL_OW 310
11593: NOT
11594: AND
11595: IFFALSE 11623
// begin ComEnterUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
11597: LD_VAR 0 1
11601: PPUSH
11602: LD_VAR 0 3
11606: PPUSH
11607: LD_VAR 0 1
11611: PPUSH
11612: CALL_OW 74
11616: PPUSH
11617: CALL_OW 120
// continue ;
11621: GO 11518
// end ; if IsInUnit ( i ) then
11623: LD_VAR 0 1
11627: PPUSH
11628: CALL_OW 310
11632: IFFALSE 11651
// unit := IsInUnit ( i ) else
11634: LD_ADDR_VAR 0 2
11638: PUSH
11639: LD_VAR 0 1
11643: PPUSH
11644: CALL_OW 310
11648: ST_TO_ADDR
11649: GO 11661
// unit := i ;
11651: LD_ADDR_VAR 0 2
11655: PUSH
11656: LD_VAR 0 1
11660: ST_TO_ADDR
// case GetTag ( i ) of 1 :
11661: LD_VAR 0 1
11665: PPUSH
11666: CALL_OW 110
11670: PUSH
11671: LD_INT 1
11673: DOUBLE
11674: EQUAL
11675: IFTRUE 11679
11677: GO 11738
11679: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
11680: LD_VAR 0 2
11684: PPUSH
11685: LD_INT 137
11687: PPUSH
11688: CALL_OW 296
11692: PUSH
11693: LD_INT 13
11695: LESS
11696: PUSH
11697: LD_INT 137
11699: PPUSH
11700: CALL_OW 302
11704: AND
11705: IFFALSE 11721
// ComEnterUnit ( unit , rutp ) else
11707: LD_VAR 0 2
11711: PPUSH
11712: LD_INT 137
11714: PPUSH
11715: CALL_OW 120
11719: GO 11736
// ComMoveXY ( unit , 16 , 28 ) ;
11721: LD_VAR 0 2
11725: PPUSH
11726: LD_INT 16
11728: PPUSH
11729: LD_INT 28
11731: PPUSH
11732: CALL_OW 111
// end ; 2 :
11736: GO 11930
11738: LD_INT 2
11740: DOUBLE
11741: EQUAL
11742: IFTRUE 11746
11744: GO 11764
11746: POP
// ComMoveXY ( unit , 97 , 2 ) ; 3 :
11747: LD_VAR 0 2
11751: PPUSH
11752: LD_INT 97
11754: PPUSH
11755: LD_INT 2
11757: PPUSH
11758: CALL_OW 111
11762: GO 11930
11764: LD_INT 3
11766: DOUBLE
11767: EQUAL
11768: IFTRUE 11772
11770: GO 11831
11772: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
11773: LD_VAR 0 2
11777: PPUSH
11778: LD_INT 137
11780: PPUSH
11781: CALL_OW 296
11785: PUSH
11786: LD_INT 13
11788: LESS
11789: PUSH
11790: LD_INT 137
11792: PPUSH
11793: CALL_OW 302
11797: AND
11798: IFFALSE 11814
// ComEnterUnit ( unit , rutp ) else
11800: LD_VAR 0 2
11804: PPUSH
11805: LD_INT 137
11807: PPUSH
11808: CALL_OW 120
11812: GO 11829
// ComMoveXY ( unit , 128 , 155 ) ;
11814: LD_VAR 0 2
11818: PPUSH
11819: LD_INT 128
11821: PPUSH
11822: LD_INT 155
11824: PPUSH
11825: CALL_OW 111
// end ; 11 :
11829: GO 11930
11831: LD_INT 11
11833: DOUBLE
11834: EQUAL
11835: IFTRUE 11839
11837: GO 11857
11839: POP
// ComMoveXY ( unit , 16 , 28 ) ; 13 :
11840: LD_VAR 0 2
11844: PPUSH
11845: LD_INT 16
11847: PPUSH
11848: LD_INT 28
11850: PPUSH
11851: CALL_OW 111
11855: GO 11930
11857: LD_INT 13
11859: DOUBLE
11860: EQUAL
11861: IFTRUE 11865
11863: GO 11903
11865: POP
// begin if IsOk ( ruteleprt ) then
11866: LD_INT 10
11868: PPUSH
11869: CALL_OW 302
11873: IFFALSE 11889
// ComEnterUnit ( unit , ruteleprt ) else
11875: LD_VAR 0 2
11879: PPUSH
11880: LD_INT 10
11882: PPUSH
11883: CALL_OW 120
11887: GO 11901
// SetTag ( unit , 23 ) ;
11889: LD_VAR 0 2
11893: PPUSH
11894: LD_INT 23
11896: PPUSH
11897: CALL_OW 109
// end ; 23 :
11901: GO 11930
11903: LD_INT 23
11905: DOUBLE
11906: EQUAL
11907: IFTRUE 11911
11909: GO 11929
11911: POP
// ComMoveXY ( unit , 128 , 155 ) ; end ;
11912: LD_VAR 0 2
11916: PPUSH
11917: LD_INT 128
11919: PPUSH
11920: LD_INT 155
11922: PPUSH
11923: CALL_OW 111
11927: GO 11930
11929: POP
// end ;
11930: GO 11518
11932: POP
11933: POP
// until not RuScientists ;
11934: LD_EXP 27
11938: NOT
11939: IFFALSE 11501
// end ;
11941: PPOPN 3
11943: END
// every 0 0$1 trigger ruAI = 0 and RuScientists and FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do var i , unit , veh , tmp ;
11944: LD_EXP 34
11948: PUSH
11949: LD_INT 0
11951: EQUAL
11952: PUSH
11953: LD_EXP 27
11957: AND
11958: PUSH
11959: LD_INT 22
11961: PUSH
11962: LD_INT 6
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: PUSH
11969: LD_INT 2
11971: PUSH
11972: LD_INT 95
11974: PUSH
11975: LD_INT 13
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: PUSH
11982: LD_INT 95
11984: PUSH
11985: LD_INT 14
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: PUSH
11992: LD_INT 95
11994: PUSH
11995: LD_INT 25
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: PUSH
12008: EMPTY
12009: LIST
12010: LIST
12011: PPUSH
12012: CALL_OW 69
12016: AND
12017: IFFALSE 12230
12019: GO 12021
12021: DISABLE
12022: LD_INT 0
12024: PPUSH
12025: PPUSH
12026: PPUSH
12027: PPUSH
// begin enable ;
12028: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do
12029: LD_ADDR_VAR 0 1
12033: PUSH
12034: LD_INT 22
12036: PUSH
12037: LD_INT 6
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: PUSH
12044: LD_INT 2
12046: PUSH
12047: LD_INT 95
12049: PUSH
12050: LD_INT 13
12052: PUSH
12053: EMPTY
12054: LIST
12055: LIST
12056: PUSH
12057: LD_INT 95
12059: PUSH
12060: LD_INT 14
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: PUSH
12067: LD_INT 95
12069: PUSH
12070: LD_INT 25
12072: PUSH
12073: EMPTY
12074: LIST
12075: LIST
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: PUSH
12083: EMPTY
12084: LIST
12085: LIST
12086: PPUSH
12087: CALL_OW 69
12091: PUSH
12092: FOR_IN
12093: IFFALSE 12228
// begin if i in RuScientists then
12095: LD_VAR 0 1
12099: PUSH
12100: LD_EXP 27
12104: IN
12105: IFFALSE 12134
// begin RuScientists = RuScientists diff i ;
12107: LD_ADDR_EXP 27
12111: PUSH
12112: LD_EXP 27
12116: PUSH
12117: LD_VAR 0 1
12121: DIFF
12122: ST_TO_ADDR
// RemoveUnit ( i ) ;
12123: LD_VAR 0 1
12127: PPUSH
12128: CALL_OW 64
// continue ;
12132: GO 12092
// end ; if i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_manual ] ] ) then
12134: LD_VAR 0 1
12138: PUSH
12139: LD_INT 22
12141: PUSH
12142: LD_INT 6
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: PUSH
12149: LD_INT 33
12151: PUSH
12152: LD_INT 1
12154: PUSH
12155: EMPTY
12156: LIST
12157: LIST
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: PPUSH
12163: CALL_OW 69
12167: IN
12168: IFFALSE 12226
// begin if IsDrivenBy ( i ) in RuScientists then
12170: LD_VAR 0 1
12174: PPUSH
12175: CALL_OW 311
12179: PUSH
12180: LD_EXP 27
12184: IN
12185: IFFALSE 12203
// RuScientists = RuScientists diff i ;
12187: LD_ADDR_EXP 27
12191: PUSH
12192: LD_EXP 27
12196: PUSH
12197: LD_VAR 0 1
12201: DIFF
12202: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
12203: LD_VAR 0 1
12207: PPUSH
12208: CALL_OW 311
12212: PPUSH
12213: CALL_OW 64
// RemoveUnit ( i ) ;
12217: LD_VAR 0 1
12221: PPUSH
12222: CALL_OW 64
// end ; end ;
12226: GO 12092
12228: POP
12229: POP
// end ; end_of_file
12230: PPOPN 4
12232: END
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12233: LD_INT 0
12235: PPUSH
12236: PPUSH
// for i in charactersList do
12237: LD_ADDR_VAR 0 4
12241: PUSH
12242: LD_VAR 0 1
12246: PUSH
12247: FOR_IN
12248: IFFALSE 12266
// SaveCharacters ( i , ident ) ;
12250: LD_VAR 0 4
12254: PPUSH
12255: LD_VAR 0 2
12259: PPUSH
12260: CALL_OW 38
12264: GO 12247
12266: POP
12267: POP
// end ;
12268: LD_VAR 0 3
12272: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
12273: LD_INT 0
12275: PPUSH
12276: PPUSH
12277: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12278: LD_ADDR_VAR 0 1
12282: PUSH
12283: LD_VAR 0 1
12287: PUSH
12288: LD_EXP 1
12292: PUSH
12293: LD_EXP 7
12297: PUSH
12298: LD_EXP 3
12302: PUSH
12303: LD_EXP 4
12307: PUSH
12308: LD_EXP 5
12312: PUSH
12313: LD_EXP 2
12317: PUSH
12318: LD_EXP 12
12322: PUSH
12323: LD_EXP 13
12327: PUSH
12328: LD_EXP 9
12332: PUSH
12333: LD_EXP 11
12337: PUSH
12338: LD_EXP 6
12342: PUSH
12343: LD_EXP 8
12347: PUSH
12348: LD_EXP 10
12352: PUSH
12353: LD_EXP 15
12357: PUSH
12358: EMPTY
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: DIFF
12374: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
12375: LD_ADDR_VAR 0 6
12379: PUSH
12380: LD_VAR 0 1
12384: PUSH
12385: LD_INT 1
12387: PPUSH
12388: LD_VAR 0 1
12392: PPUSH
12393: CALL_OW 12
12397: ARRAY
12398: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
12399: LD_VAR 0 6
12403: PPUSH
12404: CALL_OW 258
12408: PUSH
12409: LD_INT 1
12411: EQUAL
12412: IFFALSE 12430
// Say ( speaker , dialogMID ) else
12414: LD_VAR 0 6
12418: PPUSH
12419: LD_VAR 0 2
12423: PPUSH
12424: CALL_OW 88
12428: GO 12444
// Say ( speaker , dialogFID ) ;
12430: LD_VAR 0 6
12434: PPUSH
12435: LD_VAR 0 3
12439: PPUSH
12440: CALL_OW 88
// result := speaker ;
12444: LD_ADDR_VAR 0 4
12448: PUSH
12449: LD_VAR 0 6
12453: ST_TO_ADDR
// end ;
12454: LD_VAR 0 4
12458: RET
// export function PrepareDifficulty ; var tmp ; begin
12459: LD_INT 0
12461: PPUSH
12462: PPUSH
// if Difficulty = 1 then
12463: LD_OWVAR 67
12467: PUSH
12468: LD_INT 1
12470: EQUAL
12471: IFFALSE 12491
// begin RuSolMinLevel = 8 ;
12473: LD_ADDR_EXP 29
12477: PUSH
12478: LD_INT 8
12480: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12481: LD_ADDR_EXP 30
12485: PUSH
12486: LD_INT 10
12488: ST_TO_ADDR
// end else
12489: GO 12731
// if Difficulty = 2 then
12491: LD_OWVAR 67
12495: PUSH
12496: LD_INT 2
12498: EQUAL
12499: IFFALSE 12595
// begin RuSolMinLevel = 9 ;
12501: LD_ADDR_EXP 29
12505: PUSH
12506: LD_INT 9
12508: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12509: LD_ADDR_EXP 30
12513: PUSH
12514: LD_INT 10
12516: ST_TO_ADDR
// uc_nation = 3 ;
12517: LD_ADDR_OWVAR 21
12521: PUSH
12522: LD_INT 3
12524: ST_TO_ADDR
// uc_side = 3 ;
12525: LD_ADDR_OWVAR 20
12529: PUSH
12530: LD_INT 3
12532: ST_TO_ADDR
// bc_level = 10 ;
12533: LD_ADDR_OWVAR 43
12537: PUSH
12538: LD_INT 10
12540: ST_TO_ADDR
// bc_type = b_turret ;
12541: LD_ADDR_OWVAR 42
12545: PUSH
12546: LD_INT 33
12548: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12549: LD_ADDR_VAR 0 2
12553: PUSH
12554: LD_INT 86
12556: PPUSH
12557: LD_INT 34
12559: PPUSH
12560: LD_INT 2
12562: PPUSH
12563: CALL_OW 47
12567: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12568: LD_VAR 0 2
12572: PPUSH
12573: LD_INT 49
12575: PPUSH
12576: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12580: LD_INT 64
12582: PPUSH
12583: LD_INT 3
12585: PPUSH
12586: LD_INT 1
12588: PPUSH
12589: CALL_OW 322
// end else
12593: GO 12731
// begin RuSolMinLevel = 10 ;
12595: LD_ADDR_EXP 29
12599: PUSH
12600: LD_INT 10
12602: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12603: LD_ADDR_EXP 30
12607: PUSH
12608: LD_INT 10
12610: ST_TO_ADDR
// uc_nation = 3 ;
12611: LD_ADDR_OWVAR 21
12615: PUSH
12616: LD_INT 3
12618: ST_TO_ADDR
// uc_side = 3 ;
12619: LD_ADDR_OWVAR 20
12623: PUSH
12624: LD_INT 3
12626: ST_TO_ADDR
// bc_level = 10 ;
12627: LD_ADDR_OWVAR 43
12631: PUSH
12632: LD_INT 10
12634: ST_TO_ADDR
// bc_type = b_turret ;
12635: LD_ADDR_OWVAR 42
12639: PUSH
12640: LD_INT 33
12642: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12643: LD_ADDR_VAR 0 2
12647: PUSH
12648: LD_INT 86
12650: PPUSH
12651: LD_INT 34
12653: PPUSH
12654: LD_INT 2
12656: PPUSH
12657: CALL_OW 47
12661: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12662: LD_VAR 0 2
12666: PPUSH
12667: LD_INT 49
12669: PPUSH
12670: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
12674: LD_ADDR_VAR 0 2
12678: PUSH
12679: LD_INT 93
12681: PPUSH
12682: LD_INT 31
12684: PPUSH
12685: LD_INT 2
12687: PPUSH
12688: CALL_OW 47
12692: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12693: LD_VAR 0 2
12697: PPUSH
12698: LD_INT 49
12700: PPUSH
12701: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12705: LD_INT 64
12707: PPUSH
12708: LD_INT 3
12710: PPUSH
12711: LD_INT 1
12713: PPUSH
12714: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
12718: LD_INT 65
12720: PPUSH
12721: LD_INT 3
12723: PPUSH
12724: LD_INT 1
12726: PPUSH
12727: CALL_OW 322
// end ; end ;
12731: LD_VAR 0 1
12735: RET
// export function ShowQuery1 ; begin
12736: LD_INT 0
12738: PPUSH
// result := Query ( Q1 ) ;
12739: LD_ADDR_VAR 0 1
12743: PUSH
12744: LD_STRING Q1
12746: PPUSH
12747: CALL_OW 97
12751: ST_TO_ADDR
// end ;
12752: LD_VAR 0 1
12756: RET
// export function ShowQuery2 ; begin
12757: LD_INT 0
12759: PPUSH
// result := Query ( Q1a ) ;
12760: LD_ADDR_VAR 0 1
12764: PUSH
12765: LD_STRING Q1a
12767: PPUSH
12768: CALL_OW 97
12772: ST_TO_ADDR
// end ;
12773: LD_VAR 0 1
12777: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
12778: LD_INT 0
12780: PPUSH
12781: PPUSH
12782: PPUSH
12783: PPUSH
// for i = 1 to count do
12784: LD_ADDR_VAR 0 8
12788: PUSH
12789: DOUBLE
12790: LD_INT 1
12792: DEC
12793: ST_TO_ADDR
12794: LD_VAR 0 6
12798: PUSH
12799: FOR_TO
12800: IFFALSE 12881
// begin uc_side = side ;
12802: LD_ADDR_OWVAR 20
12806: PUSH
12807: LD_VAR 0 1
12811: ST_TO_ADDR
// uc_nation = nation ;
12812: LD_ADDR_OWVAR 21
12816: PUSH
12817: LD_VAR 0 2
12821: ST_TO_ADDR
// hc_gallery =  ;
12822: LD_ADDR_OWVAR 33
12826: PUSH
12827: LD_STRING 
12829: ST_TO_ADDR
// hc_name =  ;
12830: LD_ADDR_OWVAR 26
12834: PUSH
12835: LD_STRING 
12837: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
12838: LD_INT 0
12840: PPUSH
12841: LD_VAR 0 5
12845: PPUSH
12846: LD_VAR 0 4
12850: PPUSH
12851: CALL_OW 380
// un = CreateHuman ;
12855: LD_ADDR_VAR 0 10
12859: PUSH
12860: CALL_OW 44
12864: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
12865: LD_VAR 0 10
12869: PPUSH
12870: LD_VAR 0 3
12874: PPUSH
12875: CALL_OW 52
// end ;
12879: GO 12799
12881: POP
12882: POP
// end ;
12883: LD_VAR 0 7
12887: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , list ; begin
12888: LD_INT 0
12890: PPUSH
12891: PPUSH
12892: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
12893: LD_ADDR_VAR 0 6
12897: PUSH
12898: LD_INT 48
12900: PUSH
12901: LD_INT 49
12903: PUSH
12904: LD_INT 50
12906: PUSH
12907: LD_INT 20
12909: PUSH
12910: LD_INT 1
12912: PUSH
12913: LD_INT 51
12915: PUSH
12916: LD_INT 52
12918: PUSH
12919: LD_INT 69
12921: PUSH
12922: LD_INT 39
12924: PUSH
12925: LD_INT 34
12927: PUSH
12928: LD_INT 40
12930: PUSH
12931: LD_INT 53
12933: PUSH
12934: LD_INT 71
12936: PUSH
12937: LD_INT 57
12939: PUSH
12940: LD_INT 58
12942: PUSH
12943: LD_INT 44
12945: PUSH
12946: LD_INT 32
12948: PUSH
12949: LD_INT 27
12951: PUSH
12952: LD_INT 23
12954: PUSH
12955: LD_INT 33
12957: PUSH
12958: LD_INT 59
12960: PUSH
12961: LD_INT 54
12963: PUSH
12964: LD_INT 55
12966: PUSH
12967: LD_INT 56
12969: PUSH
12970: LD_INT 63
12972: PUSH
12973: LD_INT 64
12975: PUSH
12976: LD_INT 65
12978: PUSH
12979: LD_INT 30
12981: PUSH
12982: LD_INT 31
12984: PUSH
12985: LD_INT 21
12987: PUSH
12988: LD_INT 22
12990: PUSH
12991: LD_INT 25
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: ST_TO_ADDR
// for i := 1 to list do
13028: LD_ADDR_VAR 0 5
13032: PUSH
13033: DOUBLE
13034: LD_INT 1
13036: DEC
13037: ST_TO_ADDR
13038: LD_VAR 0 6
13042: PUSH
13043: FOR_TO
13044: IFFALSE 13116
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
13046: LD_VAR 0 6
13050: PUSH
13051: LD_VAR 0 5
13055: ARRAY
13056: PPUSH
13057: LD_VAR 0 1
13061: PPUSH
13062: CALL_OW 321
13066: PUSH
13067: LD_INT 1
13069: EQUAL
13070: PUSH
13071: LD_VAR 0 6
13075: PUSH
13076: LD_VAR 0 5
13080: ARRAY
13081: PPUSH
13082: LD_VAR 0 3
13086: PPUSH
13087: CALL_OW 482
13091: AND
13092: IFFALSE 13114
// AddComResearch ( lab , list [ i ] ) ;
13094: LD_VAR 0 2
13098: PPUSH
13099: LD_VAR 0 6
13103: PUSH
13104: LD_VAR 0 5
13108: ARRAY
13109: PPUSH
13110: CALL_OW 184
13114: GO 13043
13116: POP
13117: POP
// end ;
13118: LD_VAR 0 4
13122: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
13123: LD_INT 0
13125: PPUSH
13126: PPUSH
13127: PPUSH
13128: PPUSH
13129: PPUSH
13130: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
13131: LD_ADDR_VAR 0 8
13135: PUSH
13136: LD_VAR 0 2
13140: PPUSH
13141: CALL_OW 313
13145: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13146: LD_ADDR_VAR 0 9
13150: PUSH
13151: LD_VAR 0 3
13155: PPUSH
13156: LD_INT 22
13158: PUSH
13159: LD_VAR 0 1
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: PUSH
13168: LD_INT 25
13170: PUSH
13171: LD_INT 2
13173: PUSH
13174: EMPTY
13175: LIST
13176: LIST
13177: PUSH
13178: LD_INT 24
13180: PUSH
13181: LD_INT 750
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PUSH
13188: LD_INT 3
13190: PUSH
13191: LD_INT 54
13193: PUSH
13194: EMPTY
13195: LIST
13196: PUSH
13197: EMPTY
13198: LIST
13199: LIST
13200: PUSH
13201: EMPTY
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: PPUSH
13207: CALL_OW 70
13211: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13212: LD_ADDR_VAR 0 6
13216: PUSH
13217: LD_VAR 0 3
13221: PPUSH
13222: LD_INT 22
13224: PUSH
13225: LD_VAR 0 1
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: PUSH
13234: LD_INT 21
13236: PUSH
13237: LD_INT 3
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: PUSH
13244: LD_INT 3
13246: PUSH
13247: LD_INT 24
13249: PUSH
13250: LD_INT 1000
13252: PUSH
13253: EMPTY
13254: LIST
13255: LIST
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: LIST
13265: PUSH
13266: EMPTY
13267: LIST
13268: PPUSH
13269: CALL_OW 70
13273: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13274: LD_VAR 0 6
13278: NOT
13279: PUSH
13280: LD_INT 22
13282: PUSH
13283: LD_VAR 0 1
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: PUSH
13292: LD_INT 25
13294: PUSH
13295: LD_INT 2
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: PUSH
13302: LD_INT 24
13304: PUSH
13305: LD_INT 250
13307: PUSH
13308: EMPTY
13309: LIST
13310: LIST
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: LIST
13316: PPUSH
13317: CALL_OW 69
13321: NOT
13322: AND
13323: IFFALSE 13327
// exit ;
13325: GO 13485
// if buildingsList and engineerOkInside then
13327: LD_VAR 0 6
13331: PUSH
13332: LD_VAR 0 8
13336: AND
13337: IFFALSE 13348
// ComExitBuilding ( engineerOkInside ) ;
13339: LD_VAR 0 8
13343: PPUSH
13344: CALL_OW 122
// if buildingsList and engineerOkOutside then
13348: LD_VAR 0 6
13352: PUSH
13353: LD_VAR 0 9
13357: AND
13358: IFFALSE 13378
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
13360: LD_VAR 0 9
13364: PPUSH
13365: LD_VAR 0 6
13369: PUSH
13370: LD_INT 1
13372: ARRAY
13373: PPUSH
13374: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
13378: LD_VAR 0 6
13382: PUSH
13383: LD_INT 0
13385: EQUAL
13386: PUSH
13387: LD_VAR 0 4
13391: PUSH
13392: LD_INT 0
13394: EQUAL
13395: AND
13396: PUSH
13397: LD_VAR 0 9
13401: AND
13402: IFFALSE 13418
// ComEnterUnit ( engineerOkOutside , depot ) ;
13404: LD_VAR 0 9
13408: PPUSH
13409: LD_VAR 0 2
13413: PPUSH
13414: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
13418: LD_VAR 0 9
13422: PUSH
13423: LD_VAR 0 6
13427: PUSH
13428: LD_INT 0
13430: EQUAL
13431: AND
13432: PUSH
13433: LD_VAR 0 4
13437: AND
13438: IFFALSE 13485
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13440: LD_VAR 0 9
13444: PPUSH
13445: LD_VAR 0 4
13449: PUSH
13450: LD_INT 1
13452: ARRAY
13453: PPUSH
13454: LD_VAR 0 4
13458: PUSH
13459: LD_INT 2
13461: ARRAY
13462: PPUSH
13463: LD_VAR 0 4
13467: PUSH
13468: LD_INT 3
13470: ARRAY
13471: PPUSH
13472: LD_VAR 0 4
13476: PUSH
13477: LD_INT 4
13479: ARRAY
13480: PPUSH
13481: CALL_OW 145
// end ;
13485: LD_VAR 0 5
13489: RET
// export function HealUnitInBase ( side , healArea , baseArea , buildings ) ; var sciList , sciListOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13490: LD_INT 0
13492: PPUSH
13493: PPUSH
13494: PPUSH
13495: PPUSH
13496: PPUSH
13497: PPUSH
13498: PPUSH
13499: PPUSH
13500: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13501: LD_ADDR_VAR 0 6
13505: PUSH
13506: LD_INT 22
13508: PUSH
13509: LD_VAR 0 1
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: PUSH
13518: LD_INT 25
13520: PUSH
13521: LD_INT 4
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: PUSH
13528: LD_INT 24
13530: PUSH
13531: LD_INT 251
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: PUSH
13538: EMPTY
13539: LIST
13540: LIST
13541: LIST
13542: PPUSH
13543: CALL_OW 69
13547: PUSH
13548: LD_EXP 27
13552: PUSH
13553: EMPTY
13554: LIST
13555: DIFF
13556: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_outside ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13557: LD_ADDR_VAR 0 7
13561: PUSH
13562: LD_VAR 0 3
13566: PPUSH
13567: LD_INT 22
13569: PUSH
13570: LD_VAR 0 1
13574: PUSH
13575: EMPTY
13576: LIST
13577: LIST
13578: PUSH
13579: LD_INT 56
13581: PUSH
13582: EMPTY
13583: LIST
13584: PUSH
13585: LD_INT 25
13587: PUSH
13588: LD_INT 4
13590: PUSH
13591: EMPTY
13592: LIST
13593: LIST
13594: PUSH
13595: LD_INT 50
13597: PUSH
13598: EMPTY
13599: LIST
13600: PUSH
13601: EMPTY
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: PPUSH
13607: CALL_OW 70
13611: PUSH
13612: LD_EXP 27
13616: PUSH
13617: EMPTY
13618: LIST
13619: DIFF
13620: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13621: LD_ADDR_VAR 0 10
13625: PUSH
13626: LD_VAR 0 3
13630: PPUSH
13631: LD_INT 22
13633: PUSH
13634: LD_VAR 0 1
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PUSH
13643: LD_INT 21
13645: PUSH
13646: LD_INT 1
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: PUSH
13653: LD_INT 3
13655: PUSH
13656: LD_INT 24
13658: PUSH
13659: LD_INT 750
13661: PUSH
13662: EMPTY
13663: LIST
13664: LIST
13665: PUSH
13666: EMPTY
13667: LIST
13668: LIST
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: LIST
13674: PPUSH
13675: CALL_OW 70
13679: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13680: LD_ADDR_VAR 0 11
13684: PUSH
13685: LD_VAR 0 2
13689: PPUSH
13690: LD_INT 22
13692: PUSH
13693: LD_VAR 0 1
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PUSH
13702: LD_INT 21
13704: PUSH
13705: LD_INT 1
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: PUSH
13712: LD_INT 3
13714: PUSH
13715: LD_INT 24
13717: PUSH
13718: LD_INT 1000
13720: PUSH
13721: EMPTY
13722: LIST
13723: LIST
13724: PUSH
13725: EMPTY
13726: LIST
13727: LIST
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: LIST
13733: PPUSH
13734: CALL_OW 70
13738: ST_TO_ADDR
// if damageUnits and sciList then
13739: LD_VAR 0 10
13743: PUSH
13744: LD_VAR 0 6
13748: AND
13749: IFFALSE 13765
// ComMoveToArea ( damageUnits , healArea ) ;
13751: LD_VAR 0 10
13755: PPUSH
13756: LD_VAR 0 2
13760: PPUSH
13761: CALL_OW 113
// if unitsToHeal and sciList and sciListOutside = 0 then
13765: LD_VAR 0 11
13769: PUSH
13770: LD_VAR 0 6
13774: AND
13775: PUSH
13776: LD_VAR 0 7
13780: PUSH
13781: LD_INT 0
13783: EQUAL
13784: AND
13785: IFFALSE 13831
// for i in buildings do
13787: LD_ADDR_VAR 0 8
13791: PUSH
13792: LD_VAR 0 4
13796: PUSH
13797: FOR_IN
13798: IFFALSE 13829
// begin if UnitsInside ( i ) then
13800: LD_VAR 0 8
13804: PPUSH
13805: CALL_OW 313
13809: IFFALSE 13827
// begin ComExitBuilding ( UnitsInside ( i ) ) ;
13811: LD_VAR 0 8
13815: PPUSH
13816: CALL_OW 313
13820: PPUSH
13821: CALL_OW 122
// break ;
13825: GO 13829
// end ; end ;
13827: GO 13797
13829: POP
13830: POP
// if unitsToHeal and sciListOutside then
13831: LD_VAR 0 11
13835: PUSH
13836: LD_VAR 0 7
13840: AND
13841: IFFALSE 13861
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
13843: LD_VAR 0 7
13847: PPUSH
13848: LD_VAR 0 11
13852: PUSH
13853: LD_INT 1
13855: ARRAY
13856: PPUSH
13857: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
13861: LD_VAR 0 10
13865: PUSH
13866: LD_INT 0
13868: EQUAL
13869: PUSH
13870: LD_VAR 0 11
13874: PUSH
13875: LD_INT 0
13877: EQUAL
13878: AND
13879: PUSH
13880: LD_VAR 0 7
13884: AND
13885: IFFALSE 13953
// begin tmp := buildings ;
13887: LD_ADDR_VAR 0 12
13891: PUSH
13892: LD_VAR 0 4
13896: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
13897: LD_ADDR_VAR 0 13
13901: PUSH
13902: LD_INT 1
13904: PPUSH
13905: LD_VAR 0 12
13909: PPUSH
13910: CALL_OW 12
13914: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
13915: LD_VAR 0 7
13919: PPUSH
13920: LD_INT 3
13922: PUSH
13923: LD_INT 60
13925: PUSH
13926: EMPTY
13927: LIST
13928: PUSH
13929: EMPTY
13930: LIST
13931: LIST
13932: PPUSH
13933: CALL_OW 72
13937: PPUSH
13938: LD_VAR 0 12
13942: PUSH
13943: LD_VAR 0 13
13947: ARRAY
13948: PPUSH
13949: CALL_OW 120
// end ; end ;
13953: LD_VAR 0 5
13957: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
13958: LD_INT 0
13960: PPUSH
13961: PPUSH
13962: PPUSH
13963: PPUSH
13964: PPUSH
13965: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
13966: LD_ADDR_VAR 0 7
13970: PUSH
13971: LD_VAR 0 2
13975: PPUSH
13976: LD_INT 22
13978: PUSH
13979: LD_VAR 0 1
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: PUSH
13988: LD_INT 21
13990: PUSH
13991: LD_INT 2
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: PUSH
13998: LD_INT 34
14000: PUSH
14001: LD_INT 52
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: LIST
14012: PPUSH
14013: CALL_OW 70
14017: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14018: LD_ADDR_VAR 0 8
14022: PUSH
14023: LD_VAR 0 2
14027: PPUSH
14028: LD_INT 22
14030: PUSH
14031: LD_VAR 0 1
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: PUSH
14040: LD_INT 21
14042: PUSH
14043: LD_INT 3
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: PUSH
14050: LD_INT 3
14052: PUSH
14053: LD_INT 24
14055: PUSH
14056: LD_INT 1000
14058: PUSH
14059: EMPTY
14060: LIST
14061: LIST
14062: PUSH
14063: EMPTY
14064: LIST
14065: LIST
14066: PUSH
14067: EMPTY
14068: LIST
14069: LIST
14070: LIST
14071: PUSH
14072: EMPTY
14073: LIST
14074: PPUSH
14075: CALL_OW 70
14079: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
14080: LD_VAR 0 8
14084: PUSH
14085: LD_INT 0
14087: GREATER
14088: PUSH
14089: LD_VAR 0 7
14093: PPUSH
14094: LD_INT 24
14096: PUSH
14097: LD_INT 750
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: PPUSH
14104: CALL_OW 72
14108: PUSH
14109: LD_INT 0
14111: GREATER
14112: AND
14113: IFFALSE 14133
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
14115: LD_VAR 0 7
14119: PPUSH
14120: LD_VAR 0 8
14124: PUSH
14125: LD_INT 1
14127: ARRAY
14128: PPUSH
14129: CALL_OW 130
// end ;
14133: LD_VAR 0 3
14137: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14138: LD_INT 0
14140: PPUSH
14141: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14142: LD_INT 22
14144: PUSH
14145: LD_VAR 0 1
14149: PUSH
14150: EMPTY
14151: LIST
14152: LIST
14153: PUSH
14154: LD_INT 21
14156: PUSH
14157: LD_INT 2
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: PPUSH
14168: CALL_OW 69
14172: PUSH
14173: LD_INT 18
14175: PPUSH
14176: LD_INT 22
14178: PUSH
14179: LD_VAR 0 1
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: PUSH
14188: LD_INT 21
14190: PUSH
14191: LD_INT 2
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: PUSH
14198: EMPTY
14199: LIST
14200: LIST
14201: PPUSH
14202: CALL_OW 70
14206: PUSH
14207: LD_VAR 0 3
14211: LESSEQUAL
14212: DIFF
14213: IFFALSE 14280
// for i := 1 to vehCount do
14215: LD_ADDR_VAR 0 9
14219: PUSH
14220: DOUBLE
14221: LD_INT 1
14223: DEC
14224: ST_TO_ADDR
14225: LD_VAR 0 3
14229: PUSH
14230: FOR_TO
14231: IFFALSE 14278
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14233: LD_VAR 0 2
14237: PPUSH
14238: LD_VAR 0 7
14242: PPUSH
14243: LD_VAR 0 5
14247: PPUSH
14248: LD_VAR 0 6
14252: PPUSH
14253: LD_VAR 0 4
14257: PUSH
14258: LD_INT 1
14260: PPUSH
14261: LD_VAR 0 4
14265: PPUSH
14266: CALL_OW 12
14270: ARRAY
14271: PPUSH
14272: CALL_OW 185
14276: GO 14230
14278: POP
14279: POP
// end ;
14280: LD_VAR 0 8
14284: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
14285: LD_INT 0
14287: PPUSH
14288: PPUSH
14289: PPUSH
14290: PPUSH
14291: PPUSH
14292: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14293: LD_ADDR_VAR 0 6
14297: PUSH
14298: LD_INT 22
14300: PUSH
14301: LD_VAR 0 1
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: PUSH
14310: LD_INT 25
14312: PUSH
14313: LD_INT 9
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: PPUSH
14324: CALL_OW 69
14328: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14329: LD_ADDR_VAR 0 7
14333: PUSH
14334: LD_INT 81
14336: PUSH
14337: LD_VAR 0 1
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: PUSH
14346: LD_INT 3
14348: PUSH
14349: LD_INT 21
14351: PUSH
14352: LD_INT 3
14354: PUSH
14355: EMPTY
14356: LIST
14357: LIST
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: PPUSH
14367: CALL_OW 69
14371: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14372: LD_ADDR_VAR 0 4
14376: PUSH
14377: LD_INT 1
14379: PPUSH
14380: LD_INT 3
14382: PPUSH
14383: CALL_OW 12
14387: ST_TO_ADDR
// for i := 1 to list do
14388: LD_ADDR_VAR 0 5
14392: PUSH
14393: DOUBLE
14394: LD_INT 1
14396: DEC
14397: ST_TO_ADDR
14398: LD_VAR 0 6
14402: PUSH
14403: FOR_TO
14404: IFFALSE 14606
// for ta in filter do
14406: LD_ADDR_VAR 0 3
14410: PUSH
14411: LD_VAR 0 7
14415: PUSH
14416: FOR_IN
14417: IFFALSE 14602
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14419: LD_VAR 0 6
14423: PUSH
14424: LD_VAR 0 5
14428: ARRAY
14429: PPUSH
14430: LD_VAR 0 3
14434: PPUSH
14435: CALL_OW 296
14439: PUSH
14440: LD_INT 15
14442: LESSEQUAL
14443: IFFALSE 14600
// begin case c of 1 :
14445: LD_VAR 0 4
14449: PUSH
14450: LD_INT 1
14452: DOUBLE
14453: EQUAL
14454: IFTRUE 14458
14456: GO 14496
14458: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
14459: LD_VAR 0 6
14463: PUSH
14464: LD_VAR 0 5
14468: ARRAY
14469: PPUSH
14470: LD_VAR 0 3
14474: PPUSH
14475: CALL_OW 250
14479: PPUSH
14480: LD_VAR 0 3
14484: PPUSH
14485: CALL_OW 251
14489: PPUSH
14490: CALL_OW 154
14494: GO 14600
14496: LD_INT 2
14498: DOUBLE
14499: EQUAL
14500: IFTRUE 14504
14502: GO 14568
14504: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
14505: LD_VAR 0 6
14509: PUSH
14510: LD_VAR 0 5
14514: ARRAY
14515: PPUSH
14516: LD_VAR 0 3
14520: PPUSH
14521: CALL_OW 250
14525: PUSH
14526: LD_INT 1
14528: NEG
14529: PPUSH
14530: LD_INT 1
14532: PPUSH
14533: CALL_OW 12
14537: PLUS
14538: PPUSH
14539: LD_VAR 0 3
14543: PPUSH
14544: CALL_OW 251
14548: PUSH
14549: LD_INT 1
14551: NEG
14552: PPUSH
14553: LD_INT 1
14555: PPUSH
14556: CALL_OW 12
14560: PLUS
14561: PPUSH
14562: CALL_OW 153
14566: GO 14600
14568: LD_INT 3
14570: DOUBLE
14571: EQUAL
14572: IFTRUE 14576
14574: GO 14599
14576: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14577: LD_VAR 0 6
14581: PUSH
14582: LD_VAR 0 5
14586: ARRAY
14587: PPUSH
14588: LD_VAR 0 3
14592: PPUSH
14593: CALL_OW 115
14597: GO 14600
14599: POP
// end ; end ;
14600: GO 14416
14602: POP
14603: POP
14604: GO 14403
14606: POP
14607: POP
// end ;
14608: LD_VAR 0 2
14612: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
14613: LD_INT 0
14615: PPUSH
14616: PPUSH
14617: PPUSH
14618: PPUSH
// r := 100 ;
14619: LD_ADDR_VAR 0 5
14623: PUSH
14624: LD_INT 100
14626: ST_TO_ADDR
// x := 0 ;
14627: LD_ADDR_VAR 0 6
14631: PUSH
14632: LD_INT 0
14634: ST_TO_ADDR
// while ( x < n ) do
14635: LD_VAR 0 6
14639: PUSH
14640: LD_VAR 0 2
14644: LESS
14645: IFFALSE 14908
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
14647: LD_ADDR_VAR 0 4
14651: PUSH
14652: DOUBLE
14653: LD_INT 1
14655: DEC
14656: ST_TO_ADDR
14657: LD_VAR 0 1
14661: PPUSH
14662: LD_INT 0
14664: PPUSH
14665: CALL_OW 517
14669: PUSH
14670: LD_INT 1
14672: ARRAY
14673: PUSH
14674: FOR_TO
14675: IFFALSE 14904
// begin if r > 50 then
14677: LD_VAR 0 5
14681: PUSH
14682: LD_INT 50
14684: GREATER
14685: IFFALSE 14888
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
14687: LD_VAR 0 1
14691: PPUSH
14692: LD_INT 0
14694: PPUSH
14695: CALL_OW 517
14699: PUSH
14700: LD_INT 1
14702: ARRAY
14703: PUSH
14704: LD_VAR 0 4
14708: ARRAY
14709: PPUSH
14710: LD_VAR 0 1
14714: PPUSH
14715: LD_INT 0
14717: PPUSH
14718: CALL_OW 517
14722: PUSH
14723: LD_INT 2
14725: ARRAY
14726: PUSH
14727: LD_VAR 0 4
14731: ARRAY
14732: PPUSH
14733: CALL_OW 458
14737: NOT
14738: IFFALSE 14886
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
14740: LD_VAR 0 1
14744: PPUSH
14745: LD_INT 0
14747: PPUSH
14748: CALL_OW 517
14752: PUSH
14753: LD_INT 1
14755: ARRAY
14756: PUSH
14757: LD_VAR 0 4
14761: ARRAY
14762: PPUSH
14763: LD_VAR 0 1
14767: PPUSH
14768: LD_INT 0
14770: PPUSH
14771: CALL_OW 517
14775: PUSH
14776: LD_INT 2
14778: ARRAY
14779: PUSH
14780: LD_VAR 0 4
14784: ARRAY
14785: PPUSH
14786: LD_INT 8
14788: PPUSH
14789: LD_INT 0
14791: PPUSH
14792: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
14796: LD_ADDR_EXP 37
14800: PUSH
14801: LD_EXP 37
14805: PPUSH
14806: LD_INT 1
14808: PPUSH
14809: LD_VAR 0 1
14813: PPUSH
14814: LD_INT 0
14816: PPUSH
14817: CALL_OW 517
14821: PUSH
14822: LD_INT 1
14824: ARRAY
14825: PUSH
14826: LD_VAR 0 4
14830: ARRAY
14831: PUSH
14832: LD_VAR 0 1
14836: PPUSH
14837: LD_INT 0
14839: PPUSH
14840: CALL_OW 517
14844: PUSH
14845: LD_INT 2
14847: ARRAY
14848: PUSH
14849: LD_VAR 0 4
14853: ARRAY
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PPUSH
14859: CALL_OW 2
14863: ST_TO_ADDR
// r := 0 ;
14864: LD_ADDR_VAR 0 5
14868: PUSH
14869: LD_INT 0
14871: ST_TO_ADDR
// x := x + 1 ;
14872: LD_ADDR_VAR 0 6
14876: PUSH
14877: LD_VAR 0 6
14881: PUSH
14882: LD_INT 1
14884: PLUS
14885: ST_TO_ADDR
// end end else
14886: GO 14902
// r := r + 35 ;
14888: LD_ADDR_VAR 0 5
14892: PUSH
14893: LD_VAR 0 5
14897: PUSH
14898: LD_INT 35
14900: PLUS
14901: ST_TO_ADDR
// end end ;
14902: GO 14674
14904: POP
14905: POP
14906: GO 14635
14908: LD_VAR 0 3
14912: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
14913: LD_INT 0
14915: PPUSH
14916: PPUSH
14917: PPUSH
14918: PPUSH
14919: PPUSH
// tmp := [ ] ;
14920: LD_ADDR_VAR 0 6
14924: PUSH
14925: EMPTY
14926: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
14927: LD_ADDR_VAR 0 7
14931: PUSH
14932: LD_INT 22
14934: PUSH
14935: LD_VAR 0 1
14939: PUSH
14940: EMPTY
14941: LIST
14942: LIST
14943: PUSH
14944: LD_INT 30
14946: PUSH
14947: LD_INT 32
14949: PUSH
14950: EMPTY
14951: LIST
14952: LIST
14953: PUSH
14954: EMPTY
14955: LIST
14956: LIST
14957: PPUSH
14958: CALL_OW 69
14962: ST_TO_ADDR
// if bunkers then
14963: LD_VAR 0 7
14967: IFFALSE 15037
// for i in bunkers do
14969: LD_ADDR_VAR 0 4
14973: PUSH
14974: LD_VAR 0 7
14978: PUSH
14979: FOR_IN
14980: IFFALSE 15035
// for j in UnitsInside ( i ) do
14982: LD_ADDR_VAR 0 5
14986: PUSH
14987: LD_VAR 0 4
14991: PPUSH
14992: CALL_OW 313
14996: PUSH
14997: FOR_IN
14998: IFFALSE 15031
// tmp := Replace ( tmp , tmp + 1 , j ) ;
15000: LD_ADDR_VAR 0 6
15004: PUSH
15005: LD_VAR 0 6
15009: PPUSH
15010: LD_VAR 0 6
15014: PUSH
15015: LD_INT 1
15017: PLUS
15018: PPUSH
15019: LD_VAR 0 5
15023: PPUSH
15024: CALL_OW 1
15028: ST_TO_ADDR
15029: GO 14997
15031: POP
15032: POP
15033: GO 14979
15035: POP
15036: POP
// if tmp then
15037: LD_VAR 0 6
15041: IFFALSE 15081
// begin ComExitBuilding ( tmp ) ;
15043: LD_VAR 0 6
15047: PPUSH
15048: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
15052: LD_VAR 0 6
15056: PPUSH
15057: LD_VAR 0 2
15061: PPUSH
15062: CALL_OW 250
15066: PPUSH
15067: LD_VAR 0 2
15071: PPUSH
15072: CALL_OW 251
15076: PPUSH
15077: CALL_OW 174
// end ; end ;
15081: LD_VAR 0 3
15085: RET
// export function CreateNature ; var i , un ; begin
15086: LD_INT 0
15088: PPUSH
15089: PPUSH
15090: PPUSH
// uc_side := 0 ;
15091: LD_ADDR_OWVAR 20
15095: PUSH
15096: LD_INT 0
15098: ST_TO_ADDR
// uc_nation := 0 ;
15099: LD_ADDR_OWVAR 21
15103: PUSH
15104: LD_INT 0
15106: ST_TO_ADDR
// InitHc ;
15107: CALL_OW 19
// hc_class := class_fish ;
15111: LD_ADDR_OWVAR 28
15115: PUSH
15116: LD_INT 20
15118: ST_TO_ADDR
// for i := 1 to 6 do
15119: LD_ADDR_VAR 0 2
15123: PUSH
15124: DOUBLE
15125: LD_INT 1
15127: DEC
15128: ST_TO_ADDR
15129: LD_INT 6
15131: PUSH
15132: FOR_TO
15133: IFFALSE 15152
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
15135: CALL_OW 44
15139: PPUSH
15140: LD_INT 22
15142: PPUSH
15143: LD_INT 0
15145: PPUSH
15146: CALL_OW 49
15150: GO 15132
15152: POP
15153: POP
// for i := 1 to Difficulty + 2 do
15154: LD_ADDR_VAR 0 2
15158: PUSH
15159: DOUBLE
15160: LD_INT 1
15162: DEC
15163: ST_TO_ADDR
15164: LD_OWVAR 67
15168: PUSH
15169: LD_INT 2
15171: PLUS
15172: PUSH
15173: FOR_TO
15174: IFFALSE 15283
// begin hc_sex := sex_male ;
15176: LD_ADDR_OWVAR 27
15180: PUSH
15181: LD_INT 1
15183: ST_TO_ADDR
// uc_side := 0 ;
15184: LD_ADDR_OWVAR 20
15188: PUSH
15189: LD_INT 0
15191: ST_TO_ADDR
// uc_nation := nation_nature ;
15192: LD_ADDR_OWVAR 21
15196: PUSH
15197: LD_INT 0
15199: ST_TO_ADDR
// hc_class := class_tiger ;
15200: LD_ADDR_OWVAR 28
15204: PUSH
15205: LD_INT 14
15207: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
15208: LD_ADDR_OWVAR 31
15212: PUSH
15213: LD_EXP 30
15217: PUSH
15218: LD_INT 0
15220: PUSH
15221: LD_INT 0
15223: PUSH
15224: LD_INT 0
15226: PUSH
15227: EMPTY
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
15233: LD_ADDR_OWVAR 35
15237: PUSH
15238: LD_INT 5
15240: NEG
15241: PPUSH
15242: LD_INT 5
15244: PPUSH
15245: CALL_OW 12
15249: PUSH
15250: LD_OWVAR 67
15254: MUL
15255: ST_TO_ADDR
// un := CreateHuman ;
15256: LD_ADDR_VAR 0 3
15260: PUSH
15261: CALL_OW 44
15265: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15266: LD_VAR 0 3
15270: PPUSH
15271: LD_INT 23
15273: PPUSH
15274: LD_INT 0
15276: PPUSH
15277: CALL_OW 49
// end ;
15281: GO 15173
15283: POP
15284: POP
// for i := 1 to rand ( 3 , 4 ) do
15285: LD_ADDR_VAR 0 2
15289: PUSH
15290: DOUBLE
15291: LD_INT 1
15293: DEC
15294: ST_TO_ADDR
15295: LD_INT 3
15297: PPUSH
15298: LD_INT 4
15300: PPUSH
15301: CALL_OW 12
15305: PUSH
15306: FOR_TO
15307: IFFALSE 15399
// begin hc_sex := sex_male ;
15309: LD_ADDR_OWVAR 27
15313: PUSH
15314: LD_INT 1
15316: ST_TO_ADDR
// uc_side := 0 ;
15317: LD_ADDR_OWVAR 20
15321: PUSH
15322: LD_INT 0
15324: ST_TO_ADDR
// uc_nation := nation_nature ;
15325: LD_ADDR_OWVAR 21
15329: PUSH
15330: LD_INT 0
15332: ST_TO_ADDR
// hc_class := 18 ;
15333: LD_ADDR_OWVAR 28
15337: PUSH
15338: LD_INT 18
15340: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
15341: LD_ADDR_OWVAR 31
15345: PUSH
15346: LD_INT 0
15348: PUSH
15349: LD_INT 0
15351: PUSH
15352: LD_INT 0
15354: PUSH
15355: LD_INT 0
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: ST_TO_ADDR
// hc_agressivity := 0 ;
15364: LD_ADDR_OWVAR 35
15368: PUSH
15369: LD_INT 0
15371: ST_TO_ADDR
// un := CreateHuman ;
15372: LD_ADDR_VAR 0 3
15376: PUSH
15377: CALL_OW 44
15381: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15382: LD_VAR 0 3
15386: PPUSH
15387: LD_INT 23
15389: PPUSH
15390: LD_INT 0
15392: PPUSH
15393: CALL_OW 49
// end ;
15397: GO 15306
15399: POP
15400: POP
// for i := 1 to [ 4 , 3 , 3 , 3 ] [ Difficulty ] do
15401: LD_ADDR_VAR 0 2
15405: PUSH
15406: DOUBLE
15407: LD_INT 1
15409: DEC
15410: ST_TO_ADDR
15411: LD_INT 4
15413: PUSH
15414: LD_INT 3
15416: PUSH
15417: LD_INT 3
15419: PUSH
15420: LD_INT 3
15422: PUSH
15423: EMPTY
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: PUSH
15429: LD_OWVAR 67
15433: ARRAY
15434: PUSH
15435: FOR_TO
15436: IFFALSE 15545
// begin hc_sex := sex_male ;
15438: LD_ADDR_OWVAR 27
15442: PUSH
15443: LD_INT 1
15445: ST_TO_ADDR
// uc_side := 0 ;
15446: LD_ADDR_OWVAR 20
15450: PUSH
15451: LD_INT 0
15453: ST_TO_ADDR
// uc_nation := nation_nature ;
15454: LD_ADDR_OWVAR 21
15458: PUSH
15459: LD_INT 0
15461: ST_TO_ADDR
// hc_class := class_apeman ;
15462: LD_ADDR_OWVAR 28
15466: PUSH
15467: LD_INT 12
15469: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
15470: LD_ADDR_OWVAR 31
15474: PUSH
15475: LD_INT 0
15477: PPUSH
15478: LD_INT 2
15480: PPUSH
15481: CALL_OW 12
15485: PUSH
15486: LD_INT 0
15488: PUSH
15489: LD_INT 0
15491: PUSH
15492: LD_INT 0
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: ST_TO_ADDR
// hc_agressivity = rand ( - 10 , 10 ) ;
15501: LD_ADDR_OWVAR 35
15505: PUSH
15506: LD_INT 10
15508: NEG
15509: PPUSH
15510: LD_INT 10
15512: PPUSH
15513: CALL_OW 12
15517: ST_TO_ADDR
// un := CreateHuman ;
15518: LD_ADDR_VAR 0 3
15522: PUSH
15523: CALL_OW 44
15527: ST_TO_ADDR
// PlaceUnitArea ( un , ApeNatureArea , false ) ;
15528: LD_VAR 0 3
15532: PPUSH
15533: LD_INT 26
15535: PPUSH
15536: LD_INT 0
15538: PPUSH
15539: CALL_OW 49
// end ;
15543: GO 15435
15545: POP
15546: POP
// end ; end_of_file
15547: LD_VAR 0 1
15551: RET
// on UnitDestroyed ( unit ) do var i ;
15552: LD_INT 0
15554: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
15555: LD_VAR 0 1
15559: PPUSH
15560: CALL 34870 0 1
// if unit = JMM then
15564: LD_VAR 0 1
15568: PUSH
15569: LD_EXP 1
15573: EQUAL
15574: IFFALSE 15583
// YouLost ( JMM ) ;
15576: LD_STRING JMM
15578: PPUSH
15579: CALL_OW 104
// if unit in russianTanks then
15583: LD_VAR 0 1
15587: PUSH
15588: LD_EXP 32
15592: IN
15593: IFFALSE 15611
// russianTanks := russianTanks diff unit ;
15595: LD_ADDR_EXP 32
15599: PUSH
15600: LD_EXP 32
15604: PUSH
15605: LD_VAR 0 1
15609: DIFF
15610: ST_TO_ADDR
// if unit in russianTimeLapsers then
15611: LD_VAR 0 1
15615: PUSH
15616: LD_EXP 33
15620: IN
15621: IFFALSE 15639
// russianTimeLapsers := russianTimeLapsers diff unit ;
15623: LD_ADDR_EXP 33
15627: PUSH
15628: LD_EXP 33
15632: PUSH
15633: LD_VAR 0 1
15637: DIFF
15638: ST_TO_ADDR
// if unit in RuScientists then
15639: LD_VAR 0 1
15643: PUSH
15644: LD_EXP 27
15648: IN
15649: IFFALSE 15681
// begin RuScientists := RuScientists diff unit ;
15651: LD_ADDR_EXP 27
15655: PUSH
15656: LD_EXP 27
15660: PUSH
15661: LD_VAR 0 1
15665: DIFF
15666: ST_TO_ADDR
// sciCounter := sciCounter + 1 ;
15667: LD_ADDR_EXP 28
15671: PUSH
15672: LD_EXP 28
15676: PUSH
15677: LD_INT 1
15679: PLUS
15680: ST_TO_ADDR
// end ; end ;
15681: PPOPN 2
15683: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_laser then
15684: LD_VAR 0 3
15688: PPUSH
15689: CALL_OW 264
15693: PUSH
15694: LD_INT 9
15696: EQUAL
15697: IFFALSE 15713
// laserCounterDestroy := laserCounterDestroy + 1 ;
15699: LD_ADDR_EXP 43
15703: PUSH
15704: LD_EXP 43
15708: PUSH
15709: LD_INT 1
15711: PLUS
15712: ST_TO_ADDR
// end ;
15713: PPOPN 3
15715: END
// on UnitTeleported ( building , human ) do begin if human in FilterAllUnits ( [ f_side , 6 ] ) then
15716: LD_VAR 0 2
15720: PUSH
15721: LD_INT 22
15723: PUSH
15724: LD_INT 6
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: PPUSH
15731: CALL_OW 69
15735: IN
15736: IFFALSE 15791
// begin if GetType ( human ) = unit_vehicle then
15738: LD_VAR 0 2
15742: PPUSH
15743: CALL_OW 247
15747: PUSH
15748: LD_INT 2
15750: EQUAL
15751: IFFALSE 15768
// human := IsDrivenBy ( human ) ;
15753: LD_ADDR_VAR 0 2
15757: PUSH
15758: LD_VAR 0 2
15762: PPUSH
15763: CALL_OW 311
15767: ST_TO_ADDR
// SetTag ( human , GetTag ( human ) + 10 ) ;
15768: LD_VAR 0 2
15772: PPUSH
15773: LD_VAR 0 2
15777: PPUSH
15778: CALL_OW 110
15782: PUSH
15783: LD_INT 10
15785: PLUS
15786: PPUSH
15787: CALL_OW 109
// end ; if GetSide ( human ) = 1 and eventVar1 = 0 then
15791: LD_VAR 0 2
15795: PPUSH
15796: CALL_OW 255
15800: PUSH
15801: LD_INT 1
15803: EQUAL
15804: PUSH
15805: LD_EXP 40
15809: PUSH
15810: LD_INT 0
15812: EQUAL
15813: AND
15814: IFFALSE 15926
// begin eventVar1 = 1 ;
15816: LD_ADDR_EXP 40
15820: PUSH
15821: LD_INT 1
15823: ST_TO_ADDR
// teleportExplored = 1 ;
15824: LD_ADDR_EXP 26
15828: PUSH
15829: LD_INT 1
15831: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
15832: LD_STRING M2a
15834: PPUSH
15835: CALL_OW 337
// wait ( 0 0$2 ) ;
15839: LD_INT 70
15841: PPUSH
15842: CALL_OW 67
// DialogueOn ;
15846: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
15850: LD_INT 22
15852: PUSH
15853: LD_INT 1
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: PUSH
15860: LD_INT 21
15862: PUSH
15863: LD_INT 1
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: PUSH
15870: EMPTY
15871: LIST
15872: LIST
15873: PPUSH
15874: CALL_OW 69
15878: PPUSH
15879: LD_STRING DT3a-Sol1-1
15881: PPUSH
15882: LD_STRING DT3a-FSol1-1
15884: PPUSH
15885: CALL 12273 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
15889: LD_EXP 1
15893: PPUSH
15894: LD_STRING DT3a-JMM-1
15896: PPUSH
15897: CALL_OW 88
// CenterNowOnUnits ( human ) ;
15901: LD_VAR 0 2
15905: PPUSH
15906: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
15910: LD_EXP 1
15914: PPUSH
15915: LD_STRING DT3a-JMM-1a
15917: PPUSH
15918: CALL_OW 88
// DialogueOff ;
15922: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
15926: LD_VAR 0 1
15930: PUSH
15931: LD_INT 10
15933: EQUAL
15934: PUSH
15935: LD_VAR 0 2
15939: PPUSH
15940: CALL_OW 247
15944: PUSH
15945: LD_INT 2
15947: EQUAL
15948: AND
15949: PUSH
15950: LD_VAR 0 2
15954: PPUSH
15955: CALL_OW 255
15959: PUSH
15960: LD_INT 3
15962: EQUAL
15963: AND
15964: IFFALSE 16030
// begin if vehicleTeleported = 0 then
15966: LD_EXP 21
15970: PUSH
15971: LD_INT 0
15973: EQUAL
15974: IFFALSE 15991
// begin wait ( 0 0$03 ) ;
15976: LD_INT 105
15978: PPUSH
15979: CALL_OW 67
// vehicleTeleported := 1 ;
15983: LD_ADDR_EXP 21
15987: PUSH
15988: LD_INT 1
15990: ST_TO_ADDR
// end ; if vehicleTeleported = 2 then
15991: LD_EXP 21
15995: PUSH
15996: LD_INT 2
15998: EQUAL
15999: IFFALSE 16016
// begin wait ( 0 0$03 ) ;
16001: LD_INT 105
16003: PPUSH
16004: CALL_OW 67
// vehicleTeleported := 3 ;
16008: LD_ADDR_EXP 21
16012: PUSH
16013: LD_INT 3
16015: ST_TO_ADDR
// end ; tpCounter := tpCounter + 1 ;
16016: LD_ADDR_EXP 22
16020: PUSH
16021: LD_EXP 22
16025: PUSH
16026: LD_INT 1
16028: PLUS
16029: ST_TO_ADDR
// end ; end ;
16030: PPOPN 2
16032: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
16033: LD_VAR 0 1
16037: PPUSH
16038: LD_VAR 0 2
16042: PPUSH
16043: CALL 34990 0 2
// if GetWeapon ( vehicle ) = us_rocket_launcher then
16047: LD_VAR 0 1
16051: PPUSH
16052: CALL_OW 264
16056: PUSH
16057: LD_INT 7
16059: EQUAL
16060: IFFALSE 16070
// rocketBuilded := true ;
16062: LD_ADDR_EXP 44
16066: PUSH
16067: LD_INT 1
16069: ST_TO_ADDR
// if GetSide ( vehicle ) <> 3 then
16070: LD_VAR 0 1
16074: PPUSH
16075: CALL_OW 255
16079: PUSH
16080: LD_INT 3
16082: NONEQUAL
16083: IFFALSE 16087
// exit ;
16085: GO 16204
// if factory in [ ru_fact , rufab2 ] then
16087: LD_VAR 0 2
16091: PUSH
16092: LD_INT 21
16094: PUSH
16095: LD_INT 112
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: IN
16102: IFFALSE 16204
// begin if GetWeapon ( vehicle ) = ru_time_lapser then
16104: LD_VAR 0 1
16108: PPUSH
16109: CALL_OW 264
16113: PUSH
16114: LD_INT 49
16116: EQUAL
16117: IFFALSE 16153
// begin russianTimeLapsers := Join ( russianTimeLapsers , vehicle ) ;
16119: LD_ADDR_EXP 33
16123: PUSH
16124: LD_EXP 33
16128: PPUSH
16129: LD_VAR 0 1
16133: PPUSH
16134: CALL 77455 0 2
16138: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
16139: LD_VAR 0 1
16143: PPUSH
16144: LD_INT 137
16146: PPUSH
16147: CALL_OW 120
// end else
16151: GO 16204
// if not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_big_cargo_bay , ru_crane , ru_bulldozer ] then
16153: LD_VAR 0 1
16157: PPUSH
16158: CALL_OW 264
16162: PUSH
16163: LD_INT 51
16165: PUSH
16166: LD_INT 89
16168: PUSH
16169: LD_INT 52
16171: PUSH
16172: LD_INT 53
16174: PUSH
16175: EMPTY
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: IN
16181: NOT
16182: IFFALSE 16204
// begin russianTanks := Join ( russianTanks , vehicle ) ;
16184: LD_ADDR_EXP 32
16188: PUSH
16189: LD_EXP 32
16193: PPUSH
16194: LD_VAR 0 1
16198: PPUSH
16199: CALL 77455 0 2
16203: ST_TO_ADDR
// end ; end ; end ;
16204: PPOPN 2
16206: END
// on LeaveVehicle ( vehicle , human ) do var i ;
16207: LD_INT 0
16209: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
16210: LD_VAR 0 2
16214: PPUSH
16215: CALL_OW 255
16219: PUSH
16220: LD_INT 3
16222: EQUAL
16223: PUSH
16224: LD_VAR 0 2
16228: PPUSH
16229: CALL_OW 257
16233: PUSH
16234: LD_INT 3
16236: EQUAL
16237: AND
16238: PUSH
16239: LD_INT 21
16241: PPUSH
16242: CALL_OW 255
16246: PUSH
16247: LD_INT 3
16249: EQUAL
16250: AND
16251: PUSH
16252: LD_INT 21
16254: PPUSH
16255: CALL_OW 302
16259: AND
16260: IFFALSE 16274
// ComEnterUnit ( human , ru_fact ) ;
16262: LD_VAR 0 2
16266: PPUSH
16267: LD_INT 21
16269: PPUSH
16270: CALL_OW 120
// end ;
16274: PPOPN 3
16276: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16277: LD_VAR 0 1
16281: PPUSH
16282: CALL 34974 0 1
// end ; end_of_file
16286: PPOPN 1
16288: END
// every 0 0$1 trigger ruAI = 1 do
16289: LD_EXP 34
16293: PUSH
16294: LD_INT 1
16296: EQUAL
16297: IFFALSE 16409
16299: GO 16301
16301: DISABLE
// begin enable ;
16302: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
16303: LD_INT 3
16305: PPUSH
16306: LD_INT 6
16308: PPUSH
16309: LD_INT 9
16311: PPUSH
16312: LD_EXP 31
16316: PPUSH
16317: CALL 13123 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
16321: LD_INT 3
16323: PPUSH
16324: LD_INT 4
16326: PPUSH
16327: LD_INT 10
16329: PPUSH
16330: LD_EXP 31
16334: PPUSH
16335: CALL 13123 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
16339: LD_INT 3
16341: PPUSH
16342: LD_INT 9
16344: PPUSH
16345: CALL 13958 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
16349: LD_INT 3
16351: PPUSH
16352: LD_INT 10
16354: PPUSH
16355: CALL 13958 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
16359: LD_INT 3
16361: PPUSH
16362: LD_INT 16
16364: PPUSH
16365: LD_INT 9
16367: PPUSH
16368: LD_INT 91
16370: PPUSH
16371: CALL 13490 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
16375: LD_INT 3
16377: PPUSH
16378: LD_INT 17
16380: PPUSH
16381: LD_INT 10
16383: PPUSH
16384: LD_INT 47
16386: PUSH
16387: LD_INT 129
16389: PUSH
16390: LD_INT 135
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: LIST
16397: PPUSH
16398: CALL 13490 0 4
// IntBazooka ( 3 ) ;
16402: LD_INT 3
16404: PPUSH
16405: CALL 14285 0 1
// end ;
16409: END
// every 0 0$50 trigger russianTanks >= [ 3 , 4 , 5 , 6 ] [ Difficulty ] do var i , tmp , p , path ;
16410: LD_EXP 32
16414: PUSH
16415: LD_INT 3
16417: PUSH
16418: LD_INT 4
16420: PUSH
16421: LD_INT 5
16423: PUSH
16424: LD_INT 6
16426: PUSH
16427: EMPTY
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: PUSH
16433: LD_OWVAR 67
16437: ARRAY
16438: GREATEREQUAL
16439: IFFALSE 16811
16441: GO 16443
16443: DISABLE
16444: LD_INT 0
16446: PPUSH
16447: PPUSH
16448: PPUSH
16449: PPUSH
// begin enable ;
16450: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
16451: LD_ADDR_VAR 0 2
16455: PUSH
16456: LD_EXP 32
16460: PUSH
16461: LD_EXP 33
16465: UNION
16466: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
16467: LD_ADDR_EXP 32
16471: PUSH
16472: LD_EXP 32
16476: PUSH
16477: LD_VAR 0 2
16481: DIFF
16482: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
16483: LD_ADDR_EXP 33
16487: PUSH
16488: LD_EXP 33
16492: PUSH
16493: LD_VAR 0 2
16497: DIFF
16498: ST_TO_ADDR
// if vehicleTeleported >= 4 then
16499: LD_EXP 21
16503: PUSH
16504: LD_INT 4
16506: GREATEREQUAL
16507: IFFALSE 16525
// attackTactic := rand ( 1 , 2 ) ;
16509: LD_ADDR_EXP 36
16513: PUSH
16514: LD_INT 1
16516: PPUSH
16517: LD_INT 2
16519: PPUSH
16520: CALL_OW 12
16524: ST_TO_ADDR
// path := [ [ 93 , 77 ] , [ 107 , 99 ] , [ 123 , 112 ] , [ 140 , 112 ] ] ;
16525: LD_ADDR_VAR 0 4
16529: PUSH
16530: LD_INT 93
16532: PUSH
16533: LD_INT 77
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: PUSH
16540: LD_INT 107
16542: PUSH
16543: LD_INT 99
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PUSH
16550: LD_INT 123
16552: PUSH
16553: LD_INT 112
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: PUSH
16560: LD_INT 140
16562: PUSH
16563: LD_INT 112
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: PUSH
16570: EMPTY
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: ST_TO_ADDR
// if attackTactic < 2 then
16576: LD_EXP 36
16580: PUSH
16581: LD_INT 2
16583: LESS
16584: IFFALSE 16615
// path := [ [ 131 , 136 ] , [ 140 , 112 ] ] ;
16586: LD_ADDR_VAR 0 4
16590: PUSH
16591: LD_INT 131
16593: PUSH
16594: LD_INT 136
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: PUSH
16601: LD_INT 140
16603: PUSH
16604: LD_INT 112
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: ST_TO_ADDR
// if IsOk ( ruteleprt ) then
16615: LD_INT 10
16617: PPUSH
16618: CALL_OW 302
16622: IFFALSE 16738
// begin for i in tmp do
16624: LD_ADDR_VAR 0 1
16628: PUSH
16629: LD_VAR 0 2
16633: PUSH
16634: FOR_IN
16635: IFFALSE 16678
// if attackTactic < 2 then
16637: LD_EXP 36
16641: PUSH
16642: LD_INT 2
16644: LESS
16645: IFFALSE 16661
// ComEnterUnit ( i , ruteleprt ) else
16647: LD_VAR 0 1
16651: PPUSH
16652: LD_INT 10
16654: PPUSH
16655: CALL_OW 120
16659: GO 16676
// ComMoveXY ( i , 88 , 69 ) ;
16661: LD_VAR 0 1
16665: PPUSH
16666: LD_INT 88
16668: PPUSH
16669: LD_INT 69
16671: PPUSH
16672: CALL_OW 111
16676: GO 16634
16678: POP
16679: POP
// p := 0 ;
16680: LD_ADDR_VAR 0 3
16684: PUSH
16685: LD_INT 0
16687: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
16688: LD_INT 70
16690: PPUSH
16691: CALL_OW 67
// p := Inc ( p ) ;
16695: LD_ADDR_VAR 0 3
16699: PUSH
16700: LD_VAR 0 3
16704: PPUSH
16705: CALL 78816 0 1
16709: ST_TO_ADDR
// until not UnitFilter ( tmp , [ f_hastask ] ) or p > 30 ;
16710: LD_VAR 0 2
16714: PPUSH
16715: LD_INT 60
16717: PUSH
16718: EMPTY
16719: LIST
16720: PPUSH
16721: CALL_OW 72
16725: NOT
16726: PUSH
16727: LD_VAR 0 3
16731: PUSH
16732: LD_INT 30
16734: GREATER
16735: OR
16736: IFFALSE 16688
// end ; repeat wait ( 0 0$1 ) ;
16738: LD_INT 35
16740: PPUSH
16741: CALL_OW 67
// for i in tmp do
16745: LD_ADDR_VAR 0 1
16749: PUSH
16750: LD_VAR 0 2
16754: PUSH
16755: FOR_IN
16756: IFFALSE 16788
// if not IsOk ( i ) then
16758: LD_VAR 0 1
16762: PPUSH
16763: CALL_OW 302
16767: NOT
16768: IFFALSE 16786
// tmp := tmp diff i ;
16770: LD_ADDR_VAR 0 2
16774: PUSH
16775: LD_VAR 0 2
16779: PUSH
16780: LD_VAR 0 1
16784: DIFF
16785: ST_TO_ADDR
16786: GO 16755
16788: POP
16789: POP
// AgressiveMove ( tmp , path ) ;
16790: LD_VAR 0 2
16794: PPUSH
16795: LD_VAR 0 4
16799: PPUSH
16800: CALL 80059 0 2
// until not tmp ;
16804: LD_VAR 0 2
16808: NOT
16809: IFFALSE 16738
// end ;
16811: PPOPN 4
16813: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
16814: LD_INT 4
16816: PPUSH
16817: CALL_OW 303
16821: IFFALSE 16836
16823: GO 16825
16825: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
16826: LD_INT 3
16828: PPUSH
16829: LD_INT 4
16831: PPUSH
16832: CALL 14913 0 2
16836: END
// every 0 0$1 do
16837: GO 16839
16839: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
16840: LD_INT 3
16842: PPUSH
16843: LD_INT 91
16845: PPUSH
16846: LD_INT 3
16848: PPUSH
16849: CALL 12888 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
16853: LD_INT 3
16855: PPUSH
16856: LD_INT 47
16858: PPUSH
16859: LD_INT 3
16861: PPUSH
16862: CALL 12888 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
16866: LD_INT 3
16868: PPUSH
16869: LD_INT 129
16871: PPUSH
16872: LD_INT 3
16874: PPUSH
16875: CALL 12888 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
16879: LD_INT 3
16881: PPUSH
16882: LD_INT 3
16884: PPUSH
16885: LD_INT 3
16887: PPUSH
16888: CALL 12888 0 3
// end ;
16892: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
16893: LD_INT 22
16895: PUSH
16896: LD_INT 1
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: PUSH
16903: LD_INT 21
16905: PUSH
16906: LD_INT 3
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: PPUSH
16917: CALL_OW 69
16921: IFFALSE 16990
16923: GO 16925
16925: DISABLE
// begin wait ( 0 0$40 ) ;
16926: LD_INT 1400
16928: PPUSH
16929: CALL_OW 67
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
16933: LD_INT 3
16935: PPUSH
16936: LD_INT 21
16938: PPUSH
16939: LD_INT 3
16941: PUSH
16942: LD_INT 4
16944: PUSH
16945: LD_INT 5
16947: PUSH
16948: LD_INT 6
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: PUSH
16957: LD_OWVAR 67
16961: ARRAY
16962: PPUSH
16963: LD_INT 46
16965: PUSH
16966: LD_INT 45
16968: PUSH
16969: LD_INT 44
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: LIST
16976: PPUSH
16977: LD_INT 3
16979: PPUSH
16980: LD_INT 3
16982: PPUSH
16983: LD_INT 24
16985: PPUSH
16986: CALL 14138 0 7
// end ;
16990: END
// every 6 6$0 + 2 2$00 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
16991: LD_EXP 20
16995: PUSH
16996: LD_INT 2
16998: EQUAL
16999: PUSH
17000: LD_INT 21
17002: PPUSH
17003: CALL_OW 255
17007: PUSH
17008: LD_INT 3
17010: EQUAL
17011: AND
17012: PUSH
17013: LD_INT 112
17015: PPUSH
17016: CALL_OW 255
17020: PUSH
17021: LD_INT 3
17023: EQUAL
17024: AND
17025: PUSH
17026: LD_INT 21
17028: PPUSH
17029: CALL_OW 302
17033: AND
17034: PUSH
17035: LD_INT 112
17037: PPUSH
17038: CALL_OW 302
17042: AND
17043: PUSH
17044: LD_INT 22
17046: PUSH
17047: LD_INT 3
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: PUSH
17054: LD_INT 21
17056: PUSH
17057: LD_INT 2
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PUSH
17064: LD_INT 50
17066: PUSH
17067: EMPTY
17068: LIST
17069: PUSH
17070: LD_INT 3
17072: PUSH
17073: LD_INT 58
17075: PUSH
17076: EMPTY
17077: LIST
17078: PUSH
17079: EMPTY
17080: LIST
17081: LIST
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: LIST
17087: LIST
17088: PPUSH
17089: CALL_OW 69
17093: PUSH
17094: LD_INT 18
17096: PPUSH
17097: LD_INT 22
17099: PUSH
17100: LD_INT 3
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: PUSH
17107: LD_INT 21
17109: PUSH
17110: LD_INT 2
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: PPUSH
17121: CALL_OW 70
17125: PUSH
17126: LD_INT 0
17128: EQUAL
17129: DIFF
17130: AND
17131: IFFALSE 17257
17133: GO 17135
17135: DISABLE
// begin enable ;
17136: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17137: LD_INT 3
17139: PPUSH
17140: LD_INT 21
17142: PPUSH
17143: LD_INT 3
17145: PUSH
17146: LD_INT 4
17148: PUSH
17149: LD_INT 5
17151: PUSH
17152: LD_INT 6
17154: PUSH
17155: EMPTY
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: PUSH
17161: LD_OWVAR 67
17165: ARRAY
17166: PPUSH
17167: LD_INT 46
17169: PUSH
17170: LD_INT 45
17172: PUSH
17173: LD_INT 44
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: LIST
17180: PPUSH
17181: LD_INT 3
17183: PPUSH
17184: LD_INT 3
17186: PPUSH
17187: LD_INT 24
17189: PPUSH
17190: CALL 14138 0 7
// if russianTimeLapsers = 0 then
17194: LD_EXP 33
17198: PUSH
17199: LD_INT 0
17201: EQUAL
17202: IFFALSE 17257
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
17204: LD_INT 3
17206: PPUSH
17207: LD_INT 112
17209: PPUSH
17210: LD_INT 1
17212: PUSH
17213: LD_INT 2
17215: PUSH
17216: LD_INT 2
17218: PUSH
17219: LD_INT 2
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: PUSH
17228: LD_OWVAR 67
17232: ARRAY
17233: PPUSH
17234: LD_INT 49
17236: PUSH
17237: LD_INT 49
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PPUSH
17244: LD_INT 3
17246: PPUSH
17247: LD_INT 3
17249: PPUSH
17250: LD_INT 24
17252: PPUSH
17253: CALL 14138 0 7
// end ;
17257: END
// every 0 0$1 trigger arabianMines do var i ;
17258: LD_EXP 37
17262: IFFALSE 17383
17264: GO 17266
17266: DISABLE
17267: LD_INT 0
17269: PPUSH
// begin enable ;
17270: ENABLE
// for i in arabianMines do
17271: LD_ADDR_VAR 0 1
17275: PUSH
17276: LD_EXP 37
17280: PUSH
17281: FOR_IN
17282: IFFALSE 17381
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
17284: LD_INT 22
17286: PUSH
17287: LD_INT 1
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: PUSH
17294: LD_INT 92
17296: PUSH
17297: LD_VAR 0 1
17301: PUSH
17302: LD_INT 1
17304: ARRAY
17305: PUSH
17306: LD_VAR 0 1
17310: PUSH
17311: LD_INT 2
17313: ARRAY
17314: PUSH
17315: LD_INT 3
17317: PUSH
17318: EMPTY
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: PPUSH
17328: CALL_OW 69
17332: IFFALSE 17379
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
17334: LD_VAR 0 1
17338: PUSH
17339: LD_INT 1
17341: ARRAY
17342: PPUSH
17343: LD_VAR 0 1
17347: PUSH
17348: LD_INT 2
17350: ARRAY
17351: PPUSH
17352: LD_INT 5
17354: PPUSH
17355: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
17359: LD_ADDR_EXP 37
17363: PUSH
17364: LD_EXP 37
17368: PPUSH
17369: LD_VAR 0 1
17373: PPUSH
17374: CALL_OW 3
17378: ST_TO_ADDR
// end ; end ;
17379: GO 17281
17381: POP
17382: POP
// end ;
17383: PPOPN 1
17385: END
// every 0 0$10 trigger vehicleTeleported >= 4 and tpCounter mod 12 = 0 do var i , hexes ;
17386: LD_EXP 21
17390: PUSH
17391: LD_INT 4
17393: GREATEREQUAL
17394: PUSH
17395: LD_EXP 22
17399: PUSH
17400: LD_INT 12
17402: MOD
17403: PUSH
17404: LD_INT 0
17406: EQUAL
17407: AND
17408: IFFALSE 17522
17410: GO 17412
17412: DISABLE
17413: LD_INT 0
17415: PPUSH
17416: PPUSH
// begin enable ;
17417: ENABLE
// hexes := [ [ 122 , 142 ] , [ 101 , 127 ] , [ 104 , 104 ] , [ 46 , 81 ] ] ;
17418: LD_ADDR_VAR 0 2
17422: PUSH
17423: LD_INT 122
17425: PUSH
17426: LD_INT 142
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: PUSH
17433: LD_INT 101
17435: PUSH
17436: LD_INT 127
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: PUSH
17443: LD_INT 104
17445: PUSH
17446: LD_INT 104
17448: PUSH
17449: EMPTY
17450: LIST
17451: LIST
17452: PUSH
17453: LD_INT 46
17455: PUSH
17456: LD_INT 81
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: PUSH
17463: EMPTY
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: ST_TO_ADDR
// i := rand ( 1 , 4 ) ;
17469: LD_ADDR_VAR 0 1
17473: PUSH
17474: LD_INT 1
17476: PPUSH
17477: LD_INT 4
17479: PPUSH
17480: CALL_OW 12
17484: ST_TO_ADDR
// TeleportExit ( ruteleprt , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17485: LD_INT 10
17487: PPUSH
17488: LD_VAR 0 2
17492: PUSH
17493: LD_VAR 0 1
17497: ARRAY
17498: PUSH
17499: LD_INT 1
17501: ARRAY
17502: PPUSH
17503: LD_VAR 0 2
17507: PUSH
17508: LD_VAR 0 1
17512: ARRAY
17513: PUSH
17514: LD_INT 2
17516: ARRAY
17517: PPUSH
17518: CALL_OW 243
// end ; end_of_file
17522: PPOPN 2
17524: END
// every 0 0$1 trigger IsDead ( ruheadlab ) do
17525: LD_INT 3
17527: PPUSH
17528: CALL_OW 301
17532: IFFALSE 17753
17534: GO 17536
17536: DISABLE
// begin if UnitFilter ( RuScientists , [ f_ok ] ) then
17537: LD_EXP 27
17541: PPUSH
17542: LD_INT 50
17544: PUSH
17545: EMPTY
17546: LIST
17547: PPUSH
17548: CALL_OW 72
17552: IFFALSE 17561
// wait ( 0 0$10 ) ;
17554: LD_INT 350
17556: PPUSH
17557: CALL_OW 67
// DialogueOn ;
17561: CALL_OW 6
// if sciCounter = 0 then
17565: LD_EXP 28
17569: PUSH
17570: LD_INT 0
17572: EQUAL
17573: IFFALSE 17601
// begin Say ( JMM , D7a-JMM-1 ) ;
17575: LD_EXP 1
17579: PPUSH
17580: LD_STRING D7a-JMM-1
17582: PPUSH
17583: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
17587: LD_EXP 15
17591: PPUSH
17592: LD_STRING D7a-Pow-1
17594: PPUSH
17595: CALL_OW 94
// end else
17599: GO 17745
// if sciCounter < 6 then
17601: LD_EXP 28
17605: PUSH
17606: LD_INT 6
17608: LESS
17609: IFFALSE 17637
// begin Say ( JMM , D7b-JMM-1 ) ;
17611: LD_EXP 1
17615: PPUSH
17616: LD_STRING D7b-JMM-1
17618: PPUSH
17619: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
17623: LD_EXP 15
17627: PPUSH
17628: LD_STRING D7b-Pow-1
17630: PPUSH
17631: CALL_OW 94
// end else
17635: GO 17745
// begin Say ( JMM , D7c-JMM-1 ) ;
17637: LD_EXP 1
17641: PPUSH
17642: LD_STRING D7c-JMM-1
17644: PPUSH
17645: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
17649: LD_EXP 15
17653: PPUSH
17654: LD_STRING D7c-Pow-1
17656: PPUSH
17657: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
17661: LD_EXP 1
17665: PPUSH
17666: LD_STRING D7d-JMM-1
17668: PPUSH
17669: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
17673: LD_EXP 15
17677: PPUSH
17678: LD_STRING D7d-Pow-1
17680: PPUSH
17681: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
17685: LD_EXP 1
17689: PPUSH
17690: LD_STRING D7d-JMM-2
17692: PPUSH
17693: CALL_OW 88
// if askSiberite = 1 then
17697: LD_EXP 25
17701: PUSH
17702: LD_INT 1
17704: EQUAL
17705: IFFALSE 17721
// Say ( JMM , D7d-JMM-2a ) else
17707: LD_EXP 1
17711: PPUSH
17712: LD_STRING D7d-JMM-2a
17714: PPUSH
17715: CALL_OW 88
17719: GO 17733
// SayRadio ( Powell , D7d-Pow-2 ) ;
17721: LD_EXP 15
17725: PPUSH
17726: LD_STRING D7d-Pow-2
17728: PPUSH
17729: CALL_OW 94
// SayRadio ( Powell , D7d-Pow-2a ) ;
17733: LD_EXP 15
17737: PPUSH
17738: LD_STRING D7d-Pow-2a
17740: PPUSH
17741: CALL_OW 94
// end ; DialogueOff ;
17745: CALL_OW 7
// FinishMission ;
17749: CALL 17754 0 0
// end ;
17753: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
17754: LD_INT 0
17756: PPUSH
17757: PPUSH
17758: PPUSH
17759: PPUSH
// m1 := false ;
17760: LD_ADDR_VAR 0 2
17764: PUSH
17765: LD_INT 0
17767: ST_TO_ADDR
// m2 := false ;
17768: LD_ADDR_VAR 0 3
17772: PUSH
17773: LD_INT 0
17775: ST_TO_ADDR
// m3 := false ;
17776: LD_ADDR_VAR 0 4
17780: PUSH
17781: LD_INT 0
17783: ST_TO_ADDR
// if not westPathUsed then
17784: LD_EXP 42
17788: NOT
17789: IFFALSE 17798
// SetAchievement ( ACH_PATH ) ;
17791: LD_STRING ACH_PATH
17793: PPUSH
17794: CALL_OW 543
// if not rocketBuilded then
17798: LD_EXP 44
17802: NOT
17803: IFFALSE 17819
// begin wait ( 3 ) ;
17805: LD_INT 3
17807: PPUSH
17808: CALL_OW 67
// SetAchievement ( ACH_ROCKET ) ;
17812: LD_STRING ACH_ROCKET
17814: PPUSH
17815: CALL_OW 543
// end ; if tick <= 40 40$00 then
17819: LD_OWVAR 1
17823: PUSH
17824: LD_INT 84000
17826: LESSEQUAL
17827: IFFALSE 17843
// begin wait ( 3 ) ;
17829: LD_INT 3
17831: PPUSH
17832: CALL_OW 67
// SetAchievement ( ACH_ASPEED_12 ) ;
17836: LD_STRING ACH_ASPEED_12
17838: PPUSH
17839: CALL_OW 543
// end ; if teleportExplored = 1 then
17843: LD_EXP 26
17847: PUSH
17848: LD_INT 1
17850: EQUAL
17851: IFFALSE 17873
// begin m1 := true ;
17853: LD_ADDR_VAR 0 2
17857: PUSH
17858: LD_INT 1
17860: ST_TO_ADDR
// AddMedal ( Teleport , 1 ) ;
17861: LD_STRING Teleport
17863: PPUSH
17864: LD_INT 1
17866: PPUSH
17867: CALL_OW 101
// end else
17871: GO 17884
// AddMedal ( Teleport , - 1 ) ;
17873: LD_STRING Teleport
17875: PPUSH
17876: LD_INT 1
17878: NEG
17879: PPUSH
17880: CALL_OW 101
// if sciCounter > 2 then
17884: LD_EXP 28
17888: PUSH
17889: LD_INT 2
17891: GREATER
17892: IFFALSE 17914
// begin m2 := true ;
17894: LD_ADDR_VAR 0 3
17898: PUSH
17899: LD_INT 1
17901: ST_TO_ADDR
// AddMedal ( Materials , 1 ) ;
17902: LD_STRING Materials
17904: PPUSH
17905: LD_INT 1
17907: PPUSH
17908: CALL_OW 101
// end else
17912: GO 17925
// AddMedal ( Materials , - 1 ) ;
17914: LD_STRING Materials
17916: PPUSH
17917: LD_INT 1
17919: NEG
17920: PPUSH
17921: CALL_OW 101
// if sciCounter >= 6 then
17925: LD_EXP 28
17929: PUSH
17930: LD_INT 6
17932: GREATEREQUAL
17933: IFFALSE 17965
// begin m3 := true ;
17935: LD_ADDR_VAR 0 4
17939: PUSH
17940: LD_INT 1
17942: ST_TO_ADDR
// AddMedal ( Scientists , 1 ) ;
17943: LD_STRING Scientists
17945: PPUSH
17946: LD_INT 1
17948: PPUSH
17949: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
17953: LD_INT 1
17955: PPUSH
17956: LD_STRING 12_SciDed_1
17958: PPUSH
17959: CALL_OW 39
// end else
17963: GO 17986
// begin AddMedal ( Scientists , - 1 ) ;
17965: LD_STRING Scientists
17967: PPUSH
17968: LD_INT 1
17970: NEG
17971: PPUSH
17972: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
17976: LD_INT 0
17978: PPUSH
17979: LD_STRING 12_SciDed_1
17981: PPUSH
17982: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
17986: LD_EXP 24
17990: PPUSH
17991: LD_STRING 12_MainDepositFake_1
17993: PPUSH
17994: CALL_OW 39
// if m1 and m2 and m3 and Difficulty >= 3 then
17998: LD_VAR 0 2
18002: PUSH
18003: LD_VAR 0 3
18007: AND
18008: PUSH
18009: LD_VAR 0 4
18013: AND
18014: PUSH
18015: LD_OWVAR 67
18019: PUSH
18020: LD_INT 3
18022: GREATEREQUAL
18023: AND
18024: IFFALSE 18036
// SetAchievementEX ( ACH_AMER , 12 ) ;
18026: LD_STRING ACH_AMER
18028: PPUSH
18029: LD_INT 12
18031: PPUSH
18032: CALL_OW 564
// GiveMedals ( MAIN ) ;
18036: LD_STRING MAIN
18038: PPUSH
18039: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
18043: LD_INT 22
18045: PUSH
18046: LD_INT 1
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: PUSH
18053: LD_INT 23
18055: PUSH
18056: LD_INT 1
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: PUSH
18063: LD_INT 21
18065: PUSH
18066: LD_INT 1
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 2
18075: PUSH
18076: LD_INT 25
18078: PUSH
18079: LD_INT 1
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PUSH
18086: LD_INT 25
18088: PUSH
18089: LD_INT 2
18091: PUSH
18092: EMPTY
18093: LIST
18094: LIST
18095: PUSH
18096: LD_INT 25
18098: PUSH
18099: LD_INT 3
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: PUSH
18106: LD_INT 25
18108: PUSH
18109: LD_INT 4
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PUSH
18116: LD_INT 25
18118: PUSH
18119: LD_INT 5
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: PUSH
18126: LD_INT 25
18128: PUSH
18129: LD_INT 8
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: PPUSH
18151: CALL_OW 69
18155: PPUSH
18156: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18160: LD_EXP 1
18164: PPUSH
18165: LD_EXP 39
18169: PUSH
18170: LD_STRING JMM
18172: STR
18173: PPUSH
18174: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18178: LD_EXP 7
18182: PPUSH
18183: LD_EXP 39
18187: PUSH
18188: LD_STRING Brown
18190: STR
18191: PPUSH
18192: CALL 12233 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18196: LD_EXP 3
18200: PPUSH
18201: LD_EXP 39
18205: PUSH
18206: LD_STRING Donaldson
18208: STR
18209: PPUSH
18210: CALL 12233 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18214: LD_EXP 4
18218: PPUSH
18219: LD_EXP 39
18223: PUSH
18224: LD_STRING Bobby
18226: STR
18227: PPUSH
18228: CALL 12233 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18232: LD_EXP 5
18236: PPUSH
18237: LD_EXP 39
18241: PUSH
18242: LD_STRING Cyrus
18244: STR
18245: PPUSH
18246: CALL 12233 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18250: LD_EXP 2
18254: PPUSH
18255: LD_EXP 39
18259: PUSH
18260: LD_STRING Lisa
18262: STR
18263: PPUSH
18264: CALL 12233 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18268: LD_EXP 12
18272: PPUSH
18273: LD_EXP 39
18277: PUSH
18278: LD_STRING Frank
18280: STR
18281: PPUSH
18282: CALL 12233 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
18286: LD_EXP 13
18290: PPUSH
18291: LD_EXP 39
18295: PUSH
18296: LD_STRING Kikuchi
18298: STR
18299: PPUSH
18300: CALL 12233 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
18304: LD_EXP 9
18308: PPUSH
18309: LD_EXP 39
18313: PUSH
18314: LD_STRING Houten
18316: STR
18317: PPUSH
18318: CALL 12233 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
18322: LD_EXP 11
18326: PPUSH
18327: LD_EXP 39
18331: PUSH
18332: LD_STRING Gary
18334: STR
18335: PPUSH
18336: CALL 12233 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
18340: LD_EXP 10
18344: PPUSH
18345: LD_EXP 39
18349: PUSH
18350: LD_STRING Cornell
18352: STR
18353: PPUSH
18354: CALL 12233 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18358: LD_EXP 6
18362: PPUSH
18363: LD_EXP 39
18367: PUSH
18368: LD_STRING Denis
18370: STR
18371: PPUSH
18372: CALL 12233 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18376: LD_EXP 8
18380: PPUSH
18381: LD_EXP 39
18385: PUSH
18386: LD_STRING Gladstone
18388: STR
18389: PPUSH
18390: CALL 12233 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
18394: LD_INT 22
18396: PUSH
18397: LD_INT 1
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: PUSH
18404: LD_INT 23
18406: PUSH
18407: LD_INT 1
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: PUSH
18414: LD_INT 21
18416: PUSH
18417: LD_INT 1
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: LD_INT 2
18426: PUSH
18427: LD_INT 25
18429: PUSH
18430: LD_INT 1
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: PUSH
18437: LD_INT 25
18439: PUSH
18440: LD_INT 2
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: PUSH
18447: LD_INT 25
18449: PUSH
18450: LD_INT 3
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: LD_INT 25
18459: PUSH
18460: LD_INT 4
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PUSH
18467: LD_INT 25
18469: PUSH
18470: LD_INT 5
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: PUSH
18477: LD_INT 25
18479: PUSH
18480: LD_INT 8
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: PPUSH
18502: CALL_OW 69
18506: PUSH
18507: LD_EXP 1
18511: PUSH
18512: LD_EXP 7
18516: PUSH
18517: LD_EXP 3
18521: PUSH
18522: LD_EXP 4
18526: PUSH
18527: LD_EXP 5
18531: PUSH
18532: LD_EXP 2
18536: PUSH
18537: LD_EXP 12
18541: PUSH
18542: LD_EXP 8
18546: PUSH
18547: LD_EXP 13
18551: PUSH
18552: LD_EXP 6
18556: PUSH
18557: LD_EXP 9
18561: PUSH
18562: LD_EXP 11
18566: PUSH
18567: LD_EXP 10
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: DIFF
18587: PPUSH
18588: LD_STRING 12_other_survivors
18590: PPUSH
18591: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
18595: LD_INT 22
18597: PUSH
18598: LD_INT 1
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: LD_INT 23
18607: PUSH
18608: LD_INT 2
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: PUSH
18615: LD_INT 21
18617: PUSH
18618: LD_INT 1
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: PUSH
18625: LD_INT 2
18627: PUSH
18628: LD_INT 25
18630: PUSH
18631: LD_INT 1
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: PUSH
18638: LD_INT 25
18640: PUSH
18641: LD_INT 2
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: PUSH
18648: LD_INT 25
18650: PUSH
18651: LD_INT 3
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: PUSH
18658: LD_INT 25
18660: PUSH
18661: LD_INT 4
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PUSH
18668: LD_INT 25
18670: PUSH
18671: LD_INT 5
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PUSH
18678: LD_INT 25
18680: PUSH
18681: LD_INT 8
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: PPUSH
18703: CALL_OW 69
18707: PPUSH
18708: LD_STRING 12_kurt_squad
18710: PPUSH
18711: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
18715: LD_EXP 14
18719: PPUSH
18720: LD_STRING 12_others
18722: PPUSH
18723: CALL_OW 38
// YouWin ;
18727: CALL_OW 103
// end ; end_of_file
18731: LD_VAR 0 1
18735: RET
// every 0 0$01 trigger ruAI do
18736: LD_EXP 34
18740: IFFALSE 19050
18742: GO 18744
18744: DISABLE
// begin repeat wait ( 0 0$08 ) ;
18745: LD_INT 280
18747: PPUSH
18748: CALL_OW 67
// if cratesSpawned < 12 then
18752: LD_EXP 38
18756: PUSH
18757: LD_INT 12
18759: LESS
18760: IFFALSE 18812
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
18762: LD_INT 105
18764: PPUSH
18765: LD_INT 350
18767: PPUSH
18768: CALL_OW 12
18772: PPUSH
18773: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18777: LD_INT 3
18779: PPUSH
18780: LD_INT 5
18782: PPUSH
18783: CALL_OW 12
18787: PPUSH
18788: LD_INT 21
18790: PPUSH
18791: LD_INT 1
18793: PPUSH
18794: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18798: LD_ADDR_EXP 38
18802: PUSH
18803: LD_EXP 38
18807: PUSH
18808: LD_INT 1
18810: PLUS
18811: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 32 then
18812: LD_EXP 38
18816: PUSH
18817: LD_INT 12
18819: GREATEREQUAL
18820: PUSH
18821: LD_EXP 38
18825: PUSH
18826: LD_INT 32
18828: LESS
18829: AND
18830: IFFALSE 18882
// begin wait ( rand ( 0 0$12 , 0 0$20 ) ) ;
18832: LD_INT 420
18834: PPUSH
18835: LD_INT 700
18837: PPUSH
18838: CALL_OW 12
18842: PPUSH
18843: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18847: LD_INT 3
18849: PPUSH
18850: LD_INT 5
18852: PPUSH
18853: CALL_OW 12
18857: PPUSH
18858: LD_INT 21
18860: PPUSH
18861: LD_INT 1
18863: PPUSH
18864: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18868: LD_ADDR_EXP 38
18872: PUSH
18873: LD_EXP 38
18877: PUSH
18878: LD_INT 1
18880: PLUS
18881: ST_TO_ADDR
// end ; if cratesSpawned >= 32 then
18882: LD_EXP 38
18886: PUSH
18887: LD_INT 32
18889: GREATEREQUAL
18890: IFFALSE 18964
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
18892: LD_INT 21
18894: PPUSH
18895: CALL_OW 435
18899: PUSH
18900: LD_INT 14
18902: LESS
18903: IFFALSE 18914
// wait ( 0 0$10 ) else
18905: LD_INT 350
18907: PPUSH
18908: CALL_OW 67
18912: GO 18929
// wait ( rand ( 0 0$50 , 1 1$30 ) ) ;
18914: LD_INT 1750
18916: PPUSH
18917: LD_INT 3150
18919: PPUSH
18920: CALL_OW 12
18924: PPUSH
18925: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
18929: LD_INT 2
18931: PPUSH
18932: LD_INT 5
18934: PPUSH
18935: CALL_OW 12
18939: PPUSH
18940: LD_INT 21
18942: PPUSH
18943: LD_INT 1
18945: PPUSH
18946: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18950: LD_ADDR_EXP 38
18954: PUSH
18955: LD_EXP 38
18959: PUSH
18960: LD_INT 1
18962: PLUS
18963: ST_TO_ADDR
// end ; if cratesSpawned >= 110 then
18964: LD_EXP 38
18968: PUSH
18969: LD_INT 110
18971: GREATEREQUAL
18972: IFFALSE 19046
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
18974: LD_INT 21
18976: PPUSH
18977: CALL_OW 435
18981: PUSH
18982: LD_INT 14
18984: LESS
18985: IFFALSE 18996
// wait ( 0 0$20 ) else
18987: LD_INT 700
18989: PPUSH
18990: CALL_OW 67
18994: GO 19011
// wait ( rand ( 1 1$10 , 1 1$50 ) ) ;
18996: LD_INT 2450
18998: PPUSH
18999: LD_INT 3850
19001: PPUSH
19002: CALL_OW 12
19006: PPUSH
19007: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
19011: LD_INT 1
19013: PPUSH
19014: LD_INT 5
19016: PPUSH
19017: CALL_OW 12
19021: PPUSH
19022: LD_INT 21
19024: PPUSH
19025: LD_INT 1
19027: PPUSH
19028: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19032: LD_ADDR_EXP 38
19036: PUSH
19037: LD_EXP 38
19041: PUSH
19042: LD_INT 1
19044: PLUS
19045: ST_TO_ADDR
// end ; until false ;
19046: LD_INT 0
19048: IFFALSE 18745
// end ; end_of_file end_of_file
19050: END
// export globalGameSaveCounter ; every 0 0$1 do
19051: GO 19053
19053: DISABLE
// begin enable ;
19054: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19055: LD_STRING updateTimer(
19057: PUSH
19058: LD_OWVAR 1
19062: STR
19063: PUSH
19064: LD_STRING );
19066: STR
19067: PPUSH
19068: CALL_OW 559
// end ;
19072: END
// every 0 0$1 do
19073: GO 19075
19075: DISABLE
// begin globalGameSaveCounter := 0 ;
19076: LD_ADDR_EXP 45
19080: PUSH
19081: LD_INT 0
19083: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19084: LD_STRING setGameSaveCounter(0)
19086: PPUSH
19087: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19091: LD_STRING initStreamRollete();
19093: PPUSH
19094: CALL_OW 559
// InitStreamMode ;
19098: CALL 20441 0 0
// DefineStreamItems ( false ) ;
19102: LD_INT 0
19104: PPUSH
19105: CALL 20905 0 1
// end ;
19109: END
// export function SOS_MapStart ( ) ; begin
19110: LD_INT 0
19112: PPUSH
// if streamModeActive then
19113: LD_EXP 46
19117: IFFALSE 19126
// DefineStreamItems ( true ) ;
19119: LD_INT 1
19121: PPUSH
19122: CALL 20905 0 1
// UpdateLuaVariables ( ) ;
19126: CALL 19143 0 0
// UpdateFactoryWaypoints ( ) ;
19130: CALL 33774 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19134: CALL 34031 0 0
// end ;
19138: LD_VAR 0 1
19142: RET
// function UpdateLuaVariables ( ) ; begin
19143: LD_INT 0
19145: PPUSH
// if globalGameSaveCounter then
19146: LD_EXP 45
19150: IFFALSE 19184
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19152: LD_ADDR_EXP 45
19156: PUSH
19157: LD_EXP 45
19161: PPUSH
19162: CALL 78816 0 1
19166: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19167: LD_STRING setGameSaveCounter(
19169: PUSH
19170: LD_EXP 45
19174: STR
19175: PUSH
19176: LD_STRING )
19178: STR
19179: PPUSH
19180: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19184: LD_STRING setGameDifficulty(
19186: PUSH
19187: LD_OWVAR 67
19191: STR
19192: PUSH
19193: LD_STRING )
19195: STR
19196: PPUSH
19197: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
19201: LD_STRING displayDifficulty(
19203: PUSH
19204: LD_OWVAR 67
19208: STR
19209: PUSH
19210: LD_STRING )
19212: STR
19213: PPUSH
19214: CALL_OW 559
// end ;
19218: LD_VAR 0 1
19222: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19223: LD_INT 0
19225: PPUSH
// if p2 = stream_mode then
19226: LD_VAR 0 2
19230: PUSH
19231: LD_INT 100
19233: EQUAL
19234: IFFALSE 20237
// begin if not StreamModeActive then
19236: LD_EXP 46
19240: NOT
19241: IFFALSE 19251
// StreamModeActive := true ;
19243: LD_ADDR_EXP 46
19247: PUSH
19248: LD_INT 1
19250: ST_TO_ADDR
// if p3 = 0 then
19251: LD_VAR 0 3
19255: PUSH
19256: LD_INT 0
19258: EQUAL
19259: IFFALSE 19265
// InitStreamMode ;
19261: CALL 20441 0 0
// if p3 = 1 then
19265: LD_VAR 0 3
19269: PUSH
19270: LD_INT 1
19272: EQUAL
19273: IFFALSE 19283
// sRocket := true ;
19275: LD_ADDR_EXP 51
19279: PUSH
19280: LD_INT 1
19282: ST_TO_ADDR
// if p3 = 2 then
19283: LD_VAR 0 3
19287: PUSH
19288: LD_INT 2
19290: EQUAL
19291: IFFALSE 19301
// sSpeed := true ;
19293: LD_ADDR_EXP 50
19297: PUSH
19298: LD_INT 1
19300: ST_TO_ADDR
// if p3 = 3 then
19301: LD_VAR 0 3
19305: PUSH
19306: LD_INT 3
19308: EQUAL
19309: IFFALSE 19319
// sEngine := true ;
19311: LD_ADDR_EXP 52
19315: PUSH
19316: LD_INT 1
19318: ST_TO_ADDR
// if p3 = 4 then
19319: LD_VAR 0 3
19323: PUSH
19324: LD_INT 4
19326: EQUAL
19327: IFFALSE 19337
// sSpec := true ;
19329: LD_ADDR_EXP 49
19333: PUSH
19334: LD_INT 1
19336: ST_TO_ADDR
// if p3 = 5 then
19337: LD_VAR 0 3
19341: PUSH
19342: LD_INT 5
19344: EQUAL
19345: IFFALSE 19355
// sLevel := true ;
19347: LD_ADDR_EXP 53
19351: PUSH
19352: LD_INT 1
19354: ST_TO_ADDR
// if p3 = 6 then
19355: LD_VAR 0 3
19359: PUSH
19360: LD_INT 6
19362: EQUAL
19363: IFFALSE 19373
// sArmoury := true ;
19365: LD_ADDR_EXP 54
19369: PUSH
19370: LD_INT 1
19372: ST_TO_ADDR
// if p3 = 7 then
19373: LD_VAR 0 3
19377: PUSH
19378: LD_INT 7
19380: EQUAL
19381: IFFALSE 19391
// sRadar := true ;
19383: LD_ADDR_EXP 55
19387: PUSH
19388: LD_INT 1
19390: ST_TO_ADDR
// if p3 = 8 then
19391: LD_VAR 0 3
19395: PUSH
19396: LD_INT 8
19398: EQUAL
19399: IFFALSE 19409
// sBunker := true ;
19401: LD_ADDR_EXP 56
19405: PUSH
19406: LD_INT 1
19408: ST_TO_ADDR
// if p3 = 9 then
19409: LD_VAR 0 3
19413: PUSH
19414: LD_INT 9
19416: EQUAL
19417: IFFALSE 19427
// sHack := true ;
19419: LD_ADDR_EXP 57
19423: PUSH
19424: LD_INT 1
19426: ST_TO_ADDR
// if p3 = 10 then
19427: LD_VAR 0 3
19431: PUSH
19432: LD_INT 10
19434: EQUAL
19435: IFFALSE 19445
// sFire := true ;
19437: LD_ADDR_EXP 58
19441: PUSH
19442: LD_INT 1
19444: ST_TO_ADDR
// if p3 = 11 then
19445: LD_VAR 0 3
19449: PUSH
19450: LD_INT 11
19452: EQUAL
19453: IFFALSE 19463
// sRefresh := true ;
19455: LD_ADDR_EXP 59
19459: PUSH
19460: LD_INT 1
19462: ST_TO_ADDR
// if p3 = 12 then
19463: LD_VAR 0 3
19467: PUSH
19468: LD_INT 12
19470: EQUAL
19471: IFFALSE 19481
// sExp := true ;
19473: LD_ADDR_EXP 60
19477: PUSH
19478: LD_INT 1
19480: ST_TO_ADDR
// if p3 = 13 then
19481: LD_VAR 0 3
19485: PUSH
19486: LD_INT 13
19488: EQUAL
19489: IFFALSE 19499
// sDepot := true ;
19491: LD_ADDR_EXP 61
19495: PUSH
19496: LD_INT 1
19498: ST_TO_ADDR
// if p3 = 14 then
19499: LD_VAR 0 3
19503: PUSH
19504: LD_INT 14
19506: EQUAL
19507: IFFALSE 19517
// sFlag := true ;
19509: LD_ADDR_EXP 62
19513: PUSH
19514: LD_INT 1
19516: ST_TO_ADDR
// if p3 = 15 then
19517: LD_VAR 0 3
19521: PUSH
19522: LD_INT 15
19524: EQUAL
19525: IFFALSE 19535
// sKamikadze := true ;
19527: LD_ADDR_EXP 70
19531: PUSH
19532: LD_INT 1
19534: ST_TO_ADDR
// if p3 = 16 then
19535: LD_VAR 0 3
19539: PUSH
19540: LD_INT 16
19542: EQUAL
19543: IFFALSE 19553
// sTroll := true ;
19545: LD_ADDR_EXP 71
19549: PUSH
19550: LD_INT 1
19552: ST_TO_ADDR
// if p3 = 17 then
19553: LD_VAR 0 3
19557: PUSH
19558: LD_INT 17
19560: EQUAL
19561: IFFALSE 19571
// sSlow := true ;
19563: LD_ADDR_EXP 72
19567: PUSH
19568: LD_INT 1
19570: ST_TO_ADDR
// if p3 = 18 then
19571: LD_VAR 0 3
19575: PUSH
19576: LD_INT 18
19578: EQUAL
19579: IFFALSE 19589
// sLack := true ;
19581: LD_ADDR_EXP 73
19585: PUSH
19586: LD_INT 1
19588: ST_TO_ADDR
// if p3 = 19 then
19589: LD_VAR 0 3
19593: PUSH
19594: LD_INT 19
19596: EQUAL
19597: IFFALSE 19607
// sTank := true ;
19599: LD_ADDR_EXP 75
19603: PUSH
19604: LD_INT 1
19606: ST_TO_ADDR
// if p3 = 20 then
19607: LD_VAR 0 3
19611: PUSH
19612: LD_INT 20
19614: EQUAL
19615: IFFALSE 19625
// sRemote := true ;
19617: LD_ADDR_EXP 76
19621: PUSH
19622: LD_INT 1
19624: ST_TO_ADDR
// if p3 = 21 then
19625: LD_VAR 0 3
19629: PUSH
19630: LD_INT 21
19632: EQUAL
19633: IFFALSE 19643
// sPowell := true ;
19635: LD_ADDR_EXP 77
19639: PUSH
19640: LD_INT 1
19642: ST_TO_ADDR
// if p3 = 22 then
19643: LD_VAR 0 3
19647: PUSH
19648: LD_INT 22
19650: EQUAL
19651: IFFALSE 19661
// sTeleport := true ;
19653: LD_ADDR_EXP 80
19657: PUSH
19658: LD_INT 1
19660: ST_TO_ADDR
// if p3 = 23 then
19661: LD_VAR 0 3
19665: PUSH
19666: LD_INT 23
19668: EQUAL
19669: IFFALSE 19679
// sOilTower := true ;
19671: LD_ADDR_EXP 82
19675: PUSH
19676: LD_INT 1
19678: ST_TO_ADDR
// if p3 = 24 then
19679: LD_VAR 0 3
19683: PUSH
19684: LD_INT 24
19686: EQUAL
19687: IFFALSE 19697
// sShovel := true ;
19689: LD_ADDR_EXP 83
19693: PUSH
19694: LD_INT 1
19696: ST_TO_ADDR
// if p3 = 25 then
19697: LD_VAR 0 3
19701: PUSH
19702: LD_INT 25
19704: EQUAL
19705: IFFALSE 19715
// sSheik := true ;
19707: LD_ADDR_EXP 84
19711: PUSH
19712: LD_INT 1
19714: ST_TO_ADDR
// if p3 = 26 then
19715: LD_VAR 0 3
19719: PUSH
19720: LD_INT 26
19722: EQUAL
19723: IFFALSE 19733
// sEarthquake := true ;
19725: LD_ADDR_EXP 86
19729: PUSH
19730: LD_INT 1
19732: ST_TO_ADDR
// if p3 = 27 then
19733: LD_VAR 0 3
19737: PUSH
19738: LD_INT 27
19740: EQUAL
19741: IFFALSE 19751
// sAI := true ;
19743: LD_ADDR_EXP 87
19747: PUSH
19748: LD_INT 1
19750: ST_TO_ADDR
// if p3 = 28 then
19751: LD_VAR 0 3
19755: PUSH
19756: LD_INT 28
19758: EQUAL
19759: IFFALSE 19769
// sCargo := true ;
19761: LD_ADDR_EXP 90
19765: PUSH
19766: LD_INT 1
19768: ST_TO_ADDR
// if p3 = 29 then
19769: LD_VAR 0 3
19773: PUSH
19774: LD_INT 29
19776: EQUAL
19777: IFFALSE 19787
// sDLaser := true ;
19779: LD_ADDR_EXP 91
19783: PUSH
19784: LD_INT 1
19786: ST_TO_ADDR
// if p3 = 30 then
19787: LD_VAR 0 3
19791: PUSH
19792: LD_INT 30
19794: EQUAL
19795: IFFALSE 19805
// sExchange := true ;
19797: LD_ADDR_EXP 92
19801: PUSH
19802: LD_INT 1
19804: ST_TO_ADDR
// if p3 = 31 then
19805: LD_VAR 0 3
19809: PUSH
19810: LD_INT 31
19812: EQUAL
19813: IFFALSE 19823
// sFac := true ;
19815: LD_ADDR_EXP 93
19819: PUSH
19820: LD_INT 1
19822: ST_TO_ADDR
// if p3 = 32 then
19823: LD_VAR 0 3
19827: PUSH
19828: LD_INT 32
19830: EQUAL
19831: IFFALSE 19841
// sPower := true ;
19833: LD_ADDR_EXP 94
19837: PUSH
19838: LD_INT 1
19840: ST_TO_ADDR
// if p3 = 33 then
19841: LD_VAR 0 3
19845: PUSH
19846: LD_INT 33
19848: EQUAL
19849: IFFALSE 19859
// sRandom := true ;
19851: LD_ADDR_EXP 95
19855: PUSH
19856: LD_INT 1
19858: ST_TO_ADDR
// if p3 = 34 then
19859: LD_VAR 0 3
19863: PUSH
19864: LD_INT 34
19866: EQUAL
19867: IFFALSE 19877
// sShield := true ;
19869: LD_ADDR_EXP 96
19873: PUSH
19874: LD_INT 1
19876: ST_TO_ADDR
// if p3 = 35 then
19877: LD_VAR 0 3
19881: PUSH
19882: LD_INT 35
19884: EQUAL
19885: IFFALSE 19895
// sTime := true ;
19887: LD_ADDR_EXP 97
19891: PUSH
19892: LD_INT 1
19894: ST_TO_ADDR
// if p3 = 36 then
19895: LD_VAR 0 3
19899: PUSH
19900: LD_INT 36
19902: EQUAL
19903: IFFALSE 19913
// sTools := true ;
19905: LD_ADDR_EXP 98
19909: PUSH
19910: LD_INT 1
19912: ST_TO_ADDR
// if p3 = 101 then
19913: LD_VAR 0 3
19917: PUSH
19918: LD_INT 101
19920: EQUAL
19921: IFFALSE 19931
// sSold := true ;
19923: LD_ADDR_EXP 63
19927: PUSH
19928: LD_INT 1
19930: ST_TO_ADDR
// if p3 = 102 then
19931: LD_VAR 0 3
19935: PUSH
19936: LD_INT 102
19938: EQUAL
19939: IFFALSE 19949
// sDiff := true ;
19941: LD_ADDR_EXP 64
19945: PUSH
19946: LD_INT 1
19948: ST_TO_ADDR
// if p3 = 103 then
19949: LD_VAR 0 3
19953: PUSH
19954: LD_INT 103
19956: EQUAL
19957: IFFALSE 19967
// sFog := true ;
19959: LD_ADDR_EXP 67
19963: PUSH
19964: LD_INT 1
19966: ST_TO_ADDR
// if p3 = 104 then
19967: LD_VAR 0 3
19971: PUSH
19972: LD_INT 104
19974: EQUAL
19975: IFFALSE 19985
// sReset := true ;
19977: LD_ADDR_EXP 68
19981: PUSH
19982: LD_INT 1
19984: ST_TO_ADDR
// if p3 = 105 then
19985: LD_VAR 0 3
19989: PUSH
19990: LD_INT 105
19992: EQUAL
19993: IFFALSE 20003
// sSun := true ;
19995: LD_ADDR_EXP 69
19999: PUSH
20000: LD_INT 1
20002: ST_TO_ADDR
// if p3 = 106 then
20003: LD_VAR 0 3
20007: PUSH
20008: LD_INT 106
20010: EQUAL
20011: IFFALSE 20021
// sTiger := true ;
20013: LD_ADDR_EXP 65
20017: PUSH
20018: LD_INT 1
20020: ST_TO_ADDR
// if p3 = 107 then
20021: LD_VAR 0 3
20025: PUSH
20026: LD_INT 107
20028: EQUAL
20029: IFFALSE 20039
// sBomb := true ;
20031: LD_ADDR_EXP 66
20035: PUSH
20036: LD_INT 1
20038: ST_TO_ADDR
// if p3 = 108 then
20039: LD_VAR 0 3
20043: PUSH
20044: LD_INT 108
20046: EQUAL
20047: IFFALSE 20057
// sWound := true ;
20049: LD_ADDR_EXP 74
20053: PUSH
20054: LD_INT 1
20056: ST_TO_ADDR
// if p3 = 109 then
20057: LD_VAR 0 3
20061: PUSH
20062: LD_INT 109
20064: EQUAL
20065: IFFALSE 20075
// sBetray := true ;
20067: LD_ADDR_EXP 78
20071: PUSH
20072: LD_INT 1
20074: ST_TO_ADDR
// if p3 = 110 then
20075: LD_VAR 0 3
20079: PUSH
20080: LD_INT 110
20082: EQUAL
20083: IFFALSE 20093
// sContamin := true ;
20085: LD_ADDR_EXP 79
20089: PUSH
20090: LD_INT 1
20092: ST_TO_ADDR
// if p3 = 111 then
20093: LD_VAR 0 3
20097: PUSH
20098: LD_INT 111
20100: EQUAL
20101: IFFALSE 20111
// sOil := true ;
20103: LD_ADDR_EXP 81
20107: PUSH
20108: LD_INT 1
20110: ST_TO_ADDR
// if p3 = 112 then
20111: LD_VAR 0 3
20115: PUSH
20116: LD_INT 112
20118: EQUAL
20119: IFFALSE 20129
// sStu := true ;
20121: LD_ADDR_EXP 85
20125: PUSH
20126: LD_INT 1
20128: ST_TO_ADDR
// if p3 = 113 then
20129: LD_VAR 0 3
20133: PUSH
20134: LD_INT 113
20136: EQUAL
20137: IFFALSE 20147
// sBazooka := true ;
20139: LD_ADDR_EXP 88
20143: PUSH
20144: LD_INT 1
20146: ST_TO_ADDR
// if p3 = 114 then
20147: LD_VAR 0 3
20151: PUSH
20152: LD_INT 114
20154: EQUAL
20155: IFFALSE 20165
// sMortar := true ;
20157: LD_ADDR_EXP 89
20161: PUSH
20162: LD_INT 1
20164: ST_TO_ADDR
// if p3 = 115 then
20165: LD_VAR 0 3
20169: PUSH
20170: LD_INT 115
20172: EQUAL
20173: IFFALSE 20183
// sRanger := true ;
20175: LD_ADDR_EXP 99
20179: PUSH
20180: LD_INT 1
20182: ST_TO_ADDR
// if p3 = 116 then
20183: LD_VAR 0 3
20187: PUSH
20188: LD_INT 116
20190: EQUAL
20191: IFFALSE 20201
// sComputer := true ;
20193: LD_ADDR_EXP 100
20197: PUSH
20198: LD_INT 1
20200: ST_TO_ADDR
// if p3 = 117 then
20201: LD_VAR 0 3
20205: PUSH
20206: LD_INT 117
20208: EQUAL
20209: IFFALSE 20219
// s30 := true ;
20211: LD_ADDR_EXP 101
20215: PUSH
20216: LD_INT 1
20218: ST_TO_ADDR
// if p3 = 118 then
20219: LD_VAR 0 3
20223: PUSH
20224: LD_INT 118
20226: EQUAL
20227: IFFALSE 20237
// s60 := true ;
20229: LD_ADDR_EXP 102
20233: PUSH
20234: LD_INT 1
20236: ST_TO_ADDR
// end ; if p2 = hack_mode then
20237: LD_VAR 0 2
20241: PUSH
20242: LD_INT 101
20244: EQUAL
20245: IFFALSE 20373
// begin case p3 of 1 :
20247: LD_VAR 0 3
20251: PUSH
20252: LD_INT 1
20254: DOUBLE
20255: EQUAL
20256: IFTRUE 20260
20258: GO 20267
20260: POP
// hHackUnlimitedResources ; 2 :
20261: CALL 32520 0 0
20265: GO 20373
20267: LD_INT 2
20269: DOUBLE
20270: EQUAL
20271: IFTRUE 20275
20273: GO 20282
20275: POP
// hHackSetLevel10 ; 3 :
20276: CALL 32653 0 0
20280: GO 20373
20282: LD_INT 3
20284: DOUBLE
20285: EQUAL
20286: IFTRUE 20290
20288: GO 20297
20290: POP
// hHackSetLevel10YourUnits ; 4 :
20291: CALL 32738 0 0
20295: GO 20373
20297: LD_INT 4
20299: DOUBLE
20300: EQUAL
20301: IFTRUE 20305
20303: GO 20312
20305: POP
// hHackInvincible ; 5 :
20306: CALL 33186 0 0
20310: GO 20373
20312: LD_INT 5
20314: DOUBLE
20315: EQUAL
20316: IFTRUE 20320
20318: GO 20327
20320: POP
// hHackInvisible ; 6 :
20321: CALL 33297 0 0
20325: GO 20373
20327: LD_INT 6
20329: DOUBLE
20330: EQUAL
20331: IFTRUE 20335
20333: GO 20342
20335: POP
// hHackChangeYourSide ; 7 :
20336: CALL 33354 0 0
20340: GO 20373
20342: LD_INT 7
20344: DOUBLE
20345: EQUAL
20346: IFTRUE 20350
20348: GO 20357
20350: POP
// hHackChangeUnitSide ; 8 :
20351: CALL 33396 0 0
20355: GO 20373
20357: LD_INT 8
20359: DOUBLE
20360: EQUAL
20361: IFTRUE 20365
20363: GO 20372
20365: POP
// hHackFog ; end ;
20366: CALL 33497 0 0
20370: GO 20373
20372: POP
// end ; if p2 = game_save_mode then
20373: LD_VAR 0 2
20377: PUSH
20378: LD_INT 102
20380: EQUAL
20381: IFFALSE 20436
// begin if p3 = 1 then
20383: LD_VAR 0 3
20387: PUSH
20388: LD_INT 1
20390: EQUAL
20391: IFFALSE 20403
// globalGameSaveCounter := p4 ;
20393: LD_ADDR_EXP 45
20397: PUSH
20398: LD_VAR 0 4
20402: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
20403: LD_VAR 0 3
20407: PUSH
20408: LD_INT 2
20410: EQUAL
20411: PUSH
20412: LD_EXP 45
20416: AND
20417: IFFALSE 20436
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20419: LD_STRING setGameSaveCounter(
20421: PUSH
20422: LD_EXP 45
20426: STR
20427: PUSH
20428: LD_STRING )
20430: STR
20431: PPUSH
20432: CALL_OW 559
// end ; end ;
20436: LD_VAR 0 7
20440: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
20441: LD_INT 0
20443: PPUSH
// streamModeActive := false ;
20444: LD_ADDR_EXP 46
20448: PUSH
20449: LD_INT 0
20451: ST_TO_ADDR
// normalCounter := 36 ;
20452: LD_ADDR_EXP 47
20456: PUSH
20457: LD_INT 36
20459: ST_TO_ADDR
// hardcoreCounter := 18 ;
20460: LD_ADDR_EXP 48
20464: PUSH
20465: LD_INT 18
20467: ST_TO_ADDR
// sRocket := false ;
20468: LD_ADDR_EXP 51
20472: PUSH
20473: LD_INT 0
20475: ST_TO_ADDR
// sSpeed := false ;
20476: LD_ADDR_EXP 50
20480: PUSH
20481: LD_INT 0
20483: ST_TO_ADDR
// sEngine := false ;
20484: LD_ADDR_EXP 52
20488: PUSH
20489: LD_INT 0
20491: ST_TO_ADDR
// sSpec := false ;
20492: LD_ADDR_EXP 49
20496: PUSH
20497: LD_INT 0
20499: ST_TO_ADDR
// sLevel := false ;
20500: LD_ADDR_EXP 53
20504: PUSH
20505: LD_INT 0
20507: ST_TO_ADDR
// sArmoury := false ;
20508: LD_ADDR_EXP 54
20512: PUSH
20513: LD_INT 0
20515: ST_TO_ADDR
// sRadar := false ;
20516: LD_ADDR_EXP 55
20520: PUSH
20521: LD_INT 0
20523: ST_TO_ADDR
// sBunker := false ;
20524: LD_ADDR_EXP 56
20528: PUSH
20529: LD_INT 0
20531: ST_TO_ADDR
// sHack := false ;
20532: LD_ADDR_EXP 57
20536: PUSH
20537: LD_INT 0
20539: ST_TO_ADDR
// sFire := false ;
20540: LD_ADDR_EXP 58
20544: PUSH
20545: LD_INT 0
20547: ST_TO_ADDR
// sRefresh := false ;
20548: LD_ADDR_EXP 59
20552: PUSH
20553: LD_INT 0
20555: ST_TO_ADDR
// sExp := false ;
20556: LD_ADDR_EXP 60
20560: PUSH
20561: LD_INT 0
20563: ST_TO_ADDR
// sDepot := false ;
20564: LD_ADDR_EXP 61
20568: PUSH
20569: LD_INT 0
20571: ST_TO_ADDR
// sFlag := false ;
20572: LD_ADDR_EXP 62
20576: PUSH
20577: LD_INT 0
20579: ST_TO_ADDR
// sKamikadze := false ;
20580: LD_ADDR_EXP 70
20584: PUSH
20585: LD_INT 0
20587: ST_TO_ADDR
// sTroll := false ;
20588: LD_ADDR_EXP 71
20592: PUSH
20593: LD_INT 0
20595: ST_TO_ADDR
// sSlow := false ;
20596: LD_ADDR_EXP 72
20600: PUSH
20601: LD_INT 0
20603: ST_TO_ADDR
// sLack := false ;
20604: LD_ADDR_EXP 73
20608: PUSH
20609: LD_INT 0
20611: ST_TO_ADDR
// sTank := false ;
20612: LD_ADDR_EXP 75
20616: PUSH
20617: LD_INT 0
20619: ST_TO_ADDR
// sRemote := false ;
20620: LD_ADDR_EXP 76
20624: PUSH
20625: LD_INT 0
20627: ST_TO_ADDR
// sPowell := false ;
20628: LD_ADDR_EXP 77
20632: PUSH
20633: LD_INT 0
20635: ST_TO_ADDR
// sTeleport := false ;
20636: LD_ADDR_EXP 80
20640: PUSH
20641: LD_INT 0
20643: ST_TO_ADDR
// sOilTower := false ;
20644: LD_ADDR_EXP 82
20648: PUSH
20649: LD_INT 0
20651: ST_TO_ADDR
// sShovel := false ;
20652: LD_ADDR_EXP 83
20656: PUSH
20657: LD_INT 0
20659: ST_TO_ADDR
// sSheik := false ;
20660: LD_ADDR_EXP 84
20664: PUSH
20665: LD_INT 0
20667: ST_TO_ADDR
// sEarthquake := false ;
20668: LD_ADDR_EXP 86
20672: PUSH
20673: LD_INT 0
20675: ST_TO_ADDR
// sAI := false ;
20676: LD_ADDR_EXP 87
20680: PUSH
20681: LD_INT 0
20683: ST_TO_ADDR
// sCargo := false ;
20684: LD_ADDR_EXP 90
20688: PUSH
20689: LD_INT 0
20691: ST_TO_ADDR
// sDLaser := false ;
20692: LD_ADDR_EXP 91
20696: PUSH
20697: LD_INT 0
20699: ST_TO_ADDR
// sExchange := false ;
20700: LD_ADDR_EXP 92
20704: PUSH
20705: LD_INT 0
20707: ST_TO_ADDR
// sFac := false ;
20708: LD_ADDR_EXP 93
20712: PUSH
20713: LD_INT 0
20715: ST_TO_ADDR
// sPower := false ;
20716: LD_ADDR_EXP 94
20720: PUSH
20721: LD_INT 0
20723: ST_TO_ADDR
// sRandom := false ;
20724: LD_ADDR_EXP 95
20728: PUSH
20729: LD_INT 0
20731: ST_TO_ADDR
// sShield := false ;
20732: LD_ADDR_EXP 96
20736: PUSH
20737: LD_INT 0
20739: ST_TO_ADDR
// sTime := false ;
20740: LD_ADDR_EXP 97
20744: PUSH
20745: LD_INT 0
20747: ST_TO_ADDR
// sTools := false ;
20748: LD_ADDR_EXP 98
20752: PUSH
20753: LD_INT 0
20755: ST_TO_ADDR
// sSold := false ;
20756: LD_ADDR_EXP 63
20760: PUSH
20761: LD_INT 0
20763: ST_TO_ADDR
// sDiff := false ;
20764: LD_ADDR_EXP 64
20768: PUSH
20769: LD_INT 0
20771: ST_TO_ADDR
// sFog := false ;
20772: LD_ADDR_EXP 67
20776: PUSH
20777: LD_INT 0
20779: ST_TO_ADDR
// sReset := false ;
20780: LD_ADDR_EXP 68
20784: PUSH
20785: LD_INT 0
20787: ST_TO_ADDR
// sSun := false ;
20788: LD_ADDR_EXP 69
20792: PUSH
20793: LD_INT 0
20795: ST_TO_ADDR
// sTiger := false ;
20796: LD_ADDR_EXP 65
20800: PUSH
20801: LD_INT 0
20803: ST_TO_ADDR
// sBomb := false ;
20804: LD_ADDR_EXP 66
20808: PUSH
20809: LD_INT 0
20811: ST_TO_ADDR
// sWound := false ;
20812: LD_ADDR_EXP 74
20816: PUSH
20817: LD_INT 0
20819: ST_TO_ADDR
// sBetray := false ;
20820: LD_ADDR_EXP 78
20824: PUSH
20825: LD_INT 0
20827: ST_TO_ADDR
// sContamin := false ;
20828: LD_ADDR_EXP 79
20832: PUSH
20833: LD_INT 0
20835: ST_TO_ADDR
// sOil := false ;
20836: LD_ADDR_EXP 81
20840: PUSH
20841: LD_INT 0
20843: ST_TO_ADDR
// sStu := false ;
20844: LD_ADDR_EXP 85
20848: PUSH
20849: LD_INT 0
20851: ST_TO_ADDR
// sBazooka := false ;
20852: LD_ADDR_EXP 88
20856: PUSH
20857: LD_INT 0
20859: ST_TO_ADDR
// sMortar := false ;
20860: LD_ADDR_EXP 89
20864: PUSH
20865: LD_INT 0
20867: ST_TO_ADDR
// sRanger := false ;
20868: LD_ADDR_EXP 99
20872: PUSH
20873: LD_INT 0
20875: ST_TO_ADDR
// sComputer := false ;
20876: LD_ADDR_EXP 100
20880: PUSH
20881: LD_INT 0
20883: ST_TO_ADDR
// s30 := false ;
20884: LD_ADDR_EXP 101
20888: PUSH
20889: LD_INT 0
20891: ST_TO_ADDR
// s60 := false ;
20892: LD_ADDR_EXP 102
20896: PUSH
20897: LD_INT 0
20899: ST_TO_ADDR
// end ;
20900: LD_VAR 0 1
20904: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20905: LD_INT 0
20907: PPUSH
20908: PPUSH
20909: PPUSH
20910: PPUSH
20911: PPUSH
20912: PPUSH
20913: PPUSH
// result := [ ] ;
20914: LD_ADDR_VAR 0 2
20918: PUSH
20919: EMPTY
20920: ST_TO_ADDR
// if campaign_id = 1 then
20921: LD_OWVAR 69
20925: PUSH
20926: LD_INT 1
20928: EQUAL
20929: IFFALSE 24095
// begin case mission_number of 1 :
20931: LD_OWVAR 70
20935: PUSH
20936: LD_INT 1
20938: DOUBLE
20939: EQUAL
20940: IFTRUE 20944
20942: GO 21020
20944: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20945: LD_ADDR_VAR 0 2
20949: PUSH
20950: LD_INT 2
20952: PUSH
20953: LD_INT 4
20955: PUSH
20956: LD_INT 11
20958: PUSH
20959: LD_INT 12
20961: PUSH
20962: LD_INT 15
20964: PUSH
20965: LD_INT 16
20967: PUSH
20968: LD_INT 22
20970: PUSH
20971: LD_INT 23
20973: PUSH
20974: LD_INT 26
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: PUSH
20988: LD_INT 101
20990: PUSH
20991: LD_INT 102
20993: PUSH
20994: LD_INT 106
20996: PUSH
20997: LD_INT 116
20999: PUSH
21000: LD_INT 117
21002: PUSH
21003: LD_INT 118
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: PUSH
21014: EMPTY
21015: LIST
21016: LIST
21017: ST_TO_ADDR
21018: GO 24093
21020: LD_INT 2
21022: DOUBLE
21023: EQUAL
21024: IFTRUE 21028
21026: GO 21112
21028: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21029: LD_ADDR_VAR 0 2
21033: PUSH
21034: LD_INT 2
21036: PUSH
21037: LD_INT 4
21039: PUSH
21040: LD_INT 11
21042: PUSH
21043: LD_INT 12
21045: PUSH
21046: LD_INT 15
21048: PUSH
21049: LD_INT 16
21051: PUSH
21052: LD_INT 22
21054: PUSH
21055: LD_INT 23
21057: PUSH
21058: LD_INT 26
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: PUSH
21072: LD_INT 101
21074: PUSH
21075: LD_INT 102
21077: PUSH
21078: LD_INT 105
21080: PUSH
21081: LD_INT 106
21083: PUSH
21084: LD_INT 108
21086: PUSH
21087: LD_INT 116
21089: PUSH
21090: LD_INT 117
21092: PUSH
21093: LD_INT 118
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: ST_TO_ADDR
21110: GO 24093
21112: LD_INT 3
21114: DOUBLE
21115: EQUAL
21116: IFTRUE 21120
21118: GO 21208
21120: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21121: LD_ADDR_VAR 0 2
21125: PUSH
21126: LD_INT 2
21128: PUSH
21129: LD_INT 4
21131: PUSH
21132: LD_INT 5
21134: PUSH
21135: LD_INT 11
21137: PUSH
21138: LD_INT 12
21140: PUSH
21141: LD_INT 15
21143: PUSH
21144: LD_INT 16
21146: PUSH
21147: LD_INT 22
21149: PUSH
21150: LD_INT 26
21152: PUSH
21153: LD_INT 36
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: PUSH
21168: LD_INT 101
21170: PUSH
21171: LD_INT 102
21173: PUSH
21174: LD_INT 105
21176: PUSH
21177: LD_INT 106
21179: PUSH
21180: LD_INT 108
21182: PUSH
21183: LD_INT 116
21185: PUSH
21186: LD_INT 117
21188: PUSH
21189: LD_INT 118
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: ST_TO_ADDR
21206: GO 24093
21208: LD_INT 4
21210: DOUBLE
21211: EQUAL
21212: IFTRUE 21216
21214: GO 21312
21216: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21217: LD_ADDR_VAR 0 2
21221: PUSH
21222: LD_INT 2
21224: PUSH
21225: LD_INT 4
21227: PUSH
21228: LD_INT 5
21230: PUSH
21231: LD_INT 8
21233: PUSH
21234: LD_INT 11
21236: PUSH
21237: LD_INT 12
21239: PUSH
21240: LD_INT 15
21242: PUSH
21243: LD_INT 16
21245: PUSH
21246: LD_INT 22
21248: PUSH
21249: LD_INT 23
21251: PUSH
21252: LD_INT 26
21254: PUSH
21255: LD_INT 36
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: PUSH
21272: LD_INT 101
21274: PUSH
21275: LD_INT 102
21277: PUSH
21278: LD_INT 105
21280: PUSH
21281: LD_INT 106
21283: PUSH
21284: LD_INT 108
21286: PUSH
21287: LD_INT 116
21289: PUSH
21290: LD_INT 117
21292: PUSH
21293: LD_INT 118
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: ST_TO_ADDR
21310: GO 24093
21312: LD_INT 5
21314: DOUBLE
21315: EQUAL
21316: IFTRUE 21320
21318: GO 21432
21320: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21321: LD_ADDR_VAR 0 2
21325: PUSH
21326: LD_INT 2
21328: PUSH
21329: LD_INT 4
21331: PUSH
21332: LD_INT 5
21334: PUSH
21335: LD_INT 6
21337: PUSH
21338: LD_INT 8
21340: PUSH
21341: LD_INT 11
21343: PUSH
21344: LD_INT 12
21346: PUSH
21347: LD_INT 15
21349: PUSH
21350: LD_INT 16
21352: PUSH
21353: LD_INT 22
21355: PUSH
21356: LD_INT 23
21358: PUSH
21359: LD_INT 25
21361: PUSH
21362: LD_INT 26
21364: PUSH
21365: LD_INT 36
21367: PUSH
21368: EMPTY
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: PUSH
21384: LD_INT 101
21386: PUSH
21387: LD_INT 102
21389: PUSH
21390: LD_INT 105
21392: PUSH
21393: LD_INT 106
21395: PUSH
21396: LD_INT 108
21398: PUSH
21399: LD_INT 109
21401: PUSH
21402: LD_INT 112
21404: PUSH
21405: LD_INT 116
21407: PUSH
21408: LD_INT 117
21410: PUSH
21411: LD_INT 118
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: PUSH
21426: EMPTY
21427: LIST
21428: LIST
21429: ST_TO_ADDR
21430: GO 24093
21432: LD_INT 6
21434: DOUBLE
21435: EQUAL
21436: IFTRUE 21440
21438: GO 21572
21440: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21441: LD_ADDR_VAR 0 2
21445: PUSH
21446: LD_INT 2
21448: PUSH
21449: LD_INT 4
21451: PUSH
21452: LD_INT 5
21454: PUSH
21455: LD_INT 6
21457: PUSH
21458: LD_INT 8
21460: PUSH
21461: LD_INT 11
21463: PUSH
21464: LD_INT 12
21466: PUSH
21467: LD_INT 15
21469: PUSH
21470: LD_INT 16
21472: PUSH
21473: LD_INT 20
21475: PUSH
21476: LD_INT 21
21478: PUSH
21479: LD_INT 22
21481: PUSH
21482: LD_INT 23
21484: PUSH
21485: LD_INT 25
21487: PUSH
21488: LD_INT 26
21490: PUSH
21491: LD_INT 30
21493: PUSH
21494: LD_INT 31
21496: PUSH
21497: LD_INT 32
21499: PUSH
21500: LD_INT 36
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: PUSH
21524: LD_INT 101
21526: PUSH
21527: LD_INT 102
21529: PUSH
21530: LD_INT 105
21532: PUSH
21533: LD_INT 106
21535: PUSH
21536: LD_INT 108
21538: PUSH
21539: LD_INT 109
21541: PUSH
21542: LD_INT 112
21544: PUSH
21545: LD_INT 116
21547: PUSH
21548: LD_INT 117
21550: PUSH
21551: LD_INT 118
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: PUSH
21566: EMPTY
21567: LIST
21568: LIST
21569: ST_TO_ADDR
21570: GO 24093
21572: LD_INT 7
21574: DOUBLE
21575: EQUAL
21576: IFTRUE 21580
21578: GO 21692
21580: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21581: LD_ADDR_VAR 0 2
21585: PUSH
21586: LD_INT 2
21588: PUSH
21589: LD_INT 4
21591: PUSH
21592: LD_INT 5
21594: PUSH
21595: LD_INT 7
21597: PUSH
21598: LD_INT 11
21600: PUSH
21601: LD_INT 12
21603: PUSH
21604: LD_INT 15
21606: PUSH
21607: LD_INT 16
21609: PUSH
21610: LD_INT 20
21612: PUSH
21613: LD_INT 21
21615: PUSH
21616: LD_INT 22
21618: PUSH
21619: LD_INT 23
21621: PUSH
21622: LD_INT 25
21624: PUSH
21625: LD_INT 26
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: PUSH
21644: LD_INT 101
21646: PUSH
21647: LD_INT 102
21649: PUSH
21650: LD_INT 103
21652: PUSH
21653: LD_INT 105
21655: PUSH
21656: LD_INT 106
21658: PUSH
21659: LD_INT 108
21661: PUSH
21662: LD_INT 112
21664: PUSH
21665: LD_INT 116
21667: PUSH
21668: LD_INT 117
21670: PUSH
21671: LD_INT 118
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: ST_TO_ADDR
21690: GO 24093
21692: LD_INT 8
21694: DOUBLE
21695: EQUAL
21696: IFTRUE 21700
21698: GO 21840
21700: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21701: LD_ADDR_VAR 0 2
21705: PUSH
21706: LD_INT 2
21708: PUSH
21709: LD_INT 4
21711: PUSH
21712: LD_INT 5
21714: PUSH
21715: LD_INT 6
21717: PUSH
21718: LD_INT 7
21720: PUSH
21721: LD_INT 8
21723: PUSH
21724: LD_INT 11
21726: PUSH
21727: LD_INT 12
21729: PUSH
21730: LD_INT 15
21732: PUSH
21733: LD_INT 16
21735: PUSH
21736: LD_INT 20
21738: PUSH
21739: LD_INT 21
21741: PUSH
21742: LD_INT 22
21744: PUSH
21745: LD_INT 23
21747: PUSH
21748: LD_INT 25
21750: PUSH
21751: LD_INT 26
21753: PUSH
21754: LD_INT 30
21756: PUSH
21757: LD_INT 31
21759: PUSH
21760: LD_INT 32
21762: PUSH
21763: LD_INT 36
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: PUSH
21788: LD_INT 101
21790: PUSH
21791: LD_INT 102
21793: PUSH
21794: LD_INT 103
21796: PUSH
21797: LD_INT 105
21799: PUSH
21800: LD_INT 106
21802: PUSH
21803: LD_INT 108
21805: PUSH
21806: LD_INT 109
21808: PUSH
21809: LD_INT 112
21811: PUSH
21812: LD_INT 116
21814: PUSH
21815: LD_INT 117
21817: PUSH
21818: LD_INT 118
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: ST_TO_ADDR
21838: GO 24093
21840: LD_INT 9
21842: DOUBLE
21843: EQUAL
21844: IFTRUE 21848
21846: GO 21996
21848: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21849: LD_ADDR_VAR 0 2
21853: PUSH
21854: LD_INT 2
21856: PUSH
21857: LD_INT 4
21859: PUSH
21860: LD_INT 5
21862: PUSH
21863: LD_INT 6
21865: PUSH
21866: LD_INT 7
21868: PUSH
21869: LD_INT 8
21871: PUSH
21872: LD_INT 11
21874: PUSH
21875: LD_INT 12
21877: PUSH
21878: LD_INT 15
21880: PUSH
21881: LD_INT 16
21883: PUSH
21884: LD_INT 20
21886: PUSH
21887: LD_INT 21
21889: PUSH
21890: LD_INT 22
21892: PUSH
21893: LD_INT 23
21895: PUSH
21896: LD_INT 25
21898: PUSH
21899: LD_INT 26
21901: PUSH
21902: LD_INT 28
21904: PUSH
21905: LD_INT 30
21907: PUSH
21908: LD_INT 31
21910: PUSH
21911: LD_INT 32
21913: PUSH
21914: LD_INT 36
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: PUSH
21940: LD_INT 101
21942: PUSH
21943: LD_INT 102
21945: PUSH
21946: LD_INT 103
21948: PUSH
21949: LD_INT 105
21951: PUSH
21952: LD_INT 106
21954: PUSH
21955: LD_INT 108
21957: PUSH
21958: LD_INT 109
21960: PUSH
21961: LD_INT 112
21963: PUSH
21964: LD_INT 114
21966: PUSH
21967: LD_INT 116
21969: PUSH
21970: LD_INT 117
21972: PUSH
21973: LD_INT 118
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: ST_TO_ADDR
21994: GO 24093
21996: LD_INT 10
21998: DOUBLE
21999: EQUAL
22000: IFTRUE 22004
22002: GO 22200
22004: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22005: LD_ADDR_VAR 0 2
22009: PUSH
22010: LD_INT 2
22012: PUSH
22013: LD_INT 4
22015: PUSH
22016: LD_INT 5
22018: PUSH
22019: LD_INT 6
22021: PUSH
22022: LD_INT 7
22024: PUSH
22025: LD_INT 8
22027: PUSH
22028: LD_INT 9
22030: PUSH
22031: LD_INT 10
22033: PUSH
22034: LD_INT 11
22036: PUSH
22037: LD_INT 12
22039: PUSH
22040: LD_INT 13
22042: PUSH
22043: LD_INT 14
22045: PUSH
22046: LD_INT 15
22048: PUSH
22049: LD_INT 16
22051: PUSH
22052: LD_INT 17
22054: PUSH
22055: LD_INT 18
22057: PUSH
22058: LD_INT 19
22060: PUSH
22061: LD_INT 20
22063: PUSH
22064: LD_INT 21
22066: PUSH
22067: LD_INT 22
22069: PUSH
22070: LD_INT 23
22072: PUSH
22073: LD_INT 24
22075: PUSH
22076: LD_INT 25
22078: PUSH
22079: LD_INT 26
22081: PUSH
22082: LD_INT 28
22084: PUSH
22085: LD_INT 30
22087: PUSH
22088: LD_INT 31
22090: PUSH
22091: LD_INT 32
22093: PUSH
22094: LD_INT 36
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: PUSH
22128: LD_INT 101
22130: PUSH
22131: LD_INT 102
22133: PUSH
22134: LD_INT 103
22136: PUSH
22137: LD_INT 104
22139: PUSH
22140: LD_INT 105
22142: PUSH
22143: LD_INT 106
22145: PUSH
22146: LD_INT 107
22148: PUSH
22149: LD_INT 108
22151: PUSH
22152: LD_INT 109
22154: PUSH
22155: LD_INT 110
22157: PUSH
22158: LD_INT 111
22160: PUSH
22161: LD_INT 112
22163: PUSH
22164: LD_INT 114
22166: PUSH
22167: LD_INT 116
22169: PUSH
22170: LD_INT 117
22172: PUSH
22173: LD_INT 118
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: ST_TO_ADDR
22198: GO 24093
22200: LD_INT 11
22202: DOUBLE
22203: EQUAL
22204: IFTRUE 22208
22206: GO 22412
22208: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22209: LD_ADDR_VAR 0 2
22213: PUSH
22214: LD_INT 2
22216: PUSH
22217: LD_INT 3
22219: PUSH
22220: LD_INT 4
22222: PUSH
22223: LD_INT 5
22225: PUSH
22226: LD_INT 6
22228: PUSH
22229: LD_INT 7
22231: PUSH
22232: LD_INT 8
22234: PUSH
22235: LD_INT 9
22237: PUSH
22238: LD_INT 10
22240: PUSH
22241: LD_INT 11
22243: PUSH
22244: LD_INT 12
22246: PUSH
22247: LD_INT 13
22249: PUSH
22250: LD_INT 14
22252: PUSH
22253: LD_INT 15
22255: PUSH
22256: LD_INT 16
22258: PUSH
22259: LD_INT 17
22261: PUSH
22262: LD_INT 18
22264: PUSH
22265: LD_INT 19
22267: PUSH
22268: LD_INT 20
22270: PUSH
22271: LD_INT 21
22273: PUSH
22274: LD_INT 22
22276: PUSH
22277: LD_INT 23
22279: PUSH
22280: LD_INT 24
22282: PUSH
22283: LD_INT 25
22285: PUSH
22286: LD_INT 26
22288: PUSH
22289: LD_INT 28
22291: PUSH
22292: LD_INT 30
22294: PUSH
22295: LD_INT 31
22297: PUSH
22298: LD_INT 32
22300: PUSH
22301: LD_INT 34
22303: PUSH
22304: LD_INT 36
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: PUSH
22340: LD_INT 101
22342: PUSH
22343: LD_INT 102
22345: PUSH
22346: LD_INT 103
22348: PUSH
22349: LD_INT 104
22351: PUSH
22352: LD_INT 105
22354: PUSH
22355: LD_INT 106
22357: PUSH
22358: LD_INT 107
22360: PUSH
22361: LD_INT 108
22363: PUSH
22364: LD_INT 109
22366: PUSH
22367: LD_INT 110
22369: PUSH
22370: LD_INT 111
22372: PUSH
22373: LD_INT 112
22375: PUSH
22376: LD_INT 114
22378: PUSH
22379: LD_INT 116
22381: PUSH
22382: LD_INT 117
22384: PUSH
22385: LD_INT 118
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: PUSH
22406: EMPTY
22407: LIST
22408: LIST
22409: ST_TO_ADDR
22410: GO 24093
22412: LD_INT 12
22414: DOUBLE
22415: EQUAL
22416: IFTRUE 22420
22418: GO 22640
22420: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22421: LD_ADDR_VAR 0 2
22425: PUSH
22426: LD_INT 1
22428: PUSH
22429: LD_INT 2
22431: PUSH
22432: LD_INT 3
22434: PUSH
22435: LD_INT 4
22437: PUSH
22438: LD_INT 5
22440: PUSH
22441: LD_INT 6
22443: PUSH
22444: LD_INT 7
22446: PUSH
22447: LD_INT 8
22449: PUSH
22450: LD_INT 9
22452: PUSH
22453: LD_INT 10
22455: PUSH
22456: LD_INT 11
22458: PUSH
22459: LD_INT 12
22461: PUSH
22462: LD_INT 13
22464: PUSH
22465: LD_INT 14
22467: PUSH
22468: LD_INT 15
22470: PUSH
22471: LD_INT 16
22473: PUSH
22474: LD_INT 17
22476: PUSH
22477: LD_INT 18
22479: PUSH
22480: LD_INT 19
22482: PUSH
22483: LD_INT 20
22485: PUSH
22486: LD_INT 21
22488: PUSH
22489: LD_INT 22
22491: PUSH
22492: LD_INT 23
22494: PUSH
22495: LD_INT 24
22497: PUSH
22498: LD_INT 25
22500: PUSH
22501: LD_INT 26
22503: PUSH
22504: LD_INT 27
22506: PUSH
22507: LD_INT 28
22509: PUSH
22510: LD_INT 30
22512: PUSH
22513: LD_INT 31
22515: PUSH
22516: LD_INT 32
22518: PUSH
22519: LD_INT 33
22521: PUSH
22522: LD_INT 34
22524: PUSH
22525: LD_INT 36
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: PUSH
22564: LD_INT 101
22566: PUSH
22567: LD_INT 102
22569: PUSH
22570: LD_INT 103
22572: PUSH
22573: LD_INT 104
22575: PUSH
22576: LD_INT 105
22578: PUSH
22579: LD_INT 106
22581: PUSH
22582: LD_INT 107
22584: PUSH
22585: LD_INT 108
22587: PUSH
22588: LD_INT 109
22590: PUSH
22591: LD_INT 110
22593: PUSH
22594: LD_INT 111
22596: PUSH
22597: LD_INT 112
22599: PUSH
22600: LD_INT 113
22602: PUSH
22603: LD_INT 114
22605: PUSH
22606: LD_INT 116
22608: PUSH
22609: LD_INT 117
22611: PUSH
22612: LD_INT 118
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: ST_TO_ADDR
22638: GO 24093
22640: LD_INT 13
22642: DOUBLE
22643: EQUAL
22644: IFTRUE 22648
22646: GO 22856
22648: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22649: LD_ADDR_VAR 0 2
22653: PUSH
22654: LD_INT 1
22656: PUSH
22657: LD_INT 2
22659: PUSH
22660: LD_INT 3
22662: PUSH
22663: LD_INT 4
22665: PUSH
22666: LD_INT 5
22668: PUSH
22669: LD_INT 8
22671: PUSH
22672: LD_INT 9
22674: PUSH
22675: LD_INT 10
22677: PUSH
22678: LD_INT 11
22680: PUSH
22681: LD_INT 12
22683: PUSH
22684: LD_INT 14
22686: PUSH
22687: LD_INT 15
22689: PUSH
22690: LD_INT 16
22692: PUSH
22693: LD_INT 17
22695: PUSH
22696: LD_INT 18
22698: PUSH
22699: LD_INT 19
22701: PUSH
22702: LD_INT 20
22704: PUSH
22705: LD_INT 21
22707: PUSH
22708: LD_INT 22
22710: PUSH
22711: LD_INT 23
22713: PUSH
22714: LD_INT 24
22716: PUSH
22717: LD_INT 25
22719: PUSH
22720: LD_INT 26
22722: PUSH
22723: LD_INT 27
22725: PUSH
22726: LD_INT 28
22728: PUSH
22729: LD_INT 30
22731: PUSH
22732: LD_INT 31
22734: PUSH
22735: LD_INT 32
22737: PUSH
22738: LD_INT 33
22740: PUSH
22741: LD_INT 34
22743: PUSH
22744: LD_INT 36
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: PUSH
22780: LD_INT 101
22782: PUSH
22783: LD_INT 102
22785: PUSH
22786: LD_INT 103
22788: PUSH
22789: LD_INT 104
22791: PUSH
22792: LD_INT 105
22794: PUSH
22795: LD_INT 106
22797: PUSH
22798: LD_INT 107
22800: PUSH
22801: LD_INT 108
22803: PUSH
22804: LD_INT 109
22806: PUSH
22807: LD_INT 110
22809: PUSH
22810: LD_INT 111
22812: PUSH
22813: LD_INT 112
22815: PUSH
22816: LD_INT 113
22818: PUSH
22819: LD_INT 114
22821: PUSH
22822: LD_INT 116
22824: PUSH
22825: LD_INT 117
22827: PUSH
22828: LD_INT 118
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: ST_TO_ADDR
22854: GO 24093
22856: LD_INT 14
22858: DOUBLE
22859: EQUAL
22860: IFTRUE 22864
22862: GO 23088
22864: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22865: LD_ADDR_VAR 0 2
22869: PUSH
22870: LD_INT 1
22872: PUSH
22873: LD_INT 2
22875: PUSH
22876: LD_INT 3
22878: PUSH
22879: LD_INT 4
22881: PUSH
22882: LD_INT 5
22884: PUSH
22885: LD_INT 6
22887: PUSH
22888: LD_INT 7
22890: PUSH
22891: LD_INT 8
22893: PUSH
22894: LD_INT 9
22896: PUSH
22897: LD_INT 10
22899: PUSH
22900: LD_INT 11
22902: PUSH
22903: LD_INT 12
22905: PUSH
22906: LD_INT 13
22908: PUSH
22909: LD_INT 14
22911: PUSH
22912: LD_INT 15
22914: PUSH
22915: LD_INT 16
22917: PUSH
22918: LD_INT 17
22920: PUSH
22921: LD_INT 18
22923: PUSH
22924: LD_INT 19
22926: PUSH
22927: LD_INT 20
22929: PUSH
22930: LD_INT 21
22932: PUSH
22933: LD_INT 22
22935: PUSH
22936: LD_INT 23
22938: PUSH
22939: LD_INT 24
22941: PUSH
22942: LD_INT 25
22944: PUSH
22945: LD_INT 26
22947: PUSH
22948: LD_INT 27
22950: PUSH
22951: LD_INT 28
22953: PUSH
22954: LD_INT 29
22956: PUSH
22957: LD_INT 30
22959: PUSH
22960: LD_INT 31
22962: PUSH
22963: LD_INT 32
22965: PUSH
22966: LD_INT 33
22968: PUSH
22969: LD_INT 34
22971: PUSH
22972: LD_INT 36
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: PUSH
23012: LD_INT 101
23014: PUSH
23015: LD_INT 102
23017: PUSH
23018: LD_INT 103
23020: PUSH
23021: LD_INT 104
23023: PUSH
23024: LD_INT 105
23026: PUSH
23027: LD_INT 106
23029: PUSH
23030: LD_INT 107
23032: PUSH
23033: LD_INT 108
23035: PUSH
23036: LD_INT 109
23038: PUSH
23039: LD_INT 110
23041: PUSH
23042: LD_INT 111
23044: PUSH
23045: LD_INT 112
23047: PUSH
23048: LD_INT 113
23050: PUSH
23051: LD_INT 114
23053: PUSH
23054: LD_INT 116
23056: PUSH
23057: LD_INT 117
23059: PUSH
23060: LD_INT 118
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: PUSH
23082: EMPTY
23083: LIST
23084: LIST
23085: ST_TO_ADDR
23086: GO 24093
23088: LD_INT 15
23090: DOUBLE
23091: EQUAL
23092: IFTRUE 23096
23094: GO 23320
23096: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23097: LD_ADDR_VAR 0 2
23101: PUSH
23102: LD_INT 1
23104: PUSH
23105: LD_INT 2
23107: PUSH
23108: LD_INT 3
23110: PUSH
23111: LD_INT 4
23113: PUSH
23114: LD_INT 5
23116: PUSH
23117: LD_INT 6
23119: PUSH
23120: LD_INT 7
23122: PUSH
23123: LD_INT 8
23125: PUSH
23126: LD_INT 9
23128: PUSH
23129: LD_INT 10
23131: PUSH
23132: LD_INT 11
23134: PUSH
23135: LD_INT 12
23137: PUSH
23138: LD_INT 13
23140: PUSH
23141: LD_INT 14
23143: PUSH
23144: LD_INT 15
23146: PUSH
23147: LD_INT 16
23149: PUSH
23150: LD_INT 17
23152: PUSH
23153: LD_INT 18
23155: PUSH
23156: LD_INT 19
23158: PUSH
23159: LD_INT 20
23161: PUSH
23162: LD_INT 21
23164: PUSH
23165: LD_INT 22
23167: PUSH
23168: LD_INT 23
23170: PUSH
23171: LD_INT 24
23173: PUSH
23174: LD_INT 25
23176: PUSH
23177: LD_INT 26
23179: PUSH
23180: LD_INT 27
23182: PUSH
23183: LD_INT 28
23185: PUSH
23186: LD_INT 29
23188: PUSH
23189: LD_INT 30
23191: PUSH
23192: LD_INT 31
23194: PUSH
23195: LD_INT 32
23197: PUSH
23198: LD_INT 33
23200: PUSH
23201: LD_INT 34
23203: PUSH
23204: LD_INT 36
23206: PUSH
23207: EMPTY
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: PUSH
23244: LD_INT 101
23246: PUSH
23247: LD_INT 102
23249: PUSH
23250: LD_INT 103
23252: PUSH
23253: LD_INT 104
23255: PUSH
23256: LD_INT 105
23258: PUSH
23259: LD_INT 106
23261: PUSH
23262: LD_INT 107
23264: PUSH
23265: LD_INT 108
23267: PUSH
23268: LD_INT 109
23270: PUSH
23271: LD_INT 110
23273: PUSH
23274: LD_INT 111
23276: PUSH
23277: LD_INT 112
23279: PUSH
23280: LD_INT 113
23282: PUSH
23283: LD_INT 114
23285: PUSH
23286: LD_INT 116
23288: PUSH
23289: LD_INT 117
23291: PUSH
23292: LD_INT 118
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: PUSH
23314: EMPTY
23315: LIST
23316: LIST
23317: ST_TO_ADDR
23318: GO 24093
23320: LD_INT 16
23322: DOUBLE
23323: EQUAL
23324: IFTRUE 23328
23326: GO 23464
23328: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23329: LD_ADDR_VAR 0 2
23333: PUSH
23334: LD_INT 2
23336: PUSH
23337: LD_INT 4
23339: PUSH
23340: LD_INT 5
23342: PUSH
23343: LD_INT 7
23345: PUSH
23346: LD_INT 11
23348: PUSH
23349: LD_INT 12
23351: PUSH
23352: LD_INT 15
23354: PUSH
23355: LD_INT 16
23357: PUSH
23358: LD_INT 20
23360: PUSH
23361: LD_INT 21
23363: PUSH
23364: LD_INT 22
23366: PUSH
23367: LD_INT 23
23369: PUSH
23370: LD_INT 25
23372: PUSH
23373: LD_INT 26
23375: PUSH
23376: LD_INT 30
23378: PUSH
23379: LD_INT 31
23381: PUSH
23382: LD_INT 32
23384: PUSH
23385: LD_INT 33
23387: PUSH
23388: LD_INT 34
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: PUSH
23412: LD_INT 101
23414: PUSH
23415: LD_INT 102
23417: PUSH
23418: LD_INT 103
23420: PUSH
23421: LD_INT 106
23423: PUSH
23424: LD_INT 108
23426: PUSH
23427: LD_INT 112
23429: PUSH
23430: LD_INT 113
23432: PUSH
23433: LD_INT 114
23435: PUSH
23436: LD_INT 116
23438: PUSH
23439: LD_INT 117
23441: PUSH
23442: LD_INT 118
23444: PUSH
23445: EMPTY
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: ST_TO_ADDR
23462: GO 24093
23464: LD_INT 17
23466: DOUBLE
23467: EQUAL
23468: IFTRUE 23472
23470: GO 23696
23472: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23473: LD_ADDR_VAR 0 2
23477: PUSH
23478: LD_INT 1
23480: PUSH
23481: LD_INT 2
23483: PUSH
23484: LD_INT 3
23486: PUSH
23487: LD_INT 4
23489: PUSH
23490: LD_INT 5
23492: PUSH
23493: LD_INT 6
23495: PUSH
23496: LD_INT 7
23498: PUSH
23499: LD_INT 8
23501: PUSH
23502: LD_INT 9
23504: PUSH
23505: LD_INT 10
23507: PUSH
23508: LD_INT 11
23510: PUSH
23511: LD_INT 12
23513: PUSH
23514: LD_INT 13
23516: PUSH
23517: LD_INT 14
23519: PUSH
23520: LD_INT 15
23522: PUSH
23523: LD_INT 16
23525: PUSH
23526: LD_INT 17
23528: PUSH
23529: LD_INT 18
23531: PUSH
23532: LD_INT 19
23534: PUSH
23535: LD_INT 20
23537: PUSH
23538: LD_INT 21
23540: PUSH
23541: LD_INT 22
23543: PUSH
23544: LD_INT 23
23546: PUSH
23547: LD_INT 24
23549: PUSH
23550: LD_INT 25
23552: PUSH
23553: LD_INT 26
23555: PUSH
23556: LD_INT 27
23558: PUSH
23559: LD_INT 28
23561: PUSH
23562: LD_INT 29
23564: PUSH
23565: LD_INT 30
23567: PUSH
23568: LD_INT 31
23570: PUSH
23571: LD_INT 32
23573: PUSH
23574: LD_INT 33
23576: PUSH
23577: LD_INT 34
23579: PUSH
23580: LD_INT 36
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: PUSH
23620: LD_INT 101
23622: PUSH
23623: LD_INT 102
23625: PUSH
23626: LD_INT 103
23628: PUSH
23629: LD_INT 104
23631: PUSH
23632: LD_INT 105
23634: PUSH
23635: LD_INT 106
23637: PUSH
23638: LD_INT 107
23640: PUSH
23641: LD_INT 108
23643: PUSH
23644: LD_INT 109
23646: PUSH
23647: LD_INT 110
23649: PUSH
23650: LD_INT 111
23652: PUSH
23653: LD_INT 112
23655: PUSH
23656: LD_INT 113
23658: PUSH
23659: LD_INT 114
23661: PUSH
23662: LD_INT 116
23664: PUSH
23665: LD_INT 117
23667: PUSH
23668: LD_INT 118
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: ST_TO_ADDR
23694: GO 24093
23696: LD_INT 18
23698: DOUBLE
23699: EQUAL
23700: IFTRUE 23704
23702: GO 23852
23704: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23705: LD_ADDR_VAR 0 2
23709: PUSH
23710: LD_INT 2
23712: PUSH
23713: LD_INT 4
23715: PUSH
23716: LD_INT 5
23718: PUSH
23719: LD_INT 7
23721: PUSH
23722: LD_INT 11
23724: PUSH
23725: LD_INT 12
23727: PUSH
23728: LD_INT 15
23730: PUSH
23731: LD_INT 16
23733: PUSH
23734: LD_INT 20
23736: PUSH
23737: LD_INT 21
23739: PUSH
23740: LD_INT 22
23742: PUSH
23743: LD_INT 23
23745: PUSH
23746: LD_INT 25
23748: PUSH
23749: LD_INT 26
23751: PUSH
23752: LD_INT 30
23754: PUSH
23755: LD_INT 31
23757: PUSH
23758: LD_INT 32
23760: PUSH
23761: LD_INT 33
23763: PUSH
23764: LD_INT 34
23766: PUSH
23767: LD_INT 35
23769: PUSH
23770: LD_INT 36
23772: PUSH
23773: EMPTY
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: PUSH
23796: LD_INT 101
23798: PUSH
23799: LD_INT 102
23801: PUSH
23802: LD_INT 103
23804: PUSH
23805: LD_INT 106
23807: PUSH
23808: LD_INT 108
23810: PUSH
23811: LD_INT 112
23813: PUSH
23814: LD_INT 113
23816: PUSH
23817: LD_INT 114
23819: PUSH
23820: LD_INT 115
23822: PUSH
23823: LD_INT 116
23825: PUSH
23826: LD_INT 117
23828: PUSH
23829: LD_INT 118
23831: PUSH
23832: EMPTY
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: ST_TO_ADDR
23850: GO 24093
23852: LD_INT 19
23854: DOUBLE
23855: EQUAL
23856: IFTRUE 23860
23858: GO 24092
23860: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23861: LD_ADDR_VAR 0 2
23865: PUSH
23866: LD_INT 1
23868: PUSH
23869: LD_INT 2
23871: PUSH
23872: LD_INT 3
23874: PUSH
23875: LD_INT 4
23877: PUSH
23878: LD_INT 5
23880: PUSH
23881: LD_INT 6
23883: PUSH
23884: LD_INT 7
23886: PUSH
23887: LD_INT 8
23889: PUSH
23890: LD_INT 9
23892: PUSH
23893: LD_INT 10
23895: PUSH
23896: LD_INT 11
23898: PUSH
23899: LD_INT 12
23901: PUSH
23902: LD_INT 13
23904: PUSH
23905: LD_INT 14
23907: PUSH
23908: LD_INT 15
23910: PUSH
23911: LD_INT 16
23913: PUSH
23914: LD_INT 17
23916: PUSH
23917: LD_INT 18
23919: PUSH
23920: LD_INT 19
23922: PUSH
23923: LD_INT 20
23925: PUSH
23926: LD_INT 21
23928: PUSH
23929: LD_INT 22
23931: PUSH
23932: LD_INT 23
23934: PUSH
23935: LD_INT 24
23937: PUSH
23938: LD_INT 25
23940: PUSH
23941: LD_INT 26
23943: PUSH
23944: LD_INT 27
23946: PUSH
23947: LD_INT 28
23949: PUSH
23950: LD_INT 29
23952: PUSH
23953: LD_INT 30
23955: PUSH
23956: LD_INT 31
23958: PUSH
23959: LD_INT 32
23961: PUSH
23962: LD_INT 33
23964: PUSH
23965: LD_INT 34
23967: PUSH
23968: LD_INT 35
23970: PUSH
23971: LD_INT 36
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: PUSH
24012: LD_INT 101
24014: PUSH
24015: LD_INT 102
24017: PUSH
24018: LD_INT 103
24020: PUSH
24021: LD_INT 104
24023: PUSH
24024: LD_INT 105
24026: PUSH
24027: LD_INT 106
24029: PUSH
24030: LD_INT 107
24032: PUSH
24033: LD_INT 108
24035: PUSH
24036: LD_INT 109
24038: PUSH
24039: LD_INT 110
24041: PUSH
24042: LD_INT 111
24044: PUSH
24045: LD_INT 112
24047: PUSH
24048: LD_INT 113
24050: PUSH
24051: LD_INT 114
24053: PUSH
24054: LD_INT 115
24056: PUSH
24057: LD_INT 116
24059: PUSH
24060: LD_INT 117
24062: PUSH
24063: LD_INT 118
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: PUSH
24086: EMPTY
24087: LIST
24088: LIST
24089: ST_TO_ADDR
24090: GO 24093
24092: POP
// end else
24093: GO 24324
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24095: LD_ADDR_VAR 0 2
24099: PUSH
24100: LD_INT 1
24102: PUSH
24103: LD_INT 2
24105: PUSH
24106: LD_INT 3
24108: PUSH
24109: LD_INT 4
24111: PUSH
24112: LD_INT 5
24114: PUSH
24115: LD_INT 6
24117: PUSH
24118: LD_INT 7
24120: PUSH
24121: LD_INT 8
24123: PUSH
24124: LD_INT 9
24126: PUSH
24127: LD_INT 10
24129: PUSH
24130: LD_INT 11
24132: PUSH
24133: LD_INT 12
24135: PUSH
24136: LD_INT 13
24138: PUSH
24139: LD_INT 14
24141: PUSH
24142: LD_INT 15
24144: PUSH
24145: LD_INT 16
24147: PUSH
24148: LD_INT 17
24150: PUSH
24151: LD_INT 18
24153: PUSH
24154: LD_INT 19
24156: PUSH
24157: LD_INT 20
24159: PUSH
24160: LD_INT 21
24162: PUSH
24163: LD_INT 22
24165: PUSH
24166: LD_INT 23
24168: PUSH
24169: LD_INT 24
24171: PUSH
24172: LD_INT 25
24174: PUSH
24175: LD_INT 26
24177: PUSH
24178: LD_INT 27
24180: PUSH
24181: LD_INT 28
24183: PUSH
24184: LD_INT 29
24186: PUSH
24187: LD_INT 30
24189: PUSH
24190: LD_INT 31
24192: PUSH
24193: LD_INT 32
24195: PUSH
24196: LD_INT 33
24198: PUSH
24199: LD_INT 34
24201: PUSH
24202: LD_INT 35
24204: PUSH
24205: LD_INT 36
24207: PUSH
24208: EMPTY
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: PUSH
24246: LD_INT 101
24248: PUSH
24249: LD_INT 102
24251: PUSH
24252: LD_INT 103
24254: PUSH
24255: LD_INT 104
24257: PUSH
24258: LD_INT 105
24260: PUSH
24261: LD_INT 106
24263: PUSH
24264: LD_INT 107
24266: PUSH
24267: LD_INT 108
24269: PUSH
24270: LD_INT 109
24272: PUSH
24273: LD_INT 110
24275: PUSH
24276: LD_INT 111
24278: PUSH
24279: LD_INT 112
24281: PUSH
24282: LD_INT 113
24284: PUSH
24285: LD_INT 114
24287: PUSH
24288: LD_INT 115
24290: PUSH
24291: LD_INT 116
24293: PUSH
24294: LD_INT 117
24296: PUSH
24297: LD_INT 118
24299: PUSH
24300: EMPTY
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: ST_TO_ADDR
// if result then
24324: LD_VAR 0 2
24328: IFFALSE 25114
// begin normal :=  ;
24330: LD_ADDR_VAR 0 5
24334: PUSH
24335: LD_STRING 
24337: ST_TO_ADDR
// hardcore :=  ;
24338: LD_ADDR_VAR 0 6
24342: PUSH
24343: LD_STRING 
24345: ST_TO_ADDR
// active :=  ;
24346: LD_ADDR_VAR 0 7
24350: PUSH
24351: LD_STRING 
24353: ST_TO_ADDR
// for i = 1 to normalCounter do
24354: LD_ADDR_VAR 0 8
24358: PUSH
24359: DOUBLE
24360: LD_INT 1
24362: DEC
24363: ST_TO_ADDR
24364: LD_EXP 47
24368: PUSH
24369: FOR_TO
24370: IFFALSE 24471
// begin tmp := 0 ;
24372: LD_ADDR_VAR 0 3
24376: PUSH
24377: LD_STRING 0
24379: ST_TO_ADDR
// if result [ 1 ] then
24380: LD_VAR 0 2
24384: PUSH
24385: LD_INT 1
24387: ARRAY
24388: IFFALSE 24453
// if result [ 1 ] [ 1 ] = i then
24390: LD_VAR 0 2
24394: PUSH
24395: LD_INT 1
24397: ARRAY
24398: PUSH
24399: LD_INT 1
24401: ARRAY
24402: PUSH
24403: LD_VAR 0 8
24407: EQUAL
24408: IFFALSE 24453
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24410: LD_ADDR_VAR 0 2
24414: PUSH
24415: LD_VAR 0 2
24419: PPUSH
24420: LD_INT 1
24422: PPUSH
24423: LD_VAR 0 2
24427: PUSH
24428: LD_INT 1
24430: ARRAY
24431: PPUSH
24432: LD_INT 1
24434: PPUSH
24435: CALL_OW 3
24439: PPUSH
24440: CALL_OW 1
24444: ST_TO_ADDR
// tmp := 1 ;
24445: LD_ADDR_VAR 0 3
24449: PUSH
24450: LD_STRING 1
24452: ST_TO_ADDR
// end ; normal := normal & tmp ;
24453: LD_ADDR_VAR 0 5
24457: PUSH
24458: LD_VAR 0 5
24462: PUSH
24463: LD_VAR 0 3
24467: STR
24468: ST_TO_ADDR
// end ;
24469: GO 24369
24471: POP
24472: POP
// for i = 1 to hardcoreCounter do
24473: LD_ADDR_VAR 0 8
24477: PUSH
24478: DOUBLE
24479: LD_INT 1
24481: DEC
24482: ST_TO_ADDR
24483: LD_EXP 48
24487: PUSH
24488: FOR_TO
24489: IFFALSE 24594
// begin tmp := 0 ;
24491: LD_ADDR_VAR 0 3
24495: PUSH
24496: LD_STRING 0
24498: ST_TO_ADDR
// if result [ 2 ] then
24499: LD_VAR 0 2
24503: PUSH
24504: LD_INT 2
24506: ARRAY
24507: IFFALSE 24576
// if result [ 2 ] [ 1 ] = 100 + i then
24509: LD_VAR 0 2
24513: PUSH
24514: LD_INT 2
24516: ARRAY
24517: PUSH
24518: LD_INT 1
24520: ARRAY
24521: PUSH
24522: LD_INT 100
24524: PUSH
24525: LD_VAR 0 8
24529: PLUS
24530: EQUAL
24531: IFFALSE 24576
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24533: LD_ADDR_VAR 0 2
24537: PUSH
24538: LD_VAR 0 2
24542: PPUSH
24543: LD_INT 2
24545: PPUSH
24546: LD_VAR 0 2
24550: PUSH
24551: LD_INT 2
24553: ARRAY
24554: PPUSH
24555: LD_INT 1
24557: PPUSH
24558: CALL_OW 3
24562: PPUSH
24563: CALL_OW 1
24567: ST_TO_ADDR
// tmp := 1 ;
24568: LD_ADDR_VAR 0 3
24572: PUSH
24573: LD_STRING 1
24575: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24576: LD_ADDR_VAR 0 6
24580: PUSH
24581: LD_VAR 0 6
24585: PUSH
24586: LD_VAR 0 3
24590: STR
24591: ST_TO_ADDR
// end ;
24592: GO 24488
24594: POP
24595: POP
// if isGameLoad then
24596: LD_VAR 0 1
24600: IFFALSE 25075
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24602: LD_ADDR_VAR 0 4
24606: PUSH
24607: LD_EXP 51
24611: PUSH
24612: LD_EXP 50
24616: PUSH
24617: LD_EXP 52
24621: PUSH
24622: LD_EXP 49
24626: PUSH
24627: LD_EXP 53
24631: PUSH
24632: LD_EXP 54
24636: PUSH
24637: LD_EXP 55
24641: PUSH
24642: LD_EXP 56
24646: PUSH
24647: LD_EXP 57
24651: PUSH
24652: LD_EXP 58
24656: PUSH
24657: LD_EXP 59
24661: PUSH
24662: LD_EXP 60
24666: PUSH
24667: LD_EXP 61
24671: PUSH
24672: LD_EXP 62
24676: PUSH
24677: LD_EXP 70
24681: PUSH
24682: LD_EXP 71
24686: PUSH
24687: LD_EXP 72
24691: PUSH
24692: LD_EXP 73
24696: PUSH
24697: LD_EXP 75
24701: PUSH
24702: LD_EXP 76
24706: PUSH
24707: LD_EXP 77
24711: PUSH
24712: LD_EXP 80
24716: PUSH
24717: LD_EXP 82
24721: PUSH
24722: LD_EXP 83
24726: PUSH
24727: LD_EXP 84
24731: PUSH
24732: LD_EXP 86
24736: PUSH
24737: LD_EXP 87
24741: PUSH
24742: LD_EXP 90
24746: PUSH
24747: LD_EXP 91
24751: PUSH
24752: LD_EXP 92
24756: PUSH
24757: LD_EXP 93
24761: PUSH
24762: LD_EXP 94
24766: PUSH
24767: LD_EXP 95
24771: PUSH
24772: LD_EXP 96
24776: PUSH
24777: LD_EXP 97
24781: PUSH
24782: LD_EXP 98
24786: PUSH
24787: LD_EXP 63
24791: PUSH
24792: LD_EXP 64
24796: PUSH
24797: LD_EXP 67
24801: PUSH
24802: LD_EXP 68
24806: PUSH
24807: LD_EXP 69
24811: PUSH
24812: LD_EXP 65
24816: PUSH
24817: LD_EXP 66
24821: PUSH
24822: LD_EXP 74
24826: PUSH
24827: LD_EXP 78
24831: PUSH
24832: LD_EXP 79
24836: PUSH
24837: LD_EXP 81
24841: PUSH
24842: LD_EXP 85
24846: PUSH
24847: LD_EXP 88
24851: PUSH
24852: LD_EXP 89
24856: PUSH
24857: LD_EXP 99
24861: PUSH
24862: LD_EXP 100
24866: PUSH
24867: LD_EXP 101
24871: PUSH
24872: LD_EXP 102
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: ST_TO_ADDR
// tmp :=  ;
24933: LD_ADDR_VAR 0 3
24937: PUSH
24938: LD_STRING 
24940: ST_TO_ADDR
// for i = 1 to normalCounter do
24941: LD_ADDR_VAR 0 8
24945: PUSH
24946: DOUBLE
24947: LD_INT 1
24949: DEC
24950: ST_TO_ADDR
24951: LD_EXP 47
24955: PUSH
24956: FOR_TO
24957: IFFALSE 24993
// begin if flags [ i ] then
24959: LD_VAR 0 4
24963: PUSH
24964: LD_VAR 0 8
24968: ARRAY
24969: IFFALSE 24991
// tmp := tmp & i & ; ;
24971: LD_ADDR_VAR 0 3
24975: PUSH
24976: LD_VAR 0 3
24980: PUSH
24981: LD_VAR 0 8
24985: STR
24986: PUSH
24987: LD_STRING ;
24989: STR
24990: ST_TO_ADDR
// end ;
24991: GO 24956
24993: POP
24994: POP
// for i = 1 to hardcoreCounter do
24995: LD_ADDR_VAR 0 8
24999: PUSH
25000: DOUBLE
25001: LD_INT 1
25003: DEC
25004: ST_TO_ADDR
25005: LD_EXP 48
25009: PUSH
25010: FOR_TO
25011: IFFALSE 25057
// begin if flags [ normalCounter + i ] then
25013: LD_VAR 0 4
25017: PUSH
25018: LD_EXP 47
25022: PUSH
25023: LD_VAR 0 8
25027: PLUS
25028: ARRAY
25029: IFFALSE 25055
// tmp := tmp & ( 100 + i ) & ; ;
25031: LD_ADDR_VAR 0 3
25035: PUSH
25036: LD_VAR 0 3
25040: PUSH
25041: LD_INT 100
25043: PUSH
25044: LD_VAR 0 8
25048: PLUS
25049: STR
25050: PUSH
25051: LD_STRING ;
25053: STR
25054: ST_TO_ADDR
// end ;
25055: GO 25010
25057: POP
25058: POP
// if tmp then
25059: LD_VAR 0 3
25063: IFFALSE 25075
// active := tmp ;
25065: LD_ADDR_VAR 0 7
25069: PUSH
25070: LD_VAR 0 3
25074: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25075: LD_STRING getStreamItemsFromMission("
25077: PUSH
25078: LD_VAR 0 5
25082: STR
25083: PUSH
25084: LD_STRING ","
25086: STR
25087: PUSH
25088: LD_VAR 0 6
25092: STR
25093: PUSH
25094: LD_STRING ","
25096: STR
25097: PUSH
25098: LD_VAR 0 7
25102: STR
25103: PUSH
25104: LD_STRING ")
25106: STR
25107: PPUSH
25108: CALL_OW 559
// end else
25112: GO 25121
// ToLua ( getStreamItemsFromMission("","","") ) ;
25114: LD_STRING getStreamItemsFromMission("","","")
25116: PPUSH
25117: CALL_OW 559
// end ;
25121: LD_VAR 0 2
25125: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25126: LD_EXP 46
25130: PUSH
25131: LD_EXP 51
25135: AND
25136: IFFALSE 25260
25138: GO 25140
25140: DISABLE
25141: LD_INT 0
25143: PPUSH
25144: PPUSH
// begin enable ;
25145: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25146: LD_ADDR_VAR 0 2
25150: PUSH
25151: LD_INT 22
25153: PUSH
25154: LD_OWVAR 2
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PUSH
25163: LD_INT 2
25165: PUSH
25166: LD_INT 34
25168: PUSH
25169: LD_INT 7
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: LD_INT 34
25178: PUSH
25179: LD_INT 45
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: LD_INT 34
25188: PUSH
25189: LD_INT 28
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 34
25198: PUSH
25199: LD_INT 47
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PPUSH
25217: CALL_OW 69
25221: ST_TO_ADDR
// if not tmp then
25222: LD_VAR 0 2
25226: NOT
25227: IFFALSE 25231
// exit ;
25229: GO 25260
// for i in tmp do
25231: LD_ADDR_VAR 0 1
25235: PUSH
25236: LD_VAR 0 2
25240: PUSH
25241: FOR_IN
25242: IFFALSE 25258
// begin SetLives ( i , 0 ) ;
25244: LD_VAR 0 1
25248: PPUSH
25249: LD_INT 0
25251: PPUSH
25252: CALL_OW 234
// end ;
25256: GO 25241
25258: POP
25259: POP
// end ;
25260: PPOPN 2
25262: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25263: LD_EXP 46
25267: PUSH
25268: LD_EXP 52
25272: AND
25273: IFFALSE 25357
25275: GO 25277
25277: DISABLE
25278: LD_INT 0
25280: PPUSH
25281: PPUSH
// begin enable ;
25282: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25283: LD_ADDR_VAR 0 2
25287: PUSH
25288: LD_INT 22
25290: PUSH
25291: LD_OWVAR 2
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PUSH
25300: LD_INT 32
25302: PUSH
25303: LD_INT 3
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PPUSH
25314: CALL_OW 69
25318: ST_TO_ADDR
// if not tmp then
25319: LD_VAR 0 2
25323: NOT
25324: IFFALSE 25328
// exit ;
25326: GO 25357
// for i in tmp do
25328: LD_ADDR_VAR 0 1
25332: PUSH
25333: LD_VAR 0 2
25337: PUSH
25338: FOR_IN
25339: IFFALSE 25355
// begin SetLives ( i , 0 ) ;
25341: LD_VAR 0 1
25345: PPUSH
25346: LD_INT 0
25348: PPUSH
25349: CALL_OW 234
// end ;
25353: GO 25338
25355: POP
25356: POP
// end ;
25357: PPOPN 2
25359: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25360: LD_EXP 46
25364: PUSH
25365: LD_EXP 49
25369: AND
25370: IFFALSE 25463
25372: GO 25374
25374: DISABLE
25375: LD_INT 0
25377: PPUSH
// begin enable ;
25378: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25379: LD_ADDR_VAR 0 1
25383: PUSH
25384: LD_INT 22
25386: PUSH
25387: LD_OWVAR 2
25391: PUSH
25392: EMPTY
25393: LIST
25394: LIST
25395: PUSH
25396: LD_INT 2
25398: PUSH
25399: LD_INT 25
25401: PUSH
25402: LD_INT 5
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PUSH
25409: LD_INT 25
25411: PUSH
25412: LD_INT 9
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PUSH
25419: LD_INT 25
25421: PUSH
25422: LD_INT 8
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: PUSH
25435: EMPTY
25436: LIST
25437: LIST
25438: PPUSH
25439: CALL_OW 69
25443: PUSH
25444: FOR_IN
25445: IFFALSE 25461
// begin SetClass ( i , 1 ) ;
25447: LD_VAR 0 1
25451: PPUSH
25452: LD_INT 1
25454: PPUSH
25455: CALL_OW 336
// end ;
25459: GO 25444
25461: POP
25462: POP
// end ;
25463: PPOPN 1
25465: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25466: LD_EXP 46
25470: PUSH
25471: LD_EXP 50
25475: AND
25476: PUSH
25477: LD_OWVAR 65
25481: PUSH
25482: LD_INT 7
25484: LESS
25485: AND
25486: IFFALSE 25500
25488: GO 25490
25490: DISABLE
// begin enable ;
25491: ENABLE
// game_speed := 7 ;
25492: LD_ADDR_OWVAR 65
25496: PUSH
25497: LD_INT 7
25499: ST_TO_ADDR
// end ;
25500: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25501: LD_EXP 46
25505: PUSH
25506: LD_EXP 53
25510: AND
25511: IFFALSE 25713
25513: GO 25515
25515: DISABLE
25516: LD_INT 0
25518: PPUSH
25519: PPUSH
25520: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25521: LD_ADDR_VAR 0 3
25525: PUSH
25526: LD_INT 81
25528: PUSH
25529: LD_OWVAR 2
25533: PUSH
25534: EMPTY
25535: LIST
25536: LIST
25537: PUSH
25538: LD_INT 21
25540: PUSH
25541: LD_INT 1
25543: PUSH
25544: EMPTY
25545: LIST
25546: LIST
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PPUSH
25552: CALL_OW 69
25556: ST_TO_ADDR
// if not tmp then
25557: LD_VAR 0 3
25561: NOT
25562: IFFALSE 25566
// exit ;
25564: GO 25713
// if tmp > 5 then
25566: LD_VAR 0 3
25570: PUSH
25571: LD_INT 5
25573: GREATER
25574: IFFALSE 25586
// k := 5 else
25576: LD_ADDR_VAR 0 2
25580: PUSH
25581: LD_INT 5
25583: ST_TO_ADDR
25584: GO 25596
// k := tmp ;
25586: LD_ADDR_VAR 0 2
25590: PUSH
25591: LD_VAR 0 3
25595: ST_TO_ADDR
// for i := 1 to k do
25596: LD_ADDR_VAR 0 1
25600: PUSH
25601: DOUBLE
25602: LD_INT 1
25604: DEC
25605: ST_TO_ADDR
25606: LD_VAR 0 2
25610: PUSH
25611: FOR_TO
25612: IFFALSE 25711
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25614: LD_VAR 0 3
25618: PUSH
25619: LD_VAR 0 1
25623: ARRAY
25624: PPUSH
25625: LD_VAR 0 1
25629: PUSH
25630: LD_INT 4
25632: MOD
25633: PUSH
25634: LD_INT 1
25636: PLUS
25637: PPUSH
25638: CALL_OW 259
25642: PUSH
25643: LD_INT 10
25645: LESS
25646: IFFALSE 25709
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25648: LD_VAR 0 3
25652: PUSH
25653: LD_VAR 0 1
25657: ARRAY
25658: PPUSH
25659: LD_VAR 0 1
25663: PUSH
25664: LD_INT 4
25666: MOD
25667: PUSH
25668: LD_INT 1
25670: PLUS
25671: PPUSH
25672: LD_VAR 0 3
25676: PUSH
25677: LD_VAR 0 1
25681: ARRAY
25682: PPUSH
25683: LD_VAR 0 1
25687: PUSH
25688: LD_INT 4
25690: MOD
25691: PUSH
25692: LD_INT 1
25694: PLUS
25695: PPUSH
25696: CALL_OW 259
25700: PUSH
25701: LD_INT 1
25703: PLUS
25704: PPUSH
25705: CALL_OW 237
25709: GO 25611
25711: POP
25712: POP
// end ;
25713: PPOPN 3
25715: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25716: LD_EXP 46
25720: PUSH
25721: LD_EXP 54
25725: AND
25726: IFFALSE 25746
25728: GO 25730
25730: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25731: LD_INT 4
25733: PPUSH
25734: LD_OWVAR 2
25738: PPUSH
25739: LD_INT 0
25741: PPUSH
25742: CALL_OW 324
25746: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25747: LD_EXP 46
25751: PUSH
25752: LD_EXP 83
25756: AND
25757: IFFALSE 25777
25759: GO 25761
25761: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25762: LD_INT 19
25764: PPUSH
25765: LD_OWVAR 2
25769: PPUSH
25770: LD_INT 0
25772: PPUSH
25773: CALL_OW 324
25777: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25778: LD_EXP 46
25782: PUSH
25783: LD_EXP 55
25787: AND
25788: IFFALSE 25890
25790: GO 25792
25792: DISABLE
25793: LD_INT 0
25795: PPUSH
25796: PPUSH
// begin enable ;
25797: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25798: LD_ADDR_VAR 0 2
25802: PUSH
25803: LD_INT 22
25805: PUSH
25806: LD_OWVAR 2
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PUSH
25815: LD_INT 2
25817: PUSH
25818: LD_INT 34
25820: PUSH
25821: LD_INT 11
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: PUSH
25828: LD_INT 34
25830: PUSH
25831: LD_INT 30
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: LIST
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PPUSH
25847: CALL_OW 69
25851: ST_TO_ADDR
// if not tmp then
25852: LD_VAR 0 2
25856: NOT
25857: IFFALSE 25861
// exit ;
25859: GO 25890
// for i in tmp do
25861: LD_ADDR_VAR 0 1
25865: PUSH
25866: LD_VAR 0 2
25870: PUSH
25871: FOR_IN
25872: IFFALSE 25888
// begin SetLives ( i , 0 ) ;
25874: LD_VAR 0 1
25878: PPUSH
25879: LD_INT 0
25881: PPUSH
25882: CALL_OW 234
// end ;
25886: GO 25871
25888: POP
25889: POP
// end ;
25890: PPOPN 2
25892: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25893: LD_EXP 46
25897: PUSH
25898: LD_EXP 56
25902: AND
25903: IFFALSE 25923
25905: GO 25907
25907: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25908: LD_INT 32
25910: PPUSH
25911: LD_OWVAR 2
25915: PPUSH
25916: LD_INT 0
25918: PPUSH
25919: CALL_OW 324
25923: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25924: LD_EXP 46
25928: PUSH
25929: LD_EXP 57
25933: AND
25934: IFFALSE 26115
25936: GO 25938
25938: DISABLE
25939: LD_INT 0
25941: PPUSH
25942: PPUSH
25943: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25944: LD_ADDR_VAR 0 2
25948: PUSH
25949: LD_INT 22
25951: PUSH
25952: LD_OWVAR 2
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: PUSH
25961: LD_INT 33
25963: PUSH
25964: LD_INT 3
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PPUSH
25975: CALL_OW 69
25979: ST_TO_ADDR
// if not tmp then
25980: LD_VAR 0 2
25984: NOT
25985: IFFALSE 25989
// exit ;
25987: GO 26115
// side := 0 ;
25989: LD_ADDR_VAR 0 3
25993: PUSH
25994: LD_INT 0
25996: ST_TO_ADDR
// for i := 1 to 8 do
25997: LD_ADDR_VAR 0 1
26001: PUSH
26002: DOUBLE
26003: LD_INT 1
26005: DEC
26006: ST_TO_ADDR
26007: LD_INT 8
26009: PUSH
26010: FOR_TO
26011: IFFALSE 26059
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26013: LD_OWVAR 2
26017: PUSH
26018: LD_VAR 0 1
26022: NONEQUAL
26023: PUSH
26024: LD_OWVAR 2
26028: PPUSH
26029: LD_VAR 0 1
26033: PPUSH
26034: CALL_OW 81
26038: PUSH
26039: LD_INT 2
26041: EQUAL
26042: AND
26043: IFFALSE 26057
// begin side := i ;
26045: LD_ADDR_VAR 0 3
26049: PUSH
26050: LD_VAR 0 1
26054: ST_TO_ADDR
// break ;
26055: GO 26059
// end ;
26057: GO 26010
26059: POP
26060: POP
// if not side then
26061: LD_VAR 0 3
26065: NOT
26066: IFFALSE 26070
// exit ;
26068: GO 26115
// for i := 1 to tmp do
26070: LD_ADDR_VAR 0 1
26074: PUSH
26075: DOUBLE
26076: LD_INT 1
26078: DEC
26079: ST_TO_ADDR
26080: LD_VAR 0 2
26084: PUSH
26085: FOR_TO
26086: IFFALSE 26113
// if Prob ( 60 ) then
26088: LD_INT 60
26090: PPUSH
26091: CALL_OW 13
26095: IFFALSE 26111
// SetSide ( i , side ) ;
26097: LD_VAR 0 1
26101: PPUSH
26102: LD_VAR 0 3
26106: PPUSH
26107: CALL_OW 235
26111: GO 26085
26113: POP
26114: POP
// end ;
26115: PPOPN 3
26117: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26118: LD_EXP 46
26122: PUSH
26123: LD_EXP 59
26127: AND
26128: IFFALSE 26247
26130: GO 26132
26132: DISABLE
26133: LD_INT 0
26135: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26136: LD_ADDR_VAR 0 1
26140: PUSH
26141: LD_INT 22
26143: PUSH
26144: LD_OWVAR 2
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: LD_INT 21
26155: PUSH
26156: LD_INT 1
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: PUSH
26163: LD_INT 3
26165: PUSH
26166: LD_INT 23
26168: PUSH
26169: LD_INT 0
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: EMPTY
26177: LIST
26178: LIST
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: LIST
26184: PPUSH
26185: CALL_OW 69
26189: PUSH
26190: FOR_IN
26191: IFFALSE 26245
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26193: LD_VAR 0 1
26197: PPUSH
26198: CALL_OW 257
26202: PUSH
26203: LD_INT 1
26205: PUSH
26206: LD_INT 2
26208: PUSH
26209: LD_INT 3
26211: PUSH
26212: LD_INT 4
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: IN
26221: IFFALSE 26243
// SetClass ( un , rand ( 1 , 4 ) ) ;
26223: LD_VAR 0 1
26227: PPUSH
26228: LD_INT 1
26230: PPUSH
26231: LD_INT 4
26233: PPUSH
26234: CALL_OW 12
26238: PPUSH
26239: CALL_OW 336
26243: GO 26190
26245: POP
26246: POP
// end ;
26247: PPOPN 1
26249: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26250: LD_EXP 46
26254: PUSH
26255: LD_EXP 58
26259: AND
26260: IFFALSE 26339
26262: GO 26264
26264: DISABLE
26265: LD_INT 0
26267: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26268: LD_ADDR_VAR 0 1
26272: PUSH
26273: LD_INT 22
26275: PUSH
26276: LD_OWVAR 2
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: PUSH
26285: LD_INT 21
26287: PUSH
26288: LD_INT 3
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PPUSH
26299: CALL_OW 69
26303: ST_TO_ADDR
// if not tmp then
26304: LD_VAR 0 1
26308: NOT
26309: IFFALSE 26313
// exit ;
26311: GO 26339
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26313: LD_VAR 0 1
26317: PUSH
26318: LD_INT 1
26320: PPUSH
26321: LD_VAR 0 1
26325: PPUSH
26326: CALL_OW 12
26330: ARRAY
26331: PPUSH
26332: LD_INT 100
26334: PPUSH
26335: CALL_OW 234
// end ;
26339: PPOPN 1
26341: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26342: LD_EXP 46
26346: PUSH
26347: LD_EXP 60
26351: AND
26352: IFFALSE 26450
26354: GO 26356
26356: DISABLE
26357: LD_INT 0
26359: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26360: LD_ADDR_VAR 0 1
26364: PUSH
26365: LD_INT 22
26367: PUSH
26368: LD_OWVAR 2
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: PUSH
26377: LD_INT 21
26379: PUSH
26380: LD_INT 1
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: PPUSH
26391: CALL_OW 69
26395: ST_TO_ADDR
// if not tmp then
26396: LD_VAR 0 1
26400: NOT
26401: IFFALSE 26405
// exit ;
26403: GO 26450
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26405: LD_VAR 0 1
26409: PUSH
26410: LD_INT 1
26412: PPUSH
26413: LD_VAR 0 1
26417: PPUSH
26418: CALL_OW 12
26422: ARRAY
26423: PPUSH
26424: LD_INT 1
26426: PPUSH
26427: LD_INT 4
26429: PPUSH
26430: CALL_OW 12
26434: PPUSH
26435: LD_INT 3000
26437: PPUSH
26438: LD_INT 9000
26440: PPUSH
26441: CALL_OW 12
26445: PPUSH
26446: CALL_OW 492
// end ;
26450: PPOPN 1
26452: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26453: LD_EXP 46
26457: PUSH
26458: LD_EXP 61
26462: AND
26463: IFFALSE 26483
26465: GO 26467
26467: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26468: LD_INT 1
26470: PPUSH
26471: LD_OWVAR 2
26475: PPUSH
26476: LD_INT 0
26478: PPUSH
26479: CALL_OW 324
26483: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26484: LD_EXP 46
26488: PUSH
26489: LD_EXP 62
26493: AND
26494: IFFALSE 26577
26496: GO 26498
26498: DISABLE
26499: LD_INT 0
26501: PPUSH
26502: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26503: LD_ADDR_VAR 0 2
26507: PUSH
26508: LD_INT 22
26510: PUSH
26511: LD_OWVAR 2
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 21
26522: PUSH
26523: LD_INT 3
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: PPUSH
26534: CALL_OW 69
26538: ST_TO_ADDR
// if not tmp then
26539: LD_VAR 0 2
26543: NOT
26544: IFFALSE 26548
// exit ;
26546: GO 26577
// for i in tmp do
26548: LD_ADDR_VAR 0 1
26552: PUSH
26553: LD_VAR 0 2
26557: PUSH
26558: FOR_IN
26559: IFFALSE 26575
// SetBLevel ( i , 10 ) ;
26561: LD_VAR 0 1
26565: PPUSH
26566: LD_INT 10
26568: PPUSH
26569: CALL_OW 241
26573: GO 26558
26575: POP
26576: POP
// end ;
26577: PPOPN 2
26579: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26580: LD_EXP 46
26584: PUSH
26585: LD_EXP 63
26589: AND
26590: IFFALSE 26701
26592: GO 26594
26594: DISABLE
26595: LD_INT 0
26597: PPUSH
26598: PPUSH
26599: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26600: LD_ADDR_VAR 0 3
26604: PUSH
26605: LD_INT 22
26607: PUSH
26608: LD_OWVAR 2
26612: PUSH
26613: EMPTY
26614: LIST
26615: LIST
26616: PUSH
26617: LD_INT 25
26619: PUSH
26620: LD_INT 1
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PPUSH
26631: CALL_OW 69
26635: ST_TO_ADDR
// if not tmp then
26636: LD_VAR 0 3
26640: NOT
26641: IFFALSE 26645
// exit ;
26643: GO 26701
// un := tmp [ rand ( 1 , tmp ) ] ;
26645: LD_ADDR_VAR 0 2
26649: PUSH
26650: LD_VAR 0 3
26654: PUSH
26655: LD_INT 1
26657: PPUSH
26658: LD_VAR 0 3
26662: PPUSH
26663: CALL_OW 12
26667: ARRAY
26668: ST_TO_ADDR
// if Crawls ( un ) then
26669: LD_VAR 0 2
26673: PPUSH
26674: CALL_OW 318
26678: IFFALSE 26689
// ComWalk ( un ) ;
26680: LD_VAR 0 2
26684: PPUSH
26685: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26689: LD_VAR 0 2
26693: PPUSH
26694: LD_INT 5
26696: PPUSH
26697: CALL_OW 336
// end ;
26701: PPOPN 3
26703: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26704: LD_EXP 46
26708: PUSH
26709: LD_EXP 64
26713: AND
26714: PUSH
26715: LD_OWVAR 67
26719: PUSH
26720: LD_INT 4
26722: LESS
26723: AND
26724: IFFALSE 26743
26726: GO 26728
26728: DISABLE
// begin Difficulty := Difficulty + 1 ;
26729: LD_ADDR_OWVAR 67
26733: PUSH
26734: LD_OWVAR 67
26738: PUSH
26739: LD_INT 1
26741: PLUS
26742: ST_TO_ADDR
// end ;
26743: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26744: LD_EXP 46
26748: PUSH
26749: LD_EXP 65
26753: AND
26754: IFFALSE 26857
26756: GO 26758
26758: DISABLE
26759: LD_INT 0
26761: PPUSH
// begin for i := 1 to 5 do
26762: LD_ADDR_VAR 0 1
26766: PUSH
26767: DOUBLE
26768: LD_INT 1
26770: DEC
26771: ST_TO_ADDR
26772: LD_INT 5
26774: PUSH
26775: FOR_TO
26776: IFFALSE 26855
// begin uc_nation := nation_nature ;
26778: LD_ADDR_OWVAR 21
26782: PUSH
26783: LD_INT 0
26785: ST_TO_ADDR
// uc_side := 0 ;
26786: LD_ADDR_OWVAR 20
26790: PUSH
26791: LD_INT 0
26793: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26794: LD_ADDR_OWVAR 29
26798: PUSH
26799: LD_INT 12
26801: PUSH
26802: LD_INT 12
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: ST_TO_ADDR
// hc_agressivity := 20 ;
26809: LD_ADDR_OWVAR 35
26813: PUSH
26814: LD_INT 20
26816: ST_TO_ADDR
// hc_class := class_tiger ;
26817: LD_ADDR_OWVAR 28
26821: PUSH
26822: LD_INT 14
26824: ST_TO_ADDR
// hc_gallery :=  ;
26825: LD_ADDR_OWVAR 33
26829: PUSH
26830: LD_STRING 
26832: ST_TO_ADDR
// hc_name :=  ;
26833: LD_ADDR_OWVAR 26
26837: PUSH
26838: LD_STRING 
26840: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26841: CALL_OW 44
26845: PPUSH
26846: LD_INT 0
26848: PPUSH
26849: CALL_OW 51
// end ;
26853: GO 26775
26855: POP
26856: POP
// end ;
26857: PPOPN 1
26859: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26860: LD_EXP 46
26864: PUSH
26865: LD_EXP 66
26869: AND
26870: IFFALSE 26879
26872: GO 26874
26874: DISABLE
// StreamSibBomb ;
26875: CALL 26880 0 0
26879: END
// export function StreamSibBomb ; var i , x , y ; begin
26880: LD_INT 0
26882: PPUSH
26883: PPUSH
26884: PPUSH
26885: PPUSH
// result := false ;
26886: LD_ADDR_VAR 0 1
26890: PUSH
26891: LD_INT 0
26893: ST_TO_ADDR
// for i := 1 to 16 do
26894: LD_ADDR_VAR 0 2
26898: PUSH
26899: DOUBLE
26900: LD_INT 1
26902: DEC
26903: ST_TO_ADDR
26904: LD_INT 16
26906: PUSH
26907: FOR_TO
26908: IFFALSE 27107
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26910: LD_ADDR_VAR 0 3
26914: PUSH
26915: LD_INT 10
26917: PUSH
26918: LD_INT 20
26920: PUSH
26921: LD_INT 30
26923: PUSH
26924: LD_INT 40
26926: PUSH
26927: LD_INT 50
26929: PUSH
26930: LD_INT 60
26932: PUSH
26933: LD_INT 70
26935: PUSH
26936: LD_INT 80
26938: PUSH
26939: LD_INT 90
26941: PUSH
26942: LD_INT 100
26944: PUSH
26945: LD_INT 110
26947: PUSH
26948: LD_INT 120
26950: PUSH
26951: LD_INT 130
26953: PUSH
26954: LD_INT 140
26956: PUSH
26957: LD_INT 150
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: LIST
26972: LIST
26973: LIST
26974: LIST
26975: LIST
26976: PUSH
26977: LD_INT 1
26979: PPUSH
26980: LD_INT 15
26982: PPUSH
26983: CALL_OW 12
26987: ARRAY
26988: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26989: LD_ADDR_VAR 0 4
26993: PUSH
26994: LD_INT 10
26996: PUSH
26997: LD_INT 20
26999: PUSH
27000: LD_INT 30
27002: PUSH
27003: LD_INT 40
27005: PUSH
27006: LD_INT 50
27008: PUSH
27009: LD_INT 60
27011: PUSH
27012: LD_INT 70
27014: PUSH
27015: LD_INT 80
27017: PUSH
27018: LD_INT 90
27020: PUSH
27021: LD_INT 100
27023: PUSH
27024: LD_INT 110
27026: PUSH
27027: LD_INT 120
27029: PUSH
27030: LD_INT 130
27032: PUSH
27033: LD_INT 140
27035: PUSH
27036: LD_INT 150
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: PUSH
27056: LD_INT 1
27058: PPUSH
27059: LD_INT 15
27061: PPUSH
27062: CALL_OW 12
27066: ARRAY
27067: ST_TO_ADDR
// if ValidHex ( x , y ) then
27068: LD_VAR 0 3
27072: PPUSH
27073: LD_VAR 0 4
27077: PPUSH
27078: CALL_OW 488
27082: IFFALSE 27105
// begin result := [ x , y ] ;
27084: LD_ADDR_VAR 0 1
27088: PUSH
27089: LD_VAR 0 3
27093: PUSH
27094: LD_VAR 0 4
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: ST_TO_ADDR
// break ;
27103: GO 27107
// end ; end ;
27105: GO 26907
27107: POP
27108: POP
// if result then
27109: LD_VAR 0 1
27113: IFFALSE 27173
// begin ToLua ( playSibBomb() ) ;
27115: LD_STRING playSibBomb()
27117: PPUSH
27118: CALL_OW 559
// wait ( 0 0$14 ) ;
27122: LD_INT 490
27124: PPUSH
27125: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27129: LD_VAR 0 1
27133: PUSH
27134: LD_INT 1
27136: ARRAY
27137: PPUSH
27138: LD_VAR 0 1
27142: PUSH
27143: LD_INT 2
27145: ARRAY
27146: PPUSH
27147: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27151: LD_VAR 0 1
27155: PUSH
27156: LD_INT 1
27158: ARRAY
27159: PPUSH
27160: LD_VAR 0 1
27164: PUSH
27165: LD_INT 2
27167: ARRAY
27168: PPUSH
27169: CALL_OW 429
// end ; end ;
27173: LD_VAR 0 1
27177: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27178: LD_EXP 46
27182: PUSH
27183: LD_EXP 68
27187: AND
27188: IFFALSE 27200
27190: GO 27192
27192: DISABLE
// YouLost (  ) ;
27193: LD_STRING 
27195: PPUSH
27196: CALL_OW 104
27200: END
// every 0 0$1 trigger StreamModeActive and sFog do
27201: LD_EXP 46
27205: PUSH
27206: LD_EXP 67
27210: AND
27211: IFFALSE 27225
27213: GO 27215
27215: DISABLE
// FogOff ( your_side ) ;
27216: LD_OWVAR 2
27220: PPUSH
27221: CALL_OW 344
27225: END
// every 0 0$1 trigger StreamModeActive and sSun do
27226: LD_EXP 46
27230: PUSH
27231: LD_EXP 69
27235: AND
27236: IFFALSE 27264
27238: GO 27240
27240: DISABLE
// begin solar_recharge_percent := 0 ;
27241: LD_ADDR_OWVAR 79
27245: PUSH
27246: LD_INT 0
27248: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27249: LD_INT 10500
27251: PPUSH
27252: CALL_OW 67
// solar_recharge_percent := 100 ;
27256: LD_ADDR_OWVAR 79
27260: PUSH
27261: LD_INT 100
27263: ST_TO_ADDR
// end ;
27264: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27265: LD_EXP 46
27269: PUSH
27270: LD_EXP 70
27274: AND
27275: IFFALSE 27514
27277: GO 27279
27279: DISABLE
27280: LD_INT 0
27282: PPUSH
27283: PPUSH
27284: PPUSH
// begin tmp := [ ] ;
27285: LD_ADDR_VAR 0 3
27289: PUSH
27290: EMPTY
27291: ST_TO_ADDR
// for i := 1 to 6 do
27292: LD_ADDR_VAR 0 1
27296: PUSH
27297: DOUBLE
27298: LD_INT 1
27300: DEC
27301: ST_TO_ADDR
27302: LD_INT 6
27304: PUSH
27305: FOR_TO
27306: IFFALSE 27411
// begin uc_nation := nation_nature ;
27308: LD_ADDR_OWVAR 21
27312: PUSH
27313: LD_INT 0
27315: ST_TO_ADDR
// uc_side := 0 ;
27316: LD_ADDR_OWVAR 20
27320: PUSH
27321: LD_INT 0
27323: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27324: LD_ADDR_OWVAR 29
27328: PUSH
27329: LD_INT 12
27331: PUSH
27332: LD_INT 12
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: ST_TO_ADDR
// hc_agressivity := 20 ;
27339: LD_ADDR_OWVAR 35
27343: PUSH
27344: LD_INT 20
27346: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27347: LD_ADDR_OWVAR 28
27351: PUSH
27352: LD_INT 17
27354: ST_TO_ADDR
// hc_gallery :=  ;
27355: LD_ADDR_OWVAR 33
27359: PUSH
27360: LD_STRING 
27362: ST_TO_ADDR
// hc_name :=  ;
27363: LD_ADDR_OWVAR 26
27367: PUSH
27368: LD_STRING 
27370: ST_TO_ADDR
// un := CreateHuman ;
27371: LD_ADDR_VAR 0 2
27375: PUSH
27376: CALL_OW 44
27380: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27381: LD_VAR 0 2
27385: PPUSH
27386: LD_INT 1
27388: PPUSH
27389: CALL_OW 51
// tmp := tmp ^ un ;
27393: LD_ADDR_VAR 0 3
27397: PUSH
27398: LD_VAR 0 3
27402: PUSH
27403: LD_VAR 0 2
27407: ADD
27408: ST_TO_ADDR
// end ;
27409: GO 27305
27411: POP
27412: POP
// repeat wait ( 0 0$1 ) ;
27413: LD_INT 35
27415: PPUSH
27416: CALL_OW 67
// for un in tmp do
27420: LD_ADDR_VAR 0 2
27424: PUSH
27425: LD_VAR 0 3
27429: PUSH
27430: FOR_IN
27431: IFFALSE 27505
// begin if IsDead ( un ) then
27433: LD_VAR 0 2
27437: PPUSH
27438: CALL_OW 301
27442: IFFALSE 27462
// begin tmp := tmp diff un ;
27444: LD_ADDR_VAR 0 3
27448: PUSH
27449: LD_VAR 0 3
27453: PUSH
27454: LD_VAR 0 2
27458: DIFF
27459: ST_TO_ADDR
// continue ;
27460: GO 27430
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27462: LD_VAR 0 2
27466: PPUSH
27467: LD_INT 3
27469: PUSH
27470: LD_INT 22
27472: PUSH
27473: LD_INT 0
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PPUSH
27484: CALL_OW 69
27488: PPUSH
27489: LD_VAR 0 2
27493: PPUSH
27494: CALL_OW 74
27498: PPUSH
27499: CALL_OW 115
// end ;
27503: GO 27430
27505: POP
27506: POP
// until not tmp ;
27507: LD_VAR 0 3
27511: NOT
27512: IFFALSE 27413
// end ;
27514: PPOPN 3
27516: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27517: LD_EXP 46
27521: PUSH
27522: LD_EXP 71
27526: AND
27527: IFFALSE 27581
27529: GO 27531
27531: DISABLE
// begin ToLua ( displayTroll(); ) ;
27532: LD_STRING displayTroll();
27534: PPUSH
27535: CALL_OW 559
// wait ( 3 3$00 ) ;
27539: LD_INT 6300
27541: PPUSH
27542: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27546: LD_STRING hideTroll();
27548: PPUSH
27549: CALL_OW 559
// wait ( 1 1$00 ) ;
27553: LD_INT 2100
27555: PPUSH
27556: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27560: LD_STRING displayTroll();
27562: PPUSH
27563: CALL_OW 559
// wait ( 1 1$00 ) ;
27567: LD_INT 2100
27569: PPUSH
27570: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27574: LD_STRING hideTroll();
27576: PPUSH
27577: CALL_OW 559
// end ;
27581: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27582: LD_EXP 46
27586: PUSH
27587: LD_EXP 72
27591: AND
27592: IFFALSE 27655
27594: GO 27596
27596: DISABLE
27597: LD_INT 0
27599: PPUSH
// begin p := 0 ;
27600: LD_ADDR_VAR 0 1
27604: PUSH
27605: LD_INT 0
27607: ST_TO_ADDR
// repeat game_speed := 1 ;
27608: LD_ADDR_OWVAR 65
27612: PUSH
27613: LD_INT 1
27615: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27616: LD_INT 35
27618: PPUSH
27619: CALL_OW 67
// p := p + 1 ;
27623: LD_ADDR_VAR 0 1
27627: PUSH
27628: LD_VAR 0 1
27632: PUSH
27633: LD_INT 1
27635: PLUS
27636: ST_TO_ADDR
// until p >= 60 ;
27637: LD_VAR 0 1
27641: PUSH
27642: LD_INT 60
27644: GREATEREQUAL
27645: IFFALSE 27608
// game_speed := 4 ;
27647: LD_ADDR_OWVAR 65
27651: PUSH
27652: LD_INT 4
27654: ST_TO_ADDR
// end ;
27655: PPOPN 1
27657: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27658: LD_EXP 46
27662: PUSH
27663: LD_EXP 73
27667: AND
27668: IFFALSE 27814
27670: GO 27672
27672: DISABLE
27673: LD_INT 0
27675: PPUSH
27676: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27677: LD_ADDR_VAR 0 1
27681: PUSH
27682: LD_INT 22
27684: PUSH
27685: LD_OWVAR 2
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: PUSH
27694: LD_INT 2
27696: PUSH
27697: LD_INT 30
27699: PUSH
27700: LD_INT 0
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: PUSH
27707: LD_INT 30
27709: PUSH
27710: LD_INT 1
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: LIST
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PPUSH
27726: CALL_OW 69
27730: ST_TO_ADDR
// if not depot then
27731: LD_VAR 0 1
27735: NOT
27736: IFFALSE 27740
// exit ;
27738: GO 27814
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27740: LD_ADDR_VAR 0 2
27744: PUSH
27745: LD_VAR 0 1
27749: PUSH
27750: LD_INT 1
27752: PPUSH
27753: LD_VAR 0 1
27757: PPUSH
27758: CALL_OW 12
27762: ARRAY
27763: PPUSH
27764: CALL_OW 274
27768: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27769: LD_VAR 0 2
27773: PPUSH
27774: LD_INT 1
27776: PPUSH
27777: LD_INT 0
27779: PPUSH
27780: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27784: LD_VAR 0 2
27788: PPUSH
27789: LD_INT 2
27791: PPUSH
27792: LD_INT 0
27794: PPUSH
27795: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27799: LD_VAR 0 2
27803: PPUSH
27804: LD_INT 3
27806: PPUSH
27807: LD_INT 0
27809: PPUSH
27810: CALL_OW 277
// end ;
27814: PPOPN 2
27816: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27817: LD_EXP 46
27821: PUSH
27822: LD_EXP 74
27826: AND
27827: IFFALSE 27924
27829: GO 27831
27831: DISABLE
27832: LD_INT 0
27834: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27835: LD_ADDR_VAR 0 1
27839: PUSH
27840: LD_INT 22
27842: PUSH
27843: LD_OWVAR 2
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PUSH
27852: LD_INT 21
27854: PUSH
27855: LD_INT 1
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: PUSH
27862: LD_INT 3
27864: PUSH
27865: LD_INT 23
27867: PUSH
27868: LD_INT 0
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PUSH
27875: EMPTY
27876: LIST
27877: LIST
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: LIST
27883: PPUSH
27884: CALL_OW 69
27888: ST_TO_ADDR
// if not tmp then
27889: LD_VAR 0 1
27893: NOT
27894: IFFALSE 27898
// exit ;
27896: GO 27924
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27898: LD_VAR 0 1
27902: PUSH
27903: LD_INT 1
27905: PPUSH
27906: LD_VAR 0 1
27910: PPUSH
27911: CALL_OW 12
27915: ARRAY
27916: PPUSH
27917: LD_INT 200
27919: PPUSH
27920: CALL_OW 234
// end ;
27924: PPOPN 1
27926: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27927: LD_EXP 46
27931: PUSH
27932: LD_EXP 75
27936: AND
27937: IFFALSE 28016
27939: GO 27941
27941: DISABLE
27942: LD_INT 0
27944: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27945: LD_ADDR_VAR 0 1
27949: PUSH
27950: LD_INT 22
27952: PUSH
27953: LD_OWVAR 2
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 21
27964: PUSH
27965: LD_INT 2
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: PPUSH
27976: CALL_OW 69
27980: ST_TO_ADDR
// if not tmp then
27981: LD_VAR 0 1
27985: NOT
27986: IFFALSE 27990
// exit ;
27988: GO 28016
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27990: LD_VAR 0 1
27994: PUSH
27995: LD_INT 1
27997: PPUSH
27998: LD_VAR 0 1
28002: PPUSH
28003: CALL_OW 12
28007: ARRAY
28008: PPUSH
28009: LD_INT 60
28011: PPUSH
28012: CALL_OW 234
// end ;
28016: PPOPN 1
28018: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28019: LD_EXP 46
28023: PUSH
28024: LD_EXP 76
28028: AND
28029: IFFALSE 28128
28031: GO 28033
28033: DISABLE
28034: LD_INT 0
28036: PPUSH
28037: PPUSH
// begin enable ;
28038: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28039: LD_ADDR_VAR 0 1
28043: PUSH
28044: LD_INT 22
28046: PUSH
28047: LD_OWVAR 2
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: PUSH
28056: LD_INT 61
28058: PUSH
28059: EMPTY
28060: LIST
28061: PUSH
28062: LD_INT 33
28064: PUSH
28065: LD_INT 2
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: LIST
28076: PPUSH
28077: CALL_OW 69
28081: ST_TO_ADDR
// if not tmp then
28082: LD_VAR 0 1
28086: NOT
28087: IFFALSE 28091
// exit ;
28089: GO 28128
// for i in tmp do
28091: LD_ADDR_VAR 0 2
28095: PUSH
28096: LD_VAR 0 1
28100: PUSH
28101: FOR_IN
28102: IFFALSE 28126
// if IsControledBy ( i ) then
28104: LD_VAR 0 2
28108: PPUSH
28109: CALL_OW 312
28113: IFFALSE 28124
// ComUnlink ( i ) ;
28115: LD_VAR 0 2
28119: PPUSH
28120: CALL_OW 136
28124: GO 28101
28126: POP
28127: POP
// end ;
28128: PPOPN 2
28130: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28131: LD_EXP 46
28135: PUSH
28136: LD_EXP 77
28140: AND
28141: IFFALSE 28281
28143: GO 28145
28145: DISABLE
28146: LD_INT 0
28148: PPUSH
28149: PPUSH
// begin ToLua ( displayPowell(); ) ;
28150: LD_STRING displayPowell();
28152: PPUSH
28153: CALL_OW 559
// uc_side := 0 ;
28157: LD_ADDR_OWVAR 20
28161: PUSH
28162: LD_INT 0
28164: ST_TO_ADDR
// uc_nation := 2 ;
28165: LD_ADDR_OWVAR 21
28169: PUSH
28170: LD_INT 2
28172: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28173: LD_ADDR_OWVAR 37
28177: PUSH
28178: LD_INT 14
28180: ST_TO_ADDR
// vc_engine := engine_siberite ;
28181: LD_ADDR_OWVAR 39
28185: PUSH
28186: LD_INT 3
28188: ST_TO_ADDR
// vc_control := control_apeman ;
28189: LD_ADDR_OWVAR 38
28193: PUSH
28194: LD_INT 5
28196: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28197: LD_ADDR_OWVAR 40
28201: PUSH
28202: LD_INT 29
28204: ST_TO_ADDR
// un := CreateVehicle ;
28205: LD_ADDR_VAR 0 2
28209: PUSH
28210: CALL_OW 45
28214: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28215: LD_VAR 0 2
28219: PPUSH
28220: LD_INT 1
28222: PPUSH
28223: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28227: LD_INT 35
28229: PPUSH
28230: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28234: LD_VAR 0 2
28238: PPUSH
28239: LD_INT 22
28241: PUSH
28242: LD_OWVAR 2
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PPUSH
28251: CALL_OW 69
28255: PPUSH
28256: LD_VAR 0 2
28260: PPUSH
28261: CALL_OW 74
28265: PPUSH
28266: CALL_OW 115
// until IsDead ( un ) ;
28270: LD_VAR 0 2
28274: PPUSH
28275: CALL_OW 301
28279: IFFALSE 28227
// end ;
28281: PPOPN 2
28283: END
// every 0 0$1 trigger StreamModeActive and sStu do
28284: LD_EXP 46
28288: PUSH
28289: LD_EXP 85
28293: AND
28294: IFFALSE 28310
28296: GO 28298
28298: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28299: LD_STRING displayStucuk();
28301: PPUSH
28302: CALL_OW 559
// ResetFog ;
28306: CALL_OW 335
// end ;
28310: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28311: LD_EXP 46
28315: PUSH
28316: LD_EXP 78
28320: AND
28321: IFFALSE 28462
28323: GO 28325
28325: DISABLE
28326: LD_INT 0
28328: PPUSH
28329: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28330: LD_ADDR_VAR 0 2
28334: PUSH
28335: LD_INT 22
28337: PUSH
28338: LD_OWVAR 2
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 21
28349: PUSH
28350: LD_INT 1
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PPUSH
28361: CALL_OW 69
28365: ST_TO_ADDR
// if not tmp then
28366: LD_VAR 0 2
28370: NOT
28371: IFFALSE 28375
// exit ;
28373: GO 28462
// un := tmp [ rand ( 1 , tmp ) ] ;
28375: LD_ADDR_VAR 0 1
28379: PUSH
28380: LD_VAR 0 2
28384: PUSH
28385: LD_INT 1
28387: PPUSH
28388: LD_VAR 0 2
28392: PPUSH
28393: CALL_OW 12
28397: ARRAY
28398: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28399: LD_VAR 0 1
28403: PPUSH
28404: LD_INT 0
28406: PPUSH
28407: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28411: LD_VAR 0 1
28415: PPUSH
28416: LD_OWVAR 3
28420: PUSH
28421: LD_VAR 0 1
28425: DIFF
28426: PPUSH
28427: LD_VAR 0 1
28431: PPUSH
28432: CALL_OW 74
28436: PPUSH
28437: CALL_OW 115
// wait ( 0 0$20 ) ;
28441: LD_INT 700
28443: PPUSH
28444: CALL_OW 67
// SetSide ( un , your_side ) ;
28448: LD_VAR 0 1
28452: PPUSH
28453: LD_OWVAR 2
28457: PPUSH
28458: CALL_OW 235
// end ;
28462: PPOPN 2
28464: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28465: LD_EXP 46
28469: PUSH
28470: LD_EXP 79
28474: AND
28475: IFFALSE 28581
28477: GO 28479
28479: DISABLE
28480: LD_INT 0
28482: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28483: LD_ADDR_VAR 0 1
28487: PUSH
28488: LD_INT 22
28490: PUSH
28491: LD_OWVAR 2
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PUSH
28500: LD_INT 2
28502: PUSH
28503: LD_INT 30
28505: PUSH
28506: LD_INT 0
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: LD_INT 30
28515: PUSH
28516: LD_INT 1
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: LIST
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PPUSH
28532: CALL_OW 69
28536: ST_TO_ADDR
// if not depot then
28537: LD_VAR 0 1
28541: NOT
28542: IFFALSE 28546
// exit ;
28544: GO 28581
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28546: LD_VAR 0 1
28550: PUSH
28551: LD_INT 1
28553: ARRAY
28554: PPUSH
28555: CALL_OW 250
28559: PPUSH
28560: LD_VAR 0 1
28564: PUSH
28565: LD_INT 1
28567: ARRAY
28568: PPUSH
28569: CALL_OW 251
28573: PPUSH
28574: LD_INT 70
28576: PPUSH
28577: CALL_OW 495
// end ;
28581: PPOPN 1
28583: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28584: LD_EXP 46
28588: PUSH
28589: LD_EXP 80
28593: AND
28594: IFFALSE 28805
28596: GO 28598
28598: DISABLE
28599: LD_INT 0
28601: PPUSH
28602: PPUSH
28603: PPUSH
28604: PPUSH
28605: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28606: LD_ADDR_VAR 0 5
28610: PUSH
28611: LD_INT 22
28613: PUSH
28614: LD_OWVAR 2
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: PUSH
28623: LD_INT 21
28625: PUSH
28626: LD_INT 1
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PPUSH
28637: CALL_OW 69
28641: ST_TO_ADDR
// if not tmp then
28642: LD_VAR 0 5
28646: NOT
28647: IFFALSE 28651
// exit ;
28649: GO 28805
// for i in tmp do
28651: LD_ADDR_VAR 0 1
28655: PUSH
28656: LD_VAR 0 5
28660: PUSH
28661: FOR_IN
28662: IFFALSE 28803
// begin d := rand ( 0 , 5 ) ;
28664: LD_ADDR_VAR 0 4
28668: PUSH
28669: LD_INT 0
28671: PPUSH
28672: LD_INT 5
28674: PPUSH
28675: CALL_OW 12
28679: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28680: LD_ADDR_VAR 0 2
28684: PUSH
28685: LD_VAR 0 1
28689: PPUSH
28690: CALL_OW 250
28694: PPUSH
28695: LD_VAR 0 4
28699: PPUSH
28700: LD_INT 3
28702: PPUSH
28703: LD_INT 12
28705: PPUSH
28706: CALL_OW 12
28710: PPUSH
28711: CALL_OW 272
28715: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28716: LD_ADDR_VAR 0 3
28720: PUSH
28721: LD_VAR 0 1
28725: PPUSH
28726: CALL_OW 251
28730: PPUSH
28731: LD_VAR 0 4
28735: PPUSH
28736: LD_INT 3
28738: PPUSH
28739: LD_INT 12
28741: PPUSH
28742: CALL_OW 12
28746: PPUSH
28747: CALL_OW 273
28751: ST_TO_ADDR
// if ValidHex ( x , y ) then
28752: LD_VAR 0 2
28756: PPUSH
28757: LD_VAR 0 3
28761: PPUSH
28762: CALL_OW 488
28766: IFFALSE 28801
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28768: LD_VAR 0 1
28772: PPUSH
28773: LD_VAR 0 2
28777: PPUSH
28778: LD_VAR 0 3
28782: PPUSH
28783: LD_INT 3
28785: PPUSH
28786: LD_INT 6
28788: PPUSH
28789: CALL_OW 12
28793: PPUSH
28794: LD_INT 1
28796: PPUSH
28797: CALL_OW 483
// end ;
28801: GO 28661
28803: POP
28804: POP
// end ;
28805: PPOPN 5
28807: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28808: LD_EXP 46
28812: PUSH
28813: LD_EXP 81
28817: AND
28818: IFFALSE 28912
28820: GO 28822
28822: DISABLE
28823: LD_INT 0
28825: PPUSH
28826: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28827: LD_ADDR_VAR 0 2
28831: PUSH
28832: LD_INT 22
28834: PUSH
28835: LD_OWVAR 2
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: PUSH
28844: LD_INT 32
28846: PUSH
28847: LD_INT 1
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PUSH
28854: LD_INT 21
28856: PUSH
28857: LD_INT 2
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: LIST
28868: PPUSH
28869: CALL_OW 69
28873: ST_TO_ADDR
// if not tmp then
28874: LD_VAR 0 2
28878: NOT
28879: IFFALSE 28883
// exit ;
28881: GO 28912
// for i in tmp do
28883: LD_ADDR_VAR 0 1
28887: PUSH
28888: LD_VAR 0 2
28892: PUSH
28893: FOR_IN
28894: IFFALSE 28910
// SetFuel ( i , 0 ) ;
28896: LD_VAR 0 1
28900: PPUSH
28901: LD_INT 0
28903: PPUSH
28904: CALL_OW 240
28908: GO 28893
28910: POP
28911: POP
// end ;
28912: PPOPN 2
28914: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28915: LD_EXP 46
28919: PUSH
28920: LD_EXP 82
28924: AND
28925: IFFALSE 28991
28927: GO 28929
28929: DISABLE
28930: LD_INT 0
28932: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28933: LD_ADDR_VAR 0 1
28937: PUSH
28938: LD_INT 22
28940: PUSH
28941: LD_OWVAR 2
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PUSH
28950: LD_INT 30
28952: PUSH
28953: LD_INT 29
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: PPUSH
28964: CALL_OW 69
28968: ST_TO_ADDR
// if not tmp then
28969: LD_VAR 0 1
28973: NOT
28974: IFFALSE 28978
// exit ;
28976: GO 28991
// DestroyUnit ( tmp [ 1 ] ) ;
28978: LD_VAR 0 1
28982: PUSH
28983: LD_INT 1
28985: ARRAY
28986: PPUSH
28987: CALL_OW 65
// end ;
28991: PPOPN 1
28993: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28994: LD_EXP 46
28998: PUSH
28999: LD_EXP 84
29003: AND
29004: IFFALSE 29133
29006: GO 29008
29008: DISABLE
29009: LD_INT 0
29011: PPUSH
// begin uc_side := 0 ;
29012: LD_ADDR_OWVAR 20
29016: PUSH
29017: LD_INT 0
29019: ST_TO_ADDR
// uc_nation := nation_arabian ;
29020: LD_ADDR_OWVAR 21
29024: PUSH
29025: LD_INT 2
29027: ST_TO_ADDR
// hc_gallery :=  ;
29028: LD_ADDR_OWVAR 33
29032: PUSH
29033: LD_STRING 
29035: ST_TO_ADDR
// hc_name :=  ;
29036: LD_ADDR_OWVAR 26
29040: PUSH
29041: LD_STRING 
29043: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29044: LD_INT 1
29046: PPUSH
29047: LD_INT 11
29049: PPUSH
29050: LD_INT 10
29052: PPUSH
29053: CALL_OW 380
// un := CreateHuman ;
29057: LD_ADDR_VAR 0 1
29061: PUSH
29062: CALL_OW 44
29066: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29067: LD_VAR 0 1
29071: PPUSH
29072: LD_INT 1
29074: PPUSH
29075: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29079: LD_INT 35
29081: PPUSH
29082: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29086: LD_VAR 0 1
29090: PPUSH
29091: LD_INT 22
29093: PUSH
29094: LD_OWVAR 2
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PPUSH
29103: CALL_OW 69
29107: PPUSH
29108: LD_VAR 0 1
29112: PPUSH
29113: CALL_OW 74
29117: PPUSH
29118: CALL_OW 115
// until IsDead ( un ) ;
29122: LD_VAR 0 1
29126: PPUSH
29127: CALL_OW 301
29131: IFFALSE 29079
// end ;
29133: PPOPN 1
29135: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29136: LD_EXP 46
29140: PUSH
29141: LD_EXP 86
29145: AND
29146: IFFALSE 29158
29148: GO 29150
29150: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29151: LD_STRING earthquake(getX(game), 0, 32)
29153: PPUSH
29154: CALL_OW 559
29158: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29159: LD_EXP 46
29163: PUSH
29164: LD_EXP 87
29168: AND
29169: IFFALSE 29260
29171: GO 29173
29173: DISABLE
29174: LD_INT 0
29176: PPUSH
// begin enable ;
29177: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29178: LD_ADDR_VAR 0 1
29182: PUSH
29183: LD_INT 22
29185: PUSH
29186: LD_OWVAR 2
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PUSH
29195: LD_INT 21
29197: PUSH
29198: LD_INT 2
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PUSH
29205: LD_INT 33
29207: PUSH
29208: LD_INT 3
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: LIST
29219: PPUSH
29220: CALL_OW 69
29224: ST_TO_ADDR
// if not tmp then
29225: LD_VAR 0 1
29229: NOT
29230: IFFALSE 29234
// exit ;
29232: GO 29260
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29234: LD_VAR 0 1
29238: PUSH
29239: LD_INT 1
29241: PPUSH
29242: LD_VAR 0 1
29246: PPUSH
29247: CALL_OW 12
29251: ARRAY
29252: PPUSH
29253: LD_INT 1
29255: PPUSH
29256: CALL_OW 234
// end ;
29260: PPOPN 1
29262: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29263: LD_EXP 46
29267: PUSH
29268: LD_EXP 88
29272: AND
29273: IFFALSE 29414
29275: GO 29277
29277: DISABLE
29278: LD_INT 0
29280: PPUSH
29281: PPUSH
29282: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29283: LD_ADDR_VAR 0 3
29287: PUSH
29288: LD_INT 22
29290: PUSH
29291: LD_OWVAR 2
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PUSH
29300: LD_INT 25
29302: PUSH
29303: LD_INT 1
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: PPUSH
29314: CALL_OW 69
29318: ST_TO_ADDR
// if not tmp then
29319: LD_VAR 0 3
29323: NOT
29324: IFFALSE 29328
// exit ;
29326: GO 29414
// un := tmp [ rand ( 1 , tmp ) ] ;
29328: LD_ADDR_VAR 0 2
29332: PUSH
29333: LD_VAR 0 3
29337: PUSH
29338: LD_INT 1
29340: PPUSH
29341: LD_VAR 0 3
29345: PPUSH
29346: CALL_OW 12
29350: ARRAY
29351: ST_TO_ADDR
// if Crawls ( un ) then
29352: LD_VAR 0 2
29356: PPUSH
29357: CALL_OW 318
29361: IFFALSE 29372
// ComWalk ( un ) ;
29363: LD_VAR 0 2
29367: PPUSH
29368: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29372: LD_VAR 0 2
29376: PPUSH
29377: LD_INT 9
29379: PPUSH
29380: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29384: LD_INT 28
29386: PPUSH
29387: LD_OWVAR 2
29391: PPUSH
29392: LD_INT 2
29394: PPUSH
29395: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29399: LD_INT 29
29401: PPUSH
29402: LD_OWVAR 2
29406: PPUSH
29407: LD_INT 2
29409: PPUSH
29410: CALL_OW 322
// end ;
29414: PPOPN 3
29416: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29417: LD_EXP 46
29421: PUSH
29422: LD_EXP 89
29426: AND
29427: IFFALSE 29538
29429: GO 29431
29431: DISABLE
29432: LD_INT 0
29434: PPUSH
29435: PPUSH
29436: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29437: LD_ADDR_VAR 0 3
29441: PUSH
29442: LD_INT 22
29444: PUSH
29445: LD_OWVAR 2
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: PUSH
29454: LD_INT 25
29456: PUSH
29457: LD_INT 1
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: PPUSH
29468: CALL_OW 69
29472: ST_TO_ADDR
// if not tmp then
29473: LD_VAR 0 3
29477: NOT
29478: IFFALSE 29482
// exit ;
29480: GO 29538
// un := tmp [ rand ( 1 , tmp ) ] ;
29482: LD_ADDR_VAR 0 2
29486: PUSH
29487: LD_VAR 0 3
29491: PUSH
29492: LD_INT 1
29494: PPUSH
29495: LD_VAR 0 3
29499: PPUSH
29500: CALL_OW 12
29504: ARRAY
29505: ST_TO_ADDR
// if Crawls ( un ) then
29506: LD_VAR 0 2
29510: PPUSH
29511: CALL_OW 318
29515: IFFALSE 29526
// ComWalk ( un ) ;
29517: LD_VAR 0 2
29521: PPUSH
29522: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29526: LD_VAR 0 2
29530: PPUSH
29531: LD_INT 8
29533: PPUSH
29534: CALL_OW 336
// end ;
29538: PPOPN 3
29540: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29541: LD_EXP 46
29545: PUSH
29546: LD_EXP 90
29550: AND
29551: IFFALSE 29695
29553: GO 29555
29555: DISABLE
29556: LD_INT 0
29558: PPUSH
29559: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29560: LD_ADDR_VAR 0 2
29564: PUSH
29565: LD_INT 22
29567: PUSH
29568: LD_OWVAR 2
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: PUSH
29577: LD_INT 21
29579: PUSH
29580: LD_INT 2
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PUSH
29587: LD_INT 2
29589: PUSH
29590: LD_INT 34
29592: PUSH
29593: LD_INT 12
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PUSH
29600: LD_INT 34
29602: PUSH
29603: LD_INT 51
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PUSH
29610: LD_INT 34
29612: PUSH
29613: LD_INT 32
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: LIST
29630: PPUSH
29631: CALL_OW 69
29635: ST_TO_ADDR
// if not tmp then
29636: LD_VAR 0 2
29640: NOT
29641: IFFALSE 29645
// exit ;
29643: GO 29695
// for i in tmp do
29645: LD_ADDR_VAR 0 1
29649: PUSH
29650: LD_VAR 0 2
29654: PUSH
29655: FOR_IN
29656: IFFALSE 29693
// if GetCargo ( i , mat_artifact ) = 0 then
29658: LD_VAR 0 1
29662: PPUSH
29663: LD_INT 4
29665: PPUSH
29666: CALL_OW 289
29670: PUSH
29671: LD_INT 0
29673: EQUAL
29674: IFFALSE 29691
// SetCargo ( i , mat_siberit , 100 ) ;
29676: LD_VAR 0 1
29680: PPUSH
29681: LD_INT 3
29683: PPUSH
29684: LD_INT 100
29686: PPUSH
29687: CALL_OW 290
29691: GO 29655
29693: POP
29694: POP
// end ;
29695: PPOPN 2
29697: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29698: LD_EXP 46
29702: PUSH
29703: LD_EXP 91
29707: AND
29708: IFFALSE 29891
29710: GO 29712
29712: DISABLE
29713: LD_INT 0
29715: PPUSH
29716: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29717: LD_ADDR_VAR 0 2
29721: PUSH
29722: LD_INT 22
29724: PUSH
29725: LD_OWVAR 2
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PPUSH
29734: CALL_OW 69
29738: ST_TO_ADDR
// if not tmp then
29739: LD_VAR 0 2
29743: NOT
29744: IFFALSE 29748
// exit ;
29746: GO 29891
// for i := 1 to 2 do
29748: LD_ADDR_VAR 0 1
29752: PUSH
29753: DOUBLE
29754: LD_INT 1
29756: DEC
29757: ST_TO_ADDR
29758: LD_INT 2
29760: PUSH
29761: FOR_TO
29762: IFFALSE 29889
// begin uc_side := your_side ;
29764: LD_ADDR_OWVAR 20
29768: PUSH
29769: LD_OWVAR 2
29773: ST_TO_ADDR
// uc_nation := nation_american ;
29774: LD_ADDR_OWVAR 21
29778: PUSH
29779: LD_INT 1
29781: ST_TO_ADDR
// vc_chassis := us_morphling ;
29782: LD_ADDR_OWVAR 37
29786: PUSH
29787: LD_INT 5
29789: ST_TO_ADDR
// vc_engine := engine_siberite ;
29790: LD_ADDR_OWVAR 39
29794: PUSH
29795: LD_INT 3
29797: ST_TO_ADDR
// vc_control := control_computer ;
29798: LD_ADDR_OWVAR 38
29802: PUSH
29803: LD_INT 3
29805: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29806: LD_ADDR_OWVAR 40
29810: PUSH
29811: LD_INT 10
29813: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29814: LD_VAR 0 2
29818: PUSH
29819: LD_INT 1
29821: ARRAY
29822: PPUSH
29823: CALL_OW 310
29827: NOT
29828: IFFALSE 29875
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29830: CALL_OW 45
29834: PPUSH
29835: LD_VAR 0 2
29839: PUSH
29840: LD_INT 1
29842: ARRAY
29843: PPUSH
29844: CALL_OW 250
29848: PPUSH
29849: LD_VAR 0 2
29853: PUSH
29854: LD_INT 1
29856: ARRAY
29857: PPUSH
29858: CALL_OW 251
29862: PPUSH
29863: LD_INT 12
29865: PPUSH
29866: LD_INT 1
29868: PPUSH
29869: CALL_OW 50
29873: GO 29887
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29875: CALL_OW 45
29879: PPUSH
29880: LD_INT 1
29882: PPUSH
29883: CALL_OW 51
// end ;
29887: GO 29761
29889: POP
29890: POP
// end ;
29891: PPOPN 2
29893: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29894: LD_EXP 46
29898: PUSH
29899: LD_EXP 92
29903: AND
29904: IFFALSE 30126
29906: GO 29908
29908: DISABLE
29909: LD_INT 0
29911: PPUSH
29912: PPUSH
29913: PPUSH
29914: PPUSH
29915: PPUSH
29916: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29917: LD_ADDR_VAR 0 6
29921: PUSH
29922: LD_INT 22
29924: PUSH
29925: LD_OWVAR 2
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: LD_INT 21
29936: PUSH
29937: LD_INT 1
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: PUSH
29944: LD_INT 3
29946: PUSH
29947: LD_INT 23
29949: PUSH
29950: LD_INT 0
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: LIST
29965: PPUSH
29966: CALL_OW 69
29970: ST_TO_ADDR
// if not tmp then
29971: LD_VAR 0 6
29975: NOT
29976: IFFALSE 29980
// exit ;
29978: GO 30126
// s1 := rand ( 1 , 4 ) ;
29980: LD_ADDR_VAR 0 2
29984: PUSH
29985: LD_INT 1
29987: PPUSH
29988: LD_INT 4
29990: PPUSH
29991: CALL_OW 12
29995: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29996: LD_ADDR_VAR 0 4
30000: PUSH
30001: LD_VAR 0 6
30005: PUSH
30006: LD_INT 1
30008: ARRAY
30009: PPUSH
30010: LD_VAR 0 2
30014: PPUSH
30015: CALL_OW 259
30019: ST_TO_ADDR
// if s1 = 1 then
30020: LD_VAR 0 2
30024: PUSH
30025: LD_INT 1
30027: EQUAL
30028: IFFALSE 30048
// s2 := rand ( 2 , 4 ) else
30030: LD_ADDR_VAR 0 3
30034: PUSH
30035: LD_INT 2
30037: PPUSH
30038: LD_INT 4
30040: PPUSH
30041: CALL_OW 12
30045: ST_TO_ADDR
30046: GO 30056
// s2 := 1 ;
30048: LD_ADDR_VAR 0 3
30052: PUSH
30053: LD_INT 1
30055: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30056: LD_ADDR_VAR 0 5
30060: PUSH
30061: LD_VAR 0 6
30065: PUSH
30066: LD_INT 1
30068: ARRAY
30069: PPUSH
30070: LD_VAR 0 3
30074: PPUSH
30075: CALL_OW 259
30079: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30080: LD_VAR 0 6
30084: PUSH
30085: LD_INT 1
30087: ARRAY
30088: PPUSH
30089: LD_VAR 0 2
30093: PPUSH
30094: LD_VAR 0 5
30098: PPUSH
30099: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30103: LD_VAR 0 6
30107: PUSH
30108: LD_INT 1
30110: ARRAY
30111: PPUSH
30112: LD_VAR 0 3
30116: PPUSH
30117: LD_VAR 0 4
30121: PPUSH
30122: CALL_OW 237
// end ;
30126: PPOPN 6
30128: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30129: LD_EXP 46
30133: PUSH
30134: LD_EXP 93
30138: AND
30139: IFFALSE 30218
30141: GO 30143
30143: DISABLE
30144: LD_INT 0
30146: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30147: LD_ADDR_VAR 0 1
30151: PUSH
30152: LD_INT 22
30154: PUSH
30155: LD_OWVAR 2
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: LD_INT 30
30166: PUSH
30167: LD_INT 3
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PPUSH
30178: CALL_OW 69
30182: ST_TO_ADDR
// if not tmp then
30183: LD_VAR 0 1
30187: NOT
30188: IFFALSE 30192
// exit ;
30190: GO 30218
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30192: LD_VAR 0 1
30196: PUSH
30197: LD_INT 1
30199: PPUSH
30200: LD_VAR 0 1
30204: PPUSH
30205: CALL_OW 12
30209: ARRAY
30210: PPUSH
30211: LD_INT 1
30213: PPUSH
30214: CALL_OW 234
// end ;
30218: PPOPN 1
30220: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30221: LD_EXP 46
30225: PUSH
30226: LD_EXP 94
30230: AND
30231: IFFALSE 30343
30233: GO 30235
30235: DISABLE
30236: LD_INT 0
30238: PPUSH
30239: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30240: LD_ADDR_VAR 0 2
30244: PUSH
30245: LD_INT 22
30247: PUSH
30248: LD_OWVAR 2
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 2
30259: PUSH
30260: LD_INT 30
30262: PUSH
30263: LD_INT 27
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: LD_INT 30
30272: PUSH
30273: LD_INT 26
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: LD_INT 30
30282: PUSH
30283: LD_INT 28
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PPUSH
30300: CALL_OW 69
30304: ST_TO_ADDR
// if not tmp then
30305: LD_VAR 0 2
30309: NOT
30310: IFFALSE 30314
// exit ;
30312: GO 30343
// for i in tmp do
30314: LD_ADDR_VAR 0 1
30318: PUSH
30319: LD_VAR 0 2
30323: PUSH
30324: FOR_IN
30325: IFFALSE 30341
// SetLives ( i , 1 ) ;
30327: LD_VAR 0 1
30331: PPUSH
30332: LD_INT 1
30334: PPUSH
30335: CALL_OW 234
30339: GO 30324
30341: POP
30342: POP
// end ;
30343: PPOPN 2
30345: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30346: LD_EXP 46
30350: PUSH
30351: LD_EXP 95
30355: AND
30356: IFFALSE 30643
30358: GO 30360
30360: DISABLE
30361: LD_INT 0
30363: PPUSH
30364: PPUSH
30365: PPUSH
// begin i := rand ( 1 , 7 ) ;
30366: LD_ADDR_VAR 0 1
30370: PUSH
30371: LD_INT 1
30373: PPUSH
30374: LD_INT 7
30376: PPUSH
30377: CALL_OW 12
30381: ST_TO_ADDR
// case i of 1 :
30382: LD_VAR 0 1
30386: PUSH
30387: LD_INT 1
30389: DOUBLE
30390: EQUAL
30391: IFTRUE 30395
30393: GO 30405
30395: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30396: LD_STRING earthquake(getX(game), 0, 32)
30398: PPUSH
30399: CALL_OW 559
30403: GO 30643
30405: LD_INT 2
30407: DOUBLE
30408: EQUAL
30409: IFTRUE 30413
30411: GO 30427
30413: POP
// begin ToLua ( displayStucuk(); ) ;
30414: LD_STRING displayStucuk();
30416: PPUSH
30417: CALL_OW 559
// ResetFog ;
30421: CALL_OW 335
// end ; 3 :
30425: GO 30643
30427: LD_INT 3
30429: DOUBLE
30430: EQUAL
30431: IFTRUE 30435
30433: GO 30539
30435: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30436: LD_ADDR_VAR 0 2
30440: PUSH
30441: LD_INT 22
30443: PUSH
30444: LD_OWVAR 2
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 25
30455: PUSH
30456: LD_INT 1
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PPUSH
30467: CALL_OW 69
30471: ST_TO_ADDR
// if not tmp then
30472: LD_VAR 0 2
30476: NOT
30477: IFFALSE 30481
// exit ;
30479: GO 30643
// un := tmp [ rand ( 1 , tmp ) ] ;
30481: LD_ADDR_VAR 0 3
30485: PUSH
30486: LD_VAR 0 2
30490: PUSH
30491: LD_INT 1
30493: PPUSH
30494: LD_VAR 0 2
30498: PPUSH
30499: CALL_OW 12
30503: ARRAY
30504: ST_TO_ADDR
// if Crawls ( un ) then
30505: LD_VAR 0 3
30509: PPUSH
30510: CALL_OW 318
30514: IFFALSE 30525
// ComWalk ( un ) ;
30516: LD_VAR 0 3
30520: PPUSH
30521: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30525: LD_VAR 0 3
30529: PPUSH
30530: LD_INT 8
30532: PPUSH
30533: CALL_OW 336
// end ; 4 :
30537: GO 30643
30539: LD_INT 4
30541: DOUBLE
30542: EQUAL
30543: IFTRUE 30547
30545: GO 30621
30547: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30548: LD_ADDR_VAR 0 2
30552: PUSH
30553: LD_INT 22
30555: PUSH
30556: LD_OWVAR 2
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 30
30567: PUSH
30568: LD_INT 29
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PPUSH
30579: CALL_OW 69
30583: ST_TO_ADDR
// if not tmp then
30584: LD_VAR 0 2
30588: NOT
30589: IFFALSE 30593
// exit ;
30591: GO 30643
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30593: LD_VAR 0 2
30597: PUSH
30598: LD_INT 1
30600: ARRAY
30601: PPUSH
30602: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30606: LD_VAR 0 2
30610: PUSH
30611: LD_INT 1
30613: ARRAY
30614: PPUSH
30615: CALL_OW 65
// end ; 5 .. 7 :
30619: GO 30643
30621: LD_INT 5
30623: DOUBLE
30624: GREATEREQUAL
30625: IFFALSE 30633
30627: LD_INT 7
30629: DOUBLE
30630: LESSEQUAL
30631: IFTRUE 30635
30633: GO 30642
30635: POP
// StreamSibBomb ; end ;
30636: CALL 26880 0 0
30640: GO 30643
30642: POP
// end ;
30643: PPOPN 3
30645: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30646: LD_EXP 46
30650: PUSH
30651: LD_EXP 96
30655: AND
30656: IFFALSE 30812
30658: GO 30660
30660: DISABLE
30661: LD_INT 0
30663: PPUSH
30664: PPUSH
30665: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30666: LD_ADDR_VAR 0 2
30670: PUSH
30671: LD_INT 81
30673: PUSH
30674: LD_OWVAR 2
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 2
30685: PUSH
30686: LD_INT 21
30688: PUSH
30689: LD_INT 1
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: LD_INT 21
30698: PUSH
30699: LD_INT 2
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: LIST
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PPUSH
30715: CALL_OW 69
30719: ST_TO_ADDR
// if not tmp then
30720: LD_VAR 0 2
30724: NOT
30725: IFFALSE 30729
// exit ;
30727: GO 30812
// p := 0 ;
30729: LD_ADDR_VAR 0 3
30733: PUSH
30734: LD_INT 0
30736: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30737: LD_INT 35
30739: PPUSH
30740: CALL_OW 67
// p := p + 1 ;
30744: LD_ADDR_VAR 0 3
30748: PUSH
30749: LD_VAR 0 3
30753: PUSH
30754: LD_INT 1
30756: PLUS
30757: ST_TO_ADDR
// for i in tmp do
30758: LD_ADDR_VAR 0 1
30762: PUSH
30763: LD_VAR 0 2
30767: PUSH
30768: FOR_IN
30769: IFFALSE 30800
// if GetLives ( i ) < 1000 then
30771: LD_VAR 0 1
30775: PPUSH
30776: CALL_OW 256
30780: PUSH
30781: LD_INT 1000
30783: LESS
30784: IFFALSE 30798
// SetLives ( i , 1000 ) ;
30786: LD_VAR 0 1
30790: PPUSH
30791: LD_INT 1000
30793: PPUSH
30794: CALL_OW 234
30798: GO 30768
30800: POP
30801: POP
// until p > 20 ;
30802: LD_VAR 0 3
30806: PUSH
30807: LD_INT 20
30809: GREATER
30810: IFFALSE 30737
// end ;
30812: PPOPN 3
30814: END
// every 0 0$1 trigger StreamModeActive and sTime do
30815: LD_EXP 46
30819: PUSH
30820: LD_EXP 97
30824: AND
30825: IFFALSE 30860
30827: GO 30829
30829: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30830: LD_INT 28
30832: PPUSH
30833: LD_OWVAR 2
30837: PPUSH
30838: LD_INT 2
30840: PPUSH
30841: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30845: LD_INT 30
30847: PPUSH
30848: LD_OWVAR 2
30852: PPUSH
30853: LD_INT 2
30855: PPUSH
30856: CALL_OW 322
// end ;
30860: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30861: LD_EXP 46
30865: PUSH
30866: LD_EXP 98
30870: AND
30871: IFFALSE 30992
30873: GO 30875
30875: DISABLE
30876: LD_INT 0
30878: PPUSH
30879: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30880: LD_ADDR_VAR 0 2
30884: PUSH
30885: LD_INT 22
30887: PUSH
30888: LD_OWVAR 2
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: LD_INT 21
30899: PUSH
30900: LD_INT 1
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PUSH
30907: LD_INT 3
30909: PUSH
30910: LD_INT 23
30912: PUSH
30913: LD_INT 0
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: LIST
30928: PPUSH
30929: CALL_OW 69
30933: ST_TO_ADDR
// if not tmp then
30934: LD_VAR 0 2
30938: NOT
30939: IFFALSE 30943
// exit ;
30941: GO 30992
// for i in tmp do
30943: LD_ADDR_VAR 0 1
30947: PUSH
30948: LD_VAR 0 2
30952: PUSH
30953: FOR_IN
30954: IFFALSE 30990
// begin if Crawls ( i ) then
30956: LD_VAR 0 1
30960: PPUSH
30961: CALL_OW 318
30965: IFFALSE 30976
// ComWalk ( i ) ;
30967: LD_VAR 0 1
30971: PPUSH
30972: CALL_OW 138
// SetClass ( i , 2 ) ;
30976: LD_VAR 0 1
30980: PPUSH
30981: LD_INT 2
30983: PPUSH
30984: CALL_OW 336
// end ;
30988: GO 30953
30990: POP
30991: POP
// end ;
30992: PPOPN 2
30994: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30995: LD_EXP 46
30999: PUSH
31000: LD_EXP 99
31004: AND
31005: IFFALSE 31293
31007: GO 31009
31009: DISABLE
31010: LD_INT 0
31012: PPUSH
31013: PPUSH
31014: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31015: LD_OWVAR 2
31019: PPUSH
31020: LD_INT 9
31022: PPUSH
31023: LD_INT 1
31025: PPUSH
31026: LD_INT 1
31028: PPUSH
31029: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31033: LD_INT 9
31035: PPUSH
31036: LD_OWVAR 2
31040: PPUSH
31041: CALL_OW 343
// uc_side := 9 ;
31045: LD_ADDR_OWVAR 20
31049: PUSH
31050: LD_INT 9
31052: ST_TO_ADDR
// uc_nation := 2 ;
31053: LD_ADDR_OWVAR 21
31057: PUSH
31058: LD_INT 2
31060: ST_TO_ADDR
// hc_name := Dark Warrior ;
31061: LD_ADDR_OWVAR 26
31065: PUSH
31066: LD_STRING Dark Warrior
31068: ST_TO_ADDR
// hc_gallery :=  ;
31069: LD_ADDR_OWVAR 33
31073: PUSH
31074: LD_STRING 
31076: ST_TO_ADDR
// hc_noskilllimit := true ;
31077: LD_ADDR_OWVAR 76
31081: PUSH
31082: LD_INT 1
31084: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31085: LD_ADDR_OWVAR 31
31089: PUSH
31090: LD_INT 30
31092: PUSH
31093: LD_INT 30
31095: PUSH
31096: LD_INT 30
31098: PUSH
31099: LD_INT 30
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: LIST
31106: LIST
31107: ST_TO_ADDR
// un := CreateHuman ;
31108: LD_ADDR_VAR 0 3
31112: PUSH
31113: CALL_OW 44
31117: ST_TO_ADDR
// hc_noskilllimit := false ;
31118: LD_ADDR_OWVAR 76
31122: PUSH
31123: LD_INT 0
31125: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31126: LD_VAR 0 3
31130: PPUSH
31131: LD_INT 1
31133: PPUSH
31134: CALL_OW 51
// ToLua ( playRanger() ) ;
31138: LD_STRING playRanger()
31140: PPUSH
31141: CALL_OW 559
// p := 0 ;
31145: LD_ADDR_VAR 0 2
31149: PUSH
31150: LD_INT 0
31152: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31153: LD_INT 35
31155: PPUSH
31156: CALL_OW 67
// p := p + 1 ;
31160: LD_ADDR_VAR 0 2
31164: PUSH
31165: LD_VAR 0 2
31169: PUSH
31170: LD_INT 1
31172: PLUS
31173: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31174: LD_VAR 0 3
31178: PPUSH
31179: CALL_OW 256
31183: PUSH
31184: LD_INT 1000
31186: LESS
31187: IFFALSE 31201
// SetLives ( un , 1000 ) ;
31189: LD_VAR 0 3
31193: PPUSH
31194: LD_INT 1000
31196: PPUSH
31197: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31201: LD_VAR 0 3
31205: PPUSH
31206: LD_INT 81
31208: PUSH
31209: LD_OWVAR 2
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: LD_INT 91
31220: PUSH
31221: LD_VAR 0 3
31225: PUSH
31226: LD_INT 30
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: LIST
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PPUSH
31238: CALL_OW 69
31242: PPUSH
31243: LD_VAR 0 3
31247: PPUSH
31248: CALL_OW 74
31252: PPUSH
31253: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31257: LD_VAR 0 2
31261: PUSH
31262: LD_INT 80
31264: GREATER
31265: PUSH
31266: LD_VAR 0 3
31270: PPUSH
31271: CALL_OW 301
31275: OR
31276: IFFALSE 31153
// if un then
31278: LD_VAR 0 3
31282: IFFALSE 31293
// RemoveUnit ( un ) ;
31284: LD_VAR 0 3
31288: PPUSH
31289: CALL_OW 64
// end ;
31293: PPOPN 3
31295: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31296: LD_EXP 100
31300: IFFALSE 31416
31302: GO 31304
31304: DISABLE
31305: LD_INT 0
31307: PPUSH
31308: PPUSH
31309: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31310: LD_ADDR_VAR 0 2
31314: PUSH
31315: LD_INT 81
31317: PUSH
31318: LD_OWVAR 2
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: PUSH
31327: LD_INT 21
31329: PUSH
31330: LD_INT 1
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PPUSH
31341: CALL_OW 69
31345: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31346: LD_STRING playComputer()
31348: PPUSH
31349: CALL_OW 559
// if not tmp then
31353: LD_VAR 0 2
31357: NOT
31358: IFFALSE 31362
// exit ;
31360: GO 31416
// for i in tmp do
31362: LD_ADDR_VAR 0 1
31366: PUSH
31367: LD_VAR 0 2
31371: PUSH
31372: FOR_IN
31373: IFFALSE 31414
// for j := 1 to 4 do
31375: LD_ADDR_VAR 0 3
31379: PUSH
31380: DOUBLE
31381: LD_INT 1
31383: DEC
31384: ST_TO_ADDR
31385: LD_INT 4
31387: PUSH
31388: FOR_TO
31389: IFFALSE 31410
// SetSkill ( i , j , 10 ) ;
31391: LD_VAR 0 1
31395: PPUSH
31396: LD_VAR 0 3
31400: PPUSH
31401: LD_INT 10
31403: PPUSH
31404: CALL_OW 237
31408: GO 31388
31410: POP
31411: POP
31412: GO 31372
31414: POP
31415: POP
// end ;
31416: PPOPN 3
31418: END
// every 0 0$1 trigger s30 do var i , tmp ;
31419: LD_EXP 101
31423: IFFALSE 31492
31425: GO 31427
31427: DISABLE
31428: LD_INT 0
31430: PPUSH
31431: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31432: LD_ADDR_VAR 0 2
31436: PUSH
31437: LD_INT 22
31439: PUSH
31440: LD_OWVAR 2
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: PPUSH
31449: CALL_OW 69
31453: ST_TO_ADDR
// if not tmp then
31454: LD_VAR 0 2
31458: NOT
31459: IFFALSE 31463
// exit ;
31461: GO 31492
// for i in tmp do
31463: LD_ADDR_VAR 0 1
31467: PUSH
31468: LD_VAR 0 2
31472: PUSH
31473: FOR_IN
31474: IFFALSE 31490
// SetLives ( i , 300 ) ;
31476: LD_VAR 0 1
31480: PPUSH
31481: LD_INT 300
31483: PPUSH
31484: CALL_OW 234
31488: GO 31473
31490: POP
31491: POP
// end ;
31492: PPOPN 2
31494: END
// every 0 0$1 trigger s60 do var i , tmp ;
31495: LD_EXP 102
31499: IFFALSE 31568
31501: GO 31503
31503: DISABLE
31504: LD_INT 0
31506: PPUSH
31507: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31508: LD_ADDR_VAR 0 2
31512: PUSH
31513: LD_INT 22
31515: PUSH
31516: LD_OWVAR 2
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: PPUSH
31525: CALL_OW 69
31529: ST_TO_ADDR
// if not tmp then
31530: LD_VAR 0 2
31534: NOT
31535: IFFALSE 31539
// exit ;
31537: GO 31568
// for i in tmp do
31539: LD_ADDR_VAR 0 1
31543: PUSH
31544: LD_VAR 0 2
31548: PUSH
31549: FOR_IN
31550: IFFALSE 31566
// SetLives ( i , 600 ) ;
31552: LD_VAR 0 1
31556: PPUSH
31557: LD_INT 600
31559: PPUSH
31560: CALL_OW 234
31564: GO 31549
31566: POP
31567: POP
// end ;
31568: PPOPN 2
31570: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31571: LD_INT 0
31573: PPUSH
// case cmd of 301 :
31574: LD_VAR 0 1
31578: PUSH
31579: LD_INT 301
31581: DOUBLE
31582: EQUAL
31583: IFTRUE 31587
31585: GO 31619
31587: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31588: LD_VAR 0 6
31592: PPUSH
31593: LD_VAR 0 7
31597: PPUSH
31598: LD_VAR 0 8
31602: PPUSH
31603: LD_VAR 0 4
31607: PPUSH
31608: LD_VAR 0 5
31612: PPUSH
31613: CALL 32828 0 5
31617: GO 31740
31619: LD_INT 302
31621: DOUBLE
31622: EQUAL
31623: IFTRUE 31627
31625: GO 31664
31627: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31628: LD_VAR 0 6
31632: PPUSH
31633: LD_VAR 0 7
31637: PPUSH
31638: LD_VAR 0 8
31642: PPUSH
31643: LD_VAR 0 9
31647: PPUSH
31648: LD_VAR 0 4
31652: PPUSH
31653: LD_VAR 0 5
31657: PPUSH
31658: CALL 32919 0 6
31662: GO 31740
31664: LD_INT 303
31666: DOUBLE
31667: EQUAL
31668: IFTRUE 31672
31670: GO 31709
31672: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31673: LD_VAR 0 6
31677: PPUSH
31678: LD_VAR 0 7
31682: PPUSH
31683: LD_VAR 0 8
31687: PPUSH
31688: LD_VAR 0 9
31692: PPUSH
31693: LD_VAR 0 4
31697: PPUSH
31698: LD_VAR 0 5
31702: PPUSH
31703: CALL 31745 0 6
31707: GO 31740
31709: LD_INT 304
31711: DOUBLE
31712: EQUAL
31713: IFTRUE 31717
31715: GO 31739
31717: POP
// hHackTeleport ( unit , x , y ) ; end ;
31718: LD_VAR 0 2
31722: PPUSH
31723: LD_VAR 0 4
31727: PPUSH
31728: LD_VAR 0 5
31732: PPUSH
31733: CALL 33512 0 3
31737: GO 31740
31739: POP
// end ;
31740: LD_VAR 0 12
31744: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31745: LD_INT 0
31747: PPUSH
31748: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31749: LD_VAR 0 1
31753: PUSH
31754: LD_INT 1
31756: LESS
31757: PUSH
31758: LD_VAR 0 1
31762: PUSH
31763: LD_INT 3
31765: GREATER
31766: OR
31767: PUSH
31768: LD_VAR 0 5
31772: PPUSH
31773: LD_VAR 0 6
31777: PPUSH
31778: CALL_OW 428
31782: OR
31783: IFFALSE 31787
// exit ;
31785: GO 32515
// uc_side := your_side ;
31787: LD_ADDR_OWVAR 20
31791: PUSH
31792: LD_OWVAR 2
31796: ST_TO_ADDR
// uc_nation := nation ;
31797: LD_ADDR_OWVAR 21
31801: PUSH
31802: LD_VAR 0 1
31806: ST_TO_ADDR
// bc_level = 1 ;
31807: LD_ADDR_OWVAR 43
31811: PUSH
31812: LD_INT 1
31814: ST_TO_ADDR
// case btype of 1 :
31815: LD_VAR 0 2
31819: PUSH
31820: LD_INT 1
31822: DOUBLE
31823: EQUAL
31824: IFTRUE 31828
31826: GO 31839
31828: POP
// bc_type := b_depot ; 2 :
31829: LD_ADDR_OWVAR 42
31833: PUSH
31834: LD_INT 0
31836: ST_TO_ADDR
31837: GO 32459
31839: LD_INT 2
31841: DOUBLE
31842: EQUAL
31843: IFTRUE 31847
31845: GO 31858
31847: POP
// bc_type := b_warehouse ; 3 :
31848: LD_ADDR_OWVAR 42
31852: PUSH
31853: LD_INT 1
31855: ST_TO_ADDR
31856: GO 32459
31858: LD_INT 3
31860: DOUBLE
31861: EQUAL
31862: IFTRUE 31866
31864: GO 31877
31866: POP
// bc_type := b_lab ; 4 .. 9 :
31867: LD_ADDR_OWVAR 42
31871: PUSH
31872: LD_INT 6
31874: ST_TO_ADDR
31875: GO 32459
31877: LD_INT 4
31879: DOUBLE
31880: GREATEREQUAL
31881: IFFALSE 31889
31883: LD_INT 9
31885: DOUBLE
31886: LESSEQUAL
31887: IFTRUE 31891
31889: GO 31951
31891: POP
// begin bc_type := b_lab_half ;
31892: LD_ADDR_OWVAR 42
31896: PUSH
31897: LD_INT 7
31899: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31900: LD_ADDR_OWVAR 44
31904: PUSH
31905: LD_INT 10
31907: PUSH
31908: LD_INT 11
31910: PUSH
31911: LD_INT 12
31913: PUSH
31914: LD_INT 15
31916: PUSH
31917: LD_INT 14
31919: PUSH
31920: LD_INT 13
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: LIST
31930: PUSH
31931: LD_VAR 0 2
31935: PUSH
31936: LD_INT 3
31938: MINUS
31939: ARRAY
31940: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
31941: LD_ADDR_OWVAR 45
31945: PUSH
31946: LD_INT 9
31948: ST_TO_ADDR
// end ; 10 .. 13 :
31949: GO 32459
31951: LD_INT 10
31953: DOUBLE
31954: GREATEREQUAL
31955: IFFALSE 31963
31957: LD_INT 13
31959: DOUBLE
31960: LESSEQUAL
31961: IFTRUE 31965
31963: GO 32042
31965: POP
// begin bc_type := b_lab_full ;
31966: LD_ADDR_OWVAR 42
31970: PUSH
31971: LD_INT 8
31973: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31974: LD_ADDR_OWVAR 44
31978: PUSH
31979: LD_INT 10
31981: PUSH
31982: LD_INT 12
31984: PUSH
31985: LD_INT 14
31987: PUSH
31988: LD_INT 13
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: PUSH
31997: LD_VAR 0 2
32001: PUSH
32002: LD_INT 9
32004: MINUS
32005: ARRAY
32006: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32007: LD_ADDR_OWVAR 45
32011: PUSH
32012: LD_INT 11
32014: PUSH
32015: LD_INT 15
32017: PUSH
32018: LD_INT 12
32020: PUSH
32021: LD_INT 15
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: PUSH
32030: LD_VAR 0 2
32034: PUSH
32035: LD_INT 9
32037: MINUS
32038: ARRAY
32039: ST_TO_ADDR
// end ; 14 :
32040: GO 32459
32042: LD_INT 14
32044: DOUBLE
32045: EQUAL
32046: IFTRUE 32050
32048: GO 32061
32050: POP
// bc_type := b_workshop ; 15 :
32051: LD_ADDR_OWVAR 42
32055: PUSH
32056: LD_INT 2
32058: ST_TO_ADDR
32059: GO 32459
32061: LD_INT 15
32063: DOUBLE
32064: EQUAL
32065: IFTRUE 32069
32067: GO 32080
32069: POP
// bc_type := b_factory ; 16 :
32070: LD_ADDR_OWVAR 42
32074: PUSH
32075: LD_INT 3
32077: ST_TO_ADDR
32078: GO 32459
32080: LD_INT 16
32082: DOUBLE
32083: EQUAL
32084: IFTRUE 32088
32086: GO 32099
32088: POP
// bc_type := b_ext_gun ; 17 :
32089: LD_ADDR_OWVAR 42
32093: PUSH
32094: LD_INT 17
32096: ST_TO_ADDR
32097: GO 32459
32099: LD_INT 17
32101: DOUBLE
32102: EQUAL
32103: IFTRUE 32107
32105: GO 32135
32107: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32108: LD_ADDR_OWVAR 42
32112: PUSH
32113: LD_INT 19
32115: PUSH
32116: LD_INT 23
32118: PUSH
32119: LD_INT 19
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: LIST
32126: PUSH
32127: LD_VAR 0 1
32131: ARRAY
32132: ST_TO_ADDR
32133: GO 32459
32135: LD_INT 18
32137: DOUBLE
32138: EQUAL
32139: IFTRUE 32143
32141: GO 32154
32143: POP
// bc_type := b_ext_radar ; 19 :
32144: LD_ADDR_OWVAR 42
32148: PUSH
32149: LD_INT 20
32151: ST_TO_ADDR
32152: GO 32459
32154: LD_INT 19
32156: DOUBLE
32157: EQUAL
32158: IFTRUE 32162
32160: GO 32173
32162: POP
// bc_type := b_ext_radio ; 20 :
32163: LD_ADDR_OWVAR 42
32167: PUSH
32168: LD_INT 22
32170: ST_TO_ADDR
32171: GO 32459
32173: LD_INT 20
32175: DOUBLE
32176: EQUAL
32177: IFTRUE 32181
32179: GO 32192
32181: POP
// bc_type := b_ext_siberium ; 21 :
32182: LD_ADDR_OWVAR 42
32186: PUSH
32187: LD_INT 21
32189: ST_TO_ADDR
32190: GO 32459
32192: LD_INT 21
32194: DOUBLE
32195: EQUAL
32196: IFTRUE 32200
32198: GO 32211
32200: POP
// bc_type := b_ext_computer ; 22 :
32201: LD_ADDR_OWVAR 42
32205: PUSH
32206: LD_INT 24
32208: ST_TO_ADDR
32209: GO 32459
32211: LD_INT 22
32213: DOUBLE
32214: EQUAL
32215: IFTRUE 32219
32217: GO 32230
32219: POP
// bc_type := b_ext_track ; 23 :
32220: LD_ADDR_OWVAR 42
32224: PUSH
32225: LD_INT 16
32227: ST_TO_ADDR
32228: GO 32459
32230: LD_INT 23
32232: DOUBLE
32233: EQUAL
32234: IFTRUE 32238
32236: GO 32249
32238: POP
// bc_type := b_ext_laser ; 24 :
32239: LD_ADDR_OWVAR 42
32243: PUSH
32244: LD_INT 25
32246: ST_TO_ADDR
32247: GO 32459
32249: LD_INT 24
32251: DOUBLE
32252: EQUAL
32253: IFTRUE 32257
32255: GO 32268
32257: POP
// bc_type := b_control_tower ; 25 :
32258: LD_ADDR_OWVAR 42
32262: PUSH
32263: LD_INT 36
32265: ST_TO_ADDR
32266: GO 32459
32268: LD_INT 25
32270: DOUBLE
32271: EQUAL
32272: IFTRUE 32276
32274: GO 32287
32276: POP
// bc_type := b_breastwork ; 26 :
32277: LD_ADDR_OWVAR 42
32281: PUSH
32282: LD_INT 31
32284: ST_TO_ADDR
32285: GO 32459
32287: LD_INT 26
32289: DOUBLE
32290: EQUAL
32291: IFTRUE 32295
32293: GO 32306
32295: POP
// bc_type := b_bunker ; 27 :
32296: LD_ADDR_OWVAR 42
32300: PUSH
32301: LD_INT 32
32303: ST_TO_ADDR
32304: GO 32459
32306: LD_INT 27
32308: DOUBLE
32309: EQUAL
32310: IFTRUE 32314
32312: GO 32325
32314: POP
// bc_type := b_turret ; 28 :
32315: LD_ADDR_OWVAR 42
32319: PUSH
32320: LD_INT 33
32322: ST_TO_ADDR
32323: GO 32459
32325: LD_INT 28
32327: DOUBLE
32328: EQUAL
32329: IFTRUE 32333
32331: GO 32344
32333: POP
// bc_type := b_armoury ; 29 :
32334: LD_ADDR_OWVAR 42
32338: PUSH
32339: LD_INT 4
32341: ST_TO_ADDR
32342: GO 32459
32344: LD_INT 29
32346: DOUBLE
32347: EQUAL
32348: IFTRUE 32352
32350: GO 32363
32352: POP
// bc_type := b_barracks ; 30 :
32353: LD_ADDR_OWVAR 42
32357: PUSH
32358: LD_INT 5
32360: ST_TO_ADDR
32361: GO 32459
32363: LD_INT 30
32365: DOUBLE
32366: EQUAL
32367: IFTRUE 32371
32369: GO 32382
32371: POP
// bc_type := b_solar_power ; 31 :
32372: LD_ADDR_OWVAR 42
32376: PUSH
32377: LD_INT 27
32379: ST_TO_ADDR
32380: GO 32459
32382: LD_INT 31
32384: DOUBLE
32385: EQUAL
32386: IFTRUE 32390
32388: GO 32401
32390: POP
// bc_type := b_oil_power ; 32 :
32391: LD_ADDR_OWVAR 42
32395: PUSH
32396: LD_INT 26
32398: ST_TO_ADDR
32399: GO 32459
32401: LD_INT 32
32403: DOUBLE
32404: EQUAL
32405: IFTRUE 32409
32407: GO 32420
32409: POP
// bc_type := b_siberite_power ; 33 :
32410: LD_ADDR_OWVAR 42
32414: PUSH
32415: LD_INT 28
32417: ST_TO_ADDR
32418: GO 32459
32420: LD_INT 33
32422: DOUBLE
32423: EQUAL
32424: IFTRUE 32428
32426: GO 32439
32428: POP
// bc_type := b_oil_mine ; 34 :
32429: LD_ADDR_OWVAR 42
32433: PUSH
32434: LD_INT 29
32436: ST_TO_ADDR
32437: GO 32459
32439: LD_INT 34
32441: DOUBLE
32442: EQUAL
32443: IFTRUE 32447
32445: GO 32458
32447: POP
// bc_type := b_siberite_mine ; end ;
32448: LD_ADDR_OWVAR 42
32452: PUSH
32453: LD_INT 30
32455: ST_TO_ADDR
32456: GO 32459
32458: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32459: LD_ADDR_VAR 0 8
32463: PUSH
32464: LD_VAR 0 5
32468: PPUSH
32469: LD_VAR 0 6
32473: PPUSH
32474: LD_VAR 0 3
32478: PPUSH
32479: CALL_OW 47
32483: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32484: LD_OWVAR 42
32488: PUSH
32489: LD_INT 32
32491: PUSH
32492: LD_INT 33
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: IN
32499: IFFALSE 32515
// PlaceWeaponTurret ( b , weapon ) ;
32501: LD_VAR 0 8
32505: PPUSH
32506: LD_VAR 0 4
32510: PPUSH
32511: CALL_OW 431
// end ;
32515: LD_VAR 0 7
32519: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32520: LD_INT 0
32522: PPUSH
32523: PPUSH
32524: PPUSH
32525: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32526: LD_ADDR_VAR 0 4
32530: PUSH
32531: LD_INT 22
32533: PUSH
32534: LD_OWVAR 2
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: LD_INT 2
32545: PUSH
32546: LD_INT 30
32548: PUSH
32549: LD_INT 0
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: PUSH
32556: LD_INT 30
32558: PUSH
32559: LD_INT 1
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: LIST
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PPUSH
32575: CALL_OW 69
32579: ST_TO_ADDR
// if not tmp then
32580: LD_VAR 0 4
32584: NOT
32585: IFFALSE 32589
// exit ;
32587: GO 32648
// for i in tmp do
32589: LD_ADDR_VAR 0 2
32593: PUSH
32594: LD_VAR 0 4
32598: PUSH
32599: FOR_IN
32600: IFFALSE 32646
// for j = 1 to 3 do
32602: LD_ADDR_VAR 0 3
32606: PUSH
32607: DOUBLE
32608: LD_INT 1
32610: DEC
32611: ST_TO_ADDR
32612: LD_INT 3
32614: PUSH
32615: FOR_TO
32616: IFFALSE 32642
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32618: LD_VAR 0 2
32622: PPUSH
32623: CALL_OW 274
32627: PPUSH
32628: LD_VAR 0 3
32632: PPUSH
32633: LD_INT 99999
32635: PPUSH
32636: CALL_OW 277
32640: GO 32615
32642: POP
32643: POP
32644: GO 32599
32646: POP
32647: POP
// end ;
32648: LD_VAR 0 1
32652: RET
// export function hHackSetLevel10 ; var i , j ; begin
32653: LD_INT 0
32655: PPUSH
32656: PPUSH
32657: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32658: LD_ADDR_VAR 0 2
32662: PUSH
32663: LD_INT 21
32665: PUSH
32666: LD_INT 1
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: PPUSH
32673: CALL_OW 69
32677: PUSH
32678: FOR_IN
32679: IFFALSE 32731
// if IsSelected ( i ) then
32681: LD_VAR 0 2
32685: PPUSH
32686: CALL_OW 306
32690: IFFALSE 32729
// begin for j := 1 to 4 do
32692: LD_ADDR_VAR 0 3
32696: PUSH
32697: DOUBLE
32698: LD_INT 1
32700: DEC
32701: ST_TO_ADDR
32702: LD_INT 4
32704: PUSH
32705: FOR_TO
32706: IFFALSE 32727
// SetSkill ( i , j , 10 ) ;
32708: LD_VAR 0 2
32712: PPUSH
32713: LD_VAR 0 3
32717: PPUSH
32718: LD_INT 10
32720: PPUSH
32721: CALL_OW 237
32725: GO 32705
32727: POP
32728: POP
// end ;
32729: GO 32678
32731: POP
32732: POP
// end ;
32733: LD_VAR 0 1
32737: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32738: LD_INT 0
32740: PPUSH
32741: PPUSH
32742: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32743: LD_ADDR_VAR 0 2
32747: PUSH
32748: LD_INT 22
32750: PUSH
32751: LD_OWVAR 2
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 21
32762: PUSH
32763: LD_INT 1
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PPUSH
32774: CALL_OW 69
32778: PUSH
32779: FOR_IN
32780: IFFALSE 32821
// begin for j := 1 to 4 do
32782: LD_ADDR_VAR 0 3
32786: PUSH
32787: DOUBLE
32788: LD_INT 1
32790: DEC
32791: ST_TO_ADDR
32792: LD_INT 4
32794: PUSH
32795: FOR_TO
32796: IFFALSE 32817
// SetSkill ( i , j , 10 ) ;
32798: LD_VAR 0 2
32802: PPUSH
32803: LD_VAR 0 3
32807: PPUSH
32808: LD_INT 10
32810: PPUSH
32811: CALL_OW 237
32815: GO 32795
32817: POP
32818: POP
// end ;
32819: GO 32779
32821: POP
32822: POP
// end ;
32823: LD_VAR 0 1
32827: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32828: LD_INT 0
32830: PPUSH
// uc_side := your_side ;
32831: LD_ADDR_OWVAR 20
32835: PUSH
32836: LD_OWVAR 2
32840: ST_TO_ADDR
// uc_nation := nation ;
32841: LD_ADDR_OWVAR 21
32845: PUSH
32846: LD_VAR 0 1
32850: ST_TO_ADDR
// InitHc ;
32851: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32855: LD_INT 0
32857: PPUSH
32858: LD_VAR 0 2
32862: PPUSH
32863: LD_VAR 0 3
32867: PPUSH
32868: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32872: LD_VAR 0 4
32876: PPUSH
32877: LD_VAR 0 5
32881: PPUSH
32882: CALL_OW 428
32886: PUSH
32887: LD_INT 0
32889: EQUAL
32890: IFFALSE 32914
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32892: CALL_OW 44
32896: PPUSH
32897: LD_VAR 0 4
32901: PPUSH
32902: LD_VAR 0 5
32906: PPUSH
32907: LD_INT 1
32909: PPUSH
32910: CALL_OW 48
// end ;
32914: LD_VAR 0 6
32918: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32919: LD_INT 0
32921: PPUSH
32922: PPUSH
// uc_side := your_side ;
32923: LD_ADDR_OWVAR 20
32927: PUSH
32928: LD_OWVAR 2
32932: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32933: LD_VAR 0 1
32937: PUSH
32938: LD_INT 1
32940: PUSH
32941: LD_INT 2
32943: PUSH
32944: LD_INT 3
32946: PUSH
32947: LD_INT 4
32949: PUSH
32950: LD_INT 5
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: IN
32960: IFFALSE 32972
// uc_nation := nation_american else
32962: LD_ADDR_OWVAR 21
32966: PUSH
32967: LD_INT 1
32969: ST_TO_ADDR
32970: GO 33015
// if chassis in [ 11 , 12 , 13 , 14 ] then
32972: LD_VAR 0 1
32976: PUSH
32977: LD_INT 11
32979: PUSH
32980: LD_INT 12
32982: PUSH
32983: LD_INT 13
32985: PUSH
32986: LD_INT 14
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: IN
32995: IFFALSE 33007
// uc_nation := nation_arabian else
32997: LD_ADDR_OWVAR 21
33001: PUSH
33002: LD_INT 2
33004: ST_TO_ADDR
33005: GO 33015
// uc_nation := nation_russian ;
33007: LD_ADDR_OWVAR 21
33011: PUSH
33012: LD_INT 3
33014: ST_TO_ADDR
// vc_chassis := chassis ;
33015: LD_ADDR_OWVAR 37
33019: PUSH
33020: LD_VAR 0 1
33024: ST_TO_ADDR
// vc_engine := engine ;
33025: LD_ADDR_OWVAR 39
33029: PUSH
33030: LD_VAR 0 2
33034: ST_TO_ADDR
// vc_control := control ;
33035: LD_ADDR_OWVAR 38
33039: PUSH
33040: LD_VAR 0 3
33044: ST_TO_ADDR
// vc_weapon := weapon ;
33045: LD_ADDR_OWVAR 40
33049: PUSH
33050: LD_VAR 0 4
33054: ST_TO_ADDR
// un := CreateVehicle ;
33055: LD_ADDR_VAR 0 8
33059: PUSH
33060: CALL_OW 45
33064: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33065: LD_VAR 0 8
33069: PPUSH
33070: LD_INT 0
33072: PPUSH
33073: LD_INT 5
33075: PPUSH
33076: CALL_OW 12
33080: PPUSH
33081: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33085: LD_VAR 0 8
33089: PPUSH
33090: LD_VAR 0 5
33094: PPUSH
33095: LD_VAR 0 6
33099: PPUSH
33100: LD_INT 1
33102: PPUSH
33103: CALL_OW 48
// end ;
33107: LD_VAR 0 7
33111: RET
// export hInvincible ; every 1 do
33112: GO 33114
33114: DISABLE
// hInvincible := [ ] ;
33115: LD_ADDR_EXP 103
33119: PUSH
33120: EMPTY
33121: ST_TO_ADDR
33122: END
// every 10 do var i ;
33123: GO 33125
33125: DISABLE
33126: LD_INT 0
33128: PPUSH
// begin enable ;
33129: ENABLE
// if not hInvincible then
33130: LD_EXP 103
33134: NOT
33135: IFFALSE 33139
// exit ;
33137: GO 33183
// for i in hInvincible do
33139: LD_ADDR_VAR 0 1
33143: PUSH
33144: LD_EXP 103
33148: PUSH
33149: FOR_IN
33150: IFFALSE 33181
// if GetLives ( i ) < 1000 then
33152: LD_VAR 0 1
33156: PPUSH
33157: CALL_OW 256
33161: PUSH
33162: LD_INT 1000
33164: LESS
33165: IFFALSE 33179
// SetLives ( i , 1000 ) ;
33167: LD_VAR 0 1
33171: PPUSH
33172: LD_INT 1000
33174: PPUSH
33175: CALL_OW 234
33179: GO 33149
33181: POP
33182: POP
// end ;
33183: PPOPN 1
33185: END
// export function hHackInvincible ; var i ; begin
33186: LD_INT 0
33188: PPUSH
33189: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33190: LD_ADDR_VAR 0 2
33194: PUSH
33195: LD_INT 2
33197: PUSH
33198: LD_INT 21
33200: PUSH
33201: LD_INT 1
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: LD_INT 21
33210: PUSH
33211: LD_INT 2
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: PUSH
33218: EMPTY
33219: LIST
33220: LIST
33221: LIST
33222: PPUSH
33223: CALL_OW 69
33227: PUSH
33228: FOR_IN
33229: IFFALSE 33290
// if IsSelected ( i ) then
33231: LD_VAR 0 2
33235: PPUSH
33236: CALL_OW 306
33240: IFFALSE 33288
// begin if i in hInvincible then
33242: LD_VAR 0 2
33246: PUSH
33247: LD_EXP 103
33251: IN
33252: IFFALSE 33272
// hInvincible := hInvincible diff i else
33254: LD_ADDR_EXP 103
33258: PUSH
33259: LD_EXP 103
33263: PUSH
33264: LD_VAR 0 2
33268: DIFF
33269: ST_TO_ADDR
33270: GO 33288
// hInvincible := hInvincible union i ;
33272: LD_ADDR_EXP 103
33276: PUSH
33277: LD_EXP 103
33281: PUSH
33282: LD_VAR 0 2
33286: UNION
33287: ST_TO_ADDR
// end ;
33288: GO 33228
33290: POP
33291: POP
// end ;
33292: LD_VAR 0 1
33296: RET
// export function hHackInvisible ; var i , j ; begin
33297: LD_INT 0
33299: PPUSH
33300: PPUSH
33301: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33302: LD_ADDR_VAR 0 2
33306: PUSH
33307: LD_INT 21
33309: PUSH
33310: LD_INT 1
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PPUSH
33317: CALL_OW 69
33321: PUSH
33322: FOR_IN
33323: IFFALSE 33347
// if IsSelected ( i ) then
33325: LD_VAR 0 2
33329: PPUSH
33330: CALL_OW 306
33334: IFFALSE 33345
// ComForceInvisible ( i ) ;
33336: LD_VAR 0 2
33340: PPUSH
33341: CALL_OW 496
33345: GO 33322
33347: POP
33348: POP
// end ;
33349: LD_VAR 0 1
33353: RET
// export function hHackChangeYourSide ; begin
33354: LD_INT 0
33356: PPUSH
// if your_side = 8 then
33357: LD_OWVAR 2
33361: PUSH
33362: LD_INT 8
33364: EQUAL
33365: IFFALSE 33377
// your_side := 0 else
33367: LD_ADDR_OWVAR 2
33371: PUSH
33372: LD_INT 0
33374: ST_TO_ADDR
33375: GO 33391
// your_side := your_side + 1 ;
33377: LD_ADDR_OWVAR 2
33381: PUSH
33382: LD_OWVAR 2
33386: PUSH
33387: LD_INT 1
33389: PLUS
33390: ST_TO_ADDR
// end ;
33391: LD_VAR 0 1
33395: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33396: LD_INT 0
33398: PPUSH
33399: PPUSH
33400: PPUSH
// for i in all_units do
33401: LD_ADDR_VAR 0 2
33405: PUSH
33406: LD_OWVAR 3
33410: PUSH
33411: FOR_IN
33412: IFFALSE 33490
// if IsSelected ( i ) then
33414: LD_VAR 0 2
33418: PPUSH
33419: CALL_OW 306
33423: IFFALSE 33488
// begin j := GetSide ( i ) ;
33425: LD_ADDR_VAR 0 3
33429: PUSH
33430: LD_VAR 0 2
33434: PPUSH
33435: CALL_OW 255
33439: ST_TO_ADDR
// if j = 8 then
33440: LD_VAR 0 3
33444: PUSH
33445: LD_INT 8
33447: EQUAL
33448: IFFALSE 33460
// j := 0 else
33450: LD_ADDR_VAR 0 3
33454: PUSH
33455: LD_INT 0
33457: ST_TO_ADDR
33458: GO 33474
// j := j + 1 ;
33460: LD_ADDR_VAR 0 3
33464: PUSH
33465: LD_VAR 0 3
33469: PUSH
33470: LD_INT 1
33472: PLUS
33473: ST_TO_ADDR
// SetSide ( i , j ) ;
33474: LD_VAR 0 2
33478: PPUSH
33479: LD_VAR 0 3
33483: PPUSH
33484: CALL_OW 235
// end ;
33488: GO 33411
33490: POP
33491: POP
// end ;
33492: LD_VAR 0 1
33496: RET
// export function hHackFog ; begin
33497: LD_INT 0
33499: PPUSH
// FogOff ( true ) ;
33500: LD_INT 1
33502: PPUSH
33503: CALL_OW 344
// end ;
33507: LD_VAR 0 1
33511: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33512: LD_INT 0
33514: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33515: LD_VAR 0 1
33519: PPUSH
33520: LD_VAR 0 2
33524: PPUSH
33525: LD_VAR 0 3
33529: PPUSH
33530: LD_INT 1
33532: PPUSH
33533: LD_INT 1
33535: PPUSH
33536: CALL_OW 483
// CenterOnXY ( x , y ) ;
33540: LD_VAR 0 2
33544: PPUSH
33545: LD_VAR 0 3
33549: PPUSH
33550: CALL_OW 84
// end ;
33554: LD_VAR 0 4
33558: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33559: LD_INT 0
33561: PPUSH
33562: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33563: LD_VAR 0 1
33567: NOT
33568: PUSH
33569: LD_VAR 0 2
33573: PPUSH
33574: LD_VAR 0 3
33578: PPUSH
33579: CALL_OW 488
33583: NOT
33584: OR
33585: PUSH
33586: LD_VAR 0 1
33590: PPUSH
33591: CALL_OW 266
33595: PUSH
33596: LD_INT 3
33598: NONEQUAL
33599: PUSH
33600: LD_VAR 0 1
33604: PPUSH
33605: CALL_OW 247
33609: PUSH
33610: LD_INT 1
33612: EQUAL
33613: NOT
33614: AND
33615: OR
33616: IFFALSE 33620
// exit ;
33618: GO 33769
// if GetType ( factory ) = unit_human then
33620: LD_VAR 0 1
33624: PPUSH
33625: CALL_OW 247
33629: PUSH
33630: LD_INT 1
33632: EQUAL
33633: IFFALSE 33650
// factory := IsInUnit ( factory ) ;
33635: LD_ADDR_VAR 0 1
33639: PUSH
33640: LD_VAR 0 1
33644: PPUSH
33645: CALL_OW 310
33649: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33650: LD_VAR 0 1
33654: PPUSH
33655: CALL_OW 266
33659: PUSH
33660: LD_INT 3
33662: NONEQUAL
33663: IFFALSE 33667
// exit ;
33665: GO 33769
// if HexInfo ( x , y ) = factory then
33667: LD_VAR 0 2
33671: PPUSH
33672: LD_VAR 0 3
33676: PPUSH
33677: CALL_OW 428
33681: PUSH
33682: LD_VAR 0 1
33686: EQUAL
33687: IFFALSE 33714
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33689: LD_ADDR_EXP 104
33693: PUSH
33694: LD_EXP 104
33698: PPUSH
33699: LD_VAR 0 1
33703: PPUSH
33704: LD_INT 0
33706: PPUSH
33707: CALL_OW 1
33711: ST_TO_ADDR
33712: GO 33765
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33714: LD_ADDR_EXP 104
33718: PUSH
33719: LD_EXP 104
33723: PPUSH
33724: LD_VAR 0 1
33728: PPUSH
33729: LD_VAR 0 1
33733: PPUSH
33734: CALL_OW 255
33738: PUSH
33739: LD_VAR 0 1
33743: PUSH
33744: LD_VAR 0 2
33748: PUSH
33749: LD_VAR 0 3
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: PPUSH
33760: CALL_OW 1
33764: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33765: CALL 33774 0 0
// end ;
33769: LD_VAR 0 4
33773: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33774: LD_INT 0
33776: PPUSH
33777: PPUSH
33778: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33779: LD_STRING resetFactoryWaypoint();
33781: PPUSH
33782: CALL_OW 559
// if factoryWaypoints then
33786: LD_EXP 104
33790: IFFALSE 33916
// begin list := PrepareArray ( factoryWaypoints ) ;
33792: LD_ADDR_VAR 0 3
33796: PUSH
33797: LD_EXP 104
33801: PPUSH
33802: CALL 81213 0 1
33806: ST_TO_ADDR
// for i := 1 to list do
33807: LD_ADDR_VAR 0 2
33811: PUSH
33812: DOUBLE
33813: LD_INT 1
33815: DEC
33816: ST_TO_ADDR
33817: LD_VAR 0 3
33821: PUSH
33822: FOR_TO
33823: IFFALSE 33914
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33825: LD_STRING setFactoryWaypointXY(
33827: PUSH
33828: LD_VAR 0 3
33832: PUSH
33833: LD_VAR 0 2
33837: ARRAY
33838: PUSH
33839: LD_INT 1
33841: ARRAY
33842: STR
33843: PUSH
33844: LD_STRING ,
33846: STR
33847: PUSH
33848: LD_VAR 0 3
33852: PUSH
33853: LD_VAR 0 2
33857: ARRAY
33858: PUSH
33859: LD_INT 2
33861: ARRAY
33862: STR
33863: PUSH
33864: LD_STRING ,
33866: STR
33867: PUSH
33868: LD_VAR 0 3
33872: PUSH
33873: LD_VAR 0 2
33877: ARRAY
33878: PUSH
33879: LD_INT 3
33881: ARRAY
33882: STR
33883: PUSH
33884: LD_STRING ,
33886: STR
33887: PUSH
33888: LD_VAR 0 3
33892: PUSH
33893: LD_VAR 0 2
33897: ARRAY
33898: PUSH
33899: LD_INT 4
33901: ARRAY
33902: STR
33903: PUSH
33904: LD_STRING )
33906: STR
33907: PPUSH
33908: CALL_OW 559
33912: GO 33822
33914: POP
33915: POP
// end ; end ;
33916: LD_VAR 0 1
33920: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33921: LD_INT 0
33923: PPUSH
// if HexInfo ( x , y ) = warehouse then
33924: LD_VAR 0 2
33928: PPUSH
33929: LD_VAR 0 3
33933: PPUSH
33934: CALL_OW 428
33938: PUSH
33939: LD_VAR 0 1
33943: EQUAL
33944: IFFALSE 33971
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33946: LD_ADDR_EXP 105
33950: PUSH
33951: LD_EXP 105
33955: PPUSH
33956: LD_VAR 0 1
33960: PPUSH
33961: LD_INT 0
33963: PPUSH
33964: CALL_OW 1
33968: ST_TO_ADDR
33969: GO 34022
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33971: LD_ADDR_EXP 105
33975: PUSH
33976: LD_EXP 105
33980: PPUSH
33981: LD_VAR 0 1
33985: PPUSH
33986: LD_VAR 0 1
33990: PPUSH
33991: CALL_OW 255
33995: PUSH
33996: LD_VAR 0 1
34000: PUSH
34001: LD_VAR 0 2
34005: PUSH
34006: LD_VAR 0 3
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: PPUSH
34017: CALL_OW 1
34021: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34022: CALL 34031 0 0
// end ;
34026: LD_VAR 0 4
34030: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34031: LD_INT 0
34033: PPUSH
34034: PPUSH
34035: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34036: LD_STRING resetWarehouseGatheringPoints();
34038: PPUSH
34039: CALL_OW 559
// if warehouseGatheringPoints then
34043: LD_EXP 105
34047: IFFALSE 34173
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34049: LD_ADDR_VAR 0 3
34053: PUSH
34054: LD_EXP 105
34058: PPUSH
34059: CALL 81213 0 1
34063: ST_TO_ADDR
// for i := 1 to list do
34064: LD_ADDR_VAR 0 2
34068: PUSH
34069: DOUBLE
34070: LD_INT 1
34072: DEC
34073: ST_TO_ADDR
34074: LD_VAR 0 3
34078: PUSH
34079: FOR_TO
34080: IFFALSE 34171
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34082: LD_STRING setWarehouseGatheringPointXY(
34084: PUSH
34085: LD_VAR 0 3
34089: PUSH
34090: LD_VAR 0 2
34094: ARRAY
34095: PUSH
34096: LD_INT 1
34098: ARRAY
34099: STR
34100: PUSH
34101: LD_STRING ,
34103: STR
34104: PUSH
34105: LD_VAR 0 3
34109: PUSH
34110: LD_VAR 0 2
34114: ARRAY
34115: PUSH
34116: LD_INT 2
34118: ARRAY
34119: STR
34120: PUSH
34121: LD_STRING ,
34123: STR
34124: PUSH
34125: LD_VAR 0 3
34129: PUSH
34130: LD_VAR 0 2
34134: ARRAY
34135: PUSH
34136: LD_INT 3
34138: ARRAY
34139: STR
34140: PUSH
34141: LD_STRING ,
34143: STR
34144: PUSH
34145: LD_VAR 0 3
34149: PUSH
34150: LD_VAR 0 2
34154: ARRAY
34155: PUSH
34156: LD_INT 4
34158: ARRAY
34159: STR
34160: PUSH
34161: LD_STRING )
34163: STR
34164: PPUSH
34165: CALL_OW 559
34169: GO 34079
34171: POP
34172: POP
// end ; end ;
34173: LD_VAR 0 1
34177: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34178: LD_EXP 105
34182: IFFALSE 34867
34184: GO 34186
34186: DISABLE
34187: LD_INT 0
34189: PPUSH
34190: PPUSH
34191: PPUSH
34192: PPUSH
34193: PPUSH
34194: PPUSH
34195: PPUSH
34196: PPUSH
34197: PPUSH
// begin enable ;
34198: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34199: LD_ADDR_VAR 0 3
34203: PUSH
34204: LD_EXP 105
34208: PPUSH
34209: CALL 81213 0 1
34213: ST_TO_ADDR
// if not list then
34214: LD_VAR 0 3
34218: NOT
34219: IFFALSE 34223
// exit ;
34221: GO 34867
// for i := 1 to list do
34223: LD_ADDR_VAR 0 1
34227: PUSH
34228: DOUBLE
34229: LD_INT 1
34231: DEC
34232: ST_TO_ADDR
34233: LD_VAR 0 3
34237: PUSH
34238: FOR_TO
34239: IFFALSE 34865
// begin depot := list [ i ] [ 2 ] ;
34241: LD_ADDR_VAR 0 8
34245: PUSH
34246: LD_VAR 0 3
34250: PUSH
34251: LD_VAR 0 1
34255: ARRAY
34256: PUSH
34257: LD_INT 2
34259: ARRAY
34260: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34261: LD_ADDR_VAR 0 5
34265: PUSH
34266: LD_VAR 0 3
34270: PUSH
34271: LD_VAR 0 1
34275: ARRAY
34276: PUSH
34277: LD_INT 1
34279: ARRAY
34280: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34281: LD_VAR 0 8
34285: PPUSH
34286: CALL_OW 301
34290: PUSH
34291: LD_VAR 0 5
34295: PUSH
34296: LD_VAR 0 8
34300: PPUSH
34301: CALL_OW 255
34305: NONEQUAL
34306: OR
34307: IFFALSE 34336
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34309: LD_ADDR_EXP 105
34313: PUSH
34314: LD_EXP 105
34318: PPUSH
34319: LD_VAR 0 8
34323: PPUSH
34324: LD_INT 0
34326: PPUSH
34327: CALL_OW 1
34331: ST_TO_ADDR
// exit ;
34332: POP
34333: POP
34334: GO 34867
// end ; x := list [ i ] [ 3 ] ;
34336: LD_ADDR_VAR 0 6
34340: PUSH
34341: LD_VAR 0 3
34345: PUSH
34346: LD_VAR 0 1
34350: ARRAY
34351: PUSH
34352: LD_INT 3
34354: ARRAY
34355: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34356: LD_ADDR_VAR 0 7
34360: PUSH
34361: LD_VAR 0 3
34365: PUSH
34366: LD_VAR 0 1
34370: ARRAY
34371: PUSH
34372: LD_INT 4
34374: ARRAY
34375: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34376: LD_ADDR_VAR 0 9
34380: PUSH
34381: LD_VAR 0 6
34385: PPUSH
34386: LD_VAR 0 7
34390: PPUSH
34391: LD_INT 16
34393: PPUSH
34394: CALL 79801 0 3
34398: ST_TO_ADDR
// if not cratesNearbyPoint then
34399: LD_VAR 0 9
34403: NOT
34404: IFFALSE 34410
// exit ;
34406: POP
34407: POP
34408: GO 34867
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34410: LD_ADDR_VAR 0 4
34414: PUSH
34415: LD_INT 22
34417: PUSH
34418: LD_VAR 0 5
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: PUSH
34427: LD_INT 3
34429: PUSH
34430: LD_INT 60
34432: PUSH
34433: EMPTY
34434: LIST
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 91
34442: PUSH
34443: LD_VAR 0 8
34447: PUSH
34448: LD_INT 6
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: LIST
34455: PUSH
34456: LD_INT 2
34458: PUSH
34459: LD_INT 25
34461: PUSH
34462: LD_INT 2
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: PUSH
34469: LD_INT 25
34471: PUSH
34472: LD_INT 16
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: LIST
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: PPUSH
34490: CALL_OW 69
34494: PUSH
34495: LD_VAR 0 8
34499: PPUSH
34500: CALL_OW 313
34504: PPUSH
34505: LD_INT 3
34507: PUSH
34508: LD_INT 60
34510: PUSH
34511: EMPTY
34512: LIST
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 2
34520: PUSH
34521: LD_INT 25
34523: PUSH
34524: LD_INT 2
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 25
34533: PUSH
34534: LD_INT 16
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: LIST
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PPUSH
34550: CALL_OW 72
34554: UNION
34555: ST_TO_ADDR
// if tmp then
34556: LD_VAR 0 4
34560: IFFALSE 34640
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34562: LD_ADDR_VAR 0 4
34566: PUSH
34567: LD_VAR 0 4
34571: PPUSH
34572: LD_INT 3
34574: PPUSH
34575: CALL 77770 0 2
34579: ST_TO_ADDR
// for j in tmp do
34580: LD_ADDR_VAR 0 2
34584: PUSH
34585: LD_VAR 0 4
34589: PUSH
34590: FOR_IN
34591: IFFALSE 34634
// begin if IsInUnit ( j ) then
34593: LD_VAR 0 2
34597: PPUSH
34598: CALL_OW 310
34602: IFFALSE 34613
// ComExit ( j ) ;
34604: LD_VAR 0 2
34608: PPUSH
34609: CALL 77853 0 1
// AddComCollect ( j , x , y ) ;
34613: LD_VAR 0 2
34617: PPUSH
34618: LD_VAR 0 6
34622: PPUSH
34623: LD_VAR 0 7
34627: PPUSH
34628: CALL_OW 177
// end ;
34632: GO 34590
34634: POP
34635: POP
// exit ;
34636: POP
34637: POP
34638: GO 34867
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34640: LD_ADDR_VAR 0 4
34644: PUSH
34645: LD_INT 22
34647: PUSH
34648: LD_VAR 0 5
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: LD_INT 91
34659: PUSH
34660: LD_VAR 0 8
34664: PUSH
34665: LD_INT 8
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 2
34675: PUSH
34676: LD_INT 34
34678: PUSH
34679: LD_INT 12
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: LD_INT 34
34688: PUSH
34689: LD_INT 51
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: PUSH
34696: LD_INT 34
34698: PUSH
34699: LD_INT 32
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: LD_INT 34
34708: PUSH
34709: LD_INT 89
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: LIST
34727: PPUSH
34728: CALL_OW 69
34732: ST_TO_ADDR
// if tmp then
34733: LD_VAR 0 4
34737: IFFALSE 34863
// begin for j in tmp do
34739: LD_ADDR_VAR 0 2
34743: PUSH
34744: LD_VAR 0 4
34748: PUSH
34749: FOR_IN
34750: IFFALSE 34861
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34752: LD_VAR 0 2
34756: PPUSH
34757: CALL_OW 262
34761: PUSH
34762: LD_INT 3
34764: EQUAL
34765: PUSH
34766: LD_VAR 0 2
34770: PPUSH
34771: CALL_OW 261
34775: PUSH
34776: LD_INT 20
34778: GREATER
34779: OR
34780: PUSH
34781: LD_VAR 0 2
34785: PPUSH
34786: CALL_OW 314
34790: NOT
34791: AND
34792: PUSH
34793: LD_VAR 0 2
34797: PPUSH
34798: CALL_OW 263
34802: PUSH
34803: LD_INT 1
34805: NONEQUAL
34806: PUSH
34807: LD_VAR 0 2
34811: PPUSH
34812: CALL_OW 311
34816: OR
34817: AND
34818: IFFALSE 34859
// begin ComCollect ( j , x , y ) ;
34820: LD_VAR 0 2
34824: PPUSH
34825: LD_VAR 0 6
34829: PPUSH
34830: LD_VAR 0 7
34834: PPUSH
34835: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34839: LD_VAR 0 2
34843: PPUSH
34844: LD_VAR 0 8
34848: PPUSH
34849: CALL_OW 172
// exit ;
34853: POP
34854: POP
34855: POP
34856: POP
34857: GO 34867
// end ;
34859: GO 34749
34861: POP
34862: POP
// end ; end ;
34863: GO 34238
34865: POP
34866: POP
// end ; end_of_file
34867: PPOPN 9
34869: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34870: LD_INT 0
34872: PPUSH
34873: PPUSH
34874: PPUSH
34875: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34876: LD_VAR 0 1
34880: PPUSH
34881: CALL_OW 264
34885: PUSH
34886: LD_INT 91
34888: EQUAL
34889: IFFALSE 34961
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34891: LD_INT 68
34893: PPUSH
34894: LD_VAR 0 1
34898: PPUSH
34899: CALL_OW 255
34903: PPUSH
34904: CALL_OW 321
34908: PUSH
34909: LD_INT 2
34911: EQUAL
34912: IFFALSE 34924
// eff := 70 else
34914: LD_ADDR_VAR 0 4
34918: PUSH
34919: LD_INT 70
34921: ST_TO_ADDR
34922: GO 34932
// eff := 30 ;
34924: LD_ADDR_VAR 0 4
34928: PUSH
34929: LD_INT 30
34931: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34932: LD_VAR 0 1
34936: PPUSH
34937: CALL_OW 250
34941: PPUSH
34942: LD_VAR 0 1
34946: PPUSH
34947: CALL_OW 251
34951: PPUSH
34952: LD_VAR 0 4
34956: PPUSH
34957: CALL_OW 495
// end ; end ;
34961: LD_VAR 0 2
34965: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34966: LD_INT 0
34968: PPUSH
// end ;
34969: LD_VAR 0 4
34973: RET
// export function SOS_Command ( cmd ) ; begin
34974: LD_INT 0
34976: PPUSH
// end ;
34977: LD_VAR 0 2
34981: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34982: LD_INT 0
34984: PPUSH
// end ;
34985: LD_VAR 0 6
34989: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34990: LD_INT 0
34992: PPUSH
34993: PPUSH
// if not vehicle or not factory then
34994: LD_VAR 0 1
34998: NOT
34999: PUSH
35000: LD_VAR 0 2
35004: NOT
35005: OR
35006: IFFALSE 35010
// exit ;
35008: GO 35241
// if factoryWaypoints >= factory then
35010: LD_EXP 104
35014: PUSH
35015: LD_VAR 0 2
35019: GREATEREQUAL
35020: IFFALSE 35241
// if factoryWaypoints [ factory ] then
35022: LD_EXP 104
35026: PUSH
35027: LD_VAR 0 2
35031: ARRAY
35032: IFFALSE 35241
// begin if GetControl ( vehicle ) = control_manual then
35034: LD_VAR 0 1
35038: PPUSH
35039: CALL_OW 263
35043: PUSH
35044: LD_INT 1
35046: EQUAL
35047: IFFALSE 35128
// begin driver := IsDrivenBy ( vehicle ) ;
35049: LD_ADDR_VAR 0 4
35053: PUSH
35054: LD_VAR 0 1
35058: PPUSH
35059: CALL_OW 311
35063: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35064: LD_VAR 0 4
35068: PPUSH
35069: LD_EXP 104
35073: PUSH
35074: LD_VAR 0 2
35078: ARRAY
35079: PUSH
35080: LD_INT 3
35082: ARRAY
35083: PPUSH
35084: LD_EXP 104
35088: PUSH
35089: LD_VAR 0 2
35093: ARRAY
35094: PUSH
35095: LD_INT 4
35097: ARRAY
35098: PPUSH
35099: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35103: LD_VAR 0 4
35107: PPUSH
35108: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35112: LD_VAR 0 4
35116: PPUSH
35117: LD_VAR 0 2
35121: PPUSH
35122: CALL_OW 180
// end else
35126: GO 35241
// if GetControl ( vehicle ) = control_remote then
35128: LD_VAR 0 1
35132: PPUSH
35133: CALL_OW 263
35137: PUSH
35138: LD_INT 2
35140: EQUAL
35141: IFFALSE 35202
// begin wait ( 0 0$2 ) ;
35143: LD_INT 70
35145: PPUSH
35146: CALL_OW 67
// if Connect ( vehicle ) then
35150: LD_VAR 0 1
35154: PPUSH
35155: CALL 48072 0 1
35159: IFFALSE 35200
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35161: LD_VAR 0 1
35165: PPUSH
35166: LD_EXP 104
35170: PUSH
35171: LD_VAR 0 2
35175: ARRAY
35176: PUSH
35177: LD_INT 3
35179: ARRAY
35180: PPUSH
35181: LD_EXP 104
35185: PUSH
35186: LD_VAR 0 2
35190: ARRAY
35191: PUSH
35192: LD_INT 4
35194: ARRAY
35195: PPUSH
35196: CALL_OW 171
// end else
35200: GO 35241
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35202: LD_VAR 0 1
35206: PPUSH
35207: LD_EXP 104
35211: PUSH
35212: LD_VAR 0 2
35216: ARRAY
35217: PUSH
35218: LD_INT 3
35220: ARRAY
35221: PPUSH
35222: LD_EXP 104
35226: PUSH
35227: LD_VAR 0 2
35231: ARRAY
35232: PUSH
35233: LD_INT 4
35235: ARRAY
35236: PPUSH
35237: CALL_OW 171
// end ; end ;
35241: LD_VAR 0 3
35245: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35246: LD_INT 0
35248: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35249: LD_VAR 0 1
35253: PUSH
35254: LD_INT 250
35256: EQUAL
35257: PUSH
35258: LD_VAR 0 2
35262: PPUSH
35263: CALL_OW 264
35267: PUSH
35268: LD_INT 81
35270: EQUAL
35271: AND
35272: IFFALSE 35293
// MinerPlaceMine ( unit , x , y ) ;
35274: LD_VAR 0 2
35278: PPUSH
35279: LD_VAR 0 4
35283: PPUSH
35284: LD_VAR 0 5
35288: PPUSH
35289: CALL 38283 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35293: LD_VAR 0 1
35297: PUSH
35298: LD_INT 251
35300: EQUAL
35301: PUSH
35302: LD_VAR 0 2
35306: PPUSH
35307: CALL_OW 264
35311: PUSH
35312: LD_INT 81
35314: EQUAL
35315: AND
35316: IFFALSE 35337
// MinerDetonateMine ( unit , x , y ) ;
35318: LD_VAR 0 2
35322: PPUSH
35323: LD_VAR 0 4
35327: PPUSH
35328: LD_VAR 0 5
35332: PPUSH
35333: CALL 38558 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35337: LD_VAR 0 1
35341: PUSH
35342: LD_INT 252
35344: EQUAL
35345: PUSH
35346: LD_VAR 0 2
35350: PPUSH
35351: CALL_OW 264
35355: PUSH
35356: LD_INT 81
35358: EQUAL
35359: AND
35360: IFFALSE 35381
// MinerCreateMinefield ( unit , x , y ) ;
35362: LD_VAR 0 2
35366: PPUSH
35367: LD_VAR 0 4
35371: PPUSH
35372: LD_VAR 0 5
35376: PPUSH
35377: CALL 38975 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35381: LD_VAR 0 1
35385: PUSH
35386: LD_INT 253
35388: EQUAL
35389: PUSH
35390: LD_VAR 0 2
35394: PPUSH
35395: CALL_OW 257
35399: PUSH
35400: LD_INT 5
35402: EQUAL
35403: AND
35404: IFFALSE 35425
// ComBinocular ( unit , x , y ) ;
35406: LD_VAR 0 2
35410: PPUSH
35411: LD_VAR 0 4
35415: PPUSH
35416: LD_VAR 0 5
35420: PPUSH
35421: CALL 39344 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35425: LD_VAR 0 1
35429: PUSH
35430: LD_INT 254
35432: EQUAL
35433: PUSH
35434: LD_VAR 0 2
35438: PPUSH
35439: CALL_OW 264
35443: PUSH
35444: LD_INT 99
35446: EQUAL
35447: AND
35448: PUSH
35449: LD_VAR 0 3
35453: PPUSH
35454: CALL_OW 263
35458: PUSH
35459: LD_INT 3
35461: EQUAL
35462: AND
35463: IFFALSE 35479
// HackDestroyVehicle ( unit , selectedUnit ) ;
35465: LD_VAR 0 2
35469: PPUSH
35470: LD_VAR 0 3
35474: PPUSH
35475: CALL 37647 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35479: LD_VAR 0 1
35483: PUSH
35484: LD_INT 255
35486: EQUAL
35487: PUSH
35488: LD_VAR 0 2
35492: PPUSH
35493: CALL_OW 264
35497: PUSH
35498: LD_INT 14
35500: PUSH
35501: LD_INT 53
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: IN
35508: AND
35509: PUSH
35510: LD_VAR 0 4
35514: PPUSH
35515: LD_VAR 0 5
35519: PPUSH
35520: CALL_OW 488
35524: AND
35525: IFFALSE 35549
// CutTreeXYR ( unit , x , y , 12 ) ;
35527: LD_VAR 0 2
35531: PPUSH
35532: LD_VAR 0 4
35536: PPUSH
35537: LD_VAR 0 5
35541: PPUSH
35542: LD_INT 12
35544: PPUSH
35545: CALL 35644 0 4
// if cmd = 256 then
35549: LD_VAR 0 1
35553: PUSH
35554: LD_INT 256
35556: EQUAL
35557: IFFALSE 35578
// SetFactoryWaypoint ( unit , x , y ) ;
35559: LD_VAR 0 2
35563: PPUSH
35564: LD_VAR 0 4
35568: PPUSH
35569: LD_VAR 0 5
35573: PPUSH
35574: CALL 33559 0 3
// if cmd = 257 then
35578: LD_VAR 0 1
35582: PUSH
35583: LD_INT 257
35585: EQUAL
35586: IFFALSE 35607
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35588: LD_VAR 0 2
35592: PPUSH
35593: LD_VAR 0 4
35597: PPUSH
35598: LD_VAR 0 5
35602: PPUSH
35603: CALL 33921 0 3
// if cmd = 258 then
35607: LD_VAR 0 1
35611: PUSH
35612: LD_INT 258
35614: EQUAL
35615: IFFALSE 35639
// BurnTreeXYR ( unit , x , y , 8 ) ;
35617: LD_VAR 0 2
35621: PPUSH
35622: LD_VAR 0 4
35626: PPUSH
35627: LD_VAR 0 5
35631: PPUSH
35632: LD_INT 8
35634: PPUSH
35635: CALL 36038 0 4
// end ;
35639: LD_VAR 0 6
35643: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35644: LD_INT 0
35646: PPUSH
35647: PPUSH
35648: PPUSH
35649: PPUSH
35650: PPUSH
35651: PPUSH
35652: PPUSH
35653: PPUSH
35654: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
35655: LD_VAR 0 1
35659: PPUSH
35660: CALL_OW 302
35664: NOT
35665: PUSH
35666: LD_VAR 0 2
35670: PPUSH
35671: LD_VAR 0 3
35675: PPUSH
35676: CALL_OW 488
35680: NOT
35681: OR
35682: PUSH
35683: LD_VAR 0 4
35687: NOT
35688: OR
35689: IFFALSE 35693
// exit ;
35691: GO 36033
// list := [ ] ;
35693: LD_ADDR_VAR 0 13
35697: PUSH
35698: EMPTY
35699: ST_TO_ADDR
// if x - r < 0 then
35700: LD_VAR 0 2
35704: PUSH
35705: LD_VAR 0 4
35709: MINUS
35710: PUSH
35711: LD_INT 0
35713: LESS
35714: IFFALSE 35726
// min_x := 0 else
35716: LD_ADDR_VAR 0 7
35720: PUSH
35721: LD_INT 0
35723: ST_TO_ADDR
35724: GO 35742
// min_x := x - r ;
35726: LD_ADDR_VAR 0 7
35730: PUSH
35731: LD_VAR 0 2
35735: PUSH
35736: LD_VAR 0 4
35740: MINUS
35741: ST_TO_ADDR
// if y - r < 0 then
35742: LD_VAR 0 3
35746: PUSH
35747: LD_VAR 0 4
35751: MINUS
35752: PUSH
35753: LD_INT 0
35755: LESS
35756: IFFALSE 35768
// min_y := 0 else
35758: LD_ADDR_VAR 0 8
35762: PUSH
35763: LD_INT 0
35765: ST_TO_ADDR
35766: GO 35784
// min_y := y - r ;
35768: LD_ADDR_VAR 0 8
35772: PUSH
35773: LD_VAR 0 3
35777: PUSH
35778: LD_VAR 0 4
35782: MINUS
35783: ST_TO_ADDR
// max_x := x + r ;
35784: LD_ADDR_VAR 0 9
35788: PUSH
35789: LD_VAR 0 2
35793: PUSH
35794: LD_VAR 0 4
35798: PLUS
35799: ST_TO_ADDR
// max_y := y + r ;
35800: LD_ADDR_VAR 0 10
35804: PUSH
35805: LD_VAR 0 3
35809: PUSH
35810: LD_VAR 0 4
35814: PLUS
35815: ST_TO_ADDR
// for _x = min_x to max_x do
35816: LD_ADDR_VAR 0 11
35820: PUSH
35821: DOUBLE
35822: LD_VAR 0 7
35826: DEC
35827: ST_TO_ADDR
35828: LD_VAR 0 9
35832: PUSH
35833: FOR_TO
35834: IFFALSE 35951
// for _y = min_y to max_y do
35836: LD_ADDR_VAR 0 12
35840: PUSH
35841: DOUBLE
35842: LD_VAR 0 8
35846: DEC
35847: ST_TO_ADDR
35848: LD_VAR 0 10
35852: PUSH
35853: FOR_TO
35854: IFFALSE 35947
// begin if not ValidHex ( _x , _y ) then
35856: LD_VAR 0 11
35860: PPUSH
35861: LD_VAR 0 12
35865: PPUSH
35866: CALL_OW 488
35870: NOT
35871: IFFALSE 35875
// continue ;
35873: GO 35853
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35875: LD_VAR 0 11
35879: PPUSH
35880: LD_VAR 0 12
35884: PPUSH
35885: CALL_OW 351
35889: PUSH
35890: LD_VAR 0 11
35894: PPUSH
35895: LD_VAR 0 12
35899: PPUSH
35900: CALL_OW 554
35904: AND
35905: IFFALSE 35945
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35907: LD_ADDR_VAR 0 13
35911: PUSH
35912: LD_VAR 0 13
35916: PPUSH
35917: LD_VAR 0 13
35921: PUSH
35922: LD_INT 1
35924: PLUS
35925: PPUSH
35926: LD_VAR 0 11
35930: PUSH
35931: LD_VAR 0 12
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PPUSH
35940: CALL_OW 2
35944: ST_TO_ADDR
// end ;
35945: GO 35853
35947: POP
35948: POP
35949: GO 35833
35951: POP
35952: POP
// if not list then
35953: LD_VAR 0 13
35957: NOT
35958: IFFALSE 35962
// exit ;
35960: GO 36033
// for i in list do
35962: LD_ADDR_VAR 0 6
35966: PUSH
35967: LD_VAR 0 13
35971: PUSH
35972: FOR_IN
35973: IFFALSE 36031
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35975: LD_VAR 0 1
35979: PPUSH
35980: LD_STRING M
35982: PUSH
35983: LD_VAR 0 6
35987: PUSH
35988: LD_INT 1
35990: ARRAY
35991: PUSH
35992: LD_VAR 0 6
35996: PUSH
35997: LD_INT 2
35999: ARRAY
36000: PUSH
36001: LD_INT 0
36003: PUSH
36004: LD_INT 0
36006: PUSH
36007: LD_INT 0
36009: PUSH
36010: LD_INT 0
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: LIST
36017: LIST
36018: LIST
36019: LIST
36020: LIST
36021: PUSH
36022: EMPTY
36023: LIST
36024: PPUSH
36025: CALL_OW 447
36029: GO 35972
36031: POP
36032: POP
// end ;
36033: LD_VAR 0 5
36037: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
36038: LD_INT 0
36040: PPUSH
36041: PPUSH
36042: PPUSH
36043: PPUSH
36044: PPUSH
36045: PPUSH
36046: PPUSH
36047: PPUSH
36048: PPUSH
36049: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
36050: LD_VAR 0 1
36054: PPUSH
36055: CALL_OW 302
36059: NOT
36060: PUSH
36061: LD_VAR 0 2
36065: PPUSH
36066: LD_VAR 0 3
36070: PPUSH
36071: CALL_OW 488
36075: NOT
36076: OR
36077: PUSH
36078: LD_VAR 0 4
36082: NOT
36083: OR
36084: IFFALSE 36088
// exit ;
36086: GO 36601
// list := [ ] ;
36088: LD_ADDR_VAR 0 13
36092: PUSH
36093: EMPTY
36094: ST_TO_ADDR
// if x - r < 0 then
36095: LD_VAR 0 2
36099: PUSH
36100: LD_VAR 0 4
36104: MINUS
36105: PUSH
36106: LD_INT 0
36108: LESS
36109: IFFALSE 36121
// min_x := 0 else
36111: LD_ADDR_VAR 0 7
36115: PUSH
36116: LD_INT 0
36118: ST_TO_ADDR
36119: GO 36137
// min_x := x - r ;
36121: LD_ADDR_VAR 0 7
36125: PUSH
36126: LD_VAR 0 2
36130: PUSH
36131: LD_VAR 0 4
36135: MINUS
36136: ST_TO_ADDR
// if y - r < 0 then
36137: LD_VAR 0 3
36141: PUSH
36142: LD_VAR 0 4
36146: MINUS
36147: PUSH
36148: LD_INT 0
36150: LESS
36151: IFFALSE 36163
// min_y := 0 else
36153: LD_ADDR_VAR 0 8
36157: PUSH
36158: LD_INT 0
36160: ST_TO_ADDR
36161: GO 36179
// min_y := y - r ;
36163: LD_ADDR_VAR 0 8
36167: PUSH
36168: LD_VAR 0 3
36172: PUSH
36173: LD_VAR 0 4
36177: MINUS
36178: ST_TO_ADDR
// max_x := x + r ;
36179: LD_ADDR_VAR 0 9
36183: PUSH
36184: LD_VAR 0 2
36188: PUSH
36189: LD_VAR 0 4
36193: PLUS
36194: ST_TO_ADDR
// max_y := y + r ;
36195: LD_ADDR_VAR 0 10
36199: PUSH
36200: LD_VAR 0 3
36204: PUSH
36205: LD_VAR 0 4
36209: PLUS
36210: ST_TO_ADDR
// for _x = min_x to max_x do
36211: LD_ADDR_VAR 0 11
36215: PUSH
36216: DOUBLE
36217: LD_VAR 0 7
36221: DEC
36222: ST_TO_ADDR
36223: LD_VAR 0 9
36227: PUSH
36228: FOR_TO
36229: IFFALSE 36346
// for _y = min_y to max_y do
36231: LD_ADDR_VAR 0 12
36235: PUSH
36236: DOUBLE
36237: LD_VAR 0 8
36241: DEC
36242: ST_TO_ADDR
36243: LD_VAR 0 10
36247: PUSH
36248: FOR_TO
36249: IFFALSE 36342
// begin if not ValidHex ( _x , _y ) then
36251: LD_VAR 0 11
36255: PPUSH
36256: LD_VAR 0 12
36260: PPUSH
36261: CALL_OW 488
36265: NOT
36266: IFFALSE 36270
// continue ;
36268: GO 36248
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36270: LD_VAR 0 11
36274: PPUSH
36275: LD_VAR 0 12
36279: PPUSH
36280: CALL_OW 351
36284: PUSH
36285: LD_VAR 0 11
36289: PPUSH
36290: LD_VAR 0 12
36294: PPUSH
36295: CALL_OW 554
36299: AND
36300: IFFALSE 36340
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36302: LD_ADDR_VAR 0 13
36306: PUSH
36307: LD_VAR 0 13
36311: PPUSH
36312: LD_VAR 0 13
36316: PUSH
36317: LD_INT 1
36319: PLUS
36320: PPUSH
36321: LD_VAR 0 11
36325: PUSH
36326: LD_VAR 0 12
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PPUSH
36335: CALL_OW 2
36339: ST_TO_ADDR
// end ;
36340: GO 36248
36342: POP
36343: POP
36344: GO 36228
36346: POP
36347: POP
// if not list then
36348: LD_VAR 0 13
36352: NOT
36353: IFFALSE 36357
// exit ;
36355: GO 36601
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
36357: LD_ADDR_VAR 0 13
36361: PUSH
36362: LD_VAR 0 1
36366: PPUSH
36367: LD_VAR 0 13
36371: PPUSH
36372: LD_INT 1
36374: PPUSH
36375: LD_INT 1
36377: PPUSH
36378: CALL 45214 0 4
36382: ST_TO_ADDR
// ComStop ( flame ) ;
36383: LD_VAR 0 1
36387: PPUSH
36388: CALL_OW 141
// for i in list do
36392: LD_ADDR_VAR 0 6
36396: PUSH
36397: LD_VAR 0 13
36401: PUSH
36402: FOR_IN
36403: IFFALSE 36434
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
36405: LD_VAR 0 1
36409: PPUSH
36410: LD_VAR 0 6
36414: PUSH
36415: LD_INT 1
36417: ARRAY
36418: PPUSH
36419: LD_VAR 0 6
36423: PUSH
36424: LD_INT 2
36426: ARRAY
36427: PPUSH
36428: CALL_OW 176
36432: GO 36402
36434: POP
36435: POP
// repeat wait ( 0 0$1 ) ;
36436: LD_INT 35
36438: PPUSH
36439: CALL_OW 67
// task := GetTaskList ( flame ) ;
36443: LD_ADDR_VAR 0 14
36447: PUSH
36448: LD_VAR 0 1
36452: PPUSH
36453: CALL_OW 437
36457: ST_TO_ADDR
// if not task then
36458: LD_VAR 0 14
36462: NOT
36463: IFFALSE 36467
// exit ;
36465: GO 36601
// if task [ 1 ] [ 1 ] <> | then
36467: LD_VAR 0 14
36471: PUSH
36472: LD_INT 1
36474: ARRAY
36475: PUSH
36476: LD_INT 1
36478: ARRAY
36479: PUSH
36480: LD_STRING |
36482: NONEQUAL
36483: IFFALSE 36487
// exit ;
36485: GO 36601
// _x := task [ 1 ] [ 2 ] ;
36487: LD_ADDR_VAR 0 11
36491: PUSH
36492: LD_VAR 0 14
36496: PUSH
36497: LD_INT 1
36499: ARRAY
36500: PUSH
36501: LD_INT 2
36503: ARRAY
36504: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
36505: LD_ADDR_VAR 0 12
36509: PUSH
36510: LD_VAR 0 14
36514: PUSH
36515: LD_INT 1
36517: ARRAY
36518: PUSH
36519: LD_INT 3
36521: ARRAY
36522: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
36523: LD_VAR 0 11
36527: PPUSH
36528: LD_VAR 0 12
36532: PPUSH
36533: CALL_OW 351
36537: NOT
36538: PUSH
36539: LD_VAR 0 11
36543: PPUSH
36544: LD_VAR 0 12
36548: PPUSH
36549: CALL_OW 554
36553: NOT
36554: OR
36555: IFFALSE 36589
// begin task := Delete ( task , 1 ) ;
36557: LD_ADDR_VAR 0 14
36561: PUSH
36562: LD_VAR 0 14
36566: PPUSH
36567: LD_INT 1
36569: PPUSH
36570: CALL_OW 3
36574: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
36575: LD_VAR 0 1
36579: PPUSH
36580: LD_VAR 0 14
36584: PPUSH
36585: CALL_OW 446
// end ; until not HasTask ( flame ) ;
36589: LD_VAR 0 1
36593: PPUSH
36594: CALL_OW 314
36598: NOT
36599: IFFALSE 36436
// end ;
36601: LD_VAR 0 5
36605: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36606: LD_EXP 107
36610: NOT
36611: IFFALSE 36661
36613: GO 36615
36615: DISABLE
// begin initHack := true ;
36616: LD_ADDR_EXP 107
36620: PUSH
36621: LD_INT 1
36623: ST_TO_ADDR
// hackTanks := [ ] ;
36624: LD_ADDR_EXP 108
36628: PUSH
36629: EMPTY
36630: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36631: LD_ADDR_EXP 109
36635: PUSH
36636: EMPTY
36637: ST_TO_ADDR
// hackLimit := 3 ;
36638: LD_ADDR_EXP 110
36642: PUSH
36643: LD_INT 3
36645: ST_TO_ADDR
// hackDist := 12 ;
36646: LD_ADDR_EXP 111
36650: PUSH
36651: LD_INT 12
36653: ST_TO_ADDR
// hackCounter := [ ] ;
36654: LD_ADDR_EXP 112
36658: PUSH
36659: EMPTY
36660: ST_TO_ADDR
// end ;
36661: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36662: LD_EXP 107
36666: PUSH
36667: LD_INT 34
36669: PUSH
36670: LD_INT 99
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: PPUSH
36677: CALL_OW 69
36681: AND
36682: IFFALSE 36935
36684: GO 36686
36686: DISABLE
36687: LD_INT 0
36689: PPUSH
36690: PPUSH
// begin enable ;
36691: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36692: LD_ADDR_VAR 0 1
36696: PUSH
36697: LD_INT 34
36699: PUSH
36700: LD_INT 99
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PPUSH
36707: CALL_OW 69
36711: PUSH
36712: FOR_IN
36713: IFFALSE 36933
// begin if not i in hackTanks then
36715: LD_VAR 0 1
36719: PUSH
36720: LD_EXP 108
36724: IN
36725: NOT
36726: IFFALSE 36809
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36728: LD_ADDR_EXP 108
36732: PUSH
36733: LD_EXP 108
36737: PPUSH
36738: LD_EXP 108
36742: PUSH
36743: LD_INT 1
36745: PLUS
36746: PPUSH
36747: LD_VAR 0 1
36751: PPUSH
36752: CALL_OW 1
36756: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36757: LD_ADDR_EXP 109
36761: PUSH
36762: LD_EXP 109
36766: PPUSH
36767: LD_EXP 109
36771: PUSH
36772: LD_INT 1
36774: PLUS
36775: PPUSH
36776: EMPTY
36777: PPUSH
36778: CALL_OW 1
36782: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36783: LD_ADDR_EXP 112
36787: PUSH
36788: LD_EXP 112
36792: PPUSH
36793: LD_EXP 112
36797: PUSH
36798: LD_INT 1
36800: PLUS
36801: PPUSH
36802: EMPTY
36803: PPUSH
36804: CALL_OW 1
36808: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36809: LD_VAR 0 1
36813: PPUSH
36814: CALL_OW 302
36818: NOT
36819: IFFALSE 36832
// begin HackUnlinkAll ( i ) ;
36821: LD_VAR 0 1
36825: PPUSH
36826: CALL 36938 0 1
// continue ;
36830: GO 36712
// end ; HackCheckCapturedStatus ( i ) ;
36832: LD_VAR 0 1
36836: PPUSH
36837: CALL 37381 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36841: LD_ADDR_VAR 0 2
36845: PUSH
36846: LD_INT 81
36848: PUSH
36849: LD_VAR 0 1
36853: PPUSH
36854: CALL_OW 255
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: PUSH
36863: LD_INT 33
36865: PUSH
36866: LD_INT 3
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: PUSH
36873: LD_INT 91
36875: PUSH
36876: LD_VAR 0 1
36880: PUSH
36881: LD_EXP 111
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: LIST
36890: PUSH
36891: LD_INT 50
36893: PUSH
36894: EMPTY
36895: LIST
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: PPUSH
36903: CALL_OW 69
36907: ST_TO_ADDR
// if not tmp then
36908: LD_VAR 0 2
36912: NOT
36913: IFFALSE 36917
// continue ;
36915: GO 36712
// HackLink ( i , tmp ) ;
36917: LD_VAR 0 1
36921: PPUSH
36922: LD_VAR 0 2
36926: PPUSH
36927: CALL 37074 0 2
// end ;
36931: GO 36712
36933: POP
36934: POP
// end ;
36935: PPOPN 2
36937: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36938: LD_INT 0
36940: PPUSH
36941: PPUSH
36942: PPUSH
// if not hack in hackTanks then
36943: LD_VAR 0 1
36947: PUSH
36948: LD_EXP 108
36952: IN
36953: NOT
36954: IFFALSE 36958
// exit ;
36956: GO 37069
// index := GetElementIndex ( hackTanks , hack ) ;
36958: LD_ADDR_VAR 0 4
36962: PUSH
36963: LD_EXP 108
36967: PPUSH
36968: LD_VAR 0 1
36972: PPUSH
36973: CALL 44511 0 2
36977: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36978: LD_EXP 109
36982: PUSH
36983: LD_VAR 0 4
36987: ARRAY
36988: IFFALSE 37069
// begin for i in hackTanksCaptured [ index ] do
36990: LD_ADDR_VAR 0 3
36994: PUSH
36995: LD_EXP 109
36999: PUSH
37000: LD_VAR 0 4
37004: ARRAY
37005: PUSH
37006: FOR_IN
37007: IFFALSE 37033
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37009: LD_VAR 0 3
37013: PUSH
37014: LD_INT 1
37016: ARRAY
37017: PPUSH
37018: LD_VAR 0 3
37022: PUSH
37023: LD_INT 2
37025: ARRAY
37026: PPUSH
37027: CALL_OW 235
37031: GO 37006
37033: POP
37034: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37035: LD_ADDR_EXP 109
37039: PUSH
37040: LD_EXP 109
37044: PPUSH
37045: LD_VAR 0 4
37049: PPUSH
37050: EMPTY
37051: PPUSH
37052: CALL_OW 1
37056: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37057: LD_VAR 0 1
37061: PPUSH
37062: LD_INT 0
37064: PPUSH
37065: CALL_OW 505
// end ; end ;
37069: LD_VAR 0 2
37073: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37074: LD_INT 0
37076: PPUSH
37077: PPUSH
37078: PPUSH
// if not hack in hackTanks or not vehicles then
37079: LD_VAR 0 1
37083: PUSH
37084: LD_EXP 108
37088: IN
37089: NOT
37090: PUSH
37091: LD_VAR 0 2
37095: NOT
37096: OR
37097: IFFALSE 37101
// exit ;
37099: GO 37376
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37101: LD_ADDR_VAR 0 2
37105: PUSH
37106: LD_VAR 0 1
37110: PPUSH
37111: LD_VAR 0 2
37115: PPUSH
37116: LD_INT 1
37118: PPUSH
37119: LD_INT 1
37121: PPUSH
37122: CALL 45161 0 4
37126: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37127: LD_ADDR_VAR 0 5
37131: PUSH
37132: LD_EXP 108
37136: PPUSH
37137: LD_VAR 0 1
37141: PPUSH
37142: CALL 44511 0 2
37146: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37147: LD_EXP 109
37151: PUSH
37152: LD_VAR 0 5
37156: ARRAY
37157: PUSH
37158: LD_EXP 110
37162: LESS
37163: IFFALSE 37352
// begin for i := 1 to vehicles do
37165: LD_ADDR_VAR 0 4
37169: PUSH
37170: DOUBLE
37171: LD_INT 1
37173: DEC
37174: ST_TO_ADDR
37175: LD_VAR 0 2
37179: PUSH
37180: FOR_TO
37181: IFFALSE 37350
// begin if hackTanksCaptured [ index ] = hackLimit then
37183: LD_EXP 109
37187: PUSH
37188: LD_VAR 0 5
37192: ARRAY
37193: PUSH
37194: LD_EXP 110
37198: EQUAL
37199: IFFALSE 37203
// break ;
37201: GO 37350
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37203: LD_ADDR_EXP 112
37207: PUSH
37208: LD_EXP 112
37212: PPUSH
37213: LD_VAR 0 5
37217: PPUSH
37218: LD_EXP 112
37222: PUSH
37223: LD_VAR 0 5
37227: ARRAY
37228: PUSH
37229: LD_INT 1
37231: PLUS
37232: PPUSH
37233: CALL_OW 1
37237: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37238: LD_ADDR_EXP 109
37242: PUSH
37243: LD_EXP 109
37247: PPUSH
37248: LD_VAR 0 5
37252: PUSH
37253: LD_EXP 109
37257: PUSH
37258: LD_VAR 0 5
37262: ARRAY
37263: PUSH
37264: LD_INT 1
37266: PLUS
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PPUSH
37272: LD_VAR 0 2
37276: PUSH
37277: LD_VAR 0 4
37281: ARRAY
37282: PUSH
37283: LD_VAR 0 2
37287: PUSH
37288: LD_VAR 0 4
37292: ARRAY
37293: PPUSH
37294: CALL_OW 255
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: PPUSH
37303: CALL 44726 0 3
37307: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37308: LD_VAR 0 2
37312: PUSH
37313: LD_VAR 0 4
37317: ARRAY
37318: PPUSH
37319: LD_VAR 0 1
37323: PPUSH
37324: CALL_OW 255
37328: PPUSH
37329: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37333: LD_VAR 0 2
37337: PUSH
37338: LD_VAR 0 4
37342: ARRAY
37343: PPUSH
37344: CALL_OW 141
// end ;
37348: GO 37180
37350: POP
37351: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37352: LD_VAR 0 1
37356: PPUSH
37357: LD_EXP 109
37361: PUSH
37362: LD_VAR 0 5
37366: ARRAY
37367: PUSH
37368: LD_INT 0
37370: PLUS
37371: PPUSH
37372: CALL_OW 505
// end ;
37376: LD_VAR 0 3
37380: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37381: LD_INT 0
37383: PPUSH
37384: PPUSH
37385: PPUSH
37386: PPUSH
// if not hack in hackTanks then
37387: LD_VAR 0 1
37391: PUSH
37392: LD_EXP 108
37396: IN
37397: NOT
37398: IFFALSE 37402
// exit ;
37400: GO 37642
// index := GetElementIndex ( hackTanks , hack ) ;
37402: LD_ADDR_VAR 0 4
37406: PUSH
37407: LD_EXP 108
37411: PPUSH
37412: LD_VAR 0 1
37416: PPUSH
37417: CALL 44511 0 2
37421: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37422: LD_ADDR_VAR 0 3
37426: PUSH
37427: DOUBLE
37428: LD_EXP 109
37432: PUSH
37433: LD_VAR 0 4
37437: ARRAY
37438: INC
37439: ST_TO_ADDR
37440: LD_INT 1
37442: PUSH
37443: FOR_DOWNTO
37444: IFFALSE 37616
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37446: LD_ADDR_VAR 0 5
37450: PUSH
37451: LD_EXP 109
37455: PUSH
37456: LD_VAR 0 4
37460: ARRAY
37461: PUSH
37462: LD_VAR 0 3
37466: ARRAY
37467: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37468: LD_VAR 0 5
37472: PUSH
37473: LD_INT 1
37475: ARRAY
37476: PPUSH
37477: CALL_OW 302
37481: NOT
37482: PUSH
37483: LD_VAR 0 5
37487: PUSH
37488: LD_INT 1
37490: ARRAY
37491: PPUSH
37492: CALL_OW 255
37496: PUSH
37497: LD_VAR 0 1
37501: PPUSH
37502: CALL_OW 255
37506: NONEQUAL
37507: OR
37508: IFFALSE 37614
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37510: LD_VAR 0 5
37514: PUSH
37515: LD_INT 1
37517: ARRAY
37518: PPUSH
37519: CALL_OW 305
37523: PUSH
37524: LD_VAR 0 5
37528: PUSH
37529: LD_INT 1
37531: ARRAY
37532: PPUSH
37533: CALL_OW 255
37537: PUSH
37538: LD_VAR 0 1
37542: PPUSH
37543: CALL_OW 255
37547: EQUAL
37548: AND
37549: IFFALSE 37573
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37551: LD_VAR 0 5
37555: PUSH
37556: LD_INT 1
37558: ARRAY
37559: PPUSH
37560: LD_VAR 0 5
37564: PUSH
37565: LD_INT 2
37567: ARRAY
37568: PPUSH
37569: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37573: LD_ADDR_EXP 109
37577: PUSH
37578: LD_EXP 109
37582: PPUSH
37583: LD_VAR 0 4
37587: PPUSH
37588: LD_EXP 109
37592: PUSH
37593: LD_VAR 0 4
37597: ARRAY
37598: PPUSH
37599: LD_VAR 0 3
37603: PPUSH
37604: CALL_OW 3
37608: PPUSH
37609: CALL_OW 1
37613: ST_TO_ADDR
// end ; end ;
37614: GO 37443
37616: POP
37617: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37618: LD_VAR 0 1
37622: PPUSH
37623: LD_EXP 109
37627: PUSH
37628: LD_VAR 0 4
37632: ARRAY
37633: PUSH
37634: LD_INT 0
37636: PLUS
37637: PPUSH
37638: CALL_OW 505
// end ;
37642: LD_VAR 0 2
37646: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37647: LD_INT 0
37649: PPUSH
37650: PPUSH
37651: PPUSH
37652: PPUSH
// if not hack in hackTanks then
37653: LD_VAR 0 1
37657: PUSH
37658: LD_EXP 108
37662: IN
37663: NOT
37664: IFFALSE 37668
// exit ;
37666: GO 37753
// index := GetElementIndex ( hackTanks , hack ) ;
37668: LD_ADDR_VAR 0 5
37672: PUSH
37673: LD_EXP 108
37677: PPUSH
37678: LD_VAR 0 1
37682: PPUSH
37683: CALL 44511 0 2
37687: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37688: LD_ADDR_VAR 0 4
37692: PUSH
37693: DOUBLE
37694: LD_INT 1
37696: DEC
37697: ST_TO_ADDR
37698: LD_EXP 109
37702: PUSH
37703: LD_VAR 0 5
37707: ARRAY
37708: PUSH
37709: FOR_TO
37710: IFFALSE 37751
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37712: LD_EXP 109
37716: PUSH
37717: LD_VAR 0 5
37721: ARRAY
37722: PUSH
37723: LD_VAR 0 4
37727: ARRAY
37728: PUSH
37729: LD_INT 1
37731: ARRAY
37732: PUSH
37733: LD_VAR 0 2
37737: EQUAL
37738: IFFALSE 37749
// KillUnit ( vehicle ) ;
37740: LD_VAR 0 2
37744: PPUSH
37745: CALL_OW 66
37749: GO 37709
37751: POP
37752: POP
// end ;
37753: LD_VAR 0 3
37757: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37758: LD_EXP 113
37762: NOT
37763: IFFALSE 37798
37765: GO 37767
37767: DISABLE
// begin initMiner := true ;
37768: LD_ADDR_EXP 113
37772: PUSH
37773: LD_INT 1
37775: ST_TO_ADDR
// minersList := [ ] ;
37776: LD_ADDR_EXP 114
37780: PUSH
37781: EMPTY
37782: ST_TO_ADDR
// minerMinesList := [ ] ;
37783: LD_ADDR_EXP 115
37787: PUSH
37788: EMPTY
37789: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37790: LD_ADDR_EXP 116
37794: PUSH
37795: LD_INT 5
37797: ST_TO_ADDR
// end ;
37798: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37799: LD_EXP 113
37803: PUSH
37804: LD_INT 34
37806: PUSH
37807: LD_INT 81
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PPUSH
37814: CALL_OW 69
37818: AND
37819: IFFALSE 38280
37821: GO 37823
37823: DISABLE
37824: LD_INT 0
37826: PPUSH
37827: PPUSH
37828: PPUSH
37829: PPUSH
// begin enable ;
37830: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37831: LD_ADDR_VAR 0 1
37835: PUSH
37836: LD_INT 34
37838: PUSH
37839: LD_INT 81
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PPUSH
37846: CALL_OW 69
37850: PUSH
37851: FOR_IN
37852: IFFALSE 37924
// begin if not i in minersList then
37854: LD_VAR 0 1
37858: PUSH
37859: LD_EXP 114
37863: IN
37864: NOT
37865: IFFALSE 37922
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37867: LD_ADDR_EXP 114
37871: PUSH
37872: LD_EXP 114
37876: PPUSH
37877: LD_EXP 114
37881: PUSH
37882: LD_INT 1
37884: PLUS
37885: PPUSH
37886: LD_VAR 0 1
37890: PPUSH
37891: CALL_OW 1
37895: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37896: LD_ADDR_EXP 115
37900: PUSH
37901: LD_EXP 115
37905: PPUSH
37906: LD_EXP 115
37910: PUSH
37911: LD_INT 1
37913: PLUS
37914: PPUSH
37915: EMPTY
37916: PPUSH
37917: CALL_OW 1
37921: ST_TO_ADDR
// end end ;
37922: GO 37851
37924: POP
37925: POP
// for i := minerMinesList downto 1 do
37926: LD_ADDR_VAR 0 1
37930: PUSH
37931: DOUBLE
37932: LD_EXP 115
37936: INC
37937: ST_TO_ADDR
37938: LD_INT 1
37940: PUSH
37941: FOR_DOWNTO
37942: IFFALSE 38278
// begin if IsLive ( minersList [ i ] ) then
37944: LD_EXP 114
37948: PUSH
37949: LD_VAR 0 1
37953: ARRAY
37954: PPUSH
37955: CALL_OW 300
37959: IFFALSE 37987
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37961: LD_EXP 114
37965: PUSH
37966: LD_VAR 0 1
37970: ARRAY
37971: PPUSH
37972: LD_EXP 115
37976: PUSH
37977: LD_VAR 0 1
37981: ARRAY
37982: PPUSH
37983: CALL_OW 505
// if not minerMinesList [ i ] then
37987: LD_EXP 115
37991: PUSH
37992: LD_VAR 0 1
37996: ARRAY
37997: NOT
37998: IFFALSE 38002
// continue ;
38000: GO 37941
// for j := minerMinesList [ i ] downto 1 do
38002: LD_ADDR_VAR 0 2
38006: PUSH
38007: DOUBLE
38008: LD_EXP 115
38012: PUSH
38013: LD_VAR 0 1
38017: ARRAY
38018: INC
38019: ST_TO_ADDR
38020: LD_INT 1
38022: PUSH
38023: FOR_DOWNTO
38024: IFFALSE 38274
// begin side := GetSide ( minersList [ i ] ) ;
38026: LD_ADDR_VAR 0 3
38030: PUSH
38031: LD_EXP 114
38035: PUSH
38036: LD_VAR 0 1
38040: ARRAY
38041: PPUSH
38042: CALL_OW 255
38046: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38047: LD_ADDR_VAR 0 4
38051: PUSH
38052: LD_EXP 115
38056: PUSH
38057: LD_VAR 0 1
38061: ARRAY
38062: PUSH
38063: LD_VAR 0 2
38067: ARRAY
38068: PUSH
38069: LD_INT 1
38071: ARRAY
38072: PPUSH
38073: LD_EXP 115
38077: PUSH
38078: LD_VAR 0 1
38082: ARRAY
38083: PUSH
38084: LD_VAR 0 2
38088: ARRAY
38089: PUSH
38090: LD_INT 2
38092: ARRAY
38093: PPUSH
38094: CALL_OW 428
38098: ST_TO_ADDR
// if not tmp then
38099: LD_VAR 0 4
38103: NOT
38104: IFFALSE 38108
// continue ;
38106: GO 38023
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38108: LD_VAR 0 4
38112: PUSH
38113: LD_INT 81
38115: PUSH
38116: LD_VAR 0 3
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PPUSH
38125: CALL_OW 69
38129: IN
38130: PUSH
38131: LD_EXP 115
38135: PUSH
38136: LD_VAR 0 1
38140: ARRAY
38141: PUSH
38142: LD_VAR 0 2
38146: ARRAY
38147: PUSH
38148: LD_INT 1
38150: ARRAY
38151: PPUSH
38152: LD_EXP 115
38156: PUSH
38157: LD_VAR 0 1
38161: ARRAY
38162: PUSH
38163: LD_VAR 0 2
38167: ARRAY
38168: PUSH
38169: LD_INT 2
38171: ARRAY
38172: PPUSH
38173: CALL_OW 458
38177: AND
38178: IFFALSE 38272
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38180: LD_EXP 115
38184: PUSH
38185: LD_VAR 0 1
38189: ARRAY
38190: PUSH
38191: LD_VAR 0 2
38195: ARRAY
38196: PUSH
38197: LD_INT 1
38199: ARRAY
38200: PPUSH
38201: LD_EXP 115
38205: PUSH
38206: LD_VAR 0 1
38210: ARRAY
38211: PUSH
38212: LD_VAR 0 2
38216: ARRAY
38217: PUSH
38218: LD_INT 2
38220: ARRAY
38221: PPUSH
38222: LD_VAR 0 3
38226: PPUSH
38227: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38231: LD_ADDR_EXP 115
38235: PUSH
38236: LD_EXP 115
38240: PPUSH
38241: LD_VAR 0 1
38245: PPUSH
38246: LD_EXP 115
38250: PUSH
38251: LD_VAR 0 1
38255: ARRAY
38256: PPUSH
38257: LD_VAR 0 2
38261: PPUSH
38262: CALL_OW 3
38266: PPUSH
38267: CALL_OW 1
38271: ST_TO_ADDR
// end ; end ;
38272: GO 38023
38274: POP
38275: POP
// end ;
38276: GO 37941
38278: POP
38279: POP
// end ;
38280: PPOPN 4
38282: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38283: LD_INT 0
38285: PPUSH
38286: PPUSH
// result := false ;
38287: LD_ADDR_VAR 0 4
38291: PUSH
38292: LD_INT 0
38294: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38295: LD_VAR 0 1
38299: PPUSH
38300: CALL_OW 264
38304: PUSH
38305: LD_INT 81
38307: EQUAL
38308: NOT
38309: IFFALSE 38313
// exit ;
38311: GO 38553
// index := GetElementIndex ( minersList , unit ) ;
38313: LD_ADDR_VAR 0 5
38317: PUSH
38318: LD_EXP 114
38322: PPUSH
38323: LD_VAR 0 1
38327: PPUSH
38328: CALL 44511 0 2
38332: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38333: LD_EXP 115
38337: PUSH
38338: LD_VAR 0 5
38342: ARRAY
38343: PUSH
38344: LD_EXP 116
38348: GREATEREQUAL
38349: IFFALSE 38353
// exit ;
38351: GO 38553
// ComMoveXY ( unit , x , y ) ;
38353: LD_VAR 0 1
38357: PPUSH
38358: LD_VAR 0 2
38362: PPUSH
38363: LD_VAR 0 3
38367: PPUSH
38368: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38372: LD_INT 35
38374: PPUSH
38375: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38379: LD_VAR 0 1
38383: PPUSH
38384: LD_VAR 0 2
38388: PPUSH
38389: LD_VAR 0 3
38393: PPUSH
38394: CALL 76252 0 3
38398: NOT
38399: PUSH
38400: LD_VAR 0 1
38404: PPUSH
38405: CALL_OW 314
38409: AND
38410: IFFALSE 38414
// exit ;
38412: GO 38553
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38414: LD_VAR 0 2
38418: PPUSH
38419: LD_VAR 0 3
38423: PPUSH
38424: CALL_OW 428
38428: PUSH
38429: LD_VAR 0 1
38433: EQUAL
38434: PUSH
38435: LD_VAR 0 1
38439: PPUSH
38440: CALL_OW 314
38444: NOT
38445: AND
38446: IFFALSE 38372
// PlaySoundXY ( x , y , PlantMine ) ;
38448: LD_VAR 0 2
38452: PPUSH
38453: LD_VAR 0 3
38457: PPUSH
38458: LD_STRING PlantMine
38460: PPUSH
38461: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38465: LD_VAR 0 2
38469: PPUSH
38470: LD_VAR 0 3
38474: PPUSH
38475: LD_VAR 0 1
38479: PPUSH
38480: CALL_OW 255
38484: PPUSH
38485: LD_INT 0
38487: PPUSH
38488: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38492: LD_ADDR_EXP 115
38496: PUSH
38497: LD_EXP 115
38501: PPUSH
38502: LD_VAR 0 5
38506: PUSH
38507: LD_EXP 115
38511: PUSH
38512: LD_VAR 0 5
38516: ARRAY
38517: PUSH
38518: LD_INT 1
38520: PLUS
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PPUSH
38526: LD_VAR 0 2
38530: PUSH
38531: LD_VAR 0 3
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PPUSH
38540: CALL 44726 0 3
38544: ST_TO_ADDR
// result := true ;
38545: LD_ADDR_VAR 0 4
38549: PUSH
38550: LD_INT 1
38552: ST_TO_ADDR
// end ;
38553: LD_VAR 0 4
38557: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38558: LD_INT 0
38560: PPUSH
38561: PPUSH
38562: PPUSH
// if not unit in minersList then
38563: LD_VAR 0 1
38567: PUSH
38568: LD_EXP 114
38572: IN
38573: NOT
38574: IFFALSE 38578
// exit ;
38576: GO 38970
// index := GetElementIndex ( minersList , unit ) ;
38578: LD_ADDR_VAR 0 6
38582: PUSH
38583: LD_EXP 114
38587: PPUSH
38588: LD_VAR 0 1
38592: PPUSH
38593: CALL 44511 0 2
38597: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38598: LD_ADDR_VAR 0 5
38602: PUSH
38603: DOUBLE
38604: LD_EXP 115
38608: PUSH
38609: LD_VAR 0 6
38613: ARRAY
38614: INC
38615: ST_TO_ADDR
38616: LD_INT 1
38618: PUSH
38619: FOR_DOWNTO
38620: IFFALSE 38781
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38622: LD_EXP 115
38626: PUSH
38627: LD_VAR 0 6
38631: ARRAY
38632: PUSH
38633: LD_VAR 0 5
38637: ARRAY
38638: PUSH
38639: LD_INT 1
38641: ARRAY
38642: PUSH
38643: LD_VAR 0 2
38647: EQUAL
38648: PUSH
38649: LD_EXP 115
38653: PUSH
38654: LD_VAR 0 6
38658: ARRAY
38659: PUSH
38660: LD_VAR 0 5
38664: ARRAY
38665: PUSH
38666: LD_INT 2
38668: ARRAY
38669: PUSH
38670: LD_VAR 0 3
38674: EQUAL
38675: AND
38676: IFFALSE 38779
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38678: LD_EXP 115
38682: PUSH
38683: LD_VAR 0 6
38687: ARRAY
38688: PUSH
38689: LD_VAR 0 5
38693: ARRAY
38694: PUSH
38695: LD_INT 1
38697: ARRAY
38698: PPUSH
38699: LD_EXP 115
38703: PUSH
38704: LD_VAR 0 6
38708: ARRAY
38709: PUSH
38710: LD_VAR 0 5
38714: ARRAY
38715: PUSH
38716: LD_INT 2
38718: ARRAY
38719: PPUSH
38720: LD_VAR 0 1
38724: PPUSH
38725: CALL_OW 255
38729: PPUSH
38730: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38734: LD_ADDR_EXP 115
38738: PUSH
38739: LD_EXP 115
38743: PPUSH
38744: LD_VAR 0 6
38748: PPUSH
38749: LD_EXP 115
38753: PUSH
38754: LD_VAR 0 6
38758: ARRAY
38759: PPUSH
38760: LD_VAR 0 5
38764: PPUSH
38765: CALL_OW 3
38769: PPUSH
38770: CALL_OW 1
38774: ST_TO_ADDR
// exit ;
38775: POP
38776: POP
38777: GO 38970
// end ; end ;
38779: GO 38619
38781: POP
38782: POP
// for i := minerMinesList [ index ] downto 1 do
38783: LD_ADDR_VAR 0 5
38787: PUSH
38788: DOUBLE
38789: LD_EXP 115
38793: PUSH
38794: LD_VAR 0 6
38798: ARRAY
38799: INC
38800: ST_TO_ADDR
38801: LD_INT 1
38803: PUSH
38804: FOR_DOWNTO
38805: IFFALSE 38968
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38807: LD_EXP 115
38811: PUSH
38812: LD_VAR 0 6
38816: ARRAY
38817: PUSH
38818: LD_VAR 0 5
38822: ARRAY
38823: PUSH
38824: LD_INT 1
38826: ARRAY
38827: PPUSH
38828: LD_EXP 115
38832: PUSH
38833: LD_VAR 0 6
38837: ARRAY
38838: PUSH
38839: LD_VAR 0 5
38843: ARRAY
38844: PUSH
38845: LD_INT 2
38847: ARRAY
38848: PPUSH
38849: LD_VAR 0 2
38853: PPUSH
38854: LD_VAR 0 3
38858: PPUSH
38859: CALL_OW 298
38863: PUSH
38864: LD_INT 6
38866: LESS
38867: IFFALSE 38966
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38869: LD_EXP 115
38873: PUSH
38874: LD_VAR 0 6
38878: ARRAY
38879: PUSH
38880: LD_VAR 0 5
38884: ARRAY
38885: PUSH
38886: LD_INT 1
38888: ARRAY
38889: PPUSH
38890: LD_EXP 115
38894: PUSH
38895: LD_VAR 0 6
38899: ARRAY
38900: PUSH
38901: LD_VAR 0 5
38905: ARRAY
38906: PUSH
38907: LD_INT 2
38909: ARRAY
38910: PPUSH
38911: LD_VAR 0 1
38915: PPUSH
38916: CALL_OW 255
38920: PPUSH
38921: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38925: LD_ADDR_EXP 115
38929: PUSH
38930: LD_EXP 115
38934: PPUSH
38935: LD_VAR 0 6
38939: PPUSH
38940: LD_EXP 115
38944: PUSH
38945: LD_VAR 0 6
38949: ARRAY
38950: PPUSH
38951: LD_VAR 0 5
38955: PPUSH
38956: CALL_OW 3
38960: PPUSH
38961: CALL_OW 1
38965: ST_TO_ADDR
// end ; end ;
38966: GO 38804
38968: POP
38969: POP
// end ;
38970: LD_VAR 0 4
38974: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38975: LD_INT 0
38977: PPUSH
38978: PPUSH
38979: PPUSH
38980: PPUSH
38981: PPUSH
38982: PPUSH
38983: PPUSH
38984: PPUSH
38985: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38986: LD_VAR 0 1
38990: PPUSH
38991: CALL_OW 264
38995: PUSH
38996: LD_INT 81
38998: EQUAL
38999: NOT
39000: PUSH
39001: LD_VAR 0 1
39005: PUSH
39006: LD_EXP 114
39010: IN
39011: NOT
39012: OR
39013: IFFALSE 39017
// exit ;
39015: GO 39339
// index := GetElementIndex ( minersList , unit ) ;
39017: LD_ADDR_VAR 0 6
39021: PUSH
39022: LD_EXP 114
39026: PPUSH
39027: LD_VAR 0 1
39031: PPUSH
39032: CALL 44511 0 2
39036: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39037: LD_ADDR_VAR 0 8
39041: PUSH
39042: LD_EXP 116
39046: PUSH
39047: LD_EXP 115
39051: PUSH
39052: LD_VAR 0 6
39056: ARRAY
39057: MINUS
39058: ST_TO_ADDR
// if not minesFreeAmount then
39059: LD_VAR 0 8
39063: NOT
39064: IFFALSE 39068
// exit ;
39066: GO 39339
// tmp := [ ] ;
39068: LD_ADDR_VAR 0 7
39072: PUSH
39073: EMPTY
39074: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39075: LD_ADDR_VAR 0 5
39079: PUSH
39080: DOUBLE
39081: LD_INT 1
39083: DEC
39084: ST_TO_ADDR
39085: LD_VAR 0 8
39089: PUSH
39090: FOR_TO
39091: IFFALSE 39286
// begin _d := rand ( 0 , 5 ) ;
39093: LD_ADDR_VAR 0 11
39097: PUSH
39098: LD_INT 0
39100: PPUSH
39101: LD_INT 5
39103: PPUSH
39104: CALL_OW 12
39108: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39109: LD_ADDR_VAR 0 12
39113: PUSH
39114: LD_INT 2
39116: PPUSH
39117: LD_INT 6
39119: PPUSH
39120: CALL_OW 12
39124: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39125: LD_ADDR_VAR 0 9
39129: PUSH
39130: LD_VAR 0 2
39134: PPUSH
39135: LD_VAR 0 11
39139: PPUSH
39140: LD_VAR 0 12
39144: PPUSH
39145: CALL_OW 272
39149: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39150: LD_ADDR_VAR 0 10
39154: PUSH
39155: LD_VAR 0 3
39159: PPUSH
39160: LD_VAR 0 11
39164: PPUSH
39165: LD_VAR 0 12
39169: PPUSH
39170: CALL_OW 273
39174: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39175: LD_VAR 0 9
39179: PPUSH
39180: LD_VAR 0 10
39184: PPUSH
39185: CALL_OW 488
39189: PUSH
39190: LD_VAR 0 9
39194: PUSH
39195: LD_VAR 0 10
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_VAR 0 7
39208: IN
39209: NOT
39210: AND
39211: PUSH
39212: LD_VAR 0 9
39216: PPUSH
39217: LD_VAR 0 10
39221: PPUSH
39222: CALL_OW 458
39226: NOT
39227: AND
39228: IFFALSE 39270
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39230: LD_ADDR_VAR 0 7
39234: PUSH
39235: LD_VAR 0 7
39239: PPUSH
39240: LD_VAR 0 7
39244: PUSH
39245: LD_INT 1
39247: PLUS
39248: PPUSH
39249: LD_VAR 0 9
39253: PUSH
39254: LD_VAR 0 10
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PPUSH
39263: CALL_OW 1
39267: ST_TO_ADDR
39268: GO 39284
// i := i - 1 ;
39270: LD_ADDR_VAR 0 5
39274: PUSH
39275: LD_VAR 0 5
39279: PUSH
39280: LD_INT 1
39282: MINUS
39283: ST_TO_ADDR
// end ;
39284: GO 39090
39286: POP
39287: POP
// for i in tmp do
39288: LD_ADDR_VAR 0 5
39292: PUSH
39293: LD_VAR 0 7
39297: PUSH
39298: FOR_IN
39299: IFFALSE 39337
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39301: LD_VAR 0 1
39305: PPUSH
39306: LD_VAR 0 5
39310: PUSH
39311: LD_INT 1
39313: ARRAY
39314: PPUSH
39315: LD_VAR 0 5
39319: PUSH
39320: LD_INT 2
39322: ARRAY
39323: PPUSH
39324: CALL 38283 0 3
39328: NOT
39329: IFFALSE 39335
// exit ;
39331: POP
39332: POP
39333: GO 39339
39335: GO 39298
39337: POP
39338: POP
// end ;
39339: LD_VAR 0 4
39343: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39344: LD_INT 0
39346: PPUSH
39347: PPUSH
39348: PPUSH
39349: PPUSH
39350: PPUSH
39351: PPUSH
39352: PPUSH
// if not GetClass ( unit ) = class_sniper then
39353: LD_VAR 0 1
39357: PPUSH
39358: CALL_OW 257
39362: PUSH
39363: LD_INT 5
39365: EQUAL
39366: NOT
39367: IFFALSE 39371
// exit ;
39369: GO 39759
// dist := 8 ;
39371: LD_ADDR_VAR 0 5
39375: PUSH
39376: LD_INT 8
39378: ST_TO_ADDR
// viewRange := 12 ;
39379: LD_ADDR_VAR 0 7
39383: PUSH
39384: LD_INT 12
39386: ST_TO_ADDR
// side := GetSide ( unit ) ;
39387: LD_ADDR_VAR 0 6
39391: PUSH
39392: LD_VAR 0 1
39396: PPUSH
39397: CALL_OW 255
39401: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39402: LD_INT 61
39404: PPUSH
39405: LD_VAR 0 6
39409: PPUSH
39410: CALL_OW 321
39414: PUSH
39415: LD_INT 2
39417: EQUAL
39418: IFFALSE 39428
// viewRange := 16 ;
39420: LD_ADDR_VAR 0 7
39424: PUSH
39425: LD_INT 16
39427: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39428: LD_VAR 0 1
39432: PPUSH
39433: LD_VAR 0 2
39437: PPUSH
39438: LD_VAR 0 3
39442: PPUSH
39443: CALL_OW 297
39447: PUSH
39448: LD_VAR 0 5
39452: GREATER
39453: IFFALSE 39532
// begin ComMoveXY ( unit , x , y ) ;
39455: LD_VAR 0 1
39459: PPUSH
39460: LD_VAR 0 2
39464: PPUSH
39465: LD_VAR 0 3
39469: PPUSH
39470: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39474: LD_INT 35
39476: PPUSH
39477: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39481: LD_VAR 0 1
39485: PPUSH
39486: LD_VAR 0 2
39490: PPUSH
39491: LD_VAR 0 3
39495: PPUSH
39496: CALL 76252 0 3
39500: NOT
39501: IFFALSE 39505
// exit ;
39503: GO 39759
// until GetDistUnitXY ( unit , x , y ) < dist ;
39505: LD_VAR 0 1
39509: PPUSH
39510: LD_VAR 0 2
39514: PPUSH
39515: LD_VAR 0 3
39519: PPUSH
39520: CALL_OW 297
39524: PUSH
39525: LD_VAR 0 5
39529: LESS
39530: IFFALSE 39474
// end ; ComTurnXY ( unit , x , y ) ;
39532: LD_VAR 0 1
39536: PPUSH
39537: LD_VAR 0 2
39541: PPUSH
39542: LD_VAR 0 3
39546: PPUSH
39547: CALL_OW 118
// wait ( 5 ) ;
39551: LD_INT 5
39553: PPUSH
39554: CALL_OW 67
// _d := GetDir ( unit ) ;
39558: LD_ADDR_VAR 0 10
39562: PUSH
39563: LD_VAR 0 1
39567: PPUSH
39568: CALL_OW 254
39572: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39573: LD_ADDR_VAR 0 8
39577: PUSH
39578: LD_VAR 0 1
39582: PPUSH
39583: CALL_OW 250
39587: PPUSH
39588: LD_VAR 0 10
39592: PPUSH
39593: LD_VAR 0 5
39597: PPUSH
39598: CALL_OW 272
39602: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39603: LD_ADDR_VAR 0 9
39607: PUSH
39608: LD_VAR 0 1
39612: PPUSH
39613: CALL_OW 251
39617: PPUSH
39618: LD_VAR 0 10
39622: PPUSH
39623: LD_VAR 0 5
39627: PPUSH
39628: CALL_OW 273
39632: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39633: LD_VAR 0 8
39637: PPUSH
39638: LD_VAR 0 9
39642: PPUSH
39643: CALL_OW 488
39647: NOT
39648: IFFALSE 39652
// exit ;
39650: GO 39759
// ComAnimCustom ( unit , 1 ) ;
39652: LD_VAR 0 1
39656: PPUSH
39657: LD_INT 1
39659: PPUSH
39660: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39664: LD_VAR 0 8
39668: PPUSH
39669: LD_VAR 0 9
39673: PPUSH
39674: LD_VAR 0 6
39678: PPUSH
39679: LD_VAR 0 7
39683: PPUSH
39684: CALL_OW 330
// repeat wait ( 1 ) ;
39688: LD_INT 1
39690: PPUSH
39691: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39695: LD_VAR 0 1
39699: PPUSH
39700: CALL_OW 316
39704: PUSH
39705: LD_VAR 0 1
39709: PPUSH
39710: CALL_OW 314
39714: OR
39715: PUSH
39716: LD_VAR 0 1
39720: PPUSH
39721: CALL_OW 302
39725: NOT
39726: OR
39727: PUSH
39728: LD_VAR 0 1
39732: PPUSH
39733: CALL_OW 301
39737: OR
39738: IFFALSE 39688
// RemoveSeeing ( _x , _y , side ) ;
39740: LD_VAR 0 8
39744: PPUSH
39745: LD_VAR 0 9
39749: PPUSH
39750: LD_VAR 0 6
39754: PPUSH
39755: CALL_OW 331
// end ; end_of_file
39759: LD_VAR 0 4
39763: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39764: LD_INT 0
39766: PPUSH
39767: PPUSH
// if exist_mode then
39768: LD_VAR 0 2
39772: IFFALSE 39797
// unit := CreateCharacter ( prefix & ident ) else
39774: LD_ADDR_VAR 0 5
39778: PUSH
39779: LD_VAR 0 3
39783: PUSH
39784: LD_VAR 0 1
39788: STR
39789: PPUSH
39790: CALL_OW 34
39794: ST_TO_ADDR
39795: GO 39812
// unit := NewCharacter ( ident ) ;
39797: LD_ADDR_VAR 0 5
39801: PUSH
39802: LD_VAR 0 1
39806: PPUSH
39807: CALL_OW 25
39811: ST_TO_ADDR
// result := unit ;
39812: LD_ADDR_VAR 0 4
39816: PUSH
39817: LD_VAR 0 5
39821: ST_TO_ADDR
// end ;
39822: LD_VAR 0 4
39826: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39827: LD_INT 0
39829: PPUSH
39830: PPUSH
// if not side or not nation then
39831: LD_VAR 0 1
39835: NOT
39836: PUSH
39837: LD_VAR 0 2
39841: NOT
39842: OR
39843: IFFALSE 39847
// exit ;
39845: GO 40615
// case nation of nation_american :
39847: LD_VAR 0 2
39851: PUSH
39852: LD_INT 1
39854: DOUBLE
39855: EQUAL
39856: IFTRUE 39860
39858: GO 40074
39860: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39861: LD_ADDR_VAR 0 4
39865: PUSH
39866: LD_INT 35
39868: PUSH
39869: LD_INT 45
39871: PUSH
39872: LD_INT 46
39874: PUSH
39875: LD_INT 47
39877: PUSH
39878: LD_INT 82
39880: PUSH
39881: LD_INT 83
39883: PUSH
39884: LD_INT 84
39886: PUSH
39887: LD_INT 85
39889: PUSH
39890: LD_INT 86
39892: PUSH
39893: LD_INT 1
39895: PUSH
39896: LD_INT 2
39898: PUSH
39899: LD_INT 6
39901: PUSH
39902: LD_INT 15
39904: PUSH
39905: LD_INT 16
39907: PUSH
39908: LD_INT 7
39910: PUSH
39911: LD_INT 12
39913: PUSH
39914: LD_INT 13
39916: PUSH
39917: LD_INT 10
39919: PUSH
39920: LD_INT 14
39922: PUSH
39923: LD_INT 20
39925: PUSH
39926: LD_INT 21
39928: PUSH
39929: LD_INT 22
39931: PUSH
39932: LD_INT 25
39934: PUSH
39935: LD_INT 32
39937: PUSH
39938: LD_INT 27
39940: PUSH
39941: LD_INT 36
39943: PUSH
39944: LD_INT 69
39946: PUSH
39947: LD_INT 39
39949: PUSH
39950: LD_INT 34
39952: PUSH
39953: LD_INT 40
39955: PUSH
39956: LD_INT 48
39958: PUSH
39959: LD_INT 49
39961: PUSH
39962: LD_INT 50
39964: PUSH
39965: LD_INT 51
39967: PUSH
39968: LD_INT 52
39970: PUSH
39971: LD_INT 53
39973: PUSH
39974: LD_INT 54
39976: PUSH
39977: LD_INT 55
39979: PUSH
39980: LD_INT 56
39982: PUSH
39983: LD_INT 57
39985: PUSH
39986: LD_INT 58
39988: PUSH
39989: LD_INT 59
39991: PUSH
39992: LD_INT 60
39994: PUSH
39995: LD_INT 61
39997: PUSH
39998: LD_INT 62
40000: PUSH
40001: LD_INT 80
40003: PUSH
40004: LD_INT 82
40006: PUSH
40007: LD_INT 83
40009: PUSH
40010: LD_INT 84
40012: PUSH
40013: LD_INT 85
40015: PUSH
40016: LD_INT 86
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: ST_TO_ADDR
40072: GO 40539
40074: LD_INT 2
40076: DOUBLE
40077: EQUAL
40078: IFTRUE 40082
40080: GO 40308
40082: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40083: LD_ADDR_VAR 0 4
40087: PUSH
40088: LD_INT 35
40090: PUSH
40091: LD_INT 45
40093: PUSH
40094: LD_INT 46
40096: PUSH
40097: LD_INT 47
40099: PUSH
40100: LD_INT 82
40102: PUSH
40103: LD_INT 83
40105: PUSH
40106: LD_INT 84
40108: PUSH
40109: LD_INT 85
40111: PUSH
40112: LD_INT 87
40114: PUSH
40115: LD_INT 70
40117: PUSH
40118: LD_INT 1
40120: PUSH
40121: LD_INT 11
40123: PUSH
40124: LD_INT 3
40126: PUSH
40127: LD_INT 4
40129: PUSH
40130: LD_INT 5
40132: PUSH
40133: LD_INT 6
40135: PUSH
40136: LD_INT 15
40138: PUSH
40139: LD_INT 18
40141: PUSH
40142: LD_INT 7
40144: PUSH
40145: LD_INT 17
40147: PUSH
40148: LD_INT 8
40150: PUSH
40151: LD_INT 20
40153: PUSH
40154: LD_INT 21
40156: PUSH
40157: LD_INT 22
40159: PUSH
40160: LD_INT 72
40162: PUSH
40163: LD_INT 26
40165: PUSH
40166: LD_INT 69
40168: PUSH
40169: LD_INT 39
40171: PUSH
40172: LD_INT 40
40174: PUSH
40175: LD_INT 41
40177: PUSH
40178: LD_INT 42
40180: PUSH
40181: LD_INT 43
40183: PUSH
40184: LD_INT 48
40186: PUSH
40187: LD_INT 49
40189: PUSH
40190: LD_INT 50
40192: PUSH
40193: LD_INT 51
40195: PUSH
40196: LD_INT 52
40198: PUSH
40199: LD_INT 53
40201: PUSH
40202: LD_INT 54
40204: PUSH
40205: LD_INT 55
40207: PUSH
40208: LD_INT 56
40210: PUSH
40211: LD_INT 60
40213: PUSH
40214: LD_INT 61
40216: PUSH
40217: LD_INT 62
40219: PUSH
40220: LD_INT 66
40222: PUSH
40223: LD_INT 67
40225: PUSH
40226: LD_INT 68
40228: PUSH
40229: LD_INT 81
40231: PUSH
40232: LD_INT 82
40234: PUSH
40235: LD_INT 83
40237: PUSH
40238: LD_INT 84
40240: PUSH
40241: LD_INT 85
40243: PUSH
40244: LD_INT 87
40246: PUSH
40247: LD_INT 88
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: ST_TO_ADDR
40306: GO 40539
40308: LD_INT 3
40310: DOUBLE
40311: EQUAL
40312: IFTRUE 40316
40314: GO 40538
40316: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40317: LD_ADDR_VAR 0 4
40321: PUSH
40322: LD_INT 46
40324: PUSH
40325: LD_INT 47
40327: PUSH
40328: LD_INT 1
40330: PUSH
40331: LD_INT 2
40333: PUSH
40334: LD_INT 82
40336: PUSH
40337: LD_INT 83
40339: PUSH
40340: LD_INT 84
40342: PUSH
40343: LD_INT 85
40345: PUSH
40346: LD_INT 86
40348: PUSH
40349: LD_INT 11
40351: PUSH
40352: LD_INT 9
40354: PUSH
40355: LD_INT 20
40357: PUSH
40358: LD_INT 19
40360: PUSH
40361: LD_INT 21
40363: PUSH
40364: LD_INT 24
40366: PUSH
40367: LD_INT 22
40369: PUSH
40370: LD_INT 25
40372: PUSH
40373: LD_INT 28
40375: PUSH
40376: LD_INT 29
40378: PUSH
40379: LD_INT 30
40381: PUSH
40382: LD_INT 31
40384: PUSH
40385: LD_INT 37
40387: PUSH
40388: LD_INT 38
40390: PUSH
40391: LD_INT 32
40393: PUSH
40394: LD_INT 27
40396: PUSH
40397: LD_INT 33
40399: PUSH
40400: LD_INT 69
40402: PUSH
40403: LD_INT 39
40405: PUSH
40406: LD_INT 34
40408: PUSH
40409: LD_INT 40
40411: PUSH
40412: LD_INT 71
40414: PUSH
40415: LD_INT 23
40417: PUSH
40418: LD_INT 44
40420: PUSH
40421: LD_INT 48
40423: PUSH
40424: LD_INT 49
40426: PUSH
40427: LD_INT 50
40429: PUSH
40430: LD_INT 51
40432: PUSH
40433: LD_INT 52
40435: PUSH
40436: LD_INT 53
40438: PUSH
40439: LD_INT 54
40441: PUSH
40442: LD_INT 55
40444: PUSH
40445: LD_INT 56
40447: PUSH
40448: LD_INT 57
40450: PUSH
40451: LD_INT 58
40453: PUSH
40454: LD_INT 59
40456: PUSH
40457: LD_INT 63
40459: PUSH
40460: LD_INT 64
40462: PUSH
40463: LD_INT 65
40465: PUSH
40466: LD_INT 82
40468: PUSH
40469: LD_INT 83
40471: PUSH
40472: LD_INT 84
40474: PUSH
40475: LD_INT 85
40477: PUSH
40478: LD_INT 86
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: ST_TO_ADDR
40536: GO 40539
40538: POP
// if state > - 1 and state < 3 then
40539: LD_VAR 0 3
40543: PUSH
40544: LD_INT 1
40546: NEG
40547: GREATER
40548: PUSH
40549: LD_VAR 0 3
40553: PUSH
40554: LD_INT 3
40556: LESS
40557: AND
40558: IFFALSE 40615
// for i in result do
40560: LD_ADDR_VAR 0 5
40564: PUSH
40565: LD_VAR 0 4
40569: PUSH
40570: FOR_IN
40571: IFFALSE 40613
// if GetTech ( i , side ) <> state then
40573: LD_VAR 0 5
40577: PPUSH
40578: LD_VAR 0 1
40582: PPUSH
40583: CALL_OW 321
40587: PUSH
40588: LD_VAR 0 3
40592: NONEQUAL
40593: IFFALSE 40611
// result := result diff i ;
40595: LD_ADDR_VAR 0 4
40599: PUSH
40600: LD_VAR 0 4
40604: PUSH
40605: LD_VAR 0 5
40609: DIFF
40610: ST_TO_ADDR
40611: GO 40570
40613: POP
40614: POP
// end ;
40615: LD_VAR 0 4
40619: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40620: LD_INT 0
40622: PPUSH
40623: PPUSH
40624: PPUSH
// result := true ;
40625: LD_ADDR_VAR 0 3
40629: PUSH
40630: LD_INT 1
40632: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40633: LD_ADDR_VAR 0 5
40637: PUSH
40638: LD_VAR 0 2
40642: PPUSH
40643: CALL_OW 480
40647: ST_TO_ADDR
// if not tmp then
40648: LD_VAR 0 5
40652: NOT
40653: IFFALSE 40657
// exit ;
40655: GO 40706
// for i in tmp do
40657: LD_ADDR_VAR 0 4
40661: PUSH
40662: LD_VAR 0 5
40666: PUSH
40667: FOR_IN
40668: IFFALSE 40704
// if GetTech ( i , side ) <> state_researched then
40670: LD_VAR 0 4
40674: PPUSH
40675: LD_VAR 0 1
40679: PPUSH
40680: CALL_OW 321
40684: PUSH
40685: LD_INT 2
40687: NONEQUAL
40688: IFFALSE 40702
// begin result := false ;
40690: LD_ADDR_VAR 0 3
40694: PUSH
40695: LD_INT 0
40697: ST_TO_ADDR
// exit ;
40698: POP
40699: POP
40700: GO 40706
// end ;
40702: GO 40667
40704: POP
40705: POP
// end ;
40706: LD_VAR 0 3
40710: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40711: LD_INT 0
40713: PPUSH
40714: PPUSH
40715: PPUSH
40716: PPUSH
40717: PPUSH
40718: PPUSH
40719: PPUSH
40720: PPUSH
40721: PPUSH
40722: PPUSH
40723: PPUSH
40724: PPUSH
40725: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40726: LD_VAR 0 1
40730: NOT
40731: PUSH
40732: LD_VAR 0 1
40736: PPUSH
40737: CALL_OW 257
40741: PUSH
40742: LD_INT 9
40744: NONEQUAL
40745: OR
40746: IFFALSE 40750
// exit ;
40748: GO 41323
// side := GetSide ( unit ) ;
40750: LD_ADDR_VAR 0 9
40754: PUSH
40755: LD_VAR 0 1
40759: PPUSH
40760: CALL_OW 255
40764: ST_TO_ADDR
// tech_space := tech_spacanom ;
40765: LD_ADDR_VAR 0 12
40769: PUSH
40770: LD_INT 29
40772: ST_TO_ADDR
// tech_time := tech_taurad ;
40773: LD_ADDR_VAR 0 13
40777: PUSH
40778: LD_INT 28
40780: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40781: LD_ADDR_VAR 0 11
40785: PUSH
40786: LD_VAR 0 1
40790: PPUSH
40791: CALL_OW 310
40795: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40796: LD_VAR 0 11
40800: PPUSH
40801: CALL_OW 247
40805: PUSH
40806: LD_INT 2
40808: EQUAL
40809: IFFALSE 40813
// exit ;
40811: GO 41323
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40813: LD_ADDR_VAR 0 8
40817: PUSH
40818: LD_INT 81
40820: PUSH
40821: LD_VAR 0 9
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 3
40832: PUSH
40833: LD_INT 21
40835: PUSH
40836: LD_INT 3
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PPUSH
40851: CALL_OW 69
40855: ST_TO_ADDR
// if not tmp then
40856: LD_VAR 0 8
40860: NOT
40861: IFFALSE 40865
// exit ;
40863: GO 41323
// if in_unit then
40865: LD_VAR 0 11
40869: IFFALSE 40893
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40871: LD_ADDR_VAR 0 10
40875: PUSH
40876: LD_VAR 0 8
40880: PPUSH
40881: LD_VAR 0 11
40885: PPUSH
40886: CALL_OW 74
40890: ST_TO_ADDR
40891: GO 40913
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40893: LD_ADDR_VAR 0 10
40897: PUSH
40898: LD_VAR 0 8
40902: PPUSH
40903: LD_VAR 0 1
40907: PPUSH
40908: CALL_OW 74
40912: ST_TO_ADDR
// if not enemy then
40913: LD_VAR 0 10
40917: NOT
40918: IFFALSE 40922
// exit ;
40920: GO 41323
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40922: LD_VAR 0 11
40926: PUSH
40927: LD_VAR 0 11
40931: PPUSH
40932: LD_VAR 0 10
40936: PPUSH
40937: CALL_OW 296
40941: PUSH
40942: LD_INT 13
40944: GREATER
40945: AND
40946: PUSH
40947: LD_VAR 0 1
40951: PPUSH
40952: LD_VAR 0 10
40956: PPUSH
40957: CALL_OW 296
40961: PUSH
40962: LD_INT 12
40964: GREATER
40965: OR
40966: IFFALSE 40970
// exit ;
40968: GO 41323
// missile := [ 1 ] ;
40970: LD_ADDR_VAR 0 14
40974: PUSH
40975: LD_INT 1
40977: PUSH
40978: EMPTY
40979: LIST
40980: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40981: LD_VAR 0 9
40985: PPUSH
40986: LD_VAR 0 12
40990: PPUSH
40991: CALL_OW 325
40995: IFFALSE 41024
// missile := Replace ( missile , missile + 1 , 2 ) ;
40997: LD_ADDR_VAR 0 14
41001: PUSH
41002: LD_VAR 0 14
41006: PPUSH
41007: LD_VAR 0 14
41011: PUSH
41012: LD_INT 1
41014: PLUS
41015: PPUSH
41016: LD_INT 2
41018: PPUSH
41019: CALL_OW 1
41023: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41024: LD_VAR 0 9
41028: PPUSH
41029: LD_VAR 0 13
41033: PPUSH
41034: CALL_OW 325
41038: PUSH
41039: LD_VAR 0 10
41043: PPUSH
41044: CALL_OW 255
41048: PPUSH
41049: LD_VAR 0 13
41053: PPUSH
41054: CALL_OW 325
41058: NOT
41059: AND
41060: IFFALSE 41089
// missile := Replace ( missile , missile + 1 , 3 ) ;
41062: LD_ADDR_VAR 0 14
41066: PUSH
41067: LD_VAR 0 14
41071: PPUSH
41072: LD_VAR 0 14
41076: PUSH
41077: LD_INT 1
41079: PLUS
41080: PPUSH
41081: LD_INT 3
41083: PPUSH
41084: CALL_OW 1
41088: ST_TO_ADDR
// if missile < 2 then
41089: LD_VAR 0 14
41093: PUSH
41094: LD_INT 2
41096: LESS
41097: IFFALSE 41101
// exit ;
41099: GO 41323
// x := GetX ( enemy ) ;
41101: LD_ADDR_VAR 0 4
41105: PUSH
41106: LD_VAR 0 10
41110: PPUSH
41111: CALL_OW 250
41115: ST_TO_ADDR
// y := GetY ( enemy ) ;
41116: LD_ADDR_VAR 0 5
41120: PUSH
41121: LD_VAR 0 10
41125: PPUSH
41126: CALL_OW 251
41130: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41131: LD_ADDR_VAR 0 6
41135: PUSH
41136: LD_VAR 0 4
41140: PUSH
41141: LD_INT 1
41143: NEG
41144: PPUSH
41145: LD_INT 1
41147: PPUSH
41148: CALL_OW 12
41152: PLUS
41153: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41154: LD_ADDR_VAR 0 7
41158: PUSH
41159: LD_VAR 0 5
41163: PUSH
41164: LD_INT 1
41166: NEG
41167: PPUSH
41168: LD_INT 1
41170: PPUSH
41171: CALL_OW 12
41175: PLUS
41176: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41177: LD_VAR 0 6
41181: PPUSH
41182: LD_VAR 0 7
41186: PPUSH
41187: CALL_OW 488
41191: NOT
41192: IFFALSE 41214
// begin _x := x ;
41194: LD_ADDR_VAR 0 6
41198: PUSH
41199: LD_VAR 0 4
41203: ST_TO_ADDR
// _y := y ;
41204: LD_ADDR_VAR 0 7
41208: PUSH
41209: LD_VAR 0 5
41213: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41214: LD_ADDR_VAR 0 3
41218: PUSH
41219: LD_INT 1
41221: PPUSH
41222: LD_VAR 0 14
41226: PPUSH
41227: CALL_OW 12
41231: ST_TO_ADDR
// case i of 1 :
41232: LD_VAR 0 3
41236: PUSH
41237: LD_INT 1
41239: DOUBLE
41240: EQUAL
41241: IFTRUE 41245
41243: GO 41262
41245: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41246: LD_VAR 0 1
41250: PPUSH
41251: LD_VAR 0 10
41255: PPUSH
41256: CALL_OW 115
41260: GO 41323
41262: LD_INT 2
41264: DOUBLE
41265: EQUAL
41266: IFTRUE 41270
41268: GO 41292
41270: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41271: LD_VAR 0 1
41275: PPUSH
41276: LD_VAR 0 6
41280: PPUSH
41281: LD_VAR 0 7
41285: PPUSH
41286: CALL_OW 153
41290: GO 41323
41292: LD_INT 3
41294: DOUBLE
41295: EQUAL
41296: IFTRUE 41300
41298: GO 41322
41300: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41301: LD_VAR 0 1
41305: PPUSH
41306: LD_VAR 0 6
41310: PPUSH
41311: LD_VAR 0 7
41315: PPUSH
41316: CALL_OW 154
41320: GO 41323
41322: POP
// end ;
41323: LD_VAR 0 2
41327: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41328: LD_INT 0
41330: PPUSH
41331: PPUSH
41332: PPUSH
41333: PPUSH
41334: PPUSH
41335: PPUSH
// if not unit or not building then
41336: LD_VAR 0 1
41340: NOT
41341: PUSH
41342: LD_VAR 0 2
41346: NOT
41347: OR
41348: IFFALSE 41352
// exit ;
41350: GO 41510
// x := GetX ( building ) ;
41352: LD_ADDR_VAR 0 5
41356: PUSH
41357: LD_VAR 0 2
41361: PPUSH
41362: CALL_OW 250
41366: ST_TO_ADDR
// y := GetY ( building ) ;
41367: LD_ADDR_VAR 0 6
41371: PUSH
41372: LD_VAR 0 2
41376: PPUSH
41377: CALL_OW 251
41381: ST_TO_ADDR
// for i = 0 to 5 do
41382: LD_ADDR_VAR 0 4
41386: PUSH
41387: DOUBLE
41388: LD_INT 0
41390: DEC
41391: ST_TO_ADDR
41392: LD_INT 5
41394: PUSH
41395: FOR_TO
41396: IFFALSE 41508
// begin _x := ShiftX ( x , i , 3 ) ;
41398: LD_ADDR_VAR 0 7
41402: PUSH
41403: LD_VAR 0 5
41407: PPUSH
41408: LD_VAR 0 4
41412: PPUSH
41413: LD_INT 3
41415: PPUSH
41416: CALL_OW 272
41420: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41421: LD_ADDR_VAR 0 8
41425: PUSH
41426: LD_VAR 0 6
41430: PPUSH
41431: LD_VAR 0 4
41435: PPUSH
41436: LD_INT 3
41438: PPUSH
41439: CALL_OW 273
41443: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41444: LD_VAR 0 7
41448: PPUSH
41449: LD_VAR 0 8
41453: PPUSH
41454: CALL_OW 488
41458: NOT
41459: IFFALSE 41463
// continue ;
41461: GO 41395
// if HexInfo ( _x , _y ) = 0 then
41463: LD_VAR 0 7
41467: PPUSH
41468: LD_VAR 0 8
41472: PPUSH
41473: CALL_OW 428
41477: PUSH
41478: LD_INT 0
41480: EQUAL
41481: IFFALSE 41506
// begin ComMoveXY ( unit , _x , _y ) ;
41483: LD_VAR 0 1
41487: PPUSH
41488: LD_VAR 0 7
41492: PPUSH
41493: LD_VAR 0 8
41497: PPUSH
41498: CALL_OW 111
// exit ;
41502: POP
41503: POP
41504: GO 41510
// end ; end ;
41506: GO 41395
41508: POP
41509: POP
// end ;
41510: LD_VAR 0 3
41514: RET
// export function ScanBase ( side , base_area ) ; begin
41515: LD_INT 0
41517: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41518: LD_ADDR_VAR 0 3
41522: PUSH
41523: LD_VAR 0 2
41527: PPUSH
41528: LD_INT 81
41530: PUSH
41531: LD_VAR 0 1
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PPUSH
41540: CALL_OW 70
41544: ST_TO_ADDR
// end ;
41545: LD_VAR 0 3
41549: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41550: LD_INT 0
41552: PPUSH
41553: PPUSH
41554: PPUSH
41555: PPUSH
// result := false ;
41556: LD_ADDR_VAR 0 2
41560: PUSH
41561: LD_INT 0
41563: ST_TO_ADDR
// side := GetSide ( unit ) ;
41564: LD_ADDR_VAR 0 3
41568: PUSH
41569: LD_VAR 0 1
41573: PPUSH
41574: CALL_OW 255
41578: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41579: LD_ADDR_VAR 0 4
41583: PUSH
41584: LD_VAR 0 1
41588: PPUSH
41589: CALL_OW 248
41593: ST_TO_ADDR
// case nat of 1 :
41594: LD_VAR 0 4
41598: PUSH
41599: LD_INT 1
41601: DOUBLE
41602: EQUAL
41603: IFTRUE 41607
41605: GO 41618
41607: POP
// tech := tech_lassight ; 2 :
41608: LD_ADDR_VAR 0 5
41612: PUSH
41613: LD_INT 12
41615: ST_TO_ADDR
41616: GO 41657
41618: LD_INT 2
41620: DOUBLE
41621: EQUAL
41622: IFTRUE 41626
41624: GO 41637
41626: POP
// tech := tech_mortar ; 3 :
41627: LD_ADDR_VAR 0 5
41631: PUSH
41632: LD_INT 41
41634: ST_TO_ADDR
41635: GO 41657
41637: LD_INT 3
41639: DOUBLE
41640: EQUAL
41641: IFTRUE 41645
41643: GO 41656
41645: POP
// tech := tech_bazooka ; end ;
41646: LD_ADDR_VAR 0 5
41650: PUSH
41651: LD_INT 44
41653: ST_TO_ADDR
41654: GO 41657
41656: POP
// if Researched ( side , tech ) then
41657: LD_VAR 0 3
41661: PPUSH
41662: LD_VAR 0 5
41666: PPUSH
41667: CALL_OW 325
41671: IFFALSE 41698
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41673: LD_ADDR_VAR 0 2
41677: PUSH
41678: LD_INT 5
41680: PUSH
41681: LD_INT 8
41683: PUSH
41684: LD_INT 9
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: LIST
41691: PUSH
41692: LD_VAR 0 4
41696: ARRAY
41697: ST_TO_ADDR
// end ;
41698: LD_VAR 0 2
41702: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41703: LD_INT 0
41705: PPUSH
41706: PPUSH
41707: PPUSH
// if not mines then
41708: LD_VAR 0 2
41712: NOT
41713: IFFALSE 41717
// exit ;
41715: GO 41861
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41717: LD_ADDR_VAR 0 5
41721: PUSH
41722: LD_INT 81
41724: PUSH
41725: LD_VAR 0 1
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 3
41736: PUSH
41737: LD_INT 21
41739: PUSH
41740: LD_INT 3
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PPUSH
41755: CALL_OW 69
41759: ST_TO_ADDR
// for i in mines do
41760: LD_ADDR_VAR 0 4
41764: PUSH
41765: LD_VAR 0 2
41769: PUSH
41770: FOR_IN
41771: IFFALSE 41859
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41773: LD_VAR 0 4
41777: PUSH
41778: LD_INT 1
41780: ARRAY
41781: PPUSH
41782: LD_VAR 0 4
41786: PUSH
41787: LD_INT 2
41789: ARRAY
41790: PPUSH
41791: CALL_OW 458
41795: NOT
41796: IFFALSE 41800
// continue ;
41798: GO 41770
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41800: LD_VAR 0 4
41804: PUSH
41805: LD_INT 1
41807: ARRAY
41808: PPUSH
41809: LD_VAR 0 4
41813: PUSH
41814: LD_INT 2
41816: ARRAY
41817: PPUSH
41818: CALL_OW 428
41822: PUSH
41823: LD_VAR 0 5
41827: IN
41828: IFFALSE 41857
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41830: LD_VAR 0 4
41834: PUSH
41835: LD_INT 1
41837: ARRAY
41838: PPUSH
41839: LD_VAR 0 4
41843: PUSH
41844: LD_INT 2
41846: ARRAY
41847: PPUSH
41848: LD_VAR 0 1
41852: PPUSH
41853: CALL_OW 456
// end ;
41857: GO 41770
41859: POP
41860: POP
// end ;
41861: LD_VAR 0 3
41865: RET
// export function Count ( array ) ; begin
41866: LD_INT 0
41868: PPUSH
// result := array + 0 ;
41869: LD_ADDR_VAR 0 2
41873: PUSH
41874: LD_VAR 0 1
41878: PUSH
41879: LD_INT 0
41881: PLUS
41882: ST_TO_ADDR
// end ;
41883: LD_VAR 0 2
41887: RET
// export function IsEmpty ( building ) ; begin
41888: LD_INT 0
41890: PPUSH
// if not building then
41891: LD_VAR 0 1
41895: NOT
41896: IFFALSE 41900
// exit ;
41898: GO 41943
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41900: LD_ADDR_VAR 0 2
41904: PUSH
41905: LD_VAR 0 1
41909: PUSH
41910: LD_INT 22
41912: PUSH
41913: LD_VAR 0 1
41917: PPUSH
41918: CALL_OW 255
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 58
41929: PUSH
41930: EMPTY
41931: LIST
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PPUSH
41937: CALL_OW 69
41941: IN
41942: ST_TO_ADDR
// end ;
41943: LD_VAR 0 2
41947: RET
// export function IsNotFull ( building ) ; var places ; begin
41948: LD_INT 0
41950: PPUSH
41951: PPUSH
// if not building then
41952: LD_VAR 0 1
41956: NOT
41957: IFFALSE 41961
// exit ;
41959: GO 41989
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
41961: LD_ADDR_VAR 0 2
41965: PUSH
41966: LD_VAR 0 1
41970: PPUSH
41971: LD_INT 3
41973: PUSH
41974: LD_INT 62
41976: PUSH
41977: EMPTY
41978: LIST
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PPUSH
41984: CALL_OW 72
41988: ST_TO_ADDR
// end ;
41989: LD_VAR 0 2
41993: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41994: LD_INT 0
41996: PPUSH
41997: PPUSH
41998: PPUSH
41999: PPUSH
// tmp := [ ] ;
42000: LD_ADDR_VAR 0 3
42004: PUSH
42005: EMPTY
42006: ST_TO_ADDR
// list := [ ] ;
42007: LD_ADDR_VAR 0 5
42011: PUSH
42012: EMPTY
42013: ST_TO_ADDR
// for i = 16 to 25 do
42014: LD_ADDR_VAR 0 4
42018: PUSH
42019: DOUBLE
42020: LD_INT 16
42022: DEC
42023: ST_TO_ADDR
42024: LD_INT 25
42026: PUSH
42027: FOR_TO
42028: IFFALSE 42101
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42030: LD_ADDR_VAR 0 3
42034: PUSH
42035: LD_VAR 0 3
42039: PUSH
42040: LD_INT 22
42042: PUSH
42043: LD_VAR 0 1
42047: PPUSH
42048: CALL_OW 255
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 91
42059: PUSH
42060: LD_VAR 0 1
42064: PUSH
42065: LD_INT 6
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 30
42075: PUSH
42076: LD_VAR 0 4
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: LIST
42089: PUSH
42090: EMPTY
42091: LIST
42092: PPUSH
42093: CALL_OW 69
42097: ADD
42098: ST_TO_ADDR
42099: GO 42027
42101: POP
42102: POP
// for i = 1 to tmp do
42103: LD_ADDR_VAR 0 4
42107: PUSH
42108: DOUBLE
42109: LD_INT 1
42111: DEC
42112: ST_TO_ADDR
42113: LD_VAR 0 3
42117: PUSH
42118: FOR_TO
42119: IFFALSE 42207
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42121: LD_ADDR_VAR 0 5
42125: PUSH
42126: LD_VAR 0 5
42130: PUSH
42131: LD_VAR 0 3
42135: PUSH
42136: LD_VAR 0 4
42140: ARRAY
42141: PPUSH
42142: CALL_OW 266
42146: PUSH
42147: LD_VAR 0 3
42151: PUSH
42152: LD_VAR 0 4
42156: ARRAY
42157: PPUSH
42158: CALL_OW 250
42162: PUSH
42163: LD_VAR 0 3
42167: PUSH
42168: LD_VAR 0 4
42172: ARRAY
42173: PPUSH
42174: CALL_OW 251
42178: PUSH
42179: LD_VAR 0 3
42183: PUSH
42184: LD_VAR 0 4
42188: ARRAY
42189: PPUSH
42190: CALL_OW 254
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: PUSH
42201: EMPTY
42202: LIST
42203: ADD
42204: ST_TO_ADDR
42205: GO 42118
42207: POP
42208: POP
// result := list ;
42209: LD_ADDR_VAR 0 2
42213: PUSH
42214: LD_VAR 0 5
42218: ST_TO_ADDR
// end ;
42219: LD_VAR 0 2
42223: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42224: LD_INT 0
42226: PPUSH
42227: PPUSH
42228: PPUSH
42229: PPUSH
42230: PPUSH
42231: PPUSH
42232: PPUSH
// if not factory then
42233: LD_VAR 0 1
42237: NOT
42238: IFFALSE 42242
// exit ;
42240: GO 42835
// if control = control_apeman then
42242: LD_VAR 0 4
42246: PUSH
42247: LD_INT 5
42249: EQUAL
42250: IFFALSE 42359
// begin tmp := UnitsInside ( factory ) ;
42252: LD_ADDR_VAR 0 8
42256: PUSH
42257: LD_VAR 0 1
42261: PPUSH
42262: CALL_OW 313
42266: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42267: LD_VAR 0 8
42271: PPUSH
42272: LD_INT 25
42274: PUSH
42275: LD_INT 12
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PPUSH
42282: CALL_OW 72
42286: NOT
42287: IFFALSE 42297
// control := control_manual ;
42289: LD_ADDR_VAR 0 4
42293: PUSH
42294: LD_INT 1
42296: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42297: LD_ADDR_VAR 0 8
42301: PUSH
42302: LD_VAR 0 1
42306: PPUSH
42307: CALL 41994 0 1
42311: ST_TO_ADDR
// if tmp then
42312: LD_VAR 0 8
42316: IFFALSE 42359
// begin for i in tmp do
42318: LD_ADDR_VAR 0 7
42322: PUSH
42323: LD_VAR 0 8
42327: PUSH
42328: FOR_IN
42329: IFFALSE 42357
// if i [ 1 ] = b_ext_radio then
42331: LD_VAR 0 7
42335: PUSH
42336: LD_INT 1
42338: ARRAY
42339: PUSH
42340: LD_INT 22
42342: EQUAL
42343: IFFALSE 42355
// begin control := control_remote ;
42345: LD_ADDR_VAR 0 4
42349: PUSH
42350: LD_INT 2
42352: ST_TO_ADDR
// break ;
42353: GO 42357
// end ;
42355: GO 42328
42357: POP
42358: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42359: LD_VAR 0 1
42363: PPUSH
42364: LD_VAR 0 2
42368: PPUSH
42369: LD_VAR 0 3
42373: PPUSH
42374: LD_VAR 0 4
42378: PPUSH
42379: LD_VAR 0 5
42383: PPUSH
42384: CALL_OW 448
42388: IFFALSE 42423
// begin result := [ chassis , engine , control , weapon ] ;
42390: LD_ADDR_VAR 0 6
42394: PUSH
42395: LD_VAR 0 2
42399: PUSH
42400: LD_VAR 0 3
42404: PUSH
42405: LD_VAR 0 4
42409: PUSH
42410: LD_VAR 0 5
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: ST_TO_ADDR
// exit ;
42421: GO 42835
// end ; _chassis := AvailableChassisList ( factory ) ;
42423: LD_ADDR_VAR 0 9
42427: PUSH
42428: LD_VAR 0 1
42432: PPUSH
42433: CALL_OW 475
42437: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42438: LD_ADDR_VAR 0 11
42442: PUSH
42443: LD_VAR 0 1
42447: PPUSH
42448: CALL_OW 476
42452: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42453: LD_ADDR_VAR 0 12
42457: PUSH
42458: LD_VAR 0 1
42462: PPUSH
42463: CALL_OW 477
42467: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42468: LD_ADDR_VAR 0 10
42472: PUSH
42473: LD_VAR 0 1
42477: PPUSH
42478: CALL_OW 478
42482: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42483: LD_VAR 0 9
42487: NOT
42488: PUSH
42489: LD_VAR 0 11
42493: NOT
42494: OR
42495: PUSH
42496: LD_VAR 0 12
42500: NOT
42501: OR
42502: PUSH
42503: LD_VAR 0 10
42507: NOT
42508: OR
42509: IFFALSE 42544
// begin result := [ chassis , engine , control , weapon ] ;
42511: LD_ADDR_VAR 0 6
42515: PUSH
42516: LD_VAR 0 2
42520: PUSH
42521: LD_VAR 0 3
42525: PUSH
42526: LD_VAR 0 4
42530: PUSH
42531: LD_VAR 0 5
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: ST_TO_ADDR
// exit ;
42542: GO 42835
// end ; if not chassis in _chassis then
42544: LD_VAR 0 2
42548: PUSH
42549: LD_VAR 0 9
42553: IN
42554: NOT
42555: IFFALSE 42581
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42557: LD_ADDR_VAR 0 2
42561: PUSH
42562: LD_VAR 0 9
42566: PUSH
42567: LD_INT 1
42569: PPUSH
42570: LD_VAR 0 9
42574: PPUSH
42575: CALL_OW 12
42579: ARRAY
42580: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42581: LD_VAR 0 2
42585: PPUSH
42586: LD_VAR 0 3
42590: PPUSH
42591: CALL 42840 0 2
42595: NOT
42596: IFFALSE 42655
// repeat engine := _engine [ 1 ] ;
42598: LD_ADDR_VAR 0 3
42602: PUSH
42603: LD_VAR 0 11
42607: PUSH
42608: LD_INT 1
42610: ARRAY
42611: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42612: LD_ADDR_VAR 0 11
42616: PUSH
42617: LD_VAR 0 11
42621: PPUSH
42622: LD_INT 1
42624: PPUSH
42625: CALL_OW 3
42629: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42630: LD_VAR 0 2
42634: PPUSH
42635: LD_VAR 0 3
42639: PPUSH
42640: CALL 42840 0 2
42644: PUSH
42645: LD_VAR 0 11
42649: PUSH
42650: EMPTY
42651: EQUAL
42652: OR
42653: IFFALSE 42598
// if not control in _control then
42655: LD_VAR 0 4
42659: PUSH
42660: LD_VAR 0 12
42664: IN
42665: NOT
42666: IFFALSE 42692
// control := _control [ rand ( 1 , _control ) ] ;
42668: LD_ADDR_VAR 0 4
42672: PUSH
42673: LD_VAR 0 12
42677: PUSH
42678: LD_INT 1
42680: PPUSH
42681: LD_VAR 0 12
42685: PPUSH
42686: CALL_OW 12
42690: ARRAY
42691: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42692: LD_VAR 0 2
42696: PPUSH
42697: LD_VAR 0 5
42701: PPUSH
42702: CALL 43060 0 2
42706: NOT
42707: IFFALSE 42766
// repeat weapon := _weapon [ 1 ] ;
42709: LD_ADDR_VAR 0 5
42713: PUSH
42714: LD_VAR 0 10
42718: PUSH
42719: LD_INT 1
42721: ARRAY
42722: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42723: LD_ADDR_VAR 0 10
42727: PUSH
42728: LD_VAR 0 10
42732: PPUSH
42733: LD_INT 1
42735: PPUSH
42736: CALL_OW 3
42740: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42741: LD_VAR 0 2
42745: PPUSH
42746: LD_VAR 0 5
42750: PPUSH
42751: CALL 43060 0 2
42755: PUSH
42756: LD_VAR 0 10
42760: PUSH
42761: EMPTY
42762: EQUAL
42763: OR
42764: IFFALSE 42709
// result := [ ] ;
42766: LD_ADDR_VAR 0 6
42770: PUSH
42771: EMPTY
42772: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42773: LD_VAR 0 1
42777: PPUSH
42778: LD_VAR 0 2
42782: PPUSH
42783: LD_VAR 0 3
42787: PPUSH
42788: LD_VAR 0 4
42792: PPUSH
42793: LD_VAR 0 5
42797: PPUSH
42798: CALL_OW 448
42802: IFFALSE 42835
// result := [ chassis , engine , control , weapon ] ;
42804: LD_ADDR_VAR 0 6
42808: PUSH
42809: LD_VAR 0 2
42813: PUSH
42814: LD_VAR 0 3
42818: PUSH
42819: LD_VAR 0 4
42823: PUSH
42824: LD_VAR 0 5
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: ST_TO_ADDR
// end ;
42835: LD_VAR 0 6
42839: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42840: LD_INT 0
42842: PPUSH
// if not chassis or not engine then
42843: LD_VAR 0 1
42847: NOT
42848: PUSH
42849: LD_VAR 0 2
42853: NOT
42854: OR
42855: IFFALSE 42859
// exit ;
42857: GO 43055
// case engine of engine_solar :
42859: LD_VAR 0 2
42863: PUSH
42864: LD_INT 2
42866: DOUBLE
42867: EQUAL
42868: IFTRUE 42872
42870: GO 42910
42872: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42873: LD_ADDR_VAR 0 3
42877: PUSH
42878: LD_INT 11
42880: PUSH
42881: LD_INT 12
42883: PUSH
42884: LD_INT 13
42886: PUSH
42887: LD_INT 14
42889: PUSH
42890: LD_INT 1
42892: PUSH
42893: LD_INT 2
42895: PUSH
42896: LD_INT 3
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: ST_TO_ADDR
42908: GO 43039
42910: LD_INT 1
42912: DOUBLE
42913: EQUAL
42914: IFTRUE 42918
42916: GO 42980
42918: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42919: LD_ADDR_VAR 0 3
42923: PUSH
42924: LD_INT 11
42926: PUSH
42927: LD_INT 12
42929: PUSH
42930: LD_INT 13
42932: PUSH
42933: LD_INT 14
42935: PUSH
42936: LD_INT 1
42938: PUSH
42939: LD_INT 2
42941: PUSH
42942: LD_INT 3
42944: PUSH
42945: LD_INT 4
42947: PUSH
42948: LD_INT 5
42950: PUSH
42951: LD_INT 21
42953: PUSH
42954: LD_INT 23
42956: PUSH
42957: LD_INT 22
42959: PUSH
42960: LD_INT 24
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: ST_TO_ADDR
42978: GO 43039
42980: LD_INT 3
42982: DOUBLE
42983: EQUAL
42984: IFTRUE 42988
42986: GO 43038
42988: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42989: LD_ADDR_VAR 0 3
42993: PUSH
42994: LD_INT 13
42996: PUSH
42997: LD_INT 14
42999: PUSH
43000: LD_INT 2
43002: PUSH
43003: LD_INT 3
43005: PUSH
43006: LD_INT 4
43008: PUSH
43009: LD_INT 5
43011: PUSH
43012: LD_INT 21
43014: PUSH
43015: LD_INT 22
43017: PUSH
43018: LD_INT 23
43020: PUSH
43021: LD_INT 24
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: ST_TO_ADDR
43036: GO 43039
43038: POP
// result := ( chassis in result ) ;
43039: LD_ADDR_VAR 0 3
43043: PUSH
43044: LD_VAR 0 1
43048: PUSH
43049: LD_VAR 0 3
43053: IN
43054: ST_TO_ADDR
// end ;
43055: LD_VAR 0 3
43059: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43060: LD_INT 0
43062: PPUSH
// if not chassis or not weapon then
43063: LD_VAR 0 1
43067: NOT
43068: PUSH
43069: LD_VAR 0 2
43073: NOT
43074: OR
43075: IFFALSE 43079
// exit ;
43077: GO 44139
// case weapon of us_machine_gun :
43079: LD_VAR 0 2
43083: PUSH
43084: LD_INT 2
43086: DOUBLE
43087: EQUAL
43088: IFTRUE 43092
43090: GO 43122
43092: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43093: LD_ADDR_VAR 0 3
43097: PUSH
43098: LD_INT 1
43100: PUSH
43101: LD_INT 2
43103: PUSH
43104: LD_INT 3
43106: PUSH
43107: LD_INT 4
43109: PUSH
43110: LD_INT 5
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: ST_TO_ADDR
43120: GO 44123
43122: LD_INT 3
43124: DOUBLE
43125: EQUAL
43126: IFTRUE 43130
43128: GO 43160
43130: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43131: LD_ADDR_VAR 0 3
43135: PUSH
43136: LD_INT 1
43138: PUSH
43139: LD_INT 2
43141: PUSH
43142: LD_INT 3
43144: PUSH
43145: LD_INT 4
43147: PUSH
43148: LD_INT 5
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: ST_TO_ADDR
43158: GO 44123
43160: LD_INT 11
43162: DOUBLE
43163: EQUAL
43164: IFTRUE 43168
43166: GO 43198
43168: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43169: LD_ADDR_VAR 0 3
43173: PUSH
43174: LD_INT 1
43176: PUSH
43177: LD_INT 2
43179: PUSH
43180: LD_INT 3
43182: PUSH
43183: LD_INT 4
43185: PUSH
43186: LD_INT 5
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: ST_TO_ADDR
43196: GO 44123
43198: LD_INT 4
43200: DOUBLE
43201: EQUAL
43202: IFTRUE 43206
43204: GO 43232
43206: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43207: LD_ADDR_VAR 0 3
43211: PUSH
43212: LD_INT 2
43214: PUSH
43215: LD_INT 3
43217: PUSH
43218: LD_INT 4
43220: PUSH
43221: LD_INT 5
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: ST_TO_ADDR
43230: GO 44123
43232: LD_INT 5
43234: DOUBLE
43235: EQUAL
43236: IFTRUE 43240
43238: GO 43266
43240: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43241: LD_ADDR_VAR 0 3
43245: PUSH
43246: LD_INT 2
43248: PUSH
43249: LD_INT 3
43251: PUSH
43252: LD_INT 4
43254: PUSH
43255: LD_INT 5
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: ST_TO_ADDR
43264: GO 44123
43266: LD_INT 9
43268: DOUBLE
43269: EQUAL
43270: IFTRUE 43274
43272: GO 43300
43274: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43275: LD_ADDR_VAR 0 3
43279: PUSH
43280: LD_INT 2
43282: PUSH
43283: LD_INT 3
43285: PUSH
43286: LD_INT 4
43288: PUSH
43289: LD_INT 5
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: ST_TO_ADDR
43298: GO 44123
43300: LD_INT 7
43302: DOUBLE
43303: EQUAL
43304: IFTRUE 43308
43306: GO 43334
43308: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43309: LD_ADDR_VAR 0 3
43313: PUSH
43314: LD_INT 2
43316: PUSH
43317: LD_INT 3
43319: PUSH
43320: LD_INT 4
43322: PUSH
43323: LD_INT 5
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: ST_TO_ADDR
43332: GO 44123
43334: LD_INT 12
43336: DOUBLE
43337: EQUAL
43338: IFTRUE 43342
43340: GO 43368
43342: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43343: LD_ADDR_VAR 0 3
43347: PUSH
43348: LD_INT 2
43350: PUSH
43351: LD_INT 3
43353: PUSH
43354: LD_INT 4
43356: PUSH
43357: LD_INT 5
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: ST_TO_ADDR
43366: GO 44123
43368: LD_INT 13
43370: DOUBLE
43371: EQUAL
43372: IFTRUE 43376
43374: GO 43402
43376: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43377: LD_ADDR_VAR 0 3
43381: PUSH
43382: LD_INT 2
43384: PUSH
43385: LD_INT 3
43387: PUSH
43388: LD_INT 4
43390: PUSH
43391: LD_INT 5
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: ST_TO_ADDR
43400: GO 44123
43402: LD_INT 14
43404: DOUBLE
43405: EQUAL
43406: IFTRUE 43410
43408: GO 43428
43410: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43411: LD_ADDR_VAR 0 3
43415: PUSH
43416: LD_INT 4
43418: PUSH
43419: LD_INT 5
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: ST_TO_ADDR
43426: GO 44123
43428: LD_INT 6
43430: DOUBLE
43431: EQUAL
43432: IFTRUE 43436
43434: GO 43454
43436: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43437: LD_ADDR_VAR 0 3
43441: PUSH
43442: LD_INT 4
43444: PUSH
43445: LD_INT 5
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: ST_TO_ADDR
43452: GO 44123
43454: LD_INT 10
43456: DOUBLE
43457: EQUAL
43458: IFTRUE 43462
43460: GO 43480
43462: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43463: LD_ADDR_VAR 0 3
43467: PUSH
43468: LD_INT 4
43470: PUSH
43471: LD_INT 5
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: ST_TO_ADDR
43478: GO 44123
43480: LD_INT 22
43482: DOUBLE
43483: EQUAL
43484: IFTRUE 43488
43486: GO 43514
43488: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43489: LD_ADDR_VAR 0 3
43493: PUSH
43494: LD_INT 11
43496: PUSH
43497: LD_INT 12
43499: PUSH
43500: LD_INT 13
43502: PUSH
43503: LD_INT 14
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: ST_TO_ADDR
43512: GO 44123
43514: LD_INT 23
43516: DOUBLE
43517: EQUAL
43518: IFTRUE 43522
43520: GO 43548
43522: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43523: LD_ADDR_VAR 0 3
43527: PUSH
43528: LD_INT 11
43530: PUSH
43531: LD_INT 12
43533: PUSH
43534: LD_INT 13
43536: PUSH
43537: LD_INT 14
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: ST_TO_ADDR
43546: GO 44123
43548: LD_INT 24
43550: DOUBLE
43551: EQUAL
43552: IFTRUE 43556
43554: GO 43582
43556: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43557: LD_ADDR_VAR 0 3
43561: PUSH
43562: LD_INT 11
43564: PUSH
43565: LD_INT 12
43567: PUSH
43568: LD_INT 13
43570: PUSH
43571: LD_INT 14
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: ST_TO_ADDR
43580: GO 44123
43582: LD_INT 30
43584: DOUBLE
43585: EQUAL
43586: IFTRUE 43590
43588: GO 43616
43590: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43591: LD_ADDR_VAR 0 3
43595: PUSH
43596: LD_INT 11
43598: PUSH
43599: LD_INT 12
43601: PUSH
43602: LD_INT 13
43604: PUSH
43605: LD_INT 14
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: ST_TO_ADDR
43614: GO 44123
43616: LD_INT 25
43618: DOUBLE
43619: EQUAL
43620: IFTRUE 43624
43622: GO 43642
43624: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43625: LD_ADDR_VAR 0 3
43629: PUSH
43630: LD_INT 13
43632: PUSH
43633: LD_INT 14
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: ST_TO_ADDR
43640: GO 44123
43642: LD_INT 27
43644: DOUBLE
43645: EQUAL
43646: IFTRUE 43650
43648: GO 43668
43650: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43651: LD_ADDR_VAR 0 3
43655: PUSH
43656: LD_INT 13
43658: PUSH
43659: LD_INT 14
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: ST_TO_ADDR
43666: GO 44123
43668: LD_INT 92
43670: DOUBLE
43671: EQUAL
43672: IFTRUE 43676
43674: GO 43702
43676: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43677: LD_ADDR_VAR 0 3
43681: PUSH
43682: LD_INT 11
43684: PUSH
43685: LD_INT 12
43687: PUSH
43688: LD_INT 13
43690: PUSH
43691: LD_INT 14
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: ST_TO_ADDR
43700: GO 44123
43702: LD_INT 28
43704: DOUBLE
43705: EQUAL
43706: IFTRUE 43710
43708: GO 43728
43710: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43711: LD_ADDR_VAR 0 3
43715: PUSH
43716: LD_INT 13
43718: PUSH
43719: LD_INT 14
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: ST_TO_ADDR
43726: GO 44123
43728: LD_INT 29
43730: DOUBLE
43731: EQUAL
43732: IFTRUE 43736
43734: GO 43754
43736: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43737: LD_ADDR_VAR 0 3
43741: PUSH
43742: LD_INT 13
43744: PUSH
43745: LD_INT 14
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: ST_TO_ADDR
43752: GO 44123
43754: LD_INT 31
43756: DOUBLE
43757: EQUAL
43758: IFTRUE 43762
43760: GO 43780
43762: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43763: LD_ADDR_VAR 0 3
43767: PUSH
43768: LD_INT 13
43770: PUSH
43771: LD_INT 14
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: ST_TO_ADDR
43778: GO 44123
43780: LD_INT 26
43782: DOUBLE
43783: EQUAL
43784: IFTRUE 43788
43786: GO 43806
43788: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43789: LD_ADDR_VAR 0 3
43793: PUSH
43794: LD_INT 13
43796: PUSH
43797: LD_INT 14
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: ST_TO_ADDR
43804: GO 44123
43806: LD_INT 42
43808: DOUBLE
43809: EQUAL
43810: IFTRUE 43814
43812: GO 43840
43814: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43815: LD_ADDR_VAR 0 3
43819: PUSH
43820: LD_INT 21
43822: PUSH
43823: LD_INT 22
43825: PUSH
43826: LD_INT 23
43828: PUSH
43829: LD_INT 24
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: ST_TO_ADDR
43838: GO 44123
43840: LD_INT 43
43842: DOUBLE
43843: EQUAL
43844: IFTRUE 43848
43846: GO 43874
43848: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43849: LD_ADDR_VAR 0 3
43853: PUSH
43854: LD_INT 21
43856: PUSH
43857: LD_INT 22
43859: PUSH
43860: LD_INT 23
43862: PUSH
43863: LD_INT 24
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: ST_TO_ADDR
43872: GO 44123
43874: LD_INT 44
43876: DOUBLE
43877: EQUAL
43878: IFTRUE 43882
43880: GO 43908
43882: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43883: LD_ADDR_VAR 0 3
43887: PUSH
43888: LD_INT 21
43890: PUSH
43891: LD_INT 22
43893: PUSH
43894: LD_INT 23
43896: PUSH
43897: LD_INT 24
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: ST_TO_ADDR
43906: GO 44123
43908: LD_INT 45
43910: DOUBLE
43911: EQUAL
43912: IFTRUE 43916
43914: GO 43942
43916: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43917: LD_ADDR_VAR 0 3
43921: PUSH
43922: LD_INT 21
43924: PUSH
43925: LD_INT 22
43927: PUSH
43928: LD_INT 23
43930: PUSH
43931: LD_INT 24
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: ST_TO_ADDR
43940: GO 44123
43942: LD_INT 49
43944: DOUBLE
43945: EQUAL
43946: IFTRUE 43950
43948: GO 43976
43950: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43951: LD_ADDR_VAR 0 3
43955: PUSH
43956: LD_INT 21
43958: PUSH
43959: LD_INT 22
43961: PUSH
43962: LD_INT 23
43964: PUSH
43965: LD_INT 24
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: ST_TO_ADDR
43974: GO 44123
43976: LD_INT 51
43978: DOUBLE
43979: EQUAL
43980: IFTRUE 43984
43982: GO 44010
43984: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43985: LD_ADDR_VAR 0 3
43989: PUSH
43990: LD_INT 21
43992: PUSH
43993: LD_INT 22
43995: PUSH
43996: LD_INT 23
43998: PUSH
43999: LD_INT 24
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: ST_TO_ADDR
44008: GO 44123
44010: LD_INT 52
44012: DOUBLE
44013: EQUAL
44014: IFTRUE 44018
44016: GO 44044
44018: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44019: LD_ADDR_VAR 0 3
44023: PUSH
44024: LD_INT 21
44026: PUSH
44027: LD_INT 22
44029: PUSH
44030: LD_INT 23
44032: PUSH
44033: LD_INT 24
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: ST_TO_ADDR
44042: GO 44123
44044: LD_INT 53
44046: DOUBLE
44047: EQUAL
44048: IFTRUE 44052
44050: GO 44070
44052: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44053: LD_ADDR_VAR 0 3
44057: PUSH
44058: LD_INT 23
44060: PUSH
44061: LD_INT 24
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: ST_TO_ADDR
44068: GO 44123
44070: LD_INT 46
44072: DOUBLE
44073: EQUAL
44074: IFTRUE 44078
44076: GO 44096
44078: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44079: LD_ADDR_VAR 0 3
44083: PUSH
44084: LD_INT 23
44086: PUSH
44087: LD_INT 24
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: ST_TO_ADDR
44094: GO 44123
44096: LD_INT 47
44098: DOUBLE
44099: EQUAL
44100: IFTRUE 44104
44102: GO 44122
44104: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44105: LD_ADDR_VAR 0 3
44109: PUSH
44110: LD_INT 23
44112: PUSH
44113: LD_INT 24
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: ST_TO_ADDR
44120: GO 44123
44122: POP
// result := ( chassis in result ) ;
44123: LD_ADDR_VAR 0 3
44127: PUSH
44128: LD_VAR 0 1
44132: PUSH
44133: LD_VAR 0 3
44137: IN
44138: ST_TO_ADDR
// end ;
44139: LD_VAR 0 3
44143: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44144: LD_INT 0
44146: PPUSH
44147: PPUSH
44148: PPUSH
44149: PPUSH
44150: PPUSH
44151: PPUSH
44152: PPUSH
// result := array ;
44153: LD_ADDR_VAR 0 5
44157: PUSH
44158: LD_VAR 0 1
44162: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44163: LD_VAR 0 1
44167: NOT
44168: PUSH
44169: LD_VAR 0 2
44173: NOT
44174: OR
44175: PUSH
44176: LD_VAR 0 3
44180: NOT
44181: OR
44182: PUSH
44183: LD_VAR 0 2
44187: PUSH
44188: LD_VAR 0 1
44192: GREATER
44193: OR
44194: PUSH
44195: LD_VAR 0 3
44199: PUSH
44200: LD_VAR 0 1
44204: GREATER
44205: OR
44206: IFFALSE 44210
// exit ;
44208: GO 44506
// if direction then
44210: LD_VAR 0 4
44214: IFFALSE 44278
// begin d := 1 ;
44216: LD_ADDR_VAR 0 9
44220: PUSH
44221: LD_INT 1
44223: ST_TO_ADDR
// if i_from > i_to then
44224: LD_VAR 0 2
44228: PUSH
44229: LD_VAR 0 3
44233: GREATER
44234: IFFALSE 44260
// length := ( array - i_from ) + i_to else
44236: LD_ADDR_VAR 0 11
44240: PUSH
44241: LD_VAR 0 1
44245: PUSH
44246: LD_VAR 0 2
44250: MINUS
44251: PUSH
44252: LD_VAR 0 3
44256: PLUS
44257: ST_TO_ADDR
44258: GO 44276
// length := i_to - i_from ;
44260: LD_ADDR_VAR 0 11
44264: PUSH
44265: LD_VAR 0 3
44269: PUSH
44270: LD_VAR 0 2
44274: MINUS
44275: ST_TO_ADDR
// end else
44276: GO 44339
// begin d := - 1 ;
44278: LD_ADDR_VAR 0 9
44282: PUSH
44283: LD_INT 1
44285: NEG
44286: ST_TO_ADDR
// if i_from > i_to then
44287: LD_VAR 0 2
44291: PUSH
44292: LD_VAR 0 3
44296: GREATER
44297: IFFALSE 44317
// length := i_from - i_to else
44299: LD_ADDR_VAR 0 11
44303: PUSH
44304: LD_VAR 0 2
44308: PUSH
44309: LD_VAR 0 3
44313: MINUS
44314: ST_TO_ADDR
44315: GO 44339
// length := ( array - i_to ) + i_from ;
44317: LD_ADDR_VAR 0 11
44321: PUSH
44322: LD_VAR 0 1
44326: PUSH
44327: LD_VAR 0 3
44331: MINUS
44332: PUSH
44333: LD_VAR 0 2
44337: PLUS
44338: ST_TO_ADDR
// end ; if not length then
44339: LD_VAR 0 11
44343: NOT
44344: IFFALSE 44348
// exit ;
44346: GO 44506
// tmp := array ;
44348: LD_ADDR_VAR 0 10
44352: PUSH
44353: LD_VAR 0 1
44357: ST_TO_ADDR
// for i = 1 to length do
44358: LD_ADDR_VAR 0 6
44362: PUSH
44363: DOUBLE
44364: LD_INT 1
44366: DEC
44367: ST_TO_ADDR
44368: LD_VAR 0 11
44372: PUSH
44373: FOR_TO
44374: IFFALSE 44494
// begin for j = 1 to array do
44376: LD_ADDR_VAR 0 7
44380: PUSH
44381: DOUBLE
44382: LD_INT 1
44384: DEC
44385: ST_TO_ADDR
44386: LD_VAR 0 1
44390: PUSH
44391: FOR_TO
44392: IFFALSE 44480
// begin k := j + d ;
44394: LD_ADDR_VAR 0 8
44398: PUSH
44399: LD_VAR 0 7
44403: PUSH
44404: LD_VAR 0 9
44408: PLUS
44409: ST_TO_ADDR
// if k > array then
44410: LD_VAR 0 8
44414: PUSH
44415: LD_VAR 0 1
44419: GREATER
44420: IFFALSE 44430
// k := 1 ;
44422: LD_ADDR_VAR 0 8
44426: PUSH
44427: LD_INT 1
44429: ST_TO_ADDR
// if not k then
44430: LD_VAR 0 8
44434: NOT
44435: IFFALSE 44447
// k := array ;
44437: LD_ADDR_VAR 0 8
44441: PUSH
44442: LD_VAR 0 1
44446: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44447: LD_ADDR_VAR 0 10
44451: PUSH
44452: LD_VAR 0 10
44456: PPUSH
44457: LD_VAR 0 8
44461: PPUSH
44462: LD_VAR 0 1
44466: PUSH
44467: LD_VAR 0 7
44471: ARRAY
44472: PPUSH
44473: CALL_OW 1
44477: ST_TO_ADDR
// end ;
44478: GO 44391
44480: POP
44481: POP
// array := tmp ;
44482: LD_ADDR_VAR 0 1
44486: PUSH
44487: LD_VAR 0 10
44491: ST_TO_ADDR
// end ;
44492: GO 44373
44494: POP
44495: POP
// result := array ;
44496: LD_ADDR_VAR 0 5
44500: PUSH
44501: LD_VAR 0 1
44505: ST_TO_ADDR
// end ;
44506: LD_VAR 0 5
44510: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44511: LD_INT 0
44513: PPUSH
44514: PPUSH
// result := 0 ;
44515: LD_ADDR_VAR 0 3
44519: PUSH
44520: LD_INT 0
44522: ST_TO_ADDR
// if not array or not value in array then
44523: LD_VAR 0 1
44527: NOT
44528: PUSH
44529: LD_VAR 0 2
44533: PUSH
44534: LD_VAR 0 1
44538: IN
44539: NOT
44540: OR
44541: IFFALSE 44545
// exit ;
44543: GO 44599
// for i = 1 to array do
44545: LD_ADDR_VAR 0 4
44549: PUSH
44550: DOUBLE
44551: LD_INT 1
44553: DEC
44554: ST_TO_ADDR
44555: LD_VAR 0 1
44559: PUSH
44560: FOR_TO
44561: IFFALSE 44597
// if value = array [ i ] then
44563: LD_VAR 0 2
44567: PUSH
44568: LD_VAR 0 1
44572: PUSH
44573: LD_VAR 0 4
44577: ARRAY
44578: EQUAL
44579: IFFALSE 44595
// begin result := i ;
44581: LD_ADDR_VAR 0 3
44585: PUSH
44586: LD_VAR 0 4
44590: ST_TO_ADDR
// exit ;
44591: POP
44592: POP
44593: GO 44599
// end ;
44595: GO 44560
44597: POP
44598: POP
// end ;
44599: LD_VAR 0 3
44603: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44604: LD_INT 0
44606: PPUSH
// vc_chassis := chassis ;
44607: LD_ADDR_OWVAR 37
44611: PUSH
44612: LD_VAR 0 1
44616: ST_TO_ADDR
// vc_engine := engine ;
44617: LD_ADDR_OWVAR 39
44621: PUSH
44622: LD_VAR 0 2
44626: ST_TO_ADDR
// vc_control := control ;
44627: LD_ADDR_OWVAR 38
44631: PUSH
44632: LD_VAR 0 3
44636: ST_TO_ADDR
// vc_weapon := weapon ;
44637: LD_ADDR_OWVAR 40
44641: PUSH
44642: LD_VAR 0 4
44646: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44647: LD_ADDR_OWVAR 41
44651: PUSH
44652: LD_VAR 0 5
44656: ST_TO_ADDR
// end ;
44657: LD_VAR 0 6
44661: RET
// export function WantPlant ( unit ) ; var task ; begin
44662: LD_INT 0
44664: PPUSH
44665: PPUSH
// result := false ;
44666: LD_ADDR_VAR 0 2
44670: PUSH
44671: LD_INT 0
44673: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44674: LD_ADDR_VAR 0 3
44678: PUSH
44679: LD_VAR 0 1
44683: PPUSH
44684: CALL_OW 437
44688: ST_TO_ADDR
// if task then
44689: LD_VAR 0 3
44693: IFFALSE 44721
// if task [ 1 ] [ 1 ] = p then
44695: LD_VAR 0 3
44699: PUSH
44700: LD_INT 1
44702: ARRAY
44703: PUSH
44704: LD_INT 1
44706: ARRAY
44707: PUSH
44708: LD_STRING p
44710: EQUAL
44711: IFFALSE 44721
// result := true ;
44713: LD_ADDR_VAR 0 2
44717: PUSH
44718: LD_INT 1
44720: ST_TO_ADDR
// end ;
44721: LD_VAR 0 2
44725: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44726: LD_INT 0
44728: PPUSH
44729: PPUSH
44730: PPUSH
44731: PPUSH
// if pos < 1 then
44732: LD_VAR 0 2
44736: PUSH
44737: LD_INT 1
44739: LESS
44740: IFFALSE 44744
// exit ;
44742: GO 45047
// if pos = 1 then
44744: LD_VAR 0 2
44748: PUSH
44749: LD_INT 1
44751: EQUAL
44752: IFFALSE 44785
// result := Replace ( arr , pos [ 1 ] , value ) else
44754: LD_ADDR_VAR 0 4
44758: PUSH
44759: LD_VAR 0 1
44763: PPUSH
44764: LD_VAR 0 2
44768: PUSH
44769: LD_INT 1
44771: ARRAY
44772: PPUSH
44773: LD_VAR 0 3
44777: PPUSH
44778: CALL_OW 1
44782: ST_TO_ADDR
44783: GO 45047
// begin tmp := arr ;
44785: LD_ADDR_VAR 0 6
44789: PUSH
44790: LD_VAR 0 1
44794: ST_TO_ADDR
// s_arr := [ tmp ] ;
44795: LD_ADDR_VAR 0 7
44799: PUSH
44800: LD_VAR 0 6
44804: PUSH
44805: EMPTY
44806: LIST
44807: ST_TO_ADDR
// for i = 1 to pos - 1 do
44808: LD_ADDR_VAR 0 5
44812: PUSH
44813: DOUBLE
44814: LD_INT 1
44816: DEC
44817: ST_TO_ADDR
44818: LD_VAR 0 2
44822: PUSH
44823: LD_INT 1
44825: MINUS
44826: PUSH
44827: FOR_TO
44828: IFFALSE 44873
// begin tmp := tmp [ pos [ i ] ] ;
44830: LD_ADDR_VAR 0 6
44834: PUSH
44835: LD_VAR 0 6
44839: PUSH
44840: LD_VAR 0 2
44844: PUSH
44845: LD_VAR 0 5
44849: ARRAY
44850: ARRAY
44851: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44852: LD_ADDR_VAR 0 7
44856: PUSH
44857: LD_VAR 0 7
44861: PUSH
44862: LD_VAR 0 6
44866: PUSH
44867: EMPTY
44868: LIST
44869: ADD
44870: ST_TO_ADDR
// end ;
44871: GO 44827
44873: POP
44874: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44875: LD_ADDR_VAR 0 6
44879: PUSH
44880: LD_VAR 0 6
44884: PPUSH
44885: LD_VAR 0 2
44889: PUSH
44890: LD_VAR 0 2
44894: ARRAY
44895: PPUSH
44896: LD_VAR 0 3
44900: PPUSH
44901: CALL_OW 1
44905: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44906: LD_ADDR_VAR 0 7
44910: PUSH
44911: LD_VAR 0 7
44915: PPUSH
44916: LD_VAR 0 7
44920: PPUSH
44921: LD_VAR 0 6
44925: PPUSH
44926: CALL_OW 1
44930: ST_TO_ADDR
// for i = s_arr downto 2 do
44931: LD_ADDR_VAR 0 5
44935: PUSH
44936: DOUBLE
44937: LD_VAR 0 7
44941: INC
44942: ST_TO_ADDR
44943: LD_INT 2
44945: PUSH
44946: FOR_DOWNTO
44947: IFFALSE 45031
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44949: LD_ADDR_VAR 0 6
44953: PUSH
44954: LD_VAR 0 7
44958: PUSH
44959: LD_VAR 0 5
44963: PUSH
44964: LD_INT 1
44966: MINUS
44967: ARRAY
44968: PPUSH
44969: LD_VAR 0 2
44973: PUSH
44974: LD_VAR 0 5
44978: PUSH
44979: LD_INT 1
44981: MINUS
44982: ARRAY
44983: PPUSH
44984: LD_VAR 0 7
44988: PUSH
44989: LD_VAR 0 5
44993: ARRAY
44994: PPUSH
44995: CALL_OW 1
44999: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45000: LD_ADDR_VAR 0 7
45004: PUSH
45005: LD_VAR 0 7
45009: PPUSH
45010: LD_VAR 0 5
45014: PUSH
45015: LD_INT 1
45017: MINUS
45018: PPUSH
45019: LD_VAR 0 6
45023: PPUSH
45024: CALL_OW 1
45028: ST_TO_ADDR
// end ;
45029: GO 44946
45031: POP
45032: POP
// result := s_arr [ 1 ] ;
45033: LD_ADDR_VAR 0 4
45037: PUSH
45038: LD_VAR 0 7
45042: PUSH
45043: LD_INT 1
45045: ARRAY
45046: ST_TO_ADDR
// end ; end ;
45047: LD_VAR 0 4
45051: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45052: LD_INT 0
45054: PPUSH
45055: PPUSH
// if not list then
45056: LD_VAR 0 1
45060: NOT
45061: IFFALSE 45065
// exit ;
45063: GO 45156
// i := list [ pos1 ] ;
45065: LD_ADDR_VAR 0 5
45069: PUSH
45070: LD_VAR 0 1
45074: PUSH
45075: LD_VAR 0 2
45079: ARRAY
45080: ST_TO_ADDR
// if not i then
45081: LD_VAR 0 5
45085: NOT
45086: IFFALSE 45090
// exit ;
45088: GO 45156
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45090: LD_ADDR_VAR 0 1
45094: PUSH
45095: LD_VAR 0 1
45099: PPUSH
45100: LD_VAR 0 2
45104: PPUSH
45105: LD_VAR 0 1
45109: PUSH
45110: LD_VAR 0 3
45114: ARRAY
45115: PPUSH
45116: CALL_OW 1
45120: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45121: LD_ADDR_VAR 0 1
45125: PUSH
45126: LD_VAR 0 1
45130: PPUSH
45131: LD_VAR 0 3
45135: PPUSH
45136: LD_VAR 0 5
45140: PPUSH
45141: CALL_OW 1
45145: ST_TO_ADDR
// result := list ;
45146: LD_ADDR_VAR 0 4
45150: PUSH
45151: LD_VAR 0 1
45155: ST_TO_ADDR
// end ;
45156: LD_VAR 0 4
45160: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45161: LD_INT 0
45163: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45164: LD_ADDR_VAR 0 5
45168: PUSH
45169: LD_VAR 0 1
45173: PPUSH
45174: CALL_OW 250
45178: PPUSH
45179: LD_VAR 0 1
45183: PPUSH
45184: CALL_OW 251
45188: PPUSH
45189: LD_VAR 0 2
45193: PPUSH
45194: LD_VAR 0 3
45198: PPUSH
45199: LD_VAR 0 4
45203: PPUSH
45204: CALL 45582 0 5
45208: ST_TO_ADDR
// end ;
45209: LD_VAR 0 5
45213: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
45214: LD_INT 0
45216: PPUSH
45217: PPUSH
45218: PPUSH
45219: PPUSH
// if not list or not unit then
45220: LD_VAR 0 2
45224: NOT
45225: PUSH
45226: LD_VAR 0 1
45230: NOT
45231: OR
45232: IFFALSE 45236
// exit ;
45234: GO 45577
// result := [ ] ;
45236: LD_ADDR_VAR 0 5
45240: PUSH
45241: EMPTY
45242: ST_TO_ADDR
// for i in list do
45243: LD_ADDR_VAR 0 6
45247: PUSH
45248: LD_VAR 0 2
45252: PUSH
45253: FOR_IN
45254: IFFALSE 45472
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
45256: LD_ADDR_VAR 0 8
45260: PUSH
45261: LD_VAR 0 1
45265: PPUSH
45266: LD_VAR 0 6
45270: PUSH
45271: LD_INT 1
45273: ARRAY
45274: PPUSH
45275: LD_VAR 0 6
45279: PUSH
45280: LD_INT 2
45282: ARRAY
45283: PPUSH
45284: CALL_OW 297
45288: ST_TO_ADDR
// if not Count ( result ) then
45289: LD_VAR 0 5
45293: PPUSH
45294: CALL 41866 0 1
45298: NOT
45299: IFFALSE 45332
// begin result := Join ( result , [ i , tmp ] ) ;
45301: LD_ADDR_VAR 0 5
45305: PUSH
45306: LD_VAR 0 5
45310: PPUSH
45311: LD_VAR 0 6
45315: PUSH
45316: LD_VAR 0 8
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PPUSH
45325: CALL 77455 0 2
45329: ST_TO_ADDR
// continue ;
45330: GO 45253
// end ; if result [ result ] [ 2 ] <= tmp then
45332: LD_VAR 0 5
45336: PUSH
45337: LD_VAR 0 5
45341: ARRAY
45342: PUSH
45343: LD_INT 2
45345: ARRAY
45346: PUSH
45347: LD_VAR 0 8
45351: LESSEQUAL
45352: IFFALSE 45385
// result := Join ( result , [ i , tmp ] ) else
45354: LD_ADDR_VAR 0 5
45358: PUSH
45359: LD_VAR 0 5
45363: PPUSH
45364: LD_VAR 0 6
45368: PUSH
45369: LD_VAR 0 8
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PPUSH
45378: CALL 77455 0 2
45382: ST_TO_ADDR
45383: GO 45470
// begin for j := 1 to Count ( result ) do
45385: LD_ADDR_VAR 0 7
45389: PUSH
45390: DOUBLE
45391: LD_INT 1
45393: DEC
45394: ST_TO_ADDR
45395: LD_VAR 0 5
45399: PPUSH
45400: CALL 41866 0 1
45404: PUSH
45405: FOR_TO
45406: IFFALSE 45468
// begin if tmp < result [ j ] [ 2 ] then
45408: LD_VAR 0 8
45412: PUSH
45413: LD_VAR 0 5
45417: PUSH
45418: LD_VAR 0 7
45422: ARRAY
45423: PUSH
45424: LD_INT 2
45426: ARRAY
45427: LESS
45428: IFFALSE 45466
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45430: LD_ADDR_VAR 0 5
45434: PUSH
45435: LD_VAR 0 5
45439: PPUSH
45440: LD_VAR 0 7
45444: PPUSH
45445: LD_VAR 0 6
45449: PUSH
45450: LD_VAR 0 8
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PPUSH
45459: CALL_OW 2
45463: ST_TO_ADDR
// break ;
45464: GO 45468
// end ; end ;
45466: GO 45405
45468: POP
45469: POP
// end ; end ;
45470: GO 45253
45472: POP
45473: POP
// if result and not asc then
45474: LD_VAR 0 5
45478: PUSH
45479: LD_VAR 0 3
45483: NOT
45484: AND
45485: IFFALSE 45502
// result := ReverseArray ( result ) ;
45487: LD_ADDR_VAR 0 5
45491: PUSH
45492: LD_VAR 0 5
45496: PPUSH
45497: CALL 72742 0 1
45501: ST_TO_ADDR
// tmp := [ ] ;
45502: LD_ADDR_VAR 0 8
45506: PUSH
45507: EMPTY
45508: ST_TO_ADDR
// if mode then
45509: LD_VAR 0 4
45513: IFFALSE 45577
// begin for i := 1 to result do
45515: LD_ADDR_VAR 0 6
45519: PUSH
45520: DOUBLE
45521: LD_INT 1
45523: DEC
45524: ST_TO_ADDR
45525: LD_VAR 0 5
45529: PUSH
45530: FOR_TO
45531: IFFALSE 45565
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
45533: LD_ADDR_VAR 0 8
45537: PUSH
45538: LD_VAR 0 8
45542: PPUSH
45543: LD_VAR 0 5
45547: PUSH
45548: LD_VAR 0 6
45552: ARRAY
45553: PUSH
45554: LD_INT 1
45556: ARRAY
45557: PPUSH
45558: CALL 77455 0 2
45562: ST_TO_ADDR
45563: GO 45530
45565: POP
45566: POP
// result := tmp ;
45567: LD_ADDR_VAR 0 5
45571: PUSH
45572: LD_VAR 0 8
45576: ST_TO_ADDR
// end ; end ;
45577: LD_VAR 0 5
45581: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45582: LD_INT 0
45584: PPUSH
45585: PPUSH
45586: PPUSH
45587: PPUSH
// if not list then
45588: LD_VAR 0 3
45592: NOT
45593: IFFALSE 45597
// exit ;
45595: GO 45985
// result := [ ] ;
45597: LD_ADDR_VAR 0 6
45601: PUSH
45602: EMPTY
45603: ST_TO_ADDR
// for i in list do
45604: LD_ADDR_VAR 0 7
45608: PUSH
45609: LD_VAR 0 3
45613: PUSH
45614: FOR_IN
45615: IFFALSE 45817
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45617: LD_ADDR_VAR 0 9
45621: PUSH
45622: LD_VAR 0 7
45626: PPUSH
45627: LD_VAR 0 1
45631: PPUSH
45632: LD_VAR 0 2
45636: PPUSH
45637: CALL_OW 297
45641: ST_TO_ADDR
// if not result then
45642: LD_VAR 0 6
45646: NOT
45647: IFFALSE 45673
// result := [ [ i , tmp ] ] else
45649: LD_ADDR_VAR 0 6
45653: PUSH
45654: LD_VAR 0 7
45658: PUSH
45659: LD_VAR 0 9
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: EMPTY
45669: LIST
45670: ST_TO_ADDR
45671: GO 45815
// begin if result [ result ] [ 2 ] < tmp then
45673: LD_VAR 0 6
45677: PUSH
45678: LD_VAR 0 6
45682: ARRAY
45683: PUSH
45684: LD_INT 2
45686: ARRAY
45687: PUSH
45688: LD_VAR 0 9
45692: LESS
45693: IFFALSE 45735
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45695: LD_ADDR_VAR 0 6
45699: PUSH
45700: LD_VAR 0 6
45704: PPUSH
45705: LD_VAR 0 6
45709: PUSH
45710: LD_INT 1
45712: PLUS
45713: PPUSH
45714: LD_VAR 0 7
45718: PUSH
45719: LD_VAR 0 9
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PPUSH
45728: CALL_OW 2
45732: ST_TO_ADDR
45733: GO 45815
// for j = 1 to result do
45735: LD_ADDR_VAR 0 8
45739: PUSH
45740: DOUBLE
45741: LD_INT 1
45743: DEC
45744: ST_TO_ADDR
45745: LD_VAR 0 6
45749: PUSH
45750: FOR_TO
45751: IFFALSE 45813
// begin if tmp < result [ j ] [ 2 ] then
45753: LD_VAR 0 9
45757: PUSH
45758: LD_VAR 0 6
45762: PUSH
45763: LD_VAR 0 8
45767: ARRAY
45768: PUSH
45769: LD_INT 2
45771: ARRAY
45772: LESS
45773: IFFALSE 45811
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45775: LD_ADDR_VAR 0 6
45779: PUSH
45780: LD_VAR 0 6
45784: PPUSH
45785: LD_VAR 0 8
45789: PPUSH
45790: LD_VAR 0 7
45794: PUSH
45795: LD_VAR 0 9
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PPUSH
45804: CALL_OW 2
45808: ST_TO_ADDR
// break ;
45809: GO 45813
// end ; end ;
45811: GO 45750
45813: POP
45814: POP
// end ; end ;
45815: GO 45614
45817: POP
45818: POP
// if result and not asc then
45819: LD_VAR 0 6
45823: PUSH
45824: LD_VAR 0 4
45828: NOT
45829: AND
45830: IFFALSE 45905
// begin tmp := result ;
45832: LD_ADDR_VAR 0 9
45836: PUSH
45837: LD_VAR 0 6
45841: ST_TO_ADDR
// for i = tmp downto 1 do
45842: LD_ADDR_VAR 0 7
45846: PUSH
45847: DOUBLE
45848: LD_VAR 0 9
45852: INC
45853: ST_TO_ADDR
45854: LD_INT 1
45856: PUSH
45857: FOR_DOWNTO
45858: IFFALSE 45903
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45860: LD_ADDR_VAR 0 6
45864: PUSH
45865: LD_VAR 0 6
45869: PPUSH
45870: LD_VAR 0 9
45874: PUSH
45875: LD_VAR 0 7
45879: MINUS
45880: PUSH
45881: LD_INT 1
45883: PLUS
45884: PPUSH
45885: LD_VAR 0 9
45889: PUSH
45890: LD_VAR 0 7
45894: ARRAY
45895: PPUSH
45896: CALL_OW 1
45900: ST_TO_ADDR
45901: GO 45857
45903: POP
45904: POP
// end ; tmp := [ ] ;
45905: LD_ADDR_VAR 0 9
45909: PUSH
45910: EMPTY
45911: ST_TO_ADDR
// if mode then
45912: LD_VAR 0 5
45916: IFFALSE 45985
// begin for i = 1 to result do
45918: LD_ADDR_VAR 0 7
45922: PUSH
45923: DOUBLE
45924: LD_INT 1
45926: DEC
45927: ST_TO_ADDR
45928: LD_VAR 0 6
45932: PUSH
45933: FOR_TO
45934: IFFALSE 45973
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45936: LD_ADDR_VAR 0 9
45940: PUSH
45941: LD_VAR 0 9
45945: PPUSH
45946: LD_VAR 0 7
45950: PPUSH
45951: LD_VAR 0 6
45955: PUSH
45956: LD_VAR 0 7
45960: ARRAY
45961: PUSH
45962: LD_INT 1
45964: ARRAY
45965: PPUSH
45966: CALL_OW 1
45970: ST_TO_ADDR
45971: GO 45933
45973: POP
45974: POP
// result := tmp ;
45975: LD_ADDR_VAR 0 6
45979: PUSH
45980: LD_VAR 0 9
45984: ST_TO_ADDR
// end ; end ;
45985: LD_VAR 0 6
45989: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45990: LD_INT 0
45992: PPUSH
45993: PPUSH
45994: PPUSH
45995: PPUSH
45996: PPUSH
45997: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45998: LD_ADDR_VAR 0 5
46002: PUSH
46003: LD_INT 0
46005: PUSH
46006: LD_INT 0
46008: PUSH
46009: LD_INT 0
46011: PUSH
46012: EMPTY
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: ST_TO_ADDR
// if not x or not y then
46020: LD_VAR 0 2
46024: NOT
46025: PUSH
46026: LD_VAR 0 3
46030: NOT
46031: OR
46032: IFFALSE 46036
// exit ;
46034: GO 47686
// if not range then
46036: LD_VAR 0 4
46040: NOT
46041: IFFALSE 46051
// range := 10 ;
46043: LD_ADDR_VAR 0 4
46047: PUSH
46048: LD_INT 10
46050: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46051: LD_ADDR_VAR 0 8
46055: PUSH
46056: LD_INT 81
46058: PUSH
46059: LD_VAR 0 1
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 92
46070: PUSH
46071: LD_VAR 0 2
46075: PUSH
46076: LD_VAR 0 3
46080: PUSH
46081: LD_VAR 0 4
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 3
46094: PUSH
46095: LD_INT 21
46097: PUSH
46098: LD_INT 3
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: LIST
46113: PPUSH
46114: CALL_OW 69
46118: ST_TO_ADDR
// if not tmp then
46119: LD_VAR 0 8
46123: NOT
46124: IFFALSE 46128
// exit ;
46126: GO 47686
// for i in tmp do
46128: LD_ADDR_VAR 0 6
46132: PUSH
46133: LD_VAR 0 8
46137: PUSH
46138: FOR_IN
46139: IFFALSE 47661
// begin points := [ 0 , 0 , 0 ] ;
46141: LD_ADDR_VAR 0 9
46145: PUSH
46146: LD_INT 0
46148: PUSH
46149: LD_INT 0
46151: PUSH
46152: LD_INT 0
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: LIST
46159: ST_TO_ADDR
// bpoints := 1 ;
46160: LD_ADDR_VAR 0 10
46164: PUSH
46165: LD_INT 1
46167: ST_TO_ADDR
// case GetType ( i ) of unit_human :
46168: LD_VAR 0 6
46172: PPUSH
46173: CALL_OW 247
46177: PUSH
46178: LD_INT 1
46180: DOUBLE
46181: EQUAL
46182: IFTRUE 46186
46184: GO 46764
46186: POP
// begin if GetClass ( i ) = 1 then
46187: LD_VAR 0 6
46191: PPUSH
46192: CALL_OW 257
46196: PUSH
46197: LD_INT 1
46199: EQUAL
46200: IFFALSE 46221
// points := [ 10 , 5 , 3 ] ;
46202: LD_ADDR_VAR 0 9
46206: PUSH
46207: LD_INT 10
46209: PUSH
46210: LD_INT 5
46212: PUSH
46213: LD_INT 3
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: LIST
46220: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
46221: LD_VAR 0 6
46225: PPUSH
46226: CALL_OW 257
46230: PUSH
46231: LD_INT 2
46233: PUSH
46234: LD_INT 3
46236: PUSH
46237: LD_INT 4
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: LIST
46244: IN
46245: IFFALSE 46266
// points := [ 3 , 2 , 1 ] ;
46247: LD_ADDR_VAR 0 9
46251: PUSH
46252: LD_INT 3
46254: PUSH
46255: LD_INT 2
46257: PUSH
46258: LD_INT 1
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: LIST
46265: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46266: LD_VAR 0 6
46270: PPUSH
46271: CALL_OW 257
46275: PUSH
46276: LD_INT 5
46278: EQUAL
46279: IFFALSE 46300
// points := [ 130 , 5 , 2 ] ;
46281: LD_ADDR_VAR 0 9
46285: PUSH
46286: LD_INT 130
46288: PUSH
46289: LD_INT 5
46291: PUSH
46292: LD_INT 2
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: LIST
46299: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46300: LD_VAR 0 6
46304: PPUSH
46305: CALL_OW 257
46309: PUSH
46310: LD_INT 8
46312: EQUAL
46313: IFFALSE 46334
// points := [ 35 , 35 , 30 ] ;
46315: LD_ADDR_VAR 0 9
46319: PUSH
46320: LD_INT 35
46322: PUSH
46323: LD_INT 35
46325: PUSH
46326: LD_INT 30
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: LIST
46333: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46334: LD_VAR 0 6
46338: PPUSH
46339: CALL_OW 257
46343: PUSH
46344: LD_INT 9
46346: EQUAL
46347: IFFALSE 46368
// points := [ 20 , 55 , 40 ] ;
46349: LD_ADDR_VAR 0 9
46353: PUSH
46354: LD_INT 20
46356: PUSH
46357: LD_INT 55
46359: PUSH
46360: LD_INT 40
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: LIST
46367: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46368: LD_VAR 0 6
46372: PPUSH
46373: CALL_OW 257
46377: PUSH
46378: LD_INT 12
46380: PUSH
46381: LD_INT 16
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: IN
46388: IFFALSE 46409
// points := [ 5 , 3 , 2 ] ;
46390: LD_ADDR_VAR 0 9
46394: PUSH
46395: LD_INT 5
46397: PUSH
46398: LD_INT 3
46400: PUSH
46401: LD_INT 2
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: LIST
46408: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46409: LD_VAR 0 6
46413: PPUSH
46414: CALL_OW 257
46418: PUSH
46419: LD_INT 17
46421: EQUAL
46422: IFFALSE 46443
// points := [ 100 , 50 , 75 ] ;
46424: LD_ADDR_VAR 0 9
46428: PUSH
46429: LD_INT 100
46431: PUSH
46432: LD_INT 50
46434: PUSH
46435: LD_INT 75
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: LIST
46442: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46443: LD_VAR 0 6
46447: PPUSH
46448: CALL_OW 257
46452: PUSH
46453: LD_INT 15
46455: EQUAL
46456: IFFALSE 46477
// points := [ 10 , 5 , 3 ] ;
46458: LD_ADDR_VAR 0 9
46462: PUSH
46463: LD_INT 10
46465: PUSH
46466: LD_INT 5
46468: PUSH
46469: LD_INT 3
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: LIST
46476: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46477: LD_VAR 0 6
46481: PPUSH
46482: CALL_OW 257
46486: PUSH
46487: LD_INT 14
46489: EQUAL
46490: IFFALSE 46511
// points := [ 10 , 0 , 0 ] ;
46492: LD_ADDR_VAR 0 9
46496: PUSH
46497: LD_INT 10
46499: PUSH
46500: LD_INT 0
46502: PUSH
46503: LD_INT 0
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: LIST
46510: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46511: LD_VAR 0 6
46515: PPUSH
46516: CALL_OW 257
46520: PUSH
46521: LD_INT 11
46523: EQUAL
46524: IFFALSE 46545
// points := [ 30 , 10 , 5 ] ;
46526: LD_ADDR_VAR 0 9
46530: PUSH
46531: LD_INT 30
46533: PUSH
46534: LD_INT 10
46536: PUSH
46537: LD_INT 5
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: LIST
46544: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46545: LD_VAR 0 1
46549: PPUSH
46550: LD_INT 5
46552: PPUSH
46553: CALL_OW 321
46557: PUSH
46558: LD_INT 2
46560: EQUAL
46561: IFFALSE 46578
// bpoints := bpoints * 1.8 ;
46563: LD_ADDR_VAR 0 10
46567: PUSH
46568: LD_VAR 0 10
46572: PUSH
46573: LD_REAL  1.80000000000000E+0000
46576: MUL
46577: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46578: LD_VAR 0 6
46582: PPUSH
46583: CALL_OW 257
46587: PUSH
46588: LD_INT 1
46590: PUSH
46591: LD_INT 2
46593: PUSH
46594: LD_INT 3
46596: PUSH
46597: LD_INT 4
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: IN
46606: PUSH
46607: LD_VAR 0 1
46611: PPUSH
46612: LD_INT 51
46614: PPUSH
46615: CALL_OW 321
46619: PUSH
46620: LD_INT 2
46622: EQUAL
46623: AND
46624: IFFALSE 46641
// bpoints := bpoints * 1.2 ;
46626: LD_ADDR_VAR 0 10
46630: PUSH
46631: LD_VAR 0 10
46635: PUSH
46636: LD_REAL  1.20000000000000E+0000
46639: MUL
46640: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46641: LD_VAR 0 6
46645: PPUSH
46646: CALL_OW 257
46650: PUSH
46651: LD_INT 5
46653: PUSH
46654: LD_INT 7
46656: PUSH
46657: LD_INT 9
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: LIST
46664: IN
46665: PUSH
46666: LD_VAR 0 1
46670: PPUSH
46671: LD_INT 52
46673: PPUSH
46674: CALL_OW 321
46678: PUSH
46679: LD_INT 2
46681: EQUAL
46682: AND
46683: IFFALSE 46700
// bpoints := bpoints * 1.5 ;
46685: LD_ADDR_VAR 0 10
46689: PUSH
46690: LD_VAR 0 10
46694: PUSH
46695: LD_REAL  1.50000000000000E+0000
46698: MUL
46699: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46700: LD_VAR 0 1
46704: PPUSH
46705: LD_INT 66
46707: PPUSH
46708: CALL_OW 321
46712: PUSH
46713: LD_INT 2
46715: EQUAL
46716: IFFALSE 46733
// bpoints := bpoints * 1.1 ;
46718: LD_ADDR_VAR 0 10
46722: PUSH
46723: LD_VAR 0 10
46727: PUSH
46728: LD_REAL  1.10000000000000E+0000
46731: MUL
46732: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46733: LD_ADDR_VAR 0 10
46737: PUSH
46738: LD_VAR 0 10
46742: PUSH
46743: LD_VAR 0 6
46747: PPUSH
46748: LD_INT 1
46750: PPUSH
46751: CALL_OW 259
46755: PUSH
46756: LD_REAL  1.15000000000000E+0000
46759: MUL
46760: MUL
46761: ST_TO_ADDR
// end ; unit_vehicle :
46762: GO 47590
46764: LD_INT 2
46766: DOUBLE
46767: EQUAL
46768: IFTRUE 46772
46770: GO 47578
46772: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46773: LD_VAR 0 6
46777: PPUSH
46778: CALL_OW 264
46782: PUSH
46783: LD_INT 2
46785: PUSH
46786: LD_INT 42
46788: PUSH
46789: LD_INT 24
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: LIST
46796: IN
46797: IFFALSE 46818
// points := [ 25 , 5 , 3 ] ;
46799: LD_ADDR_VAR 0 9
46803: PUSH
46804: LD_INT 25
46806: PUSH
46807: LD_INT 5
46809: PUSH
46810: LD_INT 3
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: LIST
46817: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46818: LD_VAR 0 6
46822: PPUSH
46823: CALL_OW 264
46827: PUSH
46828: LD_INT 4
46830: PUSH
46831: LD_INT 43
46833: PUSH
46834: LD_INT 25
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: LIST
46841: IN
46842: IFFALSE 46863
// points := [ 40 , 15 , 5 ] ;
46844: LD_ADDR_VAR 0 9
46848: PUSH
46849: LD_INT 40
46851: PUSH
46852: LD_INT 15
46854: PUSH
46855: LD_INT 5
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: LIST
46862: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46863: LD_VAR 0 6
46867: PPUSH
46868: CALL_OW 264
46872: PUSH
46873: LD_INT 3
46875: PUSH
46876: LD_INT 23
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: IN
46883: IFFALSE 46904
// points := [ 7 , 25 , 8 ] ;
46885: LD_ADDR_VAR 0 9
46889: PUSH
46890: LD_INT 7
46892: PUSH
46893: LD_INT 25
46895: PUSH
46896: LD_INT 8
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: LIST
46903: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46904: LD_VAR 0 6
46908: PPUSH
46909: CALL_OW 264
46913: PUSH
46914: LD_INT 5
46916: PUSH
46917: LD_INT 27
46919: PUSH
46920: LD_INT 44
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: LIST
46927: IN
46928: IFFALSE 46949
// points := [ 14 , 50 , 16 ] ;
46930: LD_ADDR_VAR 0 9
46934: PUSH
46935: LD_INT 14
46937: PUSH
46938: LD_INT 50
46940: PUSH
46941: LD_INT 16
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: LIST
46948: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46949: LD_VAR 0 6
46953: PPUSH
46954: CALL_OW 264
46958: PUSH
46959: LD_INT 6
46961: PUSH
46962: LD_INT 46
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: IN
46969: IFFALSE 46990
// points := [ 32 , 120 , 70 ] ;
46971: LD_ADDR_VAR 0 9
46975: PUSH
46976: LD_INT 32
46978: PUSH
46979: LD_INT 120
46981: PUSH
46982: LD_INT 70
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: LIST
46989: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46990: LD_VAR 0 6
46994: PPUSH
46995: CALL_OW 264
46999: PUSH
47000: LD_INT 7
47002: PUSH
47003: LD_INT 28
47005: PUSH
47006: LD_INT 45
47008: PUSH
47009: LD_INT 92
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: IN
47018: IFFALSE 47039
// points := [ 35 , 20 , 45 ] ;
47020: LD_ADDR_VAR 0 9
47024: PUSH
47025: LD_INT 35
47027: PUSH
47028: LD_INT 20
47030: PUSH
47031: LD_INT 45
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: LIST
47038: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
47039: LD_VAR 0 6
47043: PPUSH
47044: CALL_OW 264
47048: PUSH
47049: LD_INT 47
47051: PUSH
47052: EMPTY
47053: LIST
47054: IN
47055: IFFALSE 47076
// points := [ 67 , 45 , 75 ] ;
47057: LD_ADDR_VAR 0 9
47061: PUSH
47062: LD_INT 67
47064: PUSH
47065: LD_INT 45
47067: PUSH
47068: LD_INT 75
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: LIST
47075: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
47076: LD_VAR 0 6
47080: PPUSH
47081: CALL_OW 264
47085: PUSH
47086: LD_INT 26
47088: PUSH
47089: EMPTY
47090: LIST
47091: IN
47092: IFFALSE 47113
// points := [ 120 , 30 , 80 ] ;
47094: LD_ADDR_VAR 0 9
47098: PUSH
47099: LD_INT 120
47101: PUSH
47102: LD_INT 30
47104: PUSH
47105: LD_INT 80
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: LIST
47112: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
47113: LD_VAR 0 6
47117: PPUSH
47118: CALL_OW 264
47122: PUSH
47123: LD_INT 22
47125: PUSH
47126: EMPTY
47127: LIST
47128: IN
47129: IFFALSE 47150
// points := [ 40 , 1 , 1 ] ;
47131: LD_ADDR_VAR 0 9
47135: PUSH
47136: LD_INT 40
47138: PUSH
47139: LD_INT 1
47141: PUSH
47142: LD_INT 1
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: LIST
47149: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
47150: LD_VAR 0 6
47154: PPUSH
47155: CALL_OW 264
47159: PUSH
47160: LD_INT 29
47162: PUSH
47163: EMPTY
47164: LIST
47165: IN
47166: IFFALSE 47187
// points := [ 70 , 200 , 400 ] ;
47168: LD_ADDR_VAR 0 9
47172: PUSH
47173: LD_INT 70
47175: PUSH
47176: LD_INT 200
47178: PUSH
47179: LD_INT 400
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: LIST
47186: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
47187: LD_VAR 0 6
47191: PPUSH
47192: CALL_OW 264
47196: PUSH
47197: LD_INT 14
47199: PUSH
47200: LD_INT 53
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: IN
47207: IFFALSE 47228
// points := [ 40 , 10 , 20 ] ;
47209: LD_ADDR_VAR 0 9
47213: PUSH
47214: LD_INT 40
47216: PUSH
47217: LD_INT 10
47219: PUSH
47220: LD_INT 20
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: LIST
47227: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
47228: LD_VAR 0 6
47232: PPUSH
47233: CALL_OW 264
47237: PUSH
47238: LD_INT 9
47240: PUSH
47241: EMPTY
47242: LIST
47243: IN
47244: IFFALSE 47265
// points := [ 5 , 70 , 20 ] ;
47246: LD_ADDR_VAR 0 9
47250: PUSH
47251: LD_INT 5
47253: PUSH
47254: LD_INT 70
47256: PUSH
47257: LD_INT 20
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: LIST
47264: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47265: LD_VAR 0 6
47269: PPUSH
47270: CALL_OW 264
47274: PUSH
47275: LD_INT 10
47277: PUSH
47278: EMPTY
47279: LIST
47280: IN
47281: IFFALSE 47302
// points := [ 35 , 110 , 70 ] ;
47283: LD_ADDR_VAR 0 9
47287: PUSH
47288: LD_INT 35
47290: PUSH
47291: LD_INT 110
47293: PUSH
47294: LD_INT 70
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: LIST
47301: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47302: LD_VAR 0 6
47306: PPUSH
47307: CALL_OW 265
47311: PUSH
47312: LD_INT 25
47314: EQUAL
47315: IFFALSE 47336
// points := [ 80 , 65 , 100 ] ;
47317: LD_ADDR_VAR 0 9
47321: PUSH
47322: LD_INT 80
47324: PUSH
47325: LD_INT 65
47327: PUSH
47328: LD_INT 100
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: LIST
47335: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47336: LD_VAR 0 6
47340: PPUSH
47341: CALL_OW 263
47345: PUSH
47346: LD_INT 1
47348: EQUAL
47349: IFFALSE 47384
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47351: LD_ADDR_VAR 0 10
47355: PUSH
47356: LD_VAR 0 10
47360: PUSH
47361: LD_VAR 0 6
47365: PPUSH
47366: CALL_OW 311
47370: PPUSH
47371: LD_INT 3
47373: PPUSH
47374: CALL_OW 259
47378: PUSH
47379: LD_INT 4
47381: MUL
47382: MUL
47383: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47384: LD_VAR 0 6
47388: PPUSH
47389: CALL_OW 263
47393: PUSH
47394: LD_INT 2
47396: EQUAL
47397: IFFALSE 47448
// begin j := IsControledBy ( i ) ;
47399: LD_ADDR_VAR 0 7
47403: PUSH
47404: LD_VAR 0 6
47408: PPUSH
47409: CALL_OW 312
47413: ST_TO_ADDR
// if j then
47414: LD_VAR 0 7
47418: IFFALSE 47448
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47420: LD_ADDR_VAR 0 10
47424: PUSH
47425: LD_VAR 0 10
47429: PUSH
47430: LD_VAR 0 7
47434: PPUSH
47435: LD_INT 3
47437: PPUSH
47438: CALL_OW 259
47442: PUSH
47443: LD_INT 3
47445: MUL
47446: MUL
47447: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47448: LD_VAR 0 6
47452: PPUSH
47453: CALL_OW 264
47457: PUSH
47458: LD_INT 5
47460: PUSH
47461: LD_INT 6
47463: PUSH
47464: LD_INT 46
47466: PUSH
47467: LD_INT 44
47469: PUSH
47470: LD_INT 47
47472: PUSH
47473: LD_INT 45
47475: PUSH
47476: LD_INT 28
47478: PUSH
47479: LD_INT 7
47481: PUSH
47482: LD_INT 27
47484: PUSH
47485: LD_INT 29
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: IN
47500: PUSH
47501: LD_VAR 0 1
47505: PPUSH
47506: LD_INT 52
47508: PPUSH
47509: CALL_OW 321
47513: PUSH
47514: LD_INT 2
47516: EQUAL
47517: AND
47518: IFFALSE 47535
// bpoints := bpoints * 1.2 ;
47520: LD_ADDR_VAR 0 10
47524: PUSH
47525: LD_VAR 0 10
47529: PUSH
47530: LD_REAL  1.20000000000000E+0000
47533: MUL
47534: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47535: LD_VAR 0 6
47539: PPUSH
47540: CALL_OW 264
47544: PUSH
47545: LD_INT 6
47547: PUSH
47548: LD_INT 46
47550: PUSH
47551: LD_INT 47
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: LIST
47558: IN
47559: IFFALSE 47576
// bpoints := bpoints * 1.2 ;
47561: LD_ADDR_VAR 0 10
47565: PUSH
47566: LD_VAR 0 10
47570: PUSH
47571: LD_REAL  1.20000000000000E+0000
47574: MUL
47575: ST_TO_ADDR
// end ; unit_building :
47576: GO 47590
47578: LD_INT 3
47580: DOUBLE
47581: EQUAL
47582: IFTRUE 47586
47584: GO 47589
47586: POP
// ; end ;
47587: GO 47590
47589: POP
// for j = 1 to 3 do
47590: LD_ADDR_VAR 0 7
47594: PUSH
47595: DOUBLE
47596: LD_INT 1
47598: DEC
47599: ST_TO_ADDR
47600: LD_INT 3
47602: PUSH
47603: FOR_TO
47604: IFFALSE 47657
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47606: LD_ADDR_VAR 0 5
47610: PUSH
47611: LD_VAR 0 5
47615: PPUSH
47616: LD_VAR 0 7
47620: PPUSH
47621: LD_VAR 0 5
47625: PUSH
47626: LD_VAR 0 7
47630: ARRAY
47631: PUSH
47632: LD_VAR 0 9
47636: PUSH
47637: LD_VAR 0 7
47641: ARRAY
47642: PUSH
47643: LD_VAR 0 10
47647: MUL
47648: PLUS
47649: PPUSH
47650: CALL_OW 1
47654: ST_TO_ADDR
47655: GO 47603
47657: POP
47658: POP
// end ;
47659: GO 46138
47661: POP
47662: POP
// result := Replace ( result , 4 , tmp ) ;
47663: LD_ADDR_VAR 0 5
47667: PUSH
47668: LD_VAR 0 5
47672: PPUSH
47673: LD_INT 4
47675: PPUSH
47676: LD_VAR 0 8
47680: PPUSH
47681: CALL_OW 1
47685: ST_TO_ADDR
// end ;
47686: LD_VAR 0 5
47690: RET
// export function DangerAtRange ( unit , range ) ; begin
47691: LD_INT 0
47693: PPUSH
// if not unit then
47694: LD_VAR 0 1
47698: NOT
47699: IFFALSE 47703
// exit ;
47701: GO 47748
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47703: LD_ADDR_VAR 0 3
47707: PUSH
47708: LD_VAR 0 1
47712: PPUSH
47713: CALL_OW 255
47717: PPUSH
47718: LD_VAR 0 1
47722: PPUSH
47723: CALL_OW 250
47727: PPUSH
47728: LD_VAR 0 1
47732: PPUSH
47733: CALL_OW 251
47737: PPUSH
47738: LD_VAR 0 2
47742: PPUSH
47743: CALL 45990 0 4
47747: ST_TO_ADDR
// end ;
47748: LD_VAR 0 3
47752: RET
// export function DangerInArea ( side , area ) ; begin
47753: LD_INT 0
47755: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47756: LD_ADDR_VAR 0 3
47760: PUSH
47761: LD_VAR 0 2
47765: PPUSH
47766: LD_INT 81
47768: PUSH
47769: LD_VAR 0 1
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PPUSH
47778: CALL_OW 70
47782: ST_TO_ADDR
// end ;
47783: LD_VAR 0 3
47787: RET
// export function IsExtension ( b ) ; begin
47788: LD_INT 0
47790: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47791: LD_ADDR_VAR 0 2
47795: PUSH
47796: LD_VAR 0 1
47800: PUSH
47801: LD_INT 23
47803: PUSH
47804: LD_INT 20
47806: PUSH
47807: LD_INT 22
47809: PUSH
47810: LD_INT 17
47812: PUSH
47813: LD_INT 24
47815: PUSH
47816: LD_INT 21
47818: PUSH
47819: LD_INT 19
47821: PUSH
47822: LD_INT 16
47824: PUSH
47825: LD_INT 25
47827: PUSH
47828: LD_INT 18
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: IN
47843: ST_TO_ADDR
// end ;
47844: LD_VAR 0 2
47848: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47849: LD_INT 0
47851: PPUSH
47852: PPUSH
47853: PPUSH
// result := [ ] ;
47854: LD_ADDR_VAR 0 4
47858: PUSH
47859: EMPTY
47860: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47861: LD_ADDR_VAR 0 5
47865: PUSH
47866: LD_VAR 0 2
47870: PPUSH
47871: LD_INT 21
47873: PUSH
47874: LD_INT 3
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PPUSH
47881: CALL_OW 70
47885: ST_TO_ADDR
// if not tmp then
47886: LD_VAR 0 5
47890: NOT
47891: IFFALSE 47895
// exit ;
47893: GO 47959
// if checkLink then
47895: LD_VAR 0 3
47899: IFFALSE 47949
// begin for i in tmp do
47901: LD_ADDR_VAR 0 6
47905: PUSH
47906: LD_VAR 0 5
47910: PUSH
47911: FOR_IN
47912: IFFALSE 47947
// if GetBase ( i ) <> base then
47914: LD_VAR 0 6
47918: PPUSH
47919: CALL_OW 274
47923: PUSH
47924: LD_VAR 0 1
47928: NONEQUAL
47929: IFFALSE 47945
// ComLinkToBase ( base , i ) ;
47931: LD_VAR 0 1
47935: PPUSH
47936: LD_VAR 0 6
47940: PPUSH
47941: CALL_OW 169
47945: GO 47911
47947: POP
47948: POP
// end ; result := tmp ;
47949: LD_ADDR_VAR 0 4
47953: PUSH
47954: LD_VAR 0 5
47958: ST_TO_ADDR
// end ;
47959: LD_VAR 0 4
47963: RET
// export function ComComplete ( units , b ) ; var i ; begin
47964: LD_INT 0
47966: PPUSH
47967: PPUSH
// if not units then
47968: LD_VAR 0 1
47972: NOT
47973: IFFALSE 47977
// exit ;
47975: GO 48067
// for i in units do
47977: LD_ADDR_VAR 0 4
47981: PUSH
47982: LD_VAR 0 1
47986: PUSH
47987: FOR_IN
47988: IFFALSE 48065
// if BuildingStatus ( b ) = bs_build then
47990: LD_VAR 0 2
47994: PPUSH
47995: CALL_OW 461
47999: PUSH
48000: LD_INT 1
48002: EQUAL
48003: IFFALSE 48063
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
48005: LD_VAR 0 4
48009: PPUSH
48010: LD_STRING h
48012: PUSH
48013: LD_VAR 0 2
48017: PPUSH
48018: CALL_OW 250
48022: PUSH
48023: LD_VAR 0 2
48027: PPUSH
48028: CALL_OW 251
48032: PUSH
48033: LD_VAR 0 2
48037: PUSH
48038: LD_INT 0
48040: PUSH
48041: LD_INT 0
48043: PUSH
48044: LD_INT 0
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: PUSH
48056: EMPTY
48057: LIST
48058: PPUSH
48059: CALL_OW 446
48063: GO 47987
48065: POP
48066: POP
// end ;
48067: LD_VAR 0 3
48071: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
48072: LD_INT 0
48074: PPUSH
48075: PPUSH
48076: PPUSH
48077: PPUSH
48078: PPUSH
48079: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
48080: LD_VAR 0 1
48084: NOT
48085: PUSH
48086: LD_VAR 0 1
48090: PPUSH
48091: CALL_OW 263
48095: PUSH
48096: LD_INT 2
48098: NONEQUAL
48099: OR
48100: IFFALSE 48104
// exit ;
48102: GO 48420
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
48104: LD_ADDR_VAR 0 6
48108: PUSH
48109: LD_INT 22
48111: PUSH
48112: LD_VAR 0 1
48116: PPUSH
48117: CALL_OW 255
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 2
48128: PUSH
48129: LD_INT 30
48131: PUSH
48132: LD_INT 36
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 34
48141: PUSH
48142: LD_INT 31
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: LIST
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PPUSH
48158: CALL_OW 69
48162: ST_TO_ADDR
// if not tmp then
48163: LD_VAR 0 6
48167: NOT
48168: IFFALSE 48172
// exit ;
48170: GO 48420
// result := [ ] ;
48172: LD_ADDR_VAR 0 2
48176: PUSH
48177: EMPTY
48178: ST_TO_ADDR
// for i in tmp do
48179: LD_ADDR_VAR 0 3
48183: PUSH
48184: LD_VAR 0 6
48188: PUSH
48189: FOR_IN
48190: IFFALSE 48261
// begin t := UnitsInside ( i ) ;
48192: LD_ADDR_VAR 0 4
48196: PUSH
48197: LD_VAR 0 3
48201: PPUSH
48202: CALL_OW 313
48206: ST_TO_ADDR
// if t then
48207: LD_VAR 0 4
48211: IFFALSE 48259
// for j in t do
48213: LD_ADDR_VAR 0 7
48217: PUSH
48218: LD_VAR 0 4
48222: PUSH
48223: FOR_IN
48224: IFFALSE 48257
// result := Replace ( result , result + 1 , j ) ;
48226: LD_ADDR_VAR 0 2
48230: PUSH
48231: LD_VAR 0 2
48235: PPUSH
48236: LD_VAR 0 2
48240: PUSH
48241: LD_INT 1
48243: PLUS
48244: PPUSH
48245: LD_VAR 0 7
48249: PPUSH
48250: CALL_OW 1
48254: ST_TO_ADDR
48255: GO 48223
48257: POP
48258: POP
// end ;
48259: GO 48189
48261: POP
48262: POP
// if not result then
48263: LD_VAR 0 2
48267: NOT
48268: IFFALSE 48272
// exit ;
48270: GO 48420
// mech := result [ 1 ] ;
48272: LD_ADDR_VAR 0 5
48276: PUSH
48277: LD_VAR 0 2
48281: PUSH
48282: LD_INT 1
48284: ARRAY
48285: ST_TO_ADDR
// if result > 1 then
48286: LD_VAR 0 2
48290: PUSH
48291: LD_INT 1
48293: GREATER
48294: IFFALSE 48406
// begin for i = 2 to result do
48296: LD_ADDR_VAR 0 3
48300: PUSH
48301: DOUBLE
48302: LD_INT 2
48304: DEC
48305: ST_TO_ADDR
48306: LD_VAR 0 2
48310: PUSH
48311: FOR_TO
48312: IFFALSE 48404
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48314: LD_ADDR_VAR 0 4
48318: PUSH
48319: LD_VAR 0 2
48323: PUSH
48324: LD_VAR 0 3
48328: ARRAY
48329: PPUSH
48330: LD_INT 3
48332: PPUSH
48333: CALL_OW 259
48337: PUSH
48338: LD_VAR 0 2
48342: PUSH
48343: LD_VAR 0 3
48347: ARRAY
48348: PPUSH
48349: CALL_OW 432
48353: MINUS
48354: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48355: LD_VAR 0 4
48359: PUSH
48360: LD_VAR 0 5
48364: PPUSH
48365: LD_INT 3
48367: PPUSH
48368: CALL_OW 259
48372: PUSH
48373: LD_VAR 0 5
48377: PPUSH
48378: CALL_OW 432
48382: MINUS
48383: GREATEREQUAL
48384: IFFALSE 48402
// mech := result [ i ] ;
48386: LD_ADDR_VAR 0 5
48390: PUSH
48391: LD_VAR 0 2
48395: PUSH
48396: LD_VAR 0 3
48400: ARRAY
48401: ST_TO_ADDR
// end ;
48402: GO 48311
48404: POP
48405: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48406: LD_VAR 0 1
48410: PPUSH
48411: LD_VAR 0 5
48415: PPUSH
48416: CALL_OW 135
// end ;
48420: LD_VAR 0 2
48424: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48425: LD_INT 0
48427: PPUSH
48428: PPUSH
48429: PPUSH
48430: PPUSH
48431: PPUSH
48432: PPUSH
48433: PPUSH
48434: PPUSH
48435: PPUSH
48436: PPUSH
48437: PPUSH
48438: PPUSH
48439: PPUSH
// result := [ ] ;
48440: LD_ADDR_VAR 0 7
48444: PUSH
48445: EMPTY
48446: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48447: LD_VAR 0 1
48451: PPUSH
48452: CALL_OW 266
48456: PUSH
48457: LD_INT 0
48459: PUSH
48460: LD_INT 1
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: IN
48467: NOT
48468: IFFALSE 48472
// exit ;
48470: GO 50106
// if name then
48472: LD_VAR 0 3
48476: IFFALSE 48492
// SetBName ( base_dep , name ) ;
48478: LD_VAR 0 1
48482: PPUSH
48483: LD_VAR 0 3
48487: PPUSH
48488: CALL_OW 500
// base := GetBase ( base_dep ) ;
48492: LD_ADDR_VAR 0 15
48496: PUSH
48497: LD_VAR 0 1
48501: PPUSH
48502: CALL_OW 274
48506: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48507: LD_ADDR_VAR 0 16
48511: PUSH
48512: LD_VAR 0 1
48516: PPUSH
48517: CALL_OW 255
48521: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48522: LD_ADDR_VAR 0 17
48526: PUSH
48527: LD_VAR 0 1
48531: PPUSH
48532: CALL_OW 248
48536: ST_TO_ADDR
// if sources then
48537: LD_VAR 0 5
48541: IFFALSE 48588
// for i = 1 to 3 do
48543: LD_ADDR_VAR 0 8
48547: PUSH
48548: DOUBLE
48549: LD_INT 1
48551: DEC
48552: ST_TO_ADDR
48553: LD_INT 3
48555: PUSH
48556: FOR_TO
48557: IFFALSE 48586
// AddResourceType ( base , i , sources [ i ] ) ;
48559: LD_VAR 0 15
48563: PPUSH
48564: LD_VAR 0 8
48568: PPUSH
48569: LD_VAR 0 5
48573: PUSH
48574: LD_VAR 0 8
48578: ARRAY
48579: PPUSH
48580: CALL_OW 276
48584: GO 48556
48586: POP
48587: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48588: LD_ADDR_VAR 0 18
48592: PUSH
48593: LD_VAR 0 15
48597: PPUSH
48598: LD_VAR 0 2
48602: PPUSH
48603: LD_INT 1
48605: PPUSH
48606: CALL 47849 0 3
48610: ST_TO_ADDR
// InitHc ;
48611: CALL_OW 19
// InitUc ;
48615: CALL_OW 18
// uc_side := side ;
48619: LD_ADDR_OWVAR 20
48623: PUSH
48624: LD_VAR 0 16
48628: ST_TO_ADDR
// uc_nation := nation ;
48629: LD_ADDR_OWVAR 21
48633: PUSH
48634: LD_VAR 0 17
48638: ST_TO_ADDR
// if buildings then
48639: LD_VAR 0 18
48643: IFFALSE 49965
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48645: LD_ADDR_VAR 0 19
48649: PUSH
48650: LD_VAR 0 18
48654: PPUSH
48655: LD_INT 2
48657: PUSH
48658: LD_INT 30
48660: PUSH
48661: LD_INT 29
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 30
48670: PUSH
48671: LD_INT 30
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: LIST
48682: PPUSH
48683: CALL_OW 72
48687: ST_TO_ADDR
// if tmp then
48688: LD_VAR 0 19
48692: IFFALSE 48740
// for i in tmp do
48694: LD_ADDR_VAR 0 8
48698: PUSH
48699: LD_VAR 0 19
48703: PUSH
48704: FOR_IN
48705: IFFALSE 48738
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48707: LD_VAR 0 8
48711: PPUSH
48712: CALL_OW 250
48716: PPUSH
48717: LD_VAR 0 8
48721: PPUSH
48722: CALL_OW 251
48726: PPUSH
48727: LD_VAR 0 16
48731: PPUSH
48732: CALL_OW 441
48736: GO 48704
48738: POP
48739: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48740: LD_VAR 0 18
48744: PPUSH
48745: LD_INT 2
48747: PUSH
48748: LD_INT 30
48750: PUSH
48751: LD_INT 32
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 30
48760: PUSH
48761: LD_INT 33
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: LIST
48772: PPUSH
48773: CALL_OW 72
48777: IFFALSE 48865
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48779: LD_ADDR_VAR 0 8
48783: PUSH
48784: LD_VAR 0 18
48788: PPUSH
48789: LD_INT 2
48791: PUSH
48792: LD_INT 30
48794: PUSH
48795: LD_INT 32
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 30
48804: PUSH
48805: LD_INT 33
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: LIST
48816: PPUSH
48817: CALL_OW 72
48821: PUSH
48822: FOR_IN
48823: IFFALSE 48863
// begin if not GetBWeapon ( i ) then
48825: LD_VAR 0 8
48829: PPUSH
48830: CALL_OW 269
48834: NOT
48835: IFFALSE 48861
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48837: LD_VAR 0 8
48841: PPUSH
48842: LD_VAR 0 8
48846: PPUSH
48847: LD_VAR 0 2
48851: PPUSH
48852: CALL 50111 0 2
48856: PPUSH
48857: CALL_OW 431
// end ;
48861: GO 48822
48863: POP
48864: POP
// end ; for i = 1 to personel do
48865: LD_ADDR_VAR 0 8
48869: PUSH
48870: DOUBLE
48871: LD_INT 1
48873: DEC
48874: ST_TO_ADDR
48875: LD_VAR 0 6
48879: PUSH
48880: FOR_TO
48881: IFFALSE 49945
// begin if i > 4 then
48883: LD_VAR 0 8
48887: PUSH
48888: LD_INT 4
48890: GREATER
48891: IFFALSE 48895
// break ;
48893: GO 49945
// case i of 1 :
48895: LD_VAR 0 8
48899: PUSH
48900: LD_INT 1
48902: DOUBLE
48903: EQUAL
48904: IFTRUE 48908
48906: GO 48988
48908: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48909: LD_ADDR_VAR 0 12
48913: PUSH
48914: LD_VAR 0 18
48918: PPUSH
48919: LD_INT 22
48921: PUSH
48922: LD_VAR 0 16
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 58
48933: PUSH
48934: EMPTY
48935: LIST
48936: PUSH
48937: LD_INT 2
48939: PUSH
48940: LD_INT 30
48942: PUSH
48943: LD_INT 32
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 30
48952: PUSH
48953: LD_INT 4
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 30
48962: PUSH
48963: LD_INT 5
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: LIST
48980: PPUSH
48981: CALL_OW 72
48985: ST_TO_ADDR
48986: GO 49210
48988: LD_INT 2
48990: DOUBLE
48991: EQUAL
48992: IFTRUE 48996
48994: GO 49058
48996: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48997: LD_ADDR_VAR 0 12
49001: PUSH
49002: LD_VAR 0 18
49006: PPUSH
49007: LD_INT 22
49009: PUSH
49010: LD_VAR 0 16
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 2
49021: PUSH
49022: LD_INT 30
49024: PUSH
49025: LD_INT 0
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 30
49034: PUSH
49035: LD_INT 1
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: LIST
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PPUSH
49051: CALL_OW 72
49055: ST_TO_ADDR
49056: GO 49210
49058: LD_INT 3
49060: DOUBLE
49061: EQUAL
49062: IFTRUE 49066
49064: GO 49128
49066: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
49067: LD_ADDR_VAR 0 12
49071: PUSH
49072: LD_VAR 0 18
49076: PPUSH
49077: LD_INT 22
49079: PUSH
49080: LD_VAR 0 16
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 2
49091: PUSH
49092: LD_INT 30
49094: PUSH
49095: LD_INT 2
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 30
49104: PUSH
49105: LD_INT 3
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: LIST
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PPUSH
49121: CALL_OW 72
49125: ST_TO_ADDR
49126: GO 49210
49128: LD_INT 4
49130: DOUBLE
49131: EQUAL
49132: IFTRUE 49136
49134: GO 49209
49136: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
49137: LD_ADDR_VAR 0 12
49141: PUSH
49142: LD_VAR 0 18
49146: PPUSH
49147: LD_INT 22
49149: PUSH
49150: LD_VAR 0 16
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 2
49161: PUSH
49162: LD_INT 30
49164: PUSH
49165: LD_INT 6
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 30
49174: PUSH
49175: LD_INT 7
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 30
49184: PUSH
49185: LD_INT 8
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PPUSH
49202: CALL_OW 72
49206: ST_TO_ADDR
49207: GO 49210
49209: POP
// if i = 1 then
49210: LD_VAR 0 8
49214: PUSH
49215: LD_INT 1
49217: EQUAL
49218: IFFALSE 49329
// begin tmp := [ ] ;
49220: LD_ADDR_VAR 0 19
49224: PUSH
49225: EMPTY
49226: ST_TO_ADDR
// for j in f do
49227: LD_ADDR_VAR 0 9
49231: PUSH
49232: LD_VAR 0 12
49236: PUSH
49237: FOR_IN
49238: IFFALSE 49311
// if GetBType ( j ) = b_bunker then
49240: LD_VAR 0 9
49244: PPUSH
49245: CALL_OW 266
49249: PUSH
49250: LD_INT 32
49252: EQUAL
49253: IFFALSE 49280
// tmp := Insert ( tmp , 1 , j ) else
49255: LD_ADDR_VAR 0 19
49259: PUSH
49260: LD_VAR 0 19
49264: PPUSH
49265: LD_INT 1
49267: PPUSH
49268: LD_VAR 0 9
49272: PPUSH
49273: CALL_OW 2
49277: ST_TO_ADDR
49278: GO 49309
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49280: LD_ADDR_VAR 0 19
49284: PUSH
49285: LD_VAR 0 19
49289: PPUSH
49290: LD_VAR 0 19
49294: PUSH
49295: LD_INT 1
49297: PLUS
49298: PPUSH
49299: LD_VAR 0 9
49303: PPUSH
49304: CALL_OW 2
49308: ST_TO_ADDR
49309: GO 49237
49311: POP
49312: POP
// if tmp then
49313: LD_VAR 0 19
49317: IFFALSE 49329
// f := tmp ;
49319: LD_ADDR_VAR 0 12
49323: PUSH
49324: LD_VAR 0 19
49328: ST_TO_ADDR
// end ; x := personel [ i ] ;
49329: LD_ADDR_VAR 0 13
49333: PUSH
49334: LD_VAR 0 6
49338: PUSH
49339: LD_VAR 0 8
49343: ARRAY
49344: ST_TO_ADDR
// if x = - 1 then
49345: LD_VAR 0 13
49349: PUSH
49350: LD_INT 1
49352: NEG
49353: EQUAL
49354: IFFALSE 49563
// begin for j in f do
49356: LD_ADDR_VAR 0 9
49360: PUSH
49361: LD_VAR 0 12
49365: PUSH
49366: FOR_IN
49367: IFFALSE 49559
// repeat InitHc ;
49369: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49373: LD_VAR 0 9
49377: PPUSH
49378: CALL_OW 266
49382: PUSH
49383: LD_INT 5
49385: EQUAL
49386: IFFALSE 49456
// begin if UnitsInside ( j ) < 3 then
49388: LD_VAR 0 9
49392: PPUSH
49393: CALL_OW 313
49397: PUSH
49398: LD_INT 3
49400: LESS
49401: IFFALSE 49437
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49403: LD_INT 0
49405: PPUSH
49406: LD_INT 5
49408: PUSH
49409: LD_INT 8
49411: PUSH
49412: LD_INT 9
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: LIST
49419: PUSH
49420: LD_VAR 0 17
49424: ARRAY
49425: PPUSH
49426: LD_VAR 0 4
49430: PPUSH
49431: CALL_OW 380
49435: GO 49454
// PrepareHuman ( false , i , skill ) ;
49437: LD_INT 0
49439: PPUSH
49440: LD_VAR 0 8
49444: PPUSH
49445: LD_VAR 0 4
49449: PPUSH
49450: CALL_OW 380
// end else
49454: GO 49473
// PrepareHuman ( false , i , skill ) ;
49456: LD_INT 0
49458: PPUSH
49459: LD_VAR 0 8
49463: PPUSH
49464: LD_VAR 0 4
49468: PPUSH
49469: CALL_OW 380
// un := CreateHuman ;
49473: LD_ADDR_VAR 0 14
49477: PUSH
49478: CALL_OW 44
49482: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49483: LD_ADDR_VAR 0 7
49487: PUSH
49488: LD_VAR 0 7
49492: PPUSH
49493: LD_INT 1
49495: PPUSH
49496: LD_VAR 0 14
49500: PPUSH
49501: CALL_OW 2
49505: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49506: LD_VAR 0 14
49510: PPUSH
49511: LD_VAR 0 9
49515: PPUSH
49516: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49520: LD_VAR 0 9
49524: PPUSH
49525: CALL_OW 313
49529: PUSH
49530: LD_INT 6
49532: EQUAL
49533: PUSH
49534: LD_VAR 0 9
49538: PPUSH
49539: CALL_OW 266
49543: PUSH
49544: LD_INT 32
49546: PUSH
49547: LD_INT 31
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: IN
49554: OR
49555: IFFALSE 49369
49557: GO 49366
49559: POP
49560: POP
// end else
49561: GO 49943
// for j = 1 to x do
49563: LD_ADDR_VAR 0 9
49567: PUSH
49568: DOUBLE
49569: LD_INT 1
49571: DEC
49572: ST_TO_ADDR
49573: LD_VAR 0 13
49577: PUSH
49578: FOR_TO
49579: IFFALSE 49941
// begin InitHc ;
49581: CALL_OW 19
// if not f then
49585: LD_VAR 0 12
49589: NOT
49590: IFFALSE 49679
// begin PrepareHuman ( false , i , skill ) ;
49592: LD_INT 0
49594: PPUSH
49595: LD_VAR 0 8
49599: PPUSH
49600: LD_VAR 0 4
49604: PPUSH
49605: CALL_OW 380
// un := CreateHuman ;
49609: LD_ADDR_VAR 0 14
49613: PUSH
49614: CALL_OW 44
49618: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49619: LD_ADDR_VAR 0 7
49623: PUSH
49624: LD_VAR 0 7
49628: PPUSH
49629: LD_INT 1
49631: PPUSH
49632: LD_VAR 0 14
49636: PPUSH
49637: CALL_OW 2
49641: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49642: LD_VAR 0 14
49646: PPUSH
49647: LD_VAR 0 1
49651: PPUSH
49652: CALL_OW 250
49656: PPUSH
49657: LD_VAR 0 1
49661: PPUSH
49662: CALL_OW 251
49666: PPUSH
49667: LD_INT 10
49669: PPUSH
49670: LD_INT 0
49672: PPUSH
49673: CALL_OW 50
// continue ;
49677: GO 49578
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49679: LD_VAR 0 12
49683: PUSH
49684: LD_INT 1
49686: ARRAY
49687: PPUSH
49688: CALL_OW 313
49692: PUSH
49693: LD_VAR 0 12
49697: PUSH
49698: LD_INT 1
49700: ARRAY
49701: PPUSH
49702: CALL_OW 266
49706: PUSH
49707: LD_INT 32
49709: PUSH
49710: LD_INT 31
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: IN
49717: AND
49718: PUSH
49719: LD_VAR 0 12
49723: PUSH
49724: LD_INT 1
49726: ARRAY
49727: PPUSH
49728: CALL_OW 313
49732: PUSH
49733: LD_INT 6
49735: EQUAL
49736: OR
49737: IFFALSE 49757
// f := Delete ( f , 1 ) ;
49739: LD_ADDR_VAR 0 12
49743: PUSH
49744: LD_VAR 0 12
49748: PPUSH
49749: LD_INT 1
49751: PPUSH
49752: CALL_OW 3
49756: ST_TO_ADDR
// if not f then
49757: LD_VAR 0 12
49761: NOT
49762: IFFALSE 49780
// begin x := x + 2 ;
49764: LD_ADDR_VAR 0 13
49768: PUSH
49769: LD_VAR 0 13
49773: PUSH
49774: LD_INT 2
49776: PLUS
49777: ST_TO_ADDR
// continue ;
49778: GO 49578
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49780: LD_VAR 0 12
49784: PUSH
49785: LD_INT 1
49787: ARRAY
49788: PPUSH
49789: CALL_OW 266
49793: PUSH
49794: LD_INT 5
49796: EQUAL
49797: IFFALSE 49871
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49799: LD_VAR 0 12
49803: PUSH
49804: LD_INT 1
49806: ARRAY
49807: PPUSH
49808: CALL_OW 313
49812: PUSH
49813: LD_INT 3
49815: LESS
49816: IFFALSE 49852
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49818: LD_INT 0
49820: PPUSH
49821: LD_INT 5
49823: PUSH
49824: LD_INT 8
49826: PUSH
49827: LD_INT 9
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: LIST
49834: PUSH
49835: LD_VAR 0 17
49839: ARRAY
49840: PPUSH
49841: LD_VAR 0 4
49845: PPUSH
49846: CALL_OW 380
49850: GO 49869
// PrepareHuman ( false , i , skill ) ;
49852: LD_INT 0
49854: PPUSH
49855: LD_VAR 0 8
49859: PPUSH
49860: LD_VAR 0 4
49864: PPUSH
49865: CALL_OW 380
// end else
49869: GO 49888
// PrepareHuman ( false , i , skill ) ;
49871: LD_INT 0
49873: PPUSH
49874: LD_VAR 0 8
49878: PPUSH
49879: LD_VAR 0 4
49883: PPUSH
49884: CALL_OW 380
// un := CreateHuman ;
49888: LD_ADDR_VAR 0 14
49892: PUSH
49893: CALL_OW 44
49897: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49898: LD_ADDR_VAR 0 7
49902: PUSH
49903: LD_VAR 0 7
49907: PPUSH
49908: LD_INT 1
49910: PPUSH
49911: LD_VAR 0 14
49915: PPUSH
49916: CALL_OW 2
49920: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49921: LD_VAR 0 14
49925: PPUSH
49926: LD_VAR 0 12
49930: PUSH
49931: LD_INT 1
49933: ARRAY
49934: PPUSH
49935: CALL_OW 52
// end ;
49939: GO 49578
49941: POP
49942: POP
// end ;
49943: GO 48880
49945: POP
49946: POP
// result := result ^ buildings ;
49947: LD_ADDR_VAR 0 7
49951: PUSH
49952: LD_VAR 0 7
49956: PUSH
49957: LD_VAR 0 18
49961: ADD
49962: ST_TO_ADDR
// end else
49963: GO 50106
// begin for i = 1 to personel do
49965: LD_ADDR_VAR 0 8
49969: PUSH
49970: DOUBLE
49971: LD_INT 1
49973: DEC
49974: ST_TO_ADDR
49975: LD_VAR 0 6
49979: PUSH
49980: FOR_TO
49981: IFFALSE 50104
// begin if i > 4 then
49983: LD_VAR 0 8
49987: PUSH
49988: LD_INT 4
49990: GREATER
49991: IFFALSE 49995
// break ;
49993: GO 50104
// x := personel [ i ] ;
49995: LD_ADDR_VAR 0 13
49999: PUSH
50000: LD_VAR 0 6
50004: PUSH
50005: LD_VAR 0 8
50009: ARRAY
50010: ST_TO_ADDR
// if x = - 1 then
50011: LD_VAR 0 13
50015: PUSH
50016: LD_INT 1
50018: NEG
50019: EQUAL
50020: IFFALSE 50024
// continue ;
50022: GO 49980
// PrepareHuman ( false , i , skill ) ;
50024: LD_INT 0
50026: PPUSH
50027: LD_VAR 0 8
50031: PPUSH
50032: LD_VAR 0 4
50036: PPUSH
50037: CALL_OW 380
// un := CreateHuman ;
50041: LD_ADDR_VAR 0 14
50045: PUSH
50046: CALL_OW 44
50050: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50051: LD_VAR 0 14
50055: PPUSH
50056: LD_VAR 0 1
50060: PPUSH
50061: CALL_OW 250
50065: PPUSH
50066: LD_VAR 0 1
50070: PPUSH
50071: CALL_OW 251
50075: PPUSH
50076: LD_INT 10
50078: PPUSH
50079: LD_INT 0
50081: PPUSH
50082: CALL_OW 50
// result := result ^ un ;
50086: LD_ADDR_VAR 0 7
50090: PUSH
50091: LD_VAR 0 7
50095: PUSH
50096: LD_VAR 0 14
50100: ADD
50101: ST_TO_ADDR
// end ;
50102: GO 49980
50104: POP
50105: POP
// end ; end ;
50106: LD_VAR 0 7
50110: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
50111: LD_INT 0
50113: PPUSH
50114: PPUSH
50115: PPUSH
50116: PPUSH
50117: PPUSH
50118: PPUSH
50119: PPUSH
50120: PPUSH
50121: PPUSH
50122: PPUSH
50123: PPUSH
50124: PPUSH
50125: PPUSH
50126: PPUSH
50127: PPUSH
50128: PPUSH
// result := false ;
50129: LD_ADDR_VAR 0 3
50133: PUSH
50134: LD_INT 0
50136: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
50137: LD_VAR 0 1
50141: NOT
50142: PUSH
50143: LD_VAR 0 1
50147: PPUSH
50148: CALL_OW 266
50152: PUSH
50153: LD_INT 32
50155: PUSH
50156: LD_INT 33
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: IN
50163: NOT
50164: OR
50165: IFFALSE 50169
// exit ;
50167: GO 51278
// nat := GetNation ( tower ) ;
50169: LD_ADDR_VAR 0 12
50173: PUSH
50174: LD_VAR 0 1
50178: PPUSH
50179: CALL_OW 248
50183: ST_TO_ADDR
// side := GetSide ( tower ) ;
50184: LD_ADDR_VAR 0 16
50188: PUSH
50189: LD_VAR 0 1
50193: PPUSH
50194: CALL_OW 255
50198: ST_TO_ADDR
// x := GetX ( tower ) ;
50199: LD_ADDR_VAR 0 10
50203: PUSH
50204: LD_VAR 0 1
50208: PPUSH
50209: CALL_OW 250
50213: ST_TO_ADDR
// y := GetY ( tower ) ;
50214: LD_ADDR_VAR 0 11
50218: PUSH
50219: LD_VAR 0 1
50223: PPUSH
50224: CALL_OW 251
50228: ST_TO_ADDR
// if not x or not y then
50229: LD_VAR 0 10
50233: NOT
50234: PUSH
50235: LD_VAR 0 11
50239: NOT
50240: OR
50241: IFFALSE 50245
// exit ;
50243: GO 51278
// weapon := 0 ;
50245: LD_ADDR_VAR 0 18
50249: PUSH
50250: LD_INT 0
50252: ST_TO_ADDR
// fac_list := [ ] ;
50253: LD_ADDR_VAR 0 17
50257: PUSH
50258: EMPTY
50259: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
50260: LD_ADDR_VAR 0 6
50264: PUSH
50265: LD_VAR 0 1
50269: PPUSH
50270: CALL_OW 274
50274: PPUSH
50275: LD_VAR 0 2
50279: PPUSH
50280: LD_INT 0
50282: PPUSH
50283: CALL 47849 0 3
50287: PPUSH
50288: LD_INT 30
50290: PUSH
50291: LD_INT 3
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PPUSH
50298: CALL_OW 72
50302: ST_TO_ADDR
// if not factories then
50303: LD_VAR 0 6
50307: NOT
50308: IFFALSE 50312
// exit ;
50310: GO 51278
// for i in factories do
50312: LD_ADDR_VAR 0 8
50316: PUSH
50317: LD_VAR 0 6
50321: PUSH
50322: FOR_IN
50323: IFFALSE 50348
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50325: LD_ADDR_VAR 0 17
50329: PUSH
50330: LD_VAR 0 17
50334: PUSH
50335: LD_VAR 0 8
50339: PPUSH
50340: CALL_OW 478
50344: UNION
50345: ST_TO_ADDR
50346: GO 50322
50348: POP
50349: POP
// if not fac_list then
50350: LD_VAR 0 17
50354: NOT
50355: IFFALSE 50359
// exit ;
50357: GO 51278
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50359: LD_ADDR_VAR 0 5
50363: PUSH
50364: LD_INT 4
50366: PUSH
50367: LD_INT 5
50369: PUSH
50370: LD_INT 9
50372: PUSH
50373: LD_INT 10
50375: PUSH
50376: LD_INT 6
50378: PUSH
50379: LD_INT 7
50381: PUSH
50382: LD_INT 11
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 27
50396: PUSH
50397: LD_INT 28
50399: PUSH
50400: LD_INT 26
50402: PUSH
50403: LD_INT 30
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 43
50414: PUSH
50415: LD_INT 44
50417: PUSH
50418: LD_INT 46
50420: PUSH
50421: LD_INT 45
50423: PUSH
50424: LD_INT 47
50426: PUSH
50427: LD_INT 49
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: LIST
50442: PUSH
50443: LD_VAR 0 12
50447: ARRAY
50448: ST_TO_ADDR
// list := list isect fac_list ;
50449: LD_ADDR_VAR 0 5
50453: PUSH
50454: LD_VAR 0 5
50458: PUSH
50459: LD_VAR 0 17
50463: ISECT
50464: ST_TO_ADDR
// if not list then
50465: LD_VAR 0 5
50469: NOT
50470: IFFALSE 50474
// exit ;
50472: GO 51278
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50474: LD_VAR 0 12
50478: PUSH
50479: LD_INT 3
50481: EQUAL
50482: PUSH
50483: LD_INT 49
50485: PUSH
50486: LD_VAR 0 5
50490: IN
50491: AND
50492: PUSH
50493: LD_INT 31
50495: PPUSH
50496: LD_VAR 0 16
50500: PPUSH
50501: CALL_OW 321
50505: PUSH
50506: LD_INT 2
50508: EQUAL
50509: AND
50510: IFFALSE 50570
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50512: LD_INT 22
50514: PUSH
50515: LD_VAR 0 16
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 35
50526: PUSH
50527: LD_INT 49
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 91
50536: PUSH
50537: LD_VAR 0 1
50541: PUSH
50542: LD_INT 10
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: LIST
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: LIST
50554: PPUSH
50555: CALL_OW 69
50559: NOT
50560: IFFALSE 50570
// weapon := ru_time_lapser ;
50562: LD_ADDR_VAR 0 18
50566: PUSH
50567: LD_INT 49
50569: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50570: LD_VAR 0 12
50574: PUSH
50575: LD_INT 1
50577: PUSH
50578: LD_INT 2
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: IN
50585: PUSH
50586: LD_INT 11
50588: PUSH
50589: LD_VAR 0 5
50593: IN
50594: PUSH
50595: LD_INT 30
50597: PUSH
50598: LD_VAR 0 5
50602: IN
50603: OR
50604: AND
50605: PUSH
50606: LD_INT 6
50608: PPUSH
50609: LD_VAR 0 16
50613: PPUSH
50614: CALL_OW 321
50618: PUSH
50619: LD_INT 2
50621: EQUAL
50622: AND
50623: IFFALSE 50788
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50625: LD_INT 22
50627: PUSH
50628: LD_VAR 0 16
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 2
50639: PUSH
50640: LD_INT 35
50642: PUSH
50643: LD_INT 11
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 35
50652: PUSH
50653: LD_INT 30
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 91
50667: PUSH
50668: LD_VAR 0 1
50672: PUSH
50673: LD_INT 18
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: LIST
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: LIST
50685: PPUSH
50686: CALL_OW 69
50690: NOT
50691: PUSH
50692: LD_INT 22
50694: PUSH
50695: LD_VAR 0 16
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 2
50706: PUSH
50707: LD_INT 30
50709: PUSH
50710: LD_INT 32
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 30
50719: PUSH
50720: LD_INT 33
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 91
50734: PUSH
50735: LD_VAR 0 1
50739: PUSH
50740: LD_INT 12
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: LIST
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: LIST
50752: PUSH
50753: EMPTY
50754: LIST
50755: PPUSH
50756: CALL_OW 69
50760: PUSH
50761: LD_INT 2
50763: GREATER
50764: AND
50765: IFFALSE 50788
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50767: LD_ADDR_VAR 0 18
50771: PUSH
50772: LD_INT 11
50774: PUSH
50775: LD_INT 30
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_VAR 0 12
50786: ARRAY
50787: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50788: LD_VAR 0 18
50792: NOT
50793: PUSH
50794: LD_INT 40
50796: PPUSH
50797: LD_VAR 0 16
50801: PPUSH
50802: CALL_OW 321
50806: PUSH
50807: LD_INT 2
50809: EQUAL
50810: AND
50811: PUSH
50812: LD_INT 7
50814: PUSH
50815: LD_VAR 0 5
50819: IN
50820: PUSH
50821: LD_INT 28
50823: PUSH
50824: LD_VAR 0 5
50828: IN
50829: OR
50830: PUSH
50831: LD_INT 45
50833: PUSH
50834: LD_VAR 0 5
50838: IN
50839: OR
50840: AND
50841: IFFALSE 51095
// begin hex := GetHexInfo ( x , y ) ;
50843: LD_ADDR_VAR 0 4
50847: PUSH
50848: LD_VAR 0 10
50852: PPUSH
50853: LD_VAR 0 11
50857: PPUSH
50858: CALL_OW 546
50862: ST_TO_ADDR
// if hex [ 1 ] then
50863: LD_VAR 0 4
50867: PUSH
50868: LD_INT 1
50870: ARRAY
50871: IFFALSE 50875
// exit ;
50873: GO 51278
// height := hex [ 2 ] ;
50875: LD_ADDR_VAR 0 15
50879: PUSH
50880: LD_VAR 0 4
50884: PUSH
50885: LD_INT 2
50887: ARRAY
50888: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50889: LD_ADDR_VAR 0 14
50893: PUSH
50894: LD_INT 0
50896: PUSH
50897: LD_INT 2
50899: PUSH
50900: LD_INT 3
50902: PUSH
50903: LD_INT 5
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: ST_TO_ADDR
// for i in tmp do
50912: LD_ADDR_VAR 0 8
50916: PUSH
50917: LD_VAR 0 14
50921: PUSH
50922: FOR_IN
50923: IFFALSE 51093
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50925: LD_ADDR_VAR 0 9
50929: PUSH
50930: LD_VAR 0 10
50934: PPUSH
50935: LD_VAR 0 8
50939: PPUSH
50940: LD_INT 5
50942: PPUSH
50943: CALL_OW 272
50947: PUSH
50948: LD_VAR 0 11
50952: PPUSH
50953: LD_VAR 0 8
50957: PPUSH
50958: LD_INT 5
50960: PPUSH
50961: CALL_OW 273
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50970: LD_VAR 0 9
50974: PUSH
50975: LD_INT 1
50977: ARRAY
50978: PPUSH
50979: LD_VAR 0 9
50983: PUSH
50984: LD_INT 2
50986: ARRAY
50987: PPUSH
50988: CALL_OW 488
50992: IFFALSE 51091
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50994: LD_ADDR_VAR 0 4
50998: PUSH
50999: LD_VAR 0 9
51003: PUSH
51004: LD_INT 1
51006: ARRAY
51007: PPUSH
51008: LD_VAR 0 9
51012: PUSH
51013: LD_INT 2
51015: ARRAY
51016: PPUSH
51017: CALL_OW 546
51021: ST_TO_ADDR
// if hex [ 1 ] then
51022: LD_VAR 0 4
51026: PUSH
51027: LD_INT 1
51029: ARRAY
51030: IFFALSE 51034
// continue ;
51032: GO 50922
// h := hex [ 2 ] ;
51034: LD_ADDR_VAR 0 13
51038: PUSH
51039: LD_VAR 0 4
51043: PUSH
51044: LD_INT 2
51046: ARRAY
51047: ST_TO_ADDR
// if h + 7 < height then
51048: LD_VAR 0 13
51052: PUSH
51053: LD_INT 7
51055: PLUS
51056: PUSH
51057: LD_VAR 0 15
51061: LESS
51062: IFFALSE 51091
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
51064: LD_ADDR_VAR 0 18
51068: PUSH
51069: LD_INT 7
51071: PUSH
51072: LD_INT 28
51074: PUSH
51075: LD_INT 45
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: LIST
51082: PUSH
51083: LD_VAR 0 12
51087: ARRAY
51088: ST_TO_ADDR
// break ;
51089: GO 51093
// end ; end ; end ;
51091: GO 50922
51093: POP
51094: POP
// end ; if not weapon then
51095: LD_VAR 0 18
51099: NOT
51100: IFFALSE 51160
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
51102: LD_ADDR_VAR 0 5
51106: PUSH
51107: LD_VAR 0 5
51111: PUSH
51112: LD_INT 11
51114: PUSH
51115: LD_INT 30
51117: PUSH
51118: LD_INT 49
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: LIST
51125: DIFF
51126: ST_TO_ADDR
// if not list then
51127: LD_VAR 0 5
51131: NOT
51132: IFFALSE 51136
// exit ;
51134: GO 51278
// weapon := list [ rand ( 1 , list ) ] ;
51136: LD_ADDR_VAR 0 18
51140: PUSH
51141: LD_VAR 0 5
51145: PUSH
51146: LD_INT 1
51148: PPUSH
51149: LD_VAR 0 5
51153: PPUSH
51154: CALL_OW 12
51158: ARRAY
51159: ST_TO_ADDR
// end ; if weapon then
51160: LD_VAR 0 18
51164: IFFALSE 51278
// begin tmp := CostOfWeapon ( weapon ) ;
51166: LD_ADDR_VAR 0 14
51170: PUSH
51171: LD_VAR 0 18
51175: PPUSH
51176: CALL_OW 451
51180: ST_TO_ADDR
// j := GetBase ( tower ) ;
51181: LD_ADDR_VAR 0 9
51185: PUSH
51186: LD_VAR 0 1
51190: PPUSH
51191: CALL_OW 274
51195: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
51196: LD_VAR 0 9
51200: PPUSH
51201: LD_INT 1
51203: PPUSH
51204: CALL_OW 275
51208: PUSH
51209: LD_VAR 0 14
51213: PUSH
51214: LD_INT 1
51216: ARRAY
51217: GREATEREQUAL
51218: PUSH
51219: LD_VAR 0 9
51223: PPUSH
51224: LD_INT 2
51226: PPUSH
51227: CALL_OW 275
51231: PUSH
51232: LD_VAR 0 14
51236: PUSH
51237: LD_INT 2
51239: ARRAY
51240: GREATEREQUAL
51241: AND
51242: PUSH
51243: LD_VAR 0 9
51247: PPUSH
51248: LD_INT 3
51250: PPUSH
51251: CALL_OW 275
51255: PUSH
51256: LD_VAR 0 14
51260: PUSH
51261: LD_INT 3
51263: ARRAY
51264: GREATEREQUAL
51265: AND
51266: IFFALSE 51278
// result := weapon ;
51268: LD_ADDR_VAR 0 3
51272: PUSH
51273: LD_VAR 0 18
51277: ST_TO_ADDR
// end ; end ;
51278: LD_VAR 0 3
51282: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51283: LD_INT 0
51285: PPUSH
51286: PPUSH
// result := true ;
51287: LD_ADDR_VAR 0 3
51291: PUSH
51292: LD_INT 1
51294: ST_TO_ADDR
// if array1 = array2 then
51295: LD_VAR 0 1
51299: PUSH
51300: LD_VAR 0 2
51304: EQUAL
51305: IFFALSE 51365
// begin for i = 1 to array1 do
51307: LD_ADDR_VAR 0 4
51311: PUSH
51312: DOUBLE
51313: LD_INT 1
51315: DEC
51316: ST_TO_ADDR
51317: LD_VAR 0 1
51321: PUSH
51322: FOR_TO
51323: IFFALSE 51361
// if array1 [ i ] <> array2 [ i ] then
51325: LD_VAR 0 1
51329: PUSH
51330: LD_VAR 0 4
51334: ARRAY
51335: PUSH
51336: LD_VAR 0 2
51340: PUSH
51341: LD_VAR 0 4
51345: ARRAY
51346: NONEQUAL
51347: IFFALSE 51359
// begin result := false ;
51349: LD_ADDR_VAR 0 3
51353: PUSH
51354: LD_INT 0
51356: ST_TO_ADDR
// break ;
51357: GO 51361
// end ;
51359: GO 51322
51361: POP
51362: POP
// end else
51363: GO 51373
// result := false ;
51365: LD_ADDR_VAR 0 3
51369: PUSH
51370: LD_INT 0
51372: ST_TO_ADDR
// end ;
51373: LD_VAR 0 3
51377: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51378: LD_INT 0
51380: PPUSH
51381: PPUSH
// if not array1 or not array2 then
51382: LD_VAR 0 1
51386: NOT
51387: PUSH
51388: LD_VAR 0 2
51392: NOT
51393: OR
51394: IFFALSE 51398
// exit ;
51396: GO 51462
// result := true ;
51398: LD_ADDR_VAR 0 3
51402: PUSH
51403: LD_INT 1
51405: ST_TO_ADDR
// for i = 1 to array1 do
51406: LD_ADDR_VAR 0 4
51410: PUSH
51411: DOUBLE
51412: LD_INT 1
51414: DEC
51415: ST_TO_ADDR
51416: LD_VAR 0 1
51420: PUSH
51421: FOR_TO
51422: IFFALSE 51460
// if array1 [ i ] <> array2 [ i ] then
51424: LD_VAR 0 1
51428: PUSH
51429: LD_VAR 0 4
51433: ARRAY
51434: PUSH
51435: LD_VAR 0 2
51439: PUSH
51440: LD_VAR 0 4
51444: ARRAY
51445: NONEQUAL
51446: IFFALSE 51458
// begin result := false ;
51448: LD_ADDR_VAR 0 3
51452: PUSH
51453: LD_INT 0
51455: ST_TO_ADDR
// break ;
51456: GO 51460
// end ;
51458: GO 51421
51460: POP
51461: POP
// end ;
51462: LD_VAR 0 3
51466: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51467: LD_INT 0
51469: PPUSH
51470: PPUSH
51471: PPUSH
// pom := GetBase ( fac ) ;
51472: LD_ADDR_VAR 0 5
51476: PUSH
51477: LD_VAR 0 1
51481: PPUSH
51482: CALL_OW 274
51486: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51487: LD_ADDR_VAR 0 4
51491: PUSH
51492: LD_VAR 0 2
51496: PUSH
51497: LD_INT 1
51499: ARRAY
51500: PPUSH
51501: LD_VAR 0 2
51505: PUSH
51506: LD_INT 2
51508: ARRAY
51509: PPUSH
51510: LD_VAR 0 2
51514: PUSH
51515: LD_INT 3
51517: ARRAY
51518: PPUSH
51519: LD_VAR 0 2
51523: PUSH
51524: LD_INT 4
51526: ARRAY
51527: PPUSH
51528: CALL_OW 449
51532: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51533: LD_ADDR_VAR 0 3
51537: PUSH
51538: LD_VAR 0 5
51542: PPUSH
51543: LD_INT 1
51545: PPUSH
51546: CALL_OW 275
51550: PUSH
51551: LD_VAR 0 4
51555: PUSH
51556: LD_INT 1
51558: ARRAY
51559: GREATEREQUAL
51560: PUSH
51561: LD_VAR 0 5
51565: PPUSH
51566: LD_INT 2
51568: PPUSH
51569: CALL_OW 275
51573: PUSH
51574: LD_VAR 0 4
51578: PUSH
51579: LD_INT 2
51581: ARRAY
51582: GREATEREQUAL
51583: AND
51584: PUSH
51585: LD_VAR 0 5
51589: PPUSH
51590: LD_INT 3
51592: PPUSH
51593: CALL_OW 275
51597: PUSH
51598: LD_VAR 0 4
51602: PUSH
51603: LD_INT 3
51605: ARRAY
51606: GREATEREQUAL
51607: AND
51608: ST_TO_ADDR
// end ;
51609: LD_VAR 0 3
51613: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51614: LD_INT 0
51616: PPUSH
51617: PPUSH
51618: PPUSH
51619: PPUSH
// pom := GetBase ( building ) ;
51620: LD_ADDR_VAR 0 3
51624: PUSH
51625: LD_VAR 0 1
51629: PPUSH
51630: CALL_OW 274
51634: ST_TO_ADDR
// if not pom then
51635: LD_VAR 0 3
51639: NOT
51640: IFFALSE 51644
// exit ;
51642: GO 51814
// btype := GetBType ( building ) ;
51644: LD_ADDR_VAR 0 5
51648: PUSH
51649: LD_VAR 0 1
51653: PPUSH
51654: CALL_OW 266
51658: ST_TO_ADDR
// if btype = b_armoury then
51659: LD_VAR 0 5
51663: PUSH
51664: LD_INT 4
51666: EQUAL
51667: IFFALSE 51677
// btype := b_barracks ;
51669: LD_ADDR_VAR 0 5
51673: PUSH
51674: LD_INT 5
51676: ST_TO_ADDR
// if btype = b_depot then
51677: LD_VAR 0 5
51681: PUSH
51682: LD_INT 0
51684: EQUAL
51685: IFFALSE 51695
// btype := b_warehouse ;
51687: LD_ADDR_VAR 0 5
51691: PUSH
51692: LD_INT 1
51694: ST_TO_ADDR
// if btype = b_workshop then
51695: LD_VAR 0 5
51699: PUSH
51700: LD_INT 2
51702: EQUAL
51703: IFFALSE 51713
// btype := b_factory ;
51705: LD_ADDR_VAR 0 5
51709: PUSH
51710: LD_INT 3
51712: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51713: LD_ADDR_VAR 0 4
51717: PUSH
51718: LD_VAR 0 5
51722: PPUSH
51723: LD_VAR 0 1
51727: PPUSH
51728: CALL_OW 248
51732: PPUSH
51733: CALL_OW 450
51737: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51738: LD_ADDR_VAR 0 2
51742: PUSH
51743: LD_VAR 0 3
51747: PPUSH
51748: LD_INT 1
51750: PPUSH
51751: CALL_OW 275
51755: PUSH
51756: LD_VAR 0 4
51760: PUSH
51761: LD_INT 1
51763: ARRAY
51764: GREATEREQUAL
51765: PUSH
51766: LD_VAR 0 3
51770: PPUSH
51771: LD_INT 2
51773: PPUSH
51774: CALL_OW 275
51778: PUSH
51779: LD_VAR 0 4
51783: PUSH
51784: LD_INT 2
51786: ARRAY
51787: GREATEREQUAL
51788: AND
51789: PUSH
51790: LD_VAR 0 3
51794: PPUSH
51795: LD_INT 3
51797: PPUSH
51798: CALL_OW 275
51802: PUSH
51803: LD_VAR 0 4
51807: PUSH
51808: LD_INT 3
51810: ARRAY
51811: GREATEREQUAL
51812: AND
51813: ST_TO_ADDR
// end ;
51814: LD_VAR 0 2
51818: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51819: LD_INT 0
51821: PPUSH
51822: PPUSH
51823: PPUSH
// pom := GetBase ( building ) ;
51824: LD_ADDR_VAR 0 4
51828: PUSH
51829: LD_VAR 0 1
51833: PPUSH
51834: CALL_OW 274
51838: ST_TO_ADDR
// if not pom then
51839: LD_VAR 0 4
51843: NOT
51844: IFFALSE 51848
// exit ;
51846: GO 51949
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51848: LD_ADDR_VAR 0 5
51852: PUSH
51853: LD_VAR 0 2
51857: PPUSH
51858: LD_VAR 0 1
51862: PPUSH
51863: CALL_OW 248
51867: PPUSH
51868: CALL_OW 450
51872: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51873: LD_ADDR_VAR 0 3
51877: PUSH
51878: LD_VAR 0 4
51882: PPUSH
51883: LD_INT 1
51885: PPUSH
51886: CALL_OW 275
51890: PUSH
51891: LD_VAR 0 5
51895: PUSH
51896: LD_INT 1
51898: ARRAY
51899: GREATEREQUAL
51900: PUSH
51901: LD_VAR 0 4
51905: PPUSH
51906: LD_INT 2
51908: PPUSH
51909: CALL_OW 275
51913: PUSH
51914: LD_VAR 0 5
51918: PUSH
51919: LD_INT 2
51921: ARRAY
51922: GREATEREQUAL
51923: AND
51924: PUSH
51925: LD_VAR 0 4
51929: PPUSH
51930: LD_INT 3
51932: PPUSH
51933: CALL_OW 275
51937: PUSH
51938: LD_VAR 0 5
51942: PUSH
51943: LD_INT 3
51945: ARRAY
51946: GREATEREQUAL
51947: AND
51948: ST_TO_ADDR
// end ;
51949: LD_VAR 0 3
51953: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51954: LD_INT 0
51956: PPUSH
51957: PPUSH
51958: PPUSH
51959: PPUSH
51960: PPUSH
51961: PPUSH
51962: PPUSH
51963: PPUSH
51964: PPUSH
51965: PPUSH
51966: PPUSH
// result := false ;
51967: LD_ADDR_VAR 0 8
51971: PUSH
51972: LD_INT 0
51974: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51975: LD_VAR 0 5
51979: NOT
51980: PUSH
51981: LD_VAR 0 1
51985: NOT
51986: OR
51987: PUSH
51988: LD_VAR 0 2
51992: NOT
51993: OR
51994: PUSH
51995: LD_VAR 0 3
51999: NOT
52000: OR
52001: IFFALSE 52005
// exit ;
52003: GO 52819
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
52005: LD_ADDR_VAR 0 14
52009: PUSH
52010: LD_VAR 0 1
52014: PPUSH
52015: LD_VAR 0 2
52019: PPUSH
52020: LD_VAR 0 3
52024: PPUSH
52025: LD_VAR 0 4
52029: PPUSH
52030: LD_VAR 0 5
52034: PUSH
52035: LD_INT 1
52037: ARRAY
52038: PPUSH
52039: CALL_OW 248
52043: PPUSH
52044: LD_INT 0
52046: PPUSH
52047: CALL 54072 0 6
52051: ST_TO_ADDR
// if not hexes then
52052: LD_VAR 0 14
52056: NOT
52057: IFFALSE 52061
// exit ;
52059: GO 52819
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52061: LD_ADDR_VAR 0 17
52065: PUSH
52066: LD_VAR 0 5
52070: PPUSH
52071: LD_INT 22
52073: PUSH
52074: LD_VAR 0 13
52078: PPUSH
52079: CALL_OW 255
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 2
52090: PUSH
52091: LD_INT 30
52093: PUSH
52094: LD_INT 0
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 30
52103: PUSH
52104: LD_INT 1
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: LIST
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PPUSH
52120: CALL_OW 72
52124: ST_TO_ADDR
// for i = 1 to hexes do
52125: LD_ADDR_VAR 0 9
52129: PUSH
52130: DOUBLE
52131: LD_INT 1
52133: DEC
52134: ST_TO_ADDR
52135: LD_VAR 0 14
52139: PUSH
52140: FOR_TO
52141: IFFALSE 52817
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52143: LD_ADDR_VAR 0 13
52147: PUSH
52148: LD_VAR 0 14
52152: PUSH
52153: LD_VAR 0 9
52157: ARRAY
52158: PUSH
52159: LD_INT 1
52161: ARRAY
52162: PPUSH
52163: LD_VAR 0 14
52167: PUSH
52168: LD_VAR 0 9
52172: ARRAY
52173: PUSH
52174: LD_INT 2
52176: ARRAY
52177: PPUSH
52178: CALL_OW 428
52182: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
52183: LD_VAR 0 14
52187: PUSH
52188: LD_VAR 0 9
52192: ARRAY
52193: PUSH
52194: LD_INT 1
52196: ARRAY
52197: PPUSH
52198: LD_VAR 0 14
52202: PUSH
52203: LD_VAR 0 9
52207: ARRAY
52208: PUSH
52209: LD_INT 2
52211: ARRAY
52212: PPUSH
52213: CALL_OW 351
52217: PUSH
52218: LD_VAR 0 14
52222: PUSH
52223: LD_VAR 0 9
52227: ARRAY
52228: PUSH
52229: LD_INT 1
52231: ARRAY
52232: PPUSH
52233: LD_VAR 0 14
52237: PUSH
52238: LD_VAR 0 9
52242: ARRAY
52243: PUSH
52244: LD_INT 2
52246: ARRAY
52247: PPUSH
52248: CALL_OW 488
52252: NOT
52253: OR
52254: PUSH
52255: LD_VAR 0 13
52259: PPUSH
52260: CALL_OW 247
52264: PUSH
52265: LD_INT 3
52267: EQUAL
52268: OR
52269: IFFALSE 52275
// exit ;
52271: POP
52272: POP
52273: GO 52819
// if not tmp then
52275: LD_VAR 0 13
52279: NOT
52280: IFFALSE 52284
// continue ;
52282: GO 52140
// result := true ;
52284: LD_ADDR_VAR 0 8
52288: PUSH
52289: LD_INT 1
52291: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
52292: LD_VAR 0 6
52296: PUSH
52297: LD_VAR 0 13
52301: PPUSH
52302: CALL_OW 247
52306: PUSH
52307: LD_INT 2
52309: EQUAL
52310: AND
52311: PUSH
52312: LD_VAR 0 13
52316: PPUSH
52317: CALL_OW 263
52321: PUSH
52322: LD_INT 1
52324: EQUAL
52325: AND
52326: IFFALSE 52490
// begin if IsDrivenBy ( tmp ) then
52328: LD_VAR 0 13
52332: PPUSH
52333: CALL_OW 311
52337: IFFALSE 52341
// continue ;
52339: GO 52140
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52341: LD_VAR 0 6
52345: PPUSH
52346: LD_INT 3
52348: PUSH
52349: LD_INT 60
52351: PUSH
52352: EMPTY
52353: LIST
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 3
52361: PUSH
52362: LD_INT 55
52364: PUSH
52365: EMPTY
52366: LIST
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PPUSH
52376: CALL_OW 72
52380: IFFALSE 52488
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52382: LD_ADDR_VAR 0 18
52386: PUSH
52387: LD_VAR 0 6
52391: PPUSH
52392: LD_INT 3
52394: PUSH
52395: LD_INT 60
52397: PUSH
52398: EMPTY
52399: LIST
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 3
52407: PUSH
52408: LD_INT 55
52410: PUSH
52411: EMPTY
52412: LIST
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PPUSH
52422: CALL_OW 72
52426: PUSH
52427: LD_INT 1
52429: ARRAY
52430: ST_TO_ADDR
// if IsInUnit ( driver ) then
52431: LD_VAR 0 18
52435: PPUSH
52436: CALL_OW 310
52440: IFFALSE 52451
// ComExit ( driver ) ;
52442: LD_VAR 0 18
52446: PPUSH
52447: CALL 77853 0 1
// AddComEnterUnit ( driver , tmp ) ;
52451: LD_VAR 0 18
52455: PPUSH
52456: LD_VAR 0 13
52460: PPUSH
52461: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52465: LD_VAR 0 18
52469: PPUSH
52470: LD_VAR 0 7
52474: PPUSH
52475: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52479: LD_VAR 0 18
52483: PPUSH
52484: CALL_OW 181
// end ; continue ;
52488: GO 52140
// end ; if not cleaners or not tmp in cleaners then
52490: LD_VAR 0 6
52494: NOT
52495: PUSH
52496: LD_VAR 0 13
52500: PUSH
52501: LD_VAR 0 6
52505: IN
52506: NOT
52507: OR
52508: IFFALSE 52815
// begin if dep then
52510: LD_VAR 0 17
52514: IFFALSE 52650
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52516: LD_ADDR_VAR 0 16
52520: PUSH
52521: LD_VAR 0 17
52525: PUSH
52526: LD_INT 1
52528: ARRAY
52529: PPUSH
52530: CALL_OW 250
52534: PPUSH
52535: LD_VAR 0 17
52539: PUSH
52540: LD_INT 1
52542: ARRAY
52543: PPUSH
52544: CALL_OW 254
52548: PPUSH
52549: LD_INT 5
52551: PPUSH
52552: CALL_OW 272
52556: PUSH
52557: LD_VAR 0 17
52561: PUSH
52562: LD_INT 1
52564: ARRAY
52565: PPUSH
52566: CALL_OW 251
52570: PPUSH
52571: LD_VAR 0 17
52575: PUSH
52576: LD_INT 1
52578: ARRAY
52579: PPUSH
52580: CALL_OW 254
52584: PPUSH
52585: LD_INT 5
52587: PPUSH
52588: CALL_OW 273
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52597: LD_VAR 0 16
52601: PUSH
52602: LD_INT 1
52604: ARRAY
52605: PPUSH
52606: LD_VAR 0 16
52610: PUSH
52611: LD_INT 2
52613: ARRAY
52614: PPUSH
52615: CALL_OW 488
52619: IFFALSE 52650
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52621: LD_VAR 0 13
52625: PPUSH
52626: LD_VAR 0 16
52630: PUSH
52631: LD_INT 1
52633: ARRAY
52634: PPUSH
52635: LD_VAR 0 16
52639: PUSH
52640: LD_INT 2
52642: ARRAY
52643: PPUSH
52644: CALL_OW 111
// continue ;
52648: GO 52140
// end ; end ; r := GetDir ( tmp ) ;
52650: LD_ADDR_VAR 0 15
52654: PUSH
52655: LD_VAR 0 13
52659: PPUSH
52660: CALL_OW 254
52664: ST_TO_ADDR
// if r = 5 then
52665: LD_VAR 0 15
52669: PUSH
52670: LD_INT 5
52672: EQUAL
52673: IFFALSE 52683
// r := 0 ;
52675: LD_ADDR_VAR 0 15
52679: PUSH
52680: LD_INT 0
52682: ST_TO_ADDR
// for j = r to 5 do
52683: LD_ADDR_VAR 0 10
52687: PUSH
52688: DOUBLE
52689: LD_VAR 0 15
52693: DEC
52694: ST_TO_ADDR
52695: LD_INT 5
52697: PUSH
52698: FOR_TO
52699: IFFALSE 52813
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52701: LD_ADDR_VAR 0 11
52705: PUSH
52706: LD_VAR 0 13
52710: PPUSH
52711: CALL_OW 250
52715: PPUSH
52716: LD_VAR 0 10
52720: PPUSH
52721: LD_INT 2
52723: PPUSH
52724: CALL_OW 272
52728: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52729: LD_ADDR_VAR 0 12
52733: PUSH
52734: LD_VAR 0 13
52738: PPUSH
52739: CALL_OW 251
52743: PPUSH
52744: LD_VAR 0 10
52748: PPUSH
52749: LD_INT 2
52751: PPUSH
52752: CALL_OW 273
52756: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52757: LD_VAR 0 11
52761: PPUSH
52762: LD_VAR 0 12
52766: PPUSH
52767: CALL_OW 488
52771: PUSH
52772: LD_VAR 0 11
52776: PPUSH
52777: LD_VAR 0 12
52781: PPUSH
52782: CALL_OW 428
52786: NOT
52787: AND
52788: IFFALSE 52811
// begin ComMoveXY ( tmp , _x , _y ) ;
52790: LD_VAR 0 13
52794: PPUSH
52795: LD_VAR 0 11
52799: PPUSH
52800: LD_VAR 0 12
52804: PPUSH
52805: CALL_OW 111
// break ;
52809: GO 52813
// end ; end ;
52811: GO 52698
52813: POP
52814: POP
// end ; end ;
52815: GO 52140
52817: POP
52818: POP
// end ;
52819: LD_VAR 0 8
52823: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52824: LD_INT 0
52826: PPUSH
// result := true ;
52827: LD_ADDR_VAR 0 3
52831: PUSH
52832: LD_INT 1
52834: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52835: LD_VAR 0 2
52839: PUSH
52840: LD_INT 24
52842: DOUBLE
52843: EQUAL
52844: IFTRUE 52854
52846: LD_INT 33
52848: DOUBLE
52849: EQUAL
52850: IFTRUE 52854
52852: GO 52879
52854: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52855: LD_ADDR_VAR 0 3
52859: PUSH
52860: LD_INT 32
52862: PPUSH
52863: LD_VAR 0 1
52867: PPUSH
52868: CALL_OW 321
52872: PUSH
52873: LD_INT 2
52875: EQUAL
52876: ST_TO_ADDR
52877: GO 53195
52879: LD_INT 20
52881: DOUBLE
52882: EQUAL
52883: IFTRUE 52887
52885: GO 52912
52887: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52888: LD_ADDR_VAR 0 3
52892: PUSH
52893: LD_INT 6
52895: PPUSH
52896: LD_VAR 0 1
52900: PPUSH
52901: CALL_OW 321
52905: PUSH
52906: LD_INT 2
52908: EQUAL
52909: ST_TO_ADDR
52910: GO 53195
52912: LD_INT 22
52914: DOUBLE
52915: EQUAL
52916: IFTRUE 52926
52918: LD_INT 36
52920: DOUBLE
52921: EQUAL
52922: IFTRUE 52926
52924: GO 52951
52926: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52927: LD_ADDR_VAR 0 3
52931: PUSH
52932: LD_INT 15
52934: PPUSH
52935: LD_VAR 0 1
52939: PPUSH
52940: CALL_OW 321
52944: PUSH
52945: LD_INT 2
52947: EQUAL
52948: ST_TO_ADDR
52949: GO 53195
52951: LD_INT 30
52953: DOUBLE
52954: EQUAL
52955: IFTRUE 52959
52957: GO 52984
52959: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52960: LD_ADDR_VAR 0 3
52964: PUSH
52965: LD_INT 20
52967: PPUSH
52968: LD_VAR 0 1
52972: PPUSH
52973: CALL_OW 321
52977: PUSH
52978: LD_INT 2
52980: EQUAL
52981: ST_TO_ADDR
52982: GO 53195
52984: LD_INT 28
52986: DOUBLE
52987: EQUAL
52988: IFTRUE 52998
52990: LD_INT 21
52992: DOUBLE
52993: EQUAL
52994: IFTRUE 52998
52996: GO 53023
52998: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52999: LD_ADDR_VAR 0 3
53003: PUSH
53004: LD_INT 21
53006: PPUSH
53007: LD_VAR 0 1
53011: PPUSH
53012: CALL_OW 321
53016: PUSH
53017: LD_INT 2
53019: EQUAL
53020: ST_TO_ADDR
53021: GO 53195
53023: LD_INT 16
53025: DOUBLE
53026: EQUAL
53027: IFTRUE 53031
53029: GO 53056
53031: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
53032: LD_ADDR_VAR 0 3
53036: PUSH
53037: LD_INT 84
53039: PPUSH
53040: LD_VAR 0 1
53044: PPUSH
53045: CALL_OW 321
53049: PUSH
53050: LD_INT 2
53052: EQUAL
53053: ST_TO_ADDR
53054: GO 53195
53056: LD_INT 19
53058: DOUBLE
53059: EQUAL
53060: IFTRUE 53070
53062: LD_INT 23
53064: DOUBLE
53065: EQUAL
53066: IFTRUE 53070
53068: GO 53095
53070: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
53071: LD_ADDR_VAR 0 3
53075: PUSH
53076: LD_INT 83
53078: PPUSH
53079: LD_VAR 0 1
53083: PPUSH
53084: CALL_OW 321
53088: PUSH
53089: LD_INT 2
53091: EQUAL
53092: ST_TO_ADDR
53093: GO 53195
53095: LD_INT 17
53097: DOUBLE
53098: EQUAL
53099: IFTRUE 53103
53101: GO 53128
53103: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
53104: LD_ADDR_VAR 0 3
53108: PUSH
53109: LD_INT 39
53111: PPUSH
53112: LD_VAR 0 1
53116: PPUSH
53117: CALL_OW 321
53121: PUSH
53122: LD_INT 2
53124: EQUAL
53125: ST_TO_ADDR
53126: GO 53195
53128: LD_INT 18
53130: DOUBLE
53131: EQUAL
53132: IFTRUE 53136
53134: GO 53161
53136: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
53137: LD_ADDR_VAR 0 3
53141: PUSH
53142: LD_INT 40
53144: PPUSH
53145: LD_VAR 0 1
53149: PPUSH
53150: CALL_OW 321
53154: PUSH
53155: LD_INT 2
53157: EQUAL
53158: ST_TO_ADDR
53159: GO 53195
53161: LD_INT 27
53163: DOUBLE
53164: EQUAL
53165: IFTRUE 53169
53167: GO 53194
53169: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
53170: LD_ADDR_VAR 0 3
53174: PUSH
53175: LD_INT 35
53177: PPUSH
53178: LD_VAR 0 1
53182: PPUSH
53183: CALL_OW 321
53187: PUSH
53188: LD_INT 2
53190: EQUAL
53191: ST_TO_ADDR
53192: GO 53195
53194: POP
// end ;
53195: LD_VAR 0 3
53199: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
53200: LD_INT 0
53202: PPUSH
53203: PPUSH
53204: PPUSH
53205: PPUSH
53206: PPUSH
53207: PPUSH
53208: PPUSH
53209: PPUSH
53210: PPUSH
53211: PPUSH
53212: PPUSH
// result := false ;
53213: LD_ADDR_VAR 0 6
53217: PUSH
53218: LD_INT 0
53220: ST_TO_ADDR
// if btype = b_depot then
53221: LD_VAR 0 2
53225: PUSH
53226: LD_INT 0
53228: EQUAL
53229: IFFALSE 53241
// begin result := true ;
53231: LD_ADDR_VAR 0 6
53235: PUSH
53236: LD_INT 1
53238: ST_TO_ADDR
// exit ;
53239: GO 54067
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
53241: LD_VAR 0 1
53245: NOT
53246: PUSH
53247: LD_VAR 0 1
53251: PPUSH
53252: CALL_OW 266
53256: PUSH
53257: LD_INT 0
53259: PUSH
53260: LD_INT 1
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: IN
53267: NOT
53268: OR
53269: PUSH
53270: LD_VAR 0 2
53274: NOT
53275: OR
53276: PUSH
53277: LD_VAR 0 5
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: LD_INT 1
53287: PUSH
53288: LD_INT 2
53290: PUSH
53291: LD_INT 3
53293: PUSH
53294: LD_INT 4
53296: PUSH
53297: LD_INT 5
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: IN
53308: NOT
53309: OR
53310: PUSH
53311: LD_VAR 0 3
53315: PPUSH
53316: LD_VAR 0 4
53320: PPUSH
53321: CALL_OW 488
53325: NOT
53326: OR
53327: IFFALSE 53331
// exit ;
53329: GO 54067
// side := GetSide ( depot ) ;
53331: LD_ADDR_VAR 0 9
53335: PUSH
53336: LD_VAR 0 1
53340: PPUSH
53341: CALL_OW 255
53345: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
53346: LD_VAR 0 9
53350: PPUSH
53351: LD_VAR 0 2
53355: PPUSH
53356: CALL 52824 0 2
53360: NOT
53361: IFFALSE 53365
// exit ;
53363: GO 54067
// pom := GetBase ( depot ) ;
53365: LD_ADDR_VAR 0 10
53369: PUSH
53370: LD_VAR 0 1
53374: PPUSH
53375: CALL_OW 274
53379: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53380: LD_ADDR_VAR 0 11
53384: PUSH
53385: LD_VAR 0 2
53389: PPUSH
53390: LD_VAR 0 1
53394: PPUSH
53395: CALL_OW 248
53399: PPUSH
53400: CALL_OW 450
53404: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53405: LD_VAR 0 10
53409: PPUSH
53410: LD_INT 1
53412: PPUSH
53413: CALL_OW 275
53417: PUSH
53418: LD_VAR 0 11
53422: PUSH
53423: LD_INT 1
53425: ARRAY
53426: GREATEREQUAL
53427: PUSH
53428: LD_VAR 0 10
53432: PPUSH
53433: LD_INT 2
53435: PPUSH
53436: CALL_OW 275
53440: PUSH
53441: LD_VAR 0 11
53445: PUSH
53446: LD_INT 2
53448: ARRAY
53449: GREATEREQUAL
53450: AND
53451: PUSH
53452: LD_VAR 0 10
53456: PPUSH
53457: LD_INT 3
53459: PPUSH
53460: CALL_OW 275
53464: PUSH
53465: LD_VAR 0 11
53469: PUSH
53470: LD_INT 3
53472: ARRAY
53473: GREATEREQUAL
53474: AND
53475: NOT
53476: IFFALSE 53480
// exit ;
53478: GO 54067
// if GetBType ( depot ) = b_depot then
53480: LD_VAR 0 1
53484: PPUSH
53485: CALL_OW 266
53489: PUSH
53490: LD_INT 0
53492: EQUAL
53493: IFFALSE 53505
// dist := 28 else
53495: LD_ADDR_VAR 0 14
53499: PUSH
53500: LD_INT 28
53502: ST_TO_ADDR
53503: GO 53513
// dist := 36 ;
53505: LD_ADDR_VAR 0 14
53509: PUSH
53510: LD_INT 36
53512: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53513: LD_VAR 0 1
53517: PPUSH
53518: LD_VAR 0 3
53522: PPUSH
53523: LD_VAR 0 4
53527: PPUSH
53528: CALL_OW 297
53532: PUSH
53533: LD_VAR 0 14
53537: GREATER
53538: IFFALSE 53542
// exit ;
53540: GO 54067
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53542: LD_ADDR_VAR 0 12
53546: PUSH
53547: LD_VAR 0 2
53551: PPUSH
53552: LD_VAR 0 3
53556: PPUSH
53557: LD_VAR 0 4
53561: PPUSH
53562: LD_VAR 0 5
53566: PPUSH
53567: LD_VAR 0 1
53571: PPUSH
53572: CALL_OW 248
53576: PPUSH
53577: LD_INT 0
53579: PPUSH
53580: CALL 54072 0 6
53584: ST_TO_ADDR
// if not hexes then
53585: LD_VAR 0 12
53589: NOT
53590: IFFALSE 53594
// exit ;
53592: GO 54067
// hex := GetHexInfo ( x , y ) ;
53594: LD_ADDR_VAR 0 15
53598: PUSH
53599: LD_VAR 0 3
53603: PPUSH
53604: LD_VAR 0 4
53608: PPUSH
53609: CALL_OW 546
53613: ST_TO_ADDR
// if hex [ 1 ] then
53614: LD_VAR 0 15
53618: PUSH
53619: LD_INT 1
53621: ARRAY
53622: IFFALSE 53626
// exit ;
53624: GO 54067
// height := hex [ 2 ] ;
53626: LD_ADDR_VAR 0 13
53630: PUSH
53631: LD_VAR 0 15
53635: PUSH
53636: LD_INT 2
53638: ARRAY
53639: ST_TO_ADDR
// for i = 1 to hexes do
53640: LD_ADDR_VAR 0 7
53644: PUSH
53645: DOUBLE
53646: LD_INT 1
53648: DEC
53649: ST_TO_ADDR
53650: LD_VAR 0 12
53654: PUSH
53655: FOR_TO
53656: IFFALSE 53986
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53658: LD_VAR 0 12
53662: PUSH
53663: LD_VAR 0 7
53667: ARRAY
53668: PUSH
53669: LD_INT 1
53671: ARRAY
53672: PPUSH
53673: LD_VAR 0 12
53677: PUSH
53678: LD_VAR 0 7
53682: ARRAY
53683: PUSH
53684: LD_INT 2
53686: ARRAY
53687: PPUSH
53688: CALL_OW 488
53692: NOT
53693: PUSH
53694: LD_VAR 0 12
53698: PUSH
53699: LD_VAR 0 7
53703: ARRAY
53704: PUSH
53705: LD_INT 1
53707: ARRAY
53708: PPUSH
53709: LD_VAR 0 12
53713: PUSH
53714: LD_VAR 0 7
53718: ARRAY
53719: PUSH
53720: LD_INT 2
53722: ARRAY
53723: PPUSH
53724: CALL_OW 428
53728: PUSH
53729: LD_INT 0
53731: GREATER
53732: OR
53733: PUSH
53734: LD_VAR 0 12
53738: PUSH
53739: LD_VAR 0 7
53743: ARRAY
53744: PUSH
53745: LD_INT 1
53747: ARRAY
53748: PPUSH
53749: LD_VAR 0 12
53753: PUSH
53754: LD_VAR 0 7
53758: ARRAY
53759: PUSH
53760: LD_INT 2
53762: ARRAY
53763: PPUSH
53764: CALL_OW 351
53768: OR
53769: IFFALSE 53775
// exit ;
53771: POP
53772: POP
53773: GO 54067
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53775: LD_ADDR_VAR 0 8
53779: PUSH
53780: LD_VAR 0 12
53784: PUSH
53785: LD_VAR 0 7
53789: ARRAY
53790: PUSH
53791: LD_INT 1
53793: ARRAY
53794: PPUSH
53795: LD_VAR 0 12
53799: PUSH
53800: LD_VAR 0 7
53804: ARRAY
53805: PUSH
53806: LD_INT 2
53808: ARRAY
53809: PPUSH
53810: CALL_OW 546
53814: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53815: LD_VAR 0 8
53819: PUSH
53820: LD_INT 1
53822: ARRAY
53823: PUSH
53824: LD_VAR 0 8
53828: PUSH
53829: LD_INT 2
53831: ARRAY
53832: PUSH
53833: LD_VAR 0 13
53837: PUSH
53838: LD_INT 2
53840: PLUS
53841: GREATER
53842: OR
53843: PUSH
53844: LD_VAR 0 8
53848: PUSH
53849: LD_INT 2
53851: ARRAY
53852: PUSH
53853: LD_VAR 0 13
53857: PUSH
53858: LD_INT 2
53860: MINUS
53861: LESS
53862: OR
53863: PUSH
53864: LD_VAR 0 8
53868: PUSH
53869: LD_INT 3
53871: ARRAY
53872: PUSH
53873: LD_INT 0
53875: PUSH
53876: LD_INT 8
53878: PUSH
53879: LD_INT 9
53881: PUSH
53882: LD_INT 10
53884: PUSH
53885: LD_INT 11
53887: PUSH
53888: LD_INT 12
53890: PUSH
53891: LD_INT 13
53893: PUSH
53894: LD_INT 16
53896: PUSH
53897: LD_INT 17
53899: PUSH
53900: LD_INT 18
53902: PUSH
53903: LD_INT 19
53905: PUSH
53906: LD_INT 20
53908: PUSH
53909: LD_INT 21
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: IN
53927: NOT
53928: OR
53929: PUSH
53930: LD_VAR 0 8
53934: PUSH
53935: LD_INT 5
53937: ARRAY
53938: NOT
53939: OR
53940: PUSH
53941: LD_VAR 0 8
53945: PUSH
53946: LD_INT 6
53948: ARRAY
53949: PUSH
53950: LD_INT 1
53952: PUSH
53953: LD_INT 2
53955: PUSH
53956: LD_INT 7
53958: PUSH
53959: LD_INT 9
53961: PUSH
53962: LD_INT 10
53964: PUSH
53965: LD_INT 11
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: IN
53976: NOT
53977: OR
53978: IFFALSE 53984
// exit ;
53980: POP
53981: POP
53982: GO 54067
// end ;
53984: GO 53655
53986: POP
53987: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53988: LD_VAR 0 9
53992: PPUSH
53993: LD_VAR 0 3
53997: PPUSH
53998: LD_VAR 0 4
54002: PPUSH
54003: LD_INT 20
54005: PPUSH
54006: CALL 45990 0 4
54010: PUSH
54011: LD_INT 4
54013: ARRAY
54014: IFFALSE 54018
// exit ;
54016: GO 54067
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
54018: LD_VAR 0 2
54022: PUSH
54023: LD_INT 29
54025: PUSH
54026: LD_INT 30
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: IN
54033: PUSH
54034: LD_VAR 0 3
54038: PPUSH
54039: LD_VAR 0 4
54043: PPUSH
54044: LD_VAR 0 9
54048: PPUSH
54049: CALL_OW 440
54053: NOT
54054: AND
54055: IFFALSE 54059
// exit ;
54057: GO 54067
// result := true ;
54059: LD_ADDR_VAR 0 6
54063: PUSH
54064: LD_INT 1
54066: ST_TO_ADDR
// end ;
54067: LD_VAR 0 6
54071: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
54072: LD_INT 0
54074: PPUSH
54075: PPUSH
54076: PPUSH
54077: PPUSH
54078: PPUSH
54079: PPUSH
54080: PPUSH
54081: PPUSH
54082: PPUSH
54083: PPUSH
54084: PPUSH
54085: PPUSH
54086: PPUSH
54087: PPUSH
54088: PPUSH
54089: PPUSH
54090: PPUSH
54091: PPUSH
54092: PPUSH
54093: PPUSH
54094: PPUSH
54095: PPUSH
54096: PPUSH
54097: PPUSH
54098: PPUSH
54099: PPUSH
54100: PPUSH
54101: PPUSH
54102: PPUSH
54103: PPUSH
54104: PPUSH
54105: PPUSH
54106: PPUSH
54107: PPUSH
54108: PPUSH
54109: PPUSH
54110: PPUSH
54111: PPUSH
54112: PPUSH
54113: PPUSH
54114: PPUSH
54115: PPUSH
54116: PPUSH
54117: PPUSH
54118: PPUSH
54119: PPUSH
54120: PPUSH
54121: PPUSH
54122: PPUSH
54123: PPUSH
54124: PPUSH
54125: PPUSH
54126: PPUSH
54127: PPUSH
54128: PPUSH
54129: PPUSH
54130: PPUSH
54131: PPUSH
// result = [ ] ;
54132: LD_ADDR_VAR 0 7
54136: PUSH
54137: EMPTY
54138: ST_TO_ADDR
// temp_list = [ ] ;
54139: LD_ADDR_VAR 0 9
54143: PUSH
54144: EMPTY
54145: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
54146: LD_VAR 0 4
54150: PUSH
54151: LD_INT 0
54153: PUSH
54154: LD_INT 1
54156: PUSH
54157: LD_INT 2
54159: PUSH
54160: LD_INT 3
54162: PUSH
54163: LD_INT 4
54165: PUSH
54166: LD_INT 5
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: IN
54177: NOT
54178: PUSH
54179: LD_VAR 0 1
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: LD_INT 1
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: IN
54194: PUSH
54195: LD_VAR 0 5
54199: PUSH
54200: LD_INT 1
54202: PUSH
54203: LD_INT 2
54205: PUSH
54206: LD_INT 3
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: LIST
54213: IN
54214: NOT
54215: AND
54216: OR
54217: IFFALSE 54221
// exit ;
54219: GO 72612
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
54221: LD_VAR 0 1
54225: PUSH
54226: LD_INT 6
54228: PUSH
54229: LD_INT 7
54231: PUSH
54232: LD_INT 8
54234: PUSH
54235: LD_INT 13
54237: PUSH
54238: LD_INT 12
54240: PUSH
54241: LD_INT 15
54243: PUSH
54244: LD_INT 11
54246: PUSH
54247: LD_INT 14
54249: PUSH
54250: LD_INT 10
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: IN
54264: IFFALSE 54274
// btype = b_lab ;
54266: LD_ADDR_VAR 0 1
54270: PUSH
54271: LD_INT 6
54273: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54274: LD_VAR 0 6
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: LD_INT 1
54284: PUSH
54285: LD_INT 2
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: LIST
54292: IN
54293: NOT
54294: PUSH
54295: LD_VAR 0 1
54299: PUSH
54300: LD_INT 0
54302: PUSH
54303: LD_INT 1
54305: PUSH
54306: LD_INT 2
54308: PUSH
54309: LD_INT 3
54311: PUSH
54312: LD_INT 6
54314: PUSH
54315: LD_INT 36
54317: PUSH
54318: LD_INT 4
54320: PUSH
54321: LD_INT 5
54323: PUSH
54324: LD_INT 31
54326: PUSH
54327: LD_INT 32
54329: PUSH
54330: LD_INT 33
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: IN
54346: NOT
54347: PUSH
54348: LD_VAR 0 6
54352: PUSH
54353: LD_INT 1
54355: EQUAL
54356: AND
54357: OR
54358: PUSH
54359: LD_VAR 0 1
54363: PUSH
54364: LD_INT 2
54366: PUSH
54367: LD_INT 3
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: IN
54374: NOT
54375: PUSH
54376: LD_VAR 0 6
54380: PUSH
54381: LD_INT 2
54383: EQUAL
54384: AND
54385: OR
54386: IFFALSE 54396
// mode = 0 ;
54388: LD_ADDR_VAR 0 6
54392: PUSH
54393: LD_INT 0
54395: ST_TO_ADDR
// case mode of 0 :
54396: LD_VAR 0 6
54400: PUSH
54401: LD_INT 0
54403: DOUBLE
54404: EQUAL
54405: IFTRUE 54409
54407: GO 65862
54409: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54410: LD_ADDR_VAR 0 11
54414: PUSH
54415: LD_INT 0
54417: PUSH
54418: LD_INT 0
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 0
54427: PUSH
54428: LD_INT 1
54430: NEG
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 1
54438: PUSH
54439: LD_INT 0
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: LD_INT 1
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: LD_INT 1
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 1
54468: NEG
54469: PUSH
54470: LD_INT 0
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 1
54479: NEG
54480: PUSH
54481: LD_INT 1
54483: NEG
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: LD_INT 2
54495: NEG
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 0
54503: PUSH
54504: LD_INT 2
54506: NEG
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 1
54514: PUSH
54515: LD_INT 1
54517: NEG
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 1
54525: PUSH
54526: LD_INT 2
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 0
54535: PUSH
54536: LD_INT 2
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 1
54545: NEG
54546: PUSH
54547: LD_INT 1
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 1
54556: PUSH
54557: LD_INT 3
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 0
54566: PUSH
54567: LD_INT 3
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 1
54576: NEG
54577: PUSH
54578: LD_INT 2
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54603: LD_ADDR_VAR 0 12
54607: PUSH
54608: LD_INT 0
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 0
54620: PUSH
54621: LD_INT 1
54623: NEG
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 1
54631: PUSH
54632: LD_INT 0
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 1
54641: PUSH
54642: LD_INT 1
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 0
54651: PUSH
54652: LD_INT 1
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 1
54661: NEG
54662: PUSH
54663: LD_INT 0
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 1
54672: NEG
54673: PUSH
54674: LD_INT 1
54676: NEG
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 1
54684: PUSH
54685: LD_INT 1
54687: NEG
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 2
54695: PUSH
54696: LD_INT 0
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 2
54705: PUSH
54706: LD_INT 1
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 1
54715: NEG
54716: PUSH
54717: LD_INT 1
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 2
54726: NEG
54727: PUSH
54728: LD_INT 0
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 2
54737: NEG
54738: PUSH
54739: LD_INT 1
54741: NEG
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 2
54749: NEG
54750: PUSH
54751: LD_INT 1
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 3
54760: NEG
54761: PUSH
54762: LD_INT 0
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 3
54771: NEG
54772: PUSH
54773: LD_INT 1
54775: NEG
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54799: LD_ADDR_VAR 0 13
54803: PUSH
54804: LD_INT 0
54806: PUSH
54807: LD_INT 0
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 0
54816: PUSH
54817: LD_INT 1
54819: NEG
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 1
54827: PUSH
54828: LD_INT 0
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 1
54837: PUSH
54838: LD_INT 1
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 0
54847: PUSH
54848: LD_INT 1
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 1
54857: NEG
54858: PUSH
54859: LD_INT 0
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 1
54868: NEG
54869: PUSH
54870: LD_INT 1
54872: NEG
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 1
54880: NEG
54881: PUSH
54882: LD_INT 2
54884: NEG
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 2
54892: PUSH
54893: LD_INT 1
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 2
54902: PUSH
54903: LD_INT 2
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 1
54912: PUSH
54913: LD_INT 2
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 2
54922: NEG
54923: PUSH
54924: LD_INT 1
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 2
54934: NEG
54935: PUSH
54936: LD_INT 2
54938: NEG
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 2
54946: NEG
54947: PUSH
54948: LD_INT 3
54950: NEG
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 3
54958: NEG
54959: PUSH
54960: LD_INT 2
54962: NEG
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 3
54970: NEG
54971: PUSH
54972: LD_INT 3
54974: NEG
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54998: LD_ADDR_VAR 0 14
55002: PUSH
55003: LD_INT 0
55005: PUSH
55006: LD_INT 0
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 0
55015: PUSH
55016: LD_INT 1
55018: NEG
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 1
55026: PUSH
55027: LD_INT 0
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 1
55036: PUSH
55037: LD_INT 1
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 0
55046: PUSH
55047: LD_INT 1
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 1
55056: NEG
55057: PUSH
55058: LD_INT 0
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 1
55067: NEG
55068: PUSH
55069: LD_INT 1
55071: NEG
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 1
55079: NEG
55080: PUSH
55081: LD_INT 2
55083: NEG
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: LD_INT 2
55094: NEG
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 1
55102: PUSH
55103: LD_INT 1
55105: NEG
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 1
55113: PUSH
55114: LD_INT 2
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: LD_INT 2
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 1
55133: NEG
55134: PUSH
55135: LD_INT 1
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 1
55144: NEG
55145: PUSH
55146: LD_INT 3
55148: NEG
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 0
55156: PUSH
55157: LD_INT 3
55159: NEG
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 1
55167: PUSH
55168: LD_INT 2
55170: NEG
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55194: LD_ADDR_VAR 0 15
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: LD_INT 0
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 0
55211: PUSH
55212: LD_INT 1
55214: NEG
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 1
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 1
55232: PUSH
55233: LD_INT 1
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 0
55242: PUSH
55243: LD_INT 1
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 1
55252: NEG
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 1
55263: NEG
55264: PUSH
55265: LD_INT 1
55267: NEG
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 1
55275: PUSH
55276: LD_INT 1
55278: NEG
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 2
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 2
55296: PUSH
55297: LD_INT 1
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 1
55306: NEG
55307: PUSH
55308: LD_INT 1
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 2
55317: NEG
55318: PUSH
55319: LD_INT 0
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 2
55328: NEG
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 2
55340: PUSH
55341: LD_INT 1
55343: NEG
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 3
55351: PUSH
55352: LD_INT 0
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 3
55361: PUSH
55362: LD_INT 1
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55387: LD_ADDR_VAR 0 16
55391: PUSH
55392: LD_INT 0
55394: PUSH
55395: LD_INT 0
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 0
55404: PUSH
55405: LD_INT 1
55407: NEG
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 1
55415: PUSH
55416: LD_INT 0
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 1
55425: PUSH
55426: LD_INT 1
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 0
55435: PUSH
55436: LD_INT 1
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 1
55445: NEG
55446: PUSH
55447: LD_INT 0
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 1
55456: NEG
55457: PUSH
55458: LD_INT 1
55460: NEG
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 1
55468: NEG
55469: PUSH
55470: LD_INT 2
55472: NEG
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 2
55480: PUSH
55481: LD_INT 1
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 2
55490: PUSH
55491: LD_INT 2
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 1
55500: PUSH
55501: LD_INT 2
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 2
55510: NEG
55511: PUSH
55512: LD_INT 1
55514: NEG
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 2
55522: NEG
55523: PUSH
55524: LD_INT 2
55526: NEG
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 3
55534: PUSH
55535: LD_INT 2
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 3
55544: PUSH
55545: LD_INT 3
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 2
55554: PUSH
55555: LD_INT 3
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55580: LD_ADDR_VAR 0 17
55584: PUSH
55585: LD_INT 0
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 0
55597: PUSH
55598: LD_INT 1
55600: NEG
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 1
55608: PUSH
55609: LD_INT 0
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 1
55618: PUSH
55619: LD_INT 1
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 0
55628: PUSH
55629: LD_INT 1
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 1
55638: NEG
55639: PUSH
55640: LD_INT 0
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 1
55649: NEG
55650: PUSH
55651: LD_INT 1
55653: NEG
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 1
55661: NEG
55662: PUSH
55663: LD_INT 2
55665: NEG
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 0
55673: PUSH
55674: LD_INT 2
55676: NEG
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 1
55684: PUSH
55685: LD_INT 1
55687: NEG
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 2
55695: PUSH
55696: LD_INT 0
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 2
55705: PUSH
55706: LD_INT 1
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 2
55715: PUSH
55716: LD_INT 2
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 1
55725: PUSH
55726: LD_INT 2
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 0
55735: PUSH
55736: LD_INT 2
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 1
55745: NEG
55746: PUSH
55747: LD_INT 1
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 2
55756: NEG
55757: PUSH
55758: LD_INT 0
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 2
55767: NEG
55768: PUSH
55769: LD_INT 1
55771: NEG
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 2
55779: NEG
55780: PUSH
55781: LD_INT 2
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55810: LD_ADDR_VAR 0 18
55814: PUSH
55815: LD_INT 0
55817: PUSH
55818: LD_INT 0
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 0
55827: PUSH
55828: LD_INT 1
55830: NEG
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 1
55838: PUSH
55839: LD_INT 0
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 1
55848: PUSH
55849: LD_INT 1
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 0
55858: PUSH
55859: LD_INT 1
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 1
55868: NEG
55869: PUSH
55870: LD_INT 0
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 1
55879: NEG
55880: PUSH
55881: LD_INT 1
55883: NEG
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 1
55891: NEG
55892: PUSH
55893: LD_INT 2
55895: NEG
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 0
55903: PUSH
55904: LD_INT 2
55906: NEG
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 1
55914: PUSH
55915: LD_INT 1
55917: NEG
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 2
55925: PUSH
55926: LD_INT 0
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 2
55935: PUSH
55936: LD_INT 1
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 2
55945: PUSH
55946: LD_INT 2
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 1
55955: PUSH
55956: LD_INT 2
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 0
55965: PUSH
55966: LD_INT 2
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 1
55975: NEG
55976: PUSH
55977: LD_INT 1
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 2
55986: NEG
55987: PUSH
55988: LD_INT 0
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 2
55997: NEG
55998: PUSH
55999: LD_INT 1
56001: NEG
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 2
56009: NEG
56010: PUSH
56011: LD_INT 2
56013: NEG
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56040: LD_ADDR_VAR 0 19
56044: PUSH
56045: LD_INT 0
56047: PUSH
56048: LD_INT 0
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 0
56057: PUSH
56058: LD_INT 1
56060: NEG
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 1
56068: PUSH
56069: LD_INT 0
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 1
56078: PUSH
56079: LD_INT 1
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: LD_INT 1
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 1
56098: NEG
56099: PUSH
56100: LD_INT 0
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 1
56109: NEG
56110: PUSH
56111: LD_INT 1
56113: NEG
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 1
56121: NEG
56122: PUSH
56123: LD_INT 2
56125: NEG
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 0
56133: PUSH
56134: LD_INT 2
56136: NEG
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 1
56144: PUSH
56145: LD_INT 1
56147: NEG
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 2
56155: PUSH
56156: LD_INT 0
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 2
56165: PUSH
56166: LD_INT 1
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 2
56175: PUSH
56176: LD_INT 2
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 1
56185: PUSH
56186: LD_INT 2
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 0
56195: PUSH
56196: LD_INT 2
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 1
56205: NEG
56206: PUSH
56207: LD_INT 1
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 2
56216: NEG
56217: PUSH
56218: LD_INT 0
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 2
56227: NEG
56228: PUSH
56229: LD_INT 1
56231: NEG
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 2
56239: NEG
56240: PUSH
56241: LD_INT 2
56243: NEG
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56270: LD_ADDR_VAR 0 20
56274: PUSH
56275: LD_INT 0
56277: PUSH
56278: LD_INT 0
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 0
56287: PUSH
56288: LD_INT 1
56290: NEG
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 1
56298: PUSH
56299: LD_INT 0
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 1
56308: PUSH
56309: LD_INT 1
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 0
56318: PUSH
56319: LD_INT 1
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 1
56328: NEG
56329: PUSH
56330: LD_INT 0
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 1
56339: NEG
56340: PUSH
56341: LD_INT 1
56343: NEG
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 1
56351: NEG
56352: PUSH
56353: LD_INT 2
56355: NEG
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 0
56363: PUSH
56364: LD_INT 2
56366: NEG
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 1
56374: PUSH
56375: LD_INT 1
56377: NEG
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 2
56385: PUSH
56386: LD_INT 0
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 2
56395: PUSH
56396: LD_INT 1
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 2
56405: PUSH
56406: LD_INT 2
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 1
56415: PUSH
56416: LD_INT 2
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 0
56425: PUSH
56426: LD_INT 2
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 1
56435: NEG
56436: PUSH
56437: LD_INT 1
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 2
56446: NEG
56447: PUSH
56448: LD_INT 0
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 2
56457: NEG
56458: PUSH
56459: LD_INT 1
56461: NEG
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 2
56469: NEG
56470: PUSH
56471: LD_INT 2
56473: NEG
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56500: LD_ADDR_VAR 0 21
56504: PUSH
56505: LD_INT 0
56507: PUSH
56508: LD_INT 0
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 0
56517: PUSH
56518: LD_INT 1
56520: NEG
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 1
56528: PUSH
56529: LD_INT 0
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 1
56538: PUSH
56539: LD_INT 1
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 0
56548: PUSH
56549: LD_INT 1
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 1
56558: NEG
56559: PUSH
56560: LD_INT 0
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 1
56569: NEG
56570: PUSH
56571: LD_INT 1
56573: NEG
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 1
56581: NEG
56582: PUSH
56583: LD_INT 2
56585: NEG
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 0
56593: PUSH
56594: LD_INT 2
56596: NEG
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 1
56604: PUSH
56605: LD_INT 1
56607: NEG
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 2
56615: PUSH
56616: LD_INT 0
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 2
56625: PUSH
56626: LD_INT 1
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 2
56635: PUSH
56636: LD_INT 2
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 1
56645: PUSH
56646: LD_INT 2
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 0
56655: PUSH
56656: LD_INT 2
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 1
56665: NEG
56666: PUSH
56667: LD_INT 1
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 2
56676: NEG
56677: PUSH
56678: LD_INT 0
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 2
56687: NEG
56688: PUSH
56689: LD_INT 1
56691: NEG
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 2
56699: NEG
56700: PUSH
56701: LD_INT 2
56703: NEG
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56730: LD_ADDR_VAR 0 22
56734: PUSH
56735: LD_INT 0
56737: PUSH
56738: LD_INT 0
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 0
56747: PUSH
56748: LD_INT 1
56750: NEG
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 1
56758: PUSH
56759: LD_INT 0
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 1
56768: PUSH
56769: LD_INT 1
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 0
56778: PUSH
56779: LD_INT 1
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 1
56788: NEG
56789: PUSH
56790: LD_INT 0
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 1
56799: NEG
56800: PUSH
56801: LD_INT 1
56803: NEG
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 1
56811: NEG
56812: PUSH
56813: LD_INT 2
56815: NEG
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 0
56823: PUSH
56824: LD_INT 2
56826: NEG
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 1
56834: PUSH
56835: LD_INT 1
56837: NEG
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 2
56845: PUSH
56846: LD_INT 0
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 2
56855: PUSH
56856: LD_INT 1
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 2
56865: PUSH
56866: LD_INT 2
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 1
56875: PUSH
56876: LD_INT 2
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 0
56885: PUSH
56886: LD_INT 2
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 1
56895: NEG
56896: PUSH
56897: LD_INT 1
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 2
56906: NEG
56907: PUSH
56908: LD_INT 0
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 2
56917: NEG
56918: PUSH
56919: LD_INT 1
56921: NEG
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 2
56929: NEG
56930: PUSH
56931: LD_INT 2
56933: NEG
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56960: LD_ADDR_VAR 0 23
56964: PUSH
56965: LD_INT 0
56967: PUSH
56968: LD_INT 0
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 0
56977: PUSH
56978: LD_INT 1
56980: NEG
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 1
56988: PUSH
56989: LD_INT 0
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 1
56998: PUSH
56999: LD_INT 1
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 0
57008: PUSH
57009: LD_INT 1
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 1
57018: NEG
57019: PUSH
57020: LD_INT 0
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 1
57029: NEG
57030: PUSH
57031: LD_INT 1
57033: NEG
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 1
57041: NEG
57042: PUSH
57043: LD_INT 2
57045: NEG
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 0
57053: PUSH
57054: LD_INT 2
57056: NEG
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 1
57064: PUSH
57065: LD_INT 1
57067: NEG
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 2
57075: PUSH
57076: LD_INT 0
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 2
57085: PUSH
57086: LD_INT 1
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 2
57095: PUSH
57096: LD_INT 2
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 1
57105: PUSH
57106: LD_INT 2
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 0
57115: PUSH
57116: LD_INT 2
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 1
57125: NEG
57126: PUSH
57127: LD_INT 1
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 2
57136: NEG
57137: PUSH
57138: LD_INT 0
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 2
57147: NEG
57148: PUSH
57149: LD_INT 1
57151: NEG
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 2
57159: NEG
57160: PUSH
57161: LD_INT 2
57163: NEG
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 2
57171: NEG
57172: PUSH
57173: LD_INT 3
57175: NEG
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 1
57183: NEG
57184: PUSH
57185: LD_INT 3
57187: NEG
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 1
57195: PUSH
57196: LD_INT 2
57198: NEG
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 2
57206: PUSH
57207: LD_INT 1
57209: NEG
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
57240: LD_ADDR_VAR 0 24
57244: PUSH
57245: LD_INT 0
57247: PUSH
57248: LD_INT 0
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 0
57257: PUSH
57258: LD_INT 1
57260: NEG
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 1
57268: PUSH
57269: LD_INT 0
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 1
57278: PUSH
57279: LD_INT 1
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 0
57288: PUSH
57289: LD_INT 1
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 1
57298: NEG
57299: PUSH
57300: LD_INT 0
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 1
57309: NEG
57310: PUSH
57311: LD_INT 1
57313: NEG
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 1
57321: NEG
57322: PUSH
57323: LD_INT 2
57325: NEG
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 0
57333: PUSH
57334: LD_INT 2
57336: NEG
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 1
57344: PUSH
57345: LD_INT 1
57347: NEG
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 2
57355: PUSH
57356: LD_INT 0
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 2
57365: PUSH
57366: LD_INT 1
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 2
57375: PUSH
57376: LD_INT 2
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 1
57385: PUSH
57386: LD_INT 2
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 0
57395: PUSH
57396: LD_INT 2
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 1
57405: NEG
57406: PUSH
57407: LD_INT 1
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 2
57416: NEG
57417: PUSH
57418: LD_INT 0
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 2
57427: NEG
57428: PUSH
57429: LD_INT 1
57431: NEG
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 2
57439: NEG
57440: PUSH
57441: LD_INT 2
57443: NEG
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 1
57451: PUSH
57452: LD_INT 2
57454: NEG
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 2
57462: PUSH
57463: LD_INT 1
57465: NEG
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 3
57473: PUSH
57474: LD_INT 1
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 3
57483: PUSH
57484: LD_INT 2
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57516: LD_ADDR_VAR 0 25
57520: PUSH
57521: LD_INT 0
57523: PUSH
57524: LD_INT 0
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 0
57533: PUSH
57534: LD_INT 1
57536: NEG
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 1
57544: PUSH
57545: LD_INT 0
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 1
57554: PUSH
57555: LD_INT 1
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 0
57564: PUSH
57565: LD_INT 1
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 1
57574: NEG
57575: PUSH
57576: LD_INT 0
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 1
57585: NEG
57586: PUSH
57587: LD_INT 1
57589: NEG
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 1
57597: NEG
57598: PUSH
57599: LD_INT 2
57601: NEG
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 0
57609: PUSH
57610: LD_INT 2
57612: NEG
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 1
57620: PUSH
57621: LD_INT 1
57623: NEG
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 2
57631: PUSH
57632: LD_INT 0
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 2
57641: PUSH
57642: LD_INT 1
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 2
57651: PUSH
57652: LD_INT 2
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 1
57661: PUSH
57662: LD_INT 2
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 0
57671: PUSH
57672: LD_INT 2
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 1
57681: NEG
57682: PUSH
57683: LD_INT 1
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 2
57692: NEG
57693: PUSH
57694: LD_INT 0
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 2
57703: NEG
57704: PUSH
57705: LD_INT 1
57707: NEG
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 2
57715: NEG
57716: PUSH
57717: LD_INT 2
57719: NEG
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 3
57727: PUSH
57728: LD_INT 1
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 3
57737: PUSH
57738: LD_INT 2
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 2
57747: PUSH
57748: LD_INT 3
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 1
57757: PUSH
57758: LD_INT 3
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57790: LD_ADDR_VAR 0 26
57794: PUSH
57795: LD_INT 0
57797: PUSH
57798: LD_INT 0
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 0
57807: PUSH
57808: LD_INT 1
57810: NEG
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 1
57818: PUSH
57819: LD_INT 0
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 1
57828: PUSH
57829: LD_INT 1
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 0
57838: PUSH
57839: LD_INT 1
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 1
57848: NEG
57849: PUSH
57850: LD_INT 0
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 1
57859: NEG
57860: PUSH
57861: LD_INT 1
57863: NEG
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 1
57871: NEG
57872: PUSH
57873: LD_INT 2
57875: NEG
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 0
57883: PUSH
57884: LD_INT 2
57886: NEG
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 1
57894: PUSH
57895: LD_INT 1
57897: NEG
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 2
57905: PUSH
57906: LD_INT 0
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 2
57915: PUSH
57916: LD_INT 1
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 2
57925: PUSH
57926: LD_INT 2
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 1
57935: PUSH
57936: LD_INT 2
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 0
57945: PUSH
57946: LD_INT 2
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 1
57955: NEG
57956: PUSH
57957: LD_INT 1
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 2
57966: NEG
57967: PUSH
57968: LD_INT 0
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 2
57977: NEG
57978: PUSH
57979: LD_INT 1
57981: NEG
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 2
57989: NEG
57990: PUSH
57991: LD_INT 2
57993: NEG
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 2
58001: PUSH
58002: LD_INT 3
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 1
58011: PUSH
58012: LD_INT 3
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 1
58021: NEG
58022: PUSH
58023: LD_INT 2
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 2
58032: NEG
58033: PUSH
58034: LD_INT 1
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58066: LD_ADDR_VAR 0 27
58070: PUSH
58071: LD_INT 0
58073: PUSH
58074: LD_INT 0
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 0
58083: PUSH
58084: LD_INT 1
58086: NEG
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 1
58094: PUSH
58095: LD_INT 0
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 1
58104: PUSH
58105: LD_INT 1
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 0
58114: PUSH
58115: LD_INT 1
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 1
58124: NEG
58125: PUSH
58126: LD_INT 0
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 1
58135: NEG
58136: PUSH
58137: LD_INT 1
58139: NEG
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 1
58147: NEG
58148: PUSH
58149: LD_INT 2
58151: NEG
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 0
58159: PUSH
58160: LD_INT 2
58162: NEG
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 1
58170: PUSH
58171: LD_INT 1
58173: NEG
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 2
58181: PUSH
58182: LD_INT 0
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 2
58191: PUSH
58192: LD_INT 1
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 2
58201: PUSH
58202: LD_INT 2
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 1
58211: PUSH
58212: LD_INT 2
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 0
58221: PUSH
58222: LD_INT 2
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 1
58231: NEG
58232: PUSH
58233: LD_INT 1
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 2
58242: NEG
58243: PUSH
58244: LD_INT 0
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 2
58253: NEG
58254: PUSH
58255: LD_INT 1
58257: NEG
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 2
58265: NEG
58266: PUSH
58267: LD_INT 2
58269: NEG
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 1
58277: NEG
58278: PUSH
58279: LD_INT 2
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 2
58288: NEG
58289: PUSH
58290: LD_INT 1
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 3
58299: NEG
58300: PUSH
58301: LD_INT 1
58303: NEG
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 3
58311: NEG
58312: PUSH
58313: LD_INT 2
58315: NEG
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58346: LD_ADDR_VAR 0 28
58350: PUSH
58351: LD_INT 0
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 0
58363: PUSH
58364: LD_INT 1
58366: NEG
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 1
58374: PUSH
58375: LD_INT 0
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 1
58384: PUSH
58385: LD_INT 1
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 0
58394: PUSH
58395: LD_INT 1
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 1
58404: NEG
58405: PUSH
58406: LD_INT 0
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 1
58415: NEG
58416: PUSH
58417: LD_INT 1
58419: NEG
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 1
58427: NEG
58428: PUSH
58429: LD_INT 2
58431: NEG
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 0
58439: PUSH
58440: LD_INT 2
58442: NEG
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 1
58450: PUSH
58451: LD_INT 1
58453: NEG
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 2
58461: PUSH
58462: LD_INT 0
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 2
58471: PUSH
58472: LD_INT 1
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 2
58481: PUSH
58482: LD_INT 2
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 1
58491: PUSH
58492: LD_INT 2
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 0
58501: PUSH
58502: LD_INT 2
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 1
58511: NEG
58512: PUSH
58513: LD_INT 1
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 2
58522: NEG
58523: PUSH
58524: LD_INT 0
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 2
58533: NEG
58534: PUSH
58535: LD_INT 1
58537: NEG
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 2
58545: NEG
58546: PUSH
58547: LD_INT 2
58549: NEG
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 2
58557: NEG
58558: PUSH
58559: LD_INT 3
58561: NEG
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 1
58569: NEG
58570: PUSH
58571: LD_INT 3
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 3
58581: NEG
58582: PUSH
58583: LD_INT 1
58585: NEG
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 3
58593: NEG
58594: PUSH
58595: LD_INT 2
58597: NEG
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58628: LD_ADDR_VAR 0 29
58632: PUSH
58633: LD_INT 0
58635: PUSH
58636: LD_INT 0
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 0
58645: PUSH
58646: LD_INT 1
58648: NEG
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 1
58656: PUSH
58657: LD_INT 0
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 1
58666: PUSH
58667: LD_INT 1
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 0
58676: PUSH
58677: LD_INT 1
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 1
58686: NEG
58687: PUSH
58688: LD_INT 0
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 1
58697: NEG
58698: PUSH
58699: LD_INT 1
58701: NEG
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 1
58709: NEG
58710: PUSH
58711: LD_INT 2
58713: NEG
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 0
58721: PUSH
58722: LD_INT 2
58724: NEG
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 1
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 2
58743: PUSH
58744: LD_INT 0
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 2
58753: PUSH
58754: LD_INT 1
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 1
58763: PUSH
58764: LD_INT 2
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 0
58773: PUSH
58774: LD_INT 2
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 1
58783: NEG
58784: PUSH
58785: LD_INT 1
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 2
58794: NEG
58795: PUSH
58796: LD_INT 1
58798: NEG
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 2
58806: NEG
58807: PUSH
58808: LD_INT 2
58810: NEG
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 2
58818: NEG
58819: PUSH
58820: LD_INT 3
58822: NEG
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 2
58830: PUSH
58831: LD_INT 1
58833: NEG
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 3
58841: PUSH
58842: LD_INT 1
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 1
58851: PUSH
58852: LD_INT 3
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 1
58861: NEG
58862: PUSH
58863: LD_INT 2
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 3
58872: NEG
58873: PUSH
58874: LD_INT 2
58876: NEG
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58907: LD_ADDR_VAR 0 30
58911: PUSH
58912: LD_INT 0
58914: PUSH
58915: LD_INT 0
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 0
58924: PUSH
58925: LD_INT 1
58927: NEG
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 1
58935: PUSH
58936: LD_INT 0
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 1
58945: PUSH
58946: LD_INT 1
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 0
58955: PUSH
58956: LD_INT 1
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 1
58965: NEG
58966: PUSH
58967: LD_INT 0
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 1
58976: NEG
58977: PUSH
58978: LD_INT 1
58980: NEG
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 1
58988: NEG
58989: PUSH
58990: LD_INT 2
58992: NEG
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 0
59000: PUSH
59001: LD_INT 2
59003: NEG
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 1
59011: PUSH
59012: LD_INT 1
59014: NEG
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 2
59022: PUSH
59023: LD_INT 0
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 2
59032: PUSH
59033: LD_INT 1
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 2
59042: PUSH
59043: LD_INT 2
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 1
59052: PUSH
59053: LD_INT 2
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 1
59062: NEG
59063: PUSH
59064: LD_INT 1
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 2
59073: NEG
59074: PUSH
59075: LD_INT 0
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 2
59084: NEG
59085: PUSH
59086: LD_INT 1
59088: NEG
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 1
59096: NEG
59097: PUSH
59098: LD_INT 3
59100: NEG
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 1
59108: PUSH
59109: LD_INT 2
59111: NEG
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 3
59119: PUSH
59120: LD_INT 2
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 2
59129: PUSH
59130: LD_INT 3
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 2
59139: NEG
59140: PUSH
59141: LD_INT 1
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 3
59150: NEG
59151: PUSH
59152: LD_INT 1
59154: NEG
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59185: LD_ADDR_VAR 0 31
59189: PUSH
59190: LD_INT 0
59192: PUSH
59193: LD_INT 0
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 0
59202: PUSH
59203: LD_INT 1
59205: NEG
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 1
59213: PUSH
59214: LD_INT 0
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 1
59223: PUSH
59224: LD_INT 1
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 0
59233: PUSH
59234: LD_INT 1
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 1
59243: NEG
59244: PUSH
59245: LD_INT 0
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 1
59254: NEG
59255: PUSH
59256: LD_INT 1
59258: NEG
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 1
59266: NEG
59267: PUSH
59268: LD_INT 2
59270: NEG
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 1
59278: PUSH
59279: LD_INT 1
59281: NEG
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 2
59289: PUSH
59290: LD_INT 0
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 2
59299: PUSH
59300: LD_INT 1
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 2
59309: PUSH
59310: LD_INT 2
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 1
59319: PUSH
59320: LD_INT 2
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 0
59329: PUSH
59330: LD_INT 2
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 1
59339: NEG
59340: PUSH
59341: LD_INT 1
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 2
59350: NEG
59351: PUSH
59352: LD_INT 1
59354: NEG
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 2
59362: NEG
59363: PUSH
59364: LD_INT 2
59366: NEG
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 2
59374: NEG
59375: PUSH
59376: LD_INT 3
59378: NEG
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 2
59386: PUSH
59387: LD_INT 1
59389: NEG
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 3
59397: PUSH
59398: LD_INT 1
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 1
59407: PUSH
59408: LD_INT 3
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 1
59417: NEG
59418: PUSH
59419: LD_INT 2
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 3
59428: NEG
59429: PUSH
59430: LD_INT 2
59432: NEG
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: LIST
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: LIST
59458: LIST
59459: LIST
59460: LIST
59461: LIST
59462: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59463: LD_ADDR_VAR 0 32
59467: PUSH
59468: LD_INT 0
59470: PUSH
59471: LD_INT 0
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 0
59480: PUSH
59481: LD_INT 1
59483: NEG
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 1
59491: PUSH
59492: LD_INT 0
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 1
59501: PUSH
59502: LD_INT 1
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 0
59511: PUSH
59512: LD_INT 1
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 1
59521: NEG
59522: PUSH
59523: LD_INT 0
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 1
59532: NEG
59533: PUSH
59534: LD_INT 1
59536: NEG
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 1
59544: NEG
59545: PUSH
59546: LD_INT 2
59548: NEG
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 0
59556: PUSH
59557: LD_INT 2
59559: NEG
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 1
59567: PUSH
59568: LD_INT 1
59570: NEG
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 2
59578: PUSH
59579: LD_INT 1
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 2
59588: PUSH
59589: LD_INT 2
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 1
59598: PUSH
59599: LD_INT 2
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 0
59608: PUSH
59609: LD_INT 2
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 1
59618: NEG
59619: PUSH
59620: LD_INT 1
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 2
59629: NEG
59630: PUSH
59631: LD_INT 0
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 2
59640: NEG
59641: PUSH
59642: LD_INT 1
59644: NEG
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 1
59652: NEG
59653: PUSH
59654: LD_INT 3
59656: NEG
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 1
59664: PUSH
59665: LD_INT 2
59667: NEG
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 3
59675: PUSH
59676: LD_INT 2
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 2
59685: PUSH
59686: LD_INT 3
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 2
59695: NEG
59696: PUSH
59697: LD_INT 1
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 3
59706: NEG
59707: PUSH
59708: LD_INT 1
59710: NEG
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59741: LD_ADDR_VAR 0 33
59745: PUSH
59746: LD_INT 0
59748: PUSH
59749: LD_INT 0
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 0
59758: PUSH
59759: LD_INT 1
59761: NEG
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 1
59769: PUSH
59770: LD_INT 0
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 1
59779: PUSH
59780: LD_INT 1
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 0
59789: PUSH
59790: LD_INT 1
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 1
59799: NEG
59800: PUSH
59801: LD_INT 0
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 1
59810: NEG
59811: PUSH
59812: LD_INT 1
59814: NEG
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 1
59822: NEG
59823: PUSH
59824: LD_INT 2
59826: NEG
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 1
59834: PUSH
59835: LD_INT 1
59837: NEG
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 2
59845: PUSH
59846: LD_INT 0
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 2
59855: PUSH
59856: LD_INT 1
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 1
59865: PUSH
59866: LD_INT 2
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 0
59875: PUSH
59876: LD_INT 2
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 1
59885: NEG
59886: PUSH
59887: LD_INT 1
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 2
59896: NEG
59897: PUSH
59898: LD_INT 0
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 2
59907: NEG
59908: PUSH
59909: LD_INT 1
59911: NEG
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 2
59919: NEG
59920: PUSH
59921: LD_INT 2
59923: NEG
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 2
59931: NEG
59932: PUSH
59933: LD_INT 3
59935: NEG
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 2
59943: PUSH
59944: LD_INT 1
59946: NEG
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 3
59954: PUSH
59955: LD_INT 1
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 1
59964: PUSH
59965: LD_INT 3
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 1
59974: NEG
59975: PUSH
59976: LD_INT 2
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 3
59985: NEG
59986: PUSH
59987: LD_INT 2
59989: NEG
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60020: LD_ADDR_VAR 0 34
60024: PUSH
60025: LD_INT 0
60027: PUSH
60028: LD_INT 0
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 0
60037: PUSH
60038: LD_INT 1
60040: NEG
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 1
60048: PUSH
60049: LD_INT 0
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 1
60058: PUSH
60059: LD_INT 1
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 0
60068: PUSH
60069: LD_INT 1
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 1
60078: NEG
60079: PUSH
60080: LD_INT 0
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 1
60089: NEG
60090: PUSH
60091: LD_INT 1
60093: NEG
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 1
60101: NEG
60102: PUSH
60103: LD_INT 2
60105: NEG
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 0
60113: PUSH
60114: LD_INT 2
60116: NEG
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 1
60124: PUSH
60125: LD_INT 1
60127: NEG
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 2
60135: PUSH
60136: LD_INT 1
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 2
60145: PUSH
60146: LD_INT 2
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 1
60155: PUSH
60156: LD_INT 2
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 1
60165: NEG
60166: PUSH
60167: LD_INT 1
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 2
60176: NEG
60177: PUSH
60178: LD_INT 0
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 2
60187: NEG
60188: PUSH
60189: LD_INT 1
60191: NEG
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 2
60199: NEG
60200: PUSH
60201: LD_INT 2
60203: NEG
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 1
60211: NEG
60212: PUSH
60213: LD_INT 3
60215: NEG
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 1
60223: PUSH
60224: LD_INT 2
60226: NEG
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 3
60234: PUSH
60235: LD_INT 2
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 2
60244: PUSH
60245: LD_INT 3
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 2
60254: NEG
60255: PUSH
60256: LD_INT 1
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 3
60265: NEG
60266: PUSH
60267: LD_INT 1
60269: NEG
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60300: LD_ADDR_VAR 0 35
60304: PUSH
60305: LD_INT 0
60307: PUSH
60308: LD_INT 0
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 0
60317: PUSH
60318: LD_INT 1
60320: NEG
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 1
60328: PUSH
60329: LD_INT 0
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 1
60338: PUSH
60339: LD_INT 1
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 0
60348: PUSH
60349: LD_INT 1
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 1
60358: NEG
60359: PUSH
60360: LD_INT 0
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 1
60369: NEG
60370: PUSH
60371: LD_INT 1
60373: NEG
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 2
60381: PUSH
60382: LD_INT 1
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 2
60391: NEG
60392: PUSH
60393: LD_INT 1
60395: NEG
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60412: LD_ADDR_VAR 0 36
60416: PUSH
60417: LD_INT 0
60419: PUSH
60420: LD_INT 0
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 0
60429: PUSH
60430: LD_INT 1
60432: NEG
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 1
60440: PUSH
60441: LD_INT 0
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 1
60450: PUSH
60451: LD_INT 1
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 0
60460: PUSH
60461: LD_INT 1
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 1
60470: NEG
60471: PUSH
60472: LD_INT 0
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 1
60481: NEG
60482: PUSH
60483: LD_INT 1
60485: NEG
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 1
60493: NEG
60494: PUSH
60495: LD_INT 2
60497: NEG
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 1
60505: PUSH
60506: LD_INT 2
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60524: LD_ADDR_VAR 0 37
60528: PUSH
60529: LD_INT 0
60531: PUSH
60532: LD_INT 0
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 0
60541: PUSH
60542: LD_INT 1
60544: NEG
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 1
60552: PUSH
60553: LD_INT 0
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 1
60562: PUSH
60563: LD_INT 1
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 0
60572: PUSH
60573: LD_INT 1
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 1
60582: NEG
60583: PUSH
60584: LD_INT 0
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 1
60593: NEG
60594: PUSH
60595: LD_INT 1
60597: NEG
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 1
60605: PUSH
60606: LD_INT 1
60608: NEG
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 1
60616: NEG
60617: PUSH
60618: LD_INT 1
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60636: LD_ADDR_VAR 0 38
60640: PUSH
60641: LD_INT 0
60643: PUSH
60644: LD_INT 0
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 0
60653: PUSH
60654: LD_INT 1
60656: NEG
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 1
60664: PUSH
60665: LD_INT 0
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 1
60674: PUSH
60675: LD_INT 1
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 0
60684: PUSH
60685: LD_INT 1
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 1
60694: NEG
60695: PUSH
60696: LD_INT 0
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 1
60705: NEG
60706: PUSH
60707: LD_INT 1
60709: NEG
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 2
60717: PUSH
60718: LD_INT 1
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 2
60727: NEG
60728: PUSH
60729: LD_INT 1
60731: NEG
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60748: LD_ADDR_VAR 0 39
60752: PUSH
60753: LD_INT 0
60755: PUSH
60756: LD_INT 0
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 0
60765: PUSH
60766: LD_INT 1
60768: NEG
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 1
60776: PUSH
60777: LD_INT 0
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 1
60786: PUSH
60787: LD_INT 1
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 0
60796: PUSH
60797: LD_INT 1
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_INT 1
60806: NEG
60807: PUSH
60808: LD_INT 0
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 1
60817: NEG
60818: PUSH
60819: LD_INT 1
60821: NEG
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 1
60829: NEG
60830: PUSH
60831: LD_INT 2
60833: NEG
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 1
60841: PUSH
60842: LD_INT 2
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60860: LD_ADDR_VAR 0 40
60864: PUSH
60865: LD_INT 0
60867: PUSH
60868: LD_INT 0
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 0
60877: PUSH
60878: LD_INT 1
60880: NEG
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 1
60888: PUSH
60889: LD_INT 0
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 1
60898: PUSH
60899: LD_INT 1
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 0
60908: PUSH
60909: LD_INT 1
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 1
60918: NEG
60919: PUSH
60920: LD_INT 0
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 1
60929: NEG
60930: PUSH
60931: LD_INT 1
60933: NEG
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 1
60941: PUSH
60942: LD_INT 1
60944: NEG
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 1
60952: NEG
60953: PUSH
60954: LD_INT 1
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60972: LD_ADDR_VAR 0 41
60976: PUSH
60977: LD_INT 0
60979: PUSH
60980: LD_INT 0
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 0
60989: PUSH
60990: LD_INT 1
60992: NEG
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 1
61000: PUSH
61001: LD_INT 0
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 1
61010: PUSH
61011: LD_INT 1
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 0
61020: PUSH
61021: LD_INT 1
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 1
61030: NEG
61031: PUSH
61032: LD_INT 0
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 1
61041: NEG
61042: PUSH
61043: LD_INT 1
61045: NEG
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 1
61053: NEG
61054: PUSH
61055: LD_INT 2
61057: NEG
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 1
61065: PUSH
61066: LD_INT 1
61068: NEG
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 2
61076: PUSH
61077: LD_INT 0
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 2
61086: PUSH
61087: LD_INT 1
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 2
61096: PUSH
61097: LD_INT 2
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 1
61106: PUSH
61107: LD_INT 2
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 1
61116: NEG
61117: PUSH
61118: LD_INT 1
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 2
61127: NEG
61128: PUSH
61129: LD_INT 0
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 2
61138: NEG
61139: PUSH
61140: LD_INT 1
61142: NEG
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 2
61150: NEG
61151: PUSH
61152: LD_INT 2
61154: NEG
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: PUSH
61160: LD_INT 2
61162: NEG
61163: PUSH
61164: LD_INT 3
61166: NEG
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 2
61174: PUSH
61175: LD_INT 1
61177: NEG
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 3
61185: PUSH
61186: LD_INT 0
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 3
61195: PUSH
61196: LD_INT 1
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 3
61205: PUSH
61206: LD_INT 2
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 3
61215: PUSH
61216: LD_INT 3
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 2
61225: PUSH
61226: LD_INT 3
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 2
61235: NEG
61236: PUSH
61237: LD_INT 1
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: LD_INT 3
61246: NEG
61247: PUSH
61248: LD_INT 0
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 3
61257: NEG
61258: PUSH
61259: LD_INT 1
61261: NEG
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 3
61269: NEG
61270: PUSH
61271: LD_INT 2
61273: NEG
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 3
61281: NEG
61282: PUSH
61283: LD_INT 3
61285: NEG
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61322: LD_ADDR_VAR 0 42
61326: PUSH
61327: LD_INT 0
61329: PUSH
61330: LD_INT 0
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 0
61339: PUSH
61340: LD_INT 1
61342: NEG
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 1
61350: PUSH
61351: LD_INT 0
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 1
61360: PUSH
61361: LD_INT 1
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 0
61370: PUSH
61371: LD_INT 1
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 1
61380: NEG
61381: PUSH
61382: LD_INT 0
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 1
61391: NEG
61392: PUSH
61393: LD_INT 1
61395: NEG
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 1
61403: NEG
61404: PUSH
61405: LD_INT 2
61407: NEG
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 0
61415: PUSH
61416: LD_INT 2
61418: NEG
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 1
61426: PUSH
61427: LD_INT 1
61429: NEG
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 2
61437: PUSH
61438: LD_INT 1
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 2
61447: PUSH
61448: LD_INT 2
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 1
61457: PUSH
61458: LD_INT 2
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 0
61467: PUSH
61468: LD_INT 2
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 1
61477: NEG
61478: PUSH
61479: LD_INT 1
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 2
61488: NEG
61489: PUSH
61490: LD_INT 1
61492: NEG
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: LD_INT 2
61500: NEG
61501: PUSH
61502: LD_INT 2
61504: NEG
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 2
61512: NEG
61513: PUSH
61514: LD_INT 3
61516: NEG
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 1
61524: NEG
61525: PUSH
61526: LD_INT 3
61528: NEG
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: LD_INT 0
61536: PUSH
61537: LD_INT 3
61539: NEG
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: LD_INT 1
61547: PUSH
61548: LD_INT 2
61550: NEG
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 3
61558: PUSH
61559: LD_INT 2
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 3
61568: PUSH
61569: LD_INT 3
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 2
61578: PUSH
61579: LD_INT 3
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 1
61588: PUSH
61589: LD_INT 3
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 0
61598: PUSH
61599: LD_INT 3
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 1
61608: NEG
61609: PUSH
61610: LD_INT 2
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 3
61619: NEG
61620: PUSH
61621: LD_INT 2
61623: NEG
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 3
61631: NEG
61632: PUSH
61633: LD_INT 3
61635: NEG
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61672: LD_ADDR_VAR 0 43
61676: PUSH
61677: LD_INT 0
61679: PUSH
61680: LD_INT 0
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 0
61689: PUSH
61690: LD_INT 1
61692: NEG
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 1
61700: PUSH
61701: LD_INT 0
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 1
61710: PUSH
61711: LD_INT 1
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 0
61720: PUSH
61721: LD_INT 1
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 1
61730: NEG
61731: PUSH
61732: LD_INT 0
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 1
61741: NEG
61742: PUSH
61743: LD_INT 1
61745: NEG
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: LD_INT 1
61753: NEG
61754: PUSH
61755: LD_INT 2
61757: NEG
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 0
61765: PUSH
61766: LD_INT 2
61768: NEG
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 1
61776: PUSH
61777: LD_INT 1
61779: NEG
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 2
61787: PUSH
61788: LD_INT 0
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 2
61797: PUSH
61798: LD_INT 1
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 1
61807: PUSH
61808: LD_INT 2
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 0
61817: PUSH
61818: LD_INT 2
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 1
61827: NEG
61828: PUSH
61829: LD_INT 1
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 2
61838: NEG
61839: PUSH
61840: LD_INT 0
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 2
61849: NEG
61850: PUSH
61851: LD_INT 1
61853: NEG
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 1
61861: NEG
61862: PUSH
61863: LD_INT 3
61865: NEG
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 0
61873: PUSH
61874: LD_INT 3
61876: NEG
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: LD_INT 1
61884: PUSH
61885: LD_INT 2
61887: NEG
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 2
61895: PUSH
61896: LD_INT 1
61898: NEG
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 3
61906: PUSH
61907: LD_INT 0
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 3
61916: PUSH
61917: LD_INT 1
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 1
61926: PUSH
61927: LD_INT 3
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 0
61936: PUSH
61937: LD_INT 3
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 1
61946: NEG
61947: PUSH
61948: LD_INT 2
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 2
61957: NEG
61958: PUSH
61959: LD_INT 1
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_INT 3
61968: NEG
61969: PUSH
61970: LD_INT 0
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 3
61979: NEG
61980: PUSH
61981: LD_INT 1
61983: NEG
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62020: LD_ADDR_VAR 0 44
62024: PUSH
62025: LD_INT 0
62027: PUSH
62028: LD_INT 0
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 0
62037: PUSH
62038: LD_INT 1
62040: NEG
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 1
62048: PUSH
62049: LD_INT 0
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 1
62058: PUSH
62059: LD_INT 1
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 0
62068: PUSH
62069: LD_INT 1
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 1
62078: NEG
62079: PUSH
62080: LD_INT 0
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 1
62089: NEG
62090: PUSH
62091: LD_INT 1
62093: NEG
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 1
62101: NEG
62102: PUSH
62103: LD_INT 2
62105: NEG
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 1
62113: PUSH
62114: LD_INT 1
62116: NEG
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 2
62124: PUSH
62125: LD_INT 0
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 2
62134: PUSH
62135: LD_INT 1
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 2
62144: PUSH
62145: LD_INT 2
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 1
62154: PUSH
62155: LD_INT 2
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 1
62164: NEG
62165: PUSH
62166: LD_INT 1
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 2
62175: NEG
62176: PUSH
62177: LD_INT 0
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 2
62186: NEG
62187: PUSH
62188: LD_INT 1
62190: NEG
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PUSH
62196: LD_INT 2
62198: NEG
62199: PUSH
62200: LD_INT 2
62202: NEG
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: LD_INT 2
62210: NEG
62211: PUSH
62212: LD_INT 3
62214: NEG
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 2
62222: PUSH
62223: LD_INT 1
62225: NEG
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 3
62233: PUSH
62234: LD_INT 0
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 3
62243: PUSH
62244: LD_INT 1
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 3
62253: PUSH
62254: LD_INT 2
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: LD_INT 3
62263: PUSH
62264: LD_INT 3
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 2
62273: PUSH
62274: LD_INT 3
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 2
62283: NEG
62284: PUSH
62285: LD_INT 1
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 3
62294: NEG
62295: PUSH
62296: LD_INT 0
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 3
62305: NEG
62306: PUSH
62307: LD_INT 1
62309: NEG
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 3
62317: NEG
62318: PUSH
62319: LD_INT 2
62321: NEG
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: LD_INT 3
62329: NEG
62330: PUSH
62331: LD_INT 3
62333: NEG
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62370: LD_ADDR_VAR 0 45
62374: PUSH
62375: LD_INT 0
62377: PUSH
62378: LD_INT 0
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 0
62387: PUSH
62388: LD_INT 1
62390: NEG
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: LD_INT 1
62398: PUSH
62399: LD_INT 0
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 1
62408: PUSH
62409: LD_INT 1
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: LD_INT 0
62418: PUSH
62419: LD_INT 1
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_INT 1
62428: NEG
62429: PUSH
62430: LD_INT 0
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 1
62439: NEG
62440: PUSH
62441: LD_INT 1
62443: NEG
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_INT 1
62451: NEG
62452: PUSH
62453: LD_INT 2
62455: NEG
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: PUSH
62461: LD_INT 0
62463: PUSH
62464: LD_INT 2
62466: NEG
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: PUSH
62472: LD_INT 1
62474: PUSH
62475: LD_INT 1
62477: NEG
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: PUSH
62483: LD_INT 2
62485: PUSH
62486: LD_INT 1
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: LD_INT 2
62495: PUSH
62496: LD_INT 2
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: LD_INT 1
62505: PUSH
62506: LD_INT 2
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 0
62515: PUSH
62516: LD_INT 2
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: LD_INT 1
62525: NEG
62526: PUSH
62527: LD_INT 1
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: PUSH
62534: LD_INT 2
62536: NEG
62537: PUSH
62538: LD_INT 1
62540: NEG
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 2
62548: NEG
62549: PUSH
62550: LD_INT 2
62552: NEG
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: LD_INT 2
62560: NEG
62561: PUSH
62562: LD_INT 3
62564: NEG
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: LD_INT 1
62572: NEG
62573: PUSH
62574: LD_INT 3
62576: NEG
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 0
62584: PUSH
62585: LD_INT 3
62587: NEG
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 1
62595: PUSH
62596: LD_INT 2
62598: NEG
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: LD_INT 3
62606: PUSH
62607: LD_INT 2
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 3
62616: PUSH
62617: LD_INT 3
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 2
62626: PUSH
62627: LD_INT 3
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: LD_INT 1
62636: PUSH
62637: LD_INT 3
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PUSH
62644: LD_INT 0
62646: PUSH
62647: LD_INT 3
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 1
62656: NEG
62657: PUSH
62658: LD_INT 2
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 3
62667: NEG
62668: PUSH
62669: LD_INT 2
62671: NEG
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 3
62679: NEG
62680: PUSH
62681: LD_INT 3
62683: NEG
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: LIST
62712: LIST
62713: LIST
62714: LIST
62715: LIST
62716: LIST
62717: LIST
62718: LIST
62719: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62720: LD_ADDR_VAR 0 46
62724: PUSH
62725: LD_INT 0
62727: PUSH
62728: LD_INT 0
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 0
62737: PUSH
62738: LD_INT 1
62740: NEG
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 1
62748: PUSH
62749: LD_INT 0
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 1
62758: PUSH
62759: LD_INT 1
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 0
62768: PUSH
62769: LD_INT 1
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 1
62778: NEG
62779: PUSH
62780: LD_INT 0
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 1
62789: NEG
62790: PUSH
62791: LD_INT 1
62793: NEG
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: PUSH
62799: LD_INT 1
62801: NEG
62802: PUSH
62803: LD_INT 2
62805: NEG
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 0
62813: PUSH
62814: LD_INT 2
62816: NEG
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 1
62824: PUSH
62825: LD_INT 1
62827: NEG
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 2
62835: PUSH
62836: LD_INT 0
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 2
62845: PUSH
62846: LD_INT 1
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 1
62855: PUSH
62856: LD_INT 2
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 0
62865: PUSH
62866: LD_INT 2
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 1
62875: NEG
62876: PUSH
62877: LD_INT 1
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 2
62886: NEG
62887: PUSH
62888: LD_INT 0
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PUSH
62895: LD_INT 2
62897: NEG
62898: PUSH
62899: LD_INT 1
62901: NEG
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 1
62909: NEG
62910: PUSH
62911: LD_INT 3
62913: NEG
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 0
62921: PUSH
62922: LD_INT 3
62924: NEG
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 1
62932: PUSH
62933: LD_INT 2
62935: NEG
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 2
62943: PUSH
62944: LD_INT 1
62946: NEG
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: LD_INT 3
62954: PUSH
62955: LD_INT 0
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 3
62964: PUSH
62965: LD_INT 1
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 1
62974: PUSH
62975: LD_INT 3
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 0
62984: PUSH
62985: LD_INT 3
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: LD_INT 1
62994: NEG
62995: PUSH
62996: LD_INT 2
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: PUSH
63003: LD_INT 2
63005: NEG
63006: PUSH
63007: LD_INT 1
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 3
63016: NEG
63017: PUSH
63018: LD_INT 0
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 3
63027: NEG
63028: PUSH
63029: LD_INT 1
63031: NEG
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: LIST
63065: LIST
63066: LIST
63067: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63068: LD_ADDR_VAR 0 47
63072: PUSH
63073: LD_INT 0
63075: PUSH
63076: LD_INT 0
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 0
63085: PUSH
63086: LD_INT 1
63088: NEG
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 1
63096: PUSH
63097: LD_INT 0
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 1
63106: PUSH
63107: LD_INT 1
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 0
63116: PUSH
63117: LD_INT 1
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 1
63126: NEG
63127: PUSH
63128: LD_INT 0
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 1
63137: NEG
63138: PUSH
63139: LD_INT 1
63141: NEG
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 1
63149: NEG
63150: PUSH
63151: LD_INT 2
63153: NEG
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 0
63161: PUSH
63162: LD_INT 2
63164: NEG
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: LD_INT 1
63172: PUSH
63173: LD_INT 1
63175: NEG
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 2
63183: NEG
63184: PUSH
63185: LD_INT 1
63187: NEG
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: PUSH
63193: LD_INT 2
63195: NEG
63196: PUSH
63197: LD_INT 2
63199: NEG
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: LIST
63209: LIST
63210: LIST
63211: LIST
63212: LIST
63213: LIST
63214: LIST
63215: LIST
63216: LIST
63217: LIST
63218: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63219: LD_ADDR_VAR 0 48
63223: PUSH
63224: LD_INT 0
63226: PUSH
63227: LD_INT 0
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 0
63236: PUSH
63237: LD_INT 1
63239: NEG
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 1
63247: PUSH
63248: LD_INT 0
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 1
63257: PUSH
63258: LD_INT 1
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: PUSH
63265: LD_INT 0
63267: PUSH
63268: LD_INT 1
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 1
63277: NEG
63278: PUSH
63279: LD_INT 0
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 1
63288: NEG
63289: PUSH
63290: LD_INT 1
63292: NEG
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 1
63300: NEG
63301: PUSH
63302: LD_INT 2
63304: NEG
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 0
63312: PUSH
63313: LD_INT 2
63315: NEG
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 1
63323: PUSH
63324: LD_INT 1
63326: NEG
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: PUSH
63332: LD_INT 2
63334: PUSH
63335: LD_INT 0
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: PUSH
63342: LD_INT 2
63344: PUSH
63345: LD_INT 1
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63366: LD_ADDR_VAR 0 49
63370: PUSH
63371: LD_INT 0
63373: PUSH
63374: LD_INT 0
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: LD_INT 0
63383: PUSH
63384: LD_INT 1
63386: NEG
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: PUSH
63392: LD_INT 1
63394: PUSH
63395: LD_INT 0
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: LD_INT 1
63404: PUSH
63405: LD_INT 1
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: LD_INT 0
63414: PUSH
63415: LD_INT 1
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: LD_INT 1
63424: NEG
63425: PUSH
63426: LD_INT 0
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: LD_INT 1
63435: NEG
63436: PUSH
63437: LD_INT 1
63439: NEG
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 1
63447: PUSH
63448: LD_INT 1
63450: NEG
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 2
63458: PUSH
63459: LD_INT 0
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 2
63468: PUSH
63469: LD_INT 1
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 2
63478: PUSH
63479: LD_INT 2
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 1
63488: PUSH
63489: LD_INT 2
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63510: LD_ADDR_VAR 0 50
63514: PUSH
63515: LD_INT 0
63517: PUSH
63518: LD_INT 0
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 0
63527: PUSH
63528: LD_INT 1
63530: NEG
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: PUSH
63536: LD_INT 1
63538: PUSH
63539: LD_INT 0
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: LD_INT 1
63548: PUSH
63549: LD_INT 1
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: LD_INT 0
63558: PUSH
63559: LD_INT 1
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: LD_INT 1
63568: NEG
63569: PUSH
63570: LD_INT 0
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 1
63579: NEG
63580: PUSH
63581: LD_INT 1
63583: NEG
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 2
63591: PUSH
63592: LD_INT 1
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 2
63601: PUSH
63602: LD_INT 2
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 1
63611: PUSH
63612: LD_INT 2
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 0
63621: PUSH
63622: LD_INT 2
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: PUSH
63629: LD_INT 1
63631: NEG
63632: PUSH
63633: LD_INT 1
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63654: LD_ADDR_VAR 0 51
63658: PUSH
63659: LD_INT 0
63661: PUSH
63662: LD_INT 0
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: PUSH
63669: LD_INT 0
63671: PUSH
63672: LD_INT 1
63674: NEG
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: LD_INT 1
63682: PUSH
63683: LD_INT 0
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 1
63692: PUSH
63693: LD_INT 1
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PUSH
63700: LD_INT 0
63702: PUSH
63703: LD_INT 1
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 1
63712: NEG
63713: PUSH
63714: LD_INT 0
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 1
63723: NEG
63724: PUSH
63725: LD_INT 1
63727: NEG
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 1
63735: PUSH
63736: LD_INT 2
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: LD_INT 0
63745: PUSH
63746: LD_INT 2
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PUSH
63753: LD_INT 1
63755: NEG
63756: PUSH
63757: LD_INT 1
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 2
63766: NEG
63767: PUSH
63768: LD_INT 0
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 2
63777: NEG
63778: PUSH
63779: LD_INT 1
63781: NEG
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: LIST
63791: LIST
63792: LIST
63793: LIST
63794: LIST
63795: LIST
63796: LIST
63797: LIST
63798: LIST
63799: LIST
63800: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63801: LD_ADDR_VAR 0 52
63805: PUSH
63806: LD_INT 0
63808: PUSH
63809: LD_INT 0
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 0
63818: PUSH
63819: LD_INT 1
63821: NEG
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PUSH
63827: LD_INT 1
63829: PUSH
63830: LD_INT 0
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 1
63839: PUSH
63840: LD_INT 1
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 0
63849: PUSH
63850: LD_INT 1
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: LD_INT 1
63859: NEG
63860: PUSH
63861: LD_INT 0
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: PUSH
63868: LD_INT 1
63870: NEG
63871: PUSH
63872: LD_INT 1
63874: NEG
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: PUSH
63880: LD_INT 1
63882: NEG
63883: PUSH
63884: LD_INT 2
63886: NEG
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: LD_INT 1
63894: NEG
63895: PUSH
63896: LD_INT 1
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: PUSH
63903: LD_INT 2
63905: NEG
63906: PUSH
63907: LD_INT 0
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: LD_INT 2
63916: NEG
63917: PUSH
63918: LD_INT 1
63920: NEG
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: PUSH
63926: LD_INT 2
63928: NEG
63929: PUSH
63930: LD_INT 2
63932: NEG
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63952: LD_ADDR_VAR 0 53
63956: PUSH
63957: LD_INT 0
63959: PUSH
63960: LD_INT 0
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 0
63969: PUSH
63970: LD_INT 1
63972: NEG
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: PUSH
63978: LD_INT 1
63980: PUSH
63981: LD_INT 0
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 1
63990: PUSH
63991: LD_INT 1
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: PUSH
63998: LD_INT 0
64000: PUSH
64001: LD_INT 1
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PUSH
64008: LD_INT 1
64010: NEG
64011: PUSH
64012: LD_INT 0
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: LD_INT 1
64021: NEG
64022: PUSH
64023: LD_INT 1
64025: NEG
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 1
64033: NEG
64034: PUSH
64035: LD_INT 2
64037: NEG
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: PUSH
64043: LD_INT 0
64045: PUSH
64046: LD_INT 2
64048: NEG
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: LD_INT 1
64056: PUSH
64057: LD_INT 1
64059: NEG
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: LD_INT 2
64067: PUSH
64068: LD_INT 0
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: LD_INT 2
64077: PUSH
64078: LD_INT 1
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: LD_INT 2
64087: PUSH
64088: LD_INT 2
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 1
64097: PUSH
64098: LD_INT 2
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 0
64107: PUSH
64108: LD_INT 2
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: PUSH
64115: LD_INT 1
64117: NEG
64118: PUSH
64119: LD_INT 1
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 2
64128: NEG
64129: PUSH
64130: LD_INT 0
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: PUSH
64137: LD_INT 2
64139: NEG
64140: PUSH
64141: LD_INT 1
64143: NEG
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 2
64151: NEG
64152: PUSH
64153: LD_INT 2
64155: NEG
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: LIST
64178: LIST
64179: LIST
64180: LIST
64181: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64182: LD_ADDR_VAR 0 54
64186: PUSH
64187: LD_INT 0
64189: PUSH
64190: LD_INT 0
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: PUSH
64197: LD_INT 0
64199: PUSH
64200: LD_INT 1
64202: NEG
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: LD_INT 1
64210: PUSH
64211: LD_INT 0
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: LD_INT 1
64220: PUSH
64221: LD_INT 1
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: LD_INT 0
64230: PUSH
64231: LD_INT 1
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: LD_INT 1
64240: NEG
64241: PUSH
64242: LD_INT 0
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 1
64251: NEG
64252: PUSH
64253: LD_INT 1
64255: NEG
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: PUSH
64261: LD_INT 1
64263: NEG
64264: PUSH
64265: LD_INT 2
64267: NEG
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: PUSH
64273: LD_INT 0
64275: PUSH
64276: LD_INT 2
64278: NEG
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: PUSH
64284: LD_INT 1
64286: PUSH
64287: LD_INT 1
64289: NEG
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: PUSH
64295: LD_INT 2
64297: PUSH
64298: LD_INT 0
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PUSH
64305: LD_INT 2
64307: PUSH
64308: LD_INT 1
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: PUSH
64315: LD_INT 2
64317: PUSH
64318: LD_INT 2
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: LD_INT 1
64327: PUSH
64328: LD_INT 2
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: LD_INT 0
64337: PUSH
64338: LD_INT 2
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: PUSH
64345: LD_INT 1
64347: NEG
64348: PUSH
64349: LD_INT 1
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: PUSH
64356: LD_INT 2
64358: NEG
64359: PUSH
64360: LD_INT 0
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: LD_INT 2
64369: NEG
64370: PUSH
64371: LD_INT 1
64373: NEG
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 2
64381: NEG
64382: PUSH
64383: LD_INT 2
64385: NEG
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: LIST
64395: LIST
64396: LIST
64397: LIST
64398: LIST
64399: LIST
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: LIST
64406: LIST
64407: LIST
64408: LIST
64409: LIST
64410: LIST
64411: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64412: LD_ADDR_VAR 0 55
64416: PUSH
64417: LD_INT 0
64419: PUSH
64420: LD_INT 0
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 0
64429: PUSH
64430: LD_INT 1
64432: NEG
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: PUSH
64438: LD_INT 1
64440: PUSH
64441: LD_INT 0
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 1
64450: PUSH
64451: LD_INT 1
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: LD_INT 0
64460: PUSH
64461: LD_INT 1
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: PUSH
64468: LD_INT 1
64470: NEG
64471: PUSH
64472: LD_INT 0
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: LD_INT 1
64481: NEG
64482: PUSH
64483: LD_INT 1
64485: NEG
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: LD_INT 1
64493: NEG
64494: PUSH
64495: LD_INT 2
64497: NEG
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: LD_INT 0
64505: PUSH
64506: LD_INT 2
64508: NEG
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: LD_INT 1
64516: PUSH
64517: LD_INT 1
64519: NEG
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: LD_INT 2
64527: PUSH
64528: LD_INT 0
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: PUSH
64535: LD_INT 2
64537: PUSH
64538: LD_INT 1
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 2
64547: PUSH
64548: LD_INT 2
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: LD_INT 1
64557: PUSH
64558: LD_INT 2
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: LD_INT 0
64567: PUSH
64568: LD_INT 2
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: PUSH
64575: LD_INT 1
64577: NEG
64578: PUSH
64579: LD_INT 1
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PUSH
64586: LD_INT 2
64588: NEG
64589: PUSH
64590: LD_INT 0
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: LD_INT 2
64599: NEG
64600: PUSH
64601: LD_INT 1
64603: NEG
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: LD_INT 2
64611: NEG
64612: PUSH
64613: LD_INT 2
64615: NEG
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: LIST
64625: LIST
64626: LIST
64627: LIST
64628: LIST
64629: LIST
64630: LIST
64631: LIST
64632: LIST
64633: LIST
64634: LIST
64635: LIST
64636: LIST
64637: LIST
64638: LIST
64639: LIST
64640: LIST
64641: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64642: LD_ADDR_VAR 0 56
64646: PUSH
64647: LD_INT 0
64649: PUSH
64650: LD_INT 0
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: LD_INT 0
64659: PUSH
64660: LD_INT 1
64662: NEG
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: PUSH
64668: LD_INT 1
64670: PUSH
64671: LD_INT 0
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 1
64680: PUSH
64681: LD_INT 1
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: LD_INT 0
64690: PUSH
64691: LD_INT 1
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: LD_INT 1
64700: NEG
64701: PUSH
64702: LD_INT 0
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: LD_INT 1
64711: NEG
64712: PUSH
64713: LD_INT 1
64715: NEG
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: LD_INT 1
64723: NEG
64724: PUSH
64725: LD_INT 2
64727: NEG
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: PUSH
64733: LD_INT 0
64735: PUSH
64736: LD_INT 2
64738: NEG
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PUSH
64744: LD_INT 1
64746: PUSH
64747: LD_INT 1
64749: NEG
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PUSH
64755: LD_INT 2
64757: PUSH
64758: LD_INT 0
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: LD_INT 2
64767: PUSH
64768: LD_INT 1
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: LD_INT 2
64777: PUSH
64778: LD_INT 2
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 1
64787: PUSH
64788: LD_INT 2
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: PUSH
64795: LD_INT 0
64797: PUSH
64798: LD_INT 2
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: PUSH
64805: LD_INT 1
64807: NEG
64808: PUSH
64809: LD_INT 1
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PUSH
64816: LD_INT 2
64818: NEG
64819: PUSH
64820: LD_INT 0
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: PUSH
64827: LD_INT 2
64829: NEG
64830: PUSH
64831: LD_INT 1
64833: NEG
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 2
64841: NEG
64842: PUSH
64843: LD_INT 2
64845: NEG
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: LIST
64855: LIST
64856: LIST
64857: LIST
64858: LIST
64859: LIST
64860: LIST
64861: LIST
64862: LIST
64863: LIST
64864: LIST
64865: LIST
64866: LIST
64867: LIST
64868: LIST
64869: LIST
64870: LIST
64871: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64872: LD_ADDR_VAR 0 57
64876: PUSH
64877: LD_INT 0
64879: PUSH
64880: LD_INT 0
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: LD_INT 0
64889: PUSH
64890: LD_INT 1
64892: NEG
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: PUSH
64898: LD_INT 1
64900: PUSH
64901: LD_INT 0
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PUSH
64908: LD_INT 1
64910: PUSH
64911: LD_INT 1
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 0
64920: PUSH
64921: LD_INT 1
64923: PUSH
64924: EMPTY
64925: LIST
64926: LIST
64927: PUSH
64928: LD_INT 1
64930: NEG
64931: PUSH
64932: LD_INT 0
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 1
64941: NEG
64942: PUSH
64943: LD_INT 1
64945: NEG
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 1
64953: NEG
64954: PUSH
64955: LD_INT 2
64957: NEG
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: PUSH
64963: LD_INT 0
64965: PUSH
64966: LD_INT 2
64968: NEG
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: LD_INT 1
64976: PUSH
64977: LD_INT 1
64979: NEG
64980: PUSH
64981: EMPTY
64982: LIST
64983: LIST
64984: PUSH
64985: LD_INT 2
64987: PUSH
64988: LD_INT 0
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: PUSH
64995: LD_INT 2
64997: PUSH
64998: LD_INT 1
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: PUSH
65005: LD_INT 2
65007: PUSH
65008: LD_INT 2
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: LD_INT 1
65017: PUSH
65018: LD_INT 2
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: LD_INT 0
65027: PUSH
65028: LD_INT 2
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: PUSH
65035: LD_INT 1
65037: NEG
65038: PUSH
65039: LD_INT 1
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: PUSH
65046: LD_INT 2
65048: NEG
65049: PUSH
65050: LD_INT 0
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: PUSH
65057: LD_INT 2
65059: NEG
65060: PUSH
65061: LD_INT 1
65063: NEG
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: LD_INT 2
65071: NEG
65072: PUSH
65073: LD_INT 2
65075: NEG
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: LIST
65085: LIST
65086: LIST
65087: LIST
65088: LIST
65089: LIST
65090: LIST
65091: LIST
65092: LIST
65093: LIST
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: LIST
65101: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65102: LD_ADDR_VAR 0 58
65106: PUSH
65107: LD_INT 0
65109: PUSH
65110: LD_INT 0
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: PUSH
65117: LD_INT 0
65119: PUSH
65120: LD_INT 1
65122: NEG
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: LD_INT 1
65130: PUSH
65131: LD_INT 0
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_INT 1
65140: PUSH
65141: LD_INT 1
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: LD_INT 0
65150: PUSH
65151: LD_INT 1
65153: PUSH
65154: EMPTY
65155: LIST
65156: LIST
65157: PUSH
65158: LD_INT 1
65160: NEG
65161: PUSH
65162: LD_INT 0
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: PUSH
65169: LD_INT 1
65171: NEG
65172: PUSH
65173: LD_INT 1
65175: NEG
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: LD_INT 1
65183: NEG
65184: PUSH
65185: LD_INT 2
65187: NEG
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: LD_INT 0
65195: PUSH
65196: LD_INT 2
65198: NEG
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: LD_INT 1
65206: PUSH
65207: LD_INT 1
65209: NEG
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: PUSH
65215: LD_INT 2
65217: PUSH
65218: LD_INT 0
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: PUSH
65225: LD_INT 2
65227: PUSH
65228: LD_INT 1
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: PUSH
65235: LD_INT 2
65237: PUSH
65238: LD_INT 2
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 1
65247: PUSH
65248: LD_INT 2
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: LD_INT 0
65257: PUSH
65258: LD_INT 2
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: PUSH
65265: LD_INT 1
65267: NEG
65268: PUSH
65269: LD_INT 1
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: PUSH
65276: LD_INT 2
65278: NEG
65279: PUSH
65280: LD_INT 0
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: PUSH
65287: LD_INT 2
65289: NEG
65290: PUSH
65291: LD_INT 1
65293: NEG
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: PUSH
65299: LD_INT 2
65301: NEG
65302: PUSH
65303: LD_INT 2
65305: NEG
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: LIST
65317: LIST
65318: LIST
65319: LIST
65320: LIST
65321: LIST
65322: LIST
65323: LIST
65324: LIST
65325: LIST
65326: LIST
65327: LIST
65328: LIST
65329: LIST
65330: LIST
65331: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65332: LD_ADDR_VAR 0 59
65336: PUSH
65337: LD_INT 0
65339: PUSH
65340: LD_INT 0
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 0
65349: PUSH
65350: LD_INT 1
65352: NEG
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PUSH
65358: LD_INT 1
65360: PUSH
65361: LD_INT 0
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 1
65370: PUSH
65371: LD_INT 1
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: LD_INT 0
65380: PUSH
65381: LD_INT 1
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: PUSH
65388: LD_INT 1
65390: NEG
65391: PUSH
65392: LD_INT 0
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: PUSH
65399: LD_INT 1
65401: NEG
65402: PUSH
65403: LD_INT 1
65405: NEG
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: LIST
65415: LIST
65416: LIST
65417: LIST
65418: LIST
65419: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65420: LD_ADDR_VAR 0 60
65424: PUSH
65425: LD_INT 0
65427: PUSH
65428: LD_INT 0
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: LD_INT 0
65437: PUSH
65438: LD_INT 1
65440: NEG
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 1
65448: PUSH
65449: LD_INT 0
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: LD_INT 1
65458: PUSH
65459: LD_INT 1
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: PUSH
65466: LD_INT 0
65468: PUSH
65469: LD_INT 1
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: PUSH
65476: LD_INT 1
65478: NEG
65479: PUSH
65480: LD_INT 0
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: LD_INT 1
65489: NEG
65490: PUSH
65491: LD_INT 1
65493: NEG
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: LIST
65507: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65508: LD_ADDR_VAR 0 61
65512: PUSH
65513: LD_INT 0
65515: PUSH
65516: LD_INT 0
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: PUSH
65523: LD_INT 0
65525: PUSH
65526: LD_INT 1
65528: NEG
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: PUSH
65534: LD_INT 1
65536: PUSH
65537: LD_INT 0
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: PUSH
65544: LD_INT 1
65546: PUSH
65547: LD_INT 1
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: PUSH
65554: LD_INT 0
65556: PUSH
65557: LD_INT 1
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: PUSH
65564: LD_INT 1
65566: NEG
65567: PUSH
65568: LD_INT 0
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: PUSH
65575: LD_INT 1
65577: NEG
65578: PUSH
65579: LD_INT 1
65581: NEG
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65596: LD_ADDR_VAR 0 62
65600: PUSH
65601: LD_INT 0
65603: PUSH
65604: LD_INT 0
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 0
65613: PUSH
65614: LD_INT 1
65616: NEG
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: LD_INT 1
65624: PUSH
65625: LD_INT 0
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: LD_INT 1
65634: PUSH
65635: LD_INT 1
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: PUSH
65642: LD_INT 0
65644: PUSH
65645: LD_INT 1
65647: PUSH
65648: EMPTY
65649: LIST
65650: LIST
65651: PUSH
65652: LD_INT 1
65654: NEG
65655: PUSH
65656: LD_INT 0
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: PUSH
65663: LD_INT 1
65665: NEG
65666: PUSH
65667: LD_INT 1
65669: NEG
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65684: LD_ADDR_VAR 0 63
65688: PUSH
65689: LD_INT 0
65691: PUSH
65692: LD_INT 0
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: PUSH
65699: LD_INT 0
65701: PUSH
65702: LD_INT 1
65704: NEG
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: PUSH
65710: LD_INT 1
65712: PUSH
65713: LD_INT 0
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: PUSH
65720: LD_INT 1
65722: PUSH
65723: LD_INT 1
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: PUSH
65730: LD_INT 0
65732: PUSH
65733: LD_INT 1
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: LD_INT 1
65742: NEG
65743: PUSH
65744: LD_INT 0
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: PUSH
65751: LD_INT 1
65753: NEG
65754: PUSH
65755: LD_INT 1
65757: NEG
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: PUSH
65763: EMPTY
65764: LIST
65765: LIST
65766: LIST
65767: LIST
65768: LIST
65769: LIST
65770: LIST
65771: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65772: LD_ADDR_VAR 0 64
65776: PUSH
65777: LD_INT 0
65779: PUSH
65780: LD_INT 0
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: PUSH
65787: LD_INT 0
65789: PUSH
65790: LD_INT 1
65792: NEG
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: PUSH
65798: LD_INT 1
65800: PUSH
65801: LD_INT 0
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PUSH
65808: LD_INT 1
65810: PUSH
65811: LD_INT 1
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: PUSH
65818: LD_INT 0
65820: PUSH
65821: LD_INT 1
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: PUSH
65828: LD_INT 1
65830: NEG
65831: PUSH
65832: LD_INT 0
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: PUSH
65839: LD_INT 1
65841: NEG
65842: PUSH
65843: LD_INT 1
65845: NEG
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: LIST
65855: LIST
65856: LIST
65857: LIST
65858: LIST
65859: ST_TO_ADDR
// end ; 1 :
65860: GO 71757
65862: LD_INT 1
65864: DOUBLE
65865: EQUAL
65866: IFTRUE 65870
65868: GO 68493
65870: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65871: LD_ADDR_VAR 0 11
65875: PUSH
65876: LD_INT 1
65878: NEG
65879: PUSH
65880: LD_INT 3
65882: NEG
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: PUSH
65888: LD_INT 0
65890: PUSH
65891: LD_INT 3
65893: NEG
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: LD_INT 1
65901: PUSH
65902: LD_INT 2
65904: NEG
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: LIST
65914: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65915: LD_ADDR_VAR 0 12
65919: PUSH
65920: LD_INT 2
65922: PUSH
65923: LD_INT 1
65925: NEG
65926: PUSH
65927: EMPTY
65928: LIST
65929: LIST
65930: PUSH
65931: LD_INT 3
65933: PUSH
65934: LD_INT 0
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: PUSH
65941: LD_INT 3
65943: PUSH
65944: LD_INT 1
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: LIST
65955: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65956: LD_ADDR_VAR 0 13
65960: PUSH
65961: LD_INT 3
65963: PUSH
65964: LD_INT 2
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: PUSH
65971: LD_INT 3
65973: PUSH
65974: LD_INT 3
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: PUSH
65981: LD_INT 2
65983: PUSH
65984: LD_INT 3
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: LIST
65995: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65996: LD_ADDR_VAR 0 14
66000: PUSH
66001: LD_INT 1
66003: PUSH
66004: LD_INT 3
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: PUSH
66011: LD_INT 0
66013: PUSH
66014: LD_INT 3
66016: PUSH
66017: EMPTY
66018: LIST
66019: LIST
66020: PUSH
66021: LD_INT 1
66023: NEG
66024: PUSH
66025: LD_INT 2
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: LIST
66036: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66037: LD_ADDR_VAR 0 15
66041: PUSH
66042: LD_INT 2
66044: NEG
66045: PUSH
66046: LD_INT 1
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: PUSH
66053: LD_INT 3
66055: NEG
66056: PUSH
66057: LD_INT 0
66059: PUSH
66060: EMPTY
66061: LIST
66062: LIST
66063: PUSH
66064: LD_INT 3
66066: NEG
66067: PUSH
66068: LD_INT 1
66070: NEG
66071: PUSH
66072: EMPTY
66073: LIST
66074: LIST
66075: PUSH
66076: EMPTY
66077: LIST
66078: LIST
66079: LIST
66080: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66081: LD_ADDR_VAR 0 16
66085: PUSH
66086: LD_INT 2
66088: NEG
66089: PUSH
66090: LD_INT 3
66092: NEG
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: PUSH
66098: LD_INT 3
66100: NEG
66101: PUSH
66102: LD_INT 2
66104: NEG
66105: PUSH
66106: EMPTY
66107: LIST
66108: LIST
66109: PUSH
66110: LD_INT 3
66112: NEG
66113: PUSH
66114: LD_INT 3
66116: NEG
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: PUSH
66122: EMPTY
66123: LIST
66124: LIST
66125: LIST
66126: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66127: LD_ADDR_VAR 0 17
66131: PUSH
66132: LD_INT 1
66134: NEG
66135: PUSH
66136: LD_INT 3
66138: NEG
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: PUSH
66144: LD_INT 0
66146: PUSH
66147: LD_INT 3
66149: NEG
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: PUSH
66155: LD_INT 1
66157: PUSH
66158: LD_INT 2
66160: NEG
66161: PUSH
66162: EMPTY
66163: LIST
66164: LIST
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: LIST
66170: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66171: LD_ADDR_VAR 0 18
66175: PUSH
66176: LD_INT 2
66178: PUSH
66179: LD_INT 1
66181: NEG
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: PUSH
66187: LD_INT 3
66189: PUSH
66190: LD_INT 0
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: PUSH
66197: LD_INT 3
66199: PUSH
66200: LD_INT 1
66202: PUSH
66203: EMPTY
66204: LIST
66205: LIST
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: LIST
66211: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66212: LD_ADDR_VAR 0 19
66216: PUSH
66217: LD_INT 3
66219: PUSH
66220: LD_INT 2
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: PUSH
66227: LD_INT 3
66229: PUSH
66230: LD_INT 3
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: LD_INT 2
66239: PUSH
66240: LD_INT 3
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: LIST
66251: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66252: LD_ADDR_VAR 0 20
66256: PUSH
66257: LD_INT 1
66259: PUSH
66260: LD_INT 3
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: PUSH
66267: LD_INT 0
66269: PUSH
66270: LD_INT 3
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: LD_INT 1
66279: NEG
66280: PUSH
66281: LD_INT 2
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: LIST
66292: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66293: LD_ADDR_VAR 0 21
66297: PUSH
66298: LD_INT 2
66300: NEG
66301: PUSH
66302: LD_INT 1
66304: PUSH
66305: EMPTY
66306: LIST
66307: LIST
66308: PUSH
66309: LD_INT 3
66311: NEG
66312: PUSH
66313: LD_INT 0
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: PUSH
66320: LD_INT 3
66322: NEG
66323: PUSH
66324: LD_INT 1
66326: NEG
66327: PUSH
66328: EMPTY
66329: LIST
66330: LIST
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: LIST
66336: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66337: LD_ADDR_VAR 0 22
66341: PUSH
66342: LD_INT 2
66344: NEG
66345: PUSH
66346: LD_INT 3
66348: NEG
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: PUSH
66354: LD_INT 3
66356: NEG
66357: PUSH
66358: LD_INT 2
66360: NEG
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: PUSH
66366: LD_INT 3
66368: NEG
66369: PUSH
66370: LD_INT 3
66372: NEG
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: LIST
66382: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66383: LD_ADDR_VAR 0 23
66387: PUSH
66388: LD_INT 0
66390: PUSH
66391: LD_INT 3
66393: NEG
66394: PUSH
66395: EMPTY
66396: LIST
66397: LIST
66398: PUSH
66399: LD_INT 1
66401: NEG
66402: PUSH
66403: LD_INT 4
66405: NEG
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: PUSH
66411: LD_INT 1
66413: PUSH
66414: LD_INT 3
66416: NEG
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: LIST
66426: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66427: LD_ADDR_VAR 0 24
66431: PUSH
66432: LD_INT 3
66434: PUSH
66435: LD_INT 0
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: PUSH
66442: LD_INT 3
66444: PUSH
66445: LD_INT 1
66447: NEG
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: PUSH
66453: LD_INT 4
66455: PUSH
66456: LD_INT 1
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: LIST
66467: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66468: LD_ADDR_VAR 0 25
66472: PUSH
66473: LD_INT 3
66475: PUSH
66476: LD_INT 3
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: PUSH
66483: LD_INT 4
66485: PUSH
66486: LD_INT 3
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 3
66495: PUSH
66496: LD_INT 4
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: LIST
66507: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66508: LD_ADDR_VAR 0 26
66512: PUSH
66513: LD_INT 0
66515: PUSH
66516: LD_INT 3
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 1
66525: PUSH
66526: LD_INT 4
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: PUSH
66533: LD_INT 1
66535: NEG
66536: PUSH
66537: LD_INT 3
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PUSH
66544: EMPTY
66545: LIST
66546: LIST
66547: LIST
66548: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66549: LD_ADDR_VAR 0 27
66553: PUSH
66554: LD_INT 3
66556: NEG
66557: PUSH
66558: LD_INT 0
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: PUSH
66565: LD_INT 3
66567: NEG
66568: PUSH
66569: LD_INT 1
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: LD_INT 4
66578: NEG
66579: PUSH
66580: LD_INT 1
66582: NEG
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: LIST
66592: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66593: LD_ADDR_VAR 0 28
66597: PUSH
66598: LD_INT 3
66600: NEG
66601: PUSH
66602: LD_INT 3
66604: NEG
66605: PUSH
66606: EMPTY
66607: LIST
66608: LIST
66609: PUSH
66610: LD_INT 3
66612: NEG
66613: PUSH
66614: LD_INT 4
66616: NEG
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: PUSH
66622: LD_INT 4
66624: NEG
66625: PUSH
66626: LD_INT 3
66628: NEG
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: LIST
66638: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66639: LD_ADDR_VAR 0 29
66643: PUSH
66644: LD_INT 1
66646: NEG
66647: PUSH
66648: LD_INT 3
66650: NEG
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PUSH
66656: LD_INT 0
66658: PUSH
66659: LD_INT 3
66661: NEG
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: PUSH
66667: LD_INT 1
66669: PUSH
66670: LD_INT 2
66672: NEG
66673: PUSH
66674: EMPTY
66675: LIST
66676: LIST
66677: PUSH
66678: LD_INT 1
66680: NEG
66681: PUSH
66682: LD_INT 4
66684: NEG
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: PUSH
66690: LD_INT 0
66692: PUSH
66693: LD_INT 4
66695: NEG
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: LD_INT 1
66703: PUSH
66704: LD_INT 3
66706: NEG
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: PUSH
66712: LD_INT 1
66714: NEG
66715: PUSH
66716: LD_INT 5
66718: NEG
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: PUSH
66724: LD_INT 0
66726: PUSH
66727: LD_INT 5
66729: NEG
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 1
66737: PUSH
66738: LD_INT 4
66740: NEG
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 1
66748: NEG
66749: PUSH
66750: LD_INT 6
66752: NEG
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: PUSH
66758: LD_INT 0
66760: PUSH
66761: LD_INT 6
66763: NEG
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: PUSH
66769: LD_INT 1
66771: PUSH
66772: LD_INT 5
66774: NEG
66775: PUSH
66776: EMPTY
66777: LIST
66778: LIST
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: LIST
66784: LIST
66785: LIST
66786: LIST
66787: LIST
66788: LIST
66789: LIST
66790: LIST
66791: LIST
66792: LIST
66793: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66794: LD_ADDR_VAR 0 30
66798: PUSH
66799: LD_INT 2
66801: PUSH
66802: LD_INT 1
66804: NEG
66805: PUSH
66806: EMPTY
66807: LIST
66808: LIST
66809: PUSH
66810: LD_INT 3
66812: PUSH
66813: LD_INT 0
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: PUSH
66820: LD_INT 3
66822: PUSH
66823: LD_INT 1
66825: PUSH
66826: EMPTY
66827: LIST
66828: LIST
66829: PUSH
66830: LD_INT 3
66832: PUSH
66833: LD_INT 1
66835: NEG
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: LD_INT 4
66843: PUSH
66844: LD_INT 0
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: PUSH
66851: LD_INT 4
66853: PUSH
66854: LD_INT 1
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: PUSH
66861: LD_INT 4
66863: PUSH
66864: LD_INT 1
66866: NEG
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: PUSH
66872: LD_INT 5
66874: PUSH
66875: LD_INT 0
66877: PUSH
66878: EMPTY
66879: LIST
66880: LIST
66881: PUSH
66882: LD_INT 5
66884: PUSH
66885: LD_INT 1
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: PUSH
66892: LD_INT 5
66894: PUSH
66895: LD_INT 1
66897: NEG
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: PUSH
66903: LD_INT 6
66905: PUSH
66906: LD_INT 0
66908: PUSH
66909: EMPTY
66910: LIST
66911: LIST
66912: PUSH
66913: LD_INT 6
66915: PUSH
66916: LD_INT 1
66918: PUSH
66919: EMPTY
66920: LIST
66921: LIST
66922: PUSH
66923: EMPTY
66924: LIST
66925: LIST
66926: LIST
66927: LIST
66928: LIST
66929: LIST
66930: LIST
66931: LIST
66932: LIST
66933: LIST
66934: LIST
66935: LIST
66936: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66937: LD_ADDR_VAR 0 31
66941: PUSH
66942: LD_INT 3
66944: PUSH
66945: LD_INT 2
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: LD_INT 3
66954: PUSH
66955: LD_INT 3
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 2
66964: PUSH
66965: LD_INT 3
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 4
66974: PUSH
66975: LD_INT 3
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 4
66984: PUSH
66985: LD_INT 4
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: LD_INT 3
66994: PUSH
66995: LD_INT 4
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: LD_INT 5
67004: PUSH
67005: LD_INT 4
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: LD_INT 5
67014: PUSH
67015: LD_INT 5
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: PUSH
67022: LD_INT 4
67024: PUSH
67025: LD_INT 5
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PUSH
67032: LD_INT 6
67034: PUSH
67035: LD_INT 5
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: PUSH
67042: LD_INT 6
67044: PUSH
67045: LD_INT 6
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: LD_INT 5
67054: PUSH
67055: LD_INT 6
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: EMPTY
67063: LIST
67064: LIST
67065: LIST
67066: LIST
67067: LIST
67068: LIST
67069: LIST
67070: LIST
67071: LIST
67072: LIST
67073: LIST
67074: LIST
67075: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
67076: LD_ADDR_VAR 0 32
67080: PUSH
67081: LD_INT 1
67083: PUSH
67084: LD_INT 3
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: PUSH
67091: LD_INT 0
67093: PUSH
67094: LD_INT 3
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: LD_INT 1
67103: NEG
67104: PUSH
67105: LD_INT 2
67107: PUSH
67108: EMPTY
67109: LIST
67110: LIST
67111: PUSH
67112: LD_INT 1
67114: PUSH
67115: LD_INT 4
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: PUSH
67122: LD_INT 0
67124: PUSH
67125: LD_INT 4
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: LD_INT 1
67134: NEG
67135: PUSH
67136: LD_INT 3
67138: PUSH
67139: EMPTY
67140: LIST
67141: LIST
67142: PUSH
67143: LD_INT 1
67145: PUSH
67146: LD_INT 5
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: PUSH
67153: LD_INT 0
67155: PUSH
67156: LD_INT 5
67158: PUSH
67159: EMPTY
67160: LIST
67161: LIST
67162: PUSH
67163: LD_INT 1
67165: NEG
67166: PUSH
67167: LD_INT 4
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: PUSH
67174: LD_INT 1
67176: PUSH
67177: LD_INT 6
67179: PUSH
67180: EMPTY
67181: LIST
67182: LIST
67183: PUSH
67184: LD_INT 0
67186: PUSH
67187: LD_INT 6
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: PUSH
67194: LD_INT 1
67196: NEG
67197: PUSH
67198: LD_INT 5
67200: PUSH
67201: EMPTY
67202: LIST
67203: LIST
67204: PUSH
67205: EMPTY
67206: LIST
67207: LIST
67208: LIST
67209: LIST
67210: LIST
67211: LIST
67212: LIST
67213: LIST
67214: LIST
67215: LIST
67216: LIST
67217: LIST
67218: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
67219: LD_ADDR_VAR 0 33
67223: PUSH
67224: LD_INT 2
67226: NEG
67227: PUSH
67228: LD_INT 1
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: PUSH
67235: LD_INT 3
67237: NEG
67238: PUSH
67239: LD_INT 0
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PUSH
67246: LD_INT 3
67248: NEG
67249: PUSH
67250: LD_INT 1
67252: NEG
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: PUSH
67258: LD_INT 3
67260: NEG
67261: PUSH
67262: LD_INT 1
67264: PUSH
67265: EMPTY
67266: LIST
67267: LIST
67268: PUSH
67269: LD_INT 4
67271: NEG
67272: PUSH
67273: LD_INT 0
67275: PUSH
67276: EMPTY
67277: LIST
67278: LIST
67279: PUSH
67280: LD_INT 4
67282: NEG
67283: PUSH
67284: LD_INT 1
67286: NEG
67287: PUSH
67288: EMPTY
67289: LIST
67290: LIST
67291: PUSH
67292: LD_INT 4
67294: NEG
67295: PUSH
67296: LD_INT 1
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: LD_INT 5
67305: NEG
67306: PUSH
67307: LD_INT 0
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: PUSH
67314: LD_INT 5
67316: NEG
67317: PUSH
67318: LD_INT 1
67320: NEG
67321: PUSH
67322: EMPTY
67323: LIST
67324: LIST
67325: PUSH
67326: LD_INT 5
67328: NEG
67329: PUSH
67330: LD_INT 1
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: PUSH
67337: LD_INT 6
67339: NEG
67340: PUSH
67341: LD_INT 0
67343: PUSH
67344: EMPTY
67345: LIST
67346: LIST
67347: PUSH
67348: LD_INT 6
67350: NEG
67351: PUSH
67352: LD_INT 1
67354: NEG
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: LIST
67364: LIST
67365: LIST
67366: LIST
67367: LIST
67368: LIST
67369: LIST
67370: LIST
67371: LIST
67372: LIST
67373: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67374: LD_ADDR_VAR 0 34
67378: PUSH
67379: LD_INT 2
67381: NEG
67382: PUSH
67383: LD_INT 3
67385: NEG
67386: PUSH
67387: EMPTY
67388: LIST
67389: LIST
67390: PUSH
67391: LD_INT 3
67393: NEG
67394: PUSH
67395: LD_INT 2
67397: NEG
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: PUSH
67403: LD_INT 3
67405: NEG
67406: PUSH
67407: LD_INT 3
67409: NEG
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: PUSH
67415: LD_INT 3
67417: NEG
67418: PUSH
67419: LD_INT 4
67421: NEG
67422: PUSH
67423: EMPTY
67424: LIST
67425: LIST
67426: PUSH
67427: LD_INT 4
67429: NEG
67430: PUSH
67431: LD_INT 3
67433: NEG
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: LD_INT 4
67441: NEG
67442: PUSH
67443: LD_INT 4
67445: NEG
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 4
67453: NEG
67454: PUSH
67455: LD_INT 5
67457: NEG
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: PUSH
67463: LD_INT 5
67465: NEG
67466: PUSH
67467: LD_INT 4
67469: NEG
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: PUSH
67475: LD_INT 5
67477: NEG
67478: PUSH
67479: LD_INT 5
67481: NEG
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: PUSH
67487: LD_INT 5
67489: NEG
67490: PUSH
67491: LD_INT 6
67493: NEG
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: PUSH
67499: LD_INT 6
67501: NEG
67502: PUSH
67503: LD_INT 5
67505: NEG
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: PUSH
67511: LD_INT 6
67513: NEG
67514: PUSH
67515: LD_INT 6
67517: NEG
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: LIST
67527: LIST
67528: LIST
67529: LIST
67530: LIST
67531: LIST
67532: LIST
67533: LIST
67534: LIST
67535: LIST
67536: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67537: LD_ADDR_VAR 0 41
67541: PUSH
67542: LD_INT 0
67544: PUSH
67545: LD_INT 2
67547: NEG
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: PUSH
67553: LD_INT 1
67555: NEG
67556: PUSH
67557: LD_INT 3
67559: NEG
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: LD_INT 1
67567: PUSH
67568: LD_INT 2
67570: NEG
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: LIST
67580: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67581: LD_ADDR_VAR 0 42
67585: PUSH
67586: LD_INT 2
67588: PUSH
67589: LD_INT 0
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: LD_INT 2
67598: PUSH
67599: LD_INT 1
67601: NEG
67602: PUSH
67603: EMPTY
67604: LIST
67605: LIST
67606: PUSH
67607: LD_INT 3
67609: PUSH
67610: LD_INT 1
67612: PUSH
67613: EMPTY
67614: LIST
67615: LIST
67616: PUSH
67617: EMPTY
67618: LIST
67619: LIST
67620: LIST
67621: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67622: LD_ADDR_VAR 0 43
67626: PUSH
67627: LD_INT 2
67629: PUSH
67630: LD_INT 2
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: PUSH
67637: LD_INT 3
67639: PUSH
67640: LD_INT 2
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: PUSH
67647: LD_INT 2
67649: PUSH
67650: LD_INT 3
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: LIST
67661: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67662: LD_ADDR_VAR 0 44
67666: PUSH
67667: LD_INT 0
67669: PUSH
67670: LD_INT 2
67672: PUSH
67673: EMPTY
67674: LIST
67675: LIST
67676: PUSH
67677: LD_INT 1
67679: PUSH
67680: LD_INT 3
67682: PUSH
67683: EMPTY
67684: LIST
67685: LIST
67686: PUSH
67687: LD_INT 1
67689: NEG
67690: PUSH
67691: LD_INT 2
67693: PUSH
67694: EMPTY
67695: LIST
67696: LIST
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: LIST
67702: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67703: LD_ADDR_VAR 0 45
67707: PUSH
67708: LD_INT 2
67710: NEG
67711: PUSH
67712: LD_INT 0
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: PUSH
67719: LD_INT 2
67721: NEG
67722: PUSH
67723: LD_INT 1
67725: PUSH
67726: EMPTY
67727: LIST
67728: LIST
67729: PUSH
67730: LD_INT 3
67732: NEG
67733: PUSH
67734: LD_INT 1
67736: NEG
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: LIST
67746: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67747: LD_ADDR_VAR 0 46
67751: PUSH
67752: LD_INT 2
67754: NEG
67755: PUSH
67756: LD_INT 2
67758: NEG
67759: PUSH
67760: EMPTY
67761: LIST
67762: LIST
67763: PUSH
67764: LD_INT 2
67766: NEG
67767: PUSH
67768: LD_INT 3
67770: NEG
67771: PUSH
67772: EMPTY
67773: LIST
67774: LIST
67775: PUSH
67776: LD_INT 3
67778: NEG
67779: PUSH
67780: LD_INT 2
67782: NEG
67783: PUSH
67784: EMPTY
67785: LIST
67786: LIST
67787: PUSH
67788: EMPTY
67789: LIST
67790: LIST
67791: LIST
67792: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67793: LD_ADDR_VAR 0 47
67797: PUSH
67798: LD_INT 2
67800: NEG
67801: PUSH
67802: LD_INT 3
67804: NEG
67805: PUSH
67806: EMPTY
67807: LIST
67808: LIST
67809: PUSH
67810: LD_INT 1
67812: NEG
67813: PUSH
67814: LD_INT 3
67816: NEG
67817: PUSH
67818: EMPTY
67819: LIST
67820: LIST
67821: PUSH
67822: EMPTY
67823: LIST
67824: LIST
67825: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67826: LD_ADDR_VAR 0 48
67830: PUSH
67831: LD_INT 1
67833: PUSH
67834: LD_INT 2
67836: NEG
67837: PUSH
67838: EMPTY
67839: LIST
67840: LIST
67841: PUSH
67842: LD_INT 2
67844: PUSH
67845: LD_INT 1
67847: NEG
67848: PUSH
67849: EMPTY
67850: LIST
67851: LIST
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67857: LD_ADDR_VAR 0 49
67861: PUSH
67862: LD_INT 3
67864: PUSH
67865: LD_INT 1
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: PUSH
67872: LD_INT 3
67874: PUSH
67875: LD_INT 2
67877: PUSH
67878: EMPTY
67879: LIST
67880: LIST
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67886: LD_ADDR_VAR 0 50
67890: PUSH
67891: LD_INT 2
67893: PUSH
67894: LD_INT 3
67896: PUSH
67897: EMPTY
67898: LIST
67899: LIST
67900: PUSH
67901: LD_INT 1
67903: PUSH
67904: LD_INT 3
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: PUSH
67911: EMPTY
67912: LIST
67913: LIST
67914: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67915: LD_ADDR_VAR 0 51
67919: PUSH
67920: LD_INT 1
67922: NEG
67923: PUSH
67924: LD_INT 2
67926: PUSH
67927: EMPTY
67928: LIST
67929: LIST
67930: PUSH
67931: LD_INT 2
67933: NEG
67934: PUSH
67935: LD_INT 1
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67946: LD_ADDR_VAR 0 52
67950: PUSH
67951: LD_INT 3
67953: NEG
67954: PUSH
67955: LD_INT 1
67957: NEG
67958: PUSH
67959: EMPTY
67960: LIST
67961: LIST
67962: PUSH
67963: LD_INT 3
67965: NEG
67966: PUSH
67967: LD_INT 2
67969: NEG
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: PUSH
67975: EMPTY
67976: LIST
67977: LIST
67978: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67979: LD_ADDR_VAR 0 53
67983: PUSH
67984: LD_INT 1
67986: NEG
67987: PUSH
67988: LD_INT 3
67990: NEG
67991: PUSH
67992: EMPTY
67993: LIST
67994: LIST
67995: PUSH
67996: LD_INT 0
67998: PUSH
67999: LD_INT 3
68001: NEG
68002: PUSH
68003: EMPTY
68004: LIST
68005: LIST
68006: PUSH
68007: LD_INT 1
68009: PUSH
68010: LD_INT 2
68012: NEG
68013: PUSH
68014: EMPTY
68015: LIST
68016: LIST
68017: PUSH
68018: EMPTY
68019: LIST
68020: LIST
68021: LIST
68022: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68023: LD_ADDR_VAR 0 54
68027: PUSH
68028: LD_INT 2
68030: PUSH
68031: LD_INT 1
68033: NEG
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PUSH
68039: LD_INT 3
68041: PUSH
68042: LD_INT 0
68044: PUSH
68045: EMPTY
68046: LIST
68047: LIST
68048: PUSH
68049: LD_INT 3
68051: PUSH
68052: LD_INT 1
68054: PUSH
68055: EMPTY
68056: LIST
68057: LIST
68058: PUSH
68059: EMPTY
68060: LIST
68061: LIST
68062: LIST
68063: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68064: LD_ADDR_VAR 0 55
68068: PUSH
68069: LD_INT 3
68071: PUSH
68072: LD_INT 2
68074: PUSH
68075: EMPTY
68076: LIST
68077: LIST
68078: PUSH
68079: LD_INT 3
68081: PUSH
68082: LD_INT 3
68084: PUSH
68085: EMPTY
68086: LIST
68087: LIST
68088: PUSH
68089: LD_INT 2
68091: PUSH
68092: LD_INT 3
68094: PUSH
68095: EMPTY
68096: LIST
68097: LIST
68098: PUSH
68099: EMPTY
68100: LIST
68101: LIST
68102: LIST
68103: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68104: LD_ADDR_VAR 0 56
68108: PUSH
68109: LD_INT 1
68111: PUSH
68112: LD_INT 3
68114: PUSH
68115: EMPTY
68116: LIST
68117: LIST
68118: PUSH
68119: LD_INT 0
68121: PUSH
68122: LD_INT 3
68124: PUSH
68125: EMPTY
68126: LIST
68127: LIST
68128: PUSH
68129: LD_INT 1
68131: NEG
68132: PUSH
68133: LD_INT 2
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: PUSH
68140: EMPTY
68141: LIST
68142: LIST
68143: LIST
68144: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68145: LD_ADDR_VAR 0 57
68149: PUSH
68150: LD_INT 2
68152: NEG
68153: PUSH
68154: LD_INT 1
68156: PUSH
68157: EMPTY
68158: LIST
68159: LIST
68160: PUSH
68161: LD_INT 3
68163: NEG
68164: PUSH
68165: LD_INT 0
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: PUSH
68172: LD_INT 3
68174: NEG
68175: PUSH
68176: LD_INT 1
68178: NEG
68179: PUSH
68180: EMPTY
68181: LIST
68182: LIST
68183: PUSH
68184: EMPTY
68185: LIST
68186: LIST
68187: LIST
68188: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68189: LD_ADDR_VAR 0 58
68193: PUSH
68194: LD_INT 2
68196: NEG
68197: PUSH
68198: LD_INT 3
68200: NEG
68201: PUSH
68202: EMPTY
68203: LIST
68204: LIST
68205: PUSH
68206: LD_INT 3
68208: NEG
68209: PUSH
68210: LD_INT 2
68212: NEG
68213: PUSH
68214: EMPTY
68215: LIST
68216: LIST
68217: PUSH
68218: LD_INT 3
68220: NEG
68221: PUSH
68222: LD_INT 3
68224: NEG
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: EMPTY
68231: LIST
68232: LIST
68233: LIST
68234: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
68235: LD_ADDR_VAR 0 59
68239: PUSH
68240: LD_INT 1
68242: NEG
68243: PUSH
68244: LD_INT 2
68246: NEG
68247: PUSH
68248: EMPTY
68249: LIST
68250: LIST
68251: PUSH
68252: LD_INT 0
68254: PUSH
68255: LD_INT 2
68257: NEG
68258: PUSH
68259: EMPTY
68260: LIST
68261: LIST
68262: PUSH
68263: LD_INT 1
68265: PUSH
68266: LD_INT 1
68268: NEG
68269: PUSH
68270: EMPTY
68271: LIST
68272: LIST
68273: PUSH
68274: EMPTY
68275: LIST
68276: LIST
68277: LIST
68278: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68279: LD_ADDR_VAR 0 60
68283: PUSH
68284: LD_INT 1
68286: PUSH
68287: LD_INT 1
68289: NEG
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: LD_INT 2
68297: PUSH
68298: LD_INT 0
68300: PUSH
68301: EMPTY
68302: LIST
68303: LIST
68304: PUSH
68305: LD_INT 2
68307: PUSH
68308: LD_INT 1
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: LIST
68319: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68320: LD_ADDR_VAR 0 61
68324: PUSH
68325: LD_INT 2
68327: PUSH
68328: LD_INT 1
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: LD_INT 2
68337: PUSH
68338: LD_INT 2
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: PUSH
68345: LD_INT 1
68347: PUSH
68348: LD_INT 2
68350: PUSH
68351: EMPTY
68352: LIST
68353: LIST
68354: PUSH
68355: EMPTY
68356: LIST
68357: LIST
68358: LIST
68359: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68360: LD_ADDR_VAR 0 62
68364: PUSH
68365: LD_INT 1
68367: PUSH
68368: LD_INT 2
68370: PUSH
68371: EMPTY
68372: LIST
68373: LIST
68374: PUSH
68375: LD_INT 0
68377: PUSH
68378: LD_INT 2
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: PUSH
68385: LD_INT 1
68387: NEG
68388: PUSH
68389: LD_INT 1
68391: PUSH
68392: EMPTY
68393: LIST
68394: LIST
68395: PUSH
68396: EMPTY
68397: LIST
68398: LIST
68399: LIST
68400: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68401: LD_ADDR_VAR 0 63
68405: PUSH
68406: LD_INT 1
68408: NEG
68409: PUSH
68410: LD_INT 1
68412: PUSH
68413: EMPTY
68414: LIST
68415: LIST
68416: PUSH
68417: LD_INT 2
68419: NEG
68420: PUSH
68421: LD_INT 0
68423: PUSH
68424: EMPTY
68425: LIST
68426: LIST
68427: PUSH
68428: LD_INT 2
68430: NEG
68431: PUSH
68432: LD_INT 1
68434: NEG
68435: PUSH
68436: EMPTY
68437: LIST
68438: LIST
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: LIST
68444: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68445: LD_ADDR_VAR 0 64
68449: PUSH
68450: LD_INT 1
68452: NEG
68453: PUSH
68454: LD_INT 2
68456: NEG
68457: PUSH
68458: EMPTY
68459: LIST
68460: LIST
68461: PUSH
68462: LD_INT 2
68464: NEG
68465: PUSH
68466: LD_INT 1
68468: NEG
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: PUSH
68474: LD_INT 2
68476: NEG
68477: PUSH
68478: LD_INT 2
68480: NEG
68481: PUSH
68482: EMPTY
68483: LIST
68484: LIST
68485: PUSH
68486: EMPTY
68487: LIST
68488: LIST
68489: LIST
68490: ST_TO_ADDR
// end ; 2 :
68491: GO 71757
68493: LD_INT 2
68495: DOUBLE
68496: EQUAL
68497: IFTRUE 68501
68499: GO 71756
68501: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68502: LD_ADDR_VAR 0 29
68506: PUSH
68507: LD_INT 4
68509: PUSH
68510: LD_INT 0
68512: PUSH
68513: EMPTY
68514: LIST
68515: LIST
68516: PUSH
68517: LD_INT 4
68519: PUSH
68520: LD_INT 1
68522: NEG
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: PUSH
68528: LD_INT 5
68530: PUSH
68531: LD_INT 0
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: PUSH
68538: LD_INT 5
68540: PUSH
68541: LD_INT 1
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: PUSH
68548: LD_INT 4
68550: PUSH
68551: LD_INT 1
68553: PUSH
68554: EMPTY
68555: LIST
68556: LIST
68557: PUSH
68558: LD_INT 3
68560: PUSH
68561: LD_INT 0
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: PUSH
68568: LD_INT 3
68570: PUSH
68571: LD_INT 1
68573: NEG
68574: PUSH
68575: EMPTY
68576: LIST
68577: LIST
68578: PUSH
68579: LD_INT 3
68581: PUSH
68582: LD_INT 2
68584: NEG
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: PUSH
68590: LD_INT 5
68592: PUSH
68593: LD_INT 2
68595: PUSH
68596: EMPTY
68597: LIST
68598: LIST
68599: PUSH
68600: LD_INT 3
68602: PUSH
68603: LD_INT 3
68605: PUSH
68606: EMPTY
68607: LIST
68608: LIST
68609: PUSH
68610: LD_INT 3
68612: PUSH
68613: LD_INT 2
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: PUSH
68620: LD_INT 4
68622: PUSH
68623: LD_INT 3
68625: PUSH
68626: EMPTY
68627: LIST
68628: LIST
68629: PUSH
68630: LD_INT 4
68632: PUSH
68633: LD_INT 4
68635: PUSH
68636: EMPTY
68637: LIST
68638: LIST
68639: PUSH
68640: LD_INT 3
68642: PUSH
68643: LD_INT 4
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: PUSH
68650: LD_INT 2
68652: PUSH
68653: LD_INT 3
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: PUSH
68660: LD_INT 2
68662: PUSH
68663: LD_INT 2
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: PUSH
68670: LD_INT 4
68672: PUSH
68673: LD_INT 2
68675: PUSH
68676: EMPTY
68677: LIST
68678: LIST
68679: PUSH
68680: LD_INT 2
68682: PUSH
68683: LD_INT 4
68685: PUSH
68686: EMPTY
68687: LIST
68688: LIST
68689: PUSH
68690: LD_INT 0
68692: PUSH
68693: LD_INT 4
68695: PUSH
68696: EMPTY
68697: LIST
68698: LIST
68699: PUSH
68700: LD_INT 0
68702: PUSH
68703: LD_INT 3
68705: PUSH
68706: EMPTY
68707: LIST
68708: LIST
68709: PUSH
68710: LD_INT 1
68712: PUSH
68713: LD_INT 4
68715: PUSH
68716: EMPTY
68717: LIST
68718: LIST
68719: PUSH
68720: LD_INT 1
68722: PUSH
68723: LD_INT 5
68725: PUSH
68726: EMPTY
68727: LIST
68728: LIST
68729: PUSH
68730: LD_INT 0
68732: PUSH
68733: LD_INT 5
68735: PUSH
68736: EMPTY
68737: LIST
68738: LIST
68739: PUSH
68740: LD_INT 1
68742: NEG
68743: PUSH
68744: LD_INT 4
68746: PUSH
68747: EMPTY
68748: LIST
68749: LIST
68750: PUSH
68751: LD_INT 1
68753: NEG
68754: PUSH
68755: LD_INT 3
68757: PUSH
68758: EMPTY
68759: LIST
68760: LIST
68761: PUSH
68762: LD_INT 2
68764: PUSH
68765: LD_INT 5
68767: PUSH
68768: EMPTY
68769: LIST
68770: LIST
68771: PUSH
68772: LD_INT 2
68774: NEG
68775: PUSH
68776: LD_INT 3
68778: PUSH
68779: EMPTY
68780: LIST
68781: LIST
68782: PUSH
68783: LD_INT 3
68785: NEG
68786: PUSH
68787: LD_INT 0
68789: PUSH
68790: EMPTY
68791: LIST
68792: LIST
68793: PUSH
68794: LD_INT 3
68796: NEG
68797: PUSH
68798: LD_INT 1
68800: NEG
68801: PUSH
68802: EMPTY
68803: LIST
68804: LIST
68805: PUSH
68806: LD_INT 2
68808: NEG
68809: PUSH
68810: LD_INT 0
68812: PUSH
68813: EMPTY
68814: LIST
68815: LIST
68816: PUSH
68817: LD_INT 2
68819: NEG
68820: PUSH
68821: LD_INT 1
68823: PUSH
68824: EMPTY
68825: LIST
68826: LIST
68827: PUSH
68828: LD_INT 3
68830: NEG
68831: PUSH
68832: LD_INT 1
68834: PUSH
68835: EMPTY
68836: LIST
68837: LIST
68838: PUSH
68839: LD_INT 4
68841: NEG
68842: PUSH
68843: LD_INT 0
68845: PUSH
68846: EMPTY
68847: LIST
68848: LIST
68849: PUSH
68850: LD_INT 4
68852: NEG
68853: PUSH
68854: LD_INT 1
68856: NEG
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: PUSH
68862: LD_INT 4
68864: NEG
68865: PUSH
68866: LD_INT 2
68868: NEG
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: PUSH
68874: LD_INT 2
68876: NEG
68877: PUSH
68878: LD_INT 2
68880: PUSH
68881: EMPTY
68882: LIST
68883: LIST
68884: PUSH
68885: LD_INT 4
68887: NEG
68888: PUSH
68889: LD_INT 4
68891: NEG
68892: PUSH
68893: EMPTY
68894: LIST
68895: LIST
68896: PUSH
68897: LD_INT 4
68899: NEG
68900: PUSH
68901: LD_INT 5
68903: NEG
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: PUSH
68909: LD_INT 3
68911: NEG
68912: PUSH
68913: LD_INT 4
68915: NEG
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: PUSH
68921: LD_INT 3
68923: NEG
68924: PUSH
68925: LD_INT 3
68927: NEG
68928: PUSH
68929: EMPTY
68930: LIST
68931: LIST
68932: PUSH
68933: LD_INT 4
68935: NEG
68936: PUSH
68937: LD_INT 3
68939: NEG
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: PUSH
68945: LD_INT 5
68947: NEG
68948: PUSH
68949: LD_INT 4
68951: NEG
68952: PUSH
68953: EMPTY
68954: LIST
68955: LIST
68956: PUSH
68957: LD_INT 5
68959: NEG
68960: PUSH
68961: LD_INT 5
68963: NEG
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: PUSH
68969: LD_INT 3
68971: NEG
68972: PUSH
68973: LD_INT 5
68975: NEG
68976: PUSH
68977: EMPTY
68978: LIST
68979: LIST
68980: PUSH
68981: LD_INT 5
68983: NEG
68984: PUSH
68985: LD_INT 3
68987: NEG
68988: PUSH
68989: EMPTY
68990: LIST
68991: LIST
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: LIST
68997: LIST
68998: LIST
68999: LIST
69000: LIST
69001: LIST
69002: LIST
69003: LIST
69004: LIST
69005: LIST
69006: LIST
69007: LIST
69008: LIST
69009: LIST
69010: LIST
69011: LIST
69012: LIST
69013: LIST
69014: LIST
69015: LIST
69016: LIST
69017: LIST
69018: LIST
69019: LIST
69020: LIST
69021: LIST
69022: LIST
69023: LIST
69024: LIST
69025: LIST
69026: LIST
69027: LIST
69028: LIST
69029: LIST
69030: LIST
69031: LIST
69032: LIST
69033: LIST
69034: LIST
69035: LIST
69036: LIST
69037: LIST
69038: LIST
69039: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
69040: LD_ADDR_VAR 0 30
69044: PUSH
69045: LD_INT 4
69047: PUSH
69048: LD_INT 4
69050: PUSH
69051: EMPTY
69052: LIST
69053: LIST
69054: PUSH
69055: LD_INT 4
69057: PUSH
69058: LD_INT 3
69060: PUSH
69061: EMPTY
69062: LIST
69063: LIST
69064: PUSH
69065: LD_INT 5
69067: PUSH
69068: LD_INT 4
69070: PUSH
69071: EMPTY
69072: LIST
69073: LIST
69074: PUSH
69075: LD_INT 5
69077: PUSH
69078: LD_INT 5
69080: PUSH
69081: EMPTY
69082: LIST
69083: LIST
69084: PUSH
69085: LD_INT 4
69087: PUSH
69088: LD_INT 5
69090: PUSH
69091: EMPTY
69092: LIST
69093: LIST
69094: PUSH
69095: LD_INT 3
69097: PUSH
69098: LD_INT 4
69100: PUSH
69101: EMPTY
69102: LIST
69103: LIST
69104: PUSH
69105: LD_INT 3
69107: PUSH
69108: LD_INT 3
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: PUSH
69115: LD_INT 5
69117: PUSH
69118: LD_INT 3
69120: PUSH
69121: EMPTY
69122: LIST
69123: LIST
69124: PUSH
69125: LD_INT 3
69127: PUSH
69128: LD_INT 5
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: PUSH
69135: LD_INT 0
69137: PUSH
69138: LD_INT 3
69140: PUSH
69141: EMPTY
69142: LIST
69143: LIST
69144: PUSH
69145: LD_INT 0
69147: PUSH
69148: LD_INT 2
69150: PUSH
69151: EMPTY
69152: LIST
69153: LIST
69154: PUSH
69155: LD_INT 1
69157: PUSH
69158: LD_INT 3
69160: PUSH
69161: EMPTY
69162: LIST
69163: LIST
69164: PUSH
69165: LD_INT 1
69167: PUSH
69168: LD_INT 4
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PUSH
69175: LD_INT 0
69177: PUSH
69178: LD_INT 4
69180: PUSH
69181: EMPTY
69182: LIST
69183: LIST
69184: PUSH
69185: LD_INT 1
69187: NEG
69188: PUSH
69189: LD_INT 3
69191: PUSH
69192: EMPTY
69193: LIST
69194: LIST
69195: PUSH
69196: LD_INT 1
69198: NEG
69199: PUSH
69200: LD_INT 2
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: PUSH
69207: LD_INT 2
69209: PUSH
69210: LD_INT 4
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: PUSH
69217: LD_INT 2
69219: NEG
69220: PUSH
69221: LD_INT 2
69223: PUSH
69224: EMPTY
69225: LIST
69226: LIST
69227: PUSH
69228: LD_INT 4
69230: NEG
69231: PUSH
69232: LD_INT 0
69234: PUSH
69235: EMPTY
69236: LIST
69237: LIST
69238: PUSH
69239: LD_INT 4
69241: NEG
69242: PUSH
69243: LD_INT 1
69245: NEG
69246: PUSH
69247: EMPTY
69248: LIST
69249: LIST
69250: PUSH
69251: LD_INT 3
69253: NEG
69254: PUSH
69255: LD_INT 0
69257: PUSH
69258: EMPTY
69259: LIST
69260: LIST
69261: PUSH
69262: LD_INT 3
69264: NEG
69265: PUSH
69266: LD_INT 1
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: PUSH
69273: LD_INT 4
69275: NEG
69276: PUSH
69277: LD_INT 1
69279: PUSH
69280: EMPTY
69281: LIST
69282: LIST
69283: PUSH
69284: LD_INT 5
69286: NEG
69287: PUSH
69288: LD_INT 0
69290: PUSH
69291: EMPTY
69292: LIST
69293: LIST
69294: PUSH
69295: LD_INT 5
69297: NEG
69298: PUSH
69299: LD_INT 1
69301: NEG
69302: PUSH
69303: EMPTY
69304: LIST
69305: LIST
69306: PUSH
69307: LD_INT 5
69309: NEG
69310: PUSH
69311: LD_INT 2
69313: NEG
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: PUSH
69319: LD_INT 3
69321: NEG
69322: PUSH
69323: LD_INT 2
69325: PUSH
69326: EMPTY
69327: LIST
69328: LIST
69329: PUSH
69330: LD_INT 3
69332: NEG
69333: PUSH
69334: LD_INT 3
69336: NEG
69337: PUSH
69338: EMPTY
69339: LIST
69340: LIST
69341: PUSH
69342: LD_INT 3
69344: NEG
69345: PUSH
69346: LD_INT 4
69348: NEG
69349: PUSH
69350: EMPTY
69351: LIST
69352: LIST
69353: PUSH
69354: LD_INT 2
69356: NEG
69357: PUSH
69358: LD_INT 3
69360: NEG
69361: PUSH
69362: EMPTY
69363: LIST
69364: LIST
69365: PUSH
69366: LD_INT 2
69368: NEG
69369: PUSH
69370: LD_INT 2
69372: NEG
69373: PUSH
69374: EMPTY
69375: LIST
69376: LIST
69377: PUSH
69378: LD_INT 3
69380: NEG
69381: PUSH
69382: LD_INT 2
69384: NEG
69385: PUSH
69386: EMPTY
69387: LIST
69388: LIST
69389: PUSH
69390: LD_INT 4
69392: NEG
69393: PUSH
69394: LD_INT 3
69396: NEG
69397: PUSH
69398: EMPTY
69399: LIST
69400: LIST
69401: PUSH
69402: LD_INT 4
69404: NEG
69405: PUSH
69406: LD_INT 4
69408: NEG
69409: PUSH
69410: EMPTY
69411: LIST
69412: LIST
69413: PUSH
69414: LD_INT 2
69416: NEG
69417: PUSH
69418: LD_INT 4
69420: NEG
69421: PUSH
69422: EMPTY
69423: LIST
69424: LIST
69425: PUSH
69426: LD_INT 4
69428: NEG
69429: PUSH
69430: LD_INT 2
69432: NEG
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: PUSH
69438: LD_INT 0
69440: PUSH
69441: LD_INT 4
69443: NEG
69444: PUSH
69445: EMPTY
69446: LIST
69447: LIST
69448: PUSH
69449: LD_INT 0
69451: PUSH
69452: LD_INT 5
69454: NEG
69455: PUSH
69456: EMPTY
69457: LIST
69458: LIST
69459: PUSH
69460: LD_INT 1
69462: PUSH
69463: LD_INT 4
69465: NEG
69466: PUSH
69467: EMPTY
69468: LIST
69469: LIST
69470: PUSH
69471: LD_INT 1
69473: PUSH
69474: LD_INT 3
69476: NEG
69477: PUSH
69478: EMPTY
69479: LIST
69480: LIST
69481: PUSH
69482: LD_INT 0
69484: PUSH
69485: LD_INT 3
69487: NEG
69488: PUSH
69489: EMPTY
69490: LIST
69491: LIST
69492: PUSH
69493: LD_INT 1
69495: NEG
69496: PUSH
69497: LD_INT 4
69499: NEG
69500: PUSH
69501: EMPTY
69502: LIST
69503: LIST
69504: PUSH
69505: LD_INT 1
69507: NEG
69508: PUSH
69509: LD_INT 5
69511: NEG
69512: PUSH
69513: EMPTY
69514: LIST
69515: LIST
69516: PUSH
69517: LD_INT 2
69519: PUSH
69520: LD_INT 3
69522: NEG
69523: PUSH
69524: EMPTY
69525: LIST
69526: LIST
69527: PUSH
69528: LD_INT 2
69530: NEG
69531: PUSH
69532: LD_INT 5
69534: NEG
69535: PUSH
69536: EMPTY
69537: LIST
69538: LIST
69539: PUSH
69540: EMPTY
69541: LIST
69542: LIST
69543: LIST
69544: LIST
69545: LIST
69546: LIST
69547: LIST
69548: LIST
69549: LIST
69550: LIST
69551: LIST
69552: LIST
69553: LIST
69554: LIST
69555: LIST
69556: LIST
69557: LIST
69558: LIST
69559: LIST
69560: LIST
69561: LIST
69562: LIST
69563: LIST
69564: LIST
69565: LIST
69566: LIST
69567: LIST
69568: LIST
69569: LIST
69570: LIST
69571: LIST
69572: LIST
69573: LIST
69574: LIST
69575: LIST
69576: LIST
69577: LIST
69578: LIST
69579: LIST
69580: LIST
69581: LIST
69582: LIST
69583: LIST
69584: LIST
69585: LIST
69586: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69587: LD_ADDR_VAR 0 31
69591: PUSH
69592: LD_INT 0
69594: PUSH
69595: LD_INT 4
69597: PUSH
69598: EMPTY
69599: LIST
69600: LIST
69601: PUSH
69602: LD_INT 0
69604: PUSH
69605: LD_INT 3
69607: PUSH
69608: EMPTY
69609: LIST
69610: LIST
69611: PUSH
69612: LD_INT 1
69614: PUSH
69615: LD_INT 4
69617: PUSH
69618: EMPTY
69619: LIST
69620: LIST
69621: PUSH
69622: LD_INT 1
69624: PUSH
69625: LD_INT 5
69627: PUSH
69628: EMPTY
69629: LIST
69630: LIST
69631: PUSH
69632: LD_INT 0
69634: PUSH
69635: LD_INT 5
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: PUSH
69642: LD_INT 1
69644: NEG
69645: PUSH
69646: LD_INT 4
69648: PUSH
69649: EMPTY
69650: LIST
69651: LIST
69652: PUSH
69653: LD_INT 1
69655: NEG
69656: PUSH
69657: LD_INT 3
69659: PUSH
69660: EMPTY
69661: LIST
69662: LIST
69663: PUSH
69664: LD_INT 2
69666: PUSH
69667: LD_INT 5
69669: PUSH
69670: EMPTY
69671: LIST
69672: LIST
69673: PUSH
69674: LD_INT 2
69676: NEG
69677: PUSH
69678: LD_INT 3
69680: PUSH
69681: EMPTY
69682: LIST
69683: LIST
69684: PUSH
69685: LD_INT 3
69687: NEG
69688: PUSH
69689: LD_INT 0
69691: PUSH
69692: EMPTY
69693: LIST
69694: LIST
69695: PUSH
69696: LD_INT 3
69698: NEG
69699: PUSH
69700: LD_INT 1
69702: NEG
69703: PUSH
69704: EMPTY
69705: LIST
69706: LIST
69707: PUSH
69708: LD_INT 2
69710: NEG
69711: PUSH
69712: LD_INT 0
69714: PUSH
69715: EMPTY
69716: LIST
69717: LIST
69718: PUSH
69719: LD_INT 2
69721: NEG
69722: PUSH
69723: LD_INT 1
69725: PUSH
69726: EMPTY
69727: LIST
69728: LIST
69729: PUSH
69730: LD_INT 3
69732: NEG
69733: PUSH
69734: LD_INT 1
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: PUSH
69741: LD_INT 4
69743: NEG
69744: PUSH
69745: LD_INT 0
69747: PUSH
69748: EMPTY
69749: LIST
69750: LIST
69751: PUSH
69752: LD_INT 4
69754: NEG
69755: PUSH
69756: LD_INT 1
69758: NEG
69759: PUSH
69760: EMPTY
69761: LIST
69762: LIST
69763: PUSH
69764: LD_INT 4
69766: NEG
69767: PUSH
69768: LD_INT 2
69770: NEG
69771: PUSH
69772: EMPTY
69773: LIST
69774: LIST
69775: PUSH
69776: LD_INT 2
69778: NEG
69779: PUSH
69780: LD_INT 2
69782: PUSH
69783: EMPTY
69784: LIST
69785: LIST
69786: PUSH
69787: LD_INT 4
69789: NEG
69790: PUSH
69791: LD_INT 4
69793: NEG
69794: PUSH
69795: EMPTY
69796: LIST
69797: LIST
69798: PUSH
69799: LD_INT 4
69801: NEG
69802: PUSH
69803: LD_INT 5
69805: NEG
69806: PUSH
69807: EMPTY
69808: LIST
69809: LIST
69810: PUSH
69811: LD_INT 3
69813: NEG
69814: PUSH
69815: LD_INT 4
69817: NEG
69818: PUSH
69819: EMPTY
69820: LIST
69821: LIST
69822: PUSH
69823: LD_INT 3
69825: NEG
69826: PUSH
69827: LD_INT 3
69829: NEG
69830: PUSH
69831: EMPTY
69832: LIST
69833: LIST
69834: PUSH
69835: LD_INT 4
69837: NEG
69838: PUSH
69839: LD_INT 3
69841: NEG
69842: PUSH
69843: EMPTY
69844: LIST
69845: LIST
69846: PUSH
69847: LD_INT 5
69849: NEG
69850: PUSH
69851: LD_INT 4
69853: NEG
69854: PUSH
69855: EMPTY
69856: LIST
69857: LIST
69858: PUSH
69859: LD_INT 5
69861: NEG
69862: PUSH
69863: LD_INT 5
69865: NEG
69866: PUSH
69867: EMPTY
69868: LIST
69869: LIST
69870: PUSH
69871: LD_INT 3
69873: NEG
69874: PUSH
69875: LD_INT 5
69877: NEG
69878: PUSH
69879: EMPTY
69880: LIST
69881: LIST
69882: PUSH
69883: LD_INT 5
69885: NEG
69886: PUSH
69887: LD_INT 3
69889: NEG
69890: PUSH
69891: EMPTY
69892: LIST
69893: LIST
69894: PUSH
69895: LD_INT 0
69897: PUSH
69898: LD_INT 3
69900: NEG
69901: PUSH
69902: EMPTY
69903: LIST
69904: LIST
69905: PUSH
69906: LD_INT 0
69908: PUSH
69909: LD_INT 4
69911: NEG
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: PUSH
69917: LD_INT 1
69919: PUSH
69920: LD_INT 3
69922: NEG
69923: PUSH
69924: EMPTY
69925: LIST
69926: LIST
69927: PUSH
69928: LD_INT 1
69930: PUSH
69931: LD_INT 2
69933: NEG
69934: PUSH
69935: EMPTY
69936: LIST
69937: LIST
69938: PUSH
69939: LD_INT 0
69941: PUSH
69942: LD_INT 2
69944: NEG
69945: PUSH
69946: EMPTY
69947: LIST
69948: LIST
69949: PUSH
69950: LD_INT 1
69952: NEG
69953: PUSH
69954: LD_INT 3
69956: NEG
69957: PUSH
69958: EMPTY
69959: LIST
69960: LIST
69961: PUSH
69962: LD_INT 1
69964: NEG
69965: PUSH
69966: LD_INT 4
69968: NEG
69969: PUSH
69970: EMPTY
69971: LIST
69972: LIST
69973: PUSH
69974: LD_INT 2
69976: PUSH
69977: LD_INT 2
69979: NEG
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: PUSH
69985: LD_INT 2
69987: NEG
69988: PUSH
69989: LD_INT 4
69991: NEG
69992: PUSH
69993: EMPTY
69994: LIST
69995: LIST
69996: PUSH
69997: LD_INT 4
69999: PUSH
70000: LD_INT 0
70002: PUSH
70003: EMPTY
70004: LIST
70005: LIST
70006: PUSH
70007: LD_INT 4
70009: PUSH
70010: LD_INT 1
70012: NEG
70013: PUSH
70014: EMPTY
70015: LIST
70016: LIST
70017: PUSH
70018: LD_INT 5
70020: PUSH
70021: LD_INT 0
70023: PUSH
70024: EMPTY
70025: LIST
70026: LIST
70027: PUSH
70028: LD_INT 5
70030: PUSH
70031: LD_INT 1
70033: PUSH
70034: EMPTY
70035: LIST
70036: LIST
70037: PUSH
70038: LD_INT 4
70040: PUSH
70041: LD_INT 1
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: PUSH
70048: LD_INT 3
70050: PUSH
70051: LD_INT 0
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: PUSH
70058: LD_INT 3
70060: PUSH
70061: LD_INT 1
70063: NEG
70064: PUSH
70065: EMPTY
70066: LIST
70067: LIST
70068: PUSH
70069: LD_INT 3
70071: PUSH
70072: LD_INT 2
70074: NEG
70075: PUSH
70076: EMPTY
70077: LIST
70078: LIST
70079: PUSH
70080: LD_INT 5
70082: PUSH
70083: LD_INT 2
70085: PUSH
70086: EMPTY
70087: LIST
70088: LIST
70089: PUSH
70090: EMPTY
70091: LIST
70092: LIST
70093: LIST
70094: LIST
70095: LIST
70096: LIST
70097: LIST
70098: LIST
70099: LIST
70100: LIST
70101: LIST
70102: LIST
70103: LIST
70104: LIST
70105: LIST
70106: LIST
70107: LIST
70108: LIST
70109: LIST
70110: LIST
70111: LIST
70112: LIST
70113: LIST
70114: LIST
70115: LIST
70116: LIST
70117: LIST
70118: LIST
70119: LIST
70120: LIST
70121: LIST
70122: LIST
70123: LIST
70124: LIST
70125: LIST
70126: LIST
70127: LIST
70128: LIST
70129: LIST
70130: LIST
70131: LIST
70132: LIST
70133: LIST
70134: LIST
70135: LIST
70136: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
70137: LD_ADDR_VAR 0 32
70141: PUSH
70142: LD_INT 4
70144: NEG
70145: PUSH
70146: LD_INT 0
70148: PUSH
70149: EMPTY
70150: LIST
70151: LIST
70152: PUSH
70153: LD_INT 4
70155: NEG
70156: PUSH
70157: LD_INT 1
70159: NEG
70160: PUSH
70161: EMPTY
70162: LIST
70163: LIST
70164: PUSH
70165: LD_INT 3
70167: NEG
70168: PUSH
70169: LD_INT 0
70171: PUSH
70172: EMPTY
70173: LIST
70174: LIST
70175: PUSH
70176: LD_INT 3
70178: NEG
70179: PUSH
70180: LD_INT 1
70182: PUSH
70183: EMPTY
70184: LIST
70185: LIST
70186: PUSH
70187: LD_INT 4
70189: NEG
70190: PUSH
70191: LD_INT 1
70193: PUSH
70194: EMPTY
70195: LIST
70196: LIST
70197: PUSH
70198: LD_INT 5
70200: NEG
70201: PUSH
70202: LD_INT 0
70204: PUSH
70205: EMPTY
70206: LIST
70207: LIST
70208: PUSH
70209: LD_INT 5
70211: NEG
70212: PUSH
70213: LD_INT 1
70215: NEG
70216: PUSH
70217: EMPTY
70218: LIST
70219: LIST
70220: PUSH
70221: LD_INT 5
70223: NEG
70224: PUSH
70225: LD_INT 2
70227: NEG
70228: PUSH
70229: EMPTY
70230: LIST
70231: LIST
70232: PUSH
70233: LD_INT 3
70235: NEG
70236: PUSH
70237: LD_INT 2
70239: PUSH
70240: EMPTY
70241: LIST
70242: LIST
70243: PUSH
70244: LD_INT 3
70246: NEG
70247: PUSH
70248: LD_INT 3
70250: NEG
70251: PUSH
70252: EMPTY
70253: LIST
70254: LIST
70255: PUSH
70256: LD_INT 3
70258: NEG
70259: PUSH
70260: LD_INT 4
70262: NEG
70263: PUSH
70264: EMPTY
70265: LIST
70266: LIST
70267: PUSH
70268: LD_INT 2
70270: NEG
70271: PUSH
70272: LD_INT 3
70274: NEG
70275: PUSH
70276: EMPTY
70277: LIST
70278: LIST
70279: PUSH
70280: LD_INT 2
70282: NEG
70283: PUSH
70284: LD_INT 2
70286: NEG
70287: PUSH
70288: EMPTY
70289: LIST
70290: LIST
70291: PUSH
70292: LD_INT 3
70294: NEG
70295: PUSH
70296: LD_INT 2
70298: NEG
70299: PUSH
70300: EMPTY
70301: LIST
70302: LIST
70303: PUSH
70304: LD_INT 4
70306: NEG
70307: PUSH
70308: LD_INT 3
70310: NEG
70311: PUSH
70312: EMPTY
70313: LIST
70314: LIST
70315: PUSH
70316: LD_INT 4
70318: NEG
70319: PUSH
70320: LD_INT 4
70322: NEG
70323: PUSH
70324: EMPTY
70325: LIST
70326: LIST
70327: PUSH
70328: LD_INT 2
70330: NEG
70331: PUSH
70332: LD_INT 4
70334: NEG
70335: PUSH
70336: EMPTY
70337: LIST
70338: LIST
70339: PUSH
70340: LD_INT 4
70342: NEG
70343: PUSH
70344: LD_INT 2
70346: NEG
70347: PUSH
70348: EMPTY
70349: LIST
70350: LIST
70351: PUSH
70352: LD_INT 0
70354: PUSH
70355: LD_INT 4
70357: NEG
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: PUSH
70363: LD_INT 0
70365: PUSH
70366: LD_INT 5
70368: NEG
70369: PUSH
70370: EMPTY
70371: LIST
70372: LIST
70373: PUSH
70374: LD_INT 1
70376: PUSH
70377: LD_INT 4
70379: NEG
70380: PUSH
70381: EMPTY
70382: LIST
70383: LIST
70384: PUSH
70385: LD_INT 1
70387: PUSH
70388: LD_INT 3
70390: NEG
70391: PUSH
70392: EMPTY
70393: LIST
70394: LIST
70395: PUSH
70396: LD_INT 0
70398: PUSH
70399: LD_INT 3
70401: NEG
70402: PUSH
70403: EMPTY
70404: LIST
70405: LIST
70406: PUSH
70407: LD_INT 1
70409: NEG
70410: PUSH
70411: LD_INT 4
70413: NEG
70414: PUSH
70415: EMPTY
70416: LIST
70417: LIST
70418: PUSH
70419: LD_INT 1
70421: NEG
70422: PUSH
70423: LD_INT 5
70425: NEG
70426: PUSH
70427: EMPTY
70428: LIST
70429: LIST
70430: PUSH
70431: LD_INT 2
70433: PUSH
70434: LD_INT 3
70436: NEG
70437: PUSH
70438: EMPTY
70439: LIST
70440: LIST
70441: PUSH
70442: LD_INT 2
70444: NEG
70445: PUSH
70446: LD_INT 5
70448: NEG
70449: PUSH
70450: EMPTY
70451: LIST
70452: LIST
70453: PUSH
70454: LD_INT 3
70456: PUSH
70457: LD_INT 0
70459: PUSH
70460: EMPTY
70461: LIST
70462: LIST
70463: PUSH
70464: LD_INT 3
70466: PUSH
70467: LD_INT 1
70469: NEG
70470: PUSH
70471: EMPTY
70472: LIST
70473: LIST
70474: PUSH
70475: LD_INT 4
70477: PUSH
70478: LD_INT 0
70480: PUSH
70481: EMPTY
70482: LIST
70483: LIST
70484: PUSH
70485: LD_INT 4
70487: PUSH
70488: LD_INT 1
70490: PUSH
70491: EMPTY
70492: LIST
70493: LIST
70494: PUSH
70495: LD_INT 3
70497: PUSH
70498: LD_INT 1
70500: PUSH
70501: EMPTY
70502: LIST
70503: LIST
70504: PUSH
70505: LD_INT 2
70507: PUSH
70508: LD_INT 0
70510: PUSH
70511: EMPTY
70512: LIST
70513: LIST
70514: PUSH
70515: LD_INT 2
70517: PUSH
70518: LD_INT 1
70520: NEG
70521: PUSH
70522: EMPTY
70523: LIST
70524: LIST
70525: PUSH
70526: LD_INT 2
70528: PUSH
70529: LD_INT 2
70531: NEG
70532: PUSH
70533: EMPTY
70534: LIST
70535: LIST
70536: PUSH
70537: LD_INT 4
70539: PUSH
70540: LD_INT 2
70542: PUSH
70543: EMPTY
70544: LIST
70545: LIST
70546: PUSH
70547: LD_INT 4
70549: PUSH
70550: LD_INT 4
70552: PUSH
70553: EMPTY
70554: LIST
70555: LIST
70556: PUSH
70557: LD_INT 4
70559: PUSH
70560: LD_INT 3
70562: PUSH
70563: EMPTY
70564: LIST
70565: LIST
70566: PUSH
70567: LD_INT 5
70569: PUSH
70570: LD_INT 4
70572: PUSH
70573: EMPTY
70574: LIST
70575: LIST
70576: PUSH
70577: LD_INT 5
70579: PUSH
70580: LD_INT 5
70582: PUSH
70583: EMPTY
70584: LIST
70585: LIST
70586: PUSH
70587: LD_INT 4
70589: PUSH
70590: LD_INT 5
70592: PUSH
70593: EMPTY
70594: LIST
70595: LIST
70596: PUSH
70597: LD_INT 3
70599: PUSH
70600: LD_INT 4
70602: PUSH
70603: EMPTY
70604: LIST
70605: LIST
70606: PUSH
70607: LD_INT 3
70609: PUSH
70610: LD_INT 3
70612: PUSH
70613: EMPTY
70614: LIST
70615: LIST
70616: PUSH
70617: LD_INT 5
70619: PUSH
70620: LD_INT 3
70622: PUSH
70623: EMPTY
70624: LIST
70625: LIST
70626: PUSH
70627: LD_INT 3
70629: PUSH
70630: LD_INT 5
70632: PUSH
70633: EMPTY
70634: LIST
70635: LIST
70636: PUSH
70637: EMPTY
70638: LIST
70639: LIST
70640: LIST
70641: LIST
70642: LIST
70643: LIST
70644: LIST
70645: LIST
70646: LIST
70647: LIST
70648: LIST
70649: LIST
70650: LIST
70651: LIST
70652: LIST
70653: LIST
70654: LIST
70655: LIST
70656: LIST
70657: LIST
70658: LIST
70659: LIST
70660: LIST
70661: LIST
70662: LIST
70663: LIST
70664: LIST
70665: LIST
70666: LIST
70667: LIST
70668: LIST
70669: LIST
70670: LIST
70671: LIST
70672: LIST
70673: LIST
70674: LIST
70675: LIST
70676: LIST
70677: LIST
70678: LIST
70679: LIST
70680: LIST
70681: LIST
70682: LIST
70683: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70684: LD_ADDR_VAR 0 33
70688: PUSH
70689: LD_INT 4
70691: NEG
70692: PUSH
70693: LD_INT 4
70695: NEG
70696: PUSH
70697: EMPTY
70698: LIST
70699: LIST
70700: PUSH
70701: LD_INT 4
70703: NEG
70704: PUSH
70705: LD_INT 5
70707: NEG
70708: PUSH
70709: EMPTY
70710: LIST
70711: LIST
70712: PUSH
70713: LD_INT 3
70715: NEG
70716: PUSH
70717: LD_INT 4
70719: NEG
70720: PUSH
70721: EMPTY
70722: LIST
70723: LIST
70724: PUSH
70725: LD_INT 3
70727: NEG
70728: PUSH
70729: LD_INT 3
70731: NEG
70732: PUSH
70733: EMPTY
70734: LIST
70735: LIST
70736: PUSH
70737: LD_INT 4
70739: NEG
70740: PUSH
70741: LD_INT 3
70743: NEG
70744: PUSH
70745: EMPTY
70746: LIST
70747: LIST
70748: PUSH
70749: LD_INT 5
70751: NEG
70752: PUSH
70753: LD_INT 4
70755: NEG
70756: PUSH
70757: EMPTY
70758: LIST
70759: LIST
70760: PUSH
70761: LD_INT 5
70763: NEG
70764: PUSH
70765: LD_INT 5
70767: NEG
70768: PUSH
70769: EMPTY
70770: LIST
70771: LIST
70772: PUSH
70773: LD_INT 3
70775: NEG
70776: PUSH
70777: LD_INT 5
70779: NEG
70780: PUSH
70781: EMPTY
70782: LIST
70783: LIST
70784: PUSH
70785: LD_INT 5
70787: NEG
70788: PUSH
70789: LD_INT 3
70791: NEG
70792: PUSH
70793: EMPTY
70794: LIST
70795: LIST
70796: PUSH
70797: LD_INT 0
70799: PUSH
70800: LD_INT 3
70802: NEG
70803: PUSH
70804: EMPTY
70805: LIST
70806: LIST
70807: PUSH
70808: LD_INT 0
70810: PUSH
70811: LD_INT 4
70813: NEG
70814: PUSH
70815: EMPTY
70816: LIST
70817: LIST
70818: PUSH
70819: LD_INT 1
70821: PUSH
70822: LD_INT 3
70824: NEG
70825: PUSH
70826: EMPTY
70827: LIST
70828: LIST
70829: PUSH
70830: LD_INT 1
70832: PUSH
70833: LD_INT 2
70835: NEG
70836: PUSH
70837: EMPTY
70838: LIST
70839: LIST
70840: PUSH
70841: LD_INT 0
70843: PUSH
70844: LD_INT 2
70846: NEG
70847: PUSH
70848: EMPTY
70849: LIST
70850: LIST
70851: PUSH
70852: LD_INT 1
70854: NEG
70855: PUSH
70856: LD_INT 3
70858: NEG
70859: PUSH
70860: EMPTY
70861: LIST
70862: LIST
70863: PUSH
70864: LD_INT 1
70866: NEG
70867: PUSH
70868: LD_INT 4
70870: NEG
70871: PUSH
70872: EMPTY
70873: LIST
70874: LIST
70875: PUSH
70876: LD_INT 2
70878: PUSH
70879: LD_INT 2
70881: NEG
70882: PUSH
70883: EMPTY
70884: LIST
70885: LIST
70886: PUSH
70887: LD_INT 2
70889: NEG
70890: PUSH
70891: LD_INT 4
70893: NEG
70894: PUSH
70895: EMPTY
70896: LIST
70897: LIST
70898: PUSH
70899: LD_INT 4
70901: PUSH
70902: LD_INT 0
70904: PUSH
70905: EMPTY
70906: LIST
70907: LIST
70908: PUSH
70909: LD_INT 4
70911: PUSH
70912: LD_INT 1
70914: NEG
70915: PUSH
70916: EMPTY
70917: LIST
70918: LIST
70919: PUSH
70920: LD_INT 5
70922: PUSH
70923: LD_INT 0
70925: PUSH
70926: EMPTY
70927: LIST
70928: LIST
70929: PUSH
70930: LD_INT 5
70932: PUSH
70933: LD_INT 1
70935: PUSH
70936: EMPTY
70937: LIST
70938: LIST
70939: PUSH
70940: LD_INT 4
70942: PUSH
70943: LD_INT 1
70945: PUSH
70946: EMPTY
70947: LIST
70948: LIST
70949: PUSH
70950: LD_INT 3
70952: PUSH
70953: LD_INT 0
70955: PUSH
70956: EMPTY
70957: LIST
70958: LIST
70959: PUSH
70960: LD_INT 3
70962: PUSH
70963: LD_INT 1
70965: NEG
70966: PUSH
70967: EMPTY
70968: LIST
70969: LIST
70970: PUSH
70971: LD_INT 3
70973: PUSH
70974: LD_INT 2
70976: NEG
70977: PUSH
70978: EMPTY
70979: LIST
70980: LIST
70981: PUSH
70982: LD_INT 5
70984: PUSH
70985: LD_INT 2
70987: PUSH
70988: EMPTY
70989: LIST
70990: LIST
70991: PUSH
70992: LD_INT 3
70994: PUSH
70995: LD_INT 3
70997: PUSH
70998: EMPTY
70999: LIST
71000: LIST
71001: PUSH
71002: LD_INT 3
71004: PUSH
71005: LD_INT 2
71007: PUSH
71008: EMPTY
71009: LIST
71010: LIST
71011: PUSH
71012: LD_INT 4
71014: PUSH
71015: LD_INT 3
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: PUSH
71022: LD_INT 4
71024: PUSH
71025: LD_INT 4
71027: PUSH
71028: EMPTY
71029: LIST
71030: LIST
71031: PUSH
71032: LD_INT 3
71034: PUSH
71035: LD_INT 4
71037: PUSH
71038: EMPTY
71039: LIST
71040: LIST
71041: PUSH
71042: LD_INT 2
71044: PUSH
71045: LD_INT 3
71047: PUSH
71048: EMPTY
71049: LIST
71050: LIST
71051: PUSH
71052: LD_INT 2
71054: PUSH
71055: LD_INT 2
71057: PUSH
71058: EMPTY
71059: LIST
71060: LIST
71061: PUSH
71062: LD_INT 4
71064: PUSH
71065: LD_INT 2
71067: PUSH
71068: EMPTY
71069: LIST
71070: LIST
71071: PUSH
71072: LD_INT 2
71074: PUSH
71075: LD_INT 4
71077: PUSH
71078: EMPTY
71079: LIST
71080: LIST
71081: PUSH
71082: LD_INT 0
71084: PUSH
71085: LD_INT 4
71087: PUSH
71088: EMPTY
71089: LIST
71090: LIST
71091: PUSH
71092: LD_INT 0
71094: PUSH
71095: LD_INT 3
71097: PUSH
71098: EMPTY
71099: LIST
71100: LIST
71101: PUSH
71102: LD_INT 1
71104: PUSH
71105: LD_INT 4
71107: PUSH
71108: EMPTY
71109: LIST
71110: LIST
71111: PUSH
71112: LD_INT 1
71114: PUSH
71115: LD_INT 5
71117: PUSH
71118: EMPTY
71119: LIST
71120: LIST
71121: PUSH
71122: LD_INT 0
71124: PUSH
71125: LD_INT 5
71127: PUSH
71128: EMPTY
71129: LIST
71130: LIST
71131: PUSH
71132: LD_INT 1
71134: NEG
71135: PUSH
71136: LD_INT 4
71138: PUSH
71139: EMPTY
71140: LIST
71141: LIST
71142: PUSH
71143: LD_INT 1
71145: NEG
71146: PUSH
71147: LD_INT 3
71149: PUSH
71150: EMPTY
71151: LIST
71152: LIST
71153: PUSH
71154: LD_INT 2
71156: PUSH
71157: LD_INT 5
71159: PUSH
71160: EMPTY
71161: LIST
71162: LIST
71163: PUSH
71164: LD_INT 2
71166: NEG
71167: PUSH
71168: LD_INT 3
71170: PUSH
71171: EMPTY
71172: LIST
71173: LIST
71174: PUSH
71175: EMPTY
71176: LIST
71177: LIST
71178: LIST
71179: LIST
71180: LIST
71181: LIST
71182: LIST
71183: LIST
71184: LIST
71185: LIST
71186: LIST
71187: LIST
71188: LIST
71189: LIST
71190: LIST
71191: LIST
71192: LIST
71193: LIST
71194: LIST
71195: LIST
71196: LIST
71197: LIST
71198: LIST
71199: LIST
71200: LIST
71201: LIST
71202: LIST
71203: LIST
71204: LIST
71205: LIST
71206: LIST
71207: LIST
71208: LIST
71209: LIST
71210: LIST
71211: LIST
71212: LIST
71213: LIST
71214: LIST
71215: LIST
71216: LIST
71217: LIST
71218: LIST
71219: LIST
71220: LIST
71221: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
71222: LD_ADDR_VAR 0 34
71226: PUSH
71227: LD_INT 0
71229: PUSH
71230: LD_INT 4
71232: NEG
71233: PUSH
71234: EMPTY
71235: LIST
71236: LIST
71237: PUSH
71238: LD_INT 0
71240: PUSH
71241: LD_INT 5
71243: NEG
71244: PUSH
71245: EMPTY
71246: LIST
71247: LIST
71248: PUSH
71249: LD_INT 1
71251: PUSH
71252: LD_INT 4
71254: NEG
71255: PUSH
71256: EMPTY
71257: LIST
71258: LIST
71259: PUSH
71260: LD_INT 1
71262: PUSH
71263: LD_INT 3
71265: NEG
71266: PUSH
71267: EMPTY
71268: LIST
71269: LIST
71270: PUSH
71271: LD_INT 0
71273: PUSH
71274: LD_INT 3
71276: NEG
71277: PUSH
71278: EMPTY
71279: LIST
71280: LIST
71281: PUSH
71282: LD_INT 1
71284: NEG
71285: PUSH
71286: LD_INT 4
71288: NEG
71289: PUSH
71290: EMPTY
71291: LIST
71292: LIST
71293: PUSH
71294: LD_INT 1
71296: NEG
71297: PUSH
71298: LD_INT 5
71300: NEG
71301: PUSH
71302: EMPTY
71303: LIST
71304: LIST
71305: PUSH
71306: LD_INT 2
71308: PUSH
71309: LD_INT 3
71311: NEG
71312: PUSH
71313: EMPTY
71314: LIST
71315: LIST
71316: PUSH
71317: LD_INT 2
71319: NEG
71320: PUSH
71321: LD_INT 5
71323: NEG
71324: PUSH
71325: EMPTY
71326: LIST
71327: LIST
71328: PUSH
71329: LD_INT 3
71331: PUSH
71332: LD_INT 0
71334: PUSH
71335: EMPTY
71336: LIST
71337: LIST
71338: PUSH
71339: LD_INT 3
71341: PUSH
71342: LD_INT 1
71344: NEG
71345: PUSH
71346: EMPTY
71347: LIST
71348: LIST
71349: PUSH
71350: LD_INT 4
71352: PUSH
71353: LD_INT 0
71355: PUSH
71356: EMPTY
71357: LIST
71358: LIST
71359: PUSH
71360: LD_INT 4
71362: PUSH
71363: LD_INT 1
71365: PUSH
71366: EMPTY
71367: LIST
71368: LIST
71369: PUSH
71370: LD_INT 3
71372: PUSH
71373: LD_INT 1
71375: PUSH
71376: EMPTY
71377: LIST
71378: LIST
71379: PUSH
71380: LD_INT 2
71382: PUSH
71383: LD_INT 0
71385: PUSH
71386: EMPTY
71387: LIST
71388: LIST
71389: PUSH
71390: LD_INT 2
71392: PUSH
71393: LD_INT 1
71395: NEG
71396: PUSH
71397: EMPTY
71398: LIST
71399: LIST
71400: PUSH
71401: LD_INT 2
71403: PUSH
71404: LD_INT 2
71406: NEG
71407: PUSH
71408: EMPTY
71409: LIST
71410: LIST
71411: PUSH
71412: LD_INT 4
71414: PUSH
71415: LD_INT 2
71417: PUSH
71418: EMPTY
71419: LIST
71420: LIST
71421: PUSH
71422: LD_INT 4
71424: PUSH
71425: LD_INT 4
71427: PUSH
71428: EMPTY
71429: LIST
71430: LIST
71431: PUSH
71432: LD_INT 4
71434: PUSH
71435: LD_INT 3
71437: PUSH
71438: EMPTY
71439: LIST
71440: LIST
71441: PUSH
71442: LD_INT 5
71444: PUSH
71445: LD_INT 4
71447: PUSH
71448: EMPTY
71449: LIST
71450: LIST
71451: PUSH
71452: LD_INT 5
71454: PUSH
71455: LD_INT 5
71457: PUSH
71458: EMPTY
71459: LIST
71460: LIST
71461: PUSH
71462: LD_INT 4
71464: PUSH
71465: LD_INT 5
71467: PUSH
71468: EMPTY
71469: LIST
71470: LIST
71471: PUSH
71472: LD_INT 3
71474: PUSH
71475: LD_INT 4
71477: PUSH
71478: EMPTY
71479: LIST
71480: LIST
71481: PUSH
71482: LD_INT 3
71484: PUSH
71485: LD_INT 3
71487: PUSH
71488: EMPTY
71489: LIST
71490: LIST
71491: PUSH
71492: LD_INT 5
71494: PUSH
71495: LD_INT 3
71497: PUSH
71498: EMPTY
71499: LIST
71500: LIST
71501: PUSH
71502: LD_INT 3
71504: PUSH
71505: LD_INT 5
71507: PUSH
71508: EMPTY
71509: LIST
71510: LIST
71511: PUSH
71512: LD_INT 0
71514: PUSH
71515: LD_INT 3
71517: PUSH
71518: EMPTY
71519: LIST
71520: LIST
71521: PUSH
71522: LD_INT 0
71524: PUSH
71525: LD_INT 2
71527: PUSH
71528: EMPTY
71529: LIST
71530: LIST
71531: PUSH
71532: LD_INT 1
71534: PUSH
71535: LD_INT 3
71537: PUSH
71538: EMPTY
71539: LIST
71540: LIST
71541: PUSH
71542: LD_INT 1
71544: PUSH
71545: LD_INT 4
71547: PUSH
71548: EMPTY
71549: LIST
71550: LIST
71551: PUSH
71552: LD_INT 0
71554: PUSH
71555: LD_INT 4
71557: PUSH
71558: EMPTY
71559: LIST
71560: LIST
71561: PUSH
71562: LD_INT 1
71564: NEG
71565: PUSH
71566: LD_INT 3
71568: PUSH
71569: EMPTY
71570: LIST
71571: LIST
71572: PUSH
71573: LD_INT 1
71575: NEG
71576: PUSH
71577: LD_INT 2
71579: PUSH
71580: EMPTY
71581: LIST
71582: LIST
71583: PUSH
71584: LD_INT 2
71586: PUSH
71587: LD_INT 4
71589: PUSH
71590: EMPTY
71591: LIST
71592: LIST
71593: PUSH
71594: LD_INT 2
71596: NEG
71597: PUSH
71598: LD_INT 2
71600: PUSH
71601: EMPTY
71602: LIST
71603: LIST
71604: PUSH
71605: LD_INT 4
71607: NEG
71608: PUSH
71609: LD_INT 0
71611: PUSH
71612: EMPTY
71613: LIST
71614: LIST
71615: PUSH
71616: LD_INT 4
71618: NEG
71619: PUSH
71620: LD_INT 1
71622: NEG
71623: PUSH
71624: EMPTY
71625: LIST
71626: LIST
71627: PUSH
71628: LD_INT 3
71630: NEG
71631: PUSH
71632: LD_INT 0
71634: PUSH
71635: EMPTY
71636: LIST
71637: LIST
71638: PUSH
71639: LD_INT 3
71641: NEG
71642: PUSH
71643: LD_INT 1
71645: PUSH
71646: EMPTY
71647: LIST
71648: LIST
71649: PUSH
71650: LD_INT 4
71652: NEG
71653: PUSH
71654: LD_INT 1
71656: PUSH
71657: EMPTY
71658: LIST
71659: LIST
71660: PUSH
71661: LD_INT 5
71663: NEG
71664: PUSH
71665: LD_INT 0
71667: PUSH
71668: EMPTY
71669: LIST
71670: LIST
71671: PUSH
71672: LD_INT 5
71674: NEG
71675: PUSH
71676: LD_INT 1
71678: NEG
71679: PUSH
71680: EMPTY
71681: LIST
71682: LIST
71683: PUSH
71684: LD_INT 5
71686: NEG
71687: PUSH
71688: LD_INT 2
71690: NEG
71691: PUSH
71692: EMPTY
71693: LIST
71694: LIST
71695: PUSH
71696: LD_INT 3
71698: NEG
71699: PUSH
71700: LD_INT 2
71702: PUSH
71703: EMPTY
71704: LIST
71705: LIST
71706: PUSH
71707: EMPTY
71708: LIST
71709: LIST
71710: LIST
71711: LIST
71712: LIST
71713: LIST
71714: LIST
71715: LIST
71716: LIST
71717: LIST
71718: LIST
71719: LIST
71720: LIST
71721: LIST
71722: LIST
71723: LIST
71724: LIST
71725: LIST
71726: LIST
71727: LIST
71728: LIST
71729: LIST
71730: LIST
71731: LIST
71732: LIST
71733: LIST
71734: LIST
71735: LIST
71736: LIST
71737: LIST
71738: LIST
71739: LIST
71740: LIST
71741: LIST
71742: LIST
71743: LIST
71744: LIST
71745: LIST
71746: LIST
71747: LIST
71748: LIST
71749: LIST
71750: LIST
71751: LIST
71752: LIST
71753: ST_TO_ADDR
// end ; end ;
71754: GO 71757
71756: POP
// case btype of b_depot , b_warehouse :
71757: LD_VAR 0 1
71761: PUSH
71762: LD_INT 0
71764: DOUBLE
71765: EQUAL
71766: IFTRUE 71776
71768: LD_INT 1
71770: DOUBLE
71771: EQUAL
71772: IFTRUE 71776
71774: GO 71977
71776: POP
// case nation of nation_american :
71777: LD_VAR 0 5
71781: PUSH
71782: LD_INT 1
71784: DOUBLE
71785: EQUAL
71786: IFTRUE 71790
71788: GO 71846
71790: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71791: LD_ADDR_VAR 0 9
71795: PUSH
71796: LD_VAR 0 11
71800: PUSH
71801: LD_VAR 0 12
71805: PUSH
71806: LD_VAR 0 13
71810: PUSH
71811: LD_VAR 0 14
71815: PUSH
71816: LD_VAR 0 15
71820: PUSH
71821: LD_VAR 0 16
71825: PUSH
71826: EMPTY
71827: LIST
71828: LIST
71829: LIST
71830: LIST
71831: LIST
71832: LIST
71833: PUSH
71834: LD_VAR 0 4
71838: PUSH
71839: LD_INT 1
71841: PLUS
71842: ARRAY
71843: ST_TO_ADDR
71844: GO 71975
71846: LD_INT 2
71848: DOUBLE
71849: EQUAL
71850: IFTRUE 71854
71852: GO 71910
71854: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71855: LD_ADDR_VAR 0 9
71859: PUSH
71860: LD_VAR 0 17
71864: PUSH
71865: LD_VAR 0 18
71869: PUSH
71870: LD_VAR 0 19
71874: PUSH
71875: LD_VAR 0 20
71879: PUSH
71880: LD_VAR 0 21
71884: PUSH
71885: LD_VAR 0 22
71889: PUSH
71890: EMPTY
71891: LIST
71892: LIST
71893: LIST
71894: LIST
71895: LIST
71896: LIST
71897: PUSH
71898: LD_VAR 0 4
71902: PUSH
71903: LD_INT 1
71905: PLUS
71906: ARRAY
71907: ST_TO_ADDR
71908: GO 71975
71910: LD_INT 3
71912: DOUBLE
71913: EQUAL
71914: IFTRUE 71918
71916: GO 71974
71918: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71919: LD_ADDR_VAR 0 9
71923: PUSH
71924: LD_VAR 0 23
71928: PUSH
71929: LD_VAR 0 24
71933: PUSH
71934: LD_VAR 0 25
71938: PUSH
71939: LD_VAR 0 26
71943: PUSH
71944: LD_VAR 0 27
71948: PUSH
71949: LD_VAR 0 28
71953: PUSH
71954: EMPTY
71955: LIST
71956: LIST
71957: LIST
71958: LIST
71959: LIST
71960: LIST
71961: PUSH
71962: LD_VAR 0 4
71966: PUSH
71967: LD_INT 1
71969: PLUS
71970: ARRAY
71971: ST_TO_ADDR
71972: GO 71975
71974: POP
71975: GO 72530
71977: LD_INT 2
71979: DOUBLE
71980: EQUAL
71981: IFTRUE 71991
71983: LD_INT 3
71985: DOUBLE
71986: EQUAL
71987: IFTRUE 71991
71989: GO 72047
71991: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71992: LD_ADDR_VAR 0 9
71996: PUSH
71997: LD_VAR 0 29
72001: PUSH
72002: LD_VAR 0 30
72006: PUSH
72007: LD_VAR 0 31
72011: PUSH
72012: LD_VAR 0 32
72016: PUSH
72017: LD_VAR 0 33
72021: PUSH
72022: LD_VAR 0 34
72026: PUSH
72027: EMPTY
72028: LIST
72029: LIST
72030: LIST
72031: LIST
72032: LIST
72033: LIST
72034: PUSH
72035: LD_VAR 0 4
72039: PUSH
72040: LD_INT 1
72042: PLUS
72043: ARRAY
72044: ST_TO_ADDR
72045: GO 72530
72047: LD_INT 16
72049: DOUBLE
72050: EQUAL
72051: IFTRUE 72109
72053: LD_INT 17
72055: DOUBLE
72056: EQUAL
72057: IFTRUE 72109
72059: LD_INT 18
72061: DOUBLE
72062: EQUAL
72063: IFTRUE 72109
72065: LD_INT 19
72067: DOUBLE
72068: EQUAL
72069: IFTRUE 72109
72071: LD_INT 22
72073: DOUBLE
72074: EQUAL
72075: IFTRUE 72109
72077: LD_INT 20
72079: DOUBLE
72080: EQUAL
72081: IFTRUE 72109
72083: LD_INT 21
72085: DOUBLE
72086: EQUAL
72087: IFTRUE 72109
72089: LD_INT 23
72091: DOUBLE
72092: EQUAL
72093: IFTRUE 72109
72095: LD_INT 24
72097: DOUBLE
72098: EQUAL
72099: IFTRUE 72109
72101: LD_INT 25
72103: DOUBLE
72104: EQUAL
72105: IFTRUE 72109
72107: GO 72165
72109: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
72110: LD_ADDR_VAR 0 9
72114: PUSH
72115: LD_VAR 0 35
72119: PUSH
72120: LD_VAR 0 36
72124: PUSH
72125: LD_VAR 0 37
72129: PUSH
72130: LD_VAR 0 38
72134: PUSH
72135: LD_VAR 0 39
72139: PUSH
72140: LD_VAR 0 40
72144: PUSH
72145: EMPTY
72146: LIST
72147: LIST
72148: LIST
72149: LIST
72150: LIST
72151: LIST
72152: PUSH
72153: LD_VAR 0 4
72157: PUSH
72158: LD_INT 1
72160: PLUS
72161: ARRAY
72162: ST_TO_ADDR
72163: GO 72530
72165: LD_INT 6
72167: DOUBLE
72168: EQUAL
72169: IFTRUE 72221
72171: LD_INT 7
72173: DOUBLE
72174: EQUAL
72175: IFTRUE 72221
72177: LD_INT 8
72179: DOUBLE
72180: EQUAL
72181: IFTRUE 72221
72183: LD_INT 13
72185: DOUBLE
72186: EQUAL
72187: IFTRUE 72221
72189: LD_INT 12
72191: DOUBLE
72192: EQUAL
72193: IFTRUE 72221
72195: LD_INT 15
72197: DOUBLE
72198: EQUAL
72199: IFTRUE 72221
72201: LD_INT 11
72203: DOUBLE
72204: EQUAL
72205: IFTRUE 72221
72207: LD_INT 14
72209: DOUBLE
72210: EQUAL
72211: IFTRUE 72221
72213: LD_INT 10
72215: DOUBLE
72216: EQUAL
72217: IFTRUE 72221
72219: GO 72277
72221: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
72222: LD_ADDR_VAR 0 9
72226: PUSH
72227: LD_VAR 0 41
72231: PUSH
72232: LD_VAR 0 42
72236: PUSH
72237: LD_VAR 0 43
72241: PUSH
72242: LD_VAR 0 44
72246: PUSH
72247: LD_VAR 0 45
72251: PUSH
72252: LD_VAR 0 46
72256: PUSH
72257: EMPTY
72258: LIST
72259: LIST
72260: LIST
72261: LIST
72262: LIST
72263: LIST
72264: PUSH
72265: LD_VAR 0 4
72269: PUSH
72270: LD_INT 1
72272: PLUS
72273: ARRAY
72274: ST_TO_ADDR
72275: GO 72530
72277: LD_INT 36
72279: DOUBLE
72280: EQUAL
72281: IFTRUE 72285
72283: GO 72341
72285: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72286: LD_ADDR_VAR 0 9
72290: PUSH
72291: LD_VAR 0 47
72295: PUSH
72296: LD_VAR 0 48
72300: PUSH
72301: LD_VAR 0 49
72305: PUSH
72306: LD_VAR 0 50
72310: PUSH
72311: LD_VAR 0 51
72315: PUSH
72316: LD_VAR 0 52
72320: PUSH
72321: EMPTY
72322: LIST
72323: LIST
72324: LIST
72325: LIST
72326: LIST
72327: LIST
72328: PUSH
72329: LD_VAR 0 4
72333: PUSH
72334: LD_INT 1
72336: PLUS
72337: ARRAY
72338: ST_TO_ADDR
72339: GO 72530
72341: LD_INT 4
72343: DOUBLE
72344: EQUAL
72345: IFTRUE 72367
72347: LD_INT 5
72349: DOUBLE
72350: EQUAL
72351: IFTRUE 72367
72353: LD_INT 34
72355: DOUBLE
72356: EQUAL
72357: IFTRUE 72367
72359: LD_INT 37
72361: DOUBLE
72362: EQUAL
72363: IFTRUE 72367
72365: GO 72423
72367: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72368: LD_ADDR_VAR 0 9
72372: PUSH
72373: LD_VAR 0 53
72377: PUSH
72378: LD_VAR 0 54
72382: PUSH
72383: LD_VAR 0 55
72387: PUSH
72388: LD_VAR 0 56
72392: PUSH
72393: LD_VAR 0 57
72397: PUSH
72398: LD_VAR 0 58
72402: PUSH
72403: EMPTY
72404: LIST
72405: LIST
72406: LIST
72407: LIST
72408: LIST
72409: LIST
72410: PUSH
72411: LD_VAR 0 4
72415: PUSH
72416: LD_INT 1
72418: PLUS
72419: ARRAY
72420: ST_TO_ADDR
72421: GO 72530
72423: LD_INT 31
72425: DOUBLE
72426: EQUAL
72427: IFTRUE 72473
72429: LD_INT 32
72431: DOUBLE
72432: EQUAL
72433: IFTRUE 72473
72435: LD_INT 33
72437: DOUBLE
72438: EQUAL
72439: IFTRUE 72473
72441: LD_INT 27
72443: DOUBLE
72444: EQUAL
72445: IFTRUE 72473
72447: LD_INT 26
72449: DOUBLE
72450: EQUAL
72451: IFTRUE 72473
72453: LD_INT 28
72455: DOUBLE
72456: EQUAL
72457: IFTRUE 72473
72459: LD_INT 29
72461: DOUBLE
72462: EQUAL
72463: IFTRUE 72473
72465: LD_INT 30
72467: DOUBLE
72468: EQUAL
72469: IFTRUE 72473
72471: GO 72529
72473: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72474: LD_ADDR_VAR 0 9
72478: PUSH
72479: LD_VAR 0 59
72483: PUSH
72484: LD_VAR 0 60
72488: PUSH
72489: LD_VAR 0 61
72493: PUSH
72494: LD_VAR 0 62
72498: PUSH
72499: LD_VAR 0 63
72503: PUSH
72504: LD_VAR 0 64
72508: PUSH
72509: EMPTY
72510: LIST
72511: LIST
72512: LIST
72513: LIST
72514: LIST
72515: LIST
72516: PUSH
72517: LD_VAR 0 4
72521: PUSH
72522: LD_INT 1
72524: PLUS
72525: ARRAY
72526: ST_TO_ADDR
72527: GO 72530
72529: POP
// temp_list2 = [ ] ;
72530: LD_ADDR_VAR 0 10
72534: PUSH
72535: EMPTY
72536: ST_TO_ADDR
// for i in temp_list do
72537: LD_ADDR_VAR 0 8
72541: PUSH
72542: LD_VAR 0 9
72546: PUSH
72547: FOR_IN
72548: IFFALSE 72600
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72550: LD_ADDR_VAR 0 10
72554: PUSH
72555: LD_VAR 0 10
72559: PUSH
72560: LD_VAR 0 8
72564: PUSH
72565: LD_INT 1
72567: ARRAY
72568: PUSH
72569: LD_VAR 0 2
72573: PLUS
72574: PUSH
72575: LD_VAR 0 8
72579: PUSH
72580: LD_INT 2
72582: ARRAY
72583: PUSH
72584: LD_VAR 0 3
72588: PLUS
72589: PUSH
72590: EMPTY
72591: LIST
72592: LIST
72593: PUSH
72594: EMPTY
72595: LIST
72596: ADD
72597: ST_TO_ADDR
72598: GO 72547
72600: POP
72601: POP
// result = temp_list2 ;
72602: LD_ADDR_VAR 0 7
72606: PUSH
72607: LD_VAR 0 10
72611: ST_TO_ADDR
// end ;
72612: LD_VAR 0 7
72616: RET
// export function EnemyInRange ( unit , dist ) ; begin
72617: LD_INT 0
72619: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72620: LD_ADDR_VAR 0 3
72624: PUSH
72625: LD_VAR 0 1
72629: PPUSH
72630: CALL_OW 255
72634: PPUSH
72635: LD_VAR 0 1
72639: PPUSH
72640: CALL_OW 250
72644: PPUSH
72645: LD_VAR 0 1
72649: PPUSH
72650: CALL_OW 251
72654: PPUSH
72655: LD_VAR 0 2
72659: PPUSH
72660: CALL 45990 0 4
72664: PUSH
72665: LD_INT 4
72667: ARRAY
72668: ST_TO_ADDR
// end ;
72669: LD_VAR 0 3
72673: RET
// export function PlayerSeeMe ( unit ) ; begin
72674: LD_INT 0
72676: PPUSH
// result := See ( your_side , unit ) ;
72677: LD_ADDR_VAR 0 2
72681: PUSH
72682: LD_OWVAR 2
72686: PPUSH
72687: LD_VAR 0 1
72691: PPUSH
72692: CALL_OW 292
72696: ST_TO_ADDR
// end ;
72697: LD_VAR 0 2
72701: RET
// export function ReverseDir ( unit ) ; begin
72702: LD_INT 0
72704: PPUSH
// if not unit then
72705: LD_VAR 0 1
72709: NOT
72710: IFFALSE 72714
// exit ;
72712: GO 72737
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72714: LD_ADDR_VAR 0 2
72718: PUSH
72719: LD_VAR 0 1
72723: PPUSH
72724: CALL_OW 254
72728: PUSH
72729: LD_INT 3
72731: PLUS
72732: PUSH
72733: LD_INT 6
72735: MOD
72736: ST_TO_ADDR
// end ;
72737: LD_VAR 0 2
72741: RET
// export function ReverseArray ( array ) ; var i ; begin
72742: LD_INT 0
72744: PPUSH
72745: PPUSH
// if not array then
72746: LD_VAR 0 1
72750: NOT
72751: IFFALSE 72755
// exit ;
72753: GO 72810
// result := [ ] ;
72755: LD_ADDR_VAR 0 2
72759: PUSH
72760: EMPTY
72761: ST_TO_ADDR
// for i := array downto 1 do
72762: LD_ADDR_VAR 0 3
72766: PUSH
72767: DOUBLE
72768: LD_VAR 0 1
72772: INC
72773: ST_TO_ADDR
72774: LD_INT 1
72776: PUSH
72777: FOR_DOWNTO
72778: IFFALSE 72808
// result := Join ( result , array [ i ] ) ;
72780: LD_ADDR_VAR 0 2
72784: PUSH
72785: LD_VAR 0 2
72789: PPUSH
72790: LD_VAR 0 1
72794: PUSH
72795: LD_VAR 0 3
72799: ARRAY
72800: PPUSH
72801: CALL 77455 0 2
72805: ST_TO_ADDR
72806: GO 72777
72808: POP
72809: POP
// end ;
72810: LD_VAR 0 2
72814: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
72815: LD_INT 0
72817: PPUSH
72818: PPUSH
72819: PPUSH
72820: PPUSH
72821: PPUSH
72822: PPUSH
// if not unit or not hexes then
72823: LD_VAR 0 1
72827: NOT
72828: PUSH
72829: LD_VAR 0 2
72833: NOT
72834: OR
72835: IFFALSE 72839
// exit ;
72837: GO 72962
// dist := 9999 ;
72839: LD_ADDR_VAR 0 5
72843: PUSH
72844: LD_INT 9999
72846: ST_TO_ADDR
// for i = 1 to hexes do
72847: LD_ADDR_VAR 0 4
72851: PUSH
72852: DOUBLE
72853: LD_INT 1
72855: DEC
72856: ST_TO_ADDR
72857: LD_VAR 0 2
72861: PUSH
72862: FOR_TO
72863: IFFALSE 72950
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72865: LD_ADDR_VAR 0 6
72869: PUSH
72870: LD_VAR 0 1
72874: PPUSH
72875: LD_VAR 0 2
72879: PUSH
72880: LD_VAR 0 4
72884: ARRAY
72885: PUSH
72886: LD_INT 1
72888: ARRAY
72889: PPUSH
72890: LD_VAR 0 2
72894: PUSH
72895: LD_VAR 0 4
72899: ARRAY
72900: PUSH
72901: LD_INT 2
72903: ARRAY
72904: PPUSH
72905: CALL_OW 297
72909: ST_TO_ADDR
// if tdist < dist then
72910: LD_VAR 0 6
72914: PUSH
72915: LD_VAR 0 5
72919: LESS
72920: IFFALSE 72948
// begin hex := hexes [ i ] ;
72922: LD_ADDR_VAR 0 8
72926: PUSH
72927: LD_VAR 0 2
72931: PUSH
72932: LD_VAR 0 4
72936: ARRAY
72937: ST_TO_ADDR
// dist := tdist ;
72938: LD_ADDR_VAR 0 5
72942: PUSH
72943: LD_VAR 0 6
72947: ST_TO_ADDR
// end ; end ;
72948: GO 72862
72950: POP
72951: POP
// result := hex ;
72952: LD_ADDR_VAR 0 3
72956: PUSH
72957: LD_VAR 0 8
72961: ST_TO_ADDR
// end ;
72962: LD_VAR 0 3
72966: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72967: LD_INT 0
72969: PPUSH
72970: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72971: LD_VAR 0 1
72975: NOT
72976: PUSH
72977: LD_VAR 0 1
72981: PUSH
72982: LD_INT 21
72984: PUSH
72985: LD_INT 2
72987: PUSH
72988: EMPTY
72989: LIST
72990: LIST
72991: PUSH
72992: LD_INT 23
72994: PUSH
72995: LD_INT 2
72997: PUSH
72998: EMPTY
72999: LIST
73000: LIST
73001: PUSH
73002: EMPTY
73003: LIST
73004: LIST
73005: PPUSH
73006: CALL_OW 69
73010: IN
73011: NOT
73012: OR
73013: IFFALSE 73017
// exit ;
73015: GO 73064
// for i = 1 to 3 do
73017: LD_ADDR_VAR 0 3
73021: PUSH
73022: DOUBLE
73023: LD_INT 1
73025: DEC
73026: ST_TO_ADDR
73027: LD_INT 3
73029: PUSH
73030: FOR_TO
73031: IFFALSE 73062
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
73033: LD_VAR 0 1
73037: PPUSH
73038: CALL_OW 250
73042: PPUSH
73043: LD_VAR 0 1
73047: PPUSH
73048: CALL_OW 251
73052: PPUSH
73053: LD_INT 1
73055: PPUSH
73056: CALL_OW 453
73060: GO 73030
73062: POP
73063: POP
// end ;
73064: LD_VAR 0 2
73068: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
73069: LD_INT 0
73071: PPUSH
73072: PPUSH
73073: PPUSH
73074: PPUSH
73075: PPUSH
73076: PPUSH
// if not unit or not enemy_unit then
73077: LD_VAR 0 1
73081: NOT
73082: PUSH
73083: LD_VAR 0 2
73087: NOT
73088: OR
73089: IFFALSE 73093
// exit ;
73091: GO 73560
// if GetLives ( i ) < 250 then
73093: LD_VAR 0 4
73097: PPUSH
73098: CALL_OW 256
73102: PUSH
73103: LD_INT 250
73105: LESS
73106: IFFALSE 73119
// begin ComAutodestruct ( i ) ;
73108: LD_VAR 0 4
73112: PPUSH
73113: CALL 72967 0 1
// exit ;
73117: GO 73560
// end ; x := GetX ( enemy_unit ) ;
73119: LD_ADDR_VAR 0 7
73123: PUSH
73124: LD_VAR 0 2
73128: PPUSH
73129: CALL_OW 250
73133: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
73134: LD_ADDR_VAR 0 8
73138: PUSH
73139: LD_VAR 0 2
73143: PPUSH
73144: CALL_OW 251
73148: ST_TO_ADDR
// if not x or not y then
73149: LD_VAR 0 7
73153: NOT
73154: PUSH
73155: LD_VAR 0 8
73159: NOT
73160: OR
73161: IFFALSE 73165
// exit ;
73163: GO 73560
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
73165: LD_ADDR_VAR 0 6
73169: PUSH
73170: LD_VAR 0 7
73174: PPUSH
73175: LD_INT 0
73177: PPUSH
73178: LD_INT 4
73180: PPUSH
73181: CALL_OW 272
73185: PUSH
73186: LD_VAR 0 8
73190: PPUSH
73191: LD_INT 0
73193: PPUSH
73194: LD_INT 4
73196: PPUSH
73197: CALL_OW 273
73201: PUSH
73202: EMPTY
73203: LIST
73204: LIST
73205: PUSH
73206: LD_VAR 0 7
73210: PPUSH
73211: LD_INT 1
73213: PPUSH
73214: LD_INT 4
73216: PPUSH
73217: CALL_OW 272
73221: PUSH
73222: LD_VAR 0 8
73226: PPUSH
73227: LD_INT 1
73229: PPUSH
73230: LD_INT 4
73232: PPUSH
73233: CALL_OW 273
73237: PUSH
73238: EMPTY
73239: LIST
73240: LIST
73241: PUSH
73242: LD_VAR 0 7
73246: PPUSH
73247: LD_INT 2
73249: PPUSH
73250: LD_INT 4
73252: PPUSH
73253: CALL_OW 272
73257: PUSH
73258: LD_VAR 0 8
73262: PPUSH
73263: LD_INT 2
73265: PPUSH
73266: LD_INT 4
73268: PPUSH
73269: CALL_OW 273
73273: PUSH
73274: EMPTY
73275: LIST
73276: LIST
73277: PUSH
73278: LD_VAR 0 7
73282: PPUSH
73283: LD_INT 3
73285: PPUSH
73286: LD_INT 4
73288: PPUSH
73289: CALL_OW 272
73293: PUSH
73294: LD_VAR 0 8
73298: PPUSH
73299: LD_INT 3
73301: PPUSH
73302: LD_INT 4
73304: PPUSH
73305: CALL_OW 273
73309: PUSH
73310: EMPTY
73311: LIST
73312: LIST
73313: PUSH
73314: LD_VAR 0 7
73318: PPUSH
73319: LD_INT 4
73321: PPUSH
73322: LD_INT 4
73324: PPUSH
73325: CALL_OW 272
73329: PUSH
73330: LD_VAR 0 8
73334: PPUSH
73335: LD_INT 4
73337: PPUSH
73338: LD_INT 4
73340: PPUSH
73341: CALL_OW 273
73345: PUSH
73346: EMPTY
73347: LIST
73348: LIST
73349: PUSH
73350: LD_VAR 0 7
73354: PPUSH
73355: LD_INT 5
73357: PPUSH
73358: LD_INT 4
73360: PPUSH
73361: CALL_OW 272
73365: PUSH
73366: LD_VAR 0 8
73370: PPUSH
73371: LD_INT 5
73373: PPUSH
73374: LD_INT 4
73376: PPUSH
73377: CALL_OW 273
73381: PUSH
73382: EMPTY
73383: LIST
73384: LIST
73385: PUSH
73386: EMPTY
73387: LIST
73388: LIST
73389: LIST
73390: LIST
73391: LIST
73392: LIST
73393: ST_TO_ADDR
// for i = tmp downto 1 do
73394: LD_ADDR_VAR 0 4
73398: PUSH
73399: DOUBLE
73400: LD_VAR 0 6
73404: INC
73405: ST_TO_ADDR
73406: LD_INT 1
73408: PUSH
73409: FOR_DOWNTO
73410: IFFALSE 73511
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73412: LD_VAR 0 6
73416: PUSH
73417: LD_VAR 0 4
73421: ARRAY
73422: PUSH
73423: LD_INT 1
73425: ARRAY
73426: PPUSH
73427: LD_VAR 0 6
73431: PUSH
73432: LD_VAR 0 4
73436: ARRAY
73437: PUSH
73438: LD_INT 2
73440: ARRAY
73441: PPUSH
73442: CALL_OW 488
73446: NOT
73447: PUSH
73448: LD_VAR 0 6
73452: PUSH
73453: LD_VAR 0 4
73457: ARRAY
73458: PUSH
73459: LD_INT 1
73461: ARRAY
73462: PPUSH
73463: LD_VAR 0 6
73467: PUSH
73468: LD_VAR 0 4
73472: ARRAY
73473: PUSH
73474: LD_INT 2
73476: ARRAY
73477: PPUSH
73478: CALL_OW 428
73482: PUSH
73483: LD_INT 0
73485: NONEQUAL
73486: OR
73487: IFFALSE 73509
// tmp := Delete ( tmp , i ) ;
73489: LD_ADDR_VAR 0 6
73493: PUSH
73494: LD_VAR 0 6
73498: PPUSH
73499: LD_VAR 0 4
73503: PPUSH
73504: CALL_OW 3
73508: ST_TO_ADDR
73509: GO 73409
73511: POP
73512: POP
// j := GetClosestHex ( unit , tmp ) ;
73513: LD_ADDR_VAR 0 5
73517: PUSH
73518: LD_VAR 0 1
73522: PPUSH
73523: LD_VAR 0 6
73527: PPUSH
73528: CALL 72815 0 2
73532: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73533: LD_VAR 0 1
73537: PPUSH
73538: LD_VAR 0 5
73542: PUSH
73543: LD_INT 1
73545: ARRAY
73546: PPUSH
73547: LD_VAR 0 5
73551: PUSH
73552: LD_INT 2
73554: ARRAY
73555: PPUSH
73556: CALL_OW 111
// end ;
73560: LD_VAR 0 3
73564: RET
// export function PrepareApemanSoldier ( ) ; begin
73565: LD_INT 0
73567: PPUSH
// uc_nation := 0 ;
73568: LD_ADDR_OWVAR 21
73572: PUSH
73573: LD_INT 0
73575: ST_TO_ADDR
// hc_sex := sex_male ;
73576: LD_ADDR_OWVAR 27
73580: PUSH
73581: LD_INT 1
73583: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73584: LD_ADDR_OWVAR 28
73588: PUSH
73589: LD_INT 15
73591: ST_TO_ADDR
// hc_gallery :=  ;
73592: LD_ADDR_OWVAR 33
73596: PUSH
73597: LD_STRING 
73599: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73600: LD_ADDR_OWVAR 31
73604: PUSH
73605: LD_INT 0
73607: PPUSH
73608: LD_INT 3
73610: PPUSH
73611: CALL_OW 12
73615: PUSH
73616: LD_INT 0
73618: PPUSH
73619: LD_INT 3
73621: PPUSH
73622: CALL_OW 12
73626: PUSH
73627: LD_INT 0
73629: PUSH
73630: LD_INT 0
73632: PUSH
73633: EMPTY
73634: LIST
73635: LIST
73636: LIST
73637: LIST
73638: ST_TO_ADDR
// end ;
73639: LD_VAR 0 1
73643: RET
// export function PrepareApemanEngineer ( ) ; begin
73644: LD_INT 0
73646: PPUSH
// uc_nation := 0 ;
73647: LD_ADDR_OWVAR 21
73651: PUSH
73652: LD_INT 0
73654: ST_TO_ADDR
// hc_sex := sex_male ;
73655: LD_ADDR_OWVAR 27
73659: PUSH
73660: LD_INT 1
73662: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73663: LD_ADDR_OWVAR 28
73667: PUSH
73668: LD_INT 16
73670: ST_TO_ADDR
// hc_gallery :=  ;
73671: LD_ADDR_OWVAR 33
73675: PUSH
73676: LD_STRING 
73678: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73679: LD_ADDR_OWVAR 31
73683: PUSH
73684: LD_INT 0
73686: PPUSH
73687: LD_INT 3
73689: PPUSH
73690: CALL_OW 12
73694: PUSH
73695: LD_INT 0
73697: PPUSH
73698: LD_INT 3
73700: PPUSH
73701: CALL_OW 12
73705: PUSH
73706: LD_INT 0
73708: PUSH
73709: LD_INT 0
73711: PUSH
73712: EMPTY
73713: LIST
73714: LIST
73715: LIST
73716: LIST
73717: ST_TO_ADDR
// end ;
73718: LD_VAR 0 1
73722: RET
// export function PrepareApeman ( agressivity ) ; begin
73723: LD_INT 0
73725: PPUSH
// uc_side := 0 ;
73726: LD_ADDR_OWVAR 20
73730: PUSH
73731: LD_INT 0
73733: ST_TO_ADDR
// uc_nation := 0 ;
73734: LD_ADDR_OWVAR 21
73738: PUSH
73739: LD_INT 0
73741: ST_TO_ADDR
// hc_sex := sex_male ;
73742: LD_ADDR_OWVAR 27
73746: PUSH
73747: LD_INT 1
73749: ST_TO_ADDR
// hc_class := class_apeman ;
73750: LD_ADDR_OWVAR 28
73754: PUSH
73755: LD_INT 12
73757: ST_TO_ADDR
// hc_gallery :=  ;
73758: LD_ADDR_OWVAR 33
73762: PUSH
73763: LD_STRING 
73765: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73766: LD_ADDR_OWVAR 35
73770: PUSH
73771: LD_VAR 0 1
73775: NEG
73776: PPUSH
73777: LD_VAR 0 1
73781: PPUSH
73782: CALL_OW 12
73786: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73787: LD_ADDR_OWVAR 31
73791: PUSH
73792: LD_INT 0
73794: PPUSH
73795: LD_INT 3
73797: PPUSH
73798: CALL_OW 12
73802: PUSH
73803: LD_INT 0
73805: PPUSH
73806: LD_INT 3
73808: PPUSH
73809: CALL_OW 12
73813: PUSH
73814: LD_INT 0
73816: PUSH
73817: LD_INT 0
73819: PUSH
73820: EMPTY
73821: LIST
73822: LIST
73823: LIST
73824: LIST
73825: ST_TO_ADDR
// end ;
73826: LD_VAR 0 2
73830: RET
// export function PrepareTiger ( agressivity ) ; begin
73831: LD_INT 0
73833: PPUSH
// uc_side := 0 ;
73834: LD_ADDR_OWVAR 20
73838: PUSH
73839: LD_INT 0
73841: ST_TO_ADDR
// uc_nation := 0 ;
73842: LD_ADDR_OWVAR 21
73846: PUSH
73847: LD_INT 0
73849: ST_TO_ADDR
// hc_class := class_tiger ;
73850: LD_ADDR_OWVAR 28
73854: PUSH
73855: LD_INT 14
73857: ST_TO_ADDR
// hc_gallery :=  ;
73858: LD_ADDR_OWVAR 33
73862: PUSH
73863: LD_STRING 
73865: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73866: LD_ADDR_OWVAR 35
73870: PUSH
73871: LD_VAR 0 1
73875: NEG
73876: PPUSH
73877: LD_VAR 0 1
73881: PPUSH
73882: CALL_OW 12
73886: ST_TO_ADDR
// end ;
73887: LD_VAR 0 2
73891: RET
// export function PrepareEnchidna ( ) ; begin
73892: LD_INT 0
73894: PPUSH
// uc_side := 0 ;
73895: LD_ADDR_OWVAR 20
73899: PUSH
73900: LD_INT 0
73902: ST_TO_ADDR
// uc_nation := 0 ;
73903: LD_ADDR_OWVAR 21
73907: PUSH
73908: LD_INT 0
73910: ST_TO_ADDR
// hc_class := class_baggie ;
73911: LD_ADDR_OWVAR 28
73915: PUSH
73916: LD_INT 13
73918: ST_TO_ADDR
// hc_gallery :=  ;
73919: LD_ADDR_OWVAR 33
73923: PUSH
73924: LD_STRING 
73926: ST_TO_ADDR
// end ;
73927: LD_VAR 0 1
73931: RET
// export function PrepareFrog ( ) ; begin
73932: LD_INT 0
73934: PPUSH
// uc_side := 0 ;
73935: LD_ADDR_OWVAR 20
73939: PUSH
73940: LD_INT 0
73942: ST_TO_ADDR
// uc_nation := 0 ;
73943: LD_ADDR_OWVAR 21
73947: PUSH
73948: LD_INT 0
73950: ST_TO_ADDR
// hc_class := class_frog ;
73951: LD_ADDR_OWVAR 28
73955: PUSH
73956: LD_INT 19
73958: ST_TO_ADDR
// hc_gallery :=  ;
73959: LD_ADDR_OWVAR 33
73963: PUSH
73964: LD_STRING 
73966: ST_TO_ADDR
// end ;
73967: LD_VAR 0 1
73971: RET
// export function PrepareFish ( ) ; begin
73972: LD_INT 0
73974: PPUSH
// uc_side := 0 ;
73975: LD_ADDR_OWVAR 20
73979: PUSH
73980: LD_INT 0
73982: ST_TO_ADDR
// uc_nation := 0 ;
73983: LD_ADDR_OWVAR 21
73987: PUSH
73988: LD_INT 0
73990: ST_TO_ADDR
// hc_class := class_fish ;
73991: LD_ADDR_OWVAR 28
73995: PUSH
73996: LD_INT 20
73998: ST_TO_ADDR
// hc_gallery :=  ;
73999: LD_ADDR_OWVAR 33
74003: PUSH
74004: LD_STRING 
74006: ST_TO_ADDR
// end ;
74007: LD_VAR 0 1
74011: RET
// export function PrepareBird ( ) ; begin
74012: LD_INT 0
74014: PPUSH
// uc_side := 0 ;
74015: LD_ADDR_OWVAR 20
74019: PUSH
74020: LD_INT 0
74022: ST_TO_ADDR
// uc_nation := 0 ;
74023: LD_ADDR_OWVAR 21
74027: PUSH
74028: LD_INT 0
74030: ST_TO_ADDR
// hc_class := class_phororhacos ;
74031: LD_ADDR_OWVAR 28
74035: PUSH
74036: LD_INT 18
74038: ST_TO_ADDR
// hc_gallery :=  ;
74039: LD_ADDR_OWVAR 33
74043: PUSH
74044: LD_STRING 
74046: ST_TO_ADDR
// end ;
74047: LD_VAR 0 1
74051: RET
// export function PrepareHorse ( ) ; begin
74052: LD_INT 0
74054: PPUSH
// uc_side := 0 ;
74055: LD_ADDR_OWVAR 20
74059: PUSH
74060: LD_INT 0
74062: ST_TO_ADDR
// uc_nation := 0 ;
74063: LD_ADDR_OWVAR 21
74067: PUSH
74068: LD_INT 0
74070: ST_TO_ADDR
// hc_class := class_horse ;
74071: LD_ADDR_OWVAR 28
74075: PUSH
74076: LD_INT 21
74078: ST_TO_ADDR
// hc_gallery :=  ;
74079: LD_ADDR_OWVAR 33
74083: PUSH
74084: LD_STRING 
74086: ST_TO_ADDR
// end ;
74087: LD_VAR 0 1
74091: RET
// export function PrepareMastodont ( ) ; begin
74092: LD_INT 0
74094: PPUSH
// uc_side := 0 ;
74095: LD_ADDR_OWVAR 20
74099: PUSH
74100: LD_INT 0
74102: ST_TO_ADDR
// uc_nation := 0 ;
74103: LD_ADDR_OWVAR 21
74107: PUSH
74108: LD_INT 0
74110: ST_TO_ADDR
// vc_chassis := class_mastodont ;
74111: LD_ADDR_OWVAR 37
74115: PUSH
74116: LD_INT 31
74118: ST_TO_ADDR
// vc_control := control_rider ;
74119: LD_ADDR_OWVAR 38
74123: PUSH
74124: LD_INT 4
74126: ST_TO_ADDR
// end ;
74127: LD_VAR 0 1
74131: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
74132: LD_INT 0
74134: PPUSH
74135: PPUSH
74136: PPUSH
// uc_side = 0 ;
74137: LD_ADDR_OWVAR 20
74141: PUSH
74142: LD_INT 0
74144: ST_TO_ADDR
// uc_nation = 0 ;
74145: LD_ADDR_OWVAR 21
74149: PUSH
74150: LD_INT 0
74152: ST_TO_ADDR
// InitHc_All ( ) ;
74153: CALL_OW 584
// InitVc ;
74157: CALL_OW 20
// if mastodonts then
74161: LD_VAR 0 6
74165: IFFALSE 74232
// for i = 1 to mastodonts do
74167: LD_ADDR_VAR 0 11
74171: PUSH
74172: DOUBLE
74173: LD_INT 1
74175: DEC
74176: ST_TO_ADDR
74177: LD_VAR 0 6
74181: PUSH
74182: FOR_TO
74183: IFFALSE 74230
// begin vc_chassis := 31 ;
74185: LD_ADDR_OWVAR 37
74189: PUSH
74190: LD_INT 31
74192: ST_TO_ADDR
// vc_control := control_rider ;
74193: LD_ADDR_OWVAR 38
74197: PUSH
74198: LD_INT 4
74200: ST_TO_ADDR
// animal := CreateVehicle ;
74201: LD_ADDR_VAR 0 12
74205: PUSH
74206: CALL_OW 45
74210: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74211: LD_VAR 0 12
74215: PPUSH
74216: LD_VAR 0 8
74220: PPUSH
74221: LD_INT 0
74223: PPUSH
74224: CALL 76360 0 3
// end ;
74228: GO 74182
74230: POP
74231: POP
// if horses then
74232: LD_VAR 0 5
74236: IFFALSE 74303
// for i = 1 to horses do
74238: LD_ADDR_VAR 0 11
74242: PUSH
74243: DOUBLE
74244: LD_INT 1
74246: DEC
74247: ST_TO_ADDR
74248: LD_VAR 0 5
74252: PUSH
74253: FOR_TO
74254: IFFALSE 74301
// begin hc_class := 21 ;
74256: LD_ADDR_OWVAR 28
74260: PUSH
74261: LD_INT 21
74263: ST_TO_ADDR
// hc_gallery :=  ;
74264: LD_ADDR_OWVAR 33
74268: PUSH
74269: LD_STRING 
74271: ST_TO_ADDR
// animal := CreateHuman ;
74272: LD_ADDR_VAR 0 12
74276: PUSH
74277: CALL_OW 44
74281: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74282: LD_VAR 0 12
74286: PPUSH
74287: LD_VAR 0 8
74291: PPUSH
74292: LD_INT 0
74294: PPUSH
74295: CALL 76360 0 3
// end ;
74299: GO 74253
74301: POP
74302: POP
// if birds then
74303: LD_VAR 0 1
74307: IFFALSE 74374
// for i = 1 to birds do
74309: LD_ADDR_VAR 0 11
74313: PUSH
74314: DOUBLE
74315: LD_INT 1
74317: DEC
74318: ST_TO_ADDR
74319: LD_VAR 0 1
74323: PUSH
74324: FOR_TO
74325: IFFALSE 74372
// begin hc_class := 18 ;
74327: LD_ADDR_OWVAR 28
74331: PUSH
74332: LD_INT 18
74334: ST_TO_ADDR
// hc_gallery =  ;
74335: LD_ADDR_OWVAR 33
74339: PUSH
74340: LD_STRING 
74342: ST_TO_ADDR
// animal := CreateHuman ;
74343: LD_ADDR_VAR 0 12
74347: PUSH
74348: CALL_OW 44
74352: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74353: LD_VAR 0 12
74357: PPUSH
74358: LD_VAR 0 8
74362: PPUSH
74363: LD_INT 0
74365: PPUSH
74366: CALL 76360 0 3
// end ;
74370: GO 74324
74372: POP
74373: POP
// if tigers then
74374: LD_VAR 0 2
74378: IFFALSE 74462
// for i = 1 to tigers do
74380: LD_ADDR_VAR 0 11
74384: PUSH
74385: DOUBLE
74386: LD_INT 1
74388: DEC
74389: ST_TO_ADDR
74390: LD_VAR 0 2
74394: PUSH
74395: FOR_TO
74396: IFFALSE 74460
// begin hc_class = class_tiger ;
74398: LD_ADDR_OWVAR 28
74402: PUSH
74403: LD_INT 14
74405: ST_TO_ADDR
// hc_gallery =  ;
74406: LD_ADDR_OWVAR 33
74410: PUSH
74411: LD_STRING 
74413: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74414: LD_ADDR_OWVAR 35
74418: PUSH
74419: LD_INT 7
74421: NEG
74422: PPUSH
74423: LD_INT 7
74425: PPUSH
74426: CALL_OW 12
74430: ST_TO_ADDR
// animal := CreateHuman ;
74431: LD_ADDR_VAR 0 12
74435: PUSH
74436: CALL_OW 44
74440: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74441: LD_VAR 0 12
74445: PPUSH
74446: LD_VAR 0 8
74450: PPUSH
74451: LD_INT 0
74453: PPUSH
74454: CALL 76360 0 3
// end ;
74458: GO 74395
74460: POP
74461: POP
// if apemans then
74462: LD_VAR 0 3
74466: IFFALSE 74589
// for i = 1 to apemans do
74468: LD_ADDR_VAR 0 11
74472: PUSH
74473: DOUBLE
74474: LD_INT 1
74476: DEC
74477: ST_TO_ADDR
74478: LD_VAR 0 3
74482: PUSH
74483: FOR_TO
74484: IFFALSE 74587
// begin hc_class = class_apeman ;
74486: LD_ADDR_OWVAR 28
74490: PUSH
74491: LD_INT 12
74493: ST_TO_ADDR
// hc_gallery =  ;
74494: LD_ADDR_OWVAR 33
74498: PUSH
74499: LD_STRING 
74501: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74502: LD_ADDR_OWVAR 35
74506: PUSH
74507: LD_INT 2
74509: NEG
74510: PPUSH
74511: LD_INT 2
74513: PPUSH
74514: CALL_OW 12
74518: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74519: LD_ADDR_OWVAR 31
74523: PUSH
74524: LD_INT 1
74526: PPUSH
74527: LD_INT 3
74529: PPUSH
74530: CALL_OW 12
74534: PUSH
74535: LD_INT 1
74537: PPUSH
74538: LD_INT 3
74540: PPUSH
74541: CALL_OW 12
74545: PUSH
74546: LD_INT 0
74548: PUSH
74549: LD_INT 0
74551: PUSH
74552: EMPTY
74553: LIST
74554: LIST
74555: LIST
74556: LIST
74557: ST_TO_ADDR
// animal := CreateHuman ;
74558: LD_ADDR_VAR 0 12
74562: PUSH
74563: CALL_OW 44
74567: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74568: LD_VAR 0 12
74572: PPUSH
74573: LD_VAR 0 8
74577: PPUSH
74578: LD_INT 0
74580: PPUSH
74581: CALL 76360 0 3
// end ;
74585: GO 74483
74587: POP
74588: POP
// if enchidnas then
74589: LD_VAR 0 4
74593: IFFALSE 74660
// for i = 1 to enchidnas do
74595: LD_ADDR_VAR 0 11
74599: PUSH
74600: DOUBLE
74601: LD_INT 1
74603: DEC
74604: ST_TO_ADDR
74605: LD_VAR 0 4
74609: PUSH
74610: FOR_TO
74611: IFFALSE 74658
// begin hc_class = 13 ;
74613: LD_ADDR_OWVAR 28
74617: PUSH
74618: LD_INT 13
74620: ST_TO_ADDR
// hc_gallery =  ;
74621: LD_ADDR_OWVAR 33
74625: PUSH
74626: LD_STRING 
74628: ST_TO_ADDR
// animal := CreateHuman ;
74629: LD_ADDR_VAR 0 12
74633: PUSH
74634: CALL_OW 44
74638: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74639: LD_VAR 0 12
74643: PPUSH
74644: LD_VAR 0 8
74648: PPUSH
74649: LD_INT 0
74651: PPUSH
74652: CALL 76360 0 3
// end ;
74656: GO 74610
74658: POP
74659: POP
// if fishes then
74660: LD_VAR 0 7
74664: IFFALSE 74731
// for i = 1 to fishes do
74666: LD_ADDR_VAR 0 11
74670: PUSH
74671: DOUBLE
74672: LD_INT 1
74674: DEC
74675: ST_TO_ADDR
74676: LD_VAR 0 7
74680: PUSH
74681: FOR_TO
74682: IFFALSE 74729
// begin hc_class = 20 ;
74684: LD_ADDR_OWVAR 28
74688: PUSH
74689: LD_INT 20
74691: ST_TO_ADDR
// hc_gallery =  ;
74692: LD_ADDR_OWVAR 33
74696: PUSH
74697: LD_STRING 
74699: ST_TO_ADDR
// animal := CreateHuman ;
74700: LD_ADDR_VAR 0 12
74704: PUSH
74705: CALL_OW 44
74709: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74710: LD_VAR 0 12
74714: PPUSH
74715: LD_VAR 0 9
74719: PPUSH
74720: LD_INT 0
74722: PPUSH
74723: CALL 76360 0 3
// end ;
74727: GO 74681
74729: POP
74730: POP
// end ;
74731: LD_VAR 0 10
74735: RET
// export function WantHeal ( sci , unit ) ; begin
74736: LD_INT 0
74738: PPUSH
// if GetTaskList ( sci ) > 0 then
74739: LD_VAR 0 1
74743: PPUSH
74744: CALL_OW 437
74748: PUSH
74749: LD_INT 0
74751: GREATER
74752: IFFALSE 74822
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74754: LD_VAR 0 1
74758: PPUSH
74759: CALL_OW 437
74763: PUSH
74764: LD_INT 1
74766: ARRAY
74767: PUSH
74768: LD_INT 1
74770: ARRAY
74771: PUSH
74772: LD_STRING l
74774: EQUAL
74775: PUSH
74776: LD_VAR 0 1
74780: PPUSH
74781: CALL_OW 437
74785: PUSH
74786: LD_INT 1
74788: ARRAY
74789: PUSH
74790: LD_INT 4
74792: ARRAY
74793: PUSH
74794: LD_VAR 0 2
74798: EQUAL
74799: AND
74800: IFFALSE 74812
// result := true else
74802: LD_ADDR_VAR 0 3
74806: PUSH
74807: LD_INT 1
74809: ST_TO_ADDR
74810: GO 74820
// result := false ;
74812: LD_ADDR_VAR 0 3
74816: PUSH
74817: LD_INT 0
74819: ST_TO_ADDR
// end else
74820: GO 74830
// result := false ;
74822: LD_ADDR_VAR 0 3
74826: PUSH
74827: LD_INT 0
74829: ST_TO_ADDR
// end ;
74830: LD_VAR 0 3
74834: RET
// export function HealTarget ( sci ) ; begin
74835: LD_INT 0
74837: PPUSH
// if not sci then
74838: LD_VAR 0 1
74842: NOT
74843: IFFALSE 74847
// exit ;
74845: GO 74912
// result := 0 ;
74847: LD_ADDR_VAR 0 2
74851: PUSH
74852: LD_INT 0
74854: ST_TO_ADDR
// if GetTaskList ( sci ) then
74855: LD_VAR 0 1
74859: PPUSH
74860: CALL_OW 437
74864: IFFALSE 74912
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74866: LD_VAR 0 1
74870: PPUSH
74871: CALL_OW 437
74875: PUSH
74876: LD_INT 1
74878: ARRAY
74879: PUSH
74880: LD_INT 1
74882: ARRAY
74883: PUSH
74884: LD_STRING l
74886: EQUAL
74887: IFFALSE 74912
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74889: LD_ADDR_VAR 0 2
74893: PUSH
74894: LD_VAR 0 1
74898: PPUSH
74899: CALL_OW 437
74903: PUSH
74904: LD_INT 1
74906: ARRAY
74907: PUSH
74908: LD_INT 4
74910: ARRAY
74911: ST_TO_ADDR
// end ;
74912: LD_VAR 0 2
74916: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74917: LD_INT 0
74919: PPUSH
74920: PPUSH
74921: PPUSH
74922: PPUSH
// if not base_units then
74923: LD_VAR 0 1
74927: NOT
74928: IFFALSE 74932
// exit ;
74930: GO 75019
// result := false ;
74932: LD_ADDR_VAR 0 2
74936: PUSH
74937: LD_INT 0
74939: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74940: LD_ADDR_VAR 0 5
74944: PUSH
74945: LD_VAR 0 1
74949: PPUSH
74950: LD_INT 21
74952: PUSH
74953: LD_INT 3
74955: PUSH
74956: EMPTY
74957: LIST
74958: LIST
74959: PPUSH
74960: CALL_OW 72
74964: ST_TO_ADDR
// if not tmp then
74965: LD_VAR 0 5
74969: NOT
74970: IFFALSE 74974
// exit ;
74972: GO 75019
// for i in tmp do
74974: LD_ADDR_VAR 0 3
74978: PUSH
74979: LD_VAR 0 5
74983: PUSH
74984: FOR_IN
74985: IFFALSE 75017
// begin result := EnemyInRange ( i , 22 ) ;
74987: LD_ADDR_VAR 0 2
74991: PUSH
74992: LD_VAR 0 3
74996: PPUSH
74997: LD_INT 22
74999: PPUSH
75000: CALL 72617 0 2
75004: ST_TO_ADDR
// if result then
75005: LD_VAR 0 2
75009: IFFALSE 75015
// exit ;
75011: POP
75012: POP
75013: GO 75019
// end ;
75015: GO 74984
75017: POP
75018: POP
// end ;
75019: LD_VAR 0 2
75023: RET
// export function FilterByTag ( units , tag ) ; begin
75024: LD_INT 0
75026: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
75027: LD_ADDR_VAR 0 3
75031: PUSH
75032: LD_VAR 0 1
75036: PPUSH
75037: LD_INT 120
75039: PUSH
75040: LD_VAR 0 2
75044: PUSH
75045: EMPTY
75046: LIST
75047: LIST
75048: PPUSH
75049: CALL_OW 72
75053: ST_TO_ADDR
// end ;
75054: LD_VAR 0 3
75058: RET
// export function IsDriver ( un ) ; begin
75059: LD_INT 0
75061: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
75062: LD_ADDR_VAR 0 2
75066: PUSH
75067: LD_VAR 0 1
75071: PUSH
75072: LD_INT 55
75074: PUSH
75075: EMPTY
75076: LIST
75077: PPUSH
75078: CALL_OW 69
75082: IN
75083: ST_TO_ADDR
// end ;
75084: LD_VAR 0 2
75088: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
75089: LD_INT 0
75091: PPUSH
75092: PPUSH
// list := [ ] ;
75093: LD_ADDR_VAR 0 5
75097: PUSH
75098: EMPTY
75099: ST_TO_ADDR
// case d of 0 :
75100: LD_VAR 0 3
75104: PUSH
75105: LD_INT 0
75107: DOUBLE
75108: EQUAL
75109: IFTRUE 75113
75111: GO 75246
75113: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
75114: LD_ADDR_VAR 0 5
75118: PUSH
75119: LD_VAR 0 1
75123: PUSH
75124: LD_INT 4
75126: MINUS
75127: PUSH
75128: LD_VAR 0 2
75132: PUSH
75133: LD_INT 4
75135: MINUS
75136: PUSH
75137: LD_INT 2
75139: PUSH
75140: EMPTY
75141: LIST
75142: LIST
75143: LIST
75144: PUSH
75145: LD_VAR 0 1
75149: PUSH
75150: LD_INT 3
75152: MINUS
75153: PUSH
75154: LD_VAR 0 2
75158: PUSH
75159: LD_INT 1
75161: PUSH
75162: EMPTY
75163: LIST
75164: LIST
75165: LIST
75166: PUSH
75167: LD_VAR 0 1
75171: PUSH
75172: LD_INT 4
75174: PLUS
75175: PUSH
75176: LD_VAR 0 2
75180: PUSH
75181: LD_INT 4
75183: PUSH
75184: EMPTY
75185: LIST
75186: LIST
75187: LIST
75188: PUSH
75189: LD_VAR 0 1
75193: PUSH
75194: LD_INT 3
75196: PLUS
75197: PUSH
75198: LD_VAR 0 2
75202: PUSH
75203: LD_INT 3
75205: PLUS
75206: PUSH
75207: LD_INT 5
75209: PUSH
75210: EMPTY
75211: LIST
75212: LIST
75213: LIST
75214: PUSH
75215: LD_VAR 0 1
75219: PUSH
75220: LD_VAR 0 2
75224: PUSH
75225: LD_INT 4
75227: PLUS
75228: PUSH
75229: LD_INT 0
75231: PUSH
75232: EMPTY
75233: LIST
75234: LIST
75235: LIST
75236: PUSH
75237: EMPTY
75238: LIST
75239: LIST
75240: LIST
75241: LIST
75242: LIST
75243: ST_TO_ADDR
// end ; 1 :
75244: GO 75944
75246: LD_INT 1
75248: DOUBLE
75249: EQUAL
75250: IFTRUE 75254
75252: GO 75387
75254: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75255: LD_ADDR_VAR 0 5
75259: PUSH
75260: LD_VAR 0 1
75264: PUSH
75265: LD_VAR 0 2
75269: PUSH
75270: LD_INT 4
75272: MINUS
75273: PUSH
75274: LD_INT 3
75276: PUSH
75277: EMPTY
75278: LIST
75279: LIST
75280: LIST
75281: PUSH
75282: LD_VAR 0 1
75286: PUSH
75287: LD_INT 3
75289: MINUS
75290: PUSH
75291: LD_VAR 0 2
75295: PUSH
75296: LD_INT 3
75298: MINUS
75299: PUSH
75300: LD_INT 2
75302: PUSH
75303: EMPTY
75304: LIST
75305: LIST
75306: LIST
75307: PUSH
75308: LD_VAR 0 1
75312: PUSH
75313: LD_INT 4
75315: MINUS
75316: PUSH
75317: LD_VAR 0 2
75321: PUSH
75322: LD_INT 1
75324: PUSH
75325: EMPTY
75326: LIST
75327: LIST
75328: LIST
75329: PUSH
75330: LD_VAR 0 1
75334: PUSH
75335: LD_VAR 0 2
75339: PUSH
75340: LD_INT 3
75342: PLUS
75343: PUSH
75344: LD_INT 0
75346: PUSH
75347: EMPTY
75348: LIST
75349: LIST
75350: LIST
75351: PUSH
75352: LD_VAR 0 1
75356: PUSH
75357: LD_INT 4
75359: PLUS
75360: PUSH
75361: LD_VAR 0 2
75365: PUSH
75366: LD_INT 4
75368: PLUS
75369: PUSH
75370: LD_INT 5
75372: PUSH
75373: EMPTY
75374: LIST
75375: LIST
75376: LIST
75377: PUSH
75378: EMPTY
75379: LIST
75380: LIST
75381: LIST
75382: LIST
75383: LIST
75384: ST_TO_ADDR
// end ; 2 :
75385: GO 75944
75387: LD_INT 2
75389: DOUBLE
75390: EQUAL
75391: IFTRUE 75395
75393: GO 75524
75395: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75396: LD_ADDR_VAR 0 5
75400: PUSH
75401: LD_VAR 0 1
75405: PUSH
75406: LD_VAR 0 2
75410: PUSH
75411: LD_INT 3
75413: MINUS
75414: PUSH
75415: LD_INT 3
75417: PUSH
75418: EMPTY
75419: LIST
75420: LIST
75421: LIST
75422: PUSH
75423: LD_VAR 0 1
75427: PUSH
75428: LD_INT 4
75430: PLUS
75431: PUSH
75432: LD_VAR 0 2
75436: PUSH
75437: LD_INT 4
75439: PUSH
75440: EMPTY
75441: LIST
75442: LIST
75443: LIST
75444: PUSH
75445: LD_VAR 0 1
75449: PUSH
75450: LD_VAR 0 2
75454: PUSH
75455: LD_INT 4
75457: PLUS
75458: PUSH
75459: LD_INT 0
75461: PUSH
75462: EMPTY
75463: LIST
75464: LIST
75465: LIST
75466: PUSH
75467: LD_VAR 0 1
75471: PUSH
75472: LD_INT 3
75474: MINUS
75475: PUSH
75476: LD_VAR 0 2
75480: PUSH
75481: LD_INT 1
75483: PUSH
75484: EMPTY
75485: LIST
75486: LIST
75487: LIST
75488: PUSH
75489: LD_VAR 0 1
75493: PUSH
75494: LD_INT 4
75496: MINUS
75497: PUSH
75498: LD_VAR 0 2
75502: PUSH
75503: LD_INT 4
75505: MINUS
75506: PUSH
75507: LD_INT 2
75509: PUSH
75510: EMPTY
75511: LIST
75512: LIST
75513: LIST
75514: PUSH
75515: EMPTY
75516: LIST
75517: LIST
75518: LIST
75519: LIST
75520: LIST
75521: ST_TO_ADDR
// end ; 3 :
75522: GO 75944
75524: LD_INT 3
75526: DOUBLE
75527: EQUAL
75528: IFTRUE 75532
75530: GO 75665
75532: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75533: LD_ADDR_VAR 0 5
75537: PUSH
75538: LD_VAR 0 1
75542: PUSH
75543: LD_INT 3
75545: PLUS
75546: PUSH
75547: LD_VAR 0 2
75551: PUSH
75552: LD_INT 4
75554: PUSH
75555: EMPTY
75556: LIST
75557: LIST
75558: LIST
75559: PUSH
75560: LD_VAR 0 1
75564: PUSH
75565: LD_INT 4
75567: PLUS
75568: PUSH
75569: LD_VAR 0 2
75573: PUSH
75574: LD_INT 4
75576: PLUS
75577: PUSH
75578: LD_INT 5
75580: PUSH
75581: EMPTY
75582: LIST
75583: LIST
75584: LIST
75585: PUSH
75586: LD_VAR 0 1
75590: PUSH
75591: LD_INT 4
75593: MINUS
75594: PUSH
75595: LD_VAR 0 2
75599: PUSH
75600: LD_INT 1
75602: PUSH
75603: EMPTY
75604: LIST
75605: LIST
75606: LIST
75607: PUSH
75608: LD_VAR 0 1
75612: PUSH
75613: LD_VAR 0 2
75617: PUSH
75618: LD_INT 4
75620: MINUS
75621: PUSH
75622: LD_INT 3
75624: PUSH
75625: EMPTY
75626: LIST
75627: LIST
75628: LIST
75629: PUSH
75630: LD_VAR 0 1
75634: PUSH
75635: LD_INT 3
75637: MINUS
75638: PUSH
75639: LD_VAR 0 2
75643: PUSH
75644: LD_INT 3
75646: MINUS
75647: PUSH
75648: LD_INT 2
75650: PUSH
75651: EMPTY
75652: LIST
75653: LIST
75654: LIST
75655: PUSH
75656: EMPTY
75657: LIST
75658: LIST
75659: LIST
75660: LIST
75661: LIST
75662: ST_TO_ADDR
// end ; 4 :
75663: GO 75944
75665: LD_INT 4
75667: DOUBLE
75668: EQUAL
75669: IFTRUE 75673
75671: GO 75806
75673: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75674: LD_ADDR_VAR 0 5
75678: PUSH
75679: LD_VAR 0 1
75683: PUSH
75684: LD_VAR 0 2
75688: PUSH
75689: LD_INT 4
75691: PLUS
75692: PUSH
75693: LD_INT 0
75695: PUSH
75696: EMPTY
75697: LIST
75698: LIST
75699: LIST
75700: PUSH
75701: LD_VAR 0 1
75705: PUSH
75706: LD_INT 3
75708: PLUS
75709: PUSH
75710: LD_VAR 0 2
75714: PUSH
75715: LD_INT 3
75717: PLUS
75718: PUSH
75719: LD_INT 5
75721: PUSH
75722: EMPTY
75723: LIST
75724: LIST
75725: LIST
75726: PUSH
75727: LD_VAR 0 1
75731: PUSH
75732: LD_INT 4
75734: PLUS
75735: PUSH
75736: LD_VAR 0 2
75740: PUSH
75741: LD_INT 4
75743: PUSH
75744: EMPTY
75745: LIST
75746: LIST
75747: LIST
75748: PUSH
75749: LD_VAR 0 1
75753: PUSH
75754: LD_VAR 0 2
75758: PUSH
75759: LD_INT 3
75761: MINUS
75762: PUSH
75763: LD_INT 3
75765: PUSH
75766: EMPTY
75767: LIST
75768: LIST
75769: LIST
75770: PUSH
75771: LD_VAR 0 1
75775: PUSH
75776: LD_INT 4
75778: MINUS
75779: PUSH
75780: LD_VAR 0 2
75784: PUSH
75785: LD_INT 4
75787: MINUS
75788: PUSH
75789: LD_INT 2
75791: PUSH
75792: EMPTY
75793: LIST
75794: LIST
75795: LIST
75796: PUSH
75797: EMPTY
75798: LIST
75799: LIST
75800: LIST
75801: LIST
75802: LIST
75803: ST_TO_ADDR
// end ; 5 :
75804: GO 75944
75806: LD_INT 5
75808: DOUBLE
75809: EQUAL
75810: IFTRUE 75814
75812: GO 75943
75814: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75815: LD_ADDR_VAR 0 5
75819: PUSH
75820: LD_VAR 0 1
75824: PUSH
75825: LD_INT 4
75827: MINUS
75828: PUSH
75829: LD_VAR 0 2
75833: PUSH
75834: LD_INT 1
75836: PUSH
75837: EMPTY
75838: LIST
75839: LIST
75840: LIST
75841: PUSH
75842: LD_VAR 0 1
75846: PUSH
75847: LD_VAR 0 2
75851: PUSH
75852: LD_INT 4
75854: MINUS
75855: PUSH
75856: LD_INT 3
75858: PUSH
75859: EMPTY
75860: LIST
75861: LIST
75862: LIST
75863: PUSH
75864: LD_VAR 0 1
75868: PUSH
75869: LD_INT 4
75871: PLUS
75872: PUSH
75873: LD_VAR 0 2
75877: PUSH
75878: LD_INT 4
75880: PLUS
75881: PUSH
75882: LD_INT 5
75884: PUSH
75885: EMPTY
75886: LIST
75887: LIST
75888: LIST
75889: PUSH
75890: LD_VAR 0 1
75894: PUSH
75895: LD_INT 3
75897: PLUS
75898: PUSH
75899: LD_VAR 0 2
75903: PUSH
75904: LD_INT 4
75906: PUSH
75907: EMPTY
75908: LIST
75909: LIST
75910: LIST
75911: PUSH
75912: LD_VAR 0 1
75916: PUSH
75917: LD_VAR 0 2
75921: PUSH
75922: LD_INT 3
75924: PLUS
75925: PUSH
75926: LD_INT 0
75928: PUSH
75929: EMPTY
75930: LIST
75931: LIST
75932: LIST
75933: PUSH
75934: EMPTY
75935: LIST
75936: LIST
75937: LIST
75938: LIST
75939: LIST
75940: ST_TO_ADDR
// end ; end ;
75941: GO 75944
75943: POP
// result := list ;
75944: LD_ADDR_VAR 0 4
75948: PUSH
75949: LD_VAR 0 5
75953: ST_TO_ADDR
// end ;
75954: LD_VAR 0 4
75958: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75959: LD_INT 0
75961: PPUSH
75962: PPUSH
75963: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75964: LD_VAR 0 1
75968: NOT
75969: PUSH
75970: LD_VAR 0 2
75974: PUSH
75975: LD_INT 1
75977: PUSH
75978: LD_INT 2
75980: PUSH
75981: LD_INT 3
75983: PUSH
75984: LD_INT 4
75986: PUSH
75987: EMPTY
75988: LIST
75989: LIST
75990: LIST
75991: LIST
75992: IN
75993: NOT
75994: OR
75995: IFFALSE 75999
// exit ;
75997: GO 76082
// tmp := [ ] ;
75999: LD_ADDR_VAR 0 5
76003: PUSH
76004: EMPTY
76005: ST_TO_ADDR
// for i in units do
76006: LD_ADDR_VAR 0 4
76010: PUSH
76011: LD_VAR 0 1
76015: PUSH
76016: FOR_IN
76017: IFFALSE 76051
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
76019: LD_ADDR_VAR 0 5
76023: PUSH
76024: LD_VAR 0 5
76028: PPUSH
76029: LD_VAR 0 4
76033: PPUSH
76034: LD_VAR 0 2
76038: PPUSH
76039: CALL_OW 259
76043: PPUSH
76044: CALL 77455 0 2
76048: ST_TO_ADDR
76049: GO 76016
76051: POP
76052: POP
// if not tmp then
76053: LD_VAR 0 5
76057: NOT
76058: IFFALSE 76062
// exit ;
76060: GO 76082
// result := SortListByListDesc ( units , tmp ) ;
76062: LD_ADDR_VAR 0 3
76066: PUSH
76067: LD_VAR 0 1
76071: PPUSH
76072: LD_VAR 0 5
76076: PPUSH
76077: CALL_OW 77
76081: ST_TO_ADDR
// end ;
76082: LD_VAR 0 3
76086: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
76087: LD_INT 0
76089: PPUSH
76090: PPUSH
76091: PPUSH
// result := false ;
76092: LD_ADDR_VAR 0 3
76096: PUSH
76097: LD_INT 0
76099: ST_TO_ADDR
// if not building then
76100: LD_VAR 0 2
76104: NOT
76105: IFFALSE 76109
// exit ;
76107: GO 76247
// x := GetX ( building ) ;
76109: LD_ADDR_VAR 0 4
76113: PUSH
76114: LD_VAR 0 2
76118: PPUSH
76119: CALL_OW 250
76123: ST_TO_ADDR
// y := GetY ( building ) ;
76124: LD_ADDR_VAR 0 5
76128: PUSH
76129: LD_VAR 0 2
76133: PPUSH
76134: CALL_OW 251
76138: ST_TO_ADDR
// if not x or not y then
76139: LD_VAR 0 4
76143: NOT
76144: PUSH
76145: LD_VAR 0 5
76149: NOT
76150: OR
76151: IFFALSE 76155
// exit ;
76153: GO 76247
// if GetTaskList ( unit ) then
76155: LD_VAR 0 1
76159: PPUSH
76160: CALL_OW 437
76164: IFFALSE 76247
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76166: LD_STRING e
76168: PUSH
76169: LD_VAR 0 1
76173: PPUSH
76174: CALL_OW 437
76178: PUSH
76179: LD_INT 1
76181: ARRAY
76182: PUSH
76183: LD_INT 1
76185: ARRAY
76186: EQUAL
76187: PUSH
76188: LD_VAR 0 4
76192: PUSH
76193: LD_VAR 0 1
76197: PPUSH
76198: CALL_OW 437
76202: PUSH
76203: LD_INT 1
76205: ARRAY
76206: PUSH
76207: LD_INT 2
76209: ARRAY
76210: EQUAL
76211: AND
76212: PUSH
76213: LD_VAR 0 5
76217: PUSH
76218: LD_VAR 0 1
76222: PPUSH
76223: CALL_OW 437
76227: PUSH
76228: LD_INT 1
76230: ARRAY
76231: PUSH
76232: LD_INT 3
76234: ARRAY
76235: EQUAL
76236: AND
76237: IFFALSE 76247
// result := true end ;
76239: LD_ADDR_VAR 0 3
76243: PUSH
76244: LD_INT 1
76246: ST_TO_ADDR
// end ;
76247: LD_VAR 0 3
76251: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
76252: LD_INT 0
76254: PPUSH
// result := false ;
76255: LD_ADDR_VAR 0 4
76259: PUSH
76260: LD_INT 0
76262: ST_TO_ADDR
// if GetTaskList ( unit ) then
76263: LD_VAR 0 1
76267: PPUSH
76268: CALL_OW 437
76272: IFFALSE 76355
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76274: LD_STRING M
76276: PUSH
76277: LD_VAR 0 1
76281: PPUSH
76282: CALL_OW 437
76286: PUSH
76287: LD_INT 1
76289: ARRAY
76290: PUSH
76291: LD_INT 1
76293: ARRAY
76294: EQUAL
76295: PUSH
76296: LD_VAR 0 2
76300: PUSH
76301: LD_VAR 0 1
76305: PPUSH
76306: CALL_OW 437
76310: PUSH
76311: LD_INT 1
76313: ARRAY
76314: PUSH
76315: LD_INT 2
76317: ARRAY
76318: EQUAL
76319: AND
76320: PUSH
76321: LD_VAR 0 3
76325: PUSH
76326: LD_VAR 0 1
76330: PPUSH
76331: CALL_OW 437
76335: PUSH
76336: LD_INT 1
76338: ARRAY
76339: PUSH
76340: LD_INT 3
76342: ARRAY
76343: EQUAL
76344: AND
76345: IFFALSE 76355
// result := true ;
76347: LD_ADDR_VAR 0 4
76351: PUSH
76352: LD_INT 1
76354: ST_TO_ADDR
// end ; end ;
76355: LD_VAR 0 4
76359: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76360: LD_INT 0
76362: PPUSH
76363: PPUSH
76364: PPUSH
76365: PPUSH
// if not unit or not area then
76366: LD_VAR 0 1
76370: NOT
76371: PUSH
76372: LD_VAR 0 2
76376: NOT
76377: OR
76378: IFFALSE 76382
// exit ;
76380: GO 76558
// tmp := AreaToList ( area , i ) ;
76382: LD_ADDR_VAR 0 6
76386: PUSH
76387: LD_VAR 0 2
76391: PPUSH
76392: LD_VAR 0 5
76396: PPUSH
76397: CALL_OW 517
76401: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76402: LD_ADDR_VAR 0 5
76406: PUSH
76407: DOUBLE
76408: LD_INT 1
76410: DEC
76411: ST_TO_ADDR
76412: LD_VAR 0 6
76416: PUSH
76417: LD_INT 1
76419: ARRAY
76420: PUSH
76421: FOR_TO
76422: IFFALSE 76556
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76424: LD_ADDR_VAR 0 7
76428: PUSH
76429: LD_VAR 0 6
76433: PUSH
76434: LD_INT 1
76436: ARRAY
76437: PUSH
76438: LD_VAR 0 5
76442: ARRAY
76443: PUSH
76444: LD_VAR 0 6
76448: PUSH
76449: LD_INT 2
76451: ARRAY
76452: PUSH
76453: LD_VAR 0 5
76457: ARRAY
76458: PUSH
76459: EMPTY
76460: LIST
76461: LIST
76462: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
76463: LD_INT 92
76465: PUSH
76466: LD_VAR 0 7
76470: PUSH
76471: LD_INT 1
76473: ARRAY
76474: PUSH
76475: LD_VAR 0 7
76479: PUSH
76480: LD_INT 2
76482: ARRAY
76483: PUSH
76484: LD_INT 2
76486: PUSH
76487: EMPTY
76488: LIST
76489: LIST
76490: LIST
76491: LIST
76492: PPUSH
76493: CALL_OW 69
76497: PUSH
76498: LD_INT 0
76500: EQUAL
76501: IFFALSE 76554
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
76503: LD_VAR 0 1
76507: PPUSH
76508: LD_VAR 0 7
76512: PUSH
76513: LD_INT 1
76515: ARRAY
76516: PPUSH
76517: LD_VAR 0 7
76521: PUSH
76522: LD_INT 2
76524: ARRAY
76525: PPUSH
76526: LD_VAR 0 3
76530: PPUSH
76531: CALL_OW 48
// result := IsPlaced ( unit ) ;
76535: LD_ADDR_VAR 0 4
76539: PUSH
76540: LD_VAR 0 1
76544: PPUSH
76545: CALL_OW 305
76549: ST_TO_ADDR
// exit ;
76550: POP
76551: POP
76552: GO 76558
// end ; end ;
76554: GO 76421
76556: POP
76557: POP
// end ;
76558: LD_VAR 0 4
76562: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76563: LD_INT 0
76565: PPUSH
76566: PPUSH
76567: PPUSH
// if not side or side > 8 then
76568: LD_VAR 0 1
76572: NOT
76573: PUSH
76574: LD_VAR 0 1
76578: PUSH
76579: LD_INT 8
76581: GREATER
76582: OR
76583: IFFALSE 76587
// exit ;
76585: GO 76774
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76587: LD_ADDR_VAR 0 4
76591: PUSH
76592: LD_INT 22
76594: PUSH
76595: LD_VAR 0 1
76599: PUSH
76600: EMPTY
76601: LIST
76602: LIST
76603: PUSH
76604: LD_INT 21
76606: PUSH
76607: LD_INT 3
76609: PUSH
76610: EMPTY
76611: LIST
76612: LIST
76613: PUSH
76614: EMPTY
76615: LIST
76616: LIST
76617: PPUSH
76618: CALL_OW 69
76622: ST_TO_ADDR
// if not tmp then
76623: LD_VAR 0 4
76627: NOT
76628: IFFALSE 76632
// exit ;
76630: GO 76774
// enable_addtolog := true ;
76632: LD_ADDR_OWVAR 81
76636: PUSH
76637: LD_INT 1
76639: ST_TO_ADDR
// AddToLog ( [ ) ;
76640: LD_STRING [
76642: PPUSH
76643: CALL_OW 561
// for i in tmp do
76647: LD_ADDR_VAR 0 3
76651: PUSH
76652: LD_VAR 0 4
76656: PUSH
76657: FOR_IN
76658: IFFALSE 76765
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76660: LD_STRING [
76662: PUSH
76663: LD_VAR 0 3
76667: PPUSH
76668: CALL_OW 266
76672: STR
76673: PUSH
76674: LD_STRING , 
76676: STR
76677: PUSH
76678: LD_VAR 0 3
76682: PPUSH
76683: CALL_OW 250
76687: STR
76688: PUSH
76689: LD_STRING , 
76691: STR
76692: PUSH
76693: LD_VAR 0 3
76697: PPUSH
76698: CALL_OW 251
76702: STR
76703: PUSH
76704: LD_STRING , 
76706: STR
76707: PUSH
76708: LD_VAR 0 3
76712: PPUSH
76713: CALL_OW 254
76717: STR
76718: PUSH
76719: LD_STRING , 
76721: STR
76722: PUSH
76723: LD_VAR 0 3
76727: PPUSH
76728: LD_INT 1
76730: PPUSH
76731: CALL_OW 268
76735: STR
76736: PUSH
76737: LD_STRING , 
76739: STR
76740: PUSH
76741: LD_VAR 0 3
76745: PPUSH
76746: LD_INT 2
76748: PPUSH
76749: CALL_OW 268
76753: STR
76754: PUSH
76755: LD_STRING ],
76757: STR
76758: PPUSH
76759: CALL_OW 561
// end ;
76763: GO 76657
76765: POP
76766: POP
// AddToLog ( ]; ) ;
76767: LD_STRING ];
76769: PPUSH
76770: CALL_OW 561
// end ;
76774: LD_VAR 0 2
76778: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76779: LD_INT 0
76781: PPUSH
76782: PPUSH
76783: PPUSH
76784: PPUSH
76785: PPUSH
// if not area or not rate or not max then
76786: LD_VAR 0 1
76790: NOT
76791: PUSH
76792: LD_VAR 0 2
76796: NOT
76797: OR
76798: PUSH
76799: LD_VAR 0 4
76803: NOT
76804: OR
76805: IFFALSE 76809
// exit ;
76807: GO 76998
// while 1 do
76809: LD_INT 1
76811: IFFALSE 76998
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76813: LD_ADDR_VAR 0 9
76817: PUSH
76818: LD_VAR 0 1
76822: PPUSH
76823: LD_INT 1
76825: PPUSH
76826: CALL_OW 287
76830: PUSH
76831: LD_INT 10
76833: MUL
76834: ST_TO_ADDR
// r := rate / 10 ;
76835: LD_ADDR_VAR 0 7
76839: PUSH
76840: LD_VAR 0 2
76844: PUSH
76845: LD_INT 10
76847: DIVREAL
76848: ST_TO_ADDR
// time := 1 1$00 ;
76849: LD_ADDR_VAR 0 8
76853: PUSH
76854: LD_INT 2100
76856: ST_TO_ADDR
// if amount < min then
76857: LD_VAR 0 9
76861: PUSH
76862: LD_VAR 0 3
76866: LESS
76867: IFFALSE 76885
// r := r * 2 else
76869: LD_ADDR_VAR 0 7
76873: PUSH
76874: LD_VAR 0 7
76878: PUSH
76879: LD_INT 2
76881: MUL
76882: ST_TO_ADDR
76883: GO 76911
// if amount > max then
76885: LD_VAR 0 9
76889: PUSH
76890: LD_VAR 0 4
76894: GREATER
76895: IFFALSE 76911
// r := r / 2 ;
76897: LD_ADDR_VAR 0 7
76901: PUSH
76902: LD_VAR 0 7
76906: PUSH
76907: LD_INT 2
76909: DIVREAL
76910: ST_TO_ADDR
// time := time / r ;
76911: LD_ADDR_VAR 0 8
76915: PUSH
76916: LD_VAR 0 8
76920: PUSH
76921: LD_VAR 0 7
76925: DIVREAL
76926: ST_TO_ADDR
// if time < 0 then
76927: LD_VAR 0 8
76931: PUSH
76932: LD_INT 0
76934: LESS
76935: IFFALSE 76952
// time := time * - 1 ;
76937: LD_ADDR_VAR 0 8
76941: PUSH
76942: LD_VAR 0 8
76946: PUSH
76947: LD_INT 1
76949: NEG
76950: MUL
76951: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76952: LD_VAR 0 8
76956: PUSH
76957: LD_INT 35
76959: PPUSH
76960: LD_INT 875
76962: PPUSH
76963: CALL_OW 12
76967: PLUS
76968: PPUSH
76969: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76973: LD_INT 1
76975: PPUSH
76976: LD_INT 5
76978: PPUSH
76979: CALL_OW 12
76983: PPUSH
76984: LD_VAR 0 1
76988: PPUSH
76989: LD_INT 1
76991: PPUSH
76992: CALL_OW 55
// end ;
76996: GO 76809
// end ;
76998: LD_VAR 0 5
77002: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
77003: LD_INT 0
77005: PPUSH
77006: PPUSH
77007: PPUSH
77008: PPUSH
77009: PPUSH
77010: PPUSH
77011: PPUSH
77012: PPUSH
// if not turrets or not factories then
77013: LD_VAR 0 1
77017: NOT
77018: PUSH
77019: LD_VAR 0 2
77023: NOT
77024: OR
77025: IFFALSE 77029
// exit ;
77027: GO 77336
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
77029: LD_ADDR_VAR 0 10
77033: PUSH
77034: LD_INT 5
77036: PUSH
77037: LD_INT 6
77039: PUSH
77040: EMPTY
77041: LIST
77042: LIST
77043: PUSH
77044: LD_INT 2
77046: PUSH
77047: LD_INT 4
77049: PUSH
77050: EMPTY
77051: LIST
77052: LIST
77053: PUSH
77054: LD_INT 3
77056: PUSH
77057: LD_INT 5
77059: PUSH
77060: EMPTY
77061: LIST
77062: LIST
77063: PUSH
77064: EMPTY
77065: LIST
77066: LIST
77067: LIST
77068: PUSH
77069: LD_INT 24
77071: PUSH
77072: LD_INT 25
77074: PUSH
77075: EMPTY
77076: LIST
77077: LIST
77078: PUSH
77079: LD_INT 23
77081: PUSH
77082: LD_INT 27
77084: PUSH
77085: EMPTY
77086: LIST
77087: LIST
77088: PUSH
77089: EMPTY
77090: LIST
77091: LIST
77092: PUSH
77093: LD_INT 42
77095: PUSH
77096: LD_INT 43
77098: PUSH
77099: EMPTY
77100: LIST
77101: LIST
77102: PUSH
77103: LD_INT 44
77105: PUSH
77106: LD_INT 46
77108: PUSH
77109: EMPTY
77110: LIST
77111: LIST
77112: PUSH
77113: LD_INT 45
77115: PUSH
77116: LD_INT 47
77118: PUSH
77119: EMPTY
77120: LIST
77121: LIST
77122: PUSH
77123: EMPTY
77124: LIST
77125: LIST
77126: LIST
77127: PUSH
77128: EMPTY
77129: LIST
77130: LIST
77131: LIST
77132: ST_TO_ADDR
// result := [ ] ;
77133: LD_ADDR_VAR 0 3
77137: PUSH
77138: EMPTY
77139: ST_TO_ADDR
// for i in turrets do
77140: LD_ADDR_VAR 0 4
77144: PUSH
77145: LD_VAR 0 1
77149: PUSH
77150: FOR_IN
77151: IFFALSE 77334
// begin nat := GetNation ( i ) ;
77153: LD_ADDR_VAR 0 7
77157: PUSH
77158: LD_VAR 0 4
77162: PPUSH
77163: CALL_OW 248
77167: ST_TO_ADDR
// weapon := 0 ;
77168: LD_ADDR_VAR 0 8
77172: PUSH
77173: LD_INT 0
77175: ST_TO_ADDR
// if not nat then
77176: LD_VAR 0 7
77180: NOT
77181: IFFALSE 77185
// continue ;
77183: GO 77150
// for j in list [ nat ] do
77185: LD_ADDR_VAR 0 5
77189: PUSH
77190: LD_VAR 0 10
77194: PUSH
77195: LD_VAR 0 7
77199: ARRAY
77200: PUSH
77201: FOR_IN
77202: IFFALSE 77243
// if GetBWeapon ( i ) = j [ 1 ] then
77204: LD_VAR 0 4
77208: PPUSH
77209: CALL_OW 269
77213: PUSH
77214: LD_VAR 0 5
77218: PUSH
77219: LD_INT 1
77221: ARRAY
77222: EQUAL
77223: IFFALSE 77241
// begin weapon := j [ 2 ] ;
77225: LD_ADDR_VAR 0 8
77229: PUSH
77230: LD_VAR 0 5
77234: PUSH
77235: LD_INT 2
77237: ARRAY
77238: ST_TO_ADDR
// break ;
77239: GO 77243
// end ;
77241: GO 77201
77243: POP
77244: POP
// if not weapon then
77245: LD_VAR 0 8
77249: NOT
77250: IFFALSE 77254
// continue ;
77252: GO 77150
// for k in factories do
77254: LD_ADDR_VAR 0 6
77258: PUSH
77259: LD_VAR 0 2
77263: PUSH
77264: FOR_IN
77265: IFFALSE 77330
// begin weapons := AvailableWeaponList ( k ) ;
77267: LD_ADDR_VAR 0 9
77271: PUSH
77272: LD_VAR 0 6
77276: PPUSH
77277: CALL_OW 478
77281: ST_TO_ADDR
// if not weapons then
77282: LD_VAR 0 9
77286: NOT
77287: IFFALSE 77291
// continue ;
77289: GO 77264
// if weapon in weapons then
77291: LD_VAR 0 8
77295: PUSH
77296: LD_VAR 0 9
77300: IN
77301: IFFALSE 77328
// begin result := [ i , weapon ] ;
77303: LD_ADDR_VAR 0 3
77307: PUSH
77308: LD_VAR 0 4
77312: PUSH
77313: LD_VAR 0 8
77317: PUSH
77318: EMPTY
77319: LIST
77320: LIST
77321: ST_TO_ADDR
// exit ;
77322: POP
77323: POP
77324: POP
77325: POP
77326: GO 77336
// end ; end ;
77328: GO 77264
77330: POP
77331: POP
// end ;
77332: GO 77150
77334: POP
77335: POP
// end ;
77336: LD_VAR 0 3
77340: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77341: LD_INT 0
77343: PPUSH
// if not side or side > 8 then
77344: LD_VAR 0 3
77348: NOT
77349: PUSH
77350: LD_VAR 0 3
77354: PUSH
77355: LD_INT 8
77357: GREATER
77358: OR
77359: IFFALSE 77363
// exit ;
77361: GO 77422
// if not range then
77363: LD_VAR 0 4
77367: NOT
77368: IFFALSE 77379
// range := - 12 ;
77370: LD_ADDR_VAR 0 4
77374: PUSH
77375: LD_INT 12
77377: NEG
77378: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77379: LD_VAR 0 1
77383: PPUSH
77384: LD_VAR 0 2
77388: PPUSH
77389: LD_VAR 0 3
77393: PPUSH
77394: LD_VAR 0 4
77398: PPUSH
77399: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
77403: LD_VAR 0 1
77407: PPUSH
77408: LD_VAR 0 2
77412: PPUSH
77413: LD_VAR 0 3
77417: PPUSH
77418: CALL_OW 331
// end ;
77422: LD_VAR 0 5
77426: RET
// export function Video ( mode ) ; begin
77427: LD_INT 0
77429: PPUSH
// ingame_video = mode ;
77430: LD_ADDR_OWVAR 52
77434: PUSH
77435: LD_VAR 0 1
77439: ST_TO_ADDR
// interface_hidden = mode ;
77440: LD_ADDR_OWVAR 54
77444: PUSH
77445: LD_VAR 0 1
77449: ST_TO_ADDR
// end ;
77450: LD_VAR 0 2
77454: RET
// export function Join ( array , element ) ; begin
77455: LD_INT 0
77457: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77458: LD_ADDR_VAR 0 3
77462: PUSH
77463: LD_VAR 0 1
77467: PPUSH
77468: LD_VAR 0 1
77472: PUSH
77473: LD_INT 1
77475: PLUS
77476: PPUSH
77477: LD_VAR 0 2
77481: PPUSH
77482: CALL_OW 1
77486: ST_TO_ADDR
// end ;
77487: LD_VAR 0 3
77491: RET
// export function JoinUnion ( array , element ) ; begin
77492: LD_INT 0
77494: PPUSH
// result := array union element ;
77495: LD_ADDR_VAR 0 3
77499: PUSH
77500: LD_VAR 0 1
77504: PUSH
77505: LD_VAR 0 2
77509: UNION
77510: ST_TO_ADDR
// end ;
77511: LD_VAR 0 3
77515: RET
// export function GetBehemoths ( side ) ; begin
77516: LD_INT 0
77518: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
77519: LD_ADDR_VAR 0 2
77523: PUSH
77524: LD_INT 22
77526: PUSH
77527: LD_VAR 0 1
77531: PUSH
77532: EMPTY
77533: LIST
77534: LIST
77535: PUSH
77536: LD_INT 31
77538: PUSH
77539: LD_INT 25
77541: PUSH
77542: EMPTY
77543: LIST
77544: LIST
77545: PUSH
77546: EMPTY
77547: LIST
77548: LIST
77549: PPUSH
77550: CALL_OW 69
77554: ST_TO_ADDR
// end ;
77555: LD_VAR 0 2
77559: RET
// export function Shuffle ( array ) ; var i , index ; begin
77560: LD_INT 0
77562: PPUSH
77563: PPUSH
77564: PPUSH
// result := [ ] ;
77565: LD_ADDR_VAR 0 2
77569: PUSH
77570: EMPTY
77571: ST_TO_ADDR
// if not array then
77572: LD_VAR 0 1
77576: NOT
77577: IFFALSE 77581
// exit ;
77579: GO 77680
// Randomize ;
77581: CALL_OW 10
// for i = array downto 1 do
77585: LD_ADDR_VAR 0 3
77589: PUSH
77590: DOUBLE
77591: LD_VAR 0 1
77595: INC
77596: ST_TO_ADDR
77597: LD_INT 1
77599: PUSH
77600: FOR_DOWNTO
77601: IFFALSE 77678
// begin index := rand ( 1 , array ) ;
77603: LD_ADDR_VAR 0 4
77607: PUSH
77608: LD_INT 1
77610: PPUSH
77611: LD_VAR 0 1
77615: PPUSH
77616: CALL_OW 12
77620: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77621: LD_ADDR_VAR 0 2
77625: PUSH
77626: LD_VAR 0 2
77630: PPUSH
77631: LD_VAR 0 2
77635: PUSH
77636: LD_INT 1
77638: PLUS
77639: PPUSH
77640: LD_VAR 0 1
77644: PUSH
77645: LD_VAR 0 4
77649: ARRAY
77650: PPUSH
77651: CALL_OW 2
77655: ST_TO_ADDR
// array := Delete ( array , index ) ;
77656: LD_ADDR_VAR 0 1
77660: PUSH
77661: LD_VAR 0 1
77665: PPUSH
77666: LD_VAR 0 4
77670: PPUSH
77671: CALL_OW 3
77675: ST_TO_ADDR
// end ;
77676: GO 77600
77678: POP
77679: POP
// end ;
77680: LD_VAR 0 2
77684: RET
// export function GetBaseMaterials ( base ) ; begin
77685: LD_INT 0
77687: PPUSH
// result := [ 0 , 0 , 0 ] ;
77688: LD_ADDR_VAR 0 2
77692: PUSH
77693: LD_INT 0
77695: PUSH
77696: LD_INT 0
77698: PUSH
77699: LD_INT 0
77701: PUSH
77702: EMPTY
77703: LIST
77704: LIST
77705: LIST
77706: ST_TO_ADDR
// if not base then
77707: LD_VAR 0 1
77711: NOT
77712: IFFALSE 77716
// exit ;
77714: GO 77765
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77716: LD_ADDR_VAR 0 2
77720: PUSH
77721: LD_VAR 0 1
77725: PPUSH
77726: LD_INT 1
77728: PPUSH
77729: CALL_OW 275
77733: PUSH
77734: LD_VAR 0 1
77738: PPUSH
77739: LD_INT 2
77741: PPUSH
77742: CALL_OW 275
77746: PUSH
77747: LD_VAR 0 1
77751: PPUSH
77752: LD_INT 3
77754: PPUSH
77755: CALL_OW 275
77759: PUSH
77760: EMPTY
77761: LIST
77762: LIST
77763: LIST
77764: ST_TO_ADDR
// end ;
77765: LD_VAR 0 2
77769: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77770: LD_INT 0
77772: PPUSH
77773: PPUSH
// result := array ;
77774: LD_ADDR_VAR 0 3
77778: PUSH
77779: LD_VAR 0 1
77783: ST_TO_ADDR
// if size >= result then
77784: LD_VAR 0 2
77788: PUSH
77789: LD_VAR 0 3
77793: GREATEREQUAL
77794: IFFALSE 77798
// exit ;
77796: GO 77848
// if size then
77798: LD_VAR 0 2
77802: IFFALSE 77848
// for i := array downto size do
77804: LD_ADDR_VAR 0 4
77808: PUSH
77809: DOUBLE
77810: LD_VAR 0 1
77814: INC
77815: ST_TO_ADDR
77816: LD_VAR 0 2
77820: PUSH
77821: FOR_DOWNTO
77822: IFFALSE 77846
// result := Delete ( result , result ) ;
77824: LD_ADDR_VAR 0 3
77828: PUSH
77829: LD_VAR 0 3
77833: PPUSH
77834: LD_VAR 0 3
77838: PPUSH
77839: CALL_OW 3
77843: ST_TO_ADDR
77844: GO 77821
77846: POP
77847: POP
// end ;
77848: LD_VAR 0 3
77852: RET
// export function ComExit ( unit ) ; var tmp ; begin
77853: LD_INT 0
77855: PPUSH
77856: PPUSH
// if not IsInUnit ( unit ) then
77857: LD_VAR 0 1
77861: PPUSH
77862: CALL_OW 310
77866: NOT
77867: IFFALSE 77871
// exit ;
77869: GO 77931
// tmp := IsInUnit ( unit ) ;
77871: LD_ADDR_VAR 0 3
77875: PUSH
77876: LD_VAR 0 1
77880: PPUSH
77881: CALL_OW 310
77885: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77886: LD_VAR 0 3
77890: PPUSH
77891: CALL_OW 247
77895: PUSH
77896: LD_INT 2
77898: EQUAL
77899: IFFALSE 77912
// ComExitVehicle ( unit ) else
77901: LD_VAR 0 1
77905: PPUSH
77906: CALL_OW 121
77910: GO 77921
// ComExitBuilding ( unit ) ;
77912: LD_VAR 0 1
77916: PPUSH
77917: CALL_OW 122
// result := tmp ;
77921: LD_ADDR_VAR 0 2
77925: PUSH
77926: LD_VAR 0 3
77930: ST_TO_ADDR
// end ;
77931: LD_VAR 0 2
77935: RET
// export function ComExitAll ( units ) ; var i ; begin
77936: LD_INT 0
77938: PPUSH
77939: PPUSH
// if not units then
77940: LD_VAR 0 1
77944: NOT
77945: IFFALSE 77949
// exit ;
77947: GO 77975
// for i in units do
77949: LD_ADDR_VAR 0 3
77953: PUSH
77954: LD_VAR 0 1
77958: PUSH
77959: FOR_IN
77960: IFFALSE 77973
// ComExit ( i ) ;
77962: LD_VAR 0 3
77966: PPUSH
77967: CALL 77853 0 1
77971: GO 77959
77973: POP
77974: POP
// end ;
77975: LD_VAR 0 2
77979: RET
// export function ResetHc ; begin
77980: LD_INT 0
77982: PPUSH
// InitHc ;
77983: CALL_OW 19
// hc_importance := 0 ;
77987: LD_ADDR_OWVAR 32
77991: PUSH
77992: LD_INT 0
77994: ST_TO_ADDR
// end ;
77995: LD_VAR 0 1
77999: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
78000: LD_INT 0
78002: PPUSH
78003: PPUSH
78004: PPUSH
// _x := ( x1 + x2 ) div 2 ;
78005: LD_ADDR_VAR 0 6
78009: PUSH
78010: LD_VAR 0 1
78014: PUSH
78015: LD_VAR 0 3
78019: PLUS
78020: PUSH
78021: LD_INT 2
78023: DIV
78024: ST_TO_ADDR
// if _x < 0 then
78025: LD_VAR 0 6
78029: PUSH
78030: LD_INT 0
78032: LESS
78033: IFFALSE 78050
// _x := _x * - 1 ;
78035: LD_ADDR_VAR 0 6
78039: PUSH
78040: LD_VAR 0 6
78044: PUSH
78045: LD_INT 1
78047: NEG
78048: MUL
78049: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
78050: LD_ADDR_VAR 0 7
78054: PUSH
78055: LD_VAR 0 2
78059: PUSH
78060: LD_VAR 0 4
78064: PLUS
78065: PUSH
78066: LD_INT 2
78068: DIV
78069: ST_TO_ADDR
// if _y < 0 then
78070: LD_VAR 0 7
78074: PUSH
78075: LD_INT 0
78077: LESS
78078: IFFALSE 78095
// _y := _y * - 1 ;
78080: LD_ADDR_VAR 0 7
78084: PUSH
78085: LD_VAR 0 7
78089: PUSH
78090: LD_INT 1
78092: NEG
78093: MUL
78094: ST_TO_ADDR
// result := [ _x , _y ] ;
78095: LD_ADDR_VAR 0 5
78099: PUSH
78100: LD_VAR 0 6
78104: PUSH
78105: LD_VAR 0 7
78109: PUSH
78110: EMPTY
78111: LIST
78112: LIST
78113: ST_TO_ADDR
// end ;
78114: LD_VAR 0 5
78118: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
78119: LD_INT 0
78121: PPUSH
78122: PPUSH
78123: PPUSH
78124: PPUSH
// task := GetTaskList ( unit ) ;
78125: LD_ADDR_VAR 0 7
78129: PUSH
78130: LD_VAR 0 1
78134: PPUSH
78135: CALL_OW 437
78139: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
78140: LD_VAR 0 7
78144: NOT
78145: PUSH
78146: LD_VAR 0 1
78150: PPUSH
78151: LD_VAR 0 2
78155: PPUSH
78156: CALL_OW 308
78160: NOT
78161: AND
78162: IFFALSE 78166
// exit ;
78164: GO 78284
// if IsInArea ( unit , area ) then
78166: LD_VAR 0 1
78170: PPUSH
78171: LD_VAR 0 2
78175: PPUSH
78176: CALL_OW 308
78180: IFFALSE 78198
// begin ComMoveToArea ( unit , goAway ) ;
78182: LD_VAR 0 1
78186: PPUSH
78187: LD_VAR 0 3
78191: PPUSH
78192: CALL_OW 113
// exit ;
78196: GO 78284
// end ; if task [ 1 ] [ 1 ] <> M then
78198: LD_VAR 0 7
78202: PUSH
78203: LD_INT 1
78205: ARRAY
78206: PUSH
78207: LD_INT 1
78209: ARRAY
78210: PUSH
78211: LD_STRING M
78213: NONEQUAL
78214: IFFALSE 78218
// exit ;
78216: GO 78284
// x := task [ 1 ] [ 2 ] ;
78218: LD_ADDR_VAR 0 5
78222: PUSH
78223: LD_VAR 0 7
78227: PUSH
78228: LD_INT 1
78230: ARRAY
78231: PUSH
78232: LD_INT 2
78234: ARRAY
78235: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
78236: LD_ADDR_VAR 0 6
78240: PUSH
78241: LD_VAR 0 7
78245: PUSH
78246: LD_INT 1
78248: ARRAY
78249: PUSH
78250: LD_INT 3
78252: ARRAY
78253: ST_TO_ADDR
// if InArea ( x , y , area ) then
78254: LD_VAR 0 5
78258: PPUSH
78259: LD_VAR 0 6
78263: PPUSH
78264: LD_VAR 0 2
78268: PPUSH
78269: CALL_OW 309
78273: IFFALSE 78284
// ComStop ( unit ) ;
78275: LD_VAR 0 1
78279: PPUSH
78280: CALL_OW 141
// end ;
78284: LD_VAR 0 4
78288: RET
// export function Abs ( value ) ; begin
78289: LD_INT 0
78291: PPUSH
// result := value ;
78292: LD_ADDR_VAR 0 2
78296: PUSH
78297: LD_VAR 0 1
78301: ST_TO_ADDR
// if value < 0 then
78302: LD_VAR 0 1
78306: PUSH
78307: LD_INT 0
78309: LESS
78310: IFFALSE 78327
// result := value * - 1 ;
78312: LD_ADDR_VAR 0 2
78316: PUSH
78317: LD_VAR 0 1
78321: PUSH
78322: LD_INT 1
78324: NEG
78325: MUL
78326: ST_TO_ADDR
// end ;
78327: LD_VAR 0 2
78331: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
78332: LD_INT 0
78334: PPUSH
78335: PPUSH
78336: PPUSH
78337: PPUSH
78338: PPUSH
78339: PPUSH
78340: PPUSH
78341: PPUSH
// if not unit or not building then
78342: LD_VAR 0 1
78346: NOT
78347: PUSH
78348: LD_VAR 0 2
78352: NOT
78353: OR
78354: IFFALSE 78358
// exit ;
78356: GO 78584
// x := GetX ( building ) ;
78358: LD_ADDR_VAR 0 4
78362: PUSH
78363: LD_VAR 0 2
78367: PPUSH
78368: CALL_OW 250
78372: ST_TO_ADDR
// y := GetY ( building ) ;
78373: LD_ADDR_VAR 0 6
78377: PUSH
78378: LD_VAR 0 2
78382: PPUSH
78383: CALL_OW 251
78387: ST_TO_ADDR
// d := GetDir ( building ) ;
78388: LD_ADDR_VAR 0 8
78392: PUSH
78393: LD_VAR 0 2
78397: PPUSH
78398: CALL_OW 254
78402: ST_TO_ADDR
// r := 4 ;
78403: LD_ADDR_VAR 0 9
78407: PUSH
78408: LD_INT 4
78410: ST_TO_ADDR
// for i := 1 to 5 do
78411: LD_ADDR_VAR 0 10
78415: PUSH
78416: DOUBLE
78417: LD_INT 1
78419: DEC
78420: ST_TO_ADDR
78421: LD_INT 5
78423: PUSH
78424: FOR_TO
78425: IFFALSE 78582
// begin _x := ShiftX ( x , d , r + i ) ;
78427: LD_ADDR_VAR 0 5
78431: PUSH
78432: LD_VAR 0 4
78436: PPUSH
78437: LD_VAR 0 8
78441: PPUSH
78442: LD_VAR 0 9
78446: PUSH
78447: LD_VAR 0 10
78451: PLUS
78452: PPUSH
78453: CALL_OW 272
78457: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78458: LD_ADDR_VAR 0 7
78462: PUSH
78463: LD_VAR 0 6
78467: PPUSH
78468: LD_VAR 0 8
78472: PPUSH
78473: LD_VAR 0 9
78477: PUSH
78478: LD_VAR 0 10
78482: PLUS
78483: PPUSH
78484: CALL_OW 273
78488: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78489: LD_VAR 0 5
78493: PPUSH
78494: LD_VAR 0 7
78498: PPUSH
78499: CALL_OW 488
78503: PUSH
78504: LD_VAR 0 5
78508: PPUSH
78509: LD_VAR 0 7
78513: PPUSH
78514: CALL_OW 428
78518: PPUSH
78519: CALL_OW 247
78523: PUSH
78524: LD_INT 3
78526: PUSH
78527: LD_INT 2
78529: PUSH
78530: EMPTY
78531: LIST
78532: LIST
78533: IN
78534: NOT
78535: AND
78536: IFFALSE 78580
// begin ComMoveXY ( unit , _x , _y ) ;
78538: LD_VAR 0 1
78542: PPUSH
78543: LD_VAR 0 5
78547: PPUSH
78548: LD_VAR 0 7
78552: PPUSH
78553: CALL_OW 111
// result := [ _x , _y ] ;
78557: LD_ADDR_VAR 0 3
78561: PUSH
78562: LD_VAR 0 5
78566: PUSH
78567: LD_VAR 0 7
78571: PUSH
78572: EMPTY
78573: LIST
78574: LIST
78575: ST_TO_ADDR
// exit ;
78576: POP
78577: POP
78578: GO 78584
// end ; end ;
78580: GO 78424
78582: POP
78583: POP
// end ;
78584: LD_VAR 0 3
78588: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78589: LD_INT 0
78591: PPUSH
78592: PPUSH
78593: PPUSH
// result := 0 ;
78594: LD_ADDR_VAR 0 3
78598: PUSH
78599: LD_INT 0
78601: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78602: LD_VAR 0 1
78606: PUSH
78607: LD_INT 0
78609: LESS
78610: PUSH
78611: LD_VAR 0 1
78615: PUSH
78616: LD_INT 8
78618: GREATER
78619: OR
78620: PUSH
78621: LD_VAR 0 2
78625: PUSH
78626: LD_INT 0
78628: LESS
78629: OR
78630: PUSH
78631: LD_VAR 0 2
78635: PUSH
78636: LD_INT 8
78638: GREATER
78639: OR
78640: IFFALSE 78644
// exit ;
78642: GO 78719
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78644: LD_ADDR_VAR 0 4
78648: PUSH
78649: LD_INT 22
78651: PUSH
78652: LD_VAR 0 2
78656: PUSH
78657: EMPTY
78658: LIST
78659: LIST
78660: PPUSH
78661: CALL_OW 69
78665: PUSH
78666: FOR_IN
78667: IFFALSE 78717
// begin un := UnitShoot ( i ) ;
78669: LD_ADDR_VAR 0 5
78673: PUSH
78674: LD_VAR 0 4
78678: PPUSH
78679: CALL_OW 504
78683: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78684: LD_VAR 0 5
78688: PPUSH
78689: CALL_OW 255
78693: PUSH
78694: LD_VAR 0 1
78698: EQUAL
78699: IFFALSE 78715
// begin result := un ;
78701: LD_ADDR_VAR 0 3
78705: PUSH
78706: LD_VAR 0 5
78710: ST_TO_ADDR
// exit ;
78711: POP
78712: POP
78713: GO 78719
// end ; end ;
78715: GO 78666
78717: POP
78718: POP
// end ;
78719: LD_VAR 0 3
78723: RET
// export function GetCargoBay ( units ) ; begin
78724: LD_INT 0
78726: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78727: LD_ADDR_VAR 0 2
78731: PUSH
78732: LD_VAR 0 1
78736: PPUSH
78737: LD_INT 2
78739: PUSH
78740: LD_INT 34
78742: PUSH
78743: LD_INT 12
78745: PUSH
78746: EMPTY
78747: LIST
78748: LIST
78749: PUSH
78750: LD_INT 34
78752: PUSH
78753: LD_INT 51
78755: PUSH
78756: EMPTY
78757: LIST
78758: LIST
78759: PUSH
78760: LD_INT 34
78762: PUSH
78763: LD_INT 32
78765: PUSH
78766: EMPTY
78767: LIST
78768: LIST
78769: PUSH
78770: LD_INT 34
78772: PUSH
78773: LD_INT 89
78775: PUSH
78776: EMPTY
78777: LIST
78778: LIST
78779: PUSH
78780: EMPTY
78781: LIST
78782: LIST
78783: LIST
78784: LIST
78785: LIST
78786: PPUSH
78787: CALL_OW 72
78791: ST_TO_ADDR
// end ;
78792: LD_VAR 0 2
78796: RET
// export function Negate ( value ) ; begin
78797: LD_INT 0
78799: PPUSH
// result := not value ;
78800: LD_ADDR_VAR 0 2
78804: PUSH
78805: LD_VAR 0 1
78809: NOT
78810: ST_TO_ADDR
// end ;
78811: LD_VAR 0 2
78815: RET
// export function Inc ( value ) ; begin
78816: LD_INT 0
78818: PPUSH
// result := value + 1 ;
78819: LD_ADDR_VAR 0 2
78823: PUSH
78824: LD_VAR 0 1
78828: PUSH
78829: LD_INT 1
78831: PLUS
78832: ST_TO_ADDR
// end ;
78833: LD_VAR 0 2
78837: RET
// export function Dec ( value ) ; begin
78838: LD_INT 0
78840: PPUSH
// result := value - 1 ;
78841: LD_ADDR_VAR 0 2
78845: PUSH
78846: LD_VAR 0 1
78850: PUSH
78851: LD_INT 1
78853: MINUS
78854: ST_TO_ADDR
// end ;
78855: LD_VAR 0 2
78859: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78860: LD_INT 0
78862: PPUSH
78863: PPUSH
78864: PPUSH
78865: PPUSH
78866: PPUSH
78867: PPUSH
78868: PPUSH
78869: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78870: LD_VAR 0 1
78874: PPUSH
78875: LD_VAR 0 2
78879: PPUSH
78880: CALL_OW 488
78884: NOT
78885: PUSH
78886: LD_VAR 0 3
78890: PPUSH
78891: LD_VAR 0 4
78895: PPUSH
78896: CALL_OW 488
78900: NOT
78901: OR
78902: IFFALSE 78915
// begin result := - 1 ;
78904: LD_ADDR_VAR 0 5
78908: PUSH
78909: LD_INT 1
78911: NEG
78912: ST_TO_ADDR
// exit ;
78913: GO 79150
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78915: LD_ADDR_VAR 0 12
78919: PUSH
78920: LD_VAR 0 1
78924: PPUSH
78925: LD_VAR 0 2
78929: PPUSH
78930: LD_VAR 0 3
78934: PPUSH
78935: LD_VAR 0 4
78939: PPUSH
78940: CALL 78000 0 4
78944: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78945: LD_ADDR_VAR 0 11
78949: PUSH
78950: LD_VAR 0 1
78954: PPUSH
78955: LD_VAR 0 2
78959: PPUSH
78960: LD_VAR 0 12
78964: PUSH
78965: LD_INT 1
78967: ARRAY
78968: PPUSH
78969: LD_VAR 0 12
78973: PUSH
78974: LD_INT 2
78976: ARRAY
78977: PPUSH
78978: CALL_OW 298
78982: ST_TO_ADDR
// distance := 9999 ;
78983: LD_ADDR_VAR 0 10
78987: PUSH
78988: LD_INT 9999
78990: ST_TO_ADDR
// for i := 0 to 5 do
78991: LD_ADDR_VAR 0 6
78995: PUSH
78996: DOUBLE
78997: LD_INT 0
78999: DEC
79000: ST_TO_ADDR
79001: LD_INT 5
79003: PUSH
79004: FOR_TO
79005: IFFALSE 79148
// begin _x := ShiftX ( x1 , i , centerDist ) ;
79007: LD_ADDR_VAR 0 7
79011: PUSH
79012: LD_VAR 0 1
79016: PPUSH
79017: LD_VAR 0 6
79021: PPUSH
79022: LD_VAR 0 11
79026: PPUSH
79027: CALL_OW 272
79031: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
79032: LD_ADDR_VAR 0 8
79036: PUSH
79037: LD_VAR 0 2
79041: PPUSH
79042: LD_VAR 0 6
79046: PPUSH
79047: LD_VAR 0 11
79051: PPUSH
79052: CALL_OW 273
79056: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
79057: LD_VAR 0 7
79061: PPUSH
79062: LD_VAR 0 8
79066: PPUSH
79067: CALL_OW 488
79071: NOT
79072: IFFALSE 79076
// continue ;
79074: GO 79004
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
79076: LD_ADDR_VAR 0 9
79080: PUSH
79081: LD_VAR 0 12
79085: PUSH
79086: LD_INT 1
79088: ARRAY
79089: PPUSH
79090: LD_VAR 0 12
79094: PUSH
79095: LD_INT 2
79097: ARRAY
79098: PPUSH
79099: LD_VAR 0 7
79103: PPUSH
79104: LD_VAR 0 8
79108: PPUSH
79109: CALL_OW 298
79113: ST_TO_ADDR
// if tmp < distance then
79114: LD_VAR 0 9
79118: PUSH
79119: LD_VAR 0 10
79123: LESS
79124: IFFALSE 79146
// begin result := i ;
79126: LD_ADDR_VAR 0 5
79130: PUSH
79131: LD_VAR 0 6
79135: ST_TO_ADDR
// distance := tmp ;
79136: LD_ADDR_VAR 0 10
79140: PUSH
79141: LD_VAR 0 9
79145: ST_TO_ADDR
// end ; end ;
79146: GO 79004
79148: POP
79149: POP
// end ;
79150: LD_VAR 0 5
79154: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79155: LD_INT 0
79157: PPUSH
79158: PPUSH
// if not driver or not IsInUnit ( driver ) then
79159: LD_VAR 0 1
79163: NOT
79164: PUSH
79165: LD_VAR 0 1
79169: PPUSH
79170: CALL_OW 310
79174: NOT
79175: OR
79176: IFFALSE 79180
// exit ;
79178: GO 79270
// vehicle := IsInUnit ( driver ) ;
79180: LD_ADDR_VAR 0 3
79184: PUSH
79185: LD_VAR 0 1
79189: PPUSH
79190: CALL_OW 310
79194: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79195: LD_VAR 0 1
79199: PPUSH
79200: LD_STRING \
79202: PUSH
79203: LD_INT 0
79205: PUSH
79206: LD_INT 0
79208: PUSH
79209: LD_INT 0
79211: PUSH
79212: LD_INT 0
79214: PUSH
79215: LD_INT 0
79217: PUSH
79218: LD_INT 0
79220: PUSH
79221: EMPTY
79222: LIST
79223: LIST
79224: LIST
79225: LIST
79226: LIST
79227: LIST
79228: LIST
79229: PUSH
79230: LD_STRING E
79232: PUSH
79233: LD_INT 0
79235: PUSH
79236: LD_INT 0
79238: PUSH
79239: LD_VAR 0 3
79243: PUSH
79244: LD_INT 0
79246: PUSH
79247: LD_INT 0
79249: PUSH
79250: LD_INT 0
79252: PUSH
79253: EMPTY
79254: LIST
79255: LIST
79256: LIST
79257: LIST
79258: LIST
79259: LIST
79260: LIST
79261: PUSH
79262: EMPTY
79263: LIST
79264: LIST
79265: PPUSH
79266: CALL_OW 446
// end ;
79270: LD_VAR 0 2
79274: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79275: LD_INT 0
79277: PPUSH
79278: PPUSH
// if not driver or not IsInUnit ( driver ) then
79279: LD_VAR 0 1
79283: NOT
79284: PUSH
79285: LD_VAR 0 1
79289: PPUSH
79290: CALL_OW 310
79294: NOT
79295: OR
79296: IFFALSE 79300
// exit ;
79298: GO 79390
// vehicle := IsInUnit ( driver ) ;
79300: LD_ADDR_VAR 0 3
79304: PUSH
79305: LD_VAR 0 1
79309: PPUSH
79310: CALL_OW 310
79314: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79315: LD_VAR 0 1
79319: PPUSH
79320: LD_STRING \
79322: PUSH
79323: LD_INT 0
79325: PUSH
79326: LD_INT 0
79328: PUSH
79329: LD_INT 0
79331: PUSH
79332: LD_INT 0
79334: PUSH
79335: LD_INT 0
79337: PUSH
79338: LD_INT 0
79340: PUSH
79341: EMPTY
79342: LIST
79343: LIST
79344: LIST
79345: LIST
79346: LIST
79347: LIST
79348: LIST
79349: PUSH
79350: LD_STRING E
79352: PUSH
79353: LD_INT 0
79355: PUSH
79356: LD_INT 0
79358: PUSH
79359: LD_VAR 0 3
79363: PUSH
79364: LD_INT 0
79366: PUSH
79367: LD_INT 0
79369: PUSH
79370: LD_INT 0
79372: PUSH
79373: EMPTY
79374: LIST
79375: LIST
79376: LIST
79377: LIST
79378: LIST
79379: LIST
79380: LIST
79381: PUSH
79382: EMPTY
79383: LIST
79384: LIST
79385: PPUSH
79386: CALL_OW 447
// end ;
79390: LD_VAR 0 2
79394: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
79395: LD_INT 0
79397: PPUSH
79398: PPUSH
79399: PPUSH
// tmp := [ ] ;
79400: LD_ADDR_VAR 0 5
79404: PUSH
79405: EMPTY
79406: ST_TO_ADDR
// for i in units do
79407: LD_ADDR_VAR 0 4
79411: PUSH
79412: LD_VAR 0 1
79416: PUSH
79417: FOR_IN
79418: IFFALSE 79456
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
79420: LD_ADDR_VAR 0 5
79424: PUSH
79425: LD_VAR 0 5
79429: PPUSH
79430: LD_VAR 0 5
79434: PUSH
79435: LD_INT 1
79437: PLUS
79438: PPUSH
79439: LD_VAR 0 4
79443: PPUSH
79444: CALL_OW 256
79448: PPUSH
79449: CALL_OW 2
79453: ST_TO_ADDR
79454: GO 79417
79456: POP
79457: POP
// if not tmp then
79458: LD_VAR 0 5
79462: NOT
79463: IFFALSE 79467
// exit ;
79465: GO 79515
// if asc then
79467: LD_VAR 0 2
79471: IFFALSE 79495
// result := SortListByListAsc ( units , tmp ) else
79473: LD_ADDR_VAR 0 3
79477: PUSH
79478: LD_VAR 0 1
79482: PPUSH
79483: LD_VAR 0 5
79487: PPUSH
79488: CALL_OW 76
79492: ST_TO_ADDR
79493: GO 79515
// result := SortListByListDesc ( units , tmp ) ;
79495: LD_ADDR_VAR 0 3
79499: PUSH
79500: LD_VAR 0 1
79504: PPUSH
79505: LD_VAR 0 5
79509: PPUSH
79510: CALL_OW 77
79514: ST_TO_ADDR
// end ;
79515: LD_VAR 0 3
79519: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79520: LD_INT 0
79522: PPUSH
79523: PPUSH
// task := GetTaskList ( mech ) ;
79524: LD_ADDR_VAR 0 4
79528: PUSH
79529: LD_VAR 0 1
79533: PPUSH
79534: CALL_OW 437
79538: ST_TO_ADDR
// if not task then
79539: LD_VAR 0 4
79543: NOT
79544: IFFALSE 79548
// exit ;
79546: GO 79590
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79548: LD_ADDR_VAR 0 3
79552: PUSH
79553: LD_VAR 0 4
79557: PUSH
79558: LD_INT 1
79560: ARRAY
79561: PUSH
79562: LD_INT 1
79564: ARRAY
79565: PUSH
79566: LD_STRING r
79568: EQUAL
79569: PUSH
79570: LD_VAR 0 4
79574: PUSH
79575: LD_INT 1
79577: ARRAY
79578: PUSH
79579: LD_INT 4
79581: ARRAY
79582: PUSH
79583: LD_VAR 0 2
79587: EQUAL
79588: AND
79589: ST_TO_ADDR
// end ;
79590: LD_VAR 0 3
79594: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79595: LD_INT 0
79597: PPUSH
// SetDir ( unit , d ) ;
79598: LD_VAR 0 1
79602: PPUSH
79603: LD_VAR 0 4
79607: PPUSH
79608: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79612: LD_VAR 0 1
79616: PPUSH
79617: LD_VAR 0 2
79621: PPUSH
79622: LD_VAR 0 3
79626: PPUSH
79627: LD_VAR 0 5
79631: PPUSH
79632: CALL_OW 48
// end ;
79636: LD_VAR 0 6
79640: RET
// export function ToNaturalNumber ( number ) ; begin
79641: LD_INT 0
79643: PPUSH
// result := number div 1 ;
79644: LD_ADDR_VAR 0 2
79648: PUSH
79649: LD_VAR 0 1
79653: PUSH
79654: LD_INT 1
79656: DIV
79657: ST_TO_ADDR
// if number < 0 then
79658: LD_VAR 0 1
79662: PUSH
79663: LD_INT 0
79665: LESS
79666: IFFALSE 79676
// result := 0 ;
79668: LD_ADDR_VAR 0 2
79672: PUSH
79673: LD_INT 0
79675: ST_TO_ADDR
// end ;
79676: LD_VAR 0 2
79680: RET
// export function SortByClass ( units , class ) ; var un ; begin
79681: LD_INT 0
79683: PPUSH
79684: PPUSH
// if not units or not class then
79685: LD_VAR 0 1
79689: NOT
79690: PUSH
79691: LD_VAR 0 2
79695: NOT
79696: OR
79697: IFFALSE 79701
// exit ;
79699: GO 79796
// result := [ ] ;
79701: LD_ADDR_VAR 0 3
79705: PUSH
79706: EMPTY
79707: ST_TO_ADDR
// for un in units do
79708: LD_ADDR_VAR 0 4
79712: PUSH
79713: LD_VAR 0 1
79717: PUSH
79718: FOR_IN
79719: IFFALSE 79794
// if GetClass ( un ) = class then
79721: LD_VAR 0 4
79725: PPUSH
79726: CALL_OW 257
79730: PUSH
79731: LD_VAR 0 2
79735: EQUAL
79736: IFFALSE 79763
// result := Insert ( result , 1 , un ) else
79738: LD_ADDR_VAR 0 3
79742: PUSH
79743: LD_VAR 0 3
79747: PPUSH
79748: LD_INT 1
79750: PPUSH
79751: LD_VAR 0 4
79755: PPUSH
79756: CALL_OW 2
79760: ST_TO_ADDR
79761: GO 79792
// result := Replace ( result , result + 1 , un ) ;
79763: LD_ADDR_VAR 0 3
79767: PUSH
79768: LD_VAR 0 3
79772: PPUSH
79773: LD_VAR 0 3
79777: PUSH
79778: LD_INT 1
79780: PLUS
79781: PPUSH
79782: LD_VAR 0 4
79786: PPUSH
79787: CALL_OW 1
79791: ST_TO_ADDR
79792: GO 79718
79794: POP
79795: POP
// end ;
79796: LD_VAR 0 3
79800: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79801: LD_INT 0
79803: PPUSH
79804: PPUSH
79805: PPUSH
79806: PPUSH
79807: PPUSH
79808: PPUSH
79809: PPUSH
// result := [ ] ;
79810: LD_ADDR_VAR 0 4
79814: PUSH
79815: EMPTY
79816: ST_TO_ADDR
// if x - r < 0 then
79817: LD_VAR 0 1
79821: PUSH
79822: LD_VAR 0 3
79826: MINUS
79827: PUSH
79828: LD_INT 0
79830: LESS
79831: IFFALSE 79843
// min_x := 0 else
79833: LD_ADDR_VAR 0 8
79837: PUSH
79838: LD_INT 0
79840: ST_TO_ADDR
79841: GO 79859
// min_x := x - r ;
79843: LD_ADDR_VAR 0 8
79847: PUSH
79848: LD_VAR 0 1
79852: PUSH
79853: LD_VAR 0 3
79857: MINUS
79858: ST_TO_ADDR
// if y - r < 0 then
79859: LD_VAR 0 2
79863: PUSH
79864: LD_VAR 0 3
79868: MINUS
79869: PUSH
79870: LD_INT 0
79872: LESS
79873: IFFALSE 79885
// min_y := 0 else
79875: LD_ADDR_VAR 0 7
79879: PUSH
79880: LD_INT 0
79882: ST_TO_ADDR
79883: GO 79901
// min_y := y - r ;
79885: LD_ADDR_VAR 0 7
79889: PUSH
79890: LD_VAR 0 2
79894: PUSH
79895: LD_VAR 0 3
79899: MINUS
79900: ST_TO_ADDR
// max_x := x + r ;
79901: LD_ADDR_VAR 0 9
79905: PUSH
79906: LD_VAR 0 1
79910: PUSH
79911: LD_VAR 0 3
79915: PLUS
79916: ST_TO_ADDR
// max_y := y + r ;
79917: LD_ADDR_VAR 0 10
79921: PUSH
79922: LD_VAR 0 2
79926: PUSH
79927: LD_VAR 0 3
79931: PLUS
79932: ST_TO_ADDR
// for _x = min_x to max_x do
79933: LD_ADDR_VAR 0 5
79937: PUSH
79938: DOUBLE
79939: LD_VAR 0 8
79943: DEC
79944: ST_TO_ADDR
79945: LD_VAR 0 9
79949: PUSH
79950: FOR_TO
79951: IFFALSE 80052
// for _y = min_y to max_y do
79953: LD_ADDR_VAR 0 6
79957: PUSH
79958: DOUBLE
79959: LD_VAR 0 7
79963: DEC
79964: ST_TO_ADDR
79965: LD_VAR 0 10
79969: PUSH
79970: FOR_TO
79971: IFFALSE 80048
// begin if not ValidHex ( _x , _y ) then
79973: LD_VAR 0 5
79977: PPUSH
79978: LD_VAR 0 6
79982: PPUSH
79983: CALL_OW 488
79987: NOT
79988: IFFALSE 79992
// continue ;
79990: GO 79970
// if GetResourceTypeXY ( _x , _y ) then
79992: LD_VAR 0 5
79996: PPUSH
79997: LD_VAR 0 6
80001: PPUSH
80002: CALL_OW 283
80006: IFFALSE 80046
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
80008: LD_ADDR_VAR 0 4
80012: PUSH
80013: LD_VAR 0 4
80017: PPUSH
80018: LD_VAR 0 4
80022: PUSH
80023: LD_INT 1
80025: PLUS
80026: PPUSH
80027: LD_VAR 0 5
80031: PUSH
80032: LD_VAR 0 6
80036: PUSH
80037: EMPTY
80038: LIST
80039: LIST
80040: PPUSH
80041: CALL_OW 1
80045: ST_TO_ADDR
// end ;
80046: GO 79970
80048: POP
80049: POP
80050: GO 79950
80052: POP
80053: POP
// end ;
80054: LD_VAR 0 4
80058: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
80059: LD_INT 0
80061: PPUSH
80062: PPUSH
80063: PPUSH
80064: PPUSH
80065: PPUSH
80066: PPUSH
80067: PPUSH
80068: PPUSH
// if not units then
80069: LD_VAR 0 1
80073: NOT
80074: IFFALSE 80078
// exit ;
80076: GO 80602
// result := UnitFilter ( units , [ f_ok ] ) ;
80078: LD_ADDR_VAR 0 3
80082: PUSH
80083: LD_VAR 0 1
80087: PPUSH
80088: LD_INT 50
80090: PUSH
80091: EMPTY
80092: LIST
80093: PPUSH
80094: CALL_OW 72
80098: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
80099: LD_ADDR_VAR 0 8
80103: PUSH
80104: LD_VAR 0 1
80108: PUSH
80109: LD_INT 1
80111: ARRAY
80112: PPUSH
80113: CALL_OW 255
80117: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
80118: LD_ADDR_VAR 0 10
80122: PUSH
80123: LD_INT 29
80125: PUSH
80126: LD_INT 91
80128: PUSH
80129: LD_INT 49
80131: PUSH
80132: EMPTY
80133: LIST
80134: LIST
80135: LIST
80136: ST_TO_ADDR
// if not result then
80137: LD_VAR 0 3
80141: NOT
80142: IFFALSE 80146
// exit ;
80144: GO 80602
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
80146: LD_ADDR_VAR 0 5
80150: PUSH
80151: LD_INT 81
80153: PUSH
80154: LD_VAR 0 8
80158: PUSH
80159: EMPTY
80160: LIST
80161: LIST
80162: PPUSH
80163: CALL_OW 69
80167: ST_TO_ADDR
// for i in result do
80168: LD_ADDR_VAR 0 4
80172: PUSH
80173: LD_VAR 0 3
80177: PUSH
80178: FOR_IN
80179: IFFALSE 80600
// begin tag := GetTag ( i ) + 1 ;
80181: LD_ADDR_VAR 0 9
80185: PUSH
80186: LD_VAR 0 4
80190: PPUSH
80191: CALL_OW 110
80195: PUSH
80196: LD_INT 1
80198: PLUS
80199: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
80200: LD_ADDR_VAR 0 7
80204: PUSH
80205: LD_VAR 0 4
80209: PPUSH
80210: CALL_OW 250
80214: PPUSH
80215: LD_VAR 0 4
80219: PPUSH
80220: CALL_OW 251
80224: PPUSH
80225: LD_INT 6
80227: PPUSH
80228: CALL 79801 0 3
80232: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
80233: LD_VAR 0 4
80237: PPUSH
80238: CALL_OW 247
80242: PUSH
80243: LD_INT 2
80245: EQUAL
80246: PUSH
80247: LD_VAR 0 7
80251: AND
80252: PUSH
80253: LD_VAR 0 4
80257: PPUSH
80258: CALL_OW 264
80262: PUSH
80263: LD_VAR 0 10
80267: IN
80268: NOT
80269: AND
80270: IFFALSE 80309
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
80272: LD_VAR 0 4
80276: PPUSH
80277: LD_VAR 0 7
80281: PUSH
80282: LD_INT 1
80284: ARRAY
80285: PUSH
80286: LD_INT 1
80288: ARRAY
80289: PPUSH
80290: LD_VAR 0 7
80294: PUSH
80295: LD_INT 1
80297: ARRAY
80298: PUSH
80299: LD_INT 2
80301: ARRAY
80302: PPUSH
80303: CALL_OW 116
80307: GO 80598
// if path > tag then
80309: LD_VAR 0 2
80313: PUSH
80314: LD_VAR 0 9
80318: GREATER
80319: IFFALSE 80527
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
80321: LD_ADDR_VAR 0 6
80325: PUSH
80326: LD_VAR 0 5
80330: PPUSH
80331: LD_INT 91
80333: PUSH
80334: LD_VAR 0 4
80338: PUSH
80339: LD_INT 8
80341: PUSH
80342: EMPTY
80343: LIST
80344: LIST
80345: LIST
80346: PPUSH
80347: CALL_OW 72
80351: ST_TO_ADDR
// if nearEnemy then
80352: LD_VAR 0 6
80356: IFFALSE 80425
// begin if GetWeapon ( i ) = ru_time_lapser then
80358: LD_VAR 0 4
80362: PPUSH
80363: CALL_OW 264
80367: PUSH
80368: LD_INT 49
80370: EQUAL
80371: IFFALSE 80399
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
80373: LD_VAR 0 4
80377: PPUSH
80378: LD_VAR 0 6
80382: PPUSH
80383: LD_VAR 0 4
80387: PPUSH
80388: CALL_OW 74
80392: PPUSH
80393: CALL_OW 112
80397: GO 80423
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
80399: LD_VAR 0 4
80403: PPUSH
80404: LD_VAR 0 6
80408: PPUSH
80409: LD_VAR 0 4
80413: PPUSH
80414: CALL_OW 74
80418: PPUSH
80419: CALL 81527 0 2
// end else
80423: GO 80525
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
80425: LD_VAR 0 4
80429: PPUSH
80430: LD_VAR 0 2
80434: PUSH
80435: LD_VAR 0 9
80439: ARRAY
80440: PUSH
80441: LD_INT 1
80443: ARRAY
80444: PPUSH
80445: LD_VAR 0 2
80449: PUSH
80450: LD_VAR 0 9
80454: ARRAY
80455: PUSH
80456: LD_INT 2
80458: ARRAY
80459: PPUSH
80460: CALL_OW 297
80464: PUSH
80465: LD_INT 6
80467: GREATER
80468: IFFALSE 80511
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
80470: LD_VAR 0 4
80474: PPUSH
80475: LD_VAR 0 2
80479: PUSH
80480: LD_VAR 0 9
80484: ARRAY
80485: PUSH
80486: LD_INT 1
80488: ARRAY
80489: PPUSH
80490: LD_VAR 0 2
80494: PUSH
80495: LD_VAR 0 9
80499: ARRAY
80500: PUSH
80501: LD_INT 2
80503: ARRAY
80504: PPUSH
80505: CALL_OW 114
80509: GO 80525
// SetTag ( i , tag ) ;
80511: LD_VAR 0 4
80515: PPUSH
80516: LD_VAR 0 9
80520: PPUSH
80521: CALL_OW 109
// end else
80525: GO 80598
// if enemy then
80527: LD_VAR 0 5
80531: IFFALSE 80598
// begin if GetWeapon ( i ) = ru_time_lapser then
80533: LD_VAR 0 4
80537: PPUSH
80538: CALL_OW 264
80542: PUSH
80543: LD_INT 49
80545: EQUAL
80546: IFFALSE 80574
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80548: LD_VAR 0 4
80552: PPUSH
80553: LD_VAR 0 5
80557: PPUSH
80558: LD_VAR 0 4
80562: PPUSH
80563: CALL_OW 74
80567: PPUSH
80568: CALL_OW 112
80572: GO 80598
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80574: LD_VAR 0 4
80578: PPUSH
80579: LD_VAR 0 5
80583: PPUSH
80584: LD_VAR 0 4
80588: PPUSH
80589: CALL_OW 74
80593: PPUSH
80594: CALL 81527 0 2
// end ; end ;
80598: GO 80178
80600: POP
80601: POP
// end ;
80602: LD_VAR 0 3
80606: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80607: LD_INT 0
80609: PPUSH
80610: PPUSH
80611: PPUSH
// if not unit or IsInUnit ( unit ) then
80612: LD_VAR 0 1
80616: NOT
80617: PUSH
80618: LD_VAR 0 1
80622: PPUSH
80623: CALL_OW 310
80627: OR
80628: IFFALSE 80632
// exit ;
80630: GO 80723
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80632: LD_ADDR_VAR 0 4
80636: PUSH
80637: LD_VAR 0 1
80641: PPUSH
80642: CALL_OW 250
80646: PPUSH
80647: LD_VAR 0 2
80651: PPUSH
80652: LD_INT 1
80654: PPUSH
80655: CALL_OW 272
80659: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80660: LD_ADDR_VAR 0 5
80664: PUSH
80665: LD_VAR 0 1
80669: PPUSH
80670: CALL_OW 251
80674: PPUSH
80675: LD_VAR 0 2
80679: PPUSH
80680: LD_INT 1
80682: PPUSH
80683: CALL_OW 273
80687: ST_TO_ADDR
// if ValidHex ( x , y ) then
80688: LD_VAR 0 4
80692: PPUSH
80693: LD_VAR 0 5
80697: PPUSH
80698: CALL_OW 488
80702: IFFALSE 80723
// ComTurnXY ( unit , x , y ) ;
80704: LD_VAR 0 1
80708: PPUSH
80709: LD_VAR 0 4
80713: PPUSH
80714: LD_VAR 0 5
80718: PPUSH
80719: CALL_OW 118
// end ;
80723: LD_VAR 0 3
80727: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80728: LD_INT 0
80730: PPUSH
80731: PPUSH
// result := false ;
80732: LD_ADDR_VAR 0 3
80736: PUSH
80737: LD_INT 0
80739: ST_TO_ADDR
// if not units then
80740: LD_VAR 0 2
80744: NOT
80745: IFFALSE 80749
// exit ;
80747: GO 80794
// for i in units do
80749: LD_ADDR_VAR 0 4
80753: PUSH
80754: LD_VAR 0 2
80758: PUSH
80759: FOR_IN
80760: IFFALSE 80792
// if See ( side , i ) then
80762: LD_VAR 0 1
80766: PPUSH
80767: LD_VAR 0 4
80771: PPUSH
80772: CALL_OW 292
80776: IFFALSE 80790
// begin result := true ;
80778: LD_ADDR_VAR 0 3
80782: PUSH
80783: LD_INT 1
80785: ST_TO_ADDR
// exit ;
80786: POP
80787: POP
80788: GO 80794
// end ;
80790: GO 80759
80792: POP
80793: POP
// end ;
80794: LD_VAR 0 3
80798: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80799: LD_INT 0
80801: PPUSH
80802: PPUSH
80803: PPUSH
80804: PPUSH
// if not unit or not points then
80805: LD_VAR 0 1
80809: NOT
80810: PUSH
80811: LD_VAR 0 2
80815: NOT
80816: OR
80817: IFFALSE 80821
// exit ;
80819: GO 80911
// dist := 99999 ;
80821: LD_ADDR_VAR 0 5
80825: PUSH
80826: LD_INT 99999
80828: ST_TO_ADDR
// for i in points do
80829: LD_ADDR_VAR 0 4
80833: PUSH
80834: LD_VAR 0 2
80838: PUSH
80839: FOR_IN
80840: IFFALSE 80909
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80842: LD_ADDR_VAR 0 6
80846: PUSH
80847: LD_VAR 0 1
80851: PPUSH
80852: LD_VAR 0 4
80856: PUSH
80857: LD_INT 1
80859: ARRAY
80860: PPUSH
80861: LD_VAR 0 4
80865: PUSH
80866: LD_INT 2
80868: ARRAY
80869: PPUSH
80870: CALL_OW 297
80874: ST_TO_ADDR
// if tmpDist < dist then
80875: LD_VAR 0 6
80879: PUSH
80880: LD_VAR 0 5
80884: LESS
80885: IFFALSE 80907
// begin result := i ;
80887: LD_ADDR_VAR 0 3
80891: PUSH
80892: LD_VAR 0 4
80896: ST_TO_ADDR
// dist := tmpDist ;
80897: LD_ADDR_VAR 0 5
80901: PUSH
80902: LD_VAR 0 6
80906: ST_TO_ADDR
// end ; end ;
80907: GO 80839
80909: POP
80910: POP
// end ;
80911: LD_VAR 0 3
80915: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80916: LD_INT 0
80918: PPUSH
// uc_side := side ;
80919: LD_ADDR_OWVAR 20
80923: PUSH
80924: LD_VAR 0 1
80928: ST_TO_ADDR
// uc_nation := 3 ;
80929: LD_ADDR_OWVAR 21
80933: PUSH
80934: LD_INT 3
80936: ST_TO_ADDR
// vc_chassis := 25 ;
80937: LD_ADDR_OWVAR 37
80941: PUSH
80942: LD_INT 25
80944: ST_TO_ADDR
// vc_engine := engine_siberite ;
80945: LD_ADDR_OWVAR 39
80949: PUSH
80950: LD_INT 3
80952: ST_TO_ADDR
// vc_control := control_computer ;
80953: LD_ADDR_OWVAR 38
80957: PUSH
80958: LD_INT 3
80960: ST_TO_ADDR
// vc_weapon := 59 ;
80961: LD_ADDR_OWVAR 40
80965: PUSH
80966: LD_INT 59
80968: ST_TO_ADDR
// result := CreateVehicle ;
80969: LD_ADDR_VAR 0 5
80973: PUSH
80974: CALL_OW 45
80978: ST_TO_ADDR
// SetDir ( result , d ) ;
80979: LD_VAR 0 5
80983: PPUSH
80984: LD_VAR 0 4
80988: PPUSH
80989: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80993: LD_VAR 0 5
80997: PPUSH
80998: LD_VAR 0 2
81002: PPUSH
81003: LD_VAR 0 3
81007: PPUSH
81008: LD_INT 0
81010: PPUSH
81011: CALL_OW 48
// end ;
81015: LD_VAR 0 5
81019: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
81020: LD_INT 0
81022: PPUSH
81023: PPUSH
81024: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
81025: LD_ADDR_VAR 0 2
81029: PUSH
81030: LD_INT 0
81032: PUSH
81033: LD_INT 0
81035: PUSH
81036: LD_INT 0
81038: PUSH
81039: LD_INT 0
81041: PUSH
81042: EMPTY
81043: LIST
81044: LIST
81045: LIST
81046: LIST
81047: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
81048: LD_VAR 0 1
81052: NOT
81053: PUSH
81054: LD_VAR 0 1
81058: PPUSH
81059: CALL_OW 264
81063: PUSH
81064: LD_INT 12
81066: PUSH
81067: LD_INT 51
81069: PUSH
81070: LD_INT 32
81072: PUSH
81073: LD_INT 89
81075: PUSH
81076: EMPTY
81077: LIST
81078: LIST
81079: LIST
81080: LIST
81081: IN
81082: NOT
81083: OR
81084: IFFALSE 81088
// exit ;
81086: GO 81186
// for i := 1 to 3 do
81088: LD_ADDR_VAR 0 3
81092: PUSH
81093: DOUBLE
81094: LD_INT 1
81096: DEC
81097: ST_TO_ADDR
81098: LD_INT 3
81100: PUSH
81101: FOR_TO
81102: IFFALSE 81184
// begin tmp := GetCargo ( cargo , i ) ;
81104: LD_ADDR_VAR 0 4
81108: PUSH
81109: LD_VAR 0 1
81113: PPUSH
81114: LD_VAR 0 3
81118: PPUSH
81119: CALL_OW 289
81123: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
81124: LD_ADDR_VAR 0 2
81128: PUSH
81129: LD_VAR 0 2
81133: PPUSH
81134: LD_VAR 0 3
81138: PPUSH
81139: LD_VAR 0 4
81143: PPUSH
81144: CALL_OW 1
81148: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
81149: LD_ADDR_VAR 0 2
81153: PUSH
81154: LD_VAR 0 2
81158: PPUSH
81159: LD_INT 4
81161: PPUSH
81162: LD_VAR 0 2
81166: PUSH
81167: LD_INT 4
81169: ARRAY
81170: PUSH
81171: LD_VAR 0 4
81175: PLUS
81176: PPUSH
81177: CALL_OW 1
81181: ST_TO_ADDR
// end ;
81182: GO 81101
81184: POP
81185: POP
// end ;
81186: LD_VAR 0 2
81190: RET
// export function Length ( array ) ; begin
81191: LD_INT 0
81193: PPUSH
// result := array + 0 ;
81194: LD_ADDR_VAR 0 2
81198: PUSH
81199: LD_VAR 0 1
81203: PUSH
81204: LD_INT 0
81206: PLUS
81207: ST_TO_ADDR
// end ;
81208: LD_VAR 0 2
81212: RET
// export function PrepareArray ( array ) ; begin
81213: LD_INT 0
81215: PPUSH
// result := array diff 0 ;
81216: LD_ADDR_VAR 0 2
81220: PUSH
81221: LD_VAR 0 1
81225: PUSH
81226: LD_INT 0
81228: DIFF
81229: ST_TO_ADDR
// if not result [ 1 ] then
81230: LD_VAR 0 2
81234: PUSH
81235: LD_INT 1
81237: ARRAY
81238: NOT
81239: IFFALSE 81259
// result := Delete ( result , 1 ) ;
81241: LD_ADDR_VAR 0 2
81245: PUSH
81246: LD_VAR 0 2
81250: PPUSH
81251: LD_INT 1
81253: PPUSH
81254: CALL_OW 3
81258: ST_TO_ADDR
// end ;
81259: LD_VAR 0 2
81263: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
81264: LD_INT 0
81266: PPUSH
81267: PPUSH
81268: PPUSH
81269: PPUSH
// sibRocketRange := 25 ;
81270: LD_ADDR_VAR 0 6
81274: PUSH
81275: LD_INT 25
81277: ST_TO_ADDR
// result := false ;
81278: LD_ADDR_VAR 0 4
81282: PUSH
81283: LD_INT 0
81285: ST_TO_ADDR
// for i := 0 to 5 do
81286: LD_ADDR_VAR 0 5
81290: PUSH
81291: DOUBLE
81292: LD_INT 0
81294: DEC
81295: ST_TO_ADDR
81296: LD_INT 5
81298: PUSH
81299: FOR_TO
81300: IFFALSE 81367
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
81302: LD_VAR 0 1
81306: PPUSH
81307: LD_VAR 0 5
81311: PPUSH
81312: LD_VAR 0 6
81316: PPUSH
81317: CALL_OW 272
81321: PPUSH
81322: LD_VAR 0 2
81326: PPUSH
81327: LD_VAR 0 5
81331: PPUSH
81332: LD_VAR 0 6
81336: PPUSH
81337: CALL_OW 273
81341: PPUSH
81342: LD_VAR 0 3
81346: PPUSH
81347: CALL_OW 309
81351: IFFALSE 81365
// begin result := true ;
81353: LD_ADDR_VAR 0 4
81357: PUSH
81358: LD_INT 1
81360: ST_TO_ADDR
// exit ;
81361: POP
81362: POP
81363: GO 81369
// end ;
81365: GO 81299
81367: POP
81368: POP
// end ;
81369: LD_VAR 0 4
81373: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
81374: LD_INT 0
81376: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
81377: LD_VAR 0 1
81381: PPUSH
81382: LD_VAR 0 2
81386: PPUSH
81387: LD_INT 0
81389: PPUSH
81390: LD_INT 0
81392: PPUSH
81393: LD_INT 1
81395: PPUSH
81396: LD_INT 0
81398: PPUSH
81399: CALL_OW 587
// end ;
81403: LD_VAR 0 3
81407: RET
// export function CenterOnNow ( unit ) ; begin
81408: LD_INT 0
81410: PPUSH
// result := IsInUnit ( unit ) ;
81411: LD_ADDR_VAR 0 2
81415: PUSH
81416: LD_VAR 0 1
81420: PPUSH
81421: CALL_OW 310
81425: ST_TO_ADDR
// if not result then
81426: LD_VAR 0 2
81430: NOT
81431: IFFALSE 81443
// result := unit ;
81433: LD_ADDR_VAR 0 2
81437: PUSH
81438: LD_VAR 0 1
81442: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
81443: LD_VAR 0 1
81447: PPUSH
81448: CALL_OW 87
// end ;
81452: LD_VAR 0 2
81456: RET
// export function ComMoveHex ( unit , hex ) ; begin
81457: LD_INT 0
81459: PPUSH
// if not hex then
81460: LD_VAR 0 2
81464: NOT
81465: IFFALSE 81469
// exit ;
81467: GO 81522
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
81469: LD_VAR 0 2
81473: PUSH
81474: LD_INT 1
81476: ARRAY
81477: PPUSH
81478: LD_VAR 0 2
81482: PUSH
81483: LD_INT 2
81485: ARRAY
81486: PPUSH
81487: CALL_OW 428
81491: IFFALSE 81495
// exit ;
81493: GO 81522
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
81495: LD_VAR 0 1
81499: PPUSH
81500: LD_VAR 0 2
81504: PUSH
81505: LD_INT 1
81507: ARRAY
81508: PPUSH
81509: LD_VAR 0 2
81513: PUSH
81514: LD_INT 2
81516: ARRAY
81517: PPUSH
81518: CALL_OW 111
// end ;
81522: LD_VAR 0 3
81526: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
81527: LD_INT 0
81529: PPUSH
81530: PPUSH
81531: PPUSH
// if not unit or not enemy then
81532: LD_VAR 0 1
81536: NOT
81537: PUSH
81538: LD_VAR 0 2
81542: NOT
81543: OR
81544: IFFALSE 81548
// exit ;
81546: GO 81672
// x := GetX ( enemy ) ;
81548: LD_ADDR_VAR 0 4
81552: PUSH
81553: LD_VAR 0 2
81557: PPUSH
81558: CALL_OW 250
81562: ST_TO_ADDR
// y := GetY ( enemy ) ;
81563: LD_ADDR_VAR 0 5
81567: PUSH
81568: LD_VAR 0 2
81572: PPUSH
81573: CALL_OW 251
81577: ST_TO_ADDR
// if ValidHex ( x , y ) then
81578: LD_VAR 0 4
81582: PPUSH
81583: LD_VAR 0 5
81587: PPUSH
81588: CALL_OW 488
81592: IFFALSE 81672
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
81594: LD_VAR 0 2
81598: PPUSH
81599: CALL_OW 247
81603: PUSH
81604: LD_INT 3
81606: PUSH
81607: LD_INT 2
81609: PUSH
81610: EMPTY
81611: LIST
81612: LIST
81613: IN
81614: PUSH
81615: LD_VAR 0 1
81619: PPUSH
81620: CALL_OW 255
81624: PPUSH
81625: LD_VAR 0 2
81629: PPUSH
81630: CALL_OW 292
81634: OR
81635: IFFALSE 81653
// ComAttackUnit ( unit , enemy ) else
81637: LD_VAR 0 1
81641: PPUSH
81642: LD_VAR 0 2
81646: PPUSH
81647: CALL_OW 115
81651: GO 81672
// ComAgressiveMove ( unit , x , y ) ;
81653: LD_VAR 0 1
81657: PPUSH
81658: LD_VAR 0 4
81662: PPUSH
81663: LD_VAR 0 5
81667: PPUSH
81668: CALL_OW 114
// end ;
81672: LD_VAR 0 3
81676: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
81677: LD_INT 0
81679: PPUSH
81680: PPUSH
81681: PPUSH
// list := AreaToList ( area , 0 ) ;
81682: LD_ADDR_VAR 0 5
81686: PUSH
81687: LD_VAR 0 1
81691: PPUSH
81692: LD_INT 0
81694: PPUSH
81695: CALL_OW 517
81699: ST_TO_ADDR
// if not list then
81700: LD_VAR 0 5
81704: NOT
81705: IFFALSE 81709
// exit ;
81707: GO 81839
// if all then
81709: LD_VAR 0 2
81713: IFFALSE 81801
// begin for i := 1 to list [ 1 ] do
81715: LD_ADDR_VAR 0 4
81719: PUSH
81720: DOUBLE
81721: LD_INT 1
81723: DEC
81724: ST_TO_ADDR
81725: LD_VAR 0 5
81729: PUSH
81730: LD_INT 1
81732: ARRAY
81733: PUSH
81734: FOR_TO
81735: IFFALSE 81797
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
81737: LD_ADDR_VAR 0 3
81741: PUSH
81742: LD_VAR 0 3
81746: PPUSH
81747: LD_VAR 0 3
81751: PUSH
81752: LD_INT 1
81754: PLUS
81755: PPUSH
81756: LD_VAR 0 5
81760: PUSH
81761: LD_INT 1
81763: ARRAY
81764: PUSH
81765: LD_VAR 0 4
81769: ARRAY
81770: PUSH
81771: LD_VAR 0 5
81775: PUSH
81776: LD_INT 2
81778: ARRAY
81779: PUSH
81780: LD_VAR 0 4
81784: ARRAY
81785: PUSH
81786: EMPTY
81787: LIST
81788: LIST
81789: PPUSH
81790: CALL_OW 1
81794: ST_TO_ADDR
81795: GO 81734
81797: POP
81798: POP
// exit ;
81799: GO 81839
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
81801: LD_ADDR_VAR 0 3
81805: PUSH
81806: LD_VAR 0 5
81810: PUSH
81811: LD_INT 1
81813: ARRAY
81814: PUSH
81815: LD_INT 1
81817: ARRAY
81818: PUSH
81819: LD_VAR 0 5
81823: PUSH
81824: LD_INT 2
81826: ARRAY
81827: PUSH
81828: LD_INT 1
81830: ARRAY
81831: PUSH
81832: EMPTY
81833: LIST
81834: LIST
81835: PUSH
81836: EMPTY
81837: LIST
81838: ST_TO_ADDR
// end ;
81839: LD_VAR 0 3
81843: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
81844: LD_INT 0
81846: PPUSH
81847: PPUSH
// list := AreaToList ( area , 0 ) ;
81848: LD_ADDR_VAR 0 4
81852: PUSH
81853: LD_VAR 0 1
81857: PPUSH
81858: LD_INT 0
81860: PPUSH
81861: CALL_OW 517
81865: ST_TO_ADDR
// if not list then
81866: LD_VAR 0 4
81870: NOT
81871: IFFALSE 81875
// exit ;
81873: GO 81916
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
81875: LD_ADDR_VAR 0 3
81879: PUSH
81880: LD_VAR 0 4
81884: PUSH
81885: LD_INT 1
81887: ARRAY
81888: PUSH
81889: LD_INT 1
81891: ARRAY
81892: PUSH
81893: LD_VAR 0 4
81897: PUSH
81898: LD_INT 2
81900: ARRAY
81901: PUSH
81902: LD_INT 1
81904: ARRAY
81905: PUSH
81906: LD_VAR 0 2
81910: PUSH
81911: EMPTY
81912: LIST
81913: LIST
81914: LIST
81915: ST_TO_ADDR
// end ;
81916: LD_VAR 0 3
81920: RET
// export function First ( array ) ; begin
81921: LD_INT 0
81923: PPUSH
// if not array then
81924: LD_VAR 0 1
81928: NOT
81929: IFFALSE 81933
// exit ;
81931: GO 81947
// result := array [ 1 ] ;
81933: LD_ADDR_VAR 0 2
81937: PUSH
81938: LD_VAR 0 1
81942: PUSH
81943: LD_INT 1
81945: ARRAY
81946: ST_TO_ADDR
// end ;
81947: LD_VAR 0 2
81951: RET
// export function Last ( array ) ; begin
81952: LD_INT 0
81954: PPUSH
// if not array then
81955: LD_VAR 0 1
81959: NOT
81960: IFFALSE 81964
// exit ;
81962: GO 81980
// result := array [ array ] ;
81964: LD_ADDR_VAR 0 2
81968: PUSH
81969: LD_VAR 0 1
81973: PUSH
81974: LD_VAR 0 1
81978: ARRAY
81979: ST_TO_ADDR
// end ;
81980: LD_VAR 0 2
81984: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
81985: LD_INT 0
81987: PPUSH
81988: PPUSH
// result := [ ] ;
81989: LD_ADDR_VAR 0 5
81993: PUSH
81994: EMPTY
81995: ST_TO_ADDR
// if not array then
81996: LD_VAR 0 1
82000: NOT
82001: IFFALSE 82005
// exit ;
82003: GO 82117
// for i := 1 to array do
82005: LD_ADDR_VAR 0 6
82009: PUSH
82010: DOUBLE
82011: LD_INT 1
82013: DEC
82014: ST_TO_ADDR
82015: LD_VAR 0 1
82019: PUSH
82020: FOR_TO
82021: IFFALSE 82115
// if array [ i ] [ index ] = value then
82023: LD_VAR 0 1
82027: PUSH
82028: LD_VAR 0 6
82032: ARRAY
82033: PUSH
82034: LD_VAR 0 2
82038: ARRAY
82039: PUSH
82040: LD_VAR 0 3
82044: EQUAL
82045: IFFALSE 82113
// begin if indexColumn then
82047: LD_VAR 0 4
82051: IFFALSE 82087
// result := Join ( result , array [ i ] [ indexColumn ] ) else
82053: LD_ADDR_VAR 0 5
82057: PUSH
82058: LD_VAR 0 5
82062: PPUSH
82063: LD_VAR 0 1
82067: PUSH
82068: LD_VAR 0 6
82072: ARRAY
82073: PUSH
82074: LD_VAR 0 4
82078: ARRAY
82079: PPUSH
82080: CALL 77455 0 2
82084: ST_TO_ADDR
82085: GO 82113
// result := Join ( result , array [ i ] ) ;
82087: LD_ADDR_VAR 0 5
82091: PUSH
82092: LD_VAR 0 5
82096: PPUSH
82097: LD_VAR 0 1
82101: PUSH
82102: LD_VAR 0 6
82106: ARRAY
82107: PPUSH
82108: CALL 77455 0 2
82112: ST_TO_ADDR
// end ;
82113: GO 82020
82115: POP
82116: POP
// end ;
82117: LD_VAR 0 5
82121: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
82122: LD_INT 0
82124: PPUSH
82125: PPUSH
82126: PPUSH
// if btype = b_depot then
82127: LD_VAR 0 2
82131: PUSH
82132: LD_INT 0
82134: EQUAL
82135: IFFALSE 82147
// begin result := true ;
82137: LD_ADDR_VAR 0 3
82141: PUSH
82142: LD_INT 1
82144: ST_TO_ADDR
// exit ;
82145: GO 82263
// end ; pom := GetBase ( depot ) ;
82147: LD_ADDR_VAR 0 4
82151: PUSH
82152: LD_VAR 0 1
82156: PPUSH
82157: CALL_OW 274
82161: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
82162: LD_ADDR_VAR 0 5
82166: PUSH
82167: LD_VAR 0 2
82171: PPUSH
82172: LD_VAR 0 1
82176: PPUSH
82177: CALL_OW 248
82181: PPUSH
82182: CALL_OW 450
82186: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
82187: LD_ADDR_VAR 0 3
82191: PUSH
82192: LD_VAR 0 4
82196: PPUSH
82197: LD_INT 1
82199: PPUSH
82200: CALL_OW 275
82204: PUSH
82205: LD_VAR 0 5
82209: PUSH
82210: LD_INT 1
82212: ARRAY
82213: GREATEREQUAL
82214: PUSH
82215: LD_VAR 0 4
82219: PPUSH
82220: LD_INT 2
82222: PPUSH
82223: CALL_OW 275
82227: PUSH
82228: LD_VAR 0 5
82232: PUSH
82233: LD_INT 2
82235: ARRAY
82236: GREATEREQUAL
82237: AND
82238: PUSH
82239: LD_VAR 0 4
82243: PPUSH
82244: LD_INT 3
82246: PPUSH
82247: CALL_OW 275
82251: PUSH
82252: LD_VAR 0 5
82256: PUSH
82257: LD_INT 3
82259: ARRAY
82260: GREATEREQUAL
82261: AND
82262: ST_TO_ADDR
// end ;
82263: LD_VAR 0 3
82267: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
82268: LD_INT 0
82270: PPUSH
// if not vehicles or not parkingPoint then
82271: LD_VAR 0 1
82275: NOT
82276: PUSH
82277: LD_VAR 0 2
82281: NOT
82282: OR
82283: IFFALSE 82287
// exit ;
82285: GO 82385
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
82287: LD_ADDR_VAR 0 1
82291: PUSH
82292: LD_VAR 0 1
82296: PPUSH
82297: LD_INT 50
82299: PUSH
82300: EMPTY
82301: LIST
82302: PUSH
82303: LD_INT 3
82305: PUSH
82306: LD_INT 92
82308: PUSH
82309: LD_VAR 0 2
82313: PUSH
82314: LD_INT 1
82316: ARRAY
82317: PUSH
82318: LD_VAR 0 2
82322: PUSH
82323: LD_INT 2
82325: ARRAY
82326: PUSH
82327: LD_INT 8
82329: PUSH
82330: EMPTY
82331: LIST
82332: LIST
82333: LIST
82334: LIST
82335: PUSH
82336: EMPTY
82337: LIST
82338: LIST
82339: PUSH
82340: EMPTY
82341: LIST
82342: LIST
82343: PPUSH
82344: CALL_OW 72
82348: ST_TO_ADDR
// if not vehicles then
82349: LD_VAR 0 1
82353: NOT
82354: IFFALSE 82358
// exit ;
82356: GO 82385
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
82358: LD_VAR 0 1
82362: PPUSH
82363: LD_VAR 0 2
82367: PUSH
82368: LD_INT 1
82370: ARRAY
82371: PPUSH
82372: LD_VAR 0 2
82376: PUSH
82377: LD_INT 2
82379: ARRAY
82380: PPUSH
82381: CALL_OW 111
// end ;
82385: LD_VAR 0 3
82389: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
82390: LD_INT 0
82392: PPUSH
82393: PPUSH
82394: PPUSH
// if not side or not area then
82395: LD_VAR 0 1
82399: NOT
82400: PUSH
82401: LD_VAR 0 2
82405: NOT
82406: OR
82407: IFFALSE 82411
// exit ;
82409: GO 82530
// tmp := AreaToList ( area , 0 ) ;
82411: LD_ADDR_VAR 0 5
82415: PUSH
82416: LD_VAR 0 2
82420: PPUSH
82421: LD_INT 0
82423: PPUSH
82424: CALL_OW 517
82428: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
82429: LD_ADDR_VAR 0 4
82433: PUSH
82434: DOUBLE
82435: LD_INT 1
82437: DEC
82438: ST_TO_ADDR
82439: LD_VAR 0 5
82443: PUSH
82444: LD_INT 1
82446: ARRAY
82447: PUSH
82448: FOR_TO
82449: IFFALSE 82528
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
82451: LD_VAR 0 5
82455: PUSH
82456: LD_INT 1
82458: ARRAY
82459: PUSH
82460: LD_VAR 0 4
82464: ARRAY
82465: PPUSH
82466: LD_VAR 0 5
82470: PUSH
82471: LD_INT 2
82473: ARRAY
82474: PUSH
82475: LD_VAR 0 4
82479: ARRAY
82480: PPUSH
82481: CALL_OW 351
82485: IFFALSE 82526
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
82487: LD_VAR 0 5
82491: PUSH
82492: LD_INT 1
82494: ARRAY
82495: PUSH
82496: LD_VAR 0 4
82500: ARRAY
82501: PPUSH
82502: LD_VAR 0 5
82506: PUSH
82507: LD_INT 2
82509: ARRAY
82510: PUSH
82511: LD_VAR 0 4
82515: ARRAY
82516: PPUSH
82517: LD_VAR 0 1
82521: PPUSH
82522: CALL_OW 244
// end ;
82526: GO 82448
82528: POP
82529: POP
// end ; end_of_file
82530: LD_VAR 0 3
82534: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
82535: LD_VAR 0 1
82539: PUSH
82540: LD_INT 200
82542: DOUBLE
82543: GREATEREQUAL
82544: IFFALSE 82552
82546: LD_INT 299
82548: DOUBLE
82549: LESSEQUAL
82550: IFTRUE 82554
82552: GO 82586
82554: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
82555: LD_VAR 0 1
82559: PPUSH
82560: LD_VAR 0 2
82564: PPUSH
82565: LD_VAR 0 3
82569: PPUSH
82570: LD_VAR 0 4
82574: PPUSH
82575: LD_VAR 0 5
82579: PPUSH
82580: CALL 35246 0 5
82584: GO 82663
82586: LD_INT 300
82588: DOUBLE
82589: GREATEREQUAL
82590: IFFALSE 82598
82592: LD_INT 399
82594: DOUBLE
82595: LESSEQUAL
82596: IFTRUE 82600
82598: GO 82662
82600: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
82601: LD_VAR 0 1
82605: PPUSH
82606: LD_VAR 0 2
82610: PPUSH
82611: LD_VAR 0 3
82615: PPUSH
82616: LD_VAR 0 4
82620: PPUSH
82621: LD_VAR 0 5
82625: PPUSH
82626: LD_VAR 0 6
82630: PPUSH
82631: LD_VAR 0 7
82635: PPUSH
82636: LD_VAR 0 8
82640: PPUSH
82641: LD_VAR 0 9
82645: PPUSH
82646: LD_VAR 0 10
82650: PPUSH
82651: LD_VAR 0 11
82655: PPUSH
82656: CALL 31571 0 11
82660: GO 82663
82662: POP
// end ;
82663: PPOPN 11
82665: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
82666: LD_VAR 0 1
82670: PPUSH
82671: LD_VAR 0 2
82675: PPUSH
82676: LD_VAR 0 3
82680: PPUSH
82681: LD_VAR 0 4
82685: PPUSH
82686: LD_VAR 0 5
82690: PPUSH
82691: CALL 34982 0 5
// end ; end_of_file
82695: PPOPN 5
82697: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
82698: LD_VAR 0 1
82702: PPUSH
82703: LD_VAR 0 2
82707: PPUSH
82708: LD_VAR 0 3
82712: PPUSH
82713: LD_VAR 0 4
82717: PPUSH
82718: LD_VAR 0 5
82722: PPUSH
82723: LD_VAR 0 6
82727: PPUSH
82728: CALL 19223 0 6
// end ;
82732: PPOPN 6
82734: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
82735: LD_INT 0
82737: PPUSH
// begin if not units then
82738: LD_VAR 0 1
82742: NOT
82743: IFFALSE 82747
// exit ;
82745: GO 82747
// end ;
82747: PPOPN 7
82749: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
82750: CALL 19110 0 0
// end ;
82754: PPOPN 1
82756: END
