// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export Powell ; export Davidov ; export Kurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; export westPathUsed , laserCounterDestroy , rocketBuilded ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 92 0 0
// SetBName ( rueastdepot , ryutin ) ;
  19: LD_INT 4
  21: PPUSH
  22: LD_STRING ryutin
  24: PPUSH
  25: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  29: LD_INT 6
  31: PPUSH
  32: LD_STRING yegorov
  34: PPUSH
  35: CALL_OW 500
// CreateNature ;
  39: CALL 14950 0 0
// PrepareDifficulty ;
  43: CALL 12323 0 0
// PrepareVehicles ;
  47: CALL 1780 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
  51: LD_INT 4
  53: PPUSH
  54: LD_INT 0
  56: PPUSH
  57: LD_INT 1
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL 1362 0 4
// PrepareAmericanHeroes ;
  67: CALL 652 0 0
// PrepareRussianCommander ;
  71: CALL 3253 0 0
// PrepareWestBase ;
  75: CALL 3776 0 0
// PrepareEastBase ;
  79: CALL 3332 0 0
// PrepareOtherRussians ;
  83: CALL 3914 0 0
// Action ;
  87: CALL 5557 0 0
// end ;
  91: END
// function Init ; begin
  92: LD_INT 0
  94: PPUSH
// RuScientists := [ ] ;
  95: LD_ADDR_EXP 27
  99: PUSH
 100: EMPTY
 101: ST_TO_ADDR
// sciCounter := 0 ;
 102: LD_ADDR_EXP 28
 106: PUSH
 107: LD_INT 0
 109: ST_TO_ADDR
// ruDestroyedBuildings := [ ] ;
 110: LD_ADDR_EXP 31
 114: PUSH
 115: EMPTY
 116: ST_TO_ADDR
// russianTanks := [ ] ;
 117: LD_ADDR_EXP 32
 121: PUSH
 122: EMPTY
 123: ST_TO_ADDR
// russianTimeLapsers := [ ] ;
 124: LD_ADDR_EXP 33
 128: PUSH
 129: EMPTY
 130: ST_TO_ADDR
// arabianMines := [ ] ;
 131: LD_ADDR_EXP 37
 135: PUSH
 136: EMPTY
 137: ST_TO_ADDR
// kurtStatus := LoadVariable ( 06_KurtStatus_1 , 0 ) ;
 138: LD_ADDR_EXP 19
 142: PUSH
 143: LD_STRING 06_KurtStatus_1
 145: PPUSH
 146: LD_INT 0
 148: PPUSH
 149: CALL_OW 30
 153: ST_TO_ADDR
// secondPass := 0 ;
 154: LD_ADDR_EXP 20
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// teleportExplored := 0 ;
 162: LD_ADDR_EXP 26
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// attackTactic := 0 ;
 170: LD_ADDR_EXP 36
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// tpCounter := 0 ;
 178: LD_ADDR_EXP 22
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// askSiberite := 0 ;
 186: LD_ADDR_EXP 25
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// warWithLegion := 0 ;
 194: LD_ADDR_EXP 23
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// fakeInfo := 0 ;
 202: LD_ADDR_EXP 24
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// cratesSpawned := 0 ;
 210: LD_ADDR_EXP 38
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// ruAI := 0 ;
 218: LD_ADDR_EXP 34
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// ruEscape := 0 ;
 226: LD_ADDR_EXP 35
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// eventVar1 := 0 ;
 234: LD_ADDR_EXP 40
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// mission_prefix := 12_ ;
 242: LD_ADDR_EXP 39
 246: PUSH
 247: LD_STRING 12_
 249: ST_TO_ADDR
// debugMode := 0 ;
 250: LD_ADDR_EXP 41
 254: PUSH
 255: LD_INT 0
 257: ST_TO_ADDR
// westPathUsed := false ;
 258: LD_ADDR_EXP 42
 262: PUSH
 263: LD_INT 0
 265: ST_TO_ADDR
// laserCounterDestroy := 0 ;
 266: LD_ADDR_EXP 43
 270: PUSH
 271: LD_INT 0
 273: ST_TO_ADDR
// rocketBuilded := false ;
 274: LD_ADDR_EXP 44
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// end ;
 282: LD_VAR 0 1
 286: RET
// every 0 0$1 trigger debugMode do var i ;
 287: LD_EXP 41
 291: IFFALSE 597
 293: GO 295
 295: DISABLE
 296: LD_INT 0
 298: PPUSH
// begin enable ;
 299: ENABLE
// FogOff ( true ) ;
 300: LD_INT 1
 302: PPUSH
 303: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 307: LD_ADDR_VAR 0 1
 311: PUSH
 312: LD_INT 22
 314: PUSH
 315: LD_INT 1
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: PUSH
 322: LD_INT 21
 324: PUSH
 325: LD_INT 1
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PPUSH
 336: CALL_OW 69
 340: PUSH
 341: FOR_IN
 342: IFFALSE 358
// SetLives ( i , 1000 ) ;
 344: LD_VAR 0 1
 348: PPUSH
 349: LD_INT 1000
 351: PPUSH
 352: CALL_OW 234
 356: GO 341
 358: POP
 359: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 360: LD_ADDR_VAR 0 1
 364: PUSH
 365: LD_INT 22
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 2
 377: PUSH
 378: LD_INT 30
 380: PUSH
 381: LD_INT 0
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PUSH
 388: LD_INT 30
 390: PUSH
 391: LD_INT 1
 393: PUSH
 394: EMPTY
 395: LIST
 396: LIST
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: LIST
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: PPUSH
 407: CALL_OW 69
 411: PUSH
 412: FOR_IN
 413: IFFALSE 437
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 415: LD_VAR 0 1
 419: PPUSH
 420: CALL_OW 274
 424: PPUSH
 425: LD_INT 1
 427: PPUSH
 428: LD_INT 9999
 430: PPUSH
 431: CALL_OW 277
 435: GO 412
 437: POP
 438: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 439: LD_ADDR_VAR 0 1
 443: PUSH
 444: LD_INT 22
 446: PUSH
 447: LD_INT 1
 449: PUSH
 450: EMPTY
 451: LIST
 452: LIST
 453: PUSH
 454: LD_INT 2
 456: PUSH
 457: LD_INT 30
 459: PUSH
 460: LD_INT 0
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: PUSH
 467: LD_INT 30
 469: PUSH
 470: LD_INT 1
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PPUSH
 486: CALL_OW 69
 490: PUSH
 491: FOR_IN
 492: IFFALSE 516
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 494: LD_VAR 0 1
 498: PPUSH
 499: CALL_OW 274
 503: PPUSH
 504: LD_INT 2
 506: PPUSH
 507: LD_INT 9999
 509: PPUSH
 510: CALL_OW 277
 514: GO 491
 516: POP
 517: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 518: LD_ADDR_VAR 0 1
 522: PUSH
 523: LD_INT 22
 525: PUSH
 526: LD_INT 1
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PUSH
 533: LD_INT 2
 535: PUSH
 536: LD_INT 30
 538: PUSH
 539: LD_INT 0
 541: PUSH
 542: EMPTY
 543: LIST
 544: LIST
 545: PUSH
 546: LD_INT 30
 548: PUSH
 549: LD_INT 1
 551: PUSH
 552: EMPTY
 553: LIST
 554: LIST
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: LIST
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: PPUSH
 565: CALL_OW 69
 569: PUSH
 570: FOR_IN
 571: IFFALSE 595
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 573: LD_VAR 0 1
 577: PPUSH
 578: CALL_OW 274
 582: PPUSH
 583: LD_INT 3
 585: PPUSH
 586: LD_INT 9999
 588: PPUSH
 589: CALL_OW 277
 593: GO 570
 595: POP
 596: POP
// end ;
 597: PPOPN 1
 599: END
// every 0 0$1 trigger FilterUnitsInArea ( westPathArea , [ f_side , 1 ] ) do
 600: LD_INT 24
 602: PPUSH
 603: LD_INT 22
 605: PUSH
 606: LD_INT 1
 608: PUSH
 609: EMPTY
 610: LIST
 611: LIST
 612: PPUSH
 613: CALL_OW 70
 617: IFFALSE 630
 619: GO 621
 621: DISABLE
// westPathUsed := true ;
 622: LD_ADDR_EXP 42
 626: PUSH
 627: LD_INT 1
 629: ST_TO_ADDR
 630: END
// every 0 0$1 trigger laserCounterDestroy >= 3 do
 631: LD_EXP 43
 635: PUSH
 636: LD_INT 3
 638: GREATEREQUAL
 639: IFFALSE 651
 641: GO 643
 643: DISABLE
// SetAchievement ( ACH_LASER ) ; end_of_file
 644: LD_STRING ACH_LASER
 646: PPUSH
 647: CALL_OW 543
 651: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 652: LD_INT 0
 654: PPUSH
 655: PPUSH
 656: PPUSH
// uc_side := 1 ;
 657: LD_ADDR_OWVAR 20
 661: PUSH
 662: LD_INT 1
 664: ST_TO_ADDR
// others11 := CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 665: LD_ADDR_EXP 14
 669: PUSH
 670: LD_STRING 11c_others
 672: PPUSH
 673: CALL_OW 31
 677: PUSH
 678: LD_STRING 11_others
 680: PPUSH
 681: CALL_OW 31
 685: UNION
 686: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true , 11_ ) ;
 687: LD_ADDR_EXP 1
 691: PUSH
 692: LD_STRING JMM
 694: PPUSH
 695: LD_INT 1
 697: PPUSH
 698: LD_STRING 11_
 700: PPUSH
 701: CALL 38196 0 3
 705: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 706: LD_EXP 1
 710: PPUSH
 711: LD_INT 1
 713: PPUSH
 714: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 718: LD_EXP 1
 722: PPUSH
 723: LD_INT 22
 725: PUSH
 726: LD_INT 1
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: PUSH
 733: LD_INT 21
 735: PUSH
 736: LD_INT 2
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: PUSH
 743: LD_INT 58
 745: PUSH
 746: EMPTY
 747: LIST
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: LIST
 753: PPUSH
 754: CALL_OW 69
 758: PUSH
 759: LD_INT 1
 761: ARRAY
 762: PPUSH
 763: CALL_OW 52
// if TestCharacters ( 11_Lisa ) then
 767: LD_STRING 11_Lisa
 769: PPUSH
 770: CALL_OW 28
 774: IFFALSE 824
// begin Lisa := PrepareUnit ( Lisa , true , 11_ ) ;
 776: LD_ADDR_EXP 2
 780: PUSH
 781: LD_STRING Lisa
 783: PPUSH
 784: LD_INT 1
 786: PPUSH
 787: LD_STRING 11_
 789: PPUSH
 790: CALL 38196 0 3
 794: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 795: LD_EXP 2
 799: PPUSH
 800: LD_INT 1
 802: PPUSH
 803: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 807: LD_EXP 2
 811: PPUSH
 812: LD_INT 4
 814: PPUSH
 815: LD_INT 0
 817: PPUSH
 818: CALL_OW 49
// end else
 822: GO 840
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 824: LD_INT 4
 826: PPUSH
 827: LD_INT 0
 829: PPUSH
 830: LD_INT 1
 832: PPUSH
 833: LD_INT 0
 835: PPUSH
 836: CALL 1362 0 4
// if TestCharacters ( 11_Donaldson ) then
 840: LD_STRING 11_Donaldson
 842: PPUSH
 843: CALL_OW 28
 847: IFFALSE 897
// begin Donaldson := PrepareUnit ( Donaldson , true , 11_ ) ;
 849: LD_ADDR_EXP 3
 853: PUSH
 854: LD_STRING Donaldson
 856: PPUSH
 857: LD_INT 1
 859: PPUSH
 860: LD_STRING 11_
 862: PPUSH
 863: CALL 38196 0 3
 867: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 868: LD_EXP 3
 872: PPUSH
 873: LD_INT 1
 875: PPUSH
 876: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 880: LD_EXP 3
 884: PPUSH
 885: LD_INT 4
 887: PPUSH
 888: LD_INT 0
 890: PPUSH
 891: CALL_OW 49
// end else
 895: GO 913
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 897: LD_INT 4
 899: PPUSH
 900: LD_INT 0
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: LD_INT 0
 908: PPUSH
 909: CALL 1362 0 4
// if TestCharacters ( 11_Cyrus ) then
 913: LD_STRING 11_Cyrus
 915: PPUSH
 916: CALL_OW 28
 920: IFFALSE 970
// begin Cyrus := PrepareUnit ( Cyrus , true , 11_ ) ;
 922: LD_ADDR_EXP 5
 926: PUSH
 927: LD_STRING Cyrus
 929: PPUSH
 930: LD_INT 1
 932: PPUSH
 933: LD_STRING 11_
 935: PPUSH
 936: CALL 38196 0 3
 940: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 941: LD_EXP 5
 945: PPUSH
 946: LD_INT 1
 948: PPUSH
 949: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 953: LD_EXP 5
 957: PPUSH
 958: LD_INT 4
 960: PPUSH
 961: LD_INT 0
 963: PPUSH
 964: CALL_OW 49
// end else
 968: GO 986
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 970: LD_INT 4
 972: PPUSH
 973: LD_INT 0
 975: PPUSH
 976: LD_INT 1
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL 1362 0 4
// if TestCharacters ( 11_Denis ) then
 986: LD_STRING 11_Denis
 988: PPUSH
 989: CALL_OW 28
 993: IFFALSE 1043
// begin Denis := PrepareUnit ( Denis , true , 11_ ) ;
 995: LD_ADDR_EXP 6
 999: PUSH
1000: LD_STRING Denis
1002: PPUSH
1003: LD_INT 1
1005: PPUSH
1006: LD_STRING 11_
1008: PPUSH
1009: CALL 38196 0 3
1013: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1014: LD_EXP 6
1018: PPUSH
1019: LD_INT 4
1021: PPUSH
1022: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1026: LD_EXP 6
1030: PPUSH
1031: LD_INT 4
1033: PPUSH
1034: LD_INT 0
1036: PPUSH
1037: CALL_OW 49
// end else
1041: GO 1059
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1043: LD_INT 4
1045: PPUSH
1046: LD_INT 0
1048: PPUSH
1049: LD_INT 1
1051: PPUSH
1052: LD_INT 0
1054: PPUSH
1055: CALL 1362 0 4
// if TestCharacters ( 11_Frank ) then
1059: LD_STRING 11_Frank
1061: PPUSH
1062: CALL_OW 28
1066: IFFALSE 1116
// begin Frank := PrepareUnit ( Frank , true , 11_ ) ;
1068: LD_ADDR_EXP 12
1072: PUSH
1073: LD_STRING Frank
1075: PPUSH
1076: LD_INT 1
1078: PPUSH
1079: LD_STRING 11_
1081: PPUSH
1082: CALL 38196 0 3
1086: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1087: LD_EXP 12
1091: PPUSH
1092: LD_INT 1
1094: PPUSH
1095: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1099: LD_EXP 12
1103: PPUSH
1104: LD_INT 4
1106: PPUSH
1107: LD_INT 0
1109: PPUSH
1110: CALL_OW 49
// end else
1114: GO 1132
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1116: LD_INT 4
1118: PPUSH
1119: LD_INT 0
1121: PPUSH
1122: LD_INT 1
1124: PPUSH
1125: LD_INT 0
1127: PPUSH
1128: CALL 1362 0 4
// if TestCharacters ( 11_Cornell ) then
1132: LD_STRING 11_Cornell
1134: PPUSH
1135: CALL_OW 28
1139: IFFALSE 1189
// begin Cornel := PrepareUnit ( Cornell , true , 11_ ) ;
1141: LD_ADDR_EXP 10
1145: PUSH
1146: LD_STRING Cornell
1148: PPUSH
1149: LD_INT 1
1151: PPUSH
1152: LD_STRING 11_
1154: PPUSH
1155: CALL 38196 0 3
1159: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1160: LD_EXP 10
1164: PPUSH
1165: LD_INT 1
1167: PPUSH
1168: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1172: LD_EXP 10
1176: PPUSH
1177: LD_INT 4
1179: PPUSH
1180: LD_INT 0
1182: PPUSH
1183: CALL_OW 49
// end else
1187: GO 1205
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1189: LD_INT 4
1191: PPUSH
1192: LD_INT 0
1194: PPUSH
1195: LD_INT 1
1197: PPUSH
1198: LD_INT 0
1200: PPUSH
1201: CALL 1362 0 4
// tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1205: LD_ADDR_VAR 0 2
1209: PUSH
1210: LD_EXP 14
1214: PPUSH
1215: LD_INT 26
1217: PUSH
1218: LD_INT 1
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: PPUSH
1225: CALL_OW 72
1229: ST_TO_ADDR
// if not tmp then
1230: LD_VAR 0 2
1234: NOT
1235: IFFALSE 1264
// begin PrepareSoldier ( sex_male , 8 ) ;
1237: LD_INT 1
1239: PPUSH
1240: LD_INT 8
1242: PPUSH
1243: CALL_OW 381
// PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1247: CALL_OW 44
1251: PPUSH
1252: LD_INT 4
1254: PPUSH
1255: LD_INT 0
1257: PPUSH
1258: CALL_OW 49
// end else
1262: GO 1338
// begin if GetClass ( tmp [ 1 ] ) <> class_soldier then
1264: LD_VAR 0 2
1268: PUSH
1269: LD_INT 1
1271: ARRAY
1272: PPUSH
1273: CALL_OW 257
1277: PUSH
1278: LD_INT 1
1280: NONEQUAL
1281: IFFALSE 1299
// SetClass ( tmp [ 1 ] , class_soldier ) ;
1283: LD_VAR 0 2
1287: PUSH
1288: LD_INT 1
1290: ARRAY
1291: PPUSH
1292: LD_INT 1
1294: PPUSH
1295: CALL_OW 336
// PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1299: LD_VAR 0 2
1303: PUSH
1304: LD_INT 1
1306: ARRAY
1307: PPUSH
1308: LD_INT 4
1310: PPUSH
1311: LD_INT 0
1313: PPUSH
1314: CALL_OW 49
// others11 := others11 diff tmp [ 1 ] ;
1318: LD_ADDR_EXP 14
1322: PUSH
1323: LD_EXP 14
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_INT 1
1335: ARRAY
1336: DIFF
1337: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ,  ) ;
1338: LD_ADDR_EXP 15
1342: PUSH
1343: LD_STRING Powell
1345: PPUSH
1346: LD_INT 0
1348: PPUSH
1349: LD_STRING 
1351: PPUSH
1352: CALL 38196 0 3
1356: ST_TO_ADDR
// end ;
1357: LD_VAR 0 1
1361: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1362: LD_INT 0
1364: PPUSH
1365: PPUSH
1366: PPUSH
1367: PPUSH
1368: PPUSH
// if mech = 1 then
1369: LD_VAR 0 4
1373: PUSH
1374: LD_INT 1
1376: EQUAL
1377: IFFALSE 1610
// begin if others11 then
1379: LD_EXP 14
1383: IFFALSE 1550
// begin for i := 1 to others11 - 1 do
1385: LD_ADDR_VAR 0 6
1389: PUSH
1390: DOUBLE
1391: LD_INT 1
1393: DEC
1394: ST_TO_ADDR
1395: LD_EXP 14
1399: PUSH
1400: LD_INT 1
1402: MINUS
1403: PUSH
1404: FOR_TO
1405: IFFALSE 1487
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1407: LD_EXP 14
1411: PUSH
1412: LD_VAR 0 6
1416: ARRAY
1417: PPUSH
1418: LD_INT 3
1420: PPUSH
1421: CALL_OW 259
1425: PUSH
1426: LD_EXP 14
1430: PUSH
1431: LD_VAR 0 6
1435: PUSH
1436: LD_INT 1
1438: PLUS
1439: ARRAY
1440: PPUSH
1441: LD_INT 3
1443: PPUSH
1444: CALL_OW 259
1448: LESS
1449: IFFALSE 1485
// begin mecha = others11 [ i + 1 ] ;
1451: LD_ADDR_VAR 0 9
1455: PUSH
1456: LD_EXP 14
1460: PUSH
1461: LD_VAR 0 6
1465: PUSH
1466: LD_INT 1
1468: PLUS
1469: ARRAY
1470: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1471: LD_VAR 0 9
1475: PPUSH
1476: LD_INT 3
1478: PPUSH
1479: CALL_OW 336
// break ;
1483: GO 1487
// end ; end ;
1485: GO 1404
1487: POP
1488: POP
// if spawnMode = 1 then
1489: LD_VAR 0 3
1493: PUSH
1494: LD_INT 1
1496: EQUAL
1497: IFFALSE 1518
// PlaceUnitArea ( mecha , area , false ) else
1499: LD_VAR 0 9
1503: PPUSH
1504: LD_VAR 0 1
1508: PPUSH
1509: LD_INT 0
1511: PPUSH
1512: CALL_OW 49
1516: GO 1532
// PlaceHumanInUnit ( mecha , veh ) ;
1518: LD_VAR 0 9
1522: PPUSH
1523: LD_VAR 0 2
1527: PPUSH
1528: CALL_OW 52
// others11 := others11 diff mecha ;
1532: LD_ADDR_EXP 14
1536: PUSH
1537: LD_EXP 14
1541: PUSH
1542: LD_VAR 0 9
1546: DIFF
1547: ST_TO_ADDR
// end else
1548: GO 1608
// begin hc_name :=  ;
1550: LD_ADDR_OWVAR 26
1554: PUSH
1555: LD_STRING 
1557: ST_TO_ADDR
// hc_gallery :=  ;
1558: LD_ADDR_OWVAR 33
1562: PUSH
1563: LD_STRING 
1565: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1566: LD_INT 0
1568: PPUSH
1569: LD_INT 7
1571: PPUSH
1572: LD_INT 9
1574: PPUSH
1575: CALL_OW 12
1579: PPUSH
1580: CALL_OW 383
// un := CreateHuman ;
1584: LD_ADDR_VAR 0 7
1588: PUSH
1589: CALL_OW 44
1593: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1594: LD_VAR 0 7
1598: PPUSH
1599: LD_VAR 0 2
1603: PPUSH
1604: CALL_OW 52
// end ; end else
1608: GO 1775
// begin if others11 then
1610: LD_EXP 14
1614: IFFALSE 1687
// begin if spawnMode = 1 then
1616: LD_VAR 0 3
1620: PUSH
1621: LD_INT 1
1623: EQUAL
1624: IFFALSE 1649
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1626: LD_EXP 14
1630: PUSH
1631: LD_INT 1
1633: ARRAY
1634: PPUSH
1635: LD_VAR 0 1
1639: PPUSH
1640: LD_INT 0
1642: PPUSH
1643: CALL_OW 49
1647: GO 1667
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1649: LD_EXP 14
1653: PUSH
1654: LD_INT 1
1656: ARRAY
1657: PPUSH
1658: LD_VAR 0 2
1662: PPUSH
1663: CALL_OW 52
// others11 := Delete ( others11 , 1 ) ;
1667: LD_ADDR_EXP 14
1671: PUSH
1672: LD_EXP 14
1676: PPUSH
1677: LD_INT 1
1679: PPUSH
1680: CALL_OW 3
1684: ST_TO_ADDR
// end else
1685: GO 1775
// begin hc_name :=  ;
1687: LD_ADDR_OWVAR 26
1691: PUSH
1692: LD_STRING 
1694: ST_TO_ADDR
// hc_gallery :=  ;
1695: LD_ADDR_OWVAR 33
1699: PUSH
1700: LD_STRING 
1702: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1703: LD_INT 0
1705: PPUSH
1706: LD_INT 1
1708: PUSH
1709: LD_INT 2
1711: PUSH
1712: LD_INT 3
1714: PUSH
1715: LD_INT 4
1717: PUSH
1718: EMPTY
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: PUSH
1724: LD_INT 1
1726: PPUSH
1727: LD_INT 4
1729: PPUSH
1730: CALL_OW 12
1734: ARRAY
1735: PPUSH
1736: LD_INT 7
1738: PPUSH
1739: LD_INT 9
1741: PPUSH
1742: CALL_OW 12
1746: PPUSH
1747: CALL_OW 380
// un := CreateHuman ;
1751: LD_ADDR_VAR 0 7
1755: PUSH
1756: CALL_OW 44
1760: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1761: LD_VAR 0 7
1765: PPUSH
1766: LD_VAR 0 2
1770: PPUSH
1771: CALL_OW 52
// end ; end ; end ;
1775: LD_VAR 0 5
1779: RET
// export function PrepareVehicles ; var veh ; begin
1780: LD_INT 0
1782: PPUSH
1783: PPUSH
// uc_side := 1 ;
1784: LD_ADDR_OWVAR 20
1788: PUSH
1789: LD_INT 1
1791: ST_TO_ADDR
// uc_nation := 1 ;
1792: LD_ADDR_OWVAR 21
1796: PUSH
1797: LD_INT 1
1799: ST_TO_ADDR
// vc_chassis := us_medium_tracked ;
1800: LD_ADDR_OWVAR 37
1804: PUSH
1805: LD_INT 3
1807: ST_TO_ADDR
// vc_engine := engine_siberite ;
1808: LD_ADDR_OWVAR 39
1812: PUSH
1813: LD_INT 3
1815: ST_TO_ADDR
// vc_control := control_computer ;
1816: LD_ADDR_OWVAR 38
1820: PUSH
1821: LD_INT 3
1823: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1824: LD_ADDR_OWVAR 40
1828: PUSH
1829: LD_INT 4
1831: ST_TO_ADDR
// veh := CreateVehicle ;
1832: LD_ADDR_VAR 0 2
1836: PUSH
1837: CALL_OW 45
1841: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1842: LD_VAR 0 2
1846: PPUSH
1847: LD_INT 4
1849: PPUSH
1850: LD_INT 0
1852: PPUSH
1853: CALL_OW 49
// vc_weapon := us_double_gun ;
1857: LD_ADDR_OWVAR 40
1861: PUSH
1862: LD_INT 5
1864: ST_TO_ADDR
// vc_control := control_manual ;
1865: LD_ADDR_OWVAR 38
1869: PUSH
1870: LD_INT 1
1872: ST_TO_ADDR
// veh := CreateVehicle ;
1873: LD_ADDR_VAR 0 2
1877: PUSH
1878: CALL_OW 45
1882: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1883: LD_VAR 0 2
1887: PPUSH
1888: LD_INT 4
1890: PPUSH
1891: LD_INT 0
1893: PPUSH
1894: CALL_OW 49
// vc_weapon := us_light_gun ;
1898: LD_ADDR_OWVAR 40
1902: PUSH
1903: LD_INT 3
1905: ST_TO_ADDR
// vc_control := control_computer ;
1906: LD_ADDR_OWVAR 38
1910: PUSH
1911: LD_INT 3
1913: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1914: LD_ADDR_OWVAR 37
1918: PUSH
1919: LD_INT 2
1921: ST_TO_ADDR
// veh := CreateVehicle ;
1922: LD_ADDR_VAR 0 2
1926: PUSH
1927: CALL_OW 45
1931: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1932: LD_VAR 0 2
1936: PPUSH
1937: LD_INT 4
1939: PPUSH
1940: LD_INT 0
1942: PPUSH
1943: CALL_OW 49
// vc_weapon := us_gatling_gun ;
1947: LD_ADDR_OWVAR 40
1951: PUSH
1952: LD_INT 4
1954: ST_TO_ADDR
// veh := CreateVehicle ;
1955: LD_ADDR_VAR 0 2
1959: PUSH
1960: CALL_OW 45
1964: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1965: LD_VAR 0 2
1969: PPUSH
1970: LD_INT 4
1972: PPUSH
1973: LD_INT 0
1975: PPUSH
1976: CALL_OW 49
// end ;
1980: LD_VAR 0 1
1984: RET
// export function PowellSupport1 ; var veh , un ; begin
1985: LD_INT 0
1987: PPUSH
1988: PPUSH
1989: PPUSH
// uc_side := 1 ;
1990: LD_ADDR_OWVAR 20
1994: PUSH
1995: LD_INT 1
1997: ST_TO_ADDR
// uc_nation := 1 ;
1998: LD_ADDR_OWVAR 21
2002: PUSH
2003: LD_INT 1
2005: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) then
2006: LD_STRING 11_Brown
2008: PPUSH
2009: CALL_OW 28
2013: IFFALSE 2063
// begin Brown := PrepareUnit ( Brown , true , 11_ ) ;
2015: LD_ADDR_EXP 7
2019: PUSH
2020: LD_STRING Brown
2022: PPUSH
2023: LD_INT 1
2025: PPUSH
2026: LD_STRING 11_
2028: PPUSH
2029: CALL 38196 0 3
2033: ST_TO_ADDR
// SetClass ( Brown , class_engineer ) ;
2034: LD_EXP 7
2038: PPUSH
2039: LD_INT 2
2041: PPUSH
2042: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
2046: LD_EXP 7
2050: PPUSH
2051: LD_INT 4
2053: PPUSH
2054: LD_INT 0
2056: PPUSH
2057: CALL_OW 49
// end else
2061: GO 2079
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2063: LD_INT 4
2065: PPUSH
2066: LD_INT 0
2068: PPUSH
2069: LD_INT 1
2071: PPUSH
2072: LD_INT 0
2074: PPUSH
2075: CALL 1362 0 4
// if TestCharacters ( 11_Gary ) then
2079: LD_STRING 11_Gary
2081: PPUSH
2082: CALL_OW 28
2086: IFFALSE 2136
// begin Gary := PrepareUnit ( Gary , true , 11_ ) ;
2088: LD_ADDR_EXP 11
2092: PUSH
2093: LD_STRING Gary
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: LD_STRING 11_
2101: PPUSH
2102: CALL 38196 0 3
2106: ST_TO_ADDR
// SetClass ( Gary , class_engineer ) ;
2107: LD_EXP 11
2111: PPUSH
2112: LD_INT 2
2114: PPUSH
2115: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2119: LD_EXP 11
2123: PPUSH
2124: LD_INT 4
2126: PPUSH
2127: LD_INT 0
2129: PPUSH
2130: CALL_OW 49
// end else
2134: GO 2152
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2136: LD_INT 4
2138: PPUSH
2139: LD_INT 0
2141: PPUSH
2142: LD_INT 1
2144: PPUSH
2145: LD_INT 0
2147: PPUSH
2148: CALL 1362 0 4
// vc_chassis := us_medium_tracked ;
2152: LD_ADDR_OWVAR 37
2156: PUSH
2157: LD_INT 3
2159: ST_TO_ADDR
// vc_engine := engine_siberite ;
2160: LD_ADDR_OWVAR 39
2164: PUSH
2165: LD_INT 3
2167: ST_TO_ADDR
// vc_control := control_manual ;
2168: LD_ADDR_OWVAR 38
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// vc_weapon := us_crane ;
2176: LD_ADDR_OWVAR 40
2180: PUSH
2181: LD_INT 13
2183: ST_TO_ADDR
// veh := CreateVehicle ;
2184: LD_ADDR_VAR 0 2
2188: PUSH
2189: CALL_OW 45
2193: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2194: LD_VAR 0 2
2198: PPUSH
2199: LD_INT 4
2201: PPUSH
2202: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2206: LD_VAR 0 2
2210: PPUSH
2211: LD_INT 4
2213: PPUSH
2214: LD_INT 0
2216: PPUSH
2217: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2221: LD_INT 4
2223: PPUSH
2224: LD_VAR 0 2
2228: PPUSH
2229: LD_INT 2
2231: PPUSH
2232: LD_INT 1
2234: PPUSH
2235: CALL 1362 0 4
// vc_weapon := us_laser ;
2239: LD_ADDR_OWVAR 40
2243: PUSH
2244: LD_INT 9
2246: ST_TO_ADDR
// veh := CreateVehicle ;
2247: LD_ADDR_VAR 0 2
2251: PUSH
2252: CALL_OW 45
2256: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2257: LD_VAR 0 2
2261: PPUSH
2262: LD_INT 4
2264: PPUSH
2265: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2269: LD_VAR 0 2
2273: PPUSH
2274: LD_INT 4
2276: PPUSH
2277: LD_INT 0
2279: PPUSH
2280: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2284: LD_INT 4
2286: PPUSH
2287: LD_VAR 0 2
2291: PPUSH
2292: LD_INT 2
2294: PPUSH
2295: LD_INT 1
2297: PPUSH
2298: CALL 1362 0 4
// vc_control := control_computer ;
2302: LD_ADDR_OWVAR 38
2306: PUSH
2307: LD_INT 3
2309: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2310: LD_ADDR_OWVAR 40
2314: PUSH
2315: LD_INT 12
2317: ST_TO_ADDR
// veh := CreateVehicle ;
2318: LD_ADDR_VAR 0 2
2322: PUSH
2323: CALL_OW 45
2327: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2328: LD_VAR 0 2
2332: PPUSH
2333: LD_INT 17
2335: PPUSH
2336: CALL_OW 109
// SetDir ( veh , 4 ) ;
2340: LD_VAR 0 2
2344: PPUSH
2345: LD_INT 4
2347: PPUSH
2348: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2352: LD_VAR 0 2
2356: PPUSH
2357: LD_INT 4
2359: PPUSH
2360: LD_INT 0
2362: PPUSH
2363: CALL_OW 49
// AddCargo ( veh , mat_siberit , 100 ) ;
2367: LD_VAR 0 2
2371: PPUSH
2372: LD_INT 3
2374: PPUSH
2375: LD_INT 100
2377: PPUSH
2378: CALL_OW 291
// veh := CreateVehicle ;
2382: LD_ADDR_VAR 0 2
2386: PUSH
2387: CALL_OW 45
2391: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2392: LD_VAR 0 2
2396: PPUSH
2397: LD_INT 17
2399: PPUSH
2400: CALL_OW 109
// SetDir ( veh , 4 ) ;
2404: LD_VAR 0 2
2408: PPUSH
2409: LD_INT 4
2411: PPUSH
2412: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2416: LD_VAR 0 2
2420: PPUSH
2421: LD_INT 4
2423: PPUSH
2424: LD_INT 0
2426: PPUSH
2427: CALL_OW 49
// AddCargo ( veh , mat_siberit , 20 ) ;
2431: LD_VAR 0 2
2435: PPUSH
2436: LD_INT 3
2438: PPUSH
2439: LD_INT 20
2441: PPUSH
2442: CALL_OW 291
// AddCargo ( veh , mat_cans , 80 ) ;
2446: LD_VAR 0 2
2450: PPUSH
2451: LD_INT 1
2453: PPUSH
2454: LD_INT 80
2456: PPUSH
2457: CALL_OW 291
// end ;
2461: LD_VAR 0 1
2465: RET
// export function PowellSupport2 ; var veh , un ; begin
2466: LD_INT 0
2468: PPUSH
2469: PPUSH
2470: PPUSH
// uc_side := 1 ;
2471: LD_ADDR_OWVAR 20
2475: PUSH
2476: LD_INT 1
2478: ST_TO_ADDR
// uc_nation := 1 ;
2479: LD_ADDR_OWVAR 21
2483: PUSH
2484: LD_INT 1
2486: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2487: LD_ADDR_OWVAR 37
2491: PUSH
2492: LD_INT 2
2494: ST_TO_ADDR
// vc_engine := engine_siberite ;
2495: LD_ADDR_OWVAR 39
2499: PUSH
2500: LD_INT 3
2502: ST_TO_ADDR
// vc_control := control_computer ;
2503: LD_ADDR_OWVAR 38
2507: PUSH
2508: LD_INT 3
2510: ST_TO_ADDR
// vc_weapon := us_light_gun ;
2511: LD_ADDR_OWVAR 40
2515: PUSH
2516: LD_INT 3
2518: ST_TO_ADDR
// veh := CreateVehicle ;
2519: LD_ADDR_VAR 0 2
2523: PUSH
2524: CALL_OW 45
2528: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2529: LD_VAR 0 2
2533: PPUSH
2534: LD_INT 4
2536: PPUSH
2537: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2541: LD_VAR 0 2
2545: PPUSH
2546: LD_INT 4
2548: PPUSH
2549: LD_INT 0
2551: PPUSH
2552: CALL_OW 49
// vc_control := control_manual ;
2556: LD_ADDR_OWVAR 38
2560: PUSH
2561: LD_INT 1
2563: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2564: LD_ADDR_OWVAR 37
2568: PUSH
2569: LD_INT 2
2571: ST_TO_ADDR
// vc_weapon := us_double_gun ;
2572: LD_ADDR_OWVAR 40
2576: PUSH
2577: LD_INT 5
2579: ST_TO_ADDR
// veh := CreateVehicle ;
2580: LD_ADDR_VAR 0 2
2584: PUSH
2585: CALL_OW 45
2589: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2590: LD_VAR 0 2
2594: PPUSH
2595: LD_INT 4
2597: PPUSH
2598: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2602: LD_VAR 0 2
2606: PPUSH
2607: LD_INT 4
2609: PPUSH
2610: LD_INT 0
2612: PPUSH
2613: CALL_OW 49
// if TestCharacters ( 11_Bobby ) then
2617: LD_STRING 11_Bobby
2619: PPUSH
2620: CALL_OW 28
2624: IFFALSE 2673
// begin Bobby := PrepareUnit ( Bobby , true , 11_ ) ;
2626: LD_ADDR_EXP 4
2630: PUSH
2631: LD_STRING Bobby
2633: PPUSH
2634: LD_INT 1
2636: PPUSH
2637: LD_STRING 11_
2639: PPUSH
2640: CALL 38196 0 3
2644: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2645: LD_EXP 4
2649: PPUSH
2650: LD_INT 3
2652: PPUSH
2653: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2657: LD_EXP 4
2661: PPUSH
2662: LD_VAR 0 2
2666: PPUSH
2667: CALL_OW 52
// end else
2671: GO 2691
// PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2673: LD_INT 0
2675: PPUSH
2676: LD_VAR 0 2
2680: PPUSH
2681: LD_INT 2
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: CALL 1362 0 4
// if TestCharacters ( 11_Houten ) then
2691: LD_STRING 11_Houten
2693: PPUSH
2694: CALL_OW 28
2698: IFFALSE 2748
// begin Houten := PrepareUnit ( Houten , true , 11_ ) ;
2700: LD_ADDR_EXP 9
2704: PUSH
2705: LD_STRING Houten
2707: PPUSH
2708: LD_INT 1
2710: PPUSH
2711: LD_STRING 11_
2713: PPUSH
2714: CALL 38196 0 3
2718: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2719: LD_EXP 9
2723: PPUSH
2724: LD_INT 1
2726: PPUSH
2727: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2731: LD_EXP 9
2735: PPUSH
2736: LD_INT 4
2738: PPUSH
2739: LD_INT 0
2741: PPUSH
2742: CALL_OW 49
// end else
2746: GO 2764
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2748: LD_INT 4
2750: PPUSH
2751: LD_INT 0
2753: PPUSH
2754: LD_INT 1
2756: PPUSH
2757: LD_INT 0
2759: PPUSH
2760: CALL 1362 0 4
// vc_control := control_computer ;
2764: LD_ADDR_OWVAR 38
2768: PUSH
2769: LD_INT 3
2771: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2772: LD_ADDR_OWVAR 40
2776: PUSH
2777: LD_INT 12
2779: ST_TO_ADDR
// veh := CreateVehicle ;
2780: LD_ADDR_VAR 0 2
2784: PUSH
2785: CALL_OW 45
2789: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2790: LD_VAR 0 2
2794: PPUSH
2795: LD_INT 4
2797: PPUSH
2798: CALL_OW 233
// SetTag ( veh , 17 ) ;
2802: LD_VAR 0 2
2806: PPUSH
2807: LD_INT 17
2809: PPUSH
2810: CALL_OW 109
// AddCargo ( veh , mat_cans , 100 ) ;
2814: LD_VAR 0 2
2818: PPUSH
2819: LD_INT 1
2821: PPUSH
2822: LD_INT 100
2824: PPUSH
2825: CALL_OW 291
// veh := CreateVehicle ;
2829: LD_ADDR_VAR 0 2
2833: PUSH
2834: CALL_OW 45
2838: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2839: LD_VAR 0 2
2843: PPUSH
2844: LD_INT 4
2846: PPUSH
2847: CALL_OW 233
// SetTag ( veh , 17 ) ;
2851: LD_VAR 0 2
2855: PPUSH
2856: LD_INT 17
2858: PPUSH
2859: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2863: LD_VAR 0 2
2867: PPUSH
2868: LD_INT 4
2870: PPUSH
2871: LD_INT 0
2873: PPUSH
2874: CALL_OW 49
// AddCargo ( veh , mat_cans , 100 ) ;
2878: LD_VAR 0 2
2882: PPUSH
2883: LD_INT 1
2885: PPUSH
2886: LD_INT 100
2888: PPUSH
2889: CALL_OW 291
// veh := CreateVehicle ;
2893: LD_ADDR_VAR 0 2
2897: PUSH
2898: CALL_OW 45
2902: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2903: LD_VAR 0 2
2907: PPUSH
2908: LD_INT 4
2910: PPUSH
2911: CALL_OW 233
// SetTag ( veh , 17 ) ;
2915: LD_VAR 0 2
2919: PPUSH
2920: LD_INT 17
2922: PPUSH
2923: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2927: LD_VAR 0 2
2931: PPUSH
2932: LD_INT 4
2934: PPUSH
2935: LD_INT 0
2937: PPUSH
2938: CALL_OW 49
// if kurtStatus then
2942: LD_EXP 19
2946: IFFALSE 2980
// begin AddCargo ( veh , mat_siberit , 60 ) ;
2948: LD_VAR 0 2
2952: PPUSH
2953: LD_INT 3
2955: PPUSH
2956: LD_INT 60
2958: PPUSH
2959: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
2963: LD_VAR 0 2
2967: PPUSH
2968: LD_INT 1
2970: PPUSH
2971: LD_INT 40
2973: PPUSH
2974: CALL_OW 291
// end else
2978: GO 2995
// AddCargo ( veh , mat_cans , 100 ) ;
2980: LD_VAR 0 2
2984: PPUSH
2985: LD_INT 1
2987: PPUSH
2988: LD_INT 100
2990: PPUSH
2991: CALL_OW 291
// veh := CreateVehicle ;
2995: LD_ADDR_VAR 0 2
2999: PUSH
3000: CALL_OW 45
3004: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3005: LD_VAR 0 2
3009: PPUSH
3010: LD_INT 4
3012: PPUSH
3013: CALL_OW 233
// SetTag ( veh , 17 ) ;
3017: LD_VAR 0 2
3021: PPUSH
3022: LD_INT 17
3024: PPUSH
3025: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
3029: LD_VAR 0 2
3033: PPUSH
3034: LD_INT 4
3036: PPUSH
3037: LD_INT 0
3039: PPUSH
3040: CALL_OW 49
// AddCargo ( veh , mat_oil , 60 ) ;
3044: LD_VAR 0 2
3048: PPUSH
3049: LD_INT 2
3051: PPUSH
3052: LD_INT 60
3054: PPUSH
3055: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
3059: LD_VAR 0 2
3063: PPUSH
3064: LD_INT 1
3066: PPUSH
3067: LD_INT 40
3069: PPUSH
3070: CALL_OW 291
// end ;
3074: LD_VAR 0 1
3078: RET
// export function PowellSupport3 ; var i , cargo ; begin
3079: LD_INT 0
3081: PPUSH
3082: PPUSH
3083: PPUSH
// uc_side := 1 ;
3084: LD_ADDR_OWVAR 20
3088: PUSH
3089: LD_INT 1
3091: ST_TO_ADDR
// uc_nation := 1 ;
3092: LD_ADDR_OWVAR 21
3096: PUSH
3097: LD_INT 1
3099: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3100: LD_INT 4
3102: PPUSH
3103: LD_INT 0
3105: PPUSH
3106: LD_INT 1
3108: PPUSH
3109: LD_INT 0
3111: PPUSH
3112: CALL 1362 0 4
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3116: LD_INT 4
3118: PPUSH
3119: LD_INT 0
3121: PPUSH
3122: LD_INT 1
3124: PPUSH
3125: LD_INT 0
3127: PPUSH
3128: CALL 1362 0 4
// for i := 1 to 2 do
3132: LD_ADDR_VAR 0 2
3136: PUSH
3137: DOUBLE
3138: LD_INT 1
3140: DEC
3141: ST_TO_ADDR
3142: LD_INT 2
3144: PUSH
3145: FOR_TO
3146: IFFALSE 3246
// begin vc_chassis := us_medium_wheeled ;
3148: LD_ADDR_OWVAR 37
3152: PUSH
3153: LD_INT 2
3155: ST_TO_ADDR
// vc_engine := engine_siberite ;
3156: LD_ADDR_OWVAR 39
3160: PUSH
3161: LD_INT 3
3163: ST_TO_ADDR
// vc_control = control_computer ;
3164: LD_ADDR_OWVAR 38
3168: PUSH
3169: LD_INT 3
3171: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
3172: LD_ADDR_OWVAR 40
3176: PUSH
3177: LD_INT 12
3179: ST_TO_ADDR
// cargo := CreateVehicle ;
3180: LD_ADDR_VAR 0 3
3184: PUSH
3185: CALL_OW 45
3189: ST_TO_ADDR
// SetDir ( cargo , 4 ) ;
3190: LD_VAR 0 3
3194: PPUSH
3195: LD_INT 4
3197: PPUSH
3198: CALL_OW 233
// SetTag ( cargo , 17 ) ;
3202: LD_VAR 0 3
3206: PPUSH
3207: LD_INT 17
3209: PPUSH
3210: CALL_OW 109
// PlaceUnitArea ( cargo , PlayerSpawn , false ) ;
3214: LD_VAR 0 3
3218: PPUSH
3219: LD_INT 4
3221: PPUSH
3222: LD_INT 0
3224: PPUSH
3225: CALL_OW 49
// AddCargo ( cargo , mat_cans , 100 ) ;
3229: LD_VAR 0 3
3233: PPUSH
3234: LD_INT 1
3236: PPUSH
3237: LD_INT 100
3239: PPUSH
3240: CALL_OW 291
// end ;
3244: GO 3145
3246: POP
3247: POP
// end ; end_of_file
3248: LD_VAR 0 1
3252: RET
// export function PrepareRussianCommander ; begin
3253: LD_INT 0
3255: PPUSH
// uc_side := 3 ;
3256: LD_ADDR_OWVAR 20
3260: PUSH
3261: LD_INT 3
3263: ST_TO_ADDR
// Davidov := PrepareUnit ( Davidov , false ,  ) ;
3264: LD_ADDR_EXP 16
3268: PUSH
3269: LD_STRING Davidov
3271: PPUSH
3272: LD_INT 0
3274: PPUSH
3275: LD_STRING 
3277: PPUSH
3278: CALL 38196 0 3
3282: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3283: LD_EXP 16
3287: PPUSH
3288: LD_INT 3
3290: PPUSH
3291: CALL_OW 52
// RuScientists := Join ( RuScientists , Davidov ) ;
3295: LD_ADDR_EXP 27
3299: PUSH
3300: LD_EXP 27
3304: PPUSH
3305: LD_EXP 16
3309: PPUSH
3310: CALL 74877 0 2
3314: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3315: LD_EXP 27
3319: PPUSH
3320: LD_INT 4
3322: PPUSH
3323: CALL_OW 336
// end ;
3327: LD_VAR 0 1
3331: RET
// export function PrepareEastBase ; var i , un ; begin
3332: LD_INT 0
3334: PPUSH
3335: PPUSH
3336: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3337: LD_INT 3
3339: PPUSH
3340: LD_INT 3
3342: PPUSH
3343: LD_INT 121
3345: PPUSH
3346: LD_EXP 29
3350: PPUSH
3351: LD_EXP 30
3355: PPUSH
3356: CALL_OW 12
3360: PPUSH
3361: LD_INT 1
3363: PPUSH
3364: LD_INT 3
3366: PPUSH
3367: CALL 12642 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3371: LD_INT 3
3373: PPUSH
3374: LD_INT 3
3376: PPUSH
3377: LD_INT 121
3379: PPUSH
3380: LD_EXP 29
3384: PPUSH
3385: LD_EXP 30
3389: PPUSH
3390: CALL_OW 12
3394: PPUSH
3395: LD_INT 9
3397: PPUSH
3398: LD_INT 3
3400: PPUSH
3401: CALL 12642 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3405: LD_INT 3
3407: PPUSH
3408: LD_INT 3
3410: PPUSH
3411: LD_INT 4
3413: PPUSH
3414: LD_EXP 29
3418: PPUSH
3419: LD_EXP 30
3423: PPUSH
3424: CALL_OW 12
3428: PPUSH
3429: LD_INT 2
3431: PPUSH
3432: LD_INT 6
3434: PPUSH
3435: CALL 12642 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3439: LD_INT 3
3441: PPUSH
3442: LD_INT 3
3444: PPUSH
3445: LD_INT 112
3447: PPUSH
3448: LD_EXP 29
3452: PPUSH
3453: LD_EXP 30
3457: PPUSH
3458: CALL_OW 12
3462: PPUSH
3463: LD_INT 3
3465: PPUSH
3466: LD_INT 6
3468: PPUSH
3469: CALL 12642 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3473: LD_INT 3
3475: PPUSH
3476: LD_INT 3
3478: PPUSH
3479: LD_INT 47
3481: PPUSH
3482: LD_EXP 29
3486: PPUSH
3487: LD_EXP 30
3491: PPUSH
3492: CALL_OW 12
3496: PPUSH
3497: LD_INT 4
3499: PPUSH
3500: LD_INT 6
3502: PPUSH
3503: CALL 12642 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3507: LD_INT 3
3509: PPUSH
3510: LD_INT 3
3512: PPUSH
3513: LD_INT 129
3515: PPUSH
3516: LD_EXP 29
3520: PPUSH
3521: LD_EXP 30
3525: PPUSH
3526: CALL_OW 12
3530: PPUSH
3531: LD_INT 4
3533: PPUSH
3534: LD_INT 6
3536: PPUSH
3537: CALL 12642 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3541: LD_INT 3
3543: PPUSH
3544: LD_INT 3
3546: PPUSH
3547: LD_INT 135
3549: PPUSH
3550: LD_EXP 29
3554: PPUSH
3555: LD_EXP 30
3559: PPUSH
3560: CALL_OW 12
3564: PPUSH
3565: LD_INT 4
3567: PPUSH
3568: LD_INT 6
3570: PPUSH
3571: CALL 12642 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3575: LD_ADDR_VAR 0 2
3579: PUSH
3580: LD_INT 22
3582: PUSH
3583: LD_INT 3
3585: PUSH
3586: EMPTY
3587: LIST
3588: LIST
3589: PUSH
3590: LD_INT 30
3592: PUSH
3593: LD_INT 32
3595: PUSH
3596: EMPTY
3597: LIST
3598: LIST
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: PPUSH
3604: CALL_OW 69
3608: PUSH
3609: FOR_IN
3610: IFFALSE 3650
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3612: LD_INT 3
3614: PPUSH
3615: LD_INT 3
3617: PPUSH
3618: LD_VAR 0 2
3622: PPUSH
3623: LD_EXP 29
3627: PPUSH
3628: LD_EXP 30
3632: PPUSH
3633: CALL_OW 12
3637: PPUSH
3638: LD_INT 1
3640: PPUSH
3641: LD_INT 1
3643: PPUSH
3644: CALL 12642 0 6
3648: GO 3609
3650: POP
3651: POP
// for i := 1 to 5 do
3652: LD_ADDR_VAR 0 2
3656: PUSH
3657: DOUBLE
3658: LD_INT 1
3660: DEC
3661: ST_TO_ADDR
3662: LD_INT 5
3664: PUSH
3665: FOR_TO
3666: IFFALSE 3769
// begin uc_side := 3 ;
3668: LD_ADDR_OWVAR 20
3672: PUSH
3673: LD_INT 3
3675: ST_TO_ADDR
// uc_nation := 3 ;
3676: LD_ADDR_OWVAR 21
3680: PUSH
3681: LD_INT 3
3683: ST_TO_ADDR
// hc_gallery :=  ;
3684: LD_ADDR_OWVAR 33
3688: PUSH
3689: LD_STRING 
3691: ST_TO_ADDR
// hc_name :=  ;
3692: LD_ADDR_OWVAR 26
3696: PUSH
3697: LD_STRING 
3699: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3700: LD_INT 0
3702: PPUSH
3703: LD_INT 4
3705: PPUSH
3706: LD_EXP 29
3710: PPUSH
3711: LD_EXP 30
3715: PPUSH
3716: CALL_OW 12
3720: PPUSH
3721: CALL_OW 380
// un := CreateHuman ;
3725: LD_ADDR_VAR 0 3
3729: PUSH
3730: CALL_OW 44
3734: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3735: LD_VAR 0 3
3739: PPUSH
3740: LD_INT 3
3742: PPUSH
3743: CALL_OW 52
// RuScientists := Join ( RuScientists , un ) ;
3747: LD_ADDR_EXP 27
3751: PUSH
3752: LD_EXP 27
3756: PPUSH
3757: LD_VAR 0 3
3761: PPUSH
3762: CALL 74877 0 2
3766: ST_TO_ADDR
// end ;
3767: GO 3665
3769: POP
3770: POP
// end ;
3771: LD_VAR 0 1
3775: RET
// export function PrepareWestBase ; var i , un ; begin
3776: LD_INT 0
3778: PPUSH
3779: PPUSH
3780: PPUSH
// TeleportExit ( ruteleprt , 122 , 145 ) ;
3781: LD_INT 10
3783: PPUSH
3784: LD_INT 122
3786: PPUSH
3787: LD_INT 145
3789: PPUSH
3790: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
3794: LD_INT 137
3796: PPUSH
3797: LD_INT 84
3799: PPUSH
3800: LD_INT 61
3802: PPUSH
3803: CALL_OW 243
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3807: LD_INT 3
3809: PPUSH
3810: LD_INT 3
3812: PPUSH
3813: LD_INT 6
3815: PPUSH
3816: LD_EXP 29
3820: PPUSH
3821: LD_EXP 30
3825: PPUSH
3826: CALL_OW 12
3830: PPUSH
3831: LD_INT 2
3833: PPUSH
3834: LD_INT 3
3836: PPUSH
3837: CALL 12642 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3841: LD_INT 3
3843: PPUSH
3844: LD_INT 3
3846: PPUSH
3847: LD_INT 91
3849: PPUSH
3850: LD_EXP 29
3854: PPUSH
3855: LD_EXP 30
3859: PPUSH
3860: CALL_OW 12
3864: PPUSH
3865: LD_INT 4
3867: PPUSH
3868: LD_INT 3
3870: PPUSH
3871: CALL 12642 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3875: LD_INT 3
3877: PPUSH
3878: LD_INT 3
3880: PPUSH
3881: LD_INT 21
3883: PPUSH
3884: LD_EXP 29
3888: PPUSH
3889: LD_EXP 30
3893: PPUSH
3894: CALL_OW 12
3898: PPUSH
3899: LD_INT 3
3901: PPUSH
3902: LD_INT 6
3904: PPUSH
3905: CALL 12642 0 6
// end ;
3909: LD_VAR 0 1
3913: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3914: LD_INT 0
3916: PPUSH
3917: PPUSH
3918: PPUSH
3919: PPUSH
// uc_side = 3 ;
3920: LD_ADDR_OWVAR 20
3924: PUSH
3925: LD_INT 3
3927: ST_TO_ADDR
// uc_nation = 3 ;
3928: LD_ADDR_OWVAR 21
3932: PUSH
3933: LD_INT 3
3935: ST_TO_ADDR
// for i = 1 to 5 do
3936: LD_ADDR_VAR 0 2
3940: PUSH
3941: DOUBLE
3942: LD_INT 1
3944: DEC
3945: ST_TO_ADDR
3946: LD_INT 5
3948: PUSH
3949: FOR_TO
3950: IFFALSE 4020
// begin hc_gallery =  ;
3952: LD_ADDR_OWVAR 33
3956: PUSH
3957: LD_STRING 
3959: ST_TO_ADDR
// hc_name =  ;
3960: LD_ADDR_OWVAR 26
3964: PUSH
3965: LD_STRING 
3967: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3968: LD_INT 0
3970: PPUSH
3971: LD_INT 9
3973: PPUSH
3974: LD_EXP 29
3978: PPUSH
3979: LD_EXP 30
3983: PPUSH
3984: CALL_OW 12
3988: PPUSH
3989: CALL_OW 380
// un = CreateHuman ;
3993: LD_ADDR_VAR 0 3
3997: PUSH
3998: CALL_OW 44
4002: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4003: LD_VAR 0 3
4007: PPUSH
4008: LD_INT 8
4010: PPUSH
4011: LD_INT 0
4013: PPUSH
4014: CALL_OW 49
// end ;
4018: GO 3949
4020: POP
4021: POP
// for i = 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4022: LD_ADDR_VAR 0 2
4026: PUSH
4027: DOUBLE
4028: LD_INT 1
4030: DEC
4031: ST_TO_ADDR
4032: LD_INT 2
4034: PUSH
4035: LD_INT 3
4037: PUSH
4038: LD_INT 4
4040: PUSH
4041: LD_INT 4
4043: PUSH
4044: EMPTY
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: PUSH
4050: LD_OWVAR 67
4054: ARRAY
4055: PUSH
4056: FOR_TO
4057: IFFALSE 4127
// begin hc_gallery =  ;
4059: LD_ADDR_OWVAR 33
4063: PUSH
4064: LD_STRING 
4066: ST_TO_ADDR
// hc_name =  ;
4067: LD_ADDR_OWVAR 26
4071: PUSH
4072: LD_STRING 
4074: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4075: LD_INT 0
4077: PPUSH
4078: LD_INT 4
4080: PPUSH
4081: LD_EXP 29
4085: PPUSH
4086: LD_EXP 30
4090: PPUSH
4091: CALL_OW 12
4095: PPUSH
4096: CALL_OW 380
// un = CreateHuman ;
4100: LD_ADDR_VAR 0 3
4104: PUSH
4105: CALL_OW 44
4109: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4110: LD_VAR 0 3
4114: PPUSH
4115: LD_INT 8
4117: PPUSH
4118: LD_INT 0
4120: PPUSH
4121: CALL_OW 49
// end ;
4125: GO 4056
4127: POP
4128: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4129: LD_ADDR_VAR 0 2
4133: PUSH
4134: DOUBLE
4135: LD_INT 1
4137: DEC
4138: ST_TO_ADDR
4139: LD_INT 3
4141: PUSH
4142: LD_INT 4
4144: PUSH
4145: LD_INT 5
4147: PUSH
4148: LD_INT 5
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: LIST
4155: LIST
4156: PUSH
4157: LD_OWVAR 67
4161: ARRAY
4162: PUSH
4163: FOR_TO
4164: IFFALSE 4360
// begin vc_engine = 3 ;
4166: LD_ADDR_OWVAR 39
4170: PUSH
4171: LD_INT 3
4173: ST_TO_ADDR
// vc_control = 1 ;
4174: LD_ADDR_OWVAR 38
4178: PUSH
4179: LD_INT 1
4181: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
4182: LD_ADDR_OWVAR 40
4186: PUSH
4187: LD_INT 42
4189: PUSH
4190: LD_INT 43
4192: PUSH
4193: LD_INT 44
4195: PUSH
4196: LD_INT 45
4198: PUSH
4199: LD_INT 46
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: LIST
4206: LIST
4207: LIST
4208: PUSH
4209: LD_INT 1
4211: PPUSH
4212: LD_INT 5
4214: PPUSH
4215: CALL_OW 12
4219: ARRAY
4220: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4221: LD_OWVAR 40
4225: PUSH
4226: LD_INT 46
4228: EQUAL
4229: IFFALSE 4241
// vc_chassis = ru_heavy_tracked else
4231: LD_ADDR_OWVAR 37
4235: PUSH
4236: LD_INT 24
4238: ST_TO_ADDR
4239: GO 4268
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4241: LD_ADDR_OWVAR 37
4245: PUSH
4246: LD_INT 22
4248: PUSH
4249: LD_INT 21
4251: PUSH
4252: EMPTY
4253: LIST
4254: LIST
4255: PUSH
4256: LD_INT 1
4258: PPUSH
4259: LD_INT 2
4261: PPUSH
4262: CALL_OW 12
4266: ARRAY
4267: ST_TO_ADDR
// veh = CreateVehicle ;
4268: LD_ADDR_VAR 0 4
4272: PUSH
4273: CALL_OW 45
4277: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4278: LD_VAR 0 4
4282: PPUSH
4283: LD_INT 3
4285: PPUSH
4286: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4290: LD_VAR 0 4
4294: PPUSH
4295: LD_INT 5
4297: PPUSH
4298: LD_INT 0
4300: PPUSH
4301: CALL_OW 49
// hc_gallery =  ;
4305: LD_ADDR_OWVAR 33
4309: PUSH
4310: LD_STRING 
4312: ST_TO_ADDR
// hc_name =  ;
4313: LD_ADDR_OWVAR 26
4317: PUSH
4318: LD_STRING 
4320: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
4321: LD_INT 0
4323: PPUSH
4324: LD_INT 3
4326: PPUSH
4327: LD_INT 10
4329: PPUSH
4330: CALL_OW 380
// un = CreateHuman ;
4334: LD_ADDR_VAR 0 3
4338: PUSH
4339: CALL_OW 44
4343: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4344: LD_VAR 0 3
4348: PPUSH
4349: LD_VAR 0 4
4353: PPUSH
4354: CALL_OW 52
// end ;
4358: GO 4163
4360: POP
4361: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4362: LD_ADDR_VAR 0 2
4366: PUSH
4367: DOUBLE
4368: LD_INT 1
4370: DEC
4371: ST_TO_ADDR
4372: LD_INT 3
4374: PUSH
4375: LD_INT 4
4377: PUSH
4378: LD_INT 5
4380: PUSH
4381: LD_INT 5
4383: PUSH
4384: EMPTY
4385: LIST
4386: LIST
4387: LIST
4388: LIST
4389: PUSH
4390: LD_OWVAR 67
4394: ARRAY
4395: PUSH
4396: FOR_TO
4397: IFFALSE 4544
// begin vc_engine = 3 ;
4399: LD_ADDR_OWVAR 39
4403: PUSH
4404: LD_INT 3
4406: ST_TO_ADDR
// vc_control = 3 ;
4407: LD_ADDR_OWVAR 38
4411: PUSH
4412: LD_INT 3
4414: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
4415: LD_ADDR_OWVAR 40
4419: PUSH
4420: LD_INT 42
4422: PUSH
4423: LD_INT 43
4425: PUSH
4426: LD_INT 44
4428: PUSH
4429: LD_INT 45
4431: PUSH
4432: LD_INT 46
4434: PUSH
4435: LD_INT 49
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: PUSH
4446: LD_INT 1
4448: PPUSH
4449: LD_INT 5
4451: PPUSH
4452: CALL_OW 12
4456: ARRAY
4457: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4458: LD_OWVAR 40
4462: PUSH
4463: LD_INT 46
4465: EQUAL
4466: IFFALSE 4478
// vc_chassis = ru_heavy_tracked else
4468: LD_ADDR_OWVAR 37
4472: PUSH
4473: LD_INT 24
4475: ST_TO_ADDR
4476: GO 4505
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4478: LD_ADDR_OWVAR 37
4482: PUSH
4483: LD_INT 22
4485: PUSH
4486: LD_INT 21
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: PUSH
4493: LD_INT 1
4495: PPUSH
4496: LD_INT 2
4498: PPUSH
4499: CALL_OW 12
4503: ARRAY
4504: ST_TO_ADDR
// veh = CreateVehicle ;
4505: LD_ADDR_VAR 0 4
4509: PUSH
4510: CALL_OW 45
4514: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4515: LD_VAR 0 4
4519: PPUSH
4520: LD_INT 3
4522: PPUSH
4523: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4527: LD_VAR 0 4
4531: PPUSH
4532: LD_INT 6
4534: PPUSH
4535: LD_INT 0
4537: PPUSH
4538: CALL_OW 49
// end ;
4542: GO 4396
4544: POP
4545: POP
// end ; end_of_file
4546: LD_VAR 0 1
4550: RET
// export function PrepareKurt ; begin
4551: LD_INT 0
4553: PPUSH
// uc_side = 8 ;
4554: LD_ADDR_OWVAR 20
4558: PUSH
4559: LD_INT 8
4561: ST_TO_ADDR
// uc_nation = 2 ;
4562: LD_ADDR_OWVAR 21
4566: PUSH
4567: LD_INT 2
4569: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4570: LD_ADDR_OWVAR 37
4574: PUSH
4575: LD_INT 13
4577: ST_TO_ADDR
// vc_engine = 1 ;
4578: LD_ADDR_OWVAR 39
4582: PUSH
4583: LD_INT 1
4585: ST_TO_ADDR
// vc_control = 1 ;
4586: LD_ADDR_OWVAR 38
4590: PUSH
4591: LD_INT 1
4593: ST_TO_ADDR
// vc_weapon = 24 ;
4594: LD_ADDR_OWVAR 40
4598: PUSH
4599: LD_INT 24
4601: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4602: LD_ADDR_EXP 18
4606: PUSH
4607: CALL_OW 45
4611: ST_TO_ADDR
// if kurtStatus > 0 then
4612: LD_EXP 19
4616: PUSH
4617: LD_INT 0
4619: GREATER
4620: IFFALSE 4672
// begin Kurt = PrepareUnit ( Kurt , false ,  ) ;
4622: LD_ADDR_EXP 17
4626: PUSH
4627: LD_STRING Kurt
4629: PPUSH
4630: LD_INT 0
4632: PPUSH
4633: LD_STRING 
4635: PPUSH
4636: CALL 38196 0 3
4640: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4641: LD_EXP 18
4645: PPUSH
4646: LD_INT 4
4648: PPUSH
4649: LD_INT 0
4651: PPUSH
4652: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4656: LD_EXP 17
4660: PPUSH
4661: LD_EXP 18
4665: PPUSH
4666: CALL_OW 52
// end else
4670: GO 4749
// begin hc_name =  ;
4672: LD_ADDR_OWVAR 26
4676: PUSH
4677: LD_STRING 
4679: ST_TO_ADDR
// hc_gallery =  ;
4680: LD_ADDR_OWVAR 33
4684: PUSH
4685: LD_STRING 
4687: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4688: LD_INT 1
4690: PPUSH
4691: LD_INT 10
4693: PPUSH
4694: CALL_OW 381
// Kurt = CreateHuman ;
4698: LD_ADDR_EXP 17
4702: PUSH
4703: CALL_OW 44
4707: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4708: LD_EXP 18
4712: PPUSH
4713: LD_INT 4
4715: PPUSH
4716: LD_INT 0
4718: PPUSH
4719: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4723: LD_EXP 17
4727: PPUSH
4728: LD_EXP 18
4732: PPUSH
4733: CALL_OW 52
// SaveCharacters ( Kurt , AltKurt ) ;
4737: LD_EXP 17
4741: PPUSH
4742: LD_STRING AltKurt
4744: PPUSH
4745: CALL_OW 38
// end ; end ;
4749: LD_VAR 0 1
4753: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4754: LD_INT 0
4756: PPUSH
4757: PPUSH
4758: PPUSH
4759: PPUSH
// for i = 1 to 3 do
4760: LD_ADDR_VAR 0 2
4764: PUSH
4765: DOUBLE
4766: LD_INT 1
4768: DEC
4769: ST_TO_ADDR
4770: LD_INT 3
4772: PUSH
4773: FOR_TO
4774: IFFALSE 4895
// begin uc_side = 1 ;
4776: LD_ADDR_OWVAR 20
4780: PUSH
4781: LD_INT 1
4783: ST_TO_ADDR
// uc_nation = 2 ;
4784: LD_ADDR_OWVAR 21
4788: PUSH
4789: LD_INT 2
4791: ST_TO_ADDR
// hc_gallery =  ;
4792: LD_ADDR_OWVAR 33
4796: PUSH
4797: LD_STRING 
4799: ST_TO_ADDR
// hc_name =  ;
4800: LD_ADDR_OWVAR 26
4804: PUSH
4805: LD_STRING 
4807: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4808: LD_EXP 19
4812: PUSH
4813: LD_INT 0
4815: EQUAL
4816: PUSH
4817: LD_EXP 19
4821: PUSH
4822: LD_INT 2
4824: EQUAL
4825: OR
4826: IFFALSE 4843
// PrepareHuman ( false , 1 , 6 ) else
4828: LD_INT 0
4830: PPUSH
4831: LD_INT 1
4833: PPUSH
4834: LD_INT 6
4836: PPUSH
4837: CALL_OW 380
4841: GO 4856
// PrepareHuman ( false , 1 , 8 ) ;
4843: LD_INT 0
4845: PPUSH
4846: LD_INT 1
4848: PPUSH
4849: LD_INT 8
4851: PPUSH
4852: CALL_OW 380
// un = CreateHuman ;
4856: LD_ADDR_VAR 0 3
4860: PUSH
4861: CALL_OW 44
4865: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4866: LD_VAR 0 3
4870: PPUSH
4871: LD_INT 4
4873: PPUSH
4874: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4878: LD_VAR 0 3
4882: PPUSH
4883: LD_INT 4
4885: PPUSH
4886: LD_INT 0
4888: PPUSH
4889: CALL_OW 49
// end ;
4893: GO 4773
4895: POP
4896: POP
// vc_chassis = 14 ;
4897: LD_ADDR_OWVAR 37
4901: PUSH
4902: LD_INT 14
4904: ST_TO_ADDR
// vc_engine = 3 ;
4905: LD_ADDR_OWVAR 39
4909: PUSH
4910: LD_INT 3
4912: ST_TO_ADDR
// vc_control = 1 ;
4913: LD_ADDR_OWVAR 38
4917: PUSH
4918: LD_INT 1
4920: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4921: LD_ADDR_OWVAR 40
4925: PUSH
4926: LD_INT 27
4928: PUSH
4929: LD_INT 26
4931: PUSH
4932: LD_INT 28
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: LIST
4939: PUSH
4940: LD_INT 1
4942: PPUSH
4943: LD_INT 3
4945: PPUSH
4946: CALL_OW 12
4950: ARRAY
4951: ST_TO_ADDR
// veh = CreateVehicle ;
4952: LD_ADDR_VAR 0 4
4956: PUSH
4957: CALL_OW 45
4961: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4962: LD_VAR 0 4
4966: PPUSH
4967: LD_INT 4
4969: PPUSH
4970: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4974: LD_VAR 0 4
4978: PPUSH
4979: LD_INT 4
4981: PPUSH
4982: LD_INT 0
4984: PPUSH
4985: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4989: LD_EXP 19
4993: PUSH
4994: LD_INT 0
4996: EQUAL
4997: PUSH
4998: LD_EXP 19
5002: PUSH
5003: LD_INT 2
5005: EQUAL
5006: OR
5007: IFFALSE 5024
// PrepareHuman ( false , 3 , 6 ) else
5009: LD_INT 0
5011: PPUSH
5012: LD_INT 3
5014: PPUSH
5015: LD_INT 6
5017: PPUSH
5018: CALL_OW 380
5022: GO 5037
// PrepareHuman ( false , 3 , 8 ) ;
5024: LD_INT 0
5026: PPUSH
5027: LD_INT 3
5029: PPUSH
5030: LD_INT 8
5032: PPUSH
5033: CALL_OW 380
// un = CreateHuman ;
5037: LD_ADDR_VAR 0 3
5041: PUSH
5042: CALL_OW 44
5046: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5047: LD_VAR 0 3
5051: PPUSH
5052: LD_VAR 0 4
5056: PPUSH
5057: CALL_OW 52
// vc_chassis = 14 ;
5061: LD_ADDR_OWVAR 37
5065: PUSH
5066: LD_INT 14
5068: ST_TO_ADDR
// vc_engine = 3 ;
5069: LD_ADDR_OWVAR 39
5073: PUSH
5074: LD_INT 3
5076: ST_TO_ADDR
// vc_control = 1 ;
5077: LD_ADDR_OWVAR 38
5081: PUSH
5082: LD_INT 1
5084: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ rand ( 1 , 3 ) ] ;
5085: LD_ADDR_OWVAR 40
5089: PUSH
5090: LD_INT 27
5092: PUSH
5093: LD_INT 26
5095: PUSH
5096: LD_INT 28
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: LIST
5103: PUSH
5104: LD_INT 1
5106: PPUSH
5107: LD_INT 3
5109: PPUSH
5110: CALL_OW 12
5114: ARRAY
5115: ST_TO_ADDR
// veh = CreateVehicle ;
5116: LD_ADDR_VAR 0 4
5120: PUSH
5121: CALL_OW 45
5125: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5126: LD_VAR 0 4
5130: PPUSH
5131: LD_INT 4
5133: PPUSH
5134: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5138: LD_VAR 0 4
5142: PPUSH
5143: LD_INT 4
5145: PPUSH
5146: LD_INT 0
5148: PPUSH
5149: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5153: LD_EXP 19
5157: PUSH
5158: LD_INT 0
5160: EQUAL
5161: PUSH
5162: LD_EXP 19
5166: PUSH
5167: LD_INT 2
5169: EQUAL
5170: OR
5171: IFFALSE 5188
// PrepareHuman ( false , 4 , 6 ) else
5173: LD_INT 0
5175: PPUSH
5176: LD_INT 4
5178: PPUSH
5179: LD_INT 6
5181: PPUSH
5182: CALL_OW 380
5186: GO 5201
// PrepareHuman ( false , 4 , 8 ) ;
5188: LD_INT 0
5190: PPUSH
5191: LD_INT 4
5193: PPUSH
5194: LD_INT 8
5196: PPUSH
5197: CALL_OW 380
// un = CreateHuman ;
5201: LD_ADDR_VAR 0 3
5205: PUSH
5206: CALL_OW 44
5210: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5211: LD_VAR 0 3
5215: PPUSH
5216: LD_INT 4
5218: PPUSH
5219: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5223: LD_VAR 0 3
5227: PPUSH
5228: LD_VAR 0 4
5232: PPUSH
5233: CALL_OW 52
// vc_chassis = 14 ;
5237: LD_ADDR_OWVAR 37
5241: PUSH
5242: LD_INT 14
5244: ST_TO_ADDR
// vc_engine = 3 ;
5245: LD_ADDR_OWVAR 39
5249: PUSH
5250: LD_INT 3
5252: ST_TO_ADDR
// vc_control = 1 ;
5253: LD_ADDR_OWVAR 38
5257: PUSH
5258: LD_INT 1
5260: ST_TO_ADDR
// vc_weapon = 26 ;
5261: LD_ADDR_OWVAR 40
5265: PUSH
5266: LD_INT 26
5268: ST_TO_ADDR
// veh = CreateVehicle ;
5269: LD_ADDR_VAR 0 4
5273: PUSH
5274: CALL_OW 45
5278: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5279: LD_VAR 0 4
5283: PPUSH
5284: LD_INT 4
5286: PPUSH
5287: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5291: LD_VAR 0 4
5295: PPUSH
5296: LD_INT 4
5298: PPUSH
5299: LD_INT 0
5301: PPUSH
5302: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5306: LD_EXP 19
5310: PUSH
5311: LD_INT 0
5313: EQUAL
5314: PUSH
5315: LD_EXP 19
5319: PUSH
5320: LD_INT 2
5322: EQUAL
5323: OR
5324: IFFALSE 5341
// PrepareHuman ( false , 2 , 4 ) else
5326: LD_INT 0
5328: PPUSH
5329: LD_INT 2
5331: PPUSH
5332: LD_INT 4
5334: PPUSH
5335: CALL_OW 380
5339: GO 5354
// PrepareHuman ( false , 2 , 8 ) ;
5341: LD_INT 0
5343: PPUSH
5344: LD_INT 2
5346: PPUSH
5347: LD_INT 8
5349: PPUSH
5350: CALL_OW 380
// un = CreateHuman ;
5354: LD_ADDR_VAR 0 3
5358: PUSH
5359: CALL_OW 44
5363: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5364: LD_VAR 0 3
5368: PPUSH
5369: LD_INT 4
5371: PPUSH
5372: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5376: LD_VAR 0 3
5380: PPUSH
5381: LD_VAR 0 4
5385: PPUSH
5386: CALL_OW 52
// end ;
5390: LD_VAR 0 1
5394: RET
// export function PrepareAttackLegion ; var i , un ; begin
5395: LD_INT 0
5397: PPUSH
5398: PPUSH
5399: PPUSH
// for i = 1 to 4 do
5400: LD_ADDR_VAR 0 2
5404: PUSH
5405: DOUBLE
5406: LD_INT 1
5408: DEC
5409: ST_TO_ADDR
5410: LD_INT 4
5412: PUSH
5413: FOR_TO
5414: IFFALSE 5524
// begin uc_side = 8 ;
5416: LD_ADDR_OWVAR 20
5420: PUSH
5421: LD_INT 8
5423: ST_TO_ADDR
// uc_nation = 2 ;
5424: LD_ADDR_OWVAR 21
5428: PUSH
5429: LD_INT 2
5431: ST_TO_ADDR
// hc_gallery =  ;
5432: LD_ADDR_OWVAR 33
5436: PUSH
5437: LD_STRING 
5439: ST_TO_ADDR
// hc_name =  ;
5440: LD_ADDR_OWVAR 26
5444: PUSH
5445: LD_STRING 
5447: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5448: LD_INT 0
5450: PPUSH
5451: LD_INT 1
5453: PUSH
5454: LD_INT 8
5456: PUSH
5457: EMPTY
5458: LIST
5459: LIST
5460: PUSH
5461: LD_INT 1
5463: PPUSH
5464: LD_INT 2
5466: PPUSH
5467: CALL_OW 12
5471: ARRAY
5472: PPUSH
5473: LD_INT 6
5475: PPUSH
5476: LD_INT 8
5478: PPUSH
5479: CALL_OW 12
5483: PPUSH
5484: CALL_OW 380
// un = CreateHuman ;
5488: LD_ADDR_VAR 0 3
5492: PUSH
5493: CALL_OW 44
5497: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5498: LD_VAR 0 3
5502: PPUSH
5503: LD_INT 19
5505: PPUSH
5506: LD_INT 0
5508: PPUSH
5509: CALL_OW 49
// ComCrawl ( un ) ;
5513: LD_VAR 0 3
5517: PPUSH
5518: CALL_OW 137
// end ;
5522: GO 5413
5524: POP
5525: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5526: LD_INT 1
5528: PPUSH
5529: LD_INT 8
5531: PPUSH
5532: LD_INT 2
5534: PPUSH
5535: LD_INT 1
5537: PPUSH
5538: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5542: LD_INT 20
5544: PPUSH
5545: LD_INT 3
5547: PPUSH
5548: CALL 14477 0 2
// end ; end_of_file
5552: LD_VAR 0 1
5556: RET
// export function Action ; var i , tmp , group ; begin
5557: LD_INT 0
5559: PPUSH
5560: PPUSH
5561: PPUSH
5562: PPUSH
// InGameOn ;
5563: CALL_OW 8
// music_nat := 1 ;
5567: LD_ADDR_OWVAR 71
5571: PUSH
5572: LD_INT 1
5574: ST_TO_ADDR
// group := FilterAllUnits ( [ f_side , 1 ] ) ;
5575: LD_ADDR_VAR 0 4
5579: PUSH
5580: LD_INT 22
5582: PUSH
5583: LD_INT 1
5585: PUSH
5586: EMPTY
5587: LIST
5588: LIST
5589: PPUSH
5590: CALL_OW 69
5594: ST_TO_ADDR
// tmp := IsInUnit ( JMM ) ;
5595: LD_ADDR_VAR 0 3
5599: PUSH
5600: LD_EXP 1
5604: PPUSH
5605: CALL_OW 310
5609: ST_TO_ADDR
// CenterNowOnUnits ( tmp ) ;
5610: LD_VAR 0 3
5614: PPUSH
5615: CALL_OW 87
// ComMoveXY ( group , 130 , 103 ) ;
5619: LD_VAR 0 4
5623: PPUSH
5624: LD_INT 130
5626: PPUSH
5627: LD_INT 103
5629: PPUSH
5630: CALL_OW 111
// AddComMoveXY ( tmp , 114 , 102 ) ;
5634: LD_VAR 0 3
5638: PPUSH
5639: LD_INT 114
5641: PPUSH
5642: LD_INT 102
5644: PPUSH
5645: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5649: LD_EXP 1
5653: PPUSH
5654: LD_STRING D1-JMM-1
5656: PPUSH
5657: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5661: LD_VAR 0 3
5665: PPUSH
5666: CALL_OW 87
// if IsOk ( Donaldson ) then
5670: LD_EXP 3
5674: PPUSH
5675: CALL_OW 302
5679: IFFALSE 5744
// begin Say ( Donaldson , D1-Don-1 ) ;
5681: LD_EXP 3
5685: PPUSH
5686: LD_STRING D1-Don-1
5688: PPUSH
5689: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5693: LD_VAR 0 3
5697: PPUSH
5698: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5702: LD_EXP 1
5706: PPUSH
5707: LD_STRING D1-JMM-2
5709: PPUSH
5710: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5714: LD_VAR 0 3
5718: PPUSH
5719: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5723: LD_EXP 3
5727: PPUSH
5728: LD_STRING D1-Don-2
5730: PPUSH
5731: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5735: LD_VAR 0 3
5739: PPUSH
5740: CALL_OW 87
// end ; AddComMoveXY ( group , 110 , 101 ) ;
5744: LD_VAR 0 4
5748: PPUSH
5749: LD_INT 110
5751: PPUSH
5752: LD_INT 101
5754: PPUSH
5755: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5759: LD_INT 35
5761: PPUSH
5762: CALL_OW 67
// CenterNowOnUnits ( tmp ) ;
5766: LD_VAR 0 3
5770: PPUSH
5771: CALL_OW 87
// until SeeXY ( 1 , 102 , 94 ) ;
5775: LD_INT 1
5777: PPUSH
5778: LD_INT 102
5780: PPUSH
5781: LD_INT 94
5783: PPUSH
5784: CALL_OW 293
5788: IFFALSE 5759
// CenterOnXY ( 102 , 94 ) ;
5790: LD_INT 102
5792: PPUSH
5793: LD_INT 94
5795: PPUSH
5796: CALL_OW 84
// DialogRandom ( UnitFilter ( group , [ f_sex , sex_male ] ) , D1-Sol1-2 ,  ) ;
5800: LD_VAR 0 4
5804: PPUSH
5805: LD_INT 26
5807: PUSH
5808: LD_INT 1
5810: PUSH
5811: EMPTY
5812: LIST
5813: LIST
5814: PPUSH
5815: CALL_OW 72
5819: PPUSH
5820: LD_STRING D1-Sol1-2
5822: PPUSH
5823: LD_STRING 
5825: PPUSH
5826: CALL 12137 0 3
// Say ( JMM , D1-JMM-3 ) ;
5830: LD_EXP 1
5834: PPUSH
5835: LD_STRING D1-JMM-3
5837: PPUSH
5838: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5842: LD_STRING M1
5844: PPUSH
5845: CALL_OW 337
// for i in group do
5849: LD_ADDR_VAR 0 2
5853: PUSH
5854: LD_VAR 0 4
5858: PUSH
5859: FOR_IN
5860: IFFALSE 5879
// ComMoveXY ( i , 95 , 84 ) ;
5862: LD_VAR 0 2
5866: PPUSH
5867: LD_INT 95
5869: PPUSH
5870: LD_INT 84
5872: PPUSH
5873: CALL_OW 111
5877: GO 5859
5879: POP
5880: POP
// end ;
5881: LD_VAR 0 1
5885: RET
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5886: GO 5888
5888: DISABLE
5889: LD_INT 0
5891: PPUSH
5892: PPUSH
5893: PPUSH
5894: PPUSH
// begin enable ;
5895: ENABLE
// bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5896: LD_ADDR_VAR 0 2
5900: PUSH
5901: LD_INT 8
5903: PPUSH
5904: LD_INT 22
5906: PUSH
5907: LD_INT 3
5909: PUSH
5910: EMPTY
5911: LIST
5912: LIST
5913: PUSH
5914: LD_INT 25
5916: PUSH
5917: LD_INT 9
5919: PUSH
5920: EMPTY
5921: LIST
5922: LIST
5923: PUSH
5924: EMPTY
5925: LIST
5926: LIST
5927: PPUSH
5928: CALL_OW 70
5932: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
5933: LD_ADDR_VAR 0 3
5937: PUSH
5938: LD_INT 22
5940: PUSH
5941: LD_INT 1
5943: PUSH
5944: EMPTY
5945: LIST
5946: LIST
5947: PUSH
5948: EMPTY
5949: LIST
5950: PPUSH
5951: CALL_OW 69
5955: ST_TO_ADDR
// for i in your_units do
5956: LD_ADDR_VAR 0 1
5960: PUSH
5961: LD_VAR 0 3
5965: PUSH
5966: FOR_IN
5967: IFFALSE 6641
// begin if See ( 3 , i ) then
5969: LD_INT 3
5971: PPUSH
5972: LD_VAR 0 1
5976: PPUSH
5977: CALL_OW 292
5981: IFFALSE 6639
// begin disable ;
5983: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
5984: LD_VAR 0 2
5988: PPUSH
5989: LD_INT 96
5991: PPUSH
5992: LD_INT 85
5994: PPUSH
5995: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5999: LD_VAR 0 2
6003: PPUSH
6004: LD_INT 96
6006: PPUSH
6007: LD_INT 85
6009: PPUSH
6010: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6014: LD_VAR 0 2
6018: PPUSH
6019: LD_INT 96
6021: PPUSH
6022: LD_INT 85
6024: PPUSH
6025: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6029: LD_VAR 0 2
6033: PPUSH
6034: LD_INT 96
6036: PPUSH
6037: LD_INT 85
6039: PPUSH
6040: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6044: LD_VAR 0 2
6048: PPUSH
6049: LD_INT 96
6051: PPUSH
6052: LD_INT 85
6054: PPUSH
6055: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6059: LD_VAR 0 2
6063: PPUSH
6064: LD_INT 96
6066: PPUSH
6067: LD_INT 85
6069: PPUSH
6070: CALL_OW 214
// wait ( 0 0$2 ) ;
6074: LD_INT 70
6076: PPUSH
6077: CALL_OW 67
// Say ( JMM , D1a-JMM-1 ) ;
6081: LD_EXP 1
6085: PPUSH
6086: LD_STRING D1a-JMM-1
6088: PPUSH
6089: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
6093: LD_EXP 3
6097: PPUSH
6098: LD_STRING D1a-Don-1
6100: PPUSH
6101: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6105: LD_ADDR_VAR 0 1
6109: PUSH
6110: LD_INT 22
6112: PUSH
6113: LD_INT 1
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: PPUSH
6120: CALL_OW 69
6124: PUSH
6125: FOR_IN
6126: IFFALSE 6145
// ComMoveXY ( i , 109 , 102 ) ;
6128: LD_VAR 0 1
6132: PPUSH
6133: LD_INT 109
6135: PPUSH
6136: LD_INT 102
6138: PPUSH
6139: CALL_OW 111
6143: GO 6125
6145: POP
6146: POP
// Say ( JMM , D1a-JMM-2 ) ;
6147: LD_EXP 1
6151: PPUSH
6152: LD_STRING D1a-JMM-2
6154: PPUSH
6155: CALL_OW 88
// wait ( 0 0$10 ) ;
6159: LD_INT 350
6161: PPUSH
6162: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6166: LD_EXP 1
6170: PPUSH
6171: CALL_OW 310
6175: PPUSH
6176: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6180: LD_EXP 3
6184: PPUSH
6185: LD_STRING D1b-Don-1
6187: PPUSH
6188: CALL_OW 88
// if IsOk ( Donaldson ) then
6192: LD_EXP 3
6196: PPUSH
6197: CALL_OW 302
6201: IFFALSE 6215
// Say ( JMM , D1b-JMM-1 ) ;
6203: LD_EXP 1
6207: PPUSH
6208: LD_STRING D1b-JMM-1
6210: PPUSH
6211: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6215: LD_INT 22
6217: PUSH
6218: LD_INT 1
6220: PUSH
6221: EMPTY
6222: LIST
6223: LIST
6224: PUSH
6225: LD_INT 26
6227: PUSH
6228: LD_INT 1
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: PUSH
6235: LD_INT 2
6237: PUSH
6238: LD_INT 25
6240: PUSH
6241: LD_INT 1
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: PUSH
6248: LD_INT 25
6250: PUSH
6251: LD_INT 2
6253: PUSH
6254: EMPTY
6255: LIST
6256: LIST
6257: PUSH
6258: LD_INT 25
6260: PUSH
6261: LD_INT 3
6263: PUSH
6264: EMPTY
6265: LIST
6266: LIST
6267: PUSH
6268: LD_INT 25
6270: PUSH
6271: LD_INT 4
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: PUSH
6278: LD_INT 25
6280: PUSH
6281: LD_INT 5
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: PUSH
6288: LD_INT 25
6290: PUSH
6291: LD_INT 8
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: PUSH
6298: EMPTY
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: LIST
6311: PPUSH
6312: CALL_OW 69
6316: PPUSH
6317: LD_STRING D1b-Sol1-1
6319: PPUSH
6320: LD_STRING 
6322: PPUSH
6323: CALL 12137 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6327: LD_EXP 3
6331: PPUSH
6332: LD_STRING D1b-Don-2
6334: PPUSH
6335: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6339: LD_EXP 1
6343: PPUSH
6344: LD_STRING D1b-JMM-2
6346: PPUSH
6347: CALL_OW 88
// dec = ShowQuery1 ;
6351: LD_ADDR_VAR 0 4
6355: PUSH
6356: CALL 12600 0 0
6360: ST_TO_ADDR
// if dec = 1 then
6361: LD_VAR 0 4
6365: PUSH
6366: LD_INT 1
6368: EQUAL
6369: IFFALSE 6475
// begin Say ( JMM , D2-JMM-1 ) ;
6371: LD_EXP 1
6375: PPUSH
6376: LD_STRING D2-JMM-1
6378: PPUSH
6379: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6383: LD_EXP 15
6387: PPUSH
6388: LD_STRING D2-Pow-1
6390: PPUSH
6391: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6395: LD_EXP 1
6399: PPUSH
6400: LD_STRING D2a-JMM-1
6402: PPUSH
6403: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6407: LD_EXP 15
6411: PPUSH
6412: LD_STRING D2a-Pow-1
6414: PPUSH
6415: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6419: LD_EXP 1
6423: PPUSH
6424: LD_STRING D2a-JMM-2
6426: PPUSH
6427: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6431: LD_EXP 15
6435: PPUSH
6436: LD_STRING D2a-Pow-2
6438: PPUSH
6439: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6443: LD_EXP 1
6447: PPUSH
6448: LD_STRING D2a-JMM-3
6450: PPUSH
6451: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6455: LD_EXP 15
6459: PPUSH
6460: LD_STRING D2a-Pow-3
6462: PPUSH
6463: CALL_OW 94
// secondPass = 2 ;
6467: LD_ADDR_EXP 20
6471: PUSH
6472: LD_INT 2
6474: ST_TO_ADDR
// end ; if dec = 2 then
6475: LD_VAR 0 4
6479: PUSH
6480: LD_INT 2
6482: EQUAL
6483: IFFALSE 6577
// begin Say ( JMM , D2-JMM-1 ) ;
6485: LD_EXP 1
6489: PPUSH
6490: LD_STRING D2-JMM-1
6492: PPUSH
6493: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6497: LD_EXP 15
6501: PPUSH
6502: LD_STRING D2-Pow-1
6504: PPUSH
6505: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6509: LD_EXP 1
6513: PPUSH
6514: LD_STRING D2b-JMM-1
6516: PPUSH
6517: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6521: LD_EXP 15
6525: PPUSH
6526: LD_STRING D2b-Pow-1
6528: PPUSH
6529: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6533: LD_EXP 1
6537: PPUSH
6538: LD_STRING D2c-JMM-1
6540: PPUSH
6541: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6545: LD_EXP 15
6549: PPUSH
6550: LD_STRING D2c-Pow-1
6552: PPUSH
6553: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6557: LD_EXP 1
6561: PPUSH
6562: LD_STRING D2c-JMM-2
6564: PPUSH
6565: CALL_OW 88
// secondPass = 2 ;
6569: LD_ADDR_EXP 20
6573: PUSH
6574: LD_INT 2
6576: ST_TO_ADDR
// end ; if dec = 3 then
6577: LD_VAR 0 4
6581: PUSH
6582: LD_INT 3
6584: EQUAL
6585: IFFALSE 6595
// secondPass = 1 ;
6587: LD_ADDR_EXP 20
6591: PUSH
6592: LD_INT 1
6594: ST_TO_ADDR
// InGameOff ;
6595: CALL_OW 9
// ruAI := 1 ;
6599: LD_ADDR_EXP 34
6603: PUSH
6604: LD_INT 1
6606: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6607: LD_INT 1
6609: PPUSH
6610: LD_INT 3
6612: PPUSH
6613: LD_INT 2
6615: PPUSH
6616: LD_INT 1
6618: PPUSH
6619: CALL_OW 80
// music_nat := music_auto ;
6623: LD_ADDR_OWVAR 71
6627: PUSH
6628: LD_INT 0
6630: ST_TO_ADDR
// SaveForQuickRestart ;
6631: CALL_OW 22
// exit ;
6635: POP
6636: POP
6637: GO 6643
// end ; end ;
6639: GO 5966
6641: POP
6642: POP
// end ;
6643: PPOPN 4
6645: END
// every 1 1$0 trigger secondPass = 2 do
6646: LD_EXP 20
6650: PUSH
6651: LD_INT 2
6653: EQUAL
6654: IFFALSE 6874
6656: GO 6658
6658: DISABLE
// begin PowellSupport1 ;
6659: CALL 1985 0 0
// DialogueOn ;
6663: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6667: LD_EXP 1
6671: PPUSH
6672: LD_STRING DC1-JMM-1
6674: PPUSH
6675: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6679: LD_EXP 15
6683: PPUSH
6684: LD_STRING DC1-Pow-1
6686: PPUSH
6687: CALL_OW 94
// DialogueOff ;
6691: CALL_OW 7
// wait ( 3 3$0 ) ;
6695: LD_INT 6300
6697: PPUSH
6698: CALL_OW 67
// PowellSupport2 ;
6702: CALL 2466 0 0
// DialogueOn ;
6706: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6710: LD_EXP 1
6714: PPUSH
6715: LD_STRING DC2-JMM-1
6717: PPUSH
6718: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6722: LD_EXP 15
6726: PPUSH
6727: LD_STRING DC2-Pow-1
6729: PPUSH
6730: CALL_OW 94
// DialogueOff ;
6734: CALL_OW 7
// wait ( 3 3$00 ) ;
6738: LD_INT 6300
6740: PPUSH
6741: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6745: LD_INT 35
6747: PPUSH
6748: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and not FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
6752: LD_INT 22
6754: PUSH
6755: LD_INT 1
6757: PUSH
6758: EMPTY
6759: LIST
6760: LIST
6761: PUSH
6762: LD_INT 2
6764: PUSH
6765: LD_INT 30
6767: PUSH
6768: LD_INT 0
6770: PUSH
6771: EMPTY
6772: LIST
6773: LIST
6774: PUSH
6775: LD_INT 30
6777: PUSH
6778: LD_INT 1
6780: PUSH
6781: EMPTY
6782: LIST
6783: LIST
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: LIST
6789: PUSH
6790: EMPTY
6791: LIST
6792: LIST
6793: PPUSH
6794: CALL_OW 69
6798: PUSH
6799: LD_INT 11
6801: PPUSH
6802: LD_INT 22
6804: PUSH
6805: LD_INT 3
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: PPUSH
6812: CALL_OW 70
6816: NOT
6817: AND
6818: IFFALSE 6745
// wait ( 0 0$10 ) ;
6820: LD_INT 350
6822: PPUSH
6823: CALL_OW 67
// Legion ;
6827: CALL 6875 0 0
// wait ( 5 5$0 ) ;
6831: LD_INT 10500
6833: PPUSH
6834: CALL_OW 67
// PowellSupport3 ;
6838: CALL 3079 0 0
// DialogueOn ;
6842: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6846: LD_EXP 15
6850: PPUSH
6851: LD_STRING DC3-Pow-1
6853: PPUSH
6854: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6858: LD_EXP 1
6862: PPUSH
6863: LD_STRING DC3-JMM-1
6865: PPUSH
6866: CALL_OW 88
// DialogueOff ;
6870: CALL_OW 7
// end ;
6874: END
// export function Legion ; var i , dec1 , dec2 , tmp , tmp2 , tmp3 , crates , oil , siberite , cr , sb , payForNeutral , payForHelp , query1 , query2 ; begin
6875: LD_INT 0
6877: PPUSH
6878: PPUSH
6879: PPUSH
6880: PPUSH
6881: PPUSH
6882: PPUSH
6883: PPUSH
6884: PPUSH
6885: PPUSH
6886: PPUSH
6887: PPUSH
6888: PPUSH
6889: PPUSH
6890: PPUSH
6891: PPUSH
6892: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6893: LD_ADDR_VAR 0 5
6897: PUSH
6898: LD_INT 22
6900: PUSH
6901: LD_INT 1
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: PUSH
6908: LD_INT 21
6910: PUSH
6911: LD_INT 3
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: PUSH
6918: LD_INT 2
6920: PUSH
6921: LD_INT 30
6923: PUSH
6924: LD_INT 0
6926: PUSH
6927: EMPTY
6928: LIST
6929: LIST
6930: PUSH
6931: LD_INT 30
6933: PUSH
6934: LD_INT 1
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: LIST
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: LIST
6950: PPUSH
6951: CALL_OW 69
6955: ST_TO_ADDR
// crates := 0 ;
6956: LD_ADDR_VAR 0 8
6960: PUSH
6961: LD_INT 0
6963: ST_TO_ADDR
// oil := 0 ;
6964: LD_ADDR_VAR 0 9
6968: PUSH
6969: LD_INT 0
6971: ST_TO_ADDR
// siberite := 0 ;
6972: LD_ADDR_VAR 0 10
6976: PUSH
6977: LD_INT 0
6979: ST_TO_ADDR
// payForNeutral := false ;
6980: LD_ADDR_VAR 0 13
6984: PUSH
6985: LD_INT 0
6987: ST_TO_ADDR
// payForHelp := false ;
6988: LD_ADDR_VAR 0 14
6992: PUSH
6993: LD_INT 0
6995: ST_TO_ADDR
// for i in tmp do
6996: LD_ADDR_VAR 0 2
7000: PUSH
7001: LD_VAR 0 5
7005: PUSH
7006: FOR_IN
7007: IFFALSE 7098
// begin crates := crates + GetResourceType ( GetBase ( i ) , 1 ) ;
7009: LD_ADDR_VAR 0 8
7013: PUSH
7014: LD_VAR 0 8
7018: PUSH
7019: LD_VAR 0 2
7023: PPUSH
7024: CALL_OW 274
7028: PPUSH
7029: LD_INT 1
7031: PPUSH
7032: CALL_OW 275
7036: PLUS
7037: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( i ) , 2 ) ;
7038: LD_ADDR_VAR 0 9
7042: PUSH
7043: LD_VAR 0 9
7047: PUSH
7048: LD_VAR 0 2
7052: PPUSH
7053: CALL_OW 274
7057: PPUSH
7058: LD_INT 2
7060: PPUSH
7061: CALL_OW 275
7065: PLUS
7066: ST_TO_ADDR
// siberite := siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
7067: LD_ADDR_VAR 0 10
7071: PUSH
7072: LD_VAR 0 10
7076: PUSH
7077: LD_VAR 0 2
7081: PPUSH
7082: CALL_OW 274
7086: PPUSH
7087: LD_INT 3
7089: PPUSH
7090: CALL_OW 275
7094: PLUS
7095: ST_TO_ADDR
// end ;
7096: GO 7006
7098: POP
7099: POP
// PrepareKurt ;
7100: CALL 4551 0 0
// if not Kurt then
7104: LD_EXP 17
7108: NOT
7109: IFFALSE 7113
// exit ;
7111: GO 9232
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7113: LD_EXP 18
7117: PPUSH
7118: LD_INT 144
7120: PPUSH
7121: LD_INT 111
7123: PPUSH
7124: CALL_OW 111
// wait ( 0 0$2 ) ;
7128: LD_INT 70
7130: PPUSH
7131: CALL_OW 67
// PlaceSeeing ( 167 , 121 , 1 , - 10 ) ;
7135: LD_INT 167
7137: PPUSH
7138: LD_INT 121
7140: PPUSH
7141: LD_INT 1
7143: PPUSH
7144: LD_INT 10
7146: NEG
7147: PPUSH
7148: CALL_OW 330
// ComExitVehicle ( Kurt ) ;
7152: LD_EXP 17
7156: PPUSH
7157: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7161: LD_EXP 17
7165: PPUSH
7166: CALL_OW 87
// wait ( 0 0$1 ) ;
7170: LD_INT 35
7172: PPUSH
7173: CALL_OW 67
// DialogueOn ;
7177: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7181: LD_INT 22
7183: PUSH
7184: LD_INT 1
7186: PUSH
7187: EMPTY
7188: LIST
7189: LIST
7190: PUSH
7191: LD_INT 26
7193: PUSH
7194: LD_INT 1
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: PUSH
7201: LD_INT 2
7203: PUSH
7204: LD_INT 25
7206: PUSH
7207: LD_INT 1
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PUSH
7214: LD_INT 25
7216: PUSH
7217: LD_INT 2
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: PUSH
7224: LD_INT 25
7226: PUSH
7227: LD_INT 3
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: PUSH
7234: LD_INT 25
7236: PUSH
7237: LD_INT 4
7239: PUSH
7240: EMPTY
7241: LIST
7242: LIST
7243: PUSH
7244: LD_INT 25
7246: PUSH
7247: LD_INT 5
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: PUSH
7254: LD_INT 25
7256: PUSH
7257: LD_INT 8
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: LIST
7277: PPUSH
7278: CALL_OW 69
7282: PPUSH
7283: LD_STRING D3-Sol1-1
7285: PPUSH
7286: LD_STRING 
7288: PPUSH
7289: CALL 12137 0 3
// if KurtStatus then
7293: LD_EXP 19
7297: IFFALSE 7397
// begin Say ( Kurt , D3-Kurt-1 ) ;
7299: LD_EXP 17
7303: PPUSH
7304: LD_STRING D3-Kurt-1
7306: PPUSH
7307: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7311: LD_EXP 1
7315: PPUSH
7316: LD_STRING D3-JMM-1
7318: PPUSH
7319: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7323: LD_EXP 17
7327: PPUSH
7328: LD_STRING D3-Kurt-2
7330: PPUSH
7331: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7335: LD_EXP 1
7339: PPUSH
7340: LD_STRING D3-JMM-2
7342: PPUSH
7343: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7347: LD_EXP 17
7351: PPUSH
7352: LD_STRING D3-Kurt-4
7354: PPUSH
7355: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7359: LD_EXP 1
7363: PPUSH
7364: LD_STRING D3-JMM-4
7366: PPUSH
7367: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7371: LD_EXP 17
7375: PPUSH
7376: LD_STRING D3-Kurt-5
7378: PPUSH
7379: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7383: LD_EXP 17
7387: PPUSH
7388: LD_STRING D3-Kurt-5a
7390: PPUSH
7391: CALL_OW 88
// end else
7395: GO 7493
// begin Say ( Kurt , D3-Kurt-1 ) ;
7397: LD_EXP 17
7401: PPUSH
7402: LD_STRING D3-Kurt-1
7404: PPUSH
7405: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7409: LD_EXP 1
7413: PPUSH
7414: LD_STRING D3-JMM-1
7416: PPUSH
7417: CALL_OW 88
// Say ( Kurt , D3-Kurt-3 ) ;
7421: LD_EXP 17
7425: PPUSH
7426: LD_STRING D3-Kurt-3
7428: PPUSH
7429: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7433: LD_EXP 1
7437: PPUSH
7438: LD_STRING D3-JMM-3
7440: PPUSH
7441: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7445: LD_EXP 17
7449: PPUSH
7450: LD_STRING D3-Kurt-4
7452: PPUSH
7453: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7457: LD_EXP 1
7461: PPUSH
7462: LD_STRING D3-JMM-4
7464: PPUSH
7465: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7469: LD_EXP 17
7473: PPUSH
7474: LD_STRING D3-Kurt-5
7476: PPUSH
7477: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
7481: LD_EXP 17
7485: PPUSH
7486: LD_STRING D3-Kurt-5b
7488: PPUSH
7489: CALL_OW 88
// end ; if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
7493: LD_VAR 0 8
7497: PUSH
7498: LD_INT 120
7500: PUSH
7501: LD_INT 60
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: PUSH
7508: LD_EXP 19
7512: PUSH
7513: LD_INT 1
7515: PLUS
7516: ARRAY
7517: GREATEREQUAL
7518: PUSH
7519: LD_VAR 0 10
7523: PUSH
7524: LD_INT 120
7526: PUSH
7527: LD_INT 60
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: PUSH
7534: LD_EXP 19
7538: PUSH
7539: LD_INT 1
7541: PLUS
7542: ARRAY
7543: GREATEREQUAL
7544: AND
7545: IFFALSE 7597
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
7547: LD_ADDR_VAR 0 3
7551: PUSH
7552: LD_STRING Q2
7554: PUSH
7555: LD_STRING Q2K
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: PUSH
7562: LD_EXP 19
7566: PUSH
7567: LD_INT 1
7569: PLUS
7570: ARRAY
7571: PPUSH
7572: LD_INT 1
7574: PUSH
7575: LD_INT 2
7577: PUSH
7578: LD_INT 3
7580: PUSH
7581: LD_INT 4
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: PPUSH
7590: CALL_OW 98
7594: ST_TO_ADDR
7595: GO 7641
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 3 , 4 ] ) ;
7597: LD_ADDR_VAR 0 3
7601: PUSH
7602: LD_STRING Q2
7604: PUSH
7605: LD_STRING Q2K
7607: PUSH
7608: EMPTY
7609: LIST
7610: LIST
7611: PUSH
7612: LD_EXP 19
7616: PUSH
7617: LD_INT 1
7619: PLUS
7620: ARRAY
7621: PPUSH
7622: LD_INT 1
7624: PUSH
7625: LD_INT 3
7627: PUSH
7628: LD_INT 4
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: LIST
7635: PPUSH
7636: CALL_OW 98
7640: ST_TO_ADDR
// if dec1 = 1 then
7641: LD_VAR 0 3
7645: PUSH
7646: LD_INT 1
7648: EQUAL
7649: IFFALSE 7683
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7651: LD_EXP 1
7655: PPUSH
7656: LD_STRING D3Ka-JMM-1
7658: PPUSH
7659: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7663: LD_EXP 17
7667: PPUSH
7668: LD_STRING D3Ka-Kurt-1
7670: PPUSH
7671: CALL_OW 88
// warWithLegion = 1 ;
7675: LD_ADDR_EXP 23
7679: PUSH
7680: LD_INT 1
7682: ST_TO_ADDR
// end ; if dec1 = 2 then
7683: LD_VAR 0 3
7687: PUSH
7688: LD_INT 2
7690: EQUAL
7691: IFFALSE 7775
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7693: LD_EXP 1
7697: PPUSH
7698: LD_STRING D3Kb-JMM-1
7700: PPUSH
7701: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7705: LD_EXP 17
7709: PPUSH
7710: LD_STRING D3Kb-Kurt-1
7712: PPUSH
7713: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7717: LD_ADDR_VAR 0 11
7721: PUSH
7722: LD_INT 120
7724: PUSH
7725: LD_INT 60
7727: PUSH
7728: EMPTY
7729: LIST
7730: LIST
7731: PUSH
7732: LD_EXP 19
7736: PUSH
7737: LD_INT 1
7739: PLUS
7740: ARRAY
7741: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7742: LD_ADDR_VAR 0 12
7746: PUSH
7747: LD_INT 120
7749: PUSH
7750: LD_INT 60
7752: PUSH
7753: EMPTY
7754: LIST
7755: LIST
7756: PUSH
7757: LD_EXP 19
7761: PUSH
7762: LD_INT 1
7764: PLUS
7765: ARRAY
7766: ST_TO_ADDR
// payForNeutral := true ;
7767: LD_ADDR_VAR 0 13
7771: PUSH
7772: LD_INT 1
7774: ST_TO_ADDR
// end ; if dec1 = 3 then
7775: LD_VAR 0 3
7779: PUSH
7780: LD_INT 3
7782: EQUAL
7783: IFFALSE 8018
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7785: LD_EXP 1
7789: PPUSH
7790: LD_STRING D3Kc1-JMM-1
7792: PPUSH
7793: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7797: LD_EXP 17
7801: PPUSH
7802: LD_STRING D3Kc1-Kurt-1
7804: PPUSH
7805: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7809: LD_EXP 1
7813: PPUSH
7814: LD_STRING D3Kc1-JMM-2
7816: PPUSH
7817: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7821: LD_EXP 17
7825: PPUSH
7826: LD_STRING D3Kc1-Kurt-2
7828: PPUSH
7829: CALL_OW 88
// askSiberite = 1 ;
7833: LD_ADDR_EXP 25
7837: PUSH
7838: LD_INT 1
7840: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7841: LD_ADDR_VAR 0 4
7845: PUSH
7846: LD_STRING Q2b
7848: PPUSH
7849: LD_INT 1
7851: PUSH
7852: LD_INT 2
7854: PUSH
7855: LD_INT 3
7857: PUSH
7858: EMPTY
7859: LIST
7860: LIST
7861: LIST
7862: PPUSH
7863: CALL_OW 98
7867: ST_TO_ADDR
// if dec2 = 1 then
7868: LD_VAR 0 4
7872: PUSH
7873: LD_INT 1
7875: EQUAL
7876: IFFALSE 7910
// begin Say ( JMM , D4a-JMM-1 ) ;
7878: LD_EXP 1
7882: PPUSH
7883: LD_STRING D4a-JMM-1
7885: PPUSH
7886: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7890: LD_EXP 17
7894: PPUSH
7895: LD_STRING D4b-Kurt-1
7897: PPUSH
7898: CALL_OW 88
// warWithLegion = 1 ;
7902: LD_ADDR_EXP 23
7906: PUSH
7907: LD_INT 1
7909: ST_TO_ADDR
// end ; if dec2 = 2 then
7910: LD_VAR 0 4
7914: PUSH
7915: LD_INT 2
7917: EQUAL
7918: IFFALSE 7952
// begin Say ( JMM , D4b-JMM-1 ) ;
7920: LD_EXP 1
7924: PPUSH
7925: LD_STRING D4b-JMM-1
7927: PPUSH
7928: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7932: LD_EXP 17
7936: PPUSH
7937: LD_STRING D4b-Kurt-1
7939: PPUSH
7940: CALL_OW 88
// warWithLegion = 1 ;
7944: LD_ADDR_EXP 23
7948: PUSH
7949: LD_INT 1
7951: ST_TO_ADDR
// end ; if dec2 = 3 then
7952: LD_VAR 0 4
7956: PUSH
7957: LD_INT 3
7959: EQUAL
7960: IFFALSE 8018
// begin Say ( JMM , D4c-JMM-1 ) ;
7962: LD_EXP 1
7966: PPUSH
7967: LD_STRING D4c-JMM-1
7969: PPUSH
7970: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7974: LD_EXP 17
7978: PPUSH
7979: LD_STRING D4c-Kurt-1
7981: PPUSH
7982: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
7986: LD_EXP 1
7990: PPUSH
7991: LD_STRING D4c-JMM-2
7993: PPUSH
7994: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
7998: LD_EXP 17
8002: PPUSH
8003: LD_STRING D4c-Kurt-2
8005: PPUSH
8006: CALL_OW 88
// fakeInfo = 1 ;
8010: LD_ADDR_EXP 24
8014: PUSH
8015: LD_INT 1
8017: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
8018: LD_VAR 0 3
8022: PUSH
8023: LD_INT 4
8025: EQUAL
8026: IFFALSE 9088
// begin Say ( JMM , D3Kd-JMM-1 ) ;
8028: LD_EXP 1
8032: PPUSH
8033: LD_STRING D3Kd-JMM-1
8035: PPUSH
8036: CALL_OW 88
// if crates >= [ 200 , 120 ] [ KurtStatus + 1 ] and siberite >= [ 200 , 120 ] [ KurtStatus + 1 ] then
8040: LD_VAR 0 8
8044: PUSH
8045: LD_INT 200
8047: PUSH
8048: LD_INT 120
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: PUSH
8055: LD_EXP 19
8059: PUSH
8060: LD_INT 1
8062: PLUS
8063: ARRAY
8064: GREATEREQUAL
8065: PUSH
8066: LD_VAR 0 10
8070: PUSH
8071: LD_INT 200
8073: PUSH
8074: LD_INT 120
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: PUSH
8081: LD_EXP 19
8085: PUSH
8086: LD_INT 1
8088: PLUS
8089: ARRAY
8090: GREATEREQUAL
8091: AND
8092: IFFALSE 8144
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8094: LD_ADDR_VAR 0 4
8098: PUSH
8099: LD_STRING Q2a
8101: PUSH
8102: LD_STRING Q2aK
8104: PUSH
8105: EMPTY
8106: LIST
8107: LIST
8108: PUSH
8109: LD_EXP 19
8113: PUSH
8114: LD_INT 1
8116: PLUS
8117: ARRAY
8118: PPUSH
8119: LD_INT 1
8121: PUSH
8122: LD_INT 2
8124: PUSH
8125: LD_INT 3
8127: PUSH
8128: LD_INT 4
8130: PUSH
8131: EMPTY
8132: LIST
8133: LIST
8134: LIST
8135: LIST
8136: PPUSH
8137: CALL_OW 98
8141: ST_TO_ADDR
8142: GO 8308
// if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
8144: LD_VAR 0 8
8148: PUSH
8149: LD_INT 120
8151: PUSH
8152: LD_INT 60
8154: PUSH
8155: EMPTY
8156: LIST
8157: LIST
8158: PUSH
8159: LD_EXP 19
8163: PUSH
8164: LD_INT 1
8166: PLUS
8167: ARRAY
8168: GREATEREQUAL
8169: PUSH
8170: LD_VAR 0 10
8174: PUSH
8175: LD_INT 120
8177: PUSH
8178: LD_INT 60
8180: PUSH
8181: EMPTY
8182: LIST
8183: LIST
8184: PUSH
8185: LD_EXP 19
8189: PUSH
8190: LD_INT 1
8192: PLUS
8193: ARRAY
8194: GREATEREQUAL
8195: AND
8196: IFFALSE 8244
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 4 ] ) else
8198: LD_ADDR_VAR 0 4
8202: PUSH
8203: LD_STRING Q2a
8205: PUSH
8206: LD_STRING Q2aK
8208: PUSH
8209: EMPTY
8210: LIST
8211: LIST
8212: PUSH
8213: LD_EXP 19
8217: PUSH
8218: LD_INT 1
8220: PLUS
8221: ARRAY
8222: PPUSH
8223: LD_INT 1
8225: PUSH
8226: LD_INT 2
8228: PUSH
8229: LD_INT 4
8231: PUSH
8232: EMPTY
8233: LIST
8234: LIST
8235: LIST
8236: PPUSH
8237: CALL_OW 98
8241: ST_TO_ADDR
8242: GO 8308
// begin Query ( [ Q2d , Q2dK ] [ KurtStatus + 1 ] ) ;
8244: LD_STRING Q2d
8246: PUSH
8247: LD_STRING Q2dK
8249: PUSH
8250: EMPTY
8251: LIST
8252: LIST
8253: PUSH
8254: LD_EXP 19
8258: PUSH
8259: LD_INT 1
8261: PLUS
8262: ARRAY
8263: PPUSH
8264: CALL_OW 97
// dec2 := 0 ;
8268: LD_ADDR_VAR 0 4
8272: PUSH
8273: LD_INT 0
8275: ST_TO_ADDR
// Say ( JMM , D3Kc1-JMM-1 ) ;
8276: LD_EXP 1
8280: PPUSH
8281: LD_STRING D3Kc1-JMM-1
8283: PPUSH
8284: CALL_OW 88
// Say ( Kurt , D3Kc2-Kurt-1 ) ;
8288: LD_EXP 17
8292: PPUSH
8293: LD_STRING D3Kc2-Kurt-1
8295: PPUSH
8296: CALL_OW 88
// warWithLegion := 1 ;
8300: LD_ADDR_EXP 23
8304: PUSH
8305: LD_INT 1
8307: ST_TO_ADDR
// end ; if dec2 = 1 then
8308: LD_VAR 0 4
8312: PUSH
8313: LD_INT 1
8315: EQUAL
8316: IFFALSE 8350
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8318: LD_EXP 1
8322: PPUSH
8323: LD_STRING D5Ka-JMM-1
8325: PPUSH
8326: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
8330: LD_EXP 17
8334: PPUSH
8335: LD_STRING D5Ka-Kurt-1
8337: PPUSH
8338: CALL_OW 88
// warWithLegion = 1 ;
8342: LD_ADDR_EXP 23
8346: PUSH
8347: LD_INT 1
8349: ST_TO_ADDR
// end ; if dec2 = 2 then
8350: LD_VAR 0 4
8354: PUSH
8355: LD_INT 2
8357: EQUAL
8358: IFFALSE 8442
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8360: LD_EXP 1
8364: PPUSH
8365: LD_STRING D3Kb-JMM-1
8367: PPUSH
8368: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8372: LD_EXP 17
8376: PPUSH
8377: LD_STRING D3Kb-Kurt-1
8379: PPUSH
8380: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8384: LD_ADDR_VAR 0 11
8388: PUSH
8389: LD_INT 120
8391: PUSH
8392: LD_INT 60
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: PUSH
8399: LD_EXP 19
8403: PUSH
8404: LD_INT 1
8406: PLUS
8407: ARRAY
8408: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8409: LD_ADDR_VAR 0 12
8413: PUSH
8414: LD_INT 120
8416: PUSH
8417: LD_INT 60
8419: PUSH
8420: EMPTY
8421: LIST
8422: LIST
8423: PUSH
8424: LD_EXP 19
8428: PUSH
8429: LD_INT 1
8431: PLUS
8432: ARRAY
8433: ST_TO_ADDR
// payForNeutral := true ;
8434: LD_ADDR_VAR 0 13
8438: PUSH
8439: LD_INT 1
8441: ST_TO_ADDR
// end ; if dec2 = 3 then
8442: LD_VAR 0 4
8446: PUSH
8447: LD_INT 3
8449: EQUAL
8450: IFFALSE 8534
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8452: LD_EXP 1
8456: PPUSH
8457: LD_STRING D3Ke-JMM-1
8459: PPUSH
8460: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
8464: LD_EXP 17
8468: PPUSH
8469: LD_STRING D3Ke-Kurt-1
8471: PPUSH
8472: CALL_OW 88
// cr := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8476: LD_ADDR_VAR 0 11
8480: PUSH
8481: LD_INT 200
8483: PUSH
8484: LD_INT 120
8486: PUSH
8487: EMPTY
8488: LIST
8489: LIST
8490: PUSH
8491: LD_EXP 19
8495: PUSH
8496: LD_INT 1
8498: PLUS
8499: ARRAY
8500: ST_TO_ADDR
// sb := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8501: LD_ADDR_VAR 0 12
8505: PUSH
8506: LD_INT 200
8508: PUSH
8509: LD_INT 120
8511: PUSH
8512: EMPTY
8513: LIST
8514: LIST
8515: PUSH
8516: LD_EXP 19
8520: PUSH
8521: LD_INT 1
8523: PLUS
8524: ARRAY
8525: ST_TO_ADDR
// payForHelp := true ;
8526: LD_ADDR_VAR 0 14
8530: PUSH
8531: LD_INT 1
8533: ST_TO_ADDR
// end ; if dec2 = 4 then
8534: LD_VAR 0 4
8538: PUSH
8539: LD_INT 4
8541: EQUAL
8542: IFFALSE 8777
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8544: LD_EXP 1
8548: PPUSH
8549: LD_STRING D3Kc1-JMM-1
8551: PPUSH
8552: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8556: LD_EXP 17
8560: PPUSH
8561: LD_STRING D3Kc1-Kurt-1
8563: PPUSH
8564: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8568: LD_EXP 1
8572: PPUSH
8573: LD_STRING D3Kc1-JMM-2
8575: PPUSH
8576: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8580: LD_EXP 17
8584: PPUSH
8585: LD_STRING D3Kc1-Kurt-2
8587: PPUSH
8588: CALL_OW 88
// askSiberite = 1 ;
8592: LD_ADDR_EXP 25
8596: PUSH
8597: LD_INT 1
8599: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8600: LD_ADDR_VAR 0 4
8604: PUSH
8605: LD_STRING Q2b
8607: PPUSH
8608: LD_INT 1
8610: PUSH
8611: LD_INT 2
8613: PUSH
8614: LD_INT 3
8616: PUSH
8617: EMPTY
8618: LIST
8619: LIST
8620: LIST
8621: PPUSH
8622: CALL_OW 98
8626: ST_TO_ADDR
// if dec2 = 1 then
8627: LD_VAR 0 4
8631: PUSH
8632: LD_INT 1
8634: EQUAL
8635: IFFALSE 8669
// begin Say ( JMM , D4a-JMM-1 ) ;
8637: LD_EXP 1
8641: PPUSH
8642: LD_STRING D4a-JMM-1
8644: PPUSH
8645: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8649: LD_EXP 17
8653: PPUSH
8654: LD_STRING D4b-Kurt-1
8656: PPUSH
8657: CALL_OW 88
// warWithLegion = 1 ;
8661: LD_ADDR_EXP 23
8665: PUSH
8666: LD_INT 1
8668: ST_TO_ADDR
// end ; if dec2 = 2 then
8669: LD_VAR 0 4
8673: PUSH
8674: LD_INT 2
8676: EQUAL
8677: IFFALSE 8711
// begin Say ( JMM , D4b-JMM-1 ) ;
8679: LD_EXP 1
8683: PPUSH
8684: LD_STRING D4b-JMM-1
8686: PPUSH
8687: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8691: LD_EXP 17
8695: PPUSH
8696: LD_STRING D4b-Kurt-1
8698: PPUSH
8699: CALL_OW 88
// warWithLegion = 1 ;
8703: LD_ADDR_EXP 23
8707: PUSH
8708: LD_INT 1
8710: ST_TO_ADDR
// end ; if dec2 = 3 then
8711: LD_VAR 0 4
8715: PUSH
8716: LD_INT 3
8718: EQUAL
8719: IFFALSE 8777
// begin Say ( JMM , D4c-JMM-1 ) ;
8721: LD_EXP 1
8725: PPUSH
8726: LD_STRING D4c-JMM-1
8728: PPUSH
8729: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8733: LD_EXP 17
8737: PPUSH
8738: LD_STRING D4c-Kurt-1
8740: PPUSH
8741: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8745: LD_EXP 1
8749: PPUSH
8750: LD_STRING D4c-JMM-2
8752: PPUSH
8753: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8757: LD_EXP 17
8761: PPUSH
8762: LD_STRING D4c-Kurt-2
8764: PPUSH
8765: CALL_OW 88
// fakeInfo = 1 ;
8769: LD_ADDR_EXP 24
8773: PUSH
8774: LD_INT 1
8776: ST_TO_ADDR
// end ; end ; if payForNeutral or payForHelp then
8777: LD_VAR 0 13
8781: PUSH
8782: LD_VAR 0 14
8786: OR
8787: IFFALSE 9088
// begin for i in tmp do
8789: LD_ADDR_VAR 0 2
8793: PUSH
8794: LD_VAR 0 5
8798: PUSH
8799: FOR_IN
8800: IFFALSE 9086
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
8802: LD_ADDR_VAR 0 6
8806: PUSH
8807: LD_VAR 0 2
8811: PPUSH
8812: CALL_OW 274
8816: PPUSH
8817: LD_INT 1
8819: PPUSH
8820: CALL_OW 275
8824: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
8825: LD_ADDR_VAR 0 7
8829: PUSH
8830: LD_VAR 0 2
8834: PPUSH
8835: CALL_OW 274
8839: PPUSH
8840: LD_INT 3
8842: PPUSH
8843: CALL_OW 275
8847: ST_TO_ADDR
// if cr then
8848: LD_VAR 0 11
8852: IFFALSE 8966
// begin if tmp2 and tmp2 < cr then
8854: LD_VAR 0 6
8858: PUSH
8859: LD_VAR 0 6
8863: PUSH
8864: LD_VAR 0 11
8868: LESS
8869: AND
8870: IFFALSE 8918
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
8872: LD_VAR 0 2
8876: PPUSH
8877: CALL_OW 274
8881: PPUSH
8882: LD_INT 1
8884: PPUSH
8885: LD_VAR 0 11
8889: PUSH
8890: LD_VAR 0 6
8894: MINUS
8895: PPUSH
8896: CALL_OW 277
// cr := cr - tmp2 ;
8900: LD_ADDR_VAR 0 11
8904: PUSH
8905: LD_VAR 0 11
8909: PUSH
8910: LD_VAR 0 6
8914: MINUS
8915: ST_TO_ADDR
// end else
8916: GO 8966
// if tmp2 > cr then
8918: LD_VAR 0 6
8922: PUSH
8923: LD_VAR 0 11
8927: GREATER
8928: IFFALSE 8966
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
8930: LD_VAR 0 2
8934: PPUSH
8935: CALL_OW 274
8939: PPUSH
8940: LD_INT 1
8942: PPUSH
8943: LD_VAR 0 6
8947: PUSH
8948: LD_VAR 0 11
8952: MINUS
8953: PPUSH
8954: CALL_OW 277
// cr := 0 ;
8958: LD_ADDR_VAR 0 11
8962: PUSH
8963: LD_INT 0
8965: ST_TO_ADDR
// end ; end ; if sb then
8966: LD_VAR 0 12
8970: IFFALSE 9084
// begin if tmp3 and tmp3 < sb then
8972: LD_VAR 0 7
8976: PUSH
8977: LD_VAR 0 7
8981: PUSH
8982: LD_VAR 0 12
8986: LESS
8987: AND
8988: IFFALSE 9036
// begin SetResourceType ( GetBase ( i ) , 3 , sb - tmp3 ) ;
8990: LD_VAR 0 2
8994: PPUSH
8995: CALL_OW 274
8999: PPUSH
9000: LD_INT 3
9002: PPUSH
9003: LD_VAR 0 12
9007: PUSH
9008: LD_VAR 0 7
9012: MINUS
9013: PPUSH
9014: CALL_OW 277
// sb := sb - tmp3 ;
9018: LD_ADDR_VAR 0 12
9022: PUSH
9023: LD_VAR 0 12
9027: PUSH
9028: LD_VAR 0 7
9032: MINUS
9033: ST_TO_ADDR
// end else
9034: GO 9084
// if tmp3 > sb then
9036: LD_VAR 0 7
9040: PUSH
9041: LD_VAR 0 12
9045: GREATER
9046: IFFALSE 9084
// begin SetResourceType ( GetBase ( i ) , 3 , tmp3 - sb ) ;
9048: LD_VAR 0 2
9052: PPUSH
9053: CALL_OW 274
9057: PPUSH
9058: LD_INT 3
9060: PPUSH
9061: LD_VAR 0 7
9065: PUSH
9066: LD_VAR 0 12
9070: MINUS
9071: PPUSH
9072: CALL_OW 277
// sb := 0 ;
9076: LD_ADDR_VAR 0 12
9080: PUSH
9081: LD_INT 0
9083: ST_TO_ADDR
// end ; end ; end ;
9084: GO 8799
9086: POP
9087: POP
// end ; end ; DialogueOff ;
9088: CALL_OW 7
// RemoveSeeing ( 167 , 121 , 1 ) ;
9092: LD_INT 167
9094: PPUSH
9095: LD_INT 121
9097: PPUSH
9098: LD_INT 1
9100: PPUSH
9101: CALL_OW 331
// ComEnterUnit ( Kurt , KurtVeh ) ;
9105: LD_EXP 17
9109: PPUSH
9110: LD_EXP 18
9114: PPUSH
9115: CALL_OW 120
// wait ( 0 0$1 ) ;
9119: LD_INT 35
9121: PPUSH
9122: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9126: LD_EXP 18
9130: PPUSH
9131: LD_INT 4
9133: PPUSH
9134: CALL_OW 113
// wait ( 0 0$3 ) ;
9138: LD_INT 105
9140: PPUSH
9141: CALL_OW 67
// RemoveUnit ( Kurt ) ;
9145: LD_EXP 17
9149: PPUSH
9150: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9154: LD_EXP 18
9158: PPUSH
9159: CALL_OW 64
// wait ( 0 0$3 ) ;
9163: LD_INT 105
9165: PPUSH
9166: CALL_OW 67
// if payForHelp then
9170: LD_VAR 0 14
9174: IFFALSE 9232
// begin HiddenCamera ( 36 , 57 , 1 ) ;
9176: LD_INT 36
9178: PPUSH
9179: LD_INT 57
9181: PPUSH
9182: LD_INT 1
9184: PPUSH
9185: CALL_OW 244
// HiddenCamera ( 51 , 63 , 1 ) ;
9189: LD_INT 51
9191: PPUSH
9192: LD_INT 63
9194: PPUSH
9195: LD_INT 1
9197: PPUSH
9198: CALL_OW 244
// HiddenCamera ( 93 , 65 , 1 ) ;
9202: LD_INT 93
9204: PPUSH
9205: LD_INT 65
9207: PPUSH
9208: LD_INT 1
9210: PPUSH
9211: CALL_OW 244
// HiddenCamera ( 42 , 12 , 1 ) ;
9215: LD_INT 42
9217: PPUSH
9218: LD_INT 12
9220: PPUSH
9221: LD_INT 1
9223: PPUSH
9224: CALL_OW 244
// PrepareLegionForPlayer ;
9228: CALL 4754 0 0
// end ; end ;
9232: LD_VAR 0 1
9236: RET
// every 0 0$10 trigger warWithLegion = 1 do
9237: LD_EXP 23
9241: PUSH
9242: LD_INT 1
9244: EQUAL
9245: IFFALSE 9261
9247: GO 9249
9249: DISABLE
// begin wait ( 0 0$30 ) ;
9250: LD_INT 1050
9252: PPUSH
9253: CALL_OW 67
// PrepareAttackLegion ;
9257: CALL 5395 0 0
// end ;
9261: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do var i ;
9262: LD_INT 120
9264: PUSH
9265: LD_INT 17
9267: PUSH
9268: EMPTY
9269: LIST
9270: LIST
9271: PUSH
9272: LD_INT 52
9274: PUSH
9275: EMPTY
9276: LIST
9277: PUSH
9278: EMPTY
9279: LIST
9280: LIST
9281: PPUSH
9282: CALL_OW 69
9286: IFFALSE 9431
9288: GO 9290
9290: DISABLE
9291: LD_INT 0
9293: PPUSH
// begin enable ;
9294: ENABLE
// for i in FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do
9295: LD_ADDR_VAR 0 1
9299: PUSH
9300: LD_INT 120
9302: PUSH
9303: LD_INT 17
9305: PUSH
9306: EMPTY
9307: LIST
9308: LIST
9309: PUSH
9310: LD_INT 52
9312: PUSH
9313: EMPTY
9314: LIST
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: PPUSH
9320: CALL_OW 69
9324: PUSH
9325: FOR_IN
9326: IFFALSE 9429
// begin if GetMultiCargo ( i ) [ 4 ] = 0 and GetSide ( i ) = 1 then
9328: LD_VAR 0 1
9332: PPUSH
9333: CALL 78421 0 1
9337: PUSH
9338: LD_INT 4
9340: ARRAY
9341: PUSH
9342: LD_INT 0
9344: EQUAL
9345: PUSH
9346: LD_VAR 0 1
9350: PPUSH
9351: CALL_OW 255
9355: PUSH
9356: LD_INT 1
9358: EQUAL
9359: AND
9360: IFFALSE 9374
// SetSide ( i , 4 ) ;
9362: LD_VAR 0 1
9366: PPUSH
9367: LD_INT 4
9369: PPUSH
9370: CALL_OW 235
// if GetSide ( i ) = 4 then
9374: LD_VAR 0 1
9378: PPUSH
9379: CALL_OW 255
9383: PUSH
9384: LD_INT 4
9386: EQUAL
9387: IFFALSE 9427
// if not IsInArea ( i , PlayerSpawn ) then
9389: LD_VAR 0 1
9393: PPUSH
9394: LD_INT 4
9396: PPUSH
9397: CALL_OW 308
9401: NOT
9402: IFFALSE 9418
// ComMoveToArea ( i , PlayerSpawn ) else
9404: LD_VAR 0 1
9408: PPUSH
9409: LD_INT 4
9411: PPUSH
9412: CALL_OW 113
9416: GO 9427
// RemoveUnit ( i ) ;
9418: LD_VAR 0 1
9422: PPUSH
9423: CALL_OW 64
// end ;
9427: GO 9325
9429: POP
9430: POP
// end ;
9431: PPOPN 1
9433: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
9434: LD_EXP 20
9438: PUSH
9439: LD_INT 1
9441: EQUAL
9442: IFFALSE 9881
9444: GO 9446
9446: DISABLE
9447: LD_INT 0
9449: PPUSH
9450: PPUSH
9451: PPUSH
// begin enable ;
9452: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9453: LD_ADDR_VAR 0 2
9457: PUSH
9458: LD_INT 12
9460: PPUSH
9461: LD_INT 22
9463: PUSH
9464: LD_INT 3
9466: PUSH
9467: EMPTY
9468: LIST
9469: LIST
9470: PUSH
9471: LD_INT 21
9473: PUSH
9474: LD_INT 2
9476: PUSH
9477: EMPTY
9478: LIST
9479: LIST
9480: PUSH
9481: EMPTY
9482: LIST
9483: LIST
9484: PPUSH
9485: CALL_OW 70
9489: ST_TO_ADDR
// for i in enemyVehs do
9490: LD_ADDR_VAR 0 1
9494: PUSH
9495: LD_VAR 0 2
9499: PUSH
9500: FOR_IN
9501: IFFALSE 9879
// begin if See ( 1 , i ) then
9503: LD_INT 1
9505: PPUSH
9506: LD_VAR 0 1
9510: PPUSH
9511: CALL_OW 292
9515: IFFALSE 9877
// begin disable ;
9517: DISABLE
// DialogueOn ;
9518: CALL_OW 6
// CenterNowOnUnits ( i ) ;
9522: LD_VAR 0 1
9526: PPUSH
9527: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
9531: LD_INT 22
9533: PUSH
9534: LD_INT 1
9536: PUSH
9537: EMPTY
9538: LIST
9539: LIST
9540: PUSH
9541: LD_INT 26
9543: PUSH
9544: LD_INT 1
9546: PUSH
9547: EMPTY
9548: LIST
9549: LIST
9550: PUSH
9551: LD_INT 2
9553: PUSH
9554: LD_INT 25
9556: PUSH
9557: LD_INT 1
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: PUSH
9564: LD_INT 25
9566: PUSH
9567: LD_INT 2
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: PUSH
9574: LD_INT 25
9576: PUSH
9577: LD_INT 3
9579: PUSH
9580: EMPTY
9581: LIST
9582: LIST
9583: PUSH
9584: LD_INT 25
9586: PUSH
9587: LD_INT 4
9589: PUSH
9590: EMPTY
9591: LIST
9592: LIST
9593: PUSH
9594: LD_INT 25
9596: PUSH
9597: LD_INT 5
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: PUSH
9604: LD_INT 25
9606: PUSH
9607: LD_INT 8
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: LIST
9627: PPUSH
9628: CALL_OW 69
9632: PPUSH
9633: LD_STRING DT1-Sol1-1
9635: PPUSH
9636: LD_STRING DT1-FSol1-1
9638: PPUSH
9639: CALL 12137 0 3
// dec = ShowQuery2 ;
9643: LD_ADDR_VAR 0 3
9647: PUSH
9648: CALL 12621 0 0
9652: ST_TO_ADDR
// if dec = 1 then
9653: LD_VAR 0 3
9657: PUSH
9658: LD_INT 1
9660: EQUAL
9661: IFFALSE 9767
// begin Say ( JMM , D2-JMM-1 ) ;
9663: LD_EXP 1
9667: PPUSH
9668: LD_STRING D2-JMM-1
9670: PPUSH
9671: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9675: LD_EXP 15
9679: PPUSH
9680: LD_STRING D2-Pow-1
9682: PPUSH
9683: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
9687: LD_EXP 1
9691: PPUSH
9692: LD_STRING D2a-JMM-1
9694: PPUSH
9695: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
9699: LD_EXP 15
9703: PPUSH
9704: LD_STRING D2a-Pow-1
9706: PPUSH
9707: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
9711: LD_EXP 1
9715: PPUSH
9716: LD_STRING D2a-JMM-2
9718: PPUSH
9719: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
9723: LD_EXP 15
9727: PPUSH
9728: LD_STRING D2a-Pow-2
9730: PPUSH
9731: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
9735: LD_EXP 1
9739: PPUSH
9740: LD_STRING D2a-JMM-3
9742: PPUSH
9743: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
9747: LD_EXP 15
9751: PPUSH
9752: LD_STRING D2a-Pow-3
9754: PPUSH
9755: CALL_OW 94
// secondPass = 2 ;
9759: LD_ADDR_EXP 20
9763: PUSH
9764: LD_INT 2
9766: ST_TO_ADDR
// end ; if dec = 2 then
9767: LD_VAR 0 3
9771: PUSH
9772: LD_INT 2
9774: EQUAL
9775: IFFALSE 9869
// begin Say ( JMM , D2-JMM-1 ) ;
9777: LD_EXP 1
9781: PPUSH
9782: LD_STRING D2-JMM-1
9784: PPUSH
9785: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9789: LD_EXP 15
9793: PPUSH
9794: LD_STRING D2-Pow-1
9796: PPUSH
9797: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
9801: LD_EXP 1
9805: PPUSH
9806: LD_STRING D2b-JMM-1
9808: PPUSH
9809: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
9813: LD_EXP 15
9817: PPUSH
9818: LD_STRING D2b-Pow-1
9820: PPUSH
9821: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
9825: LD_EXP 1
9829: PPUSH
9830: LD_STRING D2c-JMM-1
9832: PPUSH
9833: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
9837: LD_EXP 15
9841: PPUSH
9842: LD_STRING D2c-Pow-1
9844: PPUSH
9845: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
9849: LD_EXP 1
9853: PPUSH
9854: LD_STRING D2c-JMM-2
9856: PPUSH
9857: CALL_OW 88
// secondPass = 2 ;
9861: LD_ADDR_EXP 20
9865: PUSH
9866: LD_INT 2
9868: ST_TO_ADDR
// end ; DialogueOff ;
9869: CALL_OW 7
// exit ;
9873: POP
9874: POP
9875: GO 9881
// end ; end ;
9877: GO 9500
9879: POP
9880: POP
// end ;
9881: PPOPN 3
9883: END
// every 0 0$1 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) do var vehicles ;
9884: LD_EXP 21
9888: PUSH
9889: LD_INT 1
9891: EQUAL
9892: PUSH
9893: LD_INT 11
9895: PPUSH
9896: LD_INT 22
9898: PUSH
9899: LD_INT 3
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: PPUSH
9906: CALL_OW 70
9910: AND
9911: IFFALSE 10392
9913: GO 9915
9915: DISABLE
9916: LD_INT 0
9918: PPUSH
// begin vehicles := FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
9919: LD_ADDR_VAR 0 1
9923: PUSH
9924: LD_INT 11
9926: PPUSH
9927: LD_INT 22
9929: PUSH
9930: LD_INT 3
9932: PUSH
9933: EMPTY
9934: LIST
9935: LIST
9936: PPUSH
9937: CALL_OW 70
9941: ST_TO_ADDR
// if not vehicles then
9942: LD_VAR 0 1
9946: NOT
9947: IFFALSE 9951
// exit ;
9949: GO 10392
// repeat wait ( 0 0$1 ) ;
9951: LD_INT 35
9953: PPUSH
9954: CALL_OW 67
// until UnitFilter ( vehicles , [ f_see , 1 ] ) ;
9958: LD_VAR 0 1
9962: PPUSH
9963: LD_INT 101
9965: PUSH
9966: LD_INT 1
9968: PUSH
9969: EMPTY
9970: LIST
9971: LIST
9972: PPUSH
9973: CALL_OW 72
9977: IFFALSE 9951
// CenterNowOnUnits ( UnitFilter ( vehicles , [ f_see , 1 ] ) [ 1 ] ) ;
9979: LD_VAR 0 1
9983: PPUSH
9984: LD_INT 101
9986: PUSH
9987: LD_INT 1
9989: PUSH
9990: EMPTY
9991: LIST
9992: LIST
9993: PPUSH
9994: CALL_OW 72
9998: PUSH
9999: LD_INT 1
10001: ARRAY
10002: PPUSH
10003: CALL_OW 87
// DialogueOn ;
10007: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10011: LD_INT 22
10013: PUSH
10014: LD_INT 1
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: PUSH
10021: LD_INT 26
10023: PUSH
10024: LD_INT 1
10026: PUSH
10027: EMPTY
10028: LIST
10029: LIST
10030: PUSH
10031: LD_INT 23
10033: PUSH
10034: LD_INT 1
10036: PUSH
10037: EMPTY
10038: LIST
10039: LIST
10040: PUSH
10041: LD_INT 2
10043: PUSH
10044: LD_INT 25
10046: PUSH
10047: LD_INT 1
10049: PUSH
10050: EMPTY
10051: LIST
10052: LIST
10053: PUSH
10054: LD_INT 25
10056: PUSH
10057: LD_INT 2
10059: PUSH
10060: EMPTY
10061: LIST
10062: LIST
10063: PUSH
10064: LD_INT 25
10066: PUSH
10067: LD_INT 3
10069: PUSH
10070: EMPTY
10071: LIST
10072: LIST
10073: PUSH
10074: LD_INT 25
10076: PUSH
10077: LD_INT 4
10079: PUSH
10080: EMPTY
10081: LIST
10082: LIST
10083: PUSH
10084: LD_INT 25
10086: PUSH
10087: LD_INT 5
10089: PUSH
10090: EMPTY
10091: LIST
10092: LIST
10093: PUSH
10094: LD_INT 25
10096: PUSH
10097: LD_INT 8
10099: PUSH
10100: EMPTY
10101: LIST
10102: LIST
10103: PUSH
10104: EMPTY
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: PUSH
10113: EMPTY
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: PPUSH
10119: CALL_OW 69
10123: PPUSH
10124: LD_STRING DT1-Sol1-1
10126: PPUSH
10127: LD_STRING DT1-FSol1-1
10129: PPUSH
10130: CALL 12137 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10134: LD_EXP 1
10138: PPUSH
10139: LD_STRING DT1-JMM-1
10141: PPUSH
10142: CALL_OW 88
// DialogueOff ;
10146: CALL_OW 7
// repeat wait ( 0 0$05 ) ;
10150: LD_INT 175
10152: PPUSH
10153: CALL_OW 67
// until FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter > 2 ;
10157: LD_INT 11
10159: PPUSH
10160: LD_INT 22
10162: PUSH
10163: LD_INT 3
10165: PUSH
10166: EMPTY
10167: LIST
10168: LIST
10169: PUSH
10170: LD_INT 50
10172: PUSH
10173: EMPTY
10174: LIST
10175: PUSH
10176: LD_INT 2
10178: PUSH
10179: LD_INT 21
10181: PUSH
10182: LD_INT 2
10184: PUSH
10185: EMPTY
10186: LIST
10187: LIST
10188: PUSH
10189: LD_INT 21
10191: PUSH
10192: LD_INT 1
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: PUSH
10199: EMPTY
10200: LIST
10201: LIST
10202: LIST
10203: PUSH
10204: EMPTY
10205: LIST
10206: LIST
10207: LIST
10208: PPUSH
10209: CALL_OW 70
10213: PUSH
10214: LD_INT 0
10216: EQUAL
10217: PUSH
10218: LD_EXP 22
10222: PUSH
10223: LD_INT 2
10225: GREATER
10226: AND
10227: IFFALSE 10150
// DialogueOn ;
10229: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
10233: LD_EXP 1
10237: PPUSH
10238: LD_STRING DT1a-JMM-1
10240: PPUSH
10241: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
10245: LD_INT 22
10247: PUSH
10248: LD_INT 1
10250: PUSH
10251: EMPTY
10252: LIST
10253: LIST
10254: PUSH
10255: LD_INT 26
10257: PUSH
10258: LD_INT 1
10260: PUSH
10261: EMPTY
10262: LIST
10263: LIST
10264: PUSH
10265: LD_INT 23
10267: PUSH
10268: LD_INT 1
10270: PUSH
10271: EMPTY
10272: LIST
10273: LIST
10274: PUSH
10275: LD_INT 2
10277: PUSH
10278: LD_INT 25
10280: PUSH
10281: LD_INT 1
10283: PUSH
10284: EMPTY
10285: LIST
10286: LIST
10287: PUSH
10288: LD_INT 25
10290: PUSH
10291: LD_INT 2
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PUSH
10298: LD_INT 25
10300: PUSH
10301: LD_INT 3
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: PUSH
10308: LD_INT 25
10310: PUSH
10311: LD_INT 4
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: PUSH
10318: LD_INT 25
10320: PUSH
10321: LD_INT 5
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: PUSH
10328: LD_INT 25
10330: PUSH
10331: LD_INT 8
10333: PUSH
10334: EMPTY
10335: LIST
10336: LIST
10337: PUSH
10338: EMPTY
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: PPUSH
10353: CALL_OW 69
10357: PPUSH
10358: LD_STRING DT1a-Sol1-1
10360: PPUSH
10361: LD_STRING DT1a-FSol1-1
10363: PPUSH
10364: CALL 12137 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
10368: LD_EXP 1
10372: PPUSH
10373: LD_STRING DT1a-JMM-2
10375: PPUSH
10376: CALL_OW 88
// DialogueOff ;
10380: CALL_OW 7
// vehicleTeleported := 2 ;
10384: LD_ADDR_EXP 21
10388: PUSH
10389: LD_INT 2
10391: ST_TO_ADDR
// end ;
10392: PPOPN 1
10394: END
// every 0 0$2 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] ] ) do var i , vehicles , speaker ;
10395: LD_EXP 21
10399: PUSH
10400: LD_INT 3
10402: EQUAL
10403: PUSH
10404: LD_INT 11
10406: PPUSH
10407: LD_INT 22
10409: PUSH
10410: LD_INT 3
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: PUSH
10417: LD_INT 101
10419: PUSH
10420: LD_INT 1
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PPUSH
10431: CALL_OW 70
10435: AND
10436: IFFALSE 10721
10438: GO 10440
10440: DISABLE
10441: LD_INT 0
10443: PPUSH
10444: PPUSH
10445: PPUSH
// begin wait ( 0 0$0.3 ) ;
10446: LD_INT 10
10448: PPUSH
10449: CALL_OW 67
// DialogueOn ;
10453: CALL_OW 6
// speaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
10457: LD_ADDR_VAR 0 3
10461: PUSH
10462: LD_INT 22
10464: PUSH
10465: LD_INT 1
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: PUSH
10472: LD_INT 23
10474: PUSH
10475: LD_INT 1
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: LD_INT 26
10484: PUSH
10485: LD_INT 1
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: PUSH
10492: LD_INT 2
10494: PUSH
10495: LD_INT 25
10497: PUSH
10498: LD_INT 1
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: PUSH
10505: LD_INT 25
10507: PUSH
10508: LD_INT 2
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: PUSH
10515: LD_INT 25
10517: PUSH
10518: LD_INT 3
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: PUSH
10525: LD_INT 25
10527: PUSH
10528: LD_INT 4
10530: PUSH
10531: EMPTY
10532: LIST
10533: LIST
10534: PUSH
10535: LD_INT 25
10537: PUSH
10538: LD_INT 5
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: PUSH
10545: LD_INT 25
10547: PUSH
10548: LD_INT 8
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: PPUSH
10570: CALL_OW 69
10574: PPUSH
10575: LD_STRING DT2-Sol1-1
10577: PPUSH
10578: LD_STRING DT2-FSol1-1
10580: PPUSH
10581: CALL 12137 0 3
10585: ST_TO_ADDR
// DialogueOff ;
10586: CALL_OW 7
// repeat wait ( 0 0$5 ) ;
10590: LD_INT 175
10592: PPUSH
10593: CALL_OW 67
// until not FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] ] ) ;
10597: LD_INT 11
10599: PPUSH
10600: LD_INT 22
10602: PUSH
10603: LD_INT 3
10605: PUSH
10606: EMPTY
10607: LIST
10608: LIST
10609: PUSH
10610: LD_INT 50
10612: PUSH
10613: EMPTY
10614: LIST
10615: PUSH
10616: EMPTY
10617: LIST
10618: LIST
10619: PPUSH
10620: CALL_OW 70
10624: NOT
10625: IFFALSE 10590
// wait ( 0 0$2 ) ;
10627: LD_INT 70
10629: PPUSH
10630: CALL_OW 67
// vehicleTeleported := 4 ;
10634: LD_ADDR_EXP 21
10638: PUSH
10639: LD_INT 4
10641: ST_TO_ADDR
// DialogueOn ;
10642: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
10646: LD_EXP 1
10650: PPUSH
10651: LD_STRING DT2a-JMM-1
10653: PPUSH
10654: CALL_OW 88
// if speaker then
10658: LD_VAR 0 3
10662: IFFALSE 10705
// if GetSex ( speaker ) = 1 then
10664: LD_VAR 0 3
10668: PPUSH
10669: CALL_OW 258
10673: PUSH
10674: LD_INT 1
10676: EQUAL
10677: IFFALSE 10693
// Say ( speaker , DT2a-Sol1-1 ) else
10679: LD_VAR 0 3
10683: PPUSH
10684: LD_STRING DT2a-Sol1-1
10686: PPUSH
10687: CALL_OW 88
10691: GO 10705
// Say ( speaker , DT2a-FSol1-1 ) ;
10693: LD_VAR 0 3
10697: PPUSH
10698: LD_STRING DT2a-FSol1-1
10700: PPUSH
10701: CALL_OW 88
// Say ( Donaldson , DT2a-Don-1 ) ;
10705: LD_EXP 3
10709: PPUSH
10710: LD_STRING DT2a-Don-1
10712: PPUSH
10713: CALL_OW 88
// DialogueOff ;
10717: CALL_OW 7
// end ;
10721: PPOPN 3
10723: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
10724: LD_INT 1
10726: PPUSH
10727: LD_INT 45
10729: PPUSH
10730: LD_INT 74
10732: PPUSH
10733: CALL_OW 293
10737: IFFALSE 10912
10739: GO 10741
10741: DISABLE
// begin DialogueOn ;
10742: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
10746: LD_INT 36
10748: PPUSH
10749: LD_INT 55
10751: PPUSH
10752: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
10756: LD_INT 22
10758: PUSH
10759: LD_INT 1
10761: PUSH
10762: EMPTY
10763: LIST
10764: LIST
10765: PUSH
10766: LD_INT 23
10768: PUSH
10769: LD_INT 1
10771: PUSH
10772: EMPTY
10773: LIST
10774: LIST
10775: PUSH
10776: LD_INT 26
10778: PUSH
10779: LD_INT 1
10781: PUSH
10782: EMPTY
10783: LIST
10784: LIST
10785: PUSH
10786: LD_INT 2
10788: PUSH
10789: LD_INT 25
10791: PUSH
10792: LD_INT 1
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: PUSH
10799: LD_INT 25
10801: PUSH
10802: LD_INT 2
10804: PUSH
10805: EMPTY
10806: LIST
10807: LIST
10808: PUSH
10809: LD_INT 25
10811: PUSH
10812: LD_INT 3
10814: PUSH
10815: EMPTY
10816: LIST
10817: LIST
10818: PUSH
10819: LD_INT 25
10821: PUSH
10822: LD_INT 4
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: PUSH
10829: LD_INT 25
10831: PUSH
10832: LD_INT 5
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: PUSH
10839: LD_INT 25
10841: PUSH
10842: LD_INT 8
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: PUSH
10858: EMPTY
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: PPUSH
10864: CALL_OW 69
10868: PPUSH
10869: LD_STRING D5-Sol1-1
10871: PPUSH
10872: LD_STRING D5-FSol1-
10874: PPUSH
10875: CALL 12137 0 3
// if warWithLegion and IsOk ( Donaldson ) then
10879: LD_EXP 23
10883: PUSH
10884: LD_EXP 3
10888: PPUSH
10889: CALL_OW 302
10893: AND
10894: IFFALSE 10908
// Say ( Donaldson , D5-Don-1 ) ;
10896: LD_EXP 3
10900: PPUSH
10901: LD_STRING D5-Don-1
10903: PPUSH
10904: CALL_OW 88
// DialogueOff ;
10908: CALL_OW 7
// end ;
10912: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
10913: LD_INT 1
10915: PPUSH
10916: LD_INT 10
10918: PPUSH
10919: CALL_OW 292
10923: PUSH
10924: LD_INT 1
10926: PPUSH
10927: LD_INT 137
10929: PPUSH
10930: CALL_OW 292
10934: OR
10935: IFFALSE 11090
10937: GO 10939
10939: DISABLE
// begin DialogueOn ;
10940: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
10944: LD_INT 22
10946: PUSH
10947: LD_INT 1
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: PUSH
10954: LD_INT 23
10956: PUSH
10957: LD_INT 1
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: PUSH
10964: LD_INT 26
10966: PUSH
10967: LD_INT 1
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: PUSH
10974: LD_INT 2
10976: PUSH
10977: LD_INT 25
10979: PUSH
10980: LD_INT 1
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: PUSH
10987: LD_INT 25
10989: PUSH
10990: LD_INT 2
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: PUSH
10997: LD_INT 25
10999: PUSH
11000: LD_INT 3
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: PUSH
11007: LD_INT 25
11009: PUSH
11010: LD_INT 4
11012: PUSH
11013: EMPTY
11014: LIST
11015: LIST
11016: PUSH
11017: LD_INT 25
11019: PUSH
11020: LD_INT 5
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: PUSH
11027: LD_INT 25
11029: PUSH
11030: LD_INT 8
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: PPUSH
11052: CALL_OW 69
11056: PPUSH
11057: LD_STRING DT3-Sol1-1
11059: PPUSH
11060: LD_STRING DT3-FSol1-1
11062: PPUSH
11063: CALL 12137 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11067: LD_EXP 1
11071: PPUSH
11072: LD_STRING DT3-JMM-1
11074: PPUSH
11075: CALL_OW 88
// DialogueOff ;
11079: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11083: LD_STRING M2
11085: PPUSH
11086: CALL_OW 337
// end ;
11090: END
// every 0 0$1 trigger ruEscape = 0 and ( FilterUnitsInArea ( RuEastBase , [ f_side , 1 ] ) or FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_not , [ f_lives , 800 ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ) do
11091: LD_EXP 35
11095: PUSH
11096: LD_INT 0
11098: EQUAL
11099: PUSH
11100: LD_INT 10
11102: PPUSH
11103: LD_INT 22
11105: PUSH
11106: LD_INT 1
11108: PUSH
11109: EMPTY
11110: LIST
11111: LIST
11112: PPUSH
11113: CALL_OW 70
11117: PUSH
11118: LD_INT 10
11120: PPUSH
11121: LD_INT 22
11123: PUSH
11124: LD_INT 3
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: PUSH
11131: LD_INT 3
11133: PUSH
11134: LD_INT 24
11136: PUSH
11137: LD_INT 800
11139: PUSH
11140: EMPTY
11141: LIST
11142: LIST
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: PUSH
11148: LD_INT 21
11150: PUSH
11151: LD_INT 2
11153: PUSH
11154: EMPTY
11155: LIST
11156: LIST
11157: PUSH
11158: LD_INT 58
11160: PUSH
11161: EMPTY
11162: LIST
11163: PUSH
11164: EMPTY
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: PPUSH
11170: CALL_OW 70
11174: OR
11175: AND
11176: IFFALSE 11189
11178: GO 11180
11180: DISABLE
// ruEscape := 1 ;
11181: LD_ADDR_EXP 35
11185: PUSH
11186: LD_INT 1
11188: ST_TO_ADDR
11189: END
// every 0 0$3 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or ruEscape = 1 do var i , unit , tmp ;
11190: LD_INT 3
11192: PPUSH
11193: CALL_OW 303
11197: PUSH
11198: LD_INT 4
11200: PPUSH
11201: CALL_OW 303
11205: OR
11206: PUSH
11207: LD_EXP 35
11211: PUSH
11212: LD_INT 1
11214: EQUAL
11215: OR
11216: IFFALSE 11805
11218: GO 11220
11220: DISABLE
11221: LD_INT 0
11223: PPUSH
11224: PPUSH
11225: PPUSH
// begin ruAI := 0 ;
11226: LD_ADDR_EXP 34
11230: PUSH
11231: LD_INT 0
11233: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
11234: LD_EXP 27
11238: PPUSH
11239: CALL_OW 122
// wait ( 0 0$1 ) ;
11243: LD_INT 35
11245: PPUSH
11246: CALL_OW 67
// DialogueOn ;
11250: CALL_OW 6
// PlaceSeeing ( 75 , 21 , 1 , 12 ) ;
11254: LD_INT 75
11256: PPUSH
11257: LD_INT 21
11259: PPUSH
11260: LD_INT 1
11262: PPUSH
11263: LD_INT 12
11265: PPUSH
11266: CALL_OW 330
// CenterNowOnXY ( 75 , 21 ) ;
11270: LD_INT 75
11272: PPUSH
11273: LD_INT 21
11275: PPUSH
11276: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
11280: LD_INT 10
11282: PPUSH
11283: CALL_OW 68
// Say ( JMM , D6-JMM-1 ) ;
11287: LD_EXP 1
11291: PPUSH
11292: LD_STRING D6-JMM-1
11294: PPUSH
11295: CALL_OW 88
// RemoveSeeing ( 75 , 21 , 1 ) ;
11299: LD_INT 75
11301: PPUSH
11302: LD_INT 21
11304: PPUSH
11305: LD_INT 1
11307: PPUSH
11308: CALL_OW 331
// DialogueOff ;
11312: CALL_OW 7
// for i in RuScientists do
11316: LD_ADDR_VAR 0 1
11320: PUSH
11321: LD_EXP 27
11325: PUSH
11326: FOR_IN
11327: IFFALSE 11363
// begin SetSide ( i , 6 ) ;
11329: LD_VAR 0 1
11333: PPUSH
11334: LD_INT 6
11336: PPUSH
11337: CALL_OW 235
// SetTag ( i , rand ( 1 , 3 ) ) ;
11341: LD_VAR 0 1
11345: PPUSH
11346: LD_INT 1
11348: PPUSH
11349: LD_INT 3
11351: PPUSH
11352: CALL_OW 12
11356: PPUSH
11357: CALL_OW 109
// end ;
11361: GO 11326
11363: POP
11364: POP
// repeat wait ( 0 0$1 ) ;
11365: LD_INT 35
11367: PPUSH
11368: CALL_OW 67
// for i in RuScientists do
11372: LD_ADDR_VAR 0 1
11376: PUSH
11377: LD_EXP 27
11381: PUSH
11382: FOR_IN
11383: IFFALSE 11796
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , i , 10 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11385: LD_ADDR_VAR 0 3
11389: PUSH
11390: LD_INT 22
11392: PUSH
11393: LD_INT 3
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: PUSH
11400: LD_INT 91
11402: PUSH
11403: LD_VAR 0 1
11407: PUSH
11408: LD_INT 10
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: LIST
11415: PUSH
11416: LD_INT 21
11418: PUSH
11419: LD_INT 2
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: PUSH
11426: LD_INT 58
11428: PUSH
11429: EMPTY
11430: LIST
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: PPUSH
11438: CALL_OW 69
11442: ST_TO_ADDR
// if tmp and not IsInUnit ( i ) then
11443: LD_VAR 0 3
11447: PUSH
11448: LD_VAR 0 1
11452: PPUSH
11453: CALL_OW 310
11457: NOT
11458: AND
11459: IFFALSE 11487
// begin ComEnterUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
11461: LD_VAR 0 1
11465: PPUSH
11466: LD_VAR 0 3
11470: PPUSH
11471: LD_VAR 0 1
11475: PPUSH
11476: CALL_OW 74
11480: PPUSH
11481: CALL_OW 120
// continue ;
11485: GO 11382
// end ; if IsInUnit ( i ) then
11487: LD_VAR 0 1
11491: PPUSH
11492: CALL_OW 310
11496: IFFALSE 11515
// unit := IsInUnit ( i ) else
11498: LD_ADDR_VAR 0 2
11502: PUSH
11503: LD_VAR 0 1
11507: PPUSH
11508: CALL_OW 310
11512: ST_TO_ADDR
11513: GO 11525
// unit := i ;
11515: LD_ADDR_VAR 0 2
11519: PUSH
11520: LD_VAR 0 1
11524: ST_TO_ADDR
// case GetTag ( i ) of 1 :
11525: LD_VAR 0 1
11529: PPUSH
11530: CALL_OW 110
11534: PUSH
11535: LD_INT 1
11537: DOUBLE
11538: EQUAL
11539: IFTRUE 11543
11541: GO 11602
11543: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
11544: LD_VAR 0 2
11548: PPUSH
11549: LD_INT 137
11551: PPUSH
11552: CALL_OW 296
11556: PUSH
11557: LD_INT 13
11559: LESS
11560: PUSH
11561: LD_INT 137
11563: PPUSH
11564: CALL_OW 302
11568: AND
11569: IFFALSE 11585
// ComEnterUnit ( unit , rutp ) else
11571: LD_VAR 0 2
11575: PPUSH
11576: LD_INT 137
11578: PPUSH
11579: CALL_OW 120
11583: GO 11600
// ComMoveXY ( unit , 16 , 28 ) ;
11585: LD_VAR 0 2
11589: PPUSH
11590: LD_INT 16
11592: PPUSH
11593: LD_INT 28
11595: PPUSH
11596: CALL_OW 111
// end ; 2 :
11600: GO 11794
11602: LD_INT 2
11604: DOUBLE
11605: EQUAL
11606: IFTRUE 11610
11608: GO 11628
11610: POP
// ComMoveXY ( unit , 97 , 2 ) ; 3 :
11611: LD_VAR 0 2
11615: PPUSH
11616: LD_INT 97
11618: PPUSH
11619: LD_INT 2
11621: PPUSH
11622: CALL_OW 111
11626: GO 11794
11628: LD_INT 3
11630: DOUBLE
11631: EQUAL
11632: IFTRUE 11636
11634: GO 11695
11636: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
11637: LD_VAR 0 2
11641: PPUSH
11642: LD_INT 137
11644: PPUSH
11645: CALL_OW 296
11649: PUSH
11650: LD_INT 13
11652: LESS
11653: PUSH
11654: LD_INT 137
11656: PPUSH
11657: CALL_OW 302
11661: AND
11662: IFFALSE 11678
// ComEnterUnit ( unit , rutp ) else
11664: LD_VAR 0 2
11668: PPUSH
11669: LD_INT 137
11671: PPUSH
11672: CALL_OW 120
11676: GO 11693
// ComMoveXY ( unit , 128 , 155 ) ;
11678: LD_VAR 0 2
11682: PPUSH
11683: LD_INT 128
11685: PPUSH
11686: LD_INT 155
11688: PPUSH
11689: CALL_OW 111
// end ; 11 :
11693: GO 11794
11695: LD_INT 11
11697: DOUBLE
11698: EQUAL
11699: IFTRUE 11703
11701: GO 11721
11703: POP
// ComMoveXY ( unit , 16 , 28 ) ; 13 :
11704: LD_VAR 0 2
11708: PPUSH
11709: LD_INT 16
11711: PPUSH
11712: LD_INT 28
11714: PPUSH
11715: CALL_OW 111
11719: GO 11794
11721: LD_INT 13
11723: DOUBLE
11724: EQUAL
11725: IFTRUE 11729
11727: GO 11767
11729: POP
// begin if IsOk ( ruteleprt ) then
11730: LD_INT 10
11732: PPUSH
11733: CALL_OW 302
11737: IFFALSE 11753
// ComEnterUnit ( unit , ruteleprt ) else
11739: LD_VAR 0 2
11743: PPUSH
11744: LD_INT 10
11746: PPUSH
11747: CALL_OW 120
11751: GO 11765
// SetTag ( unit , 23 ) ;
11753: LD_VAR 0 2
11757: PPUSH
11758: LD_INT 23
11760: PPUSH
11761: CALL_OW 109
// end ; 23 :
11765: GO 11794
11767: LD_INT 23
11769: DOUBLE
11770: EQUAL
11771: IFTRUE 11775
11773: GO 11793
11775: POP
// ComMoveXY ( unit , 128 , 155 ) ; end ;
11776: LD_VAR 0 2
11780: PPUSH
11781: LD_INT 128
11783: PPUSH
11784: LD_INT 155
11786: PPUSH
11787: CALL_OW 111
11791: GO 11794
11793: POP
// end ;
11794: GO 11382
11796: POP
11797: POP
// until not RuScientists ;
11798: LD_EXP 27
11802: NOT
11803: IFFALSE 11365
// end ;
11805: PPOPN 3
11807: END
// every 0 0$1 trigger ruAI = 0 and RuScientists and FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do var i , unit , veh , tmp ;
11808: LD_EXP 34
11812: PUSH
11813: LD_INT 0
11815: EQUAL
11816: PUSH
11817: LD_EXP 27
11821: AND
11822: PUSH
11823: LD_INT 22
11825: PUSH
11826: LD_INT 6
11828: PUSH
11829: EMPTY
11830: LIST
11831: LIST
11832: PUSH
11833: LD_INT 2
11835: PUSH
11836: LD_INT 95
11838: PUSH
11839: LD_INT 13
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: PUSH
11846: LD_INT 95
11848: PUSH
11849: LD_INT 14
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: PUSH
11856: LD_INT 95
11858: PUSH
11859: LD_INT 25
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PPUSH
11876: CALL_OW 69
11880: AND
11881: IFFALSE 12094
11883: GO 11885
11885: DISABLE
11886: LD_INT 0
11888: PPUSH
11889: PPUSH
11890: PPUSH
11891: PPUSH
// begin enable ;
11892: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do
11893: LD_ADDR_VAR 0 1
11897: PUSH
11898: LD_INT 22
11900: PUSH
11901: LD_INT 6
11903: PUSH
11904: EMPTY
11905: LIST
11906: LIST
11907: PUSH
11908: LD_INT 2
11910: PUSH
11911: LD_INT 95
11913: PUSH
11914: LD_INT 13
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: PUSH
11921: LD_INT 95
11923: PUSH
11924: LD_INT 14
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: PUSH
11931: LD_INT 95
11933: PUSH
11934: LD_INT 25
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: PPUSH
11951: CALL_OW 69
11955: PUSH
11956: FOR_IN
11957: IFFALSE 12092
// begin if i in RuScientists then
11959: LD_VAR 0 1
11963: PUSH
11964: LD_EXP 27
11968: IN
11969: IFFALSE 11998
// begin RuScientists = RuScientists diff i ;
11971: LD_ADDR_EXP 27
11975: PUSH
11976: LD_EXP 27
11980: PUSH
11981: LD_VAR 0 1
11985: DIFF
11986: ST_TO_ADDR
// RemoveUnit ( i ) ;
11987: LD_VAR 0 1
11991: PPUSH
11992: CALL_OW 64
// continue ;
11996: GO 11956
// end ; if i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_manual ] ] ) then
11998: LD_VAR 0 1
12002: PUSH
12003: LD_INT 22
12005: PUSH
12006: LD_INT 6
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: PUSH
12013: LD_INT 33
12015: PUSH
12016: LD_INT 1
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: PPUSH
12027: CALL_OW 69
12031: IN
12032: IFFALSE 12090
// begin if IsDrivenBy ( i ) in RuScientists then
12034: LD_VAR 0 1
12038: PPUSH
12039: CALL_OW 311
12043: PUSH
12044: LD_EXP 27
12048: IN
12049: IFFALSE 12067
// RuScientists = RuScientists diff i ;
12051: LD_ADDR_EXP 27
12055: PUSH
12056: LD_EXP 27
12060: PUSH
12061: LD_VAR 0 1
12065: DIFF
12066: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
12067: LD_VAR 0 1
12071: PPUSH
12072: CALL_OW 311
12076: PPUSH
12077: CALL_OW 64
// RemoveUnit ( i ) ;
12081: LD_VAR 0 1
12085: PPUSH
12086: CALL_OW 64
// end ; end ;
12090: GO 11956
12092: POP
12093: POP
// end ; end_of_file
12094: PPOPN 4
12096: END
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12097: LD_INT 0
12099: PPUSH
12100: PPUSH
// for i in charactersList do
12101: LD_ADDR_VAR 0 4
12105: PUSH
12106: LD_VAR 0 1
12110: PUSH
12111: FOR_IN
12112: IFFALSE 12130
// SaveCharacters ( i , ident ) ;
12114: LD_VAR 0 4
12118: PPUSH
12119: LD_VAR 0 2
12123: PPUSH
12124: CALL_OW 38
12128: GO 12111
12130: POP
12131: POP
// end ;
12132: LD_VAR 0 3
12136: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
12137: LD_INT 0
12139: PPUSH
12140: PPUSH
12141: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12142: LD_ADDR_VAR 0 1
12146: PUSH
12147: LD_VAR 0 1
12151: PUSH
12152: LD_EXP 1
12156: PUSH
12157: LD_EXP 7
12161: PUSH
12162: LD_EXP 3
12166: PUSH
12167: LD_EXP 4
12171: PUSH
12172: LD_EXP 5
12176: PUSH
12177: LD_EXP 2
12181: PUSH
12182: LD_EXP 12
12186: PUSH
12187: LD_EXP 13
12191: PUSH
12192: LD_EXP 9
12196: PUSH
12197: LD_EXP 11
12201: PUSH
12202: LD_EXP 6
12206: PUSH
12207: LD_EXP 8
12211: PUSH
12212: LD_EXP 10
12216: PUSH
12217: LD_EXP 15
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: DIFF
12238: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
12239: LD_ADDR_VAR 0 6
12243: PUSH
12244: LD_VAR 0 1
12248: PUSH
12249: LD_INT 1
12251: PPUSH
12252: LD_VAR 0 1
12256: PPUSH
12257: CALL_OW 12
12261: ARRAY
12262: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
12263: LD_VAR 0 6
12267: PPUSH
12268: CALL_OW 258
12272: PUSH
12273: LD_INT 1
12275: EQUAL
12276: IFFALSE 12294
// Say ( speaker , dialogMID ) else
12278: LD_VAR 0 6
12282: PPUSH
12283: LD_VAR 0 2
12287: PPUSH
12288: CALL_OW 88
12292: GO 12308
// Say ( speaker , dialogFID ) ;
12294: LD_VAR 0 6
12298: PPUSH
12299: LD_VAR 0 3
12303: PPUSH
12304: CALL_OW 88
// result := speaker ;
12308: LD_ADDR_VAR 0 4
12312: PUSH
12313: LD_VAR 0 6
12317: ST_TO_ADDR
// end ;
12318: LD_VAR 0 4
12322: RET
// export function PrepareDifficulty ; var tmp ; begin
12323: LD_INT 0
12325: PPUSH
12326: PPUSH
// if Difficulty = 1 then
12327: LD_OWVAR 67
12331: PUSH
12332: LD_INT 1
12334: EQUAL
12335: IFFALSE 12355
// begin RuSolMinLevel = 8 ;
12337: LD_ADDR_EXP 29
12341: PUSH
12342: LD_INT 8
12344: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12345: LD_ADDR_EXP 30
12349: PUSH
12350: LD_INT 10
12352: ST_TO_ADDR
// end else
12353: GO 12595
// if Difficulty = 2 then
12355: LD_OWVAR 67
12359: PUSH
12360: LD_INT 2
12362: EQUAL
12363: IFFALSE 12459
// begin RuSolMinLevel = 9 ;
12365: LD_ADDR_EXP 29
12369: PUSH
12370: LD_INT 9
12372: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12373: LD_ADDR_EXP 30
12377: PUSH
12378: LD_INT 10
12380: ST_TO_ADDR
// uc_nation = 3 ;
12381: LD_ADDR_OWVAR 21
12385: PUSH
12386: LD_INT 3
12388: ST_TO_ADDR
// uc_side = 3 ;
12389: LD_ADDR_OWVAR 20
12393: PUSH
12394: LD_INT 3
12396: ST_TO_ADDR
// bc_level = 10 ;
12397: LD_ADDR_OWVAR 43
12401: PUSH
12402: LD_INT 10
12404: ST_TO_ADDR
// bc_type = b_turret ;
12405: LD_ADDR_OWVAR 42
12409: PUSH
12410: LD_INT 33
12412: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12413: LD_ADDR_VAR 0 2
12417: PUSH
12418: LD_INT 86
12420: PPUSH
12421: LD_INT 34
12423: PPUSH
12424: LD_INT 2
12426: PPUSH
12427: CALL_OW 47
12431: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12432: LD_VAR 0 2
12436: PPUSH
12437: LD_INT 49
12439: PPUSH
12440: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12444: LD_INT 64
12446: PPUSH
12447: LD_INT 3
12449: PPUSH
12450: LD_INT 1
12452: PPUSH
12453: CALL_OW 322
// end else
12457: GO 12595
// begin RuSolMinLevel = 10 ;
12459: LD_ADDR_EXP 29
12463: PUSH
12464: LD_INT 10
12466: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12467: LD_ADDR_EXP 30
12471: PUSH
12472: LD_INT 10
12474: ST_TO_ADDR
// uc_nation = 3 ;
12475: LD_ADDR_OWVAR 21
12479: PUSH
12480: LD_INT 3
12482: ST_TO_ADDR
// uc_side = 3 ;
12483: LD_ADDR_OWVAR 20
12487: PUSH
12488: LD_INT 3
12490: ST_TO_ADDR
// bc_level = 10 ;
12491: LD_ADDR_OWVAR 43
12495: PUSH
12496: LD_INT 10
12498: ST_TO_ADDR
// bc_type = b_turret ;
12499: LD_ADDR_OWVAR 42
12503: PUSH
12504: LD_INT 33
12506: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12507: LD_ADDR_VAR 0 2
12511: PUSH
12512: LD_INT 86
12514: PPUSH
12515: LD_INT 34
12517: PPUSH
12518: LD_INT 2
12520: PPUSH
12521: CALL_OW 47
12525: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12526: LD_VAR 0 2
12530: PPUSH
12531: LD_INT 49
12533: PPUSH
12534: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
12538: LD_ADDR_VAR 0 2
12542: PUSH
12543: LD_INT 93
12545: PPUSH
12546: LD_INT 31
12548: PPUSH
12549: LD_INT 2
12551: PPUSH
12552: CALL_OW 47
12556: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12557: LD_VAR 0 2
12561: PPUSH
12562: LD_INT 49
12564: PPUSH
12565: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12569: LD_INT 64
12571: PPUSH
12572: LD_INT 3
12574: PPUSH
12575: LD_INT 1
12577: PPUSH
12578: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
12582: LD_INT 65
12584: PPUSH
12585: LD_INT 3
12587: PPUSH
12588: LD_INT 1
12590: PPUSH
12591: CALL_OW 322
// end ; end ;
12595: LD_VAR 0 1
12599: RET
// export function ShowQuery1 ; begin
12600: LD_INT 0
12602: PPUSH
// result := Query ( Q1 ) ;
12603: LD_ADDR_VAR 0 1
12607: PUSH
12608: LD_STRING Q1
12610: PPUSH
12611: CALL_OW 97
12615: ST_TO_ADDR
// end ;
12616: LD_VAR 0 1
12620: RET
// export function ShowQuery2 ; begin
12621: LD_INT 0
12623: PPUSH
// result := Query ( Q1a ) ;
12624: LD_ADDR_VAR 0 1
12628: PUSH
12629: LD_STRING Q1a
12631: PPUSH
12632: CALL_OW 97
12636: ST_TO_ADDR
// end ;
12637: LD_VAR 0 1
12641: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
12642: LD_INT 0
12644: PPUSH
12645: PPUSH
12646: PPUSH
12647: PPUSH
// for i = 1 to count do
12648: LD_ADDR_VAR 0 8
12652: PUSH
12653: DOUBLE
12654: LD_INT 1
12656: DEC
12657: ST_TO_ADDR
12658: LD_VAR 0 6
12662: PUSH
12663: FOR_TO
12664: IFFALSE 12745
// begin uc_side = side ;
12666: LD_ADDR_OWVAR 20
12670: PUSH
12671: LD_VAR 0 1
12675: ST_TO_ADDR
// uc_nation = nation ;
12676: LD_ADDR_OWVAR 21
12680: PUSH
12681: LD_VAR 0 2
12685: ST_TO_ADDR
// hc_gallery =  ;
12686: LD_ADDR_OWVAR 33
12690: PUSH
12691: LD_STRING 
12693: ST_TO_ADDR
// hc_name =  ;
12694: LD_ADDR_OWVAR 26
12698: PUSH
12699: LD_STRING 
12701: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
12702: LD_INT 0
12704: PPUSH
12705: LD_VAR 0 5
12709: PPUSH
12710: LD_VAR 0 4
12714: PPUSH
12715: CALL_OW 380
// un = CreateHuman ;
12719: LD_ADDR_VAR 0 10
12723: PUSH
12724: CALL_OW 44
12728: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
12729: LD_VAR 0 10
12733: PPUSH
12734: LD_VAR 0 3
12738: PPUSH
12739: CALL_OW 52
// end ;
12743: GO 12663
12745: POP
12746: POP
// end ;
12747: LD_VAR 0 7
12751: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , list ; begin
12752: LD_INT 0
12754: PPUSH
12755: PPUSH
12756: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
12757: LD_ADDR_VAR 0 6
12761: PUSH
12762: LD_INT 48
12764: PUSH
12765: LD_INT 49
12767: PUSH
12768: LD_INT 50
12770: PUSH
12771: LD_INT 20
12773: PUSH
12774: LD_INT 1
12776: PUSH
12777: LD_INT 51
12779: PUSH
12780: LD_INT 52
12782: PUSH
12783: LD_INT 69
12785: PUSH
12786: LD_INT 39
12788: PUSH
12789: LD_INT 34
12791: PUSH
12792: LD_INT 40
12794: PUSH
12795: LD_INT 53
12797: PUSH
12798: LD_INT 71
12800: PUSH
12801: LD_INT 57
12803: PUSH
12804: LD_INT 58
12806: PUSH
12807: LD_INT 44
12809: PUSH
12810: LD_INT 32
12812: PUSH
12813: LD_INT 27
12815: PUSH
12816: LD_INT 23
12818: PUSH
12819: LD_INT 33
12821: PUSH
12822: LD_INT 59
12824: PUSH
12825: LD_INT 54
12827: PUSH
12828: LD_INT 55
12830: PUSH
12831: LD_INT 56
12833: PUSH
12834: LD_INT 63
12836: PUSH
12837: LD_INT 64
12839: PUSH
12840: LD_INT 65
12842: PUSH
12843: LD_INT 30
12845: PUSH
12846: LD_INT 31
12848: PUSH
12849: LD_INT 21
12851: PUSH
12852: LD_INT 22
12854: PUSH
12855: LD_INT 25
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: ST_TO_ADDR
// for i := 1 to list do
12892: LD_ADDR_VAR 0 5
12896: PUSH
12897: DOUBLE
12898: LD_INT 1
12900: DEC
12901: ST_TO_ADDR
12902: LD_VAR 0 6
12906: PUSH
12907: FOR_TO
12908: IFFALSE 12980
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
12910: LD_VAR 0 6
12914: PUSH
12915: LD_VAR 0 5
12919: ARRAY
12920: PPUSH
12921: LD_VAR 0 1
12925: PPUSH
12926: CALL_OW 321
12930: PUSH
12931: LD_INT 1
12933: EQUAL
12934: PUSH
12935: LD_VAR 0 6
12939: PUSH
12940: LD_VAR 0 5
12944: ARRAY
12945: PPUSH
12946: LD_VAR 0 3
12950: PPUSH
12951: CALL_OW 482
12955: AND
12956: IFFALSE 12978
// AddComResearch ( lab , list [ i ] ) ;
12958: LD_VAR 0 2
12962: PPUSH
12963: LD_VAR 0 6
12967: PUSH
12968: LD_VAR 0 5
12972: ARRAY
12973: PPUSH
12974: CALL_OW 184
12978: GO 12907
12980: POP
12981: POP
// end ;
12982: LD_VAR 0 4
12986: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
12987: LD_INT 0
12989: PPUSH
12990: PPUSH
12991: PPUSH
12992: PPUSH
12993: PPUSH
12994: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
12995: LD_ADDR_VAR 0 8
12999: PUSH
13000: LD_VAR 0 2
13004: PPUSH
13005: CALL_OW 313
13009: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13010: LD_ADDR_VAR 0 9
13014: PUSH
13015: LD_VAR 0 3
13019: PPUSH
13020: LD_INT 22
13022: PUSH
13023: LD_VAR 0 1
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: PUSH
13032: LD_INT 25
13034: PUSH
13035: LD_INT 2
13037: PUSH
13038: EMPTY
13039: LIST
13040: LIST
13041: PUSH
13042: LD_INT 24
13044: PUSH
13045: LD_INT 750
13047: PUSH
13048: EMPTY
13049: LIST
13050: LIST
13051: PUSH
13052: LD_INT 3
13054: PUSH
13055: LD_INT 54
13057: PUSH
13058: EMPTY
13059: LIST
13060: PUSH
13061: EMPTY
13062: LIST
13063: LIST
13064: PUSH
13065: EMPTY
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: PPUSH
13071: CALL_OW 70
13075: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13076: LD_ADDR_VAR 0 6
13080: PUSH
13081: LD_VAR 0 3
13085: PPUSH
13086: LD_INT 22
13088: PUSH
13089: LD_VAR 0 1
13093: PUSH
13094: EMPTY
13095: LIST
13096: LIST
13097: PUSH
13098: LD_INT 21
13100: PUSH
13101: LD_INT 3
13103: PUSH
13104: EMPTY
13105: LIST
13106: LIST
13107: PUSH
13108: LD_INT 3
13110: PUSH
13111: LD_INT 24
13113: PUSH
13114: LD_INT 1000
13116: PUSH
13117: EMPTY
13118: LIST
13119: LIST
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: LIST
13129: PUSH
13130: EMPTY
13131: LIST
13132: PPUSH
13133: CALL_OW 70
13137: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13138: LD_VAR 0 6
13142: NOT
13143: PUSH
13144: LD_INT 22
13146: PUSH
13147: LD_VAR 0 1
13151: PUSH
13152: EMPTY
13153: LIST
13154: LIST
13155: PUSH
13156: LD_INT 25
13158: PUSH
13159: LD_INT 2
13161: PUSH
13162: EMPTY
13163: LIST
13164: LIST
13165: PUSH
13166: LD_INT 24
13168: PUSH
13169: LD_INT 250
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: LIST
13180: PPUSH
13181: CALL_OW 69
13185: NOT
13186: AND
13187: IFFALSE 13191
// exit ;
13189: GO 13349
// if buildingsList and engineerOkInside then
13191: LD_VAR 0 6
13195: PUSH
13196: LD_VAR 0 8
13200: AND
13201: IFFALSE 13212
// ComExitBuilding ( engineerOkInside ) ;
13203: LD_VAR 0 8
13207: PPUSH
13208: CALL_OW 122
// if buildingsList and engineerOkOutside then
13212: LD_VAR 0 6
13216: PUSH
13217: LD_VAR 0 9
13221: AND
13222: IFFALSE 13242
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
13224: LD_VAR 0 9
13228: PPUSH
13229: LD_VAR 0 6
13233: PUSH
13234: LD_INT 1
13236: ARRAY
13237: PPUSH
13238: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
13242: LD_VAR 0 6
13246: PUSH
13247: LD_INT 0
13249: EQUAL
13250: PUSH
13251: LD_VAR 0 4
13255: PUSH
13256: LD_INT 0
13258: EQUAL
13259: AND
13260: PUSH
13261: LD_VAR 0 9
13265: AND
13266: IFFALSE 13282
// ComEnterUnit ( engineerOkOutside , depot ) ;
13268: LD_VAR 0 9
13272: PPUSH
13273: LD_VAR 0 2
13277: PPUSH
13278: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
13282: LD_VAR 0 9
13286: PUSH
13287: LD_VAR 0 6
13291: PUSH
13292: LD_INT 0
13294: EQUAL
13295: AND
13296: PUSH
13297: LD_VAR 0 4
13301: AND
13302: IFFALSE 13349
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13304: LD_VAR 0 9
13308: PPUSH
13309: LD_VAR 0 4
13313: PUSH
13314: LD_INT 1
13316: ARRAY
13317: PPUSH
13318: LD_VAR 0 4
13322: PUSH
13323: LD_INT 2
13325: ARRAY
13326: PPUSH
13327: LD_VAR 0 4
13331: PUSH
13332: LD_INT 3
13334: ARRAY
13335: PPUSH
13336: LD_VAR 0 4
13340: PUSH
13341: LD_INT 4
13343: ARRAY
13344: PPUSH
13345: CALL_OW 145
// end ;
13349: LD_VAR 0 5
13353: RET
// export function HealUnitInBase ( side , healArea , baseArea , buildings ) ; var sciList , sciListOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13354: LD_INT 0
13356: PPUSH
13357: PPUSH
13358: PPUSH
13359: PPUSH
13360: PPUSH
13361: PPUSH
13362: PPUSH
13363: PPUSH
13364: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13365: LD_ADDR_VAR 0 6
13369: PUSH
13370: LD_INT 22
13372: PUSH
13373: LD_VAR 0 1
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: PUSH
13382: LD_INT 25
13384: PUSH
13385: LD_INT 4
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: PUSH
13392: LD_INT 24
13394: PUSH
13395: LD_INT 251
13397: PUSH
13398: EMPTY
13399: LIST
13400: LIST
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: LIST
13406: PPUSH
13407: CALL_OW 69
13411: PUSH
13412: LD_EXP 27
13416: PUSH
13417: EMPTY
13418: LIST
13419: DIFF
13420: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_outside ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13421: LD_ADDR_VAR 0 7
13425: PUSH
13426: LD_VAR 0 3
13430: PPUSH
13431: LD_INT 22
13433: PUSH
13434: LD_VAR 0 1
13438: PUSH
13439: EMPTY
13440: LIST
13441: LIST
13442: PUSH
13443: LD_INT 56
13445: PUSH
13446: EMPTY
13447: LIST
13448: PUSH
13449: LD_INT 25
13451: PUSH
13452: LD_INT 4
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: PUSH
13459: LD_INT 50
13461: PUSH
13462: EMPTY
13463: LIST
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: PPUSH
13471: CALL_OW 70
13475: PUSH
13476: LD_EXP 27
13480: PUSH
13481: EMPTY
13482: LIST
13483: DIFF
13484: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13485: LD_ADDR_VAR 0 10
13489: PUSH
13490: LD_VAR 0 3
13494: PPUSH
13495: LD_INT 22
13497: PUSH
13498: LD_VAR 0 1
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: PUSH
13507: LD_INT 21
13509: PUSH
13510: LD_INT 1
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: PUSH
13517: LD_INT 3
13519: PUSH
13520: LD_INT 24
13522: PUSH
13523: LD_INT 750
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: LIST
13538: PPUSH
13539: CALL_OW 70
13543: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13544: LD_ADDR_VAR 0 11
13548: PUSH
13549: LD_VAR 0 2
13553: PPUSH
13554: LD_INT 22
13556: PUSH
13557: LD_VAR 0 1
13561: PUSH
13562: EMPTY
13563: LIST
13564: LIST
13565: PUSH
13566: LD_INT 21
13568: PUSH
13569: LD_INT 1
13571: PUSH
13572: EMPTY
13573: LIST
13574: LIST
13575: PUSH
13576: LD_INT 3
13578: PUSH
13579: LD_INT 24
13581: PUSH
13582: LD_INT 1000
13584: PUSH
13585: EMPTY
13586: LIST
13587: LIST
13588: PUSH
13589: EMPTY
13590: LIST
13591: LIST
13592: PUSH
13593: EMPTY
13594: LIST
13595: LIST
13596: LIST
13597: PPUSH
13598: CALL_OW 70
13602: ST_TO_ADDR
// if damageUnits and sciList then
13603: LD_VAR 0 10
13607: PUSH
13608: LD_VAR 0 6
13612: AND
13613: IFFALSE 13629
// ComMoveToArea ( damageUnits , healArea ) ;
13615: LD_VAR 0 10
13619: PPUSH
13620: LD_VAR 0 2
13624: PPUSH
13625: CALL_OW 113
// if unitsToHeal and sciList and sciListOutside = 0 then
13629: LD_VAR 0 11
13633: PUSH
13634: LD_VAR 0 6
13638: AND
13639: PUSH
13640: LD_VAR 0 7
13644: PUSH
13645: LD_INT 0
13647: EQUAL
13648: AND
13649: IFFALSE 13695
// for i in buildings do
13651: LD_ADDR_VAR 0 8
13655: PUSH
13656: LD_VAR 0 4
13660: PUSH
13661: FOR_IN
13662: IFFALSE 13693
// begin if UnitsInside ( i ) then
13664: LD_VAR 0 8
13668: PPUSH
13669: CALL_OW 313
13673: IFFALSE 13691
// begin ComExitBuilding ( UnitsInside ( i ) ) ;
13675: LD_VAR 0 8
13679: PPUSH
13680: CALL_OW 313
13684: PPUSH
13685: CALL_OW 122
// break ;
13689: GO 13693
// end ; end ;
13691: GO 13661
13693: POP
13694: POP
// if unitsToHeal and sciListOutside then
13695: LD_VAR 0 11
13699: PUSH
13700: LD_VAR 0 7
13704: AND
13705: IFFALSE 13725
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
13707: LD_VAR 0 7
13711: PPUSH
13712: LD_VAR 0 11
13716: PUSH
13717: LD_INT 1
13719: ARRAY
13720: PPUSH
13721: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
13725: LD_VAR 0 10
13729: PUSH
13730: LD_INT 0
13732: EQUAL
13733: PUSH
13734: LD_VAR 0 11
13738: PUSH
13739: LD_INT 0
13741: EQUAL
13742: AND
13743: PUSH
13744: LD_VAR 0 7
13748: AND
13749: IFFALSE 13817
// begin tmp := buildings ;
13751: LD_ADDR_VAR 0 12
13755: PUSH
13756: LD_VAR 0 4
13760: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
13761: LD_ADDR_VAR 0 13
13765: PUSH
13766: LD_INT 1
13768: PPUSH
13769: LD_VAR 0 12
13773: PPUSH
13774: CALL_OW 12
13778: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
13779: LD_VAR 0 7
13783: PPUSH
13784: LD_INT 3
13786: PUSH
13787: LD_INT 60
13789: PUSH
13790: EMPTY
13791: LIST
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: PPUSH
13797: CALL_OW 72
13801: PPUSH
13802: LD_VAR 0 12
13806: PUSH
13807: LD_VAR 0 13
13811: ARRAY
13812: PPUSH
13813: CALL_OW 120
// end ; end ;
13817: LD_VAR 0 5
13821: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
13822: LD_INT 0
13824: PPUSH
13825: PPUSH
13826: PPUSH
13827: PPUSH
13828: PPUSH
13829: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
13830: LD_ADDR_VAR 0 7
13834: PUSH
13835: LD_VAR 0 2
13839: PPUSH
13840: LD_INT 22
13842: PUSH
13843: LD_VAR 0 1
13847: PUSH
13848: EMPTY
13849: LIST
13850: LIST
13851: PUSH
13852: LD_INT 21
13854: PUSH
13855: LD_INT 2
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: PUSH
13862: LD_INT 34
13864: PUSH
13865: LD_INT 52
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: PUSH
13872: EMPTY
13873: LIST
13874: LIST
13875: LIST
13876: PPUSH
13877: CALL_OW 70
13881: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13882: LD_ADDR_VAR 0 8
13886: PUSH
13887: LD_VAR 0 2
13891: PPUSH
13892: LD_INT 22
13894: PUSH
13895: LD_VAR 0 1
13899: PUSH
13900: EMPTY
13901: LIST
13902: LIST
13903: PUSH
13904: LD_INT 21
13906: PUSH
13907: LD_INT 3
13909: PUSH
13910: EMPTY
13911: LIST
13912: LIST
13913: PUSH
13914: LD_INT 3
13916: PUSH
13917: LD_INT 24
13919: PUSH
13920: LD_INT 1000
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: LIST
13935: PUSH
13936: EMPTY
13937: LIST
13938: PPUSH
13939: CALL_OW 70
13943: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
13944: LD_VAR 0 8
13948: PUSH
13949: LD_INT 0
13951: GREATER
13952: PUSH
13953: LD_VAR 0 7
13957: PPUSH
13958: LD_INT 24
13960: PUSH
13961: LD_INT 750
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: PPUSH
13968: CALL_OW 72
13972: PUSH
13973: LD_INT 0
13975: GREATER
13976: AND
13977: IFFALSE 13997
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
13979: LD_VAR 0 7
13983: PPUSH
13984: LD_VAR 0 8
13988: PUSH
13989: LD_INT 1
13991: ARRAY
13992: PPUSH
13993: CALL_OW 130
// end ;
13997: LD_VAR 0 3
14001: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14002: LD_INT 0
14004: PPUSH
14005: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14006: LD_INT 22
14008: PUSH
14009: LD_VAR 0 1
14013: PUSH
14014: EMPTY
14015: LIST
14016: LIST
14017: PUSH
14018: LD_INT 21
14020: PUSH
14021: LD_INT 2
14023: PUSH
14024: EMPTY
14025: LIST
14026: LIST
14027: PUSH
14028: EMPTY
14029: LIST
14030: LIST
14031: PPUSH
14032: CALL_OW 69
14036: PUSH
14037: LD_INT 18
14039: PPUSH
14040: LD_INT 22
14042: PUSH
14043: LD_VAR 0 1
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: PUSH
14052: LD_INT 21
14054: PUSH
14055: LD_INT 2
14057: PUSH
14058: EMPTY
14059: LIST
14060: LIST
14061: PUSH
14062: EMPTY
14063: LIST
14064: LIST
14065: PPUSH
14066: CALL_OW 70
14070: PUSH
14071: LD_VAR 0 3
14075: LESSEQUAL
14076: DIFF
14077: IFFALSE 14144
// for i := 1 to vehCount do
14079: LD_ADDR_VAR 0 9
14083: PUSH
14084: DOUBLE
14085: LD_INT 1
14087: DEC
14088: ST_TO_ADDR
14089: LD_VAR 0 3
14093: PUSH
14094: FOR_TO
14095: IFFALSE 14142
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14097: LD_VAR 0 2
14101: PPUSH
14102: LD_VAR 0 7
14106: PPUSH
14107: LD_VAR 0 5
14111: PPUSH
14112: LD_VAR 0 6
14116: PPUSH
14117: LD_VAR 0 4
14121: PUSH
14122: LD_INT 1
14124: PPUSH
14125: LD_VAR 0 4
14129: PPUSH
14130: CALL_OW 12
14134: ARRAY
14135: PPUSH
14136: CALL_OW 185
14140: GO 14094
14142: POP
14143: POP
// end ;
14144: LD_VAR 0 8
14148: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
14149: LD_INT 0
14151: PPUSH
14152: PPUSH
14153: PPUSH
14154: PPUSH
14155: PPUSH
14156: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14157: LD_ADDR_VAR 0 6
14161: PUSH
14162: LD_INT 22
14164: PUSH
14165: LD_VAR 0 1
14169: PUSH
14170: EMPTY
14171: LIST
14172: LIST
14173: PUSH
14174: LD_INT 25
14176: PUSH
14177: LD_INT 9
14179: PUSH
14180: EMPTY
14181: LIST
14182: LIST
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: PPUSH
14188: CALL_OW 69
14192: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14193: LD_ADDR_VAR 0 7
14197: PUSH
14198: LD_INT 81
14200: PUSH
14201: LD_VAR 0 1
14205: PUSH
14206: EMPTY
14207: LIST
14208: LIST
14209: PUSH
14210: LD_INT 3
14212: PUSH
14213: LD_INT 21
14215: PUSH
14216: LD_INT 3
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: PPUSH
14231: CALL_OW 69
14235: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14236: LD_ADDR_VAR 0 4
14240: PUSH
14241: LD_INT 1
14243: PPUSH
14244: LD_INT 3
14246: PPUSH
14247: CALL_OW 12
14251: ST_TO_ADDR
// for i := 1 to list do
14252: LD_ADDR_VAR 0 5
14256: PUSH
14257: DOUBLE
14258: LD_INT 1
14260: DEC
14261: ST_TO_ADDR
14262: LD_VAR 0 6
14266: PUSH
14267: FOR_TO
14268: IFFALSE 14470
// for ta in filter do
14270: LD_ADDR_VAR 0 3
14274: PUSH
14275: LD_VAR 0 7
14279: PUSH
14280: FOR_IN
14281: IFFALSE 14466
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14283: LD_VAR 0 6
14287: PUSH
14288: LD_VAR 0 5
14292: ARRAY
14293: PPUSH
14294: LD_VAR 0 3
14298: PPUSH
14299: CALL_OW 296
14303: PUSH
14304: LD_INT 15
14306: LESSEQUAL
14307: IFFALSE 14464
// begin case c of 1 :
14309: LD_VAR 0 4
14313: PUSH
14314: LD_INT 1
14316: DOUBLE
14317: EQUAL
14318: IFTRUE 14322
14320: GO 14360
14322: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
14323: LD_VAR 0 6
14327: PUSH
14328: LD_VAR 0 5
14332: ARRAY
14333: PPUSH
14334: LD_VAR 0 3
14338: PPUSH
14339: CALL_OW 250
14343: PPUSH
14344: LD_VAR 0 3
14348: PPUSH
14349: CALL_OW 251
14353: PPUSH
14354: CALL_OW 154
14358: GO 14464
14360: LD_INT 2
14362: DOUBLE
14363: EQUAL
14364: IFTRUE 14368
14366: GO 14432
14368: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
14369: LD_VAR 0 6
14373: PUSH
14374: LD_VAR 0 5
14378: ARRAY
14379: PPUSH
14380: LD_VAR 0 3
14384: PPUSH
14385: CALL_OW 250
14389: PUSH
14390: LD_INT 1
14392: NEG
14393: PPUSH
14394: LD_INT 1
14396: PPUSH
14397: CALL_OW 12
14401: PLUS
14402: PPUSH
14403: LD_VAR 0 3
14407: PPUSH
14408: CALL_OW 251
14412: PUSH
14413: LD_INT 1
14415: NEG
14416: PPUSH
14417: LD_INT 1
14419: PPUSH
14420: CALL_OW 12
14424: PLUS
14425: PPUSH
14426: CALL_OW 153
14430: GO 14464
14432: LD_INT 3
14434: DOUBLE
14435: EQUAL
14436: IFTRUE 14440
14438: GO 14463
14440: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14441: LD_VAR 0 6
14445: PUSH
14446: LD_VAR 0 5
14450: ARRAY
14451: PPUSH
14452: LD_VAR 0 3
14456: PPUSH
14457: CALL_OW 115
14461: GO 14464
14463: POP
// end ; end ;
14464: GO 14280
14466: POP
14467: POP
14468: GO 14267
14470: POP
14471: POP
// end ;
14472: LD_VAR 0 2
14476: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
14477: LD_INT 0
14479: PPUSH
14480: PPUSH
14481: PPUSH
14482: PPUSH
// r := 100 ;
14483: LD_ADDR_VAR 0 5
14487: PUSH
14488: LD_INT 100
14490: ST_TO_ADDR
// x := 0 ;
14491: LD_ADDR_VAR 0 6
14495: PUSH
14496: LD_INT 0
14498: ST_TO_ADDR
// while ( x < n ) do
14499: LD_VAR 0 6
14503: PUSH
14504: LD_VAR 0 2
14508: LESS
14509: IFFALSE 14772
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
14511: LD_ADDR_VAR 0 4
14515: PUSH
14516: DOUBLE
14517: LD_INT 1
14519: DEC
14520: ST_TO_ADDR
14521: LD_VAR 0 1
14525: PPUSH
14526: LD_INT 0
14528: PPUSH
14529: CALL_OW 517
14533: PUSH
14534: LD_INT 1
14536: ARRAY
14537: PUSH
14538: FOR_TO
14539: IFFALSE 14768
// begin if r > 50 then
14541: LD_VAR 0 5
14545: PUSH
14546: LD_INT 50
14548: GREATER
14549: IFFALSE 14752
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
14551: LD_VAR 0 1
14555: PPUSH
14556: LD_INT 0
14558: PPUSH
14559: CALL_OW 517
14563: PUSH
14564: LD_INT 1
14566: ARRAY
14567: PUSH
14568: LD_VAR 0 4
14572: ARRAY
14573: PPUSH
14574: LD_VAR 0 1
14578: PPUSH
14579: LD_INT 0
14581: PPUSH
14582: CALL_OW 517
14586: PUSH
14587: LD_INT 2
14589: ARRAY
14590: PUSH
14591: LD_VAR 0 4
14595: ARRAY
14596: PPUSH
14597: CALL_OW 458
14601: NOT
14602: IFFALSE 14750
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
14604: LD_VAR 0 1
14608: PPUSH
14609: LD_INT 0
14611: PPUSH
14612: CALL_OW 517
14616: PUSH
14617: LD_INT 1
14619: ARRAY
14620: PUSH
14621: LD_VAR 0 4
14625: ARRAY
14626: PPUSH
14627: LD_VAR 0 1
14631: PPUSH
14632: LD_INT 0
14634: PPUSH
14635: CALL_OW 517
14639: PUSH
14640: LD_INT 2
14642: ARRAY
14643: PUSH
14644: LD_VAR 0 4
14648: ARRAY
14649: PPUSH
14650: LD_INT 8
14652: PPUSH
14653: LD_INT 0
14655: PPUSH
14656: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
14660: LD_ADDR_EXP 37
14664: PUSH
14665: LD_EXP 37
14669: PPUSH
14670: LD_INT 1
14672: PPUSH
14673: LD_VAR 0 1
14677: PPUSH
14678: LD_INT 0
14680: PPUSH
14681: CALL_OW 517
14685: PUSH
14686: LD_INT 1
14688: ARRAY
14689: PUSH
14690: LD_VAR 0 4
14694: ARRAY
14695: PUSH
14696: LD_VAR 0 1
14700: PPUSH
14701: LD_INT 0
14703: PPUSH
14704: CALL_OW 517
14708: PUSH
14709: LD_INT 2
14711: ARRAY
14712: PUSH
14713: LD_VAR 0 4
14717: ARRAY
14718: PUSH
14719: EMPTY
14720: LIST
14721: LIST
14722: PPUSH
14723: CALL_OW 2
14727: ST_TO_ADDR
// r := 0 ;
14728: LD_ADDR_VAR 0 5
14732: PUSH
14733: LD_INT 0
14735: ST_TO_ADDR
// x := x + 1 ;
14736: LD_ADDR_VAR 0 6
14740: PUSH
14741: LD_VAR 0 6
14745: PUSH
14746: LD_INT 1
14748: PLUS
14749: ST_TO_ADDR
// end end else
14750: GO 14766
// r := r + 35 ;
14752: LD_ADDR_VAR 0 5
14756: PUSH
14757: LD_VAR 0 5
14761: PUSH
14762: LD_INT 35
14764: PLUS
14765: ST_TO_ADDR
// end end ;
14766: GO 14538
14768: POP
14769: POP
14770: GO 14499
14772: LD_VAR 0 3
14776: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
14777: LD_INT 0
14779: PPUSH
14780: PPUSH
14781: PPUSH
14782: PPUSH
14783: PPUSH
// tmp := [ ] ;
14784: LD_ADDR_VAR 0 6
14788: PUSH
14789: EMPTY
14790: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
14791: LD_ADDR_VAR 0 7
14795: PUSH
14796: LD_INT 22
14798: PUSH
14799: LD_VAR 0 1
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: PUSH
14808: LD_INT 30
14810: PUSH
14811: LD_INT 32
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: PPUSH
14822: CALL_OW 69
14826: ST_TO_ADDR
// if bunkers then
14827: LD_VAR 0 7
14831: IFFALSE 14901
// for i in bunkers do
14833: LD_ADDR_VAR 0 4
14837: PUSH
14838: LD_VAR 0 7
14842: PUSH
14843: FOR_IN
14844: IFFALSE 14899
// for j in UnitsInside ( i ) do
14846: LD_ADDR_VAR 0 5
14850: PUSH
14851: LD_VAR 0 4
14855: PPUSH
14856: CALL_OW 313
14860: PUSH
14861: FOR_IN
14862: IFFALSE 14895
// tmp := Replace ( tmp , tmp + 1 , j ) ;
14864: LD_ADDR_VAR 0 6
14868: PUSH
14869: LD_VAR 0 6
14873: PPUSH
14874: LD_VAR 0 6
14878: PUSH
14879: LD_INT 1
14881: PLUS
14882: PPUSH
14883: LD_VAR 0 5
14887: PPUSH
14888: CALL_OW 1
14892: ST_TO_ADDR
14893: GO 14861
14895: POP
14896: POP
14897: GO 14843
14899: POP
14900: POP
// if tmp then
14901: LD_VAR 0 6
14905: IFFALSE 14945
// begin ComExitBuilding ( tmp ) ;
14907: LD_VAR 0 6
14911: PPUSH
14912: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
14916: LD_VAR 0 6
14920: PPUSH
14921: LD_VAR 0 2
14925: PPUSH
14926: CALL_OW 250
14930: PPUSH
14931: LD_VAR 0 2
14935: PPUSH
14936: CALL_OW 251
14940: PPUSH
14941: CALL_OW 174
// end ; end ;
14945: LD_VAR 0 3
14949: RET
// export function CreateNature ; var i , un ; begin
14950: LD_INT 0
14952: PPUSH
14953: PPUSH
14954: PPUSH
// uc_side := 0 ;
14955: LD_ADDR_OWVAR 20
14959: PUSH
14960: LD_INT 0
14962: ST_TO_ADDR
// uc_nation := 0 ;
14963: LD_ADDR_OWVAR 21
14967: PUSH
14968: LD_INT 0
14970: ST_TO_ADDR
// InitHc ;
14971: CALL_OW 19
// hc_class := class_fish ;
14975: LD_ADDR_OWVAR 28
14979: PUSH
14980: LD_INT 20
14982: ST_TO_ADDR
// for i := 1 to 6 do
14983: LD_ADDR_VAR 0 2
14987: PUSH
14988: DOUBLE
14989: LD_INT 1
14991: DEC
14992: ST_TO_ADDR
14993: LD_INT 6
14995: PUSH
14996: FOR_TO
14997: IFFALSE 15016
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
14999: CALL_OW 44
15003: PPUSH
15004: LD_INT 22
15006: PPUSH
15007: LD_INT 0
15009: PPUSH
15010: CALL_OW 49
15014: GO 14996
15016: POP
15017: POP
// for i := 1 to Difficulty + 2 do
15018: LD_ADDR_VAR 0 2
15022: PUSH
15023: DOUBLE
15024: LD_INT 1
15026: DEC
15027: ST_TO_ADDR
15028: LD_OWVAR 67
15032: PUSH
15033: LD_INT 2
15035: PLUS
15036: PUSH
15037: FOR_TO
15038: IFFALSE 15147
// begin hc_sex := sex_male ;
15040: LD_ADDR_OWVAR 27
15044: PUSH
15045: LD_INT 1
15047: ST_TO_ADDR
// uc_side := 0 ;
15048: LD_ADDR_OWVAR 20
15052: PUSH
15053: LD_INT 0
15055: ST_TO_ADDR
// uc_nation := nation_nature ;
15056: LD_ADDR_OWVAR 21
15060: PUSH
15061: LD_INT 0
15063: ST_TO_ADDR
// hc_class := class_tiger ;
15064: LD_ADDR_OWVAR 28
15068: PUSH
15069: LD_INT 14
15071: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
15072: LD_ADDR_OWVAR 31
15076: PUSH
15077: LD_EXP 30
15081: PUSH
15082: LD_INT 0
15084: PUSH
15085: LD_INT 0
15087: PUSH
15088: LD_INT 0
15090: PUSH
15091: EMPTY
15092: LIST
15093: LIST
15094: LIST
15095: LIST
15096: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
15097: LD_ADDR_OWVAR 35
15101: PUSH
15102: LD_INT 5
15104: NEG
15105: PPUSH
15106: LD_INT 5
15108: PPUSH
15109: CALL_OW 12
15113: PUSH
15114: LD_OWVAR 67
15118: MUL
15119: ST_TO_ADDR
// un := CreateHuman ;
15120: LD_ADDR_VAR 0 3
15124: PUSH
15125: CALL_OW 44
15129: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15130: LD_VAR 0 3
15134: PPUSH
15135: LD_INT 23
15137: PPUSH
15138: LD_INT 0
15140: PPUSH
15141: CALL_OW 49
// end ;
15145: GO 15037
15147: POP
15148: POP
// for i := 1 to rand ( 3 , 4 ) do
15149: LD_ADDR_VAR 0 2
15153: PUSH
15154: DOUBLE
15155: LD_INT 1
15157: DEC
15158: ST_TO_ADDR
15159: LD_INT 3
15161: PPUSH
15162: LD_INT 4
15164: PPUSH
15165: CALL_OW 12
15169: PUSH
15170: FOR_TO
15171: IFFALSE 15263
// begin hc_sex := sex_male ;
15173: LD_ADDR_OWVAR 27
15177: PUSH
15178: LD_INT 1
15180: ST_TO_ADDR
// uc_side := 0 ;
15181: LD_ADDR_OWVAR 20
15185: PUSH
15186: LD_INT 0
15188: ST_TO_ADDR
// uc_nation := nation_nature ;
15189: LD_ADDR_OWVAR 21
15193: PUSH
15194: LD_INT 0
15196: ST_TO_ADDR
// hc_class := 18 ;
15197: LD_ADDR_OWVAR 28
15201: PUSH
15202: LD_INT 18
15204: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
15205: LD_ADDR_OWVAR 31
15209: PUSH
15210: LD_INT 0
15212: PUSH
15213: LD_INT 0
15215: PUSH
15216: LD_INT 0
15218: PUSH
15219: LD_INT 0
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: ST_TO_ADDR
// hc_agressivity := 0 ;
15228: LD_ADDR_OWVAR 35
15232: PUSH
15233: LD_INT 0
15235: ST_TO_ADDR
// un := CreateHuman ;
15236: LD_ADDR_VAR 0 3
15240: PUSH
15241: CALL_OW 44
15245: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15246: LD_VAR 0 3
15250: PPUSH
15251: LD_INT 23
15253: PPUSH
15254: LD_INT 0
15256: PPUSH
15257: CALL_OW 49
// end ;
15261: GO 15170
15263: POP
15264: POP
// for i := 1 to [ 4 , 3 , 3 , 3 ] [ Difficulty ] do
15265: LD_ADDR_VAR 0 2
15269: PUSH
15270: DOUBLE
15271: LD_INT 1
15273: DEC
15274: ST_TO_ADDR
15275: LD_INT 4
15277: PUSH
15278: LD_INT 3
15280: PUSH
15281: LD_INT 3
15283: PUSH
15284: LD_INT 3
15286: PUSH
15287: EMPTY
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: PUSH
15293: LD_OWVAR 67
15297: ARRAY
15298: PUSH
15299: FOR_TO
15300: IFFALSE 15409
// begin hc_sex := sex_male ;
15302: LD_ADDR_OWVAR 27
15306: PUSH
15307: LD_INT 1
15309: ST_TO_ADDR
// uc_side := 0 ;
15310: LD_ADDR_OWVAR 20
15314: PUSH
15315: LD_INT 0
15317: ST_TO_ADDR
// uc_nation := nation_nature ;
15318: LD_ADDR_OWVAR 21
15322: PUSH
15323: LD_INT 0
15325: ST_TO_ADDR
// hc_class := class_apeman ;
15326: LD_ADDR_OWVAR 28
15330: PUSH
15331: LD_INT 12
15333: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
15334: LD_ADDR_OWVAR 31
15338: PUSH
15339: LD_INT 0
15341: PPUSH
15342: LD_INT 2
15344: PPUSH
15345: CALL_OW 12
15349: PUSH
15350: LD_INT 0
15352: PUSH
15353: LD_INT 0
15355: PUSH
15356: LD_INT 0
15358: PUSH
15359: EMPTY
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: ST_TO_ADDR
// hc_agressivity = rand ( - 10 , 10 ) ;
15365: LD_ADDR_OWVAR 35
15369: PUSH
15370: LD_INT 10
15372: NEG
15373: PPUSH
15374: LD_INT 10
15376: PPUSH
15377: CALL_OW 12
15381: ST_TO_ADDR
// un := CreateHuman ;
15382: LD_ADDR_VAR 0 3
15386: PUSH
15387: CALL_OW 44
15391: ST_TO_ADDR
// PlaceUnitArea ( un , ApeNatureArea , false ) ;
15392: LD_VAR 0 3
15396: PPUSH
15397: LD_INT 26
15399: PPUSH
15400: LD_INT 0
15402: PPUSH
15403: CALL_OW 49
// end ;
15407: GO 15299
15409: POP
15410: POP
// end ; end_of_file
15411: LD_VAR 0 1
15415: RET
// on UnitDestroyed ( unit ) do var i ;
15416: LD_INT 0
15418: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
15419: LD_VAR 0 1
15423: PPUSH
15424: CALL 33556 0 1
// if unit = JMM then
15428: LD_VAR 0 1
15432: PUSH
15433: LD_EXP 1
15437: EQUAL
15438: IFFALSE 15447
// YouLost ( JMM ) ;
15440: LD_STRING JMM
15442: PPUSH
15443: CALL_OW 104
// if unit in russianTanks then
15447: LD_VAR 0 1
15451: PUSH
15452: LD_EXP 32
15456: IN
15457: IFFALSE 15475
// russianTanks := russianTanks diff unit ;
15459: LD_ADDR_EXP 32
15463: PUSH
15464: LD_EXP 32
15468: PUSH
15469: LD_VAR 0 1
15473: DIFF
15474: ST_TO_ADDR
// if unit in russianTimeLapsers then
15475: LD_VAR 0 1
15479: PUSH
15480: LD_EXP 33
15484: IN
15485: IFFALSE 15503
// russianTimeLapsers := russianTimeLapsers diff unit ;
15487: LD_ADDR_EXP 33
15491: PUSH
15492: LD_EXP 33
15496: PUSH
15497: LD_VAR 0 1
15501: DIFF
15502: ST_TO_ADDR
// if unit in RuScientists then
15503: LD_VAR 0 1
15507: PUSH
15508: LD_EXP 27
15512: IN
15513: IFFALSE 15545
// begin RuScientists := RuScientists diff unit ;
15515: LD_ADDR_EXP 27
15519: PUSH
15520: LD_EXP 27
15524: PUSH
15525: LD_VAR 0 1
15529: DIFF
15530: ST_TO_ADDR
// sciCounter := sciCounter + 1 ;
15531: LD_ADDR_EXP 28
15535: PUSH
15536: LD_EXP 28
15540: PUSH
15541: LD_INT 1
15543: PLUS
15544: ST_TO_ADDR
// end ; end ;
15545: PPOPN 2
15547: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_laser then
15548: LD_VAR 0 3
15552: PPUSH
15553: CALL_OW 264
15557: PUSH
15558: LD_INT 9
15560: EQUAL
15561: IFFALSE 15577
// laserCounterDestroy := laserCounterDestroy + 1 ;
15563: LD_ADDR_EXP 43
15567: PUSH
15568: LD_EXP 43
15572: PUSH
15573: LD_INT 1
15575: PLUS
15576: ST_TO_ADDR
// end ;
15577: PPOPN 3
15579: END
// on UnitTeleported ( building , human ) do begin if human in FilterAllUnits ( [ f_side , 6 ] ) then
15580: LD_VAR 0 2
15584: PUSH
15585: LD_INT 22
15587: PUSH
15588: LD_INT 6
15590: PUSH
15591: EMPTY
15592: LIST
15593: LIST
15594: PPUSH
15595: CALL_OW 69
15599: IN
15600: IFFALSE 15655
// begin if GetType ( human ) = unit_vehicle then
15602: LD_VAR 0 2
15606: PPUSH
15607: CALL_OW 247
15611: PUSH
15612: LD_INT 2
15614: EQUAL
15615: IFFALSE 15632
// human := IsDrivenBy ( human ) ;
15617: LD_ADDR_VAR 0 2
15621: PUSH
15622: LD_VAR 0 2
15626: PPUSH
15627: CALL_OW 311
15631: ST_TO_ADDR
// SetTag ( human , GetTag ( human ) + 10 ) ;
15632: LD_VAR 0 2
15636: PPUSH
15637: LD_VAR 0 2
15641: PPUSH
15642: CALL_OW 110
15646: PUSH
15647: LD_INT 10
15649: PLUS
15650: PPUSH
15651: CALL_OW 109
// end ; if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
15655: LD_VAR 0 1
15659: PUSH
15660: LD_INT 10
15662: EQUAL
15663: PUSH
15664: LD_VAR 0 2
15668: PPUSH
15669: CALL_OW 255
15673: PUSH
15674: LD_INT 1
15676: EQUAL
15677: AND
15678: PUSH
15679: LD_EXP 40
15683: PUSH
15684: LD_INT 0
15686: EQUAL
15687: AND
15688: IFFALSE 15800
// begin eventVar1 = 1 ;
15690: LD_ADDR_EXP 40
15694: PUSH
15695: LD_INT 1
15697: ST_TO_ADDR
// teleportExplored = 1 ;
15698: LD_ADDR_EXP 26
15702: PUSH
15703: LD_INT 1
15705: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
15706: LD_STRING M2a
15708: PPUSH
15709: CALL_OW 337
// wait ( 0 0$2 ) ;
15713: LD_INT 70
15715: PPUSH
15716: CALL_OW 67
// DialogueOn ;
15720: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
15724: LD_INT 22
15726: PUSH
15727: LD_INT 1
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: PUSH
15734: LD_INT 21
15736: PUSH
15737: LD_INT 1
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: PPUSH
15748: CALL_OW 69
15752: PPUSH
15753: LD_STRING DT3a-Sol1-1
15755: PPUSH
15756: LD_STRING DT3a-FSol1-1
15758: PPUSH
15759: CALL 12137 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
15763: LD_EXP 1
15767: PPUSH
15768: LD_STRING DT3a-JMM-1
15770: PPUSH
15771: CALL_OW 88
// CenterNowOnUnits ( human ) ;
15775: LD_VAR 0 2
15779: PPUSH
15780: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
15784: LD_EXP 1
15788: PPUSH
15789: LD_STRING DT3a-JMM-1a
15791: PPUSH
15792: CALL_OW 88
// DialogueOff ;
15796: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
15800: LD_VAR 0 1
15804: PUSH
15805: LD_INT 10
15807: EQUAL
15808: PUSH
15809: LD_VAR 0 2
15813: PPUSH
15814: CALL_OW 247
15818: PUSH
15819: LD_INT 2
15821: EQUAL
15822: AND
15823: PUSH
15824: LD_VAR 0 2
15828: PPUSH
15829: CALL_OW 255
15833: PUSH
15834: LD_INT 3
15836: EQUAL
15837: AND
15838: IFFALSE 15904
// begin if vehicleTeleported = 0 then
15840: LD_EXP 21
15844: PUSH
15845: LD_INT 0
15847: EQUAL
15848: IFFALSE 15865
// begin wait ( 0 0$03 ) ;
15850: LD_INT 105
15852: PPUSH
15853: CALL_OW 67
// vehicleTeleported := 1 ;
15857: LD_ADDR_EXP 21
15861: PUSH
15862: LD_INT 1
15864: ST_TO_ADDR
// end ; if vehicleTeleported = 2 then
15865: LD_EXP 21
15869: PUSH
15870: LD_INT 2
15872: EQUAL
15873: IFFALSE 15890
// begin wait ( 0 0$03 ) ;
15875: LD_INT 105
15877: PPUSH
15878: CALL_OW 67
// vehicleTeleported := 3 ;
15882: LD_ADDR_EXP 21
15886: PUSH
15887: LD_INT 3
15889: ST_TO_ADDR
// end ; tpCounter := tpCounter + 1 ;
15890: LD_ADDR_EXP 22
15894: PUSH
15895: LD_EXP 22
15899: PUSH
15900: LD_INT 1
15902: PLUS
15903: ST_TO_ADDR
// end ; end ;
15904: PPOPN 2
15906: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
15907: LD_VAR 0 1
15911: PPUSH
15912: LD_VAR 0 2
15916: PPUSH
15917: CALL 33678 0 2
// if GetWeapon ( vehicle ) = us_rocket_launcher then
15921: LD_VAR 0 1
15925: PPUSH
15926: CALL_OW 264
15930: PUSH
15931: LD_INT 7
15933: EQUAL
15934: IFFALSE 15944
// rocketBuilded := true ;
15936: LD_ADDR_EXP 44
15940: PUSH
15941: LD_INT 1
15943: ST_TO_ADDR
// if GetSide ( vehicle ) <> 3 then
15944: LD_VAR 0 1
15948: PPUSH
15949: CALL_OW 255
15953: PUSH
15954: LD_INT 3
15956: NONEQUAL
15957: IFFALSE 15961
// exit ;
15959: GO 16080
// if factory in [ ru_fact , rufab2 ] then
15961: LD_VAR 0 2
15965: PUSH
15966: LD_INT 21
15968: PUSH
15969: LD_INT 112
15971: PUSH
15972: EMPTY
15973: LIST
15974: LIST
15975: IN
15976: IFFALSE 16080
// begin if GetWeapon ( vehicle ) = ru_time_lapser then
15978: LD_VAR 0 1
15982: PPUSH
15983: CALL_OW 264
15987: PUSH
15988: LD_INT 49
15990: EQUAL
15991: IFFALSE 16027
// begin russianTimeLapsers := Join ( russianTimeLapsers , vehicle ) ;
15993: LD_ADDR_EXP 33
15997: PUSH
15998: LD_EXP 33
16002: PPUSH
16003: LD_VAR 0 1
16007: PPUSH
16008: CALL 74877 0 2
16012: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
16013: LD_VAR 0 1
16017: PPUSH
16018: LD_INT 137
16020: PPUSH
16021: CALL_OW 120
// end else
16025: GO 16080
// if not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_big_cargo_bay , ru_crane , ru_bulldozer ] then
16027: LD_VAR 0 1
16031: PPUSH
16032: CALL_OW 264
16036: PUSH
16037: LD_INT 51
16039: PUSH
16040: LD_EXP 46
16044: PUSH
16045: LD_INT 52
16047: PUSH
16048: LD_INT 53
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: LIST
16055: LIST
16056: IN
16057: NOT
16058: IFFALSE 16080
// begin russianTanks := Join ( russianTanks , vehicle ) ;
16060: LD_ADDR_EXP 32
16064: PUSH
16065: LD_EXP 32
16069: PPUSH
16070: LD_VAR 0 1
16074: PPUSH
16075: CALL 74877 0 2
16079: ST_TO_ADDR
// end ; end ; end ;
16080: PPOPN 2
16082: END
// on LeaveVehicle ( vehicle , human ) do var i ;
16083: LD_INT 0
16085: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
16086: LD_VAR 0 2
16090: PPUSH
16091: CALL_OW 255
16095: PUSH
16096: LD_INT 3
16098: EQUAL
16099: PUSH
16100: LD_VAR 0 2
16104: PPUSH
16105: CALL_OW 257
16109: PUSH
16110: LD_INT 3
16112: EQUAL
16113: AND
16114: PUSH
16115: LD_INT 21
16117: PPUSH
16118: CALL_OW 255
16122: PUSH
16123: LD_INT 3
16125: EQUAL
16126: AND
16127: PUSH
16128: LD_INT 21
16130: PPUSH
16131: CALL_OW 302
16135: AND
16136: IFFALSE 16150
// ComEnterUnit ( human , ru_fact ) ;
16138: LD_VAR 0 2
16142: PPUSH
16143: LD_INT 21
16145: PPUSH
16146: CALL_OW 120
// end ;
16150: PPOPN 3
16152: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16153: LD_VAR 0 1
16157: PPUSH
16158: CALL 33662 0 1
// end ; end_of_file
16162: PPOPN 1
16164: END
// every 0 0$1 trigger ruAI = 1 do
16165: LD_EXP 34
16169: PUSH
16170: LD_INT 1
16172: EQUAL
16173: IFFALSE 16285
16175: GO 16177
16177: DISABLE
// begin enable ;
16178: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
16179: LD_INT 3
16181: PPUSH
16182: LD_INT 6
16184: PPUSH
16185: LD_INT 9
16187: PPUSH
16188: LD_EXP 31
16192: PPUSH
16193: CALL 12987 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
16197: LD_INT 3
16199: PPUSH
16200: LD_INT 4
16202: PPUSH
16203: LD_INT 10
16205: PPUSH
16206: LD_EXP 31
16210: PPUSH
16211: CALL 12987 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
16215: LD_INT 3
16217: PPUSH
16218: LD_INT 9
16220: PPUSH
16221: CALL 13822 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
16225: LD_INT 3
16227: PPUSH
16228: LD_INT 10
16230: PPUSH
16231: CALL 13822 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
16235: LD_INT 3
16237: PPUSH
16238: LD_INT 16
16240: PPUSH
16241: LD_INT 9
16243: PPUSH
16244: LD_INT 91
16246: PPUSH
16247: CALL 13354 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
16251: LD_INT 3
16253: PPUSH
16254: LD_INT 17
16256: PPUSH
16257: LD_INT 10
16259: PPUSH
16260: LD_INT 47
16262: PUSH
16263: LD_INT 129
16265: PUSH
16266: LD_INT 135
16268: PUSH
16269: EMPTY
16270: LIST
16271: LIST
16272: LIST
16273: PPUSH
16274: CALL 13354 0 4
// IntBazooka ( 3 ) ;
16278: LD_INT 3
16280: PPUSH
16281: CALL 14149 0 1
// end ;
16285: END
// every 0 0$30 trigger russianTanks >= [ 3 , 4 , 5 , 6 ] [ Difficulty ] do var j , tmp , target1 , target2 ;
16286: LD_EXP 32
16290: PUSH
16291: LD_INT 3
16293: PUSH
16294: LD_INT 4
16296: PUSH
16297: LD_INT 5
16299: PUSH
16300: LD_INT 6
16302: PUSH
16303: EMPTY
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: PUSH
16309: LD_OWVAR 67
16313: ARRAY
16314: GREATEREQUAL
16315: IFFALSE 16841
16317: GO 16319
16319: DISABLE
16320: LD_INT 0
16322: PPUSH
16323: PPUSH
16324: PPUSH
16325: PPUSH
// begin enable ;
16326: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
16327: LD_ADDR_VAR 0 2
16331: PUSH
16332: LD_EXP 32
16336: PUSH
16337: LD_EXP 33
16341: UNION
16342: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
16343: LD_ADDR_EXP 32
16347: PUSH
16348: LD_EXP 32
16352: PUSH
16353: LD_VAR 0 2
16357: DIFF
16358: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
16359: LD_ADDR_EXP 33
16363: PUSH
16364: LD_EXP 33
16368: PUSH
16369: LD_VAR 0 2
16373: DIFF
16374: ST_TO_ADDR
// if vehicleTeleported >= 4 then
16375: LD_EXP 21
16379: PUSH
16380: LD_INT 4
16382: GREATEREQUAL
16383: IFFALSE 16401
// attackTactic := rand ( 1 , 2 ) ;
16385: LD_ADDR_EXP 36
16389: PUSH
16390: LD_INT 1
16392: PPUSH
16393: LD_INT 2
16395: PPUSH
16396: CALL_OW 12
16400: ST_TO_ADDR
// if IsOk ( ruteleprt ) then
16401: LD_INT 10
16403: PPUSH
16404: CALL_OW 302
16408: IFFALSE 16491
// begin for j in tmp do
16410: LD_ADDR_VAR 0 1
16414: PUSH
16415: LD_VAR 0 2
16419: PUSH
16420: FOR_IN
16421: IFFALSE 16464
// if attackTactic < 2 then
16423: LD_EXP 36
16427: PUSH
16428: LD_INT 2
16430: LESS
16431: IFFALSE 16447
// ComEnterUnit ( j , ruteleprt ) else
16433: LD_VAR 0 1
16437: PPUSH
16438: LD_INT 10
16440: PPUSH
16441: CALL_OW 120
16445: GO 16462
// ComMoveXY ( j , 88 , 69 ) ;
16447: LD_VAR 0 1
16451: PPUSH
16452: LD_INT 88
16454: PPUSH
16455: LD_INT 69
16457: PPUSH
16458: CALL_OW 111
16462: GO 16420
16464: POP
16465: POP
// repeat wait ( 0 0$1 ) ;
16466: LD_INT 35
16468: PPUSH
16469: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
16473: LD_VAR 0 2
16477: PPUSH
16478: LD_INT 60
16480: PUSH
16481: EMPTY
16482: LIST
16483: PPUSH
16484: CALL_OW 72
16488: NOT
16489: IFFALSE 16466
// end ; repeat wait ( 0 0$1 ) ;
16491: LD_INT 35
16493: PPUSH
16494: CALL_OW 67
// for j in tmp do
16498: LD_ADDR_VAR 0 1
16502: PUSH
16503: LD_VAR 0 2
16507: PUSH
16508: FOR_IN
16509: IFFALSE 16832
// begin if IsDead ( j ) then
16511: LD_VAR 0 1
16515: PPUSH
16516: CALL_OW 301
16520: IFFALSE 16538
// tmp := tmp diff j ;
16522: LD_ADDR_VAR 0 2
16526: PUSH
16527: LD_VAR 0 2
16531: PUSH
16532: LD_VAR 0 1
16536: DIFF
16537: ST_TO_ADDR
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , j ) ;
16538: LD_ADDR_VAR 0 3
16542: PUSH
16543: LD_INT 81
16545: PUSH
16546: LD_INT 3
16548: PUSH
16549: EMPTY
16550: LIST
16551: LIST
16552: PPUSH
16553: CALL_OW 69
16557: PPUSH
16558: LD_VAR 0 1
16562: PPUSH
16563: CALL_OW 74
16567: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 3 ] , [ f_type , unit_human ] ] ] ) , j ) ;
16568: LD_ADDR_VAR 0 4
16572: PUSH
16573: LD_INT 81
16575: PUSH
16576: LD_INT 3
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: PUSH
16583: LD_INT 21
16585: PUSH
16586: LD_INT 1
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: PUSH
16593: EMPTY
16594: LIST
16595: LIST
16596: PUSH
16597: EMPTY
16598: LIST
16599: PPUSH
16600: CALL_OW 69
16604: PPUSH
16605: LD_VAR 0 1
16609: PPUSH
16610: CALL_OW 74
16614: ST_TO_ADDR
// if GetWeapon ( j ) = ru_time_lapser then
16615: LD_VAR 0 1
16619: PPUSH
16620: CALL_OW 264
16624: PUSH
16625: LD_INT 49
16627: EQUAL
16628: IFFALSE 16764
// begin if UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) > 1 and UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) then
16630: LD_VAR 0 2
16634: PPUSH
16635: LD_INT 3
16637: PUSH
16638: LD_INT 34
16640: PUSH
16641: LD_INT 49
16643: PUSH
16644: EMPTY
16645: LIST
16646: LIST
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: PPUSH
16652: CALL_OW 72
16656: PUSH
16657: LD_INT 1
16659: GREATER
16660: PUSH
16661: LD_VAR 0 2
16665: PPUSH
16666: LD_INT 3
16668: PUSH
16669: LD_INT 34
16671: PUSH
16672: LD_INT 49
16674: PUSH
16675: EMPTY
16676: LIST
16677: LIST
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: PPUSH
16683: CALL_OW 72
16687: AND
16688: IFFALSE 16738
// ComMoveUnit ( j , NearestUnitToUnit ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , j ) ) else
16690: LD_VAR 0 1
16694: PPUSH
16695: LD_VAR 0 2
16699: PPUSH
16700: LD_INT 3
16702: PUSH
16703: LD_INT 34
16705: PUSH
16706: LD_INT 49
16708: PUSH
16709: EMPTY
16710: LIST
16711: LIST
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: PPUSH
16717: CALL_OW 72
16721: PPUSH
16722: LD_VAR 0 1
16726: PPUSH
16727: CALL_OW 74
16731: PPUSH
16732: CALL_OW 112
16736: GO 16762
// ComMoveUnit ( j , NearestUnitToUnit ( target1 , j ) ) ;
16738: LD_VAR 0 1
16742: PPUSH
16743: LD_VAR 0 3
16747: PPUSH
16748: LD_VAR 0 1
16752: PPUSH
16753: CALL_OW 74
16757: PPUSH
16758: CALL_OW 112
// end else
16762: GO 16830
// begin if GetDistUnits ( j , target2 ) < GetDistUnits ( j , target1 ) + 2 then
16764: LD_VAR 0 1
16768: PPUSH
16769: LD_VAR 0 4
16773: PPUSH
16774: CALL_OW 296
16778: PUSH
16779: LD_VAR 0 1
16783: PPUSH
16784: LD_VAR 0 3
16788: PPUSH
16789: CALL_OW 296
16793: PUSH
16794: LD_INT 2
16796: PLUS
16797: LESS
16798: IFFALSE 16816
// ComAttackUnit ( j , target2 ) else
16800: LD_VAR 0 1
16804: PPUSH
16805: LD_VAR 0 4
16809: PPUSH
16810: CALL_OW 115
16814: GO 16830
// ComAttackUnit ( j , target1 ) ;
16816: LD_VAR 0 1
16820: PPUSH
16821: LD_VAR 0 3
16825: PPUSH
16826: CALL_OW 115
// end ; end ;
16830: GO 16508
16832: POP
16833: POP
// until not tmp ;
16834: LD_VAR 0 2
16838: NOT
16839: IFFALSE 16491
// end ;
16841: PPOPN 4
16843: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
16844: LD_INT 4
16846: PPUSH
16847: CALL_OW 303
16851: IFFALSE 16866
16853: GO 16855
16855: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
16856: LD_INT 3
16858: PPUSH
16859: LD_INT 4
16861: PPUSH
16862: CALL 14777 0 2
16866: END
// every 0 0$1 do
16867: GO 16869
16869: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
16870: LD_INT 3
16872: PPUSH
16873: LD_INT 91
16875: PPUSH
16876: LD_INT 3
16878: PPUSH
16879: CALL 12752 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
16883: LD_INT 3
16885: PPUSH
16886: LD_INT 47
16888: PPUSH
16889: LD_INT 3
16891: PPUSH
16892: CALL 12752 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
16896: LD_INT 3
16898: PPUSH
16899: LD_INT 129
16901: PPUSH
16902: LD_INT 3
16904: PPUSH
16905: CALL 12752 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
16909: LD_INT 3
16911: PPUSH
16912: LD_INT 3
16914: PPUSH
16915: LD_INT 3
16917: PPUSH
16918: CALL 12752 0 3
// end ;
16922: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
16923: LD_INT 22
16925: PUSH
16926: LD_INT 1
16928: PUSH
16929: EMPTY
16930: LIST
16931: LIST
16932: PUSH
16933: LD_INT 21
16935: PUSH
16936: LD_INT 3
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: PPUSH
16947: CALL_OW 69
16951: IFFALSE 17020
16953: GO 16955
16955: DISABLE
// begin wait ( 0 0$40 ) ;
16956: LD_INT 1400
16958: PPUSH
16959: CALL_OW 67
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
16963: LD_INT 3
16965: PPUSH
16966: LD_INT 21
16968: PPUSH
16969: LD_INT 3
16971: PUSH
16972: LD_INT 4
16974: PUSH
16975: LD_INT 5
16977: PUSH
16978: LD_INT 6
16980: PUSH
16981: EMPTY
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: PUSH
16987: LD_OWVAR 67
16991: ARRAY
16992: PPUSH
16993: LD_INT 46
16995: PUSH
16996: LD_INT 45
16998: PUSH
16999: LD_INT 44
17001: PUSH
17002: EMPTY
17003: LIST
17004: LIST
17005: LIST
17006: PPUSH
17007: LD_INT 3
17009: PPUSH
17010: LD_INT 3
17012: PPUSH
17013: LD_INT 24
17015: PPUSH
17016: CALL 14002 0 7
// end ;
17020: END
// every 6 6$0 + 2 2$00 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
17021: LD_EXP 20
17025: PUSH
17026: LD_INT 2
17028: EQUAL
17029: PUSH
17030: LD_INT 21
17032: PPUSH
17033: CALL_OW 255
17037: PUSH
17038: LD_INT 3
17040: EQUAL
17041: AND
17042: PUSH
17043: LD_INT 112
17045: PPUSH
17046: CALL_OW 255
17050: PUSH
17051: LD_INT 3
17053: EQUAL
17054: AND
17055: PUSH
17056: LD_INT 21
17058: PPUSH
17059: CALL_OW 302
17063: AND
17064: PUSH
17065: LD_INT 112
17067: PPUSH
17068: CALL_OW 302
17072: AND
17073: PUSH
17074: LD_INT 22
17076: PUSH
17077: LD_INT 3
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: LD_INT 21
17086: PUSH
17087: LD_INT 2
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: PUSH
17094: LD_INT 50
17096: PUSH
17097: EMPTY
17098: LIST
17099: PUSH
17100: LD_INT 3
17102: PUSH
17103: LD_INT 58
17105: PUSH
17106: EMPTY
17107: LIST
17108: PUSH
17109: EMPTY
17110: LIST
17111: LIST
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: PPUSH
17119: CALL_OW 69
17123: PUSH
17124: LD_INT 18
17126: PPUSH
17127: LD_INT 22
17129: PUSH
17130: LD_INT 3
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: PUSH
17137: LD_INT 21
17139: PUSH
17140: LD_INT 2
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PPUSH
17151: CALL_OW 70
17155: PUSH
17156: LD_INT 0
17158: EQUAL
17159: DIFF
17160: AND
17161: IFFALSE 17287
17163: GO 17165
17165: DISABLE
// begin enable ;
17166: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17167: LD_INT 3
17169: PPUSH
17170: LD_INT 21
17172: PPUSH
17173: LD_INT 3
17175: PUSH
17176: LD_INT 4
17178: PUSH
17179: LD_INT 5
17181: PUSH
17182: LD_INT 6
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: PUSH
17191: LD_OWVAR 67
17195: ARRAY
17196: PPUSH
17197: LD_INT 46
17199: PUSH
17200: LD_INT 45
17202: PUSH
17203: LD_INT 44
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: LIST
17210: PPUSH
17211: LD_INT 3
17213: PPUSH
17214: LD_INT 3
17216: PPUSH
17217: LD_INT 24
17219: PPUSH
17220: CALL 14002 0 7
// if russianTimeLapsers = 0 then
17224: LD_EXP 33
17228: PUSH
17229: LD_INT 0
17231: EQUAL
17232: IFFALSE 17287
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
17234: LD_INT 3
17236: PPUSH
17237: LD_INT 112
17239: PPUSH
17240: LD_INT 1
17242: PUSH
17243: LD_INT 2
17245: PUSH
17246: LD_INT 2
17248: PUSH
17249: LD_INT 2
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: PUSH
17258: LD_OWVAR 67
17262: ARRAY
17263: PPUSH
17264: LD_INT 49
17266: PUSH
17267: LD_INT 49
17269: PUSH
17270: EMPTY
17271: LIST
17272: LIST
17273: PPUSH
17274: LD_INT 3
17276: PPUSH
17277: LD_INT 3
17279: PPUSH
17280: LD_INT 24
17282: PPUSH
17283: CALL 14002 0 7
// end ;
17287: END
// every 0 0$1 trigger arabianMines do var i ;
17288: LD_EXP 37
17292: IFFALSE 17413
17294: GO 17296
17296: DISABLE
17297: LD_INT 0
17299: PPUSH
// begin enable ;
17300: ENABLE
// for i in arabianMines do
17301: LD_ADDR_VAR 0 1
17305: PUSH
17306: LD_EXP 37
17310: PUSH
17311: FOR_IN
17312: IFFALSE 17411
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
17314: LD_INT 22
17316: PUSH
17317: LD_INT 1
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: PUSH
17324: LD_INT 92
17326: PUSH
17327: LD_VAR 0 1
17331: PUSH
17332: LD_INT 1
17334: ARRAY
17335: PUSH
17336: LD_VAR 0 1
17340: PUSH
17341: LD_INT 2
17343: ARRAY
17344: PUSH
17345: LD_INT 3
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: LIST
17352: LIST
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: PPUSH
17358: CALL_OW 69
17362: IFFALSE 17409
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
17364: LD_VAR 0 1
17368: PUSH
17369: LD_INT 1
17371: ARRAY
17372: PPUSH
17373: LD_VAR 0 1
17377: PUSH
17378: LD_INT 2
17380: ARRAY
17381: PPUSH
17382: LD_INT 5
17384: PPUSH
17385: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
17389: LD_ADDR_EXP 37
17393: PUSH
17394: LD_EXP 37
17398: PPUSH
17399: LD_VAR 0 1
17403: PPUSH
17404: CALL_OW 3
17408: ST_TO_ADDR
// end ; end ;
17409: GO 17311
17411: POP
17412: POP
// end ;
17413: PPOPN 1
17415: END
// every 0 0$10 trigger vehicleTeleported >= 4 and tpCounter mod 12 = 0 do var i , hexes ;
17416: LD_EXP 21
17420: PUSH
17421: LD_INT 4
17423: GREATEREQUAL
17424: PUSH
17425: LD_EXP 22
17429: PUSH
17430: LD_INT 12
17432: MOD
17433: PUSH
17434: LD_INT 0
17436: EQUAL
17437: AND
17438: IFFALSE 17552
17440: GO 17442
17442: DISABLE
17443: LD_INT 0
17445: PPUSH
17446: PPUSH
// begin enable ;
17447: ENABLE
// hexes := [ [ 122 , 142 ] , [ 101 , 127 ] , [ 104 , 104 ] , [ 46 , 81 ] ] ;
17448: LD_ADDR_VAR 0 2
17452: PUSH
17453: LD_INT 122
17455: PUSH
17456: LD_INT 142
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: PUSH
17463: LD_INT 101
17465: PUSH
17466: LD_INT 127
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: PUSH
17473: LD_INT 104
17475: PUSH
17476: LD_INT 104
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: PUSH
17483: LD_INT 46
17485: PUSH
17486: LD_INT 81
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: ST_TO_ADDR
// i := rand ( 1 , 4 ) ;
17499: LD_ADDR_VAR 0 1
17503: PUSH
17504: LD_INT 1
17506: PPUSH
17507: LD_INT 4
17509: PPUSH
17510: CALL_OW 12
17514: ST_TO_ADDR
// TeleportExit ( ruteleprt , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17515: LD_INT 10
17517: PPUSH
17518: LD_VAR 0 2
17522: PUSH
17523: LD_VAR 0 1
17527: ARRAY
17528: PUSH
17529: LD_INT 1
17531: ARRAY
17532: PPUSH
17533: LD_VAR 0 2
17537: PUSH
17538: LD_VAR 0 1
17542: ARRAY
17543: PUSH
17544: LD_INT 2
17546: ARRAY
17547: PPUSH
17548: CALL_OW 243
// end ; end_of_file
17552: PPOPN 2
17554: END
// every 0 0$1 trigger IsDead ( ruheadlab ) do
17555: LD_INT 3
17557: PPUSH
17558: CALL_OW 301
17562: IFFALSE 17759
17564: GO 17566
17566: DISABLE
// begin DialogueOn ;
17567: CALL_OW 6
// if sciCounter = 0 then
17571: LD_EXP 28
17575: PUSH
17576: LD_INT 0
17578: EQUAL
17579: IFFALSE 17607
// begin Say ( JMM , D7a-JMM-1 ) ;
17581: LD_EXP 1
17585: PPUSH
17586: LD_STRING D7a-JMM-1
17588: PPUSH
17589: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
17593: LD_EXP 15
17597: PPUSH
17598: LD_STRING D7a-Pow-1
17600: PPUSH
17601: CALL_OW 94
// end else
17605: GO 17751
// if sciCounter < 6 then
17607: LD_EXP 28
17611: PUSH
17612: LD_INT 6
17614: LESS
17615: IFFALSE 17643
// begin Say ( JMM , D7b-JMM-1 ) ;
17617: LD_EXP 1
17621: PPUSH
17622: LD_STRING D7b-JMM-1
17624: PPUSH
17625: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
17629: LD_EXP 15
17633: PPUSH
17634: LD_STRING D7b-Pow-1
17636: PPUSH
17637: CALL_OW 94
// end else
17641: GO 17751
// begin Say ( JMM , D7c-JMM-1 ) ;
17643: LD_EXP 1
17647: PPUSH
17648: LD_STRING D7c-JMM-1
17650: PPUSH
17651: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
17655: LD_EXP 15
17659: PPUSH
17660: LD_STRING D7c-Pow-1
17662: PPUSH
17663: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
17667: LD_EXP 1
17671: PPUSH
17672: LD_STRING D7d-JMM-1
17674: PPUSH
17675: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
17679: LD_EXP 15
17683: PPUSH
17684: LD_STRING D7d-Pow-1
17686: PPUSH
17687: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
17691: LD_EXP 1
17695: PPUSH
17696: LD_STRING D7d-JMM-2
17698: PPUSH
17699: CALL_OW 88
// if askSiberite = 1 then
17703: LD_EXP 25
17707: PUSH
17708: LD_INT 1
17710: EQUAL
17711: IFFALSE 17727
// Say ( JMM , D7d-JMM-2a ) else
17713: LD_EXP 1
17717: PPUSH
17718: LD_STRING D7d-JMM-2a
17720: PPUSH
17721: CALL_OW 88
17725: GO 17739
// SayRadio ( Powell , D7d-Pow-2 ) ;
17727: LD_EXP 15
17731: PPUSH
17732: LD_STRING D7d-Pow-2
17734: PPUSH
17735: CALL_OW 94
// SayRadio ( Powell , D7d-Pow-2a ) ;
17739: LD_EXP 15
17743: PPUSH
17744: LD_STRING D7d-Pow-2a
17746: PPUSH
17747: CALL_OW 94
// end ; DialogueOff ;
17751: CALL_OW 7
// FinishMission ;
17755: CALL 17760 0 0
// end ;
17759: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
17760: LD_INT 0
17762: PPUSH
17763: PPUSH
17764: PPUSH
17765: PPUSH
// m1 := false ;
17766: LD_ADDR_VAR 0 2
17770: PUSH
17771: LD_INT 0
17773: ST_TO_ADDR
// m2 := false ;
17774: LD_ADDR_VAR 0 3
17778: PUSH
17779: LD_INT 0
17781: ST_TO_ADDR
// m3 := false ;
17782: LD_ADDR_VAR 0 4
17786: PUSH
17787: LD_INT 0
17789: ST_TO_ADDR
// if not westPathUsed then
17790: LD_EXP 42
17794: NOT
17795: IFFALSE 17804
// SetAchievement ( ACH_PATH ) ;
17797: LD_STRING ACH_PATH
17799: PPUSH
17800: CALL_OW 543
// if not rocketBuilded then
17804: LD_EXP 44
17808: NOT
17809: IFFALSE 17825
// begin wait ( 3 ) ;
17811: LD_INT 3
17813: PPUSH
17814: CALL_OW 67
// SetAchievement ( ACH_ROCKET ) ;
17818: LD_STRING ACH_ROCKET
17820: PPUSH
17821: CALL_OW 543
// end ; if tick <= 40 40$00 then
17825: LD_OWVAR 1
17829: PUSH
17830: LD_INT 84000
17832: LESSEQUAL
17833: IFFALSE 17849
// begin wait ( 3 ) ;
17835: LD_INT 3
17837: PPUSH
17838: CALL_OW 67
// SetAchievement ( ACH_ASPEED_12 ) ;
17842: LD_STRING ACH_ASPEED_12
17844: PPUSH
17845: CALL_OW 543
// end ; if teleportExplored = 1 then
17849: LD_EXP 26
17853: PUSH
17854: LD_INT 1
17856: EQUAL
17857: IFFALSE 17879
// begin m1 := true ;
17859: LD_ADDR_VAR 0 2
17863: PUSH
17864: LD_INT 1
17866: ST_TO_ADDR
// AddMedal ( Teleport , 1 ) ;
17867: LD_STRING Teleport
17869: PPUSH
17870: LD_INT 1
17872: PPUSH
17873: CALL_OW 101
// end else
17877: GO 17890
// AddMedal ( Teleport , - 1 ) ;
17879: LD_STRING Teleport
17881: PPUSH
17882: LD_INT 1
17884: NEG
17885: PPUSH
17886: CALL_OW 101
// if sciCounter > 2 then
17890: LD_EXP 28
17894: PUSH
17895: LD_INT 2
17897: GREATER
17898: IFFALSE 17920
// begin m2 := true ;
17900: LD_ADDR_VAR 0 3
17904: PUSH
17905: LD_INT 1
17907: ST_TO_ADDR
// AddMedal ( Materials , 1 ) ;
17908: LD_STRING Materials
17910: PPUSH
17911: LD_INT 1
17913: PPUSH
17914: CALL_OW 101
// end else
17918: GO 17931
// AddMedal ( Materials , - 1 ) ;
17920: LD_STRING Materials
17922: PPUSH
17923: LD_INT 1
17925: NEG
17926: PPUSH
17927: CALL_OW 101
// if sciCounter >= 6 then
17931: LD_EXP 28
17935: PUSH
17936: LD_INT 6
17938: GREATEREQUAL
17939: IFFALSE 17971
// begin m3 := true ;
17941: LD_ADDR_VAR 0 4
17945: PUSH
17946: LD_INT 1
17948: ST_TO_ADDR
// AddMedal ( Scientists , 1 ) ;
17949: LD_STRING Scientists
17951: PPUSH
17952: LD_INT 1
17954: PPUSH
17955: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
17959: LD_INT 1
17961: PPUSH
17962: LD_STRING 12_SciDed_1
17964: PPUSH
17965: CALL_OW 39
// end else
17969: GO 17992
// begin AddMedal ( Scientists , - 1 ) ;
17971: LD_STRING Scientists
17973: PPUSH
17974: LD_INT 1
17976: NEG
17977: PPUSH
17978: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
17982: LD_INT 0
17984: PPUSH
17985: LD_STRING 12_SciDed_1
17987: PPUSH
17988: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
17992: LD_EXP 24
17996: PPUSH
17997: LD_STRING 12_MainDepositFake_1
17999: PPUSH
18000: CALL_OW 39
// if m1 and m2 and m3 and Difficulty >= 3 then
18004: LD_VAR 0 2
18008: PUSH
18009: LD_VAR 0 3
18013: AND
18014: PUSH
18015: LD_VAR 0 4
18019: AND
18020: PUSH
18021: LD_OWVAR 67
18025: PUSH
18026: LD_INT 3
18028: GREATEREQUAL
18029: AND
18030: IFFALSE 18042
// SetAchievementEX ( ACH_AMER , 12 ) ;
18032: LD_STRING ACH_AMER
18034: PPUSH
18035: LD_INT 12
18037: PPUSH
18038: CALL_OW 564
// GiveMedals ( MAIN ) ;
18042: LD_STRING MAIN
18044: PPUSH
18045: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
18049: LD_INT 22
18051: PUSH
18052: LD_INT 1
18054: PUSH
18055: EMPTY
18056: LIST
18057: LIST
18058: PUSH
18059: LD_INT 21
18061: PUSH
18062: LD_INT 1
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: PUSH
18069: LD_INT 2
18071: PUSH
18072: LD_INT 25
18074: PUSH
18075: LD_INT 1
18077: PUSH
18078: EMPTY
18079: LIST
18080: LIST
18081: PUSH
18082: LD_INT 25
18084: PUSH
18085: LD_INT 2
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PUSH
18092: LD_INT 25
18094: PUSH
18095: LD_INT 3
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: PUSH
18102: LD_INT 25
18104: PUSH
18105: LD_INT 4
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: PUSH
18112: LD_INT 25
18114: PUSH
18115: LD_INT 5
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: PUSH
18122: LD_INT 25
18124: PUSH
18125: LD_INT 8
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: LIST
18145: PPUSH
18146: CALL_OW 69
18150: PPUSH
18151: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18155: LD_EXP 1
18159: PPUSH
18160: LD_EXP 39
18164: PUSH
18165: LD_STRING JMM
18167: STR
18168: PPUSH
18169: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18173: LD_EXP 7
18177: PPUSH
18178: LD_EXP 39
18182: PUSH
18183: LD_STRING Brown
18185: STR
18186: PPUSH
18187: CALL 12097 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18191: LD_EXP 3
18195: PPUSH
18196: LD_EXP 39
18200: PUSH
18201: LD_STRING Donaldson
18203: STR
18204: PPUSH
18205: CALL 12097 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18209: LD_EXP 4
18213: PPUSH
18214: LD_EXP 39
18218: PUSH
18219: LD_STRING Bobby
18221: STR
18222: PPUSH
18223: CALL 12097 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18227: LD_EXP 5
18231: PPUSH
18232: LD_EXP 39
18236: PUSH
18237: LD_STRING Cyrus
18239: STR
18240: PPUSH
18241: CALL 12097 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18245: LD_EXP 2
18249: PPUSH
18250: LD_EXP 39
18254: PUSH
18255: LD_STRING Lisa
18257: STR
18258: PPUSH
18259: CALL 12097 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18263: LD_EXP 12
18267: PPUSH
18268: LD_EXP 39
18272: PUSH
18273: LD_STRING Frank
18275: STR
18276: PPUSH
18277: CALL 12097 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
18281: LD_EXP 13
18285: PPUSH
18286: LD_EXP 39
18290: PUSH
18291: LD_STRING Kikuchi
18293: STR
18294: PPUSH
18295: CALL 12097 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
18299: LD_EXP 9
18303: PPUSH
18304: LD_EXP 39
18308: PUSH
18309: LD_STRING Houten
18311: STR
18312: PPUSH
18313: CALL 12097 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
18317: LD_EXP 11
18321: PPUSH
18322: LD_EXP 39
18326: PUSH
18327: LD_STRING Gary
18329: STR
18330: PPUSH
18331: CALL 12097 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
18335: LD_EXP 10
18339: PPUSH
18340: LD_EXP 39
18344: PUSH
18345: LD_STRING Cornell
18347: STR
18348: PPUSH
18349: CALL 12097 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18353: LD_EXP 6
18357: PPUSH
18358: LD_EXP 39
18362: PUSH
18363: LD_STRING Denis
18365: STR
18366: PPUSH
18367: CALL 12097 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18371: LD_EXP 8
18375: PPUSH
18376: LD_EXP 39
18380: PUSH
18381: LD_STRING Gladstone
18383: STR
18384: PPUSH
18385: CALL 12097 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
18389: LD_INT 22
18391: PUSH
18392: LD_INT 1
18394: PUSH
18395: EMPTY
18396: LIST
18397: LIST
18398: PUSH
18399: LD_INT 23
18401: PUSH
18402: LD_INT 1
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: PUSH
18409: LD_INT 21
18411: PUSH
18412: LD_INT 1
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: PUSH
18419: LD_INT 2
18421: PUSH
18422: LD_INT 25
18424: PUSH
18425: LD_INT 1
18427: PUSH
18428: EMPTY
18429: LIST
18430: LIST
18431: PUSH
18432: LD_INT 25
18434: PUSH
18435: LD_INT 2
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: PUSH
18442: LD_INT 25
18444: PUSH
18445: LD_INT 3
18447: PUSH
18448: EMPTY
18449: LIST
18450: LIST
18451: PUSH
18452: LD_INT 25
18454: PUSH
18455: LD_INT 4
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: PUSH
18462: LD_INT 25
18464: PUSH
18465: LD_INT 5
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: PUSH
18472: LD_INT 25
18474: PUSH
18475: LD_INT 8
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: PUSH
18491: EMPTY
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: PPUSH
18497: CALL_OW 69
18501: PUSH
18502: LD_EXP 1
18506: PUSH
18507: LD_EXP 7
18511: PUSH
18512: LD_EXP 3
18516: PUSH
18517: LD_EXP 4
18521: PUSH
18522: LD_EXP 5
18526: PUSH
18527: LD_EXP 2
18531: PUSH
18532: LD_EXP 12
18536: PUSH
18537: LD_EXP 8
18541: PUSH
18542: LD_EXP 13
18546: PUSH
18547: LD_EXP 6
18551: PUSH
18552: LD_EXP 9
18556: PUSH
18557: LD_EXP 11
18561: PUSH
18562: LD_EXP 10
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: DIFF
18582: PPUSH
18583: LD_STRING 12_other_survivors
18585: PPUSH
18586: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
18590: LD_INT 22
18592: PUSH
18593: LD_INT 1
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: PUSH
18600: LD_INT 23
18602: PUSH
18603: LD_INT 2
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PUSH
18610: LD_INT 21
18612: PUSH
18613: LD_INT 1
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: PUSH
18620: LD_INT 2
18622: PUSH
18623: LD_INT 25
18625: PUSH
18626: LD_INT 1
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: PUSH
18633: LD_INT 25
18635: PUSH
18636: LD_INT 2
18638: PUSH
18639: EMPTY
18640: LIST
18641: LIST
18642: PUSH
18643: LD_INT 25
18645: PUSH
18646: LD_INT 3
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: PUSH
18653: LD_INT 25
18655: PUSH
18656: LD_INT 4
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: PUSH
18663: LD_INT 25
18665: PUSH
18666: LD_INT 5
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: PUSH
18673: LD_INT 25
18675: PUSH
18676: LD_INT 8
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: PUSH
18692: EMPTY
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: PPUSH
18698: CALL_OW 69
18702: PPUSH
18703: LD_STRING 12_kurt_squad
18705: PPUSH
18706: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
18710: LD_EXP 14
18714: PPUSH
18715: LD_STRING 12_others
18717: PPUSH
18718: CALL_OW 38
// YouWin ;
18722: CALL_OW 103
// end ; end_of_file
18726: LD_VAR 0 1
18730: RET
// every 0 0$01 trigger ruAI do
18731: LD_EXP 34
18735: IFFALSE 19045
18737: GO 18739
18739: DISABLE
// begin repeat wait ( 0 0$08 ) ;
18740: LD_INT 280
18742: PPUSH
18743: CALL_OW 67
// if cratesSpawned < 12 then
18747: LD_EXP 38
18751: PUSH
18752: LD_INT 12
18754: LESS
18755: IFFALSE 18807
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
18757: LD_INT 105
18759: PPUSH
18760: LD_INT 350
18762: PPUSH
18763: CALL_OW 12
18767: PPUSH
18768: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18772: LD_INT 3
18774: PPUSH
18775: LD_INT 5
18777: PPUSH
18778: CALL_OW 12
18782: PPUSH
18783: LD_INT 21
18785: PPUSH
18786: LD_INT 1
18788: PPUSH
18789: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18793: LD_ADDR_EXP 38
18797: PUSH
18798: LD_EXP 38
18802: PUSH
18803: LD_INT 1
18805: PLUS
18806: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 32 then
18807: LD_EXP 38
18811: PUSH
18812: LD_INT 12
18814: GREATEREQUAL
18815: PUSH
18816: LD_EXP 38
18820: PUSH
18821: LD_INT 32
18823: LESS
18824: AND
18825: IFFALSE 18877
// begin wait ( rand ( 0 0$12 , 0 0$20 ) ) ;
18827: LD_INT 420
18829: PPUSH
18830: LD_INT 700
18832: PPUSH
18833: CALL_OW 12
18837: PPUSH
18838: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18842: LD_INT 3
18844: PPUSH
18845: LD_INT 5
18847: PPUSH
18848: CALL_OW 12
18852: PPUSH
18853: LD_INT 21
18855: PPUSH
18856: LD_INT 1
18858: PPUSH
18859: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18863: LD_ADDR_EXP 38
18867: PUSH
18868: LD_EXP 38
18872: PUSH
18873: LD_INT 1
18875: PLUS
18876: ST_TO_ADDR
// end ; if cratesSpawned >= 32 then
18877: LD_EXP 38
18881: PUSH
18882: LD_INT 32
18884: GREATEREQUAL
18885: IFFALSE 18959
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
18887: LD_INT 21
18889: PPUSH
18890: CALL_OW 435
18894: PUSH
18895: LD_INT 14
18897: LESS
18898: IFFALSE 18909
// wait ( 0 0$10 ) else
18900: LD_INT 350
18902: PPUSH
18903: CALL_OW 67
18907: GO 18924
// wait ( rand ( 0 0$50 , 1 1$30 ) ) ;
18909: LD_INT 1750
18911: PPUSH
18912: LD_INT 3150
18914: PPUSH
18915: CALL_OW 12
18919: PPUSH
18920: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
18924: LD_INT 2
18926: PPUSH
18927: LD_INT 5
18929: PPUSH
18930: CALL_OW 12
18934: PPUSH
18935: LD_INT 21
18937: PPUSH
18938: LD_INT 1
18940: PPUSH
18941: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18945: LD_ADDR_EXP 38
18949: PUSH
18950: LD_EXP 38
18954: PUSH
18955: LD_INT 1
18957: PLUS
18958: ST_TO_ADDR
// end ; if cratesSpawned >= 110 then
18959: LD_EXP 38
18963: PUSH
18964: LD_INT 110
18966: GREATEREQUAL
18967: IFFALSE 19041
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
18969: LD_INT 21
18971: PPUSH
18972: CALL_OW 435
18976: PUSH
18977: LD_INT 14
18979: LESS
18980: IFFALSE 18991
// wait ( 0 0$20 ) else
18982: LD_INT 700
18984: PPUSH
18985: CALL_OW 67
18989: GO 19006
// wait ( rand ( 1 1$10 , 1 1$50 ) ) ;
18991: LD_INT 2450
18993: PPUSH
18994: LD_INT 3850
18996: PPUSH
18997: CALL_OW 12
19001: PPUSH
19002: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
19006: LD_INT 1
19008: PPUSH
19009: LD_INT 5
19011: PPUSH
19012: CALL_OW 12
19016: PPUSH
19017: LD_INT 21
19019: PPUSH
19020: LD_INT 1
19022: PPUSH
19023: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19027: LD_ADDR_EXP 38
19031: PUSH
19032: LD_EXP 38
19036: PUSH
19037: LD_INT 1
19039: PLUS
19040: ST_TO_ADDR
// end ; until false ;
19041: LD_INT 0
19043: IFFALSE 18740
// end ; end_of_file
19045: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
19046: LD_INT 0
19048: PPUSH
// ar_miner := 81 ;
19049: LD_ADDR_EXP 52
19053: PUSH
19054: LD_INT 81
19056: ST_TO_ADDR
// ar_crane := 88 ;
19057: LD_ADDR_EXP 51
19061: PUSH
19062: LD_INT 88
19064: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19065: LD_ADDR_EXP 46
19069: PUSH
19070: LD_INT 89
19072: ST_TO_ADDR
// us_hack := 99 ;
19073: LD_ADDR_EXP 47
19077: PUSH
19078: LD_INT 99
19080: ST_TO_ADDR
// us_artillery := 97 ;
19081: LD_ADDR_EXP 48
19085: PUSH
19086: LD_INT 97
19088: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19089: LD_ADDR_EXP 49
19093: PUSH
19094: LD_INT 91
19096: ST_TO_ADDR
// ar_mortar := 92 ;
19097: LD_ADDR_EXP 50
19101: PUSH
19102: LD_INT 92
19104: ST_TO_ADDR
// ru_flamethrower := 93 ;
19105: LD_ADDR_EXP 53
19109: PUSH
19110: LD_INT 93
19112: ST_TO_ADDR
// ru_radar := 98 ;
19113: LD_ADDR_EXP 45
19117: PUSH
19118: LD_INT 98
19120: ST_TO_ADDR
// tech_Artillery := 80 ;
19121: LD_ADDR_EXP 54
19125: PUSH
19126: LD_INT 80
19128: ST_TO_ADDR
// tech_RadMat := 81 ;
19129: LD_ADDR_EXP 55
19133: PUSH
19134: LD_INT 81
19136: ST_TO_ADDR
// tech_BasicTools := 82 ;
19137: LD_ADDR_EXP 56
19141: PUSH
19142: LD_INT 82
19144: ST_TO_ADDR
// tech_Cargo := 83 ;
19145: LD_ADDR_EXP 57
19149: PUSH
19150: LD_INT 83
19152: ST_TO_ADDR
// tech_Track := 84 ;
19153: LD_ADDR_EXP 58
19157: PUSH
19158: LD_INT 84
19160: ST_TO_ADDR
// tech_Crane := 85 ;
19161: LD_ADDR_EXP 59
19165: PUSH
19166: LD_INT 85
19168: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19169: LD_ADDR_EXP 60
19173: PUSH
19174: LD_INT 86
19176: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19177: LD_ADDR_EXP 61
19181: PUSH
19182: LD_INT 87
19184: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19185: LD_ADDR_EXP 62
19189: PUSH
19190: LD_INT 88
19192: ST_TO_ADDR
// class_mastodont := 31 ;
19193: LD_ADDR_EXP 63
19197: PUSH
19198: LD_INT 31
19200: ST_TO_ADDR
// class_horse := 21 ;
19201: LD_ADDR_EXP 64
19205: PUSH
19206: LD_INT 21
19208: ST_TO_ADDR
// end ;
19209: LD_VAR 0 1
19213: RET
// every 1 do
19214: GO 19216
19216: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
19217: CALL 19046 0 0
19221: END
// every 0 0$1 do
19222: GO 19224
19224: DISABLE
// begin enable ;
19225: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19226: LD_STRING updateTimer(
19228: PUSH
19229: LD_OWVAR 1
19233: STR
19234: PUSH
19235: LD_STRING );
19237: STR
19238: PPUSH
19239: CALL_OW 559
// end ;
19243: END
// export function SOS_MapStart ( ) ; begin
19244: LD_INT 0
19246: PPUSH
// if streamModeActive then
19247: LD_EXP 65
19251: IFFALSE 19260
// DefineStreamItems ( true ) ;
19253: LD_INT 1
19255: PPUSH
19256: CALL 20910 0 1
// UpdateFactoryWaypoints ( ) ;
19260: CALL 34494 0 0
// end ;
19264: LD_VAR 0 1
19268: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19269: LD_INT 0
19271: PPUSH
// if p2 = 100 then
19272: LD_VAR 0 2
19276: PUSH
19277: LD_INT 100
19279: EQUAL
19280: IFFALSE 20283
// begin if not StreamModeActive then
19282: LD_EXP 65
19286: NOT
19287: IFFALSE 19297
// StreamModeActive := true ;
19289: LD_ADDR_EXP 65
19293: PUSH
19294: LD_INT 1
19296: ST_TO_ADDR
// if p3 = 0 then
19297: LD_VAR 0 3
19301: PUSH
19302: LD_INT 0
19304: EQUAL
19305: IFFALSE 19311
// InitStreamMode ;
19307: CALL 20446 0 0
// if p3 = 1 then
19311: LD_VAR 0 3
19315: PUSH
19316: LD_INT 1
19318: EQUAL
19319: IFFALSE 19329
// sRocket := true ;
19321: LD_ADDR_EXP 70
19325: PUSH
19326: LD_INT 1
19328: ST_TO_ADDR
// if p3 = 2 then
19329: LD_VAR 0 3
19333: PUSH
19334: LD_INT 2
19336: EQUAL
19337: IFFALSE 19347
// sSpeed := true ;
19339: LD_ADDR_EXP 69
19343: PUSH
19344: LD_INT 1
19346: ST_TO_ADDR
// if p3 = 3 then
19347: LD_VAR 0 3
19351: PUSH
19352: LD_INT 3
19354: EQUAL
19355: IFFALSE 19365
// sEngine := true ;
19357: LD_ADDR_EXP 71
19361: PUSH
19362: LD_INT 1
19364: ST_TO_ADDR
// if p3 = 4 then
19365: LD_VAR 0 3
19369: PUSH
19370: LD_INT 4
19372: EQUAL
19373: IFFALSE 19383
// sSpec := true ;
19375: LD_ADDR_EXP 68
19379: PUSH
19380: LD_INT 1
19382: ST_TO_ADDR
// if p3 = 5 then
19383: LD_VAR 0 3
19387: PUSH
19388: LD_INT 5
19390: EQUAL
19391: IFFALSE 19401
// sLevel := true ;
19393: LD_ADDR_EXP 72
19397: PUSH
19398: LD_INT 1
19400: ST_TO_ADDR
// if p3 = 6 then
19401: LD_VAR 0 3
19405: PUSH
19406: LD_INT 6
19408: EQUAL
19409: IFFALSE 19419
// sArmoury := true ;
19411: LD_ADDR_EXP 73
19415: PUSH
19416: LD_INT 1
19418: ST_TO_ADDR
// if p3 = 7 then
19419: LD_VAR 0 3
19423: PUSH
19424: LD_INT 7
19426: EQUAL
19427: IFFALSE 19437
// sRadar := true ;
19429: LD_ADDR_EXP 74
19433: PUSH
19434: LD_INT 1
19436: ST_TO_ADDR
// if p3 = 8 then
19437: LD_VAR 0 3
19441: PUSH
19442: LD_INT 8
19444: EQUAL
19445: IFFALSE 19455
// sBunker := true ;
19447: LD_ADDR_EXP 75
19451: PUSH
19452: LD_INT 1
19454: ST_TO_ADDR
// if p3 = 9 then
19455: LD_VAR 0 3
19459: PUSH
19460: LD_INT 9
19462: EQUAL
19463: IFFALSE 19473
// sHack := true ;
19465: LD_ADDR_EXP 76
19469: PUSH
19470: LD_INT 1
19472: ST_TO_ADDR
// if p3 = 10 then
19473: LD_VAR 0 3
19477: PUSH
19478: LD_INT 10
19480: EQUAL
19481: IFFALSE 19491
// sFire := true ;
19483: LD_ADDR_EXP 77
19487: PUSH
19488: LD_INT 1
19490: ST_TO_ADDR
// if p3 = 11 then
19491: LD_VAR 0 3
19495: PUSH
19496: LD_INT 11
19498: EQUAL
19499: IFFALSE 19509
// sRefresh := true ;
19501: LD_ADDR_EXP 78
19505: PUSH
19506: LD_INT 1
19508: ST_TO_ADDR
// if p3 = 12 then
19509: LD_VAR 0 3
19513: PUSH
19514: LD_INT 12
19516: EQUAL
19517: IFFALSE 19527
// sExp := true ;
19519: LD_ADDR_EXP 79
19523: PUSH
19524: LD_INT 1
19526: ST_TO_ADDR
// if p3 = 13 then
19527: LD_VAR 0 3
19531: PUSH
19532: LD_INT 13
19534: EQUAL
19535: IFFALSE 19545
// sDepot := true ;
19537: LD_ADDR_EXP 80
19541: PUSH
19542: LD_INT 1
19544: ST_TO_ADDR
// if p3 = 14 then
19545: LD_VAR 0 3
19549: PUSH
19550: LD_INT 14
19552: EQUAL
19553: IFFALSE 19563
// sFlag := true ;
19555: LD_ADDR_EXP 81
19559: PUSH
19560: LD_INT 1
19562: ST_TO_ADDR
// if p3 = 15 then
19563: LD_VAR 0 3
19567: PUSH
19568: LD_INT 15
19570: EQUAL
19571: IFFALSE 19581
// sKamikadze := true ;
19573: LD_ADDR_EXP 89
19577: PUSH
19578: LD_INT 1
19580: ST_TO_ADDR
// if p3 = 16 then
19581: LD_VAR 0 3
19585: PUSH
19586: LD_INT 16
19588: EQUAL
19589: IFFALSE 19599
// sTroll := true ;
19591: LD_ADDR_EXP 90
19595: PUSH
19596: LD_INT 1
19598: ST_TO_ADDR
// if p3 = 17 then
19599: LD_VAR 0 3
19603: PUSH
19604: LD_INT 17
19606: EQUAL
19607: IFFALSE 19617
// sSlow := true ;
19609: LD_ADDR_EXP 91
19613: PUSH
19614: LD_INT 1
19616: ST_TO_ADDR
// if p3 = 18 then
19617: LD_VAR 0 3
19621: PUSH
19622: LD_INT 18
19624: EQUAL
19625: IFFALSE 19635
// sLack := true ;
19627: LD_ADDR_EXP 92
19631: PUSH
19632: LD_INT 1
19634: ST_TO_ADDR
// if p3 = 19 then
19635: LD_VAR 0 3
19639: PUSH
19640: LD_INT 19
19642: EQUAL
19643: IFFALSE 19653
// sTank := true ;
19645: LD_ADDR_EXP 94
19649: PUSH
19650: LD_INT 1
19652: ST_TO_ADDR
// if p3 = 20 then
19653: LD_VAR 0 3
19657: PUSH
19658: LD_INT 20
19660: EQUAL
19661: IFFALSE 19671
// sRemote := true ;
19663: LD_ADDR_EXP 95
19667: PUSH
19668: LD_INT 1
19670: ST_TO_ADDR
// if p3 = 21 then
19671: LD_VAR 0 3
19675: PUSH
19676: LD_INT 21
19678: EQUAL
19679: IFFALSE 19689
// sPowell := true ;
19681: LD_ADDR_EXP 96
19685: PUSH
19686: LD_INT 1
19688: ST_TO_ADDR
// if p3 = 22 then
19689: LD_VAR 0 3
19693: PUSH
19694: LD_INT 22
19696: EQUAL
19697: IFFALSE 19707
// sTeleport := true ;
19699: LD_ADDR_EXP 99
19703: PUSH
19704: LD_INT 1
19706: ST_TO_ADDR
// if p3 = 23 then
19707: LD_VAR 0 3
19711: PUSH
19712: LD_INT 23
19714: EQUAL
19715: IFFALSE 19725
// sOilTower := true ;
19717: LD_ADDR_EXP 101
19721: PUSH
19722: LD_INT 1
19724: ST_TO_ADDR
// if p3 = 24 then
19725: LD_VAR 0 3
19729: PUSH
19730: LD_INT 24
19732: EQUAL
19733: IFFALSE 19743
// sShovel := true ;
19735: LD_ADDR_EXP 102
19739: PUSH
19740: LD_INT 1
19742: ST_TO_ADDR
// if p3 = 25 then
19743: LD_VAR 0 3
19747: PUSH
19748: LD_INT 25
19750: EQUAL
19751: IFFALSE 19761
// sSheik := true ;
19753: LD_ADDR_EXP 103
19757: PUSH
19758: LD_INT 1
19760: ST_TO_ADDR
// if p3 = 26 then
19761: LD_VAR 0 3
19765: PUSH
19766: LD_INT 26
19768: EQUAL
19769: IFFALSE 19779
// sEarthquake := true ;
19771: LD_ADDR_EXP 105
19775: PUSH
19776: LD_INT 1
19778: ST_TO_ADDR
// if p3 = 27 then
19779: LD_VAR 0 3
19783: PUSH
19784: LD_INT 27
19786: EQUAL
19787: IFFALSE 19797
// sAI := true ;
19789: LD_ADDR_EXP 106
19793: PUSH
19794: LD_INT 1
19796: ST_TO_ADDR
// if p3 = 28 then
19797: LD_VAR 0 3
19801: PUSH
19802: LD_INT 28
19804: EQUAL
19805: IFFALSE 19815
// sCargo := true ;
19807: LD_ADDR_EXP 109
19811: PUSH
19812: LD_INT 1
19814: ST_TO_ADDR
// if p3 = 29 then
19815: LD_VAR 0 3
19819: PUSH
19820: LD_INT 29
19822: EQUAL
19823: IFFALSE 19833
// sDLaser := true ;
19825: LD_ADDR_EXP 110
19829: PUSH
19830: LD_INT 1
19832: ST_TO_ADDR
// if p3 = 30 then
19833: LD_VAR 0 3
19837: PUSH
19838: LD_INT 30
19840: EQUAL
19841: IFFALSE 19851
// sExchange := true ;
19843: LD_ADDR_EXP 111
19847: PUSH
19848: LD_INT 1
19850: ST_TO_ADDR
// if p3 = 31 then
19851: LD_VAR 0 3
19855: PUSH
19856: LD_INT 31
19858: EQUAL
19859: IFFALSE 19869
// sFac := true ;
19861: LD_ADDR_EXP 112
19865: PUSH
19866: LD_INT 1
19868: ST_TO_ADDR
// if p3 = 32 then
19869: LD_VAR 0 3
19873: PUSH
19874: LD_INT 32
19876: EQUAL
19877: IFFALSE 19887
// sPower := true ;
19879: LD_ADDR_EXP 113
19883: PUSH
19884: LD_INT 1
19886: ST_TO_ADDR
// if p3 = 33 then
19887: LD_VAR 0 3
19891: PUSH
19892: LD_INT 33
19894: EQUAL
19895: IFFALSE 19905
// sRandom := true ;
19897: LD_ADDR_EXP 114
19901: PUSH
19902: LD_INT 1
19904: ST_TO_ADDR
// if p3 = 34 then
19905: LD_VAR 0 3
19909: PUSH
19910: LD_INT 34
19912: EQUAL
19913: IFFALSE 19923
// sShield := true ;
19915: LD_ADDR_EXP 115
19919: PUSH
19920: LD_INT 1
19922: ST_TO_ADDR
// if p3 = 35 then
19923: LD_VAR 0 3
19927: PUSH
19928: LD_INT 35
19930: EQUAL
19931: IFFALSE 19941
// sTime := true ;
19933: LD_ADDR_EXP 116
19937: PUSH
19938: LD_INT 1
19940: ST_TO_ADDR
// if p3 = 36 then
19941: LD_VAR 0 3
19945: PUSH
19946: LD_INT 36
19948: EQUAL
19949: IFFALSE 19959
// sTools := true ;
19951: LD_ADDR_EXP 117
19955: PUSH
19956: LD_INT 1
19958: ST_TO_ADDR
// if p3 = 101 then
19959: LD_VAR 0 3
19963: PUSH
19964: LD_INT 101
19966: EQUAL
19967: IFFALSE 19977
// sSold := true ;
19969: LD_ADDR_EXP 82
19973: PUSH
19974: LD_INT 1
19976: ST_TO_ADDR
// if p3 = 102 then
19977: LD_VAR 0 3
19981: PUSH
19982: LD_INT 102
19984: EQUAL
19985: IFFALSE 19995
// sDiff := true ;
19987: LD_ADDR_EXP 83
19991: PUSH
19992: LD_INT 1
19994: ST_TO_ADDR
// if p3 = 103 then
19995: LD_VAR 0 3
19999: PUSH
20000: LD_INT 103
20002: EQUAL
20003: IFFALSE 20013
// sFog := true ;
20005: LD_ADDR_EXP 86
20009: PUSH
20010: LD_INT 1
20012: ST_TO_ADDR
// if p3 = 104 then
20013: LD_VAR 0 3
20017: PUSH
20018: LD_INT 104
20020: EQUAL
20021: IFFALSE 20031
// sReset := true ;
20023: LD_ADDR_EXP 87
20027: PUSH
20028: LD_INT 1
20030: ST_TO_ADDR
// if p3 = 105 then
20031: LD_VAR 0 3
20035: PUSH
20036: LD_INT 105
20038: EQUAL
20039: IFFALSE 20049
// sSun := true ;
20041: LD_ADDR_EXP 88
20045: PUSH
20046: LD_INT 1
20048: ST_TO_ADDR
// if p3 = 106 then
20049: LD_VAR 0 3
20053: PUSH
20054: LD_INT 106
20056: EQUAL
20057: IFFALSE 20067
// sTiger := true ;
20059: LD_ADDR_EXP 84
20063: PUSH
20064: LD_INT 1
20066: ST_TO_ADDR
// if p3 = 107 then
20067: LD_VAR 0 3
20071: PUSH
20072: LD_INT 107
20074: EQUAL
20075: IFFALSE 20085
// sBomb := true ;
20077: LD_ADDR_EXP 85
20081: PUSH
20082: LD_INT 1
20084: ST_TO_ADDR
// if p3 = 108 then
20085: LD_VAR 0 3
20089: PUSH
20090: LD_INT 108
20092: EQUAL
20093: IFFALSE 20103
// sWound := true ;
20095: LD_ADDR_EXP 93
20099: PUSH
20100: LD_INT 1
20102: ST_TO_ADDR
// if p3 = 109 then
20103: LD_VAR 0 3
20107: PUSH
20108: LD_INT 109
20110: EQUAL
20111: IFFALSE 20121
// sBetray := true ;
20113: LD_ADDR_EXP 97
20117: PUSH
20118: LD_INT 1
20120: ST_TO_ADDR
// if p3 = 110 then
20121: LD_VAR 0 3
20125: PUSH
20126: LD_INT 110
20128: EQUAL
20129: IFFALSE 20139
// sContamin := true ;
20131: LD_ADDR_EXP 98
20135: PUSH
20136: LD_INT 1
20138: ST_TO_ADDR
// if p3 = 111 then
20139: LD_VAR 0 3
20143: PUSH
20144: LD_INT 111
20146: EQUAL
20147: IFFALSE 20157
// sOil := true ;
20149: LD_ADDR_EXP 100
20153: PUSH
20154: LD_INT 1
20156: ST_TO_ADDR
// if p3 = 112 then
20157: LD_VAR 0 3
20161: PUSH
20162: LD_INT 112
20164: EQUAL
20165: IFFALSE 20175
// sStu := true ;
20167: LD_ADDR_EXP 104
20171: PUSH
20172: LD_INT 1
20174: ST_TO_ADDR
// if p3 = 113 then
20175: LD_VAR 0 3
20179: PUSH
20180: LD_INT 113
20182: EQUAL
20183: IFFALSE 20193
// sBazooka := true ;
20185: LD_ADDR_EXP 107
20189: PUSH
20190: LD_INT 1
20192: ST_TO_ADDR
// if p3 = 114 then
20193: LD_VAR 0 3
20197: PUSH
20198: LD_INT 114
20200: EQUAL
20201: IFFALSE 20211
// sMortar := true ;
20203: LD_ADDR_EXP 108
20207: PUSH
20208: LD_INT 1
20210: ST_TO_ADDR
// if p3 = 115 then
20211: LD_VAR 0 3
20215: PUSH
20216: LD_INT 115
20218: EQUAL
20219: IFFALSE 20229
// sRanger := true ;
20221: LD_ADDR_EXP 118
20225: PUSH
20226: LD_INT 1
20228: ST_TO_ADDR
// if p3 = 116 then
20229: LD_VAR 0 3
20233: PUSH
20234: LD_INT 116
20236: EQUAL
20237: IFFALSE 20247
// sComputer := true ;
20239: LD_ADDR_EXP 119
20243: PUSH
20244: LD_INT 1
20246: ST_TO_ADDR
// if p3 = 117 then
20247: LD_VAR 0 3
20251: PUSH
20252: LD_INT 117
20254: EQUAL
20255: IFFALSE 20265
// s30 := true ;
20257: LD_ADDR_EXP 120
20261: PUSH
20262: LD_INT 1
20264: ST_TO_ADDR
// if p3 = 118 then
20265: LD_VAR 0 3
20269: PUSH
20270: LD_INT 118
20272: EQUAL
20273: IFFALSE 20283
// s60 := true ;
20275: LD_ADDR_EXP 121
20279: PUSH
20280: LD_INT 1
20282: ST_TO_ADDR
// end ; if p2 = 101 then
20283: LD_VAR 0 2
20287: PUSH
20288: LD_INT 101
20290: EQUAL
20291: IFFALSE 20419
// begin case p3 of 1 :
20293: LD_VAR 0 3
20297: PUSH
20298: LD_INT 1
20300: DOUBLE
20301: EQUAL
20302: IFTRUE 20306
20304: GO 20313
20306: POP
// hHackUnlimitedResources ; 2 :
20307: CALL 32517 0 0
20311: GO 20419
20313: LD_INT 2
20315: DOUBLE
20316: EQUAL
20317: IFTRUE 20321
20319: GO 20328
20321: POP
// hHackSetLevel10 ; 3 :
20322: CALL 32650 0 0
20326: GO 20419
20328: LD_INT 3
20330: DOUBLE
20331: EQUAL
20332: IFTRUE 20336
20334: GO 20343
20336: POP
// hHackSetLevel10YourUnits ; 4 :
20337: CALL 32735 0 0
20341: GO 20419
20343: LD_INT 4
20345: DOUBLE
20346: EQUAL
20347: IFTRUE 20351
20349: GO 20358
20351: POP
// hHackInvincible ; 5 :
20352: CALL 33183 0 0
20356: GO 20419
20358: LD_INT 5
20360: DOUBLE
20361: EQUAL
20362: IFTRUE 20366
20364: GO 20373
20366: POP
// hHackInvisible ; 6 :
20367: CALL 33294 0 0
20371: GO 20419
20373: LD_INT 6
20375: DOUBLE
20376: EQUAL
20377: IFTRUE 20381
20379: GO 20388
20381: POP
// hHackChangeYourSide ; 7 :
20382: CALL 33351 0 0
20386: GO 20419
20388: LD_INT 7
20390: DOUBLE
20391: EQUAL
20392: IFTRUE 20396
20394: GO 20403
20396: POP
// hHackChangeUnitSide ; 8 :
20397: CALL 33393 0 0
20401: GO 20419
20403: LD_INT 8
20405: DOUBLE
20406: EQUAL
20407: IFTRUE 20411
20409: GO 20418
20411: POP
// hHackFog ; end ;
20412: CALL 33494 0 0
20416: GO 20419
20418: POP
// end ; end ;
20419: LD_VAR 0 7
20423: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20424: GO 20426
20426: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20427: LD_STRING initStreamRollete();
20429: PPUSH
20430: CALL_OW 559
// InitStreamMode ;
20434: CALL 20446 0 0
// DefineStreamItems ( false ) ;
20438: LD_INT 0
20440: PPUSH
20441: CALL 20910 0 1
// end ;
20445: END
// function InitStreamMode ; begin
20446: LD_INT 0
20448: PPUSH
// streamModeActive := false ;
20449: LD_ADDR_EXP 65
20453: PUSH
20454: LD_INT 0
20456: ST_TO_ADDR
// normalCounter := 36 ;
20457: LD_ADDR_EXP 66
20461: PUSH
20462: LD_INT 36
20464: ST_TO_ADDR
// hardcoreCounter := 18 ;
20465: LD_ADDR_EXP 67
20469: PUSH
20470: LD_INT 18
20472: ST_TO_ADDR
// sRocket := false ;
20473: LD_ADDR_EXP 70
20477: PUSH
20478: LD_INT 0
20480: ST_TO_ADDR
// sSpeed := false ;
20481: LD_ADDR_EXP 69
20485: PUSH
20486: LD_INT 0
20488: ST_TO_ADDR
// sEngine := false ;
20489: LD_ADDR_EXP 71
20493: PUSH
20494: LD_INT 0
20496: ST_TO_ADDR
// sSpec := false ;
20497: LD_ADDR_EXP 68
20501: PUSH
20502: LD_INT 0
20504: ST_TO_ADDR
// sLevel := false ;
20505: LD_ADDR_EXP 72
20509: PUSH
20510: LD_INT 0
20512: ST_TO_ADDR
// sArmoury := false ;
20513: LD_ADDR_EXP 73
20517: PUSH
20518: LD_INT 0
20520: ST_TO_ADDR
// sRadar := false ;
20521: LD_ADDR_EXP 74
20525: PUSH
20526: LD_INT 0
20528: ST_TO_ADDR
// sBunker := false ;
20529: LD_ADDR_EXP 75
20533: PUSH
20534: LD_INT 0
20536: ST_TO_ADDR
// sHack := false ;
20537: LD_ADDR_EXP 76
20541: PUSH
20542: LD_INT 0
20544: ST_TO_ADDR
// sFire := false ;
20545: LD_ADDR_EXP 77
20549: PUSH
20550: LD_INT 0
20552: ST_TO_ADDR
// sRefresh := false ;
20553: LD_ADDR_EXP 78
20557: PUSH
20558: LD_INT 0
20560: ST_TO_ADDR
// sExp := false ;
20561: LD_ADDR_EXP 79
20565: PUSH
20566: LD_INT 0
20568: ST_TO_ADDR
// sDepot := false ;
20569: LD_ADDR_EXP 80
20573: PUSH
20574: LD_INT 0
20576: ST_TO_ADDR
// sFlag := false ;
20577: LD_ADDR_EXP 81
20581: PUSH
20582: LD_INT 0
20584: ST_TO_ADDR
// sKamikadze := false ;
20585: LD_ADDR_EXP 89
20589: PUSH
20590: LD_INT 0
20592: ST_TO_ADDR
// sTroll := false ;
20593: LD_ADDR_EXP 90
20597: PUSH
20598: LD_INT 0
20600: ST_TO_ADDR
// sSlow := false ;
20601: LD_ADDR_EXP 91
20605: PUSH
20606: LD_INT 0
20608: ST_TO_ADDR
// sLack := false ;
20609: LD_ADDR_EXP 92
20613: PUSH
20614: LD_INT 0
20616: ST_TO_ADDR
// sTank := false ;
20617: LD_ADDR_EXP 94
20621: PUSH
20622: LD_INT 0
20624: ST_TO_ADDR
// sRemote := false ;
20625: LD_ADDR_EXP 95
20629: PUSH
20630: LD_INT 0
20632: ST_TO_ADDR
// sPowell := false ;
20633: LD_ADDR_EXP 96
20637: PUSH
20638: LD_INT 0
20640: ST_TO_ADDR
// sTeleport := false ;
20641: LD_ADDR_EXP 99
20645: PUSH
20646: LD_INT 0
20648: ST_TO_ADDR
// sOilTower := false ;
20649: LD_ADDR_EXP 101
20653: PUSH
20654: LD_INT 0
20656: ST_TO_ADDR
// sShovel := false ;
20657: LD_ADDR_EXP 102
20661: PUSH
20662: LD_INT 0
20664: ST_TO_ADDR
// sSheik := false ;
20665: LD_ADDR_EXP 103
20669: PUSH
20670: LD_INT 0
20672: ST_TO_ADDR
// sEarthquake := false ;
20673: LD_ADDR_EXP 105
20677: PUSH
20678: LD_INT 0
20680: ST_TO_ADDR
// sAI := false ;
20681: LD_ADDR_EXP 106
20685: PUSH
20686: LD_INT 0
20688: ST_TO_ADDR
// sCargo := false ;
20689: LD_ADDR_EXP 109
20693: PUSH
20694: LD_INT 0
20696: ST_TO_ADDR
// sDLaser := false ;
20697: LD_ADDR_EXP 110
20701: PUSH
20702: LD_INT 0
20704: ST_TO_ADDR
// sExchange := false ;
20705: LD_ADDR_EXP 111
20709: PUSH
20710: LD_INT 0
20712: ST_TO_ADDR
// sFac := false ;
20713: LD_ADDR_EXP 112
20717: PUSH
20718: LD_INT 0
20720: ST_TO_ADDR
// sPower := false ;
20721: LD_ADDR_EXP 113
20725: PUSH
20726: LD_INT 0
20728: ST_TO_ADDR
// sRandom := false ;
20729: LD_ADDR_EXP 114
20733: PUSH
20734: LD_INT 0
20736: ST_TO_ADDR
// sShield := false ;
20737: LD_ADDR_EXP 115
20741: PUSH
20742: LD_INT 0
20744: ST_TO_ADDR
// sTime := false ;
20745: LD_ADDR_EXP 116
20749: PUSH
20750: LD_INT 0
20752: ST_TO_ADDR
// sTools := false ;
20753: LD_ADDR_EXP 117
20757: PUSH
20758: LD_INT 0
20760: ST_TO_ADDR
// sSold := false ;
20761: LD_ADDR_EXP 82
20765: PUSH
20766: LD_INT 0
20768: ST_TO_ADDR
// sDiff := false ;
20769: LD_ADDR_EXP 83
20773: PUSH
20774: LD_INT 0
20776: ST_TO_ADDR
// sFog := false ;
20777: LD_ADDR_EXP 86
20781: PUSH
20782: LD_INT 0
20784: ST_TO_ADDR
// sReset := false ;
20785: LD_ADDR_EXP 87
20789: PUSH
20790: LD_INT 0
20792: ST_TO_ADDR
// sSun := false ;
20793: LD_ADDR_EXP 88
20797: PUSH
20798: LD_INT 0
20800: ST_TO_ADDR
// sTiger := false ;
20801: LD_ADDR_EXP 84
20805: PUSH
20806: LD_INT 0
20808: ST_TO_ADDR
// sBomb := false ;
20809: LD_ADDR_EXP 85
20813: PUSH
20814: LD_INT 0
20816: ST_TO_ADDR
// sWound := false ;
20817: LD_ADDR_EXP 93
20821: PUSH
20822: LD_INT 0
20824: ST_TO_ADDR
// sBetray := false ;
20825: LD_ADDR_EXP 97
20829: PUSH
20830: LD_INT 0
20832: ST_TO_ADDR
// sContamin := false ;
20833: LD_ADDR_EXP 98
20837: PUSH
20838: LD_INT 0
20840: ST_TO_ADDR
// sOil := false ;
20841: LD_ADDR_EXP 100
20845: PUSH
20846: LD_INT 0
20848: ST_TO_ADDR
// sStu := false ;
20849: LD_ADDR_EXP 104
20853: PUSH
20854: LD_INT 0
20856: ST_TO_ADDR
// sBazooka := false ;
20857: LD_ADDR_EXP 107
20861: PUSH
20862: LD_INT 0
20864: ST_TO_ADDR
// sMortar := false ;
20865: LD_ADDR_EXP 108
20869: PUSH
20870: LD_INT 0
20872: ST_TO_ADDR
// sRanger := false ;
20873: LD_ADDR_EXP 118
20877: PUSH
20878: LD_INT 0
20880: ST_TO_ADDR
// sComputer := false ;
20881: LD_ADDR_EXP 119
20885: PUSH
20886: LD_INT 0
20888: ST_TO_ADDR
// s30 := false ;
20889: LD_ADDR_EXP 120
20893: PUSH
20894: LD_INT 0
20896: ST_TO_ADDR
// s60 := false ;
20897: LD_ADDR_EXP 121
20901: PUSH
20902: LD_INT 0
20904: ST_TO_ADDR
// end ;
20905: LD_VAR 0 1
20909: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20910: LD_INT 0
20912: PPUSH
20913: PPUSH
20914: PPUSH
20915: PPUSH
20916: PPUSH
20917: PPUSH
20918: PPUSH
// result := [ ] ;
20919: LD_ADDR_VAR 0 2
20923: PUSH
20924: EMPTY
20925: ST_TO_ADDR
// if campaign_id = 1 then
20926: LD_OWVAR 69
20930: PUSH
20931: LD_INT 1
20933: EQUAL
20934: IFFALSE 24100
// begin case mission_number of 1 :
20936: LD_OWVAR 70
20940: PUSH
20941: LD_INT 1
20943: DOUBLE
20944: EQUAL
20945: IFTRUE 20949
20947: GO 21025
20949: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20950: LD_ADDR_VAR 0 2
20954: PUSH
20955: LD_INT 2
20957: PUSH
20958: LD_INT 4
20960: PUSH
20961: LD_INT 11
20963: PUSH
20964: LD_INT 12
20966: PUSH
20967: LD_INT 15
20969: PUSH
20970: LD_INT 16
20972: PUSH
20973: LD_INT 22
20975: PUSH
20976: LD_INT 23
20978: PUSH
20979: LD_INT 26
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: PUSH
20993: LD_INT 101
20995: PUSH
20996: LD_INT 102
20998: PUSH
20999: LD_INT 106
21001: PUSH
21002: LD_INT 116
21004: PUSH
21005: LD_INT 117
21007: PUSH
21008: LD_INT 118
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: ST_TO_ADDR
21023: GO 24098
21025: LD_INT 2
21027: DOUBLE
21028: EQUAL
21029: IFTRUE 21033
21031: GO 21117
21033: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21034: LD_ADDR_VAR 0 2
21038: PUSH
21039: LD_INT 2
21041: PUSH
21042: LD_INT 4
21044: PUSH
21045: LD_INT 11
21047: PUSH
21048: LD_INT 12
21050: PUSH
21051: LD_INT 15
21053: PUSH
21054: LD_INT 16
21056: PUSH
21057: LD_INT 22
21059: PUSH
21060: LD_INT 23
21062: PUSH
21063: LD_INT 26
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: PUSH
21077: LD_INT 101
21079: PUSH
21080: LD_INT 102
21082: PUSH
21083: LD_INT 105
21085: PUSH
21086: LD_INT 106
21088: PUSH
21089: LD_INT 108
21091: PUSH
21092: LD_INT 116
21094: PUSH
21095: LD_INT 117
21097: PUSH
21098: LD_INT 118
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: ST_TO_ADDR
21115: GO 24098
21117: LD_INT 3
21119: DOUBLE
21120: EQUAL
21121: IFTRUE 21125
21123: GO 21213
21125: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21126: LD_ADDR_VAR 0 2
21130: PUSH
21131: LD_INT 2
21133: PUSH
21134: LD_INT 4
21136: PUSH
21137: LD_INT 5
21139: PUSH
21140: LD_INT 11
21142: PUSH
21143: LD_INT 12
21145: PUSH
21146: LD_INT 15
21148: PUSH
21149: LD_INT 16
21151: PUSH
21152: LD_INT 22
21154: PUSH
21155: LD_INT 26
21157: PUSH
21158: LD_INT 36
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: PUSH
21173: LD_INT 101
21175: PUSH
21176: LD_INT 102
21178: PUSH
21179: LD_INT 105
21181: PUSH
21182: LD_INT 106
21184: PUSH
21185: LD_INT 108
21187: PUSH
21188: LD_INT 116
21190: PUSH
21191: LD_INT 117
21193: PUSH
21194: LD_INT 118
21196: PUSH
21197: EMPTY
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: ST_TO_ADDR
21211: GO 24098
21213: LD_INT 4
21215: DOUBLE
21216: EQUAL
21217: IFTRUE 21221
21219: GO 21317
21221: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21222: LD_ADDR_VAR 0 2
21226: PUSH
21227: LD_INT 2
21229: PUSH
21230: LD_INT 4
21232: PUSH
21233: LD_INT 5
21235: PUSH
21236: LD_INT 8
21238: PUSH
21239: LD_INT 11
21241: PUSH
21242: LD_INT 12
21244: PUSH
21245: LD_INT 15
21247: PUSH
21248: LD_INT 16
21250: PUSH
21251: LD_INT 22
21253: PUSH
21254: LD_INT 23
21256: PUSH
21257: LD_INT 26
21259: PUSH
21260: LD_INT 36
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: PUSH
21277: LD_INT 101
21279: PUSH
21280: LD_INT 102
21282: PUSH
21283: LD_INT 105
21285: PUSH
21286: LD_INT 106
21288: PUSH
21289: LD_INT 108
21291: PUSH
21292: LD_INT 116
21294: PUSH
21295: LD_INT 117
21297: PUSH
21298: LD_INT 118
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: ST_TO_ADDR
21315: GO 24098
21317: LD_INT 5
21319: DOUBLE
21320: EQUAL
21321: IFTRUE 21325
21323: GO 21437
21325: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21326: LD_ADDR_VAR 0 2
21330: PUSH
21331: LD_INT 2
21333: PUSH
21334: LD_INT 4
21336: PUSH
21337: LD_INT 5
21339: PUSH
21340: LD_INT 6
21342: PUSH
21343: LD_INT 8
21345: PUSH
21346: LD_INT 11
21348: PUSH
21349: LD_INT 12
21351: PUSH
21352: LD_INT 15
21354: PUSH
21355: LD_INT 16
21357: PUSH
21358: LD_INT 22
21360: PUSH
21361: LD_INT 23
21363: PUSH
21364: LD_INT 25
21366: PUSH
21367: LD_INT 26
21369: PUSH
21370: LD_INT 36
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: PUSH
21389: LD_INT 101
21391: PUSH
21392: LD_INT 102
21394: PUSH
21395: LD_INT 105
21397: PUSH
21398: LD_INT 106
21400: PUSH
21401: LD_INT 108
21403: PUSH
21404: LD_INT 109
21406: PUSH
21407: LD_INT 112
21409: PUSH
21410: LD_INT 116
21412: PUSH
21413: LD_INT 117
21415: PUSH
21416: LD_INT 118
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: PUSH
21431: EMPTY
21432: LIST
21433: LIST
21434: ST_TO_ADDR
21435: GO 24098
21437: LD_INT 6
21439: DOUBLE
21440: EQUAL
21441: IFTRUE 21445
21443: GO 21577
21445: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21446: LD_ADDR_VAR 0 2
21450: PUSH
21451: LD_INT 2
21453: PUSH
21454: LD_INT 4
21456: PUSH
21457: LD_INT 5
21459: PUSH
21460: LD_INT 6
21462: PUSH
21463: LD_INT 8
21465: PUSH
21466: LD_INT 11
21468: PUSH
21469: LD_INT 12
21471: PUSH
21472: LD_INT 15
21474: PUSH
21475: LD_INT 16
21477: PUSH
21478: LD_INT 20
21480: PUSH
21481: LD_INT 21
21483: PUSH
21484: LD_INT 22
21486: PUSH
21487: LD_INT 23
21489: PUSH
21490: LD_INT 25
21492: PUSH
21493: LD_INT 26
21495: PUSH
21496: LD_INT 30
21498: PUSH
21499: LD_INT 31
21501: PUSH
21502: LD_INT 32
21504: PUSH
21505: LD_INT 36
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: PUSH
21529: LD_INT 101
21531: PUSH
21532: LD_INT 102
21534: PUSH
21535: LD_INT 105
21537: PUSH
21538: LD_INT 106
21540: PUSH
21541: LD_INT 108
21543: PUSH
21544: LD_INT 109
21546: PUSH
21547: LD_INT 112
21549: PUSH
21550: LD_INT 116
21552: PUSH
21553: LD_INT 117
21555: PUSH
21556: LD_INT 118
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: ST_TO_ADDR
21575: GO 24098
21577: LD_INT 7
21579: DOUBLE
21580: EQUAL
21581: IFTRUE 21585
21583: GO 21697
21585: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21586: LD_ADDR_VAR 0 2
21590: PUSH
21591: LD_INT 2
21593: PUSH
21594: LD_INT 4
21596: PUSH
21597: LD_INT 5
21599: PUSH
21600: LD_INT 7
21602: PUSH
21603: LD_INT 11
21605: PUSH
21606: LD_INT 12
21608: PUSH
21609: LD_INT 15
21611: PUSH
21612: LD_INT 16
21614: PUSH
21615: LD_INT 20
21617: PUSH
21618: LD_INT 21
21620: PUSH
21621: LD_INT 22
21623: PUSH
21624: LD_INT 23
21626: PUSH
21627: LD_INT 25
21629: PUSH
21630: LD_INT 26
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: PUSH
21649: LD_INT 101
21651: PUSH
21652: LD_INT 102
21654: PUSH
21655: LD_INT 103
21657: PUSH
21658: LD_INT 105
21660: PUSH
21661: LD_INT 106
21663: PUSH
21664: LD_INT 108
21666: PUSH
21667: LD_INT 112
21669: PUSH
21670: LD_INT 116
21672: PUSH
21673: LD_INT 117
21675: PUSH
21676: LD_INT 118
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: ST_TO_ADDR
21695: GO 24098
21697: LD_INT 8
21699: DOUBLE
21700: EQUAL
21701: IFTRUE 21705
21703: GO 21845
21705: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21706: LD_ADDR_VAR 0 2
21710: PUSH
21711: LD_INT 2
21713: PUSH
21714: LD_INT 4
21716: PUSH
21717: LD_INT 5
21719: PUSH
21720: LD_INT 6
21722: PUSH
21723: LD_INT 7
21725: PUSH
21726: LD_INT 8
21728: PUSH
21729: LD_INT 11
21731: PUSH
21732: LD_INT 12
21734: PUSH
21735: LD_INT 15
21737: PUSH
21738: LD_INT 16
21740: PUSH
21741: LD_INT 20
21743: PUSH
21744: LD_INT 21
21746: PUSH
21747: LD_INT 22
21749: PUSH
21750: LD_INT 23
21752: PUSH
21753: LD_INT 25
21755: PUSH
21756: LD_INT 26
21758: PUSH
21759: LD_INT 30
21761: PUSH
21762: LD_INT 31
21764: PUSH
21765: LD_INT 32
21767: PUSH
21768: LD_INT 36
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: PUSH
21793: LD_INT 101
21795: PUSH
21796: LD_INT 102
21798: PUSH
21799: LD_INT 103
21801: PUSH
21802: LD_INT 105
21804: PUSH
21805: LD_INT 106
21807: PUSH
21808: LD_INT 108
21810: PUSH
21811: LD_INT 109
21813: PUSH
21814: LD_INT 112
21816: PUSH
21817: LD_INT 116
21819: PUSH
21820: LD_INT 117
21822: PUSH
21823: LD_INT 118
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: ST_TO_ADDR
21843: GO 24098
21845: LD_INT 9
21847: DOUBLE
21848: EQUAL
21849: IFTRUE 21853
21851: GO 22001
21853: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21854: LD_ADDR_VAR 0 2
21858: PUSH
21859: LD_INT 2
21861: PUSH
21862: LD_INT 4
21864: PUSH
21865: LD_INT 5
21867: PUSH
21868: LD_INT 6
21870: PUSH
21871: LD_INT 7
21873: PUSH
21874: LD_INT 8
21876: PUSH
21877: LD_INT 11
21879: PUSH
21880: LD_INT 12
21882: PUSH
21883: LD_INT 15
21885: PUSH
21886: LD_INT 16
21888: PUSH
21889: LD_INT 20
21891: PUSH
21892: LD_INT 21
21894: PUSH
21895: LD_INT 22
21897: PUSH
21898: LD_INT 23
21900: PUSH
21901: LD_INT 25
21903: PUSH
21904: LD_INT 26
21906: PUSH
21907: LD_INT 28
21909: PUSH
21910: LD_INT 30
21912: PUSH
21913: LD_INT 31
21915: PUSH
21916: LD_INT 32
21918: PUSH
21919: LD_INT 36
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: PUSH
21945: LD_INT 101
21947: PUSH
21948: LD_INT 102
21950: PUSH
21951: LD_INT 103
21953: PUSH
21954: LD_INT 105
21956: PUSH
21957: LD_INT 106
21959: PUSH
21960: LD_INT 108
21962: PUSH
21963: LD_INT 109
21965: PUSH
21966: LD_INT 112
21968: PUSH
21969: LD_INT 114
21971: PUSH
21972: LD_INT 116
21974: PUSH
21975: LD_INT 117
21977: PUSH
21978: LD_INT 118
21980: PUSH
21981: EMPTY
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: ST_TO_ADDR
21999: GO 24098
22001: LD_INT 10
22003: DOUBLE
22004: EQUAL
22005: IFTRUE 22009
22007: GO 22205
22009: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22010: LD_ADDR_VAR 0 2
22014: PUSH
22015: LD_INT 2
22017: PUSH
22018: LD_INT 4
22020: PUSH
22021: LD_INT 5
22023: PUSH
22024: LD_INT 6
22026: PUSH
22027: LD_INT 7
22029: PUSH
22030: LD_INT 8
22032: PUSH
22033: LD_INT 9
22035: PUSH
22036: LD_INT 10
22038: PUSH
22039: LD_INT 11
22041: PUSH
22042: LD_INT 12
22044: PUSH
22045: LD_INT 13
22047: PUSH
22048: LD_INT 14
22050: PUSH
22051: LD_INT 15
22053: PUSH
22054: LD_INT 16
22056: PUSH
22057: LD_INT 17
22059: PUSH
22060: LD_INT 18
22062: PUSH
22063: LD_INT 19
22065: PUSH
22066: LD_INT 20
22068: PUSH
22069: LD_INT 21
22071: PUSH
22072: LD_INT 22
22074: PUSH
22075: LD_INT 23
22077: PUSH
22078: LD_INT 24
22080: PUSH
22081: LD_INT 25
22083: PUSH
22084: LD_INT 26
22086: PUSH
22087: LD_INT 28
22089: PUSH
22090: LD_INT 30
22092: PUSH
22093: LD_INT 31
22095: PUSH
22096: LD_INT 32
22098: PUSH
22099: LD_INT 36
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: PUSH
22133: LD_INT 101
22135: PUSH
22136: LD_INT 102
22138: PUSH
22139: LD_INT 103
22141: PUSH
22142: LD_INT 104
22144: PUSH
22145: LD_INT 105
22147: PUSH
22148: LD_INT 106
22150: PUSH
22151: LD_INT 107
22153: PUSH
22154: LD_INT 108
22156: PUSH
22157: LD_INT 109
22159: PUSH
22160: LD_INT 110
22162: PUSH
22163: LD_INT 111
22165: PUSH
22166: LD_INT 112
22168: PUSH
22169: LD_INT 114
22171: PUSH
22172: LD_INT 116
22174: PUSH
22175: LD_INT 117
22177: PUSH
22178: LD_INT 118
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: ST_TO_ADDR
22203: GO 24098
22205: LD_INT 11
22207: DOUBLE
22208: EQUAL
22209: IFTRUE 22213
22211: GO 22417
22213: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22214: LD_ADDR_VAR 0 2
22218: PUSH
22219: LD_INT 2
22221: PUSH
22222: LD_INT 3
22224: PUSH
22225: LD_INT 4
22227: PUSH
22228: LD_INT 5
22230: PUSH
22231: LD_INT 6
22233: PUSH
22234: LD_INT 7
22236: PUSH
22237: LD_INT 8
22239: PUSH
22240: LD_INT 9
22242: PUSH
22243: LD_INT 10
22245: PUSH
22246: LD_INT 11
22248: PUSH
22249: LD_INT 12
22251: PUSH
22252: LD_INT 13
22254: PUSH
22255: LD_INT 14
22257: PUSH
22258: LD_INT 15
22260: PUSH
22261: LD_INT 16
22263: PUSH
22264: LD_INT 17
22266: PUSH
22267: LD_INT 18
22269: PUSH
22270: LD_INT 19
22272: PUSH
22273: LD_INT 20
22275: PUSH
22276: LD_INT 21
22278: PUSH
22279: LD_INT 22
22281: PUSH
22282: LD_INT 23
22284: PUSH
22285: LD_INT 24
22287: PUSH
22288: LD_INT 25
22290: PUSH
22291: LD_INT 26
22293: PUSH
22294: LD_INT 28
22296: PUSH
22297: LD_INT 30
22299: PUSH
22300: LD_INT 31
22302: PUSH
22303: LD_INT 32
22305: PUSH
22306: LD_INT 34
22308: PUSH
22309: LD_INT 36
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: PUSH
22345: LD_INT 101
22347: PUSH
22348: LD_INT 102
22350: PUSH
22351: LD_INT 103
22353: PUSH
22354: LD_INT 104
22356: PUSH
22357: LD_INT 105
22359: PUSH
22360: LD_INT 106
22362: PUSH
22363: LD_INT 107
22365: PUSH
22366: LD_INT 108
22368: PUSH
22369: LD_INT 109
22371: PUSH
22372: LD_INT 110
22374: PUSH
22375: LD_INT 111
22377: PUSH
22378: LD_INT 112
22380: PUSH
22381: LD_INT 114
22383: PUSH
22384: LD_INT 116
22386: PUSH
22387: LD_INT 117
22389: PUSH
22390: LD_INT 118
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: ST_TO_ADDR
22415: GO 24098
22417: LD_INT 12
22419: DOUBLE
22420: EQUAL
22421: IFTRUE 22425
22423: GO 22645
22425: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22426: LD_ADDR_VAR 0 2
22430: PUSH
22431: LD_INT 1
22433: PUSH
22434: LD_INT 2
22436: PUSH
22437: LD_INT 3
22439: PUSH
22440: LD_INT 4
22442: PUSH
22443: LD_INT 5
22445: PUSH
22446: LD_INT 6
22448: PUSH
22449: LD_INT 7
22451: PUSH
22452: LD_INT 8
22454: PUSH
22455: LD_INT 9
22457: PUSH
22458: LD_INT 10
22460: PUSH
22461: LD_INT 11
22463: PUSH
22464: LD_INT 12
22466: PUSH
22467: LD_INT 13
22469: PUSH
22470: LD_INT 14
22472: PUSH
22473: LD_INT 15
22475: PUSH
22476: LD_INT 16
22478: PUSH
22479: LD_INT 17
22481: PUSH
22482: LD_INT 18
22484: PUSH
22485: LD_INT 19
22487: PUSH
22488: LD_INT 20
22490: PUSH
22491: LD_INT 21
22493: PUSH
22494: LD_INT 22
22496: PUSH
22497: LD_INT 23
22499: PUSH
22500: LD_INT 24
22502: PUSH
22503: LD_INT 25
22505: PUSH
22506: LD_INT 26
22508: PUSH
22509: LD_INT 27
22511: PUSH
22512: LD_INT 28
22514: PUSH
22515: LD_INT 30
22517: PUSH
22518: LD_INT 31
22520: PUSH
22521: LD_INT 32
22523: PUSH
22524: LD_INT 33
22526: PUSH
22527: LD_INT 34
22529: PUSH
22530: LD_INT 36
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: PUSH
22569: LD_INT 101
22571: PUSH
22572: LD_INT 102
22574: PUSH
22575: LD_INT 103
22577: PUSH
22578: LD_INT 104
22580: PUSH
22581: LD_INT 105
22583: PUSH
22584: LD_INT 106
22586: PUSH
22587: LD_INT 107
22589: PUSH
22590: LD_INT 108
22592: PUSH
22593: LD_INT 109
22595: PUSH
22596: LD_INT 110
22598: PUSH
22599: LD_INT 111
22601: PUSH
22602: LD_INT 112
22604: PUSH
22605: LD_INT 113
22607: PUSH
22608: LD_INT 114
22610: PUSH
22611: LD_INT 116
22613: PUSH
22614: LD_INT 117
22616: PUSH
22617: LD_INT 118
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: ST_TO_ADDR
22643: GO 24098
22645: LD_INT 13
22647: DOUBLE
22648: EQUAL
22649: IFTRUE 22653
22651: GO 22861
22653: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22654: LD_ADDR_VAR 0 2
22658: PUSH
22659: LD_INT 1
22661: PUSH
22662: LD_INT 2
22664: PUSH
22665: LD_INT 3
22667: PUSH
22668: LD_INT 4
22670: PUSH
22671: LD_INT 5
22673: PUSH
22674: LD_INT 8
22676: PUSH
22677: LD_INT 9
22679: PUSH
22680: LD_INT 10
22682: PUSH
22683: LD_INT 11
22685: PUSH
22686: LD_INT 12
22688: PUSH
22689: LD_INT 14
22691: PUSH
22692: LD_INT 15
22694: PUSH
22695: LD_INT 16
22697: PUSH
22698: LD_INT 17
22700: PUSH
22701: LD_INT 18
22703: PUSH
22704: LD_INT 19
22706: PUSH
22707: LD_INT 20
22709: PUSH
22710: LD_INT 21
22712: PUSH
22713: LD_INT 22
22715: PUSH
22716: LD_INT 23
22718: PUSH
22719: LD_INT 24
22721: PUSH
22722: LD_INT 25
22724: PUSH
22725: LD_INT 26
22727: PUSH
22728: LD_INT 27
22730: PUSH
22731: LD_INT 28
22733: PUSH
22734: LD_INT 30
22736: PUSH
22737: LD_INT 31
22739: PUSH
22740: LD_INT 32
22742: PUSH
22743: LD_INT 33
22745: PUSH
22746: LD_INT 34
22748: PUSH
22749: LD_INT 36
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: PUSH
22785: LD_INT 101
22787: PUSH
22788: LD_INT 102
22790: PUSH
22791: LD_INT 103
22793: PUSH
22794: LD_INT 104
22796: PUSH
22797: LD_INT 105
22799: PUSH
22800: LD_INT 106
22802: PUSH
22803: LD_INT 107
22805: PUSH
22806: LD_INT 108
22808: PUSH
22809: LD_INT 109
22811: PUSH
22812: LD_INT 110
22814: PUSH
22815: LD_INT 111
22817: PUSH
22818: LD_INT 112
22820: PUSH
22821: LD_INT 113
22823: PUSH
22824: LD_INT 114
22826: PUSH
22827: LD_INT 116
22829: PUSH
22830: LD_INT 117
22832: PUSH
22833: LD_INT 118
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: ST_TO_ADDR
22859: GO 24098
22861: LD_INT 14
22863: DOUBLE
22864: EQUAL
22865: IFTRUE 22869
22867: GO 23093
22869: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22870: LD_ADDR_VAR 0 2
22874: PUSH
22875: LD_INT 1
22877: PUSH
22878: LD_INT 2
22880: PUSH
22881: LD_INT 3
22883: PUSH
22884: LD_INT 4
22886: PUSH
22887: LD_INT 5
22889: PUSH
22890: LD_INT 6
22892: PUSH
22893: LD_INT 7
22895: PUSH
22896: LD_INT 8
22898: PUSH
22899: LD_INT 9
22901: PUSH
22902: LD_INT 10
22904: PUSH
22905: LD_INT 11
22907: PUSH
22908: LD_INT 12
22910: PUSH
22911: LD_INT 13
22913: PUSH
22914: LD_INT 14
22916: PUSH
22917: LD_INT 15
22919: PUSH
22920: LD_INT 16
22922: PUSH
22923: LD_INT 17
22925: PUSH
22926: LD_INT 18
22928: PUSH
22929: LD_INT 19
22931: PUSH
22932: LD_INT 20
22934: PUSH
22935: LD_INT 21
22937: PUSH
22938: LD_INT 22
22940: PUSH
22941: LD_INT 23
22943: PUSH
22944: LD_INT 24
22946: PUSH
22947: LD_INT 25
22949: PUSH
22950: LD_INT 26
22952: PUSH
22953: LD_INT 27
22955: PUSH
22956: LD_INT 28
22958: PUSH
22959: LD_INT 29
22961: PUSH
22962: LD_INT 30
22964: PUSH
22965: LD_INT 31
22967: PUSH
22968: LD_INT 32
22970: PUSH
22971: LD_INT 33
22973: PUSH
22974: LD_INT 34
22976: PUSH
22977: LD_INT 36
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: PUSH
23017: LD_INT 101
23019: PUSH
23020: LD_INT 102
23022: PUSH
23023: LD_INT 103
23025: PUSH
23026: LD_INT 104
23028: PUSH
23029: LD_INT 105
23031: PUSH
23032: LD_INT 106
23034: PUSH
23035: LD_INT 107
23037: PUSH
23038: LD_INT 108
23040: PUSH
23041: LD_INT 109
23043: PUSH
23044: LD_INT 110
23046: PUSH
23047: LD_INT 111
23049: PUSH
23050: LD_INT 112
23052: PUSH
23053: LD_INT 113
23055: PUSH
23056: LD_INT 114
23058: PUSH
23059: LD_INT 116
23061: PUSH
23062: LD_INT 117
23064: PUSH
23065: LD_INT 118
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: PUSH
23087: EMPTY
23088: LIST
23089: LIST
23090: ST_TO_ADDR
23091: GO 24098
23093: LD_INT 15
23095: DOUBLE
23096: EQUAL
23097: IFTRUE 23101
23099: GO 23325
23101: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23102: LD_ADDR_VAR 0 2
23106: PUSH
23107: LD_INT 1
23109: PUSH
23110: LD_INT 2
23112: PUSH
23113: LD_INT 3
23115: PUSH
23116: LD_INT 4
23118: PUSH
23119: LD_INT 5
23121: PUSH
23122: LD_INT 6
23124: PUSH
23125: LD_INT 7
23127: PUSH
23128: LD_INT 8
23130: PUSH
23131: LD_INT 9
23133: PUSH
23134: LD_INT 10
23136: PUSH
23137: LD_INT 11
23139: PUSH
23140: LD_INT 12
23142: PUSH
23143: LD_INT 13
23145: PUSH
23146: LD_INT 14
23148: PUSH
23149: LD_INT 15
23151: PUSH
23152: LD_INT 16
23154: PUSH
23155: LD_INT 17
23157: PUSH
23158: LD_INT 18
23160: PUSH
23161: LD_INT 19
23163: PUSH
23164: LD_INT 20
23166: PUSH
23167: LD_INT 21
23169: PUSH
23170: LD_INT 22
23172: PUSH
23173: LD_INT 23
23175: PUSH
23176: LD_INT 24
23178: PUSH
23179: LD_INT 25
23181: PUSH
23182: LD_INT 26
23184: PUSH
23185: LD_INT 27
23187: PUSH
23188: LD_INT 28
23190: PUSH
23191: LD_INT 29
23193: PUSH
23194: LD_INT 30
23196: PUSH
23197: LD_INT 31
23199: PUSH
23200: LD_INT 32
23202: PUSH
23203: LD_INT 33
23205: PUSH
23206: LD_INT 34
23208: PUSH
23209: LD_INT 36
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: PUSH
23249: LD_INT 101
23251: PUSH
23252: LD_INT 102
23254: PUSH
23255: LD_INT 103
23257: PUSH
23258: LD_INT 104
23260: PUSH
23261: LD_INT 105
23263: PUSH
23264: LD_INT 106
23266: PUSH
23267: LD_INT 107
23269: PUSH
23270: LD_INT 108
23272: PUSH
23273: LD_INT 109
23275: PUSH
23276: LD_INT 110
23278: PUSH
23279: LD_INT 111
23281: PUSH
23282: LD_INT 112
23284: PUSH
23285: LD_INT 113
23287: PUSH
23288: LD_INT 114
23290: PUSH
23291: LD_INT 116
23293: PUSH
23294: LD_INT 117
23296: PUSH
23297: LD_INT 118
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: ST_TO_ADDR
23323: GO 24098
23325: LD_INT 16
23327: DOUBLE
23328: EQUAL
23329: IFTRUE 23333
23331: GO 23469
23333: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23334: LD_ADDR_VAR 0 2
23338: PUSH
23339: LD_INT 2
23341: PUSH
23342: LD_INT 4
23344: PUSH
23345: LD_INT 5
23347: PUSH
23348: LD_INT 7
23350: PUSH
23351: LD_INT 11
23353: PUSH
23354: LD_INT 12
23356: PUSH
23357: LD_INT 15
23359: PUSH
23360: LD_INT 16
23362: PUSH
23363: LD_INT 20
23365: PUSH
23366: LD_INT 21
23368: PUSH
23369: LD_INT 22
23371: PUSH
23372: LD_INT 23
23374: PUSH
23375: LD_INT 25
23377: PUSH
23378: LD_INT 26
23380: PUSH
23381: LD_INT 30
23383: PUSH
23384: LD_INT 31
23386: PUSH
23387: LD_INT 32
23389: PUSH
23390: LD_INT 33
23392: PUSH
23393: LD_INT 34
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: PUSH
23417: LD_INT 101
23419: PUSH
23420: LD_INT 102
23422: PUSH
23423: LD_INT 103
23425: PUSH
23426: LD_INT 106
23428: PUSH
23429: LD_INT 108
23431: PUSH
23432: LD_INT 112
23434: PUSH
23435: LD_INT 113
23437: PUSH
23438: LD_INT 114
23440: PUSH
23441: LD_INT 116
23443: PUSH
23444: LD_INT 117
23446: PUSH
23447: LD_INT 118
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: PUSH
23463: EMPTY
23464: LIST
23465: LIST
23466: ST_TO_ADDR
23467: GO 24098
23469: LD_INT 17
23471: DOUBLE
23472: EQUAL
23473: IFTRUE 23477
23475: GO 23701
23477: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23478: LD_ADDR_VAR 0 2
23482: PUSH
23483: LD_INT 1
23485: PUSH
23486: LD_INT 2
23488: PUSH
23489: LD_INT 3
23491: PUSH
23492: LD_INT 4
23494: PUSH
23495: LD_INT 5
23497: PUSH
23498: LD_INT 6
23500: PUSH
23501: LD_INT 7
23503: PUSH
23504: LD_INT 8
23506: PUSH
23507: LD_INT 9
23509: PUSH
23510: LD_INT 10
23512: PUSH
23513: LD_INT 11
23515: PUSH
23516: LD_INT 12
23518: PUSH
23519: LD_INT 13
23521: PUSH
23522: LD_INT 14
23524: PUSH
23525: LD_INT 15
23527: PUSH
23528: LD_INT 16
23530: PUSH
23531: LD_INT 17
23533: PUSH
23534: LD_INT 18
23536: PUSH
23537: LD_INT 19
23539: PUSH
23540: LD_INT 20
23542: PUSH
23543: LD_INT 21
23545: PUSH
23546: LD_INT 22
23548: PUSH
23549: LD_INT 23
23551: PUSH
23552: LD_INT 24
23554: PUSH
23555: LD_INT 25
23557: PUSH
23558: LD_INT 26
23560: PUSH
23561: LD_INT 27
23563: PUSH
23564: LD_INT 28
23566: PUSH
23567: LD_INT 29
23569: PUSH
23570: LD_INT 30
23572: PUSH
23573: LD_INT 31
23575: PUSH
23576: LD_INT 32
23578: PUSH
23579: LD_INT 33
23581: PUSH
23582: LD_INT 34
23584: PUSH
23585: LD_INT 36
23587: PUSH
23588: EMPTY
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: PUSH
23625: LD_INT 101
23627: PUSH
23628: LD_INT 102
23630: PUSH
23631: LD_INT 103
23633: PUSH
23634: LD_INT 104
23636: PUSH
23637: LD_INT 105
23639: PUSH
23640: LD_INT 106
23642: PUSH
23643: LD_INT 107
23645: PUSH
23646: LD_INT 108
23648: PUSH
23649: LD_INT 109
23651: PUSH
23652: LD_INT 110
23654: PUSH
23655: LD_INT 111
23657: PUSH
23658: LD_INT 112
23660: PUSH
23661: LD_INT 113
23663: PUSH
23664: LD_INT 114
23666: PUSH
23667: LD_INT 116
23669: PUSH
23670: LD_INT 117
23672: PUSH
23673: LD_INT 118
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: ST_TO_ADDR
23699: GO 24098
23701: LD_INT 18
23703: DOUBLE
23704: EQUAL
23705: IFTRUE 23709
23707: GO 23857
23709: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23710: LD_ADDR_VAR 0 2
23714: PUSH
23715: LD_INT 2
23717: PUSH
23718: LD_INT 4
23720: PUSH
23721: LD_INT 5
23723: PUSH
23724: LD_INT 7
23726: PUSH
23727: LD_INT 11
23729: PUSH
23730: LD_INT 12
23732: PUSH
23733: LD_INT 15
23735: PUSH
23736: LD_INT 16
23738: PUSH
23739: LD_INT 20
23741: PUSH
23742: LD_INT 21
23744: PUSH
23745: LD_INT 22
23747: PUSH
23748: LD_INT 23
23750: PUSH
23751: LD_INT 25
23753: PUSH
23754: LD_INT 26
23756: PUSH
23757: LD_INT 30
23759: PUSH
23760: LD_INT 31
23762: PUSH
23763: LD_INT 32
23765: PUSH
23766: LD_INT 33
23768: PUSH
23769: LD_INT 34
23771: PUSH
23772: LD_INT 35
23774: PUSH
23775: LD_INT 36
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: PUSH
23801: LD_INT 101
23803: PUSH
23804: LD_INT 102
23806: PUSH
23807: LD_INT 103
23809: PUSH
23810: LD_INT 106
23812: PUSH
23813: LD_INT 108
23815: PUSH
23816: LD_INT 112
23818: PUSH
23819: LD_INT 113
23821: PUSH
23822: LD_INT 114
23824: PUSH
23825: LD_INT 115
23827: PUSH
23828: LD_INT 116
23830: PUSH
23831: LD_INT 117
23833: PUSH
23834: LD_INT 118
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: ST_TO_ADDR
23855: GO 24098
23857: LD_INT 19
23859: DOUBLE
23860: EQUAL
23861: IFTRUE 23865
23863: GO 24097
23865: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23866: LD_ADDR_VAR 0 2
23870: PUSH
23871: LD_INT 1
23873: PUSH
23874: LD_INT 2
23876: PUSH
23877: LD_INT 3
23879: PUSH
23880: LD_INT 4
23882: PUSH
23883: LD_INT 5
23885: PUSH
23886: LD_INT 6
23888: PUSH
23889: LD_INT 7
23891: PUSH
23892: LD_INT 8
23894: PUSH
23895: LD_INT 9
23897: PUSH
23898: LD_INT 10
23900: PUSH
23901: LD_INT 11
23903: PUSH
23904: LD_INT 12
23906: PUSH
23907: LD_INT 13
23909: PUSH
23910: LD_INT 14
23912: PUSH
23913: LD_INT 15
23915: PUSH
23916: LD_INT 16
23918: PUSH
23919: LD_INT 17
23921: PUSH
23922: LD_INT 18
23924: PUSH
23925: LD_INT 19
23927: PUSH
23928: LD_INT 20
23930: PUSH
23931: LD_INT 21
23933: PUSH
23934: LD_INT 22
23936: PUSH
23937: LD_INT 23
23939: PUSH
23940: LD_INT 24
23942: PUSH
23943: LD_INT 25
23945: PUSH
23946: LD_INT 26
23948: PUSH
23949: LD_INT 27
23951: PUSH
23952: LD_INT 28
23954: PUSH
23955: LD_INT 29
23957: PUSH
23958: LD_INT 30
23960: PUSH
23961: LD_INT 31
23963: PUSH
23964: LD_INT 32
23966: PUSH
23967: LD_INT 33
23969: PUSH
23970: LD_INT 34
23972: PUSH
23973: LD_INT 35
23975: PUSH
23976: LD_INT 36
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: PUSH
24017: LD_INT 101
24019: PUSH
24020: LD_INT 102
24022: PUSH
24023: LD_INT 103
24025: PUSH
24026: LD_INT 104
24028: PUSH
24029: LD_INT 105
24031: PUSH
24032: LD_INT 106
24034: PUSH
24035: LD_INT 107
24037: PUSH
24038: LD_INT 108
24040: PUSH
24041: LD_INT 109
24043: PUSH
24044: LD_INT 110
24046: PUSH
24047: LD_INT 111
24049: PUSH
24050: LD_INT 112
24052: PUSH
24053: LD_INT 113
24055: PUSH
24056: LD_INT 114
24058: PUSH
24059: LD_INT 115
24061: PUSH
24062: LD_INT 116
24064: PUSH
24065: LD_INT 117
24067: PUSH
24068: LD_INT 118
24070: PUSH
24071: EMPTY
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: ST_TO_ADDR
24095: GO 24098
24097: POP
// end else
24098: GO 24329
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24100: LD_ADDR_VAR 0 2
24104: PUSH
24105: LD_INT 1
24107: PUSH
24108: LD_INT 2
24110: PUSH
24111: LD_INT 3
24113: PUSH
24114: LD_INT 4
24116: PUSH
24117: LD_INT 5
24119: PUSH
24120: LD_INT 6
24122: PUSH
24123: LD_INT 7
24125: PUSH
24126: LD_INT 8
24128: PUSH
24129: LD_INT 9
24131: PUSH
24132: LD_INT 10
24134: PUSH
24135: LD_INT 11
24137: PUSH
24138: LD_INT 12
24140: PUSH
24141: LD_INT 13
24143: PUSH
24144: LD_INT 14
24146: PUSH
24147: LD_INT 15
24149: PUSH
24150: LD_INT 16
24152: PUSH
24153: LD_INT 17
24155: PUSH
24156: LD_INT 18
24158: PUSH
24159: LD_INT 19
24161: PUSH
24162: LD_INT 20
24164: PUSH
24165: LD_INT 21
24167: PUSH
24168: LD_INT 22
24170: PUSH
24171: LD_INT 23
24173: PUSH
24174: LD_INT 24
24176: PUSH
24177: LD_INT 25
24179: PUSH
24180: LD_INT 26
24182: PUSH
24183: LD_INT 27
24185: PUSH
24186: LD_INT 28
24188: PUSH
24189: LD_INT 29
24191: PUSH
24192: LD_INT 30
24194: PUSH
24195: LD_INT 31
24197: PUSH
24198: LD_INT 32
24200: PUSH
24201: LD_INT 33
24203: PUSH
24204: LD_INT 34
24206: PUSH
24207: LD_INT 35
24209: PUSH
24210: LD_INT 36
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: PUSH
24251: LD_INT 101
24253: PUSH
24254: LD_INT 102
24256: PUSH
24257: LD_INT 103
24259: PUSH
24260: LD_INT 104
24262: PUSH
24263: LD_INT 105
24265: PUSH
24266: LD_INT 106
24268: PUSH
24269: LD_INT 107
24271: PUSH
24272: LD_INT 108
24274: PUSH
24275: LD_INT 109
24277: PUSH
24278: LD_INT 110
24280: PUSH
24281: LD_INT 111
24283: PUSH
24284: LD_INT 112
24286: PUSH
24287: LD_INT 113
24289: PUSH
24290: LD_INT 114
24292: PUSH
24293: LD_INT 115
24295: PUSH
24296: LD_INT 116
24298: PUSH
24299: LD_INT 117
24301: PUSH
24302: LD_INT 118
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: ST_TO_ADDR
// if result then
24329: LD_VAR 0 2
24333: IFFALSE 25119
// begin normal :=  ;
24335: LD_ADDR_VAR 0 5
24339: PUSH
24340: LD_STRING 
24342: ST_TO_ADDR
// hardcore :=  ;
24343: LD_ADDR_VAR 0 6
24347: PUSH
24348: LD_STRING 
24350: ST_TO_ADDR
// active :=  ;
24351: LD_ADDR_VAR 0 7
24355: PUSH
24356: LD_STRING 
24358: ST_TO_ADDR
// for i = 1 to normalCounter do
24359: LD_ADDR_VAR 0 8
24363: PUSH
24364: DOUBLE
24365: LD_INT 1
24367: DEC
24368: ST_TO_ADDR
24369: LD_EXP 66
24373: PUSH
24374: FOR_TO
24375: IFFALSE 24476
// begin tmp := 0 ;
24377: LD_ADDR_VAR 0 3
24381: PUSH
24382: LD_STRING 0
24384: ST_TO_ADDR
// if result [ 1 ] then
24385: LD_VAR 0 2
24389: PUSH
24390: LD_INT 1
24392: ARRAY
24393: IFFALSE 24458
// if result [ 1 ] [ 1 ] = i then
24395: LD_VAR 0 2
24399: PUSH
24400: LD_INT 1
24402: ARRAY
24403: PUSH
24404: LD_INT 1
24406: ARRAY
24407: PUSH
24408: LD_VAR 0 8
24412: EQUAL
24413: IFFALSE 24458
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24415: LD_ADDR_VAR 0 2
24419: PUSH
24420: LD_VAR 0 2
24424: PPUSH
24425: LD_INT 1
24427: PPUSH
24428: LD_VAR 0 2
24432: PUSH
24433: LD_INT 1
24435: ARRAY
24436: PPUSH
24437: LD_INT 1
24439: PPUSH
24440: CALL_OW 3
24444: PPUSH
24445: CALL_OW 1
24449: ST_TO_ADDR
// tmp := 1 ;
24450: LD_ADDR_VAR 0 3
24454: PUSH
24455: LD_STRING 1
24457: ST_TO_ADDR
// end ; normal := normal & tmp ;
24458: LD_ADDR_VAR 0 5
24462: PUSH
24463: LD_VAR 0 5
24467: PUSH
24468: LD_VAR 0 3
24472: STR
24473: ST_TO_ADDR
// end ;
24474: GO 24374
24476: POP
24477: POP
// for i = 1 to hardcoreCounter do
24478: LD_ADDR_VAR 0 8
24482: PUSH
24483: DOUBLE
24484: LD_INT 1
24486: DEC
24487: ST_TO_ADDR
24488: LD_EXP 67
24492: PUSH
24493: FOR_TO
24494: IFFALSE 24599
// begin tmp := 0 ;
24496: LD_ADDR_VAR 0 3
24500: PUSH
24501: LD_STRING 0
24503: ST_TO_ADDR
// if result [ 2 ] then
24504: LD_VAR 0 2
24508: PUSH
24509: LD_INT 2
24511: ARRAY
24512: IFFALSE 24581
// if result [ 2 ] [ 1 ] = 100 + i then
24514: LD_VAR 0 2
24518: PUSH
24519: LD_INT 2
24521: ARRAY
24522: PUSH
24523: LD_INT 1
24525: ARRAY
24526: PUSH
24527: LD_INT 100
24529: PUSH
24530: LD_VAR 0 8
24534: PLUS
24535: EQUAL
24536: IFFALSE 24581
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24538: LD_ADDR_VAR 0 2
24542: PUSH
24543: LD_VAR 0 2
24547: PPUSH
24548: LD_INT 2
24550: PPUSH
24551: LD_VAR 0 2
24555: PUSH
24556: LD_INT 2
24558: ARRAY
24559: PPUSH
24560: LD_INT 1
24562: PPUSH
24563: CALL_OW 3
24567: PPUSH
24568: CALL_OW 1
24572: ST_TO_ADDR
// tmp := 1 ;
24573: LD_ADDR_VAR 0 3
24577: PUSH
24578: LD_STRING 1
24580: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24581: LD_ADDR_VAR 0 6
24585: PUSH
24586: LD_VAR 0 6
24590: PUSH
24591: LD_VAR 0 3
24595: STR
24596: ST_TO_ADDR
// end ;
24597: GO 24493
24599: POP
24600: POP
// if isGameLoad then
24601: LD_VAR 0 1
24605: IFFALSE 25080
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24607: LD_ADDR_VAR 0 4
24611: PUSH
24612: LD_EXP 70
24616: PUSH
24617: LD_EXP 69
24621: PUSH
24622: LD_EXP 71
24626: PUSH
24627: LD_EXP 68
24631: PUSH
24632: LD_EXP 72
24636: PUSH
24637: LD_EXP 73
24641: PUSH
24642: LD_EXP 74
24646: PUSH
24647: LD_EXP 75
24651: PUSH
24652: LD_EXP 76
24656: PUSH
24657: LD_EXP 77
24661: PUSH
24662: LD_EXP 78
24666: PUSH
24667: LD_EXP 79
24671: PUSH
24672: LD_EXP 80
24676: PUSH
24677: LD_EXP 81
24681: PUSH
24682: LD_EXP 89
24686: PUSH
24687: LD_EXP 90
24691: PUSH
24692: LD_EXP 91
24696: PUSH
24697: LD_EXP 92
24701: PUSH
24702: LD_EXP 94
24706: PUSH
24707: LD_EXP 95
24711: PUSH
24712: LD_EXP 96
24716: PUSH
24717: LD_EXP 99
24721: PUSH
24722: LD_EXP 101
24726: PUSH
24727: LD_EXP 102
24731: PUSH
24732: LD_EXP 103
24736: PUSH
24737: LD_EXP 105
24741: PUSH
24742: LD_EXP 106
24746: PUSH
24747: LD_EXP 109
24751: PUSH
24752: LD_EXP 110
24756: PUSH
24757: LD_EXP 111
24761: PUSH
24762: LD_EXP 112
24766: PUSH
24767: LD_EXP 113
24771: PUSH
24772: LD_EXP 114
24776: PUSH
24777: LD_EXP 115
24781: PUSH
24782: LD_EXP 116
24786: PUSH
24787: LD_EXP 117
24791: PUSH
24792: LD_EXP 82
24796: PUSH
24797: LD_EXP 83
24801: PUSH
24802: LD_EXP 86
24806: PUSH
24807: LD_EXP 87
24811: PUSH
24812: LD_EXP 88
24816: PUSH
24817: LD_EXP 84
24821: PUSH
24822: LD_EXP 85
24826: PUSH
24827: LD_EXP 93
24831: PUSH
24832: LD_EXP 97
24836: PUSH
24837: LD_EXP 98
24841: PUSH
24842: LD_EXP 100
24846: PUSH
24847: LD_EXP 104
24851: PUSH
24852: LD_EXP 107
24856: PUSH
24857: LD_EXP 108
24861: PUSH
24862: LD_EXP 118
24866: PUSH
24867: LD_EXP 119
24871: PUSH
24872: LD_EXP 120
24876: PUSH
24877: LD_EXP 121
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: ST_TO_ADDR
// tmp :=  ;
24938: LD_ADDR_VAR 0 3
24942: PUSH
24943: LD_STRING 
24945: ST_TO_ADDR
// for i = 1 to normalCounter do
24946: LD_ADDR_VAR 0 8
24950: PUSH
24951: DOUBLE
24952: LD_INT 1
24954: DEC
24955: ST_TO_ADDR
24956: LD_EXP 66
24960: PUSH
24961: FOR_TO
24962: IFFALSE 24998
// begin if flags [ i ] then
24964: LD_VAR 0 4
24968: PUSH
24969: LD_VAR 0 8
24973: ARRAY
24974: IFFALSE 24996
// tmp := tmp & i & ; ;
24976: LD_ADDR_VAR 0 3
24980: PUSH
24981: LD_VAR 0 3
24985: PUSH
24986: LD_VAR 0 8
24990: STR
24991: PUSH
24992: LD_STRING ;
24994: STR
24995: ST_TO_ADDR
// end ;
24996: GO 24961
24998: POP
24999: POP
// for i = 1 to hardcoreCounter do
25000: LD_ADDR_VAR 0 8
25004: PUSH
25005: DOUBLE
25006: LD_INT 1
25008: DEC
25009: ST_TO_ADDR
25010: LD_EXP 67
25014: PUSH
25015: FOR_TO
25016: IFFALSE 25062
// begin if flags [ normalCounter + i ] then
25018: LD_VAR 0 4
25022: PUSH
25023: LD_EXP 66
25027: PUSH
25028: LD_VAR 0 8
25032: PLUS
25033: ARRAY
25034: IFFALSE 25060
// tmp := tmp & ( 100 + i ) & ; ;
25036: LD_ADDR_VAR 0 3
25040: PUSH
25041: LD_VAR 0 3
25045: PUSH
25046: LD_INT 100
25048: PUSH
25049: LD_VAR 0 8
25053: PLUS
25054: STR
25055: PUSH
25056: LD_STRING ;
25058: STR
25059: ST_TO_ADDR
// end ;
25060: GO 25015
25062: POP
25063: POP
// if tmp then
25064: LD_VAR 0 3
25068: IFFALSE 25080
// active := tmp ;
25070: LD_ADDR_VAR 0 7
25074: PUSH
25075: LD_VAR 0 3
25079: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25080: LD_STRING getStreamItemsFromMission("
25082: PUSH
25083: LD_VAR 0 5
25087: STR
25088: PUSH
25089: LD_STRING ","
25091: STR
25092: PUSH
25093: LD_VAR 0 6
25097: STR
25098: PUSH
25099: LD_STRING ","
25101: STR
25102: PUSH
25103: LD_VAR 0 7
25107: STR
25108: PUSH
25109: LD_STRING ")
25111: STR
25112: PPUSH
25113: CALL_OW 559
// end else
25117: GO 25126
// ToLua ( getStreamItemsFromMission("","","") ) ;
25119: LD_STRING getStreamItemsFromMission("","","")
25121: PPUSH
25122: CALL_OW 559
// end ;
25126: LD_VAR 0 2
25130: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25131: LD_EXP 65
25135: PUSH
25136: LD_EXP 70
25140: AND
25141: IFFALSE 25265
25143: GO 25145
25145: DISABLE
25146: LD_INT 0
25148: PPUSH
25149: PPUSH
// begin enable ;
25150: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25151: LD_ADDR_VAR 0 2
25155: PUSH
25156: LD_INT 22
25158: PUSH
25159: LD_OWVAR 2
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 2
25170: PUSH
25171: LD_INT 34
25173: PUSH
25174: LD_INT 7
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 34
25183: PUSH
25184: LD_INT 45
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PUSH
25191: LD_INT 34
25193: PUSH
25194: LD_INT 28
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: PUSH
25201: LD_INT 34
25203: PUSH
25204: LD_INT 47
25206: PUSH
25207: EMPTY
25208: LIST
25209: LIST
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PPUSH
25222: CALL_OW 69
25226: ST_TO_ADDR
// if not tmp then
25227: LD_VAR 0 2
25231: NOT
25232: IFFALSE 25236
// exit ;
25234: GO 25265
// for i in tmp do
25236: LD_ADDR_VAR 0 1
25240: PUSH
25241: LD_VAR 0 2
25245: PUSH
25246: FOR_IN
25247: IFFALSE 25263
// begin SetLives ( i , 0 ) ;
25249: LD_VAR 0 1
25253: PPUSH
25254: LD_INT 0
25256: PPUSH
25257: CALL_OW 234
// end ;
25261: GO 25246
25263: POP
25264: POP
// end ;
25265: PPOPN 2
25267: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25268: LD_EXP 65
25272: PUSH
25273: LD_EXP 71
25277: AND
25278: IFFALSE 25362
25280: GO 25282
25282: DISABLE
25283: LD_INT 0
25285: PPUSH
25286: PPUSH
// begin enable ;
25287: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25288: LD_ADDR_VAR 0 2
25292: PUSH
25293: LD_INT 22
25295: PUSH
25296: LD_OWVAR 2
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PUSH
25305: LD_INT 32
25307: PUSH
25308: LD_INT 3
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: PPUSH
25319: CALL_OW 69
25323: ST_TO_ADDR
// if not tmp then
25324: LD_VAR 0 2
25328: NOT
25329: IFFALSE 25333
// exit ;
25331: GO 25362
// for i in tmp do
25333: LD_ADDR_VAR 0 1
25337: PUSH
25338: LD_VAR 0 2
25342: PUSH
25343: FOR_IN
25344: IFFALSE 25360
// begin SetLives ( i , 0 ) ;
25346: LD_VAR 0 1
25350: PPUSH
25351: LD_INT 0
25353: PPUSH
25354: CALL_OW 234
// end ;
25358: GO 25343
25360: POP
25361: POP
// end ;
25362: PPOPN 2
25364: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25365: LD_EXP 65
25369: PUSH
25370: LD_EXP 68
25374: AND
25375: IFFALSE 25468
25377: GO 25379
25379: DISABLE
25380: LD_INT 0
25382: PPUSH
// begin enable ;
25383: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25384: LD_ADDR_VAR 0 1
25388: PUSH
25389: LD_INT 22
25391: PUSH
25392: LD_OWVAR 2
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PUSH
25401: LD_INT 2
25403: PUSH
25404: LD_INT 25
25406: PUSH
25407: LD_INT 5
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: PUSH
25414: LD_INT 25
25416: PUSH
25417: LD_INT 9
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PUSH
25424: LD_INT 25
25426: PUSH
25427: LD_INT 8
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PPUSH
25444: CALL_OW 69
25448: PUSH
25449: FOR_IN
25450: IFFALSE 25466
// begin SetClass ( i , 1 ) ;
25452: LD_VAR 0 1
25456: PPUSH
25457: LD_INT 1
25459: PPUSH
25460: CALL_OW 336
// end ;
25464: GO 25449
25466: POP
25467: POP
// end ;
25468: PPOPN 1
25470: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25471: LD_EXP 65
25475: PUSH
25476: LD_EXP 69
25480: AND
25481: PUSH
25482: LD_OWVAR 65
25486: PUSH
25487: LD_INT 7
25489: LESS
25490: AND
25491: IFFALSE 25505
25493: GO 25495
25495: DISABLE
// begin enable ;
25496: ENABLE
// game_speed := 7 ;
25497: LD_ADDR_OWVAR 65
25501: PUSH
25502: LD_INT 7
25504: ST_TO_ADDR
// end ;
25505: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25506: LD_EXP 65
25510: PUSH
25511: LD_EXP 72
25515: AND
25516: IFFALSE 25718
25518: GO 25520
25520: DISABLE
25521: LD_INT 0
25523: PPUSH
25524: PPUSH
25525: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25526: LD_ADDR_VAR 0 3
25530: PUSH
25531: LD_INT 81
25533: PUSH
25534: LD_OWVAR 2
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 21
25545: PUSH
25546: LD_INT 1
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PPUSH
25557: CALL_OW 69
25561: ST_TO_ADDR
// if not tmp then
25562: LD_VAR 0 3
25566: NOT
25567: IFFALSE 25571
// exit ;
25569: GO 25718
// if tmp > 5 then
25571: LD_VAR 0 3
25575: PUSH
25576: LD_INT 5
25578: GREATER
25579: IFFALSE 25591
// k := 5 else
25581: LD_ADDR_VAR 0 2
25585: PUSH
25586: LD_INT 5
25588: ST_TO_ADDR
25589: GO 25601
// k := tmp ;
25591: LD_ADDR_VAR 0 2
25595: PUSH
25596: LD_VAR 0 3
25600: ST_TO_ADDR
// for i := 1 to k do
25601: LD_ADDR_VAR 0 1
25605: PUSH
25606: DOUBLE
25607: LD_INT 1
25609: DEC
25610: ST_TO_ADDR
25611: LD_VAR 0 2
25615: PUSH
25616: FOR_TO
25617: IFFALSE 25716
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25619: LD_VAR 0 3
25623: PUSH
25624: LD_VAR 0 1
25628: ARRAY
25629: PPUSH
25630: LD_VAR 0 1
25634: PUSH
25635: LD_INT 4
25637: MOD
25638: PUSH
25639: LD_INT 1
25641: PLUS
25642: PPUSH
25643: CALL_OW 259
25647: PUSH
25648: LD_INT 10
25650: LESS
25651: IFFALSE 25714
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25653: LD_VAR 0 3
25657: PUSH
25658: LD_VAR 0 1
25662: ARRAY
25663: PPUSH
25664: LD_VAR 0 1
25668: PUSH
25669: LD_INT 4
25671: MOD
25672: PUSH
25673: LD_INT 1
25675: PLUS
25676: PPUSH
25677: LD_VAR 0 3
25681: PUSH
25682: LD_VAR 0 1
25686: ARRAY
25687: PPUSH
25688: LD_VAR 0 1
25692: PUSH
25693: LD_INT 4
25695: MOD
25696: PUSH
25697: LD_INT 1
25699: PLUS
25700: PPUSH
25701: CALL_OW 259
25705: PUSH
25706: LD_INT 1
25708: PLUS
25709: PPUSH
25710: CALL_OW 237
25714: GO 25616
25716: POP
25717: POP
// end ;
25718: PPOPN 3
25720: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25721: LD_EXP 65
25725: PUSH
25726: LD_EXP 73
25730: AND
25731: IFFALSE 25751
25733: GO 25735
25735: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25736: LD_INT 4
25738: PPUSH
25739: LD_OWVAR 2
25743: PPUSH
25744: LD_INT 0
25746: PPUSH
25747: CALL_OW 324
25751: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25752: LD_EXP 65
25756: PUSH
25757: LD_EXP 102
25761: AND
25762: IFFALSE 25782
25764: GO 25766
25766: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25767: LD_INT 19
25769: PPUSH
25770: LD_OWVAR 2
25774: PPUSH
25775: LD_INT 0
25777: PPUSH
25778: CALL_OW 324
25782: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25783: LD_EXP 65
25787: PUSH
25788: LD_EXP 74
25792: AND
25793: IFFALSE 25895
25795: GO 25797
25797: DISABLE
25798: LD_INT 0
25800: PPUSH
25801: PPUSH
// begin enable ;
25802: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25803: LD_ADDR_VAR 0 2
25807: PUSH
25808: LD_INT 22
25810: PUSH
25811: LD_OWVAR 2
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: PUSH
25820: LD_INT 2
25822: PUSH
25823: LD_INT 34
25825: PUSH
25826: LD_INT 11
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PUSH
25833: LD_INT 34
25835: PUSH
25836: LD_INT 30
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: LIST
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: PPUSH
25852: CALL_OW 69
25856: ST_TO_ADDR
// if not tmp then
25857: LD_VAR 0 2
25861: NOT
25862: IFFALSE 25866
// exit ;
25864: GO 25895
// for i in tmp do
25866: LD_ADDR_VAR 0 1
25870: PUSH
25871: LD_VAR 0 2
25875: PUSH
25876: FOR_IN
25877: IFFALSE 25893
// begin SetLives ( i , 0 ) ;
25879: LD_VAR 0 1
25883: PPUSH
25884: LD_INT 0
25886: PPUSH
25887: CALL_OW 234
// end ;
25891: GO 25876
25893: POP
25894: POP
// end ;
25895: PPOPN 2
25897: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25898: LD_EXP 65
25902: PUSH
25903: LD_EXP 75
25907: AND
25908: IFFALSE 25928
25910: GO 25912
25912: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25913: LD_INT 32
25915: PPUSH
25916: LD_OWVAR 2
25920: PPUSH
25921: LD_INT 0
25923: PPUSH
25924: CALL_OW 324
25928: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25929: LD_EXP 65
25933: PUSH
25934: LD_EXP 76
25938: AND
25939: IFFALSE 26120
25941: GO 25943
25943: DISABLE
25944: LD_INT 0
25946: PPUSH
25947: PPUSH
25948: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25949: LD_ADDR_VAR 0 2
25953: PUSH
25954: LD_INT 22
25956: PUSH
25957: LD_OWVAR 2
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: PUSH
25966: LD_INT 33
25968: PUSH
25969: LD_INT 3
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PPUSH
25980: CALL_OW 69
25984: ST_TO_ADDR
// if not tmp then
25985: LD_VAR 0 2
25989: NOT
25990: IFFALSE 25994
// exit ;
25992: GO 26120
// side := 0 ;
25994: LD_ADDR_VAR 0 3
25998: PUSH
25999: LD_INT 0
26001: ST_TO_ADDR
// for i := 1 to 8 do
26002: LD_ADDR_VAR 0 1
26006: PUSH
26007: DOUBLE
26008: LD_INT 1
26010: DEC
26011: ST_TO_ADDR
26012: LD_INT 8
26014: PUSH
26015: FOR_TO
26016: IFFALSE 26064
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26018: LD_OWVAR 2
26022: PUSH
26023: LD_VAR 0 1
26027: NONEQUAL
26028: PUSH
26029: LD_OWVAR 2
26033: PPUSH
26034: LD_VAR 0 1
26038: PPUSH
26039: CALL_OW 81
26043: PUSH
26044: LD_INT 2
26046: EQUAL
26047: AND
26048: IFFALSE 26062
// begin side := i ;
26050: LD_ADDR_VAR 0 3
26054: PUSH
26055: LD_VAR 0 1
26059: ST_TO_ADDR
// break ;
26060: GO 26064
// end ;
26062: GO 26015
26064: POP
26065: POP
// if not side then
26066: LD_VAR 0 3
26070: NOT
26071: IFFALSE 26075
// exit ;
26073: GO 26120
// for i := 1 to tmp do
26075: LD_ADDR_VAR 0 1
26079: PUSH
26080: DOUBLE
26081: LD_INT 1
26083: DEC
26084: ST_TO_ADDR
26085: LD_VAR 0 2
26089: PUSH
26090: FOR_TO
26091: IFFALSE 26118
// if Prob ( 60 ) then
26093: LD_INT 60
26095: PPUSH
26096: CALL_OW 13
26100: IFFALSE 26116
// SetSide ( i , side ) ;
26102: LD_VAR 0 1
26106: PPUSH
26107: LD_VAR 0 3
26111: PPUSH
26112: CALL_OW 235
26116: GO 26090
26118: POP
26119: POP
// end ;
26120: PPOPN 3
26122: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26123: LD_EXP 65
26127: PUSH
26128: LD_EXP 78
26132: AND
26133: IFFALSE 26252
26135: GO 26137
26137: DISABLE
26138: LD_INT 0
26140: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26141: LD_ADDR_VAR 0 1
26145: PUSH
26146: LD_INT 22
26148: PUSH
26149: LD_OWVAR 2
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PUSH
26158: LD_INT 21
26160: PUSH
26161: LD_INT 1
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: LD_INT 3
26170: PUSH
26171: LD_INT 23
26173: PUSH
26174: LD_INT 0
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: LIST
26189: PPUSH
26190: CALL_OW 69
26194: PUSH
26195: FOR_IN
26196: IFFALSE 26250
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26198: LD_VAR 0 1
26202: PPUSH
26203: CALL_OW 257
26207: PUSH
26208: LD_INT 1
26210: PUSH
26211: LD_INT 2
26213: PUSH
26214: LD_INT 3
26216: PUSH
26217: LD_INT 4
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: IN
26226: IFFALSE 26248
// SetClass ( un , rand ( 1 , 4 ) ) ;
26228: LD_VAR 0 1
26232: PPUSH
26233: LD_INT 1
26235: PPUSH
26236: LD_INT 4
26238: PPUSH
26239: CALL_OW 12
26243: PPUSH
26244: CALL_OW 336
26248: GO 26195
26250: POP
26251: POP
// end ;
26252: PPOPN 1
26254: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26255: LD_EXP 65
26259: PUSH
26260: LD_EXP 77
26264: AND
26265: IFFALSE 26344
26267: GO 26269
26269: DISABLE
26270: LD_INT 0
26272: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26273: LD_ADDR_VAR 0 1
26277: PUSH
26278: LD_INT 22
26280: PUSH
26281: LD_OWVAR 2
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: PUSH
26290: LD_INT 21
26292: PUSH
26293: LD_INT 3
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PPUSH
26304: CALL_OW 69
26308: ST_TO_ADDR
// if not tmp then
26309: LD_VAR 0 1
26313: NOT
26314: IFFALSE 26318
// exit ;
26316: GO 26344
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26318: LD_VAR 0 1
26322: PUSH
26323: LD_INT 1
26325: PPUSH
26326: LD_VAR 0 1
26330: PPUSH
26331: CALL_OW 12
26335: ARRAY
26336: PPUSH
26337: LD_INT 100
26339: PPUSH
26340: CALL_OW 234
// end ;
26344: PPOPN 1
26346: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26347: LD_EXP 65
26351: PUSH
26352: LD_EXP 79
26356: AND
26357: IFFALSE 26455
26359: GO 26361
26361: DISABLE
26362: LD_INT 0
26364: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26365: LD_ADDR_VAR 0 1
26369: PUSH
26370: LD_INT 22
26372: PUSH
26373: LD_OWVAR 2
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PUSH
26382: LD_INT 21
26384: PUSH
26385: LD_INT 1
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PPUSH
26396: CALL_OW 69
26400: ST_TO_ADDR
// if not tmp then
26401: LD_VAR 0 1
26405: NOT
26406: IFFALSE 26410
// exit ;
26408: GO 26455
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26410: LD_VAR 0 1
26414: PUSH
26415: LD_INT 1
26417: PPUSH
26418: LD_VAR 0 1
26422: PPUSH
26423: CALL_OW 12
26427: ARRAY
26428: PPUSH
26429: LD_INT 1
26431: PPUSH
26432: LD_INT 4
26434: PPUSH
26435: CALL_OW 12
26439: PPUSH
26440: LD_INT 3000
26442: PPUSH
26443: LD_INT 9000
26445: PPUSH
26446: CALL_OW 12
26450: PPUSH
26451: CALL_OW 492
// end ;
26455: PPOPN 1
26457: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26458: LD_EXP 65
26462: PUSH
26463: LD_EXP 80
26467: AND
26468: IFFALSE 26488
26470: GO 26472
26472: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26473: LD_INT 1
26475: PPUSH
26476: LD_OWVAR 2
26480: PPUSH
26481: LD_INT 0
26483: PPUSH
26484: CALL_OW 324
26488: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26489: LD_EXP 65
26493: PUSH
26494: LD_EXP 81
26498: AND
26499: IFFALSE 26582
26501: GO 26503
26503: DISABLE
26504: LD_INT 0
26506: PPUSH
26507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26508: LD_ADDR_VAR 0 2
26512: PUSH
26513: LD_INT 22
26515: PUSH
26516: LD_OWVAR 2
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: PUSH
26525: LD_INT 21
26527: PUSH
26528: LD_INT 3
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: PPUSH
26539: CALL_OW 69
26543: ST_TO_ADDR
// if not tmp then
26544: LD_VAR 0 2
26548: NOT
26549: IFFALSE 26553
// exit ;
26551: GO 26582
// for i in tmp do
26553: LD_ADDR_VAR 0 1
26557: PUSH
26558: LD_VAR 0 2
26562: PUSH
26563: FOR_IN
26564: IFFALSE 26580
// SetBLevel ( i , 10 ) ;
26566: LD_VAR 0 1
26570: PPUSH
26571: LD_INT 10
26573: PPUSH
26574: CALL_OW 241
26578: GO 26563
26580: POP
26581: POP
// end ;
26582: PPOPN 2
26584: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26585: LD_EXP 65
26589: PUSH
26590: LD_EXP 82
26594: AND
26595: IFFALSE 26706
26597: GO 26599
26599: DISABLE
26600: LD_INT 0
26602: PPUSH
26603: PPUSH
26604: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26605: LD_ADDR_VAR 0 3
26609: PUSH
26610: LD_INT 22
26612: PUSH
26613: LD_OWVAR 2
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: PUSH
26622: LD_INT 25
26624: PUSH
26625: LD_INT 1
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PPUSH
26636: CALL_OW 69
26640: ST_TO_ADDR
// if not tmp then
26641: LD_VAR 0 3
26645: NOT
26646: IFFALSE 26650
// exit ;
26648: GO 26706
// un := tmp [ rand ( 1 , tmp ) ] ;
26650: LD_ADDR_VAR 0 2
26654: PUSH
26655: LD_VAR 0 3
26659: PUSH
26660: LD_INT 1
26662: PPUSH
26663: LD_VAR 0 3
26667: PPUSH
26668: CALL_OW 12
26672: ARRAY
26673: ST_TO_ADDR
// if Crawls ( un ) then
26674: LD_VAR 0 2
26678: PPUSH
26679: CALL_OW 318
26683: IFFALSE 26694
// ComWalk ( un ) ;
26685: LD_VAR 0 2
26689: PPUSH
26690: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26694: LD_VAR 0 2
26698: PPUSH
26699: LD_INT 5
26701: PPUSH
26702: CALL_OW 336
// end ;
26706: PPOPN 3
26708: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26709: LD_EXP 65
26713: PUSH
26714: LD_EXP 83
26718: AND
26719: PUSH
26720: LD_OWVAR 67
26724: PUSH
26725: LD_INT 4
26727: LESS
26728: AND
26729: IFFALSE 26748
26731: GO 26733
26733: DISABLE
// begin Difficulty := Difficulty + 1 ;
26734: LD_ADDR_OWVAR 67
26738: PUSH
26739: LD_OWVAR 67
26743: PUSH
26744: LD_INT 1
26746: PLUS
26747: ST_TO_ADDR
// end ;
26748: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26749: LD_EXP 65
26753: PUSH
26754: LD_EXP 84
26758: AND
26759: IFFALSE 26862
26761: GO 26763
26763: DISABLE
26764: LD_INT 0
26766: PPUSH
// begin for i := 1 to 5 do
26767: LD_ADDR_VAR 0 1
26771: PUSH
26772: DOUBLE
26773: LD_INT 1
26775: DEC
26776: ST_TO_ADDR
26777: LD_INT 5
26779: PUSH
26780: FOR_TO
26781: IFFALSE 26860
// begin uc_nation := nation_nature ;
26783: LD_ADDR_OWVAR 21
26787: PUSH
26788: LD_INT 0
26790: ST_TO_ADDR
// uc_side := 0 ;
26791: LD_ADDR_OWVAR 20
26795: PUSH
26796: LD_INT 0
26798: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26799: LD_ADDR_OWVAR 29
26803: PUSH
26804: LD_INT 12
26806: PUSH
26807: LD_INT 12
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: ST_TO_ADDR
// hc_agressivity := 20 ;
26814: LD_ADDR_OWVAR 35
26818: PUSH
26819: LD_INT 20
26821: ST_TO_ADDR
// hc_class := class_tiger ;
26822: LD_ADDR_OWVAR 28
26826: PUSH
26827: LD_INT 14
26829: ST_TO_ADDR
// hc_gallery :=  ;
26830: LD_ADDR_OWVAR 33
26834: PUSH
26835: LD_STRING 
26837: ST_TO_ADDR
// hc_name :=  ;
26838: LD_ADDR_OWVAR 26
26842: PUSH
26843: LD_STRING 
26845: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26846: CALL_OW 44
26850: PPUSH
26851: LD_INT 0
26853: PPUSH
26854: CALL_OW 51
// end ;
26858: GO 26780
26860: POP
26861: POP
// end ;
26862: PPOPN 1
26864: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26865: LD_EXP 65
26869: PUSH
26870: LD_EXP 85
26874: AND
26875: IFFALSE 26884
26877: GO 26879
26879: DISABLE
// StreamSibBomb ;
26880: CALL 26885 0 0
26884: END
// export function StreamSibBomb ; var i , x , y ; begin
26885: LD_INT 0
26887: PPUSH
26888: PPUSH
26889: PPUSH
26890: PPUSH
// result := false ;
26891: LD_ADDR_VAR 0 1
26895: PUSH
26896: LD_INT 0
26898: ST_TO_ADDR
// for i := 1 to 16 do
26899: LD_ADDR_VAR 0 2
26903: PUSH
26904: DOUBLE
26905: LD_INT 1
26907: DEC
26908: ST_TO_ADDR
26909: LD_INT 16
26911: PUSH
26912: FOR_TO
26913: IFFALSE 27112
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26915: LD_ADDR_VAR 0 3
26919: PUSH
26920: LD_INT 10
26922: PUSH
26923: LD_INT 20
26925: PUSH
26926: LD_INT 30
26928: PUSH
26929: LD_INT 40
26931: PUSH
26932: LD_INT 50
26934: PUSH
26935: LD_INT 60
26937: PUSH
26938: LD_INT 70
26940: PUSH
26941: LD_INT 80
26943: PUSH
26944: LD_INT 90
26946: PUSH
26947: LD_INT 100
26949: PUSH
26950: LD_INT 110
26952: PUSH
26953: LD_INT 120
26955: PUSH
26956: LD_INT 130
26958: PUSH
26959: LD_INT 140
26961: PUSH
26962: LD_INT 150
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: LIST
26972: LIST
26973: LIST
26974: LIST
26975: LIST
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: PUSH
26982: LD_INT 1
26984: PPUSH
26985: LD_INT 15
26987: PPUSH
26988: CALL_OW 12
26992: ARRAY
26993: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26994: LD_ADDR_VAR 0 4
26998: PUSH
26999: LD_INT 10
27001: PUSH
27002: LD_INT 20
27004: PUSH
27005: LD_INT 30
27007: PUSH
27008: LD_INT 40
27010: PUSH
27011: LD_INT 50
27013: PUSH
27014: LD_INT 60
27016: PUSH
27017: LD_INT 70
27019: PUSH
27020: LD_INT 80
27022: PUSH
27023: LD_INT 90
27025: PUSH
27026: LD_INT 100
27028: PUSH
27029: LD_INT 110
27031: PUSH
27032: LD_INT 120
27034: PUSH
27035: LD_INT 130
27037: PUSH
27038: LD_INT 140
27040: PUSH
27041: LD_INT 150
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: LIST
27059: LIST
27060: PUSH
27061: LD_INT 1
27063: PPUSH
27064: LD_INT 15
27066: PPUSH
27067: CALL_OW 12
27071: ARRAY
27072: ST_TO_ADDR
// if ValidHex ( x , y ) then
27073: LD_VAR 0 3
27077: PPUSH
27078: LD_VAR 0 4
27082: PPUSH
27083: CALL_OW 488
27087: IFFALSE 27110
// begin result := [ x , y ] ;
27089: LD_ADDR_VAR 0 1
27093: PUSH
27094: LD_VAR 0 3
27098: PUSH
27099: LD_VAR 0 4
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: ST_TO_ADDR
// break ;
27108: GO 27112
// end ; end ;
27110: GO 26912
27112: POP
27113: POP
// if result then
27114: LD_VAR 0 1
27118: IFFALSE 27178
// begin ToLua ( playSibBomb() ) ;
27120: LD_STRING playSibBomb()
27122: PPUSH
27123: CALL_OW 559
// wait ( 0 0$14 ) ;
27127: LD_INT 490
27129: PPUSH
27130: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27134: LD_VAR 0 1
27138: PUSH
27139: LD_INT 1
27141: ARRAY
27142: PPUSH
27143: LD_VAR 0 1
27147: PUSH
27148: LD_INT 2
27150: ARRAY
27151: PPUSH
27152: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27156: LD_VAR 0 1
27160: PUSH
27161: LD_INT 1
27163: ARRAY
27164: PPUSH
27165: LD_VAR 0 1
27169: PUSH
27170: LD_INT 2
27172: ARRAY
27173: PPUSH
27174: CALL_OW 429
// end ; end ;
27178: LD_VAR 0 1
27182: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27183: LD_EXP 65
27187: PUSH
27188: LD_EXP 87
27192: AND
27193: IFFALSE 27205
27195: GO 27197
27197: DISABLE
// YouLost (  ) ;
27198: LD_STRING 
27200: PPUSH
27201: CALL_OW 104
27205: END
// every 0 0$1 trigger StreamModeActive and sFog do
27206: LD_EXP 65
27210: PUSH
27211: LD_EXP 86
27215: AND
27216: IFFALSE 27230
27218: GO 27220
27220: DISABLE
// FogOff ( your_side ) ;
27221: LD_OWVAR 2
27225: PPUSH
27226: CALL_OW 344
27230: END
// every 0 0$1 trigger StreamModeActive and sSun do
27231: LD_EXP 65
27235: PUSH
27236: LD_EXP 88
27240: AND
27241: IFFALSE 27269
27243: GO 27245
27245: DISABLE
// begin solar_recharge_percent := 0 ;
27246: LD_ADDR_OWVAR 79
27250: PUSH
27251: LD_INT 0
27253: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27254: LD_INT 10500
27256: PPUSH
27257: CALL_OW 67
// solar_recharge_percent := 100 ;
27261: LD_ADDR_OWVAR 79
27265: PUSH
27266: LD_INT 100
27268: ST_TO_ADDR
// end ;
27269: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27270: LD_EXP 65
27274: PUSH
27275: LD_EXP 89
27279: AND
27280: IFFALSE 27519
27282: GO 27284
27284: DISABLE
27285: LD_INT 0
27287: PPUSH
27288: PPUSH
27289: PPUSH
// begin tmp := [ ] ;
27290: LD_ADDR_VAR 0 3
27294: PUSH
27295: EMPTY
27296: ST_TO_ADDR
// for i := 1 to 6 do
27297: LD_ADDR_VAR 0 1
27301: PUSH
27302: DOUBLE
27303: LD_INT 1
27305: DEC
27306: ST_TO_ADDR
27307: LD_INT 6
27309: PUSH
27310: FOR_TO
27311: IFFALSE 27416
// begin uc_nation := nation_nature ;
27313: LD_ADDR_OWVAR 21
27317: PUSH
27318: LD_INT 0
27320: ST_TO_ADDR
// uc_side := 0 ;
27321: LD_ADDR_OWVAR 20
27325: PUSH
27326: LD_INT 0
27328: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27329: LD_ADDR_OWVAR 29
27333: PUSH
27334: LD_INT 12
27336: PUSH
27337: LD_INT 12
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: ST_TO_ADDR
// hc_agressivity := 20 ;
27344: LD_ADDR_OWVAR 35
27348: PUSH
27349: LD_INT 20
27351: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27352: LD_ADDR_OWVAR 28
27356: PUSH
27357: LD_INT 17
27359: ST_TO_ADDR
// hc_gallery :=  ;
27360: LD_ADDR_OWVAR 33
27364: PUSH
27365: LD_STRING 
27367: ST_TO_ADDR
// hc_name :=  ;
27368: LD_ADDR_OWVAR 26
27372: PUSH
27373: LD_STRING 
27375: ST_TO_ADDR
// un := CreateHuman ;
27376: LD_ADDR_VAR 0 2
27380: PUSH
27381: CALL_OW 44
27385: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27386: LD_VAR 0 2
27390: PPUSH
27391: LD_INT 1
27393: PPUSH
27394: CALL_OW 51
// tmp := tmp ^ un ;
27398: LD_ADDR_VAR 0 3
27402: PUSH
27403: LD_VAR 0 3
27407: PUSH
27408: LD_VAR 0 2
27412: ADD
27413: ST_TO_ADDR
// end ;
27414: GO 27310
27416: POP
27417: POP
// repeat wait ( 0 0$1 ) ;
27418: LD_INT 35
27420: PPUSH
27421: CALL_OW 67
// for un in tmp do
27425: LD_ADDR_VAR 0 2
27429: PUSH
27430: LD_VAR 0 3
27434: PUSH
27435: FOR_IN
27436: IFFALSE 27510
// begin if IsDead ( un ) then
27438: LD_VAR 0 2
27442: PPUSH
27443: CALL_OW 301
27447: IFFALSE 27467
// begin tmp := tmp diff un ;
27449: LD_ADDR_VAR 0 3
27453: PUSH
27454: LD_VAR 0 3
27458: PUSH
27459: LD_VAR 0 2
27463: DIFF
27464: ST_TO_ADDR
// continue ;
27465: GO 27435
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27467: LD_VAR 0 2
27471: PPUSH
27472: LD_INT 3
27474: PUSH
27475: LD_INT 22
27477: PUSH
27478: LD_INT 0
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PPUSH
27489: CALL_OW 69
27493: PPUSH
27494: LD_VAR 0 2
27498: PPUSH
27499: CALL_OW 74
27503: PPUSH
27504: CALL_OW 115
// end ;
27508: GO 27435
27510: POP
27511: POP
// until not tmp ;
27512: LD_VAR 0 3
27516: NOT
27517: IFFALSE 27418
// end ;
27519: PPOPN 3
27521: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27522: LD_EXP 65
27526: PUSH
27527: LD_EXP 90
27531: AND
27532: IFFALSE 27586
27534: GO 27536
27536: DISABLE
// begin ToLua ( displayTroll(); ) ;
27537: LD_STRING displayTroll();
27539: PPUSH
27540: CALL_OW 559
// wait ( 3 3$00 ) ;
27544: LD_INT 6300
27546: PPUSH
27547: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27551: LD_STRING hideTroll();
27553: PPUSH
27554: CALL_OW 559
// wait ( 1 1$00 ) ;
27558: LD_INT 2100
27560: PPUSH
27561: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27565: LD_STRING displayTroll();
27567: PPUSH
27568: CALL_OW 559
// wait ( 1 1$00 ) ;
27572: LD_INT 2100
27574: PPUSH
27575: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27579: LD_STRING hideTroll();
27581: PPUSH
27582: CALL_OW 559
// end ;
27586: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27587: LD_EXP 65
27591: PUSH
27592: LD_EXP 91
27596: AND
27597: IFFALSE 27660
27599: GO 27601
27601: DISABLE
27602: LD_INT 0
27604: PPUSH
// begin p := 0 ;
27605: LD_ADDR_VAR 0 1
27609: PUSH
27610: LD_INT 0
27612: ST_TO_ADDR
// repeat game_speed := 1 ;
27613: LD_ADDR_OWVAR 65
27617: PUSH
27618: LD_INT 1
27620: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27621: LD_INT 35
27623: PPUSH
27624: CALL_OW 67
// p := p + 1 ;
27628: LD_ADDR_VAR 0 1
27632: PUSH
27633: LD_VAR 0 1
27637: PUSH
27638: LD_INT 1
27640: PLUS
27641: ST_TO_ADDR
// until p >= 60 ;
27642: LD_VAR 0 1
27646: PUSH
27647: LD_INT 60
27649: GREATEREQUAL
27650: IFFALSE 27613
// game_speed := 4 ;
27652: LD_ADDR_OWVAR 65
27656: PUSH
27657: LD_INT 4
27659: ST_TO_ADDR
// end ;
27660: PPOPN 1
27662: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27663: LD_EXP 65
27667: PUSH
27668: LD_EXP 92
27672: AND
27673: IFFALSE 27819
27675: GO 27677
27677: DISABLE
27678: LD_INT 0
27680: PPUSH
27681: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27682: LD_ADDR_VAR 0 1
27686: PUSH
27687: LD_INT 22
27689: PUSH
27690: LD_OWVAR 2
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: PUSH
27699: LD_INT 2
27701: PUSH
27702: LD_INT 30
27704: PUSH
27705: LD_INT 0
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: PUSH
27712: LD_INT 30
27714: PUSH
27715: LD_INT 1
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: LIST
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: PPUSH
27731: CALL_OW 69
27735: ST_TO_ADDR
// if not depot then
27736: LD_VAR 0 1
27740: NOT
27741: IFFALSE 27745
// exit ;
27743: GO 27819
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27745: LD_ADDR_VAR 0 2
27749: PUSH
27750: LD_VAR 0 1
27754: PUSH
27755: LD_INT 1
27757: PPUSH
27758: LD_VAR 0 1
27762: PPUSH
27763: CALL_OW 12
27767: ARRAY
27768: PPUSH
27769: CALL_OW 274
27773: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27774: LD_VAR 0 2
27778: PPUSH
27779: LD_INT 1
27781: PPUSH
27782: LD_INT 0
27784: PPUSH
27785: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27789: LD_VAR 0 2
27793: PPUSH
27794: LD_INT 2
27796: PPUSH
27797: LD_INT 0
27799: PPUSH
27800: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27804: LD_VAR 0 2
27808: PPUSH
27809: LD_INT 3
27811: PPUSH
27812: LD_INT 0
27814: PPUSH
27815: CALL_OW 277
// end ;
27819: PPOPN 2
27821: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27822: LD_EXP 65
27826: PUSH
27827: LD_EXP 93
27831: AND
27832: IFFALSE 27929
27834: GO 27836
27836: DISABLE
27837: LD_INT 0
27839: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27840: LD_ADDR_VAR 0 1
27844: PUSH
27845: LD_INT 22
27847: PUSH
27848: LD_OWVAR 2
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: PUSH
27857: LD_INT 21
27859: PUSH
27860: LD_INT 1
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: PUSH
27867: LD_INT 3
27869: PUSH
27870: LD_INT 23
27872: PUSH
27873: LD_INT 0
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: LIST
27888: PPUSH
27889: CALL_OW 69
27893: ST_TO_ADDR
// if not tmp then
27894: LD_VAR 0 1
27898: NOT
27899: IFFALSE 27903
// exit ;
27901: GO 27929
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27903: LD_VAR 0 1
27907: PUSH
27908: LD_INT 1
27910: PPUSH
27911: LD_VAR 0 1
27915: PPUSH
27916: CALL_OW 12
27920: ARRAY
27921: PPUSH
27922: LD_INT 200
27924: PPUSH
27925: CALL_OW 234
// end ;
27929: PPOPN 1
27931: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27932: LD_EXP 65
27936: PUSH
27937: LD_EXP 94
27941: AND
27942: IFFALSE 28021
27944: GO 27946
27946: DISABLE
27947: LD_INT 0
27949: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27950: LD_ADDR_VAR 0 1
27954: PUSH
27955: LD_INT 22
27957: PUSH
27958: LD_OWVAR 2
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: LD_INT 21
27969: PUSH
27970: LD_INT 2
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PPUSH
27981: CALL_OW 69
27985: ST_TO_ADDR
// if not tmp then
27986: LD_VAR 0 1
27990: NOT
27991: IFFALSE 27995
// exit ;
27993: GO 28021
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27995: LD_VAR 0 1
27999: PUSH
28000: LD_INT 1
28002: PPUSH
28003: LD_VAR 0 1
28007: PPUSH
28008: CALL_OW 12
28012: ARRAY
28013: PPUSH
28014: LD_INT 60
28016: PPUSH
28017: CALL_OW 234
// end ;
28021: PPOPN 1
28023: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28024: LD_EXP 65
28028: PUSH
28029: LD_EXP 95
28033: AND
28034: IFFALSE 28133
28036: GO 28038
28038: DISABLE
28039: LD_INT 0
28041: PPUSH
28042: PPUSH
// begin enable ;
28043: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28044: LD_ADDR_VAR 0 1
28048: PUSH
28049: LD_INT 22
28051: PUSH
28052: LD_OWVAR 2
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PUSH
28061: LD_INT 61
28063: PUSH
28064: EMPTY
28065: LIST
28066: PUSH
28067: LD_INT 33
28069: PUSH
28070: LD_INT 2
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: LIST
28081: PPUSH
28082: CALL_OW 69
28086: ST_TO_ADDR
// if not tmp then
28087: LD_VAR 0 1
28091: NOT
28092: IFFALSE 28096
// exit ;
28094: GO 28133
// for i in tmp do
28096: LD_ADDR_VAR 0 2
28100: PUSH
28101: LD_VAR 0 1
28105: PUSH
28106: FOR_IN
28107: IFFALSE 28131
// if IsControledBy ( i ) then
28109: LD_VAR 0 2
28113: PPUSH
28114: CALL_OW 312
28118: IFFALSE 28129
// ComUnlink ( i ) ;
28120: LD_VAR 0 2
28124: PPUSH
28125: CALL_OW 136
28129: GO 28106
28131: POP
28132: POP
// end ;
28133: PPOPN 2
28135: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28136: LD_EXP 65
28140: PUSH
28141: LD_EXP 96
28145: AND
28146: IFFALSE 28286
28148: GO 28150
28150: DISABLE
28151: LD_INT 0
28153: PPUSH
28154: PPUSH
// begin ToLua ( displayPowell(); ) ;
28155: LD_STRING displayPowell();
28157: PPUSH
28158: CALL_OW 559
// uc_side := 0 ;
28162: LD_ADDR_OWVAR 20
28166: PUSH
28167: LD_INT 0
28169: ST_TO_ADDR
// uc_nation := 2 ;
28170: LD_ADDR_OWVAR 21
28174: PUSH
28175: LD_INT 2
28177: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28178: LD_ADDR_OWVAR 37
28182: PUSH
28183: LD_INT 14
28185: ST_TO_ADDR
// vc_engine := engine_siberite ;
28186: LD_ADDR_OWVAR 39
28190: PUSH
28191: LD_INT 3
28193: ST_TO_ADDR
// vc_control := control_apeman ;
28194: LD_ADDR_OWVAR 38
28198: PUSH
28199: LD_INT 5
28201: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28202: LD_ADDR_OWVAR 40
28206: PUSH
28207: LD_INT 29
28209: ST_TO_ADDR
// un := CreateVehicle ;
28210: LD_ADDR_VAR 0 2
28214: PUSH
28215: CALL_OW 45
28219: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28220: LD_VAR 0 2
28224: PPUSH
28225: LD_INT 1
28227: PPUSH
28228: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28232: LD_INT 35
28234: PPUSH
28235: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28239: LD_VAR 0 2
28243: PPUSH
28244: LD_INT 22
28246: PUSH
28247: LD_OWVAR 2
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PPUSH
28256: CALL_OW 69
28260: PPUSH
28261: LD_VAR 0 2
28265: PPUSH
28266: CALL_OW 74
28270: PPUSH
28271: CALL_OW 115
// until IsDead ( un ) ;
28275: LD_VAR 0 2
28279: PPUSH
28280: CALL_OW 301
28284: IFFALSE 28232
// end ;
28286: PPOPN 2
28288: END
// every 0 0$1 trigger StreamModeActive and sStu do
28289: LD_EXP 65
28293: PUSH
28294: LD_EXP 104
28298: AND
28299: IFFALSE 28315
28301: GO 28303
28303: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28304: LD_STRING displayStucuk();
28306: PPUSH
28307: CALL_OW 559
// ResetFog ;
28311: CALL_OW 335
// end ;
28315: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28316: LD_EXP 65
28320: PUSH
28321: LD_EXP 97
28325: AND
28326: IFFALSE 28467
28328: GO 28330
28330: DISABLE
28331: LD_INT 0
28333: PPUSH
28334: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28335: LD_ADDR_VAR 0 2
28339: PUSH
28340: LD_INT 22
28342: PUSH
28343: LD_OWVAR 2
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: PUSH
28352: LD_INT 21
28354: PUSH
28355: LD_INT 1
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PPUSH
28366: CALL_OW 69
28370: ST_TO_ADDR
// if not tmp then
28371: LD_VAR 0 2
28375: NOT
28376: IFFALSE 28380
// exit ;
28378: GO 28467
// un := tmp [ rand ( 1 , tmp ) ] ;
28380: LD_ADDR_VAR 0 1
28384: PUSH
28385: LD_VAR 0 2
28389: PUSH
28390: LD_INT 1
28392: PPUSH
28393: LD_VAR 0 2
28397: PPUSH
28398: CALL_OW 12
28402: ARRAY
28403: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28404: LD_VAR 0 1
28408: PPUSH
28409: LD_INT 0
28411: PPUSH
28412: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28416: LD_VAR 0 1
28420: PPUSH
28421: LD_OWVAR 3
28425: PUSH
28426: LD_VAR 0 1
28430: DIFF
28431: PPUSH
28432: LD_VAR 0 1
28436: PPUSH
28437: CALL_OW 74
28441: PPUSH
28442: CALL_OW 115
// wait ( 0 0$20 ) ;
28446: LD_INT 700
28448: PPUSH
28449: CALL_OW 67
// SetSide ( un , your_side ) ;
28453: LD_VAR 0 1
28457: PPUSH
28458: LD_OWVAR 2
28462: PPUSH
28463: CALL_OW 235
// end ;
28467: PPOPN 2
28469: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28470: LD_EXP 65
28474: PUSH
28475: LD_EXP 98
28479: AND
28480: IFFALSE 28586
28482: GO 28484
28484: DISABLE
28485: LD_INT 0
28487: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28488: LD_ADDR_VAR 0 1
28492: PUSH
28493: LD_INT 22
28495: PUSH
28496: LD_OWVAR 2
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: PUSH
28505: LD_INT 2
28507: PUSH
28508: LD_INT 30
28510: PUSH
28511: LD_INT 0
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: PUSH
28518: LD_INT 30
28520: PUSH
28521: LD_INT 1
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: LIST
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: PPUSH
28537: CALL_OW 69
28541: ST_TO_ADDR
// if not depot then
28542: LD_VAR 0 1
28546: NOT
28547: IFFALSE 28551
// exit ;
28549: GO 28586
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28551: LD_VAR 0 1
28555: PUSH
28556: LD_INT 1
28558: ARRAY
28559: PPUSH
28560: CALL_OW 250
28564: PPUSH
28565: LD_VAR 0 1
28569: PUSH
28570: LD_INT 1
28572: ARRAY
28573: PPUSH
28574: CALL_OW 251
28578: PPUSH
28579: LD_INT 70
28581: PPUSH
28582: CALL_OW 495
// end ;
28586: PPOPN 1
28588: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28589: LD_EXP 65
28593: PUSH
28594: LD_EXP 99
28598: AND
28599: IFFALSE 28810
28601: GO 28603
28603: DISABLE
28604: LD_INT 0
28606: PPUSH
28607: PPUSH
28608: PPUSH
28609: PPUSH
28610: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28611: LD_ADDR_VAR 0 5
28615: PUSH
28616: LD_INT 22
28618: PUSH
28619: LD_OWVAR 2
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 21
28630: PUSH
28631: LD_INT 1
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: PPUSH
28642: CALL_OW 69
28646: ST_TO_ADDR
// if not tmp then
28647: LD_VAR 0 5
28651: NOT
28652: IFFALSE 28656
// exit ;
28654: GO 28810
// for i in tmp do
28656: LD_ADDR_VAR 0 1
28660: PUSH
28661: LD_VAR 0 5
28665: PUSH
28666: FOR_IN
28667: IFFALSE 28808
// begin d := rand ( 0 , 5 ) ;
28669: LD_ADDR_VAR 0 4
28673: PUSH
28674: LD_INT 0
28676: PPUSH
28677: LD_INT 5
28679: PPUSH
28680: CALL_OW 12
28684: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28685: LD_ADDR_VAR 0 2
28689: PUSH
28690: LD_VAR 0 1
28694: PPUSH
28695: CALL_OW 250
28699: PPUSH
28700: LD_VAR 0 4
28704: PPUSH
28705: LD_INT 3
28707: PPUSH
28708: LD_INT 12
28710: PPUSH
28711: CALL_OW 12
28715: PPUSH
28716: CALL_OW 272
28720: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28721: LD_ADDR_VAR 0 3
28725: PUSH
28726: LD_VAR 0 1
28730: PPUSH
28731: CALL_OW 251
28735: PPUSH
28736: LD_VAR 0 4
28740: PPUSH
28741: LD_INT 3
28743: PPUSH
28744: LD_INT 12
28746: PPUSH
28747: CALL_OW 12
28751: PPUSH
28752: CALL_OW 273
28756: ST_TO_ADDR
// if ValidHex ( x , y ) then
28757: LD_VAR 0 2
28761: PPUSH
28762: LD_VAR 0 3
28766: PPUSH
28767: CALL_OW 488
28771: IFFALSE 28806
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28773: LD_VAR 0 1
28777: PPUSH
28778: LD_VAR 0 2
28782: PPUSH
28783: LD_VAR 0 3
28787: PPUSH
28788: LD_INT 3
28790: PPUSH
28791: LD_INT 6
28793: PPUSH
28794: CALL_OW 12
28798: PPUSH
28799: LD_INT 1
28801: PPUSH
28802: CALL_OW 483
// end ;
28806: GO 28666
28808: POP
28809: POP
// end ;
28810: PPOPN 5
28812: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28813: LD_EXP 65
28817: PUSH
28818: LD_EXP 100
28822: AND
28823: IFFALSE 28917
28825: GO 28827
28827: DISABLE
28828: LD_INT 0
28830: PPUSH
28831: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28832: LD_ADDR_VAR 0 2
28836: PUSH
28837: LD_INT 22
28839: PUSH
28840: LD_OWVAR 2
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: LD_INT 32
28851: PUSH
28852: LD_INT 1
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: LD_INT 21
28861: PUSH
28862: LD_INT 2
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: LIST
28873: PPUSH
28874: CALL_OW 69
28878: ST_TO_ADDR
// if not tmp then
28879: LD_VAR 0 2
28883: NOT
28884: IFFALSE 28888
// exit ;
28886: GO 28917
// for i in tmp do
28888: LD_ADDR_VAR 0 1
28892: PUSH
28893: LD_VAR 0 2
28897: PUSH
28898: FOR_IN
28899: IFFALSE 28915
// SetFuel ( i , 0 ) ;
28901: LD_VAR 0 1
28905: PPUSH
28906: LD_INT 0
28908: PPUSH
28909: CALL_OW 240
28913: GO 28898
28915: POP
28916: POP
// end ;
28917: PPOPN 2
28919: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28920: LD_EXP 65
28924: PUSH
28925: LD_EXP 101
28929: AND
28930: IFFALSE 28996
28932: GO 28934
28934: DISABLE
28935: LD_INT 0
28937: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28938: LD_ADDR_VAR 0 1
28942: PUSH
28943: LD_INT 22
28945: PUSH
28946: LD_OWVAR 2
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: PUSH
28955: LD_INT 30
28957: PUSH
28958: LD_INT 29
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PPUSH
28969: CALL_OW 69
28973: ST_TO_ADDR
// if not tmp then
28974: LD_VAR 0 1
28978: NOT
28979: IFFALSE 28983
// exit ;
28981: GO 28996
// DestroyUnit ( tmp [ 1 ] ) ;
28983: LD_VAR 0 1
28987: PUSH
28988: LD_INT 1
28990: ARRAY
28991: PPUSH
28992: CALL_OW 65
// end ;
28996: PPOPN 1
28998: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28999: LD_EXP 65
29003: PUSH
29004: LD_EXP 103
29008: AND
29009: IFFALSE 29138
29011: GO 29013
29013: DISABLE
29014: LD_INT 0
29016: PPUSH
// begin uc_side := 0 ;
29017: LD_ADDR_OWVAR 20
29021: PUSH
29022: LD_INT 0
29024: ST_TO_ADDR
// uc_nation := nation_arabian ;
29025: LD_ADDR_OWVAR 21
29029: PUSH
29030: LD_INT 2
29032: ST_TO_ADDR
// hc_gallery :=  ;
29033: LD_ADDR_OWVAR 33
29037: PUSH
29038: LD_STRING 
29040: ST_TO_ADDR
// hc_name :=  ;
29041: LD_ADDR_OWVAR 26
29045: PUSH
29046: LD_STRING 
29048: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29049: LD_INT 1
29051: PPUSH
29052: LD_INT 11
29054: PPUSH
29055: LD_INT 10
29057: PPUSH
29058: CALL_OW 380
// un := CreateHuman ;
29062: LD_ADDR_VAR 0 1
29066: PUSH
29067: CALL_OW 44
29071: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29072: LD_VAR 0 1
29076: PPUSH
29077: LD_INT 1
29079: PPUSH
29080: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29084: LD_INT 35
29086: PPUSH
29087: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29091: LD_VAR 0 1
29095: PPUSH
29096: LD_INT 22
29098: PUSH
29099: LD_OWVAR 2
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PPUSH
29108: CALL_OW 69
29112: PPUSH
29113: LD_VAR 0 1
29117: PPUSH
29118: CALL_OW 74
29122: PPUSH
29123: CALL_OW 115
// until IsDead ( un ) ;
29127: LD_VAR 0 1
29131: PPUSH
29132: CALL_OW 301
29136: IFFALSE 29084
// end ;
29138: PPOPN 1
29140: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29141: LD_EXP 65
29145: PUSH
29146: LD_EXP 105
29150: AND
29151: IFFALSE 29163
29153: GO 29155
29155: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29156: LD_STRING earthquake(getX(game), 0, 32)
29158: PPUSH
29159: CALL_OW 559
29163: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29164: LD_EXP 65
29168: PUSH
29169: LD_EXP 106
29173: AND
29174: IFFALSE 29265
29176: GO 29178
29178: DISABLE
29179: LD_INT 0
29181: PPUSH
// begin enable ;
29182: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29183: LD_ADDR_VAR 0 1
29187: PUSH
29188: LD_INT 22
29190: PUSH
29191: LD_OWVAR 2
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: PUSH
29200: LD_INT 21
29202: PUSH
29203: LD_INT 2
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: LD_INT 33
29212: PUSH
29213: LD_INT 3
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: LIST
29224: PPUSH
29225: CALL_OW 69
29229: ST_TO_ADDR
// if not tmp then
29230: LD_VAR 0 1
29234: NOT
29235: IFFALSE 29239
// exit ;
29237: GO 29265
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29239: LD_VAR 0 1
29243: PUSH
29244: LD_INT 1
29246: PPUSH
29247: LD_VAR 0 1
29251: PPUSH
29252: CALL_OW 12
29256: ARRAY
29257: PPUSH
29258: LD_INT 1
29260: PPUSH
29261: CALL_OW 234
// end ;
29265: PPOPN 1
29267: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29268: LD_EXP 65
29272: PUSH
29273: LD_EXP 107
29277: AND
29278: IFFALSE 29419
29280: GO 29282
29282: DISABLE
29283: LD_INT 0
29285: PPUSH
29286: PPUSH
29287: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29288: LD_ADDR_VAR 0 3
29292: PUSH
29293: LD_INT 22
29295: PUSH
29296: LD_OWVAR 2
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: LD_INT 25
29307: PUSH
29308: LD_INT 1
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PPUSH
29319: CALL_OW 69
29323: ST_TO_ADDR
// if not tmp then
29324: LD_VAR 0 3
29328: NOT
29329: IFFALSE 29333
// exit ;
29331: GO 29419
// un := tmp [ rand ( 1 , tmp ) ] ;
29333: LD_ADDR_VAR 0 2
29337: PUSH
29338: LD_VAR 0 3
29342: PUSH
29343: LD_INT 1
29345: PPUSH
29346: LD_VAR 0 3
29350: PPUSH
29351: CALL_OW 12
29355: ARRAY
29356: ST_TO_ADDR
// if Crawls ( un ) then
29357: LD_VAR 0 2
29361: PPUSH
29362: CALL_OW 318
29366: IFFALSE 29377
// ComWalk ( un ) ;
29368: LD_VAR 0 2
29372: PPUSH
29373: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29377: LD_VAR 0 2
29381: PPUSH
29382: LD_INT 9
29384: PPUSH
29385: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29389: LD_INT 28
29391: PPUSH
29392: LD_OWVAR 2
29396: PPUSH
29397: LD_INT 2
29399: PPUSH
29400: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29404: LD_INT 29
29406: PPUSH
29407: LD_OWVAR 2
29411: PPUSH
29412: LD_INT 2
29414: PPUSH
29415: CALL_OW 322
// end ;
29419: PPOPN 3
29421: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29422: LD_EXP 65
29426: PUSH
29427: LD_EXP 108
29431: AND
29432: IFFALSE 29543
29434: GO 29436
29436: DISABLE
29437: LD_INT 0
29439: PPUSH
29440: PPUSH
29441: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29442: LD_ADDR_VAR 0 3
29446: PUSH
29447: LD_INT 22
29449: PUSH
29450: LD_OWVAR 2
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: LD_INT 25
29461: PUSH
29462: LD_INT 1
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: PPUSH
29473: CALL_OW 69
29477: ST_TO_ADDR
// if not tmp then
29478: LD_VAR 0 3
29482: NOT
29483: IFFALSE 29487
// exit ;
29485: GO 29543
// un := tmp [ rand ( 1 , tmp ) ] ;
29487: LD_ADDR_VAR 0 2
29491: PUSH
29492: LD_VAR 0 3
29496: PUSH
29497: LD_INT 1
29499: PPUSH
29500: LD_VAR 0 3
29504: PPUSH
29505: CALL_OW 12
29509: ARRAY
29510: ST_TO_ADDR
// if Crawls ( un ) then
29511: LD_VAR 0 2
29515: PPUSH
29516: CALL_OW 318
29520: IFFALSE 29531
// ComWalk ( un ) ;
29522: LD_VAR 0 2
29526: PPUSH
29527: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29531: LD_VAR 0 2
29535: PPUSH
29536: LD_INT 8
29538: PPUSH
29539: CALL_OW 336
// end ;
29543: PPOPN 3
29545: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29546: LD_EXP 65
29550: PUSH
29551: LD_EXP 109
29555: AND
29556: IFFALSE 29700
29558: GO 29560
29560: DISABLE
29561: LD_INT 0
29563: PPUSH
29564: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29565: LD_ADDR_VAR 0 2
29569: PUSH
29570: LD_INT 22
29572: PUSH
29573: LD_OWVAR 2
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 21
29584: PUSH
29585: LD_INT 2
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 2
29594: PUSH
29595: LD_INT 34
29597: PUSH
29598: LD_INT 12
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: PUSH
29605: LD_INT 34
29607: PUSH
29608: LD_INT 51
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: PUSH
29615: LD_INT 34
29617: PUSH
29618: LD_INT 32
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: LIST
29629: LIST
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: LIST
29635: PPUSH
29636: CALL_OW 69
29640: ST_TO_ADDR
// if not tmp then
29641: LD_VAR 0 2
29645: NOT
29646: IFFALSE 29650
// exit ;
29648: GO 29700
// for i in tmp do
29650: LD_ADDR_VAR 0 1
29654: PUSH
29655: LD_VAR 0 2
29659: PUSH
29660: FOR_IN
29661: IFFALSE 29698
// if GetCargo ( i , mat_artifact ) = 0 then
29663: LD_VAR 0 1
29667: PPUSH
29668: LD_INT 4
29670: PPUSH
29671: CALL_OW 289
29675: PUSH
29676: LD_INT 0
29678: EQUAL
29679: IFFALSE 29696
// SetCargo ( i , mat_siberit , 100 ) ;
29681: LD_VAR 0 1
29685: PPUSH
29686: LD_INT 3
29688: PPUSH
29689: LD_INT 100
29691: PPUSH
29692: CALL_OW 290
29696: GO 29660
29698: POP
29699: POP
// end ;
29700: PPOPN 2
29702: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29703: LD_EXP 65
29707: PUSH
29708: LD_EXP 110
29712: AND
29713: IFFALSE 29896
29715: GO 29717
29717: DISABLE
29718: LD_INT 0
29720: PPUSH
29721: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29722: LD_ADDR_VAR 0 2
29726: PUSH
29727: LD_INT 22
29729: PUSH
29730: LD_OWVAR 2
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PPUSH
29739: CALL_OW 69
29743: ST_TO_ADDR
// if not tmp then
29744: LD_VAR 0 2
29748: NOT
29749: IFFALSE 29753
// exit ;
29751: GO 29896
// for i := 1 to 2 do
29753: LD_ADDR_VAR 0 1
29757: PUSH
29758: DOUBLE
29759: LD_INT 1
29761: DEC
29762: ST_TO_ADDR
29763: LD_INT 2
29765: PUSH
29766: FOR_TO
29767: IFFALSE 29894
// begin uc_side := your_side ;
29769: LD_ADDR_OWVAR 20
29773: PUSH
29774: LD_OWVAR 2
29778: ST_TO_ADDR
// uc_nation := nation_american ;
29779: LD_ADDR_OWVAR 21
29783: PUSH
29784: LD_INT 1
29786: ST_TO_ADDR
// vc_chassis := us_morphling ;
29787: LD_ADDR_OWVAR 37
29791: PUSH
29792: LD_INT 5
29794: ST_TO_ADDR
// vc_engine := engine_siberite ;
29795: LD_ADDR_OWVAR 39
29799: PUSH
29800: LD_INT 3
29802: ST_TO_ADDR
// vc_control := control_computer ;
29803: LD_ADDR_OWVAR 38
29807: PUSH
29808: LD_INT 3
29810: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29811: LD_ADDR_OWVAR 40
29815: PUSH
29816: LD_INT 10
29818: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29819: LD_VAR 0 2
29823: PUSH
29824: LD_INT 1
29826: ARRAY
29827: PPUSH
29828: CALL_OW 310
29832: NOT
29833: IFFALSE 29880
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29835: CALL_OW 45
29839: PPUSH
29840: LD_VAR 0 2
29844: PUSH
29845: LD_INT 1
29847: ARRAY
29848: PPUSH
29849: CALL_OW 250
29853: PPUSH
29854: LD_VAR 0 2
29858: PUSH
29859: LD_INT 1
29861: ARRAY
29862: PPUSH
29863: CALL_OW 251
29867: PPUSH
29868: LD_INT 12
29870: PPUSH
29871: LD_INT 1
29873: PPUSH
29874: CALL_OW 50
29878: GO 29892
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29880: CALL_OW 45
29884: PPUSH
29885: LD_INT 1
29887: PPUSH
29888: CALL_OW 51
// end ;
29892: GO 29766
29894: POP
29895: POP
// end ;
29896: PPOPN 2
29898: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29899: LD_EXP 65
29903: PUSH
29904: LD_EXP 111
29908: AND
29909: IFFALSE 30131
29911: GO 29913
29913: DISABLE
29914: LD_INT 0
29916: PPUSH
29917: PPUSH
29918: PPUSH
29919: PPUSH
29920: PPUSH
29921: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29922: LD_ADDR_VAR 0 6
29926: PUSH
29927: LD_INT 22
29929: PUSH
29930: LD_OWVAR 2
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 21
29941: PUSH
29942: LD_INT 1
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: LD_INT 3
29951: PUSH
29952: LD_INT 23
29954: PUSH
29955: LD_INT 0
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: LIST
29970: PPUSH
29971: CALL_OW 69
29975: ST_TO_ADDR
// if not tmp then
29976: LD_VAR 0 6
29980: NOT
29981: IFFALSE 29985
// exit ;
29983: GO 30131
// s1 := rand ( 1 , 4 ) ;
29985: LD_ADDR_VAR 0 2
29989: PUSH
29990: LD_INT 1
29992: PPUSH
29993: LD_INT 4
29995: PPUSH
29996: CALL_OW 12
30000: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30001: LD_ADDR_VAR 0 4
30005: PUSH
30006: LD_VAR 0 6
30010: PUSH
30011: LD_INT 1
30013: ARRAY
30014: PPUSH
30015: LD_VAR 0 2
30019: PPUSH
30020: CALL_OW 259
30024: ST_TO_ADDR
// if s1 = 1 then
30025: LD_VAR 0 2
30029: PUSH
30030: LD_INT 1
30032: EQUAL
30033: IFFALSE 30053
// s2 := rand ( 2 , 4 ) else
30035: LD_ADDR_VAR 0 3
30039: PUSH
30040: LD_INT 2
30042: PPUSH
30043: LD_INT 4
30045: PPUSH
30046: CALL_OW 12
30050: ST_TO_ADDR
30051: GO 30061
// s2 := 1 ;
30053: LD_ADDR_VAR 0 3
30057: PUSH
30058: LD_INT 1
30060: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30061: LD_ADDR_VAR 0 5
30065: PUSH
30066: LD_VAR 0 6
30070: PUSH
30071: LD_INT 1
30073: ARRAY
30074: PPUSH
30075: LD_VAR 0 3
30079: PPUSH
30080: CALL_OW 259
30084: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30085: LD_VAR 0 6
30089: PUSH
30090: LD_INT 1
30092: ARRAY
30093: PPUSH
30094: LD_VAR 0 2
30098: PPUSH
30099: LD_VAR 0 5
30103: PPUSH
30104: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30108: LD_VAR 0 6
30112: PUSH
30113: LD_INT 1
30115: ARRAY
30116: PPUSH
30117: LD_VAR 0 3
30121: PPUSH
30122: LD_VAR 0 4
30126: PPUSH
30127: CALL_OW 237
// end ;
30131: PPOPN 6
30133: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30134: LD_EXP 65
30138: PUSH
30139: LD_EXP 112
30143: AND
30144: IFFALSE 30223
30146: GO 30148
30148: DISABLE
30149: LD_INT 0
30151: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30152: LD_ADDR_VAR 0 1
30156: PUSH
30157: LD_INT 22
30159: PUSH
30160: LD_OWVAR 2
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: LD_INT 30
30171: PUSH
30172: LD_INT 3
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: PPUSH
30183: CALL_OW 69
30187: ST_TO_ADDR
// if not tmp then
30188: LD_VAR 0 1
30192: NOT
30193: IFFALSE 30197
// exit ;
30195: GO 30223
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30197: LD_VAR 0 1
30201: PUSH
30202: LD_INT 1
30204: PPUSH
30205: LD_VAR 0 1
30209: PPUSH
30210: CALL_OW 12
30214: ARRAY
30215: PPUSH
30216: LD_INT 1
30218: PPUSH
30219: CALL_OW 234
// end ;
30223: PPOPN 1
30225: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30226: LD_EXP 65
30230: PUSH
30231: LD_EXP 113
30235: AND
30236: IFFALSE 30348
30238: GO 30240
30240: DISABLE
30241: LD_INT 0
30243: PPUSH
30244: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30245: LD_ADDR_VAR 0 2
30249: PUSH
30250: LD_INT 22
30252: PUSH
30253: LD_OWVAR 2
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: LD_INT 2
30264: PUSH
30265: LD_INT 30
30267: PUSH
30268: LD_INT 27
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: LD_INT 30
30277: PUSH
30278: LD_INT 26
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: LD_INT 30
30287: PUSH
30288: LD_INT 28
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PPUSH
30305: CALL_OW 69
30309: ST_TO_ADDR
// if not tmp then
30310: LD_VAR 0 2
30314: NOT
30315: IFFALSE 30319
// exit ;
30317: GO 30348
// for i in tmp do
30319: LD_ADDR_VAR 0 1
30323: PUSH
30324: LD_VAR 0 2
30328: PUSH
30329: FOR_IN
30330: IFFALSE 30346
// SetLives ( i , 1 ) ;
30332: LD_VAR 0 1
30336: PPUSH
30337: LD_INT 1
30339: PPUSH
30340: CALL_OW 234
30344: GO 30329
30346: POP
30347: POP
// end ;
30348: PPOPN 2
30350: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30351: LD_EXP 65
30355: PUSH
30356: LD_EXP 114
30360: AND
30361: IFFALSE 30648
30363: GO 30365
30365: DISABLE
30366: LD_INT 0
30368: PPUSH
30369: PPUSH
30370: PPUSH
// begin i := rand ( 1 , 7 ) ;
30371: LD_ADDR_VAR 0 1
30375: PUSH
30376: LD_INT 1
30378: PPUSH
30379: LD_INT 7
30381: PPUSH
30382: CALL_OW 12
30386: ST_TO_ADDR
// case i of 1 :
30387: LD_VAR 0 1
30391: PUSH
30392: LD_INT 1
30394: DOUBLE
30395: EQUAL
30396: IFTRUE 30400
30398: GO 30410
30400: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30401: LD_STRING earthquake(getX(game), 0, 32)
30403: PPUSH
30404: CALL_OW 559
30408: GO 30648
30410: LD_INT 2
30412: DOUBLE
30413: EQUAL
30414: IFTRUE 30418
30416: GO 30432
30418: POP
// begin ToLua ( displayStucuk(); ) ;
30419: LD_STRING displayStucuk();
30421: PPUSH
30422: CALL_OW 559
// ResetFog ;
30426: CALL_OW 335
// end ; 3 :
30430: GO 30648
30432: LD_INT 3
30434: DOUBLE
30435: EQUAL
30436: IFTRUE 30440
30438: GO 30544
30440: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30441: LD_ADDR_VAR 0 2
30445: PUSH
30446: LD_INT 22
30448: PUSH
30449: LD_OWVAR 2
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 25
30460: PUSH
30461: LD_INT 1
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PPUSH
30472: CALL_OW 69
30476: ST_TO_ADDR
// if not tmp then
30477: LD_VAR 0 2
30481: NOT
30482: IFFALSE 30486
// exit ;
30484: GO 30648
// un := tmp [ rand ( 1 , tmp ) ] ;
30486: LD_ADDR_VAR 0 3
30490: PUSH
30491: LD_VAR 0 2
30495: PUSH
30496: LD_INT 1
30498: PPUSH
30499: LD_VAR 0 2
30503: PPUSH
30504: CALL_OW 12
30508: ARRAY
30509: ST_TO_ADDR
// if Crawls ( un ) then
30510: LD_VAR 0 3
30514: PPUSH
30515: CALL_OW 318
30519: IFFALSE 30530
// ComWalk ( un ) ;
30521: LD_VAR 0 3
30525: PPUSH
30526: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30530: LD_VAR 0 3
30534: PPUSH
30535: LD_INT 8
30537: PPUSH
30538: CALL_OW 336
// end ; 4 :
30542: GO 30648
30544: LD_INT 4
30546: DOUBLE
30547: EQUAL
30548: IFTRUE 30552
30550: GO 30626
30552: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30553: LD_ADDR_VAR 0 2
30557: PUSH
30558: LD_INT 22
30560: PUSH
30561: LD_OWVAR 2
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: LD_INT 30
30572: PUSH
30573: LD_INT 29
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: PPUSH
30584: CALL_OW 69
30588: ST_TO_ADDR
// if not tmp then
30589: LD_VAR 0 2
30593: NOT
30594: IFFALSE 30598
// exit ;
30596: GO 30648
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30598: LD_VAR 0 2
30602: PUSH
30603: LD_INT 1
30605: ARRAY
30606: PPUSH
30607: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30611: LD_VAR 0 2
30615: PUSH
30616: LD_INT 1
30618: ARRAY
30619: PPUSH
30620: CALL_OW 65
// end ; 5 .. 7 :
30624: GO 30648
30626: LD_INT 5
30628: DOUBLE
30629: GREATEREQUAL
30630: IFFALSE 30638
30632: LD_INT 7
30634: DOUBLE
30635: LESSEQUAL
30636: IFTRUE 30640
30638: GO 30647
30640: POP
// StreamSibBomb ; end ;
30641: CALL 26885 0 0
30645: GO 30648
30647: POP
// end ;
30648: PPOPN 3
30650: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30651: LD_EXP 65
30655: PUSH
30656: LD_EXP 115
30660: AND
30661: IFFALSE 30817
30663: GO 30665
30665: DISABLE
30666: LD_INT 0
30668: PPUSH
30669: PPUSH
30670: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30671: LD_ADDR_VAR 0 2
30675: PUSH
30676: LD_INT 81
30678: PUSH
30679: LD_OWVAR 2
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: PUSH
30688: LD_INT 2
30690: PUSH
30691: LD_INT 21
30693: PUSH
30694: LD_INT 1
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: LD_INT 21
30703: PUSH
30704: LD_INT 2
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: LIST
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PPUSH
30720: CALL_OW 69
30724: ST_TO_ADDR
// if not tmp then
30725: LD_VAR 0 2
30729: NOT
30730: IFFALSE 30734
// exit ;
30732: GO 30817
// p := 0 ;
30734: LD_ADDR_VAR 0 3
30738: PUSH
30739: LD_INT 0
30741: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30742: LD_INT 35
30744: PPUSH
30745: CALL_OW 67
// p := p + 1 ;
30749: LD_ADDR_VAR 0 3
30753: PUSH
30754: LD_VAR 0 3
30758: PUSH
30759: LD_INT 1
30761: PLUS
30762: ST_TO_ADDR
// for i in tmp do
30763: LD_ADDR_VAR 0 1
30767: PUSH
30768: LD_VAR 0 2
30772: PUSH
30773: FOR_IN
30774: IFFALSE 30805
// if GetLives ( i ) < 1000 then
30776: LD_VAR 0 1
30780: PPUSH
30781: CALL_OW 256
30785: PUSH
30786: LD_INT 1000
30788: LESS
30789: IFFALSE 30803
// SetLives ( i , 1000 ) ;
30791: LD_VAR 0 1
30795: PPUSH
30796: LD_INT 1000
30798: PPUSH
30799: CALL_OW 234
30803: GO 30773
30805: POP
30806: POP
// until p > 20 ;
30807: LD_VAR 0 3
30811: PUSH
30812: LD_INT 20
30814: GREATER
30815: IFFALSE 30742
// end ;
30817: PPOPN 3
30819: END
// every 0 0$1 trigger StreamModeActive and sTime do
30820: LD_EXP 65
30824: PUSH
30825: LD_EXP 116
30829: AND
30830: IFFALSE 30865
30832: GO 30834
30834: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30835: LD_INT 28
30837: PPUSH
30838: LD_OWVAR 2
30842: PPUSH
30843: LD_INT 2
30845: PPUSH
30846: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30850: LD_INT 30
30852: PPUSH
30853: LD_OWVAR 2
30857: PPUSH
30858: LD_INT 2
30860: PPUSH
30861: CALL_OW 322
// end ;
30865: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30866: LD_EXP 65
30870: PUSH
30871: LD_EXP 117
30875: AND
30876: IFFALSE 30997
30878: GO 30880
30880: DISABLE
30881: LD_INT 0
30883: PPUSH
30884: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30885: LD_ADDR_VAR 0 2
30889: PUSH
30890: LD_INT 22
30892: PUSH
30893: LD_OWVAR 2
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: PUSH
30902: LD_INT 21
30904: PUSH
30905: LD_INT 1
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PUSH
30912: LD_INT 3
30914: PUSH
30915: LD_INT 23
30917: PUSH
30918: LD_INT 0
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: LIST
30933: PPUSH
30934: CALL_OW 69
30938: ST_TO_ADDR
// if not tmp then
30939: LD_VAR 0 2
30943: NOT
30944: IFFALSE 30948
// exit ;
30946: GO 30997
// for i in tmp do
30948: LD_ADDR_VAR 0 1
30952: PUSH
30953: LD_VAR 0 2
30957: PUSH
30958: FOR_IN
30959: IFFALSE 30995
// begin if Crawls ( i ) then
30961: LD_VAR 0 1
30965: PPUSH
30966: CALL_OW 318
30970: IFFALSE 30981
// ComWalk ( i ) ;
30972: LD_VAR 0 1
30976: PPUSH
30977: CALL_OW 138
// SetClass ( i , 2 ) ;
30981: LD_VAR 0 1
30985: PPUSH
30986: LD_INT 2
30988: PPUSH
30989: CALL_OW 336
// end ;
30993: GO 30958
30995: POP
30996: POP
// end ;
30997: PPOPN 2
30999: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31000: LD_EXP 65
31004: PUSH
31005: LD_EXP 118
31009: AND
31010: IFFALSE 31298
31012: GO 31014
31014: DISABLE
31015: LD_INT 0
31017: PPUSH
31018: PPUSH
31019: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31020: LD_OWVAR 2
31024: PPUSH
31025: LD_INT 9
31027: PPUSH
31028: LD_INT 1
31030: PPUSH
31031: LD_INT 1
31033: PPUSH
31034: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31038: LD_INT 9
31040: PPUSH
31041: LD_OWVAR 2
31045: PPUSH
31046: CALL_OW 343
// uc_side := 9 ;
31050: LD_ADDR_OWVAR 20
31054: PUSH
31055: LD_INT 9
31057: ST_TO_ADDR
// uc_nation := 2 ;
31058: LD_ADDR_OWVAR 21
31062: PUSH
31063: LD_INT 2
31065: ST_TO_ADDR
// hc_name := Dark Warrior ;
31066: LD_ADDR_OWVAR 26
31070: PUSH
31071: LD_STRING Dark Warrior
31073: ST_TO_ADDR
// hc_gallery :=  ;
31074: LD_ADDR_OWVAR 33
31078: PUSH
31079: LD_STRING 
31081: ST_TO_ADDR
// hc_noskilllimit := true ;
31082: LD_ADDR_OWVAR 76
31086: PUSH
31087: LD_INT 1
31089: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31090: LD_ADDR_OWVAR 31
31094: PUSH
31095: LD_INT 30
31097: PUSH
31098: LD_INT 30
31100: PUSH
31101: LD_INT 30
31103: PUSH
31104: LD_INT 30
31106: PUSH
31107: EMPTY
31108: LIST
31109: LIST
31110: LIST
31111: LIST
31112: ST_TO_ADDR
// un := CreateHuman ;
31113: LD_ADDR_VAR 0 3
31117: PUSH
31118: CALL_OW 44
31122: ST_TO_ADDR
// hc_noskilllimit := false ;
31123: LD_ADDR_OWVAR 76
31127: PUSH
31128: LD_INT 0
31130: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31131: LD_VAR 0 3
31135: PPUSH
31136: LD_INT 1
31138: PPUSH
31139: CALL_OW 51
// ToLua ( playRanger() ) ;
31143: LD_STRING playRanger()
31145: PPUSH
31146: CALL_OW 559
// p := 0 ;
31150: LD_ADDR_VAR 0 2
31154: PUSH
31155: LD_INT 0
31157: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31158: LD_INT 35
31160: PPUSH
31161: CALL_OW 67
// p := p + 1 ;
31165: LD_ADDR_VAR 0 2
31169: PUSH
31170: LD_VAR 0 2
31174: PUSH
31175: LD_INT 1
31177: PLUS
31178: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31179: LD_VAR 0 3
31183: PPUSH
31184: CALL_OW 256
31188: PUSH
31189: LD_INT 1000
31191: LESS
31192: IFFALSE 31206
// SetLives ( un , 1000 ) ;
31194: LD_VAR 0 3
31198: PPUSH
31199: LD_INT 1000
31201: PPUSH
31202: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31206: LD_VAR 0 3
31210: PPUSH
31211: LD_INT 81
31213: PUSH
31214: LD_OWVAR 2
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: LD_INT 91
31225: PUSH
31226: LD_VAR 0 3
31230: PUSH
31231: LD_INT 30
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: LIST
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PPUSH
31243: CALL_OW 69
31247: PPUSH
31248: LD_VAR 0 3
31252: PPUSH
31253: CALL_OW 74
31257: PPUSH
31258: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31262: LD_VAR 0 2
31266: PUSH
31267: LD_INT 80
31269: GREATER
31270: PUSH
31271: LD_VAR 0 3
31275: PPUSH
31276: CALL_OW 301
31280: OR
31281: IFFALSE 31158
// if un then
31283: LD_VAR 0 3
31287: IFFALSE 31298
// RemoveUnit ( un ) ;
31289: LD_VAR 0 3
31293: PPUSH
31294: CALL_OW 64
// end ;
31298: PPOPN 3
31300: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31301: LD_EXP 119
31305: IFFALSE 31421
31307: GO 31309
31309: DISABLE
31310: LD_INT 0
31312: PPUSH
31313: PPUSH
31314: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31315: LD_ADDR_VAR 0 2
31319: PUSH
31320: LD_INT 81
31322: PUSH
31323: LD_OWVAR 2
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: LD_INT 21
31334: PUSH
31335: LD_INT 1
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PPUSH
31346: CALL_OW 69
31350: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31351: LD_STRING playComputer()
31353: PPUSH
31354: CALL_OW 559
// if not tmp then
31358: LD_VAR 0 2
31362: NOT
31363: IFFALSE 31367
// exit ;
31365: GO 31421
// for i in tmp do
31367: LD_ADDR_VAR 0 1
31371: PUSH
31372: LD_VAR 0 2
31376: PUSH
31377: FOR_IN
31378: IFFALSE 31419
// for j := 1 to 4 do
31380: LD_ADDR_VAR 0 3
31384: PUSH
31385: DOUBLE
31386: LD_INT 1
31388: DEC
31389: ST_TO_ADDR
31390: LD_INT 4
31392: PUSH
31393: FOR_TO
31394: IFFALSE 31415
// SetSkill ( i , j , 10 ) ;
31396: LD_VAR 0 1
31400: PPUSH
31401: LD_VAR 0 3
31405: PPUSH
31406: LD_INT 10
31408: PPUSH
31409: CALL_OW 237
31413: GO 31393
31415: POP
31416: POP
31417: GO 31377
31419: POP
31420: POP
// end ;
31421: PPOPN 3
31423: END
// every 0 0$1 trigger s30 do var i , tmp ;
31424: LD_EXP 120
31428: IFFALSE 31497
31430: GO 31432
31432: DISABLE
31433: LD_INT 0
31435: PPUSH
31436: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31437: LD_ADDR_VAR 0 2
31441: PUSH
31442: LD_INT 22
31444: PUSH
31445: LD_OWVAR 2
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PPUSH
31454: CALL_OW 69
31458: ST_TO_ADDR
// if not tmp then
31459: LD_VAR 0 2
31463: NOT
31464: IFFALSE 31468
// exit ;
31466: GO 31497
// for i in tmp do
31468: LD_ADDR_VAR 0 1
31472: PUSH
31473: LD_VAR 0 2
31477: PUSH
31478: FOR_IN
31479: IFFALSE 31495
// SetLives ( i , 300 ) ;
31481: LD_VAR 0 1
31485: PPUSH
31486: LD_INT 300
31488: PPUSH
31489: CALL_OW 234
31493: GO 31478
31495: POP
31496: POP
// end ;
31497: PPOPN 2
31499: END
// every 0 0$1 trigger s60 do var i , tmp ;
31500: LD_EXP 121
31504: IFFALSE 31573
31506: GO 31508
31508: DISABLE
31509: LD_INT 0
31511: PPUSH
31512: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31513: LD_ADDR_VAR 0 2
31517: PUSH
31518: LD_INT 22
31520: PUSH
31521: LD_OWVAR 2
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PPUSH
31530: CALL_OW 69
31534: ST_TO_ADDR
// if not tmp then
31535: LD_VAR 0 2
31539: NOT
31540: IFFALSE 31544
// exit ;
31542: GO 31573
// for i in tmp do
31544: LD_ADDR_VAR 0 1
31548: PUSH
31549: LD_VAR 0 2
31553: PUSH
31554: FOR_IN
31555: IFFALSE 31571
// SetLives ( i , 600 ) ;
31557: LD_VAR 0 1
31561: PPUSH
31562: LD_INT 600
31564: PPUSH
31565: CALL_OW 234
31569: GO 31554
31571: POP
31572: POP
// end ;
31573: PPOPN 2
31575: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31576: LD_INT 0
31578: PPUSH
// case cmd of 301 :
31579: LD_VAR 0 1
31583: PUSH
31584: LD_INT 301
31586: DOUBLE
31587: EQUAL
31588: IFTRUE 31592
31590: GO 31624
31592: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31593: LD_VAR 0 6
31597: PPUSH
31598: LD_VAR 0 7
31602: PPUSH
31603: LD_VAR 0 8
31607: PPUSH
31608: LD_VAR 0 4
31612: PPUSH
31613: LD_VAR 0 5
31617: PPUSH
31618: CALL 32825 0 5
31622: GO 31745
31624: LD_INT 302
31626: DOUBLE
31627: EQUAL
31628: IFTRUE 31632
31630: GO 31669
31632: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31633: LD_VAR 0 6
31637: PPUSH
31638: LD_VAR 0 7
31642: PPUSH
31643: LD_VAR 0 8
31647: PPUSH
31648: LD_VAR 0 9
31652: PPUSH
31653: LD_VAR 0 4
31657: PPUSH
31658: LD_VAR 0 5
31662: PPUSH
31663: CALL 32916 0 6
31667: GO 31745
31669: LD_INT 303
31671: DOUBLE
31672: EQUAL
31673: IFTRUE 31677
31675: GO 31714
31677: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31678: LD_VAR 0 6
31682: PPUSH
31683: LD_VAR 0 7
31687: PPUSH
31688: LD_VAR 0 8
31692: PPUSH
31693: LD_VAR 0 9
31697: PPUSH
31698: LD_VAR 0 4
31702: PPUSH
31703: LD_VAR 0 5
31707: PPUSH
31708: CALL 31750 0 6
31712: GO 31745
31714: LD_INT 304
31716: DOUBLE
31717: EQUAL
31718: IFTRUE 31722
31720: GO 31744
31722: POP
// hHackTeleport ( unit , x , y ) ; end ;
31723: LD_VAR 0 2
31727: PPUSH
31728: LD_VAR 0 4
31732: PPUSH
31733: LD_VAR 0 5
31737: PPUSH
31738: CALL 33509 0 3
31742: GO 31745
31744: POP
// end ;
31745: LD_VAR 0 12
31749: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31750: LD_INT 0
31752: PPUSH
31753: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31754: LD_VAR 0 1
31758: PUSH
31759: LD_INT 1
31761: LESS
31762: PUSH
31763: LD_VAR 0 1
31767: PUSH
31768: LD_INT 3
31770: GREATER
31771: OR
31772: PUSH
31773: LD_VAR 0 5
31777: PPUSH
31778: LD_VAR 0 6
31782: PPUSH
31783: CALL_OW 428
31787: OR
31788: IFFALSE 31792
// exit ;
31790: GO 32512
// uc_side := your_side ;
31792: LD_ADDR_OWVAR 20
31796: PUSH
31797: LD_OWVAR 2
31801: ST_TO_ADDR
// uc_nation := nation ;
31802: LD_ADDR_OWVAR 21
31806: PUSH
31807: LD_VAR 0 1
31811: ST_TO_ADDR
// bc_level = 1 ;
31812: LD_ADDR_OWVAR 43
31816: PUSH
31817: LD_INT 1
31819: ST_TO_ADDR
// case btype of 1 :
31820: LD_VAR 0 2
31824: PUSH
31825: LD_INT 1
31827: DOUBLE
31828: EQUAL
31829: IFTRUE 31833
31831: GO 31844
31833: POP
// bc_type := b_depot ; 2 :
31834: LD_ADDR_OWVAR 42
31838: PUSH
31839: LD_INT 0
31841: ST_TO_ADDR
31842: GO 32456
31844: LD_INT 2
31846: DOUBLE
31847: EQUAL
31848: IFTRUE 31852
31850: GO 31863
31852: POP
// bc_type := b_warehouse ; 3 :
31853: LD_ADDR_OWVAR 42
31857: PUSH
31858: LD_INT 1
31860: ST_TO_ADDR
31861: GO 32456
31863: LD_INT 3
31865: DOUBLE
31866: EQUAL
31867: IFTRUE 31871
31869: GO 31882
31871: POP
// bc_type := b_lab ; 4 .. 9 :
31872: LD_ADDR_OWVAR 42
31876: PUSH
31877: LD_INT 6
31879: ST_TO_ADDR
31880: GO 32456
31882: LD_INT 4
31884: DOUBLE
31885: GREATEREQUAL
31886: IFFALSE 31894
31888: LD_INT 9
31890: DOUBLE
31891: LESSEQUAL
31892: IFTRUE 31896
31894: GO 31948
31896: POP
// begin bc_type := b_lab_half ;
31897: LD_ADDR_OWVAR 42
31901: PUSH
31902: LD_INT 7
31904: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31905: LD_ADDR_OWVAR 44
31909: PUSH
31910: LD_INT 10
31912: PUSH
31913: LD_INT 11
31915: PUSH
31916: LD_INT 12
31918: PUSH
31919: LD_INT 15
31921: PUSH
31922: LD_INT 14
31924: PUSH
31925: LD_INT 13
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: PUSH
31936: LD_VAR 0 2
31940: PUSH
31941: LD_INT 3
31943: MINUS
31944: ARRAY
31945: ST_TO_ADDR
// end ; 10 .. 13 :
31946: GO 32456
31948: LD_INT 10
31950: DOUBLE
31951: GREATEREQUAL
31952: IFFALSE 31960
31954: LD_INT 13
31956: DOUBLE
31957: LESSEQUAL
31958: IFTRUE 31962
31960: GO 32039
31962: POP
// begin bc_type := b_lab_full ;
31963: LD_ADDR_OWVAR 42
31967: PUSH
31968: LD_INT 8
31970: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31971: LD_ADDR_OWVAR 44
31975: PUSH
31976: LD_INT 10
31978: PUSH
31979: LD_INT 12
31981: PUSH
31982: LD_INT 14
31984: PUSH
31985: LD_INT 13
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: PUSH
31994: LD_VAR 0 2
31998: PUSH
31999: LD_INT 9
32001: MINUS
32002: ARRAY
32003: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32004: LD_ADDR_OWVAR 45
32008: PUSH
32009: LD_INT 11
32011: PUSH
32012: LD_INT 15
32014: PUSH
32015: LD_INT 12
32017: PUSH
32018: LD_INT 15
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: PUSH
32027: LD_VAR 0 2
32031: PUSH
32032: LD_INT 9
32034: MINUS
32035: ARRAY
32036: ST_TO_ADDR
// end ; 14 :
32037: GO 32456
32039: LD_INT 14
32041: DOUBLE
32042: EQUAL
32043: IFTRUE 32047
32045: GO 32058
32047: POP
// bc_type := b_workshop ; 15 :
32048: LD_ADDR_OWVAR 42
32052: PUSH
32053: LD_INT 2
32055: ST_TO_ADDR
32056: GO 32456
32058: LD_INT 15
32060: DOUBLE
32061: EQUAL
32062: IFTRUE 32066
32064: GO 32077
32066: POP
// bc_type := b_factory ; 16 :
32067: LD_ADDR_OWVAR 42
32071: PUSH
32072: LD_INT 3
32074: ST_TO_ADDR
32075: GO 32456
32077: LD_INT 16
32079: DOUBLE
32080: EQUAL
32081: IFTRUE 32085
32083: GO 32096
32085: POP
// bc_type := b_ext_gun ; 17 :
32086: LD_ADDR_OWVAR 42
32090: PUSH
32091: LD_INT 17
32093: ST_TO_ADDR
32094: GO 32456
32096: LD_INT 17
32098: DOUBLE
32099: EQUAL
32100: IFTRUE 32104
32102: GO 32132
32104: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32105: LD_ADDR_OWVAR 42
32109: PUSH
32110: LD_INT 19
32112: PUSH
32113: LD_INT 23
32115: PUSH
32116: LD_INT 19
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: LIST
32123: PUSH
32124: LD_VAR 0 1
32128: ARRAY
32129: ST_TO_ADDR
32130: GO 32456
32132: LD_INT 18
32134: DOUBLE
32135: EQUAL
32136: IFTRUE 32140
32138: GO 32151
32140: POP
// bc_type := b_ext_radar ; 19 :
32141: LD_ADDR_OWVAR 42
32145: PUSH
32146: LD_INT 20
32148: ST_TO_ADDR
32149: GO 32456
32151: LD_INT 19
32153: DOUBLE
32154: EQUAL
32155: IFTRUE 32159
32157: GO 32170
32159: POP
// bc_type := b_ext_radio ; 20 :
32160: LD_ADDR_OWVAR 42
32164: PUSH
32165: LD_INT 22
32167: ST_TO_ADDR
32168: GO 32456
32170: LD_INT 20
32172: DOUBLE
32173: EQUAL
32174: IFTRUE 32178
32176: GO 32189
32178: POP
// bc_type := b_ext_siberium ; 21 :
32179: LD_ADDR_OWVAR 42
32183: PUSH
32184: LD_INT 21
32186: ST_TO_ADDR
32187: GO 32456
32189: LD_INT 21
32191: DOUBLE
32192: EQUAL
32193: IFTRUE 32197
32195: GO 32208
32197: POP
// bc_type := b_ext_computer ; 22 :
32198: LD_ADDR_OWVAR 42
32202: PUSH
32203: LD_INT 24
32205: ST_TO_ADDR
32206: GO 32456
32208: LD_INT 22
32210: DOUBLE
32211: EQUAL
32212: IFTRUE 32216
32214: GO 32227
32216: POP
// bc_type := b_ext_track ; 23 :
32217: LD_ADDR_OWVAR 42
32221: PUSH
32222: LD_INT 16
32224: ST_TO_ADDR
32225: GO 32456
32227: LD_INT 23
32229: DOUBLE
32230: EQUAL
32231: IFTRUE 32235
32233: GO 32246
32235: POP
// bc_type := b_ext_laser ; 24 :
32236: LD_ADDR_OWVAR 42
32240: PUSH
32241: LD_INT 25
32243: ST_TO_ADDR
32244: GO 32456
32246: LD_INT 24
32248: DOUBLE
32249: EQUAL
32250: IFTRUE 32254
32252: GO 32265
32254: POP
// bc_type := b_control_tower ; 25 :
32255: LD_ADDR_OWVAR 42
32259: PUSH
32260: LD_INT 36
32262: ST_TO_ADDR
32263: GO 32456
32265: LD_INT 25
32267: DOUBLE
32268: EQUAL
32269: IFTRUE 32273
32271: GO 32284
32273: POP
// bc_type := b_breastwork ; 26 :
32274: LD_ADDR_OWVAR 42
32278: PUSH
32279: LD_INT 31
32281: ST_TO_ADDR
32282: GO 32456
32284: LD_INT 26
32286: DOUBLE
32287: EQUAL
32288: IFTRUE 32292
32290: GO 32303
32292: POP
// bc_type := b_bunker ; 27 :
32293: LD_ADDR_OWVAR 42
32297: PUSH
32298: LD_INT 32
32300: ST_TO_ADDR
32301: GO 32456
32303: LD_INT 27
32305: DOUBLE
32306: EQUAL
32307: IFTRUE 32311
32309: GO 32322
32311: POP
// bc_type := b_turret ; 28 :
32312: LD_ADDR_OWVAR 42
32316: PUSH
32317: LD_INT 33
32319: ST_TO_ADDR
32320: GO 32456
32322: LD_INT 28
32324: DOUBLE
32325: EQUAL
32326: IFTRUE 32330
32328: GO 32341
32330: POP
// bc_type := b_armoury ; 29 :
32331: LD_ADDR_OWVAR 42
32335: PUSH
32336: LD_INT 4
32338: ST_TO_ADDR
32339: GO 32456
32341: LD_INT 29
32343: DOUBLE
32344: EQUAL
32345: IFTRUE 32349
32347: GO 32360
32349: POP
// bc_type := b_barracks ; 30 :
32350: LD_ADDR_OWVAR 42
32354: PUSH
32355: LD_INT 5
32357: ST_TO_ADDR
32358: GO 32456
32360: LD_INT 30
32362: DOUBLE
32363: EQUAL
32364: IFTRUE 32368
32366: GO 32379
32368: POP
// bc_type := b_solar_power ; 31 :
32369: LD_ADDR_OWVAR 42
32373: PUSH
32374: LD_INT 27
32376: ST_TO_ADDR
32377: GO 32456
32379: LD_INT 31
32381: DOUBLE
32382: EQUAL
32383: IFTRUE 32387
32385: GO 32398
32387: POP
// bc_type := b_oil_power ; 32 :
32388: LD_ADDR_OWVAR 42
32392: PUSH
32393: LD_INT 26
32395: ST_TO_ADDR
32396: GO 32456
32398: LD_INT 32
32400: DOUBLE
32401: EQUAL
32402: IFTRUE 32406
32404: GO 32417
32406: POP
// bc_type := b_siberite_power ; 33 :
32407: LD_ADDR_OWVAR 42
32411: PUSH
32412: LD_INT 28
32414: ST_TO_ADDR
32415: GO 32456
32417: LD_INT 33
32419: DOUBLE
32420: EQUAL
32421: IFTRUE 32425
32423: GO 32436
32425: POP
// bc_type := b_oil_mine ; 34 :
32426: LD_ADDR_OWVAR 42
32430: PUSH
32431: LD_INT 29
32433: ST_TO_ADDR
32434: GO 32456
32436: LD_INT 34
32438: DOUBLE
32439: EQUAL
32440: IFTRUE 32444
32442: GO 32455
32444: POP
// bc_type := b_siberite_mine ; end ;
32445: LD_ADDR_OWVAR 42
32449: PUSH
32450: LD_INT 30
32452: ST_TO_ADDR
32453: GO 32456
32455: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32456: LD_ADDR_VAR 0 8
32460: PUSH
32461: LD_VAR 0 5
32465: PPUSH
32466: LD_VAR 0 6
32470: PPUSH
32471: LD_VAR 0 3
32475: PPUSH
32476: CALL_OW 47
32480: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32481: LD_OWVAR 42
32485: PUSH
32486: LD_INT 32
32488: PUSH
32489: LD_INT 33
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: IN
32496: IFFALSE 32512
// PlaceWeaponTurret ( b , weapon ) ;
32498: LD_VAR 0 8
32502: PPUSH
32503: LD_VAR 0 4
32507: PPUSH
32508: CALL_OW 431
// end ;
32512: LD_VAR 0 7
32516: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32517: LD_INT 0
32519: PPUSH
32520: PPUSH
32521: PPUSH
32522: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32523: LD_ADDR_VAR 0 4
32527: PUSH
32528: LD_INT 22
32530: PUSH
32531: LD_OWVAR 2
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: LD_INT 2
32542: PUSH
32543: LD_INT 30
32545: PUSH
32546: LD_INT 0
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 30
32555: PUSH
32556: LD_INT 1
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: LIST
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: PPUSH
32572: CALL_OW 69
32576: ST_TO_ADDR
// if not tmp then
32577: LD_VAR 0 4
32581: NOT
32582: IFFALSE 32586
// exit ;
32584: GO 32645
// for i in tmp do
32586: LD_ADDR_VAR 0 2
32590: PUSH
32591: LD_VAR 0 4
32595: PUSH
32596: FOR_IN
32597: IFFALSE 32643
// for j = 1 to 3 do
32599: LD_ADDR_VAR 0 3
32603: PUSH
32604: DOUBLE
32605: LD_INT 1
32607: DEC
32608: ST_TO_ADDR
32609: LD_INT 3
32611: PUSH
32612: FOR_TO
32613: IFFALSE 32639
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32615: LD_VAR 0 2
32619: PPUSH
32620: CALL_OW 274
32624: PPUSH
32625: LD_VAR 0 3
32629: PPUSH
32630: LD_INT 99999
32632: PPUSH
32633: CALL_OW 277
32637: GO 32612
32639: POP
32640: POP
32641: GO 32596
32643: POP
32644: POP
// end ;
32645: LD_VAR 0 1
32649: RET
// export function hHackSetLevel10 ; var i , j ; begin
32650: LD_INT 0
32652: PPUSH
32653: PPUSH
32654: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32655: LD_ADDR_VAR 0 2
32659: PUSH
32660: LD_INT 21
32662: PUSH
32663: LD_INT 1
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PPUSH
32670: CALL_OW 69
32674: PUSH
32675: FOR_IN
32676: IFFALSE 32728
// if IsSelected ( i ) then
32678: LD_VAR 0 2
32682: PPUSH
32683: CALL_OW 306
32687: IFFALSE 32726
// begin for j := 1 to 4 do
32689: LD_ADDR_VAR 0 3
32693: PUSH
32694: DOUBLE
32695: LD_INT 1
32697: DEC
32698: ST_TO_ADDR
32699: LD_INT 4
32701: PUSH
32702: FOR_TO
32703: IFFALSE 32724
// SetSkill ( i , j , 10 ) ;
32705: LD_VAR 0 2
32709: PPUSH
32710: LD_VAR 0 3
32714: PPUSH
32715: LD_INT 10
32717: PPUSH
32718: CALL_OW 237
32722: GO 32702
32724: POP
32725: POP
// end ;
32726: GO 32675
32728: POP
32729: POP
// end ;
32730: LD_VAR 0 1
32734: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32735: LD_INT 0
32737: PPUSH
32738: PPUSH
32739: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32740: LD_ADDR_VAR 0 2
32744: PUSH
32745: LD_INT 22
32747: PUSH
32748: LD_OWVAR 2
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: LD_INT 21
32759: PUSH
32760: LD_INT 1
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PPUSH
32771: CALL_OW 69
32775: PUSH
32776: FOR_IN
32777: IFFALSE 32818
// begin for j := 1 to 4 do
32779: LD_ADDR_VAR 0 3
32783: PUSH
32784: DOUBLE
32785: LD_INT 1
32787: DEC
32788: ST_TO_ADDR
32789: LD_INT 4
32791: PUSH
32792: FOR_TO
32793: IFFALSE 32814
// SetSkill ( i , j , 10 ) ;
32795: LD_VAR 0 2
32799: PPUSH
32800: LD_VAR 0 3
32804: PPUSH
32805: LD_INT 10
32807: PPUSH
32808: CALL_OW 237
32812: GO 32792
32814: POP
32815: POP
// end ;
32816: GO 32776
32818: POP
32819: POP
// end ;
32820: LD_VAR 0 1
32824: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32825: LD_INT 0
32827: PPUSH
// uc_side := your_side ;
32828: LD_ADDR_OWVAR 20
32832: PUSH
32833: LD_OWVAR 2
32837: ST_TO_ADDR
// uc_nation := nation ;
32838: LD_ADDR_OWVAR 21
32842: PUSH
32843: LD_VAR 0 1
32847: ST_TO_ADDR
// InitHc ;
32848: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32852: LD_INT 0
32854: PPUSH
32855: LD_VAR 0 2
32859: PPUSH
32860: LD_VAR 0 3
32864: PPUSH
32865: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32869: LD_VAR 0 4
32873: PPUSH
32874: LD_VAR 0 5
32878: PPUSH
32879: CALL_OW 428
32883: PUSH
32884: LD_INT 0
32886: EQUAL
32887: IFFALSE 32911
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32889: CALL_OW 44
32893: PPUSH
32894: LD_VAR 0 4
32898: PPUSH
32899: LD_VAR 0 5
32903: PPUSH
32904: LD_INT 1
32906: PPUSH
32907: CALL_OW 48
// end ;
32911: LD_VAR 0 6
32915: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32916: LD_INT 0
32918: PPUSH
32919: PPUSH
// uc_side := your_side ;
32920: LD_ADDR_OWVAR 20
32924: PUSH
32925: LD_OWVAR 2
32929: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32930: LD_VAR 0 1
32934: PUSH
32935: LD_INT 1
32937: PUSH
32938: LD_INT 2
32940: PUSH
32941: LD_INT 3
32943: PUSH
32944: LD_INT 4
32946: PUSH
32947: LD_INT 5
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: IN
32957: IFFALSE 32969
// uc_nation := nation_american else
32959: LD_ADDR_OWVAR 21
32963: PUSH
32964: LD_INT 1
32966: ST_TO_ADDR
32967: GO 33012
// if chassis in [ 11 , 12 , 13 , 14 ] then
32969: LD_VAR 0 1
32973: PUSH
32974: LD_INT 11
32976: PUSH
32977: LD_INT 12
32979: PUSH
32980: LD_INT 13
32982: PUSH
32983: LD_INT 14
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: IN
32992: IFFALSE 33004
// uc_nation := nation_arabian else
32994: LD_ADDR_OWVAR 21
32998: PUSH
32999: LD_INT 2
33001: ST_TO_ADDR
33002: GO 33012
// uc_nation := nation_russian ;
33004: LD_ADDR_OWVAR 21
33008: PUSH
33009: LD_INT 3
33011: ST_TO_ADDR
// vc_chassis := chassis ;
33012: LD_ADDR_OWVAR 37
33016: PUSH
33017: LD_VAR 0 1
33021: ST_TO_ADDR
// vc_engine := engine ;
33022: LD_ADDR_OWVAR 39
33026: PUSH
33027: LD_VAR 0 2
33031: ST_TO_ADDR
// vc_control := control ;
33032: LD_ADDR_OWVAR 38
33036: PUSH
33037: LD_VAR 0 3
33041: ST_TO_ADDR
// vc_weapon := weapon ;
33042: LD_ADDR_OWVAR 40
33046: PUSH
33047: LD_VAR 0 4
33051: ST_TO_ADDR
// un := CreateVehicle ;
33052: LD_ADDR_VAR 0 8
33056: PUSH
33057: CALL_OW 45
33061: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33062: LD_VAR 0 8
33066: PPUSH
33067: LD_INT 0
33069: PPUSH
33070: LD_INT 5
33072: PPUSH
33073: CALL_OW 12
33077: PPUSH
33078: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33082: LD_VAR 0 8
33086: PPUSH
33087: LD_VAR 0 5
33091: PPUSH
33092: LD_VAR 0 6
33096: PPUSH
33097: LD_INT 1
33099: PPUSH
33100: CALL_OW 48
// end ;
33104: LD_VAR 0 7
33108: RET
// export hInvincible ; every 1 do
33109: GO 33111
33111: DISABLE
// hInvincible := [ ] ;
33112: LD_ADDR_EXP 122
33116: PUSH
33117: EMPTY
33118: ST_TO_ADDR
33119: END
// every 10 do var i ;
33120: GO 33122
33122: DISABLE
33123: LD_INT 0
33125: PPUSH
// begin enable ;
33126: ENABLE
// if not hInvincible then
33127: LD_EXP 122
33131: NOT
33132: IFFALSE 33136
// exit ;
33134: GO 33180
// for i in hInvincible do
33136: LD_ADDR_VAR 0 1
33140: PUSH
33141: LD_EXP 122
33145: PUSH
33146: FOR_IN
33147: IFFALSE 33178
// if GetLives ( i ) < 1000 then
33149: LD_VAR 0 1
33153: PPUSH
33154: CALL_OW 256
33158: PUSH
33159: LD_INT 1000
33161: LESS
33162: IFFALSE 33176
// SetLives ( i , 1000 ) ;
33164: LD_VAR 0 1
33168: PPUSH
33169: LD_INT 1000
33171: PPUSH
33172: CALL_OW 234
33176: GO 33146
33178: POP
33179: POP
// end ;
33180: PPOPN 1
33182: END
// export function hHackInvincible ; var i ; begin
33183: LD_INT 0
33185: PPUSH
33186: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33187: LD_ADDR_VAR 0 2
33191: PUSH
33192: LD_INT 2
33194: PUSH
33195: LD_INT 21
33197: PUSH
33198: LD_INT 1
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 21
33207: PUSH
33208: LD_INT 2
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: LIST
33219: PPUSH
33220: CALL_OW 69
33224: PUSH
33225: FOR_IN
33226: IFFALSE 33287
// if IsSelected ( i ) then
33228: LD_VAR 0 2
33232: PPUSH
33233: CALL_OW 306
33237: IFFALSE 33285
// begin if i in hInvincible then
33239: LD_VAR 0 2
33243: PUSH
33244: LD_EXP 122
33248: IN
33249: IFFALSE 33269
// hInvincible := hInvincible diff i else
33251: LD_ADDR_EXP 122
33255: PUSH
33256: LD_EXP 122
33260: PUSH
33261: LD_VAR 0 2
33265: DIFF
33266: ST_TO_ADDR
33267: GO 33285
// hInvincible := hInvincible union i ;
33269: LD_ADDR_EXP 122
33273: PUSH
33274: LD_EXP 122
33278: PUSH
33279: LD_VAR 0 2
33283: UNION
33284: ST_TO_ADDR
// end ;
33285: GO 33225
33287: POP
33288: POP
// end ;
33289: LD_VAR 0 1
33293: RET
// export function hHackInvisible ; var i , j ; begin
33294: LD_INT 0
33296: PPUSH
33297: PPUSH
33298: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33299: LD_ADDR_VAR 0 2
33303: PUSH
33304: LD_INT 21
33306: PUSH
33307: LD_INT 1
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: PPUSH
33314: CALL_OW 69
33318: PUSH
33319: FOR_IN
33320: IFFALSE 33344
// if IsSelected ( i ) then
33322: LD_VAR 0 2
33326: PPUSH
33327: CALL_OW 306
33331: IFFALSE 33342
// ComForceInvisible ( i ) ;
33333: LD_VAR 0 2
33337: PPUSH
33338: CALL_OW 496
33342: GO 33319
33344: POP
33345: POP
// end ;
33346: LD_VAR 0 1
33350: RET
// export function hHackChangeYourSide ; begin
33351: LD_INT 0
33353: PPUSH
// if your_side = 8 then
33354: LD_OWVAR 2
33358: PUSH
33359: LD_INT 8
33361: EQUAL
33362: IFFALSE 33374
// your_side := 0 else
33364: LD_ADDR_OWVAR 2
33368: PUSH
33369: LD_INT 0
33371: ST_TO_ADDR
33372: GO 33388
// your_side := your_side + 1 ;
33374: LD_ADDR_OWVAR 2
33378: PUSH
33379: LD_OWVAR 2
33383: PUSH
33384: LD_INT 1
33386: PLUS
33387: ST_TO_ADDR
// end ;
33388: LD_VAR 0 1
33392: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33393: LD_INT 0
33395: PPUSH
33396: PPUSH
33397: PPUSH
// for i in all_units do
33398: LD_ADDR_VAR 0 2
33402: PUSH
33403: LD_OWVAR 3
33407: PUSH
33408: FOR_IN
33409: IFFALSE 33487
// if IsSelected ( i ) then
33411: LD_VAR 0 2
33415: PPUSH
33416: CALL_OW 306
33420: IFFALSE 33485
// begin j := GetSide ( i ) ;
33422: LD_ADDR_VAR 0 3
33426: PUSH
33427: LD_VAR 0 2
33431: PPUSH
33432: CALL_OW 255
33436: ST_TO_ADDR
// if j = 8 then
33437: LD_VAR 0 3
33441: PUSH
33442: LD_INT 8
33444: EQUAL
33445: IFFALSE 33457
// j := 0 else
33447: LD_ADDR_VAR 0 3
33451: PUSH
33452: LD_INT 0
33454: ST_TO_ADDR
33455: GO 33471
// j := j + 1 ;
33457: LD_ADDR_VAR 0 3
33461: PUSH
33462: LD_VAR 0 3
33466: PUSH
33467: LD_INT 1
33469: PLUS
33470: ST_TO_ADDR
// SetSide ( i , j ) ;
33471: LD_VAR 0 2
33475: PPUSH
33476: LD_VAR 0 3
33480: PPUSH
33481: CALL_OW 235
// end ;
33485: GO 33408
33487: POP
33488: POP
// end ;
33489: LD_VAR 0 1
33493: RET
// export function hHackFog ; begin
33494: LD_INT 0
33496: PPUSH
// FogOff ( true ) ;
33497: LD_INT 1
33499: PPUSH
33500: CALL_OW 344
// end ;
33504: LD_VAR 0 1
33508: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33509: LD_INT 0
33511: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33512: LD_VAR 0 1
33516: PPUSH
33517: LD_VAR 0 2
33521: PPUSH
33522: LD_VAR 0 3
33526: PPUSH
33527: LD_INT 1
33529: PPUSH
33530: LD_INT 1
33532: PPUSH
33533: CALL_OW 483
// CenterOnXY ( x , y ) ;
33537: LD_VAR 0 2
33541: PPUSH
33542: LD_VAR 0 3
33546: PPUSH
33547: CALL_OW 84
// end ; end_of_file
33551: LD_VAR 0 4
33555: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
33556: LD_INT 0
33558: PPUSH
33559: PPUSH
33560: PPUSH
33561: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33562: LD_VAR 0 1
33566: PPUSH
33567: CALL_OW 264
33571: PUSH
33572: LD_EXP 49
33576: EQUAL
33577: IFFALSE 33649
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33579: LD_INT 68
33581: PPUSH
33582: LD_VAR 0 1
33586: PPUSH
33587: CALL_OW 255
33591: PPUSH
33592: CALL_OW 321
33596: PUSH
33597: LD_INT 2
33599: EQUAL
33600: IFFALSE 33612
// eff := 70 else
33602: LD_ADDR_VAR 0 4
33606: PUSH
33607: LD_INT 70
33609: ST_TO_ADDR
33610: GO 33620
// eff := 30 ;
33612: LD_ADDR_VAR 0 4
33616: PUSH
33617: LD_INT 30
33619: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33620: LD_VAR 0 1
33624: PPUSH
33625: CALL_OW 250
33629: PPUSH
33630: LD_VAR 0 1
33634: PPUSH
33635: CALL_OW 251
33639: PPUSH
33640: LD_VAR 0 4
33644: PPUSH
33645: CALL_OW 495
// end ; end ;
33649: LD_VAR 0 2
33653: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
33654: LD_INT 0
33656: PPUSH
// end ;
33657: LD_VAR 0 4
33661: RET
// export function SOS_Command ( cmd ) ; begin
33662: LD_INT 0
33664: PPUSH
// end ;
33665: LD_VAR 0 2
33669: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
33670: LD_INT 0
33672: PPUSH
// end ;
33673: LD_VAR 0 6
33677: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
33678: LD_INT 0
33680: PPUSH
33681: PPUSH
// if not vehicle or not factory then
33682: LD_VAR 0 1
33686: NOT
33687: PUSH
33688: LD_VAR 0 2
33692: NOT
33693: OR
33694: IFFALSE 33698
// exit ;
33696: GO 33929
// if factoryWaypoints >= factory then
33698: LD_EXP 123
33702: PUSH
33703: LD_VAR 0 2
33707: GREATEREQUAL
33708: IFFALSE 33929
// if factoryWaypoints [ factory ] then
33710: LD_EXP 123
33714: PUSH
33715: LD_VAR 0 2
33719: ARRAY
33720: IFFALSE 33929
// begin if GetControl ( vehicle ) = control_manual then
33722: LD_VAR 0 1
33726: PPUSH
33727: CALL_OW 263
33731: PUSH
33732: LD_INT 1
33734: EQUAL
33735: IFFALSE 33816
// begin driver := IsDrivenBy ( vehicle ) ;
33737: LD_ADDR_VAR 0 4
33741: PUSH
33742: LD_VAR 0 1
33746: PPUSH
33747: CALL_OW 311
33751: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33752: LD_VAR 0 4
33756: PPUSH
33757: LD_EXP 123
33761: PUSH
33762: LD_VAR 0 2
33766: ARRAY
33767: PUSH
33768: LD_INT 3
33770: ARRAY
33771: PPUSH
33772: LD_EXP 123
33776: PUSH
33777: LD_VAR 0 2
33781: ARRAY
33782: PUSH
33783: LD_INT 4
33785: ARRAY
33786: PPUSH
33787: CALL_OW 171
// AddComExitVehicle ( driver ) ;
33791: LD_VAR 0 4
33795: PPUSH
33796: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
33800: LD_VAR 0 4
33804: PPUSH
33805: LD_VAR 0 2
33809: PPUSH
33810: CALL_OW 180
// end else
33814: GO 33929
// if GetControl ( vehicle ) = control_remote then
33816: LD_VAR 0 1
33820: PPUSH
33821: CALL_OW 263
33825: PUSH
33826: LD_INT 2
33828: EQUAL
33829: IFFALSE 33890
// begin wait ( 0 0$2 ) ;
33831: LD_INT 70
33833: PPUSH
33834: CALL_OW 67
// if Connect ( vehicle ) then
33838: LD_VAR 0 1
33842: PPUSH
33843: CALL 46153 0 1
33847: IFFALSE 33888
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33849: LD_VAR 0 1
33853: PPUSH
33854: LD_EXP 123
33858: PUSH
33859: LD_VAR 0 2
33863: ARRAY
33864: PUSH
33865: LD_INT 3
33867: ARRAY
33868: PPUSH
33869: LD_EXP 123
33873: PUSH
33874: LD_VAR 0 2
33878: ARRAY
33879: PUSH
33880: LD_INT 4
33882: ARRAY
33883: PPUSH
33884: CALL_OW 171
// end else
33888: GO 33929
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33890: LD_VAR 0 1
33894: PPUSH
33895: LD_EXP 123
33899: PUSH
33900: LD_VAR 0 2
33904: ARRAY
33905: PUSH
33906: LD_INT 3
33908: ARRAY
33909: PPUSH
33910: LD_EXP 123
33914: PUSH
33915: LD_VAR 0 2
33919: ARRAY
33920: PUSH
33921: LD_INT 4
33923: ARRAY
33924: PPUSH
33925: CALL_OW 171
// end ; end ;
33929: LD_VAR 0 3
33933: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
33934: LD_INT 0
33936: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
33937: LD_VAR 0 1
33941: PUSH
33942: LD_INT 250
33944: EQUAL
33945: PUSH
33946: LD_VAR 0 2
33950: PPUSH
33951: CALL_OW 264
33955: PUSH
33956: LD_EXP 52
33960: EQUAL
33961: AND
33962: IFFALSE 33983
// MinerPlaceMine ( unit , x , y ) ;
33964: LD_VAR 0 2
33968: PPUSH
33969: LD_VAR 0 4
33973: PPUSH
33974: LD_VAR 0 5
33978: PPUSH
33979: CALL 36711 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
33983: LD_VAR 0 1
33987: PUSH
33988: LD_INT 251
33990: EQUAL
33991: PUSH
33992: LD_VAR 0 2
33996: PPUSH
33997: CALL_OW 264
34001: PUSH
34002: LD_EXP 52
34006: EQUAL
34007: AND
34008: IFFALSE 34029
// MinerDetonateMine ( unit , x , y ) ;
34010: LD_VAR 0 2
34014: PPUSH
34015: LD_VAR 0 4
34019: PPUSH
34020: LD_VAR 0 5
34024: PPUSH
34025: CALL 36988 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34029: LD_VAR 0 1
34033: PUSH
34034: LD_INT 252
34036: EQUAL
34037: PUSH
34038: LD_VAR 0 2
34042: PPUSH
34043: CALL_OW 264
34047: PUSH
34048: LD_EXP 52
34052: EQUAL
34053: AND
34054: IFFALSE 34075
// MinerCreateMinefield ( unit , x , y ) ;
34056: LD_VAR 0 2
34060: PPUSH
34061: LD_VAR 0 4
34065: PPUSH
34066: LD_VAR 0 5
34070: PPUSH
34071: CALL 37405 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
34075: LD_VAR 0 1
34079: PUSH
34080: LD_INT 253
34082: EQUAL
34083: PUSH
34084: LD_VAR 0 2
34088: PPUSH
34089: CALL_OW 257
34093: PUSH
34094: LD_INT 5
34096: EQUAL
34097: AND
34098: IFFALSE 34119
// ComBinocular ( unit , x , y ) ;
34100: LD_VAR 0 2
34104: PPUSH
34105: LD_VAR 0 4
34109: PPUSH
34110: LD_VAR 0 5
34114: PPUSH
34115: CALL 37776 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34119: LD_VAR 0 1
34123: PUSH
34124: LD_INT 254
34126: EQUAL
34127: PUSH
34128: LD_VAR 0 2
34132: PPUSH
34133: CALL_OW 264
34137: PUSH
34138: LD_EXP 47
34142: EQUAL
34143: AND
34144: PUSH
34145: LD_VAR 0 3
34149: PPUSH
34150: CALL_OW 263
34154: PUSH
34155: LD_INT 3
34157: EQUAL
34158: AND
34159: IFFALSE 34175
// HackDestroyVehicle ( unit , selectedUnit ) ;
34161: LD_VAR 0 2
34165: PPUSH
34166: LD_VAR 0 3
34170: PPUSH
34171: CALL 36071 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34175: LD_VAR 0 1
34179: PUSH
34180: LD_INT 255
34182: EQUAL
34183: PUSH
34184: LD_VAR 0 2
34188: PPUSH
34189: CALL_OW 264
34193: PUSH
34194: LD_INT 14
34196: PUSH
34197: LD_INT 53
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: IN
34204: AND
34205: PUSH
34206: LD_VAR 0 4
34210: PPUSH
34211: LD_VAR 0 5
34215: PPUSH
34216: CALL_OW 488
34220: AND
34221: IFFALSE 34245
// CutTreeXYR ( unit , x , y , 12 ) ;
34223: LD_VAR 0 2
34227: PPUSH
34228: LD_VAR 0 4
34232: PPUSH
34233: LD_VAR 0 5
34237: PPUSH
34238: LD_INT 12
34240: PPUSH
34241: CALL 34637 0 4
// if cmd = 256 then
34245: LD_VAR 0 1
34249: PUSH
34250: LD_INT 256
34252: EQUAL
34253: IFFALSE 34274
// SetFactoryWaypoint ( unit , x , y ) ;
34255: LD_VAR 0 2
34259: PPUSH
34260: LD_VAR 0 4
34264: PPUSH
34265: LD_VAR 0 5
34269: PPUSH
34270: CALL 34279 0 3
// end ;
34274: LD_VAR 0 6
34278: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34279: LD_INT 0
34281: PPUSH
34282: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34283: LD_VAR 0 1
34287: NOT
34288: PUSH
34289: LD_VAR 0 2
34293: PPUSH
34294: LD_VAR 0 3
34298: PPUSH
34299: CALL_OW 488
34303: NOT
34304: OR
34305: PUSH
34306: LD_VAR 0 1
34310: PPUSH
34311: CALL_OW 266
34315: PUSH
34316: LD_INT 3
34318: NONEQUAL
34319: PUSH
34320: LD_VAR 0 1
34324: PPUSH
34325: CALL_OW 247
34329: PUSH
34330: LD_INT 1
34332: EQUAL
34333: NOT
34334: AND
34335: OR
34336: IFFALSE 34340
// exit ;
34338: GO 34489
// if GetType ( factory ) = unit_human then
34340: LD_VAR 0 1
34344: PPUSH
34345: CALL_OW 247
34349: PUSH
34350: LD_INT 1
34352: EQUAL
34353: IFFALSE 34370
// factory := IsInUnit ( factory ) ;
34355: LD_ADDR_VAR 0 1
34359: PUSH
34360: LD_VAR 0 1
34364: PPUSH
34365: CALL_OW 310
34369: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34370: LD_VAR 0 1
34374: PPUSH
34375: CALL_OW 266
34379: PUSH
34380: LD_INT 3
34382: NONEQUAL
34383: IFFALSE 34387
// exit ;
34385: GO 34489
// if HexInfo ( x , y ) = factory then
34387: LD_VAR 0 2
34391: PPUSH
34392: LD_VAR 0 3
34396: PPUSH
34397: CALL_OW 428
34401: PUSH
34402: LD_VAR 0 1
34406: EQUAL
34407: IFFALSE 34434
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34409: LD_ADDR_EXP 123
34413: PUSH
34414: LD_EXP 123
34418: PPUSH
34419: LD_VAR 0 1
34423: PPUSH
34424: LD_INT 0
34426: PPUSH
34427: CALL_OW 1
34431: ST_TO_ADDR
34432: GO 34485
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34434: LD_ADDR_EXP 123
34438: PUSH
34439: LD_EXP 123
34443: PPUSH
34444: LD_VAR 0 1
34448: PPUSH
34449: LD_VAR 0 1
34453: PPUSH
34454: CALL_OW 255
34458: PUSH
34459: LD_VAR 0 1
34463: PUSH
34464: LD_VAR 0 2
34468: PUSH
34469: LD_VAR 0 3
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: PPUSH
34480: CALL_OW 1
34484: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34485: CALL 34494 0 0
// end ;
34489: LD_VAR 0 4
34493: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
34494: LD_INT 0
34496: PPUSH
34497: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34498: LD_STRING resetFactoryWaypoint();
34500: PPUSH
34501: CALL_OW 559
// if factoryWaypoints then
34505: LD_EXP 123
34509: IFFALSE 34632
// begin for i := 1 to factoryWaypoints do
34511: LD_ADDR_VAR 0 2
34515: PUSH
34516: DOUBLE
34517: LD_INT 1
34519: DEC
34520: ST_TO_ADDR
34521: LD_EXP 123
34525: PUSH
34526: FOR_TO
34527: IFFALSE 34630
// if factoryWaypoints [ i ] then
34529: LD_EXP 123
34533: PUSH
34534: LD_VAR 0 2
34538: ARRAY
34539: IFFALSE 34628
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
34541: LD_STRING setFactoryWaypointXY(
34543: PUSH
34544: LD_EXP 123
34548: PUSH
34549: LD_VAR 0 2
34553: ARRAY
34554: PUSH
34555: LD_INT 1
34557: ARRAY
34558: STR
34559: PUSH
34560: LD_STRING ,
34562: STR
34563: PUSH
34564: LD_EXP 123
34568: PUSH
34569: LD_VAR 0 2
34573: ARRAY
34574: PUSH
34575: LD_INT 2
34577: ARRAY
34578: STR
34579: PUSH
34580: LD_STRING ,
34582: STR
34583: PUSH
34584: LD_EXP 123
34588: PUSH
34589: LD_VAR 0 2
34593: ARRAY
34594: PUSH
34595: LD_INT 3
34597: ARRAY
34598: STR
34599: PUSH
34600: LD_STRING ,
34602: STR
34603: PUSH
34604: LD_EXP 123
34608: PUSH
34609: LD_VAR 0 2
34613: ARRAY
34614: PUSH
34615: LD_INT 4
34617: ARRAY
34618: STR
34619: PUSH
34620: LD_STRING )
34622: STR
34623: PPUSH
34624: CALL_OW 559
34628: GO 34526
34630: POP
34631: POP
// end ; end ;
34632: LD_VAR 0 1
34636: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34637: LD_INT 0
34639: PPUSH
34640: PPUSH
34641: PPUSH
34642: PPUSH
34643: PPUSH
34644: PPUSH
34645: PPUSH
34646: PPUSH
34647: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
34648: LD_VAR 0 1
34652: NOT
34653: PUSH
34654: LD_VAR 0 2
34658: PPUSH
34659: LD_VAR 0 3
34663: PPUSH
34664: CALL_OW 488
34668: NOT
34669: OR
34670: PUSH
34671: LD_VAR 0 4
34675: NOT
34676: OR
34677: IFFALSE 34681
// exit ;
34679: GO 35021
// list := [ ] ;
34681: LD_ADDR_VAR 0 13
34685: PUSH
34686: EMPTY
34687: ST_TO_ADDR
// if x - r < 0 then
34688: LD_VAR 0 2
34692: PUSH
34693: LD_VAR 0 4
34697: MINUS
34698: PUSH
34699: LD_INT 0
34701: LESS
34702: IFFALSE 34714
// min_x := 0 else
34704: LD_ADDR_VAR 0 7
34708: PUSH
34709: LD_INT 0
34711: ST_TO_ADDR
34712: GO 34730
// min_x := x - r ;
34714: LD_ADDR_VAR 0 7
34718: PUSH
34719: LD_VAR 0 2
34723: PUSH
34724: LD_VAR 0 4
34728: MINUS
34729: ST_TO_ADDR
// if y - r < 0 then
34730: LD_VAR 0 3
34734: PUSH
34735: LD_VAR 0 4
34739: MINUS
34740: PUSH
34741: LD_INT 0
34743: LESS
34744: IFFALSE 34756
// min_y := 0 else
34746: LD_ADDR_VAR 0 8
34750: PUSH
34751: LD_INT 0
34753: ST_TO_ADDR
34754: GO 34772
// min_y := y - r ;
34756: LD_ADDR_VAR 0 8
34760: PUSH
34761: LD_VAR 0 3
34765: PUSH
34766: LD_VAR 0 4
34770: MINUS
34771: ST_TO_ADDR
// max_x := x + r ;
34772: LD_ADDR_VAR 0 9
34776: PUSH
34777: LD_VAR 0 2
34781: PUSH
34782: LD_VAR 0 4
34786: PLUS
34787: ST_TO_ADDR
// max_y := y + r ;
34788: LD_ADDR_VAR 0 10
34792: PUSH
34793: LD_VAR 0 3
34797: PUSH
34798: LD_VAR 0 4
34802: PLUS
34803: ST_TO_ADDR
// for _x = min_x to max_x do
34804: LD_ADDR_VAR 0 11
34808: PUSH
34809: DOUBLE
34810: LD_VAR 0 7
34814: DEC
34815: ST_TO_ADDR
34816: LD_VAR 0 9
34820: PUSH
34821: FOR_TO
34822: IFFALSE 34939
// for _y = min_y to max_y do
34824: LD_ADDR_VAR 0 12
34828: PUSH
34829: DOUBLE
34830: LD_VAR 0 8
34834: DEC
34835: ST_TO_ADDR
34836: LD_VAR 0 10
34840: PUSH
34841: FOR_TO
34842: IFFALSE 34935
// begin if not ValidHex ( _x , _y ) then
34844: LD_VAR 0 11
34848: PPUSH
34849: LD_VAR 0 12
34853: PPUSH
34854: CALL_OW 488
34858: NOT
34859: IFFALSE 34863
// continue ;
34861: GO 34841
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34863: LD_VAR 0 11
34867: PPUSH
34868: LD_VAR 0 12
34872: PPUSH
34873: CALL_OW 351
34877: PUSH
34878: LD_VAR 0 11
34882: PPUSH
34883: LD_VAR 0 12
34887: PPUSH
34888: CALL_OW 554
34892: AND
34893: IFFALSE 34933
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34895: LD_ADDR_VAR 0 13
34899: PUSH
34900: LD_VAR 0 13
34904: PPUSH
34905: LD_VAR 0 13
34909: PUSH
34910: LD_INT 1
34912: PLUS
34913: PPUSH
34914: LD_VAR 0 11
34918: PUSH
34919: LD_VAR 0 12
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PPUSH
34928: CALL_OW 2
34932: ST_TO_ADDR
// end ;
34933: GO 34841
34935: POP
34936: POP
34937: GO 34821
34939: POP
34940: POP
// if not list then
34941: LD_VAR 0 13
34945: NOT
34946: IFFALSE 34950
// exit ;
34948: GO 35021
// for i in list do
34950: LD_ADDR_VAR 0 6
34954: PUSH
34955: LD_VAR 0 13
34959: PUSH
34960: FOR_IN
34961: IFFALSE 35019
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34963: LD_VAR 0 1
34967: PPUSH
34968: LD_STRING M
34970: PUSH
34971: LD_VAR 0 6
34975: PUSH
34976: LD_INT 1
34978: ARRAY
34979: PUSH
34980: LD_VAR 0 6
34984: PUSH
34985: LD_INT 2
34987: ARRAY
34988: PUSH
34989: LD_INT 0
34991: PUSH
34992: LD_INT 0
34994: PUSH
34995: LD_INT 0
34997: PUSH
34998: LD_INT 0
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: PUSH
35010: EMPTY
35011: LIST
35012: PPUSH
35013: CALL_OW 447
35017: GO 34960
35019: POP
35020: POP
// end ;
35021: LD_VAR 0 5
35025: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35026: LD_EXP 124
35030: NOT
35031: IFFALSE 35081
35033: GO 35035
35035: DISABLE
// begin initHack := true ;
35036: LD_ADDR_EXP 124
35040: PUSH
35041: LD_INT 1
35043: ST_TO_ADDR
// hackTanks := [ ] ;
35044: LD_ADDR_EXP 125
35048: PUSH
35049: EMPTY
35050: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35051: LD_ADDR_EXP 126
35055: PUSH
35056: EMPTY
35057: ST_TO_ADDR
// hackLimit := 3 ;
35058: LD_ADDR_EXP 127
35062: PUSH
35063: LD_INT 3
35065: ST_TO_ADDR
// hackDist := 12 ;
35066: LD_ADDR_EXP 128
35070: PUSH
35071: LD_INT 12
35073: ST_TO_ADDR
// hackCounter := [ ] ;
35074: LD_ADDR_EXP 129
35078: PUSH
35079: EMPTY
35080: ST_TO_ADDR
// end ;
35081: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35082: LD_EXP 124
35086: PUSH
35087: LD_INT 34
35089: PUSH
35090: LD_EXP 47
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: PPUSH
35099: CALL_OW 69
35103: AND
35104: IFFALSE 35359
35106: GO 35108
35108: DISABLE
35109: LD_INT 0
35111: PPUSH
35112: PPUSH
// begin enable ;
35113: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35114: LD_ADDR_VAR 0 1
35118: PUSH
35119: LD_INT 34
35121: PUSH
35122: LD_EXP 47
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PPUSH
35131: CALL_OW 69
35135: PUSH
35136: FOR_IN
35137: IFFALSE 35357
// begin if not i in hackTanks then
35139: LD_VAR 0 1
35143: PUSH
35144: LD_EXP 125
35148: IN
35149: NOT
35150: IFFALSE 35233
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35152: LD_ADDR_EXP 125
35156: PUSH
35157: LD_EXP 125
35161: PPUSH
35162: LD_EXP 125
35166: PUSH
35167: LD_INT 1
35169: PLUS
35170: PPUSH
35171: LD_VAR 0 1
35175: PPUSH
35176: CALL_OW 1
35180: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35181: LD_ADDR_EXP 126
35185: PUSH
35186: LD_EXP 126
35190: PPUSH
35191: LD_EXP 126
35195: PUSH
35196: LD_INT 1
35198: PLUS
35199: PPUSH
35200: EMPTY
35201: PPUSH
35202: CALL_OW 1
35206: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35207: LD_ADDR_EXP 129
35211: PUSH
35212: LD_EXP 129
35216: PPUSH
35217: LD_EXP 129
35221: PUSH
35222: LD_INT 1
35224: PLUS
35225: PPUSH
35226: EMPTY
35227: PPUSH
35228: CALL_OW 1
35232: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35233: LD_VAR 0 1
35237: PPUSH
35238: CALL_OW 302
35242: NOT
35243: IFFALSE 35256
// begin HackUnlinkAll ( i ) ;
35245: LD_VAR 0 1
35249: PPUSH
35250: CALL 35362 0 1
// continue ;
35254: GO 35136
// end ; HackCheckCapturedStatus ( i ) ;
35256: LD_VAR 0 1
35260: PPUSH
35261: CALL 35805 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35265: LD_ADDR_VAR 0 2
35269: PUSH
35270: LD_INT 81
35272: PUSH
35273: LD_VAR 0 1
35277: PPUSH
35278: CALL_OW 255
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PUSH
35287: LD_INT 33
35289: PUSH
35290: LD_INT 3
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: LD_INT 91
35299: PUSH
35300: LD_VAR 0 1
35304: PUSH
35305: LD_EXP 128
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: LIST
35314: PUSH
35315: LD_INT 50
35317: PUSH
35318: EMPTY
35319: LIST
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: PPUSH
35327: CALL_OW 69
35331: ST_TO_ADDR
// if not tmp then
35332: LD_VAR 0 2
35336: NOT
35337: IFFALSE 35341
// continue ;
35339: GO 35136
// HackLink ( i , tmp ) ;
35341: LD_VAR 0 1
35345: PPUSH
35346: LD_VAR 0 2
35350: PPUSH
35351: CALL 35498 0 2
// end ;
35355: GO 35136
35357: POP
35358: POP
// end ;
35359: PPOPN 2
35361: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35362: LD_INT 0
35364: PPUSH
35365: PPUSH
35366: PPUSH
// if not hack in hackTanks then
35367: LD_VAR 0 1
35371: PUSH
35372: LD_EXP 125
35376: IN
35377: NOT
35378: IFFALSE 35382
// exit ;
35380: GO 35493
// index := GetElementIndex ( hackTanks , hack ) ;
35382: LD_ADDR_VAR 0 4
35386: PUSH
35387: LD_EXP 125
35391: PPUSH
35392: LD_VAR 0 1
35396: PPUSH
35397: CALL 42967 0 2
35401: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
35402: LD_EXP 126
35406: PUSH
35407: LD_VAR 0 4
35411: ARRAY
35412: IFFALSE 35493
// begin for i in hackTanksCaptured [ index ] do
35414: LD_ADDR_VAR 0 3
35418: PUSH
35419: LD_EXP 126
35423: PUSH
35424: LD_VAR 0 4
35428: ARRAY
35429: PUSH
35430: FOR_IN
35431: IFFALSE 35457
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
35433: LD_VAR 0 3
35437: PUSH
35438: LD_INT 1
35440: ARRAY
35441: PPUSH
35442: LD_VAR 0 3
35446: PUSH
35447: LD_INT 2
35449: ARRAY
35450: PPUSH
35451: CALL_OW 235
35455: GO 35430
35457: POP
35458: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
35459: LD_ADDR_EXP 126
35463: PUSH
35464: LD_EXP 126
35468: PPUSH
35469: LD_VAR 0 4
35473: PPUSH
35474: EMPTY
35475: PPUSH
35476: CALL_OW 1
35480: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
35481: LD_VAR 0 1
35485: PPUSH
35486: LD_INT 0
35488: PPUSH
35489: CALL_OW 505
// end ; end ;
35493: LD_VAR 0 2
35497: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35498: LD_INT 0
35500: PPUSH
35501: PPUSH
35502: PPUSH
// if not hack in hackTanks or not vehicles then
35503: LD_VAR 0 1
35507: PUSH
35508: LD_EXP 125
35512: IN
35513: NOT
35514: PUSH
35515: LD_VAR 0 2
35519: NOT
35520: OR
35521: IFFALSE 35525
// exit ;
35523: GO 35800
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35525: LD_ADDR_VAR 0 2
35529: PUSH
35530: LD_VAR 0 1
35534: PPUSH
35535: LD_VAR 0 2
35539: PPUSH
35540: LD_INT 1
35542: PPUSH
35543: LD_INT 1
35545: PPUSH
35546: CALL 43617 0 4
35550: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35551: LD_ADDR_VAR 0 5
35555: PUSH
35556: LD_EXP 125
35560: PPUSH
35561: LD_VAR 0 1
35565: PPUSH
35566: CALL 42967 0 2
35570: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35571: LD_EXP 126
35575: PUSH
35576: LD_VAR 0 5
35580: ARRAY
35581: PUSH
35582: LD_EXP 127
35586: LESS
35587: IFFALSE 35776
// begin for i := 1 to vehicles do
35589: LD_ADDR_VAR 0 4
35593: PUSH
35594: DOUBLE
35595: LD_INT 1
35597: DEC
35598: ST_TO_ADDR
35599: LD_VAR 0 2
35603: PUSH
35604: FOR_TO
35605: IFFALSE 35774
// begin if hackTanksCaptured [ index ] = hackLimit then
35607: LD_EXP 126
35611: PUSH
35612: LD_VAR 0 5
35616: ARRAY
35617: PUSH
35618: LD_EXP 127
35622: EQUAL
35623: IFFALSE 35627
// break ;
35625: GO 35774
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
35627: LD_ADDR_EXP 129
35631: PUSH
35632: LD_EXP 129
35636: PPUSH
35637: LD_VAR 0 5
35641: PPUSH
35642: LD_EXP 129
35646: PUSH
35647: LD_VAR 0 5
35651: ARRAY
35652: PUSH
35653: LD_INT 1
35655: PLUS
35656: PPUSH
35657: CALL_OW 1
35661: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
35662: LD_ADDR_EXP 126
35666: PUSH
35667: LD_EXP 126
35671: PPUSH
35672: LD_VAR 0 5
35676: PUSH
35677: LD_EXP 126
35681: PUSH
35682: LD_VAR 0 5
35686: ARRAY
35687: PUSH
35688: LD_INT 1
35690: PLUS
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PPUSH
35696: LD_VAR 0 2
35700: PUSH
35701: LD_VAR 0 4
35705: ARRAY
35706: PUSH
35707: LD_VAR 0 2
35711: PUSH
35712: LD_VAR 0 4
35716: ARRAY
35717: PPUSH
35718: CALL_OW 255
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: PPUSH
35727: CALL 43182 0 3
35731: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
35732: LD_VAR 0 2
35736: PUSH
35737: LD_VAR 0 4
35741: ARRAY
35742: PPUSH
35743: LD_VAR 0 1
35747: PPUSH
35748: CALL_OW 255
35752: PPUSH
35753: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
35757: LD_VAR 0 2
35761: PUSH
35762: LD_VAR 0 4
35766: ARRAY
35767: PPUSH
35768: CALL_OW 141
// end ;
35772: GO 35604
35774: POP
35775: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35776: LD_VAR 0 1
35780: PPUSH
35781: LD_EXP 126
35785: PUSH
35786: LD_VAR 0 5
35790: ARRAY
35791: PUSH
35792: LD_INT 0
35794: PLUS
35795: PPUSH
35796: CALL_OW 505
// end ;
35800: LD_VAR 0 3
35804: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35805: LD_INT 0
35807: PPUSH
35808: PPUSH
35809: PPUSH
35810: PPUSH
// if not hack in hackTanks then
35811: LD_VAR 0 1
35815: PUSH
35816: LD_EXP 125
35820: IN
35821: NOT
35822: IFFALSE 35826
// exit ;
35824: GO 36066
// index := GetElementIndex ( hackTanks , hack ) ;
35826: LD_ADDR_VAR 0 4
35830: PUSH
35831: LD_EXP 125
35835: PPUSH
35836: LD_VAR 0 1
35840: PPUSH
35841: CALL 42967 0 2
35845: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35846: LD_ADDR_VAR 0 3
35850: PUSH
35851: DOUBLE
35852: LD_EXP 126
35856: PUSH
35857: LD_VAR 0 4
35861: ARRAY
35862: INC
35863: ST_TO_ADDR
35864: LD_INT 1
35866: PUSH
35867: FOR_DOWNTO
35868: IFFALSE 36040
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35870: LD_ADDR_VAR 0 5
35874: PUSH
35875: LD_EXP 126
35879: PUSH
35880: LD_VAR 0 4
35884: ARRAY
35885: PUSH
35886: LD_VAR 0 3
35890: ARRAY
35891: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35892: LD_VAR 0 5
35896: PUSH
35897: LD_INT 1
35899: ARRAY
35900: PPUSH
35901: CALL_OW 302
35905: NOT
35906: PUSH
35907: LD_VAR 0 5
35911: PUSH
35912: LD_INT 1
35914: ARRAY
35915: PPUSH
35916: CALL_OW 255
35920: PUSH
35921: LD_VAR 0 1
35925: PPUSH
35926: CALL_OW 255
35930: NONEQUAL
35931: OR
35932: IFFALSE 36038
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35934: LD_VAR 0 5
35938: PUSH
35939: LD_INT 1
35941: ARRAY
35942: PPUSH
35943: CALL_OW 305
35947: PUSH
35948: LD_VAR 0 5
35952: PUSH
35953: LD_INT 1
35955: ARRAY
35956: PPUSH
35957: CALL_OW 255
35961: PUSH
35962: LD_VAR 0 1
35966: PPUSH
35967: CALL_OW 255
35971: EQUAL
35972: AND
35973: IFFALSE 35997
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35975: LD_VAR 0 5
35979: PUSH
35980: LD_INT 1
35982: ARRAY
35983: PPUSH
35984: LD_VAR 0 5
35988: PUSH
35989: LD_INT 2
35991: ARRAY
35992: PPUSH
35993: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35997: LD_ADDR_EXP 126
36001: PUSH
36002: LD_EXP 126
36006: PPUSH
36007: LD_VAR 0 4
36011: PPUSH
36012: LD_EXP 126
36016: PUSH
36017: LD_VAR 0 4
36021: ARRAY
36022: PPUSH
36023: LD_VAR 0 3
36027: PPUSH
36028: CALL_OW 3
36032: PPUSH
36033: CALL_OW 1
36037: ST_TO_ADDR
// end ; end ;
36038: GO 35867
36040: POP
36041: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36042: LD_VAR 0 1
36046: PPUSH
36047: LD_EXP 126
36051: PUSH
36052: LD_VAR 0 4
36056: ARRAY
36057: PUSH
36058: LD_INT 0
36060: PLUS
36061: PPUSH
36062: CALL_OW 505
// end ;
36066: LD_VAR 0 2
36070: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36071: LD_INT 0
36073: PPUSH
36074: PPUSH
36075: PPUSH
36076: PPUSH
// if not hack in hackTanks then
36077: LD_VAR 0 1
36081: PUSH
36082: LD_EXP 125
36086: IN
36087: NOT
36088: IFFALSE 36092
// exit ;
36090: GO 36177
// index := GetElementIndex ( hackTanks , hack ) ;
36092: LD_ADDR_VAR 0 5
36096: PUSH
36097: LD_EXP 125
36101: PPUSH
36102: LD_VAR 0 1
36106: PPUSH
36107: CALL 42967 0 2
36111: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36112: LD_ADDR_VAR 0 4
36116: PUSH
36117: DOUBLE
36118: LD_INT 1
36120: DEC
36121: ST_TO_ADDR
36122: LD_EXP 126
36126: PUSH
36127: LD_VAR 0 5
36131: ARRAY
36132: PUSH
36133: FOR_TO
36134: IFFALSE 36175
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36136: LD_EXP 126
36140: PUSH
36141: LD_VAR 0 5
36145: ARRAY
36146: PUSH
36147: LD_VAR 0 4
36151: ARRAY
36152: PUSH
36153: LD_INT 1
36155: ARRAY
36156: PUSH
36157: LD_VAR 0 2
36161: EQUAL
36162: IFFALSE 36173
// KillUnit ( vehicle ) ;
36164: LD_VAR 0 2
36168: PPUSH
36169: CALL_OW 66
36173: GO 36133
36175: POP
36176: POP
// end ;
36177: LD_VAR 0 3
36181: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36182: LD_EXP 130
36186: NOT
36187: IFFALSE 36222
36189: GO 36191
36191: DISABLE
// begin initMiner := true ;
36192: LD_ADDR_EXP 130
36196: PUSH
36197: LD_INT 1
36199: ST_TO_ADDR
// minersList := [ ] ;
36200: LD_ADDR_EXP 131
36204: PUSH
36205: EMPTY
36206: ST_TO_ADDR
// minerMinesList := [ ] ;
36207: LD_ADDR_EXP 132
36211: PUSH
36212: EMPTY
36213: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36214: LD_ADDR_EXP 133
36218: PUSH
36219: LD_INT 5
36221: ST_TO_ADDR
// end ;
36222: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36223: LD_EXP 130
36227: PUSH
36228: LD_INT 34
36230: PUSH
36231: LD_EXP 52
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: PPUSH
36240: CALL_OW 69
36244: AND
36245: IFFALSE 36708
36247: GO 36249
36249: DISABLE
36250: LD_INT 0
36252: PPUSH
36253: PPUSH
36254: PPUSH
36255: PPUSH
// begin enable ;
36256: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36257: LD_ADDR_VAR 0 1
36261: PUSH
36262: LD_INT 34
36264: PUSH
36265: LD_EXP 52
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PPUSH
36274: CALL_OW 69
36278: PUSH
36279: FOR_IN
36280: IFFALSE 36352
// begin if not i in minersList then
36282: LD_VAR 0 1
36286: PUSH
36287: LD_EXP 131
36291: IN
36292: NOT
36293: IFFALSE 36350
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36295: LD_ADDR_EXP 131
36299: PUSH
36300: LD_EXP 131
36304: PPUSH
36305: LD_EXP 131
36309: PUSH
36310: LD_INT 1
36312: PLUS
36313: PPUSH
36314: LD_VAR 0 1
36318: PPUSH
36319: CALL_OW 1
36323: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36324: LD_ADDR_EXP 132
36328: PUSH
36329: LD_EXP 132
36333: PPUSH
36334: LD_EXP 132
36338: PUSH
36339: LD_INT 1
36341: PLUS
36342: PPUSH
36343: EMPTY
36344: PPUSH
36345: CALL_OW 1
36349: ST_TO_ADDR
// end end ;
36350: GO 36279
36352: POP
36353: POP
// for i := minerMinesList downto 1 do
36354: LD_ADDR_VAR 0 1
36358: PUSH
36359: DOUBLE
36360: LD_EXP 132
36364: INC
36365: ST_TO_ADDR
36366: LD_INT 1
36368: PUSH
36369: FOR_DOWNTO
36370: IFFALSE 36706
// begin if IsLive ( minersList [ i ] ) then
36372: LD_EXP 131
36376: PUSH
36377: LD_VAR 0 1
36381: ARRAY
36382: PPUSH
36383: CALL_OW 300
36387: IFFALSE 36415
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
36389: LD_EXP 131
36393: PUSH
36394: LD_VAR 0 1
36398: ARRAY
36399: PPUSH
36400: LD_EXP 132
36404: PUSH
36405: LD_VAR 0 1
36409: ARRAY
36410: PPUSH
36411: CALL_OW 505
// if not minerMinesList [ i ] then
36415: LD_EXP 132
36419: PUSH
36420: LD_VAR 0 1
36424: ARRAY
36425: NOT
36426: IFFALSE 36430
// continue ;
36428: GO 36369
// for j := minerMinesList [ i ] downto 1 do
36430: LD_ADDR_VAR 0 2
36434: PUSH
36435: DOUBLE
36436: LD_EXP 132
36440: PUSH
36441: LD_VAR 0 1
36445: ARRAY
36446: INC
36447: ST_TO_ADDR
36448: LD_INT 1
36450: PUSH
36451: FOR_DOWNTO
36452: IFFALSE 36702
// begin side := GetSide ( minersList [ i ] ) ;
36454: LD_ADDR_VAR 0 3
36458: PUSH
36459: LD_EXP 131
36463: PUSH
36464: LD_VAR 0 1
36468: ARRAY
36469: PPUSH
36470: CALL_OW 255
36474: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
36475: LD_ADDR_VAR 0 4
36479: PUSH
36480: LD_EXP 132
36484: PUSH
36485: LD_VAR 0 1
36489: ARRAY
36490: PUSH
36491: LD_VAR 0 2
36495: ARRAY
36496: PUSH
36497: LD_INT 1
36499: ARRAY
36500: PPUSH
36501: LD_EXP 132
36505: PUSH
36506: LD_VAR 0 1
36510: ARRAY
36511: PUSH
36512: LD_VAR 0 2
36516: ARRAY
36517: PUSH
36518: LD_INT 2
36520: ARRAY
36521: PPUSH
36522: CALL_OW 428
36526: ST_TO_ADDR
// if not tmp then
36527: LD_VAR 0 4
36531: NOT
36532: IFFALSE 36536
// continue ;
36534: GO 36451
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
36536: LD_VAR 0 4
36540: PUSH
36541: LD_INT 81
36543: PUSH
36544: LD_VAR 0 3
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: PPUSH
36553: CALL_OW 69
36557: IN
36558: PUSH
36559: LD_EXP 132
36563: PUSH
36564: LD_VAR 0 1
36568: ARRAY
36569: PUSH
36570: LD_VAR 0 2
36574: ARRAY
36575: PUSH
36576: LD_INT 1
36578: ARRAY
36579: PPUSH
36580: LD_EXP 132
36584: PUSH
36585: LD_VAR 0 1
36589: ARRAY
36590: PUSH
36591: LD_VAR 0 2
36595: ARRAY
36596: PUSH
36597: LD_INT 2
36599: ARRAY
36600: PPUSH
36601: CALL_OW 458
36605: AND
36606: IFFALSE 36700
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
36608: LD_EXP 132
36612: PUSH
36613: LD_VAR 0 1
36617: ARRAY
36618: PUSH
36619: LD_VAR 0 2
36623: ARRAY
36624: PUSH
36625: LD_INT 1
36627: ARRAY
36628: PPUSH
36629: LD_EXP 132
36633: PUSH
36634: LD_VAR 0 1
36638: ARRAY
36639: PUSH
36640: LD_VAR 0 2
36644: ARRAY
36645: PUSH
36646: LD_INT 2
36648: ARRAY
36649: PPUSH
36650: LD_VAR 0 3
36654: PPUSH
36655: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
36659: LD_ADDR_EXP 132
36663: PUSH
36664: LD_EXP 132
36668: PPUSH
36669: LD_VAR 0 1
36673: PPUSH
36674: LD_EXP 132
36678: PUSH
36679: LD_VAR 0 1
36683: ARRAY
36684: PPUSH
36685: LD_VAR 0 2
36689: PPUSH
36690: CALL_OW 3
36694: PPUSH
36695: CALL_OW 1
36699: ST_TO_ADDR
// end ; end ;
36700: GO 36451
36702: POP
36703: POP
// end ;
36704: GO 36369
36706: POP
36707: POP
// end ;
36708: PPOPN 4
36710: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
36711: LD_INT 0
36713: PPUSH
36714: PPUSH
// result := false ;
36715: LD_ADDR_VAR 0 4
36719: PUSH
36720: LD_INT 0
36722: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
36723: LD_VAR 0 1
36727: PPUSH
36728: CALL_OW 264
36732: PUSH
36733: LD_EXP 52
36737: EQUAL
36738: NOT
36739: IFFALSE 36743
// exit ;
36741: GO 36983
// index := GetElementIndex ( minersList , unit ) ;
36743: LD_ADDR_VAR 0 5
36747: PUSH
36748: LD_EXP 131
36752: PPUSH
36753: LD_VAR 0 1
36757: PPUSH
36758: CALL 42967 0 2
36762: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
36763: LD_EXP 132
36767: PUSH
36768: LD_VAR 0 5
36772: ARRAY
36773: PUSH
36774: LD_EXP 133
36778: GREATEREQUAL
36779: IFFALSE 36783
// exit ;
36781: GO 36983
// ComMoveXY ( unit , x , y ) ;
36783: LD_VAR 0 1
36787: PPUSH
36788: LD_VAR 0 2
36792: PPUSH
36793: LD_VAR 0 3
36797: PPUSH
36798: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36802: LD_INT 35
36804: PPUSH
36805: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36809: LD_VAR 0 1
36813: PPUSH
36814: LD_VAR 0 2
36818: PPUSH
36819: LD_VAR 0 3
36823: PPUSH
36824: CALL 73686 0 3
36828: NOT
36829: PUSH
36830: LD_VAR 0 1
36834: PPUSH
36835: CALL_OW 314
36839: AND
36840: IFFALSE 36844
// exit ;
36842: GO 36983
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36844: LD_VAR 0 2
36848: PPUSH
36849: LD_VAR 0 3
36853: PPUSH
36854: CALL_OW 428
36858: PUSH
36859: LD_VAR 0 1
36863: EQUAL
36864: PUSH
36865: LD_VAR 0 1
36869: PPUSH
36870: CALL_OW 314
36874: NOT
36875: AND
36876: IFFALSE 36802
// PlaySoundXY ( x , y , PlantMine ) ;
36878: LD_VAR 0 2
36882: PPUSH
36883: LD_VAR 0 3
36887: PPUSH
36888: LD_STRING PlantMine
36890: PPUSH
36891: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
36895: LD_VAR 0 2
36899: PPUSH
36900: LD_VAR 0 3
36904: PPUSH
36905: LD_VAR 0 1
36909: PPUSH
36910: CALL_OW 255
36914: PPUSH
36915: LD_INT 0
36917: PPUSH
36918: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36922: LD_ADDR_EXP 132
36926: PUSH
36927: LD_EXP 132
36931: PPUSH
36932: LD_VAR 0 5
36936: PUSH
36937: LD_EXP 132
36941: PUSH
36942: LD_VAR 0 5
36946: ARRAY
36947: PUSH
36948: LD_INT 1
36950: PLUS
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PPUSH
36956: LD_VAR 0 2
36960: PUSH
36961: LD_VAR 0 3
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PPUSH
36970: CALL 43182 0 3
36974: ST_TO_ADDR
// result := true ;
36975: LD_ADDR_VAR 0 4
36979: PUSH
36980: LD_INT 1
36982: ST_TO_ADDR
// end ;
36983: LD_VAR 0 4
36987: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36988: LD_INT 0
36990: PPUSH
36991: PPUSH
36992: PPUSH
// if not unit in minersList then
36993: LD_VAR 0 1
36997: PUSH
36998: LD_EXP 131
37002: IN
37003: NOT
37004: IFFALSE 37008
// exit ;
37006: GO 37400
// index := GetElementIndex ( minersList , unit ) ;
37008: LD_ADDR_VAR 0 6
37012: PUSH
37013: LD_EXP 131
37017: PPUSH
37018: LD_VAR 0 1
37022: PPUSH
37023: CALL 42967 0 2
37027: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37028: LD_ADDR_VAR 0 5
37032: PUSH
37033: DOUBLE
37034: LD_EXP 132
37038: PUSH
37039: LD_VAR 0 6
37043: ARRAY
37044: INC
37045: ST_TO_ADDR
37046: LD_INT 1
37048: PUSH
37049: FOR_DOWNTO
37050: IFFALSE 37211
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37052: LD_EXP 132
37056: PUSH
37057: LD_VAR 0 6
37061: ARRAY
37062: PUSH
37063: LD_VAR 0 5
37067: ARRAY
37068: PUSH
37069: LD_INT 1
37071: ARRAY
37072: PUSH
37073: LD_VAR 0 2
37077: EQUAL
37078: PUSH
37079: LD_EXP 132
37083: PUSH
37084: LD_VAR 0 6
37088: ARRAY
37089: PUSH
37090: LD_VAR 0 5
37094: ARRAY
37095: PUSH
37096: LD_INT 2
37098: ARRAY
37099: PUSH
37100: LD_VAR 0 3
37104: EQUAL
37105: AND
37106: IFFALSE 37209
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37108: LD_EXP 132
37112: PUSH
37113: LD_VAR 0 6
37117: ARRAY
37118: PUSH
37119: LD_VAR 0 5
37123: ARRAY
37124: PUSH
37125: LD_INT 1
37127: ARRAY
37128: PPUSH
37129: LD_EXP 132
37133: PUSH
37134: LD_VAR 0 6
37138: ARRAY
37139: PUSH
37140: LD_VAR 0 5
37144: ARRAY
37145: PUSH
37146: LD_INT 2
37148: ARRAY
37149: PPUSH
37150: LD_VAR 0 1
37154: PPUSH
37155: CALL_OW 255
37159: PPUSH
37160: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37164: LD_ADDR_EXP 132
37168: PUSH
37169: LD_EXP 132
37173: PPUSH
37174: LD_VAR 0 6
37178: PPUSH
37179: LD_EXP 132
37183: PUSH
37184: LD_VAR 0 6
37188: ARRAY
37189: PPUSH
37190: LD_VAR 0 5
37194: PPUSH
37195: CALL_OW 3
37199: PPUSH
37200: CALL_OW 1
37204: ST_TO_ADDR
// exit ;
37205: POP
37206: POP
37207: GO 37400
// end ; end ;
37209: GO 37049
37211: POP
37212: POP
// for i := minerMinesList [ index ] downto 1 do
37213: LD_ADDR_VAR 0 5
37217: PUSH
37218: DOUBLE
37219: LD_EXP 132
37223: PUSH
37224: LD_VAR 0 6
37228: ARRAY
37229: INC
37230: ST_TO_ADDR
37231: LD_INT 1
37233: PUSH
37234: FOR_DOWNTO
37235: IFFALSE 37398
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37237: LD_EXP 132
37241: PUSH
37242: LD_VAR 0 6
37246: ARRAY
37247: PUSH
37248: LD_VAR 0 5
37252: ARRAY
37253: PUSH
37254: LD_INT 1
37256: ARRAY
37257: PPUSH
37258: LD_EXP 132
37262: PUSH
37263: LD_VAR 0 6
37267: ARRAY
37268: PUSH
37269: LD_VAR 0 5
37273: ARRAY
37274: PUSH
37275: LD_INT 2
37277: ARRAY
37278: PPUSH
37279: LD_VAR 0 2
37283: PPUSH
37284: LD_VAR 0 3
37288: PPUSH
37289: CALL_OW 298
37293: PUSH
37294: LD_INT 6
37296: LESS
37297: IFFALSE 37396
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37299: LD_EXP 132
37303: PUSH
37304: LD_VAR 0 6
37308: ARRAY
37309: PUSH
37310: LD_VAR 0 5
37314: ARRAY
37315: PUSH
37316: LD_INT 1
37318: ARRAY
37319: PPUSH
37320: LD_EXP 132
37324: PUSH
37325: LD_VAR 0 6
37329: ARRAY
37330: PUSH
37331: LD_VAR 0 5
37335: ARRAY
37336: PUSH
37337: LD_INT 2
37339: ARRAY
37340: PPUSH
37341: LD_VAR 0 1
37345: PPUSH
37346: CALL_OW 255
37350: PPUSH
37351: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37355: LD_ADDR_EXP 132
37359: PUSH
37360: LD_EXP 132
37364: PPUSH
37365: LD_VAR 0 6
37369: PPUSH
37370: LD_EXP 132
37374: PUSH
37375: LD_VAR 0 6
37379: ARRAY
37380: PPUSH
37381: LD_VAR 0 5
37385: PPUSH
37386: CALL_OW 3
37390: PPUSH
37391: CALL_OW 1
37395: ST_TO_ADDR
// end ; end ;
37396: GO 37234
37398: POP
37399: POP
// end ;
37400: LD_VAR 0 4
37404: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
37405: LD_INT 0
37407: PPUSH
37408: PPUSH
37409: PPUSH
37410: PPUSH
37411: PPUSH
37412: PPUSH
37413: PPUSH
37414: PPUSH
37415: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
37416: LD_VAR 0 1
37420: PPUSH
37421: CALL_OW 264
37425: PUSH
37426: LD_EXP 52
37430: EQUAL
37431: NOT
37432: PUSH
37433: LD_VAR 0 1
37437: PUSH
37438: LD_EXP 131
37442: IN
37443: NOT
37444: OR
37445: IFFALSE 37449
// exit ;
37447: GO 37771
// index := GetElementIndex ( minersList , unit ) ;
37449: LD_ADDR_VAR 0 6
37453: PUSH
37454: LD_EXP 131
37458: PPUSH
37459: LD_VAR 0 1
37463: PPUSH
37464: CALL 42967 0 2
37468: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
37469: LD_ADDR_VAR 0 8
37473: PUSH
37474: LD_EXP 133
37478: PUSH
37479: LD_EXP 132
37483: PUSH
37484: LD_VAR 0 6
37488: ARRAY
37489: MINUS
37490: ST_TO_ADDR
// if not minesFreeAmount then
37491: LD_VAR 0 8
37495: NOT
37496: IFFALSE 37500
// exit ;
37498: GO 37771
// tmp := [ ] ;
37500: LD_ADDR_VAR 0 7
37504: PUSH
37505: EMPTY
37506: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
37507: LD_ADDR_VAR 0 5
37511: PUSH
37512: DOUBLE
37513: LD_INT 1
37515: DEC
37516: ST_TO_ADDR
37517: LD_VAR 0 8
37521: PUSH
37522: FOR_TO
37523: IFFALSE 37718
// begin _d := rand ( 0 , 5 ) ;
37525: LD_ADDR_VAR 0 11
37529: PUSH
37530: LD_INT 0
37532: PPUSH
37533: LD_INT 5
37535: PPUSH
37536: CALL_OW 12
37540: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
37541: LD_ADDR_VAR 0 12
37545: PUSH
37546: LD_INT 2
37548: PPUSH
37549: LD_INT 6
37551: PPUSH
37552: CALL_OW 12
37556: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
37557: LD_ADDR_VAR 0 9
37561: PUSH
37562: LD_VAR 0 2
37566: PPUSH
37567: LD_VAR 0 11
37571: PPUSH
37572: LD_VAR 0 12
37576: PPUSH
37577: CALL_OW 272
37581: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
37582: LD_ADDR_VAR 0 10
37586: PUSH
37587: LD_VAR 0 3
37591: PPUSH
37592: LD_VAR 0 11
37596: PPUSH
37597: LD_VAR 0 12
37601: PPUSH
37602: CALL_OW 273
37606: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
37607: LD_VAR 0 9
37611: PPUSH
37612: LD_VAR 0 10
37616: PPUSH
37617: CALL_OW 488
37621: PUSH
37622: LD_VAR 0 9
37626: PUSH
37627: LD_VAR 0 10
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_VAR 0 7
37640: IN
37641: NOT
37642: AND
37643: PUSH
37644: LD_VAR 0 9
37648: PPUSH
37649: LD_VAR 0 10
37653: PPUSH
37654: CALL_OW 458
37658: NOT
37659: AND
37660: IFFALSE 37702
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
37662: LD_ADDR_VAR 0 7
37666: PUSH
37667: LD_VAR 0 7
37671: PPUSH
37672: LD_VAR 0 7
37676: PUSH
37677: LD_INT 1
37679: PLUS
37680: PPUSH
37681: LD_VAR 0 9
37685: PUSH
37686: LD_VAR 0 10
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PPUSH
37695: CALL_OW 1
37699: ST_TO_ADDR
37700: GO 37716
// i := i - 1 ;
37702: LD_ADDR_VAR 0 5
37706: PUSH
37707: LD_VAR 0 5
37711: PUSH
37712: LD_INT 1
37714: MINUS
37715: ST_TO_ADDR
// end ;
37716: GO 37522
37718: POP
37719: POP
// for i in tmp do
37720: LD_ADDR_VAR 0 5
37724: PUSH
37725: LD_VAR 0 7
37729: PUSH
37730: FOR_IN
37731: IFFALSE 37769
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
37733: LD_VAR 0 1
37737: PPUSH
37738: LD_VAR 0 5
37742: PUSH
37743: LD_INT 1
37745: ARRAY
37746: PPUSH
37747: LD_VAR 0 5
37751: PUSH
37752: LD_INT 2
37754: ARRAY
37755: PPUSH
37756: CALL 36711 0 3
37760: NOT
37761: IFFALSE 37767
// exit ;
37763: POP
37764: POP
37765: GO 37771
37767: GO 37730
37769: POP
37770: POP
// end ;
37771: LD_VAR 0 4
37775: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
37776: LD_INT 0
37778: PPUSH
37779: PPUSH
37780: PPUSH
37781: PPUSH
37782: PPUSH
37783: PPUSH
37784: PPUSH
// if not GetClass ( unit ) = class_sniper then
37785: LD_VAR 0 1
37789: PPUSH
37790: CALL_OW 257
37794: PUSH
37795: LD_INT 5
37797: EQUAL
37798: NOT
37799: IFFALSE 37803
// exit ;
37801: GO 38191
// dist := 8 ;
37803: LD_ADDR_VAR 0 5
37807: PUSH
37808: LD_INT 8
37810: ST_TO_ADDR
// viewRange := 12 ;
37811: LD_ADDR_VAR 0 7
37815: PUSH
37816: LD_INT 12
37818: ST_TO_ADDR
// side := GetSide ( unit ) ;
37819: LD_ADDR_VAR 0 6
37823: PUSH
37824: LD_VAR 0 1
37828: PPUSH
37829: CALL_OW 255
37833: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37834: LD_INT 61
37836: PPUSH
37837: LD_VAR 0 6
37841: PPUSH
37842: CALL_OW 321
37846: PUSH
37847: LD_INT 2
37849: EQUAL
37850: IFFALSE 37860
// viewRange := 16 ;
37852: LD_ADDR_VAR 0 7
37856: PUSH
37857: LD_INT 16
37859: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
37860: LD_VAR 0 1
37864: PPUSH
37865: LD_VAR 0 2
37869: PPUSH
37870: LD_VAR 0 3
37874: PPUSH
37875: CALL_OW 297
37879: PUSH
37880: LD_VAR 0 5
37884: GREATER
37885: IFFALSE 37964
// begin ComMoveXY ( unit , x , y ) ;
37887: LD_VAR 0 1
37891: PPUSH
37892: LD_VAR 0 2
37896: PPUSH
37897: LD_VAR 0 3
37901: PPUSH
37902: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37906: LD_INT 35
37908: PPUSH
37909: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37913: LD_VAR 0 1
37917: PPUSH
37918: LD_VAR 0 2
37922: PPUSH
37923: LD_VAR 0 3
37927: PPUSH
37928: CALL 73686 0 3
37932: NOT
37933: IFFALSE 37937
// exit ;
37935: GO 38191
// until GetDistUnitXY ( unit , x , y ) < dist ;
37937: LD_VAR 0 1
37941: PPUSH
37942: LD_VAR 0 2
37946: PPUSH
37947: LD_VAR 0 3
37951: PPUSH
37952: CALL_OW 297
37956: PUSH
37957: LD_VAR 0 5
37961: LESS
37962: IFFALSE 37906
// end ; ComTurnXY ( unit , x , y ) ;
37964: LD_VAR 0 1
37968: PPUSH
37969: LD_VAR 0 2
37973: PPUSH
37974: LD_VAR 0 3
37978: PPUSH
37979: CALL_OW 118
// wait ( 5 ) ;
37983: LD_INT 5
37985: PPUSH
37986: CALL_OW 67
// _d := GetDir ( unit ) ;
37990: LD_ADDR_VAR 0 10
37994: PUSH
37995: LD_VAR 0 1
37999: PPUSH
38000: CALL_OW 254
38004: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38005: LD_ADDR_VAR 0 8
38009: PUSH
38010: LD_VAR 0 1
38014: PPUSH
38015: CALL_OW 250
38019: PPUSH
38020: LD_VAR 0 10
38024: PPUSH
38025: LD_VAR 0 5
38029: PPUSH
38030: CALL_OW 272
38034: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38035: LD_ADDR_VAR 0 9
38039: PUSH
38040: LD_VAR 0 1
38044: PPUSH
38045: CALL_OW 251
38049: PPUSH
38050: LD_VAR 0 10
38054: PPUSH
38055: LD_VAR 0 5
38059: PPUSH
38060: CALL_OW 273
38064: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38065: LD_VAR 0 8
38069: PPUSH
38070: LD_VAR 0 9
38074: PPUSH
38075: CALL_OW 488
38079: NOT
38080: IFFALSE 38084
// exit ;
38082: GO 38191
// ComAnimCustom ( unit , 1 ) ;
38084: LD_VAR 0 1
38088: PPUSH
38089: LD_INT 1
38091: PPUSH
38092: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38096: LD_VAR 0 8
38100: PPUSH
38101: LD_VAR 0 9
38105: PPUSH
38106: LD_VAR 0 6
38110: PPUSH
38111: LD_VAR 0 7
38115: PPUSH
38116: CALL_OW 330
// repeat wait ( 1 ) ;
38120: LD_INT 1
38122: PPUSH
38123: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
38127: LD_VAR 0 1
38131: PPUSH
38132: CALL_OW 316
38136: PUSH
38137: LD_VAR 0 1
38141: PPUSH
38142: CALL_OW 314
38146: OR
38147: PUSH
38148: LD_VAR 0 1
38152: PPUSH
38153: CALL_OW 302
38157: NOT
38158: OR
38159: PUSH
38160: LD_VAR 0 1
38164: PPUSH
38165: CALL_OW 301
38169: OR
38170: IFFALSE 38120
// RemoveSeeing ( _x , _y , side ) ;
38172: LD_VAR 0 8
38176: PPUSH
38177: LD_VAR 0 9
38181: PPUSH
38182: LD_VAR 0 6
38186: PPUSH
38187: CALL_OW 331
// end ; end_of_file
38191: LD_VAR 0 4
38195: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38196: LD_INT 0
38198: PPUSH
38199: PPUSH
// if exist_mode then
38200: LD_VAR 0 2
38204: IFFALSE 38229
// unit := CreateCharacter ( prefix & ident ) else
38206: LD_ADDR_VAR 0 5
38210: PUSH
38211: LD_VAR 0 3
38215: PUSH
38216: LD_VAR 0 1
38220: STR
38221: PPUSH
38222: CALL_OW 34
38226: ST_TO_ADDR
38227: GO 38244
// unit := NewCharacter ( ident ) ;
38229: LD_ADDR_VAR 0 5
38233: PUSH
38234: LD_VAR 0 1
38238: PPUSH
38239: CALL_OW 25
38243: ST_TO_ADDR
// result := unit ;
38244: LD_ADDR_VAR 0 4
38248: PUSH
38249: LD_VAR 0 5
38253: ST_TO_ADDR
// end ;
38254: LD_VAR 0 4
38258: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38259: LD_INT 0
38261: PPUSH
38262: PPUSH
// if not side or not nation then
38263: LD_VAR 0 1
38267: NOT
38268: PUSH
38269: LD_VAR 0 2
38273: NOT
38274: OR
38275: IFFALSE 38279
// exit ;
38277: GO 39047
// case nation of nation_american :
38279: LD_VAR 0 2
38283: PUSH
38284: LD_INT 1
38286: DOUBLE
38287: EQUAL
38288: IFTRUE 38292
38290: GO 38506
38292: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38293: LD_ADDR_VAR 0 4
38297: PUSH
38298: LD_INT 35
38300: PUSH
38301: LD_INT 45
38303: PUSH
38304: LD_INT 46
38306: PUSH
38307: LD_INT 47
38309: PUSH
38310: LD_INT 82
38312: PUSH
38313: LD_INT 83
38315: PUSH
38316: LD_INT 84
38318: PUSH
38319: LD_INT 85
38321: PUSH
38322: LD_INT 86
38324: PUSH
38325: LD_INT 1
38327: PUSH
38328: LD_INT 2
38330: PUSH
38331: LD_INT 6
38333: PUSH
38334: LD_INT 15
38336: PUSH
38337: LD_INT 16
38339: PUSH
38340: LD_INT 7
38342: PUSH
38343: LD_INT 12
38345: PUSH
38346: LD_INT 13
38348: PUSH
38349: LD_INT 10
38351: PUSH
38352: LD_INT 14
38354: PUSH
38355: LD_INT 20
38357: PUSH
38358: LD_INT 21
38360: PUSH
38361: LD_INT 22
38363: PUSH
38364: LD_INT 25
38366: PUSH
38367: LD_INT 32
38369: PUSH
38370: LD_INT 27
38372: PUSH
38373: LD_INT 36
38375: PUSH
38376: LD_INT 69
38378: PUSH
38379: LD_INT 39
38381: PUSH
38382: LD_INT 34
38384: PUSH
38385: LD_INT 40
38387: PUSH
38388: LD_INT 48
38390: PUSH
38391: LD_INT 49
38393: PUSH
38394: LD_INT 50
38396: PUSH
38397: LD_INT 51
38399: PUSH
38400: LD_INT 52
38402: PUSH
38403: LD_INT 53
38405: PUSH
38406: LD_INT 54
38408: PUSH
38409: LD_INT 55
38411: PUSH
38412: LD_INT 56
38414: PUSH
38415: LD_INT 57
38417: PUSH
38418: LD_INT 58
38420: PUSH
38421: LD_INT 59
38423: PUSH
38424: LD_INT 60
38426: PUSH
38427: LD_INT 61
38429: PUSH
38430: LD_INT 62
38432: PUSH
38433: LD_INT 80
38435: PUSH
38436: LD_INT 82
38438: PUSH
38439: LD_INT 83
38441: PUSH
38442: LD_INT 84
38444: PUSH
38445: LD_INT 85
38447: PUSH
38448: LD_INT 86
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: ST_TO_ADDR
38504: GO 38971
38506: LD_INT 2
38508: DOUBLE
38509: EQUAL
38510: IFTRUE 38514
38512: GO 38740
38514: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
38515: LD_ADDR_VAR 0 4
38519: PUSH
38520: LD_INT 35
38522: PUSH
38523: LD_INT 45
38525: PUSH
38526: LD_INT 46
38528: PUSH
38529: LD_INT 47
38531: PUSH
38532: LD_INT 82
38534: PUSH
38535: LD_INT 83
38537: PUSH
38538: LD_INT 84
38540: PUSH
38541: LD_INT 85
38543: PUSH
38544: LD_INT 87
38546: PUSH
38547: LD_INT 70
38549: PUSH
38550: LD_INT 1
38552: PUSH
38553: LD_INT 11
38555: PUSH
38556: LD_INT 3
38558: PUSH
38559: LD_INT 4
38561: PUSH
38562: LD_INT 5
38564: PUSH
38565: LD_INT 6
38567: PUSH
38568: LD_INT 15
38570: PUSH
38571: LD_INT 18
38573: PUSH
38574: LD_INT 7
38576: PUSH
38577: LD_INT 17
38579: PUSH
38580: LD_INT 8
38582: PUSH
38583: LD_INT 20
38585: PUSH
38586: LD_INT 21
38588: PUSH
38589: LD_INT 22
38591: PUSH
38592: LD_INT 72
38594: PUSH
38595: LD_INT 26
38597: PUSH
38598: LD_INT 69
38600: PUSH
38601: LD_INT 39
38603: PUSH
38604: LD_INT 40
38606: PUSH
38607: LD_INT 41
38609: PUSH
38610: LD_INT 42
38612: PUSH
38613: LD_INT 43
38615: PUSH
38616: LD_INT 48
38618: PUSH
38619: LD_INT 49
38621: PUSH
38622: LD_INT 50
38624: PUSH
38625: LD_INT 51
38627: PUSH
38628: LD_INT 52
38630: PUSH
38631: LD_INT 53
38633: PUSH
38634: LD_INT 54
38636: PUSH
38637: LD_INT 55
38639: PUSH
38640: LD_INT 56
38642: PUSH
38643: LD_INT 60
38645: PUSH
38646: LD_INT 61
38648: PUSH
38649: LD_INT 62
38651: PUSH
38652: LD_INT 66
38654: PUSH
38655: LD_INT 67
38657: PUSH
38658: LD_INT 68
38660: PUSH
38661: LD_INT 81
38663: PUSH
38664: LD_INT 82
38666: PUSH
38667: LD_INT 83
38669: PUSH
38670: LD_INT 84
38672: PUSH
38673: LD_INT 85
38675: PUSH
38676: LD_INT 87
38678: PUSH
38679: LD_INT 88
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: LIST
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: ST_TO_ADDR
38738: GO 38971
38740: LD_INT 3
38742: DOUBLE
38743: EQUAL
38744: IFTRUE 38748
38746: GO 38970
38748: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
38749: LD_ADDR_VAR 0 4
38753: PUSH
38754: LD_INT 46
38756: PUSH
38757: LD_INT 47
38759: PUSH
38760: LD_INT 1
38762: PUSH
38763: LD_INT 2
38765: PUSH
38766: LD_INT 82
38768: PUSH
38769: LD_INT 83
38771: PUSH
38772: LD_INT 84
38774: PUSH
38775: LD_INT 85
38777: PUSH
38778: LD_INT 86
38780: PUSH
38781: LD_INT 11
38783: PUSH
38784: LD_INT 9
38786: PUSH
38787: LD_INT 20
38789: PUSH
38790: LD_INT 19
38792: PUSH
38793: LD_INT 21
38795: PUSH
38796: LD_INT 24
38798: PUSH
38799: LD_INT 22
38801: PUSH
38802: LD_INT 25
38804: PUSH
38805: LD_INT 28
38807: PUSH
38808: LD_INT 29
38810: PUSH
38811: LD_INT 30
38813: PUSH
38814: LD_INT 31
38816: PUSH
38817: LD_INT 37
38819: PUSH
38820: LD_INT 38
38822: PUSH
38823: LD_INT 32
38825: PUSH
38826: LD_INT 27
38828: PUSH
38829: LD_INT 33
38831: PUSH
38832: LD_INT 69
38834: PUSH
38835: LD_INT 39
38837: PUSH
38838: LD_INT 34
38840: PUSH
38841: LD_INT 40
38843: PUSH
38844: LD_INT 71
38846: PUSH
38847: LD_INT 23
38849: PUSH
38850: LD_INT 44
38852: PUSH
38853: LD_INT 48
38855: PUSH
38856: LD_INT 49
38858: PUSH
38859: LD_INT 50
38861: PUSH
38862: LD_INT 51
38864: PUSH
38865: LD_INT 52
38867: PUSH
38868: LD_INT 53
38870: PUSH
38871: LD_INT 54
38873: PUSH
38874: LD_INT 55
38876: PUSH
38877: LD_INT 56
38879: PUSH
38880: LD_INT 57
38882: PUSH
38883: LD_INT 58
38885: PUSH
38886: LD_INT 59
38888: PUSH
38889: LD_INT 63
38891: PUSH
38892: LD_INT 64
38894: PUSH
38895: LD_INT 65
38897: PUSH
38898: LD_INT 82
38900: PUSH
38901: LD_INT 83
38903: PUSH
38904: LD_INT 84
38906: PUSH
38907: LD_INT 85
38909: PUSH
38910: LD_INT 86
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: ST_TO_ADDR
38968: GO 38971
38970: POP
// if state > - 1 and state < 3 then
38971: LD_VAR 0 3
38975: PUSH
38976: LD_INT 1
38978: NEG
38979: GREATER
38980: PUSH
38981: LD_VAR 0 3
38985: PUSH
38986: LD_INT 3
38988: LESS
38989: AND
38990: IFFALSE 39047
// for i in result do
38992: LD_ADDR_VAR 0 5
38996: PUSH
38997: LD_VAR 0 4
39001: PUSH
39002: FOR_IN
39003: IFFALSE 39045
// if GetTech ( i , side ) <> state then
39005: LD_VAR 0 5
39009: PPUSH
39010: LD_VAR 0 1
39014: PPUSH
39015: CALL_OW 321
39019: PUSH
39020: LD_VAR 0 3
39024: NONEQUAL
39025: IFFALSE 39043
// result := result diff i ;
39027: LD_ADDR_VAR 0 4
39031: PUSH
39032: LD_VAR 0 4
39036: PUSH
39037: LD_VAR 0 5
39041: DIFF
39042: ST_TO_ADDR
39043: GO 39002
39045: POP
39046: POP
// end ;
39047: LD_VAR 0 4
39051: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39052: LD_INT 0
39054: PPUSH
39055: PPUSH
39056: PPUSH
// result := true ;
39057: LD_ADDR_VAR 0 3
39061: PUSH
39062: LD_INT 1
39064: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39065: LD_ADDR_VAR 0 5
39069: PUSH
39070: LD_VAR 0 2
39074: PPUSH
39075: CALL_OW 480
39079: ST_TO_ADDR
// if not tmp then
39080: LD_VAR 0 5
39084: NOT
39085: IFFALSE 39089
// exit ;
39087: GO 39138
// for i in tmp do
39089: LD_ADDR_VAR 0 4
39093: PUSH
39094: LD_VAR 0 5
39098: PUSH
39099: FOR_IN
39100: IFFALSE 39136
// if GetTech ( i , side ) <> state_researched then
39102: LD_VAR 0 4
39106: PPUSH
39107: LD_VAR 0 1
39111: PPUSH
39112: CALL_OW 321
39116: PUSH
39117: LD_INT 2
39119: NONEQUAL
39120: IFFALSE 39134
// begin result := false ;
39122: LD_ADDR_VAR 0 3
39126: PUSH
39127: LD_INT 0
39129: ST_TO_ADDR
// exit ;
39130: POP
39131: POP
39132: GO 39138
// end ;
39134: GO 39099
39136: POP
39137: POP
// end ;
39138: LD_VAR 0 3
39142: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39143: LD_INT 0
39145: PPUSH
39146: PPUSH
39147: PPUSH
39148: PPUSH
39149: PPUSH
39150: PPUSH
39151: PPUSH
39152: PPUSH
39153: PPUSH
39154: PPUSH
39155: PPUSH
39156: PPUSH
39157: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39158: LD_VAR 0 1
39162: NOT
39163: PUSH
39164: LD_VAR 0 1
39168: PPUSH
39169: CALL_OW 257
39173: PUSH
39174: LD_INT 9
39176: NONEQUAL
39177: OR
39178: IFFALSE 39182
// exit ;
39180: GO 39755
// side := GetSide ( unit ) ;
39182: LD_ADDR_VAR 0 9
39186: PUSH
39187: LD_VAR 0 1
39191: PPUSH
39192: CALL_OW 255
39196: ST_TO_ADDR
// tech_space := tech_spacanom ;
39197: LD_ADDR_VAR 0 12
39201: PUSH
39202: LD_INT 29
39204: ST_TO_ADDR
// tech_time := tech_taurad ;
39205: LD_ADDR_VAR 0 13
39209: PUSH
39210: LD_INT 28
39212: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39213: LD_ADDR_VAR 0 11
39217: PUSH
39218: LD_VAR 0 1
39222: PPUSH
39223: CALL_OW 310
39227: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39228: LD_VAR 0 11
39232: PPUSH
39233: CALL_OW 247
39237: PUSH
39238: LD_INT 2
39240: EQUAL
39241: IFFALSE 39245
// exit ;
39243: GO 39755
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39245: LD_ADDR_VAR 0 8
39249: PUSH
39250: LD_INT 81
39252: PUSH
39253: LD_VAR 0 9
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: LD_INT 3
39264: PUSH
39265: LD_INT 21
39267: PUSH
39268: LD_INT 3
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PPUSH
39283: CALL_OW 69
39287: ST_TO_ADDR
// if not tmp then
39288: LD_VAR 0 8
39292: NOT
39293: IFFALSE 39297
// exit ;
39295: GO 39755
// if in_unit then
39297: LD_VAR 0 11
39301: IFFALSE 39325
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39303: LD_ADDR_VAR 0 10
39307: PUSH
39308: LD_VAR 0 8
39312: PPUSH
39313: LD_VAR 0 11
39317: PPUSH
39318: CALL_OW 74
39322: ST_TO_ADDR
39323: GO 39345
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39325: LD_ADDR_VAR 0 10
39329: PUSH
39330: LD_VAR 0 8
39334: PPUSH
39335: LD_VAR 0 1
39339: PPUSH
39340: CALL_OW 74
39344: ST_TO_ADDR
// if not enemy then
39345: LD_VAR 0 10
39349: NOT
39350: IFFALSE 39354
// exit ;
39352: GO 39755
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39354: LD_VAR 0 11
39358: PUSH
39359: LD_VAR 0 11
39363: PPUSH
39364: LD_VAR 0 10
39368: PPUSH
39369: CALL_OW 296
39373: PUSH
39374: LD_INT 13
39376: GREATER
39377: AND
39378: PUSH
39379: LD_VAR 0 1
39383: PPUSH
39384: LD_VAR 0 10
39388: PPUSH
39389: CALL_OW 296
39393: PUSH
39394: LD_INT 12
39396: GREATER
39397: OR
39398: IFFALSE 39402
// exit ;
39400: GO 39755
// missile := [ 1 ] ;
39402: LD_ADDR_VAR 0 14
39406: PUSH
39407: LD_INT 1
39409: PUSH
39410: EMPTY
39411: LIST
39412: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39413: LD_VAR 0 9
39417: PPUSH
39418: LD_VAR 0 12
39422: PPUSH
39423: CALL_OW 325
39427: IFFALSE 39456
// missile := Replace ( missile , missile + 1 , 2 ) ;
39429: LD_ADDR_VAR 0 14
39433: PUSH
39434: LD_VAR 0 14
39438: PPUSH
39439: LD_VAR 0 14
39443: PUSH
39444: LD_INT 1
39446: PLUS
39447: PPUSH
39448: LD_INT 2
39450: PPUSH
39451: CALL_OW 1
39455: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39456: LD_VAR 0 9
39460: PPUSH
39461: LD_VAR 0 13
39465: PPUSH
39466: CALL_OW 325
39470: PUSH
39471: LD_VAR 0 10
39475: PPUSH
39476: CALL_OW 255
39480: PPUSH
39481: LD_VAR 0 13
39485: PPUSH
39486: CALL_OW 325
39490: NOT
39491: AND
39492: IFFALSE 39521
// missile := Replace ( missile , missile + 1 , 3 ) ;
39494: LD_ADDR_VAR 0 14
39498: PUSH
39499: LD_VAR 0 14
39503: PPUSH
39504: LD_VAR 0 14
39508: PUSH
39509: LD_INT 1
39511: PLUS
39512: PPUSH
39513: LD_INT 3
39515: PPUSH
39516: CALL_OW 1
39520: ST_TO_ADDR
// if missile < 2 then
39521: LD_VAR 0 14
39525: PUSH
39526: LD_INT 2
39528: LESS
39529: IFFALSE 39533
// exit ;
39531: GO 39755
// x := GetX ( enemy ) ;
39533: LD_ADDR_VAR 0 4
39537: PUSH
39538: LD_VAR 0 10
39542: PPUSH
39543: CALL_OW 250
39547: ST_TO_ADDR
// y := GetY ( enemy ) ;
39548: LD_ADDR_VAR 0 5
39552: PUSH
39553: LD_VAR 0 10
39557: PPUSH
39558: CALL_OW 251
39562: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39563: LD_ADDR_VAR 0 6
39567: PUSH
39568: LD_VAR 0 4
39572: PUSH
39573: LD_INT 1
39575: NEG
39576: PPUSH
39577: LD_INT 1
39579: PPUSH
39580: CALL_OW 12
39584: PLUS
39585: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39586: LD_ADDR_VAR 0 7
39590: PUSH
39591: LD_VAR 0 5
39595: PUSH
39596: LD_INT 1
39598: NEG
39599: PPUSH
39600: LD_INT 1
39602: PPUSH
39603: CALL_OW 12
39607: PLUS
39608: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39609: LD_VAR 0 6
39613: PPUSH
39614: LD_VAR 0 7
39618: PPUSH
39619: CALL_OW 488
39623: NOT
39624: IFFALSE 39646
// begin _x := x ;
39626: LD_ADDR_VAR 0 6
39630: PUSH
39631: LD_VAR 0 4
39635: ST_TO_ADDR
// _y := y ;
39636: LD_ADDR_VAR 0 7
39640: PUSH
39641: LD_VAR 0 5
39645: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39646: LD_ADDR_VAR 0 3
39650: PUSH
39651: LD_INT 1
39653: PPUSH
39654: LD_VAR 0 14
39658: PPUSH
39659: CALL_OW 12
39663: ST_TO_ADDR
// case i of 1 :
39664: LD_VAR 0 3
39668: PUSH
39669: LD_INT 1
39671: DOUBLE
39672: EQUAL
39673: IFTRUE 39677
39675: GO 39694
39677: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39678: LD_VAR 0 1
39682: PPUSH
39683: LD_VAR 0 10
39687: PPUSH
39688: CALL_OW 115
39692: GO 39755
39694: LD_INT 2
39696: DOUBLE
39697: EQUAL
39698: IFTRUE 39702
39700: GO 39724
39702: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39703: LD_VAR 0 1
39707: PPUSH
39708: LD_VAR 0 6
39712: PPUSH
39713: LD_VAR 0 7
39717: PPUSH
39718: CALL_OW 153
39722: GO 39755
39724: LD_INT 3
39726: DOUBLE
39727: EQUAL
39728: IFTRUE 39732
39730: GO 39754
39732: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39733: LD_VAR 0 1
39737: PPUSH
39738: LD_VAR 0 6
39742: PPUSH
39743: LD_VAR 0 7
39747: PPUSH
39748: CALL_OW 154
39752: GO 39755
39754: POP
// end ;
39755: LD_VAR 0 2
39759: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39760: LD_INT 0
39762: PPUSH
39763: PPUSH
39764: PPUSH
39765: PPUSH
39766: PPUSH
39767: PPUSH
// if not unit or not building then
39768: LD_VAR 0 1
39772: NOT
39773: PUSH
39774: LD_VAR 0 2
39778: NOT
39779: OR
39780: IFFALSE 39784
// exit ;
39782: GO 39942
// x := GetX ( building ) ;
39784: LD_ADDR_VAR 0 5
39788: PUSH
39789: LD_VAR 0 2
39793: PPUSH
39794: CALL_OW 250
39798: ST_TO_ADDR
// y := GetY ( building ) ;
39799: LD_ADDR_VAR 0 6
39803: PUSH
39804: LD_VAR 0 2
39808: PPUSH
39809: CALL_OW 251
39813: ST_TO_ADDR
// for i = 0 to 5 do
39814: LD_ADDR_VAR 0 4
39818: PUSH
39819: DOUBLE
39820: LD_INT 0
39822: DEC
39823: ST_TO_ADDR
39824: LD_INT 5
39826: PUSH
39827: FOR_TO
39828: IFFALSE 39940
// begin _x := ShiftX ( x , i , 3 ) ;
39830: LD_ADDR_VAR 0 7
39834: PUSH
39835: LD_VAR 0 5
39839: PPUSH
39840: LD_VAR 0 4
39844: PPUSH
39845: LD_INT 3
39847: PPUSH
39848: CALL_OW 272
39852: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39853: LD_ADDR_VAR 0 8
39857: PUSH
39858: LD_VAR 0 6
39862: PPUSH
39863: LD_VAR 0 4
39867: PPUSH
39868: LD_INT 3
39870: PPUSH
39871: CALL_OW 273
39875: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39876: LD_VAR 0 7
39880: PPUSH
39881: LD_VAR 0 8
39885: PPUSH
39886: CALL_OW 488
39890: NOT
39891: IFFALSE 39895
// continue ;
39893: GO 39827
// if HexInfo ( _x , _y ) = 0 then
39895: LD_VAR 0 7
39899: PPUSH
39900: LD_VAR 0 8
39904: PPUSH
39905: CALL_OW 428
39909: PUSH
39910: LD_INT 0
39912: EQUAL
39913: IFFALSE 39938
// begin ComMoveXY ( unit , _x , _y ) ;
39915: LD_VAR 0 1
39919: PPUSH
39920: LD_VAR 0 7
39924: PPUSH
39925: LD_VAR 0 8
39929: PPUSH
39930: CALL_OW 111
// exit ;
39934: POP
39935: POP
39936: GO 39942
// end ; end ;
39938: GO 39827
39940: POP
39941: POP
// end ;
39942: LD_VAR 0 3
39946: RET
// export function ScanBase ( side , base_area ) ; begin
39947: LD_INT 0
39949: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39950: LD_ADDR_VAR 0 3
39954: PUSH
39955: LD_VAR 0 2
39959: PPUSH
39960: LD_INT 81
39962: PUSH
39963: LD_VAR 0 1
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PPUSH
39972: CALL_OW 70
39976: ST_TO_ADDR
// end ;
39977: LD_VAR 0 3
39981: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39982: LD_INT 0
39984: PPUSH
39985: PPUSH
39986: PPUSH
39987: PPUSH
// result := false ;
39988: LD_ADDR_VAR 0 2
39992: PUSH
39993: LD_INT 0
39995: ST_TO_ADDR
// side := GetSide ( unit ) ;
39996: LD_ADDR_VAR 0 3
40000: PUSH
40001: LD_VAR 0 1
40005: PPUSH
40006: CALL_OW 255
40010: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40011: LD_ADDR_VAR 0 4
40015: PUSH
40016: LD_VAR 0 1
40020: PPUSH
40021: CALL_OW 248
40025: ST_TO_ADDR
// case nat of 1 :
40026: LD_VAR 0 4
40030: PUSH
40031: LD_INT 1
40033: DOUBLE
40034: EQUAL
40035: IFTRUE 40039
40037: GO 40050
40039: POP
// tech := tech_lassight ; 2 :
40040: LD_ADDR_VAR 0 5
40044: PUSH
40045: LD_INT 12
40047: ST_TO_ADDR
40048: GO 40089
40050: LD_INT 2
40052: DOUBLE
40053: EQUAL
40054: IFTRUE 40058
40056: GO 40069
40058: POP
// tech := tech_mortar ; 3 :
40059: LD_ADDR_VAR 0 5
40063: PUSH
40064: LD_INT 41
40066: ST_TO_ADDR
40067: GO 40089
40069: LD_INT 3
40071: DOUBLE
40072: EQUAL
40073: IFTRUE 40077
40075: GO 40088
40077: POP
// tech := tech_bazooka ; end ;
40078: LD_ADDR_VAR 0 5
40082: PUSH
40083: LD_INT 44
40085: ST_TO_ADDR
40086: GO 40089
40088: POP
// if Researched ( side , tech ) then
40089: LD_VAR 0 3
40093: PPUSH
40094: LD_VAR 0 5
40098: PPUSH
40099: CALL_OW 325
40103: IFFALSE 40130
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40105: LD_ADDR_VAR 0 2
40109: PUSH
40110: LD_INT 5
40112: PUSH
40113: LD_INT 8
40115: PUSH
40116: LD_INT 9
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: LIST
40123: PUSH
40124: LD_VAR 0 4
40128: ARRAY
40129: ST_TO_ADDR
// end ;
40130: LD_VAR 0 2
40134: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40135: LD_INT 0
40137: PPUSH
40138: PPUSH
40139: PPUSH
// if not mines then
40140: LD_VAR 0 2
40144: NOT
40145: IFFALSE 40149
// exit ;
40147: GO 40293
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40149: LD_ADDR_VAR 0 5
40153: PUSH
40154: LD_INT 81
40156: PUSH
40157: LD_VAR 0 1
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: LD_INT 3
40168: PUSH
40169: LD_INT 21
40171: PUSH
40172: LD_INT 3
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PPUSH
40187: CALL_OW 69
40191: ST_TO_ADDR
// for i in mines do
40192: LD_ADDR_VAR 0 4
40196: PUSH
40197: LD_VAR 0 2
40201: PUSH
40202: FOR_IN
40203: IFFALSE 40291
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40205: LD_VAR 0 4
40209: PUSH
40210: LD_INT 1
40212: ARRAY
40213: PPUSH
40214: LD_VAR 0 4
40218: PUSH
40219: LD_INT 2
40221: ARRAY
40222: PPUSH
40223: CALL_OW 458
40227: NOT
40228: IFFALSE 40232
// continue ;
40230: GO 40202
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40232: LD_VAR 0 4
40236: PUSH
40237: LD_INT 1
40239: ARRAY
40240: PPUSH
40241: LD_VAR 0 4
40245: PUSH
40246: LD_INT 2
40248: ARRAY
40249: PPUSH
40250: CALL_OW 428
40254: PUSH
40255: LD_VAR 0 5
40259: IN
40260: IFFALSE 40289
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40262: LD_VAR 0 4
40266: PUSH
40267: LD_INT 1
40269: ARRAY
40270: PPUSH
40271: LD_VAR 0 4
40275: PUSH
40276: LD_INT 2
40278: ARRAY
40279: PPUSH
40280: LD_VAR 0 1
40284: PPUSH
40285: CALL_OW 456
// end ;
40289: GO 40202
40291: POP
40292: POP
// end ;
40293: LD_VAR 0 3
40297: RET
// export function Count ( array ) ; var i ; begin
40298: LD_INT 0
40300: PPUSH
40301: PPUSH
// result := 0 ;
40302: LD_ADDR_VAR 0 2
40306: PUSH
40307: LD_INT 0
40309: ST_TO_ADDR
// for i in array do
40310: LD_ADDR_VAR 0 3
40314: PUSH
40315: LD_VAR 0 1
40319: PUSH
40320: FOR_IN
40321: IFFALSE 40345
// if i then
40323: LD_VAR 0 3
40327: IFFALSE 40343
// result := result + 1 ;
40329: LD_ADDR_VAR 0 2
40333: PUSH
40334: LD_VAR 0 2
40338: PUSH
40339: LD_INT 1
40341: PLUS
40342: ST_TO_ADDR
40343: GO 40320
40345: POP
40346: POP
// end ;
40347: LD_VAR 0 2
40351: RET
// export function IsEmpty ( building ) ; begin
40352: LD_INT 0
40354: PPUSH
// if not building then
40355: LD_VAR 0 1
40359: NOT
40360: IFFALSE 40364
// exit ;
40362: GO 40407
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40364: LD_ADDR_VAR 0 2
40368: PUSH
40369: LD_VAR 0 1
40373: PUSH
40374: LD_INT 22
40376: PUSH
40377: LD_VAR 0 1
40381: PPUSH
40382: CALL_OW 255
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 58
40393: PUSH
40394: EMPTY
40395: LIST
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PPUSH
40401: CALL_OW 69
40405: IN
40406: ST_TO_ADDR
// end ;
40407: LD_VAR 0 2
40411: RET
// export function IsNotFull ( building ) ; begin
40412: LD_INT 0
40414: PPUSH
// if not building then
40415: LD_VAR 0 1
40419: NOT
40420: IFFALSE 40424
// exit ;
40422: GO 40443
// result := UnitsInside ( building ) < 6 ;
40424: LD_ADDR_VAR 0 2
40428: PUSH
40429: LD_VAR 0 1
40433: PPUSH
40434: CALL_OW 313
40438: PUSH
40439: LD_INT 6
40441: LESS
40442: ST_TO_ADDR
// end ;
40443: LD_VAR 0 2
40447: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40448: LD_INT 0
40450: PPUSH
40451: PPUSH
40452: PPUSH
40453: PPUSH
// tmp := [ ] ;
40454: LD_ADDR_VAR 0 3
40458: PUSH
40459: EMPTY
40460: ST_TO_ADDR
// list := [ ] ;
40461: LD_ADDR_VAR 0 5
40465: PUSH
40466: EMPTY
40467: ST_TO_ADDR
// for i = 16 to 25 do
40468: LD_ADDR_VAR 0 4
40472: PUSH
40473: DOUBLE
40474: LD_INT 16
40476: DEC
40477: ST_TO_ADDR
40478: LD_INT 25
40480: PUSH
40481: FOR_TO
40482: IFFALSE 40555
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40484: LD_ADDR_VAR 0 3
40488: PUSH
40489: LD_VAR 0 3
40493: PUSH
40494: LD_INT 22
40496: PUSH
40497: LD_VAR 0 1
40501: PPUSH
40502: CALL_OW 255
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 91
40513: PUSH
40514: LD_VAR 0 1
40518: PUSH
40519: LD_INT 6
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 30
40529: PUSH
40530: LD_VAR 0 4
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: LIST
40543: PUSH
40544: EMPTY
40545: LIST
40546: PPUSH
40547: CALL_OW 69
40551: ADD
40552: ST_TO_ADDR
40553: GO 40481
40555: POP
40556: POP
// for i = 1 to tmp do
40557: LD_ADDR_VAR 0 4
40561: PUSH
40562: DOUBLE
40563: LD_INT 1
40565: DEC
40566: ST_TO_ADDR
40567: LD_VAR 0 3
40571: PUSH
40572: FOR_TO
40573: IFFALSE 40661
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40575: LD_ADDR_VAR 0 5
40579: PUSH
40580: LD_VAR 0 5
40584: PUSH
40585: LD_VAR 0 3
40589: PUSH
40590: LD_VAR 0 4
40594: ARRAY
40595: PPUSH
40596: CALL_OW 266
40600: PUSH
40601: LD_VAR 0 3
40605: PUSH
40606: LD_VAR 0 4
40610: ARRAY
40611: PPUSH
40612: CALL_OW 250
40616: PUSH
40617: LD_VAR 0 3
40621: PUSH
40622: LD_VAR 0 4
40626: ARRAY
40627: PPUSH
40628: CALL_OW 251
40632: PUSH
40633: LD_VAR 0 3
40637: PUSH
40638: LD_VAR 0 4
40642: ARRAY
40643: PPUSH
40644: CALL_OW 254
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: PUSH
40655: EMPTY
40656: LIST
40657: ADD
40658: ST_TO_ADDR
40659: GO 40572
40661: POP
40662: POP
// result := list ;
40663: LD_ADDR_VAR 0 2
40667: PUSH
40668: LD_VAR 0 5
40672: ST_TO_ADDR
// end ;
40673: LD_VAR 0 2
40677: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
40678: LD_INT 0
40680: PPUSH
40681: PPUSH
40682: PPUSH
40683: PPUSH
40684: PPUSH
40685: PPUSH
40686: PPUSH
// if not factory then
40687: LD_VAR 0 1
40691: NOT
40692: IFFALSE 40696
// exit ;
40694: GO 41289
// if control = control_apeman then
40696: LD_VAR 0 4
40700: PUSH
40701: LD_INT 5
40703: EQUAL
40704: IFFALSE 40813
// begin tmp := UnitsInside ( factory ) ;
40706: LD_ADDR_VAR 0 8
40710: PUSH
40711: LD_VAR 0 1
40715: PPUSH
40716: CALL_OW 313
40720: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
40721: LD_VAR 0 8
40725: PPUSH
40726: LD_INT 25
40728: PUSH
40729: LD_INT 12
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PPUSH
40736: CALL_OW 72
40740: NOT
40741: IFFALSE 40751
// control := control_manual ;
40743: LD_ADDR_VAR 0 4
40747: PUSH
40748: LD_INT 1
40750: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40751: LD_ADDR_VAR 0 8
40755: PUSH
40756: LD_VAR 0 1
40760: PPUSH
40761: CALL 40448 0 1
40765: ST_TO_ADDR
// if tmp then
40766: LD_VAR 0 8
40770: IFFALSE 40813
// begin for i in tmp do
40772: LD_ADDR_VAR 0 7
40776: PUSH
40777: LD_VAR 0 8
40781: PUSH
40782: FOR_IN
40783: IFFALSE 40811
// if i [ 1 ] = b_ext_radio then
40785: LD_VAR 0 7
40789: PUSH
40790: LD_INT 1
40792: ARRAY
40793: PUSH
40794: LD_INT 22
40796: EQUAL
40797: IFFALSE 40809
// begin control := control_remote ;
40799: LD_ADDR_VAR 0 4
40803: PUSH
40804: LD_INT 2
40806: ST_TO_ADDR
// break ;
40807: GO 40811
// end ;
40809: GO 40782
40811: POP
40812: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40813: LD_VAR 0 1
40817: PPUSH
40818: LD_VAR 0 2
40822: PPUSH
40823: LD_VAR 0 3
40827: PPUSH
40828: LD_VAR 0 4
40832: PPUSH
40833: LD_VAR 0 5
40837: PPUSH
40838: CALL_OW 448
40842: IFFALSE 40877
// begin result := [ chassis , engine , control , weapon ] ;
40844: LD_ADDR_VAR 0 6
40848: PUSH
40849: LD_VAR 0 2
40853: PUSH
40854: LD_VAR 0 3
40858: PUSH
40859: LD_VAR 0 4
40863: PUSH
40864: LD_VAR 0 5
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: ST_TO_ADDR
// exit ;
40875: GO 41289
// end ; _chassis := AvailableChassisList ( factory ) ;
40877: LD_ADDR_VAR 0 9
40881: PUSH
40882: LD_VAR 0 1
40886: PPUSH
40887: CALL_OW 475
40891: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40892: LD_ADDR_VAR 0 11
40896: PUSH
40897: LD_VAR 0 1
40901: PPUSH
40902: CALL_OW 476
40906: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40907: LD_ADDR_VAR 0 12
40911: PUSH
40912: LD_VAR 0 1
40916: PPUSH
40917: CALL_OW 477
40921: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40922: LD_ADDR_VAR 0 10
40926: PUSH
40927: LD_VAR 0 1
40931: PPUSH
40932: CALL_OW 478
40936: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40937: LD_VAR 0 9
40941: NOT
40942: PUSH
40943: LD_VAR 0 11
40947: NOT
40948: OR
40949: PUSH
40950: LD_VAR 0 12
40954: NOT
40955: OR
40956: PUSH
40957: LD_VAR 0 10
40961: NOT
40962: OR
40963: IFFALSE 40998
// begin result := [ chassis , engine , control , weapon ] ;
40965: LD_ADDR_VAR 0 6
40969: PUSH
40970: LD_VAR 0 2
40974: PUSH
40975: LD_VAR 0 3
40979: PUSH
40980: LD_VAR 0 4
40984: PUSH
40985: LD_VAR 0 5
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: ST_TO_ADDR
// exit ;
40996: GO 41289
// end ; if not chassis in _chassis then
40998: LD_VAR 0 2
41002: PUSH
41003: LD_VAR 0 9
41007: IN
41008: NOT
41009: IFFALSE 41035
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41011: LD_ADDR_VAR 0 2
41015: PUSH
41016: LD_VAR 0 9
41020: PUSH
41021: LD_INT 1
41023: PPUSH
41024: LD_VAR 0 9
41028: PPUSH
41029: CALL_OW 12
41033: ARRAY
41034: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41035: LD_VAR 0 2
41039: PPUSH
41040: LD_VAR 0 3
41044: PPUSH
41045: CALL 41294 0 2
41049: NOT
41050: IFFALSE 41109
// repeat engine := _engine [ 1 ] ;
41052: LD_ADDR_VAR 0 3
41056: PUSH
41057: LD_VAR 0 11
41061: PUSH
41062: LD_INT 1
41064: ARRAY
41065: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41066: LD_ADDR_VAR 0 11
41070: PUSH
41071: LD_VAR 0 11
41075: PPUSH
41076: LD_INT 1
41078: PPUSH
41079: CALL_OW 3
41083: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41084: LD_VAR 0 2
41088: PPUSH
41089: LD_VAR 0 3
41093: PPUSH
41094: CALL 41294 0 2
41098: PUSH
41099: LD_VAR 0 11
41103: PUSH
41104: EMPTY
41105: EQUAL
41106: OR
41107: IFFALSE 41052
// if not control in _control then
41109: LD_VAR 0 4
41113: PUSH
41114: LD_VAR 0 12
41118: IN
41119: NOT
41120: IFFALSE 41146
// control := _control [ rand ( 1 , _control ) ] ;
41122: LD_ADDR_VAR 0 4
41126: PUSH
41127: LD_VAR 0 12
41131: PUSH
41132: LD_INT 1
41134: PPUSH
41135: LD_VAR 0 12
41139: PPUSH
41140: CALL_OW 12
41144: ARRAY
41145: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41146: LD_VAR 0 2
41150: PPUSH
41151: LD_VAR 0 5
41155: PPUSH
41156: CALL 41514 0 2
41160: NOT
41161: IFFALSE 41220
// repeat weapon := _weapon [ 1 ] ;
41163: LD_ADDR_VAR 0 5
41167: PUSH
41168: LD_VAR 0 10
41172: PUSH
41173: LD_INT 1
41175: ARRAY
41176: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41177: LD_ADDR_VAR 0 10
41181: PUSH
41182: LD_VAR 0 10
41186: PPUSH
41187: LD_INT 1
41189: PPUSH
41190: CALL_OW 3
41194: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41195: LD_VAR 0 2
41199: PPUSH
41200: LD_VAR 0 5
41204: PPUSH
41205: CALL 41514 0 2
41209: PUSH
41210: LD_VAR 0 10
41214: PUSH
41215: EMPTY
41216: EQUAL
41217: OR
41218: IFFALSE 41163
// result := [ ] ;
41220: LD_ADDR_VAR 0 6
41224: PUSH
41225: EMPTY
41226: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41227: LD_VAR 0 1
41231: PPUSH
41232: LD_VAR 0 2
41236: PPUSH
41237: LD_VAR 0 3
41241: PPUSH
41242: LD_VAR 0 4
41246: PPUSH
41247: LD_VAR 0 5
41251: PPUSH
41252: CALL_OW 448
41256: IFFALSE 41289
// result := [ chassis , engine , control , weapon ] ;
41258: LD_ADDR_VAR 0 6
41262: PUSH
41263: LD_VAR 0 2
41267: PUSH
41268: LD_VAR 0 3
41272: PUSH
41273: LD_VAR 0 4
41277: PUSH
41278: LD_VAR 0 5
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: ST_TO_ADDR
// end ;
41289: LD_VAR 0 6
41293: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41294: LD_INT 0
41296: PPUSH
// if not chassis or not engine then
41297: LD_VAR 0 1
41301: NOT
41302: PUSH
41303: LD_VAR 0 2
41307: NOT
41308: OR
41309: IFFALSE 41313
// exit ;
41311: GO 41509
// case engine of engine_solar :
41313: LD_VAR 0 2
41317: PUSH
41318: LD_INT 2
41320: DOUBLE
41321: EQUAL
41322: IFTRUE 41326
41324: GO 41364
41326: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41327: LD_ADDR_VAR 0 3
41331: PUSH
41332: LD_INT 11
41334: PUSH
41335: LD_INT 12
41337: PUSH
41338: LD_INT 13
41340: PUSH
41341: LD_INT 14
41343: PUSH
41344: LD_INT 1
41346: PUSH
41347: LD_INT 2
41349: PUSH
41350: LD_INT 3
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: ST_TO_ADDR
41362: GO 41493
41364: LD_INT 1
41366: DOUBLE
41367: EQUAL
41368: IFTRUE 41372
41370: GO 41434
41372: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41373: LD_ADDR_VAR 0 3
41377: PUSH
41378: LD_INT 11
41380: PUSH
41381: LD_INT 12
41383: PUSH
41384: LD_INT 13
41386: PUSH
41387: LD_INT 14
41389: PUSH
41390: LD_INT 1
41392: PUSH
41393: LD_INT 2
41395: PUSH
41396: LD_INT 3
41398: PUSH
41399: LD_INT 4
41401: PUSH
41402: LD_INT 5
41404: PUSH
41405: LD_INT 21
41407: PUSH
41408: LD_INT 23
41410: PUSH
41411: LD_INT 22
41413: PUSH
41414: LD_INT 24
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: ST_TO_ADDR
41432: GO 41493
41434: LD_INT 3
41436: DOUBLE
41437: EQUAL
41438: IFTRUE 41442
41440: GO 41492
41442: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41443: LD_ADDR_VAR 0 3
41447: PUSH
41448: LD_INT 13
41450: PUSH
41451: LD_INT 14
41453: PUSH
41454: LD_INT 2
41456: PUSH
41457: LD_INT 3
41459: PUSH
41460: LD_INT 4
41462: PUSH
41463: LD_INT 5
41465: PUSH
41466: LD_INT 21
41468: PUSH
41469: LD_INT 22
41471: PUSH
41472: LD_INT 23
41474: PUSH
41475: LD_INT 24
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: ST_TO_ADDR
41490: GO 41493
41492: POP
// result := ( chassis in result ) ;
41493: LD_ADDR_VAR 0 3
41497: PUSH
41498: LD_VAR 0 1
41502: PUSH
41503: LD_VAR 0 3
41507: IN
41508: ST_TO_ADDR
// end ;
41509: LD_VAR 0 3
41513: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41514: LD_INT 0
41516: PPUSH
// if not chassis or not weapon then
41517: LD_VAR 0 1
41521: NOT
41522: PUSH
41523: LD_VAR 0 2
41527: NOT
41528: OR
41529: IFFALSE 41533
// exit ;
41531: GO 42595
// case weapon of us_machine_gun :
41533: LD_VAR 0 2
41537: PUSH
41538: LD_INT 2
41540: DOUBLE
41541: EQUAL
41542: IFTRUE 41546
41544: GO 41576
41546: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41547: LD_ADDR_VAR 0 3
41551: PUSH
41552: LD_INT 1
41554: PUSH
41555: LD_INT 2
41557: PUSH
41558: LD_INT 3
41560: PUSH
41561: LD_INT 4
41563: PUSH
41564: LD_INT 5
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: ST_TO_ADDR
41574: GO 42579
41576: LD_INT 3
41578: DOUBLE
41579: EQUAL
41580: IFTRUE 41584
41582: GO 41614
41584: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41585: LD_ADDR_VAR 0 3
41589: PUSH
41590: LD_INT 1
41592: PUSH
41593: LD_INT 2
41595: PUSH
41596: LD_INT 3
41598: PUSH
41599: LD_INT 4
41601: PUSH
41602: LD_INT 5
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: ST_TO_ADDR
41612: GO 42579
41614: LD_INT 11
41616: DOUBLE
41617: EQUAL
41618: IFTRUE 41622
41620: GO 41652
41622: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
41623: LD_ADDR_VAR 0 3
41627: PUSH
41628: LD_INT 1
41630: PUSH
41631: LD_INT 2
41633: PUSH
41634: LD_INT 3
41636: PUSH
41637: LD_INT 4
41639: PUSH
41640: LD_INT 5
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: ST_TO_ADDR
41650: GO 42579
41652: LD_INT 4
41654: DOUBLE
41655: EQUAL
41656: IFTRUE 41660
41658: GO 41686
41660: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
41661: LD_ADDR_VAR 0 3
41665: PUSH
41666: LD_INT 2
41668: PUSH
41669: LD_INT 3
41671: PUSH
41672: LD_INT 4
41674: PUSH
41675: LD_INT 5
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: ST_TO_ADDR
41684: GO 42579
41686: LD_INT 5
41688: DOUBLE
41689: EQUAL
41690: IFTRUE 41694
41692: GO 41720
41694: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
41695: LD_ADDR_VAR 0 3
41699: PUSH
41700: LD_INT 2
41702: PUSH
41703: LD_INT 3
41705: PUSH
41706: LD_INT 4
41708: PUSH
41709: LD_INT 5
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: ST_TO_ADDR
41718: GO 42579
41720: LD_INT 9
41722: DOUBLE
41723: EQUAL
41724: IFTRUE 41728
41726: GO 41754
41728: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41729: LD_ADDR_VAR 0 3
41733: PUSH
41734: LD_INT 2
41736: PUSH
41737: LD_INT 3
41739: PUSH
41740: LD_INT 4
41742: PUSH
41743: LD_INT 5
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: ST_TO_ADDR
41752: GO 42579
41754: LD_INT 7
41756: DOUBLE
41757: EQUAL
41758: IFTRUE 41762
41760: GO 41788
41762: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41763: LD_ADDR_VAR 0 3
41767: PUSH
41768: LD_INT 2
41770: PUSH
41771: LD_INT 3
41773: PUSH
41774: LD_INT 4
41776: PUSH
41777: LD_INT 5
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: ST_TO_ADDR
41786: GO 42579
41788: LD_INT 12
41790: DOUBLE
41791: EQUAL
41792: IFTRUE 41796
41794: GO 41822
41796: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41797: LD_ADDR_VAR 0 3
41801: PUSH
41802: LD_INT 2
41804: PUSH
41805: LD_INT 3
41807: PUSH
41808: LD_INT 4
41810: PUSH
41811: LD_INT 5
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: ST_TO_ADDR
41820: GO 42579
41822: LD_INT 13
41824: DOUBLE
41825: EQUAL
41826: IFTRUE 41830
41828: GO 41856
41830: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41831: LD_ADDR_VAR 0 3
41835: PUSH
41836: LD_INT 2
41838: PUSH
41839: LD_INT 3
41841: PUSH
41842: LD_INT 4
41844: PUSH
41845: LD_INT 5
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: ST_TO_ADDR
41854: GO 42579
41856: LD_INT 14
41858: DOUBLE
41859: EQUAL
41860: IFTRUE 41864
41862: GO 41882
41864: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41865: LD_ADDR_VAR 0 3
41869: PUSH
41870: LD_INT 4
41872: PUSH
41873: LD_INT 5
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: ST_TO_ADDR
41880: GO 42579
41882: LD_INT 6
41884: DOUBLE
41885: EQUAL
41886: IFTRUE 41890
41888: GO 41908
41890: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41891: LD_ADDR_VAR 0 3
41895: PUSH
41896: LD_INT 4
41898: PUSH
41899: LD_INT 5
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: ST_TO_ADDR
41906: GO 42579
41908: LD_INT 10
41910: DOUBLE
41911: EQUAL
41912: IFTRUE 41916
41914: GO 41934
41916: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41917: LD_ADDR_VAR 0 3
41921: PUSH
41922: LD_INT 4
41924: PUSH
41925: LD_INT 5
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: ST_TO_ADDR
41932: GO 42579
41934: LD_INT 22
41936: DOUBLE
41937: EQUAL
41938: IFTRUE 41942
41940: GO 41968
41942: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41943: LD_ADDR_VAR 0 3
41947: PUSH
41948: LD_INT 11
41950: PUSH
41951: LD_INT 12
41953: PUSH
41954: LD_INT 13
41956: PUSH
41957: LD_INT 14
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: LIST
41964: LIST
41965: ST_TO_ADDR
41966: GO 42579
41968: LD_INT 23
41970: DOUBLE
41971: EQUAL
41972: IFTRUE 41976
41974: GO 42002
41976: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41977: LD_ADDR_VAR 0 3
41981: PUSH
41982: LD_INT 11
41984: PUSH
41985: LD_INT 12
41987: PUSH
41988: LD_INT 13
41990: PUSH
41991: LD_INT 14
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: ST_TO_ADDR
42000: GO 42579
42002: LD_INT 24
42004: DOUBLE
42005: EQUAL
42006: IFTRUE 42010
42008: GO 42036
42010: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42011: LD_ADDR_VAR 0 3
42015: PUSH
42016: LD_INT 11
42018: PUSH
42019: LD_INT 12
42021: PUSH
42022: LD_INT 13
42024: PUSH
42025: LD_INT 14
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: ST_TO_ADDR
42034: GO 42579
42036: LD_INT 30
42038: DOUBLE
42039: EQUAL
42040: IFTRUE 42044
42042: GO 42070
42044: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42045: LD_ADDR_VAR 0 3
42049: PUSH
42050: LD_INT 11
42052: PUSH
42053: LD_INT 12
42055: PUSH
42056: LD_INT 13
42058: PUSH
42059: LD_INT 14
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: ST_TO_ADDR
42068: GO 42579
42070: LD_INT 25
42072: DOUBLE
42073: EQUAL
42074: IFTRUE 42078
42076: GO 42096
42078: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42079: LD_ADDR_VAR 0 3
42083: PUSH
42084: LD_INT 13
42086: PUSH
42087: LD_INT 14
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: ST_TO_ADDR
42094: GO 42579
42096: LD_INT 27
42098: DOUBLE
42099: EQUAL
42100: IFTRUE 42104
42102: GO 42122
42104: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42105: LD_ADDR_VAR 0 3
42109: PUSH
42110: LD_INT 13
42112: PUSH
42113: LD_INT 14
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: ST_TO_ADDR
42120: GO 42579
42122: LD_EXP 50
42126: DOUBLE
42127: EQUAL
42128: IFTRUE 42132
42130: GO 42158
42132: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42133: LD_ADDR_VAR 0 3
42137: PUSH
42138: LD_INT 11
42140: PUSH
42141: LD_INT 12
42143: PUSH
42144: LD_INT 13
42146: PUSH
42147: LD_INT 14
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: ST_TO_ADDR
42156: GO 42579
42158: LD_INT 28
42160: DOUBLE
42161: EQUAL
42162: IFTRUE 42166
42164: GO 42184
42166: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42167: LD_ADDR_VAR 0 3
42171: PUSH
42172: LD_INT 13
42174: PUSH
42175: LD_INT 14
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: ST_TO_ADDR
42182: GO 42579
42184: LD_INT 29
42186: DOUBLE
42187: EQUAL
42188: IFTRUE 42192
42190: GO 42210
42192: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42193: LD_ADDR_VAR 0 3
42197: PUSH
42198: LD_INT 13
42200: PUSH
42201: LD_INT 14
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: ST_TO_ADDR
42208: GO 42579
42210: LD_INT 31
42212: DOUBLE
42213: EQUAL
42214: IFTRUE 42218
42216: GO 42236
42218: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42219: LD_ADDR_VAR 0 3
42223: PUSH
42224: LD_INT 13
42226: PUSH
42227: LD_INT 14
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: ST_TO_ADDR
42234: GO 42579
42236: LD_INT 26
42238: DOUBLE
42239: EQUAL
42240: IFTRUE 42244
42242: GO 42262
42244: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42245: LD_ADDR_VAR 0 3
42249: PUSH
42250: LD_INT 13
42252: PUSH
42253: LD_INT 14
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: ST_TO_ADDR
42260: GO 42579
42262: LD_INT 42
42264: DOUBLE
42265: EQUAL
42266: IFTRUE 42270
42268: GO 42296
42270: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42271: LD_ADDR_VAR 0 3
42275: PUSH
42276: LD_INT 21
42278: PUSH
42279: LD_INT 22
42281: PUSH
42282: LD_INT 23
42284: PUSH
42285: LD_INT 24
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: ST_TO_ADDR
42294: GO 42579
42296: LD_INT 43
42298: DOUBLE
42299: EQUAL
42300: IFTRUE 42304
42302: GO 42330
42304: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42305: LD_ADDR_VAR 0 3
42309: PUSH
42310: LD_INT 21
42312: PUSH
42313: LD_INT 22
42315: PUSH
42316: LD_INT 23
42318: PUSH
42319: LD_INT 24
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: ST_TO_ADDR
42328: GO 42579
42330: LD_INT 44
42332: DOUBLE
42333: EQUAL
42334: IFTRUE 42338
42336: GO 42364
42338: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42339: LD_ADDR_VAR 0 3
42343: PUSH
42344: LD_INT 21
42346: PUSH
42347: LD_INT 22
42349: PUSH
42350: LD_INT 23
42352: PUSH
42353: LD_INT 24
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: ST_TO_ADDR
42362: GO 42579
42364: LD_INT 45
42366: DOUBLE
42367: EQUAL
42368: IFTRUE 42372
42370: GO 42398
42372: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42373: LD_ADDR_VAR 0 3
42377: PUSH
42378: LD_INT 21
42380: PUSH
42381: LD_INT 22
42383: PUSH
42384: LD_INT 23
42386: PUSH
42387: LD_INT 24
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: ST_TO_ADDR
42396: GO 42579
42398: LD_INT 49
42400: DOUBLE
42401: EQUAL
42402: IFTRUE 42406
42404: GO 42432
42406: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42407: LD_ADDR_VAR 0 3
42411: PUSH
42412: LD_INT 21
42414: PUSH
42415: LD_INT 22
42417: PUSH
42418: LD_INT 23
42420: PUSH
42421: LD_INT 24
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: ST_TO_ADDR
42430: GO 42579
42432: LD_INT 51
42434: DOUBLE
42435: EQUAL
42436: IFTRUE 42440
42438: GO 42466
42440: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42441: LD_ADDR_VAR 0 3
42445: PUSH
42446: LD_INT 21
42448: PUSH
42449: LD_INT 22
42451: PUSH
42452: LD_INT 23
42454: PUSH
42455: LD_INT 24
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: ST_TO_ADDR
42464: GO 42579
42466: LD_INT 52
42468: DOUBLE
42469: EQUAL
42470: IFTRUE 42474
42472: GO 42500
42474: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42475: LD_ADDR_VAR 0 3
42479: PUSH
42480: LD_INT 21
42482: PUSH
42483: LD_INT 22
42485: PUSH
42486: LD_INT 23
42488: PUSH
42489: LD_INT 24
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: ST_TO_ADDR
42498: GO 42579
42500: LD_INT 53
42502: DOUBLE
42503: EQUAL
42504: IFTRUE 42508
42506: GO 42526
42508: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42509: LD_ADDR_VAR 0 3
42513: PUSH
42514: LD_INT 23
42516: PUSH
42517: LD_INT 24
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: ST_TO_ADDR
42524: GO 42579
42526: LD_INT 46
42528: DOUBLE
42529: EQUAL
42530: IFTRUE 42534
42532: GO 42552
42534: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42535: LD_ADDR_VAR 0 3
42539: PUSH
42540: LD_INT 23
42542: PUSH
42543: LD_INT 24
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: ST_TO_ADDR
42550: GO 42579
42552: LD_INT 47
42554: DOUBLE
42555: EQUAL
42556: IFTRUE 42560
42558: GO 42578
42560: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42561: LD_ADDR_VAR 0 3
42565: PUSH
42566: LD_INT 23
42568: PUSH
42569: LD_INT 24
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: ST_TO_ADDR
42576: GO 42579
42578: POP
// result := ( chassis in result ) ;
42579: LD_ADDR_VAR 0 3
42583: PUSH
42584: LD_VAR 0 1
42588: PUSH
42589: LD_VAR 0 3
42593: IN
42594: ST_TO_ADDR
// end ;
42595: LD_VAR 0 3
42599: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42600: LD_INT 0
42602: PPUSH
42603: PPUSH
42604: PPUSH
42605: PPUSH
42606: PPUSH
42607: PPUSH
42608: PPUSH
// result := array ;
42609: LD_ADDR_VAR 0 5
42613: PUSH
42614: LD_VAR 0 1
42618: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42619: LD_VAR 0 1
42623: NOT
42624: PUSH
42625: LD_VAR 0 2
42629: NOT
42630: OR
42631: PUSH
42632: LD_VAR 0 3
42636: NOT
42637: OR
42638: PUSH
42639: LD_VAR 0 2
42643: PUSH
42644: LD_VAR 0 1
42648: GREATER
42649: OR
42650: PUSH
42651: LD_VAR 0 3
42655: PUSH
42656: LD_VAR 0 1
42660: GREATER
42661: OR
42662: IFFALSE 42666
// exit ;
42664: GO 42962
// if direction then
42666: LD_VAR 0 4
42670: IFFALSE 42734
// begin d := 1 ;
42672: LD_ADDR_VAR 0 9
42676: PUSH
42677: LD_INT 1
42679: ST_TO_ADDR
// if i_from > i_to then
42680: LD_VAR 0 2
42684: PUSH
42685: LD_VAR 0 3
42689: GREATER
42690: IFFALSE 42716
// length := ( array - i_from ) + i_to else
42692: LD_ADDR_VAR 0 11
42696: PUSH
42697: LD_VAR 0 1
42701: PUSH
42702: LD_VAR 0 2
42706: MINUS
42707: PUSH
42708: LD_VAR 0 3
42712: PLUS
42713: ST_TO_ADDR
42714: GO 42732
// length := i_to - i_from ;
42716: LD_ADDR_VAR 0 11
42720: PUSH
42721: LD_VAR 0 3
42725: PUSH
42726: LD_VAR 0 2
42730: MINUS
42731: ST_TO_ADDR
// end else
42732: GO 42795
// begin d := - 1 ;
42734: LD_ADDR_VAR 0 9
42738: PUSH
42739: LD_INT 1
42741: NEG
42742: ST_TO_ADDR
// if i_from > i_to then
42743: LD_VAR 0 2
42747: PUSH
42748: LD_VAR 0 3
42752: GREATER
42753: IFFALSE 42773
// length := i_from - i_to else
42755: LD_ADDR_VAR 0 11
42759: PUSH
42760: LD_VAR 0 2
42764: PUSH
42765: LD_VAR 0 3
42769: MINUS
42770: ST_TO_ADDR
42771: GO 42795
// length := ( array - i_to ) + i_from ;
42773: LD_ADDR_VAR 0 11
42777: PUSH
42778: LD_VAR 0 1
42782: PUSH
42783: LD_VAR 0 3
42787: MINUS
42788: PUSH
42789: LD_VAR 0 2
42793: PLUS
42794: ST_TO_ADDR
// end ; if not length then
42795: LD_VAR 0 11
42799: NOT
42800: IFFALSE 42804
// exit ;
42802: GO 42962
// tmp := array ;
42804: LD_ADDR_VAR 0 10
42808: PUSH
42809: LD_VAR 0 1
42813: ST_TO_ADDR
// for i = 1 to length do
42814: LD_ADDR_VAR 0 6
42818: PUSH
42819: DOUBLE
42820: LD_INT 1
42822: DEC
42823: ST_TO_ADDR
42824: LD_VAR 0 11
42828: PUSH
42829: FOR_TO
42830: IFFALSE 42950
// begin for j = 1 to array do
42832: LD_ADDR_VAR 0 7
42836: PUSH
42837: DOUBLE
42838: LD_INT 1
42840: DEC
42841: ST_TO_ADDR
42842: LD_VAR 0 1
42846: PUSH
42847: FOR_TO
42848: IFFALSE 42936
// begin k := j + d ;
42850: LD_ADDR_VAR 0 8
42854: PUSH
42855: LD_VAR 0 7
42859: PUSH
42860: LD_VAR 0 9
42864: PLUS
42865: ST_TO_ADDR
// if k > array then
42866: LD_VAR 0 8
42870: PUSH
42871: LD_VAR 0 1
42875: GREATER
42876: IFFALSE 42886
// k := 1 ;
42878: LD_ADDR_VAR 0 8
42882: PUSH
42883: LD_INT 1
42885: ST_TO_ADDR
// if not k then
42886: LD_VAR 0 8
42890: NOT
42891: IFFALSE 42903
// k := array ;
42893: LD_ADDR_VAR 0 8
42897: PUSH
42898: LD_VAR 0 1
42902: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42903: LD_ADDR_VAR 0 10
42907: PUSH
42908: LD_VAR 0 10
42912: PPUSH
42913: LD_VAR 0 8
42917: PPUSH
42918: LD_VAR 0 1
42922: PUSH
42923: LD_VAR 0 7
42927: ARRAY
42928: PPUSH
42929: CALL_OW 1
42933: ST_TO_ADDR
// end ;
42934: GO 42847
42936: POP
42937: POP
// array := tmp ;
42938: LD_ADDR_VAR 0 1
42942: PUSH
42943: LD_VAR 0 10
42947: ST_TO_ADDR
// end ;
42948: GO 42829
42950: POP
42951: POP
// result := array ;
42952: LD_ADDR_VAR 0 5
42956: PUSH
42957: LD_VAR 0 1
42961: ST_TO_ADDR
// end ;
42962: LD_VAR 0 5
42966: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42967: LD_INT 0
42969: PPUSH
42970: PPUSH
// result := 0 ;
42971: LD_ADDR_VAR 0 3
42975: PUSH
42976: LD_INT 0
42978: ST_TO_ADDR
// if not array or not value in array then
42979: LD_VAR 0 1
42983: NOT
42984: PUSH
42985: LD_VAR 0 2
42989: PUSH
42990: LD_VAR 0 1
42994: IN
42995: NOT
42996: OR
42997: IFFALSE 43001
// exit ;
42999: GO 43055
// for i = 1 to array do
43001: LD_ADDR_VAR 0 4
43005: PUSH
43006: DOUBLE
43007: LD_INT 1
43009: DEC
43010: ST_TO_ADDR
43011: LD_VAR 0 1
43015: PUSH
43016: FOR_TO
43017: IFFALSE 43053
// if value = array [ i ] then
43019: LD_VAR 0 2
43023: PUSH
43024: LD_VAR 0 1
43028: PUSH
43029: LD_VAR 0 4
43033: ARRAY
43034: EQUAL
43035: IFFALSE 43051
// begin result := i ;
43037: LD_ADDR_VAR 0 3
43041: PUSH
43042: LD_VAR 0 4
43046: ST_TO_ADDR
// exit ;
43047: POP
43048: POP
43049: GO 43055
// end ;
43051: GO 43016
43053: POP
43054: POP
// end ;
43055: LD_VAR 0 3
43059: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43060: LD_INT 0
43062: PPUSH
// vc_chassis := chassis ;
43063: LD_ADDR_OWVAR 37
43067: PUSH
43068: LD_VAR 0 1
43072: ST_TO_ADDR
// vc_engine := engine ;
43073: LD_ADDR_OWVAR 39
43077: PUSH
43078: LD_VAR 0 2
43082: ST_TO_ADDR
// vc_control := control ;
43083: LD_ADDR_OWVAR 38
43087: PUSH
43088: LD_VAR 0 3
43092: ST_TO_ADDR
// vc_weapon := weapon ;
43093: LD_ADDR_OWVAR 40
43097: PUSH
43098: LD_VAR 0 4
43102: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43103: LD_ADDR_OWVAR 41
43107: PUSH
43108: LD_VAR 0 5
43112: ST_TO_ADDR
// end ;
43113: LD_VAR 0 6
43117: RET
// export function WantPlant ( unit ) ; var task ; begin
43118: LD_INT 0
43120: PPUSH
43121: PPUSH
// result := false ;
43122: LD_ADDR_VAR 0 2
43126: PUSH
43127: LD_INT 0
43129: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43130: LD_ADDR_VAR 0 3
43134: PUSH
43135: LD_VAR 0 1
43139: PPUSH
43140: CALL_OW 437
43144: ST_TO_ADDR
// if task then
43145: LD_VAR 0 3
43149: IFFALSE 43177
// if task [ 1 ] [ 1 ] = p then
43151: LD_VAR 0 3
43155: PUSH
43156: LD_INT 1
43158: ARRAY
43159: PUSH
43160: LD_INT 1
43162: ARRAY
43163: PUSH
43164: LD_STRING p
43166: EQUAL
43167: IFFALSE 43177
// result := true ;
43169: LD_ADDR_VAR 0 2
43173: PUSH
43174: LD_INT 1
43176: ST_TO_ADDR
// end ;
43177: LD_VAR 0 2
43181: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43182: LD_INT 0
43184: PPUSH
43185: PPUSH
43186: PPUSH
43187: PPUSH
// if pos < 1 then
43188: LD_VAR 0 2
43192: PUSH
43193: LD_INT 1
43195: LESS
43196: IFFALSE 43200
// exit ;
43198: GO 43503
// if pos = 1 then
43200: LD_VAR 0 2
43204: PUSH
43205: LD_INT 1
43207: EQUAL
43208: IFFALSE 43241
// result := Replace ( arr , pos [ 1 ] , value ) else
43210: LD_ADDR_VAR 0 4
43214: PUSH
43215: LD_VAR 0 1
43219: PPUSH
43220: LD_VAR 0 2
43224: PUSH
43225: LD_INT 1
43227: ARRAY
43228: PPUSH
43229: LD_VAR 0 3
43233: PPUSH
43234: CALL_OW 1
43238: ST_TO_ADDR
43239: GO 43503
// begin tmp := arr ;
43241: LD_ADDR_VAR 0 6
43245: PUSH
43246: LD_VAR 0 1
43250: ST_TO_ADDR
// s_arr := [ tmp ] ;
43251: LD_ADDR_VAR 0 7
43255: PUSH
43256: LD_VAR 0 6
43260: PUSH
43261: EMPTY
43262: LIST
43263: ST_TO_ADDR
// for i = 1 to pos - 1 do
43264: LD_ADDR_VAR 0 5
43268: PUSH
43269: DOUBLE
43270: LD_INT 1
43272: DEC
43273: ST_TO_ADDR
43274: LD_VAR 0 2
43278: PUSH
43279: LD_INT 1
43281: MINUS
43282: PUSH
43283: FOR_TO
43284: IFFALSE 43329
// begin tmp := tmp [ pos [ i ] ] ;
43286: LD_ADDR_VAR 0 6
43290: PUSH
43291: LD_VAR 0 6
43295: PUSH
43296: LD_VAR 0 2
43300: PUSH
43301: LD_VAR 0 5
43305: ARRAY
43306: ARRAY
43307: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43308: LD_ADDR_VAR 0 7
43312: PUSH
43313: LD_VAR 0 7
43317: PUSH
43318: LD_VAR 0 6
43322: PUSH
43323: EMPTY
43324: LIST
43325: ADD
43326: ST_TO_ADDR
// end ;
43327: GO 43283
43329: POP
43330: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43331: LD_ADDR_VAR 0 6
43335: PUSH
43336: LD_VAR 0 6
43340: PPUSH
43341: LD_VAR 0 2
43345: PUSH
43346: LD_VAR 0 2
43350: ARRAY
43351: PPUSH
43352: LD_VAR 0 3
43356: PPUSH
43357: CALL_OW 1
43361: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43362: LD_ADDR_VAR 0 7
43366: PUSH
43367: LD_VAR 0 7
43371: PPUSH
43372: LD_VAR 0 7
43376: PPUSH
43377: LD_VAR 0 6
43381: PPUSH
43382: CALL_OW 1
43386: ST_TO_ADDR
// for i = s_arr downto 2 do
43387: LD_ADDR_VAR 0 5
43391: PUSH
43392: DOUBLE
43393: LD_VAR 0 7
43397: INC
43398: ST_TO_ADDR
43399: LD_INT 2
43401: PUSH
43402: FOR_DOWNTO
43403: IFFALSE 43487
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43405: LD_ADDR_VAR 0 6
43409: PUSH
43410: LD_VAR 0 7
43414: PUSH
43415: LD_VAR 0 5
43419: PUSH
43420: LD_INT 1
43422: MINUS
43423: ARRAY
43424: PPUSH
43425: LD_VAR 0 2
43429: PUSH
43430: LD_VAR 0 5
43434: PUSH
43435: LD_INT 1
43437: MINUS
43438: ARRAY
43439: PPUSH
43440: LD_VAR 0 7
43444: PUSH
43445: LD_VAR 0 5
43449: ARRAY
43450: PPUSH
43451: CALL_OW 1
43455: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
43456: LD_ADDR_VAR 0 7
43460: PUSH
43461: LD_VAR 0 7
43465: PPUSH
43466: LD_VAR 0 5
43470: PUSH
43471: LD_INT 1
43473: MINUS
43474: PPUSH
43475: LD_VAR 0 6
43479: PPUSH
43480: CALL_OW 1
43484: ST_TO_ADDR
// end ;
43485: GO 43402
43487: POP
43488: POP
// result := s_arr [ 1 ] ;
43489: LD_ADDR_VAR 0 4
43493: PUSH
43494: LD_VAR 0 7
43498: PUSH
43499: LD_INT 1
43501: ARRAY
43502: ST_TO_ADDR
// end ; end ;
43503: LD_VAR 0 4
43507: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43508: LD_INT 0
43510: PPUSH
43511: PPUSH
// if not list then
43512: LD_VAR 0 1
43516: NOT
43517: IFFALSE 43521
// exit ;
43519: GO 43612
// i := list [ pos1 ] ;
43521: LD_ADDR_VAR 0 5
43525: PUSH
43526: LD_VAR 0 1
43530: PUSH
43531: LD_VAR 0 2
43535: ARRAY
43536: ST_TO_ADDR
// if not i then
43537: LD_VAR 0 5
43541: NOT
43542: IFFALSE 43546
// exit ;
43544: GO 43612
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43546: LD_ADDR_VAR 0 1
43550: PUSH
43551: LD_VAR 0 1
43555: PPUSH
43556: LD_VAR 0 2
43560: PPUSH
43561: LD_VAR 0 1
43565: PUSH
43566: LD_VAR 0 3
43570: ARRAY
43571: PPUSH
43572: CALL_OW 1
43576: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43577: LD_ADDR_VAR 0 1
43581: PUSH
43582: LD_VAR 0 1
43586: PPUSH
43587: LD_VAR 0 3
43591: PPUSH
43592: LD_VAR 0 5
43596: PPUSH
43597: CALL_OW 1
43601: ST_TO_ADDR
// result := list ;
43602: LD_ADDR_VAR 0 4
43606: PUSH
43607: LD_VAR 0 1
43611: ST_TO_ADDR
// end ;
43612: LD_VAR 0 4
43616: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43617: LD_INT 0
43619: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43620: LD_ADDR_VAR 0 5
43624: PUSH
43625: LD_VAR 0 1
43629: PPUSH
43630: CALL_OW 250
43634: PPUSH
43635: LD_VAR 0 1
43639: PPUSH
43640: CALL_OW 251
43644: PPUSH
43645: LD_VAR 0 2
43649: PPUSH
43650: LD_VAR 0 3
43654: PPUSH
43655: LD_VAR 0 4
43659: PPUSH
43660: CALL 43670 0 5
43664: ST_TO_ADDR
// end ;
43665: LD_VAR 0 5
43669: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
43670: LD_INT 0
43672: PPUSH
43673: PPUSH
43674: PPUSH
43675: PPUSH
// if not list then
43676: LD_VAR 0 3
43680: NOT
43681: IFFALSE 43685
// exit ;
43683: GO 44073
// result := [ ] ;
43685: LD_ADDR_VAR 0 6
43689: PUSH
43690: EMPTY
43691: ST_TO_ADDR
// for i in list do
43692: LD_ADDR_VAR 0 7
43696: PUSH
43697: LD_VAR 0 3
43701: PUSH
43702: FOR_IN
43703: IFFALSE 43905
// begin tmp := GetDistUnitXY ( i , x , y ) ;
43705: LD_ADDR_VAR 0 9
43709: PUSH
43710: LD_VAR 0 7
43714: PPUSH
43715: LD_VAR 0 1
43719: PPUSH
43720: LD_VAR 0 2
43724: PPUSH
43725: CALL_OW 297
43729: ST_TO_ADDR
// if not result then
43730: LD_VAR 0 6
43734: NOT
43735: IFFALSE 43761
// result := [ [ i , tmp ] ] else
43737: LD_ADDR_VAR 0 6
43741: PUSH
43742: LD_VAR 0 7
43746: PUSH
43747: LD_VAR 0 9
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: EMPTY
43757: LIST
43758: ST_TO_ADDR
43759: GO 43903
// begin if result [ result ] [ 2 ] < tmp then
43761: LD_VAR 0 6
43765: PUSH
43766: LD_VAR 0 6
43770: ARRAY
43771: PUSH
43772: LD_INT 2
43774: ARRAY
43775: PUSH
43776: LD_VAR 0 9
43780: LESS
43781: IFFALSE 43823
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43783: LD_ADDR_VAR 0 6
43787: PUSH
43788: LD_VAR 0 6
43792: PPUSH
43793: LD_VAR 0 6
43797: PUSH
43798: LD_INT 1
43800: PLUS
43801: PPUSH
43802: LD_VAR 0 7
43806: PUSH
43807: LD_VAR 0 9
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PPUSH
43816: CALL_OW 2
43820: ST_TO_ADDR
43821: GO 43903
// for j = 1 to result do
43823: LD_ADDR_VAR 0 8
43827: PUSH
43828: DOUBLE
43829: LD_INT 1
43831: DEC
43832: ST_TO_ADDR
43833: LD_VAR 0 6
43837: PUSH
43838: FOR_TO
43839: IFFALSE 43901
// begin if tmp < result [ j ] [ 2 ] then
43841: LD_VAR 0 9
43845: PUSH
43846: LD_VAR 0 6
43850: PUSH
43851: LD_VAR 0 8
43855: ARRAY
43856: PUSH
43857: LD_INT 2
43859: ARRAY
43860: LESS
43861: IFFALSE 43899
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43863: LD_ADDR_VAR 0 6
43867: PUSH
43868: LD_VAR 0 6
43872: PPUSH
43873: LD_VAR 0 8
43877: PPUSH
43878: LD_VAR 0 7
43882: PUSH
43883: LD_VAR 0 9
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PPUSH
43892: CALL_OW 2
43896: ST_TO_ADDR
// break ;
43897: GO 43901
// end ; end ;
43899: GO 43838
43901: POP
43902: POP
// end ; end ;
43903: GO 43702
43905: POP
43906: POP
// if result and not asc then
43907: LD_VAR 0 6
43911: PUSH
43912: LD_VAR 0 4
43916: NOT
43917: AND
43918: IFFALSE 43993
// begin tmp := result ;
43920: LD_ADDR_VAR 0 9
43924: PUSH
43925: LD_VAR 0 6
43929: ST_TO_ADDR
// for i = tmp downto 1 do
43930: LD_ADDR_VAR 0 7
43934: PUSH
43935: DOUBLE
43936: LD_VAR 0 9
43940: INC
43941: ST_TO_ADDR
43942: LD_INT 1
43944: PUSH
43945: FOR_DOWNTO
43946: IFFALSE 43991
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43948: LD_ADDR_VAR 0 6
43952: PUSH
43953: LD_VAR 0 6
43957: PPUSH
43958: LD_VAR 0 9
43962: PUSH
43963: LD_VAR 0 7
43967: MINUS
43968: PUSH
43969: LD_INT 1
43971: PLUS
43972: PPUSH
43973: LD_VAR 0 9
43977: PUSH
43978: LD_VAR 0 7
43982: ARRAY
43983: PPUSH
43984: CALL_OW 1
43988: ST_TO_ADDR
43989: GO 43945
43991: POP
43992: POP
// end ; tmp := [ ] ;
43993: LD_ADDR_VAR 0 9
43997: PUSH
43998: EMPTY
43999: ST_TO_ADDR
// if mode then
44000: LD_VAR 0 5
44004: IFFALSE 44073
// begin for i = 1 to result do
44006: LD_ADDR_VAR 0 7
44010: PUSH
44011: DOUBLE
44012: LD_INT 1
44014: DEC
44015: ST_TO_ADDR
44016: LD_VAR 0 6
44020: PUSH
44021: FOR_TO
44022: IFFALSE 44061
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44024: LD_ADDR_VAR 0 9
44028: PUSH
44029: LD_VAR 0 9
44033: PPUSH
44034: LD_VAR 0 7
44038: PPUSH
44039: LD_VAR 0 6
44043: PUSH
44044: LD_VAR 0 7
44048: ARRAY
44049: PUSH
44050: LD_INT 1
44052: ARRAY
44053: PPUSH
44054: CALL_OW 1
44058: ST_TO_ADDR
44059: GO 44021
44061: POP
44062: POP
// result := tmp ;
44063: LD_ADDR_VAR 0 6
44067: PUSH
44068: LD_VAR 0 9
44072: ST_TO_ADDR
// end ; end ;
44073: LD_VAR 0 6
44077: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44078: LD_INT 0
44080: PPUSH
44081: PPUSH
44082: PPUSH
44083: PPUSH
44084: PPUSH
44085: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44086: LD_ADDR_VAR 0 5
44090: PUSH
44091: LD_INT 0
44093: PUSH
44094: LD_INT 0
44096: PUSH
44097: LD_INT 0
44099: PUSH
44100: EMPTY
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: ST_TO_ADDR
// if not x or not y then
44108: LD_VAR 0 2
44112: NOT
44113: PUSH
44114: LD_VAR 0 3
44118: NOT
44119: OR
44120: IFFALSE 44124
// exit ;
44122: GO 45776
// if not range then
44124: LD_VAR 0 4
44128: NOT
44129: IFFALSE 44139
// range := 10 ;
44131: LD_ADDR_VAR 0 4
44135: PUSH
44136: LD_INT 10
44138: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44139: LD_ADDR_VAR 0 8
44143: PUSH
44144: LD_INT 81
44146: PUSH
44147: LD_VAR 0 1
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 92
44158: PUSH
44159: LD_VAR 0 2
44163: PUSH
44164: LD_VAR 0 3
44168: PUSH
44169: LD_VAR 0 4
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 3
44182: PUSH
44183: LD_INT 21
44185: PUSH
44186: LD_INT 3
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: LIST
44201: PPUSH
44202: CALL_OW 69
44206: ST_TO_ADDR
// if not tmp then
44207: LD_VAR 0 8
44211: NOT
44212: IFFALSE 44216
// exit ;
44214: GO 45776
// for i in tmp do
44216: LD_ADDR_VAR 0 6
44220: PUSH
44221: LD_VAR 0 8
44225: PUSH
44226: FOR_IN
44227: IFFALSE 45751
// begin points := [ 0 , 0 , 0 ] ;
44229: LD_ADDR_VAR 0 9
44233: PUSH
44234: LD_INT 0
44236: PUSH
44237: LD_INT 0
44239: PUSH
44240: LD_INT 0
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: LIST
44247: ST_TO_ADDR
// bpoints := 1 ;
44248: LD_ADDR_VAR 0 10
44252: PUSH
44253: LD_INT 1
44255: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44256: LD_VAR 0 6
44260: PPUSH
44261: CALL_OW 247
44265: PUSH
44266: LD_INT 1
44268: DOUBLE
44269: EQUAL
44270: IFTRUE 44274
44272: GO 44852
44274: POP
// begin if GetClass ( i ) = 1 then
44275: LD_VAR 0 6
44279: PPUSH
44280: CALL_OW 257
44284: PUSH
44285: LD_INT 1
44287: EQUAL
44288: IFFALSE 44309
// points := [ 10 , 5 , 3 ] ;
44290: LD_ADDR_VAR 0 9
44294: PUSH
44295: LD_INT 10
44297: PUSH
44298: LD_INT 5
44300: PUSH
44301: LD_INT 3
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: LIST
44308: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44309: LD_VAR 0 6
44313: PPUSH
44314: CALL_OW 257
44318: PUSH
44319: LD_INT 2
44321: PUSH
44322: LD_INT 3
44324: PUSH
44325: LD_INT 4
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: LIST
44332: IN
44333: IFFALSE 44354
// points := [ 3 , 2 , 1 ] ;
44335: LD_ADDR_VAR 0 9
44339: PUSH
44340: LD_INT 3
44342: PUSH
44343: LD_INT 2
44345: PUSH
44346: LD_INT 1
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: LIST
44353: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44354: LD_VAR 0 6
44358: PPUSH
44359: CALL_OW 257
44363: PUSH
44364: LD_INT 5
44366: EQUAL
44367: IFFALSE 44388
// points := [ 130 , 5 , 2 ] ;
44369: LD_ADDR_VAR 0 9
44373: PUSH
44374: LD_INT 130
44376: PUSH
44377: LD_INT 5
44379: PUSH
44380: LD_INT 2
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: LIST
44387: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44388: LD_VAR 0 6
44392: PPUSH
44393: CALL_OW 257
44397: PUSH
44398: LD_INT 8
44400: EQUAL
44401: IFFALSE 44422
// points := [ 35 , 35 , 30 ] ;
44403: LD_ADDR_VAR 0 9
44407: PUSH
44408: LD_INT 35
44410: PUSH
44411: LD_INT 35
44413: PUSH
44414: LD_INT 30
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: LIST
44421: ST_TO_ADDR
// if GetClass ( i ) = 9 then
44422: LD_VAR 0 6
44426: PPUSH
44427: CALL_OW 257
44431: PUSH
44432: LD_INT 9
44434: EQUAL
44435: IFFALSE 44456
// points := [ 20 , 55 , 40 ] ;
44437: LD_ADDR_VAR 0 9
44441: PUSH
44442: LD_INT 20
44444: PUSH
44445: LD_INT 55
44447: PUSH
44448: LD_INT 40
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: LIST
44455: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
44456: LD_VAR 0 6
44460: PPUSH
44461: CALL_OW 257
44465: PUSH
44466: LD_INT 12
44468: PUSH
44469: LD_INT 16
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: IN
44476: IFFALSE 44497
// points := [ 5 , 3 , 2 ] ;
44478: LD_ADDR_VAR 0 9
44482: PUSH
44483: LD_INT 5
44485: PUSH
44486: LD_INT 3
44488: PUSH
44489: LD_INT 2
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: LIST
44496: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44497: LD_VAR 0 6
44501: PPUSH
44502: CALL_OW 257
44506: PUSH
44507: LD_INT 17
44509: EQUAL
44510: IFFALSE 44531
// points := [ 100 , 50 , 75 ] ;
44512: LD_ADDR_VAR 0 9
44516: PUSH
44517: LD_INT 100
44519: PUSH
44520: LD_INT 50
44522: PUSH
44523: LD_INT 75
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: LIST
44530: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44531: LD_VAR 0 6
44535: PPUSH
44536: CALL_OW 257
44540: PUSH
44541: LD_INT 15
44543: EQUAL
44544: IFFALSE 44565
// points := [ 10 , 5 , 3 ] ;
44546: LD_ADDR_VAR 0 9
44550: PUSH
44551: LD_INT 10
44553: PUSH
44554: LD_INT 5
44556: PUSH
44557: LD_INT 3
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: LIST
44564: ST_TO_ADDR
// if GetClass ( i ) = 14 then
44565: LD_VAR 0 6
44569: PPUSH
44570: CALL_OW 257
44574: PUSH
44575: LD_INT 14
44577: EQUAL
44578: IFFALSE 44599
// points := [ 10 , 0 , 0 ] ;
44580: LD_ADDR_VAR 0 9
44584: PUSH
44585: LD_INT 10
44587: PUSH
44588: LD_INT 0
44590: PUSH
44591: LD_INT 0
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: LIST
44598: ST_TO_ADDR
// if GetClass ( i ) = 11 then
44599: LD_VAR 0 6
44603: PPUSH
44604: CALL_OW 257
44608: PUSH
44609: LD_INT 11
44611: EQUAL
44612: IFFALSE 44633
// points := [ 30 , 10 , 5 ] ;
44614: LD_ADDR_VAR 0 9
44618: PUSH
44619: LD_INT 30
44621: PUSH
44622: LD_INT 10
44624: PUSH
44625: LD_INT 5
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: LIST
44632: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
44633: LD_VAR 0 1
44637: PPUSH
44638: LD_INT 5
44640: PPUSH
44641: CALL_OW 321
44645: PUSH
44646: LD_INT 2
44648: EQUAL
44649: IFFALSE 44666
// bpoints := bpoints * 1.8 ;
44651: LD_ADDR_VAR 0 10
44655: PUSH
44656: LD_VAR 0 10
44660: PUSH
44661: LD_REAL  1.80000000000000E+0000
44664: MUL
44665: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
44666: LD_VAR 0 6
44670: PPUSH
44671: CALL_OW 257
44675: PUSH
44676: LD_INT 1
44678: PUSH
44679: LD_INT 2
44681: PUSH
44682: LD_INT 3
44684: PUSH
44685: LD_INT 4
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: IN
44694: PUSH
44695: LD_VAR 0 1
44699: PPUSH
44700: LD_INT 51
44702: PPUSH
44703: CALL_OW 321
44707: PUSH
44708: LD_INT 2
44710: EQUAL
44711: AND
44712: IFFALSE 44729
// bpoints := bpoints * 1.2 ;
44714: LD_ADDR_VAR 0 10
44718: PUSH
44719: LD_VAR 0 10
44723: PUSH
44724: LD_REAL  1.20000000000000E+0000
44727: MUL
44728: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
44729: LD_VAR 0 6
44733: PPUSH
44734: CALL_OW 257
44738: PUSH
44739: LD_INT 5
44741: PUSH
44742: LD_INT 7
44744: PUSH
44745: LD_INT 9
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: LIST
44752: IN
44753: PUSH
44754: LD_VAR 0 1
44758: PPUSH
44759: LD_INT 52
44761: PPUSH
44762: CALL_OW 321
44766: PUSH
44767: LD_INT 2
44769: EQUAL
44770: AND
44771: IFFALSE 44788
// bpoints := bpoints * 1.5 ;
44773: LD_ADDR_VAR 0 10
44777: PUSH
44778: LD_VAR 0 10
44782: PUSH
44783: LD_REAL  1.50000000000000E+0000
44786: MUL
44787: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44788: LD_VAR 0 1
44792: PPUSH
44793: LD_INT 66
44795: PPUSH
44796: CALL_OW 321
44800: PUSH
44801: LD_INT 2
44803: EQUAL
44804: IFFALSE 44821
// bpoints := bpoints * 1.1 ;
44806: LD_ADDR_VAR 0 10
44810: PUSH
44811: LD_VAR 0 10
44815: PUSH
44816: LD_REAL  1.10000000000000E+0000
44819: MUL
44820: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44821: LD_ADDR_VAR 0 10
44825: PUSH
44826: LD_VAR 0 10
44830: PUSH
44831: LD_VAR 0 6
44835: PPUSH
44836: LD_INT 1
44838: PPUSH
44839: CALL_OW 259
44843: PUSH
44844: LD_REAL  1.15000000000000E+0000
44847: MUL
44848: MUL
44849: ST_TO_ADDR
// end ; unit_vehicle :
44850: GO 45680
44852: LD_INT 2
44854: DOUBLE
44855: EQUAL
44856: IFTRUE 44860
44858: GO 45668
44860: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44861: LD_VAR 0 6
44865: PPUSH
44866: CALL_OW 264
44870: PUSH
44871: LD_INT 2
44873: PUSH
44874: LD_INT 42
44876: PUSH
44877: LD_INT 24
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: LIST
44884: IN
44885: IFFALSE 44906
// points := [ 25 , 5 , 3 ] ;
44887: LD_ADDR_VAR 0 9
44891: PUSH
44892: LD_INT 25
44894: PUSH
44895: LD_INT 5
44897: PUSH
44898: LD_INT 3
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: LIST
44905: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44906: LD_VAR 0 6
44910: PPUSH
44911: CALL_OW 264
44915: PUSH
44916: LD_INT 4
44918: PUSH
44919: LD_INT 43
44921: PUSH
44922: LD_INT 25
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: LIST
44929: IN
44930: IFFALSE 44951
// points := [ 40 , 15 , 5 ] ;
44932: LD_ADDR_VAR 0 9
44936: PUSH
44937: LD_INT 40
44939: PUSH
44940: LD_INT 15
44942: PUSH
44943: LD_INT 5
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: LIST
44950: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44951: LD_VAR 0 6
44955: PPUSH
44956: CALL_OW 264
44960: PUSH
44961: LD_INT 3
44963: PUSH
44964: LD_INT 23
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: IN
44971: IFFALSE 44992
// points := [ 7 , 25 , 8 ] ;
44973: LD_ADDR_VAR 0 9
44977: PUSH
44978: LD_INT 7
44980: PUSH
44981: LD_INT 25
44983: PUSH
44984: LD_INT 8
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: LIST
44991: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44992: LD_VAR 0 6
44996: PPUSH
44997: CALL_OW 264
45001: PUSH
45002: LD_INT 5
45004: PUSH
45005: LD_INT 27
45007: PUSH
45008: LD_INT 44
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: LIST
45015: IN
45016: IFFALSE 45037
// points := [ 14 , 50 , 16 ] ;
45018: LD_ADDR_VAR 0 9
45022: PUSH
45023: LD_INT 14
45025: PUSH
45026: LD_INT 50
45028: PUSH
45029: LD_INT 16
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: LIST
45036: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45037: LD_VAR 0 6
45041: PPUSH
45042: CALL_OW 264
45046: PUSH
45047: LD_INT 6
45049: PUSH
45050: LD_INT 46
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: IN
45057: IFFALSE 45078
// points := [ 32 , 120 , 70 ] ;
45059: LD_ADDR_VAR 0 9
45063: PUSH
45064: LD_INT 32
45066: PUSH
45067: LD_INT 120
45069: PUSH
45070: LD_INT 70
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: LIST
45077: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45078: LD_VAR 0 6
45082: PPUSH
45083: CALL_OW 264
45087: PUSH
45088: LD_INT 7
45090: PUSH
45091: LD_INT 28
45093: PUSH
45094: LD_INT 45
45096: PUSH
45097: LD_EXP 50
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: IN
45108: IFFALSE 45129
// points := [ 35 , 20 , 45 ] ;
45110: LD_ADDR_VAR 0 9
45114: PUSH
45115: LD_INT 35
45117: PUSH
45118: LD_INT 20
45120: PUSH
45121: LD_INT 45
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: LIST
45128: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45129: LD_VAR 0 6
45133: PPUSH
45134: CALL_OW 264
45138: PUSH
45139: LD_INT 47
45141: PUSH
45142: EMPTY
45143: LIST
45144: IN
45145: IFFALSE 45166
// points := [ 67 , 45 , 75 ] ;
45147: LD_ADDR_VAR 0 9
45151: PUSH
45152: LD_INT 67
45154: PUSH
45155: LD_INT 45
45157: PUSH
45158: LD_INT 75
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: LIST
45165: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45166: LD_VAR 0 6
45170: PPUSH
45171: CALL_OW 264
45175: PUSH
45176: LD_INT 26
45178: PUSH
45179: EMPTY
45180: LIST
45181: IN
45182: IFFALSE 45203
// points := [ 120 , 30 , 80 ] ;
45184: LD_ADDR_VAR 0 9
45188: PUSH
45189: LD_INT 120
45191: PUSH
45192: LD_INT 30
45194: PUSH
45195: LD_INT 80
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: LIST
45202: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45203: LD_VAR 0 6
45207: PPUSH
45208: CALL_OW 264
45212: PUSH
45213: LD_INT 22
45215: PUSH
45216: EMPTY
45217: LIST
45218: IN
45219: IFFALSE 45240
// points := [ 40 , 1 , 1 ] ;
45221: LD_ADDR_VAR 0 9
45225: PUSH
45226: LD_INT 40
45228: PUSH
45229: LD_INT 1
45231: PUSH
45232: LD_INT 1
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: LIST
45239: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45240: LD_VAR 0 6
45244: PPUSH
45245: CALL_OW 264
45249: PUSH
45250: LD_INT 29
45252: PUSH
45253: EMPTY
45254: LIST
45255: IN
45256: IFFALSE 45277
// points := [ 70 , 200 , 400 ] ;
45258: LD_ADDR_VAR 0 9
45262: PUSH
45263: LD_INT 70
45265: PUSH
45266: LD_INT 200
45268: PUSH
45269: LD_INT 400
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: LIST
45276: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45277: LD_VAR 0 6
45281: PPUSH
45282: CALL_OW 264
45286: PUSH
45287: LD_INT 14
45289: PUSH
45290: LD_INT 53
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: IN
45297: IFFALSE 45318
// points := [ 40 , 10 , 20 ] ;
45299: LD_ADDR_VAR 0 9
45303: PUSH
45304: LD_INT 40
45306: PUSH
45307: LD_INT 10
45309: PUSH
45310: LD_INT 20
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: LIST
45317: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45318: LD_VAR 0 6
45322: PPUSH
45323: CALL_OW 264
45327: PUSH
45328: LD_INT 9
45330: PUSH
45331: EMPTY
45332: LIST
45333: IN
45334: IFFALSE 45355
// points := [ 5 , 70 , 20 ] ;
45336: LD_ADDR_VAR 0 9
45340: PUSH
45341: LD_INT 5
45343: PUSH
45344: LD_INT 70
45346: PUSH
45347: LD_INT 20
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: LIST
45354: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45355: LD_VAR 0 6
45359: PPUSH
45360: CALL_OW 264
45364: PUSH
45365: LD_INT 10
45367: PUSH
45368: EMPTY
45369: LIST
45370: IN
45371: IFFALSE 45392
// points := [ 35 , 110 , 70 ] ;
45373: LD_ADDR_VAR 0 9
45377: PUSH
45378: LD_INT 35
45380: PUSH
45381: LD_INT 110
45383: PUSH
45384: LD_INT 70
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: LIST
45391: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45392: LD_VAR 0 6
45396: PPUSH
45397: CALL_OW 265
45401: PUSH
45402: LD_INT 25
45404: EQUAL
45405: IFFALSE 45426
// points := [ 80 , 65 , 100 ] ;
45407: LD_ADDR_VAR 0 9
45411: PUSH
45412: LD_INT 80
45414: PUSH
45415: LD_INT 65
45417: PUSH
45418: LD_INT 100
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: LIST
45425: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
45426: LD_VAR 0 6
45430: PPUSH
45431: CALL_OW 263
45435: PUSH
45436: LD_INT 1
45438: EQUAL
45439: IFFALSE 45474
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
45441: LD_ADDR_VAR 0 10
45445: PUSH
45446: LD_VAR 0 10
45450: PUSH
45451: LD_VAR 0 6
45455: PPUSH
45456: CALL_OW 311
45460: PPUSH
45461: LD_INT 3
45463: PPUSH
45464: CALL_OW 259
45468: PUSH
45469: LD_INT 4
45471: MUL
45472: MUL
45473: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
45474: LD_VAR 0 6
45478: PPUSH
45479: CALL_OW 263
45483: PUSH
45484: LD_INT 2
45486: EQUAL
45487: IFFALSE 45538
// begin j := IsControledBy ( i ) ;
45489: LD_ADDR_VAR 0 7
45493: PUSH
45494: LD_VAR 0 6
45498: PPUSH
45499: CALL_OW 312
45503: ST_TO_ADDR
// if j then
45504: LD_VAR 0 7
45508: IFFALSE 45538
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45510: LD_ADDR_VAR 0 10
45514: PUSH
45515: LD_VAR 0 10
45519: PUSH
45520: LD_VAR 0 7
45524: PPUSH
45525: LD_INT 3
45527: PPUSH
45528: CALL_OW 259
45532: PUSH
45533: LD_INT 3
45535: MUL
45536: MUL
45537: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
45538: LD_VAR 0 6
45542: PPUSH
45543: CALL_OW 264
45547: PUSH
45548: LD_INT 5
45550: PUSH
45551: LD_INT 6
45553: PUSH
45554: LD_INT 46
45556: PUSH
45557: LD_INT 44
45559: PUSH
45560: LD_INT 47
45562: PUSH
45563: LD_INT 45
45565: PUSH
45566: LD_INT 28
45568: PUSH
45569: LD_INT 7
45571: PUSH
45572: LD_INT 27
45574: PUSH
45575: LD_INT 29
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: IN
45590: PUSH
45591: LD_VAR 0 1
45595: PPUSH
45596: LD_INT 52
45598: PPUSH
45599: CALL_OW 321
45603: PUSH
45604: LD_INT 2
45606: EQUAL
45607: AND
45608: IFFALSE 45625
// bpoints := bpoints * 1.2 ;
45610: LD_ADDR_VAR 0 10
45614: PUSH
45615: LD_VAR 0 10
45619: PUSH
45620: LD_REAL  1.20000000000000E+0000
45623: MUL
45624: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
45625: LD_VAR 0 6
45629: PPUSH
45630: CALL_OW 264
45634: PUSH
45635: LD_INT 6
45637: PUSH
45638: LD_INT 46
45640: PUSH
45641: LD_INT 47
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: LIST
45648: IN
45649: IFFALSE 45666
// bpoints := bpoints * 1.2 ;
45651: LD_ADDR_VAR 0 10
45655: PUSH
45656: LD_VAR 0 10
45660: PUSH
45661: LD_REAL  1.20000000000000E+0000
45664: MUL
45665: ST_TO_ADDR
// end ; unit_building :
45666: GO 45680
45668: LD_INT 3
45670: DOUBLE
45671: EQUAL
45672: IFTRUE 45676
45674: GO 45679
45676: POP
// ; end ;
45677: GO 45680
45679: POP
// for j = 1 to 3 do
45680: LD_ADDR_VAR 0 7
45684: PUSH
45685: DOUBLE
45686: LD_INT 1
45688: DEC
45689: ST_TO_ADDR
45690: LD_INT 3
45692: PUSH
45693: FOR_TO
45694: IFFALSE 45747
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
45696: LD_ADDR_VAR 0 5
45700: PUSH
45701: LD_VAR 0 5
45705: PPUSH
45706: LD_VAR 0 7
45710: PPUSH
45711: LD_VAR 0 5
45715: PUSH
45716: LD_VAR 0 7
45720: ARRAY
45721: PUSH
45722: LD_VAR 0 9
45726: PUSH
45727: LD_VAR 0 7
45731: ARRAY
45732: PUSH
45733: LD_VAR 0 10
45737: MUL
45738: PLUS
45739: PPUSH
45740: CALL_OW 1
45744: ST_TO_ADDR
45745: GO 45693
45747: POP
45748: POP
// end ;
45749: GO 44226
45751: POP
45752: POP
// result := Replace ( result , 4 , tmp ) ;
45753: LD_ADDR_VAR 0 5
45757: PUSH
45758: LD_VAR 0 5
45762: PPUSH
45763: LD_INT 4
45765: PPUSH
45766: LD_VAR 0 8
45770: PPUSH
45771: CALL_OW 1
45775: ST_TO_ADDR
// end ;
45776: LD_VAR 0 5
45780: RET
// export function DangerAtRange ( unit , range ) ; begin
45781: LD_INT 0
45783: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45784: LD_ADDR_VAR 0 3
45788: PUSH
45789: LD_VAR 0 1
45793: PPUSH
45794: CALL_OW 255
45798: PPUSH
45799: LD_VAR 0 1
45803: PPUSH
45804: CALL_OW 250
45808: PPUSH
45809: LD_VAR 0 1
45813: PPUSH
45814: CALL_OW 251
45818: PPUSH
45819: LD_VAR 0 2
45823: PPUSH
45824: CALL 44078 0 4
45828: ST_TO_ADDR
// end ;
45829: LD_VAR 0 3
45833: RET
// export function DangerInArea ( side , area ) ; begin
45834: LD_INT 0
45836: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45837: LD_ADDR_VAR 0 3
45841: PUSH
45842: LD_VAR 0 2
45846: PPUSH
45847: LD_INT 81
45849: PUSH
45850: LD_VAR 0 1
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PPUSH
45859: CALL_OW 70
45863: ST_TO_ADDR
// end ;
45864: LD_VAR 0 3
45868: RET
// export function IsExtension ( b ) ; begin
45869: LD_INT 0
45871: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45872: LD_ADDR_VAR 0 2
45876: PUSH
45877: LD_VAR 0 1
45881: PUSH
45882: LD_INT 23
45884: PUSH
45885: LD_INT 20
45887: PUSH
45888: LD_INT 22
45890: PUSH
45891: LD_INT 17
45893: PUSH
45894: LD_INT 24
45896: PUSH
45897: LD_INT 21
45899: PUSH
45900: LD_INT 19
45902: PUSH
45903: LD_INT 16
45905: PUSH
45906: LD_INT 25
45908: PUSH
45909: LD_INT 18
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: IN
45924: ST_TO_ADDR
// end ;
45925: LD_VAR 0 2
45929: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45930: LD_INT 0
45932: PPUSH
45933: PPUSH
45934: PPUSH
// result := [ ] ;
45935: LD_ADDR_VAR 0 4
45939: PUSH
45940: EMPTY
45941: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45942: LD_ADDR_VAR 0 5
45946: PUSH
45947: LD_VAR 0 2
45951: PPUSH
45952: LD_INT 21
45954: PUSH
45955: LD_INT 3
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PPUSH
45962: CALL_OW 70
45966: ST_TO_ADDR
// if not tmp then
45967: LD_VAR 0 5
45971: NOT
45972: IFFALSE 45976
// exit ;
45974: GO 46040
// if checkLink then
45976: LD_VAR 0 3
45980: IFFALSE 46030
// begin for i in tmp do
45982: LD_ADDR_VAR 0 6
45986: PUSH
45987: LD_VAR 0 5
45991: PUSH
45992: FOR_IN
45993: IFFALSE 46028
// if GetBase ( i ) <> base then
45995: LD_VAR 0 6
45999: PPUSH
46000: CALL_OW 274
46004: PUSH
46005: LD_VAR 0 1
46009: NONEQUAL
46010: IFFALSE 46026
// ComLinkToBase ( base , i ) ;
46012: LD_VAR 0 1
46016: PPUSH
46017: LD_VAR 0 6
46021: PPUSH
46022: CALL_OW 169
46026: GO 45992
46028: POP
46029: POP
// end ; result := tmp ;
46030: LD_ADDR_VAR 0 4
46034: PUSH
46035: LD_VAR 0 5
46039: ST_TO_ADDR
// end ;
46040: LD_VAR 0 4
46044: RET
// export function ComComplete ( units , b ) ; var i ; begin
46045: LD_INT 0
46047: PPUSH
46048: PPUSH
// if not units then
46049: LD_VAR 0 1
46053: NOT
46054: IFFALSE 46058
// exit ;
46056: GO 46148
// for i in units do
46058: LD_ADDR_VAR 0 4
46062: PUSH
46063: LD_VAR 0 1
46067: PUSH
46068: FOR_IN
46069: IFFALSE 46146
// if BuildingStatus ( b ) = bs_build then
46071: LD_VAR 0 2
46075: PPUSH
46076: CALL_OW 461
46080: PUSH
46081: LD_INT 1
46083: EQUAL
46084: IFFALSE 46144
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46086: LD_VAR 0 4
46090: PPUSH
46091: LD_STRING h
46093: PUSH
46094: LD_VAR 0 2
46098: PPUSH
46099: CALL_OW 250
46103: PUSH
46104: LD_VAR 0 2
46108: PPUSH
46109: CALL_OW 251
46113: PUSH
46114: LD_VAR 0 2
46118: PUSH
46119: LD_INT 0
46121: PUSH
46122: LD_INT 0
46124: PUSH
46125: LD_INT 0
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: PUSH
46137: EMPTY
46138: LIST
46139: PPUSH
46140: CALL_OW 446
46144: GO 46068
46146: POP
46147: POP
// end ;
46148: LD_VAR 0 3
46152: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46153: LD_INT 0
46155: PPUSH
46156: PPUSH
46157: PPUSH
46158: PPUSH
46159: PPUSH
46160: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46161: LD_VAR 0 1
46165: NOT
46166: PUSH
46167: LD_VAR 0 1
46171: PPUSH
46172: CALL_OW 263
46176: PUSH
46177: LD_INT 2
46179: NONEQUAL
46180: OR
46181: IFFALSE 46185
// exit ;
46183: GO 46501
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46185: LD_ADDR_VAR 0 6
46189: PUSH
46190: LD_INT 22
46192: PUSH
46193: LD_VAR 0 1
46197: PPUSH
46198: CALL_OW 255
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 2
46209: PUSH
46210: LD_INT 30
46212: PUSH
46213: LD_INT 36
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 34
46222: PUSH
46223: LD_INT 31
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: LIST
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PPUSH
46239: CALL_OW 69
46243: ST_TO_ADDR
// if not tmp then
46244: LD_VAR 0 6
46248: NOT
46249: IFFALSE 46253
// exit ;
46251: GO 46501
// result := [ ] ;
46253: LD_ADDR_VAR 0 2
46257: PUSH
46258: EMPTY
46259: ST_TO_ADDR
// for i in tmp do
46260: LD_ADDR_VAR 0 3
46264: PUSH
46265: LD_VAR 0 6
46269: PUSH
46270: FOR_IN
46271: IFFALSE 46342
// begin t := UnitsInside ( i ) ;
46273: LD_ADDR_VAR 0 4
46277: PUSH
46278: LD_VAR 0 3
46282: PPUSH
46283: CALL_OW 313
46287: ST_TO_ADDR
// if t then
46288: LD_VAR 0 4
46292: IFFALSE 46340
// for j in t do
46294: LD_ADDR_VAR 0 7
46298: PUSH
46299: LD_VAR 0 4
46303: PUSH
46304: FOR_IN
46305: IFFALSE 46338
// result := Replace ( result , result + 1 , j ) ;
46307: LD_ADDR_VAR 0 2
46311: PUSH
46312: LD_VAR 0 2
46316: PPUSH
46317: LD_VAR 0 2
46321: PUSH
46322: LD_INT 1
46324: PLUS
46325: PPUSH
46326: LD_VAR 0 7
46330: PPUSH
46331: CALL_OW 1
46335: ST_TO_ADDR
46336: GO 46304
46338: POP
46339: POP
// end ;
46340: GO 46270
46342: POP
46343: POP
// if not result then
46344: LD_VAR 0 2
46348: NOT
46349: IFFALSE 46353
// exit ;
46351: GO 46501
// mech := result [ 1 ] ;
46353: LD_ADDR_VAR 0 5
46357: PUSH
46358: LD_VAR 0 2
46362: PUSH
46363: LD_INT 1
46365: ARRAY
46366: ST_TO_ADDR
// if result > 1 then
46367: LD_VAR 0 2
46371: PUSH
46372: LD_INT 1
46374: GREATER
46375: IFFALSE 46487
// begin for i = 2 to result do
46377: LD_ADDR_VAR 0 3
46381: PUSH
46382: DOUBLE
46383: LD_INT 2
46385: DEC
46386: ST_TO_ADDR
46387: LD_VAR 0 2
46391: PUSH
46392: FOR_TO
46393: IFFALSE 46485
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46395: LD_ADDR_VAR 0 4
46399: PUSH
46400: LD_VAR 0 2
46404: PUSH
46405: LD_VAR 0 3
46409: ARRAY
46410: PPUSH
46411: LD_INT 3
46413: PPUSH
46414: CALL_OW 259
46418: PUSH
46419: LD_VAR 0 2
46423: PUSH
46424: LD_VAR 0 3
46428: ARRAY
46429: PPUSH
46430: CALL_OW 432
46434: MINUS
46435: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
46436: LD_VAR 0 4
46440: PUSH
46441: LD_VAR 0 5
46445: PPUSH
46446: LD_INT 3
46448: PPUSH
46449: CALL_OW 259
46453: PUSH
46454: LD_VAR 0 5
46458: PPUSH
46459: CALL_OW 432
46463: MINUS
46464: GREATEREQUAL
46465: IFFALSE 46483
// mech := result [ i ] ;
46467: LD_ADDR_VAR 0 5
46471: PUSH
46472: LD_VAR 0 2
46476: PUSH
46477: LD_VAR 0 3
46481: ARRAY
46482: ST_TO_ADDR
// end ;
46483: GO 46392
46485: POP
46486: POP
// end ; ComLinkTo ( vehicle , mech ) ;
46487: LD_VAR 0 1
46491: PPUSH
46492: LD_VAR 0 5
46496: PPUSH
46497: CALL_OW 135
// end ;
46501: LD_VAR 0 2
46505: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
46506: LD_INT 0
46508: PPUSH
46509: PPUSH
46510: PPUSH
46511: PPUSH
46512: PPUSH
46513: PPUSH
46514: PPUSH
46515: PPUSH
46516: PPUSH
46517: PPUSH
46518: PPUSH
46519: PPUSH
46520: PPUSH
// result := [ ] ;
46521: LD_ADDR_VAR 0 7
46525: PUSH
46526: EMPTY
46527: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46528: LD_VAR 0 1
46532: PPUSH
46533: CALL_OW 266
46537: PUSH
46538: LD_INT 0
46540: PUSH
46541: LD_INT 1
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: IN
46548: NOT
46549: IFFALSE 46553
// exit ;
46551: GO 48187
// if name then
46553: LD_VAR 0 3
46557: IFFALSE 46573
// SetBName ( base_dep , name ) ;
46559: LD_VAR 0 1
46563: PPUSH
46564: LD_VAR 0 3
46568: PPUSH
46569: CALL_OW 500
// base := GetBase ( base_dep ) ;
46573: LD_ADDR_VAR 0 15
46577: PUSH
46578: LD_VAR 0 1
46582: PPUSH
46583: CALL_OW 274
46587: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
46588: LD_ADDR_VAR 0 16
46592: PUSH
46593: LD_VAR 0 1
46597: PPUSH
46598: CALL_OW 255
46602: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
46603: LD_ADDR_VAR 0 17
46607: PUSH
46608: LD_VAR 0 1
46612: PPUSH
46613: CALL_OW 248
46617: ST_TO_ADDR
// if sources then
46618: LD_VAR 0 5
46622: IFFALSE 46669
// for i = 1 to 3 do
46624: LD_ADDR_VAR 0 8
46628: PUSH
46629: DOUBLE
46630: LD_INT 1
46632: DEC
46633: ST_TO_ADDR
46634: LD_INT 3
46636: PUSH
46637: FOR_TO
46638: IFFALSE 46667
// AddResourceType ( base , i , sources [ i ] ) ;
46640: LD_VAR 0 15
46644: PPUSH
46645: LD_VAR 0 8
46649: PPUSH
46650: LD_VAR 0 5
46654: PUSH
46655: LD_VAR 0 8
46659: ARRAY
46660: PPUSH
46661: CALL_OW 276
46665: GO 46637
46667: POP
46668: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
46669: LD_ADDR_VAR 0 18
46673: PUSH
46674: LD_VAR 0 15
46678: PPUSH
46679: LD_VAR 0 2
46683: PPUSH
46684: LD_INT 1
46686: PPUSH
46687: CALL 45930 0 3
46691: ST_TO_ADDR
// InitHc ;
46692: CALL_OW 19
// InitUc ;
46696: CALL_OW 18
// uc_side := side ;
46700: LD_ADDR_OWVAR 20
46704: PUSH
46705: LD_VAR 0 16
46709: ST_TO_ADDR
// uc_nation := nation ;
46710: LD_ADDR_OWVAR 21
46714: PUSH
46715: LD_VAR 0 17
46719: ST_TO_ADDR
// if buildings then
46720: LD_VAR 0 18
46724: IFFALSE 48046
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
46726: LD_ADDR_VAR 0 19
46730: PUSH
46731: LD_VAR 0 18
46735: PPUSH
46736: LD_INT 2
46738: PUSH
46739: LD_INT 30
46741: PUSH
46742: LD_INT 29
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 30
46751: PUSH
46752: LD_INT 30
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: LIST
46763: PPUSH
46764: CALL_OW 72
46768: ST_TO_ADDR
// if tmp then
46769: LD_VAR 0 19
46773: IFFALSE 46821
// for i in tmp do
46775: LD_ADDR_VAR 0 8
46779: PUSH
46780: LD_VAR 0 19
46784: PUSH
46785: FOR_IN
46786: IFFALSE 46819
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46788: LD_VAR 0 8
46792: PPUSH
46793: CALL_OW 250
46797: PPUSH
46798: LD_VAR 0 8
46802: PPUSH
46803: CALL_OW 251
46807: PPUSH
46808: LD_VAR 0 16
46812: PPUSH
46813: CALL_OW 441
46817: GO 46785
46819: POP
46820: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46821: LD_VAR 0 18
46825: PPUSH
46826: LD_INT 2
46828: PUSH
46829: LD_INT 30
46831: PUSH
46832: LD_INT 32
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 30
46841: PUSH
46842: LD_INT 33
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: LIST
46853: PPUSH
46854: CALL_OW 72
46858: IFFALSE 46946
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46860: LD_ADDR_VAR 0 8
46864: PUSH
46865: LD_VAR 0 18
46869: PPUSH
46870: LD_INT 2
46872: PUSH
46873: LD_INT 30
46875: PUSH
46876: LD_INT 32
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 30
46885: PUSH
46886: LD_INT 33
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: LIST
46897: PPUSH
46898: CALL_OW 72
46902: PUSH
46903: FOR_IN
46904: IFFALSE 46944
// begin if not GetBWeapon ( i ) then
46906: LD_VAR 0 8
46910: PPUSH
46911: CALL_OW 269
46915: NOT
46916: IFFALSE 46942
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46918: LD_VAR 0 8
46922: PPUSH
46923: LD_VAR 0 8
46927: PPUSH
46928: LD_VAR 0 2
46932: PPUSH
46933: CALL 48192 0 2
46937: PPUSH
46938: CALL_OW 431
// end ;
46942: GO 46903
46944: POP
46945: POP
// end ; for i = 1 to personel do
46946: LD_ADDR_VAR 0 8
46950: PUSH
46951: DOUBLE
46952: LD_INT 1
46954: DEC
46955: ST_TO_ADDR
46956: LD_VAR 0 6
46960: PUSH
46961: FOR_TO
46962: IFFALSE 48026
// begin if i > 4 then
46964: LD_VAR 0 8
46968: PUSH
46969: LD_INT 4
46971: GREATER
46972: IFFALSE 46976
// break ;
46974: GO 48026
// case i of 1 :
46976: LD_VAR 0 8
46980: PUSH
46981: LD_INT 1
46983: DOUBLE
46984: EQUAL
46985: IFTRUE 46989
46987: GO 47069
46989: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46990: LD_ADDR_VAR 0 12
46994: PUSH
46995: LD_VAR 0 18
46999: PPUSH
47000: LD_INT 22
47002: PUSH
47003: LD_VAR 0 16
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 58
47014: PUSH
47015: EMPTY
47016: LIST
47017: PUSH
47018: LD_INT 2
47020: PUSH
47021: LD_INT 30
47023: PUSH
47024: LD_INT 32
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 30
47033: PUSH
47034: LD_INT 4
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 30
47043: PUSH
47044: LD_INT 5
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: LIST
47061: PPUSH
47062: CALL_OW 72
47066: ST_TO_ADDR
47067: GO 47291
47069: LD_INT 2
47071: DOUBLE
47072: EQUAL
47073: IFTRUE 47077
47075: GO 47139
47077: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47078: LD_ADDR_VAR 0 12
47082: PUSH
47083: LD_VAR 0 18
47087: PPUSH
47088: LD_INT 22
47090: PUSH
47091: LD_VAR 0 16
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 2
47102: PUSH
47103: LD_INT 30
47105: PUSH
47106: LD_INT 0
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 30
47115: PUSH
47116: LD_INT 1
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: LIST
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PPUSH
47132: CALL_OW 72
47136: ST_TO_ADDR
47137: GO 47291
47139: LD_INT 3
47141: DOUBLE
47142: EQUAL
47143: IFTRUE 47147
47145: GO 47209
47147: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47148: LD_ADDR_VAR 0 12
47152: PUSH
47153: LD_VAR 0 18
47157: PPUSH
47158: LD_INT 22
47160: PUSH
47161: LD_VAR 0 16
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 2
47172: PUSH
47173: LD_INT 30
47175: PUSH
47176: LD_INT 2
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 30
47185: PUSH
47186: LD_INT 3
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: LIST
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PPUSH
47202: CALL_OW 72
47206: ST_TO_ADDR
47207: GO 47291
47209: LD_INT 4
47211: DOUBLE
47212: EQUAL
47213: IFTRUE 47217
47215: GO 47290
47217: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47218: LD_ADDR_VAR 0 12
47222: PUSH
47223: LD_VAR 0 18
47227: PPUSH
47228: LD_INT 22
47230: PUSH
47231: LD_VAR 0 16
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 2
47242: PUSH
47243: LD_INT 30
47245: PUSH
47246: LD_INT 6
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 30
47255: PUSH
47256: LD_INT 7
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 30
47265: PUSH
47266: LD_INT 8
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PPUSH
47283: CALL_OW 72
47287: ST_TO_ADDR
47288: GO 47291
47290: POP
// if i = 1 then
47291: LD_VAR 0 8
47295: PUSH
47296: LD_INT 1
47298: EQUAL
47299: IFFALSE 47410
// begin tmp := [ ] ;
47301: LD_ADDR_VAR 0 19
47305: PUSH
47306: EMPTY
47307: ST_TO_ADDR
// for j in f do
47308: LD_ADDR_VAR 0 9
47312: PUSH
47313: LD_VAR 0 12
47317: PUSH
47318: FOR_IN
47319: IFFALSE 47392
// if GetBType ( j ) = b_bunker then
47321: LD_VAR 0 9
47325: PPUSH
47326: CALL_OW 266
47330: PUSH
47331: LD_INT 32
47333: EQUAL
47334: IFFALSE 47361
// tmp := Insert ( tmp , 1 , j ) else
47336: LD_ADDR_VAR 0 19
47340: PUSH
47341: LD_VAR 0 19
47345: PPUSH
47346: LD_INT 1
47348: PPUSH
47349: LD_VAR 0 9
47353: PPUSH
47354: CALL_OW 2
47358: ST_TO_ADDR
47359: GO 47390
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47361: LD_ADDR_VAR 0 19
47365: PUSH
47366: LD_VAR 0 19
47370: PPUSH
47371: LD_VAR 0 19
47375: PUSH
47376: LD_INT 1
47378: PLUS
47379: PPUSH
47380: LD_VAR 0 9
47384: PPUSH
47385: CALL_OW 2
47389: ST_TO_ADDR
47390: GO 47318
47392: POP
47393: POP
// if tmp then
47394: LD_VAR 0 19
47398: IFFALSE 47410
// f := tmp ;
47400: LD_ADDR_VAR 0 12
47404: PUSH
47405: LD_VAR 0 19
47409: ST_TO_ADDR
// end ; x := personel [ i ] ;
47410: LD_ADDR_VAR 0 13
47414: PUSH
47415: LD_VAR 0 6
47419: PUSH
47420: LD_VAR 0 8
47424: ARRAY
47425: ST_TO_ADDR
// if x = - 1 then
47426: LD_VAR 0 13
47430: PUSH
47431: LD_INT 1
47433: NEG
47434: EQUAL
47435: IFFALSE 47644
// begin for j in f do
47437: LD_ADDR_VAR 0 9
47441: PUSH
47442: LD_VAR 0 12
47446: PUSH
47447: FOR_IN
47448: IFFALSE 47640
// repeat InitHc ;
47450: CALL_OW 19
// if GetBType ( j ) = b_barracks then
47454: LD_VAR 0 9
47458: PPUSH
47459: CALL_OW 266
47463: PUSH
47464: LD_INT 5
47466: EQUAL
47467: IFFALSE 47537
// begin if UnitsInside ( j ) < 3 then
47469: LD_VAR 0 9
47473: PPUSH
47474: CALL_OW 313
47478: PUSH
47479: LD_INT 3
47481: LESS
47482: IFFALSE 47518
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47484: LD_INT 0
47486: PPUSH
47487: LD_INT 5
47489: PUSH
47490: LD_INT 8
47492: PUSH
47493: LD_INT 9
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: LIST
47500: PUSH
47501: LD_VAR 0 17
47505: ARRAY
47506: PPUSH
47507: LD_VAR 0 4
47511: PPUSH
47512: CALL_OW 380
47516: GO 47535
// PrepareHuman ( false , i , skill ) ;
47518: LD_INT 0
47520: PPUSH
47521: LD_VAR 0 8
47525: PPUSH
47526: LD_VAR 0 4
47530: PPUSH
47531: CALL_OW 380
// end else
47535: GO 47554
// PrepareHuman ( false , i , skill ) ;
47537: LD_INT 0
47539: PPUSH
47540: LD_VAR 0 8
47544: PPUSH
47545: LD_VAR 0 4
47549: PPUSH
47550: CALL_OW 380
// un := CreateHuman ;
47554: LD_ADDR_VAR 0 14
47558: PUSH
47559: CALL_OW 44
47563: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47564: LD_ADDR_VAR 0 7
47568: PUSH
47569: LD_VAR 0 7
47573: PPUSH
47574: LD_INT 1
47576: PPUSH
47577: LD_VAR 0 14
47581: PPUSH
47582: CALL_OW 2
47586: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
47587: LD_VAR 0 14
47591: PPUSH
47592: LD_VAR 0 9
47596: PPUSH
47597: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
47601: LD_VAR 0 9
47605: PPUSH
47606: CALL_OW 313
47610: PUSH
47611: LD_INT 6
47613: EQUAL
47614: PUSH
47615: LD_VAR 0 9
47619: PPUSH
47620: CALL_OW 266
47624: PUSH
47625: LD_INT 32
47627: PUSH
47628: LD_INT 31
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: IN
47635: OR
47636: IFFALSE 47450
47638: GO 47447
47640: POP
47641: POP
// end else
47642: GO 48024
// for j = 1 to x do
47644: LD_ADDR_VAR 0 9
47648: PUSH
47649: DOUBLE
47650: LD_INT 1
47652: DEC
47653: ST_TO_ADDR
47654: LD_VAR 0 13
47658: PUSH
47659: FOR_TO
47660: IFFALSE 48022
// begin InitHc ;
47662: CALL_OW 19
// if not f then
47666: LD_VAR 0 12
47670: NOT
47671: IFFALSE 47760
// begin PrepareHuman ( false , i , skill ) ;
47673: LD_INT 0
47675: PPUSH
47676: LD_VAR 0 8
47680: PPUSH
47681: LD_VAR 0 4
47685: PPUSH
47686: CALL_OW 380
// un := CreateHuman ;
47690: LD_ADDR_VAR 0 14
47694: PUSH
47695: CALL_OW 44
47699: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47700: LD_ADDR_VAR 0 7
47704: PUSH
47705: LD_VAR 0 7
47709: PPUSH
47710: LD_INT 1
47712: PPUSH
47713: LD_VAR 0 14
47717: PPUSH
47718: CALL_OW 2
47722: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47723: LD_VAR 0 14
47727: PPUSH
47728: LD_VAR 0 1
47732: PPUSH
47733: CALL_OW 250
47737: PPUSH
47738: LD_VAR 0 1
47742: PPUSH
47743: CALL_OW 251
47747: PPUSH
47748: LD_INT 10
47750: PPUSH
47751: LD_INT 0
47753: PPUSH
47754: CALL_OW 50
// continue ;
47758: GO 47659
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47760: LD_VAR 0 12
47764: PUSH
47765: LD_INT 1
47767: ARRAY
47768: PPUSH
47769: CALL_OW 313
47773: PUSH
47774: LD_VAR 0 12
47778: PUSH
47779: LD_INT 1
47781: ARRAY
47782: PPUSH
47783: CALL_OW 266
47787: PUSH
47788: LD_INT 32
47790: PUSH
47791: LD_INT 31
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: IN
47798: AND
47799: PUSH
47800: LD_VAR 0 12
47804: PUSH
47805: LD_INT 1
47807: ARRAY
47808: PPUSH
47809: CALL_OW 313
47813: PUSH
47814: LD_INT 6
47816: EQUAL
47817: OR
47818: IFFALSE 47838
// f := Delete ( f , 1 ) ;
47820: LD_ADDR_VAR 0 12
47824: PUSH
47825: LD_VAR 0 12
47829: PPUSH
47830: LD_INT 1
47832: PPUSH
47833: CALL_OW 3
47837: ST_TO_ADDR
// if not f then
47838: LD_VAR 0 12
47842: NOT
47843: IFFALSE 47861
// begin x := x + 2 ;
47845: LD_ADDR_VAR 0 13
47849: PUSH
47850: LD_VAR 0 13
47854: PUSH
47855: LD_INT 2
47857: PLUS
47858: ST_TO_ADDR
// continue ;
47859: GO 47659
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47861: LD_VAR 0 12
47865: PUSH
47866: LD_INT 1
47868: ARRAY
47869: PPUSH
47870: CALL_OW 266
47874: PUSH
47875: LD_INT 5
47877: EQUAL
47878: IFFALSE 47952
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47880: LD_VAR 0 12
47884: PUSH
47885: LD_INT 1
47887: ARRAY
47888: PPUSH
47889: CALL_OW 313
47893: PUSH
47894: LD_INT 3
47896: LESS
47897: IFFALSE 47933
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47899: LD_INT 0
47901: PPUSH
47902: LD_INT 5
47904: PUSH
47905: LD_INT 8
47907: PUSH
47908: LD_INT 9
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: LIST
47915: PUSH
47916: LD_VAR 0 17
47920: ARRAY
47921: PPUSH
47922: LD_VAR 0 4
47926: PPUSH
47927: CALL_OW 380
47931: GO 47950
// PrepareHuman ( false , i , skill ) ;
47933: LD_INT 0
47935: PPUSH
47936: LD_VAR 0 8
47940: PPUSH
47941: LD_VAR 0 4
47945: PPUSH
47946: CALL_OW 380
// end else
47950: GO 47969
// PrepareHuman ( false , i , skill ) ;
47952: LD_INT 0
47954: PPUSH
47955: LD_VAR 0 8
47959: PPUSH
47960: LD_VAR 0 4
47964: PPUSH
47965: CALL_OW 380
// un := CreateHuman ;
47969: LD_ADDR_VAR 0 14
47973: PUSH
47974: CALL_OW 44
47978: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47979: LD_ADDR_VAR 0 7
47983: PUSH
47984: LD_VAR 0 7
47988: PPUSH
47989: LD_INT 1
47991: PPUSH
47992: LD_VAR 0 14
47996: PPUSH
47997: CALL_OW 2
48001: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48002: LD_VAR 0 14
48006: PPUSH
48007: LD_VAR 0 12
48011: PUSH
48012: LD_INT 1
48014: ARRAY
48015: PPUSH
48016: CALL_OW 52
// end ;
48020: GO 47659
48022: POP
48023: POP
// end ;
48024: GO 46961
48026: POP
48027: POP
// result := result ^ buildings ;
48028: LD_ADDR_VAR 0 7
48032: PUSH
48033: LD_VAR 0 7
48037: PUSH
48038: LD_VAR 0 18
48042: ADD
48043: ST_TO_ADDR
// end else
48044: GO 48187
// begin for i = 1 to personel do
48046: LD_ADDR_VAR 0 8
48050: PUSH
48051: DOUBLE
48052: LD_INT 1
48054: DEC
48055: ST_TO_ADDR
48056: LD_VAR 0 6
48060: PUSH
48061: FOR_TO
48062: IFFALSE 48185
// begin if i > 4 then
48064: LD_VAR 0 8
48068: PUSH
48069: LD_INT 4
48071: GREATER
48072: IFFALSE 48076
// break ;
48074: GO 48185
// x := personel [ i ] ;
48076: LD_ADDR_VAR 0 13
48080: PUSH
48081: LD_VAR 0 6
48085: PUSH
48086: LD_VAR 0 8
48090: ARRAY
48091: ST_TO_ADDR
// if x = - 1 then
48092: LD_VAR 0 13
48096: PUSH
48097: LD_INT 1
48099: NEG
48100: EQUAL
48101: IFFALSE 48105
// continue ;
48103: GO 48061
// PrepareHuman ( false , i , skill ) ;
48105: LD_INT 0
48107: PPUSH
48108: LD_VAR 0 8
48112: PPUSH
48113: LD_VAR 0 4
48117: PPUSH
48118: CALL_OW 380
// un := CreateHuman ;
48122: LD_ADDR_VAR 0 14
48126: PUSH
48127: CALL_OW 44
48131: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48132: LD_VAR 0 14
48136: PPUSH
48137: LD_VAR 0 1
48141: PPUSH
48142: CALL_OW 250
48146: PPUSH
48147: LD_VAR 0 1
48151: PPUSH
48152: CALL_OW 251
48156: PPUSH
48157: LD_INT 10
48159: PPUSH
48160: LD_INT 0
48162: PPUSH
48163: CALL_OW 50
// result := result ^ un ;
48167: LD_ADDR_VAR 0 7
48171: PUSH
48172: LD_VAR 0 7
48176: PUSH
48177: LD_VAR 0 14
48181: ADD
48182: ST_TO_ADDR
// end ;
48183: GO 48061
48185: POP
48186: POP
// end ; end ;
48187: LD_VAR 0 7
48191: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48192: LD_INT 0
48194: PPUSH
48195: PPUSH
48196: PPUSH
48197: PPUSH
48198: PPUSH
48199: PPUSH
48200: PPUSH
48201: PPUSH
48202: PPUSH
48203: PPUSH
48204: PPUSH
48205: PPUSH
48206: PPUSH
48207: PPUSH
48208: PPUSH
48209: PPUSH
// result := false ;
48210: LD_ADDR_VAR 0 3
48214: PUSH
48215: LD_INT 0
48217: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48218: LD_VAR 0 1
48222: NOT
48223: PUSH
48224: LD_VAR 0 1
48228: PPUSH
48229: CALL_OW 266
48233: PUSH
48234: LD_INT 32
48236: PUSH
48237: LD_INT 33
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: IN
48244: NOT
48245: OR
48246: IFFALSE 48250
// exit ;
48248: GO 49359
// nat := GetNation ( tower ) ;
48250: LD_ADDR_VAR 0 12
48254: PUSH
48255: LD_VAR 0 1
48259: PPUSH
48260: CALL_OW 248
48264: ST_TO_ADDR
// side := GetSide ( tower ) ;
48265: LD_ADDR_VAR 0 16
48269: PUSH
48270: LD_VAR 0 1
48274: PPUSH
48275: CALL_OW 255
48279: ST_TO_ADDR
// x := GetX ( tower ) ;
48280: LD_ADDR_VAR 0 10
48284: PUSH
48285: LD_VAR 0 1
48289: PPUSH
48290: CALL_OW 250
48294: ST_TO_ADDR
// y := GetY ( tower ) ;
48295: LD_ADDR_VAR 0 11
48299: PUSH
48300: LD_VAR 0 1
48304: PPUSH
48305: CALL_OW 251
48309: ST_TO_ADDR
// if not x or not y then
48310: LD_VAR 0 10
48314: NOT
48315: PUSH
48316: LD_VAR 0 11
48320: NOT
48321: OR
48322: IFFALSE 48326
// exit ;
48324: GO 49359
// weapon := 0 ;
48326: LD_ADDR_VAR 0 18
48330: PUSH
48331: LD_INT 0
48333: ST_TO_ADDR
// fac_list := [ ] ;
48334: LD_ADDR_VAR 0 17
48338: PUSH
48339: EMPTY
48340: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48341: LD_ADDR_VAR 0 6
48345: PUSH
48346: LD_VAR 0 1
48350: PPUSH
48351: CALL_OW 274
48355: PPUSH
48356: LD_VAR 0 2
48360: PPUSH
48361: LD_INT 0
48363: PPUSH
48364: CALL 45930 0 3
48368: PPUSH
48369: LD_INT 30
48371: PUSH
48372: LD_INT 3
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PPUSH
48379: CALL_OW 72
48383: ST_TO_ADDR
// if not factories then
48384: LD_VAR 0 6
48388: NOT
48389: IFFALSE 48393
// exit ;
48391: GO 49359
// for i in factories do
48393: LD_ADDR_VAR 0 8
48397: PUSH
48398: LD_VAR 0 6
48402: PUSH
48403: FOR_IN
48404: IFFALSE 48429
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48406: LD_ADDR_VAR 0 17
48410: PUSH
48411: LD_VAR 0 17
48415: PUSH
48416: LD_VAR 0 8
48420: PPUSH
48421: CALL_OW 478
48425: UNION
48426: ST_TO_ADDR
48427: GO 48403
48429: POP
48430: POP
// if not fac_list then
48431: LD_VAR 0 17
48435: NOT
48436: IFFALSE 48440
// exit ;
48438: GO 49359
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48440: LD_ADDR_VAR 0 5
48444: PUSH
48445: LD_INT 4
48447: PUSH
48448: LD_INT 5
48450: PUSH
48451: LD_INT 9
48453: PUSH
48454: LD_INT 10
48456: PUSH
48457: LD_INT 6
48459: PUSH
48460: LD_INT 7
48462: PUSH
48463: LD_INT 11
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 27
48477: PUSH
48478: LD_INT 28
48480: PUSH
48481: LD_INT 26
48483: PUSH
48484: LD_INT 30
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 43
48495: PUSH
48496: LD_INT 44
48498: PUSH
48499: LD_INT 46
48501: PUSH
48502: LD_INT 45
48504: PUSH
48505: LD_INT 47
48507: PUSH
48508: LD_INT 49
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: LIST
48523: PUSH
48524: LD_VAR 0 12
48528: ARRAY
48529: ST_TO_ADDR
// list := list isect fac_list ;
48530: LD_ADDR_VAR 0 5
48534: PUSH
48535: LD_VAR 0 5
48539: PUSH
48540: LD_VAR 0 17
48544: ISECT
48545: ST_TO_ADDR
// if not list then
48546: LD_VAR 0 5
48550: NOT
48551: IFFALSE 48555
// exit ;
48553: GO 49359
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
48555: LD_VAR 0 12
48559: PUSH
48560: LD_INT 3
48562: EQUAL
48563: PUSH
48564: LD_INT 49
48566: PUSH
48567: LD_VAR 0 5
48571: IN
48572: AND
48573: PUSH
48574: LD_INT 31
48576: PPUSH
48577: LD_VAR 0 16
48581: PPUSH
48582: CALL_OW 321
48586: PUSH
48587: LD_INT 2
48589: EQUAL
48590: AND
48591: IFFALSE 48651
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
48593: LD_INT 22
48595: PUSH
48596: LD_VAR 0 16
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 35
48607: PUSH
48608: LD_INT 49
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 91
48617: PUSH
48618: LD_VAR 0 1
48622: PUSH
48623: LD_INT 10
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: LIST
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: LIST
48635: PPUSH
48636: CALL_OW 69
48640: NOT
48641: IFFALSE 48651
// weapon := ru_time_lapser ;
48643: LD_ADDR_VAR 0 18
48647: PUSH
48648: LD_INT 49
48650: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
48651: LD_VAR 0 12
48655: PUSH
48656: LD_INT 1
48658: PUSH
48659: LD_INT 2
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: IN
48666: PUSH
48667: LD_INT 11
48669: PUSH
48670: LD_VAR 0 5
48674: IN
48675: PUSH
48676: LD_INT 30
48678: PUSH
48679: LD_VAR 0 5
48683: IN
48684: OR
48685: AND
48686: PUSH
48687: LD_INT 6
48689: PPUSH
48690: LD_VAR 0 16
48694: PPUSH
48695: CALL_OW 321
48699: PUSH
48700: LD_INT 2
48702: EQUAL
48703: AND
48704: IFFALSE 48869
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
48706: LD_INT 22
48708: PUSH
48709: LD_VAR 0 16
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 2
48720: PUSH
48721: LD_INT 35
48723: PUSH
48724: LD_INT 11
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 35
48733: PUSH
48734: LD_INT 30
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 91
48748: PUSH
48749: LD_VAR 0 1
48753: PUSH
48754: LD_INT 18
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: LIST
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: LIST
48766: PPUSH
48767: CALL_OW 69
48771: NOT
48772: PUSH
48773: LD_INT 22
48775: PUSH
48776: LD_VAR 0 16
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 2
48787: PUSH
48788: LD_INT 30
48790: PUSH
48791: LD_INT 32
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 30
48800: PUSH
48801: LD_INT 33
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 91
48815: PUSH
48816: LD_VAR 0 1
48820: PUSH
48821: LD_INT 12
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: LIST
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: LIST
48833: PUSH
48834: EMPTY
48835: LIST
48836: PPUSH
48837: CALL_OW 69
48841: PUSH
48842: LD_INT 2
48844: GREATER
48845: AND
48846: IFFALSE 48869
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48848: LD_ADDR_VAR 0 18
48852: PUSH
48853: LD_INT 11
48855: PUSH
48856: LD_INT 30
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_VAR 0 12
48867: ARRAY
48868: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48869: LD_VAR 0 18
48873: NOT
48874: PUSH
48875: LD_INT 40
48877: PPUSH
48878: LD_VAR 0 16
48882: PPUSH
48883: CALL_OW 321
48887: PUSH
48888: LD_INT 2
48890: EQUAL
48891: AND
48892: PUSH
48893: LD_INT 7
48895: PUSH
48896: LD_VAR 0 5
48900: IN
48901: PUSH
48902: LD_INT 28
48904: PUSH
48905: LD_VAR 0 5
48909: IN
48910: OR
48911: PUSH
48912: LD_INT 45
48914: PUSH
48915: LD_VAR 0 5
48919: IN
48920: OR
48921: AND
48922: IFFALSE 49176
// begin hex := GetHexInfo ( x , y ) ;
48924: LD_ADDR_VAR 0 4
48928: PUSH
48929: LD_VAR 0 10
48933: PPUSH
48934: LD_VAR 0 11
48938: PPUSH
48939: CALL_OW 546
48943: ST_TO_ADDR
// if hex [ 1 ] then
48944: LD_VAR 0 4
48948: PUSH
48949: LD_INT 1
48951: ARRAY
48952: IFFALSE 48956
// exit ;
48954: GO 49359
// height := hex [ 2 ] ;
48956: LD_ADDR_VAR 0 15
48960: PUSH
48961: LD_VAR 0 4
48965: PUSH
48966: LD_INT 2
48968: ARRAY
48969: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48970: LD_ADDR_VAR 0 14
48974: PUSH
48975: LD_INT 0
48977: PUSH
48978: LD_INT 2
48980: PUSH
48981: LD_INT 3
48983: PUSH
48984: LD_INT 5
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: ST_TO_ADDR
// for i in tmp do
48993: LD_ADDR_VAR 0 8
48997: PUSH
48998: LD_VAR 0 14
49002: PUSH
49003: FOR_IN
49004: IFFALSE 49174
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49006: LD_ADDR_VAR 0 9
49010: PUSH
49011: LD_VAR 0 10
49015: PPUSH
49016: LD_VAR 0 8
49020: PPUSH
49021: LD_INT 5
49023: PPUSH
49024: CALL_OW 272
49028: PUSH
49029: LD_VAR 0 11
49033: PPUSH
49034: LD_VAR 0 8
49038: PPUSH
49039: LD_INT 5
49041: PPUSH
49042: CALL_OW 273
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49051: LD_VAR 0 9
49055: PUSH
49056: LD_INT 1
49058: ARRAY
49059: PPUSH
49060: LD_VAR 0 9
49064: PUSH
49065: LD_INT 2
49067: ARRAY
49068: PPUSH
49069: CALL_OW 488
49073: IFFALSE 49172
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49075: LD_ADDR_VAR 0 4
49079: PUSH
49080: LD_VAR 0 9
49084: PUSH
49085: LD_INT 1
49087: ARRAY
49088: PPUSH
49089: LD_VAR 0 9
49093: PUSH
49094: LD_INT 2
49096: ARRAY
49097: PPUSH
49098: CALL_OW 546
49102: ST_TO_ADDR
// if hex [ 1 ] then
49103: LD_VAR 0 4
49107: PUSH
49108: LD_INT 1
49110: ARRAY
49111: IFFALSE 49115
// continue ;
49113: GO 49003
// h := hex [ 2 ] ;
49115: LD_ADDR_VAR 0 13
49119: PUSH
49120: LD_VAR 0 4
49124: PUSH
49125: LD_INT 2
49127: ARRAY
49128: ST_TO_ADDR
// if h + 7 < height then
49129: LD_VAR 0 13
49133: PUSH
49134: LD_INT 7
49136: PLUS
49137: PUSH
49138: LD_VAR 0 15
49142: LESS
49143: IFFALSE 49172
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49145: LD_ADDR_VAR 0 18
49149: PUSH
49150: LD_INT 7
49152: PUSH
49153: LD_INT 28
49155: PUSH
49156: LD_INT 45
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: LIST
49163: PUSH
49164: LD_VAR 0 12
49168: ARRAY
49169: ST_TO_ADDR
// break ;
49170: GO 49174
// end ; end ; end ;
49172: GO 49003
49174: POP
49175: POP
// end ; if not weapon then
49176: LD_VAR 0 18
49180: NOT
49181: IFFALSE 49241
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49183: LD_ADDR_VAR 0 5
49187: PUSH
49188: LD_VAR 0 5
49192: PUSH
49193: LD_INT 11
49195: PUSH
49196: LD_INT 30
49198: PUSH
49199: LD_INT 49
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: LIST
49206: DIFF
49207: ST_TO_ADDR
// if not list then
49208: LD_VAR 0 5
49212: NOT
49213: IFFALSE 49217
// exit ;
49215: GO 49359
// weapon := list [ rand ( 1 , list ) ] ;
49217: LD_ADDR_VAR 0 18
49221: PUSH
49222: LD_VAR 0 5
49226: PUSH
49227: LD_INT 1
49229: PPUSH
49230: LD_VAR 0 5
49234: PPUSH
49235: CALL_OW 12
49239: ARRAY
49240: ST_TO_ADDR
// end ; if weapon then
49241: LD_VAR 0 18
49245: IFFALSE 49359
// begin tmp := CostOfWeapon ( weapon ) ;
49247: LD_ADDR_VAR 0 14
49251: PUSH
49252: LD_VAR 0 18
49256: PPUSH
49257: CALL_OW 451
49261: ST_TO_ADDR
// j := GetBase ( tower ) ;
49262: LD_ADDR_VAR 0 9
49266: PUSH
49267: LD_VAR 0 1
49271: PPUSH
49272: CALL_OW 274
49276: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49277: LD_VAR 0 9
49281: PPUSH
49282: LD_INT 1
49284: PPUSH
49285: CALL_OW 275
49289: PUSH
49290: LD_VAR 0 14
49294: PUSH
49295: LD_INT 1
49297: ARRAY
49298: GREATEREQUAL
49299: PUSH
49300: LD_VAR 0 9
49304: PPUSH
49305: LD_INT 2
49307: PPUSH
49308: CALL_OW 275
49312: PUSH
49313: LD_VAR 0 14
49317: PUSH
49318: LD_INT 2
49320: ARRAY
49321: GREATEREQUAL
49322: AND
49323: PUSH
49324: LD_VAR 0 9
49328: PPUSH
49329: LD_INT 3
49331: PPUSH
49332: CALL_OW 275
49336: PUSH
49337: LD_VAR 0 14
49341: PUSH
49342: LD_INT 3
49344: ARRAY
49345: GREATEREQUAL
49346: AND
49347: IFFALSE 49359
// result := weapon ;
49349: LD_ADDR_VAR 0 3
49353: PUSH
49354: LD_VAR 0 18
49358: ST_TO_ADDR
// end ; end ;
49359: LD_VAR 0 3
49363: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49364: LD_INT 0
49366: PPUSH
49367: PPUSH
// result := true ;
49368: LD_ADDR_VAR 0 3
49372: PUSH
49373: LD_INT 1
49375: ST_TO_ADDR
// if array1 = array2 then
49376: LD_VAR 0 1
49380: PUSH
49381: LD_VAR 0 2
49385: EQUAL
49386: IFFALSE 49446
// begin for i = 1 to array1 do
49388: LD_ADDR_VAR 0 4
49392: PUSH
49393: DOUBLE
49394: LD_INT 1
49396: DEC
49397: ST_TO_ADDR
49398: LD_VAR 0 1
49402: PUSH
49403: FOR_TO
49404: IFFALSE 49442
// if array1 [ i ] <> array2 [ i ] then
49406: LD_VAR 0 1
49410: PUSH
49411: LD_VAR 0 4
49415: ARRAY
49416: PUSH
49417: LD_VAR 0 2
49421: PUSH
49422: LD_VAR 0 4
49426: ARRAY
49427: NONEQUAL
49428: IFFALSE 49440
// begin result := false ;
49430: LD_ADDR_VAR 0 3
49434: PUSH
49435: LD_INT 0
49437: ST_TO_ADDR
// break ;
49438: GO 49442
// end ;
49440: GO 49403
49442: POP
49443: POP
// end else
49444: GO 49454
// result := false ;
49446: LD_ADDR_VAR 0 3
49450: PUSH
49451: LD_INT 0
49453: ST_TO_ADDR
// end ;
49454: LD_VAR 0 3
49458: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
49459: LD_INT 0
49461: PPUSH
49462: PPUSH
// if not array1 or not array2 then
49463: LD_VAR 0 1
49467: NOT
49468: PUSH
49469: LD_VAR 0 2
49473: NOT
49474: OR
49475: IFFALSE 49479
// exit ;
49477: GO 49543
// result := true ;
49479: LD_ADDR_VAR 0 3
49483: PUSH
49484: LD_INT 1
49486: ST_TO_ADDR
// for i = 1 to array1 do
49487: LD_ADDR_VAR 0 4
49491: PUSH
49492: DOUBLE
49493: LD_INT 1
49495: DEC
49496: ST_TO_ADDR
49497: LD_VAR 0 1
49501: PUSH
49502: FOR_TO
49503: IFFALSE 49541
// if array1 [ i ] <> array2 [ i ] then
49505: LD_VAR 0 1
49509: PUSH
49510: LD_VAR 0 4
49514: ARRAY
49515: PUSH
49516: LD_VAR 0 2
49520: PUSH
49521: LD_VAR 0 4
49525: ARRAY
49526: NONEQUAL
49527: IFFALSE 49539
// begin result := false ;
49529: LD_ADDR_VAR 0 3
49533: PUSH
49534: LD_INT 0
49536: ST_TO_ADDR
// break ;
49537: GO 49541
// end ;
49539: GO 49502
49541: POP
49542: POP
// end ;
49543: LD_VAR 0 3
49547: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
49548: LD_INT 0
49550: PPUSH
49551: PPUSH
49552: PPUSH
// pom := GetBase ( fac ) ;
49553: LD_ADDR_VAR 0 5
49557: PUSH
49558: LD_VAR 0 1
49562: PPUSH
49563: CALL_OW 274
49567: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
49568: LD_ADDR_VAR 0 4
49572: PUSH
49573: LD_VAR 0 2
49577: PUSH
49578: LD_INT 1
49580: ARRAY
49581: PPUSH
49582: LD_VAR 0 2
49586: PUSH
49587: LD_INT 2
49589: ARRAY
49590: PPUSH
49591: LD_VAR 0 2
49595: PUSH
49596: LD_INT 3
49598: ARRAY
49599: PPUSH
49600: LD_VAR 0 2
49604: PUSH
49605: LD_INT 4
49607: ARRAY
49608: PPUSH
49609: CALL_OW 449
49613: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49614: LD_ADDR_VAR 0 3
49618: PUSH
49619: LD_VAR 0 5
49623: PPUSH
49624: LD_INT 1
49626: PPUSH
49627: CALL_OW 275
49631: PUSH
49632: LD_VAR 0 4
49636: PUSH
49637: LD_INT 1
49639: ARRAY
49640: GREATEREQUAL
49641: PUSH
49642: LD_VAR 0 5
49646: PPUSH
49647: LD_INT 2
49649: PPUSH
49650: CALL_OW 275
49654: PUSH
49655: LD_VAR 0 4
49659: PUSH
49660: LD_INT 2
49662: ARRAY
49663: GREATEREQUAL
49664: AND
49665: PUSH
49666: LD_VAR 0 5
49670: PPUSH
49671: LD_INT 3
49673: PPUSH
49674: CALL_OW 275
49678: PUSH
49679: LD_VAR 0 4
49683: PUSH
49684: LD_INT 3
49686: ARRAY
49687: GREATEREQUAL
49688: AND
49689: ST_TO_ADDR
// end ;
49690: LD_VAR 0 3
49694: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
49695: LD_INT 0
49697: PPUSH
49698: PPUSH
49699: PPUSH
49700: PPUSH
// pom := GetBase ( building ) ;
49701: LD_ADDR_VAR 0 3
49705: PUSH
49706: LD_VAR 0 1
49710: PPUSH
49711: CALL_OW 274
49715: ST_TO_ADDR
// if not pom then
49716: LD_VAR 0 3
49720: NOT
49721: IFFALSE 49725
// exit ;
49723: GO 49895
// btype := GetBType ( building ) ;
49725: LD_ADDR_VAR 0 5
49729: PUSH
49730: LD_VAR 0 1
49734: PPUSH
49735: CALL_OW 266
49739: ST_TO_ADDR
// if btype = b_armoury then
49740: LD_VAR 0 5
49744: PUSH
49745: LD_INT 4
49747: EQUAL
49748: IFFALSE 49758
// btype := b_barracks ;
49750: LD_ADDR_VAR 0 5
49754: PUSH
49755: LD_INT 5
49757: ST_TO_ADDR
// if btype = b_depot then
49758: LD_VAR 0 5
49762: PUSH
49763: LD_INT 0
49765: EQUAL
49766: IFFALSE 49776
// btype := b_warehouse ;
49768: LD_ADDR_VAR 0 5
49772: PUSH
49773: LD_INT 1
49775: ST_TO_ADDR
// if btype = b_workshop then
49776: LD_VAR 0 5
49780: PUSH
49781: LD_INT 2
49783: EQUAL
49784: IFFALSE 49794
// btype := b_factory ;
49786: LD_ADDR_VAR 0 5
49790: PUSH
49791: LD_INT 3
49793: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49794: LD_ADDR_VAR 0 4
49798: PUSH
49799: LD_VAR 0 5
49803: PPUSH
49804: LD_VAR 0 1
49808: PPUSH
49809: CALL_OW 248
49813: PPUSH
49814: CALL_OW 450
49818: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49819: LD_ADDR_VAR 0 2
49823: PUSH
49824: LD_VAR 0 3
49828: PPUSH
49829: LD_INT 1
49831: PPUSH
49832: CALL_OW 275
49836: PUSH
49837: LD_VAR 0 4
49841: PUSH
49842: LD_INT 1
49844: ARRAY
49845: GREATEREQUAL
49846: PUSH
49847: LD_VAR 0 3
49851: PPUSH
49852: LD_INT 2
49854: PPUSH
49855: CALL_OW 275
49859: PUSH
49860: LD_VAR 0 4
49864: PUSH
49865: LD_INT 2
49867: ARRAY
49868: GREATEREQUAL
49869: AND
49870: PUSH
49871: LD_VAR 0 3
49875: PPUSH
49876: LD_INT 3
49878: PPUSH
49879: CALL_OW 275
49883: PUSH
49884: LD_VAR 0 4
49888: PUSH
49889: LD_INT 3
49891: ARRAY
49892: GREATEREQUAL
49893: AND
49894: ST_TO_ADDR
// end ;
49895: LD_VAR 0 2
49899: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49900: LD_INT 0
49902: PPUSH
49903: PPUSH
49904: PPUSH
// pom := GetBase ( building ) ;
49905: LD_ADDR_VAR 0 4
49909: PUSH
49910: LD_VAR 0 1
49914: PPUSH
49915: CALL_OW 274
49919: ST_TO_ADDR
// if not pom then
49920: LD_VAR 0 4
49924: NOT
49925: IFFALSE 49929
// exit ;
49927: GO 50030
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49929: LD_ADDR_VAR 0 5
49933: PUSH
49934: LD_VAR 0 2
49938: PPUSH
49939: LD_VAR 0 1
49943: PPUSH
49944: CALL_OW 248
49948: PPUSH
49949: CALL_OW 450
49953: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49954: LD_ADDR_VAR 0 3
49958: PUSH
49959: LD_VAR 0 4
49963: PPUSH
49964: LD_INT 1
49966: PPUSH
49967: CALL_OW 275
49971: PUSH
49972: LD_VAR 0 5
49976: PUSH
49977: LD_INT 1
49979: ARRAY
49980: GREATEREQUAL
49981: PUSH
49982: LD_VAR 0 4
49986: PPUSH
49987: LD_INT 2
49989: PPUSH
49990: CALL_OW 275
49994: PUSH
49995: LD_VAR 0 5
49999: PUSH
50000: LD_INT 2
50002: ARRAY
50003: GREATEREQUAL
50004: AND
50005: PUSH
50006: LD_VAR 0 4
50010: PPUSH
50011: LD_INT 3
50013: PPUSH
50014: CALL_OW 275
50018: PUSH
50019: LD_VAR 0 5
50023: PUSH
50024: LD_INT 3
50026: ARRAY
50027: GREATEREQUAL
50028: AND
50029: ST_TO_ADDR
// end ;
50030: LD_VAR 0 3
50034: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50035: LD_INT 0
50037: PPUSH
50038: PPUSH
50039: PPUSH
50040: PPUSH
50041: PPUSH
50042: PPUSH
50043: PPUSH
50044: PPUSH
50045: PPUSH
50046: PPUSH
50047: PPUSH
// result := false ;
50048: LD_ADDR_VAR 0 8
50052: PUSH
50053: LD_INT 0
50055: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50056: LD_VAR 0 5
50060: NOT
50061: PUSH
50062: LD_VAR 0 1
50066: NOT
50067: OR
50068: PUSH
50069: LD_VAR 0 2
50073: NOT
50074: OR
50075: PUSH
50076: LD_VAR 0 3
50080: NOT
50081: OR
50082: IFFALSE 50086
// exit ;
50084: GO 50900
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50086: LD_ADDR_VAR 0 14
50090: PUSH
50091: LD_VAR 0 1
50095: PPUSH
50096: LD_VAR 0 2
50100: PPUSH
50101: LD_VAR 0 3
50105: PPUSH
50106: LD_VAR 0 4
50110: PPUSH
50111: LD_VAR 0 5
50115: PUSH
50116: LD_INT 1
50118: ARRAY
50119: PPUSH
50120: CALL_OW 248
50124: PPUSH
50125: LD_INT 0
50127: PPUSH
50128: CALL 52137 0 6
50132: ST_TO_ADDR
// if not hexes then
50133: LD_VAR 0 14
50137: NOT
50138: IFFALSE 50142
// exit ;
50140: GO 50900
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50142: LD_ADDR_VAR 0 17
50146: PUSH
50147: LD_VAR 0 5
50151: PPUSH
50152: LD_INT 22
50154: PUSH
50155: LD_VAR 0 13
50159: PPUSH
50160: CALL_OW 255
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 2
50171: PUSH
50172: LD_INT 30
50174: PUSH
50175: LD_INT 0
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 30
50184: PUSH
50185: LD_INT 1
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: LIST
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PPUSH
50201: CALL_OW 72
50205: ST_TO_ADDR
// for i = 1 to hexes do
50206: LD_ADDR_VAR 0 9
50210: PUSH
50211: DOUBLE
50212: LD_INT 1
50214: DEC
50215: ST_TO_ADDR
50216: LD_VAR 0 14
50220: PUSH
50221: FOR_TO
50222: IFFALSE 50898
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50224: LD_ADDR_VAR 0 13
50228: PUSH
50229: LD_VAR 0 14
50233: PUSH
50234: LD_VAR 0 9
50238: ARRAY
50239: PUSH
50240: LD_INT 1
50242: ARRAY
50243: PPUSH
50244: LD_VAR 0 14
50248: PUSH
50249: LD_VAR 0 9
50253: ARRAY
50254: PUSH
50255: LD_INT 2
50257: ARRAY
50258: PPUSH
50259: CALL_OW 428
50263: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50264: LD_VAR 0 14
50268: PUSH
50269: LD_VAR 0 9
50273: ARRAY
50274: PUSH
50275: LD_INT 1
50277: ARRAY
50278: PPUSH
50279: LD_VAR 0 14
50283: PUSH
50284: LD_VAR 0 9
50288: ARRAY
50289: PUSH
50290: LD_INT 2
50292: ARRAY
50293: PPUSH
50294: CALL_OW 351
50298: PUSH
50299: LD_VAR 0 14
50303: PUSH
50304: LD_VAR 0 9
50308: ARRAY
50309: PUSH
50310: LD_INT 1
50312: ARRAY
50313: PPUSH
50314: LD_VAR 0 14
50318: PUSH
50319: LD_VAR 0 9
50323: ARRAY
50324: PUSH
50325: LD_INT 2
50327: ARRAY
50328: PPUSH
50329: CALL_OW 488
50333: NOT
50334: OR
50335: PUSH
50336: LD_VAR 0 13
50340: PPUSH
50341: CALL_OW 247
50345: PUSH
50346: LD_INT 3
50348: EQUAL
50349: OR
50350: IFFALSE 50356
// exit ;
50352: POP
50353: POP
50354: GO 50900
// if not tmp then
50356: LD_VAR 0 13
50360: NOT
50361: IFFALSE 50365
// continue ;
50363: GO 50221
// result := true ;
50365: LD_ADDR_VAR 0 8
50369: PUSH
50370: LD_INT 1
50372: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50373: LD_VAR 0 6
50377: PUSH
50378: LD_VAR 0 13
50382: PPUSH
50383: CALL_OW 247
50387: PUSH
50388: LD_INT 2
50390: EQUAL
50391: AND
50392: PUSH
50393: LD_VAR 0 13
50397: PPUSH
50398: CALL_OW 263
50402: PUSH
50403: LD_INT 1
50405: EQUAL
50406: AND
50407: IFFALSE 50571
// begin if IsDrivenBy ( tmp ) then
50409: LD_VAR 0 13
50413: PPUSH
50414: CALL_OW 311
50418: IFFALSE 50422
// continue ;
50420: GO 50221
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
50422: LD_VAR 0 6
50426: PPUSH
50427: LD_INT 3
50429: PUSH
50430: LD_INT 60
50432: PUSH
50433: EMPTY
50434: LIST
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 3
50442: PUSH
50443: LD_INT 55
50445: PUSH
50446: EMPTY
50447: LIST
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PPUSH
50457: CALL_OW 72
50461: IFFALSE 50569
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
50463: LD_ADDR_VAR 0 18
50467: PUSH
50468: LD_VAR 0 6
50472: PPUSH
50473: LD_INT 3
50475: PUSH
50476: LD_INT 60
50478: PUSH
50479: EMPTY
50480: LIST
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 3
50488: PUSH
50489: LD_INT 55
50491: PUSH
50492: EMPTY
50493: LIST
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PPUSH
50503: CALL_OW 72
50507: PUSH
50508: LD_INT 1
50510: ARRAY
50511: ST_TO_ADDR
// if IsInUnit ( driver ) then
50512: LD_VAR 0 18
50516: PPUSH
50517: CALL_OW 310
50521: IFFALSE 50532
// ComExit ( driver ) ;
50523: LD_VAR 0 18
50527: PPUSH
50528: CALL 75265 0 1
// AddComEnterUnit ( driver , tmp ) ;
50532: LD_VAR 0 18
50536: PPUSH
50537: LD_VAR 0 13
50541: PPUSH
50542: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
50546: LD_VAR 0 18
50550: PPUSH
50551: LD_VAR 0 7
50555: PPUSH
50556: CALL_OW 173
// AddComExitVehicle ( driver ) ;
50560: LD_VAR 0 18
50564: PPUSH
50565: CALL_OW 181
// end ; continue ;
50569: GO 50221
// end ; if not cleaners or not tmp in cleaners then
50571: LD_VAR 0 6
50575: NOT
50576: PUSH
50577: LD_VAR 0 13
50581: PUSH
50582: LD_VAR 0 6
50586: IN
50587: NOT
50588: OR
50589: IFFALSE 50896
// begin if dep then
50591: LD_VAR 0 17
50595: IFFALSE 50731
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
50597: LD_ADDR_VAR 0 16
50601: PUSH
50602: LD_VAR 0 17
50606: PUSH
50607: LD_INT 1
50609: ARRAY
50610: PPUSH
50611: CALL_OW 250
50615: PPUSH
50616: LD_VAR 0 17
50620: PUSH
50621: LD_INT 1
50623: ARRAY
50624: PPUSH
50625: CALL_OW 254
50629: PPUSH
50630: LD_INT 5
50632: PPUSH
50633: CALL_OW 272
50637: PUSH
50638: LD_VAR 0 17
50642: PUSH
50643: LD_INT 1
50645: ARRAY
50646: PPUSH
50647: CALL_OW 251
50651: PPUSH
50652: LD_VAR 0 17
50656: PUSH
50657: LD_INT 1
50659: ARRAY
50660: PPUSH
50661: CALL_OW 254
50665: PPUSH
50666: LD_INT 5
50668: PPUSH
50669: CALL_OW 273
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
50678: LD_VAR 0 16
50682: PUSH
50683: LD_INT 1
50685: ARRAY
50686: PPUSH
50687: LD_VAR 0 16
50691: PUSH
50692: LD_INT 2
50694: ARRAY
50695: PPUSH
50696: CALL_OW 488
50700: IFFALSE 50731
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
50702: LD_VAR 0 13
50706: PPUSH
50707: LD_VAR 0 16
50711: PUSH
50712: LD_INT 1
50714: ARRAY
50715: PPUSH
50716: LD_VAR 0 16
50720: PUSH
50721: LD_INT 2
50723: ARRAY
50724: PPUSH
50725: CALL_OW 111
// continue ;
50729: GO 50221
// end ; end ; r := GetDir ( tmp ) ;
50731: LD_ADDR_VAR 0 15
50735: PUSH
50736: LD_VAR 0 13
50740: PPUSH
50741: CALL_OW 254
50745: ST_TO_ADDR
// if r = 5 then
50746: LD_VAR 0 15
50750: PUSH
50751: LD_INT 5
50753: EQUAL
50754: IFFALSE 50764
// r := 0 ;
50756: LD_ADDR_VAR 0 15
50760: PUSH
50761: LD_INT 0
50763: ST_TO_ADDR
// for j = r to 5 do
50764: LD_ADDR_VAR 0 10
50768: PUSH
50769: DOUBLE
50770: LD_VAR 0 15
50774: DEC
50775: ST_TO_ADDR
50776: LD_INT 5
50778: PUSH
50779: FOR_TO
50780: IFFALSE 50894
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50782: LD_ADDR_VAR 0 11
50786: PUSH
50787: LD_VAR 0 13
50791: PPUSH
50792: CALL_OW 250
50796: PPUSH
50797: LD_VAR 0 10
50801: PPUSH
50802: LD_INT 2
50804: PPUSH
50805: CALL_OW 272
50809: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50810: LD_ADDR_VAR 0 12
50814: PUSH
50815: LD_VAR 0 13
50819: PPUSH
50820: CALL_OW 251
50824: PPUSH
50825: LD_VAR 0 10
50829: PPUSH
50830: LD_INT 2
50832: PPUSH
50833: CALL_OW 273
50837: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50838: LD_VAR 0 11
50842: PPUSH
50843: LD_VAR 0 12
50847: PPUSH
50848: CALL_OW 488
50852: PUSH
50853: LD_VAR 0 11
50857: PPUSH
50858: LD_VAR 0 12
50862: PPUSH
50863: CALL_OW 428
50867: NOT
50868: AND
50869: IFFALSE 50892
// begin ComMoveXY ( tmp , _x , _y ) ;
50871: LD_VAR 0 13
50875: PPUSH
50876: LD_VAR 0 11
50880: PPUSH
50881: LD_VAR 0 12
50885: PPUSH
50886: CALL_OW 111
// break ;
50890: GO 50894
// end ; end ;
50892: GO 50779
50894: POP
50895: POP
// end ; end ;
50896: GO 50221
50898: POP
50899: POP
// end ;
50900: LD_VAR 0 8
50904: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50905: LD_INT 0
50907: PPUSH
// result := true ;
50908: LD_ADDR_VAR 0 3
50912: PUSH
50913: LD_INT 1
50915: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50916: LD_VAR 0 2
50920: PUSH
50921: LD_INT 24
50923: DOUBLE
50924: EQUAL
50925: IFTRUE 50935
50927: LD_INT 33
50929: DOUBLE
50930: EQUAL
50931: IFTRUE 50935
50933: GO 50960
50935: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50936: LD_ADDR_VAR 0 3
50940: PUSH
50941: LD_INT 32
50943: PPUSH
50944: LD_VAR 0 1
50948: PPUSH
50949: CALL_OW 321
50953: PUSH
50954: LD_INT 2
50956: EQUAL
50957: ST_TO_ADDR
50958: GO 51280
50960: LD_INT 20
50962: DOUBLE
50963: EQUAL
50964: IFTRUE 50968
50966: GO 50993
50968: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50969: LD_ADDR_VAR 0 3
50973: PUSH
50974: LD_INT 6
50976: PPUSH
50977: LD_VAR 0 1
50981: PPUSH
50982: CALL_OW 321
50986: PUSH
50987: LD_INT 2
50989: EQUAL
50990: ST_TO_ADDR
50991: GO 51280
50993: LD_INT 22
50995: DOUBLE
50996: EQUAL
50997: IFTRUE 51007
50999: LD_INT 36
51001: DOUBLE
51002: EQUAL
51003: IFTRUE 51007
51005: GO 51032
51007: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51008: LD_ADDR_VAR 0 3
51012: PUSH
51013: LD_INT 15
51015: PPUSH
51016: LD_VAR 0 1
51020: PPUSH
51021: CALL_OW 321
51025: PUSH
51026: LD_INT 2
51028: EQUAL
51029: ST_TO_ADDR
51030: GO 51280
51032: LD_INT 30
51034: DOUBLE
51035: EQUAL
51036: IFTRUE 51040
51038: GO 51065
51040: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51041: LD_ADDR_VAR 0 3
51045: PUSH
51046: LD_INT 20
51048: PPUSH
51049: LD_VAR 0 1
51053: PPUSH
51054: CALL_OW 321
51058: PUSH
51059: LD_INT 2
51061: EQUAL
51062: ST_TO_ADDR
51063: GO 51280
51065: LD_INT 28
51067: DOUBLE
51068: EQUAL
51069: IFTRUE 51079
51071: LD_INT 21
51073: DOUBLE
51074: EQUAL
51075: IFTRUE 51079
51077: GO 51104
51079: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51080: LD_ADDR_VAR 0 3
51084: PUSH
51085: LD_INT 21
51087: PPUSH
51088: LD_VAR 0 1
51092: PPUSH
51093: CALL_OW 321
51097: PUSH
51098: LD_INT 2
51100: EQUAL
51101: ST_TO_ADDR
51102: GO 51280
51104: LD_INT 16
51106: DOUBLE
51107: EQUAL
51108: IFTRUE 51112
51110: GO 51139
51112: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51113: LD_ADDR_VAR 0 3
51117: PUSH
51118: LD_EXP 58
51122: PPUSH
51123: LD_VAR 0 1
51127: PPUSH
51128: CALL_OW 321
51132: PUSH
51133: LD_INT 2
51135: EQUAL
51136: ST_TO_ADDR
51137: GO 51280
51139: LD_INT 19
51141: DOUBLE
51142: EQUAL
51143: IFTRUE 51153
51145: LD_INT 23
51147: DOUBLE
51148: EQUAL
51149: IFTRUE 51153
51151: GO 51180
51153: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51154: LD_ADDR_VAR 0 3
51158: PUSH
51159: LD_EXP 57
51163: PPUSH
51164: LD_VAR 0 1
51168: PPUSH
51169: CALL_OW 321
51173: PUSH
51174: LD_INT 2
51176: EQUAL
51177: ST_TO_ADDR
51178: GO 51280
51180: LD_INT 17
51182: DOUBLE
51183: EQUAL
51184: IFTRUE 51188
51186: GO 51213
51188: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51189: LD_ADDR_VAR 0 3
51193: PUSH
51194: LD_INT 39
51196: PPUSH
51197: LD_VAR 0 1
51201: PPUSH
51202: CALL_OW 321
51206: PUSH
51207: LD_INT 2
51209: EQUAL
51210: ST_TO_ADDR
51211: GO 51280
51213: LD_INT 18
51215: DOUBLE
51216: EQUAL
51217: IFTRUE 51221
51219: GO 51246
51221: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51222: LD_ADDR_VAR 0 3
51226: PUSH
51227: LD_INT 40
51229: PPUSH
51230: LD_VAR 0 1
51234: PPUSH
51235: CALL_OW 321
51239: PUSH
51240: LD_INT 2
51242: EQUAL
51243: ST_TO_ADDR
51244: GO 51280
51246: LD_INT 27
51248: DOUBLE
51249: EQUAL
51250: IFTRUE 51254
51252: GO 51279
51254: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51255: LD_ADDR_VAR 0 3
51259: PUSH
51260: LD_INT 35
51262: PPUSH
51263: LD_VAR 0 1
51267: PPUSH
51268: CALL_OW 321
51272: PUSH
51273: LD_INT 2
51275: EQUAL
51276: ST_TO_ADDR
51277: GO 51280
51279: POP
// end ;
51280: LD_VAR 0 3
51284: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
51285: LD_INT 0
51287: PPUSH
51288: PPUSH
51289: PPUSH
51290: PPUSH
51291: PPUSH
51292: PPUSH
51293: PPUSH
51294: PPUSH
51295: PPUSH
51296: PPUSH
51297: PPUSH
// result := false ;
51298: LD_ADDR_VAR 0 6
51302: PUSH
51303: LD_INT 0
51305: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51306: LD_VAR 0 1
51310: NOT
51311: PUSH
51312: LD_VAR 0 1
51316: PPUSH
51317: CALL_OW 266
51321: PUSH
51322: LD_INT 0
51324: PUSH
51325: LD_INT 1
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: IN
51332: NOT
51333: OR
51334: PUSH
51335: LD_VAR 0 2
51339: NOT
51340: OR
51341: PUSH
51342: LD_VAR 0 5
51346: PUSH
51347: LD_INT 0
51349: PUSH
51350: LD_INT 1
51352: PUSH
51353: LD_INT 2
51355: PUSH
51356: LD_INT 3
51358: PUSH
51359: LD_INT 4
51361: PUSH
51362: LD_INT 5
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: IN
51373: NOT
51374: OR
51375: PUSH
51376: LD_VAR 0 3
51380: PPUSH
51381: LD_VAR 0 4
51385: PPUSH
51386: CALL_OW 488
51390: NOT
51391: OR
51392: IFFALSE 51396
// exit ;
51394: GO 52132
// side := GetSide ( depot ) ;
51396: LD_ADDR_VAR 0 9
51400: PUSH
51401: LD_VAR 0 1
51405: PPUSH
51406: CALL_OW 255
51410: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
51411: LD_VAR 0 9
51415: PPUSH
51416: LD_VAR 0 2
51420: PPUSH
51421: CALL 50905 0 2
51425: NOT
51426: IFFALSE 51430
// exit ;
51428: GO 52132
// pom := GetBase ( depot ) ;
51430: LD_ADDR_VAR 0 10
51434: PUSH
51435: LD_VAR 0 1
51439: PPUSH
51440: CALL_OW 274
51444: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51445: LD_ADDR_VAR 0 11
51449: PUSH
51450: LD_VAR 0 2
51454: PPUSH
51455: LD_VAR 0 1
51459: PPUSH
51460: CALL_OW 248
51464: PPUSH
51465: CALL_OW 450
51469: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51470: LD_VAR 0 10
51474: PPUSH
51475: LD_INT 1
51477: PPUSH
51478: CALL_OW 275
51482: PUSH
51483: LD_VAR 0 11
51487: PUSH
51488: LD_INT 1
51490: ARRAY
51491: GREATEREQUAL
51492: PUSH
51493: LD_VAR 0 10
51497: PPUSH
51498: LD_INT 2
51500: PPUSH
51501: CALL_OW 275
51505: PUSH
51506: LD_VAR 0 11
51510: PUSH
51511: LD_INT 2
51513: ARRAY
51514: GREATEREQUAL
51515: AND
51516: PUSH
51517: LD_VAR 0 10
51521: PPUSH
51522: LD_INT 3
51524: PPUSH
51525: CALL_OW 275
51529: PUSH
51530: LD_VAR 0 11
51534: PUSH
51535: LD_INT 3
51537: ARRAY
51538: GREATEREQUAL
51539: AND
51540: NOT
51541: IFFALSE 51545
// exit ;
51543: GO 52132
// if GetBType ( depot ) = b_depot then
51545: LD_VAR 0 1
51549: PPUSH
51550: CALL_OW 266
51554: PUSH
51555: LD_INT 0
51557: EQUAL
51558: IFFALSE 51570
// dist := 28 else
51560: LD_ADDR_VAR 0 14
51564: PUSH
51565: LD_INT 28
51567: ST_TO_ADDR
51568: GO 51578
// dist := 36 ;
51570: LD_ADDR_VAR 0 14
51574: PUSH
51575: LD_INT 36
51577: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
51578: LD_VAR 0 1
51582: PPUSH
51583: LD_VAR 0 3
51587: PPUSH
51588: LD_VAR 0 4
51592: PPUSH
51593: CALL_OW 297
51597: PUSH
51598: LD_VAR 0 14
51602: GREATER
51603: IFFALSE 51607
// exit ;
51605: GO 52132
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
51607: LD_ADDR_VAR 0 12
51611: PUSH
51612: LD_VAR 0 2
51616: PPUSH
51617: LD_VAR 0 3
51621: PPUSH
51622: LD_VAR 0 4
51626: PPUSH
51627: LD_VAR 0 5
51631: PPUSH
51632: LD_VAR 0 1
51636: PPUSH
51637: CALL_OW 248
51641: PPUSH
51642: LD_INT 0
51644: PPUSH
51645: CALL 52137 0 6
51649: ST_TO_ADDR
// if not hexes then
51650: LD_VAR 0 12
51654: NOT
51655: IFFALSE 51659
// exit ;
51657: GO 52132
// hex := GetHexInfo ( x , y ) ;
51659: LD_ADDR_VAR 0 15
51663: PUSH
51664: LD_VAR 0 3
51668: PPUSH
51669: LD_VAR 0 4
51673: PPUSH
51674: CALL_OW 546
51678: ST_TO_ADDR
// if hex [ 1 ] then
51679: LD_VAR 0 15
51683: PUSH
51684: LD_INT 1
51686: ARRAY
51687: IFFALSE 51691
// exit ;
51689: GO 52132
// height := hex [ 2 ] ;
51691: LD_ADDR_VAR 0 13
51695: PUSH
51696: LD_VAR 0 15
51700: PUSH
51701: LD_INT 2
51703: ARRAY
51704: ST_TO_ADDR
// for i = 1 to hexes do
51705: LD_ADDR_VAR 0 7
51709: PUSH
51710: DOUBLE
51711: LD_INT 1
51713: DEC
51714: ST_TO_ADDR
51715: LD_VAR 0 12
51719: PUSH
51720: FOR_TO
51721: IFFALSE 52051
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51723: LD_VAR 0 12
51727: PUSH
51728: LD_VAR 0 7
51732: ARRAY
51733: PUSH
51734: LD_INT 1
51736: ARRAY
51737: PPUSH
51738: LD_VAR 0 12
51742: PUSH
51743: LD_VAR 0 7
51747: ARRAY
51748: PUSH
51749: LD_INT 2
51751: ARRAY
51752: PPUSH
51753: CALL_OW 488
51757: NOT
51758: PUSH
51759: LD_VAR 0 12
51763: PUSH
51764: LD_VAR 0 7
51768: ARRAY
51769: PUSH
51770: LD_INT 1
51772: ARRAY
51773: PPUSH
51774: LD_VAR 0 12
51778: PUSH
51779: LD_VAR 0 7
51783: ARRAY
51784: PUSH
51785: LD_INT 2
51787: ARRAY
51788: PPUSH
51789: CALL_OW 428
51793: PUSH
51794: LD_INT 0
51796: GREATER
51797: OR
51798: PUSH
51799: LD_VAR 0 12
51803: PUSH
51804: LD_VAR 0 7
51808: ARRAY
51809: PUSH
51810: LD_INT 1
51812: ARRAY
51813: PPUSH
51814: LD_VAR 0 12
51818: PUSH
51819: LD_VAR 0 7
51823: ARRAY
51824: PUSH
51825: LD_INT 2
51827: ARRAY
51828: PPUSH
51829: CALL_OW 351
51833: OR
51834: IFFALSE 51840
// exit ;
51836: POP
51837: POP
51838: GO 52132
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51840: LD_ADDR_VAR 0 8
51844: PUSH
51845: LD_VAR 0 12
51849: PUSH
51850: LD_VAR 0 7
51854: ARRAY
51855: PUSH
51856: LD_INT 1
51858: ARRAY
51859: PPUSH
51860: LD_VAR 0 12
51864: PUSH
51865: LD_VAR 0 7
51869: ARRAY
51870: PUSH
51871: LD_INT 2
51873: ARRAY
51874: PPUSH
51875: CALL_OW 546
51879: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51880: LD_VAR 0 8
51884: PUSH
51885: LD_INT 1
51887: ARRAY
51888: PUSH
51889: LD_VAR 0 8
51893: PUSH
51894: LD_INT 2
51896: ARRAY
51897: PUSH
51898: LD_VAR 0 13
51902: PUSH
51903: LD_INT 2
51905: PLUS
51906: GREATER
51907: OR
51908: PUSH
51909: LD_VAR 0 8
51913: PUSH
51914: LD_INT 2
51916: ARRAY
51917: PUSH
51918: LD_VAR 0 13
51922: PUSH
51923: LD_INT 2
51925: MINUS
51926: LESS
51927: OR
51928: PUSH
51929: LD_VAR 0 8
51933: PUSH
51934: LD_INT 3
51936: ARRAY
51937: PUSH
51938: LD_INT 0
51940: PUSH
51941: LD_INT 8
51943: PUSH
51944: LD_INT 9
51946: PUSH
51947: LD_INT 10
51949: PUSH
51950: LD_INT 11
51952: PUSH
51953: LD_INT 12
51955: PUSH
51956: LD_INT 13
51958: PUSH
51959: LD_INT 16
51961: PUSH
51962: LD_INT 17
51964: PUSH
51965: LD_INT 18
51967: PUSH
51968: LD_INT 19
51970: PUSH
51971: LD_INT 20
51973: PUSH
51974: LD_INT 21
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: IN
51992: NOT
51993: OR
51994: PUSH
51995: LD_VAR 0 8
51999: PUSH
52000: LD_INT 5
52002: ARRAY
52003: NOT
52004: OR
52005: PUSH
52006: LD_VAR 0 8
52010: PUSH
52011: LD_INT 6
52013: ARRAY
52014: PUSH
52015: LD_INT 1
52017: PUSH
52018: LD_INT 2
52020: PUSH
52021: LD_INT 7
52023: PUSH
52024: LD_INT 9
52026: PUSH
52027: LD_INT 10
52029: PUSH
52030: LD_INT 11
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: IN
52041: NOT
52042: OR
52043: IFFALSE 52049
// exit ;
52045: POP
52046: POP
52047: GO 52132
// end ;
52049: GO 51720
52051: POP
52052: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52053: LD_VAR 0 9
52057: PPUSH
52058: LD_VAR 0 3
52062: PPUSH
52063: LD_VAR 0 4
52067: PPUSH
52068: LD_INT 20
52070: PPUSH
52071: CALL 44078 0 4
52075: PUSH
52076: LD_INT 4
52078: ARRAY
52079: IFFALSE 52083
// exit ;
52081: GO 52132
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52083: LD_VAR 0 2
52087: PUSH
52088: LD_INT 29
52090: PUSH
52091: LD_INT 30
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: IN
52098: PUSH
52099: LD_VAR 0 3
52103: PPUSH
52104: LD_VAR 0 4
52108: PPUSH
52109: LD_VAR 0 9
52113: PPUSH
52114: CALL_OW 440
52118: NOT
52119: AND
52120: IFFALSE 52124
// exit ;
52122: GO 52132
// result := true ;
52124: LD_ADDR_VAR 0 6
52128: PUSH
52129: LD_INT 1
52131: ST_TO_ADDR
// end ;
52132: LD_VAR 0 6
52136: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52137: LD_INT 0
52139: PPUSH
52140: PPUSH
52141: PPUSH
52142: PPUSH
52143: PPUSH
52144: PPUSH
52145: PPUSH
52146: PPUSH
52147: PPUSH
52148: PPUSH
52149: PPUSH
52150: PPUSH
52151: PPUSH
52152: PPUSH
52153: PPUSH
52154: PPUSH
52155: PPUSH
52156: PPUSH
52157: PPUSH
52158: PPUSH
52159: PPUSH
52160: PPUSH
52161: PPUSH
52162: PPUSH
52163: PPUSH
52164: PPUSH
52165: PPUSH
52166: PPUSH
52167: PPUSH
52168: PPUSH
52169: PPUSH
52170: PPUSH
52171: PPUSH
52172: PPUSH
52173: PPUSH
52174: PPUSH
52175: PPUSH
52176: PPUSH
52177: PPUSH
52178: PPUSH
52179: PPUSH
52180: PPUSH
52181: PPUSH
52182: PPUSH
52183: PPUSH
52184: PPUSH
52185: PPUSH
52186: PPUSH
52187: PPUSH
52188: PPUSH
52189: PPUSH
52190: PPUSH
52191: PPUSH
52192: PPUSH
52193: PPUSH
52194: PPUSH
52195: PPUSH
52196: PPUSH
// result = [ ] ;
52197: LD_ADDR_VAR 0 7
52201: PUSH
52202: EMPTY
52203: ST_TO_ADDR
// temp_list = [ ] ;
52204: LD_ADDR_VAR 0 9
52208: PUSH
52209: EMPTY
52210: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52211: LD_VAR 0 4
52215: PUSH
52216: LD_INT 0
52218: PUSH
52219: LD_INT 1
52221: PUSH
52222: LD_INT 2
52224: PUSH
52225: LD_INT 3
52227: PUSH
52228: LD_INT 4
52230: PUSH
52231: LD_INT 5
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: IN
52242: NOT
52243: PUSH
52244: LD_VAR 0 1
52248: PUSH
52249: LD_INT 0
52251: PUSH
52252: LD_INT 1
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: IN
52259: PUSH
52260: LD_VAR 0 5
52264: PUSH
52265: LD_INT 1
52267: PUSH
52268: LD_INT 2
52270: PUSH
52271: LD_INT 3
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: LIST
52278: IN
52279: NOT
52280: AND
52281: OR
52282: IFFALSE 52286
// exit ;
52284: GO 70677
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52286: LD_VAR 0 1
52290: PUSH
52291: LD_INT 6
52293: PUSH
52294: LD_INT 7
52296: PUSH
52297: LD_INT 8
52299: PUSH
52300: LD_INT 13
52302: PUSH
52303: LD_INT 12
52305: PUSH
52306: LD_INT 15
52308: PUSH
52309: LD_INT 11
52311: PUSH
52312: LD_INT 14
52314: PUSH
52315: LD_INT 10
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: IN
52329: IFFALSE 52339
// btype = b_lab ;
52331: LD_ADDR_VAR 0 1
52335: PUSH
52336: LD_INT 6
52338: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52339: LD_VAR 0 6
52343: PUSH
52344: LD_INT 0
52346: PUSH
52347: LD_INT 1
52349: PUSH
52350: LD_INT 2
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: LIST
52357: IN
52358: NOT
52359: PUSH
52360: LD_VAR 0 1
52364: PUSH
52365: LD_INT 0
52367: PUSH
52368: LD_INT 1
52370: PUSH
52371: LD_INT 2
52373: PUSH
52374: LD_INT 3
52376: PUSH
52377: LD_INT 6
52379: PUSH
52380: LD_INT 36
52382: PUSH
52383: LD_INT 4
52385: PUSH
52386: LD_INT 5
52388: PUSH
52389: LD_INT 31
52391: PUSH
52392: LD_INT 32
52394: PUSH
52395: LD_INT 33
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: IN
52411: NOT
52412: PUSH
52413: LD_VAR 0 6
52417: PUSH
52418: LD_INT 1
52420: EQUAL
52421: AND
52422: OR
52423: PUSH
52424: LD_VAR 0 1
52428: PUSH
52429: LD_INT 2
52431: PUSH
52432: LD_INT 3
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: IN
52439: NOT
52440: PUSH
52441: LD_VAR 0 6
52445: PUSH
52446: LD_INT 2
52448: EQUAL
52449: AND
52450: OR
52451: IFFALSE 52461
// mode = 0 ;
52453: LD_ADDR_VAR 0 6
52457: PUSH
52458: LD_INT 0
52460: ST_TO_ADDR
// case mode of 0 :
52461: LD_VAR 0 6
52465: PUSH
52466: LD_INT 0
52468: DOUBLE
52469: EQUAL
52470: IFTRUE 52474
52472: GO 63927
52474: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52475: LD_ADDR_VAR 0 11
52479: PUSH
52480: LD_INT 0
52482: PUSH
52483: LD_INT 0
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 0
52492: PUSH
52493: LD_INT 1
52495: NEG
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 1
52503: PUSH
52504: LD_INT 0
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 1
52513: PUSH
52514: LD_INT 1
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 0
52523: PUSH
52524: LD_INT 1
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 1
52533: NEG
52534: PUSH
52535: LD_INT 0
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 1
52544: NEG
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 1
52556: NEG
52557: PUSH
52558: LD_INT 2
52560: NEG
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 0
52568: PUSH
52569: LD_INT 2
52571: NEG
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 1
52579: PUSH
52580: LD_INT 1
52582: NEG
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 1
52590: PUSH
52591: LD_INT 2
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 0
52600: PUSH
52601: LD_INT 2
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 1
52610: NEG
52611: PUSH
52612: LD_INT 1
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 1
52621: PUSH
52622: LD_INT 3
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 0
52631: PUSH
52632: LD_INT 3
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 1
52641: NEG
52642: PUSH
52643: LD_INT 2
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52668: LD_ADDR_VAR 0 12
52672: PUSH
52673: LD_INT 0
52675: PUSH
52676: LD_INT 0
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 0
52685: PUSH
52686: LD_INT 1
52688: NEG
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 1
52696: PUSH
52697: LD_INT 0
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 1
52706: PUSH
52707: LD_INT 1
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 0
52716: PUSH
52717: LD_INT 1
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 1
52726: NEG
52727: PUSH
52728: LD_INT 0
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 1
52737: NEG
52738: PUSH
52739: LD_INT 1
52741: NEG
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 1
52749: PUSH
52750: LD_INT 1
52752: NEG
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 2
52760: PUSH
52761: LD_INT 0
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 2
52770: PUSH
52771: LD_INT 1
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 1
52780: NEG
52781: PUSH
52782: LD_INT 1
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 2
52791: NEG
52792: PUSH
52793: LD_INT 0
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 2
52802: NEG
52803: PUSH
52804: LD_INT 1
52806: NEG
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 2
52814: NEG
52815: PUSH
52816: LD_INT 1
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 3
52825: NEG
52826: PUSH
52827: LD_INT 0
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 3
52836: NEG
52837: PUSH
52838: LD_INT 1
52840: NEG
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52864: LD_ADDR_VAR 0 13
52868: PUSH
52869: LD_INT 0
52871: PUSH
52872: LD_INT 0
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 0
52881: PUSH
52882: LD_INT 1
52884: NEG
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 1
52892: PUSH
52893: LD_INT 0
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 1
52902: PUSH
52903: LD_INT 1
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 0
52912: PUSH
52913: LD_INT 1
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 1
52922: NEG
52923: PUSH
52924: LD_INT 0
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 1
52933: NEG
52934: PUSH
52935: LD_INT 1
52937: NEG
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 1
52945: NEG
52946: PUSH
52947: LD_INT 2
52949: NEG
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 2
52957: PUSH
52958: LD_INT 1
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 2
52967: PUSH
52968: LD_INT 2
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 1
52977: PUSH
52978: LD_INT 2
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 2
52987: NEG
52988: PUSH
52989: LD_INT 1
52991: NEG
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 2
52999: NEG
53000: PUSH
53001: LD_INT 2
53003: NEG
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 2
53011: NEG
53012: PUSH
53013: LD_INT 3
53015: NEG
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 3
53023: NEG
53024: PUSH
53025: LD_INT 2
53027: NEG
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 3
53035: NEG
53036: PUSH
53037: LD_INT 3
53039: NEG
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53063: LD_ADDR_VAR 0 14
53067: PUSH
53068: LD_INT 0
53070: PUSH
53071: LD_INT 0
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 0
53080: PUSH
53081: LD_INT 1
53083: NEG
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: LD_INT 0
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 1
53101: PUSH
53102: LD_INT 1
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 0
53111: PUSH
53112: LD_INT 1
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 1
53121: NEG
53122: PUSH
53123: LD_INT 0
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 1
53132: NEG
53133: PUSH
53134: LD_INT 1
53136: NEG
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 1
53144: NEG
53145: PUSH
53146: LD_INT 2
53148: NEG
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 0
53156: PUSH
53157: LD_INT 2
53159: NEG
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 1
53167: PUSH
53168: LD_INT 1
53170: NEG
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 1
53178: PUSH
53179: LD_INT 2
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 0
53188: PUSH
53189: LD_INT 2
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: LD_INT 1
53198: NEG
53199: PUSH
53200: LD_INT 1
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 1
53209: NEG
53210: PUSH
53211: LD_INT 3
53213: NEG
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 0
53221: PUSH
53222: LD_INT 3
53224: NEG
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 1
53232: PUSH
53233: LD_INT 2
53235: NEG
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53259: LD_ADDR_VAR 0 15
53263: PUSH
53264: LD_INT 0
53266: PUSH
53267: LD_INT 0
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 0
53276: PUSH
53277: LD_INT 1
53279: NEG
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 1
53287: PUSH
53288: LD_INT 0
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 1
53297: PUSH
53298: LD_INT 1
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 0
53307: PUSH
53308: LD_INT 1
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 1
53317: NEG
53318: PUSH
53319: LD_INT 0
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 1
53328: NEG
53329: PUSH
53330: LD_INT 1
53332: NEG
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 1
53340: PUSH
53341: LD_INT 1
53343: NEG
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 2
53351: PUSH
53352: LD_INT 0
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 2
53361: PUSH
53362: LD_INT 1
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 1
53371: NEG
53372: PUSH
53373: LD_INT 1
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 2
53382: NEG
53383: PUSH
53384: LD_INT 0
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 2
53393: NEG
53394: PUSH
53395: LD_INT 1
53397: NEG
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 2
53405: PUSH
53406: LD_INT 1
53408: NEG
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 3
53416: PUSH
53417: LD_INT 0
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 3
53426: PUSH
53427: LD_INT 1
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53452: LD_ADDR_VAR 0 16
53456: PUSH
53457: LD_INT 0
53459: PUSH
53460: LD_INT 0
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 0
53469: PUSH
53470: LD_INT 1
53472: NEG
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 1
53480: PUSH
53481: LD_INT 0
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 1
53490: PUSH
53491: LD_INT 1
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 0
53500: PUSH
53501: LD_INT 1
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 1
53510: NEG
53511: PUSH
53512: LD_INT 0
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 1
53521: NEG
53522: PUSH
53523: LD_INT 1
53525: NEG
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 1
53533: NEG
53534: PUSH
53535: LD_INT 2
53537: NEG
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 2
53545: PUSH
53546: LD_INT 1
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 2
53555: PUSH
53556: LD_INT 2
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 1
53565: PUSH
53566: LD_INT 2
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 2
53575: NEG
53576: PUSH
53577: LD_INT 1
53579: NEG
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 2
53587: NEG
53588: PUSH
53589: LD_INT 2
53591: NEG
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 3
53599: PUSH
53600: LD_INT 2
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 3
53609: PUSH
53610: LD_INT 3
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 2
53619: PUSH
53620: LD_INT 3
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53645: LD_ADDR_VAR 0 17
53649: PUSH
53650: LD_INT 0
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 0
53662: PUSH
53663: LD_INT 1
53665: NEG
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 1
53673: PUSH
53674: LD_INT 0
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 1
53683: PUSH
53684: LD_INT 1
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 0
53693: PUSH
53694: LD_INT 1
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 1
53703: NEG
53704: PUSH
53705: LD_INT 0
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 1
53714: NEG
53715: PUSH
53716: LD_INT 1
53718: NEG
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 1
53726: NEG
53727: PUSH
53728: LD_INT 2
53730: NEG
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 0
53738: PUSH
53739: LD_INT 2
53741: NEG
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 1
53749: PUSH
53750: LD_INT 1
53752: NEG
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 2
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 2
53770: PUSH
53771: LD_INT 1
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 2
53780: PUSH
53781: LD_INT 2
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 1
53790: PUSH
53791: LD_INT 2
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 0
53800: PUSH
53801: LD_INT 2
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 1
53810: NEG
53811: PUSH
53812: LD_INT 1
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 2
53821: NEG
53822: PUSH
53823: LD_INT 0
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 2
53832: NEG
53833: PUSH
53834: LD_INT 1
53836: NEG
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 2
53844: NEG
53845: PUSH
53846: LD_INT 2
53848: NEG
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53875: LD_ADDR_VAR 0 18
53879: PUSH
53880: LD_INT 0
53882: PUSH
53883: LD_INT 0
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 0
53892: PUSH
53893: LD_INT 1
53895: NEG
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 1
53903: PUSH
53904: LD_INT 0
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 1
53913: PUSH
53914: LD_INT 1
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 0
53923: PUSH
53924: LD_INT 1
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 1
53933: NEG
53934: PUSH
53935: LD_INT 0
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 1
53944: NEG
53945: PUSH
53946: LD_INT 1
53948: NEG
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 1
53956: NEG
53957: PUSH
53958: LD_INT 2
53960: NEG
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 0
53968: PUSH
53969: LD_INT 2
53971: NEG
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 1
53979: PUSH
53980: LD_INT 1
53982: NEG
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 2
53990: PUSH
53991: LD_INT 0
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 2
54000: PUSH
54001: LD_INT 1
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 2
54010: PUSH
54011: LD_INT 2
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 1
54020: PUSH
54021: LD_INT 2
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 0
54030: PUSH
54031: LD_INT 2
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 1
54040: NEG
54041: PUSH
54042: LD_INT 1
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 2
54051: NEG
54052: PUSH
54053: LD_INT 0
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 2
54062: NEG
54063: PUSH
54064: LD_INT 1
54066: NEG
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 2
54074: NEG
54075: PUSH
54076: LD_INT 2
54078: NEG
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54105: LD_ADDR_VAR 0 19
54109: PUSH
54110: LD_INT 0
54112: PUSH
54113: LD_INT 0
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: LD_INT 1
54125: NEG
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 1
54133: PUSH
54134: LD_INT 0
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 1
54143: PUSH
54144: LD_INT 1
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 0
54153: PUSH
54154: LD_INT 1
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 1
54163: NEG
54164: PUSH
54165: LD_INT 0
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 1
54174: NEG
54175: PUSH
54176: LD_INT 1
54178: NEG
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 1
54186: NEG
54187: PUSH
54188: LD_INT 2
54190: NEG
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 0
54198: PUSH
54199: LD_INT 2
54201: NEG
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 1
54209: PUSH
54210: LD_INT 1
54212: NEG
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 2
54220: PUSH
54221: LD_INT 0
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 2
54230: PUSH
54231: LD_INT 1
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 2
54240: PUSH
54241: LD_INT 2
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 1
54250: PUSH
54251: LD_INT 2
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 0
54260: PUSH
54261: LD_INT 2
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 1
54270: NEG
54271: PUSH
54272: LD_INT 1
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 2
54281: NEG
54282: PUSH
54283: LD_INT 0
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 2
54292: NEG
54293: PUSH
54294: LD_INT 1
54296: NEG
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 2
54304: NEG
54305: PUSH
54306: LD_INT 2
54308: NEG
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54335: LD_ADDR_VAR 0 20
54339: PUSH
54340: LD_INT 0
54342: PUSH
54343: LD_INT 0
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 0
54352: PUSH
54353: LD_INT 1
54355: NEG
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 1
54363: PUSH
54364: LD_INT 0
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 1
54373: PUSH
54374: LD_INT 1
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 0
54383: PUSH
54384: LD_INT 1
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 1
54393: NEG
54394: PUSH
54395: LD_INT 0
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 1
54404: NEG
54405: PUSH
54406: LD_INT 1
54408: NEG
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 1
54416: NEG
54417: PUSH
54418: LD_INT 2
54420: NEG
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 0
54428: PUSH
54429: LD_INT 2
54431: NEG
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 1
54439: PUSH
54440: LD_INT 1
54442: NEG
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 2
54450: PUSH
54451: LD_INT 0
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 2
54460: PUSH
54461: LD_INT 1
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 2
54470: PUSH
54471: LD_INT 2
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 1
54480: PUSH
54481: LD_INT 2
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 0
54490: PUSH
54491: LD_INT 2
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 1
54500: NEG
54501: PUSH
54502: LD_INT 1
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 2
54511: NEG
54512: PUSH
54513: LD_INT 0
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 2
54522: NEG
54523: PUSH
54524: LD_INT 1
54526: NEG
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 2
54534: NEG
54535: PUSH
54536: LD_INT 2
54538: NEG
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54565: LD_ADDR_VAR 0 21
54569: PUSH
54570: LD_INT 0
54572: PUSH
54573: LD_INT 0
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 0
54582: PUSH
54583: LD_INT 1
54585: NEG
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 1
54593: PUSH
54594: LD_INT 0
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 1
54603: PUSH
54604: LD_INT 1
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: LD_INT 1
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 1
54623: NEG
54624: PUSH
54625: LD_INT 0
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 1
54634: NEG
54635: PUSH
54636: LD_INT 1
54638: NEG
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 1
54646: NEG
54647: PUSH
54648: LD_INT 2
54650: NEG
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 0
54658: PUSH
54659: LD_INT 2
54661: NEG
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 1
54669: PUSH
54670: LD_INT 1
54672: NEG
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 2
54680: PUSH
54681: LD_INT 0
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 2
54690: PUSH
54691: LD_INT 1
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 2
54700: PUSH
54701: LD_INT 2
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 1
54710: PUSH
54711: LD_INT 2
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 0
54720: PUSH
54721: LD_INT 2
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 1
54730: NEG
54731: PUSH
54732: LD_INT 1
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 2
54741: NEG
54742: PUSH
54743: LD_INT 0
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 2
54752: NEG
54753: PUSH
54754: LD_INT 1
54756: NEG
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 2
54764: NEG
54765: PUSH
54766: LD_INT 2
54768: NEG
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54795: LD_ADDR_VAR 0 22
54799: PUSH
54800: LD_INT 0
54802: PUSH
54803: LD_INT 0
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 0
54812: PUSH
54813: LD_INT 1
54815: NEG
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 1
54823: PUSH
54824: LD_INT 0
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 1
54833: PUSH
54834: LD_INT 1
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 0
54843: PUSH
54844: LD_INT 1
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 1
54853: NEG
54854: PUSH
54855: LD_INT 0
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 1
54864: NEG
54865: PUSH
54866: LD_INT 1
54868: NEG
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 1
54876: NEG
54877: PUSH
54878: LD_INT 2
54880: NEG
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 0
54888: PUSH
54889: LD_INT 2
54891: NEG
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 1
54899: PUSH
54900: LD_INT 1
54902: NEG
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 2
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 2
54920: PUSH
54921: LD_INT 1
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 2
54930: PUSH
54931: LD_INT 2
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 1
54940: PUSH
54941: LD_INT 2
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 0
54950: PUSH
54951: LD_INT 2
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 1
54960: NEG
54961: PUSH
54962: LD_INT 1
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 2
54971: NEG
54972: PUSH
54973: LD_INT 0
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 2
54982: NEG
54983: PUSH
54984: LD_INT 1
54986: NEG
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 2
54994: NEG
54995: PUSH
54996: LD_INT 2
54998: NEG
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55025: LD_ADDR_VAR 0 23
55029: PUSH
55030: LD_INT 0
55032: PUSH
55033: LD_INT 0
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 0
55042: PUSH
55043: LD_INT 1
55045: NEG
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 1
55053: PUSH
55054: LD_INT 0
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 1
55063: PUSH
55064: LD_INT 1
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 0
55073: PUSH
55074: LD_INT 1
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 1
55083: NEG
55084: PUSH
55085: LD_INT 0
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 1
55094: NEG
55095: PUSH
55096: LD_INT 1
55098: NEG
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 1
55106: NEG
55107: PUSH
55108: LD_INT 2
55110: NEG
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 0
55118: PUSH
55119: LD_INT 2
55121: NEG
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 1
55129: PUSH
55130: LD_INT 1
55132: NEG
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 2
55140: PUSH
55141: LD_INT 0
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 2
55150: PUSH
55151: LD_INT 1
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 2
55160: PUSH
55161: LD_INT 2
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 1
55170: PUSH
55171: LD_INT 2
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: LD_INT 2
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 1
55190: NEG
55191: PUSH
55192: LD_INT 1
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 2
55201: NEG
55202: PUSH
55203: LD_INT 0
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 2
55212: NEG
55213: PUSH
55214: LD_INT 1
55216: NEG
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 2
55224: NEG
55225: PUSH
55226: LD_INT 2
55228: NEG
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 2
55236: NEG
55237: PUSH
55238: LD_INT 3
55240: NEG
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 1
55248: NEG
55249: PUSH
55250: LD_INT 3
55252: NEG
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 1
55260: PUSH
55261: LD_INT 2
55263: NEG
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 2
55271: PUSH
55272: LD_INT 1
55274: NEG
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55305: LD_ADDR_VAR 0 24
55309: PUSH
55310: LD_INT 0
55312: PUSH
55313: LD_INT 0
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: LD_INT 1
55325: NEG
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 1
55333: PUSH
55334: LD_INT 0
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 1
55343: PUSH
55344: LD_INT 1
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 0
55353: PUSH
55354: LD_INT 1
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 1
55363: NEG
55364: PUSH
55365: LD_INT 0
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 1
55374: NEG
55375: PUSH
55376: LD_INT 1
55378: NEG
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 1
55386: NEG
55387: PUSH
55388: LD_INT 2
55390: NEG
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 0
55398: PUSH
55399: LD_INT 2
55401: NEG
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 1
55409: PUSH
55410: LD_INT 1
55412: NEG
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 2
55420: PUSH
55421: LD_INT 0
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 2
55430: PUSH
55431: LD_INT 1
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 2
55440: PUSH
55441: LD_INT 2
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 1
55450: PUSH
55451: LD_INT 2
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 0
55460: PUSH
55461: LD_INT 2
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 1
55470: NEG
55471: PUSH
55472: LD_INT 1
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 2
55481: NEG
55482: PUSH
55483: LD_INT 0
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 2
55492: NEG
55493: PUSH
55494: LD_INT 1
55496: NEG
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 2
55504: NEG
55505: PUSH
55506: LD_INT 2
55508: NEG
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 1
55516: PUSH
55517: LD_INT 2
55519: NEG
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 2
55527: PUSH
55528: LD_INT 1
55530: NEG
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 3
55538: PUSH
55539: LD_INT 1
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 3
55548: PUSH
55549: LD_INT 2
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55581: LD_ADDR_VAR 0 25
55585: PUSH
55586: LD_INT 0
55588: PUSH
55589: LD_INT 0
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 0
55598: PUSH
55599: LD_INT 1
55601: NEG
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 1
55609: PUSH
55610: LD_INT 0
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 1
55619: PUSH
55620: LD_INT 1
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 0
55629: PUSH
55630: LD_INT 1
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 1
55639: NEG
55640: PUSH
55641: LD_INT 0
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 1
55650: NEG
55651: PUSH
55652: LD_INT 1
55654: NEG
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 1
55662: NEG
55663: PUSH
55664: LD_INT 2
55666: NEG
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 0
55674: PUSH
55675: LD_INT 2
55677: NEG
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 1
55685: PUSH
55686: LD_INT 1
55688: NEG
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 2
55696: PUSH
55697: LD_INT 0
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 2
55706: PUSH
55707: LD_INT 1
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 2
55716: PUSH
55717: LD_INT 2
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 1
55726: PUSH
55727: LD_INT 2
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 0
55736: PUSH
55737: LD_INT 2
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 1
55746: NEG
55747: PUSH
55748: LD_INT 1
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 2
55757: NEG
55758: PUSH
55759: LD_INT 0
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 2
55768: NEG
55769: PUSH
55770: LD_INT 1
55772: NEG
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 2
55780: NEG
55781: PUSH
55782: LD_INT 2
55784: NEG
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 3
55792: PUSH
55793: LD_INT 1
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 3
55802: PUSH
55803: LD_INT 2
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 2
55812: PUSH
55813: LD_INT 3
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 1
55822: PUSH
55823: LD_INT 3
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55855: LD_ADDR_VAR 0 26
55859: PUSH
55860: LD_INT 0
55862: PUSH
55863: LD_INT 0
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 0
55872: PUSH
55873: LD_INT 1
55875: NEG
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 1
55883: PUSH
55884: LD_INT 0
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 1
55893: PUSH
55894: LD_INT 1
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 0
55903: PUSH
55904: LD_INT 1
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 1
55913: NEG
55914: PUSH
55915: LD_INT 0
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 1
55924: NEG
55925: PUSH
55926: LD_INT 1
55928: NEG
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 1
55936: NEG
55937: PUSH
55938: LD_INT 2
55940: NEG
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 0
55948: PUSH
55949: LD_INT 2
55951: NEG
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 1
55959: PUSH
55960: LD_INT 1
55962: NEG
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 2
55970: PUSH
55971: LD_INT 0
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 2
55980: PUSH
55981: LD_INT 1
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 2
55990: PUSH
55991: LD_INT 2
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 1
56000: PUSH
56001: LD_INT 2
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 0
56010: PUSH
56011: LD_INT 2
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 1
56020: NEG
56021: PUSH
56022: LD_INT 1
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 2
56031: NEG
56032: PUSH
56033: LD_INT 0
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 2
56042: NEG
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 2
56054: NEG
56055: PUSH
56056: LD_INT 2
56058: NEG
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 2
56066: PUSH
56067: LD_INT 3
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 1
56076: PUSH
56077: LD_INT 3
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 1
56086: NEG
56087: PUSH
56088: LD_INT 2
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 2
56097: NEG
56098: PUSH
56099: LD_INT 1
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56131: LD_ADDR_VAR 0 27
56135: PUSH
56136: LD_INT 0
56138: PUSH
56139: LD_INT 0
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 0
56148: PUSH
56149: LD_INT 1
56151: NEG
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: PUSH
56160: LD_INT 0
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 1
56169: PUSH
56170: LD_INT 1
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 0
56179: PUSH
56180: LD_INT 1
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 1
56189: NEG
56190: PUSH
56191: LD_INT 0
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 1
56200: NEG
56201: PUSH
56202: LD_INT 1
56204: NEG
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 1
56212: NEG
56213: PUSH
56214: LD_INT 2
56216: NEG
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 0
56224: PUSH
56225: LD_INT 2
56227: NEG
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 1
56235: PUSH
56236: LD_INT 1
56238: NEG
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 2
56246: PUSH
56247: LD_INT 0
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 2
56256: PUSH
56257: LD_INT 1
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 2
56266: PUSH
56267: LD_INT 2
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 1
56276: PUSH
56277: LD_INT 2
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 0
56286: PUSH
56287: LD_INT 2
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 1
56296: NEG
56297: PUSH
56298: LD_INT 1
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 2
56307: NEG
56308: PUSH
56309: LD_INT 0
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 2
56318: NEG
56319: PUSH
56320: LD_INT 1
56322: NEG
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 2
56330: NEG
56331: PUSH
56332: LD_INT 2
56334: NEG
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 1
56342: NEG
56343: PUSH
56344: LD_INT 2
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 2
56353: NEG
56354: PUSH
56355: LD_INT 1
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 3
56364: NEG
56365: PUSH
56366: LD_INT 1
56368: NEG
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 3
56376: NEG
56377: PUSH
56378: LD_INT 2
56380: NEG
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56411: LD_ADDR_VAR 0 28
56415: PUSH
56416: LD_INT 0
56418: PUSH
56419: LD_INT 0
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 0
56428: PUSH
56429: LD_INT 1
56431: NEG
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 1
56439: PUSH
56440: LD_INT 0
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 1
56449: PUSH
56450: LD_INT 1
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 0
56459: PUSH
56460: LD_INT 1
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 1
56469: NEG
56470: PUSH
56471: LD_INT 0
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 1
56480: NEG
56481: PUSH
56482: LD_INT 1
56484: NEG
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 1
56492: NEG
56493: PUSH
56494: LD_INT 2
56496: NEG
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 0
56504: PUSH
56505: LD_INT 2
56507: NEG
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 1
56515: PUSH
56516: LD_INT 1
56518: NEG
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 2
56526: PUSH
56527: LD_INT 0
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 2
56536: PUSH
56537: LD_INT 1
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 2
56546: PUSH
56547: LD_INT 2
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 1
56556: PUSH
56557: LD_INT 2
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 0
56566: PUSH
56567: LD_INT 2
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 1
56576: NEG
56577: PUSH
56578: LD_INT 1
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 2
56587: NEG
56588: PUSH
56589: LD_INT 0
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 2
56598: NEG
56599: PUSH
56600: LD_INT 1
56602: NEG
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 2
56610: NEG
56611: PUSH
56612: LD_INT 2
56614: NEG
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 2
56622: NEG
56623: PUSH
56624: LD_INT 3
56626: NEG
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 1
56634: NEG
56635: PUSH
56636: LD_INT 3
56638: NEG
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 3
56646: NEG
56647: PUSH
56648: LD_INT 1
56650: NEG
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 3
56658: NEG
56659: PUSH
56660: LD_INT 2
56662: NEG
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56693: LD_ADDR_VAR 0 29
56697: PUSH
56698: LD_INT 0
56700: PUSH
56701: LD_INT 0
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 0
56710: PUSH
56711: LD_INT 1
56713: NEG
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 1
56721: PUSH
56722: LD_INT 0
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 1
56731: PUSH
56732: LD_INT 1
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 0
56741: PUSH
56742: LD_INT 1
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 1
56751: NEG
56752: PUSH
56753: LD_INT 0
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 1
56762: NEG
56763: PUSH
56764: LD_INT 1
56766: NEG
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 1
56774: NEG
56775: PUSH
56776: LD_INT 2
56778: NEG
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 0
56786: PUSH
56787: LD_INT 2
56789: NEG
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 1
56797: PUSH
56798: LD_INT 1
56800: NEG
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 2
56808: PUSH
56809: LD_INT 0
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 2
56818: PUSH
56819: LD_INT 1
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 1
56828: PUSH
56829: LD_INT 2
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 0
56838: PUSH
56839: LD_INT 2
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 1
56848: NEG
56849: PUSH
56850: LD_INT 1
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 2
56859: NEG
56860: PUSH
56861: LD_INT 1
56863: NEG
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 2
56871: NEG
56872: PUSH
56873: LD_INT 2
56875: NEG
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 2
56883: NEG
56884: PUSH
56885: LD_INT 3
56887: NEG
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 2
56895: PUSH
56896: LD_INT 1
56898: NEG
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 3
56906: PUSH
56907: LD_INT 1
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 1
56916: PUSH
56917: LD_INT 3
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 1
56926: NEG
56927: PUSH
56928: LD_INT 2
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 3
56937: NEG
56938: PUSH
56939: LD_INT 2
56941: NEG
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56972: LD_ADDR_VAR 0 30
56976: PUSH
56977: LD_INT 0
56979: PUSH
56980: LD_INT 0
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 0
56989: PUSH
56990: LD_INT 1
56992: NEG
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 1
57000: PUSH
57001: LD_INT 0
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 1
57010: PUSH
57011: LD_INT 1
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 0
57020: PUSH
57021: LD_INT 1
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 1
57030: NEG
57031: PUSH
57032: LD_INT 0
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 1
57041: NEG
57042: PUSH
57043: LD_INT 1
57045: NEG
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 1
57053: NEG
57054: PUSH
57055: LD_INT 2
57057: NEG
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 0
57065: PUSH
57066: LD_INT 2
57068: NEG
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 1
57076: PUSH
57077: LD_INT 1
57079: NEG
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 2
57087: PUSH
57088: LD_INT 0
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 2
57097: PUSH
57098: LD_INT 1
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 2
57107: PUSH
57108: LD_INT 2
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 1
57117: PUSH
57118: LD_INT 2
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 1
57127: NEG
57128: PUSH
57129: LD_INT 1
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 2
57138: NEG
57139: PUSH
57140: LD_INT 0
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 2
57149: NEG
57150: PUSH
57151: LD_INT 1
57153: NEG
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 1
57161: NEG
57162: PUSH
57163: LD_INT 3
57165: NEG
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 1
57173: PUSH
57174: LD_INT 2
57176: NEG
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 3
57184: PUSH
57185: LD_INT 2
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 2
57194: PUSH
57195: LD_INT 3
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 2
57204: NEG
57205: PUSH
57206: LD_INT 1
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 3
57215: NEG
57216: PUSH
57217: LD_INT 1
57219: NEG
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57250: LD_ADDR_VAR 0 31
57254: PUSH
57255: LD_INT 0
57257: PUSH
57258: LD_INT 0
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 0
57267: PUSH
57268: LD_INT 1
57270: NEG
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 1
57278: PUSH
57279: LD_INT 0
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 1
57288: PUSH
57289: LD_INT 1
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 0
57298: PUSH
57299: LD_INT 1
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 1
57308: NEG
57309: PUSH
57310: LD_INT 0
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 1
57319: NEG
57320: PUSH
57321: LD_INT 1
57323: NEG
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 1
57331: NEG
57332: PUSH
57333: LD_INT 2
57335: NEG
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 1
57343: PUSH
57344: LD_INT 1
57346: NEG
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 2
57354: PUSH
57355: LD_INT 0
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 2
57364: PUSH
57365: LD_INT 1
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 2
57374: PUSH
57375: LD_INT 2
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 1
57384: PUSH
57385: LD_INT 2
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 0
57394: PUSH
57395: LD_INT 2
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 1
57404: NEG
57405: PUSH
57406: LD_INT 1
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 2
57415: NEG
57416: PUSH
57417: LD_INT 1
57419: NEG
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 2
57427: NEG
57428: PUSH
57429: LD_INT 2
57431: NEG
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 2
57439: NEG
57440: PUSH
57441: LD_INT 3
57443: NEG
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 2
57451: PUSH
57452: LD_INT 1
57454: NEG
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 3
57462: PUSH
57463: LD_INT 1
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 1
57472: PUSH
57473: LD_INT 3
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 1
57482: NEG
57483: PUSH
57484: LD_INT 2
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 3
57493: NEG
57494: PUSH
57495: LD_INT 2
57497: NEG
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57528: LD_ADDR_VAR 0 32
57532: PUSH
57533: LD_INT 0
57535: PUSH
57536: LD_INT 0
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 0
57545: PUSH
57546: LD_INT 1
57548: NEG
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 1
57556: PUSH
57557: LD_INT 0
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 1
57566: PUSH
57567: LD_INT 1
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 0
57576: PUSH
57577: LD_INT 1
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 1
57586: NEG
57587: PUSH
57588: LD_INT 0
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 1
57597: NEG
57598: PUSH
57599: LD_INT 1
57601: NEG
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 1
57609: NEG
57610: PUSH
57611: LD_INT 2
57613: NEG
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 0
57621: PUSH
57622: LD_INT 2
57624: NEG
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 1
57632: PUSH
57633: LD_INT 1
57635: NEG
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 2
57643: PUSH
57644: LD_INT 1
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 2
57653: PUSH
57654: LD_INT 2
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 1
57663: PUSH
57664: LD_INT 2
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 0
57673: PUSH
57674: LD_INT 2
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 1
57683: NEG
57684: PUSH
57685: LD_INT 1
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 2
57694: NEG
57695: PUSH
57696: LD_INT 0
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 2
57705: NEG
57706: PUSH
57707: LD_INT 1
57709: NEG
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 1
57717: NEG
57718: PUSH
57719: LD_INT 3
57721: NEG
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 1
57729: PUSH
57730: LD_INT 2
57732: NEG
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 3
57740: PUSH
57741: LD_INT 2
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 2
57750: PUSH
57751: LD_INT 3
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 2
57760: NEG
57761: PUSH
57762: LD_INT 1
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 3
57771: NEG
57772: PUSH
57773: LD_INT 1
57775: NEG
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57806: LD_ADDR_VAR 0 33
57810: PUSH
57811: LD_INT 0
57813: PUSH
57814: LD_INT 0
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 0
57823: PUSH
57824: LD_INT 1
57826: NEG
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 1
57834: PUSH
57835: LD_INT 0
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 1
57844: PUSH
57845: LD_INT 1
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 0
57854: PUSH
57855: LD_INT 1
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 1
57864: NEG
57865: PUSH
57866: LD_INT 0
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 1
57875: NEG
57876: PUSH
57877: LD_INT 1
57879: NEG
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 1
57887: NEG
57888: PUSH
57889: LD_INT 2
57891: NEG
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 1
57899: PUSH
57900: LD_INT 1
57902: NEG
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 2
57910: PUSH
57911: LD_INT 0
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 2
57920: PUSH
57921: LD_INT 1
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 1
57930: PUSH
57931: LD_INT 2
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 0
57940: PUSH
57941: LD_INT 2
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 1
57950: NEG
57951: PUSH
57952: LD_INT 1
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 2
57961: NEG
57962: PUSH
57963: LD_INT 0
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 2
57972: NEG
57973: PUSH
57974: LD_INT 1
57976: NEG
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 2
57984: NEG
57985: PUSH
57986: LD_INT 2
57988: NEG
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 2
57996: NEG
57997: PUSH
57998: LD_INT 3
58000: NEG
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 2
58008: PUSH
58009: LD_INT 1
58011: NEG
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 3
58019: PUSH
58020: LD_INT 1
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 1
58029: PUSH
58030: LD_INT 3
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 1
58039: NEG
58040: PUSH
58041: LD_INT 2
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 3
58050: NEG
58051: PUSH
58052: LD_INT 2
58054: NEG
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58085: LD_ADDR_VAR 0 34
58089: PUSH
58090: LD_INT 0
58092: PUSH
58093: LD_INT 0
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 0
58102: PUSH
58103: LD_INT 1
58105: NEG
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 1
58113: PUSH
58114: LD_INT 0
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 1
58123: PUSH
58124: LD_INT 1
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 0
58133: PUSH
58134: LD_INT 1
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 1
58143: NEG
58144: PUSH
58145: LD_INT 0
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 1
58154: NEG
58155: PUSH
58156: LD_INT 1
58158: NEG
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 1
58166: NEG
58167: PUSH
58168: LD_INT 2
58170: NEG
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 0
58178: PUSH
58179: LD_INT 2
58181: NEG
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 1
58189: PUSH
58190: LD_INT 1
58192: NEG
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 2
58200: PUSH
58201: LD_INT 1
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 2
58210: PUSH
58211: LD_INT 2
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 1
58220: PUSH
58221: LD_INT 2
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 1
58230: NEG
58231: PUSH
58232: LD_INT 1
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 2
58241: NEG
58242: PUSH
58243: LD_INT 0
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 2
58252: NEG
58253: PUSH
58254: LD_INT 1
58256: NEG
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 2
58264: NEG
58265: PUSH
58266: LD_INT 2
58268: NEG
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 1
58276: NEG
58277: PUSH
58278: LD_INT 3
58280: NEG
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 1
58288: PUSH
58289: LD_INT 2
58291: NEG
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 3
58299: PUSH
58300: LD_INT 2
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 2
58309: PUSH
58310: LD_INT 3
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 2
58319: NEG
58320: PUSH
58321: LD_INT 1
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 3
58330: NEG
58331: PUSH
58332: LD_INT 1
58334: NEG
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58365: LD_ADDR_VAR 0 35
58369: PUSH
58370: LD_INT 0
58372: PUSH
58373: LD_INT 0
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 0
58382: PUSH
58383: LD_INT 1
58385: NEG
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 1
58393: PUSH
58394: LD_INT 0
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 1
58403: PUSH
58404: LD_INT 1
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 0
58413: PUSH
58414: LD_INT 1
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 1
58423: NEG
58424: PUSH
58425: LD_INT 0
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 1
58434: NEG
58435: PUSH
58436: LD_INT 1
58438: NEG
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 2
58446: PUSH
58447: LD_INT 1
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 2
58456: NEG
58457: PUSH
58458: LD_INT 1
58460: NEG
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58477: LD_ADDR_VAR 0 36
58481: PUSH
58482: LD_INT 0
58484: PUSH
58485: LD_INT 0
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 0
58494: PUSH
58495: LD_INT 1
58497: NEG
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 1
58505: PUSH
58506: LD_INT 0
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 1
58515: PUSH
58516: LD_INT 1
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 0
58525: PUSH
58526: LD_INT 1
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 1
58535: NEG
58536: PUSH
58537: LD_INT 0
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 1
58546: NEG
58547: PUSH
58548: LD_INT 1
58550: NEG
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 1
58558: NEG
58559: PUSH
58560: LD_INT 2
58562: NEG
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 1
58570: PUSH
58571: LD_INT 2
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58589: LD_ADDR_VAR 0 37
58593: PUSH
58594: LD_INT 0
58596: PUSH
58597: LD_INT 0
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 0
58606: PUSH
58607: LD_INT 1
58609: NEG
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 1
58617: PUSH
58618: LD_INT 0
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 1
58627: PUSH
58628: LD_INT 1
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 0
58637: PUSH
58638: LD_INT 1
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 1
58647: NEG
58648: PUSH
58649: LD_INT 0
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 1
58658: NEG
58659: PUSH
58660: LD_INT 1
58662: NEG
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 1
58670: PUSH
58671: LD_INT 1
58673: NEG
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 1
58681: NEG
58682: PUSH
58683: LD_INT 1
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58701: LD_ADDR_VAR 0 38
58705: PUSH
58706: LD_INT 0
58708: PUSH
58709: LD_INT 0
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 0
58718: PUSH
58719: LD_INT 1
58721: NEG
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 1
58729: PUSH
58730: LD_INT 0
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 1
58739: PUSH
58740: LD_INT 1
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 0
58749: PUSH
58750: LD_INT 1
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 1
58759: NEG
58760: PUSH
58761: LD_INT 0
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 1
58770: NEG
58771: PUSH
58772: LD_INT 1
58774: NEG
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 2
58782: PUSH
58783: LD_INT 1
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 2
58792: NEG
58793: PUSH
58794: LD_INT 1
58796: NEG
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58813: LD_ADDR_VAR 0 39
58817: PUSH
58818: LD_INT 0
58820: PUSH
58821: LD_INT 0
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 0
58830: PUSH
58831: LD_INT 1
58833: NEG
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 1
58841: PUSH
58842: LD_INT 0
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 1
58851: PUSH
58852: LD_INT 1
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 0
58861: PUSH
58862: LD_INT 1
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 1
58871: NEG
58872: PUSH
58873: LD_INT 0
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 1
58882: NEG
58883: PUSH
58884: LD_INT 1
58886: NEG
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 1
58894: NEG
58895: PUSH
58896: LD_INT 2
58898: NEG
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 1
58906: PUSH
58907: LD_INT 2
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58925: LD_ADDR_VAR 0 40
58929: PUSH
58930: LD_INT 0
58932: PUSH
58933: LD_INT 0
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 0
58942: PUSH
58943: LD_INT 1
58945: NEG
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 1
58953: PUSH
58954: LD_INT 0
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 1
58963: PUSH
58964: LD_INT 1
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 0
58973: PUSH
58974: LD_INT 1
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 1
58983: NEG
58984: PUSH
58985: LD_INT 0
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 1
58994: NEG
58995: PUSH
58996: LD_INT 1
58998: NEG
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 1
59006: PUSH
59007: LD_INT 1
59009: NEG
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 1
59017: NEG
59018: PUSH
59019: LD_INT 1
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59037: LD_ADDR_VAR 0 41
59041: PUSH
59042: LD_INT 0
59044: PUSH
59045: LD_INT 0
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 0
59054: PUSH
59055: LD_INT 1
59057: NEG
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 1
59065: PUSH
59066: LD_INT 0
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 1
59075: PUSH
59076: LD_INT 1
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 0
59085: PUSH
59086: LD_INT 1
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 1
59095: NEG
59096: PUSH
59097: LD_INT 0
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 1
59106: NEG
59107: PUSH
59108: LD_INT 1
59110: NEG
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 1
59118: NEG
59119: PUSH
59120: LD_INT 2
59122: NEG
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 1
59130: PUSH
59131: LD_INT 1
59133: NEG
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 2
59141: PUSH
59142: LD_INT 0
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 2
59151: PUSH
59152: LD_INT 1
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 2
59161: PUSH
59162: LD_INT 2
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 1
59171: PUSH
59172: LD_INT 2
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 1
59181: NEG
59182: PUSH
59183: LD_INT 1
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 2
59192: NEG
59193: PUSH
59194: LD_INT 0
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 2
59203: NEG
59204: PUSH
59205: LD_INT 1
59207: NEG
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 2
59215: NEG
59216: PUSH
59217: LD_INT 2
59219: NEG
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 2
59227: NEG
59228: PUSH
59229: LD_INT 3
59231: NEG
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 2
59239: PUSH
59240: LD_INT 1
59242: NEG
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 3
59250: PUSH
59251: LD_INT 0
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 3
59260: PUSH
59261: LD_INT 1
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 3
59270: PUSH
59271: LD_INT 2
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 3
59280: PUSH
59281: LD_INT 3
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 2
59290: PUSH
59291: LD_INT 3
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 2
59300: NEG
59301: PUSH
59302: LD_INT 1
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 3
59311: NEG
59312: PUSH
59313: LD_INT 0
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 3
59322: NEG
59323: PUSH
59324: LD_INT 1
59326: NEG
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 3
59334: NEG
59335: PUSH
59336: LD_INT 2
59338: NEG
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 3
59346: NEG
59347: PUSH
59348: LD_INT 3
59350: NEG
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59387: LD_ADDR_VAR 0 42
59391: PUSH
59392: LD_INT 0
59394: PUSH
59395: LD_INT 0
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 0
59404: PUSH
59405: LD_INT 1
59407: NEG
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 1
59415: PUSH
59416: LD_INT 0
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 1
59425: PUSH
59426: LD_INT 1
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 0
59435: PUSH
59436: LD_INT 1
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 1
59445: NEG
59446: PUSH
59447: LD_INT 0
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 1
59456: NEG
59457: PUSH
59458: LD_INT 1
59460: NEG
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 1
59468: NEG
59469: PUSH
59470: LD_INT 2
59472: NEG
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 0
59480: PUSH
59481: LD_INT 2
59483: NEG
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 1
59491: PUSH
59492: LD_INT 1
59494: NEG
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: LD_INT 2
59502: PUSH
59503: LD_INT 1
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 2
59512: PUSH
59513: LD_INT 2
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 1
59522: PUSH
59523: LD_INT 2
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 0
59532: PUSH
59533: LD_INT 2
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 1
59542: NEG
59543: PUSH
59544: LD_INT 1
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 2
59553: NEG
59554: PUSH
59555: LD_INT 1
59557: NEG
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 2
59565: NEG
59566: PUSH
59567: LD_INT 2
59569: NEG
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 2
59577: NEG
59578: PUSH
59579: LD_INT 3
59581: NEG
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 1
59589: NEG
59590: PUSH
59591: LD_INT 3
59593: NEG
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 0
59601: PUSH
59602: LD_INT 3
59604: NEG
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 1
59612: PUSH
59613: LD_INT 2
59615: NEG
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 3
59623: PUSH
59624: LD_INT 2
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 3
59633: PUSH
59634: LD_INT 3
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 2
59643: PUSH
59644: LD_INT 3
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 1
59653: PUSH
59654: LD_INT 3
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 0
59663: PUSH
59664: LD_INT 3
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 1
59673: NEG
59674: PUSH
59675: LD_INT 2
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 3
59684: NEG
59685: PUSH
59686: LD_INT 2
59688: NEG
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 3
59696: NEG
59697: PUSH
59698: LD_INT 3
59700: NEG
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59737: LD_ADDR_VAR 0 43
59741: PUSH
59742: LD_INT 0
59744: PUSH
59745: LD_INT 0
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 0
59754: PUSH
59755: LD_INT 1
59757: NEG
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 1
59765: PUSH
59766: LD_INT 0
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 1
59775: PUSH
59776: LD_INT 1
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 0
59785: PUSH
59786: LD_INT 1
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 1
59795: NEG
59796: PUSH
59797: LD_INT 0
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 1
59806: NEG
59807: PUSH
59808: LD_INT 1
59810: NEG
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 1
59818: NEG
59819: PUSH
59820: LD_INT 2
59822: NEG
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 0
59830: PUSH
59831: LD_INT 2
59833: NEG
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 1
59841: PUSH
59842: LD_INT 1
59844: NEG
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 2
59852: PUSH
59853: LD_INT 0
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 2
59862: PUSH
59863: LD_INT 1
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 1
59872: PUSH
59873: LD_INT 2
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 0
59882: PUSH
59883: LD_INT 2
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 1
59892: NEG
59893: PUSH
59894: LD_INT 1
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 2
59903: NEG
59904: PUSH
59905: LD_INT 0
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 2
59914: NEG
59915: PUSH
59916: LD_INT 1
59918: NEG
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 1
59926: NEG
59927: PUSH
59928: LD_INT 3
59930: NEG
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 0
59938: PUSH
59939: LD_INT 3
59941: NEG
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 1
59949: PUSH
59950: LD_INT 2
59952: NEG
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 2
59960: PUSH
59961: LD_INT 1
59963: NEG
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 3
59971: PUSH
59972: LD_INT 0
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 3
59981: PUSH
59982: LD_INT 1
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 1
59991: PUSH
59992: LD_INT 3
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 0
60001: PUSH
60002: LD_INT 3
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 1
60011: NEG
60012: PUSH
60013: LD_INT 2
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 2
60022: NEG
60023: PUSH
60024: LD_INT 1
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 3
60033: NEG
60034: PUSH
60035: LD_INT 0
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 3
60044: NEG
60045: PUSH
60046: LD_INT 1
60048: NEG
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60085: LD_ADDR_VAR 0 44
60089: PUSH
60090: LD_INT 0
60092: PUSH
60093: LD_INT 0
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 0
60102: PUSH
60103: LD_INT 1
60105: NEG
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 1
60113: PUSH
60114: LD_INT 0
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 1
60123: PUSH
60124: LD_INT 1
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 0
60133: PUSH
60134: LD_INT 1
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 1
60143: NEG
60144: PUSH
60145: LD_INT 0
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 1
60154: NEG
60155: PUSH
60156: LD_INT 1
60158: NEG
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 1
60166: NEG
60167: PUSH
60168: LD_INT 2
60170: NEG
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 1
60178: PUSH
60179: LD_INT 1
60181: NEG
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 2
60189: PUSH
60190: LD_INT 0
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 2
60199: PUSH
60200: LD_INT 1
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 2
60209: PUSH
60210: LD_INT 2
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 1
60219: PUSH
60220: LD_INT 2
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 1
60229: NEG
60230: PUSH
60231: LD_INT 1
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 2
60240: NEG
60241: PUSH
60242: LD_INT 0
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 2
60251: NEG
60252: PUSH
60253: LD_INT 1
60255: NEG
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 2
60263: NEG
60264: PUSH
60265: LD_INT 2
60267: NEG
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 2
60275: NEG
60276: PUSH
60277: LD_INT 3
60279: NEG
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 2
60287: PUSH
60288: LD_INT 1
60290: NEG
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 3
60298: PUSH
60299: LD_INT 0
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 3
60308: PUSH
60309: LD_INT 1
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 3
60318: PUSH
60319: LD_INT 2
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 3
60328: PUSH
60329: LD_INT 3
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 2
60338: PUSH
60339: LD_INT 3
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 2
60348: NEG
60349: PUSH
60350: LD_INT 1
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 3
60359: NEG
60360: PUSH
60361: LD_INT 0
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 3
60370: NEG
60371: PUSH
60372: LD_INT 1
60374: NEG
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 3
60382: NEG
60383: PUSH
60384: LD_INT 2
60386: NEG
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 3
60394: NEG
60395: PUSH
60396: LD_INT 3
60398: NEG
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60435: LD_ADDR_VAR 0 45
60439: PUSH
60440: LD_INT 0
60442: PUSH
60443: LD_INT 0
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 0
60452: PUSH
60453: LD_INT 1
60455: NEG
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 1
60463: PUSH
60464: LD_INT 0
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 1
60473: PUSH
60474: LD_INT 1
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 0
60483: PUSH
60484: LD_INT 1
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 1
60493: NEG
60494: PUSH
60495: LD_INT 0
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 1
60504: NEG
60505: PUSH
60506: LD_INT 1
60508: NEG
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 1
60516: NEG
60517: PUSH
60518: LD_INT 2
60520: NEG
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 0
60528: PUSH
60529: LD_INT 2
60531: NEG
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 1
60539: PUSH
60540: LD_INT 1
60542: NEG
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 2
60550: PUSH
60551: LD_INT 1
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 2
60560: PUSH
60561: LD_INT 2
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 1
60570: PUSH
60571: LD_INT 2
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 0
60580: PUSH
60581: LD_INT 2
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 1
60590: NEG
60591: PUSH
60592: LD_INT 1
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 2
60601: NEG
60602: PUSH
60603: LD_INT 1
60605: NEG
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 2
60613: NEG
60614: PUSH
60615: LD_INT 2
60617: NEG
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 2
60625: NEG
60626: PUSH
60627: LD_INT 3
60629: NEG
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 1
60637: NEG
60638: PUSH
60639: LD_INT 3
60641: NEG
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 0
60649: PUSH
60650: LD_INT 3
60652: NEG
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 1
60660: PUSH
60661: LD_INT 2
60663: NEG
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 3
60671: PUSH
60672: LD_INT 2
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 3
60681: PUSH
60682: LD_INT 3
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 2
60691: PUSH
60692: LD_INT 3
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 1
60701: PUSH
60702: LD_INT 3
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 0
60711: PUSH
60712: LD_INT 3
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 1
60721: NEG
60722: PUSH
60723: LD_INT 2
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 3
60732: NEG
60733: PUSH
60734: LD_INT 2
60736: NEG
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 3
60744: NEG
60745: PUSH
60746: LD_INT 3
60748: NEG
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60785: LD_ADDR_VAR 0 46
60789: PUSH
60790: LD_INT 0
60792: PUSH
60793: LD_INT 0
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 0
60802: PUSH
60803: LD_INT 1
60805: NEG
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 1
60813: PUSH
60814: LD_INT 0
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 1
60823: PUSH
60824: LD_INT 1
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 0
60833: PUSH
60834: LD_INT 1
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 1
60843: NEG
60844: PUSH
60845: LD_INT 0
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 1
60854: NEG
60855: PUSH
60856: LD_INT 1
60858: NEG
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 1
60866: NEG
60867: PUSH
60868: LD_INT 2
60870: NEG
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 0
60878: PUSH
60879: LD_INT 2
60881: NEG
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 1
60889: PUSH
60890: LD_INT 1
60892: NEG
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 2
60900: PUSH
60901: LD_INT 0
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 2
60910: PUSH
60911: LD_INT 1
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 1
60920: PUSH
60921: LD_INT 2
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: LD_INT 0
60930: PUSH
60931: LD_INT 2
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 1
60940: NEG
60941: PUSH
60942: LD_INT 1
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 2
60951: NEG
60952: PUSH
60953: LD_INT 0
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 2
60962: NEG
60963: PUSH
60964: LD_INT 1
60966: NEG
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 1
60974: NEG
60975: PUSH
60976: LD_INT 3
60978: NEG
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 0
60986: PUSH
60987: LD_INT 3
60989: NEG
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 1
60997: PUSH
60998: LD_INT 2
61000: NEG
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 2
61008: PUSH
61009: LD_INT 1
61011: NEG
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 3
61019: PUSH
61020: LD_INT 0
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 3
61029: PUSH
61030: LD_INT 1
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 1
61039: PUSH
61040: LD_INT 3
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 0
61049: PUSH
61050: LD_INT 3
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 1
61059: NEG
61060: PUSH
61061: LD_INT 2
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 2
61070: NEG
61071: PUSH
61072: LD_INT 1
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 3
61081: NEG
61082: PUSH
61083: LD_INT 0
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 3
61092: NEG
61093: PUSH
61094: LD_INT 1
61096: NEG
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61133: LD_ADDR_VAR 0 47
61137: PUSH
61138: LD_INT 0
61140: PUSH
61141: LD_INT 0
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 0
61150: PUSH
61151: LD_INT 1
61153: NEG
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 1
61161: PUSH
61162: LD_INT 0
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 1
61171: PUSH
61172: LD_INT 1
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 0
61181: PUSH
61182: LD_INT 1
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 1
61191: NEG
61192: PUSH
61193: LD_INT 0
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 1
61202: NEG
61203: PUSH
61204: LD_INT 1
61206: NEG
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 1
61214: NEG
61215: PUSH
61216: LD_INT 2
61218: NEG
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 0
61226: PUSH
61227: LD_INT 2
61229: NEG
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 1
61237: PUSH
61238: LD_INT 1
61240: NEG
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 2
61248: NEG
61249: PUSH
61250: LD_INT 1
61252: NEG
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 2
61260: NEG
61261: PUSH
61262: LD_INT 2
61264: NEG
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61284: LD_ADDR_VAR 0 48
61288: PUSH
61289: LD_INT 0
61291: PUSH
61292: LD_INT 0
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 0
61301: PUSH
61302: LD_INT 1
61304: NEG
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 1
61312: PUSH
61313: LD_INT 0
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 1
61322: PUSH
61323: LD_INT 1
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 0
61332: PUSH
61333: LD_INT 1
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 1
61342: NEG
61343: PUSH
61344: LD_INT 0
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 1
61353: NEG
61354: PUSH
61355: LD_INT 1
61357: NEG
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 1
61365: NEG
61366: PUSH
61367: LD_INT 2
61369: NEG
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 0
61377: PUSH
61378: LD_INT 2
61380: NEG
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 1
61388: PUSH
61389: LD_INT 1
61391: NEG
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 2
61399: PUSH
61400: LD_INT 0
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 2
61409: PUSH
61410: LD_INT 1
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61431: LD_ADDR_VAR 0 49
61435: PUSH
61436: LD_INT 0
61438: PUSH
61439: LD_INT 0
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 0
61448: PUSH
61449: LD_INT 1
61451: NEG
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 1
61459: PUSH
61460: LD_INT 0
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 1
61469: PUSH
61470: LD_INT 1
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: LD_INT 0
61479: PUSH
61480: LD_INT 1
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: LD_INT 1
61489: NEG
61490: PUSH
61491: LD_INT 0
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: LD_INT 1
61500: NEG
61501: PUSH
61502: LD_INT 1
61504: NEG
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 1
61512: PUSH
61513: LD_INT 1
61515: NEG
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 2
61523: PUSH
61524: LD_INT 0
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 2
61533: PUSH
61534: LD_INT 1
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 2
61543: PUSH
61544: LD_INT 2
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 1
61553: PUSH
61554: LD_INT 2
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61575: LD_ADDR_VAR 0 50
61579: PUSH
61580: LD_INT 0
61582: PUSH
61583: LD_INT 0
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 0
61592: PUSH
61593: LD_INT 1
61595: NEG
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 1
61603: PUSH
61604: LD_INT 0
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 1
61613: PUSH
61614: LD_INT 1
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 0
61623: PUSH
61624: LD_INT 1
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: LD_INT 1
61633: NEG
61634: PUSH
61635: LD_INT 0
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 1
61644: NEG
61645: PUSH
61646: LD_INT 1
61648: NEG
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 2
61656: PUSH
61657: LD_INT 1
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 2
61666: PUSH
61667: LD_INT 2
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 1
61676: PUSH
61677: LD_INT 2
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 0
61686: PUSH
61687: LD_INT 2
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 1
61696: NEG
61697: PUSH
61698: LD_INT 1
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61719: LD_ADDR_VAR 0 51
61723: PUSH
61724: LD_INT 0
61726: PUSH
61727: LD_INT 0
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 0
61736: PUSH
61737: LD_INT 1
61739: NEG
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 1
61747: PUSH
61748: LD_INT 0
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 1
61757: PUSH
61758: LD_INT 1
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: LD_INT 0
61767: PUSH
61768: LD_INT 1
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 1
61777: NEG
61778: PUSH
61779: LD_INT 0
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 1
61788: NEG
61789: PUSH
61790: LD_INT 1
61792: NEG
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 1
61800: PUSH
61801: LD_INT 2
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 0
61810: PUSH
61811: LD_INT 2
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 1
61820: NEG
61821: PUSH
61822: LD_INT 1
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 2
61831: NEG
61832: PUSH
61833: LD_INT 0
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 2
61842: NEG
61843: PUSH
61844: LD_INT 1
61846: NEG
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61866: LD_ADDR_VAR 0 52
61870: PUSH
61871: LD_INT 0
61873: PUSH
61874: LD_INT 0
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 0
61883: PUSH
61884: LD_INT 1
61886: NEG
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 1
61894: PUSH
61895: LD_INT 0
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 1
61904: PUSH
61905: LD_INT 1
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 0
61914: PUSH
61915: LD_INT 1
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 1
61924: NEG
61925: PUSH
61926: LD_INT 0
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 1
61935: NEG
61936: PUSH
61937: LD_INT 1
61939: NEG
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 1
61947: NEG
61948: PUSH
61949: LD_INT 2
61951: NEG
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 1
61959: NEG
61960: PUSH
61961: LD_INT 1
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 2
61970: NEG
61971: PUSH
61972: LD_INT 0
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 2
61981: NEG
61982: PUSH
61983: LD_INT 1
61985: NEG
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: PUSH
61991: LD_INT 2
61993: NEG
61994: PUSH
61995: LD_INT 2
61997: NEG
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62017: LD_ADDR_VAR 0 53
62021: PUSH
62022: LD_INT 0
62024: PUSH
62025: LD_INT 0
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: LD_INT 0
62034: PUSH
62035: LD_INT 1
62037: NEG
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 1
62045: PUSH
62046: LD_INT 0
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 1
62055: PUSH
62056: LD_INT 1
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 0
62065: PUSH
62066: LD_INT 1
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 1
62075: NEG
62076: PUSH
62077: LD_INT 0
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 1
62086: NEG
62087: PUSH
62088: LD_INT 1
62090: NEG
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 1
62098: NEG
62099: PUSH
62100: LD_INT 2
62102: NEG
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 0
62110: PUSH
62111: LD_INT 2
62113: NEG
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 1
62121: PUSH
62122: LD_INT 1
62124: NEG
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 2
62132: PUSH
62133: LD_INT 0
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 2
62142: PUSH
62143: LD_INT 1
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 2
62152: PUSH
62153: LD_INT 2
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 1
62162: PUSH
62163: LD_INT 2
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 0
62172: PUSH
62173: LD_INT 2
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 1
62182: NEG
62183: PUSH
62184: LD_INT 1
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 2
62193: NEG
62194: PUSH
62195: LD_INT 0
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: LD_INT 2
62204: NEG
62205: PUSH
62206: LD_INT 1
62208: NEG
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 2
62216: NEG
62217: PUSH
62218: LD_INT 2
62220: NEG
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62247: LD_ADDR_VAR 0 54
62251: PUSH
62252: LD_INT 0
62254: PUSH
62255: LD_INT 0
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 0
62264: PUSH
62265: LD_INT 1
62267: NEG
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 1
62275: PUSH
62276: LD_INT 0
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 1
62285: PUSH
62286: LD_INT 1
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 0
62295: PUSH
62296: LD_INT 1
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 1
62305: NEG
62306: PUSH
62307: LD_INT 0
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 1
62316: NEG
62317: PUSH
62318: LD_INT 1
62320: NEG
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 1
62328: NEG
62329: PUSH
62330: LD_INT 2
62332: NEG
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 0
62340: PUSH
62341: LD_INT 2
62343: NEG
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 1
62351: PUSH
62352: LD_INT 1
62354: NEG
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PUSH
62360: LD_INT 2
62362: PUSH
62363: LD_INT 0
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 2
62372: PUSH
62373: LD_INT 1
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: LD_INT 2
62382: PUSH
62383: LD_INT 2
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 1
62392: PUSH
62393: LD_INT 2
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 0
62402: PUSH
62403: LD_INT 2
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 1
62412: NEG
62413: PUSH
62414: LD_INT 1
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: LD_INT 2
62423: NEG
62424: PUSH
62425: LD_INT 0
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 2
62434: NEG
62435: PUSH
62436: LD_INT 1
62438: NEG
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 2
62446: NEG
62447: PUSH
62448: LD_INT 2
62450: NEG
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62477: LD_ADDR_VAR 0 55
62481: PUSH
62482: LD_INT 0
62484: PUSH
62485: LD_INT 0
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 0
62494: PUSH
62495: LD_INT 1
62497: NEG
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: LD_INT 1
62505: PUSH
62506: LD_INT 0
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 1
62515: PUSH
62516: LD_INT 1
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: LD_INT 0
62525: PUSH
62526: LD_INT 1
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 1
62535: NEG
62536: PUSH
62537: LD_INT 0
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 1
62546: NEG
62547: PUSH
62548: LD_INT 1
62550: NEG
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 1
62558: NEG
62559: PUSH
62560: LD_INT 2
62562: NEG
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 0
62570: PUSH
62571: LD_INT 2
62573: NEG
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 1
62581: PUSH
62582: LD_INT 1
62584: NEG
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: LD_INT 2
62592: PUSH
62593: LD_INT 0
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 2
62602: PUSH
62603: LD_INT 1
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: PUSH
62610: LD_INT 2
62612: PUSH
62613: LD_INT 2
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 1
62622: PUSH
62623: LD_INT 2
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: LD_INT 0
62632: PUSH
62633: LD_INT 2
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 1
62642: NEG
62643: PUSH
62644: LD_INT 1
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 2
62653: NEG
62654: PUSH
62655: LD_INT 0
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 2
62664: NEG
62665: PUSH
62666: LD_INT 1
62668: NEG
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 2
62676: NEG
62677: PUSH
62678: LD_INT 2
62680: NEG
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62707: LD_ADDR_VAR 0 56
62711: PUSH
62712: LD_INT 0
62714: PUSH
62715: LD_INT 0
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 0
62724: PUSH
62725: LD_INT 1
62727: NEG
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 1
62735: PUSH
62736: LD_INT 0
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 1
62745: PUSH
62746: LD_INT 1
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 0
62755: PUSH
62756: LD_INT 1
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 1
62765: NEG
62766: PUSH
62767: LD_INT 0
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 1
62776: NEG
62777: PUSH
62778: LD_INT 1
62780: NEG
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 1
62788: NEG
62789: PUSH
62790: LD_INT 2
62792: NEG
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 0
62800: PUSH
62801: LD_INT 2
62803: NEG
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: LD_INT 1
62811: PUSH
62812: LD_INT 1
62814: NEG
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: LD_INT 2
62822: PUSH
62823: LD_INT 0
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 2
62832: PUSH
62833: LD_INT 1
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 2
62842: PUSH
62843: LD_INT 2
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 1
62852: PUSH
62853: LD_INT 2
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 0
62862: PUSH
62863: LD_INT 2
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 1
62872: NEG
62873: PUSH
62874: LD_INT 1
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 2
62883: NEG
62884: PUSH
62885: LD_INT 0
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 2
62894: NEG
62895: PUSH
62896: LD_INT 1
62898: NEG
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 2
62906: NEG
62907: PUSH
62908: LD_INT 2
62910: NEG
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62937: LD_ADDR_VAR 0 57
62941: PUSH
62942: LD_INT 0
62944: PUSH
62945: LD_INT 0
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: LD_INT 0
62954: PUSH
62955: LD_INT 1
62957: NEG
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 1
62965: PUSH
62966: LD_INT 0
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: PUSH
62973: LD_INT 1
62975: PUSH
62976: LD_INT 1
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: LD_INT 0
62985: PUSH
62986: LD_INT 1
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 1
62995: NEG
62996: PUSH
62997: LD_INT 0
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 1
63006: NEG
63007: PUSH
63008: LD_INT 1
63010: NEG
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 1
63018: NEG
63019: PUSH
63020: LD_INT 2
63022: NEG
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 0
63030: PUSH
63031: LD_INT 2
63033: NEG
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 1
63041: PUSH
63042: LD_INT 1
63044: NEG
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 2
63052: PUSH
63053: LD_INT 0
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 2
63062: PUSH
63063: LD_INT 1
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 2
63072: PUSH
63073: LD_INT 2
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 1
63082: PUSH
63083: LD_INT 2
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: LD_INT 0
63092: PUSH
63093: LD_INT 2
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 1
63102: NEG
63103: PUSH
63104: LD_INT 1
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: LD_INT 2
63113: NEG
63114: PUSH
63115: LD_INT 0
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: LD_INT 2
63124: NEG
63125: PUSH
63126: LD_INT 1
63128: NEG
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 2
63136: NEG
63137: PUSH
63138: LD_INT 2
63140: NEG
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63167: LD_ADDR_VAR 0 58
63171: PUSH
63172: LD_INT 0
63174: PUSH
63175: LD_INT 0
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: LD_INT 0
63184: PUSH
63185: LD_INT 1
63187: NEG
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: PUSH
63193: LD_INT 1
63195: PUSH
63196: LD_INT 0
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: PUSH
63203: LD_INT 1
63205: PUSH
63206: LD_INT 1
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 0
63215: PUSH
63216: LD_INT 1
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: LD_INT 1
63225: NEG
63226: PUSH
63227: LD_INT 0
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 1
63236: NEG
63237: PUSH
63238: LD_INT 1
63240: NEG
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: LD_INT 1
63248: NEG
63249: PUSH
63250: LD_INT 2
63252: NEG
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 0
63260: PUSH
63261: LD_INT 2
63263: NEG
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 1
63271: PUSH
63272: LD_INT 1
63274: NEG
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PUSH
63280: LD_INT 2
63282: PUSH
63283: LD_INT 0
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: LD_INT 2
63292: PUSH
63293: LD_INT 1
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: LD_INT 2
63302: PUSH
63303: LD_INT 2
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 1
63312: PUSH
63313: LD_INT 2
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: PUSH
63320: LD_INT 0
63322: PUSH
63323: LD_INT 2
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_INT 1
63332: NEG
63333: PUSH
63334: LD_INT 1
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 2
63343: NEG
63344: PUSH
63345: LD_INT 0
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: PUSH
63352: LD_INT 2
63354: NEG
63355: PUSH
63356: LD_INT 1
63358: NEG
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 2
63366: NEG
63367: PUSH
63368: LD_INT 2
63370: NEG
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63397: LD_ADDR_VAR 0 59
63401: PUSH
63402: LD_INT 0
63404: PUSH
63405: LD_INT 0
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: LD_INT 0
63414: PUSH
63415: LD_INT 1
63417: NEG
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: LD_INT 1
63425: PUSH
63426: LD_INT 0
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: LD_INT 1
63435: PUSH
63436: LD_INT 1
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: PUSH
63443: LD_INT 0
63445: PUSH
63446: LD_INT 1
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: PUSH
63453: LD_INT 1
63455: NEG
63456: PUSH
63457: LD_INT 0
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: PUSH
63464: LD_INT 1
63466: NEG
63467: PUSH
63468: LD_INT 1
63470: NEG
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63485: LD_ADDR_VAR 0 60
63489: PUSH
63490: LD_INT 0
63492: PUSH
63493: LD_INT 0
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: LD_INT 0
63502: PUSH
63503: LD_INT 1
63505: NEG
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 1
63513: PUSH
63514: LD_INT 0
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: PUSH
63521: LD_INT 1
63523: PUSH
63524: LD_INT 1
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: PUSH
63531: LD_INT 0
63533: PUSH
63534: LD_INT 1
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 1
63543: NEG
63544: PUSH
63545: LD_INT 0
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: LD_INT 1
63554: NEG
63555: PUSH
63556: LD_INT 1
63558: NEG
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63573: LD_ADDR_VAR 0 61
63577: PUSH
63578: LD_INT 0
63580: PUSH
63581: LD_INT 0
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 0
63590: PUSH
63591: LD_INT 1
63593: NEG
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 1
63601: PUSH
63602: LD_INT 0
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 1
63611: PUSH
63612: LD_INT 1
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 0
63621: PUSH
63622: LD_INT 1
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: PUSH
63629: LD_INT 1
63631: NEG
63632: PUSH
63633: LD_INT 0
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: LD_INT 1
63642: NEG
63643: PUSH
63644: LD_INT 1
63646: NEG
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: LIST
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63661: LD_ADDR_VAR 0 62
63665: PUSH
63666: LD_INT 0
63668: PUSH
63669: LD_INT 0
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 0
63678: PUSH
63679: LD_INT 1
63681: NEG
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 1
63689: PUSH
63690: LD_INT 0
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: PUSH
63697: LD_INT 1
63699: PUSH
63700: LD_INT 1
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: LD_INT 0
63709: PUSH
63710: LD_INT 1
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 1
63719: NEG
63720: PUSH
63721: LD_INT 0
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: LD_INT 1
63730: NEG
63731: PUSH
63732: LD_INT 1
63734: NEG
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63749: LD_ADDR_VAR 0 63
63753: PUSH
63754: LD_INT 0
63756: PUSH
63757: LD_INT 0
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 0
63766: PUSH
63767: LD_INT 1
63769: NEG
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 1
63777: PUSH
63778: LD_INT 0
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 1
63787: PUSH
63788: LD_INT 1
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: LD_INT 0
63797: PUSH
63798: LD_INT 1
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 1
63807: NEG
63808: PUSH
63809: LD_INT 0
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 1
63818: NEG
63819: PUSH
63820: LD_INT 1
63822: NEG
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: LIST
63832: LIST
63833: LIST
63834: LIST
63835: LIST
63836: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63837: LD_ADDR_VAR 0 64
63841: PUSH
63842: LD_INT 0
63844: PUSH
63845: LD_INT 0
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 0
63854: PUSH
63855: LD_INT 1
63857: NEG
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: PUSH
63863: LD_INT 1
63865: PUSH
63866: LD_INT 0
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: PUSH
63873: LD_INT 1
63875: PUSH
63876: LD_INT 1
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: LD_INT 0
63885: PUSH
63886: LD_INT 1
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: PUSH
63893: LD_INT 1
63895: NEG
63896: PUSH
63897: LD_INT 0
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: PUSH
63904: LD_INT 1
63906: NEG
63907: PUSH
63908: LD_INT 1
63910: NEG
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: ST_TO_ADDR
// end ; 1 :
63925: GO 69822
63927: LD_INT 1
63929: DOUBLE
63930: EQUAL
63931: IFTRUE 63935
63933: GO 66558
63935: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63936: LD_ADDR_VAR 0 11
63940: PUSH
63941: LD_INT 1
63943: NEG
63944: PUSH
63945: LD_INT 3
63947: NEG
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: PUSH
63953: LD_INT 0
63955: PUSH
63956: LD_INT 3
63958: NEG
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 1
63966: PUSH
63967: LD_INT 2
63969: NEG
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: EMPTY
63976: LIST
63977: LIST
63978: LIST
63979: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63980: LD_ADDR_VAR 0 12
63984: PUSH
63985: LD_INT 2
63987: PUSH
63988: LD_INT 1
63990: NEG
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: LD_INT 3
63998: PUSH
63999: LD_INT 0
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 3
64008: PUSH
64009: LD_INT 1
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: LIST
64020: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64021: LD_ADDR_VAR 0 13
64025: PUSH
64026: LD_INT 3
64028: PUSH
64029: LD_INT 2
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PUSH
64036: LD_INT 3
64038: PUSH
64039: LD_INT 3
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_INT 2
64048: PUSH
64049: LD_INT 3
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: LIST
64060: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64061: LD_ADDR_VAR 0 14
64065: PUSH
64066: LD_INT 1
64068: PUSH
64069: LD_INT 3
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 0
64078: PUSH
64079: LD_INT 3
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 1
64088: NEG
64089: PUSH
64090: LD_INT 2
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: LIST
64101: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64102: LD_ADDR_VAR 0 15
64106: PUSH
64107: LD_INT 2
64109: NEG
64110: PUSH
64111: LD_INT 1
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 3
64120: NEG
64121: PUSH
64122: LD_INT 0
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: PUSH
64129: LD_INT 3
64131: NEG
64132: PUSH
64133: LD_INT 1
64135: NEG
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: LIST
64145: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64146: LD_ADDR_VAR 0 16
64150: PUSH
64151: LD_INT 2
64153: NEG
64154: PUSH
64155: LD_INT 3
64157: NEG
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 3
64165: NEG
64166: PUSH
64167: LD_INT 2
64169: NEG
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: LD_INT 3
64177: NEG
64178: PUSH
64179: LD_INT 3
64181: NEG
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: LIST
64191: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64192: LD_ADDR_VAR 0 17
64196: PUSH
64197: LD_INT 1
64199: NEG
64200: PUSH
64201: LD_INT 3
64203: NEG
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 0
64211: PUSH
64212: LD_INT 3
64214: NEG
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: LD_INT 1
64222: PUSH
64223: LD_INT 2
64225: NEG
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: LIST
64235: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64236: LD_ADDR_VAR 0 18
64240: PUSH
64241: LD_INT 2
64243: PUSH
64244: LD_INT 1
64246: NEG
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: PUSH
64252: LD_INT 3
64254: PUSH
64255: LD_INT 0
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: LD_INT 3
64264: PUSH
64265: LD_INT 1
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: LIST
64276: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64277: LD_ADDR_VAR 0 19
64281: PUSH
64282: LD_INT 3
64284: PUSH
64285: LD_INT 2
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: LD_INT 3
64294: PUSH
64295: LD_INT 3
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 2
64304: PUSH
64305: LD_INT 3
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: LIST
64316: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64317: LD_ADDR_VAR 0 20
64321: PUSH
64322: LD_INT 1
64324: PUSH
64325: LD_INT 3
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 0
64334: PUSH
64335: LD_INT 3
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: LD_INT 1
64344: NEG
64345: PUSH
64346: LD_INT 2
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: LIST
64357: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64358: LD_ADDR_VAR 0 21
64362: PUSH
64363: LD_INT 2
64365: NEG
64366: PUSH
64367: LD_INT 1
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: LD_INT 3
64376: NEG
64377: PUSH
64378: LD_INT 0
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PUSH
64385: LD_INT 3
64387: NEG
64388: PUSH
64389: LD_INT 1
64391: NEG
64392: PUSH
64393: EMPTY
64394: LIST
64395: LIST
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: LIST
64401: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64402: LD_ADDR_VAR 0 22
64406: PUSH
64407: LD_INT 2
64409: NEG
64410: PUSH
64411: LD_INT 3
64413: NEG
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: LD_INT 3
64421: NEG
64422: PUSH
64423: LD_INT 2
64425: NEG
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: PUSH
64431: LD_INT 3
64433: NEG
64434: PUSH
64435: LD_INT 3
64437: NEG
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: LIST
64447: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64448: LD_ADDR_VAR 0 23
64452: PUSH
64453: LD_INT 0
64455: PUSH
64456: LD_INT 3
64458: NEG
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: PUSH
64464: LD_INT 1
64466: NEG
64467: PUSH
64468: LD_INT 4
64470: NEG
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: LD_INT 1
64478: PUSH
64479: LD_INT 3
64481: NEG
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: LIST
64491: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64492: LD_ADDR_VAR 0 24
64496: PUSH
64497: LD_INT 3
64499: PUSH
64500: LD_INT 0
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: LD_INT 3
64509: PUSH
64510: LD_INT 1
64512: NEG
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: LD_INT 4
64520: PUSH
64521: LD_INT 1
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: LIST
64532: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64533: LD_ADDR_VAR 0 25
64537: PUSH
64538: LD_INT 3
64540: PUSH
64541: LD_INT 3
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: PUSH
64548: LD_INT 4
64550: PUSH
64551: LD_INT 3
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: PUSH
64558: LD_INT 3
64560: PUSH
64561: LD_INT 4
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: LIST
64572: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64573: LD_ADDR_VAR 0 26
64577: PUSH
64578: LD_INT 0
64580: PUSH
64581: LD_INT 3
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: LD_INT 1
64590: PUSH
64591: LD_INT 4
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: LD_INT 1
64600: NEG
64601: PUSH
64602: LD_INT 3
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: LIST
64613: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
64614: LD_ADDR_VAR 0 27
64618: PUSH
64619: LD_INT 3
64621: NEG
64622: PUSH
64623: LD_INT 0
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 3
64632: NEG
64633: PUSH
64634: LD_INT 1
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: PUSH
64641: LD_INT 4
64643: NEG
64644: PUSH
64645: LD_INT 1
64647: NEG
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: LIST
64657: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
64658: LD_ADDR_VAR 0 28
64662: PUSH
64663: LD_INT 3
64665: NEG
64666: PUSH
64667: LD_INT 3
64669: NEG
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: PUSH
64675: LD_INT 3
64677: NEG
64678: PUSH
64679: LD_INT 4
64681: NEG
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 4
64689: NEG
64690: PUSH
64691: LD_INT 3
64693: NEG
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: LIST
64703: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
64704: LD_ADDR_VAR 0 29
64708: PUSH
64709: LD_INT 1
64711: NEG
64712: PUSH
64713: LD_INT 3
64715: NEG
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: LD_INT 0
64723: PUSH
64724: LD_INT 3
64726: NEG
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 1
64734: PUSH
64735: LD_INT 2
64737: NEG
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: LD_INT 1
64745: NEG
64746: PUSH
64747: LD_INT 4
64749: NEG
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PUSH
64755: LD_INT 0
64757: PUSH
64758: LD_INT 4
64760: NEG
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: LD_INT 1
64768: PUSH
64769: LD_INT 3
64771: NEG
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: PUSH
64777: LD_INT 1
64779: NEG
64780: PUSH
64781: LD_INT 5
64783: NEG
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: LD_INT 0
64791: PUSH
64792: LD_INT 5
64794: NEG
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: LD_INT 1
64802: PUSH
64803: LD_INT 4
64805: NEG
64806: PUSH
64807: EMPTY
64808: LIST
64809: LIST
64810: PUSH
64811: LD_INT 1
64813: NEG
64814: PUSH
64815: LD_INT 6
64817: NEG
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: PUSH
64823: LD_INT 0
64825: PUSH
64826: LD_INT 6
64828: NEG
64829: PUSH
64830: EMPTY
64831: LIST
64832: LIST
64833: PUSH
64834: LD_INT 1
64836: PUSH
64837: LD_INT 5
64839: NEG
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: LIST
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: LIST
64854: LIST
64855: LIST
64856: LIST
64857: LIST
64858: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64859: LD_ADDR_VAR 0 30
64863: PUSH
64864: LD_INT 2
64866: PUSH
64867: LD_INT 1
64869: NEG
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: LD_INT 3
64877: PUSH
64878: LD_INT 0
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PUSH
64885: LD_INT 3
64887: PUSH
64888: LD_INT 1
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: LD_INT 3
64897: PUSH
64898: LD_INT 1
64900: NEG
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 4
64908: PUSH
64909: LD_INT 0
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: LD_INT 4
64918: PUSH
64919: LD_INT 1
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: LD_INT 4
64928: PUSH
64929: LD_INT 1
64931: NEG
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 5
64939: PUSH
64940: LD_INT 0
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: LD_INT 5
64949: PUSH
64950: LD_INT 1
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: PUSH
64957: LD_INT 5
64959: PUSH
64960: LD_INT 1
64962: NEG
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: PUSH
64968: LD_INT 6
64970: PUSH
64971: LD_INT 0
64973: PUSH
64974: EMPTY
64975: LIST
64976: LIST
64977: PUSH
64978: LD_INT 6
64980: PUSH
64981: LD_INT 1
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65002: LD_ADDR_VAR 0 31
65006: PUSH
65007: LD_INT 3
65009: PUSH
65010: LD_INT 2
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: PUSH
65017: LD_INT 3
65019: PUSH
65020: LD_INT 3
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: PUSH
65027: LD_INT 2
65029: PUSH
65030: LD_INT 3
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PUSH
65037: LD_INT 4
65039: PUSH
65040: LD_INT 3
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: PUSH
65047: LD_INT 4
65049: PUSH
65050: LD_INT 4
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: PUSH
65057: LD_INT 3
65059: PUSH
65060: LD_INT 4
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: LD_INT 5
65069: PUSH
65070: LD_INT 4
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: PUSH
65077: LD_INT 5
65079: PUSH
65080: LD_INT 5
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: PUSH
65087: LD_INT 4
65089: PUSH
65090: LD_INT 5
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: LD_INT 6
65099: PUSH
65100: LD_INT 5
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: PUSH
65107: LD_INT 6
65109: PUSH
65110: LD_INT 6
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: PUSH
65117: LD_INT 5
65119: PUSH
65120: LD_INT 6
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65141: LD_ADDR_VAR 0 32
65145: PUSH
65146: LD_INT 1
65148: PUSH
65149: LD_INT 3
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: LD_INT 0
65158: PUSH
65159: LD_INT 3
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: PUSH
65166: LD_INT 1
65168: NEG
65169: PUSH
65170: LD_INT 2
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: LD_INT 1
65179: PUSH
65180: LD_INT 4
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: PUSH
65187: LD_INT 0
65189: PUSH
65190: LD_INT 4
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 1
65199: NEG
65200: PUSH
65201: LD_INT 3
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PUSH
65208: LD_INT 1
65210: PUSH
65211: LD_INT 5
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: PUSH
65218: LD_INT 0
65220: PUSH
65221: LD_INT 5
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PUSH
65228: LD_INT 1
65230: NEG
65231: PUSH
65232: LD_INT 4
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 1
65241: PUSH
65242: LD_INT 6
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: LD_INT 0
65251: PUSH
65252: LD_INT 6
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 1
65261: NEG
65262: PUSH
65263: LD_INT 5
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: LIST
65274: LIST
65275: LIST
65276: LIST
65277: LIST
65278: LIST
65279: LIST
65280: LIST
65281: LIST
65282: LIST
65283: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65284: LD_ADDR_VAR 0 33
65288: PUSH
65289: LD_INT 2
65291: NEG
65292: PUSH
65293: LD_INT 1
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: PUSH
65300: LD_INT 3
65302: NEG
65303: PUSH
65304: LD_INT 0
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: PUSH
65311: LD_INT 3
65313: NEG
65314: PUSH
65315: LD_INT 1
65317: NEG
65318: PUSH
65319: EMPTY
65320: LIST
65321: LIST
65322: PUSH
65323: LD_INT 3
65325: NEG
65326: PUSH
65327: LD_INT 1
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PUSH
65334: LD_INT 4
65336: NEG
65337: PUSH
65338: LD_INT 0
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: PUSH
65345: LD_INT 4
65347: NEG
65348: PUSH
65349: LD_INT 1
65351: NEG
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 4
65359: NEG
65360: PUSH
65361: LD_INT 1
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 5
65370: NEG
65371: PUSH
65372: LD_INT 0
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: PUSH
65379: LD_INT 5
65381: NEG
65382: PUSH
65383: LD_INT 1
65385: NEG
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: PUSH
65391: LD_INT 5
65393: NEG
65394: PUSH
65395: LD_INT 1
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: LD_INT 6
65404: NEG
65405: PUSH
65406: LD_INT 0
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: LD_INT 6
65415: NEG
65416: PUSH
65417: LD_INT 1
65419: NEG
65420: PUSH
65421: EMPTY
65422: LIST
65423: LIST
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: LIST
65429: LIST
65430: LIST
65431: LIST
65432: LIST
65433: LIST
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65439: LD_ADDR_VAR 0 34
65443: PUSH
65444: LD_INT 2
65446: NEG
65447: PUSH
65448: LD_INT 3
65450: NEG
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: LD_INT 3
65458: NEG
65459: PUSH
65460: LD_INT 2
65462: NEG
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: LD_INT 3
65470: NEG
65471: PUSH
65472: LD_INT 3
65474: NEG
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 3
65482: NEG
65483: PUSH
65484: LD_INT 4
65486: NEG
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: LD_INT 4
65494: NEG
65495: PUSH
65496: LD_INT 3
65498: NEG
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PUSH
65504: LD_INT 4
65506: NEG
65507: PUSH
65508: LD_INT 4
65510: NEG
65511: PUSH
65512: EMPTY
65513: LIST
65514: LIST
65515: PUSH
65516: LD_INT 4
65518: NEG
65519: PUSH
65520: LD_INT 5
65522: NEG
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: LD_INT 5
65530: NEG
65531: PUSH
65532: LD_INT 4
65534: NEG
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: LD_INT 5
65542: NEG
65543: PUSH
65544: LD_INT 5
65546: NEG
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: PUSH
65552: LD_INT 5
65554: NEG
65555: PUSH
65556: LD_INT 6
65558: NEG
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: PUSH
65564: LD_INT 6
65566: NEG
65567: PUSH
65568: LD_INT 5
65570: NEG
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: PUSH
65576: LD_INT 6
65578: NEG
65579: PUSH
65580: LD_INT 6
65582: NEG
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
65602: LD_ADDR_VAR 0 41
65606: PUSH
65607: LD_INT 0
65609: PUSH
65610: LD_INT 2
65612: NEG
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: PUSH
65618: LD_INT 1
65620: NEG
65621: PUSH
65622: LD_INT 3
65624: NEG
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: PUSH
65630: LD_INT 1
65632: PUSH
65633: LD_INT 2
65635: NEG
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: LIST
65645: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
65646: LD_ADDR_VAR 0 42
65650: PUSH
65651: LD_INT 2
65653: PUSH
65654: LD_INT 0
65656: PUSH
65657: EMPTY
65658: LIST
65659: LIST
65660: PUSH
65661: LD_INT 2
65663: PUSH
65664: LD_INT 1
65666: NEG
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: LD_INT 3
65674: PUSH
65675: LD_INT 1
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: LIST
65686: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
65687: LD_ADDR_VAR 0 43
65691: PUSH
65692: LD_INT 2
65694: PUSH
65695: LD_INT 2
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: PUSH
65702: LD_INT 3
65704: PUSH
65705: LD_INT 2
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: PUSH
65712: LD_INT 2
65714: PUSH
65715: LD_INT 3
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: LIST
65726: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
65727: LD_ADDR_VAR 0 44
65731: PUSH
65732: LD_INT 0
65734: PUSH
65735: LD_INT 2
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: PUSH
65742: LD_INT 1
65744: PUSH
65745: LD_INT 3
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: PUSH
65752: LD_INT 1
65754: NEG
65755: PUSH
65756: LD_INT 2
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: PUSH
65763: EMPTY
65764: LIST
65765: LIST
65766: LIST
65767: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65768: LD_ADDR_VAR 0 45
65772: PUSH
65773: LD_INT 2
65775: NEG
65776: PUSH
65777: LD_INT 0
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: PUSH
65784: LD_INT 2
65786: NEG
65787: PUSH
65788: LD_INT 1
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: PUSH
65795: LD_INT 3
65797: NEG
65798: PUSH
65799: LD_INT 1
65801: NEG
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: LIST
65811: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65812: LD_ADDR_VAR 0 46
65816: PUSH
65817: LD_INT 2
65819: NEG
65820: PUSH
65821: LD_INT 2
65823: NEG
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: PUSH
65829: LD_INT 2
65831: NEG
65832: PUSH
65833: LD_INT 3
65835: NEG
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: LD_INT 3
65843: NEG
65844: PUSH
65845: LD_INT 2
65847: NEG
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: LIST
65857: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65858: LD_ADDR_VAR 0 47
65862: PUSH
65863: LD_INT 2
65865: NEG
65866: PUSH
65867: LD_INT 3
65869: NEG
65870: PUSH
65871: EMPTY
65872: LIST
65873: LIST
65874: PUSH
65875: LD_INT 1
65877: NEG
65878: PUSH
65879: LD_INT 3
65881: NEG
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65891: LD_ADDR_VAR 0 48
65895: PUSH
65896: LD_INT 1
65898: PUSH
65899: LD_INT 2
65901: NEG
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 2
65909: PUSH
65910: LD_INT 1
65912: NEG
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65922: LD_ADDR_VAR 0 49
65926: PUSH
65927: LD_INT 3
65929: PUSH
65930: LD_INT 1
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: PUSH
65937: LD_INT 3
65939: PUSH
65940: LD_INT 2
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65951: LD_ADDR_VAR 0 50
65955: PUSH
65956: LD_INT 2
65958: PUSH
65959: LD_INT 3
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: PUSH
65966: LD_INT 1
65968: PUSH
65969: LD_INT 3
65971: PUSH
65972: EMPTY
65973: LIST
65974: LIST
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65980: LD_ADDR_VAR 0 51
65984: PUSH
65985: LD_INT 1
65987: NEG
65988: PUSH
65989: LD_INT 2
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: PUSH
65996: LD_INT 2
65998: NEG
65999: PUSH
66000: LD_INT 1
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66011: LD_ADDR_VAR 0 52
66015: PUSH
66016: LD_INT 3
66018: NEG
66019: PUSH
66020: LD_INT 1
66022: NEG
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: PUSH
66028: LD_INT 3
66030: NEG
66031: PUSH
66032: LD_INT 2
66034: NEG
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66044: LD_ADDR_VAR 0 53
66048: PUSH
66049: LD_INT 1
66051: NEG
66052: PUSH
66053: LD_INT 3
66055: NEG
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: LD_INT 0
66063: PUSH
66064: LD_INT 3
66066: NEG
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: LD_INT 1
66074: PUSH
66075: LD_INT 2
66077: NEG
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: LIST
66087: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66088: LD_ADDR_VAR 0 54
66092: PUSH
66093: LD_INT 2
66095: PUSH
66096: LD_INT 1
66098: NEG
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: PUSH
66104: LD_INT 3
66106: PUSH
66107: LD_INT 0
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: PUSH
66114: LD_INT 3
66116: PUSH
66117: LD_INT 1
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: LIST
66128: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66129: LD_ADDR_VAR 0 55
66133: PUSH
66134: LD_INT 3
66136: PUSH
66137: LD_INT 2
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: PUSH
66144: LD_INT 3
66146: PUSH
66147: LD_INT 3
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: PUSH
66154: LD_INT 2
66156: PUSH
66157: LD_INT 3
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: LIST
66168: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66169: LD_ADDR_VAR 0 56
66173: PUSH
66174: LD_INT 1
66176: PUSH
66177: LD_INT 3
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: PUSH
66184: LD_INT 0
66186: PUSH
66187: LD_INT 3
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: PUSH
66194: LD_INT 1
66196: NEG
66197: PUSH
66198: LD_INT 2
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: LIST
66209: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66210: LD_ADDR_VAR 0 57
66214: PUSH
66215: LD_INT 2
66217: NEG
66218: PUSH
66219: LD_INT 1
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: PUSH
66226: LD_INT 3
66228: NEG
66229: PUSH
66230: LD_INT 0
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: LD_INT 3
66239: NEG
66240: PUSH
66241: LD_INT 1
66243: NEG
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: LIST
66253: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66254: LD_ADDR_VAR 0 58
66258: PUSH
66259: LD_INT 2
66261: NEG
66262: PUSH
66263: LD_INT 3
66265: NEG
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: PUSH
66271: LD_INT 3
66273: NEG
66274: PUSH
66275: LD_INT 2
66277: NEG
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: PUSH
66283: LD_INT 3
66285: NEG
66286: PUSH
66287: LD_INT 3
66289: NEG
66290: PUSH
66291: EMPTY
66292: LIST
66293: LIST
66294: PUSH
66295: EMPTY
66296: LIST
66297: LIST
66298: LIST
66299: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66300: LD_ADDR_VAR 0 59
66304: PUSH
66305: LD_INT 1
66307: NEG
66308: PUSH
66309: LD_INT 2
66311: NEG
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: PUSH
66317: LD_INT 0
66319: PUSH
66320: LD_INT 2
66322: NEG
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: PUSH
66328: LD_INT 1
66330: PUSH
66331: LD_INT 1
66333: NEG
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: PUSH
66339: EMPTY
66340: LIST
66341: LIST
66342: LIST
66343: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66344: LD_ADDR_VAR 0 60
66348: PUSH
66349: LD_INT 1
66351: PUSH
66352: LD_INT 1
66354: NEG
66355: PUSH
66356: EMPTY
66357: LIST
66358: LIST
66359: PUSH
66360: LD_INT 2
66362: PUSH
66363: LD_INT 0
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: PUSH
66370: LD_INT 2
66372: PUSH
66373: LD_INT 1
66375: PUSH
66376: EMPTY
66377: LIST
66378: LIST
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: LIST
66384: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66385: LD_ADDR_VAR 0 61
66389: PUSH
66390: LD_INT 2
66392: PUSH
66393: LD_INT 1
66395: PUSH
66396: EMPTY
66397: LIST
66398: LIST
66399: PUSH
66400: LD_INT 2
66402: PUSH
66403: LD_INT 2
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: PUSH
66410: LD_INT 1
66412: PUSH
66413: LD_INT 2
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: LIST
66424: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66425: LD_ADDR_VAR 0 62
66429: PUSH
66430: LD_INT 1
66432: PUSH
66433: LD_INT 2
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PUSH
66440: LD_INT 0
66442: PUSH
66443: LD_INT 2
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: PUSH
66450: LD_INT 1
66452: NEG
66453: PUSH
66454: LD_INT 1
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: LIST
66465: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66466: LD_ADDR_VAR 0 63
66470: PUSH
66471: LD_INT 1
66473: NEG
66474: PUSH
66475: LD_INT 1
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: LD_INT 2
66484: NEG
66485: PUSH
66486: LD_INT 0
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 2
66495: NEG
66496: PUSH
66497: LD_INT 1
66499: NEG
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: LIST
66509: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66510: LD_ADDR_VAR 0 64
66514: PUSH
66515: LD_INT 1
66517: NEG
66518: PUSH
66519: LD_INT 2
66521: NEG
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PUSH
66527: LD_INT 2
66529: NEG
66530: PUSH
66531: LD_INT 1
66533: NEG
66534: PUSH
66535: EMPTY
66536: LIST
66537: LIST
66538: PUSH
66539: LD_INT 2
66541: NEG
66542: PUSH
66543: LD_INT 2
66545: NEG
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: LIST
66555: ST_TO_ADDR
// end ; 2 :
66556: GO 69822
66558: LD_INT 2
66560: DOUBLE
66561: EQUAL
66562: IFTRUE 66566
66564: GO 69821
66566: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66567: LD_ADDR_VAR 0 29
66571: PUSH
66572: LD_INT 4
66574: PUSH
66575: LD_INT 0
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: LD_INT 4
66584: PUSH
66585: LD_INT 1
66587: NEG
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: PUSH
66593: LD_INT 5
66595: PUSH
66596: LD_INT 0
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: PUSH
66603: LD_INT 5
66605: PUSH
66606: LD_INT 1
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: PUSH
66613: LD_INT 4
66615: PUSH
66616: LD_INT 1
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: LD_INT 3
66625: PUSH
66626: LD_INT 0
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: PUSH
66633: LD_INT 3
66635: PUSH
66636: LD_INT 1
66638: NEG
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: PUSH
66644: LD_INT 3
66646: PUSH
66647: LD_INT 2
66649: NEG
66650: PUSH
66651: EMPTY
66652: LIST
66653: LIST
66654: PUSH
66655: LD_INT 5
66657: PUSH
66658: LD_INT 2
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: PUSH
66665: LD_INT 3
66667: PUSH
66668: LD_INT 3
66670: PUSH
66671: EMPTY
66672: LIST
66673: LIST
66674: PUSH
66675: LD_INT 3
66677: PUSH
66678: LD_INT 2
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: PUSH
66685: LD_INT 4
66687: PUSH
66688: LD_INT 3
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: LD_INT 4
66697: PUSH
66698: LD_INT 4
66700: PUSH
66701: EMPTY
66702: LIST
66703: LIST
66704: PUSH
66705: LD_INT 3
66707: PUSH
66708: LD_INT 4
66710: PUSH
66711: EMPTY
66712: LIST
66713: LIST
66714: PUSH
66715: LD_INT 2
66717: PUSH
66718: LD_INT 3
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: PUSH
66725: LD_INT 2
66727: PUSH
66728: LD_INT 2
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 4
66737: PUSH
66738: LD_INT 2
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PUSH
66745: LD_INT 2
66747: PUSH
66748: LD_INT 4
66750: PUSH
66751: EMPTY
66752: LIST
66753: LIST
66754: PUSH
66755: LD_INT 0
66757: PUSH
66758: LD_INT 4
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: PUSH
66765: LD_INT 0
66767: PUSH
66768: LD_INT 3
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: PUSH
66775: LD_INT 1
66777: PUSH
66778: LD_INT 4
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: PUSH
66785: LD_INT 1
66787: PUSH
66788: LD_INT 5
66790: PUSH
66791: EMPTY
66792: LIST
66793: LIST
66794: PUSH
66795: LD_INT 0
66797: PUSH
66798: LD_INT 5
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: PUSH
66805: LD_INT 1
66807: NEG
66808: PUSH
66809: LD_INT 4
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: PUSH
66816: LD_INT 1
66818: NEG
66819: PUSH
66820: LD_INT 3
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 2
66829: PUSH
66830: LD_INT 5
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 2
66839: NEG
66840: PUSH
66841: LD_INT 3
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: PUSH
66848: LD_INT 3
66850: NEG
66851: PUSH
66852: LD_INT 0
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: LD_INT 3
66861: NEG
66862: PUSH
66863: LD_INT 1
66865: NEG
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: PUSH
66871: LD_INT 2
66873: NEG
66874: PUSH
66875: LD_INT 0
66877: PUSH
66878: EMPTY
66879: LIST
66880: LIST
66881: PUSH
66882: LD_INT 2
66884: NEG
66885: PUSH
66886: LD_INT 1
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: LD_INT 3
66895: NEG
66896: PUSH
66897: LD_INT 1
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: PUSH
66904: LD_INT 4
66906: NEG
66907: PUSH
66908: LD_INT 0
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: PUSH
66915: LD_INT 4
66917: NEG
66918: PUSH
66919: LD_INT 1
66921: NEG
66922: PUSH
66923: EMPTY
66924: LIST
66925: LIST
66926: PUSH
66927: LD_INT 4
66929: NEG
66930: PUSH
66931: LD_INT 2
66933: NEG
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: LD_INT 2
66941: NEG
66942: PUSH
66943: LD_INT 2
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 4
66952: NEG
66953: PUSH
66954: LD_INT 4
66956: NEG
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 4
66964: NEG
66965: PUSH
66966: LD_INT 5
66968: NEG
66969: PUSH
66970: EMPTY
66971: LIST
66972: LIST
66973: PUSH
66974: LD_INT 3
66976: NEG
66977: PUSH
66978: LD_INT 4
66980: NEG
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: PUSH
66986: LD_INT 3
66988: NEG
66989: PUSH
66990: LD_INT 3
66992: NEG
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: LD_INT 4
67000: NEG
67001: PUSH
67002: LD_INT 3
67004: NEG
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PUSH
67010: LD_INT 5
67012: NEG
67013: PUSH
67014: LD_INT 4
67016: NEG
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: PUSH
67022: LD_INT 5
67024: NEG
67025: PUSH
67026: LD_INT 5
67028: NEG
67029: PUSH
67030: EMPTY
67031: LIST
67032: LIST
67033: PUSH
67034: LD_INT 3
67036: NEG
67037: PUSH
67038: LD_INT 5
67040: NEG
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: PUSH
67046: LD_INT 5
67048: NEG
67049: PUSH
67050: LD_INT 3
67052: NEG
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: LIST
67062: LIST
67063: LIST
67064: LIST
67065: LIST
67066: LIST
67067: LIST
67068: LIST
67069: LIST
67070: LIST
67071: LIST
67072: LIST
67073: LIST
67074: LIST
67075: LIST
67076: LIST
67077: LIST
67078: LIST
67079: LIST
67080: LIST
67081: LIST
67082: LIST
67083: LIST
67084: LIST
67085: LIST
67086: LIST
67087: LIST
67088: LIST
67089: LIST
67090: LIST
67091: LIST
67092: LIST
67093: LIST
67094: LIST
67095: LIST
67096: LIST
67097: LIST
67098: LIST
67099: LIST
67100: LIST
67101: LIST
67102: LIST
67103: LIST
67104: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67105: LD_ADDR_VAR 0 30
67109: PUSH
67110: LD_INT 4
67112: PUSH
67113: LD_INT 4
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: PUSH
67120: LD_INT 4
67122: PUSH
67123: LD_INT 3
67125: PUSH
67126: EMPTY
67127: LIST
67128: LIST
67129: PUSH
67130: LD_INT 5
67132: PUSH
67133: LD_INT 4
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: LD_INT 5
67142: PUSH
67143: LD_INT 5
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: PUSH
67150: LD_INT 4
67152: PUSH
67153: LD_INT 5
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: PUSH
67160: LD_INT 3
67162: PUSH
67163: LD_INT 4
67165: PUSH
67166: EMPTY
67167: LIST
67168: LIST
67169: PUSH
67170: LD_INT 3
67172: PUSH
67173: LD_INT 3
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 5
67182: PUSH
67183: LD_INT 3
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: PUSH
67190: LD_INT 3
67192: PUSH
67193: LD_INT 5
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: PUSH
67200: LD_INT 0
67202: PUSH
67203: LD_INT 3
67205: PUSH
67206: EMPTY
67207: LIST
67208: LIST
67209: PUSH
67210: LD_INT 0
67212: PUSH
67213: LD_INT 2
67215: PUSH
67216: EMPTY
67217: LIST
67218: LIST
67219: PUSH
67220: LD_INT 1
67222: PUSH
67223: LD_INT 3
67225: PUSH
67226: EMPTY
67227: LIST
67228: LIST
67229: PUSH
67230: LD_INT 1
67232: PUSH
67233: LD_INT 4
67235: PUSH
67236: EMPTY
67237: LIST
67238: LIST
67239: PUSH
67240: LD_INT 0
67242: PUSH
67243: LD_INT 4
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: PUSH
67250: LD_INT 1
67252: NEG
67253: PUSH
67254: LD_INT 3
67256: PUSH
67257: EMPTY
67258: LIST
67259: LIST
67260: PUSH
67261: LD_INT 1
67263: NEG
67264: PUSH
67265: LD_INT 2
67267: PUSH
67268: EMPTY
67269: LIST
67270: LIST
67271: PUSH
67272: LD_INT 2
67274: PUSH
67275: LD_INT 4
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: PUSH
67282: LD_INT 2
67284: NEG
67285: PUSH
67286: LD_INT 2
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 4
67295: NEG
67296: PUSH
67297: LD_INT 0
67299: PUSH
67300: EMPTY
67301: LIST
67302: LIST
67303: PUSH
67304: LD_INT 4
67306: NEG
67307: PUSH
67308: LD_INT 1
67310: NEG
67311: PUSH
67312: EMPTY
67313: LIST
67314: LIST
67315: PUSH
67316: LD_INT 3
67318: NEG
67319: PUSH
67320: LD_INT 0
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: PUSH
67327: LD_INT 3
67329: NEG
67330: PUSH
67331: LD_INT 1
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: PUSH
67338: LD_INT 4
67340: NEG
67341: PUSH
67342: LD_INT 1
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PUSH
67349: LD_INT 5
67351: NEG
67352: PUSH
67353: LD_INT 0
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: PUSH
67360: LD_INT 5
67362: NEG
67363: PUSH
67364: LD_INT 1
67366: NEG
67367: PUSH
67368: EMPTY
67369: LIST
67370: LIST
67371: PUSH
67372: LD_INT 5
67374: NEG
67375: PUSH
67376: LD_INT 2
67378: NEG
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: PUSH
67384: LD_INT 3
67386: NEG
67387: PUSH
67388: LD_INT 2
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: PUSH
67395: LD_INT 3
67397: NEG
67398: PUSH
67399: LD_INT 3
67401: NEG
67402: PUSH
67403: EMPTY
67404: LIST
67405: LIST
67406: PUSH
67407: LD_INT 3
67409: NEG
67410: PUSH
67411: LD_INT 4
67413: NEG
67414: PUSH
67415: EMPTY
67416: LIST
67417: LIST
67418: PUSH
67419: LD_INT 2
67421: NEG
67422: PUSH
67423: LD_INT 3
67425: NEG
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: LD_INT 2
67433: NEG
67434: PUSH
67435: LD_INT 2
67437: NEG
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: PUSH
67443: LD_INT 3
67445: NEG
67446: PUSH
67447: LD_INT 2
67449: NEG
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: PUSH
67455: LD_INT 4
67457: NEG
67458: PUSH
67459: LD_INT 3
67461: NEG
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: PUSH
67467: LD_INT 4
67469: NEG
67470: PUSH
67471: LD_INT 4
67473: NEG
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: PUSH
67479: LD_INT 2
67481: NEG
67482: PUSH
67483: LD_INT 4
67485: NEG
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: PUSH
67491: LD_INT 4
67493: NEG
67494: PUSH
67495: LD_INT 2
67497: NEG
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: PUSH
67503: LD_INT 0
67505: PUSH
67506: LD_INT 4
67508: NEG
67509: PUSH
67510: EMPTY
67511: LIST
67512: LIST
67513: PUSH
67514: LD_INT 0
67516: PUSH
67517: LD_INT 5
67519: NEG
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: PUSH
67525: LD_INT 1
67527: PUSH
67528: LD_INT 4
67530: NEG
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: PUSH
67536: LD_INT 1
67538: PUSH
67539: LD_INT 3
67541: NEG
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: PUSH
67547: LD_INT 0
67549: PUSH
67550: LD_INT 3
67552: NEG
67553: PUSH
67554: EMPTY
67555: LIST
67556: LIST
67557: PUSH
67558: LD_INT 1
67560: NEG
67561: PUSH
67562: LD_INT 4
67564: NEG
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: PUSH
67570: LD_INT 1
67572: NEG
67573: PUSH
67574: LD_INT 5
67576: NEG
67577: PUSH
67578: EMPTY
67579: LIST
67580: LIST
67581: PUSH
67582: LD_INT 2
67584: PUSH
67585: LD_INT 3
67587: NEG
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: PUSH
67593: LD_INT 2
67595: NEG
67596: PUSH
67597: LD_INT 5
67599: NEG
67600: PUSH
67601: EMPTY
67602: LIST
67603: LIST
67604: PUSH
67605: EMPTY
67606: LIST
67607: LIST
67608: LIST
67609: LIST
67610: LIST
67611: LIST
67612: LIST
67613: LIST
67614: LIST
67615: LIST
67616: LIST
67617: LIST
67618: LIST
67619: LIST
67620: LIST
67621: LIST
67622: LIST
67623: LIST
67624: LIST
67625: LIST
67626: LIST
67627: LIST
67628: LIST
67629: LIST
67630: LIST
67631: LIST
67632: LIST
67633: LIST
67634: LIST
67635: LIST
67636: LIST
67637: LIST
67638: LIST
67639: LIST
67640: LIST
67641: LIST
67642: LIST
67643: LIST
67644: LIST
67645: LIST
67646: LIST
67647: LIST
67648: LIST
67649: LIST
67650: LIST
67651: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
67652: LD_ADDR_VAR 0 31
67656: PUSH
67657: LD_INT 0
67659: PUSH
67660: LD_INT 4
67662: PUSH
67663: EMPTY
67664: LIST
67665: LIST
67666: PUSH
67667: LD_INT 0
67669: PUSH
67670: LD_INT 3
67672: PUSH
67673: EMPTY
67674: LIST
67675: LIST
67676: PUSH
67677: LD_INT 1
67679: PUSH
67680: LD_INT 4
67682: PUSH
67683: EMPTY
67684: LIST
67685: LIST
67686: PUSH
67687: LD_INT 1
67689: PUSH
67690: LD_INT 5
67692: PUSH
67693: EMPTY
67694: LIST
67695: LIST
67696: PUSH
67697: LD_INT 0
67699: PUSH
67700: LD_INT 5
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: PUSH
67707: LD_INT 1
67709: NEG
67710: PUSH
67711: LD_INT 4
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: PUSH
67718: LD_INT 1
67720: NEG
67721: PUSH
67722: LD_INT 3
67724: PUSH
67725: EMPTY
67726: LIST
67727: LIST
67728: PUSH
67729: LD_INT 2
67731: PUSH
67732: LD_INT 5
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: PUSH
67739: LD_INT 2
67741: NEG
67742: PUSH
67743: LD_INT 3
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: PUSH
67750: LD_INT 3
67752: NEG
67753: PUSH
67754: LD_INT 0
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 3
67763: NEG
67764: PUSH
67765: LD_INT 1
67767: NEG
67768: PUSH
67769: EMPTY
67770: LIST
67771: LIST
67772: PUSH
67773: LD_INT 2
67775: NEG
67776: PUSH
67777: LD_INT 0
67779: PUSH
67780: EMPTY
67781: LIST
67782: LIST
67783: PUSH
67784: LD_INT 2
67786: NEG
67787: PUSH
67788: LD_INT 1
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: PUSH
67795: LD_INT 3
67797: NEG
67798: PUSH
67799: LD_INT 1
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: PUSH
67806: LD_INT 4
67808: NEG
67809: PUSH
67810: LD_INT 0
67812: PUSH
67813: EMPTY
67814: LIST
67815: LIST
67816: PUSH
67817: LD_INT 4
67819: NEG
67820: PUSH
67821: LD_INT 1
67823: NEG
67824: PUSH
67825: EMPTY
67826: LIST
67827: LIST
67828: PUSH
67829: LD_INT 4
67831: NEG
67832: PUSH
67833: LD_INT 2
67835: NEG
67836: PUSH
67837: EMPTY
67838: LIST
67839: LIST
67840: PUSH
67841: LD_INT 2
67843: NEG
67844: PUSH
67845: LD_INT 2
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: LD_INT 4
67854: NEG
67855: PUSH
67856: LD_INT 4
67858: NEG
67859: PUSH
67860: EMPTY
67861: LIST
67862: LIST
67863: PUSH
67864: LD_INT 4
67866: NEG
67867: PUSH
67868: LD_INT 5
67870: NEG
67871: PUSH
67872: EMPTY
67873: LIST
67874: LIST
67875: PUSH
67876: LD_INT 3
67878: NEG
67879: PUSH
67880: LD_INT 4
67882: NEG
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: PUSH
67888: LD_INT 3
67890: NEG
67891: PUSH
67892: LD_INT 3
67894: NEG
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: PUSH
67900: LD_INT 4
67902: NEG
67903: PUSH
67904: LD_INT 3
67906: NEG
67907: PUSH
67908: EMPTY
67909: LIST
67910: LIST
67911: PUSH
67912: LD_INT 5
67914: NEG
67915: PUSH
67916: LD_INT 4
67918: NEG
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PUSH
67924: LD_INT 5
67926: NEG
67927: PUSH
67928: LD_INT 5
67930: NEG
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: PUSH
67936: LD_INT 3
67938: NEG
67939: PUSH
67940: LD_INT 5
67942: NEG
67943: PUSH
67944: EMPTY
67945: LIST
67946: LIST
67947: PUSH
67948: LD_INT 5
67950: NEG
67951: PUSH
67952: LD_INT 3
67954: NEG
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: PUSH
67960: LD_INT 0
67962: PUSH
67963: LD_INT 3
67965: NEG
67966: PUSH
67967: EMPTY
67968: LIST
67969: LIST
67970: PUSH
67971: LD_INT 0
67973: PUSH
67974: LD_INT 4
67976: NEG
67977: PUSH
67978: EMPTY
67979: LIST
67980: LIST
67981: PUSH
67982: LD_INT 1
67984: PUSH
67985: LD_INT 3
67987: NEG
67988: PUSH
67989: EMPTY
67990: LIST
67991: LIST
67992: PUSH
67993: LD_INT 1
67995: PUSH
67996: LD_INT 2
67998: NEG
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: PUSH
68004: LD_INT 0
68006: PUSH
68007: LD_INT 2
68009: NEG
68010: PUSH
68011: EMPTY
68012: LIST
68013: LIST
68014: PUSH
68015: LD_INT 1
68017: NEG
68018: PUSH
68019: LD_INT 3
68021: NEG
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: PUSH
68027: LD_INT 1
68029: NEG
68030: PUSH
68031: LD_INT 4
68033: NEG
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PUSH
68039: LD_INT 2
68041: PUSH
68042: LD_INT 2
68044: NEG
68045: PUSH
68046: EMPTY
68047: LIST
68048: LIST
68049: PUSH
68050: LD_INT 2
68052: NEG
68053: PUSH
68054: LD_INT 4
68056: NEG
68057: PUSH
68058: EMPTY
68059: LIST
68060: LIST
68061: PUSH
68062: LD_INT 4
68064: PUSH
68065: LD_INT 0
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: PUSH
68072: LD_INT 4
68074: PUSH
68075: LD_INT 1
68077: NEG
68078: PUSH
68079: EMPTY
68080: LIST
68081: LIST
68082: PUSH
68083: LD_INT 5
68085: PUSH
68086: LD_INT 0
68088: PUSH
68089: EMPTY
68090: LIST
68091: LIST
68092: PUSH
68093: LD_INT 5
68095: PUSH
68096: LD_INT 1
68098: PUSH
68099: EMPTY
68100: LIST
68101: LIST
68102: PUSH
68103: LD_INT 4
68105: PUSH
68106: LD_INT 1
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: PUSH
68113: LD_INT 3
68115: PUSH
68116: LD_INT 0
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: PUSH
68123: LD_INT 3
68125: PUSH
68126: LD_INT 1
68128: NEG
68129: PUSH
68130: EMPTY
68131: LIST
68132: LIST
68133: PUSH
68134: LD_INT 3
68136: PUSH
68137: LD_INT 2
68139: NEG
68140: PUSH
68141: EMPTY
68142: LIST
68143: LIST
68144: PUSH
68145: LD_INT 5
68147: PUSH
68148: LD_INT 2
68150: PUSH
68151: EMPTY
68152: LIST
68153: LIST
68154: PUSH
68155: EMPTY
68156: LIST
68157: LIST
68158: LIST
68159: LIST
68160: LIST
68161: LIST
68162: LIST
68163: LIST
68164: LIST
68165: LIST
68166: LIST
68167: LIST
68168: LIST
68169: LIST
68170: LIST
68171: LIST
68172: LIST
68173: LIST
68174: LIST
68175: LIST
68176: LIST
68177: LIST
68178: LIST
68179: LIST
68180: LIST
68181: LIST
68182: LIST
68183: LIST
68184: LIST
68185: LIST
68186: LIST
68187: LIST
68188: LIST
68189: LIST
68190: LIST
68191: LIST
68192: LIST
68193: LIST
68194: LIST
68195: LIST
68196: LIST
68197: LIST
68198: LIST
68199: LIST
68200: LIST
68201: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68202: LD_ADDR_VAR 0 32
68206: PUSH
68207: LD_INT 4
68209: NEG
68210: PUSH
68211: LD_INT 0
68213: PUSH
68214: EMPTY
68215: LIST
68216: LIST
68217: PUSH
68218: LD_INT 4
68220: NEG
68221: PUSH
68222: LD_INT 1
68224: NEG
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: LD_INT 3
68232: NEG
68233: PUSH
68234: LD_INT 0
68236: PUSH
68237: EMPTY
68238: LIST
68239: LIST
68240: PUSH
68241: LD_INT 3
68243: NEG
68244: PUSH
68245: LD_INT 1
68247: PUSH
68248: EMPTY
68249: LIST
68250: LIST
68251: PUSH
68252: LD_INT 4
68254: NEG
68255: PUSH
68256: LD_INT 1
68258: PUSH
68259: EMPTY
68260: LIST
68261: LIST
68262: PUSH
68263: LD_INT 5
68265: NEG
68266: PUSH
68267: LD_INT 0
68269: PUSH
68270: EMPTY
68271: LIST
68272: LIST
68273: PUSH
68274: LD_INT 5
68276: NEG
68277: PUSH
68278: LD_INT 1
68280: NEG
68281: PUSH
68282: EMPTY
68283: LIST
68284: LIST
68285: PUSH
68286: LD_INT 5
68288: NEG
68289: PUSH
68290: LD_INT 2
68292: NEG
68293: PUSH
68294: EMPTY
68295: LIST
68296: LIST
68297: PUSH
68298: LD_INT 3
68300: NEG
68301: PUSH
68302: LD_INT 2
68304: PUSH
68305: EMPTY
68306: LIST
68307: LIST
68308: PUSH
68309: LD_INT 3
68311: NEG
68312: PUSH
68313: LD_INT 3
68315: NEG
68316: PUSH
68317: EMPTY
68318: LIST
68319: LIST
68320: PUSH
68321: LD_INT 3
68323: NEG
68324: PUSH
68325: LD_INT 4
68327: NEG
68328: PUSH
68329: EMPTY
68330: LIST
68331: LIST
68332: PUSH
68333: LD_INT 2
68335: NEG
68336: PUSH
68337: LD_INT 3
68339: NEG
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: PUSH
68345: LD_INT 2
68347: NEG
68348: PUSH
68349: LD_INT 2
68351: NEG
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: PUSH
68357: LD_INT 3
68359: NEG
68360: PUSH
68361: LD_INT 2
68363: NEG
68364: PUSH
68365: EMPTY
68366: LIST
68367: LIST
68368: PUSH
68369: LD_INT 4
68371: NEG
68372: PUSH
68373: LD_INT 3
68375: NEG
68376: PUSH
68377: EMPTY
68378: LIST
68379: LIST
68380: PUSH
68381: LD_INT 4
68383: NEG
68384: PUSH
68385: LD_INT 4
68387: NEG
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: PUSH
68393: LD_INT 2
68395: NEG
68396: PUSH
68397: LD_INT 4
68399: NEG
68400: PUSH
68401: EMPTY
68402: LIST
68403: LIST
68404: PUSH
68405: LD_INT 4
68407: NEG
68408: PUSH
68409: LD_INT 2
68411: NEG
68412: PUSH
68413: EMPTY
68414: LIST
68415: LIST
68416: PUSH
68417: LD_INT 0
68419: PUSH
68420: LD_INT 4
68422: NEG
68423: PUSH
68424: EMPTY
68425: LIST
68426: LIST
68427: PUSH
68428: LD_INT 0
68430: PUSH
68431: LD_INT 5
68433: NEG
68434: PUSH
68435: EMPTY
68436: LIST
68437: LIST
68438: PUSH
68439: LD_INT 1
68441: PUSH
68442: LD_INT 4
68444: NEG
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: PUSH
68450: LD_INT 1
68452: PUSH
68453: LD_INT 3
68455: NEG
68456: PUSH
68457: EMPTY
68458: LIST
68459: LIST
68460: PUSH
68461: LD_INT 0
68463: PUSH
68464: LD_INT 3
68466: NEG
68467: PUSH
68468: EMPTY
68469: LIST
68470: LIST
68471: PUSH
68472: LD_INT 1
68474: NEG
68475: PUSH
68476: LD_INT 4
68478: NEG
68479: PUSH
68480: EMPTY
68481: LIST
68482: LIST
68483: PUSH
68484: LD_INT 1
68486: NEG
68487: PUSH
68488: LD_INT 5
68490: NEG
68491: PUSH
68492: EMPTY
68493: LIST
68494: LIST
68495: PUSH
68496: LD_INT 2
68498: PUSH
68499: LD_INT 3
68501: NEG
68502: PUSH
68503: EMPTY
68504: LIST
68505: LIST
68506: PUSH
68507: LD_INT 2
68509: NEG
68510: PUSH
68511: LD_INT 5
68513: NEG
68514: PUSH
68515: EMPTY
68516: LIST
68517: LIST
68518: PUSH
68519: LD_INT 3
68521: PUSH
68522: LD_INT 0
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: PUSH
68529: LD_INT 3
68531: PUSH
68532: LD_INT 1
68534: NEG
68535: PUSH
68536: EMPTY
68537: LIST
68538: LIST
68539: PUSH
68540: LD_INT 4
68542: PUSH
68543: LD_INT 0
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PUSH
68550: LD_INT 4
68552: PUSH
68553: LD_INT 1
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PUSH
68560: LD_INT 3
68562: PUSH
68563: LD_INT 1
68565: PUSH
68566: EMPTY
68567: LIST
68568: LIST
68569: PUSH
68570: LD_INT 2
68572: PUSH
68573: LD_INT 0
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: PUSH
68580: LD_INT 2
68582: PUSH
68583: LD_INT 1
68585: NEG
68586: PUSH
68587: EMPTY
68588: LIST
68589: LIST
68590: PUSH
68591: LD_INT 2
68593: PUSH
68594: LD_INT 2
68596: NEG
68597: PUSH
68598: EMPTY
68599: LIST
68600: LIST
68601: PUSH
68602: LD_INT 4
68604: PUSH
68605: LD_INT 2
68607: PUSH
68608: EMPTY
68609: LIST
68610: LIST
68611: PUSH
68612: LD_INT 4
68614: PUSH
68615: LD_INT 4
68617: PUSH
68618: EMPTY
68619: LIST
68620: LIST
68621: PUSH
68622: LD_INT 4
68624: PUSH
68625: LD_INT 3
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: PUSH
68632: LD_INT 5
68634: PUSH
68635: LD_INT 4
68637: PUSH
68638: EMPTY
68639: LIST
68640: LIST
68641: PUSH
68642: LD_INT 5
68644: PUSH
68645: LD_INT 5
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: PUSH
68652: LD_INT 4
68654: PUSH
68655: LD_INT 5
68657: PUSH
68658: EMPTY
68659: LIST
68660: LIST
68661: PUSH
68662: LD_INT 3
68664: PUSH
68665: LD_INT 4
68667: PUSH
68668: EMPTY
68669: LIST
68670: LIST
68671: PUSH
68672: LD_INT 3
68674: PUSH
68675: LD_INT 3
68677: PUSH
68678: EMPTY
68679: LIST
68680: LIST
68681: PUSH
68682: LD_INT 5
68684: PUSH
68685: LD_INT 3
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: PUSH
68692: LD_INT 3
68694: PUSH
68695: LD_INT 5
68697: PUSH
68698: EMPTY
68699: LIST
68700: LIST
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: LIST
68706: LIST
68707: LIST
68708: LIST
68709: LIST
68710: LIST
68711: LIST
68712: LIST
68713: LIST
68714: LIST
68715: LIST
68716: LIST
68717: LIST
68718: LIST
68719: LIST
68720: LIST
68721: LIST
68722: LIST
68723: LIST
68724: LIST
68725: LIST
68726: LIST
68727: LIST
68728: LIST
68729: LIST
68730: LIST
68731: LIST
68732: LIST
68733: LIST
68734: LIST
68735: LIST
68736: LIST
68737: LIST
68738: LIST
68739: LIST
68740: LIST
68741: LIST
68742: LIST
68743: LIST
68744: LIST
68745: LIST
68746: LIST
68747: LIST
68748: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68749: LD_ADDR_VAR 0 33
68753: PUSH
68754: LD_INT 4
68756: NEG
68757: PUSH
68758: LD_INT 4
68760: NEG
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: PUSH
68766: LD_INT 4
68768: NEG
68769: PUSH
68770: LD_INT 5
68772: NEG
68773: PUSH
68774: EMPTY
68775: LIST
68776: LIST
68777: PUSH
68778: LD_INT 3
68780: NEG
68781: PUSH
68782: LD_INT 4
68784: NEG
68785: PUSH
68786: EMPTY
68787: LIST
68788: LIST
68789: PUSH
68790: LD_INT 3
68792: NEG
68793: PUSH
68794: LD_INT 3
68796: NEG
68797: PUSH
68798: EMPTY
68799: LIST
68800: LIST
68801: PUSH
68802: LD_INT 4
68804: NEG
68805: PUSH
68806: LD_INT 3
68808: NEG
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: PUSH
68814: LD_INT 5
68816: NEG
68817: PUSH
68818: LD_INT 4
68820: NEG
68821: PUSH
68822: EMPTY
68823: LIST
68824: LIST
68825: PUSH
68826: LD_INT 5
68828: NEG
68829: PUSH
68830: LD_INT 5
68832: NEG
68833: PUSH
68834: EMPTY
68835: LIST
68836: LIST
68837: PUSH
68838: LD_INT 3
68840: NEG
68841: PUSH
68842: LD_INT 5
68844: NEG
68845: PUSH
68846: EMPTY
68847: LIST
68848: LIST
68849: PUSH
68850: LD_INT 5
68852: NEG
68853: PUSH
68854: LD_INT 3
68856: NEG
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: PUSH
68862: LD_INT 0
68864: PUSH
68865: LD_INT 3
68867: NEG
68868: PUSH
68869: EMPTY
68870: LIST
68871: LIST
68872: PUSH
68873: LD_INT 0
68875: PUSH
68876: LD_INT 4
68878: NEG
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: PUSH
68884: LD_INT 1
68886: PUSH
68887: LD_INT 3
68889: NEG
68890: PUSH
68891: EMPTY
68892: LIST
68893: LIST
68894: PUSH
68895: LD_INT 1
68897: PUSH
68898: LD_INT 2
68900: NEG
68901: PUSH
68902: EMPTY
68903: LIST
68904: LIST
68905: PUSH
68906: LD_INT 0
68908: PUSH
68909: LD_INT 2
68911: NEG
68912: PUSH
68913: EMPTY
68914: LIST
68915: LIST
68916: PUSH
68917: LD_INT 1
68919: NEG
68920: PUSH
68921: LD_INT 3
68923: NEG
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: PUSH
68929: LD_INT 1
68931: NEG
68932: PUSH
68933: LD_INT 4
68935: NEG
68936: PUSH
68937: EMPTY
68938: LIST
68939: LIST
68940: PUSH
68941: LD_INT 2
68943: PUSH
68944: LD_INT 2
68946: NEG
68947: PUSH
68948: EMPTY
68949: LIST
68950: LIST
68951: PUSH
68952: LD_INT 2
68954: NEG
68955: PUSH
68956: LD_INT 4
68958: NEG
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: PUSH
68964: LD_INT 4
68966: PUSH
68967: LD_INT 0
68969: PUSH
68970: EMPTY
68971: LIST
68972: LIST
68973: PUSH
68974: LD_INT 4
68976: PUSH
68977: LD_INT 1
68979: NEG
68980: PUSH
68981: EMPTY
68982: LIST
68983: LIST
68984: PUSH
68985: LD_INT 5
68987: PUSH
68988: LD_INT 0
68990: PUSH
68991: EMPTY
68992: LIST
68993: LIST
68994: PUSH
68995: LD_INT 5
68997: PUSH
68998: LD_INT 1
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: PUSH
69005: LD_INT 4
69007: PUSH
69008: LD_INT 1
69010: PUSH
69011: EMPTY
69012: LIST
69013: LIST
69014: PUSH
69015: LD_INT 3
69017: PUSH
69018: LD_INT 0
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: PUSH
69025: LD_INT 3
69027: PUSH
69028: LD_INT 1
69030: NEG
69031: PUSH
69032: EMPTY
69033: LIST
69034: LIST
69035: PUSH
69036: LD_INT 3
69038: PUSH
69039: LD_INT 2
69041: NEG
69042: PUSH
69043: EMPTY
69044: LIST
69045: LIST
69046: PUSH
69047: LD_INT 5
69049: PUSH
69050: LD_INT 2
69052: PUSH
69053: EMPTY
69054: LIST
69055: LIST
69056: PUSH
69057: LD_INT 3
69059: PUSH
69060: LD_INT 3
69062: PUSH
69063: EMPTY
69064: LIST
69065: LIST
69066: PUSH
69067: LD_INT 3
69069: PUSH
69070: LD_INT 2
69072: PUSH
69073: EMPTY
69074: LIST
69075: LIST
69076: PUSH
69077: LD_INT 4
69079: PUSH
69080: LD_INT 3
69082: PUSH
69083: EMPTY
69084: LIST
69085: LIST
69086: PUSH
69087: LD_INT 4
69089: PUSH
69090: LD_INT 4
69092: PUSH
69093: EMPTY
69094: LIST
69095: LIST
69096: PUSH
69097: LD_INT 3
69099: PUSH
69100: LD_INT 4
69102: PUSH
69103: EMPTY
69104: LIST
69105: LIST
69106: PUSH
69107: LD_INT 2
69109: PUSH
69110: LD_INT 3
69112: PUSH
69113: EMPTY
69114: LIST
69115: LIST
69116: PUSH
69117: LD_INT 2
69119: PUSH
69120: LD_INT 2
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: PUSH
69127: LD_INT 4
69129: PUSH
69130: LD_INT 2
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: PUSH
69137: LD_INT 2
69139: PUSH
69140: LD_INT 4
69142: PUSH
69143: EMPTY
69144: LIST
69145: LIST
69146: PUSH
69147: LD_INT 0
69149: PUSH
69150: LD_INT 4
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: PUSH
69157: LD_INT 0
69159: PUSH
69160: LD_INT 3
69162: PUSH
69163: EMPTY
69164: LIST
69165: LIST
69166: PUSH
69167: LD_INT 1
69169: PUSH
69170: LD_INT 4
69172: PUSH
69173: EMPTY
69174: LIST
69175: LIST
69176: PUSH
69177: LD_INT 1
69179: PUSH
69180: LD_INT 5
69182: PUSH
69183: EMPTY
69184: LIST
69185: LIST
69186: PUSH
69187: LD_INT 0
69189: PUSH
69190: LD_INT 5
69192: PUSH
69193: EMPTY
69194: LIST
69195: LIST
69196: PUSH
69197: LD_INT 1
69199: NEG
69200: PUSH
69201: LD_INT 4
69203: PUSH
69204: EMPTY
69205: LIST
69206: LIST
69207: PUSH
69208: LD_INT 1
69210: NEG
69211: PUSH
69212: LD_INT 3
69214: PUSH
69215: EMPTY
69216: LIST
69217: LIST
69218: PUSH
69219: LD_INT 2
69221: PUSH
69222: LD_INT 5
69224: PUSH
69225: EMPTY
69226: LIST
69227: LIST
69228: PUSH
69229: LD_INT 2
69231: NEG
69232: PUSH
69233: LD_INT 3
69235: PUSH
69236: EMPTY
69237: LIST
69238: LIST
69239: PUSH
69240: EMPTY
69241: LIST
69242: LIST
69243: LIST
69244: LIST
69245: LIST
69246: LIST
69247: LIST
69248: LIST
69249: LIST
69250: LIST
69251: LIST
69252: LIST
69253: LIST
69254: LIST
69255: LIST
69256: LIST
69257: LIST
69258: LIST
69259: LIST
69260: LIST
69261: LIST
69262: LIST
69263: LIST
69264: LIST
69265: LIST
69266: LIST
69267: LIST
69268: LIST
69269: LIST
69270: LIST
69271: LIST
69272: LIST
69273: LIST
69274: LIST
69275: LIST
69276: LIST
69277: LIST
69278: LIST
69279: LIST
69280: LIST
69281: LIST
69282: LIST
69283: LIST
69284: LIST
69285: LIST
69286: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69287: LD_ADDR_VAR 0 34
69291: PUSH
69292: LD_INT 0
69294: PUSH
69295: LD_INT 4
69297: NEG
69298: PUSH
69299: EMPTY
69300: LIST
69301: LIST
69302: PUSH
69303: LD_INT 0
69305: PUSH
69306: LD_INT 5
69308: NEG
69309: PUSH
69310: EMPTY
69311: LIST
69312: LIST
69313: PUSH
69314: LD_INT 1
69316: PUSH
69317: LD_INT 4
69319: NEG
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: PUSH
69325: LD_INT 1
69327: PUSH
69328: LD_INT 3
69330: NEG
69331: PUSH
69332: EMPTY
69333: LIST
69334: LIST
69335: PUSH
69336: LD_INT 0
69338: PUSH
69339: LD_INT 3
69341: NEG
69342: PUSH
69343: EMPTY
69344: LIST
69345: LIST
69346: PUSH
69347: LD_INT 1
69349: NEG
69350: PUSH
69351: LD_INT 4
69353: NEG
69354: PUSH
69355: EMPTY
69356: LIST
69357: LIST
69358: PUSH
69359: LD_INT 1
69361: NEG
69362: PUSH
69363: LD_INT 5
69365: NEG
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: PUSH
69371: LD_INT 2
69373: PUSH
69374: LD_INT 3
69376: NEG
69377: PUSH
69378: EMPTY
69379: LIST
69380: LIST
69381: PUSH
69382: LD_INT 2
69384: NEG
69385: PUSH
69386: LD_INT 5
69388: NEG
69389: PUSH
69390: EMPTY
69391: LIST
69392: LIST
69393: PUSH
69394: LD_INT 3
69396: PUSH
69397: LD_INT 0
69399: PUSH
69400: EMPTY
69401: LIST
69402: LIST
69403: PUSH
69404: LD_INT 3
69406: PUSH
69407: LD_INT 1
69409: NEG
69410: PUSH
69411: EMPTY
69412: LIST
69413: LIST
69414: PUSH
69415: LD_INT 4
69417: PUSH
69418: LD_INT 0
69420: PUSH
69421: EMPTY
69422: LIST
69423: LIST
69424: PUSH
69425: LD_INT 4
69427: PUSH
69428: LD_INT 1
69430: PUSH
69431: EMPTY
69432: LIST
69433: LIST
69434: PUSH
69435: LD_INT 3
69437: PUSH
69438: LD_INT 1
69440: PUSH
69441: EMPTY
69442: LIST
69443: LIST
69444: PUSH
69445: LD_INT 2
69447: PUSH
69448: LD_INT 0
69450: PUSH
69451: EMPTY
69452: LIST
69453: LIST
69454: PUSH
69455: LD_INT 2
69457: PUSH
69458: LD_INT 1
69460: NEG
69461: PUSH
69462: EMPTY
69463: LIST
69464: LIST
69465: PUSH
69466: LD_INT 2
69468: PUSH
69469: LD_INT 2
69471: NEG
69472: PUSH
69473: EMPTY
69474: LIST
69475: LIST
69476: PUSH
69477: LD_INT 4
69479: PUSH
69480: LD_INT 2
69482: PUSH
69483: EMPTY
69484: LIST
69485: LIST
69486: PUSH
69487: LD_INT 4
69489: PUSH
69490: LD_INT 4
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: PUSH
69497: LD_INT 4
69499: PUSH
69500: LD_INT 3
69502: PUSH
69503: EMPTY
69504: LIST
69505: LIST
69506: PUSH
69507: LD_INT 5
69509: PUSH
69510: LD_INT 4
69512: PUSH
69513: EMPTY
69514: LIST
69515: LIST
69516: PUSH
69517: LD_INT 5
69519: PUSH
69520: LD_INT 5
69522: PUSH
69523: EMPTY
69524: LIST
69525: LIST
69526: PUSH
69527: LD_INT 4
69529: PUSH
69530: LD_INT 5
69532: PUSH
69533: EMPTY
69534: LIST
69535: LIST
69536: PUSH
69537: LD_INT 3
69539: PUSH
69540: LD_INT 4
69542: PUSH
69543: EMPTY
69544: LIST
69545: LIST
69546: PUSH
69547: LD_INT 3
69549: PUSH
69550: LD_INT 3
69552: PUSH
69553: EMPTY
69554: LIST
69555: LIST
69556: PUSH
69557: LD_INT 5
69559: PUSH
69560: LD_INT 3
69562: PUSH
69563: EMPTY
69564: LIST
69565: LIST
69566: PUSH
69567: LD_INT 3
69569: PUSH
69570: LD_INT 5
69572: PUSH
69573: EMPTY
69574: LIST
69575: LIST
69576: PUSH
69577: LD_INT 0
69579: PUSH
69580: LD_INT 3
69582: PUSH
69583: EMPTY
69584: LIST
69585: LIST
69586: PUSH
69587: LD_INT 0
69589: PUSH
69590: LD_INT 2
69592: PUSH
69593: EMPTY
69594: LIST
69595: LIST
69596: PUSH
69597: LD_INT 1
69599: PUSH
69600: LD_INT 3
69602: PUSH
69603: EMPTY
69604: LIST
69605: LIST
69606: PUSH
69607: LD_INT 1
69609: PUSH
69610: LD_INT 4
69612: PUSH
69613: EMPTY
69614: LIST
69615: LIST
69616: PUSH
69617: LD_INT 0
69619: PUSH
69620: LD_INT 4
69622: PUSH
69623: EMPTY
69624: LIST
69625: LIST
69626: PUSH
69627: LD_INT 1
69629: NEG
69630: PUSH
69631: LD_INT 3
69633: PUSH
69634: EMPTY
69635: LIST
69636: LIST
69637: PUSH
69638: LD_INT 1
69640: NEG
69641: PUSH
69642: LD_INT 2
69644: PUSH
69645: EMPTY
69646: LIST
69647: LIST
69648: PUSH
69649: LD_INT 2
69651: PUSH
69652: LD_INT 4
69654: PUSH
69655: EMPTY
69656: LIST
69657: LIST
69658: PUSH
69659: LD_INT 2
69661: NEG
69662: PUSH
69663: LD_INT 2
69665: PUSH
69666: EMPTY
69667: LIST
69668: LIST
69669: PUSH
69670: LD_INT 4
69672: NEG
69673: PUSH
69674: LD_INT 0
69676: PUSH
69677: EMPTY
69678: LIST
69679: LIST
69680: PUSH
69681: LD_INT 4
69683: NEG
69684: PUSH
69685: LD_INT 1
69687: NEG
69688: PUSH
69689: EMPTY
69690: LIST
69691: LIST
69692: PUSH
69693: LD_INT 3
69695: NEG
69696: PUSH
69697: LD_INT 0
69699: PUSH
69700: EMPTY
69701: LIST
69702: LIST
69703: PUSH
69704: LD_INT 3
69706: NEG
69707: PUSH
69708: LD_INT 1
69710: PUSH
69711: EMPTY
69712: LIST
69713: LIST
69714: PUSH
69715: LD_INT 4
69717: NEG
69718: PUSH
69719: LD_INT 1
69721: PUSH
69722: EMPTY
69723: LIST
69724: LIST
69725: PUSH
69726: LD_INT 5
69728: NEG
69729: PUSH
69730: LD_INT 0
69732: PUSH
69733: EMPTY
69734: LIST
69735: LIST
69736: PUSH
69737: LD_INT 5
69739: NEG
69740: PUSH
69741: LD_INT 1
69743: NEG
69744: PUSH
69745: EMPTY
69746: LIST
69747: LIST
69748: PUSH
69749: LD_INT 5
69751: NEG
69752: PUSH
69753: LD_INT 2
69755: NEG
69756: PUSH
69757: EMPTY
69758: LIST
69759: LIST
69760: PUSH
69761: LD_INT 3
69763: NEG
69764: PUSH
69765: LD_INT 2
69767: PUSH
69768: EMPTY
69769: LIST
69770: LIST
69771: PUSH
69772: EMPTY
69773: LIST
69774: LIST
69775: LIST
69776: LIST
69777: LIST
69778: LIST
69779: LIST
69780: LIST
69781: LIST
69782: LIST
69783: LIST
69784: LIST
69785: LIST
69786: LIST
69787: LIST
69788: LIST
69789: LIST
69790: LIST
69791: LIST
69792: LIST
69793: LIST
69794: LIST
69795: LIST
69796: LIST
69797: LIST
69798: LIST
69799: LIST
69800: LIST
69801: LIST
69802: LIST
69803: LIST
69804: LIST
69805: LIST
69806: LIST
69807: LIST
69808: LIST
69809: LIST
69810: LIST
69811: LIST
69812: LIST
69813: LIST
69814: LIST
69815: LIST
69816: LIST
69817: LIST
69818: ST_TO_ADDR
// end ; end ;
69819: GO 69822
69821: POP
// case btype of b_depot , b_warehouse :
69822: LD_VAR 0 1
69826: PUSH
69827: LD_INT 0
69829: DOUBLE
69830: EQUAL
69831: IFTRUE 69841
69833: LD_INT 1
69835: DOUBLE
69836: EQUAL
69837: IFTRUE 69841
69839: GO 70042
69841: POP
// case nation of nation_american :
69842: LD_VAR 0 5
69846: PUSH
69847: LD_INT 1
69849: DOUBLE
69850: EQUAL
69851: IFTRUE 69855
69853: GO 69911
69855: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69856: LD_ADDR_VAR 0 9
69860: PUSH
69861: LD_VAR 0 11
69865: PUSH
69866: LD_VAR 0 12
69870: PUSH
69871: LD_VAR 0 13
69875: PUSH
69876: LD_VAR 0 14
69880: PUSH
69881: LD_VAR 0 15
69885: PUSH
69886: LD_VAR 0 16
69890: PUSH
69891: EMPTY
69892: LIST
69893: LIST
69894: LIST
69895: LIST
69896: LIST
69897: LIST
69898: PUSH
69899: LD_VAR 0 4
69903: PUSH
69904: LD_INT 1
69906: PLUS
69907: ARRAY
69908: ST_TO_ADDR
69909: GO 70040
69911: LD_INT 2
69913: DOUBLE
69914: EQUAL
69915: IFTRUE 69919
69917: GO 69975
69919: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69920: LD_ADDR_VAR 0 9
69924: PUSH
69925: LD_VAR 0 17
69929: PUSH
69930: LD_VAR 0 18
69934: PUSH
69935: LD_VAR 0 19
69939: PUSH
69940: LD_VAR 0 20
69944: PUSH
69945: LD_VAR 0 21
69949: PUSH
69950: LD_VAR 0 22
69954: PUSH
69955: EMPTY
69956: LIST
69957: LIST
69958: LIST
69959: LIST
69960: LIST
69961: LIST
69962: PUSH
69963: LD_VAR 0 4
69967: PUSH
69968: LD_INT 1
69970: PLUS
69971: ARRAY
69972: ST_TO_ADDR
69973: GO 70040
69975: LD_INT 3
69977: DOUBLE
69978: EQUAL
69979: IFTRUE 69983
69981: GO 70039
69983: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69984: LD_ADDR_VAR 0 9
69988: PUSH
69989: LD_VAR 0 23
69993: PUSH
69994: LD_VAR 0 24
69998: PUSH
69999: LD_VAR 0 25
70003: PUSH
70004: LD_VAR 0 26
70008: PUSH
70009: LD_VAR 0 27
70013: PUSH
70014: LD_VAR 0 28
70018: PUSH
70019: EMPTY
70020: LIST
70021: LIST
70022: LIST
70023: LIST
70024: LIST
70025: LIST
70026: PUSH
70027: LD_VAR 0 4
70031: PUSH
70032: LD_INT 1
70034: PLUS
70035: ARRAY
70036: ST_TO_ADDR
70037: GO 70040
70039: POP
70040: GO 70595
70042: LD_INT 2
70044: DOUBLE
70045: EQUAL
70046: IFTRUE 70056
70048: LD_INT 3
70050: DOUBLE
70051: EQUAL
70052: IFTRUE 70056
70054: GO 70112
70056: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70057: LD_ADDR_VAR 0 9
70061: PUSH
70062: LD_VAR 0 29
70066: PUSH
70067: LD_VAR 0 30
70071: PUSH
70072: LD_VAR 0 31
70076: PUSH
70077: LD_VAR 0 32
70081: PUSH
70082: LD_VAR 0 33
70086: PUSH
70087: LD_VAR 0 34
70091: PUSH
70092: EMPTY
70093: LIST
70094: LIST
70095: LIST
70096: LIST
70097: LIST
70098: LIST
70099: PUSH
70100: LD_VAR 0 4
70104: PUSH
70105: LD_INT 1
70107: PLUS
70108: ARRAY
70109: ST_TO_ADDR
70110: GO 70595
70112: LD_INT 16
70114: DOUBLE
70115: EQUAL
70116: IFTRUE 70174
70118: LD_INT 17
70120: DOUBLE
70121: EQUAL
70122: IFTRUE 70174
70124: LD_INT 18
70126: DOUBLE
70127: EQUAL
70128: IFTRUE 70174
70130: LD_INT 19
70132: DOUBLE
70133: EQUAL
70134: IFTRUE 70174
70136: LD_INT 22
70138: DOUBLE
70139: EQUAL
70140: IFTRUE 70174
70142: LD_INT 20
70144: DOUBLE
70145: EQUAL
70146: IFTRUE 70174
70148: LD_INT 21
70150: DOUBLE
70151: EQUAL
70152: IFTRUE 70174
70154: LD_INT 23
70156: DOUBLE
70157: EQUAL
70158: IFTRUE 70174
70160: LD_INT 24
70162: DOUBLE
70163: EQUAL
70164: IFTRUE 70174
70166: LD_INT 25
70168: DOUBLE
70169: EQUAL
70170: IFTRUE 70174
70172: GO 70230
70174: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70175: LD_ADDR_VAR 0 9
70179: PUSH
70180: LD_VAR 0 35
70184: PUSH
70185: LD_VAR 0 36
70189: PUSH
70190: LD_VAR 0 37
70194: PUSH
70195: LD_VAR 0 38
70199: PUSH
70200: LD_VAR 0 39
70204: PUSH
70205: LD_VAR 0 40
70209: PUSH
70210: EMPTY
70211: LIST
70212: LIST
70213: LIST
70214: LIST
70215: LIST
70216: LIST
70217: PUSH
70218: LD_VAR 0 4
70222: PUSH
70223: LD_INT 1
70225: PLUS
70226: ARRAY
70227: ST_TO_ADDR
70228: GO 70595
70230: LD_INT 6
70232: DOUBLE
70233: EQUAL
70234: IFTRUE 70286
70236: LD_INT 7
70238: DOUBLE
70239: EQUAL
70240: IFTRUE 70286
70242: LD_INT 8
70244: DOUBLE
70245: EQUAL
70246: IFTRUE 70286
70248: LD_INT 13
70250: DOUBLE
70251: EQUAL
70252: IFTRUE 70286
70254: LD_INT 12
70256: DOUBLE
70257: EQUAL
70258: IFTRUE 70286
70260: LD_INT 15
70262: DOUBLE
70263: EQUAL
70264: IFTRUE 70286
70266: LD_INT 11
70268: DOUBLE
70269: EQUAL
70270: IFTRUE 70286
70272: LD_INT 14
70274: DOUBLE
70275: EQUAL
70276: IFTRUE 70286
70278: LD_INT 10
70280: DOUBLE
70281: EQUAL
70282: IFTRUE 70286
70284: GO 70342
70286: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70287: LD_ADDR_VAR 0 9
70291: PUSH
70292: LD_VAR 0 41
70296: PUSH
70297: LD_VAR 0 42
70301: PUSH
70302: LD_VAR 0 43
70306: PUSH
70307: LD_VAR 0 44
70311: PUSH
70312: LD_VAR 0 45
70316: PUSH
70317: LD_VAR 0 46
70321: PUSH
70322: EMPTY
70323: LIST
70324: LIST
70325: LIST
70326: LIST
70327: LIST
70328: LIST
70329: PUSH
70330: LD_VAR 0 4
70334: PUSH
70335: LD_INT 1
70337: PLUS
70338: ARRAY
70339: ST_TO_ADDR
70340: GO 70595
70342: LD_INT 36
70344: DOUBLE
70345: EQUAL
70346: IFTRUE 70350
70348: GO 70406
70350: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70351: LD_ADDR_VAR 0 9
70355: PUSH
70356: LD_VAR 0 47
70360: PUSH
70361: LD_VAR 0 48
70365: PUSH
70366: LD_VAR 0 49
70370: PUSH
70371: LD_VAR 0 50
70375: PUSH
70376: LD_VAR 0 51
70380: PUSH
70381: LD_VAR 0 52
70385: PUSH
70386: EMPTY
70387: LIST
70388: LIST
70389: LIST
70390: LIST
70391: LIST
70392: LIST
70393: PUSH
70394: LD_VAR 0 4
70398: PUSH
70399: LD_INT 1
70401: PLUS
70402: ARRAY
70403: ST_TO_ADDR
70404: GO 70595
70406: LD_INT 4
70408: DOUBLE
70409: EQUAL
70410: IFTRUE 70432
70412: LD_INT 5
70414: DOUBLE
70415: EQUAL
70416: IFTRUE 70432
70418: LD_INT 34
70420: DOUBLE
70421: EQUAL
70422: IFTRUE 70432
70424: LD_INT 37
70426: DOUBLE
70427: EQUAL
70428: IFTRUE 70432
70430: GO 70488
70432: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70433: LD_ADDR_VAR 0 9
70437: PUSH
70438: LD_VAR 0 53
70442: PUSH
70443: LD_VAR 0 54
70447: PUSH
70448: LD_VAR 0 55
70452: PUSH
70453: LD_VAR 0 56
70457: PUSH
70458: LD_VAR 0 57
70462: PUSH
70463: LD_VAR 0 58
70467: PUSH
70468: EMPTY
70469: LIST
70470: LIST
70471: LIST
70472: LIST
70473: LIST
70474: LIST
70475: PUSH
70476: LD_VAR 0 4
70480: PUSH
70481: LD_INT 1
70483: PLUS
70484: ARRAY
70485: ST_TO_ADDR
70486: GO 70595
70488: LD_INT 31
70490: DOUBLE
70491: EQUAL
70492: IFTRUE 70538
70494: LD_INT 32
70496: DOUBLE
70497: EQUAL
70498: IFTRUE 70538
70500: LD_INT 33
70502: DOUBLE
70503: EQUAL
70504: IFTRUE 70538
70506: LD_INT 27
70508: DOUBLE
70509: EQUAL
70510: IFTRUE 70538
70512: LD_INT 26
70514: DOUBLE
70515: EQUAL
70516: IFTRUE 70538
70518: LD_INT 28
70520: DOUBLE
70521: EQUAL
70522: IFTRUE 70538
70524: LD_INT 29
70526: DOUBLE
70527: EQUAL
70528: IFTRUE 70538
70530: LD_INT 30
70532: DOUBLE
70533: EQUAL
70534: IFTRUE 70538
70536: GO 70594
70538: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
70539: LD_ADDR_VAR 0 9
70543: PUSH
70544: LD_VAR 0 59
70548: PUSH
70549: LD_VAR 0 60
70553: PUSH
70554: LD_VAR 0 61
70558: PUSH
70559: LD_VAR 0 62
70563: PUSH
70564: LD_VAR 0 63
70568: PUSH
70569: LD_VAR 0 64
70573: PUSH
70574: EMPTY
70575: LIST
70576: LIST
70577: LIST
70578: LIST
70579: LIST
70580: LIST
70581: PUSH
70582: LD_VAR 0 4
70586: PUSH
70587: LD_INT 1
70589: PLUS
70590: ARRAY
70591: ST_TO_ADDR
70592: GO 70595
70594: POP
// temp_list2 = [ ] ;
70595: LD_ADDR_VAR 0 10
70599: PUSH
70600: EMPTY
70601: ST_TO_ADDR
// for i in temp_list do
70602: LD_ADDR_VAR 0 8
70606: PUSH
70607: LD_VAR 0 9
70611: PUSH
70612: FOR_IN
70613: IFFALSE 70665
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70615: LD_ADDR_VAR 0 10
70619: PUSH
70620: LD_VAR 0 10
70624: PUSH
70625: LD_VAR 0 8
70629: PUSH
70630: LD_INT 1
70632: ARRAY
70633: PUSH
70634: LD_VAR 0 2
70638: PLUS
70639: PUSH
70640: LD_VAR 0 8
70644: PUSH
70645: LD_INT 2
70647: ARRAY
70648: PUSH
70649: LD_VAR 0 3
70653: PLUS
70654: PUSH
70655: EMPTY
70656: LIST
70657: LIST
70658: PUSH
70659: EMPTY
70660: LIST
70661: ADD
70662: ST_TO_ADDR
70663: GO 70612
70665: POP
70666: POP
// result = temp_list2 ;
70667: LD_ADDR_VAR 0 7
70671: PUSH
70672: LD_VAR 0 10
70676: ST_TO_ADDR
// end ;
70677: LD_VAR 0 7
70681: RET
// export function EnemyInRange ( unit , dist ) ; begin
70682: LD_INT 0
70684: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
70685: LD_ADDR_VAR 0 3
70689: PUSH
70690: LD_VAR 0 1
70694: PPUSH
70695: CALL_OW 255
70699: PPUSH
70700: LD_VAR 0 1
70704: PPUSH
70705: CALL_OW 250
70709: PPUSH
70710: LD_VAR 0 1
70714: PPUSH
70715: CALL_OW 251
70719: PPUSH
70720: LD_VAR 0 2
70724: PPUSH
70725: CALL 44078 0 4
70729: PUSH
70730: LD_INT 4
70732: ARRAY
70733: ST_TO_ADDR
// end ;
70734: LD_VAR 0 3
70738: RET
// export function PlayerSeeMe ( unit ) ; begin
70739: LD_INT 0
70741: PPUSH
// result := See ( your_side , unit ) ;
70742: LD_ADDR_VAR 0 2
70746: PUSH
70747: LD_OWVAR 2
70751: PPUSH
70752: LD_VAR 0 1
70756: PPUSH
70757: CALL_OW 292
70761: ST_TO_ADDR
// end ;
70762: LD_VAR 0 2
70766: RET
// export function ReverseDir ( unit ) ; begin
70767: LD_INT 0
70769: PPUSH
// if not unit then
70770: LD_VAR 0 1
70774: NOT
70775: IFFALSE 70779
// exit ;
70777: GO 70802
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
70779: LD_ADDR_VAR 0 2
70783: PUSH
70784: LD_VAR 0 1
70788: PPUSH
70789: CALL_OW 254
70793: PUSH
70794: LD_INT 3
70796: PLUS
70797: PUSH
70798: LD_INT 6
70800: MOD
70801: ST_TO_ADDR
// end ;
70802: LD_VAR 0 2
70806: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
70807: LD_INT 0
70809: PPUSH
70810: PPUSH
70811: PPUSH
70812: PPUSH
70813: PPUSH
// if not hexes then
70814: LD_VAR 0 2
70818: NOT
70819: IFFALSE 70823
// exit ;
70821: GO 70971
// dist := 9999 ;
70823: LD_ADDR_VAR 0 5
70827: PUSH
70828: LD_INT 9999
70830: ST_TO_ADDR
// for i = 1 to hexes do
70831: LD_ADDR_VAR 0 4
70835: PUSH
70836: DOUBLE
70837: LD_INT 1
70839: DEC
70840: ST_TO_ADDR
70841: LD_VAR 0 2
70845: PUSH
70846: FOR_TO
70847: IFFALSE 70959
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
70849: LD_VAR 0 1
70853: PPUSH
70854: LD_VAR 0 2
70858: PUSH
70859: LD_VAR 0 4
70863: ARRAY
70864: PUSH
70865: LD_INT 1
70867: ARRAY
70868: PPUSH
70869: LD_VAR 0 2
70873: PUSH
70874: LD_VAR 0 4
70878: ARRAY
70879: PUSH
70880: LD_INT 2
70882: ARRAY
70883: PPUSH
70884: CALL_OW 297
70888: PUSH
70889: LD_VAR 0 5
70893: LESS
70894: IFFALSE 70957
// begin hex := hexes [ i ] ;
70896: LD_ADDR_VAR 0 7
70900: PUSH
70901: LD_VAR 0 2
70905: PUSH
70906: LD_VAR 0 4
70910: ARRAY
70911: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70912: LD_ADDR_VAR 0 5
70916: PUSH
70917: LD_VAR 0 1
70921: PPUSH
70922: LD_VAR 0 2
70926: PUSH
70927: LD_VAR 0 4
70931: ARRAY
70932: PUSH
70933: LD_INT 1
70935: ARRAY
70936: PPUSH
70937: LD_VAR 0 2
70941: PUSH
70942: LD_VAR 0 4
70946: ARRAY
70947: PUSH
70948: LD_INT 2
70950: ARRAY
70951: PPUSH
70952: CALL_OW 297
70956: ST_TO_ADDR
// end ; end ;
70957: GO 70846
70959: POP
70960: POP
// result := hex ;
70961: LD_ADDR_VAR 0 3
70965: PUSH
70966: LD_VAR 0 7
70970: ST_TO_ADDR
// end ;
70971: LD_VAR 0 3
70975: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70976: LD_INT 0
70978: PPUSH
70979: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70980: LD_VAR 0 1
70984: NOT
70985: PUSH
70986: LD_VAR 0 1
70990: PUSH
70991: LD_INT 21
70993: PUSH
70994: LD_INT 2
70996: PUSH
70997: EMPTY
70998: LIST
70999: LIST
71000: PUSH
71001: LD_INT 23
71003: PUSH
71004: LD_INT 2
71006: PUSH
71007: EMPTY
71008: LIST
71009: LIST
71010: PUSH
71011: EMPTY
71012: LIST
71013: LIST
71014: PPUSH
71015: CALL_OW 69
71019: IN
71020: NOT
71021: OR
71022: IFFALSE 71026
// exit ;
71024: GO 71073
// for i = 1 to 3 do
71026: LD_ADDR_VAR 0 3
71030: PUSH
71031: DOUBLE
71032: LD_INT 1
71034: DEC
71035: ST_TO_ADDR
71036: LD_INT 3
71038: PUSH
71039: FOR_TO
71040: IFFALSE 71071
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71042: LD_VAR 0 1
71046: PPUSH
71047: CALL_OW 250
71051: PPUSH
71052: LD_VAR 0 1
71056: PPUSH
71057: CALL_OW 251
71061: PPUSH
71062: LD_INT 1
71064: PPUSH
71065: CALL_OW 453
71069: GO 71039
71071: POP
71072: POP
// end ;
71073: LD_VAR 0 2
71077: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71078: LD_INT 0
71080: PPUSH
71081: PPUSH
71082: PPUSH
71083: PPUSH
71084: PPUSH
71085: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71086: LD_VAR 0 1
71090: NOT
71091: PUSH
71092: LD_VAR 0 2
71096: NOT
71097: OR
71098: PUSH
71099: LD_VAR 0 1
71103: PPUSH
71104: CALL_OW 314
71108: OR
71109: IFFALSE 71113
// exit ;
71111: GO 71554
// x := GetX ( enemy_unit ) ;
71113: LD_ADDR_VAR 0 7
71117: PUSH
71118: LD_VAR 0 2
71122: PPUSH
71123: CALL_OW 250
71127: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71128: LD_ADDR_VAR 0 8
71132: PUSH
71133: LD_VAR 0 2
71137: PPUSH
71138: CALL_OW 251
71142: ST_TO_ADDR
// if not x or not y then
71143: LD_VAR 0 7
71147: NOT
71148: PUSH
71149: LD_VAR 0 8
71153: NOT
71154: OR
71155: IFFALSE 71159
// exit ;
71157: GO 71554
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71159: LD_ADDR_VAR 0 6
71163: PUSH
71164: LD_VAR 0 7
71168: PPUSH
71169: LD_INT 0
71171: PPUSH
71172: LD_INT 4
71174: PPUSH
71175: CALL_OW 272
71179: PUSH
71180: LD_VAR 0 8
71184: PPUSH
71185: LD_INT 0
71187: PPUSH
71188: LD_INT 4
71190: PPUSH
71191: CALL_OW 273
71195: PUSH
71196: EMPTY
71197: LIST
71198: LIST
71199: PUSH
71200: LD_VAR 0 7
71204: PPUSH
71205: LD_INT 1
71207: PPUSH
71208: LD_INT 4
71210: PPUSH
71211: CALL_OW 272
71215: PUSH
71216: LD_VAR 0 8
71220: PPUSH
71221: LD_INT 1
71223: PPUSH
71224: LD_INT 4
71226: PPUSH
71227: CALL_OW 273
71231: PUSH
71232: EMPTY
71233: LIST
71234: LIST
71235: PUSH
71236: LD_VAR 0 7
71240: PPUSH
71241: LD_INT 2
71243: PPUSH
71244: LD_INT 4
71246: PPUSH
71247: CALL_OW 272
71251: PUSH
71252: LD_VAR 0 8
71256: PPUSH
71257: LD_INT 2
71259: PPUSH
71260: LD_INT 4
71262: PPUSH
71263: CALL_OW 273
71267: PUSH
71268: EMPTY
71269: LIST
71270: LIST
71271: PUSH
71272: LD_VAR 0 7
71276: PPUSH
71277: LD_INT 3
71279: PPUSH
71280: LD_INT 4
71282: PPUSH
71283: CALL_OW 272
71287: PUSH
71288: LD_VAR 0 8
71292: PPUSH
71293: LD_INT 3
71295: PPUSH
71296: LD_INT 4
71298: PPUSH
71299: CALL_OW 273
71303: PUSH
71304: EMPTY
71305: LIST
71306: LIST
71307: PUSH
71308: LD_VAR 0 7
71312: PPUSH
71313: LD_INT 4
71315: PPUSH
71316: LD_INT 4
71318: PPUSH
71319: CALL_OW 272
71323: PUSH
71324: LD_VAR 0 8
71328: PPUSH
71329: LD_INT 4
71331: PPUSH
71332: LD_INT 4
71334: PPUSH
71335: CALL_OW 273
71339: PUSH
71340: EMPTY
71341: LIST
71342: LIST
71343: PUSH
71344: LD_VAR 0 7
71348: PPUSH
71349: LD_INT 5
71351: PPUSH
71352: LD_INT 4
71354: PPUSH
71355: CALL_OW 272
71359: PUSH
71360: LD_VAR 0 8
71364: PPUSH
71365: LD_INT 5
71367: PPUSH
71368: LD_INT 4
71370: PPUSH
71371: CALL_OW 273
71375: PUSH
71376: EMPTY
71377: LIST
71378: LIST
71379: PUSH
71380: EMPTY
71381: LIST
71382: LIST
71383: LIST
71384: LIST
71385: LIST
71386: LIST
71387: ST_TO_ADDR
// for i = tmp downto 1 do
71388: LD_ADDR_VAR 0 4
71392: PUSH
71393: DOUBLE
71394: LD_VAR 0 6
71398: INC
71399: ST_TO_ADDR
71400: LD_INT 1
71402: PUSH
71403: FOR_DOWNTO
71404: IFFALSE 71505
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71406: LD_VAR 0 6
71410: PUSH
71411: LD_VAR 0 4
71415: ARRAY
71416: PUSH
71417: LD_INT 1
71419: ARRAY
71420: PPUSH
71421: LD_VAR 0 6
71425: PUSH
71426: LD_VAR 0 4
71430: ARRAY
71431: PUSH
71432: LD_INT 2
71434: ARRAY
71435: PPUSH
71436: CALL_OW 488
71440: NOT
71441: PUSH
71442: LD_VAR 0 6
71446: PUSH
71447: LD_VAR 0 4
71451: ARRAY
71452: PUSH
71453: LD_INT 1
71455: ARRAY
71456: PPUSH
71457: LD_VAR 0 6
71461: PUSH
71462: LD_VAR 0 4
71466: ARRAY
71467: PUSH
71468: LD_INT 2
71470: ARRAY
71471: PPUSH
71472: CALL_OW 428
71476: PUSH
71477: LD_INT 0
71479: NONEQUAL
71480: OR
71481: IFFALSE 71503
// tmp := Delete ( tmp , i ) ;
71483: LD_ADDR_VAR 0 6
71487: PUSH
71488: LD_VAR 0 6
71492: PPUSH
71493: LD_VAR 0 4
71497: PPUSH
71498: CALL_OW 3
71502: ST_TO_ADDR
71503: GO 71403
71505: POP
71506: POP
// j := GetClosestHex ( unit , tmp ) ;
71507: LD_ADDR_VAR 0 5
71511: PUSH
71512: LD_VAR 0 1
71516: PPUSH
71517: LD_VAR 0 6
71521: PPUSH
71522: CALL 70807 0 2
71526: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71527: LD_VAR 0 1
71531: PPUSH
71532: LD_VAR 0 5
71536: PUSH
71537: LD_INT 1
71539: ARRAY
71540: PPUSH
71541: LD_VAR 0 5
71545: PUSH
71546: LD_INT 2
71548: ARRAY
71549: PPUSH
71550: CALL_OW 111
// end ;
71554: LD_VAR 0 3
71558: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
71559: LD_INT 0
71561: PPUSH
71562: PPUSH
71563: PPUSH
// uc_side = 0 ;
71564: LD_ADDR_OWVAR 20
71568: PUSH
71569: LD_INT 0
71571: ST_TO_ADDR
// uc_nation = 0 ;
71572: LD_ADDR_OWVAR 21
71576: PUSH
71577: LD_INT 0
71579: ST_TO_ADDR
// InitHc_All ( ) ;
71580: CALL_OW 584
// InitVc ;
71584: CALL_OW 20
// if mastodonts then
71588: LD_VAR 0 6
71592: IFFALSE 71659
// for i = 1 to mastodonts do
71594: LD_ADDR_VAR 0 11
71598: PUSH
71599: DOUBLE
71600: LD_INT 1
71602: DEC
71603: ST_TO_ADDR
71604: LD_VAR 0 6
71608: PUSH
71609: FOR_TO
71610: IFFALSE 71657
// begin vc_chassis := 31 ;
71612: LD_ADDR_OWVAR 37
71616: PUSH
71617: LD_INT 31
71619: ST_TO_ADDR
// vc_control := control_rider ;
71620: LD_ADDR_OWVAR 38
71624: PUSH
71625: LD_INT 4
71627: ST_TO_ADDR
// animal := CreateVehicle ;
71628: LD_ADDR_VAR 0 12
71632: PUSH
71633: CALL_OW 45
71637: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71638: LD_VAR 0 12
71642: PPUSH
71643: LD_VAR 0 8
71647: PPUSH
71648: LD_INT 0
71650: PPUSH
71651: CALL 73794 0 3
// end ;
71655: GO 71609
71657: POP
71658: POP
// if horses then
71659: LD_VAR 0 5
71663: IFFALSE 71730
// for i = 1 to horses do
71665: LD_ADDR_VAR 0 11
71669: PUSH
71670: DOUBLE
71671: LD_INT 1
71673: DEC
71674: ST_TO_ADDR
71675: LD_VAR 0 5
71679: PUSH
71680: FOR_TO
71681: IFFALSE 71728
// begin hc_class := 21 ;
71683: LD_ADDR_OWVAR 28
71687: PUSH
71688: LD_INT 21
71690: ST_TO_ADDR
// hc_gallery :=  ;
71691: LD_ADDR_OWVAR 33
71695: PUSH
71696: LD_STRING 
71698: ST_TO_ADDR
// animal := CreateHuman ;
71699: LD_ADDR_VAR 0 12
71703: PUSH
71704: CALL_OW 44
71708: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71709: LD_VAR 0 12
71713: PPUSH
71714: LD_VAR 0 8
71718: PPUSH
71719: LD_INT 0
71721: PPUSH
71722: CALL 73794 0 3
// end ;
71726: GO 71680
71728: POP
71729: POP
// if birds then
71730: LD_VAR 0 1
71734: IFFALSE 71801
// for i = 1 to birds do
71736: LD_ADDR_VAR 0 11
71740: PUSH
71741: DOUBLE
71742: LD_INT 1
71744: DEC
71745: ST_TO_ADDR
71746: LD_VAR 0 1
71750: PUSH
71751: FOR_TO
71752: IFFALSE 71799
// begin hc_class = 18 ;
71754: LD_ADDR_OWVAR 28
71758: PUSH
71759: LD_INT 18
71761: ST_TO_ADDR
// hc_gallery =  ;
71762: LD_ADDR_OWVAR 33
71766: PUSH
71767: LD_STRING 
71769: ST_TO_ADDR
// animal := CreateHuman ;
71770: LD_ADDR_VAR 0 12
71774: PUSH
71775: CALL_OW 44
71779: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71780: LD_VAR 0 12
71784: PPUSH
71785: LD_VAR 0 8
71789: PPUSH
71790: LD_INT 0
71792: PPUSH
71793: CALL 73794 0 3
// end ;
71797: GO 71751
71799: POP
71800: POP
// if tigers then
71801: LD_VAR 0 2
71805: IFFALSE 71889
// for i = 1 to tigers do
71807: LD_ADDR_VAR 0 11
71811: PUSH
71812: DOUBLE
71813: LD_INT 1
71815: DEC
71816: ST_TO_ADDR
71817: LD_VAR 0 2
71821: PUSH
71822: FOR_TO
71823: IFFALSE 71887
// begin hc_class = class_tiger ;
71825: LD_ADDR_OWVAR 28
71829: PUSH
71830: LD_INT 14
71832: ST_TO_ADDR
// hc_gallery =  ;
71833: LD_ADDR_OWVAR 33
71837: PUSH
71838: LD_STRING 
71840: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71841: LD_ADDR_OWVAR 35
71845: PUSH
71846: LD_INT 7
71848: NEG
71849: PPUSH
71850: LD_INT 7
71852: PPUSH
71853: CALL_OW 12
71857: ST_TO_ADDR
// animal := CreateHuman ;
71858: LD_ADDR_VAR 0 12
71862: PUSH
71863: CALL_OW 44
71867: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71868: LD_VAR 0 12
71872: PPUSH
71873: LD_VAR 0 8
71877: PPUSH
71878: LD_INT 0
71880: PPUSH
71881: CALL 73794 0 3
// end ;
71885: GO 71822
71887: POP
71888: POP
// if apemans then
71889: LD_VAR 0 3
71893: IFFALSE 72016
// for i = 1 to apemans do
71895: LD_ADDR_VAR 0 11
71899: PUSH
71900: DOUBLE
71901: LD_INT 1
71903: DEC
71904: ST_TO_ADDR
71905: LD_VAR 0 3
71909: PUSH
71910: FOR_TO
71911: IFFALSE 72014
// begin hc_class = class_apeman ;
71913: LD_ADDR_OWVAR 28
71917: PUSH
71918: LD_INT 12
71920: ST_TO_ADDR
// hc_gallery =  ;
71921: LD_ADDR_OWVAR 33
71925: PUSH
71926: LD_STRING 
71928: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71929: LD_ADDR_OWVAR 35
71933: PUSH
71934: LD_INT 2
71936: NEG
71937: PPUSH
71938: LD_INT 2
71940: PPUSH
71941: CALL_OW 12
71945: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71946: LD_ADDR_OWVAR 31
71950: PUSH
71951: LD_INT 1
71953: PPUSH
71954: LD_INT 3
71956: PPUSH
71957: CALL_OW 12
71961: PUSH
71962: LD_INT 1
71964: PPUSH
71965: LD_INT 3
71967: PPUSH
71968: CALL_OW 12
71972: PUSH
71973: LD_INT 0
71975: PUSH
71976: LD_INT 0
71978: PUSH
71979: EMPTY
71980: LIST
71981: LIST
71982: LIST
71983: LIST
71984: ST_TO_ADDR
// animal := CreateHuman ;
71985: LD_ADDR_VAR 0 12
71989: PUSH
71990: CALL_OW 44
71994: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71995: LD_VAR 0 12
71999: PPUSH
72000: LD_VAR 0 8
72004: PPUSH
72005: LD_INT 0
72007: PPUSH
72008: CALL 73794 0 3
// end ;
72012: GO 71910
72014: POP
72015: POP
// if enchidnas then
72016: LD_VAR 0 4
72020: IFFALSE 72087
// for i = 1 to enchidnas do
72022: LD_ADDR_VAR 0 11
72026: PUSH
72027: DOUBLE
72028: LD_INT 1
72030: DEC
72031: ST_TO_ADDR
72032: LD_VAR 0 4
72036: PUSH
72037: FOR_TO
72038: IFFALSE 72085
// begin hc_class = 13 ;
72040: LD_ADDR_OWVAR 28
72044: PUSH
72045: LD_INT 13
72047: ST_TO_ADDR
// hc_gallery =  ;
72048: LD_ADDR_OWVAR 33
72052: PUSH
72053: LD_STRING 
72055: ST_TO_ADDR
// animal := CreateHuman ;
72056: LD_ADDR_VAR 0 12
72060: PUSH
72061: CALL_OW 44
72065: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72066: LD_VAR 0 12
72070: PPUSH
72071: LD_VAR 0 8
72075: PPUSH
72076: LD_INT 0
72078: PPUSH
72079: CALL 73794 0 3
// end ;
72083: GO 72037
72085: POP
72086: POP
// if fishes then
72087: LD_VAR 0 7
72091: IFFALSE 72158
// for i = 1 to fishes do
72093: LD_ADDR_VAR 0 11
72097: PUSH
72098: DOUBLE
72099: LD_INT 1
72101: DEC
72102: ST_TO_ADDR
72103: LD_VAR 0 7
72107: PUSH
72108: FOR_TO
72109: IFFALSE 72156
// begin hc_class = 20 ;
72111: LD_ADDR_OWVAR 28
72115: PUSH
72116: LD_INT 20
72118: ST_TO_ADDR
// hc_gallery =  ;
72119: LD_ADDR_OWVAR 33
72123: PUSH
72124: LD_STRING 
72126: ST_TO_ADDR
// animal := CreateHuman ;
72127: LD_ADDR_VAR 0 12
72131: PUSH
72132: CALL_OW 44
72136: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
72137: LD_VAR 0 12
72141: PPUSH
72142: LD_VAR 0 9
72146: PPUSH
72147: LD_INT 0
72149: PPUSH
72150: CALL 73794 0 3
// end ;
72154: GO 72108
72156: POP
72157: POP
// end ;
72158: LD_VAR 0 10
72162: RET
// export function WantHeal ( sci , unit ) ; begin
72163: LD_INT 0
72165: PPUSH
// if GetTaskList ( sci ) > 0 then
72166: LD_VAR 0 1
72170: PPUSH
72171: CALL_OW 437
72175: PUSH
72176: LD_INT 0
72178: GREATER
72179: IFFALSE 72249
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
72181: LD_VAR 0 1
72185: PPUSH
72186: CALL_OW 437
72190: PUSH
72191: LD_INT 1
72193: ARRAY
72194: PUSH
72195: LD_INT 1
72197: ARRAY
72198: PUSH
72199: LD_STRING l
72201: EQUAL
72202: PUSH
72203: LD_VAR 0 1
72207: PPUSH
72208: CALL_OW 437
72212: PUSH
72213: LD_INT 1
72215: ARRAY
72216: PUSH
72217: LD_INT 4
72219: ARRAY
72220: PUSH
72221: LD_VAR 0 2
72225: EQUAL
72226: AND
72227: IFFALSE 72239
// result := true else
72229: LD_ADDR_VAR 0 3
72233: PUSH
72234: LD_INT 1
72236: ST_TO_ADDR
72237: GO 72247
// result := false ;
72239: LD_ADDR_VAR 0 3
72243: PUSH
72244: LD_INT 0
72246: ST_TO_ADDR
// end else
72247: GO 72257
// result := false ;
72249: LD_ADDR_VAR 0 3
72253: PUSH
72254: LD_INT 0
72256: ST_TO_ADDR
// end ;
72257: LD_VAR 0 3
72261: RET
// export function HealTarget ( sci ) ; begin
72262: LD_INT 0
72264: PPUSH
// if not sci then
72265: LD_VAR 0 1
72269: NOT
72270: IFFALSE 72274
// exit ;
72272: GO 72339
// result := 0 ;
72274: LD_ADDR_VAR 0 2
72278: PUSH
72279: LD_INT 0
72281: ST_TO_ADDR
// if GetTaskList ( sci ) then
72282: LD_VAR 0 1
72286: PPUSH
72287: CALL_OW 437
72291: IFFALSE 72339
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
72293: LD_VAR 0 1
72297: PPUSH
72298: CALL_OW 437
72302: PUSH
72303: LD_INT 1
72305: ARRAY
72306: PUSH
72307: LD_INT 1
72309: ARRAY
72310: PUSH
72311: LD_STRING l
72313: EQUAL
72314: IFFALSE 72339
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
72316: LD_ADDR_VAR 0 2
72320: PUSH
72321: LD_VAR 0 1
72325: PPUSH
72326: CALL_OW 437
72330: PUSH
72331: LD_INT 1
72333: ARRAY
72334: PUSH
72335: LD_INT 4
72337: ARRAY
72338: ST_TO_ADDR
// end ;
72339: LD_VAR 0 2
72343: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
72344: LD_INT 0
72346: PPUSH
72347: PPUSH
72348: PPUSH
72349: PPUSH
// if not base_units then
72350: LD_VAR 0 1
72354: NOT
72355: IFFALSE 72359
// exit ;
72357: GO 72446
// result := false ;
72359: LD_ADDR_VAR 0 2
72363: PUSH
72364: LD_INT 0
72366: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
72367: LD_ADDR_VAR 0 5
72371: PUSH
72372: LD_VAR 0 1
72376: PPUSH
72377: LD_INT 21
72379: PUSH
72380: LD_INT 3
72382: PUSH
72383: EMPTY
72384: LIST
72385: LIST
72386: PPUSH
72387: CALL_OW 72
72391: ST_TO_ADDR
// if not tmp then
72392: LD_VAR 0 5
72396: NOT
72397: IFFALSE 72401
// exit ;
72399: GO 72446
// for i in tmp do
72401: LD_ADDR_VAR 0 3
72405: PUSH
72406: LD_VAR 0 5
72410: PUSH
72411: FOR_IN
72412: IFFALSE 72444
// begin result := EnemyInRange ( i , 22 ) ;
72414: LD_ADDR_VAR 0 2
72418: PUSH
72419: LD_VAR 0 3
72423: PPUSH
72424: LD_INT 22
72426: PPUSH
72427: CALL 70682 0 2
72431: ST_TO_ADDR
// if result then
72432: LD_VAR 0 2
72436: IFFALSE 72442
// exit ;
72438: POP
72439: POP
72440: GO 72446
// end ;
72442: GO 72411
72444: POP
72445: POP
// end ;
72446: LD_VAR 0 2
72450: RET
// export function FilterByTag ( units , tag ) ; begin
72451: LD_INT 0
72453: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
72454: LD_ADDR_VAR 0 3
72458: PUSH
72459: LD_VAR 0 1
72463: PPUSH
72464: LD_INT 120
72466: PUSH
72467: LD_VAR 0 2
72471: PUSH
72472: EMPTY
72473: LIST
72474: LIST
72475: PPUSH
72476: CALL_OW 72
72480: ST_TO_ADDR
// end ;
72481: LD_VAR 0 3
72485: RET
// export function IsDriver ( un ) ; begin
72486: LD_INT 0
72488: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
72489: LD_ADDR_VAR 0 2
72493: PUSH
72494: LD_VAR 0 1
72498: PUSH
72499: LD_INT 55
72501: PUSH
72502: EMPTY
72503: LIST
72504: PPUSH
72505: CALL_OW 69
72509: IN
72510: ST_TO_ADDR
// end ;
72511: LD_VAR 0 2
72515: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
72516: LD_INT 0
72518: PPUSH
72519: PPUSH
// list := [ ] ;
72520: LD_ADDR_VAR 0 5
72524: PUSH
72525: EMPTY
72526: ST_TO_ADDR
// case d of 0 :
72527: LD_VAR 0 3
72531: PUSH
72532: LD_INT 0
72534: DOUBLE
72535: EQUAL
72536: IFTRUE 72540
72538: GO 72673
72540: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
72541: LD_ADDR_VAR 0 5
72545: PUSH
72546: LD_VAR 0 1
72550: PUSH
72551: LD_INT 4
72553: MINUS
72554: PUSH
72555: LD_VAR 0 2
72559: PUSH
72560: LD_INT 4
72562: MINUS
72563: PUSH
72564: LD_INT 2
72566: PUSH
72567: EMPTY
72568: LIST
72569: LIST
72570: LIST
72571: PUSH
72572: LD_VAR 0 1
72576: PUSH
72577: LD_INT 3
72579: MINUS
72580: PUSH
72581: LD_VAR 0 2
72585: PUSH
72586: LD_INT 1
72588: PUSH
72589: EMPTY
72590: LIST
72591: LIST
72592: LIST
72593: PUSH
72594: LD_VAR 0 1
72598: PUSH
72599: LD_INT 4
72601: PLUS
72602: PUSH
72603: LD_VAR 0 2
72607: PUSH
72608: LD_INT 4
72610: PUSH
72611: EMPTY
72612: LIST
72613: LIST
72614: LIST
72615: PUSH
72616: LD_VAR 0 1
72620: PUSH
72621: LD_INT 3
72623: PLUS
72624: PUSH
72625: LD_VAR 0 2
72629: PUSH
72630: LD_INT 3
72632: PLUS
72633: PUSH
72634: LD_INT 5
72636: PUSH
72637: EMPTY
72638: LIST
72639: LIST
72640: LIST
72641: PUSH
72642: LD_VAR 0 1
72646: PUSH
72647: LD_VAR 0 2
72651: PUSH
72652: LD_INT 4
72654: PLUS
72655: PUSH
72656: LD_INT 0
72658: PUSH
72659: EMPTY
72660: LIST
72661: LIST
72662: LIST
72663: PUSH
72664: EMPTY
72665: LIST
72666: LIST
72667: LIST
72668: LIST
72669: LIST
72670: ST_TO_ADDR
// end ; 1 :
72671: GO 73371
72673: LD_INT 1
72675: DOUBLE
72676: EQUAL
72677: IFTRUE 72681
72679: GO 72814
72681: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
72682: LD_ADDR_VAR 0 5
72686: PUSH
72687: LD_VAR 0 1
72691: PUSH
72692: LD_VAR 0 2
72696: PUSH
72697: LD_INT 4
72699: MINUS
72700: PUSH
72701: LD_INT 3
72703: PUSH
72704: EMPTY
72705: LIST
72706: LIST
72707: LIST
72708: PUSH
72709: LD_VAR 0 1
72713: PUSH
72714: LD_INT 3
72716: MINUS
72717: PUSH
72718: LD_VAR 0 2
72722: PUSH
72723: LD_INT 3
72725: MINUS
72726: PUSH
72727: LD_INT 2
72729: PUSH
72730: EMPTY
72731: LIST
72732: LIST
72733: LIST
72734: PUSH
72735: LD_VAR 0 1
72739: PUSH
72740: LD_INT 4
72742: MINUS
72743: PUSH
72744: LD_VAR 0 2
72748: PUSH
72749: LD_INT 1
72751: PUSH
72752: EMPTY
72753: LIST
72754: LIST
72755: LIST
72756: PUSH
72757: LD_VAR 0 1
72761: PUSH
72762: LD_VAR 0 2
72766: PUSH
72767: LD_INT 3
72769: PLUS
72770: PUSH
72771: LD_INT 0
72773: PUSH
72774: EMPTY
72775: LIST
72776: LIST
72777: LIST
72778: PUSH
72779: LD_VAR 0 1
72783: PUSH
72784: LD_INT 4
72786: PLUS
72787: PUSH
72788: LD_VAR 0 2
72792: PUSH
72793: LD_INT 4
72795: PLUS
72796: PUSH
72797: LD_INT 5
72799: PUSH
72800: EMPTY
72801: LIST
72802: LIST
72803: LIST
72804: PUSH
72805: EMPTY
72806: LIST
72807: LIST
72808: LIST
72809: LIST
72810: LIST
72811: ST_TO_ADDR
// end ; 2 :
72812: GO 73371
72814: LD_INT 2
72816: DOUBLE
72817: EQUAL
72818: IFTRUE 72822
72820: GO 72951
72822: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72823: LD_ADDR_VAR 0 5
72827: PUSH
72828: LD_VAR 0 1
72832: PUSH
72833: LD_VAR 0 2
72837: PUSH
72838: LD_INT 3
72840: MINUS
72841: PUSH
72842: LD_INT 3
72844: PUSH
72845: EMPTY
72846: LIST
72847: LIST
72848: LIST
72849: PUSH
72850: LD_VAR 0 1
72854: PUSH
72855: LD_INT 4
72857: PLUS
72858: PUSH
72859: LD_VAR 0 2
72863: PUSH
72864: LD_INT 4
72866: PUSH
72867: EMPTY
72868: LIST
72869: LIST
72870: LIST
72871: PUSH
72872: LD_VAR 0 1
72876: PUSH
72877: LD_VAR 0 2
72881: PUSH
72882: LD_INT 4
72884: PLUS
72885: PUSH
72886: LD_INT 0
72888: PUSH
72889: EMPTY
72890: LIST
72891: LIST
72892: LIST
72893: PUSH
72894: LD_VAR 0 1
72898: PUSH
72899: LD_INT 3
72901: MINUS
72902: PUSH
72903: LD_VAR 0 2
72907: PUSH
72908: LD_INT 1
72910: PUSH
72911: EMPTY
72912: LIST
72913: LIST
72914: LIST
72915: PUSH
72916: LD_VAR 0 1
72920: PUSH
72921: LD_INT 4
72923: MINUS
72924: PUSH
72925: LD_VAR 0 2
72929: PUSH
72930: LD_INT 4
72932: MINUS
72933: PUSH
72934: LD_INT 2
72936: PUSH
72937: EMPTY
72938: LIST
72939: LIST
72940: LIST
72941: PUSH
72942: EMPTY
72943: LIST
72944: LIST
72945: LIST
72946: LIST
72947: LIST
72948: ST_TO_ADDR
// end ; 3 :
72949: GO 73371
72951: LD_INT 3
72953: DOUBLE
72954: EQUAL
72955: IFTRUE 72959
72957: GO 73092
72959: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72960: LD_ADDR_VAR 0 5
72964: PUSH
72965: LD_VAR 0 1
72969: PUSH
72970: LD_INT 3
72972: PLUS
72973: PUSH
72974: LD_VAR 0 2
72978: PUSH
72979: LD_INT 4
72981: PUSH
72982: EMPTY
72983: LIST
72984: LIST
72985: LIST
72986: PUSH
72987: LD_VAR 0 1
72991: PUSH
72992: LD_INT 4
72994: PLUS
72995: PUSH
72996: LD_VAR 0 2
73000: PUSH
73001: LD_INT 4
73003: PLUS
73004: PUSH
73005: LD_INT 5
73007: PUSH
73008: EMPTY
73009: LIST
73010: LIST
73011: LIST
73012: PUSH
73013: LD_VAR 0 1
73017: PUSH
73018: LD_INT 4
73020: MINUS
73021: PUSH
73022: LD_VAR 0 2
73026: PUSH
73027: LD_INT 1
73029: PUSH
73030: EMPTY
73031: LIST
73032: LIST
73033: LIST
73034: PUSH
73035: LD_VAR 0 1
73039: PUSH
73040: LD_VAR 0 2
73044: PUSH
73045: LD_INT 4
73047: MINUS
73048: PUSH
73049: LD_INT 3
73051: PUSH
73052: EMPTY
73053: LIST
73054: LIST
73055: LIST
73056: PUSH
73057: LD_VAR 0 1
73061: PUSH
73062: LD_INT 3
73064: MINUS
73065: PUSH
73066: LD_VAR 0 2
73070: PUSH
73071: LD_INT 3
73073: MINUS
73074: PUSH
73075: LD_INT 2
73077: PUSH
73078: EMPTY
73079: LIST
73080: LIST
73081: LIST
73082: PUSH
73083: EMPTY
73084: LIST
73085: LIST
73086: LIST
73087: LIST
73088: LIST
73089: ST_TO_ADDR
// end ; 4 :
73090: GO 73371
73092: LD_INT 4
73094: DOUBLE
73095: EQUAL
73096: IFTRUE 73100
73098: GO 73233
73100: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
73101: LD_ADDR_VAR 0 5
73105: PUSH
73106: LD_VAR 0 1
73110: PUSH
73111: LD_VAR 0 2
73115: PUSH
73116: LD_INT 4
73118: PLUS
73119: PUSH
73120: LD_INT 0
73122: PUSH
73123: EMPTY
73124: LIST
73125: LIST
73126: LIST
73127: PUSH
73128: LD_VAR 0 1
73132: PUSH
73133: LD_INT 3
73135: PLUS
73136: PUSH
73137: LD_VAR 0 2
73141: PUSH
73142: LD_INT 3
73144: PLUS
73145: PUSH
73146: LD_INT 5
73148: PUSH
73149: EMPTY
73150: LIST
73151: LIST
73152: LIST
73153: PUSH
73154: LD_VAR 0 1
73158: PUSH
73159: LD_INT 4
73161: PLUS
73162: PUSH
73163: LD_VAR 0 2
73167: PUSH
73168: LD_INT 4
73170: PUSH
73171: EMPTY
73172: LIST
73173: LIST
73174: LIST
73175: PUSH
73176: LD_VAR 0 1
73180: PUSH
73181: LD_VAR 0 2
73185: PUSH
73186: LD_INT 3
73188: MINUS
73189: PUSH
73190: LD_INT 3
73192: PUSH
73193: EMPTY
73194: LIST
73195: LIST
73196: LIST
73197: PUSH
73198: LD_VAR 0 1
73202: PUSH
73203: LD_INT 4
73205: MINUS
73206: PUSH
73207: LD_VAR 0 2
73211: PUSH
73212: LD_INT 4
73214: MINUS
73215: PUSH
73216: LD_INT 2
73218: PUSH
73219: EMPTY
73220: LIST
73221: LIST
73222: LIST
73223: PUSH
73224: EMPTY
73225: LIST
73226: LIST
73227: LIST
73228: LIST
73229: LIST
73230: ST_TO_ADDR
// end ; 5 :
73231: GO 73371
73233: LD_INT 5
73235: DOUBLE
73236: EQUAL
73237: IFTRUE 73241
73239: GO 73370
73241: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
73242: LD_ADDR_VAR 0 5
73246: PUSH
73247: LD_VAR 0 1
73251: PUSH
73252: LD_INT 4
73254: MINUS
73255: PUSH
73256: LD_VAR 0 2
73260: PUSH
73261: LD_INT 1
73263: PUSH
73264: EMPTY
73265: LIST
73266: LIST
73267: LIST
73268: PUSH
73269: LD_VAR 0 1
73273: PUSH
73274: LD_VAR 0 2
73278: PUSH
73279: LD_INT 4
73281: MINUS
73282: PUSH
73283: LD_INT 3
73285: PUSH
73286: EMPTY
73287: LIST
73288: LIST
73289: LIST
73290: PUSH
73291: LD_VAR 0 1
73295: PUSH
73296: LD_INT 4
73298: PLUS
73299: PUSH
73300: LD_VAR 0 2
73304: PUSH
73305: LD_INT 4
73307: PLUS
73308: PUSH
73309: LD_INT 5
73311: PUSH
73312: EMPTY
73313: LIST
73314: LIST
73315: LIST
73316: PUSH
73317: LD_VAR 0 1
73321: PUSH
73322: LD_INT 3
73324: PLUS
73325: PUSH
73326: LD_VAR 0 2
73330: PUSH
73331: LD_INT 4
73333: PUSH
73334: EMPTY
73335: LIST
73336: LIST
73337: LIST
73338: PUSH
73339: LD_VAR 0 1
73343: PUSH
73344: LD_VAR 0 2
73348: PUSH
73349: LD_INT 3
73351: PLUS
73352: PUSH
73353: LD_INT 0
73355: PUSH
73356: EMPTY
73357: LIST
73358: LIST
73359: LIST
73360: PUSH
73361: EMPTY
73362: LIST
73363: LIST
73364: LIST
73365: LIST
73366: LIST
73367: ST_TO_ADDR
// end ; end ;
73368: GO 73371
73370: POP
// result := list ;
73371: LD_ADDR_VAR 0 4
73375: PUSH
73376: LD_VAR 0 5
73380: ST_TO_ADDR
// end ;
73381: LD_VAR 0 4
73385: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
73386: LD_INT 0
73388: PPUSH
73389: PPUSH
73390: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
73391: LD_VAR 0 1
73395: NOT
73396: PUSH
73397: LD_VAR 0 2
73401: PUSH
73402: LD_INT 1
73404: PUSH
73405: LD_INT 2
73407: PUSH
73408: LD_INT 3
73410: PUSH
73411: LD_INT 4
73413: PUSH
73414: EMPTY
73415: LIST
73416: LIST
73417: LIST
73418: LIST
73419: IN
73420: NOT
73421: OR
73422: IFFALSE 73426
// exit ;
73424: GO 73518
// tmp := [ ] ;
73426: LD_ADDR_VAR 0 5
73430: PUSH
73431: EMPTY
73432: ST_TO_ADDR
// for i in units do
73433: LD_ADDR_VAR 0 4
73437: PUSH
73438: LD_VAR 0 1
73442: PUSH
73443: FOR_IN
73444: IFFALSE 73487
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
73446: LD_ADDR_VAR 0 5
73450: PUSH
73451: LD_VAR 0 5
73455: PPUSH
73456: LD_VAR 0 5
73460: PUSH
73461: LD_INT 1
73463: PLUS
73464: PPUSH
73465: LD_VAR 0 4
73469: PPUSH
73470: LD_VAR 0 2
73474: PPUSH
73475: CALL_OW 259
73479: PPUSH
73480: CALL_OW 2
73484: ST_TO_ADDR
73485: GO 73443
73487: POP
73488: POP
// if not tmp then
73489: LD_VAR 0 5
73493: NOT
73494: IFFALSE 73498
// exit ;
73496: GO 73518
// result := SortListByListDesc ( units , tmp ) ;
73498: LD_ADDR_VAR 0 3
73502: PUSH
73503: LD_VAR 0 1
73507: PPUSH
73508: LD_VAR 0 5
73512: PPUSH
73513: CALL_OW 77
73517: ST_TO_ADDR
// end ;
73518: LD_VAR 0 3
73522: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
73523: LD_INT 0
73525: PPUSH
73526: PPUSH
73527: PPUSH
// result := false ;
73528: LD_ADDR_VAR 0 3
73532: PUSH
73533: LD_INT 0
73535: ST_TO_ADDR
// x := GetX ( building ) ;
73536: LD_ADDR_VAR 0 4
73540: PUSH
73541: LD_VAR 0 2
73545: PPUSH
73546: CALL_OW 250
73550: ST_TO_ADDR
// y := GetY ( building ) ;
73551: LD_ADDR_VAR 0 5
73555: PUSH
73556: LD_VAR 0 2
73560: PPUSH
73561: CALL_OW 251
73565: ST_TO_ADDR
// if not building or not x or not y then
73566: LD_VAR 0 2
73570: NOT
73571: PUSH
73572: LD_VAR 0 4
73576: NOT
73577: OR
73578: PUSH
73579: LD_VAR 0 5
73583: NOT
73584: OR
73585: IFFALSE 73589
// exit ;
73587: GO 73681
// if GetTaskList ( unit ) then
73589: LD_VAR 0 1
73593: PPUSH
73594: CALL_OW 437
73598: IFFALSE 73681
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73600: LD_STRING e
73602: PUSH
73603: LD_VAR 0 1
73607: PPUSH
73608: CALL_OW 437
73612: PUSH
73613: LD_INT 1
73615: ARRAY
73616: PUSH
73617: LD_INT 1
73619: ARRAY
73620: EQUAL
73621: PUSH
73622: LD_VAR 0 4
73626: PUSH
73627: LD_VAR 0 1
73631: PPUSH
73632: CALL_OW 437
73636: PUSH
73637: LD_INT 1
73639: ARRAY
73640: PUSH
73641: LD_INT 2
73643: ARRAY
73644: EQUAL
73645: AND
73646: PUSH
73647: LD_VAR 0 5
73651: PUSH
73652: LD_VAR 0 1
73656: PPUSH
73657: CALL_OW 437
73661: PUSH
73662: LD_INT 1
73664: ARRAY
73665: PUSH
73666: LD_INT 3
73668: ARRAY
73669: EQUAL
73670: AND
73671: IFFALSE 73681
// result := true end ;
73673: LD_ADDR_VAR 0 3
73677: PUSH
73678: LD_INT 1
73680: ST_TO_ADDR
// end ;
73681: LD_VAR 0 3
73685: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
73686: LD_INT 0
73688: PPUSH
// result := false ;
73689: LD_ADDR_VAR 0 4
73693: PUSH
73694: LD_INT 0
73696: ST_TO_ADDR
// if GetTaskList ( unit ) then
73697: LD_VAR 0 1
73701: PPUSH
73702: CALL_OW 437
73706: IFFALSE 73789
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73708: LD_STRING M
73710: PUSH
73711: LD_VAR 0 1
73715: PPUSH
73716: CALL_OW 437
73720: PUSH
73721: LD_INT 1
73723: ARRAY
73724: PUSH
73725: LD_INT 1
73727: ARRAY
73728: EQUAL
73729: PUSH
73730: LD_VAR 0 2
73734: PUSH
73735: LD_VAR 0 1
73739: PPUSH
73740: CALL_OW 437
73744: PUSH
73745: LD_INT 1
73747: ARRAY
73748: PUSH
73749: LD_INT 2
73751: ARRAY
73752: EQUAL
73753: AND
73754: PUSH
73755: LD_VAR 0 3
73759: PUSH
73760: LD_VAR 0 1
73764: PPUSH
73765: CALL_OW 437
73769: PUSH
73770: LD_INT 1
73772: ARRAY
73773: PUSH
73774: LD_INT 3
73776: ARRAY
73777: EQUAL
73778: AND
73779: IFFALSE 73789
// result := true ;
73781: LD_ADDR_VAR 0 4
73785: PUSH
73786: LD_INT 1
73788: ST_TO_ADDR
// end ; end ;
73789: LD_VAR 0 4
73793: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73794: LD_INT 0
73796: PPUSH
73797: PPUSH
73798: PPUSH
73799: PPUSH
// if not unit or not area then
73800: LD_VAR 0 1
73804: NOT
73805: PUSH
73806: LD_VAR 0 2
73810: NOT
73811: OR
73812: IFFALSE 73816
// exit ;
73814: GO 73980
// tmp := AreaToList ( area , i ) ;
73816: LD_ADDR_VAR 0 6
73820: PUSH
73821: LD_VAR 0 2
73825: PPUSH
73826: LD_VAR 0 5
73830: PPUSH
73831: CALL_OW 517
73835: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73836: LD_ADDR_VAR 0 5
73840: PUSH
73841: DOUBLE
73842: LD_INT 1
73844: DEC
73845: ST_TO_ADDR
73846: LD_VAR 0 6
73850: PUSH
73851: LD_INT 1
73853: ARRAY
73854: PUSH
73855: FOR_TO
73856: IFFALSE 73978
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73858: LD_ADDR_VAR 0 7
73862: PUSH
73863: LD_VAR 0 6
73867: PUSH
73868: LD_INT 1
73870: ARRAY
73871: PUSH
73872: LD_VAR 0 5
73876: ARRAY
73877: PUSH
73878: LD_VAR 0 6
73882: PUSH
73883: LD_INT 2
73885: ARRAY
73886: PUSH
73887: LD_VAR 0 5
73891: ARRAY
73892: PUSH
73893: EMPTY
73894: LIST
73895: LIST
73896: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
73897: LD_VAR 0 7
73901: PUSH
73902: LD_INT 1
73904: ARRAY
73905: PPUSH
73906: LD_VAR 0 7
73910: PUSH
73911: LD_INT 2
73913: ARRAY
73914: PPUSH
73915: CALL_OW 428
73919: PUSH
73920: LD_INT 0
73922: EQUAL
73923: IFFALSE 73976
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73925: LD_VAR 0 1
73929: PPUSH
73930: LD_VAR 0 7
73934: PUSH
73935: LD_INT 1
73937: ARRAY
73938: PPUSH
73939: LD_VAR 0 7
73943: PUSH
73944: LD_INT 2
73946: ARRAY
73947: PPUSH
73948: LD_VAR 0 3
73952: PPUSH
73953: CALL_OW 48
// result := IsPlaced ( unit ) ;
73957: LD_ADDR_VAR 0 4
73961: PUSH
73962: LD_VAR 0 1
73966: PPUSH
73967: CALL_OW 305
73971: ST_TO_ADDR
// exit ;
73972: POP
73973: POP
73974: GO 73980
// end ; end ;
73976: GO 73855
73978: POP
73979: POP
// end ;
73980: LD_VAR 0 4
73984: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73985: LD_INT 0
73987: PPUSH
73988: PPUSH
73989: PPUSH
// if not side or side > 8 then
73990: LD_VAR 0 1
73994: NOT
73995: PUSH
73996: LD_VAR 0 1
74000: PUSH
74001: LD_INT 8
74003: GREATER
74004: OR
74005: IFFALSE 74009
// exit ;
74007: GO 74196
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
74009: LD_ADDR_VAR 0 4
74013: PUSH
74014: LD_INT 22
74016: PUSH
74017: LD_VAR 0 1
74021: PUSH
74022: EMPTY
74023: LIST
74024: LIST
74025: PUSH
74026: LD_INT 21
74028: PUSH
74029: LD_INT 3
74031: PUSH
74032: EMPTY
74033: LIST
74034: LIST
74035: PUSH
74036: EMPTY
74037: LIST
74038: LIST
74039: PPUSH
74040: CALL_OW 69
74044: ST_TO_ADDR
// if not tmp then
74045: LD_VAR 0 4
74049: NOT
74050: IFFALSE 74054
// exit ;
74052: GO 74196
// enable_addtolog := true ;
74054: LD_ADDR_OWVAR 81
74058: PUSH
74059: LD_INT 1
74061: ST_TO_ADDR
// AddToLog ( [ ) ;
74062: LD_STRING [
74064: PPUSH
74065: CALL_OW 561
// for i in tmp do
74069: LD_ADDR_VAR 0 3
74073: PUSH
74074: LD_VAR 0 4
74078: PUSH
74079: FOR_IN
74080: IFFALSE 74187
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
74082: LD_STRING [
74084: PUSH
74085: LD_VAR 0 3
74089: PPUSH
74090: CALL_OW 266
74094: STR
74095: PUSH
74096: LD_STRING , 
74098: STR
74099: PUSH
74100: LD_VAR 0 3
74104: PPUSH
74105: CALL_OW 250
74109: STR
74110: PUSH
74111: LD_STRING , 
74113: STR
74114: PUSH
74115: LD_VAR 0 3
74119: PPUSH
74120: CALL_OW 251
74124: STR
74125: PUSH
74126: LD_STRING , 
74128: STR
74129: PUSH
74130: LD_VAR 0 3
74134: PPUSH
74135: CALL_OW 254
74139: STR
74140: PUSH
74141: LD_STRING , 
74143: STR
74144: PUSH
74145: LD_VAR 0 3
74149: PPUSH
74150: LD_INT 1
74152: PPUSH
74153: CALL_OW 268
74157: STR
74158: PUSH
74159: LD_STRING , 
74161: STR
74162: PUSH
74163: LD_VAR 0 3
74167: PPUSH
74168: LD_INT 2
74170: PPUSH
74171: CALL_OW 268
74175: STR
74176: PUSH
74177: LD_STRING ],
74179: STR
74180: PPUSH
74181: CALL_OW 561
// end ;
74185: GO 74079
74187: POP
74188: POP
// AddToLog ( ]; ) ;
74189: LD_STRING ];
74191: PPUSH
74192: CALL_OW 561
// end ;
74196: LD_VAR 0 2
74200: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
74201: LD_INT 0
74203: PPUSH
74204: PPUSH
74205: PPUSH
74206: PPUSH
74207: PPUSH
// if not area or not rate or not max then
74208: LD_VAR 0 1
74212: NOT
74213: PUSH
74214: LD_VAR 0 2
74218: NOT
74219: OR
74220: PUSH
74221: LD_VAR 0 4
74225: NOT
74226: OR
74227: IFFALSE 74231
// exit ;
74229: GO 74420
// while 1 do
74231: LD_INT 1
74233: IFFALSE 74420
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
74235: LD_ADDR_VAR 0 9
74239: PUSH
74240: LD_VAR 0 1
74244: PPUSH
74245: LD_INT 1
74247: PPUSH
74248: CALL_OW 287
74252: PUSH
74253: LD_INT 10
74255: MUL
74256: ST_TO_ADDR
// r := rate / 10 ;
74257: LD_ADDR_VAR 0 7
74261: PUSH
74262: LD_VAR 0 2
74266: PUSH
74267: LD_INT 10
74269: DIVREAL
74270: ST_TO_ADDR
// time := 1 1$00 ;
74271: LD_ADDR_VAR 0 8
74275: PUSH
74276: LD_INT 2100
74278: ST_TO_ADDR
// if amount < min then
74279: LD_VAR 0 9
74283: PUSH
74284: LD_VAR 0 3
74288: LESS
74289: IFFALSE 74307
// r := r * 2 else
74291: LD_ADDR_VAR 0 7
74295: PUSH
74296: LD_VAR 0 7
74300: PUSH
74301: LD_INT 2
74303: MUL
74304: ST_TO_ADDR
74305: GO 74333
// if amount > max then
74307: LD_VAR 0 9
74311: PUSH
74312: LD_VAR 0 4
74316: GREATER
74317: IFFALSE 74333
// r := r / 2 ;
74319: LD_ADDR_VAR 0 7
74323: PUSH
74324: LD_VAR 0 7
74328: PUSH
74329: LD_INT 2
74331: DIVREAL
74332: ST_TO_ADDR
// time := time / r ;
74333: LD_ADDR_VAR 0 8
74337: PUSH
74338: LD_VAR 0 8
74342: PUSH
74343: LD_VAR 0 7
74347: DIVREAL
74348: ST_TO_ADDR
// if time < 0 then
74349: LD_VAR 0 8
74353: PUSH
74354: LD_INT 0
74356: LESS
74357: IFFALSE 74374
// time := time * - 1 ;
74359: LD_ADDR_VAR 0 8
74363: PUSH
74364: LD_VAR 0 8
74368: PUSH
74369: LD_INT 1
74371: NEG
74372: MUL
74373: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
74374: LD_VAR 0 8
74378: PUSH
74379: LD_INT 35
74381: PPUSH
74382: LD_INT 875
74384: PPUSH
74385: CALL_OW 12
74389: PLUS
74390: PPUSH
74391: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
74395: LD_INT 1
74397: PPUSH
74398: LD_INT 5
74400: PPUSH
74401: CALL_OW 12
74405: PPUSH
74406: LD_VAR 0 1
74410: PPUSH
74411: LD_INT 1
74413: PPUSH
74414: CALL_OW 55
// end ;
74418: GO 74231
// end ;
74420: LD_VAR 0 5
74424: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
74425: LD_INT 0
74427: PPUSH
74428: PPUSH
74429: PPUSH
74430: PPUSH
74431: PPUSH
74432: PPUSH
74433: PPUSH
74434: PPUSH
// if not turrets or not factories then
74435: LD_VAR 0 1
74439: NOT
74440: PUSH
74441: LD_VAR 0 2
74445: NOT
74446: OR
74447: IFFALSE 74451
// exit ;
74449: GO 74758
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
74451: LD_ADDR_VAR 0 10
74455: PUSH
74456: LD_INT 5
74458: PUSH
74459: LD_INT 6
74461: PUSH
74462: EMPTY
74463: LIST
74464: LIST
74465: PUSH
74466: LD_INT 2
74468: PUSH
74469: LD_INT 4
74471: PUSH
74472: EMPTY
74473: LIST
74474: LIST
74475: PUSH
74476: LD_INT 3
74478: PUSH
74479: LD_INT 5
74481: PUSH
74482: EMPTY
74483: LIST
74484: LIST
74485: PUSH
74486: EMPTY
74487: LIST
74488: LIST
74489: LIST
74490: PUSH
74491: LD_INT 24
74493: PUSH
74494: LD_INT 25
74496: PUSH
74497: EMPTY
74498: LIST
74499: LIST
74500: PUSH
74501: LD_INT 23
74503: PUSH
74504: LD_INT 27
74506: PUSH
74507: EMPTY
74508: LIST
74509: LIST
74510: PUSH
74511: EMPTY
74512: LIST
74513: LIST
74514: PUSH
74515: LD_INT 42
74517: PUSH
74518: LD_INT 43
74520: PUSH
74521: EMPTY
74522: LIST
74523: LIST
74524: PUSH
74525: LD_INT 44
74527: PUSH
74528: LD_INT 46
74530: PUSH
74531: EMPTY
74532: LIST
74533: LIST
74534: PUSH
74535: LD_INT 45
74537: PUSH
74538: LD_INT 47
74540: PUSH
74541: EMPTY
74542: LIST
74543: LIST
74544: PUSH
74545: EMPTY
74546: LIST
74547: LIST
74548: LIST
74549: PUSH
74550: EMPTY
74551: LIST
74552: LIST
74553: LIST
74554: ST_TO_ADDR
// result := [ ] ;
74555: LD_ADDR_VAR 0 3
74559: PUSH
74560: EMPTY
74561: ST_TO_ADDR
// for i in turrets do
74562: LD_ADDR_VAR 0 4
74566: PUSH
74567: LD_VAR 0 1
74571: PUSH
74572: FOR_IN
74573: IFFALSE 74756
// begin nat := GetNation ( i ) ;
74575: LD_ADDR_VAR 0 7
74579: PUSH
74580: LD_VAR 0 4
74584: PPUSH
74585: CALL_OW 248
74589: ST_TO_ADDR
// weapon := 0 ;
74590: LD_ADDR_VAR 0 8
74594: PUSH
74595: LD_INT 0
74597: ST_TO_ADDR
// if not nat then
74598: LD_VAR 0 7
74602: NOT
74603: IFFALSE 74607
// continue ;
74605: GO 74572
// for j in list [ nat ] do
74607: LD_ADDR_VAR 0 5
74611: PUSH
74612: LD_VAR 0 10
74616: PUSH
74617: LD_VAR 0 7
74621: ARRAY
74622: PUSH
74623: FOR_IN
74624: IFFALSE 74665
// if GetBWeapon ( i ) = j [ 1 ] then
74626: LD_VAR 0 4
74630: PPUSH
74631: CALL_OW 269
74635: PUSH
74636: LD_VAR 0 5
74640: PUSH
74641: LD_INT 1
74643: ARRAY
74644: EQUAL
74645: IFFALSE 74663
// begin weapon := j [ 2 ] ;
74647: LD_ADDR_VAR 0 8
74651: PUSH
74652: LD_VAR 0 5
74656: PUSH
74657: LD_INT 2
74659: ARRAY
74660: ST_TO_ADDR
// break ;
74661: GO 74665
// end ;
74663: GO 74623
74665: POP
74666: POP
// if not weapon then
74667: LD_VAR 0 8
74671: NOT
74672: IFFALSE 74676
// continue ;
74674: GO 74572
// for k in factories do
74676: LD_ADDR_VAR 0 6
74680: PUSH
74681: LD_VAR 0 2
74685: PUSH
74686: FOR_IN
74687: IFFALSE 74752
// begin weapons := AvailableWeaponList ( k ) ;
74689: LD_ADDR_VAR 0 9
74693: PUSH
74694: LD_VAR 0 6
74698: PPUSH
74699: CALL_OW 478
74703: ST_TO_ADDR
// if not weapons then
74704: LD_VAR 0 9
74708: NOT
74709: IFFALSE 74713
// continue ;
74711: GO 74686
// if weapon in weapons then
74713: LD_VAR 0 8
74717: PUSH
74718: LD_VAR 0 9
74722: IN
74723: IFFALSE 74750
// begin result := [ i , weapon ] ;
74725: LD_ADDR_VAR 0 3
74729: PUSH
74730: LD_VAR 0 4
74734: PUSH
74735: LD_VAR 0 8
74739: PUSH
74740: EMPTY
74741: LIST
74742: LIST
74743: ST_TO_ADDR
// exit ;
74744: POP
74745: POP
74746: POP
74747: POP
74748: GO 74758
// end ; end ;
74750: GO 74686
74752: POP
74753: POP
// end ;
74754: GO 74572
74756: POP
74757: POP
// end ;
74758: LD_VAR 0 3
74762: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
74763: LD_INT 0
74765: PPUSH
// if not side or side > 8 then
74766: LD_VAR 0 3
74770: NOT
74771: PUSH
74772: LD_VAR 0 3
74776: PUSH
74777: LD_INT 8
74779: GREATER
74780: OR
74781: IFFALSE 74785
// exit ;
74783: GO 74844
// if not range then
74785: LD_VAR 0 4
74789: NOT
74790: IFFALSE 74801
// range := - 12 ;
74792: LD_ADDR_VAR 0 4
74796: PUSH
74797: LD_INT 12
74799: NEG
74800: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74801: LD_VAR 0 1
74805: PPUSH
74806: LD_VAR 0 2
74810: PPUSH
74811: LD_VAR 0 3
74815: PPUSH
74816: LD_VAR 0 4
74820: PPUSH
74821: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74825: LD_VAR 0 1
74829: PPUSH
74830: LD_VAR 0 2
74834: PPUSH
74835: LD_VAR 0 3
74839: PPUSH
74840: CALL_OW 331
// end ;
74844: LD_VAR 0 5
74848: RET
// export function Video ( mode ) ; begin
74849: LD_INT 0
74851: PPUSH
// ingame_video = mode ;
74852: LD_ADDR_OWVAR 52
74856: PUSH
74857: LD_VAR 0 1
74861: ST_TO_ADDR
// interface_hidden = mode ;
74862: LD_ADDR_OWVAR 54
74866: PUSH
74867: LD_VAR 0 1
74871: ST_TO_ADDR
// end ;
74872: LD_VAR 0 2
74876: RET
// export function Join ( array , element ) ; begin
74877: LD_INT 0
74879: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74880: LD_ADDR_VAR 0 3
74884: PUSH
74885: LD_VAR 0 1
74889: PPUSH
74890: LD_VAR 0 1
74894: PUSH
74895: LD_INT 1
74897: PLUS
74898: PPUSH
74899: LD_VAR 0 2
74903: PPUSH
74904: CALL_OW 1
74908: ST_TO_ADDR
// end ;
74909: LD_VAR 0 3
74913: RET
// export function JoinUnion ( array , element ) ; begin
74914: LD_INT 0
74916: PPUSH
// result := array union element ;
74917: LD_ADDR_VAR 0 3
74921: PUSH
74922: LD_VAR 0 1
74926: PUSH
74927: LD_VAR 0 2
74931: UNION
74932: ST_TO_ADDR
// end ;
74933: LD_VAR 0 3
74937: RET
// export function GetBehemoths ( side ) ; begin
74938: LD_INT 0
74940: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
74941: LD_ADDR_VAR 0 2
74945: PUSH
74946: LD_INT 22
74948: PUSH
74949: LD_VAR 0 1
74953: PUSH
74954: EMPTY
74955: LIST
74956: LIST
74957: PUSH
74958: LD_INT 31
74960: PUSH
74961: LD_INT 25
74963: PUSH
74964: EMPTY
74965: LIST
74966: LIST
74967: PUSH
74968: EMPTY
74969: LIST
74970: LIST
74971: PPUSH
74972: CALL_OW 69
74976: ST_TO_ADDR
// end ;
74977: LD_VAR 0 2
74981: RET
// export function Shuffle ( array ) ; var i , index ; begin
74982: LD_INT 0
74984: PPUSH
74985: PPUSH
74986: PPUSH
// result := [ ] ;
74987: LD_ADDR_VAR 0 2
74991: PUSH
74992: EMPTY
74993: ST_TO_ADDR
// if not array then
74994: LD_VAR 0 1
74998: NOT
74999: IFFALSE 75003
// exit ;
75001: GO 75102
// Randomize ;
75003: CALL_OW 10
// for i = array downto 1 do
75007: LD_ADDR_VAR 0 3
75011: PUSH
75012: DOUBLE
75013: LD_VAR 0 1
75017: INC
75018: ST_TO_ADDR
75019: LD_INT 1
75021: PUSH
75022: FOR_DOWNTO
75023: IFFALSE 75100
// begin index := rand ( 1 , array ) ;
75025: LD_ADDR_VAR 0 4
75029: PUSH
75030: LD_INT 1
75032: PPUSH
75033: LD_VAR 0 1
75037: PPUSH
75038: CALL_OW 12
75042: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
75043: LD_ADDR_VAR 0 2
75047: PUSH
75048: LD_VAR 0 2
75052: PPUSH
75053: LD_VAR 0 2
75057: PUSH
75058: LD_INT 1
75060: PLUS
75061: PPUSH
75062: LD_VAR 0 1
75066: PUSH
75067: LD_VAR 0 4
75071: ARRAY
75072: PPUSH
75073: CALL_OW 2
75077: ST_TO_ADDR
// array := Delete ( array , index ) ;
75078: LD_ADDR_VAR 0 1
75082: PUSH
75083: LD_VAR 0 1
75087: PPUSH
75088: LD_VAR 0 4
75092: PPUSH
75093: CALL_OW 3
75097: ST_TO_ADDR
// end ;
75098: GO 75022
75100: POP
75101: POP
// end ;
75102: LD_VAR 0 2
75106: RET
// export function GetBaseMaterials ( base ) ; begin
75107: LD_INT 0
75109: PPUSH
// result := [ 0 , 0 , 0 ] ;
75110: LD_ADDR_VAR 0 2
75114: PUSH
75115: LD_INT 0
75117: PUSH
75118: LD_INT 0
75120: PUSH
75121: LD_INT 0
75123: PUSH
75124: EMPTY
75125: LIST
75126: LIST
75127: LIST
75128: ST_TO_ADDR
// if not base then
75129: LD_VAR 0 1
75133: NOT
75134: IFFALSE 75138
// exit ;
75136: GO 75187
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
75138: LD_ADDR_VAR 0 2
75142: PUSH
75143: LD_VAR 0 1
75147: PPUSH
75148: LD_INT 1
75150: PPUSH
75151: CALL_OW 275
75155: PUSH
75156: LD_VAR 0 1
75160: PPUSH
75161: LD_INT 2
75163: PPUSH
75164: CALL_OW 275
75168: PUSH
75169: LD_VAR 0 1
75173: PPUSH
75174: LD_INT 3
75176: PPUSH
75177: CALL_OW 275
75181: PUSH
75182: EMPTY
75183: LIST
75184: LIST
75185: LIST
75186: ST_TO_ADDR
// end ;
75187: LD_VAR 0 2
75191: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
75192: LD_INT 0
75194: PPUSH
75195: PPUSH
// result := array ;
75196: LD_ADDR_VAR 0 3
75200: PUSH
75201: LD_VAR 0 1
75205: ST_TO_ADDR
// if size > 0 then
75206: LD_VAR 0 2
75210: PUSH
75211: LD_INT 0
75213: GREATER
75214: IFFALSE 75260
// for i := array downto size do
75216: LD_ADDR_VAR 0 4
75220: PUSH
75221: DOUBLE
75222: LD_VAR 0 1
75226: INC
75227: ST_TO_ADDR
75228: LD_VAR 0 2
75232: PUSH
75233: FOR_DOWNTO
75234: IFFALSE 75258
// result := Delete ( result , result ) ;
75236: LD_ADDR_VAR 0 3
75240: PUSH
75241: LD_VAR 0 3
75245: PPUSH
75246: LD_VAR 0 3
75250: PPUSH
75251: CALL_OW 3
75255: ST_TO_ADDR
75256: GO 75233
75258: POP
75259: POP
// end ;
75260: LD_VAR 0 3
75264: RET
// export function ComExit ( unit ) ; var tmp ; begin
75265: LD_INT 0
75267: PPUSH
75268: PPUSH
// if not IsInUnit ( unit ) then
75269: LD_VAR 0 1
75273: PPUSH
75274: CALL_OW 310
75278: NOT
75279: IFFALSE 75283
// exit ;
75281: GO 75343
// tmp := IsInUnit ( unit ) ;
75283: LD_ADDR_VAR 0 3
75287: PUSH
75288: LD_VAR 0 1
75292: PPUSH
75293: CALL_OW 310
75297: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
75298: LD_VAR 0 3
75302: PPUSH
75303: CALL_OW 247
75307: PUSH
75308: LD_INT 2
75310: EQUAL
75311: IFFALSE 75324
// ComExitVehicle ( unit ) else
75313: LD_VAR 0 1
75317: PPUSH
75318: CALL_OW 121
75322: GO 75333
// ComExitBuilding ( unit ) ;
75324: LD_VAR 0 1
75328: PPUSH
75329: CALL_OW 122
// result := tmp ;
75333: LD_ADDR_VAR 0 2
75337: PUSH
75338: LD_VAR 0 3
75342: ST_TO_ADDR
// end ;
75343: LD_VAR 0 2
75347: RET
// export function ComExitAll ( units ) ; var i ; begin
75348: LD_INT 0
75350: PPUSH
75351: PPUSH
// if not units then
75352: LD_VAR 0 1
75356: NOT
75357: IFFALSE 75361
// exit ;
75359: GO 75387
// for i in units do
75361: LD_ADDR_VAR 0 3
75365: PUSH
75366: LD_VAR 0 1
75370: PUSH
75371: FOR_IN
75372: IFFALSE 75385
// ComExit ( i ) ;
75374: LD_VAR 0 3
75378: PPUSH
75379: CALL 75265 0 1
75383: GO 75371
75385: POP
75386: POP
// end ;
75387: LD_VAR 0 2
75391: RET
// export function ResetHc ; begin
75392: LD_INT 0
75394: PPUSH
// InitHc ;
75395: CALL_OW 19
// hc_importance := 0 ;
75399: LD_ADDR_OWVAR 32
75403: PUSH
75404: LD_INT 0
75406: ST_TO_ADDR
// end ;
75407: LD_VAR 0 1
75411: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
75412: LD_INT 0
75414: PPUSH
75415: PPUSH
75416: PPUSH
// _x := ( x1 + x2 ) div 2 ;
75417: LD_ADDR_VAR 0 6
75421: PUSH
75422: LD_VAR 0 1
75426: PUSH
75427: LD_VAR 0 3
75431: PLUS
75432: PUSH
75433: LD_INT 2
75435: DIV
75436: ST_TO_ADDR
// if _x < 0 then
75437: LD_VAR 0 6
75441: PUSH
75442: LD_INT 0
75444: LESS
75445: IFFALSE 75462
// _x := _x * - 1 ;
75447: LD_ADDR_VAR 0 6
75451: PUSH
75452: LD_VAR 0 6
75456: PUSH
75457: LD_INT 1
75459: NEG
75460: MUL
75461: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
75462: LD_ADDR_VAR 0 7
75466: PUSH
75467: LD_VAR 0 2
75471: PUSH
75472: LD_VAR 0 4
75476: PLUS
75477: PUSH
75478: LD_INT 2
75480: DIV
75481: ST_TO_ADDR
// if _y < 0 then
75482: LD_VAR 0 7
75486: PUSH
75487: LD_INT 0
75489: LESS
75490: IFFALSE 75507
// _y := _y * - 1 ;
75492: LD_ADDR_VAR 0 7
75496: PUSH
75497: LD_VAR 0 7
75501: PUSH
75502: LD_INT 1
75504: NEG
75505: MUL
75506: ST_TO_ADDR
// result := [ _x , _y ] ;
75507: LD_ADDR_VAR 0 5
75511: PUSH
75512: LD_VAR 0 6
75516: PUSH
75517: LD_VAR 0 7
75521: PUSH
75522: EMPTY
75523: LIST
75524: LIST
75525: ST_TO_ADDR
// end ;
75526: LD_VAR 0 5
75530: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
75531: LD_INT 0
75533: PPUSH
75534: PPUSH
75535: PPUSH
75536: PPUSH
// task := GetTaskList ( unit ) ;
75537: LD_ADDR_VAR 0 7
75541: PUSH
75542: LD_VAR 0 1
75546: PPUSH
75547: CALL_OW 437
75551: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
75552: LD_VAR 0 7
75556: NOT
75557: PUSH
75558: LD_VAR 0 1
75562: PPUSH
75563: LD_VAR 0 2
75567: PPUSH
75568: CALL_OW 308
75572: NOT
75573: AND
75574: IFFALSE 75578
// exit ;
75576: GO 75696
// if IsInArea ( unit , area ) then
75578: LD_VAR 0 1
75582: PPUSH
75583: LD_VAR 0 2
75587: PPUSH
75588: CALL_OW 308
75592: IFFALSE 75610
// begin ComMoveToArea ( unit , goAway ) ;
75594: LD_VAR 0 1
75598: PPUSH
75599: LD_VAR 0 3
75603: PPUSH
75604: CALL_OW 113
// exit ;
75608: GO 75696
// end ; if task [ 1 ] [ 1 ] <> M then
75610: LD_VAR 0 7
75614: PUSH
75615: LD_INT 1
75617: ARRAY
75618: PUSH
75619: LD_INT 1
75621: ARRAY
75622: PUSH
75623: LD_STRING M
75625: NONEQUAL
75626: IFFALSE 75630
// exit ;
75628: GO 75696
// x := task [ 1 ] [ 2 ] ;
75630: LD_ADDR_VAR 0 5
75634: PUSH
75635: LD_VAR 0 7
75639: PUSH
75640: LD_INT 1
75642: ARRAY
75643: PUSH
75644: LD_INT 2
75646: ARRAY
75647: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
75648: LD_ADDR_VAR 0 6
75652: PUSH
75653: LD_VAR 0 7
75657: PUSH
75658: LD_INT 1
75660: ARRAY
75661: PUSH
75662: LD_INT 3
75664: ARRAY
75665: ST_TO_ADDR
// if InArea ( x , y , area ) then
75666: LD_VAR 0 5
75670: PPUSH
75671: LD_VAR 0 6
75675: PPUSH
75676: LD_VAR 0 2
75680: PPUSH
75681: CALL_OW 309
75685: IFFALSE 75696
// ComStop ( unit ) ;
75687: LD_VAR 0 1
75691: PPUSH
75692: CALL_OW 141
// end ;
75696: LD_VAR 0 4
75700: RET
// export function Abs ( value ) ; begin
75701: LD_INT 0
75703: PPUSH
// result := value ;
75704: LD_ADDR_VAR 0 2
75708: PUSH
75709: LD_VAR 0 1
75713: ST_TO_ADDR
// if value < 0 then
75714: LD_VAR 0 1
75718: PUSH
75719: LD_INT 0
75721: LESS
75722: IFFALSE 75739
// result := value * - 1 ;
75724: LD_ADDR_VAR 0 2
75728: PUSH
75729: LD_VAR 0 1
75733: PUSH
75734: LD_INT 1
75736: NEG
75737: MUL
75738: ST_TO_ADDR
// end ;
75739: LD_VAR 0 2
75743: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
75744: LD_INT 0
75746: PPUSH
75747: PPUSH
75748: PPUSH
75749: PPUSH
75750: PPUSH
75751: PPUSH
75752: PPUSH
75753: PPUSH
// if not unit or not building then
75754: LD_VAR 0 1
75758: NOT
75759: PUSH
75760: LD_VAR 0 2
75764: NOT
75765: OR
75766: IFFALSE 75770
// exit ;
75768: GO 75996
// x := GetX ( building ) ;
75770: LD_ADDR_VAR 0 4
75774: PUSH
75775: LD_VAR 0 2
75779: PPUSH
75780: CALL_OW 250
75784: ST_TO_ADDR
// y := GetY ( building ) ;
75785: LD_ADDR_VAR 0 6
75789: PUSH
75790: LD_VAR 0 2
75794: PPUSH
75795: CALL_OW 251
75799: ST_TO_ADDR
// d := GetDir ( building ) ;
75800: LD_ADDR_VAR 0 8
75804: PUSH
75805: LD_VAR 0 2
75809: PPUSH
75810: CALL_OW 254
75814: ST_TO_ADDR
// r := 4 ;
75815: LD_ADDR_VAR 0 9
75819: PUSH
75820: LD_INT 4
75822: ST_TO_ADDR
// for i := 1 to 5 do
75823: LD_ADDR_VAR 0 10
75827: PUSH
75828: DOUBLE
75829: LD_INT 1
75831: DEC
75832: ST_TO_ADDR
75833: LD_INT 5
75835: PUSH
75836: FOR_TO
75837: IFFALSE 75994
// begin _x := ShiftX ( x , d , r + i ) ;
75839: LD_ADDR_VAR 0 5
75843: PUSH
75844: LD_VAR 0 4
75848: PPUSH
75849: LD_VAR 0 8
75853: PPUSH
75854: LD_VAR 0 9
75858: PUSH
75859: LD_VAR 0 10
75863: PLUS
75864: PPUSH
75865: CALL_OW 272
75869: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75870: LD_ADDR_VAR 0 7
75874: PUSH
75875: LD_VAR 0 6
75879: PPUSH
75880: LD_VAR 0 8
75884: PPUSH
75885: LD_VAR 0 9
75889: PUSH
75890: LD_VAR 0 10
75894: PLUS
75895: PPUSH
75896: CALL_OW 273
75900: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75901: LD_VAR 0 5
75905: PPUSH
75906: LD_VAR 0 7
75910: PPUSH
75911: CALL_OW 488
75915: PUSH
75916: LD_VAR 0 5
75920: PPUSH
75921: LD_VAR 0 7
75925: PPUSH
75926: CALL_OW 428
75930: PPUSH
75931: CALL_OW 247
75935: PUSH
75936: LD_INT 3
75938: PUSH
75939: LD_INT 2
75941: PUSH
75942: EMPTY
75943: LIST
75944: LIST
75945: IN
75946: NOT
75947: AND
75948: IFFALSE 75992
// begin ComMoveXY ( unit , _x , _y ) ;
75950: LD_VAR 0 1
75954: PPUSH
75955: LD_VAR 0 5
75959: PPUSH
75960: LD_VAR 0 7
75964: PPUSH
75965: CALL_OW 111
// result := [ _x , _y ] ;
75969: LD_ADDR_VAR 0 3
75973: PUSH
75974: LD_VAR 0 5
75978: PUSH
75979: LD_VAR 0 7
75983: PUSH
75984: EMPTY
75985: LIST
75986: LIST
75987: ST_TO_ADDR
// exit ;
75988: POP
75989: POP
75990: GO 75996
// end ; end ;
75992: GO 75836
75994: POP
75995: POP
// end ;
75996: LD_VAR 0 3
76000: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
76001: LD_INT 0
76003: PPUSH
76004: PPUSH
76005: PPUSH
// result := 0 ;
76006: LD_ADDR_VAR 0 3
76010: PUSH
76011: LD_INT 0
76013: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
76014: LD_VAR 0 1
76018: PUSH
76019: LD_INT 0
76021: LESS
76022: PUSH
76023: LD_VAR 0 1
76027: PUSH
76028: LD_INT 8
76030: GREATER
76031: OR
76032: PUSH
76033: LD_VAR 0 2
76037: PUSH
76038: LD_INT 0
76040: LESS
76041: OR
76042: PUSH
76043: LD_VAR 0 2
76047: PUSH
76048: LD_INT 8
76050: GREATER
76051: OR
76052: IFFALSE 76056
// exit ;
76054: GO 76131
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
76056: LD_ADDR_VAR 0 4
76060: PUSH
76061: LD_INT 22
76063: PUSH
76064: LD_VAR 0 2
76068: PUSH
76069: EMPTY
76070: LIST
76071: LIST
76072: PPUSH
76073: CALL_OW 69
76077: PUSH
76078: FOR_IN
76079: IFFALSE 76129
// begin un := UnitShoot ( i ) ;
76081: LD_ADDR_VAR 0 5
76085: PUSH
76086: LD_VAR 0 4
76090: PPUSH
76091: CALL_OW 504
76095: ST_TO_ADDR
// if GetSide ( un ) = side1 then
76096: LD_VAR 0 5
76100: PPUSH
76101: CALL_OW 255
76105: PUSH
76106: LD_VAR 0 1
76110: EQUAL
76111: IFFALSE 76127
// begin result := un ;
76113: LD_ADDR_VAR 0 3
76117: PUSH
76118: LD_VAR 0 5
76122: ST_TO_ADDR
// exit ;
76123: POP
76124: POP
76125: GO 76131
// end ; end ;
76127: GO 76078
76129: POP
76130: POP
// end ;
76131: LD_VAR 0 3
76135: RET
// export function GetCargoBay ( units ) ; begin
76136: LD_INT 0
76138: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
76139: LD_ADDR_VAR 0 2
76143: PUSH
76144: LD_VAR 0 1
76148: PPUSH
76149: LD_INT 2
76151: PUSH
76152: LD_INT 34
76154: PUSH
76155: LD_INT 12
76157: PUSH
76158: EMPTY
76159: LIST
76160: LIST
76161: PUSH
76162: LD_INT 34
76164: PUSH
76165: LD_INT 51
76167: PUSH
76168: EMPTY
76169: LIST
76170: LIST
76171: PUSH
76172: LD_INT 34
76174: PUSH
76175: LD_INT 32
76177: PUSH
76178: EMPTY
76179: LIST
76180: LIST
76181: PUSH
76182: LD_INT 34
76184: PUSH
76185: LD_EXP 46
76189: PUSH
76190: EMPTY
76191: LIST
76192: LIST
76193: PUSH
76194: EMPTY
76195: LIST
76196: LIST
76197: LIST
76198: LIST
76199: LIST
76200: PPUSH
76201: CALL_OW 72
76205: ST_TO_ADDR
// end ;
76206: LD_VAR 0 2
76210: RET
// export function Negate ( value ) ; begin
76211: LD_INT 0
76213: PPUSH
// result := not value ;
76214: LD_ADDR_VAR 0 2
76218: PUSH
76219: LD_VAR 0 1
76223: NOT
76224: ST_TO_ADDR
// end ;
76225: LD_VAR 0 2
76229: RET
// export function Inc ( value ) ; begin
76230: LD_INT 0
76232: PPUSH
// result := value + 1 ;
76233: LD_ADDR_VAR 0 2
76237: PUSH
76238: LD_VAR 0 1
76242: PUSH
76243: LD_INT 1
76245: PLUS
76246: ST_TO_ADDR
// end ;
76247: LD_VAR 0 2
76251: RET
// export function Dec ( value ) ; begin
76252: LD_INT 0
76254: PPUSH
// result := value - 1 ;
76255: LD_ADDR_VAR 0 2
76259: PUSH
76260: LD_VAR 0 1
76264: PUSH
76265: LD_INT 1
76267: MINUS
76268: ST_TO_ADDR
// end ;
76269: LD_VAR 0 2
76273: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
76274: LD_INT 0
76276: PPUSH
76277: PPUSH
76278: PPUSH
76279: PPUSH
76280: PPUSH
76281: PPUSH
76282: PPUSH
76283: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
76284: LD_VAR 0 1
76288: PPUSH
76289: LD_VAR 0 2
76293: PPUSH
76294: CALL_OW 488
76298: NOT
76299: PUSH
76300: LD_VAR 0 3
76304: PPUSH
76305: LD_VAR 0 4
76309: PPUSH
76310: CALL_OW 488
76314: NOT
76315: OR
76316: IFFALSE 76329
// begin result := - 1 ;
76318: LD_ADDR_VAR 0 5
76322: PUSH
76323: LD_INT 1
76325: NEG
76326: ST_TO_ADDR
// exit ;
76327: GO 76564
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
76329: LD_ADDR_VAR 0 12
76333: PUSH
76334: LD_VAR 0 1
76338: PPUSH
76339: LD_VAR 0 2
76343: PPUSH
76344: LD_VAR 0 3
76348: PPUSH
76349: LD_VAR 0 4
76353: PPUSH
76354: CALL 75412 0 4
76358: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
76359: LD_ADDR_VAR 0 11
76363: PUSH
76364: LD_VAR 0 1
76368: PPUSH
76369: LD_VAR 0 2
76373: PPUSH
76374: LD_VAR 0 12
76378: PUSH
76379: LD_INT 1
76381: ARRAY
76382: PPUSH
76383: LD_VAR 0 12
76387: PUSH
76388: LD_INT 2
76390: ARRAY
76391: PPUSH
76392: CALL_OW 298
76396: ST_TO_ADDR
// distance := 9999 ;
76397: LD_ADDR_VAR 0 10
76401: PUSH
76402: LD_INT 9999
76404: ST_TO_ADDR
// for i := 0 to 5 do
76405: LD_ADDR_VAR 0 6
76409: PUSH
76410: DOUBLE
76411: LD_INT 0
76413: DEC
76414: ST_TO_ADDR
76415: LD_INT 5
76417: PUSH
76418: FOR_TO
76419: IFFALSE 76562
// begin _x := ShiftX ( x1 , i , centerDist ) ;
76421: LD_ADDR_VAR 0 7
76425: PUSH
76426: LD_VAR 0 1
76430: PPUSH
76431: LD_VAR 0 6
76435: PPUSH
76436: LD_VAR 0 11
76440: PPUSH
76441: CALL_OW 272
76445: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
76446: LD_ADDR_VAR 0 8
76450: PUSH
76451: LD_VAR 0 2
76455: PPUSH
76456: LD_VAR 0 6
76460: PPUSH
76461: LD_VAR 0 11
76465: PPUSH
76466: CALL_OW 273
76470: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
76471: LD_VAR 0 7
76475: PPUSH
76476: LD_VAR 0 8
76480: PPUSH
76481: CALL_OW 488
76485: NOT
76486: IFFALSE 76490
// continue ;
76488: GO 76418
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
76490: LD_ADDR_VAR 0 9
76494: PUSH
76495: LD_VAR 0 12
76499: PUSH
76500: LD_INT 1
76502: ARRAY
76503: PPUSH
76504: LD_VAR 0 12
76508: PUSH
76509: LD_INT 2
76511: ARRAY
76512: PPUSH
76513: LD_VAR 0 7
76517: PPUSH
76518: LD_VAR 0 8
76522: PPUSH
76523: CALL_OW 298
76527: ST_TO_ADDR
// if tmp < distance then
76528: LD_VAR 0 9
76532: PUSH
76533: LD_VAR 0 10
76537: LESS
76538: IFFALSE 76560
// begin result := i ;
76540: LD_ADDR_VAR 0 5
76544: PUSH
76545: LD_VAR 0 6
76549: ST_TO_ADDR
// distance := tmp ;
76550: LD_ADDR_VAR 0 10
76554: PUSH
76555: LD_VAR 0 9
76559: ST_TO_ADDR
// end ; end ;
76560: GO 76418
76562: POP
76563: POP
// end ;
76564: LD_VAR 0 5
76568: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76569: LD_INT 0
76571: PPUSH
76572: PPUSH
// if not driver or not IsInUnit ( driver ) then
76573: LD_VAR 0 1
76577: NOT
76578: PUSH
76579: LD_VAR 0 1
76583: PPUSH
76584: CALL_OW 310
76588: NOT
76589: OR
76590: IFFALSE 76594
// exit ;
76592: GO 76684
// vehicle := IsInUnit ( driver ) ;
76594: LD_ADDR_VAR 0 3
76598: PUSH
76599: LD_VAR 0 1
76603: PPUSH
76604: CALL_OW 310
76608: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76609: LD_VAR 0 1
76613: PPUSH
76614: LD_STRING \
76616: PUSH
76617: LD_INT 0
76619: PUSH
76620: LD_INT 0
76622: PUSH
76623: LD_INT 0
76625: PUSH
76626: LD_INT 0
76628: PUSH
76629: LD_INT 0
76631: PUSH
76632: LD_INT 0
76634: PUSH
76635: EMPTY
76636: LIST
76637: LIST
76638: LIST
76639: LIST
76640: LIST
76641: LIST
76642: LIST
76643: PUSH
76644: LD_STRING E
76646: PUSH
76647: LD_INT 0
76649: PUSH
76650: LD_INT 0
76652: PUSH
76653: LD_VAR 0 3
76657: PUSH
76658: LD_INT 0
76660: PUSH
76661: LD_INT 0
76663: PUSH
76664: LD_INT 0
76666: PUSH
76667: EMPTY
76668: LIST
76669: LIST
76670: LIST
76671: LIST
76672: LIST
76673: LIST
76674: LIST
76675: PUSH
76676: EMPTY
76677: LIST
76678: LIST
76679: PPUSH
76680: CALL_OW 446
// end ;
76684: LD_VAR 0 2
76688: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76689: LD_INT 0
76691: PPUSH
76692: PPUSH
// if not driver or not IsInUnit ( driver ) then
76693: LD_VAR 0 1
76697: NOT
76698: PUSH
76699: LD_VAR 0 1
76703: PPUSH
76704: CALL_OW 310
76708: NOT
76709: OR
76710: IFFALSE 76714
// exit ;
76712: GO 76804
// vehicle := IsInUnit ( driver ) ;
76714: LD_ADDR_VAR 0 3
76718: PUSH
76719: LD_VAR 0 1
76723: PPUSH
76724: CALL_OW 310
76728: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76729: LD_VAR 0 1
76733: PPUSH
76734: LD_STRING \
76736: PUSH
76737: LD_INT 0
76739: PUSH
76740: LD_INT 0
76742: PUSH
76743: LD_INT 0
76745: PUSH
76746: LD_INT 0
76748: PUSH
76749: LD_INT 0
76751: PUSH
76752: LD_INT 0
76754: PUSH
76755: EMPTY
76756: LIST
76757: LIST
76758: LIST
76759: LIST
76760: LIST
76761: LIST
76762: LIST
76763: PUSH
76764: LD_STRING E
76766: PUSH
76767: LD_INT 0
76769: PUSH
76770: LD_INT 0
76772: PUSH
76773: LD_VAR 0 3
76777: PUSH
76778: LD_INT 0
76780: PUSH
76781: LD_INT 0
76783: PUSH
76784: LD_INT 0
76786: PUSH
76787: EMPTY
76788: LIST
76789: LIST
76790: LIST
76791: LIST
76792: LIST
76793: LIST
76794: LIST
76795: PUSH
76796: EMPTY
76797: LIST
76798: LIST
76799: PPUSH
76800: CALL_OW 447
// end ;
76804: LD_VAR 0 2
76808: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
76809: LD_INT 0
76811: PPUSH
76812: PPUSH
76813: PPUSH
// tmp := [ ] ;
76814: LD_ADDR_VAR 0 5
76818: PUSH
76819: EMPTY
76820: ST_TO_ADDR
// for i in units do
76821: LD_ADDR_VAR 0 4
76825: PUSH
76826: LD_VAR 0 1
76830: PUSH
76831: FOR_IN
76832: IFFALSE 76870
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
76834: LD_ADDR_VAR 0 5
76838: PUSH
76839: LD_VAR 0 5
76843: PPUSH
76844: LD_VAR 0 5
76848: PUSH
76849: LD_INT 1
76851: PLUS
76852: PPUSH
76853: LD_VAR 0 4
76857: PPUSH
76858: CALL_OW 256
76862: PPUSH
76863: CALL_OW 2
76867: ST_TO_ADDR
76868: GO 76831
76870: POP
76871: POP
// if not tmp then
76872: LD_VAR 0 5
76876: NOT
76877: IFFALSE 76881
// exit ;
76879: GO 76929
// if asc then
76881: LD_VAR 0 2
76885: IFFALSE 76909
// result := SortListByListAsc ( units , tmp ) else
76887: LD_ADDR_VAR 0 3
76891: PUSH
76892: LD_VAR 0 1
76896: PPUSH
76897: LD_VAR 0 5
76901: PPUSH
76902: CALL_OW 76
76906: ST_TO_ADDR
76907: GO 76929
// result := SortListByListDesc ( units , tmp ) ;
76909: LD_ADDR_VAR 0 3
76913: PUSH
76914: LD_VAR 0 1
76918: PPUSH
76919: LD_VAR 0 5
76923: PPUSH
76924: CALL_OW 77
76928: ST_TO_ADDR
// end ;
76929: LD_VAR 0 3
76933: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76934: LD_INT 0
76936: PPUSH
76937: PPUSH
// task := GetTaskList ( mech ) ;
76938: LD_ADDR_VAR 0 4
76942: PUSH
76943: LD_VAR 0 1
76947: PPUSH
76948: CALL_OW 437
76952: ST_TO_ADDR
// if not task then
76953: LD_VAR 0 4
76957: NOT
76958: IFFALSE 76962
// exit ;
76960: GO 77004
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76962: LD_ADDR_VAR 0 3
76966: PUSH
76967: LD_VAR 0 4
76971: PUSH
76972: LD_INT 1
76974: ARRAY
76975: PUSH
76976: LD_INT 1
76978: ARRAY
76979: PUSH
76980: LD_STRING r
76982: EQUAL
76983: PUSH
76984: LD_VAR 0 4
76988: PUSH
76989: LD_INT 1
76991: ARRAY
76992: PUSH
76993: LD_INT 4
76995: ARRAY
76996: PUSH
76997: LD_VAR 0 2
77001: EQUAL
77002: AND
77003: ST_TO_ADDR
// end ;
77004: LD_VAR 0 3
77008: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
77009: LD_INT 0
77011: PPUSH
// SetDir ( unit , d ) ;
77012: LD_VAR 0 1
77016: PPUSH
77017: LD_VAR 0 4
77021: PPUSH
77022: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
77026: LD_VAR 0 1
77030: PPUSH
77031: LD_VAR 0 2
77035: PPUSH
77036: LD_VAR 0 3
77040: PPUSH
77041: LD_VAR 0 5
77045: PPUSH
77046: CALL_OW 48
// end ;
77050: LD_VAR 0 6
77054: RET
// export function ToNaturalNumber ( number ) ; begin
77055: LD_INT 0
77057: PPUSH
// result := number div 1 ;
77058: LD_ADDR_VAR 0 2
77062: PUSH
77063: LD_VAR 0 1
77067: PUSH
77068: LD_INT 1
77070: DIV
77071: ST_TO_ADDR
// if number < 0 then
77072: LD_VAR 0 1
77076: PUSH
77077: LD_INT 0
77079: LESS
77080: IFFALSE 77090
// result := 0 ;
77082: LD_ADDR_VAR 0 2
77086: PUSH
77087: LD_INT 0
77089: ST_TO_ADDR
// end ;
77090: LD_VAR 0 2
77094: RET
// export function SortByClass ( units , class ) ; var un ; begin
77095: LD_INT 0
77097: PPUSH
77098: PPUSH
// if not units or not class then
77099: LD_VAR 0 1
77103: NOT
77104: PUSH
77105: LD_VAR 0 2
77109: NOT
77110: OR
77111: IFFALSE 77115
// exit ;
77113: GO 77210
// result := [ ] ;
77115: LD_ADDR_VAR 0 3
77119: PUSH
77120: EMPTY
77121: ST_TO_ADDR
// for un in units do
77122: LD_ADDR_VAR 0 4
77126: PUSH
77127: LD_VAR 0 1
77131: PUSH
77132: FOR_IN
77133: IFFALSE 77208
// if GetClass ( un ) = class then
77135: LD_VAR 0 4
77139: PPUSH
77140: CALL_OW 257
77144: PUSH
77145: LD_VAR 0 2
77149: EQUAL
77150: IFFALSE 77177
// result := Insert ( result , 1 , un ) else
77152: LD_ADDR_VAR 0 3
77156: PUSH
77157: LD_VAR 0 3
77161: PPUSH
77162: LD_INT 1
77164: PPUSH
77165: LD_VAR 0 4
77169: PPUSH
77170: CALL_OW 2
77174: ST_TO_ADDR
77175: GO 77206
// result := Replace ( result , result + 1 , un ) ;
77177: LD_ADDR_VAR 0 3
77181: PUSH
77182: LD_VAR 0 3
77186: PPUSH
77187: LD_VAR 0 3
77191: PUSH
77192: LD_INT 1
77194: PLUS
77195: PPUSH
77196: LD_VAR 0 4
77200: PPUSH
77201: CALL_OW 1
77205: ST_TO_ADDR
77206: GO 77132
77208: POP
77209: POP
// end ;
77210: LD_VAR 0 3
77214: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
77215: LD_INT 0
77217: PPUSH
77218: PPUSH
77219: PPUSH
77220: PPUSH
77221: PPUSH
77222: PPUSH
77223: PPUSH
// result := [ ] ;
77224: LD_ADDR_VAR 0 4
77228: PUSH
77229: EMPTY
77230: ST_TO_ADDR
// if x - r < 0 then
77231: LD_VAR 0 1
77235: PUSH
77236: LD_VAR 0 3
77240: MINUS
77241: PUSH
77242: LD_INT 0
77244: LESS
77245: IFFALSE 77257
// min_x := 0 else
77247: LD_ADDR_VAR 0 8
77251: PUSH
77252: LD_INT 0
77254: ST_TO_ADDR
77255: GO 77273
// min_x := x - r ;
77257: LD_ADDR_VAR 0 8
77261: PUSH
77262: LD_VAR 0 1
77266: PUSH
77267: LD_VAR 0 3
77271: MINUS
77272: ST_TO_ADDR
// if y - r < 0 then
77273: LD_VAR 0 2
77277: PUSH
77278: LD_VAR 0 3
77282: MINUS
77283: PUSH
77284: LD_INT 0
77286: LESS
77287: IFFALSE 77299
// min_y := 0 else
77289: LD_ADDR_VAR 0 7
77293: PUSH
77294: LD_INT 0
77296: ST_TO_ADDR
77297: GO 77315
// min_y := y - r ;
77299: LD_ADDR_VAR 0 7
77303: PUSH
77304: LD_VAR 0 2
77308: PUSH
77309: LD_VAR 0 3
77313: MINUS
77314: ST_TO_ADDR
// max_x := x + r ;
77315: LD_ADDR_VAR 0 9
77319: PUSH
77320: LD_VAR 0 1
77324: PUSH
77325: LD_VAR 0 3
77329: PLUS
77330: ST_TO_ADDR
// max_y := y + r ;
77331: LD_ADDR_VAR 0 10
77335: PUSH
77336: LD_VAR 0 2
77340: PUSH
77341: LD_VAR 0 3
77345: PLUS
77346: ST_TO_ADDR
// for _x = min_x to max_x do
77347: LD_ADDR_VAR 0 5
77351: PUSH
77352: DOUBLE
77353: LD_VAR 0 8
77357: DEC
77358: ST_TO_ADDR
77359: LD_VAR 0 9
77363: PUSH
77364: FOR_TO
77365: IFFALSE 77466
// for _y = min_y to max_y do
77367: LD_ADDR_VAR 0 6
77371: PUSH
77372: DOUBLE
77373: LD_VAR 0 7
77377: DEC
77378: ST_TO_ADDR
77379: LD_VAR 0 10
77383: PUSH
77384: FOR_TO
77385: IFFALSE 77462
// begin if not ValidHex ( _x , _y ) then
77387: LD_VAR 0 5
77391: PPUSH
77392: LD_VAR 0 6
77396: PPUSH
77397: CALL_OW 488
77401: NOT
77402: IFFALSE 77406
// continue ;
77404: GO 77384
// if GetResourceTypeXY ( _x , _y ) then
77406: LD_VAR 0 5
77410: PPUSH
77411: LD_VAR 0 6
77415: PPUSH
77416: CALL_OW 283
77420: IFFALSE 77460
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
77422: LD_ADDR_VAR 0 4
77426: PUSH
77427: LD_VAR 0 4
77431: PPUSH
77432: LD_VAR 0 4
77436: PUSH
77437: LD_INT 1
77439: PLUS
77440: PPUSH
77441: LD_VAR 0 5
77445: PUSH
77446: LD_VAR 0 6
77450: PUSH
77451: EMPTY
77452: LIST
77453: LIST
77454: PPUSH
77455: CALL_OW 1
77459: ST_TO_ADDR
// end ;
77460: GO 77384
77462: POP
77463: POP
77464: GO 77364
77466: POP
77467: POP
// end ;
77468: LD_VAR 0 4
77472: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
77473: LD_INT 0
77475: PPUSH
77476: PPUSH
77477: PPUSH
77478: PPUSH
77479: PPUSH
77480: PPUSH
77481: PPUSH
77482: PPUSH
// if not units then
77483: LD_VAR 0 1
77487: NOT
77488: IFFALSE 77492
// exit ;
77490: GO 78003
// result := UnitFilter ( units , [ f_ok ] ) ;
77492: LD_ADDR_VAR 0 3
77496: PUSH
77497: LD_VAR 0 1
77501: PPUSH
77502: LD_INT 50
77504: PUSH
77505: EMPTY
77506: LIST
77507: PPUSH
77508: CALL_OW 72
77512: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
77513: LD_ADDR_VAR 0 8
77517: PUSH
77518: LD_VAR 0 1
77522: PUSH
77523: LD_INT 1
77525: ARRAY
77526: PPUSH
77527: CALL_OW 255
77531: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
77532: LD_ADDR_VAR 0 10
77536: PUSH
77537: LD_INT 29
77539: PUSH
77540: LD_EXP 49
77544: PUSH
77545: LD_INT 49
77547: PUSH
77548: EMPTY
77549: LIST
77550: LIST
77551: LIST
77552: ST_TO_ADDR
// if not result then
77553: LD_VAR 0 3
77557: NOT
77558: IFFALSE 77562
// exit ;
77560: GO 78003
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
77562: LD_ADDR_VAR 0 5
77566: PUSH
77567: LD_INT 81
77569: PUSH
77570: LD_VAR 0 8
77574: PUSH
77575: EMPTY
77576: LIST
77577: LIST
77578: PPUSH
77579: CALL_OW 69
77583: ST_TO_ADDR
// for i in result do
77584: LD_ADDR_VAR 0 4
77588: PUSH
77589: LD_VAR 0 3
77593: PUSH
77594: FOR_IN
77595: IFFALSE 78001
// begin tag := GetTag ( i ) + 1 ;
77597: LD_ADDR_VAR 0 9
77601: PUSH
77602: LD_VAR 0 4
77606: PPUSH
77607: CALL_OW 110
77611: PUSH
77612: LD_INT 1
77614: PLUS
77615: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
77616: LD_ADDR_VAR 0 7
77620: PUSH
77621: LD_VAR 0 4
77625: PPUSH
77626: CALL_OW 250
77630: PPUSH
77631: LD_VAR 0 4
77635: PPUSH
77636: CALL_OW 251
77640: PPUSH
77641: LD_INT 6
77643: PPUSH
77644: CALL 77215 0 3
77648: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
77649: LD_VAR 0 7
77653: PUSH
77654: LD_VAR 0 4
77658: PPUSH
77659: CALL_OW 264
77663: PUSH
77664: LD_VAR 0 10
77668: IN
77669: NOT
77670: AND
77671: IFFALSE 77710
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
77673: LD_VAR 0 4
77677: PPUSH
77678: LD_VAR 0 7
77682: PUSH
77683: LD_INT 1
77685: ARRAY
77686: PUSH
77687: LD_INT 1
77689: ARRAY
77690: PPUSH
77691: LD_VAR 0 7
77695: PUSH
77696: LD_INT 1
77698: ARRAY
77699: PUSH
77700: LD_INT 2
77702: ARRAY
77703: PPUSH
77704: CALL_OW 116
77708: GO 77999
// if path > tag then
77710: LD_VAR 0 2
77714: PUSH
77715: LD_VAR 0 9
77719: GREATER
77720: IFFALSE 77928
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
77722: LD_ADDR_VAR 0 6
77726: PUSH
77727: LD_VAR 0 5
77731: PPUSH
77732: LD_INT 91
77734: PUSH
77735: LD_VAR 0 4
77739: PUSH
77740: LD_INT 12
77742: PUSH
77743: EMPTY
77744: LIST
77745: LIST
77746: LIST
77747: PPUSH
77748: CALL_OW 72
77752: ST_TO_ADDR
// if nearEnemy then
77753: LD_VAR 0 6
77757: IFFALSE 77826
// begin if GetWeapon ( i ) = ru_time_lapser then
77759: LD_VAR 0 4
77763: PPUSH
77764: CALL_OW 264
77768: PUSH
77769: LD_INT 49
77771: EQUAL
77772: IFFALSE 77800
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
77774: LD_VAR 0 4
77778: PPUSH
77779: LD_VAR 0 6
77783: PPUSH
77784: LD_VAR 0 4
77788: PPUSH
77789: CALL_OW 74
77793: PPUSH
77794: CALL_OW 112
77798: GO 77824
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
77800: LD_VAR 0 4
77804: PPUSH
77805: LD_VAR 0 6
77809: PPUSH
77810: LD_VAR 0 4
77814: PPUSH
77815: CALL_OW 74
77819: PPUSH
77820: CALL_OW 115
// end else
77824: GO 77926
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
77826: LD_VAR 0 4
77830: PPUSH
77831: LD_VAR 0 2
77835: PUSH
77836: LD_VAR 0 9
77840: ARRAY
77841: PUSH
77842: LD_INT 1
77844: ARRAY
77845: PPUSH
77846: LD_VAR 0 2
77850: PUSH
77851: LD_VAR 0 9
77855: ARRAY
77856: PUSH
77857: LD_INT 2
77859: ARRAY
77860: PPUSH
77861: CALL_OW 297
77865: PUSH
77866: LD_INT 6
77868: GREATER
77869: IFFALSE 77912
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
77871: LD_VAR 0 4
77875: PPUSH
77876: LD_VAR 0 2
77880: PUSH
77881: LD_VAR 0 9
77885: ARRAY
77886: PUSH
77887: LD_INT 1
77889: ARRAY
77890: PPUSH
77891: LD_VAR 0 2
77895: PUSH
77896: LD_VAR 0 9
77900: ARRAY
77901: PUSH
77902: LD_INT 2
77904: ARRAY
77905: PPUSH
77906: CALL_OW 114
77910: GO 77926
// SetTag ( i , tag ) ;
77912: LD_VAR 0 4
77916: PPUSH
77917: LD_VAR 0 9
77921: PPUSH
77922: CALL_OW 109
// end else
77926: GO 77999
// if enemy then
77928: LD_VAR 0 5
77932: IFFALSE 77999
// begin if GetWeapon ( i ) = ru_time_lapser then
77934: LD_VAR 0 4
77938: PPUSH
77939: CALL_OW 264
77943: PUSH
77944: LD_INT 49
77946: EQUAL
77947: IFFALSE 77975
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
77949: LD_VAR 0 4
77953: PPUSH
77954: LD_VAR 0 5
77958: PPUSH
77959: LD_VAR 0 4
77963: PPUSH
77964: CALL_OW 74
77968: PPUSH
77969: CALL_OW 112
77973: GO 77999
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
77975: LD_VAR 0 4
77979: PPUSH
77980: LD_VAR 0 5
77984: PPUSH
77985: LD_VAR 0 4
77989: PPUSH
77990: CALL_OW 74
77994: PPUSH
77995: CALL_OW 115
// end ; end ;
77999: GO 77594
78001: POP
78002: POP
// end ;
78003: LD_VAR 0 3
78007: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
78008: LD_INT 0
78010: PPUSH
78011: PPUSH
78012: PPUSH
// if not unit or IsInUnit ( unit ) then
78013: LD_VAR 0 1
78017: NOT
78018: PUSH
78019: LD_VAR 0 1
78023: PPUSH
78024: CALL_OW 310
78028: OR
78029: IFFALSE 78033
// exit ;
78031: GO 78124
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
78033: LD_ADDR_VAR 0 4
78037: PUSH
78038: LD_VAR 0 1
78042: PPUSH
78043: CALL_OW 250
78047: PPUSH
78048: LD_VAR 0 2
78052: PPUSH
78053: LD_INT 1
78055: PPUSH
78056: CALL_OW 272
78060: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
78061: LD_ADDR_VAR 0 5
78065: PUSH
78066: LD_VAR 0 1
78070: PPUSH
78071: CALL_OW 251
78075: PPUSH
78076: LD_VAR 0 2
78080: PPUSH
78081: LD_INT 1
78083: PPUSH
78084: CALL_OW 273
78088: ST_TO_ADDR
// if ValidHex ( x , y ) then
78089: LD_VAR 0 4
78093: PPUSH
78094: LD_VAR 0 5
78098: PPUSH
78099: CALL_OW 488
78103: IFFALSE 78124
// ComTurnXY ( unit , x , y ) ;
78105: LD_VAR 0 1
78109: PPUSH
78110: LD_VAR 0 4
78114: PPUSH
78115: LD_VAR 0 5
78119: PPUSH
78120: CALL_OW 118
// end ;
78124: LD_VAR 0 3
78128: RET
// export function SeeUnits ( side , units ) ; var i ; begin
78129: LD_INT 0
78131: PPUSH
78132: PPUSH
// result := false ;
78133: LD_ADDR_VAR 0 3
78137: PUSH
78138: LD_INT 0
78140: ST_TO_ADDR
// if not units then
78141: LD_VAR 0 2
78145: NOT
78146: IFFALSE 78150
// exit ;
78148: GO 78195
// for i in units do
78150: LD_ADDR_VAR 0 4
78154: PUSH
78155: LD_VAR 0 2
78159: PUSH
78160: FOR_IN
78161: IFFALSE 78193
// if See ( side , i ) then
78163: LD_VAR 0 1
78167: PPUSH
78168: LD_VAR 0 4
78172: PPUSH
78173: CALL_OW 292
78177: IFFALSE 78191
// begin result := true ;
78179: LD_ADDR_VAR 0 3
78183: PUSH
78184: LD_INT 1
78186: ST_TO_ADDR
// exit ;
78187: POP
78188: POP
78189: GO 78195
// end ;
78191: GO 78160
78193: POP
78194: POP
// end ;
78195: LD_VAR 0 3
78199: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
78200: LD_INT 0
78202: PPUSH
78203: PPUSH
78204: PPUSH
78205: PPUSH
// if not unit or not points then
78206: LD_VAR 0 1
78210: NOT
78211: PUSH
78212: LD_VAR 0 2
78216: NOT
78217: OR
78218: IFFALSE 78222
// exit ;
78220: GO 78312
// dist := 99999 ;
78222: LD_ADDR_VAR 0 5
78226: PUSH
78227: LD_INT 99999
78229: ST_TO_ADDR
// for i in points do
78230: LD_ADDR_VAR 0 4
78234: PUSH
78235: LD_VAR 0 2
78239: PUSH
78240: FOR_IN
78241: IFFALSE 78310
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
78243: LD_ADDR_VAR 0 6
78247: PUSH
78248: LD_VAR 0 1
78252: PPUSH
78253: LD_VAR 0 4
78257: PUSH
78258: LD_INT 1
78260: ARRAY
78261: PPUSH
78262: LD_VAR 0 4
78266: PUSH
78267: LD_INT 2
78269: ARRAY
78270: PPUSH
78271: CALL_OW 297
78275: ST_TO_ADDR
// if tmpDist < dist then
78276: LD_VAR 0 6
78280: PUSH
78281: LD_VAR 0 5
78285: LESS
78286: IFFALSE 78308
// begin result := i ;
78288: LD_ADDR_VAR 0 3
78292: PUSH
78293: LD_VAR 0 4
78297: ST_TO_ADDR
// dist := tmpDist ;
78298: LD_ADDR_VAR 0 5
78302: PUSH
78303: LD_VAR 0 6
78307: ST_TO_ADDR
// end ; end ;
78308: GO 78240
78310: POP
78311: POP
// end ;
78312: LD_VAR 0 3
78316: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
78317: LD_INT 0
78319: PPUSH
// uc_side := side ;
78320: LD_ADDR_OWVAR 20
78324: PUSH
78325: LD_VAR 0 1
78329: ST_TO_ADDR
// uc_nation := 3 ;
78330: LD_ADDR_OWVAR 21
78334: PUSH
78335: LD_INT 3
78337: ST_TO_ADDR
// vc_chassis := 25 ;
78338: LD_ADDR_OWVAR 37
78342: PUSH
78343: LD_INT 25
78345: ST_TO_ADDR
// vc_engine := engine_siberite ;
78346: LD_ADDR_OWVAR 39
78350: PUSH
78351: LD_INT 3
78353: ST_TO_ADDR
// vc_control := control_computer ;
78354: LD_ADDR_OWVAR 38
78358: PUSH
78359: LD_INT 3
78361: ST_TO_ADDR
// vc_weapon := 59 ;
78362: LD_ADDR_OWVAR 40
78366: PUSH
78367: LD_INT 59
78369: ST_TO_ADDR
// result := CreateVehicle ;
78370: LD_ADDR_VAR 0 5
78374: PUSH
78375: CALL_OW 45
78379: ST_TO_ADDR
// SetDir ( result , d ) ;
78380: LD_VAR 0 5
78384: PPUSH
78385: LD_VAR 0 4
78389: PPUSH
78390: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
78394: LD_VAR 0 5
78398: PPUSH
78399: LD_VAR 0 2
78403: PPUSH
78404: LD_VAR 0 3
78408: PPUSH
78409: LD_INT 0
78411: PPUSH
78412: CALL_OW 48
// end ;
78416: LD_VAR 0 5
78420: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
78421: LD_INT 0
78423: PPUSH
78424: PPUSH
78425: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
78426: LD_ADDR_VAR 0 2
78430: PUSH
78431: LD_INT 0
78433: PUSH
78434: LD_INT 0
78436: PUSH
78437: LD_INT 0
78439: PUSH
78440: LD_INT 0
78442: PUSH
78443: EMPTY
78444: LIST
78445: LIST
78446: LIST
78447: LIST
78448: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
78449: LD_VAR 0 1
78453: NOT
78454: PUSH
78455: LD_VAR 0 1
78459: PPUSH
78460: CALL_OW 264
78464: PUSH
78465: LD_INT 12
78467: PUSH
78468: LD_INT 51
78470: PUSH
78471: LD_INT 32
78473: PUSH
78474: LD_EXP 46
78478: PUSH
78479: EMPTY
78480: LIST
78481: LIST
78482: LIST
78483: LIST
78484: IN
78485: NOT
78486: OR
78487: IFFALSE 78491
// exit ;
78489: GO 78589
// for i := 1 to 3 do
78491: LD_ADDR_VAR 0 3
78495: PUSH
78496: DOUBLE
78497: LD_INT 1
78499: DEC
78500: ST_TO_ADDR
78501: LD_INT 3
78503: PUSH
78504: FOR_TO
78505: IFFALSE 78587
// begin tmp := GetCargo ( cargo , i ) ;
78507: LD_ADDR_VAR 0 4
78511: PUSH
78512: LD_VAR 0 1
78516: PPUSH
78517: LD_VAR 0 3
78521: PPUSH
78522: CALL_OW 289
78526: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
78527: LD_ADDR_VAR 0 2
78531: PUSH
78532: LD_VAR 0 2
78536: PPUSH
78537: LD_VAR 0 3
78541: PPUSH
78542: LD_VAR 0 4
78546: PPUSH
78547: CALL_OW 1
78551: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
78552: LD_ADDR_VAR 0 2
78556: PUSH
78557: LD_VAR 0 2
78561: PPUSH
78562: LD_INT 4
78564: PPUSH
78565: LD_VAR 0 2
78569: PUSH
78570: LD_INT 4
78572: ARRAY
78573: PUSH
78574: LD_VAR 0 4
78578: PLUS
78579: PPUSH
78580: CALL_OW 1
78584: ST_TO_ADDR
// end ;
78585: GO 78504
78587: POP
78588: POP
// end ; end_of_file
78589: LD_VAR 0 2
78593: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
78594: LD_VAR 0 1
78598: PUSH
78599: LD_INT 200
78601: DOUBLE
78602: GREATEREQUAL
78603: IFFALSE 78611
78605: LD_INT 299
78607: DOUBLE
78608: LESSEQUAL
78609: IFTRUE 78613
78611: GO 78645
78613: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
78614: LD_VAR 0 1
78618: PPUSH
78619: LD_VAR 0 2
78623: PPUSH
78624: LD_VAR 0 3
78628: PPUSH
78629: LD_VAR 0 4
78633: PPUSH
78634: LD_VAR 0 5
78638: PPUSH
78639: CALL 33934 0 5
78643: GO 78722
78645: LD_INT 300
78647: DOUBLE
78648: GREATEREQUAL
78649: IFFALSE 78657
78651: LD_INT 399
78653: DOUBLE
78654: LESSEQUAL
78655: IFTRUE 78659
78657: GO 78721
78659: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
78660: LD_VAR 0 1
78664: PPUSH
78665: LD_VAR 0 2
78669: PPUSH
78670: LD_VAR 0 3
78674: PPUSH
78675: LD_VAR 0 4
78679: PPUSH
78680: LD_VAR 0 5
78684: PPUSH
78685: LD_VAR 0 6
78689: PPUSH
78690: LD_VAR 0 7
78694: PPUSH
78695: LD_VAR 0 8
78699: PPUSH
78700: LD_VAR 0 9
78704: PPUSH
78705: LD_VAR 0 10
78709: PPUSH
78710: LD_VAR 0 11
78714: PPUSH
78715: CALL 31576 0 11
78719: GO 78722
78721: POP
// end ;
78722: PPOPN 11
78724: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
78725: LD_VAR 0 1
78729: PPUSH
78730: LD_VAR 0 2
78734: PPUSH
78735: LD_VAR 0 3
78739: PPUSH
78740: LD_VAR 0 4
78744: PPUSH
78745: LD_VAR 0 5
78749: PPUSH
78750: CALL 33670 0 5
// end ; end_of_file
78754: PPOPN 5
78756: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78757: LD_VAR 0 1
78761: PPUSH
78762: LD_VAR 0 2
78766: PPUSH
78767: LD_VAR 0 3
78771: PPUSH
78772: LD_VAR 0 4
78776: PPUSH
78777: LD_VAR 0 5
78781: PPUSH
78782: LD_VAR 0 6
78786: PPUSH
78787: CALL 19269 0 6
// end ;
78791: PPOPN 6
78793: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
78794: CALL 19244 0 0
// end ;
78798: PPOPN 1
78800: END
