// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export Powell ; export Davidov ; export Kurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; export westPathUsed , laserCounterDestroy , rocketBuilded ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 92 0 0
// SetBName ( rueastdepot , ryutin ) ;
  19: LD_INT 4
  21: PPUSH
  22: LD_STRING ryutin
  24: PPUSH
  25: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  29: LD_INT 6
  31: PPUSH
  32: LD_STRING yegorov
  34: PPUSH
  35: CALL_OW 500
// CreateNature ;
  39: CALL 15039 0 0
// PrepareDifficulty ;
  43: CALL 12412 0 0
// PrepareVehicles ;
  47: CALL 1780 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
  51: LD_INT 4
  53: PPUSH
  54: LD_INT 0
  56: PPUSH
  57: LD_INT 1
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL 1362 0 4
// PrepareAmericanHeroes ;
  67: CALL 652 0 0
// PrepareRussianCommander ;
  71: CALL 3253 0 0
// PrepareWestBase ;
  75: CALL 3776 0 0
// PrepareEastBase ;
  79: CALL 3332 0 0
// PrepareOtherRussians ;
  83: CALL 3914 0 0
// Action ;
  87: CALL 5578 0 0
// end ;
  91: END
// function Init ; begin
  92: LD_INT 0
  94: PPUSH
// RuScientists := [ ] ;
  95: LD_ADDR_EXP 27
  99: PUSH
 100: EMPTY
 101: ST_TO_ADDR
// sciCounter := 0 ;
 102: LD_ADDR_EXP 28
 106: PUSH
 107: LD_INT 0
 109: ST_TO_ADDR
// ruDestroyedBuildings := [ ] ;
 110: LD_ADDR_EXP 31
 114: PUSH
 115: EMPTY
 116: ST_TO_ADDR
// russianTanks := [ ] ;
 117: LD_ADDR_EXP 32
 121: PUSH
 122: EMPTY
 123: ST_TO_ADDR
// russianTimeLapsers := [ ] ;
 124: LD_ADDR_EXP 33
 128: PUSH
 129: EMPTY
 130: ST_TO_ADDR
// arabianMines := [ ] ;
 131: LD_ADDR_EXP 37
 135: PUSH
 136: EMPTY
 137: ST_TO_ADDR
// kurtStatus := LoadVariable ( 06_KurtStatus_1 , 0 ) ;
 138: LD_ADDR_EXP 19
 142: PUSH
 143: LD_STRING 06_KurtStatus_1
 145: PPUSH
 146: LD_INT 0
 148: PPUSH
 149: CALL_OW 30
 153: ST_TO_ADDR
// secondPass := 0 ;
 154: LD_ADDR_EXP 20
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// teleportExplored := 0 ;
 162: LD_ADDR_EXP 26
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// attackTactic := 0 ;
 170: LD_ADDR_EXP 36
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// tpCounter := 0 ;
 178: LD_ADDR_EXP 22
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// askSiberite := 0 ;
 186: LD_ADDR_EXP 25
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// warWithLegion := 0 ;
 194: LD_ADDR_EXP 23
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// fakeInfo := 0 ;
 202: LD_ADDR_EXP 24
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// cratesSpawned := 0 ;
 210: LD_ADDR_EXP 38
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// ruAI := 0 ;
 218: LD_ADDR_EXP 34
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// ruEscape := 0 ;
 226: LD_ADDR_EXP 35
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// eventVar1 := 0 ;
 234: LD_ADDR_EXP 40
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// mission_prefix := 12_ ;
 242: LD_ADDR_EXP 39
 246: PUSH
 247: LD_STRING 12_
 249: ST_TO_ADDR
// debugMode := 0 ;
 250: LD_ADDR_EXP 41
 254: PUSH
 255: LD_INT 0
 257: ST_TO_ADDR
// westPathUsed := false ;
 258: LD_ADDR_EXP 42
 262: PUSH
 263: LD_INT 0
 265: ST_TO_ADDR
// laserCounterDestroy := 0 ;
 266: LD_ADDR_EXP 43
 270: PUSH
 271: LD_INT 0
 273: ST_TO_ADDR
// rocketBuilded := false ;
 274: LD_ADDR_EXP 44
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// end ;
 282: LD_VAR 0 1
 286: RET
// every 0 0$1 trigger debugMode do var i ;
 287: LD_EXP 41
 291: IFFALSE 597
 293: GO 295
 295: DISABLE
 296: LD_INT 0
 298: PPUSH
// begin enable ;
 299: ENABLE
// FogOff ( true ) ;
 300: LD_INT 1
 302: PPUSH
 303: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 307: LD_ADDR_VAR 0 1
 311: PUSH
 312: LD_INT 22
 314: PUSH
 315: LD_INT 1
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: PUSH
 322: LD_INT 21
 324: PUSH
 325: LD_INT 1
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PPUSH
 336: CALL_OW 69
 340: PUSH
 341: FOR_IN
 342: IFFALSE 358
// SetLives ( i , 1000 ) ;
 344: LD_VAR 0 1
 348: PPUSH
 349: LD_INT 1000
 351: PPUSH
 352: CALL_OW 234
 356: GO 341
 358: POP
 359: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 360: LD_ADDR_VAR 0 1
 364: PUSH
 365: LD_INT 22
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 2
 377: PUSH
 378: LD_INT 30
 380: PUSH
 381: LD_INT 0
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PUSH
 388: LD_INT 30
 390: PUSH
 391: LD_INT 1
 393: PUSH
 394: EMPTY
 395: LIST
 396: LIST
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: LIST
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: PPUSH
 407: CALL_OW 69
 411: PUSH
 412: FOR_IN
 413: IFFALSE 437
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 415: LD_VAR 0 1
 419: PPUSH
 420: CALL_OW 274
 424: PPUSH
 425: LD_INT 1
 427: PPUSH
 428: LD_INT 9999
 430: PPUSH
 431: CALL_OW 277
 435: GO 412
 437: POP
 438: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 439: LD_ADDR_VAR 0 1
 443: PUSH
 444: LD_INT 22
 446: PUSH
 447: LD_INT 1
 449: PUSH
 450: EMPTY
 451: LIST
 452: LIST
 453: PUSH
 454: LD_INT 2
 456: PUSH
 457: LD_INT 30
 459: PUSH
 460: LD_INT 0
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: PUSH
 467: LD_INT 30
 469: PUSH
 470: LD_INT 1
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PPUSH
 486: CALL_OW 69
 490: PUSH
 491: FOR_IN
 492: IFFALSE 516
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 494: LD_VAR 0 1
 498: PPUSH
 499: CALL_OW 274
 503: PPUSH
 504: LD_INT 2
 506: PPUSH
 507: LD_INT 9999
 509: PPUSH
 510: CALL_OW 277
 514: GO 491
 516: POP
 517: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 518: LD_ADDR_VAR 0 1
 522: PUSH
 523: LD_INT 22
 525: PUSH
 526: LD_INT 1
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PUSH
 533: LD_INT 2
 535: PUSH
 536: LD_INT 30
 538: PUSH
 539: LD_INT 0
 541: PUSH
 542: EMPTY
 543: LIST
 544: LIST
 545: PUSH
 546: LD_INT 30
 548: PUSH
 549: LD_INT 1
 551: PUSH
 552: EMPTY
 553: LIST
 554: LIST
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: LIST
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: PPUSH
 565: CALL_OW 69
 569: PUSH
 570: FOR_IN
 571: IFFALSE 595
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 573: LD_VAR 0 1
 577: PPUSH
 578: CALL_OW 274
 582: PPUSH
 583: LD_INT 3
 585: PPUSH
 586: LD_INT 9999
 588: PPUSH
 589: CALL_OW 277
 593: GO 570
 595: POP
 596: POP
// end ;
 597: PPOPN 1
 599: END
// every 0 0$1 trigger FilterUnitsInArea ( westPathArea , [ f_side , 1 ] ) do
 600: LD_INT 24
 602: PPUSH
 603: LD_INT 22
 605: PUSH
 606: LD_INT 1
 608: PUSH
 609: EMPTY
 610: LIST
 611: LIST
 612: PPUSH
 613: CALL_OW 70
 617: IFFALSE 630
 619: GO 621
 621: DISABLE
// westPathUsed := true ;
 622: LD_ADDR_EXP 42
 626: PUSH
 627: LD_INT 1
 629: ST_TO_ADDR
 630: END
// every 0 0$1 trigger laserCounterDestroy >= 3 do
 631: LD_EXP 43
 635: PUSH
 636: LD_INT 3
 638: GREATEREQUAL
 639: IFFALSE 651
 641: GO 643
 643: DISABLE
// SetAchievement ( ACH_LASER ) ; end_of_file
 644: LD_STRING ACH_LASER
 646: PPUSH
 647: CALL_OW 543
 651: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 652: LD_INT 0
 654: PPUSH
 655: PPUSH
 656: PPUSH
// uc_side := 1 ;
 657: LD_ADDR_OWVAR 20
 661: PUSH
 662: LD_INT 1
 664: ST_TO_ADDR
// others11 := CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 665: LD_ADDR_EXP 14
 669: PUSH
 670: LD_STRING 11c_others
 672: PPUSH
 673: CALL_OW 31
 677: PUSH
 678: LD_STRING 11_others
 680: PPUSH
 681: CALL_OW 31
 685: UNION
 686: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true , 11_ ) ;
 687: LD_ADDR_EXP 1
 691: PUSH
 692: LD_STRING JMM
 694: PPUSH
 695: LD_INT 1
 697: PPUSH
 698: LD_STRING 11_
 700: PPUSH
 701: CALL 38838 0 3
 705: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 706: LD_EXP 1
 710: PPUSH
 711: LD_INT 1
 713: PPUSH
 714: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 718: LD_EXP 1
 722: PPUSH
 723: LD_INT 22
 725: PUSH
 726: LD_INT 1
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: PUSH
 733: LD_INT 21
 735: PUSH
 736: LD_INT 2
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: PUSH
 743: LD_INT 58
 745: PUSH
 746: EMPTY
 747: LIST
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: LIST
 753: PPUSH
 754: CALL_OW 69
 758: PUSH
 759: LD_INT 1
 761: ARRAY
 762: PPUSH
 763: CALL_OW 52
// if TestCharacters ( 11_Lisa ) then
 767: LD_STRING 11_Lisa
 769: PPUSH
 770: CALL_OW 28
 774: IFFALSE 824
// begin Lisa := PrepareUnit ( Lisa , true , 11_ ) ;
 776: LD_ADDR_EXP 2
 780: PUSH
 781: LD_STRING Lisa
 783: PPUSH
 784: LD_INT 1
 786: PPUSH
 787: LD_STRING 11_
 789: PPUSH
 790: CALL 38838 0 3
 794: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 795: LD_EXP 2
 799: PPUSH
 800: LD_INT 1
 802: PPUSH
 803: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 807: LD_EXP 2
 811: PPUSH
 812: LD_INT 4
 814: PPUSH
 815: LD_INT 0
 817: PPUSH
 818: CALL_OW 49
// end else
 822: GO 840
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 824: LD_INT 4
 826: PPUSH
 827: LD_INT 0
 829: PPUSH
 830: LD_INT 1
 832: PPUSH
 833: LD_INT 0
 835: PPUSH
 836: CALL 1362 0 4
// if TestCharacters ( 11_Donaldson ) then
 840: LD_STRING 11_Donaldson
 842: PPUSH
 843: CALL_OW 28
 847: IFFALSE 897
// begin Donaldson := PrepareUnit ( Donaldson , true , 11_ ) ;
 849: LD_ADDR_EXP 3
 853: PUSH
 854: LD_STRING Donaldson
 856: PPUSH
 857: LD_INT 1
 859: PPUSH
 860: LD_STRING 11_
 862: PPUSH
 863: CALL 38838 0 3
 867: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 868: LD_EXP 3
 872: PPUSH
 873: LD_INT 1
 875: PPUSH
 876: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 880: LD_EXP 3
 884: PPUSH
 885: LD_INT 4
 887: PPUSH
 888: LD_INT 0
 890: PPUSH
 891: CALL_OW 49
// end else
 895: GO 913
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 897: LD_INT 4
 899: PPUSH
 900: LD_INT 0
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: LD_INT 0
 908: PPUSH
 909: CALL 1362 0 4
// if TestCharacters ( 11_Cyrus ) then
 913: LD_STRING 11_Cyrus
 915: PPUSH
 916: CALL_OW 28
 920: IFFALSE 970
// begin Cyrus := PrepareUnit ( Cyrus , true , 11_ ) ;
 922: LD_ADDR_EXP 5
 926: PUSH
 927: LD_STRING Cyrus
 929: PPUSH
 930: LD_INT 1
 932: PPUSH
 933: LD_STRING 11_
 935: PPUSH
 936: CALL 38838 0 3
 940: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 941: LD_EXP 5
 945: PPUSH
 946: LD_INT 1
 948: PPUSH
 949: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 953: LD_EXP 5
 957: PPUSH
 958: LD_INT 4
 960: PPUSH
 961: LD_INT 0
 963: PPUSH
 964: CALL_OW 49
// end else
 968: GO 986
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 970: LD_INT 4
 972: PPUSH
 973: LD_INT 0
 975: PPUSH
 976: LD_INT 1
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL 1362 0 4
// if TestCharacters ( 11_Denis ) then
 986: LD_STRING 11_Denis
 988: PPUSH
 989: CALL_OW 28
 993: IFFALSE 1043
// begin Denis := PrepareUnit ( Denis , true , 11_ ) ;
 995: LD_ADDR_EXP 6
 999: PUSH
1000: LD_STRING Denis
1002: PPUSH
1003: LD_INT 1
1005: PPUSH
1006: LD_STRING 11_
1008: PPUSH
1009: CALL 38838 0 3
1013: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1014: LD_EXP 6
1018: PPUSH
1019: LD_INT 4
1021: PPUSH
1022: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1026: LD_EXP 6
1030: PPUSH
1031: LD_INT 4
1033: PPUSH
1034: LD_INT 0
1036: PPUSH
1037: CALL_OW 49
// end else
1041: GO 1059
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1043: LD_INT 4
1045: PPUSH
1046: LD_INT 0
1048: PPUSH
1049: LD_INT 1
1051: PPUSH
1052: LD_INT 0
1054: PPUSH
1055: CALL 1362 0 4
// if TestCharacters ( 11_Frank ) then
1059: LD_STRING 11_Frank
1061: PPUSH
1062: CALL_OW 28
1066: IFFALSE 1116
// begin Frank := PrepareUnit ( Frank , true , 11_ ) ;
1068: LD_ADDR_EXP 12
1072: PUSH
1073: LD_STRING Frank
1075: PPUSH
1076: LD_INT 1
1078: PPUSH
1079: LD_STRING 11_
1081: PPUSH
1082: CALL 38838 0 3
1086: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1087: LD_EXP 12
1091: PPUSH
1092: LD_INT 1
1094: PPUSH
1095: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1099: LD_EXP 12
1103: PPUSH
1104: LD_INT 4
1106: PPUSH
1107: LD_INT 0
1109: PPUSH
1110: CALL_OW 49
// end else
1114: GO 1132
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1116: LD_INT 4
1118: PPUSH
1119: LD_INT 0
1121: PPUSH
1122: LD_INT 1
1124: PPUSH
1125: LD_INT 0
1127: PPUSH
1128: CALL 1362 0 4
// if TestCharacters ( 11_Cornell ) then
1132: LD_STRING 11_Cornell
1134: PPUSH
1135: CALL_OW 28
1139: IFFALSE 1189
// begin Cornel := PrepareUnit ( Cornell , true , 11_ ) ;
1141: LD_ADDR_EXP 10
1145: PUSH
1146: LD_STRING Cornell
1148: PPUSH
1149: LD_INT 1
1151: PPUSH
1152: LD_STRING 11_
1154: PPUSH
1155: CALL 38838 0 3
1159: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1160: LD_EXP 10
1164: PPUSH
1165: LD_INT 1
1167: PPUSH
1168: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1172: LD_EXP 10
1176: PPUSH
1177: LD_INT 4
1179: PPUSH
1180: LD_INT 0
1182: PPUSH
1183: CALL_OW 49
// end else
1187: GO 1205
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1189: LD_INT 4
1191: PPUSH
1192: LD_INT 0
1194: PPUSH
1195: LD_INT 1
1197: PPUSH
1198: LD_INT 0
1200: PPUSH
1201: CALL 1362 0 4
// tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1205: LD_ADDR_VAR 0 2
1209: PUSH
1210: LD_EXP 14
1214: PPUSH
1215: LD_INT 26
1217: PUSH
1218: LD_INT 1
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: PPUSH
1225: CALL_OW 72
1229: ST_TO_ADDR
// if not tmp then
1230: LD_VAR 0 2
1234: NOT
1235: IFFALSE 1264
// begin PrepareSoldier ( sex_male , 8 ) ;
1237: LD_INT 1
1239: PPUSH
1240: LD_INT 8
1242: PPUSH
1243: CALL_OW 381
// PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1247: CALL_OW 44
1251: PPUSH
1252: LD_INT 4
1254: PPUSH
1255: LD_INT 0
1257: PPUSH
1258: CALL_OW 49
// end else
1262: GO 1338
// begin if GetClass ( tmp [ 1 ] ) <> class_soldier then
1264: LD_VAR 0 2
1268: PUSH
1269: LD_INT 1
1271: ARRAY
1272: PPUSH
1273: CALL_OW 257
1277: PUSH
1278: LD_INT 1
1280: NONEQUAL
1281: IFFALSE 1299
// SetClass ( tmp [ 1 ] , class_soldier ) ;
1283: LD_VAR 0 2
1287: PUSH
1288: LD_INT 1
1290: ARRAY
1291: PPUSH
1292: LD_INT 1
1294: PPUSH
1295: CALL_OW 336
// PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1299: LD_VAR 0 2
1303: PUSH
1304: LD_INT 1
1306: ARRAY
1307: PPUSH
1308: LD_INT 4
1310: PPUSH
1311: LD_INT 0
1313: PPUSH
1314: CALL_OW 49
// others11 := others11 diff tmp [ 1 ] ;
1318: LD_ADDR_EXP 14
1322: PUSH
1323: LD_EXP 14
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_INT 1
1335: ARRAY
1336: DIFF
1337: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ,  ) ;
1338: LD_ADDR_EXP 15
1342: PUSH
1343: LD_STRING Powell
1345: PPUSH
1346: LD_INT 0
1348: PPUSH
1349: LD_STRING 
1351: PPUSH
1352: CALL 38838 0 3
1356: ST_TO_ADDR
// end ;
1357: LD_VAR 0 1
1361: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1362: LD_INT 0
1364: PPUSH
1365: PPUSH
1366: PPUSH
1367: PPUSH
1368: PPUSH
// if mech = 1 then
1369: LD_VAR 0 4
1373: PUSH
1374: LD_INT 1
1376: EQUAL
1377: IFFALSE 1610
// begin if others11 then
1379: LD_EXP 14
1383: IFFALSE 1550
// begin for i := 1 to others11 - 1 do
1385: LD_ADDR_VAR 0 6
1389: PUSH
1390: DOUBLE
1391: LD_INT 1
1393: DEC
1394: ST_TO_ADDR
1395: LD_EXP 14
1399: PUSH
1400: LD_INT 1
1402: MINUS
1403: PUSH
1404: FOR_TO
1405: IFFALSE 1487
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1407: LD_EXP 14
1411: PUSH
1412: LD_VAR 0 6
1416: ARRAY
1417: PPUSH
1418: LD_INT 3
1420: PPUSH
1421: CALL_OW 259
1425: PUSH
1426: LD_EXP 14
1430: PUSH
1431: LD_VAR 0 6
1435: PUSH
1436: LD_INT 1
1438: PLUS
1439: ARRAY
1440: PPUSH
1441: LD_INT 3
1443: PPUSH
1444: CALL_OW 259
1448: LESS
1449: IFFALSE 1485
// begin mecha = others11 [ i + 1 ] ;
1451: LD_ADDR_VAR 0 9
1455: PUSH
1456: LD_EXP 14
1460: PUSH
1461: LD_VAR 0 6
1465: PUSH
1466: LD_INT 1
1468: PLUS
1469: ARRAY
1470: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1471: LD_VAR 0 9
1475: PPUSH
1476: LD_INT 3
1478: PPUSH
1479: CALL_OW 336
// break ;
1483: GO 1487
// end ; end ;
1485: GO 1404
1487: POP
1488: POP
// if spawnMode = 1 then
1489: LD_VAR 0 3
1493: PUSH
1494: LD_INT 1
1496: EQUAL
1497: IFFALSE 1518
// PlaceUnitArea ( mecha , area , false ) else
1499: LD_VAR 0 9
1503: PPUSH
1504: LD_VAR 0 1
1508: PPUSH
1509: LD_INT 0
1511: PPUSH
1512: CALL_OW 49
1516: GO 1532
// PlaceHumanInUnit ( mecha , veh ) ;
1518: LD_VAR 0 9
1522: PPUSH
1523: LD_VAR 0 2
1527: PPUSH
1528: CALL_OW 52
// others11 := others11 diff mecha ;
1532: LD_ADDR_EXP 14
1536: PUSH
1537: LD_EXP 14
1541: PUSH
1542: LD_VAR 0 9
1546: DIFF
1547: ST_TO_ADDR
// end else
1548: GO 1608
// begin hc_name :=  ;
1550: LD_ADDR_OWVAR 26
1554: PUSH
1555: LD_STRING 
1557: ST_TO_ADDR
// hc_gallery :=  ;
1558: LD_ADDR_OWVAR 33
1562: PUSH
1563: LD_STRING 
1565: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1566: LD_INT 0
1568: PPUSH
1569: LD_INT 7
1571: PPUSH
1572: LD_INT 9
1574: PPUSH
1575: CALL_OW 12
1579: PPUSH
1580: CALL_OW 383
// un := CreateHuman ;
1584: LD_ADDR_VAR 0 7
1588: PUSH
1589: CALL_OW 44
1593: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1594: LD_VAR 0 7
1598: PPUSH
1599: LD_VAR 0 2
1603: PPUSH
1604: CALL_OW 52
// end ; end else
1608: GO 1775
// begin if others11 then
1610: LD_EXP 14
1614: IFFALSE 1687
// begin if spawnMode = 1 then
1616: LD_VAR 0 3
1620: PUSH
1621: LD_INT 1
1623: EQUAL
1624: IFFALSE 1649
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1626: LD_EXP 14
1630: PUSH
1631: LD_INT 1
1633: ARRAY
1634: PPUSH
1635: LD_VAR 0 1
1639: PPUSH
1640: LD_INT 0
1642: PPUSH
1643: CALL_OW 49
1647: GO 1667
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1649: LD_EXP 14
1653: PUSH
1654: LD_INT 1
1656: ARRAY
1657: PPUSH
1658: LD_VAR 0 2
1662: PPUSH
1663: CALL_OW 52
// others11 := Delete ( others11 , 1 ) ;
1667: LD_ADDR_EXP 14
1671: PUSH
1672: LD_EXP 14
1676: PPUSH
1677: LD_INT 1
1679: PPUSH
1680: CALL_OW 3
1684: ST_TO_ADDR
// end else
1685: GO 1775
// begin hc_name :=  ;
1687: LD_ADDR_OWVAR 26
1691: PUSH
1692: LD_STRING 
1694: ST_TO_ADDR
// hc_gallery :=  ;
1695: LD_ADDR_OWVAR 33
1699: PUSH
1700: LD_STRING 
1702: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1703: LD_INT 0
1705: PPUSH
1706: LD_INT 1
1708: PUSH
1709: LD_INT 2
1711: PUSH
1712: LD_INT 3
1714: PUSH
1715: LD_INT 4
1717: PUSH
1718: EMPTY
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: PUSH
1724: LD_INT 1
1726: PPUSH
1727: LD_INT 4
1729: PPUSH
1730: CALL_OW 12
1734: ARRAY
1735: PPUSH
1736: LD_INT 7
1738: PPUSH
1739: LD_INT 9
1741: PPUSH
1742: CALL_OW 12
1746: PPUSH
1747: CALL_OW 380
// un := CreateHuman ;
1751: LD_ADDR_VAR 0 7
1755: PUSH
1756: CALL_OW 44
1760: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1761: LD_VAR 0 7
1765: PPUSH
1766: LD_VAR 0 2
1770: PPUSH
1771: CALL_OW 52
// end ; end ; end ;
1775: LD_VAR 0 5
1779: RET
// export function PrepareVehicles ; var veh ; begin
1780: LD_INT 0
1782: PPUSH
1783: PPUSH
// uc_side := 1 ;
1784: LD_ADDR_OWVAR 20
1788: PUSH
1789: LD_INT 1
1791: ST_TO_ADDR
// uc_nation := 1 ;
1792: LD_ADDR_OWVAR 21
1796: PUSH
1797: LD_INT 1
1799: ST_TO_ADDR
// vc_chassis := us_medium_tracked ;
1800: LD_ADDR_OWVAR 37
1804: PUSH
1805: LD_INT 3
1807: ST_TO_ADDR
// vc_engine := engine_siberite ;
1808: LD_ADDR_OWVAR 39
1812: PUSH
1813: LD_INT 3
1815: ST_TO_ADDR
// vc_control := control_computer ;
1816: LD_ADDR_OWVAR 38
1820: PUSH
1821: LD_INT 3
1823: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1824: LD_ADDR_OWVAR 40
1828: PUSH
1829: LD_INT 4
1831: ST_TO_ADDR
// veh := CreateVehicle ;
1832: LD_ADDR_VAR 0 2
1836: PUSH
1837: CALL_OW 45
1841: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1842: LD_VAR 0 2
1846: PPUSH
1847: LD_INT 4
1849: PPUSH
1850: LD_INT 0
1852: PPUSH
1853: CALL_OW 49
// vc_weapon := us_double_gun ;
1857: LD_ADDR_OWVAR 40
1861: PUSH
1862: LD_INT 5
1864: ST_TO_ADDR
// vc_control := control_manual ;
1865: LD_ADDR_OWVAR 38
1869: PUSH
1870: LD_INT 1
1872: ST_TO_ADDR
// veh := CreateVehicle ;
1873: LD_ADDR_VAR 0 2
1877: PUSH
1878: CALL_OW 45
1882: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1883: LD_VAR 0 2
1887: PPUSH
1888: LD_INT 4
1890: PPUSH
1891: LD_INT 0
1893: PPUSH
1894: CALL_OW 49
// vc_weapon := us_light_gun ;
1898: LD_ADDR_OWVAR 40
1902: PUSH
1903: LD_INT 3
1905: ST_TO_ADDR
// vc_control := control_computer ;
1906: LD_ADDR_OWVAR 38
1910: PUSH
1911: LD_INT 3
1913: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1914: LD_ADDR_OWVAR 37
1918: PUSH
1919: LD_INT 2
1921: ST_TO_ADDR
// veh := CreateVehicle ;
1922: LD_ADDR_VAR 0 2
1926: PUSH
1927: CALL_OW 45
1931: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1932: LD_VAR 0 2
1936: PPUSH
1937: LD_INT 4
1939: PPUSH
1940: LD_INT 0
1942: PPUSH
1943: CALL_OW 49
// vc_weapon := us_gatling_gun ;
1947: LD_ADDR_OWVAR 40
1951: PUSH
1952: LD_INT 4
1954: ST_TO_ADDR
// veh := CreateVehicle ;
1955: LD_ADDR_VAR 0 2
1959: PUSH
1960: CALL_OW 45
1964: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1965: LD_VAR 0 2
1969: PPUSH
1970: LD_INT 4
1972: PPUSH
1973: LD_INT 0
1975: PPUSH
1976: CALL_OW 49
// end ;
1980: LD_VAR 0 1
1984: RET
// export function PowellSupport1 ; var veh , un ; begin
1985: LD_INT 0
1987: PPUSH
1988: PPUSH
1989: PPUSH
// uc_side := 1 ;
1990: LD_ADDR_OWVAR 20
1994: PUSH
1995: LD_INT 1
1997: ST_TO_ADDR
// uc_nation := 1 ;
1998: LD_ADDR_OWVAR 21
2002: PUSH
2003: LD_INT 1
2005: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) then
2006: LD_STRING 11_Brown
2008: PPUSH
2009: CALL_OW 28
2013: IFFALSE 2063
// begin Brown := PrepareUnit ( Brown , true , 11_ ) ;
2015: LD_ADDR_EXP 7
2019: PUSH
2020: LD_STRING Brown
2022: PPUSH
2023: LD_INT 1
2025: PPUSH
2026: LD_STRING 11_
2028: PPUSH
2029: CALL 38838 0 3
2033: ST_TO_ADDR
// SetClass ( Brown , class_engineer ) ;
2034: LD_EXP 7
2038: PPUSH
2039: LD_INT 2
2041: PPUSH
2042: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
2046: LD_EXP 7
2050: PPUSH
2051: LD_INT 4
2053: PPUSH
2054: LD_INT 0
2056: PPUSH
2057: CALL_OW 49
// end else
2061: GO 2079
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2063: LD_INT 4
2065: PPUSH
2066: LD_INT 0
2068: PPUSH
2069: LD_INT 1
2071: PPUSH
2072: LD_INT 0
2074: PPUSH
2075: CALL 1362 0 4
// if TestCharacters ( 11_Gary ) then
2079: LD_STRING 11_Gary
2081: PPUSH
2082: CALL_OW 28
2086: IFFALSE 2136
// begin Gary := PrepareUnit ( Gary , true , 11_ ) ;
2088: LD_ADDR_EXP 11
2092: PUSH
2093: LD_STRING Gary
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: LD_STRING 11_
2101: PPUSH
2102: CALL 38838 0 3
2106: ST_TO_ADDR
// SetClass ( Gary , class_engineer ) ;
2107: LD_EXP 11
2111: PPUSH
2112: LD_INT 2
2114: PPUSH
2115: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2119: LD_EXP 11
2123: PPUSH
2124: LD_INT 4
2126: PPUSH
2127: LD_INT 0
2129: PPUSH
2130: CALL_OW 49
// end else
2134: GO 2152
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2136: LD_INT 4
2138: PPUSH
2139: LD_INT 0
2141: PPUSH
2142: LD_INT 1
2144: PPUSH
2145: LD_INT 0
2147: PPUSH
2148: CALL 1362 0 4
// vc_chassis := us_medium_tracked ;
2152: LD_ADDR_OWVAR 37
2156: PUSH
2157: LD_INT 3
2159: ST_TO_ADDR
// vc_engine := engine_siberite ;
2160: LD_ADDR_OWVAR 39
2164: PUSH
2165: LD_INT 3
2167: ST_TO_ADDR
// vc_control := control_manual ;
2168: LD_ADDR_OWVAR 38
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// vc_weapon := us_crane ;
2176: LD_ADDR_OWVAR 40
2180: PUSH
2181: LD_INT 13
2183: ST_TO_ADDR
// veh := CreateVehicle ;
2184: LD_ADDR_VAR 0 2
2188: PUSH
2189: CALL_OW 45
2193: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2194: LD_VAR 0 2
2198: PPUSH
2199: LD_INT 4
2201: PPUSH
2202: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2206: LD_VAR 0 2
2210: PPUSH
2211: LD_INT 4
2213: PPUSH
2214: LD_INT 0
2216: PPUSH
2217: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2221: LD_INT 4
2223: PPUSH
2224: LD_VAR 0 2
2228: PPUSH
2229: LD_INT 2
2231: PPUSH
2232: LD_INT 1
2234: PPUSH
2235: CALL 1362 0 4
// vc_weapon := us_laser ;
2239: LD_ADDR_OWVAR 40
2243: PUSH
2244: LD_INT 9
2246: ST_TO_ADDR
// veh := CreateVehicle ;
2247: LD_ADDR_VAR 0 2
2251: PUSH
2252: CALL_OW 45
2256: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2257: LD_VAR 0 2
2261: PPUSH
2262: LD_INT 4
2264: PPUSH
2265: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2269: LD_VAR 0 2
2273: PPUSH
2274: LD_INT 4
2276: PPUSH
2277: LD_INT 0
2279: PPUSH
2280: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2284: LD_INT 4
2286: PPUSH
2287: LD_VAR 0 2
2291: PPUSH
2292: LD_INT 2
2294: PPUSH
2295: LD_INT 1
2297: PPUSH
2298: CALL 1362 0 4
// vc_control := control_computer ;
2302: LD_ADDR_OWVAR 38
2306: PUSH
2307: LD_INT 3
2309: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2310: LD_ADDR_OWVAR 40
2314: PUSH
2315: LD_INT 12
2317: ST_TO_ADDR
// veh := CreateVehicle ;
2318: LD_ADDR_VAR 0 2
2322: PUSH
2323: CALL_OW 45
2327: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2328: LD_VAR 0 2
2332: PPUSH
2333: LD_INT 17
2335: PPUSH
2336: CALL_OW 109
// SetDir ( veh , 4 ) ;
2340: LD_VAR 0 2
2344: PPUSH
2345: LD_INT 4
2347: PPUSH
2348: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2352: LD_VAR 0 2
2356: PPUSH
2357: LD_INT 4
2359: PPUSH
2360: LD_INT 0
2362: PPUSH
2363: CALL_OW 49
// AddCargo ( veh , mat_siberit , 100 ) ;
2367: LD_VAR 0 2
2371: PPUSH
2372: LD_INT 3
2374: PPUSH
2375: LD_INT 100
2377: PPUSH
2378: CALL_OW 291
// veh := CreateVehicle ;
2382: LD_ADDR_VAR 0 2
2386: PUSH
2387: CALL_OW 45
2391: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2392: LD_VAR 0 2
2396: PPUSH
2397: LD_INT 17
2399: PPUSH
2400: CALL_OW 109
// SetDir ( veh , 4 ) ;
2404: LD_VAR 0 2
2408: PPUSH
2409: LD_INT 4
2411: PPUSH
2412: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2416: LD_VAR 0 2
2420: PPUSH
2421: LD_INT 4
2423: PPUSH
2424: LD_INT 0
2426: PPUSH
2427: CALL_OW 49
// AddCargo ( veh , mat_siberit , 20 ) ;
2431: LD_VAR 0 2
2435: PPUSH
2436: LD_INT 3
2438: PPUSH
2439: LD_INT 20
2441: PPUSH
2442: CALL_OW 291
// AddCargo ( veh , mat_cans , 80 ) ;
2446: LD_VAR 0 2
2450: PPUSH
2451: LD_INT 1
2453: PPUSH
2454: LD_INT 80
2456: PPUSH
2457: CALL_OW 291
// end ;
2461: LD_VAR 0 1
2465: RET
// export function PowellSupport2 ; var veh , un ; begin
2466: LD_INT 0
2468: PPUSH
2469: PPUSH
2470: PPUSH
// uc_side := 1 ;
2471: LD_ADDR_OWVAR 20
2475: PUSH
2476: LD_INT 1
2478: ST_TO_ADDR
// uc_nation := 1 ;
2479: LD_ADDR_OWVAR 21
2483: PUSH
2484: LD_INT 1
2486: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2487: LD_ADDR_OWVAR 37
2491: PUSH
2492: LD_INT 2
2494: ST_TO_ADDR
// vc_engine := engine_siberite ;
2495: LD_ADDR_OWVAR 39
2499: PUSH
2500: LD_INT 3
2502: ST_TO_ADDR
// vc_control := control_computer ;
2503: LD_ADDR_OWVAR 38
2507: PUSH
2508: LD_INT 3
2510: ST_TO_ADDR
// vc_weapon := us_light_gun ;
2511: LD_ADDR_OWVAR 40
2515: PUSH
2516: LD_INT 3
2518: ST_TO_ADDR
// veh := CreateVehicle ;
2519: LD_ADDR_VAR 0 2
2523: PUSH
2524: CALL_OW 45
2528: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2529: LD_VAR 0 2
2533: PPUSH
2534: LD_INT 4
2536: PPUSH
2537: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2541: LD_VAR 0 2
2545: PPUSH
2546: LD_INT 4
2548: PPUSH
2549: LD_INT 0
2551: PPUSH
2552: CALL_OW 49
// vc_control := control_manual ;
2556: LD_ADDR_OWVAR 38
2560: PUSH
2561: LD_INT 1
2563: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2564: LD_ADDR_OWVAR 37
2568: PUSH
2569: LD_INT 2
2571: ST_TO_ADDR
// vc_weapon := us_double_gun ;
2572: LD_ADDR_OWVAR 40
2576: PUSH
2577: LD_INT 5
2579: ST_TO_ADDR
// veh := CreateVehicle ;
2580: LD_ADDR_VAR 0 2
2584: PUSH
2585: CALL_OW 45
2589: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2590: LD_VAR 0 2
2594: PPUSH
2595: LD_INT 4
2597: PPUSH
2598: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2602: LD_VAR 0 2
2606: PPUSH
2607: LD_INT 4
2609: PPUSH
2610: LD_INT 0
2612: PPUSH
2613: CALL_OW 49
// if TestCharacters ( 11_Bobby ) then
2617: LD_STRING 11_Bobby
2619: PPUSH
2620: CALL_OW 28
2624: IFFALSE 2673
// begin Bobby := PrepareUnit ( Bobby , true , 11_ ) ;
2626: LD_ADDR_EXP 4
2630: PUSH
2631: LD_STRING Bobby
2633: PPUSH
2634: LD_INT 1
2636: PPUSH
2637: LD_STRING 11_
2639: PPUSH
2640: CALL 38838 0 3
2644: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2645: LD_EXP 4
2649: PPUSH
2650: LD_INT 3
2652: PPUSH
2653: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2657: LD_EXP 4
2661: PPUSH
2662: LD_VAR 0 2
2666: PPUSH
2667: CALL_OW 52
// end else
2671: GO 2691
// PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2673: LD_INT 0
2675: PPUSH
2676: LD_VAR 0 2
2680: PPUSH
2681: LD_INT 2
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: CALL 1362 0 4
// if TestCharacters ( 11_Houten ) then
2691: LD_STRING 11_Houten
2693: PPUSH
2694: CALL_OW 28
2698: IFFALSE 2748
// begin Houten := PrepareUnit ( Houten , true , 11_ ) ;
2700: LD_ADDR_EXP 9
2704: PUSH
2705: LD_STRING Houten
2707: PPUSH
2708: LD_INT 1
2710: PPUSH
2711: LD_STRING 11_
2713: PPUSH
2714: CALL 38838 0 3
2718: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2719: LD_EXP 9
2723: PPUSH
2724: LD_INT 1
2726: PPUSH
2727: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2731: LD_EXP 9
2735: PPUSH
2736: LD_INT 4
2738: PPUSH
2739: LD_INT 0
2741: PPUSH
2742: CALL_OW 49
// end else
2746: GO 2764
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2748: LD_INT 4
2750: PPUSH
2751: LD_INT 0
2753: PPUSH
2754: LD_INT 1
2756: PPUSH
2757: LD_INT 0
2759: PPUSH
2760: CALL 1362 0 4
// vc_control := control_computer ;
2764: LD_ADDR_OWVAR 38
2768: PUSH
2769: LD_INT 3
2771: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2772: LD_ADDR_OWVAR 40
2776: PUSH
2777: LD_INT 12
2779: ST_TO_ADDR
// veh := CreateVehicle ;
2780: LD_ADDR_VAR 0 2
2784: PUSH
2785: CALL_OW 45
2789: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2790: LD_VAR 0 2
2794: PPUSH
2795: LD_INT 4
2797: PPUSH
2798: CALL_OW 233
// SetTag ( veh , 17 ) ;
2802: LD_VAR 0 2
2806: PPUSH
2807: LD_INT 17
2809: PPUSH
2810: CALL_OW 109
// AddCargo ( veh , mat_cans , 100 ) ;
2814: LD_VAR 0 2
2818: PPUSH
2819: LD_INT 1
2821: PPUSH
2822: LD_INT 100
2824: PPUSH
2825: CALL_OW 291
// veh := CreateVehicle ;
2829: LD_ADDR_VAR 0 2
2833: PUSH
2834: CALL_OW 45
2838: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2839: LD_VAR 0 2
2843: PPUSH
2844: LD_INT 4
2846: PPUSH
2847: CALL_OW 233
// SetTag ( veh , 17 ) ;
2851: LD_VAR 0 2
2855: PPUSH
2856: LD_INT 17
2858: PPUSH
2859: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2863: LD_VAR 0 2
2867: PPUSH
2868: LD_INT 4
2870: PPUSH
2871: LD_INT 0
2873: PPUSH
2874: CALL_OW 49
// AddCargo ( veh , mat_cans , 100 ) ;
2878: LD_VAR 0 2
2882: PPUSH
2883: LD_INT 1
2885: PPUSH
2886: LD_INT 100
2888: PPUSH
2889: CALL_OW 291
// veh := CreateVehicle ;
2893: LD_ADDR_VAR 0 2
2897: PUSH
2898: CALL_OW 45
2902: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2903: LD_VAR 0 2
2907: PPUSH
2908: LD_INT 4
2910: PPUSH
2911: CALL_OW 233
// SetTag ( veh , 17 ) ;
2915: LD_VAR 0 2
2919: PPUSH
2920: LD_INT 17
2922: PPUSH
2923: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2927: LD_VAR 0 2
2931: PPUSH
2932: LD_INT 4
2934: PPUSH
2935: LD_INT 0
2937: PPUSH
2938: CALL_OW 49
// if kurtStatus then
2942: LD_EXP 19
2946: IFFALSE 2980
// begin AddCargo ( veh , mat_siberit , 60 ) ;
2948: LD_VAR 0 2
2952: PPUSH
2953: LD_INT 3
2955: PPUSH
2956: LD_INT 60
2958: PPUSH
2959: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
2963: LD_VAR 0 2
2967: PPUSH
2968: LD_INT 1
2970: PPUSH
2971: LD_INT 40
2973: PPUSH
2974: CALL_OW 291
// end else
2978: GO 2995
// AddCargo ( veh , mat_cans , 100 ) ;
2980: LD_VAR 0 2
2984: PPUSH
2985: LD_INT 1
2987: PPUSH
2988: LD_INT 100
2990: PPUSH
2991: CALL_OW 291
// veh := CreateVehicle ;
2995: LD_ADDR_VAR 0 2
2999: PUSH
3000: CALL_OW 45
3004: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3005: LD_VAR 0 2
3009: PPUSH
3010: LD_INT 4
3012: PPUSH
3013: CALL_OW 233
// SetTag ( veh , 17 ) ;
3017: LD_VAR 0 2
3021: PPUSH
3022: LD_INT 17
3024: PPUSH
3025: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
3029: LD_VAR 0 2
3033: PPUSH
3034: LD_INT 4
3036: PPUSH
3037: LD_INT 0
3039: PPUSH
3040: CALL_OW 49
// AddCargo ( veh , mat_oil , 60 ) ;
3044: LD_VAR 0 2
3048: PPUSH
3049: LD_INT 2
3051: PPUSH
3052: LD_INT 60
3054: PPUSH
3055: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
3059: LD_VAR 0 2
3063: PPUSH
3064: LD_INT 1
3066: PPUSH
3067: LD_INT 40
3069: PPUSH
3070: CALL_OW 291
// end ;
3074: LD_VAR 0 1
3078: RET
// export function PowellSupport3 ; var i , cargo ; begin
3079: LD_INT 0
3081: PPUSH
3082: PPUSH
3083: PPUSH
// uc_side := 1 ;
3084: LD_ADDR_OWVAR 20
3088: PUSH
3089: LD_INT 1
3091: ST_TO_ADDR
// uc_nation := 1 ;
3092: LD_ADDR_OWVAR 21
3096: PUSH
3097: LD_INT 1
3099: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3100: LD_INT 4
3102: PPUSH
3103: LD_INT 0
3105: PPUSH
3106: LD_INT 1
3108: PPUSH
3109: LD_INT 0
3111: PPUSH
3112: CALL 1362 0 4
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3116: LD_INT 4
3118: PPUSH
3119: LD_INT 0
3121: PPUSH
3122: LD_INT 1
3124: PPUSH
3125: LD_INT 0
3127: PPUSH
3128: CALL 1362 0 4
// for i := 1 to 2 do
3132: LD_ADDR_VAR 0 2
3136: PUSH
3137: DOUBLE
3138: LD_INT 1
3140: DEC
3141: ST_TO_ADDR
3142: LD_INT 2
3144: PUSH
3145: FOR_TO
3146: IFFALSE 3246
// begin vc_chassis := us_medium_wheeled ;
3148: LD_ADDR_OWVAR 37
3152: PUSH
3153: LD_INT 2
3155: ST_TO_ADDR
// vc_engine := engine_siberite ;
3156: LD_ADDR_OWVAR 39
3160: PUSH
3161: LD_INT 3
3163: ST_TO_ADDR
// vc_control = control_computer ;
3164: LD_ADDR_OWVAR 38
3168: PUSH
3169: LD_INT 3
3171: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
3172: LD_ADDR_OWVAR 40
3176: PUSH
3177: LD_INT 12
3179: ST_TO_ADDR
// cargo := CreateVehicle ;
3180: LD_ADDR_VAR 0 3
3184: PUSH
3185: CALL_OW 45
3189: ST_TO_ADDR
// SetDir ( cargo , 4 ) ;
3190: LD_VAR 0 3
3194: PPUSH
3195: LD_INT 4
3197: PPUSH
3198: CALL_OW 233
// SetTag ( cargo , 17 ) ;
3202: LD_VAR 0 3
3206: PPUSH
3207: LD_INT 17
3209: PPUSH
3210: CALL_OW 109
// PlaceUnitArea ( cargo , PlayerSpawn , false ) ;
3214: LD_VAR 0 3
3218: PPUSH
3219: LD_INT 4
3221: PPUSH
3222: LD_INT 0
3224: PPUSH
3225: CALL_OW 49
// AddCargo ( cargo , mat_cans , 100 ) ;
3229: LD_VAR 0 3
3233: PPUSH
3234: LD_INT 1
3236: PPUSH
3237: LD_INT 100
3239: PPUSH
3240: CALL_OW 291
// end ;
3244: GO 3145
3246: POP
3247: POP
// end ; end_of_file
3248: LD_VAR 0 1
3252: RET
// export function PrepareRussianCommander ; begin
3253: LD_INT 0
3255: PPUSH
// uc_side := 3 ;
3256: LD_ADDR_OWVAR 20
3260: PUSH
3261: LD_INT 3
3263: ST_TO_ADDR
// Davidov := PrepareUnit ( Davidov , false ,  ) ;
3264: LD_ADDR_EXP 16
3268: PUSH
3269: LD_STRING Davidov
3271: PPUSH
3272: LD_INT 0
3274: PPUSH
3275: LD_STRING 
3277: PPUSH
3278: CALL 38838 0 3
3282: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3283: LD_EXP 16
3287: PPUSH
3288: LD_INT 3
3290: PPUSH
3291: CALL_OW 52
// RuScientists := Join ( RuScientists , Davidov ) ;
3295: LD_ADDR_EXP 27
3299: PUSH
3300: LD_EXP 27
3304: PPUSH
3305: LD_EXP 16
3309: PPUSH
3310: CALL 76214 0 2
3314: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3315: LD_EXP 27
3319: PPUSH
3320: LD_INT 4
3322: PPUSH
3323: CALL_OW 336
// end ;
3327: LD_VAR 0 1
3331: RET
// export function PrepareEastBase ; var i , un ; begin
3332: LD_INT 0
3334: PPUSH
3335: PPUSH
3336: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3337: LD_INT 3
3339: PPUSH
3340: LD_INT 3
3342: PPUSH
3343: LD_INT 121
3345: PPUSH
3346: LD_EXP 29
3350: PPUSH
3351: LD_EXP 30
3355: PPUSH
3356: CALL_OW 12
3360: PPUSH
3361: LD_INT 1
3363: PPUSH
3364: LD_INT 3
3366: PPUSH
3367: CALL 12731 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3371: LD_INT 3
3373: PPUSH
3374: LD_INT 3
3376: PPUSH
3377: LD_INT 121
3379: PPUSH
3380: LD_EXP 29
3384: PPUSH
3385: LD_EXP 30
3389: PPUSH
3390: CALL_OW 12
3394: PPUSH
3395: LD_INT 9
3397: PPUSH
3398: LD_INT 3
3400: PPUSH
3401: CALL 12731 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3405: LD_INT 3
3407: PPUSH
3408: LD_INT 3
3410: PPUSH
3411: LD_INT 4
3413: PPUSH
3414: LD_EXP 29
3418: PPUSH
3419: LD_EXP 30
3423: PPUSH
3424: CALL_OW 12
3428: PPUSH
3429: LD_INT 2
3431: PPUSH
3432: LD_INT 6
3434: PPUSH
3435: CALL 12731 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3439: LD_INT 3
3441: PPUSH
3442: LD_INT 3
3444: PPUSH
3445: LD_INT 112
3447: PPUSH
3448: LD_EXP 29
3452: PPUSH
3453: LD_EXP 30
3457: PPUSH
3458: CALL_OW 12
3462: PPUSH
3463: LD_INT 3
3465: PPUSH
3466: LD_INT 6
3468: PPUSH
3469: CALL 12731 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3473: LD_INT 3
3475: PPUSH
3476: LD_INT 3
3478: PPUSH
3479: LD_INT 47
3481: PPUSH
3482: LD_EXP 29
3486: PPUSH
3487: LD_EXP 30
3491: PPUSH
3492: CALL_OW 12
3496: PPUSH
3497: LD_INT 4
3499: PPUSH
3500: LD_INT 6
3502: PPUSH
3503: CALL 12731 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3507: LD_INT 3
3509: PPUSH
3510: LD_INT 3
3512: PPUSH
3513: LD_INT 129
3515: PPUSH
3516: LD_EXP 29
3520: PPUSH
3521: LD_EXP 30
3525: PPUSH
3526: CALL_OW 12
3530: PPUSH
3531: LD_INT 4
3533: PPUSH
3534: LD_INT 6
3536: PPUSH
3537: CALL 12731 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3541: LD_INT 3
3543: PPUSH
3544: LD_INT 3
3546: PPUSH
3547: LD_INT 135
3549: PPUSH
3550: LD_EXP 29
3554: PPUSH
3555: LD_EXP 30
3559: PPUSH
3560: CALL_OW 12
3564: PPUSH
3565: LD_INT 4
3567: PPUSH
3568: LD_INT 6
3570: PPUSH
3571: CALL 12731 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3575: LD_ADDR_VAR 0 2
3579: PUSH
3580: LD_INT 22
3582: PUSH
3583: LD_INT 3
3585: PUSH
3586: EMPTY
3587: LIST
3588: LIST
3589: PUSH
3590: LD_INT 30
3592: PUSH
3593: LD_INT 32
3595: PUSH
3596: EMPTY
3597: LIST
3598: LIST
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: PPUSH
3604: CALL_OW 69
3608: PUSH
3609: FOR_IN
3610: IFFALSE 3650
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3612: LD_INT 3
3614: PPUSH
3615: LD_INT 3
3617: PPUSH
3618: LD_VAR 0 2
3622: PPUSH
3623: LD_EXP 29
3627: PPUSH
3628: LD_EXP 30
3632: PPUSH
3633: CALL_OW 12
3637: PPUSH
3638: LD_INT 1
3640: PPUSH
3641: LD_INT 1
3643: PPUSH
3644: CALL 12731 0 6
3648: GO 3609
3650: POP
3651: POP
// for i := 1 to 5 do
3652: LD_ADDR_VAR 0 2
3656: PUSH
3657: DOUBLE
3658: LD_INT 1
3660: DEC
3661: ST_TO_ADDR
3662: LD_INT 5
3664: PUSH
3665: FOR_TO
3666: IFFALSE 3769
// begin uc_side := 3 ;
3668: LD_ADDR_OWVAR 20
3672: PUSH
3673: LD_INT 3
3675: ST_TO_ADDR
// uc_nation := 3 ;
3676: LD_ADDR_OWVAR 21
3680: PUSH
3681: LD_INT 3
3683: ST_TO_ADDR
// hc_gallery :=  ;
3684: LD_ADDR_OWVAR 33
3688: PUSH
3689: LD_STRING 
3691: ST_TO_ADDR
// hc_name :=  ;
3692: LD_ADDR_OWVAR 26
3696: PUSH
3697: LD_STRING 
3699: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3700: LD_INT 0
3702: PPUSH
3703: LD_INT 4
3705: PPUSH
3706: LD_EXP 29
3710: PPUSH
3711: LD_EXP 30
3715: PPUSH
3716: CALL_OW 12
3720: PPUSH
3721: CALL_OW 380
// un := CreateHuman ;
3725: LD_ADDR_VAR 0 3
3729: PUSH
3730: CALL_OW 44
3734: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3735: LD_VAR 0 3
3739: PPUSH
3740: LD_INT 3
3742: PPUSH
3743: CALL_OW 52
// RuScientists := Join ( RuScientists , un ) ;
3747: LD_ADDR_EXP 27
3751: PUSH
3752: LD_EXP 27
3756: PPUSH
3757: LD_VAR 0 3
3761: PPUSH
3762: CALL 76214 0 2
3766: ST_TO_ADDR
// end ;
3767: GO 3665
3769: POP
3770: POP
// end ;
3771: LD_VAR 0 1
3775: RET
// export function PrepareWestBase ; var i , un ; begin
3776: LD_INT 0
3778: PPUSH
3779: PPUSH
3780: PPUSH
// TeleportExit ( ruteleprt , 122 , 145 ) ;
3781: LD_INT 10
3783: PPUSH
3784: LD_INT 122
3786: PPUSH
3787: LD_INT 145
3789: PPUSH
3790: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
3794: LD_INT 137
3796: PPUSH
3797: LD_INT 84
3799: PPUSH
3800: LD_INT 61
3802: PPUSH
3803: CALL_OW 243
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3807: LD_INT 3
3809: PPUSH
3810: LD_INT 3
3812: PPUSH
3813: LD_INT 6
3815: PPUSH
3816: LD_EXP 29
3820: PPUSH
3821: LD_EXP 30
3825: PPUSH
3826: CALL_OW 12
3830: PPUSH
3831: LD_INT 2
3833: PPUSH
3834: LD_INT 3
3836: PPUSH
3837: CALL 12731 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3841: LD_INT 3
3843: PPUSH
3844: LD_INT 3
3846: PPUSH
3847: LD_INT 91
3849: PPUSH
3850: LD_EXP 29
3854: PPUSH
3855: LD_EXP 30
3859: PPUSH
3860: CALL_OW 12
3864: PPUSH
3865: LD_INT 4
3867: PPUSH
3868: LD_INT 3
3870: PPUSH
3871: CALL 12731 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3875: LD_INT 3
3877: PPUSH
3878: LD_INT 3
3880: PPUSH
3881: LD_INT 21
3883: PPUSH
3884: LD_EXP 29
3888: PPUSH
3889: LD_EXP 30
3893: PPUSH
3894: CALL_OW 12
3898: PPUSH
3899: LD_INT 3
3901: PPUSH
3902: LD_INT 6
3904: PPUSH
3905: CALL 12731 0 6
// end ;
3909: LD_VAR 0 1
3913: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3914: LD_INT 0
3916: PPUSH
3917: PPUSH
3918: PPUSH
3919: PPUSH
// uc_side := 3 ;
3920: LD_ADDR_OWVAR 20
3924: PUSH
3925: LD_INT 3
3927: ST_TO_ADDR
// uc_nation := 3 ;
3928: LD_ADDR_OWVAR 21
3932: PUSH
3933: LD_INT 3
3935: ST_TO_ADDR
// for i := 1 to 5 do
3936: LD_ADDR_VAR 0 2
3940: PUSH
3941: DOUBLE
3942: LD_INT 1
3944: DEC
3945: ST_TO_ADDR
3946: LD_INT 5
3948: PUSH
3949: FOR_TO
3950: IFFALSE 4020
// begin hc_gallery :=  ;
3952: LD_ADDR_OWVAR 33
3956: PUSH
3957: LD_STRING 
3959: ST_TO_ADDR
// hc_name :=  ;
3960: LD_ADDR_OWVAR 26
3964: PUSH
3965: LD_STRING 
3967: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3968: LD_INT 0
3970: PPUSH
3971: LD_INT 9
3973: PPUSH
3974: LD_EXP 29
3978: PPUSH
3979: LD_EXP 30
3983: PPUSH
3984: CALL_OW 12
3988: PPUSH
3989: CALL_OW 380
// un := CreateHuman ;
3993: LD_ADDR_VAR 0 3
3997: PUSH
3998: CALL_OW 44
4002: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4003: LD_VAR 0 3
4007: PPUSH
4008: LD_INT 8
4010: PPUSH
4011: LD_INT 0
4013: PPUSH
4014: CALL_OW 49
// end ;
4018: GO 3949
4020: POP
4021: POP
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4022: LD_ADDR_VAR 0 2
4026: PUSH
4027: DOUBLE
4028: LD_INT 1
4030: DEC
4031: ST_TO_ADDR
4032: LD_INT 2
4034: PUSH
4035: LD_INT 3
4037: PUSH
4038: LD_INT 4
4040: PUSH
4041: LD_INT 4
4043: PUSH
4044: EMPTY
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: PUSH
4050: LD_OWVAR 67
4054: ARRAY
4055: PUSH
4056: FOR_TO
4057: IFFALSE 4127
// begin hc_gallery :=  ;
4059: LD_ADDR_OWVAR 33
4063: PUSH
4064: LD_STRING 
4066: ST_TO_ADDR
// hc_name :=  ;
4067: LD_ADDR_OWVAR 26
4071: PUSH
4072: LD_STRING 
4074: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4075: LD_INT 0
4077: PPUSH
4078: LD_INT 4
4080: PPUSH
4081: LD_EXP 29
4085: PPUSH
4086: LD_EXP 30
4090: PPUSH
4091: CALL_OW 12
4095: PPUSH
4096: CALL_OW 380
// un := CreateHuman ;
4100: LD_ADDR_VAR 0 3
4104: PUSH
4105: CALL_OW 44
4109: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4110: LD_VAR 0 3
4114: PPUSH
4115: LD_INT 8
4117: PPUSH
4118: LD_INT 0
4120: PPUSH
4121: CALL_OW 49
// end ;
4125: GO 4056
4127: POP
4128: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4129: LD_ADDR_VAR 0 2
4133: PUSH
4134: DOUBLE
4135: LD_INT 1
4137: DEC
4138: ST_TO_ADDR
4139: LD_INT 3
4141: PUSH
4142: LD_INT 4
4144: PUSH
4145: LD_INT 5
4147: PUSH
4148: LD_INT 5
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: LIST
4155: LIST
4156: PUSH
4157: LD_OWVAR 67
4161: ARRAY
4162: PUSH
4163: FOR_TO
4164: IFFALSE 4381
// begin vc_engine = 3 ;
4166: LD_ADDR_OWVAR 39
4170: PUSH
4171: LD_INT 3
4173: ST_TO_ADDR
// vc_control = 1 ;
4174: LD_ADDR_OWVAR 38
4178: PUSH
4179: LD_INT 1
4181: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ rand ( 1 , 5 ) ] ;
4182: LD_ADDR_OWVAR 40
4186: PUSH
4187: LD_INT 42
4189: PUSH
4190: LD_INT 43
4192: PUSH
4193: LD_INT 44
4195: PUSH
4196: LD_INT 45
4198: PUSH
4199: LD_INT 46
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: LIST
4206: LIST
4207: LIST
4208: PUSH
4209: LD_INT 1
4211: PPUSH
4212: LD_INT 5
4214: PPUSH
4215: CALL_OW 12
4219: ARRAY
4220: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4221: LD_OWVAR 40
4225: PUSH
4226: LD_INT 46
4228: EQUAL
4229: IFFALSE 4241
// vc_chassis := ru_heavy_tracked else
4231: LD_ADDR_OWVAR 37
4235: PUSH
4236: LD_INT 24
4238: ST_TO_ADDR
4239: GO 4268
// vc_chassis := [ ru_medium_tracked , ru_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
4241: LD_ADDR_OWVAR 37
4245: PUSH
4246: LD_INT 22
4248: PUSH
4249: LD_INT 21
4251: PUSH
4252: EMPTY
4253: LIST
4254: LIST
4255: PUSH
4256: LD_INT 1
4258: PPUSH
4259: LD_INT 2
4261: PPUSH
4262: CALL_OW 12
4266: ARRAY
4267: ST_TO_ADDR
// veh := CreateVehicle ;
4268: LD_ADDR_VAR 0 4
4272: PUSH
4273: CALL_OW 45
4277: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4278: LD_VAR 0 4
4282: PPUSH
4283: LD_INT 3
4285: PPUSH
4286: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4290: LD_VAR 0 4
4294: PPUSH
4295: LD_INT 5
4297: PPUSH
4298: LD_INT 0
4300: PPUSH
4301: CALL_OW 49
// hc_gallery :=  ;
4305: LD_ADDR_OWVAR 33
4309: PUSH
4310: LD_STRING 
4312: ST_TO_ADDR
// hc_name :=  ;
4313: LD_ADDR_OWVAR 26
4317: PUSH
4318: LD_STRING 
4320: ST_TO_ADDR
// PrepareHuman ( false , 3 , [ 6 , 7 , 8 , 10 ] [ Difficulty ] ) ;
4321: LD_INT 0
4323: PPUSH
4324: LD_INT 3
4326: PPUSH
4327: LD_INT 6
4329: PUSH
4330: LD_INT 7
4332: PUSH
4333: LD_INT 8
4335: PUSH
4336: LD_INT 10
4338: PUSH
4339: EMPTY
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: PUSH
4345: LD_OWVAR 67
4349: ARRAY
4350: PPUSH
4351: CALL_OW 380
// un = CreateHuman ;
4355: LD_ADDR_VAR 0 3
4359: PUSH
4360: CALL_OW 44
4364: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4365: LD_VAR 0 3
4369: PPUSH
4370: LD_VAR 0 4
4374: PPUSH
4375: CALL_OW 52
// end ;
4379: GO 4163
4381: POP
4382: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4383: LD_ADDR_VAR 0 2
4387: PUSH
4388: DOUBLE
4389: LD_INT 1
4391: DEC
4392: ST_TO_ADDR
4393: LD_INT 3
4395: PUSH
4396: LD_INT 4
4398: PUSH
4399: LD_INT 5
4401: PUSH
4402: LD_INT 5
4404: PUSH
4405: EMPTY
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: PUSH
4411: LD_OWVAR 67
4415: ARRAY
4416: PUSH
4417: FOR_TO
4418: IFFALSE 4565
// begin vc_engine := 3 ;
4420: LD_ADDR_OWVAR 39
4424: PUSH
4425: LD_INT 3
4427: ST_TO_ADDR
// vc_control := 3 ;
4428: LD_ADDR_OWVAR 38
4432: PUSH
4433: LD_INT 3
4435: ST_TO_ADDR
// vc_weapon := [ 42 , 43 , 44 , 45 , 46 , 49 ] [ rand ( 1 , 5 ) ] ;
4436: LD_ADDR_OWVAR 40
4440: PUSH
4441: LD_INT 42
4443: PUSH
4444: LD_INT 43
4446: PUSH
4447: LD_INT 44
4449: PUSH
4450: LD_INT 45
4452: PUSH
4453: LD_INT 46
4455: PUSH
4456: LD_INT 49
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: LIST
4463: LIST
4464: LIST
4465: LIST
4466: PUSH
4467: LD_INT 1
4469: PPUSH
4470: LD_INT 5
4472: PPUSH
4473: CALL_OW 12
4477: ARRAY
4478: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4479: LD_OWVAR 40
4483: PUSH
4484: LD_INT 46
4486: EQUAL
4487: IFFALSE 4499
// vc_chassis := ru_heavy_tracked else
4489: LD_ADDR_OWVAR 37
4493: PUSH
4494: LD_INT 24
4496: ST_TO_ADDR
4497: GO 4526
// vc_chassis := [ ru_medium_tracked , ru_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
4499: LD_ADDR_OWVAR 37
4503: PUSH
4504: LD_INT 22
4506: PUSH
4507: LD_INT 21
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: PUSH
4514: LD_INT 1
4516: PPUSH
4517: LD_INT 2
4519: PPUSH
4520: CALL_OW 12
4524: ARRAY
4525: ST_TO_ADDR
// veh := CreateVehicle ;
4526: LD_ADDR_VAR 0 4
4530: PUSH
4531: CALL_OW 45
4535: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4536: LD_VAR 0 4
4540: PPUSH
4541: LD_INT 3
4543: PPUSH
4544: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4548: LD_VAR 0 4
4552: PPUSH
4553: LD_INT 6
4555: PPUSH
4556: LD_INT 0
4558: PPUSH
4559: CALL_OW 49
// end ;
4563: GO 4417
4565: POP
4566: POP
// end ; end_of_file
4567: LD_VAR 0 1
4571: RET
// export function PrepareKurt ; begin
4572: LD_INT 0
4574: PPUSH
// uc_side := 8 ;
4575: LD_ADDR_OWVAR 20
4579: PUSH
4580: LD_INT 8
4582: ST_TO_ADDR
// uc_nation := 2 ;
4583: LD_ADDR_OWVAR 21
4587: PUSH
4588: LD_INT 2
4590: ST_TO_ADDR
// vc_chassis := ar_medium_trike ;
4591: LD_ADDR_OWVAR 37
4595: PUSH
4596: LD_INT 13
4598: ST_TO_ADDR
// vc_engine := 1 ;
4599: LD_ADDR_OWVAR 39
4603: PUSH
4604: LD_INT 1
4606: ST_TO_ADDR
// vc_control := 1 ;
4607: LD_ADDR_OWVAR 38
4611: PUSH
4612: LD_INT 1
4614: ST_TO_ADDR
// vc_weapon := 24 ;
4615: LD_ADDR_OWVAR 40
4619: PUSH
4620: LD_INT 24
4622: ST_TO_ADDR
// KurtVeh := CreateVehicle ;
4623: LD_ADDR_EXP 18
4627: PUSH
4628: CALL_OW 45
4632: ST_TO_ADDR
// if kurtStatus > 0 then
4633: LD_EXP 19
4637: PUSH
4638: LD_INT 0
4640: GREATER
4641: IFFALSE 4693
// begin Kurt := PrepareUnit ( Kurt , false ,  ) ;
4643: LD_ADDR_EXP 17
4647: PUSH
4648: LD_STRING Kurt
4650: PPUSH
4651: LD_INT 0
4653: PPUSH
4654: LD_STRING 
4656: PPUSH
4657: CALL 38838 0 3
4661: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4662: LD_EXP 18
4666: PPUSH
4667: LD_INT 4
4669: PPUSH
4670: LD_INT 0
4672: PPUSH
4673: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4677: LD_EXP 17
4681: PPUSH
4682: LD_EXP 18
4686: PPUSH
4687: CALL_OW 52
// end else
4691: GO 4770
// begin hc_name :=  ;
4693: LD_ADDR_OWVAR 26
4697: PUSH
4698: LD_STRING 
4700: ST_TO_ADDR
// hc_gallery :=  ;
4701: LD_ADDR_OWVAR 33
4705: PUSH
4706: LD_STRING 
4708: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4709: LD_INT 1
4711: PPUSH
4712: LD_INT 10
4714: PPUSH
4715: CALL_OW 381
// Kurt := CreateHuman ;
4719: LD_ADDR_EXP 17
4723: PUSH
4724: CALL_OW 44
4728: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4729: LD_EXP 18
4733: PPUSH
4734: LD_INT 4
4736: PPUSH
4737: LD_INT 0
4739: PPUSH
4740: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4744: LD_EXP 17
4748: PPUSH
4749: LD_EXP 18
4753: PPUSH
4754: CALL_OW 52
// SaveCharacters ( Kurt , AltKurt ) ;
4758: LD_EXP 17
4762: PPUSH
4763: LD_STRING AltKurt
4765: PPUSH
4766: CALL_OW 38
// end ; end ;
4770: LD_VAR 0 1
4774: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4775: LD_INT 0
4777: PPUSH
4778: PPUSH
4779: PPUSH
4780: PPUSH
// for i := 1 to 3 do
4781: LD_ADDR_VAR 0 2
4785: PUSH
4786: DOUBLE
4787: LD_INT 1
4789: DEC
4790: ST_TO_ADDR
4791: LD_INT 3
4793: PUSH
4794: FOR_TO
4795: IFFALSE 4916
// begin uc_side := 1 ;
4797: LD_ADDR_OWVAR 20
4801: PUSH
4802: LD_INT 1
4804: ST_TO_ADDR
// uc_nation := 2 ;
4805: LD_ADDR_OWVAR 21
4809: PUSH
4810: LD_INT 2
4812: ST_TO_ADDR
// hc_gallery =  ;
4813: LD_ADDR_OWVAR 33
4817: PUSH
4818: LD_STRING 
4820: ST_TO_ADDR
// hc_name =  ;
4821: LD_ADDR_OWVAR 26
4825: PUSH
4826: LD_STRING 
4828: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4829: LD_EXP 19
4833: PUSH
4834: LD_INT 0
4836: EQUAL
4837: PUSH
4838: LD_EXP 19
4842: PUSH
4843: LD_INT 2
4845: EQUAL
4846: OR
4847: IFFALSE 4864
// PrepareHuman ( false , 1 , 6 ) else
4849: LD_INT 0
4851: PPUSH
4852: LD_INT 1
4854: PPUSH
4855: LD_INT 6
4857: PPUSH
4858: CALL_OW 380
4862: GO 4877
// PrepareHuman ( false , 1 , 8 ) ;
4864: LD_INT 0
4866: PPUSH
4867: LD_INT 1
4869: PPUSH
4870: LD_INT 8
4872: PPUSH
4873: CALL_OW 380
// un := CreateHuman ;
4877: LD_ADDR_VAR 0 3
4881: PUSH
4882: CALL_OW 44
4886: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4887: LD_VAR 0 3
4891: PPUSH
4892: LD_INT 4
4894: PPUSH
4895: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4899: LD_VAR 0 3
4903: PPUSH
4904: LD_INT 4
4906: PPUSH
4907: LD_INT 0
4909: PPUSH
4910: CALL_OW 49
// end ;
4914: GO 4794
4916: POP
4917: POP
// vc_chassis := 14 ;
4918: LD_ADDR_OWVAR 37
4922: PUSH
4923: LD_INT 14
4925: ST_TO_ADDR
// vc_engine := 3 ;
4926: LD_ADDR_OWVAR 39
4930: PUSH
4931: LD_INT 3
4933: ST_TO_ADDR
// vc_control := 1 ;
4934: LD_ADDR_OWVAR 38
4938: PUSH
4939: LD_INT 1
4941: ST_TO_ADDR
// vc_weapon := [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4942: LD_ADDR_OWVAR 40
4946: PUSH
4947: LD_INT 27
4949: PUSH
4950: LD_INT 26
4952: PUSH
4953: LD_INT 28
4955: PUSH
4956: EMPTY
4957: LIST
4958: LIST
4959: LIST
4960: PUSH
4961: LD_INT 1
4963: PPUSH
4964: LD_INT 3
4966: PPUSH
4967: CALL_OW 12
4971: ARRAY
4972: ST_TO_ADDR
// veh := CreateVehicle ;
4973: LD_ADDR_VAR 0 4
4977: PUSH
4978: CALL_OW 45
4982: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4983: LD_VAR 0 4
4987: PPUSH
4988: LD_INT 4
4990: PPUSH
4991: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4995: LD_VAR 0 4
4999: PPUSH
5000: LD_INT 4
5002: PPUSH
5003: LD_INT 0
5005: PPUSH
5006: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5010: LD_EXP 19
5014: PUSH
5015: LD_INT 0
5017: EQUAL
5018: PUSH
5019: LD_EXP 19
5023: PUSH
5024: LD_INT 2
5026: EQUAL
5027: OR
5028: IFFALSE 5045
// PrepareHuman ( false , 3 , 6 ) else
5030: LD_INT 0
5032: PPUSH
5033: LD_INT 3
5035: PPUSH
5036: LD_INT 6
5038: PPUSH
5039: CALL_OW 380
5043: GO 5058
// PrepareHuman ( false , 3 , 8 ) ;
5045: LD_INT 0
5047: PPUSH
5048: LD_INT 3
5050: PPUSH
5051: LD_INT 8
5053: PPUSH
5054: CALL_OW 380
// un := CreateHuman ;
5058: LD_ADDR_VAR 0 3
5062: PUSH
5063: CALL_OW 44
5067: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5068: LD_VAR 0 3
5072: PPUSH
5073: LD_VAR 0 4
5077: PPUSH
5078: CALL_OW 52
// vc_chassis := 14 ;
5082: LD_ADDR_OWVAR 37
5086: PUSH
5087: LD_INT 14
5089: ST_TO_ADDR
// vc_engine := 3 ;
5090: LD_ADDR_OWVAR 39
5094: PUSH
5095: LD_INT 3
5097: ST_TO_ADDR
// vc_control := 1 ;
5098: LD_ADDR_OWVAR 38
5102: PUSH
5103: LD_INT 1
5105: ST_TO_ADDR
// vc_weapon := [ 27 , 26 , 28 ] [ rand ( 1 , 3 ) ] ;
5106: LD_ADDR_OWVAR 40
5110: PUSH
5111: LD_INT 27
5113: PUSH
5114: LD_INT 26
5116: PUSH
5117: LD_INT 28
5119: PUSH
5120: EMPTY
5121: LIST
5122: LIST
5123: LIST
5124: PUSH
5125: LD_INT 1
5127: PPUSH
5128: LD_INT 3
5130: PPUSH
5131: CALL_OW 12
5135: ARRAY
5136: ST_TO_ADDR
// veh := CreateVehicle ;
5137: LD_ADDR_VAR 0 4
5141: PUSH
5142: CALL_OW 45
5146: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5147: LD_VAR 0 4
5151: PPUSH
5152: LD_INT 4
5154: PPUSH
5155: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5159: LD_VAR 0 4
5163: PPUSH
5164: LD_INT 4
5166: PPUSH
5167: LD_INT 0
5169: PPUSH
5170: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5174: LD_EXP 19
5178: PUSH
5179: LD_INT 0
5181: EQUAL
5182: PUSH
5183: LD_EXP 19
5187: PUSH
5188: LD_INT 2
5190: EQUAL
5191: OR
5192: IFFALSE 5209
// PrepareHuman ( false , 4 , 6 ) else
5194: LD_INT 0
5196: PPUSH
5197: LD_INT 4
5199: PPUSH
5200: LD_INT 6
5202: PPUSH
5203: CALL_OW 380
5207: GO 5222
// PrepareHuman ( false , 4 , 8 ) ;
5209: LD_INT 0
5211: PPUSH
5212: LD_INT 4
5214: PPUSH
5215: LD_INT 8
5217: PPUSH
5218: CALL_OW 380
// un := CreateHuman ;
5222: LD_ADDR_VAR 0 3
5226: PUSH
5227: CALL_OW 44
5231: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5232: LD_VAR 0 3
5236: PPUSH
5237: LD_INT 4
5239: PPUSH
5240: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5244: LD_VAR 0 3
5248: PPUSH
5249: LD_VAR 0 4
5253: PPUSH
5254: CALL_OW 52
// vc_chassis := 14 ;
5258: LD_ADDR_OWVAR 37
5262: PUSH
5263: LD_INT 14
5265: ST_TO_ADDR
// vc_engine := 3 ;
5266: LD_ADDR_OWVAR 39
5270: PUSH
5271: LD_INT 3
5273: ST_TO_ADDR
// vc_control := 1 ;
5274: LD_ADDR_OWVAR 38
5278: PUSH
5279: LD_INT 1
5281: ST_TO_ADDR
// vc_weapon := 26 ;
5282: LD_ADDR_OWVAR 40
5286: PUSH
5287: LD_INT 26
5289: ST_TO_ADDR
// veh := CreateVehicle ;
5290: LD_ADDR_VAR 0 4
5294: PUSH
5295: CALL_OW 45
5299: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5300: LD_VAR 0 4
5304: PPUSH
5305: LD_INT 4
5307: PPUSH
5308: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5312: LD_VAR 0 4
5316: PPUSH
5317: LD_INT 4
5319: PPUSH
5320: LD_INT 0
5322: PPUSH
5323: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5327: LD_EXP 19
5331: PUSH
5332: LD_INT 0
5334: EQUAL
5335: PUSH
5336: LD_EXP 19
5340: PUSH
5341: LD_INT 2
5343: EQUAL
5344: OR
5345: IFFALSE 5362
// PrepareHuman ( false , 2 , 4 ) else
5347: LD_INT 0
5349: PPUSH
5350: LD_INT 2
5352: PPUSH
5353: LD_INT 4
5355: PPUSH
5356: CALL_OW 380
5360: GO 5375
// PrepareHuman ( false , 2 , 8 ) ;
5362: LD_INT 0
5364: PPUSH
5365: LD_INT 2
5367: PPUSH
5368: LD_INT 8
5370: PPUSH
5371: CALL_OW 380
// un := CreateHuman ;
5375: LD_ADDR_VAR 0 3
5379: PUSH
5380: CALL_OW 44
5384: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5385: LD_VAR 0 3
5389: PPUSH
5390: LD_INT 4
5392: PPUSH
5393: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5397: LD_VAR 0 3
5401: PPUSH
5402: LD_VAR 0 4
5406: PPUSH
5407: CALL_OW 52
// end ;
5411: LD_VAR 0 1
5415: RET
// export function PrepareAttackLegion ; var i , un ; begin
5416: LD_INT 0
5418: PPUSH
5419: PPUSH
5420: PPUSH
// for i := 1 to 4 do
5421: LD_ADDR_VAR 0 2
5425: PUSH
5426: DOUBLE
5427: LD_INT 1
5429: DEC
5430: ST_TO_ADDR
5431: LD_INT 4
5433: PUSH
5434: FOR_TO
5435: IFFALSE 5545
// begin uc_side := 8 ;
5437: LD_ADDR_OWVAR 20
5441: PUSH
5442: LD_INT 8
5444: ST_TO_ADDR
// uc_nation := 2 ;
5445: LD_ADDR_OWVAR 21
5449: PUSH
5450: LD_INT 2
5452: ST_TO_ADDR
// hc_gallery :=  ;
5453: LD_ADDR_OWVAR 33
5457: PUSH
5458: LD_STRING 
5460: ST_TO_ADDR
// hc_name :=  ;
5461: LD_ADDR_OWVAR 26
5465: PUSH
5466: LD_STRING 
5468: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5469: LD_INT 0
5471: PPUSH
5472: LD_INT 1
5474: PUSH
5475: LD_INT 8
5477: PUSH
5478: EMPTY
5479: LIST
5480: LIST
5481: PUSH
5482: LD_INT 1
5484: PPUSH
5485: LD_INT 2
5487: PPUSH
5488: CALL_OW 12
5492: ARRAY
5493: PPUSH
5494: LD_INT 6
5496: PPUSH
5497: LD_INT 8
5499: PPUSH
5500: CALL_OW 12
5504: PPUSH
5505: CALL_OW 380
// un := CreateHuman ;
5509: LD_ADDR_VAR 0 3
5513: PUSH
5514: CALL_OW 44
5518: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5519: LD_VAR 0 3
5523: PPUSH
5524: LD_INT 19
5526: PPUSH
5527: LD_INT 0
5529: PPUSH
5530: CALL_OW 49
// ComCrawl ( un ) ;
5534: LD_VAR 0 3
5538: PPUSH
5539: CALL_OW 137
// end ;
5543: GO 5434
5545: POP
5546: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5547: LD_INT 1
5549: PPUSH
5550: LD_INT 8
5552: PPUSH
5553: LD_INT 2
5555: PPUSH
5556: LD_INT 1
5558: PPUSH
5559: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5563: LD_INT 20
5565: PPUSH
5566: LD_INT 3
5568: PPUSH
5569: CALL 14566 0 2
// end ; end_of_file
5573: LD_VAR 0 1
5577: RET
// export function Action ; var i , tmp , group ; begin
5578: LD_INT 0
5580: PPUSH
5581: PPUSH
5582: PPUSH
5583: PPUSH
// InGameOn ;
5584: CALL_OW 8
// music_nat := 1 ;
5588: LD_ADDR_OWVAR 71
5592: PUSH
5593: LD_INT 1
5595: ST_TO_ADDR
// group := FilterAllUnits ( [ f_side , 1 ] ) ;
5596: LD_ADDR_VAR 0 4
5600: PUSH
5601: LD_INT 22
5603: PUSH
5604: LD_INT 1
5606: PUSH
5607: EMPTY
5608: LIST
5609: LIST
5610: PPUSH
5611: CALL_OW 69
5615: ST_TO_ADDR
// tmp := IsInUnit ( JMM ) ;
5616: LD_ADDR_VAR 0 3
5620: PUSH
5621: LD_EXP 1
5625: PPUSH
5626: CALL_OW 310
5630: ST_TO_ADDR
// CenterNowOnUnits ( tmp ) ;
5631: LD_VAR 0 3
5635: PPUSH
5636: CALL_OW 87
// ComMoveXY ( group , 130 , 103 ) ;
5640: LD_VAR 0 4
5644: PPUSH
5645: LD_INT 130
5647: PPUSH
5648: LD_INT 103
5650: PPUSH
5651: CALL_OW 111
// AddComMoveXY ( tmp , 114 , 102 ) ;
5655: LD_VAR 0 3
5659: PPUSH
5660: LD_INT 114
5662: PPUSH
5663: LD_INT 102
5665: PPUSH
5666: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5670: LD_EXP 1
5674: PPUSH
5675: LD_STRING D1-JMM-1
5677: PPUSH
5678: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5682: LD_VAR 0 3
5686: PPUSH
5687: CALL_OW 87
// if IsOk ( Donaldson ) then
5691: LD_EXP 3
5695: PPUSH
5696: CALL_OW 302
5700: IFFALSE 5765
// begin Say ( Donaldson , D1-Don-1 ) ;
5702: LD_EXP 3
5706: PPUSH
5707: LD_STRING D1-Don-1
5709: PPUSH
5710: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5714: LD_VAR 0 3
5718: PPUSH
5719: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5723: LD_EXP 1
5727: PPUSH
5728: LD_STRING D1-JMM-2
5730: PPUSH
5731: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5735: LD_VAR 0 3
5739: PPUSH
5740: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5744: LD_EXP 3
5748: PPUSH
5749: LD_STRING D1-Don-2
5751: PPUSH
5752: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5756: LD_VAR 0 3
5760: PPUSH
5761: CALL_OW 87
// end ; AddComMoveXY ( group , 110 , 101 ) ;
5765: LD_VAR 0 4
5769: PPUSH
5770: LD_INT 110
5772: PPUSH
5773: LD_INT 101
5775: PPUSH
5776: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5780: LD_INT 35
5782: PPUSH
5783: CALL_OW 67
// CenterNowOnUnits ( tmp ) ;
5787: LD_VAR 0 3
5791: PPUSH
5792: CALL_OW 87
// until SeeXY ( 1 , 102 , 94 ) ;
5796: LD_INT 1
5798: PPUSH
5799: LD_INT 102
5801: PPUSH
5802: LD_INT 94
5804: PPUSH
5805: CALL_OW 293
5809: IFFALSE 5780
// CenterOnXY ( 102 , 94 ) ;
5811: LD_INT 102
5813: PPUSH
5814: LD_INT 94
5816: PPUSH
5817: CALL_OW 84
// DialogRandom ( UnitFilter ( group , [ f_sex , sex_male ] ) , D1-Sol1-2 ,  ) ;
5821: LD_VAR 0 4
5825: PPUSH
5826: LD_INT 26
5828: PUSH
5829: LD_INT 1
5831: PUSH
5832: EMPTY
5833: LIST
5834: LIST
5835: PPUSH
5836: CALL_OW 72
5840: PPUSH
5841: LD_STRING D1-Sol1-2
5843: PPUSH
5844: LD_STRING 
5846: PPUSH
5847: CALL 12226 0 3
// Say ( JMM , D1-JMM-3 ) ;
5851: LD_EXP 1
5855: PPUSH
5856: LD_STRING D1-JMM-3
5858: PPUSH
5859: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5863: LD_STRING M1
5865: PPUSH
5866: CALL_OW 337
// for i in group do
5870: LD_ADDR_VAR 0 2
5874: PUSH
5875: LD_VAR 0 4
5879: PUSH
5880: FOR_IN
5881: IFFALSE 5900
// ComMoveXY ( i , 95 , 84 ) ;
5883: LD_VAR 0 2
5887: PPUSH
5888: LD_INT 95
5890: PPUSH
5891: LD_INT 84
5893: PPUSH
5894: CALL_OW 111
5898: GO 5880
5900: POP
5901: POP
// end ;
5902: LD_VAR 0 1
5906: RET
// every 0 0$1 trigger FilterUnitsInArea ( WaterPass , [ f_side , 1 ] ) > 1 do var i , tmp , dec ;
5907: LD_INT 7
5909: PPUSH
5910: LD_INT 22
5912: PUSH
5913: LD_INT 1
5915: PUSH
5916: EMPTY
5917: LIST
5918: LIST
5919: PPUSH
5920: CALL_OW 70
5924: PUSH
5925: LD_INT 1
5927: GREATER
5928: IFFALSE 6578
5930: GO 5932
5932: DISABLE
5933: LD_INT 0
5935: PPUSH
5936: PPUSH
5937: PPUSH
// begin tmp := FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5938: LD_ADDR_VAR 0 2
5942: PUSH
5943: LD_INT 8
5945: PPUSH
5946: LD_INT 22
5948: PUSH
5949: LD_INT 3
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: PUSH
5956: LD_INT 25
5958: PUSH
5959: LD_INT 9
5961: PUSH
5962: EMPTY
5963: LIST
5964: LIST
5965: PUSH
5966: EMPTY
5967: LIST
5968: LIST
5969: PPUSH
5970: CALL_OW 70
5974: ST_TO_ADDR
// ComTimeShift ( tmp , 96 , 85 ) ;
5975: LD_VAR 0 2
5979: PPUSH
5980: LD_INT 96
5982: PPUSH
5983: LD_INT 85
5985: PPUSH
5986: CALL_OW 154
// for i := 1 to 5 do
5990: LD_ADDR_VAR 0 1
5994: PUSH
5995: DOUBLE
5996: LD_INT 1
5998: DEC
5999: ST_TO_ADDR
6000: LD_INT 5
6002: PUSH
6003: FOR_TO
6004: IFFALSE 6023
// AddComTimeShift ( tmp , 96 , 85 ) ;
6006: LD_VAR 0 2
6010: PPUSH
6011: LD_INT 96
6013: PPUSH
6014: LD_INT 85
6016: PPUSH
6017: CALL_OW 214
6021: GO 6003
6023: POP
6024: POP
// wait ( 0 0$2 ) ;
6025: LD_INT 70
6027: PPUSH
6028: CALL_OW 67
// Say ( JMM , D1a-JMM-1 ) ;
6032: LD_EXP 1
6036: PPUSH
6037: LD_STRING D1a-JMM-1
6039: PPUSH
6040: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
6044: LD_EXP 3
6048: PPUSH
6049: LD_STRING D1a-Don-1
6051: PPUSH
6052: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6056: LD_ADDR_VAR 0 1
6060: PUSH
6061: LD_INT 22
6063: PUSH
6064: LD_INT 1
6066: PUSH
6067: EMPTY
6068: LIST
6069: LIST
6070: PPUSH
6071: CALL_OW 69
6075: PUSH
6076: FOR_IN
6077: IFFALSE 6096
// ComMoveXY ( i , 109 , 102 ) ;
6079: LD_VAR 0 1
6083: PPUSH
6084: LD_INT 109
6086: PPUSH
6087: LD_INT 102
6089: PPUSH
6090: CALL_OW 111
6094: GO 6076
6096: POP
6097: POP
// Say ( JMM , D1a-JMM-2 ) ;
6098: LD_EXP 1
6102: PPUSH
6103: LD_STRING D1a-JMM-2
6105: PPUSH
6106: CALL_OW 88
// wait ( 0 0$10 ) ;
6110: LD_INT 350
6112: PPUSH
6113: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6117: LD_EXP 1
6121: PPUSH
6122: CALL_OW 310
6126: PPUSH
6127: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6131: LD_EXP 3
6135: PPUSH
6136: LD_STRING D1b-Don-1
6138: PPUSH
6139: CALL_OW 88
// if IsOk ( Donaldson ) then
6143: LD_EXP 3
6147: PPUSH
6148: CALL_OW 302
6152: IFFALSE 6166
// Say ( JMM , D1b-JMM-1 ) ;
6154: LD_EXP 1
6158: PPUSH
6159: LD_STRING D1b-JMM-1
6161: PPUSH
6162: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6166: LD_INT 22
6168: PUSH
6169: LD_INT 1
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: PUSH
6176: LD_INT 26
6178: PUSH
6179: LD_INT 1
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: LD_INT 2
6188: PUSH
6189: LD_INT 25
6191: PUSH
6192: LD_INT 1
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: PUSH
6199: LD_INT 25
6201: PUSH
6202: LD_INT 2
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: LD_INT 25
6211: PUSH
6212: LD_INT 3
6214: PUSH
6215: EMPTY
6216: LIST
6217: LIST
6218: PUSH
6219: LD_INT 25
6221: PUSH
6222: LD_INT 4
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: PUSH
6229: LD_INT 25
6231: PUSH
6232: LD_INT 5
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: PUSH
6239: LD_INT 25
6241: PUSH
6242: LD_INT 8
6244: PUSH
6245: EMPTY
6246: LIST
6247: LIST
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: LIST
6255: LIST
6256: LIST
6257: PUSH
6258: EMPTY
6259: LIST
6260: LIST
6261: LIST
6262: PPUSH
6263: CALL_OW 69
6267: PPUSH
6268: LD_STRING D1b-Sol1-1
6270: PPUSH
6271: LD_STRING 
6273: PPUSH
6274: CALL 12226 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6278: LD_EXP 3
6282: PPUSH
6283: LD_STRING D1b-Don-2
6285: PPUSH
6286: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6290: LD_EXP 1
6294: PPUSH
6295: LD_STRING D1b-JMM-2
6297: PPUSH
6298: CALL_OW 88
// dec := ShowQuery1 ;
6302: LD_ADDR_VAR 0 3
6306: PUSH
6307: CALL 12689 0 0
6311: ST_TO_ADDR
// if dec = 1 then
6312: LD_VAR 0 3
6316: PUSH
6317: LD_INT 1
6319: EQUAL
6320: IFFALSE 6426
// begin Say ( JMM , D2-JMM-1 ) ;
6322: LD_EXP 1
6326: PPUSH
6327: LD_STRING D2-JMM-1
6329: PPUSH
6330: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6334: LD_EXP 15
6338: PPUSH
6339: LD_STRING D2-Pow-1
6341: PPUSH
6342: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6346: LD_EXP 1
6350: PPUSH
6351: LD_STRING D2a-JMM-1
6353: PPUSH
6354: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6358: LD_EXP 15
6362: PPUSH
6363: LD_STRING D2a-Pow-1
6365: PPUSH
6366: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6370: LD_EXP 1
6374: PPUSH
6375: LD_STRING D2a-JMM-2
6377: PPUSH
6378: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6382: LD_EXP 15
6386: PPUSH
6387: LD_STRING D2a-Pow-2
6389: PPUSH
6390: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6394: LD_EXP 1
6398: PPUSH
6399: LD_STRING D2a-JMM-3
6401: PPUSH
6402: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6406: LD_EXP 15
6410: PPUSH
6411: LD_STRING D2a-Pow-3
6413: PPUSH
6414: CALL_OW 94
// secondPass := 2 ;
6418: LD_ADDR_EXP 20
6422: PUSH
6423: LD_INT 2
6425: ST_TO_ADDR
// end ; if dec = 2 then
6426: LD_VAR 0 3
6430: PUSH
6431: LD_INT 2
6433: EQUAL
6434: IFFALSE 6528
// begin Say ( JMM , D2-JMM-1 ) ;
6436: LD_EXP 1
6440: PPUSH
6441: LD_STRING D2-JMM-1
6443: PPUSH
6444: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6448: LD_EXP 15
6452: PPUSH
6453: LD_STRING D2-Pow-1
6455: PPUSH
6456: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6460: LD_EXP 1
6464: PPUSH
6465: LD_STRING D2b-JMM-1
6467: PPUSH
6468: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6472: LD_EXP 15
6476: PPUSH
6477: LD_STRING D2b-Pow-1
6479: PPUSH
6480: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6484: LD_EXP 1
6488: PPUSH
6489: LD_STRING D2c-JMM-1
6491: PPUSH
6492: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6496: LD_EXP 15
6500: PPUSH
6501: LD_STRING D2c-Pow-1
6503: PPUSH
6504: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6508: LD_EXP 1
6512: PPUSH
6513: LD_STRING D2c-JMM-2
6515: PPUSH
6516: CALL_OW 88
// secondPass := 2 ;
6520: LD_ADDR_EXP 20
6524: PUSH
6525: LD_INT 2
6527: ST_TO_ADDR
// end ; if dec = 3 then
6528: LD_VAR 0 3
6532: PUSH
6533: LD_INT 3
6535: EQUAL
6536: IFFALSE 6546
// secondPass := 1 ;
6538: LD_ADDR_EXP 20
6542: PUSH
6543: LD_INT 1
6545: ST_TO_ADDR
// InGameOff ;
6546: CALL_OW 9
// ruAI := 1 ;
6550: LD_ADDR_EXP 34
6554: PUSH
6555: LD_INT 1
6557: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6558: LD_INT 1
6560: PPUSH
6561: LD_INT 3
6563: PPUSH
6564: LD_INT 2
6566: PPUSH
6567: LD_INT 1
6569: PPUSH
6570: CALL_OW 80
// SaveForQuickRestart ;
6574: CALL_OW 22
// end ;
6578: PPOPN 3
6580: END
// every 1 1$0 trigger secondPass = 2 do
6581: LD_EXP 20
6585: PUSH
6586: LD_INT 2
6588: EQUAL
6589: IFFALSE 6809
6591: GO 6593
6593: DISABLE
// begin PowellSupport1 ;
6594: CALL 1985 0 0
// DialogueOn ;
6598: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6602: LD_EXP 1
6606: PPUSH
6607: LD_STRING DC1-JMM-1
6609: PPUSH
6610: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6614: LD_EXP 15
6618: PPUSH
6619: LD_STRING DC1-Pow-1
6621: PPUSH
6622: CALL_OW 94
// DialogueOff ;
6626: CALL_OW 7
// wait ( 3 3$0 ) ;
6630: LD_INT 6300
6632: PPUSH
6633: CALL_OW 67
// PowellSupport2 ;
6637: CALL 2466 0 0
// DialogueOn ;
6641: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6645: LD_EXP 1
6649: PPUSH
6650: LD_STRING DC2-JMM-1
6652: PPUSH
6653: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6657: LD_EXP 15
6661: PPUSH
6662: LD_STRING DC2-Pow-1
6664: PPUSH
6665: CALL_OW 94
// DialogueOff ;
6669: CALL_OW 7
// wait ( 3 3$00 ) ;
6673: LD_INT 6300
6675: PPUSH
6676: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6680: LD_INT 35
6682: PPUSH
6683: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and not FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
6687: LD_INT 22
6689: PUSH
6690: LD_INT 1
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: PUSH
6697: LD_INT 2
6699: PUSH
6700: LD_INT 30
6702: PUSH
6703: LD_INT 0
6705: PUSH
6706: EMPTY
6707: LIST
6708: LIST
6709: PUSH
6710: LD_INT 30
6712: PUSH
6713: LD_INT 1
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: LIST
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: PPUSH
6729: CALL_OW 69
6733: PUSH
6734: LD_INT 11
6736: PPUSH
6737: LD_INT 22
6739: PUSH
6740: LD_INT 3
6742: PUSH
6743: EMPTY
6744: LIST
6745: LIST
6746: PPUSH
6747: CALL_OW 70
6751: NOT
6752: AND
6753: IFFALSE 6680
// wait ( 0 0$10 ) ;
6755: LD_INT 350
6757: PPUSH
6758: CALL_OW 67
// Legion ;
6762: CALL 6810 0 0
// wait ( 5 5$0 ) ;
6766: LD_INT 10500
6768: PPUSH
6769: CALL_OW 67
// PowellSupport3 ;
6773: CALL 3079 0 0
// DialogueOn ;
6777: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6781: LD_EXP 15
6785: PPUSH
6786: LD_STRING DC3-Pow-1
6788: PPUSH
6789: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6793: LD_EXP 1
6797: PPUSH
6798: LD_STRING DC3-JMM-1
6800: PPUSH
6801: CALL_OW 88
// DialogueOff ;
6805: CALL_OW 7
// end ;
6809: END
// export function Legion ; var i , dec1 , dec2 , tmp , tmp2 , tmp3 , crates , oil , siberite , cr , sb , payForNeutral , payForHelp , query1 , query2 ; begin
6810: LD_INT 0
6812: PPUSH
6813: PPUSH
6814: PPUSH
6815: PPUSH
6816: PPUSH
6817: PPUSH
6818: PPUSH
6819: PPUSH
6820: PPUSH
6821: PPUSH
6822: PPUSH
6823: PPUSH
6824: PPUSH
6825: PPUSH
6826: PPUSH
6827: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6828: LD_ADDR_VAR 0 5
6832: PUSH
6833: LD_INT 22
6835: PUSH
6836: LD_INT 1
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: PUSH
6843: LD_INT 21
6845: PUSH
6846: LD_INT 3
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: PUSH
6853: LD_INT 2
6855: PUSH
6856: LD_INT 30
6858: PUSH
6859: LD_INT 0
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: PUSH
6866: LD_INT 30
6868: PUSH
6869: LD_INT 1
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: LIST
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: LIST
6885: PPUSH
6886: CALL_OW 69
6890: ST_TO_ADDR
// crates := 0 ;
6891: LD_ADDR_VAR 0 8
6895: PUSH
6896: LD_INT 0
6898: ST_TO_ADDR
// oil := 0 ;
6899: LD_ADDR_VAR 0 9
6903: PUSH
6904: LD_INT 0
6906: ST_TO_ADDR
// siberite := 0 ;
6907: LD_ADDR_VAR 0 10
6911: PUSH
6912: LD_INT 0
6914: ST_TO_ADDR
// payForNeutral := false ;
6915: LD_ADDR_VAR 0 13
6919: PUSH
6920: LD_INT 0
6922: ST_TO_ADDR
// payForHelp := false ;
6923: LD_ADDR_VAR 0 14
6927: PUSH
6928: LD_INT 0
6930: ST_TO_ADDR
// for i in tmp do
6931: LD_ADDR_VAR 0 2
6935: PUSH
6936: LD_VAR 0 5
6940: PUSH
6941: FOR_IN
6942: IFFALSE 7033
// begin crates := crates + GetResourceType ( GetBase ( i ) , 1 ) ;
6944: LD_ADDR_VAR 0 8
6948: PUSH
6949: LD_VAR 0 8
6953: PUSH
6954: LD_VAR 0 2
6958: PPUSH
6959: CALL_OW 274
6963: PPUSH
6964: LD_INT 1
6966: PPUSH
6967: CALL_OW 275
6971: PLUS
6972: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( i ) , 2 ) ;
6973: LD_ADDR_VAR 0 9
6977: PUSH
6978: LD_VAR 0 9
6982: PUSH
6983: LD_VAR 0 2
6987: PPUSH
6988: CALL_OW 274
6992: PPUSH
6993: LD_INT 2
6995: PPUSH
6996: CALL_OW 275
7000: PLUS
7001: ST_TO_ADDR
// siberite := siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
7002: LD_ADDR_VAR 0 10
7006: PUSH
7007: LD_VAR 0 10
7011: PUSH
7012: LD_VAR 0 2
7016: PPUSH
7017: CALL_OW 274
7021: PPUSH
7022: LD_INT 3
7024: PPUSH
7025: CALL_OW 275
7029: PLUS
7030: ST_TO_ADDR
// end ;
7031: GO 6941
7033: POP
7034: POP
// PrepareKurt ;
7035: CALL 4572 0 0
// if not Kurt then
7039: LD_EXP 17
7043: NOT
7044: IFFALSE 7048
// exit ;
7046: GO 9167
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7048: LD_EXP 18
7052: PPUSH
7053: LD_INT 144
7055: PPUSH
7056: LD_INT 111
7058: PPUSH
7059: CALL_OW 111
// wait ( 0 0$2 ) ;
7063: LD_INT 70
7065: PPUSH
7066: CALL_OW 67
// PlaceSeeing ( 167 , 121 , 1 , - 10 ) ;
7070: LD_INT 167
7072: PPUSH
7073: LD_INT 121
7075: PPUSH
7076: LD_INT 1
7078: PPUSH
7079: LD_INT 10
7081: NEG
7082: PPUSH
7083: CALL_OW 330
// ComExitVehicle ( Kurt ) ;
7087: LD_EXP 17
7091: PPUSH
7092: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7096: LD_EXP 17
7100: PPUSH
7101: CALL_OW 87
// wait ( 0 0$1 ) ;
7105: LD_INT 35
7107: PPUSH
7108: CALL_OW 67
// DialogueOn ;
7112: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7116: LD_INT 22
7118: PUSH
7119: LD_INT 1
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: PUSH
7126: LD_INT 26
7128: PUSH
7129: LD_INT 1
7131: PUSH
7132: EMPTY
7133: LIST
7134: LIST
7135: PUSH
7136: LD_INT 2
7138: PUSH
7139: LD_INT 25
7141: PUSH
7142: LD_INT 1
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PUSH
7149: LD_INT 25
7151: PUSH
7152: LD_INT 2
7154: PUSH
7155: EMPTY
7156: LIST
7157: LIST
7158: PUSH
7159: LD_INT 25
7161: PUSH
7162: LD_INT 3
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: PUSH
7169: LD_INT 25
7171: PUSH
7172: LD_INT 4
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: PUSH
7179: LD_INT 25
7181: PUSH
7182: LD_INT 5
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 25
7191: PUSH
7192: LD_INT 8
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: LIST
7212: PPUSH
7213: CALL_OW 69
7217: PPUSH
7218: LD_STRING D3-Sol1-1
7220: PPUSH
7221: LD_STRING 
7223: PPUSH
7224: CALL 12226 0 3
// if KurtStatus then
7228: LD_EXP 19
7232: IFFALSE 7332
// begin Say ( Kurt , D3-Kurt-1 ) ;
7234: LD_EXP 17
7238: PPUSH
7239: LD_STRING D3-Kurt-1
7241: PPUSH
7242: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7246: LD_EXP 1
7250: PPUSH
7251: LD_STRING D3-JMM-1
7253: PPUSH
7254: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7258: LD_EXP 17
7262: PPUSH
7263: LD_STRING D3-Kurt-2
7265: PPUSH
7266: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7270: LD_EXP 1
7274: PPUSH
7275: LD_STRING D3-JMM-2
7277: PPUSH
7278: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7282: LD_EXP 17
7286: PPUSH
7287: LD_STRING D3-Kurt-4
7289: PPUSH
7290: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7294: LD_EXP 1
7298: PPUSH
7299: LD_STRING D3-JMM-4
7301: PPUSH
7302: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7306: LD_EXP 17
7310: PPUSH
7311: LD_STRING D3-Kurt-5
7313: PPUSH
7314: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7318: LD_EXP 17
7322: PPUSH
7323: LD_STRING D3-Kurt-5a
7325: PPUSH
7326: CALL_OW 88
// end else
7330: GO 7428
// begin Say ( Kurt , D3-Kurt-1 ) ;
7332: LD_EXP 17
7336: PPUSH
7337: LD_STRING D3-Kurt-1
7339: PPUSH
7340: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7344: LD_EXP 1
7348: PPUSH
7349: LD_STRING D3-JMM-1
7351: PPUSH
7352: CALL_OW 88
// Say ( Kurt , D3-Kurt-3 ) ;
7356: LD_EXP 17
7360: PPUSH
7361: LD_STRING D3-Kurt-3
7363: PPUSH
7364: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7368: LD_EXP 1
7372: PPUSH
7373: LD_STRING D3-JMM-3
7375: PPUSH
7376: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7380: LD_EXP 17
7384: PPUSH
7385: LD_STRING D3-Kurt-4
7387: PPUSH
7388: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7392: LD_EXP 1
7396: PPUSH
7397: LD_STRING D3-JMM-4
7399: PPUSH
7400: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7404: LD_EXP 17
7408: PPUSH
7409: LD_STRING D3-Kurt-5
7411: PPUSH
7412: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
7416: LD_EXP 17
7420: PPUSH
7421: LD_STRING D3-Kurt-5b
7423: PPUSH
7424: CALL_OW 88
// end ; if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
7428: LD_VAR 0 8
7432: PUSH
7433: LD_INT 120
7435: PUSH
7436: LD_INT 60
7438: PUSH
7439: EMPTY
7440: LIST
7441: LIST
7442: PUSH
7443: LD_EXP 19
7447: PUSH
7448: LD_INT 1
7450: PLUS
7451: ARRAY
7452: GREATEREQUAL
7453: PUSH
7454: LD_VAR 0 10
7458: PUSH
7459: LD_INT 120
7461: PUSH
7462: LD_INT 60
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: PUSH
7469: LD_EXP 19
7473: PUSH
7474: LD_INT 1
7476: PLUS
7477: ARRAY
7478: GREATEREQUAL
7479: AND
7480: IFFALSE 7532
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
7482: LD_ADDR_VAR 0 3
7486: PUSH
7487: LD_STRING Q2
7489: PUSH
7490: LD_STRING Q2K
7492: PUSH
7493: EMPTY
7494: LIST
7495: LIST
7496: PUSH
7497: LD_EXP 19
7501: PUSH
7502: LD_INT 1
7504: PLUS
7505: ARRAY
7506: PPUSH
7507: LD_INT 1
7509: PUSH
7510: LD_INT 2
7512: PUSH
7513: LD_INT 3
7515: PUSH
7516: LD_INT 4
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: PPUSH
7525: CALL_OW 98
7529: ST_TO_ADDR
7530: GO 7576
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 3 , 4 ] ) ;
7532: LD_ADDR_VAR 0 3
7536: PUSH
7537: LD_STRING Q2
7539: PUSH
7540: LD_STRING Q2K
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: PUSH
7547: LD_EXP 19
7551: PUSH
7552: LD_INT 1
7554: PLUS
7555: ARRAY
7556: PPUSH
7557: LD_INT 1
7559: PUSH
7560: LD_INT 3
7562: PUSH
7563: LD_INT 4
7565: PUSH
7566: EMPTY
7567: LIST
7568: LIST
7569: LIST
7570: PPUSH
7571: CALL_OW 98
7575: ST_TO_ADDR
// if dec1 = 1 then
7576: LD_VAR 0 3
7580: PUSH
7581: LD_INT 1
7583: EQUAL
7584: IFFALSE 7618
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7586: LD_EXP 1
7590: PPUSH
7591: LD_STRING D3Ka-JMM-1
7593: PPUSH
7594: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7598: LD_EXP 17
7602: PPUSH
7603: LD_STRING D3Ka-Kurt-1
7605: PPUSH
7606: CALL_OW 88
// warWithLegion = 1 ;
7610: LD_ADDR_EXP 23
7614: PUSH
7615: LD_INT 1
7617: ST_TO_ADDR
// end ; if dec1 = 2 then
7618: LD_VAR 0 3
7622: PUSH
7623: LD_INT 2
7625: EQUAL
7626: IFFALSE 7710
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7628: LD_EXP 1
7632: PPUSH
7633: LD_STRING D3Kb-JMM-1
7635: PPUSH
7636: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7640: LD_EXP 17
7644: PPUSH
7645: LD_STRING D3Kb-Kurt-1
7647: PPUSH
7648: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7652: LD_ADDR_VAR 0 11
7656: PUSH
7657: LD_INT 120
7659: PUSH
7660: LD_INT 60
7662: PUSH
7663: EMPTY
7664: LIST
7665: LIST
7666: PUSH
7667: LD_EXP 19
7671: PUSH
7672: LD_INT 1
7674: PLUS
7675: ARRAY
7676: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7677: LD_ADDR_VAR 0 12
7681: PUSH
7682: LD_INT 120
7684: PUSH
7685: LD_INT 60
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: PUSH
7692: LD_EXP 19
7696: PUSH
7697: LD_INT 1
7699: PLUS
7700: ARRAY
7701: ST_TO_ADDR
// payForNeutral := true ;
7702: LD_ADDR_VAR 0 13
7706: PUSH
7707: LD_INT 1
7709: ST_TO_ADDR
// end ; if dec1 = 3 then
7710: LD_VAR 0 3
7714: PUSH
7715: LD_INT 3
7717: EQUAL
7718: IFFALSE 7953
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7720: LD_EXP 1
7724: PPUSH
7725: LD_STRING D3Kc1-JMM-1
7727: PPUSH
7728: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7732: LD_EXP 17
7736: PPUSH
7737: LD_STRING D3Kc1-Kurt-1
7739: PPUSH
7740: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7744: LD_EXP 1
7748: PPUSH
7749: LD_STRING D3Kc1-JMM-2
7751: PPUSH
7752: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7756: LD_EXP 17
7760: PPUSH
7761: LD_STRING D3Kc1-Kurt-2
7763: PPUSH
7764: CALL_OW 88
// askSiberite = 1 ;
7768: LD_ADDR_EXP 25
7772: PUSH
7773: LD_INT 1
7775: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7776: LD_ADDR_VAR 0 4
7780: PUSH
7781: LD_STRING Q2b
7783: PPUSH
7784: LD_INT 1
7786: PUSH
7787: LD_INT 2
7789: PUSH
7790: LD_INT 3
7792: PUSH
7793: EMPTY
7794: LIST
7795: LIST
7796: LIST
7797: PPUSH
7798: CALL_OW 98
7802: ST_TO_ADDR
// if dec2 = 1 then
7803: LD_VAR 0 4
7807: PUSH
7808: LD_INT 1
7810: EQUAL
7811: IFFALSE 7845
// begin Say ( JMM , D4a-JMM-1 ) ;
7813: LD_EXP 1
7817: PPUSH
7818: LD_STRING D4a-JMM-1
7820: PPUSH
7821: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7825: LD_EXP 17
7829: PPUSH
7830: LD_STRING D4b-Kurt-1
7832: PPUSH
7833: CALL_OW 88
// warWithLegion = 1 ;
7837: LD_ADDR_EXP 23
7841: PUSH
7842: LD_INT 1
7844: ST_TO_ADDR
// end ; if dec2 = 2 then
7845: LD_VAR 0 4
7849: PUSH
7850: LD_INT 2
7852: EQUAL
7853: IFFALSE 7887
// begin Say ( JMM , D4b-JMM-1 ) ;
7855: LD_EXP 1
7859: PPUSH
7860: LD_STRING D4b-JMM-1
7862: PPUSH
7863: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7867: LD_EXP 17
7871: PPUSH
7872: LD_STRING D4b-Kurt-1
7874: PPUSH
7875: CALL_OW 88
// warWithLegion = 1 ;
7879: LD_ADDR_EXP 23
7883: PUSH
7884: LD_INT 1
7886: ST_TO_ADDR
// end ; if dec2 = 3 then
7887: LD_VAR 0 4
7891: PUSH
7892: LD_INT 3
7894: EQUAL
7895: IFFALSE 7953
// begin Say ( JMM , D4c-JMM-1 ) ;
7897: LD_EXP 1
7901: PPUSH
7902: LD_STRING D4c-JMM-1
7904: PPUSH
7905: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7909: LD_EXP 17
7913: PPUSH
7914: LD_STRING D4c-Kurt-1
7916: PPUSH
7917: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
7921: LD_EXP 1
7925: PPUSH
7926: LD_STRING D4c-JMM-2
7928: PPUSH
7929: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
7933: LD_EXP 17
7937: PPUSH
7938: LD_STRING D4c-Kurt-2
7940: PPUSH
7941: CALL_OW 88
// fakeInfo = 1 ;
7945: LD_ADDR_EXP 24
7949: PUSH
7950: LD_INT 1
7952: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
7953: LD_VAR 0 3
7957: PUSH
7958: LD_INT 4
7960: EQUAL
7961: IFFALSE 9023
// begin Say ( JMM , D3Kd-JMM-1 ) ;
7963: LD_EXP 1
7967: PPUSH
7968: LD_STRING D3Kd-JMM-1
7970: PPUSH
7971: CALL_OW 88
// if crates >= [ 200 , 120 ] [ KurtStatus + 1 ] and siberite >= [ 200 , 120 ] [ KurtStatus + 1 ] then
7975: LD_VAR 0 8
7979: PUSH
7980: LD_INT 200
7982: PUSH
7983: LD_INT 120
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: PUSH
7990: LD_EXP 19
7994: PUSH
7995: LD_INT 1
7997: PLUS
7998: ARRAY
7999: GREATEREQUAL
8000: PUSH
8001: LD_VAR 0 10
8005: PUSH
8006: LD_INT 200
8008: PUSH
8009: LD_INT 120
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: PUSH
8016: LD_EXP 19
8020: PUSH
8021: LD_INT 1
8023: PLUS
8024: ARRAY
8025: GREATEREQUAL
8026: AND
8027: IFFALSE 8079
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8029: LD_ADDR_VAR 0 4
8033: PUSH
8034: LD_STRING Q2a
8036: PUSH
8037: LD_STRING Q2aK
8039: PUSH
8040: EMPTY
8041: LIST
8042: LIST
8043: PUSH
8044: LD_EXP 19
8048: PUSH
8049: LD_INT 1
8051: PLUS
8052: ARRAY
8053: PPUSH
8054: LD_INT 1
8056: PUSH
8057: LD_INT 2
8059: PUSH
8060: LD_INT 3
8062: PUSH
8063: LD_INT 4
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: PPUSH
8072: CALL_OW 98
8076: ST_TO_ADDR
8077: GO 8243
// if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
8079: LD_VAR 0 8
8083: PUSH
8084: LD_INT 120
8086: PUSH
8087: LD_INT 60
8089: PUSH
8090: EMPTY
8091: LIST
8092: LIST
8093: PUSH
8094: LD_EXP 19
8098: PUSH
8099: LD_INT 1
8101: PLUS
8102: ARRAY
8103: GREATEREQUAL
8104: PUSH
8105: LD_VAR 0 10
8109: PUSH
8110: LD_INT 120
8112: PUSH
8113: LD_INT 60
8115: PUSH
8116: EMPTY
8117: LIST
8118: LIST
8119: PUSH
8120: LD_EXP 19
8124: PUSH
8125: LD_INT 1
8127: PLUS
8128: ARRAY
8129: GREATEREQUAL
8130: AND
8131: IFFALSE 8179
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 4 ] ) else
8133: LD_ADDR_VAR 0 4
8137: PUSH
8138: LD_STRING Q2a
8140: PUSH
8141: LD_STRING Q2aK
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: PUSH
8148: LD_EXP 19
8152: PUSH
8153: LD_INT 1
8155: PLUS
8156: ARRAY
8157: PPUSH
8158: LD_INT 1
8160: PUSH
8161: LD_INT 2
8163: PUSH
8164: LD_INT 4
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: LIST
8171: PPUSH
8172: CALL_OW 98
8176: ST_TO_ADDR
8177: GO 8243
// begin Query ( [ Q2d , Q2dK ] [ KurtStatus + 1 ] ) ;
8179: LD_STRING Q2d
8181: PUSH
8182: LD_STRING Q2dK
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: PUSH
8189: LD_EXP 19
8193: PUSH
8194: LD_INT 1
8196: PLUS
8197: ARRAY
8198: PPUSH
8199: CALL_OW 97
// dec2 := 0 ;
8203: LD_ADDR_VAR 0 4
8207: PUSH
8208: LD_INT 0
8210: ST_TO_ADDR
// Say ( JMM , D3Kc1-JMM-1 ) ;
8211: LD_EXP 1
8215: PPUSH
8216: LD_STRING D3Kc1-JMM-1
8218: PPUSH
8219: CALL_OW 88
// Say ( Kurt , D3Kc2-Kurt-1 ) ;
8223: LD_EXP 17
8227: PPUSH
8228: LD_STRING D3Kc2-Kurt-1
8230: PPUSH
8231: CALL_OW 88
// warWithLegion := 1 ;
8235: LD_ADDR_EXP 23
8239: PUSH
8240: LD_INT 1
8242: ST_TO_ADDR
// end ; if dec2 = 1 then
8243: LD_VAR 0 4
8247: PUSH
8248: LD_INT 1
8250: EQUAL
8251: IFFALSE 8285
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8253: LD_EXP 1
8257: PPUSH
8258: LD_STRING D5Ka-JMM-1
8260: PPUSH
8261: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
8265: LD_EXP 17
8269: PPUSH
8270: LD_STRING D5Ka-Kurt-1
8272: PPUSH
8273: CALL_OW 88
// warWithLegion = 1 ;
8277: LD_ADDR_EXP 23
8281: PUSH
8282: LD_INT 1
8284: ST_TO_ADDR
// end ; if dec2 = 2 then
8285: LD_VAR 0 4
8289: PUSH
8290: LD_INT 2
8292: EQUAL
8293: IFFALSE 8377
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8295: LD_EXP 1
8299: PPUSH
8300: LD_STRING D3Kb-JMM-1
8302: PPUSH
8303: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8307: LD_EXP 17
8311: PPUSH
8312: LD_STRING D3Kb-Kurt-1
8314: PPUSH
8315: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8319: LD_ADDR_VAR 0 11
8323: PUSH
8324: LD_INT 120
8326: PUSH
8327: LD_INT 60
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: PUSH
8334: LD_EXP 19
8338: PUSH
8339: LD_INT 1
8341: PLUS
8342: ARRAY
8343: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8344: LD_ADDR_VAR 0 12
8348: PUSH
8349: LD_INT 120
8351: PUSH
8352: LD_INT 60
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: PUSH
8359: LD_EXP 19
8363: PUSH
8364: LD_INT 1
8366: PLUS
8367: ARRAY
8368: ST_TO_ADDR
// payForNeutral := true ;
8369: LD_ADDR_VAR 0 13
8373: PUSH
8374: LD_INT 1
8376: ST_TO_ADDR
// end ; if dec2 = 3 then
8377: LD_VAR 0 4
8381: PUSH
8382: LD_INT 3
8384: EQUAL
8385: IFFALSE 8469
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8387: LD_EXP 1
8391: PPUSH
8392: LD_STRING D3Ke-JMM-1
8394: PPUSH
8395: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
8399: LD_EXP 17
8403: PPUSH
8404: LD_STRING D3Ke-Kurt-1
8406: PPUSH
8407: CALL_OW 88
// cr := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8411: LD_ADDR_VAR 0 11
8415: PUSH
8416: LD_INT 200
8418: PUSH
8419: LD_INT 120
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: PUSH
8426: LD_EXP 19
8430: PUSH
8431: LD_INT 1
8433: PLUS
8434: ARRAY
8435: ST_TO_ADDR
// sb := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8436: LD_ADDR_VAR 0 12
8440: PUSH
8441: LD_INT 200
8443: PUSH
8444: LD_INT 120
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: PUSH
8451: LD_EXP 19
8455: PUSH
8456: LD_INT 1
8458: PLUS
8459: ARRAY
8460: ST_TO_ADDR
// payForHelp := true ;
8461: LD_ADDR_VAR 0 14
8465: PUSH
8466: LD_INT 1
8468: ST_TO_ADDR
// end ; if dec2 = 4 then
8469: LD_VAR 0 4
8473: PUSH
8474: LD_INT 4
8476: EQUAL
8477: IFFALSE 8712
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8479: LD_EXP 1
8483: PPUSH
8484: LD_STRING D3Kc1-JMM-1
8486: PPUSH
8487: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8491: LD_EXP 17
8495: PPUSH
8496: LD_STRING D3Kc1-Kurt-1
8498: PPUSH
8499: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8503: LD_EXP 1
8507: PPUSH
8508: LD_STRING D3Kc1-JMM-2
8510: PPUSH
8511: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8515: LD_EXP 17
8519: PPUSH
8520: LD_STRING D3Kc1-Kurt-2
8522: PPUSH
8523: CALL_OW 88
// askSiberite = 1 ;
8527: LD_ADDR_EXP 25
8531: PUSH
8532: LD_INT 1
8534: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8535: LD_ADDR_VAR 0 4
8539: PUSH
8540: LD_STRING Q2b
8542: PPUSH
8543: LD_INT 1
8545: PUSH
8546: LD_INT 2
8548: PUSH
8549: LD_INT 3
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: LIST
8556: PPUSH
8557: CALL_OW 98
8561: ST_TO_ADDR
// if dec2 = 1 then
8562: LD_VAR 0 4
8566: PUSH
8567: LD_INT 1
8569: EQUAL
8570: IFFALSE 8604
// begin Say ( JMM , D4a-JMM-1 ) ;
8572: LD_EXP 1
8576: PPUSH
8577: LD_STRING D4a-JMM-1
8579: PPUSH
8580: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8584: LD_EXP 17
8588: PPUSH
8589: LD_STRING D4b-Kurt-1
8591: PPUSH
8592: CALL_OW 88
// warWithLegion = 1 ;
8596: LD_ADDR_EXP 23
8600: PUSH
8601: LD_INT 1
8603: ST_TO_ADDR
// end ; if dec2 = 2 then
8604: LD_VAR 0 4
8608: PUSH
8609: LD_INT 2
8611: EQUAL
8612: IFFALSE 8646
// begin Say ( JMM , D4b-JMM-1 ) ;
8614: LD_EXP 1
8618: PPUSH
8619: LD_STRING D4b-JMM-1
8621: PPUSH
8622: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8626: LD_EXP 17
8630: PPUSH
8631: LD_STRING D4b-Kurt-1
8633: PPUSH
8634: CALL_OW 88
// warWithLegion = 1 ;
8638: LD_ADDR_EXP 23
8642: PUSH
8643: LD_INT 1
8645: ST_TO_ADDR
// end ; if dec2 = 3 then
8646: LD_VAR 0 4
8650: PUSH
8651: LD_INT 3
8653: EQUAL
8654: IFFALSE 8712
// begin Say ( JMM , D4c-JMM-1 ) ;
8656: LD_EXP 1
8660: PPUSH
8661: LD_STRING D4c-JMM-1
8663: PPUSH
8664: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8668: LD_EXP 17
8672: PPUSH
8673: LD_STRING D4c-Kurt-1
8675: PPUSH
8676: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8680: LD_EXP 1
8684: PPUSH
8685: LD_STRING D4c-JMM-2
8687: PPUSH
8688: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8692: LD_EXP 17
8696: PPUSH
8697: LD_STRING D4c-Kurt-2
8699: PPUSH
8700: CALL_OW 88
// fakeInfo = 1 ;
8704: LD_ADDR_EXP 24
8708: PUSH
8709: LD_INT 1
8711: ST_TO_ADDR
// end ; end ; if payForNeutral or payForHelp then
8712: LD_VAR 0 13
8716: PUSH
8717: LD_VAR 0 14
8721: OR
8722: IFFALSE 9023
// begin for i in tmp do
8724: LD_ADDR_VAR 0 2
8728: PUSH
8729: LD_VAR 0 5
8733: PUSH
8734: FOR_IN
8735: IFFALSE 9021
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
8737: LD_ADDR_VAR 0 6
8741: PUSH
8742: LD_VAR 0 2
8746: PPUSH
8747: CALL_OW 274
8751: PPUSH
8752: LD_INT 1
8754: PPUSH
8755: CALL_OW 275
8759: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
8760: LD_ADDR_VAR 0 7
8764: PUSH
8765: LD_VAR 0 2
8769: PPUSH
8770: CALL_OW 274
8774: PPUSH
8775: LD_INT 3
8777: PPUSH
8778: CALL_OW 275
8782: ST_TO_ADDR
// if cr then
8783: LD_VAR 0 11
8787: IFFALSE 8901
// begin if tmp2 and tmp2 < cr then
8789: LD_VAR 0 6
8793: PUSH
8794: LD_VAR 0 6
8798: PUSH
8799: LD_VAR 0 11
8803: LESS
8804: AND
8805: IFFALSE 8853
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
8807: LD_VAR 0 2
8811: PPUSH
8812: CALL_OW 274
8816: PPUSH
8817: LD_INT 1
8819: PPUSH
8820: LD_VAR 0 11
8824: PUSH
8825: LD_VAR 0 6
8829: MINUS
8830: PPUSH
8831: CALL_OW 277
// cr := cr - tmp2 ;
8835: LD_ADDR_VAR 0 11
8839: PUSH
8840: LD_VAR 0 11
8844: PUSH
8845: LD_VAR 0 6
8849: MINUS
8850: ST_TO_ADDR
// end else
8851: GO 8901
// if tmp2 > cr then
8853: LD_VAR 0 6
8857: PUSH
8858: LD_VAR 0 11
8862: GREATER
8863: IFFALSE 8901
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
8865: LD_VAR 0 2
8869: PPUSH
8870: CALL_OW 274
8874: PPUSH
8875: LD_INT 1
8877: PPUSH
8878: LD_VAR 0 6
8882: PUSH
8883: LD_VAR 0 11
8887: MINUS
8888: PPUSH
8889: CALL_OW 277
// cr := 0 ;
8893: LD_ADDR_VAR 0 11
8897: PUSH
8898: LD_INT 0
8900: ST_TO_ADDR
// end ; end ; if sb then
8901: LD_VAR 0 12
8905: IFFALSE 9019
// begin if tmp3 and tmp3 < sb then
8907: LD_VAR 0 7
8911: PUSH
8912: LD_VAR 0 7
8916: PUSH
8917: LD_VAR 0 12
8921: LESS
8922: AND
8923: IFFALSE 8971
// begin SetResourceType ( GetBase ( i ) , 3 , sb - tmp3 ) ;
8925: LD_VAR 0 2
8929: PPUSH
8930: CALL_OW 274
8934: PPUSH
8935: LD_INT 3
8937: PPUSH
8938: LD_VAR 0 12
8942: PUSH
8943: LD_VAR 0 7
8947: MINUS
8948: PPUSH
8949: CALL_OW 277
// sb := sb - tmp3 ;
8953: LD_ADDR_VAR 0 12
8957: PUSH
8958: LD_VAR 0 12
8962: PUSH
8963: LD_VAR 0 7
8967: MINUS
8968: ST_TO_ADDR
// end else
8969: GO 9019
// if tmp3 > sb then
8971: LD_VAR 0 7
8975: PUSH
8976: LD_VAR 0 12
8980: GREATER
8981: IFFALSE 9019
// begin SetResourceType ( GetBase ( i ) , 3 , tmp3 - sb ) ;
8983: LD_VAR 0 2
8987: PPUSH
8988: CALL_OW 274
8992: PPUSH
8993: LD_INT 3
8995: PPUSH
8996: LD_VAR 0 7
9000: PUSH
9001: LD_VAR 0 12
9005: MINUS
9006: PPUSH
9007: CALL_OW 277
// sb := 0 ;
9011: LD_ADDR_VAR 0 12
9015: PUSH
9016: LD_INT 0
9018: ST_TO_ADDR
// end ; end ; end ;
9019: GO 8734
9021: POP
9022: POP
// end ; end ; DialogueOff ;
9023: CALL_OW 7
// RemoveSeeing ( 167 , 121 , 1 ) ;
9027: LD_INT 167
9029: PPUSH
9030: LD_INT 121
9032: PPUSH
9033: LD_INT 1
9035: PPUSH
9036: CALL_OW 331
// ComEnterUnit ( Kurt , KurtVeh ) ;
9040: LD_EXP 17
9044: PPUSH
9045: LD_EXP 18
9049: PPUSH
9050: CALL_OW 120
// wait ( 0 0$1 ) ;
9054: LD_INT 35
9056: PPUSH
9057: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9061: LD_EXP 18
9065: PPUSH
9066: LD_INT 4
9068: PPUSH
9069: CALL_OW 113
// wait ( 0 0$3 ) ;
9073: LD_INT 105
9075: PPUSH
9076: CALL_OW 67
// RemoveUnit ( Kurt ) ;
9080: LD_EXP 17
9084: PPUSH
9085: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9089: LD_EXP 18
9093: PPUSH
9094: CALL_OW 64
// wait ( 0 0$3 ) ;
9098: LD_INT 105
9100: PPUSH
9101: CALL_OW 67
// if payForHelp then
9105: LD_VAR 0 14
9109: IFFALSE 9167
// begin HiddenCamera ( 36 , 57 , 1 ) ;
9111: LD_INT 36
9113: PPUSH
9114: LD_INT 57
9116: PPUSH
9117: LD_INT 1
9119: PPUSH
9120: CALL_OW 244
// HiddenCamera ( 51 , 63 , 1 ) ;
9124: LD_INT 51
9126: PPUSH
9127: LD_INT 63
9129: PPUSH
9130: LD_INT 1
9132: PPUSH
9133: CALL_OW 244
// HiddenCamera ( 93 , 65 , 1 ) ;
9137: LD_INT 93
9139: PPUSH
9140: LD_INT 65
9142: PPUSH
9143: LD_INT 1
9145: PPUSH
9146: CALL_OW 244
// HiddenCamera ( 42 , 12 , 1 ) ;
9150: LD_INT 42
9152: PPUSH
9153: LD_INT 12
9155: PPUSH
9156: LD_INT 1
9158: PPUSH
9159: CALL_OW 244
// PrepareLegionForPlayer ;
9163: CALL 4775 0 0
// end ; end ;
9167: LD_VAR 0 1
9171: RET
// every 0 0$10 trigger warWithLegion = 1 do
9172: LD_EXP 23
9176: PUSH
9177: LD_INT 1
9179: EQUAL
9180: IFFALSE 9196
9182: GO 9184
9184: DISABLE
// begin wait ( 0 0$30 ) ;
9185: LD_INT 1050
9187: PPUSH
9188: CALL_OW 67
// PrepareAttackLegion ;
9192: CALL 5416 0 0
// end ;
9196: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do var i ;
9197: LD_INT 120
9199: PUSH
9200: LD_INT 17
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: PUSH
9207: LD_INT 52
9209: PUSH
9210: EMPTY
9211: LIST
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: PPUSH
9217: CALL_OW 69
9221: IFFALSE 9366
9223: GO 9225
9225: DISABLE
9226: LD_INT 0
9228: PPUSH
// begin enable ;
9229: ENABLE
// for i in FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do
9230: LD_ADDR_VAR 0 1
9234: PUSH
9235: LD_INT 120
9237: PUSH
9238: LD_INT 17
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: PUSH
9245: LD_INT 52
9247: PUSH
9248: EMPTY
9249: LIST
9250: PUSH
9251: EMPTY
9252: LIST
9253: LIST
9254: PPUSH
9255: CALL_OW 69
9259: PUSH
9260: FOR_IN
9261: IFFALSE 9364
// begin if GetMultiCargo ( i ) [ 4 ] = 0 and GetSide ( i ) = 1 then
9263: LD_VAR 0 1
9267: PPUSH
9268: CALL 79779 0 1
9272: PUSH
9273: LD_INT 4
9275: ARRAY
9276: PUSH
9277: LD_INT 0
9279: EQUAL
9280: PUSH
9281: LD_VAR 0 1
9285: PPUSH
9286: CALL_OW 255
9290: PUSH
9291: LD_INT 1
9293: EQUAL
9294: AND
9295: IFFALSE 9309
// SetSide ( i , 4 ) ;
9297: LD_VAR 0 1
9301: PPUSH
9302: LD_INT 4
9304: PPUSH
9305: CALL_OW 235
// if GetSide ( i ) = 4 then
9309: LD_VAR 0 1
9313: PPUSH
9314: CALL_OW 255
9318: PUSH
9319: LD_INT 4
9321: EQUAL
9322: IFFALSE 9362
// if not IsInArea ( i , PlayerSpawn ) then
9324: LD_VAR 0 1
9328: PPUSH
9329: LD_INT 4
9331: PPUSH
9332: CALL_OW 308
9336: NOT
9337: IFFALSE 9353
// ComMoveToArea ( i , PlayerSpawn ) else
9339: LD_VAR 0 1
9343: PPUSH
9344: LD_INT 4
9346: PPUSH
9347: CALL_OW 113
9351: GO 9362
// RemoveUnit ( i ) ;
9353: LD_VAR 0 1
9357: PPUSH
9358: CALL_OW 64
// end ;
9362: GO 9260
9364: POP
9365: POP
// end ;
9366: PPOPN 1
9368: END
// every 0 0$3 trigger secondPass = 1 and FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_type , unit_vehicle ] ] ) do var i , enemyVehs , dec ;
9369: LD_EXP 20
9373: PUSH
9374: LD_INT 1
9376: EQUAL
9377: PUSH
9378: LD_INT 12
9380: PPUSH
9381: LD_INT 22
9383: PUSH
9384: LD_INT 3
9386: PUSH
9387: EMPTY
9388: LIST
9389: LIST
9390: PUSH
9391: LD_INT 101
9393: PUSH
9394: LD_INT 1
9396: PUSH
9397: EMPTY
9398: LIST
9399: LIST
9400: PUSH
9401: LD_INT 21
9403: PUSH
9404: LD_INT 2
9406: PUSH
9407: EMPTY
9408: LIST
9409: LIST
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: LIST
9415: PPUSH
9416: CALL_OW 70
9420: AND
9421: IFFALSE 9970
9423: GO 9425
9425: DISABLE
9426: LD_INT 0
9428: PPUSH
9429: PPUSH
9430: PPUSH
// begin DialogueOn ;
9431: CALL_OW 6
// CenterNowOnUnits ( i ) ;
9435: LD_VAR 0 1
9439: PPUSH
9440: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
9444: LD_INT 22
9446: PUSH
9447: LD_INT 1
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: PUSH
9454: LD_INT 26
9456: PUSH
9457: LD_INT 1
9459: PUSH
9460: EMPTY
9461: LIST
9462: LIST
9463: PUSH
9464: LD_INT 2
9466: PUSH
9467: LD_INT 25
9469: PUSH
9470: LD_INT 1
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: PUSH
9477: LD_INT 25
9479: PUSH
9480: LD_INT 2
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: PUSH
9487: LD_INT 25
9489: PUSH
9490: LD_INT 3
9492: PUSH
9493: EMPTY
9494: LIST
9495: LIST
9496: PUSH
9497: LD_INT 25
9499: PUSH
9500: LD_INT 4
9502: PUSH
9503: EMPTY
9504: LIST
9505: LIST
9506: PUSH
9507: LD_INT 25
9509: PUSH
9510: LD_INT 5
9512: PUSH
9513: EMPTY
9514: LIST
9515: LIST
9516: PUSH
9517: LD_INT 25
9519: PUSH
9520: LD_INT 8
9522: PUSH
9523: EMPTY
9524: LIST
9525: LIST
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: LIST
9540: PPUSH
9541: CALL_OW 69
9545: PPUSH
9546: LD_STRING DT1-Sol1-1
9548: PPUSH
9549: LD_STRING DT1-FSol1-1
9551: PPUSH
9552: CALL 12226 0 3
// dec := ShowQuery2 ;
9556: LD_ADDR_VAR 0 3
9560: PUSH
9561: CALL 12710 0 0
9565: ST_TO_ADDR
// if dec = 1 then
9566: LD_VAR 0 3
9570: PUSH
9571: LD_INT 1
9573: EQUAL
9574: IFFALSE 9680
// begin Say ( JMM , D2-JMM-1 ) ;
9576: LD_EXP 1
9580: PPUSH
9581: LD_STRING D2-JMM-1
9583: PPUSH
9584: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9588: LD_EXP 15
9592: PPUSH
9593: LD_STRING D2-Pow-1
9595: PPUSH
9596: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
9600: LD_EXP 1
9604: PPUSH
9605: LD_STRING D2a-JMM-1
9607: PPUSH
9608: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
9612: LD_EXP 15
9616: PPUSH
9617: LD_STRING D2a-Pow-1
9619: PPUSH
9620: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
9624: LD_EXP 1
9628: PPUSH
9629: LD_STRING D2a-JMM-2
9631: PPUSH
9632: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
9636: LD_EXP 15
9640: PPUSH
9641: LD_STRING D2a-Pow-2
9643: PPUSH
9644: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
9648: LD_EXP 1
9652: PPUSH
9653: LD_STRING D2a-JMM-3
9655: PPUSH
9656: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
9660: LD_EXP 15
9664: PPUSH
9665: LD_STRING D2a-Pow-3
9667: PPUSH
9668: CALL_OW 94
// secondPass := 2 ;
9672: LD_ADDR_EXP 20
9676: PUSH
9677: LD_INT 2
9679: ST_TO_ADDR
// end ; if dec = 2 then
9680: LD_VAR 0 3
9684: PUSH
9685: LD_INT 2
9687: EQUAL
9688: IFFALSE 9782
// begin Say ( JMM , D2-JMM-1 ) ;
9690: LD_EXP 1
9694: PPUSH
9695: LD_STRING D2-JMM-1
9697: PPUSH
9698: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9702: LD_EXP 15
9706: PPUSH
9707: LD_STRING D2-Pow-1
9709: PPUSH
9710: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
9714: LD_EXP 1
9718: PPUSH
9719: LD_STRING D2b-JMM-1
9721: PPUSH
9722: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
9726: LD_EXP 15
9730: PPUSH
9731: LD_STRING D2b-Pow-1
9733: PPUSH
9734: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
9738: LD_EXP 1
9742: PPUSH
9743: LD_STRING D2c-JMM-1
9745: PPUSH
9746: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
9750: LD_EXP 15
9754: PPUSH
9755: LD_STRING D2c-Pow-1
9757: PPUSH
9758: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
9762: LD_EXP 1
9766: PPUSH
9767: LD_STRING D2c-JMM-2
9769: PPUSH
9770: CALL_OW 88
// secondPass := 2 ;
9774: LD_ADDR_EXP 20
9778: PUSH
9779: LD_INT 2
9781: ST_TO_ADDR
// end ; DialogueOff ;
9782: CALL_OW 7
// if secondPass = 2 then
9786: LD_EXP 20
9790: PUSH
9791: LD_INT 2
9793: EQUAL
9794: IFFALSE 9798
// exit ;
9796: GO 9970
// Query ( HelpRequest ) ;
9798: LD_STRING HelpRequest
9800: PPUSH
9801: CALL_OW 97
// SetAreaMapShow ( helpRequestArea , 1 ) ;
9805: LD_INT 27
9807: PPUSH
9808: LD_INT 1
9810: PPUSH
9811: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
9815: LD_INT 35
9817: PPUSH
9818: CALL_OW 67
// until IsInArea ( JMM , helpRequestArea ) ;
9822: LD_EXP 1
9826: PPUSH
9827: LD_INT 27
9829: PPUSH
9830: CALL_OW 308
9834: IFFALSE 9815
// SetAreaMapShow ( helpRequestArea , 0 ) ;
9836: LD_INT 27
9838: PPUSH
9839: LD_INT 0
9841: PPUSH
9842: CALL_OW 424
// DialogueOn ;
9846: CALL_OW 6
// Say ( JMM , D2-JMM-1 ) ;
9850: LD_EXP 1
9854: PPUSH
9855: LD_STRING D2-JMM-1
9857: PPUSH
9858: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9862: LD_EXP 15
9866: PPUSH
9867: LD_STRING D2-Pow-1
9869: PPUSH
9870: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
9874: LD_EXP 1
9878: PPUSH
9879: LD_STRING D2b-JMM-1
9881: PPUSH
9882: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
9886: LD_EXP 15
9890: PPUSH
9891: LD_STRING D2a-Pow-2
9893: PPUSH
9894: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
9898: LD_EXP 1
9902: PPUSH
9903: LD_STRING D2a-JMM-3
9905: PPUSH
9906: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
9910: LD_EXP 15
9914: PPUSH
9915: LD_STRING D2a-Pow-3
9917: PPUSH
9918: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
9922: LD_EXP 1
9926: PPUSH
9927: LD_STRING D2c-JMM-1
9929: PPUSH
9930: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
9934: LD_EXP 15
9938: PPUSH
9939: LD_STRING D2c-Pow-1
9941: PPUSH
9942: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
9946: LD_EXP 1
9950: PPUSH
9951: LD_STRING D2c-JMM-2
9953: PPUSH
9954: CALL_OW 88
// DialogueOff ;
9958: CALL_OW 7
// secondPass := 2 ;
9962: LD_ADDR_EXP 20
9966: PUSH
9967: LD_INT 2
9969: ST_TO_ADDR
// end ;
9970: PPOPN 3
9972: END
// every 0 0$1 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) do var vehicles ;
9973: LD_EXP 21
9977: PUSH
9978: LD_INT 1
9980: EQUAL
9981: PUSH
9982: LD_INT 11
9984: PPUSH
9985: LD_INT 22
9987: PUSH
9988: LD_INT 3
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: PPUSH
9995: CALL_OW 70
9999: AND
10000: IFFALSE 10481
10002: GO 10004
10004: DISABLE
10005: LD_INT 0
10007: PPUSH
// begin vehicles := FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
10008: LD_ADDR_VAR 0 1
10012: PUSH
10013: LD_INT 11
10015: PPUSH
10016: LD_INT 22
10018: PUSH
10019: LD_INT 3
10021: PUSH
10022: EMPTY
10023: LIST
10024: LIST
10025: PPUSH
10026: CALL_OW 70
10030: ST_TO_ADDR
// if not vehicles then
10031: LD_VAR 0 1
10035: NOT
10036: IFFALSE 10040
// exit ;
10038: GO 10481
// repeat wait ( 0 0$1 ) ;
10040: LD_INT 35
10042: PPUSH
10043: CALL_OW 67
// until UnitFilter ( vehicles , [ f_see , 1 ] ) ;
10047: LD_VAR 0 1
10051: PPUSH
10052: LD_INT 101
10054: PUSH
10055: LD_INT 1
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: PPUSH
10062: CALL_OW 72
10066: IFFALSE 10040
// CenterNowOnUnits ( UnitFilter ( vehicles , [ f_see , 1 ] ) [ 1 ] ) ;
10068: LD_VAR 0 1
10072: PPUSH
10073: LD_INT 101
10075: PUSH
10076: LD_INT 1
10078: PUSH
10079: EMPTY
10080: LIST
10081: LIST
10082: PPUSH
10083: CALL_OW 72
10087: PUSH
10088: LD_INT 1
10090: ARRAY
10091: PPUSH
10092: CALL_OW 87
// DialogueOn ;
10096: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10100: LD_INT 22
10102: PUSH
10103: LD_INT 1
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: PUSH
10110: LD_INT 26
10112: PUSH
10113: LD_INT 1
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: PUSH
10120: LD_INT 23
10122: PUSH
10123: LD_INT 1
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: PUSH
10130: LD_INT 2
10132: PUSH
10133: LD_INT 25
10135: PUSH
10136: LD_INT 1
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: PUSH
10143: LD_INT 25
10145: PUSH
10146: LD_INT 2
10148: PUSH
10149: EMPTY
10150: LIST
10151: LIST
10152: PUSH
10153: LD_INT 25
10155: PUSH
10156: LD_INT 3
10158: PUSH
10159: EMPTY
10160: LIST
10161: LIST
10162: PUSH
10163: LD_INT 25
10165: PUSH
10166: LD_INT 4
10168: PUSH
10169: EMPTY
10170: LIST
10171: LIST
10172: PUSH
10173: LD_INT 25
10175: PUSH
10176: LD_INT 5
10178: PUSH
10179: EMPTY
10180: LIST
10181: LIST
10182: PUSH
10183: LD_INT 25
10185: PUSH
10186: LD_INT 8
10188: PUSH
10189: EMPTY
10190: LIST
10191: LIST
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: PPUSH
10208: CALL_OW 69
10212: PPUSH
10213: LD_STRING DT1-Sol1-1
10215: PPUSH
10216: LD_STRING DT1-FSol1-1
10218: PPUSH
10219: CALL 12226 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10223: LD_EXP 1
10227: PPUSH
10228: LD_STRING DT1-JMM-1
10230: PPUSH
10231: CALL_OW 88
// DialogueOff ;
10235: CALL_OW 7
// repeat wait ( 0 0$05 ) ;
10239: LD_INT 175
10241: PPUSH
10242: CALL_OW 67
// until FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter > 2 ;
10246: LD_INT 11
10248: PPUSH
10249: LD_INT 22
10251: PUSH
10252: LD_INT 3
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: PUSH
10259: LD_INT 50
10261: PUSH
10262: EMPTY
10263: LIST
10264: PUSH
10265: LD_INT 2
10267: PUSH
10268: LD_INT 21
10270: PUSH
10271: LD_INT 2
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: PUSH
10278: LD_INT 21
10280: PUSH
10281: LD_INT 1
10283: PUSH
10284: EMPTY
10285: LIST
10286: LIST
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: LIST
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: LIST
10297: PPUSH
10298: CALL_OW 70
10302: PUSH
10303: LD_INT 0
10305: EQUAL
10306: PUSH
10307: LD_EXP 22
10311: PUSH
10312: LD_INT 2
10314: GREATER
10315: AND
10316: IFFALSE 10239
// DialogueOn ;
10318: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
10322: LD_EXP 1
10326: PPUSH
10327: LD_STRING DT1a-JMM-1
10329: PPUSH
10330: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
10334: LD_INT 22
10336: PUSH
10337: LD_INT 1
10339: PUSH
10340: EMPTY
10341: LIST
10342: LIST
10343: PUSH
10344: LD_INT 26
10346: PUSH
10347: LD_INT 1
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: PUSH
10354: LD_INT 23
10356: PUSH
10357: LD_INT 1
10359: PUSH
10360: EMPTY
10361: LIST
10362: LIST
10363: PUSH
10364: LD_INT 2
10366: PUSH
10367: LD_INT 25
10369: PUSH
10370: LD_INT 1
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: PUSH
10377: LD_INT 25
10379: PUSH
10380: LD_INT 2
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PUSH
10387: LD_INT 25
10389: PUSH
10390: LD_INT 3
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: PUSH
10397: LD_INT 25
10399: PUSH
10400: LD_INT 4
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PUSH
10407: LD_INT 25
10409: PUSH
10410: LD_INT 5
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: PUSH
10417: LD_INT 25
10419: PUSH
10420: LD_INT 8
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: PUSH
10436: EMPTY
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: PPUSH
10442: CALL_OW 69
10446: PPUSH
10447: LD_STRING DT1a-Sol1-1
10449: PPUSH
10450: LD_STRING DT1a-FSol1-1
10452: PPUSH
10453: CALL 12226 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
10457: LD_EXP 1
10461: PPUSH
10462: LD_STRING DT1a-JMM-2
10464: PPUSH
10465: CALL_OW 88
// DialogueOff ;
10469: CALL_OW 7
// vehicleTeleported := 2 ;
10473: LD_ADDR_EXP 21
10477: PUSH
10478: LD_INT 2
10480: ST_TO_ADDR
// end ;
10481: PPOPN 1
10483: END
// every 0 0$2 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] ] ) do var i , vehicles , speaker ;
10484: LD_EXP 21
10488: PUSH
10489: LD_INT 3
10491: EQUAL
10492: PUSH
10493: LD_INT 11
10495: PPUSH
10496: LD_INT 22
10498: PUSH
10499: LD_INT 3
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: PUSH
10506: LD_INT 101
10508: PUSH
10509: LD_INT 1
10511: PUSH
10512: EMPTY
10513: LIST
10514: LIST
10515: PUSH
10516: EMPTY
10517: LIST
10518: LIST
10519: PPUSH
10520: CALL_OW 70
10524: AND
10525: IFFALSE 10810
10527: GO 10529
10529: DISABLE
10530: LD_INT 0
10532: PPUSH
10533: PPUSH
10534: PPUSH
// begin wait ( 0 0$0.3 ) ;
10535: LD_INT 10
10537: PPUSH
10538: CALL_OW 67
// DialogueOn ;
10542: CALL_OW 6
// speaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
10546: LD_ADDR_VAR 0 3
10550: PUSH
10551: LD_INT 22
10553: PUSH
10554: LD_INT 1
10556: PUSH
10557: EMPTY
10558: LIST
10559: LIST
10560: PUSH
10561: LD_INT 23
10563: PUSH
10564: LD_INT 1
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: PUSH
10571: LD_INT 26
10573: PUSH
10574: LD_INT 1
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: PUSH
10581: LD_INT 2
10583: PUSH
10584: LD_INT 25
10586: PUSH
10587: LD_INT 1
10589: PUSH
10590: EMPTY
10591: LIST
10592: LIST
10593: PUSH
10594: LD_INT 25
10596: PUSH
10597: LD_INT 2
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: PUSH
10604: LD_INT 25
10606: PUSH
10607: LD_INT 3
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: PUSH
10614: LD_INT 25
10616: PUSH
10617: LD_INT 4
10619: PUSH
10620: EMPTY
10621: LIST
10622: LIST
10623: PUSH
10624: LD_INT 25
10626: PUSH
10627: LD_INT 5
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: PUSH
10634: LD_INT 25
10636: PUSH
10637: LD_INT 8
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: PPUSH
10659: CALL_OW 69
10663: PPUSH
10664: LD_STRING DT2-Sol1-1
10666: PPUSH
10667: LD_STRING DT2-FSol1-1
10669: PPUSH
10670: CALL 12226 0 3
10674: ST_TO_ADDR
// DialogueOff ;
10675: CALL_OW 7
// repeat wait ( 0 0$5 ) ;
10679: LD_INT 175
10681: PPUSH
10682: CALL_OW 67
// until not FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] ] ) ;
10686: LD_INT 11
10688: PPUSH
10689: LD_INT 22
10691: PUSH
10692: LD_INT 3
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: PUSH
10699: LD_INT 50
10701: PUSH
10702: EMPTY
10703: LIST
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: PPUSH
10709: CALL_OW 70
10713: NOT
10714: IFFALSE 10679
// wait ( 0 0$2 ) ;
10716: LD_INT 70
10718: PPUSH
10719: CALL_OW 67
// vehicleTeleported := 4 ;
10723: LD_ADDR_EXP 21
10727: PUSH
10728: LD_INT 4
10730: ST_TO_ADDR
// DialogueOn ;
10731: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
10735: LD_EXP 1
10739: PPUSH
10740: LD_STRING DT2a-JMM-1
10742: PPUSH
10743: CALL_OW 88
// if speaker then
10747: LD_VAR 0 3
10751: IFFALSE 10794
// if GetSex ( speaker ) = 1 then
10753: LD_VAR 0 3
10757: PPUSH
10758: CALL_OW 258
10762: PUSH
10763: LD_INT 1
10765: EQUAL
10766: IFFALSE 10782
// Say ( speaker , DT2a-Sol1-1 ) else
10768: LD_VAR 0 3
10772: PPUSH
10773: LD_STRING DT2a-Sol1-1
10775: PPUSH
10776: CALL_OW 88
10780: GO 10794
// Say ( speaker , DT2a-FSol1-1 ) ;
10782: LD_VAR 0 3
10786: PPUSH
10787: LD_STRING DT2a-FSol1-1
10789: PPUSH
10790: CALL_OW 88
// Say ( Donaldson , DT2a-Don-1 ) ;
10794: LD_EXP 3
10798: PPUSH
10799: LD_STRING DT2a-Don-1
10801: PPUSH
10802: CALL_OW 88
// DialogueOff ;
10806: CALL_OW 7
// end ;
10810: PPOPN 3
10812: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
10813: LD_INT 1
10815: PPUSH
10816: LD_INT 45
10818: PPUSH
10819: LD_INT 74
10821: PPUSH
10822: CALL_OW 293
10826: IFFALSE 11001
10828: GO 10830
10830: DISABLE
// begin DialogueOn ;
10831: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
10835: LD_INT 36
10837: PPUSH
10838: LD_INT 55
10840: PPUSH
10841: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
10845: LD_INT 22
10847: PUSH
10848: LD_INT 1
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: PUSH
10855: LD_INT 23
10857: PUSH
10858: LD_INT 1
10860: PUSH
10861: EMPTY
10862: LIST
10863: LIST
10864: PUSH
10865: LD_INT 26
10867: PUSH
10868: LD_INT 1
10870: PUSH
10871: EMPTY
10872: LIST
10873: LIST
10874: PUSH
10875: LD_INT 2
10877: PUSH
10878: LD_INT 25
10880: PUSH
10881: LD_INT 1
10883: PUSH
10884: EMPTY
10885: LIST
10886: LIST
10887: PUSH
10888: LD_INT 25
10890: PUSH
10891: LD_INT 2
10893: PUSH
10894: EMPTY
10895: LIST
10896: LIST
10897: PUSH
10898: LD_INT 25
10900: PUSH
10901: LD_INT 3
10903: PUSH
10904: EMPTY
10905: LIST
10906: LIST
10907: PUSH
10908: LD_INT 25
10910: PUSH
10911: LD_INT 4
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: PUSH
10918: LD_INT 25
10920: PUSH
10921: LD_INT 5
10923: PUSH
10924: EMPTY
10925: LIST
10926: LIST
10927: PUSH
10928: LD_INT 25
10930: PUSH
10931: LD_INT 8
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: PUSH
10938: EMPTY
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: PUSH
10947: EMPTY
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: PPUSH
10953: CALL_OW 69
10957: PPUSH
10958: LD_STRING D5-Sol1-1
10960: PPUSH
10961: LD_STRING D5-FSol1-
10963: PPUSH
10964: CALL 12226 0 3
// if warWithLegion and IsOk ( Donaldson ) then
10968: LD_EXP 23
10972: PUSH
10973: LD_EXP 3
10977: PPUSH
10978: CALL_OW 302
10982: AND
10983: IFFALSE 10997
// Say ( Donaldson , D5-Don-1 ) ;
10985: LD_EXP 3
10989: PPUSH
10990: LD_STRING D5-Don-1
10992: PPUSH
10993: CALL_OW 88
// DialogueOff ;
10997: CALL_OW 7
// end ;
11001: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
11002: LD_INT 1
11004: PPUSH
11005: LD_INT 10
11007: PPUSH
11008: CALL_OW 292
11012: PUSH
11013: LD_INT 1
11015: PPUSH
11016: LD_INT 137
11018: PPUSH
11019: CALL_OW 292
11023: OR
11024: IFFALSE 11179
11026: GO 11028
11028: DISABLE
// begin DialogueOn ;
11029: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
11033: LD_INT 22
11035: PUSH
11036: LD_INT 1
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: PUSH
11043: LD_INT 23
11045: PUSH
11046: LD_INT 1
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PUSH
11053: LD_INT 26
11055: PUSH
11056: LD_INT 1
11058: PUSH
11059: EMPTY
11060: LIST
11061: LIST
11062: PUSH
11063: LD_INT 2
11065: PUSH
11066: LD_INT 25
11068: PUSH
11069: LD_INT 1
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: PUSH
11076: LD_INT 25
11078: PUSH
11079: LD_INT 2
11081: PUSH
11082: EMPTY
11083: LIST
11084: LIST
11085: PUSH
11086: LD_INT 25
11088: PUSH
11089: LD_INT 3
11091: PUSH
11092: EMPTY
11093: LIST
11094: LIST
11095: PUSH
11096: LD_INT 25
11098: PUSH
11099: LD_INT 4
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: PUSH
11106: LD_INT 25
11108: PUSH
11109: LD_INT 5
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: PUSH
11116: LD_INT 25
11118: PUSH
11119: LD_INT 8
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: PUSH
11126: EMPTY
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: PPUSH
11141: CALL_OW 69
11145: PPUSH
11146: LD_STRING DT3-Sol1-1
11148: PPUSH
11149: LD_STRING DT3-FSol1-1
11151: PPUSH
11152: CALL 12226 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11156: LD_EXP 1
11160: PPUSH
11161: LD_STRING DT3-JMM-1
11163: PPUSH
11164: CALL_OW 88
// DialogueOff ;
11168: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11172: LD_STRING M2
11174: PPUSH
11175: CALL_OW 337
// end ;
11179: END
// every 0 0$1 trigger ruEscape = 0 and ( FilterUnitsInArea ( RuEastBase , [ f_side , 1 ] ) or FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_not , [ f_lives , 800 ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ) do
11180: LD_EXP 35
11184: PUSH
11185: LD_INT 0
11187: EQUAL
11188: PUSH
11189: LD_INT 10
11191: PPUSH
11192: LD_INT 22
11194: PUSH
11195: LD_INT 1
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: PPUSH
11202: CALL_OW 70
11206: PUSH
11207: LD_INT 10
11209: PPUSH
11210: LD_INT 22
11212: PUSH
11213: LD_INT 3
11215: PUSH
11216: EMPTY
11217: LIST
11218: LIST
11219: PUSH
11220: LD_INT 3
11222: PUSH
11223: LD_INT 24
11225: PUSH
11226: LD_INT 800
11228: PUSH
11229: EMPTY
11230: LIST
11231: LIST
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: PUSH
11237: LD_INT 21
11239: PUSH
11240: LD_INT 2
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: PUSH
11247: LD_INT 58
11249: PUSH
11250: EMPTY
11251: LIST
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: PPUSH
11259: CALL_OW 70
11263: OR
11264: AND
11265: IFFALSE 11278
11267: GO 11269
11269: DISABLE
// ruEscape := 1 ;
11270: LD_ADDR_EXP 35
11274: PUSH
11275: LD_INT 1
11277: ST_TO_ADDR
11278: END
// every 0 0$3 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or ruEscape = 1 do var i , unit , tmp ;
11279: LD_INT 3
11281: PPUSH
11282: CALL_OW 303
11286: PUSH
11287: LD_INT 4
11289: PPUSH
11290: CALL_OW 303
11294: OR
11295: PUSH
11296: LD_EXP 35
11300: PUSH
11301: LD_INT 1
11303: EQUAL
11304: OR
11305: IFFALSE 11894
11307: GO 11309
11309: DISABLE
11310: LD_INT 0
11312: PPUSH
11313: PPUSH
11314: PPUSH
// begin ruAI := 0 ;
11315: LD_ADDR_EXP 34
11319: PUSH
11320: LD_INT 0
11322: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
11323: LD_EXP 27
11327: PPUSH
11328: CALL_OW 122
// wait ( 0 0$1 ) ;
11332: LD_INT 35
11334: PPUSH
11335: CALL_OW 67
// DialogueOn ;
11339: CALL_OW 6
// PlaceSeeing ( 75 , 21 , 1 , 12 ) ;
11343: LD_INT 75
11345: PPUSH
11346: LD_INT 21
11348: PPUSH
11349: LD_INT 1
11351: PPUSH
11352: LD_INT 12
11354: PPUSH
11355: CALL_OW 330
// CenterNowOnXY ( 75 , 21 ) ;
11359: LD_INT 75
11361: PPUSH
11362: LD_INT 21
11364: PPUSH
11365: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
11369: LD_INT 10
11371: PPUSH
11372: CALL_OW 68
// Say ( JMM , D6-JMM-1 ) ;
11376: LD_EXP 1
11380: PPUSH
11381: LD_STRING D6-JMM-1
11383: PPUSH
11384: CALL_OW 88
// RemoveSeeing ( 75 , 21 , 1 ) ;
11388: LD_INT 75
11390: PPUSH
11391: LD_INT 21
11393: PPUSH
11394: LD_INT 1
11396: PPUSH
11397: CALL_OW 331
// DialogueOff ;
11401: CALL_OW 7
// for i in RuScientists do
11405: LD_ADDR_VAR 0 1
11409: PUSH
11410: LD_EXP 27
11414: PUSH
11415: FOR_IN
11416: IFFALSE 11452
// begin SetSide ( i , 6 ) ;
11418: LD_VAR 0 1
11422: PPUSH
11423: LD_INT 6
11425: PPUSH
11426: CALL_OW 235
// SetTag ( i , rand ( 1 , 3 ) ) ;
11430: LD_VAR 0 1
11434: PPUSH
11435: LD_INT 1
11437: PPUSH
11438: LD_INT 3
11440: PPUSH
11441: CALL_OW 12
11445: PPUSH
11446: CALL_OW 109
// end ;
11450: GO 11415
11452: POP
11453: POP
// repeat wait ( 0 0$1 ) ;
11454: LD_INT 35
11456: PPUSH
11457: CALL_OW 67
// for i in RuScientists do
11461: LD_ADDR_VAR 0 1
11465: PUSH
11466: LD_EXP 27
11470: PUSH
11471: FOR_IN
11472: IFFALSE 11885
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , i , 10 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11474: LD_ADDR_VAR 0 3
11478: PUSH
11479: LD_INT 22
11481: PUSH
11482: LD_INT 3
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: PUSH
11489: LD_INT 91
11491: PUSH
11492: LD_VAR 0 1
11496: PUSH
11497: LD_INT 10
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: LIST
11504: PUSH
11505: LD_INT 21
11507: PUSH
11508: LD_INT 2
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: PUSH
11515: LD_INT 58
11517: PUSH
11518: EMPTY
11519: LIST
11520: PUSH
11521: EMPTY
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: PPUSH
11527: CALL_OW 69
11531: ST_TO_ADDR
// if tmp and not IsInUnit ( i ) then
11532: LD_VAR 0 3
11536: PUSH
11537: LD_VAR 0 1
11541: PPUSH
11542: CALL_OW 310
11546: NOT
11547: AND
11548: IFFALSE 11576
// begin ComEnterUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
11550: LD_VAR 0 1
11554: PPUSH
11555: LD_VAR 0 3
11559: PPUSH
11560: LD_VAR 0 1
11564: PPUSH
11565: CALL_OW 74
11569: PPUSH
11570: CALL_OW 120
// continue ;
11574: GO 11471
// end ; if IsInUnit ( i ) then
11576: LD_VAR 0 1
11580: PPUSH
11581: CALL_OW 310
11585: IFFALSE 11604
// unit := IsInUnit ( i ) else
11587: LD_ADDR_VAR 0 2
11591: PUSH
11592: LD_VAR 0 1
11596: PPUSH
11597: CALL_OW 310
11601: ST_TO_ADDR
11602: GO 11614
// unit := i ;
11604: LD_ADDR_VAR 0 2
11608: PUSH
11609: LD_VAR 0 1
11613: ST_TO_ADDR
// case GetTag ( i ) of 1 :
11614: LD_VAR 0 1
11618: PPUSH
11619: CALL_OW 110
11623: PUSH
11624: LD_INT 1
11626: DOUBLE
11627: EQUAL
11628: IFTRUE 11632
11630: GO 11691
11632: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
11633: LD_VAR 0 2
11637: PPUSH
11638: LD_INT 137
11640: PPUSH
11641: CALL_OW 296
11645: PUSH
11646: LD_INT 13
11648: LESS
11649: PUSH
11650: LD_INT 137
11652: PPUSH
11653: CALL_OW 302
11657: AND
11658: IFFALSE 11674
// ComEnterUnit ( unit , rutp ) else
11660: LD_VAR 0 2
11664: PPUSH
11665: LD_INT 137
11667: PPUSH
11668: CALL_OW 120
11672: GO 11689
// ComMoveXY ( unit , 16 , 28 ) ;
11674: LD_VAR 0 2
11678: PPUSH
11679: LD_INT 16
11681: PPUSH
11682: LD_INT 28
11684: PPUSH
11685: CALL_OW 111
// end ; 2 :
11689: GO 11883
11691: LD_INT 2
11693: DOUBLE
11694: EQUAL
11695: IFTRUE 11699
11697: GO 11717
11699: POP
// ComMoveXY ( unit , 97 , 2 ) ; 3 :
11700: LD_VAR 0 2
11704: PPUSH
11705: LD_INT 97
11707: PPUSH
11708: LD_INT 2
11710: PPUSH
11711: CALL_OW 111
11715: GO 11883
11717: LD_INT 3
11719: DOUBLE
11720: EQUAL
11721: IFTRUE 11725
11723: GO 11784
11725: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
11726: LD_VAR 0 2
11730: PPUSH
11731: LD_INT 137
11733: PPUSH
11734: CALL_OW 296
11738: PUSH
11739: LD_INT 13
11741: LESS
11742: PUSH
11743: LD_INT 137
11745: PPUSH
11746: CALL_OW 302
11750: AND
11751: IFFALSE 11767
// ComEnterUnit ( unit , rutp ) else
11753: LD_VAR 0 2
11757: PPUSH
11758: LD_INT 137
11760: PPUSH
11761: CALL_OW 120
11765: GO 11782
// ComMoveXY ( unit , 128 , 155 ) ;
11767: LD_VAR 0 2
11771: PPUSH
11772: LD_INT 128
11774: PPUSH
11775: LD_INT 155
11777: PPUSH
11778: CALL_OW 111
// end ; 11 :
11782: GO 11883
11784: LD_INT 11
11786: DOUBLE
11787: EQUAL
11788: IFTRUE 11792
11790: GO 11810
11792: POP
// ComMoveXY ( unit , 16 , 28 ) ; 13 :
11793: LD_VAR 0 2
11797: PPUSH
11798: LD_INT 16
11800: PPUSH
11801: LD_INT 28
11803: PPUSH
11804: CALL_OW 111
11808: GO 11883
11810: LD_INT 13
11812: DOUBLE
11813: EQUAL
11814: IFTRUE 11818
11816: GO 11856
11818: POP
// begin if IsOk ( ruteleprt ) then
11819: LD_INT 10
11821: PPUSH
11822: CALL_OW 302
11826: IFFALSE 11842
// ComEnterUnit ( unit , ruteleprt ) else
11828: LD_VAR 0 2
11832: PPUSH
11833: LD_INT 10
11835: PPUSH
11836: CALL_OW 120
11840: GO 11854
// SetTag ( unit , 23 ) ;
11842: LD_VAR 0 2
11846: PPUSH
11847: LD_INT 23
11849: PPUSH
11850: CALL_OW 109
// end ; 23 :
11854: GO 11883
11856: LD_INT 23
11858: DOUBLE
11859: EQUAL
11860: IFTRUE 11864
11862: GO 11882
11864: POP
// ComMoveXY ( unit , 128 , 155 ) ; end ;
11865: LD_VAR 0 2
11869: PPUSH
11870: LD_INT 128
11872: PPUSH
11873: LD_INT 155
11875: PPUSH
11876: CALL_OW 111
11880: GO 11883
11882: POP
// end ;
11883: GO 11471
11885: POP
11886: POP
// until not RuScientists ;
11887: LD_EXP 27
11891: NOT
11892: IFFALSE 11454
// end ;
11894: PPOPN 3
11896: END
// every 0 0$1 trigger ruAI = 0 and RuScientists and FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do var i , unit , veh , tmp ;
11897: LD_EXP 34
11901: PUSH
11902: LD_INT 0
11904: EQUAL
11905: PUSH
11906: LD_EXP 27
11910: AND
11911: PUSH
11912: LD_INT 22
11914: PUSH
11915: LD_INT 6
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: PUSH
11922: LD_INT 2
11924: PUSH
11925: LD_INT 95
11927: PUSH
11928: LD_INT 13
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: PUSH
11935: LD_INT 95
11937: PUSH
11938: LD_INT 14
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: PUSH
11945: LD_INT 95
11947: PUSH
11948: LD_INT 25
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: PPUSH
11965: CALL_OW 69
11969: AND
11970: IFFALSE 12183
11972: GO 11974
11974: DISABLE
11975: LD_INT 0
11977: PPUSH
11978: PPUSH
11979: PPUSH
11980: PPUSH
// begin enable ;
11981: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do
11982: LD_ADDR_VAR 0 1
11986: PUSH
11987: LD_INT 22
11989: PUSH
11990: LD_INT 6
11992: PUSH
11993: EMPTY
11994: LIST
11995: LIST
11996: PUSH
11997: LD_INT 2
11999: PUSH
12000: LD_INT 95
12002: PUSH
12003: LD_INT 13
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: LD_INT 95
12012: PUSH
12013: LD_INT 14
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PUSH
12020: LD_INT 95
12022: PUSH
12023: LD_INT 25
12025: PUSH
12026: EMPTY
12027: LIST
12028: LIST
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: PPUSH
12040: CALL_OW 69
12044: PUSH
12045: FOR_IN
12046: IFFALSE 12181
// begin if i in RuScientists then
12048: LD_VAR 0 1
12052: PUSH
12053: LD_EXP 27
12057: IN
12058: IFFALSE 12087
// begin RuScientists = RuScientists diff i ;
12060: LD_ADDR_EXP 27
12064: PUSH
12065: LD_EXP 27
12069: PUSH
12070: LD_VAR 0 1
12074: DIFF
12075: ST_TO_ADDR
// RemoveUnit ( i ) ;
12076: LD_VAR 0 1
12080: PPUSH
12081: CALL_OW 64
// continue ;
12085: GO 12045
// end ; if i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_manual ] ] ) then
12087: LD_VAR 0 1
12091: PUSH
12092: LD_INT 22
12094: PUSH
12095: LD_INT 6
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: PUSH
12102: LD_INT 33
12104: PUSH
12105: LD_INT 1
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: PPUSH
12116: CALL_OW 69
12120: IN
12121: IFFALSE 12179
// begin if IsDrivenBy ( i ) in RuScientists then
12123: LD_VAR 0 1
12127: PPUSH
12128: CALL_OW 311
12132: PUSH
12133: LD_EXP 27
12137: IN
12138: IFFALSE 12156
// RuScientists = RuScientists diff i ;
12140: LD_ADDR_EXP 27
12144: PUSH
12145: LD_EXP 27
12149: PUSH
12150: LD_VAR 0 1
12154: DIFF
12155: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
12156: LD_VAR 0 1
12160: PPUSH
12161: CALL_OW 311
12165: PPUSH
12166: CALL_OW 64
// RemoveUnit ( i ) ;
12170: LD_VAR 0 1
12174: PPUSH
12175: CALL_OW 64
// end ; end ;
12179: GO 12045
12181: POP
12182: POP
// end ; end_of_file
12183: PPOPN 4
12185: END
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12186: LD_INT 0
12188: PPUSH
12189: PPUSH
// for i in charactersList do
12190: LD_ADDR_VAR 0 4
12194: PUSH
12195: LD_VAR 0 1
12199: PUSH
12200: FOR_IN
12201: IFFALSE 12219
// SaveCharacters ( i , ident ) ;
12203: LD_VAR 0 4
12207: PPUSH
12208: LD_VAR 0 2
12212: PPUSH
12213: CALL_OW 38
12217: GO 12200
12219: POP
12220: POP
// end ;
12221: LD_VAR 0 3
12225: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
12226: LD_INT 0
12228: PPUSH
12229: PPUSH
12230: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12231: LD_ADDR_VAR 0 1
12235: PUSH
12236: LD_VAR 0 1
12240: PUSH
12241: LD_EXP 1
12245: PUSH
12246: LD_EXP 7
12250: PUSH
12251: LD_EXP 3
12255: PUSH
12256: LD_EXP 4
12260: PUSH
12261: LD_EXP 5
12265: PUSH
12266: LD_EXP 2
12270: PUSH
12271: LD_EXP 12
12275: PUSH
12276: LD_EXP 13
12280: PUSH
12281: LD_EXP 9
12285: PUSH
12286: LD_EXP 11
12290: PUSH
12291: LD_EXP 6
12295: PUSH
12296: LD_EXP 8
12300: PUSH
12301: LD_EXP 10
12305: PUSH
12306: LD_EXP 15
12310: PUSH
12311: EMPTY
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: DIFF
12327: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
12328: LD_ADDR_VAR 0 6
12332: PUSH
12333: LD_VAR 0 1
12337: PUSH
12338: LD_INT 1
12340: PPUSH
12341: LD_VAR 0 1
12345: PPUSH
12346: CALL_OW 12
12350: ARRAY
12351: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
12352: LD_VAR 0 6
12356: PPUSH
12357: CALL_OW 258
12361: PUSH
12362: LD_INT 1
12364: EQUAL
12365: IFFALSE 12383
// Say ( speaker , dialogMID ) else
12367: LD_VAR 0 6
12371: PPUSH
12372: LD_VAR 0 2
12376: PPUSH
12377: CALL_OW 88
12381: GO 12397
// Say ( speaker , dialogFID ) ;
12383: LD_VAR 0 6
12387: PPUSH
12388: LD_VAR 0 3
12392: PPUSH
12393: CALL_OW 88
// result := speaker ;
12397: LD_ADDR_VAR 0 4
12401: PUSH
12402: LD_VAR 0 6
12406: ST_TO_ADDR
// end ;
12407: LD_VAR 0 4
12411: RET
// export function PrepareDifficulty ; var tmp ; begin
12412: LD_INT 0
12414: PPUSH
12415: PPUSH
// if Difficulty = 1 then
12416: LD_OWVAR 67
12420: PUSH
12421: LD_INT 1
12423: EQUAL
12424: IFFALSE 12444
// begin RuSolMinLevel = 8 ;
12426: LD_ADDR_EXP 29
12430: PUSH
12431: LD_INT 8
12433: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12434: LD_ADDR_EXP 30
12438: PUSH
12439: LD_INT 10
12441: ST_TO_ADDR
// end else
12442: GO 12684
// if Difficulty = 2 then
12444: LD_OWVAR 67
12448: PUSH
12449: LD_INT 2
12451: EQUAL
12452: IFFALSE 12548
// begin RuSolMinLevel = 9 ;
12454: LD_ADDR_EXP 29
12458: PUSH
12459: LD_INT 9
12461: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12462: LD_ADDR_EXP 30
12466: PUSH
12467: LD_INT 10
12469: ST_TO_ADDR
// uc_nation = 3 ;
12470: LD_ADDR_OWVAR 21
12474: PUSH
12475: LD_INT 3
12477: ST_TO_ADDR
// uc_side = 3 ;
12478: LD_ADDR_OWVAR 20
12482: PUSH
12483: LD_INT 3
12485: ST_TO_ADDR
// bc_level = 10 ;
12486: LD_ADDR_OWVAR 43
12490: PUSH
12491: LD_INT 10
12493: ST_TO_ADDR
// bc_type = b_turret ;
12494: LD_ADDR_OWVAR 42
12498: PUSH
12499: LD_INT 33
12501: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12502: LD_ADDR_VAR 0 2
12506: PUSH
12507: LD_INT 86
12509: PPUSH
12510: LD_INT 34
12512: PPUSH
12513: LD_INT 2
12515: PPUSH
12516: CALL_OW 47
12520: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12521: LD_VAR 0 2
12525: PPUSH
12526: LD_INT 49
12528: PPUSH
12529: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12533: LD_INT 64
12535: PPUSH
12536: LD_INT 3
12538: PPUSH
12539: LD_INT 1
12541: PPUSH
12542: CALL_OW 322
// end else
12546: GO 12684
// begin RuSolMinLevel = 10 ;
12548: LD_ADDR_EXP 29
12552: PUSH
12553: LD_INT 10
12555: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12556: LD_ADDR_EXP 30
12560: PUSH
12561: LD_INT 10
12563: ST_TO_ADDR
// uc_nation = 3 ;
12564: LD_ADDR_OWVAR 21
12568: PUSH
12569: LD_INT 3
12571: ST_TO_ADDR
// uc_side = 3 ;
12572: LD_ADDR_OWVAR 20
12576: PUSH
12577: LD_INT 3
12579: ST_TO_ADDR
// bc_level = 10 ;
12580: LD_ADDR_OWVAR 43
12584: PUSH
12585: LD_INT 10
12587: ST_TO_ADDR
// bc_type = b_turret ;
12588: LD_ADDR_OWVAR 42
12592: PUSH
12593: LD_INT 33
12595: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12596: LD_ADDR_VAR 0 2
12600: PUSH
12601: LD_INT 86
12603: PPUSH
12604: LD_INT 34
12606: PPUSH
12607: LD_INT 2
12609: PPUSH
12610: CALL_OW 47
12614: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12615: LD_VAR 0 2
12619: PPUSH
12620: LD_INT 49
12622: PPUSH
12623: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
12627: LD_ADDR_VAR 0 2
12631: PUSH
12632: LD_INT 93
12634: PPUSH
12635: LD_INT 31
12637: PPUSH
12638: LD_INT 2
12640: PPUSH
12641: CALL_OW 47
12645: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12646: LD_VAR 0 2
12650: PPUSH
12651: LD_INT 49
12653: PPUSH
12654: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12658: LD_INT 64
12660: PPUSH
12661: LD_INT 3
12663: PPUSH
12664: LD_INT 1
12666: PPUSH
12667: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
12671: LD_INT 65
12673: PPUSH
12674: LD_INT 3
12676: PPUSH
12677: LD_INT 1
12679: PPUSH
12680: CALL_OW 322
// end ; end ;
12684: LD_VAR 0 1
12688: RET
// export function ShowQuery1 ; begin
12689: LD_INT 0
12691: PPUSH
// result := Query ( Q1 ) ;
12692: LD_ADDR_VAR 0 1
12696: PUSH
12697: LD_STRING Q1
12699: PPUSH
12700: CALL_OW 97
12704: ST_TO_ADDR
// end ;
12705: LD_VAR 0 1
12709: RET
// export function ShowQuery2 ; begin
12710: LD_INT 0
12712: PPUSH
// result := Query ( Q1a ) ;
12713: LD_ADDR_VAR 0 1
12717: PUSH
12718: LD_STRING Q1a
12720: PPUSH
12721: CALL_OW 97
12725: ST_TO_ADDR
// end ;
12726: LD_VAR 0 1
12730: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
12731: LD_INT 0
12733: PPUSH
12734: PPUSH
12735: PPUSH
12736: PPUSH
// for i = 1 to count do
12737: LD_ADDR_VAR 0 8
12741: PUSH
12742: DOUBLE
12743: LD_INT 1
12745: DEC
12746: ST_TO_ADDR
12747: LD_VAR 0 6
12751: PUSH
12752: FOR_TO
12753: IFFALSE 12834
// begin uc_side = side ;
12755: LD_ADDR_OWVAR 20
12759: PUSH
12760: LD_VAR 0 1
12764: ST_TO_ADDR
// uc_nation = nation ;
12765: LD_ADDR_OWVAR 21
12769: PUSH
12770: LD_VAR 0 2
12774: ST_TO_ADDR
// hc_gallery =  ;
12775: LD_ADDR_OWVAR 33
12779: PUSH
12780: LD_STRING 
12782: ST_TO_ADDR
// hc_name =  ;
12783: LD_ADDR_OWVAR 26
12787: PUSH
12788: LD_STRING 
12790: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
12791: LD_INT 0
12793: PPUSH
12794: LD_VAR 0 5
12798: PPUSH
12799: LD_VAR 0 4
12803: PPUSH
12804: CALL_OW 380
// un = CreateHuman ;
12808: LD_ADDR_VAR 0 10
12812: PUSH
12813: CALL_OW 44
12817: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
12818: LD_VAR 0 10
12822: PPUSH
12823: LD_VAR 0 3
12827: PPUSH
12828: CALL_OW 52
// end ;
12832: GO 12752
12834: POP
12835: POP
// end ;
12836: LD_VAR 0 7
12840: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , list ; begin
12841: LD_INT 0
12843: PPUSH
12844: PPUSH
12845: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
12846: LD_ADDR_VAR 0 6
12850: PUSH
12851: LD_INT 48
12853: PUSH
12854: LD_INT 49
12856: PUSH
12857: LD_INT 50
12859: PUSH
12860: LD_INT 20
12862: PUSH
12863: LD_INT 1
12865: PUSH
12866: LD_INT 51
12868: PUSH
12869: LD_INT 52
12871: PUSH
12872: LD_INT 69
12874: PUSH
12875: LD_INT 39
12877: PUSH
12878: LD_INT 34
12880: PUSH
12881: LD_INT 40
12883: PUSH
12884: LD_INT 53
12886: PUSH
12887: LD_INT 71
12889: PUSH
12890: LD_INT 57
12892: PUSH
12893: LD_INT 58
12895: PUSH
12896: LD_INT 44
12898: PUSH
12899: LD_INT 32
12901: PUSH
12902: LD_INT 27
12904: PUSH
12905: LD_INT 23
12907: PUSH
12908: LD_INT 33
12910: PUSH
12911: LD_INT 59
12913: PUSH
12914: LD_INT 54
12916: PUSH
12917: LD_INT 55
12919: PUSH
12920: LD_INT 56
12922: PUSH
12923: LD_INT 63
12925: PUSH
12926: LD_INT 64
12928: PUSH
12929: LD_INT 65
12931: PUSH
12932: LD_INT 30
12934: PUSH
12935: LD_INT 31
12937: PUSH
12938: LD_INT 21
12940: PUSH
12941: LD_INT 22
12943: PUSH
12944: LD_INT 25
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: ST_TO_ADDR
// for i := 1 to list do
12981: LD_ADDR_VAR 0 5
12985: PUSH
12986: DOUBLE
12987: LD_INT 1
12989: DEC
12990: ST_TO_ADDR
12991: LD_VAR 0 6
12995: PUSH
12996: FOR_TO
12997: IFFALSE 13069
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
12999: LD_VAR 0 6
13003: PUSH
13004: LD_VAR 0 5
13008: ARRAY
13009: PPUSH
13010: LD_VAR 0 1
13014: PPUSH
13015: CALL_OW 321
13019: PUSH
13020: LD_INT 1
13022: EQUAL
13023: PUSH
13024: LD_VAR 0 6
13028: PUSH
13029: LD_VAR 0 5
13033: ARRAY
13034: PPUSH
13035: LD_VAR 0 3
13039: PPUSH
13040: CALL_OW 482
13044: AND
13045: IFFALSE 13067
// AddComResearch ( lab , list [ i ] ) ;
13047: LD_VAR 0 2
13051: PPUSH
13052: LD_VAR 0 6
13056: PUSH
13057: LD_VAR 0 5
13061: ARRAY
13062: PPUSH
13063: CALL_OW 184
13067: GO 12996
13069: POP
13070: POP
// end ;
13071: LD_VAR 0 4
13075: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
13076: LD_INT 0
13078: PPUSH
13079: PPUSH
13080: PPUSH
13081: PPUSH
13082: PPUSH
13083: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
13084: LD_ADDR_VAR 0 8
13088: PUSH
13089: LD_VAR 0 2
13093: PPUSH
13094: CALL_OW 313
13098: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13099: LD_ADDR_VAR 0 9
13103: PUSH
13104: LD_VAR 0 3
13108: PPUSH
13109: LD_INT 22
13111: PUSH
13112: LD_VAR 0 1
13116: PUSH
13117: EMPTY
13118: LIST
13119: LIST
13120: PUSH
13121: LD_INT 25
13123: PUSH
13124: LD_INT 2
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: PUSH
13131: LD_INT 24
13133: PUSH
13134: LD_INT 750
13136: PUSH
13137: EMPTY
13138: LIST
13139: LIST
13140: PUSH
13141: LD_INT 3
13143: PUSH
13144: LD_INT 54
13146: PUSH
13147: EMPTY
13148: LIST
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: PPUSH
13160: CALL_OW 70
13164: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13165: LD_ADDR_VAR 0 6
13169: PUSH
13170: LD_VAR 0 3
13174: PPUSH
13175: LD_INT 22
13177: PUSH
13178: LD_VAR 0 1
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: PUSH
13187: LD_INT 21
13189: PUSH
13190: LD_INT 3
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: PUSH
13197: LD_INT 3
13199: PUSH
13200: LD_INT 24
13202: PUSH
13203: LD_INT 1000
13205: PUSH
13206: EMPTY
13207: LIST
13208: LIST
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: LIST
13218: PUSH
13219: EMPTY
13220: LIST
13221: PPUSH
13222: CALL_OW 70
13226: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13227: LD_VAR 0 6
13231: NOT
13232: PUSH
13233: LD_INT 22
13235: PUSH
13236: LD_VAR 0 1
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: PUSH
13245: LD_INT 25
13247: PUSH
13248: LD_INT 2
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: PUSH
13255: LD_INT 24
13257: PUSH
13258: LD_INT 250
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: PUSH
13265: EMPTY
13266: LIST
13267: LIST
13268: LIST
13269: PPUSH
13270: CALL_OW 69
13274: NOT
13275: AND
13276: IFFALSE 13280
// exit ;
13278: GO 13438
// if buildingsList and engineerOkInside then
13280: LD_VAR 0 6
13284: PUSH
13285: LD_VAR 0 8
13289: AND
13290: IFFALSE 13301
// ComExitBuilding ( engineerOkInside ) ;
13292: LD_VAR 0 8
13296: PPUSH
13297: CALL_OW 122
// if buildingsList and engineerOkOutside then
13301: LD_VAR 0 6
13305: PUSH
13306: LD_VAR 0 9
13310: AND
13311: IFFALSE 13331
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
13313: LD_VAR 0 9
13317: PPUSH
13318: LD_VAR 0 6
13322: PUSH
13323: LD_INT 1
13325: ARRAY
13326: PPUSH
13327: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
13331: LD_VAR 0 6
13335: PUSH
13336: LD_INT 0
13338: EQUAL
13339: PUSH
13340: LD_VAR 0 4
13344: PUSH
13345: LD_INT 0
13347: EQUAL
13348: AND
13349: PUSH
13350: LD_VAR 0 9
13354: AND
13355: IFFALSE 13371
// ComEnterUnit ( engineerOkOutside , depot ) ;
13357: LD_VAR 0 9
13361: PPUSH
13362: LD_VAR 0 2
13366: PPUSH
13367: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
13371: LD_VAR 0 9
13375: PUSH
13376: LD_VAR 0 6
13380: PUSH
13381: LD_INT 0
13383: EQUAL
13384: AND
13385: PUSH
13386: LD_VAR 0 4
13390: AND
13391: IFFALSE 13438
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13393: LD_VAR 0 9
13397: PPUSH
13398: LD_VAR 0 4
13402: PUSH
13403: LD_INT 1
13405: ARRAY
13406: PPUSH
13407: LD_VAR 0 4
13411: PUSH
13412: LD_INT 2
13414: ARRAY
13415: PPUSH
13416: LD_VAR 0 4
13420: PUSH
13421: LD_INT 3
13423: ARRAY
13424: PPUSH
13425: LD_VAR 0 4
13429: PUSH
13430: LD_INT 4
13432: ARRAY
13433: PPUSH
13434: CALL_OW 145
// end ;
13438: LD_VAR 0 5
13442: RET
// export function HealUnitInBase ( side , healArea , baseArea , buildings ) ; var sciList , sciListOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13443: LD_INT 0
13445: PPUSH
13446: PPUSH
13447: PPUSH
13448: PPUSH
13449: PPUSH
13450: PPUSH
13451: PPUSH
13452: PPUSH
13453: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13454: LD_ADDR_VAR 0 6
13458: PUSH
13459: LD_INT 22
13461: PUSH
13462: LD_VAR 0 1
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: PUSH
13471: LD_INT 25
13473: PUSH
13474: LD_INT 4
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: PUSH
13481: LD_INT 24
13483: PUSH
13484: LD_INT 251
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: LIST
13495: PPUSH
13496: CALL_OW 69
13500: PUSH
13501: LD_EXP 27
13505: PUSH
13506: EMPTY
13507: LIST
13508: DIFF
13509: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_outside ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13510: LD_ADDR_VAR 0 7
13514: PUSH
13515: LD_VAR 0 3
13519: PPUSH
13520: LD_INT 22
13522: PUSH
13523: LD_VAR 0 1
13527: PUSH
13528: EMPTY
13529: LIST
13530: LIST
13531: PUSH
13532: LD_INT 56
13534: PUSH
13535: EMPTY
13536: LIST
13537: PUSH
13538: LD_INT 25
13540: PUSH
13541: LD_INT 4
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: PUSH
13548: LD_INT 50
13550: PUSH
13551: EMPTY
13552: LIST
13553: PUSH
13554: EMPTY
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: PPUSH
13560: CALL_OW 70
13564: PUSH
13565: LD_EXP 27
13569: PUSH
13570: EMPTY
13571: LIST
13572: DIFF
13573: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13574: LD_ADDR_VAR 0 10
13578: PUSH
13579: LD_VAR 0 3
13583: PPUSH
13584: LD_INT 22
13586: PUSH
13587: LD_VAR 0 1
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: PUSH
13596: LD_INT 21
13598: PUSH
13599: LD_INT 1
13601: PUSH
13602: EMPTY
13603: LIST
13604: LIST
13605: PUSH
13606: LD_INT 3
13608: PUSH
13609: LD_INT 24
13611: PUSH
13612: LD_INT 750
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: PUSH
13619: EMPTY
13620: LIST
13621: LIST
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: LIST
13627: PPUSH
13628: CALL_OW 70
13632: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13633: LD_ADDR_VAR 0 11
13637: PUSH
13638: LD_VAR 0 2
13642: PPUSH
13643: LD_INT 22
13645: PUSH
13646: LD_VAR 0 1
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: PUSH
13655: LD_INT 21
13657: PUSH
13658: LD_INT 1
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: PUSH
13665: LD_INT 3
13667: PUSH
13668: LD_INT 24
13670: PUSH
13671: LD_INT 1000
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: LIST
13686: PPUSH
13687: CALL_OW 70
13691: ST_TO_ADDR
// if damageUnits and sciList then
13692: LD_VAR 0 10
13696: PUSH
13697: LD_VAR 0 6
13701: AND
13702: IFFALSE 13718
// ComMoveToArea ( damageUnits , healArea ) ;
13704: LD_VAR 0 10
13708: PPUSH
13709: LD_VAR 0 2
13713: PPUSH
13714: CALL_OW 113
// if unitsToHeal and sciList and sciListOutside = 0 then
13718: LD_VAR 0 11
13722: PUSH
13723: LD_VAR 0 6
13727: AND
13728: PUSH
13729: LD_VAR 0 7
13733: PUSH
13734: LD_INT 0
13736: EQUAL
13737: AND
13738: IFFALSE 13784
// for i in buildings do
13740: LD_ADDR_VAR 0 8
13744: PUSH
13745: LD_VAR 0 4
13749: PUSH
13750: FOR_IN
13751: IFFALSE 13782
// begin if UnitsInside ( i ) then
13753: LD_VAR 0 8
13757: PPUSH
13758: CALL_OW 313
13762: IFFALSE 13780
// begin ComExitBuilding ( UnitsInside ( i ) ) ;
13764: LD_VAR 0 8
13768: PPUSH
13769: CALL_OW 313
13773: PPUSH
13774: CALL_OW 122
// break ;
13778: GO 13782
// end ; end ;
13780: GO 13750
13782: POP
13783: POP
// if unitsToHeal and sciListOutside then
13784: LD_VAR 0 11
13788: PUSH
13789: LD_VAR 0 7
13793: AND
13794: IFFALSE 13814
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
13796: LD_VAR 0 7
13800: PPUSH
13801: LD_VAR 0 11
13805: PUSH
13806: LD_INT 1
13808: ARRAY
13809: PPUSH
13810: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
13814: LD_VAR 0 10
13818: PUSH
13819: LD_INT 0
13821: EQUAL
13822: PUSH
13823: LD_VAR 0 11
13827: PUSH
13828: LD_INT 0
13830: EQUAL
13831: AND
13832: PUSH
13833: LD_VAR 0 7
13837: AND
13838: IFFALSE 13906
// begin tmp := buildings ;
13840: LD_ADDR_VAR 0 12
13844: PUSH
13845: LD_VAR 0 4
13849: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
13850: LD_ADDR_VAR 0 13
13854: PUSH
13855: LD_INT 1
13857: PPUSH
13858: LD_VAR 0 12
13862: PPUSH
13863: CALL_OW 12
13867: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
13868: LD_VAR 0 7
13872: PPUSH
13873: LD_INT 3
13875: PUSH
13876: LD_INT 60
13878: PUSH
13879: EMPTY
13880: LIST
13881: PUSH
13882: EMPTY
13883: LIST
13884: LIST
13885: PPUSH
13886: CALL_OW 72
13890: PPUSH
13891: LD_VAR 0 12
13895: PUSH
13896: LD_VAR 0 13
13900: ARRAY
13901: PPUSH
13902: CALL_OW 120
// end ; end ;
13906: LD_VAR 0 5
13910: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
13911: LD_INT 0
13913: PPUSH
13914: PPUSH
13915: PPUSH
13916: PPUSH
13917: PPUSH
13918: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
13919: LD_ADDR_VAR 0 7
13923: PUSH
13924: LD_VAR 0 2
13928: PPUSH
13929: LD_INT 22
13931: PUSH
13932: LD_VAR 0 1
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: PUSH
13941: LD_INT 21
13943: PUSH
13944: LD_INT 2
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: PUSH
13951: LD_INT 34
13953: PUSH
13954: LD_INT 52
13956: PUSH
13957: EMPTY
13958: LIST
13959: LIST
13960: PUSH
13961: EMPTY
13962: LIST
13963: LIST
13964: LIST
13965: PPUSH
13966: CALL_OW 70
13970: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13971: LD_ADDR_VAR 0 8
13975: PUSH
13976: LD_VAR 0 2
13980: PPUSH
13981: LD_INT 22
13983: PUSH
13984: LD_VAR 0 1
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: PUSH
13993: LD_INT 21
13995: PUSH
13996: LD_INT 3
13998: PUSH
13999: EMPTY
14000: LIST
14001: LIST
14002: PUSH
14003: LD_INT 3
14005: PUSH
14006: LD_INT 24
14008: PUSH
14009: LD_INT 1000
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: PUSH
14020: EMPTY
14021: LIST
14022: LIST
14023: LIST
14024: PUSH
14025: EMPTY
14026: LIST
14027: PPUSH
14028: CALL_OW 70
14032: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
14033: LD_VAR 0 8
14037: PUSH
14038: LD_INT 0
14040: GREATER
14041: PUSH
14042: LD_VAR 0 7
14046: PPUSH
14047: LD_INT 24
14049: PUSH
14050: LD_INT 750
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: PPUSH
14057: CALL_OW 72
14061: PUSH
14062: LD_INT 0
14064: GREATER
14065: AND
14066: IFFALSE 14086
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
14068: LD_VAR 0 7
14072: PPUSH
14073: LD_VAR 0 8
14077: PUSH
14078: LD_INT 1
14080: ARRAY
14081: PPUSH
14082: CALL_OW 130
// end ;
14086: LD_VAR 0 3
14090: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14091: LD_INT 0
14093: PPUSH
14094: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14095: LD_INT 22
14097: PUSH
14098: LD_VAR 0 1
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: PUSH
14107: LD_INT 21
14109: PUSH
14110: LD_INT 2
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: PPUSH
14121: CALL_OW 69
14125: PUSH
14126: LD_INT 18
14128: PPUSH
14129: LD_INT 22
14131: PUSH
14132: LD_VAR 0 1
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: PUSH
14141: LD_INT 21
14143: PUSH
14144: LD_INT 2
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: PPUSH
14155: CALL_OW 70
14159: PUSH
14160: LD_VAR 0 3
14164: LESSEQUAL
14165: DIFF
14166: IFFALSE 14233
// for i := 1 to vehCount do
14168: LD_ADDR_VAR 0 9
14172: PUSH
14173: DOUBLE
14174: LD_INT 1
14176: DEC
14177: ST_TO_ADDR
14178: LD_VAR 0 3
14182: PUSH
14183: FOR_TO
14184: IFFALSE 14231
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14186: LD_VAR 0 2
14190: PPUSH
14191: LD_VAR 0 7
14195: PPUSH
14196: LD_VAR 0 5
14200: PPUSH
14201: LD_VAR 0 6
14205: PPUSH
14206: LD_VAR 0 4
14210: PUSH
14211: LD_INT 1
14213: PPUSH
14214: LD_VAR 0 4
14218: PPUSH
14219: CALL_OW 12
14223: ARRAY
14224: PPUSH
14225: CALL_OW 185
14229: GO 14183
14231: POP
14232: POP
// end ;
14233: LD_VAR 0 8
14237: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
14238: LD_INT 0
14240: PPUSH
14241: PPUSH
14242: PPUSH
14243: PPUSH
14244: PPUSH
14245: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14246: LD_ADDR_VAR 0 6
14250: PUSH
14251: LD_INT 22
14253: PUSH
14254: LD_VAR 0 1
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: PUSH
14263: LD_INT 25
14265: PUSH
14266: LD_INT 9
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: PPUSH
14277: CALL_OW 69
14281: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14282: LD_ADDR_VAR 0 7
14286: PUSH
14287: LD_INT 81
14289: PUSH
14290: LD_VAR 0 1
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: PUSH
14299: LD_INT 3
14301: PUSH
14302: LD_INT 21
14304: PUSH
14305: LD_INT 3
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: PPUSH
14320: CALL_OW 69
14324: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14325: LD_ADDR_VAR 0 4
14329: PUSH
14330: LD_INT 1
14332: PPUSH
14333: LD_INT 3
14335: PPUSH
14336: CALL_OW 12
14340: ST_TO_ADDR
// for i := 1 to list do
14341: LD_ADDR_VAR 0 5
14345: PUSH
14346: DOUBLE
14347: LD_INT 1
14349: DEC
14350: ST_TO_ADDR
14351: LD_VAR 0 6
14355: PUSH
14356: FOR_TO
14357: IFFALSE 14559
// for ta in filter do
14359: LD_ADDR_VAR 0 3
14363: PUSH
14364: LD_VAR 0 7
14368: PUSH
14369: FOR_IN
14370: IFFALSE 14555
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14372: LD_VAR 0 6
14376: PUSH
14377: LD_VAR 0 5
14381: ARRAY
14382: PPUSH
14383: LD_VAR 0 3
14387: PPUSH
14388: CALL_OW 296
14392: PUSH
14393: LD_INT 15
14395: LESSEQUAL
14396: IFFALSE 14553
// begin case c of 1 :
14398: LD_VAR 0 4
14402: PUSH
14403: LD_INT 1
14405: DOUBLE
14406: EQUAL
14407: IFTRUE 14411
14409: GO 14449
14411: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
14412: LD_VAR 0 6
14416: PUSH
14417: LD_VAR 0 5
14421: ARRAY
14422: PPUSH
14423: LD_VAR 0 3
14427: PPUSH
14428: CALL_OW 250
14432: PPUSH
14433: LD_VAR 0 3
14437: PPUSH
14438: CALL_OW 251
14442: PPUSH
14443: CALL_OW 154
14447: GO 14553
14449: LD_INT 2
14451: DOUBLE
14452: EQUAL
14453: IFTRUE 14457
14455: GO 14521
14457: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
14458: LD_VAR 0 6
14462: PUSH
14463: LD_VAR 0 5
14467: ARRAY
14468: PPUSH
14469: LD_VAR 0 3
14473: PPUSH
14474: CALL_OW 250
14478: PUSH
14479: LD_INT 1
14481: NEG
14482: PPUSH
14483: LD_INT 1
14485: PPUSH
14486: CALL_OW 12
14490: PLUS
14491: PPUSH
14492: LD_VAR 0 3
14496: PPUSH
14497: CALL_OW 251
14501: PUSH
14502: LD_INT 1
14504: NEG
14505: PPUSH
14506: LD_INT 1
14508: PPUSH
14509: CALL_OW 12
14513: PLUS
14514: PPUSH
14515: CALL_OW 153
14519: GO 14553
14521: LD_INT 3
14523: DOUBLE
14524: EQUAL
14525: IFTRUE 14529
14527: GO 14552
14529: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14530: LD_VAR 0 6
14534: PUSH
14535: LD_VAR 0 5
14539: ARRAY
14540: PPUSH
14541: LD_VAR 0 3
14545: PPUSH
14546: CALL_OW 115
14550: GO 14553
14552: POP
// end ; end ;
14553: GO 14369
14555: POP
14556: POP
14557: GO 14356
14559: POP
14560: POP
// end ;
14561: LD_VAR 0 2
14565: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
14566: LD_INT 0
14568: PPUSH
14569: PPUSH
14570: PPUSH
14571: PPUSH
// r := 100 ;
14572: LD_ADDR_VAR 0 5
14576: PUSH
14577: LD_INT 100
14579: ST_TO_ADDR
// x := 0 ;
14580: LD_ADDR_VAR 0 6
14584: PUSH
14585: LD_INT 0
14587: ST_TO_ADDR
// while ( x < n ) do
14588: LD_VAR 0 6
14592: PUSH
14593: LD_VAR 0 2
14597: LESS
14598: IFFALSE 14861
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
14600: LD_ADDR_VAR 0 4
14604: PUSH
14605: DOUBLE
14606: LD_INT 1
14608: DEC
14609: ST_TO_ADDR
14610: LD_VAR 0 1
14614: PPUSH
14615: LD_INT 0
14617: PPUSH
14618: CALL_OW 517
14622: PUSH
14623: LD_INT 1
14625: ARRAY
14626: PUSH
14627: FOR_TO
14628: IFFALSE 14857
// begin if r > 50 then
14630: LD_VAR 0 5
14634: PUSH
14635: LD_INT 50
14637: GREATER
14638: IFFALSE 14841
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
14640: LD_VAR 0 1
14644: PPUSH
14645: LD_INT 0
14647: PPUSH
14648: CALL_OW 517
14652: PUSH
14653: LD_INT 1
14655: ARRAY
14656: PUSH
14657: LD_VAR 0 4
14661: ARRAY
14662: PPUSH
14663: LD_VAR 0 1
14667: PPUSH
14668: LD_INT 0
14670: PPUSH
14671: CALL_OW 517
14675: PUSH
14676: LD_INT 2
14678: ARRAY
14679: PUSH
14680: LD_VAR 0 4
14684: ARRAY
14685: PPUSH
14686: CALL_OW 458
14690: NOT
14691: IFFALSE 14839
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
14693: LD_VAR 0 1
14697: PPUSH
14698: LD_INT 0
14700: PPUSH
14701: CALL_OW 517
14705: PUSH
14706: LD_INT 1
14708: ARRAY
14709: PUSH
14710: LD_VAR 0 4
14714: ARRAY
14715: PPUSH
14716: LD_VAR 0 1
14720: PPUSH
14721: LD_INT 0
14723: PPUSH
14724: CALL_OW 517
14728: PUSH
14729: LD_INT 2
14731: ARRAY
14732: PUSH
14733: LD_VAR 0 4
14737: ARRAY
14738: PPUSH
14739: LD_INT 8
14741: PPUSH
14742: LD_INT 0
14744: PPUSH
14745: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
14749: LD_ADDR_EXP 37
14753: PUSH
14754: LD_EXP 37
14758: PPUSH
14759: LD_INT 1
14761: PPUSH
14762: LD_VAR 0 1
14766: PPUSH
14767: LD_INT 0
14769: PPUSH
14770: CALL_OW 517
14774: PUSH
14775: LD_INT 1
14777: ARRAY
14778: PUSH
14779: LD_VAR 0 4
14783: ARRAY
14784: PUSH
14785: LD_VAR 0 1
14789: PPUSH
14790: LD_INT 0
14792: PPUSH
14793: CALL_OW 517
14797: PUSH
14798: LD_INT 2
14800: ARRAY
14801: PUSH
14802: LD_VAR 0 4
14806: ARRAY
14807: PUSH
14808: EMPTY
14809: LIST
14810: LIST
14811: PPUSH
14812: CALL_OW 2
14816: ST_TO_ADDR
// r := 0 ;
14817: LD_ADDR_VAR 0 5
14821: PUSH
14822: LD_INT 0
14824: ST_TO_ADDR
// x := x + 1 ;
14825: LD_ADDR_VAR 0 6
14829: PUSH
14830: LD_VAR 0 6
14834: PUSH
14835: LD_INT 1
14837: PLUS
14838: ST_TO_ADDR
// end end else
14839: GO 14855
// r := r + 35 ;
14841: LD_ADDR_VAR 0 5
14845: PUSH
14846: LD_VAR 0 5
14850: PUSH
14851: LD_INT 35
14853: PLUS
14854: ST_TO_ADDR
// end end ;
14855: GO 14627
14857: POP
14858: POP
14859: GO 14588
14861: LD_VAR 0 3
14865: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
14866: LD_INT 0
14868: PPUSH
14869: PPUSH
14870: PPUSH
14871: PPUSH
14872: PPUSH
// tmp := [ ] ;
14873: LD_ADDR_VAR 0 6
14877: PUSH
14878: EMPTY
14879: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
14880: LD_ADDR_VAR 0 7
14884: PUSH
14885: LD_INT 22
14887: PUSH
14888: LD_VAR 0 1
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: PUSH
14897: LD_INT 30
14899: PUSH
14900: LD_INT 32
14902: PUSH
14903: EMPTY
14904: LIST
14905: LIST
14906: PUSH
14907: EMPTY
14908: LIST
14909: LIST
14910: PPUSH
14911: CALL_OW 69
14915: ST_TO_ADDR
// if bunkers then
14916: LD_VAR 0 7
14920: IFFALSE 14990
// for i in bunkers do
14922: LD_ADDR_VAR 0 4
14926: PUSH
14927: LD_VAR 0 7
14931: PUSH
14932: FOR_IN
14933: IFFALSE 14988
// for j in UnitsInside ( i ) do
14935: LD_ADDR_VAR 0 5
14939: PUSH
14940: LD_VAR 0 4
14944: PPUSH
14945: CALL_OW 313
14949: PUSH
14950: FOR_IN
14951: IFFALSE 14984
// tmp := Replace ( tmp , tmp + 1 , j ) ;
14953: LD_ADDR_VAR 0 6
14957: PUSH
14958: LD_VAR 0 6
14962: PPUSH
14963: LD_VAR 0 6
14967: PUSH
14968: LD_INT 1
14970: PLUS
14971: PPUSH
14972: LD_VAR 0 5
14976: PPUSH
14977: CALL_OW 1
14981: ST_TO_ADDR
14982: GO 14950
14984: POP
14985: POP
14986: GO 14932
14988: POP
14989: POP
// if tmp then
14990: LD_VAR 0 6
14994: IFFALSE 15034
// begin ComExitBuilding ( tmp ) ;
14996: LD_VAR 0 6
15000: PPUSH
15001: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
15005: LD_VAR 0 6
15009: PPUSH
15010: LD_VAR 0 2
15014: PPUSH
15015: CALL_OW 250
15019: PPUSH
15020: LD_VAR 0 2
15024: PPUSH
15025: CALL_OW 251
15029: PPUSH
15030: CALL_OW 174
// end ; end ;
15034: LD_VAR 0 3
15038: RET
// export function CreateNature ; var i , un ; begin
15039: LD_INT 0
15041: PPUSH
15042: PPUSH
15043: PPUSH
// uc_side := 0 ;
15044: LD_ADDR_OWVAR 20
15048: PUSH
15049: LD_INT 0
15051: ST_TO_ADDR
// uc_nation := 0 ;
15052: LD_ADDR_OWVAR 21
15056: PUSH
15057: LD_INT 0
15059: ST_TO_ADDR
// InitHc ;
15060: CALL_OW 19
// hc_class := class_fish ;
15064: LD_ADDR_OWVAR 28
15068: PUSH
15069: LD_INT 20
15071: ST_TO_ADDR
// for i := 1 to 6 do
15072: LD_ADDR_VAR 0 2
15076: PUSH
15077: DOUBLE
15078: LD_INT 1
15080: DEC
15081: ST_TO_ADDR
15082: LD_INT 6
15084: PUSH
15085: FOR_TO
15086: IFFALSE 15105
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
15088: CALL_OW 44
15092: PPUSH
15093: LD_INT 22
15095: PPUSH
15096: LD_INT 0
15098: PPUSH
15099: CALL_OW 49
15103: GO 15085
15105: POP
15106: POP
// for i := 1 to Difficulty + 2 do
15107: LD_ADDR_VAR 0 2
15111: PUSH
15112: DOUBLE
15113: LD_INT 1
15115: DEC
15116: ST_TO_ADDR
15117: LD_OWVAR 67
15121: PUSH
15122: LD_INT 2
15124: PLUS
15125: PUSH
15126: FOR_TO
15127: IFFALSE 15236
// begin hc_sex := sex_male ;
15129: LD_ADDR_OWVAR 27
15133: PUSH
15134: LD_INT 1
15136: ST_TO_ADDR
// uc_side := 0 ;
15137: LD_ADDR_OWVAR 20
15141: PUSH
15142: LD_INT 0
15144: ST_TO_ADDR
// uc_nation := nation_nature ;
15145: LD_ADDR_OWVAR 21
15149: PUSH
15150: LD_INT 0
15152: ST_TO_ADDR
// hc_class := class_tiger ;
15153: LD_ADDR_OWVAR 28
15157: PUSH
15158: LD_INT 14
15160: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
15161: LD_ADDR_OWVAR 31
15165: PUSH
15166: LD_EXP 30
15170: PUSH
15171: LD_INT 0
15173: PUSH
15174: LD_INT 0
15176: PUSH
15177: LD_INT 0
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
15186: LD_ADDR_OWVAR 35
15190: PUSH
15191: LD_INT 5
15193: NEG
15194: PPUSH
15195: LD_INT 5
15197: PPUSH
15198: CALL_OW 12
15202: PUSH
15203: LD_OWVAR 67
15207: MUL
15208: ST_TO_ADDR
// un := CreateHuman ;
15209: LD_ADDR_VAR 0 3
15213: PUSH
15214: CALL_OW 44
15218: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15219: LD_VAR 0 3
15223: PPUSH
15224: LD_INT 23
15226: PPUSH
15227: LD_INT 0
15229: PPUSH
15230: CALL_OW 49
// end ;
15234: GO 15126
15236: POP
15237: POP
// for i := 1 to rand ( 3 , 4 ) do
15238: LD_ADDR_VAR 0 2
15242: PUSH
15243: DOUBLE
15244: LD_INT 1
15246: DEC
15247: ST_TO_ADDR
15248: LD_INT 3
15250: PPUSH
15251: LD_INT 4
15253: PPUSH
15254: CALL_OW 12
15258: PUSH
15259: FOR_TO
15260: IFFALSE 15352
// begin hc_sex := sex_male ;
15262: LD_ADDR_OWVAR 27
15266: PUSH
15267: LD_INT 1
15269: ST_TO_ADDR
// uc_side := 0 ;
15270: LD_ADDR_OWVAR 20
15274: PUSH
15275: LD_INT 0
15277: ST_TO_ADDR
// uc_nation := nation_nature ;
15278: LD_ADDR_OWVAR 21
15282: PUSH
15283: LD_INT 0
15285: ST_TO_ADDR
// hc_class := 18 ;
15286: LD_ADDR_OWVAR 28
15290: PUSH
15291: LD_INT 18
15293: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
15294: LD_ADDR_OWVAR 31
15298: PUSH
15299: LD_INT 0
15301: PUSH
15302: LD_INT 0
15304: PUSH
15305: LD_INT 0
15307: PUSH
15308: LD_INT 0
15310: PUSH
15311: EMPTY
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: ST_TO_ADDR
// hc_agressivity := 0 ;
15317: LD_ADDR_OWVAR 35
15321: PUSH
15322: LD_INT 0
15324: ST_TO_ADDR
// un := CreateHuman ;
15325: LD_ADDR_VAR 0 3
15329: PUSH
15330: CALL_OW 44
15334: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15335: LD_VAR 0 3
15339: PPUSH
15340: LD_INT 23
15342: PPUSH
15343: LD_INT 0
15345: PPUSH
15346: CALL_OW 49
// end ;
15350: GO 15259
15352: POP
15353: POP
// for i := 1 to [ 4 , 3 , 3 , 3 ] [ Difficulty ] do
15354: LD_ADDR_VAR 0 2
15358: PUSH
15359: DOUBLE
15360: LD_INT 1
15362: DEC
15363: ST_TO_ADDR
15364: LD_INT 4
15366: PUSH
15367: LD_INT 3
15369: PUSH
15370: LD_INT 3
15372: PUSH
15373: LD_INT 3
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: PUSH
15382: LD_OWVAR 67
15386: ARRAY
15387: PUSH
15388: FOR_TO
15389: IFFALSE 15498
// begin hc_sex := sex_male ;
15391: LD_ADDR_OWVAR 27
15395: PUSH
15396: LD_INT 1
15398: ST_TO_ADDR
// uc_side := 0 ;
15399: LD_ADDR_OWVAR 20
15403: PUSH
15404: LD_INT 0
15406: ST_TO_ADDR
// uc_nation := nation_nature ;
15407: LD_ADDR_OWVAR 21
15411: PUSH
15412: LD_INT 0
15414: ST_TO_ADDR
// hc_class := class_apeman ;
15415: LD_ADDR_OWVAR 28
15419: PUSH
15420: LD_INT 12
15422: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
15423: LD_ADDR_OWVAR 31
15427: PUSH
15428: LD_INT 0
15430: PPUSH
15431: LD_INT 2
15433: PPUSH
15434: CALL_OW 12
15438: PUSH
15439: LD_INT 0
15441: PUSH
15442: LD_INT 0
15444: PUSH
15445: LD_INT 0
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: ST_TO_ADDR
// hc_agressivity = rand ( - 10 , 10 ) ;
15454: LD_ADDR_OWVAR 35
15458: PUSH
15459: LD_INT 10
15461: NEG
15462: PPUSH
15463: LD_INT 10
15465: PPUSH
15466: CALL_OW 12
15470: ST_TO_ADDR
// un := CreateHuman ;
15471: LD_ADDR_VAR 0 3
15475: PUSH
15476: CALL_OW 44
15480: ST_TO_ADDR
// PlaceUnitArea ( un , ApeNatureArea , false ) ;
15481: LD_VAR 0 3
15485: PPUSH
15486: LD_INT 26
15488: PPUSH
15489: LD_INT 0
15491: PPUSH
15492: CALL_OW 49
// end ;
15496: GO 15388
15498: POP
15499: POP
// end ; end_of_file
15500: LD_VAR 0 1
15504: RET
// on UnitDestroyed ( unit ) do var i ;
15505: LD_INT 0
15507: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
15508: LD_VAR 0 1
15512: PPUSH
15513: CALL 34549 0 1
// if unit = JMM then
15517: LD_VAR 0 1
15521: PUSH
15522: LD_EXP 1
15526: EQUAL
15527: IFFALSE 15536
// YouLost ( JMM ) ;
15529: LD_STRING JMM
15531: PPUSH
15532: CALL_OW 104
// if unit in russianTanks then
15536: LD_VAR 0 1
15540: PUSH
15541: LD_EXP 32
15545: IN
15546: IFFALSE 15564
// russianTanks := russianTanks diff unit ;
15548: LD_ADDR_EXP 32
15552: PUSH
15553: LD_EXP 32
15557: PUSH
15558: LD_VAR 0 1
15562: DIFF
15563: ST_TO_ADDR
// if unit in russianTimeLapsers then
15564: LD_VAR 0 1
15568: PUSH
15569: LD_EXP 33
15573: IN
15574: IFFALSE 15592
// russianTimeLapsers := russianTimeLapsers diff unit ;
15576: LD_ADDR_EXP 33
15580: PUSH
15581: LD_EXP 33
15585: PUSH
15586: LD_VAR 0 1
15590: DIFF
15591: ST_TO_ADDR
// if unit in RuScientists then
15592: LD_VAR 0 1
15596: PUSH
15597: LD_EXP 27
15601: IN
15602: IFFALSE 15634
// begin RuScientists := RuScientists diff unit ;
15604: LD_ADDR_EXP 27
15608: PUSH
15609: LD_EXP 27
15613: PUSH
15614: LD_VAR 0 1
15618: DIFF
15619: ST_TO_ADDR
// sciCounter := sciCounter + 1 ;
15620: LD_ADDR_EXP 28
15624: PUSH
15625: LD_EXP 28
15629: PUSH
15630: LD_INT 1
15632: PLUS
15633: ST_TO_ADDR
// end ; end ;
15634: PPOPN 2
15636: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_laser then
15637: LD_VAR 0 3
15641: PPUSH
15642: CALL_OW 264
15646: PUSH
15647: LD_INT 9
15649: EQUAL
15650: IFFALSE 15666
// laserCounterDestroy := laserCounterDestroy + 1 ;
15652: LD_ADDR_EXP 43
15656: PUSH
15657: LD_EXP 43
15661: PUSH
15662: LD_INT 1
15664: PLUS
15665: ST_TO_ADDR
// end ;
15666: PPOPN 3
15668: END
// on UnitTeleported ( building , human ) do begin if human in FilterAllUnits ( [ f_side , 6 ] ) then
15669: LD_VAR 0 2
15673: PUSH
15674: LD_INT 22
15676: PUSH
15677: LD_INT 6
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PPUSH
15684: CALL_OW 69
15688: IN
15689: IFFALSE 15744
// begin if GetType ( human ) = unit_vehicle then
15691: LD_VAR 0 2
15695: PPUSH
15696: CALL_OW 247
15700: PUSH
15701: LD_INT 2
15703: EQUAL
15704: IFFALSE 15721
// human := IsDrivenBy ( human ) ;
15706: LD_ADDR_VAR 0 2
15710: PUSH
15711: LD_VAR 0 2
15715: PPUSH
15716: CALL_OW 311
15720: ST_TO_ADDR
// SetTag ( human , GetTag ( human ) + 10 ) ;
15721: LD_VAR 0 2
15725: PPUSH
15726: LD_VAR 0 2
15730: PPUSH
15731: CALL_OW 110
15735: PUSH
15736: LD_INT 10
15738: PLUS
15739: PPUSH
15740: CALL_OW 109
// end ; if GetSide ( human ) = 1 and eventVar1 = 0 then
15744: LD_VAR 0 2
15748: PPUSH
15749: CALL_OW 255
15753: PUSH
15754: LD_INT 1
15756: EQUAL
15757: PUSH
15758: LD_EXP 40
15762: PUSH
15763: LD_INT 0
15765: EQUAL
15766: AND
15767: IFFALSE 15879
// begin eventVar1 = 1 ;
15769: LD_ADDR_EXP 40
15773: PUSH
15774: LD_INT 1
15776: ST_TO_ADDR
// teleportExplored = 1 ;
15777: LD_ADDR_EXP 26
15781: PUSH
15782: LD_INT 1
15784: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
15785: LD_STRING M2a
15787: PPUSH
15788: CALL_OW 337
// wait ( 0 0$2 ) ;
15792: LD_INT 70
15794: PPUSH
15795: CALL_OW 67
// DialogueOn ;
15799: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
15803: LD_INT 22
15805: PUSH
15806: LD_INT 1
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: PUSH
15813: LD_INT 21
15815: PUSH
15816: LD_INT 1
15818: PUSH
15819: EMPTY
15820: LIST
15821: LIST
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: PPUSH
15827: CALL_OW 69
15831: PPUSH
15832: LD_STRING DT3a-Sol1-1
15834: PPUSH
15835: LD_STRING DT3a-FSol1-1
15837: PPUSH
15838: CALL 12226 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
15842: LD_EXP 1
15846: PPUSH
15847: LD_STRING DT3a-JMM-1
15849: PPUSH
15850: CALL_OW 88
// CenterNowOnUnits ( human ) ;
15854: LD_VAR 0 2
15858: PPUSH
15859: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
15863: LD_EXP 1
15867: PPUSH
15868: LD_STRING DT3a-JMM-1a
15870: PPUSH
15871: CALL_OW 88
// DialogueOff ;
15875: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
15879: LD_VAR 0 1
15883: PUSH
15884: LD_INT 10
15886: EQUAL
15887: PUSH
15888: LD_VAR 0 2
15892: PPUSH
15893: CALL_OW 247
15897: PUSH
15898: LD_INT 2
15900: EQUAL
15901: AND
15902: PUSH
15903: LD_VAR 0 2
15907: PPUSH
15908: CALL_OW 255
15912: PUSH
15913: LD_INT 3
15915: EQUAL
15916: AND
15917: IFFALSE 15983
// begin if vehicleTeleported = 0 then
15919: LD_EXP 21
15923: PUSH
15924: LD_INT 0
15926: EQUAL
15927: IFFALSE 15944
// begin wait ( 0 0$03 ) ;
15929: LD_INT 105
15931: PPUSH
15932: CALL_OW 67
// vehicleTeleported := 1 ;
15936: LD_ADDR_EXP 21
15940: PUSH
15941: LD_INT 1
15943: ST_TO_ADDR
// end ; if vehicleTeleported = 2 then
15944: LD_EXP 21
15948: PUSH
15949: LD_INT 2
15951: EQUAL
15952: IFFALSE 15969
// begin wait ( 0 0$03 ) ;
15954: LD_INT 105
15956: PPUSH
15957: CALL_OW 67
// vehicleTeleported := 3 ;
15961: LD_ADDR_EXP 21
15965: PUSH
15966: LD_INT 3
15968: ST_TO_ADDR
// end ; tpCounter := tpCounter + 1 ;
15969: LD_ADDR_EXP 22
15973: PUSH
15974: LD_EXP 22
15978: PUSH
15979: LD_INT 1
15981: PLUS
15982: ST_TO_ADDR
// end ; end ;
15983: PPOPN 2
15985: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
15986: LD_VAR 0 1
15990: PPUSH
15991: LD_VAR 0 2
15995: PPUSH
15996: CALL 34669 0 2
// if GetWeapon ( vehicle ) = us_rocket_launcher then
16000: LD_VAR 0 1
16004: PPUSH
16005: CALL_OW 264
16009: PUSH
16010: LD_INT 7
16012: EQUAL
16013: IFFALSE 16023
// rocketBuilded := true ;
16015: LD_ADDR_EXP 44
16019: PUSH
16020: LD_INT 1
16022: ST_TO_ADDR
// if GetSide ( vehicle ) <> 3 then
16023: LD_VAR 0 1
16027: PPUSH
16028: CALL_OW 255
16032: PUSH
16033: LD_INT 3
16035: NONEQUAL
16036: IFFALSE 16040
// exit ;
16038: GO 16157
// if factory in [ ru_fact , rufab2 ] then
16040: LD_VAR 0 2
16044: PUSH
16045: LD_INT 21
16047: PUSH
16048: LD_INT 112
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: IN
16055: IFFALSE 16157
// begin if GetWeapon ( vehicle ) = ru_time_lapser then
16057: LD_VAR 0 1
16061: PPUSH
16062: CALL_OW 264
16066: PUSH
16067: LD_INT 49
16069: EQUAL
16070: IFFALSE 16106
// begin russianTimeLapsers := Join ( russianTimeLapsers , vehicle ) ;
16072: LD_ADDR_EXP 33
16076: PUSH
16077: LD_EXP 33
16081: PPUSH
16082: LD_VAR 0 1
16086: PPUSH
16087: CALL 76214 0 2
16091: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
16092: LD_VAR 0 1
16096: PPUSH
16097: LD_INT 137
16099: PPUSH
16100: CALL_OW 120
// end else
16104: GO 16157
// if not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_big_cargo_bay , ru_crane , ru_bulldozer ] then
16106: LD_VAR 0 1
16110: PPUSH
16111: CALL_OW 264
16115: PUSH
16116: LD_INT 51
16118: PUSH
16119: LD_INT 89
16121: PUSH
16122: LD_INT 52
16124: PUSH
16125: LD_INT 53
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: IN
16134: NOT
16135: IFFALSE 16157
// begin russianTanks := Join ( russianTanks , vehicle ) ;
16137: LD_ADDR_EXP 32
16141: PUSH
16142: LD_EXP 32
16146: PPUSH
16147: LD_VAR 0 1
16151: PPUSH
16152: CALL 76214 0 2
16156: ST_TO_ADDR
// end ; end ; end ;
16157: PPOPN 2
16159: END
// on LeaveVehicle ( vehicle , human ) do var i ;
16160: LD_INT 0
16162: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
16163: LD_VAR 0 2
16167: PPUSH
16168: CALL_OW 255
16172: PUSH
16173: LD_INT 3
16175: EQUAL
16176: PUSH
16177: LD_VAR 0 2
16181: PPUSH
16182: CALL_OW 257
16186: PUSH
16187: LD_INT 3
16189: EQUAL
16190: AND
16191: PUSH
16192: LD_INT 21
16194: PPUSH
16195: CALL_OW 255
16199: PUSH
16200: LD_INT 3
16202: EQUAL
16203: AND
16204: PUSH
16205: LD_INT 21
16207: PPUSH
16208: CALL_OW 302
16212: AND
16213: IFFALSE 16227
// ComEnterUnit ( human , ru_fact ) ;
16215: LD_VAR 0 2
16219: PPUSH
16220: LD_INT 21
16222: PPUSH
16223: CALL_OW 120
// end ;
16227: PPOPN 3
16229: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16230: LD_VAR 0 1
16234: PPUSH
16235: CALL 34653 0 1
// end ; end_of_file
16239: PPOPN 1
16241: END
// every 0 0$1 trigger ruAI = 1 do
16242: LD_EXP 34
16246: PUSH
16247: LD_INT 1
16249: EQUAL
16250: IFFALSE 16362
16252: GO 16254
16254: DISABLE
// begin enable ;
16255: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
16256: LD_INT 3
16258: PPUSH
16259: LD_INT 6
16261: PPUSH
16262: LD_INT 9
16264: PPUSH
16265: LD_EXP 31
16269: PPUSH
16270: CALL 13076 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
16274: LD_INT 3
16276: PPUSH
16277: LD_INT 4
16279: PPUSH
16280: LD_INT 10
16282: PPUSH
16283: LD_EXP 31
16287: PPUSH
16288: CALL 13076 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
16292: LD_INT 3
16294: PPUSH
16295: LD_INT 9
16297: PPUSH
16298: CALL 13911 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
16302: LD_INT 3
16304: PPUSH
16305: LD_INT 10
16307: PPUSH
16308: CALL 13911 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
16312: LD_INT 3
16314: PPUSH
16315: LD_INT 16
16317: PPUSH
16318: LD_INT 9
16320: PPUSH
16321: LD_INT 91
16323: PPUSH
16324: CALL 13443 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
16328: LD_INT 3
16330: PPUSH
16331: LD_INT 17
16333: PPUSH
16334: LD_INT 10
16336: PPUSH
16337: LD_INT 47
16339: PUSH
16340: LD_INT 129
16342: PUSH
16343: LD_INT 135
16345: PUSH
16346: EMPTY
16347: LIST
16348: LIST
16349: LIST
16350: PPUSH
16351: CALL 13443 0 4
// IntBazooka ( 3 ) ;
16355: LD_INT 3
16357: PPUSH
16358: CALL 14238 0 1
// end ;
16362: END
// every 0 0$50 trigger russianTanks >= [ 3 , 4 , 5 , 6 ] [ Difficulty ] do var i , tmp , p ;
16363: LD_EXP 32
16367: PUSH
16368: LD_INT 3
16370: PUSH
16371: LD_INT 4
16373: PUSH
16374: LD_INT 5
16376: PUSH
16377: LD_INT 6
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: LIST
16384: LIST
16385: PUSH
16386: LD_OWVAR 67
16390: ARRAY
16391: GREATEREQUAL
16392: IFFALSE 16671
16394: GO 16396
16396: DISABLE
16397: LD_INT 0
16399: PPUSH
16400: PPUSH
16401: PPUSH
// begin enable ;
16402: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
16403: LD_ADDR_VAR 0 2
16407: PUSH
16408: LD_EXP 32
16412: PUSH
16413: LD_EXP 33
16417: UNION
16418: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
16419: LD_ADDR_EXP 32
16423: PUSH
16424: LD_EXP 32
16428: PUSH
16429: LD_VAR 0 2
16433: DIFF
16434: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
16435: LD_ADDR_EXP 33
16439: PUSH
16440: LD_EXP 33
16444: PUSH
16445: LD_VAR 0 2
16449: DIFF
16450: ST_TO_ADDR
// if vehicleTeleported >= 4 then
16451: LD_EXP 21
16455: PUSH
16456: LD_INT 4
16458: GREATEREQUAL
16459: IFFALSE 16477
// attackTactic := rand ( 1 , 2 ) ;
16461: LD_ADDR_EXP 36
16465: PUSH
16466: LD_INT 1
16468: PPUSH
16469: LD_INT 2
16471: PPUSH
16472: CALL_OW 12
16476: ST_TO_ADDR
// if IsOk ( ruteleprt ) then
16477: LD_INT 10
16479: PPUSH
16480: CALL_OW 302
16484: IFFALSE 16593
// begin for i in tmp do
16486: LD_ADDR_VAR 0 1
16490: PUSH
16491: LD_VAR 0 2
16495: PUSH
16496: FOR_IN
16497: IFFALSE 16540
// if attackTactic < 2 then
16499: LD_EXP 36
16503: PUSH
16504: LD_INT 2
16506: LESS
16507: IFFALSE 16523
// ComEnterUnit ( i , ruteleprt ) else
16509: LD_VAR 0 1
16513: PPUSH
16514: LD_INT 10
16516: PPUSH
16517: CALL_OW 120
16521: GO 16538
// ComMoveXY ( i , 88 , 69 ) ;
16523: LD_VAR 0 1
16527: PPUSH
16528: LD_INT 88
16530: PPUSH
16531: LD_INT 69
16533: PPUSH
16534: CALL_OW 111
16538: GO 16496
16540: POP
16541: POP
// p := 0 ;
16542: LD_ADDR_VAR 0 3
16546: PUSH
16547: LD_INT 0
16549: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
16550: LD_INT 70
16552: PPUSH
16553: CALL_OW 67
// p := 2 ;
16557: LD_ADDR_VAR 0 3
16561: PUSH
16562: LD_INT 2
16564: ST_TO_ADDR
// until not UnitFilter ( tmp , [ f_hastask ] ) or p > 30 ;
16565: LD_VAR 0 2
16569: PPUSH
16570: LD_INT 60
16572: PUSH
16573: EMPTY
16574: LIST
16575: PPUSH
16576: CALL_OW 72
16580: NOT
16581: PUSH
16582: LD_VAR 0 3
16586: PUSH
16587: LD_INT 30
16589: GREATER
16590: OR
16591: IFFALSE 16550
// end ; repeat wait ( 0 0$1 ) ;
16593: LD_INT 35
16595: PPUSH
16596: CALL_OW 67
// for i in tmp do
16600: LD_ADDR_VAR 0 1
16604: PUSH
16605: LD_VAR 0 2
16609: PUSH
16610: FOR_IN
16611: IFFALSE 16643
// if not IsOk ( i ) then
16613: LD_VAR 0 1
16617: PPUSH
16618: CALL_OW 302
16622: NOT
16623: IFFALSE 16641
// tmp := tmp diff i ;
16625: LD_ADDR_VAR 0 2
16629: PUSH
16630: LD_VAR 0 2
16634: PUSH
16635: LD_VAR 0 1
16639: DIFF
16640: ST_TO_ADDR
16641: GO 16610
16643: POP
16644: POP
// AgressiveMove ( tmp , [ 140 , 112 ] ) ;
16645: LD_VAR 0 2
16649: PPUSH
16650: LD_INT 140
16652: PUSH
16653: LD_INT 112
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: PPUSH
16660: CALL 78818 0 2
// until not tmp ;
16664: LD_VAR 0 2
16668: NOT
16669: IFFALSE 16593
// end ;
16671: PPOPN 3
16673: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
16674: LD_INT 4
16676: PPUSH
16677: CALL_OW 303
16681: IFFALSE 16696
16683: GO 16685
16685: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
16686: LD_INT 3
16688: PPUSH
16689: LD_INT 4
16691: PPUSH
16692: CALL 14866 0 2
16696: END
// every 0 0$1 do
16697: GO 16699
16699: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
16700: LD_INT 3
16702: PPUSH
16703: LD_INT 91
16705: PPUSH
16706: LD_INT 3
16708: PPUSH
16709: CALL 12841 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
16713: LD_INT 3
16715: PPUSH
16716: LD_INT 47
16718: PPUSH
16719: LD_INT 3
16721: PPUSH
16722: CALL 12841 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
16726: LD_INT 3
16728: PPUSH
16729: LD_INT 129
16731: PPUSH
16732: LD_INT 3
16734: PPUSH
16735: CALL 12841 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
16739: LD_INT 3
16741: PPUSH
16742: LD_INT 3
16744: PPUSH
16745: LD_INT 3
16747: PPUSH
16748: CALL 12841 0 3
// end ;
16752: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
16753: LD_INT 22
16755: PUSH
16756: LD_INT 1
16758: PUSH
16759: EMPTY
16760: LIST
16761: LIST
16762: PUSH
16763: LD_INT 21
16765: PUSH
16766: LD_INT 3
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: PUSH
16773: EMPTY
16774: LIST
16775: LIST
16776: PPUSH
16777: CALL_OW 69
16781: IFFALSE 16850
16783: GO 16785
16785: DISABLE
// begin wait ( 0 0$40 ) ;
16786: LD_INT 1400
16788: PPUSH
16789: CALL_OW 67
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
16793: LD_INT 3
16795: PPUSH
16796: LD_INT 21
16798: PPUSH
16799: LD_INT 3
16801: PUSH
16802: LD_INT 4
16804: PUSH
16805: LD_INT 5
16807: PUSH
16808: LD_INT 6
16810: PUSH
16811: EMPTY
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: PUSH
16817: LD_OWVAR 67
16821: ARRAY
16822: PPUSH
16823: LD_INT 46
16825: PUSH
16826: LD_INT 45
16828: PUSH
16829: LD_INT 44
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: LIST
16836: PPUSH
16837: LD_INT 3
16839: PPUSH
16840: LD_INT 3
16842: PPUSH
16843: LD_INT 24
16845: PPUSH
16846: CALL 14091 0 7
// end ;
16850: END
// every 6 6$0 + 2 2$00 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
16851: LD_EXP 20
16855: PUSH
16856: LD_INT 2
16858: EQUAL
16859: PUSH
16860: LD_INT 21
16862: PPUSH
16863: CALL_OW 255
16867: PUSH
16868: LD_INT 3
16870: EQUAL
16871: AND
16872: PUSH
16873: LD_INT 112
16875: PPUSH
16876: CALL_OW 255
16880: PUSH
16881: LD_INT 3
16883: EQUAL
16884: AND
16885: PUSH
16886: LD_INT 21
16888: PPUSH
16889: CALL_OW 302
16893: AND
16894: PUSH
16895: LD_INT 112
16897: PPUSH
16898: CALL_OW 302
16902: AND
16903: PUSH
16904: LD_INT 22
16906: PUSH
16907: LD_INT 3
16909: PUSH
16910: EMPTY
16911: LIST
16912: LIST
16913: PUSH
16914: LD_INT 21
16916: PUSH
16917: LD_INT 2
16919: PUSH
16920: EMPTY
16921: LIST
16922: LIST
16923: PUSH
16924: LD_INT 50
16926: PUSH
16927: EMPTY
16928: LIST
16929: PUSH
16930: LD_INT 3
16932: PUSH
16933: LD_INT 58
16935: PUSH
16936: EMPTY
16937: LIST
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: PPUSH
16949: CALL_OW 69
16953: PUSH
16954: LD_INT 18
16956: PPUSH
16957: LD_INT 22
16959: PUSH
16960: LD_INT 3
16962: PUSH
16963: EMPTY
16964: LIST
16965: LIST
16966: PUSH
16967: LD_INT 21
16969: PUSH
16970: LD_INT 2
16972: PUSH
16973: EMPTY
16974: LIST
16975: LIST
16976: PUSH
16977: EMPTY
16978: LIST
16979: LIST
16980: PPUSH
16981: CALL_OW 70
16985: PUSH
16986: LD_INT 0
16988: EQUAL
16989: DIFF
16990: AND
16991: IFFALSE 17117
16993: GO 16995
16995: DISABLE
// begin enable ;
16996: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
16997: LD_INT 3
16999: PPUSH
17000: LD_INT 21
17002: PPUSH
17003: LD_INT 3
17005: PUSH
17006: LD_INT 4
17008: PUSH
17009: LD_INT 5
17011: PUSH
17012: LD_INT 6
17014: PUSH
17015: EMPTY
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: PUSH
17021: LD_OWVAR 67
17025: ARRAY
17026: PPUSH
17027: LD_INT 46
17029: PUSH
17030: LD_INT 45
17032: PUSH
17033: LD_INT 44
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: LIST
17040: PPUSH
17041: LD_INT 3
17043: PPUSH
17044: LD_INT 3
17046: PPUSH
17047: LD_INT 24
17049: PPUSH
17050: CALL 14091 0 7
// if russianTimeLapsers = 0 then
17054: LD_EXP 33
17058: PUSH
17059: LD_INT 0
17061: EQUAL
17062: IFFALSE 17117
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
17064: LD_INT 3
17066: PPUSH
17067: LD_INT 112
17069: PPUSH
17070: LD_INT 1
17072: PUSH
17073: LD_INT 2
17075: PUSH
17076: LD_INT 2
17078: PUSH
17079: LD_INT 2
17081: PUSH
17082: EMPTY
17083: LIST
17084: LIST
17085: LIST
17086: LIST
17087: PUSH
17088: LD_OWVAR 67
17092: ARRAY
17093: PPUSH
17094: LD_INT 49
17096: PUSH
17097: LD_INT 49
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PPUSH
17104: LD_INT 3
17106: PPUSH
17107: LD_INT 3
17109: PPUSH
17110: LD_INT 24
17112: PPUSH
17113: CALL 14091 0 7
// end ;
17117: END
// every 0 0$1 trigger arabianMines do var i ;
17118: LD_EXP 37
17122: IFFALSE 17243
17124: GO 17126
17126: DISABLE
17127: LD_INT 0
17129: PPUSH
// begin enable ;
17130: ENABLE
// for i in arabianMines do
17131: LD_ADDR_VAR 0 1
17135: PUSH
17136: LD_EXP 37
17140: PUSH
17141: FOR_IN
17142: IFFALSE 17241
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
17144: LD_INT 22
17146: PUSH
17147: LD_INT 1
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: PUSH
17154: LD_INT 92
17156: PUSH
17157: LD_VAR 0 1
17161: PUSH
17162: LD_INT 1
17164: ARRAY
17165: PUSH
17166: LD_VAR 0 1
17170: PUSH
17171: LD_INT 2
17173: ARRAY
17174: PUSH
17175: LD_INT 3
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: PPUSH
17188: CALL_OW 69
17192: IFFALSE 17239
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
17194: LD_VAR 0 1
17198: PUSH
17199: LD_INT 1
17201: ARRAY
17202: PPUSH
17203: LD_VAR 0 1
17207: PUSH
17208: LD_INT 2
17210: ARRAY
17211: PPUSH
17212: LD_INT 5
17214: PPUSH
17215: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
17219: LD_ADDR_EXP 37
17223: PUSH
17224: LD_EXP 37
17228: PPUSH
17229: LD_VAR 0 1
17233: PPUSH
17234: CALL_OW 3
17238: ST_TO_ADDR
// end ; end ;
17239: GO 17141
17241: POP
17242: POP
// end ;
17243: PPOPN 1
17245: END
// every 0 0$10 trigger vehicleTeleported >= 4 and tpCounter mod 12 = 0 do var i , hexes ;
17246: LD_EXP 21
17250: PUSH
17251: LD_INT 4
17253: GREATEREQUAL
17254: PUSH
17255: LD_EXP 22
17259: PUSH
17260: LD_INT 12
17262: MOD
17263: PUSH
17264: LD_INT 0
17266: EQUAL
17267: AND
17268: IFFALSE 17382
17270: GO 17272
17272: DISABLE
17273: LD_INT 0
17275: PPUSH
17276: PPUSH
// begin enable ;
17277: ENABLE
// hexes := [ [ 122 , 142 ] , [ 101 , 127 ] , [ 104 , 104 ] , [ 46 , 81 ] ] ;
17278: LD_ADDR_VAR 0 2
17282: PUSH
17283: LD_INT 122
17285: PUSH
17286: LD_INT 142
17288: PUSH
17289: EMPTY
17290: LIST
17291: LIST
17292: PUSH
17293: LD_INT 101
17295: PUSH
17296: LD_INT 127
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: PUSH
17303: LD_INT 104
17305: PUSH
17306: LD_INT 104
17308: PUSH
17309: EMPTY
17310: LIST
17311: LIST
17312: PUSH
17313: LD_INT 46
17315: PUSH
17316: LD_INT 81
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: ST_TO_ADDR
// i := rand ( 1 , 4 ) ;
17329: LD_ADDR_VAR 0 1
17333: PUSH
17334: LD_INT 1
17336: PPUSH
17337: LD_INT 4
17339: PPUSH
17340: CALL_OW 12
17344: ST_TO_ADDR
// TeleportExit ( ruteleprt , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17345: LD_INT 10
17347: PPUSH
17348: LD_VAR 0 2
17352: PUSH
17353: LD_VAR 0 1
17357: ARRAY
17358: PUSH
17359: LD_INT 1
17361: ARRAY
17362: PPUSH
17363: LD_VAR 0 2
17367: PUSH
17368: LD_VAR 0 1
17372: ARRAY
17373: PUSH
17374: LD_INT 2
17376: ARRAY
17377: PPUSH
17378: CALL_OW 243
// end ; end_of_file
17382: PPOPN 2
17384: END
// every 0 0$1 trigger IsDead ( ruheadlab ) do
17385: LD_INT 3
17387: PPUSH
17388: CALL_OW 301
17392: IFFALSE 17613
17394: GO 17396
17396: DISABLE
// begin if UnitFilter ( RuScientists , [ f_ok ] ) then
17397: LD_EXP 27
17401: PPUSH
17402: LD_INT 50
17404: PUSH
17405: EMPTY
17406: LIST
17407: PPUSH
17408: CALL_OW 72
17412: IFFALSE 17421
// wait ( 0 0$10 ) ;
17414: LD_INT 350
17416: PPUSH
17417: CALL_OW 67
// DialogueOn ;
17421: CALL_OW 6
// if sciCounter = 0 then
17425: LD_EXP 28
17429: PUSH
17430: LD_INT 0
17432: EQUAL
17433: IFFALSE 17461
// begin Say ( JMM , D7a-JMM-1 ) ;
17435: LD_EXP 1
17439: PPUSH
17440: LD_STRING D7a-JMM-1
17442: PPUSH
17443: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
17447: LD_EXP 15
17451: PPUSH
17452: LD_STRING D7a-Pow-1
17454: PPUSH
17455: CALL_OW 94
// end else
17459: GO 17605
// if sciCounter < 6 then
17461: LD_EXP 28
17465: PUSH
17466: LD_INT 6
17468: LESS
17469: IFFALSE 17497
// begin Say ( JMM , D7b-JMM-1 ) ;
17471: LD_EXP 1
17475: PPUSH
17476: LD_STRING D7b-JMM-1
17478: PPUSH
17479: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
17483: LD_EXP 15
17487: PPUSH
17488: LD_STRING D7b-Pow-1
17490: PPUSH
17491: CALL_OW 94
// end else
17495: GO 17605
// begin Say ( JMM , D7c-JMM-1 ) ;
17497: LD_EXP 1
17501: PPUSH
17502: LD_STRING D7c-JMM-1
17504: PPUSH
17505: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
17509: LD_EXP 15
17513: PPUSH
17514: LD_STRING D7c-Pow-1
17516: PPUSH
17517: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
17521: LD_EXP 1
17525: PPUSH
17526: LD_STRING D7d-JMM-1
17528: PPUSH
17529: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
17533: LD_EXP 15
17537: PPUSH
17538: LD_STRING D7d-Pow-1
17540: PPUSH
17541: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
17545: LD_EXP 1
17549: PPUSH
17550: LD_STRING D7d-JMM-2
17552: PPUSH
17553: CALL_OW 88
// if askSiberite = 1 then
17557: LD_EXP 25
17561: PUSH
17562: LD_INT 1
17564: EQUAL
17565: IFFALSE 17581
// Say ( JMM , D7d-JMM-2a ) else
17567: LD_EXP 1
17571: PPUSH
17572: LD_STRING D7d-JMM-2a
17574: PPUSH
17575: CALL_OW 88
17579: GO 17593
// SayRadio ( Powell , D7d-Pow-2 ) ;
17581: LD_EXP 15
17585: PPUSH
17586: LD_STRING D7d-Pow-2
17588: PPUSH
17589: CALL_OW 94
// SayRadio ( Powell , D7d-Pow-2a ) ;
17593: LD_EXP 15
17597: PPUSH
17598: LD_STRING D7d-Pow-2a
17600: PPUSH
17601: CALL_OW 94
// end ; DialogueOff ;
17605: CALL_OW 7
// FinishMission ;
17609: CALL 17614 0 0
// end ;
17613: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
17614: LD_INT 0
17616: PPUSH
17617: PPUSH
17618: PPUSH
17619: PPUSH
// m1 := false ;
17620: LD_ADDR_VAR 0 2
17624: PUSH
17625: LD_INT 0
17627: ST_TO_ADDR
// m2 := false ;
17628: LD_ADDR_VAR 0 3
17632: PUSH
17633: LD_INT 0
17635: ST_TO_ADDR
// m3 := false ;
17636: LD_ADDR_VAR 0 4
17640: PUSH
17641: LD_INT 0
17643: ST_TO_ADDR
// if not westPathUsed then
17644: LD_EXP 42
17648: NOT
17649: IFFALSE 17658
// SetAchievement ( ACH_PATH ) ;
17651: LD_STRING ACH_PATH
17653: PPUSH
17654: CALL_OW 543
// if not rocketBuilded then
17658: LD_EXP 44
17662: NOT
17663: IFFALSE 17679
// begin wait ( 3 ) ;
17665: LD_INT 3
17667: PPUSH
17668: CALL_OW 67
// SetAchievement ( ACH_ROCKET ) ;
17672: LD_STRING ACH_ROCKET
17674: PPUSH
17675: CALL_OW 543
// end ; if tick <= 40 40$00 then
17679: LD_OWVAR 1
17683: PUSH
17684: LD_INT 84000
17686: LESSEQUAL
17687: IFFALSE 17703
// begin wait ( 3 ) ;
17689: LD_INT 3
17691: PPUSH
17692: CALL_OW 67
// SetAchievement ( ACH_ASPEED_12 ) ;
17696: LD_STRING ACH_ASPEED_12
17698: PPUSH
17699: CALL_OW 543
// end ; if teleportExplored = 1 then
17703: LD_EXP 26
17707: PUSH
17708: LD_INT 1
17710: EQUAL
17711: IFFALSE 17733
// begin m1 := true ;
17713: LD_ADDR_VAR 0 2
17717: PUSH
17718: LD_INT 1
17720: ST_TO_ADDR
// AddMedal ( Teleport , 1 ) ;
17721: LD_STRING Teleport
17723: PPUSH
17724: LD_INT 1
17726: PPUSH
17727: CALL_OW 101
// end else
17731: GO 17744
// AddMedal ( Teleport , - 1 ) ;
17733: LD_STRING Teleport
17735: PPUSH
17736: LD_INT 1
17738: NEG
17739: PPUSH
17740: CALL_OW 101
// if sciCounter > 2 then
17744: LD_EXP 28
17748: PUSH
17749: LD_INT 2
17751: GREATER
17752: IFFALSE 17774
// begin m2 := true ;
17754: LD_ADDR_VAR 0 3
17758: PUSH
17759: LD_INT 1
17761: ST_TO_ADDR
// AddMedal ( Materials , 1 ) ;
17762: LD_STRING Materials
17764: PPUSH
17765: LD_INT 1
17767: PPUSH
17768: CALL_OW 101
// end else
17772: GO 17785
// AddMedal ( Materials , - 1 ) ;
17774: LD_STRING Materials
17776: PPUSH
17777: LD_INT 1
17779: NEG
17780: PPUSH
17781: CALL_OW 101
// if sciCounter >= 6 then
17785: LD_EXP 28
17789: PUSH
17790: LD_INT 6
17792: GREATEREQUAL
17793: IFFALSE 17825
// begin m3 := true ;
17795: LD_ADDR_VAR 0 4
17799: PUSH
17800: LD_INT 1
17802: ST_TO_ADDR
// AddMedal ( Scientists , 1 ) ;
17803: LD_STRING Scientists
17805: PPUSH
17806: LD_INT 1
17808: PPUSH
17809: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
17813: LD_INT 1
17815: PPUSH
17816: LD_STRING 12_SciDed_1
17818: PPUSH
17819: CALL_OW 39
// end else
17823: GO 17846
// begin AddMedal ( Scientists , - 1 ) ;
17825: LD_STRING Scientists
17827: PPUSH
17828: LD_INT 1
17830: NEG
17831: PPUSH
17832: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
17836: LD_INT 0
17838: PPUSH
17839: LD_STRING 12_SciDed_1
17841: PPUSH
17842: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
17846: LD_EXP 24
17850: PPUSH
17851: LD_STRING 12_MainDepositFake_1
17853: PPUSH
17854: CALL_OW 39
// if m1 and m2 and m3 and Difficulty >= 3 then
17858: LD_VAR 0 2
17862: PUSH
17863: LD_VAR 0 3
17867: AND
17868: PUSH
17869: LD_VAR 0 4
17873: AND
17874: PUSH
17875: LD_OWVAR 67
17879: PUSH
17880: LD_INT 3
17882: GREATEREQUAL
17883: AND
17884: IFFALSE 17896
// SetAchievementEX ( ACH_AMER , 12 ) ;
17886: LD_STRING ACH_AMER
17888: PPUSH
17889: LD_INT 12
17891: PPUSH
17892: CALL_OW 564
// GiveMedals ( MAIN ) ;
17896: LD_STRING MAIN
17898: PPUSH
17899: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
17903: LD_INT 22
17905: PUSH
17906: LD_INT 1
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: PUSH
17913: LD_INT 21
17915: PUSH
17916: LD_INT 1
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: PUSH
17923: LD_INT 2
17925: PUSH
17926: LD_INT 25
17928: PUSH
17929: LD_INT 1
17931: PUSH
17932: EMPTY
17933: LIST
17934: LIST
17935: PUSH
17936: LD_INT 25
17938: PUSH
17939: LD_INT 2
17941: PUSH
17942: EMPTY
17943: LIST
17944: LIST
17945: PUSH
17946: LD_INT 25
17948: PUSH
17949: LD_INT 3
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: PUSH
17956: LD_INT 25
17958: PUSH
17959: LD_INT 4
17961: PUSH
17962: EMPTY
17963: LIST
17964: LIST
17965: PUSH
17966: LD_INT 25
17968: PUSH
17969: LD_INT 5
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PUSH
17976: LD_INT 25
17978: PUSH
17979: LD_INT 8
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: LIST
17999: PPUSH
18000: CALL_OW 69
18004: PPUSH
18005: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18009: LD_EXP 1
18013: PPUSH
18014: LD_EXP 39
18018: PUSH
18019: LD_STRING JMM
18021: STR
18022: PPUSH
18023: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18027: LD_EXP 7
18031: PPUSH
18032: LD_EXP 39
18036: PUSH
18037: LD_STRING Brown
18039: STR
18040: PPUSH
18041: CALL 12186 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18045: LD_EXP 3
18049: PPUSH
18050: LD_EXP 39
18054: PUSH
18055: LD_STRING Donaldson
18057: STR
18058: PPUSH
18059: CALL 12186 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18063: LD_EXP 4
18067: PPUSH
18068: LD_EXP 39
18072: PUSH
18073: LD_STRING Bobby
18075: STR
18076: PPUSH
18077: CALL 12186 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18081: LD_EXP 5
18085: PPUSH
18086: LD_EXP 39
18090: PUSH
18091: LD_STRING Cyrus
18093: STR
18094: PPUSH
18095: CALL 12186 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18099: LD_EXP 2
18103: PPUSH
18104: LD_EXP 39
18108: PUSH
18109: LD_STRING Lisa
18111: STR
18112: PPUSH
18113: CALL 12186 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18117: LD_EXP 12
18121: PPUSH
18122: LD_EXP 39
18126: PUSH
18127: LD_STRING Frank
18129: STR
18130: PPUSH
18131: CALL 12186 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
18135: LD_EXP 13
18139: PPUSH
18140: LD_EXP 39
18144: PUSH
18145: LD_STRING Kikuchi
18147: STR
18148: PPUSH
18149: CALL 12186 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
18153: LD_EXP 9
18157: PPUSH
18158: LD_EXP 39
18162: PUSH
18163: LD_STRING Houten
18165: STR
18166: PPUSH
18167: CALL 12186 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
18171: LD_EXP 11
18175: PPUSH
18176: LD_EXP 39
18180: PUSH
18181: LD_STRING Gary
18183: STR
18184: PPUSH
18185: CALL 12186 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
18189: LD_EXP 10
18193: PPUSH
18194: LD_EXP 39
18198: PUSH
18199: LD_STRING Cornell
18201: STR
18202: PPUSH
18203: CALL 12186 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18207: LD_EXP 6
18211: PPUSH
18212: LD_EXP 39
18216: PUSH
18217: LD_STRING Denis
18219: STR
18220: PPUSH
18221: CALL 12186 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18225: LD_EXP 8
18229: PPUSH
18230: LD_EXP 39
18234: PUSH
18235: LD_STRING Gladstone
18237: STR
18238: PPUSH
18239: CALL 12186 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
18243: LD_INT 22
18245: PUSH
18246: LD_INT 1
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: LD_INT 23
18255: PUSH
18256: LD_INT 1
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: PUSH
18263: LD_INT 21
18265: PUSH
18266: LD_INT 1
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: PUSH
18273: LD_INT 2
18275: PUSH
18276: LD_INT 25
18278: PUSH
18279: LD_INT 1
18281: PUSH
18282: EMPTY
18283: LIST
18284: LIST
18285: PUSH
18286: LD_INT 25
18288: PUSH
18289: LD_INT 2
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: PUSH
18296: LD_INT 25
18298: PUSH
18299: LD_INT 3
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: PUSH
18306: LD_INT 25
18308: PUSH
18309: LD_INT 4
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: PUSH
18316: LD_INT 25
18318: PUSH
18319: LD_INT 5
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: PUSH
18326: LD_INT 25
18328: PUSH
18329: LD_INT 8
18331: PUSH
18332: EMPTY
18333: LIST
18334: LIST
18335: PUSH
18336: EMPTY
18337: LIST
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: PUSH
18345: EMPTY
18346: LIST
18347: LIST
18348: LIST
18349: LIST
18350: PPUSH
18351: CALL_OW 69
18355: PUSH
18356: LD_EXP 1
18360: PUSH
18361: LD_EXP 7
18365: PUSH
18366: LD_EXP 3
18370: PUSH
18371: LD_EXP 4
18375: PUSH
18376: LD_EXP 5
18380: PUSH
18381: LD_EXP 2
18385: PUSH
18386: LD_EXP 12
18390: PUSH
18391: LD_EXP 8
18395: PUSH
18396: LD_EXP 13
18400: PUSH
18401: LD_EXP 6
18405: PUSH
18406: LD_EXP 9
18410: PUSH
18411: LD_EXP 11
18415: PUSH
18416: LD_EXP 10
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: DIFF
18436: PPUSH
18437: LD_STRING 12_other_survivors
18439: PPUSH
18440: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
18444: LD_INT 22
18446: PUSH
18447: LD_INT 1
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: PUSH
18454: LD_INT 23
18456: PUSH
18457: LD_INT 2
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PUSH
18464: LD_INT 21
18466: PUSH
18467: LD_INT 1
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PUSH
18474: LD_INT 2
18476: PUSH
18477: LD_INT 25
18479: PUSH
18480: LD_INT 1
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: PUSH
18487: LD_INT 25
18489: PUSH
18490: LD_INT 2
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: PUSH
18497: LD_INT 25
18499: PUSH
18500: LD_INT 3
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: PUSH
18507: LD_INT 25
18509: PUSH
18510: LD_INT 4
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: LD_INT 25
18519: PUSH
18520: LD_INT 5
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: LD_INT 25
18529: PUSH
18530: LD_INT 8
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: LIST
18541: LIST
18542: LIST
18543: LIST
18544: LIST
18545: PUSH
18546: EMPTY
18547: LIST
18548: LIST
18549: LIST
18550: LIST
18551: PPUSH
18552: CALL_OW 69
18556: PPUSH
18557: LD_STRING 12_kurt_squad
18559: PPUSH
18560: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
18564: LD_EXP 14
18568: PPUSH
18569: LD_STRING 12_others
18571: PPUSH
18572: CALL_OW 38
// YouWin ;
18576: CALL_OW 103
// end ; end_of_file
18580: LD_VAR 0 1
18584: RET
// every 0 0$01 trigger ruAI do
18585: LD_EXP 34
18589: IFFALSE 18899
18591: GO 18593
18593: DISABLE
// begin repeat wait ( 0 0$08 ) ;
18594: LD_INT 280
18596: PPUSH
18597: CALL_OW 67
// if cratesSpawned < 12 then
18601: LD_EXP 38
18605: PUSH
18606: LD_INT 12
18608: LESS
18609: IFFALSE 18661
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
18611: LD_INT 105
18613: PPUSH
18614: LD_INT 350
18616: PPUSH
18617: CALL_OW 12
18621: PPUSH
18622: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18626: LD_INT 3
18628: PPUSH
18629: LD_INT 5
18631: PPUSH
18632: CALL_OW 12
18636: PPUSH
18637: LD_INT 21
18639: PPUSH
18640: LD_INT 1
18642: PPUSH
18643: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18647: LD_ADDR_EXP 38
18651: PUSH
18652: LD_EXP 38
18656: PUSH
18657: LD_INT 1
18659: PLUS
18660: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 32 then
18661: LD_EXP 38
18665: PUSH
18666: LD_INT 12
18668: GREATEREQUAL
18669: PUSH
18670: LD_EXP 38
18674: PUSH
18675: LD_INT 32
18677: LESS
18678: AND
18679: IFFALSE 18731
// begin wait ( rand ( 0 0$12 , 0 0$20 ) ) ;
18681: LD_INT 420
18683: PPUSH
18684: LD_INT 700
18686: PPUSH
18687: CALL_OW 12
18691: PPUSH
18692: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18696: LD_INT 3
18698: PPUSH
18699: LD_INT 5
18701: PPUSH
18702: CALL_OW 12
18706: PPUSH
18707: LD_INT 21
18709: PPUSH
18710: LD_INT 1
18712: PPUSH
18713: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18717: LD_ADDR_EXP 38
18721: PUSH
18722: LD_EXP 38
18726: PUSH
18727: LD_INT 1
18729: PLUS
18730: ST_TO_ADDR
// end ; if cratesSpawned >= 32 then
18731: LD_EXP 38
18735: PUSH
18736: LD_INT 32
18738: GREATEREQUAL
18739: IFFALSE 18813
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
18741: LD_INT 21
18743: PPUSH
18744: CALL_OW 435
18748: PUSH
18749: LD_INT 14
18751: LESS
18752: IFFALSE 18763
// wait ( 0 0$10 ) else
18754: LD_INT 350
18756: PPUSH
18757: CALL_OW 67
18761: GO 18778
// wait ( rand ( 0 0$50 , 1 1$30 ) ) ;
18763: LD_INT 1750
18765: PPUSH
18766: LD_INT 3150
18768: PPUSH
18769: CALL_OW 12
18773: PPUSH
18774: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
18778: LD_INT 2
18780: PPUSH
18781: LD_INT 5
18783: PPUSH
18784: CALL_OW 12
18788: PPUSH
18789: LD_INT 21
18791: PPUSH
18792: LD_INT 1
18794: PPUSH
18795: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18799: LD_ADDR_EXP 38
18803: PUSH
18804: LD_EXP 38
18808: PUSH
18809: LD_INT 1
18811: PLUS
18812: ST_TO_ADDR
// end ; if cratesSpawned >= 110 then
18813: LD_EXP 38
18817: PUSH
18818: LD_INT 110
18820: GREATEREQUAL
18821: IFFALSE 18895
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
18823: LD_INT 21
18825: PPUSH
18826: CALL_OW 435
18830: PUSH
18831: LD_INT 14
18833: LESS
18834: IFFALSE 18845
// wait ( 0 0$20 ) else
18836: LD_INT 700
18838: PPUSH
18839: CALL_OW 67
18843: GO 18860
// wait ( rand ( 1 1$10 , 1 1$50 ) ) ;
18845: LD_INT 2450
18847: PPUSH
18848: LD_INT 3850
18850: PPUSH
18851: CALL_OW 12
18855: PPUSH
18856: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
18860: LD_INT 1
18862: PPUSH
18863: LD_INT 5
18865: PPUSH
18866: CALL_OW 12
18870: PPUSH
18871: LD_INT 21
18873: PPUSH
18874: LD_INT 1
18876: PPUSH
18877: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18881: LD_ADDR_EXP 38
18885: PUSH
18886: LD_EXP 38
18890: PUSH
18891: LD_INT 1
18893: PLUS
18894: ST_TO_ADDR
// end ; until false ;
18895: LD_INT 0
18897: IFFALSE 18594
// end ; end_of_file end_of_file
18899: END
// every 0 0$1 do
18900: GO 18902
18902: DISABLE
// begin enable ;
18903: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18904: LD_STRING updateTimer(
18906: PUSH
18907: LD_OWVAR 1
18911: STR
18912: PUSH
18913: LD_STRING );
18915: STR
18916: PPUSH
18917: CALL_OW 559
// end ;
18921: END
// export function SOS_MapStart ( ) ; begin
18922: LD_INT 0
18924: PPUSH
// if streamModeActive then
18925: LD_EXP 45
18929: IFFALSE 18938
// DefineStreamItems ( true ) ;
18931: LD_INT 1
18933: PPUSH
18934: CALL 20592 0 1
// UpdateFactoryWaypoints ( ) ;
18938: CALL 33453 0 0
// UpdateWarehouseGatheringPoints ( ) ;
18942: CALL 33710 0 0
// end ;
18946: LD_VAR 0 1
18950: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18951: LD_INT 0
18953: PPUSH
// if p2 = 100 then
18954: LD_VAR 0 2
18958: PUSH
18959: LD_INT 100
18961: EQUAL
18962: IFFALSE 19965
// begin if not StreamModeActive then
18964: LD_EXP 45
18968: NOT
18969: IFFALSE 18979
// StreamModeActive := true ;
18971: LD_ADDR_EXP 45
18975: PUSH
18976: LD_INT 1
18978: ST_TO_ADDR
// if p3 = 0 then
18979: LD_VAR 0 3
18983: PUSH
18984: LD_INT 0
18986: EQUAL
18987: IFFALSE 18993
// InitStreamMode ;
18989: CALL 20128 0 0
// if p3 = 1 then
18993: LD_VAR 0 3
18997: PUSH
18998: LD_INT 1
19000: EQUAL
19001: IFFALSE 19011
// sRocket := true ;
19003: LD_ADDR_EXP 50
19007: PUSH
19008: LD_INT 1
19010: ST_TO_ADDR
// if p3 = 2 then
19011: LD_VAR 0 3
19015: PUSH
19016: LD_INT 2
19018: EQUAL
19019: IFFALSE 19029
// sSpeed := true ;
19021: LD_ADDR_EXP 49
19025: PUSH
19026: LD_INT 1
19028: ST_TO_ADDR
// if p3 = 3 then
19029: LD_VAR 0 3
19033: PUSH
19034: LD_INT 3
19036: EQUAL
19037: IFFALSE 19047
// sEngine := true ;
19039: LD_ADDR_EXP 51
19043: PUSH
19044: LD_INT 1
19046: ST_TO_ADDR
// if p3 = 4 then
19047: LD_VAR 0 3
19051: PUSH
19052: LD_INT 4
19054: EQUAL
19055: IFFALSE 19065
// sSpec := true ;
19057: LD_ADDR_EXP 48
19061: PUSH
19062: LD_INT 1
19064: ST_TO_ADDR
// if p3 = 5 then
19065: LD_VAR 0 3
19069: PUSH
19070: LD_INT 5
19072: EQUAL
19073: IFFALSE 19083
// sLevel := true ;
19075: LD_ADDR_EXP 52
19079: PUSH
19080: LD_INT 1
19082: ST_TO_ADDR
// if p3 = 6 then
19083: LD_VAR 0 3
19087: PUSH
19088: LD_INT 6
19090: EQUAL
19091: IFFALSE 19101
// sArmoury := true ;
19093: LD_ADDR_EXP 53
19097: PUSH
19098: LD_INT 1
19100: ST_TO_ADDR
// if p3 = 7 then
19101: LD_VAR 0 3
19105: PUSH
19106: LD_INT 7
19108: EQUAL
19109: IFFALSE 19119
// sRadar := true ;
19111: LD_ADDR_EXP 54
19115: PUSH
19116: LD_INT 1
19118: ST_TO_ADDR
// if p3 = 8 then
19119: LD_VAR 0 3
19123: PUSH
19124: LD_INT 8
19126: EQUAL
19127: IFFALSE 19137
// sBunker := true ;
19129: LD_ADDR_EXP 55
19133: PUSH
19134: LD_INT 1
19136: ST_TO_ADDR
// if p3 = 9 then
19137: LD_VAR 0 3
19141: PUSH
19142: LD_INT 9
19144: EQUAL
19145: IFFALSE 19155
// sHack := true ;
19147: LD_ADDR_EXP 56
19151: PUSH
19152: LD_INT 1
19154: ST_TO_ADDR
// if p3 = 10 then
19155: LD_VAR 0 3
19159: PUSH
19160: LD_INT 10
19162: EQUAL
19163: IFFALSE 19173
// sFire := true ;
19165: LD_ADDR_EXP 57
19169: PUSH
19170: LD_INT 1
19172: ST_TO_ADDR
// if p3 = 11 then
19173: LD_VAR 0 3
19177: PUSH
19178: LD_INT 11
19180: EQUAL
19181: IFFALSE 19191
// sRefresh := true ;
19183: LD_ADDR_EXP 58
19187: PUSH
19188: LD_INT 1
19190: ST_TO_ADDR
// if p3 = 12 then
19191: LD_VAR 0 3
19195: PUSH
19196: LD_INT 12
19198: EQUAL
19199: IFFALSE 19209
// sExp := true ;
19201: LD_ADDR_EXP 59
19205: PUSH
19206: LD_INT 1
19208: ST_TO_ADDR
// if p3 = 13 then
19209: LD_VAR 0 3
19213: PUSH
19214: LD_INT 13
19216: EQUAL
19217: IFFALSE 19227
// sDepot := true ;
19219: LD_ADDR_EXP 60
19223: PUSH
19224: LD_INT 1
19226: ST_TO_ADDR
// if p3 = 14 then
19227: LD_VAR 0 3
19231: PUSH
19232: LD_INT 14
19234: EQUAL
19235: IFFALSE 19245
// sFlag := true ;
19237: LD_ADDR_EXP 61
19241: PUSH
19242: LD_INT 1
19244: ST_TO_ADDR
// if p3 = 15 then
19245: LD_VAR 0 3
19249: PUSH
19250: LD_INT 15
19252: EQUAL
19253: IFFALSE 19263
// sKamikadze := true ;
19255: LD_ADDR_EXP 69
19259: PUSH
19260: LD_INT 1
19262: ST_TO_ADDR
// if p3 = 16 then
19263: LD_VAR 0 3
19267: PUSH
19268: LD_INT 16
19270: EQUAL
19271: IFFALSE 19281
// sTroll := true ;
19273: LD_ADDR_EXP 70
19277: PUSH
19278: LD_INT 1
19280: ST_TO_ADDR
// if p3 = 17 then
19281: LD_VAR 0 3
19285: PUSH
19286: LD_INT 17
19288: EQUAL
19289: IFFALSE 19299
// sSlow := true ;
19291: LD_ADDR_EXP 71
19295: PUSH
19296: LD_INT 1
19298: ST_TO_ADDR
// if p3 = 18 then
19299: LD_VAR 0 3
19303: PUSH
19304: LD_INT 18
19306: EQUAL
19307: IFFALSE 19317
// sLack := true ;
19309: LD_ADDR_EXP 72
19313: PUSH
19314: LD_INT 1
19316: ST_TO_ADDR
// if p3 = 19 then
19317: LD_VAR 0 3
19321: PUSH
19322: LD_INT 19
19324: EQUAL
19325: IFFALSE 19335
// sTank := true ;
19327: LD_ADDR_EXP 74
19331: PUSH
19332: LD_INT 1
19334: ST_TO_ADDR
// if p3 = 20 then
19335: LD_VAR 0 3
19339: PUSH
19340: LD_INT 20
19342: EQUAL
19343: IFFALSE 19353
// sRemote := true ;
19345: LD_ADDR_EXP 75
19349: PUSH
19350: LD_INT 1
19352: ST_TO_ADDR
// if p3 = 21 then
19353: LD_VAR 0 3
19357: PUSH
19358: LD_INT 21
19360: EQUAL
19361: IFFALSE 19371
// sPowell := true ;
19363: LD_ADDR_EXP 76
19367: PUSH
19368: LD_INT 1
19370: ST_TO_ADDR
// if p3 = 22 then
19371: LD_VAR 0 3
19375: PUSH
19376: LD_INT 22
19378: EQUAL
19379: IFFALSE 19389
// sTeleport := true ;
19381: LD_ADDR_EXP 79
19385: PUSH
19386: LD_INT 1
19388: ST_TO_ADDR
// if p3 = 23 then
19389: LD_VAR 0 3
19393: PUSH
19394: LD_INT 23
19396: EQUAL
19397: IFFALSE 19407
// sOilTower := true ;
19399: LD_ADDR_EXP 81
19403: PUSH
19404: LD_INT 1
19406: ST_TO_ADDR
// if p3 = 24 then
19407: LD_VAR 0 3
19411: PUSH
19412: LD_INT 24
19414: EQUAL
19415: IFFALSE 19425
// sShovel := true ;
19417: LD_ADDR_EXP 82
19421: PUSH
19422: LD_INT 1
19424: ST_TO_ADDR
// if p3 = 25 then
19425: LD_VAR 0 3
19429: PUSH
19430: LD_INT 25
19432: EQUAL
19433: IFFALSE 19443
// sSheik := true ;
19435: LD_ADDR_EXP 83
19439: PUSH
19440: LD_INT 1
19442: ST_TO_ADDR
// if p3 = 26 then
19443: LD_VAR 0 3
19447: PUSH
19448: LD_INT 26
19450: EQUAL
19451: IFFALSE 19461
// sEarthquake := true ;
19453: LD_ADDR_EXP 85
19457: PUSH
19458: LD_INT 1
19460: ST_TO_ADDR
// if p3 = 27 then
19461: LD_VAR 0 3
19465: PUSH
19466: LD_INT 27
19468: EQUAL
19469: IFFALSE 19479
// sAI := true ;
19471: LD_ADDR_EXP 86
19475: PUSH
19476: LD_INT 1
19478: ST_TO_ADDR
// if p3 = 28 then
19479: LD_VAR 0 3
19483: PUSH
19484: LD_INT 28
19486: EQUAL
19487: IFFALSE 19497
// sCargo := true ;
19489: LD_ADDR_EXP 89
19493: PUSH
19494: LD_INT 1
19496: ST_TO_ADDR
// if p3 = 29 then
19497: LD_VAR 0 3
19501: PUSH
19502: LD_INT 29
19504: EQUAL
19505: IFFALSE 19515
// sDLaser := true ;
19507: LD_ADDR_EXP 90
19511: PUSH
19512: LD_INT 1
19514: ST_TO_ADDR
// if p3 = 30 then
19515: LD_VAR 0 3
19519: PUSH
19520: LD_INT 30
19522: EQUAL
19523: IFFALSE 19533
// sExchange := true ;
19525: LD_ADDR_EXP 91
19529: PUSH
19530: LD_INT 1
19532: ST_TO_ADDR
// if p3 = 31 then
19533: LD_VAR 0 3
19537: PUSH
19538: LD_INT 31
19540: EQUAL
19541: IFFALSE 19551
// sFac := true ;
19543: LD_ADDR_EXP 92
19547: PUSH
19548: LD_INT 1
19550: ST_TO_ADDR
// if p3 = 32 then
19551: LD_VAR 0 3
19555: PUSH
19556: LD_INT 32
19558: EQUAL
19559: IFFALSE 19569
// sPower := true ;
19561: LD_ADDR_EXP 93
19565: PUSH
19566: LD_INT 1
19568: ST_TO_ADDR
// if p3 = 33 then
19569: LD_VAR 0 3
19573: PUSH
19574: LD_INT 33
19576: EQUAL
19577: IFFALSE 19587
// sRandom := true ;
19579: LD_ADDR_EXP 94
19583: PUSH
19584: LD_INT 1
19586: ST_TO_ADDR
// if p3 = 34 then
19587: LD_VAR 0 3
19591: PUSH
19592: LD_INT 34
19594: EQUAL
19595: IFFALSE 19605
// sShield := true ;
19597: LD_ADDR_EXP 95
19601: PUSH
19602: LD_INT 1
19604: ST_TO_ADDR
// if p3 = 35 then
19605: LD_VAR 0 3
19609: PUSH
19610: LD_INT 35
19612: EQUAL
19613: IFFALSE 19623
// sTime := true ;
19615: LD_ADDR_EXP 96
19619: PUSH
19620: LD_INT 1
19622: ST_TO_ADDR
// if p3 = 36 then
19623: LD_VAR 0 3
19627: PUSH
19628: LD_INT 36
19630: EQUAL
19631: IFFALSE 19641
// sTools := true ;
19633: LD_ADDR_EXP 97
19637: PUSH
19638: LD_INT 1
19640: ST_TO_ADDR
// if p3 = 101 then
19641: LD_VAR 0 3
19645: PUSH
19646: LD_INT 101
19648: EQUAL
19649: IFFALSE 19659
// sSold := true ;
19651: LD_ADDR_EXP 62
19655: PUSH
19656: LD_INT 1
19658: ST_TO_ADDR
// if p3 = 102 then
19659: LD_VAR 0 3
19663: PUSH
19664: LD_INT 102
19666: EQUAL
19667: IFFALSE 19677
// sDiff := true ;
19669: LD_ADDR_EXP 63
19673: PUSH
19674: LD_INT 1
19676: ST_TO_ADDR
// if p3 = 103 then
19677: LD_VAR 0 3
19681: PUSH
19682: LD_INT 103
19684: EQUAL
19685: IFFALSE 19695
// sFog := true ;
19687: LD_ADDR_EXP 66
19691: PUSH
19692: LD_INT 1
19694: ST_TO_ADDR
// if p3 = 104 then
19695: LD_VAR 0 3
19699: PUSH
19700: LD_INT 104
19702: EQUAL
19703: IFFALSE 19713
// sReset := true ;
19705: LD_ADDR_EXP 67
19709: PUSH
19710: LD_INT 1
19712: ST_TO_ADDR
// if p3 = 105 then
19713: LD_VAR 0 3
19717: PUSH
19718: LD_INT 105
19720: EQUAL
19721: IFFALSE 19731
// sSun := true ;
19723: LD_ADDR_EXP 68
19727: PUSH
19728: LD_INT 1
19730: ST_TO_ADDR
// if p3 = 106 then
19731: LD_VAR 0 3
19735: PUSH
19736: LD_INT 106
19738: EQUAL
19739: IFFALSE 19749
// sTiger := true ;
19741: LD_ADDR_EXP 64
19745: PUSH
19746: LD_INT 1
19748: ST_TO_ADDR
// if p3 = 107 then
19749: LD_VAR 0 3
19753: PUSH
19754: LD_INT 107
19756: EQUAL
19757: IFFALSE 19767
// sBomb := true ;
19759: LD_ADDR_EXP 65
19763: PUSH
19764: LD_INT 1
19766: ST_TO_ADDR
// if p3 = 108 then
19767: LD_VAR 0 3
19771: PUSH
19772: LD_INT 108
19774: EQUAL
19775: IFFALSE 19785
// sWound := true ;
19777: LD_ADDR_EXP 73
19781: PUSH
19782: LD_INT 1
19784: ST_TO_ADDR
// if p3 = 109 then
19785: LD_VAR 0 3
19789: PUSH
19790: LD_INT 109
19792: EQUAL
19793: IFFALSE 19803
// sBetray := true ;
19795: LD_ADDR_EXP 77
19799: PUSH
19800: LD_INT 1
19802: ST_TO_ADDR
// if p3 = 110 then
19803: LD_VAR 0 3
19807: PUSH
19808: LD_INT 110
19810: EQUAL
19811: IFFALSE 19821
// sContamin := true ;
19813: LD_ADDR_EXP 78
19817: PUSH
19818: LD_INT 1
19820: ST_TO_ADDR
// if p3 = 111 then
19821: LD_VAR 0 3
19825: PUSH
19826: LD_INT 111
19828: EQUAL
19829: IFFALSE 19839
// sOil := true ;
19831: LD_ADDR_EXP 80
19835: PUSH
19836: LD_INT 1
19838: ST_TO_ADDR
// if p3 = 112 then
19839: LD_VAR 0 3
19843: PUSH
19844: LD_INT 112
19846: EQUAL
19847: IFFALSE 19857
// sStu := true ;
19849: LD_ADDR_EXP 84
19853: PUSH
19854: LD_INT 1
19856: ST_TO_ADDR
// if p3 = 113 then
19857: LD_VAR 0 3
19861: PUSH
19862: LD_INT 113
19864: EQUAL
19865: IFFALSE 19875
// sBazooka := true ;
19867: LD_ADDR_EXP 87
19871: PUSH
19872: LD_INT 1
19874: ST_TO_ADDR
// if p3 = 114 then
19875: LD_VAR 0 3
19879: PUSH
19880: LD_INT 114
19882: EQUAL
19883: IFFALSE 19893
// sMortar := true ;
19885: LD_ADDR_EXP 88
19889: PUSH
19890: LD_INT 1
19892: ST_TO_ADDR
// if p3 = 115 then
19893: LD_VAR 0 3
19897: PUSH
19898: LD_INT 115
19900: EQUAL
19901: IFFALSE 19911
// sRanger := true ;
19903: LD_ADDR_EXP 98
19907: PUSH
19908: LD_INT 1
19910: ST_TO_ADDR
// if p3 = 116 then
19911: LD_VAR 0 3
19915: PUSH
19916: LD_INT 116
19918: EQUAL
19919: IFFALSE 19929
// sComputer := true ;
19921: LD_ADDR_EXP 99
19925: PUSH
19926: LD_INT 1
19928: ST_TO_ADDR
// if p3 = 117 then
19929: LD_VAR 0 3
19933: PUSH
19934: LD_INT 117
19936: EQUAL
19937: IFFALSE 19947
// s30 := true ;
19939: LD_ADDR_EXP 100
19943: PUSH
19944: LD_INT 1
19946: ST_TO_ADDR
// if p3 = 118 then
19947: LD_VAR 0 3
19951: PUSH
19952: LD_INT 118
19954: EQUAL
19955: IFFALSE 19965
// s60 := true ;
19957: LD_ADDR_EXP 101
19961: PUSH
19962: LD_INT 1
19964: ST_TO_ADDR
// end ; if p2 = 101 then
19965: LD_VAR 0 2
19969: PUSH
19970: LD_INT 101
19972: EQUAL
19973: IFFALSE 20101
// begin case p3 of 1 :
19975: LD_VAR 0 3
19979: PUSH
19980: LD_INT 1
19982: DOUBLE
19983: EQUAL
19984: IFTRUE 19988
19986: GO 19995
19988: POP
// hHackUnlimitedResources ; 2 :
19989: CALL 32199 0 0
19993: GO 20101
19995: LD_INT 2
19997: DOUBLE
19998: EQUAL
19999: IFTRUE 20003
20001: GO 20010
20003: POP
// hHackSetLevel10 ; 3 :
20004: CALL 32332 0 0
20008: GO 20101
20010: LD_INT 3
20012: DOUBLE
20013: EQUAL
20014: IFTRUE 20018
20016: GO 20025
20018: POP
// hHackSetLevel10YourUnits ; 4 :
20019: CALL 32417 0 0
20023: GO 20101
20025: LD_INT 4
20027: DOUBLE
20028: EQUAL
20029: IFTRUE 20033
20031: GO 20040
20033: POP
// hHackInvincible ; 5 :
20034: CALL 32865 0 0
20038: GO 20101
20040: LD_INT 5
20042: DOUBLE
20043: EQUAL
20044: IFTRUE 20048
20046: GO 20055
20048: POP
// hHackInvisible ; 6 :
20049: CALL 32976 0 0
20053: GO 20101
20055: LD_INT 6
20057: DOUBLE
20058: EQUAL
20059: IFTRUE 20063
20061: GO 20070
20063: POP
// hHackChangeYourSide ; 7 :
20064: CALL 33033 0 0
20068: GO 20101
20070: LD_INT 7
20072: DOUBLE
20073: EQUAL
20074: IFTRUE 20078
20076: GO 20085
20078: POP
// hHackChangeUnitSide ; 8 :
20079: CALL 33075 0 0
20083: GO 20101
20085: LD_INT 8
20087: DOUBLE
20088: EQUAL
20089: IFTRUE 20093
20091: GO 20100
20093: POP
// hHackFog ; end ;
20094: CALL 33176 0 0
20098: GO 20101
20100: POP
// end ; end ;
20101: LD_VAR 0 7
20105: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20106: GO 20108
20108: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20109: LD_STRING initStreamRollete();
20111: PPUSH
20112: CALL_OW 559
// InitStreamMode ;
20116: CALL 20128 0 0
// DefineStreamItems ( false ) ;
20120: LD_INT 0
20122: PPUSH
20123: CALL 20592 0 1
// end ;
20127: END
// function InitStreamMode ; begin
20128: LD_INT 0
20130: PPUSH
// streamModeActive := false ;
20131: LD_ADDR_EXP 45
20135: PUSH
20136: LD_INT 0
20138: ST_TO_ADDR
// normalCounter := 36 ;
20139: LD_ADDR_EXP 46
20143: PUSH
20144: LD_INT 36
20146: ST_TO_ADDR
// hardcoreCounter := 18 ;
20147: LD_ADDR_EXP 47
20151: PUSH
20152: LD_INT 18
20154: ST_TO_ADDR
// sRocket := false ;
20155: LD_ADDR_EXP 50
20159: PUSH
20160: LD_INT 0
20162: ST_TO_ADDR
// sSpeed := false ;
20163: LD_ADDR_EXP 49
20167: PUSH
20168: LD_INT 0
20170: ST_TO_ADDR
// sEngine := false ;
20171: LD_ADDR_EXP 51
20175: PUSH
20176: LD_INT 0
20178: ST_TO_ADDR
// sSpec := false ;
20179: LD_ADDR_EXP 48
20183: PUSH
20184: LD_INT 0
20186: ST_TO_ADDR
// sLevel := false ;
20187: LD_ADDR_EXP 52
20191: PUSH
20192: LD_INT 0
20194: ST_TO_ADDR
// sArmoury := false ;
20195: LD_ADDR_EXP 53
20199: PUSH
20200: LD_INT 0
20202: ST_TO_ADDR
// sRadar := false ;
20203: LD_ADDR_EXP 54
20207: PUSH
20208: LD_INT 0
20210: ST_TO_ADDR
// sBunker := false ;
20211: LD_ADDR_EXP 55
20215: PUSH
20216: LD_INT 0
20218: ST_TO_ADDR
// sHack := false ;
20219: LD_ADDR_EXP 56
20223: PUSH
20224: LD_INT 0
20226: ST_TO_ADDR
// sFire := false ;
20227: LD_ADDR_EXP 57
20231: PUSH
20232: LD_INT 0
20234: ST_TO_ADDR
// sRefresh := false ;
20235: LD_ADDR_EXP 58
20239: PUSH
20240: LD_INT 0
20242: ST_TO_ADDR
// sExp := false ;
20243: LD_ADDR_EXP 59
20247: PUSH
20248: LD_INT 0
20250: ST_TO_ADDR
// sDepot := false ;
20251: LD_ADDR_EXP 60
20255: PUSH
20256: LD_INT 0
20258: ST_TO_ADDR
// sFlag := false ;
20259: LD_ADDR_EXP 61
20263: PUSH
20264: LD_INT 0
20266: ST_TO_ADDR
// sKamikadze := false ;
20267: LD_ADDR_EXP 69
20271: PUSH
20272: LD_INT 0
20274: ST_TO_ADDR
// sTroll := false ;
20275: LD_ADDR_EXP 70
20279: PUSH
20280: LD_INT 0
20282: ST_TO_ADDR
// sSlow := false ;
20283: LD_ADDR_EXP 71
20287: PUSH
20288: LD_INT 0
20290: ST_TO_ADDR
// sLack := false ;
20291: LD_ADDR_EXP 72
20295: PUSH
20296: LD_INT 0
20298: ST_TO_ADDR
// sTank := false ;
20299: LD_ADDR_EXP 74
20303: PUSH
20304: LD_INT 0
20306: ST_TO_ADDR
// sRemote := false ;
20307: LD_ADDR_EXP 75
20311: PUSH
20312: LD_INT 0
20314: ST_TO_ADDR
// sPowell := false ;
20315: LD_ADDR_EXP 76
20319: PUSH
20320: LD_INT 0
20322: ST_TO_ADDR
// sTeleport := false ;
20323: LD_ADDR_EXP 79
20327: PUSH
20328: LD_INT 0
20330: ST_TO_ADDR
// sOilTower := false ;
20331: LD_ADDR_EXP 81
20335: PUSH
20336: LD_INT 0
20338: ST_TO_ADDR
// sShovel := false ;
20339: LD_ADDR_EXP 82
20343: PUSH
20344: LD_INT 0
20346: ST_TO_ADDR
// sSheik := false ;
20347: LD_ADDR_EXP 83
20351: PUSH
20352: LD_INT 0
20354: ST_TO_ADDR
// sEarthquake := false ;
20355: LD_ADDR_EXP 85
20359: PUSH
20360: LD_INT 0
20362: ST_TO_ADDR
// sAI := false ;
20363: LD_ADDR_EXP 86
20367: PUSH
20368: LD_INT 0
20370: ST_TO_ADDR
// sCargo := false ;
20371: LD_ADDR_EXP 89
20375: PUSH
20376: LD_INT 0
20378: ST_TO_ADDR
// sDLaser := false ;
20379: LD_ADDR_EXP 90
20383: PUSH
20384: LD_INT 0
20386: ST_TO_ADDR
// sExchange := false ;
20387: LD_ADDR_EXP 91
20391: PUSH
20392: LD_INT 0
20394: ST_TO_ADDR
// sFac := false ;
20395: LD_ADDR_EXP 92
20399: PUSH
20400: LD_INT 0
20402: ST_TO_ADDR
// sPower := false ;
20403: LD_ADDR_EXP 93
20407: PUSH
20408: LD_INT 0
20410: ST_TO_ADDR
// sRandom := false ;
20411: LD_ADDR_EXP 94
20415: PUSH
20416: LD_INT 0
20418: ST_TO_ADDR
// sShield := false ;
20419: LD_ADDR_EXP 95
20423: PUSH
20424: LD_INT 0
20426: ST_TO_ADDR
// sTime := false ;
20427: LD_ADDR_EXP 96
20431: PUSH
20432: LD_INT 0
20434: ST_TO_ADDR
// sTools := false ;
20435: LD_ADDR_EXP 97
20439: PUSH
20440: LD_INT 0
20442: ST_TO_ADDR
// sSold := false ;
20443: LD_ADDR_EXP 62
20447: PUSH
20448: LD_INT 0
20450: ST_TO_ADDR
// sDiff := false ;
20451: LD_ADDR_EXP 63
20455: PUSH
20456: LD_INT 0
20458: ST_TO_ADDR
// sFog := false ;
20459: LD_ADDR_EXP 66
20463: PUSH
20464: LD_INT 0
20466: ST_TO_ADDR
// sReset := false ;
20467: LD_ADDR_EXP 67
20471: PUSH
20472: LD_INT 0
20474: ST_TO_ADDR
// sSun := false ;
20475: LD_ADDR_EXP 68
20479: PUSH
20480: LD_INT 0
20482: ST_TO_ADDR
// sTiger := false ;
20483: LD_ADDR_EXP 64
20487: PUSH
20488: LD_INT 0
20490: ST_TO_ADDR
// sBomb := false ;
20491: LD_ADDR_EXP 65
20495: PUSH
20496: LD_INT 0
20498: ST_TO_ADDR
// sWound := false ;
20499: LD_ADDR_EXP 73
20503: PUSH
20504: LD_INT 0
20506: ST_TO_ADDR
// sBetray := false ;
20507: LD_ADDR_EXP 77
20511: PUSH
20512: LD_INT 0
20514: ST_TO_ADDR
// sContamin := false ;
20515: LD_ADDR_EXP 78
20519: PUSH
20520: LD_INT 0
20522: ST_TO_ADDR
// sOil := false ;
20523: LD_ADDR_EXP 80
20527: PUSH
20528: LD_INT 0
20530: ST_TO_ADDR
// sStu := false ;
20531: LD_ADDR_EXP 84
20535: PUSH
20536: LD_INT 0
20538: ST_TO_ADDR
// sBazooka := false ;
20539: LD_ADDR_EXP 87
20543: PUSH
20544: LD_INT 0
20546: ST_TO_ADDR
// sMortar := false ;
20547: LD_ADDR_EXP 88
20551: PUSH
20552: LD_INT 0
20554: ST_TO_ADDR
// sRanger := false ;
20555: LD_ADDR_EXP 98
20559: PUSH
20560: LD_INT 0
20562: ST_TO_ADDR
// sComputer := false ;
20563: LD_ADDR_EXP 99
20567: PUSH
20568: LD_INT 0
20570: ST_TO_ADDR
// s30 := false ;
20571: LD_ADDR_EXP 100
20575: PUSH
20576: LD_INT 0
20578: ST_TO_ADDR
// s60 := false ;
20579: LD_ADDR_EXP 101
20583: PUSH
20584: LD_INT 0
20586: ST_TO_ADDR
// end ;
20587: LD_VAR 0 1
20591: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20592: LD_INT 0
20594: PPUSH
20595: PPUSH
20596: PPUSH
20597: PPUSH
20598: PPUSH
20599: PPUSH
20600: PPUSH
// result := [ ] ;
20601: LD_ADDR_VAR 0 2
20605: PUSH
20606: EMPTY
20607: ST_TO_ADDR
// if campaign_id = 1 then
20608: LD_OWVAR 69
20612: PUSH
20613: LD_INT 1
20615: EQUAL
20616: IFFALSE 23782
// begin case mission_number of 1 :
20618: LD_OWVAR 70
20622: PUSH
20623: LD_INT 1
20625: DOUBLE
20626: EQUAL
20627: IFTRUE 20631
20629: GO 20707
20631: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20632: LD_ADDR_VAR 0 2
20636: PUSH
20637: LD_INT 2
20639: PUSH
20640: LD_INT 4
20642: PUSH
20643: LD_INT 11
20645: PUSH
20646: LD_INT 12
20648: PUSH
20649: LD_INT 15
20651: PUSH
20652: LD_INT 16
20654: PUSH
20655: LD_INT 22
20657: PUSH
20658: LD_INT 23
20660: PUSH
20661: LD_INT 26
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: PUSH
20675: LD_INT 101
20677: PUSH
20678: LD_INT 102
20680: PUSH
20681: LD_INT 106
20683: PUSH
20684: LD_INT 116
20686: PUSH
20687: LD_INT 117
20689: PUSH
20690: LD_INT 118
20692: PUSH
20693: EMPTY
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: PUSH
20701: EMPTY
20702: LIST
20703: LIST
20704: ST_TO_ADDR
20705: GO 23780
20707: LD_INT 2
20709: DOUBLE
20710: EQUAL
20711: IFTRUE 20715
20713: GO 20799
20715: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20716: LD_ADDR_VAR 0 2
20720: PUSH
20721: LD_INT 2
20723: PUSH
20724: LD_INT 4
20726: PUSH
20727: LD_INT 11
20729: PUSH
20730: LD_INT 12
20732: PUSH
20733: LD_INT 15
20735: PUSH
20736: LD_INT 16
20738: PUSH
20739: LD_INT 22
20741: PUSH
20742: LD_INT 23
20744: PUSH
20745: LD_INT 26
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: PUSH
20759: LD_INT 101
20761: PUSH
20762: LD_INT 102
20764: PUSH
20765: LD_INT 105
20767: PUSH
20768: LD_INT 106
20770: PUSH
20771: LD_INT 108
20773: PUSH
20774: LD_INT 116
20776: PUSH
20777: LD_INT 117
20779: PUSH
20780: LD_INT 118
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: ST_TO_ADDR
20797: GO 23780
20799: LD_INT 3
20801: DOUBLE
20802: EQUAL
20803: IFTRUE 20807
20805: GO 20895
20807: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20808: LD_ADDR_VAR 0 2
20812: PUSH
20813: LD_INT 2
20815: PUSH
20816: LD_INT 4
20818: PUSH
20819: LD_INT 5
20821: PUSH
20822: LD_INT 11
20824: PUSH
20825: LD_INT 12
20827: PUSH
20828: LD_INT 15
20830: PUSH
20831: LD_INT 16
20833: PUSH
20834: LD_INT 22
20836: PUSH
20837: LD_INT 26
20839: PUSH
20840: LD_INT 36
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: PUSH
20855: LD_INT 101
20857: PUSH
20858: LD_INT 102
20860: PUSH
20861: LD_INT 105
20863: PUSH
20864: LD_INT 106
20866: PUSH
20867: LD_INT 108
20869: PUSH
20870: LD_INT 116
20872: PUSH
20873: LD_INT 117
20875: PUSH
20876: LD_INT 118
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: ST_TO_ADDR
20893: GO 23780
20895: LD_INT 4
20897: DOUBLE
20898: EQUAL
20899: IFTRUE 20903
20901: GO 20999
20903: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20904: LD_ADDR_VAR 0 2
20908: PUSH
20909: LD_INT 2
20911: PUSH
20912: LD_INT 4
20914: PUSH
20915: LD_INT 5
20917: PUSH
20918: LD_INT 8
20920: PUSH
20921: LD_INT 11
20923: PUSH
20924: LD_INT 12
20926: PUSH
20927: LD_INT 15
20929: PUSH
20930: LD_INT 16
20932: PUSH
20933: LD_INT 22
20935: PUSH
20936: LD_INT 23
20938: PUSH
20939: LD_INT 26
20941: PUSH
20942: LD_INT 36
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: PUSH
20959: LD_INT 101
20961: PUSH
20962: LD_INT 102
20964: PUSH
20965: LD_INT 105
20967: PUSH
20968: LD_INT 106
20970: PUSH
20971: LD_INT 108
20973: PUSH
20974: LD_INT 116
20976: PUSH
20977: LD_INT 117
20979: PUSH
20980: LD_INT 118
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: ST_TO_ADDR
20997: GO 23780
20999: LD_INT 5
21001: DOUBLE
21002: EQUAL
21003: IFTRUE 21007
21005: GO 21119
21007: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21008: LD_ADDR_VAR 0 2
21012: PUSH
21013: LD_INT 2
21015: PUSH
21016: LD_INT 4
21018: PUSH
21019: LD_INT 5
21021: PUSH
21022: LD_INT 6
21024: PUSH
21025: LD_INT 8
21027: PUSH
21028: LD_INT 11
21030: PUSH
21031: LD_INT 12
21033: PUSH
21034: LD_INT 15
21036: PUSH
21037: LD_INT 16
21039: PUSH
21040: LD_INT 22
21042: PUSH
21043: LD_INT 23
21045: PUSH
21046: LD_INT 25
21048: PUSH
21049: LD_INT 26
21051: PUSH
21052: LD_INT 36
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: PUSH
21071: LD_INT 101
21073: PUSH
21074: LD_INT 102
21076: PUSH
21077: LD_INT 105
21079: PUSH
21080: LD_INT 106
21082: PUSH
21083: LD_INT 108
21085: PUSH
21086: LD_INT 109
21088: PUSH
21089: LD_INT 112
21091: PUSH
21092: LD_INT 116
21094: PUSH
21095: LD_INT 117
21097: PUSH
21098: LD_INT 118
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: ST_TO_ADDR
21117: GO 23780
21119: LD_INT 6
21121: DOUBLE
21122: EQUAL
21123: IFTRUE 21127
21125: GO 21259
21127: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21128: LD_ADDR_VAR 0 2
21132: PUSH
21133: LD_INT 2
21135: PUSH
21136: LD_INT 4
21138: PUSH
21139: LD_INT 5
21141: PUSH
21142: LD_INT 6
21144: PUSH
21145: LD_INT 8
21147: PUSH
21148: LD_INT 11
21150: PUSH
21151: LD_INT 12
21153: PUSH
21154: LD_INT 15
21156: PUSH
21157: LD_INT 16
21159: PUSH
21160: LD_INT 20
21162: PUSH
21163: LD_INT 21
21165: PUSH
21166: LD_INT 22
21168: PUSH
21169: LD_INT 23
21171: PUSH
21172: LD_INT 25
21174: PUSH
21175: LD_INT 26
21177: PUSH
21178: LD_INT 30
21180: PUSH
21181: LD_INT 31
21183: PUSH
21184: LD_INT 32
21186: PUSH
21187: LD_INT 36
21189: PUSH
21190: EMPTY
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: PUSH
21211: LD_INT 101
21213: PUSH
21214: LD_INT 102
21216: PUSH
21217: LD_INT 105
21219: PUSH
21220: LD_INT 106
21222: PUSH
21223: LD_INT 108
21225: PUSH
21226: LD_INT 109
21228: PUSH
21229: LD_INT 112
21231: PUSH
21232: LD_INT 116
21234: PUSH
21235: LD_INT 117
21237: PUSH
21238: LD_INT 118
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: PUSH
21253: EMPTY
21254: LIST
21255: LIST
21256: ST_TO_ADDR
21257: GO 23780
21259: LD_INT 7
21261: DOUBLE
21262: EQUAL
21263: IFTRUE 21267
21265: GO 21379
21267: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21268: LD_ADDR_VAR 0 2
21272: PUSH
21273: LD_INT 2
21275: PUSH
21276: LD_INT 4
21278: PUSH
21279: LD_INT 5
21281: PUSH
21282: LD_INT 7
21284: PUSH
21285: LD_INT 11
21287: PUSH
21288: LD_INT 12
21290: PUSH
21291: LD_INT 15
21293: PUSH
21294: LD_INT 16
21296: PUSH
21297: LD_INT 20
21299: PUSH
21300: LD_INT 21
21302: PUSH
21303: LD_INT 22
21305: PUSH
21306: LD_INT 23
21308: PUSH
21309: LD_INT 25
21311: PUSH
21312: LD_INT 26
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: PUSH
21331: LD_INT 101
21333: PUSH
21334: LD_INT 102
21336: PUSH
21337: LD_INT 103
21339: PUSH
21340: LD_INT 105
21342: PUSH
21343: LD_INT 106
21345: PUSH
21346: LD_INT 108
21348: PUSH
21349: LD_INT 112
21351: PUSH
21352: LD_INT 116
21354: PUSH
21355: LD_INT 117
21357: PUSH
21358: LD_INT 118
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: ST_TO_ADDR
21377: GO 23780
21379: LD_INT 8
21381: DOUBLE
21382: EQUAL
21383: IFTRUE 21387
21385: GO 21527
21387: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21388: LD_ADDR_VAR 0 2
21392: PUSH
21393: LD_INT 2
21395: PUSH
21396: LD_INT 4
21398: PUSH
21399: LD_INT 5
21401: PUSH
21402: LD_INT 6
21404: PUSH
21405: LD_INT 7
21407: PUSH
21408: LD_INT 8
21410: PUSH
21411: LD_INT 11
21413: PUSH
21414: LD_INT 12
21416: PUSH
21417: LD_INT 15
21419: PUSH
21420: LD_INT 16
21422: PUSH
21423: LD_INT 20
21425: PUSH
21426: LD_INT 21
21428: PUSH
21429: LD_INT 22
21431: PUSH
21432: LD_INT 23
21434: PUSH
21435: LD_INT 25
21437: PUSH
21438: LD_INT 26
21440: PUSH
21441: LD_INT 30
21443: PUSH
21444: LD_INT 31
21446: PUSH
21447: LD_INT 32
21449: PUSH
21450: LD_INT 36
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: PUSH
21475: LD_INT 101
21477: PUSH
21478: LD_INT 102
21480: PUSH
21481: LD_INT 103
21483: PUSH
21484: LD_INT 105
21486: PUSH
21487: LD_INT 106
21489: PUSH
21490: LD_INT 108
21492: PUSH
21493: LD_INT 109
21495: PUSH
21496: LD_INT 112
21498: PUSH
21499: LD_INT 116
21501: PUSH
21502: LD_INT 117
21504: PUSH
21505: LD_INT 118
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: ST_TO_ADDR
21525: GO 23780
21527: LD_INT 9
21529: DOUBLE
21530: EQUAL
21531: IFTRUE 21535
21533: GO 21683
21535: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21536: LD_ADDR_VAR 0 2
21540: PUSH
21541: LD_INT 2
21543: PUSH
21544: LD_INT 4
21546: PUSH
21547: LD_INT 5
21549: PUSH
21550: LD_INT 6
21552: PUSH
21553: LD_INT 7
21555: PUSH
21556: LD_INT 8
21558: PUSH
21559: LD_INT 11
21561: PUSH
21562: LD_INT 12
21564: PUSH
21565: LD_INT 15
21567: PUSH
21568: LD_INT 16
21570: PUSH
21571: LD_INT 20
21573: PUSH
21574: LD_INT 21
21576: PUSH
21577: LD_INT 22
21579: PUSH
21580: LD_INT 23
21582: PUSH
21583: LD_INT 25
21585: PUSH
21586: LD_INT 26
21588: PUSH
21589: LD_INT 28
21591: PUSH
21592: LD_INT 30
21594: PUSH
21595: LD_INT 31
21597: PUSH
21598: LD_INT 32
21600: PUSH
21601: LD_INT 36
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: PUSH
21627: LD_INT 101
21629: PUSH
21630: LD_INT 102
21632: PUSH
21633: LD_INT 103
21635: PUSH
21636: LD_INT 105
21638: PUSH
21639: LD_INT 106
21641: PUSH
21642: LD_INT 108
21644: PUSH
21645: LD_INT 109
21647: PUSH
21648: LD_INT 112
21650: PUSH
21651: LD_INT 114
21653: PUSH
21654: LD_INT 116
21656: PUSH
21657: LD_INT 117
21659: PUSH
21660: LD_INT 118
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: PUSH
21677: EMPTY
21678: LIST
21679: LIST
21680: ST_TO_ADDR
21681: GO 23780
21683: LD_INT 10
21685: DOUBLE
21686: EQUAL
21687: IFTRUE 21691
21689: GO 21887
21691: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21692: LD_ADDR_VAR 0 2
21696: PUSH
21697: LD_INT 2
21699: PUSH
21700: LD_INT 4
21702: PUSH
21703: LD_INT 5
21705: PUSH
21706: LD_INT 6
21708: PUSH
21709: LD_INT 7
21711: PUSH
21712: LD_INT 8
21714: PUSH
21715: LD_INT 9
21717: PUSH
21718: LD_INT 10
21720: PUSH
21721: LD_INT 11
21723: PUSH
21724: LD_INT 12
21726: PUSH
21727: LD_INT 13
21729: PUSH
21730: LD_INT 14
21732: PUSH
21733: LD_INT 15
21735: PUSH
21736: LD_INT 16
21738: PUSH
21739: LD_INT 17
21741: PUSH
21742: LD_INT 18
21744: PUSH
21745: LD_INT 19
21747: PUSH
21748: LD_INT 20
21750: PUSH
21751: LD_INT 21
21753: PUSH
21754: LD_INT 22
21756: PUSH
21757: LD_INT 23
21759: PUSH
21760: LD_INT 24
21762: PUSH
21763: LD_INT 25
21765: PUSH
21766: LD_INT 26
21768: PUSH
21769: LD_INT 28
21771: PUSH
21772: LD_INT 30
21774: PUSH
21775: LD_INT 31
21777: PUSH
21778: LD_INT 32
21780: PUSH
21781: LD_INT 36
21783: PUSH
21784: EMPTY
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 101
21817: PUSH
21818: LD_INT 102
21820: PUSH
21821: LD_INT 103
21823: PUSH
21824: LD_INT 104
21826: PUSH
21827: LD_INT 105
21829: PUSH
21830: LD_INT 106
21832: PUSH
21833: LD_INT 107
21835: PUSH
21836: LD_INT 108
21838: PUSH
21839: LD_INT 109
21841: PUSH
21842: LD_INT 110
21844: PUSH
21845: LD_INT 111
21847: PUSH
21848: LD_INT 112
21850: PUSH
21851: LD_INT 114
21853: PUSH
21854: LD_INT 116
21856: PUSH
21857: LD_INT 117
21859: PUSH
21860: LD_INT 118
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: ST_TO_ADDR
21885: GO 23780
21887: LD_INT 11
21889: DOUBLE
21890: EQUAL
21891: IFTRUE 21895
21893: GO 22099
21895: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21896: LD_ADDR_VAR 0 2
21900: PUSH
21901: LD_INT 2
21903: PUSH
21904: LD_INT 3
21906: PUSH
21907: LD_INT 4
21909: PUSH
21910: LD_INT 5
21912: PUSH
21913: LD_INT 6
21915: PUSH
21916: LD_INT 7
21918: PUSH
21919: LD_INT 8
21921: PUSH
21922: LD_INT 9
21924: PUSH
21925: LD_INT 10
21927: PUSH
21928: LD_INT 11
21930: PUSH
21931: LD_INT 12
21933: PUSH
21934: LD_INT 13
21936: PUSH
21937: LD_INT 14
21939: PUSH
21940: LD_INT 15
21942: PUSH
21943: LD_INT 16
21945: PUSH
21946: LD_INT 17
21948: PUSH
21949: LD_INT 18
21951: PUSH
21952: LD_INT 19
21954: PUSH
21955: LD_INT 20
21957: PUSH
21958: LD_INT 21
21960: PUSH
21961: LD_INT 22
21963: PUSH
21964: LD_INT 23
21966: PUSH
21967: LD_INT 24
21969: PUSH
21970: LD_INT 25
21972: PUSH
21973: LD_INT 26
21975: PUSH
21976: LD_INT 28
21978: PUSH
21979: LD_INT 30
21981: PUSH
21982: LD_INT 31
21984: PUSH
21985: LD_INT 32
21987: PUSH
21988: LD_INT 34
21990: PUSH
21991: LD_INT 36
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: PUSH
22027: LD_INT 101
22029: PUSH
22030: LD_INT 102
22032: PUSH
22033: LD_INT 103
22035: PUSH
22036: LD_INT 104
22038: PUSH
22039: LD_INT 105
22041: PUSH
22042: LD_INT 106
22044: PUSH
22045: LD_INT 107
22047: PUSH
22048: LD_INT 108
22050: PUSH
22051: LD_INT 109
22053: PUSH
22054: LD_INT 110
22056: PUSH
22057: LD_INT 111
22059: PUSH
22060: LD_INT 112
22062: PUSH
22063: LD_INT 114
22065: PUSH
22066: LD_INT 116
22068: PUSH
22069: LD_INT 117
22071: PUSH
22072: LD_INT 118
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: ST_TO_ADDR
22097: GO 23780
22099: LD_INT 12
22101: DOUBLE
22102: EQUAL
22103: IFTRUE 22107
22105: GO 22327
22107: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22108: LD_ADDR_VAR 0 2
22112: PUSH
22113: LD_INT 1
22115: PUSH
22116: LD_INT 2
22118: PUSH
22119: LD_INT 3
22121: PUSH
22122: LD_INT 4
22124: PUSH
22125: LD_INT 5
22127: PUSH
22128: LD_INT 6
22130: PUSH
22131: LD_INT 7
22133: PUSH
22134: LD_INT 8
22136: PUSH
22137: LD_INT 9
22139: PUSH
22140: LD_INT 10
22142: PUSH
22143: LD_INT 11
22145: PUSH
22146: LD_INT 12
22148: PUSH
22149: LD_INT 13
22151: PUSH
22152: LD_INT 14
22154: PUSH
22155: LD_INT 15
22157: PUSH
22158: LD_INT 16
22160: PUSH
22161: LD_INT 17
22163: PUSH
22164: LD_INT 18
22166: PUSH
22167: LD_INT 19
22169: PUSH
22170: LD_INT 20
22172: PUSH
22173: LD_INT 21
22175: PUSH
22176: LD_INT 22
22178: PUSH
22179: LD_INT 23
22181: PUSH
22182: LD_INT 24
22184: PUSH
22185: LD_INT 25
22187: PUSH
22188: LD_INT 26
22190: PUSH
22191: LD_INT 27
22193: PUSH
22194: LD_INT 28
22196: PUSH
22197: LD_INT 30
22199: PUSH
22200: LD_INT 31
22202: PUSH
22203: LD_INT 32
22205: PUSH
22206: LD_INT 33
22208: PUSH
22209: LD_INT 34
22211: PUSH
22212: LD_INT 36
22214: PUSH
22215: EMPTY
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: PUSH
22251: LD_INT 101
22253: PUSH
22254: LD_INT 102
22256: PUSH
22257: LD_INT 103
22259: PUSH
22260: LD_INT 104
22262: PUSH
22263: LD_INT 105
22265: PUSH
22266: LD_INT 106
22268: PUSH
22269: LD_INT 107
22271: PUSH
22272: LD_INT 108
22274: PUSH
22275: LD_INT 109
22277: PUSH
22278: LD_INT 110
22280: PUSH
22281: LD_INT 111
22283: PUSH
22284: LD_INT 112
22286: PUSH
22287: LD_INT 113
22289: PUSH
22290: LD_INT 114
22292: PUSH
22293: LD_INT 116
22295: PUSH
22296: LD_INT 117
22298: PUSH
22299: LD_INT 118
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: ST_TO_ADDR
22325: GO 23780
22327: LD_INT 13
22329: DOUBLE
22330: EQUAL
22331: IFTRUE 22335
22333: GO 22543
22335: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22336: LD_ADDR_VAR 0 2
22340: PUSH
22341: LD_INT 1
22343: PUSH
22344: LD_INT 2
22346: PUSH
22347: LD_INT 3
22349: PUSH
22350: LD_INT 4
22352: PUSH
22353: LD_INT 5
22355: PUSH
22356: LD_INT 8
22358: PUSH
22359: LD_INT 9
22361: PUSH
22362: LD_INT 10
22364: PUSH
22365: LD_INT 11
22367: PUSH
22368: LD_INT 12
22370: PUSH
22371: LD_INT 14
22373: PUSH
22374: LD_INT 15
22376: PUSH
22377: LD_INT 16
22379: PUSH
22380: LD_INT 17
22382: PUSH
22383: LD_INT 18
22385: PUSH
22386: LD_INT 19
22388: PUSH
22389: LD_INT 20
22391: PUSH
22392: LD_INT 21
22394: PUSH
22395: LD_INT 22
22397: PUSH
22398: LD_INT 23
22400: PUSH
22401: LD_INT 24
22403: PUSH
22404: LD_INT 25
22406: PUSH
22407: LD_INT 26
22409: PUSH
22410: LD_INT 27
22412: PUSH
22413: LD_INT 28
22415: PUSH
22416: LD_INT 30
22418: PUSH
22419: LD_INT 31
22421: PUSH
22422: LD_INT 32
22424: PUSH
22425: LD_INT 33
22427: PUSH
22428: LD_INT 34
22430: PUSH
22431: LD_INT 36
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: PUSH
22467: LD_INT 101
22469: PUSH
22470: LD_INT 102
22472: PUSH
22473: LD_INT 103
22475: PUSH
22476: LD_INT 104
22478: PUSH
22479: LD_INT 105
22481: PUSH
22482: LD_INT 106
22484: PUSH
22485: LD_INT 107
22487: PUSH
22488: LD_INT 108
22490: PUSH
22491: LD_INT 109
22493: PUSH
22494: LD_INT 110
22496: PUSH
22497: LD_INT 111
22499: PUSH
22500: LD_INT 112
22502: PUSH
22503: LD_INT 113
22505: PUSH
22506: LD_INT 114
22508: PUSH
22509: LD_INT 116
22511: PUSH
22512: LD_INT 117
22514: PUSH
22515: LD_INT 118
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: ST_TO_ADDR
22541: GO 23780
22543: LD_INT 14
22545: DOUBLE
22546: EQUAL
22547: IFTRUE 22551
22549: GO 22775
22551: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22552: LD_ADDR_VAR 0 2
22556: PUSH
22557: LD_INT 1
22559: PUSH
22560: LD_INT 2
22562: PUSH
22563: LD_INT 3
22565: PUSH
22566: LD_INT 4
22568: PUSH
22569: LD_INT 5
22571: PUSH
22572: LD_INT 6
22574: PUSH
22575: LD_INT 7
22577: PUSH
22578: LD_INT 8
22580: PUSH
22581: LD_INT 9
22583: PUSH
22584: LD_INT 10
22586: PUSH
22587: LD_INT 11
22589: PUSH
22590: LD_INT 12
22592: PUSH
22593: LD_INT 13
22595: PUSH
22596: LD_INT 14
22598: PUSH
22599: LD_INT 15
22601: PUSH
22602: LD_INT 16
22604: PUSH
22605: LD_INT 17
22607: PUSH
22608: LD_INT 18
22610: PUSH
22611: LD_INT 19
22613: PUSH
22614: LD_INT 20
22616: PUSH
22617: LD_INT 21
22619: PUSH
22620: LD_INT 22
22622: PUSH
22623: LD_INT 23
22625: PUSH
22626: LD_INT 24
22628: PUSH
22629: LD_INT 25
22631: PUSH
22632: LD_INT 26
22634: PUSH
22635: LD_INT 27
22637: PUSH
22638: LD_INT 28
22640: PUSH
22641: LD_INT 29
22643: PUSH
22644: LD_INT 30
22646: PUSH
22647: LD_INT 31
22649: PUSH
22650: LD_INT 32
22652: PUSH
22653: LD_INT 33
22655: PUSH
22656: LD_INT 34
22658: PUSH
22659: LD_INT 36
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: PUSH
22699: LD_INT 101
22701: PUSH
22702: LD_INT 102
22704: PUSH
22705: LD_INT 103
22707: PUSH
22708: LD_INT 104
22710: PUSH
22711: LD_INT 105
22713: PUSH
22714: LD_INT 106
22716: PUSH
22717: LD_INT 107
22719: PUSH
22720: LD_INT 108
22722: PUSH
22723: LD_INT 109
22725: PUSH
22726: LD_INT 110
22728: PUSH
22729: LD_INT 111
22731: PUSH
22732: LD_INT 112
22734: PUSH
22735: LD_INT 113
22737: PUSH
22738: LD_INT 114
22740: PUSH
22741: LD_INT 116
22743: PUSH
22744: LD_INT 117
22746: PUSH
22747: LD_INT 118
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: ST_TO_ADDR
22773: GO 23780
22775: LD_INT 15
22777: DOUBLE
22778: EQUAL
22779: IFTRUE 22783
22781: GO 23007
22783: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22784: LD_ADDR_VAR 0 2
22788: PUSH
22789: LD_INT 1
22791: PUSH
22792: LD_INT 2
22794: PUSH
22795: LD_INT 3
22797: PUSH
22798: LD_INT 4
22800: PUSH
22801: LD_INT 5
22803: PUSH
22804: LD_INT 6
22806: PUSH
22807: LD_INT 7
22809: PUSH
22810: LD_INT 8
22812: PUSH
22813: LD_INT 9
22815: PUSH
22816: LD_INT 10
22818: PUSH
22819: LD_INT 11
22821: PUSH
22822: LD_INT 12
22824: PUSH
22825: LD_INT 13
22827: PUSH
22828: LD_INT 14
22830: PUSH
22831: LD_INT 15
22833: PUSH
22834: LD_INT 16
22836: PUSH
22837: LD_INT 17
22839: PUSH
22840: LD_INT 18
22842: PUSH
22843: LD_INT 19
22845: PUSH
22846: LD_INT 20
22848: PUSH
22849: LD_INT 21
22851: PUSH
22852: LD_INT 22
22854: PUSH
22855: LD_INT 23
22857: PUSH
22858: LD_INT 24
22860: PUSH
22861: LD_INT 25
22863: PUSH
22864: LD_INT 26
22866: PUSH
22867: LD_INT 27
22869: PUSH
22870: LD_INT 28
22872: PUSH
22873: LD_INT 29
22875: PUSH
22876: LD_INT 30
22878: PUSH
22879: LD_INT 31
22881: PUSH
22882: LD_INT 32
22884: PUSH
22885: LD_INT 33
22887: PUSH
22888: LD_INT 34
22890: PUSH
22891: LD_INT 36
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: PUSH
22931: LD_INT 101
22933: PUSH
22934: LD_INT 102
22936: PUSH
22937: LD_INT 103
22939: PUSH
22940: LD_INT 104
22942: PUSH
22943: LD_INT 105
22945: PUSH
22946: LD_INT 106
22948: PUSH
22949: LD_INT 107
22951: PUSH
22952: LD_INT 108
22954: PUSH
22955: LD_INT 109
22957: PUSH
22958: LD_INT 110
22960: PUSH
22961: LD_INT 111
22963: PUSH
22964: LD_INT 112
22966: PUSH
22967: LD_INT 113
22969: PUSH
22970: LD_INT 114
22972: PUSH
22973: LD_INT 116
22975: PUSH
22976: LD_INT 117
22978: PUSH
22979: LD_INT 118
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: ST_TO_ADDR
23005: GO 23780
23007: LD_INT 16
23009: DOUBLE
23010: EQUAL
23011: IFTRUE 23015
23013: GO 23151
23015: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23016: LD_ADDR_VAR 0 2
23020: PUSH
23021: LD_INT 2
23023: PUSH
23024: LD_INT 4
23026: PUSH
23027: LD_INT 5
23029: PUSH
23030: LD_INT 7
23032: PUSH
23033: LD_INT 11
23035: PUSH
23036: LD_INT 12
23038: PUSH
23039: LD_INT 15
23041: PUSH
23042: LD_INT 16
23044: PUSH
23045: LD_INT 20
23047: PUSH
23048: LD_INT 21
23050: PUSH
23051: LD_INT 22
23053: PUSH
23054: LD_INT 23
23056: PUSH
23057: LD_INT 25
23059: PUSH
23060: LD_INT 26
23062: PUSH
23063: LD_INT 30
23065: PUSH
23066: LD_INT 31
23068: PUSH
23069: LD_INT 32
23071: PUSH
23072: LD_INT 33
23074: PUSH
23075: LD_INT 34
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: PUSH
23099: LD_INT 101
23101: PUSH
23102: LD_INT 102
23104: PUSH
23105: LD_INT 103
23107: PUSH
23108: LD_INT 106
23110: PUSH
23111: LD_INT 108
23113: PUSH
23114: LD_INT 112
23116: PUSH
23117: LD_INT 113
23119: PUSH
23120: LD_INT 114
23122: PUSH
23123: LD_INT 116
23125: PUSH
23126: LD_INT 117
23128: PUSH
23129: LD_INT 118
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: PUSH
23145: EMPTY
23146: LIST
23147: LIST
23148: ST_TO_ADDR
23149: GO 23780
23151: LD_INT 17
23153: DOUBLE
23154: EQUAL
23155: IFTRUE 23159
23157: GO 23383
23159: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23160: LD_ADDR_VAR 0 2
23164: PUSH
23165: LD_INT 1
23167: PUSH
23168: LD_INT 2
23170: PUSH
23171: LD_INT 3
23173: PUSH
23174: LD_INT 4
23176: PUSH
23177: LD_INT 5
23179: PUSH
23180: LD_INT 6
23182: PUSH
23183: LD_INT 7
23185: PUSH
23186: LD_INT 8
23188: PUSH
23189: LD_INT 9
23191: PUSH
23192: LD_INT 10
23194: PUSH
23195: LD_INT 11
23197: PUSH
23198: LD_INT 12
23200: PUSH
23201: LD_INT 13
23203: PUSH
23204: LD_INT 14
23206: PUSH
23207: LD_INT 15
23209: PUSH
23210: LD_INT 16
23212: PUSH
23213: LD_INT 17
23215: PUSH
23216: LD_INT 18
23218: PUSH
23219: LD_INT 19
23221: PUSH
23222: LD_INT 20
23224: PUSH
23225: LD_INT 21
23227: PUSH
23228: LD_INT 22
23230: PUSH
23231: LD_INT 23
23233: PUSH
23234: LD_INT 24
23236: PUSH
23237: LD_INT 25
23239: PUSH
23240: LD_INT 26
23242: PUSH
23243: LD_INT 27
23245: PUSH
23246: LD_INT 28
23248: PUSH
23249: LD_INT 29
23251: PUSH
23252: LD_INT 30
23254: PUSH
23255: LD_INT 31
23257: PUSH
23258: LD_INT 32
23260: PUSH
23261: LD_INT 33
23263: PUSH
23264: LD_INT 34
23266: PUSH
23267: LD_INT 36
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: PUSH
23307: LD_INT 101
23309: PUSH
23310: LD_INT 102
23312: PUSH
23313: LD_INT 103
23315: PUSH
23316: LD_INT 104
23318: PUSH
23319: LD_INT 105
23321: PUSH
23322: LD_INT 106
23324: PUSH
23325: LD_INT 107
23327: PUSH
23328: LD_INT 108
23330: PUSH
23331: LD_INT 109
23333: PUSH
23334: LD_INT 110
23336: PUSH
23337: LD_INT 111
23339: PUSH
23340: LD_INT 112
23342: PUSH
23343: LD_INT 113
23345: PUSH
23346: LD_INT 114
23348: PUSH
23349: LD_INT 116
23351: PUSH
23352: LD_INT 117
23354: PUSH
23355: LD_INT 118
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: ST_TO_ADDR
23381: GO 23780
23383: LD_INT 18
23385: DOUBLE
23386: EQUAL
23387: IFTRUE 23391
23389: GO 23539
23391: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23392: LD_ADDR_VAR 0 2
23396: PUSH
23397: LD_INT 2
23399: PUSH
23400: LD_INT 4
23402: PUSH
23403: LD_INT 5
23405: PUSH
23406: LD_INT 7
23408: PUSH
23409: LD_INT 11
23411: PUSH
23412: LD_INT 12
23414: PUSH
23415: LD_INT 15
23417: PUSH
23418: LD_INT 16
23420: PUSH
23421: LD_INT 20
23423: PUSH
23424: LD_INT 21
23426: PUSH
23427: LD_INT 22
23429: PUSH
23430: LD_INT 23
23432: PUSH
23433: LD_INT 25
23435: PUSH
23436: LD_INT 26
23438: PUSH
23439: LD_INT 30
23441: PUSH
23442: LD_INT 31
23444: PUSH
23445: LD_INT 32
23447: PUSH
23448: LD_INT 33
23450: PUSH
23451: LD_INT 34
23453: PUSH
23454: LD_INT 35
23456: PUSH
23457: LD_INT 36
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: PUSH
23483: LD_INT 101
23485: PUSH
23486: LD_INT 102
23488: PUSH
23489: LD_INT 103
23491: PUSH
23492: LD_INT 106
23494: PUSH
23495: LD_INT 108
23497: PUSH
23498: LD_INT 112
23500: PUSH
23501: LD_INT 113
23503: PUSH
23504: LD_INT 114
23506: PUSH
23507: LD_INT 115
23509: PUSH
23510: LD_INT 116
23512: PUSH
23513: LD_INT 117
23515: PUSH
23516: LD_INT 118
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: PUSH
23533: EMPTY
23534: LIST
23535: LIST
23536: ST_TO_ADDR
23537: GO 23780
23539: LD_INT 19
23541: DOUBLE
23542: EQUAL
23543: IFTRUE 23547
23545: GO 23779
23547: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23548: LD_ADDR_VAR 0 2
23552: PUSH
23553: LD_INT 1
23555: PUSH
23556: LD_INT 2
23558: PUSH
23559: LD_INT 3
23561: PUSH
23562: LD_INT 4
23564: PUSH
23565: LD_INT 5
23567: PUSH
23568: LD_INT 6
23570: PUSH
23571: LD_INT 7
23573: PUSH
23574: LD_INT 8
23576: PUSH
23577: LD_INT 9
23579: PUSH
23580: LD_INT 10
23582: PUSH
23583: LD_INT 11
23585: PUSH
23586: LD_INT 12
23588: PUSH
23589: LD_INT 13
23591: PUSH
23592: LD_INT 14
23594: PUSH
23595: LD_INT 15
23597: PUSH
23598: LD_INT 16
23600: PUSH
23601: LD_INT 17
23603: PUSH
23604: LD_INT 18
23606: PUSH
23607: LD_INT 19
23609: PUSH
23610: LD_INT 20
23612: PUSH
23613: LD_INT 21
23615: PUSH
23616: LD_INT 22
23618: PUSH
23619: LD_INT 23
23621: PUSH
23622: LD_INT 24
23624: PUSH
23625: LD_INT 25
23627: PUSH
23628: LD_INT 26
23630: PUSH
23631: LD_INT 27
23633: PUSH
23634: LD_INT 28
23636: PUSH
23637: LD_INT 29
23639: PUSH
23640: LD_INT 30
23642: PUSH
23643: LD_INT 31
23645: PUSH
23646: LD_INT 32
23648: PUSH
23649: LD_INT 33
23651: PUSH
23652: LD_INT 34
23654: PUSH
23655: LD_INT 35
23657: PUSH
23658: LD_INT 36
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: PUSH
23699: LD_INT 101
23701: PUSH
23702: LD_INT 102
23704: PUSH
23705: LD_INT 103
23707: PUSH
23708: LD_INT 104
23710: PUSH
23711: LD_INT 105
23713: PUSH
23714: LD_INT 106
23716: PUSH
23717: LD_INT 107
23719: PUSH
23720: LD_INT 108
23722: PUSH
23723: LD_INT 109
23725: PUSH
23726: LD_INT 110
23728: PUSH
23729: LD_INT 111
23731: PUSH
23732: LD_INT 112
23734: PUSH
23735: LD_INT 113
23737: PUSH
23738: LD_INT 114
23740: PUSH
23741: LD_INT 115
23743: PUSH
23744: LD_INT 116
23746: PUSH
23747: LD_INT 117
23749: PUSH
23750: LD_INT 118
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: PUSH
23773: EMPTY
23774: LIST
23775: LIST
23776: ST_TO_ADDR
23777: GO 23780
23779: POP
// end else
23780: GO 24011
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23782: LD_ADDR_VAR 0 2
23786: PUSH
23787: LD_INT 1
23789: PUSH
23790: LD_INT 2
23792: PUSH
23793: LD_INT 3
23795: PUSH
23796: LD_INT 4
23798: PUSH
23799: LD_INT 5
23801: PUSH
23802: LD_INT 6
23804: PUSH
23805: LD_INT 7
23807: PUSH
23808: LD_INT 8
23810: PUSH
23811: LD_INT 9
23813: PUSH
23814: LD_INT 10
23816: PUSH
23817: LD_INT 11
23819: PUSH
23820: LD_INT 12
23822: PUSH
23823: LD_INT 13
23825: PUSH
23826: LD_INT 14
23828: PUSH
23829: LD_INT 15
23831: PUSH
23832: LD_INT 16
23834: PUSH
23835: LD_INT 17
23837: PUSH
23838: LD_INT 18
23840: PUSH
23841: LD_INT 19
23843: PUSH
23844: LD_INT 20
23846: PUSH
23847: LD_INT 21
23849: PUSH
23850: LD_INT 22
23852: PUSH
23853: LD_INT 23
23855: PUSH
23856: LD_INT 24
23858: PUSH
23859: LD_INT 25
23861: PUSH
23862: LD_INT 26
23864: PUSH
23865: LD_INT 27
23867: PUSH
23868: LD_INT 28
23870: PUSH
23871: LD_INT 29
23873: PUSH
23874: LD_INT 30
23876: PUSH
23877: LD_INT 31
23879: PUSH
23880: LD_INT 32
23882: PUSH
23883: LD_INT 33
23885: PUSH
23886: LD_INT 34
23888: PUSH
23889: LD_INT 35
23891: PUSH
23892: LD_INT 36
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: PUSH
23933: LD_INT 101
23935: PUSH
23936: LD_INT 102
23938: PUSH
23939: LD_INT 103
23941: PUSH
23942: LD_INT 104
23944: PUSH
23945: LD_INT 105
23947: PUSH
23948: LD_INT 106
23950: PUSH
23951: LD_INT 107
23953: PUSH
23954: LD_INT 108
23956: PUSH
23957: LD_INT 109
23959: PUSH
23960: LD_INT 110
23962: PUSH
23963: LD_INT 111
23965: PUSH
23966: LD_INT 112
23968: PUSH
23969: LD_INT 113
23971: PUSH
23972: LD_INT 114
23974: PUSH
23975: LD_INT 115
23977: PUSH
23978: LD_INT 116
23980: PUSH
23981: LD_INT 117
23983: PUSH
23984: LD_INT 118
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: ST_TO_ADDR
// if result then
24011: LD_VAR 0 2
24015: IFFALSE 24801
// begin normal :=  ;
24017: LD_ADDR_VAR 0 5
24021: PUSH
24022: LD_STRING 
24024: ST_TO_ADDR
// hardcore :=  ;
24025: LD_ADDR_VAR 0 6
24029: PUSH
24030: LD_STRING 
24032: ST_TO_ADDR
// active :=  ;
24033: LD_ADDR_VAR 0 7
24037: PUSH
24038: LD_STRING 
24040: ST_TO_ADDR
// for i = 1 to normalCounter do
24041: LD_ADDR_VAR 0 8
24045: PUSH
24046: DOUBLE
24047: LD_INT 1
24049: DEC
24050: ST_TO_ADDR
24051: LD_EXP 46
24055: PUSH
24056: FOR_TO
24057: IFFALSE 24158
// begin tmp := 0 ;
24059: LD_ADDR_VAR 0 3
24063: PUSH
24064: LD_STRING 0
24066: ST_TO_ADDR
// if result [ 1 ] then
24067: LD_VAR 0 2
24071: PUSH
24072: LD_INT 1
24074: ARRAY
24075: IFFALSE 24140
// if result [ 1 ] [ 1 ] = i then
24077: LD_VAR 0 2
24081: PUSH
24082: LD_INT 1
24084: ARRAY
24085: PUSH
24086: LD_INT 1
24088: ARRAY
24089: PUSH
24090: LD_VAR 0 8
24094: EQUAL
24095: IFFALSE 24140
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24097: LD_ADDR_VAR 0 2
24101: PUSH
24102: LD_VAR 0 2
24106: PPUSH
24107: LD_INT 1
24109: PPUSH
24110: LD_VAR 0 2
24114: PUSH
24115: LD_INT 1
24117: ARRAY
24118: PPUSH
24119: LD_INT 1
24121: PPUSH
24122: CALL_OW 3
24126: PPUSH
24127: CALL_OW 1
24131: ST_TO_ADDR
// tmp := 1 ;
24132: LD_ADDR_VAR 0 3
24136: PUSH
24137: LD_STRING 1
24139: ST_TO_ADDR
// end ; normal := normal & tmp ;
24140: LD_ADDR_VAR 0 5
24144: PUSH
24145: LD_VAR 0 5
24149: PUSH
24150: LD_VAR 0 3
24154: STR
24155: ST_TO_ADDR
// end ;
24156: GO 24056
24158: POP
24159: POP
// for i = 1 to hardcoreCounter do
24160: LD_ADDR_VAR 0 8
24164: PUSH
24165: DOUBLE
24166: LD_INT 1
24168: DEC
24169: ST_TO_ADDR
24170: LD_EXP 47
24174: PUSH
24175: FOR_TO
24176: IFFALSE 24281
// begin tmp := 0 ;
24178: LD_ADDR_VAR 0 3
24182: PUSH
24183: LD_STRING 0
24185: ST_TO_ADDR
// if result [ 2 ] then
24186: LD_VAR 0 2
24190: PUSH
24191: LD_INT 2
24193: ARRAY
24194: IFFALSE 24263
// if result [ 2 ] [ 1 ] = 100 + i then
24196: LD_VAR 0 2
24200: PUSH
24201: LD_INT 2
24203: ARRAY
24204: PUSH
24205: LD_INT 1
24207: ARRAY
24208: PUSH
24209: LD_INT 100
24211: PUSH
24212: LD_VAR 0 8
24216: PLUS
24217: EQUAL
24218: IFFALSE 24263
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24220: LD_ADDR_VAR 0 2
24224: PUSH
24225: LD_VAR 0 2
24229: PPUSH
24230: LD_INT 2
24232: PPUSH
24233: LD_VAR 0 2
24237: PUSH
24238: LD_INT 2
24240: ARRAY
24241: PPUSH
24242: LD_INT 1
24244: PPUSH
24245: CALL_OW 3
24249: PPUSH
24250: CALL_OW 1
24254: ST_TO_ADDR
// tmp := 1 ;
24255: LD_ADDR_VAR 0 3
24259: PUSH
24260: LD_STRING 1
24262: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24263: LD_ADDR_VAR 0 6
24267: PUSH
24268: LD_VAR 0 6
24272: PUSH
24273: LD_VAR 0 3
24277: STR
24278: ST_TO_ADDR
// end ;
24279: GO 24175
24281: POP
24282: POP
// if isGameLoad then
24283: LD_VAR 0 1
24287: IFFALSE 24762
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24289: LD_ADDR_VAR 0 4
24293: PUSH
24294: LD_EXP 50
24298: PUSH
24299: LD_EXP 49
24303: PUSH
24304: LD_EXP 51
24308: PUSH
24309: LD_EXP 48
24313: PUSH
24314: LD_EXP 52
24318: PUSH
24319: LD_EXP 53
24323: PUSH
24324: LD_EXP 54
24328: PUSH
24329: LD_EXP 55
24333: PUSH
24334: LD_EXP 56
24338: PUSH
24339: LD_EXP 57
24343: PUSH
24344: LD_EXP 58
24348: PUSH
24349: LD_EXP 59
24353: PUSH
24354: LD_EXP 60
24358: PUSH
24359: LD_EXP 61
24363: PUSH
24364: LD_EXP 69
24368: PUSH
24369: LD_EXP 70
24373: PUSH
24374: LD_EXP 71
24378: PUSH
24379: LD_EXP 72
24383: PUSH
24384: LD_EXP 74
24388: PUSH
24389: LD_EXP 75
24393: PUSH
24394: LD_EXP 76
24398: PUSH
24399: LD_EXP 79
24403: PUSH
24404: LD_EXP 81
24408: PUSH
24409: LD_EXP 82
24413: PUSH
24414: LD_EXP 83
24418: PUSH
24419: LD_EXP 85
24423: PUSH
24424: LD_EXP 86
24428: PUSH
24429: LD_EXP 89
24433: PUSH
24434: LD_EXP 90
24438: PUSH
24439: LD_EXP 91
24443: PUSH
24444: LD_EXP 92
24448: PUSH
24449: LD_EXP 93
24453: PUSH
24454: LD_EXP 94
24458: PUSH
24459: LD_EXP 95
24463: PUSH
24464: LD_EXP 96
24468: PUSH
24469: LD_EXP 97
24473: PUSH
24474: LD_EXP 62
24478: PUSH
24479: LD_EXP 63
24483: PUSH
24484: LD_EXP 66
24488: PUSH
24489: LD_EXP 67
24493: PUSH
24494: LD_EXP 68
24498: PUSH
24499: LD_EXP 64
24503: PUSH
24504: LD_EXP 65
24508: PUSH
24509: LD_EXP 73
24513: PUSH
24514: LD_EXP 77
24518: PUSH
24519: LD_EXP 78
24523: PUSH
24524: LD_EXP 80
24528: PUSH
24529: LD_EXP 84
24533: PUSH
24534: LD_EXP 87
24538: PUSH
24539: LD_EXP 88
24543: PUSH
24544: LD_EXP 98
24548: PUSH
24549: LD_EXP 99
24553: PUSH
24554: LD_EXP 100
24558: PUSH
24559: LD_EXP 101
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: ST_TO_ADDR
// tmp :=  ;
24620: LD_ADDR_VAR 0 3
24624: PUSH
24625: LD_STRING 
24627: ST_TO_ADDR
// for i = 1 to normalCounter do
24628: LD_ADDR_VAR 0 8
24632: PUSH
24633: DOUBLE
24634: LD_INT 1
24636: DEC
24637: ST_TO_ADDR
24638: LD_EXP 46
24642: PUSH
24643: FOR_TO
24644: IFFALSE 24680
// begin if flags [ i ] then
24646: LD_VAR 0 4
24650: PUSH
24651: LD_VAR 0 8
24655: ARRAY
24656: IFFALSE 24678
// tmp := tmp & i & ; ;
24658: LD_ADDR_VAR 0 3
24662: PUSH
24663: LD_VAR 0 3
24667: PUSH
24668: LD_VAR 0 8
24672: STR
24673: PUSH
24674: LD_STRING ;
24676: STR
24677: ST_TO_ADDR
// end ;
24678: GO 24643
24680: POP
24681: POP
// for i = 1 to hardcoreCounter do
24682: LD_ADDR_VAR 0 8
24686: PUSH
24687: DOUBLE
24688: LD_INT 1
24690: DEC
24691: ST_TO_ADDR
24692: LD_EXP 47
24696: PUSH
24697: FOR_TO
24698: IFFALSE 24744
// begin if flags [ normalCounter + i ] then
24700: LD_VAR 0 4
24704: PUSH
24705: LD_EXP 46
24709: PUSH
24710: LD_VAR 0 8
24714: PLUS
24715: ARRAY
24716: IFFALSE 24742
// tmp := tmp & ( 100 + i ) & ; ;
24718: LD_ADDR_VAR 0 3
24722: PUSH
24723: LD_VAR 0 3
24727: PUSH
24728: LD_INT 100
24730: PUSH
24731: LD_VAR 0 8
24735: PLUS
24736: STR
24737: PUSH
24738: LD_STRING ;
24740: STR
24741: ST_TO_ADDR
// end ;
24742: GO 24697
24744: POP
24745: POP
// if tmp then
24746: LD_VAR 0 3
24750: IFFALSE 24762
// active := tmp ;
24752: LD_ADDR_VAR 0 7
24756: PUSH
24757: LD_VAR 0 3
24761: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24762: LD_STRING getStreamItemsFromMission("
24764: PUSH
24765: LD_VAR 0 5
24769: STR
24770: PUSH
24771: LD_STRING ","
24773: STR
24774: PUSH
24775: LD_VAR 0 6
24779: STR
24780: PUSH
24781: LD_STRING ","
24783: STR
24784: PUSH
24785: LD_VAR 0 7
24789: STR
24790: PUSH
24791: LD_STRING ")
24793: STR
24794: PPUSH
24795: CALL_OW 559
// end else
24799: GO 24808
// ToLua ( getStreamItemsFromMission("","","") ) ;
24801: LD_STRING getStreamItemsFromMission("","","")
24803: PPUSH
24804: CALL_OW 559
// end ;
24808: LD_VAR 0 2
24812: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24813: LD_EXP 45
24817: PUSH
24818: LD_EXP 50
24822: AND
24823: IFFALSE 24947
24825: GO 24827
24827: DISABLE
24828: LD_INT 0
24830: PPUSH
24831: PPUSH
// begin enable ;
24832: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24833: LD_ADDR_VAR 0 2
24837: PUSH
24838: LD_INT 22
24840: PUSH
24841: LD_OWVAR 2
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: LD_INT 2
24852: PUSH
24853: LD_INT 34
24855: PUSH
24856: LD_INT 7
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: LD_INT 34
24865: PUSH
24866: LD_INT 45
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: PUSH
24873: LD_INT 34
24875: PUSH
24876: LD_INT 28
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: PUSH
24883: LD_INT 34
24885: PUSH
24886: LD_INT 47
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: PPUSH
24904: CALL_OW 69
24908: ST_TO_ADDR
// if not tmp then
24909: LD_VAR 0 2
24913: NOT
24914: IFFALSE 24918
// exit ;
24916: GO 24947
// for i in tmp do
24918: LD_ADDR_VAR 0 1
24922: PUSH
24923: LD_VAR 0 2
24927: PUSH
24928: FOR_IN
24929: IFFALSE 24945
// begin SetLives ( i , 0 ) ;
24931: LD_VAR 0 1
24935: PPUSH
24936: LD_INT 0
24938: PPUSH
24939: CALL_OW 234
// end ;
24943: GO 24928
24945: POP
24946: POP
// end ;
24947: PPOPN 2
24949: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24950: LD_EXP 45
24954: PUSH
24955: LD_EXP 51
24959: AND
24960: IFFALSE 25044
24962: GO 24964
24964: DISABLE
24965: LD_INT 0
24967: PPUSH
24968: PPUSH
// begin enable ;
24969: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24970: LD_ADDR_VAR 0 2
24974: PUSH
24975: LD_INT 22
24977: PUSH
24978: LD_OWVAR 2
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PUSH
24987: LD_INT 32
24989: PUSH
24990: LD_INT 3
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PPUSH
25001: CALL_OW 69
25005: ST_TO_ADDR
// if not tmp then
25006: LD_VAR 0 2
25010: NOT
25011: IFFALSE 25015
// exit ;
25013: GO 25044
// for i in tmp do
25015: LD_ADDR_VAR 0 1
25019: PUSH
25020: LD_VAR 0 2
25024: PUSH
25025: FOR_IN
25026: IFFALSE 25042
// begin SetLives ( i , 0 ) ;
25028: LD_VAR 0 1
25032: PPUSH
25033: LD_INT 0
25035: PPUSH
25036: CALL_OW 234
// end ;
25040: GO 25025
25042: POP
25043: POP
// end ;
25044: PPOPN 2
25046: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25047: LD_EXP 45
25051: PUSH
25052: LD_EXP 48
25056: AND
25057: IFFALSE 25150
25059: GO 25061
25061: DISABLE
25062: LD_INT 0
25064: PPUSH
// begin enable ;
25065: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25066: LD_ADDR_VAR 0 1
25070: PUSH
25071: LD_INT 22
25073: PUSH
25074: LD_OWVAR 2
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: PUSH
25083: LD_INT 2
25085: PUSH
25086: LD_INT 25
25088: PUSH
25089: LD_INT 5
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PUSH
25096: LD_INT 25
25098: PUSH
25099: LD_INT 9
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PUSH
25106: LD_INT 25
25108: PUSH
25109: LD_INT 8
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PPUSH
25126: CALL_OW 69
25130: PUSH
25131: FOR_IN
25132: IFFALSE 25148
// begin SetClass ( i , 1 ) ;
25134: LD_VAR 0 1
25138: PPUSH
25139: LD_INT 1
25141: PPUSH
25142: CALL_OW 336
// end ;
25146: GO 25131
25148: POP
25149: POP
// end ;
25150: PPOPN 1
25152: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25153: LD_EXP 45
25157: PUSH
25158: LD_EXP 49
25162: AND
25163: PUSH
25164: LD_OWVAR 65
25168: PUSH
25169: LD_INT 7
25171: LESS
25172: AND
25173: IFFALSE 25187
25175: GO 25177
25177: DISABLE
// begin enable ;
25178: ENABLE
// game_speed := 7 ;
25179: LD_ADDR_OWVAR 65
25183: PUSH
25184: LD_INT 7
25186: ST_TO_ADDR
// end ;
25187: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25188: LD_EXP 45
25192: PUSH
25193: LD_EXP 52
25197: AND
25198: IFFALSE 25400
25200: GO 25202
25202: DISABLE
25203: LD_INT 0
25205: PPUSH
25206: PPUSH
25207: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25208: LD_ADDR_VAR 0 3
25212: PUSH
25213: LD_INT 81
25215: PUSH
25216: LD_OWVAR 2
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: LD_INT 21
25227: PUSH
25228: LD_INT 1
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PPUSH
25239: CALL_OW 69
25243: ST_TO_ADDR
// if not tmp then
25244: LD_VAR 0 3
25248: NOT
25249: IFFALSE 25253
// exit ;
25251: GO 25400
// if tmp > 5 then
25253: LD_VAR 0 3
25257: PUSH
25258: LD_INT 5
25260: GREATER
25261: IFFALSE 25273
// k := 5 else
25263: LD_ADDR_VAR 0 2
25267: PUSH
25268: LD_INT 5
25270: ST_TO_ADDR
25271: GO 25283
// k := tmp ;
25273: LD_ADDR_VAR 0 2
25277: PUSH
25278: LD_VAR 0 3
25282: ST_TO_ADDR
// for i := 1 to k do
25283: LD_ADDR_VAR 0 1
25287: PUSH
25288: DOUBLE
25289: LD_INT 1
25291: DEC
25292: ST_TO_ADDR
25293: LD_VAR 0 2
25297: PUSH
25298: FOR_TO
25299: IFFALSE 25398
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25301: LD_VAR 0 3
25305: PUSH
25306: LD_VAR 0 1
25310: ARRAY
25311: PPUSH
25312: LD_VAR 0 1
25316: PUSH
25317: LD_INT 4
25319: MOD
25320: PUSH
25321: LD_INT 1
25323: PLUS
25324: PPUSH
25325: CALL_OW 259
25329: PUSH
25330: LD_INT 10
25332: LESS
25333: IFFALSE 25396
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25335: LD_VAR 0 3
25339: PUSH
25340: LD_VAR 0 1
25344: ARRAY
25345: PPUSH
25346: LD_VAR 0 1
25350: PUSH
25351: LD_INT 4
25353: MOD
25354: PUSH
25355: LD_INT 1
25357: PLUS
25358: PPUSH
25359: LD_VAR 0 3
25363: PUSH
25364: LD_VAR 0 1
25368: ARRAY
25369: PPUSH
25370: LD_VAR 0 1
25374: PUSH
25375: LD_INT 4
25377: MOD
25378: PUSH
25379: LD_INT 1
25381: PLUS
25382: PPUSH
25383: CALL_OW 259
25387: PUSH
25388: LD_INT 1
25390: PLUS
25391: PPUSH
25392: CALL_OW 237
25396: GO 25298
25398: POP
25399: POP
// end ;
25400: PPOPN 3
25402: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25403: LD_EXP 45
25407: PUSH
25408: LD_EXP 53
25412: AND
25413: IFFALSE 25433
25415: GO 25417
25417: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25418: LD_INT 4
25420: PPUSH
25421: LD_OWVAR 2
25425: PPUSH
25426: LD_INT 0
25428: PPUSH
25429: CALL_OW 324
25433: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25434: LD_EXP 45
25438: PUSH
25439: LD_EXP 82
25443: AND
25444: IFFALSE 25464
25446: GO 25448
25448: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25449: LD_INT 19
25451: PPUSH
25452: LD_OWVAR 2
25456: PPUSH
25457: LD_INT 0
25459: PPUSH
25460: CALL_OW 324
25464: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25465: LD_EXP 45
25469: PUSH
25470: LD_EXP 54
25474: AND
25475: IFFALSE 25577
25477: GO 25479
25479: DISABLE
25480: LD_INT 0
25482: PPUSH
25483: PPUSH
// begin enable ;
25484: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25485: LD_ADDR_VAR 0 2
25489: PUSH
25490: LD_INT 22
25492: PUSH
25493: LD_OWVAR 2
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: PUSH
25502: LD_INT 2
25504: PUSH
25505: LD_INT 34
25507: PUSH
25508: LD_INT 11
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: PUSH
25515: LD_INT 34
25517: PUSH
25518: LD_INT 30
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: LIST
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: PPUSH
25534: CALL_OW 69
25538: ST_TO_ADDR
// if not tmp then
25539: LD_VAR 0 2
25543: NOT
25544: IFFALSE 25548
// exit ;
25546: GO 25577
// for i in tmp do
25548: LD_ADDR_VAR 0 1
25552: PUSH
25553: LD_VAR 0 2
25557: PUSH
25558: FOR_IN
25559: IFFALSE 25575
// begin SetLives ( i , 0 ) ;
25561: LD_VAR 0 1
25565: PPUSH
25566: LD_INT 0
25568: PPUSH
25569: CALL_OW 234
// end ;
25573: GO 25558
25575: POP
25576: POP
// end ;
25577: PPOPN 2
25579: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25580: LD_EXP 45
25584: PUSH
25585: LD_EXP 55
25589: AND
25590: IFFALSE 25610
25592: GO 25594
25594: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25595: LD_INT 32
25597: PPUSH
25598: LD_OWVAR 2
25602: PPUSH
25603: LD_INT 0
25605: PPUSH
25606: CALL_OW 324
25610: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25611: LD_EXP 45
25615: PUSH
25616: LD_EXP 56
25620: AND
25621: IFFALSE 25802
25623: GO 25625
25625: DISABLE
25626: LD_INT 0
25628: PPUSH
25629: PPUSH
25630: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25631: LD_ADDR_VAR 0 2
25635: PUSH
25636: LD_INT 22
25638: PUSH
25639: LD_OWVAR 2
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PUSH
25648: LD_INT 33
25650: PUSH
25651: LD_INT 3
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: PPUSH
25662: CALL_OW 69
25666: ST_TO_ADDR
// if not tmp then
25667: LD_VAR 0 2
25671: NOT
25672: IFFALSE 25676
// exit ;
25674: GO 25802
// side := 0 ;
25676: LD_ADDR_VAR 0 3
25680: PUSH
25681: LD_INT 0
25683: ST_TO_ADDR
// for i := 1 to 8 do
25684: LD_ADDR_VAR 0 1
25688: PUSH
25689: DOUBLE
25690: LD_INT 1
25692: DEC
25693: ST_TO_ADDR
25694: LD_INT 8
25696: PUSH
25697: FOR_TO
25698: IFFALSE 25746
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25700: LD_OWVAR 2
25704: PUSH
25705: LD_VAR 0 1
25709: NONEQUAL
25710: PUSH
25711: LD_OWVAR 2
25715: PPUSH
25716: LD_VAR 0 1
25720: PPUSH
25721: CALL_OW 81
25725: PUSH
25726: LD_INT 2
25728: EQUAL
25729: AND
25730: IFFALSE 25744
// begin side := i ;
25732: LD_ADDR_VAR 0 3
25736: PUSH
25737: LD_VAR 0 1
25741: ST_TO_ADDR
// break ;
25742: GO 25746
// end ;
25744: GO 25697
25746: POP
25747: POP
// if not side then
25748: LD_VAR 0 3
25752: NOT
25753: IFFALSE 25757
// exit ;
25755: GO 25802
// for i := 1 to tmp do
25757: LD_ADDR_VAR 0 1
25761: PUSH
25762: DOUBLE
25763: LD_INT 1
25765: DEC
25766: ST_TO_ADDR
25767: LD_VAR 0 2
25771: PUSH
25772: FOR_TO
25773: IFFALSE 25800
// if Prob ( 60 ) then
25775: LD_INT 60
25777: PPUSH
25778: CALL_OW 13
25782: IFFALSE 25798
// SetSide ( i , side ) ;
25784: LD_VAR 0 1
25788: PPUSH
25789: LD_VAR 0 3
25793: PPUSH
25794: CALL_OW 235
25798: GO 25772
25800: POP
25801: POP
// end ;
25802: PPOPN 3
25804: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25805: LD_EXP 45
25809: PUSH
25810: LD_EXP 58
25814: AND
25815: IFFALSE 25934
25817: GO 25819
25819: DISABLE
25820: LD_INT 0
25822: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25823: LD_ADDR_VAR 0 1
25827: PUSH
25828: LD_INT 22
25830: PUSH
25831: LD_OWVAR 2
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: PUSH
25840: LD_INT 21
25842: PUSH
25843: LD_INT 1
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 3
25852: PUSH
25853: LD_INT 23
25855: PUSH
25856: LD_INT 0
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: LIST
25871: PPUSH
25872: CALL_OW 69
25876: PUSH
25877: FOR_IN
25878: IFFALSE 25932
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25880: LD_VAR 0 1
25884: PPUSH
25885: CALL_OW 257
25889: PUSH
25890: LD_INT 1
25892: PUSH
25893: LD_INT 2
25895: PUSH
25896: LD_INT 3
25898: PUSH
25899: LD_INT 4
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: IN
25908: IFFALSE 25930
// SetClass ( un , rand ( 1 , 4 ) ) ;
25910: LD_VAR 0 1
25914: PPUSH
25915: LD_INT 1
25917: PPUSH
25918: LD_INT 4
25920: PPUSH
25921: CALL_OW 12
25925: PPUSH
25926: CALL_OW 336
25930: GO 25877
25932: POP
25933: POP
// end ;
25934: PPOPN 1
25936: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25937: LD_EXP 45
25941: PUSH
25942: LD_EXP 57
25946: AND
25947: IFFALSE 26026
25949: GO 25951
25951: DISABLE
25952: LD_INT 0
25954: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25955: LD_ADDR_VAR 0 1
25959: PUSH
25960: LD_INT 22
25962: PUSH
25963: LD_OWVAR 2
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: LD_INT 21
25974: PUSH
25975: LD_INT 3
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PUSH
25982: EMPTY
25983: LIST
25984: LIST
25985: PPUSH
25986: CALL_OW 69
25990: ST_TO_ADDR
// if not tmp then
25991: LD_VAR 0 1
25995: NOT
25996: IFFALSE 26000
// exit ;
25998: GO 26026
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26000: LD_VAR 0 1
26004: PUSH
26005: LD_INT 1
26007: PPUSH
26008: LD_VAR 0 1
26012: PPUSH
26013: CALL_OW 12
26017: ARRAY
26018: PPUSH
26019: LD_INT 100
26021: PPUSH
26022: CALL_OW 234
// end ;
26026: PPOPN 1
26028: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26029: LD_EXP 45
26033: PUSH
26034: LD_EXP 59
26038: AND
26039: IFFALSE 26137
26041: GO 26043
26043: DISABLE
26044: LD_INT 0
26046: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26047: LD_ADDR_VAR 0 1
26051: PUSH
26052: LD_INT 22
26054: PUSH
26055: LD_OWVAR 2
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 21
26066: PUSH
26067: LD_INT 1
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: PPUSH
26078: CALL_OW 69
26082: ST_TO_ADDR
// if not tmp then
26083: LD_VAR 0 1
26087: NOT
26088: IFFALSE 26092
// exit ;
26090: GO 26137
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26092: LD_VAR 0 1
26096: PUSH
26097: LD_INT 1
26099: PPUSH
26100: LD_VAR 0 1
26104: PPUSH
26105: CALL_OW 12
26109: ARRAY
26110: PPUSH
26111: LD_INT 1
26113: PPUSH
26114: LD_INT 4
26116: PPUSH
26117: CALL_OW 12
26121: PPUSH
26122: LD_INT 3000
26124: PPUSH
26125: LD_INT 9000
26127: PPUSH
26128: CALL_OW 12
26132: PPUSH
26133: CALL_OW 492
// end ;
26137: PPOPN 1
26139: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26140: LD_EXP 45
26144: PUSH
26145: LD_EXP 60
26149: AND
26150: IFFALSE 26170
26152: GO 26154
26154: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26155: LD_INT 1
26157: PPUSH
26158: LD_OWVAR 2
26162: PPUSH
26163: LD_INT 0
26165: PPUSH
26166: CALL_OW 324
26170: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26171: LD_EXP 45
26175: PUSH
26176: LD_EXP 61
26180: AND
26181: IFFALSE 26264
26183: GO 26185
26185: DISABLE
26186: LD_INT 0
26188: PPUSH
26189: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26190: LD_ADDR_VAR 0 2
26194: PUSH
26195: LD_INT 22
26197: PUSH
26198: LD_OWVAR 2
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: LD_INT 21
26209: PUSH
26210: LD_INT 3
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: PPUSH
26221: CALL_OW 69
26225: ST_TO_ADDR
// if not tmp then
26226: LD_VAR 0 2
26230: NOT
26231: IFFALSE 26235
// exit ;
26233: GO 26264
// for i in tmp do
26235: LD_ADDR_VAR 0 1
26239: PUSH
26240: LD_VAR 0 2
26244: PUSH
26245: FOR_IN
26246: IFFALSE 26262
// SetBLevel ( i , 10 ) ;
26248: LD_VAR 0 1
26252: PPUSH
26253: LD_INT 10
26255: PPUSH
26256: CALL_OW 241
26260: GO 26245
26262: POP
26263: POP
// end ;
26264: PPOPN 2
26266: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26267: LD_EXP 45
26271: PUSH
26272: LD_EXP 62
26276: AND
26277: IFFALSE 26388
26279: GO 26281
26281: DISABLE
26282: LD_INT 0
26284: PPUSH
26285: PPUSH
26286: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26287: LD_ADDR_VAR 0 3
26291: PUSH
26292: LD_INT 22
26294: PUSH
26295: LD_OWVAR 2
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PUSH
26304: LD_INT 25
26306: PUSH
26307: LD_INT 1
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: PPUSH
26318: CALL_OW 69
26322: ST_TO_ADDR
// if not tmp then
26323: LD_VAR 0 3
26327: NOT
26328: IFFALSE 26332
// exit ;
26330: GO 26388
// un := tmp [ rand ( 1 , tmp ) ] ;
26332: LD_ADDR_VAR 0 2
26336: PUSH
26337: LD_VAR 0 3
26341: PUSH
26342: LD_INT 1
26344: PPUSH
26345: LD_VAR 0 3
26349: PPUSH
26350: CALL_OW 12
26354: ARRAY
26355: ST_TO_ADDR
// if Crawls ( un ) then
26356: LD_VAR 0 2
26360: PPUSH
26361: CALL_OW 318
26365: IFFALSE 26376
// ComWalk ( un ) ;
26367: LD_VAR 0 2
26371: PPUSH
26372: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26376: LD_VAR 0 2
26380: PPUSH
26381: LD_INT 5
26383: PPUSH
26384: CALL_OW 336
// end ;
26388: PPOPN 3
26390: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26391: LD_EXP 45
26395: PUSH
26396: LD_EXP 63
26400: AND
26401: PUSH
26402: LD_OWVAR 67
26406: PUSH
26407: LD_INT 4
26409: LESS
26410: AND
26411: IFFALSE 26430
26413: GO 26415
26415: DISABLE
// begin Difficulty := Difficulty + 1 ;
26416: LD_ADDR_OWVAR 67
26420: PUSH
26421: LD_OWVAR 67
26425: PUSH
26426: LD_INT 1
26428: PLUS
26429: ST_TO_ADDR
// end ;
26430: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26431: LD_EXP 45
26435: PUSH
26436: LD_EXP 64
26440: AND
26441: IFFALSE 26544
26443: GO 26445
26445: DISABLE
26446: LD_INT 0
26448: PPUSH
// begin for i := 1 to 5 do
26449: LD_ADDR_VAR 0 1
26453: PUSH
26454: DOUBLE
26455: LD_INT 1
26457: DEC
26458: ST_TO_ADDR
26459: LD_INT 5
26461: PUSH
26462: FOR_TO
26463: IFFALSE 26542
// begin uc_nation := nation_nature ;
26465: LD_ADDR_OWVAR 21
26469: PUSH
26470: LD_INT 0
26472: ST_TO_ADDR
// uc_side := 0 ;
26473: LD_ADDR_OWVAR 20
26477: PUSH
26478: LD_INT 0
26480: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26481: LD_ADDR_OWVAR 29
26485: PUSH
26486: LD_INT 12
26488: PUSH
26489: LD_INT 12
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: ST_TO_ADDR
// hc_agressivity := 20 ;
26496: LD_ADDR_OWVAR 35
26500: PUSH
26501: LD_INT 20
26503: ST_TO_ADDR
// hc_class := class_tiger ;
26504: LD_ADDR_OWVAR 28
26508: PUSH
26509: LD_INT 14
26511: ST_TO_ADDR
// hc_gallery :=  ;
26512: LD_ADDR_OWVAR 33
26516: PUSH
26517: LD_STRING 
26519: ST_TO_ADDR
// hc_name :=  ;
26520: LD_ADDR_OWVAR 26
26524: PUSH
26525: LD_STRING 
26527: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26528: CALL_OW 44
26532: PPUSH
26533: LD_INT 0
26535: PPUSH
26536: CALL_OW 51
// end ;
26540: GO 26462
26542: POP
26543: POP
// end ;
26544: PPOPN 1
26546: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26547: LD_EXP 45
26551: PUSH
26552: LD_EXP 65
26556: AND
26557: IFFALSE 26566
26559: GO 26561
26561: DISABLE
// StreamSibBomb ;
26562: CALL 26567 0 0
26566: END
// export function StreamSibBomb ; var i , x , y ; begin
26567: LD_INT 0
26569: PPUSH
26570: PPUSH
26571: PPUSH
26572: PPUSH
// result := false ;
26573: LD_ADDR_VAR 0 1
26577: PUSH
26578: LD_INT 0
26580: ST_TO_ADDR
// for i := 1 to 16 do
26581: LD_ADDR_VAR 0 2
26585: PUSH
26586: DOUBLE
26587: LD_INT 1
26589: DEC
26590: ST_TO_ADDR
26591: LD_INT 16
26593: PUSH
26594: FOR_TO
26595: IFFALSE 26794
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26597: LD_ADDR_VAR 0 3
26601: PUSH
26602: LD_INT 10
26604: PUSH
26605: LD_INT 20
26607: PUSH
26608: LD_INT 30
26610: PUSH
26611: LD_INT 40
26613: PUSH
26614: LD_INT 50
26616: PUSH
26617: LD_INT 60
26619: PUSH
26620: LD_INT 70
26622: PUSH
26623: LD_INT 80
26625: PUSH
26626: LD_INT 90
26628: PUSH
26629: LD_INT 100
26631: PUSH
26632: LD_INT 110
26634: PUSH
26635: LD_INT 120
26637: PUSH
26638: LD_INT 130
26640: PUSH
26641: LD_INT 140
26643: PUSH
26644: LD_INT 150
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 1
26666: PPUSH
26667: LD_INT 15
26669: PPUSH
26670: CALL_OW 12
26674: ARRAY
26675: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26676: LD_ADDR_VAR 0 4
26680: PUSH
26681: LD_INT 10
26683: PUSH
26684: LD_INT 20
26686: PUSH
26687: LD_INT 30
26689: PUSH
26690: LD_INT 40
26692: PUSH
26693: LD_INT 50
26695: PUSH
26696: LD_INT 60
26698: PUSH
26699: LD_INT 70
26701: PUSH
26702: LD_INT 80
26704: PUSH
26705: LD_INT 90
26707: PUSH
26708: LD_INT 100
26710: PUSH
26711: LD_INT 110
26713: PUSH
26714: LD_INT 120
26716: PUSH
26717: LD_INT 130
26719: PUSH
26720: LD_INT 140
26722: PUSH
26723: LD_INT 150
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 1
26745: PPUSH
26746: LD_INT 15
26748: PPUSH
26749: CALL_OW 12
26753: ARRAY
26754: ST_TO_ADDR
// if ValidHex ( x , y ) then
26755: LD_VAR 0 3
26759: PPUSH
26760: LD_VAR 0 4
26764: PPUSH
26765: CALL_OW 488
26769: IFFALSE 26792
// begin result := [ x , y ] ;
26771: LD_ADDR_VAR 0 1
26775: PUSH
26776: LD_VAR 0 3
26780: PUSH
26781: LD_VAR 0 4
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: ST_TO_ADDR
// break ;
26790: GO 26794
// end ; end ;
26792: GO 26594
26794: POP
26795: POP
// if result then
26796: LD_VAR 0 1
26800: IFFALSE 26860
// begin ToLua ( playSibBomb() ) ;
26802: LD_STRING playSibBomb()
26804: PPUSH
26805: CALL_OW 559
// wait ( 0 0$14 ) ;
26809: LD_INT 490
26811: PPUSH
26812: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26816: LD_VAR 0 1
26820: PUSH
26821: LD_INT 1
26823: ARRAY
26824: PPUSH
26825: LD_VAR 0 1
26829: PUSH
26830: LD_INT 2
26832: ARRAY
26833: PPUSH
26834: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26838: LD_VAR 0 1
26842: PUSH
26843: LD_INT 1
26845: ARRAY
26846: PPUSH
26847: LD_VAR 0 1
26851: PUSH
26852: LD_INT 2
26854: ARRAY
26855: PPUSH
26856: CALL_OW 429
// end ; end ;
26860: LD_VAR 0 1
26864: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26865: LD_EXP 45
26869: PUSH
26870: LD_EXP 67
26874: AND
26875: IFFALSE 26887
26877: GO 26879
26879: DISABLE
// YouLost (  ) ;
26880: LD_STRING 
26882: PPUSH
26883: CALL_OW 104
26887: END
// every 0 0$1 trigger StreamModeActive and sFog do
26888: LD_EXP 45
26892: PUSH
26893: LD_EXP 66
26897: AND
26898: IFFALSE 26912
26900: GO 26902
26902: DISABLE
// FogOff ( your_side ) ;
26903: LD_OWVAR 2
26907: PPUSH
26908: CALL_OW 344
26912: END
// every 0 0$1 trigger StreamModeActive and sSun do
26913: LD_EXP 45
26917: PUSH
26918: LD_EXP 68
26922: AND
26923: IFFALSE 26951
26925: GO 26927
26927: DISABLE
// begin solar_recharge_percent := 0 ;
26928: LD_ADDR_OWVAR 79
26932: PUSH
26933: LD_INT 0
26935: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26936: LD_INT 10500
26938: PPUSH
26939: CALL_OW 67
// solar_recharge_percent := 100 ;
26943: LD_ADDR_OWVAR 79
26947: PUSH
26948: LD_INT 100
26950: ST_TO_ADDR
// end ;
26951: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26952: LD_EXP 45
26956: PUSH
26957: LD_EXP 69
26961: AND
26962: IFFALSE 27201
26964: GO 26966
26966: DISABLE
26967: LD_INT 0
26969: PPUSH
26970: PPUSH
26971: PPUSH
// begin tmp := [ ] ;
26972: LD_ADDR_VAR 0 3
26976: PUSH
26977: EMPTY
26978: ST_TO_ADDR
// for i := 1 to 6 do
26979: LD_ADDR_VAR 0 1
26983: PUSH
26984: DOUBLE
26985: LD_INT 1
26987: DEC
26988: ST_TO_ADDR
26989: LD_INT 6
26991: PUSH
26992: FOR_TO
26993: IFFALSE 27098
// begin uc_nation := nation_nature ;
26995: LD_ADDR_OWVAR 21
26999: PUSH
27000: LD_INT 0
27002: ST_TO_ADDR
// uc_side := 0 ;
27003: LD_ADDR_OWVAR 20
27007: PUSH
27008: LD_INT 0
27010: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27011: LD_ADDR_OWVAR 29
27015: PUSH
27016: LD_INT 12
27018: PUSH
27019: LD_INT 12
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: ST_TO_ADDR
// hc_agressivity := 20 ;
27026: LD_ADDR_OWVAR 35
27030: PUSH
27031: LD_INT 20
27033: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27034: LD_ADDR_OWVAR 28
27038: PUSH
27039: LD_INT 17
27041: ST_TO_ADDR
// hc_gallery :=  ;
27042: LD_ADDR_OWVAR 33
27046: PUSH
27047: LD_STRING 
27049: ST_TO_ADDR
// hc_name :=  ;
27050: LD_ADDR_OWVAR 26
27054: PUSH
27055: LD_STRING 
27057: ST_TO_ADDR
// un := CreateHuman ;
27058: LD_ADDR_VAR 0 2
27062: PUSH
27063: CALL_OW 44
27067: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27068: LD_VAR 0 2
27072: PPUSH
27073: LD_INT 1
27075: PPUSH
27076: CALL_OW 51
// tmp := tmp ^ un ;
27080: LD_ADDR_VAR 0 3
27084: PUSH
27085: LD_VAR 0 3
27089: PUSH
27090: LD_VAR 0 2
27094: ADD
27095: ST_TO_ADDR
// end ;
27096: GO 26992
27098: POP
27099: POP
// repeat wait ( 0 0$1 ) ;
27100: LD_INT 35
27102: PPUSH
27103: CALL_OW 67
// for un in tmp do
27107: LD_ADDR_VAR 0 2
27111: PUSH
27112: LD_VAR 0 3
27116: PUSH
27117: FOR_IN
27118: IFFALSE 27192
// begin if IsDead ( un ) then
27120: LD_VAR 0 2
27124: PPUSH
27125: CALL_OW 301
27129: IFFALSE 27149
// begin tmp := tmp diff un ;
27131: LD_ADDR_VAR 0 3
27135: PUSH
27136: LD_VAR 0 3
27140: PUSH
27141: LD_VAR 0 2
27145: DIFF
27146: ST_TO_ADDR
// continue ;
27147: GO 27117
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27149: LD_VAR 0 2
27153: PPUSH
27154: LD_INT 3
27156: PUSH
27157: LD_INT 22
27159: PUSH
27160: LD_INT 0
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PPUSH
27171: CALL_OW 69
27175: PPUSH
27176: LD_VAR 0 2
27180: PPUSH
27181: CALL_OW 74
27185: PPUSH
27186: CALL_OW 115
// end ;
27190: GO 27117
27192: POP
27193: POP
// until not tmp ;
27194: LD_VAR 0 3
27198: NOT
27199: IFFALSE 27100
// end ;
27201: PPOPN 3
27203: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27204: LD_EXP 45
27208: PUSH
27209: LD_EXP 70
27213: AND
27214: IFFALSE 27268
27216: GO 27218
27218: DISABLE
// begin ToLua ( displayTroll(); ) ;
27219: LD_STRING displayTroll();
27221: PPUSH
27222: CALL_OW 559
// wait ( 3 3$00 ) ;
27226: LD_INT 6300
27228: PPUSH
27229: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27233: LD_STRING hideTroll();
27235: PPUSH
27236: CALL_OW 559
// wait ( 1 1$00 ) ;
27240: LD_INT 2100
27242: PPUSH
27243: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27247: LD_STRING displayTroll();
27249: PPUSH
27250: CALL_OW 559
// wait ( 1 1$00 ) ;
27254: LD_INT 2100
27256: PPUSH
27257: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27261: LD_STRING hideTroll();
27263: PPUSH
27264: CALL_OW 559
// end ;
27268: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27269: LD_EXP 45
27273: PUSH
27274: LD_EXP 71
27278: AND
27279: IFFALSE 27342
27281: GO 27283
27283: DISABLE
27284: LD_INT 0
27286: PPUSH
// begin p := 0 ;
27287: LD_ADDR_VAR 0 1
27291: PUSH
27292: LD_INT 0
27294: ST_TO_ADDR
// repeat game_speed := 1 ;
27295: LD_ADDR_OWVAR 65
27299: PUSH
27300: LD_INT 1
27302: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27303: LD_INT 35
27305: PPUSH
27306: CALL_OW 67
// p := p + 1 ;
27310: LD_ADDR_VAR 0 1
27314: PUSH
27315: LD_VAR 0 1
27319: PUSH
27320: LD_INT 1
27322: PLUS
27323: ST_TO_ADDR
// until p >= 60 ;
27324: LD_VAR 0 1
27328: PUSH
27329: LD_INT 60
27331: GREATEREQUAL
27332: IFFALSE 27295
// game_speed := 4 ;
27334: LD_ADDR_OWVAR 65
27338: PUSH
27339: LD_INT 4
27341: ST_TO_ADDR
// end ;
27342: PPOPN 1
27344: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27345: LD_EXP 45
27349: PUSH
27350: LD_EXP 72
27354: AND
27355: IFFALSE 27501
27357: GO 27359
27359: DISABLE
27360: LD_INT 0
27362: PPUSH
27363: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27364: LD_ADDR_VAR 0 1
27368: PUSH
27369: LD_INT 22
27371: PUSH
27372: LD_OWVAR 2
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PUSH
27381: LD_INT 2
27383: PUSH
27384: LD_INT 30
27386: PUSH
27387: LD_INT 0
27389: PUSH
27390: EMPTY
27391: LIST
27392: LIST
27393: PUSH
27394: LD_INT 30
27396: PUSH
27397: LD_INT 1
27399: PUSH
27400: EMPTY
27401: LIST
27402: LIST
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: LIST
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PPUSH
27413: CALL_OW 69
27417: ST_TO_ADDR
// if not depot then
27418: LD_VAR 0 1
27422: NOT
27423: IFFALSE 27427
// exit ;
27425: GO 27501
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27427: LD_ADDR_VAR 0 2
27431: PUSH
27432: LD_VAR 0 1
27436: PUSH
27437: LD_INT 1
27439: PPUSH
27440: LD_VAR 0 1
27444: PPUSH
27445: CALL_OW 12
27449: ARRAY
27450: PPUSH
27451: CALL_OW 274
27455: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27456: LD_VAR 0 2
27460: PPUSH
27461: LD_INT 1
27463: PPUSH
27464: LD_INT 0
27466: PPUSH
27467: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27471: LD_VAR 0 2
27475: PPUSH
27476: LD_INT 2
27478: PPUSH
27479: LD_INT 0
27481: PPUSH
27482: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27486: LD_VAR 0 2
27490: PPUSH
27491: LD_INT 3
27493: PPUSH
27494: LD_INT 0
27496: PPUSH
27497: CALL_OW 277
// end ;
27501: PPOPN 2
27503: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27504: LD_EXP 45
27508: PUSH
27509: LD_EXP 73
27513: AND
27514: IFFALSE 27611
27516: GO 27518
27518: DISABLE
27519: LD_INT 0
27521: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27522: LD_ADDR_VAR 0 1
27526: PUSH
27527: LD_INT 22
27529: PUSH
27530: LD_OWVAR 2
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: LD_INT 21
27541: PUSH
27542: LD_INT 1
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: PUSH
27549: LD_INT 3
27551: PUSH
27552: LD_INT 23
27554: PUSH
27555: LD_INT 0
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: LIST
27570: PPUSH
27571: CALL_OW 69
27575: ST_TO_ADDR
// if not tmp then
27576: LD_VAR 0 1
27580: NOT
27581: IFFALSE 27585
// exit ;
27583: GO 27611
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27585: LD_VAR 0 1
27589: PUSH
27590: LD_INT 1
27592: PPUSH
27593: LD_VAR 0 1
27597: PPUSH
27598: CALL_OW 12
27602: ARRAY
27603: PPUSH
27604: LD_INT 200
27606: PPUSH
27607: CALL_OW 234
// end ;
27611: PPOPN 1
27613: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27614: LD_EXP 45
27618: PUSH
27619: LD_EXP 74
27623: AND
27624: IFFALSE 27703
27626: GO 27628
27628: DISABLE
27629: LD_INT 0
27631: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27632: LD_ADDR_VAR 0 1
27636: PUSH
27637: LD_INT 22
27639: PUSH
27640: LD_OWVAR 2
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PUSH
27649: LD_INT 21
27651: PUSH
27652: LD_INT 2
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PPUSH
27663: CALL_OW 69
27667: ST_TO_ADDR
// if not tmp then
27668: LD_VAR 0 1
27672: NOT
27673: IFFALSE 27677
// exit ;
27675: GO 27703
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27677: LD_VAR 0 1
27681: PUSH
27682: LD_INT 1
27684: PPUSH
27685: LD_VAR 0 1
27689: PPUSH
27690: CALL_OW 12
27694: ARRAY
27695: PPUSH
27696: LD_INT 60
27698: PPUSH
27699: CALL_OW 234
// end ;
27703: PPOPN 1
27705: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27706: LD_EXP 45
27710: PUSH
27711: LD_EXP 75
27715: AND
27716: IFFALSE 27815
27718: GO 27720
27720: DISABLE
27721: LD_INT 0
27723: PPUSH
27724: PPUSH
// begin enable ;
27725: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27726: LD_ADDR_VAR 0 1
27730: PUSH
27731: LD_INT 22
27733: PUSH
27734: LD_OWVAR 2
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: LD_INT 61
27745: PUSH
27746: EMPTY
27747: LIST
27748: PUSH
27749: LD_INT 33
27751: PUSH
27752: LD_INT 2
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: LIST
27763: PPUSH
27764: CALL_OW 69
27768: ST_TO_ADDR
// if not tmp then
27769: LD_VAR 0 1
27773: NOT
27774: IFFALSE 27778
// exit ;
27776: GO 27815
// for i in tmp do
27778: LD_ADDR_VAR 0 2
27782: PUSH
27783: LD_VAR 0 1
27787: PUSH
27788: FOR_IN
27789: IFFALSE 27813
// if IsControledBy ( i ) then
27791: LD_VAR 0 2
27795: PPUSH
27796: CALL_OW 312
27800: IFFALSE 27811
// ComUnlink ( i ) ;
27802: LD_VAR 0 2
27806: PPUSH
27807: CALL_OW 136
27811: GO 27788
27813: POP
27814: POP
// end ;
27815: PPOPN 2
27817: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27818: LD_EXP 45
27822: PUSH
27823: LD_EXP 76
27827: AND
27828: IFFALSE 27968
27830: GO 27832
27832: DISABLE
27833: LD_INT 0
27835: PPUSH
27836: PPUSH
// begin ToLua ( displayPowell(); ) ;
27837: LD_STRING displayPowell();
27839: PPUSH
27840: CALL_OW 559
// uc_side := 0 ;
27844: LD_ADDR_OWVAR 20
27848: PUSH
27849: LD_INT 0
27851: ST_TO_ADDR
// uc_nation := 2 ;
27852: LD_ADDR_OWVAR 21
27856: PUSH
27857: LD_INT 2
27859: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27860: LD_ADDR_OWVAR 37
27864: PUSH
27865: LD_INT 14
27867: ST_TO_ADDR
// vc_engine := engine_siberite ;
27868: LD_ADDR_OWVAR 39
27872: PUSH
27873: LD_INT 3
27875: ST_TO_ADDR
// vc_control := control_apeman ;
27876: LD_ADDR_OWVAR 38
27880: PUSH
27881: LD_INT 5
27883: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27884: LD_ADDR_OWVAR 40
27888: PUSH
27889: LD_INT 29
27891: ST_TO_ADDR
// un := CreateVehicle ;
27892: LD_ADDR_VAR 0 2
27896: PUSH
27897: CALL_OW 45
27901: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27902: LD_VAR 0 2
27906: PPUSH
27907: LD_INT 1
27909: PPUSH
27910: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27914: LD_INT 35
27916: PPUSH
27917: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27921: LD_VAR 0 2
27925: PPUSH
27926: LD_INT 22
27928: PUSH
27929: LD_OWVAR 2
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PPUSH
27938: CALL_OW 69
27942: PPUSH
27943: LD_VAR 0 2
27947: PPUSH
27948: CALL_OW 74
27952: PPUSH
27953: CALL_OW 115
// until IsDead ( un ) ;
27957: LD_VAR 0 2
27961: PPUSH
27962: CALL_OW 301
27966: IFFALSE 27914
// end ;
27968: PPOPN 2
27970: END
// every 0 0$1 trigger StreamModeActive and sStu do
27971: LD_EXP 45
27975: PUSH
27976: LD_EXP 84
27980: AND
27981: IFFALSE 27997
27983: GO 27985
27985: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27986: LD_STRING displayStucuk();
27988: PPUSH
27989: CALL_OW 559
// ResetFog ;
27993: CALL_OW 335
// end ;
27997: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27998: LD_EXP 45
28002: PUSH
28003: LD_EXP 77
28007: AND
28008: IFFALSE 28149
28010: GO 28012
28012: DISABLE
28013: LD_INT 0
28015: PPUSH
28016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28017: LD_ADDR_VAR 0 2
28021: PUSH
28022: LD_INT 22
28024: PUSH
28025: LD_OWVAR 2
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: PUSH
28034: LD_INT 21
28036: PUSH
28037: LD_INT 1
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PPUSH
28048: CALL_OW 69
28052: ST_TO_ADDR
// if not tmp then
28053: LD_VAR 0 2
28057: NOT
28058: IFFALSE 28062
// exit ;
28060: GO 28149
// un := tmp [ rand ( 1 , tmp ) ] ;
28062: LD_ADDR_VAR 0 1
28066: PUSH
28067: LD_VAR 0 2
28071: PUSH
28072: LD_INT 1
28074: PPUSH
28075: LD_VAR 0 2
28079: PPUSH
28080: CALL_OW 12
28084: ARRAY
28085: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28086: LD_VAR 0 1
28090: PPUSH
28091: LD_INT 0
28093: PPUSH
28094: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28098: LD_VAR 0 1
28102: PPUSH
28103: LD_OWVAR 3
28107: PUSH
28108: LD_VAR 0 1
28112: DIFF
28113: PPUSH
28114: LD_VAR 0 1
28118: PPUSH
28119: CALL_OW 74
28123: PPUSH
28124: CALL_OW 115
// wait ( 0 0$20 ) ;
28128: LD_INT 700
28130: PPUSH
28131: CALL_OW 67
// SetSide ( un , your_side ) ;
28135: LD_VAR 0 1
28139: PPUSH
28140: LD_OWVAR 2
28144: PPUSH
28145: CALL_OW 235
// end ;
28149: PPOPN 2
28151: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28152: LD_EXP 45
28156: PUSH
28157: LD_EXP 78
28161: AND
28162: IFFALSE 28268
28164: GO 28166
28166: DISABLE
28167: LD_INT 0
28169: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28170: LD_ADDR_VAR 0 1
28174: PUSH
28175: LD_INT 22
28177: PUSH
28178: LD_OWVAR 2
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 2
28189: PUSH
28190: LD_INT 30
28192: PUSH
28193: LD_INT 0
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: LD_INT 30
28202: PUSH
28203: LD_INT 1
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: LIST
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PPUSH
28219: CALL_OW 69
28223: ST_TO_ADDR
// if not depot then
28224: LD_VAR 0 1
28228: NOT
28229: IFFALSE 28233
// exit ;
28231: GO 28268
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28233: LD_VAR 0 1
28237: PUSH
28238: LD_INT 1
28240: ARRAY
28241: PPUSH
28242: CALL_OW 250
28246: PPUSH
28247: LD_VAR 0 1
28251: PUSH
28252: LD_INT 1
28254: ARRAY
28255: PPUSH
28256: CALL_OW 251
28260: PPUSH
28261: LD_INT 70
28263: PPUSH
28264: CALL_OW 495
// end ;
28268: PPOPN 1
28270: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28271: LD_EXP 45
28275: PUSH
28276: LD_EXP 79
28280: AND
28281: IFFALSE 28492
28283: GO 28285
28285: DISABLE
28286: LD_INT 0
28288: PPUSH
28289: PPUSH
28290: PPUSH
28291: PPUSH
28292: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28293: LD_ADDR_VAR 0 5
28297: PUSH
28298: LD_INT 22
28300: PUSH
28301: LD_OWVAR 2
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: PUSH
28310: LD_INT 21
28312: PUSH
28313: LD_INT 1
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PPUSH
28324: CALL_OW 69
28328: ST_TO_ADDR
// if not tmp then
28329: LD_VAR 0 5
28333: NOT
28334: IFFALSE 28338
// exit ;
28336: GO 28492
// for i in tmp do
28338: LD_ADDR_VAR 0 1
28342: PUSH
28343: LD_VAR 0 5
28347: PUSH
28348: FOR_IN
28349: IFFALSE 28490
// begin d := rand ( 0 , 5 ) ;
28351: LD_ADDR_VAR 0 4
28355: PUSH
28356: LD_INT 0
28358: PPUSH
28359: LD_INT 5
28361: PPUSH
28362: CALL_OW 12
28366: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28367: LD_ADDR_VAR 0 2
28371: PUSH
28372: LD_VAR 0 1
28376: PPUSH
28377: CALL_OW 250
28381: PPUSH
28382: LD_VAR 0 4
28386: PPUSH
28387: LD_INT 3
28389: PPUSH
28390: LD_INT 12
28392: PPUSH
28393: CALL_OW 12
28397: PPUSH
28398: CALL_OW 272
28402: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28403: LD_ADDR_VAR 0 3
28407: PUSH
28408: LD_VAR 0 1
28412: PPUSH
28413: CALL_OW 251
28417: PPUSH
28418: LD_VAR 0 4
28422: PPUSH
28423: LD_INT 3
28425: PPUSH
28426: LD_INT 12
28428: PPUSH
28429: CALL_OW 12
28433: PPUSH
28434: CALL_OW 273
28438: ST_TO_ADDR
// if ValidHex ( x , y ) then
28439: LD_VAR 0 2
28443: PPUSH
28444: LD_VAR 0 3
28448: PPUSH
28449: CALL_OW 488
28453: IFFALSE 28488
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28455: LD_VAR 0 1
28459: PPUSH
28460: LD_VAR 0 2
28464: PPUSH
28465: LD_VAR 0 3
28469: PPUSH
28470: LD_INT 3
28472: PPUSH
28473: LD_INT 6
28475: PPUSH
28476: CALL_OW 12
28480: PPUSH
28481: LD_INT 1
28483: PPUSH
28484: CALL_OW 483
// end ;
28488: GO 28348
28490: POP
28491: POP
// end ;
28492: PPOPN 5
28494: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28495: LD_EXP 45
28499: PUSH
28500: LD_EXP 80
28504: AND
28505: IFFALSE 28599
28507: GO 28509
28509: DISABLE
28510: LD_INT 0
28512: PPUSH
28513: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28514: LD_ADDR_VAR 0 2
28518: PUSH
28519: LD_INT 22
28521: PUSH
28522: LD_OWVAR 2
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 32
28533: PUSH
28534: LD_INT 1
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: LD_INT 21
28543: PUSH
28544: LD_INT 2
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: LIST
28555: PPUSH
28556: CALL_OW 69
28560: ST_TO_ADDR
// if not tmp then
28561: LD_VAR 0 2
28565: NOT
28566: IFFALSE 28570
// exit ;
28568: GO 28599
// for i in tmp do
28570: LD_ADDR_VAR 0 1
28574: PUSH
28575: LD_VAR 0 2
28579: PUSH
28580: FOR_IN
28581: IFFALSE 28597
// SetFuel ( i , 0 ) ;
28583: LD_VAR 0 1
28587: PPUSH
28588: LD_INT 0
28590: PPUSH
28591: CALL_OW 240
28595: GO 28580
28597: POP
28598: POP
// end ;
28599: PPOPN 2
28601: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28602: LD_EXP 45
28606: PUSH
28607: LD_EXP 81
28611: AND
28612: IFFALSE 28678
28614: GO 28616
28616: DISABLE
28617: LD_INT 0
28619: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28620: LD_ADDR_VAR 0 1
28624: PUSH
28625: LD_INT 22
28627: PUSH
28628: LD_OWVAR 2
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: LD_INT 30
28639: PUSH
28640: LD_INT 29
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PPUSH
28651: CALL_OW 69
28655: ST_TO_ADDR
// if not tmp then
28656: LD_VAR 0 1
28660: NOT
28661: IFFALSE 28665
// exit ;
28663: GO 28678
// DestroyUnit ( tmp [ 1 ] ) ;
28665: LD_VAR 0 1
28669: PUSH
28670: LD_INT 1
28672: ARRAY
28673: PPUSH
28674: CALL_OW 65
// end ;
28678: PPOPN 1
28680: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28681: LD_EXP 45
28685: PUSH
28686: LD_EXP 83
28690: AND
28691: IFFALSE 28820
28693: GO 28695
28695: DISABLE
28696: LD_INT 0
28698: PPUSH
// begin uc_side := 0 ;
28699: LD_ADDR_OWVAR 20
28703: PUSH
28704: LD_INT 0
28706: ST_TO_ADDR
// uc_nation := nation_arabian ;
28707: LD_ADDR_OWVAR 21
28711: PUSH
28712: LD_INT 2
28714: ST_TO_ADDR
// hc_gallery :=  ;
28715: LD_ADDR_OWVAR 33
28719: PUSH
28720: LD_STRING 
28722: ST_TO_ADDR
// hc_name :=  ;
28723: LD_ADDR_OWVAR 26
28727: PUSH
28728: LD_STRING 
28730: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28731: LD_INT 1
28733: PPUSH
28734: LD_INT 11
28736: PPUSH
28737: LD_INT 10
28739: PPUSH
28740: CALL_OW 380
// un := CreateHuman ;
28744: LD_ADDR_VAR 0 1
28748: PUSH
28749: CALL_OW 44
28753: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28754: LD_VAR 0 1
28758: PPUSH
28759: LD_INT 1
28761: PPUSH
28762: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28766: LD_INT 35
28768: PPUSH
28769: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28773: LD_VAR 0 1
28777: PPUSH
28778: LD_INT 22
28780: PUSH
28781: LD_OWVAR 2
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PPUSH
28790: CALL_OW 69
28794: PPUSH
28795: LD_VAR 0 1
28799: PPUSH
28800: CALL_OW 74
28804: PPUSH
28805: CALL_OW 115
// until IsDead ( un ) ;
28809: LD_VAR 0 1
28813: PPUSH
28814: CALL_OW 301
28818: IFFALSE 28766
// end ;
28820: PPOPN 1
28822: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28823: LD_EXP 45
28827: PUSH
28828: LD_EXP 85
28832: AND
28833: IFFALSE 28845
28835: GO 28837
28837: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28838: LD_STRING earthquake(getX(game), 0, 32)
28840: PPUSH
28841: CALL_OW 559
28845: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28846: LD_EXP 45
28850: PUSH
28851: LD_EXP 86
28855: AND
28856: IFFALSE 28947
28858: GO 28860
28860: DISABLE
28861: LD_INT 0
28863: PPUSH
// begin enable ;
28864: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28865: LD_ADDR_VAR 0 1
28869: PUSH
28870: LD_INT 22
28872: PUSH
28873: LD_OWVAR 2
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 21
28884: PUSH
28885: LD_INT 2
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: LD_INT 33
28894: PUSH
28895: LD_INT 3
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: LIST
28906: PPUSH
28907: CALL_OW 69
28911: ST_TO_ADDR
// if not tmp then
28912: LD_VAR 0 1
28916: NOT
28917: IFFALSE 28921
// exit ;
28919: GO 28947
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28921: LD_VAR 0 1
28925: PUSH
28926: LD_INT 1
28928: PPUSH
28929: LD_VAR 0 1
28933: PPUSH
28934: CALL_OW 12
28938: ARRAY
28939: PPUSH
28940: LD_INT 1
28942: PPUSH
28943: CALL_OW 234
// end ;
28947: PPOPN 1
28949: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28950: LD_EXP 45
28954: PUSH
28955: LD_EXP 87
28959: AND
28960: IFFALSE 29101
28962: GO 28964
28964: DISABLE
28965: LD_INT 0
28967: PPUSH
28968: PPUSH
28969: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28970: LD_ADDR_VAR 0 3
28974: PUSH
28975: LD_INT 22
28977: PUSH
28978: LD_OWVAR 2
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 25
28989: PUSH
28990: LD_INT 1
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PPUSH
29001: CALL_OW 69
29005: ST_TO_ADDR
// if not tmp then
29006: LD_VAR 0 3
29010: NOT
29011: IFFALSE 29015
// exit ;
29013: GO 29101
// un := tmp [ rand ( 1 , tmp ) ] ;
29015: LD_ADDR_VAR 0 2
29019: PUSH
29020: LD_VAR 0 3
29024: PUSH
29025: LD_INT 1
29027: PPUSH
29028: LD_VAR 0 3
29032: PPUSH
29033: CALL_OW 12
29037: ARRAY
29038: ST_TO_ADDR
// if Crawls ( un ) then
29039: LD_VAR 0 2
29043: PPUSH
29044: CALL_OW 318
29048: IFFALSE 29059
// ComWalk ( un ) ;
29050: LD_VAR 0 2
29054: PPUSH
29055: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29059: LD_VAR 0 2
29063: PPUSH
29064: LD_INT 9
29066: PPUSH
29067: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29071: LD_INT 28
29073: PPUSH
29074: LD_OWVAR 2
29078: PPUSH
29079: LD_INT 2
29081: PPUSH
29082: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29086: LD_INT 29
29088: PPUSH
29089: LD_OWVAR 2
29093: PPUSH
29094: LD_INT 2
29096: PPUSH
29097: CALL_OW 322
// end ;
29101: PPOPN 3
29103: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29104: LD_EXP 45
29108: PUSH
29109: LD_EXP 88
29113: AND
29114: IFFALSE 29225
29116: GO 29118
29118: DISABLE
29119: LD_INT 0
29121: PPUSH
29122: PPUSH
29123: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29124: LD_ADDR_VAR 0 3
29128: PUSH
29129: LD_INT 22
29131: PUSH
29132: LD_OWVAR 2
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: LD_INT 25
29143: PUSH
29144: LD_INT 1
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: PPUSH
29155: CALL_OW 69
29159: ST_TO_ADDR
// if not tmp then
29160: LD_VAR 0 3
29164: NOT
29165: IFFALSE 29169
// exit ;
29167: GO 29225
// un := tmp [ rand ( 1 , tmp ) ] ;
29169: LD_ADDR_VAR 0 2
29173: PUSH
29174: LD_VAR 0 3
29178: PUSH
29179: LD_INT 1
29181: PPUSH
29182: LD_VAR 0 3
29186: PPUSH
29187: CALL_OW 12
29191: ARRAY
29192: ST_TO_ADDR
// if Crawls ( un ) then
29193: LD_VAR 0 2
29197: PPUSH
29198: CALL_OW 318
29202: IFFALSE 29213
// ComWalk ( un ) ;
29204: LD_VAR 0 2
29208: PPUSH
29209: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29213: LD_VAR 0 2
29217: PPUSH
29218: LD_INT 8
29220: PPUSH
29221: CALL_OW 336
// end ;
29225: PPOPN 3
29227: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29228: LD_EXP 45
29232: PUSH
29233: LD_EXP 89
29237: AND
29238: IFFALSE 29382
29240: GO 29242
29242: DISABLE
29243: LD_INT 0
29245: PPUSH
29246: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29247: LD_ADDR_VAR 0 2
29251: PUSH
29252: LD_INT 22
29254: PUSH
29255: LD_OWVAR 2
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: PUSH
29264: LD_INT 21
29266: PUSH
29267: LD_INT 2
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: PUSH
29274: LD_INT 2
29276: PUSH
29277: LD_INT 34
29279: PUSH
29280: LD_INT 12
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 34
29289: PUSH
29290: LD_INT 51
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: PUSH
29297: LD_INT 34
29299: PUSH
29300: LD_INT 32
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: LIST
29317: PPUSH
29318: CALL_OW 69
29322: ST_TO_ADDR
// if not tmp then
29323: LD_VAR 0 2
29327: NOT
29328: IFFALSE 29332
// exit ;
29330: GO 29382
// for i in tmp do
29332: LD_ADDR_VAR 0 1
29336: PUSH
29337: LD_VAR 0 2
29341: PUSH
29342: FOR_IN
29343: IFFALSE 29380
// if GetCargo ( i , mat_artifact ) = 0 then
29345: LD_VAR 0 1
29349: PPUSH
29350: LD_INT 4
29352: PPUSH
29353: CALL_OW 289
29357: PUSH
29358: LD_INT 0
29360: EQUAL
29361: IFFALSE 29378
// SetCargo ( i , mat_siberit , 100 ) ;
29363: LD_VAR 0 1
29367: PPUSH
29368: LD_INT 3
29370: PPUSH
29371: LD_INT 100
29373: PPUSH
29374: CALL_OW 290
29378: GO 29342
29380: POP
29381: POP
// end ;
29382: PPOPN 2
29384: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29385: LD_EXP 45
29389: PUSH
29390: LD_EXP 90
29394: AND
29395: IFFALSE 29578
29397: GO 29399
29399: DISABLE
29400: LD_INT 0
29402: PPUSH
29403: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29404: LD_ADDR_VAR 0 2
29408: PUSH
29409: LD_INT 22
29411: PUSH
29412: LD_OWVAR 2
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PPUSH
29421: CALL_OW 69
29425: ST_TO_ADDR
// if not tmp then
29426: LD_VAR 0 2
29430: NOT
29431: IFFALSE 29435
// exit ;
29433: GO 29578
// for i := 1 to 2 do
29435: LD_ADDR_VAR 0 1
29439: PUSH
29440: DOUBLE
29441: LD_INT 1
29443: DEC
29444: ST_TO_ADDR
29445: LD_INT 2
29447: PUSH
29448: FOR_TO
29449: IFFALSE 29576
// begin uc_side := your_side ;
29451: LD_ADDR_OWVAR 20
29455: PUSH
29456: LD_OWVAR 2
29460: ST_TO_ADDR
// uc_nation := nation_american ;
29461: LD_ADDR_OWVAR 21
29465: PUSH
29466: LD_INT 1
29468: ST_TO_ADDR
// vc_chassis := us_morphling ;
29469: LD_ADDR_OWVAR 37
29473: PUSH
29474: LD_INT 5
29476: ST_TO_ADDR
// vc_engine := engine_siberite ;
29477: LD_ADDR_OWVAR 39
29481: PUSH
29482: LD_INT 3
29484: ST_TO_ADDR
// vc_control := control_computer ;
29485: LD_ADDR_OWVAR 38
29489: PUSH
29490: LD_INT 3
29492: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29493: LD_ADDR_OWVAR 40
29497: PUSH
29498: LD_INT 10
29500: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29501: LD_VAR 0 2
29505: PUSH
29506: LD_INT 1
29508: ARRAY
29509: PPUSH
29510: CALL_OW 310
29514: NOT
29515: IFFALSE 29562
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29517: CALL_OW 45
29521: PPUSH
29522: LD_VAR 0 2
29526: PUSH
29527: LD_INT 1
29529: ARRAY
29530: PPUSH
29531: CALL_OW 250
29535: PPUSH
29536: LD_VAR 0 2
29540: PUSH
29541: LD_INT 1
29543: ARRAY
29544: PPUSH
29545: CALL_OW 251
29549: PPUSH
29550: LD_INT 12
29552: PPUSH
29553: LD_INT 1
29555: PPUSH
29556: CALL_OW 50
29560: GO 29574
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29562: CALL_OW 45
29566: PPUSH
29567: LD_INT 1
29569: PPUSH
29570: CALL_OW 51
// end ;
29574: GO 29448
29576: POP
29577: POP
// end ;
29578: PPOPN 2
29580: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29581: LD_EXP 45
29585: PUSH
29586: LD_EXP 91
29590: AND
29591: IFFALSE 29813
29593: GO 29595
29595: DISABLE
29596: LD_INT 0
29598: PPUSH
29599: PPUSH
29600: PPUSH
29601: PPUSH
29602: PPUSH
29603: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29604: LD_ADDR_VAR 0 6
29608: PUSH
29609: LD_INT 22
29611: PUSH
29612: LD_OWVAR 2
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 21
29623: PUSH
29624: LD_INT 1
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: LD_INT 3
29633: PUSH
29634: LD_INT 23
29636: PUSH
29637: LD_INT 0
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: LIST
29652: PPUSH
29653: CALL_OW 69
29657: ST_TO_ADDR
// if not tmp then
29658: LD_VAR 0 6
29662: NOT
29663: IFFALSE 29667
// exit ;
29665: GO 29813
// s1 := rand ( 1 , 4 ) ;
29667: LD_ADDR_VAR 0 2
29671: PUSH
29672: LD_INT 1
29674: PPUSH
29675: LD_INT 4
29677: PPUSH
29678: CALL_OW 12
29682: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29683: LD_ADDR_VAR 0 4
29687: PUSH
29688: LD_VAR 0 6
29692: PUSH
29693: LD_INT 1
29695: ARRAY
29696: PPUSH
29697: LD_VAR 0 2
29701: PPUSH
29702: CALL_OW 259
29706: ST_TO_ADDR
// if s1 = 1 then
29707: LD_VAR 0 2
29711: PUSH
29712: LD_INT 1
29714: EQUAL
29715: IFFALSE 29735
// s2 := rand ( 2 , 4 ) else
29717: LD_ADDR_VAR 0 3
29721: PUSH
29722: LD_INT 2
29724: PPUSH
29725: LD_INT 4
29727: PPUSH
29728: CALL_OW 12
29732: ST_TO_ADDR
29733: GO 29743
// s2 := 1 ;
29735: LD_ADDR_VAR 0 3
29739: PUSH
29740: LD_INT 1
29742: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29743: LD_ADDR_VAR 0 5
29747: PUSH
29748: LD_VAR 0 6
29752: PUSH
29753: LD_INT 1
29755: ARRAY
29756: PPUSH
29757: LD_VAR 0 3
29761: PPUSH
29762: CALL_OW 259
29766: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29767: LD_VAR 0 6
29771: PUSH
29772: LD_INT 1
29774: ARRAY
29775: PPUSH
29776: LD_VAR 0 2
29780: PPUSH
29781: LD_VAR 0 5
29785: PPUSH
29786: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29790: LD_VAR 0 6
29794: PUSH
29795: LD_INT 1
29797: ARRAY
29798: PPUSH
29799: LD_VAR 0 3
29803: PPUSH
29804: LD_VAR 0 4
29808: PPUSH
29809: CALL_OW 237
// end ;
29813: PPOPN 6
29815: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29816: LD_EXP 45
29820: PUSH
29821: LD_EXP 92
29825: AND
29826: IFFALSE 29905
29828: GO 29830
29830: DISABLE
29831: LD_INT 0
29833: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29834: LD_ADDR_VAR 0 1
29838: PUSH
29839: LD_INT 22
29841: PUSH
29842: LD_OWVAR 2
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: PUSH
29851: LD_INT 30
29853: PUSH
29854: LD_INT 3
29856: PUSH
29857: EMPTY
29858: LIST
29859: LIST
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PPUSH
29865: CALL_OW 69
29869: ST_TO_ADDR
// if not tmp then
29870: LD_VAR 0 1
29874: NOT
29875: IFFALSE 29879
// exit ;
29877: GO 29905
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29879: LD_VAR 0 1
29883: PUSH
29884: LD_INT 1
29886: PPUSH
29887: LD_VAR 0 1
29891: PPUSH
29892: CALL_OW 12
29896: ARRAY
29897: PPUSH
29898: LD_INT 1
29900: PPUSH
29901: CALL_OW 234
// end ;
29905: PPOPN 1
29907: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29908: LD_EXP 45
29912: PUSH
29913: LD_EXP 93
29917: AND
29918: IFFALSE 30030
29920: GO 29922
29922: DISABLE
29923: LD_INT 0
29925: PPUSH
29926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29927: LD_ADDR_VAR 0 2
29931: PUSH
29932: LD_INT 22
29934: PUSH
29935: LD_OWVAR 2
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: PUSH
29944: LD_INT 2
29946: PUSH
29947: LD_INT 30
29949: PUSH
29950: LD_INT 27
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: LD_INT 30
29959: PUSH
29960: LD_INT 26
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: PUSH
29967: LD_INT 30
29969: PUSH
29970: LD_INT 28
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: PPUSH
29987: CALL_OW 69
29991: ST_TO_ADDR
// if not tmp then
29992: LD_VAR 0 2
29996: NOT
29997: IFFALSE 30001
// exit ;
29999: GO 30030
// for i in tmp do
30001: LD_ADDR_VAR 0 1
30005: PUSH
30006: LD_VAR 0 2
30010: PUSH
30011: FOR_IN
30012: IFFALSE 30028
// SetLives ( i , 1 ) ;
30014: LD_VAR 0 1
30018: PPUSH
30019: LD_INT 1
30021: PPUSH
30022: CALL_OW 234
30026: GO 30011
30028: POP
30029: POP
// end ;
30030: PPOPN 2
30032: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30033: LD_EXP 45
30037: PUSH
30038: LD_EXP 94
30042: AND
30043: IFFALSE 30330
30045: GO 30047
30047: DISABLE
30048: LD_INT 0
30050: PPUSH
30051: PPUSH
30052: PPUSH
// begin i := rand ( 1 , 7 ) ;
30053: LD_ADDR_VAR 0 1
30057: PUSH
30058: LD_INT 1
30060: PPUSH
30061: LD_INT 7
30063: PPUSH
30064: CALL_OW 12
30068: ST_TO_ADDR
// case i of 1 :
30069: LD_VAR 0 1
30073: PUSH
30074: LD_INT 1
30076: DOUBLE
30077: EQUAL
30078: IFTRUE 30082
30080: GO 30092
30082: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30083: LD_STRING earthquake(getX(game), 0, 32)
30085: PPUSH
30086: CALL_OW 559
30090: GO 30330
30092: LD_INT 2
30094: DOUBLE
30095: EQUAL
30096: IFTRUE 30100
30098: GO 30114
30100: POP
// begin ToLua ( displayStucuk(); ) ;
30101: LD_STRING displayStucuk();
30103: PPUSH
30104: CALL_OW 559
// ResetFog ;
30108: CALL_OW 335
// end ; 3 :
30112: GO 30330
30114: LD_INT 3
30116: DOUBLE
30117: EQUAL
30118: IFTRUE 30122
30120: GO 30226
30122: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30123: LD_ADDR_VAR 0 2
30127: PUSH
30128: LD_INT 22
30130: PUSH
30131: LD_OWVAR 2
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 25
30142: PUSH
30143: LD_INT 1
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PPUSH
30154: CALL_OW 69
30158: ST_TO_ADDR
// if not tmp then
30159: LD_VAR 0 2
30163: NOT
30164: IFFALSE 30168
// exit ;
30166: GO 30330
// un := tmp [ rand ( 1 , tmp ) ] ;
30168: LD_ADDR_VAR 0 3
30172: PUSH
30173: LD_VAR 0 2
30177: PUSH
30178: LD_INT 1
30180: PPUSH
30181: LD_VAR 0 2
30185: PPUSH
30186: CALL_OW 12
30190: ARRAY
30191: ST_TO_ADDR
// if Crawls ( un ) then
30192: LD_VAR 0 3
30196: PPUSH
30197: CALL_OW 318
30201: IFFALSE 30212
// ComWalk ( un ) ;
30203: LD_VAR 0 3
30207: PPUSH
30208: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30212: LD_VAR 0 3
30216: PPUSH
30217: LD_INT 8
30219: PPUSH
30220: CALL_OW 336
// end ; 4 :
30224: GO 30330
30226: LD_INT 4
30228: DOUBLE
30229: EQUAL
30230: IFTRUE 30234
30232: GO 30308
30234: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30235: LD_ADDR_VAR 0 2
30239: PUSH
30240: LD_INT 22
30242: PUSH
30243: LD_OWVAR 2
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 30
30254: PUSH
30255: LD_INT 29
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PPUSH
30266: CALL_OW 69
30270: ST_TO_ADDR
// if not tmp then
30271: LD_VAR 0 2
30275: NOT
30276: IFFALSE 30280
// exit ;
30278: GO 30330
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30280: LD_VAR 0 2
30284: PUSH
30285: LD_INT 1
30287: ARRAY
30288: PPUSH
30289: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30293: LD_VAR 0 2
30297: PUSH
30298: LD_INT 1
30300: ARRAY
30301: PPUSH
30302: CALL_OW 65
// end ; 5 .. 7 :
30306: GO 30330
30308: LD_INT 5
30310: DOUBLE
30311: GREATEREQUAL
30312: IFFALSE 30320
30314: LD_INT 7
30316: DOUBLE
30317: LESSEQUAL
30318: IFTRUE 30322
30320: GO 30329
30322: POP
// StreamSibBomb ; end ;
30323: CALL 26567 0 0
30327: GO 30330
30329: POP
// end ;
30330: PPOPN 3
30332: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30333: LD_EXP 45
30337: PUSH
30338: LD_EXP 95
30342: AND
30343: IFFALSE 30499
30345: GO 30347
30347: DISABLE
30348: LD_INT 0
30350: PPUSH
30351: PPUSH
30352: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30353: LD_ADDR_VAR 0 2
30357: PUSH
30358: LD_INT 81
30360: PUSH
30361: LD_OWVAR 2
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 2
30372: PUSH
30373: LD_INT 21
30375: PUSH
30376: LD_INT 1
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: LD_INT 21
30385: PUSH
30386: LD_INT 2
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: LIST
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PPUSH
30402: CALL_OW 69
30406: ST_TO_ADDR
// if not tmp then
30407: LD_VAR 0 2
30411: NOT
30412: IFFALSE 30416
// exit ;
30414: GO 30499
// p := 0 ;
30416: LD_ADDR_VAR 0 3
30420: PUSH
30421: LD_INT 0
30423: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30424: LD_INT 35
30426: PPUSH
30427: CALL_OW 67
// p := p + 1 ;
30431: LD_ADDR_VAR 0 3
30435: PUSH
30436: LD_VAR 0 3
30440: PUSH
30441: LD_INT 1
30443: PLUS
30444: ST_TO_ADDR
// for i in tmp do
30445: LD_ADDR_VAR 0 1
30449: PUSH
30450: LD_VAR 0 2
30454: PUSH
30455: FOR_IN
30456: IFFALSE 30487
// if GetLives ( i ) < 1000 then
30458: LD_VAR 0 1
30462: PPUSH
30463: CALL_OW 256
30467: PUSH
30468: LD_INT 1000
30470: LESS
30471: IFFALSE 30485
// SetLives ( i , 1000 ) ;
30473: LD_VAR 0 1
30477: PPUSH
30478: LD_INT 1000
30480: PPUSH
30481: CALL_OW 234
30485: GO 30455
30487: POP
30488: POP
// until p > 20 ;
30489: LD_VAR 0 3
30493: PUSH
30494: LD_INT 20
30496: GREATER
30497: IFFALSE 30424
// end ;
30499: PPOPN 3
30501: END
// every 0 0$1 trigger StreamModeActive and sTime do
30502: LD_EXP 45
30506: PUSH
30507: LD_EXP 96
30511: AND
30512: IFFALSE 30547
30514: GO 30516
30516: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30517: LD_INT 28
30519: PPUSH
30520: LD_OWVAR 2
30524: PPUSH
30525: LD_INT 2
30527: PPUSH
30528: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30532: LD_INT 30
30534: PPUSH
30535: LD_OWVAR 2
30539: PPUSH
30540: LD_INT 2
30542: PPUSH
30543: CALL_OW 322
// end ;
30547: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30548: LD_EXP 45
30552: PUSH
30553: LD_EXP 97
30557: AND
30558: IFFALSE 30679
30560: GO 30562
30562: DISABLE
30563: LD_INT 0
30565: PPUSH
30566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30567: LD_ADDR_VAR 0 2
30571: PUSH
30572: LD_INT 22
30574: PUSH
30575: LD_OWVAR 2
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: PUSH
30584: LD_INT 21
30586: PUSH
30587: LD_INT 1
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: PUSH
30594: LD_INT 3
30596: PUSH
30597: LD_INT 23
30599: PUSH
30600: LD_INT 0
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: LIST
30615: PPUSH
30616: CALL_OW 69
30620: ST_TO_ADDR
// if not tmp then
30621: LD_VAR 0 2
30625: NOT
30626: IFFALSE 30630
// exit ;
30628: GO 30679
// for i in tmp do
30630: LD_ADDR_VAR 0 1
30634: PUSH
30635: LD_VAR 0 2
30639: PUSH
30640: FOR_IN
30641: IFFALSE 30677
// begin if Crawls ( i ) then
30643: LD_VAR 0 1
30647: PPUSH
30648: CALL_OW 318
30652: IFFALSE 30663
// ComWalk ( i ) ;
30654: LD_VAR 0 1
30658: PPUSH
30659: CALL_OW 138
// SetClass ( i , 2 ) ;
30663: LD_VAR 0 1
30667: PPUSH
30668: LD_INT 2
30670: PPUSH
30671: CALL_OW 336
// end ;
30675: GO 30640
30677: POP
30678: POP
// end ;
30679: PPOPN 2
30681: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30682: LD_EXP 45
30686: PUSH
30687: LD_EXP 98
30691: AND
30692: IFFALSE 30980
30694: GO 30696
30696: DISABLE
30697: LD_INT 0
30699: PPUSH
30700: PPUSH
30701: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30702: LD_OWVAR 2
30706: PPUSH
30707: LD_INT 9
30709: PPUSH
30710: LD_INT 1
30712: PPUSH
30713: LD_INT 1
30715: PPUSH
30716: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30720: LD_INT 9
30722: PPUSH
30723: LD_OWVAR 2
30727: PPUSH
30728: CALL_OW 343
// uc_side := 9 ;
30732: LD_ADDR_OWVAR 20
30736: PUSH
30737: LD_INT 9
30739: ST_TO_ADDR
// uc_nation := 2 ;
30740: LD_ADDR_OWVAR 21
30744: PUSH
30745: LD_INT 2
30747: ST_TO_ADDR
// hc_name := Dark Warrior ;
30748: LD_ADDR_OWVAR 26
30752: PUSH
30753: LD_STRING Dark Warrior
30755: ST_TO_ADDR
// hc_gallery :=  ;
30756: LD_ADDR_OWVAR 33
30760: PUSH
30761: LD_STRING 
30763: ST_TO_ADDR
// hc_noskilllimit := true ;
30764: LD_ADDR_OWVAR 76
30768: PUSH
30769: LD_INT 1
30771: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30772: LD_ADDR_OWVAR 31
30776: PUSH
30777: LD_INT 30
30779: PUSH
30780: LD_INT 30
30782: PUSH
30783: LD_INT 30
30785: PUSH
30786: LD_INT 30
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: ST_TO_ADDR
// un := CreateHuman ;
30795: LD_ADDR_VAR 0 3
30799: PUSH
30800: CALL_OW 44
30804: ST_TO_ADDR
// hc_noskilllimit := false ;
30805: LD_ADDR_OWVAR 76
30809: PUSH
30810: LD_INT 0
30812: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30813: LD_VAR 0 3
30817: PPUSH
30818: LD_INT 1
30820: PPUSH
30821: CALL_OW 51
// ToLua ( playRanger() ) ;
30825: LD_STRING playRanger()
30827: PPUSH
30828: CALL_OW 559
// p := 0 ;
30832: LD_ADDR_VAR 0 2
30836: PUSH
30837: LD_INT 0
30839: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30840: LD_INT 35
30842: PPUSH
30843: CALL_OW 67
// p := p + 1 ;
30847: LD_ADDR_VAR 0 2
30851: PUSH
30852: LD_VAR 0 2
30856: PUSH
30857: LD_INT 1
30859: PLUS
30860: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30861: LD_VAR 0 3
30865: PPUSH
30866: CALL_OW 256
30870: PUSH
30871: LD_INT 1000
30873: LESS
30874: IFFALSE 30888
// SetLives ( un , 1000 ) ;
30876: LD_VAR 0 3
30880: PPUSH
30881: LD_INT 1000
30883: PPUSH
30884: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30888: LD_VAR 0 3
30892: PPUSH
30893: LD_INT 81
30895: PUSH
30896: LD_OWVAR 2
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 91
30907: PUSH
30908: LD_VAR 0 3
30912: PUSH
30913: LD_INT 30
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: LIST
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PPUSH
30925: CALL_OW 69
30929: PPUSH
30930: LD_VAR 0 3
30934: PPUSH
30935: CALL_OW 74
30939: PPUSH
30940: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30944: LD_VAR 0 2
30948: PUSH
30949: LD_INT 80
30951: GREATER
30952: PUSH
30953: LD_VAR 0 3
30957: PPUSH
30958: CALL_OW 301
30962: OR
30963: IFFALSE 30840
// if un then
30965: LD_VAR 0 3
30969: IFFALSE 30980
// RemoveUnit ( un ) ;
30971: LD_VAR 0 3
30975: PPUSH
30976: CALL_OW 64
// end ;
30980: PPOPN 3
30982: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30983: LD_EXP 99
30987: IFFALSE 31103
30989: GO 30991
30991: DISABLE
30992: LD_INT 0
30994: PPUSH
30995: PPUSH
30996: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30997: LD_ADDR_VAR 0 2
31001: PUSH
31002: LD_INT 81
31004: PUSH
31005: LD_OWVAR 2
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PUSH
31014: LD_INT 21
31016: PUSH
31017: LD_INT 1
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PPUSH
31028: CALL_OW 69
31032: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31033: LD_STRING playComputer()
31035: PPUSH
31036: CALL_OW 559
// if not tmp then
31040: LD_VAR 0 2
31044: NOT
31045: IFFALSE 31049
// exit ;
31047: GO 31103
// for i in tmp do
31049: LD_ADDR_VAR 0 1
31053: PUSH
31054: LD_VAR 0 2
31058: PUSH
31059: FOR_IN
31060: IFFALSE 31101
// for j := 1 to 4 do
31062: LD_ADDR_VAR 0 3
31066: PUSH
31067: DOUBLE
31068: LD_INT 1
31070: DEC
31071: ST_TO_ADDR
31072: LD_INT 4
31074: PUSH
31075: FOR_TO
31076: IFFALSE 31097
// SetSkill ( i , j , 10 ) ;
31078: LD_VAR 0 1
31082: PPUSH
31083: LD_VAR 0 3
31087: PPUSH
31088: LD_INT 10
31090: PPUSH
31091: CALL_OW 237
31095: GO 31075
31097: POP
31098: POP
31099: GO 31059
31101: POP
31102: POP
// end ;
31103: PPOPN 3
31105: END
// every 0 0$1 trigger s30 do var i , tmp ;
31106: LD_EXP 100
31110: IFFALSE 31179
31112: GO 31114
31114: DISABLE
31115: LD_INT 0
31117: PPUSH
31118: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31119: LD_ADDR_VAR 0 2
31123: PUSH
31124: LD_INT 22
31126: PUSH
31127: LD_OWVAR 2
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PPUSH
31136: CALL_OW 69
31140: ST_TO_ADDR
// if not tmp then
31141: LD_VAR 0 2
31145: NOT
31146: IFFALSE 31150
// exit ;
31148: GO 31179
// for i in tmp do
31150: LD_ADDR_VAR 0 1
31154: PUSH
31155: LD_VAR 0 2
31159: PUSH
31160: FOR_IN
31161: IFFALSE 31177
// SetLives ( i , 300 ) ;
31163: LD_VAR 0 1
31167: PPUSH
31168: LD_INT 300
31170: PPUSH
31171: CALL_OW 234
31175: GO 31160
31177: POP
31178: POP
// end ;
31179: PPOPN 2
31181: END
// every 0 0$1 trigger s60 do var i , tmp ;
31182: LD_EXP 101
31186: IFFALSE 31255
31188: GO 31190
31190: DISABLE
31191: LD_INT 0
31193: PPUSH
31194: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31195: LD_ADDR_VAR 0 2
31199: PUSH
31200: LD_INT 22
31202: PUSH
31203: LD_OWVAR 2
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PPUSH
31212: CALL_OW 69
31216: ST_TO_ADDR
// if not tmp then
31217: LD_VAR 0 2
31221: NOT
31222: IFFALSE 31226
// exit ;
31224: GO 31255
// for i in tmp do
31226: LD_ADDR_VAR 0 1
31230: PUSH
31231: LD_VAR 0 2
31235: PUSH
31236: FOR_IN
31237: IFFALSE 31253
// SetLives ( i , 600 ) ;
31239: LD_VAR 0 1
31243: PPUSH
31244: LD_INT 600
31246: PPUSH
31247: CALL_OW 234
31251: GO 31236
31253: POP
31254: POP
// end ;
31255: PPOPN 2
31257: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31258: LD_INT 0
31260: PPUSH
// case cmd of 301 :
31261: LD_VAR 0 1
31265: PUSH
31266: LD_INT 301
31268: DOUBLE
31269: EQUAL
31270: IFTRUE 31274
31272: GO 31306
31274: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31275: LD_VAR 0 6
31279: PPUSH
31280: LD_VAR 0 7
31284: PPUSH
31285: LD_VAR 0 8
31289: PPUSH
31290: LD_VAR 0 4
31294: PPUSH
31295: LD_VAR 0 5
31299: PPUSH
31300: CALL 32507 0 5
31304: GO 31427
31306: LD_INT 302
31308: DOUBLE
31309: EQUAL
31310: IFTRUE 31314
31312: GO 31351
31314: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31315: LD_VAR 0 6
31319: PPUSH
31320: LD_VAR 0 7
31324: PPUSH
31325: LD_VAR 0 8
31329: PPUSH
31330: LD_VAR 0 9
31334: PPUSH
31335: LD_VAR 0 4
31339: PPUSH
31340: LD_VAR 0 5
31344: PPUSH
31345: CALL 32598 0 6
31349: GO 31427
31351: LD_INT 303
31353: DOUBLE
31354: EQUAL
31355: IFTRUE 31359
31357: GO 31396
31359: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31360: LD_VAR 0 6
31364: PPUSH
31365: LD_VAR 0 7
31369: PPUSH
31370: LD_VAR 0 8
31374: PPUSH
31375: LD_VAR 0 9
31379: PPUSH
31380: LD_VAR 0 4
31384: PPUSH
31385: LD_VAR 0 5
31389: PPUSH
31390: CALL 31432 0 6
31394: GO 31427
31396: LD_INT 304
31398: DOUBLE
31399: EQUAL
31400: IFTRUE 31404
31402: GO 31426
31404: POP
// hHackTeleport ( unit , x , y ) ; end ;
31405: LD_VAR 0 2
31409: PPUSH
31410: LD_VAR 0 4
31414: PPUSH
31415: LD_VAR 0 5
31419: PPUSH
31420: CALL 33191 0 3
31424: GO 31427
31426: POP
// end ;
31427: LD_VAR 0 12
31431: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31432: LD_INT 0
31434: PPUSH
31435: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31436: LD_VAR 0 1
31440: PUSH
31441: LD_INT 1
31443: LESS
31444: PUSH
31445: LD_VAR 0 1
31449: PUSH
31450: LD_INT 3
31452: GREATER
31453: OR
31454: PUSH
31455: LD_VAR 0 5
31459: PPUSH
31460: LD_VAR 0 6
31464: PPUSH
31465: CALL_OW 428
31469: OR
31470: IFFALSE 31474
// exit ;
31472: GO 32194
// uc_side := your_side ;
31474: LD_ADDR_OWVAR 20
31478: PUSH
31479: LD_OWVAR 2
31483: ST_TO_ADDR
// uc_nation := nation ;
31484: LD_ADDR_OWVAR 21
31488: PUSH
31489: LD_VAR 0 1
31493: ST_TO_ADDR
// bc_level = 1 ;
31494: LD_ADDR_OWVAR 43
31498: PUSH
31499: LD_INT 1
31501: ST_TO_ADDR
// case btype of 1 :
31502: LD_VAR 0 2
31506: PUSH
31507: LD_INT 1
31509: DOUBLE
31510: EQUAL
31511: IFTRUE 31515
31513: GO 31526
31515: POP
// bc_type := b_depot ; 2 :
31516: LD_ADDR_OWVAR 42
31520: PUSH
31521: LD_INT 0
31523: ST_TO_ADDR
31524: GO 32138
31526: LD_INT 2
31528: DOUBLE
31529: EQUAL
31530: IFTRUE 31534
31532: GO 31545
31534: POP
// bc_type := b_warehouse ; 3 :
31535: LD_ADDR_OWVAR 42
31539: PUSH
31540: LD_INT 1
31542: ST_TO_ADDR
31543: GO 32138
31545: LD_INT 3
31547: DOUBLE
31548: EQUAL
31549: IFTRUE 31553
31551: GO 31564
31553: POP
// bc_type := b_lab ; 4 .. 9 :
31554: LD_ADDR_OWVAR 42
31558: PUSH
31559: LD_INT 6
31561: ST_TO_ADDR
31562: GO 32138
31564: LD_INT 4
31566: DOUBLE
31567: GREATEREQUAL
31568: IFFALSE 31576
31570: LD_INT 9
31572: DOUBLE
31573: LESSEQUAL
31574: IFTRUE 31578
31576: GO 31630
31578: POP
// begin bc_type := b_lab_half ;
31579: LD_ADDR_OWVAR 42
31583: PUSH
31584: LD_INT 7
31586: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31587: LD_ADDR_OWVAR 44
31591: PUSH
31592: LD_INT 10
31594: PUSH
31595: LD_INT 11
31597: PUSH
31598: LD_INT 12
31600: PUSH
31601: LD_INT 15
31603: PUSH
31604: LD_INT 14
31606: PUSH
31607: LD_INT 13
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: PUSH
31618: LD_VAR 0 2
31622: PUSH
31623: LD_INT 3
31625: MINUS
31626: ARRAY
31627: ST_TO_ADDR
// end ; 10 .. 13 :
31628: GO 32138
31630: LD_INT 10
31632: DOUBLE
31633: GREATEREQUAL
31634: IFFALSE 31642
31636: LD_INT 13
31638: DOUBLE
31639: LESSEQUAL
31640: IFTRUE 31644
31642: GO 31721
31644: POP
// begin bc_type := b_lab_full ;
31645: LD_ADDR_OWVAR 42
31649: PUSH
31650: LD_INT 8
31652: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31653: LD_ADDR_OWVAR 44
31657: PUSH
31658: LD_INT 10
31660: PUSH
31661: LD_INT 12
31663: PUSH
31664: LD_INT 14
31666: PUSH
31667: LD_INT 13
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: PUSH
31676: LD_VAR 0 2
31680: PUSH
31681: LD_INT 9
31683: MINUS
31684: ARRAY
31685: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31686: LD_ADDR_OWVAR 45
31690: PUSH
31691: LD_INT 11
31693: PUSH
31694: LD_INT 15
31696: PUSH
31697: LD_INT 12
31699: PUSH
31700: LD_INT 15
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: PUSH
31709: LD_VAR 0 2
31713: PUSH
31714: LD_INT 9
31716: MINUS
31717: ARRAY
31718: ST_TO_ADDR
// end ; 14 :
31719: GO 32138
31721: LD_INT 14
31723: DOUBLE
31724: EQUAL
31725: IFTRUE 31729
31727: GO 31740
31729: POP
// bc_type := b_workshop ; 15 :
31730: LD_ADDR_OWVAR 42
31734: PUSH
31735: LD_INT 2
31737: ST_TO_ADDR
31738: GO 32138
31740: LD_INT 15
31742: DOUBLE
31743: EQUAL
31744: IFTRUE 31748
31746: GO 31759
31748: POP
// bc_type := b_factory ; 16 :
31749: LD_ADDR_OWVAR 42
31753: PUSH
31754: LD_INT 3
31756: ST_TO_ADDR
31757: GO 32138
31759: LD_INT 16
31761: DOUBLE
31762: EQUAL
31763: IFTRUE 31767
31765: GO 31778
31767: POP
// bc_type := b_ext_gun ; 17 :
31768: LD_ADDR_OWVAR 42
31772: PUSH
31773: LD_INT 17
31775: ST_TO_ADDR
31776: GO 32138
31778: LD_INT 17
31780: DOUBLE
31781: EQUAL
31782: IFTRUE 31786
31784: GO 31814
31786: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31787: LD_ADDR_OWVAR 42
31791: PUSH
31792: LD_INT 19
31794: PUSH
31795: LD_INT 23
31797: PUSH
31798: LD_INT 19
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: LIST
31805: PUSH
31806: LD_VAR 0 1
31810: ARRAY
31811: ST_TO_ADDR
31812: GO 32138
31814: LD_INT 18
31816: DOUBLE
31817: EQUAL
31818: IFTRUE 31822
31820: GO 31833
31822: POP
// bc_type := b_ext_radar ; 19 :
31823: LD_ADDR_OWVAR 42
31827: PUSH
31828: LD_INT 20
31830: ST_TO_ADDR
31831: GO 32138
31833: LD_INT 19
31835: DOUBLE
31836: EQUAL
31837: IFTRUE 31841
31839: GO 31852
31841: POP
// bc_type := b_ext_radio ; 20 :
31842: LD_ADDR_OWVAR 42
31846: PUSH
31847: LD_INT 22
31849: ST_TO_ADDR
31850: GO 32138
31852: LD_INT 20
31854: DOUBLE
31855: EQUAL
31856: IFTRUE 31860
31858: GO 31871
31860: POP
// bc_type := b_ext_siberium ; 21 :
31861: LD_ADDR_OWVAR 42
31865: PUSH
31866: LD_INT 21
31868: ST_TO_ADDR
31869: GO 32138
31871: LD_INT 21
31873: DOUBLE
31874: EQUAL
31875: IFTRUE 31879
31877: GO 31890
31879: POP
// bc_type := b_ext_computer ; 22 :
31880: LD_ADDR_OWVAR 42
31884: PUSH
31885: LD_INT 24
31887: ST_TO_ADDR
31888: GO 32138
31890: LD_INT 22
31892: DOUBLE
31893: EQUAL
31894: IFTRUE 31898
31896: GO 31909
31898: POP
// bc_type := b_ext_track ; 23 :
31899: LD_ADDR_OWVAR 42
31903: PUSH
31904: LD_INT 16
31906: ST_TO_ADDR
31907: GO 32138
31909: LD_INT 23
31911: DOUBLE
31912: EQUAL
31913: IFTRUE 31917
31915: GO 31928
31917: POP
// bc_type := b_ext_laser ; 24 :
31918: LD_ADDR_OWVAR 42
31922: PUSH
31923: LD_INT 25
31925: ST_TO_ADDR
31926: GO 32138
31928: LD_INT 24
31930: DOUBLE
31931: EQUAL
31932: IFTRUE 31936
31934: GO 31947
31936: POP
// bc_type := b_control_tower ; 25 :
31937: LD_ADDR_OWVAR 42
31941: PUSH
31942: LD_INT 36
31944: ST_TO_ADDR
31945: GO 32138
31947: LD_INT 25
31949: DOUBLE
31950: EQUAL
31951: IFTRUE 31955
31953: GO 31966
31955: POP
// bc_type := b_breastwork ; 26 :
31956: LD_ADDR_OWVAR 42
31960: PUSH
31961: LD_INT 31
31963: ST_TO_ADDR
31964: GO 32138
31966: LD_INT 26
31968: DOUBLE
31969: EQUAL
31970: IFTRUE 31974
31972: GO 31985
31974: POP
// bc_type := b_bunker ; 27 :
31975: LD_ADDR_OWVAR 42
31979: PUSH
31980: LD_INT 32
31982: ST_TO_ADDR
31983: GO 32138
31985: LD_INT 27
31987: DOUBLE
31988: EQUAL
31989: IFTRUE 31993
31991: GO 32004
31993: POP
// bc_type := b_turret ; 28 :
31994: LD_ADDR_OWVAR 42
31998: PUSH
31999: LD_INT 33
32001: ST_TO_ADDR
32002: GO 32138
32004: LD_INT 28
32006: DOUBLE
32007: EQUAL
32008: IFTRUE 32012
32010: GO 32023
32012: POP
// bc_type := b_armoury ; 29 :
32013: LD_ADDR_OWVAR 42
32017: PUSH
32018: LD_INT 4
32020: ST_TO_ADDR
32021: GO 32138
32023: LD_INT 29
32025: DOUBLE
32026: EQUAL
32027: IFTRUE 32031
32029: GO 32042
32031: POP
// bc_type := b_barracks ; 30 :
32032: LD_ADDR_OWVAR 42
32036: PUSH
32037: LD_INT 5
32039: ST_TO_ADDR
32040: GO 32138
32042: LD_INT 30
32044: DOUBLE
32045: EQUAL
32046: IFTRUE 32050
32048: GO 32061
32050: POP
// bc_type := b_solar_power ; 31 :
32051: LD_ADDR_OWVAR 42
32055: PUSH
32056: LD_INT 27
32058: ST_TO_ADDR
32059: GO 32138
32061: LD_INT 31
32063: DOUBLE
32064: EQUAL
32065: IFTRUE 32069
32067: GO 32080
32069: POP
// bc_type := b_oil_power ; 32 :
32070: LD_ADDR_OWVAR 42
32074: PUSH
32075: LD_INT 26
32077: ST_TO_ADDR
32078: GO 32138
32080: LD_INT 32
32082: DOUBLE
32083: EQUAL
32084: IFTRUE 32088
32086: GO 32099
32088: POP
// bc_type := b_siberite_power ; 33 :
32089: LD_ADDR_OWVAR 42
32093: PUSH
32094: LD_INT 28
32096: ST_TO_ADDR
32097: GO 32138
32099: LD_INT 33
32101: DOUBLE
32102: EQUAL
32103: IFTRUE 32107
32105: GO 32118
32107: POP
// bc_type := b_oil_mine ; 34 :
32108: LD_ADDR_OWVAR 42
32112: PUSH
32113: LD_INT 29
32115: ST_TO_ADDR
32116: GO 32138
32118: LD_INT 34
32120: DOUBLE
32121: EQUAL
32122: IFTRUE 32126
32124: GO 32137
32126: POP
// bc_type := b_siberite_mine ; end ;
32127: LD_ADDR_OWVAR 42
32131: PUSH
32132: LD_INT 30
32134: ST_TO_ADDR
32135: GO 32138
32137: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32138: LD_ADDR_VAR 0 8
32142: PUSH
32143: LD_VAR 0 5
32147: PPUSH
32148: LD_VAR 0 6
32152: PPUSH
32153: LD_VAR 0 3
32157: PPUSH
32158: CALL_OW 47
32162: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32163: LD_OWVAR 42
32167: PUSH
32168: LD_INT 32
32170: PUSH
32171: LD_INT 33
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: IN
32178: IFFALSE 32194
// PlaceWeaponTurret ( b , weapon ) ;
32180: LD_VAR 0 8
32184: PPUSH
32185: LD_VAR 0 4
32189: PPUSH
32190: CALL_OW 431
// end ;
32194: LD_VAR 0 7
32198: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32199: LD_INT 0
32201: PPUSH
32202: PPUSH
32203: PPUSH
32204: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32205: LD_ADDR_VAR 0 4
32209: PUSH
32210: LD_INT 22
32212: PUSH
32213: LD_OWVAR 2
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 2
32224: PUSH
32225: LD_INT 30
32227: PUSH
32228: LD_INT 0
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 30
32237: PUSH
32238: LD_INT 1
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: LIST
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PPUSH
32254: CALL_OW 69
32258: ST_TO_ADDR
// if not tmp then
32259: LD_VAR 0 4
32263: NOT
32264: IFFALSE 32268
// exit ;
32266: GO 32327
// for i in tmp do
32268: LD_ADDR_VAR 0 2
32272: PUSH
32273: LD_VAR 0 4
32277: PUSH
32278: FOR_IN
32279: IFFALSE 32325
// for j = 1 to 3 do
32281: LD_ADDR_VAR 0 3
32285: PUSH
32286: DOUBLE
32287: LD_INT 1
32289: DEC
32290: ST_TO_ADDR
32291: LD_INT 3
32293: PUSH
32294: FOR_TO
32295: IFFALSE 32321
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32297: LD_VAR 0 2
32301: PPUSH
32302: CALL_OW 274
32306: PPUSH
32307: LD_VAR 0 3
32311: PPUSH
32312: LD_INT 99999
32314: PPUSH
32315: CALL_OW 277
32319: GO 32294
32321: POP
32322: POP
32323: GO 32278
32325: POP
32326: POP
// end ;
32327: LD_VAR 0 1
32331: RET
// export function hHackSetLevel10 ; var i , j ; begin
32332: LD_INT 0
32334: PPUSH
32335: PPUSH
32336: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32337: LD_ADDR_VAR 0 2
32341: PUSH
32342: LD_INT 21
32344: PUSH
32345: LD_INT 1
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PPUSH
32352: CALL_OW 69
32356: PUSH
32357: FOR_IN
32358: IFFALSE 32410
// if IsSelected ( i ) then
32360: LD_VAR 0 2
32364: PPUSH
32365: CALL_OW 306
32369: IFFALSE 32408
// begin for j := 1 to 4 do
32371: LD_ADDR_VAR 0 3
32375: PUSH
32376: DOUBLE
32377: LD_INT 1
32379: DEC
32380: ST_TO_ADDR
32381: LD_INT 4
32383: PUSH
32384: FOR_TO
32385: IFFALSE 32406
// SetSkill ( i , j , 10 ) ;
32387: LD_VAR 0 2
32391: PPUSH
32392: LD_VAR 0 3
32396: PPUSH
32397: LD_INT 10
32399: PPUSH
32400: CALL_OW 237
32404: GO 32384
32406: POP
32407: POP
// end ;
32408: GO 32357
32410: POP
32411: POP
// end ;
32412: LD_VAR 0 1
32416: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32417: LD_INT 0
32419: PPUSH
32420: PPUSH
32421: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32422: LD_ADDR_VAR 0 2
32426: PUSH
32427: LD_INT 22
32429: PUSH
32430: LD_OWVAR 2
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: LD_INT 21
32441: PUSH
32442: LD_INT 1
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PPUSH
32453: CALL_OW 69
32457: PUSH
32458: FOR_IN
32459: IFFALSE 32500
// begin for j := 1 to 4 do
32461: LD_ADDR_VAR 0 3
32465: PUSH
32466: DOUBLE
32467: LD_INT 1
32469: DEC
32470: ST_TO_ADDR
32471: LD_INT 4
32473: PUSH
32474: FOR_TO
32475: IFFALSE 32496
// SetSkill ( i , j , 10 ) ;
32477: LD_VAR 0 2
32481: PPUSH
32482: LD_VAR 0 3
32486: PPUSH
32487: LD_INT 10
32489: PPUSH
32490: CALL_OW 237
32494: GO 32474
32496: POP
32497: POP
// end ;
32498: GO 32458
32500: POP
32501: POP
// end ;
32502: LD_VAR 0 1
32506: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32507: LD_INT 0
32509: PPUSH
// uc_side := your_side ;
32510: LD_ADDR_OWVAR 20
32514: PUSH
32515: LD_OWVAR 2
32519: ST_TO_ADDR
// uc_nation := nation ;
32520: LD_ADDR_OWVAR 21
32524: PUSH
32525: LD_VAR 0 1
32529: ST_TO_ADDR
// InitHc ;
32530: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32534: LD_INT 0
32536: PPUSH
32537: LD_VAR 0 2
32541: PPUSH
32542: LD_VAR 0 3
32546: PPUSH
32547: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32551: LD_VAR 0 4
32555: PPUSH
32556: LD_VAR 0 5
32560: PPUSH
32561: CALL_OW 428
32565: PUSH
32566: LD_INT 0
32568: EQUAL
32569: IFFALSE 32593
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32571: CALL_OW 44
32575: PPUSH
32576: LD_VAR 0 4
32580: PPUSH
32581: LD_VAR 0 5
32585: PPUSH
32586: LD_INT 1
32588: PPUSH
32589: CALL_OW 48
// end ;
32593: LD_VAR 0 6
32597: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32598: LD_INT 0
32600: PPUSH
32601: PPUSH
// uc_side := your_side ;
32602: LD_ADDR_OWVAR 20
32606: PUSH
32607: LD_OWVAR 2
32611: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32612: LD_VAR 0 1
32616: PUSH
32617: LD_INT 1
32619: PUSH
32620: LD_INT 2
32622: PUSH
32623: LD_INT 3
32625: PUSH
32626: LD_INT 4
32628: PUSH
32629: LD_INT 5
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: IN
32639: IFFALSE 32651
// uc_nation := nation_american else
32641: LD_ADDR_OWVAR 21
32645: PUSH
32646: LD_INT 1
32648: ST_TO_ADDR
32649: GO 32694
// if chassis in [ 11 , 12 , 13 , 14 ] then
32651: LD_VAR 0 1
32655: PUSH
32656: LD_INT 11
32658: PUSH
32659: LD_INT 12
32661: PUSH
32662: LD_INT 13
32664: PUSH
32665: LD_INT 14
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: IN
32674: IFFALSE 32686
// uc_nation := nation_arabian else
32676: LD_ADDR_OWVAR 21
32680: PUSH
32681: LD_INT 2
32683: ST_TO_ADDR
32684: GO 32694
// uc_nation := nation_russian ;
32686: LD_ADDR_OWVAR 21
32690: PUSH
32691: LD_INT 3
32693: ST_TO_ADDR
// vc_chassis := chassis ;
32694: LD_ADDR_OWVAR 37
32698: PUSH
32699: LD_VAR 0 1
32703: ST_TO_ADDR
// vc_engine := engine ;
32704: LD_ADDR_OWVAR 39
32708: PUSH
32709: LD_VAR 0 2
32713: ST_TO_ADDR
// vc_control := control ;
32714: LD_ADDR_OWVAR 38
32718: PUSH
32719: LD_VAR 0 3
32723: ST_TO_ADDR
// vc_weapon := weapon ;
32724: LD_ADDR_OWVAR 40
32728: PUSH
32729: LD_VAR 0 4
32733: ST_TO_ADDR
// un := CreateVehicle ;
32734: LD_ADDR_VAR 0 8
32738: PUSH
32739: CALL_OW 45
32743: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32744: LD_VAR 0 8
32748: PPUSH
32749: LD_INT 0
32751: PPUSH
32752: LD_INT 5
32754: PPUSH
32755: CALL_OW 12
32759: PPUSH
32760: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32764: LD_VAR 0 8
32768: PPUSH
32769: LD_VAR 0 5
32773: PPUSH
32774: LD_VAR 0 6
32778: PPUSH
32779: LD_INT 1
32781: PPUSH
32782: CALL_OW 48
// end ;
32786: LD_VAR 0 7
32790: RET
// export hInvincible ; every 1 do
32791: GO 32793
32793: DISABLE
// hInvincible := [ ] ;
32794: LD_ADDR_EXP 102
32798: PUSH
32799: EMPTY
32800: ST_TO_ADDR
32801: END
// every 10 do var i ;
32802: GO 32804
32804: DISABLE
32805: LD_INT 0
32807: PPUSH
// begin enable ;
32808: ENABLE
// if not hInvincible then
32809: LD_EXP 102
32813: NOT
32814: IFFALSE 32818
// exit ;
32816: GO 32862
// for i in hInvincible do
32818: LD_ADDR_VAR 0 1
32822: PUSH
32823: LD_EXP 102
32827: PUSH
32828: FOR_IN
32829: IFFALSE 32860
// if GetLives ( i ) < 1000 then
32831: LD_VAR 0 1
32835: PPUSH
32836: CALL_OW 256
32840: PUSH
32841: LD_INT 1000
32843: LESS
32844: IFFALSE 32858
// SetLives ( i , 1000 ) ;
32846: LD_VAR 0 1
32850: PPUSH
32851: LD_INT 1000
32853: PPUSH
32854: CALL_OW 234
32858: GO 32828
32860: POP
32861: POP
// end ;
32862: PPOPN 1
32864: END
// export function hHackInvincible ; var i ; begin
32865: LD_INT 0
32867: PPUSH
32868: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32869: LD_ADDR_VAR 0 2
32873: PUSH
32874: LD_INT 2
32876: PUSH
32877: LD_INT 21
32879: PUSH
32880: LD_INT 1
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: LD_INT 21
32889: PUSH
32890: LD_INT 2
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: LIST
32901: PPUSH
32902: CALL_OW 69
32906: PUSH
32907: FOR_IN
32908: IFFALSE 32969
// if IsSelected ( i ) then
32910: LD_VAR 0 2
32914: PPUSH
32915: CALL_OW 306
32919: IFFALSE 32967
// begin if i in hInvincible then
32921: LD_VAR 0 2
32925: PUSH
32926: LD_EXP 102
32930: IN
32931: IFFALSE 32951
// hInvincible := hInvincible diff i else
32933: LD_ADDR_EXP 102
32937: PUSH
32938: LD_EXP 102
32942: PUSH
32943: LD_VAR 0 2
32947: DIFF
32948: ST_TO_ADDR
32949: GO 32967
// hInvincible := hInvincible union i ;
32951: LD_ADDR_EXP 102
32955: PUSH
32956: LD_EXP 102
32960: PUSH
32961: LD_VAR 0 2
32965: UNION
32966: ST_TO_ADDR
// end ;
32967: GO 32907
32969: POP
32970: POP
// end ;
32971: LD_VAR 0 1
32975: RET
// export function hHackInvisible ; var i , j ; begin
32976: LD_INT 0
32978: PPUSH
32979: PPUSH
32980: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32981: LD_ADDR_VAR 0 2
32985: PUSH
32986: LD_INT 21
32988: PUSH
32989: LD_INT 1
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PPUSH
32996: CALL_OW 69
33000: PUSH
33001: FOR_IN
33002: IFFALSE 33026
// if IsSelected ( i ) then
33004: LD_VAR 0 2
33008: PPUSH
33009: CALL_OW 306
33013: IFFALSE 33024
// ComForceInvisible ( i ) ;
33015: LD_VAR 0 2
33019: PPUSH
33020: CALL_OW 496
33024: GO 33001
33026: POP
33027: POP
// end ;
33028: LD_VAR 0 1
33032: RET
// export function hHackChangeYourSide ; begin
33033: LD_INT 0
33035: PPUSH
// if your_side = 8 then
33036: LD_OWVAR 2
33040: PUSH
33041: LD_INT 8
33043: EQUAL
33044: IFFALSE 33056
// your_side := 0 else
33046: LD_ADDR_OWVAR 2
33050: PUSH
33051: LD_INT 0
33053: ST_TO_ADDR
33054: GO 33070
// your_side := your_side + 1 ;
33056: LD_ADDR_OWVAR 2
33060: PUSH
33061: LD_OWVAR 2
33065: PUSH
33066: LD_INT 1
33068: PLUS
33069: ST_TO_ADDR
// end ;
33070: LD_VAR 0 1
33074: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33075: LD_INT 0
33077: PPUSH
33078: PPUSH
33079: PPUSH
// for i in all_units do
33080: LD_ADDR_VAR 0 2
33084: PUSH
33085: LD_OWVAR 3
33089: PUSH
33090: FOR_IN
33091: IFFALSE 33169
// if IsSelected ( i ) then
33093: LD_VAR 0 2
33097: PPUSH
33098: CALL_OW 306
33102: IFFALSE 33167
// begin j := GetSide ( i ) ;
33104: LD_ADDR_VAR 0 3
33108: PUSH
33109: LD_VAR 0 2
33113: PPUSH
33114: CALL_OW 255
33118: ST_TO_ADDR
// if j = 8 then
33119: LD_VAR 0 3
33123: PUSH
33124: LD_INT 8
33126: EQUAL
33127: IFFALSE 33139
// j := 0 else
33129: LD_ADDR_VAR 0 3
33133: PUSH
33134: LD_INT 0
33136: ST_TO_ADDR
33137: GO 33153
// j := j + 1 ;
33139: LD_ADDR_VAR 0 3
33143: PUSH
33144: LD_VAR 0 3
33148: PUSH
33149: LD_INT 1
33151: PLUS
33152: ST_TO_ADDR
// SetSide ( i , j ) ;
33153: LD_VAR 0 2
33157: PPUSH
33158: LD_VAR 0 3
33162: PPUSH
33163: CALL_OW 235
// end ;
33167: GO 33090
33169: POP
33170: POP
// end ;
33171: LD_VAR 0 1
33175: RET
// export function hHackFog ; begin
33176: LD_INT 0
33178: PPUSH
// FogOff ( true ) ;
33179: LD_INT 1
33181: PPUSH
33182: CALL_OW 344
// end ;
33186: LD_VAR 0 1
33190: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33191: LD_INT 0
33193: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33194: LD_VAR 0 1
33198: PPUSH
33199: LD_VAR 0 2
33203: PPUSH
33204: LD_VAR 0 3
33208: PPUSH
33209: LD_INT 1
33211: PPUSH
33212: LD_INT 1
33214: PPUSH
33215: CALL_OW 483
// CenterOnXY ( x , y ) ;
33219: LD_VAR 0 2
33223: PPUSH
33224: LD_VAR 0 3
33228: PPUSH
33229: CALL_OW 84
// end ;
33233: LD_VAR 0 4
33237: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33238: LD_INT 0
33240: PPUSH
33241: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33242: LD_VAR 0 1
33246: NOT
33247: PUSH
33248: LD_VAR 0 2
33252: PPUSH
33253: LD_VAR 0 3
33257: PPUSH
33258: CALL_OW 488
33262: NOT
33263: OR
33264: PUSH
33265: LD_VAR 0 1
33269: PPUSH
33270: CALL_OW 266
33274: PUSH
33275: LD_INT 3
33277: NONEQUAL
33278: PUSH
33279: LD_VAR 0 1
33283: PPUSH
33284: CALL_OW 247
33288: PUSH
33289: LD_INT 1
33291: EQUAL
33292: NOT
33293: AND
33294: OR
33295: IFFALSE 33299
// exit ;
33297: GO 33448
// if GetType ( factory ) = unit_human then
33299: LD_VAR 0 1
33303: PPUSH
33304: CALL_OW 247
33308: PUSH
33309: LD_INT 1
33311: EQUAL
33312: IFFALSE 33329
// factory := IsInUnit ( factory ) ;
33314: LD_ADDR_VAR 0 1
33318: PUSH
33319: LD_VAR 0 1
33323: PPUSH
33324: CALL_OW 310
33328: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33329: LD_VAR 0 1
33333: PPUSH
33334: CALL_OW 266
33338: PUSH
33339: LD_INT 3
33341: NONEQUAL
33342: IFFALSE 33346
// exit ;
33344: GO 33448
// if HexInfo ( x , y ) = factory then
33346: LD_VAR 0 2
33350: PPUSH
33351: LD_VAR 0 3
33355: PPUSH
33356: CALL_OW 428
33360: PUSH
33361: LD_VAR 0 1
33365: EQUAL
33366: IFFALSE 33393
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33368: LD_ADDR_EXP 103
33372: PUSH
33373: LD_EXP 103
33377: PPUSH
33378: LD_VAR 0 1
33382: PPUSH
33383: LD_INT 0
33385: PPUSH
33386: CALL_OW 1
33390: ST_TO_ADDR
33391: GO 33444
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33393: LD_ADDR_EXP 103
33397: PUSH
33398: LD_EXP 103
33402: PPUSH
33403: LD_VAR 0 1
33407: PPUSH
33408: LD_VAR 0 1
33412: PPUSH
33413: CALL_OW 255
33417: PUSH
33418: LD_VAR 0 1
33422: PUSH
33423: LD_VAR 0 2
33427: PUSH
33428: LD_VAR 0 3
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: PPUSH
33439: CALL_OW 1
33443: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33444: CALL 33453 0 0
// end ;
33448: LD_VAR 0 4
33452: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33453: LD_INT 0
33455: PPUSH
33456: PPUSH
33457: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33458: LD_STRING resetFactoryWaypoint();
33460: PPUSH
33461: CALL_OW 559
// if factoryWaypoints then
33465: LD_EXP 103
33469: IFFALSE 33595
// begin list := PrepareArray ( factoryWaypoints ) ;
33471: LD_ADDR_VAR 0 3
33475: PUSH
33476: LD_EXP 103
33480: PPUSH
33481: CALL 79972 0 1
33485: ST_TO_ADDR
// for i := 1 to list do
33486: LD_ADDR_VAR 0 2
33490: PUSH
33491: DOUBLE
33492: LD_INT 1
33494: DEC
33495: ST_TO_ADDR
33496: LD_VAR 0 3
33500: PUSH
33501: FOR_TO
33502: IFFALSE 33593
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33504: LD_STRING setFactoryWaypointXY(
33506: PUSH
33507: LD_VAR 0 3
33511: PUSH
33512: LD_VAR 0 2
33516: ARRAY
33517: PUSH
33518: LD_INT 1
33520: ARRAY
33521: STR
33522: PUSH
33523: LD_STRING ,
33525: STR
33526: PUSH
33527: LD_VAR 0 3
33531: PUSH
33532: LD_VAR 0 2
33536: ARRAY
33537: PUSH
33538: LD_INT 2
33540: ARRAY
33541: STR
33542: PUSH
33543: LD_STRING ,
33545: STR
33546: PUSH
33547: LD_VAR 0 3
33551: PUSH
33552: LD_VAR 0 2
33556: ARRAY
33557: PUSH
33558: LD_INT 3
33560: ARRAY
33561: STR
33562: PUSH
33563: LD_STRING ,
33565: STR
33566: PUSH
33567: LD_VAR 0 3
33571: PUSH
33572: LD_VAR 0 2
33576: ARRAY
33577: PUSH
33578: LD_INT 4
33580: ARRAY
33581: STR
33582: PUSH
33583: LD_STRING )
33585: STR
33586: PPUSH
33587: CALL_OW 559
33591: GO 33501
33593: POP
33594: POP
// end ; end ;
33595: LD_VAR 0 1
33599: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33600: LD_INT 0
33602: PPUSH
// if HexInfo ( x , y ) = warehouse then
33603: LD_VAR 0 2
33607: PPUSH
33608: LD_VAR 0 3
33612: PPUSH
33613: CALL_OW 428
33617: PUSH
33618: LD_VAR 0 1
33622: EQUAL
33623: IFFALSE 33650
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33625: LD_ADDR_EXP 104
33629: PUSH
33630: LD_EXP 104
33634: PPUSH
33635: LD_VAR 0 1
33639: PPUSH
33640: LD_INT 0
33642: PPUSH
33643: CALL_OW 1
33647: ST_TO_ADDR
33648: GO 33701
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33650: LD_ADDR_EXP 104
33654: PUSH
33655: LD_EXP 104
33659: PPUSH
33660: LD_VAR 0 1
33664: PPUSH
33665: LD_VAR 0 1
33669: PPUSH
33670: CALL_OW 255
33674: PUSH
33675: LD_VAR 0 1
33679: PUSH
33680: LD_VAR 0 2
33684: PUSH
33685: LD_VAR 0 3
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: PPUSH
33696: CALL_OW 1
33700: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
33701: CALL 33710 0 0
// end ;
33705: LD_VAR 0 4
33709: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
33710: LD_INT 0
33712: PPUSH
33713: PPUSH
33714: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
33715: LD_STRING resetWarehouseGatheringPoints();
33717: PPUSH
33718: CALL_OW 559
// if warehouseGatheringPoints then
33722: LD_EXP 104
33726: IFFALSE 33852
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
33728: LD_ADDR_VAR 0 3
33732: PUSH
33733: LD_EXP 104
33737: PPUSH
33738: CALL 79972 0 1
33742: ST_TO_ADDR
// for i := 1 to list do
33743: LD_ADDR_VAR 0 2
33747: PUSH
33748: DOUBLE
33749: LD_INT 1
33751: DEC
33752: ST_TO_ADDR
33753: LD_VAR 0 3
33757: PUSH
33758: FOR_TO
33759: IFFALSE 33850
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33761: LD_STRING setWarehouseGatheringPointXY(
33763: PUSH
33764: LD_VAR 0 3
33768: PUSH
33769: LD_VAR 0 2
33773: ARRAY
33774: PUSH
33775: LD_INT 1
33777: ARRAY
33778: STR
33779: PUSH
33780: LD_STRING ,
33782: STR
33783: PUSH
33784: LD_VAR 0 3
33788: PUSH
33789: LD_VAR 0 2
33793: ARRAY
33794: PUSH
33795: LD_INT 2
33797: ARRAY
33798: STR
33799: PUSH
33800: LD_STRING ,
33802: STR
33803: PUSH
33804: LD_VAR 0 3
33808: PUSH
33809: LD_VAR 0 2
33813: ARRAY
33814: PUSH
33815: LD_INT 3
33817: ARRAY
33818: STR
33819: PUSH
33820: LD_STRING ,
33822: STR
33823: PUSH
33824: LD_VAR 0 3
33828: PUSH
33829: LD_VAR 0 2
33833: ARRAY
33834: PUSH
33835: LD_INT 4
33837: ARRAY
33838: STR
33839: PUSH
33840: LD_STRING )
33842: STR
33843: PPUSH
33844: CALL_OW 559
33848: GO 33758
33850: POP
33851: POP
// end ; end ;
33852: LD_VAR 0 1
33856: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
33857: LD_EXP 104
33861: IFFALSE 34546
33863: GO 33865
33865: DISABLE
33866: LD_INT 0
33868: PPUSH
33869: PPUSH
33870: PPUSH
33871: PPUSH
33872: PPUSH
33873: PPUSH
33874: PPUSH
33875: PPUSH
33876: PPUSH
// begin enable ;
33877: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
33878: LD_ADDR_VAR 0 3
33882: PUSH
33883: LD_EXP 104
33887: PPUSH
33888: CALL 79972 0 1
33892: ST_TO_ADDR
// if not list then
33893: LD_VAR 0 3
33897: NOT
33898: IFFALSE 33902
// exit ;
33900: GO 34546
// for i := 1 to list do
33902: LD_ADDR_VAR 0 1
33906: PUSH
33907: DOUBLE
33908: LD_INT 1
33910: DEC
33911: ST_TO_ADDR
33912: LD_VAR 0 3
33916: PUSH
33917: FOR_TO
33918: IFFALSE 34544
// begin depot := list [ i ] [ 2 ] ;
33920: LD_ADDR_VAR 0 8
33924: PUSH
33925: LD_VAR 0 3
33929: PUSH
33930: LD_VAR 0 1
33934: ARRAY
33935: PUSH
33936: LD_INT 2
33938: ARRAY
33939: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
33940: LD_ADDR_VAR 0 5
33944: PUSH
33945: LD_VAR 0 3
33949: PUSH
33950: LD_VAR 0 1
33954: ARRAY
33955: PUSH
33956: LD_INT 1
33958: ARRAY
33959: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
33960: LD_VAR 0 8
33964: PPUSH
33965: CALL_OW 301
33969: PUSH
33970: LD_VAR 0 5
33974: PUSH
33975: LD_VAR 0 8
33979: PPUSH
33980: CALL_OW 255
33984: NONEQUAL
33985: OR
33986: IFFALSE 34015
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
33988: LD_ADDR_EXP 104
33992: PUSH
33993: LD_EXP 104
33997: PPUSH
33998: LD_VAR 0 8
34002: PPUSH
34003: LD_INT 0
34005: PPUSH
34006: CALL_OW 1
34010: ST_TO_ADDR
// exit ;
34011: POP
34012: POP
34013: GO 34546
// end ; x := list [ i ] [ 3 ] ;
34015: LD_ADDR_VAR 0 6
34019: PUSH
34020: LD_VAR 0 3
34024: PUSH
34025: LD_VAR 0 1
34029: ARRAY
34030: PUSH
34031: LD_INT 3
34033: ARRAY
34034: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34035: LD_ADDR_VAR 0 7
34039: PUSH
34040: LD_VAR 0 3
34044: PUSH
34045: LD_VAR 0 1
34049: ARRAY
34050: PUSH
34051: LD_INT 4
34053: ARRAY
34054: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34055: LD_ADDR_VAR 0 9
34059: PUSH
34060: LD_VAR 0 6
34064: PPUSH
34065: LD_VAR 0 7
34069: PPUSH
34070: LD_INT 16
34072: PPUSH
34073: CALL 78560 0 3
34077: ST_TO_ADDR
// if not cratesNearbyPoint then
34078: LD_VAR 0 9
34082: NOT
34083: IFFALSE 34089
// exit ;
34085: POP
34086: POP
34087: GO 34546
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34089: LD_ADDR_VAR 0 4
34093: PUSH
34094: LD_INT 22
34096: PUSH
34097: LD_VAR 0 5
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: LD_INT 3
34108: PUSH
34109: LD_INT 60
34111: PUSH
34112: EMPTY
34113: LIST
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: PUSH
34119: LD_INT 91
34121: PUSH
34122: LD_VAR 0 8
34126: PUSH
34127: LD_INT 6
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 2
34137: PUSH
34138: LD_INT 25
34140: PUSH
34141: LD_INT 2
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: PUSH
34148: LD_INT 25
34150: PUSH
34151: LD_INT 16
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: LIST
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: PPUSH
34169: CALL_OW 69
34173: PUSH
34174: LD_VAR 0 8
34178: PPUSH
34179: CALL_OW 313
34183: PPUSH
34184: LD_INT 3
34186: PUSH
34187: LD_INT 60
34189: PUSH
34190: EMPTY
34191: LIST
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: PUSH
34197: LD_INT 2
34199: PUSH
34200: LD_INT 25
34202: PUSH
34203: LD_INT 2
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 25
34212: PUSH
34213: LD_INT 16
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: LIST
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PPUSH
34229: CALL_OW 72
34233: UNION
34234: ST_TO_ADDR
// if tmp then
34235: LD_VAR 0 4
34239: IFFALSE 34319
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34241: LD_ADDR_VAR 0 4
34245: PUSH
34246: LD_VAR 0 4
34250: PPUSH
34251: LD_INT 3
34253: PPUSH
34254: CALL 76529 0 2
34258: ST_TO_ADDR
// for j in tmp do
34259: LD_ADDR_VAR 0 2
34263: PUSH
34264: LD_VAR 0 4
34268: PUSH
34269: FOR_IN
34270: IFFALSE 34313
// begin if IsInUnit ( j ) then
34272: LD_VAR 0 2
34276: PPUSH
34277: CALL_OW 310
34281: IFFALSE 34292
// ComExit ( j ) ;
34283: LD_VAR 0 2
34287: PPUSH
34288: CALL 76612 0 1
// AddComCollect ( j , x , y ) ;
34292: LD_VAR 0 2
34296: PPUSH
34297: LD_VAR 0 6
34301: PPUSH
34302: LD_VAR 0 7
34306: PPUSH
34307: CALL_OW 177
// end ;
34311: GO 34269
34313: POP
34314: POP
// exit ;
34315: POP
34316: POP
34317: GO 34546
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34319: LD_ADDR_VAR 0 4
34323: PUSH
34324: LD_INT 22
34326: PUSH
34327: LD_VAR 0 5
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: PUSH
34336: LD_INT 91
34338: PUSH
34339: LD_VAR 0 8
34343: PUSH
34344: LD_INT 8
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 2
34354: PUSH
34355: LD_INT 34
34357: PUSH
34358: LD_INT 12
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: PUSH
34365: LD_INT 34
34367: PUSH
34368: LD_INT 51
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 34
34377: PUSH
34378: LD_INT 32
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PUSH
34385: LD_INT 34
34387: PUSH
34388: LD_INT 89
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: LIST
34406: PPUSH
34407: CALL_OW 69
34411: ST_TO_ADDR
// if tmp then
34412: LD_VAR 0 4
34416: IFFALSE 34542
// begin for j in tmp do
34418: LD_ADDR_VAR 0 2
34422: PUSH
34423: LD_VAR 0 4
34427: PUSH
34428: FOR_IN
34429: IFFALSE 34540
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34431: LD_VAR 0 2
34435: PPUSH
34436: CALL_OW 262
34440: PUSH
34441: LD_INT 3
34443: EQUAL
34444: PUSH
34445: LD_VAR 0 2
34449: PPUSH
34450: CALL_OW 261
34454: PUSH
34455: LD_INT 20
34457: GREATER
34458: OR
34459: PUSH
34460: LD_VAR 0 2
34464: PPUSH
34465: CALL_OW 314
34469: NOT
34470: AND
34471: PUSH
34472: LD_VAR 0 2
34476: PPUSH
34477: CALL_OW 263
34481: PUSH
34482: LD_INT 1
34484: NONEQUAL
34485: PUSH
34486: LD_VAR 0 2
34490: PPUSH
34491: CALL_OW 311
34495: OR
34496: AND
34497: IFFALSE 34538
// begin ComCollect ( j , x , y ) ;
34499: LD_VAR 0 2
34503: PPUSH
34504: LD_VAR 0 6
34508: PPUSH
34509: LD_VAR 0 7
34513: PPUSH
34514: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34518: LD_VAR 0 2
34522: PPUSH
34523: LD_VAR 0 8
34527: PPUSH
34528: CALL_OW 172
// exit ;
34532: POP
34533: POP
34534: POP
34535: POP
34536: GO 34546
// end ;
34538: GO 34428
34540: POP
34541: POP
// end ; end ;
34542: GO 33917
34544: POP
34545: POP
// end ; end_of_file
34546: PPOPN 9
34548: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34549: LD_INT 0
34551: PPUSH
34552: PPUSH
34553: PPUSH
34554: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34555: LD_VAR 0 1
34559: PPUSH
34560: CALL_OW 264
34564: PUSH
34565: LD_INT 91
34567: EQUAL
34568: IFFALSE 34640
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34570: LD_INT 68
34572: PPUSH
34573: LD_VAR 0 1
34577: PPUSH
34578: CALL_OW 255
34582: PPUSH
34583: CALL_OW 321
34587: PUSH
34588: LD_INT 2
34590: EQUAL
34591: IFFALSE 34603
// eff := 70 else
34593: LD_ADDR_VAR 0 4
34597: PUSH
34598: LD_INT 70
34600: ST_TO_ADDR
34601: GO 34611
// eff := 30 ;
34603: LD_ADDR_VAR 0 4
34607: PUSH
34608: LD_INT 30
34610: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34611: LD_VAR 0 1
34615: PPUSH
34616: CALL_OW 250
34620: PPUSH
34621: LD_VAR 0 1
34625: PPUSH
34626: CALL_OW 251
34630: PPUSH
34631: LD_VAR 0 4
34635: PPUSH
34636: CALL_OW 495
// end ; end ;
34640: LD_VAR 0 2
34644: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34645: LD_INT 0
34647: PPUSH
// end ;
34648: LD_VAR 0 4
34652: RET
// export function SOS_Command ( cmd ) ; begin
34653: LD_INT 0
34655: PPUSH
// end ;
34656: LD_VAR 0 2
34660: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34661: LD_INT 0
34663: PPUSH
// end ;
34664: LD_VAR 0 6
34668: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34669: LD_INT 0
34671: PPUSH
34672: PPUSH
// if not vehicle or not factory then
34673: LD_VAR 0 1
34677: NOT
34678: PUSH
34679: LD_VAR 0 2
34683: NOT
34684: OR
34685: IFFALSE 34689
// exit ;
34687: GO 34920
// if factoryWaypoints >= factory then
34689: LD_EXP 103
34693: PUSH
34694: LD_VAR 0 2
34698: GREATEREQUAL
34699: IFFALSE 34920
// if factoryWaypoints [ factory ] then
34701: LD_EXP 103
34705: PUSH
34706: LD_VAR 0 2
34710: ARRAY
34711: IFFALSE 34920
// begin if GetControl ( vehicle ) = control_manual then
34713: LD_VAR 0 1
34717: PPUSH
34718: CALL_OW 263
34722: PUSH
34723: LD_INT 1
34725: EQUAL
34726: IFFALSE 34807
// begin driver := IsDrivenBy ( vehicle ) ;
34728: LD_ADDR_VAR 0 4
34732: PUSH
34733: LD_VAR 0 1
34737: PPUSH
34738: CALL_OW 311
34742: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34743: LD_VAR 0 4
34747: PPUSH
34748: LD_EXP 103
34752: PUSH
34753: LD_VAR 0 2
34757: ARRAY
34758: PUSH
34759: LD_INT 3
34761: ARRAY
34762: PPUSH
34763: LD_EXP 103
34767: PUSH
34768: LD_VAR 0 2
34772: ARRAY
34773: PUSH
34774: LD_INT 4
34776: ARRAY
34777: PPUSH
34778: CALL_OW 171
// AddComExitVehicle ( driver ) ;
34782: LD_VAR 0 4
34786: PPUSH
34787: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
34791: LD_VAR 0 4
34795: PPUSH
34796: LD_VAR 0 2
34800: PPUSH
34801: CALL_OW 180
// end else
34805: GO 34920
// if GetControl ( vehicle ) = control_remote then
34807: LD_VAR 0 1
34811: PPUSH
34812: CALL_OW 263
34816: PUSH
34817: LD_INT 2
34819: EQUAL
34820: IFFALSE 34881
// begin wait ( 0 0$2 ) ;
34822: LD_INT 70
34824: PPUSH
34825: CALL_OW 67
// if Connect ( vehicle ) then
34829: LD_VAR 0 1
34833: PPUSH
34834: CALL 46944 0 1
34838: IFFALSE 34879
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34840: LD_VAR 0 1
34844: PPUSH
34845: LD_EXP 103
34849: PUSH
34850: LD_VAR 0 2
34854: ARRAY
34855: PUSH
34856: LD_INT 3
34858: ARRAY
34859: PPUSH
34860: LD_EXP 103
34864: PUSH
34865: LD_VAR 0 2
34869: ARRAY
34870: PUSH
34871: LD_INT 4
34873: ARRAY
34874: PPUSH
34875: CALL_OW 171
// end else
34879: GO 34920
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34881: LD_VAR 0 1
34885: PPUSH
34886: LD_EXP 103
34890: PUSH
34891: LD_VAR 0 2
34895: ARRAY
34896: PUSH
34897: LD_INT 3
34899: ARRAY
34900: PPUSH
34901: LD_EXP 103
34905: PUSH
34906: LD_VAR 0 2
34910: ARRAY
34911: PUSH
34912: LD_INT 4
34914: ARRAY
34915: PPUSH
34916: CALL_OW 171
// end ; end ;
34920: LD_VAR 0 3
34924: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34925: LD_INT 0
34927: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34928: LD_VAR 0 1
34932: PUSH
34933: LD_INT 250
34935: EQUAL
34936: PUSH
34937: LD_VAR 0 2
34941: PPUSH
34942: CALL_OW 264
34946: PUSH
34947: LD_INT 81
34949: EQUAL
34950: AND
34951: IFFALSE 34972
// MinerPlaceMine ( unit , x , y ) ;
34953: LD_VAR 0 2
34957: PPUSH
34958: LD_VAR 0 4
34962: PPUSH
34963: LD_VAR 0 5
34967: PPUSH
34968: CALL 37357 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34972: LD_VAR 0 1
34976: PUSH
34977: LD_INT 251
34979: EQUAL
34980: PUSH
34981: LD_VAR 0 2
34985: PPUSH
34986: CALL_OW 264
34990: PUSH
34991: LD_INT 81
34993: EQUAL
34994: AND
34995: IFFALSE 35016
// MinerDetonateMine ( unit , x , y ) ;
34997: LD_VAR 0 2
35001: PPUSH
35002: LD_VAR 0 4
35006: PPUSH
35007: LD_VAR 0 5
35011: PPUSH
35012: CALL 37632 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35016: LD_VAR 0 1
35020: PUSH
35021: LD_INT 252
35023: EQUAL
35024: PUSH
35025: LD_VAR 0 2
35029: PPUSH
35030: CALL_OW 264
35034: PUSH
35035: LD_INT 81
35037: EQUAL
35038: AND
35039: IFFALSE 35060
// MinerCreateMinefield ( unit , x , y ) ;
35041: LD_VAR 0 2
35045: PPUSH
35046: LD_VAR 0 4
35050: PPUSH
35051: LD_VAR 0 5
35055: PPUSH
35056: CALL 38049 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35060: LD_VAR 0 1
35064: PUSH
35065: LD_INT 253
35067: EQUAL
35068: PUSH
35069: LD_VAR 0 2
35073: PPUSH
35074: CALL_OW 257
35078: PUSH
35079: LD_INT 5
35081: EQUAL
35082: AND
35083: IFFALSE 35104
// ComBinocular ( unit , x , y ) ;
35085: LD_VAR 0 2
35089: PPUSH
35090: LD_VAR 0 4
35094: PPUSH
35095: LD_VAR 0 5
35099: PPUSH
35100: CALL 38418 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35104: LD_VAR 0 1
35108: PUSH
35109: LD_INT 254
35111: EQUAL
35112: PUSH
35113: LD_VAR 0 2
35117: PPUSH
35118: CALL_OW 264
35122: PUSH
35123: LD_INT 99
35125: EQUAL
35126: AND
35127: PUSH
35128: LD_VAR 0 3
35132: PPUSH
35133: CALL_OW 263
35137: PUSH
35138: LD_INT 3
35140: EQUAL
35141: AND
35142: IFFALSE 35158
// HackDestroyVehicle ( unit , selectedUnit ) ;
35144: LD_VAR 0 2
35148: PPUSH
35149: LD_VAR 0 3
35153: PPUSH
35154: CALL 36721 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35158: LD_VAR 0 1
35162: PUSH
35163: LD_INT 255
35165: EQUAL
35166: PUSH
35167: LD_VAR 0 2
35171: PPUSH
35172: CALL_OW 264
35176: PUSH
35177: LD_INT 14
35179: PUSH
35180: LD_INT 53
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: IN
35187: AND
35188: PUSH
35189: LD_VAR 0 4
35193: PPUSH
35194: LD_VAR 0 5
35198: PPUSH
35199: CALL_OW 488
35203: AND
35204: IFFALSE 35228
// CutTreeXYR ( unit , x , y , 12 ) ;
35206: LD_VAR 0 2
35210: PPUSH
35211: LD_VAR 0 4
35215: PPUSH
35216: LD_VAR 0 5
35220: PPUSH
35221: LD_INT 12
35223: PPUSH
35224: CALL 35291 0 4
// if cmd = 256 then
35228: LD_VAR 0 1
35232: PUSH
35233: LD_INT 256
35235: EQUAL
35236: IFFALSE 35257
// SetFactoryWaypoint ( unit , x , y ) ;
35238: LD_VAR 0 2
35242: PPUSH
35243: LD_VAR 0 4
35247: PPUSH
35248: LD_VAR 0 5
35252: PPUSH
35253: CALL 33238 0 3
// if cmd = 257 then
35257: LD_VAR 0 1
35261: PUSH
35262: LD_INT 257
35264: EQUAL
35265: IFFALSE 35286
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35267: LD_VAR 0 2
35271: PPUSH
35272: LD_VAR 0 4
35276: PPUSH
35277: LD_VAR 0 5
35281: PPUSH
35282: CALL 33600 0 3
// end ;
35286: LD_VAR 0 6
35290: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35291: LD_INT 0
35293: PPUSH
35294: PPUSH
35295: PPUSH
35296: PPUSH
35297: PPUSH
35298: PPUSH
35299: PPUSH
35300: PPUSH
35301: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35302: LD_VAR 0 1
35306: NOT
35307: PUSH
35308: LD_VAR 0 2
35312: PPUSH
35313: LD_VAR 0 3
35317: PPUSH
35318: CALL_OW 488
35322: NOT
35323: OR
35324: PUSH
35325: LD_VAR 0 4
35329: NOT
35330: OR
35331: IFFALSE 35335
// exit ;
35333: GO 35675
// list := [ ] ;
35335: LD_ADDR_VAR 0 13
35339: PUSH
35340: EMPTY
35341: ST_TO_ADDR
// if x - r < 0 then
35342: LD_VAR 0 2
35346: PUSH
35347: LD_VAR 0 4
35351: MINUS
35352: PUSH
35353: LD_INT 0
35355: LESS
35356: IFFALSE 35368
// min_x := 0 else
35358: LD_ADDR_VAR 0 7
35362: PUSH
35363: LD_INT 0
35365: ST_TO_ADDR
35366: GO 35384
// min_x := x - r ;
35368: LD_ADDR_VAR 0 7
35372: PUSH
35373: LD_VAR 0 2
35377: PUSH
35378: LD_VAR 0 4
35382: MINUS
35383: ST_TO_ADDR
// if y - r < 0 then
35384: LD_VAR 0 3
35388: PUSH
35389: LD_VAR 0 4
35393: MINUS
35394: PUSH
35395: LD_INT 0
35397: LESS
35398: IFFALSE 35410
// min_y := 0 else
35400: LD_ADDR_VAR 0 8
35404: PUSH
35405: LD_INT 0
35407: ST_TO_ADDR
35408: GO 35426
// min_y := y - r ;
35410: LD_ADDR_VAR 0 8
35414: PUSH
35415: LD_VAR 0 3
35419: PUSH
35420: LD_VAR 0 4
35424: MINUS
35425: ST_TO_ADDR
// max_x := x + r ;
35426: LD_ADDR_VAR 0 9
35430: PUSH
35431: LD_VAR 0 2
35435: PUSH
35436: LD_VAR 0 4
35440: PLUS
35441: ST_TO_ADDR
// max_y := y + r ;
35442: LD_ADDR_VAR 0 10
35446: PUSH
35447: LD_VAR 0 3
35451: PUSH
35452: LD_VAR 0 4
35456: PLUS
35457: ST_TO_ADDR
// for _x = min_x to max_x do
35458: LD_ADDR_VAR 0 11
35462: PUSH
35463: DOUBLE
35464: LD_VAR 0 7
35468: DEC
35469: ST_TO_ADDR
35470: LD_VAR 0 9
35474: PUSH
35475: FOR_TO
35476: IFFALSE 35593
// for _y = min_y to max_y do
35478: LD_ADDR_VAR 0 12
35482: PUSH
35483: DOUBLE
35484: LD_VAR 0 8
35488: DEC
35489: ST_TO_ADDR
35490: LD_VAR 0 10
35494: PUSH
35495: FOR_TO
35496: IFFALSE 35589
// begin if not ValidHex ( _x , _y ) then
35498: LD_VAR 0 11
35502: PPUSH
35503: LD_VAR 0 12
35507: PPUSH
35508: CALL_OW 488
35512: NOT
35513: IFFALSE 35517
// continue ;
35515: GO 35495
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35517: LD_VAR 0 11
35521: PPUSH
35522: LD_VAR 0 12
35526: PPUSH
35527: CALL_OW 351
35531: PUSH
35532: LD_VAR 0 11
35536: PPUSH
35537: LD_VAR 0 12
35541: PPUSH
35542: CALL_OW 554
35546: AND
35547: IFFALSE 35587
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35549: LD_ADDR_VAR 0 13
35553: PUSH
35554: LD_VAR 0 13
35558: PPUSH
35559: LD_VAR 0 13
35563: PUSH
35564: LD_INT 1
35566: PLUS
35567: PPUSH
35568: LD_VAR 0 11
35572: PUSH
35573: LD_VAR 0 12
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: PPUSH
35582: CALL_OW 2
35586: ST_TO_ADDR
// end ;
35587: GO 35495
35589: POP
35590: POP
35591: GO 35475
35593: POP
35594: POP
// if not list then
35595: LD_VAR 0 13
35599: NOT
35600: IFFALSE 35604
// exit ;
35602: GO 35675
// for i in list do
35604: LD_ADDR_VAR 0 6
35608: PUSH
35609: LD_VAR 0 13
35613: PUSH
35614: FOR_IN
35615: IFFALSE 35673
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35617: LD_VAR 0 1
35621: PPUSH
35622: LD_STRING M
35624: PUSH
35625: LD_VAR 0 6
35629: PUSH
35630: LD_INT 1
35632: ARRAY
35633: PUSH
35634: LD_VAR 0 6
35638: PUSH
35639: LD_INT 2
35641: ARRAY
35642: PUSH
35643: LD_INT 0
35645: PUSH
35646: LD_INT 0
35648: PUSH
35649: LD_INT 0
35651: PUSH
35652: LD_INT 0
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: PUSH
35664: EMPTY
35665: LIST
35666: PPUSH
35667: CALL_OW 447
35671: GO 35614
35673: POP
35674: POP
// end ;
35675: LD_VAR 0 5
35679: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35680: LD_EXP 106
35684: NOT
35685: IFFALSE 35735
35687: GO 35689
35689: DISABLE
// begin initHack := true ;
35690: LD_ADDR_EXP 106
35694: PUSH
35695: LD_INT 1
35697: ST_TO_ADDR
// hackTanks := [ ] ;
35698: LD_ADDR_EXP 107
35702: PUSH
35703: EMPTY
35704: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35705: LD_ADDR_EXP 108
35709: PUSH
35710: EMPTY
35711: ST_TO_ADDR
// hackLimit := 3 ;
35712: LD_ADDR_EXP 109
35716: PUSH
35717: LD_INT 3
35719: ST_TO_ADDR
// hackDist := 12 ;
35720: LD_ADDR_EXP 110
35724: PUSH
35725: LD_INT 12
35727: ST_TO_ADDR
// hackCounter := [ ] ;
35728: LD_ADDR_EXP 111
35732: PUSH
35733: EMPTY
35734: ST_TO_ADDR
// end ;
35735: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35736: LD_EXP 106
35740: PUSH
35741: LD_INT 34
35743: PUSH
35744: LD_INT 99
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PPUSH
35751: CALL_OW 69
35755: AND
35756: IFFALSE 36009
35758: GO 35760
35760: DISABLE
35761: LD_INT 0
35763: PPUSH
35764: PPUSH
// begin enable ;
35765: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35766: LD_ADDR_VAR 0 1
35770: PUSH
35771: LD_INT 34
35773: PUSH
35774: LD_INT 99
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: PPUSH
35781: CALL_OW 69
35785: PUSH
35786: FOR_IN
35787: IFFALSE 36007
// begin if not i in hackTanks then
35789: LD_VAR 0 1
35793: PUSH
35794: LD_EXP 107
35798: IN
35799: NOT
35800: IFFALSE 35883
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35802: LD_ADDR_EXP 107
35806: PUSH
35807: LD_EXP 107
35811: PPUSH
35812: LD_EXP 107
35816: PUSH
35817: LD_INT 1
35819: PLUS
35820: PPUSH
35821: LD_VAR 0 1
35825: PPUSH
35826: CALL_OW 1
35830: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35831: LD_ADDR_EXP 108
35835: PUSH
35836: LD_EXP 108
35840: PPUSH
35841: LD_EXP 108
35845: PUSH
35846: LD_INT 1
35848: PLUS
35849: PPUSH
35850: EMPTY
35851: PPUSH
35852: CALL_OW 1
35856: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35857: LD_ADDR_EXP 111
35861: PUSH
35862: LD_EXP 111
35866: PPUSH
35867: LD_EXP 111
35871: PUSH
35872: LD_INT 1
35874: PLUS
35875: PPUSH
35876: EMPTY
35877: PPUSH
35878: CALL_OW 1
35882: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35883: LD_VAR 0 1
35887: PPUSH
35888: CALL_OW 302
35892: NOT
35893: IFFALSE 35906
// begin HackUnlinkAll ( i ) ;
35895: LD_VAR 0 1
35899: PPUSH
35900: CALL 36012 0 1
// continue ;
35904: GO 35786
// end ; HackCheckCapturedStatus ( i ) ;
35906: LD_VAR 0 1
35910: PPUSH
35911: CALL 36455 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35915: LD_ADDR_VAR 0 2
35919: PUSH
35920: LD_INT 81
35922: PUSH
35923: LD_VAR 0 1
35927: PPUSH
35928: CALL_OW 255
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 33
35939: PUSH
35940: LD_INT 3
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 91
35949: PUSH
35950: LD_VAR 0 1
35954: PUSH
35955: LD_EXP 110
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: LIST
35964: PUSH
35965: LD_INT 50
35967: PUSH
35968: EMPTY
35969: LIST
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: PPUSH
35977: CALL_OW 69
35981: ST_TO_ADDR
// if not tmp then
35982: LD_VAR 0 2
35986: NOT
35987: IFFALSE 35991
// continue ;
35989: GO 35786
// HackLink ( i , tmp ) ;
35991: LD_VAR 0 1
35995: PPUSH
35996: LD_VAR 0 2
36000: PPUSH
36001: CALL 36148 0 2
// end ;
36005: GO 35786
36007: POP
36008: POP
// end ;
36009: PPOPN 2
36011: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36012: LD_INT 0
36014: PPUSH
36015: PPUSH
36016: PPUSH
// if not hack in hackTanks then
36017: LD_VAR 0 1
36021: PUSH
36022: LD_EXP 107
36026: IN
36027: NOT
36028: IFFALSE 36032
// exit ;
36030: GO 36143
// index := GetElementIndex ( hackTanks , hack ) ;
36032: LD_ADDR_VAR 0 4
36036: PUSH
36037: LD_EXP 107
36041: PPUSH
36042: LD_VAR 0 1
36046: PPUSH
36047: CALL 43760 0 2
36051: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36052: LD_EXP 108
36056: PUSH
36057: LD_VAR 0 4
36061: ARRAY
36062: IFFALSE 36143
// begin for i in hackTanksCaptured [ index ] do
36064: LD_ADDR_VAR 0 3
36068: PUSH
36069: LD_EXP 108
36073: PUSH
36074: LD_VAR 0 4
36078: ARRAY
36079: PUSH
36080: FOR_IN
36081: IFFALSE 36107
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36083: LD_VAR 0 3
36087: PUSH
36088: LD_INT 1
36090: ARRAY
36091: PPUSH
36092: LD_VAR 0 3
36096: PUSH
36097: LD_INT 2
36099: ARRAY
36100: PPUSH
36101: CALL_OW 235
36105: GO 36080
36107: POP
36108: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36109: LD_ADDR_EXP 108
36113: PUSH
36114: LD_EXP 108
36118: PPUSH
36119: LD_VAR 0 4
36123: PPUSH
36124: EMPTY
36125: PPUSH
36126: CALL_OW 1
36130: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36131: LD_VAR 0 1
36135: PPUSH
36136: LD_INT 0
36138: PPUSH
36139: CALL_OW 505
// end ; end ;
36143: LD_VAR 0 2
36147: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36148: LD_INT 0
36150: PPUSH
36151: PPUSH
36152: PPUSH
// if not hack in hackTanks or not vehicles then
36153: LD_VAR 0 1
36157: PUSH
36158: LD_EXP 107
36162: IN
36163: NOT
36164: PUSH
36165: LD_VAR 0 2
36169: NOT
36170: OR
36171: IFFALSE 36175
// exit ;
36173: GO 36450
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36175: LD_ADDR_VAR 0 2
36179: PUSH
36180: LD_VAR 0 1
36184: PPUSH
36185: LD_VAR 0 2
36189: PPUSH
36190: LD_INT 1
36192: PPUSH
36193: LD_INT 1
36195: PPUSH
36196: CALL 44410 0 4
36200: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36201: LD_ADDR_VAR 0 5
36205: PUSH
36206: LD_EXP 107
36210: PPUSH
36211: LD_VAR 0 1
36215: PPUSH
36216: CALL 43760 0 2
36220: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36221: LD_EXP 108
36225: PUSH
36226: LD_VAR 0 5
36230: ARRAY
36231: PUSH
36232: LD_EXP 109
36236: LESS
36237: IFFALSE 36426
// begin for i := 1 to vehicles do
36239: LD_ADDR_VAR 0 4
36243: PUSH
36244: DOUBLE
36245: LD_INT 1
36247: DEC
36248: ST_TO_ADDR
36249: LD_VAR 0 2
36253: PUSH
36254: FOR_TO
36255: IFFALSE 36424
// begin if hackTanksCaptured [ index ] = hackLimit then
36257: LD_EXP 108
36261: PUSH
36262: LD_VAR 0 5
36266: ARRAY
36267: PUSH
36268: LD_EXP 109
36272: EQUAL
36273: IFFALSE 36277
// break ;
36275: GO 36424
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36277: LD_ADDR_EXP 111
36281: PUSH
36282: LD_EXP 111
36286: PPUSH
36287: LD_VAR 0 5
36291: PPUSH
36292: LD_EXP 111
36296: PUSH
36297: LD_VAR 0 5
36301: ARRAY
36302: PUSH
36303: LD_INT 1
36305: PLUS
36306: PPUSH
36307: CALL_OW 1
36311: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36312: LD_ADDR_EXP 108
36316: PUSH
36317: LD_EXP 108
36321: PPUSH
36322: LD_VAR 0 5
36326: PUSH
36327: LD_EXP 108
36331: PUSH
36332: LD_VAR 0 5
36336: ARRAY
36337: PUSH
36338: LD_INT 1
36340: PLUS
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PPUSH
36346: LD_VAR 0 2
36350: PUSH
36351: LD_VAR 0 4
36355: ARRAY
36356: PUSH
36357: LD_VAR 0 2
36361: PUSH
36362: LD_VAR 0 4
36366: ARRAY
36367: PPUSH
36368: CALL_OW 255
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PPUSH
36377: CALL 43975 0 3
36381: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36382: LD_VAR 0 2
36386: PUSH
36387: LD_VAR 0 4
36391: ARRAY
36392: PPUSH
36393: LD_VAR 0 1
36397: PPUSH
36398: CALL_OW 255
36402: PPUSH
36403: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36407: LD_VAR 0 2
36411: PUSH
36412: LD_VAR 0 4
36416: ARRAY
36417: PPUSH
36418: CALL_OW 141
// end ;
36422: GO 36254
36424: POP
36425: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36426: LD_VAR 0 1
36430: PPUSH
36431: LD_EXP 108
36435: PUSH
36436: LD_VAR 0 5
36440: ARRAY
36441: PUSH
36442: LD_INT 0
36444: PLUS
36445: PPUSH
36446: CALL_OW 505
// end ;
36450: LD_VAR 0 3
36454: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36455: LD_INT 0
36457: PPUSH
36458: PPUSH
36459: PPUSH
36460: PPUSH
// if not hack in hackTanks then
36461: LD_VAR 0 1
36465: PUSH
36466: LD_EXP 107
36470: IN
36471: NOT
36472: IFFALSE 36476
// exit ;
36474: GO 36716
// index := GetElementIndex ( hackTanks , hack ) ;
36476: LD_ADDR_VAR 0 4
36480: PUSH
36481: LD_EXP 107
36485: PPUSH
36486: LD_VAR 0 1
36490: PPUSH
36491: CALL 43760 0 2
36495: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36496: LD_ADDR_VAR 0 3
36500: PUSH
36501: DOUBLE
36502: LD_EXP 108
36506: PUSH
36507: LD_VAR 0 4
36511: ARRAY
36512: INC
36513: ST_TO_ADDR
36514: LD_INT 1
36516: PUSH
36517: FOR_DOWNTO
36518: IFFALSE 36690
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36520: LD_ADDR_VAR 0 5
36524: PUSH
36525: LD_EXP 108
36529: PUSH
36530: LD_VAR 0 4
36534: ARRAY
36535: PUSH
36536: LD_VAR 0 3
36540: ARRAY
36541: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36542: LD_VAR 0 5
36546: PUSH
36547: LD_INT 1
36549: ARRAY
36550: PPUSH
36551: CALL_OW 302
36555: NOT
36556: PUSH
36557: LD_VAR 0 5
36561: PUSH
36562: LD_INT 1
36564: ARRAY
36565: PPUSH
36566: CALL_OW 255
36570: PUSH
36571: LD_VAR 0 1
36575: PPUSH
36576: CALL_OW 255
36580: NONEQUAL
36581: OR
36582: IFFALSE 36688
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36584: LD_VAR 0 5
36588: PUSH
36589: LD_INT 1
36591: ARRAY
36592: PPUSH
36593: CALL_OW 305
36597: PUSH
36598: LD_VAR 0 5
36602: PUSH
36603: LD_INT 1
36605: ARRAY
36606: PPUSH
36607: CALL_OW 255
36611: PUSH
36612: LD_VAR 0 1
36616: PPUSH
36617: CALL_OW 255
36621: EQUAL
36622: AND
36623: IFFALSE 36647
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36625: LD_VAR 0 5
36629: PUSH
36630: LD_INT 1
36632: ARRAY
36633: PPUSH
36634: LD_VAR 0 5
36638: PUSH
36639: LD_INT 2
36641: ARRAY
36642: PPUSH
36643: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36647: LD_ADDR_EXP 108
36651: PUSH
36652: LD_EXP 108
36656: PPUSH
36657: LD_VAR 0 4
36661: PPUSH
36662: LD_EXP 108
36666: PUSH
36667: LD_VAR 0 4
36671: ARRAY
36672: PPUSH
36673: LD_VAR 0 3
36677: PPUSH
36678: CALL_OW 3
36682: PPUSH
36683: CALL_OW 1
36687: ST_TO_ADDR
// end ; end ;
36688: GO 36517
36690: POP
36691: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36692: LD_VAR 0 1
36696: PPUSH
36697: LD_EXP 108
36701: PUSH
36702: LD_VAR 0 4
36706: ARRAY
36707: PUSH
36708: LD_INT 0
36710: PLUS
36711: PPUSH
36712: CALL_OW 505
// end ;
36716: LD_VAR 0 2
36720: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36721: LD_INT 0
36723: PPUSH
36724: PPUSH
36725: PPUSH
36726: PPUSH
// if not hack in hackTanks then
36727: LD_VAR 0 1
36731: PUSH
36732: LD_EXP 107
36736: IN
36737: NOT
36738: IFFALSE 36742
// exit ;
36740: GO 36827
// index := GetElementIndex ( hackTanks , hack ) ;
36742: LD_ADDR_VAR 0 5
36746: PUSH
36747: LD_EXP 107
36751: PPUSH
36752: LD_VAR 0 1
36756: PPUSH
36757: CALL 43760 0 2
36761: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36762: LD_ADDR_VAR 0 4
36766: PUSH
36767: DOUBLE
36768: LD_INT 1
36770: DEC
36771: ST_TO_ADDR
36772: LD_EXP 108
36776: PUSH
36777: LD_VAR 0 5
36781: ARRAY
36782: PUSH
36783: FOR_TO
36784: IFFALSE 36825
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36786: LD_EXP 108
36790: PUSH
36791: LD_VAR 0 5
36795: ARRAY
36796: PUSH
36797: LD_VAR 0 4
36801: ARRAY
36802: PUSH
36803: LD_INT 1
36805: ARRAY
36806: PUSH
36807: LD_VAR 0 2
36811: EQUAL
36812: IFFALSE 36823
// KillUnit ( vehicle ) ;
36814: LD_VAR 0 2
36818: PPUSH
36819: CALL_OW 66
36823: GO 36783
36825: POP
36826: POP
// end ;
36827: LD_VAR 0 3
36831: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36832: LD_EXP 112
36836: NOT
36837: IFFALSE 36872
36839: GO 36841
36841: DISABLE
// begin initMiner := true ;
36842: LD_ADDR_EXP 112
36846: PUSH
36847: LD_INT 1
36849: ST_TO_ADDR
// minersList := [ ] ;
36850: LD_ADDR_EXP 113
36854: PUSH
36855: EMPTY
36856: ST_TO_ADDR
// minerMinesList := [ ] ;
36857: LD_ADDR_EXP 114
36861: PUSH
36862: EMPTY
36863: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36864: LD_ADDR_EXP 115
36868: PUSH
36869: LD_INT 5
36871: ST_TO_ADDR
// end ;
36872: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36873: LD_EXP 112
36877: PUSH
36878: LD_INT 34
36880: PUSH
36881: LD_INT 81
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PPUSH
36888: CALL_OW 69
36892: AND
36893: IFFALSE 37354
36895: GO 36897
36897: DISABLE
36898: LD_INT 0
36900: PPUSH
36901: PPUSH
36902: PPUSH
36903: PPUSH
// begin enable ;
36904: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36905: LD_ADDR_VAR 0 1
36909: PUSH
36910: LD_INT 34
36912: PUSH
36913: LD_INT 81
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PPUSH
36920: CALL_OW 69
36924: PUSH
36925: FOR_IN
36926: IFFALSE 36998
// begin if not i in minersList then
36928: LD_VAR 0 1
36932: PUSH
36933: LD_EXP 113
36937: IN
36938: NOT
36939: IFFALSE 36996
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36941: LD_ADDR_EXP 113
36945: PUSH
36946: LD_EXP 113
36950: PPUSH
36951: LD_EXP 113
36955: PUSH
36956: LD_INT 1
36958: PLUS
36959: PPUSH
36960: LD_VAR 0 1
36964: PPUSH
36965: CALL_OW 1
36969: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36970: LD_ADDR_EXP 114
36974: PUSH
36975: LD_EXP 114
36979: PPUSH
36980: LD_EXP 114
36984: PUSH
36985: LD_INT 1
36987: PLUS
36988: PPUSH
36989: EMPTY
36990: PPUSH
36991: CALL_OW 1
36995: ST_TO_ADDR
// end end ;
36996: GO 36925
36998: POP
36999: POP
// for i := minerMinesList downto 1 do
37000: LD_ADDR_VAR 0 1
37004: PUSH
37005: DOUBLE
37006: LD_EXP 114
37010: INC
37011: ST_TO_ADDR
37012: LD_INT 1
37014: PUSH
37015: FOR_DOWNTO
37016: IFFALSE 37352
// begin if IsLive ( minersList [ i ] ) then
37018: LD_EXP 113
37022: PUSH
37023: LD_VAR 0 1
37027: ARRAY
37028: PPUSH
37029: CALL_OW 300
37033: IFFALSE 37061
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37035: LD_EXP 113
37039: PUSH
37040: LD_VAR 0 1
37044: ARRAY
37045: PPUSH
37046: LD_EXP 114
37050: PUSH
37051: LD_VAR 0 1
37055: ARRAY
37056: PPUSH
37057: CALL_OW 505
// if not minerMinesList [ i ] then
37061: LD_EXP 114
37065: PUSH
37066: LD_VAR 0 1
37070: ARRAY
37071: NOT
37072: IFFALSE 37076
// continue ;
37074: GO 37015
// for j := minerMinesList [ i ] downto 1 do
37076: LD_ADDR_VAR 0 2
37080: PUSH
37081: DOUBLE
37082: LD_EXP 114
37086: PUSH
37087: LD_VAR 0 1
37091: ARRAY
37092: INC
37093: ST_TO_ADDR
37094: LD_INT 1
37096: PUSH
37097: FOR_DOWNTO
37098: IFFALSE 37348
// begin side := GetSide ( minersList [ i ] ) ;
37100: LD_ADDR_VAR 0 3
37104: PUSH
37105: LD_EXP 113
37109: PUSH
37110: LD_VAR 0 1
37114: ARRAY
37115: PPUSH
37116: CALL_OW 255
37120: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37121: LD_ADDR_VAR 0 4
37125: PUSH
37126: LD_EXP 114
37130: PUSH
37131: LD_VAR 0 1
37135: ARRAY
37136: PUSH
37137: LD_VAR 0 2
37141: ARRAY
37142: PUSH
37143: LD_INT 1
37145: ARRAY
37146: PPUSH
37147: LD_EXP 114
37151: PUSH
37152: LD_VAR 0 1
37156: ARRAY
37157: PUSH
37158: LD_VAR 0 2
37162: ARRAY
37163: PUSH
37164: LD_INT 2
37166: ARRAY
37167: PPUSH
37168: CALL_OW 428
37172: ST_TO_ADDR
// if not tmp then
37173: LD_VAR 0 4
37177: NOT
37178: IFFALSE 37182
// continue ;
37180: GO 37097
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37182: LD_VAR 0 4
37186: PUSH
37187: LD_INT 81
37189: PUSH
37190: LD_VAR 0 3
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PPUSH
37199: CALL_OW 69
37203: IN
37204: PUSH
37205: LD_EXP 114
37209: PUSH
37210: LD_VAR 0 1
37214: ARRAY
37215: PUSH
37216: LD_VAR 0 2
37220: ARRAY
37221: PUSH
37222: LD_INT 1
37224: ARRAY
37225: PPUSH
37226: LD_EXP 114
37230: PUSH
37231: LD_VAR 0 1
37235: ARRAY
37236: PUSH
37237: LD_VAR 0 2
37241: ARRAY
37242: PUSH
37243: LD_INT 2
37245: ARRAY
37246: PPUSH
37247: CALL_OW 458
37251: AND
37252: IFFALSE 37346
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37254: LD_EXP 114
37258: PUSH
37259: LD_VAR 0 1
37263: ARRAY
37264: PUSH
37265: LD_VAR 0 2
37269: ARRAY
37270: PUSH
37271: LD_INT 1
37273: ARRAY
37274: PPUSH
37275: LD_EXP 114
37279: PUSH
37280: LD_VAR 0 1
37284: ARRAY
37285: PUSH
37286: LD_VAR 0 2
37290: ARRAY
37291: PUSH
37292: LD_INT 2
37294: ARRAY
37295: PPUSH
37296: LD_VAR 0 3
37300: PPUSH
37301: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37305: LD_ADDR_EXP 114
37309: PUSH
37310: LD_EXP 114
37314: PPUSH
37315: LD_VAR 0 1
37319: PPUSH
37320: LD_EXP 114
37324: PUSH
37325: LD_VAR 0 1
37329: ARRAY
37330: PPUSH
37331: LD_VAR 0 2
37335: PPUSH
37336: CALL_OW 3
37340: PPUSH
37341: CALL_OW 1
37345: ST_TO_ADDR
// end ; end ;
37346: GO 37097
37348: POP
37349: POP
// end ;
37350: GO 37015
37352: POP
37353: POP
// end ;
37354: PPOPN 4
37356: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37357: LD_INT 0
37359: PPUSH
37360: PPUSH
// result := false ;
37361: LD_ADDR_VAR 0 4
37365: PUSH
37366: LD_INT 0
37368: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37369: LD_VAR 0 1
37373: PPUSH
37374: CALL_OW 264
37378: PUSH
37379: LD_INT 81
37381: EQUAL
37382: NOT
37383: IFFALSE 37387
// exit ;
37385: GO 37627
// index := GetElementIndex ( minersList , unit ) ;
37387: LD_ADDR_VAR 0 5
37391: PUSH
37392: LD_EXP 113
37396: PPUSH
37397: LD_VAR 0 1
37401: PPUSH
37402: CALL 43760 0 2
37406: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37407: LD_EXP 114
37411: PUSH
37412: LD_VAR 0 5
37416: ARRAY
37417: PUSH
37418: LD_EXP 115
37422: GREATEREQUAL
37423: IFFALSE 37427
// exit ;
37425: GO 37627
// ComMoveXY ( unit , x , y ) ;
37427: LD_VAR 0 1
37431: PPUSH
37432: LD_VAR 0 2
37436: PPUSH
37437: LD_VAR 0 3
37441: PPUSH
37442: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37446: LD_INT 35
37448: PPUSH
37449: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37453: LD_VAR 0 1
37457: PPUSH
37458: LD_VAR 0 2
37462: PPUSH
37463: LD_VAR 0 3
37467: PPUSH
37468: CALL 75023 0 3
37472: NOT
37473: PUSH
37474: LD_VAR 0 1
37478: PPUSH
37479: CALL_OW 314
37483: AND
37484: IFFALSE 37488
// exit ;
37486: GO 37627
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37488: LD_VAR 0 2
37492: PPUSH
37493: LD_VAR 0 3
37497: PPUSH
37498: CALL_OW 428
37502: PUSH
37503: LD_VAR 0 1
37507: EQUAL
37508: PUSH
37509: LD_VAR 0 1
37513: PPUSH
37514: CALL_OW 314
37518: NOT
37519: AND
37520: IFFALSE 37446
// PlaySoundXY ( x , y , PlantMine ) ;
37522: LD_VAR 0 2
37526: PPUSH
37527: LD_VAR 0 3
37531: PPUSH
37532: LD_STRING PlantMine
37534: PPUSH
37535: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37539: LD_VAR 0 2
37543: PPUSH
37544: LD_VAR 0 3
37548: PPUSH
37549: LD_VAR 0 1
37553: PPUSH
37554: CALL_OW 255
37558: PPUSH
37559: LD_INT 0
37561: PPUSH
37562: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37566: LD_ADDR_EXP 114
37570: PUSH
37571: LD_EXP 114
37575: PPUSH
37576: LD_VAR 0 5
37580: PUSH
37581: LD_EXP 114
37585: PUSH
37586: LD_VAR 0 5
37590: ARRAY
37591: PUSH
37592: LD_INT 1
37594: PLUS
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PPUSH
37600: LD_VAR 0 2
37604: PUSH
37605: LD_VAR 0 3
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PPUSH
37614: CALL 43975 0 3
37618: ST_TO_ADDR
// result := true ;
37619: LD_ADDR_VAR 0 4
37623: PUSH
37624: LD_INT 1
37626: ST_TO_ADDR
// end ;
37627: LD_VAR 0 4
37631: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37632: LD_INT 0
37634: PPUSH
37635: PPUSH
37636: PPUSH
// if not unit in minersList then
37637: LD_VAR 0 1
37641: PUSH
37642: LD_EXP 113
37646: IN
37647: NOT
37648: IFFALSE 37652
// exit ;
37650: GO 38044
// index := GetElementIndex ( minersList , unit ) ;
37652: LD_ADDR_VAR 0 6
37656: PUSH
37657: LD_EXP 113
37661: PPUSH
37662: LD_VAR 0 1
37666: PPUSH
37667: CALL 43760 0 2
37671: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37672: LD_ADDR_VAR 0 5
37676: PUSH
37677: DOUBLE
37678: LD_EXP 114
37682: PUSH
37683: LD_VAR 0 6
37687: ARRAY
37688: INC
37689: ST_TO_ADDR
37690: LD_INT 1
37692: PUSH
37693: FOR_DOWNTO
37694: IFFALSE 37855
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37696: LD_EXP 114
37700: PUSH
37701: LD_VAR 0 6
37705: ARRAY
37706: PUSH
37707: LD_VAR 0 5
37711: ARRAY
37712: PUSH
37713: LD_INT 1
37715: ARRAY
37716: PUSH
37717: LD_VAR 0 2
37721: EQUAL
37722: PUSH
37723: LD_EXP 114
37727: PUSH
37728: LD_VAR 0 6
37732: ARRAY
37733: PUSH
37734: LD_VAR 0 5
37738: ARRAY
37739: PUSH
37740: LD_INT 2
37742: ARRAY
37743: PUSH
37744: LD_VAR 0 3
37748: EQUAL
37749: AND
37750: IFFALSE 37853
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37752: LD_EXP 114
37756: PUSH
37757: LD_VAR 0 6
37761: ARRAY
37762: PUSH
37763: LD_VAR 0 5
37767: ARRAY
37768: PUSH
37769: LD_INT 1
37771: ARRAY
37772: PPUSH
37773: LD_EXP 114
37777: PUSH
37778: LD_VAR 0 6
37782: ARRAY
37783: PUSH
37784: LD_VAR 0 5
37788: ARRAY
37789: PUSH
37790: LD_INT 2
37792: ARRAY
37793: PPUSH
37794: LD_VAR 0 1
37798: PPUSH
37799: CALL_OW 255
37803: PPUSH
37804: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37808: LD_ADDR_EXP 114
37812: PUSH
37813: LD_EXP 114
37817: PPUSH
37818: LD_VAR 0 6
37822: PPUSH
37823: LD_EXP 114
37827: PUSH
37828: LD_VAR 0 6
37832: ARRAY
37833: PPUSH
37834: LD_VAR 0 5
37838: PPUSH
37839: CALL_OW 3
37843: PPUSH
37844: CALL_OW 1
37848: ST_TO_ADDR
// exit ;
37849: POP
37850: POP
37851: GO 38044
// end ; end ;
37853: GO 37693
37855: POP
37856: POP
// for i := minerMinesList [ index ] downto 1 do
37857: LD_ADDR_VAR 0 5
37861: PUSH
37862: DOUBLE
37863: LD_EXP 114
37867: PUSH
37868: LD_VAR 0 6
37872: ARRAY
37873: INC
37874: ST_TO_ADDR
37875: LD_INT 1
37877: PUSH
37878: FOR_DOWNTO
37879: IFFALSE 38042
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37881: LD_EXP 114
37885: PUSH
37886: LD_VAR 0 6
37890: ARRAY
37891: PUSH
37892: LD_VAR 0 5
37896: ARRAY
37897: PUSH
37898: LD_INT 1
37900: ARRAY
37901: PPUSH
37902: LD_EXP 114
37906: PUSH
37907: LD_VAR 0 6
37911: ARRAY
37912: PUSH
37913: LD_VAR 0 5
37917: ARRAY
37918: PUSH
37919: LD_INT 2
37921: ARRAY
37922: PPUSH
37923: LD_VAR 0 2
37927: PPUSH
37928: LD_VAR 0 3
37932: PPUSH
37933: CALL_OW 298
37937: PUSH
37938: LD_INT 6
37940: LESS
37941: IFFALSE 38040
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37943: LD_EXP 114
37947: PUSH
37948: LD_VAR 0 6
37952: ARRAY
37953: PUSH
37954: LD_VAR 0 5
37958: ARRAY
37959: PUSH
37960: LD_INT 1
37962: ARRAY
37963: PPUSH
37964: LD_EXP 114
37968: PUSH
37969: LD_VAR 0 6
37973: ARRAY
37974: PUSH
37975: LD_VAR 0 5
37979: ARRAY
37980: PUSH
37981: LD_INT 2
37983: ARRAY
37984: PPUSH
37985: LD_VAR 0 1
37989: PPUSH
37990: CALL_OW 255
37994: PPUSH
37995: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37999: LD_ADDR_EXP 114
38003: PUSH
38004: LD_EXP 114
38008: PPUSH
38009: LD_VAR 0 6
38013: PPUSH
38014: LD_EXP 114
38018: PUSH
38019: LD_VAR 0 6
38023: ARRAY
38024: PPUSH
38025: LD_VAR 0 5
38029: PPUSH
38030: CALL_OW 3
38034: PPUSH
38035: CALL_OW 1
38039: ST_TO_ADDR
// end ; end ;
38040: GO 37878
38042: POP
38043: POP
// end ;
38044: LD_VAR 0 4
38048: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38049: LD_INT 0
38051: PPUSH
38052: PPUSH
38053: PPUSH
38054: PPUSH
38055: PPUSH
38056: PPUSH
38057: PPUSH
38058: PPUSH
38059: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38060: LD_VAR 0 1
38064: PPUSH
38065: CALL_OW 264
38069: PUSH
38070: LD_INT 81
38072: EQUAL
38073: NOT
38074: PUSH
38075: LD_VAR 0 1
38079: PUSH
38080: LD_EXP 113
38084: IN
38085: NOT
38086: OR
38087: IFFALSE 38091
// exit ;
38089: GO 38413
// index := GetElementIndex ( minersList , unit ) ;
38091: LD_ADDR_VAR 0 6
38095: PUSH
38096: LD_EXP 113
38100: PPUSH
38101: LD_VAR 0 1
38105: PPUSH
38106: CALL 43760 0 2
38110: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38111: LD_ADDR_VAR 0 8
38115: PUSH
38116: LD_EXP 115
38120: PUSH
38121: LD_EXP 114
38125: PUSH
38126: LD_VAR 0 6
38130: ARRAY
38131: MINUS
38132: ST_TO_ADDR
// if not minesFreeAmount then
38133: LD_VAR 0 8
38137: NOT
38138: IFFALSE 38142
// exit ;
38140: GO 38413
// tmp := [ ] ;
38142: LD_ADDR_VAR 0 7
38146: PUSH
38147: EMPTY
38148: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38149: LD_ADDR_VAR 0 5
38153: PUSH
38154: DOUBLE
38155: LD_INT 1
38157: DEC
38158: ST_TO_ADDR
38159: LD_VAR 0 8
38163: PUSH
38164: FOR_TO
38165: IFFALSE 38360
// begin _d := rand ( 0 , 5 ) ;
38167: LD_ADDR_VAR 0 11
38171: PUSH
38172: LD_INT 0
38174: PPUSH
38175: LD_INT 5
38177: PPUSH
38178: CALL_OW 12
38182: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38183: LD_ADDR_VAR 0 12
38187: PUSH
38188: LD_INT 2
38190: PPUSH
38191: LD_INT 6
38193: PPUSH
38194: CALL_OW 12
38198: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38199: LD_ADDR_VAR 0 9
38203: PUSH
38204: LD_VAR 0 2
38208: PPUSH
38209: LD_VAR 0 11
38213: PPUSH
38214: LD_VAR 0 12
38218: PPUSH
38219: CALL_OW 272
38223: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38224: LD_ADDR_VAR 0 10
38228: PUSH
38229: LD_VAR 0 3
38233: PPUSH
38234: LD_VAR 0 11
38238: PPUSH
38239: LD_VAR 0 12
38243: PPUSH
38244: CALL_OW 273
38248: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38249: LD_VAR 0 9
38253: PPUSH
38254: LD_VAR 0 10
38258: PPUSH
38259: CALL_OW 488
38263: PUSH
38264: LD_VAR 0 9
38268: PUSH
38269: LD_VAR 0 10
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_VAR 0 7
38282: IN
38283: NOT
38284: AND
38285: PUSH
38286: LD_VAR 0 9
38290: PPUSH
38291: LD_VAR 0 10
38295: PPUSH
38296: CALL_OW 458
38300: NOT
38301: AND
38302: IFFALSE 38344
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38304: LD_ADDR_VAR 0 7
38308: PUSH
38309: LD_VAR 0 7
38313: PPUSH
38314: LD_VAR 0 7
38318: PUSH
38319: LD_INT 1
38321: PLUS
38322: PPUSH
38323: LD_VAR 0 9
38327: PUSH
38328: LD_VAR 0 10
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PPUSH
38337: CALL_OW 1
38341: ST_TO_ADDR
38342: GO 38358
// i := i - 1 ;
38344: LD_ADDR_VAR 0 5
38348: PUSH
38349: LD_VAR 0 5
38353: PUSH
38354: LD_INT 1
38356: MINUS
38357: ST_TO_ADDR
// end ;
38358: GO 38164
38360: POP
38361: POP
// for i in tmp do
38362: LD_ADDR_VAR 0 5
38366: PUSH
38367: LD_VAR 0 7
38371: PUSH
38372: FOR_IN
38373: IFFALSE 38411
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38375: LD_VAR 0 1
38379: PPUSH
38380: LD_VAR 0 5
38384: PUSH
38385: LD_INT 1
38387: ARRAY
38388: PPUSH
38389: LD_VAR 0 5
38393: PUSH
38394: LD_INT 2
38396: ARRAY
38397: PPUSH
38398: CALL 37357 0 3
38402: NOT
38403: IFFALSE 38409
// exit ;
38405: POP
38406: POP
38407: GO 38413
38409: GO 38372
38411: POP
38412: POP
// end ;
38413: LD_VAR 0 4
38417: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38418: LD_INT 0
38420: PPUSH
38421: PPUSH
38422: PPUSH
38423: PPUSH
38424: PPUSH
38425: PPUSH
38426: PPUSH
// if not GetClass ( unit ) = class_sniper then
38427: LD_VAR 0 1
38431: PPUSH
38432: CALL_OW 257
38436: PUSH
38437: LD_INT 5
38439: EQUAL
38440: NOT
38441: IFFALSE 38445
// exit ;
38443: GO 38833
// dist := 8 ;
38445: LD_ADDR_VAR 0 5
38449: PUSH
38450: LD_INT 8
38452: ST_TO_ADDR
// viewRange := 12 ;
38453: LD_ADDR_VAR 0 7
38457: PUSH
38458: LD_INT 12
38460: ST_TO_ADDR
// side := GetSide ( unit ) ;
38461: LD_ADDR_VAR 0 6
38465: PUSH
38466: LD_VAR 0 1
38470: PPUSH
38471: CALL_OW 255
38475: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38476: LD_INT 61
38478: PPUSH
38479: LD_VAR 0 6
38483: PPUSH
38484: CALL_OW 321
38488: PUSH
38489: LD_INT 2
38491: EQUAL
38492: IFFALSE 38502
// viewRange := 16 ;
38494: LD_ADDR_VAR 0 7
38498: PUSH
38499: LD_INT 16
38501: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38502: LD_VAR 0 1
38506: PPUSH
38507: LD_VAR 0 2
38511: PPUSH
38512: LD_VAR 0 3
38516: PPUSH
38517: CALL_OW 297
38521: PUSH
38522: LD_VAR 0 5
38526: GREATER
38527: IFFALSE 38606
// begin ComMoveXY ( unit , x , y ) ;
38529: LD_VAR 0 1
38533: PPUSH
38534: LD_VAR 0 2
38538: PPUSH
38539: LD_VAR 0 3
38543: PPUSH
38544: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38548: LD_INT 35
38550: PPUSH
38551: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38555: LD_VAR 0 1
38559: PPUSH
38560: LD_VAR 0 2
38564: PPUSH
38565: LD_VAR 0 3
38569: PPUSH
38570: CALL 75023 0 3
38574: NOT
38575: IFFALSE 38579
// exit ;
38577: GO 38833
// until GetDistUnitXY ( unit , x , y ) < dist ;
38579: LD_VAR 0 1
38583: PPUSH
38584: LD_VAR 0 2
38588: PPUSH
38589: LD_VAR 0 3
38593: PPUSH
38594: CALL_OW 297
38598: PUSH
38599: LD_VAR 0 5
38603: LESS
38604: IFFALSE 38548
// end ; ComTurnXY ( unit , x , y ) ;
38606: LD_VAR 0 1
38610: PPUSH
38611: LD_VAR 0 2
38615: PPUSH
38616: LD_VAR 0 3
38620: PPUSH
38621: CALL_OW 118
// wait ( 5 ) ;
38625: LD_INT 5
38627: PPUSH
38628: CALL_OW 67
// _d := GetDir ( unit ) ;
38632: LD_ADDR_VAR 0 10
38636: PUSH
38637: LD_VAR 0 1
38641: PPUSH
38642: CALL_OW 254
38646: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38647: LD_ADDR_VAR 0 8
38651: PUSH
38652: LD_VAR 0 1
38656: PPUSH
38657: CALL_OW 250
38661: PPUSH
38662: LD_VAR 0 10
38666: PPUSH
38667: LD_VAR 0 5
38671: PPUSH
38672: CALL_OW 272
38676: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38677: LD_ADDR_VAR 0 9
38681: PUSH
38682: LD_VAR 0 1
38686: PPUSH
38687: CALL_OW 251
38691: PPUSH
38692: LD_VAR 0 10
38696: PPUSH
38697: LD_VAR 0 5
38701: PPUSH
38702: CALL_OW 273
38706: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38707: LD_VAR 0 8
38711: PPUSH
38712: LD_VAR 0 9
38716: PPUSH
38717: CALL_OW 488
38721: NOT
38722: IFFALSE 38726
// exit ;
38724: GO 38833
// ComAnimCustom ( unit , 1 ) ;
38726: LD_VAR 0 1
38730: PPUSH
38731: LD_INT 1
38733: PPUSH
38734: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38738: LD_VAR 0 8
38742: PPUSH
38743: LD_VAR 0 9
38747: PPUSH
38748: LD_VAR 0 6
38752: PPUSH
38753: LD_VAR 0 7
38757: PPUSH
38758: CALL_OW 330
// repeat wait ( 1 ) ;
38762: LD_INT 1
38764: PPUSH
38765: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
38769: LD_VAR 0 1
38773: PPUSH
38774: CALL_OW 316
38778: PUSH
38779: LD_VAR 0 1
38783: PPUSH
38784: CALL_OW 314
38788: OR
38789: PUSH
38790: LD_VAR 0 1
38794: PPUSH
38795: CALL_OW 302
38799: NOT
38800: OR
38801: PUSH
38802: LD_VAR 0 1
38806: PPUSH
38807: CALL_OW 301
38811: OR
38812: IFFALSE 38762
// RemoveSeeing ( _x , _y , side ) ;
38814: LD_VAR 0 8
38818: PPUSH
38819: LD_VAR 0 9
38823: PPUSH
38824: LD_VAR 0 6
38828: PPUSH
38829: CALL_OW 331
// end ; end_of_file
38833: LD_VAR 0 4
38837: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38838: LD_INT 0
38840: PPUSH
38841: PPUSH
// if exist_mode then
38842: LD_VAR 0 2
38846: IFFALSE 38871
// unit := CreateCharacter ( prefix & ident ) else
38848: LD_ADDR_VAR 0 5
38852: PUSH
38853: LD_VAR 0 3
38857: PUSH
38858: LD_VAR 0 1
38862: STR
38863: PPUSH
38864: CALL_OW 34
38868: ST_TO_ADDR
38869: GO 38886
// unit := NewCharacter ( ident ) ;
38871: LD_ADDR_VAR 0 5
38875: PUSH
38876: LD_VAR 0 1
38880: PPUSH
38881: CALL_OW 25
38885: ST_TO_ADDR
// result := unit ;
38886: LD_ADDR_VAR 0 4
38890: PUSH
38891: LD_VAR 0 5
38895: ST_TO_ADDR
// end ;
38896: LD_VAR 0 4
38900: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38901: LD_INT 0
38903: PPUSH
38904: PPUSH
// if not side or not nation then
38905: LD_VAR 0 1
38909: NOT
38910: PUSH
38911: LD_VAR 0 2
38915: NOT
38916: OR
38917: IFFALSE 38921
// exit ;
38919: GO 39689
// case nation of nation_american :
38921: LD_VAR 0 2
38925: PUSH
38926: LD_INT 1
38928: DOUBLE
38929: EQUAL
38930: IFTRUE 38934
38932: GO 39148
38934: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38935: LD_ADDR_VAR 0 4
38939: PUSH
38940: LD_INT 35
38942: PUSH
38943: LD_INT 45
38945: PUSH
38946: LD_INT 46
38948: PUSH
38949: LD_INT 47
38951: PUSH
38952: LD_INT 82
38954: PUSH
38955: LD_INT 83
38957: PUSH
38958: LD_INT 84
38960: PUSH
38961: LD_INT 85
38963: PUSH
38964: LD_INT 86
38966: PUSH
38967: LD_INT 1
38969: PUSH
38970: LD_INT 2
38972: PUSH
38973: LD_INT 6
38975: PUSH
38976: LD_INT 15
38978: PUSH
38979: LD_INT 16
38981: PUSH
38982: LD_INT 7
38984: PUSH
38985: LD_INT 12
38987: PUSH
38988: LD_INT 13
38990: PUSH
38991: LD_INT 10
38993: PUSH
38994: LD_INT 14
38996: PUSH
38997: LD_INT 20
38999: PUSH
39000: LD_INT 21
39002: PUSH
39003: LD_INT 22
39005: PUSH
39006: LD_INT 25
39008: PUSH
39009: LD_INT 32
39011: PUSH
39012: LD_INT 27
39014: PUSH
39015: LD_INT 36
39017: PUSH
39018: LD_INT 69
39020: PUSH
39021: LD_INT 39
39023: PUSH
39024: LD_INT 34
39026: PUSH
39027: LD_INT 40
39029: PUSH
39030: LD_INT 48
39032: PUSH
39033: LD_INT 49
39035: PUSH
39036: LD_INT 50
39038: PUSH
39039: LD_INT 51
39041: PUSH
39042: LD_INT 52
39044: PUSH
39045: LD_INT 53
39047: PUSH
39048: LD_INT 54
39050: PUSH
39051: LD_INT 55
39053: PUSH
39054: LD_INT 56
39056: PUSH
39057: LD_INT 57
39059: PUSH
39060: LD_INT 58
39062: PUSH
39063: LD_INT 59
39065: PUSH
39066: LD_INT 60
39068: PUSH
39069: LD_INT 61
39071: PUSH
39072: LD_INT 62
39074: PUSH
39075: LD_INT 80
39077: PUSH
39078: LD_INT 82
39080: PUSH
39081: LD_INT 83
39083: PUSH
39084: LD_INT 84
39086: PUSH
39087: LD_INT 85
39089: PUSH
39090: LD_INT 86
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: ST_TO_ADDR
39146: GO 39613
39148: LD_INT 2
39150: DOUBLE
39151: EQUAL
39152: IFTRUE 39156
39154: GO 39382
39156: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39157: LD_ADDR_VAR 0 4
39161: PUSH
39162: LD_INT 35
39164: PUSH
39165: LD_INT 45
39167: PUSH
39168: LD_INT 46
39170: PUSH
39171: LD_INT 47
39173: PUSH
39174: LD_INT 82
39176: PUSH
39177: LD_INT 83
39179: PUSH
39180: LD_INT 84
39182: PUSH
39183: LD_INT 85
39185: PUSH
39186: LD_INT 87
39188: PUSH
39189: LD_INT 70
39191: PUSH
39192: LD_INT 1
39194: PUSH
39195: LD_INT 11
39197: PUSH
39198: LD_INT 3
39200: PUSH
39201: LD_INT 4
39203: PUSH
39204: LD_INT 5
39206: PUSH
39207: LD_INT 6
39209: PUSH
39210: LD_INT 15
39212: PUSH
39213: LD_INT 18
39215: PUSH
39216: LD_INT 7
39218: PUSH
39219: LD_INT 17
39221: PUSH
39222: LD_INT 8
39224: PUSH
39225: LD_INT 20
39227: PUSH
39228: LD_INT 21
39230: PUSH
39231: LD_INT 22
39233: PUSH
39234: LD_INT 72
39236: PUSH
39237: LD_INT 26
39239: PUSH
39240: LD_INT 69
39242: PUSH
39243: LD_INT 39
39245: PUSH
39246: LD_INT 40
39248: PUSH
39249: LD_INT 41
39251: PUSH
39252: LD_INT 42
39254: PUSH
39255: LD_INT 43
39257: PUSH
39258: LD_INT 48
39260: PUSH
39261: LD_INT 49
39263: PUSH
39264: LD_INT 50
39266: PUSH
39267: LD_INT 51
39269: PUSH
39270: LD_INT 52
39272: PUSH
39273: LD_INT 53
39275: PUSH
39276: LD_INT 54
39278: PUSH
39279: LD_INT 55
39281: PUSH
39282: LD_INT 56
39284: PUSH
39285: LD_INT 60
39287: PUSH
39288: LD_INT 61
39290: PUSH
39291: LD_INT 62
39293: PUSH
39294: LD_INT 66
39296: PUSH
39297: LD_INT 67
39299: PUSH
39300: LD_INT 68
39302: PUSH
39303: LD_INT 81
39305: PUSH
39306: LD_INT 82
39308: PUSH
39309: LD_INT 83
39311: PUSH
39312: LD_INT 84
39314: PUSH
39315: LD_INT 85
39317: PUSH
39318: LD_INT 87
39320: PUSH
39321: LD_INT 88
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: ST_TO_ADDR
39380: GO 39613
39382: LD_INT 3
39384: DOUBLE
39385: EQUAL
39386: IFTRUE 39390
39388: GO 39612
39390: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39391: LD_ADDR_VAR 0 4
39395: PUSH
39396: LD_INT 46
39398: PUSH
39399: LD_INT 47
39401: PUSH
39402: LD_INT 1
39404: PUSH
39405: LD_INT 2
39407: PUSH
39408: LD_INT 82
39410: PUSH
39411: LD_INT 83
39413: PUSH
39414: LD_INT 84
39416: PUSH
39417: LD_INT 85
39419: PUSH
39420: LD_INT 86
39422: PUSH
39423: LD_INT 11
39425: PUSH
39426: LD_INT 9
39428: PUSH
39429: LD_INT 20
39431: PUSH
39432: LD_INT 19
39434: PUSH
39435: LD_INT 21
39437: PUSH
39438: LD_INT 24
39440: PUSH
39441: LD_INT 22
39443: PUSH
39444: LD_INT 25
39446: PUSH
39447: LD_INT 28
39449: PUSH
39450: LD_INT 29
39452: PUSH
39453: LD_INT 30
39455: PUSH
39456: LD_INT 31
39458: PUSH
39459: LD_INT 37
39461: PUSH
39462: LD_INT 38
39464: PUSH
39465: LD_INT 32
39467: PUSH
39468: LD_INT 27
39470: PUSH
39471: LD_INT 33
39473: PUSH
39474: LD_INT 69
39476: PUSH
39477: LD_INT 39
39479: PUSH
39480: LD_INT 34
39482: PUSH
39483: LD_INT 40
39485: PUSH
39486: LD_INT 71
39488: PUSH
39489: LD_INT 23
39491: PUSH
39492: LD_INT 44
39494: PUSH
39495: LD_INT 48
39497: PUSH
39498: LD_INT 49
39500: PUSH
39501: LD_INT 50
39503: PUSH
39504: LD_INT 51
39506: PUSH
39507: LD_INT 52
39509: PUSH
39510: LD_INT 53
39512: PUSH
39513: LD_INT 54
39515: PUSH
39516: LD_INT 55
39518: PUSH
39519: LD_INT 56
39521: PUSH
39522: LD_INT 57
39524: PUSH
39525: LD_INT 58
39527: PUSH
39528: LD_INT 59
39530: PUSH
39531: LD_INT 63
39533: PUSH
39534: LD_INT 64
39536: PUSH
39537: LD_INT 65
39539: PUSH
39540: LD_INT 82
39542: PUSH
39543: LD_INT 83
39545: PUSH
39546: LD_INT 84
39548: PUSH
39549: LD_INT 85
39551: PUSH
39552: LD_INT 86
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: ST_TO_ADDR
39610: GO 39613
39612: POP
// if state > - 1 and state < 3 then
39613: LD_VAR 0 3
39617: PUSH
39618: LD_INT 1
39620: NEG
39621: GREATER
39622: PUSH
39623: LD_VAR 0 3
39627: PUSH
39628: LD_INT 3
39630: LESS
39631: AND
39632: IFFALSE 39689
// for i in result do
39634: LD_ADDR_VAR 0 5
39638: PUSH
39639: LD_VAR 0 4
39643: PUSH
39644: FOR_IN
39645: IFFALSE 39687
// if GetTech ( i , side ) <> state then
39647: LD_VAR 0 5
39651: PPUSH
39652: LD_VAR 0 1
39656: PPUSH
39657: CALL_OW 321
39661: PUSH
39662: LD_VAR 0 3
39666: NONEQUAL
39667: IFFALSE 39685
// result := result diff i ;
39669: LD_ADDR_VAR 0 4
39673: PUSH
39674: LD_VAR 0 4
39678: PUSH
39679: LD_VAR 0 5
39683: DIFF
39684: ST_TO_ADDR
39685: GO 39644
39687: POP
39688: POP
// end ;
39689: LD_VAR 0 4
39693: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39694: LD_INT 0
39696: PPUSH
39697: PPUSH
39698: PPUSH
// result := true ;
39699: LD_ADDR_VAR 0 3
39703: PUSH
39704: LD_INT 1
39706: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39707: LD_ADDR_VAR 0 5
39711: PUSH
39712: LD_VAR 0 2
39716: PPUSH
39717: CALL_OW 480
39721: ST_TO_ADDR
// if not tmp then
39722: LD_VAR 0 5
39726: NOT
39727: IFFALSE 39731
// exit ;
39729: GO 39780
// for i in tmp do
39731: LD_ADDR_VAR 0 4
39735: PUSH
39736: LD_VAR 0 5
39740: PUSH
39741: FOR_IN
39742: IFFALSE 39778
// if GetTech ( i , side ) <> state_researched then
39744: LD_VAR 0 4
39748: PPUSH
39749: LD_VAR 0 1
39753: PPUSH
39754: CALL_OW 321
39758: PUSH
39759: LD_INT 2
39761: NONEQUAL
39762: IFFALSE 39776
// begin result := false ;
39764: LD_ADDR_VAR 0 3
39768: PUSH
39769: LD_INT 0
39771: ST_TO_ADDR
// exit ;
39772: POP
39773: POP
39774: GO 39780
// end ;
39776: GO 39741
39778: POP
39779: POP
// end ;
39780: LD_VAR 0 3
39784: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39785: LD_INT 0
39787: PPUSH
39788: PPUSH
39789: PPUSH
39790: PPUSH
39791: PPUSH
39792: PPUSH
39793: PPUSH
39794: PPUSH
39795: PPUSH
39796: PPUSH
39797: PPUSH
39798: PPUSH
39799: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39800: LD_VAR 0 1
39804: NOT
39805: PUSH
39806: LD_VAR 0 1
39810: PPUSH
39811: CALL_OW 257
39815: PUSH
39816: LD_INT 9
39818: NONEQUAL
39819: OR
39820: IFFALSE 39824
// exit ;
39822: GO 40397
// side := GetSide ( unit ) ;
39824: LD_ADDR_VAR 0 9
39828: PUSH
39829: LD_VAR 0 1
39833: PPUSH
39834: CALL_OW 255
39838: ST_TO_ADDR
// tech_space := tech_spacanom ;
39839: LD_ADDR_VAR 0 12
39843: PUSH
39844: LD_INT 29
39846: ST_TO_ADDR
// tech_time := tech_taurad ;
39847: LD_ADDR_VAR 0 13
39851: PUSH
39852: LD_INT 28
39854: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39855: LD_ADDR_VAR 0 11
39859: PUSH
39860: LD_VAR 0 1
39864: PPUSH
39865: CALL_OW 310
39869: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39870: LD_VAR 0 11
39874: PPUSH
39875: CALL_OW 247
39879: PUSH
39880: LD_INT 2
39882: EQUAL
39883: IFFALSE 39887
// exit ;
39885: GO 40397
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39887: LD_ADDR_VAR 0 8
39891: PUSH
39892: LD_INT 81
39894: PUSH
39895: LD_VAR 0 9
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: LD_INT 3
39906: PUSH
39907: LD_INT 21
39909: PUSH
39910: LD_INT 3
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PPUSH
39925: CALL_OW 69
39929: ST_TO_ADDR
// if not tmp then
39930: LD_VAR 0 8
39934: NOT
39935: IFFALSE 39939
// exit ;
39937: GO 40397
// if in_unit then
39939: LD_VAR 0 11
39943: IFFALSE 39967
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39945: LD_ADDR_VAR 0 10
39949: PUSH
39950: LD_VAR 0 8
39954: PPUSH
39955: LD_VAR 0 11
39959: PPUSH
39960: CALL_OW 74
39964: ST_TO_ADDR
39965: GO 39987
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39967: LD_ADDR_VAR 0 10
39971: PUSH
39972: LD_VAR 0 8
39976: PPUSH
39977: LD_VAR 0 1
39981: PPUSH
39982: CALL_OW 74
39986: ST_TO_ADDR
// if not enemy then
39987: LD_VAR 0 10
39991: NOT
39992: IFFALSE 39996
// exit ;
39994: GO 40397
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39996: LD_VAR 0 11
40000: PUSH
40001: LD_VAR 0 11
40005: PPUSH
40006: LD_VAR 0 10
40010: PPUSH
40011: CALL_OW 296
40015: PUSH
40016: LD_INT 13
40018: GREATER
40019: AND
40020: PUSH
40021: LD_VAR 0 1
40025: PPUSH
40026: LD_VAR 0 10
40030: PPUSH
40031: CALL_OW 296
40035: PUSH
40036: LD_INT 12
40038: GREATER
40039: OR
40040: IFFALSE 40044
// exit ;
40042: GO 40397
// missile := [ 1 ] ;
40044: LD_ADDR_VAR 0 14
40048: PUSH
40049: LD_INT 1
40051: PUSH
40052: EMPTY
40053: LIST
40054: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40055: LD_VAR 0 9
40059: PPUSH
40060: LD_VAR 0 12
40064: PPUSH
40065: CALL_OW 325
40069: IFFALSE 40098
// missile := Replace ( missile , missile + 1 , 2 ) ;
40071: LD_ADDR_VAR 0 14
40075: PUSH
40076: LD_VAR 0 14
40080: PPUSH
40081: LD_VAR 0 14
40085: PUSH
40086: LD_INT 1
40088: PLUS
40089: PPUSH
40090: LD_INT 2
40092: PPUSH
40093: CALL_OW 1
40097: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40098: LD_VAR 0 9
40102: PPUSH
40103: LD_VAR 0 13
40107: PPUSH
40108: CALL_OW 325
40112: PUSH
40113: LD_VAR 0 10
40117: PPUSH
40118: CALL_OW 255
40122: PPUSH
40123: LD_VAR 0 13
40127: PPUSH
40128: CALL_OW 325
40132: NOT
40133: AND
40134: IFFALSE 40163
// missile := Replace ( missile , missile + 1 , 3 ) ;
40136: LD_ADDR_VAR 0 14
40140: PUSH
40141: LD_VAR 0 14
40145: PPUSH
40146: LD_VAR 0 14
40150: PUSH
40151: LD_INT 1
40153: PLUS
40154: PPUSH
40155: LD_INT 3
40157: PPUSH
40158: CALL_OW 1
40162: ST_TO_ADDR
// if missile < 2 then
40163: LD_VAR 0 14
40167: PUSH
40168: LD_INT 2
40170: LESS
40171: IFFALSE 40175
// exit ;
40173: GO 40397
// x := GetX ( enemy ) ;
40175: LD_ADDR_VAR 0 4
40179: PUSH
40180: LD_VAR 0 10
40184: PPUSH
40185: CALL_OW 250
40189: ST_TO_ADDR
// y := GetY ( enemy ) ;
40190: LD_ADDR_VAR 0 5
40194: PUSH
40195: LD_VAR 0 10
40199: PPUSH
40200: CALL_OW 251
40204: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40205: LD_ADDR_VAR 0 6
40209: PUSH
40210: LD_VAR 0 4
40214: PUSH
40215: LD_INT 1
40217: NEG
40218: PPUSH
40219: LD_INT 1
40221: PPUSH
40222: CALL_OW 12
40226: PLUS
40227: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40228: LD_ADDR_VAR 0 7
40232: PUSH
40233: LD_VAR 0 5
40237: PUSH
40238: LD_INT 1
40240: NEG
40241: PPUSH
40242: LD_INT 1
40244: PPUSH
40245: CALL_OW 12
40249: PLUS
40250: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40251: LD_VAR 0 6
40255: PPUSH
40256: LD_VAR 0 7
40260: PPUSH
40261: CALL_OW 488
40265: NOT
40266: IFFALSE 40288
// begin _x := x ;
40268: LD_ADDR_VAR 0 6
40272: PUSH
40273: LD_VAR 0 4
40277: ST_TO_ADDR
// _y := y ;
40278: LD_ADDR_VAR 0 7
40282: PUSH
40283: LD_VAR 0 5
40287: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40288: LD_ADDR_VAR 0 3
40292: PUSH
40293: LD_INT 1
40295: PPUSH
40296: LD_VAR 0 14
40300: PPUSH
40301: CALL_OW 12
40305: ST_TO_ADDR
// case i of 1 :
40306: LD_VAR 0 3
40310: PUSH
40311: LD_INT 1
40313: DOUBLE
40314: EQUAL
40315: IFTRUE 40319
40317: GO 40336
40319: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40320: LD_VAR 0 1
40324: PPUSH
40325: LD_VAR 0 10
40329: PPUSH
40330: CALL_OW 115
40334: GO 40397
40336: LD_INT 2
40338: DOUBLE
40339: EQUAL
40340: IFTRUE 40344
40342: GO 40366
40344: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40345: LD_VAR 0 1
40349: PPUSH
40350: LD_VAR 0 6
40354: PPUSH
40355: LD_VAR 0 7
40359: PPUSH
40360: CALL_OW 153
40364: GO 40397
40366: LD_INT 3
40368: DOUBLE
40369: EQUAL
40370: IFTRUE 40374
40372: GO 40396
40374: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40375: LD_VAR 0 1
40379: PPUSH
40380: LD_VAR 0 6
40384: PPUSH
40385: LD_VAR 0 7
40389: PPUSH
40390: CALL_OW 154
40394: GO 40397
40396: POP
// end ;
40397: LD_VAR 0 2
40401: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40402: LD_INT 0
40404: PPUSH
40405: PPUSH
40406: PPUSH
40407: PPUSH
40408: PPUSH
40409: PPUSH
// if not unit or not building then
40410: LD_VAR 0 1
40414: NOT
40415: PUSH
40416: LD_VAR 0 2
40420: NOT
40421: OR
40422: IFFALSE 40426
// exit ;
40424: GO 40584
// x := GetX ( building ) ;
40426: LD_ADDR_VAR 0 5
40430: PUSH
40431: LD_VAR 0 2
40435: PPUSH
40436: CALL_OW 250
40440: ST_TO_ADDR
// y := GetY ( building ) ;
40441: LD_ADDR_VAR 0 6
40445: PUSH
40446: LD_VAR 0 2
40450: PPUSH
40451: CALL_OW 251
40455: ST_TO_ADDR
// for i = 0 to 5 do
40456: LD_ADDR_VAR 0 4
40460: PUSH
40461: DOUBLE
40462: LD_INT 0
40464: DEC
40465: ST_TO_ADDR
40466: LD_INT 5
40468: PUSH
40469: FOR_TO
40470: IFFALSE 40582
// begin _x := ShiftX ( x , i , 3 ) ;
40472: LD_ADDR_VAR 0 7
40476: PUSH
40477: LD_VAR 0 5
40481: PPUSH
40482: LD_VAR 0 4
40486: PPUSH
40487: LD_INT 3
40489: PPUSH
40490: CALL_OW 272
40494: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40495: LD_ADDR_VAR 0 8
40499: PUSH
40500: LD_VAR 0 6
40504: PPUSH
40505: LD_VAR 0 4
40509: PPUSH
40510: LD_INT 3
40512: PPUSH
40513: CALL_OW 273
40517: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40518: LD_VAR 0 7
40522: PPUSH
40523: LD_VAR 0 8
40527: PPUSH
40528: CALL_OW 488
40532: NOT
40533: IFFALSE 40537
// continue ;
40535: GO 40469
// if HexInfo ( _x , _y ) = 0 then
40537: LD_VAR 0 7
40541: PPUSH
40542: LD_VAR 0 8
40546: PPUSH
40547: CALL_OW 428
40551: PUSH
40552: LD_INT 0
40554: EQUAL
40555: IFFALSE 40580
// begin ComMoveXY ( unit , _x , _y ) ;
40557: LD_VAR 0 1
40561: PPUSH
40562: LD_VAR 0 7
40566: PPUSH
40567: LD_VAR 0 8
40571: PPUSH
40572: CALL_OW 111
// exit ;
40576: POP
40577: POP
40578: GO 40584
// end ; end ;
40580: GO 40469
40582: POP
40583: POP
// end ;
40584: LD_VAR 0 3
40588: RET
// export function ScanBase ( side , base_area ) ; begin
40589: LD_INT 0
40591: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40592: LD_ADDR_VAR 0 3
40596: PUSH
40597: LD_VAR 0 2
40601: PPUSH
40602: LD_INT 81
40604: PUSH
40605: LD_VAR 0 1
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PPUSH
40614: CALL_OW 70
40618: ST_TO_ADDR
// end ;
40619: LD_VAR 0 3
40623: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40624: LD_INT 0
40626: PPUSH
40627: PPUSH
40628: PPUSH
40629: PPUSH
// result := false ;
40630: LD_ADDR_VAR 0 2
40634: PUSH
40635: LD_INT 0
40637: ST_TO_ADDR
// side := GetSide ( unit ) ;
40638: LD_ADDR_VAR 0 3
40642: PUSH
40643: LD_VAR 0 1
40647: PPUSH
40648: CALL_OW 255
40652: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40653: LD_ADDR_VAR 0 4
40657: PUSH
40658: LD_VAR 0 1
40662: PPUSH
40663: CALL_OW 248
40667: ST_TO_ADDR
// case nat of 1 :
40668: LD_VAR 0 4
40672: PUSH
40673: LD_INT 1
40675: DOUBLE
40676: EQUAL
40677: IFTRUE 40681
40679: GO 40692
40681: POP
// tech := tech_lassight ; 2 :
40682: LD_ADDR_VAR 0 5
40686: PUSH
40687: LD_INT 12
40689: ST_TO_ADDR
40690: GO 40731
40692: LD_INT 2
40694: DOUBLE
40695: EQUAL
40696: IFTRUE 40700
40698: GO 40711
40700: POP
// tech := tech_mortar ; 3 :
40701: LD_ADDR_VAR 0 5
40705: PUSH
40706: LD_INT 41
40708: ST_TO_ADDR
40709: GO 40731
40711: LD_INT 3
40713: DOUBLE
40714: EQUAL
40715: IFTRUE 40719
40717: GO 40730
40719: POP
// tech := tech_bazooka ; end ;
40720: LD_ADDR_VAR 0 5
40724: PUSH
40725: LD_INT 44
40727: ST_TO_ADDR
40728: GO 40731
40730: POP
// if Researched ( side , tech ) then
40731: LD_VAR 0 3
40735: PPUSH
40736: LD_VAR 0 5
40740: PPUSH
40741: CALL_OW 325
40745: IFFALSE 40772
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40747: LD_ADDR_VAR 0 2
40751: PUSH
40752: LD_INT 5
40754: PUSH
40755: LD_INT 8
40757: PUSH
40758: LD_INT 9
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: LIST
40765: PUSH
40766: LD_VAR 0 4
40770: ARRAY
40771: ST_TO_ADDR
// end ;
40772: LD_VAR 0 2
40776: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40777: LD_INT 0
40779: PPUSH
40780: PPUSH
40781: PPUSH
// if not mines then
40782: LD_VAR 0 2
40786: NOT
40787: IFFALSE 40791
// exit ;
40789: GO 40935
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40791: LD_ADDR_VAR 0 5
40795: PUSH
40796: LD_INT 81
40798: PUSH
40799: LD_VAR 0 1
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 3
40810: PUSH
40811: LD_INT 21
40813: PUSH
40814: LD_INT 3
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PPUSH
40829: CALL_OW 69
40833: ST_TO_ADDR
// for i in mines do
40834: LD_ADDR_VAR 0 4
40838: PUSH
40839: LD_VAR 0 2
40843: PUSH
40844: FOR_IN
40845: IFFALSE 40933
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40847: LD_VAR 0 4
40851: PUSH
40852: LD_INT 1
40854: ARRAY
40855: PPUSH
40856: LD_VAR 0 4
40860: PUSH
40861: LD_INT 2
40863: ARRAY
40864: PPUSH
40865: CALL_OW 458
40869: NOT
40870: IFFALSE 40874
// continue ;
40872: GO 40844
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40874: LD_VAR 0 4
40878: PUSH
40879: LD_INT 1
40881: ARRAY
40882: PPUSH
40883: LD_VAR 0 4
40887: PUSH
40888: LD_INT 2
40890: ARRAY
40891: PPUSH
40892: CALL_OW 428
40896: PUSH
40897: LD_VAR 0 5
40901: IN
40902: IFFALSE 40931
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40904: LD_VAR 0 4
40908: PUSH
40909: LD_INT 1
40911: ARRAY
40912: PPUSH
40913: LD_VAR 0 4
40917: PUSH
40918: LD_INT 2
40920: ARRAY
40921: PPUSH
40922: LD_VAR 0 1
40926: PPUSH
40927: CALL_OW 456
// end ;
40931: GO 40844
40933: POP
40934: POP
// end ;
40935: LD_VAR 0 3
40939: RET
// export function Count ( array ) ; var i ; begin
40940: LD_INT 0
40942: PPUSH
40943: PPUSH
// result := 0 ;
40944: LD_ADDR_VAR 0 2
40948: PUSH
40949: LD_INT 0
40951: ST_TO_ADDR
// for i in array do
40952: LD_ADDR_VAR 0 3
40956: PUSH
40957: LD_VAR 0 1
40961: PUSH
40962: FOR_IN
40963: IFFALSE 40987
// if i then
40965: LD_VAR 0 3
40969: IFFALSE 40985
// result := result + 1 ;
40971: LD_ADDR_VAR 0 2
40975: PUSH
40976: LD_VAR 0 2
40980: PUSH
40981: LD_INT 1
40983: PLUS
40984: ST_TO_ADDR
40985: GO 40962
40987: POP
40988: POP
// end ;
40989: LD_VAR 0 2
40993: RET
// export function IsEmpty ( building ) ; begin
40994: LD_INT 0
40996: PPUSH
// if not building then
40997: LD_VAR 0 1
41001: NOT
41002: IFFALSE 41006
// exit ;
41004: GO 41049
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41006: LD_ADDR_VAR 0 2
41010: PUSH
41011: LD_VAR 0 1
41015: PUSH
41016: LD_INT 22
41018: PUSH
41019: LD_VAR 0 1
41023: PPUSH
41024: CALL_OW 255
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 58
41035: PUSH
41036: EMPTY
41037: LIST
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PPUSH
41043: CALL_OW 69
41047: IN
41048: ST_TO_ADDR
// end ;
41049: LD_VAR 0 2
41053: RET
// export function IsNotFull ( building ) ; var places ; begin
41054: LD_INT 0
41056: PPUSH
41057: PPUSH
// if not building then
41058: LD_VAR 0 1
41062: NOT
41063: IFFALSE 41067
// exit ;
41065: GO 41238
// result := false ;
41067: LD_ADDR_VAR 0 2
41071: PUSH
41072: LD_INT 0
41074: ST_TO_ADDR
// places := 0 ;
41075: LD_ADDR_VAR 0 3
41079: PUSH
41080: LD_INT 0
41082: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
41083: LD_VAR 0 1
41087: PPUSH
41088: CALL_OW 266
41092: PUSH
41093: LD_INT 0
41095: DOUBLE
41096: EQUAL
41097: IFTRUE 41155
41099: LD_INT 1
41101: DOUBLE
41102: EQUAL
41103: IFTRUE 41155
41105: LD_INT 6
41107: DOUBLE
41108: EQUAL
41109: IFTRUE 41155
41111: LD_INT 7
41113: DOUBLE
41114: EQUAL
41115: IFTRUE 41155
41117: LD_INT 8
41119: DOUBLE
41120: EQUAL
41121: IFTRUE 41155
41123: LD_INT 4
41125: DOUBLE
41126: EQUAL
41127: IFTRUE 41155
41129: LD_INT 5
41131: DOUBLE
41132: EQUAL
41133: IFTRUE 41155
41135: LD_INT 2
41137: DOUBLE
41138: EQUAL
41139: IFTRUE 41155
41141: LD_INT 3
41143: DOUBLE
41144: EQUAL
41145: IFTRUE 41155
41147: LD_INT 35
41149: DOUBLE
41150: EQUAL
41151: IFTRUE 41155
41153: GO 41166
41155: POP
// places := 6 ; b_bunker , b_breastwork :
41156: LD_ADDR_VAR 0 3
41160: PUSH
41161: LD_INT 6
41163: ST_TO_ADDR
41164: GO 41211
41166: LD_INT 32
41168: DOUBLE
41169: EQUAL
41170: IFTRUE 41180
41172: LD_INT 31
41174: DOUBLE
41175: EQUAL
41176: IFTRUE 41180
41178: GO 41191
41180: POP
// places := 1 ; b_control_tower :
41181: LD_ADDR_VAR 0 3
41185: PUSH
41186: LD_INT 1
41188: ST_TO_ADDR
41189: GO 41211
41191: LD_INT 36
41193: DOUBLE
41194: EQUAL
41195: IFTRUE 41199
41197: GO 41210
41199: POP
// places := 3 ; end ;
41200: LD_ADDR_VAR 0 3
41204: PUSH
41205: LD_INT 3
41207: ST_TO_ADDR
41208: GO 41211
41210: POP
// if places then
41211: LD_VAR 0 3
41215: IFFALSE 41238
// result := UnitsInside ( building ) < places ;
41217: LD_ADDR_VAR 0 2
41221: PUSH
41222: LD_VAR 0 1
41226: PPUSH
41227: CALL_OW 313
41231: PUSH
41232: LD_VAR 0 3
41236: LESS
41237: ST_TO_ADDR
// end ;
41238: LD_VAR 0 2
41242: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41243: LD_INT 0
41245: PPUSH
41246: PPUSH
41247: PPUSH
41248: PPUSH
// tmp := [ ] ;
41249: LD_ADDR_VAR 0 3
41253: PUSH
41254: EMPTY
41255: ST_TO_ADDR
// list := [ ] ;
41256: LD_ADDR_VAR 0 5
41260: PUSH
41261: EMPTY
41262: ST_TO_ADDR
// for i = 16 to 25 do
41263: LD_ADDR_VAR 0 4
41267: PUSH
41268: DOUBLE
41269: LD_INT 16
41271: DEC
41272: ST_TO_ADDR
41273: LD_INT 25
41275: PUSH
41276: FOR_TO
41277: IFFALSE 41350
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41279: LD_ADDR_VAR 0 3
41283: PUSH
41284: LD_VAR 0 3
41288: PUSH
41289: LD_INT 22
41291: PUSH
41292: LD_VAR 0 1
41296: PPUSH
41297: CALL_OW 255
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 91
41308: PUSH
41309: LD_VAR 0 1
41313: PUSH
41314: LD_INT 6
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 30
41324: PUSH
41325: LD_VAR 0 4
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: LIST
41338: PUSH
41339: EMPTY
41340: LIST
41341: PPUSH
41342: CALL_OW 69
41346: ADD
41347: ST_TO_ADDR
41348: GO 41276
41350: POP
41351: POP
// for i = 1 to tmp do
41352: LD_ADDR_VAR 0 4
41356: PUSH
41357: DOUBLE
41358: LD_INT 1
41360: DEC
41361: ST_TO_ADDR
41362: LD_VAR 0 3
41366: PUSH
41367: FOR_TO
41368: IFFALSE 41456
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41370: LD_ADDR_VAR 0 5
41374: PUSH
41375: LD_VAR 0 5
41379: PUSH
41380: LD_VAR 0 3
41384: PUSH
41385: LD_VAR 0 4
41389: ARRAY
41390: PPUSH
41391: CALL_OW 266
41395: PUSH
41396: LD_VAR 0 3
41400: PUSH
41401: LD_VAR 0 4
41405: ARRAY
41406: PPUSH
41407: CALL_OW 250
41411: PUSH
41412: LD_VAR 0 3
41416: PUSH
41417: LD_VAR 0 4
41421: ARRAY
41422: PPUSH
41423: CALL_OW 251
41427: PUSH
41428: LD_VAR 0 3
41432: PUSH
41433: LD_VAR 0 4
41437: ARRAY
41438: PPUSH
41439: CALL_OW 254
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: PUSH
41450: EMPTY
41451: LIST
41452: ADD
41453: ST_TO_ADDR
41454: GO 41367
41456: POP
41457: POP
// result := list ;
41458: LD_ADDR_VAR 0 2
41462: PUSH
41463: LD_VAR 0 5
41467: ST_TO_ADDR
// end ;
41468: LD_VAR 0 2
41472: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41473: LD_INT 0
41475: PPUSH
41476: PPUSH
41477: PPUSH
41478: PPUSH
41479: PPUSH
41480: PPUSH
41481: PPUSH
// if not factory then
41482: LD_VAR 0 1
41486: NOT
41487: IFFALSE 41491
// exit ;
41489: GO 42084
// if control = control_apeman then
41491: LD_VAR 0 4
41495: PUSH
41496: LD_INT 5
41498: EQUAL
41499: IFFALSE 41608
// begin tmp := UnitsInside ( factory ) ;
41501: LD_ADDR_VAR 0 8
41505: PUSH
41506: LD_VAR 0 1
41510: PPUSH
41511: CALL_OW 313
41515: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41516: LD_VAR 0 8
41520: PPUSH
41521: LD_INT 25
41523: PUSH
41524: LD_INT 12
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PPUSH
41531: CALL_OW 72
41535: NOT
41536: IFFALSE 41546
// control := control_manual ;
41538: LD_ADDR_VAR 0 4
41542: PUSH
41543: LD_INT 1
41545: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41546: LD_ADDR_VAR 0 8
41550: PUSH
41551: LD_VAR 0 1
41555: PPUSH
41556: CALL 41243 0 1
41560: ST_TO_ADDR
// if tmp then
41561: LD_VAR 0 8
41565: IFFALSE 41608
// begin for i in tmp do
41567: LD_ADDR_VAR 0 7
41571: PUSH
41572: LD_VAR 0 8
41576: PUSH
41577: FOR_IN
41578: IFFALSE 41606
// if i [ 1 ] = b_ext_radio then
41580: LD_VAR 0 7
41584: PUSH
41585: LD_INT 1
41587: ARRAY
41588: PUSH
41589: LD_INT 22
41591: EQUAL
41592: IFFALSE 41604
// begin control := control_remote ;
41594: LD_ADDR_VAR 0 4
41598: PUSH
41599: LD_INT 2
41601: ST_TO_ADDR
// break ;
41602: GO 41606
// end ;
41604: GO 41577
41606: POP
41607: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41608: LD_VAR 0 1
41612: PPUSH
41613: LD_VAR 0 2
41617: PPUSH
41618: LD_VAR 0 3
41622: PPUSH
41623: LD_VAR 0 4
41627: PPUSH
41628: LD_VAR 0 5
41632: PPUSH
41633: CALL_OW 448
41637: IFFALSE 41672
// begin result := [ chassis , engine , control , weapon ] ;
41639: LD_ADDR_VAR 0 6
41643: PUSH
41644: LD_VAR 0 2
41648: PUSH
41649: LD_VAR 0 3
41653: PUSH
41654: LD_VAR 0 4
41658: PUSH
41659: LD_VAR 0 5
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: ST_TO_ADDR
// exit ;
41670: GO 42084
// end ; _chassis := AvailableChassisList ( factory ) ;
41672: LD_ADDR_VAR 0 9
41676: PUSH
41677: LD_VAR 0 1
41681: PPUSH
41682: CALL_OW 475
41686: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41687: LD_ADDR_VAR 0 11
41691: PUSH
41692: LD_VAR 0 1
41696: PPUSH
41697: CALL_OW 476
41701: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41702: LD_ADDR_VAR 0 12
41706: PUSH
41707: LD_VAR 0 1
41711: PPUSH
41712: CALL_OW 477
41716: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41717: LD_ADDR_VAR 0 10
41721: PUSH
41722: LD_VAR 0 1
41726: PPUSH
41727: CALL_OW 478
41731: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41732: LD_VAR 0 9
41736: NOT
41737: PUSH
41738: LD_VAR 0 11
41742: NOT
41743: OR
41744: PUSH
41745: LD_VAR 0 12
41749: NOT
41750: OR
41751: PUSH
41752: LD_VAR 0 10
41756: NOT
41757: OR
41758: IFFALSE 41793
// begin result := [ chassis , engine , control , weapon ] ;
41760: LD_ADDR_VAR 0 6
41764: PUSH
41765: LD_VAR 0 2
41769: PUSH
41770: LD_VAR 0 3
41774: PUSH
41775: LD_VAR 0 4
41779: PUSH
41780: LD_VAR 0 5
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: ST_TO_ADDR
// exit ;
41791: GO 42084
// end ; if not chassis in _chassis then
41793: LD_VAR 0 2
41797: PUSH
41798: LD_VAR 0 9
41802: IN
41803: NOT
41804: IFFALSE 41830
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41806: LD_ADDR_VAR 0 2
41810: PUSH
41811: LD_VAR 0 9
41815: PUSH
41816: LD_INT 1
41818: PPUSH
41819: LD_VAR 0 9
41823: PPUSH
41824: CALL_OW 12
41828: ARRAY
41829: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41830: LD_VAR 0 2
41834: PPUSH
41835: LD_VAR 0 3
41839: PPUSH
41840: CALL 42089 0 2
41844: NOT
41845: IFFALSE 41904
// repeat engine := _engine [ 1 ] ;
41847: LD_ADDR_VAR 0 3
41851: PUSH
41852: LD_VAR 0 11
41856: PUSH
41857: LD_INT 1
41859: ARRAY
41860: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41861: LD_ADDR_VAR 0 11
41865: PUSH
41866: LD_VAR 0 11
41870: PPUSH
41871: LD_INT 1
41873: PPUSH
41874: CALL_OW 3
41878: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41879: LD_VAR 0 2
41883: PPUSH
41884: LD_VAR 0 3
41888: PPUSH
41889: CALL 42089 0 2
41893: PUSH
41894: LD_VAR 0 11
41898: PUSH
41899: EMPTY
41900: EQUAL
41901: OR
41902: IFFALSE 41847
// if not control in _control then
41904: LD_VAR 0 4
41908: PUSH
41909: LD_VAR 0 12
41913: IN
41914: NOT
41915: IFFALSE 41941
// control := _control [ rand ( 1 , _control ) ] ;
41917: LD_ADDR_VAR 0 4
41921: PUSH
41922: LD_VAR 0 12
41926: PUSH
41927: LD_INT 1
41929: PPUSH
41930: LD_VAR 0 12
41934: PPUSH
41935: CALL_OW 12
41939: ARRAY
41940: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41941: LD_VAR 0 2
41945: PPUSH
41946: LD_VAR 0 5
41950: PPUSH
41951: CALL 42309 0 2
41955: NOT
41956: IFFALSE 42015
// repeat weapon := _weapon [ 1 ] ;
41958: LD_ADDR_VAR 0 5
41962: PUSH
41963: LD_VAR 0 10
41967: PUSH
41968: LD_INT 1
41970: ARRAY
41971: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41972: LD_ADDR_VAR 0 10
41976: PUSH
41977: LD_VAR 0 10
41981: PPUSH
41982: LD_INT 1
41984: PPUSH
41985: CALL_OW 3
41989: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41990: LD_VAR 0 2
41994: PPUSH
41995: LD_VAR 0 5
41999: PPUSH
42000: CALL 42309 0 2
42004: PUSH
42005: LD_VAR 0 10
42009: PUSH
42010: EMPTY
42011: EQUAL
42012: OR
42013: IFFALSE 41958
// result := [ ] ;
42015: LD_ADDR_VAR 0 6
42019: PUSH
42020: EMPTY
42021: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42022: LD_VAR 0 1
42026: PPUSH
42027: LD_VAR 0 2
42031: PPUSH
42032: LD_VAR 0 3
42036: PPUSH
42037: LD_VAR 0 4
42041: PPUSH
42042: LD_VAR 0 5
42046: PPUSH
42047: CALL_OW 448
42051: IFFALSE 42084
// result := [ chassis , engine , control , weapon ] ;
42053: LD_ADDR_VAR 0 6
42057: PUSH
42058: LD_VAR 0 2
42062: PUSH
42063: LD_VAR 0 3
42067: PUSH
42068: LD_VAR 0 4
42072: PUSH
42073: LD_VAR 0 5
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: ST_TO_ADDR
// end ;
42084: LD_VAR 0 6
42088: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42089: LD_INT 0
42091: PPUSH
// if not chassis or not engine then
42092: LD_VAR 0 1
42096: NOT
42097: PUSH
42098: LD_VAR 0 2
42102: NOT
42103: OR
42104: IFFALSE 42108
// exit ;
42106: GO 42304
// case engine of engine_solar :
42108: LD_VAR 0 2
42112: PUSH
42113: LD_INT 2
42115: DOUBLE
42116: EQUAL
42117: IFTRUE 42121
42119: GO 42159
42121: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42122: LD_ADDR_VAR 0 3
42126: PUSH
42127: LD_INT 11
42129: PUSH
42130: LD_INT 12
42132: PUSH
42133: LD_INT 13
42135: PUSH
42136: LD_INT 14
42138: PUSH
42139: LD_INT 1
42141: PUSH
42142: LD_INT 2
42144: PUSH
42145: LD_INT 3
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: ST_TO_ADDR
42157: GO 42288
42159: LD_INT 1
42161: DOUBLE
42162: EQUAL
42163: IFTRUE 42167
42165: GO 42229
42167: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42168: LD_ADDR_VAR 0 3
42172: PUSH
42173: LD_INT 11
42175: PUSH
42176: LD_INT 12
42178: PUSH
42179: LD_INT 13
42181: PUSH
42182: LD_INT 14
42184: PUSH
42185: LD_INT 1
42187: PUSH
42188: LD_INT 2
42190: PUSH
42191: LD_INT 3
42193: PUSH
42194: LD_INT 4
42196: PUSH
42197: LD_INT 5
42199: PUSH
42200: LD_INT 21
42202: PUSH
42203: LD_INT 23
42205: PUSH
42206: LD_INT 22
42208: PUSH
42209: LD_INT 24
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: ST_TO_ADDR
42227: GO 42288
42229: LD_INT 3
42231: DOUBLE
42232: EQUAL
42233: IFTRUE 42237
42235: GO 42287
42237: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42238: LD_ADDR_VAR 0 3
42242: PUSH
42243: LD_INT 13
42245: PUSH
42246: LD_INT 14
42248: PUSH
42249: LD_INT 2
42251: PUSH
42252: LD_INT 3
42254: PUSH
42255: LD_INT 4
42257: PUSH
42258: LD_INT 5
42260: PUSH
42261: LD_INT 21
42263: PUSH
42264: LD_INT 22
42266: PUSH
42267: LD_INT 23
42269: PUSH
42270: LD_INT 24
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: ST_TO_ADDR
42285: GO 42288
42287: POP
// result := ( chassis in result ) ;
42288: LD_ADDR_VAR 0 3
42292: PUSH
42293: LD_VAR 0 1
42297: PUSH
42298: LD_VAR 0 3
42302: IN
42303: ST_TO_ADDR
// end ;
42304: LD_VAR 0 3
42308: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42309: LD_INT 0
42311: PPUSH
// if not chassis or not weapon then
42312: LD_VAR 0 1
42316: NOT
42317: PUSH
42318: LD_VAR 0 2
42322: NOT
42323: OR
42324: IFFALSE 42328
// exit ;
42326: GO 43388
// case weapon of us_machine_gun :
42328: LD_VAR 0 2
42332: PUSH
42333: LD_INT 2
42335: DOUBLE
42336: EQUAL
42337: IFTRUE 42341
42339: GO 42371
42341: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42342: LD_ADDR_VAR 0 3
42346: PUSH
42347: LD_INT 1
42349: PUSH
42350: LD_INT 2
42352: PUSH
42353: LD_INT 3
42355: PUSH
42356: LD_INT 4
42358: PUSH
42359: LD_INT 5
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: ST_TO_ADDR
42369: GO 43372
42371: LD_INT 3
42373: DOUBLE
42374: EQUAL
42375: IFTRUE 42379
42377: GO 42409
42379: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42380: LD_ADDR_VAR 0 3
42384: PUSH
42385: LD_INT 1
42387: PUSH
42388: LD_INT 2
42390: PUSH
42391: LD_INT 3
42393: PUSH
42394: LD_INT 4
42396: PUSH
42397: LD_INT 5
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: ST_TO_ADDR
42407: GO 43372
42409: LD_INT 11
42411: DOUBLE
42412: EQUAL
42413: IFTRUE 42417
42415: GO 42447
42417: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42418: LD_ADDR_VAR 0 3
42422: PUSH
42423: LD_INT 1
42425: PUSH
42426: LD_INT 2
42428: PUSH
42429: LD_INT 3
42431: PUSH
42432: LD_INT 4
42434: PUSH
42435: LD_INT 5
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: ST_TO_ADDR
42445: GO 43372
42447: LD_INT 4
42449: DOUBLE
42450: EQUAL
42451: IFTRUE 42455
42453: GO 42481
42455: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42456: LD_ADDR_VAR 0 3
42460: PUSH
42461: LD_INT 2
42463: PUSH
42464: LD_INT 3
42466: PUSH
42467: LD_INT 4
42469: PUSH
42470: LD_INT 5
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: ST_TO_ADDR
42479: GO 43372
42481: LD_INT 5
42483: DOUBLE
42484: EQUAL
42485: IFTRUE 42489
42487: GO 42515
42489: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42490: LD_ADDR_VAR 0 3
42494: PUSH
42495: LD_INT 2
42497: PUSH
42498: LD_INT 3
42500: PUSH
42501: LD_INT 4
42503: PUSH
42504: LD_INT 5
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: ST_TO_ADDR
42513: GO 43372
42515: LD_INT 9
42517: DOUBLE
42518: EQUAL
42519: IFTRUE 42523
42521: GO 42549
42523: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42524: LD_ADDR_VAR 0 3
42528: PUSH
42529: LD_INT 2
42531: PUSH
42532: LD_INT 3
42534: PUSH
42535: LD_INT 4
42537: PUSH
42538: LD_INT 5
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: ST_TO_ADDR
42547: GO 43372
42549: LD_INT 7
42551: DOUBLE
42552: EQUAL
42553: IFTRUE 42557
42555: GO 42583
42557: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42558: LD_ADDR_VAR 0 3
42562: PUSH
42563: LD_INT 2
42565: PUSH
42566: LD_INT 3
42568: PUSH
42569: LD_INT 4
42571: PUSH
42572: LD_INT 5
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: ST_TO_ADDR
42581: GO 43372
42583: LD_INT 12
42585: DOUBLE
42586: EQUAL
42587: IFTRUE 42591
42589: GO 42617
42591: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42592: LD_ADDR_VAR 0 3
42596: PUSH
42597: LD_INT 2
42599: PUSH
42600: LD_INT 3
42602: PUSH
42603: LD_INT 4
42605: PUSH
42606: LD_INT 5
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: ST_TO_ADDR
42615: GO 43372
42617: LD_INT 13
42619: DOUBLE
42620: EQUAL
42621: IFTRUE 42625
42623: GO 42651
42625: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42626: LD_ADDR_VAR 0 3
42630: PUSH
42631: LD_INT 2
42633: PUSH
42634: LD_INT 3
42636: PUSH
42637: LD_INT 4
42639: PUSH
42640: LD_INT 5
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: ST_TO_ADDR
42649: GO 43372
42651: LD_INT 14
42653: DOUBLE
42654: EQUAL
42655: IFTRUE 42659
42657: GO 42677
42659: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42660: LD_ADDR_VAR 0 3
42664: PUSH
42665: LD_INT 4
42667: PUSH
42668: LD_INT 5
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: ST_TO_ADDR
42675: GO 43372
42677: LD_INT 6
42679: DOUBLE
42680: EQUAL
42681: IFTRUE 42685
42683: GO 42703
42685: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42686: LD_ADDR_VAR 0 3
42690: PUSH
42691: LD_INT 4
42693: PUSH
42694: LD_INT 5
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: ST_TO_ADDR
42701: GO 43372
42703: LD_INT 10
42705: DOUBLE
42706: EQUAL
42707: IFTRUE 42711
42709: GO 42729
42711: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42712: LD_ADDR_VAR 0 3
42716: PUSH
42717: LD_INT 4
42719: PUSH
42720: LD_INT 5
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: ST_TO_ADDR
42727: GO 43372
42729: LD_INT 22
42731: DOUBLE
42732: EQUAL
42733: IFTRUE 42737
42735: GO 42763
42737: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42738: LD_ADDR_VAR 0 3
42742: PUSH
42743: LD_INT 11
42745: PUSH
42746: LD_INT 12
42748: PUSH
42749: LD_INT 13
42751: PUSH
42752: LD_INT 14
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: ST_TO_ADDR
42761: GO 43372
42763: LD_INT 23
42765: DOUBLE
42766: EQUAL
42767: IFTRUE 42771
42769: GO 42797
42771: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42772: LD_ADDR_VAR 0 3
42776: PUSH
42777: LD_INT 11
42779: PUSH
42780: LD_INT 12
42782: PUSH
42783: LD_INT 13
42785: PUSH
42786: LD_INT 14
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: ST_TO_ADDR
42795: GO 43372
42797: LD_INT 24
42799: DOUBLE
42800: EQUAL
42801: IFTRUE 42805
42803: GO 42831
42805: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42806: LD_ADDR_VAR 0 3
42810: PUSH
42811: LD_INT 11
42813: PUSH
42814: LD_INT 12
42816: PUSH
42817: LD_INT 13
42819: PUSH
42820: LD_INT 14
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: ST_TO_ADDR
42829: GO 43372
42831: LD_INT 30
42833: DOUBLE
42834: EQUAL
42835: IFTRUE 42839
42837: GO 42865
42839: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42840: LD_ADDR_VAR 0 3
42844: PUSH
42845: LD_INT 11
42847: PUSH
42848: LD_INT 12
42850: PUSH
42851: LD_INT 13
42853: PUSH
42854: LD_INT 14
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: ST_TO_ADDR
42863: GO 43372
42865: LD_INT 25
42867: DOUBLE
42868: EQUAL
42869: IFTRUE 42873
42871: GO 42891
42873: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42874: LD_ADDR_VAR 0 3
42878: PUSH
42879: LD_INT 13
42881: PUSH
42882: LD_INT 14
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: ST_TO_ADDR
42889: GO 43372
42891: LD_INT 27
42893: DOUBLE
42894: EQUAL
42895: IFTRUE 42899
42897: GO 42917
42899: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42900: LD_ADDR_VAR 0 3
42904: PUSH
42905: LD_INT 13
42907: PUSH
42908: LD_INT 14
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: ST_TO_ADDR
42915: GO 43372
42917: LD_INT 92
42919: DOUBLE
42920: EQUAL
42921: IFTRUE 42925
42923: GO 42951
42925: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42926: LD_ADDR_VAR 0 3
42930: PUSH
42931: LD_INT 11
42933: PUSH
42934: LD_INT 12
42936: PUSH
42937: LD_INT 13
42939: PUSH
42940: LD_INT 14
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: ST_TO_ADDR
42949: GO 43372
42951: LD_INT 28
42953: DOUBLE
42954: EQUAL
42955: IFTRUE 42959
42957: GO 42977
42959: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42960: LD_ADDR_VAR 0 3
42964: PUSH
42965: LD_INT 13
42967: PUSH
42968: LD_INT 14
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: ST_TO_ADDR
42975: GO 43372
42977: LD_INT 29
42979: DOUBLE
42980: EQUAL
42981: IFTRUE 42985
42983: GO 43003
42985: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42986: LD_ADDR_VAR 0 3
42990: PUSH
42991: LD_INT 13
42993: PUSH
42994: LD_INT 14
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: ST_TO_ADDR
43001: GO 43372
43003: LD_INT 31
43005: DOUBLE
43006: EQUAL
43007: IFTRUE 43011
43009: GO 43029
43011: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43012: LD_ADDR_VAR 0 3
43016: PUSH
43017: LD_INT 13
43019: PUSH
43020: LD_INT 14
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: ST_TO_ADDR
43027: GO 43372
43029: LD_INT 26
43031: DOUBLE
43032: EQUAL
43033: IFTRUE 43037
43035: GO 43055
43037: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43038: LD_ADDR_VAR 0 3
43042: PUSH
43043: LD_INT 13
43045: PUSH
43046: LD_INT 14
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: ST_TO_ADDR
43053: GO 43372
43055: LD_INT 42
43057: DOUBLE
43058: EQUAL
43059: IFTRUE 43063
43061: GO 43089
43063: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43064: LD_ADDR_VAR 0 3
43068: PUSH
43069: LD_INT 21
43071: PUSH
43072: LD_INT 22
43074: PUSH
43075: LD_INT 23
43077: PUSH
43078: LD_INT 24
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: ST_TO_ADDR
43087: GO 43372
43089: LD_INT 43
43091: DOUBLE
43092: EQUAL
43093: IFTRUE 43097
43095: GO 43123
43097: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43098: LD_ADDR_VAR 0 3
43102: PUSH
43103: LD_INT 21
43105: PUSH
43106: LD_INT 22
43108: PUSH
43109: LD_INT 23
43111: PUSH
43112: LD_INT 24
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: ST_TO_ADDR
43121: GO 43372
43123: LD_INT 44
43125: DOUBLE
43126: EQUAL
43127: IFTRUE 43131
43129: GO 43157
43131: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43132: LD_ADDR_VAR 0 3
43136: PUSH
43137: LD_INT 21
43139: PUSH
43140: LD_INT 22
43142: PUSH
43143: LD_INT 23
43145: PUSH
43146: LD_INT 24
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: ST_TO_ADDR
43155: GO 43372
43157: LD_INT 45
43159: DOUBLE
43160: EQUAL
43161: IFTRUE 43165
43163: GO 43191
43165: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43166: LD_ADDR_VAR 0 3
43170: PUSH
43171: LD_INT 21
43173: PUSH
43174: LD_INT 22
43176: PUSH
43177: LD_INT 23
43179: PUSH
43180: LD_INT 24
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: ST_TO_ADDR
43189: GO 43372
43191: LD_INT 49
43193: DOUBLE
43194: EQUAL
43195: IFTRUE 43199
43197: GO 43225
43199: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43200: LD_ADDR_VAR 0 3
43204: PUSH
43205: LD_INT 21
43207: PUSH
43208: LD_INT 22
43210: PUSH
43211: LD_INT 23
43213: PUSH
43214: LD_INT 24
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: ST_TO_ADDR
43223: GO 43372
43225: LD_INT 51
43227: DOUBLE
43228: EQUAL
43229: IFTRUE 43233
43231: GO 43259
43233: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43234: LD_ADDR_VAR 0 3
43238: PUSH
43239: LD_INT 21
43241: PUSH
43242: LD_INT 22
43244: PUSH
43245: LD_INT 23
43247: PUSH
43248: LD_INT 24
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: ST_TO_ADDR
43257: GO 43372
43259: LD_INT 52
43261: DOUBLE
43262: EQUAL
43263: IFTRUE 43267
43265: GO 43293
43267: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43268: LD_ADDR_VAR 0 3
43272: PUSH
43273: LD_INT 21
43275: PUSH
43276: LD_INT 22
43278: PUSH
43279: LD_INT 23
43281: PUSH
43282: LD_INT 24
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: ST_TO_ADDR
43291: GO 43372
43293: LD_INT 53
43295: DOUBLE
43296: EQUAL
43297: IFTRUE 43301
43299: GO 43319
43301: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43302: LD_ADDR_VAR 0 3
43306: PUSH
43307: LD_INT 23
43309: PUSH
43310: LD_INT 24
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: ST_TO_ADDR
43317: GO 43372
43319: LD_INT 46
43321: DOUBLE
43322: EQUAL
43323: IFTRUE 43327
43325: GO 43345
43327: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43328: LD_ADDR_VAR 0 3
43332: PUSH
43333: LD_INT 23
43335: PUSH
43336: LD_INT 24
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: ST_TO_ADDR
43343: GO 43372
43345: LD_INT 47
43347: DOUBLE
43348: EQUAL
43349: IFTRUE 43353
43351: GO 43371
43353: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43354: LD_ADDR_VAR 0 3
43358: PUSH
43359: LD_INT 23
43361: PUSH
43362: LD_INT 24
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: ST_TO_ADDR
43369: GO 43372
43371: POP
// result := ( chassis in result ) ;
43372: LD_ADDR_VAR 0 3
43376: PUSH
43377: LD_VAR 0 1
43381: PUSH
43382: LD_VAR 0 3
43386: IN
43387: ST_TO_ADDR
// end ;
43388: LD_VAR 0 3
43392: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43393: LD_INT 0
43395: PPUSH
43396: PPUSH
43397: PPUSH
43398: PPUSH
43399: PPUSH
43400: PPUSH
43401: PPUSH
// result := array ;
43402: LD_ADDR_VAR 0 5
43406: PUSH
43407: LD_VAR 0 1
43411: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43412: LD_VAR 0 1
43416: NOT
43417: PUSH
43418: LD_VAR 0 2
43422: NOT
43423: OR
43424: PUSH
43425: LD_VAR 0 3
43429: NOT
43430: OR
43431: PUSH
43432: LD_VAR 0 2
43436: PUSH
43437: LD_VAR 0 1
43441: GREATER
43442: OR
43443: PUSH
43444: LD_VAR 0 3
43448: PUSH
43449: LD_VAR 0 1
43453: GREATER
43454: OR
43455: IFFALSE 43459
// exit ;
43457: GO 43755
// if direction then
43459: LD_VAR 0 4
43463: IFFALSE 43527
// begin d := 1 ;
43465: LD_ADDR_VAR 0 9
43469: PUSH
43470: LD_INT 1
43472: ST_TO_ADDR
// if i_from > i_to then
43473: LD_VAR 0 2
43477: PUSH
43478: LD_VAR 0 3
43482: GREATER
43483: IFFALSE 43509
// length := ( array - i_from ) + i_to else
43485: LD_ADDR_VAR 0 11
43489: PUSH
43490: LD_VAR 0 1
43494: PUSH
43495: LD_VAR 0 2
43499: MINUS
43500: PUSH
43501: LD_VAR 0 3
43505: PLUS
43506: ST_TO_ADDR
43507: GO 43525
// length := i_to - i_from ;
43509: LD_ADDR_VAR 0 11
43513: PUSH
43514: LD_VAR 0 3
43518: PUSH
43519: LD_VAR 0 2
43523: MINUS
43524: ST_TO_ADDR
// end else
43525: GO 43588
// begin d := - 1 ;
43527: LD_ADDR_VAR 0 9
43531: PUSH
43532: LD_INT 1
43534: NEG
43535: ST_TO_ADDR
// if i_from > i_to then
43536: LD_VAR 0 2
43540: PUSH
43541: LD_VAR 0 3
43545: GREATER
43546: IFFALSE 43566
// length := i_from - i_to else
43548: LD_ADDR_VAR 0 11
43552: PUSH
43553: LD_VAR 0 2
43557: PUSH
43558: LD_VAR 0 3
43562: MINUS
43563: ST_TO_ADDR
43564: GO 43588
// length := ( array - i_to ) + i_from ;
43566: LD_ADDR_VAR 0 11
43570: PUSH
43571: LD_VAR 0 1
43575: PUSH
43576: LD_VAR 0 3
43580: MINUS
43581: PUSH
43582: LD_VAR 0 2
43586: PLUS
43587: ST_TO_ADDR
// end ; if not length then
43588: LD_VAR 0 11
43592: NOT
43593: IFFALSE 43597
// exit ;
43595: GO 43755
// tmp := array ;
43597: LD_ADDR_VAR 0 10
43601: PUSH
43602: LD_VAR 0 1
43606: ST_TO_ADDR
// for i = 1 to length do
43607: LD_ADDR_VAR 0 6
43611: PUSH
43612: DOUBLE
43613: LD_INT 1
43615: DEC
43616: ST_TO_ADDR
43617: LD_VAR 0 11
43621: PUSH
43622: FOR_TO
43623: IFFALSE 43743
// begin for j = 1 to array do
43625: LD_ADDR_VAR 0 7
43629: PUSH
43630: DOUBLE
43631: LD_INT 1
43633: DEC
43634: ST_TO_ADDR
43635: LD_VAR 0 1
43639: PUSH
43640: FOR_TO
43641: IFFALSE 43729
// begin k := j + d ;
43643: LD_ADDR_VAR 0 8
43647: PUSH
43648: LD_VAR 0 7
43652: PUSH
43653: LD_VAR 0 9
43657: PLUS
43658: ST_TO_ADDR
// if k > array then
43659: LD_VAR 0 8
43663: PUSH
43664: LD_VAR 0 1
43668: GREATER
43669: IFFALSE 43679
// k := 1 ;
43671: LD_ADDR_VAR 0 8
43675: PUSH
43676: LD_INT 1
43678: ST_TO_ADDR
// if not k then
43679: LD_VAR 0 8
43683: NOT
43684: IFFALSE 43696
// k := array ;
43686: LD_ADDR_VAR 0 8
43690: PUSH
43691: LD_VAR 0 1
43695: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43696: LD_ADDR_VAR 0 10
43700: PUSH
43701: LD_VAR 0 10
43705: PPUSH
43706: LD_VAR 0 8
43710: PPUSH
43711: LD_VAR 0 1
43715: PUSH
43716: LD_VAR 0 7
43720: ARRAY
43721: PPUSH
43722: CALL_OW 1
43726: ST_TO_ADDR
// end ;
43727: GO 43640
43729: POP
43730: POP
// array := tmp ;
43731: LD_ADDR_VAR 0 1
43735: PUSH
43736: LD_VAR 0 10
43740: ST_TO_ADDR
// end ;
43741: GO 43622
43743: POP
43744: POP
// result := array ;
43745: LD_ADDR_VAR 0 5
43749: PUSH
43750: LD_VAR 0 1
43754: ST_TO_ADDR
// end ;
43755: LD_VAR 0 5
43759: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43760: LD_INT 0
43762: PPUSH
43763: PPUSH
// result := 0 ;
43764: LD_ADDR_VAR 0 3
43768: PUSH
43769: LD_INT 0
43771: ST_TO_ADDR
// if not array or not value in array then
43772: LD_VAR 0 1
43776: NOT
43777: PUSH
43778: LD_VAR 0 2
43782: PUSH
43783: LD_VAR 0 1
43787: IN
43788: NOT
43789: OR
43790: IFFALSE 43794
// exit ;
43792: GO 43848
// for i = 1 to array do
43794: LD_ADDR_VAR 0 4
43798: PUSH
43799: DOUBLE
43800: LD_INT 1
43802: DEC
43803: ST_TO_ADDR
43804: LD_VAR 0 1
43808: PUSH
43809: FOR_TO
43810: IFFALSE 43846
// if value = array [ i ] then
43812: LD_VAR 0 2
43816: PUSH
43817: LD_VAR 0 1
43821: PUSH
43822: LD_VAR 0 4
43826: ARRAY
43827: EQUAL
43828: IFFALSE 43844
// begin result := i ;
43830: LD_ADDR_VAR 0 3
43834: PUSH
43835: LD_VAR 0 4
43839: ST_TO_ADDR
// exit ;
43840: POP
43841: POP
43842: GO 43848
// end ;
43844: GO 43809
43846: POP
43847: POP
// end ;
43848: LD_VAR 0 3
43852: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43853: LD_INT 0
43855: PPUSH
// vc_chassis := chassis ;
43856: LD_ADDR_OWVAR 37
43860: PUSH
43861: LD_VAR 0 1
43865: ST_TO_ADDR
// vc_engine := engine ;
43866: LD_ADDR_OWVAR 39
43870: PUSH
43871: LD_VAR 0 2
43875: ST_TO_ADDR
// vc_control := control ;
43876: LD_ADDR_OWVAR 38
43880: PUSH
43881: LD_VAR 0 3
43885: ST_TO_ADDR
// vc_weapon := weapon ;
43886: LD_ADDR_OWVAR 40
43890: PUSH
43891: LD_VAR 0 4
43895: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43896: LD_ADDR_OWVAR 41
43900: PUSH
43901: LD_VAR 0 5
43905: ST_TO_ADDR
// end ;
43906: LD_VAR 0 6
43910: RET
// export function WantPlant ( unit ) ; var task ; begin
43911: LD_INT 0
43913: PPUSH
43914: PPUSH
// result := false ;
43915: LD_ADDR_VAR 0 2
43919: PUSH
43920: LD_INT 0
43922: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43923: LD_ADDR_VAR 0 3
43927: PUSH
43928: LD_VAR 0 1
43932: PPUSH
43933: CALL_OW 437
43937: ST_TO_ADDR
// if task then
43938: LD_VAR 0 3
43942: IFFALSE 43970
// if task [ 1 ] [ 1 ] = p then
43944: LD_VAR 0 3
43948: PUSH
43949: LD_INT 1
43951: ARRAY
43952: PUSH
43953: LD_INT 1
43955: ARRAY
43956: PUSH
43957: LD_STRING p
43959: EQUAL
43960: IFFALSE 43970
// result := true ;
43962: LD_ADDR_VAR 0 2
43966: PUSH
43967: LD_INT 1
43969: ST_TO_ADDR
// end ;
43970: LD_VAR 0 2
43974: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43975: LD_INT 0
43977: PPUSH
43978: PPUSH
43979: PPUSH
43980: PPUSH
// if pos < 1 then
43981: LD_VAR 0 2
43985: PUSH
43986: LD_INT 1
43988: LESS
43989: IFFALSE 43993
// exit ;
43991: GO 44296
// if pos = 1 then
43993: LD_VAR 0 2
43997: PUSH
43998: LD_INT 1
44000: EQUAL
44001: IFFALSE 44034
// result := Replace ( arr , pos [ 1 ] , value ) else
44003: LD_ADDR_VAR 0 4
44007: PUSH
44008: LD_VAR 0 1
44012: PPUSH
44013: LD_VAR 0 2
44017: PUSH
44018: LD_INT 1
44020: ARRAY
44021: PPUSH
44022: LD_VAR 0 3
44026: PPUSH
44027: CALL_OW 1
44031: ST_TO_ADDR
44032: GO 44296
// begin tmp := arr ;
44034: LD_ADDR_VAR 0 6
44038: PUSH
44039: LD_VAR 0 1
44043: ST_TO_ADDR
// s_arr := [ tmp ] ;
44044: LD_ADDR_VAR 0 7
44048: PUSH
44049: LD_VAR 0 6
44053: PUSH
44054: EMPTY
44055: LIST
44056: ST_TO_ADDR
// for i = 1 to pos - 1 do
44057: LD_ADDR_VAR 0 5
44061: PUSH
44062: DOUBLE
44063: LD_INT 1
44065: DEC
44066: ST_TO_ADDR
44067: LD_VAR 0 2
44071: PUSH
44072: LD_INT 1
44074: MINUS
44075: PUSH
44076: FOR_TO
44077: IFFALSE 44122
// begin tmp := tmp [ pos [ i ] ] ;
44079: LD_ADDR_VAR 0 6
44083: PUSH
44084: LD_VAR 0 6
44088: PUSH
44089: LD_VAR 0 2
44093: PUSH
44094: LD_VAR 0 5
44098: ARRAY
44099: ARRAY
44100: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44101: LD_ADDR_VAR 0 7
44105: PUSH
44106: LD_VAR 0 7
44110: PUSH
44111: LD_VAR 0 6
44115: PUSH
44116: EMPTY
44117: LIST
44118: ADD
44119: ST_TO_ADDR
// end ;
44120: GO 44076
44122: POP
44123: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44124: LD_ADDR_VAR 0 6
44128: PUSH
44129: LD_VAR 0 6
44133: PPUSH
44134: LD_VAR 0 2
44138: PUSH
44139: LD_VAR 0 2
44143: ARRAY
44144: PPUSH
44145: LD_VAR 0 3
44149: PPUSH
44150: CALL_OW 1
44154: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44155: LD_ADDR_VAR 0 7
44159: PUSH
44160: LD_VAR 0 7
44164: PPUSH
44165: LD_VAR 0 7
44169: PPUSH
44170: LD_VAR 0 6
44174: PPUSH
44175: CALL_OW 1
44179: ST_TO_ADDR
// for i = s_arr downto 2 do
44180: LD_ADDR_VAR 0 5
44184: PUSH
44185: DOUBLE
44186: LD_VAR 0 7
44190: INC
44191: ST_TO_ADDR
44192: LD_INT 2
44194: PUSH
44195: FOR_DOWNTO
44196: IFFALSE 44280
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44198: LD_ADDR_VAR 0 6
44202: PUSH
44203: LD_VAR 0 7
44207: PUSH
44208: LD_VAR 0 5
44212: PUSH
44213: LD_INT 1
44215: MINUS
44216: ARRAY
44217: PPUSH
44218: LD_VAR 0 2
44222: PUSH
44223: LD_VAR 0 5
44227: PUSH
44228: LD_INT 1
44230: MINUS
44231: ARRAY
44232: PPUSH
44233: LD_VAR 0 7
44237: PUSH
44238: LD_VAR 0 5
44242: ARRAY
44243: PPUSH
44244: CALL_OW 1
44248: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44249: LD_ADDR_VAR 0 7
44253: PUSH
44254: LD_VAR 0 7
44258: PPUSH
44259: LD_VAR 0 5
44263: PUSH
44264: LD_INT 1
44266: MINUS
44267: PPUSH
44268: LD_VAR 0 6
44272: PPUSH
44273: CALL_OW 1
44277: ST_TO_ADDR
// end ;
44278: GO 44195
44280: POP
44281: POP
// result := s_arr [ 1 ] ;
44282: LD_ADDR_VAR 0 4
44286: PUSH
44287: LD_VAR 0 7
44291: PUSH
44292: LD_INT 1
44294: ARRAY
44295: ST_TO_ADDR
// end ; end ;
44296: LD_VAR 0 4
44300: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44301: LD_INT 0
44303: PPUSH
44304: PPUSH
// if not list then
44305: LD_VAR 0 1
44309: NOT
44310: IFFALSE 44314
// exit ;
44312: GO 44405
// i := list [ pos1 ] ;
44314: LD_ADDR_VAR 0 5
44318: PUSH
44319: LD_VAR 0 1
44323: PUSH
44324: LD_VAR 0 2
44328: ARRAY
44329: ST_TO_ADDR
// if not i then
44330: LD_VAR 0 5
44334: NOT
44335: IFFALSE 44339
// exit ;
44337: GO 44405
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44339: LD_ADDR_VAR 0 1
44343: PUSH
44344: LD_VAR 0 1
44348: PPUSH
44349: LD_VAR 0 2
44353: PPUSH
44354: LD_VAR 0 1
44358: PUSH
44359: LD_VAR 0 3
44363: ARRAY
44364: PPUSH
44365: CALL_OW 1
44369: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44370: LD_ADDR_VAR 0 1
44374: PUSH
44375: LD_VAR 0 1
44379: PPUSH
44380: LD_VAR 0 3
44384: PPUSH
44385: LD_VAR 0 5
44389: PPUSH
44390: CALL_OW 1
44394: ST_TO_ADDR
// result := list ;
44395: LD_ADDR_VAR 0 4
44399: PUSH
44400: LD_VAR 0 1
44404: ST_TO_ADDR
// end ;
44405: LD_VAR 0 4
44409: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44410: LD_INT 0
44412: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44413: LD_ADDR_VAR 0 5
44417: PUSH
44418: LD_VAR 0 1
44422: PPUSH
44423: CALL_OW 250
44427: PPUSH
44428: LD_VAR 0 1
44432: PPUSH
44433: CALL_OW 251
44437: PPUSH
44438: LD_VAR 0 2
44442: PPUSH
44443: LD_VAR 0 3
44447: PPUSH
44448: LD_VAR 0 4
44452: PPUSH
44453: CALL 44463 0 5
44457: ST_TO_ADDR
// end ;
44458: LD_VAR 0 5
44462: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44463: LD_INT 0
44465: PPUSH
44466: PPUSH
44467: PPUSH
44468: PPUSH
// if not list then
44469: LD_VAR 0 3
44473: NOT
44474: IFFALSE 44478
// exit ;
44476: GO 44866
// result := [ ] ;
44478: LD_ADDR_VAR 0 6
44482: PUSH
44483: EMPTY
44484: ST_TO_ADDR
// for i in list do
44485: LD_ADDR_VAR 0 7
44489: PUSH
44490: LD_VAR 0 3
44494: PUSH
44495: FOR_IN
44496: IFFALSE 44698
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44498: LD_ADDR_VAR 0 9
44502: PUSH
44503: LD_VAR 0 7
44507: PPUSH
44508: LD_VAR 0 1
44512: PPUSH
44513: LD_VAR 0 2
44517: PPUSH
44518: CALL_OW 297
44522: ST_TO_ADDR
// if not result then
44523: LD_VAR 0 6
44527: NOT
44528: IFFALSE 44554
// result := [ [ i , tmp ] ] else
44530: LD_ADDR_VAR 0 6
44534: PUSH
44535: LD_VAR 0 7
44539: PUSH
44540: LD_VAR 0 9
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: EMPTY
44550: LIST
44551: ST_TO_ADDR
44552: GO 44696
// begin if result [ result ] [ 2 ] < tmp then
44554: LD_VAR 0 6
44558: PUSH
44559: LD_VAR 0 6
44563: ARRAY
44564: PUSH
44565: LD_INT 2
44567: ARRAY
44568: PUSH
44569: LD_VAR 0 9
44573: LESS
44574: IFFALSE 44616
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44576: LD_ADDR_VAR 0 6
44580: PUSH
44581: LD_VAR 0 6
44585: PPUSH
44586: LD_VAR 0 6
44590: PUSH
44591: LD_INT 1
44593: PLUS
44594: PPUSH
44595: LD_VAR 0 7
44599: PUSH
44600: LD_VAR 0 9
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PPUSH
44609: CALL_OW 2
44613: ST_TO_ADDR
44614: GO 44696
// for j = 1 to result do
44616: LD_ADDR_VAR 0 8
44620: PUSH
44621: DOUBLE
44622: LD_INT 1
44624: DEC
44625: ST_TO_ADDR
44626: LD_VAR 0 6
44630: PUSH
44631: FOR_TO
44632: IFFALSE 44694
// begin if tmp < result [ j ] [ 2 ] then
44634: LD_VAR 0 9
44638: PUSH
44639: LD_VAR 0 6
44643: PUSH
44644: LD_VAR 0 8
44648: ARRAY
44649: PUSH
44650: LD_INT 2
44652: ARRAY
44653: LESS
44654: IFFALSE 44692
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44656: LD_ADDR_VAR 0 6
44660: PUSH
44661: LD_VAR 0 6
44665: PPUSH
44666: LD_VAR 0 8
44670: PPUSH
44671: LD_VAR 0 7
44675: PUSH
44676: LD_VAR 0 9
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PPUSH
44685: CALL_OW 2
44689: ST_TO_ADDR
// break ;
44690: GO 44694
// end ; end ;
44692: GO 44631
44694: POP
44695: POP
// end ; end ;
44696: GO 44495
44698: POP
44699: POP
// if result and not asc then
44700: LD_VAR 0 6
44704: PUSH
44705: LD_VAR 0 4
44709: NOT
44710: AND
44711: IFFALSE 44786
// begin tmp := result ;
44713: LD_ADDR_VAR 0 9
44717: PUSH
44718: LD_VAR 0 6
44722: ST_TO_ADDR
// for i = tmp downto 1 do
44723: LD_ADDR_VAR 0 7
44727: PUSH
44728: DOUBLE
44729: LD_VAR 0 9
44733: INC
44734: ST_TO_ADDR
44735: LD_INT 1
44737: PUSH
44738: FOR_DOWNTO
44739: IFFALSE 44784
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44741: LD_ADDR_VAR 0 6
44745: PUSH
44746: LD_VAR 0 6
44750: PPUSH
44751: LD_VAR 0 9
44755: PUSH
44756: LD_VAR 0 7
44760: MINUS
44761: PUSH
44762: LD_INT 1
44764: PLUS
44765: PPUSH
44766: LD_VAR 0 9
44770: PUSH
44771: LD_VAR 0 7
44775: ARRAY
44776: PPUSH
44777: CALL_OW 1
44781: ST_TO_ADDR
44782: GO 44738
44784: POP
44785: POP
// end ; tmp := [ ] ;
44786: LD_ADDR_VAR 0 9
44790: PUSH
44791: EMPTY
44792: ST_TO_ADDR
// if mode then
44793: LD_VAR 0 5
44797: IFFALSE 44866
// begin for i = 1 to result do
44799: LD_ADDR_VAR 0 7
44803: PUSH
44804: DOUBLE
44805: LD_INT 1
44807: DEC
44808: ST_TO_ADDR
44809: LD_VAR 0 6
44813: PUSH
44814: FOR_TO
44815: IFFALSE 44854
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44817: LD_ADDR_VAR 0 9
44821: PUSH
44822: LD_VAR 0 9
44826: PPUSH
44827: LD_VAR 0 7
44831: PPUSH
44832: LD_VAR 0 6
44836: PUSH
44837: LD_VAR 0 7
44841: ARRAY
44842: PUSH
44843: LD_INT 1
44845: ARRAY
44846: PPUSH
44847: CALL_OW 1
44851: ST_TO_ADDR
44852: GO 44814
44854: POP
44855: POP
// result := tmp ;
44856: LD_ADDR_VAR 0 6
44860: PUSH
44861: LD_VAR 0 9
44865: ST_TO_ADDR
// end ; end ;
44866: LD_VAR 0 6
44870: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44871: LD_INT 0
44873: PPUSH
44874: PPUSH
44875: PPUSH
44876: PPUSH
44877: PPUSH
44878: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44879: LD_ADDR_VAR 0 5
44883: PUSH
44884: LD_INT 0
44886: PUSH
44887: LD_INT 0
44889: PUSH
44890: LD_INT 0
44892: PUSH
44893: EMPTY
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: ST_TO_ADDR
// if not x or not y then
44901: LD_VAR 0 2
44905: NOT
44906: PUSH
44907: LD_VAR 0 3
44911: NOT
44912: OR
44913: IFFALSE 44917
// exit ;
44915: GO 46567
// if not range then
44917: LD_VAR 0 4
44921: NOT
44922: IFFALSE 44932
// range := 10 ;
44924: LD_ADDR_VAR 0 4
44928: PUSH
44929: LD_INT 10
44931: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44932: LD_ADDR_VAR 0 8
44936: PUSH
44937: LD_INT 81
44939: PUSH
44940: LD_VAR 0 1
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 92
44951: PUSH
44952: LD_VAR 0 2
44956: PUSH
44957: LD_VAR 0 3
44961: PUSH
44962: LD_VAR 0 4
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 3
44975: PUSH
44976: LD_INT 21
44978: PUSH
44979: LD_INT 3
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: LIST
44994: PPUSH
44995: CALL_OW 69
44999: ST_TO_ADDR
// if not tmp then
45000: LD_VAR 0 8
45004: NOT
45005: IFFALSE 45009
// exit ;
45007: GO 46567
// for i in tmp do
45009: LD_ADDR_VAR 0 6
45013: PUSH
45014: LD_VAR 0 8
45018: PUSH
45019: FOR_IN
45020: IFFALSE 46542
// begin points := [ 0 , 0 , 0 ] ;
45022: LD_ADDR_VAR 0 9
45026: PUSH
45027: LD_INT 0
45029: PUSH
45030: LD_INT 0
45032: PUSH
45033: LD_INT 0
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: LIST
45040: ST_TO_ADDR
// bpoints := 1 ;
45041: LD_ADDR_VAR 0 10
45045: PUSH
45046: LD_INT 1
45048: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45049: LD_VAR 0 6
45053: PPUSH
45054: CALL_OW 247
45058: PUSH
45059: LD_INT 1
45061: DOUBLE
45062: EQUAL
45063: IFTRUE 45067
45065: GO 45645
45067: POP
// begin if GetClass ( i ) = 1 then
45068: LD_VAR 0 6
45072: PPUSH
45073: CALL_OW 257
45077: PUSH
45078: LD_INT 1
45080: EQUAL
45081: IFFALSE 45102
// points := [ 10 , 5 , 3 ] ;
45083: LD_ADDR_VAR 0 9
45087: PUSH
45088: LD_INT 10
45090: PUSH
45091: LD_INT 5
45093: PUSH
45094: LD_INT 3
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: LIST
45101: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45102: LD_VAR 0 6
45106: PPUSH
45107: CALL_OW 257
45111: PUSH
45112: LD_INT 2
45114: PUSH
45115: LD_INT 3
45117: PUSH
45118: LD_INT 4
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: LIST
45125: IN
45126: IFFALSE 45147
// points := [ 3 , 2 , 1 ] ;
45128: LD_ADDR_VAR 0 9
45132: PUSH
45133: LD_INT 3
45135: PUSH
45136: LD_INT 2
45138: PUSH
45139: LD_INT 1
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: LIST
45146: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45147: LD_VAR 0 6
45151: PPUSH
45152: CALL_OW 257
45156: PUSH
45157: LD_INT 5
45159: EQUAL
45160: IFFALSE 45181
// points := [ 130 , 5 , 2 ] ;
45162: LD_ADDR_VAR 0 9
45166: PUSH
45167: LD_INT 130
45169: PUSH
45170: LD_INT 5
45172: PUSH
45173: LD_INT 2
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: LIST
45180: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45181: LD_VAR 0 6
45185: PPUSH
45186: CALL_OW 257
45190: PUSH
45191: LD_INT 8
45193: EQUAL
45194: IFFALSE 45215
// points := [ 35 , 35 , 30 ] ;
45196: LD_ADDR_VAR 0 9
45200: PUSH
45201: LD_INT 35
45203: PUSH
45204: LD_INT 35
45206: PUSH
45207: LD_INT 30
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: LIST
45214: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45215: LD_VAR 0 6
45219: PPUSH
45220: CALL_OW 257
45224: PUSH
45225: LD_INT 9
45227: EQUAL
45228: IFFALSE 45249
// points := [ 20 , 55 , 40 ] ;
45230: LD_ADDR_VAR 0 9
45234: PUSH
45235: LD_INT 20
45237: PUSH
45238: LD_INT 55
45240: PUSH
45241: LD_INT 40
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: LIST
45248: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45249: LD_VAR 0 6
45253: PPUSH
45254: CALL_OW 257
45258: PUSH
45259: LD_INT 12
45261: PUSH
45262: LD_INT 16
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: IN
45269: IFFALSE 45290
// points := [ 5 , 3 , 2 ] ;
45271: LD_ADDR_VAR 0 9
45275: PUSH
45276: LD_INT 5
45278: PUSH
45279: LD_INT 3
45281: PUSH
45282: LD_INT 2
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: LIST
45289: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45290: LD_VAR 0 6
45294: PPUSH
45295: CALL_OW 257
45299: PUSH
45300: LD_INT 17
45302: EQUAL
45303: IFFALSE 45324
// points := [ 100 , 50 , 75 ] ;
45305: LD_ADDR_VAR 0 9
45309: PUSH
45310: LD_INT 100
45312: PUSH
45313: LD_INT 50
45315: PUSH
45316: LD_INT 75
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: LIST
45323: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45324: LD_VAR 0 6
45328: PPUSH
45329: CALL_OW 257
45333: PUSH
45334: LD_INT 15
45336: EQUAL
45337: IFFALSE 45358
// points := [ 10 , 5 , 3 ] ;
45339: LD_ADDR_VAR 0 9
45343: PUSH
45344: LD_INT 10
45346: PUSH
45347: LD_INT 5
45349: PUSH
45350: LD_INT 3
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: LIST
45357: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45358: LD_VAR 0 6
45362: PPUSH
45363: CALL_OW 257
45367: PUSH
45368: LD_INT 14
45370: EQUAL
45371: IFFALSE 45392
// points := [ 10 , 0 , 0 ] ;
45373: LD_ADDR_VAR 0 9
45377: PUSH
45378: LD_INT 10
45380: PUSH
45381: LD_INT 0
45383: PUSH
45384: LD_INT 0
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: LIST
45391: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45392: LD_VAR 0 6
45396: PPUSH
45397: CALL_OW 257
45401: PUSH
45402: LD_INT 11
45404: EQUAL
45405: IFFALSE 45426
// points := [ 30 , 10 , 5 ] ;
45407: LD_ADDR_VAR 0 9
45411: PUSH
45412: LD_INT 30
45414: PUSH
45415: LD_INT 10
45417: PUSH
45418: LD_INT 5
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: LIST
45425: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45426: LD_VAR 0 1
45430: PPUSH
45431: LD_INT 5
45433: PPUSH
45434: CALL_OW 321
45438: PUSH
45439: LD_INT 2
45441: EQUAL
45442: IFFALSE 45459
// bpoints := bpoints * 1.8 ;
45444: LD_ADDR_VAR 0 10
45448: PUSH
45449: LD_VAR 0 10
45453: PUSH
45454: LD_REAL  1.80000000000000E+0000
45457: MUL
45458: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45459: LD_VAR 0 6
45463: PPUSH
45464: CALL_OW 257
45468: PUSH
45469: LD_INT 1
45471: PUSH
45472: LD_INT 2
45474: PUSH
45475: LD_INT 3
45477: PUSH
45478: LD_INT 4
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: IN
45487: PUSH
45488: LD_VAR 0 1
45492: PPUSH
45493: LD_INT 51
45495: PPUSH
45496: CALL_OW 321
45500: PUSH
45501: LD_INT 2
45503: EQUAL
45504: AND
45505: IFFALSE 45522
// bpoints := bpoints * 1.2 ;
45507: LD_ADDR_VAR 0 10
45511: PUSH
45512: LD_VAR 0 10
45516: PUSH
45517: LD_REAL  1.20000000000000E+0000
45520: MUL
45521: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45522: LD_VAR 0 6
45526: PPUSH
45527: CALL_OW 257
45531: PUSH
45532: LD_INT 5
45534: PUSH
45535: LD_INT 7
45537: PUSH
45538: LD_INT 9
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: LIST
45545: IN
45546: PUSH
45547: LD_VAR 0 1
45551: PPUSH
45552: LD_INT 52
45554: PPUSH
45555: CALL_OW 321
45559: PUSH
45560: LD_INT 2
45562: EQUAL
45563: AND
45564: IFFALSE 45581
// bpoints := bpoints * 1.5 ;
45566: LD_ADDR_VAR 0 10
45570: PUSH
45571: LD_VAR 0 10
45575: PUSH
45576: LD_REAL  1.50000000000000E+0000
45579: MUL
45580: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45581: LD_VAR 0 1
45585: PPUSH
45586: LD_INT 66
45588: PPUSH
45589: CALL_OW 321
45593: PUSH
45594: LD_INT 2
45596: EQUAL
45597: IFFALSE 45614
// bpoints := bpoints * 1.1 ;
45599: LD_ADDR_VAR 0 10
45603: PUSH
45604: LD_VAR 0 10
45608: PUSH
45609: LD_REAL  1.10000000000000E+0000
45612: MUL
45613: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45614: LD_ADDR_VAR 0 10
45618: PUSH
45619: LD_VAR 0 10
45623: PUSH
45624: LD_VAR 0 6
45628: PPUSH
45629: LD_INT 1
45631: PPUSH
45632: CALL_OW 259
45636: PUSH
45637: LD_REAL  1.15000000000000E+0000
45640: MUL
45641: MUL
45642: ST_TO_ADDR
// end ; unit_vehicle :
45643: GO 46471
45645: LD_INT 2
45647: DOUBLE
45648: EQUAL
45649: IFTRUE 45653
45651: GO 46459
45653: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45654: LD_VAR 0 6
45658: PPUSH
45659: CALL_OW 264
45663: PUSH
45664: LD_INT 2
45666: PUSH
45667: LD_INT 42
45669: PUSH
45670: LD_INT 24
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: LIST
45677: IN
45678: IFFALSE 45699
// points := [ 25 , 5 , 3 ] ;
45680: LD_ADDR_VAR 0 9
45684: PUSH
45685: LD_INT 25
45687: PUSH
45688: LD_INT 5
45690: PUSH
45691: LD_INT 3
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: LIST
45698: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45699: LD_VAR 0 6
45703: PPUSH
45704: CALL_OW 264
45708: PUSH
45709: LD_INT 4
45711: PUSH
45712: LD_INT 43
45714: PUSH
45715: LD_INT 25
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: LIST
45722: IN
45723: IFFALSE 45744
// points := [ 40 , 15 , 5 ] ;
45725: LD_ADDR_VAR 0 9
45729: PUSH
45730: LD_INT 40
45732: PUSH
45733: LD_INT 15
45735: PUSH
45736: LD_INT 5
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: LIST
45743: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45744: LD_VAR 0 6
45748: PPUSH
45749: CALL_OW 264
45753: PUSH
45754: LD_INT 3
45756: PUSH
45757: LD_INT 23
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: IN
45764: IFFALSE 45785
// points := [ 7 , 25 , 8 ] ;
45766: LD_ADDR_VAR 0 9
45770: PUSH
45771: LD_INT 7
45773: PUSH
45774: LD_INT 25
45776: PUSH
45777: LD_INT 8
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: LIST
45784: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45785: LD_VAR 0 6
45789: PPUSH
45790: CALL_OW 264
45794: PUSH
45795: LD_INT 5
45797: PUSH
45798: LD_INT 27
45800: PUSH
45801: LD_INT 44
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: LIST
45808: IN
45809: IFFALSE 45830
// points := [ 14 , 50 , 16 ] ;
45811: LD_ADDR_VAR 0 9
45815: PUSH
45816: LD_INT 14
45818: PUSH
45819: LD_INT 50
45821: PUSH
45822: LD_INT 16
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: LIST
45829: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45830: LD_VAR 0 6
45834: PPUSH
45835: CALL_OW 264
45839: PUSH
45840: LD_INT 6
45842: PUSH
45843: LD_INT 46
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: IN
45850: IFFALSE 45871
// points := [ 32 , 120 , 70 ] ;
45852: LD_ADDR_VAR 0 9
45856: PUSH
45857: LD_INT 32
45859: PUSH
45860: LD_INT 120
45862: PUSH
45863: LD_INT 70
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: LIST
45870: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45871: LD_VAR 0 6
45875: PPUSH
45876: CALL_OW 264
45880: PUSH
45881: LD_INT 7
45883: PUSH
45884: LD_INT 28
45886: PUSH
45887: LD_INT 45
45889: PUSH
45890: LD_INT 92
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: IN
45899: IFFALSE 45920
// points := [ 35 , 20 , 45 ] ;
45901: LD_ADDR_VAR 0 9
45905: PUSH
45906: LD_INT 35
45908: PUSH
45909: LD_INT 20
45911: PUSH
45912: LD_INT 45
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: LIST
45919: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45920: LD_VAR 0 6
45924: PPUSH
45925: CALL_OW 264
45929: PUSH
45930: LD_INT 47
45932: PUSH
45933: EMPTY
45934: LIST
45935: IN
45936: IFFALSE 45957
// points := [ 67 , 45 , 75 ] ;
45938: LD_ADDR_VAR 0 9
45942: PUSH
45943: LD_INT 67
45945: PUSH
45946: LD_INT 45
45948: PUSH
45949: LD_INT 75
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: LIST
45956: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45957: LD_VAR 0 6
45961: PPUSH
45962: CALL_OW 264
45966: PUSH
45967: LD_INT 26
45969: PUSH
45970: EMPTY
45971: LIST
45972: IN
45973: IFFALSE 45994
// points := [ 120 , 30 , 80 ] ;
45975: LD_ADDR_VAR 0 9
45979: PUSH
45980: LD_INT 120
45982: PUSH
45983: LD_INT 30
45985: PUSH
45986: LD_INT 80
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: LIST
45993: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45994: LD_VAR 0 6
45998: PPUSH
45999: CALL_OW 264
46003: PUSH
46004: LD_INT 22
46006: PUSH
46007: EMPTY
46008: LIST
46009: IN
46010: IFFALSE 46031
// points := [ 40 , 1 , 1 ] ;
46012: LD_ADDR_VAR 0 9
46016: PUSH
46017: LD_INT 40
46019: PUSH
46020: LD_INT 1
46022: PUSH
46023: LD_INT 1
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: LIST
46030: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46031: LD_VAR 0 6
46035: PPUSH
46036: CALL_OW 264
46040: PUSH
46041: LD_INT 29
46043: PUSH
46044: EMPTY
46045: LIST
46046: IN
46047: IFFALSE 46068
// points := [ 70 , 200 , 400 ] ;
46049: LD_ADDR_VAR 0 9
46053: PUSH
46054: LD_INT 70
46056: PUSH
46057: LD_INT 200
46059: PUSH
46060: LD_INT 400
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: LIST
46067: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46068: LD_VAR 0 6
46072: PPUSH
46073: CALL_OW 264
46077: PUSH
46078: LD_INT 14
46080: PUSH
46081: LD_INT 53
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: IN
46088: IFFALSE 46109
// points := [ 40 , 10 , 20 ] ;
46090: LD_ADDR_VAR 0 9
46094: PUSH
46095: LD_INT 40
46097: PUSH
46098: LD_INT 10
46100: PUSH
46101: LD_INT 20
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: LIST
46108: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46109: LD_VAR 0 6
46113: PPUSH
46114: CALL_OW 264
46118: PUSH
46119: LD_INT 9
46121: PUSH
46122: EMPTY
46123: LIST
46124: IN
46125: IFFALSE 46146
// points := [ 5 , 70 , 20 ] ;
46127: LD_ADDR_VAR 0 9
46131: PUSH
46132: LD_INT 5
46134: PUSH
46135: LD_INT 70
46137: PUSH
46138: LD_INT 20
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: LIST
46145: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46146: LD_VAR 0 6
46150: PPUSH
46151: CALL_OW 264
46155: PUSH
46156: LD_INT 10
46158: PUSH
46159: EMPTY
46160: LIST
46161: IN
46162: IFFALSE 46183
// points := [ 35 , 110 , 70 ] ;
46164: LD_ADDR_VAR 0 9
46168: PUSH
46169: LD_INT 35
46171: PUSH
46172: LD_INT 110
46174: PUSH
46175: LD_INT 70
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: LIST
46182: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46183: LD_VAR 0 6
46187: PPUSH
46188: CALL_OW 265
46192: PUSH
46193: LD_INT 25
46195: EQUAL
46196: IFFALSE 46217
// points := [ 80 , 65 , 100 ] ;
46198: LD_ADDR_VAR 0 9
46202: PUSH
46203: LD_INT 80
46205: PUSH
46206: LD_INT 65
46208: PUSH
46209: LD_INT 100
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: LIST
46216: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46217: LD_VAR 0 6
46221: PPUSH
46222: CALL_OW 263
46226: PUSH
46227: LD_INT 1
46229: EQUAL
46230: IFFALSE 46265
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46232: LD_ADDR_VAR 0 10
46236: PUSH
46237: LD_VAR 0 10
46241: PUSH
46242: LD_VAR 0 6
46246: PPUSH
46247: CALL_OW 311
46251: PPUSH
46252: LD_INT 3
46254: PPUSH
46255: CALL_OW 259
46259: PUSH
46260: LD_INT 4
46262: MUL
46263: MUL
46264: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46265: LD_VAR 0 6
46269: PPUSH
46270: CALL_OW 263
46274: PUSH
46275: LD_INT 2
46277: EQUAL
46278: IFFALSE 46329
// begin j := IsControledBy ( i ) ;
46280: LD_ADDR_VAR 0 7
46284: PUSH
46285: LD_VAR 0 6
46289: PPUSH
46290: CALL_OW 312
46294: ST_TO_ADDR
// if j then
46295: LD_VAR 0 7
46299: IFFALSE 46329
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46301: LD_ADDR_VAR 0 10
46305: PUSH
46306: LD_VAR 0 10
46310: PUSH
46311: LD_VAR 0 7
46315: PPUSH
46316: LD_INT 3
46318: PPUSH
46319: CALL_OW 259
46323: PUSH
46324: LD_INT 3
46326: MUL
46327: MUL
46328: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46329: LD_VAR 0 6
46333: PPUSH
46334: CALL_OW 264
46338: PUSH
46339: LD_INT 5
46341: PUSH
46342: LD_INT 6
46344: PUSH
46345: LD_INT 46
46347: PUSH
46348: LD_INT 44
46350: PUSH
46351: LD_INT 47
46353: PUSH
46354: LD_INT 45
46356: PUSH
46357: LD_INT 28
46359: PUSH
46360: LD_INT 7
46362: PUSH
46363: LD_INT 27
46365: PUSH
46366: LD_INT 29
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: IN
46381: PUSH
46382: LD_VAR 0 1
46386: PPUSH
46387: LD_INT 52
46389: PPUSH
46390: CALL_OW 321
46394: PUSH
46395: LD_INT 2
46397: EQUAL
46398: AND
46399: IFFALSE 46416
// bpoints := bpoints * 1.2 ;
46401: LD_ADDR_VAR 0 10
46405: PUSH
46406: LD_VAR 0 10
46410: PUSH
46411: LD_REAL  1.20000000000000E+0000
46414: MUL
46415: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46416: LD_VAR 0 6
46420: PPUSH
46421: CALL_OW 264
46425: PUSH
46426: LD_INT 6
46428: PUSH
46429: LD_INT 46
46431: PUSH
46432: LD_INT 47
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: LIST
46439: IN
46440: IFFALSE 46457
// bpoints := bpoints * 1.2 ;
46442: LD_ADDR_VAR 0 10
46446: PUSH
46447: LD_VAR 0 10
46451: PUSH
46452: LD_REAL  1.20000000000000E+0000
46455: MUL
46456: ST_TO_ADDR
// end ; unit_building :
46457: GO 46471
46459: LD_INT 3
46461: DOUBLE
46462: EQUAL
46463: IFTRUE 46467
46465: GO 46470
46467: POP
// ; end ;
46468: GO 46471
46470: POP
// for j = 1 to 3 do
46471: LD_ADDR_VAR 0 7
46475: PUSH
46476: DOUBLE
46477: LD_INT 1
46479: DEC
46480: ST_TO_ADDR
46481: LD_INT 3
46483: PUSH
46484: FOR_TO
46485: IFFALSE 46538
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46487: LD_ADDR_VAR 0 5
46491: PUSH
46492: LD_VAR 0 5
46496: PPUSH
46497: LD_VAR 0 7
46501: PPUSH
46502: LD_VAR 0 5
46506: PUSH
46507: LD_VAR 0 7
46511: ARRAY
46512: PUSH
46513: LD_VAR 0 9
46517: PUSH
46518: LD_VAR 0 7
46522: ARRAY
46523: PUSH
46524: LD_VAR 0 10
46528: MUL
46529: PLUS
46530: PPUSH
46531: CALL_OW 1
46535: ST_TO_ADDR
46536: GO 46484
46538: POP
46539: POP
// end ;
46540: GO 45019
46542: POP
46543: POP
// result := Replace ( result , 4 , tmp ) ;
46544: LD_ADDR_VAR 0 5
46548: PUSH
46549: LD_VAR 0 5
46553: PPUSH
46554: LD_INT 4
46556: PPUSH
46557: LD_VAR 0 8
46561: PPUSH
46562: CALL_OW 1
46566: ST_TO_ADDR
// end ;
46567: LD_VAR 0 5
46571: RET
// export function DangerAtRange ( unit , range ) ; begin
46572: LD_INT 0
46574: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46575: LD_ADDR_VAR 0 3
46579: PUSH
46580: LD_VAR 0 1
46584: PPUSH
46585: CALL_OW 255
46589: PPUSH
46590: LD_VAR 0 1
46594: PPUSH
46595: CALL_OW 250
46599: PPUSH
46600: LD_VAR 0 1
46604: PPUSH
46605: CALL_OW 251
46609: PPUSH
46610: LD_VAR 0 2
46614: PPUSH
46615: CALL 44871 0 4
46619: ST_TO_ADDR
// end ;
46620: LD_VAR 0 3
46624: RET
// export function DangerInArea ( side , area ) ; begin
46625: LD_INT 0
46627: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46628: LD_ADDR_VAR 0 3
46632: PUSH
46633: LD_VAR 0 2
46637: PPUSH
46638: LD_INT 81
46640: PUSH
46641: LD_VAR 0 1
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PPUSH
46650: CALL_OW 70
46654: ST_TO_ADDR
// end ;
46655: LD_VAR 0 3
46659: RET
// export function IsExtension ( b ) ; begin
46660: LD_INT 0
46662: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46663: LD_ADDR_VAR 0 2
46667: PUSH
46668: LD_VAR 0 1
46672: PUSH
46673: LD_INT 23
46675: PUSH
46676: LD_INT 20
46678: PUSH
46679: LD_INT 22
46681: PUSH
46682: LD_INT 17
46684: PUSH
46685: LD_INT 24
46687: PUSH
46688: LD_INT 21
46690: PUSH
46691: LD_INT 19
46693: PUSH
46694: LD_INT 16
46696: PUSH
46697: LD_INT 25
46699: PUSH
46700: LD_INT 18
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: IN
46715: ST_TO_ADDR
// end ;
46716: LD_VAR 0 2
46720: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46721: LD_INT 0
46723: PPUSH
46724: PPUSH
46725: PPUSH
// result := [ ] ;
46726: LD_ADDR_VAR 0 4
46730: PUSH
46731: EMPTY
46732: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46733: LD_ADDR_VAR 0 5
46737: PUSH
46738: LD_VAR 0 2
46742: PPUSH
46743: LD_INT 21
46745: PUSH
46746: LD_INT 3
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PPUSH
46753: CALL_OW 70
46757: ST_TO_ADDR
// if not tmp then
46758: LD_VAR 0 5
46762: NOT
46763: IFFALSE 46767
// exit ;
46765: GO 46831
// if checkLink then
46767: LD_VAR 0 3
46771: IFFALSE 46821
// begin for i in tmp do
46773: LD_ADDR_VAR 0 6
46777: PUSH
46778: LD_VAR 0 5
46782: PUSH
46783: FOR_IN
46784: IFFALSE 46819
// if GetBase ( i ) <> base then
46786: LD_VAR 0 6
46790: PPUSH
46791: CALL_OW 274
46795: PUSH
46796: LD_VAR 0 1
46800: NONEQUAL
46801: IFFALSE 46817
// ComLinkToBase ( base , i ) ;
46803: LD_VAR 0 1
46807: PPUSH
46808: LD_VAR 0 6
46812: PPUSH
46813: CALL_OW 169
46817: GO 46783
46819: POP
46820: POP
// end ; result := tmp ;
46821: LD_ADDR_VAR 0 4
46825: PUSH
46826: LD_VAR 0 5
46830: ST_TO_ADDR
// end ;
46831: LD_VAR 0 4
46835: RET
// export function ComComplete ( units , b ) ; var i ; begin
46836: LD_INT 0
46838: PPUSH
46839: PPUSH
// if not units then
46840: LD_VAR 0 1
46844: NOT
46845: IFFALSE 46849
// exit ;
46847: GO 46939
// for i in units do
46849: LD_ADDR_VAR 0 4
46853: PUSH
46854: LD_VAR 0 1
46858: PUSH
46859: FOR_IN
46860: IFFALSE 46937
// if BuildingStatus ( b ) = bs_build then
46862: LD_VAR 0 2
46866: PPUSH
46867: CALL_OW 461
46871: PUSH
46872: LD_INT 1
46874: EQUAL
46875: IFFALSE 46935
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46877: LD_VAR 0 4
46881: PPUSH
46882: LD_STRING h
46884: PUSH
46885: LD_VAR 0 2
46889: PPUSH
46890: CALL_OW 250
46894: PUSH
46895: LD_VAR 0 2
46899: PPUSH
46900: CALL_OW 251
46904: PUSH
46905: LD_VAR 0 2
46909: PUSH
46910: LD_INT 0
46912: PUSH
46913: LD_INT 0
46915: PUSH
46916: LD_INT 0
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: PUSH
46928: EMPTY
46929: LIST
46930: PPUSH
46931: CALL_OW 446
46935: GO 46859
46937: POP
46938: POP
// end ;
46939: LD_VAR 0 3
46943: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46944: LD_INT 0
46946: PPUSH
46947: PPUSH
46948: PPUSH
46949: PPUSH
46950: PPUSH
46951: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46952: LD_VAR 0 1
46956: NOT
46957: PUSH
46958: LD_VAR 0 1
46962: PPUSH
46963: CALL_OW 263
46967: PUSH
46968: LD_INT 2
46970: NONEQUAL
46971: OR
46972: IFFALSE 46976
// exit ;
46974: GO 47292
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46976: LD_ADDR_VAR 0 6
46980: PUSH
46981: LD_INT 22
46983: PUSH
46984: LD_VAR 0 1
46988: PPUSH
46989: CALL_OW 255
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 2
47000: PUSH
47001: LD_INT 30
47003: PUSH
47004: LD_INT 36
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 34
47013: PUSH
47014: LD_INT 31
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: LIST
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PPUSH
47030: CALL_OW 69
47034: ST_TO_ADDR
// if not tmp then
47035: LD_VAR 0 6
47039: NOT
47040: IFFALSE 47044
// exit ;
47042: GO 47292
// result := [ ] ;
47044: LD_ADDR_VAR 0 2
47048: PUSH
47049: EMPTY
47050: ST_TO_ADDR
// for i in tmp do
47051: LD_ADDR_VAR 0 3
47055: PUSH
47056: LD_VAR 0 6
47060: PUSH
47061: FOR_IN
47062: IFFALSE 47133
// begin t := UnitsInside ( i ) ;
47064: LD_ADDR_VAR 0 4
47068: PUSH
47069: LD_VAR 0 3
47073: PPUSH
47074: CALL_OW 313
47078: ST_TO_ADDR
// if t then
47079: LD_VAR 0 4
47083: IFFALSE 47131
// for j in t do
47085: LD_ADDR_VAR 0 7
47089: PUSH
47090: LD_VAR 0 4
47094: PUSH
47095: FOR_IN
47096: IFFALSE 47129
// result := Replace ( result , result + 1 , j ) ;
47098: LD_ADDR_VAR 0 2
47102: PUSH
47103: LD_VAR 0 2
47107: PPUSH
47108: LD_VAR 0 2
47112: PUSH
47113: LD_INT 1
47115: PLUS
47116: PPUSH
47117: LD_VAR 0 7
47121: PPUSH
47122: CALL_OW 1
47126: ST_TO_ADDR
47127: GO 47095
47129: POP
47130: POP
// end ;
47131: GO 47061
47133: POP
47134: POP
// if not result then
47135: LD_VAR 0 2
47139: NOT
47140: IFFALSE 47144
// exit ;
47142: GO 47292
// mech := result [ 1 ] ;
47144: LD_ADDR_VAR 0 5
47148: PUSH
47149: LD_VAR 0 2
47153: PUSH
47154: LD_INT 1
47156: ARRAY
47157: ST_TO_ADDR
// if result > 1 then
47158: LD_VAR 0 2
47162: PUSH
47163: LD_INT 1
47165: GREATER
47166: IFFALSE 47278
// begin for i = 2 to result do
47168: LD_ADDR_VAR 0 3
47172: PUSH
47173: DOUBLE
47174: LD_INT 2
47176: DEC
47177: ST_TO_ADDR
47178: LD_VAR 0 2
47182: PUSH
47183: FOR_TO
47184: IFFALSE 47276
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47186: LD_ADDR_VAR 0 4
47190: PUSH
47191: LD_VAR 0 2
47195: PUSH
47196: LD_VAR 0 3
47200: ARRAY
47201: PPUSH
47202: LD_INT 3
47204: PPUSH
47205: CALL_OW 259
47209: PUSH
47210: LD_VAR 0 2
47214: PUSH
47215: LD_VAR 0 3
47219: ARRAY
47220: PPUSH
47221: CALL_OW 432
47225: MINUS
47226: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47227: LD_VAR 0 4
47231: PUSH
47232: LD_VAR 0 5
47236: PPUSH
47237: LD_INT 3
47239: PPUSH
47240: CALL_OW 259
47244: PUSH
47245: LD_VAR 0 5
47249: PPUSH
47250: CALL_OW 432
47254: MINUS
47255: GREATEREQUAL
47256: IFFALSE 47274
// mech := result [ i ] ;
47258: LD_ADDR_VAR 0 5
47262: PUSH
47263: LD_VAR 0 2
47267: PUSH
47268: LD_VAR 0 3
47272: ARRAY
47273: ST_TO_ADDR
// end ;
47274: GO 47183
47276: POP
47277: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47278: LD_VAR 0 1
47282: PPUSH
47283: LD_VAR 0 5
47287: PPUSH
47288: CALL_OW 135
// end ;
47292: LD_VAR 0 2
47296: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47297: LD_INT 0
47299: PPUSH
47300: PPUSH
47301: PPUSH
47302: PPUSH
47303: PPUSH
47304: PPUSH
47305: PPUSH
47306: PPUSH
47307: PPUSH
47308: PPUSH
47309: PPUSH
47310: PPUSH
47311: PPUSH
// result := [ ] ;
47312: LD_ADDR_VAR 0 7
47316: PUSH
47317: EMPTY
47318: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47319: LD_VAR 0 1
47323: PPUSH
47324: CALL_OW 266
47328: PUSH
47329: LD_INT 0
47331: PUSH
47332: LD_INT 1
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: IN
47339: NOT
47340: IFFALSE 47344
// exit ;
47342: GO 48978
// if name then
47344: LD_VAR 0 3
47348: IFFALSE 47364
// SetBName ( base_dep , name ) ;
47350: LD_VAR 0 1
47354: PPUSH
47355: LD_VAR 0 3
47359: PPUSH
47360: CALL_OW 500
// base := GetBase ( base_dep ) ;
47364: LD_ADDR_VAR 0 15
47368: PUSH
47369: LD_VAR 0 1
47373: PPUSH
47374: CALL_OW 274
47378: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47379: LD_ADDR_VAR 0 16
47383: PUSH
47384: LD_VAR 0 1
47388: PPUSH
47389: CALL_OW 255
47393: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47394: LD_ADDR_VAR 0 17
47398: PUSH
47399: LD_VAR 0 1
47403: PPUSH
47404: CALL_OW 248
47408: ST_TO_ADDR
// if sources then
47409: LD_VAR 0 5
47413: IFFALSE 47460
// for i = 1 to 3 do
47415: LD_ADDR_VAR 0 8
47419: PUSH
47420: DOUBLE
47421: LD_INT 1
47423: DEC
47424: ST_TO_ADDR
47425: LD_INT 3
47427: PUSH
47428: FOR_TO
47429: IFFALSE 47458
// AddResourceType ( base , i , sources [ i ] ) ;
47431: LD_VAR 0 15
47435: PPUSH
47436: LD_VAR 0 8
47440: PPUSH
47441: LD_VAR 0 5
47445: PUSH
47446: LD_VAR 0 8
47450: ARRAY
47451: PPUSH
47452: CALL_OW 276
47456: GO 47428
47458: POP
47459: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47460: LD_ADDR_VAR 0 18
47464: PUSH
47465: LD_VAR 0 15
47469: PPUSH
47470: LD_VAR 0 2
47474: PPUSH
47475: LD_INT 1
47477: PPUSH
47478: CALL 46721 0 3
47482: ST_TO_ADDR
// InitHc ;
47483: CALL_OW 19
// InitUc ;
47487: CALL_OW 18
// uc_side := side ;
47491: LD_ADDR_OWVAR 20
47495: PUSH
47496: LD_VAR 0 16
47500: ST_TO_ADDR
// uc_nation := nation ;
47501: LD_ADDR_OWVAR 21
47505: PUSH
47506: LD_VAR 0 17
47510: ST_TO_ADDR
// if buildings then
47511: LD_VAR 0 18
47515: IFFALSE 48837
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47517: LD_ADDR_VAR 0 19
47521: PUSH
47522: LD_VAR 0 18
47526: PPUSH
47527: LD_INT 2
47529: PUSH
47530: LD_INT 30
47532: PUSH
47533: LD_INT 29
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 30
47542: PUSH
47543: LD_INT 30
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: LIST
47554: PPUSH
47555: CALL_OW 72
47559: ST_TO_ADDR
// if tmp then
47560: LD_VAR 0 19
47564: IFFALSE 47612
// for i in tmp do
47566: LD_ADDR_VAR 0 8
47570: PUSH
47571: LD_VAR 0 19
47575: PUSH
47576: FOR_IN
47577: IFFALSE 47610
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47579: LD_VAR 0 8
47583: PPUSH
47584: CALL_OW 250
47588: PPUSH
47589: LD_VAR 0 8
47593: PPUSH
47594: CALL_OW 251
47598: PPUSH
47599: LD_VAR 0 16
47603: PPUSH
47604: CALL_OW 441
47608: GO 47576
47610: POP
47611: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47612: LD_VAR 0 18
47616: PPUSH
47617: LD_INT 2
47619: PUSH
47620: LD_INT 30
47622: PUSH
47623: LD_INT 32
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 30
47632: PUSH
47633: LD_INT 33
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: LIST
47644: PPUSH
47645: CALL_OW 72
47649: IFFALSE 47737
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47651: LD_ADDR_VAR 0 8
47655: PUSH
47656: LD_VAR 0 18
47660: PPUSH
47661: LD_INT 2
47663: PUSH
47664: LD_INT 30
47666: PUSH
47667: LD_INT 32
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 30
47676: PUSH
47677: LD_INT 33
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: LIST
47688: PPUSH
47689: CALL_OW 72
47693: PUSH
47694: FOR_IN
47695: IFFALSE 47735
// begin if not GetBWeapon ( i ) then
47697: LD_VAR 0 8
47701: PPUSH
47702: CALL_OW 269
47706: NOT
47707: IFFALSE 47733
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47709: LD_VAR 0 8
47713: PPUSH
47714: LD_VAR 0 8
47718: PPUSH
47719: LD_VAR 0 2
47723: PPUSH
47724: CALL 48983 0 2
47728: PPUSH
47729: CALL_OW 431
// end ;
47733: GO 47694
47735: POP
47736: POP
// end ; for i = 1 to personel do
47737: LD_ADDR_VAR 0 8
47741: PUSH
47742: DOUBLE
47743: LD_INT 1
47745: DEC
47746: ST_TO_ADDR
47747: LD_VAR 0 6
47751: PUSH
47752: FOR_TO
47753: IFFALSE 48817
// begin if i > 4 then
47755: LD_VAR 0 8
47759: PUSH
47760: LD_INT 4
47762: GREATER
47763: IFFALSE 47767
// break ;
47765: GO 48817
// case i of 1 :
47767: LD_VAR 0 8
47771: PUSH
47772: LD_INT 1
47774: DOUBLE
47775: EQUAL
47776: IFTRUE 47780
47778: GO 47860
47780: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47781: LD_ADDR_VAR 0 12
47785: PUSH
47786: LD_VAR 0 18
47790: PPUSH
47791: LD_INT 22
47793: PUSH
47794: LD_VAR 0 16
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 58
47805: PUSH
47806: EMPTY
47807: LIST
47808: PUSH
47809: LD_INT 2
47811: PUSH
47812: LD_INT 30
47814: PUSH
47815: LD_INT 32
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 30
47824: PUSH
47825: LD_INT 4
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 30
47834: PUSH
47835: LD_INT 5
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: LIST
47852: PPUSH
47853: CALL_OW 72
47857: ST_TO_ADDR
47858: GO 48082
47860: LD_INT 2
47862: DOUBLE
47863: EQUAL
47864: IFTRUE 47868
47866: GO 47930
47868: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47869: LD_ADDR_VAR 0 12
47873: PUSH
47874: LD_VAR 0 18
47878: PPUSH
47879: LD_INT 22
47881: PUSH
47882: LD_VAR 0 16
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 2
47893: PUSH
47894: LD_INT 30
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 30
47906: PUSH
47907: LD_INT 1
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: LIST
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PPUSH
47923: CALL_OW 72
47927: ST_TO_ADDR
47928: GO 48082
47930: LD_INT 3
47932: DOUBLE
47933: EQUAL
47934: IFTRUE 47938
47936: GO 48000
47938: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47939: LD_ADDR_VAR 0 12
47943: PUSH
47944: LD_VAR 0 18
47948: PPUSH
47949: LD_INT 22
47951: PUSH
47952: LD_VAR 0 16
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 2
47963: PUSH
47964: LD_INT 30
47966: PUSH
47967: LD_INT 2
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 30
47976: PUSH
47977: LD_INT 3
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: LIST
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PPUSH
47993: CALL_OW 72
47997: ST_TO_ADDR
47998: GO 48082
48000: LD_INT 4
48002: DOUBLE
48003: EQUAL
48004: IFTRUE 48008
48006: GO 48081
48008: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48009: LD_ADDR_VAR 0 12
48013: PUSH
48014: LD_VAR 0 18
48018: PPUSH
48019: LD_INT 22
48021: PUSH
48022: LD_VAR 0 16
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 2
48033: PUSH
48034: LD_INT 30
48036: PUSH
48037: LD_INT 6
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 30
48046: PUSH
48047: LD_INT 7
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 30
48056: PUSH
48057: LD_INT 8
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PPUSH
48074: CALL_OW 72
48078: ST_TO_ADDR
48079: GO 48082
48081: POP
// if i = 1 then
48082: LD_VAR 0 8
48086: PUSH
48087: LD_INT 1
48089: EQUAL
48090: IFFALSE 48201
// begin tmp := [ ] ;
48092: LD_ADDR_VAR 0 19
48096: PUSH
48097: EMPTY
48098: ST_TO_ADDR
// for j in f do
48099: LD_ADDR_VAR 0 9
48103: PUSH
48104: LD_VAR 0 12
48108: PUSH
48109: FOR_IN
48110: IFFALSE 48183
// if GetBType ( j ) = b_bunker then
48112: LD_VAR 0 9
48116: PPUSH
48117: CALL_OW 266
48121: PUSH
48122: LD_INT 32
48124: EQUAL
48125: IFFALSE 48152
// tmp := Insert ( tmp , 1 , j ) else
48127: LD_ADDR_VAR 0 19
48131: PUSH
48132: LD_VAR 0 19
48136: PPUSH
48137: LD_INT 1
48139: PPUSH
48140: LD_VAR 0 9
48144: PPUSH
48145: CALL_OW 2
48149: ST_TO_ADDR
48150: GO 48181
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48152: LD_ADDR_VAR 0 19
48156: PUSH
48157: LD_VAR 0 19
48161: PPUSH
48162: LD_VAR 0 19
48166: PUSH
48167: LD_INT 1
48169: PLUS
48170: PPUSH
48171: LD_VAR 0 9
48175: PPUSH
48176: CALL_OW 2
48180: ST_TO_ADDR
48181: GO 48109
48183: POP
48184: POP
// if tmp then
48185: LD_VAR 0 19
48189: IFFALSE 48201
// f := tmp ;
48191: LD_ADDR_VAR 0 12
48195: PUSH
48196: LD_VAR 0 19
48200: ST_TO_ADDR
// end ; x := personel [ i ] ;
48201: LD_ADDR_VAR 0 13
48205: PUSH
48206: LD_VAR 0 6
48210: PUSH
48211: LD_VAR 0 8
48215: ARRAY
48216: ST_TO_ADDR
// if x = - 1 then
48217: LD_VAR 0 13
48221: PUSH
48222: LD_INT 1
48224: NEG
48225: EQUAL
48226: IFFALSE 48435
// begin for j in f do
48228: LD_ADDR_VAR 0 9
48232: PUSH
48233: LD_VAR 0 12
48237: PUSH
48238: FOR_IN
48239: IFFALSE 48431
// repeat InitHc ;
48241: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48245: LD_VAR 0 9
48249: PPUSH
48250: CALL_OW 266
48254: PUSH
48255: LD_INT 5
48257: EQUAL
48258: IFFALSE 48328
// begin if UnitsInside ( j ) < 3 then
48260: LD_VAR 0 9
48264: PPUSH
48265: CALL_OW 313
48269: PUSH
48270: LD_INT 3
48272: LESS
48273: IFFALSE 48309
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48275: LD_INT 0
48277: PPUSH
48278: LD_INT 5
48280: PUSH
48281: LD_INT 8
48283: PUSH
48284: LD_INT 9
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: LIST
48291: PUSH
48292: LD_VAR 0 17
48296: ARRAY
48297: PPUSH
48298: LD_VAR 0 4
48302: PPUSH
48303: CALL_OW 380
48307: GO 48326
// PrepareHuman ( false , i , skill ) ;
48309: LD_INT 0
48311: PPUSH
48312: LD_VAR 0 8
48316: PPUSH
48317: LD_VAR 0 4
48321: PPUSH
48322: CALL_OW 380
// end else
48326: GO 48345
// PrepareHuman ( false , i , skill ) ;
48328: LD_INT 0
48330: PPUSH
48331: LD_VAR 0 8
48335: PPUSH
48336: LD_VAR 0 4
48340: PPUSH
48341: CALL_OW 380
// un := CreateHuman ;
48345: LD_ADDR_VAR 0 14
48349: PUSH
48350: CALL_OW 44
48354: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48355: LD_ADDR_VAR 0 7
48359: PUSH
48360: LD_VAR 0 7
48364: PPUSH
48365: LD_INT 1
48367: PPUSH
48368: LD_VAR 0 14
48372: PPUSH
48373: CALL_OW 2
48377: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48378: LD_VAR 0 14
48382: PPUSH
48383: LD_VAR 0 9
48387: PPUSH
48388: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48392: LD_VAR 0 9
48396: PPUSH
48397: CALL_OW 313
48401: PUSH
48402: LD_INT 6
48404: EQUAL
48405: PUSH
48406: LD_VAR 0 9
48410: PPUSH
48411: CALL_OW 266
48415: PUSH
48416: LD_INT 32
48418: PUSH
48419: LD_INT 31
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: IN
48426: OR
48427: IFFALSE 48241
48429: GO 48238
48431: POP
48432: POP
// end else
48433: GO 48815
// for j = 1 to x do
48435: LD_ADDR_VAR 0 9
48439: PUSH
48440: DOUBLE
48441: LD_INT 1
48443: DEC
48444: ST_TO_ADDR
48445: LD_VAR 0 13
48449: PUSH
48450: FOR_TO
48451: IFFALSE 48813
// begin InitHc ;
48453: CALL_OW 19
// if not f then
48457: LD_VAR 0 12
48461: NOT
48462: IFFALSE 48551
// begin PrepareHuman ( false , i , skill ) ;
48464: LD_INT 0
48466: PPUSH
48467: LD_VAR 0 8
48471: PPUSH
48472: LD_VAR 0 4
48476: PPUSH
48477: CALL_OW 380
// un := CreateHuman ;
48481: LD_ADDR_VAR 0 14
48485: PUSH
48486: CALL_OW 44
48490: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48491: LD_ADDR_VAR 0 7
48495: PUSH
48496: LD_VAR 0 7
48500: PPUSH
48501: LD_INT 1
48503: PPUSH
48504: LD_VAR 0 14
48508: PPUSH
48509: CALL_OW 2
48513: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48514: LD_VAR 0 14
48518: PPUSH
48519: LD_VAR 0 1
48523: PPUSH
48524: CALL_OW 250
48528: PPUSH
48529: LD_VAR 0 1
48533: PPUSH
48534: CALL_OW 251
48538: PPUSH
48539: LD_INT 10
48541: PPUSH
48542: LD_INT 0
48544: PPUSH
48545: CALL_OW 50
// continue ;
48549: GO 48450
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48551: LD_VAR 0 12
48555: PUSH
48556: LD_INT 1
48558: ARRAY
48559: PPUSH
48560: CALL_OW 313
48564: PUSH
48565: LD_VAR 0 12
48569: PUSH
48570: LD_INT 1
48572: ARRAY
48573: PPUSH
48574: CALL_OW 266
48578: PUSH
48579: LD_INT 32
48581: PUSH
48582: LD_INT 31
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: IN
48589: AND
48590: PUSH
48591: LD_VAR 0 12
48595: PUSH
48596: LD_INT 1
48598: ARRAY
48599: PPUSH
48600: CALL_OW 313
48604: PUSH
48605: LD_INT 6
48607: EQUAL
48608: OR
48609: IFFALSE 48629
// f := Delete ( f , 1 ) ;
48611: LD_ADDR_VAR 0 12
48615: PUSH
48616: LD_VAR 0 12
48620: PPUSH
48621: LD_INT 1
48623: PPUSH
48624: CALL_OW 3
48628: ST_TO_ADDR
// if not f then
48629: LD_VAR 0 12
48633: NOT
48634: IFFALSE 48652
// begin x := x + 2 ;
48636: LD_ADDR_VAR 0 13
48640: PUSH
48641: LD_VAR 0 13
48645: PUSH
48646: LD_INT 2
48648: PLUS
48649: ST_TO_ADDR
// continue ;
48650: GO 48450
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48652: LD_VAR 0 12
48656: PUSH
48657: LD_INT 1
48659: ARRAY
48660: PPUSH
48661: CALL_OW 266
48665: PUSH
48666: LD_INT 5
48668: EQUAL
48669: IFFALSE 48743
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48671: LD_VAR 0 12
48675: PUSH
48676: LD_INT 1
48678: ARRAY
48679: PPUSH
48680: CALL_OW 313
48684: PUSH
48685: LD_INT 3
48687: LESS
48688: IFFALSE 48724
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48690: LD_INT 0
48692: PPUSH
48693: LD_INT 5
48695: PUSH
48696: LD_INT 8
48698: PUSH
48699: LD_INT 9
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: LIST
48706: PUSH
48707: LD_VAR 0 17
48711: ARRAY
48712: PPUSH
48713: LD_VAR 0 4
48717: PPUSH
48718: CALL_OW 380
48722: GO 48741
// PrepareHuman ( false , i , skill ) ;
48724: LD_INT 0
48726: PPUSH
48727: LD_VAR 0 8
48731: PPUSH
48732: LD_VAR 0 4
48736: PPUSH
48737: CALL_OW 380
// end else
48741: GO 48760
// PrepareHuman ( false , i , skill ) ;
48743: LD_INT 0
48745: PPUSH
48746: LD_VAR 0 8
48750: PPUSH
48751: LD_VAR 0 4
48755: PPUSH
48756: CALL_OW 380
// un := CreateHuman ;
48760: LD_ADDR_VAR 0 14
48764: PUSH
48765: CALL_OW 44
48769: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48770: LD_ADDR_VAR 0 7
48774: PUSH
48775: LD_VAR 0 7
48779: PPUSH
48780: LD_INT 1
48782: PPUSH
48783: LD_VAR 0 14
48787: PPUSH
48788: CALL_OW 2
48792: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48793: LD_VAR 0 14
48797: PPUSH
48798: LD_VAR 0 12
48802: PUSH
48803: LD_INT 1
48805: ARRAY
48806: PPUSH
48807: CALL_OW 52
// end ;
48811: GO 48450
48813: POP
48814: POP
// end ;
48815: GO 47752
48817: POP
48818: POP
// result := result ^ buildings ;
48819: LD_ADDR_VAR 0 7
48823: PUSH
48824: LD_VAR 0 7
48828: PUSH
48829: LD_VAR 0 18
48833: ADD
48834: ST_TO_ADDR
// end else
48835: GO 48978
// begin for i = 1 to personel do
48837: LD_ADDR_VAR 0 8
48841: PUSH
48842: DOUBLE
48843: LD_INT 1
48845: DEC
48846: ST_TO_ADDR
48847: LD_VAR 0 6
48851: PUSH
48852: FOR_TO
48853: IFFALSE 48976
// begin if i > 4 then
48855: LD_VAR 0 8
48859: PUSH
48860: LD_INT 4
48862: GREATER
48863: IFFALSE 48867
// break ;
48865: GO 48976
// x := personel [ i ] ;
48867: LD_ADDR_VAR 0 13
48871: PUSH
48872: LD_VAR 0 6
48876: PUSH
48877: LD_VAR 0 8
48881: ARRAY
48882: ST_TO_ADDR
// if x = - 1 then
48883: LD_VAR 0 13
48887: PUSH
48888: LD_INT 1
48890: NEG
48891: EQUAL
48892: IFFALSE 48896
// continue ;
48894: GO 48852
// PrepareHuman ( false , i , skill ) ;
48896: LD_INT 0
48898: PPUSH
48899: LD_VAR 0 8
48903: PPUSH
48904: LD_VAR 0 4
48908: PPUSH
48909: CALL_OW 380
// un := CreateHuman ;
48913: LD_ADDR_VAR 0 14
48917: PUSH
48918: CALL_OW 44
48922: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48923: LD_VAR 0 14
48927: PPUSH
48928: LD_VAR 0 1
48932: PPUSH
48933: CALL_OW 250
48937: PPUSH
48938: LD_VAR 0 1
48942: PPUSH
48943: CALL_OW 251
48947: PPUSH
48948: LD_INT 10
48950: PPUSH
48951: LD_INT 0
48953: PPUSH
48954: CALL_OW 50
// result := result ^ un ;
48958: LD_ADDR_VAR 0 7
48962: PUSH
48963: LD_VAR 0 7
48967: PUSH
48968: LD_VAR 0 14
48972: ADD
48973: ST_TO_ADDR
// end ;
48974: GO 48852
48976: POP
48977: POP
// end ; end ;
48978: LD_VAR 0 7
48982: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48983: LD_INT 0
48985: PPUSH
48986: PPUSH
48987: PPUSH
48988: PPUSH
48989: PPUSH
48990: PPUSH
48991: PPUSH
48992: PPUSH
48993: PPUSH
48994: PPUSH
48995: PPUSH
48996: PPUSH
48997: PPUSH
48998: PPUSH
48999: PPUSH
49000: PPUSH
// result := false ;
49001: LD_ADDR_VAR 0 3
49005: PUSH
49006: LD_INT 0
49008: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49009: LD_VAR 0 1
49013: NOT
49014: PUSH
49015: LD_VAR 0 1
49019: PPUSH
49020: CALL_OW 266
49024: PUSH
49025: LD_INT 32
49027: PUSH
49028: LD_INT 33
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: IN
49035: NOT
49036: OR
49037: IFFALSE 49041
// exit ;
49039: GO 50150
// nat := GetNation ( tower ) ;
49041: LD_ADDR_VAR 0 12
49045: PUSH
49046: LD_VAR 0 1
49050: PPUSH
49051: CALL_OW 248
49055: ST_TO_ADDR
// side := GetSide ( tower ) ;
49056: LD_ADDR_VAR 0 16
49060: PUSH
49061: LD_VAR 0 1
49065: PPUSH
49066: CALL_OW 255
49070: ST_TO_ADDR
// x := GetX ( tower ) ;
49071: LD_ADDR_VAR 0 10
49075: PUSH
49076: LD_VAR 0 1
49080: PPUSH
49081: CALL_OW 250
49085: ST_TO_ADDR
// y := GetY ( tower ) ;
49086: LD_ADDR_VAR 0 11
49090: PUSH
49091: LD_VAR 0 1
49095: PPUSH
49096: CALL_OW 251
49100: ST_TO_ADDR
// if not x or not y then
49101: LD_VAR 0 10
49105: NOT
49106: PUSH
49107: LD_VAR 0 11
49111: NOT
49112: OR
49113: IFFALSE 49117
// exit ;
49115: GO 50150
// weapon := 0 ;
49117: LD_ADDR_VAR 0 18
49121: PUSH
49122: LD_INT 0
49124: ST_TO_ADDR
// fac_list := [ ] ;
49125: LD_ADDR_VAR 0 17
49129: PUSH
49130: EMPTY
49131: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49132: LD_ADDR_VAR 0 6
49136: PUSH
49137: LD_VAR 0 1
49141: PPUSH
49142: CALL_OW 274
49146: PPUSH
49147: LD_VAR 0 2
49151: PPUSH
49152: LD_INT 0
49154: PPUSH
49155: CALL 46721 0 3
49159: PPUSH
49160: LD_INT 30
49162: PUSH
49163: LD_INT 3
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PPUSH
49170: CALL_OW 72
49174: ST_TO_ADDR
// if not factories then
49175: LD_VAR 0 6
49179: NOT
49180: IFFALSE 49184
// exit ;
49182: GO 50150
// for i in factories do
49184: LD_ADDR_VAR 0 8
49188: PUSH
49189: LD_VAR 0 6
49193: PUSH
49194: FOR_IN
49195: IFFALSE 49220
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49197: LD_ADDR_VAR 0 17
49201: PUSH
49202: LD_VAR 0 17
49206: PUSH
49207: LD_VAR 0 8
49211: PPUSH
49212: CALL_OW 478
49216: UNION
49217: ST_TO_ADDR
49218: GO 49194
49220: POP
49221: POP
// if not fac_list then
49222: LD_VAR 0 17
49226: NOT
49227: IFFALSE 49231
// exit ;
49229: GO 50150
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49231: LD_ADDR_VAR 0 5
49235: PUSH
49236: LD_INT 4
49238: PUSH
49239: LD_INT 5
49241: PUSH
49242: LD_INT 9
49244: PUSH
49245: LD_INT 10
49247: PUSH
49248: LD_INT 6
49250: PUSH
49251: LD_INT 7
49253: PUSH
49254: LD_INT 11
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 27
49268: PUSH
49269: LD_INT 28
49271: PUSH
49272: LD_INT 26
49274: PUSH
49275: LD_INT 30
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 43
49286: PUSH
49287: LD_INT 44
49289: PUSH
49290: LD_INT 46
49292: PUSH
49293: LD_INT 45
49295: PUSH
49296: LD_INT 47
49298: PUSH
49299: LD_INT 49
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: LIST
49314: PUSH
49315: LD_VAR 0 12
49319: ARRAY
49320: ST_TO_ADDR
// list := list isect fac_list ;
49321: LD_ADDR_VAR 0 5
49325: PUSH
49326: LD_VAR 0 5
49330: PUSH
49331: LD_VAR 0 17
49335: ISECT
49336: ST_TO_ADDR
// if not list then
49337: LD_VAR 0 5
49341: NOT
49342: IFFALSE 49346
// exit ;
49344: GO 50150
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49346: LD_VAR 0 12
49350: PUSH
49351: LD_INT 3
49353: EQUAL
49354: PUSH
49355: LD_INT 49
49357: PUSH
49358: LD_VAR 0 5
49362: IN
49363: AND
49364: PUSH
49365: LD_INT 31
49367: PPUSH
49368: LD_VAR 0 16
49372: PPUSH
49373: CALL_OW 321
49377: PUSH
49378: LD_INT 2
49380: EQUAL
49381: AND
49382: IFFALSE 49442
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49384: LD_INT 22
49386: PUSH
49387: LD_VAR 0 16
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 35
49398: PUSH
49399: LD_INT 49
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 91
49408: PUSH
49409: LD_VAR 0 1
49413: PUSH
49414: LD_INT 10
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: LIST
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: LIST
49426: PPUSH
49427: CALL_OW 69
49431: NOT
49432: IFFALSE 49442
// weapon := ru_time_lapser ;
49434: LD_ADDR_VAR 0 18
49438: PUSH
49439: LD_INT 49
49441: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49442: LD_VAR 0 12
49446: PUSH
49447: LD_INT 1
49449: PUSH
49450: LD_INT 2
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: IN
49457: PUSH
49458: LD_INT 11
49460: PUSH
49461: LD_VAR 0 5
49465: IN
49466: PUSH
49467: LD_INT 30
49469: PUSH
49470: LD_VAR 0 5
49474: IN
49475: OR
49476: AND
49477: PUSH
49478: LD_INT 6
49480: PPUSH
49481: LD_VAR 0 16
49485: PPUSH
49486: CALL_OW 321
49490: PUSH
49491: LD_INT 2
49493: EQUAL
49494: AND
49495: IFFALSE 49660
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49497: LD_INT 22
49499: PUSH
49500: LD_VAR 0 16
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 2
49511: PUSH
49512: LD_INT 35
49514: PUSH
49515: LD_INT 11
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 35
49524: PUSH
49525: LD_INT 30
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 91
49539: PUSH
49540: LD_VAR 0 1
49544: PUSH
49545: LD_INT 18
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: LIST
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: LIST
49557: PPUSH
49558: CALL_OW 69
49562: NOT
49563: PUSH
49564: LD_INT 22
49566: PUSH
49567: LD_VAR 0 16
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 2
49578: PUSH
49579: LD_INT 30
49581: PUSH
49582: LD_INT 32
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 30
49591: PUSH
49592: LD_INT 33
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 91
49606: PUSH
49607: LD_VAR 0 1
49611: PUSH
49612: LD_INT 12
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: LIST
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: LIST
49624: PUSH
49625: EMPTY
49626: LIST
49627: PPUSH
49628: CALL_OW 69
49632: PUSH
49633: LD_INT 2
49635: GREATER
49636: AND
49637: IFFALSE 49660
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49639: LD_ADDR_VAR 0 18
49643: PUSH
49644: LD_INT 11
49646: PUSH
49647: LD_INT 30
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_VAR 0 12
49658: ARRAY
49659: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49660: LD_VAR 0 18
49664: NOT
49665: PUSH
49666: LD_INT 40
49668: PPUSH
49669: LD_VAR 0 16
49673: PPUSH
49674: CALL_OW 321
49678: PUSH
49679: LD_INT 2
49681: EQUAL
49682: AND
49683: PUSH
49684: LD_INT 7
49686: PUSH
49687: LD_VAR 0 5
49691: IN
49692: PUSH
49693: LD_INT 28
49695: PUSH
49696: LD_VAR 0 5
49700: IN
49701: OR
49702: PUSH
49703: LD_INT 45
49705: PUSH
49706: LD_VAR 0 5
49710: IN
49711: OR
49712: AND
49713: IFFALSE 49967
// begin hex := GetHexInfo ( x , y ) ;
49715: LD_ADDR_VAR 0 4
49719: PUSH
49720: LD_VAR 0 10
49724: PPUSH
49725: LD_VAR 0 11
49729: PPUSH
49730: CALL_OW 546
49734: ST_TO_ADDR
// if hex [ 1 ] then
49735: LD_VAR 0 4
49739: PUSH
49740: LD_INT 1
49742: ARRAY
49743: IFFALSE 49747
// exit ;
49745: GO 50150
// height := hex [ 2 ] ;
49747: LD_ADDR_VAR 0 15
49751: PUSH
49752: LD_VAR 0 4
49756: PUSH
49757: LD_INT 2
49759: ARRAY
49760: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49761: LD_ADDR_VAR 0 14
49765: PUSH
49766: LD_INT 0
49768: PUSH
49769: LD_INT 2
49771: PUSH
49772: LD_INT 3
49774: PUSH
49775: LD_INT 5
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: ST_TO_ADDR
// for i in tmp do
49784: LD_ADDR_VAR 0 8
49788: PUSH
49789: LD_VAR 0 14
49793: PUSH
49794: FOR_IN
49795: IFFALSE 49965
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49797: LD_ADDR_VAR 0 9
49801: PUSH
49802: LD_VAR 0 10
49806: PPUSH
49807: LD_VAR 0 8
49811: PPUSH
49812: LD_INT 5
49814: PPUSH
49815: CALL_OW 272
49819: PUSH
49820: LD_VAR 0 11
49824: PPUSH
49825: LD_VAR 0 8
49829: PPUSH
49830: LD_INT 5
49832: PPUSH
49833: CALL_OW 273
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49842: LD_VAR 0 9
49846: PUSH
49847: LD_INT 1
49849: ARRAY
49850: PPUSH
49851: LD_VAR 0 9
49855: PUSH
49856: LD_INT 2
49858: ARRAY
49859: PPUSH
49860: CALL_OW 488
49864: IFFALSE 49963
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49866: LD_ADDR_VAR 0 4
49870: PUSH
49871: LD_VAR 0 9
49875: PUSH
49876: LD_INT 1
49878: ARRAY
49879: PPUSH
49880: LD_VAR 0 9
49884: PUSH
49885: LD_INT 2
49887: ARRAY
49888: PPUSH
49889: CALL_OW 546
49893: ST_TO_ADDR
// if hex [ 1 ] then
49894: LD_VAR 0 4
49898: PUSH
49899: LD_INT 1
49901: ARRAY
49902: IFFALSE 49906
// continue ;
49904: GO 49794
// h := hex [ 2 ] ;
49906: LD_ADDR_VAR 0 13
49910: PUSH
49911: LD_VAR 0 4
49915: PUSH
49916: LD_INT 2
49918: ARRAY
49919: ST_TO_ADDR
// if h + 7 < height then
49920: LD_VAR 0 13
49924: PUSH
49925: LD_INT 7
49927: PLUS
49928: PUSH
49929: LD_VAR 0 15
49933: LESS
49934: IFFALSE 49963
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49936: LD_ADDR_VAR 0 18
49940: PUSH
49941: LD_INT 7
49943: PUSH
49944: LD_INT 28
49946: PUSH
49947: LD_INT 45
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: LIST
49954: PUSH
49955: LD_VAR 0 12
49959: ARRAY
49960: ST_TO_ADDR
// break ;
49961: GO 49965
// end ; end ; end ;
49963: GO 49794
49965: POP
49966: POP
// end ; if not weapon then
49967: LD_VAR 0 18
49971: NOT
49972: IFFALSE 50032
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49974: LD_ADDR_VAR 0 5
49978: PUSH
49979: LD_VAR 0 5
49983: PUSH
49984: LD_INT 11
49986: PUSH
49987: LD_INT 30
49989: PUSH
49990: LD_INT 49
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: LIST
49997: DIFF
49998: ST_TO_ADDR
// if not list then
49999: LD_VAR 0 5
50003: NOT
50004: IFFALSE 50008
// exit ;
50006: GO 50150
// weapon := list [ rand ( 1 , list ) ] ;
50008: LD_ADDR_VAR 0 18
50012: PUSH
50013: LD_VAR 0 5
50017: PUSH
50018: LD_INT 1
50020: PPUSH
50021: LD_VAR 0 5
50025: PPUSH
50026: CALL_OW 12
50030: ARRAY
50031: ST_TO_ADDR
// end ; if weapon then
50032: LD_VAR 0 18
50036: IFFALSE 50150
// begin tmp := CostOfWeapon ( weapon ) ;
50038: LD_ADDR_VAR 0 14
50042: PUSH
50043: LD_VAR 0 18
50047: PPUSH
50048: CALL_OW 451
50052: ST_TO_ADDR
// j := GetBase ( tower ) ;
50053: LD_ADDR_VAR 0 9
50057: PUSH
50058: LD_VAR 0 1
50062: PPUSH
50063: CALL_OW 274
50067: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50068: LD_VAR 0 9
50072: PPUSH
50073: LD_INT 1
50075: PPUSH
50076: CALL_OW 275
50080: PUSH
50081: LD_VAR 0 14
50085: PUSH
50086: LD_INT 1
50088: ARRAY
50089: GREATEREQUAL
50090: PUSH
50091: LD_VAR 0 9
50095: PPUSH
50096: LD_INT 2
50098: PPUSH
50099: CALL_OW 275
50103: PUSH
50104: LD_VAR 0 14
50108: PUSH
50109: LD_INT 2
50111: ARRAY
50112: GREATEREQUAL
50113: AND
50114: PUSH
50115: LD_VAR 0 9
50119: PPUSH
50120: LD_INT 3
50122: PPUSH
50123: CALL_OW 275
50127: PUSH
50128: LD_VAR 0 14
50132: PUSH
50133: LD_INT 3
50135: ARRAY
50136: GREATEREQUAL
50137: AND
50138: IFFALSE 50150
// result := weapon ;
50140: LD_ADDR_VAR 0 3
50144: PUSH
50145: LD_VAR 0 18
50149: ST_TO_ADDR
// end ; end ;
50150: LD_VAR 0 3
50154: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50155: LD_INT 0
50157: PPUSH
50158: PPUSH
// result := true ;
50159: LD_ADDR_VAR 0 3
50163: PUSH
50164: LD_INT 1
50166: ST_TO_ADDR
// if array1 = array2 then
50167: LD_VAR 0 1
50171: PUSH
50172: LD_VAR 0 2
50176: EQUAL
50177: IFFALSE 50237
// begin for i = 1 to array1 do
50179: LD_ADDR_VAR 0 4
50183: PUSH
50184: DOUBLE
50185: LD_INT 1
50187: DEC
50188: ST_TO_ADDR
50189: LD_VAR 0 1
50193: PUSH
50194: FOR_TO
50195: IFFALSE 50233
// if array1 [ i ] <> array2 [ i ] then
50197: LD_VAR 0 1
50201: PUSH
50202: LD_VAR 0 4
50206: ARRAY
50207: PUSH
50208: LD_VAR 0 2
50212: PUSH
50213: LD_VAR 0 4
50217: ARRAY
50218: NONEQUAL
50219: IFFALSE 50231
// begin result := false ;
50221: LD_ADDR_VAR 0 3
50225: PUSH
50226: LD_INT 0
50228: ST_TO_ADDR
// break ;
50229: GO 50233
// end ;
50231: GO 50194
50233: POP
50234: POP
// end else
50235: GO 50245
// result := false ;
50237: LD_ADDR_VAR 0 3
50241: PUSH
50242: LD_INT 0
50244: ST_TO_ADDR
// end ;
50245: LD_VAR 0 3
50249: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50250: LD_INT 0
50252: PPUSH
50253: PPUSH
// if not array1 or not array2 then
50254: LD_VAR 0 1
50258: NOT
50259: PUSH
50260: LD_VAR 0 2
50264: NOT
50265: OR
50266: IFFALSE 50270
// exit ;
50268: GO 50334
// result := true ;
50270: LD_ADDR_VAR 0 3
50274: PUSH
50275: LD_INT 1
50277: ST_TO_ADDR
// for i = 1 to array1 do
50278: LD_ADDR_VAR 0 4
50282: PUSH
50283: DOUBLE
50284: LD_INT 1
50286: DEC
50287: ST_TO_ADDR
50288: LD_VAR 0 1
50292: PUSH
50293: FOR_TO
50294: IFFALSE 50332
// if array1 [ i ] <> array2 [ i ] then
50296: LD_VAR 0 1
50300: PUSH
50301: LD_VAR 0 4
50305: ARRAY
50306: PUSH
50307: LD_VAR 0 2
50311: PUSH
50312: LD_VAR 0 4
50316: ARRAY
50317: NONEQUAL
50318: IFFALSE 50330
// begin result := false ;
50320: LD_ADDR_VAR 0 3
50324: PUSH
50325: LD_INT 0
50327: ST_TO_ADDR
// break ;
50328: GO 50332
// end ;
50330: GO 50293
50332: POP
50333: POP
// end ;
50334: LD_VAR 0 3
50338: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50339: LD_INT 0
50341: PPUSH
50342: PPUSH
50343: PPUSH
// pom := GetBase ( fac ) ;
50344: LD_ADDR_VAR 0 5
50348: PUSH
50349: LD_VAR 0 1
50353: PPUSH
50354: CALL_OW 274
50358: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50359: LD_ADDR_VAR 0 4
50363: PUSH
50364: LD_VAR 0 2
50368: PUSH
50369: LD_INT 1
50371: ARRAY
50372: PPUSH
50373: LD_VAR 0 2
50377: PUSH
50378: LD_INT 2
50380: ARRAY
50381: PPUSH
50382: LD_VAR 0 2
50386: PUSH
50387: LD_INT 3
50389: ARRAY
50390: PPUSH
50391: LD_VAR 0 2
50395: PUSH
50396: LD_INT 4
50398: ARRAY
50399: PPUSH
50400: CALL_OW 449
50404: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50405: LD_ADDR_VAR 0 3
50409: PUSH
50410: LD_VAR 0 5
50414: PPUSH
50415: LD_INT 1
50417: PPUSH
50418: CALL_OW 275
50422: PUSH
50423: LD_VAR 0 4
50427: PUSH
50428: LD_INT 1
50430: ARRAY
50431: GREATEREQUAL
50432: PUSH
50433: LD_VAR 0 5
50437: PPUSH
50438: LD_INT 2
50440: PPUSH
50441: CALL_OW 275
50445: PUSH
50446: LD_VAR 0 4
50450: PUSH
50451: LD_INT 2
50453: ARRAY
50454: GREATEREQUAL
50455: AND
50456: PUSH
50457: LD_VAR 0 5
50461: PPUSH
50462: LD_INT 3
50464: PPUSH
50465: CALL_OW 275
50469: PUSH
50470: LD_VAR 0 4
50474: PUSH
50475: LD_INT 3
50477: ARRAY
50478: GREATEREQUAL
50479: AND
50480: ST_TO_ADDR
// end ;
50481: LD_VAR 0 3
50485: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50486: LD_INT 0
50488: PPUSH
50489: PPUSH
50490: PPUSH
50491: PPUSH
// pom := GetBase ( building ) ;
50492: LD_ADDR_VAR 0 3
50496: PUSH
50497: LD_VAR 0 1
50501: PPUSH
50502: CALL_OW 274
50506: ST_TO_ADDR
// if not pom then
50507: LD_VAR 0 3
50511: NOT
50512: IFFALSE 50516
// exit ;
50514: GO 50686
// btype := GetBType ( building ) ;
50516: LD_ADDR_VAR 0 5
50520: PUSH
50521: LD_VAR 0 1
50525: PPUSH
50526: CALL_OW 266
50530: ST_TO_ADDR
// if btype = b_armoury then
50531: LD_VAR 0 5
50535: PUSH
50536: LD_INT 4
50538: EQUAL
50539: IFFALSE 50549
// btype := b_barracks ;
50541: LD_ADDR_VAR 0 5
50545: PUSH
50546: LD_INT 5
50548: ST_TO_ADDR
// if btype = b_depot then
50549: LD_VAR 0 5
50553: PUSH
50554: LD_INT 0
50556: EQUAL
50557: IFFALSE 50567
// btype := b_warehouse ;
50559: LD_ADDR_VAR 0 5
50563: PUSH
50564: LD_INT 1
50566: ST_TO_ADDR
// if btype = b_workshop then
50567: LD_VAR 0 5
50571: PUSH
50572: LD_INT 2
50574: EQUAL
50575: IFFALSE 50585
// btype := b_factory ;
50577: LD_ADDR_VAR 0 5
50581: PUSH
50582: LD_INT 3
50584: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50585: LD_ADDR_VAR 0 4
50589: PUSH
50590: LD_VAR 0 5
50594: PPUSH
50595: LD_VAR 0 1
50599: PPUSH
50600: CALL_OW 248
50604: PPUSH
50605: CALL_OW 450
50609: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50610: LD_ADDR_VAR 0 2
50614: PUSH
50615: LD_VAR 0 3
50619: PPUSH
50620: LD_INT 1
50622: PPUSH
50623: CALL_OW 275
50627: PUSH
50628: LD_VAR 0 4
50632: PUSH
50633: LD_INT 1
50635: ARRAY
50636: GREATEREQUAL
50637: PUSH
50638: LD_VAR 0 3
50642: PPUSH
50643: LD_INT 2
50645: PPUSH
50646: CALL_OW 275
50650: PUSH
50651: LD_VAR 0 4
50655: PUSH
50656: LD_INT 2
50658: ARRAY
50659: GREATEREQUAL
50660: AND
50661: PUSH
50662: LD_VAR 0 3
50666: PPUSH
50667: LD_INT 3
50669: PPUSH
50670: CALL_OW 275
50674: PUSH
50675: LD_VAR 0 4
50679: PUSH
50680: LD_INT 3
50682: ARRAY
50683: GREATEREQUAL
50684: AND
50685: ST_TO_ADDR
// end ;
50686: LD_VAR 0 2
50690: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50691: LD_INT 0
50693: PPUSH
50694: PPUSH
50695: PPUSH
// pom := GetBase ( building ) ;
50696: LD_ADDR_VAR 0 4
50700: PUSH
50701: LD_VAR 0 1
50705: PPUSH
50706: CALL_OW 274
50710: ST_TO_ADDR
// if not pom then
50711: LD_VAR 0 4
50715: NOT
50716: IFFALSE 50720
// exit ;
50718: GO 50821
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50720: LD_ADDR_VAR 0 5
50724: PUSH
50725: LD_VAR 0 2
50729: PPUSH
50730: LD_VAR 0 1
50734: PPUSH
50735: CALL_OW 248
50739: PPUSH
50740: CALL_OW 450
50744: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50745: LD_ADDR_VAR 0 3
50749: PUSH
50750: LD_VAR 0 4
50754: PPUSH
50755: LD_INT 1
50757: PPUSH
50758: CALL_OW 275
50762: PUSH
50763: LD_VAR 0 5
50767: PUSH
50768: LD_INT 1
50770: ARRAY
50771: GREATEREQUAL
50772: PUSH
50773: LD_VAR 0 4
50777: PPUSH
50778: LD_INT 2
50780: PPUSH
50781: CALL_OW 275
50785: PUSH
50786: LD_VAR 0 5
50790: PUSH
50791: LD_INT 2
50793: ARRAY
50794: GREATEREQUAL
50795: AND
50796: PUSH
50797: LD_VAR 0 4
50801: PPUSH
50802: LD_INT 3
50804: PPUSH
50805: CALL_OW 275
50809: PUSH
50810: LD_VAR 0 5
50814: PUSH
50815: LD_INT 3
50817: ARRAY
50818: GREATEREQUAL
50819: AND
50820: ST_TO_ADDR
// end ;
50821: LD_VAR 0 3
50825: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50826: LD_INT 0
50828: PPUSH
50829: PPUSH
50830: PPUSH
50831: PPUSH
50832: PPUSH
50833: PPUSH
50834: PPUSH
50835: PPUSH
50836: PPUSH
50837: PPUSH
50838: PPUSH
// result := false ;
50839: LD_ADDR_VAR 0 8
50843: PUSH
50844: LD_INT 0
50846: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50847: LD_VAR 0 5
50851: NOT
50852: PUSH
50853: LD_VAR 0 1
50857: NOT
50858: OR
50859: PUSH
50860: LD_VAR 0 2
50864: NOT
50865: OR
50866: PUSH
50867: LD_VAR 0 3
50871: NOT
50872: OR
50873: IFFALSE 50877
// exit ;
50875: GO 51691
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50877: LD_ADDR_VAR 0 14
50881: PUSH
50882: LD_VAR 0 1
50886: PPUSH
50887: LD_VAR 0 2
50891: PPUSH
50892: LD_VAR 0 3
50896: PPUSH
50897: LD_VAR 0 4
50901: PPUSH
50902: LD_VAR 0 5
50906: PUSH
50907: LD_INT 1
50909: ARRAY
50910: PPUSH
50911: CALL_OW 248
50915: PPUSH
50916: LD_INT 0
50918: PPUSH
50919: CALL 52924 0 6
50923: ST_TO_ADDR
// if not hexes then
50924: LD_VAR 0 14
50928: NOT
50929: IFFALSE 50933
// exit ;
50931: GO 51691
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50933: LD_ADDR_VAR 0 17
50937: PUSH
50938: LD_VAR 0 5
50942: PPUSH
50943: LD_INT 22
50945: PUSH
50946: LD_VAR 0 13
50950: PPUSH
50951: CALL_OW 255
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 2
50962: PUSH
50963: LD_INT 30
50965: PUSH
50966: LD_INT 0
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 30
50975: PUSH
50976: LD_INT 1
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: LIST
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PPUSH
50992: CALL_OW 72
50996: ST_TO_ADDR
// for i = 1 to hexes do
50997: LD_ADDR_VAR 0 9
51001: PUSH
51002: DOUBLE
51003: LD_INT 1
51005: DEC
51006: ST_TO_ADDR
51007: LD_VAR 0 14
51011: PUSH
51012: FOR_TO
51013: IFFALSE 51689
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51015: LD_ADDR_VAR 0 13
51019: PUSH
51020: LD_VAR 0 14
51024: PUSH
51025: LD_VAR 0 9
51029: ARRAY
51030: PUSH
51031: LD_INT 1
51033: ARRAY
51034: PPUSH
51035: LD_VAR 0 14
51039: PUSH
51040: LD_VAR 0 9
51044: ARRAY
51045: PUSH
51046: LD_INT 2
51048: ARRAY
51049: PPUSH
51050: CALL_OW 428
51054: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51055: LD_VAR 0 14
51059: PUSH
51060: LD_VAR 0 9
51064: ARRAY
51065: PUSH
51066: LD_INT 1
51068: ARRAY
51069: PPUSH
51070: LD_VAR 0 14
51074: PUSH
51075: LD_VAR 0 9
51079: ARRAY
51080: PUSH
51081: LD_INT 2
51083: ARRAY
51084: PPUSH
51085: CALL_OW 351
51089: PUSH
51090: LD_VAR 0 14
51094: PUSH
51095: LD_VAR 0 9
51099: ARRAY
51100: PUSH
51101: LD_INT 1
51103: ARRAY
51104: PPUSH
51105: LD_VAR 0 14
51109: PUSH
51110: LD_VAR 0 9
51114: ARRAY
51115: PUSH
51116: LD_INT 2
51118: ARRAY
51119: PPUSH
51120: CALL_OW 488
51124: NOT
51125: OR
51126: PUSH
51127: LD_VAR 0 13
51131: PPUSH
51132: CALL_OW 247
51136: PUSH
51137: LD_INT 3
51139: EQUAL
51140: OR
51141: IFFALSE 51147
// exit ;
51143: POP
51144: POP
51145: GO 51691
// if not tmp then
51147: LD_VAR 0 13
51151: NOT
51152: IFFALSE 51156
// continue ;
51154: GO 51012
// result := true ;
51156: LD_ADDR_VAR 0 8
51160: PUSH
51161: LD_INT 1
51163: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51164: LD_VAR 0 6
51168: PUSH
51169: LD_VAR 0 13
51173: PPUSH
51174: CALL_OW 247
51178: PUSH
51179: LD_INT 2
51181: EQUAL
51182: AND
51183: PUSH
51184: LD_VAR 0 13
51188: PPUSH
51189: CALL_OW 263
51193: PUSH
51194: LD_INT 1
51196: EQUAL
51197: AND
51198: IFFALSE 51362
// begin if IsDrivenBy ( tmp ) then
51200: LD_VAR 0 13
51204: PPUSH
51205: CALL_OW 311
51209: IFFALSE 51213
// continue ;
51211: GO 51012
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51213: LD_VAR 0 6
51217: PPUSH
51218: LD_INT 3
51220: PUSH
51221: LD_INT 60
51223: PUSH
51224: EMPTY
51225: LIST
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 3
51233: PUSH
51234: LD_INT 55
51236: PUSH
51237: EMPTY
51238: LIST
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PPUSH
51248: CALL_OW 72
51252: IFFALSE 51360
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51254: LD_ADDR_VAR 0 18
51258: PUSH
51259: LD_VAR 0 6
51263: PPUSH
51264: LD_INT 3
51266: PUSH
51267: LD_INT 60
51269: PUSH
51270: EMPTY
51271: LIST
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 3
51279: PUSH
51280: LD_INT 55
51282: PUSH
51283: EMPTY
51284: LIST
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PPUSH
51294: CALL_OW 72
51298: PUSH
51299: LD_INT 1
51301: ARRAY
51302: ST_TO_ADDR
// if IsInUnit ( driver ) then
51303: LD_VAR 0 18
51307: PPUSH
51308: CALL_OW 310
51312: IFFALSE 51323
// ComExit ( driver ) ;
51314: LD_VAR 0 18
51318: PPUSH
51319: CALL 76612 0 1
// AddComEnterUnit ( driver , tmp ) ;
51323: LD_VAR 0 18
51327: PPUSH
51328: LD_VAR 0 13
51332: PPUSH
51333: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51337: LD_VAR 0 18
51341: PPUSH
51342: LD_VAR 0 7
51346: PPUSH
51347: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51351: LD_VAR 0 18
51355: PPUSH
51356: CALL_OW 181
// end ; continue ;
51360: GO 51012
// end ; if not cleaners or not tmp in cleaners then
51362: LD_VAR 0 6
51366: NOT
51367: PUSH
51368: LD_VAR 0 13
51372: PUSH
51373: LD_VAR 0 6
51377: IN
51378: NOT
51379: OR
51380: IFFALSE 51687
// begin if dep then
51382: LD_VAR 0 17
51386: IFFALSE 51522
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51388: LD_ADDR_VAR 0 16
51392: PUSH
51393: LD_VAR 0 17
51397: PUSH
51398: LD_INT 1
51400: ARRAY
51401: PPUSH
51402: CALL_OW 250
51406: PPUSH
51407: LD_VAR 0 17
51411: PUSH
51412: LD_INT 1
51414: ARRAY
51415: PPUSH
51416: CALL_OW 254
51420: PPUSH
51421: LD_INT 5
51423: PPUSH
51424: CALL_OW 272
51428: PUSH
51429: LD_VAR 0 17
51433: PUSH
51434: LD_INT 1
51436: ARRAY
51437: PPUSH
51438: CALL_OW 251
51442: PPUSH
51443: LD_VAR 0 17
51447: PUSH
51448: LD_INT 1
51450: ARRAY
51451: PPUSH
51452: CALL_OW 254
51456: PPUSH
51457: LD_INT 5
51459: PPUSH
51460: CALL_OW 273
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51469: LD_VAR 0 16
51473: PUSH
51474: LD_INT 1
51476: ARRAY
51477: PPUSH
51478: LD_VAR 0 16
51482: PUSH
51483: LD_INT 2
51485: ARRAY
51486: PPUSH
51487: CALL_OW 488
51491: IFFALSE 51522
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51493: LD_VAR 0 13
51497: PPUSH
51498: LD_VAR 0 16
51502: PUSH
51503: LD_INT 1
51505: ARRAY
51506: PPUSH
51507: LD_VAR 0 16
51511: PUSH
51512: LD_INT 2
51514: ARRAY
51515: PPUSH
51516: CALL_OW 111
// continue ;
51520: GO 51012
// end ; end ; r := GetDir ( tmp ) ;
51522: LD_ADDR_VAR 0 15
51526: PUSH
51527: LD_VAR 0 13
51531: PPUSH
51532: CALL_OW 254
51536: ST_TO_ADDR
// if r = 5 then
51537: LD_VAR 0 15
51541: PUSH
51542: LD_INT 5
51544: EQUAL
51545: IFFALSE 51555
// r := 0 ;
51547: LD_ADDR_VAR 0 15
51551: PUSH
51552: LD_INT 0
51554: ST_TO_ADDR
// for j = r to 5 do
51555: LD_ADDR_VAR 0 10
51559: PUSH
51560: DOUBLE
51561: LD_VAR 0 15
51565: DEC
51566: ST_TO_ADDR
51567: LD_INT 5
51569: PUSH
51570: FOR_TO
51571: IFFALSE 51685
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51573: LD_ADDR_VAR 0 11
51577: PUSH
51578: LD_VAR 0 13
51582: PPUSH
51583: CALL_OW 250
51587: PPUSH
51588: LD_VAR 0 10
51592: PPUSH
51593: LD_INT 2
51595: PPUSH
51596: CALL_OW 272
51600: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51601: LD_ADDR_VAR 0 12
51605: PUSH
51606: LD_VAR 0 13
51610: PPUSH
51611: CALL_OW 251
51615: PPUSH
51616: LD_VAR 0 10
51620: PPUSH
51621: LD_INT 2
51623: PPUSH
51624: CALL_OW 273
51628: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51629: LD_VAR 0 11
51633: PPUSH
51634: LD_VAR 0 12
51638: PPUSH
51639: CALL_OW 488
51643: PUSH
51644: LD_VAR 0 11
51648: PPUSH
51649: LD_VAR 0 12
51653: PPUSH
51654: CALL_OW 428
51658: NOT
51659: AND
51660: IFFALSE 51683
// begin ComMoveXY ( tmp , _x , _y ) ;
51662: LD_VAR 0 13
51666: PPUSH
51667: LD_VAR 0 11
51671: PPUSH
51672: LD_VAR 0 12
51676: PPUSH
51677: CALL_OW 111
// break ;
51681: GO 51685
// end ; end ;
51683: GO 51570
51685: POP
51686: POP
// end ; end ;
51687: GO 51012
51689: POP
51690: POP
// end ;
51691: LD_VAR 0 8
51695: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51696: LD_INT 0
51698: PPUSH
// result := true ;
51699: LD_ADDR_VAR 0 3
51703: PUSH
51704: LD_INT 1
51706: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51707: LD_VAR 0 2
51711: PUSH
51712: LD_INT 24
51714: DOUBLE
51715: EQUAL
51716: IFTRUE 51726
51718: LD_INT 33
51720: DOUBLE
51721: EQUAL
51722: IFTRUE 51726
51724: GO 51751
51726: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51727: LD_ADDR_VAR 0 3
51731: PUSH
51732: LD_INT 32
51734: PPUSH
51735: LD_VAR 0 1
51739: PPUSH
51740: CALL_OW 321
51744: PUSH
51745: LD_INT 2
51747: EQUAL
51748: ST_TO_ADDR
51749: GO 52067
51751: LD_INT 20
51753: DOUBLE
51754: EQUAL
51755: IFTRUE 51759
51757: GO 51784
51759: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51760: LD_ADDR_VAR 0 3
51764: PUSH
51765: LD_INT 6
51767: PPUSH
51768: LD_VAR 0 1
51772: PPUSH
51773: CALL_OW 321
51777: PUSH
51778: LD_INT 2
51780: EQUAL
51781: ST_TO_ADDR
51782: GO 52067
51784: LD_INT 22
51786: DOUBLE
51787: EQUAL
51788: IFTRUE 51798
51790: LD_INT 36
51792: DOUBLE
51793: EQUAL
51794: IFTRUE 51798
51796: GO 51823
51798: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51799: LD_ADDR_VAR 0 3
51803: PUSH
51804: LD_INT 15
51806: PPUSH
51807: LD_VAR 0 1
51811: PPUSH
51812: CALL_OW 321
51816: PUSH
51817: LD_INT 2
51819: EQUAL
51820: ST_TO_ADDR
51821: GO 52067
51823: LD_INT 30
51825: DOUBLE
51826: EQUAL
51827: IFTRUE 51831
51829: GO 51856
51831: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51832: LD_ADDR_VAR 0 3
51836: PUSH
51837: LD_INT 20
51839: PPUSH
51840: LD_VAR 0 1
51844: PPUSH
51845: CALL_OW 321
51849: PUSH
51850: LD_INT 2
51852: EQUAL
51853: ST_TO_ADDR
51854: GO 52067
51856: LD_INT 28
51858: DOUBLE
51859: EQUAL
51860: IFTRUE 51870
51862: LD_INT 21
51864: DOUBLE
51865: EQUAL
51866: IFTRUE 51870
51868: GO 51895
51870: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51871: LD_ADDR_VAR 0 3
51875: PUSH
51876: LD_INT 21
51878: PPUSH
51879: LD_VAR 0 1
51883: PPUSH
51884: CALL_OW 321
51888: PUSH
51889: LD_INT 2
51891: EQUAL
51892: ST_TO_ADDR
51893: GO 52067
51895: LD_INT 16
51897: DOUBLE
51898: EQUAL
51899: IFTRUE 51903
51901: GO 51928
51903: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51904: LD_ADDR_VAR 0 3
51908: PUSH
51909: LD_INT 84
51911: PPUSH
51912: LD_VAR 0 1
51916: PPUSH
51917: CALL_OW 321
51921: PUSH
51922: LD_INT 2
51924: EQUAL
51925: ST_TO_ADDR
51926: GO 52067
51928: LD_INT 19
51930: DOUBLE
51931: EQUAL
51932: IFTRUE 51942
51934: LD_INT 23
51936: DOUBLE
51937: EQUAL
51938: IFTRUE 51942
51940: GO 51967
51942: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51943: LD_ADDR_VAR 0 3
51947: PUSH
51948: LD_INT 83
51950: PPUSH
51951: LD_VAR 0 1
51955: PPUSH
51956: CALL_OW 321
51960: PUSH
51961: LD_INT 2
51963: EQUAL
51964: ST_TO_ADDR
51965: GO 52067
51967: LD_INT 17
51969: DOUBLE
51970: EQUAL
51971: IFTRUE 51975
51973: GO 52000
51975: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51976: LD_ADDR_VAR 0 3
51980: PUSH
51981: LD_INT 39
51983: PPUSH
51984: LD_VAR 0 1
51988: PPUSH
51989: CALL_OW 321
51993: PUSH
51994: LD_INT 2
51996: EQUAL
51997: ST_TO_ADDR
51998: GO 52067
52000: LD_INT 18
52002: DOUBLE
52003: EQUAL
52004: IFTRUE 52008
52006: GO 52033
52008: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52009: LD_ADDR_VAR 0 3
52013: PUSH
52014: LD_INT 40
52016: PPUSH
52017: LD_VAR 0 1
52021: PPUSH
52022: CALL_OW 321
52026: PUSH
52027: LD_INT 2
52029: EQUAL
52030: ST_TO_ADDR
52031: GO 52067
52033: LD_INT 27
52035: DOUBLE
52036: EQUAL
52037: IFTRUE 52041
52039: GO 52066
52041: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52042: LD_ADDR_VAR 0 3
52046: PUSH
52047: LD_INT 35
52049: PPUSH
52050: LD_VAR 0 1
52054: PPUSH
52055: CALL_OW 321
52059: PUSH
52060: LD_INT 2
52062: EQUAL
52063: ST_TO_ADDR
52064: GO 52067
52066: POP
// end ;
52067: LD_VAR 0 3
52071: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52072: LD_INT 0
52074: PPUSH
52075: PPUSH
52076: PPUSH
52077: PPUSH
52078: PPUSH
52079: PPUSH
52080: PPUSH
52081: PPUSH
52082: PPUSH
52083: PPUSH
52084: PPUSH
// result := false ;
52085: LD_ADDR_VAR 0 6
52089: PUSH
52090: LD_INT 0
52092: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52093: LD_VAR 0 1
52097: NOT
52098: PUSH
52099: LD_VAR 0 1
52103: PPUSH
52104: CALL_OW 266
52108: PUSH
52109: LD_INT 0
52111: PUSH
52112: LD_INT 1
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: IN
52119: NOT
52120: OR
52121: PUSH
52122: LD_VAR 0 2
52126: NOT
52127: OR
52128: PUSH
52129: LD_VAR 0 5
52133: PUSH
52134: LD_INT 0
52136: PUSH
52137: LD_INT 1
52139: PUSH
52140: LD_INT 2
52142: PUSH
52143: LD_INT 3
52145: PUSH
52146: LD_INT 4
52148: PUSH
52149: LD_INT 5
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: IN
52160: NOT
52161: OR
52162: PUSH
52163: LD_VAR 0 3
52167: PPUSH
52168: LD_VAR 0 4
52172: PPUSH
52173: CALL_OW 488
52177: NOT
52178: OR
52179: IFFALSE 52183
// exit ;
52181: GO 52919
// side := GetSide ( depot ) ;
52183: LD_ADDR_VAR 0 9
52187: PUSH
52188: LD_VAR 0 1
52192: PPUSH
52193: CALL_OW 255
52197: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52198: LD_VAR 0 9
52202: PPUSH
52203: LD_VAR 0 2
52207: PPUSH
52208: CALL 51696 0 2
52212: NOT
52213: IFFALSE 52217
// exit ;
52215: GO 52919
// pom := GetBase ( depot ) ;
52217: LD_ADDR_VAR 0 10
52221: PUSH
52222: LD_VAR 0 1
52226: PPUSH
52227: CALL_OW 274
52231: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52232: LD_ADDR_VAR 0 11
52236: PUSH
52237: LD_VAR 0 2
52241: PPUSH
52242: LD_VAR 0 1
52246: PPUSH
52247: CALL_OW 248
52251: PPUSH
52252: CALL_OW 450
52256: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52257: LD_VAR 0 10
52261: PPUSH
52262: LD_INT 1
52264: PPUSH
52265: CALL_OW 275
52269: PUSH
52270: LD_VAR 0 11
52274: PUSH
52275: LD_INT 1
52277: ARRAY
52278: GREATEREQUAL
52279: PUSH
52280: LD_VAR 0 10
52284: PPUSH
52285: LD_INT 2
52287: PPUSH
52288: CALL_OW 275
52292: PUSH
52293: LD_VAR 0 11
52297: PUSH
52298: LD_INT 2
52300: ARRAY
52301: GREATEREQUAL
52302: AND
52303: PUSH
52304: LD_VAR 0 10
52308: PPUSH
52309: LD_INT 3
52311: PPUSH
52312: CALL_OW 275
52316: PUSH
52317: LD_VAR 0 11
52321: PUSH
52322: LD_INT 3
52324: ARRAY
52325: GREATEREQUAL
52326: AND
52327: NOT
52328: IFFALSE 52332
// exit ;
52330: GO 52919
// if GetBType ( depot ) = b_depot then
52332: LD_VAR 0 1
52336: PPUSH
52337: CALL_OW 266
52341: PUSH
52342: LD_INT 0
52344: EQUAL
52345: IFFALSE 52357
// dist := 28 else
52347: LD_ADDR_VAR 0 14
52351: PUSH
52352: LD_INT 28
52354: ST_TO_ADDR
52355: GO 52365
// dist := 36 ;
52357: LD_ADDR_VAR 0 14
52361: PUSH
52362: LD_INT 36
52364: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52365: LD_VAR 0 1
52369: PPUSH
52370: LD_VAR 0 3
52374: PPUSH
52375: LD_VAR 0 4
52379: PPUSH
52380: CALL_OW 297
52384: PUSH
52385: LD_VAR 0 14
52389: GREATER
52390: IFFALSE 52394
// exit ;
52392: GO 52919
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52394: LD_ADDR_VAR 0 12
52398: PUSH
52399: LD_VAR 0 2
52403: PPUSH
52404: LD_VAR 0 3
52408: PPUSH
52409: LD_VAR 0 4
52413: PPUSH
52414: LD_VAR 0 5
52418: PPUSH
52419: LD_VAR 0 1
52423: PPUSH
52424: CALL_OW 248
52428: PPUSH
52429: LD_INT 0
52431: PPUSH
52432: CALL 52924 0 6
52436: ST_TO_ADDR
// if not hexes then
52437: LD_VAR 0 12
52441: NOT
52442: IFFALSE 52446
// exit ;
52444: GO 52919
// hex := GetHexInfo ( x , y ) ;
52446: LD_ADDR_VAR 0 15
52450: PUSH
52451: LD_VAR 0 3
52455: PPUSH
52456: LD_VAR 0 4
52460: PPUSH
52461: CALL_OW 546
52465: ST_TO_ADDR
// if hex [ 1 ] then
52466: LD_VAR 0 15
52470: PUSH
52471: LD_INT 1
52473: ARRAY
52474: IFFALSE 52478
// exit ;
52476: GO 52919
// height := hex [ 2 ] ;
52478: LD_ADDR_VAR 0 13
52482: PUSH
52483: LD_VAR 0 15
52487: PUSH
52488: LD_INT 2
52490: ARRAY
52491: ST_TO_ADDR
// for i = 1 to hexes do
52492: LD_ADDR_VAR 0 7
52496: PUSH
52497: DOUBLE
52498: LD_INT 1
52500: DEC
52501: ST_TO_ADDR
52502: LD_VAR 0 12
52506: PUSH
52507: FOR_TO
52508: IFFALSE 52838
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52510: LD_VAR 0 12
52514: PUSH
52515: LD_VAR 0 7
52519: ARRAY
52520: PUSH
52521: LD_INT 1
52523: ARRAY
52524: PPUSH
52525: LD_VAR 0 12
52529: PUSH
52530: LD_VAR 0 7
52534: ARRAY
52535: PUSH
52536: LD_INT 2
52538: ARRAY
52539: PPUSH
52540: CALL_OW 488
52544: NOT
52545: PUSH
52546: LD_VAR 0 12
52550: PUSH
52551: LD_VAR 0 7
52555: ARRAY
52556: PUSH
52557: LD_INT 1
52559: ARRAY
52560: PPUSH
52561: LD_VAR 0 12
52565: PUSH
52566: LD_VAR 0 7
52570: ARRAY
52571: PUSH
52572: LD_INT 2
52574: ARRAY
52575: PPUSH
52576: CALL_OW 428
52580: PUSH
52581: LD_INT 0
52583: GREATER
52584: OR
52585: PUSH
52586: LD_VAR 0 12
52590: PUSH
52591: LD_VAR 0 7
52595: ARRAY
52596: PUSH
52597: LD_INT 1
52599: ARRAY
52600: PPUSH
52601: LD_VAR 0 12
52605: PUSH
52606: LD_VAR 0 7
52610: ARRAY
52611: PUSH
52612: LD_INT 2
52614: ARRAY
52615: PPUSH
52616: CALL_OW 351
52620: OR
52621: IFFALSE 52627
// exit ;
52623: POP
52624: POP
52625: GO 52919
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52627: LD_ADDR_VAR 0 8
52631: PUSH
52632: LD_VAR 0 12
52636: PUSH
52637: LD_VAR 0 7
52641: ARRAY
52642: PUSH
52643: LD_INT 1
52645: ARRAY
52646: PPUSH
52647: LD_VAR 0 12
52651: PUSH
52652: LD_VAR 0 7
52656: ARRAY
52657: PUSH
52658: LD_INT 2
52660: ARRAY
52661: PPUSH
52662: CALL_OW 546
52666: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52667: LD_VAR 0 8
52671: PUSH
52672: LD_INT 1
52674: ARRAY
52675: PUSH
52676: LD_VAR 0 8
52680: PUSH
52681: LD_INT 2
52683: ARRAY
52684: PUSH
52685: LD_VAR 0 13
52689: PUSH
52690: LD_INT 2
52692: PLUS
52693: GREATER
52694: OR
52695: PUSH
52696: LD_VAR 0 8
52700: PUSH
52701: LD_INT 2
52703: ARRAY
52704: PUSH
52705: LD_VAR 0 13
52709: PUSH
52710: LD_INT 2
52712: MINUS
52713: LESS
52714: OR
52715: PUSH
52716: LD_VAR 0 8
52720: PUSH
52721: LD_INT 3
52723: ARRAY
52724: PUSH
52725: LD_INT 0
52727: PUSH
52728: LD_INT 8
52730: PUSH
52731: LD_INT 9
52733: PUSH
52734: LD_INT 10
52736: PUSH
52737: LD_INT 11
52739: PUSH
52740: LD_INT 12
52742: PUSH
52743: LD_INT 13
52745: PUSH
52746: LD_INT 16
52748: PUSH
52749: LD_INT 17
52751: PUSH
52752: LD_INT 18
52754: PUSH
52755: LD_INT 19
52757: PUSH
52758: LD_INT 20
52760: PUSH
52761: LD_INT 21
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: IN
52779: NOT
52780: OR
52781: PUSH
52782: LD_VAR 0 8
52786: PUSH
52787: LD_INT 5
52789: ARRAY
52790: NOT
52791: OR
52792: PUSH
52793: LD_VAR 0 8
52797: PUSH
52798: LD_INT 6
52800: ARRAY
52801: PUSH
52802: LD_INT 1
52804: PUSH
52805: LD_INT 2
52807: PUSH
52808: LD_INT 7
52810: PUSH
52811: LD_INT 9
52813: PUSH
52814: LD_INT 10
52816: PUSH
52817: LD_INT 11
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: IN
52828: NOT
52829: OR
52830: IFFALSE 52836
// exit ;
52832: POP
52833: POP
52834: GO 52919
// end ;
52836: GO 52507
52838: POP
52839: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52840: LD_VAR 0 9
52844: PPUSH
52845: LD_VAR 0 3
52849: PPUSH
52850: LD_VAR 0 4
52854: PPUSH
52855: LD_INT 20
52857: PPUSH
52858: CALL 44871 0 4
52862: PUSH
52863: LD_INT 4
52865: ARRAY
52866: IFFALSE 52870
// exit ;
52868: GO 52919
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52870: LD_VAR 0 2
52874: PUSH
52875: LD_INT 29
52877: PUSH
52878: LD_INT 30
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: IN
52885: PUSH
52886: LD_VAR 0 3
52890: PPUSH
52891: LD_VAR 0 4
52895: PPUSH
52896: LD_VAR 0 9
52900: PPUSH
52901: CALL_OW 440
52905: NOT
52906: AND
52907: IFFALSE 52911
// exit ;
52909: GO 52919
// result := true ;
52911: LD_ADDR_VAR 0 6
52915: PUSH
52916: LD_INT 1
52918: ST_TO_ADDR
// end ;
52919: LD_VAR 0 6
52923: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52924: LD_INT 0
52926: PPUSH
52927: PPUSH
52928: PPUSH
52929: PPUSH
52930: PPUSH
52931: PPUSH
52932: PPUSH
52933: PPUSH
52934: PPUSH
52935: PPUSH
52936: PPUSH
52937: PPUSH
52938: PPUSH
52939: PPUSH
52940: PPUSH
52941: PPUSH
52942: PPUSH
52943: PPUSH
52944: PPUSH
52945: PPUSH
52946: PPUSH
52947: PPUSH
52948: PPUSH
52949: PPUSH
52950: PPUSH
52951: PPUSH
52952: PPUSH
52953: PPUSH
52954: PPUSH
52955: PPUSH
52956: PPUSH
52957: PPUSH
52958: PPUSH
52959: PPUSH
52960: PPUSH
52961: PPUSH
52962: PPUSH
52963: PPUSH
52964: PPUSH
52965: PPUSH
52966: PPUSH
52967: PPUSH
52968: PPUSH
52969: PPUSH
52970: PPUSH
52971: PPUSH
52972: PPUSH
52973: PPUSH
52974: PPUSH
52975: PPUSH
52976: PPUSH
52977: PPUSH
52978: PPUSH
52979: PPUSH
52980: PPUSH
52981: PPUSH
52982: PPUSH
52983: PPUSH
// result = [ ] ;
52984: LD_ADDR_VAR 0 7
52988: PUSH
52989: EMPTY
52990: ST_TO_ADDR
// temp_list = [ ] ;
52991: LD_ADDR_VAR 0 9
52995: PUSH
52996: EMPTY
52997: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52998: LD_VAR 0 4
53002: PUSH
53003: LD_INT 0
53005: PUSH
53006: LD_INT 1
53008: PUSH
53009: LD_INT 2
53011: PUSH
53012: LD_INT 3
53014: PUSH
53015: LD_INT 4
53017: PUSH
53018: LD_INT 5
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: IN
53029: NOT
53030: PUSH
53031: LD_VAR 0 1
53035: PUSH
53036: LD_INT 0
53038: PUSH
53039: LD_INT 1
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: IN
53046: PUSH
53047: LD_VAR 0 5
53051: PUSH
53052: LD_INT 1
53054: PUSH
53055: LD_INT 2
53057: PUSH
53058: LD_INT 3
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: LIST
53065: IN
53066: NOT
53067: AND
53068: OR
53069: IFFALSE 53073
// exit ;
53071: GO 71464
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53073: LD_VAR 0 1
53077: PUSH
53078: LD_INT 6
53080: PUSH
53081: LD_INT 7
53083: PUSH
53084: LD_INT 8
53086: PUSH
53087: LD_INT 13
53089: PUSH
53090: LD_INT 12
53092: PUSH
53093: LD_INT 15
53095: PUSH
53096: LD_INT 11
53098: PUSH
53099: LD_INT 14
53101: PUSH
53102: LD_INT 10
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: IN
53116: IFFALSE 53126
// btype = b_lab ;
53118: LD_ADDR_VAR 0 1
53122: PUSH
53123: LD_INT 6
53125: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53126: LD_VAR 0 6
53130: PUSH
53131: LD_INT 0
53133: PUSH
53134: LD_INT 1
53136: PUSH
53137: LD_INT 2
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: LIST
53144: IN
53145: NOT
53146: PUSH
53147: LD_VAR 0 1
53151: PUSH
53152: LD_INT 0
53154: PUSH
53155: LD_INT 1
53157: PUSH
53158: LD_INT 2
53160: PUSH
53161: LD_INT 3
53163: PUSH
53164: LD_INT 6
53166: PUSH
53167: LD_INT 36
53169: PUSH
53170: LD_INT 4
53172: PUSH
53173: LD_INT 5
53175: PUSH
53176: LD_INT 31
53178: PUSH
53179: LD_INT 32
53181: PUSH
53182: LD_INT 33
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: IN
53198: NOT
53199: PUSH
53200: LD_VAR 0 6
53204: PUSH
53205: LD_INT 1
53207: EQUAL
53208: AND
53209: OR
53210: PUSH
53211: LD_VAR 0 1
53215: PUSH
53216: LD_INT 2
53218: PUSH
53219: LD_INT 3
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: IN
53226: NOT
53227: PUSH
53228: LD_VAR 0 6
53232: PUSH
53233: LD_INT 2
53235: EQUAL
53236: AND
53237: OR
53238: IFFALSE 53248
// mode = 0 ;
53240: LD_ADDR_VAR 0 6
53244: PUSH
53245: LD_INT 0
53247: ST_TO_ADDR
// case mode of 0 :
53248: LD_VAR 0 6
53252: PUSH
53253: LD_INT 0
53255: DOUBLE
53256: EQUAL
53257: IFTRUE 53261
53259: GO 64714
53261: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53262: LD_ADDR_VAR 0 11
53266: PUSH
53267: LD_INT 0
53269: PUSH
53270: LD_INT 0
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 0
53279: PUSH
53280: LD_INT 1
53282: NEG
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 1
53290: PUSH
53291: LD_INT 0
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 1
53300: PUSH
53301: LD_INT 1
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 0
53310: PUSH
53311: LD_INT 1
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 1
53320: NEG
53321: PUSH
53322: LD_INT 0
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 1
53331: NEG
53332: PUSH
53333: LD_INT 1
53335: NEG
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 1
53343: NEG
53344: PUSH
53345: LD_INT 2
53347: NEG
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 0
53355: PUSH
53356: LD_INT 2
53358: NEG
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 1
53366: PUSH
53367: LD_INT 1
53369: NEG
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 1
53377: PUSH
53378: LD_INT 2
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 0
53387: PUSH
53388: LD_INT 2
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 1
53397: NEG
53398: PUSH
53399: LD_INT 1
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 1
53408: PUSH
53409: LD_INT 3
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 0
53418: PUSH
53419: LD_INT 3
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 1
53428: NEG
53429: PUSH
53430: LD_INT 2
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53455: LD_ADDR_VAR 0 12
53459: PUSH
53460: LD_INT 0
53462: PUSH
53463: LD_INT 0
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 0
53472: PUSH
53473: LD_INT 1
53475: NEG
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 1
53483: PUSH
53484: LD_INT 0
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 1
53493: PUSH
53494: LD_INT 1
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 0
53503: PUSH
53504: LD_INT 1
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 1
53513: NEG
53514: PUSH
53515: LD_INT 0
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 1
53524: NEG
53525: PUSH
53526: LD_INT 1
53528: NEG
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 1
53536: PUSH
53537: LD_INT 1
53539: NEG
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 2
53547: PUSH
53548: LD_INT 0
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 2
53557: PUSH
53558: LD_INT 1
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 1
53567: NEG
53568: PUSH
53569: LD_INT 1
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 2
53578: NEG
53579: PUSH
53580: LD_INT 0
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 2
53589: NEG
53590: PUSH
53591: LD_INT 1
53593: NEG
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 2
53601: NEG
53602: PUSH
53603: LD_INT 1
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 3
53612: NEG
53613: PUSH
53614: LD_INT 0
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 3
53623: NEG
53624: PUSH
53625: LD_INT 1
53627: NEG
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53651: LD_ADDR_VAR 0 13
53655: PUSH
53656: LD_INT 0
53658: PUSH
53659: LD_INT 0
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 0
53668: PUSH
53669: LD_INT 1
53671: NEG
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 1
53679: PUSH
53680: LD_INT 0
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 1
53689: PUSH
53690: LD_INT 1
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 0
53699: PUSH
53700: LD_INT 1
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 1
53709: NEG
53710: PUSH
53711: LD_INT 0
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 1
53720: NEG
53721: PUSH
53722: LD_INT 1
53724: NEG
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 1
53732: NEG
53733: PUSH
53734: LD_INT 2
53736: NEG
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 2
53744: PUSH
53745: LD_INT 1
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 2
53754: PUSH
53755: LD_INT 2
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 1
53764: PUSH
53765: LD_INT 2
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 2
53774: NEG
53775: PUSH
53776: LD_INT 1
53778: NEG
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 2
53786: NEG
53787: PUSH
53788: LD_INT 2
53790: NEG
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 2
53798: NEG
53799: PUSH
53800: LD_INT 3
53802: NEG
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 3
53810: NEG
53811: PUSH
53812: LD_INT 2
53814: NEG
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 3
53822: NEG
53823: PUSH
53824: LD_INT 3
53826: NEG
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53850: LD_ADDR_VAR 0 14
53854: PUSH
53855: LD_INT 0
53857: PUSH
53858: LD_INT 0
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 0
53867: PUSH
53868: LD_INT 1
53870: NEG
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 1
53878: PUSH
53879: LD_INT 0
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 1
53888: PUSH
53889: LD_INT 1
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 0
53898: PUSH
53899: LD_INT 1
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 1
53908: NEG
53909: PUSH
53910: LD_INT 0
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 1
53919: NEG
53920: PUSH
53921: LD_INT 1
53923: NEG
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 1
53931: NEG
53932: PUSH
53933: LD_INT 2
53935: NEG
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 0
53943: PUSH
53944: LD_INT 2
53946: NEG
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 1
53954: PUSH
53955: LD_INT 1
53957: NEG
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 1
53965: PUSH
53966: LD_INT 2
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 0
53975: PUSH
53976: LD_INT 2
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 1
53985: NEG
53986: PUSH
53987: LD_INT 1
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 1
53996: NEG
53997: PUSH
53998: LD_INT 3
54000: NEG
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 0
54008: PUSH
54009: LD_INT 3
54011: NEG
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 1
54019: PUSH
54020: LD_INT 2
54022: NEG
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54046: LD_ADDR_VAR 0 15
54050: PUSH
54051: LD_INT 0
54053: PUSH
54054: LD_INT 0
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 0
54063: PUSH
54064: LD_INT 1
54066: NEG
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 1
54074: PUSH
54075: LD_INT 0
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 1
54084: PUSH
54085: LD_INT 1
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 0
54094: PUSH
54095: LD_INT 1
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 1
54104: NEG
54105: PUSH
54106: LD_INT 0
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 1
54115: NEG
54116: PUSH
54117: LD_INT 1
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 1
54127: PUSH
54128: LD_INT 1
54130: NEG
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 2
54138: PUSH
54139: LD_INT 0
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 2
54148: PUSH
54149: LD_INT 1
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 1
54158: NEG
54159: PUSH
54160: LD_INT 1
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 2
54169: NEG
54170: PUSH
54171: LD_INT 0
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 2
54180: NEG
54181: PUSH
54182: LD_INT 1
54184: NEG
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 2
54192: PUSH
54193: LD_INT 1
54195: NEG
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 3
54203: PUSH
54204: LD_INT 0
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 3
54213: PUSH
54214: LD_INT 1
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54239: LD_ADDR_VAR 0 16
54243: PUSH
54244: LD_INT 0
54246: PUSH
54247: LD_INT 0
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 0
54256: PUSH
54257: LD_INT 1
54259: NEG
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 1
54267: PUSH
54268: LD_INT 0
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 1
54277: PUSH
54278: LD_INT 1
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 0
54287: PUSH
54288: LD_INT 1
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 1
54297: NEG
54298: PUSH
54299: LD_INT 0
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 1
54308: NEG
54309: PUSH
54310: LD_INT 1
54312: NEG
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 1
54320: NEG
54321: PUSH
54322: LD_INT 2
54324: NEG
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 2
54332: PUSH
54333: LD_INT 1
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 2
54342: PUSH
54343: LD_INT 2
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 1
54352: PUSH
54353: LD_INT 2
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 2
54362: NEG
54363: PUSH
54364: LD_INT 1
54366: NEG
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 2
54374: NEG
54375: PUSH
54376: LD_INT 2
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 3
54386: PUSH
54387: LD_INT 2
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 3
54396: PUSH
54397: LD_INT 3
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 2
54406: PUSH
54407: LD_INT 3
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54432: LD_ADDR_VAR 0 17
54436: PUSH
54437: LD_INT 0
54439: PUSH
54440: LD_INT 0
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 0
54449: PUSH
54450: LD_INT 1
54452: NEG
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 1
54460: PUSH
54461: LD_INT 0
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 1
54470: PUSH
54471: LD_INT 1
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 0
54480: PUSH
54481: LD_INT 1
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 1
54490: NEG
54491: PUSH
54492: LD_INT 0
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 1
54501: NEG
54502: PUSH
54503: LD_INT 1
54505: NEG
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 1
54513: NEG
54514: PUSH
54515: LD_INT 2
54517: NEG
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 0
54525: PUSH
54526: LD_INT 2
54528: NEG
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 1
54536: PUSH
54537: LD_INT 1
54539: NEG
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 2
54547: PUSH
54548: LD_INT 0
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 2
54557: PUSH
54558: LD_INT 1
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 2
54567: PUSH
54568: LD_INT 2
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 1
54577: PUSH
54578: LD_INT 2
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 0
54587: PUSH
54588: LD_INT 2
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 1
54597: NEG
54598: PUSH
54599: LD_INT 1
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 2
54608: NEG
54609: PUSH
54610: LD_INT 0
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 2
54619: NEG
54620: PUSH
54621: LD_INT 1
54623: NEG
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 2
54631: NEG
54632: PUSH
54633: LD_INT 2
54635: NEG
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54662: LD_ADDR_VAR 0 18
54666: PUSH
54667: LD_INT 0
54669: PUSH
54670: LD_INT 0
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 0
54679: PUSH
54680: LD_INT 1
54682: NEG
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 1
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 1
54700: PUSH
54701: LD_INT 1
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 0
54710: PUSH
54711: LD_INT 1
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 1
54720: NEG
54721: PUSH
54722: LD_INT 0
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 1
54731: NEG
54732: PUSH
54733: LD_INT 1
54735: NEG
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 1
54743: NEG
54744: PUSH
54745: LD_INT 2
54747: NEG
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 0
54755: PUSH
54756: LD_INT 2
54758: NEG
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 1
54766: PUSH
54767: LD_INT 1
54769: NEG
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 2
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 2
54787: PUSH
54788: LD_INT 1
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 2
54797: PUSH
54798: LD_INT 2
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 1
54807: PUSH
54808: LD_INT 2
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 0
54817: PUSH
54818: LD_INT 2
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 1
54827: NEG
54828: PUSH
54829: LD_INT 1
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 2
54838: NEG
54839: PUSH
54840: LD_INT 0
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 2
54849: NEG
54850: PUSH
54851: LD_INT 1
54853: NEG
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 2
54861: NEG
54862: PUSH
54863: LD_INT 2
54865: NEG
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54892: LD_ADDR_VAR 0 19
54896: PUSH
54897: LD_INT 0
54899: PUSH
54900: LD_INT 0
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 0
54909: PUSH
54910: LD_INT 1
54912: NEG
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 1
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 1
54930: PUSH
54931: LD_INT 1
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 0
54940: PUSH
54941: LD_INT 1
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 1
54950: NEG
54951: PUSH
54952: LD_INT 0
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 1
54961: NEG
54962: PUSH
54963: LD_INT 1
54965: NEG
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 1
54973: NEG
54974: PUSH
54975: LD_INT 2
54977: NEG
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 0
54985: PUSH
54986: LD_INT 2
54988: NEG
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 1
54996: PUSH
54997: LD_INT 1
54999: NEG
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 2
55007: PUSH
55008: LD_INT 0
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 2
55017: PUSH
55018: LD_INT 1
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 2
55027: PUSH
55028: LD_INT 2
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 1
55037: PUSH
55038: LD_INT 2
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 0
55047: PUSH
55048: LD_INT 2
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 1
55057: NEG
55058: PUSH
55059: LD_INT 1
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 2
55068: NEG
55069: PUSH
55070: LD_INT 0
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 2
55079: NEG
55080: PUSH
55081: LD_INT 1
55083: NEG
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 2
55091: NEG
55092: PUSH
55093: LD_INT 2
55095: NEG
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55122: LD_ADDR_VAR 0 20
55126: PUSH
55127: LD_INT 0
55129: PUSH
55130: LD_INT 0
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 0
55139: PUSH
55140: LD_INT 1
55142: NEG
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 1
55150: PUSH
55151: LD_INT 0
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 1
55160: PUSH
55161: LD_INT 1
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 0
55170: PUSH
55171: LD_INT 1
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 1
55180: NEG
55181: PUSH
55182: LD_INT 0
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 1
55191: NEG
55192: PUSH
55193: LD_INT 1
55195: NEG
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 1
55203: NEG
55204: PUSH
55205: LD_INT 2
55207: NEG
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 0
55215: PUSH
55216: LD_INT 2
55218: NEG
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 1
55226: PUSH
55227: LD_INT 1
55229: NEG
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 2
55237: PUSH
55238: LD_INT 0
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 2
55247: PUSH
55248: LD_INT 1
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 2
55257: PUSH
55258: LD_INT 2
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 1
55267: PUSH
55268: LD_INT 2
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 0
55277: PUSH
55278: LD_INT 2
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 1
55287: NEG
55288: PUSH
55289: LD_INT 1
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 2
55298: NEG
55299: PUSH
55300: LD_INT 0
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 2
55309: NEG
55310: PUSH
55311: LD_INT 1
55313: NEG
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 2
55321: NEG
55322: PUSH
55323: LD_INT 2
55325: NEG
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55352: LD_ADDR_VAR 0 21
55356: PUSH
55357: LD_INT 0
55359: PUSH
55360: LD_INT 0
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 0
55369: PUSH
55370: LD_INT 1
55372: NEG
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 1
55380: PUSH
55381: LD_INT 0
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 1
55390: PUSH
55391: LD_INT 1
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 0
55400: PUSH
55401: LD_INT 1
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 1
55410: NEG
55411: PUSH
55412: LD_INT 0
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 1
55421: NEG
55422: PUSH
55423: LD_INT 1
55425: NEG
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 1
55433: NEG
55434: PUSH
55435: LD_INT 2
55437: NEG
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 0
55445: PUSH
55446: LD_INT 2
55448: NEG
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 1
55456: PUSH
55457: LD_INT 1
55459: NEG
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 2
55467: PUSH
55468: LD_INT 0
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 2
55477: PUSH
55478: LD_INT 1
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 2
55487: PUSH
55488: LD_INT 2
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 1
55497: PUSH
55498: LD_INT 2
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 0
55507: PUSH
55508: LD_INT 2
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 1
55517: NEG
55518: PUSH
55519: LD_INT 1
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 2
55528: NEG
55529: PUSH
55530: LD_INT 0
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 2
55539: NEG
55540: PUSH
55541: LD_INT 1
55543: NEG
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 2
55551: NEG
55552: PUSH
55553: LD_INT 2
55555: NEG
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55582: LD_ADDR_VAR 0 22
55586: PUSH
55587: LD_INT 0
55589: PUSH
55590: LD_INT 0
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 0
55599: PUSH
55600: LD_INT 1
55602: NEG
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 1
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 1
55620: PUSH
55621: LD_INT 1
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 0
55630: PUSH
55631: LD_INT 1
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 1
55640: NEG
55641: PUSH
55642: LD_INT 0
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 1
55651: NEG
55652: PUSH
55653: LD_INT 1
55655: NEG
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 1
55663: NEG
55664: PUSH
55665: LD_INT 2
55667: NEG
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 0
55675: PUSH
55676: LD_INT 2
55678: NEG
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 1
55686: PUSH
55687: LD_INT 1
55689: NEG
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 2
55697: PUSH
55698: LD_INT 0
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 2
55707: PUSH
55708: LD_INT 1
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 2
55717: PUSH
55718: LD_INT 2
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 1
55727: PUSH
55728: LD_INT 2
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 0
55737: PUSH
55738: LD_INT 2
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 1
55747: NEG
55748: PUSH
55749: LD_INT 1
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 2
55758: NEG
55759: PUSH
55760: LD_INT 0
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 2
55769: NEG
55770: PUSH
55771: LD_INT 1
55773: NEG
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 2
55781: NEG
55782: PUSH
55783: LD_INT 2
55785: NEG
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55812: LD_ADDR_VAR 0 23
55816: PUSH
55817: LD_INT 0
55819: PUSH
55820: LD_INT 0
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 0
55829: PUSH
55830: LD_INT 1
55832: NEG
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 1
55840: PUSH
55841: LD_INT 0
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 1
55850: PUSH
55851: LD_INT 1
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 0
55860: PUSH
55861: LD_INT 1
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 1
55870: NEG
55871: PUSH
55872: LD_INT 0
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 1
55881: NEG
55882: PUSH
55883: LD_INT 1
55885: NEG
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 1
55893: NEG
55894: PUSH
55895: LD_INT 2
55897: NEG
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 0
55905: PUSH
55906: LD_INT 2
55908: NEG
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 1
55916: PUSH
55917: LD_INT 1
55919: NEG
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 2
55927: PUSH
55928: LD_INT 0
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 2
55937: PUSH
55938: LD_INT 1
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 2
55947: PUSH
55948: LD_INT 2
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 1
55957: PUSH
55958: LD_INT 2
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 0
55967: PUSH
55968: LD_INT 2
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 1
55977: NEG
55978: PUSH
55979: LD_INT 1
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 2
55988: NEG
55989: PUSH
55990: LD_INT 0
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 2
55999: NEG
56000: PUSH
56001: LD_INT 1
56003: NEG
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 2
56011: NEG
56012: PUSH
56013: LD_INT 2
56015: NEG
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 2
56023: NEG
56024: PUSH
56025: LD_INT 3
56027: NEG
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 1
56035: NEG
56036: PUSH
56037: LD_INT 3
56039: NEG
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 1
56047: PUSH
56048: LD_INT 2
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 2
56058: PUSH
56059: LD_INT 1
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56092: LD_ADDR_VAR 0 24
56096: PUSH
56097: LD_INT 0
56099: PUSH
56100: LD_INT 0
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 0
56109: PUSH
56110: LD_INT 1
56112: NEG
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 1
56120: PUSH
56121: LD_INT 0
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 1
56130: PUSH
56131: LD_INT 1
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: LD_INT 1
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 1
56150: NEG
56151: PUSH
56152: LD_INT 0
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 1
56161: NEG
56162: PUSH
56163: LD_INT 1
56165: NEG
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 1
56173: NEG
56174: PUSH
56175: LD_INT 2
56177: NEG
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 0
56185: PUSH
56186: LD_INT 2
56188: NEG
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 1
56196: PUSH
56197: LD_INT 1
56199: NEG
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 2
56207: PUSH
56208: LD_INT 0
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 2
56217: PUSH
56218: LD_INT 1
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 2
56227: PUSH
56228: LD_INT 2
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 1
56237: PUSH
56238: LD_INT 2
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 0
56247: PUSH
56248: LD_INT 2
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 1
56257: NEG
56258: PUSH
56259: LD_INT 1
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 2
56268: NEG
56269: PUSH
56270: LD_INT 0
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 2
56279: NEG
56280: PUSH
56281: LD_INT 1
56283: NEG
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 2
56291: NEG
56292: PUSH
56293: LD_INT 2
56295: NEG
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 1
56303: PUSH
56304: LD_INT 2
56306: NEG
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 2
56314: PUSH
56315: LD_INT 1
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 3
56325: PUSH
56326: LD_INT 1
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 3
56335: PUSH
56336: LD_INT 2
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56368: LD_ADDR_VAR 0 25
56372: PUSH
56373: LD_INT 0
56375: PUSH
56376: LD_INT 0
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 0
56385: PUSH
56386: LD_INT 1
56388: NEG
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 1
56396: PUSH
56397: LD_INT 0
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 1
56406: PUSH
56407: LD_INT 1
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 0
56416: PUSH
56417: LD_INT 1
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 1
56426: NEG
56427: PUSH
56428: LD_INT 0
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 1
56437: NEG
56438: PUSH
56439: LD_INT 1
56441: NEG
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 1
56449: NEG
56450: PUSH
56451: LD_INT 2
56453: NEG
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 0
56461: PUSH
56462: LD_INT 2
56464: NEG
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 1
56472: PUSH
56473: LD_INT 1
56475: NEG
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 2
56483: PUSH
56484: LD_INT 0
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 2
56493: PUSH
56494: LD_INT 1
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 2
56503: PUSH
56504: LD_INT 2
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 1
56513: PUSH
56514: LD_INT 2
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 0
56523: PUSH
56524: LD_INT 2
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 1
56533: NEG
56534: PUSH
56535: LD_INT 1
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 2
56544: NEG
56545: PUSH
56546: LD_INT 0
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 2
56555: NEG
56556: PUSH
56557: LD_INT 1
56559: NEG
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 2
56567: NEG
56568: PUSH
56569: LD_INT 2
56571: NEG
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 3
56579: PUSH
56580: LD_INT 1
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 3
56589: PUSH
56590: LD_INT 2
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 2
56599: PUSH
56600: LD_INT 3
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 1
56609: PUSH
56610: LD_INT 3
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56642: LD_ADDR_VAR 0 26
56646: PUSH
56647: LD_INT 0
56649: PUSH
56650: LD_INT 0
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 0
56659: PUSH
56660: LD_INT 1
56662: NEG
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 1
56670: PUSH
56671: LD_INT 0
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 1
56680: PUSH
56681: LD_INT 1
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 0
56690: PUSH
56691: LD_INT 1
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 1
56700: NEG
56701: PUSH
56702: LD_INT 0
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 1
56711: NEG
56712: PUSH
56713: LD_INT 1
56715: NEG
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 1
56723: NEG
56724: PUSH
56725: LD_INT 2
56727: NEG
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 0
56735: PUSH
56736: LD_INT 2
56738: NEG
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 1
56746: PUSH
56747: LD_INT 1
56749: NEG
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 2
56757: PUSH
56758: LD_INT 0
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 2
56767: PUSH
56768: LD_INT 1
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 2
56777: PUSH
56778: LD_INT 2
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 1
56787: PUSH
56788: LD_INT 2
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 0
56797: PUSH
56798: LD_INT 2
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 1
56807: NEG
56808: PUSH
56809: LD_INT 1
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 2
56818: NEG
56819: PUSH
56820: LD_INT 0
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 2
56829: NEG
56830: PUSH
56831: LD_INT 1
56833: NEG
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 2
56841: NEG
56842: PUSH
56843: LD_INT 2
56845: NEG
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 2
56853: PUSH
56854: LD_INT 3
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 1
56863: PUSH
56864: LD_INT 3
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 1
56873: NEG
56874: PUSH
56875: LD_INT 2
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 2
56884: NEG
56885: PUSH
56886: LD_INT 1
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56918: LD_ADDR_VAR 0 27
56922: PUSH
56923: LD_INT 0
56925: PUSH
56926: LD_INT 0
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 0
56935: PUSH
56936: LD_INT 1
56938: NEG
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 1
56946: PUSH
56947: LD_INT 0
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 1
56956: PUSH
56957: LD_INT 1
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 0
56966: PUSH
56967: LD_INT 1
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 1
56976: NEG
56977: PUSH
56978: LD_INT 0
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 1
56987: NEG
56988: PUSH
56989: LD_INT 1
56991: NEG
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 1
56999: NEG
57000: PUSH
57001: LD_INT 2
57003: NEG
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 0
57011: PUSH
57012: LD_INT 2
57014: NEG
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 1
57022: PUSH
57023: LD_INT 1
57025: NEG
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 2
57033: PUSH
57034: LD_INT 0
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 2
57043: PUSH
57044: LD_INT 1
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 2
57053: PUSH
57054: LD_INT 2
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 1
57063: PUSH
57064: LD_INT 2
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 0
57073: PUSH
57074: LD_INT 2
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 1
57083: NEG
57084: PUSH
57085: LD_INT 1
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 2
57094: NEG
57095: PUSH
57096: LD_INT 0
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 2
57105: NEG
57106: PUSH
57107: LD_INT 1
57109: NEG
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 2
57117: NEG
57118: PUSH
57119: LD_INT 2
57121: NEG
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 1
57129: NEG
57130: PUSH
57131: LD_INT 2
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 2
57140: NEG
57141: PUSH
57142: LD_INT 1
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 3
57151: NEG
57152: PUSH
57153: LD_INT 1
57155: NEG
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 3
57163: NEG
57164: PUSH
57165: LD_INT 2
57167: NEG
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57198: LD_ADDR_VAR 0 28
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: LD_INT 0
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 0
57215: PUSH
57216: LD_INT 1
57218: NEG
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 1
57226: PUSH
57227: LD_INT 0
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 1
57236: PUSH
57237: LD_INT 1
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 0
57246: PUSH
57247: LD_INT 1
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 1
57256: NEG
57257: PUSH
57258: LD_INT 0
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 1
57267: NEG
57268: PUSH
57269: LD_INT 1
57271: NEG
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 1
57279: NEG
57280: PUSH
57281: LD_INT 2
57283: NEG
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 0
57291: PUSH
57292: LD_INT 2
57294: NEG
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 1
57302: PUSH
57303: LD_INT 1
57305: NEG
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 2
57313: PUSH
57314: LD_INT 0
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 2
57323: PUSH
57324: LD_INT 1
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 2
57333: PUSH
57334: LD_INT 2
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 1
57343: PUSH
57344: LD_INT 2
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 0
57353: PUSH
57354: LD_INT 2
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 1
57363: NEG
57364: PUSH
57365: LD_INT 1
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 2
57374: NEG
57375: PUSH
57376: LD_INT 0
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 2
57385: NEG
57386: PUSH
57387: LD_INT 1
57389: NEG
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 2
57397: NEG
57398: PUSH
57399: LD_INT 2
57401: NEG
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 2
57409: NEG
57410: PUSH
57411: LD_INT 3
57413: NEG
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 1
57421: NEG
57422: PUSH
57423: LD_INT 3
57425: NEG
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 3
57433: NEG
57434: PUSH
57435: LD_INT 1
57437: NEG
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 3
57445: NEG
57446: PUSH
57447: LD_INT 2
57449: NEG
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57480: LD_ADDR_VAR 0 29
57484: PUSH
57485: LD_INT 0
57487: PUSH
57488: LD_INT 0
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 0
57497: PUSH
57498: LD_INT 1
57500: NEG
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 1
57508: PUSH
57509: LD_INT 0
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 1
57518: PUSH
57519: LD_INT 1
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 0
57528: PUSH
57529: LD_INT 1
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 1
57538: NEG
57539: PUSH
57540: LD_INT 0
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 1
57549: NEG
57550: PUSH
57551: LD_INT 1
57553: NEG
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 1
57561: NEG
57562: PUSH
57563: LD_INT 2
57565: NEG
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 0
57573: PUSH
57574: LD_INT 2
57576: NEG
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 1
57584: PUSH
57585: LD_INT 1
57587: NEG
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 2
57595: PUSH
57596: LD_INT 0
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 2
57605: PUSH
57606: LD_INT 1
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 1
57615: PUSH
57616: LD_INT 2
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 0
57625: PUSH
57626: LD_INT 2
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 1
57635: NEG
57636: PUSH
57637: LD_INT 1
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 2
57646: NEG
57647: PUSH
57648: LD_INT 1
57650: NEG
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 2
57658: NEG
57659: PUSH
57660: LD_INT 2
57662: NEG
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 2
57670: NEG
57671: PUSH
57672: LD_INT 3
57674: NEG
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 2
57682: PUSH
57683: LD_INT 1
57685: NEG
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 3
57693: PUSH
57694: LD_INT 1
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 1
57703: PUSH
57704: LD_INT 3
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 1
57713: NEG
57714: PUSH
57715: LD_INT 2
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 3
57724: NEG
57725: PUSH
57726: LD_INT 2
57728: NEG
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57759: LD_ADDR_VAR 0 30
57763: PUSH
57764: LD_INT 0
57766: PUSH
57767: LD_INT 0
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 0
57776: PUSH
57777: LD_INT 1
57779: NEG
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 1
57787: PUSH
57788: LD_INT 0
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 1
57797: PUSH
57798: LD_INT 1
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 0
57807: PUSH
57808: LD_INT 1
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 1
57817: NEG
57818: PUSH
57819: LD_INT 0
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 1
57828: NEG
57829: PUSH
57830: LD_INT 1
57832: NEG
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 1
57840: NEG
57841: PUSH
57842: LD_INT 2
57844: NEG
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 0
57852: PUSH
57853: LD_INT 2
57855: NEG
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 1
57863: PUSH
57864: LD_INT 1
57866: NEG
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 2
57874: PUSH
57875: LD_INT 0
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 2
57884: PUSH
57885: LD_INT 1
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 2
57894: PUSH
57895: LD_INT 2
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 1
57904: PUSH
57905: LD_INT 2
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 1
57914: NEG
57915: PUSH
57916: LD_INT 1
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 2
57925: NEG
57926: PUSH
57927: LD_INT 0
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 2
57936: NEG
57937: PUSH
57938: LD_INT 1
57940: NEG
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 1
57948: NEG
57949: PUSH
57950: LD_INT 3
57952: NEG
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 1
57960: PUSH
57961: LD_INT 2
57963: NEG
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 3
57971: PUSH
57972: LD_INT 2
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 2
57981: PUSH
57982: LD_INT 3
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 2
57991: NEG
57992: PUSH
57993: LD_INT 1
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 3
58002: NEG
58003: PUSH
58004: LD_INT 1
58006: NEG
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58037: LD_ADDR_VAR 0 31
58041: PUSH
58042: LD_INT 0
58044: PUSH
58045: LD_INT 0
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 0
58054: PUSH
58055: LD_INT 1
58057: NEG
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 1
58065: PUSH
58066: LD_INT 0
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 1
58075: PUSH
58076: LD_INT 1
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 0
58085: PUSH
58086: LD_INT 1
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 1
58095: NEG
58096: PUSH
58097: LD_INT 0
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 1
58106: NEG
58107: PUSH
58108: LD_INT 1
58110: NEG
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 1
58118: NEG
58119: PUSH
58120: LD_INT 2
58122: NEG
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 1
58130: PUSH
58131: LD_INT 1
58133: NEG
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 2
58141: PUSH
58142: LD_INT 0
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 2
58151: PUSH
58152: LD_INT 1
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 2
58161: PUSH
58162: LD_INT 2
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 1
58171: PUSH
58172: LD_INT 2
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 0
58181: PUSH
58182: LD_INT 2
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 1
58191: NEG
58192: PUSH
58193: LD_INT 1
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 2
58202: NEG
58203: PUSH
58204: LD_INT 1
58206: NEG
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 2
58214: NEG
58215: PUSH
58216: LD_INT 2
58218: NEG
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 2
58226: NEG
58227: PUSH
58228: LD_INT 3
58230: NEG
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 2
58238: PUSH
58239: LD_INT 1
58241: NEG
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 3
58249: PUSH
58250: LD_INT 1
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 1
58259: PUSH
58260: LD_INT 3
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 1
58269: NEG
58270: PUSH
58271: LD_INT 2
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 3
58280: NEG
58281: PUSH
58282: LD_INT 2
58284: NEG
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58315: LD_ADDR_VAR 0 32
58319: PUSH
58320: LD_INT 0
58322: PUSH
58323: LD_INT 0
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 0
58332: PUSH
58333: LD_INT 1
58335: NEG
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 1
58343: PUSH
58344: LD_INT 0
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 1
58353: PUSH
58354: LD_INT 1
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 0
58363: PUSH
58364: LD_INT 1
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 1
58373: NEG
58374: PUSH
58375: LD_INT 0
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 1
58384: NEG
58385: PUSH
58386: LD_INT 1
58388: NEG
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 1
58396: NEG
58397: PUSH
58398: LD_INT 2
58400: NEG
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 0
58408: PUSH
58409: LD_INT 2
58411: NEG
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 1
58419: PUSH
58420: LD_INT 1
58422: NEG
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 2
58430: PUSH
58431: LD_INT 1
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 2
58440: PUSH
58441: LD_INT 2
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 1
58450: PUSH
58451: LD_INT 2
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 0
58460: PUSH
58461: LD_INT 2
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 1
58470: NEG
58471: PUSH
58472: LD_INT 1
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 2
58481: NEG
58482: PUSH
58483: LD_INT 0
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 2
58492: NEG
58493: PUSH
58494: LD_INT 1
58496: NEG
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 1
58504: NEG
58505: PUSH
58506: LD_INT 3
58508: NEG
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 1
58516: PUSH
58517: LD_INT 2
58519: NEG
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 3
58527: PUSH
58528: LD_INT 2
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 2
58537: PUSH
58538: LD_INT 3
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 2
58547: NEG
58548: PUSH
58549: LD_INT 1
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 3
58558: NEG
58559: PUSH
58560: LD_INT 1
58562: NEG
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58593: LD_ADDR_VAR 0 33
58597: PUSH
58598: LD_INT 0
58600: PUSH
58601: LD_INT 0
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 0
58610: PUSH
58611: LD_INT 1
58613: NEG
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 1
58621: PUSH
58622: LD_INT 0
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 1
58631: PUSH
58632: LD_INT 1
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 0
58641: PUSH
58642: LD_INT 1
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 1
58651: NEG
58652: PUSH
58653: LD_INT 0
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 1
58662: NEG
58663: PUSH
58664: LD_INT 1
58666: NEG
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 1
58674: NEG
58675: PUSH
58676: LD_INT 2
58678: NEG
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 1
58686: PUSH
58687: LD_INT 1
58689: NEG
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 2
58697: PUSH
58698: LD_INT 0
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 2
58707: PUSH
58708: LD_INT 1
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 1
58717: PUSH
58718: LD_INT 2
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 0
58727: PUSH
58728: LD_INT 2
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 1
58737: NEG
58738: PUSH
58739: LD_INT 1
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 2
58748: NEG
58749: PUSH
58750: LD_INT 0
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 2
58759: NEG
58760: PUSH
58761: LD_INT 1
58763: NEG
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 2
58771: NEG
58772: PUSH
58773: LD_INT 2
58775: NEG
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 2
58783: NEG
58784: PUSH
58785: LD_INT 3
58787: NEG
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 2
58795: PUSH
58796: LD_INT 1
58798: NEG
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 3
58806: PUSH
58807: LD_INT 1
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 1
58816: PUSH
58817: LD_INT 3
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 1
58826: NEG
58827: PUSH
58828: LD_INT 2
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 3
58837: NEG
58838: PUSH
58839: LD_INT 2
58841: NEG
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58872: LD_ADDR_VAR 0 34
58876: PUSH
58877: LD_INT 0
58879: PUSH
58880: LD_INT 0
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 0
58889: PUSH
58890: LD_INT 1
58892: NEG
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 1
58900: PUSH
58901: LD_INT 0
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 1
58910: PUSH
58911: LD_INT 1
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 0
58920: PUSH
58921: LD_INT 1
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 1
58930: NEG
58931: PUSH
58932: LD_INT 0
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 1
58941: NEG
58942: PUSH
58943: LD_INT 1
58945: NEG
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 1
58953: NEG
58954: PUSH
58955: LD_INT 2
58957: NEG
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 0
58965: PUSH
58966: LD_INT 2
58968: NEG
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 1
58976: PUSH
58977: LD_INT 1
58979: NEG
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 2
58987: PUSH
58988: LD_INT 1
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 2
58997: PUSH
58998: LD_INT 2
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 1
59007: PUSH
59008: LD_INT 2
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 1
59017: NEG
59018: PUSH
59019: LD_INT 1
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 2
59028: NEG
59029: PUSH
59030: LD_INT 0
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 2
59039: NEG
59040: PUSH
59041: LD_INT 1
59043: NEG
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 2
59051: NEG
59052: PUSH
59053: LD_INT 2
59055: NEG
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 1
59063: NEG
59064: PUSH
59065: LD_INT 3
59067: NEG
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 1
59075: PUSH
59076: LD_INT 2
59078: NEG
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 3
59086: PUSH
59087: LD_INT 2
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 2
59096: PUSH
59097: LD_INT 3
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 2
59106: NEG
59107: PUSH
59108: LD_INT 1
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 3
59117: NEG
59118: PUSH
59119: LD_INT 1
59121: NEG
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59152: LD_ADDR_VAR 0 35
59156: PUSH
59157: LD_INT 0
59159: PUSH
59160: LD_INT 0
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 0
59169: PUSH
59170: LD_INT 1
59172: NEG
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 1
59180: PUSH
59181: LD_INT 0
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 1
59190: PUSH
59191: LD_INT 1
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 0
59200: PUSH
59201: LD_INT 1
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 1
59210: NEG
59211: PUSH
59212: LD_INT 0
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 1
59221: NEG
59222: PUSH
59223: LD_INT 1
59225: NEG
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 2
59233: PUSH
59234: LD_INT 1
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 2
59243: NEG
59244: PUSH
59245: LD_INT 1
59247: NEG
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59264: LD_ADDR_VAR 0 36
59268: PUSH
59269: LD_INT 0
59271: PUSH
59272: LD_INT 0
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 0
59281: PUSH
59282: LD_INT 1
59284: NEG
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 1
59292: PUSH
59293: LD_INT 0
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 1
59302: PUSH
59303: LD_INT 1
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 0
59312: PUSH
59313: LD_INT 1
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 1
59322: NEG
59323: PUSH
59324: LD_INT 0
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 1
59333: NEG
59334: PUSH
59335: LD_INT 1
59337: NEG
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 1
59345: NEG
59346: PUSH
59347: LD_INT 2
59349: NEG
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 1
59357: PUSH
59358: LD_INT 2
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59376: LD_ADDR_VAR 0 37
59380: PUSH
59381: LD_INT 0
59383: PUSH
59384: LD_INT 0
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 0
59393: PUSH
59394: LD_INT 1
59396: NEG
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 1
59404: PUSH
59405: LD_INT 0
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 1
59414: PUSH
59415: LD_INT 1
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 0
59424: PUSH
59425: LD_INT 1
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 1
59434: NEG
59435: PUSH
59436: LD_INT 0
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 1
59445: NEG
59446: PUSH
59447: LD_INT 1
59449: NEG
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 1
59457: PUSH
59458: LD_INT 1
59460: NEG
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 1
59468: NEG
59469: PUSH
59470: LD_INT 1
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59488: LD_ADDR_VAR 0 38
59492: PUSH
59493: LD_INT 0
59495: PUSH
59496: LD_INT 0
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 0
59505: PUSH
59506: LD_INT 1
59508: NEG
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 1
59516: PUSH
59517: LD_INT 0
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 1
59526: PUSH
59527: LD_INT 1
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 0
59536: PUSH
59537: LD_INT 1
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 1
59546: NEG
59547: PUSH
59548: LD_INT 0
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 1
59557: NEG
59558: PUSH
59559: LD_INT 1
59561: NEG
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 2
59569: PUSH
59570: LD_INT 1
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 2
59579: NEG
59580: PUSH
59581: LD_INT 1
59583: NEG
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59600: LD_ADDR_VAR 0 39
59604: PUSH
59605: LD_INT 0
59607: PUSH
59608: LD_INT 0
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 0
59617: PUSH
59618: LD_INT 1
59620: NEG
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 1
59628: PUSH
59629: LD_INT 0
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 1
59638: PUSH
59639: LD_INT 1
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 0
59648: PUSH
59649: LD_INT 1
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 1
59658: NEG
59659: PUSH
59660: LD_INT 0
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 1
59669: NEG
59670: PUSH
59671: LD_INT 1
59673: NEG
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 1
59681: NEG
59682: PUSH
59683: LD_INT 2
59685: NEG
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 1
59693: PUSH
59694: LD_INT 2
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59712: LD_ADDR_VAR 0 40
59716: PUSH
59717: LD_INT 0
59719: PUSH
59720: LD_INT 0
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 0
59729: PUSH
59730: LD_INT 1
59732: NEG
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 1
59740: PUSH
59741: LD_INT 0
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 1
59750: PUSH
59751: LD_INT 1
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 0
59760: PUSH
59761: LD_INT 1
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 1
59770: NEG
59771: PUSH
59772: LD_INT 0
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: LD_INT 1
59781: NEG
59782: PUSH
59783: LD_INT 1
59785: NEG
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 1
59793: PUSH
59794: LD_INT 1
59796: NEG
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 1
59804: NEG
59805: PUSH
59806: LD_INT 1
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59824: LD_ADDR_VAR 0 41
59828: PUSH
59829: LD_INT 0
59831: PUSH
59832: LD_INT 0
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 0
59841: PUSH
59842: LD_INT 1
59844: NEG
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 1
59852: PUSH
59853: LD_INT 0
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 1
59862: PUSH
59863: LD_INT 1
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 0
59872: PUSH
59873: LD_INT 1
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 1
59882: NEG
59883: PUSH
59884: LD_INT 0
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 1
59893: NEG
59894: PUSH
59895: LD_INT 1
59897: NEG
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 1
59905: NEG
59906: PUSH
59907: LD_INT 2
59909: NEG
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 1
59917: PUSH
59918: LD_INT 1
59920: NEG
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 2
59928: PUSH
59929: LD_INT 0
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 2
59938: PUSH
59939: LD_INT 1
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 2
59948: PUSH
59949: LD_INT 2
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 1
59958: PUSH
59959: LD_INT 2
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 1
59968: NEG
59969: PUSH
59970: LD_INT 1
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 2
59979: NEG
59980: PUSH
59981: LD_INT 0
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 2
59990: NEG
59991: PUSH
59992: LD_INT 1
59994: NEG
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 2
60002: NEG
60003: PUSH
60004: LD_INT 2
60006: NEG
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 2
60014: NEG
60015: PUSH
60016: LD_INT 3
60018: NEG
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 2
60026: PUSH
60027: LD_INT 1
60029: NEG
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 3
60037: PUSH
60038: LD_INT 0
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 3
60047: PUSH
60048: LD_INT 1
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 3
60057: PUSH
60058: LD_INT 2
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 3
60067: PUSH
60068: LD_INT 3
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 2
60077: PUSH
60078: LD_INT 3
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 2
60087: NEG
60088: PUSH
60089: LD_INT 1
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 3
60098: NEG
60099: PUSH
60100: LD_INT 0
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_INT 3
60109: NEG
60110: PUSH
60111: LD_INT 1
60113: NEG
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 3
60121: NEG
60122: PUSH
60123: LD_INT 2
60125: NEG
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 3
60133: NEG
60134: PUSH
60135: LD_INT 3
60137: NEG
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60174: LD_ADDR_VAR 0 42
60178: PUSH
60179: LD_INT 0
60181: PUSH
60182: LD_INT 0
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 0
60191: PUSH
60192: LD_INT 1
60194: NEG
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 1
60202: PUSH
60203: LD_INT 0
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 1
60212: PUSH
60213: LD_INT 1
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 0
60222: PUSH
60223: LD_INT 1
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 1
60232: NEG
60233: PUSH
60234: LD_INT 0
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 1
60243: NEG
60244: PUSH
60245: LD_INT 1
60247: NEG
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 1
60255: NEG
60256: PUSH
60257: LD_INT 2
60259: NEG
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 0
60267: PUSH
60268: LD_INT 2
60270: NEG
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 1
60278: PUSH
60279: LD_INT 1
60281: NEG
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 2
60289: PUSH
60290: LD_INT 1
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 2
60299: PUSH
60300: LD_INT 2
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 1
60309: PUSH
60310: LD_INT 2
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 0
60319: PUSH
60320: LD_INT 2
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 1
60329: NEG
60330: PUSH
60331: LD_INT 1
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 2
60340: NEG
60341: PUSH
60342: LD_INT 1
60344: NEG
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 2
60352: NEG
60353: PUSH
60354: LD_INT 2
60356: NEG
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 2
60364: NEG
60365: PUSH
60366: LD_INT 3
60368: NEG
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 1
60376: NEG
60377: PUSH
60378: LD_INT 3
60380: NEG
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 0
60388: PUSH
60389: LD_INT 3
60391: NEG
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 1
60399: PUSH
60400: LD_INT 2
60402: NEG
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 3
60410: PUSH
60411: LD_INT 2
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 3
60420: PUSH
60421: LD_INT 3
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: LD_INT 2
60430: PUSH
60431: LD_INT 3
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 1
60440: PUSH
60441: LD_INT 3
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 0
60450: PUSH
60451: LD_INT 3
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 1
60460: NEG
60461: PUSH
60462: LD_INT 2
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 3
60471: NEG
60472: PUSH
60473: LD_INT 2
60475: NEG
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 3
60483: NEG
60484: PUSH
60485: LD_INT 3
60487: NEG
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60524: LD_ADDR_VAR 0 43
60528: PUSH
60529: LD_INT 0
60531: PUSH
60532: LD_INT 0
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 0
60541: PUSH
60542: LD_INT 1
60544: NEG
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 1
60552: PUSH
60553: LD_INT 0
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 1
60562: PUSH
60563: LD_INT 1
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 0
60572: PUSH
60573: LD_INT 1
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 1
60582: NEG
60583: PUSH
60584: LD_INT 0
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 1
60593: NEG
60594: PUSH
60595: LD_INT 1
60597: NEG
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 1
60605: NEG
60606: PUSH
60607: LD_INT 2
60609: NEG
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 0
60617: PUSH
60618: LD_INT 2
60620: NEG
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 1
60628: PUSH
60629: LD_INT 1
60631: NEG
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 2
60639: PUSH
60640: LD_INT 0
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 2
60649: PUSH
60650: LD_INT 1
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 1
60659: PUSH
60660: LD_INT 2
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 0
60669: PUSH
60670: LD_INT 2
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 1
60679: NEG
60680: PUSH
60681: LD_INT 1
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 2
60690: NEG
60691: PUSH
60692: LD_INT 0
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 2
60701: NEG
60702: PUSH
60703: LD_INT 1
60705: NEG
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 1
60713: NEG
60714: PUSH
60715: LD_INT 3
60717: NEG
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 0
60725: PUSH
60726: LD_INT 3
60728: NEG
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 1
60736: PUSH
60737: LD_INT 2
60739: NEG
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 2
60747: PUSH
60748: LD_INT 1
60750: NEG
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 3
60758: PUSH
60759: LD_INT 0
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 3
60768: PUSH
60769: LD_INT 1
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 1
60778: PUSH
60779: LD_INT 3
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 0
60788: PUSH
60789: LD_INT 3
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 1
60798: NEG
60799: PUSH
60800: LD_INT 2
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 2
60809: NEG
60810: PUSH
60811: LD_INT 1
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 3
60820: NEG
60821: PUSH
60822: LD_INT 0
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 3
60831: NEG
60832: PUSH
60833: LD_INT 1
60835: NEG
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60872: LD_ADDR_VAR 0 44
60876: PUSH
60877: LD_INT 0
60879: PUSH
60880: LD_INT 0
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 0
60889: PUSH
60890: LD_INT 1
60892: NEG
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 1
60900: PUSH
60901: LD_INT 0
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 1
60910: PUSH
60911: LD_INT 1
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 0
60920: PUSH
60921: LD_INT 1
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: LD_INT 1
60930: NEG
60931: PUSH
60932: LD_INT 0
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 1
60941: NEG
60942: PUSH
60943: LD_INT 1
60945: NEG
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 1
60953: NEG
60954: PUSH
60955: LD_INT 2
60957: NEG
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 1
60965: PUSH
60966: LD_INT 1
60968: NEG
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 2
60976: PUSH
60977: LD_INT 0
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 2
60986: PUSH
60987: LD_INT 1
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 2
60996: PUSH
60997: LD_INT 2
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 1
61006: PUSH
61007: LD_INT 2
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 1
61016: NEG
61017: PUSH
61018: LD_INT 1
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 2
61027: NEG
61028: PUSH
61029: LD_INT 0
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 2
61038: NEG
61039: PUSH
61040: LD_INT 1
61042: NEG
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 2
61050: NEG
61051: PUSH
61052: LD_INT 2
61054: NEG
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 2
61062: NEG
61063: PUSH
61064: LD_INT 3
61066: NEG
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 2
61074: PUSH
61075: LD_INT 1
61077: NEG
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 3
61085: PUSH
61086: LD_INT 0
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 3
61095: PUSH
61096: LD_INT 1
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 3
61105: PUSH
61106: LD_INT 2
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 3
61115: PUSH
61116: LD_INT 3
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 2
61125: PUSH
61126: LD_INT 3
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 2
61135: NEG
61136: PUSH
61137: LD_INT 1
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 3
61146: NEG
61147: PUSH
61148: LD_INT 0
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 3
61157: NEG
61158: PUSH
61159: LD_INT 1
61161: NEG
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 3
61169: NEG
61170: PUSH
61171: LD_INT 2
61173: NEG
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 3
61181: NEG
61182: PUSH
61183: LD_INT 3
61185: NEG
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61222: LD_ADDR_VAR 0 45
61226: PUSH
61227: LD_INT 0
61229: PUSH
61230: LD_INT 0
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 0
61239: PUSH
61240: LD_INT 1
61242: NEG
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 1
61250: PUSH
61251: LD_INT 0
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 1
61260: PUSH
61261: LD_INT 1
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 0
61270: PUSH
61271: LD_INT 1
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 1
61280: NEG
61281: PUSH
61282: LD_INT 0
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 1
61291: NEG
61292: PUSH
61293: LD_INT 1
61295: NEG
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 1
61303: NEG
61304: PUSH
61305: LD_INT 2
61307: NEG
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 0
61315: PUSH
61316: LD_INT 2
61318: NEG
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 1
61326: PUSH
61327: LD_INT 1
61329: NEG
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 2
61337: PUSH
61338: LD_INT 1
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 2
61347: PUSH
61348: LD_INT 2
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 1
61357: PUSH
61358: LD_INT 2
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 0
61367: PUSH
61368: LD_INT 2
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 1
61377: NEG
61378: PUSH
61379: LD_INT 1
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 2
61388: NEG
61389: PUSH
61390: LD_INT 1
61392: NEG
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 2
61400: NEG
61401: PUSH
61402: LD_INT 2
61404: NEG
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 2
61412: NEG
61413: PUSH
61414: LD_INT 3
61416: NEG
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 1
61424: NEG
61425: PUSH
61426: LD_INT 3
61428: NEG
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 0
61436: PUSH
61437: LD_INT 3
61439: NEG
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 1
61447: PUSH
61448: LD_INT 2
61450: NEG
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 3
61458: PUSH
61459: LD_INT 2
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 3
61468: PUSH
61469: LD_INT 3
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 2
61478: PUSH
61479: LD_INT 3
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 1
61488: PUSH
61489: LD_INT 3
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 0
61498: PUSH
61499: LD_INT 3
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 1
61508: NEG
61509: PUSH
61510: LD_INT 2
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 3
61519: NEG
61520: PUSH
61521: LD_INT 2
61523: NEG
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 3
61531: NEG
61532: PUSH
61533: LD_INT 3
61535: NEG
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61572: LD_ADDR_VAR 0 46
61576: PUSH
61577: LD_INT 0
61579: PUSH
61580: LD_INT 0
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 0
61589: PUSH
61590: LD_INT 1
61592: NEG
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 1
61600: PUSH
61601: LD_INT 0
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 1
61610: PUSH
61611: LD_INT 1
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 0
61620: PUSH
61621: LD_INT 1
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 1
61630: NEG
61631: PUSH
61632: LD_INT 0
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 1
61641: NEG
61642: PUSH
61643: LD_INT 1
61645: NEG
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 1
61653: NEG
61654: PUSH
61655: LD_INT 2
61657: NEG
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 0
61665: PUSH
61666: LD_INT 2
61668: NEG
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 1
61676: PUSH
61677: LD_INT 1
61679: NEG
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 2
61687: PUSH
61688: LD_INT 0
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 2
61697: PUSH
61698: LD_INT 1
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: LD_INT 1
61707: PUSH
61708: LD_INT 2
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 0
61717: PUSH
61718: LD_INT 2
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 1
61727: NEG
61728: PUSH
61729: LD_INT 1
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 2
61738: NEG
61739: PUSH
61740: LD_INT 0
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 2
61749: NEG
61750: PUSH
61751: LD_INT 1
61753: NEG
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 1
61761: NEG
61762: PUSH
61763: LD_INT 3
61765: NEG
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 0
61773: PUSH
61774: LD_INT 3
61776: NEG
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 1
61784: PUSH
61785: LD_INT 2
61787: NEG
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 2
61795: PUSH
61796: LD_INT 1
61798: NEG
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 3
61806: PUSH
61807: LD_INT 0
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 3
61816: PUSH
61817: LD_INT 1
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 1
61826: PUSH
61827: LD_INT 3
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 0
61836: PUSH
61837: LD_INT 3
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 1
61846: NEG
61847: PUSH
61848: LD_INT 2
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 2
61857: NEG
61858: PUSH
61859: LD_INT 1
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 3
61868: NEG
61869: PUSH
61870: LD_INT 0
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: LD_INT 3
61879: NEG
61880: PUSH
61881: LD_INT 1
61883: NEG
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61920: LD_ADDR_VAR 0 47
61924: PUSH
61925: LD_INT 0
61927: PUSH
61928: LD_INT 0
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 0
61937: PUSH
61938: LD_INT 1
61940: NEG
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: PUSH
61946: LD_INT 1
61948: PUSH
61949: LD_INT 0
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 1
61958: PUSH
61959: LD_INT 1
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_INT 0
61968: PUSH
61969: LD_INT 1
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 1
61978: NEG
61979: PUSH
61980: LD_INT 0
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 1
61989: NEG
61990: PUSH
61991: LD_INT 1
61993: NEG
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 1
62001: NEG
62002: PUSH
62003: LD_INT 2
62005: NEG
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 0
62013: PUSH
62014: LD_INT 2
62016: NEG
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: LD_INT 1
62024: PUSH
62025: LD_INT 1
62027: NEG
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 2
62035: NEG
62036: PUSH
62037: LD_INT 1
62039: NEG
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 2
62047: NEG
62048: PUSH
62049: LD_INT 2
62051: NEG
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62071: LD_ADDR_VAR 0 48
62075: PUSH
62076: LD_INT 0
62078: PUSH
62079: LD_INT 0
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 0
62088: PUSH
62089: LD_INT 1
62091: NEG
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 1
62099: PUSH
62100: LD_INT 0
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 1
62109: PUSH
62110: LD_INT 1
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 0
62119: PUSH
62120: LD_INT 1
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 1
62129: NEG
62130: PUSH
62131: LD_INT 0
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 1
62140: NEG
62141: PUSH
62142: LD_INT 1
62144: NEG
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 1
62152: NEG
62153: PUSH
62154: LD_INT 2
62156: NEG
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 0
62164: PUSH
62165: LD_INT 2
62167: NEG
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 1
62175: PUSH
62176: LD_INT 1
62178: NEG
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 2
62186: PUSH
62187: LD_INT 0
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 2
62196: PUSH
62197: LD_INT 1
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62218: LD_ADDR_VAR 0 49
62222: PUSH
62223: LD_INT 0
62225: PUSH
62226: LD_INT 0
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 0
62235: PUSH
62236: LD_INT 1
62238: NEG
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PUSH
62244: LD_INT 1
62246: PUSH
62247: LD_INT 0
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 1
62256: PUSH
62257: LD_INT 1
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 0
62266: PUSH
62267: LD_INT 1
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 1
62276: NEG
62277: PUSH
62278: LD_INT 0
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 1
62287: NEG
62288: PUSH
62289: LD_INT 1
62291: NEG
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: LD_INT 1
62299: PUSH
62300: LD_INT 1
62302: NEG
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: LD_INT 2
62310: PUSH
62311: LD_INT 0
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 2
62320: PUSH
62321: LD_INT 1
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: PUSH
62328: LD_INT 2
62330: PUSH
62331: LD_INT 2
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 1
62340: PUSH
62341: LD_INT 2
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62362: LD_ADDR_VAR 0 50
62366: PUSH
62367: LD_INT 0
62369: PUSH
62370: LD_INT 0
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_INT 0
62379: PUSH
62380: LD_INT 1
62382: NEG
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 1
62390: PUSH
62391: LD_INT 0
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 1
62400: PUSH
62401: LD_INT 1
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 0
62410: PUSH
62411: LD_INT 1
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 1
62420: NEG
62421: PUSH
62422: LD_INT 0
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 1
62431: NEG
62432: PUSH
62433: LD_INT 1
62435: NEG
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 2
62443: PUSH
62444: LD_INT 1
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: PUSH
62451: LD_INT 2
62453: PUSH
62454: LD_INT 2
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: PUSH
62461: LD_INT 1
62463: PUSH
62464: LD_INT 2
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: PUSH
62471: LD_INT 0
62473: PUSH
62474: LD_INT 2
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 1
62483: NEG
62484: PUSH
62485: LD_INT 1
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62506: LD_ADDR_VAR 0 51
62510: PUSH
62511: LD_INT 0
62513: PUSH
62514: LD_INT 0
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 0
62523: PUSH
62524: LD_INT 1
62526: NEG
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 1
62534: PUSH
62535: LD_INT 0
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 1
62544: PUSH
62545: LD_INT 1
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 0
62554: PUSH
62555: LD_INT 1
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 1
62564: NEG
62565: PUSH
62566: LD_INT 0
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 1
62575: NEG
62576: PUSH
62577: LD_INT 1
62579: NEG
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: LD_INT 1
62587: PUSH
62588: LD_INT 2
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: LD_INT 0
62597: PUSH
62598: LD_INT 2
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 1
62607: NEG
62608: PUSH
62609: LD_INT 1
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PUSH
62616: LD_INT 2
62618: NEG
62619: PUSH
62620: LD_INT 0
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 2
62629: NEG
62630: PUSH
62631: LD_INT 1
62633: NEG
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62653: LD_ADDR_VAR 0 52
62657: PUSH
62658: LD_INT 0
62660: PUSH
62661: LD_INT 0
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 0
62670: PUSH
62671: LD_INT 1
62673: NEG
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 1
62681: PUSH
62682: LD_INT 0
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 1
62691: PUSH
62692: LD_INT 1
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 0
62701: PUSH
62702: LD_INT 1
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 1
62711: NEG
62712: PUSH
62713: LD_INT 0
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 1
62722: NEG
62723: PUSH
62724: LD_INT 1
62726: NEG
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: PUSH
62732: LD_INT 1
62734: NEG
62735: PUSH
62736: LD_INT 2
62738: NEG
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: LD_INT 1
62746: NEG
62747: PUSH
62748: LD_INT 1
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: LD_INT 2
62757: NEG
62758: PUSH
62759: LD_INT 0
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 2
62768: NEG
62769: PUSH
62770: LD_INT 1
62772: NEG
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: LD_INT 2
62780: NEG
62781: PUSH
62782: LD_INT 2
62784: NEG
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62804: LD_ADDR_VAR 0 53
62808: PUSH
62809: LD_INT 0
62811: PUSH
62812: LD_INT 0
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_INT 0
62821: PUSH
62822: LD_INT 1
62824: NEG
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 1
62832: PUSH
62833: LD_INT 0
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 1
62842: PUSH
62843: LD_INT 1
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 0
62852: PUSH
62853: LD_INT 1
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 1
62862: NEG
62863: PUSH
62864: LD_INT 0
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: PUSH
62871: LD_INT 1
62873: NEG
62874: PUSH
62875: LD_INT 1
62877: NEG
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 1
62885: NEG
62886: PUSH
62887: LD_INT 2
62889: NEG
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PUSH
62895: LD_INT 0
62897: PUSH
62898: LD_INT 2
62900: NEG
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 1
62908: PUSH
62909: LD_INT 1
62911: NEG
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: LD_INT 2
62919: PUSH
62920: LD_INT 0
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 2
62929: PUSH
62930: LD_INT 1
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 2
62939: PUSH
62940: LD_INT 2
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 1
62949: PUSH
62950: LD_INT 2
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 0
62959: PUSH
62960: LD_INT 2
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 1
62969: NEG
62970: PUSH
62971: LD_INT 1
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 2
62980: NEG
62981: PUSH
62982: LD_INT 0
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 2
62991: NEG
62992: PUSH
62993: LD_INT 1
62995: NEG
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: LD_INT 2
63003: NEG
63004: PUSH
63005: LD_INT 2
63007: NEG
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63034: LD_ADDR_VAR 0 54
63038: PUSH
63039: LD_INT 0
63041: PUSH
63042: LD_INT 0
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 0
63051: PUSH
63052: LD_INT 1
63054: NEG
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 1
63062: PUSH
63063: LD_INT 0
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 1
63072: PUSH
63073: LD_INT 1
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 0
63082: PUSH
63083: LD_INT 1
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: LD_INT 1
63092: NEG
63093: PUSH
63094: LD_INT 0
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 1
63103: NEG
63104: PUSH
63105: LD_INT 1
63107: NEG
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 1
63115: NEG
63116: PUSH
63117: LD_INT 2
63119: NEG
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: LD_INT 0
63127: PUSH
63128: LD_INT 2
63130: NEG
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 1
63138: PUSH
63139: LD_INT 1
63141: NEG
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 2
63149: PUSH
63150: LD_INT 0
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 2
63159: PUSH
63160: LD_INT 1
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 2
63169: PUSH
63170: LD_INT 2
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 1
63179: PUSH
63180: LD_INT 2
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: LD_INT 0
63189: PUSH
63190: LD_INT 2
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: PUSH
63197: LD_INT 1
63199: NEG
63200: PUSH
63201: LD_INT 1
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 2
63210: NEG
63211: PUSH
63212: LD_INT 0
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 2
63221: NEG
63222: PUSH
63223: LD_INT 1
63225: NEG
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 2
63233: NEG
63234: PUSH
63235: LD_INT 2
63237: NEG
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63264: LD_ADDR_VAR 0 55
63268: PUSH
63269: LD_INT 0
63271: PUSH
63272: LD_INT 0
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 0
63281: PUSH
63282: LD_INT 1
63284: NEG
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: LD_INT 1
63292: PUSH
63293: LD_INT 0
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: LD_INT 1
63302: PUSH
63303: LD_INT 1
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 0
63312: PUSH
63313: LD_INT 1
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: PUSH
63320: LD_INT 1
63322: NEG
63323: PUSH
63324: LD_INT 0
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 1
63333: NEG
63334: PUSH
63335: LD_INT 1
63337: NEG
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 1
63345: NEG
63346: PUSH
63347: LD_INT 2
63349: NEG
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: PUSH
63355: LD_INT 0
63357: PUSH
63358: LD_INT 2
63360: NEG
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 1
63368: PUSH
63369: LD_INT 1
63371: NEG
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 2
63379: PUSH
63380: LD_INT 0
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 2
63389: PUSH
63390: LD_INT 1
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 2
63399: PUSH
63400: LD_INT 2
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 1
63409: PUSH
63410: LD_INT 2
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 0
63419: PUSH
63420: LD_INT 2
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 1
63429: NEG
63430: PUSH
63431: LD_INT 1
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 2
63440: NEG
63441: PUSH
63442: LD_INT 0
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 2
63451: NEG
63452: PUSH
63453: LD_INT 1
63455: NEG
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 2
63463: NEG
63464: PUSH
63465: LD_INT 2
63467: NEG
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63494: LD_ADDR_VAR 0 56
63498: PUSH
63499: LD_INT 0
63501: PUSH
63502: LD_INT 0
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 0
63511: PUSH
63512: LD_INT 1
63514: NEG
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: PUSH
63520: LD_INT 1
63522: PUSH
63523: LD_INT 0
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 1
63532: PUSH
63533: LD_INT 1
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: LD_INT 0
63542: PUSH
63543: LD_INT 1
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 1
63552: NEG
63553: PUSH
63554: LD_INT 0
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 1
63563: NEG
63564: PUSH
63565: LD_INT 1
63567: NEG
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 1
63575: NEG
63576: PUSH
63577: LD_INT 2
63579: NEG
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: PUSH
63585: LD_INT 0
63587: PUSH
63588: LD_INT 2
63590: NEG
63591: PUSH
63592: EMPTY
63593: LIST
63594: LIST
63595: PUSH
63596: LD_INT 1
63598: PUSH
63599: LD_INT 1
63601: NEG
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: PUSH
63607: LD_INT 2
63609: PUSH
63610: LD_INT 0
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: LD_INT 2
63619: PUSH
63620: LD_INT 1
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: LD_INT 2
63629: PUSH
63630: LD_INT 2
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_INT 1
63639: PUSH
63640: LD_INT 2
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 0
63649: PUSH
63650: LD_INT 2
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PUSH
63657: LD_INT 1
63659: NEG
63660: PUSH
63661: LD_INT 1
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 2
63670: NEG
63671: PUSH
63672: LD_INT 0
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_INT 2
63681: NEG
63682: PUSH
63683: LD_INT 1
63685: NEG
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 2
63693: NEG
63694: PUSH
63695: LD_INT 2
63697: NEG
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: LIST
63719: LIST
63720: LIST
63721: LIST
63722: LIST
63723: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63724: LD_ADDR_VAR 0 57
63728: PUSH
63729: LD_INT 0
63731: PUSH
63732: LD_INT 0
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: LD_INT 0
63741: PUSH
63742: LD_INT 1
63744: NEG
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: PUSH
63750: LD_INT 1
63752: PUSH
63753: LD_INT 0
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 1
63762: PUSH
63763: LD_INT 1
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: LD_INT 0
63772: PUSH
63773: LD_INT 1
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 1
63782: NEG
63783: PUSH
63784: LD_INT 0
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 1
63793: NEG
63794: PUSH
63795: LD_INT 1
63797: NEG
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_INT 1
63805: NEG
63806: PUSH
63807: LD_INT 2
63809: NEG
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 0
63817: PUSH
63818: LD_INT 2
63820: NEG
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 1
63828: PUSH
63829: LD_INT 1
63831: NEG
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 2
63839: PUSH
63840: LD_INT 0
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 2
63849: PUSH
63850: LD_INT 1
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: LD_INT 2
63859: PUSH
63860: LD_INT 2
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: LD_INT 1
63869: PUSH
63870: LD_INT 2
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: LD_INT 0
63879: PUSH
63880: LD_INT 2
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_INT 1
63889: NEG
63890: PUSH
63891: LD_INT 1
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 2
63900: NEG
63901: PUSH
63902: LD_INT 0
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: PUSH
63909: LD_INT 2
63911: NEG
63912: PUSH
63913: LD_INT 1
63915: NEG
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PUSH
63921: LD_INT 2
63923: NEG
63924: PUSH
63925: LD_INT 2
63927: NEG
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63954: LD_ADDR_VAR 0 58
63958: PUSH
63959: LD_INT 0
63961: PUSH
63962: LD_INT 0
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: LD_INT 0
63971: PUSH
63972: LD_INT 1
63974: NEG
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: LD_INT 1
63982: PUSH
63983: LD_INT 0
63985: PUSH
63986: EMPTY
63987: LIST
63988: LIST
63989: PUSH
63990: LD_INT 1
63992: PUSH
63993: LD_INT 1
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: PUSH
64000: LD_INT 0
64002: PUSH
64003: LD_INT 1
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: PUSH
64010: LD_INT 1
64012: NEG
64013: PUSH
64014: LD_INT 0
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: LD_INT 1
64023: NEG
64024: PUSH
64025: LD_INT 1
64027: NEG
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PUSH
64033: LD_INT 1
64035: NEG
64036: PUSH
64037: LD_INT 2
64039: NEG
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: LD_INT 0
64047: PUSH
64048: LD_INT 2
64050: NEG
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PUSH
64056: LD_INT 1
64058: PUSH
64059: LD_INT 1
64061: NEG
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: PUSH
64067: LD_INT 2
64069: PUSH
64070: LD_INT 0
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: LD_INT 2
64079: PUSH
64080: LD_INT 1
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PUSH
64087: LD_INT 2
64089: PUSH
64090: LD_INT 2
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: PUSH
64097: LD_INT 1
64099: PUSH
64100: LD_INT 2
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: PUSH
64107: LD_INT 0
64109: PUSH
64110: LD_INT 2
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: PUSH
64117: LD_INT 1
64119: NEG
64120: PUSH
64121: LD_INT 1
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PUSH
64128: LD_INT 2
64130: NEG
64131: PUSH
64132: LD_INT 0
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: PUSH
64139: LD_INT 2
64141: NEG
64142: PUSH
64143: LD_INT 1
64145: NEG
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: PUSH
64151: LD_INT 2
64153: NEG
64154: PUSH
64155: LD_INT 2
64157: NEG
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: LIST
64178: LIST
64179: LIST
64180: LIST
64181: LIST
64182: LIST
64183: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64184: LD_ADDR_VAR 0 59
64188: PUSH
64189: LD_INT 0
64191: PUSH
64192: LD_INT 0
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 0
64201: PUSH
64202: LD_INT 1
64204: NEG
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: LD_INT 1
64212: PUSH
64213: LD_INT 0
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: LD_INT 1
64222: PUSH
64223: LD_INT 1
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 0
64232: PUSH
64233: LD_INT 1
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: PUSH
64240: LD_INT 1
64242: NEG
64243: PUSH
64244: LD_INT 0
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: PUSH
64251: LD_INT 1
64253: NEG
64254: PUSH
64255: LD_INT 1
64257: NEG
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: LIST
64267: LIST
64268: LIST
64269: LIST
64270: LIST
64271: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64272: LD_ADDR_VAR 0 60
64276: PUSH
64277: LD_INT 0
64279: PUSH
64280: LD_INT 0
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 0
64289: PUSH
64290: LD_INT 1
64292: NEG
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: LD_INT 1
64300: PUSH
64301: LD_INT 0
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 1
64310: PUSH
64311: LD_INT 1
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PUSH
64318: LD_INT 0
64320: PUSH
64321: LD_INT 1
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 1
64330: NEG
64331: PUSH
64332: LD_INT 0
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: LD_INT 1
64341: NEG
64342: PUSH
64343: LD_INT 1
64345: NEG
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: LIST
64355: LIST
64356: LIST
64357: LIST
64358: LIST
64359: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64360: LD_ADDR_VAR 0 61
64364: PUSH
64365: LD_INT 0
64367: PUSH
64368: LD_INT 0
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PUSH
64375: LD_INT 0
64377: PUSH
64378: LD_INT 1
64380: NEG
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: PUSH
64386: LD_INT 1
64388: PUSH
64389: LD_INT 0
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 1
64398: PUSH
64399: LD_INT 1
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: PUSH
64406: LD_INT 0
64408: PUSH
64409: LD_INT 1
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PUSH
64416: LD_INT 1
64418: NEG
64419: PUSH
64420: LD_INT 0
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 1
64429: NEG
64430: PUSH
64431: LD_INT 1
64433: NEG
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64448: LD_ADDR_VAR 0 62
64452: PUSH
64453: LD_INT 0
64455: PUSH
64456: LD_INT 0
64458: PUSH
64459: EMPTY
64460: LIST
64461: LIST
64462: PUSH
64463: LD_INT 0
64465: PUSH
64466: LD_INT 1
64468: NEG
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_INT 1
64476: PUSH
64477: LD_INT 0
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: LD_INT 1
64486: PUSH
64487: LD_INT 1
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: LD_INT 0
64496: PUSH
64497: LD_INT 1
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: PUSH
64504: LD_INT 1
64506: NEG
64507: PUSH
64508: LD_INT 0
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 1
64517: NEG
64518: PUSH
64519: LD_INT 1
64521: NEG
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: PUSH
64527: EMPTY
64528: LIST
64529: LIST
64530: LIST
64531: LIST
64532: LIST
64533: LIST
64534: LIST
64535: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64536: LD_ADDR_VAR 0 63
64540: PUSH
64541: LD_INT 0
64543: PUSH
64544: LD_INT 0
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 0
64553: PUSH
64554: LD_INT 1
64556: NEG
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 1
64564: PUSH
64565: LD_INT 0
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 1
64574: PUSH
64575: LD_INT 1
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: LD_INT 0
64584: PUSH
64585: LD_INT 1
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: LD_INT 1
64594: NEG
64595: PUSH
64596: LD_INT 0
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 1
64605: NEG
64606: PUSH
64607: LD_INT 1
64609: NEG
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64624: LD_ADDR_VAR 0 64
64628: PUSH
64629: LD_INT 0
64631: PUSH
64632: LD_INT 0
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: LD_INT 0
64641: PUSH
64642: LD_INT 1
64644: NEG
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 1
64652: PUSH
64653: LD_INT 0
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: LD_INT 1
64662: PUSH
64663: LD_INT 1
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: LD_INT 0
64672: PUSH
64673: LD_INT 1
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PUSH
64680: LD_INT 1
64682: NEG
64683: PUSH
64684: LD_INT 0
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: PUSH
64691: LD_INT 1
64693: NEG
64694: PUSH
64695: LD_INT 1
64697: NEG
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: ST_TO_ADDR
// end ; 1 :
64712: GO 70609
64714: LD_INT 1
64716: DOUBLE
64717: EQUAL
64718: IFTRUE 64722
64720: GO 67345
64722: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64723: LD_ADDR_VAR 0 11
64727: PUSH
64728: LD_INT 1
64730: NEG
64731: PUSH
64732: LD_INT 3
64734: NEG
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: LD_INT 0
64742: PUSH
64743: LD_INT 3
64745: NEG
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: PUSH
64751: LD_INT 1
64753: PUSH
64754: LD_INT 2
64756: NEG
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: LIST
64766: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64767: LD_ADDR_VAR 0 12
64771: PUSH
64772: LD_INT 2
64774: PUSH
64775: LD_INT 1
64777: NEG
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: PUSH
64783: LD_INT 3
64785: PUSH
64786: LD_INT 0
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: PUSH
64793: LD_INT 3
64795: PUSH
64796: LD_INT 1
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: EMPTY
64804: LIST
64805: LIST
64806: LIST
64807: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64808: LD_ADDR_VAR 0 13
64812: PUSH
64813: LD_INT 3
64815: PUSH
64816: LD_INT 2
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: PUSH
64823: LD_INT 3
64825: PUSH
64826: LD_INT 3
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 2
64835: PUSH
64836: LD_INT 3
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: LIST
64847: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64848: LD_ADDR_VAR 0 14
64852: PUSH
64853: LD_INT 1
64855: PUSH
64856: LD_INT 3
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: PUSH
64863: LD_INT 0
64865: PUSH
64866: LD_INT 3
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: LD_INT 1
64875: NEG
64876: PUSH
64877: LD_INT 2
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: LIST
64888: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64889: LD_ADDR_VAR 0 15
64893: PUSH
64894: LD_INT 2
64896: NEG
64897: PUSH
64898: LD_INT 1
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: PUSH
64905: LD_INT 3
64907: NEG
64908: PUSH
64909: LD_INT 0
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: LD_INT 3
64918: NEG
64919: PUSH
64920: LD_INT 1
64922: NEG
64923: PUSH
64924: EMPTY
64925: LIST
64926: LIST
64927: PUSH
64928: EMPTY
64929: LIST
64930: LIST
64931: LIST
64932: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64933: LD_ADDR_VAR 0 16
64937: PUSH
64938: LD_INT 2
64940: NEG
64941: PUSH
64942: LD_INT 3
64944: NEG
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: PUSH
64950: LD_INT 3
64952: NEG
64953: PUSH
64954: LD_INT 2
64956: NEG
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: PUSH
64962: LD_INT 3
64964: NEG
64965: PUSH
64966: LD_INT 3
64968: NEG
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: EMPTY
64975: LIST
64976: LIST
64977: LIST
64978: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64979: LD_ADDR_VAR 0 17
64983: PUSH
64984: LD_INT 1
64986: NEG
64987: PUSH
64988: LD_INT 3
64990: NEG
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: PUSH
64996: LD_INT 0
64998: PUSH
64999: LD_INT 3
65001: NEG
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: PUSH
65007: LD_INT 1
65009: PUSH
65010: LD_INT 2
65012: NEG
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: PUSH
65018: EMPTY
65019: LIST
65020: LIST
65021: LIST
65022: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65023: LD_ADDR_VAR 0 18
65027: PUSH
65028: LD_INT 2
65030: PUSH
65031: LD_INT 1
65033: NEG
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: LD_INT 3
65041: PUSH
65042: LD_INT 0
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 3
65051: PUSH
65052: LD_INT 1
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: LIST
65063: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65064: LD_ADDR_VAR 0 19
65068: PUSH
65069: LD_INT 3
65071: PUSH
65072: LD_INT 2
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 3
65081: PUSH
65082: LD_INT 3
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PUSH
65089: LD_INT 2
65091: PUSH
65092: LD_INT 3
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: LIST
65103: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65104: LD_ADDR_VAR 0 20
65108: PUSH
65109: LD_INT 1
65111: PUSH
65112: LD_INT 3
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: PUSH
65119: LD_INT 0
65121: PUSH
65122: LD_INT 3
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: PUSH
65129: LD_INT 1
65131: NEG
65132: PUSH
65133: LD_INT 2
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: LIST
65144: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65145: LD_ADDR_VAR 0 21
65149: PUSH
65150: LD_INT 2
65152: NEG
65153: PUSH
65154: LD_INT 1
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: LD_INT 3
65163: NEG
65164: PUSH
65165: LD_INT 0
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: PUSH
65172: LD_INT 3
65174: NEG
65175: PUSH
65176: LD_INT 1
65178: NEG
65179: PUSH
65180: EMPTY
65181: LIST
65182: LIST
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: LIST
65188: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65189: LD_ADDR_VAR 0 22
65193: PUSH
65194: LD_INT 2
65196: NEG
65197: PUSH
65198: LD_INT 3
65200: NEG
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 3
65208: NEG
65209: PUSH
65210: LD_INT 2
65212: NEG
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: PUSH
65218: LD_INT 3
65220: NEG
65221: PUSH
65222: LD_INT 3
65224: NEG
65225: PUSH
65226: EMPTY
65227: LIST
65228: LIST
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: LIST
65234: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65235: LD_ADDR_VAR 0 23
65239: PUSH
65240: LD_INT 0
65242: PUSH
65243: LD_INT 3
65245: NEG
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: PUSH
65251: LD_INT 1
65253: NEG
65254: PUSH
65255: LD_INT 4
65257: NEG
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 1
65265: PUSH
65266: LD_INT 3
65268: NEG
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: LIST
65278: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65279: LD_ADDR_VAR 0 24
65283: PUSH
65284: LD_INT 3
65286: PUSH
65287: LD_INT 0
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PUSH
65294: LD_INT 3
65296: PUSH
65297: LD_INT 1
65299: NEG
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: PUSH
65305: LD_INT 4
65307: PUSH
65308: LD_INT 1
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: LIST
65319: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65320: LD_ADDR_VAR 0 25
65324: PUSH
65325: LD_INT 3
65327: PUSH
65328: LD_INT 3
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: LD_INT 4
65337: PUSH
65338: LD_INT 3
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: PUSH
65345: LD_INT 3
65347: PUSH
65348: LD_INT 4
65350: PUSH
65351: EMPTY
65352: LIST
65353: LIST
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: LIST
65359: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65360: LD_ADDR_VAR 0 26
65364: PUSH
65365: LD_INT 0
65367: PUSH
65368: LD_INT 3
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: PUSH
65375: LD_INT 1
65377: PUSH
65378: LD_INT 4
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PUSH
65385: LD_INT 1
65387: NEG
65388: PUSH
65389: LD_INT 3
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: LIST
65400: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65401: LD_ADDR_VAR 0 27
65405: PUSH
65406: LD_INT 3
65408: NEG
65409: PUSH
65410: LD_INT 0
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: PUSH
65417: LD_INT 3
65419: NEG
65420: PUSH
65421: LD_INT 1
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: PUSH
65428: LD_INT 4
65430: NEG
65431: PUSH
65432: LD_INT 1
65434: NEG
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: LIST
65444: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65445: LD_ADDR_VAR 0 28
65449: PUSH
65450: LD_INT 3
65452: NEG
65453: PUSH
65454: LD_INT 3
65456: NEG
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: PUSH
65462: LD_INT 3
65464: NEG
65465: PUSH
65466: LD_INT 4
65468: NEG
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: PUSH
65474: LD_INT 4
65476: NEG
65477: PUSH
65478: LD_INT 3
65480: NEG
65481: PUSH
65482: EMPTY
65483: LIST
65484: LIST
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: LIST
65490: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65491: LD_ADDR_VAR 0 29
65495: PUSH
65496: LD_INT 1
65498: NEG
65499: PUSH
65500: LD_INT 3
65502: NEG
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: PUSH
65508: LD_INT 0
65510: PUSH
65511: LD_INT 3
65513: NEG
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: PUSH
65519: LD_INT 1
65521: PUSH
65522: LD_INT 2
65524: NEG
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: LD_INT 1
65532: NEG
65533: PUSH
65534: LD_INT 4
65536: NEG
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: PUSH
65542: LD_INT 0
65544: PUSH
65545: LD_INT 4
65547: NEG
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: PUSH
65553: LD_INT 1
65555: PUSH
65556: LD_INT 3
65558: NEG
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: PUSH
65564: LD_INT 1
65566: NEG
65567: PUSH
65568: LD_INT 5
65570: NEG
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: PUSH
65576: LD_INT 0
65578: PUSH
65579: LD_INT 5
65581: NEG
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: LD_INT 1
65589: PUSH
65590: LD_INT 4
65592: NEG
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PUSH
65598: LD_INT 1
65600: NEG
65601: PUSH
65602: LD_INT 6
65604: NEG
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: LD_INT 0
65612: PUSH
65613: LD_INT 6
65615: NEG
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: PUSH
65621: LD_INT 1
65623: PUSH
65624: LD_INT 5
65626: NEG
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: LIST
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: LIST
65644: LIST
65645: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65646: LD_ADDR_VAR 0 30
65650: PUSH
65651: LD_INT 2
65653: PUSH
65654: LD_INT 1
65656: NEG
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 3
65664: PUSH
65665: LD_INT 0
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: LD_INT 3
65674: PUSH
65675: LD_INT 1
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: PUSH
65682: LD_INT 3
65684: PUSH
65685: LD_INT 1
65687: NEG
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PUSH
65693: LD_INT 4
65695: PUSH
65696: LD_INT 0
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 4
65705: PUSH
65706: LD_INT 1
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: PUSH
65713: LD_INT 4
65715: PUSH
65716: LD_INT 1
65718: NEG
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: LD_INT 5
65726: PUSH
65727: LD_INT 0
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 5
65736: PUSH
65737: LD_INT 1
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: PUSH
65744: LD_INT 5
65746: PUSH
65747: LD_INT 1
65749: NEG
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: LD_INT 6
65757: PUSH
65758: LD_INT 0
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: LD_INT 6
65767: PUSH
65768: LD_INT 1
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: LIST
65785: LIST
65786: LIST
65787: LIST
65788: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65789: LD_ADDR_VAR 0 31
65793: PUSH
65794: LD_INT 3
65796: PUSH
65797: LD_INT 2
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: PUSH
65804: LD_INT 3
65806: PUSH
65807: LD_INT 3
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: PUSH
65814: LD_INT 2
65816: PUSH
65817: LD_INT 3
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: PUSH
65824: LD_INT 4
65826: PUSH
65827: LD_INT 3
65829: PUSH
65830: EMPTY
65831: LIST
65832: LIST
65833: PUSH
65834: LD_INT 4
65836: PUSH
65837: LD_INT 4
65839: PUSH
65840: EMPTY
65841: LIST
65842: LIST
65843: PUSH
65844: LD_INT 3
65846: PUSH
65847: LD_INT 4
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: PUSH
65854: LD_INT 5
65856: PUSH
65857: LD_INT 4
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: PUSH
65864: LD_INT 5
65866: PUSH
65867: LD_INT 5
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: LD_INT 4
65876: PUSH
65877: LD_INT 5
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: PUSH
65884: LD_INT 6
65886: PUSH
65887: LD_INT 5
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: PUSH
65894: LD_INT 6
65896: PUSH
65897: LD_INT 6
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PUSH
65904: LD_INT 5
65906: PUSH
65907: LD_INT 6
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: LIST
65918: LIST
65919: LIST
65920: LIST
65921: LIST
65922: LIST
65923: LIST
65924: LIST
65925: LIST
65926: LIST
65927: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65928: LD_ADDR_VAR 0 32
65932: PUSH
65933: LD_INT 1
65935: PUSH
65936: LD_INT 3
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PUSH
65943: LD_INT 0
65945: PUSH
65946: LD_INT 3
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: PUSH
65953: LD_INT 1
65955: NEG
65956: PUSH
65957: LD_INT 2
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: LD_INT 1
65966: PUSH
65967: LD_INT 4
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: LD_INT 0
65976: PUSH
65977: LD_INT 4
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: LD_INT 1
65986: NEG
65987: PUSH
65988: LD_INT 3
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: PUSH
65995: LD_INT 1
65997: PUSH
65998: LD_INT 5
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: LD_INT 0
66007: PUSH
66008: LD_INT 5
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: PUSH
66015: LD_INT 1
66017: NEG
66018: PUSH
66019: LD_INT 4
66021: PUSH
66022: EMPTY
66023: LIST
66024: LIST
66025: PUSH
66026: LD_INT 1
66028: PUSH
66029: LD_INT 6
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: PUSH
66036: LD_INT 0
66038: PUSH
66039: LD_INT 6
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: LD_INT 1
66048: NEG
66049: PUSH
66050: LD_INT 5
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: LIST
66061: LIST
66062: LIST
66063: LIST
66064: LIST
66065: LIST
66066: LIST
66067: LIST
66068: LIST
66069: LIST
66070: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66071: LD_ADDR_VAR 0 33
66075: PUSH
66076: LD_INT 2
66078: NEG
66079: PUSH
66080: LD_INT 1
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: PUSH
66087: LD_INT 3
66089: NEG
66090: PUSH
66091: LD_INT 0
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: PUSH
66098: LD_INT 3
66100: NEG
66101: PUSH
66102: LD_INT 1
66104: NEG
66105: PUSH
66106: EMPTY
66107: LIST
66108: LIST
66109: PUSH
66110: LD_INT 3
66112: NEG
66113: PUSH
66114: LD_INT 1
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: PUSH
66121: LD_INT 4
66123: NEG
66124: PUSH
66125: LD_INT 0
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: PUSH
66132: LD_INT 4
66134: NEG
66135: PUSH
66136: LD_INT 1
66138: NEG
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: PUSH
66144: LD_INT 4
66146: NEG
66147: PUSH
66148: LD_INT 1
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: PUSH
66155: LD_INT 5
66157: NEG
66158: PUSH
66159: LD_INT 0
66161: PUSH
66162: EMPTY
66163: LIST
66164: LIST
66165: PUSH
66166: LD_INT 5
66168: NEG
66169: PUSH
66170: LD_INT 1
66172: NEG
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PUSH
66178: LD_INT 5
66180: NEG
66181: PUSH
66182: LD_INT 1
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 6
66191: NEG
66192: PUSH
66193: LD_INT 0
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: PUSH
66200: LD_INT 6
66202: NEG
66203: PUSH
66204: LD_INT 1
66206: NEG
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: LIST
66218: LIST
66219: LIST
66220: LIST
66221: LIST
66222: LIST
66223: LIST
66224: LIST
66225: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66226: LD_ADDR_VAR 0 34
66230: PUSH
66231: LD_INT 2
66233: NEG
66234: PUSH
66235: LD_INT 3
66237: NEG
66238: PUSH
66239: EMPTY
66240: LIST
66241: LIST
66242: PUSH
66243: LD_INT 3
66245: NEG
66246: PUSH
66247: LD_INT 2
66249: NEG
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: PUSH
66255: LD_INT 3
66257: NEG
66258: PUSH
66259: LD_INT 3
66261: NEG
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: PUSH
66267: LD_INT 3
66269: NEG
66270: PUSH
66271: LD_INT 4
66273: NEG
66274: PUSH
66275: EMPTY
66276: LIST
66277: LIST
66278: PUSH
66279: LD_INT 4
66281: NEG
66282: PUSH
66283: LD_INT 3
66285: NEG
66286: PUSH
66287: EMPTY
66288: LIST
66289: LIST
66290: PUSH
66291: LD_INT 4
66293: NEG
66294: PUSH
66295: LD_INT 4
66297: NEG
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: PUSH
66303: LD_INT 4
66305: NEG
66306: PUSH
66307: LD_INT 5
66309: NEG
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: PUSH
66315: LD_INT 5
66317: NEG
66318: PUSH
66319: LD_INT 4
66321: NEG
66322: PUSH
66323: EMPTY
66324: LIST
66325: LIST
66326: PUSH
66327: LD_INT 5
66329: NEG
66330: PUSH
66331: LD_INT 5
66333: NEG
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: PUSH
66339: LD_INT 5
66341: NEG
66342: PUSH
66343: LD_INT 6
66345: NEG
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: PUSH
66351: LD_INT 6
66353: NEG
66354: PUSH
66355: LD_INT 5
66357: NEG
66358: PUSH
66359: EMPTY
66360: LIST
66361: LIST
66362: PUSH
66363: LD_INT 6
66365: NEG
66366: PUSH
66367: LD_INT 6
66369: NEG
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: PUSH
66375: EMPTY
66376: LIST
66377: LIST
66378: LIST
66379: LIST
66380: LIST
66381: LIST
66382: LIST
66383: LIST
66384: LIST
66385: LIST
66386: LIST
66387: LIST
66388: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66389: LD_ADDR_VAR 0 41
66393: PUSH
66394: LD_INT 0
66396: PUSH
66397: LD_INT 2
66399: NEG
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: LD_INT 1
66407: NEG
66408: PUSH
66409: LD_INT 3
66411: NEG
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PUSH
66417: LD_INT 1
66419: PUSH
66420: LD_INT 2
66422: NEG
66423: PUSH
66424: EMPTY
66425: LIST
66426: LIST
66427: PUSH
66428: EMPTY
66429: LIST
66430: LIST
66431: LIST
66432: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66433: LD_ADDR_VAR 0 42
66437: PUSH
66438: LD_INT 2
66440: PUSH
66441: LD_INT 0
66443: PUSH
66444: EMPTY
66445: LIST
66446: LIST
66447: PUSH
66448: LD_INT 2
66450: PUSH
66451: LD_INT 1
66453: NEG
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: PUSH
66459: LD_INT 3
66461: PUSH
66462: LD_INT 1
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: LIST
66473: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66474: LD_ADDR_VAR 0 43
66478: PUSH
66479: LD_INT 2
66481: PUSH
66482: LD_INT 2
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: LD_INT 3
66491: PUSH
66492: LD_INT 2
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: PUSH
66499: LD_INT 2
66501: PUSH
66502: LD_INT 3
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: LIST
66513: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66514: LD_ADDR_VAR 0 44
66518: PUSH
66519: LD_INT 0
66521: PUSH
66522: LD_INT 2
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: PUSH
66529: LD_INT 1
66531: PUSH
66532: LD_INT 3
66534: PUSH
66535: EMPTY
66536: LIST
66537: LIST
66538: PUSH
66539: LD_INT 1
66541: NEG
66542: PUSH
66543: LD_INT 2
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: LIST
66554: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66555: LD_ADDR_VAR 0 45
66559: PUSH
66560: LD_INT 2
66562: NEG
66563: PUSH
66564: LD_INT 0
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: PUSH
66571: LD_INT 2
66573: NEG
66574: PUSH
66575: LD_INT 1
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: LD_INT 3
66584: NEG
66585: PUSH
66586: LD_INT 1
66588: NEG
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: LIST
66598: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66599: LD_ADDR_VAR 0 46
66603: PUSH
66604: LD_INT 2
66606: NEG
66607: PUSH
66608: LD_INT 2
66610: NEG
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: PUSH
66616: LD_INT 2
66618: NEG
66619: PUSH
66620: LD_INT 3
66622: NEG
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: LD_INT 3
66630: NEG
66631: PUSH
66632: LD_INT 2
66634: NEG
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: LIST
66644: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66645: LD_ADDR_VAR 0 47
66649: PUSH
66650: LD_INT 2
66652: NEG
66653: PUSH
66654: LD_INT 3
66656: NEG
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: PUSH
66662: LD_INT 1
66664: NEG
66665: PUSH
66666: LD_INT 3
66668: NEG
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: PUSH
66674: EMPTY
66675: LIST
66676: LIST
66677: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66678: LD_ADDR_VAR 0 48
66682: PUSH
66683: LD_INT 1
66685: PUSH
66686: LD_INT 2
66688: NEG
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: LD_INT 2
66696: PUSH
66697: LD_INT 1
66699: NEG
66700: PUSH
66701: EMPTY
66702: LIST
66703: LIST
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66709: LD_ADDR_VAR 0 49
66713: PUSH
66714: LD_INT 3
66716: PUSH
66717: LD_INT 1
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: PUSH
66724: LD_INT 3
66726: PUSH
66727: LD_INT 2
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: PUSH
66734: EMPTY
66735: LIST
66736: LIST
66737: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66738: LD_ADDR_VAR 0 50
66742: PUSH
66743: LD_INT 2
66745: PUSH
66746: LD_INT 3
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: LD_INT 1
66755: PUSH
66756: LD_INT 3
66758: PUSH
66759: EMPTY
66760: LIST
66761: LIST
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66767: LD_ADDR_VAR 0 51
66771: PUSH
66772: LD_INT 1
66774: NEG
66775: PUSH
66776: LD_INT 2
66778: PUSH
66779: EMPTY
66780: LIST
66781: LIST
66782: PUSH
66783: LD_INT 2
66785: NEG
66786: PUSH
66787: LD_INT 1
66789: PUSH
66790: EMPTY
66791: LIST
66792: LIST
66793: PUSH
66794: EMPTY
66795: LIST
66796: LIST
66797: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66798: LD_ADDR_VAR 0 52
66802: PUSH
66803: LD_INT 3
66805: NEG
66806: PUSH
66807: LD_INT 1
66809: NEG
66810: PUSH
66811: EMPTY
66812: LIST
66813: LIST
66814: PUSH
66815: LD_INT 3
66817: NEG
66818: PUSH
66819: LD_INT 2
66821: NEG
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66831: LD_ADDR_VAR 0 53
66835: PUSH
66836: LD_INT 1
66838: NEG
66839: PUSH
66840: LD_INT 3
66842: NEG
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: PUSH
66848: LD_INT 0
66850: PUSH
66851: LD_INT 3
66853: NEG
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: LD_INT 1
66861: PUSH
66862: LD_INT 2
66864: NEG
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: LIST
66874: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66875: LD_ADDR_VAR 0 54
66879: PUSH
66880: LD_INT 2
66882: PUSH
66883: LD_INT 1
66885: NEG
66886: PUSH
66887: EMPTY
66888: LIST
66889: LIST
66890: PUSH
66891: LD_INT 3
66893: PUSH
66894: LD_INT 0
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: PUSH
66901: LD_INT 3
66903: PUSH
66904: LD_INT 1
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: LIST
66915: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66916: LD_ADDR_VAR 0 55
66920: PUSH
66921: LD_INT 3
66923: PUSH
66924: LD_INT 2
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: PUSH
66931: LD_INT 3
66933: PUSH
66934: LD_INT 3
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: PUSH
66941: LD_INT 2
66943: PUSH
66944: LD_INT 3
66946: PUSH
66947: EMPTY
66948: LIST
66949: LIST
66950: PUSH
66951: EMPTY
66952: LIST
66953: LIST
66954: LIST
66955: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66956: LD_ADDR_VAR 0 56
66960: PUSH
66961: LD_INT 1
66963: PUSH
66964: LD_INT 3
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: PUSH
66971: LD_INT 0
66973: PUSH
66974: LD_INT 3
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: PUSH
66981: LD_INT 1
66983: NEG
66984: PUSH
66985: LD_INT 2
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: LIST
66996: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66997: LD_ADDR_VAR 0 57
67001: PUSH
67002: LD_INT 2
67004: NEG
67005: PUSH
67006: LD_INT 1
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: PUSH
67013: LD_INT 3
67015: NEG
67016: PUSH
67017: LD_INT 0
67019: PUSH
67020: EMPTY
67021: LIST
67022: LIST
67023: PUSH
67024: LD_INT 3
67026: NEG
67027: PUSH
67028: LD_INT 1
67030: NEG
67031: PUSH
67032: EMPTY
67033: LIST
67034: LIST
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: LIST
67040: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67041: LD_ADDR_VAR 0 58
67045: PUSH
67046: LD_INT 2
67048: NEG
67049: PUSH
67050: LD_INT 3
67052: NEG
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: LD_INT 3
67060: NEG
67061: PUSH
67062: LD_INT 2
67064: NEG
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: PUSH
67070: LD_INT 3
67072: NEG
67073: PUSH
67074: LD_INT 3
67076: NEG
67077: PUSH
67078: EMPTY
67079: LIST
67080: LIST
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: LIST
67086: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67087: LD_ADDR_VAR 0 59
67091: PUSH
67092: LD_INT 1
67094: NEG
67095: PUSH
67096: LD_INT 2
67098: NEG
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: PUSH
67104: LD_INT 0
67106: PUSH
67107: LD_INT 2
67109: NEG
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: PUSH
67115: LD_INT 1
67117: PUSH
67118: LD_INT 1
67120: NEG
67121: PUSH
67122: EMPTY
67123: LIST
67124: LIST
67125: PUSH
67126: EMPTY
67127: LIST
67128: LIST
67129: LIST
67130: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67131: LD_ADDR_VAR 0 60
67135: PUSH
67136: LD_INT 1
67138: PUSH
67139: LD_INT 1
67141: NEG
67142: PUSH
67143: EMPTY
67144: LIST
67145: LIST
67146: PUSH
67147: LD_INT 2
67149: PUSH
67150: LD_INT 0
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: PUSH
67157: LD_INT 2
67159: PUSH
67160: LD_INT 1
67162: PUSH
67163: EMPTY
67164: LIST
67165: LIST
67166: PUSH
67167: EMPTY
67168: LIST
67169: LIST
67170: LIST
67171: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67172: LD_ADDR_VAR 0 61
67176: PUSH
67177: LD_INT 2
67179: PUSH
67180: LD_INT 1
67182: PUSH
67183: EMPTY
67184: LIST
67185: LIST
67186: PUSH
67187: LD_INT 2
67189: PUSH
67190: LD_INT 2
67192: PUSH
67193: EMPTY
67194: LIST
67195: LIST
67196: PUSH
67197: LD_INT 1
67199: PUSH
67200: LD_INT 2
67202: PUSH
67203: EMPTY
67204: LIST
67205: LIST
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: LIST
67211: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67212: LD_ADDR_VAR 0 62
67216: PUSH
67217: LD_INT 1
67219: PUSH
67220: LD_INT 2
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: PUSH
67227: LD_INT 0
67229: PUSH
67230: LD_INT 2
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PUSH
67237: LD_INT 1
67239: NEG
67240: PUSH
67241: LD_INT 1
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: PUSH
67248: EMPTY
67249: LIST
67250: LIST
67251: LIST
67252: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67253: LD_ADDR_VAR 0 63
67257: PUSH
67258: LD_INT 1
67260: NEG
67261: PUSH
67262: LD_INT 1
67264: PUSH
67265: EMPTY
67266: LIST
67267: LIST
67268: PUSH
67269: LD_INT 2
67271: NEG
67272: PUSH
67273: LD_INT 0
67275: PUSH
67276: EMPTY
67277: LIST
67278: LIST
67279: PUSH
67280: LD_INT 2
67282: NEG
67283: PUSH
67284: LD_INT 1
67286: NEG
67287: PUSH
67288: EMPTY
67289: LIST
67290: LIST
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: LIST
67296: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67297: LD_ADDR_VAR 0 64
67301: PUSH
67302: LD_INT 1
67304: NEG
67305: PUSH
67306: LD_INT 2
67308: NEG
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: PUSH
67314: LD_INT 2
67316: NEG
67317: PUSH
67318: LD_INT 1
67320: NEG
67321: PUSH
67322: EMPTY
67323: LIST
67324: LIST
67325: PUSH
67326: LD_INT 2
67328: NEG
67329: PUSH
67330: LD_INT 2
67332: NEG
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: PUSH
67338: EMPTY
67339: LIST
67340: LIST
67341: LIST
67342: ST_TO_ADDR
// end ; 2 :
67343: GO 70609
67345: LD_INT 2
67347: DOUBLE
67348: EQUAL
67349: IFTRUE 67353
67351: GO 70608
67353: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67354: LD_ADDR_VAR 0 29
67358: PUSH
67359: LD_INT 4
67361: PUSH
67362: LD_INT 0
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: LD_INT 4
67371: PUSH
67372: LD_INT 1
67374: NEG
67375: PUSH
67376: EMPTY
67377: LIST
67378: LIST
67379: PUSH
67380: LD_INT 5
67382: PUSH
67383: LD_INT 0
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: PUSH
67390: LD_INT 5
67392: PUSH
67393: LD_INT 1
67395: PUSH
67396: EMPTY
67397: LIST
67398: LIST
67399: PUSH
67400: LD_INT 4
67402: PUSH
67403: LD_INT 1
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: LD_INT 3
67412: PUSH
67413: LD_INT 0
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: LD_INT 3
67422: PUSH
67423: LD_INT 1
67425: NEG
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: LD_INT 3
67433: PUSH
67434: LD_INT 2
67436: NEG
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: PUSH
67442: LD_INT 5
67444: PUSH
67445: LD_INT 2
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: PUSH
67452: LD_INT 3
67454: PUSH
67455: LD_INT 3
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: LD_INT 3
67464: PUSH
67465: LD_INT 2
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: LD_INT 4
67474: PUSH
67475: LD_INT 3
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: PUSH
67482: LD_INT 4
67484: PUSH
67485: LD_INT 4
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: PUSH
67492: LD_INT 3
67494: PUSH
67495: LD_INT 4
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: PUSH
67502: LD_INT 2
67504: PUSH
67505: LD_INT 3
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: PUSH
67512: LD_INT 2
67514: PUSH
67515: LD_INT 2
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: PUSH
67522: LD_INT 4
67524: PUSH
67525: LD_INT 2
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PUSH
67532: LD_INT 2
67534: PUSH
67535: LD_INT 4
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: LD_INT 0
67544: PUSH
67545: LD_INT 4
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: PUSH
67552: LD_INT 0
67554: PUSH
67555: LD_INT 3
67557: PUSH
67558: EMPTY
67559: LIST
67560: LIST
67561: PUSH
67562: LD_INT 1
67564: PUSH
67565: LD_INT 4
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: PUSH
67572: LD_INT 1
67574: PUSH
67575: LD_INT 5
67577: PUSH
67578: EMPTY
67579: LIST
67580: LIST
67581: PUSH
67582: LD_INT 0
67584: PUSH
67585: LD_INT 5
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: PUSH
67592: LD_INT 1
67594: NEG
67595: PUSH
67596: LD_INT 4
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: PUSH
67603: LD_INT 1
67605: NEG
67606: PUSH
67607: LD_INT 3
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PUSH
67614: LD_INT 2
67616: PUSH
67617: LD_INT 5
67619: PUSH
67620: EMPTY
67621: LIST
67622: LIST
67623: PUSH
67624: LD_INT 2
67626: NEG
67627: PUSH
67628: LD_INT 3
67630: PUSH
67631: EMPTY
67632: LIST
67633: LIST
67634: PUSH
67635: LD_INT 3
67637: NEG
67638: PUSH
67639: LD_INT 0
67641: PUSH
67642: EMPTY
67643: LIST
67644: LIST
67645: PUSH
67646: LD_INT 3
67648: NEG
67649: PUSH
67650: LD_INT 1
67652: NEG
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: LD_INT 2
67660: NEG
67661: PUSH
67662: LD_INT 0
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: PUSH
67669: LD_INT 2
67671: NEG
67672: PUSH
67673: LD_INT 1
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: PUSH
67680: LD_INT 3
67682: NEG
67683: PUSH
67684: LD_INT 1
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: PUSH
67691: LD_INT 4
67693: NEG
67694: PUSH
67695: LD_INT 0
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: PUSH
67702: LD_INT 4
67704: NEG
67705: PUSH
67706: LD_INT 1
67708: NEG
67709: PUSH
67710: EMPTY
67711: LIST
67712: LIST
67713: PUSH
67714: LD_INT 4
67716: NEG
67717: PUSH
67718: LD_INT 2
67720: NEG
67721: PUSH
67722: EMPTY
67723: LIST
67724: LIST
67725: PUSH
67726: LD_INT 2
67728: NEG
67729: PUSH
67730: LD_INT 2
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: PUSH
67737: LD_INT 4
67739: NEG
67740: PUSH
67741: LD_INT 4
67743: NEG
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: PUSH
67749: LD_INT 4
67751: NEG
67752: PUSH
67753: LD_INT 5
67755: NEG
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 3
67763: NEG
67764: PUSH
67765: LD_INT 4
67767: NEG
67768: PUSH
67769: EMPTY
67770: LIST
67771: LIST
67772: PUSH
67773: LD_INT 3
67775: NEG
67776: PUSH
67777: LD_INT 3
67779: NEG
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: PUSH
67785: LD_INT 4
67787: NEG
67788: PUSH
67789: LD_INT 3
67791: NEG
67792: PUSH
67793: EMPTY
67794: LIST
67795: LIST
67796: PUSH
67797: LD_INT 5
67799: NEG
67800: PUSH
67801: LD_INT 4
67803: NEG
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: PUSH
67809: LD_INT 5
67811: NEG
67812: PUSH
67813: LD_INT 5
67815: NEG
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: PUSH
67821: LD_INT 3
67823: NEG
67824: PUSH
67825: LD_INT 5
67827: NEG
67828: PUSH
67829: EMPTY
67830: LIST
67831: LIST
67832: PUSH
67833: LD_INT 5
67835: NEG
67836: PUSH
67837: LD_INT 3
67839: NEG
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: PUSH
67845: EMPTY
67846: LIST
67847: LIST
67848: LIST
67849: LIST
67850: LIST
67851: LIST
67852: LIST
67853: LIST
67854: LIST
67855: LIST
67856: LIST
67857: LIST
67858: LIST
67859: LIST
67860: LIST
67861: LIST
67862: LIST
67863: LIST
67864: LIST
67865: LIST
67866: LIST
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: LIST
67874: LIST
67875: LIST
67876: LIST
67877: LIST
67878: LIST
67879: LIST
67880: LIST
67881: LIST
67882: LIST
67883: LIST
67884: LIST
67885: LIST
67886: LIST
67887: LIST
67888: LIST
67889: LIST
67890: LIST
67891: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67892: LD_ADDR_VAR 0 30
67896: PUSH
67897: LD_INT 4
67899: PUSH
67900: LD_INT 4
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: LD_INT 4
67909: PUSH
67910: LD_INT 3
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: PUSH
67917: LD_INT 5
67919: PUSH
67920: LD_INT 4
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: PUSH
67927: LD_INT 5
67929: PUSH
67930: LD_INT 5
67932: PUSH
67933: EMPTY
67934: LIST
67935: LIST
67936: PUSH
67937: LD_INT 4
67939: PUSH
67940: LD_INT 5
67942: PUSH
67943: EMPTY
67944: LIST
67945: LIST
67946: PUSH
67947: LD_INT 3
67949: PUSH
67950: LD_INT 4
67952: PUSH
67953: EMPTY
67954: LIST
67955: LIST
67956: PUSH
67957: LD_INT 3
67959: PUSH
67960: LD_INT 3
67962: PUSH
67963: EMPTY
67964: LIST
67965: LIST
67966: PUSH
67967: LD_INT 5
67969: PUSH
67970: LD_INT 3
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: PUSH
67977: LD_INT 3
67979: PUSH
67980: LD_INT 5
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: PUSH
67987: LD_INT 0
67989: PUSH
67990: LD_INT 3
67992: PUSH
67993: EMPTY
67994: LIST
67995: LIST
67996: PUSH
67997: LD_INT 0
67999: PUSH
68000: LD_INT 2
68002: PUSH
68003: EMPTY
68004: LIST
68005: LIST
68006: PUSH
68007: LD_INT 1
68009: PUSH
68010: LD_INT 3
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: PUSH
68017: LD_INT 1
68019: PUSH
68020: LD_INT 4
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: PUSH
68027: LD_INT 0
68029: PUSH
68030: LD_INT 4
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: PUSH
68037: LD_INT 1
68039: NEG
68040: PUSH
68041: LD_INT 3
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: PUSH
68048: LD_INT 1
68050: NEG
68051: PUSH
68052: LD_INT 2
68054: PUSH
68055: EMPTY
68056: LIST
68057: LIST
68058: PUSH
68059: LD_INT 2
68061: PUSH
68062: LD_INT 4
68064: PUSH
68065: EMPTY
68066: LIST
68067: LIST
68068: PUSH
68069: LD_INT 2
68071: NEG
68072: PUSH
68073: LD_INT 2
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: PUSH
68080: LD_INT 4
68082: NEG
68083: PUSH
68084: LD_INT 0
68086: PUSH
68087: EMPTY
68088: LIST
68089: LIST
68090: PUSH
68091: LD_INT 4
68093: NEG
68094: PUSH
68095: LD_INT 1
68097: NEG
68098: PUSH
68099: EMPTY
68100: LIST
68101: LIST
68102: PUSH
68103: LD_INT 3
68105: NEG
68106: PUSH
68107: LD_INT 0
68109: PUSH
68110: EMPTY
68111: LIST
68112: LIST
68113: PUSH
68114: LD_INT 3
68116: NEG
68117: PUSH
68118: LD_INT 1
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: PUSH
68125: LD_INT 4
68127: NEG
68128: PUSH
68129: LD_INT 1
68131: PUSH
68132: EMPTY
68133: LIST
68134: LIST
68135: PUSH
68136: LD_INT 5
68138: NEG
68139: PUSH
68140: LD_INT 0
68142: PUSH
68143: EMPTY
68144: LIST
68145: LIST
68146: PUSH
68147: LD_INT 5
68149: NEG
68150: PUSH
68151: LD_INT 1
68153: NEG
68154: PUSH
68155: EMPTY
68156: LIST
68157: LIST
68158: PUSH
68159: LD_INT 5
68161: NEG
68162: PUSH
68163: LD_INT 2
68165: NEG
68166: PUSH
68167: EMPTY
68168: LIST
68169: LIST
68170: PUSH
68171: LD_INT 3
68173: NEG
68174: PUSH
68175: LD_INT 2
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: PUSH
68182: LD_INT 3
68184: NEG
68185: PUSH
68186: LD_INT 3
68188: NEG
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: PUSH
68194: LD_INT 3
68196: NEG
68197: PUSH
68198: LD_INT 4
68200: NEG
68201: PUSH
68202: EMPTY
68203: LIST
68204: LIST
68205: PUSH
68206: LD_INT 2
68208: NEG
68209: PUSH
68210: LD_INT 3
68212: NEG
68213: PUSH
68214: EMPTY
68215: LIST
68216: LIST
68217: PUSH
68218: LD_INT 2
68220: NEG
68221: PUSH
68222: LD_INT 2
68224: NEG
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: LD_INT 3
68232: NEG
68233: PUSH
68234: LD_INT 2
68236: NEG
68237: PUSH
68238: EMPTY
68239: LIST
68240: LIST
68241: PUSH
68242: LD_INT 4
68244: NEG
68245: PUSH
68246: LD_INT 3
68248: NEG
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: PUSH
68254: LD_INT 4
68256: NEG
68257: PUSH
68258: LD_INT 4
68260: NEG
68261: PUSH
68262: EMPTY
68263: LIST
68264: LIST
68265: PUSH
68266: LD_INT 2
68268: NEG
68269: PUSH
68270: LD_INT 4
68272: NEG
68273: PUSH
68274: EMPTY
68275: LIST
68276: LIST
68277: PUSH
68278: LD_INT 4
68280: NEG
68281: PUSH
68282: LD_INT 2
68284: NEG
68285: PUSH
68286: EMPTY
68287: LIST
68288: LIST
68289: PUSH
68290: LD_INT 0
68292: PUSH
68293: LD_INT 4
68295: NEG
68296: PUSH
68297: EMPTY
68298: LIST
68299: LIST
68300: PUSH
68301: LD_INT 0
68303: PUSH
68304: LD_INT 5
68306: NEG
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: PUSH
68312: LD_INT 1
68314: PUSH
68315: LD_INT 4
68317: NEG
68318: PUSH
68319: EMPTY
68320: LIST
68321: LIST
68322: PUSH
68323: LD_INT 1
68325: PUSH
68326: LD_INT 3
68328: NEG
68329: PUSH
68330: EMPTY
68331: LIST
68332: LIST
68333: PUSH
68334: LD_INT 0
68336: PUSH
68337: LD_INT 3
68339: NEG
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: PUSH
68345: LD_INT 1
68347: NEG
68348: PUSH
68349: LD_INT 4
68351: NEG
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: PUSH
68357: LD_INT 1
68359: NEG
68360: PUSH
68361: LD_INT 5
68363: NEG
68364: PUSH
68365: EMPTY
68366: LIST
68367: LIST
68368: PUSH
68369: LD_INT 2
68371: PUSH
68372: LD_INT 3
68374: NEG
68375: PUSH
68376: EMPTY
68377: LIST
68378: LIST
68379: PUSH
68380: LD_INT 2
68382: NEG
68383: PUSH
68384: LD_INT 5
68386: NEG
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: PUSH
68392: EMPTY
68393: LIST
68394: LIST
68395: LIST
68396: LIST
68397: LIST
68398: LIST
68399: LIST
68400: LIST
68401: LIST
68402: LIST
68403: LIST
68404: LIST
68405: LIST
68406: LIST
68407: LIST
68408: LIST
68409: LIST
68410: LIST
68411: LIST
68412: LIST
68413: LIST
68414: LIST
68415: LIST
68416: LIST
68417: LIST
68418: LIST
68419: LIST
68420: LIST
68421: LIST
68422: LIST
68423: LIST
68424: LIST
68425: LIST
68426: LIST
68427: LIST
68428: LIST
68429: LIST
68430: LIST
68431: LIST
68432: LIST
68433: LIST
68434: LIST
68435: LIST
68436: LIST
68437: LIST
68438: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68439: LD_ADDR_VAR 0 31
68443: PUSH
68444: LD_INT 0
68446: PUSH
68447: LD_INT 4
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: PUSH
68454: LD_INT 0
68456: PUSH
68457: LD_INT 3
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: PUSH
68464: LD_INT 1
68466: PUSH
68467: LD_INT 4
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: PUSH
68474: LD_INT 1
68476: PUSH
68477: LD_INT 5
68479: PUSH
68480: EMPTY
68481: LIST
68482: LIST
68483: PUSH
68484: LD_INT 0
68486: PUSH
68487: LD_INT 5
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: PUSH
68494: LD_INT 1
68496: NEG
68497: PUSH
68498: LD_INT 4
68500: PUSH
68501: EMPTY
68502: LIST
68503: LIST
68504: PUSH
68505: LD_INT 1
68507: NEG
68508: PUSH
68509: LD_INT 3
68511: PUSH
68512: EMPTY
68513: LIST
68514: LIST
68515: PUSH
68516: LD_INT 2
68518: PUSH
68519: LD_INT 5
68521: PUSH
68522: EMPTY
68523: LIST
68524: LIST
68525: PUSH
68526: LD_INT 2
68528: NEG
68529: PUSH
68530: LD_INT 3
68532: PUSH
68533: EMPTY
68534: LIST
68535: LIST
68536: PUSH
68537: LD_INT 3
68539: NEG
68540: PUSH
68541: LD_INT 0
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: PUSH
68548: LD_INT 3
68550: NEG
68551: PUSH
68552: LD_INT 1
68554: NEG
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PUSH
68560: LD_INT 2
68562: NEG
68563: PUSH
68564: LD_INT 0
68566: PUSH
68567: EMPTY
68568: LIST
68569: LIST
68570: PUSH
68571: LD_INT 2
68573: NEG
68574: PUSH
68575: LD_INT 1
68577: PUSH
68578: EMPTY
68579: LIST
68580: LIST
68581: PUSH
68582: LD_INT 3
68584: NEG
68585: PUSH
68586: LD_INT 1
68588: PUSH
68589: EMPTY
68590: LIST
68591: LIST
68592: PUSH
68593: LD_INT 4
68595: NEG
68596: PUSH
68597: LD_INT 0
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: PUSH
68604: LD_INT 4
68606: NEG
68607: PUSH
68608: LD_INT 1
68610: NEG
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: PUSH
68616: LD_INT 4
68618: NEG
68619: PUSH
68620: LD_INT 2
68622: NEG
68623: PUSH
68624: EMPTY
68625: LIST
68626: LIST
68627: PUSH
68628: LD_INT 2
68630: NEG
68631: PUSH
68632: LD_INT 2
68634: PUSH
68635: EMPTY
68636: LIST
68637: LIST
68638: PUSH
68639: LD_INT 4
68641: NEG
68642: PUSH
68643: LD_INT 4
68645: NEG
68646: PUSH
68647: EMPTY
68648: LIST
68649: LIST
68650: PUSH
68651: LD_INT 4
68653: NEG
68654: PUSH
68655: LD_INT 5
68657: NEG
68658: PUSH
68659: EMPTY
68660: LIST
68661: LIST
68662: PUSH
68663: LD_INT 3
68665: NEG
68666: PUSH
68667: LD_INT 4
68669: NEG
68670: PUSH
68671: EMPTY
68672: LIST
68673: LIST
68674: PUSH
68675: LD_INT 3
68677: NEG
68678: PUSH
68679: LD_INT 3
68681: NEG
68682: PUSH
68683: EMPTY
68684: LIST
68685: LIST
68686: PUSH
68687: LD_INT 4
68689: NEG
68690: PUSH
68691: LD_INT 3
68693: NEG
68694: PUSH
68695: EMPTY
68696: LIST
68697: LIST
68698: PUSH
68699: LD_INT 5
68701: NEG
68702: PUSH
68703: LD_INT 4
68705: NEG
68706: PUSH
68707: EMPTY
68708: LIST
68709: LIST
68710: PUSH
68711: LD_INT 5
68713: NEG
68714: PUSH
68715: LD_INT 5
68717: NEG
68718: PUSH
68719: EMPTY
68720: LIST
68721: LIST
68722: PUSH
68723: LD_INT 3
68725: NEG
68726: PUSH
68727: LD_INT 5
68729: NEG
68730: PUSH
68731: EMPTY
68732: LIST
68733: LIST
68734: PUSH
68735: LD_INT 5
68737: NEG
68738: PUSH
68739: LD_INT 3
68741: NEG
68742: PUSH
68743: EMPTY
68744: LIST
68745: LIST
68746: PUSH
68747: LD_INT 0
68749: PUSH
68750: LD_INT 3
68752: NEG
68753: PUSH
68754: EMPTY
68755: LIST
68756: LIST
68757: PUSH
68758: LD_INT 0
68760: PUSH
68761: LD_INT 4
68763: NEG
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: PUSH
68769: LD_INT 1
68771: PUSH
68772: LD_INT 3
68774: NEG
68775: PUSH
68776: EMPTY
68777: LIST
68778: LIST
68779: PUSH
68780: LD_INT 1
68782: PUSH
68783: LD_INT 2
68785: NEG
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: PUSH
68791: LD_INT 0
68793: PUSH
68794: LD_INT 2
68796: NEG
68797: PUSH
68798: EMPTY
68799: LIST
68800: LIST
68801: PUSH
68802: LD_INT 1
68804: NEG
68805: PUSH
68806: LD_INT 3
68808: NEG
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: PUSH
68814: LD_INT 1
68816: NEG
68817: PUSH
68818: LD_INT 4
68820: NEG
68821: PUSH
68822: EMPTY
68823: LIST
68824: LIST
68825: PUSH
68826: LD_INT 2
68828: PUSH
68829: LD_INT 2
68831: NEG
68832: PUSH
68833: EMPTY
68834: LIST
68835: LIST
68836: PUSH
68837: LD_INT 2
68839: NEG
68840: PUSH
68841: LD_INT 4
68843: NEG
68844: PUSH
68845: EMPTY
68846: LIST
68847: LIST
68848: PUSH
68849: LD_INT 4
68851: PUSH
68852: LD_INT 0
68854: PUSH
68855: EMPTY
68856: LIST
68857: LIST
68858: PUSH
68859: LD_INT 4
68861: PUSH
68862: LD_INT 1
68864: NEG
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: PUSH
68870: LD_INT 5
68872: PUSH
68873: LD_INT 0
68875: PUSH
68876: EMPTY
68877: LIST
68878: LIST
68879: PUSH
68880: LD_INT 5
68882: PUSH
68883: LD_INT 1
68885: PUSH
68886: EMPTY
68887: LIST
68888: LIST
68889: PUSH
68890: LD_INT 4
68892: PUSH
68893: LD_INT 1
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: PUSH
68900: LD_INT 3
68902: PUSH
68903: LD_INT 0
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: PUSH
68910: LD_INT 3
68912: PUSH
68913: LD_INT 1
68915: NEG
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: PUSH
68921: LD_INT 3
68923: PUSH
68924: LD_INT 2
68926: NEG
68927: PUSH
68928: EMPTY
68929: LIST
68930: LIST
68931: PUSH
68932: LD_INT 5
68934: PUSH
68935: LD_INT 2
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: PUSH
68942: EMPTY
68943: LIST
68944: LIST
68945: LIST
68946: LIST
68947: LIST
68948: LIST
68949: LIST
68950: LIST
68951: LIST
68952: LIST
68953: LIST
68954: LIST
68955: LIST
68956: LIST
68957: LIST
68958: LIST
68959: LIST
68960: LIST
68961: LIST
68962: LIST
68963: LIST
68964: LIST
68965: LIST
68966: LIST
68967: LIST
68968: LIST
68969: LIST
68970: LIST
68971: LIST
68972: LIST
68973: LIST
68974: LIST
68975: LIST
68976: LIST
68977: LIST
68978: LIST
68979: LIST
68980: LIST
68981: LIST
68982: LIST
68983: LIST
68984: LIST
68985: LIST
68986: LIST
68987: LIST
68988: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68989: LD_ADDR_VAR 0 32
68993: PUSH
68994: LD_INT 4
68996: NEG
68997: PUSH
68998: LD_INT 0
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: PUSH
69005: LD_INT 4
69007: NEG
69008: PUSH
69009: LD_INT 1
69011: NEG
69012: PUSH
69013: EMPTY
69014: LIST
69015: LIST
69016: PUSH
69017: LD_INT 3
69019: NEG
69020: PUSH
69021: LD_INT 0
69023: PUSH
69024: EMPTY
69025: LIST
69026: LIST
69027: PUSH
69028: LD_INT 3
69030: NEG
69031: PUSH
69032: LD_INT 1
69034: PUSH
69035: EMPTY
69036: LIST
69037: LIST
69038: PUSH
69039: LD_INT 4
69041: NEG
69042: PUSH
69043: LD_INT 1
69045: PUSH
69046: EMPTY
69047: LIST
69048: LIST
69049: PUSH
69050: LD_INT 5
69052: NEG
69053: PUSH
69054: LD_INT 0
69056: PUSH
69057: EMPTY
69058: LIST
69059: LIST
69060: PUSH
69061: LD_INT 5
69063: NEG
69064: PUSH
69065: LD_INT 1
69067: NEG
69068: PUSH
69069: EMPTY
69070: LIST
69071: LIST
69072: PUSH
69073: LD_INT 5
69075: NEG
69076: PUSH
69077: LD_INT 2
69079: NEG
69080: PUSH
69081: EMPTY
69082: LIST
69083: LIST
69084: PUSH
69085: LD_INT 3
69087: NEG
69088: PUSH
69089: LD_INT 2
69091: PUSH
69092: EMPTY
69093: LIST
69094: LIST
69095: PUSH
69096: LD_INT 3
69098: NEG
69099: PUSH
69100: LD_INT 3
69102: NEG
69103: PUSH
69104: EMPTY
69105: LIST
69106: LIST
69107: PUSH
69108: LD_INT 3
69110: NEG
69111: PUSH
69112: LD_INT 4
69114: NEG
69115: PUSH
69116: EMPTY
69117: LIST
69118: LIST
69119: PUSH
69120: LD_INT 2
69122: NEG
69123: PUSH
69124: LD_INT 3
69126: NEG
69127: PUSH
69128: EMPTY
69129: LIST
69130: LIST
69131: PUSH
69132: LD_INT 2
69134: NEG
69135: PUSH
69136: LD_INT 2
69138: NEG
69139: PUSH
69140: EMPTY
69141: LIST
69142: LIST
69143: PUSH
69144: LD_INT 3
69146: NEG
69147: PUSH
69148: LD_INT 2
69150: NEG
69151: PUSH
69152: EMPTY
69153: LIST
69154: LIST
69155: PUSH
69156: LD_INT 4
69158: NEG
69159: PUSH
69160: LD_INT 3
69162: NEG
69163: PUSH
69164: EMPTY
69165: LIST
69166: LIST
69167: PUSH
69168: LD_INT 4
69170: NEG
69171: PUSH
69172: LD_INT 4
69174: NEG
69175: PUSH
69176: EMPTY
69177: LIST
69178: LIST
69179: PUSH
69180: LD_INT 2
69182: NEG
69183: PUSH
69184: LD_INT 4
69186: NEG
69187: PUSH
69188: EMPTY
69189: LIST
69190: LIST
69191: PUSH
69192: LD_INT 4
69194: NEG
69195: PUSH
69196: LD_INT 2
69198: NEG
69199: PUSH
69200: EMPTY
69201: LIST
69202: LIST
69203: PUSH
69204: LD_INT 0
69206: PUSH
69207: LD_INT 4
69209: NEG
69210: PUSH
69211: EMPTY
69212: LIST
69213: LIST
69214: PUSH
69215: LD_INT 0
69217: PUSH
69218: LD_INT 5
69220: NEG
69221: PUSH
69222: EMPTY
69223: LIST
69224: LIST
69225: PUSH
69226: LD_INT 1
69228: PUSH
69229: LD_INT 4
69231: NEG
69232: PUSH
69233: EMPTY
69234: LIST
69235: LIST
69236: PUSH
69237: LD_INT 1
69239: PUSH
69240: LD_INT 3
69242: NEG
69243: PUSH
69244: EMPTY
69245: LIST
69246: LIST
69247: PUSH
69248: LD_INT 0
69250: PUSH
69251: LD_INT 3
69253: NEG
69254: PUSH
69255: EMPTY
69256: LIST
69257: LIST
69258: PUSH
69259: LD_INT 1
69261: NEG
69262: PUSH
69263: LD_INT 4
69265: NEG
69266: PUSH
69267: EMPTY
69268: LIST
69269: LIST
69270: PUSH
69271: LD_INT 1
69273: NEG
69274: PUSH
69275: LD_INT 5
69277: NEG
69278: PUSH
69279: EMPTY
69280: LIST
69281: LIST
69282: PUSH
69283: LD_INT 2
69285: PUSH
69286: LD_INT 3
69288: NEG
69289: PUSH
69290: EMPTY
69291: LIST
69292: LIST
69293: PUSH
69294: LD_INT 2
69296: NEG
69297: PUSH
69298: LD_INT 5
69300: NEG
69301: PUSH
69302: EMPTY
69303: LIST
69304: LIST
69305: PUSH
69306: LD_INT 3
69308: PUSH
69309: LD_INT 0
69311: PUSH
69312: EMPTY
69313: LIST
69314: LIST
69315: PUSH
69316: LD_INT 3
69318: PUSH
69319: LD_INT 1
69321: NEG
69322: PUSH
69323: EMPTY
69324: LIST
69325: LIST
69326: PUSH
69327: LD_INT 4
69329: PUSH
69330: LD_INT 0
69332: PUSH
69333: EMPTY
69334: LIST
69335: LIST
69336: PUSH
69337: LD_INT 4
69339: PUSH
69340: LD_INT 1
69342: PUSH
69343: EMPTY
69344: LIST
69345: LIST
69346: PUSH
69347: LD_INT 3
69349: PUSH
69350: LD_INT 1
69352: PUSH
69353: EMPTY
69354: LIST
69355: LIST
69356: PUSH
69357: LD_INT 2
69359: PUSH
69360: LD_INT 0
69362: PUSH
69363: EMPTY
69364: LIST
69365: LIST
69366: PUSH
69367: LD_INT 2
69369: PUSH
69370: LD_INT 1
69372: NEG
69373: PUSH
69374: EMPTY
69375: LIST
69376: LIST
69377: PUSH
69378: LD_INT 2
69380: PUSH
69381: LD_INT 2
69383: NEG
69384: PUSH
69385: EMPTY
69386: LIST
69387: LIST
69388: PUSH
69389: LD_INT 4
69391: PUSH
69392: LD_INT 2
69394: PUSH
69395: EMPTY
69396: LIST
69397: LIST
69398: PUSH
69399: LD_INT 4
69401: PUSH
69402: LD_INT 4
69404: PUSH
69405: EMPTY
69406: LIST
69407: LIST
69408: PUSH
69409: LD_INT 4
69411: PUSH
69412: LD_INT 3
69414: PUSH
69415: EMPTY
69416: LIST
69417: LIST
69418: PUSH
69419: LD_INT 5
69421: PUSH
69422: LD_INT 4
69424: PUSH
69425: EMPTY
69426: LIST
69427: LIST
69428: PUSH
69429: LD_INT 5
69431: PUSH
69432: LD_INT 5
69434: PUSH
69435: EMPTY
69436: LIST
69437: LIST
69438: PUSH
69439: LD_INT 4
69441: PUSH
69442: LD_INT 5
69444: PUSH
69445: EMPTY
69446: LIST
69447: LIST
69448: PUSH
69449: LD_INT 3
69451: PUSH
69452: LD_INT 4
69454: PUSH
69455: EMPTY
69456: LIST
69457: LIST
69458: PUSH
69459: LD_INT 3
69461: PUSH
69462: LD_INT 3
69464: PUSH
69465: EMPTY
69466: LIST
69467: LIST
69468: PUSH
69469: LD_INT 5
69471: PUSH
69472: LD_INT 3
69474: PUSH
69475: EMPTY
69476: LIST
69477: LIST
69478: PUSH
69479: LD_INT 3
69481: PUSH
69482: LD_INT 5
69484: PUSH
69485: EMPTY
69486: LIST
69487: LIST
69488: PUSH
69489: EMPTY
69490: LIST
69491: LIST
69492: LIST
69493: LIST
69494: LIST
69495: LIST
69496: LIST
69497: LIST
69498: LIST
69499: LIST
69500: LIST
69501: LIST
69502: LIST
69503: LIST
69504: LIST
69505: LIST
69506: LIST
69507: LIST
69508: LIST
69509: LIST
69510: LIST
69511: LIST
69512: LIST
69513: LIST
69514: LIST
69515: LIST
69516: LIST
69517: LIST
69518: LIST
69519: LIST
69520: LIST
69521: LIST
69522: LIST
69523: LIST
69524: LIST
69525: LIST
69526: LIST
69527: LIST
69528: LIST
69529: LIST
69530: LIST
69531: LIST
69532: LIST
69533: LIST
69534: LIST
69535: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69536: LD_ADDR_VAR 0 33
69540: PUSH
69541: LD_INT 4
69543: NEG
69544: PUSH
69545: LD_INT 4
69547: NEG
69548: PUSH
69549: EMPTY
69550: LIST
69551: LIST
69552: PUSH
69553: LD_INT 4
69555: NEG
69556: PUSH
69557: LD_INT 5
69559: NEG
69560: PUSH
69561: EMPTY
69562: LIST
69563: LIST
69564: PUSH
69565: LD_INT 3
69567: NEG
69568: PUSH
69569: LD_INT 4
69571: NEG
69572: PUSH
69573: EMPTY
69574: LIST
69575: LIST
69576: PUSH
69577: LD_INT 3
69579: NEG
69580: PUSH
69581: LD_INT 3
69583: NEG
69584: PUSH
69585: EMPTY
69586: LIST
69587: LIST
69588: PUSH
69589: LD_INT 4
69591: NEG
69592: PUSH
69593: LD_INT 3
69595: NEG
69596: PUSH
69597: EMPTY
69598: LIST
69599: LIST
69600: PUSH
69601: LD_INT 5
69603: NEG
69604: PUSH
69605: LD_INT 4
69607: NEG
69608: PUSH
69609: EMPTY
69610: LIST
69611: LIST
69612: PUSH
69613: LD_INT 5
69615: NEG
69616: PUSH
69617: LD_INT 5
69619: NEG
69620: PUSH
69621: EMPTY
69622: LIST
69623: LIST
69624: PUSH
69625: LD_INT 3
69627: NEG
69628: PUSH
69629: LD_INT 5
69631: NEG
69632: PUSH
69633: EMPTY
69634: LIST
69635: LIST
69636: PUSH
69637: LD_INT 5
69639: NEG
69640: PUSH
69641: LD_INT 3
69643: NEG
69644: PUSH
69645: EMPTY
69646: LIST
69647: LIST
69648: PUSH
69649: LD_INT 0
69651: PUSH
69652: LD_INT 3
69654: NEG
69655: PUSH
69656: EMPTY
69657: LIST
69658: LIST
69659: PUSH
69660: LD_INT 0
69662: PUSH
69663: LD_INT 4
69665: NEG
69666: PUSH
69667: EMPTY
69668: LIST
69669: LIST
69670: PUSH
69671: LD_INT 1
69673: PUSH
69674: LD_INT 3
69676: NEG
69677: PUSH
69678: EMPTY
69679: LIST
69680: LIST
69681: PUSH
69682: LD_INT 1
69684: PUSH
69685: LD_INT 2
69687: NEG
69688: PUSH
69689: EMPTY
69690: LIST
69691: LIST
69692: PUSH
69693: LD_INT 0
69695: PUSH
69696: LD_INT 2
69698: NEG
69699: PUSH
69700: EMPTY
69701: LIST
69702: LIST
69703: PUSH
69704: LD_INT 1
69706: NEG
69707: PUSH
69708: LD_INT 3
69710: NEG
69711: PUSH
69712: EMPTY
69713: LIST
69714: LIST
69715: PUSH
69716: LD_INT 1
69718: NEG
69719: PUSH
69720: LD_INT 4
69722: NEG
69723: PUSH
69724: EMPTY
69725: LIST
69726: LIST
69727: PUSH
69728: LD_INT 2
69730: PUSH
69731: LD_INT 2
69733: NEG
69734: PUSH
69735: EMPTY
69736: LIST
69737: LIST
69738: PUSH
69739: LD_INT 2
69741: NEG
69742: PUSH
69743: LD_INT 4
69745: NEG
69746: PUSH
69747: EMPTY
69748: LIST
69749: LIST
69750: PUSH
69751: LD_INT 4
69753: PUSH
69754: LD_INT 0
69756: PUSH
69757: EMPTY
69758: LIST
69759: LIST
69760: PUSH
69761: LD_INT 4
69763: PUSH
69764: LD_INT 1
69766: NEG
69767: PUSH
69768: EMPTY
69769: LIST
69770: LIST
69771: PUSH
69772: LD_INT 5
69774: PUSH
69775: LD_INT 0
69777: PUSH
69778: EMPTY
69779: LIST
69780: LIST
69781: PUSH
69782: LD_INT 5
69784: PUSH
69785: LD_INT 1
69787: PUSH
69788: EMPTY
69789: LIST
69790: LIST
69791: PUSH
69792: LD_INT 4
69794: PUSH
69795: LD_INT 1
69797: PUSH
69798: EMPTY
69799: LIST
69800: LIST
69801: PUSH
69802: LD_INT 3
69804: PUSH
69805: LD_INT 0
69807: PUSH
69808: EMPTY
69809: LIST
69810: LIST
69811: PUSH
69812: LD_INT 3
69814: PUSH
69815: LD_INT 1
69817: NEG
69818: PUSH
69819: EMPTY
69820: LIST
69821: LIST
69822: PUSH
69823: LD_INT 3
69825: PUSH
69826: LD_INT 2
69828: NEG
69829: PUSH
69830: EMPTY
69831: LIST
69832: LIST
69833: PUSH
69834: LD_INT 5
69836: PUSH
69837: LD_INT 2
69839: PUSH
69840: EMPTY
69841: LIST
69842: LIST
69843: PUSH
69844: LD_INT 3
69846: PUSH
69847: LD_INT 3
69849: PUSH
69850: EMPTY
69851: LIST
69852: LIST
69853: PUSH
69854: LD_INT 3
69856: PUSH
69857: LD_INT 2
69859: PUSH
69860: EMPTY
69861: LIST
69862: LIST
69863: PUSH
69864: LD_INT 4
69866: PUSH
69867: LD_INT 3
69869: PUSH
69870: EMPTY
69871: LIST
69872: LIST
69873: PUSH
69874: LD_INT 4
69876: PUSH
69877: LD_INT 4
69879: PUSH
69880: EMPTY
69881: LIST
69882: LIST
69883: PUSH
69884: LD_INT 3
69886: PUSH
69887: LD_INT 4
69889: PUSH
69890: EMPTY
69891: LIST
69892: LIST
69893: PUSH
69894: LD_INT 2
69896: PUSH
69897: LD_INT 3
69899: PUSH
69900: EMPTY
69901: LIST
69902: LIST
69903: PUSH
69904: LD_INT 2
69906: PUSH
69907: LD_INT 2
69909: PUSH
69910: EMPTY
69911: LIST
69912: LIST
69913: PUSH
69914: LD_INT 4
69916: PUSH
69917: LD_INT 2
69919: PUSH
69920: EMPTY
69921: LIST
69922: LIST
69923: PUSH
69924: LD_INT 2
69926: PUSH
69927: LD_INT 4
69929: PUSH
69930: EMPTY
69931: LIST
69932: LIST
69933: PUSH
69934: LD_INT 0
69936: PUSH
69937: LD_INT 4
69939: PUSH
69940: EMPTY
69941: LIST
69942: LIST
69943: PUSH
69944: LD_INT 0
69946: PUSH
69947: LD_INT 3
69949: PUSH
69950: EMPTY
69951: LIST
69952: LIST
69953: PUSH
69954: LD_INT 1
69956: PUSH
69957: LD_INT 4
69959: PUSH
69960: EMPTY
69961: LIST
69962: LIST
69963: PUSH
69964: LD_INT 1
69966: PUSH
69967: LD_INT 5
69969: PUSH
69970: EMPTY
69971: LIST
69972: LIST
69973: PUSH
69974: LD_INT 0
69976: PUSH
69977: LD_INT 5
69979: PUSH
69980: EMPTY
69981: LIST
69982: LIST
69983: PUSH
69984: LD_INT 1
69986: NEG
69987: PUSH
69988: LD_INT 4
69990: PUSH
69991: EMPTY
69992: LIST
69993: LIST
69994: PUSH
69995: LD_INT 1
69997: NEG
69998: PUSH
69999: LD_INT 3
70001: PUSH
70002: EMPTY
70003: LIST
70004: LIST
70005: PUSH
70006: LD_INT 2
70008: PUSH
70009: LD_INT 5
70011: PUSH
70012: EMPTY
70013: LIST
70014: LIST
70015: PUSH
70016: LD_INT 2
70018: NEG
70019: PUSH
70020: LD_INT 3
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: PUSH
70027: EMPTY
70028: LIST
70029: LIST
70030: LIST
70031: LIST
70032: LIST
70033: LIST
70034: LIST
70035: LIST
70036: LIST
70037: LIST
70038: LIST
70039: LIST
70040: LIST
70041: LIST
70042: LIST
70043: LIST
70044: LIST
70045: LIST
70046: LIST
70047: LIST
70048: LIST
70049: LIST
70050: LIST
70051: LIST
70052: LIST
70053: LIST
70054: LIST
70055: LIST
70056: LIST
70057: LIST
70058: LIST
70059: LIST
70060: LIST
70061: LIST
70062: LIST
70063: LIST
70064: LIST
70065: LIST
70066: LIST
70067: LIST
70068: LIST
70069: LIST
70070: LIST
70071: LIST
70072: LIST
70073: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70074: LD_ADDR_VAR 0 34
70078: PUSH
70079: LD_INT 0
70081: PUSH
70082: LD_INT 4
70084: NEG
70085: PUSH
70086: EMPTY
70087: LIST
70088: LIST
70089: PUSH
70090: LD_INT 0
70092: PUSH
70093: LD_INT 5
70095: NEG
70096: PUSH
70097: EMPTY
70098: LIST
70099: LIST
70100: PUSH
70101: LD_INT 1
70103: PUSH
70104: LD_INT 4
70106: NEG
70107: PUSH
70108: EMPTY
70109: LIST
70110: LIST
70111: PUSH
70112: LD_INT 1
70114: PUSH
70115: LD_INT 3
70117: NEG
70118: PUSH
70119: EMPTY
70120: LIST
70121: LIST
70122: PUSH
70123: LD_INT 0
70125: PUSH
70126: LD_INT 3
70128: NEG
70129: PUSH
70130: EMPTY
70131: LIST
70132: LIST
70133: PUSH
70134: LD_INT 1
70136: NEG
70137: PUSH
70138: LD_INT 4
70140: NEG
70141: PUSH
70142: EMPTY
70143: LIST
70144: LIST
70145: PUSH
70146: LD_INT 1
70148: NEG
70149: PUSH
70150: LD_INT 5
70152: NEG
70153: PUSH
70154: EMPTY
70155: LIST
70156: LIST
70157: PUSH
70158: LD_INT 2
70160: PUSH
70161: LD_INT 3
70163: NEG
70164: PUSH
70165: EMPTY
70166: LIST
70167: LIST
70168: PUSH
70169: LD_INT 2
70171: NEG
70172: PUSH
70173: LD_INT 5
70175: NEG
70176: PUSH
70177: EMPTY
70178: LIST
70179: LIST
70180: PUSH
70181: LD_INT 3
70183: PUSH
70184: LD_INT 0
70186: PUSH
70187: EMPTY
70188: LIST
70189: LIST
70190: PUSH
70191: LD_INT 3
70193: PUSH
70194: LD_INT 1
70196: NEG
70197: PUSH
70198: EMPTY
70199: LIST
70200: LIST
70201: PUSH
70202: LD_INT 4
70204: PUSH
70205: LD_INT 0
70207: PUSH
70208: EMPTY
70209: LIST
70210: LIST
70211: PUSH
70212: LD_INT 4
70214: PUSH
70215: LD_INT 1
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: LD_INT 3
70224: PUSH
70225: LD_INT 1
70227: PUSH
70228: EMPTY
70229: LIST
70230: LIST
70231: PUSH
70232: LD_INT 2
70234: PUSH
70235: LD_INT 0
70237: PUSH
70238: EMPTY
70239: LIST
70240: LIST
70241: PUSH
70242: LD_INT 2
70244: PUSH
70245: LD_INT 1
70247: NEG
70248: PUSH
70249: EMPTY
70250: LIST
70251: LIST
70252: PUSH
70253: LD_INT 2
70255: PUSH
70256: LD_INT 2
70258: NEG
70259: PUSH
70260: EMPTY
70261: LIST
70262: LIST
70263: PUSH
70264: LD_INT 4
70266: PUSH
70267: LD_INT 2
70269: PUSH
70270: EMPTY
70271: LIST
70272: LIST
70273: PUSH
70274: LD_INT 4
70276: PUSH
70277: LD_INT 4
70279: PUSH
70280: EMPTY
70281: LIST
70282: LIST
70283: PUSH
70284: LD_INT 4
70286: PUSH
70287: LD_INT 3
70289: PUSH
70290: EMPTY
70291: LIST
70292: LIST
70293: PUSH
70294: LD_INT 5
70296: PUSH
70297: LD_INT 4
70299: PUSH
70300: EMPTY
70301: LIST
70302: LIST
70303: PUSH
70304: LD_INT 5
70306: PUSH
70307: LD_INT 5
70309: PUSH
70310: EMPTY
70311: LIST
70312: LIST
70313: PUSH
70314: LD_INT 4
70316: PUSH
70317: LD_INT 5
70319: PUSH
70320: EMPTY
70321: LIST
70322: LIST
70323: PUSH
70324: LD_INT 3
70326: PUSH
70327: LD_INT 4
70329: PUSH
70330: EMPTY
70331: LIST
70332: LIST
70333: PUSH
70334: LD_INT 3
70336: PUSH
70337: LD_INT 3
70339: PUSH
70340: EMPTY
70341: LIST
70342: LIST
70343: PUSH
70344: LD_INT 5
70346: PUSH
70347: LD_INT 3
70349: PUSH
70350: EMPTY
70351: LIST
70352: LIST
70353: PUSH
70354: LD_INT 3
70356: PUSH
70357: LD_INT 5
70359: PUSH
70360: EMPTY
70361: LIST
70362: LIST
70363: PUSH
70364: LD_INT 0
70366: PUSH
70367: LD_INT 3
70369: PUSH
70370: EMPTY
70371: LIST
70372: LIST
70373: PUSH
70374: LD_INT 0
70376: PUSH
70377: LD_INT 2
70379: PUSH
70380: EMPTY
70381: LIST
70382: LIST
70383: PUSH
70384: LD_INT 1
70386: PUSH
70387: LD_INT 3
70389: PUSH
70390: EMPTY
70391: LIST
70392: LIST
70393: PUSH
70394: LD_INT 1
70396: PUSH
70397: LD_INT 4
70399: PUSH
70400: EMPTY
70401: LIST
70402: LIST
70403: PUSH
70404: LD_INT 0
70406: PUSH
70407: LD_INT 4
70409: PUSH
70410: EMPTY
70411: LIST
70412: LIST
70413: PUSH
70414: LD_INT 1
70416: NEG
70417: PUSH
70418: LD_INT 3
70420: PUSH
70421: EMPTY
70422: LIST
70423: LIST
70424: PUSH
70425: LD_INT 1
70427: NEG
70428: PUSH
70429: LD_INT 2
70431: PUSH
70432: EMPTY
70433: LIST
70434: LIST
70435: PUSH
70436: LD_INT 2
70438: PUSH
70439: LD_INT 4
70441: PUSH
70442: EMPTY
70443: LIST
70444: LIST
70445: PUSH
70446: LD_INT 2
70448: NEG
70449: PUSH
70450: LD_INT 2
70452: PUSH
70453: EMPTY
70454: LIST
70455: LIST
70456: PUSH
70457: LD_INT 4
70459: NEG
70460: PUSH
70461: LD_INT 0
70463: PUSH
70464: EMPTY
70465: LIST
70466: LIST
70467: PUSH
70468: LD_INT 4
70470: NEG
70471: PUSH
70472: LD_INT 1
70474: NEG
70475: PUSH
70476: EMPTY
70477: LIST
70478: LIST
70479: PUSH
70480: LD_INT 3
70482: NEG
70483: PUSH
70484: LD_INT 0
70486: PUSH
70487: EMPTY
70488: LIST
70489: LIST
70490: PUSH
70491: LD_INT 3
70493: NEG
70494: PUSH
70495: LD_INT 1
70497: PUSH
70498: EMPTY
70499: LIST
70500: LIST
70501: PUSH
70502: LD_INT 4
70504: NEG
70505: PUSH
70506: LD_INT 1
70508: PUSH
70509: EMPTY
70510: LIST
70511: LIST
70512: PUSH
70513: LD_INT 5
70515: NEG
70516: PUSH
70517: LD_INT 0
70519: PUSH
70520: EMPTY
70521: LIST
70522: LIST
70523: PUSH
70524: LD_INT 5
70526: NEG
70527: PUSH
70528: LD_INT 1
70530: NEG
70531: PUSH
70532: EMPTY
70533: LIST
70534: LIST
70535: PUSH
70536: LD_INT 5
70538: NEG
70539: PUSH
70540: LD_INT 2
70542: NEG
70543: PUSH
70544: EMPTY
70545: LIST
70546: LIST
70547: PUSH
70548: LD_INT 3
70550: NEG
70551: PUSH
70552: LD_INT 2
70554: PUSH
70555: EMPTY
70556: LIST
70557: LIST
70558: PUSH
70559: EMPTY
70560: LIST
70561: LIST
70562: LIST
70563: LIST
70564: LIST
70565: LIST
70566: LIST
70567: LIST
70568: LIST
70569: LIST
70570: LIST
70571: LIST
70572: LIST
70573: LIST
70574: LIST
70575: LIST
70576: LIST
70577: LIST
70578: LIST
70579: LIST
70580: LIST
70581: LIST
70582: LIST
70583: LIST
70584: LIST
70585: LIST
70586: LIST
70587: LIST
70588: LIST
70589: LIST
70590: LIST
70591: LIST
70592: LIST
70593: LIST
70594: LIST
70595: LIST
70596: LIST
70597: LIST
70598: LIST
70599: LIST
70600: LIST
70601: LIST
70602: LIST
70603: LIST
70604: LIST
70605: ST_TO_ADDR
// end ; end ;
70606: GO 70609
70608: POP
// case btype of b_depot , b_warehouse :
70609: LD_VAR 0 1
70613: PUSH
70614: LD_INT 0
70616: DOUBLE
70617: EQUAL
70618: IFTRUE 70628
70620: LD_INT 1
70622: DOUBLE
70623: EQUAL
70624: IFTRUE 70628
70626: GO 70829
70628: POP
// case nation of nation_american :
70629: LD_VAR 0 5
70633: PUSH
70634: LD_INT 1
70636: DOUBLE
70637: EQUAL
70638: IFTRUE 70642
70640: GO 70698
70642: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70643: LD_ADDR_VAR 0 9
70647: PUSH
70648: LD_VAR 0 11
70652: PUSH
70653: LD_VAR 0 12
70657: PUSH
70658: LD_VAR 0 13
70662: PUSH
70663: LD_VAR 0 14
70667: PUSH
70668: LD_VAR 0 15
70672: PUSH
70673: LD_VAR 0 16
70677: PUSH
70678: EMPTY
70679: LIST
70680: LIST
70681: LIST
70682: LIST
70683: LIST
70684: LIST
70685: PUSH
70686: LD_VAR 0 4
70690: PUSH
70691: LD_INT 1
70693: PLUS
70694: ARRAY
70695: ST_TO_ADDR
70696: GO 70827
70698: LD_INT 2
70700: DOUBLE
70701: EQUAL
70702: IFTRUE 70706
70704: GO 70762
70706: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70707: LD_ADDR_VAR 0 9
70711: PUSH
70712: LD_VAR 0 17
70716: PUSH
70717: LD_VAR 0 18
70721: PUSH
70722: LD_VAR 0 19
70726: PUSH
70727: LD_VAR 0 20
70731: PUSH
70732: LD_VAR 0 21
70736: PUSH
70737: LD_VAR 0 22
70741: PUSH
70742: EMPTY
70743: LIST
70744: LIST
70745: LIST
70746: LIST
70747: LIST
70748: LIST
70749: PUSH
70750: LD_VAR 0 4
70754: PUSH
70755: LD_INT 1
70757: PLUS
70758: ARRAY
70759: ST_TO_ADDR
70760: GO 70827
70762: LD_INT 3
70764: DOUBLE
70765: EQUAL
70766: IFTRUE 70770
70768: GO 70826
70770: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70771: LD_ADDR_VAR 0 9
70775: PUSH
70776: LD_VAR 0 23
70780: PUSH
70781: LD_VAR 0 24
70785: PUSH
70786: LD_VAR 0 25
70790: PUSH
70791: LD_VAR 0 26
70795: PUSH
70796: LD_VAR 0 27
70800: PUSH
70801: LD_VAR 0 28
70805: PUSH
70806: EMPTY
70807: LIST
70808: LIST
70809: LIST
70810: LIST
70811: LIST
70812: LIST
70813: PUSH
70814: LD_VAR 0 4
70818: PUSH
70819: LD_INT 1
70821: PLUS
70822: ARRAY
70823: ST_TO_ADDR
70824: GO 70827
70826: POP
70827: GO 71382
70829: LD_INT 2
70831: DOUBLE
70832: EQUAL
70833: IFTRUE 70843
70835: LD_INT 3
70837: DOUBLE
70838: EQUAL
70839: IFTRUE 70843
70841: GO 70899
70843: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70844: LD_ADDR_VAR 0 9
70848: PUSH
70849: LD_VAR 0 29
70853: PUSH
70854: LD_VAR 0 30
70858: PUSH
70859: LD_VAR 0 31
70863: PUSH
70864: LD_VAR 0 32
70868: PUSH
70869: LD_VAR 0 33
70873: PUSH
70874: LD_VAR 0 34
70878: PUSH
70879: EMPTY
70880: LIST
70881: LIST
70882: LIST
70883: LIST
70884: LIST
70885: LIST
70886: PUSH
70887: LD_VAR 0 4
70891: PUSH
70892: LD_INT 1
70894: PLUS
70895: ARRAY
70896: ST_TO_ADDR
70897: GO 71382
70899: LD_INT 16
70901: DOUBLE
70902: EQUAL
70903: IFTRUE 70961
70905: LD_INT 17
70907: DOUBLE
70908: EQUAL
70909: IFTRUE 70961
70911: LD_INT 18
70913: DOUBLE
70914: EQUAL
70915: IFTRUE 70961
70917: LD_INT 19
70919: DOUBLE
70920: EQUAL
70921: IFTRUE 70961
70923: LD_INT 22
70925: DOUBLE
70926: EQUAL
70927: IFTRUE 70961
70929: LD_INT 20
70931: DOUBLE
70932: EQUAL
70933: IFTRUE 70961
70935: LD_INT 21
70937: DOUBLE
70938: EQUAL
70939: IFTRUE 70961
70941: LD_INT 23
70943: DOUBLE
70944: EQUAL
70945: IFTRUE 70961
70947: LD_INT 24
70949: DOUBLE
70950: EQUAL
70951: IFTRUE 70961
70953: LD_INT 25
70955: DOUBLE
70956: EQUAL
70957: IFTRUE 70961
70959: GO 71017
70961: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70962: LD_ADDR_VAR 0 9
70966: PUSH
70967: LD_VAR 0 35
70971: PUSH
70972: LD_VAR 0 36
70976: PUSH
70977: LD_VAR 0 37
70981: PUSH
70982: LD_VAR 0 38
70986: PUSH
70987: LD_VAR 0 39
70991: PUSH
70992: LD_VAR 0 40
70996: PUSH
70997: EMPTY
70998: LIST
70999: LIST
71000: LIST
71001: LIST
71002: LIST
71003: LIST
71004: PUSH
71005: LD_VAR 0 4
71009: PUSH
71010: LD_INT 1
71012: PLUS
71013: ARRAY
71014: ST_TO_ADDR
71015: GO 71382
71017: LD_INT 6
71019: DOUBLE
71020: EQUAL
71021: IFTRUE 71073
71023: LD_INT 7
71025: DOUBLE
71026: EQUAL
71027: IFTRUE 71073
71029: LD_INT 8
71031: DOUBLE
71032: EQUAL
71033: IFTRUE 71073
71035: LD_INT 13
71037: DOUBLE
71038: EQUAL
71039: IFTRUE 71073
71041: LD_INT 12
71043: DOUBLE
71044: EQUAL
71045: IFTRUE 71073
71047: LD_INT 15
71049: DOUBLE
71050: EQUAL
71051: IFTRUE 71073
71053: LD_INT 11
71055: DOUBLE
71056: EQUAL
71057: IFTRUE 71073
71059: LD_INT 14
71061: DOUBLE
71062: EQUAL
71063: IFTRUE 71073
71065: LD_INT 10
71067: DOUBLE
71068: EQUAL
71069: IFTRUE 71073
71071: GO 71129
71073: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71074: LD_ADDR_VAR 0 9
71078: PUSH
71079: LD_VAR 0 41
71083: PUSH
71084: LD_VAR 0 42
71088: PUSH
71089: LD_VAR 0 43
71093: PUSH
71094: LD_VAR 0 44
71098: PUSH
71099: LD_VAR 0 45
71103: PUSH
71104: LD_VAR 0 46
71108: PUSH
71109: EMPTY
71110: LIST
71111: LIST
71112: LIST
71113: LIST
71114: LIST
71115: LIST
71116: PUSH
71117: LD_VAR 0 4
71121: PUSH
71122: LD_INT 1
71124: PLUS
71125: ARRAY
71126: ST_TO_ADDR
71127: GO 71382
71129: LD_INT 36
71131: DOUBLE
71132: EQUAL
71133: IFTRUE 71137
71135: GO 71193
71137: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71138: LD_ADDR_VAR 0 9
71142: PUSH
71143: LD_VAR 0 47
71147: PUSH
71148: LD_VAR 0 48
71152: PUSH
71153: LD_VAR 0 49
71157: PUSH
71158: LD_VAR 0 50
71162: PUSH
71163: LD_VAR 0 51
71167: PUSH
71168: LD_VAR 0 52
71172: PUSH
71173: EMPTY
71174: LIST
71175: LIST
71176: LIST
71177: LIST
71178: LIST
71179: LIST
71180: PUSH
71181: LD_VAR 0 4
71185: PUSH
71186: LD_INT 1
71188: PLUS
71189: ARRAY
71190: ST_TO_ADDR
71191: GO 71382
71193: LD_INT 4
71195: DOUBLE
71196: EQUAL
71197: IFTRUE 71219
71199: LD_INT 5
71201: DOUBLE
71202: EQUAL
71203: IFTRUE 71219
71205: LD_INT 34
71207: DOUBLE
71208: EQUAL
71209: IFTRUE 71219
71211: LD_INT 37
71213: DOUBLE
71214: EQUAL
71215: IFTRUE 71219
71217: GO 71275
71219: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71220: LD_ADDR_VAR 0 9
71224: PUSH
71225: LD_VAR 0 53
71229: PUSH
71230: LD_VAR 0 54
71234: PUSH
71235: LD_VAR 0 55
71239: PUSH
71240: LD_VAR 0 56
71244: PUSH
71245: LD_VAR 0 57
71249: PUSH
71250: LD_VAR 0 58
71254: PUSH
71255: EMPTY
71256: LIST
71257: LIST
71258: LIST
71259: LIST
71260: LIST
71261: LIST
71262: PUSH
71263: LD_VAR 0 4
71267: PUSH
71268: LD_INT 1
71270: PLUS
71271: ARRAY
71272: ST_TO_ADDR
71273: GO 71382
71275: LD_INT 31
71277: DOUBLE
71278: EQUAL
71279: IFTRUE 71325
71281: LD_INT 32
71283: DOUBLE
71284: EQUAL
71285: IFTRUE 71325
71287: LD_INT 33
71289: DOUBLE
71290: EQUAL
71291: IFTRUE 71325
71293: LD_INT 27
71295: DOUBLE
71296: EQUAL
71297: IFTRUE 71325
71299: LD_INT 26
71301: DOUBLE
71302: EQUAL
71303: IFTRUE 71325
71305: LD_INT 28
71307: DOUBLE
71308: EQUAL
71309: IFTRUE 71325
71311: LD_INT 29
71313: DOUBLE
71314: EQUAL
71315: IFTRUE 71325
71317: LD_INT 30
71319: DOUBLE
71320: EQUAL
71321: IFTRUE 71325
71323: GO 71381
71325: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71326: LD_ADDR_VAR 0 9
71330: PUSH
71331: LD_VAR 0 59
71335: PUSH
71336: LD_VAR 0 60
71340: PUSH
71341: LD_VAR 0 61
71345: PUSH
71346: LD_VAR 0 62
71350: PUSH
71351: LD_VAR 0 63
71355: PUSH
71356: LD_VAR 0 64
71360: PUSH
71361: EMPTY
71362: LIST
71363: LIST
71364: LIST
71365: LIST
71366: LIST
71367: LIST
71368: PUSH
71369: LD_VAR 0 4
71373: PUSH
71374: LD_INT 1
71376: PLUS
71377: ARRAY
71378: ST_TO_ADDR
71379: GO 71382
71381: POP
// temp_list2 = [ ] ;
71382: LD_ADDR_VAR 0 10
71386: PUSH
71387: EMPTY
71388: ST_TO_ADDR
// for i in temp_list do
71389: LD_ADDR_VAR 0 8
71393: PUSH
71394: LD_VAR 0 9
71398: PUSH
71399: FOR_IN
71400: IFFALSE 71452
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71402: LD_ADDR_VAR 0 10
71406: PUSH
71407: LD_VAR 0 10
71411: PUSH
71412: LD_VAR 0 8
71416: PUSH
71417: LD_INT 1
71419: ARRAY
71420: PUSH
71421: LD_VAR 0 2
71425: PLUS
71426: PUSH
71427: LD_VAR 0 8
71431: PUSH
71432: LD_INT 2
71434: ARRAY
71435: PUSH
71436: LD_VAR 0 3
71440: PLUS
71441: PUSH
71442: EMPTY
71443: LIST
71444: LIST
71445: PUSH
71446: EMPTY
71447: LIST
71448: ADD
71449: ST_TO_ADDR
71450: GO 71399
71452: POP
71453: POP
// result = temp_list2 ;
71454: LD_ADDR_VAR 0 7
71458: PUSH
71459: LD_VAR 0 10
71463: ST_TO_ADDR
// end ;
71464: LD_VAR 0 7
71468: RET
// export function EnemyInRange ( unit , dist ) ; begin
71469: LD_INT 0
71471: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71472: LD_ADDR_VAR 0 3
71476: PUSH
71477: LD_VAR 0 1
71481: PPUSH
71482: CALL_OW 255
71486: PPUSH
71487: LD_VAR 0 1
71491: PPUSH
71492: CALL_OW 250
71496: PPUSH
71497: LD_VAR 0 1
71501: PPUSH
71502: CALL_OW 251
71506: PPUSH
71507: LD_VAR 0 2
71511: PPUSH
71512: CALL 44871 0 4
71516: PUSH
71517: LD_INT 4
71519: ARRAY
71520: ST_TO_ADDR
// end ;
71521: LD_VAR 0 3
71525: RET
// export function PlayerSeeMe ( unit ) ; begin
71526: LD_INT 0
71528: PPUSH
// result := See ( your_side , unit ) ;
71529: LD_ADDR_VAR 0 2
71533: PUSH
71534: LD_OWVAR 2
71538: PPUSH
71539: LD_VAR 0 1
71543: PPUSH
71544: CALL_OW 292
71548: ST_TO_ADDR
// end ;
71549: LD_VAR 0 2
71553: RET
// export function ReverseDir ( unit ) ; begin
71554: LD_INT 0
71556: PPUSH
// if not unit then
71557: LD_VAR 0 1
71561: NOT
71562: IFFALSE 71566
// exit ;
71564: GO 71589
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71566: LD_ADDR_VAR 0 2
71570: PUSH
71571: LD_VAR 0 1
71575: PPUSH
71576: CALL_OW 254
71580: PUSH
71581: LD_INT 3
71583: PLUS
71584: PUSH
71585: LD_INT 6
71587: MOD
71588: ST_TO_ADDR
// end ;
71589: LD_VAR 0 2
71593: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
71594: LD_INT 0
71596: PPUSH
71597: PPUSH
71598: PPUSH
71599: PPUSH
71600: PPUSH
71601: PPUSH
// if not unit or not hexes then
71602: LD_VAR 0 1
71606: NOT
71607: PUSH
71608: LD_VAR 0 2
71612: NOT
71613: OR
71614: IFFALSE 71618
// exit ;
71616: GO 71741
// dist := 9999 ;
71618: LD_ADDR_VAR 0 5
71622: PUSH
71623: LD_INT 9999
71625: ST_TO_ADDR
// for i = 1 to hexes do
71626: LD_ADDR_VAR 0 4
71630: PUSH
71631: DOUBLE
71632: LD_INT 1
71634: DEC
71635: ST_TO_ADDR
71636: LD_VAR 0 2
71640: PUSH
71641: FOR_TO
71642: IFFALSE 71729
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71644: LD_ADDR_VAR 0 6
71648: PUSH
71649: LD_VAR 0 1
71653: PPUSH
71654: LD_VAR 0 2
71658: PUSH
71659: LD_VAR 0 4
71663: ARRAY
71664: PUSH
71665: LD_INT 1
71667: ARRAY
71668: PPUSH
71669: LD_VAR 0 2
71673: PUSH
71674: LD_VAR 0 4
71678: ARRAY
71679: PUSH
71680: LD_INT 2
71682: ARRAY
71683: PPUSH
71684: CALL_OW 297
71688: ST_TO_ADDR
// if tdist < dist then
71689: LD_VAR 0 6
71693: PUSH
71694: LD_VAR 0 5
71698: LESS
71699: IFFALSE 71727
// begin hex := hexes [ i ] ;
71701: LD_ADDR_VAR 0 8
71705: PUSH
71706: LD_VAR 0 2
71710: PUSH
71711: LD_VAR 0 4
71715: ARRAY
71716: ST_TO_ADDR
// dist := tdist ;
71717: LD_ADDR_VAR 0 5
71721: PUSH
71722: LD_VAR 0 6
71726: ST_TO_ADDR
// end ; end ;
71727: GO 71641
71729: POP
71730: POP
// result := hex ;
71731: LD_ADDR_VAR 0 3
71735: PUSH
71736: LD_VAR 0 8
71740: ST_TO_ADDR
// end ;
71741: LD_VAR 0 3
71745: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71746: LD_INT 0
71748: PPUSH
71749: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71750: LD_VAR 0 1
71754: NOT
71755: PUSH
71756: LD_VAR 0 1
71760: PUSH
71761: LD_INT 21
71763: PUSH
71764: LD_INT 2
71766: PUSH
71767: EMPTY
71768: LIST
71769: LIST
71770: PUSH
71771: LD_INT 23
71773: PUSH
71774: LD_INT 2
71776: PUSH
71777: EMPTY
71778: LIST
71779: LIST
71780: PUSH
71781: EMPTY
71782: LIST
71783: LIST
71784: PPUSH
71785: CALL_OW 69
71789: IN
71790: NOT
71791: OR
71792: IFFALSE 71796
// exit ;
71794: GO 71843
// for i = 1 to 3 do
71796: LD_ADDR_VAR 0 3
71800: PUSH
71801: DOUBLE
71802: LD_INT 1
71804: DEC
71805: ST_TO_ADDR
71806: LD_INT 3
71808: PUSH
71809: FOR_TO
71810: IFFALSE 71841
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71812: LD_VAR 0 1
71816: PPUSH
71817: CALL_OW 250
71821: PPUSH
71822: LD_VAR 0 1
71826: PPUSH
71827: CALL_OW 251
71831: PPUSH
71832: LD_INT 1
71834: PPUSH
71835: CALL_OW 453
71839: GO 71809
71841: POP
71842: POP
// end ;
71843: LD_VAR 0 2
71847: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71848: LD_INT 0
71850: PPUSH
71851: PPUSH
71852: PPUSH
71853: PPUSH
71854: PPUSH
71855: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71856: LD_VAR 0 1
71860: NOT
71861: PUSH
71862: LD_VAR 0 2
71866: NOT
71867: OR
71868: PUSH
71869: LD_VAR 0 1
71873: PPUSH
71874: CALL_OW 314
71878: OR
71879: IFFALSE 71883
// exit ;
71881: GO 72324
// x := GetX ( enemy_unit ) ;
71883: LD_ADDR_VAR 0 7
71887: PUSH
71888: LD_VAR 0 2
71892: PPUSH
71893: CALL_OW 250
71897: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71898: LD_ADDR_VAR 0 8
71902: PUSH
71903: LD_VAR 0 2
71907: PPUSH
71908: CALL_OW 251
71912: ST_TO_ADDR
// if not x or not y then
71913: LD_VAR 0 7
71917: NOT
71918: PUSH
71919: LD_VAR 0 8
71923: NOT
71924: OR
71925: IFFALSE 71929
// exit ;
71927: GO 72324
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71929: LD_ADDR_VAR 0 6
71933: PUSH
71934: LD_VAR 0 7
71938: PPUSH
71939: LD_INT 0
71941: PPUSH
71942: LD_INT 4
71944: PPUSH
71945: CALL_OW 272
71949: PUSH
71950: LD_VAR 0 8
71954: PPUSH
71955: LD_INT 0
71957: PPUSH
71958: LD_INT 4
71960: PPUSH
71961: CALL_OW 273
71965: PUSH
71966: EMPTY
71967: LIST
71968: LIST
71969: PUSH
71970: LD_VAR 0 7
71974: PPUSH
71975: LD_INT 1
71977: PPUSH
71978: LD_INT 4
71980: PPUSH
71981: CALL_OW 272
71985: PUSH
71986: LD_VAR 0 8
71990: PPUSH
71991: LD_INT 1
71993: PPUSH
71994: LD_INT 4
71996: PPUSH
71997: CALL_OW 273
72001: PUSH
72002: EMPTY
72003: LIST
72004: LIST
72005: PUSH
72006: LD_VAR 0 7
72010: PPUSH
72011: LD_INT 2
72013: PPUSH
72014: LD_INT 4
72016: PPUSH
72017: CALL_OW 272
72021: PUSH
72022: LD_VAR 0 8
72026: PPUSH
72027: LD_INT 2
72029: PPUSH
72030: LD_INT 4
72032: PPUSH
72033: CALL_OW 273
72037: PUSH
72038: EMPTY
72039: LIST
72040: LIST
72041: PUSH
72042: LD_VAR 0 7
72046: PPUSH
72047: LD_INT 3
72049: PPUSH
72050: LD_INT 4
72052: PPUSH
72053: CALL_OW 272
72057: PUSH
72058: LD_VAR 0 8
72062: PPUSH
72063: LD_INT 3
72065: PPUSH
72066: LD_INT 4
72068: PPUSH
72069: CALL_OW 273
72073: PUSH
72074: EMPTY
72075: LIST
72076: LIST
72077: PUSH
72078: LD_VAR 0 7
72082: PPUSH
72083: LD_INT 4
72085: PPUSH
72086: LD_INT 4
72088: PPUSH
72089: CALL_OW 272
72093: PUSH
72094: LD_VAR 0 8
72098: PPUSH
72099: LD_INT 4
72101: PPUSH
72102: LD_INT 4
72104: PPUSH
72105: CALL_OW 273
72109: PUSH
72110: EMPTY
72111: LIST
72112: LIST
72113: PUSH
72114: LD_VAR 0 7
72118: PPUSH
72119: LD_INT 5
72121: PPUSH
72122: LD_INT 4
72124: PPUSH
72125: CALL_OW 272
72129: PUSH
72130: LD_VAR 0 8
72134: PPUSH
72135: LD_INT 5
72137: PPUSH
72138: LD_INT 4
72140: PPUSH
72141: CALL_OW 273
72145: PUSH
72146: EMPTY
72147: LIST
72148: LIST
72149: PUSH
72150: EMPTY
72151: LIST
72152: LIST
72153: LIST
72154: LIST
72155: LIST
72156: LIST
72157: ST_TO_ADDR
// for i = tmp downto 1 do
72158: LD_ADDR_VAR 0 4
72162: PUSH
72163: DOUBLE
72164: LD_VAR 0 6
72168: INC
72169: ST_TO_ADDR
72170: LD_INT 1
72172: PUSH
72173: FOR_DOWNTO
72174: IFFALSE 72275
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72176: LD_VAR 0 6
72180: PUSH
72181: LD_VAR 0 4
72185: ARRAY
72186: PUSH
72187: LD_INT 1
72189: ARRAY
72190: PPUSH
72191: LD_VAR 0 6
72195: PUSH
72196: LD_VAR 0 4
72200: ARRAY
72201: PUSH
72202: LD_INT 2
72204: ARRAY
72205: PPUSH
72206: CALL_OW 488
72210: NOT
72211: PUSH
72212: LD_VAR 0 6
72216: PUSH
72217: LD_VAR 0 4
72221: ARRAY
72222: PUSH
72223: LD_INT 1
72225: ARRAY
72226: PPUSH
72227: LD_VAR 0 6
72231: PUSH
72232: LD_VAR 0 4
72236: ARRAY
72237: PUSH
72238: LD_INT 2
72240: ARRAY
72241: PPUSH
72242: CALL_OW 428
72246: PUSH
72247: LD_INT 0
72249: NONEQUAL
72250: OR
72251: IFFALSE 72273
// tmp := Delete ( tmp , i ) ;
72253: LD_ADDR_VAR 0 6
72257: PUSH
72258: LD_VAR 0 6
72262: PPUSH
72263: LD_VAR 0 4
72267: PPUSH
72268: CALL_OW 3
72272: ST_TO_ADDR
72273: GO 72173
72275: POP
72276: POP
// j := GetClosestHex ( unit , tmp ) ;
72277: LD_ADDR_VAR 0 5
72281: PUSH
72282: LD_VAR 0 1
72286: PPUSH
72287: LD_VAR 0 6
72291: PPUSH
72292: CALL 71594 0 2
72296: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72297: LD_VAR 0 1
72301: PPUSH
72302: LD_VAR 0 5
72306: PUSH
72307: LD_INT 1
72309: ARRAY
72310: PPUSH
72311: LD_VAR 0 5
72315: PUSH
72316: LD_INT 2
72318: ARRAY
72319: PPUSH
72320: CALL_OW 111
// end ;
72324: LD_VAR 0 3
72328: RET
// export function PrepareApemanSoldier ( ) ; begin
72329: LD_INT 0
72331: PPUSH
// uc_nation := 0 ;
72332: LD_ADDR_OWVAR 21
72336: PUSH
72337: LD_INT 0
72339: ST_TO_ADDR
// hc_sex := sex_male ;
72340: LD_ADDR_OWVAR 27
72344: PUSH
72345: LD_INT 1
72347: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72348: LD_ADDR_OWVAR 28
72352: PUSH
72353: LD_INT 15
72355: ST_TO_ADDR
// hc_gallery :=  ;
72356: LD_ADDR_OWVAR 33
72360: PUSH
72361: LD_STRING 
72363: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72364: LD_ADDR_OWVAR 31
72368: PUSH
72369: LD_INT 0
72371: PPUSH
72372: LD_INT 3
72374: PPUSH
72375: CALL_OW 12
72379: PUSH
72380: LD_INT 0
72382: PPUSH
72383: LD_INT 3
72385: PPUSH
72386: CALL_OW 12
72390: PUSH
72391: LD_INT 0
72393: PUSH
72394: LD_INT 0
72396: PUSH
72397: EMPTY
72398: LIST
72399: LIST
72400: LIST
72401: LIST
72402: ST_TO_ADDR
// end ;
72403: LD_VAR 0 1
72407: RET
// export function PrepareApemanEngineer ( ) ; begin
72408: LD_INT 0
72410: PPUSH
// uc_nation := 0 ;
72411: LD_ADDR_OWVAR 21
72415: PUSH
72416: LD_INT 0
72418: ST_TO_ADDR
// hc_sex := sex_male ;
72419: LD_ADDR_OWVAR 27
72423: PUSH
72424: LD_INT 1
72426: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72427: LD_ADDR_OWVAR 28
72431: PUSH
72432: LD_INT 16
72434: ST_TO_ADDR
// hc_gallery :=  ;
72435: LD_ADDR_OWVAR 33
72439: PUSH
72440: LD_STRING 
72442: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72443: LD_ADDR_OWVAR 31
72447: PUSH
72448: LD_INT 0
72450: PPUSH
72451: LD_INT 3
72453: PPUSH
72454: CALL_OW 12
72458: PUSH
72459: LD_INT 0
72461: PPUSH
72462: LD_INT 3
72464: PPUSH
72465: CALL_OW 12
72469: PUSH
72470: LD_INT 0
72472: PUSH
72473: LD_INT 0
72475: PUSH
72476: EMPTY
72477: LIST
72478: LIST
72479: LIST
72480: LIST
72481: ST_TO_ADDR
// end ;
72482: LD_VAR 0 1
72486: RET
// export function PrepareApeman ( agressivity ) ; begin
72487: LD_INT 0
72489: PPUSH
// uc_side := 0 ;
72490: LD_ADDR_OWVAR 20
72494: PUSH
72495: LD_INT 0
72497: ST_TO_ADDR
// uc_nation := 0 ;
72498: LD_ADDR_OWVAR 21
72502: PUSH
72503: LD_INT 0
72505: ST_TO_ADDR
// hc_sex := sex_male ;
72506: LD_ADDR_OWVAR 27
72510: PUSH
72511: LD_INT 1
72513: ST_TO_ADDR
// hc_class := class_apeman ;
72514: LD_ADDR_OWVAR 28
72518: PUSH
72519: LD_INT 12
72521: ST_TO_ADDR
// hc_gallery :=  ;
72522: LD_ADDR_OWVAR 33
72526: PUSH
72527: LD_STRING 
72529: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72530: LD_ADDR_OWVAR 35
72534: PUSH
72535: LD_VAR 0 1
72539: NEG
72540: PPUSH
72541: LD_VAR 0 1
72545: PPUSH
72546: CALL_OW 12
72550: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72551: LD_ADDR_OWVAR 31
72555: PUSH
72556: LD_INT 0
72558: PPUSH
72559: LD_INT 3
72561: PPUSH
72562: CALL_OW 12
72566: PUSH
72567: LD_INT 0
72569: PPUSH
72570: LD_INT 3
72572: PPUSH
72573: CALL_OW 12
72577: PUSH
72578: LD_INT 0
72580: PUSH
72581: LD_INT 0
72583: PUSH
72584: EMPTY
72585: LIST
72586: LIST
72587: LIST
72588: LIST
72589: ST_TO_ADDR
// end ;
72590: LD_VAR 0 2
72594: RET
// export function PrepareTiger ( agressivity ) ; begin
72595: LD_INT 0
72597: PPUSH
// uc_side := 0 ;
72598: LD_ADDR_OWVAR 20
72602: PUSH
72603: LD_INT 0
72605: ST_TO_ADDR
// uc_nation := 0 ;
72606: LD_ADDR_OWVAR 21
72610: PUSH
72611: LD_INT 0
72613: ST_TO_ADDR
// hc_class := class_tiger ;
72614: LD_ADDR_OWVAR 28
72618: PUSH
72619: LD_INT 14
72621: ST_TO_ADDR
// hc_gallery :=  ;
72622: LD_ADDR_OWVAR 33
72626: PUSH
72627: LD_STRING 
72629: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72630: LD_ADDR_OWVAR 35
72634: PUSH
72635: LD_VAR 0 1
72639: NEG
72640: PPUSH
72641: LD_VAR 0 1
72645: PPUSH
72646: CALL_OW 12
72650: ST_TO_ADDR
// end ;
72651: LD_VAR 0 2
72655: RET
// export function PrepareEnchidna ( ) ; begin
72656: LD_INT 0
72658: PPUSH
// uc_side := 0 ;
72659: LD_ADDR_OWVAR 20
72663: PUSH
72664: LD_INT 0
72666: ST_TO_ADDR
// uc_nation := 0 ;
72667: LD_ADDR_OWVAR 21
72671: PUSH
72672: LD_INT 0
72674: ST_TO_ADDR
// hc_class := class_baggie ;
72675: LD_ADDR_OWVAR 28
72679: PUSH
72680: LD_INT 13
72682: ST_TO_ADDR
// hc_gallery :=  ;
72683: LD_ADDR_OWVAR 33
72687: PUSH
72688: LD_STRING 
72690: ST_TO_ADDR
// end ;
72691: LD_VAR 0 1
72695: RET
// export function PrepareFrog ( ) ; begin
72696: LD_INT 0
72698: PPUSH
// uc_side := 0 ;
72699: LD_ADDR_OWVAR 20
72703: PUSH
72704: LD_INT 0
72706: ST_TO_ADDR
// uc_nation := 0 ;
72707: LD_ADDR_OWVAR 21
72711: PUSH
72712: LD_INT 0
72714: ST_TO_ADDR
// hc_class := class_frog ;
72715: LD_ADDR_OWVAR 28
72719: PUSH
72720: LD_INT 19
72722: ST_TO_ADDR
// hc_gallery :=  ;
72723: LD_ADDR_OWVAR 33
72727: PUSH
72728: LD_STRING 
72730: ST_TO_ADDR
// end ;
72731: LD_VAR 0 1
72735: RET
// export function PrepareFish ( ) ; begin
72736: LD_INT 0
72738: PPUSH
// uc_side := 0 ;
72739: LD_ADDR_OWVAR 20
72743: PUSH
72744: LD_INT 0
72746: ST_TO_ADDR
// uc_nation := 0 ;
72747: LD_ADDR_OWVAR 21
72751: PUSH
72752: LD_INT 0
72754: ST_TO_ADDR
// hc_class := class_fish ;
72755: LD_ADDR_OWVAR 28
72759: PUSH
72760: LD_INT 20
72762: ST_TO_ADDR
// hc_gallery :=  ;
72763: LD_ADDR_OWVAR 33
72767: PUSH
72768: LD_STRING 
72770: ST_TO_ADDR
// end ;
72771: LD_VAR 0 1
72775: RET
// export function PrepareBird ( ) ; begin
72776: LD_INT 0
72778: PPUSH
// uc_side := 0 ;
72779: LD_ADDR_OWVAR 20
72783: PUSH
72784: LD_INT 0
72786: ST_TO_ADDR
// uc_nation := 0 ;
72787: LD_ADDR_OWVAR 21
72791: PUSH
72792: LD_INT 0
72794: ST_TO_ADDR
// hc_class := class_phororhacos ;
72795: LD_ADDR_OWVAR 28
72799: PUSH
72800: LD_INT 18
72802: ST_TO_ADDR
// hc_gallery :=  ;
72803: LD_ADDR_OWVAR 33
72807: PUSH
72808: LD_STRING 
72810: ST_TO_ADDR
// end ;
72811: LD_VAR 0 1
72815: RET
// export function PrepareHorse ( ) ; begin
72816: LD_INT 0
72818: PPUSH
// uc_side := 0 ;
72819: LD_ADDR_OWVAR 20
72823: PUSH
72824: LD_INT 0
72826: ST_TO_ADDR
// uc_nation := 0 ;
72827: LD_ADDR_OWVAR 21
72831: PUSH
72832: LD_INT 0
72834: ST_TO_ADDR
// hc_class := class_horse ;
72835: LD_ADDR_OWVAR 28
72839: PUSH
72840: LD_INT 21
72842: ST_TO_ADDR
// hc_gallery :=  ;
72843: LD_ADDR_OWVAR 33
72847: PUSH
72848: LD_STRING 
72850: ST_TO_ADDR
// end ;
72851: LD_VAR 0 1
72855: RET
// export function PrepareMastodont ( ) ; begin
72856: LD_INT 0
72858: PPUSH
// uc_side := 0 ;
72859: LD_ADDR_OWVAR 20
72863: PUSH
72864: LD_INT 0
72866: ST_TO_ADDR
// uc_nation := 0 ;
72867: LD_ADDR_OWVAR 21
72871: PUSH
72872: LD_INT 0
72874: ST_TO_ADDR
// vc_chassis := class_mastodont ;
72875: LD_ADDR_OWVAR 37
72879: PUSH
72880: LD_INT 31
72882: ST_TO_ADDR
// vc_control := control_rider ;
72883: LD_ADDR_OWVAR 38
72887: PUSH
72888: LD_INT 4
72890: ST_TO_ADDR
// end ;
72891: LD_VAR 0 1
72895: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72896: LD_INT 0
72898: PPUSH
72899: PPUSH
72900: PPUSH
// uc_side = 0 ;
72901: LD_ADDR_OWVAR 20
72905: PUSH
72906: LD_INT 0
72908: ST_TO_ADDR
// uc_nation = 0 ;
72909: LD_ADDR_OWVAR 21
72913: PUSH
72914: LD_INT 0
72916: ST_TO_ADDR
// InitHc_All ( ) ;
72917: CALL_OW 584
// InitVc ;
72921: CALL_OW 20
// if mastodonts then
72925: LD_VAR 0 6
72929: IFFALSE 72996
// for i = 1 to mastodonts do
72931: LD_ADDR_VAR 0 11
72935: PUSH
72936: DOUBLE
72937: LD_INT 1
72939: DEC
72940: ST_TO_ADDR
72941: LD_VAR 0 6
72945: PUSH
72946: FOR_TO
72947: IFFALSE 72994
// begin vc_chassis := 31 ;
72949: LD_ADDR_OWVAR 37
72953: PUSH
72954: LD_INT 31
72956: ST_TO_ADDR
// vc_control := control_rider ;
72957: LD_ADDR_OWVAR 38
72961: PUSH
72962: LD_INT 4
72964: ST_TO_ADDR
// animal := CreateVehicle ;
72965: LD_ADDR_VAR 0 12
72969: PUSH
72970: CALL_OW 45
72974: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72975: LD_VAR 0 12
72979: PPUSH
72980: LD_VAR 0 8
72984: PPUSH
72985: LD_INT 0
72987: PPUSH
72988: CALL 75131 0 3
// end ;
72992: GO 72946
72994: POP
72995: POP
// if horses then
72996: LD_VAR 0 5
73000: IFFALSE 73067
// for i = 1 to horses do
73002: LD_ADDR_VAR 0 11
73006: PUSH
73007: DOUBLE
73008: LD_INT 1
73010: DEC
73011: ST_TO_ADDR
73012: LD_VAR 0 5
73016: PUSH
73017: FOR_TO
73018: IFFALSE 73065
// begin hc_class := 21 ;
73020: LD_ADDR_OWVAR 28
73024: PUSH
73025: LD_INT 21
73027: ST_TO_ADDR
// hc_gallery :=  ;
73028: LD_ADDR_OWVAR 33
73032: PUSH
73033: LD_STRING 
73035: ST_TO_ADDR
// animal := CreateHuman ;
73036: LD_ADDR_VAR 0 12
73040: PUSH
73041: CALL_OW 44
73045: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73046: LD_VAR 0 12
73050: PPUSH
73051: LD_VAR 0 8
73055: PPUSH
73056: LD_INT 0
73058: PPUSH
73059: CALL 75131 0 3
// end ;
73063: GO 73017
73065: POP
73066: POP
// if birds then
73067: LD_VAR 0 1
73071: IFFALSE 73138
// for i = 1 to birds do
73073: LD_ADDR_VAR 0 11
73077: PUSH
73078: DOUBLE
73079: LD_INT 1
73081: DEC
73082: ST_TO_ADDR
73083: LD_VAR 0 1
73087: PUSH
73088: FOR_TO
73089: IFFALSE 73136
// begin hc_class = 18 ;
73091: LD_ADDR_OWVAR 28
73095: PUSH
73096: LD_INT 18
73098: ST_TO_ADDR
// hc_gallery =  ;
73099: LD_ADDR_OWVAR 33
73103: PUSH
73104: LD_STRING 
73106: ST_TO_ADDR
// animal := CreateHuman ;
73107: LD_ADDR_VAR 0 12
73111: PUSH
73112: CALL_OW 44
73116: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73117: LD_VAR 0 12
73121: PPUSH
73122: LD_VAR 0 8
73126: PPUSH
73127: LD_INT 0
73129: PPUSH
73130: CALL 75131 0 3
// end ;
73134: GO 73088
73136: POP
73137: POP
// if tigers then
73138: LD_VAR 0 2
73142: IFFALSE 73226
// for i = 1 to tigers do
73144: LD_ADDR_VAR 0 11
73148: PUSH
73149: DOUBLE
73150: LD_INT 1
73152: DEC
73153: ST_TO_ADDR
73154: LD_VAR 0 2
73158: PUSH
73159: FOR_TO
73160: IFFALSE 73224
// begin hc_class = class_tiger ;
73162: LD_ADDR_OWVAR 28
73166: PUSH
73167: LD_INT 14
73169: ST_TO_ADDR
// hc_gallery =  ;
73170: LD_ADDR_OWVAR 33
73174: PUSH
73175: LD_STRING 
73177: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73178: LD_ADDR_OWVAR 35
73182: PUSH
73183: LD_INT 7
73185: NEG
73186: PPUSH
73187: LD_INT 7
73189: PPUSH
73190: CALL_OW 12
73194: ST_TO_ADDR
// animal := CreateHuman ;
73195: LD_ADDR_VAR 0 12
73199: PUSH
73200: CALL_OW 44
73204: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73205: LD_VAR 0 12
73209: PPUSH
73210: LD_VAR 0 8
73214: PPUSH
73215: LD_INT 0
73217: PPUSH
73218: CALL 75131 0 3
// end ;
73222: GO 73159
73224: POP
73225: POP
// if apemans then
73226: LD_VAR 0 3
73230: IFFALSE 73353
// for i = 1 to apemans do
73232: LD_ADDR_VAR 0 11
73236: PUSH
73237: DOUBLE
73238: LD_INT 1
73240: DEC
73241: ST_TO_ADDR
73242: LD_VAR 0 3
73246: PUSH
73247: FOR_TO
73248: IFFALSE 73351
// begin hc_class = class_apeman ;
73250: LD_ADDR_OWVAR 28
73254: PUSH
73255: LD_INT 12
73257: ST_TO_ADDR
// hc_gallery =  ;
73258: LD_ADDR_OWVAR 33
73262: PUSH
73263: LD_STRING 
73265: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73266: LD_ADDR_OWVAR 35
73270: PUSH
73271: LD_INT 2
73273: NEG
73274: PPUSH
73275: LD_INT 2
73277: PPUSH
73278: CALL_OW 12
73282: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73283: LD_ADDR_OWVAR 31
73287: PUSH
73288: LD_INT 1
73290: PPUSH
73291: LD_INT 3
73293: PPUSH
73294: CALL_OW 12
73298: PUSH
73299: LD_INT 1
73301: PPUSH
73302: LD_INT 3
73304: PPUSH
73305: CALL_OW 12
73309: PUSH
73310: LD_INT 0
73312: PUSH
73313: LD_INT 0
73315: PUSH
73316: EMPTY
73317: LIST
73318: LIST
73319: LIST
73320: LIST
73321: ST_TO_ADDR
// animal := CreateHuman ;
73322: LD_ADDR_VAR 0 12
73326: PUSH
73327: CALL_OW 44
73331: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73332: LD_VAR 0 12
73336: PPUSH
73337: LD_VAR 0 8
73341: PPUSH
73342: LD_INT 0
73344: PPUSH
73345: CALL 75131 0 3
// end ;
73349: GO 73247
73351: POP
73352: POP
// if enchidnas then
73353: LD_VAR 0 4
73357: IFFALSE 73424
// for i = 1 to enchidnas do
73359: LD_ADDR_VAR 0 11
73363: PUSH
73364: DOUBLE
73365: LD_INT 1
73367: DEC
73368: ST_TO_ADDR
73369: LD_VAR 0 4
73373: PUSH
73374: FOR_TO
73375: IFFALSE 73422
// begin hc_class = 13 ;
73377: LD_ADDR_OWVAR 28
73381: PUSH
73382: LD_INT 13
73384: ST_TO_ADDR
// hc_gallery =  ;
73385: LD_ADDR_OWVAR 33
73389: PUSH
73390: LD_STRING 
73392: ST_TO_ADDR
// animal := CreateHuman ;
73393: LD_ADDR_VAR 0 12
73397: PUSH
73398: CALL_OW 44
73402: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73403: LD_VAR 0 12
73407: PPUSH
73408: LD_VAR 0 8
73412: PPUSH
73413: LD_INT 0
73415: PPUSH
73416: CALL 75131 0 3
// end ;
73420: GO 73374
73422: POP
73423: POP
// if fishes then
73424: LD_VAR 0 7
73428: IFFALSE 73495
// for i = 1 to fishes do
73430: LD_ADDR_VAR 0 11
73434: PUSH
73435: DOUBLE
73436: LD_INT 1
73438: DEC
73439: ST_TO_ADDR
73440: LD_VAR 0 7
73444: PUSH
73445: FOR_TO
73446: IFFALSE 73493
// begin hc_class = 20 ;
73448: LD_ADDR_OWVAR 28
73452: PUSH
73453: LD_INT 20
73455: ST_TO_ADDR
// hc_gallery =  ;
73456: LD_ADDR_OWVAR 33
73460: PUSH
73461: LD_STRING 
73463: ST_TO_ADDR
// animal := CreateHuman ;
73464: LD_ADDR_VAR 0 12
73468: PUSH
73469: CALL_OW 44
73473: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73474: LD_VAR 0 12
73478: PPUSH
73479: LD_VAR 0 9
73483: PPUSH
73484: LD_INT 0
73486: PPUSH
73487: CALL 75131 0 3
// end ;
73491: GO 73445
73493: POP
73494: POP
// end ;
73495: LD_VAR 0 10
73499: RET
// export function WantHeal ( sci , unit ) ; begin
73500: LD_INT 0
73502: PPUSH
// if GetTaskList ( sci ) > 0 then
73503: LD_VAR 0 1
73507: PPUSH
73508: CALL_OW 437
73512: PUSH
73513: LD_INT 0
73515: GREATER
73516: IFFALSE 73586
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73518: LD_VAR 0 1
73522: PPUSH
73523: CALL_OW 437
73527: PUSH
73528: LD_INT 1
73530: ARRAY
73531: PUSH
73532: LD_INT 1
73534: ARRAY
73535: PUSH
73536: LD_STRING l
73538: EQUAL
73539: PUSH
73540: LD_VAR 0 1
73544: PPUSH
73545: CALL_OW 437
73549: PUSH
73550: LD_INT 1
73552: ARRAY
73553: PUSH
73554: LD_INT 4
73556: ARRAY
73557: PUSH
73558: LD_VAR 0 2
73562: EQUAL
73563: AND
73564: IFFALSE 73576
// result := true else
73566: LD_ADDR_VAR 0 3
73570: PUSH
73571: LD_INT 1
73573: ST_TO_ADDR
73574: GO 73584
// result := false ;
73576: LD_ADDR_VAR 0 3
73580: PUSH
73581: LD_INT 0
73583: ST_TO_ADDR
// end else
73584: GO 73594
// result := false ;
73586: LD_ADDR_VAR 0 3
73590: PUSH
73591: LD_INT 0
73593: ST_TO_ADDR
// end ;
73594: LD_VAR 0 3
73598: RET
// export function HealTarget ( sci ) ; begin
73599: LD_INT 0
73601: PPUSH
// if not sci then
73602: LD_VAR 0 1
73606: NOT
73607: IFFALSE 73611
// exit ;
73609: GO 73676
// result := 0 ;
73611: LD_ADDR_VAR 0 2
73615: PUSH
73616: LD_INT 0
73618: ST_TO_ADDR
// if GetTaskList ( sci ) then
73619: LD_VAR 0 1
73623: PPUSH
73624: CALL_OW 437
73628: IFFALSE 73676
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73630: LD_VAR 0 1
73634: PPUSH
73635: CALL_OW 437
73639: PUSH
73640: LD_INT 1
73642: ARRAY
73643: PUSH
73644: LD_INT 1
73646: ARRAY
73647: PUSH
73648: LD_STRING l
73650: EQUAL
73651: IFFALSE 73676
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73653: LD_ADDR_VAR 0 2
73657: PUSH
73658: LD_VAR 0 1
73662: PPUSH
73663: CALL_OW 437
73667: PUSH
73668: LD_INT 1
73670: ARRAY
73671: PUSH
73672: LD_INT 4
73674: ARRAY
73675: ST_TO_ADDR
// end ;
73676: LD_VAR 0 2
73680: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73681: LD_INT 0
73683: PPUSH
73684: PPUSH
73685: PPUSH
73686: PPUSH
// if not base_units then
73687: LD_VAR 0 1
73691: NOT
73692: IFFALSE 73696
// exit ;
73694: GO 73783
// result := false ;
73696: LD_ADDR_VAR 0 2
73700: PUSH
73701: LD_INT 0
73703: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73704: LD_ADDR_VAR 0 5
73708: PUSH
73709: LD_VAR 0 1
73713: PPUSH
73714: LD_INT 21
73716: PUSH
73717: LD_INT 3
73719: PUSH
73720: EMPTY
73721: LIST
73722: LIST
73723: PPUSH
73724: CALL_OW 72
73728: ST_TO_ADDR
// if not tmp then
73729: LD_VAR 0 5
73733: NOT
73734: IFFALSE 73738
// exit ;
73736: GO 73783
// for i in tmp do
73738: LD_ADDR_VAR 0 3
73742: PUSH
73743: LD_VAR 0 5
73747: PUSH
73748: FOR_IN
73749: IFFALSE 73781
// begin result := EnemyInRange ( i , 22 ) ;
73751: LD_ADDR_VAR 0 2
73755: PUSH
73756: LD_VAR 0 3
73760: PPUSH
73761: LD_INT 22
73763: PPUSH
73764: CALL 71469 0 2
73768: ST_TO_ADDR
// if result then
73769: LD_VAR 0 2
73773: IFFALSE 73779
// exit ;
73775: POP
73776: POP
73777: GO 73783
// end ;
73779: GO 73748
73781: POP
73782: POP
// end ;
73783: LD_VAR 0 2
73787: RET
// export function FilterByTag ( units , tag ) ; begin
73788: LD_INT 0
73790: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
73791: LD_ADDR_VAR 0 3
73795: PUSH
73796: LD_VAR 0 1
73800: PPUSH
73801: LD_INT 120
73803: PUSH
73804: LD_VAR 0 2
73808: PUSH
73809: EMPTY
73810: LIST
73811: LIST
73812: PPUSH
73813: CALL_OW 72
73817: ST_TO_ADDR
// end ;
73818: LD_VAR 0 3
73822: RET
// export function IsDriver ( un ) ; begin
73823: LD_INT 0
73825: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73826: LD_ADDR_VAR 0 2
73830: PUSH
73831: LD_VAR 0 1
73835: PUSH
73836: LD_INT 55
73838: PUSH
73839: EMPTY
73840: LIST
73841: PPUSH
73842: CALL_OW 69
73846: IN
73847: ST_TO_ADDR
// end ;
73848: LD_VAR 0 2
73852: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73853: LD_INT 0
73855: PPUSH
73856: PPUSH
// list := [ ] ;
73857: LD_ADDR_VAR 0 5
73861: PUSH
73862: EMPTY
73863: ST_TO_ADDR
// case d of 0 :
73864: LD_VAR 0 3
73868: PUSH
73869: LD_INT 0
73871: DOUBLE
73872: EQUAL
73873: IFTRUE 73877
73875: GO 74010
73877: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73878: LD_ADDR_VAR 0 5
73882: PUSH
73883: LD_VAR 0 1
73887: PUSH
73888: LD_INT 4
73890: MINUS
73891: PUSH
73892: LD_VAR 0 2
73896: PUSH
73897: LD_INT 4
73899: MINUS
73900: PUSH
73901: LD_INT 2
73903: PUSH
73904: EMPTY
73905: LIST
73906: LIST
73907: LIST
73908: PUSH
73909: LD_VAR 0 1
73913: PUSH
73914: LD_INT 3
73916: MINUS
73917: PUSH
73918: LD_VAR 0 2
73922: PUSH
73923: LD_INT 1
73925: PUSH
73926: EMPTY
73927: LIST
73928: LIST
73929: LIST
73930: PUSH
73931: LD_VAR 0 1
73935: PUSH
73936: LD_INT 4
73938: PLUS
73939: PUSH
73940: LD_VAR 0 2
73944: PUSH
73945: LD_INT 4
73947: PUSH
73948: EMPTY
73949: LIST
73950: LIST
73951: LIST
73952: PUSH
73953: LD_VAR 0 1
73957: PUSH
73958: LD_INT 3
73960: PLUS
73961: PUSH
73962: LD_VAR 0 2
73966: PUSH
73967: LD_INT 3
73969: PLUS
73970: PUSH
73971: LD_INT 5
73973: PUSH
73974: EMPTY
73975: LIST
73976: LIST
73977: LIST
73978: PUSH
73979: LD_VAR 0 1
73983: PUSH
73984: LD_VAR 0 2
73988: PUSH
73989: LD_INT 4
73991: PLUS
73992: PUSH
73993: LD_INT 0
73995: PUSH
73996: EMPTY
73997: LIST
73998: LIST
73999: LIST
74000: PUSH
74001: EMPTY
74002: LIST
74003: LIST
74004: LIST
74005: LIST
74006: LIST
74007: ST_TO_ADDR
// end ; 1 :
74008: GO 74708
74010: LD_INT 1
74012: DOUBLE
74013: EQUAL
74014: IFTRUE 74018
74016: GO 74151
74018: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74019: LD_ADDR_VAR 0 5
74023: PUSH
74024: LD_VAR 0 1
74028: PUSH
74029: LD_VAR 0 2
74033: PUSH
74034: LD_INT 4
74036: MINUS
74037: PUSH
74038: LD_INT 3
74040: PUSH
74041: EMPTY
74042: LIST
74043: LIST
74044: LIST
74045: PUSH
74046: LD_VAR 0 1
74050: PUSH
74051: LD_INT 3
74053: MINUS
74054: PUSH
74055: LD_VAR 0 2
74059: PUSH
74060: LD_INT 3
74062: MINUS
74063: PUSH
74064: LD_INT 2
74066: PUSH
74067: EMPTY
74068: LIST
74069: LIST
74070: LIST
74071: PUSH
74072: LD_VAR 0 1
74076: PUSH
74077: LD_INT 4
74079: MINUS
74080: PUSH
74081: LD_VAR 0 2
74085: PUSH
74086: LD_INT 1
74088: PUSH
74089: EMPTY
74090: LIST
74091: LIST
74092: LIST
74093: PUSH
74094: LD_VAR 0 1
74098: PUSH
74099: LD_VAR 0 2
74103: PUSH
74104: LD_INT 3
74106: PLUS
74107: PUSH
74108: LD_INT 0
74110: PUSH
74111: EMPTY
74112: LIST
74113: LIST
74114: LIST
74115: PUSH
74116: LD_VAR 0 1
74120: PUSH
74121: LD_INT 4
74123: PLUS
74124: PUSH
74125: LD_VAR 0 2
74129: PUSH
74130: LD_INT 4
74132: PLUS
74133: PUSH
74134: LD_INT 5
74136: PUSH
74137: EMPTY
74138: LIST
74139: LIST
74140: LIST
74141: PUSH
74142: EMPTY
74143: LIST
74144: LIST
74145: LIST
74146: LIST
74147: LIST
74148: ST_TO_ADDR
// end ; 2 :
74149: GO 74708
74151: LD_INT 2
74153: DOUBLE
74154: EQUAL
74155: IFTRUE 74159
74157: GO 74288
74159: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74160: LD_ADDR_VAR 0 5
74164: PUSH
74165: LD_VAR 0 1
74169: PUSH
74170: LD_VAR 0 2
74174: PUSH
74175: LD_INT 3
74177: MINUS
74178: PUSH
74179: LD_INT 3
74181: PUSH
74182: EMPTY
74183: LIST
74184: LIST
74185: LIST
74186: PUSH
74187: LD_VAR 0 1
74191: PUSH
74192: LD_INT 4
74194: PLUS
74195: PUSH
74196: LD_VAR 0 2
74200: PUSH
74201: LD_INT 4
74203: PUSH
74204: EMPTY
74205: LIST
74206: LIST
74207: LIST
74208: PUSH
74209: LD_VAR 0 1
74213: PUSH
74214: LD_VAR 0 2
74218: PUSH
74219: LD_INT 4
74221: PLUS
74222: PUSH
74223: LD_INT 0
74225: PUSH
74226: EMPTY
74227: LIST
74228: LIST
74229: LIST
74230: PUSH
74231: LD_VAR 0 1
74235: PUSH
74236: LD_INT 3
74238: MINUS
74239: PUSH
74240: LD_VAR 0 2
74244: PUSH
74245: LD_INT 1
74247: PUSH
74248: EMPTY
74249: LIST
74250: LIST
74251: LIST
74252: PUSH
74253: LD_VAR 0 1
74257: PUSH
74258: LD_INT 4
74260: MINUS
74261: PUSH
74262: LD_VAR 0 2
74266: PUSH
74267: LD_INT 4
74269: MINUS
74270: PUSH
74271: LD_INT 2
74273: PUSH
74274: EMPTY
74275: LIST
74276: LIST
74277: LIST
74278: PUSH
74279: EMPTY
74280: LIST
74281: LIST
74282: LIST
74283: LIST
74284: LIST
74285: ST_TO_ADDR
// end ; 3 :
74286: GO 74708
74288: LD_INT 3
74290: DOUBLE
74291: EQUAL
74292: IFTRUE 74296
74294: GO 74429
74296: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74297: LD_ADDR_VAR 0 5
74301: PUSH
74302: LD_VAR 0 1
74306: PUSH
74307: LD_INT 3
74309: PLUS
74310: PUSH
74311: LD_VAR 0 2
74315: PUSH
74316: LD_INT 4
74318: PUSH
74319: EMPTY
74320: LIST
74321: LIST
74322: LIST
74323: PUSH
74324: LD_VAR 0 1
74328: PUSH
74329: LD_INT 4
74331: PLUS
74332: PUSH
74333: LD_VAR 0 2
74337: PUSH
74338: LD_INT 4
74340: PLUS
74341: PUSH
74342: LD_INT 5
74344: PUSH
74345: EMPTY
74346: LIST
74347: LIST
74348: LIST
74349: PUSH
74350: LD_VAR 0 1
74354: PUSH
74355: LD_INT 4
74357: MINUS
74358: PUSH
74359: LD_VAR 0 2
74363: PUSH
74364: LD_INT 1
74366: PUSH
74367: EMPTY
74368: LIST
74369: LIST
74370: LIST
74371: PUSH
74372: LD_VAR 0 1
74376: PUSH
74377: LD_VAR 0 2
74381: PUSH
74382: LD_INT 4
74384: MINUS
74385: PUSH
74386: LD_INT 3
74388: PUSH
74389: EMPTY
74390: LIST
74391: LIST
74392: LIST
74393: PUSH
74394: LD_VAR 0 1
74398: PUSH
74399: LD_INT 3
74401: MINUS
74402: PUSH
74403: LD_VAR 0 2
74407: PUSH
74408: LD_INT 3
74410: MINUS
74411: PUSH
74412: LD_INT 2
74414: PUSH
74415: EMPTY
74416: LIST
74417: LIST
74418: LIST
74419: PUSH
74420: EMPTY
74421: LIST
74422: LIST
74423: LIST
74424: LIST
74425: LIST
74426: ST_TO_ADDR
// end ; 4 :
74427: GO 74708
74429: LD_INT 4
74431: DOUBLE
74432: EQUAL
74433: IFTRUE 74437
74435: GO 74570
74437: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74438: LD_ADDR_VAR 0 5
74442: PUSH
74443: LD_VAR 0 1
74447: PUSH
74448: LD_VAR 0 2
74452: PUSH
74453: LD_INT 4
74455: PLUS
74456: PUSH
74457: LD_INT 0
74459: PUSH
74460: EMPTY
74461: LIST
74462: LIST
74463: LIST
74464: PUSH
74465: LD_VAR 0 1
74469: PUSH
74470: LD_INT 3
74472: PLUS
74473: PUSH
74474: LD_VAR 0 2
74478: PUSH
74479: LD_INT 3
74481: PLUS
74482: PUSH
74483: LD_INT 5
74485: PUSH
74486: EMPTY
74487: LIST
74488: LIST
74489: LIST
74490: PUSH
74491: LD_VAR 0 1
74495: PUSH
74496: LD_INT 4
74498: PLUS
74499: PUSH
74500: LD_VAR 0 2
74504: PUSH
74505: LD_INT 4
74507: PUSH
74508: EMPTY
74509: LIST
74510: LIST
74511: LIST
74512: PUSH
74513: LD_VAR 0 1
74517: PUSH
74518: LD_VAR 0 2
74522: PUSH
74523: LD_INT 3
74525: MINUS
74526: PUSH
74527: LD_INT 3
74529: PUSH
74530: EMPTY
74531: LIST
74532: LIST
74533: LIST
74534: PUSH
74535: LD_VAR 0 1
74539: PUSH
74540: LD_INT 4
74542: MINUS
74543: PUSH
74544: LD_VAR 0 2
74548: PUSH
74549: LD_INT 4
74551: MINUS
74552: PUSH
74553: LD_INT 2
74555: PUSH
74556: EMPTY
74557: LIST
74558: LIST
74559: LIST
74560: PUSH
74561: EMPTY
74562: LIST
74563: LIST
74564: LIST
74565: LIST
74566: LIST
74567: ST_TO_ADDR
// end ; 5 :
74568: GO 74708
74570: LD_INT 5
74572: DOUBLE
74573: EQUAL
74574: IFTRUE 74578
74576: GO 74707
74578: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74579: LD_ADDR_VAR 0 5
74583: PUSH
74584: LD_VAR 0 1
74588: PUSH
74589: LD_INT 4
74591: MINUS
74592: PUSH
74593: LD_VAR 0 2
74597: PUSH
74598: LD_INT 1
74600: PUSH
74601: EMPTY
74602: LIST
74603: LIST
74604: LIST
74605: PUSH
74606: LD_VAR 0 1
74610: PUSH
74611: LD_VAR 0 2
74615: PUSH
74616: LD_INT 4
74618: MINUS
74619: PUSH
74620: LD_INT 3
74622: PUSH
74623: EMPTY
74624: LIST
74625: LIST
74626: LIST
74627: PUSH
74628: LD_VAR 0 1
74632: PUSH
74633: LD_INT 4
74635: PLUS
74636: PUSH
74637: LD_VAR 0 2
74641: PUSH
74642: LD_INT 4
74644: PLUS
74645: PUSH
74646: LD_INT 5
74648: PUSH
74649: EMPTY
74650: LIST
74651: LIST
74652: LIST
74653: PUSH
74654: LD_VAR 0 1
74658: PUSH
74659: LD_INT 3
74661: PLUS
74662: PUSH
74663: LD_VAR 0 2
74667: PUSH
74668: LD_INT 4
74670: PUSH
74671: EMPTY
74672: LIST
74673: LIST
74674: LIST
74675: PUSH
74676: LD_VAR 0 1
74680: PUSH
74681: LD_VAR 0 2
74685: PUSH
74686: LD_INT 3
74688: PLUS
74689: PUSH
74690: LD_INT 0
74692: PUSH
74693: EMPTY
74694: LIST
74695: LIST
74696: LIST
74697: PUSH
74698: EMPTY
74699: LIST
74700: LIST
74701: LIST
74702: LIST
74703: LIST
74704: ST_TO_ADDR
// end ; end ;
74705: GO 74708
74707: POP
// result := list ;
74708: LD_ADDR_VAR 0 4
74712: PUSH
74713: LD_VAR 0 5
74717: ST_TO_ADDR
// end ;
74718: LD_VAR 0 4
74722: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74723: LD_INT 0
74725: PPUSH
74726: PPUSH
74727: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74728: LD_VAR 0 1
74732: NOT
74733: PUSH
74734: LD_VAR 0 2
74738: PUSH
74739: LD_INT 1
74741: PUSH
74742: LD_INT 2
74744: PUSH
74745: LD_INT 3
74747: PUSH
74748: LD_INT 4
74750: PUSH
74751: EMPTY
74752: LIST
74753: LIST
74754: LIST
74755: LIST
74756: IN
74757: NOT
74758: OR
74759: IFFALSE 74763
// exit ;
74761: GO 74855
// tmp := [ ] ;
74763: LD_ADDR_VAR 0 5
74767: PUSH
74768: EMPTY
74769: ST_TO_ADDR
// for i in units do
74770: LD_ADDR_VAR 0 4
74774: PUSH
74775: LD_VAR 0 1
74779: PUSH
74780: FOR_IN
74781: IFFALSE 74824
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
74783: LD_ADDR_VAR 0 5
74787: PUSH
74788: LD_VAR 0 5
74792: PPUSH
74793: LD_VAR 0 5
74797: PUSH
74798: LD_INT 1
74800: PLUS
74801: PPUSH
74802: LD_VAR 0 4
74806: PPUSH
74807: LD_VAR 0 2
74811: PPUSH
74812: CALL_OW 259
74816: PPUSH
74817: CALL_OW 2
74821: ST_TO_ADDR
74822: GO 74780
74824: POP
74825: POP
// if not tmp then
74826: LD_VAR 0 5
74830: NOT
74831: IFFALSE 74835
// exit ;
74833: GO 74855
// result := SortListByListDesc ( units , tmp ) ;
74835: LD_ADDR_VAR 0 3
74839: PUSH
74840: LD_VAR 0 1
74844: PPUSH
74845: LD_VAR 0 5
74849: PPUSH
74850: CALL_OW 77
74854: ST_TO_ADDR
// end ;
74855: LD_VAR 0 3
74859: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74860: LD_INT 0
74862: PPUSH
74863: PPUSH
74864: PPUSH
// result := false ;
74865: LD_ADDR_VAR 0 3
74869: PUSH
74870: LD_INT 0
74872: ST_TO_ADDR
// x := GetX ( building ) ;
74873: LD_ADDR_VAR 0 4
74877: PUSH
74878: LD_VAR 0 2
74882: PPUSH
74883: CALL_OW 250
74887: ST_TO_ADDR
// y := GetY ( building ) ;
74888: LD_ADDR_VAR 0 5
74892: PUSH
74893: LD_VAR 0 2
74897: PPUSH
74898: CALL_OW 251
74902: ST_TO_ADDR
// if not building or not x or not y then
74903: LD_VAR 0 2
74907: NOT
74908: PUSH
74909: LD_VAR 0 4
74913: NOT
74914: OR
74915: PUSH
74916: LD_VAR 0 5
74920: NOT
74921: OR
74922: IFFALSE 74926
// exit ;
74924: GO 75018
// if GetTaskList ( unit ) then
74926: LD_VAR 0 1
74930: PPUSH
74931: CALL_OW 437
74935: IFFALSE 75018
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74937: LD_STRING e
74939: PUSH
74940: LD_VAR 0 1
74944: PPUSH
74945: CALL_OW 437
74949: PUSH
74950: LD_INT 1
74952: ARRAY
74953: PUSH
74954: LD_INT 1
74956: ARRAY
74957: EQUAL
74958: PUSH
74959: LD_VAR 0 4
74963: PUSH
74964: LD_VAR 0 1
74968: PPUSH
74969: CALL_OW 437
74973: PUSH
74974: LD_INT 1
74976: ARRAY
74977: PUSH
74978: LD_INT 2
74980: ARRAY
74981: EQUAL
74982: AND
74983: PUSH
74984: LD_VAR 0 5
74988: PUSH
74989: LD_VAR 0 1
74993: PPUSH
74994: CALL_OW 437
74998: PUSH
74999: LD_INT 1
75001: ARRAY
75002: PUSH
75003: LD_INT 3
75005: ARRAY
75006: EQUAL
75007: AND
75008: IFFALSE 75018
// result := true end ;
75010: LD_ADDR_VAR 0 3
75014: PUSH
75015: LD_INT 1
75017: ST_TO_ADDR
// end ;
75018: LD_VAR 0 3
75022: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75023: LD_INT 0
75025: PPUSH
// result := false ;
75026: LD_ADDR_VAR 0 4
75030: PUSH
75031: LD_INT 0
75033: ST_TO_ADDR
// if GetTaskList ( unit ) then
75034: LD_VAR 0 1
75038: PPUSH
75039: CALL_OW 437
75043: IFFALSE 75126
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75045: LD_STRING M
75047: PUSH
75048: LD_VAR 0 1
75052: PPUSH
75053: CALL_OW 437
75057: PUSH
75058: LD_INT 1
75060: ARRAY
75061: PUSH
75062: LD_INT 1
75064: ARRAY
75065: EQUAL
75066: PUSH
75067: LD_VAR 0 2
75071: PUSH
75072: LD_VAR 0 1
75076: PPUSH
75077: CALL_OW 437
75081: PUSH
75082: LD_INT 1
75084: ARRAY
75085: PUSH
75086: LD_INT 2
75088: ARRAY
75089: EQUAL
75090: AND
75091: PUSH
75092: LD_VAR 0 3
75096: PUSH
75097: LD_VAR 0 1
75101: PPUSH
75102: CALL_OW 437
75106: PUSH
75107: LD_INT 1
75109: ARRAY
75110: PUSH
75111: LD_INT 3
75113: ARRAY
75114: EQUAL
75115: AND
75116: IFFALSE 75126
// result := true ;
75118: LD_ADDR_VAR 0 4
75122: PUSH
75123: LD_INT 1
75125: ST_TO_ADDR
// end ; end ;
75126: LD_VAR 0 4
75130: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75131: LD_INT 0
75133: PPUSH
75134: PPUSH
75135: PPUSH
75136: PPUSH
// if not unit or not area then
75137: LD_VAR 0 1
75141: NOT
75142: PUSH
75143: LD_VAR 0 2
75147: NOT
75148: OR
75149: IFFALSE 75153
// exit ;
75151: GO 75317
// tmp := AreaToList ( area , i ) ;
75153: LD_ADDR_VAR 0 6
75157: PUSH
75158: LD_VAR 0 2
75162: PPUSH
75163: LD_VAR 0 5
75167: PPUSH
75168: CALL_OW 517
75172: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75173: LD_ADDR_VAR 0 5
75177: PUSH
75178: DOUBLE
75179: LD_INT 1
75181: DEC
75182: ST_TO_ADDR
75183: LD_VAR 0 6
75187: PUSH
75188: LD_INT 1
75190: ARRAY
75191: PUSH
75192: FOR_TO
75193: IFFALSE 75315
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75195: LD_ADDR_VAR 0 7
75199: PUSH
75200: LD_VAR 0 6
75204: PUSH
75205: LD_INT 1
75207: ARRAY
75208: PUSH
75209: LD_VAR 0 5
75213: ARRAY
75214: PUSH
75215: LD_VAR 0 6
75219: PUSH
75220: LD_INT 2
75222: ARRAY
75223: PUSH
75224: LD_VAR 0 5
75228: ARRAY
75229: PUSH
75230: EMPTY
75231: LIST
75232: LIST
75233: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
75234: LD_VAR 0 7
75238: PUSH
75239: LD_INT 1
75241: ARRAY
75242: PPUSH
75243: LD_VAR 0 7
75247: PUSH
75248: LD_INT 2
75250: ARRAY
75251: PPUSH
75252: CALL_OW 428
75256: PUSH
75257: LD_INT 0
75259: EQUAL
75260: IFFALSE 75313
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75262: LD_VAR 0 1
75266: PPUSH
75267: LD_VAR 0 7
75271: PUSH
75272: LD_INT 1
75274: ARRAY
75275: PPUSH
75276: LD_VAR 0 7
75280: PUSH
75281: LD_INT 2
75283: ARRAY
75284: PPUSH
75285: LD_VAR 0 3
75289: PPUSH
75290: CALL_OW 48
// result := IsPlaced ( unit ) ;
75294: LD_ADDR_VAR 0 4
75298: PUSH
75299: LD_VAR 0 1
75303: PPUSH
75304: CALL_OW 305
75308: ST_TO_ADDR
// exit ;
75309: POP
75310: POP
75311: GO 75317
// end ; end ;
75313: GO 75192
75315: POP
75316: POP
// end ;
75317: LD_VAR 0 4
75321: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75322: LD_INT 0
75324: PPUSH
75325: PPUSH
75326: PPUSH
// if not side or side > 8 then
75327: LD_VAR 0 1
75331: NOT
75332: PUSH
75333: LD_VAR 0 1
75337: PUSH
75338: LD_INT 8
75340: GREATER
75341: OR
75342: IFFALSE 75346
// exit ;
75344: GO 75533
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75346: LD_ADDR_VAR 0 4
75350: PUSH
75351: LD_INT 22
75353: PUSH
75354: LD_VAR 0 1
75358: PUSH
75359: EMPTY
75360: LIST
75361: LIST
75362: PUSH
75363: LD_INT 21
75365: PUSH
75366: LD_INT 3
75368: PUSH
75369: EMPTY
75370: LIST
75371: LIST
75372: PUSH
75373: EMPTY
75374: LIST
75375: LIST
75376: PPUSH
75377: CALL_OW 69
75381: ST_TO_ADDR
// if not tmp then
75382: LD_VAR 0 4
75386: NOT
75387: IFFALSE 75391
// exit ;
75389: GO 75533
// enable_addtolog := true ;
75391: LD_ADDR_OWVAR 81
75395: PUSH
75396: LD_INT 1
75398: ST_TO_ADDR
// AddToLog ( [ ) ;
75399: LD_STRING [
75401: PPUSH
75402: CALL_OW 561
// for i in tmp do
75406: LD_ADDR_VAR 0 3
75410: PUSH
75411: LD_VAR 0 4
75415: PUSH
75416: FOR_IN
75417: IFFALSE 75524
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75419: LD_STRING [
75421: PUSH
75422: LD_VAR 0 3
75426: PPUSH
75427: CALL_OW 266
75431: STR
75432: PUSH
75433: LD_STRING , 
75435: STR
75436: PUSH
75437: LD_VAR 0 3
75441: PPUSH
75442: CALL_OW 250
75446: STR
75447: PUSH
75448: LD_STRING , 
75450: STR
75451: PUSH
75452: LD_VAR 0 3
75456: PPUSH
75457: CALL_OW 251
75461: STR
75462: PUSH
75463: LD_STRING , 
75465: STR
75466: PUSH
75467: LD_VAR 0 3
75471: PPUSH
75472: CALL_OW 254
75476: STR
75477: PUSH
75478: LD_STRING , 
75480: STR
75481: PUSH
75482: LD_VAR 0 3
75486: PPUSH
75487: LD_INT 1
75489: PPUSH
75490: CALL_OW 268
75494: STR
75495: PUSH
75496: LD_STRING , 
75498: STR
75499: PUSH
75500: LD_VAR 0 3
75504: PPUSH
75505: LD_INT 2
75507: PPUSH
75508: CALL_OW 268
75512: STR
75513: PUSH
75514: LD_STRING ],
75516: STR
75517: PPUSH
75518: CALL_OW 561
// end ;
75522: GO 75416
75524: POP
75525: POP
// AddToLog ( ]; ) ;
75526: LD_STRING ];
75528: PPUSH
75529: CALL_OW 561
// end ;
75533: LD_VAR 0 2
75537: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75538: LD_INT 0
75540: PPUSH
75541: PPUSH
75542: PPUSH
75543: PPUSH
75544: PPUSH
// if not area or not rate or not max then
75545: LD_VAR 0 1
75549: NOT
75550: PUSH
75551: LD_VAR 0 2
75555: NOT
75556: OR
75557: PUSH
75558: LD_VAR 0 4
75562: NOT
75563: OR
75564: IFFALSE 75568
// exit ;
75566: GO 75757
// while 1 do
75568: LD_INT 1
75570: IFFALSE 75757
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75572: LD_ADDR_VAR 0 9
75576: PUSH
75577: LD_VAR 0 1
75581: PPUSH
75582: LD_INT 1
75584: PPUSH
75585: CALL_OW 287
75589: PUSH
75590: LD_INT 10
75592: MUL
75593: ST_TO_ADDR
// r := rate / 10 ;
75594: LD_ADDR_VAR 0 7
75598: PUSH
75599: LD_VAR 0 2
75603: PUSH
75604: LD_INT 10
75606: DIVREAL
75607: ST_TO_ADDR
// time := 1 1$00 ;
75608: LD_ADDR_VAR 0 8
75612: PUSH
75613: LD_INT 2100
75615: ST_TO_ADDR
// if amount < min then
75616: LD_VAR 0 9
75620: PUSH
75621: LD_VAR 0 3
75625: LESS
75626: IFFALSE 75644
// r := r * 2 else
75628: LD_ADDR_VAR 0 7
75632: PUSH
75633: LD_VAR 0 7
75637: PUSH
75638: LD_INT 2
75640: MUL
75641: ST_TO_ADDR
75642: GO 75670
// if amount > max then
75644: LD_VAR 0 9
75648: PUSH
75649: LD_VAR 0 4
75653: GREATER
75654: IFFALSE 75670
// r := r / 2 ;
75656: LD_ADDR_VAR 0 7
75660: PUSH
75661: LD_VAR 0 7
75665: PUSH
75666: LD_INT 2
75668: DIVREAL
75669: ST_TO_ADDR
// time := time / r ;
75670: LD_ADDR_VAR 0 8
75674: PUSH
75675: LD_VAR 0 8
75679: PUSH
75680: LD_VAR 0 7
75684: DIVREAL
75685: ST_TO_ADDR
// if time < 0 then
75686: LD_VAR 0 8
75690: PUSH
75691: LD_INT 0
75693: LESS
75694: IFFALSE 75711
// time := time * - 1 ;
75696: LD_ADDR_VAR 0 8
75700: PUSH
75701: LD_VAR 0 8
75705: PUSH
75706: LD_INT 1
75708: NEG
75709: MUL
75710: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
75711: LD_VAR 0 8
75715: PUSH
75716: LD_INT 35
75718: PPUSH
75719: LD_INT 875
75721: PPUSH
75722: CALL_OW 12
75726: PLUS
75727: PPUSH
75728: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75732: LD_INT 1
75734: PPUSH
75735: LD_INT 5
75737: PPUSH
75738: CALL_OW 12
75742: PPUSH
75743: LD_VAR 0 1
75747: PPUSH
75748: LD_INT 1
75750: PPUSH
75751: CALL_OW 55
// end ;
75755: GO 75568
// end ;
75757: LD_VAR 0 5
75761: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75762: LD_INT 0
75764: PPUSH
75765: PPUSH
75766: PPUSH
75767: PPUSH
75768: PPUSH
75769: PPUSH
75770: PPUSH
75771: PPUSH
// if not turrets or not factories then
75772: LD_VAR 0 1
75776: NOT
75777: PUSH
75778: LD_VAR 0 2
75782: NOT
75783: OR
75784: IFFALSE 75788
// exit ;
75786: GO 76095
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75788: LD_ADDR_VAR 0 10
75792: PUSH
75793: LD_INT 5
75795: PUSH
75796: LD_INT 6
75798: PUSH
75799: EMPTY
75800: LIST
75801: LIST
75802: PUSH
75803: LD_INT 2
75805: PUSH
75806: LD_INT 4
75808: PUSH
75809: EMPTY
75810: LIST
75811: LIST
75812: PUSH
75813: LD_INT 3
75815: PUSH
75816: LD_INT 5
75818: PUSH
75819: EMPTY
75820: LIST
75821: LIST
75822: PUSH
75823: EMPTY
75824: LIST
75825: LIST
75826: LIST
75827: PUSH
75828: LD_INT 24
75830: PUSH
75831: LD_INT 25
75833: PUSH
75834: EMPTY
75835: LIST
75836: LIST
75837: PUSH
75838: LD_INT 23
75840: PUSH
75841: LD_INT 27
75843: PUSH
75844: EMPTY
75845: LIST
75846: LIST
75847: PUSH
75848: EMPTY
75849: LIST
75850: LIST
75851: PUSH
75852: LD_INT 42
75854: PUSH
75855: LD_INT 43
75857: PUSH
75858: EMPTY
75859: LIST
75860: LIST
75861: PUSH
75862: LD_INT 44
75864: PUSH
75865: LD_INT 46
75867: PUSH
75868: EMPTY
75869: LIST
75870: LIST
75871: PUSH
75872: LD_INT 45
75874: PUSH
75875: LD_INT 47
75877: PUSH
75878: EMPTY
75879: LIST
75880: LIST
75881: PUSH
75882: EMPTY
75883: LIST
75884: LIST
75885: LIST
75886: PUSH
75887: EMPTY
75888: LIST
75889: LIST
75890: LIST
75891: ST_TO_ADDR
// result := [ ] ;
75892: LD_ADDR_VAR 0 3
75896: PUSH
75897: EMPTY
75898: ST_TO_ADDR
// for i in turrets do
75899: LD_ADDR_VAR 0 4
75903: PUSH
75904: LD_VAR 0 1
75908: PUSH
75909: FOR_IN
75910: IFFALSE 76093
// begin nat := GetNation ( i ) ;
75912: LD_ADDR_VAR 0 7
75916: PUSH
75917: LD_VAR 0 4
75921: PPUSH
75922: CALL_OW 248
75926: ST_TO_ADDR
// weapon := 0 ;
75927: LD_ADDR_VAR 0 8
75931: PUSH
75932: LD_INT 0
75934: ST_TO_ADDR
// if not nat then
75935: LD_VAR 0 7
75939: NOT
75940: IFFALSE 75944
// continue ;
75942: GO 75909
// for j in list [ nat ] do
75944: LD_ADDR_VAR 0 5
75948: PUSH
75949: LD_VAR 0 10
75953: PUSH
75954: LD_VAR 0 7
75958: ARRAY
75959: PUSH
75960: FOR_IN
75961: IFFALSE 76002
// if GetBWeapon ( i ) = j [ 1 ] then
75963: LD_VAR 0 4
75967: PPUSH
75968: CALL_OW 269
75972: PUSH
75973: LD_VAR 0 5
75977: PUSH
75978: LD_INT 1
75980: ARRAY
75981: EQUAL
75982: IFFALSE 76000
// begin weapon := j [ 2 ] ;
75984: LD_ADDR_VAR 0 8
75988: PUSH
75989: LD_VAR 0 5
75993: PUSH
75994: LD_INT 2
75996: ARRAY
75997: ST_TO_ADDR
// break ;
75998: GO 76002
// end ;
76000: GO 75960
76002: POP
76003: POP
// if not weapon then
76004: LD_VAR 0 8
76008: NOT
76009: IFFALSE 76013
// continue ;
76011: GO 75909
// for k in factories do
76013: LD_ADDR_VAR 0 6
76017: PUSH
76018: LD_VAR 0 2
76022: PUSH
76023: FOR_IN
76024: IFFALSE 76089
// begin weapons := AvailableWeaponList ( k ) ;
76026: LD_ADDR_VAR 0 9
76030: PUSH
76031: LD_VAR 0 6
76035: PPUSH
76036: CALL_OW 478
76040: ST_TO_ADDR
// if not weapons then
76041: LD_VAR 0 9
76045: NOT
76046: IFFALSE 76050
// continue ;
76048: GO 76023
// if weapon in weapons then
76050: LD_VAR 0 8
76054: PUSH
76055: LD_VAR 0 9
76059: IN
76060: IFFALSE 76087
// begin result := [ i , weapon ] ;
76062: LD_ADDR_VAR 0 3
76066: PUSH
76067: LD_VAR 0 4
76071: PUSH
76072: LD_VAR 0 8
76076: PUSH
76077: EMPTY
76078: LIST
76079: LIST
76080: ST_TO_ADDR
// exit ;
76081: POP
76082: POP
76083: POP
76084: POP
76085: GO 76095
// end ; end ;
76087: GO 76023
76089: POP
76090: POP
// end ;
76091: GO 75909
76093: POP
76094: POP
// end ;
76095: LD_VAR 0 3
76099: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76100: LD_INT 0
76102: PPUSH
// if not side or side > 8 then
76103: LD_VAR 0 3
76107: NOT
76108: PUSH
76109: LD_VAR 0 3
76113: PUSH
76114: LD_INT 8
76116: GREATER
76117: OR
76118: IFFALSE 76122
// exit ;
76120: GO 76181
// if not range then
76122: LD_VAR 0 4
76126: NOT
76127: IFFALSE 76138
// range := - 12 ;
76129: LD_ADDR_VAR 0 4
76133: PUSH
76134: LD_INT 12
76136: NEG
76137: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76138: LD_VAR 0 1
76142: PPUSH
76143: LD_VAR 0 2
76147: PPUSH
76148: LD_VAR 0 3
76152: PPUSH
76153: LD_VAR 0 4
76157: PPUSH
76158: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76162: LD_VAR 0 1
76166: PPUSH
76167: LD_VAR 0 2
76171: PPUSH
76172: LD_VAR 0 3
76176: PPUSH
76177: CALL_OW 331
// end ;
76181: LD_VAR 0 5
76185: RET
// export function Video ( mode ) ; begin
76186: LD_INT 0
76188: PPUSH
// ingame_video = mode ;
76189: LD_ADDR_OWVAR 52
76193: PUSH
76194: LD_VAR 0 1
76198: ST_TO_ADDR
// interface_hidden = mode ;
76199: LD_ADDR_OWVAR 54
76203: PUSH
76204: LD_VAR 0 1
76208: ST_TO_ADDR
// end ;
76209: LD_VAR 0 2
76213: RET
// export function Join ( array , element ) ; begin
76214: LD_INT 0
76216: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76217: LD_ADDR_VAR 0 3
76221: PUSH
76222: LD_VAR 0 1
76226: PPUSH
76227: LD_VAR 0 1
76231: PUSH
76232: LD_INT 1
76234: PLUS
76235: PPUSH
76236: LD_VAR 0 2
76240: PPUSH
76241: CALL_OW 1
76245: ST_TO_ADDR
// end ;
76246: LD_VAR 0 3
76250: RET
// export function JoinUnion ( array , element ) ; begin
76251: LD_INT 0
76253: PPUSH
// result := array union element ;
76254: LD_ADDR_VAR 0 3
76258: PUSH
76259: LD_VAR 0 1
76263: PUSH
76264: LD_VAR 0 2
76268: UNION
76269: ST_TO_ADDR
// end ;
76270: LD_VAR 0 3
76274: RET
// export function GetBehemoths ( side ) ; begin
76275: LD_INT 0
76277: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76278: LD_ADDR_VAR 0 2
76282: PUSH
76283: LD_INT 22
76285: PUSH
76286: LD_VAR 0 1
76290: PUSH
76291: EMPTY
76292: LIST
76293: LIST
76294: PUSH
76295: LD_INT 31
76297: PUSH
76298: LD_INT 25
76300: PUSH
76301: EMPTY
76302: LIST
76303: LIST
76304: PUSH
76305: EMPTY
76306: LIST
76307: LIST
76308: PPUSH
76309: CALL_OW 69
76313: ST_TO_ADDR
// end ;
76314: LD_VAR 0 2
76318: RET
// export function Shuffle ( array ) ; var i , index ; begin
76319: LD_INT 0
76321: PPUSH
76322: PPUSH
76323: PPUSH
// result := [ ] ;
76324: LD_ADDR_VAR 0 2
76328: PUSH
76329: EMPTY
76330: ST_TO_ADDR
// if not array then
76331: LD_VAR 0 1
76335: NOT
76336: IFFALSE 76340
// exit ;
76338: GO 76439
// Randomize ;
76340: CALL_OW 10
// for i = array downto 1 do
76344: LD_ADDR_VAR 0 3
76348: PUSH
76349: DOUBLE
76350: LD_VAR 0 1
76354: INC
76355: ST_TO_ADDR
76356: LD_INT 1
76358: PUSH
76359: FOR_DOWNTO
76360: IFFALSE 76437
// begin index := rand ( 1 , array ) ;
76362: LD_ADDR_VAR 0 4
76366: PUSH
76367: LD_INT 1
76369: PPUSH
76370: LD_VAR 0 1
76374: PPUSH
76375: CALL_OW 12
76379: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76380: LD_ADDR_VAR 0 2
76384: PUSH
76385: LD_VAR 0 2
76389: PPUSH
76390: LD_VAR 0 2
76394: PUSH
76395: LD_INT 1
76397: PLUS
76398: PPUSH
76399: LD_VAR 0 1
76403: PUSH
76404: LD_VAR 0 4
76408: ARRAY
76409: PPUSH
76410: CALL_OW 2
76414: ST_TO_ADDR
// array := Delete ( array , index ) ;
76415: LD_ADDR_VAR 0 1
76419: PUSH
76420: LD_VAR 0 1
76424: PPUSH
76425: LD_VAR 0 4
76429: PPUSH
76430: CALL_OW 3
76434: ST_TO_ADDR
// end ;
76435: GO 76359
76437: POP
76438: POP
// end ;
76439: LD_VAR 0 2
76443: RET
// export function GetBaseMaterials ( base ) ; begin
76444: LD_INT 0
76446: PPUSH
// result := [ 0 , 0 , 0 ] ;
76447: LD_ADDR_VAR 0 2
76451: PUSH
76452: LD_INT 0
76454: PUSH
76455: LD_INT 0
76457: PUSH
76458: LD_INT 0
76460: PUSH
76461: EMPTY
76462: LIST
76463: LIST
76464: LIST
76465: ST_TO_ADDR
// if not base then
76466: LD_VAR 0 1
76470: NOT
76471: IFFALSE 76475
// exit ;
76473: GO 76524
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76475: LD_ADDR_VAR 0 2
76479: PUSH
76480: LD_VAR 0 1
76484: PPUSH
76485: LD_INT 1
76487: PPUSH
76488: CALL_OW 275
76492: PUSH
76493: LD_VAR 0 1
76497: PPUSH
76498: LD_INT 2
76500: PPUSH
76501: CALL_OW 275
76505: PUSH
76506: LD_VAR 0 1
76510: PPUSH
76511: LD_INT 3
76513: PPUSH
76514: CALL_OW 275
76518: PUSH
76519: EMPTY
76520: LIST
76521: LIST
76522: LIST
76523: ST_TO_ADDR
// end ;
76524: LD_VAR 0 2
76528: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76529: LD_INT 0
76531: PPUSH
76532: PPUSH
// result := array ;
76533: LD_ADDR_VAR 0 3
76537: PUSH
76538: LD_VAR 0 1
76542: ST_TO_ADDR
// if size >= result then
76543: LD_VAR 0 2
76547: PUSH
76548: LD_VAR 0 3
76552: GREATEREQUAL
76553: IFFALSE 76557
// exit ;
76555: GO 76607
// if size then
76557: LD_VAR 0 2
76561: IFFALSE 76607
// for i := array downto size do
76563: LD_ADDR_VAR 0 4
76567: PUSH
76568: DOUBLE
76569: LD_VAR 0 1
76573: INC
76574: ST_TO_ADDR
76575: LD_VAR 0 2
76579: PUSH
76580: FOR_DOWNTO
76581: IFFALSE 76605
// result := Delete ( result , result ) ;
76583: LD_ADDR_VAR 0 3
76587: PUSH
76588: LD_VAR 0 3
76592: PPUSH
76593: LD_VAR 0 3
76597: PPUSH
76598: CALL_OW 3
76602: ST_TO_ADDR
76603: GO 76580
76605: POP
76606: POP
// end ;
76607: LD_VAR 0 3
76611: RET
// export function ComExit ( unit ) ; var tmp ; begin
76612: LD_INT 0
76614: PPUSH
76615: PPUSH
// if not IsInUnit ( unit ) then
76616: LD_VAR 0 1
76620: PPUSH
76621: CALL_OW 310
76625: NOT
76626: IFFALSE 76630
// exit ;
76628: GO 76690
// tmp := IsInUnit ( unit ) ;
76630: LD_ADDR_VAR 0 3
76634: PUSH
76635: LD_VAR 0 1
76639: PPUSH
76640: CALL_OW 310
76644: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76645: LD_VAR 0 3
76649: PPUSH
76650: CALL_OW 247
76654: PUSH
76655: LD_INT 2
76657: EQUAL
76658: IFFALSE 76671
// ComExitVehicle ( unit ) else
76660: LD_VAR 0 1
76664: PPUSH
76665: CALL_OW 121
76669: GO 76680
// ComExitBuilding ( unit ) ;
76671: LD_VAR 0 1
76675: PPUSH
76676: CALL_OW 122
// result := tmp ;
76680: LD_ADDR_VAR 0 2
76684: PUSH
76685: LD_VAR 0 3
76689: ST_TO_ADDR
// end ;
76690: LD_VAR 0 2
76694: RET
// export function ComExitAll ( units ) ; var i ; begin
76695: LD_INT 0
76697: PPUSH
76698: PPUSH
// if not units then
76699: LD_VAR 0 1
76703: NOT
76704: IFFALSE 76708
// exit ;
76706: GO 76734
// for i in units do
76708: LD_ADDR_VAR 0 3
76712: PUSH
76713: LD_VAR 0 1
76717: PUSH
76718: FOR_IN
76719: IFFALSE 76732
// ComExit ( i ) ;
76721: LD_VAR 0 3
76725: PPUSH
76726: CALL 76612 0 1
76730: GO 76718
76732: POP
76733: POP
// end ;
76734: LD_VAR 0 2
76738: RET
// export function ResetHc ; begin
76739: LD_INT 0
76741: PPUSH
// InitHc ;
76742: CALL_OW 19
// hc_importance := 0 ;
76746: LD_ADDR_OWVAR 32
76750: PUSH
76751: LD_INT 0
76753: ST_TO_ADDR
// end ;
76754: LD_VAR 0 1
76758: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76759: LD_INT 0
76761: PPUSH
76762: PPUSH
76763: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76764: LD_ADDR_VAR 0 6
76768: PUSH
76769: LD_VAR 0 1
76773: PUSH
76774: LD_VAR 0 3
76778: PLUS
76779: PUSH
76780: LD_INT 2
76782: DIV
76783: ST_TO_ADDR
// if _x < 0 then
76784: LD_VAR 0 6
76788: PUSH
76789: LD_INT 0
76791: LESS
76792: IFFALSE 76809
// _x := _x * - 1 ;
76794: LD_ADDR_VAR 0 6
76798: PUSH
76799: LD_VAR 0 6
76803: PUSH
76804: LD_INT 1
76806: NEG
76807: MUL
76808: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76809: LD_ADDR_VAR 0 7
76813: PUSH
76814: LD_VAR 0 2
76818: PUSH
76819: LD_VAR 0 4
76823: PLUS
76824: PUSH
76825: LD_INT 2
76827: DIV
76828: ST_TO_ADDR
// if _y < 0 then
76829: LD_VAR 0 7
76833: PUSH
76834: LD_INT 0
76836: LESS
76837: IFFALSE 76854
// _y := _y * - 1 ;
76839: LD_ADDR_VAR 0 7
76843: PUSH
76844: LD_VAR 0 7
76848: PUSH
76849: LD_INT 1
76851: NEG
76852: MUL
76853: ST_TO_ADDR
// result := [ _x , _y ] ;
76854: LD_ADDR_VAR 0 5
76858: PUSH
76859: LD_VAR 0 6
76863: PUSH
76864: LD_VAR 0 7
76868: PUSH
76869: EMPTY
76870: LIST
76871: LIST
76872: ST_TO_ADDR
// end ;
76873: LD_VAR 0 5
76877: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76878: LD_INT 0
76880: PPUSH
76881: PPUSH
76882: PPUSH
76883: PPUSH
// task := GetTaskList ( unit ) ;
76884: LD_ADDR_VAR 0 7
76888: PUSH
76889: LD_VAR 0 1
76893: PPUSH
76894: CALL_OW 437
76898: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76899: LD_VAR 0 7
76903: NOT
76904: PUSH
76905: LD_VAR 0 1
76909: PPUSH
76910: LD_VAR 0 2
76914: PPUSH
76915: CALL_OW 308
76919: NOT
76920: AND
76921: IFFALSE 76925
// exit ;
76923: GO 77043
// if IsInArea ( unit , area ) then
76925: LD_VAR 0 1
76929: PPUSH
76930: LD_VAR 0 2
76934: PPUSH
76935: CALL_OW 308
76939: IFFALSE 76957
// begin ComMoveToArea ( unit , goAway ) ;
76941: LD_VAR 0 1
76945: PPUSH
76946: LD_VAR 0 3
76950: PPUSH
76951: CALL_OW 113
// exit ;
76955: GO 77043
// end ; if task [ 1 ] [ 1 ] <> M then
76957: LD_VAR 0 7
76961: PUSH
76962: LD_INT 1
76964: ARRAY
76965: PUSH
76966: LD_INT 1
76968: ARRAY
76969: PUSH
76970: LD_STRING M
76972: NONEQUAL
76973: IFFALSE 76977
// exit ;
76975: GO 77043
// x := task [ 1 ] [ 2 ] ;
76977: LD_ADDR_VAR 0 5
76981: PUSH
76982: LD_VAR 0 7
76986: PUSH
76987: LD_INT 1
76989: ARRAY
76990: PUSH
76991: LD_INT 2
76993: ARRAY
76994: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76995: LD_ADDR_VAR 0 6
76999: PUSH
77000: LD_VAR 0 7
77004: PUSH
77005: LD_INT 1
77007: ARRAY
77008: PUSH
77009: LD_INT 3
77011: ARRAY
77012: ST_TO_ADDR
// if InArea ( x , y , area ) then
77013: LD_VAR 0 5
77017: PPUSH
77018: LD_VAR 0 6
77022: PPUSH
77023: LD_VAR 0 2
77027: PPUSH
77028: CALL_OW 309
77032: IFFALSE 77043
// ComStop ( unit ) ;
77034: LD_VAR 0 1
77038: PPUSH
77039: CALL_OW 141
// end ;
77043: LD_VAR 0 4
77047: RET
// export function Abs ( value ) ; begin
77048: LD_INT 0
77050: PPUSH
// result := value ;
77051: LD_ADDR_VAR 0 2
77055: PUSH
77056: LD_VAR 0 1
77060: ST_TO_ADDR
// if value < 0 then
77061: LD_VAR 0 1
77065: PUSH
77066: LD_INT 0
77068: LESS
77069: IFFALSE 77086
// result := value * - 1 ;
77071: LD_ADDR_VAR 0 2
77075: PUSH
77076: LD_VAR 0 1
77080: PUSH
77081: LD_INT 1
77083: NEG
77084: MUL
77085: ST_TO_ADDR
// end ;
77086: LD_VAR 0 2
77090: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77091: LD_INT 0
77093: PPUSH
77094: PPUSH
77095: PPUSH
77096: PPUSH
77097: PPUSH
77098: PPUSH
77099: PPUSH
77100: PPUSH
// if not unit or not building then
77101: LD_VAR 0 1
77105: NOT
77106: PUSH
77107: LD_VAR 0 2
77111: NOT
77112: OR
77113: IFFALSE 77117
// exit ;
77115: GO 77343
// x := GetX ( building ) ;
77117: LD_ADDR_VAR 0 4
77121: PUSH
77122: LD_VAR 0 2
77126: PPUSH
77127: CALL_OW 250
77131: ST_TO_ADDR
// y := GetY ( building ) ;
77132: LD_ADDR_VAR 0 6
77136: PUSH
77137: LD_VAR 0 2
77141: PPUSH
77142: CALL_OW 251
77146: ST_TO_ADDR
// d := GetDir ( building ) ;
77147: LD_ADDR_VAR 0 8
77151: PUSH
77152: LD_VAR 0 2
77156: PPUSH
77157: CALL_OW 254
77161: ST_TO_ADDR
// r := 4 ;
77162: LD_ADDR_VAR 0 9
77166: PUSH
77167: LD_INT 4
77169: ST_TO_ADDR
// for i := 1 to 5 do
77170: LD_ADDR_VAR 0 10
77174: PUSH
77175: DOUBLE
77176: LD_INT 1
77178: DEC
77179: ST_TO_ADDR
77180: LD_INT 5
77182: PUSH
77183: FOR_TO
77184: IFFALSE 77341
// begin _x := ShiftX ( x , d , r + i ) ;
77186: LD_ADDR_VAR 0 5
77190: PUSH
77191: LD_VAR 0 4
77195: PPUSH
77196: LD_VAR 0 8
77200: PPUSH
77201: LD_VAR 0 9
77205: PUSH
77206: LD_VAR 0 10
77210: PLUS
77211: PPUSH
77212: CALL_OW 272
77216: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77217: LD_ADDR_VAR 0 7
77221: PUSH
77222: LD_VAR 0 6
77226: PPUSH
77227: LD_VAR 0 8
77231: PPUSH
77232: LD_VAR 0 9
77236: PUSH
77237: LD_VAR 0 10
77241: PLUS
77242: PPUSH
77243: CALL_OW 273
77247: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77248: LD_VAR 0 5
77252: PPUSH
77253: LD_VAR 0 7
77257: PPUSH
77258: CALL_OW 488
77262: PUSH
77263: LD_VAR 0 5
77267: PPUSH
77268: LD_VAR 0 7
77272: PPUSH
77273: CALL_OW 428
77277: PPUSH
77278: CALL_OW 247
77282: PUSH
77283: LD_INT 3
77285: PUSH
77286: LD_INT 2
77288: PUSH
77289: EMPTY
77290: LIST
77291: LIST
77292: IN
77293: NOT
77294: AND
77295: IFFALSE 77339
// begin ComMoveXY ( unit , _x , _y ) ;
77297: LD_VAR 0 1
77301: PPUSH
77302: LD_VAR 0 5
77306: PPUSH
77307: LD_VAR 0 7
77311: PPUSH
77312: CALL_OW 111
// result := [ _x , _y ] ;
77316: LD_ADDR_VAR 0 3
77320: PUSH
77321: LD_VAR 0 5
77325: PUSH
77326: LD_VAR 0 7
77330: PUSH
77331: EMPTY
77332: LIST
77333: LIST
77334: ST_TO_ADDR
// exit ;
77335: POP
77336: POP
77337: GO 77343
// end ; end ;
77339: GO 77183
77341: POP
77342: POP
// end ;
77343: LD_VAR 0 3
77347: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77348: LD_INT 0
77350: PPUSH
77351: PPUSH
77352: PPUSH
// result := 0 ;
77353: LD_ADDR_VAR 0 3
77357: PUSH
77358: LD_INT 0
77360: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77361: LD_VAR 0 1
77365: PUSH
77366: LD_INT 0
77368: LESS
77369: PUSH
77370: LD_VAR 0 1
77374: PUSH
77375: LD_INT 8
77377: GREATER
77378: OR
77379: PUSH
77380: LD_VAR 0 2
77384: PUSH
77385: LD_INT 0
77387: LESS
77388: OR
77389: PUSH
77390: LD_VAR 0 2
77394: PUSH
77395: LD_INT 8
77397: GREATER
77398: OR
77399: IFFALSE 77403
// exit ;
77401: GO 77478
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77403: LD_ADDR_VAR 0 4
77407: PUSH
77408: LD_INT 22
77410: PUSH
77411: LD_VAR 0 2
77415: PUSH
77416: EMPTY
77417: LIST
77418: LIST
77419: PPUSH
77420: CALL_OW 69
77424: PUSH
77425: FOR_IN
77426: IFFALSE 77476
// begin un := UnitShoot ( i ) ;
77428: LD_ADDR_VAR 0 5
77432: PUSH
77433: LD_VAR 0 4
77437: PPUSH
77438: CALL_OW 504
77442: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77443: LD_VAR 0 5
77447: PPUSH
77448: CALL_OW 255
77452: PUSH
77453: LD_VAR 0 1
77457: EQUAL
77458: IFFALSE 77474
// begin result := un ;
77460: LD_ADDR_VAR 0 3
77464: PUSH
77465: LD_VAR 0 5
77469: ST_TO_ADDR
// exit ;
77470: POP
77471: POP
77472: GO 77478
// end ; end ;
77474: GO 77425
77476: POP
77477: POP
// end ;
77478: LD_VAR 0 3
77482: RET
// export function GetCargoBay ( units ) ; begin
77483: LD_INT 0
77485: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77486: LD_ADDR_VAR 0 2
77490: PUSH
77491: LD_VAR 0 1
77495: PPUSH
77496: LD_INT 2
77498: PUSH
77499: LD_INT 34
77501: PUSH
77502: LD_INT 12
77504: PUSH
77505: EMPTY
77506: LIST
77507: LIST
77508: PUSH
77509: LD_INT 34
77511: PUSH
77512: LD_INT 51
77514: PUSH
77515: EMPTY
77516: LIST
77517: LIST
77518: PUSH
77519: LD_INT 34
77521: PUSH
77522: LD_INT 32
77524: PUSH
77525: EMPTY
77526: LIST
77527: LIST
77528: PUSH
77529: LD_INT 34
77531: PUSH
77532: LD_INT 89
77534: PUSH
77535: EMPTY
77536: LIST
77537: LIST
77538: PUSH
77539: EMPTY
77540: LIST
77541: LIST
77542: LIST
77543: LIST
77544: LIST
77545: PPUSH
77546: CALL_OW 72
77550: ST_TO_ADDR
// end ;
77551: LD_VAR 0 2
77555: RET
// export function Negate ( value ) ; begin
77556: LD_INT 0
77558: PPUSH
// result := not value ;
77559: LD_ADDR_VAR 0 2
77563: PUSH
77564: LD_VAR 0 1
77568: NOT
77569: ST_TO_ADDR
// end ;
77570: LD_VAR 0 2
77574: RET
// export function Inc ( value ) ; begin
77575: LD_INT 0
77577: PPUSH
// result := value + 1 ;
77578: LD_ADDR_VAR 0 2
77582: PUSH
77583: LD_VAR 0 1
77587: PUSH
77588: LD_INT 1
77590: PLUS
77591: ST_TO_ADDR
// end ;
77592: LD_VAR 0 2
77596: RET
// export function Dec ( value ) ; begin
77597: LD_INT 0
77599: PPUSH
// result := value - 1 ;
77600: LD_ADDR_VAR 0 2
77604: PUSH
77605: LD_VAR 0 1
77609: PUSH
77610: LD_INT 1
77612: MINUS
77613: ST_TO_ADDR
// end ;
77614: LD_VAR 0 2
77618: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77619: LD_INT 0
77621: PPUSH
77622: PPUSH
77623: PPUSH
77624: PPUSH
77625: PPUSH
77626: PPUSH
77627: PPUSH
77628: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77629: LD_VAR 0 1
77633: PPUSH
77634: LD_VAR 0 2
77638: PPUSH
77639: CALL_OW 488
77643: NOT
77644: PUSH
77645: LD_VAR 0 3
77649: PPUSH
77650: LD_VAR 0 4
77654: PPUSH
77655: CALL_OW 488
77659: NOT
77660: OR
77661: IFFALSE 77674
// begin result := - 1 ;
77663: LD_ADDR_VAR 0 5
77667: PUSH
77668: LD_INT 1
77670: NEG
77671: ST_TO_ADDR
// exit ;
77672: GO 77909
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
77674: LD_ADDR_VAR 0 12
77678: PUSH
77679: LD_VAR 0 1
77683: PPUSH
77684: LD_VAR 0 2
77688: PPUSH
77689: LD_VAR 0 3
77693: PPUSH
77694: LD_VAR 0 4
77698: PPUSH
77699: CALL 76759 0 4
77703: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
77704: LD_ADDR_VAR 0 11
77708: PUSH
77709: LD_VAR 0 1
77713: PPUSH
77714: LD_VAR 0 2
77718: PPUSH
77719: LD_VAR 0 12
77723: PUSH
77724: LD_INT 1
77726: ARRAY
77727: PPUSH
77728: LD_VAR 0 12
77732: PUSH
77733: LD_INT 2
77735: ARRAY
77736: PPUSH
77737: CALL_OW 298
77741: ST_TO_ADDR
// distance := 9999 ;
77742: LD_ADDR_VAR 0 10
77746: PUSH
77747: LD_INT 9999
77749: ST_TO_ADDR
// for i := 0 to 5 do
77750: LD_ADDR_VAR 0 6
77754: PUSH
77755: DOUBLE
77756: LD_INT 0
77758: DEC
77759: ST_TO_ADDR
77760: LD_INT 5
77762: PUSH
77763: FOR_TO
77764: IFFALSE 77907
// begin _x := ShiftX ( x1 , i , centerDist ) ;
77766: LD_ADDR_VAR 0 7
77770: PUSH
77771: LD_VAR 0 1
77775: PPUSH
77776: LD_VAR 0 6
77780: PPUSH
77781: LD_VAR 0 11
77785: PPUSH
77786: CALL_OW 272
77790: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
77791: LD_ADDR_VAR 0 8
77795: PUSH
77796: LD_VAR 0 2
77800: PPUSH
77801: LD_VAR 0 6
77805: PPUSH
77806: LD_VAR 0 11
77810: PPUSH
77811: CALL_OW 273
77815: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77816: LD_VAR 0 7
77820: PPUSH
77821: LD_VAR 0 8
77825: PPUSH
77826: CALL_OW 488
77830: NOT
77831: IFFALSE 77835
// continue ;
77833: GO 77763
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
77835: LD_ADDR_VAR 0 9
77839: PUSH
77840: LD_VAR 0 12
77844: PUSH
77845: LD_INT 1
77847: ARRAY
77848: PPUSH
77849: LD_VAR 0 12
77853: PUSH
77854: LD_INT 2
77856: ARRAY
77857: PPUSH
77858: LD_VAR 0 7
77862: PPUSH
77863: LD_VAR 0 8
77867: PPUSH
77868: CALL_OW 298
77872: ST_TO_ADDR
// if tmp < distance then
77873: LD_VAR 0 9
77877: PUSH
77878: LD_VAR 0 10
77882: LESS
77883: IFFALSE 77905
// begin result := i ;
77885: LD_ADDR_VAR 0 5
77889: PUSH
77890: LD_VAR 0 6
77894: ST_TO_ADDR
// distance := tmp ;
77895: LD_ADDR_VAR 0 10
77899: PUSH
77900: LD_VAR 0 9
77904: ST_TO_ADDR
// end ; end ;
77905: GO 77763
77907: POP
77908: POP
// end ;
77909: LD_VAR 0 5
77913: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77914: LD_INT 0
77916: PPUSH
77917: PPUSH
// if not driver or not IsInUnit ( driver ) then
77918: LD_VAR 0 1
77922: NOT
77923: PUSH
77924: LD_VAR 0 1
77928: PPUSH
77929: CALL_OW 310
77933: NOT
77934: OR
77935: IFFALSE 77939
// exit ;
77937: GO 78029
// vehicle := IsInUnit ( driver ) ;
77939: LD_ADDR_VAR 0 3
77943: PUSH
77944: LD_VAR 0 1
77948: PPUSH
77949: CALL_OW 310
77953: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77954: LD_VAR 0 1
77958: PPUSH
77959: LD_STRING \
77961: PUSH
77962: LD_INT 0
77964: PUSH
77965: LD_INT 0
77967: PUSH
77968: LD_INT 0
77970: PUSH
77971: LD_INT 0
77973: PUSH
77974: LD_INT 0
77976: PUSH
77977: LD_INT 0
77979: PUSH
77980: EMPTY
77981: LIST
77982: LIST
77983: LIST
77984: LIST
77985: LIST
77986: LIST
77987: LIST
77988: PUSH
77989: LD_STRING E
77991: PUSH
77992: LD_INT 0
77994: PUSH
77995: LD_INT 0
77997: PUSH
77998: LD_VAR 0 3
78002: PUSH
78003: LD_INT 0
78005: PUSH
78006: LD_INT 0
78008: PUSH
78009: LD_INT 0
78011: PUSH
78012: EMPTY
78013: LIST
78014: LIST
78015: LIST
78016: LIST
78017: LIST
78018: LIST
78019: LIST
78020: PUSH
78021: EMPTY
78022: LIST
78023: LIST
78024: PPUSH
78025: CALL_OW 446
// end ;
78029: LD_VAR 0 2
78033: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78034: LD_INT 0
78036: PPUSH
78037: PPUSH
// if not driver or not IsInUnit ( driver ) then
78038: LD_VAR 0 1
78042: NOT
78043: PUSH
78044: LD_VAR 0 1
78048: PPUSH
78049: CALL_OW 310
78053: NOT
78054: OR
78055: IFFALSE 78059
// exit ;
78057: GO 78149
// vehicle := IsInUnit ( driver ) ;
78059: LD_ADDR_VAR 0 3
78063: PUSH
78064: LD_VAR 0 1
78068: PPUSH
78069: CALL_OW 310
78073: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78074: LD_VAR 0 1
78078: PPUSH
78079: LD_STRING \
78081: PUSH
78082: LD_INT 0
78084: PUSH
78085: LD_INT 0
78087: PUSH
78088: LD_INT 0
78090: PUSH
78091: LD_INT 0
78093: PUSH
78094: LD_INT 0
78096: PUSH
78097: LD_INT 0
78099: PUSH
78100: EMPTY
78101: LIST
78102: LIST
78103: LIST
78104: LIST
78105: LIST
78106: LIST
78107: LIST
78108: PUSH
78109: LD_STRING E
78111: PUSH
78112: LD_INT 0
78114: PUSH
78115: LD_INT 0
78117: PUSH
78118: LD_VAR 0 3
78122: PUSH
78123: LD_INT 0
78125: PUSH
78126: LD_INT 0
78128: PUSH
78129: LD_INT 0
78131: PUSH
78132: EMPTY
78133: LIST
78134: LIST
78135: LIST
78136: LIST
78137: LIST
78138: LIST
78139: LIST
78140: PUSH
78141: EMPTY
78142: LIST
78143: LIST
78144: PPUSH
78145: CALL_OW 447
// end ;
78149: LD_VAR 0 2
78153: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78154: LD_INT 0
78156: PPUSH
78157: PPUSH
78158: PPUSH
// tmp := [ ] ;
78159: LD_ADDR_VAR 0 5
78163: PUSH
78164: EMPTY
78165: ST_TO_ADDR
// for i in units do
78166: LD_ADDR_VAR 0 4
78170: PUSH
78171: LD_VAR 0 1
78175: PUSH
78176: FOR_IN
78177: IFFALSE 78215
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78179: LD_ADDR_VAR 0 5
78183: PUSH
78184: LD_VAR 0 5
78188: PPUSH
78189: LD_VAR 0 5
78193: PUSH
78194: LD_INT 1
78196: PLUS
78197: PPUSH
78198: LD_VAR 0 4
78202: PPUSH
78203: CALL_OW 256
78207: PPUSH
78208: CALL_OW 2
78212: ST_TO_ADDR
78213: GO 78176
78215: POP
78216: POP
// if not tmp then
78217: LD_VAR 0 5
78221: NOT
78222: IFFALSE 78226
// exit ;
78224: GO 78274
// if asc then
78226: LD_VAR 0 2
78230: IFFALSE 78254
// result := SortListByListAsc ( units , tmp ) else
78232: LD_ADDR_VAR 0 3
78236: PUSH
78237: LD_VAR 0 1
78241: PPUSH
78242: LD_VAR 0 5
78246: PPUSH
78247: CALL_OW 76
78251: ST_TO_ADDR
78252: GO 78274
// result := SortListByListDesc ( units , tmp ) ;
78254: LD_ADDR_VAR 0 3
78258: PUSH
78259: LD_VAR 0 1
78263: PPUSH
78264: LD_VAR 0 5
78268: PPUSH
78269: CALL_OW 77
78273: ST_TO_ADDR
// end ;
78274: LD_VAR 0 3
78278: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78279: LD_INT 0
78281: PPUSH
78282: PPUSH
// task := GetTaskList ( mech ) ;
78283: LD_ADDR_VAR 0 4
78287: PUSH
78288: LD_VAR 0 1
78292: PPUSH
78293: CALL_OW 437
78297: ST_TO_ADDR
// if not task then
78298: LD_VAR 0 4
78302: NOT
78303: IFFALSE 78307
// exit ;
78305: GO 78349
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78307: LD_ADDR_VAR 0 3
78311: PUSH
78312: LD_VAR 0 4
78316: PUSH
78317: LD_INT 1
78319: ARRAY
78320: PUSH
78321: LD_INT 1
78323: ARRAY
78324: PUSH
78325: LD_STRING r
78327: EQUAL
78328: PUSH
78329: LD_VAR 0 4
78333: PUSH
78334: LD_INT 1
78336: ARRAY
78337: PUSH
78338: LD_INT 4
78340: ARRAY
78341: PUSH
78342: LD_VAR 0 2
78346: EQUAL
78347: AND
78348: ST_TO_ADDR
// end ;
78349: LD_VAR 0 3
78353: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78354: LD_INT 0
78356: PPUSH
// SetDir ( unit , d ) ;
78357: LD_VAR 0 1
78361: PPUSH
78362: LD_VAR 0 4
78366: PPUSH
78367: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
78371: LD_VAR 0 1
78375: PPUSH
78376: LD_VAR 0 2
78380: PPUSH
78381: LD_VAR 0 3
78385: PPUSH
78386: LD_VAR 0 5
78390: PPUSH
78391: CALL_OW 48
// end ;
78395: LD_VAR 0 6
78399: RET
// export function ToNaturalNumber ( number ) ; begin
78400: LD_INT 0
78402: PPUSH
// result := number div 1 ;
78403: LD_ADDR_VAR 0 2
78407: PUSH
78408: LD_VAR 0 1
78412: PUSH
78413: LD_INT 1
78415: DIV
78416: ST_TO_ADDR
// if number < 0 then
78417: LD_VAR 0 1
78421: PUSH
78422: LD_INT 0
78424: LESS
78425: IFFALSE 78435
// result := 0 ;
78427: LD_ADDR_VAR 0 2
78431: PUSH
78432: LD_INT 0
78434: ST_TO_ADDR
// end ;
78435: LD_VAR 0 2
78439: RET
// export function SortByClass ( units , class ) ; var un ; begin
78440: LD_INT 0
78442: PPUSH
78443: PPUSH
// if not units or not class then
78444: LD_VAR 0 1
78448: NOT
78449: PUSH
78450: LD_VAR 0 2
78454: NOT
78455: OR
78456: IFFALSE 78460
// exit ;
78458: GO 78555
// result := [ ] ;
78460: LD_ADDR_VAR 0 3
78464: PUSH
78465: EMPTY
78466: ST_TO_ADDR
// for un in units do
78467: LD_ADDR_VAR 0 4
78471: PUSH
78472: LD_VAR 0 1
78476: PUSH
78477: FOR_IN
78478: IFFALSE 78553
// if GetClass ( un ) = class then
78480: LD_VAR 0 4
78484: PPUSH
78485: CALL_OW 257
78489: PUSH
78490: LD_VAR 0 2
78494: EQUAL
78495: IFFALSE 78522
// result := Insert ( result , 1 , un ) else
78497: LD_ADDR_VAR 0 3
78501: PUSH
78502: LD_VAR 0 3
78506: PPUSH
78507: LD_INT 1
78509: PPUSH
78510: LD_VAR 0 4
78514: PPUSH
78515: CALL_OW 2
78519: ST_TO_ADDR
78520: GO 78551
// result := Replace ( result , result + 1 , un ) ;
78522: LD_ADDR_VAR 0 3
78526: PUSH
78527: LD_VAR 0 3
78531: PPUSH
78532: LD_VAR 0 3
78536: PUSH
78537: LD_INT 1
78539: PLUS
78540: PPUSH
78541: LD_VAR 0 4
78545: PPUSH
78546: CALL_OW 1
78550: ST_TO_ADDR
78551: GO 78477
78553: POP
78554: POP
// end ;
78555: LD_VAR 0 3
78559: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78560: LD_INT 0
78562: PPUSH
78563: PPUSH
78564: PPUSH
78565: PPUSH
78566: PPUSH
78567: PPUSH
78568: PPUSH
// result := [ ] ;
78569: LD_ADDR_VAR 0 4
78573: PUSH
78574: EMPTY
78575: ST_TO_ADDR
// if x - r < 0 then
78576: LD_VAR 0 1
78580: PUSH
78581: LD_VAR 0 3
78585: MINUS
78586: PUSH
78587: LD_INT 0
78589: LESS
78590: IFFALSE 78602
// min_x := 0 else
78592: LD_ADDR_VAR 0 8
78596: PUSH
78597: LD_INT 0
78599: ST_TO_ADDR
78600: GO 78618
// min_x := x - r ;
78602: LD_ADDR_VAR 0 8
78606: PUSH
78607: LD_VAR 0 1
78611: PUSH
78612: LD_VAR 0 3
78616: MINUS
78617: ST_TO_ADDR
// if y - r < 0 then
78618: LD_VAR 0 2
78622: PUSH
78623: LD_VAR 0 3
78627: MINUS
78628: PUSH
78629: LD_INT 0
78631: LESS
78632: IFFALSE 78644
// min_y := 0 else
78634: LD_ADDR_VAR 0 7
78638: PUSH
78639: LD_INT 0
78641: ST_TO_ADDR
78642: GO 78660
// min_y := y - r ;
78644: LD_ADDR_VAR 0 7
78648: PUSH
78649: LD_VAR 0 2
78653: PUSH
78654: LD_VAR 0 3
78658: MINUS
78659: ST_TO_ADDR
// max_x := x + r ;
78660: LD_ADDR_VAR 0 9
78664: PUSH
78665: LD_VAR 0 1
78669: PUSH
78670: LD_VAR 0 3
78674: PLUS
78675: ST_TO_ADDR
// max_y := y + r ;
78676: LD_ADDR_VAR 0 10
78680: PUSH
78681: LD_VAR 0 2
78685: PUSH
78686: LD_VAR 0 3
78690: PLUS
78691: ST_TO_ADDR
// for _x = min_x to max_x do
78692: LD_ADDR_VAR 0 5
78696: PUSH
78697: DOUBLE
78698: LD_VAR 0 8
78702: DEC
78703: ST_TO_ADDR
78704: LD_VAR 0 9
78708: PUSH
78709: FOR_TO
78710: IFFALSE 78811
// for _y = min_y to max_y do
78712: LD_ADDR_VAR 0 6
78716: PUSH
78717: DOUBLE
78718: LD_VAR 0 7
78722: DEC
78723: ST_TO_ADDR
78724: LD_VAR 0 10
78728: PUSH
78729: FOR_TO
78730: IFFALSE 78807
// begin if not ValidHex ( _x , _y ) then
78732: LD_VAR 0 5
78736: PPUSH
78737: LD_VAR 0 6
78741: PPUSH
78742: CALL_OW 488
78746: NOT
78747: IFFALSE 78751
// continue ;
78749: GO 78729
// if GetResourceTypeXY ( _x , _y ) then
78751: LD_VAR 0 5
78755: PPUSH
78756: LD_VAR 0 6
78760: PPUSH
78761: CALL_OW 283
78765: IFFALSE 78805
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
78767: LD_ADDR_VAR 0 4
78771: PUSH
78772: LD_VAR 0 4
78776: PPUSH
78777: LD_VAR 0 4
78781: PUSH
78782: LD_INT 1
78784: PLUS
78785: PPUSH
78786: LD_VAR 0 5
78790: PUSH
78791: LD_VAR 0 6
78795: PUSH
78796: EMPTY
78797: LIST
78798: LIST
78799: PPUSH
78800: CALL_OW 1
78804: ST_TO_ADDR
// end ;
78805: GO 78729
78807: POP
78808: POP
78809: GO 78709
78811: POP
78812: POP
// end ;
78813: LD_VAR 0 4
78817: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
78818: LD_INT 0
78820: PPUSH
78821: PPUSH
78822: PPUSH
78823: PPUSH
78824: PPUSH
78825: PPUSH
78826: PPUSH
78827: PPUSH
// if not units then
78828: LD_VAR 0 1
78832: NOT
78833: IFFALSE 78837
// exit ;
78835: GO 79361
// result := UnitFilter ( units , [ f_ok ] ) ;
78837: LD_ADDR_VAR 0 3
78841: PUSH
78842: LD_VAR 0 1
78846: PPUSH
78847: LD_INT 50
78849: PUSH
78850: EMPTY
78851: LIST
78852: PPUSH
78853: CALL_OW 72
78857: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
78858: LD_ADDR_VAR 0 8
78862: PUSH
78863: LD_VAR 0 1
78867: PUSH
78868: LD_INT 1
78870: ARRAY
78871: PPUSH
78872: CALL_OW 255
78876: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
78877: LD_ADDR_VAR 0 10
78881: PUSH
78882: LD_INT 29
78884: PUSH
78885: LD_INT 91
78887: PUSH
78888: LD_INT 49
78890: PUSH
78891: EMPTY
78892: LIST
78893: LIST
78894: LIST
78895: ST_TO_ADDR
// if not result then
78896: LD_VAR 0 3
78900: NOT
78901: IFFALSE 78905
// exit ;
78903: GO 79361
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
78905: LD_ADDR_VAR 0 5
78909: PUSH
78910: LD_INT 81
78912: PUSH
78913: LD_VAR 0 8
78917: PUSH
78918: EMPTY
78919: LIST
78920: LIST
78921: PPUSH
78922: CALL_OW 69
78926: ST_TO_ADDR
// for i in result do
78927: LD_ADDR_VAR 0 4
78931: PUSH
78932: LD_VAR 0 3
78936: PUSH
78937: FOR_IN
78938: IFFALSE 79359
// begin tag := GetTag ( i ) + 1 ;
78940: LD_ADDR_VAR 0 9
78944: PUSH
78945: LD_VAR 0 4
78949: PPUSH
78950: CALL_OW 110
78954: PUSH
78955: LD_INT 1
78957: PLUS
78958: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
78959: LD_ADDR_VAR 0 7
78963: PUSH
78964: LD_VAR 0 4
78968: PPUSH
78969: CALL_OW 250
78973: PPUSH
78974: LD_VAR 0 4
78978: PPUSH
78979: CALL_OW 251
78983: PPUSH
78984: LD_INT 6
78986: PPUSH
78987: CALL 78560 0 3
78991: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
78992: LD_VAR 0 4
78996: PPUSH
78997: CALL_OW 247
79001: PUSH
79002: LD_INT 2
79004: EQUAL
79005: PUSH
79006: LD_VAR 0 7
79010: AND
79011: PUSH
79012: LD_VAR 0 4
79016: PPUSH
79017: CALL_OW 264
79021: PUSH
79022: LD_VAR 0 10
79026: IN
79027: NOT
79028: AND
79029: IFFALSE 79068
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79031: LD_VAR 0 4
79035: PPUSH
79036: LD_VAR 0 7
79040: PUSH
79041: LD_INT 1
79043: ARRAY
79044: PUSH
79045: LD_INT 1
79047: ARRAY
79048: PPUSH
79049: LD_VAR 0 7
79053: PUSH
79054: LD_INT 1
79056: ARRAY
79057: PUSH
79058: LD_INT 2
79060: ARRAY
79061: PPUSH
79062: CALL_OW 116
79066: GO 79357
// if path > tag then
79068: LD_VAR 0 2
79072: PUSH
79073: LD_VAR 0 9
79077: GREATER
79078: IFFALSE 79286
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79080: LD_ADDR_VAR 0 6
79084: PUSH
79085: LD_VAR 0 5
79089: PPUSH
79090: LD_INT 91
79092: PUSH
79093: LD_VAR 0 4
79097: PUSH
79098: LD_INT 8
79100: PUSH
79101: EMPTY
79102: LIST
79103: LIST
79104: LIST
79105: PPUSH
79106: CALL_OW 72
79110: ST_TO_ADDR
// if nearEnemy then
79111: LD_VAR 0 6
79115: IFFALSE 79184
// begin if GetWeapon ( i ) = ru_time_lapser then
79117: LD_VAR 0 4
79121: PPUSH
79122: CALL_OW 264
79126: PUSH
79127: LD_INT 49
79129: EQUAL
79130: IFFALSE 79158
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79132: LD_VAR 0 4
79136: PPUSH
79137: LD_VAR 0 6
79141: PPUSH
79142: LD_VAR 0 4
79146: PPUSH
79147: CALL_OW 74
79151: PPUSH
79152: CALL_OW 112
79156: GO 79182
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79158: LD_VAR 0 4
79162: PPUSH
79163: LD_VAR 0 6
79167: PPUSH
79168: LD_VAR 0 4
79172: PPUSH
79173: CALL_OW 74
79177: PPUSH
79178: CALL_OW 115
// end else
79182: GO 79284
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79184: LD_VAR 0 4
79188: PPUSH
79189: LD_VAR 0 2
79193: PUSH
79194: LD_VAR 0 9
79198: ARRAY
79199: PUSH
79200: LD_INT 1
79202: ARRAY
79203: PPUSH
79204: LD_VAR 0 2
79208: PUSH
79209: LD_VAR 0 9
79213: ARRAY
79214: PUSH
79215: LD_INT 2
79217: ARRAY
79218: PPUSH
79219: CALL_OW 297
79223: PUSH
79224: LD_INT 6
79226: GREATER
79227: IFFALSE 79270
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79229: LD_VAR 0 4
79233: PPUSH
79234: LD_VAR 0 2
79238: PUSH
79239: LD_VAR 0 9
79243: ARRAY
79244: PUSH
79245: LD_INT 1
79247: ARRAY
79248: PPUSH
79249: LD_VAR 0 2
79253: PUSH
79254: LD_VAR 0 9
79258: ARRAY
79259: PUSH
79260: LD_INT 2
79262: ARRAY
79263: PPUSH
79264: CALL_OW 114
79268: GO 79284
// SetTag ( i , tag ) ;
79270: LD_VAR 0 4
79274: PPUSH
79275: LD_VAR 0 9
79279: PPUSH
79280: CALL_OW 109
// end else
79284: GO 79357
// if enemy then
79286: LD_VAR 0 5
79290: IFFALSE 79357
// begin if GetWeapon ( i ) = ru_time_lapser then
79292: LD_VAR 0 4
79296: PPUSH
79297: CALL_OW 264
79301: PUSH
79302: LD_INT 49
79304: EQUAL
79305: IFFALSE 79333
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79307: LD_VAR 0 4
79311: PPUSH
79312: LD_VAR 0 5
79316: PPUSH
79317: LD_VAR 0 4
79321: PPUSH
79322: CALL_OW 74
79326: PPUSH
79327: CALL_OW 112
79331: GO 79357
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79333: LD_VAR 0 4
79337: PPUSH
79338: LD_VAR 0 5
79342: PPUSH
79343: LD_VAR 0 4
79347: PPUSH
79348: CALL_OW 74
79352: PPUSH
79353: CALL_OW 115
// end ; end ;
79357: GO 78937
79359: POP
79360: POP
// end ;
79361: LD_VAR 0 3
79365: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79366: LD_INT 0
79368: PPUSH
79369: PPUSH
79370: PPUSH
// if not unit or IsInUnit ( unit ) then
79371: LD_VAR 0 1
79375: NOT
79376: PUSH
79377: LD_VAR 0 1
79381: PPUSH
79382: CALL_OW 310
79386: OR
79387: IFFALSE 79391
// exit ;
79389: GO 79482
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79391: LD_ADDR_VAR 0 4
79395: PUSH
79396: LD_VAR 0 1
79400: PPUSH
79401: CALL_OW 250
79405: PPUSH
79406: LD_VAR 0 2
79410: PPUSH
79411: LD_INT 1
79413: PPUSH
79414: CALL_OW 272
79418: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79419: LD_ADDR_VAR 0 5
79423: PUSH
79424: LD_VAR 0 1
79428: PPUSH
79429: CALL_OW 251
79433: PPUSH
79434: LD_VAR 0 2
79438: PPUSH
79439: LD_INT 1
79441: PPUSH
79442: CALL_OW 273
79446: ST_TO_ADDR
// if ValidHex ( x , y ) then
79447: LD_VAR 0 4
79451: PPUSH
79452: LD_VAR 0 5
79456: PPUSH
79457: CALL_OW 488
79461: IFFALSE 79482
// ComTurnXY ( unit , x , y ) ;
79463: LD_VAR 0 1
79467: PPUSH
79468: LD_VAR 0 4
79472: PPUSH
79473: LD_VAR 0 5
79477: PPUSH
79478: CALL_OW 118
// end ;
79482: LD_VAR 0 3
79486: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79487: LD_INT 0
79489: PPUSH
79490: PPUSH
// result := false ;
79491: LD_ADDR_VAR 0 3
79495: PUSH
79496: LD_INT 0
79498: ST_TO_ADDR
// if not units then
79499: LD_VAR 0 2
79503: NOT
79504: IFFALSE 79508
// exit ;
79506: GO 79553
// for i in units do
79508: LD_ADDR_VAR 0 4
79512: PUSH
79513: LD_VAR 0 2
79517: PUSH
79518: FOR_IN
79519: IFFALSE 79551
// if See ( side , i ) then
79521: LD_VAR 0 1
79525: PPUSH
79526: LD_VAR 0 4
79530: PPUSH
79531: CALL_OW 292
79535: IFFALSE 79549
// begin result := true ;
79537: LD_ADDR_VAR 0 3
79541: PUSH
79542: LD_INT 1
79544: ST_TO_ADDR
// exit ;
79545: POP
79546: POP
79547: GO 79553
// end ;
79549: GO 79518
79551: POP
79552: POP
// end ;
79553: LD_VAR 0 3
79557: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79558: LD_INT 0
79560: PPUSH
79561: PPUSH
79562: PPUSH
79563: PPUSH
// if not unit or not points then
79564: LD_VAR 0 1
79568: NOT
79569: PUSH
79570: LD_VAR 0 2
79574: NOT
79575: OR
79576: IFFALSE 79580
// exit ;
79578: GO 79670
// dist := 99999 ;
79580: LD_ADDR_VAR 0 5
79584: PUSH
79585: LD_INT 99999
79587: ST_TO_ADDR
// for i in points do
79588: LD_ADDR_VAR 0 4
79592: PUSH
79593: LD_VAR 0 2
79597: PUSH
79598: FOR_IN
79599: IFFALSE 79668
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79601: LD_ADDR_VAR 0 6
79605: PUSH
79606: LD_VAR 0 1
79610: PPUSH
79611: LD_VAR 0 4
79615: PUSH
79616: LD_INT 1
79618: ARRAY
79619: PPUSH
79620: LD_VAR 0 4
79624: PUSH
79625: LD_INT 2
79627: ARRAY
79628: PPUSH
79629: CALL_OW 297
79633: ST_TO_ADDR
// if tmpDist < dist then
79634: LD_VAR 0 6
79638: PUSH
79639: LD_VAR 0 5
79643: LESS
79644: IFFALSE 79666
// begin result := i ;
79646: LD_ADDR_VAR 0 3
79650: PUSH
79651: LD_VAR 0 4
79655: ST_TO_ADDR
// dist := tmpDist ;
79656: LD_ADDR_VAR 0 5
79660: PUSH
79661: LD_VAR 0 6
79665: ST_TO_ADDR
// end ; end ;
79666: GO 79598
79668: POP
79669: POP
// end ;
79670: LD_VAR 0 3
79674: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
79675: LD_INT 0
79677: PPUSH
// uc_side := side ;
79678: LD_ADDR_OWVAR 20
79682: PUSH
79683: LD_VAR 0 1
79687: ST_TO_ADDR
// uc_nation := 3 ;
79688: LD_ADDR_OWVAR 21
79692: PUSH
79693: LD_INT 3
79695: ST_TO_ADDR
// vc_chassis := 25 ;
79696: LD_ADDR_OWVAR 37
79700: PUSH
79701: LD_INT 25
79703: ST_TO_ADDR
// vc_engine := engine_siberite ;
79704: LD_ADDR_OWVAR 39
79708: PUSH
79709: LD_INT 3
79711: ST_TO_ADDR
// vc_control := control_computer ;
79712: LD_ADDR_OWVAR 38
79716: PUSH
79717: LD_INT 3
79719: ST_TO_ADDR
// vc_weapon := 59 ;
79720: LD_ADDR_OWVAR 40
79724: PUSH
79725: LD_INT 59
79727: ST_TO_ADDR
// result := CreateVehicle ;
79728: LD_ADDR_VAR 0 5
79732: PUSH
79733: CALL_OW 45
79737: ST_TO_ADDR
// SetDir ( result , d ) ;
79738: LD_VAR 0 5
79742: PPUSH
79743: LD_VAR 0 4
79747: PPUSH
79748: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
79752: LD_VAR 0 5
79756: PPUSH
79757: LD_VAR 0 2
79761: PPUSH
79762: LD_VAR 0 3
79766: PPUSH
79767: LD_INT 0
79769: PPUSH
79770: CALL_OW 48
// end ;
79774: LD_VAR 0 5
79778: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
79779: LD_INT 0
79781: PPUSH
79782: PPUSH
79783: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
79784: LD_ADDR_VAR 0 2
79788: PUSH
79789: LD_INT 0
79791: PUSH
79792: LD_INT 0
79794: PUSH
79795: LD_INT 0
79797: PUSH
79798: LD_INT 0
79800: PUSH
79801: EMPTY
79802: LIST
79803: LIST
79804: LIST
79805: LIST
79806: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
79807: LD_VAR 0 1
79811: NOT
79812: PUSH
79813: LD_VAR 0 1
79817: PPUSH
79818: CALL_OW 264
79822: PUSH
79823: LD_INT 12
79825: PUSH
79826: LD_INT 51
79828: PUSH
79829: LD_INT 32
79831: PUSH
79832: LD_INT 89
79834: PUSH
79835: EMPTY
79836: LIST
79837: LIST
79838: LIST
79839: LIST
79840: IN
79841: NOT
79842: OR
79843: IFFALSE 79847
// exit ;
79845: GO 79945
// for i := 1 to 3 do
79847: LD_ADDR_VAR 0 3
79851: PUSH
79852: DOUBLE
79853: LD_INT 1
79855: DEC
79856: ST_TO_ADDR
79857: LD_INT 3
79859: PUSH
79860: FOR_TO
79861: IFFALSE 79943
// begin tmp := GetCargo ( cargo , i ) ;
79863: LD_ADDR_VAR 0 4
79867: PUSH
79868: LD_VAR 0 1
79872: PPUSH
79873: LD_VAR 0 3
79877: PPUSH
79878: CALL_OW 289
79882: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
79883: LD_ADDR_VAR 0 2
79887: PUSH
79888: LD_VAR 0 2
79892: PPUSH
79893: LD_VAR 0 3
79897: PPUSH
79898: LD_VAR 0 4
79902: PPUSH
79903: CALL_OW 1
79907: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
79908: LD_ADDR_VAR 0 2
79912: PUSH
79913: LD_VAR 0 2
79917: PPUSH
79918: LD_INT 4
79920: PPUSH
79921: LD_VAR 0 2
79925: PUSH
79926: LD_INT 4
79928: ARRAY
79929: PUSH
79930: LD_VAR 0 4
79934: PLUS
79935: PPUSH
79936: CALL_OW 1
79940: ST_TO_ADDR
// end ;
79941: GO 79860
79943: POP
79944: POP
// end ;
79945: LD_VAR 0 2
79949: RET
// export function Length ( array ) ; begin
79950: LD_INT 0
79952: PPUSH
// result := array + 0 ;
79953: LD_ADDR_VAR 0 2
79957: PUSH
79958: LD_VAR 0 1
79962: PUSH
79963: LD_INT 0
79965: PLUS
79966: ST_TO_ADDR
// end ;
79967: LD_VAR 0 2
79971: RET
// export function PrepareArray ( array ) ; begin
79972: LD_INT 0
79974: PPUSH
// result := array diff 0 ;
79975: LD_ADDR_VAR 0 2
79979: PUSH
79980: LD_VAR 0 1
79984: PUSH
79985: LD_INT 0
79987: DIFF
79988: ST_TO_ADDR
// if not result [ 1 ] then
79989: LD_VAR 0 2
79993: PUSH
79994: LD_INT 1
79996: ARRAY
79997: NOT
79998: IFFALSE 80018
// result := Delete ( result , 1 ) ;
80000: LD_ADDR_VAR 0 2
80004: PUSH
80005: LD_VAR 0 2
80009: PPUSH
80010: LD_INT 1
80012: PPUSH
80013: CALL_OW 3
80017: ST_TO_ADDR
// end ; end_of_file
80018: LD_VAR 0 2
80022: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
80023: LD_VAR 0 1
80027: PUSH
80028: LD_INT 200
80030: DOUBLE
80031: GREATEREQUAL
80032: IFFALSE 80040
80034: LD_INT 299
80036: DOUBLE
80037: LESSEQUAL
80038: IFTRUE 80042
80040: GO 80074
80042: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80043: LD_VAR 0 1
80047: PPUSH
80048: LD_VAR 0 2
80052: PPUSH
80053: LD_VAR 0 3
80057: PPUSH
80058: LD_VAR 0 4
80062: PPUSH
80063: LD_VAR 0 5
80067: PPUSH
80068: CALL 34925 0 5
80072: GO 80151
80074: LD_INT 300
80076: DOUBLE
80077: GREATEREQUAL
80078: IFFALSE 80086
80080: LD_INT 399
80082: DOUBLE
80083: LESSEQUAL
80084: IFTRUE 80088
80086: GO 80150
80088: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
80089: LD_VAR 0 1
80093: PPUSH
80094: LD_VAR 0 2
80098: PPUSH
80099: LD_VAR 0 3
80103: PPUSH
80104: LD_VAR 0 4
80108: PPUSH
80109: LD_VAR 0 5
80113: PPUSH
80114: LD_VAR 0 6
80118: PPUSH
80119: LD_VAR 0 7
80123: PPUSH
80124: LD_VAR 0 8
80128: PPUSH
80129: LD_VAR 0 9
80133: PPUSH
80134: LD_VAR 0 10
80138: PPUSH
80139: LD_VAR 0 11
80143: PPUSH
80144: CALL 31258 0 11
80148: GO 80151
80150: POP
// end ;
80151: PPOPN 11
80153: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
80154: LD_VAR 0 1
80158: PPUSH
80159: LD_VAR 0 2
80163: PPUSH
80164: LD_VAR 0 3
80168: PPUSH
80169: LD_VAR 0 4
80173: PPUSH
80174: LD_VAR 0 5
80178: PPUSH
80179: CALL 34661 0 5
// end ; end_of_file
80183: PPOPN 5
80185: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80186: LD_VAR 0 1
80190: PPUSH
80191: LD_VAR 0 2
80195: PPUSH
80196: LD_VAR 0 3
80200: PPUSH
80201: LD_VAR 0 4
80205: PPUSH
80206: LD_VAR 0 5
80210: PPUSH
80211: LD_VAR 0 6
80215: PPUSH
80216: CALL 18951 0 6
// end ;
80220: PPOPN 6
80222: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
80223: LD_INT 0
80225: PPUSH
// begin if not units then
80226: LD_VAR 0 1
80230: NOT
80231: IFFALSE 80235
// exit ;
80233: GO 80235
// end ;
80235: PPOPN 7
80237: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
80238: CALL 18922 0 0
// end ;
80242: PPOPN 1
80244: END
