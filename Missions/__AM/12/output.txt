// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export Powell ; export Davidov ; export Kurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; export westPathUsed , laserCounterDestroy , rocketBuilded ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 92 0 0
// SetBName ( rueastdepot , ryutin ) ;
  19: LD_INT 4
  21: PPUSH
  22: LD_STRING ryutin
  24: PPUSH
  25: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  29: LD_INT 6
  31: PPUSH
  32: LD_STRING yegorov
  34: PPUSH
  35: CALL_OW 500
// CreateNature ;
  39: CALL 14942 0 0
// PrepareDifficulty ;
  43: CALL 12315 0 0
// PrepareVehicles ;
  47: CALL 1780 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
  51: LD_INT 4
  53: PPUSH
  54: LD_INT 0
  56: PPUSH
  57: LD_INT 1
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL 1362 0 4
// PrepareAmericanHeroes ;
  67: CALL 652 0 0
// PrepareRussianCommander ;
  71: CALL 3253 0 0
// PrepareWestBase ;
  75: CALL 3776 0 0
// PrepareEastBase ;
  79: CALL 3332 0 0
// PrepareOtherRussians ;
  83: CALL 3914 0 0
// Action ;
  87: CALL 5557 0 0
// end ;
  91: END
// function Init ; begin
  92: LD_INT 0
  94: PPUSH
// RuScientists := [ ] ;
  95: LD_ADDR_EXP 27
  99: PUSH
 100: EMPTY
 101: ST_TO_ADDR
// sciCounter := 0 ;
 102: LD_ADDR_EXP 28
 106: PUSH
 107: LD_INT 0
 109: ST_TO_ADDR
// ruDestroyedBuildings := [ ] ;
 110: LD_ADDR_EXP 31
 114: PUSH
 115: EMPTY
 116: ST_TO_ADDR
// russianTanks := [ ] ;
 117: LD_ADDR_EXP 32
 121: PUSH
 122: EMPTY
 123: ST_TO_ADDR
// russianTimeLapsers := [ ] ;
 124: LD_ADDR_EXP 33
 128: PUSH
 129: EMPTY
 130: ST_TO_ADDR
// arabianMines := [ ] ;
 131: LD_ADDR_EXP 37
 135: PUSH
 136: EMPTY
 137: ST_TO_ADDR
// kurtStatus := LoadVariable ( 06_KurtStatus_1 , 0 ) ;
 138: LD_ADDR_EXP 19
 142: PUSH
 143: LD_STRING 06_KurtStatus_1
 145: PPUSH
 146: LD_INT 0
 148: PPUSH
 149: CALL_OW 30
 153: ST_TO_ADDR
// secondPass := 0 ;
 154: LD_ADDR_EXP 20
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// teleportExplored := 0 ;
 162: LD_ADDR_EXP 26
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// attackTactic := 0 ;
 170: LD_ADDR_EXP 36
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// tpCounter := 0 ;
 178: LD_ADDR_EXP 22
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// askSiberite := 0 ;
 186: LD_ADDR_EXP 25
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// warWithLegion := 0 ;
 194: LD_ADDR_EXP 23
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// fakeInfo := 0 ;
 202: LD_ADDR_EXP 24
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// cratesSpawned := 0 ;
 210: LD_ADDR_EXP 38
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// ruAI := 0 ;
 218: LD_ADDR_EXP 34
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// ruEscape := 0 ;
 226: LD_ADDR_EXP 35
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// eventVar1 := 0 ;
 234: LD_ADDR_EXP 40
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// mission_prefix := 12_ ;
 242: LD_ADDR_EXP 39
 246: PUSH
 247: LD_STRING 12_
 249: ST_TO_ADDR
// debugMode := 0 ;
 250: LD_ADDR_EXP 41
 254: PUSH
 255: LD_INT 0
 257: ST_TO_ADDR
// westPathUsed := false ;
 258: LD_ADDR_EXP 42
 262: PUSH
 263: LD_INT 0
 265: ST_TO_ADDR
// laserCounterDestroy := 0 ;
 266: LD_ADDR_EXP 43
 270: PUSH
 271: LD_INT 0
 273: ST_TO_ADDR
// rocketBuilded := false ;
 274: LD_ADDR_EXP 44
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// end ;
 282: LD_VAR 0 1
 286: RET
// every 0 0$1 trigger debugMode do var i ;
 287: LD_EXP 41
 291: IFFALSE 597
 293: GO 295
 295: DISABLE
 296: LD_INT 0
 298: PPUSH
// begin enable ;
 299: ENABLE
// FogOff ( true ) ;
 300: LD_INT 1
 302: PPUSH
 303: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 307: LD_ADDR_VAR 0 1
 311: PUSH
 312: LD_INT 22
 314: PUSH
 315: LD_INT 1
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: PUSH
 322: LD_INT 21
 324: PUSH
 325: LD_INT 1
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PPUSH
 336: CALL_OW 69
 340: PUSH
 341: FOR_IN
 342: IFFALSE 358
// SetLives ( i , 1000 ) ;
 344: LD_VAR 0 1
 348: PPUSH
 349: LD_INT 1000
 351: PPUSH
 352: CALL_OW 234
 356: GO 341
 358: POP
 359: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 360: LD_ADDR_VAR 0 1
 364: PUSH
 365: LD_INT 22
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 2
 377: PUSH
 378: LD_INT 30
 380: PUSH
 381: LD_INT 0
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PUSH
 388: LD_INT 30
 390: PUSH
 391: LD_INT 1
 393: PUSH
 394: EMPTY
 395: LIST
 396: LIST
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: LIST
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: PPUSH
 407: CALL_OW 69
 411: PUSH
 412: FOR_IN
 413: IFFALSE 437
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 415: LD_VAR 0 1
 419: PPUSH
 420: CALL_OW 274
 424: PPUSH
 425: LD_INT 1
 427: PPUSH
 428: LD_INT 9999
 430: PPUSH
 431: CALL_OW 277
 435: GO 412
 437: POP
 438: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 439: LD_ADDR_VAR 0 1
 443: PUSH
 444: LD_INT 22
 446: PUSH
 447: LD_INT 1
 449: PUSH
 450: EMPTY
 451: LIST
 452: LIST
 453: PUSH
 454: LD_INT 2
 456: PUSH
 457: LD_INT 30
 459: PUSH
 460: LD_INT 0
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: PUSH
 467: LD_INT 30
 469: PUSH
 470: LD_INT 1
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PPUSH
 486: CALL_OW 69
 490: PUSH
 491: FOR_IN
 492: IFFALSE 516
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 494: LD_VAR 0 1
 498: PPUSH
 499: CALL_OW 274
 503: PPUSH
 504: LD_INT 2
 506: PPUSH
 507: LD_INT 9999
 509: PPUSH
 510: CALL_OW 277
 514: GO 491
 516: POP
 517: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 518: LD_ADDR_VAR 0 1
 522: PUSH
 523: LD_INT 22
 525: PUSH
 526: LD_INT 1
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PUSH
 533: LD_INT 2
 535: PUSH
 536: LD_INT 30
 538: PUSH
 539: LD_INT 0
 541: PUSH
 542: EMPTY
 543: LIST
 544: LIST
 545: PUSH
 546: LD_INT 30
 548: PUSH
 549: LD_INT 1
 551: PUSH
 552: EMPTY
 553: LIST
 554: LIST
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: LIST
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: PPUSH
 565: CALL_OW 69
 569: PUSH
 570: FOR_IN
 571: IFFALSE 595
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 573: LD_VAR 0 1
 577: PPUSH
 578: CALL_OW 274
 582: PPUSH
 583: LD_INT 3
 585: PPUSH
 586: LD_INT 9999
 588: PPUSH
 589: CALL_OW 277
 593: GO 570
 595: POP
 596: POP
// end ;
 597: PPOPN 1
 599: END
// every 0 0$1 trigger FilterUnitsInArea ( westPathArea , [ f_side , 1 ] ) do
 600: LD_INT 24
 602: PPUSH
 603: LD_INT 22
 605: PUSH
 606: LD_INT 1
 608: PUSH
 609: EMPTY
 610: LIST
 611: LIST
 612: PPUSH
 613: CALL_OW 70
 617: IFFALSE 630
 619: GO 621
 621: DISABLE
// westPathUsed := true ;
 622: LD_ADDR_EXP 42
 626: PUSH
 627: LD_INT 1
 629: ST_TO_ADDR
 630: END
// every 0 0$1 trigger laserCounterDestroy >= 3 do
 631: LD_EXP 43
 635: PUSH
 636: LD_INT 3
 638: GREATEREQUAL
 639: IFFALSE 651
 641: GO 643
 643: DISABLE
// SetAchievement ( ACH_LASER ) ; end_of_file
 644: LD_STRING ACH_LASER
 646: PPUSH
 647: CALL_OW 543
 651: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 652: LD_INT 0
 654: PPUSH
 655: PPUSH
 656: PPUSH
// uc_side := 1 ;
 657: LD_ADDR_OWVAR 20
 661: PUSH
 662: LD_INT 1
 664: ST_TO_ADDR
// others11 := CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 665: LD_ADDR_EXP 14
 669: PUSH
 670: LD_STRING 11c_others
 672: PPUSH
 673: CALL_OW 31
 677: PUSH
 678: LD_STRING 11_others
 680: PPUSH
 681: CALL_OW 31
 685: UNION
 686: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true , 11_ ) ;
 687: LD_ADDR_EXP 1
 691: PUSH
 692: LD_STRING JMM
 694: PPUSH
 695: LD_INT 1
 697: PPUSH
 698: LD_STRING 11_
 700: PPUSH
 701: CALL 38828 0 3
 705: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 706: LD_EXP 1
 710: PPUSH
 711: LD_INT 1
 713: PPUSH
 714: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 718: LD_EXP 1
 722: PPUSH
 723: LD_INT 22
 725: PUSH
 726: LD_INT 1
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: PUSH
 733: LD_INT 21
 735: PUSH
 736: LD_INT 2
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: PUSH
 743: LD_INT 58
 745: PUSH
 746: EMPTY
 747: LIST
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: LIST
 753: PPUSH
 754: CALL_OW 69
 758: PUSH
 759: LD_INT 1
 761: ARRAY
 762: PPUSH
 763: CALL_OW 52
// if TestCharacters ( 11_Lisa ) then
 767: LD_STRING 11_Lisa
 769: PPUSH
 770: CALL_OW 28
 774: IFFALSE 824
// begin Lisa := PrepareUnit ( Lisa , true , 11_ ) ;
 776: LD_ADDR_EXP 2
 780: PUSH
 781: LD_STRING Lisa
 783: PPUSH
 784: LD_INT 1
 786: PPUSH
 787: LD_STRING 11_
 789: PPUSH
 790: CALL 38828 0 3
 794: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 795: LD_EXP 2
 799: PPUSH
 800: LD_INT 1
 802: PPUSH
 803: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 807: LD_EXP 2
 811: PPUSH
 812: LD_INT 4
 814: PPUSH
 815: LD_INT 0
 817: PPUSH
 818: CALL_OW 49
// end else
 822: GO 840
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 824: LD_INT 4
 826: PPUSH
 827: LD_INT 0
 829: PPUSH
 830: LD_INT 1
 832: PPUSH
 833: LD_INT 0
 835: PPUSH
 836: CALL 1362 0 4
// if TestCharacters ( 11_Donaldson ) then
 840: LD_STRING 11_Donaldson
 842: PPUSH
 843: CALL_OW 28
 847: IFFALSE 897
// begin Donaldson := PrepareUnit ( Donaldson , true , 11_ ) ;
 849: LD_ADDR_EXP 3
 853: PUSH
 854: LD_STRING Donaldson
 856: PPUSH
 857: LD_INT 1
 859: PPUSH
 860: LD_STRING 11_
 862: PPUSH
 863: CALL 38828 0 3
 867: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 868: LD_EXP 3
 872: PPUSH
 873: LD_INT 1
 875: PPUSH
 876: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 880: LD_EXP 3
 884: PPUSH
 885: LD_INT 4
 887: PPUSH
 888: LD_INT 0
 890: PPUSH
 891: CALL_OW 49
// end else
 895: GO 913
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 897: LD_INT 4
 899: PPUSH
 900: LD_INT 0
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: LD_INT 0
 908: PPUSH
 909: CALL 1362 0 4
// if TestCharacters ( 11_Cyrus ) then
 913: LD_STRING 11_Cyrus
 915: PPUSH
 916: CALL_OW 28
 920: IFFALSE 970
// begin Cyrus := PrepareUnit ( Cyrus , true , 11_ ) ;
 922: LD_ADDR_EXP 5
 926: PUSH
 927: LD_STRING Cyrus
 929: PPUSH
 930: LD_INT 1
 932: PPUSH
 933: LD_STRING 11_
 935: PPUSH
 936: CALL 38828 0 3
 940: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 941: LD_EXP 5
 945: PPUSH
 946: LD_INT 1
 948: PPUSH
 949: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 953: LD_EXP 5
 957: PPUSH
 958: LD_INT 4
 960: PPUSH
 961: LD_INT 0
 963: PPUSH
 964: CALL_OW 49
// end else
 968: GO 986
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 970: LD_INT 4
 972: PPUSH
 973: LD_INT 0
 975: PPUSH
 976: LD_INT 1
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL 1362 0 4
// if TestCharacters ( 11_Denis ) then
 986: LD_STRING 11_Denis
 988: PPUSH
 989: CALL_OW 28
 993: IFFALSE 1043
// begin Denis := PrepareUnit ( Denis , true , 11_ ) ;
 995: LD_ADDR_EXP 6
 999: PUSH
1000: LD_STRING Denis
1002: PPUSH
1003: LD_INT 1
1005: PPUSH
1006: LD_STRING 11_
1008: PPUSH
1009: CALL 38828 0 3
1013: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1014: LD_EXP 6
1018: PPUSH
1019: LD_INT 4
1021: PPUSH
1022: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1026: LD_EXP 6
1030: PPUSH
1031: LD_INT 4
1033: PPUSH
1034: LD_INT 0
1036: PPUSH
1037: CALL_OW 49
// end else
1041: GO 1059
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1043: LD_INT 4
1045: PPUSH
1046: LD_INT 0
1048: PPUSH
1049: LD_INT 1
1051: PPUSH
1052: LD_INT 0
1054: PPUSH
1055: CALL 1362 0 4
// if TestCharacters ( 11_Frank ) then
1059: LD_STRING 11_Frank
1061: PPUSH
1062: CALL_OW 28
1066: IFFALSE 1116
// begin Frank := PrepareUnit ( Frank , true , 11_ ) ;
1068: LD_ADDR_EXP 12
1072: PUSH
1073: LD_STRING Frank
1075: PPUSH
1076: LD_INT 1
1078: PPUSH
1079: LD_STRING 11_
1081: PPUSH
1082: CALL 38828 0 3
1086: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1087: LD_EXP 12
1091: PPUSH
1092: LD_INT 1
1094: PPUSH
1095: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1099: LD_EXP 12
1103: PPUSH
1104: LD_INT 4
1106: PPUSH
1107: LD_INT 0
1109: PPUSH
1110: CALL_OW 49
// end else
1114: GO 1132
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1116: LD_INT 4
1118: PPUSH
1119: LD_INT 0
1121: PPUSH
1122: LD_INT 1
1124: PPUSH
1125: LD_INT 0
1127: PPUSH
1128: CALL 1362 0 4
// if TestCharacters ( 11_Cornell ) then
1132: LD_STRING 11_Cornell
1134: PPUSH
1135: CALL_OW 28
1139: IFFALSE 1189
// begin Cornel := PrepareUnit ( Cornell , true , 11_ ) ;
1141: LD_ADDR_EXP 10
1145: PUSH
1146: LD_STRING Cornell
1148: PPUSH
1149: LD_INT 1
1151: PPUSH
1152: LD_STRING 11_
1154: PPUSH
1155: CALL 38828 0 3
1159: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1160: LD_EXP 10
1164: PPUSH
1165: LD_INT 1
1167: PPUSH
1168: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1172: LD_EXP 10
1176: PPUSH
1177: LD_INT 4
1179: PPUSH
1180: LD_INT 0
1182: PPUSH
1183: CALL_OW 49
// end else
1187: GO 1205
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1189: LD_INT 4
1191: PPUSH
1192: LD_INT 0
1194: PPUSH
1195: LD_INT 1
1197: PPUSH
1198: LD_INT 0
1200: PPUSH
1201: CALL 1362 0 4
// tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1205: LD_ADDR_VAR 0 2
1209: PUSH
1210: LD_EXP 14
1214: PPUSH
1215: LD_INT 26
1217: PUSH
1218: LD_INT 1
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: PPUSH
1225: CALL_OW 72
1229: ST_TO_ADDR
// if not tmp then
1230: LD_VAR 0 2
1234: NOT
1235: IFFALSE 1264
// begin PrepareSoldier ( sex_male , 8 ) ;
1237: LD_INT 1
1239: PPUSH
1240: LD_INT 8
1242: PPUSH
1243: CALL_OW 381
// PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1247: CALL_OW 44
1251: PPUSH
1252: LD_INT 4
1254: PPUSH
1255: LD_INT 0
1257: PPUSH
1258: CALL_OW 49
// end else
1262: GO 1338
// begin if GetClass ( tmp [ 1 ] ) <> class_soldier then
1264: LD_VAR 0 2
1268: PUSH
1269: LD_INT 1
1271: ARRAY
1272: PPUSH
1273: CALL_OW 257
1277: PUSH
1278: LD_INT 1
1280: NONEQUAL
1281: IFFALSE 1299
// SetClass ( tmp [ 1 ] , class_soldier ) ;
1283: LD_VAR 0 2
1287: PUSH
1288: LD_INT 1
1290: ARRAY
1291: PPUSH
1292: LD_INT 1
1294: PPUSH
1295: CALL_OW 336
// PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1299: LD_VAR 0 2
1303: PUSH
1304: LD_INT 1
1306: ARRAY
1307: PPUSH
1308: LD_INT 4
1310: PPUSH
1311: LD_INT 0
1313: PPUSH
1314: CALL_OW 49
// others11 := others11 diff tmp [ 1 ] ;
1318: LD_ADDR_EXP 14
1322: PUSH
1323: LD_EXP 14
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_INT 1
1335: ARRAY
1336: DIFF
1337: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ,  ) ;
1338: LD_ADDR_EXP 15
1342: PUSH
1343: LD_STRING Powell
1345: PPUSH
1346: LD_INT 0
1348: PPUSH
1349: LD_STRING 
1351: PPUSH
1352: CALL 38828 0 3
1356: ST_TO_ADDR
// end ;
1357: LD_VAR 0 1
1361: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1362: LD_INT 0
1364: PPUSH
1365: PPUSH
1366: PPUSH
1367: PPUSH
1368: PPUSH
// if mech = 1 then
1369: LD_VAR 0 4
1373: PUSH
1374: LD_INT 1
1376: EQUAL
1377: IFFALSE 1610
// begin if others11 then
1379: LD_EXP 14
1383: IFFALSE 1550
// begin for i := 1 to others11 - 1 do
1385: LD_ADDR_VAR 0 6
1389: PUSH
1390: DOUBLE
1391: LD_INT 1
1393: DEC
1394: ST_TO_ADDR
1395: LD_EXP 14
1399: PUSH
1400: LD_INT 1
1402: MINUS
1403: PUSH
1404: FOR_TO
1405: IFFALSE 1487
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1407: LD_EXP 14
1411: PUSH
1412: LD_VAR 0 6
1416: ARRAY
1417: PPUSH
1418: LD_INT 3
1420: PPUSH
1421: CALL_OW 259
1425: PUSH
1426: LD_EXP 14
1430: PUSH
1431: LD_VAR 0 6
1435: PUSH
1436: LD_INT 1
1438: PLUS
1439: ARRAY
1440: PPUSH
1441: LD_INT 3
1443: PPUSH
1444: CALL_OW 259
1448: LESS
1449: IFFALSE 1485
// begin mecha = others11 [ i + 1 ] ;
1451: LD_ADDR_VAR 0 9
1455: PUSH
1456: LD_EXP 14
1460: PUSH
1461: LD_VAR 0 6
1465: PUSH
1466: LD_INT 1
1468: PLUS
1469: ARRAY
1470: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1471: LD_VAR 0 9
1475: PPUSH
1476: LD_INT 3
1478: PPUSH
1479: CALL_OW 336
// break ;
1483: GO 1487
// end ; end ;
1485: GO 1404
1487: POP
1488: POP
// if spawnMode = 1 then
1489: LD_VAR 0 3
1493: PUSH
1494: LD_INT 1
1496: EQUAL
1497: IFFALSE 1518
// PlaceUnitArea ( mecha , area , false ) else
1499: LD_VAR 0 9
1503: PPUSH
1504: LD_VAR 0 1
1508: PPUSH
1509: LD_INT 0
1511: PPUSH
1512: CALL_OW 49
1516: GO 1532
// PlaceHumanInUnit ( mecha , veh ) ;
1518: LD_VAR 0 9
1522: PPUSH
1523: LD_VAR 0 2
1527: PPUSH
1528: CALL_OW 52
// others11 := others11 diff mecha ;
1532: LD_ADDR_EXP 14
1536: PUSH
1537: LD_EXP 14
1541: PUSH
1542: LD_VAR 0 9
1546: DIFF
1547: ST_TO_ADDR
// end else
1548: GO 1608
// begin hc_name :=  ;
1550: LD_ADDR_OWVAR 26
1554: PUSH
1555: LD_STRING 
1557: ST_TO_ADDR
// hc_gallery :=  ;
1558: LD_ADDR_OWVAR 33
1562: PUSH
1563: LD_STRING 
1565: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1566: LD_INT 0
1568: PPUSH
1569: LD_INT 7
1571: PPUSH
1572: LD_INT 9
1574: PPUSH
1575: CALL_OW 12
1579: PPUSH
1580: CALL_OW 383
// un := CreateHuman ;
1584: LD_ADDR_VAR 0 7
1588: PUSH
1589: CALL_OW 44
1593: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1594: LD_VAR 0 7
1598: PPUSH
1599: LD_VAR 0 2
1603: PPUSH
1604: CALL_OW 52
// end ; end else
1608: GO 1775
// begin if others11 then
1610: LD_EXP 14
1614: IFFALSE 1687
// begin if spawnMode = 1 then
1616: LD_VAR 0 3
1620: PUSH
1621: LD_INT 1
1623: EQUAL
1624: IFFALSE 1649
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1626: LD_EXP 14
1630: PUSH
1631: LD_INT 1
1633: ARRAY
1634: PPUSH
1635: LD_VAR 0 1
1639: PPUSH
1640: LD_INT 0
1642: PPUSH
1643: CALL_OW 49
1647: GO 1667
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1649: LD_EXP 14
1653: PUSH
1654: LD_INT 1
1656: ARRAY
1657: PPUSH
1658: LD_VAR 0 2
1662: PPUSH
1663: CALL_OW 52
// others11 := Delete ( others11 , 1 ) ;
1667: LD_ADDR_EXP 14
1671: PUSH
1672: LD_EXP 14
1676: PPUSH
1677: LD_INT 1
1679: PPUSH
1680: CALL_OW 3
1684: ST_TO_ADDR
// end else
1685: GO 1775
// begin hc_name :=  ;
1687: LD_ADDR_OWVAR 26
1691: PUSH
1692: LD_STRING 
1694: ST_TO_ADDR
// hc_gallery :=  ;
1695: LD_ADDR_OWVAR 33
1699: PUSH
1700: LD_STRING 
1702: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1703: LD_INT 0
1705: PPUSH
1706: LD_INT 1
1708: PUSH
1709: LD_INT 2
1711: PUSH
1712: LD_INT 3
1714: PUSH
1715: LD_INT 4
1717: PUSH
1718: EMPTY
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: PUSH
1724: LD_INT 1
1726: PPUSH
1727: LD_INT 4
1729: PPUSH
1730: CALL_OW 12
1734: ARRAY
1735: PPUSH
1736: LD_INT 7
1738: PPUSH
1739: LD_INT 9
1741: PPUSH
1742: CALL_OW 12
1746: PPUSH
1747: CALL_OW 380
// un := CreateHuman ;
1751: LD_ADDR_VAR 0 7
1755: PUSH
1756: CALL_OW 44
1760: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1761: LD_VAR 0 7
1765: PPUSH
1766: LD_VAR 0 2
1770: PPUSH
1771: CALL_OW 52
// end ; end ; end ;
1775: LD_VAR 0 5
1779: RET
// export function PrepareVehicles ; var veh ; begin
1780: LD_INT 0
1782: PPUSH
1783: PPUSH
// uc_side := 1 ;
1784: LD_ADDR_OWVAR 20
1788: PUSH
1789: LD_INT 1
1791: ST_TO_ADDR
// uc_nation := 1 ;
1792: LD_ADDR_OWVAR 21
1796: PUSH
1797: LD_INT 1
1799: ST_TO_ADDR
// vc_chassis := us_medium_tracked ;
1800: LD_ADDR_OWVAR 37
1804: PUSH
1805: LD_INT 3
1807: ST_TO_ADDR
// vc_engine := engine_siberite ;
1808: LD_ADDR_OWVAR 39
1812: PUSH
1813: LD_INT 3
1815: ST_TO_ADDR
// vc_control := control_computer ;
1816: LD_ADDR_OWVAR 38
1820: PUSH
1821: LD_INT 3
1823: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1824: LD_ADDR_OWVAR 40
1828: PUSH
1829: LD_INT 4
1831: ST_TO_ADDR
// veh := CreateVehicle ;
1832: LD_ADDR_VAR 0 2
1836: PUSH
1837: CALL_OW 45
1841: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1842: LD_VAR 0 2
1846: PPUSH
1847: LD_INT 4
1849: PPUSH
1850: LD_INT 0
1852: PPUSH
1853: CALL_OW 49
// vc_weapon := us_double_gun ;
1857: LD_ADDR_OWVAR 40
1861: PUSH
1862: LD_INT 5
1864: ST_TO_ADDR
// vc_control := control_manual ;
1865: LD_ADDR_OWVAR 38
1869: PUSH
1870: LD_INT 1
1872: ST_TO_ADDR
// veh := CreateVehicle ;
1873: LD_ADDR_VAR 0 2
1877: PUSH
1878: CALL_OW 45
1882: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1883: LD_VAR 0 2
1887: PPUSH
1888: LD_INT 4
1890: PPUSH
1891: LD_INT 0
1893: PPUSH
1894: CALL_OW 49
// vc_weapon := us_light_gun ;
1898: LD_ADDR_OWVAR 40
1902: PUSH
1903: LD_INT 3
1905: ST_TO_ADDR
// vc_control := control_computer ;
1906: LD_ADDR_OWVAR 38
1910: PUSH
1911: LD_INT 3
1913: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1914: LD_ADDR_OWVAR 37
1918: PUSH
1919: LD_INT 2
1921: ST_TO_ADDR
// veh := CreateVehicle ;
1922: LD_ADDR_VAR 0 2
1926: PUSH
1927: CALL_OW 45
1931: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1932: LD_VAR 0 2
1936: PPUSH
1937: LD_INT 4
1939: PPUSH
1940: LD_INT 0
1942: PPUSH
1943: CALL_OW 49
// vc_weapon := us_gatling_gun ;
1947: LD_ADDR_OWVAR 40
1951: PUSH
1952: LD_INT 4
1954: ST_TO_ADDR
// veh := CreateVehicle ;
1955: LD_ADDR_VAR 0 2
1959: PUSH
1960: CALL_OW 45
1964: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1965: LD_VAR 0 2
1969: PPUSH
1970: LD_INT 4
1972: PPUSH
1973: LD_INT 0
1975: PPUSH
1976: CALL_OW 49
// end ;
1980: LD_VAR 0 1
1984: RET
// export function PowellSupport1 ; var veh , un ; begin
1985: LD_INT 0
1987: PPUSH
1988: PPUSH
1989: PPUSH
// uc_side := 1 ;
1990: LD_ADDR_OWVAR 20
1994: PUSH
1995: LD_INT 1
1997: ST_TO_ADDR
// uc_nation := 1 ;
1998: LD_ADDR_OWVAR 21
2002: PUSH
2003: LD_INT 1
2005: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) then
2006: LD_STRING 11_Brown
2008: PPUSH
2009: CALL_OW 28
2013: IFFALSE 2063
// begin Brown := PrepareUnit ( Brown , true , 11_ ) ;
2015: LD_ADDR_EXP 7
2019: PUSH
2020: LD_STRING Brown
2022: PPUSH
2023: LD_INT 1
2025: PPUSH
2026: LD_STRING 11_
2028: PPUSH
2029: CALL 38828 0 3
2033: ST_TO_ADDR
// SetClass ( Brown , class_engineer ) ;
2034: LD_EXP 7
2038: PPUSH
2039: LD_INT 2
2041: PPUSH
2042: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
2046: LD_EXP 7
2050: PPUSH
2051: LD_INT 4
2053: PPUSH
2054: LD_INT 0
2056: PPUSH
2057: CALL_OW 49
// end else
2061: GO 2079
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2063: LD_INT 4
2065: PPUSH
2066: LD_INT 0
2068: PPUSH
2069: LD_INT 1
2071: PPUSH
2072: LD_INT 0
2074: PPUSH
2075: CALL 1362 0 4
// if TestCharacters ( 11_Gary ) then
2079: LD_STRING 11_Gary
2081: PPUSH
2082: CALL_OW 28
2086: IFFALSE 2136
// begin Gary := PrepareUnit ( Gary , true , 11_ ) ;
2088: LD_ADDR_EXP 11
2092: PUSH
2093: LD_STRING Gary
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: LD_STRING 11_
2101: PPUSH
2102: CALL 38828 0 3
2106: ST_TO_ADDR
// SetClass ( Gary , class_engineer ) ;
2107: LD_EXP 11
2111: PPUSH
2112: LD_INT 2
2114: PPUSH
2115: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2119: LD_EXP 11
2123: PPUSH
2124: LD_INT 4
2126: PPUSH
2127: LD_INT 0
2129: PPUSH
2130: CALL_OW 49
// end else
2134: GO 2152
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2136: LD_INT 4
2138: PPUSH
2139: LD_INT 0
2141: PPUSH
2142: LD_INT 1
2144: PPUSH
2145: LD_INT 0
2147: PPUSH
2148: CALL 1362 0 4
// vc_chassis := us_medium_tracked ;
2152: LD_ADDR_OWVAR 37
2156: PUSH
2157: LD_INT 3
2159: ST_TO_ADDR
// vc_engine := engine_siberite ;
2160: LD_ADDR_OWVAR 39
2164: PUSH
2165: LD_INT 3
2167: ST_TO_ADDR
// vc_control := control_manual ;
2168: LD_ADDR_OWVAR 38
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// vc_weapon := us_crane ;
2176: LD_ADDR_OWVAR 40
2180: PUSH
2181: LD_INT 13
2183: ST_TO_ADDR
// veh := CreateVehicle ;
2184: LD_ADDR_VAR 0 2
2188: PUSH
2189: CALL_OW 45
2193: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2194: LD_VAR 0 2
2198: PPUSH
2199: LD_INT 4
2201: PPUSH
2202: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2206: LD_VAR 0 2
2210: PPUSH
2211: LD_INT 4
2213: PPUSH
2214: LD_INT 0
2216: PPUSH
2217: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2221: LD_INT 4
2223: PPUSH
2224: LD_VAR 0 2
2228: PPUSH
2229: LD_INT 2
2231: PPUSH
2232: LD_INT 1
2234: PPUSH
2235: CALL 1362 0 4
// vc_weapon := us_laser ;
2239: LD_ADDR_OWVAR 40
2243: PUSH
2244: LD_INT 9
2246: ST_TO_ADDR
// veh := CreateVehicle ;
2247: LD_ADDR_VAR 0 2
2251: PUSH
2252: CALL_OW 45
2256: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2257: LD_VAR 0 2
2261: PPUSH
2262: LD_INT 4
2264: PPUSH
2265: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2269: LD_VAR 0 2
2273: PPUSH
2274: LD_INT 4
2276: PPUSH
2277: LD_INT 0
2279: PPUSH
2280: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2284: LD_INT 4
2286: PPUSH
2287: LD_VAR 0 2
2291: PPUSH
2292: LD_INT 2
2294: PPUSH
2295: LD_INT 1
2297: PPUSH
2298: CALL 1362 0 4
// vc_control := control_computer ;
2302: LD_ADDR_OWVAR 38
2306: PUSH
2307: LD_INT 3
2309: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2310: LD_ADDR_OWVAR 40
2314: PUSH
2315: LD_INT 12
2317: ST_TO_ADDR
// veh := CreateVehicle ;
2318: LD_ADDR_VAR 0 2
2322: PUSH
2323: CALL_OW 45
2327: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2328: LD_VAR 0 2
2332: PPUSH
2333: LD_INT 17
2335: PPUSH
2336: CALL_OW 109
// SetDir ( veh , 4 ) ;
2340: LD_VAR 0 2
2344: PPUSH
2345: LD_INT 4
2347: PPUSH
2348: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2352: LD_VAR 0 2
2356: PPUSH
2357: LD_INT 4
2359: PPUSH
2360: LD_INT 0
2362: PPUSH
2363: CALL_OW 49
// AddCargo ( veh , mat_siberit , 100 ) ;
2367: LD_VAR 0 2
2371: PPUSH
2372: LD_INT 3
2374: PPUSH
2375: LD_INT 100
2377: PPUSH
2378: CALL_OW 291
// veh := CreateVehicle ;
2382: LD_ADDR_VAR 0 2
2386: PUSH
2387: CALL_OW 45
2391: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2392: LD_VAR 0 2
2396: PPUSH
2397: LD_INT 17
2399: PPUSH
2400: CALL_OW 109
// SetDir ( veh , 4 ) ;
2404: LD_VAR 0 2
2408: PPUSH
2409: LD_INT 4
2411: PPUSH
2412: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2416: LD_VAR 0 2
2420: PPUSH
2421: LD_INT 4
2423: PPUSH
2424: LD_INT 0
2426: PPUSH
2427: CALL_OW 49
// AddCargo ( veh , mat_siberit , 20 ) ;
2431: LD_VAR 0 2
2435: PPUSH
2436: LD_INT 3
2438: PPUSH
2439: LD_INT 20
2441: PPUSH
2442: CALL_OW 291
// AddCargo ( veh , mat_cans , 80 ) ;
2446: LD_VAR 0 2
2450: PPUSH
2451: LD_INT 1
2453: PPUSH
2454: LD_INT 80
2456: PPUSH
2457: CALL_OW 291
// end ;
2461: LD_VAR 0 1
2465: RET
// export function PowellSupport2 ; var veh , un ; begin
2466: LD_INT 0
2468: PPUSH
2469: PPUSH
2470: PPUSH
// uc_side := 1 ;
2471: LD_ADDR_OWVAR 20
2475: PUSH
2476: LD_INT 1
2478: ST_TO_ADDR
// uc_nation := 1 ;
2479: LD_ADDR_OWVAR 21
2483: PUSH
2484: LD_INT 1
2486: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2487: LD_ADDR_OWVAR 37
2491: PUSH
2492: LD_INT 2
2494: ST_TO_ADDR
// vc_engine := engine_siberite ;
2495: LD_ADDR_OWVAR 39
2499: PUSH
2500: LD_INT 3
2502: ST_TO_ADDR
// vc_control := control_computer ;
2503: LD_ADDR_OWVAR 38
2507: PUSH
2508: LD_INT 3
2510: ST_TO_ADDR
// vc_weapon := us_light_gun ;
2511: LD_ADDR_OWVAR 40
2515: PUSH
2516: LD_INT 3
2518: ST_TO_ADDR
// veh := CreateVehicle ;
2519: LD_ADDR_VAR 0 2
2523: PUSH
2524: CALL_OW 45
2528: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2529: LD_VAR 0 2
2533: PPUSH
2534: LD_INT 4
2536: PPUSH
2537: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2541: LD_VAR 0 2
2545: PPUSH
2546: LD_INT 4
2548: PPUSH
2549: LD_INT 0
2551: PPUSH
2552: CALL_OW 49
// vc_control := control_manual ;
2556: LD_ADDR_OWVAR 38
2560: PUSH
2561: LD_INT 1
2563: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2564: LD_ADDR_OWVAR 37
2568: PUSH
2569: LD_INT 2
2571: ST_TO_ADDR
// vc_weapon := us_double_gun ;
2572: LD_ADDR_OWVAR 40
2576: PUSH
2577: LD_INT 5
2579: ST_TO_ADDR
// veh := CreateVehicle ;
2580: LD_ADDR_VAR 0 2
2584: PUSH
2585: CALL_OW 45
2589: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2590: LD_VAR 0 2
2594: PPUSH
2595: LD_INT 4
2597: PPUSH
2598: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2602: LD_VAR 0 2
2606: PPUSH
2607: LD_INT 4
2609: PPUSH
2610: LD_INT 0
2612: PPUSH
2613: CALL_OW 49
// if TestCharacters ( 11_Bobby ) then
2617: LD_STRING 11_Bobby
2619: PPUSH
2620: CALL_OW 28
2624: IFFALSE 2673
// begin Bobby := PrepareUnit ( Bobby , true , 11_ ) ;
2626: LD_ADDR_EXP 4
2630: PUSH
2631: LD_STRING Bobby
2633: PPUSH
2634: LD_INT 1
2636: PPUSH
2637: LD_STRING 11_
2639: PPUSH
2640: CALL 38828 0 3
2644: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2645: LD_EXP 4
2649: PPUSH
2650: LD_INT 3
2652: PPUSH
2653: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2657: LD_EXP 4
2661: PPUSH
2662: LD_VAR 0 2
2666: PPUSH
2667: CALL_OW 52
// end else
2671: GO 2691
// PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2673: LD_INT 0
2675: PPUSH
2676: LD_VAR 0 2
2680: PPUSH
2681: LD_INT 2
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: CALL 1362 0 4
// if TestCharacters ( 11_Houten ) then
2691: LD_STRING 11_Houten
2693: PPUSH
2694: CALL_OW 28
2698: IFFALSE 2748
// begin Houten := PrepareUnit ( Houten , true , 11_ ) ;
2700: LD_ADDR_EXP 9
2704: PUSH
2705: LD_STRING Houten
2707: PPUSH
2708: LD_INT 1
2710: PPUSH
2711: LD_STRING 11_
2713: PPUSH
2714: CALL 38828 0 3
2718: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2719: LD_EXP 9
2723: PPUSH
2724: LD_INT 1
2726: PPUSH
2727: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2731: LD_EXP 9
2735: PPUSH
2736: LD_INT 4
2738: PPUSH
2739: LD_INT 0
2741: PPUSH
2742: CALL_OW 49
// end else
2746: GO 2764
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2748: LD_INT 4
2750: PPUSH
2751: LD_INT 0
2753: PPUSH
2754: LD_INT 1
2756: PPUSH
2757: LD_INT 0
2759: PPUSH
2760: CALL 1362 0 4
// vc_control := control_computer ;
2764: LD_ADDR_OWVAR 38
2768: PUSH
2769: LD_INT 3
2771: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2772: LD_ADDR_OWVAR 40
2776: PUSH
2777: LD_INT 12
2779: ST_TO_ADDR
// veh := CreateVehicle ;
2780: LD_ADDR_VAR 0 2
2784: PUSH
2785: CALL_OW 45
2789: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2790: LD_VAR 0 2
2794: PPUSH
2795: LD_INT 4
2797: PPUSH
2798: CALL_OW 233
// SetTag ( veh , 17 ) ;
2802: LD_VAR 0 2
2806: PPUSH
2807: LD_INT 17
2809: PPUSH
2810: CALL_OW 109
// AddCargo ( veh , mat_cans , 100 ) ;
2814: LD_VAR 0 2
2818: PPUSH
2819: LD_INT 1
2821: PPUSH
2822: LD_INT 100
2824: PPUSH
2825: CALL_OW 291
// veh := CreateVehicle ;
2829: LD_ADDR_VAR 0 2
2833: PUSH
2834: CALL_OW 45
2838: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2839: LD_VAR 0 2
2843: PPUSH
2844: LD_INT 4
2846: PPUSH
2847: CALL_OW 233
// SetTag ( veh , 17 ) ;
2851: LD_VAR 0 2
2855: PPUSH
2856: LD_INT 17
2858: PPUSH
2859: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2863: LD_VAR 0 2
2867: PPUSH
2868: LD_INT 4
2870: PPUSH
2871: LD_INT 0
2873: PPUSH
2874: CALL_OW 49
// AddCargo ( veh , mat_cans , 100 ) ;
2878: LD_VAR 0 2
2882: PPUSH
2883: LD_INT 1
2885: PPUSH
2886: LD_INT 100
2888: PPUSH
2889: CALL_OW 291
// veh := CreateVehicle ;
2893: LD_ADDR_VAR 0 2
2897: PUSH
2898: CALL_OW 45
2902: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2903: LD_VAR 0 2
2907: PPUSH
2908: LD_INT 4
2910: PPUSH
2911: CALL_OW 233
// SetTag ( veh , 17 ) ;
2915: LD_VAR 0 2
2919: PPUSH
2920: LD_INT 17
2922: PPUSH
2923: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2927: LD_VAR 0 2
2931: PPUSH
2932: LD_INT 4
2934: PPUSH
2935: LD_INT 0
2937: PPUSH
2938: CALL_OW 49
// if kurtStatus then
2942: LD_EXP 19
2946: IFFALSE 2980
// begin AddCargo ( veh , mat_siberit , 60 ) ;
2948: LD_VAR 0 2
2952: PPUSH
2953: LD_INT 3
2955: PPUSH
2956: LD_INT 60
2958: PPUSH
2959: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
2963: LD_VAR 0 2
2967: PPUSH
2968: LD_INT 1
2970: PPUSH
2971: LD_INT 40
2973: PPUSH
2974: CALL_OW 291
// end else
2978: GO 2995
// AddCargo ( veh , mat_cans , 100 ) ;
2980: LD_VAR 0 2
2984: PPUSH
2985: LD_INT 1
2987: PPUSH
2988: LD_INT 100
2990: PPUSH
2991: CALL_OW 291
// veh := CreateVehicle ;
2995: LD_ADDR_VAR 0 2
2999: PUSH
3000: CALL_OW 45
3004: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3005: LD_VAR 0 2
3009: PPUSH
3010: LD_INT 4
3012: PPUSH
3013: CALL_OW 233
// SetTag ( veh , 17 ) ;
3017: LD_VAR 0 2
3021: PPUSH
3022: LD_INT 17
3024: PPUSH
3025: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
3029: LD_VAR 0 2
3033: PPUSH
3034: LD_INT 4
3036: PPUSH
3037: LD_INT 0
3039: PPUSH
3040: CALL_OW 49
// AddCargo ( veh , mat_oil , 60 ) ;
3044: LD_VAR 0 2
3048: PPUSH
3049: LD_INT 2
3051: PPUSH
3052: LD_INT 60
3054: PPUSH
3055: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
3059: LD_VAR 0 2
3063: PPUSH
3064: LD_INT 1
3066: PPUSH
3067: LD_INT 40
3069: PPUSH
3070: CALL_OW 291
// end ;
3074: LD_VAR 0 1
3078: RET
// export function PowellSupport3 ; var i , cargo ; begin
3079: LD_INT 0
3081: PPUSH
3082: PPUSH
3083: PPUSH
// uc_side := 1 ;
3084: LD_ADDR_OWVAR 20
3088: PUSH
3089: LD_INT 1
3091: ST_TO_ADDR
// uc_nation := 1 ;
3092: LD_ADDR_OWVAR 21
3096: PUSH
3097: LD_INT 1
3099: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3100: LD_INT 4
3102: PPUSH
3103: LD_INT 0
3105: PPUSH
3106: LD_INT 1
3108: PPUSH
3109: LD_INT 0
3111: PPUSH
3112: CALL 1362 0 4
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3116: LD_INT 4
3118: PPUSH
3119: LD_INT 0
3121: PPUSH
3122: LD_INT 1
3124: PPUSH
3125: LD_INT 0
3127: PPUSH
3128: CALL 1362 0 4
// for i := 1 to 2 do
3132: LD_ADDR_VAR 0 2
3136: PUSH
3137: DOUBLE
3138: LD_INT 1
3140: DEC
3141: ST_TO_ADDR
3142: LD_INT 2
3144: PUSH
3145: FOR_TO
3146: IFFALSE 3246
// begin vc_chassis := us_medium_wheeled ;
3148: LD_ADDR_OWVAR 37
3152: PUSH
3153: LD_INT 2
3155: ST_TO_ADDR
// vc_engine := engine_siberite ;
3156: LD_ADDR_OWVAR 39
3160: PUSH
3161: LD_INT 3
3163: ST_TO_ADDR
// vc_control = control_computer ;
3164: LD_ADDR_OWVAR 38
3168: PUSH
3169: LD_INT 3
3171: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
3172: LD_ADDR_OWVAR 40
3176: PUSH
3177: LD_INT 12
3179: ST_TO_ADDR
// cargo := CreateVehicle ;
3180: LD_ADDR_VAR 0 3
3184: PUSH
3185: CALL_OW 45
3189: ST_TO_ADDR
// SetDir ( cargo , 4 ) ;
3190: LD_VAR 0 3
3194: PPUSH
3195: LD_INT 4
3197: PPUSH
3198: CALL_OW 233
// SetTag ( cargo , 17 ) ;
3202: LD_VAR 0 3
3206: PPUSH
3207: LD_INT 17
3209: PPUSH
3210: CALL_OW 109
// PlaceUnitArea ( cargo , PlayerSpawn , false ) ;
3214: LD_VAR 0 3
3218: PPUSH
3219: LD_INT 4
3221: PPUSH
3222: LD_INT 0
3224: PPUSH
3225: CALL_OW 49
// AddCargo ( cargo , mat_cans , 100 ) ;
3229: LD_VAR 0 3
3233: PPUSH
3234: LD_INT 1
3236: PPUSH
3237: LD_INT 100
3239: PPUSH
3240: CALL_OW 291
// end ;
3244: GO 3145
3246: POP
3247: POP
// end ; end_of_file
3248: LD_VAR 0 1
3252: RET
// export function PrepareRussianCommander ; begin
3253: LD_INT 0
3255: PPUSH
// uc_side := 3 ;
3256: LD_ADDR_OWVAR 20
3260: PUSH
3261: LD_INT 3
3263: ST_TO_ADDR
// Davidov := PrepareUnit ( Davidov , false ,  ) ;
3264: LD_ADDR_EXP 16
3268: PUSH
3269: LD_STRING Davidov
3271: PPUSH
3272: LD_INT 0
3274: PPUSH
3275: LD_STRING 
3277: PPUSH
3278: CALL 38828 0 3
3282: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3283: LD_EXP 16
3287: PPUSH
3288: LD_INT 3
3290: PPUSH
3291: CALL_OW 52
// RuScientists := Join ( RuScientists , Davidov ) ;
3295: LD_ADDR_EXP 27
3299: PUSH
3300: LD_EXP 27
3304: PPUSH
3305: LD_EXP 16
3309: PPUSH
3310: CALL 76229 0 2
3314: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3315: LD_EXP 27
3319: PPUSH
3320: LD_INT 4
3322: PPUSH
3323: CALL_OW 336
// end ;
3327: LD_VAR 0 1
3331: RET
// export function PrepareEastBase ; var i , un ; begin
3332: LD_INT 0
3334: PPUSH
3335: PPUSH
3336: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3337: LD_INT 3
3339: PPUSH
3340: LD_INT 3
3342: PPUSH
3343: LD_INT 121
3345: PPUSH
3346: LD_EXP 29
3350: PPUSH
3351: LD_EXP 30
3355: PPUSH
3356: CALL_OW 12
3360: PPUSH
3361: LD_INT 1
3363: PPUSH
3364: LD_INT 3
3366: PPUSH
3367: CALL 12634 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3371: LD_INT 3
3373: PPUSH
3374: LD_INT 3
3376: PPUSH
3377: LD_INT 121
3379: PPUSH
3380: LD_EXP 29
3384: PPUSH
3385: LD_EXP 30
3389: PPUSH
3390: CALL_OW 12
3394: PPUSH
3395: LD_INT 9
3397: PPUSH
3398: LD_INT 3
3400: PPUSH
3401: CALL 12634 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3405: LD_INT 3
3407: PPUSH
3408: LD_INT 3
3410: PPUSH
3411: LD_INT 4
3413: PPUSH
3414: LD_EXP 29
3418: PPUSH
3419: LD_EXP 30
3423: PPUSH
3424: CALL_OW 12
3428: PPUSH
3429: LD_INT 2
3431: PPUSH
3432: LD_INT 6
3434: PPUSH
3435: CALL 12634 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3439: LD_INT 3
3441: PPUSH
3442: LD_INT 3
3444: PPUSH
3445: LD_INT 112
3447: PPUSH
3448: LD_EXP 29
3452: PPUSH
3453: LD_EXP 30
3457: PPUSH
3458: CALL_OW 12
3462: PPUSH
3463: LD_INT 3
3465: PPUSH
3466: LD_INT 6
3468: PPUSH
3469: CALL 12634 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3473: LD_INT 3
3475: PPUSH
3476: LD_INT 3
3478: PPUSH
3479: LD_INT 47
3481: PPUSH
3482: LD_EXP 29
3486: PPUSH
3487: LD_EXP 30
3491: PPUSH
3492: CALL_OW 12
3496: PPUSH
3497: LD_INT 4
3499: PPUSH
3500: LD_INT 6
3502: PPUSH
3503: CALL 12634 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3507: LD_INT 3
3509: PPUSH
3510: LD_INT 3
3512: PPUSH
3513: LD_INT 129
3515: PPUSH
3516: LD_EXP 29
3520: PPUSH
3521: LD_EXP 30
3525: PPUSH
3526: CALL_OW 12
3530: PPUSH
3531: LD_INT 4
3533: PPUSH
3534: LD_INT 6
3536: PPUSH
3537: CALL 12634 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3541: LD_INT 3
3543: PPUSH
3544: LD_INT 3
3546: PPUSH
3547: LD_INT 135
3549: PPUSH
3550: LD_EXP 29
3554: PPUSH
3555: LD_EXP 30
3559: PPUSH
3560: CALL_OW 12
3564: PPUSH
3565: LD_INT 4
3567: PPUSH
3568: LD_INT 6
3570: PPUSH
3571: CALL 12634 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3575: LD_ADDR_VAR 0 2
3579: PUSH
3580: LD_INT 22
3582: PUSH
3583: LD_INT 3
3585: PUSH
3586: EMPTY
3587: LIST
3588: LIST
3589: PUSH
3590: LD_INT 30
3592: PUSH
3593: LD_INT 32
3595: PUSH
3596: EMPTY
3597: LIST
3598: LIST
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: PPUSH
3604: CALL_OW 69
3608: PUSH
3609: FOR_IN
3610: IFFALSE 3650
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3612: LD_INT 3
3614: PPUSH
3615: LD_INT 3
3617: PPUSH
3618: LD_VAR 0 2
3622: PPUSH
3623: LD_EXP 29
3627: PPUSH
3628: LD_EXP 30
3632: PPUSH
3633: CALL_OW 12
3637: PPUSH
3638: LD_INT 1
3640: PPUSH
3641: LD_INT 1
3643: PPUSH
3644: CALL 12634 0 6
3648: GO 3609
3650: POP
3651: POP
// for i := 1 to 5 do
3652: LD_ADDR_VAR 0 2
3656: PUSH
3657: DOUBLE
3658: LD_INT 1
3660: DEC
3661: ST_TO_ADDR
3662: LD_INT 5
3664: PUSH
3665: FOR_TO
3666: IFFALSE 3769
// begin uc_side := 3 ;
3668: LD_ADDR_OWVAR 20
3672: PUSH
3673: LD_INT 3
3675: ST_TO_ADDR
// uc_nation := 3 ;
3676: LD_ADDR_OWVAR 21
3680: PUSH
3681: LD_INT 3
3683: ST_TO_ADDR
// hc_gallery :=  ;
3684: LD_ADDR_OWVAR 33
3688: PUSH
3689: LD_STRING 
3691: ST_TO_ADDR
// hc_name :=  ;
3692: LD_ADDR_OWVAR 26
3696: PUSH
3697: LD_STRING 
3699: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3700: LD_INT 0
3702: PPUSH
3703: LD_INT 4
3705: PPUSH
3706: LD_EXP 29
3710: PPUSH
3711: LD_EXP 30
3715: PPUSH
3716: CALL_OW 12
3720: PPUSH
3721: CALL_OW 380
// un := CreateHuman ;
3725: LD_ADDR_VAR 0 3
3729: PUSH
3730: CALL_OW 44
3734: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3735: LD_VAR 0 3
3739: PPUSH
3740: LD_INT 3
3742: PPUSH
3743: CALL_OW 52
// RuScientists := Join ( RuScientists , un ) ;
3747: LD_ADDR_EXP 27
3751: PUSH
3752: LD_EXP 27
3756: PPUSH
3757: LD_VAR 0 3
3761: PPUSH
3762: CALL 76229 0 2
3766: ST_TO_ADDR
// end ;
3767: GO 3665
3769: POP
3770: POP
// end ;
3771: LD_VAR 0 1
3775: RET
// export function PrepareWestBase ; var i , un ; begin
3776: LD_INT 0
3778: PPUSH
3779: PPUSH
3780: PPUSH
// TeleportExit ( ruteleprt , 122 , 145 ) ;
3781: LD_INT 10
3783: PPUSH
3784: LD_INT 122
3786: PPUSH
3787: LD_INT 145
3789: PPUSH
3790: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
3794: LD_INT 137
3796: PPUSH
3797: LD_INT 84
3799: PPUSH
3800: LD_INT 61
3802: PPUSH
3803: CALL_OW 243
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3807: LD_INT 3
3809: PPUSH
3810: LD_INT 3
3812: PPUSH
3813: LD_INT 6
3815: PPUSH
3816: LD_EXP 29
3820: PPUSH
3821: LD_EXP 30
3825: PPUSH
3826: CALL_OW 12
3830: PPUSH
3831: LD_INT 2
3833: PPUSH
3834: LD_INT 3
3836: PPUSH
3837: CALL 12634 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3841: LD_INT 3
3843: PPUSH
3844: LD_INT 3
3846: PPUSH
3847: LD_INT 91
3849: PPUSH
3850: LD_EXP 29
3854: PPUSH
3855: LD_EXP 30
3859: PPUSH
3860: CALL_OW 12
3864: PPUSH
3865: LD_INT 4
3867: PPUSH
3868: LD_INT 3
3870: PPUSH
3871: CALL 12634 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3875: LD_INT 3
3877: PPUSH
3878: LD_INT 3
3880: PPUSH
3881: LD_INT 21
3883: PPUSH
3884: LD_EXP 29
3888: PPUSH
3889: LD_EXP 30
3893: PPUSH
3894: CALL_OW 12
3898: PPUSH
3899: LD_INT 3
3901: PPUSH
3902: LD_INT 6
3904: PPUSH
3905: CALL 12634 0 6
// end ;
3909: LD_VAR 0 1
3913: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3914: LD_INT 0
3916: PPUSH
3917: PPUSH
3918: PPUSH
3919: PPUSH
// uc_side := 3 ;
3920: LD_ADDR_OWVAR 20
3924: PUSH
3925: LD_INT 3
3927: ST_TO_ADDR
// uc_nation := 3 ;
3928: LD_ADDR_OWVAR 21
3932: PUSH
3933: LD_INT 3
3935: ST_TO_ADDR
// for i := 1 to 5 do
3936: LD_ADDR_VAR 0 2
3940: PUSH
3941: DOUBLE
3942: LD_INT 1
3944: DEC
3945: ST_TO_ADDR
3946: LD_INT 5
3948: PUSH
3949: FOR_TO
3950: IFFALSE 4020
// begin hc_gallery :=  ;
3952: LD_ADDR_OWVAR 33
3956: PUSH
3957: LD_STRING 
3959: ST_TO_ADDR
// hc_name :=  ;
3960: LD_ADDR_OWVAR 26
3964: PUSH
3965: LD_STRING 
3967: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3968: LD_INT 0
3970: PPUSH
3971: LD_INT 9
3973: PPUSH
3974: LD_EXP 29
3978: PPUSH
3979: LD_EXP 30
3983: PPUSH
3984: CALL_OW 12
3988: PPUSH
3989: CALL_OW 380
// un := CreateHuman ;
3993: LD_ADDR_VAR 0 3
3997: PUSH
3998: CALL_OW 44
4002: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4003: LD_VAR 0 3
4007: PPUSH
4008: LD_INT 8
4010: PPUSH
4011: LD_INT 0
4013: PPUSH
4014: CALL_OW 49
// end ;
4018: GO 3949
4020: POP
4021: POP
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4022: LD_ADDR_VAR 0 2
4026: PUSH
4027: DOUBLE
4028: LD_INT 1
4030: DEC
4031: ST_TO_ADDR
4032: LD_INT 2
4034: PUSH
4035: LD_INT 3
4037: PUSH
4038: LD_INT 4
4040: PUSH
4041: LD_INT 4
4043: PUSH
4044: EMPTY
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: PUSH
4050: LD_OWVAR 67
4054: ARRAY
4055: PUSH
4056: FOR_TO
4057: IFFALSE 4127
// begin hc_gallery :=  ;
4059: LD_ADDR_OWVAR 33
4063: PUSH
4064: LD_STRING 
4066: ST_TO_ADDR
// hc_name :=  ;
4067: LD_ADDR_OWVAR 26
4071: PUSH
4072: LD_STRING 
4074: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4075: LD_INT 0
4077: PPUSH
4078: LD_INT 4
4080: PPUSH
4081: LD_EXP 29
4085: PPUSH
4086: LD_EXP 30
4090: PPUSH
4091: CALL_OW 12
4095: PPUSH
4096: CALL_OW 380
// un := CreateHuman ;
4100: LD_ADDR_VAR 0 3
4104: PUSH
4105: CALL_OW 44
4109: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4110: LD_VAR 0 3
4114: PPUSH
4115: LD_INT 8
4117: PPUSH
4118: LD_INT 0
4120: PPUSH
4121: CALL_OW 49
// end ;
4125: GO 4056
4127: POP
4128: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4129: LD_ADDR_VAR 0 2
4133: PUSH
4134: DOUBLE
4135: LD_INT 1
4137: DEC
4138: ST_TO_ADDR
4139: LD_INT 3
4141: PUSH
4142: LD_INT 4
4144: PUSH
4145: LD_INT 5
4147: PUSH
4148: LD_INT 5
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: LIST
4155: LIST
4156: PUSH
4157: LD_OWVAR 67
4161: ARRAY
4162: PUSH
4163: FOR_TO
4164: IFFALSE 4360
// begin vc_engine = 3 ;
4166: LD_ADDR_OWVAR 39
4170: PUSH
4171: LD_INT 3
4173: ST_TO_ADDR
// vc_control = 1 ;
4174: LD_ADDR_OWVAR 38
4178: PUSH
4179: LD_INT 1
4181: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
4182: LD_ADDR_OWVAR 40
4186: PUSH
4187: LD_INT 42
4189: PUSH
4190: LD_INT 43
4192: PUSH
4193: LD_INT 44
4195: PUSH
4196: LD_INT 45
4198: PUSH
4199: LD_INT 46
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: LIST
4206: LIST
4207: LIST
4208: PUSH
4209: LD_INT 1
4211: PPUSH
4212: LD_INT 5
4214: PPUSH
4215: CALL_OW 12
4219: ARRAY
4220: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4221: LD_OWVAR 40
4225: PUSH
4226: LD_INT 46
4228: EQUAL
4229: IFFALSE 4241
// vc_chassis := ru_heavy_tracked else
4231: LD_ADDR_OWVAR 37
4235: PUSH
4236: LD_INT 24
4238: ST_TO_ADDR
4239: GO 4268
// vc_chassis := [ ru_medium_tracked , ru_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
4241: LD_ADDR_OWVAR 37
4245: PUSH
4246: LD_INT 22
4248: PUSH
4249: LD_INT 21
4251: PUSH
4252: EMPTY
4253: LIST
4254: LIST
4255: PUSH
4256: LD_INT 1
4258: PPUSH
4259: LD_INT 2
4261: PPUSH
4262: CALL_OW 12
4266: ARRAY
4267: ST_TO_ADDR
// veh := CreateVehicle ;
4268: LD_ADDR_VAR 0 4
4272: PUSH
4273: CALL_OW 45
4277: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4278: LD_VAR 0 4
4282: PPUSH
4283: LD_INT 3
4285: PPUSH
4286: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4290: LD_VAR 0 4
4294: PPUSH
4295: LD_INT 5
4297: PPUSH
4298: LD_INT 0
4300: PPUSH
4301: CALL_OW 49
// hc_gallery :=  ;
4305: LD_ADDR_OWVAR 33
4309: PUSH
4310: LD_STRING 
4312: ST_TO_ADDR
// hc_name :=  ;
4313: LD_ADDR_OWVAR 26
4317: PUSH
4318: LD_STRING 
4320: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
4321: LD_INT 0
4323: PPUSH
4324: LD_INT 3
4326: PPUSH
4327: LD_INT 10
4329: PPUSH
4330: CALL_OW 380
// un = CreateHuman ;
4334: LD_ADDR_VAR 0 3
4338: PUSH
4339: CALL_OW 44
4343: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4344: LD_VAR 0 3
4348: PPUSH
4349: LD_VAR 0 4
4353: PPUSH
4354: CALL_OW 52
// end ;
4358: GO 4163
4360: POP
4361: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4362: LD_ADDR_VAR 0 2
4366: PUSH
4367: DOUBLE
4368: LD_INT 1
4370: DEC
4371: ST_TO_ADDR
4372: LD_INT 3
4374: PUSH
4375: LD_INT 4
4377: PUSH
4378: LD_INT 5
4380: PUSH
4381: LD_INT 5
4383: PUSH
4384: EMPTY
4385: LIST
4386: LIST
4387: LIST
4388: LIST
4389: PUSH
4390: LD_OWVAR 67
4394: ARRAY
4395: PUSH
4396: FOR_TO
4397: IFFALSE 4544
// begin vc_engine := 3 ;
4399: LD_ADDR_OWVAR 39
4403: PUSH
4404: LD_INT 3
4406: ST_TO_ADDR
// vc_control := 3 ;
4407: LD_ADDR_OWVAR 38
4411: PUSH
4412: LD_INT 3
4414: ST_TO_ADDR
// vc_weapon := [ 42 , 43 , 44 , 45 , 46 , 49 ] [ rand ( 1 , 5 ) ] ;
4415: LD_ADDR_OWVAR 40
4419: PUSH
4420: LD_INT 42
4422: PUSH
4423: LD_INT 43
4425: PUSH
4426: LD_INT 44
4428: PUSH
4429: LD_INT 45
4431: PUSH
4432: LD_INT 46
4434: PUSH
4435: LD_INT 49
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: PUSH
4446: LD_INT 1
4448: PPUSH
4449: LD_INT 5
4451: PPUSH
4452: CALL_OW 12
4456: ARRAY
4457: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4458: LD_OWVAR 40
4462: PUSH
4463: LD_INT 46
4465: EQUAL
4466: IFFALSE 4478
// vc_chassis := ru_heavy_tracked else
4468: LD_ADDR_OWVAR 37
4472: PUSH
4473: LD_INT 24
4475: ST_TO_ADDR
4476: GO 4505
// vc_chassis := [ ru_medium_tracked , ru_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
4478: LD_ADDR_OWVAR 37
4482: PUSH
4483: LD_INT 22
4485: PUSH
4486: LD_INT 21
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: PUSH
4493: LD_INT 1
4495: PPUSH
4496: LD_INT 2
4498: PPUSH
4499: CALL_OW 12
4503: ARRAY
4504: ST_TO_ADDR
// veh := CreateVehicle ;
4505: LD_ADDR_VAR 0 4
4509: PUSH
4510: CALL_OW 45
4514: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4515: LD_VAR 0 4
4519: PPUSH
4520: LD_INT 3
4522: PPUSH
4523: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4527: LD_VAR 0 4
4531: PPUSH
4532: LD_INT 6
4534: PPUSH
4535: LD_INT 0
4537: PPUSH
4538: CALL_OW 49
// end ;
4542: GO 4396
4544: POP
4545: POP
// end ; end_of_file
4546: LD_VAR 0 1
4550: RET
// export function PrepareKurt ; begin
4551: LD_INT 0
4553: PPUSH
// uc_side := 8 ;
4554: LD_ADDR_OWVAR 20
4558: PUSH
4559: LD_INT 8
4561: ST_TO_ADDR
// uc_nation := 2 ;
4562: LD_ADDR_OWVAR 21
4566: PUSH
4567: LD_INT 2
4569: ST_TO_ADDR
// vc_chassis := ar_medium_trike ;
4570: LD_ADDR_OWVAR 37
4574: PUSH
4575: LD_INT 13
4577: ST_TO_ADDR
// vc_engine := 1 ;
4578: LD_ADDR_OWVAR 39
4582: PUSH
4583: LD_INT 1
4585: ST_TO_ADDR
// vc_control := 1 ;
4586: LD_ADDR_OWVAR 38
4590: PUSH
4591: LD_INT 1
4593: ST_TO_ADDR
// vc_weapon := 24 ;
4594: LD_ADDR_OWVAR 40
4598: PUSH
4599: LD_INT 24
4601: ST_TO_ADDR
// KurtVeh := CreateVehicle ;
4602: LD_ADDR_EXP 18
4606: PUSH
4607: CALL_OW 45
4611: ST_TO_ADDR
// if kurtStatus > 0 then
4612: LD_EXP 19
4616: PUSH
4617: LD_INT 0
4619: GREATER
4620: IFFALSE 4672
// begin Kurt := PrepareUnit ( Kurt , false ,  ) ;
4622: LD_ADDR_EXP 17
4626: PUSH
4627: LD_STRING Kurt
4629: PPUSH
4630: LD_INT 0
4632: PPUSH
4633: LD_STRING 
4635: PPUSH
4636: CALL 38828 0 3
4640: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4641: LD_EXP 18
4645: PPUSH
4646: LD_INT 4
4648: PPUSH
4649: LD_INT 0
4651: PPUSH
4652: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4656: LD_EXP 17
4660: PPUSH
4661: LD_EXP 18
4665: PPUSH
4666: CALL_OW 52
// end else
4670: GO 4749
// begin hc_name :=  ;
4672: LD_ADDR_OWVAR 26
4676: PUSH
4677: LD_STRING 
4679: ST_TO_ADDR
// hc_gallery :=  ;
4680: LD_ADDR_OWVAR 33
4684: PUSH
4685: LD_STRING 
4687: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4688: LD_INT 1
4690: PPUSH
4691: LD_INT 10
4693: PPUSH
4694: CALL_OW 381
// Kurt := CreateHuman ;
4698: LD_ADDR_EXP 17
4702: PUSH
4703: CALL_OW 44
4707: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4708: LD_EXP 18
4712: PPUSH
4713: LD_INT 4
4715: PPUSH
4716: LD_INT 0
4718: PPUSH
4719: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4723: LD_EXP 17
4727: PPUSH
4728: LD_EXP 18
4732: PPUSH
4733: CALL_OW 52
// SaveCharacters ( Kurt , AltKurt ) ;
4737: LD_EXP 17
4741: PPUSH
4742: LD_STRING AltKurt
4744: PPUSH
4745: CALL_OW 38
// end ; end ;
4749: LD_VAR 0 1
4753: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4754: LD_INT 0
4756: PPUSH
4757: PPUSH
4758: PPUSH
4759: PPUSH
// for i := 1 to 3 do
4760: LD_ADDR_VAR 0 2
4764: PUSH
4765: DOUBLE
4766: LD_INT 1
4768: DEC
4769: ST_TO_ADDR
4770: LD_INT 3
4772: PUSH
4773: FOR_TO
4774: IFFALSE 4895
// begin uc_side := 1 ;
4776: LD_ADDR_OWVAR 20
4780: PUSH
4781: LD_INT 1
4783: ST_TO_ADDR
// uc_nation := 2 ;
4784: LD_ADDR_OWVAR 21
4788: PUSH
4789: LD_INT 2
4791: ST_TO_ADDR
// hc_gallery =  ;
4792: LD_ADDR_OWVAR 33
4796: PUSH
4797: LD_STRING 
4799: ST_TO_ADDR
// hc_name =  ;
4800: LD_ADDR_OWVAR 26
4804: PUSH
4805: LD_STRING 
4807: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4808: LD_EXP 19
4812: PUSH
4813: LD_INT 0
4815: EQUAL
4816: PUSH
4817: LD_EXP 19
4821: PUSH
4822: LD_INT 2
4824: EQUAL
4825: OR
4826: IFFALSE 4843
// PrepareHuman ( false , 1 , 6 ) else
4828: LD_INT 0
4830: PPUSH
4831: LD_INT 1
4833: PPUSH
4834: LD_INT 6
4836: PPUSH
4837: CALL_OW 380
4841: GO 4856
// PrepareHuman ( false , 1 , 8 ) ;
4843: LD_INT 0
4845: PPUSH
4846: LD_INT 1
4848: PPUSH
4849: LD_INT 8
4851: PPUSH
4852: CALL_OW 380
// un := CreateHuman ;
4856: LD_ADDR_VAR 0 3
4860: PUSH
4861: CALL_OW 44
4865: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4866: LD_VAR 0 3
4870: PPUSH
4871: LD_INT 4
4873: PPUSH
4874: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4878: LD_VAR 0 3
4882: PPUSH
4883: LD_INT 4
4885: PPUSH
4886: LD_INT 0
4888: PPUSH
4889: CALL_OW 49
// end ;
4893: GO 4773
4895: POP
4896: POP
// vc_chassis := 14 ;
4897: LD_ADDR_OWVAR 37
4901: PUSH
4902: LD_INT 14
4904: ST_TO_ADDR
// vc_engine := 3 ;
4905: LD_ADDR_OWVAR 39
4909: PUSH
4910: LD_INT 3
4912: ST_TO_ADDR
// vc_control := 1 ;
4913: LD_ADDR_OWVAR 38
4917: PUSH
4918: LD_INT 1
4920: ST_TO_ADDR
// vc_weapon := [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4921: LD_ADDR_OWVAR 40
4925: PUSH
4926: LD_INT 27
4928: PUSH
4929: LD_INT 26
4931: PUSH
4932: LD_INT 28
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: LIST
4939: PUSH
4940: LD_INT 1
4942: PPUSH
4943: LD_INT 3
4945: PPUSH
4946: CALL_OW 12
4950: ARRAY
4951: ST_TO_ADDR
// veh := CreateVehicle ;
4952: LD_ADDR_VAR 0 4
4956: PUSH
4957: CALL_OW 45
4961: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4962: LD_VAR 0 4
4966: PPUSH
4967: LD_INT 4
4969: PPUSH
4970: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4974: LD_VAR 0 4
4978: PPUSH
4979: LD_INT 4
4981: PPUSH
4982: LD_INT 0
4984: PPUSH
4985: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4989: LD_EXP 19
4993: PUSH
4994: LD_INT 0
4996: EQUAL
4997: PUSH
4998: LD_EXP 19
5002: PUSH
5003: LD_INT 2
5005: EQUAL
5006: OR
5007: IFFALSE 5024
// PrepareHuman ( false , 3 , 6 ) else
5009: LD_INT 0
5011: PPUSH
5012: LD_INT 3
5014: PPUSH
5015: LD_INT 6
5017: PPUSH
5018: CALL_OW 380
5022: GO 5037
// PrepareHuman ( false , 3 , 8 ) ;
5024: LD_INT 0
5026: PPUSH
5027: LD_INT 3
5029: PPUSH
5030: LD_INT 8
5032: PPUSH
5033: CALL_OW 380
// un := CreateHuman ;
5037: LD_ADDR_VAR 0 3
5041: PUSH
5042: CALL_OW 44
5046: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5047: LD_VAR 0 3
5051: PPUSH
5052: LD_VAR 0 4
5056: PPUSH
5057: CALL_OW 52
// vc_chassis := 14 ;
5061: LD_ADDR_OWVAR 37
5065: PUSH
5066: LD_INT 14
5068: ST_TO_ADDR
// vc_engine := 3 ;
5069: LD_ADDR_OWVAR 39
5073: PUSH
5074: LD_INT 3
5076: ST_TO_ADDR
// vc_control := 1 ;
5077: LD_ADDR_OWVAR 38
5081: PUSH
5082: LD_INT 1
5084: ST_TO_ADDR
// vc_weapon := [ 27 , 26 , 28 ] [ rand ( 1 , 3 ) ] ;
5085: LD_ADDR_OWVAR 40
5089: PUSH
5090: LD_INT 27
5092: PUSH
5093: LD_INT 26
5095: PUSH
5096: LD_INT 28
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: LIST
5103: PUSH
5104: LD_INT 1
5106: PPUSH
5107: LD_INT 3
5109: PPUSH
5110: CALL_OW 12
5114: ARRAY
5115: ST_TO_ADDR
// veh := CreateVehicle ;
5116: LD_ADDR_VAR 0 4
5120: PUSH
5121: CALL_OW 45
5125: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5126: LD_VAR 0 4
5130: PPUSH
5131: LD_INT 4
5133: PPUSH
5134: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5138: LD_VAR 0 4
5142: PPUSH
5143: LD_INT 4
5145: PPUSH
5146: LD_INT 0
5148: PPUSH
5149: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5153: LD_EXP 19
5157: PUSH
5158: LD_INT 0
5160: EQUAL
5161: PUSH
5162: LD_EXP 19
5166: PUSH
5167: LD_INT 2
5169: EQUAL
5170: OR
5171: IFFALSE 5188
// PrepareHuman ( false , 4 , 6 ) else
5173: LD_INT 0
5175: PPUSH
5176: LD_INT 4
5178: PPUSH
5179: LD_INT 6
5181: PPUSH
5182: CALL_OW 380
5186: GO 5201
// PrepareHuman ( false , 4 , 8 ) ;
5188: LD_INT 0
5190: PPUSH
5191: LD_INT 4
5193: PPUSH
5194: LD_INT 8
5196: PPUSH
5197: CALL_OW 380
// un := CreateHuman ;
5201: LD_ADDR_VAR 0 3
5205: PUSH
5206: CALL_OW 44
5210: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5211: LD_VAR 0 3
5215: PPUSH
5216: LD_INT 4
5218: PPUSH
5219: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5223: LD_VAR 0 3
5227: PPUSH
5228: LD_VAR 0 4
5232: PPUSH
5233: CALL_OW 52
// vc_chassis := 14 ;
5237: LD_ADDR_OWVAR 37
5241: PUSH
5242: LD_INT 14
5244: ST_TO_ADDR
// vc_engine := 3 ;
5245: LD_ADDR_OWVAR 39
5249: PUSH
5250: LD_INT 3
5252: ST_TO_ADDR
// vc_control := 1 ;
5253: LD_ADDR_OWVAR 38
5257: PUSH
5258: LD_INT 1
5260: ST_TO_ADDR
// vc_weapon := 26 ;
5261: LD_ADDR_OWVAR 40
5265: PUSH
5266: LD_INT 26
5268: ST_TO_ADDR
// veh := CreateVehicle ;
5269: LD_ADDR_VAR 0 4
5273: PUSH
5274: CALL_OW 45
5278: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5279: LD_VAR 0 4
5283: PPUSH
5284: LD_INT 4
5286: PPUSH
5287: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5291: LD_VAR 0 4
5295: PPUSH
5296: LD_INT 4
5298: PPUSH
5299: LD_INT 0
5301: PPUSH
5302: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5306: LD_EXP 19
5310: PUSH
5311: LD_INT 0
5313: EQUAL
5314: PUSH
5315: LD_EXP 19
5319: PUSH
5320: LD_INT 2
5322: EQUAL
5323: OR
5324: IFFALSE 5341
// PrepareHuman ( false , 2 , 4 ) else
5326: LD_INT 0
5328: PPUSH
5329: LD_INT 2
5331: PPUSH
5332: LD_INT 4
5334: PPUSH
5335: CALL_OW 380
5339: GO 5354
// PrepareHuman ( false , 2 , 8 ) ;
5341: LD_INT 0
5343: PPUSH
5344: LD_INT 2
5346: PPUSH
5347: LD_INT 8
5349: PPUSH
5350: CALL_OW 380
// un := CreateHuman ;
5354: LD_ADDR_VAR 0 3
5358: PUSH
5359: CALL_OW 44
5363: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5364: LD_VAR 0 3
5368: PPUSH
5369: LD_INT 4
5371: PPUSH
5372: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5376: LD_VAR 0 3
5380: PPUSH
5381: LD_VAR 0 4
5385: PPUSH
5386: CALL_OW 52
// end ;
5390: LD_VAR 0 1
5394: RET
// export function PrepareAttackLegion ; var i , un ; begin
5395: LD_INT 0
5397: PPUSH
5398: PPUSH
5399: PPUSH
// for i := 1 to 4 do
5400: LD_ADDR_VAR 0 2
5404: PUSH
5405: DOUBLE
5406: LD_INT 1
5408: DEC
5409: ST_TO_ADDR
5410: LD_INT 4
5412: PUSH
5413: FOR_TO
5414: IFFALSE 5524
// begin uc_side := 8 ;
5416: LD_ADDR_OWVAR 20
5420: PUSH
5421: LD_INT 8
5423: ST_TO_ADDR
// uc_nation := 2 ;
5424: LD_ADDR_OWVAR 21
5428: PUSH
5429: LD_INT 2
5431: ST_TO_ADDR
// hc_gallery :=  ;
5432: LD_ADDR_OWVAR 33
5436: PUSH
5437: LD_STRING 
5439: ST_TO_ADDR
// hc_name :=  ;
5440: LD_ADDR_OWVAR 26
5444: PUSH
5445: LD_STRING 
5447: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5448: LD_INT 0
5450: PPUSH
5451: LD_INT 1
5453: PUSH
5454: LD_INT 8
5456: PUSH
5457: EMPTY
5458: LIST
5459: LIST
5460: PUSH
5461: LD_INT 1
5463: PPUSH
5464: LD_INT 2
5466: PPUSH
5467: CALL_OW 12
5471: ARRAY
5472: PPUSH
5473: LD_INT 6
5475: PPUSH
5476: LD_INT 8
5478: PPUSH
5479: CALL_OW 12
5483: PPUSH
5484: CALL_OW 380
// un := CreateHuman ;
5488: LD_ADDR_VAR 0 3
5492: PUSH
5493: CALL_OW 44
5497: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5498: LD_VAR 0 3
5502: PPUSH
5503: LD_INT 19
5505: PPUSH
5506: LD_INT 0
5508: PPUSH
5509: CALL_OW 49
// ComCrawl ( un ) ;
5513: LD_VAR 0 3
5517: PPUSH
5518: CALL_OW 137
// end ;
5522: GO 5413
5524: POP
5525: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5526: LD_INT 1
5528: PPUSH
5529: LD_INT 8
5531: PPUSH
5532: LD_INT 2
5534: PPUSH
5535: LD_INT 1
5537: PPUSH
5538: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5542: LD_INT 20
5544: PPUSH
5545: LD_INT 3
5547: PPUSH
5548: CALL 14469 0 2
// end ; end_of_file
5552: LD_VAR 0 1
5556: RET
// export function Action ; var i , tmp , group ; begin
5557: LD_INT 0
5559: PPUSH
5560: PPUSH
5561: PPUSH
5562: PPUSH
// InGameOn ;
5563: CALL_OW 8
// music_nat := 1 ;
5567: LD_ADDR_OWVAR 71
5571: PUSH
5572: LD_INT 1
5574: ST_TO_ADDR
// group := FilterAllUnits ( [ f_side , 1 ] ) ;
5575: LD_ADDR_VAR 0 4
5579: PUSH
5580: LD_INT 22
5582: PUSH
5583: LD_INT 1
5585: PUSH
5586: EMPTY
5587: LIST
5588: LIST
5589: PPUSH
5590: CALL_OW 69
5594: ST_TO_ADDR
// tmp := IsInUnit ( JMM ) ;
5595: LD_ADDR_VAR 0 3
5599: PUSH
5600: LD_EXP 1
5604: PPUSH
5605: CALL_OW 310
5609: ST_TO_ADDR
// CenterNowOnUnits ( tmp ) ;
5610: LD_VAR 0 3
5614: PPUSH
5615: CALL_OW 87
// ComMoveXY ( group , 130 , 103 ) ;
5619: LD_VAR 0 4
5623: PPUSH
5624: LD_INT 130
5626: PPUSH
5627: LD_INT 103
5629: PPUSH
5630: CALL_OW 111
// AddComMoveXY ( tmp , 114 , 102 ) ;
5634: LD_VAR 0 3
5638: PPUSH
5639: LD_INT 114
5641: PPUSH
5642: LD_INT 102
5644: PPUSH
5645: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5649: LD_EXP 1
5653: PPUSH
5654: LD_STRING D1-JMM-1
5656: PPUSH
5657: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5661: LD_VAR 0 3
5665: PPUSH
5666: CALL_OW 87
// if IsOk ( Donaldson ) then
5670: LD_EXP 3
5674: PPUSH
5675: CALL_OW 302
5679: IFFALSE 5744
// begin Say ( Donaldson , D1-Don-1 ) ;
5681: LD_EXP 3
5685: PPUSH
5686: LD_STRING D1-Don-1
5688: PPUSH
5689: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5693: LD_VAR 0 3
5697: PPUSH
5698: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5702: LD_EXP 1
5706: PPUSH
5707: LD_STRING D1-JMM-2
5709: PPUSH
5710: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5714: LD_VAR 0 3
5718: PPUSH
5719: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5723: LD_EXP 3
5727: PPUSH
5728: LD_STRING D1-Don-2
5730: PPUSH
5731: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5735: LD_VAR 0 3
5739: PPUSH
5740: CALL_OW 87
// end ; AddComMoveXY ( group , 110 , 101 ) ;
5744: LD_VAR 0 4
5748: PPUSH
5749: LD_INT 110
5751: PPUSH
5752: LD_INT 101
5754: PPUSH
5755: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5759: LD_INT 35
5761: PPUSH
5762: CALL_OW 67
// CenterNowOnUnits ( tmp ) ;
5766: LD_VAR 0 3
5770: PPUSH
5771: CALL_OW 87
// until SeeXY ( 1 , 102 , 94 ) ;
5775: LD_INT 1
5777: PPUSH
5778: LD_INT 102
5780: PPUSH
5781: LD_INT 94
5783: PPUSH
5784: CALL_OW 293
5788: IFFALSE 5759
// CenterOnXY ( 102 , 94 ) ;
5790: LD_INT 102
5792: PPUSH
5793: LD_INT 94
5795: PPUSH
5796: CALL_OW 84
// DialogRandom ( UnitFilter ( group , [ f_sex , sex_male ] ) , D1-Sol1-2 ,  ) ;
5800: LD_VAR 0 4
5804: PPUSH
5805: LD_INT 26
5807: PUSH
5808: LD_INT 1
5810: PUSH
5811: EMPTY
5812: LIST
5813: LIST
5814: PPUSH
5815: CALL_OW 72
5819: PPUSH
5820: LD_STRING D1-Sol1-2
5822: PPUSH
5823: LD_STRING 
5825: PPUSH
5826: CALL 12129 0 3
// Say ( JMM , D1-JMM-3 ) ;
5830: LD_EXP 1
5834: PPUSH
5835: LD_STRING D1-JMM-3
5837: PPUSH
5838: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5842: LD_STRING M1
5844: PPUSH
5845: CALL_OW 337
// for i in group do
5849: LD_ADDR_VAR 0 2
5853: PUSH
5854: LD_VAR 0 4
5858: PUSH
5859: FOR_IN
5860: IFFALSE 5879
// ComMoveXY ( i , 95 , 84 ) ;
5862: LD_VAR 0 2
5866: PPUSH
5867: LD_INT 95
5869: PPUSH
5870: LD_INT 84
5872: PPUSH
5873: CALL_OW 111
5877: GO 5859
5879: POP
5880: POP
// end ;
5881: LD_VAR 0 1
5885: RET
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5886: GO 5888
5888: DISABLE
5889: LD_INT 0
5891: PPUSH
5892: PPUSH
5893: PPUSH
5894: PPUSH
// begin enable ;
5895: ENABLE
// bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5896: LD_ADDR_VAR 0 2
5900: PUSH
5901: LD_INT 8
5903: PPUSH
5904: LD_INT 22
5906: PUSH
5907: LD_INT 3
5909: PUSH
5910: EMPTY
5911: LIST
5912: LIST
5913: PUSH
5914: LD_INT 25
5916: PUSH
5917: LD_INT 9
5919: PUSH
5920: EMPTY
5921: LIST
5922: LIST
5923: PUSH
5924: EMPTY
5925: LIST
5926: LIST
5927: PPUSH
5928: CALL_OW 70
5932: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
5933: LD_ADDR_VAR 0 3
5937: PUSH
5938: LD_INT 22
5940: PUSH
5941: LD_INT 1
5943: PUSH
5944: EMPTY
5945: LIST
5946: LIST
5947: PUSH
5948: EMPTY
5949: LIST
5950: PPUSH
5951: CALL_OW 69
5955: ST_TO_ADDR
// for i in your_units do
5956: LD_ADDR_VAR 0 1
5960: PUSH
5961: LD_VAR 0 3
5965: PUSH
5966: FOR_IN
5967: IFFALSE 6633
// begin if See ( 3 , i ) then
5969: LD_INT 3
5971: PPUSH
5972: LD_VAR 0 1
5976: PPUSH
5977: CALL_OW 292
5981: IFFALSE 6631
// begin disable ;
5983: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
5984: LD_VAR 0 2
5988: PPUSH
5989: LD_INT 96
5991: PPUSH
5992: LD_INT 85
5994: PPUSH
5995: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5999: LD_VAR 0 2
6003: PPUSH
6004: LD_INT 96
6006: PPUSH
6007: LD_INT 85
6009: PPUSH
6010: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6014: LD_VAR 0 2
6018: PPUSH
6019: LD_INT 96
6021: PPUSH
6022: LD_INT 85
6024: PPUSH
6025: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6029: LD_VAR 0 2
6033: PPUSH
6034: LD_INT 96
6036: PPUSH
6037: LD_INT 85
6039: PPUSH
6040: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6044: LD_VAR 0 2
6048: PPUSH
6049: LD_INT 96
6051: PPUSH
6052: LD_INT 85
6054: PPUSH
6055: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6059: LD_VAR 0 2
6063: PPUSH
6064: LD_INT 96
6066: PPUSH
6067: LD_INT 85
6069: PPUSH
6070: CALL_OW 214
// wait ( 0 0$2 ) ;
6074: LD_INT 70
6076: PPUSH
6077: CALL_OW 67
// Say ( JMM , D1a-JMM-1 ) ;
6081: LD_EXP 1
6085: PPUSH
6086: LD_STRING D1a-JMM-1
6088: PPUSH
6089: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
6093: LD_EXP 3
6097: PPUSH
6098: LD_STRING D1a-Don-1
6100: PPUSH
6101: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6105: LD_ADDR_VAR 0 1
6109: PUSH
6110: LD_INT 22
6112: PUSH
6113: LD_INT 1
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: PPUSH
6120: CALL_OW 69
6124: PUSH
6125: FOR_IN
6126: IFFALSE 6145
// ComMoveXY ( i , 109 , 102 ) ;
6128: LD_VAR 0 1
6132: PPUSH
6133: LD_INT 109
6135: PPUSH
6136: LD_INT 102
6138: PPUSH
6139: CALL_OW 111
6143: GO 6125
6145: POP
6146: POP
// Say ( JMM , D1a-JMM-2 ) ;
6147: LD_EXP 1
6151: PPUSH
6152: LD_STRING D1a-JMM-2
6154: PPUSH
6155: CALL_OW 88
// wait ( 0 0$10 ) ;
6159: LD_INT 350
6161: PPUSH
6162: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6166: LD_EXP 1
6170: PPUSH
6171: CALL_OW 310
6175: PPUSH
6176: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6180: LD_EXP 3
6184: PPUSH
6185: LD_STRING D1b-Don-1
6187: PPUSH
6188: CALL_OW 88
// if IsOk ( Donaldson ) then
6192: LD_EXP 3
6196: PPUSH
6197: CALL_OW 302
6201: IFFALSE 6215
// Say ( JMM , D1b-JMM-1 ) ;
6203: LD_EXP 1
6207: PPUSH
6208: LD_STRING D1b-JMM-1
6210: PPUSH
6211: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6215: LD_INT 22
6217: PUSH
6218: LD_INT 1
6220: PUSH
6221: EMPTY
6222: LIST
6223: LIST
6224: PUSH
6225: LD_INT 26
6227: PUSH
6228: LD_INT 1
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: PUSH
6235: LD_INT 2
6237: PUSH
6238: LD_INT 25
6240: PUSH
6241: LD_INT 1
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: PUSH
6248: LD_INT 25
6250: PUSH
6251: LD_INT 2
6253: PUSH
6254: EMPTY
6255: LIST
6256: LIST
6257: PUSH
6258: LD_INT 25
6260: PUSH
6261: LD_INT 3
6263: PUSH
6264: EMPTY
6265: LIST
6266: LIST
6267: PUSH
6268: LD_INT 25
6270: PUSH
6271: LD_INT 4
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: PUSH
6278: LD_INT 25
6280: PUSH
6281: LD_INT 5
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: PUSH
6288: LD_INT 25
6290: PUSH
6291: LD_INT 8
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: PUSH
6298: EMPTY
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: LIST
6311: PPUSH
6312: CALL_OW 69
6316: PPUSH
6317: LD_STRING D1b-Sol1-1
6319: PPUSH
6320: LD_STRING 
6322: PPUSH
6323: CALL 12129 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6327: LD_EXP 3
6331: PPUSH
6332: LD_STRING D1b-Don-2
6334: PPUSH
6335: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6339: LD_EXP 1
6343: PPUSH
6344: LD_STRING D1b-JMM-2
6346: PPUSH
6347: CALL_OW 88
// dec = ShowQuery1 ;
6351: LD_ADDR_VAR 0 4
6355: PUSH
6356: CALL 12592 0 0
6360: ST_TO_ADDR
// if dec = 1 then
6361: LD_VAR 0 4
6365: PUSH
6366: LD_INT 1
6368: EQUAL
6369: IFFALSE 6475
// begin Say ( JMM , D2-JMM-1 ) ;
6371: LD_EXP 1
6375: PPUSH
6376: LD_STRING D2-JMM-1
6378: PPUSH
6379: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6383: LD_EXP 15
6387: PPUSH
6388: LD_STRING D2-Pow-1
6390: PPUSH
6391: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6395: LD_EXP 1
6399: PPUSH
6400: LD_STRING D2a-JMM-1
6402: PPUSH
6403: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6407: LD_EXP 15
6411: PPUSH
6412: LD_STRING D2a-Pow-1
6414: PPUSH
6415: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6419: LD_EXP 1
6423: PPUSH
6424: LD_STRING D2a-JMM-2
6426: PPUSH
6427: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6431: LD_EXP 15
6435: PPUSH
6436: LD_STRING D2a-Pow-2
6438: PPUSH
6439: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6443: LD_EXP 1
6447: PPUSH
6448: LD_STRING D2a-JMM-3
6450: PPUSH
6451: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6455: LD_EXP 15
6459: PPUSH
6460: LD_STRING D2a-Pow-3
6462: PPUSH
6463: CALL_OW 94
// secondPass = 2 ;
6467: LD_ADDR_EXP 20
6471: PUSH
6472: LD_INT 2
6474: ST_TO_ADDR
// end ; if dec = 2 then
6475: LD_VAR 0 4
6479: PUSH
6480: LD_INT 2
6482: EQUAL
6483: IFFALSE 6577
// begin Say ( JMM , D2-JMM-1 ) ;
6485: LD_EXP 1
6489: PPUSH
6490: LD_STRING D2-JMM-1
6492: PPUSH
6493: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6497: LD_EXP 15
6501: PPUSH
6502: LD_STRING D2-Pow-1
6504: PPUSH
6505: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6509: LD_EXP 1
6513: PPUSH
6514: LD_STRING D2b-JMM-1
6516: PPUSH
6517: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6521: LD_EXP 15
6525: PPUSH
6526: LD_STRING D2b-Pow-1
6528: PPUSH
6529: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6533: LD_EXP 1
6537: PPUSH
6538: LD_STRING D2c-JMM-1
6540: PPUSH
6541: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6545: LD_EXP 15
6549: PPUSH
6550: LD_STRING D2c-Pow-1
6552: PPUSH
6553: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6557: LD_EXP 1
6561: PPUSH
6562: LD_STRING D2c-JMM-2
6564: PPUSH
6565: CALL_OW 88
// secondPass = 2 ;
6569: LD_ADDR_EXP 20
6573: PUSH
6574: LD_INT 2
6576: ST_TO_ADDR
// end ; if dec = 3 then
6577: LD_VAR 0 4
6581: PUSH
6582: LD_INT 3
6584: EQUAL
6585: IFFALSE 6595
// secondPass = 1 ;
6587: LD_ADDR_EXP 20
6591: PUSH
6592: LD_INT 1
6594: ST_TO_ADDR
// InGameOff ;
6595: CALL_OW 9
// ruAI := 1 ;
6599: LD_ADDR_EXP 34
6603: PUSH
6604: LD_INT 1
6606: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6607: LD_INT 1
6609: PPUSH
6610: LD_INT 3
6612: PPUSH
6613: LD_INT 2
6615: PPUSH
6616: LD_INT 1
6618: PPUSH
6619: CALL_OW 80
// SaveForQuickRestart ;
6623: CALL_OW 22
// exit ;
6627: POP
6628: POP
6629: GO 6635
// end ; end ;
6631: GO 5966
6633: POP
6634: POP
// end ;
6635: PPOPN 4
6637: END
// every 1 1$0 trigger secondPass = 2 do
6638: LD_EXP 20
6642: PUSH
6643: LD_INT 2
6645: EQUAL
6646: IFFALSE 6866
6648: GO 6650
6650: DISABLE
// begin PowellSupport1 ;
6651: CALL 1985 0 0
// DialogueOn ;
6655: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6659: LD_EXP 1
6663: PPUSH
6664: LD_STRING DC1-JMM-1
6666: PPUSH
6667: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6671: LD_EXP 15
6675: PPUSH
6676: LD_STRING DC1-Pow-1
6678: PPUSH
6679: CALL_OW 94
// DialogueOff ;
6683: CALL_OW 7
// wait ( 3 3$0 ) ;
6687: LD_INT 6300
6689: PPUSH
6690: CALL_OW 67
// PowellSupport2 ;
6694: CALL 2466 0 0
// DialogueOn ;
6698: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6702: LD_EXP 1
6706: PPUSH
6707: LD_STRING DC2-JMM-1
6709: PPUSH
6710: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6714: LD_EXP 15
6718: PPUSH
6719: LD_STRING DC2-Pow-1
6721: PPUSH
6722: CALL_OW 94
// DialogueOff ;
6726: CALL_OW 7
// wait ( 3 3$00 ) ;
6730: LD_INT 6300
6732: PPUSH
6733: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6737: LD_INT 35
6739: PPUSH
6740: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and not FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
6744: LD_INT 22
6746: PUSH
6747: LD_INT 1
6749: PUSH
6750: EMPTY
6751: LIST
6752: LIST
6753: PUSH
6754: LD_INT 2
6756: PUSH
6757: LD_INT 30
6759: PUSH
6760: LD_INT 0
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: PUSH
6767: LD_INT 30
6769: PUSH
6770: LD_INT 1
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: LIST
6781: PUSH
6782: EMPTY
6783: LIST
6784: LIST
6785: PPUSH
6786: CALL_OW 69
6790: PUSH
6791: LD_INT 11
6793: PPUSH
6794: LD_INT 22
6796: PUSH
6797: LD_INT 3
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: PPUSH
6804: CALL_OW 70
6808: NOT
6809: AND
6810: IFFALSE 6737
// wait ( 0 0$10 ) ;
6812: LD_INT 350
6814: PPUSH
6815: CALL_OW 67
// Legion ;
6819: CALL 6867 0 0
// wait ( 5 5$0 ) ;
6823: LD_INT 10500
6825: PPUSH
6826: CALL_OW 67
// PowellSupport3 ;
6830: CALL 3079 0 0
// DialogueOn ;
6834: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6838: LD_EXP 15
6842: PPUSH
6843: LD_STRING DC3-Pow-1
6845: PPUSH
6846: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6850: LD_EXP 1
6854: PPUSH
6855: LD_STRING DC3-JMM-1
6857: PPUSH
6858: CALL_OW 88
// DialogueOff ;
6862: CALL_OW 7
// end ;
6866: END
// export function Legion ; var i , dec1 , dec2 , tmp , tmp2 , tmp3 , crates , oil , siberite , cr , sb , payForNeutral , payForHelp , query1 , query2 ; begin
6867: LD_INT 0
6869: PPUSH
6870: PPUSH
6871: PPUSH
6872: PPUSH
6873: PPUSH
6874: PPUSH
6875: PPUSH
6876: PPUSH
6877: PPUSH
6878: PPUSH
6879: PPUSH
6880: PPUSH
6881: PPUSH
6882: PPUSH
6883: PPUSH
6884: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6885: LD_ADDR_VAR 0 5
6889: PUSH
6890: LD_INT 22
6892: PUSH
6893: LD_INT 1
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: PUSH
6900: LD_INT 21
6902: PUSH
6903: LD_INT 3
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: PUSH
6910: LD_INT 2
6912: PUSH
6913: LD_INT 30
6915: PUSH
6916: LD_INT 0
6918: PUSH
6919: EMPTY
6920: LIST
6921: LIST
6922: PUSH
6923: LD_INT 30
6925: PUSH
6926: LD_INT 1
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: LIST
6937: PUSH
6938: EMPTY
6939: LIST
6940: LIST
6941: LIST
6942: PPUSH
6943: CALL_OW 69
6947: ST_TO_ADDR
// crates := 0 ;
6948: LD_ADDR_VAR 0 8
6952: PUSH
6953: LD_INT 0
6955: ST_TO_ADDR
// oil := 0 ;
6956: LD_ADDR_VAR 0 9
6960: PUSH
6961: LD_INT 0
6963: ST_TO_ADDR
// siberite := 0 ;
6964: LD_ADDR_VAR 0 10
6968: PUSH
6969: LD_INT 0
6971: ST_TO_ADDR
// payForNeutral := false ;
6972: LD_ADDR_VAR 0 13
6976: PUSH
6977: LD_INT 0
6979: ST_TO_ADDR
// payForHelp := false ;
6980: LD_ADDR_VAR 0 14
6984: PUSH
6985: LD_INT 0
6987: ST_TO_ADDR
// for i in tmp do
6988: LD_ADDR_VAR 0 2
6992: PUSH
6993: LD_VAR 0 5
6997: PUSH
6998: FOR_IN
6999: IFFALSE 7090
// begin crates := crates + GetResourceType ( GetBase ( i ) , 1 ) ;
7001: LD_ADDR_VAR 0 8
7005: PUSH
7006: LD_VAR 0 8
7010: PUSH
7011: LD_VAR 0 2
7015: PPUSH
7016: CALL_OW 274
7020: PPUSH
7021: LD_INT 1
7023: PPUSH
7024: CALL_OW 275
7028: PLUS
7029: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( i ) , 2 ) ;
7030: LD_ADDR_VAR 0 9
7034: PUSH
7035: LD_VAR 0 9
7039: PUSH
7040: LD_VAR 0 2
7044: PPUSH
7045: CALL_OW 274
7049: PPUSH
7050: LD_INT 2
7052: PPUSH
7053: CALL_OW 275
7057: PLUS
7058: ST_TO_ADDR
// siberite := siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
7059: LD_ADDR_VAR 0 10
7063: PUSH
7064: LD_VAR 0 10
7068: PUSH
7069: LD_VAR 0 2
7073: PPUSH
7074: CALL_OW 274
7078: PPUSH
7079: LD_INT 3
7081: PPUSH
7082: CALL_OW 275
7086: PLUS
7087: ST_TO_ADDR
// end ;
7088: GO 6998
7090: POP
7091: POP
// PrepareKurt ;
7092: CALL 4551 0 0
// if not Kurt then
7096: LD_EXP 17
7100: NOT
7101: IFFALSE 7105
// exit ;
7103: GO 9224
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7105: LD_EXP 18
7109: PPUSH
7110: LD_INT 144
7112: PPUSH
7113: LD_INT 111
7115: PPUSH
7116: CALL_OW 111
// wait ( 0 0$2 ) ;
7120: LD_INT 70
7122: PPUSH
7123: CALL_OW 67
// PlaceSeeing ( 167 , 121 , 1 , - 10 ) ;
7127: LD_INT 167
7129: PPUSH
7130: LD_INT 121
7132: PPUSH
7133: LD_INT 1
7135: PPUSH
7136: LD_INT 10
7138: NEG
7139: PPUSH
7140: CALL_OW 330
// ComExitVehicle ( Kurt ) ;
7144: LD_EXP 17
7148: PPUSH
7149: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7153: LD_EXP 17
7157: PPUSH
7158: CALL_OW 87
// wait ( 0 0$1 ) ;
7162: LD_INT 35
7164: PPUSH
7165: CALL_OW 67
// DialogueOn ;
7169: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7173: LD_INT 22
7175: PUSH
7176: LD_INT 1
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: PUSH
7183: LD_INT 26
7185: PUSH
7186: LD_INT 1
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: LD_INT 2
7195: PUSH
7196: LD_INT 25
7198: PUSH
7199: LD_INT 1
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: PUSH
7206: LD_INT 25
7208: PUSH
7209: LD_INT 2
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: PUSH
7216: LD_INT 25
7218: PUSH
7219: LD_INT 3
7221: PUSH
7222: EMPTY
7223: LIST
7224: LIST
7225: PUSH
7226: LD_INT 25
7228: PUSH
7229: LD_INT 4
7231: PUSH
7232: EMPTY
7233: LIST
7234: LIST
7235: PUSH
7236: LD_INT 25
7238: PUSH
7239: LD_INT 5
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: PUSH
7246: LD_INT 25
7248: PUSH
7249: LD_INT 8
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PUSH
7256: EMPTY
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: LIST
7263: LIST
7264: PUSH
7265: EMPTY
7266: LIST
7267: LIST
7268: LIST
7269: PPUSH
7270: CALL_OW 69
7274: PPUSH
7275: LD_STRING D3-Sol1-1
7277: PPUSH
7278: LD_STRING 
7280: PPUSH
7281: CALL 12129 0 3
// if KurtStatus then
7285: LD_EXP 19
7289: IFFALSE 7389
// begin Say ( Kurt , D3-Kurt-1 ) ;
7291: LD_EXP 17
7295: PPUSH
7296: LD_STRING D3-Kurt-1
7298: PPUSH
7299: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7303: LD_EXP 1
7307: PPUSH
7308: LD_STRING D3-JMM-1
7310: PPUSH
7311: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7315: LD_EXP 17
7319: PPUSH
7320: LD_STRING D3-Kurt-2
7322: PPUSH
7323: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7327: LD_EXP 1
7331: PPUSH
7332: LD_STRING D3-JMM-2
7334: PPUSH
7335: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7339: LD_EXP 17
7343: PPUSH
7344: LD_STRING D3-Kurt-4
7346: PPUSH
7347: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7351: LD_EXP 1
7355: PPUSH
7356: LD_STRING D3-JMM-4
7358: PPUSH
7359: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7363: LD_EXP 17
7367: PPUSH
7368: LD_STRING D3-Kurt-5
7370: PPUSH
7371: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7375: LD_EXP 17
7379: PPUSH
7380: LD_STRING D3-Kurt-5a
7382: PPUSH
7383: CALL_OW 88
// end else
7387: GO 7485
// begin Say ( Kurt , D3-Kurt-1 ) ;
7389: LD_EXP 17
7393: PPUSH
7394: LD_STRING D3-Kurt-1
7396: PPUSH
7397: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7401: LD_EXP 1
7405: PPUSH
7406: LD_STRING D3-JMM-1
7408: PPUSH
7409: CALL_OW 88
// Say ( Kurt , D3-Kurt-3 ) ;
7413: LD_EXP 17
7417: PPUSH
7418: LD_STRING D3-Kurt-3
7420: PPUSH
7421: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7425: LD_EXP 1
7429: PPUSH
7430: LD_STRING D3-JMM-3
7432: PPUSH
7433: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7437: LD_EXP 17
7441: PPUSH
7442: LD_STRING D3-Kurt-4
7444: PPUSH
7445: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7449: LD_EXP 1
7453: PPUSH
7454: LD_STRING D3-JMM-4
7456: PPUSH
7457: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7461: LD_EXP 17
7465: PPUSH
7466: LD_STRING D3-Kurt-5
7468: PPUSH
7469: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
7473: LD_EXP 17
7477: PPUSH
7478: LD_STRING D3-Kurt-5b
7480: PPUSH
7481: CALL_OW 88
// end ; if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
7485: LD_VAR 0 8
7489: PUSH
7490: LD_INT 120
7492: PUSH
7493: LD_INT 60
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: PUSH
7500: LD_EXP 19
7504: PUSH
7505: LD_INT 1
7507: PLUS
7508: ARRAY
7509: GREATEREQUAL
7510: PUSH
7511: LD_VAR 0 10
7515: PUSH
7516: LD_INT 120
7518: PUSH
7519: LD_INT 60
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: PUSH
7526: LD_EXP 19
7530: PUSH
7531: LD_INT 1
7533: PLUS
7534: ARRAY
7535: GREATEREQUAL
7536: AND
7537: IFFALSE 7589
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
7539: LD_ADDR_VAR 0 3
7543: PUSH
7544: LD_STRING Q2
7546: PUSH
7547: LD_STRING Q2K
7549: PUSH
7550: EMPTY
7551: LIST
7552: LIST
7553: PUSH
7554: LD_EXP 19
7558: PUSH
7559: LD_INT 1
7561: PLUS
7562: ARRAY
7563: PPUSH
7564: LD_INT 1
7566: PUSH
7567: LD_INT 2
7569: PUSH
7570: LD_INT 3
7572: PUSH
7573: LD_INT 4
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: PPUSH
7582: CALL_OW 98
7586: ST_TO_ADDR
7587: GO 7633
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 3 , 4 ] ) ;
7589: LD_ADDR_VAR 0 3
7593: PUSH
7594: LD_STRING Q2
7596: PUSH
7597: LD_STRING Q2K
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: PUSH
7604: LD_EXP 19
7608: PUSH
7609: LD_INT 1
7611: PLUS
7612: ARRAY
7613: PPUSH
7614: LD_INT 1
7616: PUSH
7617: LD_INT 3
7619: PUSH
7620: LD_INT 4
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: LIST
7627: PPUSH
7628: CALL_OW 98
7632: ST_TO_ADDR
// if dec1 = 1 then
7633: LD_VAR 0 3
7637: PUSH
7638: LD_INT 1
7640: EQUAL
7641: IFFALSE 7675
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7643: LD_EXP 1
7647: PPUSH
7648: LD_STRING D3Ka-JMM-1
7650: PPUSH
7651: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7655: LD_EXP 17
7659: PPUSH
7660: LD_STRING D3Ka-Kurt-1
7662: PPUSH
7663: CALL_OW 88
// warWithLegion = 1 ;
7667: LD_ADDR_EXP 23
7671: PUSH
7672: LD_INT 1
7674: ST_TO_ADDR
// end ; if dec1 = 2 then
7675: LD_VAR 0 3
7679: PUSH
7680: LD_INT 2
7682: EQUAL
7683: IFFALSE 7767
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7685: LD_EXP 1
7689: PPUSH
7690: LD_STRING D3Kb-JMM-1
7692: PPUSH
7693: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7697: LD_EXP 17
7701: PPUSH
7702: LD_STRING D3Kb-Kurt-1
7704: PPUSH
7705: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7709: LD_ADDR_VAR 0 11
7713: PUSH
7714: LD_INT 120
7716: PUSH
7717: LD_INT 60
7719: PUSH
7720: EMPTY
7721: LIST
7722: LIST
7723: PUSH
7724: LD_EXP 19
7728: PUSH
7729: LD_INT 1
7731: PLUS
7732: ARRAY
7733: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7734: LD_ADDR_VAR 0 12
7738: PUSH
7739: LD_INT 120
7741: PUSH
7742: LD_INT 60
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: PUSH
7749: LD_EXP 19
7753: PUSH
7754: LD_INT 1
7756: PLUS
7757: ARRAY
7758: ST_TO_ADDR
// payForNeutral := true ;
7759: LD_ADDR_VAR 0 13
7763: PUSH
7764: LD_INT 1
7766: ST_TO_ADDR
// end ; if dec1 = 3 then
7767: LD_VAR 0 3
7771: PUSH
7772: LD_INT 3
7774: EQUAL
7775: IFFALSE 8010
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7777: LD_EXP 1
7781: PPUSH
7782: LD_STRING D3Kc1-JMM-1
7784: PPUSH
7785: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7789: LD_EXP 17
7793: PPUSH
7794: LD_STRING D3Kc1-Kurt-1
7796: PPUSH
7797: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7801: LD_EXP 1
7805: PPUSH
7806: LD_STRING D3Kc1-JMM-2
7808: PPUSH
7809: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7813: LD_EXP 17
7817: PPUSH
7818: LD_STRING D3Kc1-Kurt-2
7820: PPUSH
7821: CALL_OW 88
// askSiberite = 1 ;
7825: LD_ADDR_EXP 25
7829: PUSH
7830: LD_INT 1
7832: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7833: LD_ADDR_VAR 0 4
7837: PUSH
7838: LD_STRING Q2b
7840: PPUSH
7841: LD_INT 1
7843: PUSH
7844: LD_INT 2
7846: PUSH
7847: LD_INT 3
7849: PUSH
7850: EMPTY
7851: LIST
7852: LIST
7853: LIST
7854: PPUSH
7855: CALL_OW 98
7859: ST_TO_ADDR
// if dec2 = 1 then
7860: LD_VAR 0 4
7864: PUSH
7865: LD_INT 1
7867: EQUAL
7868: IFFALSE 7902
// begin Say ( JMM , D4a-JMM-1 ) ;
7870: LD_EXP 1
7874: PPUSH
7875: LD_STRING D4a-JMM-1
7877: PPUSH
7878: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7882: LD_EXP 17
7886: PPUSH
7887: LD_STRING D4b-Kurt-1
7889: PPUSH
7890: CALL_OW 88
// warWithLegion = 1 ;
7894: LD_ADDR_EXP 23
7898: PUSH
7899: LD_INT 1
7901: ST_TO_ADDR
// end ; if dec2 = 2 then
7902: LD_VAR 0 4
7906: PUSH
7907: LD_INT 2
7909: EQUAL
7910: IFFALSE 7944
// begin Say ( JMM , D4b-JMM-1 ) ;
7912: LD_EXP 1
7916: PPUSH
7917: LD_STRING D4b-JMM-1
7919: PPUSH
7920: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7924: LD_EXP 17
7928: PPUSH
7929: LD_STRING D4b-Kurt-1
7931: PPUSH
7932: CALL_OW 88
// warWithLegion = 1 ;
7936: LD_ADDR_EXP 23
7940: PUSH
7941: LD_INT 1
7943: ST_TO_ADDR
// end ; if dec2 = 3 then
7944: LD_VAR 0 4
7948: PUSH
7949: LD_INT 3
7951: EQUAL
7952: IFFALSE 8010
// begin Say ( JMM , D4c-JMM-1 ) ;
7954: LD_EXP 1
7958: PPUSH
7959: LD_STRING D4c-JMM-1
7961: PPUSH
7962: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7966: LD_EXP 17
7970: PPUSH
7971: LD_STRING D4c-Kurt-1
7973: PPUSH
7974: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
7978: LD_EXP 1
7982: PPUSH
7983: LD_STRING D4c-JMM-2
7985: PPUSH
7986: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
7990: LD_EXP 17
7994: PPUSH
7995: LD_STRING D4c-Kurt-2
7997: PPUSH
7998: CALL_OW 88
// fakeInfo = 1 ;
8002: LD_ADDR_EXP 24
8006: PUSH
8007: LD_INT 1
8009: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
8010: LD_VAR 0 3
8014: PUSH
8015: LD_INT 4
8017: EQUAL
8018: IFFALSE 9080
// begin Say ( JMM , D3Kd-JMM-1 ) ;
8020: LD_EXP 1
8024: PPUSH
8025: LD_STRING D3Kd-JMM-1
8027: PPUSH
8028: CALL_OW 88
// if crates >= [ 200 , 120 ] [ KurtStatus + 1 ] and siberite >= [ 200 , 120 ] [ KurtStatus + 1 ] then
8032: LD_VAR 0 8
8036: PUSH
8037: LD_INT 200
8039: PUSH
8040: LD_INT 120
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: PUSH
8047: LD_EXP 19
8051: PUSH
8052: LD_INT 1
8054: PLUS
8055: ARRAY
8056: GREATEREQUAL
8057: PUSH
8058: LD_VAR 0 10
8062: PUSH
8063: LD_INT 200
8065: PUSH
8066: LD_INT 120
8068: PUSH
8069: EMPTY
8070: LIST
8071: LIST
8072: PUSH
8073: LD_EXP 19
8077: PUSH
8078: LD_INT 1
8080: PLUS
8081: ARRAY
8082: GREATEREQUAL
8083: AND
8084: IFFALSE 8136
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8086: LD_ADDR_VAR 0 4
8090: PUSH
8091: LD_STRING Q2a
8093: PUSH
8094: LD_STRING Q2aK
8096: PUSH
8097: EMPTY
8098: LIST
8099: LIST
8100: PUSH
8101: LD_EXP 19
8105: PUSH
8106: LD_INT 1
8108: PLUS
8109: ARRAY
8110: PPUSH
8111: LD_INT 1
8113: PUSH
8114: LD_INT 2
8116: PUSH
8117: LD_INT 3
8119: PUSH
8120: LD_INT 4
8122: PUSH
8123: EMPTY
8124: LIST
8125: LIST
8126: LIST
8127: LIST
8128: PPUSH
8129: CALL_OW 98
8133: ST_TO_ADDR
8134: GO 8300
// if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
8136: LD_VAR 0 8
8140: PUSH
8141: LD_INT 120
8143: PUSH
8144: LD_INT 60
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: PUSH
8151: LD_EXP 19
8155: PUSH
8156: LD_INT 1
8158: PLUS
8159: ARRAY
8160: GREATEREQUAL
8161: PUSH
8162: LD_VAR 0 10
8166: PUSH
8167: LD_INT 120
8169: PUSH
8170: LD_INT 60
8172: PUSH
8173: EMPTY
8174: LIST
8175: LIST
8176: PUSH
8177: LD_EXP 19
8181: PUSH
8182: LD_INT 1
8184: PLUS
8185: ARRAY
8186: GREATEREQUAL
8187: AND
8188: IFFALSE 8236
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 4 ] ) else
8190: LD_ADDR_VAR 0 4
8194: PUSH
8195: LD_STRING Q2a
8197: PUSH
8198: LD_STRING Q2aK
8200: PUSH
8201: EMPTY
8202: LIST
8203: LIST
8204: PUSH
8205: LD_EXP 19
8209: PUSH
8210: LD_INT 1
8212: PLUS
8213: ARRAY
8214: PPUSH
8215: LD_INT 1
8217: PUSH
8218: LD_INT 2
8220: PUSH
8221: LD_INT 4
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: LIST
8228: PPUSH
8229: CALL_OW 98
8233: ST_TO_ADDR
8234: GO 8300
// begin Query ( [ Q2d , Q2dK ] [ KurtStatus + 1 ] ) ;
8236: LD_STRING Q2d
8238: PUSH
8239: LD_STRING Q2dK
8241: PUSH
8242: EMPTY
8243: LIST
8244: LIST
8245: PUSH
8246: LD_EXP 19
8250: PUSH
8251: LD_INT 1
8253: PLUS
8254: ARRAY
8255: PPUSH
8256: CALL_OW 97
// dec2 := 0 ;
8260: LD_ADDR_VAR 0 4
8264: PUSH
8265: LD_INT 0
8267: ST_TO_ADDR
// Say ( JMM , D3Kc1-JMM-1 ) ;
8268: LD_EXP 1
8272: PPUSH
8273: LD_STRING D3Kc1-JMM-1
8275: PPUSH
8276: CALL_OW 88
// Say ( Kurt , D3Kc2-Kurt-1 ) ;
8280: LD_EXP 17
8284: PPUSH
8285: LD_STRING D3Kc2-Kurt-1
8287: PPUSH
8288: CALL_OW 88
// warWithLegion := 1 ;
8292: LD_ADDR_EXP 23
8296: PUSH
8297: LD_INT 1
8299: ST_TO_ADDR
// end ; if dec2 = 1 then
8300: LD_VAR 0 4
8304: PUSH
8305: LD_INT 1
8307: EQUAL
8308: IFFALSE 8342
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8310: LD_EXP 1
8314: PPUSH
8315: LD_STRING D5Ka-JMM-1
8317: PPUSH
8318: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
8322: LD_EXP 17
8326: PPUSH
8327: LD_STRING D5Ka-Kurt-1
8329: PPUSH
8330: CALL_OW 88
// warWithLegion = 1 ;
8334: LD_ADDR_EXP 23
8338: PUSH
8339: LD_INT 1
8341: ST_TO_ADDR
// end ; if dec2 = 2 then
8342: LD_VAR 0 4
8346: PUSH
8347: LD_INT 2
8349: EQUAL
8350: IFFALSE 8434
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8352: LD_EXP 1
8356: PPUSH
8357: LD_STRING D3Kb-JMM-1
8359: PPUSH
8360: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8364: LD_EXP 17
8368: PPUSH
8369: LD_STRING D3Kb-Kurt-1
8371: PPUSH
8372: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8376: LD_ADDR_VAR 0 11
8380: PUSH
8381: LD_INT 120
8383: PUSH
8384: LD_INT 60
8386: PUSH
8387: EMPTY
8388: LIST
8389: LIST
8390: PUSH
8391: LD_EXP 19
8395: PUSH
8396: LD_INT 1
8398: PLUS
8399: ARRAY
8400: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8401: LD_ADDR_VAR 0 12
8405: PUSH
8406: LD_INT 120
8408: PUSH
8409: LD_INT 60
8411: PUSH
8412: EMPTY
8413: LIST
8414: LIST
8415: PUSH
8416: LD_EXP 19
8420: PUSH
8421: LD_INT 1
8423: PLUS
8424: ARRAY
8425: ST_TO_ADDR
// payForNeutral := true ;
8426: LD_ADDR_VAR 0 13
8430: PUSH
8431: LD_INT 1
8433: ST_TO_ADDR
// end ; if dec2 = 3 then
8434: LD_VAR 0 4
8438: PUSH
8439: LD_INT 3
8441: EQUAL
8442: IFFALSE 8526
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8444: LD_EXP 1
8448: PPUSH
8449: LD_STRING D3Ke-JMM-1
8451: PPUSH
8452: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
8456: LD_EXP 17
8460: PPUSH
8461: LD_STRING D3Ke-Kurt-1
8463: PPUSH
8464: CALL_OW 88
// cr := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8468: LD_ADDR_VAR 0 11
8472: PUSH
8473: LD_INT 200
8475: PUSH
8476: LD_INT 120
8478: PUSH
8479: EMPTY
8480: LIST
8481: LIST
8482: PUSH
8483: LD_EXP 19
8487: PUSH
8488: LD_INT 1
8490: PLUS
8491: ARRAY
8492: ST_TO_ADDR
// sb := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8493: LD_ADDR_VAR 0 12
8497: PUSH
8498: LD_INT 200
8500: PUSH
8501: LD_INT 120
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: PUSH
8508: LD_EXP 19
8512: PUSH
8513: LD_INT 1
8515: PLUS
8516: ARRAY
8517: ST_TO_ADDR
// payForHelp := true ;
8518: LD_ADDR_VAR 0 14
8522: PUSH
8523: LD_INT 1
8525: ST_TO_ADDR
// end ; if dec2 = 4 then
8526: LD_VAR 0 4
8530: PUSH
8531: LD_INT 4
8533: EQUAL
8534: IFFALSE 8769
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8536: LD_EXP 1
8540: PPUSH
8541: LD_STRING D3Kc1-JMM-1
8543: PPUSH
8544: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8548: LD_EXP 17
8552: PPUSH
8553: LD_STRING D3Kc1-Kurt-1
8555: PPUSH
8556: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8560: LD_EXP 1
8564: PPUSH
8565: LD_STRING D3Kc1-JMM-2
8567: PPUSH
8568: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8572: LD_EXP 17
8576: PPUSH
8577: LD_STRING D3Kc1-Kurt-2
8579: PPUSH
8580: CALL_OW 88
// askSiberite = 1 ;
8584: LD_ADDR_EXP 25
8588: PUSH
8589: LD_INT 1
8591: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8592: LD_ADDR_VAR 0 4
8596: PUSH
8597: LD_STRING Q2b
8599: PPUSH
8600: LD_INT 1
8602: PUSH
8603: LD_INT 2
8605: PUSH
8606: LD_INT 3
8608: PUSH
8609: EMPTY
8610: LIST
8611: LIST
8612: LIST
8613: PPUSH
8614: CALL_OW 98
8618: ST_TO_ADDR
// if dec2 = 1 then
8619: LD_VAR 0 4
8623: PUSH
8624: LD_INT 1
8626: EQUAL
8627: IFFALSE 8661
// begin Say ( JMM , D4a-JMM-1 ) ;
8629: LD_EXP 1
8633: PPUSH
8634: LD_STRING D4a-JMM-1
8636: PPUSH
8637: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8641: LD_EXP 17
8645: PPUSH
8646: LD_STRING D4b-Kurt-1
8648: PPUSH
8649: CALL_OW 88
// warWithLegion = 1 ;
8653: LD_ADDR_EXP 23
8657: PUSH
8658: LD_INT 1
8660: ST_TO_ADDR
// end ; if dec2 = 2 then
8661: LD_VAR 0 4
8665: PUSH
8666: LD_INT 2
8668: EQUAL
8669: IFFALSE 8703
// begin Say ( JMM , D4b-JMM-1 ) ;
8671: LD_EXP 1
8675: PPUSH
8676: LD_STRING D4b-JMM-1
8678: PPUSH
8679: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8683: LD_EXP 17
8687: PPUSH
8688: LD_STRING D4b-Kurt-1
8690: PPUSH
8691: CALL_OW 88
// warWithLegion = 1 ;
8695: LD_ADDR_EXP 23
8699: PUSH
8700: LD_INT 1
8702: ST_TO_ADDR
// end ; if dec2 = 3 then
8703: LD_VAR 0 4
8707: PUSH
8708: LD_INT 3
8710: EQUAL
8711: IFFALSE 8769
// begin Say ( JMM , D4c-JMM-1 ) ;
8713: LD_EXP 1
8717: PPUSH
8718: LD_STRING D4c-JMM-1
8720: PPUSH
8721: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8725: LD_EXP 17
8729: PPUSH
8730: LD_STRING D4c-Kurt-1
8732: PPUSH
8733: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8737: LD_EXP 1
8741: PPUSH
8742: LD_STRING D4c-JMM-2
8744: PPUSH
8745: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8749: LD_EXP 17
8753: PPUSH
8754: LD_STRING D4c-Kurt-2
8756: PPUSH
8757: CALL_OW 88
// fakeInfo = 1 ;
8761: LD_ADDR_EXP 24
8765: PUSH
8766: LD_INT 1
8768: ST_TO_ADDR
// end ; end ; if payForNeutral or payForHelp then
8769: LD_VAR 0 13
8773: PUSH
8774: LD_VAR 0 14
8778: OR
8779: IFFALSE 9080
// begin for i in tmp do
8781: LD_ADDR_VAR 0 2
8785: PUSH
8786: LD_VAR 0 5
8790: PUSH
8791: FOR_IN
8792: IFFALSE 9078
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
8794: LD_ADDR_VAR 0 6
8798: PUSH
8799: LD_VAR 0 2
8803: PPUSH
8804: CALL_OW 274
8808: PPUSH
8809: LD_INT 1
8811: PPUSH
8812: CALL_OW 275
8816: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
8817: LD_ADDR_VAR 0 7
8821: PUSH
8822: LD_VAR 0 2
8826: PPUSH
8827: CALL_OW 274
8831: PPUSH
8832: LD_INT 3
8834: PPUSH
8835: CALL_OW 275
8839: ST_TO_ADDR
// if cr then
8840: LD_VAR 0 11
8844: IFFALSE 8958
// begin if tmp2 and tmp2 < cr then
8846: LD_VAR 0 6
8850: PUSH
8851: LD_VAR 0 6
8855: PUSH
8856: LD_VAR 0 11
8860: LESS
8861: AND
8862: IFFALSE 8910
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
8864: LD_VAR 0 2
8868: PPUSH
8869: CALL_OW 274
8873: PPUSH
8874: LD_INT 1
8876: PPUSH
8877: LD_VAR 0 11
8881: PUSH
8882: LD_VAR 0 6
8886: MINUS
8887: PPUSH
8888: CALL_OW 277
// cr := cr - tmp2 ;
8892: LD_ADDR_VAR 0 11
8896: PUSH
8897: LD_VAR 0 11
8901: PUSH
8902: LD_VAR 0 6
8906: MINUS
8907: ST_TO_ADDR
// end else
8908: GO 8958
// if tmp2 > cr then
8910: LD_VAR 0 6
8914: PUSH
8915: LD_VAR 0 11
8919: GREATER
8920: IFFALSE 8958
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
8922: LD_VAR 0 2
8926: PPUSH
8927: CALL_OW 274
8931: PPUSH
8932: LD_INT 1
8934: PPUSH
8935: LD_VAR 0 6
8939: PUSH
8940: LD_VAR 0 11
8944: MINUS
8945: PPUSH
8946: CALL_OW 277
// cr := 0 ;
8950: LD_ADDR_VAR 0 11
8954: PUSH
8955: LD_INT 0
8957: ST_TO_ADDR
// end ; end ; if sb then
8958: LD_VAR 0 12
8962: IFFALSE 9076
// begin if tmp3 and tmp3 < sb then
8964: LD_VAR 0 7
8968: PUSH
8969: LD_VAR 0 7
8973: PUSH
8974: LD_VAR 0 12
8978: LESS
8979: AND
8980: IFFALSE 9028
// begin SetResourceType ( GetBase ( i ) , 3 , sb - tmp3 ) ;
8982: LD_VAR 0 2
8986: PPUSH
8987: CALL_OW 274
8991: PPUSH
8992: LD_INT 3
8994: PPUSH
8995: LD_VAR 0 12
8999: PUSH
9000: LD_VAR 0 7
9004: MINUS
9005: PPUSH
9006: CALL_OW 277
// sb := sb - tmp3 ;
9010: LD_ADDR_VAR 0 12
9014: PUSH
9015: LD_VAR 0 12
9019: PUSH
9020: LD_VAR 0 7
9024: MINUS
9025: ST_TO_ADDR
// end else
9026: GO 9076
// if tmp3 > sb then
9028: LD_VAR 0 7
9032: PUSH
9033: LD_VAR 0 12
9037: GREATER
9038: IFFALSE 9076
// begin SetResourceType ( GetBase ( i ) , 3 , tmp3 - sb ) ;
9040: LD_VAR 0 2
9044: PPUSH
9045: CALL_OW 274
9049: PPUSH
9050: LD_INT 3
9052: PPUSH
9053: LD_VAR 0 7
9057: PUSH
9058: LD_VAR 0 12
9062: MINUS
9063: PPUSH
9064: CALL_OW 277
// sb := 0 ;
9068: LD_ADDR_VAR 0 12
9072: PUSH
9073: LD_INT 0
9075: ST_TO_ADDR
// end ; end ; end ;
9076: GO 8791
9078: POP
9079: POP
// end ; end ; DialogueOff ;
9080: CALL_OW 7
// RemoveSeeing ( 167 , 121 , 1 ) ;
9084: LD_INT 167
9086: PPUSH
9087: LD_INT 121
9089: PPUSH
9090: LD_INT 1
9092: PPUSH
9093: CALL_OW 331
// ComEnterUnit ( Kurt , KurtVeh ) ;
9097: LD_EXP 17
9101: PPUSH
9102: LD_EXP 18
9106: PPUSH
9107: CALL_OW 120
// wait ( 0 0$1 ) ;
9111: LD_INT 35
9113: PPUSH
9114: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9118: LD_EXP 18
9122: PPUSH
9123: LD_INT 4
9125: PPUSH
9126: CALL_OW 113
// wait ( 0 0$3 ) ;
9130: LD_INT 105
9132: PPUSH
9133: CALL_OW 67
// RemoveUnit ( Kurt ) ;
9137: LD_EXP 17
9141: PPUSH
9142: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9146: LD_EXP 18
9150: PPUSH
9151: CALL_OW 64
// wait ( 0 0$3 ) ;
9155: LD_INT 105
9157: PPUSH
9158: CALL_OW 67
// if payForHelp then
9162: LD_VAR 0 14
9166: IFFALSE 9224
// begin HiddenCamera ( 36 , 57 , 1 ) ;
9168: LD_INT 36
9170: PPUSH
9171: LD_INT 57
9173: PPUSH
9174: LD_INT 1
9176: PPUSH
9177: CALL_OW 244
// HiddenCamera ( 51 , 63 , 1 ) ;
9181: LD_INT 51
9183: PPUSH
9184: LD_INT 63
9186: PPUSH
9187: LD_INT 1
9189: PPUSH
9190: CALL_OW 244
// HiddenCamera ( 93 , 65 , 1 ) ;
9194: LD_INT 93
9196: PPUSH
9197: LD_INT 65
9199: PPUSH
9200: LD_INT 1
9202: PPUSH
9203: CALL_OW 244
// HiddenCamera ( 42 , 12 , 1 ) ;
9207: LD_INT 42
9209: PPUSH
9210: LD_INT 12
9212: PPUSH
9213: LD_INT 1
9215: PPUSH
9216: CALL_OW 244
// PrepareLegionForPlayer ;
9220: CALL 4754 0 0
// end ; end ;
9224: LD_VAR 0 1
9228: RET
// every 0 0$10 trigger warWithLegion = 1 do
9229: LD_EXP 23
9233: PUSH
9234: LD_INT 1
9236: EQUAL
9237: IFFALSE 9253
9239: GO 9241
9241: DISABLE
// begin wait ( 0 0$30 ) ;
9242: LD_INT 1050
9244: PPUSH
9245: CALL_OW 67
// PrepareAttackLegion ;
9249: CALL 5395 0 0
// end ;
9253: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do var i ;
9254: LD_INT 120
9256: PUSH
9257: LD_INT 17
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: PUSH
9264: LD_INT 52
9266: PUSH
9267: EMPTY
9268: LIST
9269: PUSH
9270: EMPTY
9271: LIST
9272: LIST
9273: PPUSH
9274: CALL_OW 69
9278: IFFALSE 9423
9280: GO 9282
9282: DISABLE
9283: LD_INT 0
9285: PPUSH
// begin enable ;
9286: ENABLE
// for i in FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do
9287: LD_ADDR_VAR 0 1
9291: PUSH
9292: LD_INT 120
9294: PUSH
9295: LD_INT 17
9297: PUSH
9298: EMPTY
9299: LIST
9300: LIST
9301: PUSH
9302: LD_INT 52
9304: PUSH
9305: EMPTY
9306: LIST
9307: PUSH
9308: EMPTY
9309: LIST
9310: LIST
9311: PPUSH
9312: CALL_OW 69
9316: PUSH
9317: FOR_IN
9318: IFFALSE 9421
// begin if GetMultiCargo ( i ) [ 4 ] = 0 and GetSide ( i ) = 1 then
9320: LD_VAR 0 1
9324: PPUSH
9325: CALL 79798 0 1
9329: PUSH
9330: LD_INT 4
9332: ARRAY
9333: PUSH
9334: LD_INT 0
9336: EQUAL
9337: PUSH
9338: LD_VAR 0 1
9342: PPUSH
9343: CALL_OW 255
9347: PUSH
9348: LD_INT 1
9350: EQUAL
9351: AND
9352: IFFALSE 9366
// SetSide ( i , 4 ) ;
9354: LD_VAR 0 1
9358: PPUSH
9359: LD_INT 4
9361: PPUSH
9362: CALL_OW 235
// if GetSide ( i ) = 4 then
9366: LD_VAR 0 1
9370: PPUSH
9371: CALL_OW 255
9375: PUSH
9376: LD_INT 4
9378: EQUAL
9379: IFFALSE 9419
// if not IsInArea ( i , PlayerSpawn ) then
9381: LD_VAR 0 1
9385: PPUSH
9386: LD_INT 4
9388: PPUSH
9389: CALL_OW 308
9393: NOT
9394: IFFALSE 9410
// ComMoveToArea ( i , PlayerSpawn ) else
9396: LD_VAR 0 1
9400: PPUSH
9401: LD_INT 4
9403: PPUSH
9404: CALL_OW 113
9408: GO 9419
// RemoveUnit ( i ) ;
9410: LD_VAR 0 1
9414: PPUSH
9415: CALL_OW 64
// end ;
9419: GO 9317
9421: POP
9422: POP
// end ;
9423: PPOPN 1
9425: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
9426: LD_EXP 20
9430: PUSH
9431: LD_INT 1
9433: EQUAL
9434: IFFALSE 9873
9436: GO 9438
9438: DISABLE
9439: LD_INT 0
9441: PPUSH
9442: PPUSH
9443: PPUSH
// begin enable ;
9444: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9445: LD_ADDR_VAR 0 2
9449: PUSH
9450: LD_INT 12
9452: PPUSH
9453: LD_INT 22
9455: PUSH
9456: LD_INT 3
9458: PUSH
9459: EMPTY
9460: LIST
9461: LIST
9462: PUSH
9463: LD_INT 21
9465: PUSH
9466: LD_INT 2
9468: PUSH
9469: EMPTY
9470: LIST
9471: LIST
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: PPUSH
9477: CALL_OW 70
9481: ST_TO_ADDR
// for i in enemyVehs do
9482: LD_ADDR_VAR 0 1
9486: PUSH
9487: LD_VAR 0 2
9491: PUSH
9492: FOR_IN
9493: IFFALSE 9871
// begin if See ( 1 , i ) then
9495: LD_INT 1
9497: PPUSH
9498: LD_VAR 0 1
9502: PPUSH
9503: CALL_OW 292
9507: IFFALSE 9869
// begin disable ;
9509: DISABLE
// DialogueOn ;
9510: CALL_OW 6
// CenterNowOnUnits ( i ) ;
9514: LD_VAR 0 1
9518: PPUSH
9519: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
9523: LD_INT 22
9525: PUSH
9526: LD_INT 1
9528: PUSH
9529: EMPTY
9530: LIST
9531: LIST
9532: PUSH
9533: LD_INT 26
9535: PUSH
9536: LD_INT 1
9538: PUSH
9539: EMPTY
9540: LIST
9541: LIST
9542: PUSH
9543: LD_INT 2
9545: PUSH
9546: LD_INT 25
9548: PUSH
9549: LD_INT 1
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: PUSH
9556: LD_INT 25
9558: PUSH
9559: LD_INT 2
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: PUSH
9566: LD_INT 25
9568: PUSH
9569: LD_INT 3
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: PUSH
9576: LD_INT 25
9578: PUSH
9579: LD_INT 4
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PUSH
9586: LD_INT 25
9588: PUSH
9589: LD_INT 5
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: PUSH
9596: LD_INT 25
9598: PUSH
9599: LD_INT 8
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: LIST
9619: PPUSH
9620: CALL_OW 69
9624: PPUSH
9625: LD_STRING DT1-Sol1-1
9627: PPUSH
9628: LD_STRING DT1-FSol1-1
9630: PPUSH
9631: CALL 12129 0 3
// dec = ShowQuery2 ;
9635: LD_ADDR_VAR 0 3
9639: PUSH
9640: CALL 12613 0 0
9644: ST_TO_ADDR
// if dec = 1 then
9645: LD_VAR 0 3
9649: PUSH
9650: LD_INT 1
9652: EQUAL
9653: IFFALSE 9759
// begin Say ( JMM , D2-JMM-1 ) ;
9655: LD_EXP 1
9659: PPUSH
9660: LD_STRING D2-JMM-1
9662: PPUSH
9663: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9667: LD_EXP 15
9671: PPUSH
9672: LD_STRING D2-Pow-1
9674: PPUSH
9675: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
9679: LD_EXP 1
9683: PPUSH
9684: LD_STRING D2a-JMM-1
9686: PPUSH
9687: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
9691: LD_EXP 15
9695: PPUSH
9696: LD_STRING D2a-Pow-1
9698: PPUSH
9699: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
9703: LD_EXP 1
9707: PPUSH
9708: LD_STRING D2a-JMM-2
9710: PPUSH
9711: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
9715: LD_EXP 15
9719: PPUSH
9720: LD_STRING D2a-Pow-2
9722: PPUSH
9723: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
9727: LD_EXP 1
9731: PPUSH
9732: LD_STRING D2a-JMM-3
9734: PPUSH
9735: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
9739: LD_EXP 15
9743: PPUSH
9744: LD_STRING D2a-Pow-3
9746: PPUSH
9747: CALL_OW 94
// secondPass = 2 ;
9751: LD_ADDR_EXP 20
9755: PUSH
9756: LD_INT 2
9758: ST_TO_ADDR
// end ; if dec = 2 then
9759: LD_VAR 0 3
9763: PUSH
9764: LD_INT 2
9766: EQUAL
9767: IFFALSE 9861
// begin Say ( JMM , D2-JMM-1 ) ;
9769: LD_EXP 1
9773: PPUSH
9774: LD_STRING D2-JMM-1
9776: PPUSH
9777: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9781: LD_EXP 15
9785: PPUSH
9786: LD_STRING D2-Pow-1
9788: PPUSH
9789: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
9793: LD_EXP 1
9797: PPUSH
9798: LD_STRING D2b-JMM-1
9800: PPUSH
9801: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
9805: LD_EXP 15
9809: PPUSH
9810: LD_STRING D2b-Pow-1
9812: PPUSH
9813: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
9817: LD_EXP 1
9821: PPUSH
9822: LD_STRING D2c-JMM-1
9824: PPUSH
9825: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
9829: LD_EXP 15
9833: PPUSH
9834: LD_STRING D2c-Pow-1
9836: PPUSH
9837: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
9841: LD_EXP 1
9845: PPUSH
9846: LD_STRING D2c-JMM-2
9848: PPUSH
9849: CALL_OW 88
// secondPass = 2 ;
9853: LD_ADDR_EXP 20
9857: PUSH
9858: LD_INT 2
9860: ST_TO_ADDR
// end ; DialogueOff ;
9861: CALL_OW 7
// exit ;
9865: POP
9866: POP
9867: GO 9873
// end ; end ;
9869: GO 9492
9871: POP
9872: POP
// end ;
9873: PPOPN 3
9875: END
// every 0 0$1 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) do var vehicles ;
9876: LD_EXP 21
9880: PUSH
9881: LD_INT 1
9883: EQUAL
9884: PUSH
9885: LD_INT 11
9887: PPUSH
9888: LD_INT 22
9890: PUSH
9891: LD_INT 3
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: PPUSH
9898: CALL_OW 70
9902: AND
9903: IFFALSE 10384
9905: GO 9907
9907: DISABLE
9908: LD_INT 0
9910: PPUSH
// begin vehicles := FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
9911: LD_ADDR_VAR 0 1
9915: PUSH
9916: LD_INT 11
9918: PPUSH
9919: LD_INT 22
9921: PUSH
9922: LD_INT 3
9924: PUSH
9925: EMPTY
9926: LIST
9927: LIST
9928: PPUSH
9929: CALL_OW 70
9933: ST_TO_ADDR
// if not vehicles then
9934: LD_VAR 0 1
9938: NOT
9939: IFFALSE 9943
// exit ;
9941: GO 10384
// repeat wait ( 0 0$1 ) ;
9943: LD_INT 35
9945: PPUSH
9946: CALL_OW 67
// until UnitFilter ( vehicles , [ f_see , 1 ] ) ;
9950: LD_VAR 0 1
9954: PPUSH
9955: LD_INT 101
9957: PUSH
9958: LD_INT 1
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: PPUSH
9965: CALL_OW 72
9969: IFFALSE 9943
// CenterNowOnUnits ( UnitFilter ( vehicles , [ f_see , 1 ] ) [ 1 ] ) ;
9971: LD_VAR 0 1
9975: PPUSH
9976: LD_INT 101
9978: PUSH
9979: LD_INT 1
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: PPUSH
9986: CALL_OW 72
9990: PUSH
9991: LD_INT 1
9993: ARRAY
9994: PPUSH
9995: CALL_OW 87
// DialogueOn ;
9999: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10003: LD_INT 22
10005: PUSH
10006: LD_INT 1
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: PUSH
10013: LD_INT 26
10015: PUSH
10016: LD_INT 1
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: PUSH
10023: LD_INT 23
10025: PUSH
10026: LD_INT 1
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PUSH
10033: LD_INT 2
10035: PUSH
10036: LD_INT 25
10038: PUSH
10039: LD_INT 1
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: PUSH
10046: LD_INT 25
10048: PUSH
10049: LD_INT 2
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: PUSH
10056: LD_INT 25
10058: PUSH
10059: LD_INT 3
10061: PUSH
10062: EMPTY
10063: LIST
10064: LIST
10065: PUSH
10066: LD_INT 25
10068: PUSH
10069: LD_INT 4
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: PUSH
10076: LD_INT 25
10078: PUSH
10079: LD_INT 5
10081: PUSH
10082: EMPTY
10083: LIST
10084: LIST
10085: PUSH
10086: LD_INT 25
10088: PUSH
10089: LD_INT 8
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: PPUSH
10111: CALL_OW 69
10115: PPUSH
10116: LD_STRING DT1-Sol1-1
10118: PPUSH
10119: LD_STRING DT1-FSol1-1
10121: PPUSH
10122: CALL 12129 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10126: LD_EXP 1
10130: PPUSH
10131: LD_STRING DT1-JMM-1
10133: PPUSH
10134: CALL_OW 88
// DialogueOff ;
10138: CALL_OW 7
// repeat wait ( 0 0$05 ) ;
10142: LD_INT 175
10144: PPUSH
10145: CALL_OW 67
// until FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter > 2 ;
10149: LD_INT 11
10151: PPUSH
10152: LD_INT 22
10154: PUSH
10155: LD_INT 3
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: PUSH
10162: LD_INT 50
10164: PUSH
10165: EMPTY
10166: LIST
10167: PUSH
10168: LD_INT 2
10170: PUSH
10171: LD_INT 21
10173: PUSH
10174: LD_INT 2
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PUSH
10181: LD_INT 21
10183: PUSH
10184: LD_INT 1
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: LIST
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: LIST
10200: PPUSH
10201: CALL_OW 70
10205: PUSH
10206: LD_INT 0
10208: EQUAL
10209: PUSH
10210: LD_EXP 22
10214: PUSH
10215: LD_INT 2
10217: GREATER
10218: AND
10219: IFFALSE 10142
// DialogueOn ;
10221: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
10225: LD_EXP 1
10229: PPUSH
10230: LD_STRING DT1a-JMM-1
10232: PPUSH
10233: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
10237: LD_INT 22
10239: PUSH
10240: LD_INT 1
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: PUSH
10247: LD_INT 26
10249: PUSH
10250: LD_INT 1
10252: PUSH
10253: EMPTY
10254: LIST
10255: LIST
10256: PUSH
10257: LD_INT 23
10259: PUSH
10260: LD_INT 1
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: PUSH
10267: LD_INT 2
10269: PUSH
10270: LD_INT 25
10272: PUSH
10273: LD_INT 1
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: LD_INT 25
10282: PUSH
10283: LD_INT 2
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: PUSH
10290: LD_INT 25
10292: PUSH
10293: LD_INT 3
10295: PUSH
10296: EMPTY
10297: LIST
10298: LIST
10299: PUSH
10300: LD_INT 25
10302: PUSH
10303: LD_INT 4
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: PUSH
10310: LD_INT 25
10312: PUSH
10313: LD_INT 5
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: PUSH
10320: LD_INT 25
10322: PUSH
10323: LD_INT 8
10325: PUSH
10326: EMPTY
10327: LIST
10328: LIST
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: PPUSH
10345: CALL_OW 69
10349: PPUSH
10350: LD_STRING DT1a-Sol1-1
10352: PPUSH
10353: LD_STRING DT1a-FSol1-1
10355: PPUSH
10356: CALL 12129 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
10360: LD_EXP 1
10364: PPUSH
10365: LD_STRING DT1a-JMM-2
10367: PPUSH
10368: CALL_OW 88
// DialogueOff ;
10372: CALL_OW 7
// vehicleTeleported := 2 ;
10376: LD_ADDR_EXP 21
10380: PUSH
10381: LD_INT 2
10383: ST_TO_ADDR
// end ;
10384: PPOPN 1
10386: END
// every 0 0$2 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] ] ) do var i , vehicles , speaker ;
10387: LD_EXP 21
10391: PUSH
10392: LD_INT 3
10394: EQUAL
10395: PUSH
10396: LD_INT 11
10398: PPUSH
10399: LD_INT 22
10401: PUSH
10402: LD_INT 3
10404: PUSH
10405: EMPTY
10406: LIST
10407: LIST
10408: PUSH
10409: LD_INT 101
10411: PUSH
10412: LD_INT 1
10414: PUSH
10415: EMPTY
10416: LIST
10417: LIST
10418: PUSH
10419: EMPTY
10420: LIST
10421: LIST
10422: PPUSH
10423: CALL_OW 70
10427: AND
10428: IFFALSE 10713
10430: GO 10432
10432: DISABLE
10433: LD_INT 0
10435: PPUSH
10436: PPUSH
10437: PPUSH
// begin wait ( 0 0$0.3 ) ;
10438: LD_INT 10
10440: PPUSH
10441: CALL_OW 67
// DialogueOn ;
10445: CALL_OW 6
// speaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
10449: LD_ADDR_VAR 0 3
10453: PUSH
10454: LD_INT 22
10456: PUSH
10457: LD_INT 1
10459: PUSH
10460: EMPTY
10461: LIST
10462: LIST
10463: PUSH
10464: LD_INT 23
10466: PUSH
10467: LD_INT 1
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: PUSH
10474: LD_INT 26
10476: PUSH
10477: LD_INT 1
10479: PUSH
10480: EMPTY
10481: LIST
10482: LIST
10483: PUSH
10484: LD_INT 2
10486: PUSH
10487: LD_INT 25
10489: PUSH
10490: LD_INT 1
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: PUSH
10497: LD_INT 25
10499: PUSH
10500: LD_INT 2
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: PUSH
10507: LD_INT 25
10509: PUSH
10510: LD_INT 3
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: PUSH
10517: LD_INT 25
10519: PUSH
10520: LD_INT 4
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: PUSH
10527: LD_INT 25
10529: PUSH
10530: LD_INT 5
10532: PUSH
10533: EMPTY
10534: LIST
10535: LIST
10536: PUSH
10537: LD_INT 25
10539: PUSH
10540: LD_INT 8
10542: PUSH
10543: EMPTY
10544: LIST
10545: LIST
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: PUSH
10556: EMPTY
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: PPUSH
10562: CALL_OW 69
10566: PPUSH
10567: LD_STRING DT2-Sol1-1
10569: PPUSH
10570: LD_STRING DT2-FSol1-1
10572: PPUSH
10573: CALL 12129 0 3
10577: ST_TO_ADDR
// DialogueOff ;
10578: CALL_OW 7
// repeat wait ( 0 0$5 ) ;
10582: LD_INT 175
10584: PPUSH
10585: CALL_OW 67
// until not FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] ] ) ;
10589: LD_INT 11
10591: PPUSH
10592: LD_INT 22
10594: PUSH
10595: LD_INT 3
10597: PUSH
10598: EMPTY
10599: LIST
10600: LIST
10601: PUSH
10602: LD_INT 50
10604: PUSH
10605: EMPTY
10606: LIST
10607: PUSH
10608: EMPTY
10609: LIST
10610: LIST
10611: PPUSH
10612: CALL_OW 70
10616: NOT
10617: IFFALSE 10582
// wait ( 0 0$2 ) ;
10619: LD_INT 70
10621: PPUSH
10622: CALL_OW 67
// vehicleTeleported := 4 ;
10626: LD_ADDR_EXP 21
10630: PUSH
10631: LD_INT 4
10633: ST_TO_ADDR
// DialogueOn ;
10634: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
10638: LD_EXP 1
10642: PPUSH
10643: LD_STRING DT2a-JMM-1
10645: PPUSH
10646: CALL_OW 88
// if speaker then
10650: LD_VAR 0 3
10654: IFFALSE 10697
// if GetSex ( speaker ) = 1 then
10656: LD_VAR 0 3
10660: PPUSH
10661: CALL_OW 258
10665: PUSH
10666: LD_INT 1
10668: EQUAL
10669: IFFALSE 10685
// Say ( speaker , DT2a-Sol1-1 ) else
10671: LD_VAR 0 3
10675: PPUSH
10676: LD_STRING DT2a-Sol1-1
10678: PPUSH
10679: CALL_OW 88
10683: GO 10697
// Say ( speaker , DT2a-FSol1-1 ) ;
10685: LD_VAR 0 3
10689: PPUSH
10690: LD_STRING DT2a-FSol1-1
10692: PPUSH
10693: CALL_OW 88
// Say ( Donaldson , DT2a-Don-1 ) ;
10697: LD_EXP 3
10701: PPUSH
10702: LD_STRING DT2a-Don-1
10704: PPUSH
10705: CALL_OW 88
// DialogueOff ;
10709: CALL_OW 7
// end ;
10713: PPOPN 3
10715: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
10716: LD_INT 1
10718: PPUSH
10719: LD_INT 45
10721: PPUSH
10722: LD_INT 74
10724: PPUSH
10725: CALL_OW 293
10729: IFFALSE 10904
10731: GO 10733
10733: DISABLE
// begin DialogueOn ;
10734: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
10738: LD_INT 36
10740: PPUSH
10741: LD_INT 55
10743: PPUSH
10744: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
10748: LD_INT 22
10750: PUSH
10751: LD_INT 1
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: PUSH
10758: LD_INT 23
10760: PUSH
10761: LD_INT 1
10763: PUSH
10764: EMPTY
10765: LIST
10766: LIST
10767: PUSH
10768: LD_INT 26
10770: PUSH
10771: LD_INT 1
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: PUSH
10778: LD_INT 2
10780: PUSH
10781: LD_INT 25
10783: PUSH
10784: LD_INT 1
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: LD_INT 25
10793: PUSH
10794: LD_INT 2
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: PUSH
10801: LD_INT 25
10803: PUSH
10804: LD_INT 3
10806: PUSH
10807: EMPTY
10808: LIST
10809: LIST
10810: PUSH
10811: LD_INT 25
10813: PUSH
10814: LD_INT 4
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PUSH
10821: LD_INT 25
10823: PUSH
10824: LD_INT 5
10826: PUSH
10827: EMPTY
10828: LIST
10829: LIST
10830: PUSH
10831: LD_INT 25
10833: PUSH
10834: LD_INT 8
10836: PUSH
10837: EMPTY
10838: LIST
10839: LIST
10840: PUSH
10841: EMPTY
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: PUSH
10850: EMPTY
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: PPUSH
10856: CALL_OW 69
10860: PPUSH
10861: LD_STRING D5-Sol1-1
10863: PPUSH
10864: LD_STRING D5-FSol1-
10866: PPUSH
10867: CALL 12129 0 3
// if warWithLegion and IsOk ( Donaldson ) then
10871: LD_EXP 23
10875: PUSH
10876: LD_EXP 3
10880: PPUSH
10881: CALL_OW 302
10885: AND
10886: IFFALSE 10900
// Say ( Donaldson , D5-Don-1 ) ;
10888: LD_EXP 3
10892: PPUSH
10893: LD_STRING D5-Don-1
10895: PPUSH
10896: CALL_OW 88
// DialogueOff ;
10900: CALL_OW 7
// end ;
10904: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
10905: LD_INT 1
10907: PPUSH
10908: LD_INT 10
10910: PPUSH
10911: CALL_OW 292
10915: PUSH
10916: LD_INT 1
10918: PPUSH
10919: LD_INT 137
10921: PPUSH
10922: CALL_OW 292
10926: OR
10927: IFFALSE 11082
10929: GO 10931
10931: DISABLE
// begin DialogueOn ;
10932: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
10936: LD_INT 22
10938: PUSH
10939: LD_INT 1
10941: PUSH
10942: EMPTY
10943: LIST
10944: LIST
10945: PUSH
10946: LD_INT 23
10948: PUSH
10949: LD_INT 1
10951: PUSH
10952: EMPTY
10953: LIST
10954: LIST
10955: PUSH
10956: LD_INT 26
10958: PUSH
10959: LD_INT 1
10961: PUSH
10962: EMPTY
10963: LIST
10964: LIST
10965: PUSH
10966: LD_INT 2
10968: PUSH
10969: LD_INT 25
10971: PUSH
10972: LD_INT 1
10974: PUSH
10975: EMPTY
10976: LIST
10977: LIST
10978: PUSH
10979: LD_INT 25
10981: PUSH
10982: LD_INT 2
10984: PUSH
10985: EMPTY
10986: LIST
10987: LIST
10988: PUSH
10989: LD_INT 25
10991: PUSH
10992: LD_INT 3
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: PUSH
10999: LD_INT 25
11001: PUSH
11002: LD_INT 4
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: PUSH
11009: LD_INT 25
11011: PUSH
11012: LD_INT 5
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: PUSH
11019: LD_INT 25
11021: PUSH
11022: LD_INT 8
11024: PUSH
11025: EMPTY
11026: LIST
11027: LIST
11028: PUSH
11029: EMPTY
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: PUSH
11038: EMPTY
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: PPUSH
11044: CALL_OW 69
11048: PPUSH
11049: LD_STRING DT3-Sol1-1
11051: PPUSH
11052: LD_STRING DT3-FSol1-1
11054: PPUSH
11055: CALL 12129 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11059: LD_EXP 1
11063: PPUSH
11064: LD_STRING DT3-JMM-1
11066: PPUSH
11067: CALL_OW 88
// DialogueOff ;
11071: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11075: LD_STRING M2
11077: PPUSH
11078: CALL_OW 337
// end ;
11082: END
// every 0 0$1 trigger ruEscape = 0 and ( FilterUnitsInArea ( RuEastBase , [ f_side , 1 ] ) or FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_not , [ f_lives , 800 ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ) do
11083: LD_EXP 35
11087: PUSH
11088: LD_INT 0
11090: EQUAL
11091: PUSH
11092: LD_INT 10
11094: PPUSH
11095: LD_INT 22
11097: PUSH
11098: LD_INT 1
11100: PUSH
11101: EMPTY
11102: LIST
11103: LIST
11104: PPUSH
11105: CALL_OW 70
11109: PUSH
11110: LD_INT 10
11112: PPUSH
11113: LD_INT 22
11115: PUSH
11116: LD_INT 3
11118: PUSH
11119: EMPTY
11120: LIST
11121: LIST
11122: PUSH
11123: LD_INT 3
11125: PUSH
11126: LD_INT 24
11128: PUSH
11129: LD_INT 800
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: PUSH
11140: LD_INT 21
11142: PUSH
11143: LD_INT 2
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: PUSH
11150: LD_INT 58
11152: PUSH
11153: EMPTY
11154: LIST
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: PPUSH
11162: CALL_OW 70
11166: OR
11167: AND
11168: IFFALSE 11181
11170: GO 11172
11172: DISABLE
// ruEscape := 1 ;
11173: LD_ADDR_EXP 35
11177: PUSH
11178: LD_INT 1
11180: ST_TO_ADDR
11181: END
// every 0 0$3 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or ruEscape = 1 do var i , unit , tmp ;
11182: LD_INT 3
11184: PPUSH
11185: CALL_OW 303
11189: PUSH
11190: LD_INT 4
11192: PPUSH
11193: CALL_OW 303
11197: OR
11198: PUSH
11199: LD_EXP 35
11203: PUSH
11204: LD_INT 1
11206: EQUAL
11207: OR
11208: IFFALSE 11797
11210: GO 11212
11212: DISABLE
11213: LD_INT 0
11215: PPUSH
11216: PPUSH
11217: PPUSH
// begin ruAI := 0 ;
11218: LD_ADDR_EXP 34
11222: PUSH
11223: LD_INT 0
11225: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
11226: LD_EXP 27
11230: PPUSH
11231: CALL_OW 122
// wait ( 0 0$1 ) ;
11235: LD_INT 35
11237: PPUSH
11238: CALL_OW 67
// DialogueOn ;
11242: CALL_OW 6
// PlaceSeeing ( 75 , 21 , 1 , 12 ) ;
11246: LD_INT 75
11248: PPUSH
11249: LD_INT 21
11251: PPUSH
11252: LD_INT 1
11254: PPUSH
11255: LD_INT 12
11257: PPUSH
11258: CALL_OW 330
// CenterNowOnXY ( 75 , 21 ) ;
11262: LD_INT 75
11264: PPUSH
11265: LD_INT 21
11267: PPUSH
11268: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
11272: LD_INT 10
11274: PPUSH
11275: CALL_OW 68
// Say ( JMM , D6-JMM-1 ) ;
11279: LD_EXP 1
11283: PPUSH
11284: LD_STRING D6-JMM-1
11286: PPUSH
11287: CALL_OW 88
// RemoveSeeing ( 75 , 21 , 1 ) ;
11291: LD_INT 75
11293: PPUSH
11294: LD_INT 21
11296: PPUSH
11297: LD_INT 1
11299: PPUSH
11300: CALL_OW 331
// DialogueOff ;
11304: CALL_OW 7
// for i in RuScientists do
11308: LD_ADDR_VAR 0 1
11312: PUSH
11313: LD_EXP 27
11317: PUSH
11318: FOR_IN
11319: IFFALSE 11355
// begin SetSide ( i , 6 ) ;
11321: LD_VAR 0 1
11325: PPUSH
11326: LD_INT 6
11328: PPUSH
11329: CALL_OW 235
// SetTag ( i , rand ( 1 , 3 ) ) ;
11333: LD_VAR 0 1
11337: PPUSH
11338: LD_INT 1
11340: PPUSH
11341: LD_INT 3
11343: PPUSH
11344: CALL_OW 12
11348: PPUSH
11349: CALL_OW 109
// end ;
11353: GO 11318
11355: POP
11356: POP
// repeat wait ( 0 0$1 ) ;
11357: LD_INT 35
11359: PPUSH
11360: CALL_OW 67
// for i in RuScientists do
11364: LD_ADDR_VAR 0 1
11368: PUSH
11369: LD_EXP 27
11373: PUSH
11374: FOR_IN
11375: IFFALSE 11788
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , i , 10 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11377: LD_ADDR_VAR 0 3
11381: PUSH
11382: LD_INT 22
11384: PUSH
11385: LD_INT 3
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: PUSH
11392: LD_INT 91
11394: PUSH
11395: LD_VAR 0 1
11399: PUSH
11400: LD_INT 10
11402: PUSH
11403: EMPTY
11404: LIST
11405: LIST
11406: LIST
11407: PUSH
11408: LD_INT 21
11410: PUSH
11411: LD_INT 2
11413: PUSH
11414: EMPTY
11415: LIST
11416: LIST
11417: PUSH
11418: LD_INT 58
11420: PUSH
11421: EMPTY
11422: LIST
11423: PUSH
11424: EMPTY
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: PPUSH
11430: CALL_OW 69
11434: ST_TO_ADDR
// if tmp and not IsInUnit ( i ) then
11435: LD_VAR 0 3
11439: PUSH
11440: LD_VAR 0 1
11444: PPUSH
11445: CALL_OW 310
11449: NOT
11450: AND
11451: IFFALSE 11479
// begin ComEnterUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
11453: LD_VAR 0 1
11457: PPUSH
11458: LD_VAR 0 3
11462: PPUSH
11463: LD_VAR 0 1
11467: PPUSH
11468: CALL_OW 74
11472: PPUSH
11473: CALL_OW 120
// continue ;
11477: GO 11374
// end ; if IsInUnit ( i ) then
11479: LD_VAR 0 1
11483: PPUSH
11484: CALL_OW 310
11488: IFFALSE 11507
// unit := IsInUnit ( i ) else
11490: LD_ADDR_VAR 0 2
11494: PUSH
11495: LD_VAR 0 1
11499: PPUSH
11500: CALL_OW 310
11504: ST_TO_ADDR
11505: GO 11517
// unit := i ;
11507: LD_ADDR_VAR 0 2
11511: PUSH
11512: LD_VAR 0 1
11516: ST_TO_ADDR
// case GetTag ( i ) of 1 :
11517: LD_VAR 0 1
11521: PPUSH
11522: CALL_OW 110
11526: PUSH
11527: LD_INT 1
11529: DOUBLE
11530: EQUAL
11531: IFTRUE 11535
11533: GO 11594
11535: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
11536: LD_VAR 0 2
11540: PPUSH
11541: LD_INT 137
11543: PPUSH
11544: CALL_OW 296
11548: PUSH
11549: LD_INT 13
11551: LESS
11552: PUSH
11553: LD_INT 137
11555: PPUSH
11556: CALL_OW 302
11560: AND
11561: IFFALSE 11577
// ComEnterUnit ( unit , rutp ) else
11563: LD_VAR 0 2
11567: PPUSH
11568: LD_INT 137
11570: PPUSH
11571: CALL_OW 120
11575: GO 11592
// ComMoveXY ( unit , 16 , 28 ) ;
11577: LD_VAR 0 2
11581: PPUSH
11582: LD_INT 16
11584: PPUSH
11585: LD_INT 28
11587: PPUSH
11588: CALL_OW 111
// end ; 2 :
11592: GO 11786
11594: LD_INT 2
11596: DOUBLE
11597: EQUAL
11598: IFTRUE 11602
11600: GO 11620
11602: POP
// ComMoveXY ( unit , 97 , 2 ) ; 3 :
11603: LD_VAR 0 2
11607: PPUSH
11608: LD_INT 97
11610: PPUSH
11611: LD_INT 2
11613: PPUSH
11614: CALL_OW 111
11618: GO 11786
11620: LD_INT 3
11622: DOUBLE
11623: EQUAL
11624: IFTRUE 11628
11626: GO 11687
11628: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
11629: LD_VAR 0 2
11633: PPUSH
11634: LD_INT 137
11636: PPUSH
11637: CALL_OW 296
11641: PUSH
11642: LD_INT 13
11644: LESS
11645: PUSH
11646: LD_INT 137
11648: PPUSH
11649: CALL_OW 302
11653: AND
11654: IFFALSE 11670
// ComEnterUnit ( unit , rutp ) else
11656: LD_VAR 0 2
11660: PPUSH
11661: LD_INT 137
11663: PPUSH
11664: CALL_OW 120
11668: GO 11685
// ComMoveXY ( unit , 128 , 155 ) ;
11670: LD_VAR 0 2
11674: PPUSH
11675: LD_INT 128
11677: PPUSH
11678: LD_INT 155
11680: PPUSH
11681: CALL_OW 111
// end ; 11 :
11685: GO 11786
11687: LD_INT 11
11689: DOUBLE
11690: EQUAL
11691: IFTRUE 11695
11693: GO 11713
11695: POP
// ComMoveXY ( unit , 16 , 28 ) ; 13 :
11696: LD_VAR 0 2
11700: PPUSH
11701: LD_INT 16
11703: PPUSH
11704: LD_INT 28
11706: PPUSH
11707: CALL_OW 111
11711: GO 11786
11713: LD_INT 13
11715: DOUBLE
11716: EQUAL
11717: IFTRUE 11721
11719: GO 11759
11721: POP
// begin if IsOk ( ruteleprt ) then
11722: LD_INT 10
11724: PPUSH
11725: CALL_OW 302
11729: IFFALSE 11745
// ComEnterUnit ( unit , ruteleprt ) else
11731: LD_VAR 0 2
11735: PPUSH
11736: LD_INT 10
11738: PPUSH
11739: CALL_OW 120
11743: GO 11757
// SetTag ( unit , 23 ) ;
11745: LD_VAR 0 2
11749: PPUSH
11750: LD_INT 23
11752: PPUSH
11753: CALL_OW 109
// end ; 23 :
11757: GO 11786
11759: LD_INT 23
11761: DOUBLE
11762: EQUAL
11763: IFTRUE 11767
11765: GO 11785
11767: POP
// ComMoveXY ( unit , 128 , 155 ) ; end ;
11768: LD_VAR 0 2
11772: PPUSH
11773: LD_INT 128
11775: PPUSH
11776: LD_INT 155
11778: PPUSH
11779: CALL_OW 111
11783: GO 11786
11785: POP
// end ;
11786: GO 11374
11788: POP
11789: POP
// until not RuScientists ;
11790: LD_EXP 27
11794: NOT
11795: IFFALSE 11357
// end ;
11797: PPOPN 3
11799: END
// every 0 0$1 trigger ruAI = 0 and RuScientists and FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do var i , unit , veh , tmp ;
11800: LD_EXP 34
11804: PUSH
11805: LD_INT 0
11807: EQUAL
11808: PUSH
11809: LD_EXP 27
11813: AND
11814: PUSH
11815: LD_INT 22
11817: PUSH
11818: LD_INT 6
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: PUSH
11825: LD_INT 2
11827: PUSH
11828: LD_INT 95
11830: PUSH
11831: LD_INT 13
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: PUSH
11838: LD_INT 95
11840: PUSH
11841: LD_INT 14
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: PUSH
11848: LD_INT 95
11850: PUSH
11851: LD_INT 25
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: PUSH
11864: EMPTY
11865: LIST
11866: LIST
11867: PPUSH
11868: CALL_OW 69
11872: AND
11873: IFFALSE 12086
11875: GO 11877
11877: DISABLE
11878: LD_INT 0
11880: PPUSH
11881: PPUSH
11882: PPUSH
11883: PPUSH
// begin enable ;
11884: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do
11885: LD_ADDR_VAR 0 1
11889: PUSH
11890: LD_INT 22
11892: PUSH
11893: LD_INT 6
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: PUSH
11900: LD_INT 2
11902: PUSH
11903: LD_INT 95
11905: PUSH
11906: LD_INT 13
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: PUSH
11913: LD_INT 95
11915: PUSH
11916: LD_INT 14
11918: PUSH
11919: EMPTY
11920: LIST
11921: LIST
11922: PUSH
11923: LD_INT 95
11925: PUSH
11926: LD_INT 25
11928: PUSH
11929: EMPTY
11930: LIST
11931: LIST
11932: PUSH
11933: EMPTY
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: PPUSH
11943: CALL_OW 69
11947: PUSH
11948: FOR_IN
11949: IFFALSE 12084
// begin if i in RuScientists then
11951: LD_VAR 0 1
11955: PUSH
11956: LD_EXP 27
11960: IN
11961: IFFALSE 11990
// begin RuScientists = RuScientists diff i ;
11963: LD_ADDR_EXP 27
11967: PUSH
11968: LD_EXP 27
11972: PUSH
11973: LD_VAR 0 1
11977: DIFF
11978: ST_TO_ADDR
// RemoveUnit ( i ) ;
11979: LD_VAR 0 1
11983: PPUSH
11984: CALL_OW 64
// continue ;
11988: GO 11948
// end ; if i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_manual ] ] ) then
11990: LD_VAR 0 1
11994: PUSH
11995: LD_INT 22
11997: PUSH
11998: LD_INT 6
12000: PUSH
12001: EMPTY
12002: LIST
12003: LIST
12004: PUSH
12005: LD_INT 33
12007: PUSH
12008: LD_INT 1
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: PPUSH
12019: CALL_OW 69
12023: IN
12024: IFFALSE 12082
// begin if IsDrivenBy ( i ) in RuScientists then
12026: LD_VAR 0 1
12030: PPUSH
12031: CALL_OW 311
12035: PUSH
12036: LD_EXP 27
12040: IN
12041: IFFALSE 12059
// RuScientists = RuScientists diff i ;
12043: LD_ADDR_EXP 27
12047: PUSH
12048: LD_EXP 27
12052: PUSH
12053: LD_VAR 0 1
12057: DIFF
12058: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
12059: LD_VAR 0 1
12063: PPUSH
12064: CALL_OW 311
12068: PPUSH
12069: CALL_OW 64
// RemoveUnit ( i ) ;
12073: LD_VAR 0 1
12077: PPUSH
12078: CALL_OW 64
// end ; end ;
12082: GO 11948
12084: POP
12085: POP
// end ; end_of_file
12086: PPOPN 4
12088: END
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12089: LD_INT 0
12091: PPUSH
12092: PPUSH
// for i in charactersList do
12093: LD_ADDR_VAR 0 4
12097: PUSH
12098: LD_VAR 0 1
12102: PUSH
12103: FOR_IN
12104: IFFALSE 12122
// SaveCharacters ( i , ident ) ;
12106: LD_VAR 0 4
12110: PPUSH
12111: LD_VAR 0 2
12115: PPUSH
12116: CALL_OW 38
12120: GO 12103
12122: POP
12123: POP
// end ;
12124: LD_VAR 0 3
12128: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
12129: LD_INT 0
12131: PPUSH
12132: PPUSH
12133: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12134: LD_ADDR_VAR 0 1
12138: PUSH
12139: LD_VAR 0 1
12143: PUSH
12144: LD_EXP 1
12148: PUSH
12149: LD_EXP 7
12153: PUSH
12154: LD_EXP 3
12158: PUSH
12159: LD_EXP 4
12163: PUSH
12164: LD_EXP 5
12168: PUSH
12169: LD_EXP 2
12173: PUSH
12174: LD_EXP 12
12178: PUSH
12179: LD_EXP 13
12183: PUSH
12184: LD_EXP 9
12188: PUSH
12189: LD_EXP 11
12193: PUSH
12194: LD_EXP 6
12198: PUSH
12199: LD_EXP 8
12203: PUSH
12204: LD_EXP 10
12208: PUSH
12209: LD_EXP 15
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: DIFF
12230: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
12231: LD_ADDR_VAR 0 6
12235: PUSH
12236: LD_VAR 0 1
12240: PUSH
12241: LD_INT 1
12243: PPUSH
12244: LD_VAR 0 1
12248: PPUSH
12249: CALL_OW 12
12253: ARRAY
12254: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
12255: LD_VAR 0 6
12259: PPUSH
12260: CALL_OW 258
12264: PUSH
12265: LD_INT 1
12267: EQUAL
12268: IFFALSE 12286
// Say ( speaker , dialogMID ) else
12270: LD_VAR 0 6
12274: PPUSH
12275: LD_VAR 0 2
12279: PPUSH
12280: CALL_OW 88
12284: GO 12300
// Say ( speaker , dialogFID ) ;
12286: LD_VAR 0 6
12290: PPUSH
12291: LD_VAR 0 3
12295: PPUSH
12296: CALL_OW 88
// result := speaker ;
12300: LD_ADDR_VAR 0 4
12304: PUSH
12305: LD_VAR 0 6
12309: ST_TO_ADDR
// end ;
12310: LD_VAR 0 4
12314: RET
// export function PrepareDifficulty ; var tmp ; begin
12315: LD_INT 0
12317: PPUSH
12318: PPUSH
// if Difficulty = 1 then
12319: LD_OWVAR 67
12323: PUSH
12324: LD_INT 1
12326: EQUAL
12327: IFFALSE 12347
// begin RuSolMinLevel = 8 ;
12329: LD_ADDR_EXP 29
12333: PUSH
12334: LD_INT 8
12336: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12337: LD_ADDR_EXP 30
12341: PUSH
12342: LD_INT 10
12344: ST_TO_ADDR
// end else
12345: GO 12587
// if Difficulty = 2 then
12347: LD_OWVAR 67
12351: PUSH
12352: LD_INT 2
12354: EQUAL
12355: IFFALSE 12451
// begin RuSolMinLevel = 9 ;
12357: LD_ADDR_EXP 29
12361: PUSH
12362: LD_INT 9
12364: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12365: LD_ADDR_EXP 30
12369: PUSH
12370: LD_INT 10
12372: ST_TO_ADDR
// uc_nation = 3 ;
12373: LD_ADDR_OWVAR 21
12377: PUSH
12378: LD_INT 3
12380: ST_TO_ADDR
// uc_side = 3 ;
12381: LD_ADDR_OWVAR 20
12385: PUSH
12386: LD_INT 3
12388: ST_TO_ADDR
// bc_level = 10 ;
12389: LD_ADDR_OWVAR 43
12393: PUSH
12394: LD_INT 10
12396: ST_TO_ADDR
// bc_type = b_turret ;
12397: LD_ADDR_OWVAR 42
12401: PUSH
12402: LD_INT 33
12404: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12405: LD_ADDR_VAR 0 2
12409: PUSH
12410: LD_INT 86
12412: PPUSH
12413: LD_INT 34
12415: PPUSH
12416: LD_INT 2
12418: PPUSH
12419: CALL_OW 47
12423: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12424: LD_VAR 0 2
12428: PPUSH
12429: LD_INT 49
12431: PPUSH
12432: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12436: LD_INT 64
12438: PPUSH
12439: LD_INT 3
12441: PPUSH
12442: LD_INT 1
12444: PPUSH
12445: CALL_OW 322
// end else
12449: GO 12587
// begin RuSolMinLevel = 10 ;
12451: LD_ADDR_EXP 29
12455: PUSH
12456: LD_INT 10
12458: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12459: LD_ADDR_EXP 30
12463: PUSH
12464: LD_INT 10
12466: ST_TO_ADDR
// uc_nation = 3 ;
12467: LD_ADDR_OWVAR 21
12471: PUSH
12472: LD_INT 3
12474: ST_TO_ADDR
// uc_side = 3 ;
12475: LD_ADDR_OWVAR 20
12479: PUSH
12480: LD_INT 3
12482: ST_TO_ADDR
// bc_level = 10 ;
12483: LD_ADDR_OWVAR 43
12487: PUSH
12488: LD_INT 10
12490: ST_TO_ADDR
// bc_type = b_turret ;
12491: LD_ADDR_OWVAR 42
12495: PUSH
12496: LD_INT 33
12498: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12499: LD_ADDR_VAR 0 2
12503: PUSH
12504: LD_INT 86
12506: PPUSH
12507: LD_INT 34
12509: PPUSH
12510: LD_INT 2
12512: PPUSH
12513: CALL_OW 47
12517: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12518: LD_VAR 0 2
12522: PPUSH
12523: LD_INT 49
12525: PPUSH
12526: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
12530: LD_ADDR_VAR 0 2
12534: PUSH
12535: LD_INT 93
12537: PPUSH
12538: LD_INT 31
12540: PPUSH
12541: LD_INT 2
12543: PPUSH
12544: CALL_OW 47
12548: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12549: LD_VAR 0 2
12553: PPUSH
12554: LD_INT 49
12556: PPUSH
12557: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12561: LD_INT 64
12563: PPUSH
12564: LD_INT 3
12566: PPUSH
12567: LD_INT 1
12569: PPUSH
12570: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
12574: LD_INT 65
12576: PPUSH
12577: LD_INT 3
12579: PPUSH
12580: LD_INT 1
12582: PPUSH
12583: CALL_OW 322
// end ; end ;
12587: LD_VAR 0 1
12591: RET
// export function ShowQuery1 ; begin
12592: LD_INT 0
12594: PPUSH
// result := Query ( Q1 ) ;
12595: LD_ADDR_VAR 0 1
12599: PUSH
12600: LD_STRING Q1
12602: PPUSH
12603: CALL_OW 97
12607: ST_TO_ADDR
// end ;
12608: LD_VAR 0 1
12612: RET
// export function ShowQuery2 ; begin
12613: LD_INT 0
12615: PPUSH
// result := Query ( Q1a ) ;
12616: LD_ADDR_VAR 0 1
12620: PUSH
12621: LD_STRING Q1a
12623: PPUSH
12624: CALL_OW 97
12628: ST_TO_ADDR
// end ;
12629: LD_VAR 0 1
12633: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
12634: LD_INT 0
12636: PPUSH
12637: PPUSH
12638: PPUSH
12639: PPUSH
// for i = 1 to count do
12640: LD_ADDR_VAR 0 8
12644: PUSH
12645: DOUBLE
12646: LD_INT 1
12648: DEC
12649: ST_TO_ADDR
12650: LD_VAR 0 6
12654: PUSH
12655: FOR_TO
12656: IFFALSE 12737
// begin uc_side = side ;
12658: LD_ADDR_OWVAR 20
12662: PUSH
12663: LD_VAR 0 1
12667: ST_TO_ADDR
// uc_nation = nation ;
12668: LD_ADDR_OWVAR 21
12672: PUSH
12673: LD_VAR 0 2
12677: ST_TO_ADDR
// hc_gallery =  ;
12678: LD_ADDR_OWVAR 33
12682: PUSH
12683: LD_STRING 
12685: ST_TO_ADDR
// hc_name =  ;
12686: LD_ADDR_OWVAR 26
12690: PUSH
12691: LD_STRING 
12693: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
12694: LD_INT 0
12696: PPUSH
12697: LD_VAR 0 5
12701: PPUSH
12702: LD_VAR 0 4
12706: PPUSH
12707: CALL_OW 380
// un = CreateHuman ;
12711: LD_ADDR_VAR 0 10
12715: PUSH
12716: CALL_OW 44
12720: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
12721: LD_VAR 0 10
12725: PPUSH
12726: LD_VAR 0 3
12730: PPUSH
12731: CALL_OW 52
// end ;
12735: GO 12655
12737: POP
12738: POP
// end ;
12739: LD_VAR 0 7
12743: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , list ; begin
12744: LD_INT 0
12746: PPUSH
12747: PPUSH
12748: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
12749: LD_ADDR_VAR 0 6
12753: PUSH
12754: LD_INT 48
12756: PUSH
12757: LD_INT 49
12759: PUSH
12760: LD_INT 50
12762: PUSH
12763: LD_INT 20
12765: PUSH
12766: LD_INT 1
12768: PUSH
12769: LD_INT 51
12771: PUSH
12772: LD_INT 52
12774: PUSH
12775: LD_INT 69
12777: PUSH
12778: LD_INT 39
12780: PUSH
12781: LD_INT 34
12783: PUSH
12784: LD_INT 40
12786: PUSH
12787: LD_INT 53
12789: PUSH
12790: LD_INT 71
12792: PUSH
12793: LD_INT 57
12795: PUSH
12796: LD_INT 58
12798: PUSH
12799: LD_INT 44
12801: PUSH
12802: LD_INT 32
12804: PUSH
12805: LD_INT 27
12807: PUSH
12808: LD_INT 23
12810: PUSH
12811: LD_INT 33
12813: PUSH
12814: LD_INT 59
12816: PUSH
12817: LD_INT 54
12819: PUSH
12820: LD_INT 55
12822: PUSH
12823: LD_INT 56
12825: PUSH
12826: LD_INT 63
12828: PUSH
12829: LD_INT 64
12831: PUSH
12832: LD_INT 65
12834: PUSH
12835: LD_INT 30
12837: PUSH
12838: LD_INT 31
12840: PUSH
12841: LD_INT 21
12843: PUSH
12844: LD_INT 22
12846: PUSH
12847: LD_INT 25
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: ST_TO_ADDR
// for i := 1 to list do
12884: LD_ADDR_VAR 0 5
12888: PUSH
12889: DOUBLE
12890: LD_INT 1
12892: DEC
12893: ST_TO_ADDR
12894: LD_VAR 0 6
12898: PUSH
12899: FOR_TO
12900: IFFALSE 12972
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
12902: LD_VAR 0 6
12906: PUSH
12907: LD_VAR 0 5
12911: ARRAY
12912: PPUSH
12913: LD_VAR 0 1
12917: PPUSH
12918: CALL_OW 321
12922: PUSH
12923: LD_INT 1
12925: EQUAL
12926: PUSH
12927: LD_VAR 0 6
12931: PUSH
12932: LD_VAR 0 5
12936: ARRAY
12937: PPUSH
12938: LD_VAR 0 3
12942: PPUSH
12943: CALL_OW 482
12947: AND
12948: IFFALSE 12970
// AddComResearch ( lab , list [ i ] ) ;
12950: LD_VAR 0 2
12954: PPUSH
12955: LD_VAR 0 6
12959: PUSH
12960: LD_VAR 0 5
12964: ARRAY
12965: PPUSH
12966: CALL_OW 184
12970: GO 12899
12972: POP
12973: POP
// end ;
12974: LD_VAR 0 4
12978: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
12979: LD_INT 0
12981: PPUSH
12982: PPUSH
12983: PPUSH
12984: PPUSH
12985: PPUSH
12986: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
12987: LD_ADDR_VAR 0 8
12991: PUSH
12992: LD_VAR 0 2
12996: PPUSH
12997: CALL_OW 313
13001: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13002: LD_ADDR_VAR 0 9
13006: PUSH
13007: LD_VAR 0 3
13011: PPUSH
13012: LD_INT 22
13014: PUSH
13015: LD_VAR 0 1
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: PUSH
13024: LD_INT 25
13026: PUSH
13027: LD_INT 2
13029: PUSH
13030: EMPTY
13031: LIST
13032: LIST
13033: PUSH
13034: LD_INT 24
13036: PUSH
13037: LD_INT 750
13039: PUSH
13040: EMPTY
13041: LIST
13042: LIST
13043: PUSH
13044: LD_INT 3
13046: PUSH
13047: LD_INT 54
13049: PUSH
13050: EMPTY
13051: LIST
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: PPUSH
13063: CALL_OW 70
13067: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13068: LD_ADDR_VAR 0 6
13072: PUSH
13073: LD_VAR 0 3
13077: PPUSH
13078: LD_INT 22
13080: PUSH
13081: LD_VAR 0 1
13085: PUSH
13086: EMPTY
13087: LIST
13088: LIST
13089: PUSH
13090: LD_INT 21
13092: PUSH
13093: LD_INT 3
13095: PUSH
13096: EMPTY
13097: LIST
13098: LIST
13099: PUSH
13100: LD_INT 3
13102: PUSH
13103: LD_INT 24
13105: PUSH
13106: LD_INT 1000
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: PUSH
13117: EMPTY
13118: LIST
13119: LIST
13120: LIST
13121: PUSH
13122: EMPTY
13123: LIST
13124: PPUSH
13125: CALL_OW 70
13129: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13130: LD_VAR 0 6
13134: NOT
13135: PUSH
13136: LD_INT 22
13138: PUSH
13139: LD_VAR 0 1
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: PUSH
13148: LD_INT 25
13150: PUSH
13151: LD_INT 2
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: PUSH
13158: LD_INT 24
13160: PUSH
13161: LD_INT 250
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: PUSH
13168: EMPTY
13169: LIST
13170: LIST
13171: LIST
13172: PPUSH
13173: CALL_OW 69
13177: NOT
13178: AND
13179: IFFALSE 13183
// exit ;
13181: GO 13341
// if buildingsList and engineerOkInside then
13183: LD_VAR 0 6
13187: PUSH
13188: LD_VAR 0 8
13192: AND
13193: IFFALSE 13204
// ComExitBuilding ( engineerOkInside ) ;
13195: LD_VAR 0 8
13199: PPUSH
13200: CALL_OW 122
// if buildingsList and engineerOkOutside then
13204: LD_VAR 0 6
13208: PUSH
13209: LD_VAR 0 9
13213: AND
13214: IFFALSE 13234
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
13216: LD_VAR 0 9
13220: PPUSH
13221: LD_VAR 0 6
13225: PUSH
13226: LD_INT 1
13228: ARRAY
13229: PPUSH
13230: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
13234: LD_VAR 0 6
13238: PUSH
13239: LD_INT 0
13241: EQUAL
13242: PUSH
13243: LD_VAR 0 4
13247: PUSH
13248: LD_INT 0
13250: EQUAL
13251: AND
13252: PUSH
13253: LD_VAR 0 9
13257: AND
13258: IFFALSE 13274
// ComEnterUnit ( engineerOkOutside , depot ) ;
13260: LD_VAR 0 9
13264: PPUSH
13265: LD_VAR 0 2
13269: PPUSH
13270: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
13274: LD_VAR 0 9
13278: PUSH
13279: LD_VAR 0 6
13283: PUSH
13284: LD_INT 0
13286: EQUAL
13287: AND
13288: PUSH
13289: LD_VAR 0 4
13293: AND
13294: IFFALSE 13341
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13296: LD_VAR 0 9
13300: PPUSH
13301: LD_VAR 0 4
13305: PUSH
13306: LD_INT 1
13308: ARRAY
13309: PPUSH
13310: LD_VAR 0 4
13314: PUSH
13315: LD_INT 2
13317: ARRAY
13318: PPUSH
13319: LD_VAR 0 4
13323: PUSH
13324: LD_INT 3
13326: ARRAY
13327: PPUSH
13328: LD_VAR 0 4
13332: PUSH
13333: LD_INT 4
13335: ARRAY
13336: PPUSH
13337: CALL_OW 145
// end ;
13341: LD_VAR 0 5
13345: RET
// export function HealUnitInBase ( side , healArea , baseArea , buildings ) ; var sciList , sciListOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13346: LD_INT 0
13348: PPUSH
13349: PPUSH
13350: PPUSH
13351: PPUSH
13352: PPUSH
13353: PPUSH
13354: PPUSH
13355: PPUSH
13356: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13357: LD_ADDR_VAR 0 6
13361: PUSH
13362: LD_INT 22
13364: PUSH
13365: LD_VAR 0 1
13369: PUSH
13370: EMPTY
13371: LIST
13372: LIST
13373: PUSH
13374: LD_INT 25
13376: PUSH
13377: LD_INT 4
13379: PUSH
13380: EMPTY
13381: LIST
13382: LIST
13383: PUSH
13384: LD_INT 24
13386: PUSH
13387: LD_INT 251
13389: PUSH
13390: EMPTY
13391: LIST
13392: LIST
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: LIST
13398: PPUSH
13399: CALL_OW 69
13403: PUSH
13404: LD_EXP 27
13408: PUSH
13409: EMPTY
13410: LIST
13411: DIFF
13412: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_outside ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13413: LD_ADDR_VAR 0 7
13417: PUSH
13418: LD_VAR 0 3
13422: PPUSH
13423: LD_INT 22
13425: PUSH
13426: LD_VAR 0 1
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PUSH
13435: LD_INT 56
13437: PUSH
13438: EMPTY
13439: LIST
13440: PUSH
13441: LD_INT 25
13443: PUSH
13444: LD_INT 4
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: PUSH
13451: LD_INT 50
13453: PUSH
13454: EMPTY
13455: LIST
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: PPUSH
13463: CALL_OW 70
13467: PUSH
13468: LD_EXP 27
13472: PUSH
13473: EMPTY
13474: LIST
13475: DIFF
13476: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13477: LD_ADDR_VAR 0 10
13481: PUSH
13482: LD_VAR 0 3
13486: PPUSH
13487: LD_INT 22
13489: PUSH
13490: LD_VAR 0 1
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: PUSH
13499: LD_INT 21
13501: PUSH
13502: LD_INT 1
13504: PUSH
13505: EMPTY
13506: LIST
13507: LIST
13508: PUSH
13509: LD_INT 3
13511: PUSH
13512: LD_INT 24
13514: PUSH
13515: LD_INT 750
13517: PUSH
13518: EMPTY
13519: LIST
13520: LIST
13521: PUSH
13522: EMPTY
13523: LIST
13524: LIST
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: LIST
13530: PPUSH
13531: CALL_OW 70
13535: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13536: LD_ADDR_VAR 0 11
13540: PUSH
13541: LD_VAR 0 2
13545: PPUSH
13546: LD_INT 22
13548: PUSH
13549: LD_VAR 0 1
13553: PUSH
13554: EMPTY
13555: LIST
13556: LIST
13557: PUSH
13558: LD_INT 21
13560: PUSH
13561: LD_INT 1
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: PUSH
13568: LD_INT 3
13570: PUSH
13571: LD_INT 24
13573: PUSH
13574: LD_INT 1000
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: PUSH
13581: EMPTY
13582: LIST
13583: LIST
13584: PUSH
13585: EMPTY
13586: LIST
13587: LIST
13588: LIST
13589: PPUSH
13590: CALL_OW 70
13594: ST_TO_ADDR
// if damageUnits and sciList then
13595: LD_VAR 0 10
13599: PUSH
13600: LD_VAR 0 6
13604: AND
13605: IFFALSE 13621
// ComMoveToArea ( damageUnits , healArea ) ;
13607: LD_VAR 0 10
13611: PPUSH
13612: LD_VAR 0 2
13616: PPUSH
13617: CALL_OW 113
// if unitsToHeal and sciList and sciListOutside = 0 then
13621: LD_VAR 0 11
13625: PUSH
13626: LD_VAR 0 6
13630: AND
13631: PUSH
13632: LD_VAR 0 7
13636: PUSH
13637: LD_INT 0
13639: EQUAL
13640: AND
13641: IFFALSE 13687
// for i in buildings do
13643: LD_ADDR_VAR 0 8
13647: PUSH
13648: LD_VAR 0 4
13652: PUSH
13653: FOR_IN
13654: IFFALSE 13685
// begin if UnitsInside ( i ) then
13656: LD_VAR 0 8
13660: PPUSH
13661: CALL_OW 313
13665: IFFALSE 13683
// begin ComExitBuilding ( UnitsInside ( i ) ) ;
13667: LD_VAR 0 8
13671: PPUSH
13672: CALL_OW 313
13676: PPUSH
13677: CALL_OW 122
// break ;
13681: GO 13685
// end ; end ;
13683: GO 13653
13685: POP
13686: POP
// if unitsToHeal and sciListOutside then
13687: LD_VAR 0 11
13691: PUSH
13692: LD_VAR 0 7
13696: AND
13697: IFFALSE 13717
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
13699: LD_VAR 0 7
13703: PPUSH
13704: LD_VAR 0 11
13708: PUSH
13709: LD_INT 1
13711: ARRAY
13712: PPUSH
13713: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
13717: LD_VAR 0 10
13721: PUSH
13722: LD_INT 0
13724: EQUAL
13725: PUSH
13726: LD_VAR 0 11
13730: PUSH
13731: LD_INT 0
13733: EQUAL
13734: AND
13735: PUSH
13736: LD_VAR 0 7
13740: AND
13741: IFFALSE 13809
// begin tmp := buildings ;
13743: LD_ADDR_VAR 0 12
13747: PUSH
13748: LD_VAR 0 4
13752: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
13753: LD_ADDR_VAR 0 13
13757: PUSH
13758: LD_INT 1
13760: PPUSH
13761: LD_VAR 0 12
13765: PPUSH
13766: CALL_OW 12
13770: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
13771: LD_VAR 0 7
13775: PPUSH
13776: LD_INT 3
13778: PUSH
13779: LD_INT 60
13781: PUSH
13782: EMPTY
13783: LIST
13784: PUSH
13785: EMPTY
13786: LIST
13787: LIST
13788: PPUSH
13789: CALL_OW 72
13793: PPUSH
13794: LD_VAR 0 12
13798: PUSH
13799: LD_VAR 0 13
13803: ARRAY
13804: PPUSH
13805: CALL_OW 120
// end ; end ;
13809: LD_VAR 0 5
13813: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
13814: LD_INT 0
13816: PPUSH
13817: PPUSH
13818: PPUSH
13819: PPUSH
13820: PPUSH
13821: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
13822: LD_ADDR_VAR 0 7
13826: PUSH
13827: LD_VAR 0 2
13831: PPUSH
13832: LD_INT 22
13834: PUSH
13835: LD_VAR 0 1
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PUSH
13844: LD_INT 21
13846: PUSH
13847: LD_INT 2
13849: PUSH
13850: EMPTY
13851: LIST
13852: LIST
13853: PUSH
13854: LD_INT 34
13856: PUSH
13857: LD_INT 52
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: LIST
13868: PPUSH
13869: CALL_OW 70
13873: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13874: LD_ADDR_VAR 0 8
13878: PUSH
13879: LD_VAR 0 2
13883: PPUSH
13884: LD_INT 22
13886: PUSH
13887: LD_VAR 0 1
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: PUSH
13896: LD_INT 21
13898: PUSH
13899: LD_INT 3
13901: PUSH
13902: EMPTY
13903: LIST
13904: LIST
13905: PUSH
13906: LD_INT 3
13908: PUSH
13909: LD_INT 24
13911: PUSH
13912: LD_INT 1000
13914: PUSH
13915: EMPTY
13916: LIST
13917: LIST
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: LIST
13927: PUSH
13928: EMPTY
13929: LIST
13930: PPUSH
13931: CALL_OW 70
13935: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
13936: LD_VAR 0 8
13940: PUSH
13941: LD_INT 0
13943: GREATER
13944: PUSH
13945: LD_VAR 0 7
13949: PPUSH
13950: LD_INT 24
13952: PUSH
13953: LD_INT 750
13955: PUSH
13956: EMPTY
13957: LIST
13958: LIST
13959: PPUSH
13960: CALL_OW 72
13964: PUSH
13965: LD_INT 0
13967: GREATER
13968: AND
13969: IFFALSE 13989
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
13971: LD_VAR 0 7
13975: PPUSH
13976: LD_VAR 0 8
13980: PUSH
13981: LD_INT 1
13983: ARRAY
13984: PPUSH
13985: CALL_OW 130
// end ;
13989: LD_VAR 0 3
13993: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
13994: LD_INT 0
13996: PPUSH
13997: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
13998: LD_INT 22
14000: PUSH
14001: LD_VAR 0 1
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: PUSH
14010: LD_INT 21
14012: PUSH
14013: LD_INT 2
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: PUSH
14020: EMPTY
14021: LIST
14022: LIST
14023: PPUSH
14024: CALL_OW 69
14028: PUSH
14029: LD_INT 18
14031: PPUSH
14032: LD_INT 22
14034: PUSH
14035: LD_VAR 0 1
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: PUSH
14044: LD_INT 21
14046: PUSH
14047: LD_INT 2
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: PUSH
14054: EMPTY
14055: LIST
14056: LIST
14057: PPUSH
14058: CALL_OW 70
14062: PUSH
14063: LD_VAR 0 3
14067: LESSEQUAL
14068: DIFF
14069: IFFALSE 14136
// for i := 1 to vehCount do
14071: LD_ADDR_VAR 0 9
14075: PUSH
14076: DOUBLE
14077: LD_INT 1
14079: DEC
14080: ST_TO_ADDR
14081: LD_VAR 0 3
14085: PUSH
14086: FOR_TO
14087: IFFALSE 14134
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14089: LD_VAR 0 2
14093: PPUSH
14094: LD_VAR 0 7
14098: PPUSH
14099: LD_VAR 0 5
14103: PPUSH
14104: LD_VAR 0 6
14108: PPUSH
14109: LD_VAR 0 4
14113: PUSH
14114: LD_INT 1
14116: PPUSH
14117: LD_VAR 0 4
14121: PPUSH
14122: CALL_OW 12
14126: ARRAY
14127: PPUSH
14128: CALL_OW 185
14132: GO 14086
14134: POP
14135: POP
// end ;
14136: LD_VAR 0 8
14140: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
14141: LD_INT 0
14143: PPUSH
14144: PPUSH
14145: PPUSH
14146: PPUSH
14147: PPUSH
14148: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14149: LD_ADDR_VAR 0 6
14153: PUSH
14154: LD_INT 22
14156: PUSH
14157: LD_VAR 0 1
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: PUSH
14166: LD_INT 25
14168: PUSH
14169: LD_INT 9
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: PPUSH
14180: CALL_OW 69
14184: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14185: LD_ADDR_VAR 0 7
14189: PUSH
14190: LD_INT 81
14192: PUSH
14193: LD_VAR 0 1
14197: PUSH
14198: EMPTY
14199: LIST
14200: LIST
14201: PUSH
14202: LD_INT 3
14204: PUSH
14205: LD_INT 21
14207: PUSH
14208: LD_INT 3
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: PPUSH
14223: CALL_OW 69
14227: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14228: LD_ADDR_VAR 0 4
14232: PUSH
14233: LD_INT 1
14235: PPUSH
14236: LD_INT 3
14238: PPUSH
14239: CALL_OW 12
14243: ST_TO_ADDR
// for i := 1 to list do
14244: LD_ADDR_VAR 0 5
14248: PUSH
14249: DOUBLE
14250: LD_INT 1
14252: DEC
14253: ST_TO_ADDR
14254: LD_VAR 0 6
14258: PUSH
14259: FOR_TO
14260: IFFALSE 14462
// for ta in filter do
14262: LD_ADDR_VAR 0 3
14266: PUSH
14267: LD_VAR 0 7
14271: PUSH
14272: FOR_IN
14273: IFFALSE 14458
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14275: LD_VAR 0 6
14279: PUSH
14280: LD_VAR 0 5
14284: ARRAY
14285: PPUSH
14286: LD_VAR 0 3
14290: PPUSH
14291: CALL_OW 296
14295: PUSH
14296: LD_INT 15
14298: LESSEQUAL
14299: IFFALSE 14456
// begin case c of 1 :
14301: LD_VAR 0 4
14305: PUSH
14306: LD_INT 1
14308: DOUBLE
14309: EQUAL
14310: IFTRUE 14314
14312: GO 14352
14314: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
14315: LD_VAR 0 6
14319: PUSH
14320: LD_VAR 0 5
14324: ARRAY
14325: PPUSH
14326: LD_VAR 0 3
14330: PPUSH
14331: CALL_OW 250
14335: PPUSH
14336: LD_VAR 0 3
14340: PPUSH
14341: CALL_OW 251
14345: PPUSH
14346: CALL_OW 154
14350: GO 14456
14352: LD_INT 2
14354: DOUBLE
14355: EQUAL
14356: IFTRUE 14360
14358: GO 14424
14360: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
14361: LD_VAR 0 6
14365: PUSH
14366: LD_VAR 0 5
14370: ARRAY
14371: PPUSH
14372: LD_VAR 0 3
14376: PPUSH
14377: CALL_OW 250
14381: PUSH
14382: LD_INT 1
14384: NEG
14385: PPUSH
14386: LD_INT 1
14388: PPUSH
14389: CALL_OW 12
14393: PLUS
14394: PPUSH
14395: LD_VAR 0 3
14399: PPUSH
14400: CALL_OW 251
14404: PUSH
14405: LD_INT 1
14407: NEG
14408: PPUSH
14409: LD_INT 1
14411: PPUSH
14412: CALL_OW 12
14416: PLUS
14417: PPUSH
14418: CALL_OW 153
14422: GO 14456
14424: LD_INT 3
14426: DOUBLE
14427: EQUAL
14428: IFTRUE 14432
14430: GO 14455
14432: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14433: LD_VAR 0 6
14437: PUSH
14438: LD_VAR 0 5
14442: ARRAY
14443: PPUSH
14444: LD_VAR 0 3
14448: PPUSH
14449: CALL_OW 115
14453: GO 14456
14455: POP
// end ; end ;
14456: GO 14272
14458: POP
14459: POP
14460: GO 14259
14462: POP
14463: POP
// end ;
14464: LD_VAR 0 2
14468: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
14469: LD_INT 0
14471: PPUSH
14472: PPUSH
14473: PPUSH
14474: PPUSH
// r := 100 ;
14475: LD_ADDR_VAR 0 5
14479: PUSH
14480: LD_INT 100
14482: ST_TO_ADDR
// x := 0 ;
14483: LD_ADDR_VAR 0 6
14487: PUSH
14488: LD_INT 0
14490: ST_TO_ADDR
// while ( x < n ) do
14491: LD_VAR 0 6
14495: PUSH
14496: LD_VAR 0 2
14500: LESS
14501: IFFALSE 14764
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
14503: LD_ADDR_VAR 0 4
14507: PUSH
14508: DOUBLE
14509: LD_INT 1
14511: DEC
14512: ST_TO_ADDR
14513: LD_VAR 0 1
14517: PPUSH
14518: LD_INT 0
14520: PPUSH
14521: CALL_OW 517
14525: PUSH
14526: LD_INT 1
14528: ARRAY
14529: PUSH
14530: FOR_TO
14531: IFFALSE 14760
// begin if r > 50 then
14533: LD_VAR 0 5
14537: PUSH
14538: LD_INT 50
14540: GREATER
14541: IFFALSE 14744
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
14543: LD_VAR 0 1
14547: PPUSH
14548: LD_INT 0
14550: PPUSH
14551: CALL_OW 517
14555: PUSH
14556: LD_INT 1
14558: ARRAY
14559: PUSH
14560: LD_VAR 0 4
14564: ARRAY
14565: PPUSH
14566: LD_VAR 0 1
14570: PPUSH
14571: LD_INT 0
14573: PPUSH
14574: CALL_OW 517
14578: PUSH
14579: LD_INT 2
14581: ARRAY
14582: PUSH
14583: LD_VAR 0 4
14587: ARRAY
14588: PPUSH
14589: CALL_OW 458
14593: NOT
14594: IFFALSE 14742
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
14596: LD_VAR 0 1
14600: PPUSH
14601: LD_INT 0
14603: PPUSH
14604: CALL_OW 517
14608: PUSH
14609: LD_INT 1
14611: ARRAY
14612: PUSH
14613: LD_VAR 0 4
14617: ARRAY
14618: PPUSH
14619: LD_VAR 0 1
14623: PPUSH
14624: LD_INT 0
14626: PPUSH
14627: CALL_OW 517
14631: PUSH
14632: LD_INT 2
14634: ARRAY
14635: PUSH
14636: LD_VAR 0 4
14640: ARRAY
14641: PPUSH
14642: LD_INT 8
14644: PPUSH
14645: LD_INT 0
14647: PPUSH
14648: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
14652: LD_ADDR_EXP 37
14656: PUSH
14657: LD_EXP 37
14661: PPUSH
14662: LD_INT 1
14664: PPUSH
14665: LD_VAR 0 1
14669: PPUSH
14670: LD_INT 0
14672: PPUSH
14673: CALL_OW 517
14677: PUSH
14678: LD_INT 1
14680: ARRAY
14681: PUSH
14682: LD_VAR 0 4
14686: ARRAY
14687: PUSH
14688: LD_VAR 0 1
14692: PPUSH
14693: LD_INT 0
14695: PPUSH
14696: CALL_OW 517
14700: PUSH
14701: LD_INT 2
14703: ARRAY
14704: PUSH
14705: LD_VAR 0 4
14709: ARRAY
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: PPUSH
14715: CALL_OW 2
14719: ST_TO_ADDR
// r := 0 ;
14720: LD_ADDR_VAR 0 5
14724: PUSH
14725: LD_INT 0
14727: ST_TO_ADDR
// x := x + 1 ;
14728: LD_ADDR_VAR 0 6
14732: PUSH
14733: LD_VAR 0 6
14737: PUSH
14738: LD_INT 1
14740: PLUS
14741: ST_TO_ADDR
// end end else
14742: GO 14758
// r := r + 35 ;
14744: LD_ADDR_VAR 0 5
14748: PUSH
14749: LD_VAR 0 5
14753: PUSH
14754: LD_INT 35
14756: PLUS
14757: ST_TO_ADDR
// end end ;
14758: GO 14530
14760: POP
14761: POP
14762: GO 14491
14764: LD_VAR 0 3
14768: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
14769: LD_INT 0
14771: PPUSH
14772: PPUSH
14773: PPUSH
14774: PPUSH
14775: PPUSH
// tmp := [ ] ;
14776: LD_ADDR_VAR 0 6
14780: PUSH
14781: EMPTY
14782: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
14783: LD_ADDR_VAR 0 7
14787: PUSH
14788: LD_INT 22
14790: PUSH
14791: LD_VAR 0 1
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PUSH
14800: LD_INT 30
14802: PUSH
14803: LD_INT 32
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: PPUSH
14814: CALL_OW 69
14818: ST_TO_ADDR
// if bunkers then
14819: LD_VAR 0 7
14823: IFFALSE 14893
// for i in bunkers do
14825: LD_ADDR_VAR 0 4
14829: PUSH
14830: LD_VAR 0 7
14834: PUSH
14835: FOR_IN
14836: IFFALSE 14891
// for j in UnitsInside ( i ) do
14838: LD_ADDR_VAR 0 5
14842: PUSH
14843: LD_VAR 0 4
14847: PPUSH
14848: CALL_OW 313
14852: PUSH
14853: FOR_IN
14854: IFFALSE 14887
// tmp := Replace ( tmp , tmp + 1 , j ) ;
14856: LD_ADDR_VAR 0 6
14860: PUSH
14861: LD_VAR 0 6
14865: PPUSH
14866: LD_VAR 0 6
14870: PUSH
14871: LD_INT 1
14873: PLUS
14874: PPUSH
14875: LD_VAR 0 5
14879: PPUSH
14880: CALL_OW 1
14884: ST_TO_ADDR
14885: GO 14853
14887: POP
14888: POP
14889: GO 14835
14891: POP
14892: POP
// if tmp then
14893: LD_VAR 0 6
14897: IFFALSE 14937
// begin ComExitBuilding ( tmp ) ;
14899: LD_VAR 0 6
14903: PPUSH
14904: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
14908: LD_VAR 0 6
14912: PPUSH
14913: LD_VAR 0 2
14917: PPUSH
14918: CALL_OW 250
14922: PPUSH
14923: LD_VAR 0 2
14927: PPUSH
14928: CALL_OW 251
14932: PPUSH
14933: CALL_OW 174
// end ; end ;
14937: LD_VAR 0 3
14941: RET
// export function CreateNature ; var i , un ; begin
14942: LD_INT 0
14944: PPUSH
14945: PPUSH
14946: PPUSH
// uc_side := 0 ;
14947: LD_ADDR_OWVAR 20
14951: PUSH
14952: LD_INT 0
14954: ST_TO_ADDR
// uc_nation := 0 ;
14955: LD_ADDR_OWVAR 21
14959: PUSH
14960: LD_INT 0
14962: ST_TO_ADDR
// InitHc ;
14963: CALL_OW 19
// hc_class := class_fish ;
14967: LD_ADDR_OWVAR 28
14971: PUSH
14972: LD_INT 20
14974: ST_TO_ADDR
// for i := 1 to 6 do
14975: LD_ADDR_VAR 0 2
14979: PUSH
14980: DOUBLE
14981: LD_INT 1
14983: DEC
14984: ST_TO_ADDR
14985: LD_INT 6
14987: PUSH
14988: FOR_TO
14989: IFFALSE 15008
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
14991: CALL_OW 44
14995: PPUSH
14996: LD_INT 22
14998: PPUSH
14999: LD_INT 0
15001: PPUSH
15002: CALL_OW 49
15006: GO 14988
15008: POP
15009: POP
// for i := 1 to Difficulty + 2 do
15010: LD_ADDR_VAR 0 2
15014: PUSH
15015: DOUBLE
15016: LD_INT 1
15018: DEC
15019: ST_TO_ADDR
15020: LD_OWVAR 67
15024: PUSH
15025: LD_INT 2
15027: PLUS
15028: PUSH
15029: FOR_TO
15030: IFFALSE 15139
// begin hc_sex := sex_male ;
15032: LD_ADDR_OWVAR 27
15036: PUSH
15037: LD_INT 1
15039: ST_TO_ADDR
// uc_side := 0 ;
15040: LD_ADDR_OWVAR 20
15044: PUSH
15045: LD_INT 0
15047: ST_TO_ADDR
// uc_nation := nation_nature ;
15048: LD_ADDR_OWVAR 21
15052: PUSH
15053: LD_INT 0
15055: ST_TO_ADDR
// hc_class := class_tiger ;
15056: LD_ADDR_OWVAR 28
15060: PUSH
15061: LD_INT 14
15063: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
15064: LD_ADDR_OWVAR 31
15068: PUSH
15069: LD_EXP 30
15073: PUSH
15074: LD_INT 0
15076: PUSH
15077: LD_INT 0
15079: PUSH
15080: LD_INT 0
15082: PUSH
15083: EMPTY
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
15089: LD_ADDR_OWVAR 35
15093: PUSH
15094: LD_INT 5
15096: NEG
15097: PPUSH
15098: LD_INT 5
15100: PPUSH
15101: CALL_OW 12
15105: PUSH
15106: LD_OWVAR 67
15110: MUL
15111: ST_TO_ADDR
// un := CreateHuman ;
15112: LD_ADDR_VAR 0 3
15116: PUSH
15117: CALL_OW 44
15121: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15122: LD_VAR 0 3
15126: PPUSH
15127: LD_INT 23
15129: PPUSH
15130: LD_INT 0
15132: PPUSH
15133: CALL_OW 49
// end ;
15137: GO 15029
15139: POP
15140: POP
// for i := 1 to rand ( 3 , 4 ) do
15141: LD_ADDR_VAR 0 2
15145: PUSH
15146: DOUBLE
15147: LD_INT 1
15149: DEC
15150: ST_TO_ADDR
15151: LD_INT 3
15153: PPUSH
15154: LD_INT 4
15156: PPUSH
15157: CALL_OW 12
15161: PUSH
15162: FOR_TO
15163: IFFALSE 15255
// begin hc_sex := sex_male ;
15165: LD_ADDR_OWVAR 27
15169: PUSH
15170: LD_INT 1
15172: ST_TO_ADDR
// uc_side := 0 ;
15173: LD_ADDR_OWVAR 20
15177: PUSH
15178: LD_INT 0
15180: ST_TO_ADDR
// uc_nation := nation_nature ;
15181: LD_ADDR_OWVAR 21
15185: PUSH
15186: LD_INT 0
15188: ST_TO_ADDR
// hc_class := 18 ;
15189: LD_ADDR_OWVAR 28
15193: PUSH
15194: LD_INT 18
15196: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
15197: LD_ADDR_OWVAR 31
15201: PUSH
15202: LD_INT 0
15204: PUSH
15205: LD_INT 0
15207: PUSH
15208: LD_INT 0
15210: PUSH
15211: LD_INT 0
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: ST_TO_ADDR
// hc_agressivity := 0 ;
15220: LD_ADDR_OWVAR 35
15224: PUSH
15225: LD_INT 0
15227: ST_TO_ADDR
// un := CreateHuman ;
15228: LD_ADDR_VAR 0 3
15232: PUSH
15233: CALL_OW 44
15237: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15238: LD_VAR 0 3
15242: PPUSH
15243: LD_INT 23
15245: PPUSH
15246: LD_INT 0
15248: PPUSH
15249: CALL_OW 49
// end ;
15253: GO 15162
15255: POP
15256: POP
// for i := 1 to [ 4 , 3 , 3 , 3 ] [ Difficulty ] do
15257: LD_ADDR_VAR 0 2
15261: PUSH
15262: DOUBLE
15263: LD_INT 1
15265: DEC
15266: ST_TO_ADDR
15267: LD_INT 4
15269: PUSH
15270: LD_INT 3
15272: PUSH
15273: LD_INT 3
15275: PUSH
15276: LD_INT 3
15278: PUSH
15279: EMPTY
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: PUSH
15285: LD_OWVAR 67
15289: ARRAY
15290: PUSH
15291: FOR_TO
15292: IFFALSE 15401
// begin hc_sex := sex_male ;
15294: LD_ADDR_OWVAR 27
15298: PUSH
15299: LD_INT 1
15301: ST_TO_ADDR
// uc_side := 0 ;
15302: LD_ADDR_OWVAR 20
15306: PUSH
15307: LD_INT 0
15309: ST_TO_ADDR
// uc_nation := nation_nature ;
15310: LD_ADDR_OWVAR 21
15314: PUSH
15315: LD_INT 0
15317: ST_TO_ADDR
// hc_class := class_apeman ;
15318: LD_ADDR_OWVAR 28
15322: PUSH
15323: LD_INT 12
15325: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
15326: LD_ADDR_OWVAR 31
15330: PUSH
15331: LD_INT 0
15333: PPUSH
15334: LD_INT 2
15336: PPUSH
15337: CALL_OW 12
15341: PUSH
15342: LD_INT 0
15344: PUSH
15345: LD_INT 0
15347: PUSH
15348: LD_INT 0
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: ST_TO_ADDR
// hc_agressivity = rand ( - 10 , 10 ) ;
15357: LD_ADDR_OWVAR 35
15361: PUSH
15362: LD_INT 10
15364: NEG
15365: PPUSH
15366: LD_INT 10
15368: PPUSH
15369: CALL_OW 12
15373: ST_TO_ADDR
// un := CreateHuman ;
15374: LD_ADDR_VAR 0 3
15378: PUSH
15379: CALL_OW 44
15383: ST_TO_ADDR
// PlaceUnitArea ( un , ApeNatureArea , false ) ;
15384: LD_VAR 0 3
15388: PPUSH
15389: LD_INT 26
15391: PPUSH
15392: LD_INT 0
15394: PPUSH
15395: CALL_OW 49
// end ;
15399: GO 15291
15401: POP
15402: POP
// end ; end_of_file
15403: LD_VAR 0 1
15407: RET
// on UnitDestroyed ( unit ) do var i ;
15408: LD_INT 0
15410: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
15411: LD_VAR 0 1
15415: PPUSH
15416: CALL 34517 0 1
// if unit = JMM then
15420: LD_VAR 0 1
15424: PUSH
15425: LD_EXP 1
15429: EQUAL
15430: IFFALSE 15439
// YouLost ( JMM ) ;
15432: LD_STRING JMM
15434: PPUSH
15435: CALL_OW 104
// if unit in russianTanks then
15439: LD_VAR 0 1
15443: PUSH
15444: LD_EXP 32
15448: IN
15449: IFFALSE 15467
// russianTanks := russianTanks diff unit ;
15451: LD_ADDR_EXP 32
15455: PUSH
15456: LD_EXP 32
15460: PUSH
15461: LD_VAR 0 1
15465: DIFF
15466: ST_TO_ADDR
// if unit in russianTimeLapsers then
15467: LD_VAR 0 1
15471: PUSH
15472: LD_EXP 33
15476: IN
15477: IFFALSE 15495
// russianTimeLapsers := russianTimeLapsers diff unit ;
15479: LD_ADDR_EXP 33
15483: PUSH
15484: LD_EXP 33
15488: PUSH
15489: LD_VAR 0 1
15493: DIFF
15494: ST_TO_ADDR
// if unit in RuScientists then
15495: LD_VAR 0 1
15499: PUSH
15500: LD_EXP 27
15504: IN
15505: IFFALSE 15537
// begin RuScientists := RuScientists diff unit ;
15507: LD_ADDR_EXP 27
15511: PUSH
15512: LD_EXP 27
15516: PUSH
15517: LD_VAR 0 1
15521: DIFF
15522: ST_TO_ADDR
// sciCounter := sciCounter + 1 ;
15523: LD_ADDR_EXP 28
15527: PUSH
15528: LD_EXP 28
15532: PUSH
15533: LD_INT 1
15535: PLUS
15536: ST_TO_ADDR
// end ; end ;
15537: PPOPN 2
15539: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_laser then
15540: LD_VAR 0 3
15544: PPUSH
15545: CALL_OW 264
15549: PUSH
15550: LD_INT 9
15552: EQUAL
15553: IFFALSE 15569
// laserCounterDestroy := laserCounterDestroy + 1 ;
15555: LD_ADDR_EXP 43
15559: PUSH
15560: LD_EXP 43
15564: PUSH
15565: LD_INT 1
15567: PLUS
15568: ST_TO_ADDR
// end ;
15569: PPOPN 3
15571: END
// on UnitTeleported ( building , human ) do begin if human in FilterAllUnits ( [ f_side , 6 ] ) then
15572: LD_VAR 0 2
15576: PUSH
15577: LD_INT 22
15579: PUSH
15580: LD_INT 6
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PPUSH
15587: CALL_OW 69
15591: IN
15592: IFFALSE 15647
// begin if GetType ( human ) = unit_vehicle then
15594: LD_VAR 0 2
15598: PPUSH
15599: CALL_OW 247
15603: PUSH
15604: LD_INT 2
15606: EQUAL
15607: IFFALSE 15624
// human := IsDrivenBy ( human ) ;
15609: LD_ADDR_VAR 0 2
15613: PUSH
15614: LD_VAR 0 2
15618: PPUSH
15619: CALL_OW 311
15623: ST_TO_ADDR
// SetTag ( human , GetTag ( human ) + 10 ) ;
15624: LD_VAR 0 2
15628: PPUSH
15629: LD_VAR 0 2
15633: PPUSH
15634: CALL_OW 110
15638: PUSH
15639: LD_INT 10
15641: PLUS
15642: PPUSH
15643: CALL_OW 109
// end ; if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
15647: LD_VAR 0 1
15651: PUSH
15652: LD_INT 10
15654: EQUAL
15655: PUSH
15656: LD_VAR 0 2
15660: PPUSH
15661: CALL_OW 255
15665: PUSH
15666: LD_INT 1
15668: EQUAL
15669: AND
15670: PUSH
15671: LD_EXP 40
15675: PUSH
15676: LD_INT 0
15678: EQUAL
15679: AND
15680: IFFALSE 15792
// begin eventVar1 = 1 ;
15682: LD_ADDR_EXP 40
15686: PUSH
15687: LD_INT 1
15689: ST_TO_ADDR
// teleportExplored = 1 ;
15690: LD_ADDR_EXP 26
15694: PUSH
15695: LD_INT 1
15697: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
15698: LD_STRING M2a
15700: PPUSH
15701: CALL_OW 337
// wait ( 0 0$2 ) ;
15705: LD_INT 70
15707: PPUSH
15708: CALL_OW 67
// DialogueOn ;
15712: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
15716: LD_INT 22
15718: PUSH
15719: LD_INT 1
15721: PUSH
15722: EMPTY
15723: LIST
15724: LIST
15725: PUSH
15726: LD_INT 21
15728: PUSH
15729: LD_INT 1
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: PPUSH
15740: CALL_OW 69
15744: PPUSH
15745: LD_STRING DT3a-Sol1-1
15747: PPUSH
15748: LD_STRING DT3a-FSol1-1
15750: PPUSH
15751: CALL 12129 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
15755: LD_EXP 1
15759: PPUSH
15760: LD_STRING DT3a-JMM-1
15762: PPUSH
15763: CALL_OW 88
// CenterNowOnUnits ( human ) ;
15767: LD_VAR 0 2
15771: PPUSH
15772: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
15776: LD_EXP 1
15780: PPUSH
15781: LD_STRING DT3a-JMM-1a
15783: PPUSH
15784: CALL_OW 88
// DialogueOff ;
15788: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
15792: LD_VAR 0 1
15796: PUSH
15797: LD_INT 10
15799: EQUAL
15800: PUSH
15801: LD_VAR 0 2
15805: PPUSH
15806: CALL_OW 247
15810: PUSH
15811: LD_INT 2
15813: EQUAL
15814: AND
15815: PUSH
15816: LD_VAR 0 2
15820: PPUSH
15821: CALL_OW 255
15825: PUSH
15826: LD_INT 3
15828: EQUAL
15829: AND
15830: IFFALSE 15896
// begin if vehicleTeleported = 0 then
15832: LD_EXP 21
15836: PUSH
15837: LD_INT 0
15839: EQUAL
15840: IFFALSE 15857
// begin wait ( 0 0$03 ) ;
15842: LD_INT 105
15844: PPUSH
15845: CALL_OW 67
// vehicleTeleported := 1 ;
15849: LD_ADDR_EXP 21
15853: PUSH
15854: LD_INT 1
15856: ST_TO_ADDR
// end ; if vehicleTeleported = 2 then
15857: LD_EXP 21
15861: PUSH
15862: LD_INT 2
15864: EQUAL
15865: IFFALSE 15882
// begin wait ( 0 0$03 ) ;
15867: LD_INT 105
15869: PPUSH
15870: CALL_OW 67
// vehicleTeleported := 3 ;
15874: LD_ADDR_EXP 21
15878: PUSH
15879: LD_INT 3
15881: ST_TO_ADDR
// end ; tpCounter := tpCounter + 1 ;
15882: LD_ADDR_EXP 22
15886: PUSH
15887: LD_EXP 22
15891: PUSH
15892: LD_INT 1
15894: PLUS
15895: ST_TO_ADDR
// end ; end ;
15896: PPOPN 2
15898: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
15899: LD_VAR 0 1
15903: PPUSH
15904: LD_VAR 0 2
15908: PPUSH
15909: CALL 34639 0 2
// if GetWeapon ( vehicle ) = us_rocket_launcher then
15913: LD_VAR 0 1
15917: PPUSH
15918: CALL_OW 264
15922: PUSH
15923: LD_INT 7
15925: EQUAL
15926: IFFALSE 15936
// rocketBuilded := true ;
15928: LD_ADDR_EXP 44
15932: PUSH
15933: LD_INT 1
15935: ST_TO_ADDR
// if GetSide ( vehicle ) <> 3 then
15936: LD_VAR 0 1
15940: PPUSH
15941: CALL_OW 255
15945: PUSH
15946: LD_INT 3
15948: NONEQUAL
15949: IFFALSE 15953
// exit ;
15951: GO 16072
// if factory in [ ru_fact , rufab2 ] then
15953: LD_VAR 0 2
15957: PUSH
15958: LD_INT 21
15960: PUSH
15961: LD_INT 112
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: IN
15968: IFFALSE 16072
// begin if GetWeapon ( vehicle ) = ru_time_lapser then
15970: LD_VAR 0 1
15974: PPUSH
15975: CALL_OW 264
15979: PUSH
15980: LD_INT 49
15982: EQUAL
15983: IFFALSE 16019
// begin russianTimeLapsers := Join ( russianTimeLapsers , vehicle ) ;
15985: LD_ADDR_EXP 33
15989: PUSH
15990: LD_EXP 33
15994: PPUSH
15995: LD_VAR 0 1
15999: PPUSH
16000: CALL 76229 0 2
16004: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
16005: LD_VAR 0 1
16009: PPUSH
16010: LD_INT 137
16012: PPUSH
16013: CALL_OW 120
// end else
16017: GO 16072
// if not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_big_cargo_bay , ru_crane , ru_bulldozer ] then
16019: LD_VAR 0 1
16023: PPUSH
16024: CALL_OW 264
16028: PUSH
16029: LD_INT 51
16031: PUSH
16032: LD_EXP 46
16036: PUSH
16037: LD_INT 52
16039: PUSH
16040: LD_INT 53
16042: PUSH
16043: EMPTY
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: IN
16049: NOT
16050: IFFALSE 16072
// begin russianTanks := Join ( russianTanks , vehicle ) ;
16052: LD_ADDR_EXP 32
16056: PUSH
16057: LD_EXP 32
16061: PPUSH
16062: LD_VAR 0 1
16066: PPUSH
16067: CALL 76229 0 2
16071: ST_TO_ADDR
// end ; end ; end ;
16072: PPOPN 2
16074: END
// on LeaveVehicle ( vehicle , human ) do var i ;
16075: LD_INT 0
16077: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
16078: LD_VAR 0 2
16082: PPUSH
16083: CALL_OW 255
16087: PUSH
16088: LD_INT 3
16090: EQUAL
16091: PUSH
16092: LD_VAR 0 2
16096: PPUSH
16097: CALL_OW 257
16101: PUSH
16102: LD_INT 3
16104: EQUAL
16105: AND
16106: PUSH
16107: LD_INT 21
16109: PPUSH
16110: CALL_OW 255
16114: PUSH
16115: LD_INT 3
16117: EQUAL
16118: AND
16119: PUSH
16120: LD_INT 21
16122: PPUSH
16123: CALL_OW 302
16127: AND
16128: IFFALSE 16142
// ComEnterUnit ( human , ru_fact ) ;
16130: LD_VAR 0 2
16134: PPUSH
16135: LD_INT 21
16137: PPUSH
16138: CALL_OW 120
// end ;
16142: PPOPN 3
16144: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16145: LD_VAR 0 1
16149: PPUSH
16150: CALL 34623 0 1
// end ; end_of_file
16154: PPOPN 1
16156: END
// every 0 0$1 trigger ruAI = 1 do
16157: LD_EXP 34
16161: PUSH
16162: LD_INT 1
16164: EQUAL
16165: IFFALSE 16277
16167: GO 16169
16169: DISABLE
// begin enable ;
16170: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
16171: LD_INT 3
16173: PPUSH
16174: LD_INT 6
16176: PPUSH
16177: LD_INT 9
16179: PPUSH
16180: LD_EXP 31
16184: PPUSH
16185: CALL 12979 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
16189: LD_INT 3
16191: PPUSH
16192: LD_INT 4
16194: PPUSH
16195: LD_INT 10
16197: PPUSH
16198: LD_EXP 31
16202: PPUSH
16203: CALL 12979 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
16207: LD_INT 3
16209: PPUSH
16210: LD_INT 9
16212: PPUSH
16213: CALL 13814 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
16217: LD_INT 3
16219: PPUSH
16220: LD_INT 10
16222: PPUSH
16223: CALL 13814 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
16227: LD_INT 3
16229: PPUSH
16230: LD_INT 16
16232: PPUSH
16233: LD_INT 9
16235: PPUSH
16236: LD_INT 91
16238: PPUSH
16239: CALL 13346 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
16243: LD_INT 3
16245: PPUSH
16246: LD_INT 17
16248: PPUSH
16249: LD_INT 10
16251: PPUSH
16252: LD_INT 47
16254: PUSH
16255: LD_INT 129
16257: PUSH
16258: LD_INT 135
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: LIST
16265: PPUSH
16266: CALL 13346 0 4
// IntBazooka ( 3 ) ;
16270: LD_INT 3
16272: PPUSH
16273: CALL 14141 0 1
// end ;
16277: END
// every 0 0$50 trigger russianTanks >= [ 3 , 4 , 5 , 6 ] [ Difficulty ] do var i , tmp ;
16278: LD_EXP 32
16282: PUSH
16283: LD_INT 3
16285: PUSH
16286: LD_INT 4
16288: PUSH
16289: LD_INT 5
16291: PUSH
16292: LD_INT 6
16294: PUSH
16295: EMPTY
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: PUSH
16301: LD_OWVAR 67
16305: ARRAY
16306: GREATEREQUAL
16307: IFFALSE 16559
16309: GO 16311
16311: DISABLE
16312: LD_INT 0
16314: PPUSH
16315: PPUSH
// begin enable ;
16316: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
16317: LD_ADDR_VAR 0 2
16321: PUSH
16322: LD_EXP 32
16326: PUSH
16327: LD_EXP 33
16331: UNION
16332: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
16333: LD_ADDR_EXP 32
16337: PUSH
16338: LD_EXP 32
16342: PUSH
16343: LD_VAR 0 2
16347: DIFF
16348: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
16349: LD_ADDR_EXP 33
16353: PUSH
16354: LD_EXP 33
16358: PUSH
16359: LD_VAR 0 2
16363: DIFF
16364: ST_TO_ADDR
// if vehicleTeleported >= 4 then
16365: LD_EXP 21
16369: PUSH
16370: LD_INT 4
16372: GREATEREQUAL
16373: IFFALSE 16391
// attackTactic := rand ( 1 , 2 ) ;
16375: LD_ADDR_EXP 36
16379: PUSH
16380: LD_INT 1
16382: PPUSH
16383: LD_INT 2
16385: PPUSH
16386: CALL_OW 12
16390: ST_TO_ADDR
// if IsOk ( ruteleprt ) then
16391: LD_INT 10
16393: PPUSH
16394: CALL_OW 302
16398: IFFALSE 16481
// begin for i in tmp do
16400: LD_ADDR_VAR 0 1
16404: PUSH
16405: LD_VAR 0 2
16409: PUSH
16410: FOR_IN
16411: IFFALSE 16454
// if attackTactic < 2 then
16413: LD_EXP 36
16417: PUSH
16418: LD_INT 2
16420: LESS
16421: IFFALSE 16437
// ComEnterUnit ( i , ruteleprt ) else
16423: LD_VAR 0 1
16427: PPUSH
16428: LD_INT 10
16430: PPUSH
16431: CALL_OW 120
16435: GO 16452
// ComMoveXY ( i , 88 , 69 ) ;
16437: LD_VAR 0 1
16441: PPUSH
16442: LD_INT 88
16444: PPUSH
16445: LD_INT 69
16447: PPUSH
16448: CALL_OW 111
16452: GO 16410
16454: POP
16455: POP
// repeat wait ( 0 0$2 ) ;
16456: LD_INT 70
16458: PPUSH
16459: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
16463: LD_VAR 0 2
16467: PPUSH
16468: LD_INT 60
16470: PUSH
16471: EMPTY
16472: LIST
16473: PPUSH
16474: CALL_OW 72
16478: NOT
16479: IFFALSE 16456
// end ; repeat wait ( 0 0$1 ) ;
16481: LD_INT 35
16483: PPUSH
16484: CALL_OW 67
// for i in tmp do
16488: LD_ADDR_VAR 0 1
16492: PUSH
16493: LD_VAR 0 2
16497: PUSH
16498: FOR_IN
16499: IFFALSE 16531
// if not IsOk ( i ) then
16501: LD_VAR 0 1
16505: PPUSH
16506: CALL_OW 302
16510: NOT
16511: IFFALSE 16529
// tmp := tmp diff i ;
16513: LD_ADDR_VAR 0 2
16517: PUSH
16518: LD_VAR 0 2
16522: PUSH
16523: LD_VAR 0 1
16527: DIFF
16528: ST_TO_ADDR
16529: GO 16498
16531: POP
16532: POP
// AgressiveMove ( tmp , [ 140 , 112 ] ) ;
16533: LD_VAR 0 2
16537: PPUSH
16538: LD_INT 140
16540: PUSH
16541: LD_INT 112
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: PPUSH
16548: CALL 78835 0 2
// until not tmp ;
16552: LD_VAR 0 2
16556: NOT
16557: IFFALSE 16481
// end ;
16559: PPOPN 2
16561: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
16562: LD_INT 4
16564: PPUSH
16565: CALL_OW 303
16569: IFFALSE 16584
16571: GO 16573
16573: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
16574: LD_INT 3
16576: PPUSH
16577: LD_INT 4
16579: PPUSH
16580: CALL 14769 0 2
16584: END
// every 0 0$1 do
16585: GO 16587
16587: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
16588: LD_INT 3
16590: PPUSH
16591: LD_INT 91
16593: PPUSH
16594: LD_INT 3
16596: PPUSH
16597: CALL 12744 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
16601: LD_INT 3
16603: PPUSH
16604: LD_INT 47
16606: PPUSH
16607: LD_INT 3
16609: PPUSH
16610: CALL 12744 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
16614: LD_INT 3
16616: PPUSH
16617: LD_INT 129
16619: PPUSH
16620: LD_INT 3
16622: PPUSH
16623: CALL 12744 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
16627: LD_INT 3
16629: PPUSH
16630: LD_INT 3
16632: PPUSH
16633: LD_INT 3
16635: PPUSH
16636: CALL 12744 0 3
// end ;
16640: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
16641: LD_INT 22
16643: PUSH
16644: LD_INT 1
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: PUSH
16651: LD_INT 21
16653: PUSH
16654: LD_INT 3
16656: PUSH
16657: EMPTY
16658: LIST
16659: LIST
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: PPUSH
16665: CALL_OW 69
16669: IFFALSE 16738
16671: GO 16673
16673: DISABLE
// begin wait ( 0 0$40 ) ;
16674: LD_INT 1400
16676: PPUSH
16677: CALL_OW 67
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
16681: LD_INT 3
16683: PPUSH
16684: LD_INT 21
16686: PPUSH
16687: LD_INT 3
16689: PUSH
16690: LD_INT 4
16692: PUSH
16693: LD_INT 5
16695: PUSH
16696: LD_INT 6
16698: PUSH
16699: EMPTY
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: PUSH
16705: LD_OWVAR 67
16709: ARRAY
16710: PPUSH
16711: LD_INT 46
16713: PUSH
16714: LD_INT 45
16716: PUSH
16717: LD_INT 44
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: LIST
16724: PPUSH
16725: LD_INT 3
16727: PPUSH
16728: LD_INT 3
16730: PPUSH
16731: LD_INT 24
16733: PPUSH
16734: CALL 13994 0 7
// end ;
16738: END
// every 6 6$0 + 2 2$00 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
16739: LD_EXP 20
16743: PUSH
16744: LD_INT 2
16746: EQUAL
16747: PUSH
16748: LD_INT 21
16750: PPUSH
16751: CALL_OW 255
16755: PUSH
16756: LD_INT 3
16758: EQUAL
16759: AND
16760: PUSH
16761: LD_INT 112
16763: PPUSH
16764: CALL_OW 255
16768: PUSH
16769: LD_INT 3
16771: EQUAL
16772: AND
16773: PUSH
16774: LD_INT 21
16776: PPUSH
16777: CALL_OW 302
16781: AND
16782: PUSH
16783: LD_INT 112
16785: PPUSH
16786: CALL_OW 302
16790: AND
16791: PUSH
16792: LD_INT 22
16794: PUSH
16795: LD_INT 3
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: PUSH
16802: LD_INT 21
16804: PUSH
16805: LD_INT 2
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: PUSH
16812: LD_INT 50
16814: PUSH
16815: EMPTY
16816: LIST
16817: PUSH
16818: LD_INT 3
16820: PUSH
16821: LD_INT 58
16823: PUSH
16824: EMPTY
16825: LIST
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: EMPTY
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: PPUSH
16837: CALL_OW 69
16841: PUSH
16842: LD_INT 18
16844: PPUSH
16845: LD_INT 22
16847: PUSH
16848: LD_INT 3
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: PUSH
16855: LD_INT 21
16857: PUSH
16858: LD_INT 2
16860: PUSH
16861: EMPTY
16862: LIST
16863: LIST
16864: PUSH
16865: EMPTY
16866: LIST
16867: LIST
16868: PPUSH
16869: CALL_OW 70
16873: PUSH
16874: LD_INT 0
16876: EQUAL
16877: DIFF
16878: AND
16879: IFFALSE 17005
16881: GO 16883
16883: DISABLE
// begin enable ;
16884: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
16885: LD_INT 3
16887: PPUSH
16888: LD_INT 21
16890: PPUSH
16891: LD_INT 3
16893: PUSH
16894: LD_INT 4
16896: PUSH
16897: LD_INT 5
16899: PUSH
16900: LD_INT 6
16902: PUSH
16903: EMPTY
16904: LIST
16905: LIST
16906: LIST
16907: LIST
16908: PUSH
16909: LD_OWVAR 67
16913: ARRAY
16914: PPUSH
16915: LD_INT 46
16917: PUSH
16918: LD_INT 45
16920: PUSH
16921: LD_INT 44
16923: PUSH
16924: EMPTY
16925: LIST
16926: LIST
16927: LIST
16928: PPUSH
16929: LD_INT 3
16931: PPUSH
16932: LD_INT 3
16934: PPUSH
16935: LD_INT 24
16937: PPUSH
16938: CALL 13994 0 7
// if russianTimeLapsers = 0 then
16942: LD_EXP 33
16946: PUSH
16947: LD_INT 0
16949: EQUAL
16950: IFFALSE 17005
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
16952: LD_INT 3
16954: PPUSH
16955: LD_INT 112
16957: PPUSH
16958: LD_INT 1
16960: PUSH
16961: LD_INT 2
16963: PUSH
16964: LD_INT 2
16966: PUSH
16967: LD_INT 2
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: PUSH
16976: LD_OWVAR 67
16980: ARRAY
16981: PPUSH
16982: LD_INT 49
16984: PUSH
16985: LD_INT 49
16987: PUSH
16988: EMPTY
16989: LIST
16990: LIST
16991: PPUSH
16992: LD_INT 3
16994: PPUSH
16995: LD_INT 3
16997: PPUSH
16998: LD_INT 24
17000: PPUSH
17001: CALL 13994 0 7
// end ;
17005: END
// every 0 0$1 trigger arabianMines do var i ;
17006: LD_EXP 37
17010: IFFALSE 17131
17012: GO 17014
17014: DISABLE
17015: LD_INT 0
17017: PPUSH
// begin enable ;
17018: ENABLE
// for i in arabianMines do
17019: LD_ADDR_VAR 0 1
17023: PUSH
17024: LD_EXP 37
17028: PUSH
17029: FOR_IN
17030: IFFALSE 17129
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
17032: LD_INT 22
17034: PUSH
17035: LD_INT 1
17037: PUSH
17038: EMPTY
17039: LIST
17040: LIST
17041: PUSH
17042: LD_INT 92
17044: PUSH
17045: LD_VAR 0 1
17049: PUSH
17050: LD_INT 1
17052: ARRAY
17053: PUSH
17054: LD_VAR 0 1
17058: PUSH
17059: LD_INT 2
17061: ARRAY
17062: PUSH
17063: LD_INT 3
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: LIST
17070: LIST
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: PPUSH
17076: CALL_OW 69
17080: IFFALSE 17127
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
17082: LD_VAR 0 1
17086: PUSH
17087: LD_INT 1
17089: ARRAY
17090: PPUSH
17091: LD_VAR 0 1
17095: PUSH
17096: LD_INT 2
17098: ARRAY
17099: PPUSH
17100: LD_INT 5
17102: PPUSH
17103: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
17107: LD_ADDR_EXP 37
17111: PUSH
17112: LD_EXP 37
17116: PPUSH
17117: LD_VAR 0 1
17121: PPUSH
17122: CALL_OW 3
17126: ST_TO_ADDR
// end ; end ;
17127: GO 17029
17129: POP
17130: POP
// end ;
17131: PPOPN 1
17133: END
// every 0 0$10 trigger vehicleTeleported >= 4 and tpCounter mod 12 = 0 do var i , hexes ;
17134: LD_EXP 21
17138: PUSH
17139: LD_INT 4
17141: GREATEREQUAL
17142: PUSH
17143: LD_EXP 22
17147: PUSH
17148: LD_INT 12
17150: MOD
17151: PUSH
17152: LD_INT 0
17154: EQUAL
17155: AND
17156: IFFALSE 17270
17158: GO 17160
17160: DISABLE
17161: LD_INT 0
17163: PPUSH
17164: PPUSH
// begin enable ;
17165: ENABLE
// hexes := [ [ 122 , 142 ] , [ 101 , 127 ] , [ 104 , 104 ] , [ 46 , 81 ] ] ;
17166: LD_ADDR_VAR 0 2
17170: PUSH
17171: LD_INT 122
17173: PUSH
17174: LD_INT 142
17176: PUSH
17177: EMPTY
17178: LIST
17179: LIST
17180: PUSH
17181: LD_INT 101
17183: PUSH
17184: LD_INT 127
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: PUSH
17191: LD_INT 104
17193: PUSH
17194: LD_INT 104
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: PUSH
17201: LD_INT 46
17203: PUSH
17204: LD_INT 81
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: ST_TO_ADDR
// i := rand ( 1 , 4 ) ;
17217: LD_ADDR_VAR 0 1
17221: PUSH
17222: LD_INT 1
17224: PPUSH
17225: LD_INT 4
17227: PPUSH
17228: CALL_OW 12
17232: ST_TO_ADDR
// TeleportExit ( ruteleprt , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17233: LD_INT 10
17235: PPUSH
17236: LD_VAR 0 2
17240: PUSH
17241: LD_VAR 0 1
17245: ARRAY
17246: PUSH
17247: LD_INT 1
17249: ARRAY
17250: PPUSH
17251: LD_VAR 0 2
17255: PUSH
17256: LD_VAR 0 1
17260: ARRAY
17261: PUSH
17262: LD_INT 2
17264: ARRAY
17265: PPUSH
17266: CALL_OW 243
// end ; end_of_file
17270: PPOPN 2
17272: END
// every 0 0$1 trigger IsDead ( ruheadlab ) do
17273: LD_INT 3
17275: PPUSH
17276: CALL_OW 301
17280: IFFALSE 17477
17282: GO 17284
17284: DISABLE
// begin DialogueOn ;
17285: CALL_OW 6
// if sciCounter = 0 then
17289: LD_EXP 28
17293: PUSH
17294: LD_INT 0
17296: EQUAL
17297: IFFALSE 17325
// begin Say ( JMM , D7a-JMM-1 ) ;
17299: LD_EXP 1
17303: PPUSH
17304: LD_STRING D7a-JMM-1
17306: PPUSH
17307: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
17311: LD_EXP 15
17315: PPUSH
17316: LD_STRING D7a-Pow-1
17318: PPUSH
17319: CALL_OW 94
// end else
17323: GO 17469
// if sciCounter < 6 then
17325: LD_EXP 28
17329: PUSH
17330: LD_INT 6
17332: LESS
17333: IFFALSE 17361
// begin Say ( JMM , D7b-JMM-1 ) ;
17335: LD_EXP 1
17339: PPUSH
17340: LD_STRING D7b-JMM-1
17342: PPUSH
17343: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
17347: LD_EXP 15
17351: PPUSH
17352: LD_STRING D7b-Pow-1
17354: PPUSH
17355: CALL_OW 94
// end else
17359: GO 17469
// begin Say ( JMM , D7c-JMM-1 ) ;
17361: LD_EXP 1
17365: PPUSH
17366: LD_STRING D7c-JMM-1
17368: PPUSH
17369: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
17373: LD_EXP 15
17377: PPUSH
17378: LD_STRING D7c-Pow-1
17380: PPUSH
17381: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
17385: LD_EXP 1
17389: PPUSH
17390: LD_STRING D7d-JMM-1
17392: PPUSH
17393: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
17397: LD_EXP 15
17401: PPUSH
17402: LD_STRING D7d-Pow-1
17404: PPUSH
17405: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
17409: LD_EXP 1
17413: PPUSH
17414: LD_STRING D7d-JMM-2
17416: PPUSH
17417: CALL_OW 88
// if askSiberite = 1 then
17421: LD_EXP 25
17425: PUSH
17426: LD_INT 1
17428: EQUAL
17429: IFFALSE 17445
// Say ( JMM , D7d-JMM-2a ) else
17431: LD_EXP 1
17435: PPUSH
17436: LD_STRING D7d-JMM-2a
17438: PPUSH
17439: CALL_OW 88
17443: GO 17457
// SayRadio ( Powell , D7d-Pow-2 ) ;
17445: LD_EXP 15
17449: PPUSH
17450: LD_STRING D7d-Pow-2
17452: PPUSH
17453: CALL_OW 94
// SayRadio ( Powell , D7d-Pow-2a ) ;
17457: LD_EXP 15
17461: PPUSH
17462: LD_STRING D7d-Pow-2a
17464: PPUSH
17465: CALL_OW 94
// end ; DialogueOff ;
17469: CALL_OW 7
// FinishMission ;
17473: CALL 17478 0 0
// end ;
17477: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
17478: LD_INT 0
17480: PPUSH
17481: PPUSH
17482: PPUSH
17483: PPUSH
// m1 := false ;
17484: LD_ADDR_VAR 0 2
17488: PUSH
17489: LD_INT 0
17491: ST_TO_ADDR
// m2 := false ;
17492: LD_ADDR_VAR 0 3
17496: PUSH
17497: LD_INT 0
17499: ST_TO_ADDR
// m3 := false ;
17500: LD_ADDR_VAR 0 4
17504: PUSH
17505: LD_INT 0
17507: ST_TO_ADDR
// if not westPathUsed then
17508: LD_EXP 42
17512: NOT
17513: IFFALSE 17522
// SetAchievement ( ACH_PATH ) ;
17515: LD_STRING ACH_PATH
17517: PPUSH
17518: CALL_OW 543
// if not rocketBuilded then
17522: LD_EXP 44
17526: NOT
17527: IFFALSE 17543
// begin wait ( 3 ) ;
17529: LD_INT 3
17531: PPUSH
17532: CALL_OW 67
// SetAchievement ( ACH_ROCKET ) ;
17536: LD_STRING ACH_ROCKET
17538: PPUSH
17539: CALL_OW 543
// end ; if tick <= 40 40$00 then
17543: LD_OWVAR 1
17547: PUSH
17548: LD_INT 84000
17550: LESSEQUAL
17551: IFFALSE 17567
// begin wait ( 3 ) ;
17553: LD_INT 3
17555: PPUSH
17556: CALL_OW 67
// SetAchievement ( ACH_ASPEED_12 ) ;
17560: LD_STRING ACH_ASPEED_12
17562: PPUSH
17563: CALL_OW 543
// end ; if teleportExplored = 1 then
17567: LD_EXP 26
17571: PUSH
17572: LD_INT 1
17574: EQUAL
17575: IFFALSE 17597
// begin m1 := true ;
17577: LD_ADDR_VAR 0 2
17581: PUSH
17582: LD_INT 1
17584: ST_TO_ADDR
// AddMedal ( Teleport , 1 ) ;
17585: LD_STRING Teleport
17587: PPUSH
17588: LD_INT 1
17590: PPUSH
17591: CALL_OW 101
// end else
17595: GO 17608
// AddMedal ( Teleport , - 1 ) ;
17597: LD_STRING Teleport
17599: PPUSH
17600: LD_INT 1
17602: NEG
17603: PPUSH
17604: CALL_OW 101
// if sciCounter > 2 then
17608: LD_EXP 28
17612: PUSH
17613: LD_INT 2
17615: GREATER
17616: IFFALSE 17638
// begin m2 := true ;
17618: LD_ADDR_VAR 0 3
17622: PUSH
17623: LD_INT 1
17625: ST_TO_ADDR
// AddMedal ( Materials , 1 ) ;
17626: LD_STRING Materials
17628: PPUSH
17629: LD_INT 1
17631: PPUSH
17632: CALL_OW 101
// end else
17636: GO 17649
// AddMedal ( Materials , - 1 ) ;
17638: LD_STRING Materials
17640: PPUSH
17641: LD_INT 1
17643: NEG
17644: PPUSH
17645: CALL_OW 101
// if sciCounter >= 6 then
17649: LD_EXP 28
17653: PUSH
17654: LD_INT 6
17656: GREATEREQUAL
17657: IFFALSE 17689
// begin m3 := true ;
17659: LD_ADDR_VAR 0 4
17663: PUSH
17664: LD_INT 1
17666: ST_TO_ADDR
// AddMedal ( Scientists , 1 ) ;
17667: LD_STRING Scientists
17669: PPUSH
17670: LD_INT 1
17672: PPUSH
17673: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
17677: LD_INT 1
17679: PPUSH
17680: LD_STRING 12_SciDed_1
17682: PPUSH
17683: CALL_OW 39
// end else
17687: GO 17710
// begin AddMedal ( Scientists , - 1 ) ;
17689: LD_STRING Scientists
17691: PPUSH
17692: LD_INT 1
17694: NEG
17695: PPUSH
17696: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
17700: LD_INT 0
17702: PPUSH
17703: LD_STRING 12_SciDed_1
17705: PPUSH
17706: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
17710: LD_EXP 24
17714: PPUSH
17715: LD_STRING 12_MainDepositFake_1
17717: PPUSH
17718: CALL_OW 39
// if m1 and m2 and m3 and Difficulty >= 3 then
17722: LD_VAR 0 2
17726: PUSH
17727: LD_VAR 0 3
17731: AND
17732: PUSH
17733: LD_VAR 0 4
17737: AND
17738: PUSH
17739: LD_OWVAR 67
17743: PUSH
17744: LD_INT 3
17746: GREATEREQUAL
17747: AND
17748: IFFALSE 17760
// SetAchievementEX ( ACH_AMER , 12 ) ;
17750: LD_STRING ACH_AMER
17752: PPUSH
17753: LD_INT 12
17755: PPUSH
17756: CALL_OW 564
// GiveMedals ( MAIN ) ;
17760: LD_STRING MAIN
17762: PPUSH
17763: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
17767: LD_INT 22
17769: PUSH
17770: LD_INT 1
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: PUSH
17777: LD_INT 21
17779: PUSH
17780: LD_INT 1
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: PUSH
17787: LD_INT 2
17789: PUSH
17790: LD_INT 25
17792: PUSH
17793: LD_INT 1
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: PUSH
17800: LD_INT 25
17802: PUSH
17803: LD_INT 2
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PUSH
17810: LD_INT 25
17812: PUSH
17813: LD_INT 3
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: LD_INT 25
17822: PUSH
17823: LD_INT 4
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: PUSH
17830: LD_INT 25
17832: PUSH
17833: LD_INT 5
17835: PUSH
17836: EMPTY
17837: LIST
17838: LIST
17839: PUSH
17840: LD_INT 25
17842: PUSH
17843: LD_INT 8
17845: PUSH
17846: EMPTY
17847: LIST
17848: LIST
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: LIST
17863: PPUSH
17864: CALL_OW 69
17868: PPUSH
17869: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
17873: LD_EXP 1
17877: PPUSH
17878: LD_EXP 39
17882: PUSH
17883: LD_STRING JMM
17885: STR
17886: PPUSH
17887: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
17891: LD_EXP 7
17895: PPUSH
17896: LD_EXP 39
17900: PUSH
17901: LD_STRING Brown
17903: STR
17904: PPUSH
17905: CALL 12089 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
17909: LD_EXP 3
17913: PPUSH
17914: LD_EXP 39
17918: PUSH
17919: LD_STRING Donaldson
17921: STR
17922: PPUSH
17923: CALL 12089 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
17927: LD_EXP 4
17931: PPUSH
17932: LD_EXP 39
17936: PUSH
17937: LD_STRING Bobby
17939: STR
17940: PPUSH
17941: CALL 12089 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
17945: LD_EXP 5
17949: PPUSH
17950: LD_EXP 39
17954: PUSH
17955: LD_STRING Cyrus
17957: STR
17958: PPUSH
17959: CALL 12089 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
17963: LD_EXP 2
17967: PPUSH
17968: LD_EXP 39
17972: PUSH
17973: LD_STRING Lisa
17975: STR
17976: PPUSH
17977: CALL 12089 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
17981: LD_EXP 12
17985: PPUSH
17986: LD_EXP 39
17990: PUSH
17991: LD_STRING Frank
17993: STR
17994: PPUSH
17995: CALL 12089 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
17999: LD_EXP 13
18003: PPUSH
18004: LD_EXP 39
18008: PUSH
18009: LD_STRING Kikuchi
18011: STR
18012: PPUSH
18013: CALL 12089 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
18017: LD_EXP 9
18021: PPUSH
18022: LD_EXP 39
18026: PUSH
18027: LD_STRING Houten
18029: STR
18030: PPUSH
18031: CALL 12089 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
18035: LD_EXP 11
18039: PPUSH
18040: LD_EXP 39
18044: PUSH
18045: LD_STRING Gary
18047: STR
18048: PPUSH
18049: CALL 12089 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
18053: LD_EXP 10
18057: PPUSH
18058: LD_EXP 39
18062: PUSH
18063: LD_STRING Cornell
18065: STR
18066: PPUSH
18067: CALL 12089 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18071: LD_EXP 6
18075: PPUSH
18076: LD_EXP 39
18080: PUSH
18081: LD_STRING Denis
18083: STR
18084: PPUSH
18085: CALL 12089 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18089: LD_EXP 8
18093: PPUSH
18094: LD_EXP 39
18098: PUSH
18099: LD_STRING Gladstone
18101: STR
18102: PPUSH
18103: CALL 12089 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
18107: LD_INT 22
18109: PUSH
18110: LD_INT 1
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PUSH
18117: LD_INT 23
18119: PUSH
18120: LD_INT 1
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PUSH
18127: LD_INT 21
18129: PUSH
18130: LD_INT 1
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PUSH
18137: LD_INT 2
18139: PUSH
18140: LD_INT 25
18142: PUSH
18143: LD_INT 1
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: PUSH
18150: LD_INT 25
18152: PUSH
18153: LD_INT 2
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: PUSH
18160: LD_INT 25
18162: PUSH
18163: LD_INT 3
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: PUSH
18170: LD_INT 25
18172: PUSH
18173: LD_INT 4
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PUSH
18180: LD_INT 25
18182: PUSH
18183: LD_INT 5
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: PUSH
18190: LD_INT 25
18192: PUSH
18193: LD_INT 8
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: PUSH
18209: EMPTY
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: PPUSH
18215: CALL_OW 69
18219: PUSH
18220: LD_EXP 1
18224: PUSH
18225: LD_EXP 7
18229: PUSH
18230: LD_EXP 3
18234: PUSH
18235: LD_EXP 4
18239: PUSH
18240: LD_EXP 5
18244: PUSH
18245: LD_EXP 2
18249: PUSH
18250: LD_EXP 12
18254: PUSH
18255: LD_EXP 8
18259: PUSH
18260: LD_EXP 13
18264: PUSH
18265: LD_EXP 6
18269: PUSH
18270: LD_EXP 9
18274: PUSH
18275: LD_EXP 11
18279: PUSH
18280: LD_EXP 10
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: DIFF
18300: PPUSH
18301: LD_STRING 12_other_survivors
18303: PPUSH
18304: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
18308: LD_INT 22
18310: PUSH
18311: LD_INT 1
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: LD_INT 23
18320: PUSH
18321: LD_INT 2
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PUSH
18328: LD_INT 21
18330: PUSH
18331: LD_INT 1
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 2
18340: PUSH
18341: LD_INT 25
18343: PUSH
18344: LD_INT 1
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: PUSH
18351: LD_INT 25
18353: PUSH
18354: LD_INT 2
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: PUSH
18361: LD_INT 25
18363: PUSH
18364: LD_INT 3
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: PUSH
18371: LD_INT 25
18373: PUSH
18374: LD_INT 4
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: PUSH
18381: LD_INT 25
18383: PUSH
18384: LD_INT 5
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: PUSH
18391: LD_INT 25
18393: PUSH
18394: LD_INT 8
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: LIST
18405: LIST
18406: LIST
18407: LIST
18408: LIST
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: LIST
18414: LIST
18415: PPUSH
18416: CALL_OW 69
18420: PPUSH
18421: LD_STRING 12_kurt_squad
18423: PPUSH
18424: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
18428: LD_EXP 14
18432: PPUSH
18433: LD_STRING 12_others
18435: PPUSH
18436: CALL_OW 38
// YouWin ;
18440: CALL_OW 103
// end ; end_of_file
18444: LD_VAR 0 1
18448: RET
// every 0 0$01 trigger ruAI do
18449: LD_EXP 34
18453: IFFALSE 18763
18455: GO 18457
18457: DISABLE
// begin repeat wait ( 0 0$08 ) ;
18458: LD_INT 280
18460: PPUSH
18461: CALL_OW 67
// if cratesSpawned < 12 then
18465: LD_EXP 38
18469: PUSH
18470: LD_INT 12
18472: LESS
18473: IFFALSE 18525
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
18475: LD_INT 105
18477: PPUSH
18478: LD_INT 350
18480: PPUSH
18481: CALL_OW 12
18485: PPUSH
18486: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18490: LD_INT 3
18492: PPUSH
18493: LD_INT 5
18495: PPUSH
18496: CALL_OW 12
18500: PPUSH
18501: LD_INT 21
18503: PPUSH
18504: LD_INT 1
18506: PPUSH
18507: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18511: LD_ADDR_EXP 38
18515: PUSH
18516: LD_EXP 38
18520: PUSH
18521: LD_INT 1
18523: PLUS
18524: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 32 then
18525: LD_EXP 38
18529: PUSH
18530: LD_INT 12
18532: GREATEREQUAL
18533: PUSH
18534: LD_EXP 38
18538: PUSH
18539: LD_INT 32
18541: LESS
18542: AND
18543: IFFALSE 18595
// begin wait ( rand ( 0 0$12 , 0 0$20 ) ) ;
18545: LD_INT 420
18547: PPUSH
18548: LD_INT 700
18550: PPUSH
18551: CALL_OW 12
18555: PPUSH
18556: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18560: LD_INT 3
18562: PPUSH
18563: LD_INT 5
18565: PPUSH
18566: CALL_OW 12
18570: PPUSH
18571: LD_INT 21
18573: PPUSH
18574: LD_INT 1
18576: PPUSH
18577: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18581: LD_ADDR_EXP 38
18585: PUSH
18586: LD_EXP 38
18590: PUSH
18591: LD_INT 1
18593: PLUS
18594: ST_TO_ADDR
// end ; if cratesSpawned >= 32 then
18595: LD_EXP 38
18599: PUSH
18600: LD_INT 32
18602: GREATEREQUAL
18603: IFFALSE 18677
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
18605: LD_INT 21
18607: PPUSH
18608: CALL_OW 435
18612: PUSH
18613: LD_INT 14
18615: LESS
18616: IFFALSE 18627
// wait ( 0 0$10 ) else
18618: LD_INT 350
18620: PPUSH
18621: CALL_OW 67
18625: GO 18642
// wait ( rand ( 0 0$50 , 1 1$30 ) ) ;
18627: LD_INT 1750
18629: PPUSH
18630: LD_INT 3150
18632: PPUSH
18633: CALL_OW 12
18637: PPUSH
18638: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
18642: LD_INT 2
18644: PPUSH
18645: LD_INT 5
18647: PPUSH
18648: CALL_OW 12
18652: PPUSH
18653: LD_INT 21
18655: PPUSH
18656: LD_INT 1
18658: PPUSH
18659: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18663: LD_ADDR_EXP 38
18667: PUSH
18668: LD_EXP 38
18672: PUSH
18673: LD_INT 1
18675: PLUS
18676: ST_TO_ADDR
// end ; if cratesSpawned >= 110 then
18677: LD_EXP 38
18681: PUSH
18682: LD_INT 110
18684: GREATEREQUAL
18685: IFFALSE 18759
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
18687: LD_INT 21
18689: PPUSH
18690: CALL_OW 435
18694: PUSH
18695: LD_INT 14
18697: LESS
18698: IFFALSE 18709
// wait ( 0 0$20 ) else
18700: LD_INT 700
18702: PPUSH
18703: CALL_OW 67
18707: GO 18724
// wait ( rand ( 1 1$10 , 1 1$50 ) ) ;
18709: LD_INT 2450
18711: PPUSH
18712: LD_INT 3850
18714: PPUSH
18715: CALL_OW 12
18719: PPUSH
18720: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
18724: LD_INT 1
18726: PPUSH
18727: LD_INT 5
18729: PPUSH
18730: CALL_OW 12
18734: PPUSH
18735: LD_INT 21
18737: PPUSH
18738: LD_INT 1
18740: PPUSH
18741: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18745: LD_ADDR_EXP 38
18749: PUSH
18750: LD_EXP 38
18754: PUSH
18755: LD_INT 1
18757: PLUS
18758: ST_TO_ADDR
// end ; until false ;
18759: LD_INT 0
18761: IFFALSE 18458
// end ; end_of_file
18763: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont ; export function InitGlobalVariables ; begin
18764: LD_INT 0
18766: PPUSH
// ar_miner := 81 ;
18767: LD_ADDR_EXP 52
18771: PUSH
18772: LD_INT 81
18774: ST_TO_ADDR
// ar_crane := 88 ;
18775: LD_ADDR_EXP 51
18779: PUSH
18780: LD_INT 88
18782: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18783: LD_ADDR_EXP 46
18787: PUSH
18788: LD_INT 89
18790: ST_TO_ADDR
// us_hack := 99 ;
18791: LD_ADDR_EXP 47
18795: PUSH
18796: LD_INT 99
18798: ST_TO_ADDR
// us_artillery := 97 ;
18799: LD_ADDR_EXP 48
18803: PUSH
18804: LD_INT 97
18806: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18807: LD_ADDR_EXP 49
18811: PUSH
18812: LD_INT 91
18814: ST_TO_ADDR
// ar_mortar := 92 ;
18815: LD_ADDR_EXP 50
18819: PUSH
18820: LD_INT 92
18822: ST_TO_ADDR
// ru_flamethrower := 93 ;
18823: LD_ADDR_EXP 53
18827: PUSH
18828: LD_INT 93
18830: ST_TO_ADDR
// ru_radar := 98 ;
18831: LD_ADDR_EXP 45
18835: PUSH
18836: LD_INT 98
18838: ST_TO_ADDR
// tech_Artillery := 80 ;
18839: LD_ADDR_EXP 54
18843: PUSH
18844: LD_INT 80
18846: ST_TO_ADDR
// tech_RadMat := 81 ;
18847: LD_ADDR_EXP 55
18851: PUSH
18852: LD_INT 81
18854: ST_TO_ADDR
// tech_BasicTools := 82 ;
18855: LD_ADDR_EXP 56
18859: PUSH
18860: LD_INT 82
18862: ST_TO_ADDR
// tech_Cargo := 83 ;
18863: LD_ADDR_EXP 57
18867: PUSH
18868: LD_INT 83
18870: ST_TO_ADDR
// tech_Track := 84 ;
18871: LD_ADDR_EXP 58
18875: PUSH
18876: LD_INT 84
18878: ST_TO_ADDR
// tech_Crane := 85 ;
18879: LD_ADDR_EXP 59
18883: PUSH
18884: LD_INT 85
18886: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18887: LD_ADDR_EXP 60
18891: PUSH
18892: LD_INT 86
18894: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18895: LD_ADDR_EXP 61
18899: PUSH
18900: LD_INT 87
18902: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
18903: LD_ADDR_EXP 62
18907: PUSH
18908: LD_INT 88
18910: ST_TO_ADDR
// class_mastodont := 31 ;
18911: LD_ADDR_EXP 63
18915: PUSH
18916: LD_INT 31
18918: ST_TO_ADDR
// end ;
18919: LD_VAR 0 1
18923: RET
// every 1 do
18924: GO 18926
18926: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
18927: CALL 18764 0 0
18931: END
// every 0 0$1 do
18932: GO 18934
18934: DISABLE
// begin enable ;
18935: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18936: LD_STRING updateTimer(
18938: PUSH
18939: LD_OWVAR 1
18943: STR
18944: PUSH
18945: LD_STRING );
18947: STR
18948: PPUSH
18949: CALL_OW 559
// end ;
18953: END
// export function SOS_MapStart ( ) ; begin
18954: LD_INT 0
18956: PPUSH
// if streamModeActive then
18957: LD_EXP 64
18961: IFFALSE 18970
// DefineStreamItems ( true ) ;
18963: LD_INT 1
18965: PPUSH
18966: CALL 20624 0 1
// UpdateFactoryWaypoints ( ) ;
18970: CALL 33485 0 0
// UpdateWarhouseGatheringPoints ( ) ;
18974: CALL 33738 0 0
// end ;
18978: LD_VAR 0 1
18982: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18983: LD_INT 0
18985: PPUSH
// if p2 = 100 then
18986: LD_VAR 0 2
18990: PUSH
18991: LD_INT 100
18993: EQUAL
18994: IFFALSE 19997
// begin if not StreamModeActive then
18996: LD_EXP 64
19000: NOT
19001: IFFALSE 19011
// StreamModeActive := true ;
19003: LD_ADDR_EXP 64
19007: PUSH
19008: LD_INT 1
19010: ST_TO_ADDR
// if p3 = 0 then
19011: LD_VAR 0 3
19015: PUSH
19016: LD_INT 0
19018: EQUAL
19019: IFFALSE 19025
// InitStreamMode ;
19021: CALL 20160 0 0
// if p3 = 1 then
19025: LD_VAR 0 3
19029: PUSH
19030: LD_INT 1
19032: EQUAL
19033: IFFALSE 19043
// sRocket := true ;
19035: LD_ADDR_EXP 69
19039: PUSH
19040: LD_INT 1
19042: ST_TO_ADDR
// if p3 = 2 then
19043: LD_VAR 0 3
19047: PUSH
19048: LD_INT 2
19050: EQUAL
19051: IFFALSE 19061
// sSpeed := true ;
19053: LD_ADDR_EXP 68
19057: PUSH
19058: LD_INT 1
19060: ST_TO_ADDR
// if p3 = 3 then
19061: LD_VAR 0 3
19065: PUSH
19066: LD_INT 3
19068: EQUAL
19069: IFFALSE 19079
// sEngine := true ;
19071: LD_ADDR_EXP 70
19075: PUSH
19076: LD_INT 1
19078: ST_TO_ADDR
// if p3 = 4 then
19079: LD_VAR 0 3
19083: PUSH
19084: LD_INT 4
19086: EQUAL
19087: IFFALSE 19097
// sSpec := true ;
19089: LD_ADDR_EXP 67
19093: PUSH
19094: LD_INT 1
19096: ST_TO_ADDR
// if p3 = 5 then
19097: LD_VAR 0 3
19101: PUSH
19102: LD_INT 5
19104: EQUAL
19105: IFFALSE 19115
// sLevel := true ;
19107: LD_ADDR_EXP 71
19111: PUSH
19112: LD_INT 1
19114: ST_TO_ADDR
// if p3 = 6 then
19115: LD_VAR 0 3
19119: PUSH
19120: LD_INT 6
19122: EQUAL
19123: IFFALSE 19133
// sArmoury := true ;
19125: LD_ADDR_EXP 72
19129: PUSH
19130: LD_INT 1
19132: ST_TO_ADDR
// if p3 = 7 then
19133: LD_VAR 0 3
19137: PUSH
19138: LD_INT 7
19140: EQUAL
19141: IFFALSE 19151
// sRadar := true ;
19143: LD_ADDR_EXP 73
19147: PUSH
19148: LD_INT 1
19150: ST_TO_ADDR
// if p3 = 8 then
19151: LD_VAR 0 3
19155: PUSH
19156: LD_INT 8
19158: EQUAL
19159: IFFALSE 19169
// sBunker := true ;
19161: LD_ADDR_EXP 74
19165: PUSH
19166: LD_INT 1
19168: ST_TO_ADDR
// if p3 = 9 then
19169: LD_VAR 0 3
19173: PUSH
19174: LD_INT 9
19176: EQUAL
19177: IFFALSE 19187
// sHack := true ;
19179: LD_ADDR_EXP 75
19183: PUSH
19184: LD_INT 1
19186: ST_TO_ADDR
// if p3 = 10 then
19187: LD_VAR 0 3
19191: PUSH
19192: LD_INT 10
19194: EQUAL
19195: IFFALSE 19205
// sFire := true ;
19197: LD_ADDR_EXP 76
19201: PUSH
19202: LD_INT 1
19204: ST_TO_ADDR
// if p3 = 11 then
19205: LD_VAR 0 3
19209: PUSH
19210: LD_INT 11
19212: EQUAL
19213: IFFALSE 19223
// sRefresh := true ;
19215: LD_ADDR_EXP 77
19219: PUSH
19220: LD_INT 1
19222: ST_TO_ADDR
// if p3 = 12 then
19223: LD_VAR 0 3
19227: PUSH
19228: LD_INT 12
19230: EQUAL
19231: IFFALSE 19241
// sExp := true ;
19233: LD_ADDR_EXP 78
19237: PUSH
19238: LD_INT 1
19240: ST_TO_ADDR
// if p3 = 13 then
19241: LD_VAR 0 3
19245: PUSH
19246: LD_INT 13
19248: EQUAL
19249: IFFALSE 19259
// sDepot := true ;
19251: LD_ADDR_EXP 79
19255: PUSH
19256: LD_INT 1
19258: ST_TO_ADDR
// if p3 = 14 then
19259: LD_VAR 0 3
19263: PUSH
19264: LD_INT 14
19266: EQUAL
19267: IFFALSE 19277
// sFlag := true ;
19269: LD_ADDR_EXP 80
19273: PUSH
19274: LD_INT 1
19276: ST_TO_ADDR
// if p3 = 15 then
19277: LD_VAR 0 3
19281: PUSH
19282: LD_INT 15
19284: EQUAL
19285: IFFALSE 19295
// sKamikadze := true ;
19287: LD_ADDR_EXP 88
19291: PUSH
19292: LD_INT 1
19294: ST_TO_ADDR
// if p3 = 16 then
19295: LD_VAR 0 3
19299: PUSH
19300: LD_INT 16
19302: EQUAL
19303: IFFALSE 19313
// sTroll := true ;
19305: LD_ADDR_EXP 89
19309: PUSH
19310: LD_INT 1
19312: ST_TO_ADDR
// if p3 = 17 then
19313: LD_VAR 0 3
19317: PUSH
19318: LD_INT 17
19320: EQUAL
19321: IFFALSE 19331
// sSlow := true ;
19323: LD_ADDR_EXP 90
19327: PUSH
19328: LD_INT 1
19330: ST_TO_ADDR
// if p3 = 18 then
19331: LD_VAR 0 3
19335: PUSH
19336: LD_INT 18
19338: EQUAL
19339: IFFALSE 19349
// sLack := true ;
19341: LD_ADDR_EXP 91
19345: PUSH
19346: LD_INT 1
19348: ST_TO_ADDR
// if p3 = 19 then
19349: LD_VAR 0 3
19353: PUSH
19354: LD_INT 19
19356: EQUAL
19357: IFFALSE 19367
// sTank := true ;
19359: LD_ADDR_EXP 93
19363: PUSH
19364: LD_INT 1
19366: ST_TO_ADDR
// if p3 = 20 then
19367: LD_VAR 0 3
19371: PUSH
19372: LD_INT 20
19374: EQUAL
19375: IFFALSE 19385
// sRemote := true ;
19377: LD_ADDR_EXP 94
19381: PUSH
19382: LD_INT 1
19384: ST_TO_ADDR
// if p3 = 21 then
19385: LD_VAR 0 3
19389: PUSH
19390: LD_INT 21
19392: EQUAL
19393: IFFALSE 19403
// sPowell := true ;
19395: LD_ADDR_EXP 95
19399: PUSH
19400: LD_INT 1
19402: ST_TO_ADDR
// if p3 = 22 then
19403: LD_VAR 0 3
19407: PUSH
19408: LD_INT 22
19410: EQUAL
19411: IFFALSE 19421
// sTeleport := true ;
19413: LD_ADDR_EXP 98
19417: PUSH
19418: LD_INT 1
19420: ST_TO_ADDR
// if p3 = 23 then
19421: LD_VAR 0 3
19425: PUSH
19426: LD_INT 23
19428: EQUAL
19429: IFFALSE 19439
// sOilTower := true ;
19431: LD_ADDR_EXP 100
19435: PUSH
19436: LD_INT 1
19438: ST_TO_ADDR
// if p3 = 24 then
19439: LD_VAR 0 3
19443: PUSH
19444: LD_INT 24
19446: EQUAL
19447: IFFALSE 19457
// sShovel := true ;
19449: LD_ADDR_EXP 101
19453: PUSH
19454: LD_INT 1
19456: ST_TO_ADDR
// if p3 = 25 then
19457: LD_VAR 0 3
19461: PUSH
19462: LD_INT 25
19464: EQUAL
19465: IFFALSE 19475
// sSheik := true ;
19467: LD_ADDR_EXP 102
19471: PUSH
19472: LD_INT 1
19474: ST_TO_ADDR
// if p3 = 26 then
19475: LD_VAR 0 3
19479: PUSH
19480: LD_INT 26
19482: EQUAL
19483: IFFALSE 19493
// sEarthquake := true ;
19485: LD_ADDR_EXP 104
19489: PUSH
19490: LD_INT 1
19492: ST_TO_ADDR
// if p3 = 27 then
19493: LD_VAR 0 3
19497: PUSH
19498: LD_INT 27
19500: EQUAL
19501: IFFALSE 19511
// sAI := true ;
19503: LD_ADDR_EXP 105
19507: PUSH
19508: LD_INT 1
19510: ST_TO_ADDR
// if p3 = 28 then
19511: LD_VAR 0 3
19515: PUSH
19516: LD_INT 28
19518: EQUAL
19519: IFFALSE 19529
// sCargo := true ;
19521: LD_ADDR_EXP 108
19525: PUSH
19526: LD_INT 1
19528: ST_TO_ADDR
// if p3 = 29 then
19529: LD_VAR 0 3
19533: PUSH
19534: LD_INT 29
19536: EQUAL
19537: IFFALSE 19547
// sDLaser := true ;
19539: LD_ADDR_EXP 109
19543: PUSH
19544: LD_INT 1
19546: ST_TO_ADDR
// if p3 = 30 then
19547: LD_VAR 0 3
19551: PUSH
19552: LD_INT 30
19554: EQUAL
19555: IFFALSE 19565
// sExchange := true ;
19557: LD_ADDR_EXP 110
19561: PUSH
19562: LD_INT 1
19564: ST_TO_ADDR
// if p3 = 31 then
19565: LD_VAR 0 3
19569: PUSH
19570: LD_INT 31
19572: EQUAL
19573: IFFALSE 19583
// sFac := true ;
19575: LD_ADDR_EXP 111
19579: PUSH
19580: LD_INT 1
19582: ST_TO_ADDR
// if p3 = 32 then
19583: LD_VAR 0 3
19587: PUSH
19588: LD_INT 32
19590: EQUAL
19591: IFFALSE 19601
// sPower := true ;
19593: LD_ADDR_EXP 112
19597: PUSH
19598: LD_INT 1
19600: ST_TO_ADDR
// if p3 = 33 then
19601: LD_VAR 0 3
19605: PUSH
19606: LD_INT 33
19608: EQUAL
19609: IFFALSE 19619
// sRandom := true ;
19611: LD_ADDR_EXP 113
19615: PUSH
19616: LD_INT 1
19618: ST_TO_ADDR
// if p3 = 34 then
19619: LD_VAR 0 3
19623: PUSH
19624: LD_INT 34
19626: EQUAL
19627: IFFALSE 19637
// sShield := true ;
19629: LD_ADDR_EXP 114
19633: PUSH
19634: LD_INT 1
19636: ST_TO_ADDR
// if p3 = 35 then
19637: LD_VAR 0 3
19641: PUSH
19642: LD_INT 35
19644: EQUAL
19645: IFFALSE 19655
// sTime := true ;
19647: LD_ADDR_EXP 115
19651: PUSH
19652: LD_INT 1
19654: ST_TO_ADDR
// if p3 = 36 then
19655: LD_VAR 0 3
19659: PUSH
19660: LD_INT 36
19662: EQUAL
19663: IFFALSE 19673
// sTools := true ;
19665: LD_ADDR_EXP 116
19669: PUSH
19670: LD_INT 1
19672: ST_TO_ADDR
// if p3 = 101 then
19673: LD_VAR 0 3
19677: PUSH
19678: LD_INT 101
19680: EQUAL
19681: IFFALSE 19691
// sSold := true ;
19683: LD_ADDR_EXP 81
19687: PUSH
19688: LD_INT 1
19690: ST_TO_ADDR
// if p3 = 102 then
19691: LD_VAR 0 3
19695: PUSH
19696: LD_INT 102
19698: EQUAL
19699: IFFALSE 19709
// sDiff := true ;
19701: LD_ADDR_EXP 82
19705: PUSH
19706: LD_INT 1
19708: ST_TO_ADDR
// if p3 = 103 then
19709: LD_VAR 0 3
19713: PUSH
19714: LD_INT 103
19716: EQUAL
19717: IFFALSE 19727
// sFog := true ;
19719: LD_ADDR_EXP 85
19723: PUSH
19724: LD_INT 1
19726: ST_TO_ADDR
// if p3 = 104 then
19727: LD_VAR 0 3
19731: PUSH
19732: LD_INT 104
19734: EQUAL
19735: IFFALSE 19745
// sReset := true ;
19737: LD_ADDR_EXP 86
19741: PUSH
19742: LD_INT 1
19744: ST_TO_ADDR
// if p3 = 105 then
19745: LD_VAR 0 3
19749: PUSH
19750: LD_INT 105
19752: EQUAL
19753: IFFALSE 19763
// sSun := true ;
19755: LD_ADDR_EXP 87
19759: PUSH
19760: LD_INT 1
19762: ST_TO_ADDR
// if p3 = 106 then
19763: LD_VAR 0 3
19767: PUSH
19768: LD_INT 106
19770: EQUAL
19771: IFFALSE 19781
// sTiger := true ;
19773: LD_ADDR_EXP 83
19777: PUSH
19778: LD_INT 1
19780: ST_TO_ADDR
// if p3 = 107 then
19781: LD_VAR 0 3
19785: PUSH
19786: LD_INT 107
19788: EQUAL
19789: IFFALSE 19799
// sBomb := true ;
19791: LD_ADDR_EXP 84
19795: PUSH
19796: LD_INT 1
19798: ST_TO_ADDR
// if p3 = 108 then
19799: LD_VAR 0 3
19803: PUSH
19804: LD_INT 108
19806: EQUAL
19807: IFFALSE 19817
// sWound := true ;
19809: LD_ADDR_EXP 92
19813: PUSH
19814: LD_INT 1
19816: ST_TO_ADDR
// if p3 = 109 then
19817: LD_VAR 0 3
19821: PUSH
19822: LD_INT 109
19824: EQUAL
19825: IFFALSE 19835
// sBetray := true ;
19827: LD_ADDR_EXP 96
19831: PUSH
19832: LD_INT 1
19834: ST_TO_ADDR
// if p3 = 110 then
19835: LD_VAR 0 3
19839: PUSH
19840: LD_INT 110
19842: EQUAL
19843: IFFALSE 19853
// sContamin := true ;
19845: LD_ADDR_EXP 97
19849: PUSH
19850: LD_INT 1
19852: ST_TO_ADDR
// if p3 = 111 then
19853: LD_VAR 0 3
19857: PUSH
19858: LD_INT 111
19860: EQUAL
19861: IFFALSE 19871
// sOil := true ;
19863: LD_ADDR_EXP 99
19867: PUSH
19868: LD_INT 1
19870: ST_TO_ADDR
// if p3 = 112 then
19871: LD_VAR 0 3
19875: PUSH
19876: LD_INT 112
19878: EQUAL
19879: IFFALSE 19889
// sStu := true ;
19881: LD_ADDR_EXP 103
19885: PUSH
19886: LD_INT 1
19888: ST_TO_ADDR
// if p3 = 113 then
19889: LD_VAR 0 3
19893: PUSH
19894: LD_INT 113
19896: EQUAL
19897: IFFALSE 19907
// sBazooka := true ;
19899: LD_ADDR_EXP 106
19903: PUSH
19904: LD_INT 1
19906: ST_TO_ADDR
// if p3 = 114 then
19907: LD_VAR 0 3
19911: PUSH
19912: LD_INT 114
19914: EQUAL
19915: IFFALSE 19925
// sMortar := true ;
19917: LD_ADDR_EXP 107
19921: PUSH
19922: LD_INT 1
19924: ST_TO_ADDR
// if p3 = 115 then
19925: LD_VAR 0 3
19929: PUSH
19930: LD_INT 115
19932: EQUAL
19933: IFFALSE 19943
// sRanger := true ;
19935: LD_ADDR_EXP 117
19939: PUSH
19940: LD_INT 1
19942: ST_TO_ADDR
// if p3 = 116 then
19943: LD_VAR 0 3
19947: PUSH
19948: LD_INT 116
19950: EQUAL
19951: IFFALSE 19961
// sComputer := true ;
19953: LD_ADDR_EXP 118
19957: PUSH
19958: LD_INT 1
19960: ST_TO_ADDR
// if p3 = 117 then
19961: LD_VAR 0 3
19965: PUSH
19966: LD_INT 117
19968: EQUAL
19969: IFFALSE 19979
// s30 := true ;
19971: LD_ADDR_EXP 119
19975: PUSH
19976: LD_INT 1
19978: ST_TO_ADDR
// if p3 = 118 then
19979: LD_VAR 0 3
19983: PUSH
19984: LD_INT 118
19986: EQUAL
19987: IFFALSE 19997
// s60 := true ;
19989: LD_ADDR_EXP 120
19993: PUSH
19994: LD_INT 1
19996: ST_TO_ADDR
// end ; if p2 = 101 then
19997: LD_VAR 0 2
20001: PUSH
20002: LD_INT 101
20004: EQUAL
20005: IFFALSE 20133
// begin case p3 of 1 :
20007: LD_VAR 0 3
20011: PUSH
20012: LD_INT 1
20014: DOUBLE
20015: EQUAL
20016: IFTRUE 20020
20018: GO 20027
20020: POP
// hHackUnlimitedResources ; 2 :
20021: CALL 32231 0 0
20025: GO 20133
20027: LD_INT 2
20029: DOUBLE
20030: EQUAL
20031: IFTRUE 20035
20033: GO 20042
20035: POP
// hHackSetLevel10 ; 3 :
20036: CALL 32364 0 0
20040: GO 20133
20042: LD_INT 3
20044: DOUBLE
20045: EQUAL
20046: IFTRUE 20050
20048: GO 20057
20050: POP
// hHackSetLevel10YourUnits ; 4 :
20051: CALL 32449 0 0
20055: GO 20133
20057: LD_INT 4
20059: DOUBLE
20060: EQUAL
20061: IFTRUE 20065
20063: GO 20072
20065: POP
// hHackInvincible ; 5 :
20066: CALL 32897 0 0
20070: GO 20133
20072: LD_INT 5
20074: DOUBLE
20075: EQUAL
20076: IFTRUE 20080
20078: GO 20087
20080: POP
// hHackInvisible ; 6 :
20081: CALL 33008 0 0
20085: GO 20133
20087: LD_INT 6
20089: DOUBLE
20090: EQUAL
20091: IFTRUE 20095
20093: GO 20102
20095: POP
// hHackChangeYourSide ; 7 :
20096: CALL 33065 0 0
20100: GO 20133
20102: LD_INT 7
20104: DOUBLE
20105: EQUAL
20106: IFTRUE 20110
20108: GO 20117
20110: POP
// hHackChangeUnitSide ; 8 :
20111: CALL 33107 0 0
20115: GO 20133
20117: LD_INT 8
20119: DOUBLE
20120: EQUAL
20121: IFTRUE 20125
20123: GO 20132
20125: POP
// hHackFog ; end ;
20126: CALL 33208 0 0
20130: GO 20133
20132: POP
// end ; end ;
20133: LD_VAR 0 7
20137: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20138: GO 20140
20140: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20141: LD_STRING initStreamRollete();
20143: PPUSH
20144: CALL_OW 559
// InitStreamMode ;
20148: CALL 20160 0 0
// DefineStreamItems ( false ) ;
20152: LD_INT 0
20154: PPUSH
20155: CALL 20624 0 1
// end ;
20159: END
// function InitStreamMode ; begin
20160: LD_INT 0
20162: PPUSH
// streamModeActive := false ;
20163: LD_ADDR_EXP 64
20167: PUSH
20168: LD_INT 0
20170: ST_TO_ADDR
// normalCounter := 36 ;
20171: LD_ADDR_EXP 65
20175: PUSH
20176: LD_INT 36
20178: ST_TO_ADDR
// hardcoreCounter := 18 ;
20179: LD_ADDR_EXP 66
20183: PUSH
20184: LD_INT 18
20186: ST_TO_ADDR
// sRocket := false ;
20187: LD_ADDR_EXP 69
20191: PUSH
20192: LD_INT 0
20194: ST_TO_ADDR
// sSpeed := false ;
20195: LD_ADDR_EXP 68
20199: PUSH
20200: LD_INT 0
20202: ST_TO_ADDR
// sEngine := false ;
20203: LD_ADDR_EXP 70
20207: PUSH
20208: LD_INT 0
20210: ST_TO_ADDR
// sSpec := false ;
20211: LD_ADDR_EXP 67
20215: PUSH
20216: LD_INT 0
20218: ST_TO_ADDR
// sLevel := false ;
20219: LD_ADDR_EXP 71
20223: PUSH
20224: LD_INT 0
20226: ST_TO_ADDR
// sArmoury := false ;
20227: LD_ADDR_EXP 72
20231: PUSH
20232: LD_INT 0
20234: ST_TO_ADDR
// sRadar := false ;
20235: LD_ADDR_EXP 73
20239: PUSH
20240: LD_INT 0
20242: ST_TO_ADDR
// sBunker := false ;
20243: LD_ADDR_EXP 74
20247: PUSH
20248: LD_INT 0
20250: ST_TO_ADDR
// sHack := false ;
20251: LD_ADDR_EXP 75
20255: PUSH
20256: LD_INT 0
20258: ST_TO_ADDR
// sFire := false ;
20259: LD_ADDR_EXP 76
20263: PUSH
20264: LD_INT 0
20266: ST_TO_ADDR
// sRefresh := false ;
20267: LD_ADDR_EXP 77
20271: PUSH
20272: LD_INT 0
20274: ST_TO_ADDR
// sExp := false ;
20275: LD_ADDR_EXP 78
20279: PUSH
20280: LD_INT 0
20282: ST_TO_ADDR
// sDepot := false ;
20283: LD_ADDR_EXP 79
20287: PUSH
20288: LD_INT 0
20290: ST_TO_ADDR
// sFlag := false ;
20291: LD_ADDR_EXP 80
20295: PUSH
20296: LD_INT 0
20298: ST_TO_ADDR
// sKamikadze := false ;
20299: LD_ADDR_EXP 88
20303: PUSH
20304: LD_INT 0
20306: ST_TO_ADDR
// sTroll := false ;
20307: LD_ADDR_EXP 89
20311: PUSH
20312: LD_INT 0
20314: ST_TO_ADDR
// sSlow := false ;
20315: LD_ADDR_EXP 90
20319: PUSH
20320: LD_INT 0
20322: ST_TO_ADDR
// sLack := false ;
20323: LD_ADDR_EXP 91
20327: PUSH
20328: LD_INT 0
20330: ST_TO_ADDR
// sTank := false ;
20331: LD_ADDR_EXP 93
20335: PUSH
20336: LD_INT 0
20338: ST_TO_ADDR
// sRemote := false ;
20339: LD_ADDR_EXP 94
20343: PUSH
20344: LD_INT 0
20346: ST_TO_ADDR
// sPowell := false ;
20347: LD_ADDR_EXP 95
20351: PUSH
20352: LD_INT 0
20354: ST_TO_ADDR
// sTeleport := false ;
20355: LD_ADDR_EXP 98
20359: PUSH
20360: LD_INT 0
20362: ST_TO_ADDR
// sOilTower := false ;
20363: LD_ADDR_EXP 100
20367: PUSH
20368: LD_INT 0
20370: ST_TO_ADDR
// sShovel := false ;
20371: LD_ADDR_EXP 101
20375: PUSH
20376: LD_INT 0
20378: ST_TO_ADDR
// sSheik := false ;
20379: LD_ADDR_EXP 102
20383: PUSH
20384: LD_INT 0
20386: ST_TO_ADDR
// sEarthquake := false ;
20387: LD_ADDR_EXP 104
20391: PUSH
20392: LD_INT 0
20394: ST_TO_ADDR
// sAI := false ;
20395: LD_ADDR_EXP 105
20399: PUSH
20400: LD_INT 0
20402: ST_TO_ADDR
// sCargo := false ;
20403: LD_ADDR_EXP 108
20407: PUSH
20408: LD_INT 0
20410: ST_TO_ADDR
// sDLaser := false ;
20411: LD_ADDR_EXP 109
20415: PUSH
20416: LD_INT 0
20418: ST_TO_ADDR
// sExchange := false ;
20419: LD_ADDR_EXP 110
20423: PUSH
20424: LD_INT 0
20426: ST_TO_ADDR
// sFac := false ;
20427: LD_ADDR_EXP 111
20431: PUSH
20432: LD_INT 0
20434: ST_TO_ADDR
// sPower := false ;
20435: LD_ADDR_EXP 112
20439: PUSH
20440: LD_INT 0
20442: ST_TO_ADDR
// sRandom := false ;
20443: LD_ADDR_EXP 113
20447: PUSH
20448: LD_INT 0
20450: ST_TO_ADDR
// sShield := false ;
20451: LD_ADDR_EXP 114
20455: PUSH
20456: LD_INT 0
20458: ST_TO_ADDR
// sTime := false ;
20459: LD_ADDR_EXP 115
20463: PUSH
20464: LD_INT 0
20466: ST_TO_ADDR
// sTools := false ;
20467: LD_ADDR_EXP 116
20471: PUSH
20472: LD_INT 0
20474: ST_TO_ADDR
// sSold := false ;
20475: LD_ADDR_EXP 81
20479: PUSH
20480: LD_INT 0
20482: ST_TO_ADDR
// sDiff := false ;
20483: LD_ADDR_EXP 82
20487: PUSH
20488: LD_INT 0
20490: ST_TO_ADDR
// sFog := false ;
20491: LD_ADDR_EXP 85
20495: PUSH
20496: LD_INT 0
20498: ST_TO_ADDR
// sReset := false ;
20499: LD_ADDR_EXP 86
20503: PUSH
20504: LD_INT 0
20506: ST_TO_ADDR
// sSun := false ;
20507: LD_ADDR_EXP 87
20511: PUSH
20512: LD_INT 0
20514: ST_TO_ADDR
// sTiger := false ;
20515: LD_ADDR_EXP 83
20519: PUSH
20520: LD_INT 0
20522: ST_TO_ADDR
// sBomb := false ;
20523: LD_ADDR_EXP 84
20527: PUSH
20528: LD_INT 0
20530: ST_TO_ADDR
// sWound := false ;
20531: LD_ADDR_EXP 92
20535: PUSH
20536: LD_INT 0
20538: ST_TO_ADDR
// sBetray := false ;
20539: LD_ADDR_EXP 96
20543: PUSH
20544: LD_INT 0
20546: ST_TO_ADDR
// sContamin := false ;
20547: LD_ADDR_EXP 97
20551: PUSH
20552: LD_INT 0
20554: ST_TO_ADDR
// sOil := false ;
20555: LD_ADDR_EXP 99
20559: PUSH
20560: LD_INT 0
20562: ST_TO_ADDR
// sStu := false ;
20563: LD_ADDR_EXP 103
20567: PUSH
20568: LD_INT 0
20570: ST_TO_ADDR
// sBazooka := false ;
20571: LD_ADDR_EXP 106
20575: PUSH
20576: LD_INT 0
20578: ST_TO_ADDR
// sMortar := false ;
20579: LD_ADDR_EXP 107
20583: PUSH
20584: LD_INT 0
20586: ST_TO_ADDR
// sRanger := false ;
20587: LD_ADDR_EXP 117
20591: PUSH
20592: LD_INT 0
20594: ST_TO_ADDR
// sComputer := false ;
20595: LD_ADDR_EXP 118
20599: PUSH
20600: LD_INT 0
20602: ST_TO_ADDR
// s30 := false ;
20603: LD_ADDR_EXP 119
20607: PUSH
20608: LD_INT 0
20610: ST_TO_ADDR
// s60 := false ;
20611: LD_ADDR_EXP 120
20615: PUSH
20616: LD_INT 0
20618: ST_TO_ADDR
// end ;
20619: LD_VAR 0 1
20623: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20624: LD_INT 0
20626: PPUSH
20627: PPUSH
20628: PPUSH
20629: PPUSH
20630: PPUSH
20631: PPUSH
20632: PPUSH
// result := [ ] ;
20633: LD_ADDR_VAR 0 2
20637: PUSH
20638: EMPTY
20639: ST_TO_ADDR
// if campaign_id = 1 then
20640: LD_OWVAR 69
20644: PUSH
20645: LD_INT 1
20647: EQUAL
20648: IFFALSE 23814
// begin case mission_number of 1 :
20650: LD_OWVAR 70
20654: PUSH
20655: LD_INT 1
20657: DOUBLE
20658: EQUAL
20659: IFTRUE 20663
20661: GO 20739
20663: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20664: LD_ADDR_VAR 0 2
20668: PUSH
20669: LD_INT 2
20671: PUSH
20672: LD_INT 4
20674: PUSH
20675: LD_INT 11
20677: PUSH
20678: LD_INT 12
20680: PUSH
20681: LD_INT 15
20683: PUSH
20684: LD_INT 16
20686: PUSH
20687: LD_INT 22
20689: PUSH
20690: LD_INT 23
20692: PUSH
20693: LD_INT 26
20695: PUSH
20696: EMPTY
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: PUSH
20707: LD_INT 101
20709: PUSH
20710: LD_INT 102
20712: PUSH
20713: LD_INT 106
20715: PUSH
20716: LD_INT 116
20718: PUSH
20719: LD_INT 117
20721: PUSH
20722: LD_INT 118
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: ST_TO_ADDR
20737: GO 23812
20739: LD_INT 2
20741: DOUBLE
20742: EQUAL
20743: IFTRUE 20747
20745: GO 20831
20747: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20748: LD_ADDR_VAR 0 2
20752: PUSH
20753: LD_INT 2
20755: PUSH
20756: LD_INT 4
20758: PUSH
20759: LD_INT 11
20761: PUSH
20762: LD_INT 12
20764: PUSH
20765: LD_INT 15
20767: PUSH
20768: LD_INT 16
20770: PUSH
20771: LD_INT 22
20773: PUSH
20774: LD_INT 23
20776: PUSH
20777: LD_INT 26
20779: PUSH
20780: EMPTY
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: PUSH
20791: LD_INT 101
20793: PUSH
20794: LD_INT 102
20796: PUSH
20797: LD_INT 105
20799: PUSH
20800: LD_INT 106
20802: PUSH
20803: LD_INT 108
20805: PUSH
20806: LD_INT 116
20808: PUSH
20809: LD_INT 117
20811: PUSH
20812: LD_INT 118
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: ST_TO_ADDR
20829: GO 23812
20831: LD_INT 3
20833: DOUBLE
20834: EQUAL
20835: IFTRUE 20839
20837: GO 20927
20839: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20840: LD_ADDR_VAR 0 2
20844: PUSH
20845: LD_INT 2
20847: PUSH
20848: LD_INT 4
20850: PUSH
20851: LD_INT 5
20853: PUSH
20854: LD_INT 11
20856: PUSH
20857: LD_INT 12
20859: PUSH
20860: LD_INT 15
20862: PUSH
20863: LD_INT 16
20865: PUSH
20866: LD_INT 22
20868: PUSH
20869: LD_INT 26
20871: PUSH
20872: LD_INT 36
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: PUSH
20887: LD_INT 101
20889: PUSH
20890: LD_INT 102
20892: PUSH
20893: LD_INT 105
20895: PUSH
20896: LD_INT 106
20898: PUSH
20899: LD_INT 108
20901: PUSH
20902: LD_INT 116
20904: PUSH
20905: LD_INT 117
20907: PUSH
20908: LD_INT 118
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: ST_TO_ADDR
20925: GO 23812
20927: LD_INT 4
20929: DOUBLE
20930: EQUAL
20931: IFTRUE 20935
20933: GO 21031
20935: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20936: LD_ADDR_VAR 0 2
20940: PUSH
20941: LD_INT 2
20943: PUSH
20944: LD_INT 4
20946: PUSH
20947: LD_INT 5
20949: PUSH
20950: LD_INT 8
20952: PUSH
20953: LD_INT 11
20955: PUSH
20956: LD_INT 12
20958: PUSH
20959: LD_INT 15
20961: PUSH
20962: LD_INT 16
20964: PUSH
20965: LD_INT 22
20967: PUSH
20968: LD_INT 23
20970: PUSH
20971: LD_INT 26
20973: PUSH
20974: LD_INT 36
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: PUSH
20991: LD_INT 101
20993: PUSH
20994: LD_INT 102
20996: PUSH
20997: LD_INT 105
20999: PUSH
21000: LD_INT 106
21002: PUSH
21003: LD_INT 108
21005: PUSH
21006: LD_INT 116
21008: PUSH
21009: LD_INT 117
21011: PUSH
21012: LD_INT 118
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: PUSH
21025: EMPTY
21026: LIST
21027: LIST
21028: ST_TO_ADDR
21029: GO 23812
21031: LD_INT 5
21033: DOUBLE
21034: EQUAL
21035: IFTRUE 21039
21037: GO 21151
21039: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21040: LD_ADDR_VAR 0 2
21044: PUSH
21045: LD_INT 2
21047: PUSH
21048: LD_INT 4
21050: PUSH
21051: LD_INT 5
21053: PUSH
21054: LD_INT 6
21056: PUSH
21057: LD_INT 8
21059: PUSH
21060: LD_INT 11
21062: PUSH
21063: LD_INT 12
21065: PUSH
21066: LD_INT 15
21068: PUSH
21069: LD_INT 16
21071: PUSH
21072: LD_INT 22
21074: PUSH
21075: LD_INT 23
21077: PUSH
21078: LD_INT 25
21080: PUSH
21081: LD_INT 26
21083: PUSH
21084: LD_INT 36
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: PUSH
21103: LD_INT 101
21105: PUSH
21106: LD_INT 102
21108: PUSH
21109: LD_INT 105
21111: PUSH
21112: LD_INT 106
21114: PUSH
21115: LD_INT 108
21117: PUSH
21118: LD_INT 109
21120: PUSH
21121: LD_INT 112
21123: PUSH
21124: LD_INT 116
21126: PUSH
21127: LD_INT 117
21129: PUSH
21130: LD_INT 118
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: ST_TO_ADDR
21149: GO 23812
21151: LD_INT 6
21153: DOUBLE
21154: EQUAL
21155: IFTRUE 21159
21157: GO 21291
21159: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21160: LD_ADDR_VAR 0 2
21164: PUSH
21165: LD_INT 2
21167: PUSH
21168: LD_INT 4
21170: PUSH
21171: LD_INT 5
21173: PUSH
21174: LD_INT 6
21176: PUSH
21177: LD_INT 8
21179: PUSH
21180: LD_INT 11
21182: PUSH
21183: LD_INT 12
21185: PUSH
21186: LD_INT 15
21188: PUSH
21189: LD_INT 16
21191: PUSH
21192: LD_INT 20
21194: PUSH
21195: LD_INT 21
21197: PUSH
21198: LD_INT 22
21200: PUSH
21201: LD_INT 23
21203: PUSH
21204: LD_INT 25
21206: PUSH
21207: LD_INT 26
21209: PUSH
21210: LD_INT 30
21212: PUSH
21213: LD_INT 31
21215: PUSH
21216: LD_INT 32
21218: PUSH
21219: LD_INT 36
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: PUSH
21243: LD_INT 101
21245: PUSH
21246: LD_INT 102
21248: PUSH
21249: LD_INT 105
21251: PUSH
21252: LD_INT 106
21254: PUSH
21255: LD_INT 108
21257: PUSH
21258: LD_INT 109
21260: PUSH
21261: LD_INT 112
21263: PUSH
21264: LD_INT 116
21266: PUSH
21267: LD_INT 117
21269: PUSH
21270: LD_INT 118
21272: PUSH
21273: EMPTY
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: ST_TO_ADDR
21289: GO 23812
21291: LD_INT 7
21293: DOUBLE
21294: EQUAL
21295: IFTRUE 21299
21297: GO 21411
21299: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21300: LD_ADDR_VAR 0 2
21304: PUSH
21305: LD_INT 2
21307: PUSH
21308: LD_INT 4
21310: PUSH
21311: LD_INT 5
21313: PUSH
21314: LD_INT 7
21316: PUSH
21317: LD_INT 11
21319: PUSH
21320: LD_INT 12
21322: PUSH
21323: LD_INT 15
21325: PUSH
21326: LD_INT 16
21328: PUSH
21329: LD_INT 20
21331: PUSH
21332: LD_INT 21
21334: PUSH
21335: LD_INT 22
21337: PUSH
21338: LD_INT 23
21340: PUSH
21341: LD_INT 25
21343: PUSH
21344: LD_INT 26
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: PUSH
21363: LD_INT 101
21365: PUSH
21366: LD_INT 102
21368: PUSH
21369: LD_INT 103
21371: PUSH
21372: LD_INT 105
21374: PUSH
21375: LD_INT 106
21377: PUSH
21378: LD_INT 108
21380: PUSH
21381: LD_INT 112
21383: PUSH
21384: LD_INT 116
21386: PUSH
21387: LD_INT 117
21389: PUSH
21390: LD_INT 118
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: ST_TO_ADDR
21409: GO 23812
21411: LD_INT 8
21413: DOUBLE
21414: EQUAL
21415: IFTRUE 21419
21417: GO 21559
21419: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21420: LD_ADDR_VAR 0 2
21424: PUSH
21425: LD_INT 2
21427: PUSH
21428: LD_INT 4
21430: PUSH
21431: LD_INT 5
21433: PUSH
21434: LD_INT 6
21436: PUSH
21437: LD_INT 7
21439: PUSH
21440: LD_INT 8
21442: PUSH
21443: LD_INT 11
21445: PUSH
21446: LD_INT 12
21448: PUSH
21449: LD_INT 15
21451: PUSH
21452: LD_INT 16
21454: PUSH
21455: LD_INT 20
21457: PUSH
21458: LD_INT 21
21460: PUSH
21461: LD_INT 22
21463: PUSH
21464: LD_INT 23
21466: PUSH
21467: LD_INT 25
21469: PUSH
21470: LD_INT 26
21472: PUSH
21473: LD_INT 30
21475: PUSH
21476: LD_INT 31
21478: PUSH
21479: LD_INT 32
21481: PUSH
21482: LD_INT 36
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: PUSH
21507: LD_INT 101
21509: PUSH
21510: LD_INT 102
21512: PUSH
21513: LD_INT 103
21515: PUSH
21516: LD_INT 105
21518: PUSH
21519: LD_INT 106
21521: PUSH
21522: LD_INT 108
21524: PUSH
21525: LD_INT 109
21527: PUSH
21528: LD_INT 112
21530: PUSH
21531: LD_INT 116
21533: PUSH
21534: LD_INT 117
21536: PUSH
21537: LD_INT 118
21539: PUSH
21540: EMPTY
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: ST_TO_ADDR
21557: GO 23812
21559: LD_INT 9
21561: DOUBLE
21562: EQUAL
21563: IFTRUE 21567
21565: GO 21715
21567: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21568: LD_ADDR_VAR 0 2
21572: PUSH
21573: LD_INT 2
21575: PUSH
21576: LD_INT 4
21578: PUSH
21579: LD_INT 5
21581: PUSH
21582: LD_INT 6
21584: PUSH
21585: LD_INT 7
21587: PUSH
21588: LD_INT 8
21590: PUSH
21591: LD_INT 11
21593: PUSH
21594: LD_INT 12
21596: PUSH
21597: LD_INT 15
21599: PUSH
21600: LD_INT 16
21602: PUSH
21603: LD_INT 20
21605: PUSH
21606: LD_INT 21
21608: PUSH
21609: LD_INT 22
21611: PUSH
21612: LD_INT 23
21614: PUSH
21615: LD_INT 25
21617: PUSH
21618: LD_INT 26
21620: PUSH
21621: LD_INT 28
21623: PUSH
21624: LD_INT 30
21626: PUSH
21627: LD_INT 31
21629: PUSH
21630: LD_INT 32
21632: PUSH
21633: LD_INT 36
21635: PUSH
21636: EMPTY
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: PUSH
21659: LD_INT 101
21661: PUSH
21662: LD_INT 102
21664: PUSH
21665: LD_INT 103
21667: PUSH
21668: LD_INT 105
21670: PUSH
21671: LD_INT 106
21673: PUSH
21674: LD_INT 108
21676: PUSH
21677: LD_INT 109
21679: PUSH
21680: LD_INT 112
21682: PUSH
21683: LD_INT 114
21685: PUSH
21686: LD_INT 116
21688: PUSH
21689: LD_INT 117
21691: PUSH
21692: LD_INT 118
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: ST_TO_ADDR
21713: GO 23812
21715: LD_INT 10
21717: DOUBLE
21718: EQUAL
21719: IFTRUE 21723
21721: GO 21919
21723: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21724: LD_ADDR_VAR 0 2
21728: PUSH
21729: LD_INT 2
21731: PUSH
21732: LD_INT 4
21734: PUSH
21735: LD_INT 5
21737: PUSH
21738: LD_INT 6
21740: PUSH
21741: LD_INT 7
21743: PUSH
21744: LD_INT 8
21746: PUSH
21747: LD_INT 9
21749: PUSH
21750: LD_INT 10
21752: PUSH
21753: LD_INT 11
21755: PUSH
21756: LD_INT 12
21758: PUSH
21759: LD_INT 13
21761: PUSH
21762: LD_INT 14
21764: PUSH
21765: LD_INT 15
21767: PUSH
21768: LD_INT 16
21770: PUSH
21771: LD_INT 17
21773: PUSH
21774: LD_INT 18
21776: PUSH
21777: LD_INT 19
21779: PUSH
21780: LD_INT 20
21782: PUSH
21783: LD_INT 21
21785: PUSH
21786: LD_INT 22
21788: PUSH
21789: LD_INT 23
21791: PUSH
21792: LD_INT 24
21794: PUSH
21795: LD_INT 25
21797: PUSH
21798: LD_INT 26
21800: PUSH
21801: LD_INT 28
21803: PUSH
21804: LD_INT 30
21806: PUSH
21807: LD_INT 31
21809: PUSH
21810: LD_INT 32
21812: PUSH
21813: LD_INT 36
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: PUSH
21847: LD_INT 101
21849: PUSH
21850: LD_INT 102
21852: PUSH
21853: LD_INT 103
21855: PUSH
21856: LD_INT 104
21858: PUSH
21859: LD_INT 105
21861: PUSH
21862: LD_INT 106
21864: PUSH
21865: LD_INT 107
21867: PUSH
21868: LD_INT 108
21870: PUSH
21871: LD_INT 109
21873: PUSH
21874: LD_INT 110
21876: PUSH
21877: LD_INT 111
21879: PUSH
21880: LD_INT 112
21882: PUSH
21883: LD_INT 114
21885: PUSH
21886: LD_INT 116
21888: PUSH
21889: LD_INT 117
21891: PUSH
21892: LD_INT 118
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: PUSH
21913: EMPTY
21914: LIST
21915: LIST
21916: ST_TO_ADDR
21917: GO 23812
21919: LD_INT 11
21921: DOUBLE
21922: EQUAL
21923: IFTRUE 21927
21925: GO 22131
21927: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21928: LD_ADDR_VAR 0 2
21932: PUSH
21933: LD_INT 2
21935: PUSH
21936: LD_INT 3
21938: PUSH
21939: LD_INT 4
21941: PUSH
21942: LD_INT 5
21944: PUSH
21945: LD_INT 6
21947: PUSH
21948: LD_INT 7
21950: PUSH
21951: LD_INT 8
21953: PUSH
21954: LD_INT 9
21956: PUSH
21957: LD_INT 10
21959: PUSH
21960: LD_INT 11
21962: PUSH
21963: LD_INT 12
21965: PUSH
21966: LD_INT 13
21968: PUSH
21969: LD_INT 14
21971: PUSH
21972: LD_INT 15
21974: PUSH
21975: LD_INT 16
21977: PUSH
21978: LD_INT 17
21980: PUSH
21981: LD_INT 18
21983: PUSH
21984: LD_INT 19
21986: PUSH
21987: LD_INT 20
21989: PUSH
21990: LD_INT 21
21992: PUSH
21993: LD_INT 22
21995: PUSH
21996: LD_INT 23
21998: PUSH
21999: LD_INT 24
22001: PUSH
22002: LD_INT 25
22004: PUSH
22005: LD_INT 26
22007: PUSH
22008: LD_INT 28
22010: PUSH
22011: LD_INT 30
22013: PUSH
22014: LD_INT 31
22016: PUSH
22017: LD_INT 32
22019: PUSH
22020: LD_INT 34
22022: PUSH
22023: LD_INT 36
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: PUSH
22059: LD_INT 101
22061: PUSH
22062: LD_INT 102
22064: PUSH
22065: LD_INT 103
22067: PUSH
22068: LD_INT 104
22070: PUSH
22071: LD_INT 105
22073: PUSH
22074: LD_INT 106
22076: PUSH
22077: LD_INT 107
22079: PUSH
22080: LD_INT 108
22082: PUSH
22083: LD_INT 109
22085: PUSH
22086: LD_INT 110
22088: PUSH
22089: LD_INT 111
22091: PUSH
22092: LD_INT 112
22094: PUSH
22095: LD_INT 114
22097: PUSH
22098: LD_INT 116
22100: PUSH
22101: LD_INT 117
22103: PUSH
22104: LD_INT 118
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: ST_TO_ADDR
22129: GO 23812
22131: LD_INT 12
22133: DOUBLE
22134: EQUAL
22135: IFTRUE 22139
22137: GO 22359
22139: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22140: LD_ADDR_VAR 0 2
22144: PUSH
22145: LD_INT 1
22147: PUSH
22148: LD_INT 2
22150: PUSH
22151: LD_INT 3
22153: PUSH
22154: LD_INT 4
22156: PUSH
22157: LD_INT 5
22159: PUSH
22160: LD_INT 6
22162: PUSH
22163: LD_INT 7
22165: PUSH
22166: LD_INT 8
22168: PUSH
22169: LD_INT 9
22171: PUSH
22172: LD_INT 10
22174: PUSH
22175: LD_INT 11
22177: PUSH
22178: LD_INT 12
22180: PUSH
22181: LD_INT 13
22183: PUSH
22184: LD_INT 14
22186: PUSH
22187: LD_INT 15
22189: PUSH
22190: LD_INT 16
22192: PUSH
22193: LD_INT 17
22195: PUSH
22196: LD_INT 18
22198: PUSH
22199: LD_INT 19
22201: PUSH
22202: LD_INT 20
22204: PUSH
22205: LD_INT 21
22207: PUSH
22208: LD_INT 22
22210: PUSH
22211: LD_INT 23
22213: PUSH
22214: LD_INT 24
22216: PUSH
22217: LD_INT 25
22219: PUSH
22220: LD_INT 26
22222: PUSH
22223: LD_INT 27
22225: PUSH
22226: LD_INT 28
22228: PUSH
22229: LD_INT 30
22231: PUSH
22232: LD_INT 31
22234: PUSH
22235: LD_INT 32
22237: PUSH
22238: LD_INT 33
22240: PUSH
22241: LD_INT 34
22243: PUSH
22244: LD_INT 36
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: PUSH
22283: LD_INT 101
22285: PUSH
22286: LD_INT 102
22288: PUSH
22289: LD_INT 103
22291: PUSH
22292: LD_INT 104
22294: PUSH
22295: LD_INT 105
22297: PUSH
22298: LD_INT 106
22300: PUSH
22301: LD_INT 107
22303: PUSH
22304: LD_INT 108
22306: PUSH
22307: LD_INT 109
22309: PUSH
22310: LD_INT 110
22312: PUSH
22313: LD_INT 111
22315: PUSH
22316: LD_INT 112
22318: PUSH
22319: LD_INT 113
22321: PUSH
22322: LD_INT 114
22324: PUSH
22325: LD_INT 116
22327: PUSH
22328: LD_INT 117
22330: PUSH
22331: LD_INT 118
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: ST_TO_ADDR
22357: GO 23812
22359: LD_INT 13
22361: DOUBLE
22362: EQUAL
22363: IFTRUE 22367
22365: GO 22575
22367: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22368: LD_ADDR_VAR 0 2
22372: PUSH
22373: LD_INT 1
22375: PUSH
22376: LD_INT 2
22378: PUSH
22379: LD_INT 3
22381: PUSH
22382: LD_INT 4
22384: PUSH
22385: LD_INT 5
22387: PUSH
22388: LD_INT 8
22390: PUSH
22391: LD_INT 9
22393: PUSH
22394: LD_INT 10
22396: PUSH
22397: LD_INT 11
22399: PUSH
22400: LD_INT 12
22402: PUSH
22403: LD_INT 14
22405: PUSH
22406: LD_INT 15
22408: PUSH
22409: LD_INT 16
22411: PUSH
22412: LD_INT 17
22414: PUSH
22415: LD_INT 18
22417: PUSH
22418: LD_INT 19
22420: PUSH
22421: LD_INT 20
22423: PUSH
22424: LD_INT 21
22426: PUSH
22427: LD_INT 22
22429: PUSH
22430: LD_INT 23
22432: PUSH
22433: LD_INT 24
22435: PUSH
22436: LD_INT 25
22438: PUSH
22439: LD_INT 26
22441: PUSH
22442: LD_INT 27
22444: PUSH
22445: LD_INT 28
22447: PUSH
22448: LD_INT 30
22450: PUSH
22451: LD_INT 31
22453: PUSH
22454: LD_INT 32
22456: PUSH
22457: LD_INT 33
22459: PUSH
22460: LD_INT 34
22462: PUSH
22463: LD_INT 36
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: PUSH
22499: LD_INT 101
22501: PUSH
22502: LD_INT 102
22504: PUSH
22505: LD_INT 103
22507: PUSH
22508: LD_INT 104
22510: PUSH
22511: LD_INT 105
22513: PUSH
22514: LD_INT 106
22516: PUSH
22517: LD_INT 107
22519: PUSH
22520: LD_INT 108
22522: PUSH
22523: LD_INT 109
22525: PUSH
22526: LD_INT 110
22528: PUSH
22529: LD_INT 111
22531: PUSH
22532: LD_INT 112
22534: PUSH
22535: LD_INT 113
22537: PUSH
22538: LD_INT 114
22540: PUSH
22541: LD_INT 116
22543: PUSH
22544: LD_INT 117
22546: PUSH
22547: LD_INT 118
22549: PUSH
22550: EMPTY
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: ST_TO_ADDR
22573: GO 23812
22575: LD_INT 14
22577: DOUBLE
22578: EQUAL
22579: IFTRUE 22583
22581: GO 22807
22583: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22584: LD_ADDR_VAR 0 2
22588: PUSH
22589: LD_INT 1
22591: PUSH
22592: LD_INT 2
22594: PUSH
22595: LD_INT 3
22597: PUSH
22598: LD_INT 4
22600: PUSH
22601: LD_INT 5
22603: PUSH
22604: LD_INT 6
22606: PUSH
22607: LD_INT 7
22609: PUSH
22610: LD_INT 8
22612: PUSH
22613: LD_INT 9
22615: PUSH
22616: LD_INT 10
22618: PUSH
22619: LD_INT 11
22621: PUSH
22622: LD_INT 12
22624: PUSH
22625: LD_INT 13
22627: PUSH
22628: LD_INT 14
22630: PUSH
22631: LD_INT 15
22633: PUSH
22634: LD_INT 16
22636: PUSH
22637: LD_INT 17
22639: PUSH
22640: LD_INT 18
22642: PUSH
22643: LD_INT 19
22645: PUSH
22646: LD_INT 20
22648: PUSH
22649: LD_INT 21
22651: PUSH
22652: LD_INT 22
22654: PUSH
22655: LD_INT 23
22657: PUSH
22658: LD_INT 24
22660: PUSH
22661: LD_INT 25
22663: PUSH
22664: LD_INT 26
22666: PUSH
22667: LD_INT 27
22669: PUSH
22670: LD_INT 28
22672: PUSH
22673: LD_INT 29
22675: PUSH
22676: LD_INT 30
22678: PUSH
22679: LD_INT 31
22681: PUSH
22682: LD_INT 32
22684: PUSH
22685: LD_INT 33
22687: PUSH
22688: LD_INT 34
22690: PUSH
22691: LD_INT 36
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: PUSH
22731: LD_INT 101
22733: PUSH
22734: LD_INT 102
22736: PUSH
22737: LD_INT 103
22739: PUSH
22740: LD_INT 104
22742: PUSH
22743: LD_INT 105
22745: PUSH
22746: LD_INT 106
22748: PUSH
22749: LD_INT 107
22751: PUSH
22752: LD_INT 108
22754: PUSH
22755: LD_INT 109
22757: PUSH
22758: LD_INT 110
22760: PUSH
22761: LD_INT 111
22763: PUSH
22764: LD_INT 112
22766: PUSH
22767: LD_INT 113
22769: PUSH
22770: LD_INT 114
22772: PUSH
22773: LD_INT 116
22775: PUSH
22776: LD_INT 117
22778: PUSH
22779: LD_INT 118
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: ST_TO_ADDR
22805: GO 23812
22807: LD_INT 15
22809: DOUBLE
22810: EQUAL
22811: IFTRUE 22815
22813: GO 23039
22815: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22816: LD_ADDR_VAR 0 2
22820: PUSH
22821: LD_INT 1
22823: PUSH
22824: LD_INT 2
22826: PUSH
22827: LD_INT 3
22829: PUSH
22830: LD_INT 4
22832: PUSH
22833: LD_INT 5
22835: PUSH
22836: LD_INT 6
22838: PUSH
22839: LD_INT 7
22841: PUSH
22842: LD_INT 8
22844: PUSH
22845: LD_INT 9
22847: PUSH
22848: LD_INT 10
22850: PUSH
22851: LD_INT 11
22853: PUSH
22854: LD_INT 12
22856: PUSH
22857: LD_INT 13
22859: PUSH
22860: LD_INT 14
22862: PUSH
22863: LD_INT 15
22865: PUSH
22866: LD_INT 16
22868: PUSH
22869: LD_INT 17
22871: PUSH
22872: LD_INT 18
22874: PUSH
22875: LD_INT 19
22877: PUSH
22878: LD_INT 20
22880: PUSH
22881: LD_INT 21
22883: PUSH
22884: LD_INT 22
22886: PUSH
22887: LD_INT 23
22889: PUSH
22890: LD_INT 24
22892: PUSH
22893: LD_INT 25
22895: PUSH
22896: LD_INT 26
22898: PUSH
22899: LD_INT 27
22901: PUSH
22902: LD_INT 28
22904: PUSH
22905: LD_INT 29
22907: PUSH
22908: LD_INT 30
22910: PUSH
22911: LD_INT 31
22913: PUSH
22914: LD_INT 32
22916: PUSH
22917: LD_INT 33
22919: PUSH
22920: LD_INT 34
22922: PUSH
22923: LD_INT 36
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: PUSH
22963: LD_INT 101
22965: PUSH
22966: LD_INT 102
22968: PUSH
22969: LD_INT 103
22971: PUSH
22972: LD_INT 104
22974: PUSH
22975: LD_INT 105
22977: PUSH
22978: LD_INT 106
22980: PUSH
22981: LD_INT 107
22983: PUSH
22984: LD_INT 108
22986: PUSH
22987: LD_INT 109
22989: PUSH
22990: LD_INT 110
22992: PUSH
22993: LD_INT 111
22995: PUSH
22996: LD_INT 112
22998: PUSH
22999: LD_INT 113
23001: PUSH
23002: LD_INT 114
23004: PUSH
23005: LD_INT 116
23007: PUSH
23008: LD_INT 117
23010: PUSH
23011: LD_INT 118
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: ST_TO_ADDR
23037: GO 23812
23039: LD_INT 16
23041: DOUBLE
23042: EQUAL
23043: IFTRUE 23047
23045: GO 23183
23047: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23048: LD_ADDR_VAR 0 2
23052: PUSH
23053: LD_INT 2
23055: PUSH
23056: LD_INT 4
23058: PUSH
23059: LD_INT 5
23061: PUSH
23062: LD_INT 7
23064: PUSH
23065: LD_INT 11
23067: PUSH
23068: LD_INT 12
23070: PUSH
23071: LD_INT 15
23073: PUSH
23074: LD_INT 16
23076: PUSH
23077: LD_INT 20
23079: PUSH
23080: LD_INT 21
23082: PUSH
23083: LD_INT 22
23085: PUSH
23086: LD_INT 23
23088: PUSH
23089: LD_INT 25
23091: PUSH
23092: LD_INT 26
23094: PUSH
23095: LD_INT 30
23097: PUSH
23098: LD_INT 31
23100: PUSH
23101: LD_INT 32
23103: PUSH
23104: LD_INT 33
23106: PUSH
23107: LD_INT 34
23109: PUSH
23110: EMPTY
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: PUSH
23131: LD_INT 101
23133: PUSH
23134: LD_INT 102
23136: PUSH
23137: LD_INT 103
23139: PUSH
23140: LD_INT 106
23142: PUSH
23143: LD_INT 108
23145: PUSH
23146: LD_INT 112
23148: PUSH
23149: LD_INT 113
23151: PUSH
23152: LD_INT 114
23154: PUSH
23155: LD_INT 116
23157: PUSH
23158: LD_INT 117
23160: PUSH
23161: LD_INT 118
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: ST_TO_ADDR
23181: GO 23812
23183: LD_INT 17
23185: DOUBLE
23186: EQUAL
23187: IFTRUE 23191
23189: GO 23415
23191: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23192: LD_ADDR_VAR 0 2
23196: PUSH
23197: LD_INT 1
23199: PUSH
23200: LD_INT 2
23202: PUSH
23203: LD_INT 3
23205: PUSH
23206: LD_INT 4
23208: PUSH
23209: LD_INT 5
23211: PUSH
23212: LD_INT 6
23214: PUSH
23215: LD_INT 7
23217: PUSH
23218: LD_INT 8
23220: PUSH
23221: LD_INT 9
23223: PUSH
23224: LD_INT 10
23226: PUSH
23227: LD_INT 11
23229: PUSH
23230: LD_INT 12
23232: PUSH
23233: LD_INT 13
23235: PUSH
23236: LD_INT 14
23238: PUSH
23239: LD_INT 15
23241: PUSH
23242: LD_INT 16
23244: PUSH
23245: LD_INT 17
23247: PUSH
23248: LD_INT 18
23250: PUSH
23251: LD_INT 19
23253: PUSH
23254: LD_INT 20
23256: PUSH
23257: LD_INT 21
23259: PUSH
23260: LD_INT 22
23262: PUSH
23263: LD_INT 23
23265: PUSH
23266: LD_INT 24
23268: PUSH
23269: LD_INT 25
23271: PUSH
23272: LD_INT 26
23274: PUSH
23275: LD_INT 27
23277: PUSH
23278: LD_INT 28
23280: PUSH
23281: LD_INT 29
23283: PUSH
23284: LD_INT 30
23286: PUSH
23287: LD_INT 31
23289: PUSH
23290: LD_INT 32
23292: PUSH
23293: LD_INT 33
23295: PUSH
23296: LD_INT 34
23298: PUSH
23299: LD_INT 36
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: PUSH
23339: LD_INT 101
23341: PUSH
23342: LD_INT 102
23344: PUSH
23345: LD_INT 103
23347: PUSH
23348: LD_INT 104
23350: PUSH
23351: LD_INT 105
23353: PUSH
23354: LD_INT 106
23356: PUSH
23357: LD_INT 107
23359: PUSH
23360: LD_INT 108
23362: PUSH
23363: LD_INT 109
23365: PUSH
23366: LD_INT 110
23368: PUSH
23369: LD_INT 111
23371: PUSH
23372: LD_INT 112
23374: PUSH
23375: LD_INT 113
23377: PUSH
23378: LD_INT 114
23380: PUSH
23381: LD_INT 116
23383: PUSH
23384: LD_INT 117
23386: PUSH
23387: LD_INT 118
23389: PUSH
23390: EMPTY
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: PUSH
23409: EMPTY
23410: LIST
23411: LIST
23412: ST_TO_ADDR
23413: GO 23812
23415: LD_INT 18
23417: DOUBLE
23418: EQUAL
23419: IFTRUE 23423
23421: GO 23571
23423: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23424: LD_ADDR_VAR 0 2
23428: PUSH
23429: LD_INT 2
23431: PUSH
23432: LD_INT 4
23434: PUSH
23435: LD_INT 5
23437: PUSH
23438: LD_INT 7
23440: PUSH
23441: LD_INT 11
23443: PUSH
23444: LD_INT 12
23446: PUSH
23447: LD_INT 15
23449: PUSH
23450: LD_INT 16
23452: PUSH
23453: LD_INT 20
23455: PUSH
23456: LD_INT 21
23458: PUSH
23459: LD_INT 22
23461: PUSH
23462: LD_INT 23
23464: PUSH
23465: LD_INT 25
23467: PUSH
23468: LD_INT 26
23470: PUSH
23471: LD_INT 30
23473: PUSH
23474: LD_INT 31
23476: PUSH
23477: LD_INT 32
23479: PUSH
23480: LD_INT 33
23482: PUSH
23483: LD_INT 34
23485: PUSH
23486: LD_INT 35
23488: PUSH
23489: LD_INT 36
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: PUSH
23515: LD_INT 101
23517: PUSH
23518: LD_INT 102
23520: PUSH
23521: LD_INT 103
23523: PUSH
23524: LD_INT 106
23526: PUSH
23527: LD_INT 108
23529: PUSH
23530: LD_INT 112
23532: PUSH
23533: LD_INT 113
23535: PUSH
23536: LD_INT 114
23538: PUSH
23539: LD_INT 115
23541: PUSH
23542: LD_INT 116
23544: PUSH
23545: LD_INT 117
23547: PUSH
23548: LD_INT 118
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: ST_TO_ADDR
23569: GO 23812
23571: LD_INT 19
23573: DOUBLE
23574: EQUAL
23575: IFTRUE 23579
23577: GO 23811
23579: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23580: LD_ADDR_VAR 0 2
23584: PUSH
23585: LD_INT 1
23587: PUSH
23588: LD_INT 2
23590: PUSH
23591: LD_INT 3
23593: PUSH
23594: LD_INT 4
23596: PUSH
23597: LD_INT 5
23599: PUSH
23600: LD_INT 6
23602: PUSH
23603: LD_INT 7
23605: PUSH
23606: LD_INT 8
23608: PUSH
23609: LD_INT 9
23611: PUSH
23612: LD_INT 10
23614: PUSH
23615: LD_INT 11
23617: PUSH
23618: LD_INT 12
23620: PUSH
23621: LD_INT 13
23623: PUSH
23624: LD_INT 14
23626: PUSH
23627: LD_INT 15
23629: PUSH
23630: LD_INT 16
23632: PUSH
23633: LD_INT 17
23635: PUSH
23636: LD_INT 18
23638: PUSH
23639: LD_INT 19
23641: PUSH
23642: LD_INT 20
23644: PUSH
23645: LD_INT 21
23647: PUSH
23648: LD_INT 22
23650: PUSH
23651: LD_INT 23
23653: PUSH
23654: LD_INT 24
23656: PUSH
23657: LD_INT 25
23659: PUSH
23660: LD_INT 26
23662: PUSH
23663: LD_INT 27
23665: PUSH
23666: LD_INT 28
23668: PUSH
23669: LD_INT 29
23671: PUSH
23672: LD_INT 30
23674: PUSH
23675: LD_INT 31
23677: PUSH
23678: LD_INT 32
23680: PUSH
23681: LD_INT 33
23683: PUSH
23684: LD_INT 34
23686: PUSH
23687: LD_INT 35
23689: PUSH
23690: LD_INT 36
23692: PUSH
23693: EMPTY
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: PUSH
23731: LD_INT 101
23733: PUSH
23734: LD_INT 102
23736: PUSH
23737: LD_INT 103
23739: PUSH
23740: LD_INT 104
23742: PUSH
23743: LD_INT 105
23745: PUSH
23746: LD_INT 106
23748: PUSH
23749: LD_INT 107
23751: PUSH
23752: LD_INT 108
23754: PUSH
23755: LD_INT 109
23757: PUSH
23758: LD_INT 110
23760: PUSH
23761: LD_INT 111
23763: PUSH
23764: LD_INT 112
23766: PUSH
23767: LD_INT 113
23769: PUSH
23770: LD_INT 114
23772: PUSH
23773: LD_INT 115
23775: PUSH
23776: LD_INT 116
23778: PUSH
23779: LD_INT 117
23781: PUSH
23782: LD_INT 118
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: ST_TO_ADDR
23809: GO 23812
23811: POP
// end else
23812: GO 24043
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23814: LD_ADDR_VAR 0 2
23818: PUSH
23819: LD_INT 1
23821: PUSH
23822: LD_INT 2
23824: PUSH
23825: LD_INT 3
23827: PUSH
23828: LD_INT 4
23830: PUSH
23831: LD_INT 5
23833: PUSH
23834: LD_INT 6
23836: PUSH
23837: LD_INT 7
23839: PUSH
23840: LD_INT 8
23842: PUSH
23843: LD_INT 9
23845: PUSH
23846: LD_INT 10
23848: PUSH
23849: LD_INT 11
23851: PUSH
23852: LD_INT 12
23854: PUSH
23855: LD_INT 13
23857: PUSH
23858: LD_INT 14
23860: PUSH
23861: LD_INT 15
23863: PUSH
23864: LD_INT 16
23866: PUSH
23867: LD_INT 17
23869: PUSH
23870: LD_INT 18
23872: PUSH
23873: LD_INT 19
23875: PUSH
23876: LD_INT 20
23878: PUSH
23879: LD_INT 21
23881: PUSH
23882: LD_INT 22
23884: PUSH
23885: LD_INT 23
23887: PUSH
23888: LD_INT 24
23890: PUSH
23891: LD_INT 25
23893: PUSH
23894: LD_INT 26
23896: PUSH
23897: LD_INT 27
23899: PUSH
23900: LD_INT 28
23902: PUSH
23903: LD_INT 29
23905: PUSH
23906: LD_INT 30
23908: PUSH
23909: LD_INT 31
23911: PUSH
23912: LD_INT 32
23914: PUSH
23915: LD_INT 33
23917: PUSH
23918: LD_INT 34
23920: PUSH
23921: LD_INT 35
23923: PUSH
23924: LD_INT 36
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: PUSH
23965: LD_INT 101
23967: PUSH
23968: LD_INT 102
23970: PUSH
23971: LD_INT 103
23973: PUSH
23974: LD_INT 104
23976: PUSH
23977: LD_INT 105
23979: PUSH
23980: LD_INT 106
23982: PUSH
23983: LD_INT 107
23985: PUSH
23986: LD_INT 108
23988: PUSH
23989: LD_INT 109
23991: PUSH
23992: LD_INT 110
23994: PUSH
23995: LD_INT 111
23997: PUSH
23998: LD_INT 112
24000: PUSH
24001: LD_INT 113
24003: PUSH
24004: LD_INT 114
24006: PUSH
24007: LD_INT 115
24009: PUSH
24010: LD_INT 116
24012: PUSH
24013: LD_INT 117
24015: PUSH
24016: LD_INT 118
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: ST_TO_ADDR
// if result then
24043: LD_VAR 0 2
24047: IFFALSE 24833
// begin normal :=  ;
24049: LD_ADDR_VAR 0 5
24053: PUSH
24054: LD_STRING 
24056: ST_TO_ADDR
// hardcore :=  ;
24057: LD_ADDR_VAR 0 6
24061: PUSH
24062: LD_STRING 
24064: ST_TO_ADDR
// active :=  ;
24065: LD_ADDR_VAR 0 7
24069: PUSH
24070: LD_STRING 
24072: ST_TO_ADDR
// for i = 1 to normalCounter do
24073: LD_ADDR_VAR 0 8
24077: PUSH
24078: DOUBLE
24079: LD_INT 1
24081: DEC
24082: ST_TO_ADDR
24083: LD_EXP 65
24087: PUSH
24088: FOR_TO
24089: IFFALSE 24190
// begin tmp := 0 ;
24091: LD_ADDR_VAR 0 3
24095: PUSH
24096: LD_STRING 0
24098: ST_TO_ADDR
// if result [ 1 ] then
24099: LD_VAR 0 2
24103: PUSH
24104: LD_INT 1
24106: ARRAY
24107: IFFALSE 24172
// if result [ 1 ] [ 1 ] = i then
24109: LD_VAR 0 2
24113: PUSH
24114: LD_INT 1
24116: ARRAY
24117: PUSH
24118: LD_INT 1
24120: ARRAY
24121: PUSH
24122: LD_VAR 0 8
24126: EQUAL
24127: IFFALSE 24172
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24129: LD_ADDR_VAR 0 2
24133: PUSH
24134: LD_VAR 0 2
24138: PPUSH
24139: LD_INT 1
24141: PPUSH
24142: LD_VAR 0 2
24146: PUSH
24147: LD_INT 1
24149: ARRAY
24150: PPUSH
24151: LD_INT 1
24153: PPUSH
24154: CALL_OW 3
24158: PPUSH
24159: CALL_OW 1
24163: ST_TO_ADDR
// tmp := 1 ;
24164: LD_ADDR_VAR 0 3
24168: PUSH
24169: LD_STRING 1
24171: ST_TO_ADDR
// end ; normal := normal & tmp ;
24172: LD_ADDR_VAR 0 5
24176: PUSH
24177: LD_VAR 0 5
24181: PUSH
24182: LD_VAR 0 3
24186: STR
24187: ST_TO_ADDR
// end ;
24188: GO 24088
24190: POP
24191: POP
// for i = 1 to hardcoreCounter do
24192: LD_ADDR_VAR 0 8
24196: PUSH
24197: DOUBLE
24198: LD_INT 1
24200: DEC
24201: ST_TO_ADDR
24202: LD_EXP 66
24206: PUSH
24207: FOR_TO
24208: IFFALSE 24313
// begin tmp := 0 ;
24210: LD_ADDR_VAR 0 3
24214: PUSH
24215: LD_STRING 0
24217: ST_TO_ADDR
// if result [ 2 ] then
24218: LD_VAR 0 2
24222: PUSH
24223: LD_INT 2
24225: ARRAY
24226: IFFALSE 24295
// if result [ 2 ] [ 1 ] = 100 + i then
24228: LD_VAR 0 2
24232: PUSH
24233: LD_INT 2
24235: ARRAY
24236: PUSH
24237: LD_INT 1
24239: ARRAY
24240: PUSH
24241: LD_INT 100
24243: PUSH
24244: LD_VAR 0 8
24248: PLUS
24249: EQUAL
24250: IFFALSE 24295
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24252: LD_ADDR_VAR 0 2
24256: PUSH
24257: LD_VAR 0 2
24261: PPUSH
24262: LD_INT 2
24264: PPUSH
24265: LD_VAR 0 2
24269: PUSH
24270: LD_INT 2
24272: ARRAY
24273: PPUSH
24274: LD_INT 1
24276: PPUSH
24277: CALL_OW 3
24281: PPUSH
24282: CALL_OW 1
24286: ST_TO_ADDR
// tmp := 1 ;
24287: LD_ADDR_VAR 0 3
24291: PUSH
24292: LD_STRING 1
24294: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24295: LD_ADDR_VAR 0 6
24299: PUSH
24300: LD_VAR 0 6
24304: PUSH
24305: LD_VAR 0 3
24309: STR
24310: ST_TO_ADDR
// end ;
24311: GO 24207
24313: POP
24314: POP
// if isGameLoad then
24315: LD_VAR 0 1
24319: IFFALSE 24794
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24321: LD_ADDR_VAR 0 4
24325: PUSH
24326: LD_EXP 69
24330: PUSH
24331: LD_EXP 68
24335: PUSH
24336: LD_EXP 70
24340: PUSH
24341: LD_EXP 67
24345: PUSH
24346: LD_EXP 71
24350: PUSH
24351: LD_EXP 72
24355: PUSH
24356: LD_EXP 73
24360: PUSH
24361: LD_EXP 74
24365: PUSH
24366: LD_EXP 75
24370: PUSH
24371: LD_EXP 76
24375: PUSH
24376: LD_EXP 77
24380: PUSH
24381: LD_EXP 78
24385: PUSH
24386: LD_EXP 79
24390: PUSH
24391: LD_EXP 80
24395: PUSH
24396: LD_EXP 88
24400: PUSH
24401: LD_EXP 89
24405: PUSH
24406: LD_EXP 90
24410: PUSH
24411: LD_EXP 91
24415: PUSH
24416: LD_EXP 93
24420: PUSH
24421: LD_EXP 94
24425: PUSH
24426: LD_EXP 95
24430: PUSH
24431: LD_EXP 98
24435: PUSH
24436: LD_EXP 100
24440: PUSH
24441: LD_EXP 101
24445: PUSH
24446: LD_EXP 102
24450: PUSH
24451: LD_EXP 104
24455: PUSH
24456: LD_EXP 105
24460: PUSH
24461: LD_EXP 108
24465: PUSH
24466: LD_EXP 109
24470: PUSH
24471: LD_EXP 110
24475: PUSH
24476: LD_EXP 111
24480: PUSH
24481: LD_EXP 112
24485: PUSH
24486: LD_EXP 113
24490: PUSH
24491: LD_EXP 114
24495: PUSH
24496: LD_EXP 115
24500: PUSH
24501: LD_EXP 116
24505: PUSH
24506: LD_EXP 81
24510: PUSH
24511: LD_EXP 82
24515: PUSH
24516: LD_EXP 85
24520: PUSH
24521: LD_EXP 86
24525: PUSH
24526: LD_EXP 87
24530: PUSH
24531: LD_EXP 83
24535: PUSH
24536: LD_EXP 84
24540: PUSH
24541: LD_EXP 92
24545: PUSH
24546: LD_EXP 96
24550: PUSH
24551: LD_EXP 97
24555: PUSH
24556: LD_EXP 99
24560: PUSH
24561: LD_EXP 103
24565: PUSH
24566: LD_EXP 106
24570: PUSH
24571: LD_EXP 107
24575: PUSH
24576: LD_EXP 117
24580: PUSH
24581: LD_EXP 118
24585: PUSH
24586: LD_EXP 119
24590: PUSH
24591: LD_EXP 120
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: ST_TO_ADDR
// tmp :=  ;
24652: LD_ADDR_VAR 0 3
24656: PUSH
24657: LD_STRING 
24659: ST_TO_ADDR
// for i = 1 to normalCounter do
24660: LD_ADDR_VAR 0 8
24664: PUSH
24665: DOUBLE
24666: LD_INT 1
24668: DEC
24669: ST_TO_ADDR
24670: LD_EXP 65
24674: PUSH
24675: FOR_TO
24676: IFFALSE 24712
// begin if flags [ i ] then
24678: LD_VAR 0 4
24682: PUSH
24683: LD_VAR 0 8
24687: ARRAY
24688: IFFALSE 24710
// tmp := tmp & i & ; ;
24690: LD_ADDR_VAR 0 3
24694: PUSH
24695: LD_VAR 0 3
24699: PUSH
24700: LD_VAR 0 8
24704: STR
24705: PUSH
24706: LD_STRING ;
24708: STR
24709: ST_TO_ADDR
// end ;
24710: GO 24675
24712: POP
24713: POP
// for i = 1 to hardcoreCounter do
24714: LD_ADDR_VAR 0 8
24718: PUSH
24719: DOUBLE
24720: LD_INT 1
24722: DEC
24723: ST_TO_ADDR
24724: LD_EXP 66
24728: PUSH
24729: FOR_TO
24730: IFFALSE 24776
// begin if flags [ normalCounter + i ] then
24732: LD_VAR 0 4
24736: PUSH
24737: LD_EXP 65
24741: PUSH
24742: LD_VAR 0 8
24746: PLUS
24747: ARRAY
24748: IFFALSE 24774
// tmp := tmp & ( 100 + i ) & ; ;
24750: LD_ADDR_VAR 0 3
24754: PUSH
24755: LD_VAR 0 3
24759: PUSH
24760: LD_INT 100
24762: PUSH
24763: LD_VAR 0 8
24767: PLUS
24768: STR
24769: PUSH
24770: LD_STRING ;
24772: STR
24773: ST_TO_ADDR
// end ;
24774: GO 24729
24776: POP
24777: POP
// if tmp then
24778: LD_VAR 0 3
24782: IFFALSE 24794
// active := tmp ;
24784: LD_ADDR_VAR 0 7
24788: PUSH
24789: LD_VAR 0 3
24793: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24794: LD_STRING getStreamItemsFromMission("
24796: PUSH
24797: LD_VAR 0 5
24801: STR
24802: PUSH
24803: LD_STRING ","
24805: STR
24806: PUSH
24807: LD_VAR 0 6
24811: STR
24812: PUSH
24813: LD_STRING ","
24815: STR
24816: PUSH
24817: LD_VAR 0 7
24821: STR
24822: PUSH
24823: LD_STRING ")
24825: STR
24826: PPUSH
24827: CALL_OW 559
// end else
24831: GO 24840
// ToLua ( getStreamItemsFromMission("","","") ) ;
24833: LD_STRING getStreamItemsFromMission("","","")
24835: PPUSH
24836: CALL_OW 559
// end ;
24840: LD_VAR 0 2
24844: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24845: LD_EXP 64
24849: PUSH
24850: LD_EXP 69
24854: AND
24855: IFFALSE 24979
24857: GO 24859
24859: DISABLE
24860: LD_INT 0
24862: PPUSH
24863: PPUSH
// begin enable ;
24864: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24865: LD_ADDR_VAR 0 2
24869: PUSH
24870: LD_INT 22
24872: PUSH
24873: LD_OWVAR 2
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: PUSH
24882: LD_INT 2
24884: PUSH
24885: LD_INT 34
24887: PUSH
24888: LD_INT 7
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: PUSH
24895: LD_INT 34
24897: PUSH
24898: LD_INT 45
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PUSH
24905: LD_INT 34
24907: PUSH
24908: LD_INT 28
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 34
24917: PUSH
24918: LD_INT 47
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PPUSH
24936: CALL_OW 69
24940: ST_TO_ADDR
// if not tmp then
24941: LD_VAR 0 2
24945: NOT
24946: IFFALSE 24950
// exit ;
24948: GO 24979
// for i in tmp do
24950: LD_ADDR_VAR 0 1
24954: PUSH
24955: LD_VAR 0 2
24959: PUSH
24960: FOR_IN
24961: IFFALSE 24977
// begin SetLives ( i , 0 ) ;
24963: LD_VAR 0 1
24967: PPUSH
24968: LD_INT 0
24970: PPUSH
24971: CALL_OW 234
// end ;
24975: GO 24960
24977: POP
24978: POP
// end ;
24979: PPOPN 2
24981: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24982: LD_EXP 64
24986: PUSH
24987: LD_EXP 70
24991: AND
24992: IFFALSE 25076
24994: GO 24996
24996: DISABLE
24997: LD_INT 0
24999: PPUSH
25000: PPUSH
// begin enable ;
25001: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25002: LD_ADDR_VAR 0 2
25006: PUSH
25007: LD_INT 22
25009: PUSH
25010: LD_OWVAR 2
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: PUSH
25019: LD_INT 32
25021: PUSH
25022: LD_INT 3
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PPUSH
25033: CALL_OW 69
25037: ST_TO_ADDR
// if not tmp then
25038: LD_VAR 0 2
25042: NOT
25043: IFFALSE 25047
// exit ;
25045: GO 25076
// for i in tmp do
25047: LD_ADDR_VAR 0 1
25051: PUSH
25052: LD_VAR 0 2
25056: PUSH
25057: FOR_IN
25058: IFFALSE 25074
// begin SetLives ( i , 0 ) ;
25060: LD_VAR 0 1
25064: PPUSH
25065: LD_INT 0
25067: PPUSH
25068: CALL_OW 234
// end ;
25072: GO 25057
25074: POP
25075: POP
// end ;
25076: PPOPN 2
25078: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25079: LD_EXP 64
25083: PUSH
25084: LD_EXP 67
25088: AND
25089: IFFALSE 25182
25091: GO 25093
25093: DISABLE
25094: LD_INT 0
25096: PPUSH
// begin enable ;
25097: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25098: LD_ADDR_VAR 0 1
25102: PUSH
25103: LD_INT 22
25105: PUSH
25106: LD_OWVAR 2
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: LD_INT 2
25117: PUSH
25118: LD_INT 25
25120: PUSH
25121: LD_INT 5
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 25
25130: PUSH
25131: LD_INT 9
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 25
25140: PUSH
25141: LD_INT 8
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PPUSH
25158: CALL_OW 69
25162: PUSH
25163: FOR_IN
25164: IFFALSE 25180
// begin SetClass ( i , 1 ) ;
25166: LD_VAR 0 1
25170: PPUSH
25171: LD_INT 1
25173: PPUSH
25174: CALL_OW 336
// end ;
25178: GO 25163
25180: POP
25181: POP
// end ;
25182: PPOPN 1
25184: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25185: LD_EXP 64
25189: PUSH
25190: LD_EXP 68
25194: AND
25195: PUSH
25196: LD_OWVAR 65
25200: PUSH
25201: LD_INT 7
25203: LESS
25204: AND
25205: IFFALSE 25219
25207: GO 25209
25209: DISABLE
// begin enable ;
25210: ENABLE
// game_speed := 7 ;
25211: LD_ADDR_OWVAR 65
25215: PUSH
25216: LD_INT 7
25218: ST_TO_ADDR
// end ;
25219: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25220: LD_EXP 64
25224: PUSH
25225: LD_EXP 71
25229: AND
25230: IFFALSE 25432
25232: GO 25234
25234: DISABLE
25235: LD_INT 0
25237: PPUSH
25238: PPUSH
25239: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25240: LD_ADDR_VAR 0 3
25244: PUSH
25245: LD_INT 81
25247: PUSH
25248: LD_OWVAR 2
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: PUSH
25257: LD_INT 21
25259: PUSH
25260: LD_INT 1
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: PPUSH
25271: CALL_OW 69
25275: ST_TO_ADDR
// if not tmp then
25276: LD_VAR 0 3
25280: NOT
25281: IFFALSE 25285
// exit ;
25283: GO 25432
// if tmp > 5 then
25285: LD_VAR 0 3
25289: PUSH
25290: LD_INT 5
25292: GREATER
25293: IFFALSE 25305
// k := 5 else
25295: LD_ADDR_VAR 0 2
25299: PUSH
25300: LD_INT 5
25302: ST_TO_ADDR
25303: GO 25315
// k := tmp ;
25305: LD_ADDR_VAR 0 2
25309: PUSH
25310: LD_VAR 0 3
25314: ST_TO_ADDR
// for i := 1 to k do
25315: LD_ADDR_VAR 0 1
25319: PUSH
25320: DOUBLE
25321: LD_INT 1
25323: DEC
25324: ST_TO_ADDR
25325: LD_VAR 0 2
25329: PUSH
25330: FOR_TO
25331: IFFALSE 25430
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25333: LD_VAR 0 3
25337: PUSH
25338: LD_VAR 0 1
25342: ARRAY
25343: PPUSH
25344: LD_VAR 0 1
25348: PUSH
25349: LD_INT 4
25351: MOD
25352: PUSH
25353: LD_INT 1
25355: PLUS
25356: PPUSH
25357: CALL_OW 259
25361: PUSH
25362: LD_INT 10
25364: LESS
25365: IFFALSE 25428
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25367: LD_VAR 0 3
25371: PUSH
25372: LD_VAR 0 1
25376: ARRAY
25377: PPUSH
25378: LD_VAR 0 1
25382: PUSH
25383: LD_INT 4
25385: MOD
25386: PUSH
25387: LD_INT 1
25389: PLUS
25390: PPUSH
25391: LD_VAR 0 3
25395: PUSH
25396: LD_VAR 0 1
25400: ARRAY
25401: PPUSH
25402: LD_VAR 0 1
25406: PUSH
25407: LD_INT 4
25409: MOD
25410: PUSH
25411: LD_INT 1
25413: PLUS
25414: PPUSH
25415: CALL_OW 259
25419: PUSH
25420: LD_INT 1
25422: PLUS
25423: PPUSH
25424: CALL_OW 237
25428: GO 25330
25430: POP
25431: POP
// end ;
25432: PPOPN 3
25434: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25435: LD_EXP 64
25439: PUSH
25440: LD_EXP 72
25444: AND
25445: IFFALSE 25465
25447: GO 25449
25449: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25450: LD_INT 4
25452: PPUSH
25453: LD_OWVAR 2
25457: PPUSH
25458: LD_INT 0
25460: PPUSH
25461: CALL_OW 324
25465: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25466: LD_EXP 64
25470: PUSH
25471: LD_EXP 101
25475: AND
25476: IFFALSE 25496
25478: GO 25480
25480: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25481: LD_INT 19
25483: PPUSH
25484: LD_OWVAR 2
25488: PPUSH
25489: LD_INT 0
25491: PPUSH
25492: CALL_OW 324
25496: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25497: LD_EXP 64
25501: PUSH
25502: LD_EXP 73
25506: AND
25507: IFFALSE 25609
25509: GO 25511
25511: DISABLE
25512: LD_INT 0
25514: PPUSH
25515: PPUSH
// begin enable ;
25516: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25517: LD_ADDR_VAR 0 2
25521: PUSH
25522: LD_INT 22
25524: PUSH
25525: LD_OWVAR 2
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: PUSH
25534: LD_INT 2
25536: PUSH
25537: LD_INT 34
25539: PUSH
25540: LD_INT 11
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 34
25549: PUSH
25550: LD_INT 30
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: LIST
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PPUSH
25566: CALL_OW 69
25570: ST_TO_ADDR
// if not tmp then
25571: LD_VAR 0 2
25575: NOT
25576: IFFALSE 25580
// exit ;
25578: GO 25609
// for i in tmp do
25580: LD_ADDR_VAR 0 1
25584: PUSH
25585: LD_VAR 0 2
25589: PUSH
25590: FOR_IN
25591: IFFALSE 25607
// begin SetLives ( i , 0 ) ;
25593: LD_VAR 0 1
25597: PPUSH
25598: LD_INT 0
25600: PPUSH
25601: CALL_OW 234
// end ;
25605: GO 25590
25607: POP
25608: POP
// end ;
25609: PPOPN 2
25611: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25612: LD_EXP 64
25616: PUSH
25617: LD_EXP 74
25621: AND
25622: IFFALSE 25642
25624: GO 25626
25626: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25627: LD_INT 32
25629: PPUSH
25630: LD_OWVAR 2
25634: PPUSH
25635: LD_INT 0
25637: PPUSH
25638: CALL_OW 324
25642: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25643: LD_EXP 64
25647: PUSH
25648: LD_EXP 75
25652: AND
25653: IFFALSE 25834
25655: GO 25657
25657: DISABLE
25658: LD_INT 0
25660: PPUSH
25661: PPUSH
25662: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25663: LD_ADDR_VAR 0 2
25667: PUSH
25668: LD_INT 22
25670: PUSH
25671: LD_OWVAR 2
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: PUSH
25680: LD_INT 33
25682: PUSH
25683: LD_INT 3
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PPUSH
25694: CALL_OW 69
25698: ST_TO_ADDR
// if not tmp then
25699: LD_VAR 0 2
25703: NOT
25704: IFFALSE 25708
// exit ;
25706: GO 25834
// side := 0 ;
25708: LD_ADDR_VAR 0 3
25712: PUSH
25713: LD_INT 0
25715: ST_TO_ADDR
// for i := 1 to 8 do
25716: LD_ADDR_VAR 0 1
25720: PUSH
25721: DOUBLE
25722: LD_INT 1
25724: DEC
25725: ST_TO_ADDR
25726: LD_INT 8
25728: PUSH
25729: FOR_TO
25730: IFFALSE 25778
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25732: LD_OWVAR 2
25736: PUSH
25737: LD_VAR 0 1
25741: NONEQUAL
25742: PUSH
25743: LD_OWVAR 2
25747: PPUSH
25748: LD_VAR 0 1
25752: PPUSH
25753: CALL_OW 81
25757: PUSH
25758: LD_INT 2
25760: EQUAL
25761: AND
25762: IFFALSE 25776
// begin side := i ;
25764: LD_ADDR_VAR 0 3
25768: PUSH
25769: LD_VAR 0 1
25773: ST_TO_ADDR
// break ;
25774: GO 25778
// end ;
25776: GO 25729
25778: POP
25779: POP
// if not side then
25780: LD_VAR 0 3
25784: NOT
25785: IFFALSE 25789
// exit ;
25787: GO 25834
// for i := 1 to tmp do
25789: LD_ADDR_VAR 0 1
25793: PUSH
25794: DOUBLE
25795: LD_INT 1
25797: DEC
25798: ST_TO_ADDR
25799: LD_VAR 0 2
25803: PUSH
25804: FOR_TO
25805: IFFALSE 25832
// if Prob ( 60 ) then
25807: LD_INT 60
25809: PPUSH
25810: CALL_OW 13
25814: IFFALSE 25830
// SetSide ( i , side ) ;
25816: LD_VAR 0 1
25820: PPUSH
25821: LD_VAR 0 3
25825: PPUSH
25826: CALL_OW 235
25830: GO 25804
25832: POP
25833: POP
// end ;
25834: PPOPN 3
25836: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25837: LD_EXP 64
25841: PUSH
25842: LD_EXP 77
25846: AND
25847: IFFALSE 25966
25849: GO 25851
25851: DISABLE
25852: LD_INT 0
25854: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25855: LD_ADDR_VAR 0 1
25859: PUSH
25860: LD_INT 22
25862: PUSH
25863: LD_OWVAR 2
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: LD_INT 21
25874: PUSH
25875: LD_INT 1
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PUSH
25882: LD_INT 3
25884: PUSH
25885: LD_INT 23
25887: PUSH
25888: LD_INT 0
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: LIST
25903: PPUSH
25904: CALL_OW 69
25908: PUSH
25909: FOR_IN
25910: IFFALSE 25964
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25912: LD_VAR 0 1
25916: PPUSH
25917: CALL_OW 257
25921: PUSH
25922: LD_INT 1
25924: PUSH
25925: LD_INT 2
25927: PUSH
25928: LD_INT 3
25930: PUSH
25931: LD_INT 4
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: IN
25940: IFFALSE 25962
// SetClass ( un , rand ( 1 , 4 ) ) ;
25942: LD_VAR 0 1
25946: PPUSH
25947: LD_INT 1
25949: PPUSH
25950: LD_INT 4
25952: PPUSH
25953: CALL_OW 12
25957: PPUSH
25958: CALL_OW 336
25962: GO 25909
25964: POP
25965: POP
// end ;
25966: PPOPN 1
25968: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25969: LD_EXP 64
25973: PUSH
25974: LD_EXP 76
25978: AND
25979: IFFALSE 26058
25981: GO 25983
25983: DISABLE
25984: LD_INT 0
25986: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25987: LD_ADDR_VAR 0 1
25991: PUSH
25992: LD_INT 22
25994: PUSH
25995: LD_OWVAR 2
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: PUSH
26004: LD_INT 21
26006: PUSH
26007: LD_INT 3
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PPUSH
26018: CALL_OW 69
26022: ST_TO_ADDR
// if not tmp then
26023: LD_VAR 0 1
26027: NOT
26028: IFFALSE 26032
// exit ;
26030: GO 26058
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26032: LD_VAR 0 1
26036: PUSH
26037: LD_INT 1
26039: PPUSH
26040: LD_VAR 0 1
26044: PPUSH
26045: CALL_OW 12
26049: ARRAY
26050: PPUSH
26051: LD_INT 100
26053: PPUSH
26054: CALL_OW 234
// end ;
26058: PPOPN 1
26060: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26061: LD_EXP 64
26065: PUSH
26066: LD_EXP 78
26070: AND
26071: IFFALSE 26169
26073: GO 26075
26075: DISABLE
26076: LD_INT 0
26078: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26079: LD_ADDR_VAR 0 1
26083: PUSH
26084: LD_INT 22
26086: PUSH
26087: LD_OWVAR 2
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: PUSH
26096: LD_INT 21
26098: PUSH
26099: LD_INT 1
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PPUSH
26110: CALL_OW 69
26114: ST_TO_ADDR
// if not tmp then
26115: LD_VAR 0 1
26119: NOT
26120: IFFALSE 26124
// exit ;
26122: GO 26169
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26124: LD_VAR 0 1
26128: PUSH
26129: LD_INT 1
26131: PPUSH
26132: LD_VAR 0 1
26136: PPUSH
26137: CALL_OW 12
26141: ARRAY
26142: PPUSH
26143: LD_INT 1
26145: PPUSH
26146: LD_INT 4
26148: PPUSH
26149: CALL_OW 12
26153: PPUSH
26154: LD_INT 3000
26156: PPUSH
26157: LD_INT 9000
26159: PPUSH
26160: CALL_OW 12
26164: PPUSH
26165: CALL_OW 492
// end ;
26169: PPOPN 1
26171: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26172: LD_EXP 64
26176: PUSH
26177: LD_EXP 79
26181: AND
26182: IFFALSE 26202
26184: GO 26186
26186: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26187: LD_INT 1
26189: PPUSH
26190: LD_OWVAR 2
26194: PPUSH
26195: LD_INT 0
26197: PPUSH
26198: CALL_OW 324
26202: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26203: LD_EXP 64
26207: PUSH
26208: LD_EXP 80
26212: AND
26213: IFFALSE 26296
26215: GO 26217
26217: DISABLE
26218: LD_INT 0
26220: PPUSH
26221: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26222: LD_ADDR_VAR 0 2
26226: PUSH
26227: LD_INT 22
26229: PUSH
26230: LD_OWVAR 2
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 21
26241: PUSH
26242: LD_INT 3
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PPUSH
26253: CALL_OW 69
26257: ST_TO_ADDR
// if not tmp then
26258: LD_VAR 0 2
26262: NOT
26263: IFFALSE 26267
// exit ;
26265: GO 26296
// for i in tmp do
26267: LD_ADDR_VAR 0 1
26271: PUSH
26272: LD_VAR 0 2
26276: PUSH
26277: FOR_IN
26278: IFFALSE 26294
// SetBLevel ( i , 10 ) ;
26280: LD_VAR 0 1
26284: PPUSH
26285: LD_INT 10
26287: PPUSH
26288: CALL_OW 241
26292: GO 26277
26294: POP
26295: POP
// end ;
26296: PPOPN 2
26298: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26299: LD_EXP 64
26303: PUSH
26304: LD_EXP 81
26308: AND
26309: IFFALSE 26420
26311: GO 26313
26313: DISABLE
26314: LD_INT 0
26316: PPUSH
26317: PPUSH
26318: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26319: LD_ADDR_VAR 0 3
26323: PUSH
26324: LD_INT 22
26326: PUSH
26327: LD_OWVAR 2
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: PUSH
26336: LD_INT 25
26338: PUSH
26339: LD_INT 1
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PPUSH
26350: CALL_OW 69
26354: ST_TO_ADDR
// if not tmp then
26355: LD_VAR 0 3
26359: NOT
26360: IFFALSE 26364
// exit ;
26362: GO 26420
// un := tmp [ rand ( 1 , tmp ) ] ;
26364: LD_ADDR_VAR 0 2
26368: PUSH
26369: LD_VAR 0 3
26373: PUSH
26374: LD_INT 1
26376: PPUSH
26377: LD_VAR 0 3
26381: PPUSH
26382: CALL_OW 12
26386: ARRAY
26387: ST_TO_ADDR
// if Crawls ( un ) then
26388: LD_VAR 0 2
26392: PPUSH
26393: CALL_OW 318
26397: IFFALSE 26408
// ComWalk ( un ) ;
26399: LD_VAR 0 2
26403: PPUSH
26404: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26408: LD_VAR 0 2
26412: PPUSH
26413: LD_INT 5
26415: PPUSH
26416: CALL_OW 336
// end ;
26420: PPOPN 3
26422: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26423: LD_EXP 64
26427: PUSH
26428: LD_EXP 82
26432: AND
26433: PUSH
26434: LD_OWVAR 67
26438: PUSH
26439: LD_INT 4
26441: LESS
26442: AND
26443: IFFALSE 26462
26445: GO 26447
26447: DISABLE
// begin Difficulty := Difficulty + 1 ;
26448: LD_ADDR_OWVAR 67
26452: PUSH
26453: LD_OWVAR 67
26457: PUSH
26458: LD_INT 1
26460: PLUS
26461: ST_TO_ADDR
// end ;
26462: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26463: LD_EXP 64
26467: PUSH
26468: LD_EXP 83
26472: AND
26473: IFFALSE 26576
26475: GO 26477
26477: DISABLE
26478: LD_INT 0
26480: PPUSH
// begin for i := 1 to 5 do
26481: LD_ADDR_VAR 0 1
26485: PUSH
26486: DOUBLE
26487: LD_INT 1
26489: DEC
26490: ST_TO_ADDR
26491: LD_INT 5
26493: PUSH
26494: FOR_TO
26495: IFFALSE 26574
// begin uc_nation := nation_nature ;
26497: LD_ADDR_OWVAR 21
26501: PUSH
26502: LD_INT 0
26504: ST_TO_ADDR
// uc_side := 0 ;
26505: LD_ADDR_OWVAR 20
26509: PUSH
26510: LD_INT 0
26512: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26513: LD_ADDR_OWVAR 29
26517: PUSH
26518: LD_INT 12
26520: PUSH
26521: LD_INT 12
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: ST_TO_ADDR
// hc_agressivity := 20 ;
26528: LD_ADDR_OWVAR 35
26532: PUSH
26533: LD_INT 20
26535: ST_TO_ADDR
// hc_class := class_tiger ;
26536: LD_ADDR_OWVAR 28
26540: PUSH
26541: LD_INT 14
26543: ST_TO_ADDR
// hc_gallery :=  ;
26544: LD_ADDR_OWVAR 33
26548: PUSH
26549: LD_STRING 
26551: ST_TO_ADDR
// hc_name :=  ;
26552: LD_ADDR_OWVAR 26
26556: PUSH
26557: LD_STRING 
26559: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26560: CALL_OW 44
26564: PPUSH
26565: LD_INT 0
26567: PPUSH
26568: CALL_OW 51
// end ;
26572: GO 26494
26574: POP
26575: POP
// end ;
26576: PPOPN 1
26578: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26579: LD_EXP 64
26583: PUSH
26584: LD_EXP 84
26588: AND
26589: IFFALSE 26598
26591: GO 26593
26593: DISABLE
// StreamSibBomb ;
26594: CALL 26599 0 0
26598: END
// export function StreamSibBomb ; var i , x , y ; begin
26599: LD_INT 0
26601: PPUSH
26602: PPUSH
26603: PPUSH
26604: PPUSH
// result := false ;
26605: LD_ADDR_VAR 0 1
26609: PUSH
26610: LD_INT 0
26612: ST_TO_ADDR
// for i := 1 to 16 do
26613: LD_ADDR_VAR 0 2
26617: PUSH
26618: DOUBLE
26619: LD_INT 1
26621: DEC
26622: ST_TO_ADDR
26623: LD_INT 16
26625: PUSH
26626: FOR_TO
26627: IFFALSE 26826
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26629: LD_ADDR_VAR 0 3
26633: PUSH
26634: LD_INT 10
26636: PUSH
26637: LD_INT 20
26639: PUSH
26640: LD_INT 30
26642: PUSH
26643: LD_INT 40
26645: PUSH
26646: LD_INT 50
26648: PUSH
26649: LD_INT 60
26651: PUSH
26652: LD_INT 70
26654: PUSH
26655: LD_INT 80
26657: PUSH
26658: LD_INT 90
26660: PUSH
26661: LD_INT 100
26663: PUSH
26664: LD_INT 110
26666: PUSH
26667: LD_INT 120
26669: PUSH
26670: LD_INT 130
26672: PUSH
26673: LD_INT 140
26675: PUSH
26676: LD_INT 150
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 1
26698: PPUSH
26699: LD_INT 15
26701: PPUSH
26702: CALL_OW 12
26706: ARRAY
26707: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26708: LD_ADDR_VAR 0 4
26712: PUSH
26713: LD_INT 10
26715: PUSH
26716: LD_INT 20
26718: PUSH
26719: LD_INT 30
26721: PUSH
26722: LD_INT 40
26724: PUSH
26725: LD_INT 50
26727: PUSH
26728: LD_INT 60
26730: PUSH
26731: LD_INT 70
26733: PUSH
26734: LD_INT 80
26736: PUSH
26737: LD_INT 90
26739: PUSH
26740: LD_INT 100
26742: PUSH
26743: LD_INT 110
26745: PUSH
26746: LD_INT 120
26748: PUSH
26749: LD_INT 130
26751: PUSH
26752: LD_INT 140
26754: PUSH
26755: LD_INT 150
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: PUSH
26775: LD_INT 1
26777: PPUSH
26778: LD_INT 15
26780: PPUSH
26781: CALL_OW 12
26785: ARRAY
26786: ST_TO_ADDR
// if ValidHex ( x , y ) then
26787: LD_VAR 0 3
26791: PPUSH
26792: LD_VAR 0 4
26796: PPUSH
26797: CALL_OW 488
26801: IFFALSE 26824
// begin result := [ x , y ] ;
26803: LD_ADDR_VAR 0 1
26807: PUSH
26808: LD_VAR 0 3
26812: PUSH
26813: LD_VAR 0 4
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: ST_TO_ADDR
// break ;
26822: GO 26826
// end ; end ;
26824: GO 26626
26826: POP
26827: POP
// if result then
26828: LD_VAR 0 1
26832: IFFALSE 26892
// begin ToLua ( playSibBomb() ) ;
26834: LD_STRING playSibBomb()
26836: PPUSH
26837: CALL_OW 559
// wait ( 0 0$14 ) ;
26841: LD_INT 490
26843: PPUSH
26844: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26848: LD_VAR 0 1
26852: PUSH
26853: LD_INT 1
26855: ARRAY
26856: PPUSH
26857: LD_VAR 0 1
26861: PUSH
26862: LD_INT 2
26864: ARRAY
26865: PPUSH
26866: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26870: LD_VAR 0 1
26874: PUSH
26875: LD_INT 1
26877: ARRAY
26878: PPUSH
26879: LD_VAR 0 1
26883: PUSH
26884: LD_INT 2
26886: ARRAY
26887: PPUSH
26888: CALL_OW 429
// end ; end ;
26892: LD_VAR 0 1
26896: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26897: LD_EXP 64
26901: PUSH
26902: LD_EXP 86
26906: AND
26907: IFFALSE 26919
26909: GO 26911
26911: DISABLE
// YouLost (  ) ;
26912: LD_STRING 
26914: PPUSH
26915: CALL_OW 104
26919: END
// every 0 0$1 trigger StreamModeActive and sFog do
26920: LD_EXP 64
26924: PUSH
26925: LD_EXP 85
26929: AND
26930: IFFALSE 26944
26932: GO 26934
26934: DISABLE
// FogOff ( your_side ) ;
26935: LD_OWVAR 2
26939: PPUSH
26940: CALL_OW 344
26944: END
// every 0 0$1 trigger StreamModeActive and sSun do
26945: LD_EXP 64
26949: PUSH
26950: LD_EXP 87
26954: AND
26955: IFFALSE 26983
26957: GO 26959
26959: DISABLE
// begin solar_recharge_percent := 0 ;
26960: LD_ADDR_OWVAR 79
26964: PUSH
26965: LD_INT 0
26967: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26968: LD_INT 10500
26970: PPUSH
26971: CALL_OW 67
// solar_recharge_percent := 100 ;
26975: LD_ADDR_OWVAR 79
26979: PUSH
26980: LD_INT 100
26982: ST_TO_ADDR
// end ;
26983: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26984: LD_EXP 64
26988: PUSH
26989: LD_EXP 88
26993: AND
26994: IFFALSE 27233
26996: GO 26998
26998: DISABLE
26999: LD_INT 0
27001: PPUSH
27002: PPUSH
27003: PPUSH
// begin tmp := [ ] ;
27004: LD_ADDR_VAR 0 3
27008: PUSH
27009: EMPTY
27010: ST_TO_ADDR
// for i := 1 to 6 do
27011: LD_ADDR_VAR 0 1
27015: PUSH
27016: DOUBLE
27017: LD_INT 1
27019: DEC
27020: ST_TO_ADDR
27021: LD_INT 6
27023: PUSH
27024: FOR_TO
27025: IFFALSE 27130
// begin uc_nation := nation_nature ;
27027: LD_ADDR_OWVAR 21
27031: PUSH
27032: LD_INT 0
27034: ST_TO_ADDR
// uc_side := 0 ;
27035: LD_ADDR_OWVAR 20
27039: PUSH
27040: LD_INT 0
27042: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27043: LD_ADDR_OWVAR 29
27047: PUSH
27048: LD_INT 12
27050: PUSH
27051: LD_INT 12
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: ST_TO_ADDR
// hc_agressivity := 20 ;
27058: LD_ADDR_OWVAR 35
27062: PUSH
27063: LD_INT 20
27065: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27066: LD_ADDR_OWVAR 28
27070: PUSH
27071: LD_INT 17
27073: ST_TO_ADDR
// hc_gallery :=  ;
27074: LD_ADDR_OWVAR 33
27078: PUSH
27079: LD_STRING 
27081: ST_TO_ADDR
// hc_name :=  ;
27082: LD_ADDR_OWVAR 26
27086: PUSH
27087: LD_STRING 
27089: ST_TO_ADDR
// un := CreateHuman ;
27090: LD_ADDR_VAR 0 2
27094: PUSH
27095: CALL_OW 44
27099: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27100: LD_VAR 0 2
27104: PPUSH
27105: LD_INT 1
27107: PPUSH
27108: CALL_OW 51
// tmp := tmp ^ un ;
27112: LD_ADDR_VAR 0 3
27116: PUSH
27117: LD_VAR 0 3
27121: PUSH
27122: LD_VAR 0 2
27126: ADD
27127: ST_TO_ADDR
// end ;
27128: GO 27024
27130: POP
27131: POP
// repeat wait ( 0 0$1 ) ;
27132: LD_INT 35
27134: PPUSH
27135: CALL_OW 67
// for un in tmp do
27139: LD_ADDR_VAR 0 2
27143: PUSH
27144: LD_VAR 0 3
27148: PUSH
27149: FOR_IN
27150: IFFALSE 27224
// begin if IsDead ( un ) then
27152: LD_VAR 0 2
27156: PPUSH
27157: CALL_OW 301
27161: IFFALSE 27181
// begin tmp := tmp diff un ;
27163: LD_ADDR_VAR 0 3
27167: PUSH
27168: LD_VAR 0 3
27172: PUSH
27173: LD_VAR 0 2
27177: DIFF
27178: ST_TO_ADDR
// continue ;
27179: GO 27149
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27181: LD_VAR 0 2
27185: PPUSH
27186: LD_INT 3
27188: PUSH
27189: LD_INT 22
27191: PUSH
27192: LD_INT 0
27194: PUSH
27195: EMPTY
27196: LIST
27197: LIST
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PPUSH
27203: CALL_OW 69
27207: PPUSH
27208: LD_VAR 0 2
27212: PPUSH
27213: CALL_OW 74
27217: PPUSH
27218: CALL_OW 115
// end ;
27222: GO 27149
27224: POP
27225: POP
// until not tmp ;
27226: LD_VAR 0 3
27230: NOT
27231: IFFALSE 27132
// end ;
27233: PPOPN 3
27235: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27236: LD_EXP 64
27240: PUSH
27241: LD_EXP 89
27245: AND
27246: IFFALSE 27300
27248: GO 27250
27250: DISABLE
// begin ToLua ( displayTroll(); ) ;
27251: LD_STRING displayTroll();
27253: PPUSH
27254: CALL_OW 559
// wait ( 3 3$00 ) ;
27258: LD_INT 6300
27260: PPUSH
27261: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27265: LD_STRING hideTroll();
27267: PPUSH
27268: CALL_OW 559
// wait ( 1 1$00 ) ;
27272: LD_INT 2100
27274: PPUSH
27275: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27279: LD_STRING displayTroll();
27281: PPUSH
27282: CALL_OW 559
// wait ( 1 1$00 ) ;
27286: LD_INT 2100
27288: PPUSH
27289: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27293: LD_STRING hideTroll();
27295: PPUSH
27296: CALL_OW 559
// end ;
27300: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27301: LD_EXP 64
27305: PUSH
27306: LD_EXP 90
27310: AND
27311: IFFALSE 27374
27313: GO 27315
27315: DISABLE
27316: LD_INT 0
27318: PPUSH
// begin p := 0 ;
27319: LD_ADDR_VAR 0 1
27323: PUSH
27324: LD_INT 0
27326: ST_TO_ADDR
// repeat game_speed := 1 ;
27327: LD_ADDR_OWVAR 65
27331: PUSH
27332: LD_INT 1
27334: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27335: LD_INT 35
27337: PPUSH
27338: CALL_OW 67
// p := p + 1 ;
27342: LD_ADDR_VAR 0 1
27346: PUSH
27347: LD_VAR 0 1
27351: PUSH
27352: LD_INT 1
27354: PLUS
27355: ST_TO_ADDR
// until p >= 60 ;
27356: LD_VAR 0 1
27360: PUSH
27361: LD_INT 60
27363: GREATEREQUAL
27364: IFFALSE 27327
// game_speed := 4 ;
27366: LD_ADDR_OWVAR 65
27370: PUSH
27371: LD_INT 4
27373: ST_TO_ADDR
// end ;
27374: PPOPN 1
27376: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27377: LD_EXP 64
27381: PUSH
27382: LD_EXP 91
27386: AND
27387: IFFALSE 27533
27389: GO 27391
27391: DISABLE
27392: LD_INT 0
27394: PPUSH
27395: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27396: LD_ADDR_VAR 0 1
27400: PUSH
27401: LD_INT 22
27403: PUSH
27404: LD_OWVAR 2
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 2
27415: PUSH
27416: LD_INT 30
27418: PUSH
27419: LD_INT 0
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: PUSH
27426: LD_INT 30
27428: PUSH
27429: LD_INT 1
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: LIST
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: PPUSH
27445: CALL_OW 69
27449: ST_TO_ADDR
// if not depot then
27450: LD_VAR 0 1
27454: NOT
27455: IFFALSE 27459
// exit ;
27457: GO 27533
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27459: LD_ADDR_VAR 0 2
27463: PUSH
27464: LD_VAR 0 1
27468: PUSH
27469: LD_INT 1
27471: PPUSH
27472: LD_VAR 0 1
27476: PPUSH
27477: CALL_OW 12
27481: ARRAY
27482: PPUSH
27483: CALL_OW 274
27487: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27488: LD_VAR 0 2
27492: PPUSH
27493: LD_INT 1
27495: PPUSH
27496: LD_INT 0
27498: PPUSH
27499: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27503: LD_VAR 0 2
27507: PPUSH
27508: LD_INT 2
27510: PPUSH
27511: LD_INT 0
27513: PPUSH
27514: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27518: LD_VAR 0 2
27522: PPUSH
27523: LD_INT 3
27525: PPUSH
27526: LD_INT 0
27528: PPUSH
27529: CALL_OW 277
// end ;
27533: PPOPN 2
27535: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27536: LD_EXP 64
27540: PUSH
27541: LD_EXP 92
27545: AND
27546: IFFALSE 27643
27548: GO 27550
27550: DISABLE
27551: LD_INT 0
27553: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27554: LD_ADDR_VAR 0 1
27558: PUSH
27559: LD_INT 22
27561: PUSH
27562: LD_OWVAR 2
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: LD_INT 21
27573: PUSH
27574: LD_INT 1
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: PUSH
27581: LD_INT 3
27583: PUSH
27584: LD_INT 23
27586: PUSH
27587: LD_INT 0
27589: PUSH
27590: EMPTY
27591: LIST
27592: LIST
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: LIST
27602: PPUSH
27603: CALL_OW 69
27607: ST_TO_ADDR
// if not tmp then
27608: LD_VAR 0 1
27612: NOT
27613: IFFALSE 27617
// exit ;
27615: GO 27643
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27617: LD_VAR 0 1
27621: PUSH
27622: LD_INT 1
27624: PPUSH
27625: LD_VAR 0 1
27629: PPUSH
27630: CALL_OW 12
27634: ARRAY
27635: PPUSH
27636: LD_INT 200
27638: PPUSH
27639: CALL_OW 234
// end ;
27643: PPOPN 1
27645: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27646: LD_EXP 64
27650: PUSH
27651: LD_EXP 93
27655: AND
27656: IFFALSE 27735
27658: GO 27660
27660: DISABLE
27661: LD_INT 0
27663: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27664: LD_ADDR_VAR 0 1
27668: PUSH
27669: LD_INT 22
27671: PUSH
27672: LD_OWVAR 2
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PUSH
27681: LD_INT 21
27683: PUSH
27684: LD_INT 2
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PPUSH
27695: CALL_OW 69
27699: ST_TO_ADDR
// if not tmp then
27700: LD_VAR 0 1
27704: NOT
27705: IFFALSE 27709
// exit ;
27707: GO 27735
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27709: LD_VAR 0 1
27713: PUSH
27714: LD_INT 1
27716: PPUSH
27717: LD_VAR 0 1
27721: PPUSH
27722: CALL_OW 12
27726: ARRAY
27727: PPUSH
27728: LD_INT 60
27730: PPUSH
27731: CALL_OW 234
// end ;
27735: PPOPN 1
27737: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27738: LD_EXP 64
27742: PUSH
27743: LD_EXP 94
27747: AND
27748: IFFALSE 27847
27750: GO 27752
27752: DISABLE
27753: LD_INT 0
27755: PPUSH
27756: PPUSH
// begin enable ;
27757: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27758: LD_ADDR_VAR 0 1
27762: PUSH
27763: LD_INT 22
27765: PUSH
27766: LD_OWVAR 2
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 61
27777: PUSH
27778: EMPTY
27779: LIST
27780: PUSH
27781: LD_INT 33
27783: PUSH
27784: LD_INT 2
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: LIST
27795: PPUSH
27796: CALL_OW 69
27800: ST_TO_ADDR
// if not tmp then
27801: LD_VAR 0 1
27805: NOT
27806: IFFALSE 27810
// exit ;
27808: GO 27847
// for i in tmp do
27810: LD_ADDR_VAR 0 2
27814: PUSH
27815: LD_VAR 0 1
27819: PUSH
27820: FOR_IN
27821: IFFALSE 27845
// if IsControledBy ( i ) then
27823: LD_VAR 0 2
27827: PPUSH
27828: CALL_OW 312
27832: IFFALSE 27843
// ComUnlink ( i ) ;
27834: LD_VAR 0 2
27838: PPUSH
27839: CALL_OW 136
27843: GO 27820
27845: POP
27846: POP
// end ;
27847: PPOPN 2
27849: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27850: LD_EXP 64
27854: PUSH
27855: LD_EXP 95
27859: AND
27860: IFFALSE 28000
27862: GO 27864
27864: DISABLE
27865: LD_INT 0
27867: PPUSH
27868: PPUSH
// begin ToLua ( displayPowell(); ) ;
27869: LD_STRING displayPowell();
27871: PPUSH
27872: CALL_OW 559
// uc_side := 0 ;
27876: LD_ADDR_OWVAR 20
27880: PUSH
27881: LD_INT 0
27883: ST_TO_ADDR
// uc_nation := 2 ;
27884: LD_ADDR_OWVAR 21
27888: PUSH
27889: LD_INT 2
27891: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27892: LD_ADDR_OWVAR 37
27896: PUSH
27897: LD_INT 14
27899: ST_TO_ADDR
// vc_engine := engine_siberite ;
27900: LD_ADDR_OWVAR 39
27904: PUSH
27905: LD_INT 3
27907: ST_TO_ADDR
// vc_control := control_apeman ;
27908: LD_ADDR_OWVAR 38
27912: PUSH
27913: LD_INT 5
27915: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27916: LD_ADDR_OWVAR 40
27920: PUSH
27921: LD_INT 29
27923: ST_TO_ADDR
// un := CreateVehicle ;
27924: LD_ADDR_VAR 0 2
27928: PUSH
27929: CALL_OW 45
27933: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27934: LD_VAR 0 2
27938: PPUSH
27939: LD_INT 1
27941: PPUSH
27942: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27946: LD_INT 35
27948: PPUSH
27949: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27953: LD_VAR 0 2
27957: PPUSH
27958: LD_INT 22
27960: PUSH
27961: LD_OWVAR 2
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: PPUSH
27970: CALL_OW 69
27974: PPUSH
27975: LD_VAR 0 2
27979: PPUSH
27980: CALL_OW 74
27984: PPUSH
27985: CALL_OW 115
// until IsDead ( un ) ;
27989: LD_VAR 0 2
27993: PPUSH
27994: CALL_OW 301
27998: IFFALSE 27946
// end ;
28000: PPOPN 2
28002: END
// every 0 0$1 trigger StreamModeActive and sStu do
28003: LD_EXP 64
28007: PUSH
28008: LD_EXP 103
28012: AND
28013: IFFALSE 28029
28015: GO 28017
28017: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28018: LD_STRING displayStucuk();
28020: PPUSH
28021: CALL_OW 559
// ResetFog ;
28025: CALL_OW 335
// end ;
28029: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28030: LD_EXP 64
28034: PUSH
28035: LD_EXP 96
28039: AND
28040: IFFALSE 28181
28042: GO 28044
28044: DISABLE
28045: LD_INT 0
28047: PPUSH
28048: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28049: LD_ADDR_VAR 0 2
28053: PUSH
28054: LD_INT 22
28056: PUSH
28057: LD_OWVAR 2
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: PUSH
28066: LD_INT 21
28068: PUSH
28069: LD_INT 1
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PPUSH
28080: CALL_OW 69
28084: ST_TO_ADDR
// if not tmp then
28085: LD_VAR 0 2
28089: NOT
28090: IFFALSE 28094
// exit ;
28092: GO 28181
// un := tmp [ rand ( 1 , tmp ) ] ;
28094: LD_ADDR_VAR 0 1
28098: PUSH
28099: LD_VAR 0 2
28103: PUSH
28104: LD_INT 1
28106: PPUSH
28107: LD_VAR 0 2
28111: PPUSH
28112: CALL_OW 12
28116: ARRAY
28117: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28118: LD_VAR 0 1
28122: PPUSH
28123: LD_INT 0
28125: PPUSH
28126: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28130: LD_VAR 0 1
28134: PPUSH
28135: LD_OWVAR 3
28139: PUSH
28140: LD_VAR 0 1
28144: DIFF
28145: PPUSH
28146: LD_VAR 0 1
28150: PPUSH
28151: CALL_OW 74
28155: PPUSH
28156: CALL_OW 115
// wait ( 0 0$20 ) ;
28160: LD_INT 700
28162: PPUSH
28163: CALL_OW 67
// SetSide ( un , your_side ) ;
28167: LD_VAR 0 1
28171: PPUSH
28172: LD_OWVAR 2
28176: PPUSH
28177: CALL_OW 235
// end ;
28181: PPOPN 2
28183: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28184: LD_EXP 64
28188: PUSH
28189: LD_EXP 97
28193: AND
28194: IFFALSE 28300
28196: GO 28198
28198: DISABLE
28199: LD_INT 0
28201: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28202: LD_ADDR_VAR 0 1
28206: PUSH
28207: LD_INT 22
28209: PUSH
28210: LD_OWVAR 2
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PUSH
28219: LD_INT 2
28221: PUSH
28222: LD_INT 30
28224: PUSH
28225: LD_INT 0
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PUSH
28232: LD_INT 30
28234: PUSH
28235: LD_INT 1
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: LIST
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PPUSH
28251: CALL_OW 69
28255: ST_TO_ADDR
// if not depot then
28256: LD_VAR 0 1
28260: NOT
28261: IFFALSE 28265
// exit ;
28263: GO 28300
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28265: LD_VAR 0 1
28269: PUSH
28270: LD_INT 1
28272: ARRAY
28273: PPUSH
28274: CALL_OW 250
28278: PPUSH
28279: LD_VAR 0 1
28283: PUSH
28284: LD_INT 1
28286: ARRAY
28287: PPUSH
28288: CALL_OW 251
28292: PPUSH
28293: LD_INT 70
28295: PPUSH
28296: CALL_OW 495
// end ;
28300: PPOPN 1
28302: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28303: LD_EXP 64
28307: PUSH
28308: LD_EXP 98
28312: AND
28313: IFFALSE 28524
28315: GO 28317
28317: DISABLE
28318: LD_INT 0
28320: PPUSH
28321: PPUSH
28322: PPUSH
28323: PPUSH
28324: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28325: LD_ADDR_VAR 0 5
28329: PUSH
28330: LD_INT 22
28332: PUSH
28333: LD_OWVAR 2
28337: PUSH
28338: EMPTY
28339: LIST
28340: LIST
28341: PUSH
28342: LD_INT 21
28344: PUSH
28345: LD_INT 1
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PPUSH
28356: CALL_OW 69
28360: ST_TO_ADDR
// if not tmp then
28361: LD_VAR 0 5
28365: NOT
28366: IFFALSE 28370
// exit ;
28368: GO 28524
// for i in tmp do
28370: LD_ADDR_VAR 0 1
28374: PUSH
28375: LD_VAR 0 5
28379: PUSH
28380: FOR_IN
28381: IFFALSE 28522
// begin d := rand ( 0 , 5 ) ;
28383: LD_ADDR_VAR 0 4
28387: PUSH
28388: LD_INT 0
28390: PPUSH
28391: LD_INT 5
28393: PPUSH
28394: CALL_OW 12
28398: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28399: LD_ADDR_VAR 0 2
28403: PUSH
28404: LD_VAR 0 1
28408: PPUSH
28409: CALL_OW 250
28413: PPUSH
28414: LD_VAR 0 4
28418: PPUSH
28419: LD_INT 3
28421: PPUSH
28422: LD_INT 12
28424: PPUSH
28425: CALL_OW 12
28429: PPUSH
28430: CALL_OW 272
28434: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28435: LD_ADDR_VAR 0 3
28439: PUSH
28440: LD_VAR 0 1
28444: PPUSH
28445: CALL_OW 251
28449: PPUSH
28450: LD_VAR 0 4
28454: PPUSH
28455: LD_INT 3
28457: PPUSH
28458: LD_INT 12
28460: PPUSH
28461: CALL_OW 12
28465: PPUSH
28466: CALL_OW 273
28470: ST_TO_ADDR
// if ValidHex ( x , y ) then
28471: LD_VAR 0 2
28475: PPUSH
28476: LD_VAR 0 3
28480: PPUSH
28481: CALL_OW 488
28485: IFFALSE 28520
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28487: LD_VAR 0 1
28491: PPUSH
28492: LD_VAR 0 2
28496: PPUSH
28497: LD_VAR 0 3
28501: PPUSH
28502: LD_INT 3
28504: PPUSH
28505: LD_INT 6
28507: PPUSH
28508: CALL_OW 12
28512: PPUSH
28513: LD_INT 1
28515: PPUSH
28516: CALL_OW 483
// end ;
28520: GO 28380
28522: POP
28523: POP
// end ;
28524: PPOPN 5
28526: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28527: LD_EXP 64
28531: PUSH
28532: LD_EXP 99
28536: AND
28537: IFFALSE 28631
28539: GO 28541
28541: DISABLE
28542: LD_INT 0
28544: PPUSH
28545: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28546: LD_ADDR_VAR 0 2
28550: PUSH
28551: LD_INT 22
28553: PUSH
28554: LD_OWVAR 2
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 32
28565: PUSH
28566: LD_INT 1
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 21
28575: PUSH
28576: LD_INT 2
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: LIST
28587: PPUSH
28588: CALL_OW 69
28592: ST_TO_ADDR
// if not tmp then
28593: LD_VAR 0 2
28597: NOT
28598: IFFALSE 28602
// exit ;
28600: GO 28631
// for i in tmp do
28602: LD_ADDR_VAR 0 1
28606: PUSH
28607: LD_VAR 0 2
28611: PUSH
28612: FOR_IN
28613: IFFALSE 28629
// SetFuel ( i , 0 ) ;
28615: LD_VAR 0 1
28619: PPUSH
28620: LD_INT 0
28622: PPUSH
28623: CALL_OW 240
28627: GO 28612
28629: POP
28630: POP
// end ;
28631: PPOPN 2
28633: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28634: LD_EXP 64
28638: PUSH
28639: LD_EXP 100
28643: AND
28644: IFFALSE 28710
28646: GO 28648
28648: DISABLE
28649: LD_INT 0
28651: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28652: LD_ADDR_VAR 0 1
28656: PUSH
28657: LD_INT 22
28659: PUSH
28660: LD_OWVAR 2
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: PUSH
28669: LD_INT 30
28671: PUSH
28672: LD_INT 29
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: PPUSH
28683: CALL_OW 69
28687: ST_TO_ADDR
// if not tmp then
28688: LD_VAR 0 1
28692: NOT
28693: IFFALSE 28697
// exit ;
28695: GO 28710
// DestroyUnit ( tmp [ 1 ] ) ;
28697: LD_VAR 0 1
28701: PUSH
28702: LD_INT 1
28704: ARRAY
28705: PPUSH
28706: CALL_OW 65
// end ;
28710: PPOPN 1
28712: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28713: LD_EXP 64
28717: PUSH
28718: LD_EXP 102
28722: AND
28723: IFFALSE 28852
28725: GO 28727
28727: DISABLE
28728: LD_INT 0
28730: PPUSH
// begin uc_side := 0 ;
28731: LD_ADDR_OWVAR 20
28735: PUSH
28736: LD_INT 0
28738: ST_TO_ADDR
// uc_nation := nation_arabian ;
28739: LD_ADDR_OWVAR 21
28743: PUSH
28744: LD_INT 2
28746: ST_TO_ADDR
// hc_gallery :=  ;
28747: LD_ADDR_OWVAR 33
28751: PUSH
28752: LD_STRING 
28754: ST_TO_ADDR
// hc_name :=  ;
28755: LD_ADDR_OWVAR 26
28759: PUSH
28760: LD_STRING 
28762: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28763: LD_INT 1
28765: PPUSH
28766: LD_INT 11
28768: PPUSH
28769: LD_INT 10
28771: PPUSH
28772: CALL_OW 380
// un := CreateHuman ;
28776: LD_ADDR_VAR 0 1
28780: PUSH
28781: CALL_OW 44
28785: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28786: LD_VAR 0 1
28790: PPUSH
28791: LD_INT 1
28793: PPUSH
28794: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28798: LD_INT 35
28800: PPUSH
28801: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28805: LD_VAR 0 1
28809: PPUSH
28810: LD_INT 22
28812: PUSH
28813: LD_OWVAR 2
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PPUSH
28822: CALL_OW 69
28826: PPUSH
28827: LD_VAR 0 1
28831: PPUSH
28832: CALL_OW 74
28836: PPUSH
28837: CALL_OW 115
// until IsDead ( un ) ;
28841: LD_VAR 0 1
28845: PPUSH
28846: CALL_OW 301
28850: IFFALSE 28798
// end ;
28852: PPOPN 1
28854: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28855: LD_EXP 64
28859: PUSH
28860: LD_EXP 104
28864: AND
28865: IFFALSE 28877
28867: GO 28869
28869: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28870: LD_STRING earthquake(getX(game), 0, 32)
28872: PPUSH
28873: CALL_OW 559
28877: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28878: LD_EXP 64
28882: PUSH
28883: LD_EXP 105
28887: AND
28888: IFFALSE 28979
28890: GO 28892
28892: DISABLE
28893: LD_INT 0
28895: PPUSH
// begin enable ;
28896: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28897: LD_ADDR_VAR 0 1
28901: PUSH
28902: LD_INT 22
28904: PUSH
28905: LD_OWVAR 2
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: PUSH
28914: LD_INT 21
28916: PUSH
28917: LD_INT 2
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: LD_INT 33
28926: PUSH
28927: LD_INT 3
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: LIST
28938: PPUSH
28939: CALL_OW 69
28943: ST_TO_ADDR
// if not tmp then
28944: LD_VAR 0 1
28948: NOT
28949: IFFALSE 28953
// exit ;
28951: GO 28979
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28953: LD_VAR 0 1
28957: PUSH
28958: LD_INT 1
28960: PPUSH
28961: LD_VAR 0 1
28965: PPUSH
28966: CALL_OW 12
28970: ARRAY
28971: PPUSH
28972: LD_INT 1
28974: PPUSH
28975: CALL_OW 234
// end ;
28979: PPOPN 1
28981: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28982: LD_EXP 64
28986: PUSH
28987: LD_EXP 106
28991: AND
28992: IFFALSE 29133
28994: GO 28996
28996: DISABLE
28997: LD_INT 0
28999: PPUSH
29000: PPUSH
29001: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29002: LD_ADDR_VAR 0 3
29006: PUSH
29007: LD_INT 22
29009: PUSH
29010: LD_OWVAR 2
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PUSH
29019: LD_INT 25
29021: PUSH
29022: LD_INT 1
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PPUSH
29033: CALL_OW 69
29037: ST_TO_ADDR
// if not tmp then
29038: LD_VAR 0 3
29042: NOT
29043: IFFALSE 29047
// exit ;
29045: GO 29133
// un := tmp [ rand ( 1 , tmp ) ] ;
29047: LD_ADDR_VAR 0 2
29051: PUSH
29052: LD_VAR 0 3
29056: PUSH
29057: LD_INT 1
29059: PPUSH
29060: LD_VAR 0 3
29064: PPUSH
29065: CALL_OW 12
29069: ARRAY
29070: ST_TO_ADDR
// if Crawls ( un ) then
29071: LD_VAR 0 2
29075: PPUSH
29076: CALL_OW 318
29080: IFFALSE 29091
// ComWalk ( un ) ;
29082: LD_VAR 0 2
29086: PPUSH
29087: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29091: LD_VAR 0 2
29095: PPUSH
29096: LD_INT 9
29098: PPUSH
29099: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29103: LD_INT 28
29105: PPUSH
29106: LD_OWVAR 2
29110: PPUSH
29111: LD_INT 2
29113: PPUSH
29114: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29118: LD_INT 29
29120: PPUSH
29121: LD_OWVAR 2
29125: PPUSH
29126: LD_INT 2
29128: PPUSH
29129: CALL_OW 322
// end ;
29133: PPOPN 3
29135: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29136: LD_EXP 64
29140: PUSH
29141: LD_EXP 107
29145: AND
29146: IFFALSE 29257
29148: GO 29150
29150: DISABLE
29151: LD_INT 0
29153: PPUSH
29154: PPUSH
29155: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29156: LD_ADDR_VAR 0 3
29160: PUSH
29161: LD_INT 22
29163: PUSH
29164: LD_OWVAR 2
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: LD_INT 25
29175: PUSH
29176: LD_INT 1
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: PPUSH
29187: CALL_OW 69
29191: ST_TO_ADDR
// if not tmp then
29192: LD_VAR 0 3
29196: NOT
29197: IFFALSE 29201
// exit ;
29199: GO 29257
// un := tmp [ rand ( 1 , tmp ) ] ;
29201: LD_ADDR_VAR 0 2
29205: PUSH
29206: LD_VAR 0 3
29210: PUSH
29211: LD_INT 1
29213: PPUSH
29214: LD_VAR 0 3
29218: PPUSH
29219: CALL_OW 12
29223: ARRAY
29224: ST_TO_ADDR
// if Crawls ( un ) then
29225: LD_VAR 0 2
29229: PPUSH
29230: CALL_OW 318
29234: IFFALSE 29245
// ComWalk ( un ) ;
29236: LD_VAR 0 2
29240: PPUSH
29241: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29245: LD_VAR 0 2
29249: PPUSH
29250: LD_INT 8
29252: PPUSH
29253: CALL_OW 336
// end ;
29257: PPOPN 3
29259: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29260: LD_EXP 64
29264: PUSH
29265: LD_EXP 108
29269: AND
29270: IFFALSE 29414
29272: GO 29274
29274: DISABLE
29275: LD_INT 0
29277: PPUSH
29278: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29279: LD_ADDR_VAR 0 2
29283: PUSH
29284: LD_INT 22
29286: PUSH
29287: LD_OWVAR 2
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 21
29298: PUSH
29299: LD_INT 2
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: LD_INT 2
29308: PUSH
29309: LD_INT 34
29311: PUSH
29312: LD_INT 12
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: LD_INT 34
29321: PUSH
29322: LD_INT 51
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: LD_INT 34
29331: PUSH
29332: LD_INT 32
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: LIST
29343: LIST
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: LIST
29349: PPUSH
29350: CALL_OW 69
29354: ST_TO_ADDR
// if not tmp then
29355: LD_VAR 0 2
29359: NOT
29360: IFFALSE 29364
// exit ;
29362: GO 29414
// for i in tmp do
29364: LD_ADDR_VAR 0 1
29368: PUSH
29369: LD_VAR 0 2
29373: PUSH
29374: FOR_IN
29375: IFFALSE 29412
// if GetCargo ( i , mat_artifact ) = 0 then
29377: LD_VAR 0 1
29381: PPUSH
29382: LD_INT 4
29384: PPUSH
29385: CALL_OW 289
29389: PUSH
29390: LD_INT 0
29392: EQUAL
29393: IFFALSE 29410
// SetCargo ( i , mat_siberit , 100 ) ;
29395: LD_VAR 0 1
29399: PPUSH
29400: LD_INT 3
29402: PPUSH
29403: LD_INT 100
29405: PPUSH
29406: CALL_OW 290
29410: GO 29374
29412: POP
29413: POP
// end ;
29414: PPOPN 2
29416: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29417: LD_EXP 64
29421: PUSH
29422: LD_EXP 109
29426: AND
29427: IFFALSE 29610
29429: GO 29431
29431: DISABLE
29432: LD_INT 0
29434: PPUSH
29435: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29436: LD_ADDR_VAR 0 2
29440: PUSH
29441: LD_INT 22
29443: PUSH
29444: LD_OWVAR 2
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PPUSH
29453: CALL_OW 69
29457: ST_TO_ADDR
// if not tmp then
29458: LD_VAR 0 2
29462: NOT
29463: IFFALSE 29467
// exit ;
29465: GO 29610
// for i := 1 to 2 do
29467: LD_ADDR_VAR 0 1
29471: PUSH
29472: DOUBLE
29473: LD_INT 1
29475: DEC
29476: ST_TO_ADDR
29477: LD_INT 2
29479: PUSH
29480: FOR_TO
29481: IFFALSE 29608
// begin uc_side := your_side ;
29483: LD_ADDR_OWVAR 20
29487: PUSH
29488: LD_OWVAR 2
29492: ST_TO_ADDR
// uc_nation := nation_american ;
29493: LD_ADDR_OWVAR 21
29497: PUSH
29498: LD_INT 1
29500: ST_TO_ADDR
// vc_chassis := us_morphling ;
29501: LD_ADDR_OWVAR 37
29505: PUSH
29506: LD_INT 5
29508: ST_TO_ADDR
// vc_engine := engine_siberite ;
29509: LD_ADDR_OWVAR 39
29513: PUSH
29514: LD_INT 3
29516: ST_TO_ADDR
// vc_control := control_computer ;
29517: LD_ADDR_OWVAR 38
29521: PUSH
29522: LD_INT 3
29524: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29525: LD_ADDR_OWVAR 40
29529: PUSH
29530: LD_INT 10
29532: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29533: LD_VAR 0 2
29537: PUSH
29538: LD_INT 1
29540: ARRAY
29541: PPUSH
29542: CALL_OW 310
29546: NOT
29547: IFFALSE 29594
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29549: CALL_OW 45
29553: PPUSH
29554: LD_VAR 0 2
29558: PUSH
29559: LD_INT 1
29561: ARRAY
29562: PPUSH
29563: CALL_OW 250
29567: PPUSH
29568: LD_VAR 0 2
29572: PUSH
29573: LD_INT 1
29575: ARRAY
29576: PPUSH
29577: CALL_OW 251
29581: PPUSH
29582: LD_INT 12
29584: PPUSH
29585: LD_INT 1
29587: PPUSH
29588: CALL_OW 50
29592: GO 29606
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29594: CALL_OW 45
29598: PPUSH
29599: LD_INT 1
29601: PPUSH
29602: CALL_OW 51
// end ;
29606: GO 29480
29608: POP
29609: POP
// end ;
29610: PPOPN 2
29612: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29613: LD_EXP 64
29617: PUSH
29618: LD_EXP 110
29622: AND
29623: IFFALSE 29845
29625: GO 29627
29627: DISABLE
29628: LD_INT 0
29630: PPUSH
29631: PPUSH
29632: PPUSH
29633: PPUSH
29634: PPUSH
29635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29636: LD_ADDR_VAR 0 6
29640: PUSH
29641: LD_INT 22
29643: PUSH
29644: LD_OWVAR 2
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PUSH
29653: LD_INT 21
29655: PUSH
29656: LD_INT 1
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PUSH
29663: LD_INT 3
29665: PUSH
29666: LD_INT 23
29668: PUSH
29669: LD_INT 0
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: LIST
29684: PPUSH
29685: CALL_OW 69
29689: ST_TO_ADDR
// if not tmp then
29690: LD_VAR 0 6
29694: NOT
29695: IFFALSE 29699
// exit ;
29697: GO 29845
// s1 := rand ( 1 , 4 ) ;
29699: LD_ADDR_VAR 0 2
29703: PUSH
29704: LD_INT 1
29706: PPUSH
29707: LD_INT 4
29709: PPUSH
29710: CALL_OW 12
29714: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29715: LD_ADDR_VAR 0 4
29719: PUSH
29720: LD_VAR 0 6
29724: PUSH
29725: LD_INT 1
29727: ARRAY
29728: PPUSH
29729: LD_VAR 0 2
29733: PPUSH
29734: CALL_OW 259
29738: ST_TO_ADDR
// if s1 = 1 then
29739: LD_VAR 0 2
29743: PUSH
29744: LD_INT 1
29746: EQUAL
29747: IFFALSE 29767
// s2 := rand ( 2 , 4 ) else
29749: LD_ADDR_VAR 0 3
29753: PUSH
29754: LD_INT 2
29756: PPUSH
29757: LD_INT 4
29759: PPUSH
29760: CALL_OW 12
29764: ST_TO_ADDR
29765: GO 29775
// s2 := 1 ;
29767: LD_ADDR_VAR 0 3
29771: PUSH
29772: LD_INT 1
29774: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29775: LD_ADDR_VAR 0 5
29779: PUSH
29780: LD_VAR 0 6
29784: PUSH
29785: LD_INT 1
29787: ARRAY
29788: PPUSH
29789: LD_VAR 0 3
29793: PPUSH
29794: CALL_OW 259
29798: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29799: LD_VAR 0 6
29803: PUSH
29804: LD_INT 1
29806: ARRAY
29807: PPUSH
29808: LD_VAR 0 2
29812: PPUSH
29813: LD_VAR 0 5
29817: PPUSH
29818: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29822: LD_VAR 0 6
29826: PUSH
29827: LD_INT 1
29829: ARRAY
29830: PPUSH
29831: LD_VAR 0 3
29835: PPUSH
29836: LD_VAR 0 4
29840: PPUSH
29841: CALL_OW 237
// end ;
29845: PPOPN 6
29847: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29848: LD_EXP 64
29852: PUSH
29853: LD_EXP 111
29857: AND
29858: IFFALSE 29937
29860: GO 29862
29862: DISABLE
29863: LD_INT 0
29865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29866: LD_ADDR_VAR 0 1
29870: PUSH
29871: LD_INT 22
29873: PUSH
29874: LD_OWVAR 2
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: LD_INT 30
29885: PUSH
29886: LD_INT 3
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PPUSH
29897: CALL_OW 69
29901: ST_TO_ADDR
// if not tmp then
29902: LD_VAR 0 1
29906: NOT
29907: IFFALSE 29911
// exit ;
29909: GO 29937
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29911: LD_VAR 0 1
29915: PUSH
29916: LD_INT 1
29918: PPUSH
29919: LD_VAR 0 1
29923: PPUSH
29924: CALL_OW 12
29928: ARRAY
29929: PPUSH
29930: LD_INT 1
29932: PPUSH
29933: CALL_OW 234
// end ;
29937: PPOPN 1
29939: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29940: LD_EXP 64
29944: PUSH
29945: LD_EXP 112
29949: AND
29950: IFFALSE 30062
29952: GO 29954
29954: DISABLE
29955: LD_INT 0
29957: PPUSH
29958: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29959: LD_ADDR_VAR 0 2
29963: PUSH
29964: LD_INT 22
29966: PUSH
29967: LD_OWVAR 2
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 2
29978: PUSH
29979: LD_INT 30
29981: PUSH
29982: LD_INT 27
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: LD_INT 30
29991: PUSH
29992: LD_INT 26
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: LD_INT 30
30001: PUSH
30002: LD_INT 28
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PPUSH
30019: CALL_OW 69
30023: ST_TO_ADDR
// if not tmp then
30024: LD_VAR 0 2
30028: NOT
30029: IFFALSE 30033
// exit ;
30031: GO 30062
// for i in tmp do
30033: LD_ADDR_VAR 0 1
30037: PUSH
30038: LD_VAR 0 2
30042: PUSH
30043: FOR_IN
30044: IFFALSE 30060
// SetLives ( i , 1 ) ;
30046: LD_VAR 0 1
30050: PPUSH
30051: LD_INT 1
30053: PPUSH
30054: CALL_OW 234
30058: GO 30043
30060: POP
30061: POP
// end ;
30062: PPOPN 2
30064: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30065: LD_EXP 64
30069: PUSH
30070: LD_EXP 113
30074: AND
30075: IFFALSE 30362
30077: GO 30079
30079: DISABLE
30080: LD_INT 0
30082: PPUSH
30083: PPUSH
30084: PPUSH
// begin i := rand ( 1 , 7 ) ;
30085: LD_ADDR_VAR 0 1
30089: PUSH
30090: LD_INT 1
30092: PPUSH
30093: LD_INT 7
30095: PPUSH
30096: CALL_OW 12
30100: ST_TO_ADDR
// case i of 1 :
30101: LD_VAR 0 1
30105: PUSH
30106: LD_INT 1
30108: DOUBLE
30109: EQUAL
30110: IFTRUE 30114
30112: GO 30124
30114: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30115: LD_STRING earthquake(getX(game), 0, 32)
30117: PPUSH
30118: CALL_OW 559
30122: GO 30362
30124: LD_INT 2
30126: DOUBLE
30127: EQUAL
30128: IFTRUE 30132
30130: GO 30146
30132: POP
// begin ToLua ( displayStucuk(); ) ;
30133: LD_STRING displayStucuk();
30135: PPUSH
30136: CALL_OW 559
// ResetFog ;
30140: CALL_OW 335
// end ; 3 :
30144: GO 30362
30146: LD_INT 3
30148: DOUBLE
30149: EQUAL
30150: IFTRUE 30154
30152: GO 30258
30154: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30155: LD_ADDR_VAR 0 2
30159: PUSH
30160: LD_INT 22
30162: PUSH
30163: LD_OWVAR 2
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: LD_INT 25
30174: PUSH
30175: LD_INT 1
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PPUSH
30186: CALL_OW 69
30190: ST_TO_ADDR
// if not tmp then
30191: LD_VAR 0 2
30195: NOT
30196: IFFALSE 30200
// exit ;
30198: GO 30362
// un := tmp [ rand ( 1 , tmp ) ] ;
30200: LD_ADDR_VAR 0 3
30204: PUSH
30205: LD_VAR 0 2
30209: PUSH
30210: LD_INT 1
30212: PPUSH
30213: LD_VAR 0 2
30217: PPUSH
30218: CALL_OW 12
30222: ARRAY
30223: ST_TO_ADDR
// if Crawls ( un ) then
30224: LD_VAR 0 3
30228: PPUSH
30229: CALL_OW 318
30233: IFFALSE 30244
// ComWalk ( un ) ;
30235: LD_VAR 0 3
30239: PPUSH
30240: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30244: LD_VAR 0 3
30248: PPUSH
30249: LD_INT 8
30251: PPUSH
30252: CALL_OW 336
// end ; 4 :
30256: GO 30362
30258: LD_INT 4
30260: DOUBLE
30261: EQUAL
30262: IFTRUE 30266
30264: GO 30340
30266: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30267: LD_ADDR_VAR 0 2
30271: PUSH
30272: LD_INT 22
30274: PUSH
30275: LD_OWVAR 2
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: LD_INT 30
30286: PUSH
30287: LD_INT 29
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PPUSH
30298: CALL_OW 69
30302: ST_TO_ADDR
// if not tmp then
30303: LD_VAR 0 2
30307: NOT
30308: IFFALSE 30312
// exit ;
30310: GO 30362
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30312: LD_VAR 0 2
30316: PUSH
30317: LD_INT 1
30319: ARRAY
30320: PPUSH
30321: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30325: LD_VAR 0 2
30329: PUSH
30330: LD_INT 1
30332: ARRAY
30333: PPUSH
30334: CALL_OW 65
// end ; 5 .. 7 :
30338: GO 30362
30340: LD_INT 5
30342: DOUBLE
30343: GREATEREQUAL
30344: IFFALSE 30352
30346: LD_INT 7
30348: DOUBLE
30349: LESSEQUAL
30350: IFTRUE 30354
30352: GO 30361
30354: POP
// StreamSibBomb ; end ;
30355: CALL 26599 0 0
30359: GO 30362
30361: POP
// end ;
30362: PPOPN 3
30364: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30365: LD_EXP 64
30369: PUSH
30370: LD_EXP 114
30374: AND
30375: IFFALSE 30531
30377: GO 30379
30379: DISABLE
30380: LD_INT 0
30382: PPUSH
30383: PPUSH
30384: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30385: LD_ADDR_VAR 0 2
30389: PUSH
30390: LD_INT 81
30392: PUSH
30393: LD_OWVAR 2
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 2
30404: PUSH
30405: LD_INT 21
30407: PUSH
30408: LD_INT 1
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 21
30417: PUSH
30418: LD_INT 2
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: LIST
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: PPUSH
30434: CALL_OW 69
30438: ST_TO_ADDR
// if not tmp then
30439: LD_VAR 0 2
30443: NOT
30444: IFFALSE 30448
// exit ;
30446: GO 30531
// p := 0 ;
30448: LD_ADDR_VAR 0 3
30452: PUSH
30453: LD_INT 0
30455: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30456: LD_INT 35
30458: PPUSH
30459: CALL_OW 67
// p := p + 1 ;
30463: LD_ADDR_VAR 0 3
30467: PUSH
30468: LD_VAR 0 3
30472: PUSH
30473: LD_INT 1
30475: PLUS
30476: ST_TO_ADDR
// for i in tmp do
30477: LD_ADDR_VAR 0 1
30481: PUSH
30482: LD_VAR 0 2
30486: PUSH
30487: FOR_IN
30488: IFFALSE 30519
// if GetLives ( i ) < 1000 then
30490: LD_VAR 0 1
30494: PPUSH
30495: CALL_OW 256
30499: PUSH
30500: LD_INT 1000
30502: LESS
30503: IFFALSE 30517
// SetLives ( i , 1000 ) ;
30505: LD_VAR 0 1
30509: PPUSH
30510: LD_INT 1000
30512: PPUSH
30513: CALL_OW 234
30517: GO 30487
30519: POP
30520: POP
// until p > 20 ;
30521: LD_VAR 0 3
30525: PUSH
30526: LD_INT 20
30528: GREATER
30529: IFFALSE 30456
// end ;
30531: PPOPN 3
30533: END
// every 0 0$1 trigger StreamModeActive and sTime do
30534: LD_EXP 64
30538: PUSH
30539: LD_EXP 115
30543: AND
30544: IFFALSE 30579
30546: GO 30548
30548: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30549: LD_INT 28
30551: PPUSH
30552: LD_OWVAR 2
30556: PPUSH
30557: LD_INT 2
30559: PPUSH
30560: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30564: LD_INT 30
30566: PPUSH
30567: LD_OWVAR 2
30571: PPUSH
30572: LD_INT 2
30574: PPUSH
30575: CALL_OW 322
// end ;
30579: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30580: LD_EXP 64
30584: PUSH
30585: LD_EXP 116
30589: AND
30590: IFFALSE 30711
30592: GO 30594
30594: DISABLE
30595: LD_INT 0
30597: PPUSH
30598: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30599: LD_ADDR_VAR 0 2
30603: PUSH
30604: LD_INT 22
30606: PUSH
30607: LD_OWVAR 2
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PUSH
30616: LD_INT 21
30618: PUSH
30619: LD_INT 1
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 3
30628: PUSH
30629: LD_INT 23
30631: PUSH
30632: LD_INT 0
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: LIST
30647: PPUSH
30648: CALL_OW 69
30652: ST_TO_ADDR
// if not tmp then
30653: LD_VAR 0 2
30657: NOT
30658: IFFALSE 30662
// exit ;
30660: GO 30711
// for i in tmp do
30662: LD_ADDR_VAR 0 1
30666: PUSH
30667: LD_VAR 0 2
30671: PUSH
30672: FOR_IN
30673: IFFALSE 30709
// begin if Crawls ( i ) then
30675: LD_VAR 0 1
30679: PPUSH
30680: CALL_OW 318
30684: IFFALSE 30695
// ComWalk ( i ) ;
30686: LD_VAR 0 1
30690: PPUSH
30691: CALL_OW 138
// SetClass ( i , 2 ) ;
30695: LD_VAR 0 1
30699: PPUSH
30700: LD_INT 2
30702: PPUSH
30703: CALL_OW 336
// end ;
30707: GO 30672
30709: POP
30710: POP
// end ;
30711: PPOPN 2
30713: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30714: LD_EXP 64
30718: PUSH
30719: LD_EXP 117
30723: AND
30724: IFFALSE 31012
30726: GO 30728
30728: DISABLE
30729: LD_INT 0
30731: PPUSH
30732: PPUSH
30733: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30734: LD_OWVAR 2
30738: PPUSH
30739: LD_INT 9
30741: PPUSH
30742: LD_INT 1
30744: PPUSH
30745: LD_INT 1
30747: PPUSH
30748: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30752: LD_INT 9
30754: PPUSH
30755: LD_OWVAR 2
30759: PPUSH
30760: CALL_OW 343
// uc_side := 9 ;
30764: LD_ADDR_OWVAR 20
30768: PUSH
30769: LD_INT 9
30771: ST_TO_ADDR
// uc_nation := 2 ;
30772: LD_ADDR_OWVAR 21
30776: PUSH
30777: LD_INT 2
30779: ST_TO_ADDR
// hc_name := Dark Warrior ;
30780: LD_ADDR_OWVAR 26
30784: PUSH
30785: LD_STRING Dark Warrior
30787: ST_TO_ADDR
// hc_gallery :=  ;
30788: LD_ADDR_OWVAR 33
30792: PUSH
30793: LD_STRING 
30795: ST_TO_ADDR
// hc_noskilllimit := true ;
30796: LD_ADDR_OWVAR 76
30800: PUSH
30801: LD_INT 1
30803: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30804: LD_ADDR_OWVAR 31
30808: PUSH
30809: LD_INT 30
30811: PUSH
30812: LD_INT 30
30814: PUSH
30815: LD_INT 30
30817: PUSH
30818: LD_INT 30
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: ST_TO_ADDR
// un := CreateHuman ;
30827: LD_ADDR_VAR 0 3
30831: PUSH
30832: CALL_OW 44
30836: ST_TO_ADDR
// hc_noskilllimit := false ;
30837: LD_ADDR_OWVAR 76
30841: PUSH
30842: LD_INT 0
30844: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30845: LD_VAR 0 3
30849: PPUSH
30850: LD_INT 1
30852: PPUSH
30853: CALL_OW 51
// ToLua ( playRanger() ) ;
30857: LD_STRING playRanger()
30859: PPUSH
30860: CALL_OW 559
// p := 0 ;
30864: LD_ADDR_VAR 0 2
30868: PUSH
30869: LD_INT 0
30871: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30872: LD_INT 35
30874: PPUSH
30875: CALL_OW 67
// p := p + 1 ;
30879: LD_ADDR_VAR 0 2
30883: PUSH
30884: LD_VAR 0 2
30888: PUSH
30889: LD_INT 1
30891: PLUS
30892: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30893: LD_VAR 0 3
30897: PPUSH
30898: CALL_OW 256
30902: PUSH
30903: LD_INT 1000
30905: LESS
30906: IFFALSE 30920
// SetLives ( un , 1000 ) ;
30908: LD_VAR 0 3
30912: PPUSH
30913: LD_INT 1000
30915: PPUSH
30916: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30920: LD_VAR 0 3
30924: PPUSH
30925: LD_INT 81
30927: PUSH
30928: LD_OWVAR 2
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 91
30939: PUSH
30940: LD_VAR 0 3
30944: PUSH
30945: LD_INT 30
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: LIST
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PPUSH
30957: CALL_OW 69
30961: PPUSH
30962: LD_VAR 0 3
30966: PPUSH
30967: CALL_OW 74
30971: PPUSH
30972: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30976: LD_VAR 0 2
30980: PUSH
30981: LD_INT 80
30983: GREATER
30984: PUSH
30985: LD_VAR 0 3
30989: PPUSH
30990: CALL_OW 301
30994: OR
30995: IFFALSE 30872
// if un then
30997: LD_VAR 0 3
31001: IFFALSE 31012
// RemoveUnit ( un ) ;
31003: LD_VAR 0 3
31007: PPUSH
31008: CALL_OW 64
// end ;
31012: PPOPN 3
31014: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31015: LD_EXP 118
31019: IFFALSE 31135
31021: GO 31023
31023: DISABLE
31024: LD_INT 0
31026: PPUSH
31027: PPUSH
31028: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31029: LD_ADDR_VAR 0 2
31033: PUSH
31034: LD_INT 81
31036: PUSH
31037: LD_OWVAR 2
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: LD_INT 21
31048: PUSH
31049: LD_INT 1
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PPUSH
31060: CALL_OW 69
31064: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31065: LD_STRING playComputer()
31067: PPUSH
31068: CALL_OW 559
// if not tmp then
31072: LD_VAR 0 2
31076: NOT
31077: IFFALSE 31081
// exit ;
31079: GO 31135
// for i in tmp do
31081: LD_ADDR_VAR 0 1
31085: PUSH
31086: LD_VAR 0 2
31090: PUSH
31091: FOR_IN
31092: IFFALSE 31133
// for j := 1 to 4 do
31094: LD_ADDR_VAR 0 3
31098: PUSH
31099: DOUBLE
31100: LD_INT 1
31102: DEC
31103: ST_TO_ADDR
31104: LD_INT 4
31106: PUSH
31107: FOR_TO
31108: IFFALSE 31129
// SetSkill ( i , j , 10 ) ;
31110: LD_VAR 0 1
31114: PPUSH
31115: LD_VAR 0 3
31119: PPUSH
31120: LD_INT 10
31122: PPUSH
31123: CALL_OW 237
31127: GO 31107
31129: POP
31130: POP
31131: GO 31091
31133: POP
31134: POP
// end ;
31135: PPOPN 3
31137: END
// every 0 0$1 trigger s30 do var i , tmp ;
31138: LD_EXP 119
31142: IFFALSE 31211
31144: GO 31146
31146: DISABLE
31147: LD_INT 0
31149: PPUSH
31150: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31151: LD_ADDR_VAR 0 2
31155: PUSH
31156: LD_INT 22
31158: PUSH
31159: LD_OWVAR 2
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PPUSH
31168: CALL_OW 69
31172: ST_TO_ADDR
// if not tmp then
31173: LD_VAR 0 2
31177: NOT
31178: IFFALSE 31182
// exit ;
31180: GO 31211
// for i in tmp do
31182: LD_ADDR_VAR 0 1
31186: PUSH
31187: LD_VAR 0 2
31191: PUSH
31192: FOR_IN
31193: IFFALSE 31209
// SetLives ( i , 300 ) ;
31195: LD_VAR 0 1
31199: PPUSH
31200: LD_INT 300
31202: PPUSH
31203: CALL_OW 234
31207: GO 31192
31209: POP
31210: POP
// end ;
31211: PPOPN 2
31213: END
// every 0 0$1 trigger s60 do var i , tmp ;
31214: LD_EXP 120
31218: IFFALSE 31287
31220: GO 31222
31222: DISABLE
31223: LD_INT 0
31225: PPUSH
31226: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31227: LD_ADDR_VAR 0 2
31231: PUSH
31232: LD_INT 22
31234: PUSH
31235: LD_OWVAR 2
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PPUSH
31244: CALL_OW 69
31248: ST_TO_ADDR
// if not tmp then
31249: LD_VAR 0 2
31253: NOT
31254: IFFALSE 31258
// exit ;
31256: GO 31287
// for i in tmp do
31258: LD_ADDR_VAR 0 1
31262: PUSH
31263: LD_VAR 0 2
31267: PUSH
31268: FOR_IN
31269: IFFALSE 31285
// SetLives ( i , 600 ) ;
31271: LD_VAR 0 1
31275: PPUSH
31276: LD_INT 600
31278: PPUSH
31279: CALL_OW 234
31283: GO 31268
31285: POP
31286: POP
// end ;
31287: PPOPN 2
31289: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31290: LD_INT 0
31292: PPUSH
// case cmd of 301 :
31293: LD_VAR 0 1
31297: PUSH
31298: LD_INT 301
31300: DOUBLE
31301: EQUAL
31302: IFTRUE 31306
31304: GO 31338
31306: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31307: LD_VAR 0 6
31311: PPUSH
31312: LD_VAR 0 7
31316: PPUSH
31317: LD_VAR 0 8
31321: PPUSH
31322: LD_VAR 0 4
31326: PPUSH
31327: LD_VAR 0 5
31331: PPUSH
31332: CALL 32539 0 5
31336: GO 31459
31338: LD_INT 302
31340: DOUBLE
31341: EQUAL
31342: IFTRUE 31346
31344: GO 31383
31346: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31347: LD_VAR 0 6
31351: PPUSH
31352: LD_VAR 0 7
31356: PPUSH
31357: LD_VAR 0 8
31361: PPUSH
31362: LD_VAR 0 9
31366: PPUSH
31367: LD_VAR 0 4
31371: PPUSH
31372: LD_VAR 0 5
31376: PPUSH
31377: CALL 32630 0 6
31381: GO 31459
31383: LD_INT 303
31385: DOUBLE
31386: EQUAL
31387: IFTRUE 31391
31389: GO 31428
31391: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31392: LD_VAR 0 6
31396: PPUSH
31397: LD_VAR 0 7
31401: PPUSH
31402: LD_VAR 0 8
31406: PPUSH
31407: LD_VAR 0 9
31411: PPUSH
31412: LD_VAR 0 4
31416: PPUSH
31417: LD_VAR 0 5
31421: PPUSH
31422: CALL 31464 0 6
31426: GO 31459
31428: LD_INT 304
31430: DOUBLE
31431: EQUAL
31432: IFTRUE 31436
31434: GO 31458
31436: POP
// hHackTeleport ( unit , x , y ) ; end ;
31437: LD_VAR 0 2
31441: PPUSH
31442: LD_VAR 0 4
31446: PPUSH
31447: LD_VAR 0 5
31451: PPUSH
31452: CALL 33223 0 3
31456: GO 31459
31458: POP
// end ;
31459: LD_VAR 0 12
31463: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31464: LD_INT 0
31466: PPUSH
31467: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31468: LD_VAR 0 1
31472: PUSH
31473: LD_INT 1
31475: LESS
31476: PUSH
31477: LD_VAR 0 1
31481: PUSH
31482: LD_INT 3
31484: GREATER
31485: OR
31486: PUSH
31487: LD_VAR 0 5
31491: PPUSH
31492: LD_VAR 0 6
31496: PPUSH
31497: CALL_OW 428
31501: OR
31502: IFFALSE 31506
// exit ;
31504: GO 32226
// uc_side := your_side ;
31506: LD_ADDR_OWVAR 20
31510: PUSH
31511: LD_OWVAR 2
31515: ST_TO_ADDR
// uc_nation := nation ;
31516: LD_ADDR_OWVAR 21
31520: PUSH
31521: LD_VAR 0 1
31525: ST_TO_ADDR
// bc_level = 1 ;
31526: LD_ADDR_OWVAR 43
31530: PUSH
31531: LD_INT 1
31533: ST_TO_ADDR
// case btype of 1 :
31534: LD_VAR 0 2
31538: PUSH
31539: LD_INT 1
31541: DOUBLE
31542: EQUAL
31543: IFTRUE 31547
31545: GO 31558
31547: POP
// bc_type := b_depot ; 2 :
31548: LD_ADDR_OWVAR 42
31552: PUSH
31553: LD_INT 0
31555: ST_TO_ADDR
31556: GO 32170
31558: LD_INT 2
31560: DOUBLE
31561: EQUAL
31562: IFTRUE 31566
31564: GO 31577
31566: POP
// bc_type := b_warehouse ; 3 :
31567: LD_ADDR_OWVAR 42
31571: PUSH
31572: LD_INT 1
31574: ST_TO_ADDR
31575: GO 32170
31577: LD_INT 3
31579: DOUBLE
31580: EQUAL
31581: IFTRUE 31585
31583: GO 31596
31585: POP
// bc_type := b_lab ; 4 .. 9 :
31586: LD_ADDR_OWVAR 42
31590: PUSH
31591: LD_INT 6
31593: ST_TO_ADDR
31594: GO 32170
31596: LD_INT 4
31598: DOUBLE
31599: GREATEREQUAL
31600: IFFALSE 31608
31602: LD_INT 9
31604: DOUBLE
31605: LESSEQUAL
31606: IFTRUE 31610
31608: GO 31662
31610: POP
// begin bc_type := b_lab_half ;
31611: LD_ADDR_OWVAR 42
31615: PUSH
31616: LD_INT 7
31618: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31619: LD_ADDR_OWVAR 44
31623: PUSH
31624: LD_INT 10
31626: PUSH
31627: LD_INT 11
31629: PUSH
31630: LD_INT 12
31632: PUSH
31633: LD_INT 15
31635: PUSH
31636: LD_INT 14
31638: PUSH
31639: LD_INT 13
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: PUSH
31650: LD_VAR 0 2
31654: PUSH
31655: LD_INT 3
31657: MINUS
31658: ARRAY
31659: ST_TO_ADDR
// end ; 10 .. 13 :
31660: GO 32170
31662: LD_INT 10
31664: DOUBLE
31665: GREATEREQUAL
31666: IFFALSE 31674
31668: LD_INT 13
31670: DOUBLE
31671: LESSEQUAL
31672: IFTRUE 31676
31674: GO 31753
31676: POP
// begin bc_type := b_lab_full ;
31677: LD_ADDR_OWVAR 42
31681: PUSH
31682: LD_INT 8
31684: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31685: LD_ADDR_OWVAR 44
31689: PUSH
31690: LD_INT 10
31692: PUSH
31693: LD_INT 12
31695: PUSH
31696: LD_INT 14
31698: PUSH
31699: LD_INT 13
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: PUSH
31708: LD_VAR 0 2
31712: PUSH
31713: LD_INT 9
31715: MINUS
31716: ARRAY
31717: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31718: LD_ADDR_OWVAR 45
31722: PUSH
31723: LD_INT 11
31725: PUSH
31726: LD_INT 15
31728: PUSH
31729: LD_INT 12
31731: PUSH
31732: LD_INT 15
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: PUSH
31741: LD_VAR 0 2
31745: PUSH
31746: LD_INT 9
31748: MINUS
31749: ARRAY
31750: ST_TO_ADDR
// end ; 14 :
31751: GO 32170
31753: LD_INT 14
31755: DOUBLE
31756: EQUAL
31757: IFTRUE 31761
31759: GO 31772
31761: POP
// bc_type := b_workshop ; 15 :
31762: LD_ADDR_OWVAR 42
31766: PUSH
31767: LD_INT 2
31769: ST_TO_ADDR
31770: GO 32170
31772: LD_INT 15
31774: DOUBLE
31775: EQUAL
31776: IFTRUE 31780
31778: GO 31791
31780: POP
// bc_type := b_factory ; 16 :
31781: LD_ADDR_OWVAR 42
31785: PUSH
31786: LD_INT 3
31788: ST_TO_ADDR
31789: GO 32170
31791: LD_INT 16
31793: DOUBLE
31794: EQUAL
31795: IFTRUE 31799
31797: GO 31810
31799: POP
// bc_type := b_ext_gun ; 17 :
31800: LD_ADDR_OWVAR 42
31804: PUSH
31805: LD_INT 17
31807: ST_TO_ADDR
31808: GO 32170
31810: LD_INT 17
31812: DOUBLE
31813: EQUAL
31814: IFTRUE 31818
31816: GO 31846
31818: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31819: LD_ADDR_OWVAR 42
31823: PUSH
31824: LD_INT 19
31826: PUSH
31827: LD_INT 23
31829: PUSH
31830: LD_INT 19
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: LIST
31837: PUSH
31838: LD_VAR 0 1
31842: ARRAY
31843: ST_TO_ADDR
31844: GO 32170
31846: LD_INT 18
31848: DOUBLE
31849: EQUAL
31850: IFTRUE 31854
31852: GO 31865
31854: POP
// bc_type := b_ext_radar ; 19 :
31855: LD_ADDR_OWVAR 42
31859: PUSH
31860: LD_INT 20
31862: ST_TO_ADDR
31863: GO 32170
31865: LD_INT 19
31867: DOUBLE
31868: EQUAL
31869: IFTRUE 31873
31871: GO 31884
31873: POP
// bc_type := b_ext_radio ; 20 :
31874: LD_ADDR_OWVAR 42
31878: PUSH
31879: LD_INT 22
31881: ST_TO_ADDR
31882: GO 32170
31884: LD_INT 20
31886: DOUBLE
31887: EQUAL
31888: IFTRUE 31892
31890: GO 31903
31892: POP
// bc_type := b_ext_siberium ; 21 :
31893: LD_ADDR_OWVAR 42
31897: PUSH
31898: LD_INT 21
31900: ST_TO_ADDR
31901: GO 32170
31903: LD_INT 21
31905: DOUBLE
31906: EQUAL
31907: IFTRUE 31911
31909: GO 31922
31911: POP
// bc_type := b_ext_computer ; 22 :
31912: LD_ADDR_OWVAR 42
31916: PUSH
31917: LD_INT 24
31919: ST_TO_ADDR
31920: GO 32170
31922: LD_INT 22
31924: DOUBLE
31925: EQUAL
31926: IFTRUE 31930
31928: GO 31941
31930: POP
// bc_type := b_ext_track ; 23 :
31931: LD_ADDR_OWVAR 42
31935: PUSH
31936: LD_INT 16
31938: ST_TO_ADDR
31939: GO 32170
31941: LD_INT 23
31943: DOUBLE
31944: EQUAL
31945: IFTRUE 31949
31947: GO 31960
31949: POP
// bc_type := b_ext_laser ; 24 :
31950: LD_ADDR_OWVAR 42
31954: PUSH
31955: LD_INT 25
31957: ST_TO_ADDR
31958: GO 32170
31960: LD_INT 24
31962: DOUBLE
31963: EQUAL
31964: IFTRUE 31968
31966: GO 31979
31968: POP
// bc_type := b_control_tower ; 25 :
31969: LD_ADDR_OWVAR 42
31973: PUSH
31974: LD_INT 36
31976: ST_TO_ADDR
31977: GO 32170
31979: LD_INT 25
31981: DOUBLE
31982: EQUAL
31983: IFTRUE 31987
31985: GO 31998
31987: POP
// bc_type := b_breastwork ; 26 :
31988: LD_ADDR_OWVAR 42
31992: PUSH
31993: LD_INT 31
31995: ST_TO_ADDR
31996: GO 32170
31998: LD_INT 26
32000: DOUBLE
32001: EQUAL
32002: IFTRUE 32006
32004: GO 32017
32006: POP
// bc_type := b_bunker ; 27 :
32007: LD_ADDR_OWVAR 42
32011: PUSH
32012: LD_INT 32
32014: ST_TO_ADDR
32015: GO 32170
32017: LD_INT 27
32019: DOUBLE
32020: EQUAL
32021: IFTRUE 32025
32023: GO 32036
32025: POP
// bc_type := b_turret ; 28 :
32026: LD_ADDR_OWVAR 42
32030: PUSH
32031: LD_INT 33
32033: ST_TO_ADDR
32034: GO 32170
32036: LD_INT 28
32038: DOUBLE
32039: EQUAL
32040: IFTRUE 32044
32042: GO 32055
32044: POP
// bc_type := b_armoury ; 29 :
32045: LD_ADDR_OWVAR 42
32049: PUSH
32050: LD_INT 4
32052: ST_TO_ADDR
32053: GO 32170
32055: LD_INT 29
32057: DOUBLE
32058: EQUAL
32059: IFTRUE 32063
32061: GO 32074
32063: POP
// bc_type := b_barracks ; 30 :
32064: LD_ADDR_OWVAR 42
32068: PUSH
32069: LD_INT 5
32071: ST_TO_ADDR
32072: GO 32170
32074: LD_INT 30
32076: DOUBLE
32077: EQUAL
32078: IFTRUE 32082
32080: GO 32093
32082: POP
// bc_type := b_solar_power ; 31 :
32083: LD_ADDR_OWVAR 42
32087: PUSH
32088: LD_INT 27
32090: ST_TO_ADDR
32091: GO 32170
32093: LD_INT 31
32095: DOUBLE
32096: EQUAL
32097: IFTRUE 32101
32099: GO 32112
32101: POP
// bc_type := b_oil_power ; 32 :
32102: LD_ADDR_OWVAR 42
32106: PUSH
32107: LD_INT 26
32109: ST_TO_ADDR
32110: GO 32170
32112: LD_INT 32
32114: DOUBLE
32115: EQUAL
32116: IFTRUE 32120
32118: GO 32131
32120: POP
// bc_type := b_siberite_power ; 33 :
32121: LD_ADDR_OWVAR 42
32125: PUSH
32126: LD_INT 28
32128: ST_TO_ADDR
32129: GO 32170
32131: LD_INT 33
32133: DOUBLE
32134: EQUAL
32135: IFTRUE 32139
32137: GO 32150
32139: POP
// bc_type := b_oil_mine ; 34 :
32140: LD_ADDR_OWVAR 42
32144: PUSH
32145: LD_INT 29
32147: ST_TO_ADDR
32148: GO 32170
32150: LD_INT 34
32152: DOUBLE
32153: EQUAL
32154: IFTRUE 32158
32156: GO 32169
32158: POP
// bc_type := b_siberite_mine ; end ;
32159: LD_ADDR_OWVAR 42
32163: PUSH
32164: LD_INT 30
32166: ST_TO_ADDR
32167: GO 32170
32169: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32170: LD_ADDR_VAR 0 8
32174: PUSH
32175: LD_VAR 0 5
32179: PPUSH
32180: LD_VAR 0 6
32184: PPUSH
32185: LD_VAR 0 3
32189: PPUSH
32190: CALL_OW 47
32194: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32195: LD_OWVAR 42
32199: PUSH
32200: LD_INT 32
32202: PUSH
32203: LD_INT 33
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: IN
32210: IFFALSE 32226
// PlaceWeaponTurret ( b , weapon ) ;
32212: LD_VAR 0 8
32216: PPUSH
32217: LD_VAR 0 4
32221: PPUSH
32222: CALL_OW 431
// end ;
32226: LD_VAR 0 7
32230: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32231: LD_INT 0
32233: PPUSH
32234: PPUSH
32235: PPUSH
32236: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32237: LD_ADDR_VAR 0 4
32241: PUSH
32242: LD_INT 22
32244: PUSH
32245: LD_OWVAR 2
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: LD_INT 2
32256: PUSH
32257: LD_INT 30
32259: PUSH
32260: LD_INT 0
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 30
32269: PUSH
32270: LD_INT 1
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: LIST
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PPUSH
32286: CALL_OW 69
32290: ST_TO_ADDR
// if not tmp then
32291: LD_VAR 0 4
32295: NOT
32296: IFFALSE 32300
// exit ;
32298: GO 32359
// for i in tmp do
32300: LD_ADDR_VAR 0 2
32304: PUSH
32305: LD_VAR 0 4
32309: PUSH
32310: FOR_IN
32311: IFFALSE 32357
// for j = 1 to 3 do
32313: LD_ADDR_VAR 0 3
32317: PUSH
32318: DOUBLE
32319: LD_INT 1
32321: DEC
32322: ST_TO_ADDR
32323: LD_INT 3
32325: PUSH
32326: FOR_TO
32327: IFFALSE 32353
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32329: LD_VAR 0 2
32333: PPUSH
32334: CALL_OW 274
32338: PPUSH
32339: LD_VAR 0 3
32343: PPUSH
32344: LD_INT 99999
32346: PPUSH
32347: CALL_OW 277
32351: GO 32326
32353: POP
32354: POP
32355: GO 32310
32357: POP
32358: POP
// end ;
32359: LD_VAR 0 1
32363: RET
// export function hHackSetLevel10 ; var i , j ; begin
32364: LD_INT 0
32366: PPUSH
32367: PPUSH
32368: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32369: LD_ADDR_VAR 0 2
32373: PUSH
32374: LD_INT 21
32376: PUSH
32377: LD_INT 1
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PPUSH
32384: CALL_OW 69
32388: PUSH
32389: FOR_IN
32390: IFFALSE 32442
// if IsSelected ( i ) then
32392: LD_VAR 0 2
32396: PPUSH
32397: CALL_OW 306
32401: IFFALSE 32440
// begin for j := 1 to 4 do
32403: LD_ADDR_VAR 0 3
32407: PUSH
32408: DOUBLE
32409: LD_INT 1
32411: DEC
32412: ST_TO_ADDR
32413: LD_INT 4
32415: PUSH
32416: FOR_TO
32417: IFFALSE 32438
// SetSkill ( i , j , 10 ) ;
32419: LD_VAR 0 2
32423: PPUSH
32424: LD_VAR 0 3
32428: PPUSH
32429: LD_INT 10
32431: PPUSH
32432: CALL_OW 237
32436: GO 32416
32438: POP
32439: POP
// end ;
32440: GO 32389
32442: POP
32443: POP
// end ;
32444: LD_VAR 0 1
32448: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32449: LD_INT 0
32451: PPUSH
32452: PPUSH
32453: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32454: LD_ADDR_VAR 0 2
32458: PUSH
32459: LD_INT 22
32461: PUSH
32462: LD_OWVAR 2
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 21
32473: PUSH
32474: LD_INT 1
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PPUSH
32485: CALL_OW 69
32489: PUSH
32490: FOR_IN
32491: IFFALSE 32532
// begin for j := 1 to 4 do
32493: LD_ADDR_VAR 0 3
32497: PUSH
32498: DOUBLE
32499: LD_INT 1
32501: DEC
32502: ST_TO_ADDR
32503: LD_INT 4
32505: PUSH
32506: FOR_TO
32507: IFFALSE 32528
// SetSkill ( i , j , 10 ) ;
32509: LD_VAR 0 2
32513: PPUSH
32514: LD_VAR 0 3
32518: PPUSH
32519: LD_INT 10
32521: PPUSH
32522: CALL_OW 237
32526: GO 32506
32528: POP
32529: POP
// end ;
32530: GO 32490
32532: POP
32533: POP
// end ;
32534: LD_VAR 0 1
32538: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32539: LD_INT 0
32541: PPUSH
// uc_side := your_side ;
32542: LD_ADDR_OWVAR 20
32546: PUSH
32547: LD_OWVAR 2
32551: ST_TO_ADDR
// uc_nation := nation ;
32552: LD_ADDR_OWVAR 21
32556: PUSH
32557: LD_VAR 0 1
32561: ST_TO_ADDR
// InitHc ;
32562: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32566: LD_INT 0
32568: PPUSH
32569: LD_VAR 0 2
32573: PPUSH
32574: LD_VAR 0 3
32578: PPUSH
32579: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32583: LD_VAR 0 4
32587: PPUSH
32588: LD_VAR 0 5
32592: PPUSH
32593: CALL_OW 428
32597: PUSH
32598: LD_INT 0
32600: EQUAL
32601: IFFALSE 32625
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32603: CALL_OW 44
32607: PPUSH
32608: LD_VAR 0 4
32612: PPUSH
32613: LD_VAR 0 5
32617: PPUSH
32618: LD_INT 1
32620: PPUSH
32621: CALL_OW 48
// end ;
32625: LD_VAR 0 6
32629: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32630: LD_INT 0
32632: PPUSH
32633: PPUSH
// uc_side := your_side ;
32634: LD_ADDR_OWVAR 20
32638: PUSH
32639: LD_OWVAR 2
32643: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32644: LD_VAR 0 1
32648: PUSH
32649: LD_INT 1
32651: PUSH
32652: LD_INT 2
32654: PUSH
32655: LD_INT 3
32657: PUSH
32658: LD_INT 4
32660: PUSH
32661: LD_INT 5
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: IN
32671: IFFALSE 32683
// uc_nation := nation_american else
32673: LD_ADDR_OWVAR 21
32677: PUSH
32678: LD_INT 1
32680: ST_TO_ADDR
32681: GO 32726
// if chassis in [ 11 , 12 , 13 , 14 ] then
32683: LD_VAR 0 1
32687: PUSH
32688: LD_INT 11
32690: PUSH
32691: LD_INT 12
32693: PUSH
32694: LD_INT 13
32696: PUSH
32697: LD_INT 14
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: IN
32706: IFFALSE 32718
// uc_nation := nation_arabian else
32708: LD_ADDR_OWVAR 21
32712: PUSH
32713: LD_INT 2
32715: ST_TO_ADDR
32716: GO 32726
// uc_nation := nation_russian ;
32718: LD_ADDR_OWVAR 21
32722: PUSH
32723: LD_INT 3
32725: ST_TO_ADDR
// vc_chassis := chassis ;
32726: LD_ADDR_OWVAR 37
32730: PUSH
32731: LD_VAR 0 1
32735: ST_TO_ADDR
// vc_engine := engine ;
32736: LD_ADDR_OWVAR 39
32740: PUSH
32741: LD_VAR 0 2
32745: ST_TO_ADDR
// vc_control := control ;
32746: LD_ADDR_OWVAR 38
32750: PUSH
32751: LD_VAR 0 3
32755: ST_TO_ADDR
// vc_weapon := weapon ;
32756: LD_ADDR_OWVAR 40
32760: PUSH
32761: LD_VAR 0 4
32765: ST_TO_ADDR
// un := CreateVehicle ;
32766: LD_ADDR_VAR 0 8
32770: PUSH
32771: CALL_OW 45
32775: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32776: LD_VAR 0 8
32780: PPUSH
32781: LD_INT 0
32783: PPUSH
32784: LD_INT 5
32786: PPUSH
32787: CALL_OW 12
32791: PPUSH
32792: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32796: LD_VAR 0 8
32800: PPUSH
32801: LD_VAR 0 5
32805: PPUSH
32806: LD_VAR 0 6
32810: PPUSH
32811: LD_INT 1
32813: PPUSH
32814: CALL_OW 48
// end ;
32818: LD_VAR 0 7
32822: RET
// export hInvincible ; every 1 do
32823: GO 32825
32825: DISABLE
// hInvincible := [ ] ;
32826: LD_ADDR_EXP 121
32830: PUSH
32831: EMPTY
32832: ST_TO_ADDR
32833: END
// every 10 do var i ;
32834: GO 32836
32836: DISABLE
32837: LD_INT 0
32839: PPUSH
// begin enable ;
32840: ENABLE
// if not hInvincible then
32841: LD_EXP 121
32845: NOT
32846: IFFALSE 32850
// exit ;
32848: GO 32894
// for i in hInvincible do
32850: LD_ADDR_VAR 0 1
32854: PUSH
32855: LD_EXP 121
32859: PUSH
32860: FOR_IN
32861: IFFALSE 32892
// if GetLives ( i ) < 1000 then
32863: LD_VAR 0 1
32867: PPUSH
32868: CALL_OW 256
32872: PUSH
32873: LD_INT 1000
32875: LESS
32876: IFFALSE 32890
// SetLives ( i , 1000 ) ;
32878: LD_VAR 0 1
32882: PPUSH
32883: LD_INT 1000
32885: PPUSH
32886: CALL_OW 234
32890: GO 32860
32892: POP
32893: POP
// end ;
32894: PPOPN 1
32896: END
// export function hHackInvincible ; var i ; begin
32897: LD_INT 0
32899: PPUSH
32900: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32901: LD_ADDR_VAR 0 2
32905: PUSH
32906: LD_INT 2
32908: PUSH
32909: LD_INT 21
32911: PUSH
32912: LD_INT 1
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: LD_INT 21
32921: PUSH
32922: LD_INT 2
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: LIST
32933: PPUSH
32934: CALL_OW 69
32938: PUSH
32939: FOR_IN
32940: IFFALSE 33001
// if IsSelected ( i ) then
32942: LD_VAR 0 2
32946: PPUSH
32947: CALL_OW 306
32951: IFFALSE 32999
// begin if i in hInvincible then
32953: LD_VAR 0 2
32957: PUSH
32958: LD_EXP 121
32962: IN
32963: IFFALSE 32983
// hInvincible := hInvincible diff i else
32965: LD_ADDR_EXP 121
32969: PUSH
32970: LD_EXP 121
32974: PUSH
32975: LD_VAR 0 2
32979: DIFF
32980: ST_TO_ADDR
32981: GO 32999
// hInvincible := hInvincible union i ;
32983: LD_ADDR_EXP 121
32987: PUSH
32988: LD_EXP 121
32992: PUSH
32993: LD_VAR 0 2
32997: UNION
32998: ST_TO_ADDR
// end ;
32999: GO 32939
33001: POP
33002: POP
// end ;
33003: LD_VAR 0 1
33007: RET
// export function hHackInvisible ; var i , j ; begin
33008: LD_INT 0
33010: PPUSH
33011: PPUSH
33012: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33013: LD_ADDR_VAR 0 2
33017: PUSH
33018: LD_INT 21
33020: PUSH
33021: LD_INT 1
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PPUSH
33028: CALL_OW 69
33032: PUSH
33033: FOR_IN
33034: IFFALSE 33058
// if IsSelected ( i ) then
33036: LD_VAR 0 2
33040: PPUSH
33041: CALL_OW 306
33045: IFFALSE 33056
// ComForceInvisible ( i ) ;
33047: LD_VAR 0 2
33051: PPUSH
33052: CALL_OW 496
33056: GO 33033
33058: POP
33059: POP
// end ;
33060: LD_VAR 0 1
33064: RET
// export function hHackChangeYourSide ; begin
33065: LD_INT 0
33067: PPUSH
// if your_side = 8 then
33068: LD_OWVAR 2
33072: PUSH
33073: LD_INT 8
33075: EQUAL
33076: IFFALSE 33088
// your_side := 0 else
33078: LD_ADDR_OWVAR 2
33082: PUSH
33083: LD_INT 0
33085: ST_TO_ADDR
33086: GO 33102
// your_side := your_side + 1 ;
33088: LD_ADDR_OWVAR 2
33092: PUSH
33093: LD_OWVAR 2
33097: PUSH
33098: LD_INT 1
33100: PLUS
33101: ST_TO_ADDR
// end ;
33102: LD_VAR 0 1
33106: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33107: LD_INT 0
33109: PPUSH
33110: PPUSH
33111: PPUSH
// for i in all_units do
33112: LD_ADDR_VAR 0 2
33116: PUSH
33117: LD_OWVAR 3
33121: PUSH
33122: FOR_IN
33123: IFFALSE 33201
// if IsSelected ( i ) then
33125: LD_VAR 0 2
33129: PPUSH
33130: CALL_OW 306
33134: IFFALSE 33199
// begin j := GetSide ( i ) ;
33136: LD_ADDR_VAR 0 3
33140: PUSH
33141: LD_VAR 0 2
33145: PPUSH
33146: CALL_OW 255
33150: ST_TO_ADDR
// if j = 8 then
33151: LD_VAR 0 3
33155: PUSH
33156: LD_INT 8
33158: EQUAL
33159: IFFALSE 33171
// j := 0 else
33161: LD_ADDR_VAR 0 3
33165: PUSH
33166: LD_INT 0
33168: ST_TO_ADDR
33169: GO 33185
// j := j + 1 ;
33171: LD_ADDR_VAR 0 3
33175: PUSH
33176: LD_VAR 0 3
33180: PUSH
33181: LD_INT 1
33183: PLUS
33184: ST_TO_ADDR
// SetSide ( i , j ) ;
33185: LD_VAR 0 2
33189: PPUSH
33190: LD_VAR 0 3
33194: PPUSH
33195: CALL_OW 235
// end ;
33199: GO 33122
33201: POP
33202: POP
// end ;
33203: LD_VAR 0 1
33207: RET
// export function hHackFog ; begin
33208: LD_INT 0
33210: PPUSH
// FogOff ( true ) ;
33211: LD_INT 1
33213: PPUSH
33214: CALL_OW 344
// end ;
33218: LD_VAR 0 1
33222: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33223: LD_INT 0
33225: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33226: LD_VAR 0 1
33230: PPUSH
33231: LD_VAR 0 2
33235: PPUSH
33236: LD_VAR 0 3
33240: PPUSH
33241: LD_INT 1
33243: PPUSH
33244: LD_INT 1
33246: PPUSH
33247: CALL_OW 483
// CenterOnXY ( x , y ) ;
33251: LD_VAR 0 2
33255: PPUSH
33256: LD_VAR 0 3
33260: PPUSH
33261: CALL_OW 84
// end ;
33265: LD_VAR 0 4
33269: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33270: LD_INT 0
33272: PPUSH
33273: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33274: LD_VAR 0 1
33278: NOT
33279: PUSH
33280: LD_VAR 0 2
33284: PPUSH
33285: LD_VAR 0 3
33289: PPUSH
33290: CALL_OW 488
33294: NOT
33295: OR
33296: PUSH
33297: LD_VAR 0 1
33301: PPUSH
33302: CALL_OW 266
33306: PUSH
33307: LD_INT 3
33309: NONEQUAL
33310: PUSH
33311: LD_VAR 0 1
33315: PPUSH
33316: CALL_OW 247
33320: PUSH
33321: LD_INT 1
33323: EQUAL
33324: NOT
33325: AND
33326: OR
33327: IFFALSE 33331
// exit ;
33329: GO 33480
// if GetType ( factory ) = unit_human then
33331: LD_VAR 0 1
33335: PPUSH
33336: CALL_OW 247
33340: PUSH
33341: LD_INT 1
33343: EQUAL
33344: IFFALSE 33361
// factory := IsInUnit ( factory ) ;
33346: LD_ADDR_VAR 0 1
33350: PUSH
33351: LD_VAR 0 1
33355: PPUSH
33356: CALL_OW 310
33360: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33361: LD_VAR 0 1
33365: PPUSH
33366: CALL_OW 266
33370: PUSH
33371: LD_INT 3
33373: NONEQUAL
33374: IFFALSE 33378
// exit ;
33376: GO 33480
// if HexInfo ( x , y ) = factory then
33378: LD_VAR 0 2
33382: PPUSH
33383: LD_VAR 0 3
33387: PPUSH
33388: CALL_OW 428
33392: PUSH
33393: LD_VAR 0 1
33397: EQUAL
33398: IFFALSE 33425
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33400: LD_ADDR_EXP 122
33404: PUSH
33405: LD_EXP 122
33409: PPUSH
33410: LD_VAR 0 1
33414: PPUSH
33415: LD_INT 0
33417: PPUSH
33418: CALL_OW 1
33422: ST_TO_ADDR
33423: GO 33476
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33425: LD_ADDR_EXP 122
33429: PUSH
33430: LD_EXP 122
33434: PPUSH
33435: LD_VAR 0 1
33439: PPUSH
33440: LD_VAR 0 1
33444: PPUSH
33445: CALL_OW 255
33449: PUSH
33450: LD_VAR 0 1
33454: PUSH
33455: LD_VAR 0 2
33459: PUSH
33460: LD_VAR 0 3
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: PPUSH
33471: CALL_OW 1
33475: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33476: CALL 33485 0 0
// end ;
33480: LD_VAR 0 4
33484: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
33485: LD_INT 0
33487: PPUSH
33488: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33489: LD_STRING resetFactoryWaypoint();
33491: PPUSH
33492: CALL_OW 559
// if factoryWaypoints then
33496: LD_EXP 122
33500: IFFALSE 33623
// begin for i := 1 to factoryWaypoints do
33502: LD_ADDR_VAR 0 2
33506: PUSH
33507: DOUBLE
33508: LD_INT 1
33510: DEC
33511: ST_TO_ADDR
33512: LD_EXP 122
33516: PUSH
33517: FOR_TO
33518: IFFALSE 33621
// if factoryWaypoints [ i ] then
33520: LD_EXP 122
33524: PUSH
33525: LD_VAR 0 2
33529: ARRAY
33530: IFFALSE 33619
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
33532: LD_STRING setFactoryWaypointXY(
33534: PUSH
33535: LD_EXP 122
33539: PUSH
33540: LD_VAR 0 2
33544: ARRAY
33545: PUSH
33546: LD_INT 1
33548: ARRAY
33549: STR
33550: PUSH
33551: LD_STRING ,
33553: STR
33554: PUSH
33555: LD_EXP 122
33559: PUSH
33560: LD_VAR 0 2
33564: ARRAY
33565: PUSH
33566: LD_INT 2
33568: ARRAY
33569: STR
33570: PUSH
33571: LD_STRING ,
33573: STR
33574: PUSH
33575: LD_EXP 122
33579: PUSH
33580: LD_VAR 0 2
33584: ARRAY
33585: PUSH
33586: LD_INT 3
33588: ARRAY
33589: STR
33590: PUSH
33591: LD_STRING ,
33593: STR
33594: PUSH
33595: LD_EXP 122
33599: PUSH
33600: LD_VAR 0 2
33604: ARRAY
33605: PUSH
33606: LD_INT 4
33608: ARRAY
33609: STR
33610: PUSH
33611: LD_STRING )
33613: STR
33614: PPUSH
33615: CALL_OW 559
33619: GO 33517
33621: POP
33622: POP
// end ; end ;
33623: LD_VAR 0 1
33627: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarhouseGatheringPoint ( warehouse , x , y ) ; begin
33628: LD_INT 0
33630: PPUSH
// if HexInfo ( x , y ) = warehouse then
33631: LD_VAR 0 2
33635: PPUSH
33636: LD_VAR 0 3
33640: PPUSH
33641: CALL_OW 428
33645: PUSH
33646: LD_VAR 0 1
33650: EQUAL
33651: IFFALSE 33678
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33653: LD_ADDR_EXP 123
33657: PUSH
33658: LD_EXP 123
33662: PPUSH
33663: LD_VAR 0 1
33667: PPUSH
33668: LD_INT 0
33670: PPUSH
33671: CALL_OW 1
33675: ST_TO_ADDR
33676: GO 33729
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33678: LD_ADDR_EXP 123
33682: PUSH
33683: LD_EXP 123
33687: PPUSH
33688: LD_VAR 0 1
33692: PPUSH
33693: LD_VAR 0 1
33697: PPUSH
33698: CALL_OW 255
33702: PUSH
33703: LD_VAR 0 1
33707: PUSH
33708: LD_VAR 0 2
33712: PUSH
33713: LD_VAR 0 3
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: PPUSH
33724: CALL_OW 1
33728: ST_TO_ADDR
// UpdateWarhouseGatheringPoints ;
33729: CALL 33738 0 0
// end ;
33733: LD_VAR 0 4
33737: RET
// export function UpdateWarhouseGatheringPoints ( ) ; var i ; begin
33738: LD_INT 0
33740: PPUSH
33741: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
33742: LD_STRING resetWarehouseGatheringPoints();
33744: PPUSH
33745: CALL_OW 559
// if warehouseGatheringPoints then
33749: LD_EXP 123
33753: IFFALSE 33876
// begin for i := 1 to warehouseGatheringPoints do
33755: LD_ADDR_VAR 0 2
33759: PUSH
33760: DOUBLE
33761: LD_INT 1
33763: DEC
33764: ST_TO_ADDR
33765: LD_EXP 123
33769: PUSH
33770: FOR_TO
33771: IFFALSE 33874
// if warehouseGatheringPoints [ i ] then
33773: LD_EXP 123
33777: PUSH
33778: LD_VAR 0 2
33782: ARRAY
33783: IFFALSE 33872
// ToLua ( setWarhouseGatheringPointXY( & warehouseGatheringPoints [ i ] [ 1 ] & , & warehouseGatheringPoints [ i ] [ 2 ] & , & warehouseGatheringPoints [ i ] [ 3 ] & , & warehouseGatheringPoints [ i ] [ 4 ] & ) ) ;
33785: LD_STRING setWarhouseGatheringPointXY(
33787: PUSH
33788: LD_EXP 123
33792: PUSH
33793: LD_VAR 0 2
33797: ARRAY
33798: PUSH
33799: LD_INT 1
33801: ARRAY
33802: STR
33803: PUSH
33804: LD_STRING ,
33806: STR
33807: PUSH
33808: LD_EXP 123
33812: PUSH
33813: LD_VAR 0 2
33817: ARRAY
33818: PUSH
33819: LD_INT 2
33821: ARRAY
33822: STR
33823: PUSH
33824: LD_STRING ,
33826: STR
33827: PUSH
33828: LD_EXP 123
33832: PUSH
33833: LD_VAR 0 2
33837: ARRAY
33838: PUSH
33839: LD_INT 3
33841: ARRAY
33842: STR
33843: PUSH
33844: LD_STRING ,
33846: STR
33847: PUSH
33848: LD_EXP 123
33852: PUSH
33853: LD_VAR 0 2
33857: ARRAY
33858: PUSH
33859: LD_INT 4
33861: ARRAY
33862: STR
33863: PUSH
33864: LD_STRING )
33866: STR
33867: PPUSH
33868: CALL_OW 559
33872: GO 33770
33874: POP
33875: POP
// end ; end ;
33876: LD_VAR 0 1
33880: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
33881: LD_EXP 123
33885: IFFALSE 34514
33887: GO 33889
33889: DISABLE
33890: LD_INT 0
33892: PPUSH
33893: PPUSH
33894: PPUSH
33895: PPUSH
33896: PPUSH
33897: PPUSH
33898: PPUSH
33899: PPUSH
33900: PPUSH
// begin enable ;
33901: ENABLE
// list := warehouseGatheringPoints diff 0 ;
33902: LD_ADDR_VAR 0 3
33906: PUSH
33907: LD_EXP 123
33911: PUSH
33912: LD_INT 0
33914: DIFF
33915: ST_TO_ADDR
// for i := 1 to list do
33916: LD_ADDR_VAR 0 1
33920: PUSH
33921: DOUBLE
33922: LD_INT 1
33924: DEC
33925: ST_TO_ADDR
33926: LD_VAR 0 3
33930: PUSH
33931: FOR_TO
33932: IFFALSE 34512
// begin if not list [ i ] then
33934: LD_VAR 0 3
33938: PUSH
33939: LD_VAR 0 1
33943: ARRAY
33944: NOT
33945: IFFALSE 33949
// continue ;
33947: GO 33931
// depot := list [ i ] [ 2 ] ;
33949: LD_ADDR_VAR 0 8
33953: PUSH
33954: LD_VAR 0 3
33958: PUSH
33959: LD_VAR 0 1
33963: ARRAY
33964: PUSH
33965: LD_INT 2
33967: ARRAY
33968: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
33969: LD_ADDR_VAR 0 5
33973: PUSH
33974: LD_VAR 0 3
33978: PUSH
33979: LD_VAR 0 1
33983: ARRAY
33984: PUSH
33985: LD_INT 1
33987: ARRAY
33988: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
33989: LD_VAR 0 8
33993: PPUSH
33994: CALL_OW 301
33998: PUSH
33999: LD_VAR 0 5
34003: PUSH
34004: LD_VAR 0 8
34008: PPUSH
34009: CALL_OW 255
34013: NONEQUAL
34014: OR
34015: IFFALSE 34044
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34017: LD_ADDR_EXP 123
34021: PUSH
34022: LD_EXP 123
34026: PPUSH
34027: LD_VAR 0 8
34031: PPUSH
34032: LD_INT 0
34034: PPUSH
34035: CALL_OW 1
34039: ST_TO_ADDR
// exit ;
34040: POP
34041: POP
34042: GO 34514
// end ; x := list [ i ] [ 3 ] ;
34044: LD_ADDR_VAR 0 6
34048: PUSH
34049: LD_VAR 0 3
34053: PUSH
34054: LD_VAR 0 1
34058: ARRAY
34059: PUSH
34060: LD_INT 3
34062: ARRAY
34063: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34064: LD_ADDR_VAR 0 7
34068: PUSH
34069: LD_VAR 0 3
34073: PUSH
34074: LD_VAR 0 1
34078: ARRAY
34079: PUSH
34080: LD_INT 4
34082: ARRAY
34083: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 12 ) ;
34084: LD_ADDR_VAR 0 9
34088: PUSH
34089: LD_VAR 0 6
34093: PPUSH
34094: LD_VAR 0 7
34098: PPUSH
34099: LD_INT 12
34101: PPUSH
34102: CALL 78577 0 3
34106: ST_TO_ADDR
// if not cratesNearbyPoint then
34107: LD_VAR 0 9
34111: NOT
34112: IFFALSE 34118
// exit ;
34114: POP
34115: POP
34116: GO 34514
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34118: LD_ADDR_VAR 0 4
34122: PUSH
34123: LD_INT 22
34125: PUSH
34126: LD_VAR 0 5
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 3
34137: PUSH
34138: LD_INT 60
34140: PUSH
34141: EMPTY
34142: LIST
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: PUSH
34148: LD_INT 2
34150: PUSH
34151: LD_INT 25
34153: PUSH
34154: LD_INT 2
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 25
34163: PUSH
34164: LD_INT 16
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: LIST
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: LIST
34180: PPUSH
34181: CALL_OW 69
34185: PUSH
34186: LD_VAR 0 8
34190: PPUSH
34191: CALL_OW 313
34195: PPUSH
34196: LD_INT 3
34198: PUSH
34199: LD_INT 60
34201: PUSH
34202: EMPTY
34203: LIST
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: PUSH
34209: LD_INT 2
34211: PUSH
34212: LD_INT 25
34214: PUSH
34215: LD_INT 2
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 25
34224: PUSH
34225: LD_INT 16
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: LIST
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PPUSH
34241: CALL_OW 72
34245: UNION
34246: ST_TO_ADDR
// if tmp then
34247: LD_VAR 0 4
34251: IFFALSE 34331
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34253: LD_ADDR_VAR 0 4
34257: PUSH
34258: LD_VAR 0 4
34262: PPUSH
34263: LD_INT 3
34265: PPUSH
34266: CALL 76544 0 2
34270: ST_TO_ADDR
// for j in tmp do
34271: LD_ADDR_VAR 0 2
34275: PUSH
34276: LD_VAR 0 4
34280: PUSH
34281: FOR_IN
34282: IFFALSE 34325
// begin if IsInUnit ( j ) then
34284: LD_VAR 0 2
34288: PPUSH
34289: CALL_OW 310
34293: IFFALSE 34304
// ComExit ( j ) ;
34295: LD_VAR 0 2
34299: PPUSH
34300: CALL 76627 0 1
// AddComCollect ( j , x , y ) ;
34304: LD_VAR 0 2
34308: PPUSH
34309: LD_VAR 0 6
34313: PPUSH
34314: LD_VAR 0 7
34318: PPUSH
34319: CALL_OW 177
// end ;
34323: GO 34281
34325: POP
34326: POP
// exit ;
34327: POP
34328: POP
34329: GO 34514
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34331: LD_ADDR_VAR 0 4
34335: PUSH
34336: LD_INT 22
34338: PUSH
34339: LD_VAR 0 5
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: PUSH
34348: LD_INT 2
34350: PUSH
34351: LD_INT 34
34353: PUSH
34354: LD_INT 12
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: LD_INT 34
34363: PUSH
34364: LD_INT 51
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PUSH
34371: LD_INT 34
34373: PUSH
34374: LD_INT 32
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PUSH
34381: LD_INT 34
34383: PUSH
34384: LD_EXP 46
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PPUSH
34404: CALL_OW 69
34408: ST_TO_ADDR
// if tmp then
34409: LD_VAR 0 4
34413: IFFALSE 34510
// begin for j in tmp do
34415: LD_ADDR_VAR 0 2
34419: PUSH
34420: LD_VAR 0 4
34424: PUSH
34425: FOR_IN
34426: IFFALSE 34508
// if GetFuel ( i ) > 20 and not HasTask ( i ) and ( GetControl ( i ) <> control_manual or IsDrivenBy ( i ) ) then
34428: LD_VAR 0 1
34432: PPUSH
34433: CALL_OW 261
34437: PUSH
34438: LD_INT 20
34440: GREATER
34441: PUSH
34442: LD_VAR 0 1
34446: PPUSH
34447: CALL_OW 314
34451: NOT
34452: AND
34453: PUSH
34454: LD_VAR 0 1
34458: PPUSH
34459: CALL_OW 263
34463: PUSH
34464: LD_INT 1
34466: NONEQUAL
34467: PUSH
34468: LD_VAR 0 1
34472: PPUSH
34473: CALL_OW 311
34477: OR
34478: AND
34479: IFFALSE 34506
// begin ComCollect ( j , x , y ) ;
34481: LD_VAR 0 2
34485: PPUSH
34486: LD_VAR 0 6
34490: PPUSH
34491: LD_VAR 0 7
34495: PPUSH
34496: CALL_OW 117
// exit ;
34500: POP
34501: POP
34502: POP
34503: POP
34504: GO 34514
// end ;
34506: GO 34425
34508: POP
34509: POP
// end ; end ;
34510: GO 33931
34512: POP
34513: POP
// end ; end_of_file
34514: PPOPN 9
34516: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34517: LD_INT 0
34519: PPUSH
34520: PPUSH
34521: PPUSH
34522: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34523: LD_VAR 0 1
34527: PPUSH
34528: CALL_OW 264
34532: PUSH
34533: LD_EXP 49
34537: EQUAL
34538: IFFALSE 34610
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34540: LD_INT 68
34542: PPUSH
34543: LD_VAR 0 1
34547: PPUSH
34548: CALL_OW 255
34552: PPUSH
34553: CALL_OW 321
34557: PUSH
34558: LD_INT 2
34560: EQUAL
34561: IFFALSE 34573
// eff := 70 else
34563: LD_ADDR_VAR 0 4
34567: PUSH
34568: LD_INT 70
34570: ST_TO_ADDR
34571: GO 34581
// eff := 30 ;
34573: LD_ADDR_VAR 0 4
34577: PUSH
34578: LD_INT 30
34580: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34581: LD_VAR 0 1
34585: PPUSH
34586: CALL_OW 250
34590: PPUSH
34591: LD_VAR 0 1
34595: PPUSH
34596: CALL_OW 251
34600: PPUSH
34601: LD_VAR 0 4
34605: PPUSH
34606: CALL_OW 495
// end ; end ;
34610: LD_VAR 0 2
34614: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34615: LD_INT 0
34617: PPUSH
// end ;
34618: LD_VAR 0 4
34622: RET
// export function SOS_Command ( cmd ) ; begin
34623: LD_INT 0
34625: PPUSH
// end ;
34626: LD_VAR 0 2
34630: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34631: LD_INT 0
34633: PPUSH
// end ;
34634: LD_VAR 0 6
34638: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34639: LD_INT 0
34641: PPUSH
34642: PPUSH
// if not vehicle or not factory then
34643: LD_VAR 0 1
34647: NOT
34648: PUSH
34649: LD_VAR 0 2
34653: NOT
34654: OR
34655: IFFALSE 34659
// exit ;
34657: GO 34890
// if factoryWaypoints >= factory then
34659: LD_EXP 122
34663: PUSH
34664: LD_VAR 0 2
34668: GREATEREQUAL
34669: IFFALSE 34890
// if factoryWaypoints [ factory ] then
34671: LD_EXP 122
34675: PUSH
34676: LD_VAR 0 2
34680: ARRAY
34681: IFFALSE 34890
// begin if GetControl ( vehicle ) = control_manual then
34683: LD_VAR 0 1
34687: PPUSH
34688: CALL_OW 263
34692: PUSH
34693: LD_INT 1
34695: EQUAL
34696: IFFALSE 34777
// begin driver := IsDrivenBy ( vehicle ) ;
34698: LD_ADDR_VAR 0 4
34702: PUSH
34703: LD_VAR 0 1
34707: PPUSH
34708: CALL_OW 311
34712: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34713: LD_VAR 0 4
34717: PPUSH
34718: LD_EXP 122
34722: PUSH
34723: LD_VAR 0 2
34727: ARRAY
34728: PUSH
34729: LD_INT 3
34731: ARRAY
34732: PPUSH
34733: LD_EXP 122
34737: PUSH
34738: LD_VAR 0 2
34742: ARRAY
34743: PUSH
34744: LD_INT 4
34746: ARRAY
34747: PPUSH
34748: CALL_OW 171
// AddComExitVehicle ( driver ) ;
34752: LD_VAR 0 4
34756: PPUSH
34757: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
34761: LD_VAR 0 4
34765: PPUSH
34766: LD_VAR 0 2
34770: PPUSH
34771: CALL_OW 180
// end else
34775: GO 34890
// if GetControl ( vehicle ) = control_remote then
34777: LD_VAR 0 1
34781: PPUSH
34782: CALL_OW 263
34786: PUSH
34787: LD_INT 2
34789: EQUAL
34790: IFFALSE 34851
// begin wait ( 0 0$2 ) ;
34792: LD_INT 70
34794: PPUSH
34795: CALL_OW 67
// if Connect ( vehicle ) then
34799: LD_VAR 0 1
34803: PPUSH
34804: CALL 46938 0 1
34808: IFFALSE 34849
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34810: LD_VAR 0 1
34814: PPUSH
34815: LD_EXP 122
34819: PUSH
34820: LD_VAR 0 2
34824: ARRAY
34825: PUSH
34826: LD_INT 3
34828: ARRAY
34829: PPUSH
34830: LD_EXP 122
34834: PUSH
34835: LD_VAR 0 2
34839: ARRAY
34840: PUSH
34841: LD_INT 4
34843: ARRAY
34844: PPUSH
34845: CALL_OW 171
// end else
34849: GO 34890
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34851: LD_VAR 0 1
34855: PPUSH
34856: LD_EXP 122
34860: PUSH
34861: LD_VAR 0 2
34865: ARRAY
34866: PUSH
34867: LD_INT 3
34869: ARRAY
34870: PPUSH
34871: LD_EXP 122
34875: PUSH
34876: LD_VAR 0 2
34880: ARRAY
34881: PUSH
34882: LD_INT 4
34884: ARRAY
34885: PPUSH
34886: CALL_OW 171
// end ; end ;
34890: LD_VAR 0 3
34894: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34895: LD_INT 0
34897: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34898: LD_VAR 0 1
34902: PUSH
34903: LD_INT 250
34905: EQUAL
34906: PUSH
34907: LD_VAR 0 2
34911: PPUSH
34912: CALL_OW 264
34916: PUSH
34917: LD_EXP 52
34921: EQUAL
34922: AND
34923: IFFALSE 34944
// MinerPlaceMine ( unit , x , y ) ;
34925: LD_VAR 0 2
34929: PPUSH
34930: LD_VAR 0 4
34934: PPUSH
34935: LD_VAR 0 5
34939: PPUSH
34940: CALL 37343 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34944: LD_VAR 0 1
34948: PUSH
34949: LD_INT 251
34951: EQUAL
34952: PUSH
34953: LD_VAR 0 2
34957: PPUSH
34958: CALL_OW 264
34962: PUSH
34963: LD_EXP 52
34967: EQUAL
34968: AND
34969: IFFALSE 34990
// MinerDetonateMine ( unit , x , y ) ;
34971: LD_VAR 0 2
34975: PPUSH
34976: LD_VAR 0 4
34980: PPUSH
34981: LD_VAR 0 5
34985: PPUSH
34986: CALL 37620 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34990: LD_VAR 0 1
34994: PUSH
34995: LD_INT 252
34997: EQUAL
34998: PUSH
34999: LD_VAR 0 2
35003: PPUSH
35004: CALL_OW 264
35008: PUSH
35009: LD_EXP 52
35013: EQUAL
35014: AND
35015: IFFALSE 35036
// MinerCreateMinefield ( unit , x , y ) ;
35017: LD_VAR 0 2
35021: PPUSH
35022: LD_VAR 0 4
35026: PPUSH
35027: LD_VAR 0 5
35031: PPUSH
35032: CALL 38037 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35036: LD_VAR 0 1
35040: PUSH
35041: LD_INT 253
35043: EQUAL
35044: PUSH
35045: LD_VAR 0 2
35049: PPUSH
35050: CALL_OW 257
35054: PUSH
35055: LD_INT 5
35057: EQUAL
35058: AND
35059: IFFALSE 35080
// ComBinocular ( unit , x , y ) ;
35061: LD_VAR 0 2
35065: PPUSH
35066: LD_VAR 0 4
35070: PPUSH
35071: LD_VAR 0 5
35075: PPUSH
35076: CALL 38408 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35080: LD_VAR 0 1
35084: PUSH
35085: LD_INT 254
35087: EQUAL
35088: PUSH
35089: LD_VAR 0 2
35093: PPUSH
35094: CALL_OW 264
35098: PUSH
35099: LD_EXP 47
35103: EQUAL
35104: AND
35105: PUSH
35106: LD_VAR 0 3
35110: PPUSH
35111: CALL_OW 263
35115: PUSH
35116: LD_INT 3
35118: EQUAL
35119: AND
35120: IFFALSE 35136
// HackDestroyVehicle ( unit , selectedUnit ) ;
35122: LD_VAR 0 2
35126: PPUSH
35127: LD_VAR 0 3
35131: PPUSH
35132: CALL 36703 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35136: LD_VAR 0 1
35140: PUSH
35141: LD_INT 255
35143: EQUAL
35144: PUSH
35145: LD_VAR 0 2
35149: PPUSH
35150: CALL_OW 264
35154: PUSH
35155: LD_INT 14
35157: PUSH
35158: LD_INT 53
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: IN
35165: AND
35166: PUSH
35167: LD_VAR 0 4
35171: PPUSH
35172: LD_VAR 0 5
35176: PPUSH
35177: CALL_OW 488
35181: AND
35182: IFFALSE 35206
// CutTreeXYR ( unit , x , y , 12 ) ;
35184: LD_VAR 0 2
35188: PPUSH
35189: LD_VAR 0 4
35193: PPUSH
35194: LD_VAR 0 5
35198: PPUSH
35199: LD_INT 12
35201: PPUSH
35202: CALL 35269 0 4
// if cmd = 256 then
35206: LD_VAR 0 1
35210: PUSH
35211: LD_INT 256
35213: EQUAL
35214: IFFALSE 35235
// SetFactoryWaypoint ( unit , x , y ) ;
35216: LD_VAR 0 2
35220: PPUSH
35221: LD_VAR 0 4
35225: PPUSH
35226: LD_VAR 0 5
35230: PPUSH
35231: CALL 33270 0 3
// if cmd = 257 then
35235: LD_VAR 0 1
35239: PUSH
35240: LD_INT 257
35242: EQUAL
35243: IFFALSE 35264
// SetWarhouseGatheringPoint ( unit , x , y ) ;
35245: LD_VAR 0 2
35249: PPUSH
35250: LD_VAR 0 4
35254: PPUSH
35255: LD_VAR 0 5
35259: PPUSH
35260: CALL 33628 0 3
// end ;
35264: LD_VAR 0 6
35268: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35269: LD_INT 0
35271: PPUSH
35272: PPUSH
35273: PPUSH
35274: PPUSH
35275: PPUSH
35276: PPUSH
35277: PPUSH
35278: PPUSH
35279: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35280: LD_VAR 0 1
35284: NOT
35285: PUSH
35286: LD_VAR 0 2
35290: PPUSH
35291: LD_VAR 0 3
35295: PPUSH
35296: CALL_OW 488
35300: NOT
35301: OR
35302: PUSH
35303: LD_VAR 0 4
35307: NOT
35308: OR
35309: IFFALSE 35313
// exit ;
35311: GO 35653
// list := [ ] ;
35313: LD_ADDR_VAR 0 13
35317: PUSH
35318: EMPTY
35319: ST_TO_ADDR
// if x - r < 0 then
35320: LD_VAR 0 2
35324: PUSH
35325: LD_VAR 0 4
35329: MINUS
35330: PUSH
35331: LD_INT 0
35333: LESS
35334: IFFALSE 35346
// min_x := 0 else
35336: LD_ADDR_VAR 0 7
35340: PUSH
35341: LD_INT 0
35343: ST_TO_ADDR
35344: GO 35362
// min_x := x - r ;
35346: LD_ADDR_VAR 0 7
35350: PUSH
35351: LD_VAR 0 2
35355: PUSH
35356: LD_VAR 0 4
35360: MINUS
35361: ST_TO_ADDR
// if y - r < 0 then
35362: LD_VAR 0 3
35366: PUSH
35367: LD_VAR 0 4
35371: MINUS
35372: PUSH
35373: LD_INT 0
35375: LESS
35376: IFFALSE 35388
// min_y := 0 else
35378: LD_ADDR_VAR 0 8
35382: PUSH
35383: LD_INT 0
35385: ST_TO_ADDR
35386: GO 35404
// min_y := y - r ;
35388: LD_ADDR_VAR 0 8
35392: PUSH
35393: LD_VAR 0 3
35397: PUSH
35398: LD_VAR 0 4
35402: MINUS
35403: ST_TO_ADDR
// max_x := x + r ;
35404: LD_ADDR_VAR 0 9
35408: PUSH
35409: LD_VAR 0 2
35413: PUSH
35414: LD_VAR 0 4
35418: PLUS
35419: ST_TO_ADDR
// max_y := y + r ;
35420: LD_ADDR_VAR 0 10
35424: PUSH
35425: LD_VAR 0 3
35429: PUSH
35430: LD_VAR 0 4
35434: PLUS
35435: ST_TO_ADDR
// for _x = min_x to max_x do
35436: LD_ADDR_VAR 0 11
35440: PUSH
35441: DOUBLE
35442: LD_VAR 0 7
35446: DEC
35447: ST_TO_ADDR
35448: LD_VAR 0 9
35452: PUSH
35453: FOR_TO
35454: IFFALSE 35571
// for _y = min_y to max_y do
35456: LD_ADDR_VAR 0 12
35460: PUSH
35461: DOUBLE
35462: LD_VAR 0 8
35466: DEC
35467: ST_TO_ADDR
35468: LD_VAR 0 10
35472: PUSH
35473: FOR_TO
35474: IFFALSE 35567
// begin if not ValidHex ( _x , _y ) then
35476: LD_VAR 0 11
35480: PPUSH
35481: LD_VAR 0 12
35485: PPUSH
35486: CALL_OW 488
35490: NOT
35491: IFFALSE 35495
// continue ;
35493: GO 35473
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35495: LD_VAR 0 11
35499: PPUSH
35500: LD_VAR 0 12
35504: PPUSH
35505: CALL_OW 351
35509: PUSH
35510: LD_VAR 0 11
35514: PPUSH
35515: LD_VAR 0 12
35519: PPUSH
35520: CALL_OW 554
35524: AND
35525: IFFALSE 35565
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35527: LD_ADDR_VAR 0 13
35531: PUSH
35532: LD_VAR 0 13
35536: PPUSH
35537: LD_VAR 0 13
35541: PUSH
35542: LD_INT 1
35544: PLUS
35545: PPUSH
35546: LD_VAR 0 11
35550: PUSH
35551: LD_VAR 0 12
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PPUSH
35560: CALL_OW 2
35564: ST_TO_ADDR
// end ;
35565: GO 35473
35567: POP
35568: POP
35569: GO 35453
35571: POP
35572: POP
// if not list then
35573: LD_VAR 0 13
35577: NOT
35578: IFFALSE 35582
// exit ;
35580: GO 35653
// for i in list do
35582: LD_ADDR_VAR 0 6
35586: PUSH
35587: LD_VAR 0 13
35591: PUSH
35592: FOR_IN
35593: IFFALSE 35651
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35595: LD_VAR 0 1
35599: PPUSH
35600: LD_STRING M
35602: PUSH
35603: LD_VAR 0 6
35607: PUSH
35608: LD_INT 1
35610: ARRAY
35611: PUSH
35612: LD_VAR 0 6
35616: PUSH
35617: LD_INT 2
35619: ARRAY
35620: PUSH
35621: LD_INT 0
35623: PUSH
35624: LD_INT 0
35626: PUSH
35627: LD_INT 0
35629: PUSH
35630: LD_INT 0
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: PUSH
35642: EMPTY
35643: LIST
35644: PPUSH
35645: CALL_OW 447
35649: GO 35592
35651: POP
35652: POP
// end ;
35653: LD_VAR 0 5
35657: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35658: LD_EXP 125
35662: NOT
35663: IFFALSE 35713
35665: GO 35667
35667: DISABLE
// begin initHack := true ;
35668: LD_ADDR_EXP 125
35672: PUSH
35673: LD_INT 1
35675: ST_TO_ADDR
// hackTanks := [ ] ;
35676: LD_ADDR_EXP 126
35680: PUSH
35681: EMPTY
35682: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35683: LD_ADDR_EXP 127
35687: PUSH
35688: EMPTY
35689: ST_TO_ADDR
// hackLimit := 3 ;
35690: LD_ADDR_EXP 128
35694: PUSH
35695: LD_INT 3
35697: ST_TO_ADDR
// hackDist := 12 ;
35698: LD_ADDR_EXP 129
35702: PUSH
35703: LD_INT 12
35705: ST_TO_ADDR
// hackCounter := [ ] ;
35706: LD_ADDR_EXP 130
35710: PUSH
35711: EMPTY
35712: ST_TO_ADDR
// end ;
35713: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35714: LD_EXP 125
35718: PUSH
35719: LD_INT 34
35721: PUSH
35722: LD_EXP 47
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PPUSH
35731: CALL_OW 69
35735: AND
35736: IFFALSE 35991
35738: GO 35740
35740: DISABLE
35741: LD_INT 0
35743: PPUSH
35744: PPUSH
// begin enable ;
35745: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35746: LD_ADDR_VAR 0 1
35750: PUSH
35751: LD_INT 34
35753: PUSH
35754: LD_EXP 47
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PPUSH
35763: CALL_OW 69
35767: PUSH
35768: FOR_IN
35769: IFFALSE 35989
// begin if not i in hackTanks then
35771: LD_VAR 0 1
35775: PUSH
35776: LD_EXP 126
35780: IN
35781: NOT
35782: IFFALSE 35865
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35784: LD_ADDR_EXP 126
35788: PUSH
35789: LD_EXP 126
35793: PPUSH
35794: LD_EXP 126
35798: PUSH
35799: LD_INT 1
35801: PLUS
35802: PPUSH
35803: LD_VAR 0 1
35807: PPUSH
35808: CALL_OW 1
35812: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35813: LD_ADDR_EXP 127
35817: PUSH
35818: LD_EXP 127
35822: PPUSH
35823: LD_EXP 127
35827: PUSH
35828: LD_INT 1
35830: PLUS
35831: PPUSH
35832: EMPTY
35833: PPUSH
35834: CALL_OW 1
35838: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35839: LD_ADDR_EXP 130
35843: PUSH
35844: LD_EXP 130
35848: PPUSH
35849: LD_EXP 130
35853: PUSH
35854: LD_INT 1
35856: PLUS
35857: PPUSH
35858: EMPTY
35859: PPUSH
35860: CALL_OW 1
35864: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35865: LD_VAR 0 1
35869: PPUSH
35870: CALL_OW 302
35874: NOT
35875: IFFALSE 35888
// begin HackUnlinkAll ( i ) ;
35877: LD_VAR 0 1
35881: PPUSH
35882: CALL 35994 0 1
// continue ;
35886: GO 35768
// end ; HackCheckCapturedStatus ( i ) ;
35888: LD_VAR 0 1
35892: PPUSH
35893: CALL 36437 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35897: LD_ADDR_VAR 0 2
35901: PUSH
35902: LD_INT 81
35904: PUSH
35905: LD_VAR 0 1
35909: PPUSH
35910: CALL_OW 255
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 33
35921: PUSH
35922: LD_INT 3
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 91
35931: PUSH
35932: LD_VAR 0 1
35936: PUSH
35937: LD_EXP 129
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 50
35949: PUSH
35950: EMPTY
35951: LIST
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: PPUSH
35959: CALL_OW 69
35963: ST_TO_ADDR
// if not tmp then
35964: LD_VAR 0 2
35968: NOT
35969: IFFALSE 35973
// continue ;
35971: GO 35768
// HackLink ( i , tmp ) ;
35973: LD_VAR 0 1
35977: PPUSH
35978: LD_VAR 0 2
35982: PPUSH
35983: CALL 36130 0 2
// end ;
35987: GO 35768
35989: POP
35990: POP
// end ;
35991: PPOPN 2
35993: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35994: LD_INT 0
35996: PPUSH
35997: PPUSH
35998: PPUSH
// if not hack in hackTanks then
35999: LD_VAR 0 1
36003: PUSH
36004: LD_EXP 126
36008: IN
36009: NOT
36010: IFFALSE 36014
// exit ;
36012: GO 36125
// index := GetElementIndex ( hackTanks , hack ) ;
36014: LD_ADDR_VAR 0 4
36018: PUSH
36019: LD_EXP 126
36023: PPUSH
36024: LD_VAR 0 1
36028: PPUSH
36029: CALL 43752 0 2
36033: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36034: LD_EXP 127
36038: PUSH
36039: LD_VAR 0 4
36043: ARRAY
36044: IFFALSE 36125
// begin for i in hackTanksCaptured [ index ] do
36046: LD_ADDR_VAR 0 3
36050: PUSH
36051: LD_EXP 127
36055: PUSH
36056: LD_VAR 0 4
36060: ARRAY
36061: PUSH
36062: FOR_IN
36063: IFFALSE 36089
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36065: LD_VAR 0 3
36069: PUSH
36070: LD_INT 1
36072: ARRAY
36073: PPUSH
36074: LD_VAR 0 3
36078: PUSH
36079: LD_INT 2
36081: ARRAY
36082: PPUSH
36083: CALL_OW 235
36087: GO 36062
36089: POP
36090: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36091: LD_ADDR_EXP 127
36095: PUSH
36096: LD_EXP 127
36100: PPUSH
36101: LD_VAR 0 4
36105: PPUSH
36106: EMPTY
36107: PPUSH
36108: CALL_OW 1
36112: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36113: LD_VAR 0 1
36117: PPUSH
36118: LD_INT 0
36120: PPUSH
36121: CALL_OW 505
// end ; end ;
36125: LD_VAR 0 2
36129: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36130: LD_INT 0
36132: PPUSH
36133: PPUSH
36134: PPUSH
// if not hack in hackTanks or not vehicles then
36135: LD_VAR 0 1
36139: PUSH
36140: LD_EXP 126
36144: IN
36145: NOT
36146: PUSH
36147: LD_VAR 0 2
36151: NOT
36152: OR
36153: IFFALSE 36157
// exit ;
36155: GO 36432
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36157: LD_ADDR_VAR 0 2
36161: PUSH
36162: LD_VAR 0 1
36166: PPUSH
36167: LD_VAR 0 2
36171: PPUSH
36172: LD_INT 1
36174: PPUSH
36175: LD_INT 1
36177: PPUSH
36178: CALL 44402 0 4
36182: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36183: LD_ADDR_VAR 0 5
36187: PUSH
36188: LD_EXP 126
36192: PPUSH
36193: LD_VAR 0 1
36197: PPUSH
36198: CALL 43752 0 2
36202: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36203: LD_EXP 127
36207: PUSH
36208: LD_VAR 0 5
36212: ARRAY
36213: PUSH
36214: LD_EXP 128
36218: LESS
36219: IFFALSE 36408
// begin for i := 1 to vehicles do
36221: LD_ADDR_VAR 0 4
36225: PUSH
36226: DOUBLE
36227: LD_INT 1
36229: DEC
36230: ST_TO_ADDR
36231: LD_VAR 0 2
36235: PUSH
36236: FOR_TO
36237: IFFALSE 36406
// begin if hackTanksCaptured [ index ] = hackLimit then
36239: LD_EXP 127
36243: PUSH
36244: LD_VAR 0 5
36248: ARRAY
36249: PUSH
36250: LD_EXP 128
36254: EQUAL
36255: IFFALSE 36259
// break ;
36257: GO 36406
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36259: LD_ADDR_EXP 130
36263: PUSH
36264: LD_EXP 130
36268: PPUSH
36269: LD_VAR 0 5
36273: PPUSH
36274: LD_EXP 130
36278: PUSH
36279: LD_VAR 0 5
36283: ARRAY
36284: PUSH
36285: LD_INT 1
36287: PLUS
36288: PPUSH
36289: CALL_OW 1
36293: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36294: LD_ADDR_EXP 127
36298: PUSH
36299: LD_EXP 127
36303: PPUSH
36304: LD_VAR 0 5
36308: PUSH
36309: LD_EXP 127
36313: PUSH
36314: LD_VAR 0 5
36318: ARRAY
36319: PUSH
36320: LD_INT 1
36322: PLUS
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: PPUSH
36328: LD_VAR 0 2
36332: PUSH
36333: LD_VAR 0 4
36337: ARRAY
36338: PUSH
36339: LD_VAR 0 2
36343: PUSH
36344: LD_VAR 0 4
36348: ARRAY
36349: PPUSH
36350: CALL_OW 255
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PPUSH
36359: CALL 43967 0 3
36363: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36364: LD_VAR 0 2
36368: PUSH
36369: LD_VAR 0 4
36373: ARRAY
36374: PPUSH
36375: LD_VAR 0 1
36379: PPUSH
36380: CALL_OW 255
36384: PPUSH
36385: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36389: LD_VAR 0 2
36393: PUSH
36394: LD_VAR 0 4
36398: ARRAY
36399: PPUSH
36400: CALL_OW 141
// end ;
36404: GO 36236
36406: POP
36407: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36408: LD_VAR 0 1
36412: PPUSH
36413: LD_EXP 127
36417: PUSH
36418: LD_VAR 0 5
36422: ARRAY
36423: PUSH
36424: LD_INT 0
36426: PLUS
36427: PPUSH
36428: CALL_OW 505
// end ;
36432: LD_VAR 0 3
36436: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36437: LD_INT 0
36439: PPUSH
36440: PPUSH
36441: PPUSH
36442: PPUSH
// if not hack in hackTanks then
36443: LD_VAR 0 1
36447: PUSH
36448: LD_EXP 126
36452: IN
36453: NOT
36454: IFFALSE 36458
// exit ;
36456: GO 36698
// index := GetElementIndex ( hackTanks , hack ) ;
36458: LD_ADDR_VAR 0 4
36462: PUSH
36463: LD_EXP 126
36467: PPUSH
36468: LD_VAR 0 1
36472: PPUSH
36473: CALL 43752 0 2
36477: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36478: LD_ADDR_VAR 0 3
36482: PUSH
36483: DOUBLE
36484: LD_EXP 127
36488: PUSH
36489: LD_VAR 0 4
36493: ARRAY
36494: INC
36495: ST_TO_ADDR
36496: LD_INT 1
36498: PUSH
36499: FOR_DOWNTO
36500: IFFALSE 36672
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36502: LD_ADDR_VAR 0 5
36506: PUSH
36507: LD_EXP 127
36511: PUSH
36512: LD_VAR 0 4
36516: ARRAY
36517: PUSH
36518: LD_VAR 0 3
36522: ARRAY
36523: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36524: LD_VAR 0 5
36528: PUSH
36529: LD_INT 1
36531: ARRAY
36532: PPUSH
36533: CALL_OW 302
36537: NOT
36538: PUSH
36539: LD_VAR 0 5
36543: PUSH
36544: LD_INT 1
36546: ARRAY
36547: PPUSH
36548: CALL_OW 255
36552: PUSH
36553: LD_VAR 0 1
36557: PPUSH
36558: CALL_OW 255
36562: NONEQUAL
36563: OR
36564: IFFALSE 36670
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36566: LD_VAR 0 5
36570: PUSH
36571: LD_INT 1
36573: ARRAY
36574: PPUSH
36575: CALL_OW 305
36579: PUSH
36580: LD_VAR 0 5
36584: PUSH
36585: LD_INT 1
36587: ARRAY
36588: PPUSH
36589: CALL_OW 255
36593: PUSH
36594: LD_VAR 0 1
36598: PPUSH
36599: CALL_OW 255
36603: EQUAL
36604: AND
36605: IFFALSE 36629
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36607: LD_VAR 0 5
36611: PUSH
36612: LD_INT 1
36614: ARRAY
36615: PPUSH
36616: LD_VAR 0 5
36620: PUSH
36621: LD_INT 2
36623: ARRAY
36624: PPUSH
36625: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36629: LD_ADDR_EXP 127
36633: PUSH
36634: LD_EXP 127
36638: PPUSH
36639: LD_VAR 0 4
36643: PPUSH
36644: LD_EXP 127
36648: PUSH
36649: LD_VAR 0 4
36653: ARRAY
36654: PPUSH
36655: LD_VAR 0 3
36659: PPUSH
36660: CALL_OW 3
36664: PPUSH
36665: CALL_OW 1
36669: ST_TO_ADDR
// end ; end ;
36670: GO 36499
36672: POP
36673: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36674: LD_VAR 0 1
36678: PPUSH
36679: LD_EXP 127
36683: PUSH
36684: LD_VAR 0 4
36688: ARRAY
36689: PUSH
36690: LD_INT 0
36692: PLUS
36693: PPUSH
36694: CALL_OW 505
// end ;
36698: LD_VAR 0 2
36702: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36703: LD_INT 0
36705: PPUSH
36706: PPUSH
36707: PPUSH
36708: PPUSH
// if not hack in hackTanks then
36709: LD_VAR 0 1
36713: PUSH
36714: LD_EXP 126
36718: IN
36719: NOT
36720: IFFALSE 36724
// exit ;
36722: GO 36809
// index := GetElementIndex ( hackTanks , hack ) ;
36724: LD_ADDR_VAR 0 5
36728: PUSH
36729: LD_EXP 126
36733: PPUSH
36734: LD_VAR 0 1
36738: PPUSH
36739: CALL 43752 0 2
36743: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36744: LD_ADDR_VAR 0 4
36748: PUSH
36749: DOUBLE
36750: LD_INT 1
36752: DEC
36753: ST_TO_ADDR
36754: LD_EXP 127
36758: PUSH
36759: LD_VAR 0 5
36763: ARRAY
36764: PUSH
36765: FOR_TO
36766: IFFALSE 36807
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36768: LD_EXP 127
36772: PUSH
36773: LD_VAR 0 5
36777: ARRAY
36778: PUSH
36779: LD_VAR 0 4
36783: ARRAY
36784: PUSH
36785: LD_INT 1
36787: ARRAY
36788: PUSH
36789: LD_VAR 0 2
36793: EQUAL
36794: IFFALSE 36805
// KillUnit ( vehicle ) ;
36796: LD_VAR 0 2
36800: PPUSH
36801: CALL_OW 66
36805: GO 36765
36807: POP
36808: POP
// end ;
36809: LD_VAR 0 3
36813: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36814: LD_EXP 131
36818: NOT
36819: IFFALSE 36854
36821: GO 36823
36823: DISABLE
// begin initMiner := true ;
36824: LD_ADDR_EXP 131
36828: PUSH
36829: LD_INT 1
36831: ST_TO_ADDR
// minersList := [ ] ;
36832: LD_ADDR_EXP 132
36836: PUSH
36837: EMPTY
36838: ST_TO_ADDR
// minerMinesList := [ ] ;
36839: LD_ADDR_EXP 133
36843: PUSH
36844: EMPTY
36845: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36846: LD_ADDR_EXP 134
36850: PUSH
36851: LD_INT 5
36853: ST_TO_ADDR
// end ;
36854: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36855: LD_EXP 131
36859: PUSH
36860: LD_INT 34
36862: PUSH
36863: LD_EXP 52
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PPUSH
36872: CALL_OW 69
36876: AND
36877: IFFALSE 37340
36879: GO 36881
36881: DISABLE
36882: LD_INT 0
36884: PPUSH
36885: PPUSH
36886: PPUSH
36887: PPUSH
// begin enable ;
36888: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36889: LD_ADDR_VAR 0 1
36893: PUSH
36894: LD_INT 34
36896: PUSH
36897: LD_EXP 52
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PPUSH
36906: CALL_OW 69
36910: PUSH
36911: FOR_IN
36912: IFFALSE 36984
// begin if not i in minersList then
36914: LD_VAR 0 1
36918: PUSH
36919: LD_EXP 132
36923: IN
36924: NOT
36925: IFFALSE 36982
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36927: LD_ADDR_EXP 132
36931: PUSH
36932: LD_EXP 132
36936: PPUSH
36937: LD_EXP 132
36941: PUSH
36942: LD_INT 1
36944: PLUS
36945: PPUSH
36946: LD_VAR 0 1
36950: PPUSH
36951: CALL_OW 1
36955: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36956: LD_ADDR_EXP 133
36960: PUSH
36961: LD_EXP 133
36965: PPUSH
36966: LD_EXP 133
36970: PUSH
36971: LD_INT 1
36973: PLUS
36974: PPUSH
36975: EMPTY
36976: PPUSH
36977: CALL_OW 1
36981: ST_TO_ADDR
// end end ;
36982: GO 36911
36984: POP
36985: POP
// for i := minerMinesList downto 1 do
36986: LD_ADDR_VAR 0 1
36990: PUSH
36991: DOUBLE
36992: LD_EXP 133
36996: INC
36997: ST_TO_ADDR
36998: LD_INT 1
37000: PUSH
37001: FOR_DOWNTO
37002: IFFALSE 37338
// begin if IsLive ( minersList [ i ] ) then
37004: LD_EXP 132
37008: PUSH
37009: LD_VAR 0 1
37013: ARRAY
37014: PPUSH
37015: CALL_OW 300
37019: IFFALSE 37047
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37021: LD_EXP 132
37025: PUSH
37026: LD_VAR 0 1
37030: ARRAY
37031: PPUSH
37032: LD_EXP 133
37036: PUSH
37037: LD_VAR 0 1
37041: ARRAY
37042: PPUSH
37043: CALL_OW 505
// if not minerMinesList [ i ] then
37047: LD_EXP 133
37051: PUSH
37052: LD_VAR 0 1
37056: ARRAY
37057: NOT
37058: IFFALSE 37062
// continue ;
37060: GO 37001
// for j := minerMinesList [ i ] downto 1 do
37062: LD_ADDR_VAR 0 2
37066: PUSH
37067: DOUBLE
37068: LD_EXP 133
37072: PUSH
37073: LD_VAR 0 1
37077: ARRAY
37078: INC
37079: ST_TO_ADDR
37080: LD_INT 1
37082: PUSH
37083: FOR_DOWNTO
37084: IFFALSE 37334
// begin side := GetSide ( minersList [ i ] ) ;
37086: LD_ADDR_VAR 0 3
37090: PUSH
37091: LD_EXP 132
37095: PUSH
37096: LD_VAR 0 1
37100: ARRAY
37101: PPUSH
37102: CALL_OW 255
37106: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37107: LD_ADDR_VAR 0 4
37111: PUSH
37112: LD_EXP 133
37116: PUSH
37117: LD_VAR 0 1
37121: ARRAY
37122: PUSH
37123: LD_VAR 0 2
37127: ARRAY
37128: PUSH
37129: LD_INT 1
37131: ARRAY
37132: PPUSH
37133: LD_EXP 133
37137: PUSH
37138: LD_VAR 0 1
37142: ARRAY
37143: PUSH
37144: LD_VAR 0 2
37148: ARRAY
37149: PUSH
37150: LD_INT 2
37152: ARRAY
37153: PPUSH
37154: CALL_OW 428
37158: ST_TO_ADDR
// if not tmp then
37159: LD_VAR 0 4
37163: NOT
37164: IFFALSE 37168
// continue ;
37166: GO 37083
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37168: LD_VAR 0 4
37172: PUSH
37173: LD_INT 81
37175: PUSH
37176: LD_VAR 0 3
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PPUSH
37185: CALL_OW 69
37189: IN
37190: PUSH
37191: LD_EXP 133
37195: PUSH
37196: LD_VAR 0 1
37200: ARRAY
37201: PUSH
37202: LD_VAR 0 2
37206: ARRAY
37207: PUSH
37208: LD_INT 1
37210: ARRAY
37211: PPUSH
37212: LD_EXP 133
37216: PUSH
37217: LD_VAR 0 1
37221: ARRAY
37222: PUSH
37223: LD_VAR 0 2
37227: ARRAY
37228: PUSH
37229: LD_INT 2
37231: ARRAY
37232: PPUSH
37233: CALL_OW 458
37237: AND
37238: IFFALSE 37332
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37240: LD_EXP 133
37244: PUSH
37245: LD_VAR 0 1
37249: ARRAY
37250: PUSH
37251: LD_VAR 0 2
37255: ARRAY
37256: PUSH
37257: LD_INT 1
37259: ARRAY
37260: PPUSH
37261: LD_EXP 133
37265: PUSH
37266: LD_VAR 0 1
37270: ARRAY
37271: PUSH
37272: LD_VAR 0 2
37276: ARRAY
37277: PUSH
37278: LD_INT 2
37280: ARRAY
37281: PPUSH
37282: LD_VAR 0 3
37286: PPUSH
37287: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37291: LD_ADDR_EXP 133
37295: PUSH
37296: LD_EXP 133
37300: PPUSH
37301: LD_VAR 0 1
37305: PPUSH
37306: LD_EXP 133
37310: PUSH
37311: LD_VAR 0 1
37315: ARRAY
37316: PPUSH
37317: LD_VAR 0 2
37321: PPUSH
37322: CALL_OW 3
37326: PPUSH
37327: CALL_OW 1
37331: ST_TO_ADDR
// end ; end ;
37332: GO 37083
37334: POP
37335: POP
// end ;
37336: GO 37001
37338: POP
37339: POP
// end ;
37340: PPOPN 4
37342: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37343: LD_INT 0
37345: PPUSH
37346: PPUSH
// result := false ;
37347: LD_ADDR_VAR 0 4
37351: PUSH
37352: LD_INT 0
37354: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37355: LD_VAR 0 1
37359: PPUSH
37360: CALL_OW 264
37364: PUSH
37365: LD_EXP 52
37369: EQUAL
37370: NOT
37371: IFFALSE 37375
// exit ;
37373: GO 37615
// index := GetElementIndex ( minersList , unit ) ;
37375: LD_ADDR_VAR 0 5
37379: PUSH
37380: LD_EXP 132
37384: PPUSH
37385: LD_VAR 0 1
37389: PPUSH
37390: CALL 43752 0 2
37394: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37395: LD_EXP 133
37399: PUSH
37400: LD_VAR 0 5
37404: ARRAY
37405: PUSH
37406: LD_EXP 134
37410: GREATEREQUAL
37411: IFFALSE 37415
// exit ;
37413: GO 37615
// ComMoveXY ( unit , x , y ) ;
37415: LD_VAR 0 1
37419: PPUSH
37420: LD_VAR 0 2
37424: PPUSH
37425: LD_VAR 0 3
37429: PPUSH
37430: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37434: LD_INT 35
37436: PPUSH
37437: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37441: LD_VAR 0 1
37445: PPUSH
37446: LD_VAR 0 2
37450: PPUSH
37451: LD_VAR 0 3
37455: PPUSH
37456: CALL 75038 0 3
37460: NOT
37461: PUSH
37462: LD_VAR 0 1
37466: PPUSH
37467: CALL_OW 314
37471: AND
37472: IFFALSE 37476
// exit ;
37474: GO 37615
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37476: LD_VAR 0 2
37480: PPUSH
37481: LD_VAR 0 3
37485: PPUSH
37486: CALL_OW 428
37490: PUSH
37491: LD_VAR 0 1
37495: EQUAL
37496: PUSH
37497: LD_VAR 0 1
37501: PPUSH
37502: CALL_OW 314
37506: NOT
37507: AND
37508: IFFALSE 37434
// PlaySoundXY ( x , y , PlantMine ) ;
37510: LD_VAR 0 2
37514: PPUSH
37515: LD_VAR 0 3
37519: PPUSH
37520: LD_STRING PlantMine
37522: PPUSH
37523: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37527: LD_VAR 0 2
37531: PPUSH
37532: LD_VAR 0 3
37536: PPUSH
37537: LD_VAR 0 1
37541: PPUSH
37542: CALL_OW 255
37546: PPUSH
37547: LD_INT 0
37549: PPUSH
37550: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37554: LD_ADDR_EXP 133
37558: PUSH
37559: LD_EXP 133
37563: PPUSH
37564: LD_VAR 0 5
37568: PUSH
37569: LD_EXP 133
37573: PUSH
37574: LD_VAR 0 5
37578: ARRAY
37579: PUSH
37580: LD_INT 1
37582: PLUS
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PPUSH
37588: LD_VAR 0 2
37592: PUSH
37593: LD_VAR 0 3
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PPUSH
37602: CALL 43967 0 3
37606: ST_TO_ADDR
// result := true ;
37607: LD_ADDR_VAR 0 4
37611: PUSH
37612: LD_INT 1
37614: ST_TO_ADDR
// end ;
37615: LD_VAR 0 4
37619: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37620: LD_INT 0
37622: PPUSH
37623: PPUSH
37624: PPUSH
// if not unit in minersList then
37625: LD_VAR 0 1
37629: PUSH
37630: LD_EXP 132
37634: IN
37635: NOT
37636: IFFALSE 37640
// exit ;
37638: GO 38032
// index := GetElementIndex ( minersList , unit ) ;
37640: LD_ADDR_VAR 0 6
37644: PUSH
37645: LD_EXP 132
37649: PPUSH
37650: LD_VAR 0 1
37654: PPUSH
37655: CALL 43752 0 2
37659: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37660: LD_ADDR_VAR 0 5
37664: PUSH
37665: DOUBLE
37666: LD_EXP 133
37670: PUSH
37671: LD_VAR 0 6
37675: ARRAY
37676: INC
37677: ST_TO_ADDR
37678: LD_INT 1
37680: PUSH
37681: FOR_DOWNTO
37682: IFFALSE 37843
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37684: LD_EXP 133
37688: PUSH
37689: LD_VAR 0 6
37693: ARRAY
37694: PUSH
37695: LD_VAR 0 5
37699: ARRAY
37700: PUSH
37701: LD_INT 1
37703: ARRAY
37704: PUSH
37705: LD_VAR 0 2
37709: EQUAL
37710: PUSH
37711: LD_EXP 133
37715: PUSH
37716: LD_VAR 0 6
37720: ARRAY
37721: PUSH
37722: LD_VAR 0 5
37726: ARRAY
37727: PUSH
37728: LD_INT 2
37730: ARRAY
37731: PUSH
37732: LD_VAR 0 3
37736: EQUAL
37737: AND
37738: IFFALSE 37841
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37740: LD_EXP 133
37744: PUSH
37745: LD_VAR 0 6
37749: ARRAY
37750: PUSH
37751: LD_VAR 0 5
37755: ARRAY
37756: PUSH
37757: LD_INT 1
37759: ARRAY
37760: PPUSH
37761: LD_EXP 133
37765: PUSH
37766: LD_VAR 0 6
37770: ARRAY
37771: PUSH
37772: LD_VAR 0 5
37776: ARRAY
37777: PUSH
37778: LD_INT 2
37780: ARRAY
37781: PPUSH
37782: LD_VAR 0 1
37786: PPUSH
37787: CALL_OW 255
37791: PPUSH
37792: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37796: LD_ADDR_EXP 133
37800: PUSH
37801: LD_EXP 133
37805: PPUSH
37806: LD_VAR 0 6
37810: PPUSH
37811: LD_EXP 133
37815: PUSH
37816: LD_VAR 0 6
37820: ARRAY
37821: PPUSH
37822: LD_VAR 0 5
37826: PPUSH
37827: CALL_OW 3
37831: PPUSH
37832: CALL_OW 1
37836: ST_TO_ADDR
// exit ;
37837: POP
37838: POP
37839: GO 38032
// end ; end ;
37841: GO 37681
37843: POP
37844: POP
// for i := minerMinesList [ index ] downto 1 do
37845: LD_ADDR_VAR 0 5
37849: PUSH
37850: DOUBLE
37851: LD_EXP 133
37855: PUSH
37856: LD_VAR 0 6
37860: ARRAY
37861: INC
37862: ST_TO_ADDR
37863: LD_INT 1
37865: PUSH
37866: FOR_DOWNTO
37867: IFFALSE 38030
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37869: LD_EXP 133
37873: PUSH
37874: LD_VAR 0 6
37878: ARRAY
37879: PUSH
37880: LD_VAR 0 5
37884: ARRAY
37885: PUSH
37886: LD_INT 1
37888: ARRAY
37889: PPUSH
37890: LD_EXP 133
37894: PUSH
37895: LD_VAR 0 6
37899: ARRAY
37900: PUSH
37901: LD_VAR 0 5
37905: ARRAY
37906: PUSH
37907: LD_INT 2
37909: ARRAY
37910: PPUSH
37911: LD_VAR 0 2
37915: PPUSH
37916: LD_VAR 0 3
37920: PPUSH
37921: CALL_OW 298
37925: PUSH
37926: LD_INT 6
37928: LESS
37929: IFFALSE 38028
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37931: LD_EXP 133
37935: PUSH
37936: LD_VAR 0 6
37940: ARRAY
37941: PUSH
37942: LD_VAR 0 5
37946: ARRAY
37947: PUSH
37948: LD_INT 1
37950: ARRAY
37951: PPUSH
37952: LD_EXP 133
37956: PUSH
37957: LD_VAR 0 6
37961: ARRAY
37962: PUSH
37963: LD_VAR 0 5
37967: ARRAY
37968: PUSH
37969: LD_INT 2
37971: ARRAY
37972: PPUSH
37973: LD_VAR 0 1
37977: PPUSH
37978: CALL_OW 255
37982: PPUSH
37983: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37987: LD_ADDR_EXP 133
37991: PUSH
37992: LD_EXP 133
37996: PPUSH
37997: LD_VAR 0 6
38001: PPUSH
38002: LD_EXP 133
38006: PUSH
38007: LD_VAR 0 6
38011: ARRAY
38012: PPUSH
38013: LD_VAR 0 5
38017: PPUSH
38018: CALL_OW 3
38022: PPUSH
38023: CALL_OW 1
38027: ST_TO_ADDR
// end ; end ;
38028: GO 37866
38030: POP
38031: POP
// end ;
38032: LD_VAR 0 4
38036: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38037: LD_INT 0
38039: PPUSH
38040: PPUSH
38041: PPUSH
38042: PPUSH
38043: PPUSH
38044: PPUSH
38045: PPUSH
38046: PPUSH
38047: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38048: LD_VAR 0 1
38052: PPUSH
38053: CALL_OW 264
38057: PUSH
38058: LD_EXP 52
38062: EQUAL
38063: NOT
38064: PUSH
38065: LD_VAR 0 1
38069: PUSH
38070: LD_EXP 132
38074: IN
38075: NOT
38076: OR
38077: IFFALSE 38081
// exit ;
38079: GO 38403
// index := GetElementIndex ( minersList , unit ) ;
38081: LD_ADDR_VAR 0 6
38085: PUSH
38086: LD_EXP 132
38090: PPUSH
38091: LD_VAR 0 1
38095: PPUSH
38096: CALL 43752 0 2
38100: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38101: LD_ADDR_VAR 0 8
38105: PUSH
38106: LD_EXP 134
38110: PUSH
38111: LD_EXP 133
38115: PUSH
38116: LD_VAR 0 6
38120: ARRAY
38121: MINUS
38122: ST_TO_ADDR
// if not minesFreeAmount then
38123: LD_VAR 0 8
38127: NOT
38128: IFFALSE 38132
// exit ;
38130: GO 38403
// tmp := [ ] ;
38132: LD_ADDR_VAR 0 7
38136: PUSH
38137: EMPTY
38138: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38139: LD_ADDR_VAR 0 5
38143: PUSH
38144: DOUBLE
38145: LD_INT 1
38147: DEC
38148: ST_TO_ADDR
38149: LD_VAR 0 8
38153: PUSH
38154: FOR_TO
38155: IFFALSE 38350
// begin _d := rand ( 0 , 5 ) ;
38157: LD_ADDR_VAR 0 11
38161: PUSH
38162: LD_INT 0
38164: PPUSH
38165: LD_INT 5
38167: PPUSH
38168: CALL_OW 12
38172: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38173: LD_ADDR_VAR 0 12
38177: PUSH
38178: LD_INT 2
38180: PPUSH
38181: LD_INT 6
38183: PPUSH
38184: CALL_OW 12
38188: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38189: LD_ADDR_VAR 0 9
38193: PUSH
38194: LD_VAR 0 2
38198: PPUSH
38199: LD_VAR 0 11
38203: PPUSH
38204: LD_VAR 0 12
38208: PPUSH
38209: CALL_OW 272
38213: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38214: LD_ADDR_VAR 0 10
38218: PUSH
38219: LD_VAR 0 3
38223: PPUSH
38224: LD_VAR 0 11
38228: PPUSH
38229: LD_VAR 0 12
38233: PPUSH
38234: CALL_OW 273
38238: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38239: LD_VAR 0 9
38243: PPUSH
38244: LD_VAR 0 10
38248: PPUSH
38249: CALL_OW 488
38253: PUSH
38254: LD_VAR 0 9
38258: PUSH
38259: LD_VAR 0 10
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: LD_VAR 0 7
38272: IN
38273: NOT
38274: AND
38275: PUSH
38276: LD_VAR 0 9
38280: PPUSH
38281: LD_VAR 0 10
38285: PPUSH
38286: CALL_OW 458
38290: NOT
38291: AND
38292: IFFALSE 38334
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38294: LD_ADDR_VAR 0 7
38298: PUSH
38299: LD_VAR 0 7
38303: PPUSH
38304: LD_VAR 0 7
38308: PUSH
38309: LD_INT 1
38311: PLUS
38312: PPUSH
38313: LD_VAR 0 9
38317: PUSH
38318: LD_VAR 0 10
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PPUSH
38327: CALL_OW 1
38331: ST_TO_ADDR
38332: GO 38348
// i := i - 1 ;
38334: LD_ADDR_VAR 0 5
38338: PUSH
38339: LD_VAR 0 5
38343: PUSH
38344: LD_INT 1
38346: MINUS
38347: ST_TO_ADDR
// end ;
38348: GO 38154
38350: POP
38351: POP
// for i in tmp do
38352: LD_ADDR_VAR 0 5
38356: PUSH
38357: LD_VAR 0 7
38361: PUSH
38362: FOR_IN
38363: IFFALSE 38401
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38365: LD_VAR 0 1
38369: PPUSH
38370: LD_VAR 0 5
38374: PUSH
38375: LD_INT 1
38377: ARRAY
38378: PPUSH
38379: LD_VAR 0 5
38383: PUSH
38384: LD_INT 2
38386: ARRAY
38387: PPUSH
38388: CALL 37343 0 3
38392: NOT
38393: IFFALSE 38399
// exit ;
38395: POP
38396: POP
38397: GO 38403
38399: GO 38362
38401: POP
38402: POP
// end ;
38403: LD_VAR 0 4
38407: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38408: LD_INT 0
38410: PPUSH
38411: PPUSH
38412: PPUSH
38413: PPUSH
38414: PPUSH
38415: PPUSH
38416: PPUSH
// if not GetClass ( unit ) = class_sniper then
38417: LD_VAR 0 1
38421: PPUSH
38422: CALL_OW 257
38426: PUSH
38427: LD_INT 5
38429: EQUAL
38430: NOT
38431: IFFALSE 38435
// exit ;
38433: GO 38823
// dist := 8 ;
38435: LD_ADDR_VAR 0 5
38439: PUSH
38440: LD_INT 8
38442: ST_TO_ADDR
// viewRange := 12 ;
38443: LD_ADDR_VAR 0 7
38447: PUSH
38448: LD_INT 12
38450: ST_TO_ADDR
// side := GetSide ( unit ) ;
38451: LD_ADDR_VAR 0 6
38455: PUSH
38456: LD_VAR 0 1
38460: PPUSH
38461: CALL_OW 255
38465: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38466: LD_INT 61
38468: PPUSH
38469: LD_VAR 0 6
38473: PPUSH
38474: CALL_OW 321
38478: PUSH
38479: LD_INT 2
38481: EQUAL
38482: IFFALSE 38492
// viewRange := 16 ;
38484: LD_ADDR_VAR 0 7
38488: PUSH
38489: LD_INT 16
38491: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38492: LD_VAR 0 1
38496: PPUSH
38497: LD_VAR 0 2
38501: PPUSH
38502: LD_VAR 0 3
38506: PPUSH
38507: CALL_OW 297
38511: PUSH
38512: LD_VAR 0 5
38516: GREATER
38517: IFFALSE 38596
// begin ComMoveXY ( unit , x , y ) ;
38519: LD_VAR 0 1
38523: PPUSH
38524: LD_VAR 0 2
38528: PPUSH
38529: LD_VAR 0 3
38533: PPUSH
38534: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38538: LD_INT 35
38540: PPUSH
38541: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38545: LD_VAR 0 1
38549: PPUSH
38550: LD_VAR 0 2
38554: PPUSH
38555: LD_VAR 0 3
38559: PPUSH
38560: CALL 75038 0 3
38564: NOT
38565: IFFALSE 38569
// exit ;
38567: GO 38823
// until GetDistUnitXY ( unit , x , y ) < dist ;
38569: LD_VAR 0 1
38573: PPUSH
38574: LD_VAR 0 2
38578: PPUSH
38579: LD_VAR 0 3
38583: PPUSH
38584: CALL_OW 297
38588: PUSH
38589: LD_VAR 0 5
38593: LESS
38594: IFFALSE 38538
// end ; ComTurnXY ( unit , x , y ) ;
38596: LD_VAR 0 1
38600: PPUSH
38601: LD_VAR 0 2
38605: PPUSH
38606: LD_VAR 0 3
38610: PPUSH
38611: CALL_OW 118
// wait ( 5 ) ;
38615: LD_INT 5
38617: PPUSH
38618: CALL_OW 67
// _d := GetDir ( unit ) ;
38622: LD_ADDR_VAR 0 10
38626: PUSH
38627: LD_VAR 0 1
38631: PPUSH
38632: CALL_OW 254
38636: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38637: LD_ADDR_VAR 0 8
38641: PUSH
38642: LD_VAR 0 1
38646: PPUSH
38647: CALL_OW 250
38651: PPUSH
38652: LD_VAR 0 10
38656: PPUSH
38657: LD_VAR 0 5
38661: PPUSH
38662: CALL_OW 272
38666: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38667: LD_ADDR_VAR 0 9
38671: PUSH
38672: LD_VAR 0 1
38676: PPUSH
38677: CALL_OW 251
38681: PPUSH
38682: LD_VAR 0 10
38686: PPUSH
38687: LD_VAR 0 5
38691: PPUSH
38692: CALL_OW 273
38696: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38697: LD_VAR 0 8
38701: PPUSH
38702: LD_VAR 0 9
38706: PPUSH
38707: CALL_OW 488
38711: NOT
38712: IFFALSE 38716
// exit ;
38714: GO 38823
// ComAnimCustom ( unit , 1 ) ;
38716: LD_VAR 0 1
38720: PPUSH
38721: LD_INT 1
38723: PPUSH
38724: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38728: LD_VAR 0 8
38732: PPUSH
38733: LD_VAR 0 9
38737: PPUSH
38738: LD_VAR 0 6
38742: PPUSH
38743: LD_VAR 0 7
38747: PPUSH
38748: CALL_OW 330
// repeat wait ( 1 ) ;
38752: LD_INT 1
38754: PPUSH
38755: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
38759: LD_VAR 0 1
38763: PPUSH
38764: CALL_OW 316
38768: PUSH
38769: LD_VAR 0 1
38773: PPUSH
38774: CALL_OW 314
38778: OR
38779: PUSH
38780: LD_VAR 0 1
38784: PPUSH
38785: CALL_OW 302
38789: NOT
38790: OR
38791: PUSH
38792: LD_VAR 0 1
38796: PPUSH
38797: CALL_OW 301
38801: OR
38802: IFFALSE 38752
// RemoveSeeing ( _x , _y , side ) ;
38804: LD_VAR 0 8
38808: PPUSH
38809: LD_VAR 0 9
38813: PPUSH
38814: LD_VAR 0 6
38818: PPUSH
38819: CALL_OW 331
// end ; end_of_file
38823: LD_VAR 0 4
38827: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38828: LD_INT 0
38830: PPUSH
38831: PPUSH
// if exist_mode then
38832: LD_VAR 0 2
38836: IFFALSE 38861
// unit := CreateCharacter ( prefix & ident ) else
38838: LD_ADDR_VAR 0 5
38842: PUSH
38843: LD_VAR 0 3
38847: PUSH
38848: LD_VAR 0 1
38852: STR
38853: PPUSH
38854: CALL_OW 34
38858: ST_TO_ADDR
38859: GO 38876
// unit := NewCharacter ( ident ) ;
38861: LD_ADDR_VAR 0 5
38865: PUSH
38866: LD_VAR 0 1
38870: PPUSH
38871: CALL_OW 25
38875: ST_TO_ADDR
// result := unit ;
38876: LD_ADDR_VAR 0 4
38880: PUSH
38881: LD_VAR 0 5
38885: ST_TO_ADDR
// end ;
38886: LD_VAR 0 4
38890: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38891: LD_INT 0
38893: PPUSH
38894: PPUSH
// if not side or not nation then
38895: LD_VAR 0 1
38899: NOT
38900: PUSH
38901: LD_VAR 0 2
38905: NOT
38906: OR
38907: IFFALSE 38911
// exit ;
38909: GO 39679
// case nation of nation_american :
38911: LD_VAR 0 2
38915: PUSH
38916: LD_INT 1
38918: DOUBLE
38919: EQUAL
38920: IFTRUE 38924
38922: GO 39138
38924: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38925: LD_ADDR_VAR 0 4
38929: PUSH
38930: LD_INT 35
38932: PUSH
38933: LD_INT 45
38935: PUSH
38936: LD_INT 46
38938: PUSH
38939: LD_INT 47
38941: PUSH
38942: LD_INT 82
38944: PUSH
38945: LD_INT 83
38947: PUSH
38948: LD_INT 84
38950: PUSH
38951: LD_INT 85
38953: PUSH
38954: LD_INT 86
38956: PUSH
38957: LD_INT 1
38959: PUSH
38960: LD_INT 2
38962: PUSH
38963: LD_INT 6
38965: PUSH
38966: LD_INT 15
38968: PUSH
38969: LD_INT 16
38971: PUSH
38972: LD_INT 7
38974: PUSH
38975: LD_INT 12
38977: PUSH
38978: LD_INT 13
38980: PUSH
38981: LD_INT 10
38983: PUSH
38984: LD_INT 14
38986: PUSH
38987: LD_INT 20
38989: PUSH
38990: LD_INT 21
38992: PUSH
38993: LD_INT 22
38995: PUSH
38996: LD_INT 25
38998: PUSH
38999: LD_INT 32
39001: PUSH
39002: LD_INT 27
39004: PUSH
39005: LD_INT 36
39007: PUSH
39008: LD_INT 69
39010: PUSH
39011: LD_INT 39
39013: PUSH
39014: LD_INT 34
39016: PUSH
39017: LD_INT 40
39019: PUSH
39020: LD_INT 48
39022: PUSH
39023: LD_INT 49
39025: PUSH
39026: LD_INT 50
39028: PUSH
39029: LD_INT 51
39031: PUSH
39032: LD_INT 52
39034: PUSH
39035: LD_INT 53
39037: PUSH
39038: LD_INT 54
39040: PUSH
39041: LD_INT 55
39043: PUSH
39044: LD_INT 56
39046: PUSH
39047: LD_INT 57
39049: PUSH
39050: LD_INT 58
39052: PUSH
39053: LD_INT 59
39055: PUSH
39056: LD_INT 60
39058: PUSH
39059: LD_INT 61
39061: PUSH
39062: LD_INT 62
39064: PUSH
39065: LD_INT 80
39067: PUSH
39068: LD_INT 82
39070: PUSH
39071: LD_INT 83
39073: PUSH
39074: LD_INT 84
39076: PUSH
39077: LD_INT 85
39079: PUSH
39080: LD_INT 86
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: ST_TO_ADDR
39136: GO 39603
39138: LD_INT 2
39140: DOUBLE
39141: EQUAL
39142: IFTRUE 39146
39144: GO 39372
39146: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39147: LD_ADDR_VAR 0 4
39151: PUSH
39152: LD_INT 35
39154: PUSH
39155: LD_INT 45
39157: PUSH
39158: LD_INT 46
39160: PUSH
39161: LD_INT 47
39163: PUSH
39164: LD_INT 82
39166: PUSH
39167: LD_INT 83
39169: PUSH
39170: LD_INT 84
39172: PUSH
39173: LD_INT 85
39175: PUSH
39176: LD_INT 87
39178: PUSH
39179: LD_INT 70
39181: PUSH
39182: LD_INT 1
39184: PUSH
39185: LD_INT 11
39187: PUSH
39188: LD_INT 3
39190: PUSH
39191: LD_INT 4
39193: PUSH
39194: LD_INT 5
39196: PUSH
39197: LD_INT 6
39199: PUSH
39200: LD_INT 15
39202: PUSH
39203: LD_INT 18
39205: PUSH
39206: LD_INT 7
39208: PUSH
39209: LD_INT 17
39211: PUSH
39212: LD_INT 8
39214: PUSH
39215: LD_INT 20
39217: PUSH
39218: LD_INT 21
39220: PUSH
39221: LD_INT 22
39223: PUSH
39224: LD_INT 72
39226: PUSH
39227: LD_INT 26
39229: PUSH
39230: LD_INT 69
39232: PUSH
39233: LD_INT 39
39235: PUSH
39236: LD_INT 40
39238: PUSH
39239: LD_INT 41
39241: PUSH
39242: LD_INT 42
39244: PUSH
39245: LD_INT 43
39247: PUSH
39248: LD_INT 48
39250: PUSH
39251: LD_INT 49
39253: PUSH
39254: LD_INT 50
39256: PUSH
39257: LD_INT 51
39259: PUSH
39260: LD_INT 52
39262: PUSH
39263: LD_INT 53
39265: PUSH
39266: LD_INT 54
39268: PUSH
39269: LD_INT 55
39271: PUSH
39272: LD_INT 56
39274: PUSH
39275: LD_INT 60
39277: PUSH
39278: LD_INT 61
39280: PUSH
39281: LD_INT 62
39283: PUSH
39284: LD_INT 66
39286: PUSH
39287: LD_INT 67
39289: PUSH
39290: LD_INT 68
39292: PUSH
39293: LD_INT 81
39295: PUSH
39296: LD_INT 82
39298: PUSH
39299: LD_INT 83
39301: PUSH
39302: LD_INT 84
39304: PUSH
39305: LD_INT 85
39307: PUSH
39308: LD_INT 87
39310: PUSH
39311: LD_INT 88
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: ST_TO_ADDR
39370: GO 39603
39372: LD_INT 3
39374: DOUBLE
39375: EQUAL
39376: IFTRUE 39380
39378: GO 39602
39380: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39381: LD_ADDR_VAR 0 4
39385: PUSH
39386: LD_INT 46
39388: PUSH
39389: LD_INT 47
39391: PUSH
39392: LD_INT 1
39394: PUSH
39395: LD_INT 2
39397: PUSH
39398: LD_INT 82
39400: PUSH
39401: LD_INT 83
39403: PUSH
39404: LD_INT 84
39406: PUSH
39407: LD_INT 85
39409: PUSH
39410: LD_INT 86
39412: PUSH
39413: LD_INT 11
39415: PUSH
39416: LD_INT 9
39418: PUSH
39419: LD_INT 20
39421: PUSH
39422: LD_INT 19
39424: PUSH
39425: LD_INT 21
39427: PUSH
39428: LD_INT 24
39430: PUSH
39431: LD_INT 22
39433: PUSH
39434: LD_INT 25
39436: PUSH
39437: LD_INT 28
39439: PUSH
39440: LD_INT 29
39442: PUSH
39443: LD_INT 30
39445: PUSH
39446: LD_INT 31
39448: PUSH
39449: LD_INT 37
39451: PUSH
39452: LD_INT 38
39454: PUSH
39455: LD_INT 32
39457: PUSH
39458: LD_INT 27
39460: PUSH
39461: LD_INT 33
39463: PUSH
39464: LD_INT 69
39466: PUSH
39467: LD_INT 39
39469: PUSH
39470: LD_INT 34
39472: PUSH
39473: LD_INT 40
39475: PUSH
39476: LD_INT 71
39478: PUSH
39479: LD_INT 23
39481: PUSH
39482: LD_INT 44
39484: PUSH
39485: LD_INT 48
39487: PUSH
39488: LD_INT 49
39490: PUSH
39491: LD_INT 50
39493: PUSH
39494: LD_INT 51
39496: PUSH
39497: LD_INT 52
39499: PUSH
39500: LD_INT 53
39502: PUSH
39503: LD_INT 54
39505: PUSH
39506: LD_INT 55
39508: PUSH
39509: LD_INT 56
39511: PUSH
39512: LD_INT 57
39514: PUSH
39515: LD_INT 58
39517: PUSH
39518: LD_INT 59
39520: PUSH
39521: LD_INT 63
39523: PUSH
39524: LD_INT 64
39526: PUSH
39527: LD_INT 65
39529: PUSH
39530: LD_INT 82
39532: PUSH
39533: LD_INT 83
39535: PUSH
39536: LD_INT 84
39538: PUSH
39539: LD_INT 85
39541: PUSH
39542: LD_INT 86
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: ST_TO_ADDR
39600: GO 39603
39602: POP
// if state > - 1 and state < 3 then
39603: LD_VAR 0 3
39607: PUSH
39608: LD_INT 1
39610: NEG
39611: GREATER
39612: PUSH
39613: LD_VAR 0 3
39617: PUSH
39618: LD_INT 3
39620: LESS
39621: AND
39622: IFFALSE 39679
// for i in result do
39624: LD_ADDR_VAR 0 5
39628: PUSH
39629: LD_VAR 0 4
39633: PUSH
39634: FOR_IN
39635: IFFALSE 39677
// if GetTech ( i , side ) <> state then
39637: LD_VAR 0 5
39641: PPUSH
39642: LD_VAR 0 1
39646: PPUSH
39647: CALL_OW 321
39651: PUSH
39652: LD_VAR 0 3
39656: NONEQUAL
39657: IFFALSE 39675
// result := result diff i ;
39659: LD_ADDR_VAR 0 4
39663: PUSH
39664: LD_VAR 0 4
39668: PUSH
39669: LD_VAR 0 5
39673: DIFF
39674: ST_TO_ADDR
39675: GO 39634
39677: POP
39678: POP
// end ;
39679: LD_VAR 0 4
39683: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39684: LD_INT 0
39686: PPUSH
39687: PPUSH
39688: PPUSH
// result := true ;
39689: LD_ADDR_VAR 0 3
39693: PUSH
39694: LD_INT 1
39696: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39697: LD_ADDR_VAR 0 5
39701: PUSH
39702: LD_VAR 0 2
39706: PPUSH
39707: CALL_OW 480
39711: ST_TO_ADDR
// if not tmp then
39712: LD_VAR 0 5
39716: NOT
39717: IFFALSE 39721
// exit ;
39719: GO 39770
// for i in tmp do
39721: LD_ADDR_VAR 0 4
39725: PUSH
39726: LD_VAR 0 5
39730: PUSH
39731: FOR_IN
39732: IFFALSE 39768
// if GetTech ( i , side ) <> state_researched then
39734: LD_VAR 0 4
39738: PPUSH
39739: LD_VAR 0 1
39743: PPUSH
39744: CALL_OW 321
39748: PUSH
39749: LD_INT 2
39751: NONEQUAL
39752: IFFALSE 39766
// begin result := false ;
39754: LD_ADDR_VAR 0 3
39758: PUSH
39759: LD_INT 0
39761: ST_TO_ADDR
// exit ;
39762: POP
39763: POP
39764: GO 39770
// end ;
39766: GO 39731
39768: POP
39769: POP
// end ;
39770: LD_VAR 0 3
39774: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39775: LD_INT 0
39777: PPUSH
39778: PPUSH
39779: PPUSH
39780: PPUSH
39781: PPUSH
39782: PPUSH
39783: PPUSH
39784: PPUSH
39785: PPUSH
39786: PPUSH
39787: PPUSH
39788: PPUSH
39789: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39790: LD_VAR 0 1
39794: NOT
39795: PUSH
39796: LD_VAR 0 1
39800: PPUSH
39801: CALL_OW 257
39805: PUSH
39806: LD_INT 9
39808: NONEQUAL
39809: OR
39810: IFFALSE 39814
// exit ;
39812: GO 40387
// side := GetSide ( unit ) ;
39814: LD_ADDR_VAR 0 9
39818: PUSH
39819: LD_VAR 0 1
39823: PPUSH
39824: CALL_OW 255
39828: ST_TO_ADDR
// tech_space := tech_spacanom ;
39829: LD_ADDR_VAR 0 12
39833: PUSH
39834: LD_INT 29
39836: ST_TO_ADDR
// tech_time := tech_taurad ;
39837: LD_ADDR_VAR 0 13
39841: PUSH
39842: LD_INT 28
39844: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39845: LD_ADDR_VAR 0 11
39849: PUSH
39850: LD_VAR 0 1
39854: PPUSH
39855: CALL_OW 310
39859: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39860: LD_VAR 0 11
39864: PPUSH
39865: CALL_OW 247
39869: PUSH
39870: LD_INT 2
39872: EQUAL
39873: IFFALSE 39877
// exit ;
39875: GO 40387
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39877: LD_ADDR_VAR 0 8
39881: PUSH
39882: LD_INT 81
39884: PUSH
39885: LD_VAR 0 9
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 3
39896: PUSH
39897: LD_INT 21
39899: PUSH
39900: LD_INT 3
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PPUSH
39915: CALL_OW 69
39919: ST_TO_ADDR
// if not tmp then
39920: LD_VAR 0 8
39924: NOT
39925: IFFALSE 39929
// exit ;
39927: GO 40387
// if in_unit then
39929: LD_VAR 0 11
39933: IFFALSE 39957
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39935: LD_ADDR_VAR 0 10
39939: PUSH
39940: LD_VAR 0 8
39944: PPUSH
39945: LD_VAR 0 11
39949: PPUSH
39950: CALL_OW 74
39954: ST_TO_ADDR
39955: GO 39977
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39957: LD_ADDR_VAR 0 10
39961: PUSH
39962: LD_VAR 0 8
39966: PPUSH
39967: LD_VAR 0 1
39971: PPUSH
39972: CALL_OW 74
39976: ST_TO_ADDR
// if not enemy then
39977: LD_VAR 0 10
39981: NOT
39982: IFFALSE 39986
// exit ;
39984: GO 40387
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39986: LD_VAR 0 11
39990: PUSH
39991: LD_VAR 0 11
39995: PPUSH
39996: LD_VAR 0 10
40000: PPUSH
40001: CALL_OW 296
40005: PUSH
40006: LD_INT 13
40008: GREATER
40009: AND
40010: PUSH
40011: LD_VAR 0 1
40015: PPUSH
40016: LD_VAR 0 10
40020: PPUSH
40021: CALL_OW 296
40025: PUSH
40026: LD_INT 12
40028: GREATER
40029: OR
40030: IFFALSE 40034
// exit ;
40032: GO 40387
// missile := [ 1 ] ;
40034: LD_ADDR_VAR 0 14
40038: PUSH
40039: LD_INT 1
40041: PUSH
40042: EMPTY
40043: LIST
40044: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40045: LD_VAR 0 9
40049: PPUSH
40050: LD_VAR 0 12
40054: PPUSH
40055: CALL_OW 325
40059: IFFALSE 40088
// missile := Replace ( missile , missile + 1 , 2 ) ;
40061: LD_ADDR_VAR 0 14
40065: PUSH
40066: LD_VAR 0 14
40070: PPUSH
40071: LD_VAR 0 14
40075: PUSH
40076: LD_INT 1
40078: PLUS
40079: PPUSH
40080: LD_INT 2
40082: PPUSH
40083: CALL_OW 1
40087: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40088: LD_VAR 0 9
40092: PPUSH
40093: LD_VAR 0 13
40097: PPUSH
40098: CALL_OW 325
40102: PUSH
40103: LD_VAR 0 10
40107: PPUSH
40108: CALL_OW 255
40112: PPUSH
40113: LD_VAR 0 13
40117: PPUSH
40118: CALL_OW 325
40122: NOT
40123: AND
40124: IFFALSE 40153
// missile := Replace ( missile , missile + 1 , 3 ) ;
40126: LD_ADDR_VAR 0 14
40130: PUSH
40131: LD_VAR 0 14
40135: PPUSH
40136: LD_VAR 0 14
40140: PUSH
40141: LD_INT 1
40143: PLUS
40144: PPUSH
40145: LD_INT 3
40147: PPUSH
40148: CALL_OW 1
40152: ST_TO_ADDR
// if missile < 2 then
40153: LD_VAR 0 14
40157: PUSH
40158: LD_INT 2
40160: LESS
40161: IFFALSE 40165
// exit ;
40163: GO 40387
// x := GetX ( enemy ) ;
40165: LD_ADDR_VAR 0 4
40169: PUSH
40170: LD_VAR 0 10
40174: PPUSH
40175: CALL_OW 250
40179: ST_TO_ADDR
// y := GetY ( enemy ) ;
40180: LD_ADDR_VAR 0 5
40184: PUSH
40185: LD_VAR 0 10
40189: PPUSH
40190: CALL_OW 251
40194: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40195: LD_ADDR_VAR 0 6
40199: PUSH
40200: LD_VAR 0 4
40204: PUSH
40205: LD_INT 1
40207: NEG
40208: PPUSH
40209: LD_INT 1
40211: PPUSH
40212: CALL_OW 12
40216: PLUS
40217: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40218: LD_ADDR_VAR 0 7
40222: PUSH
40223: LD_VAR 0 5
40227: PUSH
40228: LD_INT 1
40230: NEG
40231: PPUSH
40232: LD_INT 1
40234: PPUSH
40235: CALL_OW 12
40239: PLUS
40240: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40241: LD_VAR 0 6
40245: PPUSH
40246: LD_VAR 0 7
40250: PPUSH
40251: CALL_OW 488
40255: NOT
40256: IFFALSE 40278
// begin _x := x ;
40258: LD_ADDR_VAR 0 6
40262: PUSH
40263: LD_VAR 0 4
40267: ST_TO_ADDR
// _y := y ;
40268: LD_ADDR_VAR 0 7
40272: PUSH
40273: LD_VAR 0 5
40277: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40278: LD_ADDR_VAR 0 3
40282: PUSH
40283: LD_INT 1
40285: PPUSH
40286: LD_VAR 0 14
40290: PPUSH
40291: CALL_OW 12
40295: ST_TO_ADDR
// case i of 1 :
40296: LD_VAR 0 3
40300: PUSH
40301: LD_INT 1
40303: DOUBLE
40304: EQUAL
40305: IFTRUE 40309
40307: GO 40326
40309: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40310: LD_VAR 0 1
40314: PPUSH
40315: LD_VAR 0 10
40319: PPUSH
40320: CALL_OW 115
40324: GO 40387
40326: LD_INT 2
40328: DOUBLE
40329: EQUAL
40330: IFTRUE 40334
40332: GO 40356
40334: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40335: LD_VAR 0 1
40339: PPUSH
40340: LD_VAR 0 6
40344: PPUSH
40345: LD_VAR 0 7
40349: PPUSH
40350: CALL_OW 153
40354: GO 40387
40356: LD_INT 3
40358: DOUBLE
40359: EQUAL
40360: IFTRUE 40364
40362: GO 40386
40364: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40365: LD_VAR 0 1
40369: PPUSH
40370: LD_VAR 0 6
40374: PPUSH
40375: LD_VAR 0 7
40379: PPUSH
40380: CALL_OW 154
40384: GO 40387
40386: POP
// end ;
40387: LD_VAR 0 2
40391: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40392: LD_INT 0
40394: PPUSH
40395: PPUSH
40396: PPUSH
40397: PPUSH
40398: PPUSH
40399: PPUSH
// if not unit or not building then
40400: LD_VAR 0 1
40404: NOT
40405: PUSH
40406: LD_VAR 0 2
40410: NOT
40411: OR
40412: IFFALSE 40416
// exit ;
40414: GO 40574
// x := GetX ( building ) ;
40416: LD_ADDR_VAR 0 5
40420: PUSH
40421: LD_VAR 0 2
40425: PPUSH
40426: CALL_OW 250
40430: ST_TO_ADDR
// y := GetY ( building ) ;
40431: LD_ADDR_VAR 0 6
40435: PUSH
40436: LD_VAR 0 2
40440: PPUSH
40441: CALL_OW 251
40445: ST_TO_ADDR
// for i = 0 to 5 do
40446: LD_ADDR_VAR 0 4
40450: PUSH
40451: DOUBLE
40452: LD_INT 0
40454: DEC
40455: ST_TO_ADDR
40456: LD_INT 5
40458: PUSH
40459: FOR_TO
40460: IFFALSE 40572
// begin _x := ShiftX ( x , i , 3 ) ;
40462: LD_ADDR_VAR 0 7
40466: PUSH
40467: LD_VAR 0 5
40471: PPUSH
40472: LD_VAR 0 4
40476: PPUSH
40477: LD_INT 3
40479: PPUSH
40480: CALL_OW 272
40484: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40485: LD_ADDR_VAR 0 8
40489: PUSH
40490: LD_VAR 0 6
40494: PPUSH
40495: LD_VAR 0 4
40499: PPUSH
40500: LD_INT 3
40502: PPUSH
40503: CALL_OW 273
40507: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40508: LD_VAR 0 7
40512: PPUSH
40513: LD_VAR 0 8
40517: PPUSH
40518: CALL_OW 488
40522: NOT
40523: IFFALSE 40527
// continue ;
40525: GO 40459
// if HexInfo ( _x , _y ) = 0 then
40527: LD_VAR 0 7
40531: PPUSH
40532: LD_VAR 0 8
40536: PPUSH
40537: CALL_OW 428
40541: PUSH
40542: LD_INT 0
40544: EQUAL
40545: IFFALSE 40570
// begin ComMoveXY ( unit , _x , _y ) ;
40547: LD_VAR 0 1
40551: PPUSH
40552: LD_VAR 0 7
40556: PPUSH
40557: LD_VAR 0 8
40561: PPUSH
40562: CALL_OW 111
// exit ;
40566: POP
40567: POP
40568: GO 40574
// end ; end ;
40570: GO 40459
40572: POP
40573: POP
// end ;
40574: LD_VAR 0 3
40578: RET
// export function ScanBase ( side , base_area ) ; begin
40579: LD_INT 0
40581: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40582: LD_ADDR_VAR 0 3
40586: PUSH
40587: LD_VAR 0 2
40591: PPUSH
40592: LD_INT 81
40594: PUSH
40595: LD_VAR 0 1
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PPUSH
40604: CALL_OW 70
40608: ST_TO_ADDR
// end ;
40609: LD_VAR 0 3
40613: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40614: LD_INT 0
40616: PPUSH
40617: PPUSH
40618: PPUSH
40619: PPUSH
// result := false ;
40620: LD_ADDR_VAR 0 2
40624: PUSH
40625: LD_INT 0
40627: ST_TO_ADDR
// side := GetSide ( unit ) ;
40628: LD_ADDR_VAR 0 3
40632: PUSH
40633: LD_VAR 0 1
40637: PPUSH
40638: CALL_OW 255
40642: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40643: LD_ADDR_VAR 0 4
40647: PUSH
40648: LD_VAR 0 1
40652: PPUSH
40653: CALL_OW 248
40657: ST_TO_ADDR
// case nat of 1 :
40658: LD_VAR 0 4
40662: PUSH
40663: LD_INT 1
40665: DOUBLE
40666: EQUAL
40667: IFTRUE 40671
40669: GO 40682
40671: POP
// tech := tech_lassight ; 2 :
40672: LD_ADDR_VAR 0 5
40676: PUSH
40677: LD_INT 12
40679: ST_TO_ADDR
40680: GO 40721
40682: LD_INT 2
40684: DOUBLE
40685: EQUAL
40686: IFTRUE 40690
40688: GO 40701
40690: POP
// tech := tech_mortar ; 3 :
40691: LD_ADDR_VAR 0 5
40695: PUSH
40696: LD_INT 41
40698: ST_TO_ADDR
40699: GO 40721
40701: LD_INT 3
40703: DOUBLE
40704: EQUAL
40705: IFTRUE 40709
40707: GO 40720
40709: POP
// tech := tech_bazooka ; end ;
40710: LD_ADDR_VAR 0 5
40714: PUSH
40715: LD_INT 44
40717: ST_TO_ADDR
40718: GO 40721
40720: POP
// if Researched ( side , tech ) then
40721: LD_VAR 0 3
40725: PPUSH
40726: LD_VAR 0 5
40730: PPUSH
40731: CALL_OW 325
40735: IFFALSE 40762
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40737: LD_ADDR_VAR 0 2
40741: PUSH
40742: LD_INT 5
40744: PUSH
40745: LD_INT 8
40747: PUSH
40748: LD_INT 9
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: LIST
40755: PUSH
40756: LD_VAR 0 4
40760: ARRAY
40761: ST_TO_ADDR
// end ;
40762: LD_VAR 0 2
40766: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40767: LD_INT 0
40769: PPUSH
40770: PPUSH
40771: PPUSH
// if not mines then
40772: LD_VAR 0 2
40776: NOT
40777: IFFALSE 40781
// exit ;
40779: GO 40925
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40781: LD_ADDR_VAR 0 5
40785: PUSH
40786: LD_INT 81
40788: PUSH
40789: LD_VAR 0 1
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 3
40800: PUSH
40801: LD_INT 21
40803: PUSH
40804: LD_INT 3
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PPUSH
40819: CALL_OW 69
40823: ST_TO_ADDR
// for i in mines do
40824: LD_ADDR_VAR 0 4
40828: PUSH
40829: LD_VAR 0 2
40833: PUSH
40834: FOR_IN
40835: IFFALSE 40923
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40837: LD_VAR 0 4
40841: PUSH
40842: LD_INT 1
40844: ARRAY
40845: PPUSH
40846: LD_VAR 0 4
40850: PUSH
40851: LD_INT 2
40853: ARRAY
40854: PPUSH
40855: CALL_OW 458
40859: NOT
40860: IFFALSE 40864
// continue ;
40862: GO 40834
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40864: LD_VAR 0 4
40868: PUSH
40869: LD_INT 1
40871: ARRAY
40872: PPUSH
40873: LD_VAR 0 4
40877: PUSH
40878: LD_INT 2
40880: ARRAY
40881: PPUSH
40882: CALL_OW 428
40886: PUSH
40887: LD_VAR 0 5
40891: IN
40892: IFFALSE 40921
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40894: LD_VAR 0 4
40898: PUSH
40899: LD_INT 1
40901: ARRAY
40902: PPUSH
40903: LD_VAR 0 4
40907: PUSH
40908: LD_INT 2
40910: ARRAY
40911: PPUSH
40912: LD_VAR 0 1
40916: PPUSH
40917: CALL_OW 456
// end ;
40921: GO 40834
40923: POP
40924: POP
// end ;
40925: LD_VAR 0 3
40929: RET
// export function Count ( array ) ; var i ; begin
40930: LD_INT 0
40932: PPUSH
40933: PPUSH
// result := 0 ;
40934: LD_ADDR_VAR 0 2
40938: PUSH
40939: LD_INT 0
40941: ST_TO_ADDR
// for i in array do
40942: LD_ADDR_VAR 0 3
40946: PUSH
40947: LD_VAR 0 1
40951: PUSH
40952: FOR_IN
40953: IFFALSE 40977
// if i then
40955: LD_VAR 0 3
40959: IFFALSE 40975
// result := result + 1 ;
40961: LD_ADDR_VAR 0 2
40965: PUSH
40966: LD_VAR 0 2
40970: PUSH
40971: LD_INT 1
40973: PLUS
40974: ST_TO_ADDR
40975: GO 40952
40977: POP
40978: POP
// end ;
40979: LD_VAR 0 2
40983: RET
// export function IsEmpty ( building ) ; begin
40984: LD_INT 0
40986: PPUSH
// if not building then
40987: LD_VAR 0 1
40991: NOT
40992: IFFALSE 40996
// exit ;
40994: GO 41039
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40996: LD_ADDR_VAR 0 2
41000: PUSH
41001: LD_VAR 0 1
41005: PUSH
41006: LD_INT 22
41008: PUSH
41009: LD_VAR 0 1
41013: PPUSH
41014: CALL_OW 255
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 58
41025: PUSH
41026: EMPTY
41027: LIST
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PPUSH
41033: CALL_OW 69
41037: IN
41038: ST_TO_ADDR
// end ;
41039: LD_VAR 0 2
41043: RET
// export function IsNotFull ( building ) ; var places ; begin
41044: LD_INT 0
41046: PPUSH
41047: PPUSH
// if not building then
41048: LD_VAR 0 1
41052: NOT
41053: IFFALSE 41057
// exit ;
41055: GO 41228
// result := false ;
41057: LD_ADDR_VAR 0 2
41061: PUSH
41062: LD_INT 0
41064: ST_TO_ADDR
// places := 0 ;
41065: LD_ADDR_VAR 0 3
41069: PUSH
41070: LD_INT 0
41072: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
41073: LD_VAR 0 1
41077: PPUSH
41078: CALL_OW 266
41082: PUSH
41083: LD_INT 0
41085: DOUBLE
41086: EQUAL
41087: IFTRUE 41145
41089: LD_INT 1
41091: DOUBLE
41092: EQUAL
41093: IFTRUE 41145
41095: LD_INT 6
41097: DOUBLE
41098: EQUAL
41099: IFTRUE 41145
41101: LD_INT 7
41103: DOUBLE
41104: EQUAL
41105: IFTRUE 41145
41107: LD_INT 8
41109: DOUBLE
41110: EQUAL
41111: IFTRUE 41145
41113: LD_INT 4
41115: DOUBLE
41116: EQUAL
41117: IFTRUE 41145
41119: LD_INT 5
41121: DOUBLE
41122: EQUAL
41123: IFTRUE 41145
41125: LD_INT 2
41127: DOUBLE
41128: EQUAL
41129: IFTRUE 41145
41131: LD_INT 3
41133: DOUBLE
41134: EQUAL
41135: IFTRUE 41145
41137: LD_INT 35
41139: DOUBLE
41140: EQUAL
41141: IFTRUE 41145
41143: GO 41156
41145: POP
// places := 6 ; b_bunker , b_breastwork :
41146: LD_ADDR_VAR 0 3
41150: PUSH
41151: LD_INT 6
41153: ST_TO_ADDR
41154: GO 41201
41156: LD_INT 32
41158: DOUBLE
41159: EQUAL
41160: IFTRUE 41170
41162: LD_INT 31
41164: DOUBLE
41165: EQUAL
41166: IFTRUE 41170
41168: GO 41181
41170: POP
// places := 1 ; b_control_tower :
41171: LD_ADDR_VAR 0 3
41175: PUSH
41176: LD_INT 1
41178: ST_TO_ADDR
41179: GO 41201
41181: LD_INT 36
41183: DOUBLE
41184: EQUAL
41185: IFTRUE 41189
41187: GO 41200
41189: POP
// places := 3 ; end ;
41190: LD_ADDR_VAR 0 3
41194: PUSH
41195: LD_INT 3
41197: ST_TO_ADDR
41198: GO 41201
41200: POP
// if places then
41201: LD_VAR 0 3
41205: IFFALSE 41228
// result := UnitsInside ( building ) < places ;
41207: LD_ADDR_VAR 0 2
41211: PUSH
41212: LD_VAR 0 1
41216: PPUSH
41217: CALL_OW 313
41221: PUSH
41222: LD_VAR 0 3
41226: LESS
41227: ST_TO_ADDR
// end ;
41228: LD_VAR 0 2
41232: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41233: LD_INT 0
41235: PPUSH
41236: PPUSH
41237: PPUSH
41238: PPUSH
// tmp := [ ] ;
41239: LD_ADDR_VAR 0 3
41243: PUSH
41244: EMPTY
41245: ST_TO_ADDR
// list := [ ] ;
41246: LD_ADDR_VAR 0 5
41250: PUSH
41251: EMPTY
41252: ST_TO_ADDR
// for i = 16 to 25 do
41253: LD_ADDR_VAR 0 4
41257: PUSH
41258: DOUBLE
41259: LD_INT 16
41261: DEC
41262: ST_TO_ADDR
41263: LD_INT 25
41265: PUSH
41266: FOR_TO
41267: IFFALSE 41340
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41269: LD_ADDR_VAR 0 3
41273: PUSH
41274: LD_VAR 0 3
41278: PUSH
41279: LD_INT 22
41281: PUSH
41282: LD_VAR 0 1
41286: PPUSH
41287: CALL_OW 255
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 91
41298: PUSH
41299: LD_VAR 0 1
41303: PUSH
41304: LD_INT 6
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 30
41314: PUSH
41315: LD_VAR 0 4
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: LIST
41328: PUSH
41329: EMPTY
41330: LIST
41331: PPUSH
41332: CALL_OW 69
41336: ADD
41337: ST_TO_ADDR
41338: GO 41266
41340: POP
41341: POP
// for i = 1 to tmp do
41342: LD_ADDR_VAR 0 4
41346: PUSH
41347: DOUBLE
41348: LD_INT 1
41350: DEC
41351: ST_TO_ADDR
41352: LD_VAR 0 3
41356: PUSH
41357: FOR_TO
41358: IFFALSE 41446
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41360: LD_ADDR_VAR 0 5
41364: PUSH
41365: LD_VAR 0 5
41369: PUSH
41370: LD_VAR 0 3
41374: PUSH
41375: LD_VAR 0 4
41379: ARRAY
41380: PPUSH
41381: CALL_OW 266
41385: PUSH
41386: LD_VAR 0 3
41390: PUSH
41391: LD_VAR 0 4
41395: ARRAY
41396: PPUSH
41397: CALL_OW 250
41401: PUSH
41402: LD_VAR 0 3
41406: PUSH
41407: LD_VAR 0 4
41411: ARRAY
41412: PPUSH
41413: CALL_OW 251
41417: PUSH
41418: LD_VAR 0 3
41422: PUSH
41423: LD_VAR 0 4
41427: ARRAY
41428: PPUSH
41429: CALL_OW 254
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: PUSH
41440: EMPTY
41441: LIST
41442: ADD
41443: ST_TO_ADDR
41444: GO 41357
41446: POP
41447: POP
// result := list ;
41448: LD_ADDR_VAR 0 2
41452: PUSH
41453: LD_VAR 0 5
41457: ST_TO_ADDR
// end ;
41458: LD_VAR 0 2
41462: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41463: LD_INT 0
41465: PPUSH
41466: PPUSH
41467: PPUSH
41468: PPUSH
41469: PPUSH
41470: PPUSH
41471: PPUSH
// if not factory then
41472: LD_VAR 0 1
41476: NOT
41477: IFFALSE 41481
// exit ;
41479: GO 42074
// if control = control_apeman then
41481: LD_VAR 0 4
41485: PUSH
41486: LD_INT 5
41488: EQUAL
41489: IFFALSE 41598
// begin tmp := UnitsInside ( factory ) ;
41491: LD_ADDR_VAR 0 8
41495: PUSH
41496: LD_VAR 0 1
41500: PPUSH
41501: CALL_OW 313
41505: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41506: LD_VAR 0 8
41510: PPUSH
41511: LD_INT 25
41513: PUSH
41514: LD_INT 12
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PPUSH
41521: CALL_OW 72
41525: NOT
41526: IFFALSE 41536
// control := control_manual ;
41528: LD_ADDR_VAR 0 4
41532: PUSH
41533: LD_INT 1
41535: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41536: LD_ADDR_VAR 0 8
41540: PUSH
41541: LD_VAR 0 1
41545: PPUSH
41546: CALL 41233 0 1
41550: ST_TO_ADDR
// if tmp then
41551: LD_VAR 0 8
41555: IFFALSE 41598
// begin for i in tmp do
41557: LD_ADDR_VAR 0 7
41561: PUSH
41562: LD_VAR 0 8
41566: PUSH
41567: FOR_IN
41568: IFFALSE 41596
// if i [ 1 ] = b_ext_radio then
41570: LD_VAR 0 7
41574: PUSH
41575: LD_INT 1
41577: ARRAY
41578: PUSH
41579: LD_INT 22
41581: EQUAL
41582: IFFALSE 41594
// begin control := control_remote ;
41584: LD_ADDR_VAR 0 4
41588: PUSH
41589: LD_INT 2
41591: ST_TO_ADDR
// break ;
41592: GO 41596
// end ;
41594: GO 41567
41596: POP
41597: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41598: LD_VAR 0 1
41602: PPUSH
41603: LD_VAR 0 2
41607: PPUSH
41608: LD_VAR 0 3
41612: PPUSH
41613: LD_VAR 0 4
41617: PPUSH
41618: LD_VAR 0 5
41622: PPUSH
41623: CALL_OW 448
41627: IFFALSE 41662
// begin result := [ chassis , engine , control , weapon ] ;
41629: LD_ADDR_VAR 0 6
41633: PUSH
41634: LD_VAR 0 2
41638: PUSH
41639: LD_VAR 0 3
41643: PUSH
41644: LD_VAR 0 4
41648: PUSH
41649: LD_VAR 0 5
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: ST_TO_ADDR
// exit ;
41660: GO 42074
// end ; _chassis := AvailableChassisList ( factory ) ;
41662: LD_ADDR_VAR 0 9
41666: PUSH
41667: LD_VAR 0 1
41671: PPUSH
41672: CALL_OW 475
41676: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41677: LD_ADDR_VAR 0 11
41681: PUSH
41682: LD_VAR 0 1
41686: PPUSH
41687: CALL_OW 476
41691: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41692: LD_ADDR_VAR 0 12
41696: PUSH
41697: LD_VAR 0 1
41701: PPUSH
41702: CALL_OW 477
41706: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41707: LD_ADDR_VAR 0 10
41711: PUSH
41712: LD_VAR 0 1
41716: PPUSH
41717: CALL_OW 478
41721: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41722: LD_VAR 0 9
41726: NOT
41727: PUSH
41728: LD_VAR 0 11
41732: NOT
41733: OR
41734: PUSH
41735: LD_VAR 0 12
41739: NOT
41740: OR
41741: PUSH
41742: LD_VAR 0 10
41746: NOT
41747: OR
41748: IFFALSE 41783
// begin result := [ chassis , engine , control , weapon ] ;
41750: LD_ADDR_VAR 0 6
41754: PUSH
41755: LD_VAR 0 2
41759: PUSH
41760: LD_VAR 0 3
41764: PUSH
41765: LD_VAR 0 4
41769: PUSH
41770: LD_VAR 0 5
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: ST_TO_ADDR
// exit ;
41781: GO 42074
// end ; if not chassis in _chassis then
41783: LD_VAR 0 2
41787: PUSH
41788: LD_VAR 0 9
41792: IN
41793: NOT
41794: IFFALSE 41820
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41796: LD_ADDR_VAR 0 2
41800: PUSH
41801: LD_VAR 0 9
41805: PUSH
41806: LD_INT 1
41808: PPUSH
41809: LD_VAR 0 9
41813: PPUSH
41814: CALL_OW 12
41818: ARRAY
41819: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41820: LD_VAR 0 2
41824: PPUSH
41825: LD_VAR 0 3
41829: PPUSH
41830: CALL 42079 0 2
41834: NOT
41835: IFFALSE 41894
// repeat engine := _engine [ 1 ] ;
41837: LD_ADDR_VAR 0 3
41841: PUSH
41842: LD_VAR 0 11
41846: PUSH
41847: LD_INT 1
41849: ARRAY
41850: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41851: LD_ADDR_VAR 0 11
41855: PUSH
41856: LD_VAR 0 11
41860: PPUSH
41861: LD_INT 1
41863: PPUSH
41864: CALL_OW 3
41868: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41869: LD_VAR 0 2
41873: PPUSH
41874: LD_VAR 0 3
41878: PPUSH
41879: CALL 42079 0 2
41883: PUSH
41884: LD_VAR 0 11
41888: PUSH
41889: EMPTY
41890: EQUAL
41891: OR
41892: IFFALSE 41837
// if not control in _control then
41894: LD_VAR 0 4
41898: PUSH
41899: LD_VAR 0 12
41903: IN
41904: NOT
41905: IFFALSE 41931
// control := _control [ rand ( 1 , _control ) ] ;
41907: LD_ADDR_VAR 0 4
41911: PUSH
41912: LD_VAR 0 12
41916: PUSH
41917: LD_INT 1
41919: PPUSH
41920: LD_VAR 0 12
41924: PPUSH
41925: CALL_OW 12
41929: ARRAY
41930: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41931: LD_VAR 0 2
41935: PPUSH
41936: LD_VAR 0 5
41940: PPUSH
41941: CALL 42299 0 2
41945: NOT
41946: IFFALSE 42005
// repeat weapon := _weapon [ 1 ] ;
41948: LD_ADDR_VAR 0 5
41952: PUSH
41953: LD_VAR 0 10
41957: PUSH
41958: LD_INT 1
41960: ARRAY
41961: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41962: LD_ADDR_VAR 0 10
41966: PUSH
41967: LD_VAR 0 10
41971: PPUSH
41972: LD_INT 1
41974: PPUSH
41975: CALL_OW 3
41979: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41980: LD_VAR 0 2
41984: PPUSH
41985: LD_VAR 0 5
41989: PPUSH
41990: CALL 42299 0 2
41994: PUSH
41995: LD_VAR 0 10
41999: PUSH
42000: EMPTY
42001: EQUAL
42002: OR
42003: IFFALSE 41948
// result := [ ] ;
42005: LD_ADDR_VAR 0 6
42009: PUSH
42010: EMPTY
42011: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42012: LD_VAR 0 1
42016: PPUSH
42017: LD_VAR 0 2
42021: PPUSH
42022: LD_VAR 0 3
42026: PPUSH
42027: LD_VAR 0 4
42031: PPUSH
42032: LD_VAR 0 5
42036: PPUSH
42037: CALL_OW 448
42041: IFFALSE 42074
// result := [ chassis , engine , control , weapon ] ;
42043: LD_ADDR_VAR 0 6
42047: PUSH
42048: LD_VAR 0 2
42052: PUSH
42053: LD_VAR 0 3
42057: PUSH
42058: LD_VAR 0 4
42062: PUSH
42063: LD_VAR 0 5
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: ST_TO_ADDR
// end ;
42074: LD_VAR 0 6
42078: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42079: LD_INT 0
42081: PPUSH
// if not chassis or not engine then
42082: LD_VAR 0 1
42086: NOT
42087: PUSH
42088: LD_VAR 0 2
42092: NOT
42093: OR
42094: IFFALSE 42098
// exit ;
42096: GO 42294
// case engine of engine_solar :
42098: LD_VAR 0 2
42102: PUSH
42103: LD_INT 2
42105: DOUBLE
42106: EQUAL
42107: IFTRUE 42111
42109: GO 42149
42111: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42112: LD_ADDR_VAR 0 3
42116: PUSH
42117: LD_INT 11
42119: PUSH
42120: LD_INT 12
42122: PUSH
42123: LD_INT 13
42125: PUSH
42126: LD_INT 14
42128: PUSH
42129: LD_INT 1
42131: PUSH
42132: LD_INT 2
42134: PUSH
42135: LD_INT 3
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: ST_TO_ADDR
42147: GO 42278
42149: LD_INT 1
42151: DOUBLE
42152: EQUAL
42153: IFTRUE 42157
42155: GO 42219
42157: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42158: LD_ADDR_VAR 0 3
42162: PUSH
42163: LD_INT 11
42165: PUSH
42166: LD_INT 12
42168: PUSH
42169: LD_INT 13
42171: PUSH
42172: LD_INT 14
42174: PUSH
42175: LD_INT 1
42177: PUSH
42178: LD_INT 2
42180: PUSH
42181: LD_INT 3
42183: PUSH
42184: LD_INT 4
42186: PUSH
42187: LD_INT 5
42189: PUSH
42190: LD_INT 21
42192: PUSH
42193: LD_INT 23
42195: PUSH
42196: LD_INT 22
42198: PUSH
42199: LD_INT 24
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: ST_TO_ADDR
42217: GO 42278
42219: LD_INT 3
42221: DOUBLE
42222: EQUAL
42223: IFTRUE 42227
42225: GO 42277
42227: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42228: LD_ADDR_VAR 0 3
42232: PUSH
42233: LD_INT 13
42235: PUSH
42236: LD_INT 14
42238: PUSH
42239: LD_INT 2
42241: PUSH
42242: LD_INT 3
42244: PUSH
42245: LD_INT 4
42247: PUSH
42248: LD_INT 5
42250: PUSH
42251: LD_INT 21
42253: PUSH
42254: LD_INT 22
42256: PUSH
42257: LD_INT 23
42259: PUSH
42260: LD_INT 24
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: ST_TO_ADDR
42275: GO 42278
42277: POP
// result := ( chassis in result ) ;
42278: LD_ADDR_VAR 0 3
42282: PUSH
42283: LD_VAR 0 1
42287: PUSH
42288: LD_VAR 0 3
42292: IN
42293: ST_TO_ADDR
// end ;
42294: LD_VAR 0 3
42298: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42299: LD_INT 0
42301: PPUSH
// if not chassis or not weapon then
42302: LD_VAR 0 1
42306: NOT
42307: PUSH
42308: LD_VAR 0 2
42312: NOT
42313: OR
42314: IFFALSE 42318
// exit ;
42316: GO 43380
// case weapon of us_machine_gun :
42318: LD_VAR 0 2
42322: PUSH
42323: LD_INT 2
42325: DOUBLE
42326: EQUAL
42327: IFTRUE 42331
42329: GO 42361
42331: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42332: LD_ADDR_VAR 0 3
42336: PUSH
42337: LD_INT 1
42339: PUSH
42340: LD_INT 2
42342: PUSH
42343: LD_INT 3
42345: PUSH
42346: LD_INT 4
42348: PUSH
42349: LD_INT 5
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: ST_TO_ADDR
42359: GO 43364
42361: LD_INT 3
42363: DOUBLE
42364: EQUAL
42365: IFTRUE 42369
42367: GO 42399
42369: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42370: LD_ADDR_VAR 0 3
42374: PUSH
42375: LD_INT 1
42377: PUSH
42378: LD_INT 2
42380: PUSH
42381: LD_INT 3
42383: PUSH
42384: LD_INT 4
42386: PUSH
42387: LD_INT 5
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: ST_TO_ADDR
42397: GO 43364
42399: LD_INT 11
42401: DOUBLE
42402: EQUAL
42403: IFTRUE 42407
42405: GO 42437
42407: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42408: LD_ADDR_VAR 0 3
42412: PUSH
42413: LD_INT 1
42415: PUSH
42416: LD_INT 2
42418: PUSH
42419: LD_INT 3
42421: PUSH
42422: LD_INT 4
42424: PUSH
42425: LD_INT 5
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: ST_TO_ADDR
42435: GO 43364
42437: LD_INT 4
42439: DOUBLE
42440: EQUAL
42441: IFTRUE 42445
42443: GO 42471
42445: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42446: LD_ADDR_VAR 0 3
42450: PUSH
42451: LD_INT 2
42453: PUSH
42454: LD_INT 3
42456: PUSH
42457: LD_INT 4
42459: PUSH
42460: LD_INT 5
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: ST_TO_ADDR
42469: GO 43364
42471: LD_INT 5
42473: DOUBLE
42474: EQUAL
42475: IFTRUE 42479
42477: GO 42505
42479: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42480: LD_ADDR_VAR 0 3
42484: PUSH
42485: LD_INT 2
42487: PUSH
42488: LD_INT 3
42490: PUSH
42491: LD_INT 4
42493: PUSH
42494: LD_INT 5
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: ST_TO_ADDR
42503: GO 43364
42505: LD_INT 9
42507: DOUBLE
42508: EQUAL
42509: IFTRUE 42513
42511: GO 42539
42513: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42514: LD_ADDR_VAR 0 3
42518: PUSH
42519: LD_INT 2
42521: PUSH
42522: LD_INT 3
42524: PUSH
42525: LD_INT 4
42527: PUSH
42528: LD_INT 5
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: ST_TO_ADDR
42537: GO 43364
42539: LD_INT 7
42541: DOUBLE
42542: EQUAL
42543: IFTRUE 42547
42545: GO 42573
42547: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42548: LD_ADDR_VAR 0 3
42552: PUSH
42553: LD_INT 2
42555: PUSH
42556: LD_INT 3
42558: PUSH
42559: LD_INT 4
42561: PUSH
42562: LD_INT 5
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: ST_TO_ADDR
42571: GO 43364
42573: LD_INT 12
42575: DOUBLE
42576: EQUAL
42577: IFTRUE 42581
42579: GO 42607
42581: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42582: LD_ADDR_VAR 0 3
42586: PUSH
42587: LD_INT 2
42589: PUSH
42590: LD_INT 3
42592: PUSH
42593: LD_INT 4
42595: PUSH
42596: LD_INT 5
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: ST_TO_ADDR
42605: GO 43364
42607: LD_INT 13
42609: DOUBLE
42610: EQUAL
42611: IFTRUE 42615
42613: GO 42641
42615: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42616: LD_ADDR_VAR 0 3
42620: PUSH
42621: LD_INT 2
42623: PUSH
42624: LD_INT 3
42626: PUSH
42627: LD_INT 4
42629: PUSH
42630: LD_INT 5
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: ST_TO_ADDR
42639: GO 43364
42641: LD_INT 14
42643: DOUBLE
42644: EQUAL
42645: IFTRUE 42649
42647: GO 42667
42649: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42650: LD_ADDR_VAR 0 3
42654: PUSH
42655: LD_INT 4
42657: PUSH
42658: LD_INT 5
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: ST_TO_ADDR
42665: GO 43364
42667: LD_INT 6
42669: DOUBLE
42670: EQUAL
42671: IFTRUE 42675
42673: GO 42693
42675: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42676: LD_ADDR_VAR 0 3
42680: PUSH
42681: LD_INT 4
42683: PUSH
42684: LD_INT 5
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: ST_TO_ADDR
42691: GO 43364
42693: LD_INT 10
42695: DOUBLE
42696: EQUAL
42697: IFTRUE 42701
42699: GO 42719
42701: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42702: LD_ADDR_VAR 0 3
42706: PUSH
42707: LD_INT 4
42709: PUSH
42710: LD_INT 5
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: ST_TO_ADDR
42717: GO 43364
42719: LD_INT 22
42721: DOUBLE
42722: EQUAL
42723: IFTRUE 42727
42725: GO 42753
42727: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42728: LD_ADDR_VAR 0 3
42732: PUSH
42733: LD_INT 11
42735: PUSH
42736: LD_INT 12
42738: PUSH
42739: LD_INT 13
42741: PUSH
42742: LD_INT 14
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: ST_TO_ADDR
42751: GO 43364
42753: LD_INT 23
42755: DOUBLE
42756: EQUAL
42757: IFTRUE 42761
42759: GO 42787
42761: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42762: LD_ADDR_VAR 0 3
42766: PUSH
42767: LD_INT 11
42769: PUSH
42770: LD_INT 12
42772: PUSH
42773: LD_INT 13
42775: PUSH
42776: LD_INT 14
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: ST_TO_ADDR
42785: GO 43364
42787: LD_INT 24
42789: DOUBLE
42790: EQUAL
42791: IFTRUE 42795
42793: GO 42821
42795: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42796: LD_ADDR_VAR 0 3
42800: PUSH
42801: LD_INT 11
42803: PUSH
42804: LD_INT 12
42806: PUSH
42807: LD_INT 13
42809: PUSH
42810: LD_INT 14
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: ST_TO_ADDR
42819: GO 43364
42821: LD_INT 30
42823: DOUBLE
42824: EQUAL
42825: IFTRUE 42829
42827: GO 42855
42829: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42830: LD_ADDR_VAR 0 3
42834: PUSH
42835: LD_INT 11
42837: PUSH
42838: LD_INT 12
42840: PUSH
42841: LD_INT 13
42843: PUSH
42844: LD_INT 14
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: ST_TO_ADDR
42853: GO 43364
42855: LD_INT 25
42857: DOUBLE
42858: EQUAL
42859: IFTRUE 42863
42861: GO 42881
42863: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42864: LD_ADDR_VAR 0 3
42868: PUSH
42869: LD_INT 13
42871: PUSH
42872: LD_INT 14
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: ST_TO_ADDR
42879: GO 43364
42881: LD_INT 27
42883: DOUBLE
42884: EQUAL
42885: IFTRUE 42889
42887: GO 42907
42889: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42890: LD_ADDR_VAR 0 3
42894: PUSH
42895: LD_INT 13
42897: PUSH
42898: LD_INT 14
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: ST_TO_ADDR
42905: GO 43364
42907: LD_EXP 50
42911: DOUBLE
42912: EQUAL
42913: IFTRUE 42917
42915: GO 42943
42917: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42918: LD_ADDR_VAR 0 3
42922: PUSH
42923: LD_INT 11
42925: PUSH
42926: LD_INT 12
42928: PUSH
42929: LD_INT 13
42931: PUSH
42932: LD_INT 14
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: ST_TO_ADDR
42941: GO 43364
42943: LD_INT 28
42945: DOUBLE
42946: EQUAL
42947: IFTRUE 42951
42949: GO 42969
42951: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42952: LD_ADDR_VAR 0 3
42956: PUSH
42957: LD_INT 13
42959: PUSH
42960: LD_INT 14
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: ST_TO_ADDR
42967: GO 43364
42969: LD_INT 29
42971: DOUBLE
42972: EQUAL
42973: IFTRUE 42977
42975: GO 42995
42977: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42978: LD_ADDR_VAR 0 3
42982: PUSH
42983: LD_INT 13
42985: PUSH
42986: LD_INT 14
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: ST_TO_ADDR
42993: GO 43364
42995: LD_INT 31
42997: DOUBLE
42998: EQUAL
42999: IFTRUE 43003
43001: GO 43021
43003: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43004: LD_ADDR_VAR 0 3
43008: PUSH
43009: LD_INT 13
43011: PUSH
43012: LD_INT 14
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: ST_TO_ADDR
43019: GO 43364
43021: LD_INT 26
43023: DOUBLE
43024: EQUAL
43025: IFTRUE 43029
43027: GO 43047
43029: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43030: LD_ADDR_VAR 0 3
43034: PUSH
43035: LD_INT 13
43037: PUSH
43038: LD_INT 14
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: ST_TO_ADDR
43045: GO 43364
43047: LD_INT 42
43049: DOUBLE
43050: EQUAL
43051: IFTRUE 43055
43053: GO 43081
43055: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43056: LD_ADDR_VAR 0 3
43060: PUSH
43061: LD_INT 21
43063: PUSH
43064: LD_INT 22
43066: PUSH
43067: LD_INT 23
43069: PUSH
43070: LD_INT 24
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: ST_TO_ADDR
43079: GO 43364
43081: LD_INT 43
43083: DOUBLE
43084: EQUAL
43085: IFTRUE 43089
43087: GO 43115
43089: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43090: LD_ADDR_VAR 0 3
43094: PUSH
43095: LD_INT 21
43097: PUSH
43098: LD_INT 22
43100: PUSH
43101: LD_INT 23
43103: PUSH
43104: LD_INT 24
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: ST_TO_ADDR
43113: GO 43364
43115: LD_INT 44
43117: DOUBLE
43118: EQUAL
43119: IFTRUE 43123
43121: GO 43149
43123: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43124: LD_ADDR_VAR 0 3
43128: PUSH
43129: LD_INT 21
43131: PUSH
43132: LD_INT 22
43134: PUSH
43135: LD_INT 23
43137: PUSH
43138: LD_INT 24
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: ST_TO_ADDR
43147: GO 43364
43149: LD_INT 45
43151: DOUBLE
43152: EQUAL
43153: IFTRUE 43157
43155: GO 43183
43157: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43158: LD_ADDR_VAR 0 3
43162: PUSH
43163: LD_INT 21
43165: PUSH
43166: LD_INT 22
43168: PUSH
43169: LD_INT 23
43171: PUSH
43172: LD_INT 24
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: ST_TO_ADDR
43181: GO 43364
43183: LD_INT 49
43185: DOUBLE
43186: EQUAL
43187: IFTRUE 43191
43189: GO 43217
43191: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43192: LD_ADDR_VAR 0 3
43196: PUSH
43197: LD_INT 21
43199: PUSH
43200: LD_INT 22
43202: PUSH
43203: LD_INT 23
43205: PUSH
43206: LD_INT 24
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: ST_TO_ADDR
43215: GO 43364
43217: LD_INT 51
43219: DOUBLE
43220: EQUAL
43221: IFTRUE 43225
43223: GO 43251
43225: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43226: LD_ADDR_VAR 0 3
43230: PUSH
43231: LD_INT 21
43233: PUSH
43234: LD_INT 22
43236: PUSH
43237: LD_INT 23
43239: PUSH
43240: LD_INT 24
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: ST_TO_ADDR
43249: GO 43364
43251: LD_INT 52
43253: DOUBLE
43254: EQUAL
43255: IFTRUE 43259
43257: GO 43285
43259: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43260: LD_ADDR_VAR 0 3
43264: PUSH
43265: LD_INT 21
43267: PUSH
43268: LD_INT 22
43270: PUSH
43271: LD_INT 23
43273: PUSH
43274: LD_INT 24
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: ST_TO_ADDR
43283: GO 43364
43285: LD_INT 53
43287: DOUBLE
43288: EQUAL
43289: IFTRUE 43293
43291: GO 43311
43293: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43294: LD_ADDR_VAR 0 3
43298: PUSH
43299: LD_INT 23
43301: PUSH
43302: LD_INT 24
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: ST_TO_ADDR
43309: GO 43364
43311: LD_INT 46
43313: DOUBLE
43314: EQUAL
43315: IFTRUE 43319
43317: GO 43337
43319: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43320: LD_ADDR_VAR 0 3
43324: PUSH
43325: LD_INT 23
43327: PUSH
43328: LD_INT 24
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: ST_TO_ADDR
43335: GO 43364
43337: LD_INT 47
43339: DOUBLE
43340: EQUAL
43341: IFTRUE 43345
43343: GO 43363
43345: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43346: LD_ADDR_VAR 0 3
43350: PUSH
43351: LD_INT 23
43353: PUSH
43354: LD_INT 24
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: ST_TO_ADDR
43361: GO 43364
43363: POP
// result := ( chassis in result ) ;
43364: LD_ADDR_VAR 0 3
43368: PUSH
43369: LD_VAR 0 1
43373: PUSH
43374: LD_VAR 0 3
43378: IN
43379: ST_TO_ADDR
// end ;
43380: LD_VAR 0 3
43384: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43385: LD_INT 0
43387: PPUSH
43388: PPUSH
43389: PPUSH
43390: PPUSH
43391: PPUSH
43392: PPUSH
43393: PPUSH
// result := array ;
43394: LD_ADDR_VAR 0 5
43398: PUSH
43399: LD_VAR 0 1
43403: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43404: LD_VAR 0 1
43408: NOT
43409: PUSH
43410: LD_VAR 0 2
43414: NOT
43415: OR
43416: PUSH
43417: LD_VAR 0 3
43421: NOT
43422: OR
43423: PUSH
43424: LD_VAR 0 2
43428: PUSH
43429: LD_VAR 0 1
43433: GREATER
43434: OR
43435: PUSH
43436: LD_VAR 0 3
43440: PUSH
43441: LD_VAR 0 1
43445: GREATER
43446: OR
43447: IFFALSE 43451
// exit ;
43449: GO 43747
// if direction then
43451: LD_VAR 0 4
43455: IFFALSE 43519
// begin d := 1 ;
43457: LD_ADDR_VAR 0 9
43461: PUSH
43462: LD_INT 1
43464: ST_TO_ADDR
// if i_from > i_to then
43465: LD_VAR 0 2
43469: PUSH
43470: LD_VAR 0 3
43474: GREATER
43475: IFFALSE 43501
// length := ( array - i_from ) + i_to else
43477: LD_ADDR_VAR 0 11
43481: PUSH
43482: LD_VAR 0 1
43486: PUSH
43487: LD_VAR 0 2
43491: MINUS
43492: PUSH
43493: LD_VAR 0 3
43497: PLUS
43498: ST_TO_ADDR
43499: GO 43517
// length := i_to - i_from ;
43501: LD_ADDR_VAR 0 11
43505: PUSH
43506: LD_VAR 0 3
43510: PUSH
43511: LD_VAR 0 2
43515: MINUS
43516: ST_TO_ADDR
// end else
43517: GO 43580
// begin d := - 1 ;
43519: LD_ADDR_VAR 0 9
43523: PUSH
43524: LD_INT 1
43526: NEG
43527: ST_TO_ADDR
// if i_from > i_to then
43528: LD_VAR 0 2
43532: PUSH
43533: LD_VAR 0 3
43537: GREATER
43538: IFFALSE 43558
// length := i_from - i_to else
43540: LD_ADDR_VAR 0 11
43544: PUSH
43545: LD_VAR 0 2
43549: PUSH
43550: LD_VAR 0 3
43554: MINUS
43555: ST_TO_ADDR
43556: GO 43580
// length := ( array - i_to ) + i_from ;
43558: LD_ADDR_VAR 0 11
43562: PUSH
43563: LD_VAR 0 1
43567: PUSH
43568: LD_VAR 0 3
43572: MINUS
43573: PUSH
43574: LD_VAR 0 2
43578: PLUS
43579: ST_TO_ADDR
// end ; if not length then
43580: LD_VAR 0 11
43584: NOT
43585: IFFALSE 43589
// exit ;
43587: GO 43747
// tmp := array ;
43589: LD_ADDR_VAR 0 10
43593: PUSH
43594: LD_VAR 0 1
43598: ST_TO_ADDR
// for i = 1 to length do
43599: LD_ADDR_VAR 0 6
43603: PUSH
43604: DOUBLE
43605: LD_INT 1
43607: DEC
43608: ST_TO_ADDR
43609: LD_VAR 0 11
43613: PUSH
43614: FOR_TO
43615: IFFALSE 43735
// begin for j = 1 to array do
43617: LD_ADDR_VAR 0 7
43621: PUSH
43622: DOUBLE
43623: LD_INT 1
43625: DEC
43626: ST_TO_ADDR
43627: LD_VAR 0 1
43631: PUSH
43632: FOR_TO
43633: IFFALSE 43721
// begin k := j + d ;
43635: LD_ADDR_VAR 0 8
43639: PUSH
43640: LD_VAR 0 7
43644: PUSH
43645: LD_VAR 0 9
43649: PLUS
43650: ST_TO_ADDR
// if k > array then
43651: LD_VAR 0 8
43655: PUSH
43656: LD_VAR 0 1
43660: GREATER
43661: IFFALSE 43671
// k := 1 ;
43663: LD_ADDR_VAR 0 8
43667: PUSH
43668: LD_INT 1
43670: ST_TO_ADDR
// if not k then
43671: LD_VAR 0 8
43675: NOT
43676: IFFALSE 43688
// k := array ;
43678: LD_ADDR_VAR 0 8
43682: PUSH
43683: LD_VAR 0 1
43687: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43688: LD_ADDR_VAR 0 10
43692: PUSH
43693: LD_VAR 0 10
43697: PPUSH
43698: LD_VAR 0 8
43702: PPUSH
43703: LD_VAR 0 1
43707: PUSH
43708: LD_VAR 0 7
43712: ARRAY
43713: PPUSH
43714: CALL_OW 1
43718: ST_TO_ADDR
// end ;
43719: GO 43632
43721: POP
43722: POP
// array := tmp ;
43723: LD_ADDR_VAR 0 1
43727: PUSH
43728: LD_VAR 0 10
43732: ST_TO_ADDR
// end ;
43733: GO 43614
43735: POP
43736: POP
// result := array ;
43737: LD_ADDR_VAR 0 5
43741: PUSH
43742: LD_VAR 0 1
43746: ST_TO_ADDR
// end ;
43747: LD_VAR 0 5
43751: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43752: LD_INT 0
43754: PPUSH
43755: PPUSH
// result := 0 ;
43756: LD_ADDR_VAR 0 3
43760: PUSH
43761: LD_INT 0
43763: ST_TO_ADDR
// if not array or not value in array then
43764: LD_VAR 0 1
43768: NOT
43769: PUSH
43770: LD_VAR 0 2
43774: PUSH
43775: LD_VAR 0 1
43779: IN
43780: NOT
43781: OR
43782: IFFALSE 43786
// exit ;
43784: GO 43840
// for i = 1 to array do
43786: LD_ADDR_VAR 0 4
43790: PUSH
43791: DOUBLE
43792: LD_INT 1
43794: DEC
43795: ST_TO_ADDR
43796: LD_VAR 0 1
43800: PUSH
43801: FOR_TO
43802: IFFALSE 43838
// if value = array [ i ] then
43804: LD_VAR 0 2
43808: PUSH
43809: LD_VAR 0 1
43813: PUSH
43814: LD_VAR 0 4
43818: ARRAY
43819: EQUAL
43820: IFFALSE 43836
// begin result := i ;
43822: LD_ADDR_VAR 0 3
43826: PUSH
43827: LD_VAR 0 4
43831: ST_TO_ADDR
// exit ;
43832: POP
43833: POP
43834: GO 43840
// end ;
43836: GO 43801
43838: POP
43839: POP
// end ;
43840: LD_VAR 0 3
43844: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43845: LD_INT 0
43847: PPUSH
// vc_chassis := chassis ;
43848: LD_ADDR_OWVAR 37
43852: PUSH
43853: LD_VAR 0 1
43857: ST_TO_ADDR
// vc_engine := engine ;
43858: LD_ADDR_OWVAR 39
43862: PUSH
43863: LD_VAR 0 2
43867: ST_TO_ADDR
// vc_control := control ;
43868: LD_ADDR_OWVAR 38
43872: PUSH
43873: LD_VAR 0 3
43877: ST_TO_ADDR
// vc_weapon := weapon ;
43878: LD_ADDR_OWVAR 40
43882: PUSH
43883: LD_VAR 0 4
43887: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43888: LD_ADDR_OWVAR 41
43892: PUSH
43893: LD_VAR 0 5
43897: ST_TO_ADDR
// end ;
43898: LD_VAR 0 6
43902: RET
// export function WantPlant ( unit ) ; var task ; begin
43903: LD_INT 0
43905: PPUSH
43906: PPUSH
// result := false ;
43907: LD_ADDR_VAR 0 2
43911: PUSH
43912: LD_INT 0
43914: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43915: LD_ADDR_VAR 0 3
43919: PUSH
43920: LD_VAR 0 1
43924: PPUSH
43925: CALL_OW 437
43929: ST_TO_ADDR
// if task then
43930: LD_VAR 0 3
43934: IFFALSE 43962
// if task [ 1 ] [ 1 ] = p then
43936: LD_VAR 0 3
43940: PUSH
43941: LD_INT 1
43943: ARRAY
43944: PUSH
43945: LD_INT 1
43947: ARRAY
43948: PUSH
43949: LD_STRING p
43951: EQUAL
43952: IFFALSE 43962
// result := true ;
43954: LD_ADDR_VAR 0 2
43958: PUSH
43959: LD_INT 1
43961: ST_TO_ADDR
// end ;
43962: LD_VAR 0 2
43966: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43967: LD_INT 0
43969: PPUSH
43970: PPUSH
43971: PPUSH
43972: PPUSH
// if pos < 1 then
43973: LD_VAR 0 2
43977: PUSH
43978: LD_INT 1
43980: LESS
43981: IFFALSE 43985
// exit ;
43983: GO 44288
// if pos = 1 then
43985: LD_VAR 0 2
43989: PUSH
43990: LD_INT 1
43992: EQUAL
43993: IFFALSE 44026
// result := Replace ( arr , pos [ 1 ] , value ) else
43995: LD_ADDR_VAR 0 4
43999: PUSH
44000: LD_VAR 0 1
44004: PPUSH
44005: LD_VAR 0 2
44009: PUSH
44010: LD_INT 1
44012: ARRAY
44013: PPUSH
44014: LD_VAR 0 3
44018: PPUSH
44019: CALL_OW 1
44023: ST_TO_ADDR
44024: GO 44288
// begin tmp := arr ;
44026: LD_ADDR_VAR 0 6
44030: PUSH
44031: LD_VAR 0 1
44035: ST_TO_ADDR
// s_arr := [ tmp ] ;
44036: LD_ADDR_VAR 0 7
44040: PUSH
44041: LD_VAR 0 6
44045: PUSH
44046: EMPTY
44047: LIST
44048: ST_TO_ADDR
// for i = 1 to pos - 1 do
44049: LD_ADDR_VAR 0 5
44053: PUSH
44054: DOUBLE
44055: LD_INT 1
44057: DEC
44058: ST_TO_ADDR
44059: LD_VAR 0 2
44063: PUSH
44064: LD_INT 1
44066: MINUS
44067: PUSH
44068: FOR_TO
44069: IFFALSE 44114
// begin tmp := tmp [ pos [ i ] ] ;
44071: LD_ADDR_VAR 0 6
44075: PUSH
44076: LD_VAR 0 6
44080: PUSH
44081: LD_VAR 0 2
44085: PUSH
44086: LD_VAR 0 5
44090: ARRAY
44091: ARRAY
44092: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44093: LD_ADDR_VAR 0 7
44097: PUSH
44098: LD_VAR 0 7
44102: PUSH
44103: LD_VAR 0 6
44107: PUSH
44108: EMPTY
44109: LIST
44110: ADD
44111: ST_TO_ADDR
// end ;
44112: GO 44068
44114: POP
44115: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44116: LD_ADDR_VAR 0 6
44120: PUSH
44121: LD_VAR 0 6
44125: PPUSH
44126: LD_VAR 0 2
44130: PUSH
44131: LD_VAR 0 2
44135: ARRAY
44136: PPUSH
44137: LD_VAR 0 3
44141: PPUSH
44142: CALL_OW 1
44146: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44147: LD_ADDR_VAR 0 7
44151: PUSH
44152: LD_VAR 0 7
44156: PPUSH
44157: LD_VAR 0 7
44161: PPUSH
44162: LD_VAR 0 6
44166: PPUSH
44167: CALL_OW 1
44171: ST_TO_ADDR
// for i = s_arr downto 2 do
44172: LD_ADDR_VAR 0 5
44176: PUSH
44177: DOUBLE
44178: LD_VAR 0 7
44182: INC
44183: ST_TO_ADDR
44184: LD_INT 2
44186: PUSH
44187: FOR_DOWNTO
44188: IFFALSE 44272
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44190: LD_ADDR_VAR 0 6
44194: PUSH
44195: LD_VAR 0 7
44199: PUSH
44200: LD_VAR 0 5
44204: PUSH
44205: LD_INT 1
44207: MINUS
44208: ARRAY
44209: PPUSH
44210: LD_VAR 0 2
44214: PUSH
44215: LD_VAR 0 5
44219: PUSH
44220: LD_INT 1
44222: MINUS
44223: ARRAY
44224: PPUSH
44225: LD_VAR 0 7
44229: PUSH
44230: LD_VAR 0 5
44234: ARRAY
44235: PPUSH
44236: CALL_OW 1
44240: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44241: LD_ADDR_VAR 0 7
44245: PUSH
44246: LD_VAR 0 7
44250: PPUSH
44251: LD_VAR 0 5
44255: PUSH
44256: LD_INT 1
44258: MINUS
44259: PPUSH
44260: LD_VAR 0 6
44264: PPUSH
44265: CALL_OW 1
44269: ST_TO_ADDR
// end ;
44270: GO 44187
44272: POP
44273: POP
// result := s_arr [ 1 ] ;
44274: LD_ADDR_VAR 0 4
44278: PUSH
44279: LD_VAR 0 7
44283: PUSH
44284: LD_INT 1
44286: ARRAY
44287: ST_TO_ADDR
// end ; end ;
44288: LD_VAR 0 4
44292: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44293: LD_INT 0
44295: PPUSH
44296: PPUSH
// if not list then
44297: LD_VAR 0 1
44301: NOT
44302: IFFALSE 44306
// exit ;
44304: GO 44397
// i := list [ pos1 ] ;
44306: LD_ADDR_VAR 0 5
44310: PUSH
44311: LD_VAR 0 1
44315: PUSH
44316: LD_VAR 0 2
44320: ARRAY
44321: ST_TO_ADDR
// if not i then
44322: LD_VAR 0 5
44326: NOT
44327: IFFALSE 44331
// exit ;
44329: GO 44397
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44331: LD_ADDR_VAR 0 1
44335: PUSH
44336: LD_VAR 0 1
44340: PPUSH
44341: LD_VAR 0 2
44345: PPUSH
44346: LD_VAR 0 1
44350: PUSH
44351: LD_VAR 0 3
44355: ARRAY
44356: PPUSH
44357: CALL_OW 1
44361: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44362: LD_ADDR_VAR 0 1
44366: PUSH
44367: LD_VAR 0 1
44371: PPUSH
44372: LD_VAR 0 3
44376: PPUSH
44377: LD_VAR 0 5
44381: PPUSH
44382: CALL_OW 1
44386: ST_TO_ADDR
// result := list ;
44387: LD_ADDR_VAR 0 4
44391: PUSH
44392: LD_VAR 0 1
44396: ST_TO_ADDR
// end ;
44397: LD_VAR 0 4
44401: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44402: LD_INT 0
44404: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44405: LD_ADDR_VAR 0 5
44409: PUSH
44410: LD_VAR 0 1
44414: PPUSH
44415: CALL_OW 250
44419: PPUSH
44420: LD_VAR 0 1
44424: PPUSH
44425: CALL_OW 251
44429: PPUSH
44430: LD_VAR 0 2
44434: PPUSH
44435: LD_VAR 0 3
44439: PPUSH
44440: LD_VAR 0 4
44444: PPUSH
44445: CALL 44455 0 5
44449: ST_TO_ADDR
// end ;
44450: LD_VAR 0 5
44454: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44455: LD_INT 0
44457: PPUSH
44458: PPUSH
44459: PPUSH
44460: PPUSH
// if not list then
44461: LD_VAR 0 3
44465: NOT
44466: IFFALSE 44470
// exit ;
44468: GO 44858
// result := [ ] ;
44470: LD_ADDR_VAR 0 6
44474: PUSH
44475: EMPTY
44476: ST_TO_ADDR
// for i in list do
44477: LD_ADDR_VAR 0 7
44481: PUSH
44482: LD_VAR 0 3
44486: PUSH
44487: FOR_IN
44488: IFFALSE 44690
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44490: LD_ADDR_VAR 0 9
44494: PUSH
44495: LD_VAR 0 7
44499: PPUSH
44500: LD_VAR 0 1
44504: PPUSH
44505: LD_VAR 0 2
44509: PPUSH
44510: CALL_OW 297
44514: ST_TO_ADDR
// if not result then
44515: LD_VAR 0 6
44519: NOT
44520: IFFALSE 44546
// result := [ [ i , tmp ] ] else
44522: LD_ADDR_VAR 0 6
44526: PUSH
44527: LD_VAR 0 7
44531: PUSH
44532: LD_VAR 0 9
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: EMPTY
44542: LIST
44543: ST_TO_ADDR
44544: GO 44688
// begin if result [ result ] [ 2 ] < tmp then
44546: LD_VAR 0 6
44550: PUSH
44551: LD_VAR 0 6
44555: ARRAY
44556: PUSH
44557: LD_INT 2
44559: ARRAY
44560: PUSH
44561: LD_VAR 0 9
44565: LESS
44566: IFFALSE 44608
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44568: LD_ADDR_VAR 0 6
44572: PUSH
44573: LD_VAR 0 6
44577: PPUSH
44578: LD_VAR 0 6
44582: PUSH
44583: LD_INT 1
44585: PLUS
44586: PPUSH
44587: LD_VAR 0 7
44591: PUSH
44592: LD_VAR 0 9
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PPUSH
44601: CALL_OW 2
44605: ST_TO_ADDR
44606: GO 44688
// for j = 1 to result do
44608: LD_ADDR_VAR 0 8
44612: PUSH
44613: DOUBLE
44614: LD_INT 1
44616: DEC
44617: ST_TO_ADDR
44618: LD_VAR 0 6
44622: PUSH
44623: FOR_TO
44624: IFFALSE 44686
// begin if tmp < result [ j ] [ 2 ] then
44626: LD_VAR 0 9
44630: PUSH
44631: LD_VAR 0 6
44635: PUSH
44636: LD_VAR 0 8
44640: ARRAY
44641: PUSH
44642: LD_INT 2
44644: ARRAY
44645: LESS
44646: IFFALSE 44684
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44648: LD_ADDR_VAR 0 6
44652: PUSH
44653: LD_VAR 0 6
44657: PPUSH
44658: LD_VAR 0 8
44662: PPUSH
44663: LD_VAR 0 7
44667: PUSH
44668: LD_VAR 0 9
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PPUSH
44677: CALL_OW 2
44681: ST_TO_ADDR
// break ;
44682: GO 44686
// end ; end ;
44684: GO 44623
44686: POP
44687: POP
// end ; end ;
44688: GO 44487
44690: POP
44691: POP
// if result and not asc then
44692: LD_VAR 0 6
44696: PUSH
44697: LD_VAR 0 4
44701: NOT
44702: AND
44703: IFFALSE 44778
// begin tmp := result ;
44705: LD_ADDR_VAR 0 9
44709: PUSH
44710: LD_VAR 0 6
44714: ST_TO_ADDR
// for i = tmp downto 1 do
44715: LD_ADDR_VAR 0 7
44719: PUSH
44720: DOUBLE
44721: LD_VAR 0 9
44725: INC
44726: ST_TO_ADDR
44727: LD_INT 1
44729: PUSH
44730: FOR_DOWNTO
44731: IFFALSE 44776
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44733: LD_ADDR_VAR 0 6
44737: PUSH
44738: LD_VAR 0 6
44742: PPUSH
44743: LD_VAR 0 9
44747: PUSH
44748: LD_VAR 0 7
44752: MINUS
44753: PUSH
44754: LD_INT 1
44756: PLUS
44757: PPUSH
44758: LD_VAR 0 9
44762: PUSH
44763: LD_VAR 0 7
44767: ARRAY
44768: PPUSH
44769: CALL_OW 1
44773: ST_TO_ADDR
44774: GO 44730
44776: POP
44777: POP
// end ; tmp := [ ] ;
44778: LD_ADDR_VAR 0 9
44782: PUSH
44783: EMPTY
44784: ST_TO_ADDR
// if mode then
44785: LD_VAR 0 5
44789: IFFALSE 44858
// begin for i = 1 to result do
44791: LD_ADDR_VAR 0 7
44795: PUSH
44796: DOUBLE
44797: LD_INT 1
44799: DEC
44800: ST_TO_ADDR
44801: LD_VAR 0 6
44805: PUSH
44806: FOR_TO
44807: IFFALSE 44846
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44809: LD_ADDR_VAR 0 9
44813: PUSH
44814: LD_VAR 0 9
44818: PPUSH
44819: LD_VAR 0 7
44823: PPUSH
44824: LD_VAR 0 6
44828: PUSH
44829: LD_VAR 0 7
44833: ARRAY
44834: PUSH
44835: LD_INT 1
44837: ARRAY
44838: PPUSH
44839: CALL_OW 1
44843: ST_TO_ADDR
44844: GO 44806
44846: POP
44847: POP
// result := tmp ;
44848: LD_ADDR_VAR 0 6
44852: PUSH
44853: LD_VAR 0 9
44857: ST_TO_ADDR
// end ; end ;
44858: LD_VAR 0 6
44862: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44863: LD_INT 0
44865: PPUSH
44866: PPUSH
44867: PPUSH
44868: PPUSH
44869: PPUSH
44870: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44871: LD_ADDR_VAR 0 5
44875: PUSH
44876: LD_INT 0
44878: PUSH
44879: LD_INT 0
44881: PUSH
44882: LD_INT 0
44884: PUSH
44885: EMPTY
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: ST_TO_ADDR
// if not x or not y then
44893: LD_VAR 0 2
44897: NOT
44898: PUSH
44899: LD_VAR 0 3
44903: NOT
44904: OR
44905: IFFALSE 44909
// exit ;
44907: GO 46561
// if not range then
44909: LD_VAR 0 4
44913: NOT
44914: IFFALSE 44924
// range := 10 ;
44916: LD_ADDR_VAR 0 4
44920: PUSH
44921: LD_INT 10
44923: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44924: LD_ADDR_VAR 0 8
44928: PUSH
44929: LD_INT 81
44931: PUSH
44932: LD_VAR 0 1
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 92
44943: PUSH
44944: LD_VAR 0 2
44948: PUSH
44949: LD_VAR 0 3
44953: PUSH
44954: LD_VAR 0 4
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 3
44967: PUSH
44968: LD_INT 21
44970: PUSH
44971: LD_INT 3
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: LIST
44986: PPUSH
44987: CALL_OW 69
44991: ST_TO_ADDR
// if not tmp then
44992: LD_VAR 0 8
44996: NOT
44997: IFFALSE 45001
// exit ;
44999: GO 46561
// for i in tmp do
45001: LD_ADDR_VAR 0 6
45005: PUSH
45006: LD_VAR 0 8
45010: PUSH
45011: FOR_IN
45012: IFFALSE 46536
// begin points := [ 0 , 0 , 0 ] ;
45014: LD_ADDR_VAR 0 9
45018: PUSH
45019: LD_INT 0
45021: PUSH
45022: LD_INT 0
45024: PUSH
45025: LD_INT 0
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: LIST
45032: ST_TO_ADDR
// bpoints := 1 ;
45033: LD_ADDR_VAR 0 10
45037: PUSH
45038: LD_INT 1
45040: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45041: LD_VAR 0 6
45045: PPUSH
45046: CALL_OW 247
45050: PUSH
45051: LD_INT 1
45053: DOUBLE
45054: EQUAL
45055: IFTRUE 45059
45057: GO 45637
45059: POP
// begin if GetClass ( i ) = 1 then
45060: LD_VAR 0 6
45064: PPUSH
45065: CALL_OW 257
45069: PUSH
45070: LD_INT 1
45072: EQUAL
45073: IFFALSE 45094
// points := [ 10 , 5 , 3 ] ;
45075: LD_ADDR_VAR 0 9
45079: PUSH
45080: LD_INT 10
45082: PUSH
45083: LD_INT 5
45085: PUSH
45086: LD_INT 3
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: LIST
45093: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45094: LD_VAR 0 6
45098: PPUSH
45099: CALL_OW 257
45103: PUSH
45104: LD_INT 2
45106: PUSH
45107: LD_INT 3
45109: PUSH
45110: LD_INT 4
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: LIST
45117: IN
45118: IFFALSE 45139
// points := [ 3 , 2 , 1 ] ;
45120: LD_ADDR_VAR 0 9
45124: PUSH
45125: LD_INT 3
45127: PUSH
45128: LD_INT 2
45130: PUSH
45131: LD_INT 1
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: LIST
45138: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45139: LD_VAR 0 6
45143: PPUSH
45144: CALL_OW 257
45148: PUSH
45149: LD_INT 5
45151: EQUAL
45152: IFFALSE 45173
// points := [ 130 , 5 , 2 ] ;
45154: LD_ADDR_VAR 0 9
45158: PUSH
45159: LD_INT 130
45161: PUSH
45162: LD_INT 5
45164: PUSH
45165: LD_INT 2
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: LIST
45172: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45173: LD_VAR 0 6
45177: PPUSH
45178: CALL_OW 257
45182: PUSH
45183: LD_INT 8
45185: EQUAL
45186: IFFALSE 45207
// points := [ 35 , 35 , 30 ] ;
45188: LD_ADDR_VAR 0 9
45192: PUSH
45193: LD_INT 35
45195: PUSH
45196: LD_INT 35
45198: PUSH
45199: LD_INT 30
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: LIST
45206: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45207: LD_VAR 0 6
45211: PPUSH
45212: CALL_OW 257
45216: PUSH
45217: LD_INT 9
45219: EQUAL
45220: IFFALSE 45241
// points := [ 20 , 55 , 40 ] ;
45222: LD_ADDR_VAR 0 9
45226: PUSH
45227: LD_INT 20
45229: PUSH
45230: LD_INT 55
45232: PUSH
45233: LD_INT 40
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: LIST
45240: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45241: LD_VAR 0 6
45245: PPUSH
45246: CALL_OW 257
45250: PUSH
45251: LD_INT 12
45253: PUSH
45254: LD_INT 16
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: IN
45261: IFFALSE 45282
// points := [ 5 , 3 , 2 ] ;
45263: LD_ADDR_VAR 0 9
45267: PUSH
45268: LD_INT 5
45270: PUSH
45271: LD_INT 3
45273: PUSH
45274: LD_INT 2
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: LIST
45281: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45282: LD_VAR 0 6
45286: PPUSH
45287: CALL_OW 257
45291: PUSH
45292: LD_INT 17
45294: EQUAL
45295: IFFALSE 45316
// points := [ 100 , 50 , 75 ] ;
45297: LD_ADDR_VAR 0 9
45301: PUSH
45302: LD_INT 100
45304: PUSH
45305: LD_INT 50
45307: PUSH
45308: LD_INT 75
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: LIST
45315: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45316: LD_VAR 0 6
45320: PPUSH
45321: CALL_OW 257
45325: PUSH
45326: LD_INT 15
45328: EQUAL
45329: IFFALSE 45350
// points := [ 10 , 5 , 3 ] ;
45331: LD_ADDR_VAR 0 9
45335: PUSH
45336: LD_INT 10
45338: PUSH
45339: LD_INT 5
45341: PUSH
45342: LD_INT 3
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: LIST
45349: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45350: LD_VAR 0 6
45354: PPUSH
45355: CALL_OW 257
45359: PUSH
45360: LD_INT 14
45362: EQUAL
45363: IFFALSE 45384
// points := [ 10 , 0 , 0 ] ;
45365: LD_ADDR_VAR 0 9
45369: PUSH
45370: LD_INT 10
45372: PUSH
45373: LD_INT 0
45375: PUSH
45376: LD_INT 0
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: LIST
45383: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45384: LD_VAR 0 6
45388: PPUSH
45389: CALL_OW 257
45393: PUSH
45394: LD_INT 11
45396: EQUAL
45397: IFFALSE 45418
// points := [ 30 , 10 , 5 ] ;
45399: LD_ADDR_VAR 0 9
45403: PUSH
45404: LD_INT 30
45406: PUSH
45407: LD_INT 10
45409: PUSH
45410: LD_INT 5
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: LIST
45417: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45418: LD_VAR 0 1
45422: PPUSH
45423: LD_INT 5
45425: PPUSH
45426: CALL_OW 321
45430: PUSH
45431: LD_INT 2
45433: EQUAL
45434: IFFALSE 45451
// bpoints := bpoints * 1.8 ;
45436: LD_ADDR_VAR 0 10
45440: PUSH
45441: LD_VAR 0 10
45445: PUSH
45446: LD_REAL  1.80000000000000E+0000
45449: MUL
45450: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45451: LD_VAR 0 6
45455: PPUSH
45456: CALL_OW 257
45460: PUSH
45461: LD_INT 1
45463: PUSH
45464: LD_INT 2
45466: PUSH
45467: LD_INT 3
45469: PUSH
45470: LD_INT 4
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: IN
45479: PUSH
45480: LD_VAR 0 1
45484: PPUSH
45485: LD_INT 51
45487: PPUSH
45488: CALL_OW 321
45492: PUSH
45493: LD_INT 2
45495: EQUAL
45496: AND
45497: IFFALSE 45514
// bpoints := bpoints * 1.2 ;
45499: LD_ADDR_VAR 0 10
45503: PUSH
45504: LD_VAR 0 10
45508: PUSH
45509: LD_REAL  1.20000000000000E+0000
45512: MUL
45513: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45514: LD_VAR 0 6
45518: PPUSH
45519: CALL_OW 257
45523: PUSH
45524: LD_INT 5
45526: PUSH
45527: LD_INT 7
45529: PUSH
45530: LD_INT 9
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: LIST
45537: IN
45538: PUSH
45539: LD_VAR 0 1
45543: PPUSH
45544: LD_INT 52
45546: PPUSH
45547: CALL_OW 321
45551: PUSH
45552: LD_INT 2
45554: EQUAL
45555: AND
45556: IFFALSE 45573
// bpoints := bpoints * 1.5 ;
45558: LD_ADDR_VAR 0 10
45562: PUSH
45563: LD_VAR 0 10
45567: PUSH
45568: LD_REAL  1.50000000000000E+0000
45571: MUL
45572: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45573: LD_VAR 0 1
45577: PPUSH
45578: LD_INT 66
45580: PPUSH
45581: CALL_OW 321
45585: PUSH
45586: LD_INT 2
45588: EQUAL
45589: IFFALSE 45606
// bpoints := bpoints * 1.1 ;
45591: LD_ADDR_VAR 0 10
45595: PUSH
45596: LD_VAR 0 10
45600: PUSH
45601: LD_REAL  1.10000000000000E+0000
45604: MUL
45605: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45606: LD_ADDR_VAR 0 10
45610: PUSH
45611: LD_VAR 0 10
45615: PUSH
45616: LD_VAR 0 6
45620: PPUSH
45621: LD_INT 1
45623: PPUSH
45624: CALL_OW 259
45628: PUSH
45629: LD_REAL  1.15000000000000E+0000
45632: MUL
45633: MUL
45634: ST_TO_ADDR
// end ; unit_vehicle :
45635: GO 46465
45637: LD_INT 2
45639: DOUBLE
45640: EQUAL
45641: IFTRUE 45645
45643: GO 46453
45645: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45646: LD_VAR 0 6
45650: PPUSH
45651: CALL_OW 264
45655: PUSH
45656: LD_INT 2
45658: PUSH
45659: LD_INT 42
45661: PUSH
45662: LD_INT 24
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: LIST
45669: IN
45670: IFFALSE 45691
// points := [ 25 , 5 , 3 ] ;
45672: LD_ADDR_VAR 0 9
45676: PUSH
45677: LD_INT 25
45679: PUSH
45680: LD_INT 5
45682: PUSH
45683: LD_INT 3
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: LIST
45690: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45691: LD_VAR 0 6
45695: PPUSH
45696: CALL_OW 264
45700: PUSH
45701: LD_INT 4
45703: PUSH
45704: LD_INT 43
45706: PUSH
45707: LD_INT 25
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: LIST
45714: IN
45715: IFFALSE 45736
// points := [ 40 , 15 , 5 ] ;
45717: LD_ADDR_VAR 0 9
45721: PUSH
45722: LD_INT 40
45724: PUSH
45725: LD_INT 15
45727: PUSH
45728: LD_INT 5
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: LIST
45735: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45736: LD_VAR 0 6
45740: PPUSH
45741: CALL_OW 264
45745: PUSH
45746: LD_INT 3
45748: PUSH
45749: LD_INT 23
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: IN
45756: IFFALSE 45777
// points := [ 7 , 25 , 8 ] ;
45758: LD_ADDR_VAR 0 9
45762: PUSH
45763: LD_INT 7
45765: PUSH
45766: LD_INT 25
45768: PUSH
45769: LD_INT 8
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: LIST
45776: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45777: LD_VAR 0 6
45781: PPUSH
45782: CALL_OW 264
45786: PUSH
45787: LD_INT 5
45789: PUSH
45790: LD_INT 27
45792: PUSH
45793: LD_INT 44
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: LIST
45800: IN
45801: IFFALSE 45822
// points := [ 14 , 50 , 16 ] ;
45803: LD_ADDR_VAR 0 9
45807: PUSH
45808: LD_INT 14
45810: PUSH
45811: LD_INT 50
45813: PUSH
45814: LD_INT 16
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: LIST
45821: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45822: LD_VAR 0 6
45826: PPUSH
45827: CALL_OW 264
45831: PUSH
45832: LD_INT 6
45834: PUSH
45835: LD_INT 46
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: IN
45842: IFFALSE 45863
// points := [ 32 , 120 , 70 ] ;
45844: LD_ADDR_VAR 0 9
45848: PUSH
45849: LD_INT 32
45851: PUSH
45852: LD_INT 120
45854: PUSH
45855: LD_INT 70
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: LIST
45862: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45863: LD_VAR 0 6
45867: PPUSH
45868: CALL_OW 264
45872: PUSH
45873: LD_INT 7
45875: PUSH
45876: LD_INT 28
45878: PUSH
45879: LD_INT 45
45881: PUSH
45882: LD_EXP 50
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: IN
45893: IFFALSE 45914
// points := [ 35 , 20 , 45 ] ;
45895: LD_ADDR_VAR 0 9
45899: PUSH
45900: LD_INT 35
45902: PUSH
45903: LD_INT 20
45905: PUSH
45906: LD_INT 45
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: LIST
45913: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45914: LD_VAR 0 6
45918: PPUSH
45919: CALL_OW 264
45923: PUSH
45924: LD_INT 47
45926: PUSH
45927: EMPTY
45928: LIST
45929: IN
45930: IFFALSE 45951
// points := [ 67 , 45 , 75 ] ;
45932: LD_ADDR_VAR 0 9
45936: PUSH
45937: LD_INT 67
45939: PUSH
45940: LD_INT 45
45942: PUSH
45943: LD_INT 75
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: LIST
45950: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45951: LD_VAR 0 6
45955: PPUSH
45956: CALL_OW 264
45960: PUSH
45961: LD_INT 26
45963: PUSH
45964: EMPTY
45965: LIST
45966: IN
45967: IFFALSE 45988
// points := [ 120 , 30 , 80 ] ;
45969: LD_ADDR_VAR 0 9
45973: PUSH
45974: LD_INT 120
45976: PUSH
45977: LD_INT 30
45979: PUSH
45980: LD_INT 80
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: LIST
45987: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45988: LD_VAR 0 6
45992: PPUSH
45993: CALL_OW 264
45997: PUSH
45998: LD_INT 22
46000: PUSH
46001: EMPTY
46002: LIST
46003: IN
46004: IFFALSE 46025
// points := [ 40 , 1 , 1 ] ;
46006: LD_ADDR_VAR 0 9
46010: PUSH
46011: LD_INT 40
46013: PUSH
46014: LD_INT 1
46016: PUSH
46017: LD_INT 1
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: LIST
46024: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46025: LD_VAR 0 6
46029: PPUSH
46030: CALL_OW 264
46034: PUSH
46035: LD_INT 29
46037: PUSH
46038: EMPTY
46039: LIST
46040: IN
46041: IFFALSE 46062
// points := [ 70 , 200 , 400 ] ;
46043: LD_ADDR_VAR 0 9
46047: PUSH
46048: LD_INT 70
46050: PUSH
46051: LD_INT 200
46053: PUSH
46054: LD_INT 400
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: LIST
46061: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46062: LD_VAR 0 6
46066: PPUSH
46067: CALL_OW 264
46071: PUSH
46072: LD_INT 14
46074: PUSH
46075: LD_INT 53
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: IN
46082: IFFALSE 46103
// points := [ 40 , 10 , 20 ] ;
46084: LD_ADDR_VAR 0 9
46088: PUSH
46089: LD_INT 40
46091: PUSH
46092: LD_INT 10
46094: PUSH
46095: LD_INT 20
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: LIST
46102: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46103: LD_VAR 0 6
46107: PPUSH
46108: CALL_OW 264
46112: PUSH
46113: LD_INT 9
46115: PUSH
46116: EMPTY
46117: LIST
46118: IN
46119: IFFALSE 46140
// points := [ 5 , 70 , 20 ] ;
46121: LD_ADDR_VAR 0 9
46125: PUSH
46126: LD_INT 5
46128: PUSH
46129: LD_INT 70
46131: PUSH
46132: LD_INT 20
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: LIST
46139: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46140: LD_VAR 0 6
46144: PPUSH
46145: CALL_OW 264
46149: PUSH
46150: LD_INT 10
46152: PUSH
46153: EMPTY
46154: LIST
46155: IN
46156: IFFALSE 46177
// points := [ 35 , 110 , 70 ] ;
46158: LD_ADDR_VAR 0 9
46162: PUSH
46163: LD_INT 35
46165: PUSH
46166: LD_INT 110
46168: PUSH
46169: LD_INT 70
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: LIST
46176: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46177: LD_VAR 0 6
46181: PPUSH
46182: CALL_OW 265
46186: PUSH
46187: LD_INT 25
46189: EQUAL
46190: IFFALSE 46211
// points := [ 80 , 65 , 100 ] ;
46192: LD_ADDR_VAR 0 9
46196: PUSH
46197: LD_INT 80
46199: PUSH
46200: LD_INT 65
46202: PUSH
46203: LD_INT 100
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: LIST
46210: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46211: LD_VAR 0 6
46215: PPUSH
46216: CALL_OW 263
46220: PUSH
46221: LD_INT 1
46223: EQUAL
46224: IFFALSE 46259
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46226: LD_ADDR_VAR 0 10
46230: PUSH
46231: LD_VAR 0 10
46235: PUSH
46236: LD_VAR 0 6
46240: PPUSH
46241: CALL_OW 311
46245: PPUSH
46246: LD_INT 3
46248: PPUSH
46249: CALL_OW 259
46253: PUSH
46254: LD_INT 4
46256: MUL
46257: MUL
46258: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46259: LD_VAR 0 6
46263: PPUSH
46264: CALL_OW 263
46268: PUSH
46269: LD_INT 2
46271: EQUAL
46272: IFFALSE 46323
// begin j := IsControledBy ( i ) ;
46274: LD_ADDR_VAR 0 7
46278: PUSH
46279: LD_VAR 0 6
46283: PPUSH
46284: CALL_OW 312
46288: ST_TO_ADDR
// if j then
46289: LD_VAR 0 7
46293: IFFALSE 46323
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46295: LD_ADDR_VAR 0 10
46299: PUSH
46300: LD_VAR 0 10
46304: PUSH
46305: LD_VAR 0 7
46309: PPUSH
46310: LD_INT 3
46312: PPUSH
46313: CALL_OW 259
46317: PUSH
46318: LD_INT 3
46320: MUL
46321: MUL
46322: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46323: LD_VAR 0 6
46327: PPUSH
46328: CALL_OW 264
46332: PUSH
46333: LD_INT 5
46335: PUSH
46336: LD_INT 6
46338: PUSH
46339: LD_INT 46
46341: PUSH
46342: LD_INT 44
46344: PUSH
46345: LD_INT 47
46347: PUSH
46348: LD_INT 45
46350: PUSH
46351: LD_INT 28
46353: PUSH
46354: LD_INT 7
46356: PUSH
46357: LD_INT 27
46359: PUSH
46360: LD_INT 29
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: IN
46375: PUSH
46376: LD_VAR 0 1
46380: PPUSH
46381: LD_INT 52
46383: PPUSH
46384: CALL_OW 321
46388: PUSH
46389: LD_INT 2
46391: EQUAL
46392: AND
46393: IFFALSE 46410
// bpoints := bpoints * 1.2 ;
46395: LD_ADDR_VAR 0 10
46399: PUSH
46400: LD_VAR 0 10
46404: PUSH
46405: LD_REAL  1.20000000000000E+0000
46408: MUL
46409: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46410: LD_VAR 0 6
46414: PPUSH
46415: CALL_OW 264
46419: PUSH
46420: LD_INT 6
46422: PUSH
46423: LD_INT 46
46425: PUSH
46426: LD_INT 47
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: LIST
46433: IN
46434: IFFALSE 46451
// bpoints := bpoints * 1.2 ;
46436: LD_ADDR_VAR 0 10
46440: PUSH
46441: LD_VAR 0 10
46445: PUSH
46446: LD_REAL  1.20000000000000E+0000
46449: MUL
46450: ST_TO_ADDR
// end ; unit_building :
46451: GO 46465
46453: LD_INT 3
46455: DOUBLE
46456: EQUAL
46457: IFTRUE 46461
46459: GO 46464
46461: POP
// ; end ;
46462: GO 46465
46464: POP
// for j = 1 to 3 do
46465: LD_ADDR_VAR 0 7
46469: PUSH
46470: DOUBLE
46471: LD_INT 1
46473: DEC
46474: ST_TO_ADDR
46475: LD_INT 3
46477: PUSH
46478: FOR_TO
46479: IFFALSE 46532
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46481: LD_ADDR_VAR 0 5
46485: PUSH
46486: LD_VAR 0 5
46490: PPUSH
46491: LD_VAR 0 7
46495: PPUSH
46496: LD_VAR 0 5
46500: PUSH
46501: LD_VAR 0 7
46505: ARRAY
46506: PUSH
46507: LD_VAR 0 9
46511: PUSH
46512: LD_VAR 0 7
46516: ARRAY
46517: PUSH
46518: LD_VAR 0 10
46522: MUL
46523: PLUS
46524: PPUSH
46525: CALL_OW 1
46529: ST_TO_ADDR
46530: GO 46478
46532: POP
46533: POP
// end ;
46534: GO 45011
46536: POP
46537: POP
// result := Replace ( result , 4 , tmp ) ;
46538: LD_ADDR_VAR 0 5
46542: PUSH
46543: LD_VAR 0 5
46547: PPUSH
46548: LD_INT 4
46550: PPUSH
46551: LD_VAR 0 8
46555: PPUSH
46556: CALL_OW 1
46560: ST_TO_ADDR
// end ;
46561: LD_VAR 0 5
46565: RET
// export function DangerAtRange ( unit , range ) ; begin
46566: LD_INT 0
46568: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46569: LD_ADDR_VAR 0 3
46573: PUSH
46574: LD_VAR 0 1
46578: PPUSH
46579: CALL_OW 255
46583: PPUSH
46584: LD_VAR 0 1
46588: PPUSH
46589: CALL_OW 250
46593: PPUSH
46594: LD_VAR 0 1
46598: PPUSH
46599: CALL_OW 251
46603: PPUSH
46604: LD_VAR 0 2
46608: PPUSH
46609: CALL 44863 0 4
46613: ST_TO_ADDR
// end ;
46614: LD_VAR 0 3
46618: RET
// export function DangerInArea ( side , area ) ; begin
46619: LD_INT 0
46621: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46622: LD_ADDR_VAR 0 3
46626: PUSH
46627: LD_VAR 0 2
46631: PPUSH
46632: LD_INT 81
46634: PUSH
46635: LD_VAR 0 1
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PPUSH
46644: CALL_OW 70
46648: ST_TO_ADDR
// end ;
46649: LD_VAR 0 3
46653: RET
// export function IsExtension ( b ) ; begin
46654: LD_INT 0
46656: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46657: LD_ADDR_VAR 0 2
46661: PUSH
46662: LD_VAR 0 1
46666: PUSH
46667: LD_INT 23
46669: PUSH
46670: LD_INT 20
46672: PUSH
46673: LD_INT 22
46675: PUSH
46676: LD_INT 17
46678: PUSH
46679: LD_INT 24
46681: PUSH
46682: LD_INT 21
46684: PUSH
46685: LD_INT 19
46687: PUSH
46688: LD_INT 16
46690: PUSH
46691: LD_INT 25
46693: PUSH
46694: LD_INT 18
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: IN
46709: ST_TO_ADDR
// end ;
46710: LD_VAR 0 2
46714: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46715: LD_INT 0
46717: PPUSH
46718: PPUSH
46719: PPUSH
// result := [ ] ;
46720: LD_ADDR_VAR 0 4
46724: PUSH
46725: EMPTY
46726: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46727: LD_ADDR_VAR 0 5
46731: PUSH
46732: LD_VAR 0 2
46736: PPUSH
46737: LD_INT 21
46739: PUSH
46740: LD_INT 3
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PPUSH
46747: CALL_OW 70
46751: ST_TO_ADDR
// if not tmp then
46752: LD_VAR 0 5
46756: NOT
46757: IFFALSE 46761
// exit ;
46759: GO 46825
// if checkLink then
46761: LD_VAR 0 3
46765: IFFALSE 46815
// begin for i in tmp do
46767: LD_ADDR_VAR 0 6
46771: PUSH
46772: LD_VAR 0 5
46776: PUSH
46777: FOR_IN
46778: IFFALSE 46813
// if GetBase ( i ) <> base then
46780: LD_VAR 0 6
46784: PPUSH
46785: CALL_OW 274
46789: PUSH
46790: LD_VAR 0 1
46794: NONEQUAL
46795: IFFALSE 46811
// ComLinkToBase ( base , i ) ;
46797: LD_VAR 0 1
46801: PPUSH
46802: LD_VAR 0 6
46806: PPUSH
46807: CALL_OW 169
46811: GO 46777
46813: POP
46814: POP
// end ; result := tmp ;
46815: LD_ADDR_VAR 0 4
46819: PUSH
46820: LD_VAR 0 5
46824: ST_TO_ADDR
// end ;
46825: LD_VAR 0 4
46829: RET
// export function ComComplete ( units , b ) ; var i ; begin
46830: LD_INT 0
46832: PPUSH
46833: PPUSH
// if not units then
46834: LD_VAR 0 1
46838: NOT
46839: IFFALSE 46843
// exit ;
46841: GO 46933
// for i in units do
46843: LD_ADDR_VAR 0 4
46847: PUSH
46848: LD_VAR 0 1
46852: PUSH
46853: FOR_IN
46854: IFFALSE 46931
// if BuildingStatus ( b ) = bs_build then
46856: LD_VAR 0 2
46860: PPUSH
46861: CALL_OW 461
46865: PUSH
46866: LD_INT 1
46868: EQUAL
46869: IFFALSE 46929
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46871: LD_VAR 0 4
46875: PPUSH
46876: LD_STRING h
46878: PUSH
46879: LD_VAR 0 2
46883: PPUSH
46884: CALL_OW 250
46888: PUSH
46889: LD_VAR 0 2
46893: PPUSH
46894: CALL_OW 251
46898: PUSH
46899: LD_VAR 0 2
46903: PUSH
46904: LD_INT 0
46906: PUSH
46907: LD_INT 0
46909: PUSH
46910: LD_INT 0
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: PUSH
46922: EMPTY
46923: LIST
46924: PPUSH
46925: CALL_OW 446
46929: GO 46853
46931: POP
46932: POP
// end ;
46933: LD_VAR 0 3
46937: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46938: LD_INT 0
46940: PPUSH
46941: PPUSH
46942: PPUSH
46943: PPUSH
46944: PPUSH
46945: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46946: LD_VAR 0 1
46950: NOT
46951: PUSH
46952: LD_VAR 0 1
46956: PPUSH
46957: CALL_OW 263
46961: PUSH
46962: LD_INT 2
46964: NONEQUAL
46965: OR
46966: IFFALSE 46970
// exit ;
46968: GO 47286
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46970: LD_ADDR_VAR 0 6
46974: PUSH
46975: LD_INT 22
46977: PUSH
46978: LD_VAR 0 1
46982: PPUSH
46983: CALL_OW 255
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 2
46994: PUSH
46995: LD_INT 30
46997: PUSH
46998: LD_INT 36
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 34
47007: PUSH
47008: LD_INT 31
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: LIST
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PPUSH
47024: CALL_OW 69
47028: ST_TO_ADDR
// if not tmp then
47029: LD_VAR 0 6
47033: NOT
47034: IFFALSE 47038
// exit ;
47036: GO 47286
// result := [ ] ;
47038: LD_ADDR_VAR 0 2
47042: PUSH
47043: EMPTY
47044: ST_TO_ADDR
// for i in tmp do
47045: LD_ADDR_VAR 0 3
47049: PUSH
47050: LD_VAR 0 6
47054: PUSH
47055: FOR_IN
47056: IFFALSE 47127
// begin t := UnitsInside ( i ) ;
47058: LD_ADDR_VAR 0 4
47062: PUSH
47063: LD_VAR 0 3
47067: PPUSH
47068: CALL_OW 313
47072: ST_TO_ADDR
// if t then
47073: LD_VAR 0 4
47077: IFFALSE 47125
// for j in t do
47079: LD_ADDR_VAR 0 7
47083: PUSH
47084: LD_VAR 0 4
47088: PUSH
47089: FOR_IN
47090: IFFALSE 47123
// result := Replace ( result , result + 1 , j ) ;
47092: LD_ADDR_VAR 0 2
47096: PUSH
47097: LD_VAR 0 2
47101: PPUSH
47102: LD_VAR 0 2
47106: PUSH
47107: LD_INT 1
47109: PLUS
47110: PPUSH
47111: LD_VAR 0 7
47115: PPUSH
47116: CALL_OW 1
47120: ST_TO_ADDR
47121: GO 47089
47123: POP
47124: POP
// end ;
47125: GO 47055
47127: POP
47128: POP
// if not result then
47129: LD_VAR 0 2
47133: NOT
47134: IFFALSE 47138
// exit ;
47136: GO 47286
// mech := result [ 1 ] ;
47138: LD_ADDR_VAR 0 5
47142: PUSH
47143: LD_VAR 0 2
47147: PUSH
47148: LD_INT 1
47150: ARRAY
47151: ST_TO_ADDR
// if result > 1 then
47152: LD_VAR 0 2
47156: PUSH
47157: LD_INT 1
47159: GREATER
47160: IFFALSE 47272
// begin for i = 2 to result do
47162: LD_ADDR_VAR 0 3
47166: PUSH
47167: DOUBLE
47168: LD_INT 2
47170: DEC
47171: ST_TO_ADDR
47172: LD_VAR 0 2
47176: PUSH
47177: FOR_TO
47178: IFFALSE 47270
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47180: LD_ADDR_VAR 0 4
47184: PUSH
47185: LD_VAR 0 2
47189: PUSH
47190: LD_VAR 0 3
47194: ARRAY
47195: PPUSH
47196: LD_INT 3
47198: PPUSH
47199: CALL_OW 259
47203: PUSH
47204: LD_VAR 0 2
47208: PUSH
47209: LD_VAR 0 3
47213: ARRAY
47214: PPUSH
47215: CALL_OW 432
47219: MINUS
47220: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47221: LD_VAR 0 4
47225: PUSH
47226: LD_VAR 0 5
47230: PPUSH
47231: LD_INT 3
47233: PPUSH
47234: CALL_OW 259
47238: PUSH
47239: LD_VAR 0 5
47243: PPUSH
47244: CALL_OW 432
47248: MINUS
47249: GREATEREQUAL
47250: IFFALSE 47268
// mech := result [ i ] ;
47252: LD_ADDR_VAR 0 5
47256: PUSH
47257: LD_VAR 0 2
47261: PUSH
47262: LD_VAR 0 3
47266: ARRAY
47267: ST_TO_ADDR
// end ;
47268: GO 47177
47270: POP
47271: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47272: LD_VAR 0 1
47276: PPUSH
47277: LD_VAR 0 5
47281: PPUSH
47282: CALL_OW 135
// end ;
47286: LD_VAR 0 2
47290: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47291: LD_INT 0
47293: PPUSH
47294: PPUSH
47295: PPUSH
47296: PPUSH
47297: PPUSH
47298: PPUSH
47299: PPUSH
47300: PPUSH
47301: PPUSH
47302: PPUSH
47303: PPUSH
47304: PPUSH
47305: PPUSH
// result := [ ] ;
47306: LD_ADDR_VAR 0 7
47310: PUSH
47311: EMPTY
47312: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47313: LD_VAR 0 1
47317: PPUSH
47318: CALL_OW 266
47322: PUSH
47323: LD_INT 0
47325: PUSH
47326: LD_INT 1
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: IN
47333: NOT
47334: IFFALSE 47338
// exit ;
47336: GO 48972
// if name then
47338: LD_VAR 0 3
47342: IFFALSE 47358
// SetBName ( base_dep , name ) ;
47344: LD_VAR 0 1
47348: PPUSH
47349: LD_VAR 0 3
47353: PPUSH
47354: CALL_OW 500
// base := GetBase ( base_dep ) ;
47358: LD_ADDR_VAR 0 15
47362: PUSH
47363: LD_VAR 0 1
47367: PPUSH
47368: CALL_OW 274
47372: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47373: LD_ADDR_VAR 0 16
47377: PUSH
47378: LD_VAR 0 1
47382: PPUSH
47383: CALL_OW 255
47387: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47388: LD_ADDR_VAR 0 17
47392: PUSH
47393: LD_VAR 0 1
47397: PPUSH
47398: CALL_OW 248
47402: ST_TO_ADDR
// if sources then
47403: LD_VAR 0 5
47407: IFFALSE 47454
// for i = 1 to 3 do
47409: LD_ADDR_VAR 0 8
47413: PUSH
47414: DOUBLE
47415: LD_INT 1
47417: DEC
47418: ST_TO_ADDR
47419: LD_INT 3
47421: PUSH
47422: FOR_TO
47423: IFFALSE 47452
// AddResourceType ( base , i , sources [ i ] ) ;
47425: LD_VAR 0 15
47429: PPUSH
47430: LD_VAR 0 8
47434: PPUSH
47435: LD_VAR 0 5
47439: PUSH
47440: LD_VAR 0 8
47444: ARRAY
47445: PPUSH
47446: CALL_OW 276
47450: GO 47422
47452: POP
47453: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47454: LD_ADDR_VAR 0 18
47458: PUSH
47459: LD_VAR 0 15
47463: PPUSH
47464: LD_VAR 0 2
47468: PPUSH
47469: LD_INT 1
47471: PPUSH
47472: CALL 46715 0 3
47476: ST_TO_ADDR
// InitHc ;
47477: CALL_OW 19
// InitUc ;
47481: CALL_OW 18
// uc_side := side ;
47485: LD_ADDR_OWVAR 20
47489: PUSH
47490: LD_VAR 0 16
47494: ST_TO_ADDR
// uc_nation := nation ;
47495: LD_ADDR_OWVAR 21
47499: PUSH
47500: LD_VAR 0 17
47504: ST_TO_ADDR
// if buildings then
47505: LD_VAR 0 18
47509: IFFALSE 48831
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47511: LD_ADDR_VAR 0 19
47515: PUSH
47516: LD_VAR 0 18
47520: PPUSH
47521: LD_INT 2
47523: PUSH
47524: LD_INT 30
47526: PUSH
47527: LD_INT 29
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 30
47536: PUSH
47537: LD_INT 30
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: LIST
47548: PPUSH
47549: CALL_OW 72
47553: ST_TO_ADDR
// if tmp then
47554: LD_VAR 0 19
47558: IFFALSE 47606
// for i in tmp do
47560: LD_ADDR_VAR 0 8
47564: PUSH
47565: LD_VAR 0 19
47569: PUSH
47570: FOR_IN
47571: IFFALSE 47604
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47573: LD_VAR 0 8
47577: PPUSH
47578: CALL_OW 250
47582: PPUSH
47583: LD_VAR 0 8
47587: PPUSH
47588: CALL_OW 251
47592: PPUSH
47593: LD_VAR 0 16
47597: PPUSH
47598: CALL_OW 441
47602: GO 47570
47604: POP
47605: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47606: LD_VAR 0 18
47610: PPUSH
47611: LD_INT 2
47613: PUSH
47614: LD_INT 30
47616: PUSH
47617: LD_INT 32
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 30
47626: PUSH
47627: LD_INT 33
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: LIST
47638: PPUSH
47639: CALL_OW 72
47643: IFFALSE 47731
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47645: LD_ADDR_VAR 0 8
47649: PUSH
47650: LD_VAR 0 18
47654: PPUSH
47655: LD_INT 2
47657: PUSH
47658: LD_INT 30
47660: PUSH
47661: LD_INT 32
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 30
47670: PUSH
47671: LD_INT 33
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: LIST
47682: PPUSH
47683: CALL_OW 72
47687: PUSH
47688: FOR_IN
47689: IFFALSE 47729
// begin if not GetBWeapon ( i ) then
47691: LD_VAR 0 8
47695: PPUSH
47696: CALL_OW 269
47700: NOT
47701: IFFALSE 47727
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47703: LD_VAR 0 8
47707: PPUSH
47708: LD_VAR 0 8
47712: PPUSH
47713: LD_VAR 0 2
47717: PPUSH
47718: CALL 48977 0 2
47722: PPUSH
47723: CALL_OW 431
// end ;
47727: GO 47688
47729: POP
47730: POP
// end ; for i = 1 to personel do
47731: LD_ADDR_VAR 0 8
47735: PUSH
47736: DOUBLE
47737: LD_INT 1
47739: DEC
47740: ST_TO_ADDR
47741: LD_VAR 0 6
47745: PUSH
47746: FOR_TO
47747: IFFALSE 48811
// begin if i > 4 then
47749: LD_VAR 0 8
47753: PUSH
47754: LD_INT 4
47756: GREATER
47757: IFFALSE 47761
// break ;
47759: GO 48811
// case i of 1 :
47761: LD_VAR 0 8
47765: PUSH
47766: LD_INT 1
47768: DOUBLE
47769: EQUAL
47770: IFTRUE 47774
47772: GO 47854
47774: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47775: LD_ADDR_VAR 0 12
47779: PUSH
47780: LD_VAR 0 18
47784: PPUSH
47785: LD_INT 22
47787: PUSH
47788: LD_VAR 0 16
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 58
47799: PUSH
47800: EMPTY
47801: LIST
47802: PUSH
47803: LD_INT 2
47805: PUSH
47806: LD_INT 30
47808: PUSH
47809: LD_INT 32
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 30
47818: PUSH
47819: LD_INT 4
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 30
47828: PUSH
47829: LD_INT 5
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: LIST
47846: PPUSH
47847: CALL_OW 72
47851: ST_TO_ADDR
47852: GO 48076
47854: LD_INT 2
47856: DOUBLE
47857: EQUAL
47858: IFTRUE 47862
47860: GO 47924
47862: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47863: LD_ADDR_VAR 0 12
47867: PUSH
47868: LD_VAR 0 18
47872: PPUSH
47873: LD_INT 22
47875: PUSH
47876: LD_VAR 0 16
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 2
47887: PUSH
47888: LD_INT 30
47890: PUSH
47891: LD_INT 0
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 30
47900: PUSH
47901: LD_INT 1
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: LIST
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PPUSH
47917: CALL_OW 72
47921: ST_TO_ADDR
47922: GO 48076
47924: LD_INT 3
47926: DOUBLE
47927: EQUAL
47928: IFTRUE 47932
47930: GO 47994
47932: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47933: LD_ADDR_VAR 0 12
47937: PUSH
47938: LD_VAR 0 18
47942: PPUSH
47943: LD_INT 22
47945: PUSH
47946: LD_VAR 0 16
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 2
47957: PUSH
47958: LD_INT 30
47960: PUSH
47961: LD_INT 2
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 30
47970: PUSH
47971: LD_INT 3
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: LIST
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PPUSH
47987: CALL_OW 72
47991: ST_TO_ADDR
47992: GO 48076
47994: LD_INT 4
47996: DOUBLE
47997: EQUAL
47998: IFTRUE 48002
48000: GO 48075
48002: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48003: LD_ADDR_VAR 0 12
48007: PUSH
48008: LD_VAR 0 18
48012: PPUSH
48013: LD_INT 22
48015: PUSH
48016: LD_VAR 0 16
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 2
48027: PUSH
48028: LD_INT 30
48030: PUSH
48031: LD_INT 6
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 30
48040: PUSH
48041: LD_INT 7
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 30
48050: PUSH
48051: LD_INT 8
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PPUSH
48068: CALL_OW 72
48072: ST_TO_ADDR
48073: GO 48076
48075: POP
// if i = 1 then
48076: LD_VAR 0 8
48080: PUSH
48081: LD_INT 1
48083: EQUAL
48084: IFFALSE 48195
// begin tmp := [ ] ;
48086: LD_ADDR_VAR 0 19
48090: PUSH
48091: EMPTY
48092: ST_TO_ADDR
// for j in f do
48093: LD_ADDR_VAR 0 9
48097: PUSH
48098: LD_VAR 0 12
48102: PUSH
48103: FOR_IN
48104: IFFALSE 48177
// if GetBType ( j ) = b_bunker then
48106: LD_VAR 0 9
48110: PPUSH
48111: CALL_OW 266
48115: PUSH
48116: LD_INT 32
48118: EQUAL
48119: IFFALSE 48146
// tmp := Insert ( tmp , 1 , j ) else
48121: LD_ADDR_VAR 0 19
48125: PUSH
48126: LD_VAR 0 19
48130: PPUSH
48131: LD_INT 1
48133: PPUSH
48134: LD_VAR 0 9
48138: PPUSH
48139: CALL_OW 2
48143: ST_TO_ADDR
48144: GO 48175
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48146: LD_ADDR_VAR 0 19
48150: PUSH
48151: LD_VAR 0 19
48155: PPUSH
48156: LD_VAR 0 19
48160: PUSH
48161: LD_INT 1
48163: PLUS
48164: PPUSH
48165: LD_VAR 0 9
48169: PPUSH
48170: CALL_OW 2
48174: ST_TO_ADDR
48175: GO 48103
48177: POP
48178: POP
// if tmp then
48179: LD_VAR 0 19
48183: IFFALSE 48195
// f := tmp ;
48185: LD_ADDR_VAR 0 12
48189: PUSH
48190: LD_VAR 0 19
48194: ST_TO_ADDR
// end ; x := personel [ i ] ;
48195: LD_ADDR_VAR 0 13
48199: PUSH
48200: LD_VAR 0 6
48204: PUSH
48205: LD_VAR 0 8
48209: ARRAY
48210: ST_TO_ADDR
// if x = - 1 then
48211: LD_VAR 0 13
48215: PUSH
48216: LD_INT 1
48218: NEG
48219: EQUAL
48220: IFFALSE 48429
// begin for j in f do
48222: LD_ADDR_VAR 0 9
48226: PUSH
48227: LD_VAR 0 12
48231: PUSH
48232: FOR_IN
48233: IFFALSE 48425
// repeat InitHc ;
48235: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48239: LD_VAR 0 9
48243: PPUSH
48244: CALL_OW 266
48248: PUSH
48249: LD_INT 5
48251: EQUAL
48252: IFFALSE 48322
// begin if UnitsInside ( j ) < 3 then
48254: LD_VAR 0 9
48258: PPUSH
48259: CALL_OW 313
48263: PUSH
48264: LD_INT 3
48266: LESS
48267: IFFALSE 48303
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48269: LD_INT 0
48271: PPUSH
48272: LD_INT 5
48274: PUSH
48275: LD_INT 8
48277: PUSH
48278: LD_INT 9
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: LIST
48285: PUSH
48286: LD_VAR 0 17
48290: ARRAY
48291: PPUSH
48292: LD_VAR 0 4
48296: PPUSH
48297: CALL_OW 380
48301: GO 48320
// PrepareHuman ( false , i , skill ) ;
48303: LD_INT 0
48305: PPUSH
48306: LD_VAR 0 8
48310: PPUSH
48311: LD_VAR 0 4
48315: PPUSH
48316: CALL_OW 380
// end else
48320: GO 48339
// PrepareHuman ( false , i , skill ) ;
48322: LD_INT 0
48324: PPUSH
48325: LD_VAR 0 8
48329: PPUSH
48330: LD_VAR 0 4
48334: PPUSH
48335: CALL_OW 380
// un := CreateHuman ;
48339: LD_ADDR_VAR 0 14
48343: PUSH
48344: CALL_OW 44
48348: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48349: LD_ADDR_VAR 0 7
48353: PUSH
48354: LD_VAR 0 7
48358: PPUSH
48359: LD_INT 1
48361: PPUSH
48362: LD_VAR 0 14
48366: PPUSH
48367: CALL_OW 2
48371: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48372: LD_VAR 0 14
48376: PPUSH
48377: LD_VAR 0 9
48381: PPUSH
48382: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48386: LD_VAR 0 9
48390: PPUSH
48391: CALL_OW 313
48395: PUSH
48396: LD_INT 6
48398: EQUAL
48399: PUSH
48400: LD_VAR 0 9
48404: PPUSH
48405: CALL_OW 266
48409: PUSH
48410: LD_INT 32
48412: PUSH
48413: LD_INT 31
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: IN
48420: OR
48421: IFFALSE 48235
48423: GO 48232
48425: POP
48426: POP
// end else
48427: GO 48809
// for j = 1 to x do
48429: LD_ADDR_VAR 0 9
48433: PUSH
48434: DOUBLE
48435: LD_INT 1
48437: DEC
48438: ST_TO_ADDR
48439: LD_VAR 0 13
48443: PUSH
48444: FOR_TO
48445: IFFALSE 48807
// begin InitHc ;
48447: CALL_OW 19
// if not f then
48451: LD_VAR 0 12
48455: NOT
48456: IFFALSE 48545
// begin PrepareHuman ( false , i , skill ) ;
48458: LD_INT 0
48460: PPUSH
48461: LD_VAR 0 8
48465: PPUSH
48466: LD_VAR 0 4
48470: PPUSH
48471: CALL_OW 380
// un := CreateHuman ;
48475: LD_ADDR_VAR 0 14
48479: PUSH
48480: CALL_OW 44
48484: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48485: LD_ADDR_VAR 0 7
48489: PUSH
48490: LD_VAR 0 7
48494: PPUSH
48495: LD_INT 1
48497: PPUSH
48498: LD_VAR 0 14
48502: PPUSH
48503: CALL_OW 2
48507: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48508: LD_VAR 0 14
48512: PPUSH
48513: LD_VAR 0 1
48517: PPUSH
48518: CALL_OW 250
48522: PPUSH
48523: LD_VAR 0 1
48527: PPUSH
48528: CALL_OW 251
48532: PPUSH
48533: LD_INT 10
48535: PPUSH
48536: LD_INT 0
48538: PPUSH
48539: CALL_OW 50
// continue ;
48543: GO 48444
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48545: LD_VAR 0 12
48549: PUSH
48550: LD_INT 1
48552: ARRAY
48553: PPUSH
48554: CALL_OW 313
48558: PUSH
48559: LD_VAR 0 12
48563: PUSH
48564: LD_INT 1
48566: ARRAY
48567: PPUSH
48568: CALL_OW 266
48572: PUSH
48573: LD_INT 32
48575: PUSH
48576: LD_INT 31
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: IN
48583: AND
48584: PUSH
48585: LD_VAR 0 12
48589: PUSH
48590: LD_INT 1
48592: ARRAY
48593: PPUSH
48594: CALL_OW 313
48598: PUSH
48599: LD_INT 6
48601: EQUAL
48602: OR
48603: IFFALSE 48623
// f := Delete ( f , 1 ) ;
48605: LD_ADDR_VAR 0 12
48609: PUSH
48610: LD_VAR 0 12
48614: PPUSH
48615: LD_INT 1
48617: PPUSH
48618: CALL_OW 3
48622: ST_TO_ADDR
// if not f then
48623: LD_VAR 0 12
48627: NOT
48628: IFFALSE 48646
// begin x := x + 2 ;
48630: LD_ADDR_VAR 0 13
48634: PUSH
48635: LD_VAR 0 13
48639: PUSH
48640: LD_INT 2
48642: PLUS
48643: ST_TO_ADDR
// continue ;
48644: GO 48444
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48646: LD_VAR 0 12
48650: PUSH
48651: LD_INT 1
48653: ARRAY
48654: PPUSH
48655: CALL_OW 266
48659: PUSH
48660: LD_INT 5
48662: EQUAL
48663: IFFALSE 48737
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48665: LD_VAR 0 12
48669: PUSH
48670: LD_INT 1
48672: ARRAY
48673: PPUSH
48674: CALL_OW 313
48678: PUSH
48679: LD_INT 3
48681: LESS
48682: IFFALSE 48718
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48684: LD_INT 0
48686: PPUSH
48687: LD_INT 5
48689: PUSH
48690: LD_INT 8
48692: PUSH
48693: LD_INT 9
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: LIST
48700: PUSH
48701: LD_VAR 0 17
48705: ARRAY
48706: PPUSH
48707: LD_VAR 0 4
48711: PPUSH
48712: CALL_OW 380
48716: GO 48735
// PrepareHuman ( false , i , skill ) ;
48718: LD_INT 0
48720: PPUSH
48721: LD_VAR 0 8
48725: PPUSH
48726: LD_VAR 0 4
48730: PPUSH
48731: CALL_OW 380
// end else
48735: GO 48754
// PrepareHuman ( false , i , skill ) ;
48737: LD_INT 0
48739: PPUSH
48740: LD_VAR 0 8
48744: PPUSH
48745: LD_VAR 0 4
48749: PPUSH
48750: CALL_OW 380
// un := CreateHuman ;
48754: LD_ADDR_VAR 0 14
48758: PUSH
48759: CALL_OW 44
48763: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48764: LD_ADDR_VAR 0 7
48768: PUSH
48769: LD_VAR 0 7
48773: PPUSH
48774: LD_INT 1
48776: PPUSH
48777: LD_VAR 0 14
48781: PPUSH
48782: CALL_OW 2
48786: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48787: LD_VAR 0 14
48791: PPUSH
48792: LD_VAR 0 12
48796: PUSH
48797: LD_INT 1
48799: ARRAY
48800: PPUSH
48801: CALL_OW 52
// end ;
48805: GO 48444
48807: POP
48808: POP
// end ;
48809: GO 47746
48811: POP
48812: POP
// result := result ^ buildings ;
48813: LD_ADDR_VAR 0 7
48817: PUSH
48818: LD_VAR 0 7
48822: PUSH
48823: LD_VAR 0 18
48827: ADD
48828: ST_TO_ADDR
// end else
48829: GO 48972
// begin for i = 1 to personel do
48831: LD_ADDR_VAR 0 8
48835: PUSH
48836: DOUBLE
48837: LD_INT 1
48839: DEC
48840: ST_TO_ADDR
48841: LD_VAR 0 6
48845: PUSH
48846: FOR_TO
48847: IFFALSE 48970
// begin if i > 4 then
48849: LD_VAR 0 8
48853: PUSH
48854: LD_INT 4
48856: GREATER
48857: IFFALSE 48861
// break ;
48859: GO 48970
// x := personel [ i ] ;
48861: LD_ADDR_VAR 0 13
48865: PUSH
48866: LD_VAR 0 6
48870: PUSH
48871: LD_VAR 0 8
48875: ARRAY
48876: ST_TO_ADDR
// if x = - 1 then
48877: LD_VAR 0 13
48881: PUSH
48882: LD_INT 1
48884: NEG
48885: EQUAL
48886: IFFALSE 48890
// continue ;
48888: GO 48846
// PrepareHuman ( false , i , skill ) ;
48890: LD_INT 0
48892: PPUSH
48893: LD_VAR 0 8
48897: PPUSH
48898: LD_VAR 0 4
48902: PPUSH
48903: CALL_OW 380
// un := CreateHuman ;
48907: LD_ADDR_VAR 0 14
48911: PUSH
48912: CALL_OW 44
48916: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48917: LD_VAR 0 14
48921: PPUSH
48922: LD_VAR 0 1
48926: PPUSH
48927: CALL_OW 250
48931: PPUSH
48932: LD_VAR 0 1
48936: PPUSH
48937: CALL_OW 251
48941: PPUSH
48942: LD_INT 10
48944: PPUSH
48945: LD_INT 0
48947: PPUSH
48948: CALL_OW 50
// result := result ^ un ;
48952: LD_ADDR_VAR 0 7
48956: PUSH
48957: LD_VAR 0 7
48961: PUSH
48962: LD_VAR 0 14
48966: ADD
48967: ST_TO_ADDR
// end ;
48968: GO 48846
48970: POP
48971: POP
// end ; end ;
48972: LD_VAR 0 7
48976: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48977: LD_INT 0
48979: PPUSH
48980: PPUSH
48981: PPUSH
48982: PPUSH
48983: PPUSH
48984: PPUSH
48985: PPUSH
48986: PPUSH
48987: PPUSH
48988: PPUSH
48989: PPUSH
48990: PPUSH
48991: PPUSH
48992: PPUSH
48993: PPUSH
48994: PPUSH
// result := false ;
48995: LD_ADDR_VAR 0 3
48999: PUSH
49000: LD_INT 0
49002: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49003: LD_VAR 0 1
49007: NOT
49008: PUSH
49009: LD_VAR 0 1
49013: PPUSH
49014: CALL_OW 266
49018: PUSH
49019: LD_INT 32
49021: PUSH
49022: LD_INT 33
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: IN
49029: NOT
49030: OR
49031: IFFALSE 49035
// exit ;
49033: GO 50144
// nat := GetNation ( tower ) ;
49035: LD_ADDR_VAR 0 12
49039: PUSH
49040: LD_VAR 0 1
49044: PPUSH
49045: CALL_OW 248
49049: ST_TO_ADDR
// side := GetSide ( tower ) ;
49050: LD_ADDR_VAR 0 16
49054: PUSH
49055: LD_VAR 0 1
49059: PPUSH
49060: CALL_OW 255
49064: ST_TO_ADDR
// x := GetX ( tower ) ;
49065: LD_ADDR_VAR 0 10
49069: PUSH
49070: LD_VAR 0 1
49074: PPUSH
49075: CALL_OW 250
49079: ST_TO_ADDR
// y := GetY ( tower ) ;
49080: LD_ADDR_VAR 0 11
49084: PUSH
49085: LD_VAR 0 1
49089: PPUSH
49090: CALL_OW 251
49094: ST_TO_ADDR
// if not x or not y then
49095: LD_VAR 0 10
49099: NOT
49100: PUSH
49101: LD_VAR 0 11
49105: NOT
49106: OR
49107: IFFALSE 49111
// exit ;
49109: GO 50144
// weapon := 0 ;
49111: LD_ADDR_VAR 0 18
49115: PUSH
49116: LD_INT 0
49118: ST_TO_ADDR
// fac_list := [ ] ;
49119: LD_ADDR_VAR 0 17
49123: PUSH
49124: EMPTY
49125: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49126: LD_ADDR_VAR 0 6
49130: PUSH
49131: LD_VAR 0 1
49135: PPUSH
49136: CALL_OW 274
49140: PPUSH
49141: LD_VAR 0 2
49145: PPUSH
49146: LD_INT 0
49148: PPUSH
49149: CALL 46715 0 3
49153: PPUSH
49154: LD_INT 30
49156: PUSH
49157: LD_INT 3
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PPUSH
49164: CALL_OW 72
49168: ST_TO_ADDR
// if not factories then
49169: LD_VAR 0 6
49173: NOT
49174: IFFALSE 49178
// exit ;
49176: GO 50144
// for i in factories do
49178: LD_ADDR_VAR 0 8
49182: PUSH
49183: LD_VAR 0 6
49187: PUSH
49188: FOR_IN
49189: IFFALSE 49214
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49191: LD_ADDR_VAR 0 17
49195: PUSH
49196: LD_VAR 0 17
49200: PUSH
49201: LD_VAR 0 8
49205: PPUSH
49206: CALL_OW 478
49210: UNION
49211: ST_TO_ADDR
49212: GO 49188
49214: POP
49215: POP
// if not fac_list then
49216: LD_VAR 0 17
49220: NOT
49221: IFFALSE 49225
// exit ;
49223: GO 50144
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49225: LD_ADDR_VAR 0 5
49229: PUSH
49230: LD_INT 4
49232: PUSH
49233: LD_INT 5
49235: PUSH
49236: LD_INT 9
49238: PUSH
49239: LD_INT 10
49241: PUSH
49242: LD_INT 6
49244: PUSH
49245: LD_INT 7
49247: PUSH
49248: LD_INT 11
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 27
49262: PUSH
49263: LD_INT 28
49265: PUSH
49266: LD_INT 26
49268: PUSH
49269: LD_INT 30
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 43
49280: PUSH
49281: LD_INT 44
49283: PUSH
49284: LD_INT 46
49286: PUSH
49287: LD_INT 45
49289: PUSH
49290: LD_INT 47
49292: PUSH
49293: LD_INT 49
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: LIST
49308: PUSH
49309: LD_VAR 0 12
49313: ARRAY
49314: ST_TO_ADDR
// list := list isect fac_list ;
49315: LD_ADDR_VAR 0 5
49319: PUSH
49320: LD_VAR 0 5
49324: PUSH
49325: LD_VAR 0 17
49329: ISECT
49330: ST_TO_ADDR
// if not list then
49331: LD_VAR 0 5
49335: NOT
49336: IFFALSE 49340
// exit ;
49338: GO 50144
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49340: LD_VAR 0 12
49344: PUSH
49345: LD_INT 3
49347: EQUAL
49348: PUSH
49349: LD_INT 49
49351: PUSH
49352: LD_VAR 0 5
49356: IN
49357: AND
49358: PUSH
49359: LD_INT 31
49361: PPUSH
49362: LD_VAR 0 16
49366: PPUSH
49367: CALL_OW 321
49371: PUSH
49372: LD_INT 2
49374: EQUAL
49375: AND
49376: IFFALSE 49436
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49378: LD_INT 22
49380: PUSH
49381: LD_VAR 0 16
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 35
49392: PUSH
49393: LD_INT 49
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 91
49402: PUSH
49403: LD_VAR 0 1
49407: PUSH
49408: LD_INT 10
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: LIST
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: LIST
49420: PPUSH
49421: CALL_OW 69
49425: NOT
49426: IFFALSE 49436
// weapon := ru_time_lapser ;
49428: LD_ADDR_VAR 0 18
49432: PUSH
49433: LD_INT 49
49435: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49436: LD_VAR 0 12
49440: PUSH
49441: LD_INT 1
49443: PUSH
49444: LD_INT 2
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: IN
49451: PUSH
49452: LD_INT 11
49454: PUSH
49455: LD_VAR 0 5
49459: IN
49460: PUSH
49461: LD_INT 30
49463: PUSH
49464: LD_VAR 0 5
49468: IN
49469: OR
49470: AND
49471: PUSH
49472: LD_INT 6
49474: PPUSH
49475: LD_VAR 0 16
49479: PPUSH
49480: CALL_OW 321
49484: PUSH
49485: LD_INT 2
49487: EQUAL
49488: AND
49489: IFFALSE 49654
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49491: LD_INT 22
49493: PUSH
49494: LD_VAR 0 16
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 2
49505: PUSH
49506: LD_INT 35
49508: PUSH
49509: LD_INT 11
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 35
49518: PUSH
49519: LD_INT 30
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 91
49533: PUSH
49534: LD_VAR 0 1
49538: PUSH
49539: LD_INT 18
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: LIST
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: LIST
49551: PPUSH
49552: CALL_OW 69
49556: NOT
49557: PUSH
49558: LD_INT 22
49560: PUSH
49561: LD_VAR 0 16
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 2
49572: PUSH
49573: LD_INT 30
49575: PUSH
49576: LD_INT 32
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 30
49585: PUSH
49586: LD_INT 33
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 91
49600: PUSH
49601: LD_VAR 0 1
49605: PUSH
49606: LD_INT 12
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: LIST
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: LIST
49618: PUSH
49619: EMPTY
49620: LIST
49621: PPUSH
49622: CALL_OW 69
49626: PUSH
49627: LD_INT 2
49629: GREATER
49630: AND
49631: IFFALSE 49654
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49633: LD_ADDR_VAR 0 18
49637: PUSH
49638: LD_INT 11
49640: PUSH
49641: LD_INT 30
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_VAR 0 12
49652: ARRAY
49653: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49654: LD_VAR 0 18
49658: NOT
49659: PUSH
49660: LD_INT 40
49662: PPUSH
49663: LD_VAR 0 16
49667: PPUSH
49668: CALL_OW 321
49672: PUSH
49673: LD_INT 2
49675: EQUAL
49676: AND
49677: PUSH
49678: LD_INT 7
49680: PUSH
49681: LD_VAR 0 5
49685: IN
49686: PUSH
49687: LD_INT 28
49689: PUSH
49690: LD_VAR 0 5
49694: IN
49695: OR
49696: PUSH
49697: LD_INT 45
49699: PUSH
49700: LD_VAR 0 5
49704: IN
49705: OR
49706: AND
49707: IFFALSE 49961
// begin hex := GetHexInfo ( x , y ) ;
49709: LD_ADDR_VAR 0 4
49713: PUSH
49714: LD_VAR 0 10
49718: PPUSH
49719: LD_VAR 0 11
49723: PPUSH
49724: CALL_OW 546
49728: ST_TO_ADDR
// if hex [ 1 ] then
49729: LD_VAR 0 4
49733: PUSH
49734: LD_INT 1
49736: ARRAY
49737: IFFALSE 49741
// exit ;
49739: GO 50144
// height := hex [ 2 ] ;
49741: LD_ADDR_VAR 0 15
49745: PUSH
49746: LD_VAR 0 4
49750: PUSH
49751: LD_INT 2
49753: ARRAY
49754: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49755: LD_ADDR_VAR 0 14
49759: PUSH
49760: LD_INT 0
49762: PUSH
49763: LD_INT 2
49765: PUSH
49766: LD_INT 3
49768: PUSH
49769: LD_INT 5
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: ST_TO_ADDR
// for i in tmp do
49778: LD_ADDR_VAR 0 8
49782: PUSH
49783: LD_VAR 0 14
49787: PUSH
49788: FOR_IN
49789: IFFALSE 49959
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49791: LD_ADDR_VAR 0 9
49795: PUSH
49796: LD_VAR 0 10
49800: PPUSH
49801: LD_VAR 0 8
49805: PPUSH
49806: LD_INT 5
49808: PPUSH
49809: CALL_OW 272
49813: PUSH
49814: LD_VAR 0 11
49818: PPUSH
49819: LD_VAR 0 8
49823: PPUSH
49824: LD_INT 5
49826: PPUSH
49827: CALL_OW 273
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49836: LD_VAR 0 9
49840: PUSH
49841: LD_INT 1
49843: ARRAY
49844: PPUSH
49845: LD_VAR 0 9
49849: PUSH
49850: LD_INT 2
49852: ARRAY
49853: PPUSH
49854: CALL_OW 488
49858: IFFALSE 49957
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49860: LD_ADDR_VAR 0 4
49864: PUSH
49865: LD_VAR 0 9
49869: PUSH
49870: LD_INT 1
49872: ARRAY
49873: PPUSH
49874: LD_VAR 0 9
49878: PUSH
49879: LD_INT 2
49881: ARRAY
49882: PPUSH
49883: CALL_OW 546
49887: ST_TO_ADDR
// if hex [ 1 ] then
49888: LD_VAR 0 4
49892: PUSH
49893: LD_INT 1
49895: ARRAY
49896: IFFALSE 49900
// continue ;
49898: GO 49788
// h := hex [ 2 ] ;
49900: LD_ADDR_VAR 0 13
49904: PUSH
49905: LD_VAR 0 4
49909: PUSH
49910: LD_INT 2
49912: ARRAY
49913: ST_TO_ADDR
// if h + 7 < height then
49914: LD_VAR 0 13
49918: PUSH
49919: LD_INT 7
49921: PLUS
49922: PUSH
49923: LD_VAR 0 15
49927: LESS
49928: IFFALSE 49957
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49930: LD_ADDR_VAR 0 18
49934: PUSH
49935: LD_INT 7
49937: PUSH
49938: LD_INT 28
49940: PUSH
49941: LD_INT 45
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: LIST
49948: PUSH
49949: LD_VAR 0 12
49953: ARRAY
49954: ST_TO_ADDR
// break ;
49955: GO 49959
// end ; end ; end ;
49957: GO 49788
49959: POP
49960: POP
// end ; if not weapon then
49961: LD_VAR 0 18
49965: NOT
49966: IFFALSE 50026
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49968: LD_ADDR_VAR 0 5
49972: PUSH
49973: LD_VAR 0 5
49977: PUSH
49978: LD_INT 11
49980: PUSH
49981: LD_INT 30
49983: PUSH
49984: LD_INT 49
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: LIST
49991: DIFF
49992: ST_TO_ADDR
// if not list then
49993: LD_VAR 0 5
49997: NOT
49998: IFFALSE 50002
// exit ;
50000: GO 50144
// weapon := list [ rand ( 1 , list ) ] ;
50002: LD_ADDR_VAR 0 18
50006: PUSH
50007: LD_VAR 0 5
50011: PUSH
50012: LD_INT 1
50014: PPUSH
50015: LD_VAR 0 5
50019: PPUSH
50020: CALL_OW 12
50024: ARRAY
50025: ST_TO_ADDR
// end ; if weapon then
50026: LD_VAR 0 18
50030: IFFALSE 50144
// begin tmp := CostOfWeapon ( weapon ) ;
50032: LD_ADDR_VAR 0 14
50036: PUSH
50037: LD_VAR 0 18
50041: PPUSH
50042: CALL_OW 451
50046: ST_TO_ADDR
// j := GetBase ( tower ) ;
50047: LD_ADDR_VAR 0 9
50051: PUSH
50052: LD_VAR 0 1
50056: PPUSH
50057: CALL_OW 274
50061: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50062: LD_VAR 0 9
50066: PPUSH
50067: LD_INT 1
50069: PPUSH
50070: CALL_OW 275
50074: PUSH
50075: LD_VAR 0 14
50079: PUSH
50080: LD_INT 1
50082: ARRAY
50083: GREATEREQUAL
50084: PUSH
50085: LD_VAR 0 9
50089: PPUSH
50090: LD_INT 2
50092: PPUSH
50093: CALL_OW 275
50097: PUSH
50098: LD_VAR 0 14
50102: PUSH
50103: LD_INT 2
50105: ARRAY
50106: GREATEREQUAL
50107: AND
50108: PUSH
50109: LD_VAR 0 9
50113: PPUSH
50114: LD_INT 3
50116: PPUSH
50117: CALL_OW 275
50121: PUSH
50122: LD_VAR 0 14
50126: PUSH
50127: LD_INT 3
50129: ARRAY
50130: GREATEREQUAL
50131: AND
50132: IFFALSE 50144
// result := weapon ;
50134: LD_ADDR_VAR 0 3
50138: PUSH
50139: LD_VAR 0 18
50143: ST_TO_ADDR
// end ; end ;
50144: LD_VAR 0 3
50148: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50149: LD_INT 0
50151: PPUSH
50152: PPUSH
// result := true ;
50153: LD_ADDR_VAR 0 3
50157: PUSH
50158: LD_INT 1
50160: ST_TO_ADDR
// if array1 = array2 then
50161: LD_VAR 0 1
50165: PUSH
50166: LD_VAR 0 2
50170: EQUAL
50171: IFFALSE 50231
// begin for i = 1 to array1 do
50173: LD_ADDR_VAR 0 4
50177: PUSH
50178: DOUBLE
50179: LD_INT 1
50181: DEC
50182: ST_TO_ADDR
50183: LD_VAR 0 1
50187: PUSH
50188: FOR_TO
50189: IFFALSE 50227
// if array1 [ i ] <> array2 [ i ] then
50191: LD_VAR 0 1
50195: PUSH
50196: LD_VAR 0 4
50200: ARRAY
50201: PUSH
50202: LD_VAR 0 2
50206: PUSH
50207: LD_VAR 0 4
50211: ARRAY
50212: NONEQUAL
50213: IFFALSE 50225
// begin result := false ;
50215: LD_ADDR_VAR 0 3
50219: PUSH
50220: LD_INT 0
50222: ST_TO_ADDR
// break ;
50223: GO 50227
// end ;
50225: GO 50188
50227: POP
50228: POP
// end else
50229: GO 50239
// result := false ;
50231: LD_ADDR_VAR 0 3
50235: PUSH
50236: LD_INT 0
50238: ST_TO_ADDR
// end ;
50239: LD_VAR 0 3
50243: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50244: LD_INT 0
50246: PPUSH
50247: PPUSH
// if not array1 or not array2 then
50248: LD_VAR 0 1
50252: NOT
50253: PUSH
50254: LD_VAR 0 2
50258: NOT
50259: OR
50260: IFFALSE 50264
// exit ;
50262: GO 50328
// result := true ;
50264: LD_ADDR_VAR 0 3
50268: PUSH
50269: LD_INT 1
50271: ST_TO_ADDR
// for i = 1 to array1 do
50272: LD_ADDR_VAR 0 4
50276: PUSH
50277: DOUBLE
50278: LD_INT 1
50280: DEC
50281: ST_TO_ADDR
50282: LD_VAR 0 1
50286: PUSH
50287: FOR_TO
50288: IFFALSE 50326
// if array1 [ i ] <> array2 [ i ] then
50290: LD_VAR 0 1
50294: PUSH
50295: LD_VAR 0 4
50299: ARRAY
50300: PUSH
50301: LD_VAR 0 2
50305: PUSH
50306: LD_VAR 0 4
50310: ARRAY
50311: NONEQUAL
50312: IFFALSE 50324
// begin result := false ;
50314: LD_ADDR_VAR 0 3
50318: PUSH
50319: LD_INT 0
50321: ST_TO_ADDR
// break ;
50322: GO 50326
// end ;
50324: GO 50287
50326: POP
50327: POP
// end ;
50328: LD_VAR 0 3
50332: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50333: LD_INT 0
50335: PPUSH
50336: PPUSH
50337: PPUSH
// pom := GetBase ( fac ) ;
50338: LD_ADDR_VAR 0 5
50342: PUSH
50343: LD_VAR 0 1
50347: PPUSH
50348: CALL_OW 274
50352: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50353: LD_ADDR_VAR 0 4
50357: PUSH
50358: LD_VAR 0 2
50362: PUSH
50363: LD_INT 1
50365: ARRAY
50366: PPUSH
50367: LD_VAR 0 2
50371: PUSH
50372: LD_INT 2
50374: ARRAY
50375: PPUSH
50376: LD_VAR 0 2
50380: PUSH
50381: LD_INT 3
50383: ARRAY
50384: PPUSH
50385: LD_VAR 0 2
50389: PUSH
50390: LD_INT 4
50392: ARRAY
50393: PPUSH
50394: CALL_OW 449
50398: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50399: LD_ADDR_VAR 0 3
50403: PUSH
50404: LD_VAR 0 5
50408: PPUSH
50409: LD_INT 1
50411: PPUSH
50412: CALL_OW 275
50416: PUSH
50417: LD_VAR 0 4
50421: PUSH
50422: LD_INT 1
50424: ARRAY
50425: GREATEREQUAL
50426: PUSH
50427: LD_VAR 0 5
50431: PPUSH
50432: LD_INT 2
50434: PPUSH
50435: CALL_OW 275
50439: PUSH
50440: LD_VAR 0 4
50444: PUSH
50445: LD_INT 2
50447: ARRAY
50448: GREATEREQUAL
50449: AND
50450: PUSH
50451: LD_VAR 0 5
50455: PPUSH
50456: LD_INT 3
50458: PPUSH
50459: CALL_OW 275
50463: PUSH
50464: LD_VAR 0 4
50468: PUSH
50469: LD_INT 3
50471: ARRAY
50472: GREATEREQUAL
50473: AND
50474: ST_TO_ADDR
// end ;
50475: LD_VAR 0 3
50479: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50480: LD_INT 0
50482: PPUSH
50483: PPUSH
50484: PPUSH
50485: PPUSH
// pom := GetBase ( building ) ;
50486: LD_ADDR_VAR 0 3
50490: PUSH
50491: LD_VAR 0 1
50495: PPUSH
50496: CALL_OW 274
50500: ST_TO_ADDR
// if not pom then
50501: LD_VAR 0 3
50505: NOT
50506: IFFALSE 50510
// exit ;
50508: GO 50680
// btype := GetBType ( building ) ;
50510: LD_ADDR_VAR 0 5
50514: PUSH
50515: LD_VAR 0 1
50519: PPUSH
50520: CALL_OW 266
50524: ST_TO_ADDR
// if btype = b_armoury then
50525: LD_VAR 0 5
50529: PUSH
50530: LD_INT 4
50532: EQUAL
50533: IFFALSE 50543
// btype := b_barracks ;
50535: LD_ADDR_VAR 0 5
50539: PUSH
50540: LD_INT 5
50542: ST_TO_ADDR
// if btype = b_depot then
50543: LD_VAR 0 5
50547: PUSH
50548: LD_INT 0
50550: EQUAL
50551: IFFALSE 50561
// btype := b_warehouse ;
50553: LD_ADDR_VAR 0 5
50557: PUSH
50558: LD_INT 1
50560: ST_TO_ADDR
// if btype = b_workshop then
50561: LD_VAR 0 5
50565: PUSH
50566: LD_INT 2
50568: EQUAL
50569: IFFALSE 50579
// btype := b_factory ;
50571: LD_ADDR_VAR 0 5
50575: PUSH
50576: LD_INT 3
50578: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50579: LD_ADDR_VAR 0 4
50583: PUSH
50584: LD_VAR 0 5
50588: PPUSH
50589: LD_VAR 0 1
50593: PPUSH
50594: CALL_OW 248
50598: PPUSH
50599: CALL_OW 450
50603: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50604: LD_ADDR_VAR 0 2
50608: PUSH
50609: LD_VAR 0 3
50613: PPUSH
50614: LD_INT 1
50616: PPUSH
50617: CALL_OW 275
50621: PUSH
50622: LD_VAR 0 4
50626: PUSH
50627: LD_INT 1
50629: ARRAY
50630: GREATEREQUAL
50631: PUSH
50632: LD_VAR 0 3
50636: PPUSH
50637: LD_INT 2
50639: PPUSH
50640: CALL_OW 275
50644: PUSH
50645: LD_VAR 0 4
50649: PUSH
50650: LD_INT 2
50652: ARRAY
50653: GREATEREQUAL
50654: AND
50655: PUSH
50656: LD_VAR 0 3
50660: PPUSH
50661: LD_INT 3
50663: PPUSH
50664: CALL_OW 275
50668: PUSH
50669: LD_VAR 0 4
50673: PUSH
50674: LD_INT 3
50676: ARRAY
50677: GREATEREQUAL
50678: AND
50679: ST_TO_ADDR
// end ;
50680: LD_VAR 0 2
50684: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50685: LD_INT 0
50687: PPUSH
50688: PPUSH
50689: PPUSH
// pom := GetBase ( building ) ;
50690: LD_ADDR_VAR 0 4
50694: PUSH
50695: LD_VAR 0 1
50699: PPUSH
50700: CALL_OW 274
50704: ST_TO_ADDR
// if not pom then
50705: LD_VAR 0 4
50709: NOT
50710: IFFALSE 50714
// exit ;
50712: GO 50815
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50714: LD_ADDR_VAR 0 5
50718: PUSH
50719: LD_VAR 0 2
50723: PPUSH
50724: LD_VAR 0 1
50728: PPUSH
50729: CALL_OW 248
50733: PPUSH
50734: CALL_OW 450
50738: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50739: LD_ADDR_VAR 0 3
50743: PUSH
50744: LD_VAR 0 4
50748: PPUSH
50749: LD_INT 1
50751: PPUSH
50752: CALL_OW 275
50756: PUSH
50757: LD_VAR 0 5
50761: PUSH
50762: LD_INT 1
50764: ARRAY
50765: GREATEREQUAL
50766: PUSH
50767: LD_VAR 0 4
50771: PPUSH
50772: LD_INT 2
50774: PPUSH
50775: CALL_OW 275
50779: PUSH
50780: LD_VAR 0 5
50784: PUSH
50785: LD_INT 2
50787: ARRAY
50788: GREATEREQUAL
50789: AND
50790: PUSH
50791: LD_VAR 0 4
50795: PPUSH
50796: LD_INT 3
50798: PPUSH
50799: CALL_OW 275
50803: PUSH
50804: LD_VAR 0 5
50808: PUSH
50809: LD_INT 3
50811: ARRAY
50812: GREATEREQUAL
50813: AND
50814: ST_TO_ADDR
// end ;
50815: LD_VAR 0 3
50819: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50820: LD_INT 0
50822: PPUSH
50823: PPUSH
50824: PPUSH
50825: PPUSH
50826: PPUSH
50827: PPUSH
50828: PPUSH
50829: PPUSH
50830: PPUSH
50831: PPUSH
50832: PPUSH
// result := false ;
50833: LD_ADDR_VAR 0 8
50837: PUSH
50838: LD_INT 0
50840: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50841: LD_VAR 0 5
50845: NOT
50846: PUSH
50847: LD_VAR 0 1
50851: NOT
50852: OR
50853: PUSH
50854: LD_VAR 0 2
50858: NOT
50859: OR
50860: PUSH
50861: LD_VAR 0 3
50865: NOT
50866: OR
50867: IFFALSE 50871
// exit ;
50869: GO 51685
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50871: LD_ADDR_VAR 0 14
50875: PUSH
50876: LD_VAR 0 1
50880: PPUSH
50881: LD_VAR 0 2
50885: PPUSH
50886: LD_VAR 0 3
50890: PPUSH
50891: LD_VAR 0 4
50895: PPUSH
50896: LD_VAR 0 5
50900: PUSH
50901: LD_INT 1
50903: ARRAY
50904: PPUSH
50905: CALL_OW 248
50909: PPUSH
50910: LD_INT 0
50912: PPUSH
50913: CALL 52922 0 6
50917: ST_TO_ADDR
// if not hexes then
50918: LD_VAR 0 14
50922: NOT
50923: IFFALSE 50927
// exit ;
50925: GO 51685
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50927: LD_ADDR_VAR 0 17
50931: PUSH
50932: LD_VAR 0 5
50936: PPUSH
50937: LD_INT 22
50939: PUSH
50940: LD_VAR 0 13
50944: PPUSH
50945: CALL_OW 255
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 2
50956: PUSH
50957: LD_INT 30
50959: PUSH
50960: LD_INT 0
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 30
50969: PUSH
50970: LD_INT 1
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: LIST
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PPUSH
50986: CALL_OW 72
50990: ST_TO_ADDR
// for i = 1 to hexes do
50991: LD_ADDR_VAR 0 9
50995: PUSH
50996: DOUBLE
50997: LD_INT 1
50999: DEC
51000: ST_TO_ADDR
51001: LD_VAR 0 14
51005: PUSH
51006: FOR_TO
51007: IFFALSE 51683
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51009: LD_ADDR_VAR 0 13
51013: PUSH
51014: LD_VAR 0 14
51018: PUSH
51019: LD_VAR 0 9
51023: ARRAY
51024: PUSH
51025: LD_INT 1
51027: ARRAY
51028: PPUSH
51029: LD_VAR 0 14
51033: PUSH
51034: LD_VAR 0 9
51038: ARRAY
51039: PUSH
51040: LD_INT 2
51042: ARRAY
51043: PPUSH
51044: CALL_OW 428
51048: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51049: LD_VAR 0 14
51053: PUSH
51054: LD_VAR 0 9
51058: ARRAY
51059: PUSH
51060: LD_INT 1
51062: ARRAY
51063: PPUSH
51064: LD_VAR 0 14
51068: PUSH
51069: LD_VAR 0 9
51073: ARRAY
51074: PUSH
51075: LD_INT 2
51077: ARRAY
51078: PPUSH
51079: CALL_OW 351
51083: PUSH
51084: LD_VAR 0 14
51088: PUSH
51089: LD_VAR 0 9
51093: ARRAY
51094: PUSH
51095: LD_INT 1
51097: ARRAY
51098: PPUSH
51099: LD_VAR 0 14
51103: PUSH
51104: LD_VAR 0 9
51108: ARRAY
51109: PUSH
51110: LD_INT 2
51112: ARRAY
51113: PPUSH
51114: CALL_OW 488
51118: NOT
51119: OR
51120: PUSH
51121: LD_VAR 0 13
51125: PPUSH
51126: CALL_OW 247
51130: PUSH
51131: LD_INT 3
51133: EQUAL
51134: OR
51135: IFFALSE 51141
// exit ;
51137: POP
51138: POP
51139: GO 51685
// if not tmp then
51141: LD_VAR 0 13
51145: NOT
51146: IFFALSE 51150
// continue ;
51148: GO 51006
// result := true ;
51150: LD_ADDR_VAR 0 8
51154: PUSH
51155: LD_INT 1
51157: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51158: LD_VAR 0 6
51162: PUSH
51163: LD_VAR 0 13
51167: PPUSH
51168: CALL_OW 247
51172: PUSH
51173: LD_INT 2
51175: EQUAL
51176: AND
51177: PUSH
51178: LD_VAR 0 13
51182: PPUSH
51183: CALL_OW 263
51187: PUSH
51188: LD_INT 1
51190: EQUAL
51191: AND
51192: IFFALSE 51356
// begin if IsDrivenBy ( tmp ) then
51194: LD_VAR 0 13
51198: PPUSH
51199: CALL_OW 311
51203: IFFALSE 51207
// continue ;
51205: GO 51006
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51207: LD_VAR 0 6
51211: PPUSH
51212: LD_INT 3
51214: PUSH
51215: LD_INT 60
51217: PUSH
51218: EMPTY
51219: LIST
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 3
51227: PUSH
51228: LD_INT 55
51230: PUSH
51231: EMPTY
51232: LIST
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PPUSH
51242: CALL_OW 72
51246: IFFALSE 51354
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51248: LD_ADDR_VAR 0 18
51252: PUSH
51253: LD_VAR 0 6
51257: PPUSH
51258: LD_INT 3
51260: PUSH
51261: LD_INT 60
51263: PUSH
51264: EMPTY
51265: LIST
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 3
51273: PUSH
51274: LD_INT 55
51276: PUSH
51277: EMPTY
51278: LIST
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PPUSH
51288: CALL_OW 72
51292: PUSH
51293: LD_INT 1
51295: ARRAY
51296: ST_TO_ADDR
// if IsInUnit ( driver ) then
51297: LD_VAR 0 18
51301: PPUSH
51302: CALL_OW 310
51306: IFFALSE 51317
// ComExit ( driver ) ;
51308: LD_VAR 0 18
51312: PPUSH
51313: CALL 76627 0 1
// AddComEnterUnit ( driver , tmp ) ;
51317: LD_VAR 0 18
51321: PPUSH
51322: LD_VAR 0 13
51326: PPUSH
51327: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51331: LD_VAR 0 18
51335: PPUSH
51336: LD_VAR 0 7
51340: PPUSH
51341: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51345: LD_VAR 0 18
51349: PPUSH
51350: CALL_OW 181
// end ; continue ;
51354: GO 51006
// end ; if not cleaners or not tmp in cleaners then
51356: LD_VAR 0 6
51360: NOT
51361: PUSH
51362: LD_VAR 0 13
51366: PUSH
51367: LD_VAR 0 6
51371: IN
51372: NOT
51373: OR
51374: IFFALSE 51681
// begin if dep then
51376: LD_VAR 0 17
51380: IFFALSE 51516
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51382: LD_ADDR_VAR 0 16
51386: PUSH
51387: LD_VAR 0 17
51391: PUSH
51392: LD_INT 1
51394: ARRAY
51395: PPUSH
51396: CALL_OW 250
51400: PPUSH
51401: LD_VAR 0 17
51405: PUSH
51406: LD_INT 1
51408: ARRAY
51409: PPUSH
51410: CALL_OW 254
51414: PPUSH
51415: LD_INT 5
51417: PPUSH
51418: CALL_OW 272
51422: PUSH
51423: LD_VAR 0 17
51427: PUSH
51428: LD_INT 1
51430: ARRAY
51431: PPUSH
51432: CALL_OW 251
51436: PPUSH
51437: LD_VAR 0 17
51441: PUSH
51442: LD_INT 1
51444: ARRAY
51445: PPUSH
51446: CALL_OW 254
51450: PPUSH
51451: LD_INT 5
51453: PPUSH
51454: CALL_OW 273
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51463: LD_VAR 0 16
51467: PUSH
51468: LD_INT 1
51470: ARRAY
51471: PPUSH
51472: LD_VAR 0 16
51476: PUSH
51477: LD_INT 2
51479: ARRAY
51480: PPUSH
51481: CALL_OW 488
51485: IFFALSE 51516
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51487: LD_VAR 0 13
51491: PPUSH
51492: LD_VAR 0 16
51496: PUSH
51497: LD_INT 1
51499: ARRAY
51500: PPUSH
51501: LD_VAR 0 16
51505: PUSH
51506: LD_INT 2
51508: ARRAY
51509: PPUSH
51510: CALL_OW 111
// continue ;
51514: GO 51006
// end ; end ; r := GetDir ( tmp ) ;
51516: LD_ADDR_VAR 0 15
51520: PUSH
51521: LD_VAR 0 13
51525: PPUSH
51526: CALL_OW 254
51530: ST_TO_ADDR
// if r = 5 then
51531: LD_VAR 0 15
51535: PUSH
51536: LD_INT 5
51538: EQUAL
51539: IFFALSE 51549
// r := 0 ;
51541: LD_ADDR_VAR 0 15
51545: PUSH
51546: LD_INT 0
51548: ST_TO_ADDR
// for j = r to 5 do
51549: LD_ADDR_VAR 0 10
51553: PUSH
51554: DOUBLE
51555: LD_VAR 0 15
51559: DEC
51560: ST_TO_ADDR
51561: LD_INT 5
51563: PUSH
51564: FOR_TO
51565: IFFALSE 51679
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51567: LD_ADDR_VAR 0 11
51571: PUSH
51572: LD_VAR 0 13
51576: PPUSH
51577: CALL_OW 250
51581: PPUSH
51582: LD_VAR 0 10
51586: PPUSH
51587: LD_INT 2
51589: PPUSH
51590: CALL_OW 272
51594: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51595: LD_ADDR_VAR 0 12
51599: PUSH
51600: LD_VAR 0 13
51604: PPUSH
51605: CALL_OW 251
51609: PPUSH
51610: LD_VAR 0 10
51614: PPUSH
51615: LD_INT 2
51617: PPUSH
51618: CALL_OW 273
51622: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51623: LD_VAR 0 11
51627: PPUSH
51628: LD_VAR 0 12
51632: PPUSH
51633: CALL_OW 488
51637: PUSH
51638: LD_VAR 0 11
51642: PPUSH
51643: LD_VAR 0 12
51647: PPUSH
51648: CALL_OW 428
51652: NOT
51653: AND
51654: IFFALSE 51677
// begin ComMoveXY ( tmp , _x , _y ) ;
51656: LD_VAR 0 13
51660: PPUSH
51661: LD_VAR 0 11
51665: PPUSH
51666: LD_VAR 0 12
51670: PPUSH
51671: CALL_OW 111
// break ;
51675: GO 51679
// end ; end ;
51677: GO 51564
51679: POP
51680: POP
// end ; end ;
51681: GO 51006
51683: POP
51684: POP
// end ;
51685: LD_VAR 0 8
51689: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51690: LD_INT 0
51692: PPUSH
// result := true ;
51693: LD_ADDR_VAR 0 3
51697: PUSH
51698: LD_INT 1
51700: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51701: LD_VAR 0 2
51705: PUSH
51706: LD_INT 24
51708: DOUBLE
51709: EQUAL
51710: IFTRUE 51720
51712: LD_INT 33
51714: DOUBLE
51715: EQUAL
51716: IFTRUE 51720
51718: GO 51745
51720: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51721: LD_ADDR_VAR 0 3
51725: PUSH
51726: LD_INT 32
51728: PPUSH
51729: LD_VAR 0 1
51733: PPUSH
51734: CALL_OW 321
51738: PUSH
51739: LD_INT 2
51741: EQUAL
51742: ST_TO_ADDR
51743: GO 52065
51745: LD_INT 20
51747: DOUBLE
51748: EQUAL
51749: IFTRUE 51753
51751: GO 51778
51753: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51754: LD_ADDR_VAR 0 3
51758: PUSH
51759: LD_INT 6
51761: PPUSH
51762: LD_VAR 0 1
51766: PPUSH
51767: CALL_OW 321
51771: PUSH
51772: LD_INT 2
51774: EQUAL
51775: ST_TO_ADDR
51776: GO 52065
51778: LD_INT 22
51780: DOUBLE
51781: EQUAL
51782: IFTRUE 51792
51784: LD_INT 36
51786: DOUBLE
51787: EQUAL
51788: IFTRUE 51792
51790: GO 51817
51792: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51793: LD_ADDR_VAR 0 3
51797: PUSH
51798: LD_INT 15
51800: PPUSH
51801: LD_VAR 0 1
51805: PPUSH
51806: CALL_OW 321
51810: PUSH
51811: LD_INT 2
51813: EQUAL
51814: ST_TO_ADDR
51815: GO 52065
51817: LD_INT 30
51819: DOUBLE
51820: EQUAL
51821: IFTRUE 51825
51823: GO 51850
51825: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51826: LD_ADDR_VAR 0 3
51830: PUSH
51831: LD_INT 20
51833: PPUSH
51834: LD_VAR 0 1
51838: PPUSH
51839: CALL_OW 321
51843: PUSH
51844: LD_INT 2
51846: EQUAL
51847: ST_TO_ADDR
51848: GO 52065
51850: LD_INT 28
51852: DOUBLE
51853: EQUAL
51854: IFTRUE 51864
51856: LD_INT 21
51858: DOUBLE
51859: EQUAL
51860: IFTRUE 51864
51862: GO 51889
51864: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51865: LD_ADDR_VAR 0 3
51869: PUSH
51870: LD_INT 21
51872: PPUSH
51873: LD_VAR 0 1
51877: PPUSH
51878: CALL_OW 321
51882: PUSH
51883: LD_INT 2
51885: EQUAL
51886: ST_TO_ADDR
51887: GO 52065
51889: LD_INT 16
51891: DOUBLE
51892: EQUAL
51893: IFTRUE 51897
51895: GO 51924
51897: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51898: LD_ADDR_VAR 0 3
51902: PUSH
51903: LD_EXP 58
51907: PPUSH
51908: LD_VAR 0 1
51912: PPUSH
51913: CALL_OW 321
51917: PUSH
51918: LD_INT 2
51920: EQUAL
51921: ST_TO_ADDR
51922: GO 52065
51924: LD_INT 19
51926: DOUBLE
51927: EQUAL
51928: IFTRUE 51938
51930: LD_INT 23
51932: DOUBLE
51933: EQUAL
51934: IFTRUE 51938
51936: GO 51965
51938: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51939: LD_ADDR_VAR 0 3
51943: PUSH
51944: LD_EXP 57
51948: PPUSH
51949: LD_VAR 0 1
51953: PPUSH
51954: CALL_OW 321
51958: PUSH
51959: LD_INT 2
51961: EQUAL
51962: ST_TO_ADDR
51963: GO 52065
51965: LD_INT 17
51967: DOUBLE
51968: EQUAL
51969: IFTRUE 51973
51971: GO 51998
51973: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51974: LD_ADDR_VAR 0 3
51978: PUSH
51979: LD_INT 39
51981: PPUSH
51982: LD_VAR 0 1
51986: PPUSH
51987: CALL_OW 321
51991: PUSH
51992: LD_INT 2
51994: EQUAL
51995: ST_TO_ADDR
51996: GO 52065
51998: LD_INT 18
52000: DOUBLE
52001: EQUAL
52002: IFTRUE 52006
52004: GO 52031
52006: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52007: LD_ADDR_VAR 0 3
52011: PUSH
52012: LD_INT 40
52014: PPUSH
52015: LD_VAR 0 1
52019: PPUSH
52020: CALL_OW 321
52024: PUSH
52025: LD_INT 2
52027: EQUAL
52028: ST_TO_ADDR
52029: GO 52065
52031: LD_INT 27
52033: DOUBLE
52034: EQUAL
52035: IFTRUE 52039
52037: GO 52064
52039: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52040: LD_ADDR_VAR 0 3
52044: PUSH
52045: LD_INT 35
52047: PPUSH
52048: LD_VAR 0 1
52052: PPUSH
52053: CALL_OW 321
52057: PUSH
52058: LD_INT 2
52060: EQUAL
52061: ST_TO_ADDR
52062: GO 52065
52064: POP
// end ;
52065: LD_VAR 0 3
52069: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52070: LD_INT 0
52072: PPUSH
52073: PPUSH
52074: PPUSH
52075: PPUSH
52076: PPUSH
52077: PPUSH
52078: PPUSH
52079: PPUSH
52080: PPUSH
52081: PPUSH
52082: PPUSH
// result := false ;
52083: LD_ADDR_VAR 0 6
52087: PUSH
52088: LD_INT 0
52090: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52091: LD_VAR 0 1
52095: NOT
52096: PUSH
52097: LD_VAR 0 1
52101: PPUSH
52102: CALL_OW 266
52106: PUSH
52107: LD_INT 0
52109: PUSH
52110: LD_INT 1
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: IN
52117: NOT
52118: OR
52119: PUSH
52120: LD_VAR 0 2
52124: NOT
52125: OR
52126: PUSH
52127: LD_VAR 0 5
52131: PUSH
52132: LD_INT 0
52134: PUSH
52135: LD_INT 1
52137: PUSH
52138: LD_INT 2
52140: PUSH
52141: LD_INT 3
52143: PUSH
52144: LD_INT 4
52146: PUSH
52147: LD_INT 5
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: IN
52158: NOT
52159: OR
52160: PUSH
52161: LD_VAR 0 3
52165: PPUSH
52166: LD_VAR 0 4
52170: PPUSH
52171: CALL_OW 488
52175: NOT
52176: OR
52177: IFFALSE 52181
// exit ;
52179: GO 52917
// side := GetSide ( depot ) ;
52181: LD_ADDR_VAR 0 9
52185: PUSH
52186: LD_VAR 0 1
52190: PPUSH
52191: CALL_OW 255
52195: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52196: LD_VAR 0 9
52200: PPUSH
52201: LD_VAR 0 2
52205: PPUSH
52206: CALL 51690 0 2
52210: NOT
52211: IFFALSE 52215
// exit ;
52213: GO 52917
// pom := GetBase ( depot ) ;
52215: LD_ADDR_VAR 0 10
52219: PUSH
52220: LD_VAR 0 1
52224: PPUSH
52225: CALL_OW 274
52229: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52230: LD_ADDR_VAR 0 11
52234: PUSH
52235: LD_VAR 0 2
52239: PPUSH
52240: LD_VAR 0 1
52244: PPUSH
52245: CALL_OW 248
52249: PPUSH
52250: CALL_OW 450
52254: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52255: LD_VAR 0 10
52259: PPUSH
52260: LD_INT 1
52262: PPUSH
52263: CALL_OW 275
52267: PUSH
52268: LD_VAR 0 11
52272: PUSH
52273: LD_INT 1
52275: ARRAY
52276: GREATEREQUAL
52277: PUSH
52278: LD_VAR 0 10
52282: PPUSH
52283: LD_INT 2
52285: PPUSH
52286: CALL_OW 275
52290: PUSH
52291: LD_VAR 0 11
52295: PUSH
52296: LD_INT 2
52298: ARRAY
52299: GREATEREQUAL
52300: AND
52301: PUSH
52302: LD_VAR 0 10
52306: PPUSH
52307: LD_INT 3
52309: PPUSH
52310: CALL_OW 275
52314: PUSH
52315: LD_VAR 0 11
52319: PUSH
52320: LD_INT 3
52322: ARRAY
52323: GREATEREQUAL
52324: AND
52325: NOT
52326: IFFALSE 52330
// exit ;
52328: GO 52917
// if GetBType ( depot ) = b_depot then
52330: LD_VAR 0 1
52334: PPUSH
52335: CALL_OW 266
52339: PUSH
52340: LD_INT 0
52342: EQUAL
52343: IFFALSE 52355
// dist := 28 else
52345: LD_ADDR_VAR 0 14
52349: PUSH
52350: LD_INT 28
52352: ST_TO_ADDR
52353: GO 52363
// dist := 36 ;
52355: LD_ADDR_VAR 0 14
52359: PUSH
52360: LD_INT 36
52362: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52363: LD_VAR 0 1
52367: PPUSH
52368: LD_VAR 0 3
52372: PPUSH
52373: LD_VAR 0 4
52377: PPUSH
52378: CALL_OW 297
52382: PUSH
52383: LD_VAR 0 14
52387: GREATER
52388: IFFALSE 52392
// exit ;
52390: GO 52917
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52392: LD_ADDR_VAR 0 12
52396: PUSH
52397: LD_VAR 0 2
52401: PPUSH
52402: LD_VAR 0 3
52406: PPUSH
52407: LD_VAR 0 4
52411: PPUSH
52412: LD_VAR 0 5
52416: PPUSH
52417: LD_VAR 0 1
52421: PPUSH
52422: CALL_OW 248
52426: PPUSH
52427: LD_INT 0
52429: PPUSH
52430: CALL 52922 0 6
52434: ST_TO_ADDR
// if not hexes then
52435: LD_VAR 0 12
52439: NOT
52440: IFFALSE 52444
// exit ;
52442: GO 52917
// hex := GetHexInfo ( x , y ) ;
52444: LD_ADDR_VAR 0 15
52448: PUSH
52449: LD_VAR 0 3
52453: PPUSH
52454: LD_VAR 0 4
52458: PPUSH
52459: CALL_OW 546
52463: ST_TO_ADDR
// if hex [ 1 ] then
52464: LD_VAR 0 15
52468: PUSH
52469: LD_INT 1
52471: ARRAY
52472: IFFALSE 52476
// exit ;
52474: GO 52917
// height := hex [ 2 ] ;
52476: LD_ADDR_VAR 0 13
52480: PUSH
52481: LD_VAR 0 15
52485: PUSH
52486: LD_INT 2
52488: ARRAY
52489: ST_TO_ADDR
// for i = 1 to hexes do
52490: LD_ADDR_VAR 0 7
52494: PUSH
52495: DOUBLE
52496: LD_INT 1
52498: DEC
52499: ST_TO_ADDR
52500: LD_VAR 0 12
52504: PUSH
52505: FOR_TO
52506: IFFALSE 52836
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52508: LD_VAR 0 12
52512: PUSH
52513: LD_VAR 0 7
52517: ARRAY
52518: PUSH
52519: LD_INT 1
52521: ARRAY
52522: PPUSH
52523: LD_VAR 0 12
52527: PUSH
52528: LD_VAR 0 7
52532: ARRAY
52533: PUSH
52534: LD_INT 2
52536: ARRAY
52537: PPUSH
52538: CALL_OW 488
52542: NOT
52543: PUSH
52544: LD_VAR 0 12
52548: PUSH
52549: LD_VAR 0 7
52553: ARRAY
52554: PUSH
52555: LD_INT 1
52557: ARRAY
52558: PPUSH
52559: LD_VAR 0 12
52563: PUSH
52564: LD_VAR 0 7
52568: ARRAY
52569: PUSH
52570: LD_INT 2
52572: ARRAY
52573: PPUSH
52574: CALL_OW 428
52578: PUSH
52579: LD_INT 0
52581: GREATER
52582: OR
52583: PUSH
52584: LD_VAR 0 12
52588: PUSH
52589: LD_VAR 0 7
52593: ARRAY
52594: PUSH
52595: LD_INT 1
52597: ARRAY
52598: PPUSH
52599: LD_VAR 0 12
52603: PUSH
52604: LD_VAR 0 7
52608: ARRAY
52609: PUSH
52610: LD_INT 2
52612: ARRAY
52613: PPUSH
52614: CALL_OW 351
52618: OR
52619: IFFALSE 52625
// exit ;
52621: POP
52622: POP
52623: GO 52917
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52625: LD_ADDR_VAR 0 8
52629: PUSH
52630: LD_VAR 0 12
52634: PUSH
52635: LD_VAR 0 7
52639: ARRAY
52640: PUSH
52641: LD_INT 1
52643: ARRAY
52644: PPUSH
52645: LD_VAR 0 12
52649: PUSH
52650: LD_VAR 0 7
52654: ARRAY
52655: PUSH
52656: LD_INT 2
52658: ARRAY
52659: PPUSH
52660: CALL_OW 546
52664: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52665: LD_VAR 0 8
52669: PUSH
52670: LD_INT 1
52672: ARRAY
52673: PUSH
52674: LD_VAR 0 8
52678: PUSH
52679: LD_INT 2
52681: ARRAY
52682: PUSH
52683: LD_VAR 0 13
52687: PUSH
52688: LD_INT 2
52690: PLUS
52691: GREATER
52692: OR
52693: PUSH
52694: LD_VAR 0 8
52698: PUSH
52699: LD_INT 2
52701: ARRAY
52702: PUSH
52703: LD_VAR 0 13
52707: PUSH
52708: LD_INT 2
52710: MINUS
52711: LESS
52712: OR
52713: PUSH
52714: LD_VAR 0 8
52718: PUSH
52719: LD_INT 3
52721: ARRAY
52722: PUSH
52723: LD_INT 0
52725: PUSH
52726: LD_INT 8
52728: PUSH
52729: LD_INT 9
52731: PUSH
52732: LD_INT 10
52734: PUSH
52735: LD_INT 11
52737: PUSH
52738: LD_INT 12
52740: PUSH
52741: LD_INT 13
52743: PUSH
52744: LD_INT 16
52746: PUSH
52747: LD_INT 17
52749: PUSH
52750: LD_INT 18
52752: PUSH
52753: LD_INT 19
52755: PUSH
52756: LD_INT 20
52758: PUSH
52759: LD_INT 21
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: IN
52777: NOT
52778: OR
52779: PUSH
52780: LD_VAR 0 8
52784: PUSH
52785: LD_INT 5
52787: ARRAY
52788: NOT
52789: OR
52790: PUSH
52791: LD_VAR 0 8
52795: PUSH
52796: LD_INT 6
52798: ARRAY
52799: PUSH
52800: LD_INT 1
52802: PUSH
52803: LD_INT 2
52805: PUSH
52806: LD_INT 7
52808: PUSH
52809: LD_INT 9
52811: PUSH
52812: LD_INT 10
52814: PUSH
52815: LD_INT 11
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: IN
52826: NOT
52827: OR
52828: IFFALSE 52834
// exit ;
52830: POP
52831: POP
52832: GO 52917
// end ;
52834: GO 52505
52836: POP
52837: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52838: LD_VAR 0 9
52842: PPUSH
52843: LD_VAR 0 3
52847: PPUSH
52848: LD_VAR 0 4
52852: PPUSH
52853: LD_INT 20
52855: PPUSH
52856: CALL 44863 0 4
52860: PUSH
52861: LD_INT 4
52863: ARRAY
52864: IFFALSE 52868
// exit ;
52866: GO 52917
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52868: LD_VAR 0 2
52872: PUSH
52873: LD_INT 29
52875: PUSH
52876: LD_INT 30
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: IN
52883: PUSH
52884: LD_VAR 0 3
52888: PPUSH
52889: LD_VAR 0 4
52893: PPUSH
52894: LD_VAR 0 9
52898: PPUSH
52899: CALL_OW 440
52903: NOT
52904: AND
52905: IFFALSE 52909
// exit ;
52907: GO 52917
// result := true ;
52909: LD_ADDR_VAR 0 6
52913: PUSH
52914: LD_INT 1
52916: ST_TO_ADDR
// end ;
52917: LD_VAR 0 6
52921: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52922: LD_INT 0
52924: PPUSH
52925: PPUSH
52926: PPUSH
52927: PPUSH
52928: PPUSH
52929: PPUSH
52930: PPUSH
52931: PPUSH
52932: PPUSH
52933: PPUSH
52934: PPUSH
52935: PPUSH
52936: PPUSH
52937: PPUSH
52938: PPUSH
52939: PPUSH
52940: PPUSH
52941: PPUSH
52942: PPUSH
52943: PPUSH
52944: PPUSH
52945: PPUSH
52946: PPUSH
52947: PPUSH
52948: PPUSH
52949: PPUSH
52950: PPUSH
52951: PPUSH
52952: PPUSH
52953: PPUSH
52954: PPUSH
52955: PPUSH
52956: PPUSH
52957: PPUSH
52958: PPUSH
52959: PPUSH
52960: PPUSH
52961: PPUSH
52962: PPUSH
52963: PPUSH
52964: PPUSH
52965: PPUSH
52966: PPUSH
52967: PPUSH
52968: PPUSH
52969: PPUSH
52970: PPUSH
52971: PPUSH
52972: PPUSH
52973: PPUSH
52974: PPUSH
52975: PPUSH
52976: PPUSH
52977: PPUSH
52978: PPUSH
52979: PPUSH
52980: PPUSH
52981: PPUSH
// result = [ ] ;
52982: LD_ADDR_VAR 0 7
52986: PUSH
52987: EMPTY
52988: ST_TO_ADDR
// temp_list = [ ] ;
52989: LD_ADDR_VAR 0 9
52993: PUSH
52994: EMPTY
52995: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52996: LD_VAR 0 4
53000: PUSH
53001: LD_INT 0
53003: PUSH
53004: LD_INT 1
53006: PUSH
53007: LD_INT 2
53009: PUSH
53010: LD_INT 3
53012: PUSH
53013: LD_INT 4
53015: PUSH
53016: LD_INT 5
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: IN
53027: NOT
53028: PUSH
53029: LD_VAR 0 1
53033: PUSH
53034: LD_INT 0
53036: PUSH
53037: LD_INT 1
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: IN
53044: PUSH
53045: LD_VAR 0 5
53049: PUSH
53050: LD_INT 1
53052: PUSH
53053: LD_INT 2
53055: PUSH
53056: LD_INT 3
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: LIST
53063: IN
53064: NOT
53065: AND
53066: OR
53067: IFFALSE 53071
// exit ;
53069: GO 71462
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53071: LD_VAR 0 1
53075: PUSH
53076: LD_INT 6
53078: PUSH
53079: LD_INT 7
53081: PUSH
53082: LD_INT 8
53084: PUSH
53085: LD_INT 13
53087: PUSH
53088: LD_INT 12
53090: PUSH
53091: LD_INT 15
53093: PUSH
53094: LD_INT 11
53096: PUSH
53097: LD_INT 14
53099: PUSH
53100: LD_INT 10
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: IN
53114: IFFALSE 53124
// btype = b_lab ;
53116: LD_ADDR_VAR 0 1
53120: PUSH
53121: LD_INT 6
53123: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53124: LD_VAR 0 6
53128: PUSH
53129: LD_INT 0
53131: PUSH
53132: LD_INT 1
53134: PUSH
53135: LD_INT 2
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: LIST
53142: IN
53143: NOT
53144: PUSH
53145: LD_VAR 0 1
53149: PUSH
53150: LD_INT 0
53152: PUSH
53153: LD_INT 1
53155: PUSH
53156: LD_INT 2
53158: PUSH
53159: LD_INT 3
53161: PUSH
53162: LD_INT 6
53164: PUSH
53165: LD_INT 36
53167: PUSH
53168: LD_INT 4
53170: PUSH
53171: LD_INT 5
53173: PUSH
53174: LD_INT 31
53176: PUSH
53177: LD_INT 32
53179: PUSH
53180: LD_INT 33
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: IN
53196: NOT
53197: PUSH
53198: LD_VAR 0 6
53202: PUSH
53203: LD_INT 1
53205: EQUAL
53206: AND
53207: OR
53208: PUSH
53209: LD_VAR 0 1
53213: PUSH
53214: LD_INT 2
53216: PUSH
53217: LD_INT 3
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: IN
53224: NOT
53225: PUSH
53226: LD_VAR 0 6
53230: PUSH
53231: LD_INT 2
53233: EQUAL
53234: AND
53235: OR
53236: IFFALSE 53246
// mode = 0 ;
53238: LD_ADDR_VAR 0 6
53242: PUSH
53243: LD_INT 0
53245: ST_TO_ADDR
// case mode of 0 :
53246: LD_VAR 0 6
53250: PUSH
53251: LD_INT 0
53253: DOUBLE
53254: EQUAL
53255: IFTRUE 53259
53257: GO 64712
53259: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53260: LD_ADDR_VAR 0 11
53264: PUSH
53265: LD_INT 0
53267: PUSH
53268: LD_INT 0
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 0
53277: PUSH
53278: LD_INT 1
53280: NEG
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 1
53288: PUSH
53289: LD_INT 0
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 1
53298: PUSH
53299: LD_INT 1
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 0
53308: PUSH
53309: LD_INT 1
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 1
53318: NEG
53319: PUSH
53320: LD_INT 0
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: LD_INT 1
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 1
53341: NEG
53342: PUSH
53343: LD_INT 2
53345: NEG
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 0
53353: PUSH
53354: LD_INT 2
53356: NEG
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 1
53364: PUSH
53365: LD_INT 1
53367: NEG
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 1
53375: PUSH
53376: LD_INT 2
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 0
53385: PUSH
53386: LD_INT 2
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 1
53395: NEG
53396: PUSH
53397: LD_INT 1
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 1
53406: PUSH
53407: LD_INT 3
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 0
53416: PUSH
53417: LD_INT 3
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 1
53426: NEG
53427: PUSH
53428: LD_INT 2
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53453: LD_ADDR_VAR 0 12
53457: PUSH
53458: LD_INT 0
53460: PUSH
53461: LD_INT 0
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 0
53470: PUSH
53471: LD_INT 1
53473: NEG
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 1
53481: PUSH
53482: LD_INT 0
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 1
53491: PUSH
53492: LD_INT 1
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 0
53501: PUSH
53502: LD_INT 1
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 1
53511: NEG
53512: PUSH
53513: LD_INT 0
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 1
53522: NEG
53523: PUSH
53524: LD_INT 1
53526: NEG
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 1
53534: PUSH
53535: LD_INT 1
53537: NEG
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 2
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 2
53555: PUSH
53556: LD_INT 1
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 1
53565: NEG
53566: PUSH
53567: LD_INT 1
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 2
53576: NEG
53577: PUSH
53578: LD_INT 0
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 2
53587: NEG
53588: PUSH
53589: LD_INT 1
53591: NEG
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 2
53599: NEG
53600: PUSH
53601: LD_INT 1
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 3
53610: NEG
53611: PUSH
53612: LD_INT 0
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 3
53621: NEG
53622: PUSH
53623: LD_INT 1
53625: NEG
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53649: LD_ADDR_VAR 0 13
53653: PUSH
53654: LD_INT 0
53656: PUSH
53657: LD_INT 0
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 0
53666: PUSH
53667: LD_INT 1
53669: NEG
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 1
53677: PUSH
53678: LD_INT 0
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 1
53687: PUSH
53688: LD_INT 1
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 0
53697: PUSH
53698: LD_INT 1
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 1
53707: NEG
53708: PUSH
53709: LD_INT 0
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 1
53718: NEG
53719: PUSH
53720: LD_INT 1
53722: NEG
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 1
53730: NEG
53731: PUSH
53732: LD_INT 2
53734: NEG
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 2
53742: PUSH
53743: LD_INT 1
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 2
53752: PUSH
53753: LD_INT 2
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 1
53762: PUSH
53763: LD_INT 2
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 2
53772: NEG
53773: PUSH
53774: LD_INT 1
53776: NEG
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 2
53784: NEG
53785: PUSH
53786: LD_INT 2
53788: NEG
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 2
53796: NEG
53797: PUSH
53798: LD_INT 3
53800: NEG
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 3
53808: NEG
53809: PUSH
53810: LD_INT 2
53812: NEG
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 3
53820: NEG
53821: PUSH
53822: LD_INT 3
53824: NEG
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53848: LD_ADDR_VAR 0 14
53852: PUSH
53853: LD_INT 0
53855: PUSH
53856: LD_INT 0
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 0
53865: PUSH
53866: LD_INT 1
53868: NEG
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 1
53876: PUSH
53877: LD_INT 0
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 1
53886: PUSH
53887: LD_INT 1
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: LD_INT 1
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 1
53906: NEG
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 1
53917: NEG
53918: PUSH
53919: LD_INT 1
53921: NEG
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 1
53929: NEG
53930: PUSH
53931: LD_INT 2
53933: NEG
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 0
53941: PUSH
53942: LD_INT 2
53944: NEG
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 1
53952: PUSH
53953: LD_INT 1
53955: NEG
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 1
53963: PUSH
53964: LD_INT 2
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 0
53973: PUSH
53974: LD_INT 2
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 1
53983: NEG
53984: PUSH
53985: LD_INT 1
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 1
53994: NEG
53995: PUSH
53996: LD_INT 3
53998: NEG
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 0
54006: PUSH
54007: LD_INT 3
54009: NEG
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 1
54017: PUSH
54018: LD_INT 2
54020: NEG
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54044: LD_ADDR_VAR 0 15
54048: PUSH
54049: LD_INT 0
54051: PUSH
54052: LD_INT 0
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 0
54061: PUSH
54062: LD_INT 1
54064: NEG
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 1
54072: PUSH
54073: LD_INT 0
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 1
54082: PUSH
54083: LD_INT 1
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 0
54092: PUSH
54093: LD_INT 1
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 1
54102: NEG
54103: PUSH
54104: LD_INT 0
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 1
54113: NEG
54114: PUSH
54115: LD_INT 1
54117: NEG
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 1
54125: PUSH
54126: LD_INT 1
54128: NEG
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 2
54136: PUSH
54137: LD_INT 0
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 2
54146: PUSH
54147: LD_INT 1
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 1
54156: NEG
54157: PUSH
54158: LD_INT 1
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 2
54167: NEG
54168: PUSH
54169: LD_INT 0
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 2
54178: NEG
54179: PUSH
54180: LD_INT 1
54182: NEG
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 2
54190: PUSH
54191: LD_INT 1
54193: NEG
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 3
54201: PUSH
54202: LD_INT 0
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 3
54211: PUSH
54212: LD_INT 1
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54237: LD_ADDR_VAR 0 16
54241: PUSH
54242: LD_INT 0
54244: PUSH
54245: LD_INT 0
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 0
54254: PUSH
54255: LD_INT 1
54257: NEG
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 1
54265: PUSH
54266: LD_INT 0
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 1
54275: PUSH
54276: LD_INT 1
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 0
54285: PUSH
54286: LD_INT 1
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 1
54295: NEG
54296: PUSH
54297: LD_INT 0
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 1
54306: NEG
54307: PUSH
54308: LD_INT 1
54310: NEG
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 1
54318: NEG
54319: PUSH
54320: LD_INT 2
54322: NEG
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 2
54330: PUSH
54331: LD_INT 1
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 2
54340: PUSH
54341: LD_INT 2
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 1
54350: PUSH
54351: LD_INT 2
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 2
54360: NEG
54361: PUSH
54362: LD_INT 1
54364: NEG
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 2
54372: NEG
54373: PUSH
54374: LD_INT 2
54376: NEG
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 3
54384: PUSH
54385: LD_INT 2
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 3
54394: PUSH
54395: LD_INT 3
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 2
54404: PUSH
54405: LD_INT 3
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54430: LD_ADDR_VAR 0 17
54434: PUSH
54435: LD_INT 0
54437: PUSH
54438: LD_INT 0
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 0
54447: PUSH
54448: LD_INT 1
54450: NEG
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 1
54458: PUSH
54459: LD_INT 0
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 1
54468: PUSH
54469: LD_INT 1
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 0
54478: PUSH
54479: LD_INT 1
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 1
54488: NEG
54489: PUSH
54490: LD_INT 0
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 1
54499: NEG
54500: PUSH
54501: LD_INT 1
54503: NEG
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 1
54511: NEG
54512: PUSH
54513: LD_INT 2
54515: NEG
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 0
54523: PUSH
54524: LD_INT 2
54526: NEG
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 1
54534: PUSH
54535: LD_INT 1
54537: NEG
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 2
54545: PUSH
54546: LD_INT 0
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 2
54555: PUSH
54556: LD_INT 1
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 2
54565: PUSH
54566: LD_INT 2
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 1
54575: PUSH
54576: LD_INT 2
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 0
54585: PUSH
54586: LD_INT 2
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 1
54595: NEG
54596: PUSH
54597: LD_INT 1
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 2
54606: NEG
54607: PUSH
54608: LD_INT 0
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 2
54617: NEG
54618: PUSH
54619: LD_INT 1
54621: NEG
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 2
54629: NEG
54630: PUSH
54631: LD_INT 2
54633: NEG
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54660: LD_ADDR_VAR 0 18
54664: PUSH
54665: LD_INT 0
54667: PUSH
54668: LD_INT 0
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 0
54677: PUSH
54678: LD_INT 1
54680: NEG
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 1
54688: PUSH
54689: LD_INT 0
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 1
54698: PUSH
54699: LD_INT 1
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 0
54708: PUSH
54709: LD_INT 1
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 1
54718: NEG
54719: PUSH
54720: LD_INT 0
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 1
54729: NEG
54730: PUSH
54731: LD_INT 1
54733: NEG
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 1
54741: NEG
54742: PUSH
54743: LD_INT 2
54745: NEG
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 0
54753: PUSH
54754: LD_INT 2
54756: NEG
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 1
54764: PUSH
54765: LD_INT 1
54767: NEG
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 2
54775: PUSH
54776: LD_INT 0
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 2
54785: PUSH
54786: LD_INT 1
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 2
54795: PUSH
54796: LD_INT 2
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 1
54805: PUSH
54806: LD_INT 2
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 0
54815: PUSH
54816: LD_INT 2
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 1
54825: NEG
54826: PUSH
54827: LD_INT 1
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 2
54836: NEG
54837: PUSH
54838: LD_INT 0
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 2
54847: NEG
54848: PUSH
54849: LD_INT 1
54851: NEG
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 2
54859: NEG
54860: PUSH
54861: LD_INT 2
54863: NEG
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54890: LD_ADDR_VAR 0 19
54894: PUSH
54895: LD_INT 0
54897: PUSH
54898: LD_INT 0
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 0
54907: PUSH
54908: LD_INT 1
54910: NEG
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 1
54918: PUSH
54919: LD_INT 0
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 1
54928: PUSH
54929: LD_INT 1
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 0
54938: PUSH
54939: LD_INT 1
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 1
54948: NEG
54949: PUSH
54950: LD_INT 0
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 1
54959: NEG
54960: PUSH
54961: LD_INT 1
54963: NEG
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 1
54971: NEG
54972: PUSH
54973: LD_INT 2
54975: NEG
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 0
54983: PUSH
54984: LD_INT 2
54986: NEG
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 1
54994: PUSH
54995: LD_INT 1
54997: NEG
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 2
55005: PUSH
55006: LD_INT 0
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 2
55015: PUSH
55016: LD_INT 1
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 2
55025: PUSH
55026: LD_INT 2
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 1
55035: PUSH
55036: LD_INT 2
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 0
55045: PUSH
55046: LD_INT 2
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 1
55055: NEG
55056: PUSH
55057: LD_INT 1
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 2
55066: NEG
55067: PUSH
55068: LD_INT 0
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 2
55077: NEG
55078: PUSH
55079: LD_INT 1
55081: NEG
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 2
55089: NEG
55090: PUSH
55091: LD_INT 2
55093: NEG
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55120: LD_ADDR_VAR 0 20
55124: PUSH
55125: LD_INT 0
55127: PUSH
55128: LD_INT 0
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 0
55137: PUSH
55138: LD_INT 1
55140: NEG
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 1
55148: PUSH
55149: LD_INT 0
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 1
55158: PUSH
55159: LD_INT 1
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 0
55168: PUSH
55169: LD_INT 1
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 1
55178: NEG
55179: PUSH
55180: LD_INT 0
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 1
55189: NEG
55190: PUSH
55191: LD_INT 1
55193: NEG
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 1
55201: NEG
55202: PUSH
55203: LD_INT 2
55205: NEG
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 0
55213: PUSH
55214: LD_INT 2
55216: NEG
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 1
55224: PUSH
55225: LD_INT 1
55227: NEG
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 2
55235: PUSH
55236: LD_INT 0
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 2
55245: PUSH
55246: LD_INT 1
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 2
55255: PUSH
55256: LD_INT 2
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 1
55265: PUSH
55266: LD_INT 2
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 0
55275: PUSH
55276: LD_INT 2
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 1
55285: NEG
55286: PUSH
55287: LD_INT 1
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 2
55296: NEG
55297: PUSH
55298: LD_INT 0
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 2
55307: NEG
55308: PUSH
55309: LD_INT 1
55311: NEG
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 2
55319: NEG
55320: PUSH
55321: LD_INT 2
55323: NEG
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55350: LD_ADDR_VAR 0 21
55354: PUSH
55355: LD_INT 0
55357: PUSH
55358: LD_INT 0
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 0
55367: PUSH
55368: LD_INT 1
55370: NEG
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 1
55378: PUSH
55379: LD_INT 0
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 1
55388: PUSH
55389: LD_INT 1
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 0
55398: PUSH
55399: LD_INT 1
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 1
55408: NEG
55409: PUSH
55410: LD_INT 0
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 1
55419: NEG
55420: PUSH
55421: LD_INT 1
55423: NEG
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 1
55431: NEG
55432: PUSH
55433: LD_INT 2
55435: NEG
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 0
55443: PUSH
55444: LD_INT 2
55446: NEG
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 1
55454: PUSH
55455: LD_INT 1
55457: NEG
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 2
55465: PUSH
55466: LD_INT 0
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 2
55475: PUSH
55476: LD_INT 1
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 2
55485: PUSH
55486: LD_INT 2
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 1
55495: PUSH
55496: LD_INT 2
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 0
55505: PUSH
55506: LD_INT 2
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 1
55515: NEG
55516: PUSH
55517: LD_INT 1
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 2
55526: NEG
55527: PUSH
55528: LD_INT 0
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 2
55537: NEG
55538: PUSH
55539: LD_INT 1
55541: NEG
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 2
55549: NEG
55550: PUSH
55551: LD_INT 2
55553: NEG
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55580: LD_ADDR_VAR 0 22
55584: PUSH
55585: LD_INT 0
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 0
55597: PUSH
55598: LD_INT 1
55600: NEG
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 1
55608: PUSH
55609: LD_INT 0
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 1
55618: PUSH
55619: LD_INT 1
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 0
55628: PUSH
55629: LD_INT 1
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 1
55638: NEG
55639: PUSH
55640: LD_INT 0
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 1
55649: NEG
55650: PUSH
55651: LD_INT 1
55653: NEG
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 1
55661: NEG
55662: PUSH
55663: LD_INT 2
55665: NEG
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 0
55673: PUSH
55674: LD_INT 2
55676: NEG
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 1
55684: PUSH
55685: LD_INT 1
55687: NEG
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 2
55695: PUSH
55696: LD_INT 0
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 2
55705: PUSH
55706: LD_INT 1
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 2
55715: PUSH
55716: LD_INT 2
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 1
55725: PUSH
55726: LD_INT 2
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 0
55735: PUSH
55736: LD_INT 2
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 1
55745: NEG
55746: PUSH
55747: LD_INT 1
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 2
55756: NEG
55757: PUSH
55758: LD_INT 0
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 2
55767: NEG
55768: PUSH
55769: LD_INT 1
55771: NEG
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 2
55779: NEG
55780: PUSH
55781: LD_INT 2
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55810: LD_ADDR_VAR 0 23
55814: PUSH
55815: LD_INT 0
55817: PUSH
55818: LD_INT 0
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 0
55827: PUSH
55828: LD_INT 1
55830: NEG
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 1
55838: PUSH
55839: LD_INT 0
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 1
55848: PUSH
55849: LD_INT 1
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 0
55858: PUSH
55859: LD_INT 1
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 1
55868: NEG
55869: PUSH
55870: LD_INT 0
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 1
55879: NEG
55880: PUSH
55881: LD_INT 1
55883: NEG
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 1
55891: NEG
55892: PUSH
55893: LD_INT 2
55895: NEG
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 0
55903: PUSH
55904: LD_INT 2
55906: NEG
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 1
55914: PUSH
55915: LD_INT 1
55917: NEG
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 2
55925: PUSH
55926: LD_INT 0
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 2
55935: PUSH
55936: LD_INT 1
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 2
55945: PUSH
55946: LD_INT 2
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 1
55955: PUSH
55956: LD_INT 2
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 0
55965: PUSH
55966: LD_INT 2
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 1
55975: NEG
55976: PUSH
55977: LD_INT 1
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 2
55986: NEG
55987: PUSH
55988: LD_INT 0
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 2
55997: NEG
55998: PUSH
55999: LD_INT 1
56001: NEG
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 2
56009: NEG
56010: PUSH
56011: LD_INT 2
56013: NEG
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 2
56021: NEG
56022: PUSH
56023: LD_INT 3
56025: NEG
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 1
56033: NEG
56034: PUSH
56035: LD_INT 3
56037: NEG
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 1
56045: PUSH
56046: LD_INT 2
56048: NEG
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 2
56056: PUSH
56057: LD_INT 1
56059: NEG
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56090: LD_ADDR_VAR 0 24
56094: PUSH
56095: LD_INT 0
56097: PUSH
56098: LD_INT 0
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: LD_INT 1
56110: NEG
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 1
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 1
56128: PUSH
56129: LD_INT 1
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 0
56138: PUSH
56139: LD_INT 1
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 1
56148: NEG
56149: PUSH
56150: LD_INT 0
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: NEG
56160: PUSH
56161: LD_INT 1
56163: NEG
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 1
56171: NEG
56172: PUSH
56173: LD_INT 2
56175: NEG
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 0
56183: PUSH
56184: LD_INT 2
56186: NEG
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 1
56194: PUSH
56195: LD_INT 1
56197: NEG
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 2
56205: PUSH
56206: LD_INT 0
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 2
56215: PUSH
56216: LD_INT 1
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 2
56225: PUSH
56226: LD_INT 2
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 1
56235: PUSH
56236: LD_INT 2
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 0
56245: PUSH
56246: LD_INT 2
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 1
56255: NEG
56256: PUSH
56257: LD_INT 1
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 2
56266: NEG
56267: PUSH
56268: LD_INT 0
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 2
56277: NEG
56278: PUSH
56279: LD_INT 1
56281: NEG
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 2
56289: NEG
56290: PUSH
56291: LD_INT 2
56293: NEG
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 1
56301: PUSH
56302: LD_INT 2
56304: NEG
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 2
56312: PUSH
56313: LD_INT 1
56315: NEG
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 3
56323: PUSH
56324: LD_INT 1
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 3
56333: PUSH
56334: LD_INT 2
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56366: LD_ADDR_VAR 0 25
56370: PUSH
56371: LD_INT 0
56373: PUSH
56374: LD_INT 0
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 0
56383: PUSH
56384: LD_INT 1
56386: NEG
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 1
56394: PUSH
56395: LD_INT 0
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 1
56404: PUSH
56405: LD_INT 1
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 0
56414: PUSH
56415: LD_INT 1
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 1
56424: NEG
56425: PUSH
56426: LD_INT 0
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 1
56435: NEG
56436: PUSH
56437: LD_INT 1
56439: NEG
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 1
56447: NEG
56448: PUSH
56449: LD_INT 2
56451: NEG
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 0
56459: PUSH
56460: LD_INT 2
56462: NEG
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 1
56470: PUSH
56471: LD_INT 1
56473: NEG
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 2
56481: PUSH
56482: LD_INT 0
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 2
56491: PUSH
56492: LD_INT 1
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 2
56501: PUSH
56502: LD_INT 2
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 1
56511: PUSH
56512: LD_INT 2
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 0
56521: PUSH
56522: LD_INT 2
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 1
56531: NEG
56532: PUSH
56533: LD_INT 1
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 2
56542: NEG
56543: PUSH
56544: LD_INT 0
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 2
56553: NEG
56554: PUSH
56555: LD_INT 1
56557: NEG
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 2
56565: NEG
56566: PUSH
56567: LD_INT 2
56569: NEG
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 3
56577: PUSH
56578: LD_INT 1
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 3
56587: PUSH
56588: LD_INT 2
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 2
56597: PUSH
56598: LD_INT 3
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 1
56607: PUSH
56608: LD_INT 3
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56640: LD_ADDR_VAR 0 26
56644: PUSH
56645: LD_INT 0
56647: PUSH
56648: LD_INT 0
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 0
56657: PUSH
56658: LD_INT 1
56660: NEG
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 1
56668: PUSH
56669: LD_INT 0
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 1
56678: PUSH
56679: LD_INT 1
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 0
56688: PUSH
56689: LD_INT 1
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 1
56698: NEG
56699: PUSH
56700: LD_INT 0
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 1
56709: NEG
56710: PUSH
56711: LD_INT 1
56713: NEG
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 1
56721: NEG
56722: PUSH
56723: LD_INT 2
56725: NEG
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 0
56733: PUSH
56734: LD_INT 2
56736: NEG
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 1
56744: PUSH
56745: LD_INT 1
56747: NEG
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 2
56755: PUSH
56756: LD_INT 0
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 2
56765: PUSH
56766: LD_INT 1
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 2
56775: PUSH
56776: LD_INT 2
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 1
56785: PUSH
56786: LD_INT 2
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 0
56795: PUSH
56796: LD_INT 2
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 1
56805: NEG
56806: PUSH
56807: LD_INT 1
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 2
56816: NEG
56817: PUSH
56818: LD_INT 0
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 2
56827: NEG
56828: PUSH
56829: LD_INT 1
56831: NEG
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 2
56839: NEG
56840: PUSH
56841: LD_INT 2
56843: NEG
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 2
56851: PUSH
56852: LD_INT 3
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 1
56861: PUSH
56862: LD_INT 3
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 1
56871: NEG
56872: PUSH
56873: LD_INT 2
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 2
56882: NEG
56883: PUSH
56884: LD_INT 1
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56916: LD_ADDR_VAR 0 27
56920: PUSH
56921: LD_INT 0
56923: PUSH
56924: LD_INT 0
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 0
56933: PUSH
56934: LD_INT 1
56936: NEG
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 1
56944: PUSH
56945: LD_INT 0
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 1
56954: PUSH
56955: LD_INT 1
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 0
56964: PUSH
56965: LD_INT 1
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 1
56974: NEG
56975: PUSH
56976: LD_INT 0
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 1
56985: NEG
56986: PUSH
56987: LD_INT 1
56989: NEG
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 1
56997: NEG
56998: PUSH
56999: LD_INT 2
57001: NEG
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 0
57009: PUSH
57010: LD_INT 2
57012: NEG
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 1
57020: PUSH
57021: LD_INT 1
57023: NEG
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 2
57031: PUSH
57032: LD_INT 0
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 2
57041: PUSH
57042: LD_INT 1
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 2
57051: PUSH
57052: LD_INT 2
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 1
57061: PUSH
57062: LD_INT 2
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 0
57071: PUSH
57072: LD_INT 2
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 1
57081: NEG
57082: PUSH
57083: LD_INT 1
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 2
57092: NEG
57093: PUSH
57094: LD_INT 0
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 2
57103: NEG
57104: PUSH
57105: LD_INT 1
57107: NEG
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 2
57115: NEG
57116: PUSH
57117: LD_INT 2
57119: NEG
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 1
57127: NEG
57128: PUSH
57129: LD_INT 2
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 2
57138: NEG
57139: PUSH
57140: LD_INT 1
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 3
57149: NEG
57150: PUSH
57151: LD_INT 1
57153: NEG
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 3
57161: NEG
57162: PUSH
57163: LD_INT 2
57165: NEG
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57196: LD_ADDR_VAR 0 28
57200: PUSH
57201: LD_INT 0
57203: PUSH
57204: LD_INT 0
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 0
57213: PUSH
57214: LD_INT 1
57216: NEG
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 1
57224: PUSH
57225: LD_INT 0
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 1
57234: PUSH
57235: LD_INT 1
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 0
57244: PUSH
57245: LD_INT 1
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 1
57254: NEG
57255: PUSH
57256: LD_INT 0
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 1
57265: NEG
57266: PUSH
57267: LD_INT 1
57269: NEG
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 1
57277: NEG
57278: PUSH
57279: LD_INT 2
57281: NEG
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 0
57289: PUSH
57290: LD_INT 2
57292: NEG
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 1
57300: PUSH
57301: LD_INT 1
57303: NEG
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 2
57311: PUSH
57312: LD_INT 0
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 2
57321: PUSH
57322: LD_INT 1
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 2
57331: PUSH
57332: LD_INT 2
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 1
57341: PUSH
57342: LD_INT 2
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 0
57351: PUSH
57352: LD_INT 2
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 1
57361: NEG
57362: PUSH
57363: LD_INT 1
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 2
57372: NEG
57373: PUSH
57374: LD_INT 0
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 2
57383: NEG
57384: PUSH
57385: LD_INT 1
57387: NEG
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 2
57395: NEG
57396: PUSH
57397: LD_INT 2
57399: NEG
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 2
57407: NEG
57408: PUSH
57409: LD_INT 3
57411: NEG
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 1
57419: NEG
57420: PUSH
57421: LD_INT 3
57423: NEG
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 3
57431: NEG
57432: PUSH
57433: LD_INT 1
57435: NEG
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 3
57443: NEG
57444: PUSH
57445: LD_INT 2
57447: NEG
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57478: LD_ADDR_VAR 0 29
57482: PUSH
57483: LD_INT 0
57485: PUSH
57486: LD_INT 0
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 0
57495: PUSH
57496: LD_INT 1
57498: NEG
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 1
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 1
57516: PUSH
57517: LD_INT 1
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 0
57526: PUSH
57527: LD_INT 1
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 1
57536: NEG
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 1
57547: NEG
57548: PUSH
57549: LD_INT 1
57551: NEG
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 1
57559: NEG
57560: PUSH
57561: LD_INT 2
57563: NEG
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 0
57571: PUSH
57572: LD_INT 2
57574: NEG
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 1
57582: PUSH
57583: LD_INT 1
57585: NEG
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 2
57593: PUSH
57594: LD_INT 0
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 2
57603: PUSH
57604: LD_INT 1
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 1
57613: PUSH
57614: LD_INT 2
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 0
57623: PUSH
57624: LD_INT 2
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 1
57633: NEG
57634: PUSH
57635: LD_INT 1
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 2
57644: NEG
57645: PUSH
57646: LD_INT 1
57648: NEG
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 2
57656: NEG
57657: PUSH
57658: LD_INT 2
57660: NEG
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 2
57668: NEG
57669: PUSH
57670: LD_INT 3
57672: NEG
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 2
57680: PUSH
57681: LD_INT 1
57683: NEG
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 3
57691: PUSH
57692: LD_INT 1
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 1
57701: PUSH
57702: LD_INT 3
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 1
57711: NEG
57712: PUSH
57713: LD_INT 2
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 3
57722: NEG
57723: PUSH
57724: LD_INT 2
57726: NEG
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57757: LD_ADDR_VAR 0 30
57761: PUSH
57762: LD_INT 0
57764: PUSH
57765: LD_INT 0
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 0
57774: PUSH
57775: LD_INT 1
57777: NEG
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 1
57785: PUSH
57786: LD_INT 0
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 1
57795: PUSH
57796: LD_INT 1
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 0
57805: PUSH
57806: LD_INT 1
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 1
57815: NEG
57816: PUSH
57817: LD_INT 0
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 1
57826: NEG
57827: PUSH
57828: LD_INT 1
57830: NEG
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 1
57838: NEG
57839: PUSH
57840: LD_INT 2
57842: NEG
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 0
57850: PUSH
57851: LD_INT 2
57853: NEG
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 1
57861: PUSH
57862: LD_INT 1
57864: NEG
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 2
57872: PUSH
57873: LD_INT 0
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 2
57882: PUSH
57883: LD_INT 1
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 2
57892: PUSH
57893: LD_INT 2
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 1
57902: PUSH
57903: LD_INT 2
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 1
57912: NEG
57913: PUSH
57914: LD_INT 1
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 2
57923: NEG
57924: PUSH
57925: LD_INT 0
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 2
57934: NEG
57935: PUSH
57936: LD_INT 1
57938: NEG
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 1
57946: NEG
57947: PUSH
57948: LD_INT 3
57950: NEG
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 1
57958: PUSH
57959: LD_INT 2
57961: NEG
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 3
57969: PUSH
57970: LD_INT 2
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 2
57979: PUSH
57980: LD_INT 3
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 2
57989: NEG
57990: PUSH
57991: LD_INT 1
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 3
58000: NEG
58001: PUSH
58002: LD_INT 1
58004: NEG
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58035: LD_ADDR_VAR 0 31
58039: PUSH
58040: LD_INT 0
58042: PUSH
58043: LD_INT 0
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 0
58052: PUSH
58053: LD_INT 1
58055: NEG
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 1
58063: PUSH
58064: LD_INT 0
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 1
58073: PUSH
58074: LD_INT 1
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 0
58083: PUSH
58084: LD_INT 1
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 1
58093: NEG
58094: PUSH
58095: LD_INT 0
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 1
58104: NEG
58105: PUSH
58106: LD_INT 1
58108: NEG
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 1
58116: NEG
58117: PUSH
58118: LD_INT 2
58120: NEG
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 1
58128: PUSH
58129: LD_INT 1
58131: NEG
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 2
58139: PUSH
58140: LD_INT 0
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 2
58149: PUSH
58150: LD_INT 1
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 2
58159: PUSH
58160: LD_INT 2
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 1
58169: PUSH
58170: LD_INT 2
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 0
58179: PUSH
58180: LD_INT 2
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 1
58189: NEG
58190: PUSH
58191: LD_INT 1
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 2
58200: NEG
58201: PUSH
58202: LD_INT 1
58204: NEG
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 2
58212: NEG
58213: PUSH
58214: LD_INT 2
58216: NEG
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 2
58224: NEG
58225: PUSH
58226: LD_INT 3
58228: NEG
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 2
58236: PUSH
58237: LD_INT 1
58239: NEG
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 3
58247: PUSH
58248: LD_INT 1
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 1
58257: PUSH
58258: LD_INT 3
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 1
58267: NEG
58268: PUSH
58269: LD_INT 2
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 3
58278: NEG
58279: PUSH
58280: LD_INT 2
58282: NEG
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58313: LD_ADDR_VAR 0 32
58317: PUSH
58318: LD_INT 0
58320: PUSH
58321: LD_INT 0
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 0
58330: PUSH
58331: LD_INT 1
58333: NEG
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 1
58341: PUSH
58342: LD_INT 0
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 1
58351: PUSH
58352: LD_INT 1
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 0
58361: PUSH
58362: LD_INT 1
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 1
58371: NEG
58372: PUSH
58373: LD_INT 0
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 1
58382: NEG
58383: PUSH
58384: LD_INT 1
58386: NEG
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 1
58394: NEG
58395: PUSH
58396: LD_INT 2
58398: NEG
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 0
58406: PUSH
58407: LD_INT 2
58409: NEG
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 1
58417: PUSH
58418: LD_INT 1
58420: NEG
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 2
58428: PUSH
58429: LD_INT 1
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 2
58438: PUSH
58439: LD_INT 2
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 1
58448: PUSH
58449: LD_INT 2
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 0
58458: PUSH
58459: LD_INT 2
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 1
58468: NEG
58469: PUSH
58470: LD_INT 1
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 2
58479: NEG
58480: PUSH
58481: LD_INT 0
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 2
58490: NEG
58491: PUSH
58492: LD_INT 1
58494: NEG
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 1
58502: NEG
58503: PUSH
58504: LD_INT 3
58506: NEG
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 1
58514: PUSH
58515: LD_INT 2
58517: NEG
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 3
58525: PUSH
58526: LD_INT 2
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 2
58535: PUSH
58536: LD_INT 3
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 2
58545: NEG
58546: PUSH
58547: LD_INT 1
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 3
58556: NEG
58557: PUSH
58558: LD_INT 1
58560: NEG
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58591: LD_ADDR_VAR 0 33
58595: PUSH
58596: LD_INT 0
58598: PUSH
58599: LD_INT 0
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 0
58608: PUSH
58609: LD_INT 1
58611: NEG
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 1
58619: PUSH
58620: LD_INT 0
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 1
58629: PUSH
58630: LD_INT 1
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 0
58639: PUSH
58640: LD_INT 1
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 1
58649: NEG
58650: PUSH
58651: LD_INT 0
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 1
58660: NEG
58661: PUSH
58662: LD_INT 1
58664: NEG
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 1
58672: NEG
58673: PUSH
58674: LD_INT 2
58676: NEG
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 1
58684: PUSH
58685: LD_INT 1
58687: NEG
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 2
58695: PUSH
58696: LD_INT 0
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 2
58705: PUSH
58706: LD_INT 1
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 1
58715: PUSH
58716: LD_INT 2
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 0
58725: PUSH
58726: LD_INT 2
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: LD_INT 1
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 2
58746: NEG
58747: PUSH
58748: LD_INT 0
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 2
58757: NEG
58758: PUSH
58759: LD_INT 1
58761: NEG
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 2
58769: NEG
58770: PUSH
58771: LD_INT 2
58773: NEG
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 2
58781: NEG
58782: PUSH
58783: LD_INT 3
58785: NEG
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 2
58793: PUSH
58794: LD_INT 1
58796: NEG
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 3
58804: PUSH
58805: LD_INT 1
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 1
58814: PUSH
58815: LD_INT 3
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 1
58824: NEG
58825: PUSH
58826: LD_INT 2
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 3
58835: NEG
58836: PUSH
58837: LD_INT 2
58839: NEG
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58870: LD_ADDR_VAR 0 34
58874: PUSH
58875: LD_INT 0
58877: PUSH
58878: LD_INT 0
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 0
58887: PUSH
58888: LD_INT 1
58890: NEG
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 1
58898: PUSH
58899: LD_INT 0
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 1
58908: PUSH
58909: LD_INT 1
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 0
58918: PUSH
58919: LD_INT 1
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 1
58928: NEG
58929: PUSH
58930: LD_INT 0
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 1
58939: NEG
58940: PUSH
58941: LD_INT 1
58943: NEG
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 1
58951: NEG
58952: PUSH
58953: LD_INT 2
58955: NEG
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 0
58963: PUSH
58964: LD_INT 2
58966: NEG
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 1
58974: PUSH
58975: LD_INT 1
58977: NEG
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 2
58985: PUSH
58986: LD_INT 1
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 2
58995: PUSH
58996: LD_INT 2
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 1
59005: PUSH
59006: LD_INT 2
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 1
59015: NEG
59016: PUSH
59017: LD_INT 1
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 2
59026: NEG
59027: PUSH
59028: LD_INT 0
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 2
59037: NEG
59038: PUSH
59039: LD_INT 1
59041: NEG
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 2
59049: NEG
59050: PUSH
59051: LD_INT 2
59053: NEG
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 1
59061: NEG
59062: PUSH
59063: LD_INT 3
59065: NEG
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 1
59073: PUSH
59074: LD_INT 2
59076: NEG
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 3
59084: PUSH
59085: LD_INT 2
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 2
59094: PUSH
59095: LD_INT 3
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 2
59104: NEG
59105: PUSH
59106: LD_INT 1
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 3
59115: NEG
59116: PUSH
59117: LD_INT 1
59119: NEG
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59150: LD_ADDR_VAR 0 35
59154: PUSH
59155: LD_INT 0
59157: PUSH
59158: LD_INT 0
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 0
59167: PUSH
59168: LD_INT 1
59170: NEG
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 1
59178: PUSH
59179: LD_INT 0
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 1
59188: PUSH
59189: LD_INT 1
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 0
59198: PUSH
59199: LD_INT 1
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 1
59208: NEG
59209: PUSH
59210: LD_INT 0
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 1
59219: NEG
59220: PUSH
59221: LD_INT 1
59223: NEG
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 2
59231: PUSH
59232: LD_INT 1
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 2
59241: NEG
59242: PUSH
59243: LD_INT 1
59245: NEG
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59262: LD_ADDR_VAR 0 36
59266: PUSH
59267: LD_INT 0
59269: PUSH
59270: LD_INT 0
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 0
59279: PUSH
59280: LD_INT 1
59282: NEG
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 1
59290: PUSH
59291: LD_INT 0
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 1
59300: PUSH
59301: LD_INT 1
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 0
59310: PUSH
59311: LD_INT 1
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 1
59320: NEG
59321: PUSH
59322: LD_INT 0
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 1
59331: NEG
59332: PUSH
59333: LD_INT 1
59335: NEG
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 1
59343: NEG
59344: PUSH
59345: LD_INT 2
59347: NEG
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 1
59355: PUSH
59356: LD_INT 2
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59374: LD_ADDR_VAR 0 37
59378: PUSH
59379: LD_INT 0
59381: PUSH
59382: LD_INT 0
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 0
59391: PUSH
59392: LD_INT 1
59394: NEG
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 1
59402: PUSH
59403: LD_INT 0
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 1
59412: PUSH
59413: LD_INT 1
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 0
59422: PUSH
59423: LD_INT 1
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 1
59432: NEG
59433: PUSH
59434: LD_INT 0
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 1
59443: NEG
59444: PUSH
59445: LD_INT 1
59447: NEG
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 1
59455: PUSH
59456: LD_INT 1
59458: NEG
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 1
59466: NEG
59467: PUSH
59468: LD_INT 1
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59486: LD_ADDR_VAR 0 38
59490: PUSH
59491: LD_INT 0
59493: PUSH
59494: LD_INT 0
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 0
59503: PUSH
59504: LD_INT 1
59506: NEG
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 1
59514: PUSH
59515: LD_INT 0
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 1
59524: PUSH
59525: LD_INT 1
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 0
59534: PUSH
59535: LD_INT 1
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 1
59544: NEG
59545: PUSH
59546: LD_INT 0
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 1
59555: NEG
59556: PUSH
59557: LD_INT 1
59559: NEG
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 2
59567: PUSH
59568: LD_INT 1
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 2
59577: NEG
59578: PUSH
59579: LD_INT 1
59581: NEG
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59598: LD_ADDR_VAR 0 39
59602: PUSH
59603: LD_INT 0
59605: PUSH
59606: LD_INT 0
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 0
59615: PUSH
59616: LD_INT 1
59618: NEG
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 1
59626: PUSH
59627: LD_INT 0
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 1
59636: PUSH
59637: LD_INT 1
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 0
59646: PUSH
59647: LD_INT 1
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 1
59656: NEG
59657: PUSH
59658: LD_INT 0
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 1
59667: NEG
59668: PUSH
59669: LD_INT 1
59671: NEG
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 1
59679: NEG
59680: PUSH
59681: LD_INT 2
59683: NEG
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 1
59691: PUSH
59692: LD_INT 2
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59710: LD_ADDR_VAR 0 40
59714: PUSH
59715: LD_INT 0
59717: PUSH
59718: LD_INT 0
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 0
59727: PUSH
59728: LD_INT 1
59730: NEG
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 1
59738: PUSH
59739: LD_INT 0
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 1
59748: PUSH
59749: LD_INT 1
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 0
59758: PUSH
59759: LD_INT 1
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 1
59768: NEG
59769: PUSH
59770: LD_INT 0
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 1
59779: NEG
59780: PUSH
59781: LD_INT 1
59783: NEG
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 1
59791: PUSH
59792: LD_INT 1
59794: NEG
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 1
59802: NEG
59803: PUSH
59804: LD_INT 1
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59822: LD_ADDR_VAR 0 41
59826: PUSH
59827: LD_INT 0
59829: PUSH
59830: LD_INT 0
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 0
59839: PUSH
59840: LD_INT 1
59842: NEG
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 1
59850: PUSH
59851: LD_INT 0
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 1
59860: PUSH
59861: LD_INT 1
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 0
59870: PUSH
59871: LD_INT 1
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 1
59880: NEG
59881: PUSH
59882: LD_INT 0
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 1
59891: NEG
59892: PUSH
59893: LD_INT 1
59895: NEG
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 1
59903: NEG
59904: PUSH
59905: LD_INT 2
59907: NEG
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 1
59915: PUSH
59916: LD_INT 1
59918: NEG
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 2
59926: PUSH
59927: LD_INT 0
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 2
59936: PUSH
59937: LD_INT 1
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 2
59946: PUSH
59947: LD_INT 2
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 1
59956: PUSH
59957: LD_INT 2
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 1
59966: NEG
59967: PUSH
59968: LD_INT 1
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: LD_INT 2
59977: NEG
59978: PUSH
59979: LD_INT 0
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 2
59988: NEG
59989: PUSH
59990: LD_INT 1
59992: NEG
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 2
60000: NEG
60001: PUSH
60002: LD_INT 2
60004: NEG
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 2
60012: NEG
60013: PUSH
60014: LD_INT 3
60016: NEG
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 2
60024: PUSH
60025: LD_INT 1
60027: NEG
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 3
60035: PUSH
60036: LD_INT 0
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 3
60045: PUSH
60046: LD_INT 1
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 3
60055: PUSH
60056: LD_INT 2
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 3
60065: PUSH
60066: LD_INT 3
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 2
60075: PUSH
60076: LD_INT 3
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 2
60085: NEG
60086: PUSH
60087: LD_INT 1
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 3
60096: NEG
60097: PUSH
60098: LD_INT 0
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 3
60107: NEG
60108: PUSH
60109: LD_INT 1
60111: NEG
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 3
60119: NEG
60120: PUSH
60121: LD_INT 2
60123: NEG
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 3
60131: NEG
60132: PUSH
60133: LD_INT 3
60135: NEG
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60172: LD_ADDR_VAR 0 42
60176: PUSH
60177: LD_INT 0
60179: PUSH
60180: LD_INT 0
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 0
60189: PUSH
60190: LD_INT 1
60192: NEG
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 1
60200: PUSH
60201: LD_INT 0
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 1
60210: PUSH
60211: LD_INT 1
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 0
60220: PUSH
60221: LD_INT 1
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 1
60230: NEG
60231: PUSH
60232: LD_INT 0
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 1
60241: NEG
60242: PUSH
60243: LD_INT 1
60245: NEG
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 1
60253: NEG
60254: PUSH
60255: LD_INT 2
60257: NEG
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 0
60265: PUSH
60266: LD_INT 2
60268: NEG
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 1
60276: PUSH
60277: LD_INT 1
60279: NEG
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 2
60287: PUSH
60288: LD_INT 1
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 2
60297: PUSH
60298: LD_INT 2
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 1
60307: PUSH
60308: LD_INT 2
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 0
60317: PUSH
60318: LD_INT 2
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 1
60327: NEG
60328: PUSH
60329: LD_INT 1
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 2
60338: NEG
60339: PUSH
60340: LD_INT 1
60342: NEG
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 2
60350: NEG
60351: PUSH
60352: LD_INT 2
60354: NEG
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 2
60362: NEG
60363: PUSH
60364: LD_INT 3
60366: NEG
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 1
60374: NEG
60375: PUSH
60376: LD_INT 3
60378: NEG
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 0
60386: PUSH
60387: LD_INT 3
60389: NEG
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 1
60397: PUSH
60398: LD_INT 2
60400: NEG
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 3
60408: PUSH
60409: LD_INT 2
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 3
60418: PUSH
60419: LD_INT 3
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 2
60428: PUSH
60429: LD_INT 3
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 1
60438: PUSH
60439: LD_INT 3
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: LD_INT 0
60448: PUSH
60449: LD_INT 3
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 1
60458: NEG
60459: PUSH
60460: LD_INT 2
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 3
60469: NEG
60470: PUSH
60471: LD_INT 2
60473: NEG
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 3
60481: NEG
60482: PUSH
60483: LD_INT 3
60485: NEG
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60522: LD_ADDR_VAR 0 43
60526: PUSH
60527: LD_INT 0
60529: PUSH
60530: LD_INT 0
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 0
60539: PUSH
60540: LD_INT 1
60542: NEG
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 1
60550: PUSH
60551: LD_INT 0
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 1
60560: PUSH
60561: LD_INT 1
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 0
60570: PUSH
60571: LD_INT 1
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 1
60580: NEG
60581: PUSH
60582: LD_INT 0
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 1
60591: NEG
60592: PUSH
60593: LD_INT 1
60595: NEG
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 1
60603: NEG
60604: PUSH
60605: LD_INT 2
60607: NEG
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 0
60615: PUSH
60616: LD_INT 2
60618: NEG
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 1
60626: PUSH
60627: LD_INT 1
60629: NEG
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 2
60637: PUSH
60638: LD_INT 0
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 2
60647: PUSH
60648: LD_INT 1
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 1
60657: PUSH
60658: LD_INT 2
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 0
60667: PUSH
60668: LD_INT 2
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 1
60677: NEG
60678: PUSH
60679: LD_INT 1
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 2
60688: NEG
60689: PUSH
60690: LD_INT 0
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 2
60699: NEG
60700: PUSH
60701: LD_INT 1
60703: NEG
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 1
60711: NEG
60712: PUSH
60713: LD_INT 3
60715: NEG
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 0
60723: PUSH
60724: LD_INT 3
60726: NEG
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 1
60734: PUSH
60735: LD_INT 2
60737: NEG
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 2
60745: PUSH
60746: LD_INT 1
60748: NEG
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 3
60756: PUSH
60757: LD_INT 0
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 3
60766: PUSH
60767: LD_INT 1
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 1
60776: PUSH
60777: LD_INT 3
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 0
60786: PUSH
60787: LD_INT 3
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 1
60796: NEG
60797: PUSH
60798: LD_INT 2
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 2
60807: NEG
60808: PUSH
60809: LD_INT 1
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 3
60818: NEG
60819: PUSH
60820: LD_INT 0
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 3
60829: NEG
60830: PUSH
60831: LD_INT 1
60833: NEG
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60870: LD_ADDR_VAR 0 44
60874: PUSH
60875: LD_INT 0
60877: PUSH
60878: LD_INT 0
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 0
60887: PUSH
60888: LD_INT 1
60890: NEG
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 1
60898: PUSH
60899: LD_INT 0
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 1
60908: PUSH
60909: LD_INT 1
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 0
60918: PUSH
60919: LD_INT 1
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 1
60928: NEG
60929: PUSH
60930: LD_INT 0
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 1
60939: NEG
60940: PUSH
60941: LD_INT 1
60943: NEG
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 1
60951: NEG
60952: PUSH
60953: LD_INT 2
60955: NEG
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 1
60963: PUSH
60964: LD_INT 1
60966: NEG
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 2
60974: PUSH
60975: LD_INT 0
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 2
60984: PUSH
60985: LD_INT 1
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 2
60994: PUSH
60995: LD_INT 2
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 1
61004: PUSH
61005: LD_INT 2
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 1
61014: NEG
61015: PUSH
61016: LD_INT 1
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 2
61025: NEG
61026: PUSH
61027: LD_INT 0
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 2
61036: NEG
61037: PUSH
61038: LD_INT 1
61040: NEG
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 2
61048: NEG
61049: PUSH
61050: LD_INT 2
61052: NEG
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 2
61060: NEG
61061: PUSH
61062: LD_INT 3
61064: NEG
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 2
61072: PUSH
61073: LD_INT 1
61075: NEG
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 3
61083: PUSH
61084: LD_INT 0
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 3
61093: PUSH
61094: LD_INT 1
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 3
61103: PUSH
61104: LD_INT 2
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 3
61113: PUSH
61114: LD_INT 3
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 2
61123: PUSH
61124: LD_INT 3
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 2
61133: NEG
61134: PUSH
61135: LD_INT 1
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 3
61144: NEG
61145: PUSH
61146: LD_INT 0
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 3
61155: NEG
61156: PUSH
61157: LD_INT 1
61159: NEG
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 3
61167: NEG
61168: PUSH
61169: LD_INT 2
61171: NEG
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 3
61179: NEG
61180: PUSH
61181: LD_INT 3
61183: NEG
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61220: LD_ADDR_VAR 0 45
61224: PUSH
61225: LD_INT 0
61227: PUSH
61228: LD_INT 0
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 0
61237: PUSH
61238: LD_INT 1
61240: NEG
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 1
61248: PUSH
61249: LD_INT 0
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 1
61258: PUSH
61259: LD_INT 1
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 0
61268: PUSH
61269: LD_INT 1
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 1
61278: NEG
61279: PUSH
61280: LD_INT 0
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 1
61289: NEG
61290: PUSH
61291: LD_INT 1
61293: NEG
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 1
61301: NEG
61302: PUSH
61303: LD_INT 2
61305: NEG
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 0
61313: PUSH
61314: LD_INT 2
61316: NEG
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 1
61324: PUSH
61325: LD_INT 1
61327: NEG
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 2
61335: PUSH
61336: LD_INT 1
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 2
61345: PUSH
61346: LD_INT 2
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 1
61355: PUSH
61356: LD_INT 2
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 0
61365: PUSH
61366: LD_INT 2
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 1
61375: NEG
61376: PUSH
61377: LD_INT 1
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 2
61386: NEG
61387: PUSH
61388: LD_INT 1
61390: NEG
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 2
61398: NEG
61399: PUSH
61400: LD_INT 2
61402: NEG
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 2
61410: NEG
61411: PUSH
61412: LD_INT 3
61414: NEG
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 1
61422: NEG
61423: PUSH
61424: LD_INT 3
61426: NEG
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 0
61434: PUSH
61435: LD_INT 3
61437: NEG
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 1
61445: PUSH
61446: LD_INT 2
61448: NEG
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 3
61456: PUSH
61457: LD_INT 2
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 3
61466: PUSH
61467: LD_INT 3
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 2
61476: PUSH
61477: LD_INT 3
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 1
61486: PUSH
61487: LD_INT 3
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 0
61496: PUSH
61497: LD_INT 3
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 1
61506: NEG
61507: PUSH
61508: LD_INT 2
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 3
61517: NEG
61518: PUSH
61519: LD_INT 2
61521: NEG
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 3
61529: NEG
61530: PUSH
61531: LD_INT 3
61533: NEG
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61570: LD_ADDR_VAR 0 46
61574: PUSH
61575: LD_INT 0
61577: PUSH
61578: LD_INT 0
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: PUSH
61585: LD_INT 0
61587: PUSH
61588: LD_INT 1
61590: NEG
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 1
61598: PUSH
61599: LD_INT 0
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 1
61608: PUSH
61609: LD_INT 1
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 0
61618: PUSH
61619: LD_INT 1
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 1
61628: NEG
61629: PUSH
61630: LD_INT 0
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 1
61639: NEG
61640: PUSH
61641: LD_INT 1
61643: NEG
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 1
61651: NEG
61652: PUSH
61653: LD_INT 2
61655: NEG
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 0
61663: PUSH
61664: LD_INT 2
61666: NEG
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 1
61674: PUSH
61675: LD_INT 1
61677: NEG
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 2
61685: PUSH
61686: LD_INT 0
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: LD_INT 2
61695: PUSH
61696: LD_INT 1
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 1
61705: PUSH
61706: LD_INT 2
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 0
61715: PUSH
61716: LD_INT 2
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 1
61725: NEG
61726: PUSH
61727: LD_INT 1
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 2
61736: NEG
61737: PUSH
61738: LD_INT 0
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 2
61747: NEG
61748: PUSH
61749: LD_INT 1
61751: NEG
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 1
61759: NEG
61760: PUSH
61761: LD_INT 3
61763: NEG
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: LD_INT 0
61771: PUSH
61772: LD_INT 3
61774: NEG
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 1
61782: PUSH
61783: LD_INT 2
61785: NEG
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 2
61793: PUSH
61794: LD_INT 1
61796: NEG
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 3
61804: PUSH
61805: LD_INT 0
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 3
61814: PUSH
61815: LD_INT 1
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 1
61824: PUSH
61825: LD_INT 3
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 0
61834: PUSH
61835: LD_INT 3
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 1
61844: NEG
61845: PUSH
61846: LD_INT 2
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 2
61855: NEG
61856: PUSH
61857: LD_INT 1
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 3
61866: NEG
61867: PUSH
61868: LD_INT 0
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 3
61877: NEG
61878: PUSH
61879: LD_INT 1
61881: NEG
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61918: LD_ADDR_VAR 0 47
61922: PUSH
61923: LD_INT 0
61925: PUSH
61926: LD_INT 0
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 0
61935: PUSH
61936: LD_INT 1
61938: NEG
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 1
61946: PUSH
61947: LD_INT 0
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: LD_INT 1
61956: PUSH
61957: LD_INT 1
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 0
61966: PUSH
61967: LD_INT 1
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 1
61976: NEG
61977: PUSH
61978: LD_INT 0
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 1
61987: NEG
61988: PUSH
61989: LD_INT 1
61991: NEG
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 1
61999: NEG
62000: PUSH
62001: LD_INT 2
62003: NEG
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 0
62011: PUSH
62012: LD_INT 2
62014: NEG
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: PUSH
62020: LD_INT 1
62022: PUSH
62023: LD_INT 1
62025: NEG
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 2
62033: NEG
62034: PUSH
62035: LD_INT 1
62037: NEG
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 2
62045: NEG
62046: PUSH
62047: LD_INT 2
62049: NEG
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62069: LD_ADDR_VAR 0 48
62073: PUSH
62074: LD_INT 0
62076: PUSH
62077: LD_INT 0
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 0
62086: PUSH
62087: LD_INT 1
62089: NEG
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 1
62097: PUSH
62098: LD_INT 0
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 1
62107: PUSH
62108: LD_INT 1
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 0
62117: PUSH
62118: LD_INT 1
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 1
62127: NEG
62128: PUSH
62129: LD_INT 0
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: LD_INT 1
62138: NEG
62139: PUSH
62140: LD_INT 1
62142: NEG
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 1
62150: NEG
62151: PUSH
62152: LD_INT 2
62154: NEG
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 0
62162: PUSH
62163: LD_INT 2
62165: NEG
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 1
62173: PUSH
62174: LD_INT 1
62176: NEG
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 2
62184: PUSH
62185: LD_INT 0
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 2
62194: PUSH
62195: LD_INT 1
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62216: LD_ADDR_VAR 0 49
62220: PUSH
62221: LD_INT 0
62223: PUSH
62224: LD_INT 0
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 0
62233: PUSH
62234: LD_INT 1
62236: NEG
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 1
62244: PUSH
62245: LD_INT 0
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 1
62254: PUSH
62255: LD_INT 1
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 0
62264: PUSH
62265: LD_INT 1
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: PUSH
62272: LD_INT 1
62274: NEG
62275: PUSH
62276: LD_INT 0
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 1
62285: NEG
62286: PUSH
62287: LD_INT 1
62289: NEG
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 1
62297: PUSH
62298: LD_INT 1
62300: NEG
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 2
62308: PUSH
62309: LD_INT 0
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 2
62318: PUSH
62319: LD_INT 1
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 2
62328: PUSH
62329: LD_INT 2
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 1
62338: PUSH
62339: LD_INT 2
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62360: LD_ADDR_VAR 0 50
62364: PUSH
62365: LD_INT 0
62367: PUSH
62368: LD_INT 0
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 0
62377: PUSH
62378: LD_INT 1
62380: NEG
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 1
62388: PUSH
62389: LD_INT 0
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: LD_INT 1
62398: PUSH
62399: LD_INT 1
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 0
62408: PUSH
62409: LD_INT 1
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: LD_INT 1
62418: NEG
62419: PUSH
62420: LD_INT 0
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 1
62429: NEG
62430: PUSH
62431: LD_INT 1
62433: NEG
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: LD_INT 2
62441: PUSH
62442: LD_INT 1
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_INT 2
62451: PUSH
62452: LD_INT 2
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 1
62461: PUSH
62462: LD_INT 2
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 0
62471: PUSH
62472: LD_INT 2
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 1
62481: NEG
62482: PUSH
62483: LD_INT 1
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62504: LD_ADDR_VAR 0 51
62508: PUSH
62509: LD_INT 0
62511: PUSH
62512: LD_INT 0
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 0
62521: PUSH
62522: LD_INT 1
62524: NEG
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: PUSH
62530: LD_INT 1
62532: PUSH
62533: LD_INT 0
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: LD_INT 1
62542: PUSH
62543: LD_INT 1
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 0
62552: PUSH
62553: LD_INT 1
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 1
62562: NEG
62563: PUSH
62564: LD_INT 0
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 1
62573: NEG
62574: PUSH
62575: LD_INT 1
62577: NEG
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 1
62585: PUSH
62586: LD_INT 2
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 0
62595: PUSH
62596: LD_INT 2
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 1
62605: NEG
62606: PUSH
62607: LD_INT 1
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 2
62616: NEG
62617: PUSH
62618: LD_INT 0
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: LD_INT 2
62627: NEG
62628: PUSH
62629: LD_INT 1
62631: NEG
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62651: LD_ADDR_VAR 0 52
62655: PUSH
62656: LD_INT 0
62658: PUSH
62659: LD_INT 0
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 0
62668: PUSH
62669: LD_INT 1
62671: NEG
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 1
62679: PUSH
62680: LD_INT 0
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 1
62689: PUSH
62690: LD_INT 1
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: LD_INT 0
62699: PUSH
62700: LD_INT 1
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_INT 1
62709: NEG
62710: PUSH
62711: LD_INT 0
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 1
62720: NEG
62721: PUSH
62722: LD_INT 1
62724: NEG
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 1
62732: NEG
62733: PUSH
62734: LD_INT 2
62736: NEG
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: LD_INT 1
62744: NEG
62745: PUSH
62746: LD_INT 1
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 2
62755: NEG
62756: PUSH
62757: LD_INT 0
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 2
62766: NEG
62767: PUSH
62768: LD_INT 1
62770: NEG
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 2
62778: NEG
62779: PUSH
62780: LD_INT 2
62782: NEG
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62802: LD_ADDR_VAR 0 53
62806: PUSH
62807: LD_INT 0
62809: PUSH
62810: LD_INT 0
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 0
62819: PUSH
62820: LD_INT 1
62822: NEG
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: LD_INT 1
62830: PUSH
62831: LD_INT 0
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 1
62840: PUSH
62841: LD_INT 1
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 0
62850: PUSH
62851: LD_INT 1
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 1
62860: NEG
62861: PUSH
62862: LD_INT 0
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 1
62871: NEG
62872: PUSH
62873: LD_INT 1
62875: NEG
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 1
62883: NEG
62884: PUSH
62885: LD_INT 2
62887: NEG
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 0
62895: PUSH
62896: LD_INT 2
62898: NEG
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 1
62906: PUSH
62907: LD_INT 1
62909: NEG
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: LD_INT 2
62917: PUSH
62918: LD_INT 0
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: LD_INT 2
62927: PUSH
62928: LD_INT 1
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: LD_INT 2
62937: PUSH
62938: LD_INT 2
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: LD_INT 1
62947: PUSH
62948: LD_INT 2
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PUSH
62955: LD_INT 0
62957: PUSH
62958: LD_INT 2
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 1
62967: NEG
62968: PUSH
62969: LD_INT 1
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 2
62978: NEG
62979: PUSH
62980: LD_INT 0
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PUSH
62987: LD_INT 2
62989: NEG
62990: PUSH
62991: LD_INT 1
62993: NEG
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: PUSH
62999: LD_INT 2
63001: NEG
63002: PUSH
63003: LD_INT 2
63005: NEG
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: EMPTY
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63032: LD_ADDR_VAR 0 54
63036: PUSH
63037: LD_INT 0
63039: PUSH
63040: LD_INT 0
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: PUSH
63047: LD_INT 0
63049: PUSH
63050: LD_INT 1
63052: NEG
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 1
63060: PUSH
63061: LD_INT 0
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: LD_INT 1
63070: PUSH
63071: LD_INT 1
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 0
63080: PUSH
63081: LD_INT 1
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 1
63090: NEG
63091: PUSH
63092: LD_INT 0
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 1
63101: NEG
63102: PUSH
63103: LD_INT 1
63105: NEG
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: LD_INT 1
63113: NEG
63114: PUSH
63115: LD_INT 2
63117: NEG
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 0
63125: PUSH
63126: LD_INT 2
63128: NEG
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 1
63136: PUSH
63137: LD_INT 1
63139: NEG
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: LD_INT 2
63147: PUSH
63148: LD_INT 0
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: PUSH
63155: LD_INT 2
63157: PUSH
63158: LD_INT 1
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: PUSH
63165: LD_INT 2
63167: PUSH
63168: LD_INT 2
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: PUSH
63175: LD_INT 1
63177: PUSH
63178: LD_INT 2
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: PUSH
63185: LD_INT 0
63187: PUSH
63188: LD_INT 2
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 1
63197: NEG
63198: PUSH
63199: LD_INT 1
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 2
63208: NEG
63209: PUSH
63210: LD_INT 0
63212: PUSH
63213: EMPTY
63214: LIST
63215: LIST
63216: PUSH
63217: LD_INT 2
63219: NEG
63220: PUSH
63221: LD_INT 1
63223: NEG
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 2
63231: NEG
63232: PUSH
63233: LD_INT 2
63235: NEG
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63262: LD_ADDR_VAR 0 55
63266: PUSH
63267: LD_INT 0
63269: PUSH
63270: LD_INT 0
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: LD_INT 0
63279: PUSH
63280: LD_INT 1
63282: NEG
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 1
63290: PUSH
63291: LD_INT 0
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 1
63300: PUSH
63301: LD_INT 1
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 0
63310: PUSH
63311: LD_INT 1
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 1
63320: NEG
63321: PUSH
63322: LD_INT 0
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 1
63331: NEG
63332: PUSH
63333: LD_INT 1
63335: NEG
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 1
63343: NEG
63344: PUSH
63345: LD_INT 2
63347: NEG
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: PUSH
63353: LD_INT 0
63355: PUSH
63356: LD_INT 2
63358: NEG
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 1
63366: PUSH
63367: LD_INT 1
63369: NEG
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 2
63377: PUSH
63378: LD_INT 0
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 2
63387: PUSH
63388: LD_INT 1
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: LD_INT 2
63397: PUSH
63398: LD_INT 2
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: PUSH
63405: LD_INT 1
63407: PUSH
63408: LD_INT 2
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 0
63417: PUSH
63418: LD_INT 2
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 1
63427: NEG
63428: PUSH
63429: LD_INT 1
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 2
63438: NEG
63439: PUSH
63440: LD_INT 0
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 2
63449: NEG
63450: PUSH
63451: LD_INT 1
63453: NEG
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 2
63461: NEG
63462: PUSH
63463: LD_INT 2
63465: NEG
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63492: LD_ADDR_VAR 0 56
63496: PUSH
63497: LD_INT 0
63499: PUSH
63500: LD_INT 0
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 0
63509: PUSH
63510: LD_INT 1
63512: NEG
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: LD_INT 1
63520: PUSH
63521: LD_INT 0
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: PUSH
63528: LD_INT 1
63530: PUSH
63531: LD_INT 1
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: LD_INT 0
63540: PUSH
63541: LD_INT 1
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: LD_INT 1
63550: NEG
63551: PUSH
63552: LD_INT 0
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 1
63561: NEG
63562: PUSH
63563: LD_INT 1
63565: NEG
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 1
63573: NEG
63574: PUSH
63575: LD_INT 2
63577: NEG
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_INT 0
63585: PUSH
63586: LD_INT 2
63588: NEG
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 1
63596: PUSH
63597: LD_INT 1
63599: NEG
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 2
63607: PUSH
63608: LD_INT 0
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 2
63617: PUSH
63618: LD_INT 1
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 2
63627: PUSH
63628: LD_INT 2
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 1
63637: PUSH
63638: LD_INT 2
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: LD_INT 0
63647: PUSH
63648: LD_INT 2
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 1
63657: NEG
63658: PUSH
63659: LD_INT 1
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: LD_INT 2
63668: NEG
63669: PUSH
63670: LD_INT 0
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: PUSH
63677: LD_INT 2
63679: NEG
63680: PUSH
63681: LD_INT 1
63683: NEG
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: LD_INT 2
63691: NEG
63692: PUSH
63693: LD_INT 2
63695: NEG
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: LIST
63719: LIST
63720: LIST
63721: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63722: LD_ADDR_VAR 0 57
63726: PUSH
63727: LD_INT 0
63729: PUSH
63730: LD_INT 0
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 0
63739: PUSH
63740: LD_INT 1
63742: NEG
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PUSH
63748: LD_INT 1
63750: PUSH
63751: LD_INT 0
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 1
63760: PUSH
63761: LD_INT 1
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: LD_INT 0
63770: PUSH
63771: LD_INT 1
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PUSH
63778: LD_INT 1
63780: NEG
63781: PUSH
63782: LD_INT 0
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: LD_INT 1
63791: NEG
63792: PUSH
63793: LD_INT 1
63795: NEG
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_INT 1
63803: NEG
63804: PUSH
63805: LD_INT 2
63807: NEG
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 0
63815: PUSH
63816: LD_INT 2
63818: NEG
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: LD_INT 1
63826: PUSH
63827: LD_INT 1
63829: NEG
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 2
63837: PUSH
63838: LD_INT 0
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 2
63847: PUSH
63848: LD_INT 1
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 2
63857: PUSH
63858: LD_INT 2
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 1
63867: PUSH
63868: LD_INT 2
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: PUSH
63875: LD_INT 0
63877: PUSH
63878: LD_INT 2
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 1
63887: NEG
63888: PUSH
63889: LD_INT 1
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: LD_INT 2
63898: NEG
63899: PUSH
63900: LD_INT 0
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: PUSH
63907: LD_INT 2
63909: NEG
63910: PUSH
63911: LD_INT 1
63913: NEG
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: LD_INT 2
63921: NEG
63922: PUSH
63923: LD_INT 2
63925: NEG
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63952: LD_ADDR_VAR 0 58
63956: PUSH
63957: LD_INT 0
63959: PUSH
63960: LD_INT 0
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 0
63969: PUSH
63970: LD_INT 1
63972: NEG
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: PUSH
63978: LD_INT 1
63980: PUSH
63981: LD_INT 0
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 1
63990: PUSH
63991: LD_INT 1
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: PUSH
63998: LD_INT 0
64000: PUSH
64001: LD_INT 1
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PUSH
64008: LD_INT 1
64010: NEG
64011: PUSH
64012: LD_INT 0
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: LD_INT 1
64021: NEG
64022: PUSH
64023: LD_INT 1
64025: NEG
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 1
64033: NEG
64034: PUSH
64035: LD_INT 2
64037: NEG
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: PUSH
64043: LD_INT 0
64045: PUSH
64046: LD_INT 2
64048: NEG
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: LD_INT 1
64056: PUSH
64057: LD_INT 1
64059: NEG
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: LD_INT 2
64067: PUSH
64068: LD_INT 0
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: LD_INT 2
64077: PUSH
64078: LD_INT 1
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: LD_INT 2
64087: PUSH
64088: LD_INT 2
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 1
64097: PUSH
64098: LD_INT 2
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 0
64107: PUSH
64108: LD_INT 2
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: PUSH
64115: LD_INT 1
64117: NEG
64118: PUSH
64119: LD_INT 1
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 2
64128: NEG
64129: PUSH
64130: LD_INT 0
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: PUSH
64137: LD_INT 2
64139: NEG
64140: PUSH
64141: LD_INT 1
64143: NEG
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 2
64151: NEG
64152: PUSH
64153: LD_INT 2
64155: NEG
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: LIST
64178: LIST
64179: LIST
64180: LIST
64181: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64182: LD_ADDR_VAR 0 59
64186: PUSH
64187: LD_INT 0
64189: PUSH
64190: LD_INT 0
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: PUSH
64197: LD_INT 0
64199: PUSH
64200: LD_INT 1
64202: NEG
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: LD_INT 1
64210: PUSH
64211: LD_INT 0
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: LD_INT 1
64220: PUSH
64221: LD_INT 1
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: LD_INT 0
64230: PUSH
64231: LD_INT 1
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: LD_INT 1
64240: NEG
64241: PUSH
64242: LD_INT 0
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 1
64251: NEG
64252: PUSH
64253: LD_INT 1
64255: NEG
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: LIST
64265: LIST
64266: LIST
64267: LIST
64268: LIST
64269: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64270: LD_ADDR_VAR 0 60
64274: PUSH
64275: LD_INT 0
64277: PUSH
64278: LD_INT 0
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: PUSH
64285: LD_INT 0
64287: PUSH
64288: LD_INT 1
64290: NEG
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: PUSH
64296: LD_INT 1
64298: PUSH
64299: LD_INT 0
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: PUSH
64306: LD_INT 1
64308: PUSH
64309: LD_INT 1
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: PUSH
64316: LD_INT 0
64318: PUSH
64319: LD_INT 1
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 1
64328: NEG
64329: PUSH
64330: LD_INT 0
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 1
64339: NEG
64340: PUSH
64341: LD_INT 1
64343: NEG
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: LIST
64353: LIST
64354: LIST
64355: LIST
64356: LIST
64357: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64358: LD_ADDR_VAR 0 61
64362: PUSH
64363: LD_INT 0
64365: PUSH
64366: LD_INT 0
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: LD_INT 0
64375: PUSH
64376: LD_INT 1
64378: NEG
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 1
64386: PUSH
64387: LD_INT 0
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 1
64396: PUSH
64397: LD_INT 1
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: PUSH
64404: LD_INT 0
64406: PUSH
64407: LD_INT 1
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: LD_INT 1
64416: NEG
64417: PUSH
64418: LD_INT 0
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: LD_INT 1
64427: NEG
64428: PUSH
64429: LD_INT 1
64431: NEG
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64446: LD_ADDR_VAR 0 62
64450: PUSH
64451: LD_INT 0
64453: PUSH
64454: LD_INT 0
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 0
64463: PUSH
64464: LD_INT 1
64466: NEG
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: LD_INT 1
64474: PUSH
64475: LD_INT 0
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: PUSH
64482: LD_INT 1
64484: PUSH
64485: LD_INT 1
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PUSH
64492: LD_INT 0
64494: PUSH
64495: LD_INT 1
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 1
64504: NEG
64505: PUSH
64506: LD_INT 0
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: LD_INT 1
64515: NEG
64516: PUSH
64517: LD_INT 1
64519: NEG
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: LIST
64529: LIST
64530: LIST
64531: LIST
64532: LIST
64533: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64534: LD_ADDR_VAR 0 63
64538: PUSH
64539: LD_INT 0
64541: PUSH
64542: LD_INT 0
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: PUSH
64549: LD_INT 0
64551: PUSH
64552: LD_INT 1
64554: NEG
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: LD_INT 1
64562: PUSH
64563: LD_INT 0
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: LD_INT 1
64572: PUSH
64573: LD_INT 1
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: PUSH
64580: LD_INT 0
64582: PUSH
64583: LD_INT 1
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: LD_INT 1
64592: NEG
64593: PUSH
64594: LD_INT 0
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: PUSH
64601: LD_INT 1
64603: NEG
64604: PUSH
64605: LD_INT 1
64607: NEG
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64622: LD_ADDR_VAR 0 64
64626: PUSH
64627: LD_INT 0
64629: PUSH
64630: LD_INT 0
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: PUSH
64637: LD_INT 0
64639: PUSH
64640: LD_INT 1
64642: NEG
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 1
64650: PUSH
64651: LD_INT 0
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_INT 1
64660: PUSH
64661: LD_INT 1
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: PUSH
64668: LD_INT 0
64670: PUSH
64671: LD_INT 1
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 1
64680: NEG
64681: PUSH
64682: LD_INT 0
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 1
64691: NEG
64692: PUSH
64693: LD_INT 1
64695: NEG
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: ST_TO_ADDR
// end ; 1 :
64710: GO 70607
64712: LD_INT 1
64714: DOUBLE
64715: EQUAL
64716: IFTRUE 64720
64718: GO 67343
64720: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64721: LD_ADDR_VAR 0 11
64725: PUSH
64726: LD_INT 1
64728: NEG
64729: PUSH
64730: LD_INT 3
64732: NEG
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: PUSH
64738: LD_INT 0
64740: PUSH
64741: LD_INT 3
64743: NEG
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: LD_INT 1
64751: PUSH
64752: LD_INT 2
64754: NEG
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: LIST
64764: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64765: LD_ADDR_VAR 0 12
64769: PUSH
64770: LD_INT 2
64772: PUSH
64773: LD_INT 1
64775: NEG
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: LD_INT 3
64783: PUSH
64784: LD_INT 0
64786: PUSH
64787: EMPTY
64788: LIST
64789: LIST
64790: PUSH
64791: LD_INT 3
64793: PUSH
64794: LD_INT 1
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: LIST
64805: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64806: LD_ADDR_VAR 0 13
64810: PUSH
64811: LD_INT 3
64813: PUSH
64814: LD_INT 2
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: LD_INT 3
64823: PUSH
64824: LD_INT 3
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: PUSH
64831: LD_INT 2
64833: PUSH
64834: LD_INT 3
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: LIST
64845: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64846: LD_ADDR_VAR 0 14
64850: PUSH
64851: LD_INT 1
64853: PUSH
64854: LD_INT 3
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: PUSH
64861: LD_INT 0
64863: PUSH
64864: LD_INT 3
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 1
64873: NEG
64874: PUSH
64875: LD_INT 2
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: LIST
64886: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64887: LD_ADDR_VAR 0 15
64891: PUSH
64892: LD_INT 2
64894: NEG
64895: PUSH
64896: LD_INT 1
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: PUSH
64903: LD_INT 3
64905: NEG
64906: PUSH
64907: LD_INT 0
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: PUSH
64914: LD_INT 3
64916: NEG
64917: PUSH
64918: LD_INT 1
64920: NEG
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: LIST
64930: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64931: LD_ADDR_VAR 0 16
64935: PUSH
64936: LD_INT 2
64938: NEG
64939: PUSH
64940: LD_INT 3
64942: NEG
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: PUSH
64948: LD_INT 3
64950: NEG
64951: PUSH
64952: LD_INT 2
64954: NEG
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: PUSH
64960: LD_INT 3
64962: NEG
64963: PUSH
64964: LD_INT 3
64966: NEG
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: LIST
64976: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64977: LD_ADDR_VAR 0 17
64981: PUSH
64982: LD_INT 1
64984: NEG
64985: PUSH
64986: LD_INT 3
64988: NEG
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: LD_INT 0
64996: PUSH
64997: LD_INT 3
64999: NEG
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: PUSH
65005: LD_INT 1
65007: PUSH
65008: LD_INT 2
65010: NEG
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: LIST
65020: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65021: LD_ADDR_VAR 0 18
65025: PUSH
65026: LD_INT 2
65028: PUSH
65029: LD_INT 1
65031: NEG
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PUSH
65037: LD_INT 3
65039: PUSH
65040: LD_INT 0
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: PUSH
65047: LD_INT 3
65049: PUSH
65050: LD_INT 1
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: LIST
65061: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65062: LD_ADDR_VAR 0 19
65066: PUSH
65067: LD_INT 3
65069: PUSH
65070: LD_INT 2
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: PUSH
65077: LD_INT 3
65079: PUSH
65080: LD_INT 3
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: PUSH
65087: LD_INT 2
65089: PUSH
65090: LD_INT 3
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: LIST
65101: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65102: LD_ADDR_VAR 0 20
65106: PUSH
65107: LD_INT 1
65109: PUSH
65110: LD_INT 3
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: PUSH
65117: LD_INT 0
65119: PUSH
65120: LD_INT 3
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 1
65129: NEG
65130: PUSH
65131: LD_INT 2
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: LIST
65142: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65143: LD_ADDR_VAR 0 21
65147: PUSH
65148: LD_INT 2
65150: NEG
65151: PUSH
65152: LD_INT 1
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: LD_INT 3
65161: NEG
65162: PUSH
65163: LD_INT 0
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: PUSH
65170: LD_INT 3
65172: NEG
65173: PUSH
65174: LD_INT 1
65176: NEG
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: LIST
65186: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65187: LD_ADDR_VAR 0 22
65191: PUSH
65192: LD_INT 2
65194: NEG
65195: PUSH
65196: LD_INT 3
65198: NEG
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: LD_INT 3
65206: NEG
65207: PUSH
65208: LD_INT 2
65210: NEG
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_INT 3
65218: NEG
65219: PUSH
65220: LD_INT 3
65222: NEG
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: LIST
65232: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65233: LD_ADDR_VAR 0 23
65237: PUSH
65238: LD_INT 0
65240: PUSH
65241: LD_INT 3
65243: NEG
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: LD_INT 1
65251: NEG
65252: PUSH
65253: LD_INT 4
65255: NEG
65256: PUSH
65257: EMPTY
65258: LIST
65259: LIST
65260: PUSH
65261: LD_INT 1
65263: PUSH
65264: LD_INT 3
65266: NEG
65267: PUSH
65268: EMPTY
65269: LIST
65270: LIST
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: LIST
65276: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65277: LD_ADDR_VAR 0 24
65281: PUSH
65282: LD_INT 3
65284: PUSH
65285: LD_INT 0
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: PUSH
65292: LD_INT 3
65294: PUSH
65295: LD_INT 1
65297: NEG
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: PUSH
65303: LD_INT 4
65305: PUSH
65306: LD_INT 1
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: LIST
65317: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65318: LD_ADDR_VAR 0 25
65322: PUSH
65323: LD_INT 3
65325: PUSH
65326: LD_INT 3
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: PUSH
65333: LD_INT 4
65335: PUSH
65336: LD_INT 3
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: PUSH
65343: LD_INT 3
65345: PUSH
65346: LD_INT 4
65348: PUSH
65349: EMPTY
65350: LIST
65351: LIST
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: LIST
65357: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65358: LD_ADDR_VAR 0 26
65362: PUSH
65363: LD_INT 0
65365: PUSH
65366: LD_INT 3
65368: PUSH
65369: EMPTY
65370: LIST
65371: LIST
65372: PUSH
65373: LD_INT 1
65375: PUSH
65376: LD_INT 4
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: PUSH
65383: LD_INT 1
65385: NEG
65386: PUSH
65387: LD_INT 3
65389: PUSH
65390: EMPTY
65391: LIST
65392: LIST
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: LIST
65398: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65399: LD_ADDR_VAR 0 27
65403: PUSH
65404: LD_INT 3
65406: NEG
65407: PUSH
65408: LD_INT 0
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: PUSH
65415: LD_INT 3
65417: NEG
65418: PUSH
65419: LD_INT 1
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: PUSH
65426: LD_INT 4
65428: NEG
65429: PUSH
65430: LD_INT 1
65432: NEG
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: LIST
65442: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65443: LD_ADDR_VAR 0 28
65447: PUSH
65448: LD_INT 3
65450: NEG
65451: PUSH
65452: LD_INT 3
65454: NEG
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: LD_INT 3
65462: NEG
65463: PUSH
65464: LD_INT 4
65466: NEG
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: PUSH
65472: LD_INT 4
65474: NEG
65475: PUSH
65476: LD_INT 3
65478: NEG
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: LIST
65488: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65489: LD_ADDR_VAR 0 29
65493: PUSH
65494: LD_INT 1
65496: NEG
65497: PUSH
65498: LD_INT 3
65500: NEG
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: PUSH
65506: LD_INT 0
65508: PUSH
65509: LD_INT 3
65511: NEG
65512: PUSH
65513: EMPTY
65514: LIST
65515: LIST
65516: PUSH
65517: LD_INT 1
65519: PUSH
65520: LD_INT 2
65522: NEG
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: LD_INT 1
65530: NEG
65531: PUSH
65532: LD_INT 4
65534: NEG
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: LD_INT 0
65542: PUSH
65543: LD_INT 4
65545: NEG
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: PUSH
65551: LD_INT 1
65553: PUSH
65554: LD_INT 3
65556: NEG
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: PUSH
65562: LD_INT 1
65564: NEG
65565: PUSH
65566: LD_INT 5
65568: NEG
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: LD_INT 0
65576: PUSH
65577: LD_INT 5
65579: NEG
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: PUSH
65585: LD_INT 1
65587: PUSH
65588: LD_INT 4
65590: NEG
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: PUSH
65596: LD_INT 1
65598: NEG
65599: PUSH
65600: LD_INT 6
65602: NEG
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: PUSH
65608: LD_INT 0
65610: PUSH
65611: LD_INT 6
65613: NEG
65614: PUSH
65615: EMPTY
65616: LIST
65617: LIST
65618: PUSH
65619: LD_INT 1
65621: PUSH
65622: LD_INT 5
65624: NEG
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: LIST
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65644: LD_ADDR_VAR 0 30
65648: PUSH
65649: LD_INT 2
65651: PUSH
65652: LD_INT 1
65654: NEG
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: PUSH
65660: LD_INT 3
65662: PUSH
65663: LD_INT 0
65665: PUSH
65666: EMPTY
65667: LIST
65668: LIST
65669: PUSH
65670: LD_INT 3
65672: PUSH
65673: LD_INT 1
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: LD_INT 3
65682: PUSH
65683: LD_INT 1
65685: NEG
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: PUSH
65691: LD_INT 4
65693: PUSH
65694: LD_INT 0
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: PUSH
65701: LD_INT 4
65703: PUSH
65704: LD_INT 1
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: PUSH
65711: LD_INT 4
65713: PUSH
65714: LD_INT 1
65716: NEG
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: PUSH
65722: LD_INT 5
65724: PUSH
65725: LD_INT 0
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: PUSH
65732: LD_INT 5
65734: PUSH
65735: LD_INT 1
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: PUSH
65742: LD_INT 5
65744: PUSH
65745: LD_INT 1
65747: NEG
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: PUSH
65753: LD_INT 6
65755: PUSH
65756: LD_INT 0
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: PUSH
65763: LD_INT 6
65765: PUSH
65766: LD_INT 1
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: LIST
65785: LIST
65786: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65787: LD_ADDR_VAR 0 31
65791: PUSH
65792: LD_INT 3
65794: PUSH
65795: LD_INT 2
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 3
65804: PUSH
65805: LD_INT 3
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: PUSH
65812: LD_INT 2
65814: PUSH
65815: LD_INT 3
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: PUSH
65822: LD_INT 4
65824: PUSH
65825: LD_INT 3
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: PUSH
65832: LD_INT 4
65834: PUSH
65835: LD_INT 4
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: LD_INT 3
65844: PUSH
65845: LD_INT 4
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PUSH
65852: LD_INT 5
65854: PUSH
65855: LD_INT 4
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 5
65864: PUSH
65865: LD_INT 5
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: LD_INT 4
65874: PUSH
65875: LD_INT 5
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: PUSH
65882: LD_INT 6
65884: PUSH
65885: LD_INT 5
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: LD_INT 6
65894: PUSH
65895: LD_INT 6
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: LD_INT 5
65904: PUSH
65905: LD_INT 6
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: PUSH
65912: EMPTY
65913: LIST
65914: LIST
65915: LIST
65916: LIST
65917: LIST
65918: LIST
65919: LIST
65920: LIST
65921: LIST
65922: LIST
65923: LIST
65924: LIST
65925: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65926: LD_ADDR_VAR 0 32
65930: PUSH
65931: LD_INT 1
65933: PUSH
65934: LD_INT 3
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: PUSH
65941: LD_INT 0
65943: PUSH
65944: LD_INT 3
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: PUSH
65951: LD_INT 1
65953: NEG
65954: PUSH
65955: LD_INT 2
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: LD_INT 1
65964: PUSH
65965: LD_INT 4
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 0
65974: PUSH
65975: LD_INT 4
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: LD_INT 1
65984: NEG
65985: PUSH
65986: LD_INT 3
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 1
65995: PUSH
65996: LD_INT 5
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: PUSH
66003: LD_INT 0
66005: PUSH
66006: LD_INT 5
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 1
66015: NEG
66016: PUSH
66017: LD_INT 4
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 1
66026: PUSH
66027: LD_INT 6
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 0
66036: PUSH
66037: LD_INT 6
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: PUSH
66044: LD_INT 1
66046: NEG
66047: PUSH
66048: LD_INT 5
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: LIST
66059: LIST
66060: LIST
66061: LIST
66062: LIST
66063: LIST
66064: LIST
66065: LIST
66066: LIST
66067: LIST
66068: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66069: LD_ADDR_VAR 0 33
66073: PUSH
66074: LD_INT 2
66076: NEG
66077: PUSH
66078: LD_INT 1
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: LD_INT 3
66087: NEG
66088: PUSH
66089: LD_INT 0
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: PUSH
66096: LD_INT 3
66098: NEG
66099: PUSH
66100: LD_INT 1
66102: NEG
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: PUSH
66108: LD_INT 3
66110: NEG
66111: PUSH
66112: LD_INT 1
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: PUSH
66119: LD_INT 4
66121: NEG
66122: PUSH
66123: LD_INT 0
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: PUSH
66130: LD_INT 4
66132: NEG
66133: PUSH
66134: LD_INT 1
66136: NEG
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: PUSH
66142: LD_INT 4
66144: NEG
66145: PUSH
66146: LD_INT 1
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PUSH
66153: LD_INT 5
66155: NEG
66156: PUSH
66157: LD_INT 0
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: PUSH
66164: LD_INT 5
66166: NEG
66167: PUSH
66168: LD_INT 1
66170: NEG
66171: PUSH
66172: EMPTY
66173: LIST
66174: LIST
66175: PUSH
66176: LD_INT 5
66178: NEG
66179: PUSH
66180: LD_INT 1
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: PUSH
66187: LD_INT 6
66189: NEG
66190: PUSH
66191: LD_INT 0
66193: PUSH
66194: EMPTY
66195: LIST
66196: LIST
66197: PUSH
66198: LD_INT 6
66200: NEG
66201: PUSH
66202: LD_INT 1
66204: NEG
66205: PUSH
66206: EMPTY
66207: LIST
66208: LIST
66209: PUSH
66210: EMPTY
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: LIST
66218: LIST
66219: LIST
66220: LIST
66221: LIST
66222: LIST
66223: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66224: LD_ADDR_VAR 0 34
66228: PUSH
66229: LD_INT 2
66231: NEG
66232: PUSH
66233: LD_INT 3
66235: NEG
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: PUSH
66241: LD_INT 3
66243: NEG
66244: PUSH
66245: LD_INT 2
66247: NEG
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: PUSH
66253: LD_INT 3
66255: NEG
66256: PUSH
66257: LD_INT 3
66259: NEG
66260: PUSH
66261: EMPTY
66262: LIST
66263: LIST
66264: PUSH
66265: LD_INT 3
66267: NEG
66268: PUSH
66269: LD_INT 4
66271: NEG
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: LD_INT 4
66279: NEG
66280: PUSH
66281: LD_INT 3
66283: NEG
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: PUSH
66289: LD_INT 4
66291: NEG
66292: PUSH
66293: LD_INT 4
66295: NEG
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 4
66303: NEG
66304: PUSH
66305: LD_INT 5
66307: NEG
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: PUSH
66313: LD_INT 5
66315: NEG
66316: PUSH
66317: LD_INT 4
66319: NEG
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: PUSH
66325: LD_INT 5
66327: NEG
66328: PUSH
66329: LD_INT 5
66331: NEG
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: PUSH
66337: LD_INT 5
66339: NEG
66340: PUSH
66341: LD_INT 6
66343: NEG
66344: PUSH
66345: EMPTY
66346: LIST
66347: LIST
66348: PUSH
66349: LD_INT 6
66351: NEG
66352: PUSH
66353: LD_INT 5
66355: NEG
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: PUSH
66361: LD_INT 6
66363: NEG
66364: PUSH
66365: LD_INT 6
66367: NEG
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: LIST
66377: LIST
66378: LIST
66379: LIST
66380: LIST
66381: LIST
66382: LIST
66383: LIST
66384: LIST
66385: LIST
66386: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66387: LD_ADDR_VAR 0 41
66391: PUSH
66392: LD_INT 0
66394: PUSH
66395: LD_INT 2
66397: NEG
66398: PUSH
66399: EMPTY
66400: LIST
66401: LIST
66402: PUSH
66403: LD_INT 1
66405: NEG
66406: PUSH
66407: LD_INT 3
66409: NEG
66410: PUSH
66411: EMPTY
66412: LIST
66413: LIST
66414: PUSH
66415: LD_INT 1
66417: PUSH
66418: LD_INT 2
66420: NEG
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: LIST
66430: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66431: LD_ADDR_VAR 0 42
66435: PUSH
66436: LD_INT 2
66438: PUSH
66439: LD_INT 0
66441: PUSH
66442: EMPTY
66443: LIST
66444: LIST
66445: PUSH
66446: LD_INT 2
66448: PUSH
66449: LD_INT 1
66451: NEG
66452: PUSH
66453: EMPTY
66454: LIST
66455: LIST
66456: PUSH
66457: LD_INT 3
66459: PUSH
66460: LD_INT 1
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: LIST
66471: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66472: LD_ADDR_VAR 0 43
66476: PUSH
66477: LD_INT 2
66479: PUSH
66480: LD_INT 2
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: PUSH
66487: LD_INT 3
66489: PUSH
66490: LD_INT 2
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: LD_INT 2
66499: PUSH
66500: LD_INT 3
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: LIST
66511: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66512: LD_ADDR_VAR 0 44
66516: PUSH
66517: LD_INT 0
66519: PUSH
66520: LD_INT 2
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PUSH
66527: LD_INT 1
66529: PUSH
66530: LD_INT 3
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: PUSH
66537: LD_INT 1
66539: NEG
66540: PUSH
66541: LD_INT 2
66543: PUSH
66544: EMPTY
66545: LIST
66546: LIST
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: LIST
66552: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66553: LD_ADDR_VAR 0 45
66557: PUSH
66558: LD_INT 2
66560: NEG
66561: PUSH
66562: LD_INT 0
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: PUSH
66569: LD_INT 2
66571: NEG
66572: PUSH
66573: LD_INT 1
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: PUSH
66580: LD_INT 3
66582: NEG
66583: PUSH
66584: LD_INT 1
66586: NEG
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: EMPTY
66593: LIST
66594: LIST
66595: LIST
66596: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66597: LD_ADDR_VAR 0 46
66601: PUSH
66602: LD_INT 2
66604: NEG
66605: PUSH
66606: LD_INT 2
66608: NEG
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: LD_INT 2
66616: NEG
66617: PUSH
66618: LD_INT 3
66620: NEG
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: PUSH
66626: LD_INT 3
66628: NEG
66629: PUSH
66630: LD_INT 2
66632: NEG
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: LIST
66642: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66643: LD_ADDR_VAR 0 47
66647: PUSH
66648: LD_INT 2
66650: NEG
66651: PUSH
66652: LD_INT 3
66654: NEG
66655: PUSH
66656: EMPTY
66657: LIST
66658: LIST
66659: PUSH
66660: LD_INT 1
66662: NEG
66663: PUSH
66664: LD_INT 3
66666: NEG
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66676: LD_ADDR_VAR 0 48
66680: PUSH
66681: LD_INT 1
66683: PUSH
66684: LD_INT 2
66686: NEG
66687: PUSH
66688: EMPTY
66689: LIST
66690: LIST
66691: PUSH
66692: LD_INT 2
66694: PUSH
66695: LD_INT 1
66697: NEG
66698: PUSH
66699: EMPTY
66700: LIST
66701: LIST
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66707: LD_ADDR_VAR 0 49
66711: PUSH
66712: LD_INT 3
66714: PUSH
66715: LD_INT 1
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PUSH
66722: LD_INT 3
66724: PUSH
66725: LD_INT 2
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66736: LD_ADDR_VAR 0 50
66740: PUSH
66741: LD_INT 2
66743: PUSH
66744: LD_INT 3
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: PUSH
66751: LD_INT 1
66753: PUSH
66754: LD_INT 3
66756: PUSH
66757: EMPTY
66758: LIST
66759: LIST
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66765: LD_ADDR_VAR 0 51
66769: PUSH
66770: LD_INT 1
66772: NEG
66773: PUSH
66774: LD_INT 2
66776: PUSH
66777: EMPTY
66778: LIST
66779: LIST
66780: PUSH
66781: LD_INT 2
66783: NEG
66784: PUSH
66785: LD_INT 1
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66796: LD_ADDR_VAR 0 52
66800: PUSH
66801: LD_INT 3
66803: NEG
66804: PUSH
66805: LD_INT 1
66807: NEG
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: LD_INT 3
66815: NEG
66816: PUSH
66817: LD_INT 2
66819: NEG
66820: PUSH
66821: EMPTY
66822: LIST
66823: LIST
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66829: LD_ADDR_VAR 0 53
66833: PUSH
66834: LD_INT 1
66836: NEG
66837: PUSH
66838: LD_INT 3
66840: NEG
66841: PUSH
66842: EMPTY
66843: LIST
66844: LIST
66845: PUSH
66846: LD_INT 0
66848: PUSH
66849: LD_INT 3
66851: NEG
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: PUSH
66857: LD_INT 1
66859: PUSH
66860: LD_INT 2
66862: NEG
66863: PUSH
66864: EMPTY
66865: LIST
66866: LIST
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: LIST
66872: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66873: LD_ADDR_VAR 0 54
66877: PUSH
66878: LD_INT 2
66880: PUSH
66881: LD_INT 1
66883: NEG
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: LD_INT 3
66891: PUSH
66892: LD_INT 0
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: PUSH
66899: LD_INT 3
66901: PUSH
66902: LD_INT 1
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: PUSH
66909: EMPTY
66910: LIST
66911: LIST
66912: LIST
66913: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66914: LD_ADDR_VAR 0 55
66918: PUSH
66919: LD_INT 3
66921: PUSH
66922: LD_INT 2
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: PUSH
66929: LD_INT 3
66931: PUSH
66932: LD_INT 3
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: LD_INT 2
66941: PUSH
66942: LD_INT 3
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PUSH
66949: EMPTY
66950: LIST
66951: LIST
66952: LIST
66953: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66954: LD_ADDR_VAR 0 56
66958: PUSH
66959: LD_INT 1
66961: PUSH
66962: LD_INT 3
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: LD_INT 0
66971: PUSH
66972: LD_INT 3
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: LD_INT 1
66981: NEG
66982: PUSH
66983: LD_INT 2
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: LIST
66994: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66995: LD_ADDR_VAR 0 57
66999: PUSH
67000: LD_INT 2
67002: NEG
67003: PUSH
67004: LD_INT 1
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: PUSH
67011: LD_INT 3
67013: NEG
67014: PUSH
67015: LD_INT 0
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: PUSH
67022: LD_INT 3
67024: NEG
67025: PUSH
67026: LD_INT 1
67028: NEG
67029: PUSH
67030: EMPTY
67031: LIST
67032: LIST
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: LIST
67038: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67039: LD_ADDR_VAR 0 58
67043: PUSH
67044: LD_INT 2
67046: NEG
67047: PUSH
67048: LD_INT 3
67050: NEG
67051: PUSH
67052: EMPTY
67053: LIST
67054: LIST
67055: PUSH
67056: LD_INT 3
67058: NEG
67059: PUSH
67060: LD_INT 2
67062: NEG
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PUSH
67068: LD_INT 3
67070: NEG
67071: PUSH
67072: LD_INT 3
67074: NEG
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: LIST
67084: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67085: LD_ADDR_VAR 0 59
67089: PUSH
67090: LD_INT 1
67092: NEG
67093: PUSH
67094: LD_INT 2
67096: NEG
67097: PUSH
67098: EMPTY
67099: LIST
67100: LIST
67101: PUSH
67102: LD_INT 0
67104: PUSH
67105: LD_INT 2
67107: NEG
67108: PUSH
67109: EMPTY
67110: LIST
67111: LIST
67112: PUSH
67113: LD_INT 1
67115: PUSH
67116: LD_INT 1
67118: NEG
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: LIST
67128: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67129: LD_ADDR_VAR 0 60
67133: PUSH
67134: LD_INT 1
67136: PUSH
67137: LD_INT 1
67139: NEG
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: LD_INT 2
67147: PUSH
67148: LD_INT 0
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: PUSH
67155: LD_INT 2
67157: PUSH
67158: LD_INT 1
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: LIST
67169: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67170: LD_ADDR_VAR 0 61
67174: PUSH
67175: LD_INT 2
67177: PUSH
67178: LD_INT 1
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: PUSH
67185: LD_INT 2
67187: PUSH
67188: LD_INT 2
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: PUSH
67195: LD_INT 1
67197: PUSH
67198: LD_INT 2
67200: PUSH
67201: EMPTY
67202: LIST
67203: LIST
67204: PUSH
67205: EMPTY
67206: LIST
67207: LIST
67208: LIST
67209: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67210: LD_ADDR_VAR 0 62
67214: PUSH
67215: LD_INT 1
67217: PUSH
67218: LD_INT 2
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: LD_INT 0
67227: PUSH
67228: LD_INT 2
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: PUSH
67235: LD_INT 1
67237: NEG
67238: PUSH
67239: LD_INT 1
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: LIST
67250: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67251: LD_ADDR_VAR 0 63
67255: PUSH
67256: LD_INT 1
67258: NEG
67259: PUSH
67260: LD_INT 1
67262: PUSH
67263: EMPTY
67264: LIST
67265: LIST
67266: PUSH
67267: LD_INT 2
67269: NEG
67270: PUSH
67271: LD_INT 0
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: PUSH
67278: LD_INT 2
67280: NEG
67281: PUSH
67282: LD_INT 1
67284: NEG
67285: PUSH
67286: EMPTY
67287: LIST
67288: LIST
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: LIST
67294: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67295: LD_ADDR_VAR 0 64
67299: PUSH
67300: LD_INT 1
67302: NEG
67303: PUSH
67304: LD_INT 2
67306: NEG
67307: PUSH
67308: EMPTY
67309: LIST
67310: LIST
67311: PUSH
67312: LD_INT 2
67314: NEG
67315: PUSH
67316: LD_INT 1
67318: NEG
67319: PUSH
67320: EMPTY
67321: LIST
67322: LIST
67323: PUSH
67324: LD_INT 2
67326: NEG
67327: PUSH
67328: LD_INT 2
67330: NEG
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: LIST
67340: ST_TO_ADDR
// end ; 2 :
67341: GO 70607
67343: LD_INT 2
67345: DOUBLE
67346: EQUAL
67347: IFTRUE 67351
67349: GO 70606
67351: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67352: LD_ADDR_VAR 0 29
67356: PUSH
67357: LD_INT 4
67359: PUSH
67360: LD_INT 0
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: PUSH
67367: LD_INT 4
67369: PUSH
67370: LD_INT 1
67372: NEG
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: PUSH
67378: LD_INT 5
67380: PUSH
67381: LD_INT 0
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: LD_INT 5
67390: PUSH
67391: LD_INT 1
67393: PUSH
67394: EMPTY
67395: LIST
67396: LIST
67397: PUSH
67398: LD_INT 4
67400: PUSH
67401: LD_INT 1
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: PUSH
67408: LD_INT 3
67410: PUSH
67411: LD_INT 0
67413: PUSH
67414: EMPTY
67415: LIST
67416: LIST
67417: PUSH
67418: LD_INT 3
67420: PUSH
67421: LD_INT 1
67423: NEG
67424: PUSH
67425: EMPTY
67426: LIST
67427: LIST
67428: PUSH
67429: LD_INT 3
67431: PUSH
67432: LD_INT 2
67434: NEG
67435: PUSH
67436: EMPTY
67437: LIST
67438: LIST
67439: PUSH
67440: LD_INT 5
67442: PUSH
67443: LD_INT 2
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: PUSH
67450: LD_INT 3
67452: PUSH
67453: LD_INT 3
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: PUSH
67460: LD_INT 3
67462: PUSH
67463: LD_INT 2
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: PUSH
67470: LD_INT 4
67472: PUSH
67473: LD_INT 3
67475: PUSH
67476: EMPTY
67477: LIST
67478: LIST
67479: PUSH
67480: LD_INT 4
67482: PUSH
67483: LD_INT 4
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: PUSH
67490: LD_INT 3
67492: PUSH
67493: LD_INT 4
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: PUSH
67500: LD_INT 2
67502: PUSH
67503: LD_INT 3
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: PUSH
67510: LD_INT 2
67512: PUSH
67513: LD_INT 2
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: LD_INT 4
67522: PUSH
67523: LD_INT 2
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: LD_INT 2
67532: PUSH
67533: LD_INT 4
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: PUSH
67540: LD_INT 0
67542: PUSH
67543: LD_INT 4
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PUSH
67550: LD_INT 0
67552: PUSH
67553: LD_INT 3
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: PUSH
67560: LD_INT 1
67562: PUSH
67563: LD_INT 4
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: PUSH
67570: LD_INT 1
67572: PUSH
67573: LD_INT 5
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: PUSH
67580: LD_INT 0
67582: PUSH
67583: LD_INT 5
67585: PUSH
67586: EMPTY
67587: LIST
67588: LIST
67589: PUSH
67590: LD_INT 1
67592: NEG
67593: PUSH
67594: LD_INT 4
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: PUSH
67601: LD_INT 1
67603: NEG
67604: PUSH
67605: LD_INT 3
67607: PUSH
67608: EMPTY
67609: LIST
67610: LIST
67611: PUSH
67612: LD_INT 2
67614: PUSH
67615: LD_INT 5
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: PUSH
67622: LD_INT 2
67624: NEG
67625: PUSH
67626: LD_INT 3
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: PUSH
67633: LD_INT 3
67635: NEG
67636: PUSH
67637: LD_INT 0
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PUSH
67644: LD_INT 3
67646: NEG
67647: PUSH
67648: LD_INT 1
67650: NEG
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: PUSH
67656: LD_INT 2
67658: NEG
67659: PUSH
67660: LD_INT 0
67662: PUSH
67663: EMPTY
67664: LIST
67665: LIST
67666: PUSH
67667: LD_INT 2
67669: NEG
67670: PUSH
67671: LD_INT 1
67673: PUSH
67674: EMPTY
67675: LIST
67676: LIST
67677: PUSH
67678: LD_INT 3
67680: NEG
67681: PUSH
67682: LD_INT 1
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: PUSH
67689: LD_INT 4
67691: NEG
67692: PUSH
67693: LD_INT 0
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: PUSH
67700: LD_INT 4
67702: NEG
67703: PUSH
67704: LD_INT 1
67706: NEG
67707: PUSH
67708: EMPTY
67709: LIST
67710: LIST
67711: PUSH
67712: LD_INT 4
67714: NEG
67715: PUSH
67716: LD_INT 2
67718: NEG
67719: PUSH
67720: EMPTY
67721: LIST
67722: LIST
67723: PUSH
67724: LD_INT 2
67726: NEG
67727: PUSH
67728: LD_INT 2
67730: PUSH
67731: EMPTY
67732: LIST
67733: LIST
67734: PUSH
67735: LD_INT 4
67737: NEG
67738: PUSH
67739: LD_INT 4
67741: NEG
67742: PUSH
67743: EMPTY
67744: LIST
67745: LIST
67746: PUSH
67747: LD_INT 4
67749: NEG
67750: PUSH
67751: LD_INT 5
67753: NEG
67754: PUSH
67755: EMPTY
67756: LIST
67757: LIST
67758: PUSH
67759: LD_INT 3
67761: NEG
67762: PUSH
67763: LD_INT 4
67765: NEG
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: LD_INT 3
67773: NEG
67774: PUSH
67775: LD_INT 3
67777: NEG
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: PUSH
67783: LD_INT 4
67785: NEG
67786: PUSH
67787: LD_INT 3
67789: NEG
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: PUSH
67795: LD_INT 5
67797: NEG
67798: PUSH
67799: LD_INT 4
67801: NEG
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: PUSH
67807: LD_INT 5
67809: NEG
67810: PUSH
67811: LD_INT 5
67813: NEG
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: PUSH
67819: LD_INT 3
67821: NEG
67822: PUSH
67823: LD_INT 5
67825: NEG
67826: PUSH
67827: EMPTY
67828: LIST
67829: LIST
67830: PUSH
67831: LD_INT 5
67833: NEG
67834: PUSH
67835: LD_INT 3
67837: NEG
67838: PUSH
67839: EMPTY
67840: LIST
67841: LIST
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: LIST
67847: LIST
67848: LIST
67849: LIST
67850: LIST
67851: LIST
67852: LIST
67853: LIST
67854: LIST
67855: LIST
67856: LIST
67857: LIST
67858: LIST
67859: LIST
67860: LIST
67861: LIST
67862: LIST
67863: LIST
67864: LIST
67865: LIST
67866: LIST
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: LIST
67874: LIST
67875: LIST
67876: LIST
67877: LIST
67878: LIST
67879: LIST
67880: LIST
67881: LIST
67882: LIST
67883: LIST
67884: LIST
67885: LIST
67886: LIST
67887: LIST
67888: LIST
67889: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67890: LD_ADDR_VAR 0 30
67894: PUSH
67895: LD_INT 4
67897: PUSH
67898: LD_INT 4
67900: PUSH
67901: EMPTY
67902: LIST
67903: LIST
67904: PUSH
67905: LD_INT 4
67907: PUSH
67908: LD_INT 3
67910: PUSH
67911: EMPTY
67912: LIST
67913: LIST
67914: PUSH
67915: LD_INT 5
67917: PUSH
67918: LD_INT 4
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: PUSH
67925: LD_INT 5
67927: PUSH
67928: LD_INT 5
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: LD_INT 4
67937: PUSH
67938: LD_INT 5
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: PUSH
67945: LD_INT 3
67947: PUSH
67948: LD_INT 4
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: PUSH
67955: LD_INT 3
67957: PUSH
67958: LD_INT 3
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PUSH
67965: LD_INT 5
67967: PUSH
67968: LD_INT 3
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: PUSH
67975: LD_INT 3
67977: PUSH
67978: LD_INT 5
67980: PUSH
67981: EMPTY
67982: LIST
67983: LIST
67984: PUSH
67985: LD_INT 0
67987: PUSH
67988: LD_INT 3
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: PUSH
67995: LD_INT 0
67997: PUSH
67998: LD_INT 2
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: PUSH
68005: LD_INT 1
68007: PUSH
68008: LD_INT 3
68010: PUSH
68011: EMPTY
68012: LIST
68013: LIST
68014: PUSH
68015: LD_INT 1
68017: PUSH
68018: LD_INT 4
68020: PUSH
68021: EMPTY
68022: LIST
68023: LIST
68024: PUSH
68025: LD_INT 0
68027: PUSH
68028: LD_INT 4
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PUSH
68035: LD_INT 1
68037: NEG
68038: PUSH
68039: LD_INT 3
68041: PUSH
68042: EMPTY
68043: LIST
68044: LIST
68045: PUSH
68046: LD_INT 1
68048: NEG
68049: PUSH
68050: LD_INT 2
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: PUSH
68057: LD_INT 2
68059: PUSH
68060: LD_INT 4
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: LD_INT 2
68069: NEG
68070: PUSH
68071: LD_INT 2
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: PUSH
68078: LD_INT 4
68080: NEG
68081: PUSH
68082: LD_INT 0
68084: PUSH
68085: EMPTY
68086: LIST
68087: LIST
68088: PUSH
68089: LD_INT 4
68091: NEG
68092: PUSH
68093: LD_INT 1
68095: NEG
68096: PUSH
68097: EMPTY
68098: LIST
68099: LIST
68100: PUSH
68101: LD_INT 3
68103: NEG
68104: PUSH
68105: LD_INT 0
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: PUSH
68112: LD_INT 3
68114: NEG
68115: PUSH
68116: LD_INT 1
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: PUSH
68123: LD_INT 4
68125: NEG
68126: PUSH
68127: LD_INT 1
68129: PUSH
68130: EMPTY
68131: LIST
68132: LIST
68133: PUSH
68134: LD_INT 5
68136: NEG
68137: PUSH
68138: LD_INT 0
68140: PUSH
68141: EMPTY
68142: LIST
68143: LIST
68144: PUSH
68145: LD_INT 5
68147: NEG
68148: PUSH
68149: LD_INT 1
68151: NEG
68152: PUSH
68153: EMPTY
68154: LIST
68155: LIST
68156: PUSH
68157: LD_INT 5
68159: NEG
68160: PUSH
68161: LD_INT 2
68163: NEG
68164: PUSH
68165: EMPTY
68166: LIST
68167: LIST
68168: PUSH
68169: LD_INT 3
68171: NEG
68172: PUSH
68173: LD_INT 2
68175: PUSH
68176: EMPTY
68177: LIST
68178: LIST
68179: PUSH
68180: LD_INT 3
68182: NEG
68183: PUSH
68184: LD_INT 3
68186: NEG
68187: PUSH
68188: EMPTY
68189: LIST
68190: LIST
68191: PUSH
68192: LD_INT 3
68194: NEG
68195: PUSH
68196: LD_INT 4
68198: NEG
68199: PUSH
68200: EMPTY
68201: LIST
68202: LIST
68203: PUSH
68204: LD_INT 2
68206: NEG
68207: PUSH
68208: LD_INT 3
68210: NEG
68211: PUSH
68212: EMPTY
68213: LIST
68214: LIST
68215: PUSH
68216: LD_INT 2
68218: NEG
68219: PUSH
68220: LD_INT 2
68222: NEG
68223: PUSH
68224: EMPTY
68225: LIST
68226: LIST
68227: PUSH
68228: LD_INT 3
68230: NEG
68231: PUSH
68232: LD_INT 2
68234: NEG
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: LD_INT 4
68242: NEG
68243: PUSH
68244: LD_INT 3
68246: NEG
68247: PUSH
68248: EMPTY
68249: LIST
68250: LIST
68251: PUSH
68252: LD_INT 4
68254: NEG
68255: PUSH
68256: LD_INT 4
68258: NEG
68259: PUSH
68260: EMPTY
68261: LIST
68262: LIST
68263: PUSH
68264: LD_INT 2
68266: NEG
68267: PUSH
68268: LD_INT 4
68270: NEG
68271: PUSH
68272: EMPTY
68273: LIST
68274: LIST
68275: PUSH
68276: LD_INT 4
68278: NEG
68279: PUSH
68280: LD_INT 2
68282: NEG
68283: PUSH
68284: EMPTY
68285: LIST
68286: LIST
68287: PUSH
68288: LD_INT 0
68290: PUSH
68291: LD_INT 4
68293: NEG
68294: PUSH
68295: EMPTY
68296: LIST
68297: LIST
68298: PUSH
68299: LD_INT 0
68301: PUSH
68302: LD_INT 5
68304: NEG
68305: PUSH
68306: EMPTY
68307: LIST
68308: LIST
68309: PUSH
68310: LD_INT 1
68312: PUSH
68313: LD_INT 4
68315: NEG
68316: PUSH
68317: EMPTY
68318: LIST
68319: LIST
68320: PUSH
68321: LD_INT 1
68323: PUSH
68324: LD_INT 3
68326: NEG
68327: PUSH
68328: EMPTY
68329: LIST
68330: LIST
68331: PUSH
68332: LD_INT 0
68334: PUSH
68335: LD_INT 3
68337: NEG
68338: PUSH
68339: EMPTY
68340: LIST
68341: LIST
68342: PUSH
68343: LD_INT 1
68345: NEG
68346: PUSH
68347: LD_INT 4
68349: NEG
68350: PUSH
68351: EMPTY
68352: LIST
68353: LIST
68354: PUSH
68355: LD_INT 1
68357: NEG
68358: PUSH
68359: LD_INT 5
68361: NEG
68362: PUSH
68363: EMPTY
68364: LIST
68365: LIST
68366: PUSH
68367: LD_INT 2
68369: PUSH
68370: LD_INT 3
68372: NEG
68373: PUSH
68374: EMPTY
68375: LIST
68376: LIST
68377: PUSH
68378: LD_INT 2
68380: NEG
68381: PUSH
68382: LD_INT 5
68384: NEG
68385: PUSH
68386: EMPTY
68387: LIST
68388: LIST
68389: PUSH
68390: EMPTY
68391: LIST
68392: LIST
68393: LIST
68394: LIST
68395: LIST
68396: LIST
68397: LIST
68398: LIST
68399: LIST
68400: LIST
68401: LIST
68402: LIST
68403: LIST
68404: LIST
68405: LIST
68406: LIST
68407: LIST
68408: LIST
68409: LIST
68410: LIST
68411: LIST
68412: LIST
68413: LIST
68414: LIST
68415: LIST
68416: LIST
68417: LIST
68418: LIST
68419: LIST
68420: LIST
68421: LIST
68422: LIST
68423: LIST
68424: LIST
68425: LIST
68426: LIST
68427: LIST
68428: LIST
68429: LIST
68430: LIST
68431: LIST
68432: LIST
68433: LIST
68434: LIST
68435: LIST
68436: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68437: LD_ADDR_VAR 0 31
68441: PUSH
68442: LD_INT 0
68444: PUSH
68445: LD_INT 4
68447: PUSH
68448: EMPTY
68449: LIST
68450: LIST
68451: PUSH
68452: LD_INT 0
68454: PUSH
68455: LD_INT 3
68457: PUSH
68458: EMPTY
68459: LIST
68460: LIST
68461: PUSH
68462: LD_INT 1
68464: PUSH
68465: LD_INT 4
68467: PUSH
68468: EMPTY
68469: LIST
68470: LIST
68471: PUSH
68472: LD_INT 1
68474: PUSH
68475: LD_INT 5
68477: PUSH
68478: EMPTY
68479: LIST
68480: LIST
68481: PUSH
68482: LD_INT 0
68484: PUSH
68485: LD_INT 5
68487: PUSH
68488: EMPTY
68489: LIST
68490: LIST
68491: PUSH
68492: LD_INT 1
68494: NEG
68495: PUSH
68496: LD_INT 4
68498: PUSH
68499: EMPTY
68500: LIST
68501: LIST
68502: PUSH
68503: LD_INT 1
68505: NEG
68506: PUSH
68507: LD_INT 3
68509: PUSH
68510: EMPTY
68511: LIST
68512: LIST
68513: PUSH
68514: LD_INT 2
68516: PUSH
68517: LD_INT 5
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: PUSH
68524: LD_INT 2
68526: NEG
68527: PUSH
68528: LD_INT 3
68530: PUSH
68531: EMPTY
68532: LIST
68533: LIST
68534: PUSH
68535: LD_INT 3
68537: NEG
68538: PUSH
68539: LD_INT 0
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: PUSH
68546: LD_INT 3
68548: NEG
68549: PUSH
68550: LD_INT 1
68552: NEG
68553: PUSH
68554: EMPTY
68555: LIST
68556: LIST
68557: PUSH
68558: LD_INT 2
68560: NEG
68561: PUSH
68562: LD_INT 0
68564: PUSH
68565: EMPTY
68566: LIST
68567: LIST
68568: PUSH
68569: LD_INT 2
68571: NEG
68572: PUSH
68573: LD_INT 1
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: PUSH
68580: LD_INT 3
68582: NEG
68583: PUSH
68584: LD_INT 1
68586: PUSH
68587: EMPTY
68588: LIST
68589: LIST
68590: PUSH
68591: LD_INT 4
68593: NEG
68594: PUSH
68595: LD_INT 0
68597: PUSH
68598: EMPTY
68599: LIST
68600: LIST
68601: PUSH
68602: LD_INT 4
68604: NEG
68605: PUSH
68606: LD_INT 1
68608: NEG
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: PUSH
68614: LD_INT 4
68616: NEG
68617: PUSH
68618: LD_INT 2
68620: NEG
68621: PUSH
68622: EMPTY
68623: LIST
68624: LIST
68625: PUSH
68626: LD_INT 2
68628: NEG
68629: PUSH
68630: LD_INT 2
68632: PUSH
68633: EMPTY
68634: LIST
68635: LIST
68636: PUSH
68637: LD_INT 4
68639: NEG
68640: PUSH
68641: LD_INT 4
68643: NEG
68644: PUSH
68645: EMPTY
68646: LIST
68647: LIST
68648: PUSH
68649: LD_INT 4
68651: NEG
68652: PUSH
68653: LD_INT 5
68655: NEG
68656: PUSH
68657: EMPTY
68658: LIST
68659: LIST
68660: PUSH
68661: LD_INT 3
68663: NEG
68664: PUSH
68665: LD_INT 4
68667: NEG
68668: PUSH
68669: EMPTY
68670: LIST
68671: LIST
68672: PUSH
68673: LD_INT 3
68675: NEG
68676: PUSH
68677: LD_INT 3
68679: NEG
68680: PUSH
68681: EMPTY
68682: LIST
68683: LIST
68684: PUSH
68685: LD_INT 4
68687: NEG
68688: PUSH
68689: LD_INT 3
68691: NEG
68692: PUSH
68693: EMPTY
68694: LIST
68695: LIST
68696: PUSH
68697: LD_INT 5
68699: NEG
68700: PUSH
68701: LD_INT 4
68703: NEG
68704: PUSH
68705: EMPTY
68706: LIST
68707: LIST
68708: PUSH
68709: LD_INT 5
68711: NEG
68712: PUSH
68713: LD_INT 5
68715: NEG
68716: PUSH
68717: EMPTY
68718: LIST
68719: LIST
68720: PUSH
68721: LD_INT 3
68723: NEG
68724: PUSH
68725: LD_INT 5
68727: NEG
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: PUSH
68733: LD_INT 5
68735: NEG
68736: PUSH
68737: LD_INT 3
68739: NEG
68740: PUSH
68741: EMPTY
68742: LIST
68743: LIST
68744: PUSH
68745: LD_INT 0
68747: PUSH
68748: LD_INT 3
68750: NEG
68751: PUSH
68752: EMPTY
68753: LIST
68754: LIST
68755: PUSH
68756: LD_INT 0
68758: PUSH
68759: LD_INT 4
68761: NEG
68762: PUSH
68763: EMPTY
68764: LIST
68765: LIST
68766: PUSH
68767: LD_INT 1
68769: PUSH
68770: LD_INT 3
68772: NEG
68773: PUSH
68774: EMPTY
68775: LIST
68776: LIST
68777: PUSH
68778: LD_INT 1
68780: PUSH
68781: LD_INT 2
68783: NEG
68784: PUSH
68785: EMPTY
68786: LIST
68787: LIST
68788: PUSH
68789: LD_INT 0
68791: PUSH
68792: LD_INT 2
68794: NEG
68795: PUSH
68796: EMPTY
68797: LIST
68798: LIST
68799: PUSH
68800: LD_INT 1
68802: NEG
68803: PUSH
68804: LD_INT 3
68806: NEG
68807: PUSH
68808: EMPTY
68809: LIST
68810: LIST
68811: PUSH
68812: LD_INT 1
68814: NEG
68815: PUSH
68816: LD_INT 4
68818: NEG
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: PUSH
68824: LD_INT 2
68826: PUSH
68827: LD_INT 2
68829: NEG
68830: PUSH
68831: EMPTY
68832: LIST
68833: LIST
68834: PUSH
68835: LD_INT 2
68837: NEG
68838: PUSH
68839: LD_INT 4
68841: NEG
68842: PUSH
68843: EMPTY
68844: LIST
68845: LIST
68846: PUSH
68847: LD_INT 4
68849: PUSH
68850: LD_INT 0
68852: PUSH
68853: EMPTY
68854: LIST
68855: LIST
68856: PUSH
68857: LD_INT 4
68859: PUSH
68860: LD_INT 1
68862: NEG
68863: PUSH
68864: EMPTY
68865: LIST
68866: LIST
68867: PUSH
68868: LD_INT 5
68870: PUSH
68871: LD_INT 0
68873: PUSH
68874: EMPTY
68875: LIST
68876: LIST
68877: PUSH
68878: LD_INT 5
68880: PUSH
68881: LD_INT 1
68883: PUSH
68884: EMPTY
68885: LIST
68886: LIST
68887: PUSH
68888: LD_INT 4
68890: PUSH
68891: LD_INT 1
68893: PUSH
68894: EMPTY
68895: LIST
68896: LIST
68897: PUSH
68898: LD_INT 3
68900: PUSH
68901: LD_INT 0
68903: PUSH
68904: EMPTY
68905: LIST
68906: LIST
68907: PUSH
68908: LD_INT 3
68910: PUSH
68911: LD_INT 1
68913: NEG
68914: PUSH
68915: EMPTY
68916: LIST
68917: LIST
68918: PUSH
68919: LD_INT 3
68921: PUSH
68922: LD_INT 2
68924: NEG
68925: PUSH
68926: EMPTY
68927: LIST
68928: LIST
68929: PUSH
68930: LD_INT 5
68932: PUSH
68933: LD_INT 2
68935: PUSH
68936: EMPTY
68937: LIST
68938: LIST
68939: PUSH
68940: EMPTY
68941: LIST
68942: LIST
68943: LIST
68944: LIST
68945: LIST
68946: LIST
68947: LIST
68948: LIST
68949: LIST
68950: LIST
68951: LIST
68952: LIST
68953: LIST
68954: LIST
68955: LIST
68956: LIST
68957: LIST
68958: LIST
68959: LIST
68960: LIST
68961: LIST
68962: LIST
68963: LIST
68964: LIST
68965: LIST
68966: LIST
68967: LIST
68968: LIST
68969: LIST
68970: LIST
68971: LIST
68972: LIST
68973: LIST
68974: LIST
68975: LIST
68976: LIST
68977: LIST
68978: LIST
68979: LIST
68980: LIST
68981: LIST
68982: LIST
68983: LIST
68984: LIST
68985: LIST
68986: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68987: LD_ADDR_VAR 0 32
68991: PUSH
68992: LD_INT 4
68994: NEG
68995: PUSH
68996: LD_INT 0
68998: PUSH
68999: EMPTY
69000: LIST
69001: LIST
69002: PUSH
69003: LD_INT 4
69005: NEG
69006: PUSH
69007: LD_INT 1
69009: NEG
69010: PUSH
69011: EMPTY
69012: LIST
69013: LIST
69014: PUSH
69015: LD_INT 3
69017: NEG
69018: PUSH
69019: LD_INT 0
69021: PUSH
69022: EMPTY
69023: LIST
69024: LIST
69025: PUSH
69026: LD_INT 3
69028: NEG
69029: PUSH
69030: LD_INT 1
69032: PUSH
69033: EMPTY
69034: LIST
69035: LIST
69036: PUSH
69037: LD_INT 4
69039: NEG
69040: PUSH
69041: LD_INT 1
69043: PUSH
69044: EMPTY
69045: LIST
69046: LIST
69047: PUSH
69048: LD_INT 5
69050: NEG
69051: PUSH
69052: LD_INT 0
69054: PUSH
69055: EMPTY
69056: LIST
69057: LIST
69058: PUSH
69059: LD_INT 5
69061: NEG
69062: PUSH
69063: LD_INT 1
69065: NEG
69066: PUSH
69067: EMPTY
69068: LIST
69069: LIST
69070: PUSH
69071: LD_INT 5
69073: NEG
69074: PUSH
69075: LD_INT 2
69077: NEG
69078: PUSH
69079: EMPTY
69080: LIST
69081: LIST
69082: PUSH
69083: LD_INT 3
69085: NEG
69086: PUSH
69087: LD_INT 2
69089: PUSH
69090: EMPTY
69091: LIST
69092: LIST
69093: PUSH
69094: LD_INT 3
69096: NEG
69097: PUSH
69098: LD_INT 3
69100: NEG
69101: PUSH
69102: EMPTY
69103: LIST
69104: LIST
69105: PUSH
69106: LD_INT 3
69108: NEG
69109: PUSH
69110: LD_INT 4
69112: NEG
69113: PUSH
69114: EMPTY
69115: LIST
69116: LIST
69117: PUSH
69118: LD_INT 2
69120: NEG
69121: PUSH
69122: LD_INT 3
69124: NEG
69125: PUSH
69126: EMPTY
69127: LIST
69128: LIST
69129: PUSH
69130: LD_INT 2
69132: NEG
69133: PUSH
69134: LD_INT 2
69136: NEG
69137: PUSH
69138: EMPTY
69139: LIST
69140: LIST
69141: PUSH
69142: LD_INT 3
69144: NEG
69145: PUSH
69146: LD_INT 2
69148: NEG
69149: PUSH
69150: EMPTY
69151: LIST
69152: LIST
69153: PUSH
69154: LD_INT 4
69156: NEG
69157: PUSH
69158: LD_INT 3
69160: NEG
69161: PUSH
69162: EMPTY
69163: LIST
69164: LIST
69165: PUSH
69166: LD_INT 4
69168: NEG
69169: PUSH
69170: LD_INT 4
69172: NEG
69173: PUSH
69174: EMPTY
69175: LIST
69176: LIST
69177: PUSH
69178: LD_INT 2
69180: NEG
69181: PUSH
69182: LD_INT 4
69184: NEG
69185: PUSH
69186: EMPTY
69187: LIST
69188: LIST
69189: PUSH
69190: LD_INT 4
69192: NEG
69193: PUSH
69194: LD_INT 2
69196: NEG
69197: PUSH
69198: EMPTY
69199: LIST
69200: LIST
69201: PUSH
69202: LD_INT 0
69204: PUSH
69205: LD_INT 4
69207: NEG
69208: PUSH
69209: EMPTY
69210: LIST
69211: LIST
69212: PUSH
69213: LD_INT 0
69215: PUSH
69216: LD_INT 5
69218: NEG
69219: PUSH
69220: EMPTY
69221: LIST
69222: LIST
69223: PUSH
69224: LD_INT 1
69226: PUSH
69227: LD_INT 4
69229: NEG
69230: PUSH
69231: EMPTY
69232: LIST
69233: LIST
69234: PUSH
69235: LD_INT 1
69237: PUSH
69238: LD_INT 3
69240: NEG
69241: PUSH
69242: EMPTY
69243: LIST
69244: LIST
69245: PUSH
69246: LD_INT 0
69248: PUSH
69249: LD_INT 3
69251: NEG
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: PUSH
69257: LD_INT 1
69259: NEG
69260: PUSH
69261: LD_INT 4
69263: NEG
69264: PUSH
69265: EMPTY
69266: LIST
69267: LIST
69268: PUSH
69269: LD_INT 1
69271: NEG
69272: PUSH
69273: LD_INT 5
69275: NEG
69276: PUSH
69277: EMPTY
69278: LIST
69279: LIST
69280: PUSH
69281: LD_INT 2
69283: PUSH
69284: LD_INT 3
69286: NEG
69287: PUSH
69288: EMPTY
69289: LIST
69290: LIST
69291: PUSH
69292: LD_INT 2
69294: NEG
69295: PUSH
69296: LD_INT 5
69298: NEG
69299: PUSH
69300: EMPTY
69301: LIST
69302: LIST
69303: PUSH
69304: LD_INT 3
69306: PUSH
69307: LD_INT 0
69309: PUSH
69310: EMPTY
69311: LIST
69312: LIST
69313: PUSH
69314: LD_INT 3
69316: PUSH
69317: LD_INT 1
69319: NEG
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: PUSH
69325: LD_INT 4
69327: PUSH
69328: LD_INT 0
69330: PUSH
69331: EMPTY
69332: LIST
69333: LIST
69334: PUSH
69335: LD_INT 4
69337: PUSH
69338: LD_INT 1
69340: PUSH
69341: EMPTY
69342: LIST
69343: LIST
69344: PUSH
69345: LD_INT 3
69347: PUSH
69348: LD_INT 1
69350: PUSH
69351: EMPTY
69352: LIST
69353: LIST
69354: PUSH
69355: LD_INT 2
69357: PUSH
69358: LD_INT 0
69360: PUSH
69361: EMPTY
69362: LIST
69363: LIST
69364: PUSH
69365: LD_INT 2
69367: PUSH
69368: LD_INT 1
69370: NEG
69371: PUSH
69372: EMPTY
69373: LIST
69374: LIST
69375: PUSH
69376: LD_INT 2
69378: PUSH
69379: LD_INT 2
69381: NEG
69382: PUSH
69383: EMPTY
69384: LIST
69385: LIST
69386: PUSH
69387: LD_INT 4
69389: PUSH
69390: LD_INT 2
69392: PUSH
69393: EMPTY
69394: LIST
69395: LIST
69396: PUSH
69397: LD_INT 4
69399: PUSH
69400: LD_INT 4
69402: PUSH
69403: EMPTY
69404: LIST
69405: LIST
69406: PUSH
69407: LD_INT 4
69409: PUSH
69410: LD_INT 3
69412: PUSH
69413: EMPTY
69414: LIST
69415: LIST
69416: PUSH
69417: LD_INT 5
69419: PUSH
69420: LD_INT 4
69422: PUSH
69423: EMPTY
69424: LIST
69425: LIST
69426: PUSH
69427: LD_INT 5
69429: PUSH
69430: LD_INT 5
69432: PUSH
69433: EMPTY
69434: LIST
69435: LIST
69436: PUSH
69437: LD_INT 4
69439: PUSH
69440: LD_INT 5
69442: PUSH
69443: EMPTY
69444: LIST
69445: LIST
69446: PUSH
69447: LD_INT 3
69449: PUSH
69450: LD_INT 4
69452: PUSH
69453: EMPTY
69454: LIST
69455: LIST
69456: PUSH
69457: LD_INT 3
69459: PUSH
69460: LD_INT 3
69462: PUSH
69463: EMPTY
69464: LIST
69465: LIST
69466: PUSH
69467: LD_INT 5
69469: PUSH
69470: LD_INT 3
69472: PUSH
69473: EMPTY
69474: LIST
69475: LIST
69476: PUSH
69477: LD_INT 3
69479: PUSH
69480: LD_INT 5
69482: PUSH
69483: EMPTY
69484: LIST
69485: LIST
69486: PUSH
69487: EMPTY
69488: LIST
69489: LIST
69490: LIST
69491: LIST
69492: LIST
69493: LIST
69494: LIST
69495: LIST
69496: LIST
69497: LIST
69498: LIST
69499: LIST
69500: LIST
69501: LIST
69502: LIST
69503: LIST
69504: LIST
69505: LIST
69506: LIST
69507: LIST
69508: LIST
69509: LIST
69510: LIST
69511: LIST
69512: LIST
69513: LIST
69514: LIST
69515: LIST
69516: LIST
69517: LIST
69518: LIST
69519: LIST
69520: LIST
69521: LIST
69522: LIST
69523: LIST
69524: LIST
69525: LIST
69526: LIST
69527: LIST
69528: LIST
69529: LIST
69530: LIST
69531: LIST
69532: LIST
69533: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69534: LD_ADDR_VAR 0 33
69538: PUSH
69539: LD_INT 4
69541: NEG
69542: PUSH
69543: LD_INT 4
69545: NEG
69546: PUSH
69547: EMPTY
69548: LIST
69549: LIST
69550: PUSH
69551: LD_INT 4
69553: NEG
69554: PUSH
69555: LD_INT 5
69557: NEG
69558: PUSH
69559: EMPTY
69560: LIST
69561: LIST
69562: PUSH
69563: LD_INT 3
69565: NEG
69566: PUSH
69567: LD_INT 4
69569: NEG
69570: PUSH
69571: EMPTY
69572: LIST
69573: LIST
69574: PUSH
69575: LD_INT 3
69577: NEG
69578: PUSH
69579: LD_INT 3
69581: NEG
69582: PUSH
69583: EMPTY
69584: LIST
69585: LIST
69586: PUSH
69587: LD_INT 4
69589: NEG
69590: PUSH
69591: LD_INT 3
69593: NEG
69594: PUSH
69595: EMPTY
69596: LIST
69597: LIST
69598: PUSH
69599: LD_INT 5
69601: NEG
69602: PUSH
69603: LD_INT 4
69605: NEG
69606: PUSH
69607: EMPTY
69608: LIST
69609: LIST
69610: PUSH
69611: LD_INT 5
69613: NEG
69614: PUSH
69615: LD_INT 5
69617: NEG
69618: PUSH
69619: EMPTY
69620: LIST
69621: LIST
69622: PUSH
69623: LD_INT 3
69625: NEG
69626: PUSH
69627: LD_INT 5
69629: NEG
69630: PUSH
69631: EMPTY
69632: LIST
69633: LIST
69634: PUSH
69635: LD_INT 5
69637: NEG
69638: PUSH
69639: LD_INT 3
69641: NEG
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: PUSH
69647: LD_INT 0
69649: PUSH
69650: LD_INT 3
69652: NEG
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: PUSH
69658: LD_INT 0
69660: PUSH
69661: LD_INT 4
69663: NEG
69664: PUSH
69665: EMPTY
69666: LIST
69667: LIST
69668: PUSH
69669: LD_INT 1
69671: PUSH
69672: LD_INT 3
69674: NEG
69675: PUSH
69676: EMPTY
69677: LIST
69678: LIST
69679: PUSH
69680: LD_INT 1
69682: PUSH
69683: LD_INT 2
69685: NEG
69686: PUSH
69687: EMPTY
69688: LIST
69689: LIST
69690: PUSH
69691: LD_INT 0
69693: PUSH
69694: LD_INT 2
69696: NEG
69697: PUSH
69698: EMPTY
69699: LIST
69700: LIST
69701: PUSH
69702: LD_INT 1
69704: NEG
69705: PUSH
69706: LD_INT 3
69708: NEG
69709: PUSH
69710: EMPTY
69711: LIST
69712: LIST
69713: PUSH
69714: LD_INT 1
69716: NEG
69717: PUSH
69718: LD_INT 4
69720: NEG
69721: PUSH
69722: EMPTY
69723: LIST
69724: LIST
69725: PUSH
69726: LD_INT 2
69728: PUSH
69729: LD_INT 2
69731: NEG
69732: PUSH
69733: EMPTY
69734: LIST
69735: LIST
69736: PUSH
69737: LD_INT 2
69739: NEG
69740: PUSH
69741: LD_INT 4
69743: NEG
69744: PUSH
69745: EMPTY
69746: LIST
69747: LIST
69748: PUSH
69749: LD_INT 4
69751: PUSH
69752: LD_INT 0
69754: PUSH
69755: EMPTY
69756: LIST
69757: LIST
69758: PUSH
69759: LD_INT 4
69761: PUSH
69762: LD_INT 1
69764: NEG
69765: PUSH
69766: EMPTY
69767: LIST
69768: LIST
69769: PUSH
69770: LD_INT 5
69772: PUSH
69773: LD_INT 0
69775: PUSH
69776: EMPTY
69777: LIST
69778: LIST
69779: PUSH
69780: LD_INT 5
69782: PUSH
69783: LD_INT 1
69785: PUSH
69786: EMPTY
69787: LIST
69788: LIST
69789: PUSH
69790: LD_INT 4
69792: PUSH
69793: LD_INT 1
69795: PUSH
69796: EMPTY
69797: LIST
69798: LIST
69799: PUSH
69800: LD_INT 3
69802: PUSH
69803: LD_INT 0
69805: PUSH
69806: EMPTY
69807: LIST
69808: LIST
69809: PUSH
69810: LD_INT 3
69812: PUSH
69813: LD_INT 1
69815: NEG
69816: PUSH
69817: EMPTY
69818: LIST
69819: LIST
69820: PUSH
69821: LD_INT 3
69823: PUSH
69824: LD_INT 2
69826: NEG
69827: PUSH
69828: EMPTY
69829: LIST
69830: LIST
69831: PUSH
69832: LD_INT 5
69834: PUSH
69835: LD_INT 2
69837: PUSH
69838: EMPTY
69839: LIST
69840: LIST
69841: PUSH
69842: LD_INT 3
69844: PUSH
69845: LD_INT 3
69847: PUSH
69848: EMPTY
69849: LIST
69850: LIST
69851: PUSH
69852: LD_INT 3
69854: PUSH
69855: LD_INT 2
69857: PUSH
69858: EMPTY
69859: LIST
69860: LIST
69861: PUSH
69862: LD_INT 4
69864: PUSH
69865: LD_INT 3
69867: PUSH
69868: EMPTY
69869: LIST
69870: LIST
69871: PUSH
69872: LD_INT 4
69874: PUSH
69875: LD_INT 4
69877: PUSH
69878: EMPTY
69879: LIST
69880: LIST
69881: PUSH
69882: LD_INT 3
69884: PUSH
69885: LD_INT 4
69887: PUSH
69888: EMPTY
69889: LIST
69890: LIST
69891: PUSH
69892: LD_INT 2
69894: PUSH
69895: LD_INT 3
69897: PUSH
69898: EMPTY
69899: LIST
69900: LIST
69901: PUSH
69902: LD_INT 2
69904: PUSH
69905: LD_INT 2
69907: PUSH
69908: EMPTY
69909: LIST
69910: LIST
69911: PUSH
69912: LD_INT 4
69914: PUSH
69915: LD_INT 2
69917: PUSH
69918: EMPTY
69919: LIST
69920: LIST
69921: PUSH
69922: LD_INT 2
69924: PUSH
69925: LD_INT 4
69927: PUSH
69928: EMPTY
69929: LIST
69930: LIST
69931: PUSH
69932: LD_INT 0
69934: PUSH
69935: LD_INT 4
69937: PUSH
69938: EMPTY
69939: LIST
69940: LIST
69941: PUSH
69942: LD_INT 0
69944: PUSH
69945: LD_INT 3
69947: PUSH
69948: EMPTY
69949: LIST
69950: LIST
69951: PUSH
69952: LD_INT 1
69954: PUSH
69955: LD_INT 4
69957: PUSH
69958: EMPTY
69959: LIST
69960: LIST
69961: PUSH
69962: LD_INT 1
69964: PUSH
69965: LD_INT 5
69967: PUSH
69968: EMPTY
69969: LIST
69970: LIST
69971: PUSH
69972: LD_INT 0
69974: PUSH
69975: LD_INT 5
69977: PUSH
69978: EMPTY
69979: LIST
69980: LIST
69981: PUSH
69982: LD_INT 1
69984: NEG
69985: PUSH
69986: LD_INT 4
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: PUSH
69993: LD_INT 1
69995: NEG
69996: PUSH
69997: LD_INT 3
69999: PUSH
70000: EMPTY
70001: LIST
70002: LIST
70003: PUSH
70004: LD_INT 2
70006: PUSH
70007: LD_INT 5
70009: PUSH
70010: EMPTY
70011: LIST
70012: LIST
70013: PUSH
70014: LD_INT 2
70016: NEG
70017: PUSH
70018: LD_INT 3
70020: PUSH
70021: EMPTY
70022: LIST
70023: LIST
70024: PUSH
70025: EMPTY
70026: LIST
70027: LIST
70028: LIST
70029: LIST
70030: LIST
70031: LIST
70032: LIST
70033: LIST
70034: LIST
70035: LIST
70036: LIST
70037: LIST
70038: LIST
70039: LIST
70040: LIST
70041: LIST
70042: LIST
70043: LIST
70044: LIST
70045: LIST
70046: LIST
70047: LIST
70048: LIST
70049: LIST
70050: LIST
70051: LIST
70052: LIST
70053: LIST
70054: LIST
70055: LIST
70056: LIST
70057: LIST
70058: LIST
70059: LIST
70060: LIST
70061: LIST
70062: LIST
70063: LIST
70064: LIST
70065: LIST
70066: LIST
70067: LIST
70068: LIST
70069: LIST
70070: LIST
70071: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70072: LD_ADDR_VAR 0 34
70076: PUSH
70077: LD_INT 0
70079: PUSH
70080: LD_INT 4
70082: NEG
70083: PUSH
70084: EMPTY
70085: LIST
70086: LIST
70087: PUSH
70088: LD_INT 0
70090: PUSH
70091: LD_INT 5
70093: NEG
70094: PUSH
70095: EMPTY
70096: LIST
70097: LIST
70098: PUSH
70099: LD_INT 1
70101: PUSH
70102: LD_INT 4
70104: NEG
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: PUSH
70110: LD_INT 1
70112: PUSH
70113: LD_INT 3
70115: NEG
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: PUSH
70121: LD_INT 0
70123: PUSH
70124: LD_INT 3
70126: NEG
70127: PUSH
70128: EMPTY
70129: LIST
70130: LIST
70131: PUSH
70132: LD_INT 1
70134: NEG
70135: PUSH
70136: LD_INT 4
70138: NEG
70139: PUSH
70140: EMPTY
70141: LIST
70142: LIST
70143: PUSH
70144: LD_INT 1
70146: NEG
70147: PUSH
70148: LD_INT 5
70150: NEG
70151: PUSH
70152: EMPTY
70153: LIST
70154: LIST
70155: PUSH
70156: LD_INT 2
70158: PUSH
70159: LD_INT 3
70161: NEG
70162: PUSH
70163: EMPTY
70164: LIST
70165: LIST
70166: PUSH
70167: LD_INT 2
70169: NEG
70170: PUSH
70171: LD_INT 5
70173: NEG
70174: PUSH
70175: EMPTY
70176: LIST
70177: LIST
70178: PUSH
70179: LD_INT 3
70181: PUSH
70182: LD_INT 0
70184: PUSH
70185: EMPTY
70186: LIST
70187: LIST
70188: PUSH
70189: LD_INT 3
70191: PUSH
70192: LD_INT 1
70194: NEG
70195: PUSH
70196: EMPTY
70197: LIST
70198: LIST
70199: PUSH
70200: LD_INT 4
70202: PUSH
70203: LD_INT 0
70205: PUSH
70206: EMPTY
70207: LIST
70208: LIST
70209: PUSH
70210: LD_INT 4
70212: PUSH
70213: LD_INT 1
70215: PUSH
70216: EMPTY
70217: LIST
70218: LIST
70219: PUSH
70220: LD_INT 3
70222: PUSH
70223: LD_INT 1
70225: PUSH
70226: EMPTY
70227: LIST
70228: LIST
70229: PUSH
70230: LD_INT 2
70232: PUSH
70233: LD_INT 0
70235: PUSH
70236: EMPTY
70237: LIST
70238: LIST
70239: PUSH
70240: LD_INT 2
70242: PUSH
70243: LD_INT 1
70245: NEG
70246: PUSH
70247: EMPTY
70248: LIST
70249: LIST
70250: PUSH
70251: LD_INT 2
70253: PUSH
70254: LD_INT 2
70256: NEG
70257: PUSH
70258: EMPTY
70259: LIST
70260: LIST
70261: PUSH
70262: LD_INT 4
70264: PUSH
70265: LD_INT 2
70267: PUSH
70268: EMPTY
70269: LIST
70270: LIST
70271: PUSH
70272: LD_INT 4
70274: PUSH
70275: LD_INT 4
70277: PUSH
70278: EMPTY
70279: LIST
70280: LIST
70281: PUSH
70282: LD_INT 4
70284: PUSH
70285: LD_INT 3
70287: PUSH
70288: EMPTY
70289: LIST
70290: LIST
70291: PUSH
70292: LD_INT 5
70294: PUSH
70295: LD_INT 4
70297: PUSH
70298: EMPTY
70299: LIST
70300: LIST
70301: PUSH
70302: LD_INT 5
70304: PUSH
70305: LD_INT 5
70307: PUSH
70308: EMPTY
70309: LIST
70310: LIST
70311: PUSH
70312: LD_INT 4
70314: PUSH
70315: LD_INT 5
70317: PUSH
70318: EMPTY
70319: LIST
70320: LIST
70321: PUSH
70322: LD_INT 3
70324: PUSH
70325: LD_INT 4
70327: PUSH
70328: EMPTY
70329: LIST
70330: LIST
70331: PUSH
70332: LD_INT 3
70334: PUSH
70335: LD_INT 3
70337: PUSH
70338: EMPTY
70339: LIST
70340: LIST
70341: PUSH
70342: LD_INT 5
70344: PUSH
70345: LD_INT 3
70347: PUSH
70348: EMPTY
70349: LIST
70350: LIST
70351: PUSH
70352: LD_INT 3
70354: PUSH
70355: LD_INT 5
70357: PUSH
70358: EMPTY
70359: LIST
70360: LIST
70361: PUSH
70362: LD_INT 0
70364: PUSH
70365: LD_INT 3
70367: PUSH
70368: EMPTY
70369: LIST
70370: LIST
70371: PUSH
70372: LD_INT 0
70374: PUSH
70375: LD_INT 2
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: PUSH
70382: LD_INT 1
70384: PUSH
70385: LD_INT 3
70387: PUSH
70388: EMPTY
70389: LIST
70390: LIST
70391: PUSH
70392: LD_INT 1
70394: PUSH
70395: LD_INT 4
70397: PUSH
70398: EMPTY
70399: LIST
70400: LIST
70401: PUSH
70402: LD_INT 0
70404: PUSH
70405: LD_INT 4
70407: PUSH
70408: EMPTY
70409: LIST
70410: LIST
70411: PUSH
70412: LD_INT 1
70414: NEG
70415: PUSH
70416: LD_INT 3
70418: PUSH
70419: EMPTY
70420: LIST
70421: LIST
70422: PUSH
70423: LD_INT 1
70425: NEG
70426: PUSH
70427: LD_INT 2
70429: PUSH
70430: EMPTY
70431: LIST
70432: LIST
70433: PUSH
70434: LD_INT 2
70436: PUSH
70437: LD_INT 4
70439: PUSH
70440: EMPTY
70441: LIST
70442: LIST
70443: PUSH
70444: LD_INT 2
70446: NEG
70447: PUSH
70448: LD_INT 2
70450: PUSH
70451: EMPTY
70452: LIST
70453: LIST
70454: PUSH
70455: LD_INT 4
70457: NEG
70458: PUSH
70459: LD_INT 0
70461: PUSH
70462: EMPTY
70463: LIST
70464: LIST
70465: PUSH
70466: LD_INT 4
70468: NEG
70469: PUSH
70470: LD_INT 1
70472: NEG
70473: PUSH
70474: EMPTY
70475: LIST
70476: LIST
70477: PUSH
70478: LD_INT 3
70480: NEG
70481: PUSH
70482: LD_INT 0
70484: PUSH
70485: EMPTY
70486: LIST
70487: LIST
70488: PUSH
70489: LD_INT 3
70491: NEG
70492: PUSH
70493: LD_INT 1
70495: PUSH
70496: EMPTY
70497: LIST
70498: LIST
70499: PUSH
70500: LD_INT 4
70502: NEG
70503: PUSH
70504: LD_INT 1
70506: PUSH
70507: EMPTY
70508: LIST
70509: LIST
70510: PUSH
70511: LD_INT 5
70513: NEG
70514: PUSH
70515: LD_INT 0
70517: PUSH
70518: EMPTY
70519: LIST
70520: LIST
70521: PUSH
70522: LD_INT 5
70524: NEG
70525: PUSH
70526: LD_INT 1
70528: NEG
70529: PUSH
70530: EMPTY
70531: LIST
70532: LIST
70533: PUSH
70534: LD_INT 5
70536: NEG
70537: PUSH
70538: LD_INT 2
70540: NEG
70541: PUSH
70542: EMPTY
70543: LIST
70544: LIST
70545: PUSH
70546: LD_INT 3
70548: NEG
70549: PUSH
70550: LD_INT 2
70552: PUSH
70553: EMPTY
70554: LIST
70555: LIST
70556: PUSH
70557: EMPTY
70558: LIST
70559: LIST
70560: LIST
70561: LIST
70562: LIST
70563: LIST
70564: LIST
70565: LIST
70566: LIST
70567: LIST
70568: LIST
70569: LIST
70570: LIST
70571: LIST
70572: LIST
70573: LIST
70574: LIST
70575: LIST
70576: LIST
70577: LIST
70578: LIST
70579: LIST
70580: LIST
70581: LIST
70582: LIST
70583: LIST
70584: LIST
70585: LIST
70586: LIST
70587: LIST
70588: LIST
70589: LIST
70590: LIST
70591: LIST
70592: LIST
70593: LIST
70594: LIST
70595: LIST
70596: LIST
70597: LIST
70598: LIST
70599: LIST
70600: LIST
70601: LIST
70602: LIST
70603: ST_TO_ADDR
// end ; end ;
70604: GO 70607
70606: POP
// case btype of b_depot , b_warehouse :
70607: LD_VAR 0 1
70611: PUSH
70612: LD_INT 0
70614: DOUBLE
70615: EQUAL
70616: IFTRUE 70626
70618: LD_INT 1
70620: DOUBLE
70621: EQUAL
70622: IFTRUE 70626
70624: GO 70827
70626: POP
// case nation of nation_american :
70627: LD_VAR 0 5
70631: PUSH
70632: LD_INT 1
70634: DOUBLE
70635: EQUAL
70636: IFTRUE 70640
70638: GO 70696
70640: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70641: LD_ADDR_VAR 0 9
70645: PUSH
70646: LD_VAR 0 11
70650: PUSH
70651: LD_VAR 0 12
70655: PUSH
70656: LD_VAR 0 13
70660: PUSH
70661: LD_VAR 0 14
70665: PUSH
70666: LD_VAR 0 15
70670: PUSH
70671: LD_VAR 0 16
70675: PUSH
70676: EMPTY
70677: LIST
70678: LIST
70679: LIST
70680: LIST
70681: LIST
70682: LIST
70683: PUSH
70684: LD_VAR 0 4
70688: PUSH
70689: LD_INT 1
70691: PLUS
70692: ARRAY
70693: ST_TO_ADDR
70694: GO 70825
70696: LD_INT 2
70698: DOUBLE
70699: EQUAL
70700: IFTRUE 70704
70702: GO 70760
70704: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70705: LD_ADDR_VAR 0 9
70709: PUSH
70710: LD_VAR 0 17
70714: PUSH
70715: LD_VAR 0 18
70719: PUSH
70720: LD_VAR 0 19
70724: PUSH
70725: LD_VAR 0 20
70729: PUSH
70730: LD_VAR 0 21
70734: PUSH
70735: LD_VAR 0 22
70739: PUSH
70740: EMPTY
70741: LIST
70742: LIST
70743: LIST
70744: LIST
70745: LIST
70746: LIST
70747: PUSH
70748: LD_VAR 0 4
70752: PUSH
70753: LD_INT 1
70755: PLUS
70756: ARRAY
70757: ST_TO_ADDR
70758: GO 70825
70760: LD_INT 3
70762: DOUBLE
70763: EQUAL
70764: IFTRUE 70768
70766: GO 70824
70768: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70769: LD_ADDR_VAR 0 9
70773: PUSH
70774: LD_VAR 0 23
70778: PUSH
70779: LD_VAR 0 24
70783: PUSH
70784: LD_VAR 0 25
70788: PUSH
70789: LD_VAR 0 26
70793: PUSH
70794: LD_VAR 0 27
70798: PUSH
70799: LD_VAR 0 28
70803: PUSH
70804: EMPTY
70805: LIST
70806: LIST
70807: LIST
70808: LIST
70809: LIST
70810: LIST
70811: PUSH
70812: LD_VAR 0 4
70816: PUSH
70817: LD_INT 1
70819: PLUS
70820: ARRAY
70821: ST_TO_ADDR
70822: GO 70825
70824: POP
70825: GO 71380
70827: LD_INT 2
70829: DOUBLE
70830: EQUAL
70831: IFTRUE 70841
70833: LD_INT 3
70835: DOUBLE
70836: EQUAL
70837: IFTRUE 70841
70839: GO 70897
70841: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70842: LD_ADDR_VAR 0 9
70846: PUSH
70847: LD_VAR 0 29
70851: PUSH
70852: LD_VAR 0 30
70856: PUSH
70857: LD_VAR 0 31
70861: PUSH
70862: LD_VAR 0 32
70866: PUSH
70867: LD_VAR 0 33
70871: PUSH
70872: LD_VAR 0 34
70876: PUSH
70877: EMPTY
70878: LIST
70879: LIST
70880: LIST
70881: LIST
70882: LIST
70883: LIST
70884: PUSH
70885: LD_VAR 0 4
70889: PUSH
70890: LD_INT 1
70892: PLUS
70893: ARRAY
70894: ST_TO_ADDR
70895: GO 71380
70897: LD_INT 16
70899: DOUBLE
70900: EQUAL
70901: IFTRUE 70959
70903: LD_INT 17
70905: DOUBLE
70906: EQUAL
70907: IFTRUE 70959
70909: LD_INT 18
70911: DOUBLE
70912: EQUAL
70913: IFTRUE 70959
70915: LD_INT 19
70917: DOUBLE
70918: EQUAL
70919: IFTRUE 70959
70921: LD_INT 22
70923: DOUBLE
70924: EQUAL
70925: IFTRUE 70959
70927: LD_INT 20
70929: DOUBLE
70930: EQUAL
70931: IFTRUE 70959
70933: LD_INT 21
70935: DOUBLE
70936: EQUAL
70937: IFTRUE 70959
70939: LD_INT 23
70941: DOUBLE
70942: EQUAL
70943: IFTRUE 70959
70945: LD_INT 24
70947: DOUBLE
70948: EQUAL
70949: IFTRUE 70959
70951: LD_INT 25
70953: DOUBLE
70954: EQUAL
70955: IFTRUE 70959
70957: GO 71015
70959: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70960: LD_ADDR_VAR 0 9
70964: PUSH
70965: LD_VAR 0 35
70969: PUSH
70970: LD_VAR 0 36
70974: PUSH
70975: LD_VAR 0 37
70979: PUSH
70980: LD_VAR 0 38
70984: PUSH
70985: LD_VAR 0 39
70989: PUSH
70990: LD_VAR 0 40
70994: PUSH
70995: EMPTY
70996: LIST
70997: LIST
70998: LIST
70999: LIST
71000: LIST
71001: LIST
71002: PUSH
71003: LD_VAR 0 4
71007: PUSH
71008: LD_INT 1
71010: PLUS
71011: ARRAY
71012: ST_TO_ADDR
71013: GO 71380
71015: LD_INT 6
71017: DOUBLE
71018: EQUAL
71019: IFTRUE 71071
71021: LD_INT 7
71023: DOUBLE
71024: EQUAL
71025: IFTRUE 71071
71027: LD_INT 8
71029: DOUBLE
71030: EQUAL
71031: IFTRUE 71071
71033: LD_INT 13
71035: DOUBLE
71036: EQUAL
71037: IFTRUE 71071
71039: LD_INT 12
71041: DOUBLE
71042: EQUAL
71043: IFTRUE 71071
71045: LD_INT 15
71047: DOUBLE
71048: EQUAL
71049: IFTRUE 71071
71051: LD_INT 11
71053: DOUBLE
71054: EQUAL
71055: IFTRUE 71071
71057: LD_INT 14
71059: DOUBLE
71060: EQUAL
71061: IFTRUE 71071
71063: LD_INT 10
71065: DOUBLE
71066: EQUAL
71067: IFTRUE 71071
71069: GO 71127
71071: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71072: LD_ADDR_VAR 0 9
71076: PUSH
71077: LD_VAR 0 41
71081: PUSH
71082: LD_VAR 0 42
71086: PUSH
71087: LD_VAR 0 43
71091: PUSH
71092: LD_VAR 0 44
71096: PUSH
71097: LD_VAR 0 45
71101: PUSH
71102: LD_VAR 0 46
71106: PUSH
71107: EMPTY
71108: LIST
71109: LIST
71110: LIST
71111: LIST
71112: LIST
71113: LIST
71114: PUSH
71115: LD_VAR 0 4
71119: PUSH
71120: LD_INT 1
71122: PLUS
71123: ARRAY
71124: ST_TO_ADDR
71125: GO 71380
71127: LD_INT 36
71129: DOUBLE
71130: EQUAL
71131: IFTRUE 71135
71133: GO 71191
71135: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71136: LD_ADDR_VAR 0 9
71140: PUSH
71141: LD_VAR 0 47
71145: PUSH
71146: LD_VAR 0 48
71150: PUSH
71151: LD_VAR 0 49
71155: PUSH
71156: LD_VAR 0 50
71160: PUSH
71161: LD_VAR 0 51
71165: PUSH
71166: LD_VAR 0 52
71170: PUSH
71171: EMPTY
71172: LIST
71173: LIST
71174: LIST
71175: LIST
71176: LIST
71177: LIST
71178: PUSH
71179: LD_VAR 0 4
71183: PUSH
71184: LD_INT 1
71186: PLUS
71187: ARRAY
71188: ST_TO_ADDR
71189: GO 71380
71191: LD_INT 4
71193: DOUBLE
71194: EQUAL
71195: IFTRUE 71217
71197: LD_INT 5
71199: DOUBLE
71200: EQUAL
71201: IFTRUE 71217
71203: LD_INT 34
71205: DOUBLE
71206: EQUAL
71207: IFTRUE 71217
71209: LD_INT 37
71211: DOUBLE
71212: EQUAL
71213: IFTRUE 71217
71215: GO 71273
71217: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71218: LD_ADDR_VAR 0 9
71222: PUSH
71223: LD_VAR 0 53
71227: PUSH
71228: LD_VAR 0 54
71232: PUSH
71233: LD_VAR 0 55
71237: PUSH
71238: LD_VAR 0 56
71242: PUSH
71243: LD_VAR 0 57
71247: PUSH
71248: LD_VAR 0 58
71252: PUSH
71253: EMPTY
71254: LIST
71255: LIST
71256: LIST
71257: LIST
71258: LIST
71259: LIST
71260: PUSH
71261: LD_VAR 0 4
71265: PUSH
71266: LD_INT 1
71268: PLUS
71269: ARRAY
71270: ST_TO_ADDR
71271: GO 71380
71273: LD_INT 31
71275: DOUBLE
71276: EQUAL
71277: IFTRUE 71323
71279: LD_INT 32
71281: DOUBLE
71282: EQUAL
71283: IFTRUE 71323
71285: LD_INT 33
71287: DOUBLE
71288: EQUAL
71289: IFTRUE 71323
71291: LD_INT 27
71293: DOUBLE
71294: EQUAL
71295: IFTRUE 71323
71297: LD_INT 26
71299: DOUBLE
71300: EQUAL
71301: IFTRUE 71323
71303: LD_INT 28
71305: DOUBLE
71306: EQUAL
71307: IFTRUE 71323
71309: LD_INT 29
71311: DOUBLE
71312: EQUAL
71313: IFTRUE 71323
71315: LD_INT 30
71317: DOUBLE
71318: EQUAL
71319: IFTRUE 71323
71321: GO 71379
71323: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71324: LD_ADDR_VAR 0 9
71328: PUSH
71329: LD_VAR 0 59
71333: PUSH
71334: LD_VAR 0 60
71338: PUSH
71339: LD_VAR 0 61
71343: PUSH
71344: LD_VAR 0 62
71348: PUSH
71349: LD_VAR 0 63
71353: PUSH
71354: LD_VAR 0 64
71358: PUSH
71359: EMPTY
71360: LIST
71361: LIST
71362: LIST
71363: LIST
71364: LIST
71365: LIST
71366: PUSH
71367: LD_VAR 0 4
71371: PUSH
71372: LD_INT 1
71374: PLUS
71375: ARRAY
71376: ST_TO_ADDR
71377: GO 71380
71379: POP
// temp_list2 = [ ] ;
71380: LD_ADDR_VAR 0 10
71384: PUSH
71385: EMPTY
71386: ST_TO_ADDR
// for i in temp_list do
71387: LD_ADDR_VAR 0 8
71391: PUSH
71392: LD_VAR 0 9
71396: PUSH
71397: FOR_IN
71398: IFFALSE 71450
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71400: LD_ADDR_VAR 0 10
71404: PUSH
71405: LD_VAR 0 10
71409: PUSH
71410: LD_VAR 0 8
71414: PUSH
71415: LD_INT 1
71417: ARRAY
71418: PUSH
71419: LD_VAR 0 2
71423: PLUS
71424: PUSH
71425: LD_VAR 0 8
71429: PUSH
71430: LD_INT 2
71432: ARRAY
71433: PUSH
71434: LD_VAR 0 3
71438: PLUS
71439: PUSH
71440: EMPTY
71441: LIST
71442: LIST
71443: PUSH
71444: EMPTY
71445: LIST
71446: ADD
71447: ST_TO_ADDR
71448: GO 71397
71450: POP
71451: POP
// result = temp_list2 ;
71452: LD_ADDR_VAR 0 7
71456: PUSH
71457: LD_VAR 0 10
71461: ST_TO_ADDR
// end ;
71462: LD_VAR 0 7
71466: RET
// export function EnemyInRange ( unit , dist ) ; begin
71467: LD_INT 0
71469: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71470: LD_ADDR_VAR 0 3
71474: PUSH
71475: LD_VAR 0 1
71479: PPUSH
71480: CALL_OW 255
71484: PPUSH
71485: LD_VAR 0 1
71489: PPUSH
71490: CALL_OW 250
71494: PPUSH
71495: LD_VAR 0 1
71499: PPUSH
71500: CALL_OW 251
71504: PPUSH
71505: LD_VAR 0 2
71509: PPUSH
71510: CALL 44863 0 4
71514: PUSH
71515: LD_INT 4
71517: ARRAY
71518: ST_TO_ADDR
// end ;
71519: LD_VAR 0 3
71523: RET
// export function PlayerSeeMe ( unit ) ; begin
71524: LD_INT 0
71526: PPUSH
// result := See ( your_side , unit ) ;
71527: LD_ADDR_VAR 0 2
71531: PUSH
71532: LD_OWVAR 2
71536: PPUSH
71537: LD_VAR 0 1
71541: PPUSH
71542: CALL_OW 292
71546: ST_TO_ADDR
// end ;
71547: LD_VAR 0 2
71551: RET
// export function ReverseDir ( unit ) ; begin
71552: LD_INT 0
71554: PPUSH
// if not unit then
71555: LD_VAR 0 1
71559: NOT
71560: IFFALSE 71564
// exit ;
71562: GO 71587
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71564: LD_ADDR_VAR 0 2
71568: PUSH
71569: LD_VAR 0 1
71573: PPUSH
71574: CALL_OW 254
71578: PUSH
71579: LD_INT 3
71581: PLUS
71582: PUSH
71583: LD_INT 6
71585: MOD
71586: ST_TO_ADDR
// end ;
71587: LD_VAR 0 2
71591: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
71592: LD_INT 0
71594: PPUSH
71595: PPUSH
71596: PPUSH
71597: PPUSH
71598: PPUSH
// if not hexes then
71599: LD_VAR 0 2
71603: NOT
71604: IFFALSE 71608
// exit ;
71606: GO 71756
// dist := 9999 ;
71608: LD_ADDR_VAR 0 5
71612: PUSH
71613: LD_INT 9999
71615: ST_TO_ADDR
// for i = 1 to hexes do
71616: LD_ADDR_VAR 0 4
71620: PUSH
71621: DOUBLE
71622: LD_INT 1
71624: DEC
71625: ST_TO_ADDR
71626: LD_VAR 0 2
71630: PUSH
71631: FOR_TO
71632: IFFALSE 71744
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
71634: LD_VAR 0 1
71638: PPUSH
71639: LD_VAR 0 2
71643: PUSH
71644: LD_VAR 0 4
71648: ARRAY
71649: PUSH
71650: LD_INT 1
71652: ARRAY
71653: PPUSH
71654: LD_VAR 0 2
71658: PUSH
71659: LD_VAR 0 4
71663: ARRAY
71664: PUSH
71665: LD_INT 2
71667: ARRAY
71668: PPUSH
71669: CALL_OW 297
71673: PUSH
71674: LD_VAR 0 5
71678: LESS
71679: IFFALSE 71742
// begin hex := hexes [ i ] ;
71681: LD_ADDR_VAR 0 7
71685: PUSH
71686: LD_VAR 0 2
71690: PUSH
71691: LD_VAR 0 4
71695: ARRAY
71696: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71697: LD_ADDR_VAR 0 5
71701: PUSH
71702: LD_VAR 0 1
71706: PPUSH
71707: LD_VAR 0 2
71711: PUSH
71712: LD_VAR 0 4
71716: ARRAY
71717: PUSH
71718: LD_INT 1
71720: ARRAY
71721: PPUSH
71722: LD_VAR 0 2
71726: PUSH
71727: LD_VAR 0 4
71731: ARRAY
71732: PUSH
71733: LD_INT 2
71735: ARRAY
71736: PPUSH
71737: CALL_OW 297
71741: ST_TO_ADDR
// end ; end ;
71742: GO 71631
71744: POP
71745: POP
// result := hex ;
71746: LD_ADDR_VAR 0 3
71750: PUSH
71751: LD_VAR 0 7
71755: ST_TO_ADDR
// end ;
71756: LD_VAR 0 3
71760: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71761: LD_INT 0
71763: PPUSH
71764: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71765: LD_VAR 0 1
71769: NOT
71770: PUSH
71771: LD_VAR 0 1
71775: PUSH
71776: LD_INT 21
71778: PUSH
71779: LD_INT 2
71781: PUSH
71782: EMPTY
71783: LIST
71784: LIST
71785: PUSH
71786: LD_INT 23
71788: PUSH
71789: LD_INT 2
71791: PUSH
71792: EMPTY
71793: LIST
71794: LIST
71795: PUSH
71796: EMPTY
71797: LIST
71798: LIST
71799: PPUSH
71800: CALL_OW 69
71804: IN
71805: NOT
71806: OR
71807: IFFALSE 71811
// exit ;
71809: GO 71858
// for i = 1 to 3 do
71811: LD_ADDR_VAR 0 3
71815: PUSH
71816: DOUBLE
71817: LD_INT 1
71819: DEC
71820: ST_TO_ADDR
71821: LD_INT 3
71823: PUSH
71824: FOR_TO
71825: IFFALSE 71856
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71827: LD_VAR 0 1
71831: PPUSH
71832: CALL_OW 250
71836: PPUSH
71837: LD_VAR 0 1
71841: PPUSH
71842: CALL_OW 251
71846: PPUSH
71847: LD_INT 1
71849: PPUSH
71850: CALL_OW 453
71854: GO 71824
71856: POP
71857: POP
// end ;
71858: LD_VAR 0 2
71862: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71863: LD_INT 0
71865: PPUSH
71866: PPUSH
71867: PPUSH
71868: PPUSH
71869: PPUSH
71870: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71871: LD_VAR 0 1
71875: NOT
71876: PUSH
71877: LD_VAR 0 2
71881: NOT
71882: OR
71883: PUSH
71884: LD_VAR 0 1
71888: PPUSH
71889: CALL_OW 314
71893: OR
71894: IFFALSE 71898
// exit ;
71896: GO 72339
// x := GetX ( enemy_unit ) ;
71898: LD_ADDR_VAR 0 7
71902: PUSH
71903: LD_VAR 0 2
71907: PPUSH
71908: CALL_OW 250
71912: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71913: LD_ADDR_VAR 0 8
71917: PUSH
71918: LD_VAR 0 2
71922: PPUSH
71923: CALL_OW 251
71927: ST_TO_ADDR
// if not x or not y then
71928: LD_VAR 0 7
71932: NOT
71933: PUSH
71934: LD_VAR 0 8
71938: NOT
71939: OR
71940: IFFALSE 71944
// exit ;
71942: GO 72339
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71944: LD_ADDR_VAR 0 6
71948: PUSH
71949: LD_VAR 0 7
71953: PPUSH
71954: LD_INT 0
71956: PPUSH
71957: LD_INT 4
71959: PPUSH
71960: CALL_OW 272
71964: PUSH
71965: LD_VAR 0 8
71969: PPUSH
71970: LD_INT 0
71972: PPUSH
71973: LD_INT 4
71975: PPUSH
71976: CALL_OW 273
71980: PUSH
71981: EMPTY
71982: LIST
71983: LIST
71984: PUSH
71985: LD_VAR 0 7
71989: PPUSH
71990: LD_INT 1
71992: PPUSH
71993: LD_INT 4
71995: PPUSH
71996: CALL_OW 272
72000: PUSH
72001: LD_VAR 0 8
72005: PPUSH
72006: LD_INT 1
72008: PPUSH
72009: LD_INT 4
72011: PPUSH
72012: CALL_OW 273
72016: PUSH
72017: EMPTY
72018: LIST
72019: LIST
72020: PUSH
72021: LD_VAR 0 7
72025: PPUSH
72026: LD_INT 2
72028: PPUSH
72029: LD_INT 4
72031: PPUSH
72032: CALL_OW 272
72036: PUSH
72037: LD_VAR 0 8
72041: PPUSH
72042: LD_INT 2
72044: PPUSH
72045: LD_INT 4
72047: PPUSH
72048: CALL_OW 273
72052: PUSH
72053: EMPTY
72054: LIST
72055: LIST
72056: PUSH
72057: LD_VAR 0 7
72061: PPUSH
72062: LD_INT 3
72064: PPUSH
72065: LD_INT 4
72067: PPUSH
72068: CALL_OW 272
72072: PUSH
72073: LD_VAR 0 8
72077: PPUSH
72078: LD_INT 3
72080: PPUSH
72081: LD_INT 4
72083: PPUSH
72084: CALL_OW 273
72088: PUSH
72089: EMPTY
72090: LIST
72091: LIST
72092: PUSH
72093: LD_VAR 0 7
72097: PPUSH
72098: LD_INT 4
72100: PPUSH
72101: LD_INT 4
72103: PPUSH
72104: CALL_OW 272
72108: PUSH
72109: LD_VAR 0 8
72113: PPUSH
72114: LD_INT 4
72116: PPUSH
72117: LD_INT 4
72119: PPUSH
72120: CALL_OW 273
72124: PUSH
72125: EMPTY
72126: LIST
72127: LIST
72128: PUSH
72129: LD_VAR 0 7
72133: PPUSH
72134: LD_INT 5
72136: PPUSH
72137: LD_INT 4
72139: PPUSH
72140: CALL_OW 272
72144: PUSH
72145: LD_VAR 0 8
72149: PPUSH
72150: LD_INT 5
72152: PPUSH
72153: LD_INT 4
72155: PPUSH
72156: CALL_OW 273
72160: PUSH
72161: EMPTY
72162: LIST
72163: LIST
72164: PUSH
72165: EMPTY
72166: LIST
72167: LIST
72168: LIST
72169: LIST
72170: LIST
72171: LIST
72172: ST_TO_ADDR
// for i = tmp downto 1 do
72173: LD_ADDR_VAR 0 4
72177: PUSH
72178: DOUBLE
72179: LD_VAR 0 6
72183: INC
72184: ST_TO_ADDR
72185: LD_INT 1
72187: PUSH
72188: FOR_DOWNTO
72189: IFFALSE 72290
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72191: LD_VAR 0 6
72195: PUSH
72196: LD_VAR 0 4
72200: ARRAY
72201: PUSH
72202: LD_INT 1
72204: ARRAY
72205: PPUSH
72206: LD_VAR 0 6
72210: PUSH
72211: LD_VAR 0 4
72215: ARRAY
72216: PUSH
72217: LD_INT 2
72219: ARRAY
72220: PPUSH
72221: CALL_OW 488
72225: NOT
72226: PUSH
72227: LD_VAR 0 6
72231: PUSH
72232: LD_VAR 0 4
72236: ARRAY
72237: PUSH
72238: LD_INT 1
72240: ARRAY
72241: PPUSH
72242: LD_VAR 0 6
72246: PUSH
72247: LD_VAR 0 4
72251: ARRAY
72252: PUSH
72253: LD_INT 2
72255: ARRAY
72256: PPUSH
72257: CALL_OW 428
72261: PUSH
72262: LD_INT 0
72264: NONEQUAL
72265: OR
72266: IFFALSE 72288
// tmp := Delete ( tmp , i ) ;
72268: LD_ADDR_VAR 0 6
72272: PUSH
72273: LD_VAR 0 6
72277: PPUSH
72278: LD_VAR 0 4
72282: PPUSH
72283: CALL_OW 3
72287: ST_TO_ADDR
72288: GO 72188
72290: POP
72291: POP
// j := GetClosestHex ( unit , tmp ) ;
72292: LD_ADDR_VAR 0 5
72296: PUSH
72297: LD_VAR 0 1
72301: PPUSH
72302: LD_VAR 0 6
72306: PPUSH
72307: CALL 71592 0 2
72311: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72312: LD_VAR 0 1
72316: PPUSH
72317: LD_VAR 0 5
72321: PUSH
72322: LD_INT 1
72324: ARRAY
72325: PPUSH
72326: LD_VAR 0 5
72330: PUSH
72331: LD_INT 2
72333: ARRAY
72334: PPUSH
72335: CALL_OW 111
// end ;
72339: LD_VAR 0 3
72343: RET
// export function PrepareApemanSoldier ( ) ; begin
72344: LD_INT 0
72346: PPUSH
// uc_nation := 0 ;
72347: LD_ADDR_OWVAR 21
72351: PUSH
72352: LD_INT 0
72354: ST_TO_ADDR
// hc_sex := sex_male ;
72355: LD_ADDR_OWVAR 27
72359: PUSH
72360: LD_INT 1
72362: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72363: LD_ADDR_OWVAR 28
72367: PUSH
72368: LD_INT 15
72370: ST_TO_ADDR
// hc_gallery :=  ;
72371: LD_ADDR_OWVAR 33
72375: PUSH
72376: LD_STRING 
72378: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72379: LD_ADDR_OWVAR 31
72383: PUSH
72384: LD_INT 0
72386: PPUSH
72387: LD_INT 3
72389: PPUSH
72390: CALL_OW 12
72394: PUSH
72395: LD_INT 0
72397: PPUSH
72398: LD_INT 3
72400: PPUSH
72401: CALL_OW 12
72405: PUSH
72406: LD_INT 0
72408: PUSH
72409: LD_INT 0
72411: PUSH
72412: EMPTY
72413: LIST
72414: LIST
72415: LIST
72416: LIST
72417: ST_TO_ADDR
// end ;
72418: LD_VAR 0 1
72422: RET
// export function PrepareApemanEngineer ( ) ; begin
72423: LD_INT 0
72425: PPUSH
// uc_nation := 0 ;
72426: LD_ADDR_OWVAR 21
72430: PUSH
72431: LD_INT 0
72433: ST_TO_ADDR
// hc_sex := sex_male ;
72434: LD_ADDR_OWVAR 27
72438: PUSH
72439: LD_INT 1
72441: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72442: LD_ADDR_OWVAR 28
72446: PUSH
72447: LD_INT 16
72449: ST_TO_ADDR
// hc_gallery :=  ;
72450: LD_ADDR_OWVAR 33
72454: PUSH
72455: LD_STRING 
72457: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72458: LD_ADDR_OWVAR 31
72462: PUSH
72463: LD_INT 0
72465: PPUSH
72466: LD_INT 3
72468: PPUSH
72469: CALL_OW 12
72473: PUSH
72474: LD_INT 0
72476: PPUSH
72477: LD_INT 3
72479: PPUSH
72480: CALL_OW 12
72484: PUSH
72485: LD_INT 0
72487: PUSH
72488: LD_INT 0
72490: PUSH
72491: EMPTY
72492: LIST
72493: LIST
72494: LIST
72495: LIST
72496: ST_TO_ADDR
// end ;
72497: LD_VAR 0 1
72501: RET
// export function PrepareApeman ( agressivity ) ; begin
72502: LD_INT 0
72504: PPUSH
// uc_side := 0 ;
72505: LD_ADDR_OWVAR 20
72509: PUSH
72510: LD_INT 0
72512: ST_TO_ADDR
// uc_nation := 0 ;
72513: LD_ADDR_OWVAR 21
72517: PUSH
72518: LD_INT 0
72520: ST_TO_ADDR
// hc_sex := sex_male ;
72521: LD_ADDR_OWVAR 27
72525: PUSH
72526: LD_INT 1
72528: ST_TO_ADDR
// hc_class := class_apeman ;
72529: LD_ADDR_OWVAR 28
72533: PUSH
72534: LD_INT 12
72536: ST_TO_ADDR
// hc_gallery :=  ;
72537: LD_ADDR_OWVAR 33
72541: PUSH
72542: LD_STRING 
72544: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72545: LD_ADDR_OWVAR 35
72549: PUSH
72550: LD_VAR 0 1
72554: NEG
72555: PPUSH
72556: LD_VAR 0 1
72560: PPUSH
72561: CALL_OW 12
72565: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72566: LD_ADDR_OWVAR 31
72570: PUSH
72571: LD_INT 0
72573: PPUSH
72574: LD_INT 3
72576: PPUSH
72577: CALL_OW 12
72581: PUSH
72582: LD_INT 0
72584: PPUSH
72585: LD_INT 3
72587: PPUSH
72588: CALL_OW 12
72592: PUSH
72593: LD_INT 0
72595: PUSH
72596: LD_INT 0
72598: PUSH
72599: EMPTY
72600: LIST
72601: LIST
72602: LIST
72603: LIST
72604: ST_TO_ADDR
// end ;
72605: LD_VAR 0 2
72609: RET
// export function PrepareTiger ( agressivity ) ; begin
72610: LD_INT 0
72612: PPUSH
// uc_side := 0 ;
72613: LD_ADDR_OWVAR 20
72617: PUSH
72618: LD_INT 0
72620: ST_TO_ADDR
// uc_nation := 0 ;
72621: LD_ADDR_OWVAR 21
72625: PUSH
72626: LD_INT 0
72628: ST_TO_ADDR
// hc_class := class_tiger ;
72629: LD_ADDR_OWVAR 28
72633: PUSH
72634: LD_INT 14
72636: ST_TO_ADDR
// hc_gallery :=  ;
72637: LD_ADDR_OWVAR 33
72641: PUSH
72642: LD_STRING 
72644: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72645: LD_ADDR_OWVAR 35
72649: PUSH
72650: LD_VAR 0 1
72654: NEG
72655: PPUSH
72656: LD_VAR 0 1
72660: PPUSH
72661: CALL_OW 12
72665: ST_TO_ADDR
// end ;
72666: LD_VAR 0 2
72670: RET
// export function PrepareEnchidna ( ) ; begin
72671: LD_INT 0
72673: PPUSH
// uc_side := 0 ;
72674: LD_ADDR_OWVAR 20
72678: PUSH
72679: LD_INT 0
72681: ST_TO_ADDR
// uc_nation := 0 ;
72682: LD_ADDR_OWVAR 21
72686: PUSH
72687: LD_INT 0
72689: ST_TO_ADDR
// hc_class := class_baggie ;
72690: LD_ADDR_OWVAR 28
72694: PUSH
72695: LD_INT 13
72697: ST_TO_ADDR
// hc_gallery :=  ;
72698: LD_ADDR_OWVAR 33
72702: PUSH
72703: LD_STRING 
72705: ST_TO_ADDR
// end ;
72706: LD_VAR 0 1
72710: RET
// export function PrepareFrog ( ) ; begin
72711: LD_INT 0
72713: PPUSH
// uc_side := 0 ;
72714: LD_ADDR_OWVAR 20
72718: PUSH
72719: LD_INT 0
72721: ST_TO_ADDR
// uc_nation := 0 ;
72722: LD_ADDR_OWVAR 21
72726: PUSH
72727: LD_INT 0
72729: ST_TO_ADDR
// hc_class := class_frog ;
72730: LD_ADDR_OWVAR 28
72734: PUSH
72735: LD_INT 19
72737: ST_TO_ADDR
// hc_gallery :=  ;
72738: LD_ADDR_OWVAR 33
72742: PUSH
72743: LD_STRING 
72745: ST_TO_ADDR
// end ;
72746: LD_VAR 0 1
72750: RET
// export function PrepareFish ( ) ; begin
72751: LD_INT 0
72753: PPUSH
// uc_side := 0 ;
72754: LD_ADDR_OWVAR 20
72758: PUSH
72759: LD_INT 0
72761: ST_TO_ADDR
// uc_nation := 0 ;
72762: LD_ADDR_OWVAR 21
72766: PUSH
72767: LD_INT 0
72769: ST_TO_ADDR
// hc_class := class_fish ;
72770: LD_ADDR_OWVAR 28
72774: PUSH
72775: LD_INT 20
72777: ST_TO_ADDR
// hc_gallery :=  ;
72778: LD_ADDR_OWVAR 33
72782: PUSH
72783: LD_STRING 
72785: ST_TO_ADDR
// end ;
72786: LD_VAR 0 1
72790: RET
// export function PrepareBird ( ) ; begin
72791: LD_INT 0
72793: PPUSH
// uc_side := 0 ;
72794: LD_ADDR_OWVAR 20
72798: PUSH
72799: LD_INT 0
72801: ST_TO_ADDR
// uc_nation := 0 ;
72802: LD_ADDR_OWVAR 21
72806: PUSH
72807: LD_INT 0
72809: ST_TO_ADDR
// hc_class := class_phororhacos ;
72810: LD_ADDR_OWVAR 28
72814: PUSH
72815: LD_INT 18
72817: ST_TO_ADDR
// hc_gallery :=  ;
72818: LD_ADDR_OWVAR 33
72822: PUSH
72823: LD_STRING 
72825: ST_TO_ADDR
// end ;
72826: LD_VAR 0 1
72830: RET
// export function PrepareHorse ( ) ; begin
72831: LD_INT 0
72833: PPUSH
// uc_side := 0 ;
72834: LD_ADDR_OWVAR 20
72838: PUSH
72839: LD_INT 0
72841: ST_TO_ADDR
// uc_nation := 0 ;
72842: LD_ADDR_OWVAR 21
72846: PUSH
72847: LD_INT 0
72849: ST_TO_ADDR
// hc_class := 21 ;
72850: LD_ADDR_OWVAR 28
72854: PUSH
72855: LD_INT 21
72857: ST_TO_ADDR
// hc_gallery :=  ;
72858: LD_ADDR_OWVAR 33
72862: PUSH
72863: LD_STRING 
72865: ST_TO_ADDR
// end ;
72866: LD_VAR 0 1
72870: RET
// export function PrepareMastodont ( ) ; begin
72871: LD_INT 0
72873: PPUSH
// uc_side := 0 ;
72874: LD_ADDR_OWVAR 20
72878: PUSH
72879: LD_INT 0
72881: ST_TO_ADDR
// uc_nation := 0 ;
72882: LD_ADDR_OWVAR 21
72886: PUSH
72887: LD_INT 0
72889: ST_TO_ADDR
// vc_chassis := 31 ;
72890: LD_ADDR_OWVAR 37
72894: PUSH
72895: LD_INT 31
72897: ST_TO_ADDR
// vc_control := control_rider ;
72898: LD_ADDR_OWVAR 38
72902: PUSH
72903: LD_INT 4
72905: ST_TO_ADDR
// end ;
72906: LD_VAR 0 1
72910: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72911: LD_INT 0
72913: PPUSH
72914: PPUSH
72915: PPUSH
// uc_side = 0 ;
72916: LD_ADDR_OWVAR 20
72920: PUSH
72921: LD_INT 0
72923: ST_TO_ADDR
// uc_nation = 0 ;
72924: LD_ADDR_OWVAR 21
72928: PUSH
72929: LD_INT 0
72931: ST_TO_ADDR
// InitHc_All ( ) ;
72932: CALL_OW 584
// InitVc ;
72936: CALL_OW 20
// if mastodonts then
72940: LD_VAR 0 6
72944: IFFALSE 73011
// for i = 1 to mastodonts do
72946: LD_ADDR_VAR 0 11
72950: PUSH
72951: DOUBLE
72952: LD_INT 1
72954: DEC
72955: ST_TO_ADDR
72956: LD_VAR 0 6
72960: PUSH
72961: FOR_TO
72962: IFFALSE 73009
// begin vc_chassis := 31 ;
72964: LD_ADDR_OWVAR 37
72968: PUSH
72969: LD_INT 31
72971: ST_TO_ADDR
// vc_control := control_rider ;
72972: LD_ADDR_OWVAR 38
72976: PUSH
72977: LD_INT 4
72979: ST_TO_ADDR
// animal := CreateVehicle ;
72980: LD_ADDR_VAR 0 12
72984: PUSH
72985: CALL_OW 45
72989: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72990: LD_VAR 0 12
72994: PPUSH
72995: LD_VAR 0 8
72999: PPUSH
73000: LD_INT 0
73002: PPUSH
73003: CALL 75146 0 3
// end ;
73007: GO 72961
73009: POP
73010: POP
// if horses then
73011: LD_VAR 0 5
73015: IFFALSE 73082
// for i = 1 to horses do
73017: LD_ADDR_VAR 0 11
73021: PUSH
73022: DOUBLE
73023: LD_INT 1
73025: DEC
73026: ST_TO_ADDR
73027: LD_VAR 0 5
73031: PUSH
73032: FOR_TO
73033: IFFALSE 73080
// begin hc_class := 21 ;
73035: LD_ADDR_OWVAR 28
73039: PUSH
73040: LD_INT 21
73042: ST_TO_ADDR
// hc_gallery :=  ;
73043: LD_ADDR_OWVAR 33
73047: PUSH
73048: LD_STRING 
73050: ST_TO_ADDR
// animal := CreateHuman ;
73051: LD_ADDR_VAR 0 12
73055: PUSH
73056: CALL_OW 44
73060: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73061: LD_VAR 0 12
73065: PPUSH
73066: LD_VAR 0 8
73070: PPUSH
73071: LD_INT 0
73073: PPUSH
73074: CALL 75146 0 3
// end ;
73078: GO 73032
73080: POP
73081: POP
// if birds then
73082: LD_VAR 0 1
73086: IFFALSE 73153
// for i = 1 to birds do
73088: LD_ADDR_VAR 0 11
73092: PUSH
73093: DOUBLE
73094: LD_INT 1
73096: DEC
73097: ST_TO_ADDR
73098: LD_VAR 0 1
73102: PUSH
73103: FOR_TO
73104: IFFALSE 73151
// begin hc_class = 18 ;
73106: LD_ADDR_OWVAR 28
73110: PUSH
73111: LD_INT 18
73113: ST_TO_ADDR
// hc_gallery =  ;
73114: LD_ADDR_OWVAR 33
73118: PUSH
73119: LD_STRING 
73121: ST_TO_ADDR
// animal := CreateHuman ;
73122: LD_ADDR_VAR 0 12
73126: PUSH
73127: CALL_OW 44
73131: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73132: LD_VAR 0 12
73136: PPUSH
73137: LD_VAR 0 8
73141: PPUSH
73142: LD_INT 0
73144: PPUSH
73145: CALL 75146 0 3
// end ;
73149: GO 73103
73151: POP
73152: POP
// if tigers then
73153: LD_VAR 0 2
73157: IFFALSE 73241
// for i = 1 to tigers do
73159: LD_ADDR_VAR 0 11
73163: PUSH
73164: DOUBLE
73165: LD_INT 1
73167: DEC
73168: ST_TO_ADDR
73169: LD_VAR 0 2
73173: PUSH
73174: FOR_TO
73175: IFFALSE 73239
// begin hc_class = class_tiger ;
73177: LD_ADDR_OWVAR 28
73181: PUSH
73182: LD_INT 14
73184: ST_TO_ADDR
// hc_gallery =  ;
73185: LD_ADDR_OWVAR 33
73189: PUSH
73190: LD_STRING 
73192: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73193: LD_ADDR_OWVAR 35
73197: PUSH
73198: LD_INT 7
73200: NEG
73201: PPUSH
73202: LD_INT 7
73204: PPUSH
73205: CALL_OW 12
73209: ST_TO_ADDR
// animal := CreateHuman ;
73210: LD_ADDR_VAR 0 12
73214: PUSH
73215: CALL_OW 44
73219: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73220: LD_VAR 0 12
73224: PPUSH
73225: LD_VAR 0 8
73229: PPUSH
73230: LD_INT 0
73232: PPUSH
73233: CALL 75146 0 3
// end ;
73237: GO 73174
73239: POP
73240: POP
// if apemans then
73241: LD_VAR 0 3
73245: IFFALSE 73368
// for i = 1 to apemans do
73247: LD_ADDR_VAR 0 11
73251: PUSH
73252: DOUBLE
73253: LD_INT 1
73255: DEC
73256: ST_TO_ADDR
73257: LD_VAR 0 3
73261: PUSH
73262: FOR_TO
73263: IFFALSE 73366
// begin hc_class = class_apeman ;
73265: LD_ADDR_OWVAR 28
73269: PUSH
73270: LD_INT 12
73272: ST_TO_ADDR
// hc_gallery =  ;
73273: LD_ADDR_OWVAR 33
73277: PUSH
73278: LD_STRING 
73280: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73281: LD_ADDR_OWVAR 35
73285: PUSH
73286: LD_INT 2
73288: NEG
73289: PPUSH
73290: LD_INT 2
73292: PPUSH
73293: CALL_OW 12
73297: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73298: LD_ADDR_OWVAR 31
73302: PUSH
73303: LD_INT 1
73305: PPUSH
73306: LD_INT 3
73308: PPUSH
73309: CALL_OW 12
73313: PUSH
73314: LD_INT 1
73316: PPUSH
73317: LD_INT 3
73319: PPUSH
73320: CALL_OW 12
73324: PUSH
73325: LD_INT 0
73327: PUSH
73328: LD_INT 0
73330: PUSH
73331: EMPTY
73332: LIST
73333: LIST
73334: LIST
73335: LIST
73336: ST_TO_ADDR
// animal := CreateHuman ;
73337: LD_ADDR_VAR 0 12
73341: PUSH
73342: CALL_OW 44
73346: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73347: LD_VAR 0 12
73351: PPUSH
73352: LD_VAR 0 8
73356: PPUSH
73357: LD_INT 0
73359: PPUSH
73360: CALL 75146 0 3
// end ;
73364: GO 73262
73366: POP
73367: POP
// if enchidnas then
73368: LD_VAR 0 4
73372: IFFALSE 73439
// for i = 1 to enchidnas do
73374: LD_ADDR_VAR 0 11
73378: PUSH
73379: DOUBLE
73380: LD_INT 1
73382: DEC
73383: ST_TO_ADDR
73384: LD_VAR 0 4
73388: PUSH
73389: FOR_TO
73390: IFFALSE 73437
// begin hc_class = 13 ;
73392: LD_ADDR_OWVAR 28
73396: PUSH
73397: LD_INT 13
73399: ST_TO_ADDR
// hc_gallery =  ;
73400: LD_ADDR_OWVAR 33
73404: PUSH
73405: LD_STRING 
73407: ST_TO_ADDR
// animal := CreateHuman ;
73408: LD_ADDR_VAR 0 12
73412: PUSH
73413: CALL_OW 44
73417: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73418: LD_VAR 0 12
73422: PPUSH
73423: LD_VAR 0 8
73427: PPUSH
73428: LD_INT 0
73430: PPUSH
73431: CALL 75146 0 3
// end ;
73435: GO 73389
73437: POP
73438: POP
// if fishes then
73439: LD_VAR 0 7
73443: IFFALSE 73510
// for i = 1 to fishes do
73445: LD_ADDR_VAR 0 11
73449: PUSH
73450: DOUBLE
73451: LD_INT 1
73453: DEC
73454: ST_TO_ADDR
73455: LD_VAR 0 7
73459: PUSH
73460: FOR_TO
73461: IFFALSE 73508
// begin hc_class = 20 ;
73463: LD_ADDR_OWVAR 28
73467: PUSH
73468: LD_INT 20
73470: ST_TO_ADDR
// hc_gallery =  ;
73471: LD_ADDR_OWVAR 33
73475: PUSH
73476: LD_STRING 
73478: ST_TO_ADDR
// animal := CreateHuman ;
73479: LD_ADDR_VAR 0 12
73483: PUSH
73484: CALL_OW 44
73488: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73489: LD_VAR 0 12
73493: PPUSH
73494: LD_VAR 0 9
73498: PPUSH
73499: LD_INT 0
73501: PPUSH
73502: CALL 75146 0 3
// end ;
73506: GO 73460
73508: POP
73509: POP
// end ;
73510: LD_VAR 0 10
73514: RET
// export function WantHeal ( sci , unit ) ; begin
73515: LD_INT 0
73517: PPUSH
// if GetTaskList ( sci ) > 0 then
73518: LD_VAR 0 1
73522: PPUSH
73523: CALL_OW 437
73527: PUSH
73528: LD_INT 0
73530: GREATER
73531: IFFALSE 73601
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73533: LD_VAR 0 1
73537: PPUSH
73538: CALL_OW 437
73542: PUSH
73543: LD_INT 1
73545: ARRAY
73546: PUSH
73547: LD_INT 1
73549: ARRAY
73550: PUSH
73551: LD_STRING l
73553: EQUAL
73554: PUSH
73555: LD_VAR 0 1
73559: PPUSH
73560: CALL_OW 437
73564: PUSH
73565: LD_INT 1
73567: ARRAY
73568: PUSH
73569: LD_INT 4
73571: ARRAY
73572: PUSH
73573: LD_VAR 0 2
73577: EQUAL
73578: AND
73579: IFFALSE 73591
// result := true else
73581: LD_ADDR_VAR 0 3
73585: PUSH
73586: LD_INT 1
73588: ST_TO_ADDR
73589: GO 73599
// result := false ;
73591: LD_ADDR_VAR 0 3
73595: PUSH
73596: LD_INT 0
73598: ST_TO_ADDR
// end else
73599: GO 73609
// result := false ;
73601: LD_ADDR_VAR 0 3
73605: PUSH
73606: LD_INT 0
73608: ST_TO_ADDR
// end ;
73609: LD_VAR 0 3
73613: RET
// export function HealTarget ( sci ) ; begin
73614: LD_INT 0
73616: PPUSH
// if not sci then
73617: LD_VAR 0 1
73621: NOT
73622: IFFALSE 73626
// exit ;
73624: GO 73691
// result := 0 ;
73626: LD_ADDR_VAR 0 2
73630: PUSH
73631: LD_INT 0
73633: ST_TO_ADDR
// if GetTaskList ( sci ) then
73634: LD_VAR 0 1
73638: PPUSH
73639: CALL_OW 437
73643: IFFALSE 73691
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73645: LD_VAR 0 1
73649: PPUSH
73650: CALL_OW 437
73654: PUSH
73655: LD_INT 1
73657: ARRAY
73658: PUSH
73659: LD_INT 1
73661: ARRAY
73662: PUSH
73663: LD_STRING l
73665: EQUAL
73666: IFFALSE 73691
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73668: LD_ADDR_VAR 0 2
73672: PUSH
73673: LD_VAR 0 1
73677: PPUSH
73678: CALL_OW 437
73682: PUSH
73683: LD_INT 1
73685: ARRAY
73686: PUSH
73687: LD_INT 4
73689: ARRAY
73690: ST_TO_ADDR
// end ;
73691: LD_VAR 0 2
73695: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73696: LD_INT 0
73698: PPUSH
73699: PPUSH
73700: PPUSH
73701: PPUSH
// if not base_units then
73702: LD_VAR 0 1
73706: NOT
73707: IFFALSE 73711
// exit ;
73709: GO 73798
// result := false ;
73711: LD_ADDR_VAR 0 2
73715: PUSH
73716: LD_INT 0
73718: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73719: LD_ADDR_VAR 0 5
73723: PUSH
73724: LD_VAR 0 1
73728: PPUSH
73729: LD_INT 21
73731: PUSH
73732: LD_INT 3
73734: PUSH
73735: EMPTY
73736: LIST
73737: LIST
73738: PPUSH
73739: CALL_OW 72
73743: ST_TO_ADDR
// if not tmp then
73744: LD_VAR 0 5
73748: NOT
73749: IFFALSE 73753
// exit ;
73751: GO 73798
// for i in tmp do
73753: LD_ADDR_VAR 0 3
73757: PUSH
73758: LD_VAR 0 5
73762: PUSH
73763: FOR_IN
73764: IFFALSE 73796
// begin result := EnemyInRange ( i , 22 ) ;
73766: LD_ADDR_VAR 0 2
73770: PUSH
73771: LD_VAR 0 3
73775: PPUSH
73776: LD_INT 22
73778: PPUSH
73779: CALL 71467 0 2
73783: ST_TO_ADDR
// if result then
73784: LD_VAR 0 2
73788: IFFALSE 73794
// exit ;
73790: POP
73791: POP
73792: GO 73798
// end ;
73794: GO 73763
73796: POP
73797: POP
// end ;
73798: LD_VAR 0 2
73802: RET
// export function FilterByTag ( units , tag ) ; begin
73803: LD_INT 0
73805: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
73806: LD_ADDR_VAR 0 3
73810: PUSH
73811: LD_VAR 0 1
73815: PPUSH
73816: LD_INT 120
73818: PUSH
73819: LD_VAR 0 2
73823: PUSH
73824: EMPTY
73825: LIST
73826: LIST
73827: PPUSH
73828: CALL_OW 72
73832: ST_TO_ADDR
// end ;
73833: LD_VAR 0 3
73837: RET
// export function IsDriver ( un ) ; begin
73838: LD_INT 0
73840: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73841: LD_ADDR_VAR 0 2
73845: PUSH
73846: LD_VAR 0 1
73850: PUSH
73851: LD_INT 55
73853: PUSH
73854: EMPTY
73855: LIST
73856: PPUSH
73857: CALL_OW 69
73861: IN
73862: ST_TO_ADDR
// end ;
73863: LD_VAR 0 2
73867: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73868: LD_INT 0
73870: PPUSH
73871: PPUSH
// list := [ ] ;
73872: LD_ADDR_VAR 0 5
73876: PUSH
73877: EMPTY
73878: ST_TO_ADDR
// case d of 0 :
73879: LD_VAR 0 3
73883: PUSH
73884: LD_INT 0
73886: DOUBLE
73887: EQUAL
73888: IFTRUE 73892
73890: GO 74025
73892: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73893: LD_ADDR_VAR 0 5
73897: PUSH
73898: LD_VAR 0 1
73902: PUSH
73903: LD_INT 4
73905: MINUS
73906: PUSH
73907: LD_VAR 0 2
73911: PUSH
73912: LD_INT 4
73914: MINUS
73915: PUSH
73916: LD_INT 2
73918: PUSH
73919: EMPTY
73920: LIST
73921: LIST
73922: LIST
73923: PUSH
73924: LD_VAR 0 1
73928: PUSH
73929: LD_INT 3
73931: MINUS
73932: PUSH
73933: LD_VAR 0 2
73937: PUSH
73938: LD_INT 1
73940: PUSH
73941: EMPTY
73942: LIST
73943: LIST
73944: LIST
73945: PUSH
73946: LD_VAR 0 1
73950: PUSH
73951: LD_INT 4
73953: PLUS
73954: PUSH
73955: LD_VAR 0 2
73959: PUSH
73960: LD_INT 4
73962: PUSH
73963: EMPTY
73964: LIST
73965: LIST
73966: LIST
73967: PUSH
73968: LD_VAR 0 1
73972: PUSH
73973: LD_INT 3
73975: PLUS
73976: PUSH
73977: LD_VAR 0 2
73981: PUSH
73982: LD_INT 3
73984: PLUS
73985: PUSH
73986: LD_INT 5
73988: PUSH
73989: EMPTY
73990: LIST
73991: LIST
73992: LIST
73993: PUSH
73994: LD_VAR 0 1
73998: PUSH
73999: LD_VAR 0 2
74003: PUSH
74004: LD_INT 4
74006: PLUS
74007: PUSH
74008: LD_INT 0
74010: PUSH
74011: EMPTY
74012: LIST
74013: LIST
74014: LIST
74015: PUSH
74016: EMPTY
74017: LIST
74018: LIST
74019: LIST
74020: LIST
74021: LIST
74022: ST_TO_ADDR
// end ; 1 :
74023: GO 74723
74025: LD_INT 1
74027: DOUBLE
74028: EQUAL
74029: IFTRUE 74033
74031: GO 74166
74033: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74034: LD_ADDR_VAR 0 5
74038: PUSH
74039: LD_VAR 0 1
74043: PUSH
74044: LD_VAR 0 2
74048: PUSH
74049: LD_INT 4
74051: MINUS
74052: PUSH
74053: LD_INT 3
74055: PUSH
74056: EMPTY
74057: LIST
74058: LIST
74059: LIST
74060: PUSH
74061: LD_VAR 0 1
74065: PUSH
74066: LD_INT 3
74068: MINUS
74069: PUSH
74070: LD_VAR 0 2
74074: PUSH
74075: LD_INT 3
74077: MINUS
74078: PUSH
74079: LD_INT 2
74081: PUSH
74082: EMPTY
74083: LIST
74084: LIST
74085: LIST
74086: PUSH
74087: LD_VAR 0 1
74091: PUSH
74092: LD_INT 4
74094: MINUS
74095: PUSH
74096: LD_VAR 0 2
74100: PUSH
74101: LD_INT 1
74103: PUSH
74104: EMPTY
74105: LIST
74106: LIST
74107: LIST
74108: PUSH
74109: LD_VAR 0 1
74113: PUSH
74114: LD_VAR 0 2
74118: PUSH
74119: LD_INT 3
74121: PLUS
74122: PUSH
74123: LD_INT 0
74125: PUSH
74126: EMPTY
74127: LIST
74128: LIST
74129: LIST
74130: PUSH
74131: LD_VAR 0 1
74135: PUSH
74136: LD_INT 4
74138: PLUS
74139: PUSH
74140: LD_VAR 0 2
74144: PUSH
74145: LD_INT 4
74147: PLUS
74148: PUSH
74149: LD_INT 5
74151: PUSH
74152: EMPTY
74153: LIST
74154: LIST
74155: LIST
74156: PUSH
74157: EMPTY
74158: LIST
74159: LIST
74160: LIST
74161: LIST
74162: LIST
74163: ST_TO_ADDR
// end ; 2 :
74164: GO 74723
74166: LD_INT 2
74168: DOUBLE
74169: EQUAL
74170: IFTRUE 74174
74172: GO 74303
74174: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74175: LD_ADDR_VAR 0 5
74179: PUSH
74180: LD_VAR 0 1
74184: PUSH
74185: LD_VAR 0 2
74189: PUSH
74190: LD_INT 3
74192: MINUS
74193: PUSH
74194: LD_INT 3
74196: PUSH
74197: EMPTY
74198: LIST
74199: LIST
74200: LIST
74201: PUSH
74202: LD_VAR 0 1
74206: PUSH
74207: LD_INT 4
74209: PLUS
74210: PUSH
74211: LD_VAR 0 2
74215: PUSH
74216: LD_INT 4
74218: PUSH
74219: EMPTY
74220: LIST
74221: LIST
74222: LIST
74223: PUSH
74224: LD_VAR 0 1
74228: PUSH
74229: LD_VAR 0 2
74233: PUSH
74234: LD_INT 4
74236: PLUS
74237: PUSH
74238: LD_INT 0
74240: PUSH
74241: EMPTY
74242: LIST
74243: LIST
74244: LIST
74245: PUSH
74246: LD_VAR 0 1
74250: PUSH
74251: LD_INT 3
74253: MINUS
74254: PUSH
74255: LD_VAR 0 2
74259: PUSH
74260: LD_INT 1
74262: PUSH
74263: EMPTY
74264: LIST
74265: LIST
74266: LIST
74267: PUSH
74268: LD_VAR 0 1
74272: PUSH
74273: LD_INT 4
74275: MINUS
74276: PUSH
74277: LD_VAR 0 2
74281: PUSH
74282: LD_INT 4
74284: MINUS
74285: PUSH
74286: LD_INT 2
74288: PUSH
74289: EMPTY
74290: LIST
74291: LIST
74292: LIST
74293: PUSH
74294: EMPTY
74295: LIST
74296: LIST
74297: LIST
74298: LIST
74299: LIST
74300: ST_TO_ADDR
// end ; 3 :
74301: GO 74723
74303: LD_INT 3
74305: DOUBLE
74306: EQUAL
74307: IFTRUE 74311
74309: GO 74444
74311: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74312: LD_ADDR_VAR 0 5
74316: PUSH
74317: LD_VAR 0 1
74321: PUSH
74322: LD_INT 3
74324: PLUS
74325: PUSH
74326: LD_VAR 0 2
74330: PUSH
74331: LD_INT 4
74333: PUSH
74334: EMPTY
74335: LIST
74336: LIST
74337: LIST
74338: PUSH
74339: LD_VAR 0 1
74343: PUSH
74344: LD_INT 4
74346: PLUS
74347: PUSH
74348: LD_VAR 0 2
74352: PUSH
74353: LD_INT 4
74355: PLUS
74356: PUSH
74357: LD_INT 5
74359: PUSH
74360: EMPTY
74361: LIST
74362: LIST
74363: LIST
74364: PUSH
74365: LD_VAR 0 1
74369: PUSH
74370: LD_INT 4
74372: MINUS
74373: PUSH
74374: LD_VAR 0 2
74378: PUSH
74379: LD_INT 1
74381: PUSH
74382: EMPTY
74383: LIST
74384: LIST
74385: LIST
74386: PUSH
74387: LD_VAR 0 1
74391: PUSH
74392: LD_VAR 0 2
74396: PUSH
74397: LD_INT 4
74399: MINUS
74400: PUSH
74401: LD_INT 3
74403: PUSH
74404: EMPTY
74405: LIST
74406: LIST
74407: LIST
74408: PUSH
74409: LD_VAR 0 1
74413: PUSH
74414: LD_INT 3
74416: MINUS
74417: PUSH
74418: LD_VAR 0 2
74422: PUSH
74423: LD_INT 3
74425: MINUS
74426: PUSH
74427: LD_INT 2
74429: PUSH
74430: EMPTY
74431: LIST
74432: LIST
74433: LIST
74434: PUSH
74435: EMPTY
74436: LIST
74437: LIST
74438: LIST
74439: LIST
74440: LIST
74441: ST_TO_ADDR
// end ; 4 :
74442: GO 74723
74444: LD_INT 4
74446: DOUBLE
74447: EQUAL
74448: IFTRUE 74452
74450: GO 74585
74452: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74453: LD_ADDR_VAR 0 5
74457: PUSH
74458: LD_VAR 0 1
74462: PUSH
74463: LD_VAR 0 2
74467: PUSH
74468: LD_INT 4
74470: PLUS
74471: PUSH
74472: LD_INT 0
74474: PUSH
74475: EMPTY
74476: LIST
74477: LIST
74478: LIST
74479: PUSH
74480: LD_VAR 0 1
74484: PUSH
74485: LD_INT 3
74487: PLUS
74488: PUSH
74489: LD_VAR 0 2
74493: PUSH
74494: LD_INT 3
74496: PLUS
74497: PUSH
74498: LD_INT 5
74500: PUSH
74501: EMPTY
74502: LIST
74503: LIST
74504: LIST
74505: PUSH
74506: LD_VAR 0 1
74510: PUSH
74511: LD_INT 4
74513: PLUS
74514: PUSH
74515: LD_VAR 0 2
74519: PUSH
74520: LD_INT 4
74522: PUSH
74523: EMPTY
74524: LIST
74525: LIST
74526: LIST
74527: PUSH
74528: LD_VAR 0 1
74532: PUSH
74533: LD_VAR 0 2
74537: PUSH
74538: LD_INT 3
74540: MINUS
74541: PUSH
74542: LD_INT 3
74544: PUSH
74545: EMPTY
74546: LIST
74547: LIST
74548: LIST
74549: PUSH
74550: LD_VAR 0 1
74554: PUSH
74555: LD_INT 4
74557: MINUS
74558: PUSH
74559: LD_VAR 0 2
74563: PUSH
74564: LD_INT 4
74566: MINUS
74567: PUSH
74568: LD_INT 2
74570: PUSH
74571: EMPTY
74572: LIST
74573: LIST
74574: LIST
74575: PUSH
74576: EMPTY
74577: LIST
74578: LIST
74579: LIST
74580: LIST
74581: LIST
74582: ST_TO_ADDR
// end ; 5 :
74583: GO 74723
74585: LD_INT 5
74587: DOUBLE
74588: EQUAL
74589: IFTRUE 74593
74591: GO 74722
74593: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74594: LD_ADDR_VAR 0 5
74598: PUSH
74599: LD_VAR 0 1
74603: PUSH
74604: LD_INT 4
74606: MINUS
74607: PUSH
74608: LD_VAR 0 2
74612: PUSH
74613: LD_INT 1
74615: PUSH
74616: EMPTY
74617: LIST
74618: LIST
74619: LIST
74620: PUSH
74621: LD_VAR 0 1
74625: PUSH
74626: LD_VAR 0 2
74630: PUSH
74631: LD_INT 4
74633: MINUS
74634: PUSH
74635: LD_INT 3
74637: PUSH
74638: EMPTY
74639: LIST
74640: LIST
74641: LIST
74642: PUSH
74643: LD_VAR 0 1
74647: PUSH
74648: LD_INT 4
74650: PLUS
74651: PUSH
74652: LD_VAR 0 2
74656: PUSH
74657: LD_INT 4
74659: PLUS
74660: PUSH
74661: LD_INT 5
74663: PUSH
74664: EMPTY
74665: LIST
74666: LIST
74667: LIST
74668: PUSH
74669: LD_VAR 0 1
74673: PUSH
74674: LD_INT 3
74676: PLUS
74677: PUSH
74678: LD_VAR 0 2
74682: PUSH
74683: LD_INT 4
74685: PUSH
74686: EMPTY
74687: LIST
74688: LIST
74689: LIST
74690: PUSH
74691: LD_VAR 0 1
74695: PUSH
74696: LD_VAR 0 2
74700: PUSH
74701: LD_INT 3
74703: PLUS
74704: PUSH
74705: LD_INT 0
74707: PUSH
74708: EMPTY
74709: LIST
74710: LIST
74711: LIST
74712: PUSH
74713: EMPTY
74714: LIST
74715: LIST
74716: LIST
74717: LIST
74718: LIST
74719: ST_TO_ADDR
// end ; end ;
74720: GO 74723
74722: POP
// result := list ;
74723: LD_ADDR_VAR 0 4
74727: PUSH
74728: LD_VAR 0 5
74732: ST_TO_ADDR
// end ;
74733: LD_VAR 0 4
74737: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74738: LD_INT 0
74740: PPUSH
74741: PPUSH
74742: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74743: LD_VAR 0 1
74747: NOT
74748: PUSH
74749: LD_VAR 0 2
74753: PUSH
74754: LD_INT 1
74756: PUSH
74757: LD_INT 2
74759: PUSH
74760: LD_INT 3
74762: PUSH
74763: LD_INT 4
74765: PUSH
74766: EMPTY
74767: LIST
74768: LIST
74769: LIST
74770: LIST
74771: IN
74772: NOT
74773: OR
74774: IFFALSE 74778
// exit ;
74776: GO 74870
// tmp := [ ] ;
74778: LD_ADDR_VAR 0 5
74782: PUSH
74783: EMPTY
74784: ST_TO_ADDR
// for i in units do
74785: LD_ADDR_VAR 0 4
74789: PUSH
74790: LD_VAR 0 1
74794: PUSH
74795: FOR_IN
74796: IFFALSE 74839
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
74798: LD_ADDR_VAR 0 5
74802: PUSH
74803: LD_VAR 0 5
74807: PPUSH
74808: LD_VAR 0 5
74812: PUSH
74813: LD_INT 1
74815: PLUS
74816: PPUSH
74817: LD_VAR 0 4
74821: PPUSH
74822: LD_VAR 0 2
74826: PPUSH
74827: CALL_OW 259
74831: PPUSH
74832: CALL_OW 2
74836: ST_TO_ADDR
74837: GO 74795
74839: POP
74840: POP
// if not tmp then
74841: LD_VAR 0 5
74845: NOT
74846: IFFALSE 74850
// exit ;
74848: GO 74870
// result := SortListByListDesc ( units , tmp ) ;
74850: LD_ADDR_VAR 0 3
74854: PUSH
74855: LD_VAR 0 1
74859: PPUSH
74860: LD_VAR 0 5
74864: PPUSH
74865: CALL_OW 77
74869: ST_TO_ADDR
// end ;
74870: LD_VAR 0 3
74874: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74875: LD_INT 0
74877: PPUSH
74878: PPUSH
74879: PPUSH
// result := false ;
74880: LD_ADDR_VAR 0 3
74884: PUSH
74885: LD_INT 0
74887: ST_TO_ADDR
// x := GetX ( building ) ;
74888: LD_ADDR_VAR 0 4
74892: PUSH
74893: LD_VAR 0 2
74897: PPUSH
74898: CALL_OW 250
74902: ST_TO_ADDR
// y := GetY ( building ) ;
74903: LD_ADDR_VAR 0 5
74907: PUSH
74908: LD_VAR 0 2
74912: PPUSH
74913: CALL_OW 251
74917: ST_TO_ADDR
// if not building or not x or not y then
74918: LD_VAR 0 2
74922: NOT
74923: PUSH
74924: LD_VAR 0 4
74928: NOT
74929: OR
74930: PUSH
74931: LD_VAR 0 5
74935: NOT
74936: OR
74937: IFFALSE 74941
// exit ;
74939: GO 75033
// if GetTaskList ( unit ) then
74941: LD_VAR 0 1
74945: PPUSH
74946: CALL_OW 437
74950: IFFALSE 75033
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74952: LD_STRING e
74954: PUSH
74955: LD_VAR 0 1
74959: PPUSH
74960: CALL_OW 437
74964: PUSH
74965: LD_INT 1
74967: ARRAY
74968: PUSH
74969: LD_INT 1
74971: ARRAY
74972: EQUAL
74973: PUSH
74974: LD_VAR 0 4
74978: PUSH
74979: LD_VAR 0 1
74983: PPUSH
74984: CALL_OW 437
74988: PUSH
74989: LD_INT 1
74991: ARRAY
74992: PUSH
74993: LD_INT 2
74995: ARRAY
74996: EQUAL
74997: AND
74998: PUSH
74999: LD_VAR 0 5
75003: PUSH
75004: LD_VAR 0 1
75008: PPUSH
75009: CALL_OW 437
75013: PUSH
75014: LD_INT 1
75016: ARRAY
75017: PUSH
75018: LD_INT 3
75020: ARRAY
75021: EQUAL
75022: AND
75023: IFFALSE 75033
// result := true end ;
75025: LD_ADDR_VAR 0 3
75029: PUSH
75030: LD_INT 1
75032: ST_TO_ADDR
// end ;
75033: LD_VAR 0 3
75037: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75038: LD_INT 0
75040: PPUSH
// result := false ;
75041: LD_ADDR_VAR 0 4
75045: PUSH
75046: LD_INT 0
75048: ST_TO_ADDR
// if GetTaskList ( unit ) then
75049: LD_VAR 0 1
75053: PPUSH
75054: CALL_OW 437
75058: IFFALSE 75141
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75060: LD_STRING M
75062: PUSH
75063: LD_VAR 0 1
75067: PPUSH
75068: CALL_OW 437
75072: PUSH
75073: LD_INT 1
75075: ARRAY
75076: PUSH
75077: LD_INT 1
75079: ARRAY
75080: EQUAL
75081: PUSH
75082: LD_VAR 0 2
75086: PUSH
75087: LD_VAR 0 1
75091: PPUSH
75092: CALL_OW 437
75096: PUSH
75097: LD_INT 1
75099: ARRAY
75100: PUSH
75101: LD_INT 2
75103: ARRAY
75104: EQUAL
75105: AND
75106: PUSH
75107: LD_VAR 0 3
75111: PUSH
75112: LD_VAR 0 1
75116: PPUSH
75117: CALL_OW 437
75121: PUSH
75122: LD_INT 1
75124: ARRAY
75125: PUSH
75126: LD_INT 3
75128: ARRAY
75129: EQUAL
75130: AND
75131: IFFALSE 75141
// result := true ;
75133: LD_ADDR_VAR 0 4
75137: PUSH
75138: LD_INT 1
75140: ST_TO_ADDR
// end ; end ;
75141: LD_VAR 0 4
75145: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75146: LD_INT 0
75148: PPUSH
75149: PPUSH
75150: PPUSH
75151: PPUSH
// if not unit or not area then
75152: LD_VAR 0 1
75156: NOT
75157: PUSH
75158: LD_VAR 0 2
75162: NOT
75163: OR
75164: IFFALSE 75168
// exit ;
75166: GO 75332
// tmp := AreaToList ( area , i ) ;
75168: LD_ADDR_VAR 0 6
75172: PUSH
75173: LD_VAR 0 2
75177: PPUSH
75178: LD_VAR 0 5
75182: PPUSH
75183: CALL_OW 517
75187: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75188: LD_ADDR_VAR 0 5
75192: PUSH
75193: DOUBLE
75194: LD_INT 1
75196: DEC
75197: ST_TO_ADDR
75198: LD_VAR 0 6
75202: PUSH
75203: LD_INT 1
75205: ARRAY
75206: PUSH
75207: FOR_TO
75208: IFFALSE 75330
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75210: LD_ADDR_VAR 0 7
75214: PUSH
75215: LD_VAR 0 6
75219: PUSH
75220: LD_INT 1
75222: ARRAY
75223: PUSH
75224: LD_VAR 0 5
75228: ARRAY
75229: PUSH
75230: LD_VAR 0 6
75234: PUSH
75235: LD_INT 2
75237: ARRAY
75238: PUSH
75239: LD_VAR 0 5
75243: ARRAY
75244: PUSH
75245: EMPTY
75246: LIST
75247: LIST
75248: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
75249: LD_VAR 0 7
75253: PUSH
75254: LD_INT 1
75256: ARRAY
75257: PPUSH
75258: LD_VAR 0 7
75262: PUSH
75263: LD_INT 2
75265: ARRAY
75266: PPUSH
75267: CALL_OW 428
75271: PUSH
75272: LD_INT 0
75274: EQUAL
75275: IFFALSE 75328
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75277: LD_VAR 0 1
75281: PPUSH
75282: LD_VAR 0 7
75286: PUSH
75287: LD_INT 1
75289: ARRAY
75290: PPUSH
75291: LD_VAR 0 7
75295: PUSH
75296: LD_INT 2
75298: ARRAY
75299: PPUSH
75300: LD_VAR 0 3
75304: PPUSH
75305: CALL_OW 48
// result := IsPlaced ( unit ) ;
75309: LD_ADDR_VAR 0 4
75313: PUSH
75314: LD_VAR 0 1
75318: PPUSH
75319: CALL_OW 305
75323: ST_TO_ADDR
// exit ;
75324: POP
75325: POP
75326: GO 75332
// end ; end ;
75328: GO 75207
75330: POP
75331: POP
// end ;
75332: LD_VAR 0 4
75336: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75337: LD_INT 0
75339: PPUSH
75340: PPUSH
75341: PPUSH
// if not side or side > 8 then
75342: LD_VAR 0 1
75346: NOT
75347: PUSH
75348: LD_VAR 0 1
75352: PUSH
75353: LD_INT 8
75355: GREATER
75356: OR
75357: IFFALSE 75361
// exit ;
75359: GO 75548
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75361: LD_ADDR_VAR 0 4
75365: PUSH
75366: LD_INT 22
75368: PUSH
75369: LD_VAR 0 1
75373: PUSH
75374: EMPTY
75375: LIST
75376: LIST
75377: PUSH
75378: LD_INT 21
75380: PUSH
75381: LD_INT 3
75383: PUSH
75384: EMPTY
75385: LIST
75386: LIST
75387: PUSH
75388: EMPTY
75389: LIST
75390: LIST
75391: PPUSH
75392: CALL_OW 69
75396: ST_TO_ADDR
// if not tmp then
75397: LD_VAR 0 4
75401: NOT
75402: IFFALSE 75406
// exit ;
75404: GO 75548
// enable_addtolog := true ;
75406: LD_ADDR_OWVAR 81
75410: PUSH
75411: LD_INT 1
75413: ST_TO_ADDR
// AddToLog ( [ ) ;
75414: LD_STRING [
75416: PPUSH
75417: CALL_OW 561
// for i in tmp do
75421: LD_ADDR_VAR 0 3
75425: PUSH
75426: LD_VAR 0 4
75430: PUSH
75431: FOR_IN
75432: IFFALSE 75539
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75434: LD_STRING [
75436: PUSH
75437: LD_VAR 0 3
75441: PPUSH
75442: CALL_OW 266
75446: STR
75447: PUSH
75448: LD_STRING , 
75450: STR
75451: PUSH
75452: LD_VAR 0 3
75456: PPUSH
75457: CALL_OW 250
75461: STR
75462: PUSH
75463: LD_STRING , 
75465: STR
75466: PUSH
75467: LD_VAR 0 3
75471: PPUSH
75472: CALL_OW 251
75476: STR
75477: PUSH
75478: LD_STRING , 
75480: STR
75481: PUSH
75482: LD_VAR 0 3
75486: PPUSH
75487: CALL_OW 254
75491: STR
75492: PUSH
75493: LD_STRING , 
75495: STR
75496: PUSH
75497: LD_VAR 0 3
75501: PPUSH
75502: LD_INT 1
75504: PPUSH
75505: CALL_OW 268
75509: STR
75510: PUSH
75511: LD_STRING , 
75513: STR
75514: PUSH
75515: LD_VAR 0 3
75519: PPUSH
75520: LD_INT 2
75522: PPUSH
75523: CALL_OW 268
75527: STR
75528: PUSH
75529: LD_STRING ],
75531: STR
75532: PPUSH
75533: CALL_OW 561
// end ;
75537: GO 75431
75539: POP
75540: POP
// AddToLog ( ]; ) ;
75541: LD_STRING ];
75543: PPUSH
75544: CALL_OW 561
// end ;
75548: LD_VAR 0 2
75552: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75553: LD_INT 0
75555: PPUSH
75556: PPUSH
75557: PPUSH
75558: PPUSH
75559: PPUSH
// if not area or not rate or not max then
75560: LD_VAR 0 1
75564: NOT
75565: PUSH
75566: LD_VAR 0 2
75570: NOT
75571: OR
75572: PUSH
75573: LD_VAR 0 4
75577: NOT
75578: OR
75579: IFFALSE 75583
// exit ;
75581: GO 75772
// while 1 do
75583: LD_INT 1
75585: IFFALSE 75772
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75587: LD_ADDR_VAR 0 9
75591: PUSH
75592: LD_VAR 0 1
75596: PPUSH
75597: LD_INT 1
75599: PPUSH
75600: CALL_OW 287
75604: PUSH
75605: LD_INT 10
75607: MUL
75608: ST_TO_ADDR
// r := rate / 10 ;
75609: LD_ADDR_VAR 0 7
75613: PUSH
75614: LD_VAR 0 2
75618: PUSH
75619: LD_INT 10
75621: DIVREAL
75622: ST_TO_ADDR
// time := 1 1$00 ;
75623: LD_ADDR_VAR 0 8
75627: PUSH
75628: LD_INT 2100
75630: ST_TO_ADDR
// if amount < min then
75631: LD_VAR 0 9
75635: PUSH
75636: LD_VAR 0 3
75640: LESS
75641: IFFALSE 75659
// r := r * 2 else
75643: LD_ADDR_VAR 0 7
75647: PUSH
75648: LD_VAR 0 7
75652: PUSH
75653: LD_INT 2
75655: MUL
75656: ST_TO_ADDR
75657: GO 75685
// if amount > max then
75659: LD_VAR 0 9
75663: PUSH
75664: LD_VAR 0 4
75668: GREATER
75669: IFFALSE 75685
// r := r / 2 ;
75671: LD_ADDR_VAR 0 7
75675: PUSH
75676: LD_VAR 0 7
75680: PUSH
75681: LD_INT 2
75683: DIVREAL
75684: ST_TO_ADDR
// time := time / r ;
75685: LD_ADDR_VAR 0 8
75689: PUSH
75690: LD_VAR 0 8
75694: PUSH
75695: LD_VAR 0 7
75699: DIVREAL
75700: ST_TO_ADDR
// if time < 0 then
75701: LD_VAR 0 8
75705: PUSH
75706: LD_INT 0
75708: LESS
75709: IFFALSE 75726
// time := time * - 1 ;
75711: LD_ADDR_VAR 0 8
75715: PUSH
75716: LD_VAR 0 8
75720: PUSH
75721: LD_INT 1
75723: NEG
75724: MUL
75725: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
75726: LD_VAR 0 8
75730: PUSH
75731: LD_INT 35
75733: PPUSH
75734: LD_INT 875
75736: PPUSH
75737: CALL_OW 12
75741: PLUS
75742: PPUSH
75743: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75747: LD_INT 1
75749: PPUSH
75750: LD_INT 5
75752: PPUSH
75753: CALL_OW 12
75757: PPUSH
75758: LD_VAR 0 1
75762: PPUSH
75763: LD_INT 1
75765: PPUSH
75766: CALL_OW 55
// end ;
75770: GO 75583
// end ;
75772: LD_VAR 0 5
75776: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75777: LD_INT 0
75779: PPUSH
75780: PPUSH
75781: PPUSH
75782: PPUSH
75783: PPUSH
75784: PPUSH
75785: PPUSH
75786: PPUSH
// if not turrets or not factories then
75787: LD_VAR 0 1
75791: NOT
75792: PUSH
75793: LD_VAR 0 2
75797: NOT
75798: OR
75799: IFFALSE 75803
// exit ;
75801: GO 76110
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75803: LD_ADDR_VAR 0 10
75807: PUSH
75808: LD_INT 5
75810: PUSH
75811: LD_INT 6
75813: PUSH
75814: EMPTY
75815: LIST
75816: LIST
75817: PUSH
75818: LD_INT 2
75820: PUSH
75821: LD_INT 4
75823: PUSH
75824: EMPTY
75825: LIST
75826: LIST
75827: PUSH
75828: LD_INT 3
75830: PUSH
75831: LD_INT 5
75833: PUSH
75834: EMPTY
75835: LIST
75836: LIST
75837: PUSH
75838: EMPTY
75839: LIST
75840: LIST
75841: LIST
75842: PUSH
75843: LD_INT 24
75845: PUSH
75846: LD_INT 25
75848: PUSH
75849: EMPTY
75850: LIST
75851: LIST
75852: PUSH
75853: LD_INT 23
75855: PUSH
75856: LD_INT 27
75858: PUSH
75859: EMPTY
75860: LIST
75861: LIST
75862: PUSH
75863: EMPTY
75864: LIST
75865: LIST
75866: PUSH
75867: LD_INT 42
75869: PUSH
75870: LD_INT 43
75872: PUSH
75873: EMPTY
75874: LIST
75875: LIST
75876: PUSH
75877: LD_INT 44
75879: PUSH
75880: LD_INT 46
75882: PUSH
75883: EMPTY
75884: LIST
75885: LIST
75886: PUSH
75887: LD_INT 45
75889: PUSH
75890: LD_INT 47
75892: PUSH
75893: EMPTY
75894: LIST
75895: LIST
75896: PUSH
75897: EMPTY
75898: LIST
75899: LIST
75900: LIST
75901: PUSH
75902: EMPTY
75903: LIST
75904: LIST
75905: LIST
75906: ST_TO_ADDR
// result := [ ] ;
75907: LD_ADDR_VAR 0 3
75911: PUSH
75912: EMPTY
75913: ST_TO_ADDR
// for i in turrets do
75914: LD_ADDR_VAR 0 4
75918: PUSH
75919: LD_VAR 0 1
75923: PUSH
75924: FOR_IN
75925: IFFALSE 76108
// begin nat := GetNation ( i ) ;
75927: LD_ADDR_VAR 0 7
75931: PUSH
75932: LD_VAR 0 4
75936: PPUSH
75937: CALL_OW 248
75941: ST_TO_ADDR
// weapon := 0 ;
75942: LD_ADDR_VAR 0 8
75946: PUSH
75947: LD_INT 0
75949: ST_TO_ADDR
// if not nat then
75950: LD_VAR 0 7
75954: NOT
75955: IFFALSE 75959
// continue ;
75957: GO 75924
// for j in list [ nat ] do
75959: LD_ADDR_VAR 0 5
75963: PUSH
75964: LD_VAR 0 10
75968: PUSH
75969: LD_VAR 0 7
75973: ARRAY
75974: PUSH
75975: FOR_IN
75976: IFFALSE 76017
// if GetBWeapon ( i ) = j [ 1 ] then
75978: LD_VAR 0 4
75982: PPUSH
75983: CALL_OW 269
75987: PUSH
75988: LD_VAR 0 5
75992: PUSH
75993: LD_INT 1
75995: ARRAY
75996: EQUAL
75997: IFFALSE 76015
// begin weapon := j [ 2 ] ;
75999: LD_ADDR_VAR 0 8
76003: PUSH
76004: LD_VAR 0 5
76008: PUSH
76009: LD_INT 2
76011: ARRAY
76012: ST_TO_ADDR
// break ;
76013: GO 76017
// end ;
76015: GO 75975
76017: POP
76018: POP
// if not weapon then
76019: LD_VAR 0 8
76023: NOT
76024: IFFALSE 76028
// continue ;
76026: GO 75924
// for k in factories do
76028: LD_ADDR_VAR 0 6
76032: PUSH
76033: LD_VAR 0 2
76037: PUSH
76038: FOR_IN
76039: IFFALSE 76104
// begin weapons := AvailableWeaponList ( k ) ;
76041: LD_ADDR_VAR 0 9
76045: PUSH
76046: LD_VAR 0 6
76050: PPUSH
76051: CALL_OW 478
76055: ST_TO_ADDR
// if not weapons then
76056: LD_VAR 0 9
76060: NOT
76061: IFFALSE 76065
// continue ;
76063: GO 76038
// if weapon in weapons then
76065: LD_VAR 0 8
76069: PUSH
76070: LD_VAR 0 9
76074: IN
76075: IFFALSE 76102
// begin result := [ i , weapon ] ;
76077: LD_ADDR_VAR 0 3
76081: PUSH
76082: LD_VAR 0 4
76086: PUSH
76087: LD_VAR 0 8
76091: PUSH
76092: EMPTY
76093: LIST
76094: LIST
76095: ST_TO_ADDR
// exit ;
76096: POP
76097: POP
76098: POP
76099: POP
76100: GO 76110
// end ; end ;
76102: GO 76038
76104: POP
76105: POP
// end ;
76106: GO 75924
76108: POP
76109: POP
// end ;
76110: LD_VAR 0 3
76114: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76115: LD_INT 0
76117: PPUSH
// if not side or side > 8 then
76118: LD_VAR 0 3
76122: NOT
76123: PUSH
76124: LD_VAR 0 3
76128: PUSH
76129: LD_INT 8
76131: GREATER
76132: OR
76133: IFFALSE 76137
// exit ;
76135: GO 76196
// if not range then
76137: LD_VAR 0 4
76141: NOT
76142: IFFALSE 76153
// range := - 12 ;
76144: LD_ADDR_VAR 0 4
76148: PUSH
76149: LD_INT 12
76151: NEG
76152: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76153: LD_VAR 0 1
76157: PPUSH
76158: LD_VAR 0 2
76162: PPUSH
76163: LD_VAR 0 3
76167: PPUSH
76168: LD_VAR 0 4
76172: PPUSH
76173: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76177: LD_VAR 0 1
76181: PPUSH
76182: LD_VAR 0 2
76186: PPUSH
76187: LD_VAR 0 3
76191: PPUSH
76192: CALL_OW 331
// end ;
76196: LD_VAR 0 5
76200: RET
// export function Video ( mode ) ; begin
76201: LD_INT 0
76203: PPUSH
// ingame_video = mode ;
76204: LD_ADDR_OWVAR 52
76208: PUSH
76209: LD_VAR 0 1
76213: ST_TO_ADDR
// interface_hidden = mode ;
76214: LD_ADDR_OWVAR 54
76218: PUSH
76219: LD_VAR 0 1
76223: ST_TO_ADDR
// end ;
76224: LD_VAR 0 2
76228: RET
// export function Join ( array , element ) ; begin
76229: LD_INT 0
76231: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76232: LD_ADDR_VAR 0 3
76236: PUSH
76237: LD_VAR 0 1
76241: PPUSH
76242: LD_VAR 0 1
76246: PUSH
76247: LD_INT 1
76249: PLUS
76250: PPUSH
76251: LD_VAR 0 2
76255: PPUSH
76256: CALL_OW 1
76260: ST_TO_ADDR
// end ;
76261: LD_VAR 0 3
76265: RET
// export function JoinUnion ( array , element ) ; begin
76266: LD_INT 0
76268: PPUSH
// result := array union element ;
76269: LD_ADDR_VAR 0 3
76273: PUSH
76274: LD_VAR 0 1
76278: PUSH
76279: LD_VAR 0 2
76283: UNION
76284: ST_TO_ADDR
// end ;
76285: LD_VAR 0 3
76289: RET
// export function GetBehemoths ( side ) ; begin
76290: LD_INT 0
76292: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
76293: LD_ADDR_VAR 0 2
76297: PUSH
76298: LD_INT 22
76300: PUSH
76301: LD_VAR 0 1
76305: PUSH
76306: EMPTY
76307: LIST
76308: LIST
76309: PUSH
76310: LD_INT 31
76312: PUSH
76313: LD_INT 25
76315: PUSH
76316: EMPTY
76317: LIST
76318: LIST
76319: PUSH
76320: EMPTY
76321: LIST
76322: LIST
76323: PPUSH
76324: CALL_OW 69
76328: ST_TO_ADDR
// end ;
76329: LD_VAR 0 2
76333: RET
// export function Shuffle ( array ) ; var i , index ; begin
76334: LD_INT 0
76336: PPUSH
76337: PPUSH
76338: PPUSH
// result := [ ] ;
76339: LD_ADDR_VAR 0 2
76343: PUSH
76344: EMPTY
76345: ST_TO_ADDR
// if not array then
76346: LD_VAR 0 1
76350: NOT
76351: IFFALSE 76355
// exit ;
76353: GO 76454
// Randomize ;
76355: CALL_OW 10
// for i = array downto 1 do
76359: LD_ADDR_VAR 0 3
76363: PUSH
76364: DOUBLE
76365: LD_VAR 0 1
76369: INC
76370: ST_TO_ADDR
76371: LD_INT 1
76373: PUSH
76374: FOR_DOWNTO
76375: IFFALSE 76452
// begin index := rand ( 1 , array ) ;
76377: LD_ADDR_VAR 0 4
76381: PUSH
76382: LD_INT 1
76384: PPUSH
76385: LD_VAR 0 1
76389: PPUSH
76390: CALL_OW 12
76394: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76395: LD_ADDR_VAR 0 2
76399: PUSH
76400: LD_VAR 0 2
76404: PPUSH
76405: LD_VAR 0 2
76409: PUSH
76410: LD_INT 1
76412: PLUS
76413: PPUSH
76414: LD_VAR 0 1
76418: PUSH
76419: LD_VAR 0 4
76423: ARRAY
76424: PPUSH
76425: CALL_OW 2
76429: ST_TO_ADDR
// array := Delete ( array , index ) ;
76430: LD_ADDR_VAR 0 1
76434: PUSH
76435: LD_VAR 0 1
76439: PPUSH
76440: LD_VAR 0 4
76444: PPUSH
76445: CALL_OW 3
76449: ST_TO_ADDR
// end ;
76450: GO 76374
76452: POP
76453: POP
// end ;
76454: LD_VAR 0 2
76458: RET
// export function GetBaseMaterials ( base ) ; begin
76459: LD_INT 0
76461: PPUSH
// result := [ 0 , 0 , 0 ] ;
76462: LD_ADDR_VAR 0 2
76466: PUSH
76467: LD_INT 0
76469: PUSH
76470: LD_INT 0
76472: PUSH
76473: LD_INT 0
76475: PUSH
76476: EMPTY
76477: LIST
76478: LIST
76479: LIST
76480: ST_TO_ADDR
// if not base then
76481: LD_VAR 0 1
76485: NOT
76486: IFFALSE 76490
// exit ;
76488: GO 76539
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76490: LD_ADDR_VAR 0 2
76494: PUSH
76495: LD_VAR 0 1
76499: PPUSH
76500: LD_INT 1
76502: PPUSH
76503: CALL_OW 275
76507: PUSH
76508: LD_VAR 0 1
76512: PPUSH
76513: LD_INT 2
76515: PPUSH
76516: CALL_OW 275
76520: PUSH
76521: LD_VAR 0 1
76525: PPUSH
76526: LD_INT 3
76528: PPUSH
76529: CALL_OW 275
76533: PUSH
76534: EMPTY
76535: LIST
76536: LIST
76537: LIST
76538: ST_TO_ADDR
// end ;
76539: LD_VAR 0 2
76543: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76544: LD_INT 0
76546: PPUSH
76547: PPUSH
// result := array ;
76548: LD_ADDR_VAR 0 3
76552: PUSH
76553: LD_VAR 0 1
76557: ST_TO_ADDR
// if size >= result then
76558: LD_VAR 0 2
76562: PUSH
76563: LD_VAR 0 3
76567: GREATEREQUAL
76568: IFFALSE 76572
// exit ;
76570: GO 76622
// if size then
76572: LD_VAR 0 2
76576: IFFALSE 76622
// for i := array downto size do
76578: LD_ADDR_VAR 0 4
76582: PUSH
76583: DOUBLE
76584: LD_VAR 0 1
76588: INC
76589: ST_TO_ADDR
76590: LD_VAR 0 2
76594: PUSH
76595: FOR_DOWNTO
76596: IFFALSE 76620
// result := Delete ( result , result ) ;
76598: LD_ADDR_VAR 0 3
76602: PUSH
76603: LD_VAR 0 3
76607: PPUSH
76608: LD_VAR 0 3
76612: PPUSH
76613: CALL_OW 3
76617: ST_TO_ADDR
76618: GO 76595
76620: POP
76621: POP
// end ;
76622: LD_VAR 0 3
76626: RET
// export function ComExit ( unit ) ; var tmp ; begin
76627: LD_INT 0
76629: PPUSH
76630: PPUSH
// if not IsInUnit ( unit ) then
76631: LD_VAR 0 1
76635: PPUSH
76636: CALL_OW 310
76640: NOT
76641: IFFALSE 76645
// exit ;
76643: GO 76705
// tmp := IsInUnit ( unit ) ;
76645: LD_ADDR_VAR 0 3
76649: PUSH
76650: LD_VAR 0 1
76654: PPUSH
76655: CALL_OW 310
76659: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76660: LD_VAR 0 3
76664: PPUSH
76665: CALL_OW 247
76669: PUSH
76670: LD_INT 2
76672: EQUAL
76673: IFFALSE 76686
// ComExitVehicle ( unit ) else
76675: LD_VAR 0 1
76679: PPUSH
76680: CALL_OW 121
76684: GO 76695
// ComExitBuilding ( unit ) ;
76686: LD_VAR 0 1
76690: PPUSH
76691: CALL_OW 122
// result := tmp ;
76695: LD_ADDR_VAR 0 2
76699: PUSH
76700: LD_VAR 0 3
76704: ST_TO_ADDR
// end ;
76705: LD_VAR 0 2
76709: RET
// export function ComExitAll ( units ) ; var i ; begin
76710: LD_INT 0
76712: PPUSH
76713: PPUSH
// if not units then
76714: LD_VAR 0 1
76718: NOT
76719: IFFALSE 76723
// exit ;
76721: GO 76749
// for i in units do
76723: LD_ADDR_VAR 0 3
76727: PUSH
76728: LD_VAR 0 1
76732: PUSH
76733: FOR_IN
76734: IFFALSE 76747
// ComExit ( i ) ;
76736: LD_VAR 0 3
76740: PPUSH
76741: CALL 76627 0 1
76745: GO 76733
76747: POP
76748: POP
// end ;
76749: LD_VAR 0 2
76753: RET
// export function ResetHc ; begin
76754: LD_INT 0
76756: PPUSH
// InitHc ;
76757: CALL_OW 19
// hc_importance := 0 ;
76761: LD_ADDR_OWVAR 32
76765: PUSH
76766: LD_INT 0
76768: ST_TO_ADDR
// end ;
76769: LD_VAR 0 1
76773: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76774: LD_INT 0
76776: PPUSH
76777: PPUSH
76778: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76779: LD_ADDR_VAR 0 6
76783: PUSH
76784: LD_VAR 0 1
76788: PUSH
76789: LD_VAR 0 3
76793: PLUS
76794: PUSH
76795: LD_INT 2
76797: DIV
76798: ST_TO_ADDR
// if _x < 0 then
76799: LD_VAR 0 6
76803: PUSH
76804: LD_INT 0
76806: LESS
76807: IFFALSE 76824
// _x := _x * - 1 ;
76809: LD_ADDR_VAR 0 6
76813: PUSH
76814: LD_VAR 0 6
76818: PUSH
76819: LD_INT 1
76821: NEG
76822: MUL
76823: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76824: LD_ADDR_VAR 0 7
76828: PUSH
76829: LD_VAR 0 2
76833: PUSH
76834: LD_VAR 0 4
76838: PLUS
76839: PUSH
76840: LD_INT 2
76842: DIV
76843: ST_TO_ADDR
// if _y < 0 then
76844: LD_VAR 0 7
76848: PUSH
76849: LD_INT 0
76851: LESS
76852: IFFALSE 76869
// _y := _y * - 1 ;
76854: LD_ADDR_VAR 0 7
76858: PUSH
76859: LD_VAR 0 7
76863: PUSH
76864: LD_INT 1
76866: NEG
76867: MUL
76868: ST_TO_ADDR
// result := [ _x , _y ] ;
76869: LD_ADDR_VAR 0 5
76873: PUSH
76874: LD_VAR 0 6
76878: PUSH
76879: LD_VAR 0 7
76883: PUSH
76884: EMPTY
76885: LIST
76886: LIST
76887: ST_TO_ADDR
// end ;
76888: LD_VAR 0 5
76892: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76893: LD_INT 0
76895: PPUSH
76896: PPUSH
76897: PPUSH
76898: PPUSH
// task := GetTaskList ( unit ) ;
76899: LD_ADDR_VAR 0 7
76903: PUSH
76904: LD_VAR 0 1
76908: PPUSH
76909: CALL_OW 437
76913: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76914: LD_VAR 0 7
76918: NOT
76919: PUSH
76920: LD_VAR 0 1
76924: PPUSH
76925: LD_VAR 0 2
76929: PPUSH
76930: CALL_OW 308
76934: NOT
76935: AND
76936: IFFALSE 76940
// exit ;
76938: GO 77058
// if IsInArea ( unit , area ) then
76940: LD_VAR 0 1
76944: PPUSH
76945: LD_VAR 0 2
76949: PPUSH
76950: CALL_OW 308
76954: IFFALSE 76972
// begin ComMoveToArea ( unit , goAway ) ;
76956: LD_VAR 0 1
76960: PPUSH
76961: LD_VAR 0 3
76965: PPUSH
76966: CALL_OW 113
// exit ;
76970: GO 77058
// end ; if task [ 1 ] [ 1 ] <> M then
76972: LD_VAR 0 7
76976: PUSH
76977: LD_INT 1
76979: ARRAY
76980: PUSH
76981: LD_INT 1
76983: ARRAY
76984: PUSH
76985: LD_STRING M
76987: NONEQUAL
76988: IFFALSE 76992
// exit ;
76990: GO 77058
// x := task [ 1 ] [ 2 ] ;
76992: LD_ADDR_VAR 0 5
76996: PUSH
76997: LD_VAR 0 7
77001: PUSH
77002: LD_INT 1
77004: ARRAY
77005: PUSH
77006: LD_INT 2
77008: ARRAY
77009: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77010: LD_ADDR_VAR 0 6
77014: PUSH
77015: LD_VAR 0 7
77019: PUSH
77020: LD_INT 1
77022: ARRAY
77023: PUSH
77024: LD_INT 3
77026: ARRAY
77027: ST_TO_ADDR
// if InArea ( x , y , area ) then
77028: LD_VAR 0 5
77032: PPUSH
77033: LD_VAR 0 6
77037: PPUSH
77038: LD_VAR 0 2
77042: PPUSH
77043: CALL_OW 309
77047: IFFALSE 77058
// ComStop ( unit ) ;
77049: LD_VAR 0 1
77053: PPUSH
77054: CALL_OW 141
// end ;
77058: LD_VAR 0 4
77062: RET
// export function Abs ( value ) ; begin
77063: LD_INT 0
77065: PPUSH
// result := value ;
77066: LD_ADDR_VAR 0 2
77070: PUSH
77071: LD_VAR 0 1
77075: ST_TO_ADDR
// if value < 0 then
77076: LD_VAR 0 1
77080: PUSH
77081: LD_INT 0
77083: LESS
77084: IFFALSE 77101
// result := value * - 1 ;
77086: LD_ADDR_VAR 0 2
77090: PUSH
77091: LD_VAR 0 1
77095: PUSH
77096: LD_INT 1
77098: NEG
77099: MUL
77100: ST_TO_ADDR
// end ;
77101: LD_VAR 0 2
77105: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77106: LD_INT 0
77108: PPUSH
77109: PPUSH
77110: PPUSH
77111: PPUSH
77112: PPUSH
77113: PPUSH
77114: PPUSH
77115: PPUSH
// if not unit or not building then
77116: LD_VAR 0 1
77120: NOT
77121: PUSH
77122: LD_VAR 0 2
77126: NOT
77127: OR
77128: IFFALSE 77132
// exit ;
77130: GO 77358
// x := GetX ( building ) ;
77132: LD_ADDR_VAR 0 4
77136: PUSH
77137: LD_VAR 0 2
77141: PPUSH
77142: CALL_OW 250
77146: ST_TO_ADDR
// y := GetY ( building ) ;
77147: LD_ADDR_VAR 0 6
77151: PUSH
77152: LD_VAR 0 2
77156: PPUSH
77157: CALL_OW 251
77161: ST_TO_ADDR
// d := GetDir ( building ) ;
77162: LD_ADDR_VAR 0 8
77166: PUSH
77167: LD_VAR 0 2
77171: PPUSH
77172: CALL_OW 254
77176: ST_TO_ADDR
// r := 4 ;
77177: LD_ADDR_VAR 0 9
77181: PUSH
77182: LD_INT 4
77184: ST_TO_ADDR
// for i := 1 to 5 do
77185: LD_ADDR_VAR 0 10
77189: PUSH
77190: DOUBLE
77191: LD_INT 1
77193: DEC
77194: ST_TO_ADDR
77195: LD_INT 5
77197: PUSH
77198: FOR_TO
77199: IFFALSE 77356
// begin _x := ShiftX ( x , d , r + i ) ;
77201: LD_ADDR_VAR 0 5
77205: PUSH
77206: LD_VAR 0 4
77210: PPUSH
77211: LD_VAR 0 8
77215: PPUSH
77216: LD_VAR 0 9
77220: PUSH
77221: LD_VAR 0 10
77225: PLUS
77226: PPUSH
77227: CALL_OW 272
77231: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77232: LD_ADDR_VAR 0 7
77236: PUSH
77237: LD_VAR 0 6
77241: PPUSH
77242: LD_VAR 0 8
77246: PPUSH
77247: LD_VAR 0 9
77251: PUSH
77252: LD_VAR 0 10
77256: PLUS
77257: PPUSH
77258: CALL_OW 273
77262: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77263: LD_VAR 0 5
77267: PPUSH
77268: LD_VAR 0 7
77272: PPUSH
77273: CALL_OW 488
77277: PUSH
77278: LD_VAR 0 5
77282: PPUSH
77283: LD_VAR 0 7
77287: PPUSH
77288: CALL_OW 428
77292: PPUSH
77293: CALL_OW 247
77297: PUSH
77298: LD_INT 3
77300: PUSH
77301: LD_INT 2
77303: PUSH
77304: EMPTY
77305: LIST
77306: LIST
77307: IN
77308: NOT
77309: AND
77310: IFFALSE 77354
// begin ComMoveXY ( unit , _x , _y ) ;
77312: LD_VAR 0 1
77316: PPUSH
77317: LD_VAR 0 5
77321: PPUSH
77322: LD_VAR 0 7
77326: PPUSH
77327: CALL_OW 111
// result := [ _x , _y ] ;
77331: LD_ADDR_VAR 0 3
77335: PUSH
77336: LD_VAR 0 5
77340: PUSH
77341: LD_VAR 0 7
77345: PUSH
77346: EMPTY
77347: LIST
77348: LIST
77349: ST_TO_ADDR
// exit ;
77350: POP
77351: POP
77352: GO 77358
// end ; end ;
77354: GO 77198
77356: POP
77357: POP
// end ;
77358: LD_VAR 0 3
77362: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77363: LD_INT 0
77365: PPUSH
77366: PPUSH
77367: PPUSH
// result := 0 ;
77368: LD_ADDR_VAR 0 3
77372: PUSH
77373: LD_INT 0
77375: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77376: LD_VAR 0 1
77380: PUSH
77381: LD_INT 0
77383: LESS
77384: PUSH
77385: LD_VAR 0 1
77389: PUSH
77390: LD_INT 8
77392: GREATER
77393: OR
77394: PUSH
77395: LD_VAR 0 2
77399: PUSH
77400: LD_INT 0
77402: LESS
77403: OR
77404: PUSH
77405: LD_VAR 0 2
77409: PUSH
77410: LD_INT 8
77412: GREATER
77413: OR
77414: IFFALSE 77418
// exit ;
77416: GO 77493
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77418: LD_ADDR_VAR 0 4
77422: PUSH
77423: LD_INT 22
77425: PUSH
77426: LD_VAR 0 2
77430: PUSH
77431: EMPTY
77432: LIST
77433: LIST
77434: PPUSH
77435: CALL_OW 69
77439: PUSH
77440: FOR_IN
77441: IFFALSE 77491
// begin un := UnitShoot ( i ) ;
77443: LD_ADDR_VAR 0 5
77447: PUSH
77448: LD_VAR 0 4
77452: PPUSH
77453: CALL_OW 504
77457: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77458: LD_VAR 0 5
77462: PPUSH
77463: CALL_OW 255
77467: PUSH
77468: LD_VAR 0 1
77472: EQUAL
77473: IFFALSE 77489
// begin result := un ;
77475: LD_ADDR_VAR 0 3
77479: PUSH
77480: LD_VAR 0 5
77484: ST_TO_ADDR
// exit ;
77485: POP
77486: POP
77487: GO 77493
// end ; end ;
77489: GO 77440
77491: POP
77492: POP
// end ;
77493: LD_VAR 0 3
77497: RET
// export function GetCargoBay ( units ) ; begin
77498: LD_INT 0
77500: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77501: LD_ADDR_VAR 0 2
77505: PUSH
77506: LD_VAR 0 1
77510: PPUSH
77511: LD_INT 2
77513: PUSH
77514: LD_INT 34
77516: PUSH
77517: LD_INT 12
77519: PUSH
77520: EMPTY
77521: LIST
77522: LIST
77523: PUSH
77524: LD_INT 34
77526: PUSH
77527: LD_INT 51
77529: PUSH
77530: EMPTY
77531: LIST
77532: LIST
77533: PUSH
77534: LD_INT 34
77536: PUSH
77537: LD_INT 32
77539: PUSH
77540: EMPTY
77541: LIST
77542: LIST
77543: PUSH
77544: LD_INT 34
77546: PUSH
77547: LD_EXP 46
77551: PUSH
77552: EMPTY
77553: LIST
77554: LIST
77555: PUSH
77556: EMPTY
77557: LIST
77558: LIST
77559: LIST
77560: LIST
77561: LIST
77562: PPUSH
77563: CALL_OW 72
77567: ST_TO_ADDR
// end ;
77568: LD_VAR 0 2
77572: RET
// export function Negate ( value ) ; begin
77573: LD_INT 0
77575: PPUSH
// result := not value ;
77576: LD_ADDR_VAR 0 2
77580: PUSH
77581: LD_VAR 0 1
77585: NOT
77586: ST_TO_ADDR
// end ;
77587: LD_VAR 0 2
77591: RET
// export function Inc ( value ) ; begin
77592: LD_INT 0
77594: PPUSH
// result := value + 1 ;
77595: LD_ADDR_VAR 0 2
77599: PUSH
77600: LD_VAR 0 1
77604: PUSH
77605: LD_INT 1
77607: PLUS
77608: ST_TO_ADDR
// end ;
77609: LD_VAR 0 2
77613: RET
// export function Dec ( value ) ; begin
77614: LD_INT 0
77616: PPUSH
// result := value - 1 ;
77617: LD_ADDR_VAR 0 2
77621: PUSH
77622: LD_VAR 0 1
77626: PUSH
77627: LD_INT 1
77629: MINUS
77630: ST_TO_ADDR
// end ;
77631: LD_VAR 0 2
77635: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77636: LD_INT 0
77638: PPUSH
77639: PPUSH
77640: PPUSH
77641: PPUSH
77642: PPUSH
77643: PPUSH
77644: PPUSH
77645: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77646: LD_VAR 0 1
77650: PPUSH
77651: LD_VAR 0 2
77655: PPUSH
77656: CALL_OW 488
77660: NOT
77661: PUSH
77662: LD_VAR 0 3
77666: PPUSH
77667: LD_VAR 0 4
77671: PPUSH
77672: CALL_OW 488
77676: NOT
77677: OR
77678: IFFALSE 77691
// begin result := - 1 ;
77680: LD_ADDR_VAR 0 5
77684: PUSH
77685: LD_INT 1
77687: NEG
77688: ST_TO_ADDR
// exit ;
77689: GO 77926
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
77691: LD_ADDR_VAR 0 12
77695: PUSH
77696: LD_VAR 0 1
77700: PPUSH
77701: LD_VAR 0 2
77705: PPUSH
77706: LD_VAR 0 3
77710: PPUSH
77711: LD_VAR 0 4
77715: PPUSH
77716: CALL 76774 0 4
77720: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
77721: LD_ADDR_VAR 0 11
77725: PUSH
77726: LD_VAR 0 1
77730: PPUSH
77731: LD_VAR 0 2
77735: PPUSH
77736: LD_VAR 0 12
77740: PUSH
77741: LD_INT 1
77743: ARRAY
77744: PPUSH
77745: LD_VAR 0 12
77749: PUSH
77750: LD_INT 2
77752: ARRAY
77753: PPUSH
77754: CALL_OW 298
77758: ST_TO_ADDR
// distance := 9999 ;
77759: LD_ADDR_VAR 0 10
77763: PUSH
77764: LD_INT 9999
77766: ST_TO_ADDR
// for i := 0 to 5 do
77767: LD_ADDR_VAR 0 6
77771: PUSH
77772: DOUBLE
77773: LD_INT 0
77775: DEC
77776: ST_TO_ADDR
77777: LD_INT 5
77779: PUSH
77780: FOR_TO
77781: IFFALSE 77924
// begin _x := ShiftX ( x1 , i , centerDist ) ;
77783: LD_ADDR_VAR 0 7
77787: PUSH
77788: LD_VAR 0 1
77792: PPUSH
77793: LD_VAR 0 6
77797: PPUSH
77798: LD_VAR 0 11
77802: PPUSH
77803: CALL_OW 272
77807: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
77808: LD_ADDR_VAR 0 8
77812: PUSH
77813: LD_VAR 0 2
77817: PPUSH
77818: LD_VAR 0 6
77822: PPUSH
77823: LD_VAR 0 11
77827: PPUSH
77828: CALL_OW 273
77832: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77833: LD_VAR 0 7
77837: PPUSH
77838: LD_VAR 0 8
77842: PPUSH
77843: CALL_OW 488
77847: NOT
77848: IFFALSE 77852
// continue ;
77850: GO 77780
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
77852: LD_ADDR_VAR 0 9
77856: PUSH
77857: LD_VAR 0 12
77861: PUSH
77862: LD_INT 1
77864: ARRAY
77865: PPUSH
77866: LD_VAR 0 12
77870: PUSH
77871: LD_INT 2
77873: ARRAY
77874: PPUSH
77875: LD_VAR 0 7
77879: PPUSH
77880: LD_VAR 0 8
77884: PPUSH
77885: CALL_OW 298
77889: ST_TO_ADDR
// if tmp < distance then
77890: LD_VAR 0 9
77894: PUSH
77895: LD_VAR 0 10
77899: LESS
77900: IFFALSE 77922
// begin result := i ;
77902: LD_ADDR_VAR 0 5
77906: PUSH
77907: LD_VAR 0 6
77911: ST_TO_ADDR
// distance := tmp ;
77912: LD_ADDR_VAR 0 10
77916: PUSH
77917: LD_VAR 0 9
77921: ST_TO_ADDR
// end ; end ;
77922: GO 77780
77924: POP
77925: POP
// end ;
77926: LD_VAR 0 5
77930: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77931: LD_INT 0
77933: PPUSH
77934: PPUSH
// if not driver or not IsInUnit ( driver ) then
77935: LD_VAR 0 1
77939: NOT
77940: PUSH
77941: LD_VAR 0 1
77945: PPUSH
77946: CALL_OW 310
77950: NOT
77951: OR
77952: IFFALSE 77956
// exit ;
77954: GO 78046
// vehicle := IsInUnit ( driver ) ;
77956: LD_ADDR_VAR 0 3
77960: PUSH
77961: LD_VAR 0 1
77965: PPUSH
77966: CALL_OW 310
77970: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77971: LD_VAR 0 1
77975: PPUSH
77976: LD_STRING \
77978: PUSH
77979: LD_INT 0
77981: PUSH
77982: LD_INT 0
77984: PUSH
77985: LD_INT 0
77987: PUSH
77988: LD_INT 0
77990: PUSH
77991: LD_INT 0
77993: PUSH
77994: LD_INT 0
77996: PUSH
77997: EMPTY
77998: LIST
77999: LIST
78000: LIST
78001: LIST
78002: LIST
78003: LIST
78004: LIST
78005: PUSH
78006: LD_STRING E
78008: PUSH
78009: LD_INT 0
78011: PUSH
78012: LD_INT 0
78014: PUSH
78015: LD_VAR 0 3
78019: PUSH
78020: LD_INT 0
78022: PUSH
78023: LD_INT 0
78025: PUSH
78026: LD_INT 0
78028: PUSH
78029: EMPTY
78030: LIST
78031: LIST
78032: LIST
78033: LIST
78034: LIST
78035: LIST
78036: LIST
78037: PUSH
78038: EMPTY
78039: LIST
78040: LIST
78041: PPUSH
78042: CALL_OW 446
// end ;
78046: LD_VAR 0 2
78050: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78051: LD_INT 0
78053: PPUSH
78054: PPUSH
// if not driver or not IsInUnit ( driver ) then
78055: LD_VAR 0 1
78059: NOT
78060: PUSH
78061: LD_VAR 0 1
78065: PPUSH
78066: CALL_OW 310
78070: NOT
78071: OR
78072: IFFALSE 78076
// exit ;
78074: GO 78166
// vehicle := IsInUnit ( driver ) ;
78076: LD_ADDR_VAR 0 3
78080: PUSH
78081: LD_VAR 0 1
78085: PPUSH
78086: CALL_OW 310
78090: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78091: LD_VAR 0 1
78095: PPUSH
78096: LD_STRING \
78098: PUSH
78099: LD_INT 0
78101: PUSH
78102: LD_INT 0
78104: PUSH
78105: LD_INT 0
78107: PUSH
78108: LD_INT 0
78110: PUSH
78111: LD_INT 0
78113: PUSH
78114: LD_INT 0
78116: PUSH
78117: EMPTY
78118: LIST
78119: LIST
78120: LIST
78121: LIST
78122: LIST
78123: LIST
78124: LIST
78125: PUSH
78126: LD_STRING E
78128: PUSH
78129: LD_INT 0
78131: PUSH
78132: LD_INT 0
78134: PUSH
78135: LD_VAR 0 3
78139: PUSH
78140: LD_INT 0
78142: PUSH
78143: LD_INT 0
78145: PUSH
78146: LD_INT 0
78148: PUSH
78149: EMPTY
78150: LIST
78151: LIST
78152: LIST
78153: LIST
78154: LIST
78155: LIST
78156: LIST
78157: PUSH
78158: EMPTY
78159: LIST
78160: LIST
78161: PPUSH
78162: CALL_OW 447
// end ;
78166: LD_VAR 0 2
78170: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78171: LD_INT 0
78173: PPUSH
78174: PPUSH
78175: PPUSH
// tmp := [ ] ;
78176: LD_ADDR_VAR 0 5
78180: PUSH
78181: EMPTY
78182: ST_TO_ADDR
// for i in units do
78183: LD_ADDR_VAR 0 4
78187: PUSH
78188: LD_VAR 0 1
78192: PUSH
78193: FOR_IN
78194: IFFALSE 78232
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78196: LD_ADDR_VAR 0 5
78200: PUSH
78201: LD_VAR 0 5
78205: PPUSH
78206: LD_VAR 0 5
78210: PUSH
78211: LD_INT 1
78213: PLUS
78214: PPUSH
78215: LD_VAR 0 4
78219: PPUSH
78220: CALL_OW 256
78224: PPUSH
78225: CALL_OW 2
78229: ST_TO_ADDR
78230: GO 78193
78232: POP
78233: POP
// if not tmp then
78234: LD_VAR 0 5
78238: NOT
78239: IFFALSE 78243
// exit ;
78241: GO 78291
// if asc then
78243: LD_VAR 0 2
78247: IFFALSE 78271
// result := SortListByListAsc ( units , tmp ) else
78249: LD_ADDR_VAR 0 3
78253: PUSH
78254: LD_VAR 0 1
78258: PPUSH
78259: LD_VAR 0 5
78263: PPUSH
78264: CALL_OW 76
78268: ST_TO_ADDR
78269: GO 78291
// result := SortListByListDesc ( units , tmp ) ;
78271: LD_ADDR_VAR 0 3
78275: PUSH
78276: LD_VAR 0 1
78280: PPUSH
78281: LD_VAR 0 5
78285: PPUSH
78286: CALL_OW 77
78290: ST_TO_ADDR
// end ;
78291: LD_VAR 0 3
78295: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78296: LD_INT 0
78298: PPUSH
78299: PPUSH
// task := GetTaskList ( mech ) ;
78300: LD_ADDR_VAR 0 4
78304: PUSH
78305: LD_VAR 0 1
78309: PPUSH
78310: CALL_OW 437
78314: ST_TO_ADDR
// if not task then
78315: LD_VAR 0 4
78319: NOT
78320: IFFALSE 78324
// exit ;
78322: GO 78366
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78324: LD_ADDR_VAR 0 3
78328: PUSH
78329: LD_VAR 0 4
78333: PUSH
78334: LD_INT 1
78336: ARRAY
78337: PUSH
78338: LD_INT 1
78340: ARRAY
78341: PUSH
78342: LD_STRING r
78344: EQUAL
78345: PUSH
78346: LD_VAR 0 4
78350: PUSH
78351: LD_INT 1
78353: ARRAY
78354: PUSH
78355: LD_INT 4
78357: ARRAY
78358: PUSH
78359: LD_VAR 0 2
78363: EQUAL
78364: AND
78365: ST_TO_ADDR
// end ;
78366: LD_VAR 0 3
78370: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78371: LD_INT 0
78373: PPUSH
// SetDir ( unit , d ) ;
78374: LD_VAR 0 1
78378: PPUSH
78379: LD_VAR 0 4
78383: PPUSH
78384: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
78388: LD_VAR 0 1
78392: PPUSH
78393: LD_VAR 0 2
78397: PPUSH
78398: LD_VAR 0 3
78402: PPUSH
78403: LD_VAR 0 5
78407: PPUSH
78408: CALL_OW 48
// end ;
78412: LD_VAR 0 6
78416: RET
// export function ToNaturalNumber ( number ) ; begin
78417: LD_INT 0
78419: PPUSH
// result := number div 1 ;
78420: LD_ADDR_VAR 0 2
78424: PUSH
78425: LD_VAR 0 1
78429: PUSH
78430: LD_INT 1
78432: DIV
78433: ST_TO_ADDR
// if number < 0 then
78434: LD_VAR 0 1
78438: PUSH
78439: LD_INT 0
78441: LESS
78442: IFFALSE 78452
// result := 0 ;
78444: LD_ADDR_VAR 0 2
78448: PUSH
78449: LD_INT 0
78451: ST_TO_ADDR
// end ;
78452: LD_VAR 0 2
78456: RET
// export function SortByClass ( units , class ) ; var un ; begin
78457: LD_INT 0
78459: PPUSH
78460: PPUSH
// if not units or not class then
78461: LD_VAR 0 1
78465: NOT
78466: PUSH
78467: LD_VAR 0 2
78471: NOT
78472: OR
78473: IFFALSE 78477
// exit ;
78475: GO 78572
// result := [ ] ;
78477: LD_ADDR_VAR 0 3
78481: PUSH
78482: EMPTY
78483: ST_TO_ADDR
// for un in units do
78484: LD_ADDR_VAR 0 4
78488: PUSH
78489: LD_VAR 0 1
78493: PUSH
78494: FOR_IN
78495: IFFALSE 78570
// if GetClass ( un ) = class then
78497: LD_VAR 0 4
78501: PPUSH
78502: CALL_OW 257
78506: PUSH
78507: LD_VAR 0 2
78511: EQUAL
78512: IFFALSE 78539
// result := Insert ( result , 1 , un ) else
78514: LD_ADDR_VAR 0 3
78518: PUSH
78519: LD_VAR 0 3
78523: PPUSH
78524: LD_INT 1
78526: PPUSH
78527: LD_VAR 0 4
78531: PPUSH
78532: CALL_OW 2
78536: ST_TO_ADDR
78537: GO 78568
// result := Replace ( result , result + 1 , un ) ;
78539: LD_ADDR_VAR 0 3
78543: PUSH
78544: LD_VAR 0 3
78548: PPUSH
78549: LD_VAR 0 3
78553: PUSH
78554: LD_INT 1
78556: PLUS
78557: PPUSH
78558: LD_VAR 0 4
78562: PPUSH
78563: CALL_OW 1
78567: ST_TO_ADDR
78568: GO 78494
78570: POP
78571: POP
// end ;
78572: LD_VAR 0 3
78576: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78577: LD_INT 0
78579: PPUSH
78580: PPUSH
78581: PPUSH
78582: PPUSH
78583: PPUSH
78584: PPUSH
78585: PPUSH
// result := [ ] ;
78586: LD_ADDR_VAR 0 4
78590: PUSH
78591: EMPTY
78592: ST_TO_ADDR
// if x - r < 0 then
78593: LD_VAR 0 1
78597: PUSH
78598: LD_VAR 0 3
78602: MINUS
78603: PUSH
78604: LD_INT 0
78606: LESS
78607: IFFALSE 78619
// min_x := 0 else
78609: LD_ADDR_VAR 0 8
78613: PUSH
78614: LD_INT 0
78616: ST_TO_ADDR
78617: GO 78635
// min_x := x - r ;
78619: LD_ADDR_VAR 0 8
78623: PUSH
78624: LD_VAR 0 1
78628: PUSH
78629: LD_VAR 0 3
78633: MINUS
78634: ST_TO_ADDR
// if y - r < 0 then
78635: LD_VAR 0 2
78639: PUSH
78640: LD_VAR 0 3
78644: MINUS
78645: PUSH
78646: LD_INT 0
78648: LESS
78649: IFFALSE 78661
// min_y := 0 else
78651: LD_ADDR_VAR 0 7
78655: PUSH
78656: LD_INT 0
78658: ST_TO_ADDR
78659: GO 78677
// min_y := y - r ;
78661: LD_ADDR_VAR 0 7
78665: PUSH
78666: LD_VAR 0 2
78670: PUSH
78671: LD_VAR 0 3
78675: MINUS
78676: ST_TO_ADDR
// max_x := x + r ;
78677: LD_ADDR_VAR 0 9
78681: PUSH
78682: LD_VAR 0 1
78686: PUSH
78687: LD_VAR 0 3
78691: PLUS
78692: ST_TO_ADDR
// max_y := y + r ;
78693: LD_ADDR_VAR 0 10
78697: PUSH
78698: LD_VAR 0 2
78702: PUSH
78703: LD_VAR 0 3
78707: PLUS
78708: ST_TO_ADDR
// for _x = min_x to max_x do
78709: LD_ADDR_VAR 0 5
78713: PUSH
78714: DOUBLE
78715: LD_VAR 0 8
78719: DEC
78720: ST_TO_ADDR
78721: LD_VAR 0 9
78725: PUSH
78726: FOR_TO
78727: IFFALSE 78828
// for _y = min_y to max_y do
78729: LD_ADDR_VAR 0 6
78733: PUSH
78734: DOUBLE
78735: LD_VAR 0 7
78739: DEC
78740: ST_TO_ADDR
78741: LD_VAR 0 10
78745: PUSH
78746: FOR_TO
78747: IFFALSE 78824
// begin if not ValidHex ( _x , _y ) then
78749: LD_VAR 0 5
78753: PPUSH
78754: LD_VAR 0 6
78758: PPUSH
78759: CALL_OW 488
78763: NOT
78764: IFFALSE 78768
// continue ;
78766: GO 78746
// if GetResourceTypeXY ( _x , _y ) then
78768: LD_VAR 0 5
78772: PPUSH
78773: LD_VAR 0 6
78777: PPUSH
78778: CALL_OW 283
78782: IFFALSE 78822
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
78784: LD_ADDR_VAR 0 4
78788: PUSH
78789: LD_VAR 0 4
78793: PPUSH
78794: LD_VAR 0 4
78798: PUSH
78799: LD_INT 1
78801: PLUS
78802: PPUSH
78803: LD_VAR 0 5
78807: PUSH
78808: LD_VAR 0 6
78812: PUSH
78813: EMPTY
78814: LIST
78815: LIST
78816: PPUSH
78817: CALL_OW 1
78821: ST_TO_ADDR
// end ;
78822: GO 78746
78824: POP
78825: POP
78826: GO 78726
78828: POP
78829: POP
// end ;
78830: LD_VAR 0 4
78834: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
78835: LD_INT 0
78837: PPUSH
78838: PPUSH
78839: PPUSH
78840: PPUSH
78841: PPUSH
78842: PPUSH
78843: PPUSH
78844: PPUSH
// if not units then
78845: LD_VAR 0 1
78849: NOT
78850: IFFALSE 78854
// exit ;
78852: GO 79380
// result := UnitFilter ( units , [ f_ok ] ) ;
78854: LD_ADDR_VAR 0 3
78858: PUSH
78859: LD_VAR 0 1
78863: PPUSH
78864: LD_INT 50
78866: PUSH
78867: EMPTY
78868: LIST
78869: PPUSH
78870: CALL_OW 72
78874: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
78875: LD_ADDR_VAR 0 8
78879: PUSH
78880: LD_VAR 0 1
78884: PUSH
78885: LD_INT 1
78887: ARRAY
78888: PPUSH
78889: CALL_OW 255
78893: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
78894: LD_ADDR_VAR 0 10
78898: PUSH
78899: LD_INT 29
78901: PUSH
78902: LD_EXP 49
78906: PUSH
78907: LD_INT 49
78909: PUSH
78910: EMPTY
78911: LIST
78912: LIST
78913: LIST
78914: ST_TO_ADDR
// if not result then
78915: LD_VAR 0 3
78919: NOT
78920: IFFALSE 78924
// exit ;
78922: GO 79380
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
78924: LD_ADDR_VAR 0 5
78928: PUSH
78929: LD_INT 81
78931: PUSH
78932: LD_VAR 0 8
78936: PUSH
78937: EMPTY
78938: LIST
78939: LIST
78940: PPUSH
78941: CALL_OW 69
78945: ST_TO_ADDR
// for i in result do
78946: LD_ADDR_VAR 0 4
78950: PUSH
78951: LD_VAR 0 3
78955: PUSH
78956: FOR_IN
78957: IFFALSE 79378
// begin tag := GetTag ( i ) + 1 ;
78959: LD_ADDR_VAR 0 9
78963: PUSH
78964: LD_VAR 0 4
78968: PPUSH
78969: CALL_OW 110
78973: PUSH
78974: LD_INT 1
78976: PLUS
78977: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
78978: LD_ADDR_VAR 0 7
78982: PUSH
78983: LD_VAR 0 4
78987: PPUSH
78988: CALL_OW 250
78992: PPUSH
78993: LD_VAR 0 4
78997: PPUSH
78998: CALL_OW 251
79002: PPUSH
79003: LD_INT 6
79005: PPUSH
79006: CALL 78577 0 3
79010: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79011: LD_VAR 0 4
79015: PPUSH
79016: CALL_OW 247
79020: PUSH
79021: LD_INT 2
79023: EQUAL
79024: PUSH
79025: LD_VAR 0 7
79029: AND
79030: PUSH
79031: LD_VAR 0 4
79035: PPUSH
79036: CALL_OW 264
79040: PUSH
79041: LD_VAR 0 10
79045: IN
79046: NOT
79047: AND
79048: IFFALSE 79087
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79050: LD_VAR 0 4
79054: PPUSH
79055: LD_VAR 0 7
79059: PUSH
79060: LD_INT 1
79062: ARRAY
79063: PUSH
79064: LD_INT 1
79066: ARRAY
79067: PPUSH
79068: LD_VAR 0 7
79072: PUSH
79073: LD_INT 1
79075: ARRAY
79076: PUSH
79077: LD_INT 2
79079: ARRAY
79080: PPUSH
79081: CALL_OW 116
79085: GO 79376
// if path > tag then
79087: LD_VAR 0 2
79091: PUSH
79092: LD_VAR 0 9
79096: GREATER
79097: IFFALSE 79305
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79099: LD_ADDR_VAR 0 6
79103: PUSH
79104: LD_VAR 0 5
79108: PPUSH
79109: LD_INT 91
79111: PUSH
79112: LD_VAR 0 4
79116: PUSH
79117: LD_INT 8
79119: PUSH
79120: EMPTY
79121: LIST
79122: LIST
79123: LIST
79124: PPUSH
79125: CALL_OW 72
79129: ST_TO_ADDR
// if nearEnemy then
79130: LD_VAR 0 6
79134: IFFALSE 79203
// begin if GetWeapon ( i ) = ru_time_lapser then
79136: LD_VAR 0 4
79140: PPUSH
79141: CALL_OW 264
79145: PUSH
79146: LD_INT 49
79148: EQUAL
79149: IFFALSE 79177
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79151: LD_VAR 0 4
79155: PPUSH
79156: LD_VAR 0 6
79160: PPUSH
79161: LD_VAR 0 4
79165: PPUSH
79166: CALL_OW 74
79170: PPUSH
79171: CALL_OW 112
79175: GO 79201
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79177: LD_VAR 0 4
79181: PPUSH
79182: LD_VAR 0 6
79186: PPUSH
79187: LD_VAR 0 4
79191: PPUSH
79192: CALL_OW 74
79196: PPUSH
79197: CALL_OW 115
// end else
79201: GO 79303
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79203: LD_VAR 0 4
79207: PPUSH
79208: LD_VAR 0 2
79212: PUSH
79213: LD_VAR 0 9
79217: ARRAY
79218: PUSH
79219: LD_INT 1
79221: ARRAY
79222: PPUSH
79223: LD_VAR 0 2
79227: PUSH
79228: LD_VAR 0 9
79232: ARRAY
79233: PUSH
79234: LD_INT 2
79236: ARRAY
79237: PPUSH
79238: CALL_OW 297
79242: PUSH
79243: LD_INT 6
79245: GREATER
79246: IFFALSE 79289
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79248: LD_VAR 0 4
79252: PPUSH
79253: LD_VAR 0 2
79257: PUSH
79258: LD_VAR 0 9
79262: ARRAY
79263: PUSH
79264: LD_INT 1
79266: ARRAY
79267: PPUSH
79268: LD_VAR 0 2
79272: PUSH
79273: LD_VAR 0 9
79277: ARRAY
79278: PUSH
79279: LD_INT 2
79281: ARRAY
79282: PPUSH
79283: CALL_OW 114
79287: GO 79303
// SetTag ( i , tag ) ;
79289: LD_VAR 0 4
79293: PPUSH
79294: LD_VAR 0 9
79298: PPUSH
79299: CALL_OW 109
// end else
79303: GO 79376
// if enemy then
79305: LD_VAR 0 5
79309: IFFALSE 79376
// begin if GetWeapon ( i ) = ru_time_lapser then
79311: LD_VAR 0 4
79315: PPUSH
79316: CALL_OW 264
79320: PUSH
79321: LD_INT 49
79323: EQUAL
79324: IFFALSE 79352
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79326: LD_VAR 0 4
79330: PPUSH
79331: LD_VAR 0 5
79335: PPUSH
79336: LD_VAR 0 4
79340: PPUSH
79341: CALL_OW 74
79345: PPUSH
79346: CALL_OW 112
79350: GO 79376
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79352: LD_VAR 0 4
79356: PPUSH
79357: LD_VAR 0 5
79361: PPUSH
79362: LD_VAR 0 4
79366: PPUSH
79367: CALL_OW 74
79371: PPUSH
79372: CALL_OW 115
// end ; end ;
79376: GO 78956
79378: POP
79379: POP
// end ;
79380: LD_VAR 0 3
79384: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79385: LD_INT 0
79387: PPUSH
79388: PPUSH
79389: PPUSH
// if not unit or IsInUnit ( unit ) then
79390: LD_VAR 0 1
79394: NOT
79395: PUSH
79396: LD_VAR 0 1
79400: PPUSH
79401: CALL_OW 310
79405: OR
79406: IFFALSE 79410
// exit ;
79408: GO 79501
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79410: LD_ADDR_VAR 0 4
79414: PUSH
79415: LD_VAR 0 1
79419: PPUSH
79420: CALL_OW 250
79424: PPUSH
79425: LD_VAR 0 2
79429: PPUSH
79430: LD_INT 1
79432: PPUSH
79433: CALL_OW 272
79437: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79438: LD_ADDR_VAR 0 5
79442: PUSH
79443: LD_VAR 0 1
79447: PPUSH
79448: CALL_OW 251
79452: PPUSH
79453: LD_VAR 0 2
79457: PPUSH
79458: LD_INT 1
79460: PPUSH
79461: CALL_OW 273
79465: ST_TO_ADDR
// if ValidHex ( x , y ) then
79466: LD_VAR 0 4
79470: PPUSH
79471: LD_VAR 0 5
79475: PPUSH
79476: CALL_OW 488
79480: IFFALSE 79501
// ComTurnXY ( unit , x , y ) ;
79482: LD_VAR 0 1
79486: PPUSH
79487: LD_VAR 0 4
79491: PPUSH
79492: LD_VAR 0 5
79496: PPUSH
79497: CALL_OW 118
// end ;
79501: LD_VAR 0 3
79505: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79506: LD_INT 0
79508: PPUSH
79509: PPUSH
// result := false ;
79510: LD_ADDR_VAR 0 3
79514: PUSH
79515: LD_INT 0
79517: ST_TO_ADDR
// if not units then
79518: LD_VAR 0 2
79522: NOT
79523: IFFALSE 79527
// exit ;
79525: GO 79572
// for i in units do
79527: LD_ADDR_VAR 0 4
79531: PUSH
79532: LD_VAR 0 2
79536: PUSH
79537: FOR_IN
79538: IFFALSE 79570
// if See ( side , i ) then
79540: LD_VAR 0 1
79544: PPUSH
79545: LD_VAR 0 4
79549: PPUSH
79550: CALL_OW 292
79554: IFFALSE 79568
// begin result := true ;
79556: LD_ADDR_VAR 0 3
79560: PUSH
79561: LD_INT 1
79563: ST_TO_ADDR
// exit ;
79564: POP
79565: POP
79566: GO 79572
// end ;
79568: GO 79537
79570: POP
79571: POP
// end ;
79572: LD_VAR 0 3
79576: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79577: LD_INT 0
79579: PPUSH
79580: PPUSH
79581: PPUSH
79582: PPUSH
// if not unit or not points then
79583: LD_VAR 0 1
79587: NOT
79588: PUSH
79589: LD_VAR 0 2
79593: NOT
79594: OR
79595: IFFALSE 79599
// exit ;
79597: GO 79689
// dist := 99999 ;
79599: LD_ADDR_VAR 0 5
79603: PUSH
79604: LD_INT 99999
79606: ST_TO_ADDR
// for i in points do
79607: LD_ADDR_VAR 0 4
79611: PUSH
79612: LD_VAR 0 2
79616: PUSH
79617: FOR_IN
79618: IFFALSE 79687
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79620: LD_ADDR_VAR 0 6
79624: PUSH
79625: LD_VAR 0 1
79629: PPUSH
79630: LD_VAR 0 4
79634: PUSH
79635: LD_INT 1
79637: ARRAY
79638: PPUSH
79639: LD_VAR 0 4
79643: PUSH
79644: LD_INT 2
79646: ARRAY
79647: PPUSH
79648: CALL_OW 297
79652: ST_TO_ADDR
// if tmpDist < dist then
79653: LD_VAR 0 6
79657: PUSH
79658: LD_VAR 0 5
79662: LESS
79663: IFFALSE 79685
// begin result := i ;
79665: LD_ADDR_VAR 0 3
79669: PUSH
79670: LD_VAR 0 4
79674: ST_TO_ADDR
// dist := tmpDist ;
79675: LD_ADDR_VAR 0 5
79679: PUSH
79680: LD_VAR 0 6
79684: ST_TO_ADDR
// end ; end ;
79685: GO 79617
79687: POP
79688: POP
// end ;
79689: LD_VAR 0 3
79693: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
79694: LD_INT 0
79696: PPUSH
// uc_side := side ;
79697: LD_ADDR_OWVAR 20
79701: PUSH
79702: LD_VAR 0 1
79706: ST_TO_ADDR
// uc_nation := 3 ;
79707: LD_ADDR_OWVAR 21
79711: PUSH
79712: LD_INT 3
79714: ST_TO_ADDR
// vc_chassis := 25 ;
79715: LD_ADDR_OWVAR 37
79719: PUSH
79720: LD_INT 25
79722: ST_TO_ADDR
// vc_engine := engine_siberite ;
79723: LD_ADDR_OWVAR 39
79727: PUSH
79728: LD_INT 3
79730: ST_TO_ADDR
// vc_control := control_computer ;
79731: LD_ADDR_OWVAR 38
79735: PUSH
79736: LD_INT 3
79738: ST_TO_ADDR
// vc_weapon := 59 ;
79739: LD_ADDR_OWVAR 40
79743: PUSH
79744: LD_INT 59
79746: ST_TO_ADDR
// result := CreateVehicle ;
79747: LD_ADDR_VAR 0 5
79751: PUSH
79752: CALL_OW 45
79756: ST_TO_ADDR
// SetDir ( result , d ) ;
79757: LD_VAR 0 5
79761: PPUSH
79762: LD_VAR 0 4
79766: PPUSH
79767: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
79771: LD_VAR 0 5
79775: PPUSH
79776: LD_VAR 0 2
79780: PPUSH
79781: LD_VAR 0 3
79785: PPUSH
79786: LD_INT 0
79788: PPUSH
79789: CALL_OW 48
// end ;
79793: LD_VAR 0 5
79797: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
79798: LD_INT 0
79800: PPUSH
79801: PPUSH
79802: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
79803: LD_ADDR_VAR 0 2
79807: PUSH
79808: LD_INT 0
79810: PUSH
79811: LD_INT 0
79813: PUSH
79814: LD_INT 0
79816: PUSH
79817: LD_INT 0
79819: PUSH
79820: EMPTY
79821: LIST
79822: LIST
79823: LIST
79824: LIST
79825: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
79826: LD_VAR 0 1
79830: NOT
79831: PUSH
79832: LD_VAR 0 1
79836: PPUSH
79837: CALL_OW 264
79841: PUSH
79842: LD_INT 12
79844: PUSH
79845: LD_INT 51
79847: PUSH
79848: LD_INT 32
79850: PUSH
79851: LD_EXP 46
79855: PUSH
79856: EMPTY
79857: LIST
79858: LIST
79859: LIST
79860: LIST
79861: IN
79862: NOT
79863: OR
79864: IFFALSE 79868
// exit ;
79866: GO 79966
// for i := 1 to 3 do
79868: LD_ADDR_VAR 0 3
79872: PUSH
79873: DOUBLE
79874: LD_INT 1
79876: DEC
79877: ST_TO_ADDR
79878: LD_INT 3
79880: PUSH
79881: FOR_TO
79882: IFFALSE 79964
// begin tmp := GetCargo ( cargo , i ) ;
79884: LD_ADDR_VAR 0 4
79888: PUSH
79889: LD_VAR 0 1
79893: PPUSH
79894: LD_VAR 0 3
79898: PPUSH
79899: CALL_OW 289
79903: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
79904: LD_ADDR_VAR 0 2
79908: PUSH
79909: LD_VAR 0 2
79913: PPUSH
79914: LD_VAR 0 3
79918: PPUSH
79919: LD_VAR 0 4
79923: PPUSH
79924: CALL_OW 1
79928: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
79929: LD_ADDR_VAR 0 2
79933: PUSH
79934: LD_VAR 0 2
79938: PPUSH
79939: LD_INT 4
79941: PPUSH
79942: LD_VAR 0 2
79946: PUSH
79947: LD_INT 4
79949: ARRAY
79950: PUSH
79951: LD_VAR 0 4
79955: PLUS
79956: PPUSH
79957: CALL_OW 1
79961: ST_TO_ADDR
// end ;
79962: GO 79881
79964: POP
79965: POP
// end ;
79966: LD_VAR 0 2
79970: RET
// export function Length ( array ) ; begin
79971: LD_INT 0
79973: PPUSH
// result := array + 0 ;
79974: LD_ADDR_VAR 0 2
79978: PUSH
79979: LD_VAR 0 1
79983: PUSH
79984: LD_INT 0
79986: PLUS
79987: ST_TO_ADDR
// end ; end_of_file
79988: LD_VAR 0 2
79992: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
79993: LD_VAR 0 1
79997: PUSH
79998: LD_INT 200
80000: DOUBLE
80001: GREATEREQUAL
80002: IFFALSE 80010
80004: LD_INT 299
80006: DOUBLE
80007: LESSEQUAL
80008: IFTRUE 80012
80010: GO 80044
80012: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80013: LD_VAR 0 1
80017: PPUSH
80018: LD_VAR 0 2
80022: PPUSH
80023: LD_VAR 0 3
80027: PPUSH
80028: LD_VAR 0 4
80032: PPUSH
80033: LD_VAR 0 5
80037: PPUSH
80038: CALL 34895 0 5
80042: GO 80121
80044: LD_INT 300
80046: DOUBLE
80047: GREATEREQUAL
80048: IFFALSE 80056
80050: LD_INT 399
80052: DOUBLE
80053: LESSEQUAL
80054: IFTRUE 80058
80056: GO 80120
80058: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
80059: LD_VAR 0 1
80063: PPUSH
80064: LD_VAR 0 2
80068: PPUSH
80069: LD_VAR 0 3
80073: PPUSH
80074: LD_VAR 0 4
80078: PPUSH
80079: LD_VAR 0 5
80083: PPUSH
80084: LD_VAR 0 6
80088: PPUSH
80089: LD_VAR 0 7
80093: PPUSH
80094: LD_VAR 0 8
80098: PPUSH
80099: LD_VAR 0 9
80103: PPUSH
80104: LD_VAR 0 10
80108: PPUSH
80109: LD_VAR 0 11
80113: PPUSH
80114: CALL 31290 0 11
80118: GO 80121
80120: POP
// end ;
80121: PPOPN 11
80123: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
80124: LD_VAR 0 1
80128: PPUSH
80129: LD_VAR 0 2
80133: PPUSH
80134: LD_VAR 0 3
80138: PPUSH
80139: LD_VAR 0 4
80143: PPUSH
80144: LD_VAR 0 5
80148: PPUSH
80149: CALL 34631 0 5
// end ; end_of_file
80153: PPOPN 5
80155: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80156: LD_VAR 0 1
80160: PPUSH
80161: LD_VAR 0 2
80165: PPUSH
80166: LD_VAR 0 3
80170: PPUSH
80171: LD_VAR 0 4
80175: PPUSH
80176: LD_VAR 0 5
80180: PPUSH
80181: LD_VAR 0 6
80185: PPUSH
80186: CALL 18983 0 6
// end ;
80190: PPOPN 6
80192: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
80193: LD_INT 0
80195: PPUSH
// begin if not units then
80196: LD_VAR 0 1
80200: NOT
80201: IFFALSE 80205
// exit ;
80203: GO 80205
// end ;
80205: PPOPN 7
80207: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
80208: CALL 18954 0 0
// end ;
80212: PPOPN 1
80214: END
