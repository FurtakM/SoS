// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export amCargo1 , amCargo2 ; export amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; export westPathUsed , laserCounterDestroy , rocketBuilded ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_STRING ryutin
  20: PPUSH
  21: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  25: LD_INT 6
  27: PPUSH
  28: LD_STRING yegorov
  30: PPUSH
  31: CALL_OW 500
// RuScientists = [ ] ;
  35: LD_ADDR_EXP 34
  39: PUSH
  40: EMPTY
  41: ST_TO_ADDR
// sciCounter = 0 ;
  42: LD_ADDR_EXP 35
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  50: LD_ADDR_EXP 38
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTanks = [ ] ;
  57: LD_ADDR_EXP 39
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  64: LD_ADDR_EXP 40
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// arabianMines = [ ] ;
  71: LD_ADDR_EXP 44
  75: PUSH
  76: EMPTY
  77: ST_TO_ADDR
// kurtStatus = LoadVariable ( 06_KurtStatus_1 , 0 ) ;
  78: LD_ADDR_EXP 26
  82: PUSH
  83: LD_STRING 06_KurtStatus_1
  85: PPUSH
  86: LD_INT 0
  88: PPUSH
  89: CALL_OW 30
  93: ST_TO_ADDR
// secondPass = 0 ;
  94: LD_ADDR_EXP 27
  98: PUSH
  99: LD_INT 0
 101: ST_TO_ADDR
// teleportExplored = 0 ;
 102: LD_ADDR_EXP 33
 106: PUSH
 107: LD_INT 0
 109: ST_TO_ADDR
// attackTactic = 0 ;
 110: LD_ADDR_EXP 43
 114: PUSH
 115: LD_INT 0
 117: ST_TO_ADDR
// tpCounter = 0 ;
 118: LD_ADDR_EXP 29
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// askSiberite = 0 ;
 126: LD_ADDR_EXP 32
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// warWithLegion = 0 ;
 134: LD_ADDR_EXP 30
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// fakeInfo = 0 ;
 142: LD_ADDR_EXP 31
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// cratesSpawned = 0 ;
 150: LD_ADDR_EXP 45
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// ruAI = 0 ;
 158: LD_ADDR_EXP 41
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// ruEscape = 0 ;
 166: LD_ADDR_EXP 42
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// eventVar1 = 0 ;
 174: LD_ADDR_EXP 47
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// mission_prefix = 12_ ;
 182: LD_ADDR_EXP 46
 186: PUSH
 187: LD_STRING 12_
 189: ST_TO_ADDR
// debugMode = 0 ;
 190: LD_ADDR_EXP 48
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// westPathUsed := false ;
 198: LD_ADDR_EXP 49
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// laserCounterDestroy := 0 ;
 206: LD_ADDR_EXP 50
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// rocketBuilded := false ;
 214: LD_ADDR_EXP 51
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// CreateNature ;
 222: CALL 15411 0 0
// PrepareDifficulty ;
 226: CALL 12514 0 0
// PrepareVehicles ;
 230: CALL 1765 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 234: LD_INT 4
 236: PPUSH
 237: LD_INT 0
 239: PPUSH
 240: LD_INT 1
 242: PPUSH
 243: LD_INT 0
 245: PPUSH
 246: CALL 1339 0 4
// PrepareAmericanHeroes ;
 250: CALL 640 0 0
// PrepareRussianCommander ;
 254: CALL 3153 0 0
// PrepareWestBase ;
 258: CALL 3668 0 0
// PrepareEastBase ;
 262: CALL 3228 0 0
// PrepareOtherRussians ;
 266: CALL 3780 0 0
// end ;
 270: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 271: LD_EXP 48
 275: PUSH
 276: LD_INT 1
 278: EQUAL
 279: IFFALSE 585
 281: GO 283
 283: DISABLE
 284: LD_INT 0
 286: PPUSH
// begin enable ;
 287: ENABLE
// fogoff ( true ) ;
 288: LD_INT 1
 290: PPUSH
 291: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 295: LD_ADDR_VAR 0 1
 299: PUSH
 300: LD_INT 22
 302: PUSH
 303: LD_INT 1
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: PUSH
 310: LD_INT 21
 312: PUSH
 313: LD_INT 1
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: PPUSH
 324: CALL_OW 69
 328: PUSH
 329: FOR_IN
 330: IFFALSE 346
// SetLives ( i , 1000 ) ;
 332: LD_VAR 0 1
 336: PPUSH
 337: LD_INT 1000
 339: PPUSH
 340: CALL_OW 234
 344: GO 329
 346: POP
 347: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 348: LD_ADDR_VAR 0 1
 352: PUSH
 353: LD_INT 22
 355: PUSH
 356: LD_INT 1
 358: PUSH
 359: EMPTY
 360: LIST
 361: LIST
 362: PUSH
 363: LD_INT 2
 365: PUSH
 366: LD_INT 30
 368: PUSH
 369: LD_INT 0
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: PUSH
 376: LD_INT 30
 378: PUSH
 379: LD_INT 1
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: PUSH
 386: EMPTY
 387: LIST
 388: LIST
 389: LIST
 390: PUSH
 391: EMPTY
 392: LIST
 393: LIST
 394: PPUSH
 395: CALL_OW 69
 399: PUSH
 400: FOR_IN
 401: IFFALSE 425
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 403: LD_VAR 0 1
 407: PPUSH
 408: CALL_OW 274
 412: PPUSH
 413: LD_INT 1
 415: PPUSH
 416: LD_INT 9999
 418: PPUSH
 419: CALL_OW 277
 423: GO 400
 425: POP
 426: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 427: LD_ADDR_VAR 0 1
 431: PUSH
 432: LD_INT 22
 434: PUSH
 435: LD_INT 1
 437: PUSH
 438: EMPTY
 439: LIST
 440: LIST
 441: PUSH
 442: LD_INT 2
 444: PUSH
 445: LD_INT 30
 447: PUSH
 448: LD_INT 0
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: PUSH
 455: LD_INT 30
 457: PUSH
 458: LD_INT 1
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: LIST
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PPUSH
 474: CALL_OW 69
 478: PUSH
 479: FOR_IN
 480: IFFALSE 504
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 482: LD_VAR 0 1
 486: PPUSH
 487: CALL_OW 274
 491: PPUSH
 492: LD_INT 2
 494: PPUSH
 495: LD_INT 9999
 497: PPUSH
 498: CALL_OW 277
 502: GO 479
 504: POP
 505: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 506: LD_ADDR_VAR 0 1
 510: PUSH
 511: LD_INT 22
 513: PUSH
 514: LD_INT 1
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: PUSH
 521: LD_INT 2
 523: PUSH
 524: LD_INT 30
 526: PUSH
 527: LD_INT 0
 529: PUSH
 530: EMPTY
 531: LIST
 532: LIST
 533: PUSH
 534: LD_INT 30
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: EMPTY
 545: LIST
 546: LIST
 547: LIST
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: PPUSH
 553: CALL_OW 69
 557: PUSH
 558: FOR_IN
 559: IFFALSE 583
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 561: LD_VAR 0 1
 565: PPUSH
 566: CALL_OW 274
 570: PPUSH
 571: LD_INT 3
 573: PPUSH
 574: LD_INT 9999
 576: PPUSH
 577: CALL_OW 277
 581: GO 558
 583: POP
 584: POP
// end ;
 585: PPOPN 1
 587: END
// every 0 0$1 trigger FilterUnitsInArea ( westPathArea , [ f_side , 1 ] ) do
 588: LD_INT 25
 590: PPUSH
 591: LD_INT 22
 593: PUSH
 594: LD_INT 1
 596: PUSH
 597: EMPTY
 598: LIST
 599: LIST
 600: PPUSH
 601: CALL_OW 70
 605: IFFALSE 618
 607: GO 609
 609: DISABLE
// westPathUsed := true ;
 610: LD_ADDR_EXP 49
 614: PUSH
 615: LD_INT 1
 617: ST_TO_ADDR
 618: END
// every 0 0$1 trigger laserCounterDestroy >= 3 do
 619: LD_EXP 50
 623: PUSH
 624: LD_INT 3
 626: GREATEREQUAL
 627: IFFALSE 639
 629: GO 631
 631: DISABLE
// SetAchievement ( ACH_LASER ) ; end_of_file
 632: LD_STRING ACH_LASER
 634: PPUSH
 635: CALL_OW 543
 639: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 640: LD_INT 0
 642: PPUSH
 643: PPUSH
 644: PPUSH
// uc_side = 1 ;
 645: LD_ADDR_OWVAR 20
 649: PUSH
 650: LD_INT 1
 652: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 653: LD_ADDR_EXP 14
 657: PUSH
 658: LD_STRING 11c_others
 660: PPUSH
 661: CALL_OW 31
 665: PUSH
 666: LD_STRING 11_others
 668: PPUSH
 669: CALL_OW 31
 673: UNION
 674: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 11_ ) ;
 675: LD_ADDR_EXP 1
 679: PUSH
 680: LD_STRING JMM
 682: PPUSH
 683: LD_INT 1
 685: PPUSH
 686: LD_STRING 11_
 688: PPUSH
 689: CALL 34107 0 3
 693: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 694: LD_EXP 1
 698: PPUSH
 699: LD_INT 1
 701: PPUSH
 702: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 706: LD_EXP 1
 710: PPUSH
 711: LD_INT 22
 713: PUSH
 714: LD_INT 1
 716: PUSH
 717: EMPTY
 718: LIST
 719: LIST
 720: PUSH
 721: LD_INT 21
 723: PUSH
 724: LD_INT 2
 726: PUSH
 727: EMPTY
 728: LIST
 729: LIST
 730: PUSH
 731: LD_INT 58
 733: PUSH
 734: EMPTY
 735: LIST
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: LIST
 741: PPUSH
 742: CALL_OW 69
 746: PUSH
 747: LD_INT 1
 749: ARRAY
 750: PPUSH
 751: CALL_OW 52
// if TestCharacters ( 11_Lisa ) = true then
 755: LD_STRING 11_Lisa
 757: PPUSH
 758: CALL_OW 28
 762: PUSH
 763: LD_INT 1
 765: EQUAL
 766: IFFALSE 816
// begin Lisa = PrepareUnit ( Lisa , true , 11_ ) ;
 768: LD_ADDR_EXP 2
 772: PUSH
 773: LD_STRING Lisa
 775: PPUSH
 776: LD_INT 1
 778: PPUSH
 779: LD_STRING 11_
 781: PPUSH
 782: CALL 34107 0 3
 786: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 787: LD_EXP 2
 791: PPUSH
 792: LD_INT 1
 794: PPUSH
 795: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 799: LD_EXP 2
 803: PPUSH
 804: LD_INT 4
 806: PPUSH
 807: LD_INT 0
 809: PPUSH
 810: CALL_OW 49
// end else
 814: GO 832
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 816: LD_INT 4
 818: PPUSH
 819: LD_INT 0
 821: PPUSH
 822: LD_INT 1
 824: PPUSH
 825: LD_INT 0
 827: PPUSH
 828: CALL 1339 0 4
// end ; if TestCharacters ( 11_Donaldson ) = true then
 832: LD_STRING 11_Donaldson
 834: PPUSH
 835: CALL_OW 28
 839: PUSH
 840: LD_INT 1
 842: EQUAL
 843: IFFALSE 893
// begin Donaldson = PrepareUnit ( Donaldson , true , 11_ ) ;
 845: LD_ADDR_EXP 3
 849: PUSH
 850: LD_STRING Donaldson
 852: PPUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_STRING 11_
 858: PPUSH
 859: CALL 34107 0 3
 863: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 864: LD_EXP 3
 868: PPUSH
 869: LD_INT 1
 871: PPUSH
 872: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 876: LD_EXP 3
 880: PPUSH
 881: LD_INT 4
 883: PPUSH
 884: LD_INT 0
 886: PPUSH
 887: CALL_OW 49
// end else
 891: GO 909
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 893: LD_INT 4
 895: PPUSH
 896: LD_INT 0
 898: PPUSH
 899: LD_INT 1
 901: PPUSH
 902: LD_INT 0
 904: PPUSH
 905: CALL 1339 0 4
// end ; if TestCharacters ( 11_Cyrus ) = true then
 909: LD_STRING 11_Cyrus
 911: PPUSH
 912: CALL_OW 28
 916: PUSH
 917: LD_INT 1
 919: EQUAL
 920: IFFALSE 970
// begin Cyrus = PrepareUnit ( Cyrus , true , 11_ ) ;
 922: LD_ADDR_EXP 5
 926: PUSH
 927: LD_STRING Cyrus
 929: PPUSH
 930: LD_INT 1
 932: PPUSH
 933: LD_STRING 11_
 935: PPUSH
 936: CALL 34107 0 3
 940: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 941: LD_EXP 5
 945: PPUSH
 946: LD_INT 1
 948: PPUSH
 949: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 953: LD_EXP 5
 957: PPUSH
 958: LD_INT 4
 960: PPUSH
 961: LD_INT 0
 963: PPUSH
 964: CALL_OW 49
// end else
 968: GO 986
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 970: LD_INT 4
 972: PPUSH
 973: LD_INT 0
 975: PPUSH
 976: LD_INT 1
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL 1339 0 4
// end ; if TestCharacters ( 11_Denis ) = true then
 986: LD_STRING 11_Denis
 988: PPUSH
 989: CALL_OW 28
 993: PUSH
 994: LD_INT 1
 996: EQUAL
 997: IFFALSE 1047
// begin Denis = PrepareUnit ( Denis , true , 11_ ) ;
 999: LD_ADDR_EXP 6
1003: PUSH
1004: LD_STRING Denis
1006: PPUSH
1007: LD_INT 1
1009: PPUSH
1010: LD_STRING 11_
1012: PPUSH
1013: CALL 34107 0 3
1017: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1018: LD_EXP 6
1022: PPUSH
1023: LD_INT 4
1025: PPUSH
1026: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1030: LD_EXP 6
1034: PPUSH
1035: LD_INT 4
1037: PPUSH
1038: LD_INT 0
1040: PPUSH
1041: CALL_OW 49
// end else
1045: GO 1063
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1047: LD_INT 4
1049: PPUSH
1050: LD_INT 0
1052: PPUSH
1053: LD_INT 1
1055: PPUSH
1056: LD_INT 0
1058: PPUSH
1059: CALL 1339 0 4
// end ; if TestCharacters ( 11_Frank ) = true then
1063: LD_STRING 11_Frank
1065: PPUSH
1066: CALL_OW 28
1070: PUSH
1071: LD_INT 1
1073: EQUAL
1074: IFFALSE 1124
// begin Frank = PrepareUnit ( Frank , true , 11_ ) ;
1076: LD_ADDR_EXP 12
1080: PUSH
1081: LD_STRING Frank
1083: PPUSH
1084: LD_INT 1
1086: PPUSH
1087: LD_STRING 11_
1089: PPUSH
1090: CALL 34107 0 3
1094: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1095: LD_EXP 12
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1107: LD_EXP 12
1111: PPUSH
1112: LD_INT 4
1114: PPUSH
1115: LD_INT 0
1117: PPUSH
1118: CALL_OW 49
// end else
1122: GO 1140
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1124: LD_INT 4
1126: PPUSH
1127: LD_INT 0
1129: PPUSH
1130: LD_INT 1
1132: PPUSH
1133: LD_INT 0
1135: PPUSH
1136: CALL 1339 0 4
// end ; if TestCharacters ( 11_Cornell ) = true then
1140: LD_STRING 11_Cornell
1142: PPUSH
1143: CALL_OW 28
1147: PUSH
1148: LD_INT 1
1150: EQUAL
1151: IFFALSE 1201
// begin Cornel = PrepareUnit ( Cornell , true , 11_ ) ;
1153: LD_ADDR_EXP 10
1157: PUSH
1158: LD_STRING Cornell
1160: PPUSH
1161: LD_INT 1
1163: PPUSH
1164: LD_STRING 11_
1166: PPUSH
1167: CALL 34107 0 3
1171: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1172: LD_EXP 10
1176: PPUSH
1177: LD_INT 1
1179: PPUSH
1180: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1184: LD_EXP 10
1188: PPUSH
1189: LD_INT 4
1191: PPUSH
1192: LD_INT 0
1194: PPUSH
1195: CALL_OW 49
// end else
1199: GO 1217
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1201: LD_INT 4
1203: PPUSH
1204: LD_INT 0
1206: PPUSH
1207: LD_INT 1
1209: PPUSH
1210: LD_INT 0
1212: PPUSH
1213: CALL 1339 0 4
// end ; tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1217: LD_ADDR_VAR 0 2
1221: PUSH
1222: LD_EXP 14
1226: PPUSH
1227: LD_INT 26
1229: PUSH
1230: LD_INT 1
1232: PUSH
1233: EMPTY
1234: LIST
1235: LIST
1236: PPUSH
1237: CALL_OW 72
1241: ST_TO_ADDR
// if not tmp then
1242: LD_VAR 0 2
1246: NOT
1247: IFFALSE 1276
// begin PrepareSoldier ( sex_male , 8 ) ;
1249: LD_INT 1
1251: PPUSH
1252: LD_INT 8
1254: PPUSH
1255: CALL_OW 381
// PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1259: CALL_OW 44
1263: PPUSH
1264: LD_INT 4
1266: PPUSH
1267: LD_INT 0
1269: PPUSH
1270: CALL_OW 49
// end else
1274: GO 1315
// begin PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1276: LD_VAR 0 2
1280: PUSH
1281: LD_INT 1
1283: ARRAY
1284: PPUSH
1285: LD_INT 4
1287: PPUSH
1288: LD_INT 0
1290: PPUSH
1291: CALL_OW 49
// others11 := others11 diff tmp [ 1 ] ;
1295: LD_ADDR_EXP 14
1299: PUSH
1300: LD_EXP 14
1304: PUSH
1305: LD_VAR 0 2
1309: PUSH
1310: LD_INT 1
1312: ARRAY
1313: DIFF
1314: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ,  ) ;
1315: LD_ADDR_EXP 22
1319: PUSH
1320: LD_STRING Powell
1322: PPUSH
1323: LD_INT 0
1325: PPUSH
1326: LD_STRING 
1328: PPUSH
1329: CALL 34107 0 3
1333: ST_TO_ADDR
// end ;
1334: LD_VAR 0 1
1338: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1339: LD_INT 0
1341: PPUSH
1342: PPUSH
1343: PPUSH
1344: PPUSH
1345: PPUSH
// if mech = 1 then
1346: LD_VAR 0 4
1350: PUSH
1351: LD_INT 1
1353: EQUAL
1354: IFFALSE 1591
// begin if others11 > 0 then
1356: LD_EXP 14
1360: PUSH
1361: LD_INT 0
1363: GREATER
1364: IFFALSE 1531
// begin for i := 1 to others11 - 1 do
1366: LD_ADDR_VAR 0 6
1370: PUSH
1371: DOUBLE
1372: LD_INT 1
1374: DEC
1375: ST_TO_ADDR
1376: LD_EXP 14
1380: PUSH
1381: LD_INT 1
1383: MINUS
1384: PUSH
1385: FOR_TO
1386: IFFALSE 1468
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1388: LD_EXP 14
1392: PUSH
1393: LD_VAR 0 6
1397: ARRAY
1398: PPUSH
1399: LD_INT 3
1401: PPUSH
1402: CALL_OW 259
1406: PUSH
1407: LD_EXP 14
1411: PUSH
1412: LD_VAR 0 6
1416: PUSH
1417: LD_INT 1
1419: PLUS
1420: ARRAY
1421: PPUSH
1422: LD_INT 3
1424: PPUSH
1425: CALL_OW 259
1429: LESS
1430: IFFALSE 1466
// begin mecha = others11 [ i + 1 ] ;
1432: LD_ADDR_VAR 0 9
1436: PUSH
1437: LD_EXP 14
1441: PUSH
1442: LD_VAR 0 6
1446: PUSH
1447: LD_INT 1
1449: PLUS
1450: ARRAY
1451: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1452: LD_VAR 0 9
1456: PPUSH
1457: LD_INT 3
1459: PPUSH
1460: CALL_OW 336
// break ;
1464: GO 1468
// end ; end ;
1466: GO 1385
1468: POP
1469: POP
// if spawnMode = 1 then
1470: LD_VAR 0 3
1474: PUSH
1475: LD_INT 1
1477: EQUAL
1478: IFFALSE 1499
// PlaceUnitArea ( mecha , area , false ) else
1480: LD_VAR 0 9
1484: PPUSH
1485: LD_VAR 0 1
1489: PPUSH
1490: LD_INT 0
1492: PPUSH
1493: CALL_OW 49
1497: GO 1513
// PlaceHumanInUnit ( mecha , veh ) ;
1499: LD_VAR 0 9
1503: PPUSH
1504: LD_VAR 0 2
1508: PPUSH
1509: CALL_OW 52
// others11 = others11 diff mecha ;
1513: LD_ADDR_EXP 14
1517: PUSH
1518: LD_EXP 14
1522: PUSH
1523: LD_VAR 0 9
1527: DIFF
1528: ST_TO_ADDR
// end else
1529: GO 1589
// begin hc_name =  ;
1531: LD_ADDR_OWVAR 26
1535: PUSH
1536: LD_STRING 
1538: ST_TO_ADDR
// hc_gallery =  ;
1539: LD_ADDR_OWVAR 33
1543: PUSH
1544: LD_STRING 
1546: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1547: LD_INT 0
1549: PPUSH
1550: LD_INT 7
1552: PPUSH
1553: LD_INT 9
1555: PPUSH
1556: CALL_OW 12
1560: PPUSH
1561: CALL_OW 383
// un = CreateHuman ;
1565: LD_ADDR_VAR 0 7
1569: PUSH
1570: CALL_OW 44
1574: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1575: LD_VAR 0 7
1579: PPUSH
1580: LD_VAR 0 2
1584: PPUSH
1585: CALL_OW 52
// end ; end else
1589: GO 1760
// begin if others11 > 0 then
1591: LD_EXP 14
1595: PUSH
1596: LD_INT 0
1598: GREATER
1599: IFFALSE 1672
// begin if spawnMode = 1 then
1601: LD_VAR 0 3
1605: PUSH
1606: LD_INT 1
1608: EQUAL
1609: IFFALSE 1634
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1611: LD_EXP 14
1615: PUSH
1616: LD_INT 1
1618: ARRAY
1619: PPUSH
1620: LD_VAR 0 1
1624: PPUSH
1625: LD_INT 0
1627: PPUSH
1628: CALL_OW 49
1632: GO 1652
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1634: LD_EXP 14
1638: PUSH
1639: LD_INT 1
1641: ARRAY
1642: PPUSH
1643: LD_VAR 0 2
1647: PPUSH
1648: CALL_OW 52
// others11 = Delete ( others11 , 1 ) ;
1652: LD_ADDR_EXP 14
1656: PUSH
1657: LD_EXP 14
1661: PPUSH
1662: LD_INT 1
1664: PPUSH
1665: CALL_OW 3
1669: ST_TO_ADDR
// end else
1670: GO 1760
// begin hc_name =  ;
1672: LD_ADDR_OWVAR 26
1676: PUSH
1677: LD_STRING 
1679: ST_TO_ADDR
// hc_gallery =  ;
1680: LD_ADDR_OWVAR 33
1684: PUSH
1685: LD_STRING 
1687: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1688: LD_INT 0
1690: PPUSH
1691: LD_INT 1
1693: PUSH
1694: LD_INT 2
1696: PUSH
1697: LD_INT 3
1699: PUSH
1700: LD_INT 4
1702: PUSH
1703: EMPTY
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: PUSH
1709: LD_INT 1
1711: PPUSH
1712: LD_INT 4
1714: PPUSH
1715: CALL_OW 12
1719: ARRAY
1720: PPUSH
1721: LD_INT 7
1723: PPUSH
1724: LD_INT 9
1726: PPUSH
1727: CALL_OW 12
1731: PPUSH
1732: CALL_OW 380
// un = CreateHuman ;
1736: LD_ADDR_VAR 0 7
1740: PUSH
1741: CALL_OW 44
1745: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1746: LD_VAR 0 7
1750: PPUSH
1751: LD_VAR 0 2
1755: PPUSH
1756: CALL_OW 52
// end ; end ; end ;
1760: LD_VAR 0 5
1764: RET
// export function PrepareVehicles ; var veh ; begin
1765: LD_INT 0
1767: PPUSH
1768: PPUSH
// uc_side = 1 ;
1769: LD_ADDR_OWVAR 20
1773: PUSH
1774: LD_INT 1
1776: ST_TO_ADDR
// uc_nation = 1 ;
1777: LD_ADDR_OWVAR 21
1781: PUSH
1782: LD_INT 1
1784: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1785: LD_ADDR_OWVAR 37
1789: PUSH
1790: LD_INT 3
1792: ST_TO_ADDR
// vc_engine = 3 ;
1793: LD_ADDR_OWVAR 39
1797: PUSH
1798: LD_INT 3
1800: ST_TO_ADDR
// vc_control = 3 ;
1801: LD_ADDR_OWVAR 38
1805: PUSH
1806: LD_INT 3
1808: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1809: LD_ADDR_OWVAR 40
1813: PUSH
1814: LD_INT 4
1816: ST_TO_ADDR
// veh = CreateVehicle ;
1817: LD_ADDR_VAR 0 2
1821: PUSH
1822: CALL_OW 45
1826: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1827: LD_VAR 0 2
1831: PPUSH
1832: LD_INT 4
1834: PPUSH
1835: LD_INT 0
1837: PPUSH
1838: CALL_OW 49
// vc_weapon = us_double_gun ;
1842: LD_ADDR_OWVAR 40
1846: PUSH
1847: LD_INT 5
1849: ST_TO_ADDR
// vc_control = 1 ;
1850: LD_ADDR_OWVAR 38
1854: PUSH
1855: LD_INT 1
1857: ST_TO_ADDR
// veh = CreateVehicle ;
1858: LD_ADDR_VAR 0 2
1862: PUSH
1863: CALL_OW 45
1867: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1868: LD_VAR 0 2
1872: PPUSH
1873: LD_INT 4
1875: PPUSH
1876: LD_INT 0
1878: PPUSH
1879: CALL_OW 49
// vc_weapon = us_light_gun ;
1883: LD_ADDR_OWVAR 40
1887: PUSH
1888: LD_INT 3
1890: ST_TO_ADDR
// vc_control = 3 ;
1891: LD_ADDR_OWVAR 38
1895: PUSH
1896: LD_INT 3
1898: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
1899: LD_ADDR_OWVAR 37
1903: PUSH
1904: LD_INT 2
1906: ST_TO_ADDR
// veh = CreateVehicle ;
1907: LD_ADDR_VAR 0 2
1911: PUSH
1912: CALL_OW 45
1916: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1917: LD_VAR 0 2
1921: PPUSH
1922: LD_INT 4
1924: PPUSH
1925: LD_INT 0
1927: PPUSH
1928: CALL_OW 49
// vc_weapon = us_gatling_gun ;
1932: LD_ADDR_OWVAR 40
1936: PUSH
1937: LD_INT 4
1939: ST_TO_ADDR
// veh = CreateVehicle ;
1940: LD_ADDR_VAR 0 2
1944: PUSH
1945: CALL_OW 45
1949: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1950: LD_VAR 0 2
1954: PPUSH
1955: LD_INT 4
1957: PPUSH
1958: LD_INT 0
1960: PPUSH
1961: CALL_OW 49
// end ;
1965: LD_VAR 0 1
1969: RET
// export function PowellSupport1 ; var veh , un ; begin
1970: LD_INT 0
1972: PPUSH
1973: PPUSH
1974: PPUSH
// uc_side = 1 ;
1975: LD_ADDR_OWVAR 20
1979: PUSH
1980: LD_INT 1
1982: ST_TO_ADDR
// uc_nation = 1 ;
1983: LD_ADDR_OWVAR 21
1987: PUSH
1988: LD_INT 1
1990: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) = true then
1991: LD_STRING 11_Brown
1993: PPUSH
1994: CALL_OW 28
1998: PUSH
1999: LD_INT 1
2001: EQUAL
2002: IFFALSE 2052
// begin Brown = PrepareUnit ( Brown , true , 11_ ) ;
2004: LD_ADDR_EXP 7
2008: PUSH
2009: LD_STRING Brown
2011: PPUSH
2012: LD_INT 1
2014: PPUSH
2015: LD_STRING 11_
2017: PPUSH
2018: CALL 34107 0 3
2022: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
2023: LD_EXP 7
2027: PPUSH
2028: LD_INT 2
2030: PPUSH
2031: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
2035: LD_EXP 7
2039: PPUSH
2040: LD_INT 4
2042: PPUSH
2043: LD_INT 0
2045: PPUSH
2046: CALL_OW 49
// end else
2050: GO 2068
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2052: LD_INT 4
2054: PPUSH
2055: LD_INT 0
2057: PPUSH
2058: LD_INT 1
2060: PPUSH
2061: LD_INT 0
2063: PPUSH
2064: CALL 1339 0 4
// end ; if TestCharacters ( 11_Gary ) = true then
2068: LD_STRING 11_Gary
2070: PPUSH
2071: CALL_OW 28
2075: PUSH
2076: LD_INT 1
2078: EQUAL
2079: IFFALSE 2129
// begin Gary = PrepareUnit ( Gary , true , 11_ ) ;
2081: LD_ADDR_EXP 11
2085: PUSH
2086: LD_STRING Gary
2088: PPUSH
2089: LD_INT 1
2091: PPUSH
2092: LD_STRING 11_
2094: PPUSH
2095: CALL 34107 0 3
2099: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
2100: LD_EXP 11
2104: PPUSH
2105: LD_INT 2
2107: PPUSH
2108: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2112: LD_EXP 11
2116: PPUSH
2117: LD_INT 4
2119: PPUSH
2120: LD_INT 0
2122: PPUSH
2123: CALL_OW 49
// end else
2127: GO 2145
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2129: LD_INT 4
2131: PPUSH
2132: LD_INT 0
2134: PPUSH
2135: LD_INT 1
2137: PPUSH
2138: LD_INT 0
2140: PPUSH
2141: CALL 1339 0 4
// end ; vc_chassis = us_medium_tracked ;
2145: LD_ADDR_OWVAR 37
2149: PUSH
2150: LD_INT 3
2152: ST_TO_ADDR
// vc_engine = 3 ;
2153: LD_ADDR_OWVAR 39
2157: PUSH
2158: LD_INT 3
2160: ST_TO_ADDR
// vc_control = 1 ;
2161: LD_ADDR_OWVAR 38
2165: PUSH
2166: LD_INT 1
2168: ST_TO_ADDR
// vc_weapon = us_crane ;
2169: LD_ADDR_OWVAR 40
2173: PUSH
2174: LD_INT 13
2176: ST_TO_ADDR
// veh = CreateVehicle ;
2177: LD_ADDR_VAR 0 2
2181: PUSH
2182: CALL_OW 45
2186: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2187: LD_VAR 0 2
2191: PPUSH
2192: LD_INT 4
2194: PPUSH
2195: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2199: LD_VAR 0 2
2203: PPUSH
2204: LD_INT 4
2206: PPUSH
2207: LD_INT 0
2209: PPUSH
2210: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2214: LD_INT 4
2216: PPUSH
2217: LD_VAR 0 2
2221: PPUSH
2222: LD_INT 2
2224: PPUSH
2225: LD_INT 1
2227: PPUSH
2228: CALL 1339 0 4
// vc_weapon = 9 ;
2232: LD_ADDR_OWVAR 40
2236: PUSH
2237: LD_INT 9
2239: ST_TO_ADDR
// veh = CreateVehicle ;
2240: LD_ADDR_VAR 0 2
2244: PUSH
2245: CALL_OW 45
2249: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2250: LD_VAR 0 2
2254: PPUSH
2255: LD_INT 4
2257: PPUSH
2258: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2262: LD_VAR 0 2
2266: PPUSH
2267: LD_INT 4
2269: PPUSH
2270: LD_INT 0
2272: PPUSH
2273: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2277: LD_INT 4
2279: PPUSH
2280: LD_VAR 0 2
2284: PPUSH
2285: LD_INT 2
2287: PPUSH
2288: LD_INT 1
2290: PPUSH
2291: CALL 1339 0 4
// vc_control = 3 ;
2295: LD_ADDR_OWVAR 38
2299: PUSH
2300: LD_INT 3
2302: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2303: LD_ADDR_OWVAR 40
2307: PUSH
2308: LD_INT 12
2310: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
2311: LD_ADDR_EXP 15
2315: PUSH
2316: CALL_OW 45
2320: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
2321: LD_ADDR_EXP 16
2325: PUSH
2326: CALL_OW 45
2330: ST_TO_ADDR
// SetDir ( amCargo1 , 4 ) ;
2331: LD_EXP 15
2335: PPUSH
2336: LD_INT 4
2338: PPUSH
2339: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
2343: LD_EXP 16
2347: PPUSH
2348: LD_INT 4
2350: PPUSH
2351: CALL_OW 233
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
2355: LD_EXP 15
2359: PPUSH
2360: LD_INT 4
2362: PPUSH
2363: LD_INT 0
2365: PPUSH
2366: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
2370: LD_EXP 16
2374: PPUSH
2375: LD_INT 4
2377: PPUSH
2378: LD_INT 0
2380: PPUSH
2381: CALL_OW 49
// AddCargo ( amCargo1 , 3 , 100 ) ;
2385: LD_EXP 15
2389: PPUSH
2390: LD_INT 3
2392: PPUSH
2393: LD_INT 100
2395: PPUSH
2396: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
2400: LD_EXP 16
2404: PPUSH
2405: LD_INT 1
2407: PPUSH
2408: LD_INT 80
2410: PPUSH
2411: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
2415: LD_EXP 16
2419: PPUSH
2420: LD_INT 3
2422: PPUSH
2423: LD_INT 20
2425: PPUSH
2426: CALL_OW 291
// end ;
2430: LD_VAR 0 1
2434: RET
// export function PowellSupport2 ; var veh , un ; begin
2435: LD_INT 0
2437: PPUSH
2438: PPUSH
2439: PPUSH
// uc_side = 1 ;
2440: LD_ADDR_OWVAR 20
2444: PUSH
2445: LD_INT 1
2447: ST_TO_ADDR
// uc_nation = 1 ;
2448: LD_ADDR_OWVAR 21
2452: PUSH
2453: LD_INT 1
2455: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2456: LD_ADDR_OWVAR 37
2460: PUSH
2461: LD_INT 2
2463: ST_TO_ADDR
// vc_engine = 3 ;
2464: LD_ADDR_OWVAR 39
2468: PUSH
2469: LD_INT 3
2471: ST_TO_ADDR
// vc_control = 3 ;
2472: LD_ADDR_OWVAR 38
2476: PUSH
2477: LD_INT 3
2479: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2480: LD_ADDR_OWVAR 40
2484: PUSH
2485: LD_INT 3
2487: ST_TO_ADDR
// veh = CreateVehicle ;
2488: LD_ADDR_VAR 0 2
2492: PUSH
2493: CALL_OW 45
2497: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2498: LD_VAR 0 2
2502: PPUSH
2503: LD_INT 4
2505: PPUSH
2506: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2510: LD_VAR 0 2
2514: PPUSH
2515: LD_INT 4
2517: PPUSH
2518: LD_INT 0
2520: PPUSH
2521: CALL_OW 49
// vc_control = 1 ;
2525: LD_ADDR_OWVAR 38
2529: PUSH
2530: LD_INT 1
2532: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2533: LD_ADDR_OWVAR 37
2537: PUSH
2538: LD_INT 2
2540: ST_TO_ADDR
// vc_weapon = us_double_gun ;
2541: LD_ADDR_OWVAR 40
2545: PUSH
2546: LD_INT 5
2548: ST_TO_ADDR
// veh = CreateVehicle ;
2549: LD_ADDR_VAR 0 2
2553: PUSH
2554: CALL_OW 45
2558: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2559: LD_VAR 0 2
2563: PPUSH
2564: LD_INT 4
2566: PPUSH
2567: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2571: LD_VAR 0 2
2575: PPUSH
2576: LD_INT 4
2578: PPUSH
2579: LD_INT 0
2581: PPUSH
2582: CALL_OW 49
// if TestCharacters ( 11_Bobby ) = true then
2586: LD_STRING 11_Bobby
2588: PPUSH
2589: CALL_OW 28
2593: PUSH
2594: LD_INT 1
2596: EQUAL
2597: IFFALSE 2646
// begin Bobby = PrepareUnit ( Bobby , true , 11_ ) ;
2599: LD_ADDR_EXP 4
2603: PUSH
2604: LD_STRING Bobby
2606: PPUSH
2607: LD_INT 1
2609: PPUSH
2610: LD_STRING 11_
2612: PPUSH
2613: CALL 34107 0 3
2617: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2618: LD_EXP 4
2622: PPUSH
2623: LD_INT 3
2625: PPUSH
2626: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2630: LD_EXP 4
2634: PPUSH
2635: LD_VAR 0 2
2639: PPUSH
2640: CALL_OW 52
// end else
2644: GO 2664
// begin PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2646: LD_INT 0
2648: PPUSH
2649: LD_VAR 0 2
2653: PPUSH
2654: LD_INT 2
2656: PPUSH
2657: LD_INT 0
2659: PPUSH
2660: CALL 1339 0 4
// end ; if TestCharacters ( 11_Houten ) = true then
2664: LD_STRING 11_Houten
2666: PPUSH
2667: CALL_OW 28
2671: PUSH
2672: LD_INT 1
2674: EQUAL
2675: IFFALSE 2725
// begin Houten = PrepareUnit ( Houten , true , 11_ ) ;
2677: LD_ADDR_EXP 9
2681: PUSH
2682: LD_STRING Houten
2684: PPUSH
2685: LD_INT 1
2687: PPUSH
2688: LD_STRING 11_
2690: PPUSH
2691: CALL 34107 0 3
2695: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2696: LD_EXP 9
2700: PPUSH
2701: LD_INT 1
2703: PPUSH
2704: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2708: LD_EXP 9
2712: PPUSH
2713: LD_INT 4
2715: PPUSH
2716: LD_INT 0
2718: PPUSH
2719: CALL_OW 49
// end else
2723: GO 2741
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2725: LD_INT 4
2727: PPUSH
2728: LD_INT 0
2730: PPUSH
2731: LD_INT 1
2733: PPUSH
2734: LD_INT 0
2736: PPUSH
2737: CALL 1339 0 4
// end ; vc_control = 3 ;
2741: LD_ADDR_OWVAR 38
2745: PUSH
2746: LD_INT 3
2748: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2749: LD_ADDR_OWVAR 40
2753: PUSH
2754: LD_INT 12
2756: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
2757: LD_ADDR_EXP 17
2761: PUSH
2762: CALL_OW 45
2766: ST_TO_ADDR
// SetDir ( amCargo3 , 4 ) ;
2767: LD_EXP 17
2771: PPUSH
2772: LD_INT 4
2774: PPUSH
2775: CALL_OW 233
// amCargo4 = CreateVehicle ;
2779: LD_ADDR_EXP 18
2783: PUSH
2784: CALL_OW 45
2788: ST_TO_ADDR
// SetDir ( amCargo4 , 4 ) ;
2789: LD_EXP 18
2793: PPUSH
2794: LD_INT 4
2796: PPUSH
2797: CALL_OW 233
// amCargo5 = CreateVehicle ;
2801: LD_ADDR_EXP 19
2805: PUSH
2806: CALL_OW 45
2810: ST_TO_ADDR
// SetDir ( amCargo5 , 4 ) ;
2811: LD_EXP 19
2815: PPUSH
2816: LD_INT 4
2818: PPUSH
2819: CALL_OW 233
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
2823: LD_EXP 17
2827: PPUSH
2828: LD_INT 4
2830: PPUSH
2831: LD_INT 0
2833: PPUSH
2834: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
2838: LD_EXP 18
2842: PPUSH
2843: LD_INT 4
2845: PPUSH
2846: LD_INT 0
2848: PPUSH
2849: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
2853: LD_EXP 19
2857: PPUSH
2858: LD_INT 4
2860: PPUSH
2861: LD_INT 0
2863: PPUSH
2864: CALL_OW 49
// if kurtStatus > 0 then
2868: LD_EXP 26
2872: PUSH
2873: LD_INT 0
2875: GREATER
2876: IFFALSE 2925
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2878: LD_EXP 17
2882: PPUSH
2883: LD_INT 1
2885: PPUSH
2886: LD_INT 100
2888: PPUSH
2889: CALL_OW 291
// AddCargo ( amCargo4 , 1 , 100 ) ;
2893: LD_EXP 18
2897: PPUSH
2898: LD_INT 1
2900: PPUSH
2901: LD_INT 100
2903: PPUSH
2904: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 80 ) ;
2908: LD_EXP 19
2912: PPUSH
2913: LD_INT 3
2915: PPUSH
2916: LD_INT 80
2918: PPUSH
2919: CALL_OW 291
// end else
2923: GO 2970
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2925: LD_EXP 17
2929: PPUSH
2930: LD_INT 1
2932: PPUSH
2933: LD_INT 100
2935: PPUSH
2936: CALL_OW 291
// AddCargo ( amCargo4 , 3 , 60 ) ;
2940: LD_EXP 18
2944: PPUSH
2945: LD_INT 3
2947: PPUSH
2948: LD_INT 60
2950: PPUSH
2951: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 100 ) ;
2955: LD_EXP 19
2959: PPUSH
2960: LD_INT 3
2962: PPUSH
2963: LD_INT 100
2965: PPUSH
2966: CALL_OW 291
// end ; end ;
2970: LD_VAR 0 1
2974: RET
// export function PowellSupport3 ; var veh , un ; begin
2975: LD_INT 0
2977: PPUSH
2978: PPUSH
2979: PPUSH
// uc_side = 1 ;
2980: LD_ADDR_OWVAR 20
2984: PUSH
2985: LD_INT 1
2987: ST_TO_ADDR
// uc_nation = 1 ;
2988: LD_ADDR_OWVAR 21
2992: PUSH
2993: LD_INT 1
2995: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2996: LD_INT 4
2998: PPUSH
2999: LD_INT 0
3001: PPUSH
3002: LD_INT 1
3004: PPUSH
3005: LD_INT 0
3007: PPUSH
3008: CALL 1339 0 4
// vc_chassis = us_medium_wheeled ;
3012: LD_ADDR_OWVAR 37
3016: PUSH
3017: LD_INT 2
3019: ST_TO_ADDR
// vc_engine = 3 ;
3020: LD_ADDR_OWVAR 39
3024: PUSH
3025: LD_INT 3
3027: ST_TO_ADDR
// vc_control = 3 ;
3028: LD_ADDR_OWVAR 38
3032: PUSH
3033: LD_INT 3
3035: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
3036: LD_ADDR_OWVAR 40
3040: PUSH
3041: LD_INT 12
3043: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
3044: LD_ADDR_EXP 20
3048: PUSH
3049: CALL_OW 45
3053: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
3054: LD_ADDR_EXP 21
3058: PUSH
3059: CALL_OW 45
3063: ST_TO_ADDR
// SetDir ( amCargo6 , 4 ) ;
3064: LD_EXP 20
3068: PPUSH
3069: LD_INT 4
3071: PPUSH
3072: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
3076: LD_EXP 21
3080: PPUSH
3081: LD_INT 4
3083: PPUSH
3084: CALL_OW 233
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
3088: LD_EXP 20
3092: PPUSH
3093: LD_INT 4
3095: PPUSH
3096: LD_INT 0
3098: PPUSH
3099: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
3103: LD_EXP 21
3107: PPUSH
3108: LD_INT 4
3110: PPUSH
3111: LD_INT 0
3113: PPUSH
3114: CALL_OW 49
// AddCargo ( amCargo6 , 1 , 100 ) ;
3118: LD_EXP 20
3122: PPUSH
3123: LD_INT 1
3125: PPUSH
3126: LD_INT 100
3128: PPUSH
3129: CALL_OW 291
// AddCargo ( amCargo7 , 1 , 100 ) ;
3133: LD_EXP 21
3137: PPUSH
3138: LD_INT 1
3140: PPUSH
3141: LD_INT 100
3143: PPUSH
3144: CALL_OW 291
// end ; end_of_file
3148: LD_VAR 0 1
3152: RET
// export function PrepareRussianCommander ; begin
3153: LD_INT 0
3155: PPUSH
// uc_side = 3 ;
3156: LD_ADDR_OWVAR 20
3160: PUSH
3161: LD_INT 3
3163: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ,  ) ;
3164: LD_ADDR_EXP 23
3168: PUSH
3169: LD_STRING Davidov
3171: PPUSH
3172: LD_INT 0
3174: PPUSH
3175: LD_STRING 
3177: PPUSH
3178: CALL 34107 0 3
3182: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3183: LD_EXP 23
3187: PPUSH
3188: LD_INT 3
3190: PPUSH
3191: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
3195: LD_ADDR_EXP 34
3199: PUSH
3200: LD_EXP 34
3204: PUSH
3205: LD_EXP 23
3209: ADD
3210: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3211: LD_EXP 34
3215: PPUSH
3216: LD_INT 4
3218: PPUSH
3219: CALL_OW 336
// end ;
3223: LD_VAR 0 1
3227: RET
// export function PrepareEastBase ; var i , un ; begin
3228: LD_INT 0
3230: PPUSH
3231: PPUSH
3232: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3233: LD_INT 3
3235: PPUSH
3236: LD_INT 3
3238: PPUSH
3239: LD_INT 121
3241: PPUSH
3242: LD_EXP 36
3246: PPUSH
3247: LD_EXP 37
3251: PPUSH
3252: CALL_OW 12
3256: PPUSH
3257: LD_INT 1
3259: PPUSH
3260: LD_INT 3
3262: PPUSH
3263: CALL 12945 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3267: LD_INT 3
3269: PPUSH
3270: LD_INT 3
3272: PPUSH
3273: LD_INT 121
3275: PPUSH
3276: LD_EXP 36
3280: PPUSH
3281: LD_EXP 37
3285: PPUSH
3286: CALL_OW 12
3290: PPUSH
3291: LD_INT 9
3293: PPUSH
3294: LD_INT 3
3296: PPUSH
3297: CALL 12945 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3301: LD_INT 3
3303: PPUSH
3304: LD_INT 3
3306: PPUSH
3307: LD_INT 4
3309: PPUSH
3310: LD_EXP 36
3314: PPUSH
3315: LD_EXP 37
3319: PPUSH
3320: CALL_OW 12
3324: PPUSH
3325: LD_INT 2
3327: PPUSH
3328: LD_INT 6
3330: PPUSH
3331: CALL 12945 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3335: LD_INT 3
3337: PPUSH
3338: LD_INT 3
3340: PPUSH
3341: LD_INT 112
3343: PPUSH
3344: LD_EXP 36
3348: PPUSH
3349: LD_EXP 37
3353: PPUSH
3354: CALL_OW 12
3358: PPUSH
3359: LD_INT 3
3361: PPUSH
3362: LD_INT 6
3364: PPUSH
3365: CALL 12945 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3369: LD_INT 3
3371: PPUSH
3372: LD_INT 3
3374: PPUSH
3375: LD_INT 47
3377: PPUSH
3378: LD_EXP 36
3382: PPUSH
3383: LD_EXP 37
3387: PPUSH
3388: CALL_OW 12
3392: PPUSH
3393: LD_INT 4
3395: PPUSH
3396: LD_INT 6
3398: PPUSH
3399: CALL 12945 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3403: LD_INT 3
3405: PPUSH
3406: LD_INT 3
3408: PPUSH
3409: LD_INT 129
3411: PPUSH
3412: LD_EXP 36
3416: PPUSH
3417: LD_EXP 37
3421: PPUSH
3422: CALL_OW 12
3426: PPUSH
3427: LD_INT 4
3429: PPUSH
3430: LD_INT 6
3432: PPUSH
3433: CALL 12945 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3437: LD_INT 3
3439: PPUSH
3440: LD_INT 3
3442: PPUSH
3443: LD_INT 135
3445: PPUSH
3446: LD_EXP 36
3450: PPUSH
3451: LD_EXP 37
3455: PPUSH
3456: CALL_OW 12
3460: PPUSH
3461: LD_INT 4
3463: PPUSH
3464: LD_INT 6
3466: PPUSH
3467: CALL 12945 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3471: LD_ADDR_VAR 0 2
3475: PUSH
3476: LD_INT 22
3478: PUSH
3479: LD_INT 3
3481: PUSH
3482: EMPTY
3483: LIST
3484: LIST
3485: PUSH
3486: LD_INT 30
3488: PUSH
3489: LD_INT 32
3491: PUSH
3492: EMPTY
3493: LIST
3494: LIST
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PPUSH
3500: CALL_OW 69
3504: PUSH
3505: FOR_IN
3506: IFFALSE 3546
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3508: LD_INT 3
3510: PPUSH
3511: LD_INT 3
3513: PPUSH
3514: LD_VAR 0 2
3518: PPUSH
3519: LD_EXP 36
3523: PPUSH
3524: LD_EXP 37
3528: PPUSH
3529: CALL_OW 12
3533: PPUSH
3534: LD_INT 1
3536: PPUSH
3537: LD_INT 1
3539: PPUSH
3540: CALL 12945 0 6
3544: GO 3505
3546: POP
3547: POP
// for i = 1 to 5 do
3548: LD_ADDR_VAR 0 2
3552: PUSH
3553: DOUBLE
3554: LD_INT 1
3556: DEC
3557: ST_TO_ADDR
3558: LD_INT 5
3560: PUSH
3561: FOR_TO
3562: IFFALSE 3661
// begin uc_side = 3 ;
3564: LD_ADDR_OWVAR 20
3568: PUSH
3569: LD_INT 3
3571: ST_TO_ADDR
// uc_nation = 3 ;
3572: LD_ADDR_OWVAR 21
3576: PUSH
3577: LD_INT 3
3579: ST_TO_ADDR
// hc_gallery =  ;
3580: LD_ADDR_OWVAR 33
3584: PUSH
3585: LD_STRING 
3587: ST_TO_ADDR
// hc_name =  ;
3588: LD_ADDR_OWVAR 26
3592: PUSH
3593: LD_STRING 
3595: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3596: LD_INT 0
3598: PPUSH
3599: LD_INT 4
3601: PPUSH
3602: LD_EXP 36
3606: PPUSH
3607: LD_EXP 37
3611: PPUSH
3612: CALL_OW 12
3616: PPUSH
3617: CALL_OW 380
// un = CreateHuman ;
3621: LD_ADDR_VAR 0 3
3625: PUSH
3626: CALL_OW 44
3630: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3631: LD_VAR 0 3
3635: PPUSH
3636: LD_INT 3
3638: PPUSH
3639: CALL_OW 52
// RuScientists = RuScientists ^ un ;
3643: LD_ADDR_EXP 34
3647: PUSH
3648: LD_EXP 34
3652: PUSH
3653: LD_VAR 0 3
3657: ADD
3658: ST_TO_ADDR
// end ;
3659: GO 3561
3661: POP
3662: POP
// end ;
3663: LD_VAR 0 1
3667: RET
// export function PrepareWestBase ; var i , un ; begin
3668: LD_INT 0
3670: PPUSH
3671: PPUSH
3672: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3673: LD_INT 3
3675: PPUSH
3676: LD_INT 3
3678: PPUSH
3679: LD_INT 6
3681: PPUSH
3682: LD_EXP 36
3686: PPUSH
3687: LD_EXP 37
3691: PPUSH
3692: CALL_OW 12
3696: PPUSH
3697: LD_INT 2
3699: PPUSH
3700: LD_INT 3
3702: PPUSH
3703: CALL 12945 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3707: LD_INT 3
3709: PPUSH
3710: LD_INT 3
3712: PPUSH
3713: LD_INT 91
3715: PPUSH
3716: LD_EXP 36
3720: PPUSH
3721: LD_EXP 37
3725: PPUSH
3726: CALL_OW 12
3730: PPUSH
3731: LD_INT 4
3733: PPUSH
3734: LD_INT 3
3736: PPUSH
3737: CALL 12945 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3741: LD_INT 3
3743: PPUSH
3744: LD_INT 3
3746: PPUSH
3747: LD_INT 21
3749: PPUSH
3750: LD_EXP 36
3754: PPUSH
3755: LD_EXP 37
3759: PPUSH
3760: CALL_OW 12
3764: PPUSH
3765: LD_INT 3
3767: PPUSH
3768: LD_INT 6
3770: PPUSH
3771: CALL 12945 0 6
// end ;
3775: LD_VAR 0 1
3779: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3780: LD_INT 0
3782: PPUSH
3783: PPUSH
3784: PPUSH
3785: PPUSH
// uc_side = 3 ;
3786: LD_ADDR_OWVAR 20
3790: PUSH
3791: LD_INT 3
3793: ST_TO_ADDR
// uc_nation = 3 ;
3794: LD_ADDR_OWVAR 21
3798: PUSH
3799: LD_INT 3
3801: ST_TO_ADDR
// for i = 1 to 5 do
3802: LD_ADDR_VAR 0 2
3806: PUSH
3807: DOUBLE
3808: LD_INT 1
3810: DEC
3811: ST_TO_ADDR
3812: LD_INT 5
3814: PUSH
3815: FOR_TO
3816: IFFALSE 3886
// begin hc_gallery =  ;
3818: LD_ADDR_OWVAR 33
3822: PUSH
3823: LD_STRING 
3825: ST_TO_ADDR
// hc_name =  ;
3826: LD_ADDR_OWVAR 26
3830: PUSH
3831: LD_STRING 
3833: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3834: LD_INT 0
3836: PPUSH
3837: LD_INT 9
3839: PPUSH
3840: LD_EXP 36
3844: PPUSH
3845: LD_EXP 37
3849: PPUSH
3850: CALL_OW 12
3854: PPUSH
3855: CALL_OW 380
// un = CreateHuman ;
3859: LD_ADDR_VAR 0 3
3863: PUSH
3864: CALL_OW 44
3868: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3869: LD_VAR 0 3
3873: PPUSH
3874: LD_INT 8
3876: PPUSH
3877: LD_INT 0
3879: PPUSH
3880: CALL_OW 49
// end ;
3884: GO 3815
3886: POP
3887: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
3888: LD_ADDR_VAR 0 2
3892: PUSH
3893: DOUBLE
3894: LD_INT 1
3896: DEC
3897: ST_TO_ADDR
3898: LD_INT 2
3900: PUSH
3901: LD_INT 3
3903: PUSH
3904: LD_INT 4
3906: PUSH
3907: EMPTY
3908: LIST
3909: LIST
3910: LIST
3911: PUSH
3912: LD_OWVAR 67
3916: ARRAY
3917: PUSH
3918: FOR_TO
3919: IFFALSE 3989
// begin hc_gallery =  ;
3921: LD_ADDR_OWVAR 33
3925: PUSH
3926: LD_STRING 
3928: ST_TO_ADDR
// hc_name =  ;
3929: LD_ADDR_OWVAR 26
3933: PUSH
3934: LD_STRING 
3936: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3937: LD_INT 0
3939: PPUSH
3940: LD_INT 4
3942: PPUSH
3943: LD_EXP 36
3947: PPUSH
3948: LD_EXP 37
3952: PPUSH
3953: CALL_OW 12
3957: PPUSH
3958: CALL_OW 380
// un = CreateHuman ;
3962: LD_ADDR_VAR 0 3
3966: PUSH
3967: CALL_OW 44
3971: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3972: LD_VAR 0 3
3976: PPUSH
3977: LD_INT 8
3979: PPUSH
3980: LD_INT 0
3982: PPUSH
3983: CALL_OW 49
// end ;
3987: GO 3918
3989: POP
3990: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3991: LD_ADDR_VAR 0 2
3995: PUSH
3996: DOUBLE
3997: LD_INT 1
3999: DEC
4000: ST_TO_ADDR
4001: LD_INT 3
4003: PUSH
4004: LD_INT 4
4006: PUSH
4007: LD_INT 5
4009: PUSH
4010: EMPTY
4011: LIST
4012: LIST
4013: LIST
4014: PUSH
4015: LD_OWVAR 67
4019: ARRAY
4020: PUSH
4021: FOR_TO
4022: IFFALSE 4218
// begin vc_engine = 3 ;
4024: LD_ADDR_OWVAR 39
4028: PUSH
4029: LD_INT 3
4031: ST_TO_ADDR
// vc_control = 1 ;
4032: LD_ADDR_OWVAR 38
4036: PUSH
4037: LD_INT 1
4039: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
4040: LD_ADDR_OWVAR 40
4044: PUSH
4045: LD_INT 42
4047: PUSH
4048: LD_INT 43
4050: PUSH
4051: LD_INT 44
4053: PUSH
4054: LD_INT 45
4056: PUSH
4057: LD_INT 46
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: LIST
4064: LIST
4065: LIST
4066: PUSH
4067: LD_INT 1
4069: PPUSH
4070: LD_INT 5
4072: PPUSH
4073: CALL_OW 12
4077: ARRAY
4078: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4079: LD_OWVAR 40
4083: PUSH
4084: LD_INT 46
4086: EQUAL
4087: IFFALSE 4099
// vc_chassis = ru_heavy_tracked else
4089: LD_ADDR_OWVAR 37
4093: PUSH
4094: LD_INT 24
4096: ST_TO_ADDR
4097: GO 4126
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4099: LD_ADDR_OWVAR 37
4103: PUSH
4104: LD_INT 22
4106: PUSH
4107: LD_INT 21
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: PUSH
4114: LD_INT 1
4116: PPUSH
4117: LD_INT 2
4119: PPUSH
4120: CALL_OW 12
4124: ARRAY
4125: ST_TO_ADDR
// veh = CreateVehicle ;
4126: LD_ADDR_VAR 0 4
4130: PUSH
4131: CALL_OW 45
4135: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4136: LD_VAR 0 4
4140: PPUSH
4141: LD_INT 3
4143: PPUSH
4144: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4148: LD_VAR 0 4
4152: PPUSH
4153: LD_INT 5
4155: PPUSH
4156: LD_INT 0
4158: PPUSH
4159: CALL_OW 49
// hc_gallery =  ;
4163: LD_ADDR_OWVAR 33
4167: PUSH
4168: LD_STRING 
4170: ST_TO_ADDR
// hc_name =  ;
4171: LD_ADDR_OWVAR 26
4175: PUSH
4176: LD_STRING 
4178: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
4179: LD_INT 0
4181: PPUSH
4182: LD_INT 3
4184: PPUSH
4185: LD_INT 10
4187: PPUSH
4188: CALL_OW 380
// un = CreateHuman ;
4192: LD_ADDR_VAR 0 3
4196: PUSH
4197: CALL_OW 44
4201: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4202: LD_VAR 0 3
4206: PPUSH
4207: LD_VAR 0 4
4211: PPUSH
4212: CALL_OW 52
// end ;
4216: GO 4021
4218: POP
4219: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
4220: LD_ADDR_VAR 0 2
4224: PUSH
4225: DOUBLE
4226: LD_INT 1
4228: DEC
4229: ST_TO_ADDR
4230: LD_INT 3
4232: PUSH
4233: LD_INT 4
4235: PUSH
4236: LD_INT 5
4238: PUSH
4239: EMPTY
4240: LIST
4241: LIST
4242: LIST
4243: PUSH
4244: LD_OWVAR 67
4248: ARRAY
4249: PUSH
4250: FOR_TO
4251: IFFALSE 4398
// begin vc_engine = 3 ;
4253: LD_ADDR_OWVAR 39
4257: PUSH
4258: LD_INT 3
4260: ST_TO_ADDR
// vc_control = 3 ;
4261: LD_ADDR_OWVAR 38
4265: PUSH
4266: LD_INT 3
4268: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
4269: LD_ADDR_OWVAR 40
4273: PUSH
4274: LD_INT 42
4276: PUSH
4277: LD_INT 43
4279: PUSH
4280: LD_INT 44
4282: PUSH
4283: LD_INT 45
4285: PUSH
4286: LD_INT 46
4288: PUSH
4289: LD_INT 49
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: PUSH
4300: LD_INT 1
4302: PPUSH
4303: LD_INT 5
4305: PPUSH
4306: CALL_OW 12
4310: ARRAY
4311: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4312: LD_OWVAR 40
4316: PUSH
4317: LD_INT 46
4319: EQUAL
4320: IFFALSE 4332
// vc_chassis = ru_heavy_tracked else
4322: LD_ADDR_OWVAR 37
4326: PUSH
4327: LD_INT 24
4329: ST_TO_ADDR
4330: GO 4359
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4332: LD_ADDR_OWVAR 37
4336: PUSH
4337: LD_INT 22
4339: PUSH
4340: LD_INT 21
4342: PUSH
4343: EMPTY
4344: LIST
4345: LIST
4346: PUSH
4347: LD_INT 1
4349: PPUSH
4350: LD_INT 2
4352: PPUSH
4353: CALL_OW 12
4357: ARRAY
4358: ST_TO_ADDR
// veh = CreateVehicle ;
4359: LD_ADDR_VAR 0 4
4363: PUSH
4364: CALL_OW 45
4368: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4369: LD_VAR 0 4
4373: PPUSH
4374: LD_INT 3
4376: PPUSH
4377: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4381: LD_VAR 0 4
4385: PPUSH
4386: LD_INT 6
4388: PPUSH
4389: LD_INT 0
4391: PPUSH
4392: CALL_OW 49
// end ;
4396: GO 4250
4398: POP
4399: POP
// end ; end_of_file
4400: LD_VAR 0 1
4404: RET
// export function PrepareKurt ; begin
4405: LD_INT 0
4407: PPUSH
// uc_side = 8 ;
4408: LD_ADDR_OWVAR 20
4412: PUSH
4413: LD_INT 8
4415: ST_TO_ADDR
// uc_nation = 2 ;
4416: LD_ADDR_OWVAR 21
4420: PUSH
4421: LD_INT 2
4423: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4424: LD_ADDR_OWVAR 37
4428: PUSH
4429: LD_INT 13
4431: ST_TO_ADDR
// vc_engine = 1 ;
4432: LD_ADDR_OWVAR 39
4436: PUSH
4437: LD_INT 1
4439: ST_TO_ADDR
// vc_control = 1 ;
4440: LD_ADDR_OWVAR 38
4444: PUSH
4445: LD_INT 1
4447: ST_TO_ADDR
// vc_weapon = 24 ;
4448: LD_ADDR_OWVAR 40
4452: PUSH
4453: LD_INT 24
4455: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4456: LD_ADDR_EXP 25
4460: PUSH
4461: CALL_OW 45
4465: ST_TO_ADDR
// if kurtStatus > 0 then
4466: LD_EXP 26
4470: PUSH
4471: LD_INT 0
4473: GREATER
4474: IFFALSE 4526
// begin Kurt = PrepareUnit ( Kurt , false ,  ) ;
4476: LD_ADDR_EXP 24
4480: PUSH
4481: LD_STRING Kurt
4483: PPUSH
4484: LD_INT 0
4486: PPUSH
4487: LD_STRING 
4489: PPUSH
4490: CALL 34107 0 3
4494: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4495: LD_EXP 25
4499: PPUSH
4500: LD_INT 4
4502: PPUSH
4503: LD_INT 0
4505: PPUSH
4506: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4510: LD_EXP 24
4514: PPUSH
4515: LD_EXP 25
4519: PPUSH
4520: CALL_OW 52
// end else
4524: GO 4603
// begin hc_name =  ;
4526: LD_ADDR_OWVAR 26
4530: PUSH
4531: LD_STRING 
4533: ST_TO_ADDR
// hc_gallery =  ;
4534: LD_ADDR_OWVAR 33
4538: PUSH
4539: LD_STRING 
4541: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4542: LD_INT 1
4544: PPUSH
4545: LD_INT 10
4547: PPUSH
4548: CALL_OW 381
// Kurt = CreateHuman ;
4552: LD_ADDR_EXP 24
4556: PUSH
4557: CALL_OW 44
4561: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4562: LD_EXP 25
4566: PPUSH
4567: LD_INT 4
4569: PPUSH
4570: LD_INT 0
4572: PPUSH
4573: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4577: LD_EXP 24
4581: PPUSH
4582: LD_EXP 25
4586: PPUSH
4587: CALL_OW 52
// SaveCharacters ( Kurt , AltKurt ) ;
4591: LD_EXP 24
4595: PPUSH
4596: LD_STRING AltKurt
4598: PPUSH
4599: CALL_OW 38
// end ; end ;
4603: LD_VAR 0 1
4607: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4608: LD_INT 0
4610: PPUSH
4611: PPUSH
4612: PPUSH
4613: PPUSH
// for i = 1 to 3 do
4614: LD_ADDR_VAR 0 2
4618: PUSH
4619: DOUBLE
4620: LD_INT 1
4622: DEC
4623: ST_TO_ADDR
4624: LD_INT 3
4626: PUSH
4627: FOR_TO
4628: IFFALSE 4749
// begin uc_side = 1 ;
4630: LD_ADDR_OWVAR 20
4634: PUSH
4635: LD_INT 1
4637: ST_TO_ADDR
// uc_nation = 2 ;
4638: LD_ADDR_OWVAR 21
4642: PUSH
4643: LD_INT 2
4645: ST_TO_ADDR
// hc_gallery =  ;
4646: LD_ADDR_OWVAR 33
4650: PUSH
4651: LD_STRING 
4653: ST_TO_ADDR
// hc_name =  ;
4654: LD_ADDR_OWVAR 26
4658: PUSH
4659: LD_STRING 
4661: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4662: LD_EXP 26
4666: PUSH
4667: LD_INT 0
4669: EQUAL
4670: PUSH
4671: LD_EXP 26
4675: PUSH
4676: LD_INT 2
4678: EQUAL
4679: OR
4680: IFFALSE 4697
// PrepareHuman ( false , 1 , 6 ) else
4682: LD_INT 0
4684: PPUSH
4685: LD_INT 1
4687: PPUSH
4688: LD_INT 6
4690: PPUSH
4691: CALL_OW 380
4695: GO 4710
// PrepareHuman ( false , 1 , 8 ) ;
4697: LD_INT 0
4699: PPUSH
4700: LD_INT 1
4702: PPUSH
4703: LD_INT 8
4705: PPUSH
4706: CALL_OW 380
// un = CreateHuman ;
4710: LD_ADDR_VAR 0 3
4714: PUSH
4715: CALL_OW 44
4719: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4720: LD_VAR 0 3
4724: PPUSH
4725: LD_INT 4
4727: PPUSH
4728: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4732: LD_VAR 0 3
4736: PPUSH
4737: LD_INT 4
4739: PPUSH
4740: LD_INT 0
4742: PPUSH
4743: CALL_OW 49
// end ;
4747: GO 4627
4749: POP
4750: POP
// vc_chassis = 14 ;
4751: LD_ADDR_OWVAR 37
4755: PUSH
4756: LD_INT 14
4758: ST_TO_ADDR
// vc_engine = 3 ;
4759: LD_ADDR_OWVAR 39
4763: PUSH
4764: LD_INT 3
4766: ST_TO_ADDR
// vc_control = 1 ;
4767: LD_ADDR_OWVAR 38
4771: PUSH
4772: LD_INT 1
4774: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4775: LD_ADDR_OWVAR 40
4779: PUSH
4780: LD_INT 27
4782: PUSH
4783: LD_INT 26
4785: PUSH
4786: LD_INT 28
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: LIST
4793: PUSH
4794: LD_INT 1
4796: PPUSH
4797: LD_INT 3
4799: PPUSH
4800: CALL_OW 12
4804: ARRAY
4805: ST_TO_ADDR
// veh = CreateVehicle ;
4806: LD_ADDR_VAR 0 4
4810: PUSH
4811: CALL_OW 45
4815: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4816: LD_VAR 0 4
4820: PPUSH
4821: LD_INT 4
4823: PPUSH
4824: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4828: LD_VAR 0 4
4832: PPUSH
4833: LD_INT 4
4835: PPUSH
4836: LD_INT 0
4838: PPUSH
4839: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4843: LD_EXP 26
4847: PUSH
4848: LD_INT 0
4850: EQUAL
4851: PUSH
4852: LD_EXP 26
4856: PUSH
4857: LD_INT 2
4859: EQUAL
4860: OR
4861: IFFALSE 4878
// PrepareHuman ( false , 3 , 6 ) else
4863: LD_INT 0
4865: PPUSH
4866: LD_INT 3
4868: PPUSH
4869: LD_INT 6
4871: PPUSH
4872: CALL_OW 380
4876: GO 4891
// PrepareHuman ( false , 3 , 8 ) ;
4878: LD_INT 0
4880: PPUSH
4881: LD_INT 3
4883: PPUSH
4884: LD_INT 8
4886: PPUSH
4887: CALL_OW 380
// un = CreateHuman ;
4891: LD_ADDR_VAR 0 3
4895: PUSH
4896: CALL_OW 44
4900: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4901: LD_VAR 0 3
4905: PPUSH
4906: LD_VAR 0 4
4910: PPUSH
4911: CALL_OW 52
// vc_chassis = 14 ;
4915: LD_ADDR_OWVAR 37
4919: PUSH
4920: LD_INT 14
4922: ST_TO_ADDR
// vc_engine = 3 ;
4923: LD_ADDR_OWVAR 39
4927: PUSH
4928: LD_INT 3
4930: ST_TO_ADDR
// vc_control = 1 ;
4931: LD_ADDR_OWVAR 38
4935: PUSH
4936: LD_INT 1
4938: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4939: LD_ADDR_OWVAR 40
4943: PUSH
4944: LD_INT 27
4946: PUSH
4947: LD_INT 26
4949: PUSH
4950: LD_INT 28
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: LIST
4957: PUSH
4958: LD_INT 1
4960: PPUSH
4961: LD_INT 3
4963: PPUSH
4964: CALL_OW 12
4968: ARRAY
4969: ST_TO_ADDR
// veh = CreateVehicle ;
4970: LD_ADDR_VAR 0 4
4974: PUSH
4975: CALL_OW 45
4979: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4980: LD_VAR 0 4
4984: PPUSH
4985: LD_INT 4
4987: PPUSH
4988: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4992: LD_VAR 0 4
4996: PPUSH
4997: LD_INT 4
4999: PPUSH
5000: LD_INT 0
5002: PPUSH
5003: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5007: LD_EXP 26
5011: PUSH
5012: LD_INT 0
5014: EQUAL
5015: PUSH
5016: LD_EXP 26
5020: PUSH
5021: LD_INT 2
5023: EQUAL
5024: OR
5025: IFFALSE 5042
// PrepareHuman ( false , 4 , 6 ) else
5027: LD_INT 0
5029: PPUSH
5030: LD_INT 4
5032: PPUSH
5033: LD_INT 6
5035: PPUSH
5036: CALL_OW 380
5040: GO 5055
// PrepareHuman ( false , 4 , 8 ) ;
5042: LD_INT 0
5044: PPUSH
5045: LD_INT 4
5047: PPUSH
5048: LD_INT 8
5050: PPUSH
5051: CALL_OW 380
// un = CreateHuman ;
5055: LD_ADDR_VAR 0 3
5059: PUSH
5060: CALL_OW 44
5064: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5065: LD_VAR 0 3
5069: PPUSH
5070: LD_INT 4
5072: PPUSH
5073: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5077: LD_VAR 0 3
5081: PPUSH
5082: LD_VAR 0 4
5086: PPUSH
5087: CALL_OW 52
// vc_chassis = 14 ;
5091: LD_ADDR_OWVAR 37
5095: PUSH
5096: LD_INT 14
5098: ST_TO_ADDR
// vc_engine = 3 ;
5099: LD_ADDR_OWVAR 39
5103: PUSH
5104: LD_INT 3
5106: ST_TO_ADDR
// vc_control = 1 ;
5107: LD_ADDR_OWVAR 38
5111: PUSH
5112: LD_INT 1
5114: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
5115: LD_ADDR_OWVAR 40
5119: PUSH
5120: LD_INT 27
5122: PUSH
5123: LD_INT 26
5125: PUSH
5126: LD_INT 28
5128: PUSH
5129: EMPTY
5130: LIST
5131: LIST
5132: LIST
5133: PUSH
5134: LD_INT 1
5136: PPUSH
5137: LD_INT 3
5139: PPUSH
5140: CALL_OW 12
5144: ARRAY
5145: ST_TO_ADDR
// veh = CreateVehicle ;
5146: LD_ADDR_VAR 0 4
5150: PUSH
5151: CALL_OW 45
5155: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5156: LD_VAR 0 4
5160: PPUSH
5161: LD_INT 4
5163: PPUSH
5164: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5168: LD_VAR 0 4
5172: PPUSH
5173: LD_INT 4
5175: PPUSH
5176: LD_INT 0
5178: PPUSH
5179: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5183: LD_EXP 26
5187: PUSH
5188: LD_INT 0
5190: EQUAL
5191: PUSH
5192: LD_EXP 26
5196: PUSH
5197: LD_INT 2
5199: EQUAL
5200: OR
5201: IFFALSE 5218
// PrepareHuman ( false , 2 , 4 ) else
5203: LD_INT 0
5205: PPUSH
5206: LD_INT 2
5208: PPUSH
5209: LD_INT 4
5211: PPUSH
5212: CALL_OW 380
5216: GO 5231
// PrepareHuman ( false , 2 , 8 ) ;
5218: LD_INT 0
5220: PPUSH
5221: LD_INT 2
5223: PPUSH
5224: LD_INT 8
5226: PPUSH
5227: CALL_OW 380
// un = CreateHuman ;
5231: LD_ADDR_VAR 0 3
5235: PUSH
5236: CALL_OW 44
5240: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5241: LD_VAR 0 3
5245: PPUSH
5246: LD_INT 4
5248: PPUSH
5249: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5253: LD_VAR 0 3
5257: PPUSH
5258: LD_VAR 0 4
5262: PPUSH
5263: CALL_OW 52
// end ;
5267: LD_VAR 0 1
5271: RET
// export function PrepareAttackLegion ; var i , un ; begin
5272: LD_INT 0
5274: PPUSH
5275: PPUSH
5276: PPUSH
// for i = 1 to 4 do
5277: LD_ADDR_VAR 0 2
5281: PUSH
5282: DOUBLE
5283: LD_INT 1
5285: DEC
5286: ST_TO_ADDR
5287: LD_INT 4
5289: PUSH
5290: FOR_TO
5291: IFFALSE 5401
// begin uc_side = 8 ;
5293: LD_ADDR_OWVAR 20
5297: PUSH
5298: LD_INT 8
5300: ST_TO_ADDR
// uc_nation = 2 ;
5301: LD_ADDR_OWVAR 21
5305: PUSH
5306: LD_INT 2
5308: ST_TO_ADDR
// hc_gallery =  ;
5309: LD_ADDR_OWVAR 33
5313: PUSH
5314: LD_STRING 
5316: ST_TO_ADDR
// hc_name =  ;
5317: LD_ADDR_OWVAR 26
5321: PUSH
5322: LD_STRING 
5324: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5325: LD_INT 0
5327: PPUSH
5328: LD_INT 1
5330: PUSH
5331: LD_INT 8
5333: PUSH
5334: EMPTY
5335: LIST
5336: LIST
5337: PUSH
5338: LD_INT 1
5340: PPUSH
5341: LD_INT 2
5343: PPUSH
5344: CALL_OW 12
5348: ARRAY
5349: PPUSH
5350: LD_INT 6
5352: PPUSH
5353: LD_INT 8
5355: PPUSH
5356: CALL_OW 12
5360: PPUSH
5361: CALL_OW 380
// un = CreateHuman ;
5365: LD_ADDR_VAR 0 3
5369: PUSH
5370: CALL_OW 44
5374: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5375: LD_VAR 0 3
5379: PPUSH
5380: LD_INT 19
5382: PPUSH
5383: LD_INT 0
5385: PPUSH
5386: CALL_OW 49
// ComCrawl ( un ) ;
5390: LD_VAR 0 3
5394: PPUSH
5395: CALL_OW 137
// end ;
5399: GO 5290
5401: POP
5402: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5403: LD_INT 1
5405: PPUSH
5406: LD_INT 8
5408: PPUSH
5409: LD_INT 2
5411: PPUSH
5412: LD_INT 1
5414: PPUSH
5415: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5419: LD_INT 20
5421: PPUSH
5422: LD_INT 3
5424: PPUSH
5425: CALL 14923 0 2
// end ; end_of_file
5429: LD_VAR 0 1
5433: RET
// every 1 do var i ;
5434: GO 5436
5436: DISABLE
5437: LD_INT 0
5439: PPUSH
// begin TeleportExit ( ruteleprt , 122 , 145 ) ;
5440: LD_INT 10
5442: PPUSH
5443: LD_INT 122
5445: PPUSH
5446: LD_INT 145
5448: PPUSH
5449: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
5453: LD_INT 137
5455: PPUSH
5456: LD_INT 84
5458: PPUSH
5459: LD_INT 61
5461: PPUSH
5462: CALL_OW 243
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5466: LD_EXP 1
5470: PPUSH
5471: CALL_OW 310
5475: PPUSH
5476: CALL_OW 87
// InGameOn ;
5480: CALL_OW 8
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 130 , 103 ) ;
5484: LD_INT 22
5486: PUSH
5487: LD_INT 1
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: PPUSH
5494: CALL_OW 69
5498: PPUSH
5499: LD_INT 130
5501: PPUSH
5502: LD_INT 103
5504: PPUSH
5505: CALL_OW 111
// AddComMoveXY ( i , 114 , 102 ) ;
5509: LD_VAR 0 1
5513: PPUSH
5514: LD_INT 114
5516: PPUSH
5517: LD_INT 102
5519: PPUSH
5520: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5524: LD_EXP 1
5528: PPUSH
5529: LD_STRING D1-JMM-1
5531: PPUSH
5532: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5536: LD_EXP 1
5540: PPUSH
5541: CALL_OW 310
5545: PPUSH
5546: CALL_OW 87
// if IsOk ( Donaldson ) then
5550: LD_EXP 3
5554: PPUSH
5555: CALL_OW 302
5559: IFFALSE 5639
// begin Say ( Donaldson , D1-Don-1 ) ;
5561: LD_EXP 3
5565: PPUSH
5566: LD_STRING D1-Don-1
5568: PPUSH
5569: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5573: LD_EXP 1
5577: PPUSH
5578: CALL_OW 310
5582: PPUSH
5583: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5587: LD_EXP 1
5591: PPUSH
5592: LD_STRING D1-JMM-2
5594: PPUSH
5595: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5599: LD_EXP 1
5603: PPUSH
5604: CALL_OW 310
5608: PPUSH
5609: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5613: LD_EXP 3
5617: PPUSH
5618: LD_STRING D1-Don-2
5620: PPUSH
5621: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5625: LD_EXP 1
5629: PPUSH
5630: CALL_OW 310
5634: PPUSH
5635: CALL_OW 87
// end ; AddComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 110 , 101 ) ;
5639: LD_INT 22
5641: PUSH
5642: LD_INT 1
5644: PUSH
5645: EMPTY
5646: LIST
5647: LIST
5648: PPUSH
5649: CALL_OW 69
5653: PPUSH
5654: LD_INT 110
5656: PPUSH
5657: LD_INT 101
5659: PPUSH
5660: CALL_OW 171
// wait ( 0 0$1 ) ;
5664: LD_INT 35
5666: PPUSH
5667: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5671: LD_EXP 1
5675: PPUSH
5676: CALL_OW 310
5680: PPUSH
5681: CALL_OW 87
// wait ( 0 0$1 ) ;
5685: LD_INT 35
5687: PPUSH
5688: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5692: LD_EXP 1
5696: PPUSH
5697: CALL_OW 310
5701: PPUSH
5702: CALL_OW 87
// wait ( 0 0$1 ) ;
5706: LD_INT 35
5708: PPUSH
5709: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5713: LD_EXP 1
5717: PPUSH
5718: CALL_OW 310
5722: PPUSH
5723: CALL_OW 87
// wait ( 0 0$1 ) ;
5727: LD_INT 35
5729: PPUSH
5730: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5734: LD_EXP 1
5738: PPUSH
5739: CALL_OW 310
5743: PPUSH
5744: CALL_OW 87
// end ;
5748: PPOPN 1
5750: END
// every 0 0$1 trigger SeeXY ( 1 , 102 , 94 ) do var i ;
5751: LD_INT 1
5753: PPUSH
5754: LD_INT 102
5756: PPUSH
5757: LD_INT 94
5759: PPUSH
5760: CALL_OW 293
5764: IFFALSE 5955
5766: GO 5768
5768: DISABLE
5769: LD_INT 0
5771: PPUSH
// begin CenterOnXY ( 102 , 94 ) ;
5772: LD_INT 102
5774: PPUSH
5775: LD_INT 94
5777: PPUSH
5778: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1-Sol1-2 ,  ) ;
5782: LD_INT 22
5784: PUSH
5785: LD_INT 1
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: PUSH
5792: LD_INT 26
5794: PUSH
5795: LD_INT 1
5797: PUSH
5798: EMPTY
5799: LIST
5800: LIST
5801: PUSH
5802: LD_INT 2
5804: PUSH
5805: LD_INT 25
5807: PUSH
5808: LD_INT 1
5810: PUSH
5811: EMPTY
5812: LIST
5813: LIST
5814: PUSH
5815: LD_INT 25
5817: PUSH
5818: LD_INT 2
5820: PUSH
5821: EMPTY
5822: LIST
5823: LIST
5824: PUSH
5825: LD_INT 25
5827: PUSH
5828: LD_INT 3
5830: PUSH
5831: EMPTY
5832: LIST
5833: LIST
5834: PUSH
5835: LD_INT 25
5837: PUSH
5838: LD_INT 4
5840: PUSH
5841: EMPTY
5842: LIST
5843: LIST
5844: PUSH
5845: LD_INT 25
5847: PUSH
5848: LD_INT 5
5850: PUSH
5851: EMPTY
5852: LIST
5853: LIST
5854: PUSH
5855: LD_INT 25
5857: PUSH
5858: LD_INT 8
5860: PUSH
5861: EMPTY
5862: LIST
5863: LIST
5864: PUSH
5865: EMPTY
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: LIST
5871: LIST
5872: LIST
5873: PUSH
5874: EMPTY
5875: LIST
5876: LIST
5877: LIST
5878: PPUSH
5879: CALL_OW 69
5883: PPUSH
5884: LD_STRING D1-Sol1-2
5886: PPUSH
5887: LD_STRING 
5889: PPUSH
5890: CALL 12328 0 3
// Say ( JMM , D1-JMM-3 ) ;
5894: LD_EXP 1
5898: PPUSH
5899: LD_STRING D1-JMM-3
5901: PPUSH
5902: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5906: LD_STRING M1
5908: PPUSH
5909: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5913: LD_ADDR_VAR 0 1
5917: PUSH
5918: LD_INT 22
5920: PUSH
5921: LD_INT 1
5923: PUSH
5924: EMPTY
5925: LIST
5926: LIST
5927: PPUSH
5928: CALL_OW 69
5932: PUSH
5933: FOR_IN
5934: IFFALSE 5953
// ComMoveXY ( i , 95 , 84 ) ;
5936: LD_VAR 0 1
5940: PPUSH
5941: LD_INT 95
5943: PPUSH
5944: LD_INT 84
5946: PPUSH
5947: CALL_OW 111
5951: GO 5933
5953: POP
5954: POP
// end ;
5955: PPOPN 1
5957: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5958: GO 5960
5960: DISABLE
5961: LD_INT 0
5963: PPUSH
5964: PPUSH
5965: PPUSH
5966: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5967: LD_ADDR_VAR 0 2
5971: PUSH
5972: LD_INT 8
5974: PPUSH
5975: LD_INT 22
5977: PUSH
5978: LD_INT 3
5980: PUSH
5981: EMPTY
5982: LIST
5983: LIST
5984: PUSH
5985: LD_INT 25
5987: PUSH
5988: LD_INT 9
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: PUSH
5995: EMPTY
5996: LIST
5997: LIST
5998: PPUSH
5999: CALL_OW 70
6003: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
6004: LD_ADDR_VAR 0 3
6008: PUSH
6009: LD_INT 22
6011: PUSH
6012: LD_INT 1
6014: PUSH
6015: EMPTY
6016: LIST
6017: LIST
6018: PUSH
6019: EMPTY
6020: LIST
6021: PPUSH
6022: CALL_OW 69
6026: ST_TO_ADDR
// enable ;
6027: ENABLE
// for i in your_units do
6028: LD_ADDR_VAR 0 1
6032: PUSH
6033: LD_VAR 0 3
6037: PUSH
6038: FOR_IN
6039: IFFALSE 6705
// begin if See ( 3 , i ) then
6041: LD_INT 3
6043: PPUSH
6044: LD_VAR 0 1
6048: PPUSH
6049: CALL_OW 292
6053: IFFALSE 6703
// begin disable ;
6055: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
6056: LD_VAR 0 2
6060: PPUSH
6061: LD_INT 96
6063: PPUSH
6064: LD_INT 85
6066: PPUSH
6067: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6071: LD_VAR 0 2
6075: PPUSH
6076: LD_INT 96
6078: PPUSH
6079: LD_INT 85
6081: PPUSH
6082: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6086: LD_VAR 0 2
6090: PPUSH
6091: LD_INT 96
6093: PPUSH
6094: LD_INT 85
6096: PPUSH
6097: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6101: LD_VAR 0 2
6105: PPUSH
6106: LD_INT 96
6108: PPUSH
6109: LD_INT 85
6111: PPUSH
6112: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6116: LD_VAR 0 2
6120: PPUSH
6121: LD_INT 96
6123: PPUSH
6124: LD_INT 85
6126: PPUSH
6127: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6131: LD_VAR 0 2
6135: PPUSH
6136: LD_INT 96
6138: PPUSH
6139: LD_INT 85
6141: PPUSH
6142: CALL_OW 214
// wait ( 0 0$2 ) ;
6146: LD_INT 70
6148: PPUSH
6149: CALL_OW 67
// Say ( JMM , D1a-JMM-1 ) ;
6153: LD_EXP 1
6157: PPUSH
6158: LD_STRING D1a-JMM-1
6160: PPUSH
6161: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
6165: LD_EXP 3
6169: PPUSH
6170: LD_STRING D1a-Don-1
6172: PPUSH
6173: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6177: LD_ADDR_VAR 0 1
6181: PUSH
6182: LD_INT 22
6184: PUSH
6185: LD_INT 1
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PPUSH
6192: CALL_OW 69
6196: PUSH
6197: FOR_IN
6198: IFFALSE 6217
// ComMoveXY ( i , 109 , 102 ) ;
6200: LD_VAR 0 1
6204: PPUSH
6205: LD_INT 109
6207: PPUSH
6208: LD_INT 102
6210: PPUSH
6211: CALL_OW 111
6215: GO 6197
6217: POP
6218: POP
// Say ( JMM , D1a-JMM-2 ) ;
6219: LD_EXP 1
6223: PPUSH
6224: LD_STRING D1a-JMM-2
6226: PPUSH
6227: CALL_OW 88
// wait ( 0 0$10 ) ;
6231: LD_INT 350
6233: PPUSH
6234: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6238: LD_EXP 1
6242: PPUSH
6243: CALL_OW 310
6247: PPUSH
6248: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6252: LD_EXP 3
6256: PPUSH
6257: LD_STRING D1b-Don-1
6259: PPUSH
6260: CALL_OW 88
// if IsOk ( Donaldson ) then
6264: LD_EXP 3
6268: PPUSH
6269: CALL_OW 302
6273: IFFALSE 6287
// Say ( JMM , D1b-JMM-1 ) ;
6275: LD_EXP 1
6279: PPUSH
6280: LD_STRING D1b-JMM-1
6282: PPUSH
6283: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6287: LD_INT 22
6289: PUSH
6290: LD_INT 1
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: LD_INT 26
6299: PUSH
6300: LD_INT 1
6302: PUSH
6303: EMPTY
6304: LIST
6305: LIST
6306: PUSH
6307: LD_INT 2
6309: PUSH
6310: LD_INT 25
6312: PUSH
6313: LD_INT 1
6315: PUSH
6316: EMPTY
6317: LIST
6318: LIST
6319: PUSH
6320: LD_INT 25
6322: PUSH
6323: LD_INT 2
6325: PUSH
6326: EMPTY
6327: LIST
6328: LIST
6329: PUSH
6330: LD_INT 25
6332: PUSH
6333: LD_INT 3
6335: PUSH
6336: EMPTY
6337: LIST
6338: LIST
6339: PUSH
6340: LD_INT 25
6342: PUSH
6343: LD_INT 4
6345: PUSH
6346: EMPTY
6347: LIST
6348: LIST
6349: PUSH
6350: LD_INT 25
6352: PUSH
6353: LD_INT 5
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: PUSH
6360: LD_INT 25
6362: PUSH
6363: LD_INT 8
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: PUSH
6379: EMPTY
6380: LIST
6381: LIST
6382: LIST
6383: PPUSH
6384: CALL_OW 69
6388: PPUSH
6389: LD_STRING D1b-Sol1-1
6391: PPUSH
6392: LD_STRING 
6394: PPUSH
6395: CALL 12328 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6399: LD_EXP 3
6403: PPUSH
6404: LD_STRING D1b-Don-2
6406: PPUSH
6407: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6411: LD_EXP 1
6415: PPUSH
6416: LD_STRING D1b-JMM-2
6418: PPUSH
6419: CALL_OW 88
// dec = ShowQuery1 ;
6423: LD_ADDR_VAR 0 4
6427: PUSH
6428: CALL 12797 0 0
6432: ST_TO_ADDR
// if dec = 1 then
6433: LD_VAR 0 4
6437: PUSH
6438: LD_INT 1
6440: EQUAL
6441: IFFALSE 6547
// begin Say ( JMM , D2-JMM-1 ) ;
6443: LD_EXP 1
6447: PPUSH
6448: LD_STRING D2-JMM-1
6450: PPUSH
6451: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6455: LD_EXP 22
6459: PPUSH
6460: LD_STRING D2-Pow-1
6462: PPUSH
6463: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6467: LD_EXP 1
6471: PPUSH
6472: LD_STRING D2a-JMM-1
6474: PPUSH
6475: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6479: LD_EXP 22
6483: PPUSH
6484: LD_STRING D2a-Pow-1
6486: PPUSH
6487: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6491: LD_EXP 1
6495: PPUSH
6496: LD_STRING D2a-JMM-2
6498: PPUSH
6499: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6503: LD_EXP 22
6507: PPUSH
6508: LD_STRING D2a-Pow-2
6510: PPUSH
6511: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6515: LD_EXP 1
6519: PPUSH
6520: LD_STRING D2a-JMM-3
6522: PPUSH
6523: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6527: LD_EXP 22
6531: PPUSH
6532: LD_STRING D2a-Pow-3
6534: PPUSH
6535: CALL_OW 94
// secondPass = 2 ;
6539: LD_ADDR_EXP 27
6543: PUSH
6544: LD_INT 2
6546: ST_TO_ADDR
// end ; if dec = 2 then
6547: LD_VAR 0 4
6551: PUSH
6552: LD_INT 2
6554: EQUAL
6555: IFFALSE 6649
// begin Say ( JMM , D2-JMM-1 ) ;
6557: LD_EXP 1
6561: PPUSH
6562: LD_STRING D2-JMM-1
6564: PPUSH
6565: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6569: LD_EXP 22
6573: PPUSH
6574: LD_STRING D2-Pow-1
6576: PPUSH
6577: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6581: LD_EXP 1
6585: PPUSH
6586: LD_STRING D2b-JMM-1
6588: PPUSH
6589: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6593: LD_EXP 22
6597: PPUSH
6598: LD_STRING D2b-Pow-1
6600: PPUSH
6601: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6605: LD_EXP 1
6609: PPUSH
6610: LD_STRING D2c-JMM-1
6612: PPUSH
6613: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6617: LD_EXP 22
6621: PPUSH
6622: LD_STRING D2c-Pow-1
6624: PPUSH
6625: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6629: LD_EXP 1
6633: PPUSH
6634: LD_STRING D2c-JMM-2
6636: PPUSH
6637: CALL_OW 88
// secondPass = 2 ;
6641: LD_ADDR_EXP 27
6645: PUSH
6646: LD_INT 2
6648: ST_TO_ADDR
// end ; if dec = 3 then
6649: LD_VAR 0 4
6653: PUSH
6654: LD_INT 3
6656: EQUAL
6657: IFFALSE 6667
// secondPass = 1 ;
6659: LD_ADDR_EXP 27
6663: PUSH
6664: LD_INT 1
6666: ST_TO_ADDR
// InGameOff ;
6667: CALL_OW 9
// ruAI = 1 ;
6671: LD_ADDR_EXP 41
6675: PUSH
6676: LD_INT 1
6678: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6679: LD_INT 1
6681: PPUSH
6682: LD_INT 3
6684: PPUSH
6685: LD_INT 2
6687: PPUSH
6688: LD_INT 1
6690: PPUSH
6691: CALL_OW 80
// SaveForQuickRestart ;
6695: CALL_OW 22
// exit ;
6699: POP
6700: POP
6701: GO 6707
// end ; end ;
6703: GO 6038
6705: POP
6706: POP
// end ;
6707: PPOPN 4
6709: END
// every 1 1$0 trigger secondPass = 2 do
6710: LD_EXP 27
6714: PUSH
6715: LD_INT 2
6717: EQUAL
6718: IFFALSE 6938
6720: GO 6722
6722: DISABLE
// begin PowellSupport1 ;
6723: CALL 1970 0 0
// DialogueOn ;
6727: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6731: LD_EXP 1
6735: PPUSH
6736: LD_STRING DC1-JMM-1
6738: PPUSH
6739: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6743: LD_EXP 22
6747: PPUSH
6748: LD_STRING DC1-Pow-1
6750: PPUSH
6751: CALL_OW 94
// DialogueOff ;
6755: CALL_OW 7
// wait ( 3 3$0 ) ;
6759: LD_INT 6300
6761: PPUSH
6762: CALL_OW 67
// PowellSupport2 ;
6766: CALL 2435 0 0
// DialogueOn ;
6770: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6774: LD_EXP 1
6778: PPUSH
6779: LD_STRING DC2-JMM-1
6781: PPUSH
6782: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6786: LD_EXP 22
6790: PPUSH
6791: LD_STRING DC2-Pow-1
6793: PPUSH
6794: CALL_OW 94
// DialogueOff ;
6798: CALL_OW 7
// wait ( 3 3$00 ) ;
6802: LD_INT 6300
6804: PPUSH
6805: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6809: LD_INT 35
6811: PPUSH
6812: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and not FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
6816: LD_INT 22
6818: PUSH
6819: LD_INT 1
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PUSH
6826: LD_INT 2
6828: PUSH
6829: LD_INT 30
6831: PUSH
6832: LD_INT 0
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: PUSH
6839: LD_INT 30
6841: PUSH
6842: LD_INT 1
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: LIST
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PPUSH
6858: CALL_OW 69
6862: PUSH
6863: LD_INT 11
6865: PPUSH
6866: LD_INT 22
6868: PUSH
6869: LD_INT 3
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: PPUSH
6876: CALL_OW 70
6880: NOT
6881: AND
6882: IFFALSE 6809
// wait ( 0 0$10 ) ;
6884: LD_INT 350
6886: PPUSH
6887: CALL_OW 67
// Legion ;
6891: CALL 6939 0 0
// wait ( 6 6$0 ) ;
6895: LD_INT 12600
6897: PPUSH
6898: CALL_OW 67
// PowellSupport3 ;
6902: CALL 2975 0 0
// DialogueOn ;
6906: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6910: LD_EXP 22
6914: PPUSH
6915: LD_STRING DC3-Pow-1
6917: PPUSH
6918: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6922: LD_EXP 1
6926: PPUSH
6927: LD_STRING DC3-JMM-1
6929: PPUSH
6930: CALL_OW 88
// DialogueOff ;
6934: CALL_OW 7
// end ;
6938: END
// export function Legion ; var i , dec1 , dec2 , tmp , tmp2 , tmp3 , crates , oil , siberite , cr , sb , payForNeutral , payForHelp , query1 , query2 ; begin
6939: LD_INT 0
6941: PPUSH
6942: PPUSH
6943: PPUSH
6944: PPUSH
6945: PPUSH
6946: PPUSH
6947: PPUSH
6948: PPUSH
6949: PPUSH
6950: PPUSH
6951: PPUSH
6952: PPUSH
6953: PPUSH
6954: PPUSH
6955: PPUSH
6956: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6957: LD_ADDR_VAR 0 5
6961: PUSH
6962: LD_INT 22
6964: PUSH
6965: LD_INT 1
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: PUSH
6972: LD_INT 21
6974: PUSH
6975: LD_INT 3
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: LD_INT 2
6984: PUSH
6985: LD_INT 30
6987: PUSH
6988: LD_INT 0
6990: PUSH
6991: EMPTY
6992: LIST
6993: LIST
6994: PUSH
6995: LD_INT 30
6997: PUSH
6998: LD_INT 1
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: PUSH
7005: EMPTY
7006: LIST
7007: LIST
7008: LIST
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: LIST
7014: PPUSH
7015: CALL_OW 69
7019: ST_TO_ADDR
// crates := 0 ;
7020: LD_ADDR_VAR 0 8
7024: PUSH
7025: LD_INT 0
7027: ST_TO_ADDR
// oil := 0 ;
7028: LD_ADDR_VAR 0 9
7032: PUSH
7033: LD_INT 0
7035: ST_TO_ADDR
// siberite := 0 ;
7036: LD_ADDR_VAR 0 10
7040: PUSH
7041: LD_INT 0
7043: ST_TO_ADDR
// payForNeutral := false ;
7044: LD_ADDR_VAR 0 13
7048: PUSH
7049: LD_INT 0
7051: ST_TO_ADDR
// payForHelp := false ;
7052: LD_ADDR_VAR 0 14
7056: PUSH
7057: LD_INT 0
7059: ST_TO_ADDR
// for i in tmp do
7060: LD_ADDR_VAR 0 2
7064: PUSH
7065: LD_VAR 0 5
7069: PUSH
7070: FOR_IN
7071: IFFALSE 7162
// begin crates := crates + GetResourceType ( GetBase ( i ) , 1 ) ;
7073: LD_ADDR_VAR 0 8
7077: PUSH
7078: LD_VAR 0 8
7082: PUSH
7083: LD_VAR 0 2
7087: PPUSH
7088: CALL_OW 274
7092: PPUSH
7093: LD_INT 1
7095: PPUSH
7096: CALL_OW 275
7100: PLUS
7101: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( i ) , 2 ) ;
7102: LD_ADDR_VAR 0 9
7106: PUSH
7107: LD_VAR 0 9
7111: PUSH
7112: LD_VAR 0 2
7116: PPUSH
7117: CALL_OW 274
7121: PPUSH
7122: LD_INT 2
7124: PPUSH
7125: CALL_OW 275
7129: PLUS
7130: ST_TO_ADDR
// siberite := siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
7131: LD_ADDR_VAR 0 10
7135: PUSH
7136: LD_VAR 0 10
7140: PUSH
7141: LD_VAR 0 2
7145: PPUSH
7146: CALL_OW 274
7150: PPUSH
7151: LD_INT 3
7153: PPUSH
7154: CALL_OW 275
7158: PLUS
7159: ST_TO_ADDR
// end ;
7160: GO 7070
7162: POP
7163: POP
// PrepareKurt ;
7164: CALL 4405 0 0
// if not Kurt then
7168: LD_EXP 24
7172: NOT
7173: IFFALSE 7177
// exit ;
7175: GO 9309
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7177: LD_EXP 25
7181: PPUSH
7182: LD_INT 144
7184: PPUSH
7185: LD_INT 111
7187: PPUSH
7188: CALL_OW 111
// wait ( 0 0$2 ) ;
7192: LD_INT 70
7194: PPUSH
7195: CALL_OW 67
// PlaceSeeing ( 167 , 121 , 1 , - 10 ) ;
7199: LD_INT 167
7201: PPUSH
7202: LD_INT 121
7204: PPUSH
7205: LD_INT 1
7207: PPUSH
7208: LD_INT 10
7210: NEG
7211: PPUSH
7212: CALL_OW 330
// ComExitVehicle ( Kurt ) ;
7216: LD_EXP 24
7220: PPUSH
7221: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7225: LD_EXP 24
7229: PPUSH
7230: CALL_OW 87
// wait ( 0 0$1 ) ;
7234: LD_INT 35
7236: PPUSH
7237: CALL_OW 67
// DialogueOn ;
7241: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7245: LD_INT 22
7247: PUSH
7248: LD_INT 1
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: PUSH
7255: LD_INT 26
7257: PUSH
7258: LD_INT 1
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: PUSH
7265: LD_INT 2
7267: PUSH
7268: LD_INT 25
7270: PUSH
7271: LD_INT 1
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: PUSH
7278: LD_INT 25
7280: PUSH
7281: LD_INT 2
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: PUSH
7288: LD_INT 25
7290: PUSH
7291: LD_INT 3
7293: PUSH
7294: EMPTY
7295: LIST
7296: LIST
7297: PUSH
7298: LD_INT 25
7300: PUSH
7301: LD_INT 4
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: PUSH
7308: LD_INT 25
7310: PUSH
7311: LD_INT 5
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: PUSH
7318: LD_INT 25
7320: PUSH
7321: LD_INT 8
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: LIST
7341: PPUSH
7342: CALL_OW 69
7346: PPUSH
7347: LD_STRING D3-Sol1-1
7349: PPUSH
7350: LD_STRING 
7352: PPUSH
7353: CALL 12328 0 3
// if KurtStatus then
7357: LD_EXP 26
7361: IFFALSE 7461
// begin Say ( Kurt , D3-Kurt-1 ) ;
7363: LD_EXP 24
7367: PPUSH
7368: LD_STRING D3-Kurt-1
7370: PPUSH
7371: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7375: LD_EXP 1
7379: PPUSH
7380: LD_STRING D3-JMM-1
7382: PPUSH
7383: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7387: LD_EXP 24
7391: PPUSH
7392: LD_STRING D3-Kurt-2
7394: PPUSH
7395: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7399: LD_EXP 1
7403: PPUSH
7404: LD_STRING D3-JMM-2
7406: PPUSH
7407: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7411: LD_EXP 24
7415: PPUSH
7416: LD_STRING D3-Kurt-4
7418: PPUSH
7419: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7423: LD_EXP 1
7427: PPUSH
7428: LD_STRING D3-JMM-4
7430: PPUSH
7431: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7435: LD_EXP 24
7439: PPUSH
7440: LD_STRING D3-Kurt-5
7442: PPUSH
7443: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7447: LD_EXP 24
7451: PPUSH
7452: LD_STRING D3-Kurt-5a
7454: PPUSH
7455: CALL_OW 88
// end else
7459: GO 7557
// begin Say ( Kurt , D3-Kurt-1 ) ;
7461: LD_EXP 24
7465: PPUSH
7466: LD_STRING D3-Kurt-1
7468: PPUSH
7469: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7473: LD_EXP 1
7477: PPUSH
7478: LD_STRING D3-JMM-1
7480: PPUSH
7481: CALL_OW 88
// Say ( Kurt , D3-Kurt-3 ) ;
7485: LD_EXP 24
7489: PPUSH
7490: LD_STRING D3-Kurt-3
7492: PPUSH
7493: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7497: LD_EXP 1
7501: PPUSH
7502: LD_STRING D3-JMM-3
7504: PPUSH
7505: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7509: LD_EXP 24
7513: PPUSH
7514: LD_STRING D3-Kurt-4
7516: PPUSH
7517: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7521: LD_EXP 1
7525: PPUSH
7526: LD_STRING D3-JMM-4
7528: PPUSH
7529: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7533: LD_EXP 24
7537: PPUSH
7538: LD_STRING D3-Kurt-5
7540: PPUSH
7541: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
7545: LD_EXP 24
7549: PPUSH
7550: LD_STRING D3-Kurt-5b
7552: PPUSH
7553: CALL_OW 88
// end ; if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
7557: LD_VAR 0 8
7561: PUSH
7562: LD_INT 120
7564: PUSH
7565: LD_INT 60
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: PUSH
7572: LD_EXP 26
7576: PUSH
7577: LD_INT 1
7579: PLUS
7580: ARRAY
7581: GREATEREQUAL
7582: PUSH
7583: LD_VAR 0 10
7587: PUSH
7588: LD_INT 120
7590: PUSH
7591: LD_INT 60
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: PUSH
7598: LD_EXP 26
7602: PUSH
7603: LD_INT 1
7605: PLUS
7606: ARRAY
7607: GREATEREQUAL
7608: AND
7609: IFFALSE 7661
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
7611: LD_ADDR_VAR 0 3
7615: PUSH
7616: LD_STRING Q2
7618: PUSH
7619: LD_STRING Q2K
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: PUSH
7626: LD_EXP 26
7630: PUSH
7631: LD_INT 1
7633: PLUS
7634: ARRAY
7635: PPUSH
7636: LD_INT 1
7638: PUSH
7639: LD_INT 2
7641: PUSH
7642: LD_INT 3
7644: PUSH
7645: LD_INT 4
7647: PUSH
7648: EMPTY
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: PPUSH
7654: CALL_OW 98
7658: ST_TO_ADDR
7659: GO 7705
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 3 , 4 ] ) ;
7661: LD_ADDR_VAR 0 3
7665: PUSH
7666: LD_STRING Q2
7668: PUSH
7669: LD_STRING Q2K
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PUSH
7676: LD_EXP 26
7680: PUSH
7681: LD_INT 1
7683: PLUS
7684: ARRAY
7685: PPUSH
7686: LD_INT 1
7688: PUSH
7689: LD_INT 3
7691: PUSH
7692: LD_INT 4
7694: PUSH
7695: EMPTY
7696: LIST
7697: LIST
7698: LIST
7699: PPUSH
7700: CALL_OW 98
7704: ST_TO_ADDR
// if dec1 = 1 then
7705: LD_VAR 0 3
7709: PUSH
7710: LD_INT 1
7712: EQUAL
7713: IFFALSE 7747
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7715: LD_EXP 1
7719: PPUSH
7720: LD_STRING D3Ka-JMM-1
7722: PPUSH
7723: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7727: LD_EXP 24
7731: PPUSH
7732: LD_STRING D3Ka-Kurt-1
7734: PPUSH
7735: CALL_OW 88
// warWithLegion = 1 ;
7739: LD_ADDR_EXP 30
7743: PUSH
7744: LD_INT 1
7746: ST_TO_ADDR
// end ; if dec1 = 2 then
7747: LD_VAR 0 3
7751: PUSH
7752: LD_INT 2
7754: EQUAL
7755: IFFALSE 7839
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7757: LD_EXP 1
7761: PPUSH
7762: LD_STRING D3Kb-JMM-1
7764: PPUSH
7765: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7769: LD_EXP 24
7773: PPUSH
7774: LD_STRING D3Kb-Kurt-1
7776: PPUSH
7777: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7781: LD_ADDR_VAR 0 11
7785: PUSH
7786: LD_INT 120
7788: PUSH
7789: LD_INT 60
7791: PUSH
7792: EMPTY
7793: LIST
7794: LIST
7795: PUSH
7796: LD_EXP 26
7800: PUSH
7801: LD_INT 1
7803: PLUS
7804: ARRAY
7805: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7806: LD_ADDR_VAR 0 12
7810: PUSH
7811: LD_INT 120
7813: PUSH
7814: LD_INT 60
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: PUSH
7821: LD_EXP 26
7825: PUSH
7826: LD_INT 1
7828: PLUS
7829: ARRAY
7830: ST_TO_ADDR
// payForNeutral := true ;
7831: LD_ADDR_VAR 0 13
7835: PUSH
7836: LD_INT 1
7838: ST_TO_ADDR
// end ; if dec1 = 3 then
7839: LD_VAR 0 3
7843: PUSH
7844: LD_INT 3
7846: EQUAL
7847: IFFALSE 8082
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7849: LD_EXP 1
7853: PPUSH
7854: LD_STRING D3Kc1-JMM-1
7856: PPUSH
7857: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7861: LD_EXP 24
7865: PPUSH
7866: LD_STRING D3Kc1-Kurt-1
7868: PPUSH
7869: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7873: LD_EXP 1
7877: PPUSH
7878: LD_STRING D3Kc1-JMM-2
7880: PPUSH
7881: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7885: LD_EXP 24
7889: PPUSH
7890: LD_STRING D3Kc1-Kurt-2
7892: PPUSH
7893: CALL_OW 88
// askSiberite = 1 ;
7897: LD_ADDR_EXP 32
7901: PUSH
7902: LD_INT 1
7904: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7905: LD_ADDR_VAR 0 4
7909: PUSH
7910: LD_STRING Q2b
7912: PPUSH
7913: LD_INT 1
7915: PUSH
7916: LD_INT 2
7918: PUSH
7919: LD_INT 3
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: LIST
7926: PPUSH
7927: CALL_OW 98
7931: ST_TO_ADDR
// if dec2 = 1 then
7932: LD_VAR 0 4
7936: PUSH
7937: LD_INT 1
7939: EQUAL
7940: IFFALSE 7974
// begin Say ( JMM , D4a-JMM-1 ) ;
7942: LD_EXP 1
7946: PPUSH
7947: LD_STRING D4a-JMM-1
7949: PPUSH
7950: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7954: LD_EXP 24
7958: PPUSH
7959: LD_STRING D4b-Kurt-1
7961: PPUSH
7962: CALL_OW 88
// warWithLegion = 1 ;
7966: LD_ADDR_EXP 30
7970: PUSH
7971: LD_INT 1
7973: ST_TO_ADDR
// end ; if dec2 = 2 then
7974: LD_VAR 0 4
7978: PUSH
7979: LD_INT 2
7981: EQUAL
7982: IFFALSE 8016
// begin Say ( JMM , D4b-JMM-1 ) ;
7984: LD_EXP 1
7988: PPUSH
7989: LD_STRING D4b-JMM-1
7991: PPUSH
7992: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7996: LD_EXP 24
8000: PPUSH
8001: LD_STRING D4b-Kurt-1
8003: PPUSH
8004: CALL_OW 88
// warWithLegion = 1 ;
8008: LD_ADDR_EXP 30
8012: PUSH
8013: LD_INT 1
8015: ST_TO_ADDR
// end ; if dec2 = 3 then
8016: LD_VAR 0 4
8020: PUSH
8021: LD_INT 3
8023: EQUAL
8024: IFFALSE 8082
// begin Say ( JMM , D4c-JMM-1 ) ;
8026: LD_EXP 1
8030: PPUSH
8031: LD_STRING D4c-JMM-1
8033: PPUSH
8034: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8038: LD_EXP 24
8042: PPUSH
8043: LD_STRING D4c-Kurt-1
8045: PPUSH
8046: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8050: LD_EXP 1
8054: PPUSH
8055: LD_STRING D4c-JMM-2
8057: PPUSH
8058: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8062: LD_EXP 24
8066: PPUSH
8067: LD_STRING D4c-Kurt-2
8069: PPUSH
8070: CALL_OW 88
// fakeInfo = 1 ;
8074: LD_ADDR_EXP 31
8078: PUSH
8079: LD_INT 1
8081: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
8082: LD_VAR 0 3
8086: PUSH
8087: LD_INT 4
8089: EQUAL
8090: IFFALSE 9165
// begin Say ( JMM , D3Kd-JMM-1 ) ;
8092: LD_EXP 1
8096: PPUSH
8097: LD_STRING D3Kd-JMM-1
8099: PPUSH
8100: CALL_OW 88
// if crates >= [ 200 , 120 ] [ KurtStatus + 1 ] and siberite >= [ 200 , 120 ] [ KurtStatus + 1 ] then
8104: LD_VAR 0 8
8108: PUSH
8109: LD_INT 200
8111: PUSH
8112: LD_INT 120
8114: PUSH
8115: EMPTY
8116: LIST
8117: LIST
8118: PUSH
8119: LD_EXP 26
8123: PUSH
8124: LD_INT 1
8126: PLUS
8127: ARRAY
8128: GREATEREQUAL
8129: PUSH
8130: LD_VAR 0 10
8134: PUSH
8135: LD_INT 200
8137: PUSH
8138: LD_INT 120
8140: PUSH
8141: EMPTY
8142: LIST
8143: LIST
8144: PUSH
8145: LD_EXP 26
8149: PUSH
8150: LD_INT 1
8152: PLUS
8153: ARRAY
8154: GREATEREQUAL
8155: AND
8156: IFFALSE 8208
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8158: LD_ADDR_VAR 0 4
8162: PUSH
8163: LD_STRING Q2a
8165: PUSH
8166: LD_STRING Q2aK
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: PUSH
8173: LD_EXP 26
8177: PUSH
8178: LD_INT 1
8180: PLUS
8181: ARRAY
8182: PPUSH
8183: LD_INT 1
8185: PUSH
8186: LD_INT 2
8188: PUSH
8189: LD_INT 3
8191: PUSH
8192: LD_INT 4
8194: PUSH
8195: EMPTY
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: PPUSH
8201: CALL_OW 98
8205: ST_TO_ADDR
8206: GO 8385
// if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
8208: LD_VAR 0 8
8212: PUSH
8213: LD_INT 120
8215: PUSH
8216: LD_INT 60
8218: PUSH
8219: EMPTY
8220: LIST
8221: LIST
8222: PUSH
8223: LD_EXP 26
8227: PUSH
8228: LD_INT 1
8230: PLUS
8231: ARRAY
8232: GREATEREQUAL
8233: PUSH
8234: LD_VAR 0 10
8238: PUSH
8239: LD_INT 120
8241: PUSH
8242: LD_INT 60
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: PUSH
8249: LD_EXP 26
8253: PUSH
8254: LD_INT 1
8256: PLUS
8257: ARRAY
8258: GREATEREQUAL
8259: AND
8260: IFFALSE 8308
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 4 ] ) else
8262: LD_ADDR_VAR 0 4
8266: PUSH
8267: LD_STRING Q2a
8269: PUSH
8270: LD_STRING Q2aK
8272: PUSH
8273: EMPTY
8274: LIST
8275: LIST
8276: PUSH
8277: LD_EXP 26
8281: PUSH
8282: LD_INT 1
8284: PLUS
8285: ARRAY
8286: PPUSH
8287: LD_INT 1
8289: PUSH
8290: LD_INT 2
8292: PUSH
8293: LD_INT 4
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: LIST
8300: PPUSH
8301: CALL_OW 98
8305: ST_TO_ADDR
8306: GO 8385
// begin case Query ( [ Q2d , Q2dK ] [ KurtStatus + 1 ] ) of 1 :
8308: LD_STRING Q2d
8310: PUSH
8311: LD_STRING Q2dK
8313: PUSH
8314: EMPTY
8315: LIST
8316: LIST
8317: PUSH
8318: LD_EXP 26
8322: PUSH
8323: LD_INT 1
8325: PLUS
8326: ARRAY
8327: PPUSH
8328: CALL_OW 97
8332: PUSH
8333: LD_INT 1
8335: DOUBLE
8336: EQUAL
8337: IFTRUE 8341
8339: GO 8344
8341: POP
// ; end ;
8342: GO 8345
8344: POP
// dec2 := 0 ;
8345: LD_ADDR_VAR 0 4
8349: PUSH
8350: LD_INT 0
8352: ST_TO_ADDR
// Say ( JMM , D3Kc1-JMM-1 ) ;
8353: LD_EXP 1
8357: PPUSH
8358: LD_STRING D3Kc1-JMM-1
8360: PPUSH
8361: CALL_OW 88
// Say ( Kurt , D3Kc2-Kurt-1 ) ;
8365: LD_EXP 24
8369: PPUSH
8370: LD_STRING D3Kc2-Kurt-1
8372: PPUSH
8373: CALL_OW 88
// warWithLegion := 1 ;
8377: LD_ADDR_EXP 30
8381: PUSH
8382: LD_INT 1
8384: ST_TO_ADDR
// end ; if dec2 = 1 then
8385: LD_VAR 0 4
8389: PUSH
8390: LD_INT 1
8392: EQUAL
8393: IFFALSE 8427
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8395: LD_EXP 1
8399: PPUSH
8400: LD_STRING D5Ka-JMM-1
8402: PPUSH
8403: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
8407: LD_EXP 24
8411: PPUSH
8412: LD_STRING D5Ka-Kurt-1
8414: PPUSH
8415: CALL_OW 88
// warWithLegion = 1 ;
8419: LD_ADDR_EXP 30
8423: PUSH
8424: LD_INT 1
8426: ST_TO_ADDR
// end ; if dec2 = 2 then
8427: LD_VAR 0 4
8431: PUSH
8432: LD_INT 2
8434: EQUAL
8435: IFFALSE 8519
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8437: LD_EXP 1
8441: PPUSH
8442: LD_STRING D3Kb-JMM-1
8444: PPUSH
8445: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8449: LD_EXP 24
8453: PPUSH
8454: LD_STRING D3Kb-Kurt-1
8456: PPUSH
8457: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8461: LD_ADDR_VAR 0 11
8465: PUSH
8466: LD_INT 120
8468: PUSH
8469: LD_INT 60
8471: PUSH
8472: EMPTY
8473: LIST
8474: LIST
8475: PUSH
8476: LD_EXP 26
8480: PUSH
8481: LD_INT 1
8483: PLUS
8484: ARRAY
8485: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8486: LD_ADDR_VAR 0 12
8490: PUSH
8491: LD_INT 120
8493: PUSH
8494: LD_INT 60
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: PUSH
8501: LD_EXP 26
8505: PUSH
8506: LD_INT 1
8508: PLUS
8509: ARRAY
8510: ST_TO_ADDR
// payForNeutral := true ;
8511: LD_ADDR_VAR 0 13
8515: PUSH
8516: LD_INT 1
8518: ST_TO_ADDR
// end ; if dec2 = 3 then
8519: LD_VAR 0 4
8523: PUSH
8524: LD_INT 3
8526: EQUAL
8527: IFFALSE 8611
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8529: LD_EXP 1
8533: PPUSH
8534: LD_STRING D3Ke-JMM-1
8536: PPUSH
8537: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
8541: LD_EXP 24
8545: PPUSH
8546: LD_STRING D3Ke-Kurt-1
8548: PPUSH
8549: CALL_OW 88
// cr := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8553: LD_ADDR_VAR 0 11
8557: PUSH
8558: LD_INT 200
8560: PUSH
8561: LD_INT 120
8563: PUSH
8564: EMPTY
8565: LIST
8566: LIST
8567: PUSH
8568: LD_EXP 26
8572: PUSH
8573: LD_INT 1
8575: PLUS
8576: ARRAY
8577: ST_TO_ADDR
// sb := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8578: LD_ADDR_VAR 0 12
8582: PUSH
8583: LD_INT 200
8585: PUSH
8586: LD_INT 120
8588: PUSH
8589: EMPTY
8590: LIST
8591: LIST
8592: PUSH
8593: LD_EXP 26
8597: PUSH
8598: LD_INT 1
8600: PLUS
8601: ARRAY
8602: ST_TO_ADDR
// payForHelp := true ;
8603: LD_ADDR_VAR 0 14
8607: PUSH
8608: LD_INT 1
8610: ST_TO_ADDR
// end ; if dec2 = 4 then
8611: LD_VAR 0 4
8615: PUSH
8616: LD_INT 4
8618: EQUAL
8619: IFFALSE 8854
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8621: LD_EXP 1
8625: PPUSH
8626: LD_STRING D3Kc1-JMM-1
8628: PPUSH
8629: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8633: LD_EXP 24
8637: PPUSH
8638: LD_STRING D3Kc1-Kurt-1
8640: PPUSH
8641: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8645: LD_EXP 1
8649: PPUSH
8650: LD_STRING D3Kc1-JMM-2
8652: PPUSH
8653: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8657: LD_EXP 24
8661: PPUSH
8662: LD_STRING D3Kc1-Kurt-2
8664: PPUSH
8665: CALL_OW 88
// askSiberite = 1 ;
8669: LD_ADDR_EXP 32
8673: PUSH
8674: LD_INT 1
8676: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8677: LD_ADDR_VAR 0 4
8681: PUSH
8682: LD_STRING Q2b
8684: PPUSH
8685: LD_INT 1
8687: PUSH
8688: LD_INT 2
8690: PUSH
8691: LD_INT 3
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: LIST
8698: PPUSH
8699: CALL_OW 98
8703: ST_TO_ADDR
// if dec2 = 1 then
8704: LD_VAR 0 4
8708: PUSH
8709: LD_INT 1
8711: EQUAL
8712: IFFALSE 8746
// begin Say ( JMM , D4a-JMM-1 ) ;
8714: LD_EXP 1
8718: PPUSH
8719: LD_STRING D4a-JMM-1
8721: PPUSH
8722: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8726: LD_EXP 24
8730: PPUSH
8731: LD_STRING D4b-Kurt-1
8733: PPUSH
8734: CALL_OW 88
// warWithLegion = 1 ;
8738: LD_ADDR_EXP 30
8742: PUSH
8743: LD_INT 1
8745: ST_TO_ADDR
// end ; if dec2 = 2 then
8746: LD_VAR 0 4
8750: PUSH
8751: LD_INT 2
8753: EQUAL
8754: IFFALSE 8788
// begin Say ( JMM , D4b-JMM-1 ) ;
8756: LD_EXP 1
8760: PPUSH
8761: LD_STRING D4b-JMM-1
8763: PPUSH
8764: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8768: LD_EXP 24
8772: PPUSH
8773: LD_STRING D4b-Kurt-1
8775: PPUSH
8776: CALL_OW 88
// warWithLegion = 1 ;
8780: LD_ADDR_EXP 30
8784: PUSH
8785: LD_INT 1
8787: ST_TO_ADDR
// end ; if dec2 = 3 then
8788: LD_VAR 0 4
8792: PUSH
8793: LD_INT 3
8795: EQUAL
8796: IFFALSE 8854
// begin Say ( JMM , D4c-JMM-1 ) ;
8798: LD_EXP 1
8802: PPUSH
8803: LD_STRING D4c-JMM-1
8805: PPUSH
8806: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8810: LD_EXP 24
8814: PPUSH
8815: LD_STRING D4c-Kurt-1
8817: PPUSH
8818: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8822: LD_EXP 1
8826: PPUSH
8827: LD_STRING D4c-JMM-2
8829: PPUSH
8830: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8834: LD_EXP 24
8838: PPUSH
8839: LD_STRING D4c-Kurt-2
8841: PPUSH
8842: CALL_OW 88
// fakeInfo = 1 ;
8846: LD_ADDR_EXP 31
8850: PUSH
8851: LD_INT 1
8853: ST_TO_ADDR
// end ; end ; if payForNeutral or payForHelp then
8854: LD_VAR 0 13
8858: PUSH
8859: LD_VAR 0 14
8863: OR
8864: IFFALSE 9165
// begin for i in tmp do
8866: LD_ADDR_VAR 0 2
8870: PUSH
8871: LD_VAR 0 5
8875: PUSH
8876: FOR_IN
8877: IFFALSE 9163
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
8879: LD_ADDR_VAR 0 6
8883: PUSH
8884: LD_VAR 0 2
8888: PPUSH
8889: CALL_OW 274
8893: PPUSH
8894: LD_INT 1
8896: PPUSH
8897: CALL_OW 275
8901: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
8902: LD_ADDR_VAR 0 7
8906: PUSH
8907: LD_VAR 0 2
8911: PPUSH
8912: CALL_OW 274
8916: PPUSH
8917: LD_INT 3
8919: PPUSH
8920: CALL_OW 275
8924: ST_TO_ADDR
// if cr then
8925: LD_VAR 0 11
8929: IFFALSE 9043
// begin if tmp2 and tmp2 < cr then
8931: LD_VAR 0 6
8935: PUSH
8936: LD_VAR 0 6
8940: PUSH
8941: LD_VAR 0 11
8945: LESS
8946: AND
8947: IFFALSE 8995
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
8949: LD_VAR 0 2
8953: PPUSH
8954: CALL_OW 274
8958: PPUSH
8959: LD_INT 1
8961: PPUSH
8962: LD_VAR 0 11
8966: PUSH
8967: LD_VAR 0 6
8971: MINUS
8972: PPUSH
8973: CALL_OW 277
// cr := cr - tmp2 ;
8977: LD_ADDR_VAR 0 11
8981: PUSH
8982: LD_VAR 0 11
8986: PUSH
8987: LD_VAR 0 6
8991: MINUS
8992: ST_TO_ADDR
// end else
8993: GO 9043
// if tmp2 > cr then
8995: LD_VAR 0 6
8999: PUSH
9000: LD_VAR 0 11
9004: GREATER
9005: IFFALSE 9043
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
9007: LD_VAR 0 2
9011: PPUSH
9012: CALL_OW 274
9016: PPUSH
9017: LD_INT 1
9019: PPUSH
9020: LD_VAR 0 6
9024: PUSH
9025: LD_VAR 0 11
9029: MINUS
9030: PPUSH
9031: CALL_OW 277
// cr := 0 ;
9035: LD_ADDR_VAR 0 11
9039: PUSH
9040: LD_INT 0
9042: ST_TO_ADDR
// end ; end ; if sb then
9043: LD_VAR 0 12
9047: IFFALSE 9161
// begin if tmp3 and tmp3 < sb then
9049: LD_VAR 0 7
9053: PUSH
9054: LD_VAR 0 7
9058: PUSH
9059: LD_VAR 0 12
9063: LESS
9064: AND
9065: IFFALSE 9113
// begin SetResourceType ( GetBase ( i ) , 3 , sb - tmp3 ) ;
9067: LD_VAR 0 2
9071: PPUSH
9072: CALL_OW 274
9076: PPUSH
9077: LD_INT 3
9079: PPUSH
9080: LD_VAR 0 12
9084: PUSH
9085: LD_VAR 0 7
9089: MINUS
9090: PPUSH
9091: CALL_OW 277
// sb := sb - tmp3 ;
9095: LD_ADDR_VAR 0 12
9099: PUSH
9100: LD_VAR 0 12
9104: PUSH
9105: LD_VAR 0 7
9109: MINUS
9110: ST_TO_ADDR
// end else
9111: GO 9161
// if tmp3 > sb then
9113: LD_VAR 0 7
9117: PUSH
9118: LD_VAR 0 12
9122: GREATER
9123: IFFALSE 9161
// begin SetResourceType ( GetBase ( i ) , 3 , tmp3 - sb ) ;
9125: LD_VAR 0 2
9129: PPUSH
9130: CALL_OW 274
9134: PPUSH
9135: LD_INT 3
9137: PPUSH
9138: LD_VAR 0 7
9142: PUSH
9143: LD_VAR 0 12
9147: MINUS
9148: PPUSH
9149: CALL_OW 277
// sb := 0 ;
9153: LD_ADDR_VAR 0 12
9157: PUSH
9158: LD_INT 0
9160: ST_TO_ADDR
// end ; end ; end ;
9161: GO 8876
9163: POP
9164: POP
// end ; end ; DialogueOff ;
9165: CALL_OW 7
// RemoveSeeing ( 167 , 121 , 1 ) ;
9169: LD_INT 167
9171: PPUSH
9172: LD_INT 121
9174: PPUSH
9175: LD_INT 1
9177: PPUSH
9178: CALL_OW 331
// ComEnterUnit ( Kurt , KurtVeh ) ;
9182: LD_EXP 24
9186: PPUSH
9187: LD_EXP 25
9191: PPUSH
9192: CALL_OW 120
// wait ( 0 0$1 ) ;
9196: LD_INT 35
9198: PPUSH
9199: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9203: LD_EXP 25
9207: PPUSH
9208: LD_INT 4
9210: PPUSH
9211: CALL_OW 113
// wait ( 0 0$3 ) ;
9215: LD_INT 105
9217: PPUSH
9218: CALL_OW 67
// RemoveUnit ( Kurt ) ;
9222: LD_EXP 24
9226: PPUSH
9227: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9231: LD_EXP 25
9235: PPUSH
9236: CALL_OW 64
// wait ( 0 0$3 ) ;
9240: LD_INT 105
9242: PPUSH
9243: CALL_OW 67
// if payForHelp then
9247: LD_VAR 0 14
9251: IFFALSE 9309
// begin HiddenCamera ( 36 , 57 , 1 ) ;
9253: LD_INT 36
9255: PPUSH
9256: LD_INT 57
9258: PPUSH
9259: LD_INT 1
9261: PPUSH
9262: CALL_OW 244
// HiddenCamera ( 51 , 63 , 1 ) ;
9266: LD_INT 51
9268: PPUSH
9269: LD_INT 63
9271: PPUSH
9272: LD_INT 1
9274: PPUSH
9275: CALL_OW 244
// HiddenCamera ( 93 , 65 , 1 ) ;
9279: LD_INT 93
9281: PPUSH
9282: LD_INT 65
9284: PPUSH
9285: LD_INT 1
9287: PPUSH
9288: CALL_OW 244
// HiddenCamera ( 42 , 12 , 1 ) ;
9292: LD_INT 42
9294: PPUSH
9295: LD_INT 12
9297: PPUSH
9298: LD_INT 1
9300: PPUSH
9301: CALL_OW 244
// PrepareLegionForPlayer ;
9305: CALL 4608 0 0
// end ; end ;
9309: LD_VAR 0 1
9313: RET
// every 0 0$10 trigger warWithLegion = 1 do
9314: LD_EXP 30
9318: PUSH
9319: LD_INT 1
9321: EQUAL
9322: IFFALSE 9331
9324: GO 9326
9326: DISABLE
// PrepareAttackLegion ;
9327: CALL 5272 0 0
9331: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 1 ) and not GetCargo ( amCargo1 , 2 ) and not GetCargo ( amCargo1 , 3 ) do
9332: LD_EXP 15
9336: PPUSH
9337: CALL_OW 305
9341: PUSH
9342: LD_EXP 15
9346: PPUSH
9347: LD_INT 1
9349: PPUSH
9350: CALL_OW 289
9354: NOT
9355: AND
9356: PUSH
9357: LD_EXP 15
9361: PPUSH
9362: LD_INT 2
9364: PPUSH
9365: CALL_OW 289
9369: NOT
9370: AND
9371: PUSH
9372: LD_EXP 15
9376: PPUSH
9377: LD_INT 3
9379: PPUSH
9380: CALL_OW 289
9384: NOT
9385: AND
9386: IFFALSE 9403
9388: GO 9390
9390: DISABLE
// SetSide ( amCargo1 , 4 ) ;
9391: LD_EXP 15
9395: PPUSH
9396: LD_INT 4
9398: PPUSH
9399: CALL_OW 235
9403: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 2 ) and not GetCargo ( amCargo2 , 3 ) do
9404: LD_EXP 16
9408: PPUSH
9409: CALL_OW 305
9413: PUSH
9414: LD_EXP 16
9418: PPUSH
9419: LD_INT 1
9421: PPUSH
9422: CALL_OW 289
9426: NOT
9427: AND
9428: PUSH
9429: LD_EXP 16
9433: PPUSH
9434: LD_INT 2
9436: PPUSH
9437: CALL_OW 289
9441: NOT
9442: AND
9443: PUSH
9444: LD_EXP 16
9448: PPUSH
9449: LD_INT 3
9451: PPUSH
9452: CALL_OW 289
9456: NOT
9457: AND
9458: IFFALSE 9475
9460: GO 9462
9462: DISABLE
// SetSide ( amCargo2 , 4 ) ;
9463: LD_EXP 16
9467: PPUSH
9468: LD_INT 4
9470: PPUSH
9471: CALL_OW 235
9475: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo3 , 1 ) and not GetCargo ( amCargo3 , 2 ) and not GetCargo ( amCargo3 , 3 ) do
9476: LD_EXP 17
9480: PPUSH
9481: CALL_OW 305
9485: PUSH
9486: LD_EXP 17
9490: PPUSH
9491: LD_INT 1
9493: PPUSH
9494: CALL_OW 289
9498: NOT
9499: AND
9500: PUSH
9501: LD_EXP 17
9505: PPUSH
9506: LD_INT 2
9508: PPUSH
9509: CALL_OW 289
9513: NOT
9514: AND
9515: PUSH
9516: LD_EXP 17
9520: PPUSH
9521: LD_INT 3
9523: PPUSH
9524: CALL_OW 289
9528: NOT
9529: AND
9530: IFFALSE 9547
9532: GO 9534
9534: DISABLE
// SetSide ( amCargo3 , 4 ) ;
9535: LD_EXP 17
9539: PPUSH
9540: LD_INT 4
9542: PPUSH
9543: CALL_OW 235
9547: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo4 , 1 ) and not GetCargo ( amCargo4 , 2 ) and not GetCargo ( amCargo4 , 3 ) do
9548: LD_EXP 18
9552: PPUSH
9553: CALL_OW 305
9557: PUSH
9558: LD_EXP 18
9562: PPUSH
9563: LD_INT 1
9565: PPUSH
9566: CALL_OW 289
9570: NOT
9571: AND
9572: PUSH
9573: LD_EXP 18
9577: PPUSH
9578: LD_INT 2
9580: PPUSH
9581: CALL_OW 289
9585: NOT
9586: AND
9587: PUSH
9588: LD_EXP 18
9592: PPUSH
9593: LD_INT 3
9595: PPUSH
9596: CALL_OW 289
9600: NOT
9601: AND
9602: IFFALSE 9619
9604: GO 9606
9606: DISABLE
// SetSide ( amCargo4 , 4 ) ;
9607: LD_EXP 18
9611: PPUSH
9612: LD_INT 4
9614: PPUSH
9615: CALL_OW 235
9619: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) and not GetCargo ( amCargo5 , 3 ) and not GetCargo ( amCargo5 , 2 ) do
9620: LD_EXP 19
9624: PPUSH
9625: CALL_OW 305
9629: PUSH
9630: LD_EXP 19
9634: PPUSH
9635: LD_INT 1
9637: PPUSH
9638: CALL_OW 289
9642: NOT
9643: AND
9644: PUSH
9645: LD_EXP 19
9649: PPUSH
9650: LD_INT 2
9652: PPUSH
9653: CALL_OW 289
9657: NOT
9658: AND
9659: PUSH
9660: LD_EXP 19
9664: PPUSH
9665: LD_INT 3
9667: PPUSH
9668: CALL_OW 289
9672: NOT
9673: AND
9674: PUSH
9675: LD_EXP 19
9679: PPUSH
9680: LD_INT 2
9682: PPUSH
9683: CALL_OW 289
9687: NOT
9688: AND
9689: IFFALSE 9706
9691: GO 9693
9693: DISABLE
// SetSide ( amCargo5 , 4 ) ;
9694: LD_EXP 19
9698: PPUSH
9699: LD_INT 4
9701: PPUSH
9702: CALL_OW 235
9706: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 1 ) and not GetCargo ( amCargo6 , 2 ) and not GetCargo ( amCargo6 , 3 ) do
9707: LD_EXP 20
9711: PPUSH
9712: CALL_OW 305
9716: PUSH
9717: LD_EXP 20
9721: PPUSH
9722: LD_INT 1
9724: PPUSH
9725: CALL_OW 289
9729: NOT
9730: AND
9731: PUSH
9732: LD_EXP 20
9736: PPUSH
9737: LD_INT 2
9739: PPUSH
9740: CALL_OW 289
9744: NOT
9745: AND
9746: PUSH
9747: LD_EXP 20
9751: PPUSH
9752: LD_INT 3
9754: PPUSH
9755: CALL_OW 289
9759: NOT
9760: AND
9761: IFFALSE 9778
9763: GO 9765
9765: DISABLE
// SetSide ( amCargo6 , 4 ) ;
9766: LD_EXP 20
9770: PPUSH
9771: LD_INT 4
9773: PPUSH
9774: CALL_OW 235
9778: END
// every 0 0$1 trigger IsPlaced ( amCargo7 ) and not GetCargo ( amCargo7 , 1 ) and not GetCargo ( amCargo7 , 2 ) and not GetCargo ( amCargo7 , 3 ) do
9779: LD_EXP 21
9783: PPUSH
9784: CALL_OW 305
9788: PUSH
9789: LD_EXP 21
9793: PPUSH
9794: LD_INT 1
9796: PPUSH
9797: CALL_OW 289
9801: NOT
9802: AND
9803: PUSH
9804: LD_EXP 21
9808: PPUSH
9809: LD_INT 2
9811: PPUSH
9812: CALL_OW 289
9816: NOT
9817: AND
9818: PUSH
9819: LD_EXP 21
9823: PPUSH
9824: LD_INT 3
9826: PPUSH
9827: CALL_OW 289
9831: NOT
9832: AND
9833: IFFALSE 9850
9835: GO 9837
9837: DISABLE
// SetSide ( amCargo7 , 4 ) ;
9838: LD_EXP 21
9842: PPUSH
9843: LD_INT 4
9845: PPUSH
9846: CALL_OW 235
9850: END
// every 0 0$1 do var i ;
9851: GO 9853
9853: DISABLE
9854: LD_INT 0
9856: PPUSH
// begin enable ;
9857: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
9858: LD_ADDR_VAR 0 1
9862: PUSH
9863: LD_INT 22
9865: PUSH
9866: LD_INT 4
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: PPUSH
9873: CALL_OW 69
9877: PUSH
9878: FOR_IN
9879: IFFALSE 9918
// begin ComMoveToArea ( i , PlayerSpawn ) ;
9881: LD_VAR 0 1
9885: PPUSH
9886: LD_INT 4
9888: PPUSH
9889: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
9893: LD_VAR 0 1
9897: PPUSH
9898: LD_INT 4
9900: PPUSH
9901: CALL_OW 308
9905: IFFALSE 9916
// RemoveUnit ( i ) ;
9907: LD_VAR 0 1
9911: PPUSH
9912: CALL_OW 64
// end ;
9916: GO 9878
9918: POP
9919: POP
// end ;
9920: PPOPN 1
9922: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
9923: LD_EXP 27
9927: PUSH
9928: LD_INT 1
9930: EQUAL
9931: IFFALSE 10370
9933: GO 9935
9935: DISABLE
9936: LD_INT 0
9938: PPUSH
9939: PPUSH
9940: PPUSH
// begin enable ;
9941: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9942: LD_ADDR_VAR 0 2
9946: PUSH
9947: LD_INT 12
9949: PPUSH
9950: LD_INT 22
9952: PUSH
9953: LD_INT 3
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: PUSH
9960: LD_INT 21
9962: PUSH
9963: LD_INT 2
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: PPUSH
9974: CALL_OW 70
9978: ST_TO_ADDR
// for i in enemyVehs do
9979: LD_ADDR_VAR 0 1
9983: PUSH
9984: LD_VAR 0 2
9988: PUSH
9989: FOR_IN
9990: IFFALSE 10368
// begin if See ( 1 , i ) then
9992: LD_INT 1
9994: PPUSH
9995: LD_VAR 0 1
9999: PPUSH
10000: CALL_OW 292
10004: IFFALSE 10366
// begin disable ;
10006: DISABLE
// DialogueOn ;
10007: CALL_OW 6
// CenterNowOnUnits ( i ) ;
10011: LD_VAR 0 1
10015: PPUSH
10016: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10020: LD_INT 22
10022: PUSH
10023: LD_INT 1
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: PUSH
10030: LD_INT 26
10032: PUSH
10033: LD_INT 1
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PUSH
10040: LD_INT 2
10042: PUSH
10043: LD_INT 25
10045: PUSH
10046: LD_INT 1
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: PUSH
10053: LD_INT 25
10055: PUSH
10056: LD_INT 2
10058: PUSH
10059: EMPTY
10060: LIST
10061: LIST
10062: PUSH
10063: LD_INT 25
10065: PUSH
10066: LD_INT 3
10068: PUSH
10069: EMPTY
10070: LIST
10071: LIST
10072: PUSH
10073: LD_INT 25
10075: PUSH
10076: LD_INT 4
10078: PUSH
10079: EMPTY
10080: LIST
10081: LIST
10082: PUSH
10083: LD_INT 25
10085: PUSH
10086: LD_INT 5
10088: PUSH
10089: EMPTY
10090: LIST
10091: LIST
10092: PUSH
10093: LD_INT 25
10095: PUSH
10096: LD_INT 8
10098: PUSH
10099: EMPTY
10100: LIST
10101: LIST
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: LIST
10116: PPUSH
10117: CALL_OW 69
10121: PPUSH
10122: LD_STRING DT1-Sol1-1
10124: PPUSH
10125: LD_STRING DT1-FSol1-1
10127: PPUSH
10128: CALL 12328 0 3
// dec = ShowQuery2 ;
10132: LD_ADDR_VAR 0 3
10136: PUSH
10137: CALL 12871 0 0
10141: ST_TO_ADDR
// if dec = 1 then
10142: LD_VAR 0 3
10146: PUSH
10147: LD_INT 1
10149: EQUAL
10150: IFFALSE 10256
// begin Say ( JMM , D2-JMM-1 ) ;
10152: LD_EXP 1
10156: PPUSH
10157: LD_STRING D2-JMM-1
10159: PPUSH
10160: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10164: LD_EXP 22
10168: PPUSH
10169: LD_STRING D2-Pow-1
10171: PPUSH
10172: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
10176: LD_EXP 1
10180: PPUSH
10181: LD_STRING D2a-JMM-1
10183: PPUSH
10184: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
10188: LD_EXP 22
10192: PPUSH
10193: LD_STRING D2a-Pow-1
10195: PPUSH
10196: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
10200: LD_EXP 1
10204: PPUSH
10205: LD_STRING D2a-JMM-2
10207: PPUSH
10208: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10212: LD_EXP 22
10216: PPUSH
10217: LD_STRING D2a-Pow-2
10219: PPUSH
10220: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10224: LD_EXP 1
10228: PPUSH
10229: LD_STRING D2a-JMM-3
10231: PPUSH
10232: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10236: LD_EXP 22
10240: PPUSH
10241: LD_STRING D2a-Pow-3
10243: PPUSH
10244: CALL_OW 94
// secondPass = 2 ;
10248: LD_ADDR_EXP 27
10252: PUSH
10253: LD_INT 2
10255: ST_TO_ADDR
// end ; if dec = 2 then
10256: LD_VAR 0 3
10260: PUSH
10261: LD_INT 2
10263: EQUAL
10264: IFFALSE 10358
// begin Say ( JMM , D2-JMM-1 ) ;
10266: LD_EXP 1
10270: PPUSH
10271: LD_STRING D2-JMM-1
10273: PPUSH
10274: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10278: LD_EXP 22
10282: PPUSH
10283: LD_STRING D2-Pow-1
10285: PPUSH
10286: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
10290: LD_EXP 1
10294: PPUSH
10295: LD_STRING D2b-JMM-1
10297: PPUSH
10298: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
10302: LD_EXP 22
10306: PPUSH
10307: LD_STRING D2b-Pow-1
10309: PPUSH
10310: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10314: LD_EXP 1
10318: PPUSH
10319: LD_STRING D2c-JMM-1
10321: PPUSH
10322: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10326: LD_EXP 22
10330: PPUSH
10331: LD_STRING D2c-Pow-1
10333: PPUSH
10334: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10338: LD_EXP 1
10342: PPUSH
10343: LD_STRING D2c-JMM-2
10345: PPUSH
10346: CALL_OW 88
// secondPass = 2 ;
10350: LD_ADDR_EXP 27
10354: PUSH
10355: LD_INT 2
10357: ST_TO_ADDR
// end ; DialogueOff ;
10358: CALL_OW 7
// exit ;
10362: POP
10363: POP
10364: GO 10370
// end ; end ;
10366: GO 9989
10368: POP
10369: POP
// end ;
10370: PPOPN 3
10372: END
// every 0 0$1 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) do var vehicles ;
10373: LD_EXP 28
10377: PUSH
10378: LD_INT 1
10380: EQUAL
10381: PUSH
10382: LD_INT 11
10384: PPUSH
10385: LD_INT 22
10387: PUSH
10388: LD_INT 3
10390: PUSH
10391: EMPTY
10392: LIST
10393: LIST
10394: PPUSH
10395: CALL_OW 70
10399: AND
10400: IFFALSE 10628
10402: GO 10404
10404: DISABLE
10405: LD_INT 0
10407: PPUSH
// begin vehicles := FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
10408: LD_ADDR_VAR 0 1
10412: PUSH
10413: LD_INT 11
10415: PPUSH
10416: LD_INT 22
10418: PUSH
10419: LD_INT 3
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: PPUSH
10426: CALL_OW 70
10430: ST_TO_ADDR
// if not vehicles then
10431: LD_VAR 0 1
10435: NOT
10436: IFFALSE 10440
// exit ;
10438: GO 10628
// repeat wait ( 0 0$1 ) ;
10440: LD_INT 35
10442: PPUSH
10443: CALL_OW 67
// until UnitFilter ( vehicles , [ f_see , 1 ] ) ;
10447: LD_VAR 0 1
10451: PPUSH
10452: LD_INT 101
10454: PUSH
10455: LD_INT 1
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: PPUSH
10462: CALL_OW 72
10466: IFFALSE 10440
// CenterNowOnUnits ( UnitFilter ( vehicles , [ f_see , 1 ] ) [ 1 ] ) ;
10468: LD_VAR 0 1
10472: PPUSH
10473: LD_INT 101
10475: PUSH
10476: LD_INT 1
10478: PUSH
10479: EMPTY
10480: LIST
10481: LIST
10482: PPUSH
10483: CALL_OW 72
10487: PUSH
10488: LD_INT 1
10490: ARRAY
10491: PPUSH
10492: CALL_OW 87
// DialogueOn ;
10496: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10500: LD_INT 22
10502: PUSH
10503: LD_INT 1
10505: PUSH
10506: EMPTY
10507: LIST
10508: LIST
10509: PUSH
10510: LD_INT 26
10512: PUSH
10513: LD_INT 1
10515: PUSH
10516: EMPTY
10517: LIST
10518: LIST
10519: PUSH
10520: LD_INT 2
10522: PUSH
10523: LD_INT 25
10525: PUSH
10526: LD_INT 1
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: PUSH
10533: LD_INT 25
10535: PUSH
10536: LD_INT 2
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: PUSH
10543: LD_INT 25
10545: PUSH
10546: LD_INT 3
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: PUSH
10553: LD_INT 25
10555: PUSH
10556: LD_INT 4
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: PUSH
10563: LD_INT 25
10565: PUSH
10566: LD_INT 5
10568: PUSH
10569: EMPTY
10570: LIST
10571: LIST
10572: PUSH
10573: LD_INT 25
10575: PUSH
10576: LD_INT 8
10578: PUSH
10579: EMPTY
10580: LIST
10581: LIST
10582: PUSH
10583: EMPTY
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: LIST
10596: PPUSH
10597: CALL_OW 69
10601: PPUSH
10602: LD_STRING DT1-Sol1-1
10604: PPUSH
10605: LD_STRING DT1-FSol1-1
10607: PPUSH
10608: CALL 12328 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10612: LD_EXP 1
10616: PPUSH
10617: LD_STRING DT1-JMM-1
10619: PPUSH
10620: CALL_OW 88
// DialogueOff ;
10624: CALL_OW 7
// end ;
10628: PPOPN 1
10630: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter do
10631: LD_EXP 28
10635: PUSH
10636: LD_INT 1
10638: EQUAL
10639: PUSH
10640: LD_INT 11
10642: PPUSH
10643: LD_INT 22
10645: PUSH
10646: LD_INT 3
10648: PUSH
10649: EMPTY
10650: LIST
10651: LIST
10652: PUSH
10653: LD_INT 50
10655: PUSH
10656: EMPTY
10657: LIST
10658: PUSH
10659: LD_INT 2
10661: PUSH
10662: LD_INT 21
10664: PUSH
10665: LD_INT 2
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: PUSH
10672: LD_INT 21
10674: PUSH
10675: LD_INT 1
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: LIST
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: LIST
10691: PPUSH
10692: CALL_OW 70
10696: PUSH
10697: LD_INT 0
10699: EQUAL
10700: AND
10701: PUSH
10702: LD_EXP 29
10706: AND
10707: IFFALSE 10864
10709: GO 10711
10711: DISABLE
// begin vehicleTeleported = 2 ;
10712: LD_ADDR_EXP 28
10716: PUSH
10717: LD_INT 2
10719: ST_TO_ADDR
// DialogueOn ;
10720: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
10724: LD_EXP 1
10728: PPUSH
10729: LD_STRING DT1a-JMM-1
10731: PPUSH
10732: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
10736: LD_INT 22
10738: PUSH
10739: LD_INT 1
10741: PUSH
10742: EMPTY
10743: LIST
10744: LIST
10745: PUSH
10746: LD_INT 26
10748: PUSH
10749: LD_INT 1
10751: PUSH
10752: EMPTY
10753: LIST
10754: LIST
10755: PUSH
10756: LD_INT 2
10758: PUSH
10759: LD_INT 25
10761: PUSH
10762: LD_INT 1
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: PUSH
10769: LD_INT 25
10771: PUSH
10772: LD_INT 2
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: LD_INT 25
10781: PUSH
10782: LD_INT 3
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: PUSH
10789: LD_INT 25
10791: PUSH
10792: LD_INT 4
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: PUSH
10799: LD_INT 25
10801: PUSH
10802: LD_INT 5
10804: PUSH
10805: EMPTY
10806: LIST
10807: LIST
10808: PUSH
10809: LD_INT 25
10811: PUSH
10812: LD_INT 8
10814: PUSH
10815: EMPTY
10816: LIST
10817: LIST
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: LIST
10832: PPUSH
10833: CALL_OW 69
10837: PPUSH
10838: LD_STRING DT1a-Sol1-1
10840: PPUSH
10841: LD_STRING DT1a-FSol1-1
10843: PPUSH
10844: CALL 12328 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
10848: LD_EXP 1
10852: PPUSH
10853: LD_STRING DT1a-JMM-2
10855: PPUSH
10856: CALL_OW 88
// DialogueOff ;
10860: CALL_OW 7
// end ;
10864: END
// every 0 0$2 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] ] ) do var i , vehicles , speaker ;
10865: LD_EXP 28
10869: PUSH
10870: LD_INT 3
10872: EQUAL
10873: PUSH
10874: LD_INT 11
10876: PPUSH
10877: LD_INT 22
10879: PUSH
10880: LD_INT 3
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: PUSH
10887: LD_INT 101
10889: PUSH
10890: LD_INT 1
10892: PUSH
10893: EMPTY
10894: LIST
10895: LIST
10896: PUSH
10897: EMPTY
10898: LIST
10899: LIST
10900: PPUSH
10901: CALL_OW 70
10905: AND
10906: IFFALSE 11180
10908: GO 10910
10910: DISABLE
10911: LD_INT 0
10913: PPUSH
10914: PPUSH
10915: PPUSH
// begin wait ( 0 0$0.3 ) ;
10916: LD_INT 10
10918: PPUSH
10919: CALL_OW 67
// DialogueOn ;
10923: CALL_OW 6
// speaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
10927: LD_ADDR_VAR 0 3
10931: PUSH
10932: LD_INT 22
10934: PUSH
10935: LD_INT 1
10937: PUSH
10938: EMPTY
10939: LIST
10940: LIST
10941: PUSH
10942: LD_INT 26
10944: PUSH
10945: LD_INT 1
10947: PUSH
10948: EMPTY
10949: LIST
10950: LIST
10951: PUSH
10952: LD_INT 2
10954: PUSH
10955: LD_INT 25
10957: PUSH
10958: LD_INT 1
10960: PUSH
10961: EMPTY
10962: LIST
10963: LIST
10964: PUSH
10965: LD_INT 25
10967: PUSH
10968: LD_INT 2
10970: PUSH
10971: EMPTY
10972: LIST
10973: LIST
10974: PUSH
10975: LD_INT 25
10977: PUSH
10978: LD_INT 3
10980: PUSH
10981: EMPTY
10982: LIST
10983: LIST
10984: PUSH
10985: LD_INT 25
10987: PUSH
10988: LD_INT 4
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: PUSH
10995: LD_INT 25
10997: PUSH
10998: LD_INT 5
11000: PUSH
11001: EMPTY
11002: LIST
11003: LIST
11004: PUSH
11005: LD_INT 25
11007: PUSH
11008: LD_INT 8
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: LIST
11028: PPUSH
11029: CALL_OW 69
11033: PPUSH
11034: LD_STRING DT2-Sol1-1
11036: PPUSH
11037: LD_STRING DT2-FSol1-1
11039: PPUSH
11040: CALL 12328 0 3
11044: ST_TO_ADDR
// DialogueOff ;
11045: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
11049: LD_INT 35
11051: PPUSH
11052: CALL_OW 67
// until not FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] ] ) ;
11056: LD_INT 11
11058: PPUSH
11059: LD_INT 22
11061: PUSH
11062: LD_INT 3
11064: PUSH
11065: EMPTY
11066: LIST
11067: LIST
11068: PUSH
11069: LD_INT 50
11071: PUSH
11072: EMPTY
11073: LIST
11074: PUSH
11075: EMPTY
11076: LIST
11077: LIST
11078: PPUSH
11079: CALL_OW 70
11083: NOT
11084: IFFALSE 11049
// wait ( 0 0$2 ) ;
11086: LD_INT 70
11088: PPUSH
11089: CALL_OW 67
// vehicleTeleported = 4 ;
11093: LD_ADDR_EXP 28
11097: PUSH
11098: LD_INT 4
11100: ST_TO_ADDR
// DialogueOn ;
11101: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
11105: LD_EXP 1
11109: PPUSH
11110: LD_STRING DT2a-JMM-1
11112: PPUSH
11113: CALL_OW 88
// if speaker then
11117: LD_VAR 0 3
11121: IFFALSE 11164
// if GetSex ( speaker ) = 1 then
11123: LD_VAR 0 3
11127: PPUSH
11128: CALL_OW 258
11132: PUSH
11133: LD_INT 1
11135: EQUAL
11136: IFFALSE 11152
// Say ( speaker , DT2a-Sol1-1 ) else
11138: LD_VAR 0 3
11142: PPUSH
11143: LD_STRING DT2a-Sol1-1
11145: PPUSH
11146: CALL_OW 88
11150: GO 11164
// Say ( speaker , DT2a-FSol1-1 ) ;
11152: LD_VAR 0 3
11156: PPUSH
11157: LD_STRING DT2a-FSol1-1
11159: PPUSH
11160: CALL_OW 88
// Say ( Donaldson , DT2a-Don-1 ) ;
11164: LD_EXP 3
11168: PPUSH
11169: LD_STRING DT2a-Don-1
11171: PPUSH
11172: CALL_OW 88
// DialogueOff ;
11176: CALL_OW 7
// end ;
11180: PPOPN 3
11182: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
11183: LD_INT 1
11185: PPUSH
11186: LD_INT 45
11188: PPUSH
11189: LD_INT 74
11191: PPUSH
11192: CALL_OW 293
11196: IFFALSE 11360
11198: GO 11200
11200: DISABLE
// begin DialogueOn ;
11201: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
11205: LD_INT 36
11207: PPUSH
11208: LD_INT 55
11210: PPUSH
11211: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
11215: LD_INT 22
11217: PUSH
11218: LD_INT 1
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: PUSH
11225: LD_INT 26
11227: PUSH
11228: LD_INT 1
11230: PUSH
11231: EMPTY
11232: LIST
11233: LIST
11234: PUSH
11235: LD_INT 2
11237: PUSH
11238: LD_INT 25
11240: PUSH
11241: LD_INT 1
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PUSH
11248: LD_INT 25
11250: PUSH
11251: LD_INT 2
11253: PUSH
11254: EMPTY
11255: LIST
11256: LIST
11257: PUSH
11258: LD_INT 25
11260: PUSH
11261: LD_INT 3
11263: PUSH
11264: EMPTY
11265: LIST
11266: LIST
11267: PUSH
11268: LD_INT 25
11270: PUSH
11271: LD_INT 4
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: PUSH
11278: LD_INT 25
11280: PUSH
11281: LD_INT 5
11283: PUSH
11284: EMPTY
11285: LIST
11286: LIST
11287: PUSH
11288: LD_INT 25
11290: PUSH
11291: LD_INT 8
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: PUSH
11307: EMPTY
11308: LIST
11309: LIST
11310: LIST
11311: PPUSH
11312: CALL_OW 69
11316: PPUSH
11317: LD_STRING D5-Sol1-1
11319: PPUSH
11320: LD_STRING D5-FSol1-
11322: PPUSH
11323: CALL 12328 0 3
// if warWithLegion and IsOk ( Donaldson ) then
11327: LD_EXP 30
11331: PUSH
11332: LD_EXP 3
11336: PPUSH
11337: CALL_OW 302
11341: AND
11342: IFFALSE 11356
// Say ( Donaldson , D5-Don-1 ) ;
11344: LD_EXP 3
11348: PPUSH
11349: LD_STRING D5-Don-1
11351: PPUSH
11352: CALL_OW 88
// DialogueOff ;
11356: CALL_OW 7
// end ;
11360: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
11361: LD_INT 1
11363: PPUSH
11364: LD_INT 10
11366: PPUSH
11367: CALL_OW 292
11371: PUSH
11372: LD_INT 1
11374: PPUSH
11375: LD_INT 137
11377: PPUSH
11378: CALL_OW 292
11382: OR
11383: IFFALSE 11527
11385: GO 11387
11387: DISABLE
// begin DialogueOn ;
11388: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
11392: LD_INT 22
11394: PUSH
11395: LD_INT 1
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PUSH
11402: LD_INT 26
11404: PUSH
11405: LD_INT 1
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: LD_INT 2
11414: PUSH
11415: LD_INT 25
11417: PUSH
11418: LD_INT 1
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: PUSH
11425: LD_INT 25
11427: PUSH
11428: LD_INT 2
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: PUSH
11435: LD_INT 25
11437: PUSH
11438: LD_INT 3
11440: PUSH
11441: EMPTY
11442: LIST
11443: LIST
11444: PUSH
11445: LD_INT 25
11447: PUSH
11448: LD_INT 4
11450: PUSH
11451: EMPTY
11452: LIST
11453: LIST
11454: PUSH
11455: LD_INT 25
11457: PUSH
11458: LD_INT 5
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: PUSH
11465: LD_INT 25
11467: PUSH
11468: LD_INT 8
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: PUSH
11484: EMPTY
11485: LIST
11486: LIST
11487: LIST
11488: PPUSH
11489: CALL_OW 69
11493: PPUSH
11494: LD_STRING DT3-Sol1-1
11496: PPUSH
11497: LD_STRING DT3-FSol1-1
11499: PPUSH
11500: CALL 12328 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11504: LD_EXP 1
11508: PPUSH
11509: LD_STRING DT3-JMM-1
11511: PPUSH
11512: CALL_OW 88
// DialogueOff ;
11516: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11520: LD_STRING M2
11522: PPUSH
11523: CALL_OW 337
// end ;
11527: END
// every 0 0$1 trigger ruEscape = 0 do var i ;
11528: LD_EXP 42
11532: PUSH
11533: LD_INT 0
11535: EQUAL
11536: IFFALSE 11619
11538: GO 11540
11540: DISABLE
11541: LD_INT 0
11543: PPUSH
// begin enable ;
11544: ENABLE
// for i in FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
11545: LD_ADDR_VAR 0 1
11549: PUSH
11550: LD_INT 10
11552: PPUSH
11553: LD_INT 22
11555: PUSH
11556: LD_INT 3
11558: PUSH
11559: EMPTY
11560: LIST
11561: LIST
11562: PUSH
11563: LD_INT 21
11565: PUSH
11566: LD_INT 2
11568: PUSH
11569: EMPTY
11570: LIST
11571: LIST
11572: PUSH
11573: LD_INT 58
11575: PUSH
11576: EMPTY
11577: LIST
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: LIST
11583: PPUSH
11584: CALL_OW 70
11588: PUSH
11589: FOR_IN
11590: IFFALSE 11617
// if GetLives ( i ) < 1000 then
11592: LD_VAR 0 1
11596: PPUSH
11597: CALL_OW 256
11601: PUSH
11602: LD_INT 1000
11604: LESS
11605: IFFALSE 11615
// ruEscape = 1 ;
11607: LD_ADDR_EXP 42
11611: PUSH
11612: LD_INT 1
11614: ST_TO_ADDR
11615: GO 11589
11617: POP
11618: POP
// end ;
11619: PPOPN 1
11621: END
// every 0 0$1 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or FilterUnitsInArea ( EscapeTriggerArea , [ f_side , 1 ] ) > 0 or ruEscape = 1 do var i , j , vehs ;
11622: LD_INT 3
11624: PPUSH
11625: CALL_OW 303
11629: PUSH
11630: LD_INT 4
11632: PPUSH
11633: CALL_OW 303
11637: OR
11638: PUSH
11639: LD_INT 22
11641: PPUSH
11642: LD_INT 22
11644: PUSH
11645: LD_INT 1
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: PPUSH
11652: CALL_OW 70
11656: PUSH
11657: LD_INT 0
11659: GREATER
11660: OR
11661: PUSH
11662: LD_EXP 42
11666: PUSH
11667: LD_INT 1
11669: EQUAL
11670: OR
11671: IFFALSE 11902
11673: GO 11675
11675: DISABLE
11676: LD_INT 0
11678: PPUSH
11679: PPUSH
11680: PPUSH
// begin ruAI = 0 ;
11681: LD_ADDR_EXP 41
11685: PUSH
11686: LD_INT 0
11688: ST_TO_ADDR
// vehs = FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11689: LD_ADDR_VAR 0 3
11693: PUSH
11694: LD_INT 10
11696: PPUSH
11697: LD_INT 22
11699: PUSH
11700: LD_INT 3
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: PUSH
11707: LD_INT 21
11709: PUSH
11710: LD_INT 2
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: PUSH
11717: LD_INT 58
11719: PUSH
11720: EMPTY
11721: LIST
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: LIST
11727: PPUSH
11728: CALL_OW 70
11732: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
11733: LD_EXP 34
11737: PPUSH
11738: CALL_OW 122
// wait ( 0 0$1 ) ;
11742: LD_INT 35
11744: PPUSH
11745: CALL_OW 67
// DialogueOn ;
11749: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
11753: LD_EXP 1
11757: PPUSH
11758: LD_STRING D6-JMM-1
11760: PPUSH
11761: CALL_OW 88
// DialogueOff ;
11765: CALL_OW 7
// if vehs > 0 then
11769: LD_VAR 0 3
11773: PUSH
11774: LD_INT 0
11776: GREATER
11777: IFFALSE 11847
// for i := 1 to RuScientists do
11779: LD_ADDR_VAR 0 1
11783: PUSH
11784: DOUBLE
11785: LD_INT 1
11787: DEC
11788: ST_TO_ADDR
11789: LD_EXP 34
11793: PUSH
11794: FOR_TO
11795: IFFALSE 11843
// ComEnterUnit ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , vehs [ i ] ) else
11797: LD_EXP 34
11801: PUSH
11802: LD_VAR 0 1
11806: ARRAY
11807: PPUSH
11808: LD_INT 3
11810: PUSH
11811: LD_INT 60
11813: PUSH
11814: EMPTY
11815: LIST
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PPUSH
11821: CALL_OW 72
11825: PPUSH
11826: LD_VAR 0 3
11830: PUSH
11831: LD_VAR 0 1
11835: ARRAY
11836: PPUSH
11837: CALL_OW 120
11841: GO 11794
11843: POP
11844: POP
11845: GO 11902
// ComMoveToArea ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
11847: LD_EXP 34
11851: PUSH
11852: LD_VAR 0 1
11856: ARRAY
11857: PPUSH
11858: LD_INT 3
11860: PUSH
11861: LD_INT 60
11863: PUSH
11864: EMPTY
11865: LIST
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: PPUSH
11871: CALL_OW 72
11875: PPUSH
11876: LD_INT 13
11878: PUSH
11879: LD_INT 14
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: PUSH
11886: LD_INT 1
11888: PPUSH
11889: LD_INT 2
11891: PPUSH
11892: CALL_OW 12
11896: ARRAY
11897: PPUSH
11898: CALL_OW 113
// end ;
11902: PPOPN 3
11904: END
// every 0 0$0.3 trigger ruAI = 0 do var i , unit , veh , tmp ;
11905: LD_EXP 41
11909: PUSH
11910: LD_INT 0
11912: EQUAL
11913: IFFALSE 12285
11915: GO 11917
11917: DISABLE
11918: LD_INT 0
11920: PPUSH
11921: PPUSH
11922: PPUSH
11923: PPUSH
// begin enable ;
11924: ENABLE
// if UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) or FilterAllUnits ( [ [ f_control , control_manual ] , [ f_nation , 3 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ] ) then
11925: LD_EXP 34
11929: PPUSH
11930: LD_INT 2
11932: PUSH
11933: LD_INT 95
11935: PUSH
11936: LD_INT 13
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: PUSH
11943: LD_INT 95
11945: PUSH
11946: LD_INT 14
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: PUSH
11953: EMPTY
11954: LIST
11955: LIST
11956: LIST
11957: PPUSH
11958: CALL_OW 72
11962: PUSH
11963: LD_INT 33
11965: PUSH
11966: LD_INT 1
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: PUSH
11973: LD_INT 23
11975: PUSH
11976: LD_INT 3
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: PUSH
11983: LD_INT 2
11985: PUSH
11986: LD_INT 95
11988: PUSH
11989: LD_INT 13
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: PUSH
11996: LD_INT 95
11998: PUSH
11999: LD_INT 14
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: LIST
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: LIST
12015: PPUSH
12016: CALL_OW 69
12020: OR
12021: IFFALSE 12210
// begin unit := UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) [ 1 ] ;
12023: LD_ADDR_VAR 0 2
12027: PUSH
12028: LD_EXP 34
12032: PPUSH
12033: LD_INT 2
12035: PUSH
12036: LD_INT 95
12038: PUSH
12039: LD_INT 13
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: PUSH
12046: LD_INT 95
12048: PUSH
12049: LD_INT 14
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: LIST
12060: PPUSH
12061: CALL_OW 72
12065: PUSH
12066: LD_INT 1
12068: ARRAY
12069: ST_TO_ADDR
// if not unit then
12070: LD_VAR 0 2
12074: NOT
12075: IFFALSE 12210
// begin tmp := FilterAllUnits ( [ [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] , [ f_control , control_manual ] , [ f_nation , 3 ] ] ) ;
12077: LD_ADDR_VAR 0 4
12081: PUSH
12082: LD_INT 2
12084: PUSH
12085: LD_INT 95
12087: PUSH
12088: LD_INT 13
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: PUSH
12095: LD_INT 95
12097: PUSH
12098: LD_INT 14
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: LIST
12109: PUSH
12110: LD_INT 33
12112: PUSH
12113: LD_INT 1
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: PUSH
12120: LD_INT 23
12122: PUSH
12123: LD_INT 3
12125: PUSH
12126: EMPTY
12127: LIST
12128: LIST
12129: PUSH
12130: EMPTY
12131: LIST
12132: LIST
12133: LIST
12134: PPUSH
12135: CALL_OW 69
12139: ST_TO_ADDR
// if not tmp then
12140: LD_VAR 0 4
12144: NOT
12145: IFFALSE 12149
// exit ;
12147: GO 12285
// for i in tmp do
12149: LD_ADDR_VAR 0 1
12153: PUSH
12154: LD_VAR 0 4
12158: PUSH
12159: FOR_IN
12160: IFFALSE 12208
// if IsDrivenBy ( i ) in RuScientists then
12162: LD_VAR 0 1
12166: PPUSH
12167: CALL_OW 311
12171: PUSH
12172: LD_EXP 34
12176: IN
12177: IFFALSE 12206
// begin unit := IsDrivenBy ( i ) ;
12179: LD_ADDR_VAR 0 2
12183: PUSH
12184: LD_VAR 0 1
12188: PPUSH
12189: CALL_OW 311
12193: ST_TO_ADDR
// veh := i ;
12194: LD_ADDR_VAR 0 3
12198: PUSH
12199: LD_VAR 0 1
12203: ST_TO_ADDR
// break ;
12204: GO 12208
// end ;
12206: GO 12159
12208: POP
12209: POP
// end ; end ; if not unit then
12210: LD_VAR 0 2
12214: NOT
12215: IFFALSE 12219
// exit ;
12217: GO 12285
// RuScientists = RuScientists diff unit ;
12219: LD_ADDR_EXP 34
12223: PUSH
12224: LD_EXP 34
12228: PUSH
12229: LD_VAR 0 2
12233: DIFF
12234: ST_TO_ADDR
// RemoveUnit ( unit ) ;
12235: LD_VAR 0 2
12239: PPUSH
12240: CALL_OW 64
// if veh then
12244: LD_VAR 0 3
12248: IFFALSE 12285
// begin if GetWeapon ( veh ) = 49 then
12250: LD_VAR 0 3
12254: PPUSH
12255: CALL_OW 264
12259: PUSH
12260: LD_INT 49
12262: EQUAL
12263: IFFALSE 12276
// KillUnit ( veh ) else
12265: LD_VAR 0 3
12269: PPUSH
12270: CALL_OW 66
12274: GO 12285
// RemoveUnit ( veh ) ;
12276: LD_VAR 0 3
12280: PPUSH
12281: CALL_OW 64
// end ; end ; end_of_file
12285: PPOPN 4
12287: END
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12288: LD_INT 0
12290: PPUSH
12291: PPUSH
// for i in charactersList do
12292: LD_ADDR_VAR 0 4
12296: PUSH
12297: LD_VAR 0 1
12301: PUSH
12302: FOR_IN
12303: IFFALSE 12321
// SaveCharacters ( i , ident ) ;
12305: LD_VAR 0 4
12309: PPUSH
12310: LD_VAR 0 2
12314: PPUSH
12315: CALL_OW 38
12319: GO 12302
12321: POP
12322: POP
// end ;
12323: LD_VAR 0 3
12327: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
12328: LD_INT 0
12330: PPUSH
12331: PPUSH
12332: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12333: LD_ADDR_VAR 0 1
12337: PUSH
12338: LD_VAR 0 1
12342: PUSH
12343: LD_EXP 1
12347: PUSH
12348: LD_EXP 7
12352: PUSH
12353: LD_EXP 3
12357: PUSH
12358: LD_EXP 4
12362: PUSH
12363: LD_EXP 5
12367: PUSH
12368: LD_EXP 2
12372: PUSH
12373: LD_EXP 12
12377: PUSH
12378: LD_EXP 13
12382: PUSH
12383: LD_EXP 9
12387: PUSH
12388: LD_EXP 11
12392: PUSH
12393: LD_EXP 6
12397: PUSH
12398: LD_EXP 8
12402: PUSH
12403: LD_EXP 10
12407: PUSH
12408: LD_EXP 22
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: DIFF
12429: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
12430: LD_ADDR_VAR 0 6
12434: PUSH
12435: LD_VAR 0 1
12439: PUSH
12440: LD_INT 1
12442: PPUSH
12443: LD_VAR 0 1
12447: PPUSH
12448: CALL_OW 12
12452: ARRAY
12453: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
12454: LD_VAR 0 6
12458: PPUSH
12459: CALL_OW 258
12463: PUSH
12464: LD_INT 1
12466: EQUAL
12467: IFFALSE 12485
// Say ( speaker , dialogMID ) else
12469: LD_VAR 0 6
12473: PPUSH
12474: LD_VAR 0 2
12478: PPUSH
12479: CALL_OW 88
12483: GO 12499
// Say ( speaker , dialogFID ) ;
12485: LD_VAR 0 6
12489: PPUSH
12490: LD_VAR 0 3
12494: PPUSH
12495: CALL_OW 88
// result := speaker ;
12499: LD_ADDR_VAR 0 4
12503: PUSH
12504: LD_VAR 0 6
12508: ST_TO_ADDR
// end ;
12509: LD_VAR 0 4
12513: RET
// export function PrepareDifficulty ; var tmp ; begin
12514: LD_INT 0
12516: PPUSH
12517: PPUSH
// if Difficulty = 1 then
12518: LD_OWVAR 67
12522: PUSH
12523: LD_INT 1
12525: EQUAL
12526: IFFALSE 12544
// begin RuSolMinLevel = 8 ;
12528: LD_ADDR_EXP 36
12532: PUSH
12533: LD_INT 8
12535: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12536: LD_ADDR_EXP 37
12540: PUSH
12541: LD_INT 10
12543: ST_TO_ADDR
// end ; if Difficulty = 2 then
12544: LD_OWVAR 67
12548: PUSH
12549: LD_INT 2
12551: EQUAL
12552: IFFALSE 12646
// begin RuSolMinLevel = 9 ;
12554: LD_ADDR_EXP 36
12558: PUSH
12559: LD_INT 9
12561: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12562: LD_ADDR_EXP 37
12566: PUSH
12567: LD_INT 10
12569: ST_TO_ADDR
// uc_nation = 3 ;
12570: LD_ADDR_OWVAR 21
12574: PUSH
12575: LD_INT 3
12577: ST_TO_ADDR
// uc_side = 3 ;
12578: LD_ADDR_OWVAR 20
12582: PUSH
12583: LD_INT 3
12585: ST_TO_ADDR
// bc_level = 10 ;
12586: LD_ADDR_OWVAR 43
12590: PUSH
12591: LD_INT 10
12593: ST_TO_ADDR
// bc_type = b_turret ;
12594: LD_ADDR_OWVAR 42
12598: PUSH
12599: LD_INT 33
12601: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12602: LD_ADDR_VAR 0 2
12606: PUSH
12607: LD_INT 86
12609: PPUSH
12610: LD_INT 34
12612: PPUSH
12613: LD_INT 2
12615: PPUSH
12616: CALL_OW 47
12620: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12621: LD_VAR 0 2
12625: PPUSH
12626: LD_INT 49
12628: PPUSH
12629: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12633: LD_INT 64
12635: PPUSH
12636: LD_INT 3
12638: PPUSH
12639: LD_INT 1
12641: PPUSH
12642: CALL_OW 322
// end ; if Difficulty = 3 then
12646: LD_OWVAR 67
12650: PUSH
12651: LD_INT 3
12653: EQUAL
12654: IFFALSE 12792
// begin RuSolMinLevel = 10 ;
12656: LD_ADDR_EXP 36
12660: PUSH
12661: LD_INT 10
12663: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12664: LD_ADDR_EXP 37
12668: PUSH
12669: LD_INT 10
12671: ST_TO_ADDR
// uc_nation = 3 ;
12672: LD_ADDR_OWVAR 21
12676: PUSH
12677: LD_INT 3
12679: ST_TO_ADDR
// uc_side = 3 ;
12680: LD_ADDR_OWVAR 20
12684: PUSH
12685: LD_INT 3
12687: ST_TO_ADDR
// bc_level = 10 ;
12688: LD_ADDR_OWVAR 43
12692: PUSH
12693: LD_INT 10
12695: ST_TO_ADDR
// bc_type = b_turret ;
12696: LD_ADDR_OWVAR 42
12700: PUSH
12701: LD_INT 33
12703: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12704: LD_ADDR_VAR 0 2
12708: PUSH
12709: LD_INT 86
12711: PPUSH
12712: LD_INT 34
12714: PPUSH
12715: LD_INT 2
12717: PPUSH
12718: CALL_OW 47
12722: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12723: LD_VAR 0 2
12727: PPUSH
12728: LD_INT 49
12730: PPUSH
12731: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
12735: LD_ADDR_VAR 0 2
12739: PUSH
12740: LD_INT 93
12742: PPUSH
12743: LD_INT 31
12745: PPUSH
12746: LD_INT 2
12748: PPUSH
12749: CALL_OW 47
12753: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12754: LD_VAR 0 2
12758: PPUSH
12759: LD_INT 49
12761: PPUSH
12762: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12766: LD_INT 64
12768: PPUSH
12769: LD_INT 3
12771: PPUSH
12772: LD_INT 1
12774: PPUSH
12775: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
12779: LD_INT 65
12781: PPUSH
12782: LD_INT 3
12784: PPUSH
12785: LD_INT 1
12787: PPUSH
12788: CALL_OW 322
// end ; end ;
12792: LD_VAR 0 1
12796: RET
// export function ShowQuery1 ; begin
12797: LD_INT 0
12799: PPUSH
// case query ( Q1 ) of 1 :
12800: LD_STRING Q1
12802: PPUSH
12803: CALL_OW 97
12807: PUSH
12808: LD_INT 1
12810: DOUBLE
12811: EQUAL
12812: IFTRUE 12816
12814: GO 12827
12816: POP
// result = 1 ; 2 :
12817: LD_ADDR_VAR 0 1
12821: PUSH
12822: LD_INT 1
12824: ST_TO_ADDR
12825: GO 12866
12827: LD_INT 2
12829: DOUBLE
12830: EQUAL
12831: IFTRUE 12835
12833: GO 12846
12835: POP
// result = 2 ; 3 :
12836: LD_ADDR_VAR 0 1
12840: PUSH
12841: LD_INT 2
12843: ST_TO_ADDR
12844: GO 12866
12846: LD_INT 3
12848: DOUBLE
12849: EQUAL
12850: IFTRUE 12854
12852: GO 12865
12854: POP
// result = 3 ; end ;
12855: LD_ADDR_VAR 0 1
12859: PUSH
12860: LD_INT 3
12862: ST_TO_ADDR
12863: GO 12866
12865: POP
// end ;
12866: LD_VAR 0 1
12870: RET
// export function ShowQuery2 ; begin
12871: LD_INT 0
12873: PPUSH
// case query ( Q1a ) of 1 :
12874: LD_STRING Q1a
12876: PPUSH
12877: CALL_OW 97
12881: PUSH
12882: LD_INT 1
12884: DOUBLE
12885: EQUAL
12886: IFTRUE 12890
12888: GO 12901
12890: POP
// result = 1 ; 2 :
12891: LD_ADDR_VAR 0 1
12895: PUSH
12896: LD_INT 1
12898: ST_TO_ADDR
12899: GO 12940
12901: LD_INT 2
12903: DOUBLE
12904: EQUAL
12905: IFTRUE 12909
12907: GO 12920
12909: POP
// result = 2 ; 3 :
12910: LD_ADDR_VAR 0 1
12914: PUSH
12915: LD_INT 2
12917: ST_TO_ADDR
12918: GO 12940
12920: LD_INT 3
12922: DOUBLE
12923: EQUAL
12924: IFTRUE 12928
12926: GO 12939
12928: POP
// result = 3 ; end ;
12929: LD_ADDR_VAR 0 1
12933: PUSH
12934: LD_INT 3
12936: ST_TO_ADDR
12937: GO 12940
12939: POP
// end ;
12940: LD_VAR 0 1
12944: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
12945: LD_INT 0
12947: PPUSH
12948: PPUSH
12949: PPUSH
12950: PPUSH
12951: PPUSH
// for i = 1 to count do
12952: LD_ADDR_VAR 0 8
12956: PUSH
12957: DOUBLE
12958: LD_INT 1
12960: DEC
12961: ST_TO_ADDR
12962: LD_VAR 0 6
12966: PUSH
12967: FOR_TO
12968: IFFALSE 13049
// begin uc_side = side ;
12970: LD_ADDR_OWVAR 20
12974: PUSH
12975: LD_VAR 0 1
12979: ST_TO_ADDR
// uc_nation = nation ;
12980: LD_ADDR_OWVAR 21
12984: PUSH
12985: LD_VAR 0 2
12989: ST_TO_ADDR
// hc_gallery =  ;
12990: LD_ADDR_OWVAR 33
12994: PUSH
12995: LD_STRING 
12997: ST_TO_ADDR
// hc_name =  ;
12998: LD_ADDR_OWVAR 26
13002: PUSH
13003: LD_STRING 
13005: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
13006: LD_INT 0
13008: PPUSH
13009: LD_VAR 0 5
13013: PPUSH
13014: LD_VAR 0 4
13018: PPUSH
13019: CALL_OW 380
// un = CreateHuman ;
13023: LD_ADDR_VAR 0 10
13027: PUSH
13028: CALL_OW 44
13032: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
13033: LD_VAR 0 10
13037: PPUSH
13038: LD_VAR 0 3
13042: PPUSH
13043: CALL_OW 52
// end ;
13047: GO 12967
13049: POP
13050: POP
// end ;
13051: LD_VAR 0 7
13055: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
13056: LD_INT 0
13058: PPUSH
13059: PPUSH
13060: PPUSH
13061: PPUSH
13062: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
13063: LD_ADDR_VAR 0 8
13067: PUSH
13068: LD_INT 48
13070: PUSH
13071: LD_INT 49
13073: PUSH
13074: LD_INT 50
13076: PUSH
13077: LD_INT 20
13079: PUSH
13080: LD_INT 1
13082: PUSH
13083: LD_INT 51
13085: PUSH
13086: LD_INT 52
13088: PUSH
13089: LD_INT 69
13091: PUSH
13092: LD_INT 39
13094: PUSH
13095: LD_INT 34
13097: PUSH
13098: LD_INT 40
13100: PUSH
13101: LD_INT 53
13103: PUSH
13104: LD_INT 71
13106: PUSH
13107: LD_INT 57
13109: PUSH
13110: LD_INT 58
13112: PUSH
13113: LD_INT 44
13115: PUSH
13116: LD_INT 32
13118: PUSH
13119: LD_INT 27
13121: PUSH
13122: LD_INT 23
13124: PUSH
13125: LD_INT 33
13127: PUSH
13128: LD_INT 59
13130: PUSH
13131: LD_INT 54
13133: PUSH
13134: LD_INT 55
13136: PUSH
13137: LD_INT 56
13139: PUSH
13140: LD_INT 63
13142: PUSH
13143: LD_INT 64
13145: PUSH
13146: LD_INT 65
13148: PUSH
13149: LD_INT 30
13151: PUSH
13152: LD_INT 31
13154: PUSH
13155: LD_INT 21
13157: PUSH
13158: LD_INT 22
13160: PUSH
13161: LD_INT 25
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: ST_TO_ADDR
// for i = 1 to ru_tech_list do
13198: LD_ADDR_VAR 0 5
13202: PUSH
13203: DOUBLE
13204: LD_INT 1
13206: DEC
13207: ST_TO_ADDR
13208: LD_VAR 0 8
13212: PUSH
13213: FOR_TO
13214: IFFALSE 13290
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
13216: LD_VAR 0 8
13220: PUSH
13221: LD_VAR 0 5
13225: ARRAY
13226: PPUSH
13227: LD_VAR 0 1
13231: PPUSH
13232: CALL_OW 321
13236: PUSH
13237: LD_INT 1
13239: EQUAL
13240: PUSH
13241: LD_VAR 0 8
13245: PUSH
13246: LD_VAR 0 5
13250: ARRAY
13251: PPUSH
13252: LD_VAR 0 3
13256: PPUSH
13257: CALL_OW 482
13261: PUSH
13262: LD_INT 1
13264: EQUAL
13265: AND
13266: IFFALSE 13288
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
13268: LD_VAR 0 2
13272: PPUSH
13273: LD_VAR 0 8
13277: PUSH
13278: LD_VAR 0 5
13282: ARRAY
13283: PPUSH
13284: CALL_OW 184
13288: GO 13213
13290: POP
13291: POP
// end ;
13292: LD_VAR 0 4
13296: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
13297: LD_INT 0
13299: PPUSH
13300: PPUSH
13301: PPUSH
13302: PPUSH
13303: PPUSH
13304: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
13305: LD_ADDR_VAR 0 8
13309: PUSH
13310: LD_VAR 0 2
13314: PPUSH
13315: CALL_OW 313
13319: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13320: LD_ADDR_VAR 0 9
13324: PUSH
13325: LD_VAR 0 3
13329: PPUSH
13330: LD_INT 22
13332: PUSH
13333: LD_VAR 0 1
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: PUSH
13342: LD_INT 25
13344: PUSH
13345: LD_INT 2
13347: PUSH
13348: EMPTY
13349: LIST
13350: LIST
13351: PUSH
13352: LD_INT 24
13354: PUSH
13355: LD_INT 750
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: PUSH
13362: LD_INT 3
13364: PUSH
13365: LD_INT 54
13367: PUSH
13368: EMPTY
13369: LIST
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: PPUSH
13381: CALL_OW 70
13385: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13386: LD_ADDR_VAR 0 6
13390: PUSH
13391: LD_VAR 0 3
13395: PPUSH
13396: LD_INT 22
13398: PUSH
13399: LD_VAR 0 1
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: PUSH
13408: LD_INT 21
13410: PUSH
13411: LD_INT 3
13413: PUSH
13414: EMPTY
13415: LIST
13416: LIST
13417: PUSH
13418: LD_INT 3
13420: PUSH
13421: LD_INT 24
13423: PUSH
13424: LD_INT 1000
13426: PUSH
13427: EMPTY
13428: LIST
13429: LIST
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: LIST
13439: PUSH
13440: EMPTY
13441: LIST
13442: PPUSH
13443: CALL_OW 70
13447: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13448: LD_VAR 0 6
13452: NOT
13453: PUSH
13454: LD_INT 22
13456: PUSH
13457: LD_VAR 0 1
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PUSH
13466: LD_INT 25
13468: PUSH
13469: LD_INT 2
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: PUSH
13476: LD_INT 24
13478: PUSH
13479: LD_INT 250
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: LIST
13490: PPUSH
13491: CALL_OW 69
13495: NOT
13496: AND
13497: IFFALSE 13501
// exit ;
13499: GO 13683
// if buildings_list > 0 and engineerOkInside then
13501: LD_VAR 0 6
13505: PUSH
13506: LD_INT 0
13508: GREATER
13509: PUSH
13510: LD_VAR 0 8
13514: AND
13515: IFFALSE 13526
// ComExitBuilding ( engineerOkInside ) ;
13517: LD_VAR 0 8
13521: PPUSH
13522: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
13526: LD_VAR 0 6
13530: PUSH
13531: LD_INT 0
13533: GREATER
13534: PUSH
13535: LD_VAR 0 9
13539: PUSH
13540: LD_INT 0
13542: GREATER
13543: AND
13544: IFFALSE 13564
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
13546: LD_VAR 0 9
13550: PPUSH
13551: LD_VAR 0 6
13555: PUSH
13556: LD_INT 1
13558: ARRAY
13559: PPUSH
13560: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
13564: LD_VAR 0 6
13568: PUSH
13569: LD_INT 0
13571: EQUAL
13572: PUSH
13573: LD_VAR 0 4
13577: PUSH
13578: LD_INT 0
13580: EQUAL
13581: AND
13582: PUSH
13583: LD_VAR 0 9
13587: PUSH
13588: LD_INT 0
13590: GREATER
13591: AND
13592: IFFALSE 13608
// ComEnterUnit ( engineerOkOutside , building ) ;
13594: LD_VAR 0 9
13598: PPUSH
13599: LD_VAR 0 2
13603: PPUSH
13604: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
13608: LD_VAR 0 9
13612: PUSH
13613: LD_INT 0
13615: GREATER
13616: PUSH
13617: LD_VAR 0 6
13621: PUSH
13622: LD_INT 0
13624: EQUAL
13625: AND
13626: PUSH
13627: LD_VAR 0 4
13631: PUSH
13632: LD_INT 0
13634: GREATER
13635: AND
13636: IFFALSE 13683
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13638: LD_VAR 0 9
13642: PPUSH
13643: LD_VAR 0 4
13647: PUSH
13648: LD_INT 1
13650: ARRAY
13651: PPUSH
13652: LD_VAR 0 4
13656: PUSH
13657: LD_INT 2
13659: ARRAY
13660: PPUSH
13661: LD_VAR 0 4
13665: PUSH
13666: LD_INT 3
13668: ARRAY
13669: PPUSH
13670: LD_VAR 0 4
13674: PUSH
13675: LD_INT 4
13677: ARRAY
13678: PPUSH
13679: CALL_OW 145
// end ;
13683: LD_VAR 0 5
13687: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13688: LD_INT 0
13690: PPUSH
13691: PPUSH
13692: PPUSH
13693: PPUSH
13694: PPUSH
13695: PPUSH
13696: PPUSH
13697: PPUSH
13698: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13699: LD_ADDR_VAR 0 6
13703: PUSH
13704: LD_INT 22
13706: PUSH
13707: LD_VAR 0 1
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: PUSH
13716: LD_INT 25
13718: PUSH
13719: LD_INT 4
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: PUSH
13726: LD_INT 24
13728: PUSH
13729: LD_INT 251
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: PUSH
13736: EMPTY
13737: LIST
13738: LIST
13739: LIST
13740: PPUSH
13741: CALL_OW 69
13745: PUSH
13746: LD_EXP 34
13750: PUSH
13751: EMPTY
13752: LIST
13753: DIFF
13754: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13755: LD_ADDR_VAR 0 7
13759: PUSH
13760: LD_VAR 0 3
13764: PPUSH
13765: LD_INT 22
13767: PUSH
13768: LD_VAR 0 1
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: PUSH
13777: LD_INT 25
13779: PUSH
13780: LD_INT 4
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: PUSH
13787: LD_INT 50
13789: PUSH
13790: EMPTY
13791: LIST
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: LIST
13797: PPUSH
13798: CALL_OW 70
13802: PUSH
13803: LD_EXP 34
13807: PUSH
13808: EMPTY
13809: LIST
13810: DIFF
13811: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13812: LD_ADDR_VAR 0 10
13816: PUSH
13817: LD_VAR 0 3
13821: PPUSH
13822: LD_INT 22
13824: PUSH
13825: LD_VAR 0 1
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PUSH
13834: LD_INT 21
13836: PUSH
13837: LD_INT 1
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PUSH
13844: LD_INT 3
13846: PUSH
13847: LD_INT 24
13849: PUSH
13850: LD_INT 750
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: LIST
13865: PPUSH
13866: CALL_OW 70
13870: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13871: LD_ADDR_VAR 0 11
13875: PUSH
13876: LD_VAR 0 2
13880: PPUSH
13881: LD_INT 22
13883: PUSH
13884: LD_VAR 0 1
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: PUSH
13893: LD_INT 21
13895: PUSH
13896: LD_INT 1
13898: PUSH
13899: EMPTY
13900: LIST
13901: LIST
13902: PUSH
13903: LD_INT 3
13905: PUSH
13906: LD_INT 24
13908: PUSH
13909: LD_INT 1000
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: PUSH
13920: EMPTY
13921: LIST
13922: LIST
13923: LIST
13924: PPUSH
13925: CALL_OW 70
13929: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
13930: LD_VAR 0 10
13934: PUSH
13935: LD_INT 0
13937: GREATER
13938: PUSH
13939: LD_VAR 0 6
13943: PUSH
13944: LD_INT 0
13946: GREATER
13947: AND
13948: IFFALSE 13964
// ComMoveToArea ( damageUnits , healArea ) ;
13950: LD_VAR 0 10
13954: PPUSH
13955: LD_VAR 0 2
13959: PPUSH
13960: CALL_OW 113
// if unitsToHeal > 0 and sci_listOutside > 0 then
13964: LD_VAR 0 11
13968: PUSH
13969: LD_INT 0
13971: GREATER
13972: PUSH
13973: LD_VAR 0 7
13977: PUSH
13978: LD_INT 0
13980: GREATER
13981: AND
13982: IFFALSE 14002
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
13984: LD_VAR 0 7
13988: PPUSH
13989: LD_VAR 0 11
13993: PUSH
13994: LD_INT 1
13996: ARRAY
13997: PPUSH
13998: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
14002: LD_VAR 0 10
14006: PUSH
14007: LD_INT 0
14009: EQUAL
14010: PUSH
14011: LD_VAR 0 11
14015: PUSH
14016: LD_INT 0
14018: EQUAL
14019: AND
14020: PUSH
14021: LD_VAR 0 7
14025: PUSH
14026: LD_INT 0
14028: GREATER
14029: AND
14030: IFFALSE 14135
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
14032: LD_ADDR_VAR 0 12
14036: PUSH
14037: LD_INT 22
14039: PUSH
14040: LD_VAR 0 1
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: PUSH
14049: LD_INT 21
14051: PUSH
14052: LD_INT 3
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: PUSH
14059: LD_INT 30
14061: PUSH
14062: LD_INT 8
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: PUSH
14069: EMPTY
14070: LIST
14071: LIST
14072: LIST
14073: PPUSH
14074: CALL_OW 69
14078: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
14079: LD_ADDR_VAR 0 13
14083: PUSH
14084: LD_INT 1
14086: PPUSH
14087: LD_VAR 0 12
14091: PPUSH
14092: CALL_OW 12
14096: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
14097: LD_VAR 0 7
14101: PPUSH
14102: LD_INT 3
14104: PUSH
14105: LD_INT 60
14107: PUSH
14108: EMPTY
14109: LIST
14110: PUSH
14111: EMPTY
14112: LIST
14113: LIST
14114: PPUSH
14115: CALL_OW 72
14119: PPUSH
14120: LD_VAR 0 12
14124: PUSH
14125: LD_VAR 0 13
14129: ARRAY
14130: PPUSH
14131: CALL_OW 120
// end ; if FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) > 0 and IsOk ( ru_fact ) and GetSide ( ru_fact ) = 3 then
14135: LD_VAR 0 3
14139: PPUSH
14140: LD_INT 22
14142: PUSH
14143: LD_VAR 0 1
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: PUSH
14152: LD_INT 25
14154: PUSH
14155: LD_INT 3
14157: PUSH
14158: EMPTY
14159: LIST
14160: LIST
14161: PUSH
14162: LD_INT 24
14164: PUSH
14165: LD_INT 751
14167: PUSH
14168: EMPTY
14169: LIST
14170: LIST
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: LIST
14176: PPUSH
14177: CALL_OW 70
14181: PUSH
14182: LD_INT 0
14184: GREATER
14185: PUSH
14186: LD_INT 21
14188: PPUSH
14189: CALL_OW 302
14193: AND
14194: PUSH
14195: LD_INT 21
14197: PPUSH
14198: CALL_OW 255
14202: PUSH
14203: LD_INT 3
14205: EQUAL
14206: AND
14207: IFFALSE 14263
// ComEnterUnit ( FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) , ru_fact ) ;
14209: LD_VAR 0 3
14213: PPUSH
14214: LD_INT 22
14216: PUSH
14217: LD_VAR 0 1
14221: PUSH
14222: EMPTY
14223: LIST
14224: LIST
14225: PUSH
14226: LD_INT 25
14228: PUSH
14229: LD_INT 3
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: PUSH
14236: LD_INT 24
14238: PUSH
14239: LD_INT 751
14241: PUSH
14242: EMPTY
14243: LIST
14244: LIST
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: LIST
14250: PPUSH
14251: CALL_OW 70
14255: PPUSH
14256: LD_INT 21
14258: PPUSH
14259: CALL_OW 120
// end ;
14263: LD_VAR 0 5
14267: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
14268: LD_INT 0
14270: PPUSH
14271: PPUSH
14272: PPUSH
14273: PPUSH
14274: PPUSH
14275: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
14276: LD_ADDR_VAR 0 7
14280: PUSH
14281: LD_VAR 0 2
14285: PPUSH
14286: LD_INT 22
14288: PUSH
14289: LD_VAR 0 1
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: PUSH
14298: LD_INT 21
14300: PUSH
14301: LD_INT 2
14303: PUSH
14304: EMPTY
14305: LIST
14306: LIST
14307: PUSH
14308: LD_INT 34
14310: PUSH
14311: LD_INT 52
14313: PUSH
14314: EMPTY
14315: LIST
14316: LIST
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: LIST
14322: PPUSH
14323: CALL_OW 70
14327: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14328: LD_ADDR_VAR 0 8
14332: PUSH
14333: LD_VAR 0 2
14337: PPUSH
14338: LD_INT 22
14340: PUSH
14341: LD_VAR 0 1
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: PUSH
14350: LD_INT 21
14352: PUSH
14353: LD_INT 3
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: PUSH
14360: LD_INT 3
14362: PUSH
14363: LD_INT 24
14365: PUSH
14366: LD_INT 1000
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: LIST
14381: PUSH
14382: EMPTY
14383: LIST
14384: PPUSH
14385: CALL_OW 70
14389: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
14390: LD_VAR 0 8
14394: PUSH
14395: LD_INT 0
14397: GREATER
14398: PUSH
14399: LD_VAR 0 7
14403: PPUSH
14404: LD_INT 24
14406: PUSH
14407: LD_INT 750
14409: PUSH
14410: EMPTY
14411: LIST
14412: LIST
14413: PPUSH
14414: CALL_OW 72
14418: PUSH
14419: LD_INT 0
14421: GREATER
14422: AND
14423: IFFALSE 14443
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
14425: LD_VAR 0 7
14429: PPUSH
14430: LD_VAR 0 8
14434: PUSH
14435: LD_INT 1
14437: ARRAY
14438: PPUSH
14439: CALL_OW 130
// end ;
14443: LD_VAR 0 3
14447: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14448: LD_INT 0
14450: PPUSH
14451: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14452: LD_INT 22
14454: PUSH
14455: LD_VAR 0 1
14459: PUSH
14460: EMPTY
14461: LIST
14462: LIST
14463: PUSH
14464: LD_INT 21
14466: PUSH
14467: LD_INT 2
14469: PUSH
14470: EMPTY
14471: LIST
14472: LIST
14473: PUSH
14474: EMPTY
14475: LIST
14476: LIST
14477: PPUSH
14478: CALL_OW 69
14482: PUSH
14483: LD_INT 18
14485: PPUSH
14486: LD_INT 22
14488: PUSH
14489: LD_VAR 0 1
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: PUSH
14498: LD_INT 21
14500: PUSH
14501: LD_INT 2
14503: PUSH
14504: EMPTY
14505: LIST
14506: LIST
14507: PUSH
14508: EMPTY
14509: LIST
14510: LIST
14511: PPUSH
14512: CALL_OW 70
14516: PUSH
14517: LD_VAR 0 3
14521: LESSEQUAL
14522: DIFF
14523: IFFALSE 14590
// for i = 1 to vehCount do
14525: LD_ADDR_VAR 0 9
14529: PUSH
14530: DOUBLE
14531: LD_INT 1
14533: DEC
14534: ST_TO_ADDR
14535: LD_VAR 0 3
14539: PUSH
14540: FOR_TO
14541: IFFALSE 14588
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14543: LD_VAR 0 2
14547: PPUSH
14548: LD_VAR 0 7
14552: PPUSH
14553: LD_VAR 0 5
14557: PPUSH
14558: LD_VAR 0 6
14562: PPUSH
14563: LD_VAR 0 4
14567: PUSH
14568: LD_INT 1
14570: PPUSH
14571: LD_VAR 0 4
14575: PPUSH
14576: CALL_OW 12
14580: ARRAY
14581: PPUSH
14582: CALL_OW 185
14586: GO 14540
14588: POP
14589: POP
// end ;
14590: LD_VAR 0 8
14594: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
14595: LD_INT 0
14597: PPUSH
14598: PPUSH
14599: PPUSH
14600: PPUSH
14601: PPUSH
14602: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14603: LD_ADDR_VAR 0 6
14607: PUSH
14608: LD_INT 22
14610: PUSH
14611: LD_VAR 0 1
14615: PUSH
14616: EMPTY
14617: LIST
14618: LIST
14619: PUSH
14620: LD_INT 25
14622: PUSH
14623: LD_INT 9
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: PUSH
14630: EMPTY
14631: LIST
14632: LIST
14633: PPUSH
14634: CALL_OW 69
14638: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14639: LD_ADDR_VAR 0 7
14643: PUSH
14644: LD_INT 81
14646: PUSH
14647: LD_VAR 0 1
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: PUSH
14656: LD_INT 3
14658: PUSH
14659: LD_INT 21
14661: PUSH
14662: LD_INT 3
14664: PUSH
14665: EMPTY
14666: LIST
14667: LIST
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: PPUSH
14677: CALL_OW 69
14681: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14682: LD_ADDR_VAR 0 4
14686: PUSH
14687: LD_INT 1
14689: PPUSH
14690: LD_INT 3
14692: PPUSH
14693: CALL_OW 12
14697: ST_TO_ADDR
// for i = 1 to list do
14698: LD_ADDR_VAR 0 5
14702: PUSH
14703: DOUBLE
14704: LD_INT 1
14706: DEC
14707: ST_TO_ADDR
14708: LD_VAR 0 6
14712: PUSH
14713: FOR_TO
14714: IFFALSE 14916
// for ta in filter do
14716: LD_ADDR_VAR 0 3
14720: PUSH
14721: LD_VAR 0 7
14725: PUSH
14726: FOR_IN
14727: IFFALSE 14912
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14729: LD_VAR 0 6
14733: PUSH
14734: LD_VAR 0 5
14738: ARRAY
14739: PPUSH
14740: LD_VAR 0 3
14744: PPUSH
14745: CALL_OW 296
14749: PUSH
14750: LD_INT 15
14752: LESSEQUAL
14753: IFFALSE 14910
// begin case c of 1 :
14755: LD_VAR 0 4
14759: PUSH
14760: LD_INT 1
14762: DOUBLE
14763: EQUAL
14764: IFTRUE 14768
14766: GO 14806
14768: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
14769: LD_VAR 0 6
14773: PUSH
14774: LD_VAR 0 5
14778: ARRAY
14779: PPUSH
14780: LD_VAR 0 3
14784: PPUSH
14785: CALL_OW 250
14789: PPUSH
14790: LD_VAR 0 3
14794: PPUSH
14795: CALL_OW 251
14799: PPUSH
14800: CALL_OW 154
14804: GO 14910
14806: LD_INT 2
14808: DOUBLE
14809: EQUAL
14810: IFTRUE 14814
14812: GO 14878
14814: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
14815: LD_VAR 0 6
14819: PUSH
14820: LD_VAR 0 5
14824: ARRAY
14825: PPUSH
14826: LD_VAR 0 3
14830: PPUSH
14831: CALL_OW 250
14835: PUSH
14836: LD_INT 1
14838: NEG
14839: PPUSH
14840: LD_INT 1
14842: PPUSH
14843: CALL_OW 12
14847: PLUS
14848: PPUSH
14849: LD_VAR 0 3
14853: PPUSH
14854: CALL_OW 251
14858: PUSH
14859: LD_INT 1
14861: NEG
14862: PPUSH
14863: LD_INT 1
14865: PPUSH
14866: CALL_OW 12
14870: PLUS
14871: PPUSH
14872: CALL_OW 153
14876: GO 14910
14878: LD_INT 3
14880: DOUBLE
14881: EQUAL
14882: IFTRUE 14886
14884: GO 14909
14886: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14887: LD_VAR 0 6
14891: PUSH
14892: LD_VAR 0 5
14896: ARRAY
14897: PPUSH
14898: LD_VAR 0 3
14902: PPUSH
14903: CALL_OW 115
14907: GO 14910
14909: POP
// end ; end ;
14910: GO 14726
14912: POP
14913: POP
14914: GO 14713
14916: POP
14917: POP
// end ;
14918: LD_VAR 0 2
14922: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
14923: LD_INT 0
14925: PPUSH
14926: PPUSH
14927: PPUSH
14928: PPUSH
// r := 100 ;
14929: LD_ADDR_VAR 0 5
14933: PUSH
14934: LD_INT 100
14936: ST_TO_ADDR
// x := 0 ;
14937: LD_ADDR_VAR 0 6
14941: PUSH
14942: LD_INT 0
14944: ST_TO_ADDR
// while ( x < n ) do
14945: LD_VAR 0 6
14949: PUSH
14950: LD_VAR 0 2
14954: LESS
14955: IFFALSE 15242
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
14957: LD_ADDR_VAR 0 4
14961: PUSH
14962: DOUBLE
14963: LD_INT 1
14965: DEC
14966: ST_TO_ADDR
14967: LD_VAR 0 1
14971: PPUSH
14972: LD_INT 0
14974: PPUSH
14975: CALL_OW 517
14979: PUSH
14980: LD_INT 1
14982: ARRAY
14983: PUSH
14984: FOR_TO
14985: IFFALSE 15238
// begin if r > 50 then
14987: LD_VAR 0 5
14991: PUSH
14992: LD_INT 50
14994: GREATER
14995: IFFALSE 15214
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
14997: LD_VAR 0 1
15001: PPUSH
15002: LD_INT 0
15004: PPUSH
15005: CALL_OW 517
15009: PUSH
15010: LD_INT 1
15012: ARRAY
15013: PUSH
15014: LD_VAR 0 4
15018: ARRAY
15019: PPUSH
15020: LD_VAR 0 1
15024: PPUSH
15025: LD_INT 0
15027: PPUSH
15028: CALL_OW 517
15032: PUSH
15033: LD_INT 2
15035: ARRAY
15036: PUSH
15037: LD_VAR 0 4
15041: ARRAY
15042: PPUSH
15043: CALL_OW 458
15047: NOT
15048: IFFALSE 15198
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
15050: LD_VAR 0 1
15054: PPUSH
15055: LD_INT 0
15057: PPUSH
15058: CALL_OW 517
15062: PUSH
15063: LD_INT 1
15065: ARRAY
15066: PUSH
15067: LD_VAR 0 4
15071: ARRAY
15072: PPUSH
15073: LD_VAR 0 1
15077: PPUSH
15078: LD_INT 0
15080: PPUSH
15081: CALL_OW 517
15085: PUSH
15086: LD_INT 2
15088: ARRAY
15089: PUSH
15090: LD_VAR 0 4
15094: ARRAY
15095: PPUSH
15096: LD_INT 8
15098: PPUSH
15099: LD_INT 0
15101: PPUSH
15102: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
15106: LD_ADDR_EXP 44
15110: PUSH
15111: LD_EXP 44
15115: PPUSH
15116: LD_INT 1
15118: PPUSH
15119: LD_VAR 0 1
15123: PPUSH
15124: LD_INT 0
15126: PPUSH
15127: CALL_OW 517
15131: PUSH
15132: LD_INT 1
15134: ARRAY
15135: PUSH
15136: LD_VAR 0 4
15140: ARRAY
15141: PUSH
15142: LD_VAR 0 1
15146: PPUSH
15147: LD_INT 0
15149: PPUSH
15150: CALL_OW 517
15154: PUSH
15155: LD_INT 2
15157: ARRAY
15158: PUSH
15159: LD_VAR 0 4
15163: ARRAY
15164: PUSH
15165: EMPTY
15166: LIST
15167: LIST
15168: PPUSH
15169: CALL_OW 2
15173: ST_TO_ADDR
// r := 0 ;
15174: LD_ADDR_VAR 0 5
15178: PUSH
15179: LD_INT 0
15181: ST_TO_ADDR
// x := x + 1 ;
15182: LD_ADDR_VAR 0 6
15186: PUSH
15187: LD_VAR 0 6
15191: PUSH
15192: LD_INT 1
15194: PLUS
15195: ST_TO_ADDR
// end else
15196: GO 15212
// r := r + 35 ;
15198: LD_ADDR_VAR 0 5
15202: PUSH
15203: LD_VAR 0 5
15207: PUSH
15208: LD_INT 35
15210: PLUS
15211: ST_TO_ADDR
// end else
15212: GO 15236
// r := r + rand ( 10 , 25 ) ;
15214: LD_ADDR_VAR 0 5
15218: PUSH
15219: LD_VAR 0 5
15223: PUSH
15224: LD_INT 10
15226: PPUSH
15227: LD_INT 25
15229: PPUSH
15230: CALL_OW 12
15234: PLUS
15235: ST_TO_ADDR
// end ;
15236: GO 14984
15238: POP
15239: POP
15240: GO 14945
// end ;
15242: LD_VAR 0 3
15246: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
15247: LD_INT 0
15249: PPUSH
15250: PPUSH
15251: PPUSH
15252: PPUSH
// tmpTab = [ ] ;
15253: LD_ADDR_VAR 0 6
15257: PUSH
15258: EMPTY
15259: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
15260: LD_INT 22
15262: PUSH
15263: LD_VAR 0 1
15267: PUSH
15268: EMPTY
15269: LIST
15270: LIST
15271: PUSH
15272: LD_INT 30
15274: PUSH
15275: LD_INT 32
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: PPUSH
15286: CALL_OW 69
15290: PUSH
15291: LD_INT 0
15293: GREATER
15294: IFFALSE 15377
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
15296: LD_ADDR_VAR 0 4
15300: PUSH
15301: LD_INT 22
15303: PUSH
15304: LD_VAR 0 1
15308: PUSH
15309: EMPTY
15310: LIST
15311: LIST
15312: PUSH
15313: LD_INT 30
15315: PUSH
15316: LD_INT 32
15318: PUSH
15319: EMPTY
15320: LIST
15321: LIST
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PPUSH
15327: CALL_OW 69
15331: PUSH
15332: FOR_IN
15333: IFFALSE 15375
// begin for j in UnitsInside ( i ) do
15335: LD_ADDR_VAR 0 5
15339: PUSH
15340: LD_VAR 0 4
15344: PPUSH
15345: CALL_OW 313
15349: PUSH
15350: FOR_IN
15351: IFFALSE 15371
// tmpTab = tmpTab ^ j ;
15353: LD_ADDR_VAR 0 6
15357: PUSH
15358: LD_VAR 0 6
15362: PUSH
15363: LD_VAR 0 5
15367: ADD
15368: ST_TO_ADDR
15369: GO 15350
15371: POP
15372: POP
// end ;
15373: GO 15332
15375: POP
15376: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
15377: LD_VAR 0 6
15381: PPUSH
15382: LD_VAR 0 2
15386: PPUSH
15387: CALL_OW 250
15391: PPUSH
15392: LD_VAR 0 2
15396: PPUSH
15397: CALL_OW 251
15401: PPUSH
15402: CALL_OW 114
// end ;
15406: LD_VAR 0 3
15410: RET
// export function CreateNature ; var i , un ; begin
15411: LD_INT 0
15413: PPUSH
15414: PPUSH
15415: PPUSH
// uc_side := 0 ;
15416: LD_ADDR_OWVAR 20
15420: PUSH
15421: LD_INT 0
15423: ST_TO_ADDR
// uc_nation := 0 ;
15424: LD_ADDR_OWVAR 21
15428: PUSH
15429: LD_INT 0
15431: ST_TO_ADDR
// InitHc ;
15432: CALL_OW 19
// hc_class := class_fish ;
15436: LD_ADDR_OWVAR 28
15440: PUSH
15441: LD_INT 20
15443: ST_TO_ADDR
// for i = 1 to 6 do
15444: LD_ADDR_VAR 0 2
15448: PUSH
15449: DOUBLE
15450: LD_INT 1
15452: DEC
15453: ST_TO_ADDR
15454: LD_INT 6
15456: PUSH
15457: FOR_TO
15458: IFFALSE 15477
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
15460: CALL_OW 44
15464: PPUSH
15465: LD_INT 23
15467: PPUSH
15468: LD_INT 0
15470: PPUSH
15471: CALL_OW 49
15475: GO 15457
15477: POP
15478: POP
// for i = 1 to Difficulty + 2 do
15479: LD_ADDR_VAR 0 2
15483: PUSH
15484: DOUBLE
15485: LD_INT 1
15487: DEC
15488: ST_TO_ADDR
15489: LD_OWVAR 67
15493: PUSH
15494: LD_INT 2
15496: PLUS
15497: PUSH
15498: FOR_TO
15499: IFFALSE 15608
// begin hc_sex = sex_male ;
15501: LD_ADDR_OWVAR 27
15505: PUSH
15506: LD_INT 1
15508: ST_TO_ADDR
// uc_side = 0 ;
15509: LD_ADDR_OWVAR 20
15513: PUSH
15514: LD_INT 0
15516: ST_TO_ADDR
// uc_nation = nation_nature ;
15517: LD_ADDR_OWVAR 21
15521: PUSH
15522: LD_INT 0
15524: ST_TO_ADDR
// hc_class = class_tiger ;
15525: LD_ADDR_OWVAR 28
15529: PUSH
15530: LD_INT 14
15532: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
15533: LD_ADDR_OWVAR 31
15537: PUSH
15538: LD_EXP 37
15542: PUSH
15543: LD_INT 0
15545: PUSH
15546: LD_INT 0
15548: PUSH
15549: LD_INT 0
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
15558: LD_ADDR_OWVAR 35
15562: PUSH
15563: LD_INT 5
15565: NEG
15566: PPUSH
15567: LD_INT 5
15569: PPUSH
15570: CALL_OW 12
15574: PUSH
15575: LD_OWVAR 67
15579: MUL
15580: ST_TO_ADDR
// un = CreateHuman ;
15581: LD_ADDR_VAR 0 3
15585: PUSH
15586: CALL_OW 44
15590: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15591: LD_VAR 0 3
15595: PPUSH
15596: LD_INT 24
15598: PPUSH
15599: LD_INT 0
15601: PPUSH
15602: CALL_OW 49
// end ;
15606: GO 15498
15608: POP
15609: POP
// for i = 1 to rand ( 3 , 4 ) do
15610: LD_ADDR_VAR 0 2
15614: PUSH
15615: DOUBLE
15616: LD_INT 1
15618: DEC
15619: ST_TO_ADDR
15620: LD_INT 3
15622: PPUSH
15623: LD_INT 4
15625: PPUSH
15626: CALL_OW 12
15630: PUSH
15631: FOR_TO
15632: IFFALSE 15724
// begin hc_sex = sex_male ;
15634: LD_ADDR_OWVAR 27
15638: PUSH
15639: LD_INT 1
15641: ST_TO_ADDR
// uc_side = 0 ;
15642: LD_ADDR_OWVAR 20
15646: PUSH
15647: LD_INT 0
15649: ST_TO_ADDR
// uc_nation = nation_nature ;
15650: LD_ADDR_OWVAR 21
15654: PUSH
15655: LD_INT 0
15657: ST_TO_ADDR
// hc_class = 18 ;
15658: LD_ADDR_OWVAR 28
15662: PUSH
15663: LD_INT 18
15665: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
15666: LD_ADDR_OWVAR 31
15670: PUSH
15671: LD_INT 0
15673: PUSH
15674: LD_INT 0
15676: PUSH
15677: LD_INT 0
15679: PUSH
15680: LD_INT 0
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: ST_TO_ADDR
// hc_agressivity = 0 ;
15689: LD_ADDR_OWVAR 35
15693: PUSH
15694: LD_INT 0
15696: ST_TO_ADDR
// un = CreateHuman ;
15697: LD_ADDR_VAR 0 3
15701: PUSH
15702: CALL_OW 44
15706: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15707: LD_VAR 0 3
15711: PPUSH
15712: LD_INT 24
15714: PPUSH
15715: LD_INT 0
15717: PPUSH
15718: CALL_OW 49
// end ;
15722: GO 15631
15724: POP
15725: POP
// for i = 1 to rand ( 1 , 3 ) do
15726: LD_ADDR_VAR 0 2
15730: PUSH
15731: DOUBLE
15732: LD_INT 1
15734: DEC
15735: ST_TO_ADDR
15736: LD_INT 1
15738: PPUSH
15739: LD_INT 3
15741: PPUSH
15742: CALL_OW 12
15746: PUSH
15747: FOR_TO
15748: IFFALSE 15896
// begin hc_sex = sex_male ;
15750: LD_ADDR_OWVAR 27
15754: PUSH
15755: LD_INT 1
15757: ST_TO_ADDR
// uc_side = 0 ;
15758: LD_ADDR_OWVAR 20
15762: PUSH
15763: LD_INT 0
15765: ST_TO_ADDR
// uc_nation = nation_nature ;
15766: LD_ADDR_OWVAR 21
15770: PUSH
15771: LD_INT 0
15773: ST_TO_ADDR
// hc_class = class_apeman ;
15774: LD_ADDR_OWVAR 28
15778: PUSH
15779: LD_INT 12
15781: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
15782: LD_ADDR_OWVAR 31
15786: PUSH
15787: LD_EXP 36
15791: PPUSH
15792: LD_EXP 37
15796: PPUSH
15797: CALL_OW 12
15801: PUSH
15802: LD_EXP 36
15806: PPUSH
15807: LD_EXP 37
15811: PPUSH
15812: CALL_OW 12
15816: PUSH
15817: LD_EXP 36
15821: PPUSH
15822: LD_EXP 37
15826: PPUSH
15827: CALL_OW 12
15831: PUSH
15832: LD_EXP 36
15836: PPUSH
15837: LD_EXP 37
15841: PPUSH
15842: CALL_OW 12
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: ST_TO_ADDR
// hc_agressivity = rand ( 1 , 20 ) ;
15853: LD_ADDR_OWVAR 35
15857: PUSH
15858: LD_INT 1
15860: PPUSH
15861: LD_INT 20
15863: PPUSH
15864: CALL_OW 12
15868: ST_TO_ADDR
// un = CreateHuman ;
15869: LD_ADDR_VAR 0 3
15873: PUSH
15874: CALL_OW 44
15878: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15879: LD_VAR 0 3
15883: PPUSH
15884: LD_INT 24
15886: PPUSH
15887: LD_INT 0
15889: PPUSH
15890: CALL_OW 49
// end ;
15894: GO 15747
15896: POP
15897: POP
// end ; end_of_file
15898: LD_VAR 0 1
15902: RET
// on UnitDestroyed ( unit ) do var i ;
15903: LD_INT 0
15905: PPUSH
// begin if unit in russianTanks then
15906: LD_VAR 0 1
15910: PUSH
15911: LD_EXP 39
15915: IN
15916: IFFALSE 15934
// russianTanks := russianTanks diff unit ;
15918: LD_ADDR_EXP 39
15922: PUSH
15923: LD_EXP 39
15927: PUSH
15928: LD_VAR 0 1
15932: DIFF
15933: ST_TO_ADDR
// if unit in russianTimeLapsers then
15934: LD_VAR 0 1
15938: PUSH
15939: LD_EXP 40
15943: IN
15944: IFFALSE 15962
// russianTimeLapsers := russianTimeLapsers diff unit ;
15946: LD_ADDR_EXP 40
15950: PUSH
15951: LD_EXP 40
15955: PUSH
15956: LD_VAR 0 1
15960: DIFF
15961: ST_TO_ADDR
// if unit in RuScientists then
15962: LD_VAR 0 1
15966: PUSH
15967: LD_EXP 34
15971: IN
15972: IFFALSE 16004
// begin RuScientists = RuScientists diff unit ;
15974: LD_ADDR_EXP 34
15978: PUSH
15979: LD_EXP 34
15983: PUSH
15984: LD_VAR 0 1
15988: DIFF
15989: ST_TO_ADDR
// sciCounter = sciCounter + 1 ;
15990: LD_ADDR_EXP 35
15994: PUSH
15995: LD_EXP 35
15999: PUSH
16000: LD_INT 1
16002: PLUS
16003: ST_TO_ADDR
// end ; end ;
16004: PPOPN 2
16006: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_laser then
16007: LD_VAR 0 3
16011: PPUSH
16012: CALL_OW 264
16016: PUSH
16017: LD_INT 9
16019: EQUAL
16020: IFFALSE 16036
// laserCounterDestroy := laserCounterDestroy + 1 ;
16022: LD_ADDR_EXP 50
16026: PUSH
16027: LD_EXP 50
16031: PUSH
16032: LD_INT 1
16034: PLUS
16035: ST_TO_ADDR
// end ;
16036: PPOPN 3
16038: END
// on UnitTeleported ( building , human ) do begin if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
16039: LD_VAR 0 1
16043: PUSH
16044: LD_INT 10
16046: EQUAL
16047: PUSH
16048: LD_VAR 0 2
16052: PPUSH
16053: CALL_OW 255
16057: PUSH
16058: LD_INT 1
16060: EQUAL
16061: AND
16062: PUSH
16063: LD_EXP 47
16067: PUSH
16068: LD_INT 0
16070: EQUAL
16071: AND
16072: IFFALSE 16184
// begin eventVar1 = 1 ;
16074: LD_ADDR_EXP 47
16078: PUSH
16079: LD_INT 1
16081: ST_TO_ADDR
// teleportExplored = 1 ;
16082: LD_ADDR_EXP 33
16086: PUSH
16087: LD_INT 1
16089: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
16090: LD_STRING M2a
16092: PPUSH
16093: CALL_OW 337
// wait ( 0 0$2 ) ;
16097: LD_INT 70
16099: PPUSH
16100: CALL_OW 67
// DialogueOn ;
16104: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
16108: LD_INT 22
16110: PUSH
16111: LD_INT 1
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: PUSH
16118: LD_INT 21
16120: PUSH
16121: LD_INT 1
16123: PUSH
16124: EMPTY
16125: LIST
16126: LIST
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: PPUSH
16132: CALL_OW 69
16136: PPUSH
16137: LD_STRING DT3a-Sol1-1
16139: PPUSH
16140: LD_STRING DT3a-FSol1-1
16142: PPUSH
16143: CALL 12328 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
16147: LD_EXP 1
16151: PPUSH
16152: LD_STRING DT3a-JMM-1
16154: PPUSH
16155: CALL_OW 88
// CenterNowOnUnits ( human ) ;
16159: LD_VAR 0 2
16163: PPUSH
16164: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
16168: LD_EXP 1
16172: PPUSH
16173: LD_STRING DT3a-JMM-1a
16175: PPUSH
16176: CALL_OW 88
// DialogueOff ;
16180: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 0 then
16184: LD_VAR 0 1
16188: PUSH
16189: LD_INT 10
16191: EQUAL
16192: PUSH
16193: LD_VAR 0 2
16197: PPUSH
16198: CALL_OW 247
16202: PUSH
16203: LD_INT 2
16205: EQUAL
16206: AND
16207: PUSH
16208: LD_VAR 0 2
16212: PPUSH
16213: CALL_OW 255
16217: PUSH
16218: LD_INT 3
16220: EQUAL
16221: AND
16222: PUSH
16223: LD_EXP 28
16227: PUSH
16228: LD_INT 0
16230: EQUAL
16231: AND
16232: IFFALSE 16249
// begin wait ( 0 0$3 ) ;
16234: LD_INT 105
16236: PPUSH
16237: CALL_OW 67
// vehicleTeleported = 1 ;
16241: LD_ADDR_EXP 28
16245: PUSH
16246: LD_INT 1
16248: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 2 then
16249: LD_VAR 0 1
16253: PUSH
16254: LD_INT 10
16256: EQUAL
16257: PUSH
16258: LD_VAR 0 2
16262: PPUSH
16263: CALL_OW 247
16267: PUSH
16268: LD_INT 2
16270: EQUAL
16271: AND
16272: PUSH
16273: LD_VAR 0 2
16277: PPUSH
16278: CALL_OW 255
16282: PUSH
16283: LD_INT 3
16285: EQUAL
16286: AND
16287: PUSH
16288: LD_EXP 28
16292: PUSH
16293: LD_INT 2
16295: EQUAL
16296: AND
16297: IFFALSE 16314
// begin wait ( 0 0$3 ) ;
16299: LD_INT 105
16301: PPUSH
16302: CALL_OW 67
// vehicleTeleported = 3 ;
16306: LD_ADDR_EXP 28
16310: PUSH
16311: LD_INT 3
16313: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
16314: LD_VAR 0 1
16318: PUSH
16319: LD_INT 10
16321: EQUAL
16322: PUSH
16323: LD_VAR 0 2
16327: PPUSH
16328: CALL_OW 247
16332: PUSH
16333: LD_INT 2
16335: EQUAL
16336: AND
16337: PUSH
16338: LD_VAR 0 2
16342: PPUSH
16343: CALL_OW 255
16347: PUSH
16348: LD_INT 3
16350: EQUAL
16351: AND
16352: IFFALSE 16368
// tpCounter = tpCounter + 1 ;
16354: LD_ADDR_EXP 29
16358: PUSH
16359: LD_EXP 29
16363: PUSH
16364: LD_INT 1
16366: PLUS
16367: ST_TO_ADDR
// end ;
16368: PPOPN 2
16370: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetWeapon ( vehicle ) = us_rocket_launcher then
16371: LD_VAR 0 1
16375: PPUSH
16376: CALL_OW 264
16380: PUSH
16381: LD_INT 7
16383: EQUAL
16384: IFFALSE 16394
// rocketBuilded := true ;
16386: LD_ADDR_EXP 51
16390: PUSH
16391: LD_INT 1
16393: ST_TO_ADDR
// if factory = ru_fact or factory = rufab2 then
16394: LD_VAR 0 2
16398: PUSH
16399: LD_INT 21
16401: EQUAL
16402: PUSH
16403: LD_VAR 0 2
16407: PUSH
16408: LD_INT 112
16410: EQUAL
16411: OR
16412: IFFALSE 16533
// if GetSide ( vehicle ) = 3 then
16414: LD_VAR 0 1
16418: PPUSH
16419: CALL_OW 255
16423: PUSH
16424: LD_INT 3
16426: EQUAL
16427: IFFALSE 16533
// begin if GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
16429: LD_VAR 0 1
16433: PPUSH
16434: CALL_OW 264
16438: PUSH
16439: LD_INT 46
16441: EQUAL
16442: PUSH
16443: LD_VAR 0 1
16447: PPUSH
16448: CALL_OW 264
16452: PUSH
16453: LD_INT 45
16455: EQUAL
16456: OR
16457: PUSH
16458: LD_VAR 0 1
16462: PPUSH
16463: CALL_OW 264
16467: PUSH
16468: LD_INT 44
16470: EQUAL
16471: OR
16472: IFFALSE 16490
// begin russianTanks = russianTanks ^ vehicle ;
16474: LD_ADDR_EXP 39
16478: PUSH
16479: LD_EXP 39
16483: PUSH
16484: LD_VAR 0 1
16488: ADD
16489: ST_TO_ADDR
// end ; if GetWeapon ( vehicle ) = 49 then
16490: LD_VAR 0 1
16494: PPUSH
16495: CALL_OW 264
16499: PUSH
16500: LD_INT 49
16502: EQUAL
16503: IFFALSE 16533
// begin russianTimeLapsers = russianTimeLapsers ^ vehicle ;
16505: LD_ADDR_EXP 40
16509: PUSH
16510: LD_EXP 40
16514: PUSH
16515: LD_VAR 0 1
16519: ADD
16520: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
16521: LD_VAR 0 1
16525: PPUSH
16526: LD_INT 137
16528: PPUSH
16529: CALL_OW 120
// end ; end ; end ;
16533: PPOPN 2
16535: END
// on LeaveVehicle ( vehicle , human ) do var i ;
16536: LD_INT 0
16538: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
16539: LD_VAR 0 2
16543: PPUSH
16544: CALL_OW 255
16548: PUSH
16549: LD_INT 3
16551: EQUAL
16552: PUSH
16553: LD_VAR 0 2
16557: PPUSH
16558: CALL_OW 257
16562: PUSH
16563: LD_INT 3
16565: EQUAL
16566: AND
16567: PUSH
16568: LD_INT 21
16570: PPUSH
16571: CALL_OW 255
16575: PUSH
16576: LD_INT 3
16578: EQUAL
16579: AND
16580: PUSH
16581: LD_INT 21
16583: PPUSH
16584: CALL_OW 302
16588: AND
16589: IFFALSE 16603
// ComEnterUnit ( human , ru_fact ) ;
16591: LD_VAR 0 2
16595: PPUSH
16596: LD_INT 21
16598: PPUSH
16599: CALL_OW 120
// if GetClass ( human ) = 4 and GetSide ( human ) = 3 and ruAI = 0 then
16603: LD_VAR 0 2
16607: PPUSH
16608: CALL_OW 257
16612: PUSH
16613: LD_INT 4
16615: EQUAL
16616: PUSH
16617: LD_VAR 0 2
16621: PPUSH
16622: CALL_OW 255
16626: PUSH
16627: LD_INT 3
16629: EQUAL
16630: AND
16631: PUSH
16632: LD_EXP 41
16636: PUSH
16637: LD_INT 0
16639: EQUAL
16640: AND
16641: IFFALSE 16703
// for i in RuScientists do
16643: LD_ADDR_VAR 0 3
16647: PUSH
16648: LD_EXP 34
16652: PUSH
16653: FOR_IN
16654: IFFALSE 16701
// if i = human then
16656: LD_VAR 0 3
16660: PUSH
16661: LD_VAR 0 2
16665: EQUAL
16666: IFFALSE 16699
// ComMoveToArea ( i , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
16668: LD_VAR 0 3
16672: PPUSH
16673: LD_INT 13
16675: PUSH
16676: LD_INT 14
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: PUSH
16683: LD_INT 1
16685: PPUSH
16686: LD_INT 2
16688: PPUSH
16689: CALL_OW 12
16693: ARRAY
16694: PPUSH
16695: CALL_OW 113
16699: GO 16653
16701: POP
16702: POP
// end ;
16703: PPOPN 3
16705: END
// on EnterVehicle ( vehicle , human ) do var i , rnd ;
16706: LD_INT 0
16708: PPUSH
16709: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 4 then
16710: LD_VAR 0 2
16714: PPUSH
16715: CALL_OW 255
16719: PUSH
16720: LD_INT 3
16722: EQUAL
16723: PUSH
16724: LD_VAR 0 2
16728: PPUSH
16729: CALL_OW 257
16733: PUSH
16734: LD_INT 4
16736: EQUAL
16737: AND
16738: IFFALSE 16880
// for i in RuScientists do
16740: LD_ADDR_VAR 0 3
16744: PUSH
16745: LD_EXP 34
16749: PUSH
16750: FOR_IN
16751: IFFALSE 16878
// if i = human then
16753: LD_VAR 0 3
16757: PUSH
16758: LD_VAR 0 2
16762: EQUAL
16763: IFFALSE 16876
// if IsOk ( rutp ) then
16765: LD_INT 137
16767: PPUSH
16768: CALL_OW 302
16772: IFFALSE 16845
// begin rnd = rand ( 1 , 2 ) ;
16774: LD_ADDR_VAR 0 4
16778: PUSH
16779: LD_INT 1
16781: PPUSH
16782: LD_INT 2
16784: PPUSH
16785: CALL_OW 12
16789: ST_TO_ADDR
// if rnd = 1 then
16790: LD_VAR 0 4
16794: PUSH
16795: LD_INT 1
16797: EQUAL
16798: IFFALSE 16812
// ComEnterUnit ( vehicle , rutp ) ;
16800: LD_VAR 0 1
16804: PPUSH
16805: LD_INT 137
16807: PPUSH
16808: CALL_OW 120
// AddComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
16812: LD_VAR 0 1
16816: PPUSH
16817: LD_INT 13
16819: PUSH
16820: LD_INT 14
16822: PUSH
16823: EMPTY
16824: LIST
16825: LIST
16826: PUSH
16827: LD_INT 1
16829: PPUSH
16830: LD_INT 2
16832: PPUSH
16833: CALL_OW 12
16837: ARRAY
16838: PPUSH
16839: CALL_OW 173
// end else
16843: GO 16876
// begin ComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
16845: LD_VAR 0 1
16849: PPUSH
16850: LD_INT 13
16852: PUSH
16853: LD_INT 14
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: PUSH
16860: LD_INT 1
16862: PPUSH
16863: LD_INT 2
16865: PPUSH
16866: CALL_OW 12
16870: ARRAY
16871: PPUSH
16872: CALL_OW 113
// end ;
16876: GO 16750
16878: POP
16879: POP
// end ;
16880: PPOPN 4
16882: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16883: LD_VAR 0 1
16887: PPUSH
16888: CALL 32425 0 1
// end ; end_of_file
16892: PPOPN 1
16894: END
// every 0 0$1 trigger ruAI = 1 do
16895: LD_EXP 41
16899: PUSH
16900: LD_INT 1
16902: EQUAL
16903: IFFALSE 17015
16905: GO 16907
16907: DISABLE
// begin enable ;
16908: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
16909: LD_INT 3
16911: PPUSH
16912: LD_INT 6
16914: PPUSH
16915: LD_INT 9
16917: PPUSH
16918: LD_EXP 38
16922: PPUSH
16923: CALL 13297 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
16927: LD_INT 3
16929: PPUSH
16930: LD_INT 4
16932: PPUSH
16933: LD_INT 10
16935: PPUSH
16936: LD_EXP 38
16940: PPUSH
16941: CALL 13297 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
16945: LD_INT 3
16947: PPUSH
16948: LD_INT 9
16950: PPUSH
16951: CALL 14268 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
16955: LD_INT 3
16957: PPUSH
16958: LD_INT 10
16960: PPUSH
16961: CALL 14268 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
16965: LD_INT 3
16967: PPUSH
16968: LD_INT 16
16970: PPUSH
16971: LD_INT 9
16973: PPUSH
16974: LD_INT 91
16976: PPUSH
16977: CALL 13688 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
16981: LD_INT 3
16983: PPUSH
16984: LD_INT 17
16986: PPUSH
16987: LD_INT 10
16989: PPUSH
16990: LD_INT 47
16992: PUSH
16993: LD_INT 129
16995: PUSH
16996: LD_INT 135
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: LIST
17003: PPUSH
17004: CALL 13688 0 4
// IntBazooka ( 3 ) ;
17008: LD_INT 3
17010: PPUSH
17011: CALL 14595 0 1
// end ;
17015: END
// every 0 0$30 trigger russianTanks >= [ 3 , 4 , 4 ] [ Difficulty ] do var j , tmp , target1 , target2 ;
17016: LD_EXP 39
17020: PUSH
17021: LD_INT 3
17023: PUSH
17024: LD_INT 4
17026: PUSH
17027: LD_INT 4
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: LIST
17034: PUSH
17035: LD_OWVAR 67
17039: ARRAY
17040: GREATEREQUAL
17041: IFFALSE 17513
17043: GO 17045
17045: DISABLE
17046: LD_INT 0
17048: PPUSH
17049: PPUSH
17050: PPUSH
17051: PPUSH
// begin enable ;
17052: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
17053: LD_ADDR_VAR 0 2
17057: PUSH
17058: LD_EXP 39
17062: PUSH
17063: LD_EXP 40
17067: UNION
17068: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
17069: LD_ADDR_EXP 39
17073: PUSH
17074: LD_EXP 39
17078: PUSH
17079: LD_VAR 0 2
17083: DIFF
17084: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
17085: LD_ADDR_EXP 40
17089: PUSH
17090: LD_EXP 40
17094: PUSH
17095: LD_VAR 0 2
17099: DIFF
17100: ST_TO_ADDR
// if IsOk ( ruteleprt ) then
17101: LD_INT 10
17103: PPUSH
17104: CALL_OW 302
17108: IFFALSE 17191
// begin for j in tmp do
17110: LD_ADDR_VAR 0 1
17114: PUSH
17115: LD_VAR 0 2
17119: PUSH
17120: FOR_IN
17121: IFFALSE 17164
// if attackTactic < 2 then
17123: LD_EXP 43
17127: PUSH
17128: LD_INT 2
17130: LESS
17131: IFFALSE 17147
// ComEnterUnit ( j , ruteleprt ) else
17133: LD_VAR 0 1
17137: PPUSH
17138: LD_INT 10
17140: PPUSH
17141: CALL_OW 120
17145: GO 17162
// ComMoveXY ( j , 88 , 69 ) ;
17147: LD_VAR 0 1
17151: PPUSH
17152: LD_INT 88
17154: PPUSH
17155: LD_INT 69
17157: PPUSH
17158: CALL_OW 111
17162: GO 17120
17164: POP
17165: POP
// repeat wait ( 0 0$1 ) ;
17166: LD_INT 35
17168: PPUSH
17169: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
17173: LD_VAR 0 2
17177: PPUSH
17178: LD_INT 60
17180: PUSH
17181: EMPTY
17182: LIST
17183: PPUSH
17184: CALL_OW 72
17188: NOT
17189: IFFALSE 17166
// end ; repeat wait ( 0 0$1 ) ;
17191: LD_INT 35
17193: PPUSH
17194: CALL_OW 67
// for j in tmp do
17198: LD_ADDR_VAR 0 1
17202: PUSH
17203: LD_VAR 0 2
17207: PUSH
17208: FOR_IN
17209: IFFALSE 17504
// begin if IsDead ( j ) then
17211: LD_VAR 0 1
17215: PPUSH
17216: CALL_OW 301
17220: IFFALSE 17238
// tmp := tmp diff j ;
17222: LD_ADDR_VAR 0 2
17226: PUSH
17227: LD_VAR 0 2
17231: PUSH
17232: LD_VAR 0 1
17236: DIFF
17237: ST_TO_ADDR
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , j ) ;
17238: LD_ADDR_VAR 0 3
17242: PUSH
17243: LD_INT 81
17245: PUSH
17246: LD_INT 3
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: PPUSH
17253: CALL_OW 69
17257: PPUSH
17258: LD_VAR 0 1
17262: PPUSH
17263: CALL_OW 74
17267: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 3 ] , [ f_type , unit_human ] ] ] ) , j ) ;
17268: LD_ADDR_VAR 0 4
17272: PUSH
17273: LD_INT 81
17275: PUSH
17276: LD_INT 3
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: PUSH
17283: LD_INT 21
17285: PUSH
17286: LD_INT 1
17288: PUSH
17289: EMPTY
17290: LIST
17291: LIST
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: EMPTY
17298: LIST
17299: PPUSH
17300: CALL_OW 69
17304: PPUSH
17305: LD_VAR 0 1
17309: PPUSH
17310: CALL_OW 74
17314: ST_TO_ADDR
// if GetWeapon ( j ) = ru_time_lapser then
17315: LD_VAR 0 1
17319: PPUSH
17320: CALL_OW 264
17324: PUSH
17325: LD_INT 49
17327: EQUAL
17328: IFFALSE 17436
// begin if UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) > 1 then
17330: LD_VAR 0 2
17334: PPUSH
17335: LD_INT 3
17337: PUSH
17338: LD_INT 34
17340: PUSH
17341: LD_INT 49
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: PPUSH
17352: CALL_OW 72
17356: PUSH
17357: LD_INT 1
17359: GREATER
17360: IFFALSE 17410
// ComMoveUnit ( j , NearestUnitToUnit ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , j ) ) else
17362: LD_VAR 0 1
17366: PPUSH
17367: LD_VAR 0 2
17371: PPUSH
17372: LD_INT 3
17374: PUSH
17375: LD_INT 34
17377: PUSH
17378: LD_INT 49
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: PUSH
17385: EMPTY
17386: LIST
17387: LIST
17388: PPUSH
17389: CALL_OW 72
17393: PPUSH
17394: LD_VAR 0 1
17398: PPUSH
17399: CALL_OW 74
17403: PPUSH
17404: CALL_OW 112
17408: GO 17434
// ComMoveUnit ( j , NearestUnitToUnit ( target1 , j ) ) ;
17410: LD_VAR 0 1
17414: PPUSH
17415: LD_VAR 0 3
17419: PPUSH
17420: LD_VAR 0 1
17424: PPUSH
17425: CALL_OW 74
17429: PPUSH
17430: CALL_OW 112
// end else
17434: GO 17502
// begin if GetDistUnits ( j , target2 ) < GetDistUnits ( j , target1 ) + 2 then
17436: LD_VAR 0 1
17440: PPUSH
17441: LD_VAR 0 4
17445: PPUSH
17446: CALL_OW 296
17450: PUSH
17451: LD_VAR 0 1
17455: PPUSH
17456: LD_VAR 0 3
17460: PPUSH
17461: CALL_OW 296
17465: PUSH
17466: LD_INT 2
17468: PLUS
17469: LESS
17470: IFFALSE 17488
// ComAttackUnit ( j , target2 ) else
17472: LD_VAR 0 1
17476: PPUSH
17477: LD_VAR 0 4
17481: PPUSH
17482: CALL_OW 115
17486: GO 17502
// ComAttackUnit ( j , target1 ) ;
17488: LD_VAR 0 1
17492: PPUSH
17493: LD_VAR 0 3
17497: PPUSH
17498: CALL_OW 115
// end ; end ;
17502: GO 17208
17504: POP
17505: POP
// until not tmp ;
17506: LD_VAR 0 2
17510: NOT
17511: IFFALSE 17191
// end ;
17513: PPOPN 4
17515: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
17516: LD_INT 4
17518: PPUSH
17519: CALL_OW 303
17523: IFFALSE 17538
17525: GO 17527
17527: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
17528: LD_INT 3
17530: PPUSH
17531: LD_INT 4
17533: PPUSH
17534: CALL 15247 0 2
17538: END
// every 0 0$1 do
17539: GO 17541
17541: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
17542: LD_INT 3
17544: PPUSH
17545: LD_INT 91
17547: PPUSH
17548: LD_INT 3
17550: PPUSH
17551: CALL 13056 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
17555: LD_INT 3
17557: PPUSH
17558: LD_INT 47
17560: PPUSH
17561: LD_INT 3
17563: PPUSH
17564: CALL 13056 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
17568: LD_INT 3
17570: PPUSH
17571: LD_INT 129
17573: PPUSH
17574: LD_INT 3
17576: PPUSH
17577: CALL 13056 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
17581: LD_INT 3
17583: PPUSH
17584: LD_INT 3
17586: PPUSH
17587: LD_INT 3
17589: PPUSH
17590: CALL 13056 0 3
// end ;
17594: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
17595: LD_INT 22
17597: PUSH
17598: LD_INT 1
17600: PUSH
17601: EMPTY
17602: LIST
17603: LIST
17604: PUSH
17605: LD_INT 21
17607: PUSH
17608: LD_INT 3
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: PPUSH
17619: CALL_OW 69
17623: IFFALSE 17688
17625: GO 17627
17627: DISABLE
// begin wait ( 0 0$40 ) ;
17628: LD_INT 1400
17630: PPUSH
17631: CALL_OW 67
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17635: LD_INT 3
17637: PPUSH
17638: LD_INT 21
17640: PPUSH
17641: LD_INT 3
17643: PUSH
17644: LD_INT 4
17646: PUSH
17647: LD_INT 4
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: LIST
17654: PUSH
17655: LD_OWVAR 67
17659: ARRAY
17660: PPUSH
17661: LD_INT 46
17663: PUSH
17664: LD_INT 45
17666: PUSH
17667: LD_INT 44
17669: PUSH
17670: EMPTY
17671: LIST
17672: LIST
17673: LIST
17674: PPUSH
17675: LD_INT 3
17677: PPUSH
17678: LD_INT 3
17680: PPUSH
17681: LD_INT 24
17683: PPUSH
17684: CALL 14448 0 7
// end ;
17688: END
// every 6 6$0 + 2 2$00 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
17689: LD_EXP 27
17693: PUSH
17694: LD_INT 2
17696: EQUAL
17697: PUSH
17698: LD_INT 21
17700: PPUSH
17701: CALL_OW 255
17705: PUSH
17706: LD_INT 3
17708: EQUAL
17709: AND
17710: PUSH
17711: LD_INT 112
17713: PPUSH
17714: CALL_OW 255
17718: PUSH
17719: LD_INT 3
17721: EQUAL
17722: AND
17723: PUSH
17724: LD_INT 21
17726: PPUSH
17727: CALL_OW 302
17731: AND
17732: PUSH
17733: LD_INT 112
17735: PPUSH
17736: CALL_OW 302
17740: AND
17741: PUSH
17742: LD_INT 22
17744: PUSH
17745: LD_INT 3
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: PUSH
17752: LD_INT 21
17754: PUSH
17755: LD_INT 2
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: PUSH
17762: LD_INT 50
17764: PUSH
17765: EMPTY
17766: LIST
17767: PUSH
17768: LD_INT 3
17770: PUSH
17771: LD_INT 58
17773: PUSH
17774: EMPTY
17775: LIST
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: PPUSH
17787: CALL_OW 69
17791: PUSH
17792: LD_INT 18
17794: PPUSH
17795: LD_INT 22
17797: PUSH
17798: LD_INT 3
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: PUSH
17805: LD_INT 21
17807: PUSH
17808: LD_INT 2
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: PPUSH
17819: CALL_OW 70
17823: PUSH
17824: LD_INT 0
17826: EQUAL
17827: DIFF
17828: AND
17829: IFFALSE 17947
17831: GO 17833
17833: DISABLE
// begin enable ;
17834: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17835: LD_INT 3
17837: PPUSH
17838: LD_INT 21
17840: PPUSH
17841: LD_INT 3
17843: PUSH
17844: LD_INT 4
17846: PUSH
17847: LD_INT 4
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: LIST
17854: PUSH
17855: LD_OWVAR 67
17859: ARRAY
17860: PPUSH
17861: LD_INT 46
17863: PUSH
17864: LD_INT 45
17866: PUSH
17867: LD_INT 44
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: LIST
17874: PPUSH
17875: LD_INT 3
17877: PPUSH
17878: LD_INT 3
17880: PPUSH
17881: LD_INT 24
17883: PPUSH
17884: CALL 14448 0 7
// if russianTimeLapsers = 0 then
17888: LD_EXP 40
17892: PUSH
17893: LD_INT 0
17895: EQUAL
17896: IFFALSE 17947
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
17898: LD_INT 3
17900: PPUSH
17901: LD_INT 112
17903: PPUSH
17904: LD_INT 1
17906: PUSH
17907: LD_INT 2
17909: PUSH
17910: LD_INT 2
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: LIST
17917: PUSH
17918: LD_OWVAR 67
17922: ARRAY
17923: PPUSH
17924: LD_INT 49
17926: PUSH
17927: LD_INT 49
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PPUSH
17934: LD_INT 3
17936: PPUSH
17937: LD_INT 3
17939: PPUSH
17940: LD_INT 24
17942: PPUSH
17943: CALL 14448 0 7
// end ;
17947: END
// every 0 0$1 trigger arabianMines do var i ;
17948: LD_EXP 44
17952: IFFALSE 18073
17954: GO 17956
17956: DISABLE
17957: LD_INT 0
17959: PPUSH
// begin enable ;
17960: ENABLE
// for i in arabianMines do
17961: LD_ADDR_VAR 0 1
17965: PUSH
17966: LD_EXP 44
17970: PUSH
17971: FOR_IN
17972: IFFALSE 18071
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
17974: LD_INT 22
17976: PUSH
17977: LD_INT 1
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: LD_INT 92
17986: PUSH
17987: LD_VAR 0 1
17991: PUSH
17992: LD_INT 1
17994: ARRAY
17995: PUSH
17996: LD_VAR 0 1
18000: PUSH
18001: LD_INT 2
18003: ARRAY
18004: PUSH
18005: LD_INT 3
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: PPUSH
18018: CALL_OW 69
18022: IFFALSE 18069
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
18024: LD_VAR 0 1
18028: PUSH
18029: LD_INT 1
18031: ARRAY
18032: PPUSH
18033: LD_VAR 0 1
18037: PUSH
18038: LD_INT 2
18040: ARRAY
18041: PPUSH
18042: LD_INT 5
18044: PPUSH
18045: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
18049: LD_ADDR_EXP 44
18053: PUSH
18054: LD_EXP 44
18058: PPUSH
18059: LD_VAR 0 1
18063: PPUSH
18064: CALL_OW 3
18068: ST_TO_ADDR
// end ; end ;
18069: GO 17971
18071: POP
18072: POP
// end ;
18073: PPOPN 1
18075: END
// every 0 0$1 trigger vehicleTeleported = 4 and tpCounter = [ 6 , 8 , 8 ] [ Difficulty ] do
18076: LD_EXP 28
18080: PUSH
18081: LD_INT 4
18083: EQUAL
18084: PUSH
18085: LD_EXP 29
18089: PUSH
18090: LD_INT 6
18092: PUSH
18093: LD_INT 8
18095: PUSH
18096: LD_INT 8
18098: PUSH
18099: EMPTY
18100: LIST
18101: LIST
18102: LIST
18103: PUSH
18104: LD_OWVAR 67
18108: ARRAY
18109: EQUAL
18110: AND
18111: IFFALSE 18129
18113: GO 18115
18115: DISABLE
// TeleportExit ( ruteleprt , 47 , 82 ) ;
18116: LD_INT 10
18118: PPUSH
18119: LD_INT 47
18121: PPUSH
18122: LD_INT 82
18124: PPUSH
18125: CALL_OW 243
18129: END
// every 2 2$0 trigger vehicleTeleported = 4 do
18130: LD_EXP 28
18134: PUSH
18135: LD_INT 4
18137: EQUAL
18138: IFFALSE 18160
18140: GO 18142
18142: DISABLE
// begin enable ;
18143: ENABLE
// attackTactic = rand ( 1 , 2 ) ;
18144: LD_ADDR_EXP 43
18148: PUSH
18149: LD_INT 1
18151: PPUSH
18152: LD_INT 2
18154: PPUSH
18155: CALL_OW 12
18159: ST_TO_ADDR
// end ; end_of_file
18160: END
// every 0 0$1 trigger IsDead ( ruheadlab ) do
18161: LD_INT 3
18163: PPUSH
18164: CALL_OW 301
18168: IFFALSE 18357
18170: GO 18172
18172: DISABLE
// begin if sciCounter = 0 then
18173: LD_EXP 35
18177: PUSH
18178: LD_INT 0
18180: EQUAL
18181: IFFALSE 18209
// begin Say ( JMM , D7a-JMM-1 ) ;
18183: LD_EXP 1
18187: PPUSH
18188: LD_STRING D7a-JMM-1
18190: PPUSH
18191: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
18195: LD_EXP 22
18199: PPUSH
18200: LD_STRING D7a-Pow-1
18202: PPUSH
18203: CALL_OW 94
// end else
18207: GO 18353
// if sciCounter < 6 then
18209: LD_EXP 35
18213: PUSH
18214: LD_INT 6
18216: LESS
18217: IFFALSE 18245
// begin Say ( JMM , D7b-JMM-1 ) ;
18219: LD_EXP 1
18223: PPUSH
18224: LD_STRING D7b-JMM-1
18226: PPUSH
18227: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
18231: LD_EXP 22
18235: PPUSH
18236: LD_STRING D7b-Pow-1
18238: PPUSH
18239: CALL_OW 94
// end else
18243: GO 18353
// begin Say ( JMM , D7c-JMM-1 ) ;
18245: LD_EXP 1
18249: PPUSH
18250: LD_STRING D7c-JMM-1
18252: PPUSH
18253: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
18257: LD_EXP 22
18261: PPUSH
18262: LD_STRING D7c-Pow-1
18264: PPUSH
18265: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
18269: LD_EXP 1
18273: PPUSH
18274: LD_STRING D7d-JMM-1
18276: PPUSH
18277: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
18281: LD_EXP 22
18285: PPUSH
18286: LD_STRING D7d-Pow-1
18288: PPUSH
18289: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
18293: LD_EXP 1
18297: PPUSH
18298: LD_STRING D7d-JMM-2
18300: PPUSH
18301: CALL_OW 88
// if askSiberite = 1 then
18305: LD_EXP 32
18309: PUSH
18310: LD_INT 1
18312: EQUAL
18313: IFFALSE 18329
// Say ( JMM , D7d-JMM-2a ) else
18315: LD_EXP 1
18319: PPUSH
18320: LD_STRING D7d-JMM-2a
18322: PPUSH
18323: CALL_OW 88
18327: GO 18341
// SayRadio ( Powell , D7d-Pow-2 ) ;
18329: LD_EXP 22
18333: PPUSH
18334: LD_STRING D7d-Pow-2
18336: PPUSH
18337: CALL_OW 94
// SayRadio ( Powell , D7d-Pow-2a ) ;
18341: LD_EXP 22
18345: PPUSH
18346: LD_STRING D7d-Pow-2a
18348: PPUSH
18349: CALL_OW 94
// end ; FinishMission ;
18353: CALL 18358 0 0
// end ;
18357: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
18358: LD_INT 0
18360: PPUSH
18361: PPUSH
18362: PPUSH
18363: PPUSH
// m1 := false ;
18364: LD_ADDR_VAR 0 2
18368: PUSH
18369: LD_INT 0
18371: ST_TO_ADDR
// m2 := false ;
18372: LD_ADDR_VAR 0 3
18376: PUSH
18377: LD_INT 0
18379: ST_TO_ADDR
// m3 := false ;
18380: LD_ADDR_VAR 0 4
18384: PUSH
18385: LD_INT 0
18387: ST_TO_ADDR
// if not westPathUsed then
18388: LD_EXP 49
18392: NOT
18393: IFFALSE 18402
// SetAchievement ( ACH_PATH ) ;
18395: LD_STRING ACH_PATH
18397: PPUSH
18398: CALL_OW 543
// if not rocketBuilded then
18402: LD_EXP 51
18406: NOT
18407: IFFALSE 18423
// begin wait ( 3 ) ;
18409: LD_INT 3
18411: PPUSH
18412: CALL_OW 67
// SetAchievement ( ACH_ROCKET ) ;
18416: LD_STRING ACH_ROCKET
18418: PPUSH
18419: CALL_OW 543
// end ; if tick <= 40 40$00 then
18423: LD_OWVAR 1
18427: PUSH
18428: LD_INT 84000
18430: LESSEQUAL
18431: IFFALSE 18447
// begin wait ( 3 ) ;
18433: LD_INT 3
18435: PPUSH
18436: CALL_OW 67
// SetAchievement ( ACH_ASPEED_12 ) ;
18440: LD_STRING ACH_ASPEED_12
18442: PPUSH
18443: CALL_OW 543
// end ; if teleportExplored = 1 then
18447: LD_EXP 33
18451: PUSH
18452: LD_INT 1
18454: EQUAL
18455: IFFALSE 18477
// begin m1 := true ;
18457: LD_ADDR_VAR 0 2
18461: PUSH
18462: LD_INT 1
18464: ST_TO_ADDR
// AddMedal ( Teleport , 1 ) ;
18465: LD_STRING Teleport
18467: PPUSH
18468: LD_INT 1
18470: PPUSH
18471: CALL_OW 101
// end else
18475: GO 18488
// AddMedal ( Teleport , - 1 ) ;
18477: LD_STRING Teleport
18479: PPUSH
18480: LD_INT 1
18482: NEG
18483: PPUSH
18484: CALL_OW 101
// if sciCounter > 2 then
18488: LD_EXP 35
18492: PUSH
18493: LD_INT 2
18495: GREATER
18496: IFFALSE 18518
// begin m2 := true ;
18498: LD_ADDR_VAR 0 3
18502: PUSH
18503: LD_INT 1
18505: ST_TO_ADDR
// AddMedal ( Materials , 1 ) ;
18506: LD_STRING Materials
18508: PPUSH
18509: LD_INT 1
18511: PPUSH
18512: CALL_OW 101
// end else
18516: GO 18529
// AddMedal ( Materials , - 1 ) ;
18518: LD_STRING Materials
18520: PPUSH
18521: LD_INT 1
18523: NEG
18524: PPUSH
18525: CALL_OW 101
// if sciCounter >= 6 then
18529: LD_EXP 35
18533: PUSH
18534: LD_INT 6
18536: GREATEREQUAL
18537: IFFALSE 18569
// begin m3 := true ;
18539: LD_ADDR_VAR 0 4
18543: PUSH
18544: LD_INT 1
18546: ST_TO_ADDR
// AddMedal ( Scientists , 1 ) ;
18547: LD_STRING Scientists
18549: PPUSH
18550: LD_INT 1
18552: PPUSH
18553: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
18557: LD_INT 1
18559: PPUSH
18560: LD_STRING 12_SciDed_1
18562: PPUSH
18563: CALL_OW 39
// end else
18567: GO 18590
// begin AddMedal ( Scientists , - 1 ) ;
18569: LD_STRING Scientists
18571: PPUSH
18572: LD_INT 1
18574: NEG
18575: PPUSH
18576: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
18580: LD_INT 0
18582: PPUSH
18583: LD_STRING 12_SciDed_1
18585: PPUSH
18586: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
18590: LD_EXP 31
18594: PPUSH
18595: LD_STRING 12_MainDepositFake_1
18597: PPUSH
18598: CALL_OW 39
// if m1 and m2 and m3 and Difficulty = 3 then
18602: LD_VAR 0 2
18606: PUSH
18607: LD_VAR 0 3
18611: AND
18612: PUSH
18613: LD_VAR 0 4
18617: AND
18618: PUSH
18619: LD_OWVAR 67
18623: PUSH
18624: LD_INT 3
18626: EQUAL
18627: AND
18628: IFFALSE 18640
// SetAchievementEX ( ACH_AMER , 12 ) ;
18630: LD_STRING ACH_AMER
18632: PPUSH
18633: LD_INT 12
18635: PPUSH
18636: CALL_OW 564
// GiveMedals ( MAIN ) ;
18640: LD_STRING MAIN
18642: PPUSH
18643: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
18647: LD_INT 22
18649: PUSH
18650: LD_INT 1
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PUSH
18657: LD_INT 21
18659: PUSH
18660: LD_INT 1
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: LD_INT 2
18669: PUSH
18670: LD_INT 25
18672: PUSH
18673: LD_INT 1
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PUSH
18680: LD_INT 25
18682: PUSH
18683: LD_INT 2
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PUSH
18690: LD_INT 25
18692: PUSH
18693: LD_INT 3
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: LD_INT 25
18702: PUSH
18703: LD_INT 4
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: LD_INT 25
18712: PUSH
18713: LD_INT 5
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: PUSH
18720: LD_INT 25
18722: PUSH
18723: LD_INT 8
18725: PUSH
18726: EMPTY
18727: LIST
18728: LIST
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: LIST
18743: PPUSH
18744: CALL_OW 69
18748: PPUSH
18749: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18753: LD_EXP 1
18757: PPUSH
18758: LD_EXP 46
18762: PUSH
18763: LD_STRING JMM
18765: STR
18766: PPUSH
18767: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18771: LD_EXP 7
18775: PPUSH
18776: LD_EXP 46
18780: PUSH
18781: LD_STRING Brown
18783: STR
18784: PPUSH
18785: CALL 12288 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18789: LD_EXP 3
18793: PPUSH
18794: LD_EXP 46
18798: PUSH
18799: LD_STRING Donaldson
18801: STR
18802: PPUSH
18803: CALL 12288 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18807: LD_EXP 4
18811: PPUSH
18812: LD_EXP 46
18816: PUSH
18817: LD_STRING Bobby
18819: STR
18820: PPUSH
18821: CALL 12288 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18825: LD_EXP 5
18829: PPUSH
18830: LD_EXP 46
18834: PUSH
18835: LD_STRING Cyrus
18837: STR
18838: PPUSH
18839: CALL 12288 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18843: LD_EXP 2
18847: PPUSH
18848: LD_EXP 46
18852: PUSH
18853: LD_STRING Lisa
18855: STR
18856: PPUSH
18857: CALL 12288 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18861: LD_EXP 12
18865: PPUSH
18866: LD_EXP 46
18870: PUSH
18871: LD_STRING Frank
18873: STR
18874: PPUSH
18875: CALL 12288 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
18879: LD_EXP 13
18883: PPUSH
18884: LD_EXP 46
18888: PUSH
18889: LD_STRING Kikuchi
18891: STR
18892: PPUSH
18893: CALL 12288 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
18897: LD_EXP 9
18901: PPUSH
18902: LD_EXP 46
18906: PUSH
18907: LD_STRING Houten
18909: STR
18910: PPUSH
18911: CALL 12288 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
18915: LD_EXP 11
18919: PPUSH
18920: LD_EXP 46
18924: PUSH
18925: LD_STRING Gary
18927: STR
18928: PPUSH
18929: CALL 12288 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
18933: LD_EXP 10
18937: PPUSH
18938: LD_EXP 46
18942: PUSH
18943: LD_STRING Cornell
18945: STR
18946: PPUSH
18947: CALL 12288 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18951: LD_EXP 6
18955: PPUSH
18956: LD_EXP 46
18960: PUSH
18961: LD_STRING Denis
18963: STR
18964: PPUSH
18965: CALL 12288 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18969: LD_EXP 8
18973: PPUSH
18974: LD_EXP 46
18978: PUSH
18979: LD_STRING Gladstone
18981: STR
18982: PPUSH
18983: CALL 12288 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
18987: LD_INT 22
18989: PUSH
18990: LD_INT 1
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: PUSH
18997: LD_INT 23
18999: PUSH
19000: LD_INT 1
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: PUSH
19007: LD_INT 21
19009: PUSH
19010: LD_INT 1
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PUSH
19017: LD_INT 2
19019: PUSH
19020: LD_INT 25
19022: PUSH
19023: LD_INT 1
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: PUSH
19030: LD_INT 25
19032: PUSH
19033: LD_INT 2
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: PUSH
19040: LD_INT 25
19042: PUSH
19043: LD_INT 3
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: LD_INT 25
19052: PUSH
19053: LD_INT 4
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PUSH
19060: LD_INT 25
19062: PUSH
19063: LD_INT 5
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: PUSH
19070: LD_INT 25
19072: PUSH
19073: LD_INT 8
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: PPUSH
19095: CALL_OW 69
19099: PUSH
19100: LD_EXP 1
19104: PUSH
19105: LD_EXP 7
19109: PUSH
19110: LD_EXP 3
19114: PUSH
19115: LD_EXP 4
19119: PUSH
19120: LD_EXP 5
19124: PUSH
19125: LD_EXP 2
19129: PUSH
19130: LD_EXP 12
19134: PUSH
19135: LD_EXP 8
19139: PUSH
19140: LD_EXP 13
19144: PUSH
19145: LD_EXP 6
19149: PUSH
19150: LD_EXP 9
19154: PUSH
19155: LD_EXP 11
19159: PUSH
19160: LD_EXP 10
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: DIFF
19180: PPUSH
19181: LD_STRING 12_other_survivors
19183: PPUSH
19184: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
19188: LD_INT 22
19190: PUSH
19191: LD_INT 1
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PUSH
19198: LD_INT 23
19200: PUSH
19201: LD_INT 2
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PUSH
19208: LD_INT 21
19210: PUSH
19211: LD_INT 1
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PUSH
19218: LD_INT 2
19220: PUSH
19221: LD_INT 25
19223: PUSH
19224: LD_INT 1
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PUSH
19231: LD_INT 25
19233: PUSH
19234: LD_INT 2
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: PUSH
19241: LD_INT 25
19243: PUSH
19244: LD_INT 3
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 25
19253: PUSH
19254: LD_INT 4
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: LD_INT 25
19263: PUSH
19264: LD_INT 5
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PUSH
19271: LD_INT 25
19273: PUSH
19274: LD_INT 8
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: PPUSH
19296: CALL_OW 69
19300: PPUSH
19301: LD_STRING 12_kurt_squad
19303: PPUSH
19304: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
19308: LD_EXP 14
19312: PPUSH
19313: LD_STRING 12_others
19315: PPUSH
19316: CALL_OW 38
// YouWin ;
19320: CALL_OW 103
// end ; end_of_file
19324: LD_VAR 0 1
19328: RET
// every 0 0$1 trigger IsDead ( JMM ) do
19329: LD_EXP 1
19333: PPUSH
19334: CALL_OW 301
19338: IFFALSE 19350
19340: GO 19342
19342: DISABLE
// YouLost ( JMM ) ; end_of_file
19343: LD_STRING JMM
19345: PPUSH
19346: CALL_OW 104
19350: END
// every 0 0$01 do
19351: GO 19353
19353: DISABLE
// begin repeat wait ( 0 0$30 ) ;
19354: LD_INT 1050
19356: PPUSH
19357: CALL_OW 67
// if cratesSpawned < 6 then
19361: LD_EXP 45
19365: PUSH
19366: LD_INT 6
19368: LESS
19369: IFFALSE 19406
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19371: LD_INT 3
19373: PPUSH
19374: LD_INT 5
19376: PPUSH
19377: CALL_OW 12
19381: PPUSH
19382: LD_INT 21
19384: PPUSH
19385: LD_INT 1
19387: PPUSH
19388: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19392: LD_ADDR_EXP 45
19396: PUSH
19397: LD_EXP 45
19401: PUSH
19402: LD_INT 1
19404: PLUS
19405: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
19406: LD_EXP 45
19410: PUSH
19411: LD_INT 6
19413: GREATEREQUAL
19414: PUSH
19415: LD_EXP 45
19419: PUSH
19420: LD_INT 12
19422: LESS
19423: AND
19424: IFFALSE 19468
// begin wait ( 0 0$50 ) ;
19426: LD_INT 1750
19428: PPUSH
19429: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19433: LD_INT 3
19435: PPUSH
19436: LD_INT 5
19438: PPUSH
19439: CALL_OW 12
19443: PPUSH
19444: LD_INT 21
19446: PPUSH
19447: LD_INT 1
19449: PPUSH
19450: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19454: LD_ADDR_EXP 45
19458: PUSH
19459: LD_EXP 45
19463: PUSH
19464: LD_INT 1
19466: PLUS
19467: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
19468: LD_EXP 45
19472: PUSH
19473: LD_INT 12
19475: GREATEREQUAL
19476: IFFALSE 19520
// begin wait ( 1 1$40 ) ;
19478: LD_INT 3500
19480: PPUSH
19481: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19485: LD_INT 3
19487: PPUSH
19488: LD_INT 5
19490: PPUSH
19491: CALL_OW 12
19495: PPUSH
19496: LD_INT 21
19498: PPUSH
19499: LD_INT 1
19501: PPUSH
19502: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19506: LD_ADDR_EXP 45
19510: PUSH
19511: LD_EXP 45
19515: PUSH
19516: LD_INT 1
19518: PLUS
19519: ST_TO_ADDR
// end ; until false ;
19520: LD_INT 0
19522: IFFALSE 19354
// end ; end_of_file
19524: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
19525: LD_INT 0
19527: PPUSH
// ar_crane := 88 ;
19528: LD_ADDR_EXP 58
19532: PUSH
19533: LD_INT 88
19535: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19536: LD_ADDR_EXP 53
19540: PUSH
19541: LD_INT 89
19543: ST_TO_ADDR
// us_hack := 99 ;
19544: LD_ADDR_EXP 54
19548: PUSH
19549: LD_INT 99
19551: ST_TO_ADDR
// us_artillery := 97 ;
19552: LD_ADDR_EXP 55
19556: PUSH
19557: LD_INT 97
19559: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19560: LD_ADDR_EXP 56
19564: PUSH
19565: LD_INT 91
19567: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
19568: LD_ADDR_EXP 57
19572: PUSH
19573: LD_INT 92
19575: ST_TO_ADDR
// ru_radar := 98 ;
19576: LD_ADDR_EXP 52
19580: PUSH
19581: LD_INT 98
19583: ST_TO_ADDR
// tech_Artillery := 80 ;
19584: LD_ADDR_EXP 59
19588: PUSH
19589: LD_INT 80
19591: ST_TO_ADDR
// tech_RadMat := 81 ;
19592: LD_ADDR_EXP 60
19596: PUSH
19597: LD_INT 81
19599: ST_TO_ADDR
// tech_BasicTools := 82 ;
19600: LD_ADDR_EXP 61
19604: PUSH
19605: LD_INT 82
19607: ST_TO_ADDR
// tech_Cargo := 83 ;
19608: LD_ADDR_EXP 62
19612: PUSH
19613: LD_INT 83
19615: ST_TO_ADDR
// tech_Track := 84 ;
19616: LD_ADDR_EXP 63
19620: PUSH
19621: LD_INT 84
19623: ST_TO_ADDR
// tech_Crane := 85 ;
19624: LD_ADDR_EXP 64
19628: PUSH
19629: LD_INT 85
19631: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19632: LD_ADDR_EXP 65
19636: PUSH
19637: LD_INT 86
19639: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19640: LD_ADDR_EXP 66
19644: PUSH
19645: LD_INT 87
19647: ST_TO_ADDR
// end ;
19648: LD_VAR 0 1
19652: RET
// every 1 do
19653: GO 19655
19655: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
19656: CALL 19525 0 0
19660: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
19661: LD_VAR 0 2
19665: PUSH
19666: LD_INT 100
19668: EQUAL
19669: IFFALSE 20618
// begin if not StreamModeActive then
19671: LD_EXP 67
19675: NOT
19676: IFFALSE 19686
// StreamModeActive := true ;
19678: LD_ADDR_EXP 67
19682: PUSH
19683: LD_INT 1
19685: ST_TO_ADDR
// if p3 = 0 then
19686: LD_VAR 0 3
19690: PUSH
19691: LD_INT 0
19693: EQUAL
19694: IFFALSE 19700
// InitStreamMode ;
19696: CALL 20851 0 0
// if p3 = 1 then
19700: LD_VAR 0 3
19704: PUSH
19705: LD_INT 1
19707: EQUAL
19708: IFFALSE 19718
// sRocket := true ;
19710: LD_ADDR_EXP 72
19714: PUSH
19715: LD_INT 1
19717: ST_TO_ADDR
// if p3 = 2 then
19718: LD_VAR 0 3
19722: PUSH
19723: LD_INT 2
19725: EQUAL
19726: IFFALSE 19736
// sSpeed := true ;
19728: LD_ADDR_EXP 71
19732: PUSH
19733: LD_INT 1
19735: ST_TO_ADDR
// if p3 = 3 then
19736: LD_VAR 0 3
19740: PUSH
19741: LD_INT 3
19743: EQUAL
19744: IFFALSE 19754
// sEngine := true ;
19746: LD_ADDR_EXP 73
19750: PUSH
19751: LD_INT 1
19753: ST_TO_ADDR
// if p3 = 4 then
19754: LD_VAR 0 3
19758: PUSH
19759: LD_INT 4
19761: EQUAL
19762: IFFALSE 19772
// sSpec := true ;
19764: LD_ADDR_EXP 70
19768: PUSH
19769: LD_INT 1
19771: ST_TO_ADDR
// if p3 = 5 then
19772: LD_VAR 0 3
19776: PUSH
19777: LD_INT 5
19779: EQUAL
19780: IFFALSE 19790
// sLevel := true ;
19782: LD_ADDR_EXP 74
19786: PUSH
19787: LD_INT 1
19789: ST_TO_ADDR
// if p3 = 6 then
19790: LD_VAR 0 3
19794: PUSH
19795: LD_INT 6
19797: EQUAL
19798: IFFALSE 19808
// sArmoury := true ;
19800: LD_ADDR_EXP 75
19804: PUSH
19805: LD_INT 1
19807: ST_TO_ADDR
// if p3 = 7 then
19808: LD_VAR 0 3
19812: PUSH
19813: LD_INT 7
19815: EQUAL
19816: IFFALSE 19826
// sRadar := true ;
19818: LD_ADDR_EXP 76
19822: PUSH
19823: LD_INT 1
19825: ST_TO_ADDR
// if p3 = 8 then
19826: LD_VAR 0 3
19830: PUSH
19831: LD_INT 8
19833: EQUAL
19834: IFFALSE 19844
// sBunker := true ;
19836: LD_ADDR_EXP 77
19840: PUSH
19841: LD_INT 1
19843: ST_TO_ADDR
// if p3 = 9 then
19844: LD_VAR 0 3
19848: PUSH
19849: LD_INT 9
19851: EQUAL
19852: IFFALSE 19862
// sHack := true ;
19854: LD_ADDR_EXP 78
19858: PUSH
19859: LD_INT 1
19861: ST_TO_ADDR
// if p3 = 10 then
19862: LD_VAR 0 3
19866: PUSH
19867: LD_INT 10
19869: EQUAL
19870: IFFALSE 19880
// sFire := true ;
19872: LD_ADDR_EXP 79
19876: PUSH
19877: LD_INT 1
19879: ST_TO_ADDR
// if p3 = 11 then
19880: LD_VAR 0 3
19884: PUSH
19885: LD_INT 11
19887: EQUAL
19888: IFFALSE 19898
// sRefresh := true ;
19890: LD_ADDR_EXP 80
19894: PUSH
19895: LD_INT 1
19897: ST_TO_ADDR
// if p3 = 12 then
19898: LD_VAR 0 3
19902: PUSH
19903: LD_INT 12
19905: EQUAL
19906: IFFALSE 19916
// sExp := true ;
19908: LD_ADDR_EXP 81
19912: PUSH
19913: LD_INT 1
19915: ST_TO_ADDR
// if p3 = 13 then
19916: LD_VAR 0 3
19920: PUSH
19921: LD_INT 13
19923: EQUAL
19924: IFFALSE 19934
// sDepot := true ;
19926: LD_ADDR_EXP 82
19930: PUSH
19931: LD_INT 1
19933: ST_TO_ADDR
// if p3 = 14 then
19934: LD_VAR 0 3
19938: PUSH
19939: LD_INT 14
19941: EQUAL
19942: IFFALSE 19952
// sFlag := true ;
19944: LD_ADDR_EXP 83
19948: PUSH
19949: LD_INT 1
19951: ST_TO_ADDR
// if p3 = 15 then
19952: LD_VAR 0 3
19956: PUSH
19957: LD_INT 15
19959: EQUAL
19960: IFFALSE 19970
// sKamikadze := true ;
19962: LD_ADDR_EXP 91
19966: PUSH
19967: LD_INT 1
19969: ST_TO_ADDR
// if p3 = 16 then
19970: LD_VAR 0 3
19974: PUSH
19975: LD_INT 16
19977: EQUAL
19978: IFFALSE 19988
// sTroll := true ;
19980: LD_ADDR_EXP 92
19984: PUSH
19985: LD_INT 1
19987: ST_TO_ADDR
// if p3 = 17 then
19988: LD_VAR 0 3
19992: PUSH
19993: LD_INT 17
19995: EQUAL
19996: IFFALSE 20006
// sSlow := true ;
19998: LD_ADDR_EXP 93
20002: PUSH
20003: LD_INT 1
20005: ST_TO_ADDR
// if p3 = 18 then
20006: LD_VAR 0 3
20010: PUSH
20011: LD_INT 18
20013: EQUAL
20014: IFFALSE 20024
// sLack := true ;
20016: LD_ADDR_EXP 94
20020: PUSH
20021: LD_INT 1
20023: ST_TO_ADDR
// if p3 = 19 then
20024: LD_VAR 0 3
20028: PUSH
20029: LD_INT 19
20031: EQUAL
20032: IFFALSE 20042
// sTank := true ;
20034: LD_ADDR_EXP 96
20038: PUSH
20039: LD_INT 1
20041: ST_TO_ADDR
// if p3 = 20 then
20042: LD_VAR 0 3
20046: PUSH
20047: LD_INT 20
20049: EQUAL
20050: IFFALSE 20060
// sRemote := true ;
20052: LD_ADDR_EXP 97
20056: PUSH
20057: LD_INT 1
20059: ST_TO_ADDR
// if p3 = 21 then
20060: LD_VAR 0 3
20064: PUSH
20065: LD_INT 21
20067: EQUAL
20068: IFFALSE 20078
// sPowell := true ;
20070: LD_ADDR_EXP 98
20074: PUSH
20075: LD_INT 1
20077: ST_TO_ADDR
// if p3 = 22 then
20078: LD_VAR 0 3
20082: PUSH
20083: LD_INT 22
20085: EQUAL
20086: IFFALSE 20096
// sTeleport := true ;
20088: LD_ADDR_EXP 101
20092: PUSH
20093: LD_INT 1
20095: ST_TO_ADDR
// if p3 = 23 then
20096: LD_VAR 0 3
20100: PUSH
20101: LD_INT 23
20103: EQUAL
20104: IFFALSE 20114
// sOilTower := true ;
20106: LD_ADDR_EXP 103
20110: PUSH
20111: LD_INT 1
20113: ST_TO_ADDR
// if p3 = 24 then
20114: LD_VAR 0 3
20118: PUSH
20119: LD_INT 24
20121: EQUAL
20122: IFFALSE 20132
// sShovel := true ;
20124: LD_ADDR_EXP 104
20128: PUSH
20129: LD_INT 1
20131: ST_TO_ADDR
// if p3 = 25 then
20132: LD_VAR 0 3
20136: PUSH
20137: LD_INT 25
20139: EQUAL
20140: IFFALSE 20150
// sSheik := true ;
20142: LD_ADDR_EXP 105
20146: PUSH
20147: LD_INT 1
20149: ST_TO_ADDR
// if p3 = 26 then
20150: LD_VAR 0 3
20154: PUSH
20155: LD_INT 26
20157: EQUAL
20158: IFFALSE 20168
// sEarthquake := true ;
20160: LD_ADDR_EXP 107
20164: PUSH
20165: LD_INT 1
20167: ST_TO_ADDR
// if p3 = 27 then
20168: LD_VAR 0 3
20172: PUSH
20173: LD_INT 27
20175: EQUAL
20176: IFFALSE 20186
// sAI := true ;
20178: LD_ADDR_EXP 108
20182: PUSH
20183: LD_INT 1
20185: ST_TO_ADDR
// if p3 = 28 then
20186: LD_VAR 0 3
20190: PUSH
20191: LD_INT 28
20193: EQUAL
20194: IFFALSE 20204
// sCargo := true ;
20196: LD_ADDR_EXP 111
20200: PUSH
20201: LD_INT 1
20203: ST_TO_ADDR
// if p3 = 29 then
20204: LD_VAR 0 3
20208: PUSH
20209: LD_INT 29
20211: EQUAL
20212: IFFALSE 20222
// sDLaser := true ;
20214: LD_ADDR_EXP 112
20218: PUSH
20219: LD_INT 1
20221: ST_TO_ADDR
// if p3 = 30 then
20222: LD_VAR 0 3
20226: PUSH
20227: LD_INT 30
20229: EQUAL
20230: IFFALSE 20240
// sExchange := true ;
20232: LD_ADDR_EXP 113
20236: PUSH
20237: LD_INT 1
20239: ST_TO_ADDR
// if p3 = 31 then
20240: LD_VAR 0 3
20244: PUSH
20245: LD_INT 31
20247: EQUAL
20248: IFFALSE 20258
// sFac := true ;
20250: LD_ADDR_EXP 114
20254: PUSH
20255: LD_INT 1
20257: ST_TO_ADDR
// if p3 = 32 then
20258: LD_VAR 0 3
20262: PUSH
20263: LD_INT 32
20265: EQUAL
20266: IFFALSE 20276
// sPower := true ;
20268: LD_ADDR_EXP 115
20272: PUSH
20273: LD_INT 1
20275: ST_TO_ADDR
// if p3 = 33 then
20276: LD_VAR 0 3
20280: PUSH
20281: LD_INT 33
20283: EQUAL
20284: IFFALSE 20294
// sRandom := true ;
20286: LD_ADDR_EXP 116
20290: PUSH
20291: LD_INT 1
20293: ST_TO_ADDR
// if p3 = 34 then
20294: LD_VAR 0 3
20298: PUSH
20299: LD_INT 34
20301: EQUAL
20302: IFFALSE 20312
// sShield := true ;
20304: LD_ADDR_EXP 117
20308: PUSH
20309: LD_INT 1
20311: ST_TO_ADDR
// if p3 = 35 then
20312: LD_VAR 0 3
20316: PUSH
20317: LD_INT 35
20319: EQUAL
20320: IFFALSE 20330
// sTime := true ;
20322: LD_ADDR_EXP 118
20326: PUSH
20327: LD_INT 1
20329: ST_TO_ADDR
// if p3 = 36 then
20330: LD_VAR 0 3
20334: PUSH
20335: LD_INT 36
20337: EQUAL
20338: IFFALSE 20348
// sTools := true ;
20340: LD_ADDR_EXP 119
20344: PUSH
20345: LD_INT 1
20347: ST_TO_ADDR
// if p3 = 101 then
20348: LD_VAR 0 3
20352: PUSH
20353: LD_INT 101
20355: EQUAL
20356: IFFALSE 20366
// sSold := true ;
20358: LD_ADDR_EXP 84
20362: PUSH
20363: LD_INT 1
20365: ST_TO_ADDR
// if p3 = 102 then
20366: LD_VAR 0 3
20370: PUSH
20371: LD_INT 102
20373: EQUAL
20374: IFFALSE 20384
// sDiff := true ;
20376: LD_ADDR_EXP 85
20380: PUSH
20381: LD_INT 1
20383: ST_TO_ADDR
// if p3 = 103 then
20384: LD_VAR 0 3
20388: PUSH
20389: LD_INT 103
20391: EQUAL
20392: IFFALSE 20402
// sFog := true ;
20394: LD_ADDR_EXP 88
20398: PUSH
20399: LD_INT 1
20401: ST_TO_ADDR
// if p3 = 104 then
20402: LD_VAR 0 3
20406: PUSH
20407: LD_INT 104
20409: EQUAL
20410: IFFALSE 20420
// sReset := true ;
20412: LD_ADDR_EXP 89
20416: PUSH
20417: LD_INT 1
20419: ST_TO_ADDR
// if p3 = 105 then
20420: LD_VAR 0 3
20424: PUSH
20425: LD_INT 105
20427: EQUAL
20428: IFFALSE 20438
// sSun := true ;
20430: LD_ADDR_EXP 90
20434: PUSH
20435: LD_INT 1
20437: ST_TO_ADDR
// if p3 = 106 then
20438: LD_VAR 0 3
20442: PUSH
20443: LD_INT 106
20445: EQUAL
20446: IFFALSE 20456
// sTiger := true ;
20448: LD_ADDR_EXP 86
20452: PUSH
20453: LD_INT 1
20455: ST_TO_ADDR
// if p3 = 107 then
20456: LD_VAR 0 3
20460: PUSH
20461: LD_INT 107
20463: EQUAL
20464: IFFALSE 20474
// sBomb := true ;
20466: LD_ADDR_EXP 87
20470: PUSH
20471: LD_INT 1
20473: ST_TO_ADDR
// if p3 = 108 then
20474: LD_VAR 0 3
20478: PUSH
20479: LD_INT 108
20481: EQUAL
20482: IFFALSE 20492
// sWound := true ;
20484: LD_ADDR_EXP 95
20488: PUSH
20489: LD_INT 1
20491: ST_TO_ADDR
// if p3 = 109 then
20492: LD_VAR 0 3
20496: PUSH
20497: LD_INT 109
20499: EQUAL
20500: IFFALSE 20510
// sBetray := true ;
20502: LD_ADDR_EXP 99
20506: PUSH
20507: LD_INT 1
20509: ST_TO_ADDR
// if p3 = 110 then
20510: LD_VAR 0 3
20514: PUSH
20515: LD_INT 110
20517: EQUAL
20518: IFFALSE 20528
// sContamin := true ;
20520: LD_ADDR_EXP 100
20524: PUSH
20525: LD_INT 1
20527: ST_TO_ADDR
// if p3 = 111 then
20528: LD_VAR 0 3
20532: PUSH
20533: LD_INT 111
20535: EQUAL
20536: IFFALSE 20546
// sOil := true ;
20538: LD_ADDR_EXP 102
20542: PUSH
20543: LD_INT 1
20545: ST_TO_ADDR
// if p3 = 112 then
20546: LD_VAR 0 3
20550: PUSH
20551: LD_INT 112
20553: EQUAL
20554: IFFALSE 20564
// sStu := true ;
20556: LD_ADDR_EXP 106
20560: PUSH
20561: LD_INT 1
20563: ST_TO_ADDR
// if p3 = 113 then
20564: LD_VAR 0 3
20568: PUSH
20569: LD_INT 113
20571: EQUAL
20572: IFFALSE 20582
// sBazooka := true ;
20574: LD_ADDR_EXP 109
20578: PUSH
20579: LD_INT 1
20581: ST_TO_ADDR
// if p3 = 114 then
20582: LD_VAR 0 3
20586: PUSH
20587: LD_INT 114
20589: EQUAL
20590: IFFALSE 20600
// sMortar := true ;
20592: LD_ADDR_EXP 110
20596: PUSH
20597: LD_INT 1
20599: ST_TO_ADDR
// if p3 = 115 then
20600: LD_VAR 0 3
20604: PUSH
20605: LD_INT 115
20607: EQUAL
20608: IFFALSE 20618
// sRanger := true ;
20610: LD_ADDR_EXP 120
20614: PUSH
20615: LD_INT 1
20617: ST_TO_ADDR
// end ; if p2 = 101 then
20618: LD_VAR 0 2
20622: PUSH
20623: LD_INT 101
20625: EQUAL
20626: IFFALSE 20829
// begin case p3 of 1 :
20628: LD_VAR 0 3
20632: PUSH
20633: LD_INT 1
20635: DOUBLE
20636: EQUAL
20637: IFTRUE 20641
20639: GO 20648
20641: POP
// hHackUnlimitedResources ; 2 :
20642: CALL 30923 0 0
20646: GO 20829
20648: LD_INT 2
20650: DOUBLE
20651: EQUAL
20652: IFTRUE 20656
20654: GO 20663
20656: POP
// hHackSetLevel10 ; 3 :
20657: CALL 31056 0 0
20661: GO 20829
20663: LD_INT 3
20665: DOUBLE
20666: EQUAL
20667: IFTRUE 20671
20669: GO 20678
20671: POP
// hHackSetLevel10YourUnits ; 4 :
20672: CALL 31141 0 0
20676: GO 20829
20678: LD_INT 4
20680: DOUBLE
20681: EQUAL
20682: IFTRUE 20686
20684: GO 20708
20686: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
20687: LD_VAR 0 4
20691: PPUSH
20692: LD_VAR 0 5
20696: PPUSH
20697: LD_VAR 0 6
20701: PPUSH
20702: CALL 31231 0 3
20706: GO 20829
20708: LD_INT 5
20710: DOUBLE
20711: EQUAL
20712: IFTRUE 20716
20714: GO 20723
20716: POP
// hHackSpawnVehicle ; 6 :
20717: CALL 31292 0 0
20721: GO 20829
20723: LD_INT 6
20725: DOUBLE
20726: EQUAL
20727: IFTRUE 20731
20729: GO 20738
20731: POP
// hHackInvincible ; 7 :
20732: CALL 31838 0 0
20736: GO 20829
20738: LD_INT 7
20740: DOUBLE
20741: EQUAL
20742: IFTRUE 20746
20744: GO 20753
20746: POP
// hHackInvisible ; 8 :
20747: CALL 31949 0 0
20751: GO 20829
20753: LD_INT 8
20755: DOUBLE
20756: EQUAL
20757: IFTRUE 20761
20759: GO 20768
20761: POP
// hHackChangeYourSide ; 9 :
20762: CALL 32006 0 0
20766: GO 20829
20768: LD_INT 9
20770: DOUBLE
20771: EQUAL
20772: IFTRUE 20776
20774: GO 20783
20776: POP
// hHackChangeUnitSide ; 10 :
20777: CALL 32048 0 0
20781: GO 20829
20783: LD_INT 10
20785: DOUBLE
20786: EQUAL
20787: IFTRUE 20791
20789: GO 20798
20791: POP
// hHackFog ; 11 :
20792: CALL 32149 0 0
20796: GO 20829
20798: LD_INT 11
20800: DOUBLE
20801: EQUAL
20802: IFTRUE 20806
20804: GO 20813
20806: POP
// hHackApeman ; 12 :
20807: CALL 32164 0 0
20811: GO 20829
20813: LD_INT 12
20815: DOUBLE
20816: EQUAL
20817: IFTRUE 20821
20819: GO 20828
20821: POP
// hHackBoom ; end ;
20822: CALL 32249 0 0
20826: GO 20829
20828: POP
// end ; end ;
20829: PPOPN 6
20831: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
20832: GO 20834
20834: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20835: LD_STRING initStreamRollete();
20837: PPUSH
20838: CALL_OW 559
// InitStreamMode ;
20842: CALL 20851 0 0
// DefineStreamItems ( ) ;
20846: CALL 21291 0 0
// end ;
20850: END
// function InitStreamMode ; begin
20851: LD_INT 0
20853: PPUSH
// streamModeActive := false ;
20854: LD_ADDR_EXP 67
20858: PUSH
20859: LD_INT 0
20861: ST_TO_ADDR
// normalCounter := 36 ;
20862: LD_ADDR_EXP 68
20866: PUSH
20867: LD_INT 36
20869: ST_TO_ADDR
// hardcoreCounter := 16 ;
20870: LD_ADDR_EXP 69
20874: PUSH
20875: LD_INT 16
20877: ST_TO_ADDR
// sRocket := false ;
20878: LD_ADDR_EXP 72
20882: PUSH
20883: LD_INT 0
20885: ST_TO_ADDR
// sSpeed := false ;
20886: LD_ADDR_EXP 71
20890: PUSH
20891: LD_INT 0
20893: ST_TO_ADDR
// sEngine := false ;
20894: LD_ADDR_EXP 73
20898: PUSH
20899: LD_INT 0
20901: ST_TO_ADDR
// sSpec := false ;
20902: LD_ADDR_EXP 70
20906: PUSH
20907: LD_INT 0
20909: ST_TO_ADDR
// sLevel := false ;
20910: LD_ADDR_EXP 74
20914: PUSH
20915: LD_INT 0
20917: ST_TO_ADDR
// sArmoury := false ;
20918: LD_ADDR_EXP 75
20922: PUSH
20923: LD_INT 0
20925: ST_TO_ADDR
// sRadar := false ;
20926: LD_ADDR_EXP 76
20930: PUSH
20931: LD_INT 0
20933: ST_TO_ADDR
// sBunker := false ;
20934: LD_ADDR_EXP 77
20938: PUSH
20939: LD_INT 0
20941: ST_TO_ADDR
// sHack := false ;
20942: LD_ADDR_EXP 78
20946: PUSH
20947: LD_INT 0
20949: ST_TO_ADDR
// sFire := false ;
20950: LD_ADDR_EXP 79
20954: PUSH
20955: LD_INT 0
20957: ST_TO_ADDR
// sRefresh := false ;
20958: LD_ADDR_EXP 80
20962: PUSH
20963: LD_INT 0
20965: ST_TO_ADDR
// sExp := false ;
20966: LD_ADDR_EXP 81
20970: PUSH
20971: LD_INT 0
20973: ST_TO_ADDR
// sDepot := false ;
20974: LD_ADDR_EXP 82
20978: PUSH
20979: LD_INT 0
20981: ST_TO_ADDR
// sFlag := false ;
20982: LD_ADDR_EXP 83
20986: PUSH
20987: LD_INT 0
20989: ST_TO_ADDR
// sKamikadze := false ;
20990: LD_ADDR_EXP 91
20994: PUSH
20995: LD_INT 0
20997: ST_TO_ADDR
// sTroll := false ;
20998: LD_ADDR_EXP 92
21002: PUSH
21003: LD_INT 0
21005: ST_TO_ADDR
// sSlow := false ;
21006: LD_ADDR_EXP 93
21010: PUSH
21011: LD_INT 0
21013: ST_TO_ADDR
// sLack := false ;
21014: LD_ADDR_EXP 94
21018: PUSH
21019: LD_INT 0
21021: ST_TO_ADDR
// sTank := false ;
21022: LD_ADDR_EXP 96
21026: PUSH
21027: LD_INT 0
21029: ST_TO_ADDR
// sRemote := false ;
21030: LD_ADDR_EXP 97
21034: PUSH
21035: LD_INT 0
21037: ST_TO_ADDR
// sPowell := false ;
21038: LD_ADDR_EXP 98
21042: PUSH
21043: LD_INT 0
21045: ST_TO_ADDR
// sTeleport := false ;
21046: LD_ADDR_EXP 101
21050: PUSH
21051: LD_INT 0
21053: ST_TO_ADDR
// sOilTower := false ;
21054: LD_ADDR_EXP 103
21058: PUSH
21059: LD_INT 0
21061: ST_TO_ADDR
// sShovel := false ;
21062: LD_ADDR_EXP 104
21066: PUSH
21067: LD_INT 0
21069: ST_TO_ADDR
// sSheik := false ;
21070: LD_ADDR_EXP 105
21074: PUSH
21075: LD_INT 0
21077: ST_TO_ADDR
// sEarthquake := false ;
21078: LD_ADDR_EXP 107
21082: PUSH
21083: LD_INT 0
21085: ST_TO_ADDR
// sAI := false ;
21086: LD_ADDR_EXP 108
21090: PUSH
21091: LD_INT 0
21093: ST_TO_ADDR
// sCargo := false ;
21094: LD_ADDR_EXP 111
21098: PUSH
21099: LD_INT 0
21101: ST_TO_ADDR
// sDLaser := false ;
21102: LD_ADDR_EXP 112
21106: PUSH
21107: LD_INT 0
21109: ST_TO_ADDR
// sExchange := false ;
21110: LD_ADDR_EXP 113
21114: PUSH
21115: LD_INT 0
21117: ST_TO_ADDR
// sFac := false ;
21118: LD_ADDR_EXP 114
21122: PUSH
21123: LD_INT 0
21125: ST_TO_ADDR
// sPower := false ;
21126: LD_ADDR_EXP 115
21130: PUSH
21131: LD_INT 0
21133: ST_TO_ADDR
// sRandom := false ;
21134: LD_ADDR_EXP 116
21138: PUSH
21139: LD_INT 0
21141: ST_TO_ADDR
// sShield := false ;
21142: LD_ADDR_EXP 117
21146: PUSH
21147: LD_INT 0
21149: ST_TO_ADDR
// sTime := false ;
21150: LD_ADDR_EXP 118
21154: PUSH
21155: LD_INT 0
21157: ST_TO_ADDR
// sTools := false ;
21158: LD_ADDR_EXP 119
21162: PUSH
21163: LD_INT 0
21165: ST_TO_ADDR
// sSold := false ;
21166: LD_ADDR_EXP 84
21170: PUSH
21171: LD_INT 0
21173: ST_TO_ADDR
// sDiff := false ;
21174: LD_ADDR_EXP 85
21178: PUSH
21179: LD_INT 0
21181: ST_TO_ADDR
// sFog := false ;
21182: LD_ADDR_EXP 88
21186: PUSH
21187: LD_INT 0
21189: ST_TO_ADDR
// sReset := false ;
21190: LD_ADDR_EXP 89
21194: PUSH
21195: LD_INT 0
21197: ST_TO_ADDR
// sSun := false ;
21198: LD_ADDR_EXP 90
21202: PUSH
21203: LD_INT 0
21205: ST_TO_ADDR
// sTiger := false ;
21206: LD_ADDR_EXP 86
21210: PUSH
21211: LD_INT 0
21213: ST_TO_ADDR
// sBomb := false ;
21214: LD_ADDR_EXP 87
21218: PUSH
21219: LD_INT 0
21221: ST_TO_ADDR
// sWound := false ;
21222: LD_ADDR_EXP 95
21226: PUSH
21227: LD_INT 0
21229: ST_TO_ADDR
// sBetray := false ;
21230: LD_ADDR_EXP 99
21234: PUSH
21235: LD_INT 0
21237: ST_TO_ADDR
// sContamin := false ;
21238: LD_ADDR_EXP 100
21242: PUSH
21243: LD_INT 0
21245: ST_TO_ADDR
// sOil := false ;
21246: LD_ADDR_EXP 102
21250: PUSH
21251: LD_INT 0
21253: ST_TO_ADDR
// sStu := false ;
21254: LD_ADDR_EXP 106
21258: PUSH
21259: LD_INT 0
21261: ST_TO_ADDR
// sBazooka := false ;
21262: LD_ADDR_EXP 109
21266: PUSH
21267: LD_INT 0
21269: ST_TO_ADDR
// sMortar := false ;
21270: LD_ADDR_EXP 110
21274: PUSH
21275: LD_INT 0
21277: ST_TO_ADDR
// sRanger := false ;
21278: LD_ADDR_EXP 120
21282: PUSH
21283: LD_INT 0
21285: ST_TO_ADDR
// end ;
21286: LD_VAR 0 1
21290: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
21291: LD_INT 0
21293: PPUSH
21294: PPUSH
21295: PPUSH
21296: PPUSH
21297: PPUSH
// result := [ ] ;
21298: LD_ADDR_VAR 0 1
21302: PUSH
21303: EMPTY
21304: ST_TO_ADDR
// if campaign_id = 1 then
21305: LD_OWVAR 69
21309: PUSH
21310: LD_INT 1
21312: EQUAL
21313: IFFALSE 24251
// begin case mission_number of 1 :
21315: LD_OWVAR 70
21319: PUSH
21320: LD_INT 1
21322: DOUBLE
21323: EQUAL
21324: IFTRUE 21328
21326: GO 21392
21328: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
21329: LD_ADDR_VAR 0 1
21333: PUSH
21334: LD_INT 2
21336: PUSH
21337: LD_INT 4
21339: PUSH
21340: LD_INT 11
21342: PUSH
21343: LD_INT 12
21345: PUSH
21346: LD_INT 15
21348: PUSH
21349: LD_INT 16
21351: PUSH
21352: LD_INT 22
21354: PUSH
21355: LD_INT 23
21357: PUSH
21358: LD_INT 26
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: PUSH
21372: LD_INT 101
21374: PUSH
21375: LD_INT 102
21377: PUSH
21378: LD_INT 106
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: LIST
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: ST_TO_ADDR
21390: GO 24249
21392: LD_INT 2
21394: DOUBLE
21395: EQUAL
21396: IFTRUE 21400
21398: GO 21472
21400: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
21401: LD_ADDR_VAR 0 1
21405: PUSH
21406: LD_INT 2
21408: PUSH
21409: LD_INT 4
21411: PUSH
21412: LD_INT 11
21414: PUSH
21415: LD_INT 12
21417: PUSH
21418: LD_INT 15
21420: PUSH
21421: LD_INT 16
21423: PUSH
21424: LD_INT 22
21426: PUSH
21427: LD_INT 23
21429: PUSH
21430: LD_INT 26
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: PUSH
21444: LD_INT 101
21446: PUSH
21447: LD_INT 102
21449: PUSH
21450: LD_INT 105
21452: PUSH
21453: LD_INT 106
21455: PUSH
21456: LD_INT 108
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: PUSH
21466: EMPTY
21467: LIST
21468: LIST
21469: ST_TO_ADDR
21470: GO 24249
21472: LD_INT 3
21474: DOUBLE
21475: EQUAL
21476: IFTRUE 21480
21478: GO 21556
21480: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
21481: LD_ADDR_VAR 0 1
21485: PUSH
21486: LD_INT 2
21488: PUSH
21489: LD_INT 4
21491: PUSH
21492: LD_INT 5
21494: PUSH
21495: LD_INT 11
21497: PUSH
21498: LD_INT 12
21500: PUSH
21501: LD_INT 15
21503: PUSH
21504: LD_INT 16
21506: PUSH
21507: LD_INT 22
21509: PUSH
21510: LD_INT 26
21512: PUSH
21513: LD_INT 36
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: PUSH
21528: LD_INT 101
21530: PUSH
21531: LD_INT 102
21533: PUSH
21534: LD_INT 105
21536: PUSH
21537: LD_INT 106
21539: PUSH
21540: LD_INT 108
21542: PUSH
21543: EMPTY
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: ST_TO_ADDR
21554: GO 24249
21556: LD_INT 4
21558: DOUBLE
21559: EQUAL
21560: IFTRUE 21564
21562: GO 21648
21564: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
21565: LD_ADDR_VAR 0 1
21569: PUSH
21570: LD_INT 2
21572: PUSH
21573: LD_INT 4
21575: PUSH
21576: LD_INT 5
21578: PUSH
21579: LD_INT 8
21581: PUSH
21582: LD_INT 11
21584: PUSH
21585: LD_INT 12
21587: PUSH
21588: LD_INT 15
21590: PUSH
21591: LD_INT 16
21593: PUSH
21594: LD_INT 22
21596: PUSH
21597: LD_INT 23
21599: PUSH
21600: LD_INT 26
21602: PUSH
21603: LD_INT 36
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: PUSH
21620: LD_INT 101
21622: PUSH
21623: LD_INT 102
21625: PUSH
21626: LD_INT 105
21628: PUSH
21629: LD_INT 106
21631: PUSH
21632: LD_INT 108
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: ST_TO_ADDR
21646: GO 24249
21648: LD_INT 5
21650: DOUBLE
21651: EQUAL
21652: IFTRUE 21656
21654: GO 21756
21656: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
21657: LD_ADDR_VAR 0 1
21661: PUSH
21662: LD_INT 2
21664: PUSH
21665: LD_INT 4
21667: PUSH
21668: LD_INT 5
21670: PUSH
21671: LD_INT 6
21673: PUSH
21674: LD_INT 8
21676: PUSH
21677: LD_INT 11
21679: PUSH
21680: LD_INT 12
21682: PUSH
21683: LD_INT 15
21685: PUSH
21686: LD_INT 16
21688: PUSH
21689: LD_INT 22
21691: PUSH
21692: LD_INT 23
21694: PUSH
21695: LD_INT 25
21697: PUSH
21698: LD_INT 26
21700: PUSH
21701: LD_INT 36
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: PUSH
21720: LD_INT 101
21722: PUSH
21723: LD_INT 102
21725: PUSH
21726: LD_INT 105
21728: PUSH
21729: LD_INT 106
21731: PUSH
21732: LD_INT 108
21734: PUSH
21735: LD_INT 109
21737: PUSH
21738: LD_INT 112
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: ST_TO_ADDR
21754: GO 24249
21756: LD_INT 6
21758: DOUBLE
21759: EQUAL
21760: IFTRUE 21764
21762: GO 21884
21764: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
21765: LD_ADDR_VAR 0 1
21769: PUSH
21770: LD_INT 2
21772: PUSH
21773: LD_INT 4
21775: PUSH
21776: LD_INT 5
21778: PUSH
21779: LD_INT 6
21781: PUSH
21782: LD_INT 8
21784: PUSH
21785: LD_INT 11
21787: PUSH
21788: LD_INT 12
21790: PUSH
21791: LD_INT 15
21793: PUSH
21794: LD_INT 16
21796: PUSH
21797: LD_INT 20
21799: PUSH
21800: LD_INT 21
21802: PUSH
21803: LD_INT 22
21805: PUSH
21806: LD_INT 23
21808: PUSH
21809: LD_INT 25
21811: PUSH
21812: LD_INT 26
21814: PUSH
21815: LD_INT 30
21817: PUSH
21818: LD_INT 31
21820: PUSH
21821: LD_INT 32
21823: PUSH
21824: LD_INT 36
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: PUSH
21848: LD_INT 101
21850: PUSH
21851: LD_INT 102
21853: PUSH
21854: LD_INT 105
21856: PUSH
21857: LD_INT 106
21859: PUSH
21860: LD_INT 108
21862: PUSH
21863: LD_INT 109
21865: PUSH
21866: LD_INT 112
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: ST_TO_ADDR
21882: GO 24249
21884: LD_INT 7
21886: DOUBLE
21887: EQUAL
21888: IFTRUE 21892
21890: GO 21992
21892: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
21893: LD_ADDR_VAR 0 1
21897: PUSH
21898: LD_INT 2
21900: PUSH
21901: LD_INT 4
21903: PUSH
21904: LD_INT 5
21906: PUSH
21907: LD_INT 7
21909: PUSH
21910: LD_INT 11
21912: PUSH
21913: LD_INT 12
21915: PUSH
21916: LD_INT 15
21918: PUSH
21919: LD_INT 16
21921: PUSH
21922: LD_INT 20
21924: PUSH
21925: LD_INT 21
21927: PUSH
21928: LD_INT 22
21930: PUSH
21931: LD_INT 23
21933: PUSH
21934: LD_INT 25
21936: PUSH
21937: LD_INT 26
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: PUSH
21956: LD_INT 101
21958: PUSH
21959: LD_INT 102
21961: PUSH
21962: LD_INT 103
21964: PUSH
21965: LD_INT 105
21967: PUSH
21968: LD_INT 106
21970: PUSH
21971: LD_INT 108
21973: PUSH
21974: LD_INT 112
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: ST_TO_ADDR
21990: GO 24249
21992: LD_INT 8
21994: DOUBLE
21995: EQUAL
21996: IFTRUE 22000
21998: GO 22128
22000: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
22001: LD_ADDR_VAR 0 1
22005: PUSH
22006: LD_INT 2
22008: PUSH
22009: LD_INT 4
22011: PUSH
22012: LD_INT 5
22014: PUSH
22015: LD_INT 6
22017: PUSH
22018: LD_INT 7
22020: PUSH
22021: LD_INT 8
22023: PUSH
22024: LD_INT 11
22026: PUSH
22027: LD_INT 12
22029: PUSH
22030: LD_INT 15
22032: PUSH
22033: LD_INT 16
22035: PUSH
22036: LD_INT 20
22038: PUSH
22039: LD_INT 21
22041: PUSH
22042: LD_INT 22
22044: PUSH
22045: LD_INT 23
22047: PUSH
22048: LD_INT 25
22050: PUSH
22051: LD_INT 26
22053: PUSH
22054: LD_INT 30
22056: PUSH
22057: LD_INT 31
22059: PUSH
22060: LD_INT 32
22062: PUSH
22063: LD_INT 36
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: PUSH
22088: LD_INT 101
22090: PUSH
22091: LD_INT 102
22093: PUSH
22094: LD_INT 103
22096: PUSH
22097: LD_INT 105
22099: PUSH
22100: LD_INT 106
22102: PUSH
22103: LD_INT 108
22105: PUSH
22106: LD_INT 109
22108: PUSH
22109: LD_INT 112
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: ST_TO_ADDR
22126: GO 24249
22128: LD_INT 9
22130: DOUBLE
22131: EQUAL
22132: IFTRUE 22136
22134: GO 22272
22136: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
22137: LD_ADDR_VAR 0 1
22141: PUSH
22142: LD_INT 2
22144: PUSH
22145: LD_INT 4
22147: PUSH
22148: LD_INT 5
22150: PUSH
22151: LD_INT 6
22153: PUSH
22154: LD_INT 7
22156: PUSH
22157: LD_INT 8
22159: PUSH
22160: LD_INT 11
22162: PUSH
22163: LD_INT 12
22165: PUSH
22166: LD_INT 15
22168: PUSH
22169: LD_INT 16
22171: PUSH
22172: LD_INT 20
22174: PUSH
22175: LD_INT 21
22177: PUSH
22178: LD_INT 22
22180: PUSH
22181: LD_INT 23
22183: PUSH
22184: LD_INT 25
22186: PUSH
22187: LD_INT 26
22189: PUSH
22190: LD_INT 28
22192: PUSH
22193: LD_INT 30
22195: PUSH
22196: LD_INT 31
22198: PUSH
22199: LD_INT 32
22201: PUSH
22202: LD_INT 36
22204: PUSH
22205: EMPTY
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: PUSH
22228: LD_INT 101
22230: PUSH
22231: LD_INT 102
22233: PUSH
22234: LD_INT 103
22236: PUSH
22237: LD_INT 105
22239: PUSH
22240: LD_INT 106
22242: PUSH
22243: LD_INT 108
22245: PUSH
22246: LD_INT 109
22248: PUSH
22249: LD_INT 112
22251: PUSH
22252: LD_INT 114
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: ST_TO_ADDR
22270: GO 24249
22272: LD_INT 10
22274: DOUBLE
22275: EQUAL
22276: IFTRUE 22280
22278: GO 22464
22280: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
22281: LD_ADDR_VAR 0 1
22285: PUSH
22286: LD_INT 2
22288: PUSH
22289: LD_INT 4
22291: PUSH
22292: LD_INT 5
22294: PUSH
22295: LD_INT 6
22297: PUSH
22298: LD_INT 7
22300: PUSH
22301: LD_INT 8
22303: PUSH
22304: LD_INT 9
22306: PUSH
22307: LD_INT 10
22309: PUSH
22310: LD_INT 11
22312: PUSH
22313: LD_INT 12
22315: PUSH
22316: LD_INT 13
22318: PUSH
22319: LD_INT 14
22321: PUSH
22322: LD_INT 15
22324: PUSH
22325: LD_INT 16
22327: PUSH
22328: LD_INT 17
22330: PUSH
22331: LD_INT 18
22333: PUSH
22334: LD_INT 19
22336: PUSH
22337: LD_INT 20
22339: PUSH
22340: LD_INT 21
22342: PUSH
22343: LD_INT 22
22345: PUSH
22346: LD_INT 23
22348: PUSH
22349: LD_INT 24
22351: PUSH
22352: LD_INT 25
22354: PUSH
22355: LD_INT 26
22357: PUSH
22358: LD_INT 28
22360: PUSH
22361: LD_INT 30
22363: PUSH
22364: LD_INT 31
22366: PUSH
22367: LD_INT 32
22369: PUSH
22370: LD_INT 36
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: PUSH
22404: LD_INT 101
22406: PUSH
22407: LD_INT 102
22409: PUSH
22410: LD_INT 103
22412: PUSH
22413: LD_INT 104
22415: PUSH
22416: LD_INT 105
22418: PUSH
22419: LD_INT 106
22421: PUSH
22422: LD_INT 107
22424: PUSH
22425: LD_INT 108
22427: PUSH
22428: LD_INT 109
22430: PUSH
22431: LD_INT 110
22433: PUSH
22434: LD_INT 111
22436: PUSH
22437: LD_INT 112
22439: PUSH
22440: LD_INT 114
22442: PUSH
22443: EMPTY
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: ST_TO_ADDR
22462: GO 24249
22464: LD_INT 11
22466: DOUBLE
22467: EQUAL
22468: IFTRUE 22472
22470: GO 22664
22472: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
22473: LD_ADDR_VAR 0 1
22477: PUSH
22478: LD_INT 2
22480: PUSH
22481: LD_INT 3
22483: PUSH
22484: LD_INT 4
22486: PUSH
22487: LD_INT 5
22489: PUSH
22490: LD_INT 6
22492: PUSH
22493: LD_INT 7
22495: PUSH
22496: LD_INT 8
22498: PUSH
22499: LD_INT 9
22501: PUSH
22502: LD_INT 10
22504: PUSH
22505: LD_INT 11
22507: PUSH
22508: LD_INT 12
22510: PUSH
22511: LD_INT 13
22513: PUSH
22514: LD_INT 14
22516: PUSH
22517: LD_INT 15
22519: PUSH
22520: LD_INT 16
22522: PUSH
22523: LD_INT 17
22525: PUSH
22526: LD_INT 18
22528: PUSH
22529: LD_INT 19
22531: PUSH
22532: LD_INT 20
22534: PUSH
22535: LD_INT 21
22537: PUSH
22538: LD_INT 22
22540: PUSH
22541: LD_INT 23
22543: PUSH
22544: LD_INT 24
22546: PUSH
22547: LD_INT 25
22549: PUSH
22550: LD_INT 26
22552: PUSH
22553: LD_INT 28
22555: PUSH
22556: LD_INT 30
22558: PUSH
22559: LD_INT 31
22561: PUSH
22562: LD_INT 32
22564: PUSH
22565: LD_INT 34
22567: PUSH
22568: LD_INT 36
22570: PUSH
22571: EMPTY
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: PUSH
22604: LD_INT 101
22606: PUSH
22607: LD_INT 102
22609: PUSH
22610: LD_INT 103
22612: PUSH
22613: LD_INT 104
22615: PUSH
22616: LD_INT 105
22618: PUSH
22619: LD_INT 106
22621: PUSH
22622: LD_INT 107
22624: PUSH
22625: LD_INT 108
22627: PUSH
22628: LD_INT 109
22630: PUSH
22631: LD_INT 110
22633: PUSH
22634: LD_INT 111
22636: PUSH
22637: LD_INT 112
22639: PUSH
22640: LD_INT 114
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: ST_TO_ADDR
22662: GO 24249
22664: LD_INT 12
22666: DOUBLE
22667: EQUAL
22668: IFTRUE 22672
22670: GO 22880
22672: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
22673: LD_ADDR_VAR 0 1
22677: PUSH
22678: LD_INT 1
22680: PUSH
22681: LD_INT 2
22683: PUSH
22684: LD_INT 3
22686: PUSH
22687: LD_INT 4
22689: PUSH
22690: LD_INT 5
22692: PUSH
22693: LD_INT 6
22695: PUSH
22696: LD_INT 7
22698: PUSH
22699: LD_INT 8
22701: PUSH
22702: LD_INT 9
22704: PUSH
22705: LD_INT 10
22707: PUSH
22708: LD_INT 11
22710: PUSH
22711: LD_INT 12
22713: PUSH
22714: LD_INT 13
22716: PUSH
22717: LD_INT 14
22719: PUSH
22720: LD_INT 15
22722: PUSH
22723: LD_INT 16
22725: PUSH
22726: LD_INT 17
22728: PUSH
22729: LD_INT 18
22731: PUSH
22732: LD_INT 19
22734: PUSH
22735: LD_INT 20
22737: PUSH
22738: LD_INT 21
22740: PUSH
22741: LD_INT 22
22743: PUSH
22744: LD_INT 23
22746: PUSH
22747: LD_INT 24
22749: PUSH
22750: LD_INT 25
22752: PUSH
22753: LD_INT 26
22755: PUSH
22756: LD_INT 27
22758: PUSH
22759: LD_INT 28
22761: PUSH
22762: LD_INT 30
22764: PUSH
22765: LD_INT 31
22767: PUSH
22768: LD_INT 32
22770: PUSH
22771: LD_INT 33
22773: PUSH
22774: LD_INT 34
22776: PUSH
22777: LD_INT 36
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: PUSH
22816: LD_INT 101
22818: PUSH
22819: LD_INT 102
22821: PUSH
22822: LD_INT 103
22824: PUSH
22825: LD_INT 104
22827: PUSH
22828: LD_INT 105
22830: PUSH
22831: LD_INT 106
22833: PUSH
22834: LD_INT 107
22836: PUSH
22837: LD_INT 108
22839: PUSH
22840: LD_INT 109
22842: PUSH
22843: LD_INT 110
22845: PUSH
22846: LD_INT 111
22848: PUSH
22849: LD_INT 112
22851: PUSH
22852: LD_INT 113
22854: PUSH
22855: LD_INT 114
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: ST_TO_ADDR
22878: GO 24249
22880: LD_INT 13
22882: DOUBLE
22883: EQUAL
22884: IFTRUE 22888
22886: GO 23084
22888: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
22889: LD_ADDR_VAR 0 1
22893: PUSH
22894: LD_INT 1
22896: PUSH
22897: LD_INT 2
22899: PUSH
22900: LD_INT 3
22902: PUSH
22903: LD_INT 4
22905: PUSH
22906: LD_INT 5
22908: PUSH
22909: LD_INT 8
22911: PUSH
22912: LD_INT 9
22914: PUSH
22915: LD_INT 10
22917: PUSH
22918: LD_INT 11
22920: PUSH
22921: LD_INT 12
22923: PUSH
22924: LD_INT 14
22926: PUSH
22927: LD_INT 15
22929: PUSH
22930: LD_INT 16
22932: PUSH
22933: LD_INT 17
22935: PUSH
22936: LD_INT 18
22938: PUSH
22939: LD_INT 19
22941: PUSH
22942: LD_INT 20
22944: PUSH
22945: LD_INT 21
22947: PUSH
22948: LD_INT 22
22950: PUSH
22951: LD_INT 23
22953: PUSH
22954: LD_INT 24
22956: PUSH
22957: LD_INT 25
22959: PUSH
22960: LD_INT 26
22962: PUSH
22963: LD_INT 27
22965: PUSH
22966: LD_INT 28
22968: PUSH
22969: LD_INT 30
22971: PUSH
22972: LD_INT 31
22974: PUSH
22975: LD_INT 32
22977: PUSH
22978: LD_INT 33
22980: PUSH
22981: LD_INT 34
22983: PUSH
22984: LD_INT 36
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: PUSH
23020: LD_INT 101
23022: PUSH
23023: LD_INT 102
23025: PUSH
23026: LD_INT 103
23028: PUSH
23029: LD_INT 104
23031: PUSH
23032: LD_INT 105
23034: PUSH
23035: LD_INT 106
23037: PUSH
23038: LD_INT 107
23040: PUSH
23041: LD_INT 108
23043: PUSH
23044: LD_INT 109
23046: PUSH
23047: LD_INT 110
23049: PUSH
23050: LD_INT 111
23052: PUSH
23053: LD_INT 112
23055: PUSH
23056: LD_INT 113
23058: PUSH
23059: LD_INT 114
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: ST_TO_ADDR
23082: GO 24249
23084: LD_INT 14
23086: DOUBLE
23087: EQUAL
23088: IFTRUE 23092
23090: GO 23304
23092: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
23093: LD_ADDR_VAR 0 1
23097: PUSH
23098: LD_INT 1
23100: PUSH
23101: LD_INT 2
23103: PUSH
23104: LD_INT 3
23106: PUSH
23107: LD_INT 4
23109: PUSH
23110: LD_INT 5
23112: PUSH
23113: LD_INT 6
23115: PUSH
23116: LD_INT 7
23118: PUSH
23119: LD_INT 8
23121: PUSH
23122: LD_INT 9
23124: PUSH
23125: LD_INT 10
23127: PUSH
23128: LD_INT 11
23130: PUSH
23131: LD_INT 12
23133: PUSH
23134: LD_INT 13
23136: PUSH
23137: LD_INT 14
23139: PUSH
23140: LD_INT 15
23142: PUSH
23143: LD_INT 16
23145: PUSH
23146: LD_INT 17
23148: PUSH
23149: LD_INT 18
23151: PUSH
23152: LD_INT 19
23154: PUSH
23155: LD_INT 20
23157: PUSH
23158: LD_INT 21
23160: PUSH
23161: LD_INT 22
23163: PUSH
23164: LD_INT 23
23166: PUSH
23167: LD_INT 24
23169: PUSH
23170: LD_INT 25
23172: PUSH
23173: LD_INT 26
23175: PUSH
23176: LD_INT 27
23178: PUSH
23179: LD_INT 28
23181: PUSH
23182: LD_INT 29
23184: PUSH
23185: LD_INT 30
23187: PUSH
23188: LD_INT 31
23190: PUSH
23191: LD_INT 32
23193: PUSH
23194: LD_INT 33
23196: PUSH
23197: LD_INT 34
23199: PUSH
23200: LD_INT 36
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: PUSH
23240: LD_INT 101
23242: PUSH
23243: LD_INT 102
23245: PUSH
23246: LD_INT 103
23248: PUSH
23249: LD_INT 104
23251: PUSH
23252: LD_INT 105
23254: PUSH
23255: LD_INT 106
23257: PUSH
23258: LD_INT 107
23260: PUSH
23261: LD_INT 108
23263: PUSH
23264: LD_INT 109
23266: PUSH
23267: LD_INT 110
23269: PUSH
23270: LD_INT 111
23272: PUSH
23273: LD_INT 112
23275: PUSH
23276: LD_INT 113
23278: PUSH
23279: LD_INT 114
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: ST_TO_ADDR
23302: GO 24249
23304: LD_INT 15
23306: DOUBLE
23307: EQUAL
23308: IFTRUE 23312
23310: GO 23524
23312: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
23313: LD_ADDR_VAR 0 1
23317: PUSH
23318: LD_INT 1
23320: PUSH
23321: LD_INT 2
23323: PUSH
23324: LD_INT 3
23326: PUSH
23327: LD_INT 4
23329: PUSH
23330: LD_INT 5
23332: PUSH
23333: LD_INT 6
23335: PUSH
23336: LD_INT 7
23338: PUSH
23339: LD_INT 8
23341: PUSH
23342: LD_INT 9
23344: PUSH
23345: LD_INT 10
23347: PUSH
23348: LD_INT 11
23350: PUSH
23351: LD_INT 12
23353: PUSH
23354: LD_INT 13
23356: PUSH
23357: LD_INT 14
23359: PUSH
23360: LD_INT 15
23362: PUSH
23363: LD_INT 16
23365: PUSH
23366: LD_INT 17
23368: PUSH
23369: LD_INT 18
23371: PUSH
23372: LD_INT 19
23374: PUSH
23375: LD_INT 20
23377: PUSH
23378: LD_INT 21
23380: PUSH
23381: LD_INT 22
23383: PUSH
23384: LD_INT 23
23386: PUSH
23387: LD_INT 24
23389: PUSH
23390: LD_INT 25
23392: PUSH
23393: LD_INT 26
23395: PUSH
23396: LD_INT 27
23398: PUSH
23399: LD_INT 28
23401: PUSH
23402: LD_INT 29
23404: PUSH
23405: LD_INT 30
23407: PUSH
23408: LD_INT 31
23410: PUSH
23411: LD_INT 32
23413: PUSH
23414: LD_INT 33
23416: PUSH
23417: LD_INT 34
23419: PUSH
23420: LD_INT 36
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: PUSH
23460: LD_INT 101
23462: PUSH
23463: LD_INT 102
23465: PUSH
23466: LD_INT 103
23468: PUSH
23469: LD_INT 104
23471: PUSH
23472: LD_INT 105
23474: PUSH
23475: LD_INT 106
23477: PUSH
23478: LD_INT 107
23480: PUSH
23481: LD_INT 108
23483: PUSH
23484: LD_INT 109
23486: PUSH
23487: LD_INT 110
23489: PUSH
23490: LD_INT 111
23492: PUSH
23493: LD_INT 112
23495: PUSH
23496: LD_INT 113
23498: PUSH
23499: LD_INT 114
23501: PUSH
23502: EMPTY
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: PUSH
23518: EMPTY
23519: LIST
23520: LIST
23521: ST_TO_ADDR
23522: GO 24249
23524: LD_INT 16
23526: DOUBLE
23527: EQUAL
23528: IFTRUE 23532
23530: GO 23656
23532: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
23533: LD_ADDR_VAR 0 1
23537: PUSH
23538: LD_INT 2
23540: PUSH
23541: LD_INT 4
23543: PUSH
23544: LD_INT 5
23546: PUSH
23547: LD_INT 7
23549: PUSH
23550: LD_INT 11
23552: PUSH
23553: LD_INT 12
23555: PUSH
23556: LD_INT 15
23558: PUSH
23559: LD_INT 16
23561: PUSH
23562: LD_INT 20
23564: PUSH
23565: LD_INT 21
23567: PUSH
23568: LD_INT 22
23570: PUSH
23571: LD_INT 23
23573: PUSH
23574: LD_INT 25
23576: PUSH
23577: LD_INT 26
23579: PUSH
23580: LD_INT 30
23582: PUSH
23583: LD_INT 31
23585: PUSH
23586: LD_INT 32
23588: PUSH
23589: LD_INT 33
23591: PUSH
23592: LD_INT 34
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 101
23618: PUSH
23619: LD_INT 102
23621: PUSH
23622: LD_INT 103
23624: PUSH
23625: LD_INT 106
23627: PUSH
23628: LD_INT 108
23630: PUSH
23631: LD_INT 112
23633: PUSH
23634: LD_INT 113
23636: PUSH
23637: LD_INT 114
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: ST_TO_ADDR
23654: GO 24249
23656: LD_INT 17
23658: DOUBLE
23659: EQUAL
23660: IFTRUE 23664
23662: GO 23876
23664: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
23665: LD_ADDR_VAR 0 1
23669: PUSH
23670: LD_INT 1
23672: PUSH
23673: LD_INT 2
23675: PUSH
23676: LD_INT 3
23678: PUSH
23679: LD_INT 4
23681: PUSH
23682: LD_INT 5
23684: PUSH
23685: LD_INT 6
23687: PUSH
23688: LD_INT 7
23690: PUSH
23691: LD_INT 8
23693: PUSH
23694: LD_INT 9
23696: PUSH
23697: LD_INT 10
23699: PUSH
23700: LD_INT 11
23702: PUSH
23703: LD_INT 12
23705: PUSH
23706: LD_INT 13
23708: PUSH
23709: LD_INT 14
23711: PUSH
23712: LD_INT 15
23714: PUSH
23715: LD_INT 16
23717: PUSH
23718: LD_INT 17
23720: PUSH
23721: LD_INT 18
23723: PUSH
23724: LD_INT 19
23726: PUSH
23727: LD_INT 20
23729: PUSH
23730: LD_INT 21
23732: PUSH
23733: LD_INT 22
23735: PUSH
23736: LD_INT 23
23738: PUSH
23739: LD_INT 24
23741: PUSH
23742: LD_INT 25
23744: PUSH
23745: LD_INT 26
23747: PUSH
23748: LD_INT 27
23750: PUSH
23751: LD_INT 28
23753: PUSH
23754: LD_INT 29
23756: PUSH
23757: LD_INT 30
23759: PUSH
23760: LD_INT 31
23762: PUSH
23763: LD_INT 32
23765: PUSH
23766: LD_INT 33
23768: PUSH
23769: LD_INT 34
23771: PUSH
23772: LD_INT 36
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: PUSH
23812: LD_INT 101
23814: PUSH
23815: LD_INT 102
23817: PUSH
23818: LD_INT 103
23820: PUSH
23821: LD_INT 104
23823: PUSH
23824: LD_INT 105
23826: PUSH
23827: LD_INT 106
23829: PUSH
23830: LD_INT 107
23832: PUSH
23833: LD_INT 108
23835: PUSH
23836: LD_INT 109
23838: PUSH
23839: LD_INT 110
23841: PUSH
23842: LD_INT 111
23844: PUSH
23845: LD_INT 112
23847: PUSH
23848: LD_INT 113
23850: PUSH
23851: LD_INT 114
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: ST_TO_ADDR
23874: GO 24249
23876: LD_INT 18
23878: DOUBLE
23879: EQUAL
23880: IFTRUE 23884
23882: GO 24020
23884: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
23885: LD_ADDR_VAR 0 1
23889: PUSH
23890: LD_INT 2
23892: PUSH
23893: LD_INT 4
23895: PUSH
23896: LD_INT 5
23898: PUSH
23899: LD_INT 7
23901: PUSH
23902: LD_INT 11
23904: PUSH
23905: LD_INT 12
23907: PUSH
23908: LD_INT 15
23910: PUSH
23911: LD_INT 16
23913: PUSH
23914: LD_INT 20
23916: PUSH
23917: LD_INT 21
23919: PUSH
23920: LD_INT 22
23922: PUSH
23923: LD_INT 23
23925: PUSH
23926: LD_INT 25
23928: PUSH
23929: LD_INT 26
23931: PUSH
23932: LD_INT 30
23934: PUSH
23935: LD_INT 31
23937: PUSH
23938: LD_INT 32
23940: PUSH
23941: LD_INT 33
23943: PUSH
23944: LD_INT 34
23946: PUSH
23947: LD_INT 35
23949: PUSH
23950: LD_INT 36
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: PUSH
23976: LD_INT 101
23978: PUSH
23979: LD_INT 102
23981: PUSH
23982: LD_INT 103
23984: PUSH
23985: LD_INT 106
23987: PUSH
23988: LD_INT 108
23990: PUSH
23991: LD_INT 112
23993: PUSH
23994: LD_INT 113
23996: PUSH
23997: LD_INT 114
23999: PUSH
24000: LD_INT 115
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: ST_TO_ADDR
24018: GO 24249
24020: LD_INT 19
24022: DOUBLE
24023: EQUAL
24024: IFTRUE 24028
24026: GO 24248
24028: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
24029: LD_ADDR_VAR 0 1
24033: PUSH
24034: LD_INT 1
24036: PUSH
24037: LD_INT 2
24039: PUSH
24040: LD_INT 3
24042: PUSH
24043: LD_INT 4
24045: PUSH
24046: LD_INT 5
24048: PUSH
24049: LD_INT 6
24051: PUSH
24052: LD_INT 7
24054: PUSH
24055: LD_INT 8
24057: PUSH
24058: LD_INT 9
24060: PUSH
24061: LD_INT 10
24063: PUSH
24064: LD_INT 11
24066: PUSH
24067: LD_INT 12
24069: PUSH
24070: LD_INT 13
24072: PUSH
24073: LD_INT 14
24075: PUSH
24076: LD_INT 15
24078: PUSH
24079: LD_INT 16
24081: PUSH
24082: LD_INT 17
24084: PUSH
24085: LD_INT 18
24087: PUSH
24088: LD_INT 19
24090: PUSH
24091: LD_INT 20
24093: PUSH
24094: LD_INT 21
24096: PUSH
24097: LD_INT 22
24099: PUSH
24100: LD_INT 23
24102: PUSH
24103: LD_INT 24
24105: PUSH
24106: LD_INT 25
24108: PUSH
24109: LD_INT 26
24111: PUSH
24112: LD_INT 27
24114: PUSH
24115: LD_INT 28
24117: PUSH
24118: LD_INT 29
24120: PUSH
24121: LD_INT 30
24123: PUSH
24124: LD_INT 31
24126: PUSH
24127: LD_INT 32
24129: PUSH
24130: LD_INT 33
24132: PUSH
24133: LD_INT 34
24135: PUSH
24136: LD_INT 35
24138: PUSH
24139: LD_INT 36
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: PUSH
24180: LD_INT 101
24182: PUSH
24183: LD_INT 102
24185: PUSH
24186: LD_INT 103
24188: PUSH
24189: LD_INT 104
24191: PUSH
24192: LD_INT 105
24194: PUSH
24195: LD_INT 106
24197: PUSH
24198: LD_INT 107
24200: PUSH
24201: LD_INT 108
24203: PUSH
24204: LD_INT 109
24206: PUSH
24207: LD_INT 110
24209: PUSH
24210: LD_INT 111
24212: PUSH
24213: LD_INT 112
24215: PUSH
24216: LD_INT 113
24218: PUSH
24219: LD_INT 114
24221: PUSH
24222: LD_INT 115
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: PUSH
24242: EMPTY
24243: LIST
24244: LIST
24245: ST_TO_ADDR
24246: GO 24249
24248: POP
// end else
24249: GO 24468
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
24251: LD_ADDR_VAR 0 1
24255: PUSH
24256: LD_INT 1
24258: PUSH
24259: LD_INT 2
24261: PUSH
24262: LD_INT 3
24264: PUSH
24265: LD_INT 4
24267: PUSH
24268: LD_INT 5
24270: PUSH
24271: LD_INT 6
24273: PUSH
24274: LD_INT 7
24276: PUSH
24277: LD_INT 8
24279: PUSH
24280: LD_INT 9
24282: PUSH
24283: LD_INT 10
24285: PUSH
24286: LD_INT 11
24288: PUSH
24289: LD_INT 12
24291: PUSH
24292: LD_INT 13
24294: PUSH
24295: LD_INT 14
24297: PUSH
24298: LD_INT 15
24300: PUSH
24301: LD_INT 16
24303: PUSH
24304: LD_INT 17
24306: PUSH
24307: LD_INT 18
24309: PUSH
24310: LD_INT 19
24312: PUSH
24313: LD_INT 20
24315: PUSH
24316: LD_INT 21
24318: PUSH
24319: LD_INT 22
24321: PUSH
24322: LD_INT 23
24324: PUSH
24325: LD_INT 24
24327: PUSH
24328: LD_INT 25
24330: PUSH
24331: LD_INT 26
24333: PUSH
24334: LD_INT 27
24336: PUSH
24337: LD_INT 28
24339: PUSH
24340: LD_INT 29
24342: PUSH
24343: LD_INT 30
24345: PUSH
24346: LD_INT 31
24348: PUSH
24349: LD_INT 32
24351: PUSH
24352: LD_INT 33
24354: PUSH
24355: LD_INT 34
24357: PUSH
24358: LD_INT 35
24360: PUSH
24361: LD_INT 36
24363: PUSH
24364: EMPTY
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: PUSH
24402: LD_INT 101
24404: PUSH
24405: LD_INT 102
24407: PUSH
24408: LD_INT 103
24410: PUSH
24411: LD_INT 104
24413: PUSH
24414: LD_INT 105
24416: PUSH
24417: LD_INT 106
24419: PUSH
24420: LD_INT 107
24422: PUSH
24423: LD_INT 108
24425: PUSH
24426: LD_INT 109
24428: PUSH
24429: LD_INT 110
24431: PUSH
24432: LD_INT 111
24434: PUSH
24435: LD_INT 112
24437: PUSH
24438: LD_INT 113
24440: PUSH
24441: LD_INT 114
24443: PUSH
24444: LD_INT 115
24446: PUSH
24447: EMPTY
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: ST_TO_ADDR
// if result then
24468: LD_VAR 0 1
24472: IFFALSE 24761
// begin normal :=  ;
24474: LD_ADDR_VAR 0 3
24478: PUSH
24479: LD_STRING 
24481: ST_TO_ADDR
// hardcore :=  ;
24482: LD_ADDR_VAR 0 4
24486: PUSH
24487: LD_STRING 
24489: ST_TO_ADDR
// for i = 1 to normalCounter do
24490: LD_ADDR_VAR 0 5
24494: PUSH
24495: DOUBLE
24496: LD_INT 1
24498: DEC
24499: ST_TO_ADDR
24500: LD_EXP 68
24504: PUSH
24505: FOR_TO
24506: IFFALSE 24607
// begin tmp := 0 ;
24508: LD_ADDR_VAR 0 2
24512: PUSH
24513: LD_STRING 0
24515: ST_TO_ADDR
// if result [ 1 ] then
24516: LD_VAR 0 1
24520: PUSH
24521: LD_INT 1
24523: ARRAY
24524: IFFALSE 24589
// if result [ 1 ] [ 1 ] = i then
24526: LD_VAR 0 1
24530: PUSH
24531: LD_INT 1
24533: ARRAY
24534: PUSH
24535: LD_INT 1
24537: ARRAY
24538: PUSH
24539: LD_VAR 0 5
24543: EQUAL
24544: IFFALSE 24589
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24546: LD_ADDR_VAR 0 1
24550: PUSH
24551: LD_VAR 0 1
24555: PPUSH
24556: LD_INT 1
24558: PPUSH
24559: LD_VAR 0 1
24563: PUSH
24564: LD_INT 1
24566: ARRAY
24567: PPUSH
24568: LD_INT 1
24570: PPUSH
24571: CALL_OW 3
24575: PPUSH
24576: CALL_OW 1
24580: ST_TO_ADDR
// tmp := 1 ;
24581: LD_ADDR_VAR 0 2
24585: PUSH
24586: LD_STRING 1
24588: ST_TO_ADDR
// end ; normal := normal & tmp ;
24589: LD_ADDR_VAR 0 3
24593: PUSH
24594: LD_VAR 0 3
24598: PUSH
24599: LD_VAR 0 2
24603: STR
24604: ST_TO_ADDR
// end ;
24605: GO 24505
24607: POP
24608: POP
// for i = 1 to hardcoreCounter do
24609: LD_ADDR_VAR 0 5
24613: PUSH
24614: DOUBLE
24615: LD_INT 1
24617: DEC
24618: ST_TO_ADDR
24619: LD_EXP 69
24623: PUSH
24624: FOR_TO
24625: IFFALSE 24730
// begin tmp := 0 ;
24627: LD_ADDR_VAR 0 2
24631: PUSH
24632: LD_STRING 0
24634: ST_TO_ADDR
// if result [ 2 ] then
24635: LD_VAR 0 1
24639: PUSH
24640: LD_INT 2
24642: ARRAY
24643: IFFALSE 24712
// if result [ 2 ] [ 1 ] = 100 + i then
24645: LD_VAR 0 1
24649: PUSH
24650: LD_INT 2
24652: ARRAY
24653: PUSH
24654: LD_INT 1
24656: ARRAY
24657: PUSH
24658: LD_INT 100
24660: PUSH
24661: LD_VAR 0 5
24665: PLUS
24666: EQUAL
24667: IFFALSE 24712
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24669: LD_ADDR_VAR 0 1
24673: PUSH
24674: LD_VAR 0 1
24678: PPUSH
24679: LD_INT 2
24681: PPUSH
24682: LD_VAR 0 1
24686: PUSH
24687: LD_INT 2
24689: ARRAY
24690: PPUSH
24691: LD_INT 1
24693: PPUSH
24694: CALL_OW 3
24698: PPUSH
24699: CALL_OW 1
24703: ST_TO_ADDR
// tmp := 1 ;
24704: LD_ADDR_VAR 0 2
24708: PUSH
24709: LD_STRING 1
24711: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24712: LD_ADDR_VAR 0 4
24716: PUSH
24717: LD_VAR 0 4
24721: PUSH
24722: LD_VAR 0 2
24726: STR
24727: ST_TO_ADDR
// end ;
24728: GO 24624
24730: POP
24731: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
24732: LD_STRING getStreamItemsFromMission("
24734: PUSH
24735: LD_VAR 0 3
24739: STR
24740: PUSH
24741: LD_STRING ","
24743: STR
24744: PUSH
24745: LD_VAR 0 4
24749: STR
24750: PUSH
24751: LD_STRING ")
24753: STR
24754: PPUSH
24755: CALL_OW 559
// end else
24759: GO 24768
// ToLua ( getStreamItemsFromMission("","") ) ;
24761: LD_STRING getStreamItemsFromMission("","")
24763: PPUSH
24764: CALL_OW 559
// end ;
24768: LD_VAR 0 1
24772: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24773: LD_EXP 67
24777: PUSH
24778: LD_EXP 72
24782: AND
24783: IFFALSE 24907
24785: GO 24787
24787: DISABLE
24788: LD_INT 0
24790: PPUSH
24791: PPUSH
// begin enable ;
24792: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24793: LD_ADDR_VAR 0 2
24797: PUSH
24798: LD_INT 22
24800: PUSH
24801: LD_OWVAR 2
24805: PUSH
24806: EMPTY
24807: LIST
24808: LIST
24809: PUSH
24810: LD_INT 2
24812: PUSH
24813: LD_INT 34
24815: PUSH
24816: LD_INT 7
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PUSH
24823: LD_INT 34
24825: PUSH
24826: LD_INT 45
24828: PUSH
24829: EMPTY
24830: LIST
24831: LIST
24832: PUSH
24833: LD_INT 34
24835: PUSH
24836: LD_INT 28
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: PUSH
24843: LD_INT 34
24845: PUSH
24846: LD_INT 47
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: PPUSH
24864: CALL_OW 69
24868: ST_TO_ADDR
// if not tmp then
24869: LD_VAR 0 2
24873: NOT
24874: IFFALSE 24878
// exit ;
24876: GO 24907
// for i in tmp do
24878: LD_ADDR_VAR 0 1
24882: PUSH
24883: LD_VAR 0 2
24887: PUSH
24888: FOR_IN
24889: IFFALSE 24905
// begin SetLives ( i , 0 ) ;
24891: LD_VAR 0 1
24895: PPUSH
24896: LD_INT 0
24898: PPUSH
24899: CALL_OW 234
// end ;
24903: GO 24888
24905: POP
24906: POP
// end ;
24907: PPOPN 2
24909: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24910: LD_EXP 67
24914: PUSH
24915: LD_EXP 73
24919: AND
24920: IFFALSE 25004
24922: GO 24924
24924: DISABLE
24925: LD_INT 0
24927: PPUSH
24928: PPUSH
// begin enable ;
24929: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24930: LD_ADDR_VAR 0 2
24934: PUSH
24935: LD_INT 22
24937: PUSH
24938: LD_OWVAR 2
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: PUSH
24947: LD_INT 32
24949: PUSH
24950: LD_INT 3
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: PPUSH
24961: CALL_OW 69
24965: ST_TO_ADDR
// if not tmp then
24966: LD_VAR 0 2
24970: NOT
24971: IFFALSE 24975
// exit ;
24973: GO 25004
// for i in tmp do
24975: LD_ADDR_VAR 0 1
24979: PUSH
24980: LD_VAR 0 2
24984: PUSH
24985: FOR_IN
24986: IFFALSE 25002
// begin SetLives ( i , 0 ) ;
24988: LD_VAR 0 1
24992: PPUSH
24993: LD_INT 0
24995: PPUSH
24996: CALL_OW 234
// end ;
25000: GO 24985
25002: POP
25003: POP
// end ;
25004: PPOPN 2
25006: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25007: LD_EXP 67
25011: PUSH
25012: LD_EXP 70
25016: AND
25017: IFFALSE 25110
25019: GO 25021
25021: DISABLE
25022: LD_INT 0
25024: PPUSH
// begin enable ;
25025: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25026: LD_ADDR_VAR 0 1
25030: PUSH
25031: LD_INT 22
25033: PUSH
25034: LD_OWVAR 2
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 2
25045: PUSH
25046: LD_INT 25
25048: PUSH
25049: LD_INT 5
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: PUSH
25056: LD_INT 25
25058: PUSH
25059: LD_INT 9
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PUSH
25066: LD_INT 25
25068: PUSH
25069: LD_INT 8
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PPUSH
25086: CALL_OW 69
25090: PUSH
25091: FOR_IN
25092: IFFALSE 25108
// begin SetClass ( i , 1 ) ;
25094: LD_VAR 0 1
25098: PPUSH
25099: LD_INT 1
25101: PPUSH
25102: CALL_OW 336
// end ;
25106: GO 25091
25108: POP
25109: POP
// end ;
25110: PPOPN 1
25112: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25113: LD_EXP 67
25117: PUSH
25118: LD_EXP 71
25122: AND
25123: PUSH
25124: LD_OWVAR 65
25128: PUSH
25129: LD_INT 7
25131: LESS
25132: AND
25133: IFFALSE 25147
25135: GO 25137
25137: DISABLE
// begin enable ;
25138: ENABLE
// game_speed := 7 ;
25139: LD_ADDR_OWVAR 65
25143: PUSH
25144: LD_INT 7
25146: ST_TO_ADDR
// end ;
25147: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25148: LD_EXP 67
25152: PUSH
25153: LD_EXP 74
25157: AND
25158: IFFALSE 25360
25160: GO 25162
25162: DISABLE
25163: LD_INT 0
25165: PPUSH
25166: PPUSH
25167: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25168: LD_ADDR_VAR 0 3
25172: PUSH
25173: LD_INT 81
25175: PUSH
25176: LD_OWVAR 2
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: LD_INT 21
25187: PUSH
25188: LD_INT 1
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: PUSH
25195: EMPTY
25196: LIST
25197: LIST
25198: PPUSH
25199: CALL_OW 69
25203: ST_TO_ADDR
// if not tmp then
25204: LD_VAR 0 3
25208: NOT
25209: IFFALSE 25213
// exit ;
25211: GO 25360
// if tmp > 5 then
25213: LD_VAR 0 3
25217: PUSH
25218: LD_INT 5
25220: GREATER
25221: IFFALSE 25233
// k := 5 else
25223: LD_ADDR_VAR 0 2
25227: PUSH
25228: LD_INT 5
25230: ST_TO_ADDR
25231: GO 25243
// k := tmp ;
25233: LD_ADDR_VAR 0 2
25237: PUSH
25238: LD_VAR 0 3
25242: ST_TO_ADDR
// for i := 1 to k do
25243: LD_ADDR_VAR 0 1
25247: PUSH
25248: DOUBLE
25249: LD_INT 1
25251: DEC
25252: ST_TO_ADDR
25253: LD_VAR 0 2
25257: PUSH
25258: FOR_TO
25259: IFFALSE 25358
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25261: LD_VAR 0 3
25265: PUSH
25266: LD_VAR 0 1
25270: ARRAY
25271: PPUSH
25272: LD_VAR 0 1
25276: PUSH
25277: LD_INT 4
25279: MOD
25280: PUSH
25281: LD_INT 1
25283: PLUS
25284: PPUSH
25285: CALL_OW 259
25289: PUSH
25290: LD_INT 10
25292: LESS
25293: IFFALSE 25356
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25295: LD_VAR 0 3
25299: PUSH
25300: LD_VAR 0 1
25304: ARRAY
25305: PPUSH
25306: LD_VAR 0 1
25310: PUSH
25311: LD_INT 4
25313: MOD
25314: PUSH
25315: LD_INT 1
25317: PLUS
25318: PPUSH
25319: LD_VAR 0 3
25323: PUSH
25324: LD_VAR 0 1
25328: ARRAY
25329: PPUSH
25330: LD_VAR 0 1
25334: PUSH
25335: LD_INT 4
25337: MOD
25338: PUSH
25339: LD_INT 1
25341: PLUS
25342: PPUSH
25343: CALL_OW 259
25347: PUSH
25348: LD_INT 1
25350: PLUS
25351: PPUSH
25352: CALL_OW 237
25356: GO 25258
25358: POP
25359: POP
// end ;
25360: PPOPN 3
25362: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25363: LD_EXP 67
25367: PUSH
25368: LD_EXP 75
25372: AND
25373: IFFALSE 25393
25375: GO 25377
25377: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25378: LD_INT 4
25380: PPUSH
25381: LD_OWVAR 2
25385: PPUSH
25386: LD_INT 0
25388: PPUSH
25389: CALL_OW 324
25393: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25394: LD_EXP 67
25398: PUSH
25399: LD_EXP 104
25403: AND
25404: IFFALSE 25424
25406: GO 25408
25408: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25409: LD_INT 19
25411: PPUSH
25412: LD_OWVAR 2
25416: PPUSH
25417: LD_INT 0
25419: PPUSH
25420: CALL_OW 324
25424: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25425: LD_EXP 67
25429: PUSH
25430: LD_EXP 76
25434: AND
25435: IFFALSE 25537
25437: GO 25439
25439: DISABLE
25440: LD_INT 0
25442: PPUSH
25443: PPUSH
// begin enable ;
25444: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25445: LD_ADDR_VAR 0 2
25449: PUSH
25450: LD_INT 22
25452: PUSH
25453: LD_OWVAR 2
25457: PUSH
25458: EMPTY
25459: LIST
25460: LIST
25461: PUSH
25462: LD_INT 2
25464: PUSH
25465: LD_INT 34
25467: PUSH
25468: LD_INT 11
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: PUSH
25475: LD_INT 34
25477: PUSH
25478: LD_INT 30
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: LIST
25489: PUSH
25490: EMPTY
25491: LIST
25492: LIST
25493: PPUSH
25494: CALL_OW 69
25498: ST_TO_ADDR
// if not tmp then
25499: LD_VAR 0 2
25503: NOT
25504: IFFALSE 25508
// exit ;
25506: GO 25537
// for i in tmp do
25508: LD_ADDR_VAR 0 1
25512: PUSH
25513: LD_VAR 0 2
25517: PUSH
25518: FOR_IN
25519: IFFALSE 25535
// begin SetLives ( i , 0 ) ;
25521: LD_VAR 0 1
25525: PPUSH
25526: LD_INT 0
25528: PPUSH
25529: CALL_OW 234
// end ;
25533: GO 25518
25535: POP
25536: POP
// end ;
25537: PPOPN 2
25539: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25540: LD_EXP 67
25544: PUSH
25545: LD_EXP 77
25549: AND
25550: IFFALSE 25570
25552: GO 25554
25554: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25555: LD_INT 32
25557: PPUSH
25558: LD_OWVAR 2
25562: PPUSH
25563: LD_INT 0
25565: PPUSH
25566: CALL_OW 324
25570: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25571: LD_EXP 67
25575: PUSH
25576: LD_EXP 78
25580: AND
25581: IFFALSE 25762
25583: GO 25585
25585: DISABLE
25586: LD_INT 0
25588: PPUSH
25589: PPUSH
25590: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25591: LD_ADDR_VAR 0 2
25595: PUSH
25596: LD_INT 22
25598: PUSH
25599: LD_OWVAR 2
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: PUSH
25608: LD_INT 33
25610: PUSH
25611: LD_INT 3
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: PUSH
25618: EMPTY
25619: LIST
25620: LIST
25621: PPUSH
25622: CALL_OW 69
25626: ST_TO_ADDR
// if not tmp then
25627: LD_VAR 0 2
25631: NOT
25632: IFFALSE 25636
// exit ;
25634: GO 25762
// side := 0 ;
25636: LD_ADDR_VAR 0 3
25640: PUSH
25641: LD_INT 0
25643: ST_TO_ADDR
// for i := 1 to 8 do
25644: LD_ADDR_VAR 0 1
25648: PUSH
25649: DOUBLE
25650: LD_INT 1
25652: DEC
25653: ST_TO_ADDR
25654: LD_INT 8
25656: PUSH
25657: FOR_TO
25658: IFFALSE 25706
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25660: LD_OWVAR 2
25664: PUSH
25665: LD_VAR 0 1
25669: NONEQUAL
25670: PUSH
25671: LD_OWVAR 2
25675: PPUSH
25676: LD_VAR 0 1
25680: PPUSH
25681: CALL_OW 81
25685: PUSH
25686: LD_INT 2
25688: EQUAL
25689: AND
25690: IFFALSE 25704
// begin side := i ;
25692: LD_ADDR_VAR 0 3
25696: PUSH
25697: LD_VAR 0 1
25701: ST_TO_ADDR
// break ;
25702: GO 25706
// end ;
25704: GO 25657
25706: POP
25707: POP
// if not side then
25708: LD_VAR 0 3
25712: NOT
25713: IFFALSE 25717
// exit ;
25715: GO 25762
// for i := 1 to tmp do
25717: LD_ADDR_VAR 0 1
25721: PUSH
25722: DOUBLE
25723: LD_INT 1
25725: DEC
25726: ST_TO_ADDR
25727: LD_VAR 0 2
25731: PUSH
25732: FOR_TO
25733: IFFALSE 25760
// if Prob ( 60 ) then
25735: LD_INT 60
25737: PPUSH
25738: CALL_OW 13
25742: IFFALSE 25758
// SetSide ( i , side ) ;
25744: LD_VAR 0 1
25748: PPUSH
25749: LD_VAR 0 3
25753: PPUSH
25754: CALL_OW 235
25758: GO 25732
25760: POP
25761: POP
// end ;
25762: PPOPN 3
25764: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25765: LD_EXP 67
25769: PUSH
25770: LD_EXP 80
25774: AND
25775: IFFALSE 25894
25777: GO 25779
25779: DISABLE
25780: LD_INT 0
25782: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25783: LD_ADDR_VAR 0 1
25787: PUSH
25788: LD_INT 22
25790: PUSH
25791: LD_OWVAR 2
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: PUSH
25800: LD_INT 21
25802: PUSH
25803: LD_INT 1
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: PUSH
25810: LD_INT 3
25812: PUSH
25813: LD_INT 23
25815: PUSH
25816: LD_INT 0
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: LIST
25831: PPUSH
25832: CALL_OW 69
25836: PUSH
25837: FOR_IN
25838: IFFALSE 25892
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25840: LD_VAR 0 1
25844: PPUSH
25845: CALL_OW 257
25849: PUSH
25850: LD_INT 1
25852: PUSH
25853: LD_INT 2
25855: PUSH
25856: LD_INT 3
25858: PUSH
25859: LD_INT 4
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: IN
25868: IFFALSE 25890
// SetClass ( un , rand ( 1 , 4 ) ) ;
25870: LD_VAR 0 1
25874: PPUSH
25875: LD_INT 1
25877: PPUSH
25878: LD_INT 4
25880: PPUSH
25881: CALL_OW 12
25885: PPUSH
25886: CALL_OW 336
25890: GO 25837
25892: POP
25893: POP
// end ;
25894: PPOPN 1
25896: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25897: LD_EXP 67
25901: PUSH
25902: LD_EXP 79
25906: AND
25907: IFFALSE 25986
25909: GO 25911
25911: DISABLE
25912: LD_INT 0
25914: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25915: LD_ADDR_VAR 0 1
25919: PUSH
25920: LD_INT 22
25922: PUSH
25923: LD_OWVAR 2
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: LD_INT 21
25934: PUSH
25935: LD_INT 3
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PPUSH
25946: CALL_OW 69
25950: ST_TO_ADDR
// if not tmp then
25951: LD_VAR 0 1
25955: NOT
25956: IFFALSE 25960
// exit ;
25958: GO 25986
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25960: LD_VAR 0 1
25964: PUSH
25965: LD_INT 1
25967: PPUSH
25968: LD_VAR 0 1
25972: PPUSH
25973: CALL_OW 12
25977: ARRAY
25978: PPUSH
25979: LD_INT 100
25981: PPUSH
25982: CALL_OW 234
// end ;
25986: PPOPN 1
25988: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25989: LD_EXP 67
25993: PUSH
25994: LD_EXP 81
25998: AND
25999: IFFALSE 26097
26001: GO 26003
26003: DISABLE
26004: LD_INT 0
26006: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26007: LD_ADDR_VAR 0 1
26011: PUSH
26012: LD_INT 22
26014: PUSH
26015: LD_OWVAR 2
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PUSH
26024: LD_INT 21
26026: PUSH
26027: LD_INT 1
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PPUSH
26038: CALL_OW 69
26042: ST_TO_ADDR
// if not tmp then
26043: LD_VAR 0 1
26047: NOT
26048: IFFALSE 26052
// exit ;
26050: GO 26097
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26052: LD_VAR 0 1
26056: PUSH
26057: LD_INT 1
26059: PPUSH
26060: LD_VAR 0 1
26064: PPUSH
26065: CALL_OW 12
26069: ARRAY
26070: PPUSH
26071: LD_INT 1
26073: PPUSH
26074: LD_INT 4
26076: PPUSH
26077: CALL_OW 12
26081: PPUSH
26082: LD_INT 3000
26084: PPUSH
26085: LD_INT 9000
26087: PPUSH
26088: CALL_OW 12
26092: PPUSH
26093: CALL_OW 492
// end ;
26097: PPOPN 1
26099: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26100: LD_EXP 67
26104: PUSH
26105: LD_EXP 82
26109: AND
26110: IFFALSE 26130
26112: GO 26114
26114: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26115: LD_INT 1
26117: PPUSH
26118: LD_OWVAR 2
26122: PPUSH
26123: LD_INT 0
26125: PPUSH
26126: CALL_OW 324
26130: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26131: LD_EXP 67
26135: PUSH
26136: LD_EXP 83
26140: AND
26141: IFFALSE 26224
26143: GO 26145
26145: DISABLE
26146: LD_INT 0
26148: PPUSH
26149: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26150: LD_ADDR_VAR 0 2
26154: PUSH
26155: LD_INT 22
26157: PUSH
26158: LD_OWVAR 2
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PUSH
26167: LD_INT 21
26169: PUSH
26170: LD_INT 3
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PPUSH
26181: CALL_OW 69
26185: ST_TO_ADDR
// if not tmp then
26186: LD_VAR 0 2
26190: NOT
26191: IFFALSE 26195
// exit ;
26193: GO 26224
// for i in tmp do
26195: LD_ADDR_VAR 0 1
26199: PUSH
26200: LD_VAR 0 2
26204: PUSH
26205: FOR_IN
26206: IFFALSE 26222
// SetBLevel ( i , 10 ) ;
26208: LD_VAR 0 1
26212: PPUSH
26213: LD_INT 10
26215: PPUSH
26216: CALL_OW 241
26220: GO 26205
26222: POP
26223: POP
// end ;
26224: PPOPN 2
26226: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26227: LD_EXP 67
26231: PUSH
26232: LD_EXP 84
26236: AND
26237: IFFALSE 26348
26239: GO 26241
26241: DISABLE
26242: LD_INT 0
26244: PPUSH
26245: PPUSH
26246: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26247: LD_ADDR_VAR 0 3
26251: PUSH
26252: LD_INT 22
26254: PUSH
26255: LD_OWVAR 2
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: PUSH
26264: LD_INT 25
26266: PUSH
26267: LD_INT 1
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PPUSH
26278: CALL_OW 69
26282: ST_TO_ADDR
// if not tmp then
26283: LD_VAR 0 3
26287: NOT
26288: IFFALSE 26292
// exit ;
26290: GO 26348
// un := tmp [ rand ( 1 , tmp ) ] ;
26292: LD_ADDR_VAR 0 2
26296: PUSH
26297: LD_VAR 0 3
26301: PUSH
26302: LD_INT 1
26304: PPUSH
26305: LD_VAR 0 3
26309: PPUSH
26310: CALL_OW 12
26314: ARRAY
26315: ST_TO_ADDR
// if Crawls ( un ) then
26316: LD_VAR 0 2
26320: PPUSH
26321: CALL_OW 318
26325: IFFALSE 26336
// ComWalk ( un ) ;
26327: LD_VAR 0 2
26331: PPUSH
26332: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26336: LD_VAR 0 2
26340: PPUSH
26341: LD_INT 5
26343: PPUSH
26344: CALL_OW 336
// end ;
26348: PPOPN 3
26350: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
26351: LD_EXP 67
26355: PUSH
26356: LD_EXP 85
26360: AND
26361: PUSH
26362: LD_OWVAR 67
26366: PUSH
26367: LD_INT 3
26369: LESS
26370: AND
26371: IFFALSE 26390
26373: GO 26375
26375: DISABLE
// Difficulty := Difficulty + 1 ;
26376: LD_ADDR_OWVAR 67
26380: PUSH
26381: LD_OWVAR 67
26385: PUSH
26386: LD_INT 1
26388: PLUS
26389: ST_TO_ADDR
26390: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26391: LD_EXP 67
26395: PUSH
26396: LD_EXP 86
26400: AND
26401: IFFALSE 26504
26403: GO 26405
26405: DISABLE
26406: LD_INT 0
26408: PPUSH
// begin for i := 1 to 5 do
26409: LD_ADDR_VAR 0 1
26413: PUSH
26414: DOUBLE
26415: LD_INT 1
26417: DEC
26418: ST_TO_ADDR
26419: LD_INT 5
26421: PUSH
26422: FOR_TO
26423: IFFALSE 26502
// begin uc_nation := nation_nature ;
26425: LD_ADDR_OWVAR 21
26429: PUSH
26430: LD_INT 0
26432: ST_TO_ADDR
// uc_side := 0 ;
26433: LD_ADDR_OWVAR 20
26437: PUSH
26438: LD_INT 0
26440: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26441: LD_ADDR_OWVAR 29
26445: PUSH
26446: LD_INT 12
26448: PUSH
26449: LD_INT 12
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: ST_TO_ADDR
// hc_agressivity := 20 ;
26456: LD_ADDR_OWVAR 35
26460: PUSH
26461: LD_INT 20
26463: ST_TO_ADDR
// hc_class := class_tiger ;
26464: LD_ADDR_OWVAR 28
26468: PUSH
26469: LD_INT 14
26471: ST_TO_ADDR
// hc_gallery :=  ;
26472: LD_ADDR_OWVAR 33
26476: PUSH
26477: LD_STRING 
26479: ST_TO_ADDR
// hc_name :=  ;
26480: LD_ADDR_OWVAR 26
26484: PUSH
26485: LD_STRING 
26487: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26488: CALL_OW 44
26492: PPUSH
26493: LD_INT 0
26495: PPUSH
26496: CALL_OW 51
// end ;
26500: GO 26422
26502: POP
26503: POP
// end ;
26504: PPOPN 1
26506: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26507: LD_EXP 67
26511: PUSH
26512: LD_EXP 87
26516: AND
26517: IFFALSE 26526
26519: GO 26521
26521: DISABLE
// StreamSibBomb ;
26522: CALL 26527 0 0
26526: END
// export function StreamSibBomb ; var i , x , y ; begin
26527: LD_INT 0
26529: PPUSH
26530: PPUSH
26531: PPUSH
26532: PPUSH
// result := false ;
26533: LD_ADDR_VAR 0 1
26537: PUSH
26538: LD_INT 0
26540: ST_TO_ADDR
// for i := 1 to 16 do
26541: LD_ADDR_VAR 0 2
26545: PUSH
26546: DOUBLE
26547: LD_INT 1
26549: DEC
26550: ST_TO_ADDR
26551: LD_INT 16
26553: PUSH
26554: FOR_TO
26555: IFFALSE 26754
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26557: LD_ADDR_VAR 0 3
26561: PUSH
26562: LD_INT 10
26564: PUSH
26565: LD_INT 20
26567: PUSH
26568: LD_INT 30
26570: PUSH
26571: LD_INT 40
26573: PUSH
26574: LD_INT 50
26576: PUSH
26577: LD_INT 60
26579: PUSH
26580: LD_INT 70
26582: PUSH
26583: LD_INT 80
26585: PUSH
26586: LD_INT 90
26588: PUSH
26589: LD_INT 100
26591: PUSH
26592: LD_INT 110
26594: PUSH
26595: LD_INT 120
26597: PUSH
26598: LD_INT 130
26600: PUSH
26601: LD_INT 140
26603: PUSH
26604: LD_INT 150
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 1
26626: PPUSH
26627: LD_INT 15
26629: PPUSH
26630: CALL_OW 12
26634: ARRAY
26635: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26636: LD_ADDR_VAR 0 4
26640: PUSH
26641: LD_INT 10
26643: PUSH
26644: LD_INT 20
26646: PUSH
26647: LD_INT 30
26649: PUSH
26650: LD_INT 40
26652: PUSH
26653: LD_INT 50
26655: PUSH
26656: LD_INT 60
26658: PUSH
26659: LD_INT 70
26661: PUSH
26662: LD_INT 80
26664: PUSH
26665: LD_INT 90
26667: PUSH
26668: LD_INT 100
26670: PUSH
26671: LD_INT 110
26673: PUSH
26674: LD_INT 120
26676: PUSH
26677: LD_INT 130
26679: PUSH
26680: LD_INT 140
26682: PUSH
26683: LD_INT 150
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 1
26705: PPUSH
26706: LD_INT 15
26708: PPUSH
26709: CALL_OW 12
26713: ARRAY
26714: ST_TO_ADDR
// if ValidHex ( x , y ) then
26715: LD_VAR 0 3
26719: PPUSH
26720: LD_VAR 0 4
26724: PPUSH
26725: CALL_OW 488
26729: IFFALSE 26752
// begin result := [ x , y ] ;
26731: LD_ADDR_VAR 0 1
26735: PUSH
26736: LD_VAR 0 3
26740: PUSH
26741: LD_VAR 0 4
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: ST_TO_ADDR
// break ;
26750: GO 26754
// end ; end ;
26752: GO 26554
26754: POP
26755: POP
// if result then
26756: LD_VAR 0 1
26760: IFFALSE 26820
// begin ToLua ( playSibBomb() ) ;
26762: LD_STRING playSibBomb()
26764: PPUSH
26765: CALL_OW 559
// wait ( 0 0$14 ) ;
26769: LD_INT 490
26771: PPUSH
26772: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26776: LD_VAR 0 1
26780: PUSH
26781: LD_INT 1
26783: ARRAY
26784: PPUSH
26785: LD_VAR 0 1
26789: PUSH
26790: LD_INT 2
26792: ARRAY
26793: PPUSH
26794: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26798: LD_VAR 0 1
26802: PUSH
26803: LD_INT 1
26805: ARRAY
26806: PPUSH
26807: LD_VAR 0 1
26811: PUSH
26812: LD_INT 2
26814: ARRAY
26815: PPUSH
26816: CALL_OW 429
// end ; end ;
26820: LD_VAR 0 1
26824: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26825: LD_EXP 67
26829: PUSH
26830: LD_EXP 89
26834: AND
26835: IFFALSE 26847
26837: GO 26839
26839: DISABLE
// YouLost (  ) ;
26840: LD_STRING 
26842: PPUSH
26843: CALL_OW 104
26847: END
// every 0 0$1 trigger StreamModeActive and sFog do
26848: LD_EXP 67
26852: PUSH
26853: LD_EXP 88
26857: AND
26858: IFFALSE 26872
26860: GO 26862
26862: DISABLE
// FogOff ( your_side ) ;
26863: LD_OWVAR 2
26867: PPUSH
26868: CALL_OW 344
26872: END
// every 0 0$1 trigger StreamModeActive and sSun do
26873: LD_EXP 67
26877: PUSH
26878: LD_EXP 90
26882: AND
26883: IFFALSE 26911
26885: GO 26887
26887: DISABLE
// begin solar_recharge_percent := 0 ;
26888: LD_ADDR_OWVAR 79
26892: PUSH
26893: LD_INT 0
26895: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26896: LD_INT 10500
26898: PPUSH
26899: CALL_OW 67
// solar_recharge_percent := 100 ;
26903: LD_ADDR_OWVAR 79
26907: PUSH
26908: LD_INT 100
26910: ST_TO_ADDR
// end ;
26911: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26912: LD_EXP 67
26916: PUSH
26917: LD_EXP 91
26921: AND
26922: IFFALSE 27161
26924: GO 26926
26926: DISABLE
26927: LD_INT 0
26929: PPUSH
26930: PPUSH
26931: PPUSH
// begin tmp := [ ] ;
26932: LD_ADDR_VAR 0 3
26936: PUSH
26937: EMPTY
26938: ST_TO_ADDR
// for i := 1 to 6 do
26939: LD_ADDR_VAR 0 1
26943: PUSH
26944: DOUBLE
26945: LD_INT 1
26947: DEC
26948: ST_TO_ADDR
26949: LD_INT 6
26951: PUSH
26952: FOR_TO
26953: IFFALSE 27058
// begin uc_nation := nation_nature ;
26955: LD_ADDR_OWVAR 21
26959: PUSH
26960: LD_INT 0
26962: ST_TO_ADDR
// uc_side := 0 ;
26963: LD_ADDR_OWVAR 20
26967: PUSH
26968: LD_INT 0
26970: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26971: LD_ADDR_OWVAR 29
26975: PUSH
26976: LD_INT 12
26978: PUSH
26979: LD_INT 12
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: ST_TO_ADDR
// hc_agressivity := 20 ;
26986: LD_ADDR_OWVAR 35
26990: PUSH
26991: LD_INT 20
26993: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26994: LD_ADDR_OWVAR 28
26998: PUSH
26999: LD_INT 17
27001: ST_TO_ADDR
// hc_gallery :=  ;
27002: LD_ADDR_OWVAR 33
27006: PUSH
27007: LD_STRING 
27009: ST_TO_ADDR
// hc_name :=  ;
27010: LD_ADDR_OWVAR 26
27014: PUSH
27015: LD_STRING 
27017: ST_TO_ADDR
// un := CreateHuman ;
27018: LD_ADDR_VAR 0 2
27022: PUSH
27023: CALL_OW 44
27027: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27028: LD_VAR 0 2
27032: PPUSH
27033: LD_INT 1
27035: PPUSH
27036: CALL_OW 51
// tmp := tmp ^ un ;
27040: LD_ADDR_VAR 0 3
27044: PUSH
27045: LD_VAR 0 3
27049: PUSH
27050: LD_VAR 0 2
27054: ADD
27055: ST_TO_ADDR
// end ;
27056: GO 26952
27058: POP
27059: POP
// repeat wait ( 0 0$1 ) ;
27060: LD_INT 35
27062: PPUSH
27063: CALL_OW 67
// for un in tmp do
27067: LD_ADDR_VAR 0 2
27071: PUSH
27072: LD_VAR 0 3
27076: PUSH
27077: FOR_IN
27078: IFFALSE 27152
// begin if IsDead ( un ) then
27080: LD_VAR 0 2
27084: PPUSH
27085: CALL_OW 301
27089: IFFALSE 27109
// begin tmp := tmp diff un ;
27091: LD_ADDR_VAR 0 3
27095: PUSH
27096: LD_VAR 0 3
27100: PUSH
27101: LD_VAR 0 2
27105: DIFF
27106: ST_TO_ADDR
// continue ;
27107: GO 27077
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27109: LD_VAR 0 2
27113: PPUSH
27114: LD_INT 3
27116: PUSH
27117: LD_INT 22
27119: PUSH
27120: LD_INT 0
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: PPUSH
27131: CALL_OW 69
27135: PPUSH
27136: LD_VAR 0 2
27140: PPUSH
27141: CALL_OW 74
27145: PPUSH
27146: CALL_OW 115
// end ;
27150: GO 27077
27152: POP
27153: POP
// until not tmp ;
27154: LD_VAR 0 3
27158: NOT
27159: IFFALSE 27060
// end ;
27161: PPOPN 3
27163: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27164: LD_EXP 67
27168: PUSH
27169: LD_EXP 92
27173: AND
27174: IFFALSE 27228
27176: GO 27178
27178: DISABLE
// begin ToLua ( displayTroll(); ) ;
27179: LD_STRING displayTroll();
27181: PPUSH
27182: CALL_OW 559
// wait ( 3 3$00 ) ;
27186: LD_INT 6300
27188: PPUSH
27189: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27193: LD_STRING hideTroll();
27195: PPUSH
27196: CALL_OW 559
// wait ( 1 1$00 ) ;
27200: LD_INT 2100
27202: PPUSH
27203: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27207: LD_STRING displayTroll();
27209: PPUSH
27210: CALL_OW 559
// wait ( 1 1$00 ) ;
27214: LD_INT 2100
27216: PPUSH
27217: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27221: LD_STRING hideTroll();
27223: PPUSH
27224: CALL_OW 559
// end ;
27228: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27229: LD_EXP 67
27233: PUSH
27234: LD_EXP 93
27238: AND
27239: IFFALSE 27302
27241: GO 27243
27243: DISABLE
27244: LD_INT 0
27246: PPUSH
// begin p := 0 ;
27247: LD_ADDR_VAR 0 1
27251: PUSH
27252: LD_INT 0
27254: ST_TO_ADDR
// repeat game_speed := 1 ;
27255: LD_ADDR_OWVAR 65
27259: PUSH
27260: LD_INT 1
27262: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27263: LD_INT 35
27265: PPUSH
27266: CALL_OW 67
// p := p + 1 ;
27270: LD_ADDR_VAR 0 1
27274: PUSH
27275: LD_VAR 0 1
27279: PUSH
27280: LD_INT 1
27282: PLUS
27283: ST_TO_ADDR
// until p >= 60 ;
27284: LD_VAR 0 1
27288: PUSH
27289: LD_INT 60
27291: GREATEREQUAL
27292: IFFALSE 27255
// game_speed := 4 ;
27294: LD_ADDR_OWVAR 65
27298: PUSH
27299: LD_INT 4
27301: ST_TO_ADDR
// end ;
27302: PPOPN 1
27304: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27305: LD_EXP 67
27309: PUSH
27310: LD_EXP 94
27314: AND
27315: IFFALSE 27461
27317: GO 27319
27319: DISABLE
27320: LD_INT 0
27322: PPUSH
27323: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27324: LD_ADDR_VAR 0 1
27328: PUSH
27329: LD_INT 22
27331: PUSH
27332: LD_OWVAR 2
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 2
27343: PUSH
27344: LD_INT 30
27346: PUSH
27347: LD_INT 0
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: PUSH
27354: LD_INT 30
27356: PUSH
27357: LD_INT 1
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: LIST
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: PPUSH
27373: CALL_OW 69
27377: ST_TO_ADDR
// if not depot then
27378: LD_VAR 0 1
27382: NOT
27383: IFFALSE 27387
// exit ;
27385: GO 27461
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27387: LD_ADDR_VAR 0 2
27391: PUSH
27392: LD_VAR 0 1
27396: PUSH
27397: LD_INT 1
27399: PPUSH
27400: LD_VAR 0 1
27404: PPUSH
27405: CALL_OW 12
27409: ARRAY
27410: PPUSH
27411: CALL_OW 274
27415: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27416: LD_VAR 0 2
27420: PPUSH
27421: LD_INT 1
27423: PPUSH
27424: LD_INT 0
27426: PPUSH
27427: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27431: LD_VAR 0 2
27435: PPUSH
27436: LD_INT 2
27438: PPUSH
27439: LD_INT 0
27441: PPUSH
27442: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27446: LD_VAR 0 2
27450: PPUSH
27451: LD_INT 3
27453: PPUSH
27454: LD_INT 0
27456: PPUSH
27457: CALL_OW 277
// end ;
27461: PPOPN 2
27463: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27464: LD_EXP 67
27468: PUSH
27469: LD_EXP 95
27473: AND
27474: IFFALSE 27571
27476: GO 27478
27478: DISABLE
27479: LD_INT 0
27481: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27482: LD_ADDR_VAR 0 1
27486: PUSH
27487: LD_INT 22
27489: PUSH
27490: LD_OWVAR 2
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 21
27501: PUSH
27502: LD_INT 1
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: LD_INT 3
27511: PUSH
27512: LD_INT 23
27514: PUSH
27515: LD_INT 0
27517: PUSH
27518: EMPTY
27519: LIST
27520: LIST
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: LIST
27530: PPUSH
27531: CALL_OW 69
27535: ST_TO_ADDR
// if not tmp then
27536: LD_VAR 0 1
27540: NOT
27541: IFFALSE 27545
// exit ;
27543: GO 27571
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27545: LD_VAR 0 1
27549: PUSH
27550: LD_INT 1
27552: PPUSH
27553: LD_VAR 0 1
27557: PPUSH
27558: CALL_OW 12
27562: ARRAY
27563: PPUSH
27564: LD_INT 200
27566: PPUSH
27567: CALL_OW 234
// end ;
27571: PPOPN 1
27573: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27574: LD_EXP 67
27578: PUSH
27579: LD_EXP 96
27583: AND
27584: IFFALSE 27663
27586: GO 27588
27588: DISABLE
27589: LD_INT 0
27591: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27592: LD_ADDR_VAR 0 1
27596: PUSH
27597: LD_INT 22
27599: PUSH
27600: LD_OWVAR 2
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: LD_INT 21
27611: PUSH
27612: LD_INT 2
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PPUSH
27623: CALL_OW 69
27627: ST_TO_ADDR
// if not tmp then
27628: LD_VAR 0 1
27632: NOT
27633: IFFALSE 27637
// exit ;
27635: GO 27663
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27637: LD_VAR 0 1
27641: PUSH
27642: LD_INT 1
27644: PPUSH
27645: LD_VAR 0 1
27649: PPUSH
27650: CALL_OW 12
27654: ARRAY
27655: PPUSH
27656: LD_INT 60
27658: PPUSH
27659: CALL_OW 234
// end ;
27663: PPOPN 1
27665: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27666: LD_EXP 67
27670: PUSH
27671: LD_EXP 97
27675: AND
27676: IFFALSE 27775
27678: GO 27680
27680: DISABLE
27681: LD_INT 0
27683: PPUSH
27684: PPUSH
// begin enable ;
27685: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27686: LD_ADDR_VAR 0 1
27690: PUSH
27691: LD_INT 22
27693: PUSH
27694: LD_OWVAR 2
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: PUSH
27703: LD_INT 61
27705: PUSH
27706: EMPTY
27707: LIST
27708: PUSH
27709: LD_INT 33
27711: PUSH
27712: LD_INT 2
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: LIST
27723: PPUSH
27724: CALL_OW 69
27728: ST_TO_ADDR
// if not tmp then
27729: LD_VAR 0 1
27733: NOT
27734: IFFALSE 27738
// exit ;
27736: GO 27775
// for i in tmp do
27738: LD_ADDR_VAR 0 2
27742: PUSH
27743: LD_VAR 0 1
27747: PUSH
27748: FOR_IN
27749: IFFALSE 27773
// if IsControledBy ( i ) then
27751: LD_VAR 0 2
27755: PPUSH
27756: CALL_OW 312
27760: IFFALSE 27771
// ComUnlink ( i ) ;
27762: LD_VAR 0 2
27766: PPUSH
27767: CALL_OW 136
27771: GO 27748
27773: POP
27774: POP
// end ;
27775: PPOPN 2
27777: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27778: LD_EXP 67
27782: PUSH
27783: LD_EXP 98
27787: AND
27788: IFFALSE 27928
27790: GO 27792
27792: DISABLE
27793: LD_INT 0
27795: PPUSH
27796: PPUSH
// begin ToLua ( displayPowell(); ) ;
27797: LD_STRING displayPowell();
27799: PPUSH
27800: CALL_OW 559
// uc_side := 0 ;
27804: LD_ADDR_OWVAR 20
27808: PUSH
27809: LD_INT 0
27811: ST_TO_ADDR
// uc_nation := 2 ;
27812: LD_ADDR_OWVAR 21
27816: PUSH
27817: LD_INT 2
27819: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27820: LD_ADDR_OWVAR 37
27824: PUSH
27825: LD_INT 14
27827: ST_TO_ADDR
// vc_engine := engine_siberite ;
27828: LD_ADDR_OWVAR 39
27832: PUSH
27833: LD_INT 3
27835: ST_TO_ADDR
// vc_control := control_apeman ;
27836: LD_ADDR_OWVAR 38
27840: PUSH
27841: LD_INT 5
27843: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27844: LD_ADDR_OWVAR 40
27848: PUSH
27849: LD_INT 29
27851: ST_TO_ADDR
// un := CreateVehicle ;
27852: LD_ADDR_VAR 0 2
27856: PUSH
27857: CALL_OW 45
27861: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27862: LD_VAR 0 2
27866: PPUSH
27867: LD_INT 1
27869: PPUSH
27870: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27874: LD_INT 35
27876: PPUSH
27877: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27881: LD_VAR 0 2
27885: PPUSH
27886: LD_INT 22
27888: PUSH
27889: LD_OWVAR 2
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: PPUSH
27898: CALL_OW 69
27902: PPUSH
27903: LD_VAR 0 2
27907: PPUSH
27908: CALL_OW 74
27912: PPUSH
27913: CALL_OW 115
// until IsDead ( un ) ;
27917: LD_VAR 0 2
27921: PPUSH
27922: CALL_OW 301
27926: IFFALSE 27874
// end ;
27928: PPOPN 2
27930: END
// every 0 0$1 trigger StreamModeActive and sStu do
27931: LD_EXP 67
27935: PUSH
27936: LD_EXP 106
27940: AND
27941: IFFALSE 27957
27943: GO 27945
27945: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27946: LD_STRING displayStucuk();
27948: PPUSH
27949: CALL_OW 559
// ResetFog ;
27953: CALL_OW 335
// end ;
27957: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27958: LD_EXP 67
27962: PUSH
27963: LD_EXP 99
27967: AND
27968: IFFALSE 28109
27970: GO 27972
27972: DISABLE
27973: LD_INT 0
27975: PPUSH
27976: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27977: LD_ADDR_VAR 0 2
27981: PUSH
27982: LD_INT 22
27984: PUSH
27985: LD_OWVAR 2
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: PUSH
27994: LD_INT 21
27996: PUSH
27997: LD_INT 1
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: PPUSH
28008: CALL_OW 69
28012: ST_TO_ADDR
// if not tmp then
28013: LD_VAR 0 2
28017: NOT
28018: IFFALSE 28022
// exit ;
28020: GO 28109
// un := tmp [ rand ( 1 , tmp ) ] ;
28022: LD_ADDR_VAR 0 1
28026: PUSH
28027: LD_VAR 0 2
28031: PUSH
28032: LD_INT 1
28034: PPUSH
28035: LD_VAR 0 2
28039: PPUSH
28040: CALL_OW 12
28044: ARRAY
28045: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28046: LD_VAR 0 1
28050: PPUSH
28051: LD_INT 0
28053: PPUSH
28054: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28058: LD_VAR 0 1
28062: PPUSH
28063: LD_OWVAR 3
28067: PUSH
28068: LD_VAR 0 1
28072: DIFF
28073: PPUSH
28074: LD_VAR 0 1
28078: PPUSH
28079: CALL_OW 74
28083: PPUSH
28084: CALL_OW 115
// wait ( 0 0$20 ) ;
28088: LD_INT 700
28090: PPUSH
28091: CALL_OW 67
// SetSide ( un , your_side ) ;
28095: LD_VAR 0 1
28099: PPUSH
28100: LD_OWVAR 2
28104: PPUSH
28105: CALL_OW 235
// end ;
28109: PPOPN 2
28111: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28112: LD_EXP 67
28116: PUSH
28117: LD_EXP 100
28121: AND
28122: IFFALSE 28228
28124: GO 28126
28126: DISABLE
28127: LD_INT 0
28129: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28130: LD_ADDR_VAR 0 1
28134: PUSH
28135: LD_INT 22
28137: PUSH
28138: LD_OWVAR 2
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: LD_INT 2
28149: PUSH
28150: LD_INT 30
28152: PUSH
28153: LD_INT 0
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: LD_INT 30
28162: PUSH
28163: LD_INT 1
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: LIST
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PPUSH
28179: CALL_OW 69
28183: ST_TO_ADDR
// if not depot then
28184: LD_VAR 0 1
28188: NOT
28189: IFFALSE 28193
// exit ;
28191: GO 28228
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28193: LD_VAR 0 1
28197: PUSH
28198: LD_INT 1
28200: ARRAY
28201: PPUSH
28202: CALL_OW 250
28206: PPUSH
28207: LD_VAR 0 1
28211: PUSH
28212: LD_INT 1
28214: ARRAY
28215: PPUSH
28216: CALL_OW 251
28220: PPUSH
28221: LD_INT 70
28223: PPUSH
28224: CALL_OW 495
// end ;
28228: PPOPN 1
28230: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28231: LD_EXP 67
28235: PUSH
28236: LD_EXP 101
28240: AND
28241: IFFALSE 28452
28243: GO 28245
28245: DISABLE
28246: LD_INT 0
28248: PPUSH
28249: PPUSH
28250: PPUSH
28251: PPUSH
28252: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28253: LD_ADDR_VAR 0 5
28257: PUSH
28258: LD_INT 22
28260: PUSH
28261: LD_OWVAR 2
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: PUSH
28270: LD_INT 21
28272: PUSH
28273: LD_INT 1
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: PPUSH
28284: CALL_OW 69
28288: ST_TO_ADDR
// if not tmp then
28289: LD_VAR 0 5
28293: NOT
28294: IFFALSE 28298
// exit ;
28296: GO 28452
// for i in tmp do
28298: LD_ADDR_VAR 0 1
28302: PUSH
28303: LD_VAR 0 5
28307: PUSH
28308: FOR_IN
28309: IFFALSE 28450
// begin d := rand ( 0 , 5 ) ;
28311: LD_ADDR_VAR 0 4
28315: PUSH
28316: LD_INT 0
28318: PPUSH
28319: LD_INT 5
28321: PPUSH
28322: CALL_OW 12
28326: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28327: LD_ADDR_VAR 0 2
28331: PUSH
28332: LD_VAR 0 1
28336: PPUSH
28337: CALL_OW 250
28341: PPUSH
28342: LD_VAR 0 4
28346: PPUSH
28347: LD_INT 3
28349: PPUSH
28350: LD_INT 12
28352: PPUSH
28353: CALL_OW 12
28357: PPUSH
28358: CALL_OW 272
28362: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28363: LD_ADDR_VAR 0 3
28367: PUSH
28368: LD_VAR 0 1
28372: PPUSH
28373: CALL_OW 251
28377: PPUSH
28378: LD_VAR 0 4
28382: PPUSH
28383: LD_INT 3
28385: PPUSH
28386: LD_INT 12
28388: PPUSH
28389: CALL_OW 12
28393: PPUSH
28394: CALL_OW 273
28398: ST_TO_ADDR
// if ValidHex ( x , y ) then
28399: LD_VAR 0 2
28403: PPUSH
28404: LD_VAR 0 3
28408: PPUSH
28409: CALL_OW 488
28413: IFFALSE 28448
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28415: LD_VAR 0 1
28419: PPUSH
28420: LD_VAR 0 2
28424: PPUSH
28425: LD_VAR 0 3
28429: PPUSH
28430: LD_INT 3
28432: PPUSH
28433: LD_INT 6
28435: PPUSH
28436: CALL_OW 12
28440: PPUSH
28441: LD_INT 1
28443: PPUSH
28444: CALL_OW 483
// end ;
28448: GO 28308
28450: POP
28451: POP
// end ;
28452: PPOPN 5
28454: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28455: LD_EXP 67
28459: PUSH
28460: LD_EXP 102
28464: AND
28465: IFFALSE 28559
28467: GO 28469
28469: DISABLE
28470: LD_INT 0
28472: PPUSH
28473: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28474: LD_ADDR_VAR 0 2
28478: PUSH
28479: LD_INT 22
28481: PUSH
28482: LD_OWVAR 2
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: LD_INT 32
28493: PUSH
28494: LD_INT 1
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: LD_INT 21
28503: PUSH
28504: LD_INT 2
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: LIST
28515: PPUSH
28516: CALL_OW 69
28520: ST_TO_ADDR
// if not tmp then
28521: LD_VAR 0 2
28525: NOT
28526: IFFALSE 28530
// exit ;
28528: GO 28559
// for i in tmp do
28530: LD_ADDR_VAR 0 1
28534: PUSH
28535: LD_VAR 0 2
28539: PUSH
28540: FOR_IN
28541: IFFALSE 28557
// SetFuel ( i , 0 ) ;
28543: LD_VAR 0 1
28547: PPUSH
28548: LD_INT 0
28550: PPUSH
28551: CALL_OW 240
28555: GO 28540
28557: POP
28558: POP
// end ;
28559: PPOPN 2
28561: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28562: LD_EXP 67
28566: PUSH
28567: LD_EXP 103
28571: AND
28572: IFFALSE 28638
28574: GO 28576
28576: DISABLE
28577: LD_INT 0
28579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28580: LD_ADDR_VAR 0 1
28584: PUSH
28585: LD_INT 22
28587: PUSH
28588: LD_OWVAR 2
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: LD_INT 30
28599: PUSH
28600: LD_INT 29
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PPUSH
28611: CALL_OW 69
28615: ST_TO_ADDR
// if not tmp then
28616: LD_VAR 0 1
28620: NOT
28621: IFFALSE 28625
// exit ;
28623: GO 28638
// DestroyUnit ( tmp [ 1 ] ) ;
28625: LD_VAR 0 1
28629: PUSH
28630: LD_INT 1
28632: ARRAY
28633: PPUSH
28634: CALL_OW 65
// end ;
28638: PPOPN 1
28640: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28641: LD_EXP 67
28645: PUSH
28646: LD_EXP 105
28650: AND
28651: IFFALSE 28780
28653: GO 28655
28655: DISABLE
28656: LD_INT 0
28658: PPUSH
// begin uc_side := 0 ;
28659: LD_ADDR_OWVAR 20
28663: PUSH
28664: LD_INT 0
28666: ST_TO_ADDR
// uc_nation := nation_arabian ;
28667: LD_ADDR_OWVAR 21
28671: PUSH
28672: LD_INT 2
28674: ST_TO_ADDR
// hc_gallery :=  ;
28675: LD_ADDR_OWVAR 33
28679: PUSH
28680: LD_STRING 
28682: ST_TO_ADDR
// hc_name :=  ;
28683: LD_ADDR_OWVAR 26
28687: PUSH
28688: LD_STRING 
28690: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28691: LD_INT 1
28693: PPUSH
28694: LD_INT 11
28696: PPUSH
28697: LD_INT 10
28699: PPUSH
28700: CALL_OW 380
// un := CreateHuman ;
28704: LD_ADDR_VAR 0 1
28708: PUSH
28709: CALL_OW 44
28713: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28714: LD_VAR 0 1
28718: PPUSH
28719: LD_INT 1
28721: PPUSH
28722: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28726: LD_INT 35
28728: PPUSH
28729: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28733: LD_VAR 0 1
28737: PPUSH
28738: LD_INT 22
28740: PUSH
28741: LD_OWVAR 2
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PPUSH
28750: CALL_OW 69
28754: PPUSH
28755: LD_VAR 0 1
28759: PPUSH
28760: CALL_OW 74
28764: PPUSH
28765: CALL_OW 115
// until IsDead ( un ) ;
28769: LD_VAR 0 1
28773: PPUSH
28774: CALL_OW 301
28778: IFFALSE 28726
// end ;
28780: PPOPN 1
28782: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28783: LD_EXP 67
28787: PUSH
28788: LD_EXP 107
28792: AND
28793: IFFALSE 28805
28795: GO 28797
28797: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28798: LD_STRING earthquake(getX(game), 0, 32)
28800: PPUSH
28801: CALL_OW 559
28805: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28806: LD_EXP 67
28810: PUSH
28811: LD_EXP 108
28815: AND
28816: IFFALSE 28907
28818: GO 28820
28820: DISABLE
28821: LD_INT 0
28823: PPUSH
// begin enable ;
28824: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28825: LD_ADDR_VAR 0 1
28829: PUSH
28830: LD_INT 22
28832: PUSH
28833: LD_OWVAR 2
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: PUSH
28842: LD_INT 21
28844: PUSH
28845: LD_INT 2
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PUSH
28852: LD_INT 33
28854: PUSH
28855: LD_INT 3
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: LIST
28866: PPUSH
28867: CALL_OW 69
28871: ST_TO_ADDR
// if not tmp then
28872: LD_VAR 0 1
28876: NOT
28877: IFFALSE 28881
// exit ;
28879: GO 28907
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28881: LD_VAR 0 1
28885: PUSH
28886: LD_INT 1
28888: PPUSH
28889: LD_VAR 0 1
28893: PPUSH
28894: CALL_OW 12
28898: ARRAY
28899: PPUSH
28900: LD_INT 1
28902: PPUSH
28903: CALL_OW 234
// end ;
28907: PPOPN 1
28909: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28910: LD_EXP 67
28914: PUSH
28915: LD_EXP 109
28919: AND
28920: IFFALSE 29061
28922: GO 28924
28924: DISABLE
28925: LD_INT 0
28927: PPUSH
28928: PPUSH
28929: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28930: LD_ADDR_VAR 0 3
28934: PUSH
28935: LD_INT 22
28937: PUSH
28938: LD_OWVAR 2
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: LD_INT 25
28949: PUSH
28950: LD_INT 1
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PPUSH
28961: CALL_OW 69
28965: ST_TO_ADDR
// if not tmp then
28966: LD_VAR 0 3
28970: NOT
28971: IFFALSE 28975
// exit ;
28973: GO 29061
// un := tmp [ rand ( 1 , tmp ) ] ;
28975: LD_ADDR_VAR 0 2
28979: PUSH
28980: LD_VAR 0 3
28984: PUSH
28985: LD_INT 1
28987: PPUSH
28988: LD_VAR 0 3
28992: PPUSH
28993: CALL_OW 12
28997: ARRAY
28998: ST_TO_ADDR
// if Crawls ( un ) then
28999: LD_VAR 0 2
29003: PPUSH
29004: CALL_OW 318
29008: IFFALSE 29019
// ComWalk ( un ) ;
29010: LD_VAR 0 2
29014: PPUSH
29015: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29019: LD_VAR 0 2
29023: PPUSH
29024: LD_INT 9
29026: PPUSH
29027: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29031: LD_INT 28
29033: PPUSH
29034: LD_OWVAR 2
29038: PPUSH
29039: LD_INT 2
29041: PPUSH
29042: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29046: LD_INT 29
29048: PPUSH
29049: LD_OWVAR 2
29053: PPUSH
29054: LD_INT 2
29056: PPUSH
29057: CALL_OW 322
// end ;
29061: PPOPN 3
29063: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29064: LD_EXP 67
29068: PUSH
29069: LD_EXP 110
29073: AND
29074: IFFALSE 29185
29076: GO 29078
29078: DISABLE
29079: LD_INT 0
29081: PPUSH
29082: PPUSH
29083: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29084: LD_ADDR_VAR 0 3
29088: PUSH
29089: LD_INT 22
29091: PUSH
29092: LD_OWVAR 2
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: LD_INT 25
29103: PUSH
29104: LD_INT 1
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PPUSH
29115: CALL_OW 69
29119: ST_TO_ADDR
// if not tmp then
29120: LD_VAR 0 3
29124: NOT
29125: IFFALSE 29129
// exit ;
29127: GO 29185
// un := tmp [ rand ( 1 , tmp ) ] ;
29129: LD_ADDR_VAR 0 2
29133: PUSH
29134: LD_VAR 0 3
29138: PUSH
29139: LD_INT 1
29141: PPUSH
29142: LD_VAR 0 3
29146: PPUSH
29147: CALL_OW 12
29151: ARRAY
29152: ST_TO_ADDR
// if Crawls ( un ) then
29153: LD_VAR 0 2
29157: PPUSH
29158: CALL_OW 318
29162: IFFALSE 29173
// ComWalk ( un ) ;
29164: LD_VAR 0 2
29168: PPUSH
29169: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29173: LD_VAR 0 2
29177: PPUSH
29178: LD_INT 8
29180: PPUSH
29181: CALL_OW 336
// end ;
29185: PPOPN 3
29187: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29188: LD_EXP 67
29192: PUSH
29193: LD_EXP 111
29197: AND
29198: IFFALSE 29342
29200: GO 29202
29202: DISABLE
29203: LD_INT 0
29205: PPUSH
29206: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29207: LD_ADDR_VAR 0 2
29211: PUSH
29212: LD_INT 22
29214: PUSH
29215: LD_OWVAR 2
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: LD_INT 21
29226: PUSH
29227: LD_INT 2
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PUSH
29234: LD_INT 2
29236: PUSH
29237: LD_INT 34
29239: PUSH
29240: LD_INT 12
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: LD_INT 34
29249: PUSH
29250: LD_INT 51
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: LD_INT 34
29259: PUSH
29260: LD_INT 32
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: LIST
29277: PPUSH
29278: CALL_OW 69
29282: ST_TO_ADDR
// if not tmp then
29283: LD_VAR 0 2
29287: NOT
29288: IFFALSE 29292
// exit ;
29290: GO 29342
// for i in tmp do
29292: LD_ADDR_VAR 0 1
29296: PUSH
29297: LD_VAR 0 2
29301: PUSH
29302: FOR_IN
29303: IFFALSE 29340
// if GetCargo ( i , mat_artifact ) = 0 then
29305: LD_VAR 0 1
29309: PPUSH
29310: LD_INT 4
29312: PPUSH
29313: CALL_OW 289
29317: PUSH
29318: LD_INT 0
29320: EQUAL
29321: IFFALSE 29338
// SetCargo ( i , mat_siberit , 100 ) ;
29323: LD_VAR 0 1
29327: PPUSH
29328: LD_INT 3
29330: PPUSH
29331: LD_INT 100
29333: PPUSH
29334: CALL_OW 290
29338: GO 29302
29340: POP
29341: POP
// end ;
29342: PPOPN 2
29344: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29345: LD_EXP 67
29349: PUSH
29350: LD_EXP 112
29354: AND
29355: IFFALSE 29538
29357: GO 29359
29359: DISABLE
29360: LD_INT 0
29362: PPUSH
29363: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29364: LD_ADDR_VAR 0 2
29368: PUSH
29369: LD_INT 22
29371: PUSH
29372: LD_OWVAR 2
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: PPUSH
29381: CALL_OW 69
29385: ST_TO_ADDR
// if not tmp then
29386: LD_VAR 0 2
29390: NOT
29391: IFFALSE 29395
// exit ;
29393: GO 29538
// for i := 1 to 2 do
29395: LD_ADDR_VAR 0 1
29399: PUSH
29400: DOUBLE
29401: LD_INT 1
29403: DEC
29404: ST_TO_ADDR
29405: LD_INT 2
29407: PUSH
29408: FOR_TO
29409: IFFALSE 29536
// begin uc_side := your_side ;
29411: LD_ADDR_OWVAR 20
29415: PUSH
29416: LD_OWVAR 2
29420: ST_TO_ADDR
// uc_nation := nation_american ;
29421: LD_ADDR_OWVAR 21
29425: PUSH
29426: LD_INT 1
29428: ST_TO_ADDR
// vc_chassis := us_morphling ;
29429: LD_ADDR_OWVAR 37
29433: PUSH
29434: LD_INT 5
29436: ST_TO_ADDR
// vc_engine := engine_siberite ;
29437: LD_ADDR_OWVAR 39
29441: PUSH
29442: LD_INT 3
29444: ST_TO_ADDR
// vc_control := control_computer ;
29445: LD_ADDR_OWVAR 38
29449: PUSH
29450: LD_INT 3
29452: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29453: LD_ADDR_OWVAR 40
29457: PUSH
29458: LD_INT 10
29460: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29461: LD_VAR 0 2
29465: PUSH
29466: LD_INT 1
29468: ARRAY
29469: PPUSH
29470: CALL_OW 310
29474: NOT
29475: IFFALSE 29522
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29477: CALL_OW 45
29481: PPUSH
29482: LD_VAR 0 2
29486: PUSH
29487: LD_INT 1
29489: ARRAY
29490: PPUSH
29491: CALL_OW 250
29495: PPUSH
29496: LD_VAR 0 2
29500: PUSH
29501: LD_INT 1
29503: ARRAY
29504: PPUSH
29505: CALL_OW 251
29509: PPUSH
29510: LD_INT 12
29512: PPUSH
29513: LD_INT 1
29515: PPUSH
29516: CALL_OW 50
29520: GO 29534
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29522: CALL_OW 45
29526: PPUSH
29527: LD_INT 1
29529: PPUSH
29530: CALL_OW 51
// end ;
29534: GO 29408
29536: POP
29537: POP
// end ;
29538: PPOPN 2
29540: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29541: LD_EXP 67
29545: PUSH
29546: LD_EXP 113
29550: AND
29551: IFFALSE 29773
29553: GO 29555
29555: DISABLE
29556: LD_INT 0
29558: PPUSH
29559: PPUSH
29560: PPUSH
29561: PPUSH
29562: PPUSH
29563: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29564: LD_ADDR_VAR 0 6
29568: PUSH
29569: LD_INT 22
29571: PUSH
29572: LD_OWVAR 2
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: LD_INT 21
29583: PUSH
29584: LD_INT 1
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: LD_INT 3
29593: PUSH
29594: LD_INT 23
29596: PUSH
29597: LD_INT 0
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: LIST
29612: PPUSH
29613: CALL_OW 69
29617: ST_TO_ADDR
// if not tmp then
29618: LD_VAR 0 6
29622: NOT
29623: IFFALSE 29627
// exit ;
29625: GO 29773
// s1 := rand ( 1 , 4 ) ;
29627: LD_ADDR_VAR 0 2
29631: PUSH
29632: LD_INT 1
29634: PPUSH
29635: LD_INT 4
29637: PPUSH
29638: CALL_OW 12
29642: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29643: LD_ADDR_VAR 0 4
29647: PUSH
29648: LD_VAR 0 6
29652: PUSH
29653: LD_INT 1
29655: ARRAY
29656: PPUSH
29657: LD_VAR 0 2
29661: PPUSH
29662: CALL_OW 259
29666: ST_TO_ADDR
// if s1 = 1 then
29667: LD_VAR 0 2
29671: PUSH
29672: LD_INT 1
29674: EQUAL
29675: IFFALSE 29695
// s2 := rand ( 2 , 4 ) else
29677: LD_ADDR_VAR 0 3
29681: PUSH
29682: LD_INT 2
29684: PPUSH
29685: LD_INT 4
29687: PPUSH
29688: CALL_OW 12
29692: ST_TO_ADDR
29693: GO 29703
// s2 := 1 ;
29695: LD_ADDR_VAR 0 3
29699: PUSH
29700: LD_INT 1
29702: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29703: LD_ADDR_VAR 0 5
29707: PUSH
29708: LD_VAR 0 6
29712: PUSH
29713: LD_INT 1
29715: ARRAY
29716: PPUSH
29717: LD_VAR 0 3
29721: PPUSH
29722: CALL_OW 259
29726: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29727: LD_VAR 0 6
29731: PUSH
29732: LD_INT 1
29734: ARRAY
29735: PPUSH
29736: LD_VAR 0 2
29740: PPUSH
29741: LD_VAR 0 5
29745: PPUSH
29746: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29750: LD_VAR 0 6
29754: PUSH
29755: LD_INT 1
29757: ARRAY
29758: PPUSH
29759: LD_VAR 0 3
29763: PPUSH
29764: LD_VAR 0 4
29768: PPUSH
29769: CALL_OW 237
// end ;
29773: PPOPN 6
29775: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29776: LD_EXP 67
29780: PUSH
29781: LD_EXP 114
29785: AND
29786: IFFALSE 29865
29788: GO 29790
29790: DISABLE
29791: LD_INT 0
29793: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29794: LD_ADDR_VAR 0 1
29798: PUSH
29799: LD_INT 22
29801: PUSH
29802: LD_OWVAR 2
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: LD_INT 30
29813: PUSH
29814: LD_INT 3
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: PPUSH
29825: CALL_OW 69
29829: ST_TO_ADDR
// if not tmp then
29830: LD_VAR 0 1
29834: NOT
29835: IFFALSE 29839
// exit ;
29837: GO 29865
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29839: LD_VAR 0 1
29843: PUSH
29844: LD_INT 1
29846: PPUSH
29847: LD_VAR 0 1
29851: PPUSH
29852: CALL_OW 12
29856: ARRAY
29857: PPUSH
29858: LD_INT 1
29860: PPUSH
29861: CALL_OW 234
// end ;
29865: PPOPN 1
29867: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29868: LD_EXP 67
29872: PUSH
29873: LD_EXP 115
29877: AND
29878: IFFALSE 29990
29880: GO 29882
29882: DISABLE
29883: LD_INT 0
29885: PPUSH
29886: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29887: LD_ADDR_VAR 0 2
29891: PUSH
29892: LD_INT 22
29894: PUSH
29895: LD_OWVAR 2
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 2
29906: PUSH
29907: LD_INT 30
29909: PUSH
29910: LD_INT 27
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PUSH
29917: LD_INT 30
29919: PUSH
29920: LD_INT 26
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: LD_INT 30
29929: PUSH
29930: LD_INT 28
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: LIST
29941: LIST
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PPUSH
29947: CALL_OW 69
29951: ST_TO_ADDR
// if not tmp then
29952: LD_VAR 0 2
29956: NOT
29957: IFFALSE 29961
// exit ;
29959: GO 29990
// for i in tmp do
29961: LD_ADDR_VAR 0 1
29965: PUSH
29966: LD_VAR 0 2
29970: PUSH
29971: FOR_IN
29972: IFFALSE 29988
// SetLives ( i , 1 ) ;
29974: LD_VAR 0 1
29978: PPUSH
29979: LD_INT 1
29981: PPUSH
29982: CALL_OW 234
29986: GO 29971
29988: POP
29989: POP
// end ;
29990: PPOPN 2
29992: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29993: LD_EXP 67
29997: PUSH
29998: LD_EXP 116
30002: AND
30003: IFFALSE 30277
30005: GO 30007
30007: DISABLE
30008: LD_INT 0
30010: PPUSH
30011: PPUSH
30012: PPUSH
// begin i := rand ( 1 , 7 ) ;
30013: LD_ADDR_VAR 0 1
30017: PUSH
30018: LD_INT 1
30020: PPUSH
30021: LD_INT 7
30023: PPUSH
30024: CALL_OW 12
30028: ST_TO_ADDR
// case i of 1 :
30029: LD_VAR 0 1
30033: PUSH
30034: LD_INT 1
30036: DOUBLE
30037: EQUAL
30038: IFTRUE 30042
30040: GO 30052
30042: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30043: LD_STRING earthquake(getX(game), 0, 32)
30045: PPUSH
30046: CALL_OW 559
30050: GO 30277
30052: LD_INT 2
30054: DOUBLE
30055: EQUAL
30056: IFTRUE 30060
30058: GO 30074
30060: POP
// begin ToLua ( displayStucuk(); ) ;
30061: LD_STRING displayStucuk();
30063: PPUSH
30064: CALL_OW 559
// ResetFog ;
30068: CALL_OW 335
// end ; 3 :
30072: GO 30277
30074: LD_INT 3
30076: DOUBLE
30077: EQUAL
30078: IFTRUE 30082
30080: GO 30186
30082: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30083: LD_ADDR_VAR 0 2
30087: PUSH
30088: LD_INT 22
30090: PUSH
30091: LD_OWVAR 2
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PUSH
30100: LD_INT 25
30102: PUSH
30103: LD_INT 1
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PPUSH
30114: CALL_OW 69
30118: ST_TO_ADDR
// if not tmp then
30119: LD_VAR 0 2
30123: NOT
30124: IFFALSE 30128
// exit ;
30126: GO 30277
// un := tmp [ rand ( 1 , tmp ) ] ;
30128: LD_ADDR_VAR 0 3
30132: PUSH
30133: LD_VAR 0 2
30137: PUSH
30138: LD_INT 1
30140: PPUSH
30141: LD_VAR 0 2
30145: PPUSH
30146: CALL_OW 12
30150: ARRAY
30151: ST_TO_ADDR
// if Crawls ( un ) then
30152: LD_VAR 0 3
30156: PPUSH
30157: CALL_OW 318
30161: IFFALSE 30172
// ComWalk ( un ) ;
30163: LD_VAR 0 3
30167: PPUSH
30168: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30172: LD_VAR 0 3
30176: PPUSH
30177: LD_INT 8
30179: PPUSH
30180: CALL_OW 336
// end ; 4 :
30184: GO 30277
30186: LD_INT 4
30188: DOUBLE
30189: EQUAL
30190: IFTRUE 30194
30192: GO 30255
30194: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30195: LD_ADDR_VAR 0 2
30199: PUSH
30200: LD_INT 22
30202: PUSH
30203: LD_OWVAR 2
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: PUSH
30212: LD_INT 30
30214: PUSH
30215: LD_INT 29
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PPUSH
30226: CALL_OW 69
30230: ST_TO_ADDR
// if not tmp then
30231: LD_VAR 0 2
30235: NOT
30236: IFFALSE 30240
// exit ;
30238: GO 30277
// DestroyUnit ( tmp [ 1 ] ) ;
30240: LD_VAR 0 2
30244: PUSH
30245: LD_INT 1
30247: ARRAY
30248: PPUSH
30249: CALL_OW 65
// end ; 5 .. 7 :
30253: GO 30277
30255: LD_INT 5
30257: DOUBLE
30258: GREATEREQUAL
30259: IFFALSE 30267
30261: LD_INT 7
30263: DOUBLE
30264: LESSEQUAL
30265: IFTRUE 30269
30267: GO 30276
30269: POP
// StreamSibBomb ; end ;
30270: CALL 26527 0 0
30274: GO 30277
30276: POP
// end ;
30277: PPOPN 3
30279: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30280: LD_EXP 67
30284: PUSH
30285: LD_EXP 117
30289: AND
30290: IFFALSE 30446
30292: GO 30294
30294: DISABLE
30295: LD_INT 0
30297: PPUSH
30298: PPUSH
30299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30300: LD_ADDR_VAR 0 2
30304: PUSH
30305: LD_INT 81
30307: PUSH
30308: LD_OWVAR 2
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: PUSH
30317: LD_INT 2
30319: PUSH
30320: LD_INT 21
30322: PUSH
30323: LD_INT 1
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: LD_INT 21
30332: PUSH
30333: LD_INT 2
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: LIST
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: PPUSH
30349: CALL_OW 69
30353: ST_TO_ADDR
// if not tmp then
30354: LD_VAR 0 2
30358: NOT
30359: IFFALSE 30363
// exit ;
30361: GO 30446
// p := 0 ;
30363: LD_ADDR_VAR 0 3
30367: PUSH
30368: LD_INT 0
30370: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30371: LD_INT 35
30373: PPUSH
30374: CALL_OW 67
// p := p + 1 ;
30378: LD_ADDR_VAR 0 3
30382: PUSH
30383: LD_VAR 0 3
30387: PUSH
30388: LD_INT 1
30390: PLUS
30391: ST_TO_ADDR
// for i in tmp do
30392: LD_ADDR_VAR 0 1
30396: PUSH
30397: LD_VAR 0 2
30401: PUSH
30402: FOR_IN
30403: IFFALSE 30434
// if GetLives ( i ) < 1000 then
30405: LD_VAR 0 1
30409: PPUSH
30410: CALL_OW 256
30414: PUSH
30415: LD_INT 1000
30417: LESS
30418: IFFALSE 30432
// SetLives ( i , 1000 ) ;
30420: LD_VAR 0 1
30424: PPUSH
30425: LD_INT 1000
30427: PPUSH
30428: CALL_OW 234
30432: GO 30402
30434: POP
30435: POP
// until p > 20 ;
30436: LD_VAR 0 3
30440: PUSH
30441: LD_INT 20
30443: GREATER
30444: IFFALSE 30371
// end ;
30446: PPOPN 3
30448: END
// every 0 0$1 trigger StreamModeActive and sTime do
30449: LD_EXP 67
30453: PUSH
30454: LD_EXP 118
30458: AND
30459: IFFALSE 30494
30461: GO 30463
30463: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30464: LD_INT 28
30466: PPUSH
30467: LD_OWVAR 2
30471: PPUSH
30472: LD_INT 2
30474: PPUSH
30475: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30479: LD_INT 30
30481: PPUSH
30482: LD_OWVAR 2
30486: PPUSH
30487: LD_INT 2
30489: PPUSH
30490: CALL_OW 322
// end ;
30494: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30495: LD_EXP 67
30499: PUSH
30500: LD_EXP 119
30504: AND
30505: IFFALSE 30626
30507: GO 30509
30509: DISABLE
30510: LD_INT 0
30512: PPUSH
30513: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30514: LD_ADDR_VAR 0 2
30518: PUSH
30519: LD_INT 22
30521: PUSH
30522: LD_OWVAR 2
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 21
30533: PUSH
30534: LD_INT 1
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: PUSH
30541: LD_INT 3
30543: PUSH
30544: LD_INT 23
30546: PUSH
30547: LD_INT 0
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: LIST
30562: PPUSH
30563: CALL_OW 69
30567: ST_TO_ADDR
// if not tmp then
30568: LD_VAR 0 2
30572: NOT
30573: IFFALSE 30577
// exit ;
30575: GO 30626
// for i in tmp do
30577: LD_ADDR_VAR 0 1
30581: PUSH
30582: LD_VAR 0 2
30586: PUSH
30587: FOR_IN
30588: IFFALSE 30624
// begin if Crawls ( i ) then
30590: LD_VAR 0 1
30594: PPUSH
30595: CALL_OW 318
30599: IFFALSE 30610
// ComWalk ( i ) ;
30601: LD_VAR 0 1
30605: PPUSH
30606: CALL_OW 138
// SetClass ( i , 2 ) ;
30610: LD_VAR 0 1
30614: PPUSH
30615: LD_INT 2
30617: PPUSH
30618: CALL_OW 336
// end ;
30622: GO 30587
30624: POP
30625: POP
// end ;
30626: PPOPN 2
30628: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30629: LD_EXP 67
30633: PUSH
30634: LD_EXP 120
30638: AND
30639: IFFALSE 30920
30641: GO 30643
30643: DISABLE
30644: LD_INT 0
30646: PPUSH
30647: PPUSH
30648: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30649: LD_OWVAR 2
30653: PPUSH
30654: LD_INT 9
30656: PPUSH
30657: LD_INT 1
30659: PPUSH
30660: LD_INT 1
30662: PPUSH
30663: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30667: LD_INT 9
30669: PPUSH
30670: LD_OWVAR 2
30674: PPUSH
30675: CALL_OW 343
// uc_side := 9 ;
30679: LD_ADDR_OWVAR 20
30683: PUSH
30684: LD_INT 9
30686: ST_TO_ADDR
// uc_nation := 2 ;
30687: LD_ADDR_OWVAR 21
30691: PUSH
30692: LD_INT 2
30694: ST_TO_ADDR
// hc_name := Dark Warrior ;
30695: LD_ADDR_OWVAR 26
30699: PUSH
30700: LD_STRING Dark Warrior
30702: ST_TO_ADDR
// hc_gallery :=  ;
30703: LD_ADDR_OWVAR 33
30707: PUSH
30708: LD_STRING 
30710: ST_TO_ADDR
// hc_noskilllimit := true ;
30711: LD_ADDR_OWVAR 76
30715: PUSH
30716: LD_INT 1
30718: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30719: LD_ADDR_OWVAR 31
30723: PUSH
30724: LD_INT 30
30726: PUSH
30727: LD_INT 30
30729: PUSH
30730: LD_INT 30
30732: PUSH
30733: LD_INT 30
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: ST_TO_ADDR
// un := CreateHuman ;
30742: LD_ADDR_VAR 0 3
30746: PUSH
30747: CALL_OW 44
30751: ST_TO_ADDR
// hc_noskilllimit := false ;
30752: LD_ADDR_OWVAR 76
30756: PUSH
30757: LD_INT 0
30759: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30760: LD_VAR 0 3
30764: PPUSH
30765: LD_INT 1
30767: PPUSH
30768: CALL_OW 51
// p := 0 ;
30772: LD_ADDR_VAR 0 2
30776: PUSH
30777: LD_INT 0
30779: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30780: LD_INT 35
30782: PPUSH
30783: CALL_OW 67
// p := p + 1 ;
30787: LD_ADDR_VAR 0 2
30791: PUSH
30792: LD_VAR 0 2
30796: PUSH
30797: LD_INT 1
30799: PLUS
30800: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30801: LD_VAR 0 3
30805: PPUSH
30806: CALL_OW 256
30810: PUSH
30811: LD_INT 1000
30813: LESS
30814: IFFALSE 30828
// SetLives ( un , 1000 ) ;
30816: LD_VAR 0 3
30820: PPUSH
30821: LD_INT 1000
30823: PPUSH
30824: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30828: LD_VAR 0 3
30832: PPUSH
30833: LD_INT 81
30835: PUSH
30836: LD_OWVAR 2
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PUSH
30845: LD_INT 91
30847: PUSH
30848: LD_VAR 0 3
30852: PUSH
30853: LD_INT 30
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: LIST
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PPUSH
30865: CALL_OW 69
30869: PPUSH
30870: LD_VAR 0 3
30874: PPUSH
30875: CALL_OW 74
30879: PPUSH
30880: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
30884: LD_VAR 0 2
30888: PUSH
30889: LD_INT 60
30891: GREATER
30892: PUSH
30893: LD_VAR 0 3
30897: PPUSH
30898: CALL_OW 301
30902: OR
30903: IFFALSE 30780
// if un then
30905: LD_VAR 0 3
30909: IFFALSE 30920
// RemoveUnit ( un ) ;
30911: LD_VAR 0 3
30915: PPUSH
30916: CALL_OW 64
// end ;
30920: PPOPN 3
30922: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30923: LD_INT 0
30925: PPUSH
30926: PPUSH
30927: PPUSH
30928: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30929: LD_ADDR_VAR 0 4
30933: PUSH
30934: LD_INT 22
30936: PUSH
30937: LD_OWVAR 2
30941: PUSH
30942: EMPTY
30943: LIST
30944: LIST
30945: PUSH
30946: LD_INT 2
30948: PUSH
30949: LD_INT 30
30951: PUSH
30952: LD_INT 0
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PUSH
30959: LD_INT 30
30961: PUSH
30962: LD_INT 1
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: LIST
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PPUSH
30978: CALL_OW 69
30982: ST_TO_ADDR
// if not tmp then
30983: LD_VAR 0 4
30987: NOT
30988: IFFALSE 30992
// exit ;
30990: GO 31051
// for i in tmp do
30992: LD_ADDR_VAR 0 2
30996: PUSH
30997: LD_VAR 0 4
31001: PUSH
31002: FOR_IN
31003: IFFALSE 31049
// for j = 1 to 3 do
31005: LD_ADDR_VAR 0 3
31009: PUSH
31010: DOUBLE
31011: LD_INT 1
31013: DEC
31014: ST_TO_ADDR
31015: LD_INT 3
31017: PUSH
31018: FOR_TO
31019: IFFALSE 31045
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31021: LD_VAR 0 2
31025: PPUSH
31026: CALL_OW 274
31030: PPUSH
31031: LD_VAR 0 3
31035: PPUSH
31036: LD_INT 99999
31038: PPUSH
31039: CALL_OW 277
31043: GO 31018
31045: POP
31046: POP
31047: GO 31002
31049: POP
31050: POP
// end ;
31051: LD_VAR 0 1
31055: RET
// export function hHackSetLevel10 ; var i , j ; begin
31056: LD_INT 0
31058: PPUSH
31059: PPUSH
31060: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31061: LD_ADDR_VAR 0 2
31065: PUSH
31066: LD_INT 21
31068: PUSH
31069: LD_INT 1
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PPUSH
31076: CALL_OW 69
31080: PUSH
31081: FOR_IN
31082: IFFALSE 31134
// if IsSelected ( i ) then
31084: LD_VAR 0 2
31088: PPUSH
31089: CALL_OW 306
31093: IFFALSE 31132
// begin for j := 1 to 4 do
31095: LD_ADDR_VAR 0 3
31099: PUSH
31100: DOUBLE
31101: LD_INT 1
31103: DEC
31104: ST_TO_ADDR
31105: LD_INT 4
31107: PUSH
31108: FOR_TO
31109: IFFALSE 31130
// SetSkill ( i , j , 10 ) ;
31111: LD_VAR 0 2
31115: PPUSH
31116: LD_VAR 0 3
31120: PPUSH
31121: LD_INT 10
31123: PPUSH
31124: CALL_OW 237
31128: GO 31108
31130: POP
31131: POP
// end ;
31132: GO 31081
31134: POP
31135: POP
// end ;
31136: LD_VAR 0 1
31140: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31141: LD_INT 0
31143: PPUSH
31144: PPUSH
31145: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31146: LD_ADDR_VAR 0 2
31150: PUSH
31151: LD_INT 22
31153: PUSH
31154: LD_OWVAR 2
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PUSH
31163: LD_INT 21
31165: PUSH
31166: LD_INT 1
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PPUSH
31177: CALL_OW 69
31181: PUSH
31182: FOR_IN
31183: IFFALSE 31224
// begin for j := 1 to 4 do
31185: LD_ADDR_VAR 0 3
31189: PUSH
31190: DOUBLE
31191: LD_INT 1
31193: DEC
31194: ST_TO_ADDR
31195: LD_INT 4
31197: PUSH
31198: FOR_TO
31199: IFFALSE 31220
// SetSkill ( i , j , 10 ) ;
31201: LD_VAR 0 2
31205: PPUSH
31206: LD_VAR 0 3
31210: PPUSH
31211: LD_INT 10
31213: PPUSH
31214: CALL_OW 237
31218: GO 31198
31220: POP
31221: POP
// end ;
31222: GO 31182
31224: POP
31225: POP
// end ;
31226: LD_VAR 0 1
31230: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
31231: LD_INT 0
31233: PPUSH
// uc_side := your_side ;
31234: LD_ADDR_OWVAR 20
31238: PUSH
31239: LD_OWVAR 2
31243: ST_TO_ADDR
// uc_nation := nation ;
31244: LD_ADDR_OWVAR 21
31248: PUSH
31249: LD_VAR 0 1
31253: ST_TO_ADDR
// InitHc ;
31254: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31258: LD_INT 0
31260: PPUSH
31261: LD_VAR 0 2
31265: PPUSH
31266: LD_VAR 0 3
31270: PPUSH
31271: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
31275: CALL_OW 44
31279: PPUSH
31280: LD_INT 1
31282: PPUSH
31283: CALL_OW 51
// end ;
31287: LD_VAR 0 4
31291: RET
// export function hHackSpawnVehicle ; begin
31292: LD_INT 0
31294: PPUSH
// uc_side := your_side ;
31295: LD_ADDR_OWVAR 20
31299: PUSH
31300: LD_OWVAR 2
31304: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
31305: LD_ADDR_OWVAR 21
31309: PUSH
31310: LD_INT 1
31312: PPUSH
31313: LD_INT 3
31315: PPUSH
31316: CALL_OW 12
31320: ST_TO_ADDR
// InitVc ;
31321: CALL_OW 20
// case uc_nation of 1 :
31325: LD_OWVAR 21
31329: PUSH
31330: LD_INT 1
31332: DOUBLE
31333: EQUAL
31334: IFTRUE 31338
31336: GO 31482
31338: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
31339: LD_ADDR_OWVAR 37
31343: PUSH
31344: LD_INT 1
31346: PUSH
31347: LD_INT 2
31349: PUSH
31350: LD_INT 3
31352: PUSH
31353: LD_INT 4
31355: PUSH
31356: LD_INT 5
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: PUSH
31366: LD_INT 1
31368: PPUSH
31369: LD_INT 5
31371: PPUSH
31372: CALL_OW 12
31376: ARRAY
31377: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
31378: LD_ADDR_OWVAR 39
31382: PUSH
31383: LD_INT 1
31385: PPUSH
31386: LD_INT 3
31388: PPUSH
31389: CALL_OW 12
31393: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
31394: LD_ADDR_OWVAR 38
31398: PUSH
31399: LD_INT 1
31401: PUSH
31402: LD_INT 2
31404: PUSH
31405: LD_INT 3
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 1
31415: PPUSH
31416: LD_INT 3
31418: PPUSH
31419: CALL_OW 12
31423: ARRAY
31424: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
31425: LD_ADDR_OWVAR 40
31429: PUSH
31430: LD_INT 2
31432: PUSH
31433: LD_INT 4
31435: PUSH
31436: LD_INT 5
31438: PUSH
31439: LD_INT 3
31441: PUSH
31442: LD_INT 7
31444: PUSH
31445: LD_INT 8
31447: PUSH
31448: LD_INT 9
31450: PUSH
31451: LD_INT 10
31453: PUSH
31454: LD_INT 6
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: PUSH
31468: LD_INT 1
31470: PPUSH
31471: LD_INT 9
31473: PPUSH
31474: CALL_OW 12
31478: ARRAY
31479: ST_TO_ADDR
// end ; 2 :
31480: GO 31747
31482: LD_INT 2
31484: DOUBLE
31485: EQUAL
31486: IFTRUE 31490
31488: GO 31614
31490: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
31491: LD_ADDR_OWVAR 37
31495: PUSH
31496: LD_INT 11
31498: PUSH
31499: LD_INT 12
31501: PUSH
31502: LD_INT 13
31504: PUSH
31505: LD_INT 14
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: LIST
31512: LIST
31513: PUSH
31514: LD_INT 1
31516: PPUSH
31517: LD_INT 4
31519: PPUSH
31520: CALL_OW 12
31524: ARRAY
31525: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
31526: LD_ADDR_OWVAR 39
31530: PUSH
31531: LD_INT 1
31533: PPUSH
31534: LD_INT 3
31536: PPUSH
31537: CALL_OW 12
31541: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
31542: LD_ADDR_OWVAR 38
31546: PUSH
31547: LD_INT 1
31549: PUSH
31550: LD_INT 2
31552: PUSH
31553: LD_INT 5
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 1
31563: PPUSH
31564: LD_INT 3
31566: PPUSH
31567: CALL_OW 12
31571: ARRAY
31572: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
31573: LD_ADDR_OWVAR 40
31577: PUSH
31578: LD_INT 24
31580: PUSH
31581: LD_INT 26
31583: PUSH
31584: LD_INT 27
31586: PUSH
31587: LD_INT 28
31589: PUSH
31590: LD_INT 29
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: PUSH
31600: LD_INT 1
31602: PPUSH
31603: LD_INT 5
31605: PPUSH
31606: CALL_OW 12
31610: ARRAY
31611: ST_TO_ADDR
// end ; 3 :
31612: GO 31747
31614: LD_INT 3
31616: DOUBLE
31617: EQUAL
31618: IFTRUE 31622
31620: GO 31746
31622: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
31623: LD_ADDR_OWVAR 37
31627: PUSH
31628: LD_INT 21
31630: PUSH
31631: LD_INT 23
31633: PUSH
31634: LD_INT 22
31636: PUSH
31637: LD_INT 24
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: PUSH
31646: LD_INT 1
31648: PPUSH
31649: LD_INT 4
31651: PPUSH
31652: CALL_OW 12
31656: ARRAY
31657: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
31658: LD_ADDR_OWVAR 39
31662: PUSH
31663: LD_INT 1
31665: PPUSH
31666: LD_INT 3
31668: PPUSH
31669: CALL_OW 12
31673: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
31674: LD_ADDR_OWVAR 38
31678: PUSH
31679: LD_INT 1
31681: PUSH
31682: LD_INT 3
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: PUSH
31689: LD_INT 1
31691: PPUSH
31692: LD_INT 2
31694: PPUSH
31695: CALL_OW 12
31699: ARRAY
31700: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
31701: LD_ADDR_OWVAR 40
31705: PUSH
31706: LD_INT 42
31708: PUSH
31709: LD_INT 43
31711: PUSH
31712: LD_INT 44
31714: PUSH
31715: LD_INT 46
31717: PUSH
31718: LD_INT 48
31720: PUSH
31721: LD_INT 47
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: PUSH
31732: LD_INT 1
31734: PPUSH
31735: LD_INT 6
31737: PPUSH
31738: CALL_OW 12
31742: ARRAY
31743: ST_TO_ADDR
// end ; end ;
31744: GO 31747
31746: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
31747: CALL_OW 45
31751: PPUSH
31752: LD_INT 1
31754: PPUSH
31755: CALL_OW 51
// end ;
31759: LD_VAR 0 1
31763: RET
// export hInvincible ; every 1 do
31764: GO 31766
31766: DISABLE
// hInvincible := [ ] ;
31767: LD_ADDR_EXP 121
31771: PUSH
31772: EMPTY
31773: ST_TO_ADDR
31774: END
// every 10 do var i ;
31775: GO 31777
31777: DISABLE
31778: LD_INT 0
31780: PPUSH
// begin enable ;
31781: ENABLE
// if not hInvincible then
31782: LD_EXP 121
31786: NOT
31787: IFFALSE 31791
// exit ;
31789: GO 31835
// for i in hInvincible do
31791: LD_ADDR_VAR 0 1
31795: PUSH
31796: LD_EXP 121
31800: PUSH
31801: FOR_IN
31802: IFFALSE 31833
// if GetLives ( i ) < 1000 then
31804: LD_VAR 0 1
31808: PPUSH
31809: CALL_OW 256
31813: PUSH
31814: LD_INT 1000
31816: LESS
31817: IFFALSE 31831
// SetLives ( i , 1000 ) ;
31819: LD_VAR 0 1
31823: PPUSH
31824: LD_INT 1000
31826: PPUSH
31827: CALL_OW 234
31831: GO 31801
31833: POP
31834: POP
// end ;
31835: PPOPN 1
31837: END
// export function hHackInvincible ; var i ; begin
31838: LD_INT 0
31840: PPUSH
31841: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31842: LD_ADDR_VAR 0 2
31846: PUSH
31847: LD_INT 2
31849: PUSH
31850: LD_INT 21
31852: PUSH
31853: LD_INT 1
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 21
31862: PUSH
31863: LD_INT 2
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: LIST
31874: PPUSH
31875: CALL_OW 69
31879: PUSH
31880: FOR_IN
31881: IFFALSE 31942
// if IsSelected ( i ) then
31883: LD_VAR 0 2
31887: PPUSH
31888: CALL_OW 306
31892: IFFALSE 31940
// begin if i in hInvincible then
31894: LD_VAR 0 2
31898: PUSH
31899: LD_EXP 121
31903: IN
31904: IFFALSE 31924
// hInvincible := hInvincible diff i else
31906: LD_ADDR_EXP 121
31910: PUSH
31911: LD_EXP 121
31915: PUSH
31916: LD_VAR 0 2
31920: DIFF
31921: ST_TO_ADDR
31922: GO 31940
// hInvincible := hInvincible union i ;
31924: LD_ADDR_EXP 121
31928: PUSH
31929: LD_EXP 121
31933: PUSH
31934: LD_VAR 0 2
31938: UNION
31939: ST_TO_ADDR
// end ;
31940: GO 31880
31942: POP
31943: POP
// end ;
31944: LD_VAR 0 1
31948: RET
// export function hHackInvisible ; var i , j ; begin
31949: LD_INT 0
31951: PPUSH
31952: PPUSH
31953: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31954: LD_ADDR_VAR 0 2
31958: PUSH
31959: LD_INT 21
31961: PUSH
31962: LD_INT 1
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PPUSH
31969: CALL_OW 69
31973: PUSH
31974: FOR_IN
31975: IFFALSE 31999
// if IsSelected ( i ) then
31977: LD_VAR 0 2
31981: PPUSH
31982: CALL_OW 306
31986: IFFALSE 31997
// ComForceInvisible ( i ) ;
31988: LD_VAR 0 2
31992: PPUSH
31993: CALL_OW 496
31997: GO 31974
31999: POP
32000: POP
// end ;
32001: LD_VAR 0 1
32005: RET
// export function hHackChangeYourSide ; begin
32006: LD_INT 0
32008: PPUSH
// if your_side = 8 then
32009: LD_OWVAR 2
32013: PUSH
32014: LD_INT 8
32016: EQUAL
32017: IFFALSE 32029
// your_side := 0 else
32019: LD_ADDR_OWVAR 2
32023: PUSH
32024: LD_INT 0
32026: ST_TO_ADDR
32027: GO 32043
// your_side := your_side + 1 ;
32029: LD_ADDR_OWVAR 2
32033: PUSH
32034: LD_OWVAR 2
32038: PUSH
32039: LD_INT 1
32041: PLUS
32042: ST_TO_ADDR
// end ;
32043: LD_VAR 0 1
32047: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32048: LD_INT 0
32050: PPUSH
32051: PPUSH
32052: PPUSH
// for i in all_units do
32053: LD_ADDR_VAR 0 2
32057: PUSH
32058: LD_OWVAR 3
32062: PUSH
32063: FOR_IN
32064: IFFALSE 32142
// if IsSelected ( i ) then
32066: LD_VAR 0 2
32070: PPUSH
32071: CALL_OW 306
32075: IFFALSE 32140
// begin j := GetSide ( i ) ;
32077: LD_ADDR_VAR 0 3
32081: PUSH
32082: LD_VAR 0 2
32086: PPUSH
32087: CALL_OW 255
32091: ST_TO_ADDR
// if j = 8 then
32092: LD_VAR 0 3
32096: PUSH
32097: LD_INT 8
32099: EQUAL
32100: IFFALSE 32112
// j := 0 else
32102: LD_ADDR_VAR 0 3
32106: PUSH
32107: LD_INT 0
32109: ST_TO_ADDR
32110: GO 32126
// j := j + 1 ;
32112: LD_ADDR_VAR 0 3
32116: PUSH
32117: LD_VAR 0 3
32121: PUSH
32122: LD_INT 1
32124: PLUS
32125: ST_TO_ADDR
// SetSide ( i , j ) ;
32126: LD_VAR 0 2
32130: PPUSH
32131: LD_VAR 0 3
32135: PPUSH
32136: CALL_OW 235
// end ;
32140: GO 32063
32142: POP
32143: POP
// end ;
32144: LD_VAR 0 1
32148: RET
// export function hHackFog ; begin
32149: LD_INT 0
32151: PPUSH
// FogOff ( true ) ;
32152: LD_INT 1
32154: PPUSH
32155: CALL_OW 344
// end ;
32159: LD_VAR 0 1
32163: RET
// export function hHackApeman ; begin
32164: LD_INT 0
32166: PPUSH
// uc_side := your_side ;
32167: LD_ADDR_OWVAR 20
32171: PUSH
32172: LD_OWVAR 2
32176: ST_TO_ADDR
// uc_nation := 0 ;
32177: LD_ADDR_OWVAR 21
32181: PUSH
32182: LD_INT 0
32184: ST_TO_ADDR
// hc_name :=  ;
32185: LD_ADDR_OWVAR 26
32189: PUSH
32190: LD_STRING 
32192: ST_TO_ADDR
// hc_gallery :=  ;
32193: LD_ADDR_OWVAR 33
32197: PUSH
32198: LD_STRING 
32200: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
32201: LD_ADDR_OWVAR 31
32205: PUSH
32206: LD_INT 0
32208: PUSH
32209: LD_INT 0
32211: PUSH
32212: LD_INT 0
32214: PUSH
32215: LD_INT 0
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: ST_TO_ADDR
// hc_class := class_apeman ;
32224: LD_ADDR_OWVAR 28
32228: PUSH
32229: LD_INT 12
32231: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
32232: CALL_OW 44
32236: PPUSH
32237: LD_INT 1
32239: PPUSH
32240: CALL_OW 51
// end ;
32244: LD_VAR 0 1
32248: RET
// export function hHackBoom ; begin
32249: LD_INT 0
32251: PPUSH
// uc_side := your_side ;
32252: LD_ADDR_OWVAR 20
32256: PUSH
32257: LD_OWVAR 2
32261: ST_TO_ADDR
// uc_nation := 1 ;
32262: LD_ADDR_OWVAR 21
32266: PUSH
32267: LD_INT 1
32269: ST_TO_ADDR
// vc_chassis := us_morphling ;
32270: LD_ADDR_OWVAR 37
32274: PUSH
32275: LD_INT 5
32277: ST_TO_ADDR
// vc_engine := engine_siberite ;
32278: LD_ADDR_OWVAR 39
32282: PUSH
32283: LD_INT 3
32285: ST_TO_ADDR
// vc_control := control_computer ;
32286: LD_ADDR_OWVAR 38
32290: PUSH
32291: LD_INT 3
32293: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
32294: LD_ADDR_OWVAR 40
32298: PUSH
32299: LD_INT 8
32301: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
32302: CALL_OW 45
32306: PPUSH
32307: LD_INT 1
32309: PPUSH
32310: CALL_OW 51
// end ; end_of_file
32314: LD_VAR 0 1
32318: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32319: LD_INT 0
32321: PPUSH
32322: PPUSH
32323: PPUSH
32324: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32325: LD_VAR 0 1
32329: PPUSH
32330: CALL_OW 264
32334: PUSH
32335: LD_EXP 56
32339: EQUAL
32340: IFFALSE 32412
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32342: LD_INT 68
32344: PPUSH
32345: LD_VAR 0 1
32349: PPUSH
32350: CALL_OW 255
32354: PPUSH
32355: CALL_OW 321
32359: PUSH
32360: LD_INT 2
32362: EQUAL
32363: IFFALSE 32375
// eff := 70 else
32365: LD_ADDR_VAR 0 4
32369: PUSH
32370: LD_INT 70
32372: ST_TO_ADDR
32373: GO 32383
// eff := 30 ;
32375: LD_ADDR_VAR 0 4
32379: PUSH
32380: LD_INT 30
32382: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32383: LD_VAR 0 1
32387: PPUSH
32388: CALL_OW 250
32392: PPUSH
32393: LD_VAR 0 1
32397: PPUSH
32398: CALL_OW 251
32402: PPUSH
32403: LD_VAR 0 4
32407: PPUSH
32408: CALL_OW 495
// end ; end ;
32412: LD_VAR 0 2
32416: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32417: LD_INT 0
32419: PPUSH
// end ;
32420: LD_VAR 0 4
32424: RET
// export function SOS_Command ( cmd ) ; begin
32425: LD_INT 0
32427: PPUSH
// end ;
32428: LD_VAR 0 2
32432: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32433: LD_VAR 0 1
32437: PUSH
32438: LD_INT 254
32440: EQUAL
32441: PUSH
32442: LD_VAR 0 2
32446: PPUSH
32447: CALL_OW 264
32451: PUSH
32452: LD_EXP 54
32456: EQUAL
32457: AND
32458: PUSH
32459: LD_VAR 0 3
32463: PPUSH
32464: CALL_OW 263
32468: PUSH
32469: LD_INT 3
32471: EQUAL
32472: AND
32473: IFFALSE 32489
// HackDestroyVehicle ( unit , selectedUnit ) ;
32475: LD_VAR 0 2
32479: PPUSH
32480: LD_VAR 0 3
32484: PPUSH
32485: CALL 33996 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32489: LD_VAR 0 1
32493: PUSH
32494: LD_INT 255
32496: EQUAL
32497: PUSH
32498: LD_VAR 0 2
32502: PPUSH
32503: CALL_OW 264
32507: PUSH
32508: LD_INT 14
32510: PUSH
32511: LD_INT 53
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: IN
32518: AND
32519: PUSH
32520: LD_VAR 0 4
32524: PPUSH
32525: LD_VAR 0 5
32529: PPUSH
32530: CALL_OW 488
32534: AND
32535: IFFALSE 32559
// CutTreeXYR ( unit , x , y , 12 ) ;
32537: LD_VAR 0 2
32541: PPUSH
32542: LD_VAR 0 4
32546: PPUSH
32547: LD_VAR 0 5
32551: PPUSH
32552: LD_INT 12
32554: PPUSH
32555: CALL 32562 0 4
// end ;
32559: PPOPN 5
32561: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32562: LD_INT 0
32564: PPUSH
32565: PPUSH
32566: PPUSH
32567: PPUSH
32568: PPUSH
32569: PPUSH
32570: PPUSH
32571: PPUSH
32572: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
32573: LD_VAR 0 1
32577: NOT
32578: PUSH
32579: LD_VAR 0 2
32583: PPUSH
32584: LD_VAR 0 3
32588: PPUSH
32589: CALL_OW 488
32593: NOT
32594: OR
32595: PUSH
32596: LD_VAR 0 4
32600: NOT
32601: OR
32602: IFFALSE 32606
// exit ;
32604: GO 32946
// list := [ ] ;
32606: LD_ADDR_VAR 0 13
32610: PUSH
32611: EMPTY
32612: ST_TO_ADDR
// if x - r < 0 then
32613: LD_VAR 0 2
32617: PUSH
32618: LD_VAR 0 4
32622: MINUS
32623: PUSH
32624: LD_INT 0
32626: LESS
32627: IFFALSE 32639
// min_x := 0 else
32629: LD_ADDR_VAR 0 7
32633: PUSH
32634: LD_INT 0
32636: ST_TO_ADDR
32637: GO 32655
// min_x := x - r ;
32639: LD_ADDR_VAR 0 7
32643: PUSH
32644: LD_VAR 0 2
32648: PUSH
32649: LD_VAR 0 4
32653: MINUS
32654: ST_TO_ADDR
// if y - r < 0 then
32655: LD_VAR 0 3
32659: PUSH
32660: LD_VAR 0 4
32664: MINUS
32665: PUSH
32666: LD_INT 0
32668: LESS
32669: IFFALSE 32681
// min_y := 0 else
32671: LD_ADDR_VAR 0 8
32675: PUSH
32676: LD_INT 0
32678: ST_TO_ADDR
32679: GO 32697
// min_y := y - r ;
32681: LD_ADDR_VAR 0 8
32685: PUSH
32686: LD_VAR 0 3
32690: PUSH
32691: LD_VAR 0 4
32695: MINUS
32696: ST_TO_ADDR
// max_x := x + r ;
32697: LD_ADDR_VAR 0 9
32701: PUSH
32702: LD_VAR 0 2
32706: PUSH
32707: LD_VAR 0 4
32711: PLUS
32712: ST_TO_ADDR
// max_y := y + r ;
32713: LD_ADDR_VAR 0 10
32717: PUSH
32718: LD_VAR 0 3
32722: PUSH
32723: LD_VAR 0 4
32727: PLUS
32728: ST_TO_ADDR
// for _x = min_x to max_x do
32729: LD_ADDR_VAR 0 11
32733: PUSH
32734: DOUBLE
32735: LD_VAR 0 7
32739: DEC
32740: ST_TO_ADDR
32741: LD_VAR 0 9
32745: PUSH
32746: FOR_TO
32747: IFFALSE 32864
// for _y = min_y to max_y do
32749: LD_ADDR_VAR 0 12
32753: PUSH
32754: DOUBLE
32755: LD_VAR 0 8
32759: DEC
32760: ST_TO_ADDR
32761: LD_VAR 0 10
32765: PUSH
32766: FOR_TO
32767: IFFALSE 32860
// begin if not ValidHex ( _x , _y ) then
32769: LD_VAR 0 11
32773: PPUSH
32774: LD_VAR 0 12
32778: PPUSH
32779: CALL_OW 488
32783: NOT
32784: IFFALSE 32788
// continue ;
32786: GO 32766
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32788: LD_VAR 0 11
32792: PPUSH
32793: LD_VAR 0 12
32797: PPUSH
32798: CALL_OW 351
32802: PUSH
32803: LD_VAR 0 11
32807: PPUSH
32808: LD_VAR 0 12
32812: PPUSH
32813: CALL_OW 554
32817: AND
32818: IFFALSE 32858
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
32820: LD_ADDR_VAR 0 13
32824: PUSH
32825: LD_VAR 0 13
32829: PPUSH
32830: LD_VAR 0 13
32834: PUSH
32835: LD_INT 1
32837: PLUS
32838: PPUSH
32839: LD_VAR 0 11
32843: PUSH
32844: LD_VAR 0 12
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PPUSH
32853: CALL_OW 2
32857: ST_TO_ADDR
// end ;
32858: GO 32766
32860: POP
32861: POP
32862: GO 32746
32864: POP
32865: POP
// if not list then
32866: LD_VAR 0 13
32870: NOT
32871: IFFALSE 32875
// exit ;
32873: GO 32946
// for i in list do
32875: LD_ADDR_VAR 0 6
32879: PUSH
32880: LD_VAR 0 13
32884: PUSH
32885: FOR_IN
32886: IFFALSE 32944
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
32888: LD_VAR 0 1
32892: PPUSH
32893: LD_STRING M
32895: PUSH
32896: LD_VAR 0 6
32900: PUSH
32901: LD_INT 1
32903: ARRAY
32904: PUSH
32905: LD_VAR 0 6
32909: PUSH
32910: LD_INT 2
32912: ARRAY
32913: PUSH
32914: LD_INT 0
32916: PUSH
32917: LD_INT 0
32919: PUSH
32920: LD_INT 0
32922: PUSH
32923: LD_INT 0
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: PUSH
32935: EMPTY
32936: LIST
32937: PPUSH
32938: CALL_OW 447
32942: GO 32885
32944: POP
32945: POP
// end ;
32946: LD_VAR 0 5
32950: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
32951: LD_EXP 122
32955: NOT
32956: IFFALSE 33006
32958: GO 32960
32960: DISABLE
// begin initHack := true ;
32961: LD_ADDR_EXP 122
32965: PUSH
32966: LD_INT 1
32968: ST_TO_ADDR
// hackTanks := [ ] ;
32969: LD_ADDR_EXP 123
32973: PUSH
32974: EMPTY
32975: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
32976: LD_ADDR_EXP 124
32980: PUSH
32981: EMPTY
32982: ST_TO_ADDR
// hackLimit := 3 ;
32983: LD_ADDR_EXP 125
32987: PUSH
32988: LD_INT 3
32990: ST_TO_ADDR
// hackDist := 12 ;
32991: LD_ADDR_EXP 126
32995: PUSH
32996: LD_INT 12
32998: ST_TO_ADDR
// hackCounter := [ ] ;
32999: LD_ADDR_EXP 127
33003: PUSH
33004: EMPTY
33005: ST_TO_ADDR
// end ;
33006: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33007: LD_EXP 122
33011: PUSH
33012: LD_INT 34
33014: PUSH
33015: LD_EXP 54
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PPUSH
33024: CALL_OW 69
33028: AND
33029: IFFALSE 33284
33031: GO 33033
33033: DISABLE
33034: LD_INT 0
33036: PPUSH
33037: PPUSH
// begin enable ;
33038: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33039: LD_ADDR_VAR 0 1
33043: PUSH
33044: LD_INT 34
33046: PUSH
33047: LD_EXP 54
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PPUSH
33056: CALL_OW 69
33060: PUSH
33061: FOR_IN
33062: IFFALSE 33282
// begin if not i in hackTanks then
33064: LD_VAR 0 1
33068: PUSH
33069: LD_EXP 123
33073: IN
33074: NOT
33075: IFFALSE 33158
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33077: LD_ADDR_EXP 123
33081: PUSH
33082: LD_EXP 123
33086: PPUSH
33087: LD_EXP 123
33091: PUSH
33092: LD_INT 1
33094: PLUS
33095: PPUSH
33096: LD_VAR 0 1
33100: PPUSH
33101: CALL_OW 1
33105: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33106: LD_ADDR_EXP 124
33110: PUSH
33111: LD_EXP 124
33115: PPUSH
33116: LD_EXP 124
33120: PUSH
33121: LD_INT 1
33123: PLUS
33124: PPUSH
33125: EMPTY
33126: PPUSH
33127: CALL_OW 1
33131: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33132: LD_ADDR_EXP 127
33136: PUSH
33137: LD_EXP 127
33141: PPUSH
33142: LD_EXP 127
33146: PUSH
33147: LD_INT 1
33149: PLUS
33150: PPUSH
33151: EMPTY
33152: PPUSH
33153: CALL_OW 1
33157: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33158: LD_VAR 0 1
33162: PPUSH
33163: CALL_OW 302
33167: NOT
33168: IFFALSE 33181
// begin HackUnlinkAll ( i ) ;
33170: LD_VAR 0 1
33174: PPUSH
33175: CALL 33287 0 1
// continue ;
33179: GO 33061
// end ; HackCheckCapturedStatus ( i ) ;
33181: LD_VAR 0 1
33185: PPUSH
33186: CALL 33730 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33190: LD_ADDR_VAR 0 2
33194: PUSH
33195: LD_INT 81
33197: PUSH
33198: LD_VAR 0 1
33202: PPUSH
33203: CALL_OW 255
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: PUSH
33212: LD_INT 33
33214: PUSH
33215: LD_INT 3
33217: PUSH
33218: EMPTY
33219: LIST
33220: LIST
33221: PUSH
33222: LD_INT 91
33224: PUSH
33225: LD_VAR 0 1
33229: PUSH
33230: LD_EXP 126
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 50
33242: PUSH
33243: EMPTY
33244: LIST
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: PPUSH
33252: CALL_OW 69
33256: ST_TO_ADDR
// if not tmp then
33257: LD_VAR 0 2
33261: NOT
33262: IFFALSE 33266
// continue ;
33264: GO 33061
// HackLink ( i , tmp ) ;
33266: LD_VAR 0 1
33270: PPUSH
33271: LD_VAR 0 2
33275: PPUSH
33276: CALL 33423 0 2
// end ;
33280: GO 33061
33282: POP
33283: POP
// end ;
33284: PPOPN 2
33286: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33287: LD_INT 0
33289: PPUSH
33290: PPUSH
33291: PPUSH
// if not hack in hackTanks then
33292: LD_VAR 0 1
33296: PUSH
33297: LD_EXP 123
33301: IN
33302: NOT
33303: IFFALSE 33307
// exit ;
33305: GO 33418
// index := GetElementIndex ( hackTanks , hack ) ;
33307: LD_ADDR_VAR 0 4
33311: PUSH
33312: LD_EXP 123
33316: PPUSH
33317: LD_VAR 0 1
33321: PPUSH
33322: CALL 38838 0 2
33326: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33327: LD_EXP 124
33331: PUSH
33332: LD_VAR 0 4
33336: ARRAY
33337: IFFALSE 33418
// begin for i in hackTanksCaptured [ index ] do
33339: LD_ADDR_VAR 0 3
33343: PUSH
33344: LD_EXP 124
33348: PUSH
33349: LD_VAR 0 4
33353: ARRAY
33354: PUSH
33355: FOR_IN
33356: IFFALSE 33382
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33358: LD_VAR 0 3
33362: PUSH
33363: LD_INT 1
33365: ARRAY
33366: PPUSH
33367: LD_VAR 0 3
33371: PUSH
33372: LD_INT 2
33374: ARRAY
33375: PPUSH
33376: CALL_OW 235
33380: GO 33355
33382: POP
33383: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33384: LD_ADDR_EXP 124
33388: PUSH
33389: LD_EXP 124
33393: PPUSH
33394: LD_VAR 0 4
33398: PPUSH
33399: EMPTY
33400: PPUSH
33401: CALL_OW 1
33405: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33406: LD_VAR 0 1
33410: PPUSH
33411: LD_INT 0
33413: PPUSH
33414: CALL_OW 505
// end ; end ;
33418: LD_VAR 0 2
33422: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33423: LD_INT 0
33425: PPUSH
33426: PPUSH
33427: PPUSH
// if not hack in hackTanks or not vehicles then
33428: LD_VAR 0 1
33432: PUSH
33433: LD_EXP 123
33437: IN
33438: NOT
33439: PUSH
33440: LD_VAR 0 2
33444: NOT
33445: OR
33446: IFFALSE 33450
// exit ;
33448: GO 33725
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33450: LD_ADDR_VAR 0 2
33454: PUSH
33455: LD_VAR 0 1
33459: PPUSH
33460: LD_VAR 0 2
33464: PPUSH
33465: LD_INT 1
33467: PPUSH
33468: LD_INT 1
33470: PPUSH
33471: CALL 39488 0 4
33475: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
33476: LD_ADDR_VAR 0 5
33480: PUSH
33481: LD_EXP 123
33485: PPUSH
33486: LD_VAR 0 1
33490: PPUSH
33491: CALL 38838 0 2
33495: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33496: LD_EXP 124
33500: PUSH
33501: LD_VAR 0 5
33505: ARRAY
33506: PUSH
33507: LD_EXP 125
33511: LESS
33512: IFFALSE 33701
// begin for i := 1 to vehicles do
33514: LD_ADDR_VAR 0 4
33518: PUSH
33519: DOUBLE
33520: LD_INT 1
33522: DEC
33523: ST_TO_ADDR
33524: LD_VAR 0 2
33528: PUSH
33529: FOR_TO
33530: IFFALSE 33699
// begin if hackTanksCaptured [ index ] = hackLimit then
33532: LD_EXP 124
33536: PUSH
33537: LD_VAR 0 5
33541: ARRAY
33542: PUSH
33543: LD_EXP 125
33547: EQUAL
33548: IFFALSE 33552
// break ;
33550: GO 33699
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33552: LD_ADDR_EXP 127
33556: PUSH
33557: LD_EXP 127
33561: PPUSH
33562: LD_VAR 0 5
33566: PPUSH
33567: LD_EXP 127
33571: PUSH
33572: LD_VAR 0 5
33576: ARRAY
33577: PUSH
33578: LD_INT 1
33580: PLUS
33581: PPUSH
33582: CALL_OW 1
33586: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
33587: LD_ADDR_EXP 124
33591: PUSH
33592: LD_EXP 124
33596: PPUSH
33597: LD_VAR 0 5
33601: PUSH
33602: LD_EXP 124
33606: PUSH
33607: LD_VAR 0 5
33611: ARRAY
33612: PUSH
33613: LD_INT 1
33615: PLUS
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PPUSH
33621: LD_VAR 0 2
33625: PUSH
33626: LD_VAR 0 4
33630: ARRAY
33631: PUSH
33632: LD_VAR 0 2
33636: PUSH
33637: LD_VAR 0 4
33641: ARRAY
33642: PPUSH
33643: CALL_OW 255
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PPUSH
33652: CALL 39053 0 3
33656: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
33657: LD_VAR 0 2
33661: PUSH
33662: LD_VAR 0 4
33666: ARRAY
33667: PPUSH
33668: LD_VAR 0 1
33672: PPUSH
33673: CALL_OW 255
33677: PPUSH
33678: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
33682: LD_VAR 0 2
33686: PUSH
33687: LD_VAR 0 4
33691: ARRAY
33692: PPUSH
33693: CALL_OW 141
// end ;
33697: GO 33529
33699: POP
33700: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33701: LD_VAR 0 1
33705: PPUSH
33706: LD_EXP 124
33710: PUSH
33711: LD_VAR 0 5
33715: ARRAY
33716: PUSH
33717: LD_INT 0
33719: PLUS
33720: PPUSH
33721: CALL_OW 505
// end ;
33725: LD_VAR 0 3
33729: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
33730: LD_INT 0
33732: PPUSH
33733: PPUSH
33734: PPUSH
33735: PPUSH
// if not hack in hackTanks then
33736: LD_VAR 0 1
33740: PUSH
33741: LD_EXP 123
33745: IN
33746: NOT
33747: IFFALSE 33751
// exit ;
33749: GO 33991
// index := GetElementIndex ( hackTanks , hack ) ;
33751: LD_ADDR_VAR 0 4
33755: PUSH
33756: LD_EXP 123
33760: PPUSH
33761: LD_VAR 0 1
33765: PPUSH
33766: CALL 38838 0 2
33770: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
33771: LD_ADDR_VAR 0 3
33775: PUSH
33776: DOUBLE
33777: LD_EXP 124
33781: PUSH
33782: LD_VAR 0 4
33786: ARRAY
33787: INC
33788: ST_TO_ADDR
33789: LD_INT 1
33791: PUSH
33792: FOR_DOWNTO
33793: IFFALSE 33965
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
33795: LD_ADDR_VAR 0 5
33799: PUSH
33800: LD_EXP 124
33804: PUSH
33805: LD_VAR 0 4
33809: ARRAY
33810: PUSH
33811: LD_VAR 0 3
33815: ARRAY
33816: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
33817: LD_VAR 0 5
33821: PUSH
33822: LD_INT 1
33824: ARRAY
33825: PPUSH
33826: CALL_OW 302
33830: NOT
33831: PUSH
33832: LD_VAR 0 5
33836: PUSH
33837: LD_INT 1
33839: ARRAY
33840: PPUSH
33841: CALL_OW 255
33845: PUSH
33846: LD_VAR 0 1
33850: PPUSH
33851: CALL_OW 255
33855: NONEQUAL
33856: OR
33857: IFFALSE 33963
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
33859: LD_VAR 0 5
33863: PUSH
33864: LD_INT 1
33866: ARRAY
33867: PPUSH
33868: CALL_OW 305
33872: PUSH
33873: LD_VAR 0 5
33877: PUSH
33878: LD_INT 1
33880: ARRAY
33881: PPUSH
33882: CALL_OW 255
33886: PUSH
33887: LD_VAR 0 1
33891: PPUSH
33892: CALL_OW 255
33896: EQUAL
33897: AND
33898: IFFALSE 33922
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
33900: LD_VAR 0 5
33904: PUSH
33905: LD_INT 1
33907: ARRAY
33908: PPUSH
33909: LD_VAR 0 5
33913: PUSH
33914: LD_INT 2
33916: ARRAY
33917: PPUSH
33918: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
33922: LD_ADDR_EXP 124
33926: PUSH
33927: LD_EXP 124
33931: PPUSH
33932: LD_VAR 0 4
33936: PPUSH
33937: LD_EXP 124
33941: PUSH
33942: LD_VAR 0 4
33946: ARRAY
33947: PPUSH
33948: LD_VAR 0 3
33952: PPUSH
33953: CALL_OW 3
33957: PPUSH
33958: CALL_OW 1
33962: ST_TO_ADDR
// end ; end ;
33963: GO 33792
33965: POP
33966: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33967: LD_VAR 0 1
33971: PPUSH
33972: LD_EXP 124
33976: PUSH
33977: LD_VAR 0 4
33981: ARRAY
33982: PUSH
33983: LD_INT 0
33985: PLUS
33986: PPUSH
33987: CALL_OW 505
// end ;
33991: LD_VAR 0 2
33995: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
33996: LD_INT 0
33998: PPUSH
33999: PPUSH
34000: PPUSH
34001: PPUSH
// if not hack in hackTanks then
34002: LD_VAR 0 1
34006: PUSH
34007: LD_EXP 123
34011: IN
34012: NOT
34013: IFFALSE 34017
// exit ;
34015: GO 34102
// index := GetElementIndex ( hackTanks , hack ) ;
34017: LD_ADDR_VAR 0 5
34021: PUSH
34022: LD_EXP 123
34026: PPUSH
34027: LD_VAR 0 1
34031: PPUSH
34032: CALL 38838 0 2
34036: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34037: LD_ADDR_VAR 0 4
34041: PUSH
34042: DOUBLE
34043: LD_INT 1
34045: DEC
34046: ST_TO_ADDR
34047: LD_EXP 124
34051: PUSH
34052: LD_VAR 0 5
34056: ARRAY
34057: PUSH
34058: FOR_TO
34059: IFFALSE 34100
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34061: LD_EXP 124
34065: PUSH
34066: LD_VAR 0 5
34070: ARRAY
34071: PUSH
34072: LD_VAR 0 4
34076: ARRAY
34077: PUSH
34078: LD_INT 1
34080: ARRAY
34081: PUSH
34082: LD_VAR 0 2
34086: EQUAL
34087: IFFALSE 34098
// KillUnit ( vehicle ) ;
34089: LD_VAR 0 2
34093: PPUSH
34094: CALL_OW 66
34098: GO 34058
34100: POP
34101: POP
// end ; end_of_file
34102: LD_VAR 0 3
34106: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
34107: LD_INT 0
34109: PPUSH
34110: PPUSH
// if exist_mode then
34111: LD_VAR 0 2
34115: IFFALSE 34140
// unit := CreateCharacter ( prefix & ident ) else
34117: LD_ADDR_VAR 0 5
34121: PUSH
34122: LD_VAR 0 3
34126: PUSH
34127: LD_VAR 0 1
34131: STR
34132: PPUSH
34133: CALL_OW 34
34137: ST_TO_ADDR
34138: GO 34155
// unit := NewCharacter ( ident ) ;
34140: LD_ADDR_VAR 0 5
34144: PUSH
34145: LD_VAR 0 1
34149: PPUSH
34150: CALL_OW 25
34154: ST_TO_ADDR
// result := unit ;
34155: LD_ADDR_VAR 0 4
34159: PUSH
34160: LD_VAR 0 5
34164: ST_TO_ADDR
// end ;
34165: LD_VAR 0 4
34169: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
34170: LD_INT 0
34172: PPUSH
34173: PPUSH
// if not side or not nation then
34174: LD_VAR 0 1
34178: NOT
34179: PUSH
34180: LD_VAR 0 2
34184: NOT
34185: OR
34186: IFFALSE 34190
// exit ;
34188: GO 34954
// case nation of nation_american :
34190: LD_VAR 0 2
34194: PUSH
34195: LD_INT 1
34197: DOUBLE
34198: EQUAL
34199: IFTRUE 34203
34201: GO 34417
34203: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
34204: LD_ADDR_VAR 0 4
34208: PUSH
34209: LD_INT 35
34211: PUSH
34212: LD_INT 45
34214: PUSH
34215: LD_INT 46
34217: PUSH
34218: LD_INT 47
34220: PUSH
34221: LD_INT 82
34223: PUSH
34224: LD_INT 83
34226: PUSH
34227: LD_INT 84
34229: PUSH
34230: LD_INT 85
34232: PUSH
34233: LD_INT 86
34235: PUSH
34236: LD_INT 1
34238: PUSH
34239: LD_INT 2
34241: PUSH
34242: LD_INT 6
34244: PUSH
34245: LD_INT 15
34247: PUSH
34248: LD_INT 16
34250: PUSH
34251: LD_INT 7
34253: PUSH
34254: LD_INT 12
34256: PUSH
34257: LD_INT 13
34259: PUSH
34260: LD_INT 10
34262: PUSH
34263: LD_INT 14
34265: PUSH
34266: LD_INT 20
34268: PUSH
34269: LD_INT 21
34271: PUSH
34272: LD_INT 22
34274: PUSH
34275: LD_INT 25
34277: PUSH
34278: LD_INT 32
34280: PUSH
34281: LD_INT 27
34283: PUSH
34284: LD_INT 36
34286: PUSH
34287: LD_INT 69
34289: PUSH
34290: LD_INT 39
34292: PUSH
34293: LD_INT 34
34295: PUSH
34296: LD_INT 40
34298: PUSH
34299: LD_INT 48
34301: PUSH
34302: LD_INT 49
34304: PUSH
34305: LD_INT 50
34307: PUSH
34308: LD_INT 51
34310: PUSH
34311: LD_INT 52
34313: PUSH
34314: LD_INT 53
34316: PUSH
34317: LD_INT 54
34319: PUSH
34320: LD_INT 55
34322: PUSH
34323: LD_INT 56
34325: PUSH
34326: LD_INT 57
34328: PUSH
34329: LD_INT 58
34331: PUSH
34332: LD_INT 59
34334: PUSH
34335: LD_INT 60
34337: PUSH
34338: LD_INT 61
34340: PUSH
34341: LD_INT 62
34343: PUSH
34344: LD_INT 80
34346: PUSH
34347: LD_INT 82
34349: PUSH
34350: LD_INT 83
34352: PUSH
34353: LD_INT 84
34355: PUSH
34356: LD_INT 85
34358: PUSH
34359: LD_INT 86
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: LIST
34405: LIST
34406: LIST
34407: LIST
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: ST_TO_ADDR
34415: GO 34878
34417: LD_INT 2
34419: DOUBLE
34420: EQUAL
34421: IFTRUE 34425
34423: GO 34647
34425: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
34426: LD_ADDR_VAR 0 4
34430: PUSH
34431: LD_INT 35
34433: PUSH
34434: LD_INT 45
34436: PUSH
34437: LD_INT 46
34439: PUSH
34440: LD_INT 47
34442: PUSH
34443: LD_INT 82
34445: PUSH
34446: LD_INT 83
34448: PUSH
34449: LD_INT 84
34451: PUSH
34452: LD_INT 85
34454: PUSH
34455: LD_INT 87
34457: PUSH
34458: LD_INT 70
34460: PUSH
34461: LD_INT 1
34463: PUSH
34464: LD_INT 11
34466: PUSH
34467: LD_INT 3
34469: PUSH
34470: LD_INT 4
34472: PUSH
34473: LD_INT 5
34475: PUSH
34476: LD_INT 6
34478: PUSH
34479: LD_INT 15
34481: PUSH
34482: LD_INT 18
34484: PUSH
34485: LD_INT 7
34487: PUSH
34488: LD_INT 17
34490: PUSH
34491: LD_INT 8
34493: PUSH
34494: LD_INT 20
34496: PUSH
34497: LD_INT 21
34499: PUSH
34500: LD_INT 22
34502: PUSH
34503: LD_INT 72
34505: PUSH
34506: LD_INT 26
34508: PUSH
34509: LD_INT 69
34511: PUSH
34512: LD_INT 39
34514: PUSH
34515: LD_INT 40
34517: PUSH
34518: LD_INT 41
34520: PUSH
34521: LD_INT 42
34523: PUSH
34524: LD_INT 43
34526: PUSH
34527: LD_INT 48
34529: PUSH
34530: LD_INT 49
34532: PUSH
34533: LD_INT 50
34535: PUSH
34536: LD_INT 51
34538: PUSH
34539: LD_INT 52
34541: PUSH
34542: LD_INT 53
34544: PUSH
34545: LD_INT 54
34547: PUSH
34548: LD_INT 55
34550: PUSH
34551: LD_INT 56
34553: PUSH
34554: LD_INT 60
34556: PUSH
34557: LD_INT 61
34559: PUSH
34560: LD_INT 62
34562: PUSH
34563: LD_INT 66
34565: PUSH
34566: LD_INT 67
34568: PUSH
34569: LD_INT 68
34571: PUSH
34572: LD_INT 81
34574: PUSH
34575: LD_INT 82
34577: PUSH
34578: LD_INT 83
34580: PUSH
34581: LD_INT 84
34583: PUSH
34584: LD_INT 85
34586: PUSH
34587: LD_INT 87
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: LIST
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: LIST
34644: ST_TO_ADDR
34645: GO 34878
34647: LD_INT 3
34649: DOUBLE
34650: EQUAL
34651: IFTRUE 34655
34653: GO 34877
34655: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
34656: LD_ADDR_VAR 0 4
34660: PUSH
34661: LD_INT 46
34663: PUSH
34664: LD_INT 47
34666: PUSH
34667: LD_INT 1
34669: PUSH
34670: LD_INT 2
34672: PUSH
34673: LD_INT 82
34675: PUSH
34676: LD_INT 83
34678: PUSH
34679: LD_INT 84
34681: PUSH
34682: LD_INT 85
34684: PUSH
34685: LD_INT 86
34687: PUSH
34688: LD_INT 11
34690: PUSH
34691: LD_INT 9
34693: PUSH
34694: LD_INT 20
34696: PUSH
34697: LD_INT 19
34699: PUSH
34700: LD_INT 21
34702: PUSH
34703: LD_INT 24
34705: PUSH
34706: LD_INT 22
34708: PUSH
34709: LD_INT 25
34711: PUSH
34712: LD_INT 28
34714: PUSH
34715: LD_INT 29
34717: PUSH
34718: LD_INT 30
34720: PUSH
34721: LD_INT 31
34723: PUSH
34724: LD_INT 37
34726: PUSH
34727: LD_INT 38
34729: PUSH
34730: LD_INT 32
34732: PUSH
34733: LD_INT 27
34735: PUSH
34736: LD_INT 33
34738: PUSH
34739: LD_INT 69
34741: PUSH
34742: LD_INT 39
34744: PUSH
34745: LD_INT 34
34747: PUSH
34748: LD_INT 40
34750: PUSH
34751: LD_INT 71
34753: PUSH
34754: LD_INT 23
34756: PUSH
34757: LD_INT 44
34759: PUSH
34760: LD_INT 48
34762: PUSH
34763: LD_INT 49
34765: PUSH
34766: LD_INT 50
34768: PUSH
34769: LD_INT 51
34771: PUSH
34772: LD_INT 52
34774: PUSH
34775: LD_INT 53
34777: PUSH
34778: LD_INT 54
34780: PUSH
34781: LD_INT 55
34783: PUSH
34784: LD_INT 56
34786: PUSH
34787: LD_INT 57
34789: PUSH
34790: LD_INT 58
34792: PUSH
34793: LD_INT 59
34795: PUSH
34796: LD_INT 63
34798: PUSH
34799: LD_INT 64
34801: PUSH
34802: LD_INT 65
34804: PUSH
34805: LD_INT 82
34807: PUSH
34808: LD_INT 83
34810: PUSH
34811: LD_INT 84
34813: PUSH
34814: LD_INT 85
34816: PUSH
34817: LD_INT 86
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: ST_TO_ADDR
34875: GO 34878
34877: POP
// if state > - 1 and state < 3 then
34878: LD_VAR 0 3
34882: PUSH
34883: LD_INT 1
34885: NEG
34886: GREATER
34887: PUSH
34888: LD_VAR 0 3
34892: PUSH
34893: LD_INT 3
34895: LESS
34896: AND
34897: IFFALSE 34954
// for i in result do
34899: LD_ADDR_VAR 0 5
34903: PUSH
34904: LD_VAR 0 4
34908: PUSH
34909: FOR_IN
34910: IFFALSE 34952
// if GetTech ( i , side ) <> state then
34912: LD_VAR 0 5
34916: PPUSH
34917: LD_VAR 0 1
34921: PPUSH
34922: CALL_OW 321
34926: PUSH
34927: LD_VAR 0 3
34931: NONEQUAL
34932: IFFALSE 34950
// result := result diff i ;
34934: LD_ADDR_VAR 0 4
34938: PUSH
34939: LD_VAR 0 4
34943: PUSH
34944: LD_VAR 0 5
34948: DIFF
34949: ST_TO_ADDR
34950: GO 34909
34952: POP
34953: POP
// end ;
34954: LD_VAR 0 4
34958: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
34959: LD_INT 0
34961: PPUSH
34962: PPUSH
34963: PPUSH
// result := true ;
34964: LD_ADDR_VAR 0 3
34968: PUSH
34969: LD_INT 1
34971: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
34972: LD_ADDR_VAR 0 5
34976: PUSH
34977: LD_VAR 0 2
34981: PPUSH
34982: CALL_OW 480
34986: ST_TO_ADDR
// if not tmp then
34987: LD_VAR 0 5
34991: NOT
34992: IFFALSE 34996
// exit ;
34994: GO 35045
// for i in tmp do
34996: LD_ADDR_VAR 0 4
35000: PUSH
35001: LD_VAR 0 5
35005: PUSH
35006: FOR_IN
35007: IFFALSE 35043
// if GetTech ( i , side ) <> state_researched then
35009: LD_VAR 0 4
35013: PPUSH
35014: LD_VAR 0 1
35018: PPUSH
35019: CALL_OW 321
35023: PUSH
35024: LD_INT 2
35026: NONEQUAL
35027: IFFALSE 35041
// begin result := false ;
35029: LD_ADDR_VAR 0 3
35033: PUSH
35034: LD_INT 0
35036: ST_TO_ADDR
// exit ;
35037: POP
35038: POP
35039: GO 35045
// end ;
35041: GO 35006
35043: POP
35044: POP
// end ;
35045: LD_VAR 0 3
35049: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
35050: LD_INT 0
35052: PPUSH
35053: PPUSH
35054: PPUSH
35055: PPUSH
35056: PPUSH
35057: PPUSH
35058: PPUSH
35059: PPUSH
35060: PPUSH
35061: PPUSH
35062: PPUSH
35063: PPUSH
35064: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
35065: LD_VAR 0 1
35069: NOT
35070: PUSH
35071: LD_VAR 0 1
35075: PPUSH
35076: CALL_OW 257
35080: PUSH
35081: LD_INT 9
35083: NONEQUAL
35084: OR
35085: IFFALSE 35089
// exit ;
35087: GO 35662
// side := GetSide ( unit ) ;
35089: LD_ADDR_VAR 0 9
35093: PUSH
35094: LD_VAR 0 1
35098: PPUSH
35099: CALL_OW 255
35103: ST_TO_ADDR
// tech_space := tech_spacanom ;
35104: LD_ADDR_VAR 0 12
35108: PUSH
35109: LD_INT 29
35111: ST_TO_ADDR
// tech_time := tech_taurad ;
35112: LD_ADDR_VAR 0 13
35116: PUSH
35117: LD_INT 28
35119: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
35120: LD_ADDR_VAR 0 11
35124: PUSH
35125: LD_VAR 0 1
35129: PPUSH
35130: CALL_OW 310
35134: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
35135: LD_VAR 0 11
35139: PPUSH
35140: CALL_OW 247
35144: PUSH
35145: LD_INT 2
35147: EQUAL
35148: IFFALSE 35152
// exit ;
35150: GO 35662
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35152: LD_ADDR_VAR 0 8
35156: PUSH
35157: LD_INT 81
35159: PUSH
35160: LD_VAR 0 9
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 3
35171: PUSH
35172: LD_INT 21
35174: PUSH
35175: LD_INT 3
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PPUSH
35190: CALL_OW 69
35194: ST_TO_ADDR
// if not tmp then
35195: LD_VAR 0 8
35199: NOT
35200: IFFALSE 35204
// exit ;
35202: GO 35662
// if in_unit then
35204: LD_VAR 0 11
35208: IFFALSE 35232
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
35210: LD_ADDR_VAR 0 10
35214: PUSH
35215: LD_VAR 0 8
35219: PPUSH
35220: LD_VAR 0 11
35224: PPUSH
35225: CALL_OW 74
35229: ST_TO_ADDR
35230: GO 35252
// enemy := NearestUnitToUnit ( tmp , unit ) ;
35232: LD_ADDR_VAR 0 10
35236: PUSH
35237: LD_VAR 0 8
35241: PPUSH
35242: LD_VAR 0 1
35246: PPUSH
35247: CALL_OW 74
35251: ST_TO_ADDR
// if not enemy then
35252: LD_VAR 0 10
35256: NOT
35257: IFFALSE 35261
// exit ;
35259: GO 35662
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
35261: LD_VAR 0 11
35265: PUSH
35266: LD_VAR 0 11
35270: PPUSH
35271: LD_VAR 0 10
35275: PPUSH
35276: CALL_OW 296
35280: PUSH
35281: LD_INT 13
35283: GREATER
35284: AND
35285: PUSH
35286: LD_VAR 0 1
35290: PPUSH
35291: LD_VAR 0 10
35295: PPUSH
35296: CALL_OW 296
35300: PUSH
35301: LD_INT 12
35303: GREATER
35304: OR
35305: IFFALSE 35309
// exit ;
35307: GO 35662
// missile := [ 1 ] ;
35309: LD_ADDR_VAR 0 14
35313: PUSH
35314: LD_INT 1
35316: PUSH
35317: EMPTY
35318: LIST
35319: ST_TO_ADDR
// if Researched ( side , tech_space ) then
35320: LD_VAR 0 9
35324: PPUSH
35325: LD_VAR 0 12
35329: PPUSH
35330: CALL_OW 325
35334: IFFALSE 35363
// missile := Insert ( missile , missile + 1 , 2 ) ;
35336: LD_ADDR_VAR 0 14
35340: PUSH
35341: LD_VAR 0 14
35345: PPUSH
35346: LD_VAR 0 14
35350: PUSH
35351: LD_INT 1
35353: PLUS
35354: PPUSH
35355: LD_INT 2
35357: PPUSH
35358: CALL_OW 2
35362: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
35363: LD_VAR 0 9
35367: PPUSH
35368: LD_VAR 0 13
35372: PPUSH
35373: CALL_OW 325
35377: PUSH
35378: LD_VAR 0 10
35382: PPUSH
35383: CALL_OW 255
35387: PPUSH
35388: LD_VAR 0 13
35392: PPUSH
35393: CALL_OW 325
35397: NOT
35398: AND
35399: IFFALSE 35428
// missile := Insert ( missile , missile + 1 , 3 ) ;
35401: LD_ADDR_VAR 0 14
35405: PUSH
35406: LD_VAR 0 14
35410: PPUSH
35411: LD_VAR 0 14
35415: PUSH
35416: LD_INT 1
35418: PLUS
35419: PPUSH
35420: LD_INT 3
35422: PPUSH
35423: CALL_OW 2
35427: ST_TO_ADDR
// if missile < 2 then
35428: LD_VAR 0 14
35432: PUSH
35433: LD_INT 2
35435: LESS
35436: IFFALSE 35440
// exit ;
35438: GO 35662
// x := GetX ( enemy ) ;
35440: LD_ADDR_VAR 0 4
35444: PUSH
35445: LD_VAR 0 10
35449: PPUSH
35450: CALL_OW 250
35454: ST_TO_ADDR
// y := GetY ( enemy ) ;
35455: LD_ADDR_VAR 0 5
35459: PUSH
35460: LD_VAR 0 10
35464: PPUSH
35465: CALL_OW 251
35469: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
35470: LD_ADDR_VAR 0 6
35474: PUSH
35475: LD_VAR 0 4
35479: PUSH
35480: LD_INT 1
35482: NEG
35483: PPUSH
35484: LD_INT 1
35486: PPUSH
35487: CALL_OW 12
35491: PLUS
35492: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
35493: LD_ADDR_VAR 0 7
35497: PUSH
35498: LD_VAR 0 5
35502: PUSH
35503: LD_INT 1
35505: NEG
35506: PPUSH
35507: LD_INT 1
35509: PPUSH
35510: CALL_OW 12
35514: PLUS
35515: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35516: LD_VAR 0 6
35520: PPUSH
35521: LD_VAR 0 7
35525: PPUSH
35526: CALL_OW 488
35530: NOT
35531: IFFALSE 35553
// begin _x := x ;
35533: LD_ADDR_VAR 0 6
35537: PUSH
35538: LD_VAR 0 4
35542: ST_TO_ADDR
// _y := y ;
35543: LD_ADDR_VAR 0 7
35547: PUSH
35548: LD_VAR 0 5
35552: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
35553: LD_ADDR_VAR 0 3
35557: PUSH
35558: LD_INT 1
35560: PPUSH
35561: LD_VAR 0 14
35565: PPUSH
35566: CALL_OW 12
35570: ST_TO_ADDR
// case i of 1 :
35571: LD_VAR 0 3
35575: PUSH
35576: LD_INT 1
35578: DOUBLE
35579: EQUAL
35580: IFTRUE 35584
35582: GO 35601
35584: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
35585: LD_VAR 0 1
35589: PPUSH
35590: LD_VAR 0 10
35594: PPUSH
35595: CALL_OW 115
35599: GO 35662
35601: LD_INT 2
35603: DOUBLE
35604: EQUAL
35605: IFTRUE 35609
35607: GO 35631
35609: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
35610: LD_VAR 0 1
35614: PPUSH
35615: LD_VAR 0 6
35619: PPUSH
35620: LD_VAR 0 7
35624: PPUSH
35625: CALL_OW 153
35629: GO 35662
35631: LD_INT 3
35633: DOUBLE
35634: EQUAL
35635: IFTRUE 35639
35637: GO 35661
35639: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
35640: LD_VAR 0 1
35644: PPUSH
35645: LD_VAR 0 6
35649: PPUSH
35650: LD_VAR 0 7
35654: PPUSH
35655: CALL_OW 154
35659: GO 35662
35661: POP
// end ;
35662: LD_VAR 0 2
35666: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
35667: LD_INT 0
35669: PPUSH
35670: PPUSH
35671: PPUSH
35672: PPUSH
35673: PPUSH
35674: PPUSH
// if not unit or not building then
35675: LD_VAR 0 1
35679: NOT
35680: PUSH
35681: LD_VAR 0 2
35685: NOT
35686: OR
35687: IFFALSE 35691
// exit ;
35689: GO 35849
// x := GetX ( building ) ;
35691: LD_ADDR_VAR 0 5
35695: PUSH
35696: LD_VAR 0 2
35700: PPUSH
35701: CALL_OW 250
35705: ST_TO_ADDR
// y := GetY ( building ) ;
35706: LD_ADDR_VAR 0 6
35710: PUSH
35711: LD_VAR 0 2
35715: PPUSH
35716: CALL_OW 251
35720: ST_TO_ADDR
// for i = 0 to 5 do
35721: LD_ADDR_VAR 0 4
35725: PUSH
35726: DOUBLE
35727: LD_INT 0
35729: DEC
35730: ST_TO_ADDR
35731: LD_INT 5
35733: PUSH
35734: FOR_TO
35735: IFFALSE 35847
// begin _x := ShiftX ( x , i , 3 ) ;
35737: LD_ADDR_VAR 0 7
35741: PUSH
35742: LD_VAR 0 5
35746: PPUSH
35747: LD_VAR 0 4
35751: PPUSH
35752: LD_INT 3
35754: PPUSH
35755: CALL_OW 272
35759: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
35760: LD_ADDR_VAR 0 8
35764: PUSH
35765: LD_VAR 0 6
35769: PPUSH
35770: LD_VAR 0 4
35774: PPUSH
35775: LD_INT 3
35777: PPUSH
35778: CALL_OW 273
35782: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35783: LD_VAR 0 7
35787: PPUSH
35788: LD_VAR 0 8
35792: PPUSH
35793: CALL_OW 488
35797: NOT
35798: IFFALSE 35802
// continue ;
35800: GO 35734
// if HexInfo ( _x , _y ) = 0 then
35802: LD_VAR 0 7
35806: PPUSH
35807: LD_VAR 0 8
35811: PPUSH
35812: CALL_OW 428
35816: PUSH
35817: LD_INT 0
35819: EQUAL
35820: IFFALSE 35845
// begin ComMoveXY ( unit , _x , _y ) ;
35822: LD_VAR 0 1
35826: PPUSH
35827: LD_VAR 0 7
35831: PPUSH
35832: LD_VAR 0 8
35836: PPUSH
35837: CALL_OW 111
// exit ;
35841: POP
35842: POP
35843: GO 35849
// end ; end ;
35845: GO 35734
35847: POP
35848: POP
// end ;
35849: LD_VAR 0 3
35853: RET
// export function ScanBase ( side , base_area ) ; begin
35854: LD_INT 0
35856: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
35857: LD_ADDR_VAR 0 3
35861: PUSH
35862: LD_VAR 0 2
35866: PPUSH
35867: LD_INT 81
35869: PUSH
35870: LD_VAR 0 1
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PPUSH
35879: CALL_OW 70
35883: ST_TO_ADDR
// end ;
35884: LD_VAR 0 3
35888: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
35889: LD_INT 0
35891: PPUSH
35892: PPUSH
35893: PPUSH
35894: PPUSH
// result := false ;
35895: LD_ADDR_VAR 0 2
35899: PUSH
35900: LD_INT 0
35902: ST_TO_ADDR
// side := GetSide ( unit ) ;
35903: LD_ADDR_VAR 0 3
35907: PUSH
35908: LD_VAR 0 1
35912: PPUSH
35913: CALL_OW 255
35917: ST_TO_ADDR
// nat := GetNation ( unit ) ;
35918: LD_ADDR_VAR 0 4
35922: PUSH
35923: LD_VAR 0 1
35927: PPUSH
35928: CALL_OW 248
35932: ST_TO_ADDR
// case nat of 1 :
35933: LD_VAR 0 4
35937: PUSH
35938: LD_INT 1
35940: DOUBLE
35941: EQUAL
35942: IFTRUE 35946
35944: GO 35957
35946: POP
// tech := tech_lassight ; 2 :
35947: LD_ADDR_VAR 0 5
35951: PUSH
35952: LD_INT 12
35954: ST_TO_ADDR
35955: GO 35996
35957: LD_INT 2
35959: DOUBLE
35960: EQUAL
35961: IFTRUE 35965
35963: GO 35976
35965: POP
// tech := tech_mortar ; 3 :
35966: LD_ADDR_VAR 0 5
35970: PUSH
35971: LD_INT 41
35973: ST_TO_ADDR
35974: GO 35996
35976: LD_INT 3
35978: DOUBLE
35979: EQUAL
35980: IFTRUE 35984
35982: GO 35995
35984: POP
// tech := tech_bazooka ; end ;
35985: LD_ADDR_VAR 0 5
35989: PUSH
35990: LD_INT 44
35992: ST_TO_ADDR
35993: GO 35996
35995: POP
// if Researched ( side , tech ) then
35996: LD_VAR 0 3
36000: PPUSH
36001: LD_VAR 0 5
36005: PPUSH
36006: CALL_OW 325
36010: IFFALSE 36037
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
36012: LD_ADDR_VAR 0 2
36016: PUSH
36017: LD_INT 5
36019: PUSH
36020: LD_INT 8
36022: PUSH
36023: LD_INT 9
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: LIST
36030: PUSH
36031: LD_VAR 0 4
36035: ARRAY
36036: ST_TO_ADDR
// end ;
36037: LD_VAR 0 2
36041: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
36042: LD_INT 0
36044: PPUSH
36045: PPUSH
36046: PPUSH
// if not mines then
36047: LD_VAR 0 2
36051: NOT
36052: IFFALSE 36056
// exit ;
36054: GO 36200
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36056: LD_ADDR_VAR 0 5
36060: PUSH
36061: LD_INT 81
36063: PUSH
36064: LD_VAR 0 1
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 3
36075: PUSH
36076: LD_INT 21
36078: PUSH
36079: LD_INT 3
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PPUSH
36094: CALL_OW 69
36098: ST_TO_ADDR
// for i in mines do
36099: LD_ADDR_VAR 0 4
36103: PUSH
36104: LD_VAR 0 2
36108: PUSH
36109: FOR_IN
36110: IFFALSE 36198
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
36112: LD_VAR 0 4
36116: PUSH
36117: LD_INT 1
36119: ARRAY
36120: PPUSH
36121: LD_VAR 0 4
36125: PUSH
36126: LD_INT 2
36128: ARRAY
36129: PPUSH
36130: CALL_OW 458
36134: NOT
36135: IFFALSE 36139
// continue ;
36137: GO 36109
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
36139: LD_VAR 0 4
36143: PUSH
36144: LD_INT 1
36146: ARRAY
36147: PPUSH
36148: LD_VAR 0 4
36152: PUSH
36153: LD_INT 2
36155: ARRAY
36156: PPUSH
36157: CALL_OW 428
36161: PUSH
36162: LD_VAR 0 5
36166: IN
36167: IFFALSE 36196
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
36169: LD_VAR 0 4
36173: PUSH
36174: LD_INT 1
36176: ARRAY
36177: PPUSH
36178: LD_VAR 0 4
36182: PUSH
36183: LD_INT 2
36185: ARRAY
36186: PPUSH
36187: LD_VAR 0 1
36191: PPUSH
36192: CALL_OW 456
// end ;
36196: GO 36109
36198: POP
36199: POP
// end ;
36200: LD_VAR 0 3
36204: RET
// export function Count ( array ) ; var i ; begin
36205: LD_INT 0
36207: PPUSH
36208: PPUSH
// result := 0 ;
36209: LD_ADDR_VAR 0 2
36213: PUSH
36214: LD_INT 0
36216: ST_TO_ADDR
// for i in array do
36217: LD_ADDR_VAR 0 3
36221: PUSH
36222: LD_VAR 0 1
36226: PUSH
36227: FOR_IN
36228: IFFALSE 36252
// if i then
36230: LD_VAR 0 3
36234: IFFALSE 36250
// result := result + 1 ;
36236: LD_ADDR_VAR 0 2
36240: PUSH
36241: LD_VAR 0 2
36245: PUSH
36246: LD_INT 1
36248: PLUS
36249: ST_TO_ADDR
36250: GO 36227
36252: POP
36253: POP
// end ;
36254: LD_VAR 0 2
36258: RET
// export function IsEmpty ( building ) ; begin
36259: LD_INT 0
36261: PPUSH
// if not building then
36262: LD_VAR 0 1
36266: NOT
36267: IFFALSE 36271
// exit ;
36269: GO 36314
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
36271: LD_ADDR_VAR 0 2
36275: PUSH
36276: LD_VAR 0 1
36280: PUSH
36281: LD_INT 22
36283: PUSH
36284: LD_VAR 0 1
36288: PPUSH
36289: CALL_OW 255
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: LD_INT 58
36300: PUSH
36301: EMPTY
36302: LIST
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: PPUSH
36308: CALL_OW 69
36312: IN
36313: ST_TO_ADDR
// end ;
36314: LD_VAR 0 2
36318: RET
// export function IsNotFull ( building ) ; begin
36319: LD_INT 0
36321: PPUSH
// if not building then
36322: LD_VAR 0 1
36326: NOT
36327: IFFALSE 36331
// exit ;
36329: GO 36350
// result := UnitsInside ( building ) < 6 ;
36331: LD_ADDR_VAR 0 2
36335: PUSH
36336: LD_VAR 0 1
36340: PPUSH
36341: CALL_OW 313
36345: PUSH
36346: LD_INT 6
36348: LESS
36349: ST_TO_ADDR
// end ;
36350: LD_VAR 0 2
36354: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
36355: LD_INT 0
36357: PPUSH
36358: PPUSH
36359: PPUSH
36360: PPUSH
// tmp := [ ] ;
36361: LD_ADDR_VAR 0 3
36365: PUSH
36366: EMPTY
36367: ST_TO_ADDR
// list := [ ] ;
36368: LD_ADDR_VAR 0 5
36372: PUSH
36373: EMPTY
36374: ST_TO_ADDR
// for i = 16 to 25 do
36375: LD_ADDR_VAR 0 4
36379: PUSH
36380: DOUBLE
36381: LD_INT 16
36383: DEC
36384: ST_TO_ADDR
36385: LD_INT 25
36387: PUSH
36388: FOR_TO
36389: IFFALSE 36462
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
36391: LD_ADDR_VAR 0 3
36395: PUSH
36396: LD_VAR 0 3
36400: PUSH
36401: LD_INT 22
36403: PUSH
36404: LD_VAR 0 1
36408: PPUSH
36409: CALL_OW 255
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PUSH
36418: LD_INT 91
36420: PUSH
36421: LD_VAR 0 1
36425: PUSH
36426: LD_INT 6
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: LIST
36433: PUSH
36434: LD_INT 30
36436: PUSH
36437: LD_VAR 0 4
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: LIST
36450: PUSH
36451: EMPTY
36452: LIST
36453: PPUSH
36454: CALL_OW 69
36458: ADD
36459: ST_TO_ADDR
36460: GO 36388
36462: POP
36463: POP
// for i = 1 to tmp do
36464: LD_ADDR_VAR 0 4
36468: PUSH
36469: DOUBLE
36470: LD_INT 1
36472: DEC
36473: ST_TO_ADDR
36474: LD_VAR 0 3
36478: PUSH
36479: FOR_TO
36480: IFFALSE 36568
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
36482: LD_ADDR_VAR 0 5
36486: PUSH
36487: LD_VAR 0 5
36491: PUSH
36492: LD_VAR 0 3
36496: PUSH
36497: LD_VAR 0 4
36501: ARRAY
36502: PPUSH
36503: CALL_OW 266
36507: PUSH
36508: LD_VAR 0 3
36512: PUSH
36513: LD_VAR 0 4
36517: ARRAY
36518: PPUSH
36519: CALL_OW 250
36523: PUSH
36524: LD_VAR 0 3
36528: PUSH
36529: LD_VAR 0 4
36533: ARRAY
36534: PPUSH
36535: CALL_OW 251
36539: PUSH
36540: LD_VAR 0 3
36544: PUSH
36545: LD_VAR 0 4
36549: ARRAY
36550: PPUSH
36551: CALL_OW 254
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: PUSH
36562: EMPTY
36563: LIST
36564: ADD
36565: ST_TO_ADDR
36566: GO 36479
36568: POP
36569: POP
// result := list ;
36570: LD_ADDR_VAR 0 2
36574: PUSH
36575: LD_VAR 0 5
36579: ST_TO_ADDR
// end ;
36580: LD_VAR 0 2
36584: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
36585: LD_INT 0
36587: PPUSH
36588: PPUSH
36589: PPUSH
36590: PPUSH
36591: PPUSH
36592: PPUSH
36593: PPUSH
// if not factory then
36594: LD_VAR 0 1
36598: NOT
36599: IFFALSE 36603
// exit ;
36601: GO 37196
// if control = control_apeman then
36603: LD_VAR 0 4
36607: PUSH
36608: LD_INT 5
36610: EQUAL
36611: IFFALSE 36720
// begin tmp := UnitsInside ( factory ) ;
36613: LD_ADDR_VAR 0 8
36617: PUSH
36618: LD_VAR 0 1
36622: PPUSH
36623: CALL_OW 313
36627: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
36628: LD_VAR 0 8
36632: PPUSH
36633: LD_INT 25
36635: PUSH
36636: LD_INT 12
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PPUSH
36643: CALL_OW 72
36647: NOT
36648: IFFALSE 36658
// control := control_manual ;
36650: LD_ADDR_VAR 0 4
36654: PUSH
36655: LD_INT 1
36657: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
36658: LD_ADDR_VAR 0 8
36662: PUSH
36663: LD_VAR 0 1
36667: PPUSH
36668: CALL 36355 0 1
36672: ST_TO_ADDR
// if tmp then
36673: LD_VAR 0 8
36677: IFFALSE 36720
// begin for i in tmp do
36679: LD_ADDR_VAR 0 7
36683: PUSH
36684: LD_VAR 0 8
36688: PUSH
36689: FOR_IN
36690: IFFALSE 36718
// if i [ 1 ] = b_ext_radio then
36692: LD_VAR 0 7
36696: PUSH
36697: LD_INT 1
36699: ARRAY
36700: PUSH
36701: LD_INT 22
36703: EQUAL
36704: IFFALSE 36716
// begin control := control_remote ;
36706: LD_ADDR_VAR 0 4
36710: PUSH
36711: LD_INT 2
36713: ST_TO_ADDR
// break ;
36714: GO 36718
// end ;
36716: GO 36689
36718: POP
36719: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36720: LD_VAR 0 1
36724: PPUSH
36725: LD_VAR 0 2
36729: PPUSH
36730: LD_VAR 0 3
36734: PPUSH
36735: LD_VAR 0 4
36739: PPUSH
36740: LD_VAR 0 5
36744: PPUSH
36745: CALL_OW 448
36749: IFFALSE 36784
// begin result := [ chassis , engine , control , weapon ] ;
36751: LD_ADDR_VAR 0 6
36755: PUSH
36756: LD_VAR 0 2
36760: PUSH
36761: LD_VAR 0 3
36765: PUSH
36766: LD_VAR 0 4
36770: PUSH
36771: LD_VAR 0 5
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: ST_TO_ADDR
// exit ;
36782: GO 37196
// end ; _chassis := AvailableChassisList ( factory ) ;
36784: LD_ADDR_VAR 0 9
36788: PUSH
36789: LD_VAR 0 1
36793: PPUSH
36794: CALL_OW 475
36798: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
36799: LD_ADDR_VAR 0 11
36803: PUSH
36804: LD_VAR 0 1
36808: PPUSH
36809: CALL_OW 476
36813: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
36814: LD_ADDR_VAR 0 12
36818: PUSH
36819: LD_VAR 0 1
36823: PPUSH
36824: CALL_OW 477
36828: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
36829: LD_ADDR_VAR 0 10
36833: PUSH
36834: LD_VAR 0 1
36838: PPUSH
36839: CALL_OW 478
36843: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
36844: LD_VAR 0 9
36848: NOT
36849: PUSH
36850: LD_VAR 0 11
36854: NOT
36855: OR
36856: PUSH
36857: LD_VAR 0 12
36861: NOT
36862: OR
36863: PUSH
36864: LD_VAR 0 10
36868: NOT
36869: OR
36870: IFFALSE 36905
// begin result := [ chassis , engine , control , weapon ] ;
36872: LD_ADDR_VAR 0 6
36876: PUSH
36877: LD_VAR 0 2
36881: PUSH
36882: LD_VAR 0 3
36886: PUSH
36887: LD_VAR 0 4
36891: PUSH
36892: LD_VAR 0 5
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: ST_TO_ADDR
// exit ;
36903: GO 37196
// end ; if not chassis in _chassis then
36905: LD_VAR 0 2
36909: PUSH
36910: LD_VAR 0 9
36914: IN
36915: NOT
36916: IFFALSE 36942
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
36918: LD_ADDR_VAR 0 2
36922: PUSH
36923: LD_VAR 0 9
36927: PUSH
36928: LD_INT 1
36930: PPUSH
36931: LD_VAR 0 9
36935: PPUSH
36936: CALL_OW 12
36940: ARRAY
36941: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
36942: LD_VAR 0 2
36946: PPUSH
36947: LD_VAR 0 3
36951: PPUSH
36952: CALL 37201 0 2
36956: NOT
36957: IFFALSE 37016
// repeat engine := _engine [ 1 ] ;
36959: LD_ADDR_VAR 0 3
36963: PUSH
36964: LD_VAR 0 11
36968: PUSH
36969: LD_INT 1
36971: ARRAY
36972: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
36973: LD_ADDR_VAR 0 11
36977: PUSH
36978: LD_VAR 0 11
36982: PPUSH
36983: LD_INT 1
36985: PPUSH
36986: CALL_OW 3
36990: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
36991: LD_VAR 0 2
36995: PPUSH
36996: LD_VAR 0 3
37000: PPUSH
37001: CALL 37201 0 2
37005: PUSH
37006: LD_VAR 0 11
37010: PUSH
37011: EMPTY
37012: EQUAL
37013: OR
37014: IFFALSE 36959
// if not control in _control then
37016: LD_VAR 0 4
37020: PUSH
37021: LD_VAR 0 12
37025: IN
37026: NOT
37027: IFFALSE 37053
// control := _control [ rand ( 1 , _control ) ] ;
37029: LD_ADDR_VAR 0 4
37033: PUSH
37034: LD_VAR 0 12
37038: PUSH
37039: LD_INT 1
37041: PPUSH
37042: LD_VAR 0 12
37046: PPUSH
37047: CALL_OW 12
37051: ARRAY
37052: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
37053: LD_VAR 0 2
37057: PPUSH
37058: LD_VAR 0 5
37062: PPUSH
37063: CALL 37421 0 2
37067: NOT
37068: IFFALSE 37127
// repeat weapon := _weapon [ 1 ] ;
37070: LD_ADDR_VAR 0 5
37074: PUSH
37075: LD_VAR 0 10
37079: PUSH
37080: LD_INT 1
37082: ARRAY
37083: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
37084: LD_ADDR_VAR 0 10
37088: PUSH
37089: LD_VAR 0 10
37093: PPUSH
37094: LD_INT 1
37096: PPUSH
37097: CALL_OW 3
37101: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
37102: LD_VAR 0 2
37106: PPUSH
37107: LD_VAR 0 5
37111: PPUSH
37112: CALL 37421 0 2
37116: PUSH
37117: LD_VAR 0 10
37121: PUSH
37122: EMPTY
37123: EQUAL
37124: OR
37125: IFFALSE 37070
// result := [ ] ;
37127: LD_ADDR_VAR 0 6
37131: PUSH
37132: EMPTY
37133: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37134: LD_VAR 0 1
37138: PPUSH
37139: LD_VAR 0 2
37143: PPUSH
37144: LD_VAR 0 3
37148: PPUSH
37149: LD_VAR 0 4
37153: PPUSH
37154: LD_VAR 0 5
37158: PPUSH
37159: CALL_OW 448
37163: IFFALSE 37196
// result := [ chassis , engine , control , weapon ] ;
37165: LD_ADDR_VAR 0 6
37169: PUSH
37170: LD_VAR 0 2
37174: PUSH
37175: LD_VAR 0 3
37179: PUSH
37180: LD_VAR 0 4
37184: PUSH
37185: LD_VAR 0 5
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: ST_TO_ADDR
// end ;
37196: LD_VAR 0 6
37200: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
37201: LD_INT 0
37203: PPUSH
// if not chassis or not engine then
37204: LD_VAR 0 1
37208: NOT
37209: PUSH
37210: LD_VAR 0 2
37214: NOT
37215: OR
37216: IFFALSE 37220
// exit ;
37218: GO 37416
// case engine of engine_solar :
37220: LD_VAR 0 2
37224: PUSH
37225: LD_INT 2
37227: DOUBLE
37228: EQUAL
37229: IFTRUE 37233
37231: GO 37271
37233: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
37234: LD_ADDR_VAR 0 3
37238: PUSH
37239: LD_INT 11
37241: PUSH
37242: LD_INT 12
37244: PUSH
37245: LD_INT 13
37247: PUSH
37248: LD_INT 14
37250: PUSH
37251: LD_INT 1
37253: PUSH
37254: LD_INT 2
37256: PUSH
37257: LD_INT 3
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: LIST
37264: LIST
37265: LIST
37266: LIST
37267: LIST
37268: ST_TO_ADDR
37269: GO 37400
37271: LD_INT 1
37273: DOUBLE
37274: EQUAL
37275: IFTRUE 37279
37277: GO 37341
37279: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
37280: LD_ADDR_VAR 0 3
37284: PUSH
37285: LD_INT 11
37287: PUSH
37288: LD_INT 12
37290: PUSH
37291: LD_INT 13
37293: PUSH
37294: LD_INT 14
37296: PUSH
37297: LD_INT 1
37299: PUSH
37300: LD_INT 2
37302: PUSH
37303: LD_INT 3
37305: PUSH
37306: LD_INT 4
37308: PUSH
37309: LD_INT 5
37311: PUSH
37312: LD_INT 21
37314: PUSH
37315: LD_INT 23
37317: PUSH
37318: LD_INT 22
37320: PUSH
37321: LD_INT 24
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: LIST
37328: LIST
37329: LIST
37330: LIST
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: ST_TO_ADDR
37339: GO 37400
37341: LD_INT 3
37343: DOUBLE
37344: EQUAL
37345: IFTRUE 37349
37347: GO 37399
37349: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37350: LD_ADDR_VAR 0 3
37354: PUSH
37355: LD_INT 13
37357: PUSH
37358: LD_INT 14
37360: PUSH
37361: LD_INT 2
37363: PUSH
37364: LD_INT 3
37366: PUSH
37367: LD_INT 4
37369: PUSH
37370: LD_INT 5
37372: PUSH
37373: LD_INT 21
37375: PUSH
37376: LD_INT 22
37378: PUSH
37379: LD_INT 23
37381: PUSH
37382: LD_INT 24
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: ST_TO_ADDR
37397: GO 37400
37399: POP
// result := ( chassis in result ) ;
37400: LD_ADDR_VAR 0 3
37404: PUSH
37405: LD_VAR 0 1
37409: PUSH
37410: LD_VAR 0 3
37414: IN
37415: ST_TO_ADDR
// end ;
37416: LD_VAR 0 3
37420: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
37421: LD_INT 0
37423: PPUSH
// if not chassis or not weapon then
37424: LD_VAR 0 1
37428: NOT
37429: PUSH
37430: LD_VAR 0 2
37434: NOT
37435: OR
37436: IFFALSE 37440
// exit ;
37438: GO 38466
// case weapon of us_machine_gun :
37440: LD_VAR 0 2
37444: PUSH
37445: LD_INT 2
37447: DOUBLE
37448: EQUAL
37449: IFTRUE 37453
37451: GO 37483
37453: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
37454: LD_ADDR_VAR 0 3
37458: PUSH
37459: LD_INT 1
37461: PUSH
37462: LD_INT 2
37464: PUSH
37465: LD_INT 3
37467: PUSH
37468: LD_INT 4
37470: PUSH
37471: LD_INT 5
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: ST_TO_ADDR
37481: GO 38450
37483: LD_INT 3
37485: DOUBLE
37486: EQUAL
37487: IFTRUE 37491
37489: GO 37521
37491: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
37492: LD_ADDR_VAR 0 3
37496: PUSH
37497: LD_INT 1
37499: PUSH
37500: LD_INT 2
37502: PUSH
37503: LD_INT 3
37505: PUSH
37506: LD_INT 4
37508: PUSH
37509: LD_INT 5
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: ST_TO_ADDR
37519: GO 38450
37521: LD_INT 11
37523: DOUBLE
37524: EQUAL
37525: IFTRUE 37529
37527: GO 37559
37529: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
37530: LD_ADDR_VAR 0 3
37534: PUSH
37535: LD_INT 1
37537: PUSH
37538: LD_INT 2
37540: PUSH
37541: LD_INT 3
37543: PUSH
37544: LD_INT 4
37546: PUSH
37547: LD_INT 5
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: ST_TO_ADDR
37557: GO 38450
37559: LD_INT 4
37561: DOUBLE
37562: EQUAL
37563: IFTRUE 37567
37565: GO 37593
37567: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
37568: LD_ADDR_VAR 0 3
37572: PUSH
37573: LD_INT 2
37575: PUSH
37576: LD_INT 3
37578: PUSH
37579: LD_INT 4
37581: PUSH
37582: LD_INT 5
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: ST_TO_ADDR
37591: GO 38450
37593: LD_INT 5
37595: DOUBLE
37596: EQUAL
37597: IFTRUE 37601
37599: GO 37627
37601: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
37602: LD_ADDR_VAR 0 3
37606: PUSH
37607: LD_INT 2
37609: PUSH
37610: LD_INT 3
37612: PUSH
37613: LD_INT 4
37615: PUSH
37616: LD_INT 5
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: ST_TO_ADDR
37625: GO 38450
37627: LD_INT 9
37629: DOUBLE
37630: EQUAL
37631: IFTRUE 37635
37633: GO 37661
37635: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
37636: LD_ADDR_VAR 0 3
37640: PUSH
37641: LD_INT 2
37643: PUSH
37644: LD_INT 3
37646: PUSH
37647: LD_INT 4
37649: PUSH
37650: LD_INT 5
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: ST_TO_ADDR
37659: GO 38450
37661: LD_INT 7
37663: DOUBLE
37664: EQUAL
37665: IFTRUE 37669
37667: GO 37695
37669: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
37670: LD_ADDR_VAR 0 3
37674: PUSH
37675: LD_INT 2
37677: PUSH
37678: LD_INT 3
37680: PUSH
37681: LD_INT 4
37683: PUSH
37684: LD_INT 5
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: ST_TO_ADDR
37693: GO 38450
37695: LD_INT 12
37697: DOUBLE
37698: EQUAL
37699: IFTRUE 37703
37701: GO 37729
37703: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
37704: LD_ADDR_VAR 0 3
37708: PUSH
37709: LD_INT 2
37711: PUSH
37712: LD_INT 3
37714: PUSH
37715: LD_INT 4
37717: PUSH
37718: LD_INT 5
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: ST_TO_ADDR
37727: GO 38450
37729: LD_INT 13
37731: DOUBLE
37732: EQUAL
37733: IFTRUE 37737
37735: GO 37763
37737: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
37738: LD_ADDR_VAR 0 3
37742: PUSH
37743: LD_INT 2
37745: PUSH
37746: LD_INT 3
37748: PUSH
37749: LD_INT 4
37751: PUSH
37752: LD_INT 5
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: LIST
37759: LIST
37760: ST_TO_ADDR
37761: GO 38450
37763: LD_INT 14
37765: DOUBLE
37766: EQUAL
37767: IFTRUE 37771
37769: GO 37789
37771: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
37772: LD_ADDR_VAR 0 3
37776: PUSH
37777: LD_INT 4
37779: PUSH
37780: LD_INT 5
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: ST_TO_ADDR
37787: GO 38450
37789: LD_INT 6
37791: DOUBLE
37792: EQUAL
37793: IFTRUE 37797
37795: GO 37815
37797: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
37798: LD_ADDR_VAR 0 3
37802: PUSH
37803: LD_INT 4
37805: PUSH
37806: LD_INT 5
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: ST_TO_ADDR
37813: GO 38450
37815: LD_INT 10
37817: DOUBLE
37818: EQUAL
37819: IFTRUE 37823
37821: GO 37841
37823: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
37824: LD_ADDR_VAR 0 3
37828: PUSH
37829: LD_INT 4
37831: PUSH
37832: LD_INT 5
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: ST_TO_ADDR
37839: GO 38450
37841: LD_INT 22
37843: DOUBLE
37844: EQUAL
37845: IFTRUE 37849
37847: GO 37875
37849: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
37850: LD_ADDR_VAR 0 3
37854: PUSH
37855: LD_INT 11
37857: PUSH
37858: LD_INT 12
37860: PUSH
37861: LD_INT 13
37863: PUSH
37864: LD_INT 14
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: ST_TO_ADDR
37873: GO 38450
37875: LD_INT 23
37877: DOUBLE
37878: EQUAL
37879: IFTRUE 37883
37881: GO 37909
37883: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
37884: LD_ADDR_VAR 0 3
37888: PUSH
37889: LD_INT 11
37891: PUSH
37892: LD_INT 12
37894: PUSH
37895: LD_INT 13
37897: PUSH
37898: LD_INT 14
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: ST_TO_ADDR
37907: GO 38450
37909: LD_INT 24
37911: DOUBLE
37912: EQUAL
37913: IFTRUE 37917
37915: GO 37943
37917: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
37918: LD_ADDR_VAR 0 3
37922: PUSH
37923: LD_INT 11
37925: PUSH
37926: LD_INT 12
37928: PUSH
37929: LD_INT 13
37931: PUSH
37932: LD_INT 14
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: ST_TO_ADDR
37941: GO 38450
37943: LD_INT 30
37945: DOUBLE
37946: EQUAL
37947: IFTRUE 37951
37949: GO 37977
37951: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
37952: LD_ADDR_VAR 0 3
37956: PUSH
37957: LD_INT 11
37959: PUSH
37960: LD_INT 12
37962: PUSH
37963: LD_INT 13
37965: PUSH
37966: LD_INT 14
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: LIST
37973: LIST
37974: ST_TO_ADDR
37975: GO 38450
37977: LD_INT 25
37979: DOUBLE
37980: EQUAL
37981: IFTRUE 37985
37983: GO 38003
37985: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
37986: LD_ADDR_VAR 0 3
37990: PUSH
37991: LD_INT 13
37993: PUSH
37994: LD_INT 14
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: ST_TO_ADDR
38001: GO 38450
38003: LD_INT 27
38005: DOUBLE
38006: EQUAL
38007: IFTRUE 38011
38009: GO 38029
38011: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
38012: LD_ADDR_VAR 0 3
38016: PUSH
38017: LD_INT 13
38019: PUSH
38020: LD_INT 14
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: ST_TO_ADDR
38027: GO 38450
38029: LD_INT 28
38031: DOUBLE
38032: EQUAL
38033: IFTRUE 38037
38035: GO 38055
38037: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
38038: LD_ADDR_VAR 0 3
38042: PUSH
38043: LD_INT 13
38045: PUSH
38046: LD_INT 14
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: ST_TO_ADDR
38053: GO 38450
38055: LD_INT 29
38057: DOUBLE
38058: EQUAL
38059: IFTRUE 38063
38061: GO 38081
38063: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
38064: LD_ADDR_VAR 0 3
38068: PUSH
38069: LD_INT 13
38071: PUSH
38072: LD_INT 14
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: ST_TO_ADDR
38079: GO 38450
38081: LD_INT 31
38083: DOUBLE
38084: EQUAL
38085: IFTRUE 38089
38087: GO 38107
38089: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
38090: LD_ADDR_VAR 0 3
38094: PUSH
38095: LD_INT 13
38097: PUSH
38098: LD_INT 14
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: ST_TO_ADDR
38105: GO 38450
38107: LD_INT 26
38109: DOUBLE
38110: EQUAL
38111: IFTRUE 38115
38113: GO 38133
38115: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
38116: LD_ADDR_VAR 0 3
38120: PUSH
38121: LD_INT 13
38123: PUSH
38124: LD_INT 14
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: ST_TO_ADDR
38131: GO 38450
38133: LD_INT 42
38135: DOUBLE
38136: EQUAL
38137: IFTRUE 38141
38139: GO 38167
38141: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
38142: LD_ADDR_VAR 0 3
38146: PUSH
38147: LD_INT 21
38149: PUSH
38150: LD_INT 22
38152: PUSH
38153: LD_INT 23
38155: PUSH
38156: LD_INT 24
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: ST_TO_ADDR
38165: GO 38450
38167: LD_INT 43
38169: DOUBLE
38170: EQUAL
38171: IFTRUE 38175
38173: GO 38201
38175: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
38176: LD_ADDR_VAR 0 3
38180: PUSH
38181: LD_INT 21
38183: PUSH
38184: LD_INT 22
38186: PUSH
38187: LD_INT 23
38189: PUSH
38190: LD_INT 24
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: ST_TO_ADDR
38199: GO 38450
38201: LD_INT 44
38203: DOUBLE
38204: EQUAL
38205: IFTRUE 38209
38207: GO 38235
38209: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
38210: LD_ADDR_VAR 0 3
38214: PUSH
38215: LD_INT 21
38217: PUSH
38218: LD_INT 22
38220: PUSH
38221: LD_INT 23
38223: PUSH
38224: LD_INT 24
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: LIST
38231: LIST
38232: ST_TO_ADDR
38233: GO 38450
38235: LD_INT 45
38237: DOUBLE
38238: EQUAL
38239: IFTRUE 38243
38241: GO 38269
38243: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
38244: LD_ADDR_VAR 0 3
38248: PUSH
38249: LD_INT 21
38251: PUSH
38252: LD_INT 22
38254: PUSH
38255: LD_INT 23
38257: PUSH
38258: LD_INT 24
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: ST_TO_ADDR
38267: GO 38450
38269: LD_INT 49
38271: DOUBLE
38272: EQUAL
38273: IFTRUE 38277
38275: GO 38303
38277: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
38278: LD_ADDR_VAR 0 3
38282: PUSH
38283: LD_INT 21
38285: PUSH
38286: LD_INT 22
38288: PUSH
38289: LD_INT 23
38291: PUSH
38292: LD_INT 24
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: LIST
38299: LIST
38300: ST_TO_ADDR
38301: GO 38450
38303: LD_INT 51
38305: DOUBLE
38306: EQUAL
38307: IFTRUE 38311
38309: GO 38337
38311: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
38312: LD_ADDR_VAR 0 3
38316: PUSH
38317: LD_INT 21
38319: PUSH
38320: LD_INT 22
38322: PUSH
38323: LD_INT 23
38325: PUSH
38326: LD_INT 24
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: LIST
38333: LIST
38334: ST_TO_ADDR
38335: GO 38450
38337: LD_INT 52
38339: DOUBLE
38340: EQUAL
38341: IFTRUE 38345
38343: GO 38371
38345: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
38346: LD_ADDR_VAR 0 3
38350: PUSH
38351: LD_INT 21
38353: PUSH
38354: LD_INT 22
38356: PUSH
38357: LD_INT 23
38359: PUSH
38360: LD_INT 24
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: ST_TO_ADDR
38369: GO 38450
38371: LD_INT 53
38373: DOUBLE
38374: EQUAL
38375: IFTRUE 38379
38377: GO 38397
38379: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
38380: LD_ADDR_VAR 0 3
38384: PUSH
38385: LD_INT 23
38387: PUSH
38388: LD_INT 24
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: ST_TO_ADDR
38395: GO 38450
38397: LD_INT 46
38399: DOUBLE
38400: EQUAL
38401: IFTRUE 38405
38403: GO 38423
38405: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
38406: LD_ADDR_VAR 0 3
38410: PUSH
38411: LD_INT 23
38413: PUSH
38414: LD_INT 24
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: ST_TO_ADDR
38421: GO 38450
38423: LD_INT 47
38425: DOUBLE
38426: EQUAL
38427: IFTRUE 38431
38429: GO 38449
38431: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38432: LD_ADDR_VAR 0 3
38436: PUSH
38437: LD_INT 23
38439: PUSH
38440: LD_INT 24
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: ST_TO_ADDR
38447: GO 38450
38449: POP
// result := ( chassis in result ) ;
38450: LD_ADDR_VAR 0 3
38454: PUSH
38455: LD_VAR 0 1
38459: PUSH
38460: LD_VAR 0 3
38464: IN
38465: ST_TO_ADDR
// end ;
38466: LD_VAR 0 3
38470: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
38471: LD_INT 0
38473: PPUSH
38474: PPUSH
38475: PPUSH
38476: PPUSH
38477: PPUSH
38478: PPUSH
38479: PPUSH
// result := array ;
38480: LD_ADDR_VAR 0 5
38484: PUSH
38485: LD_VAR 0 1
38489: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
38490: LD_VAR 0 1
38494: NOT
38495: PUSH
38496: LD_VAR 0 2
38500: NOT
38501: OR
38502: PUSH
38503: LD_VAR 0 3
38507: NOT
38508: OR
38509: PUSH
38510: LD_VAR 0 2
38514: PUSH
38515: LD_VAR 0 1
38519: GREATER
38520: OR
38521: PUSH
38522: LD_VAR 0 3
38526: PUSH
38527: LD_VAR 0 1
38531: GREATER
38532: OR
38533: IFFALSE 38537
// exit ;
38535: GO 38833
// if direction then
38537: LD_VAR 0 4
38541: IFFALSE 38605
// begin d := 1 ;
38543: LD_ADDR_VAR 0 9
38547: PUSH
38548: LD_INT 1
38550: ST_TO_ADDR
// if i_from > i_to then
38551: LD_VAR 0 2
38555: PUSH
38556: LD_VAR 0 3
38560: GREATER
38561: IFFALSE 38587
// length := ( array - i_from ) + i_to else
38563: LD_ADDR_VAR 0 11
38567: PUSH
38568: LD_VAR 0 1
38572: PUSH
38573: LD_VAR 0 2
38577: MINUS
38578: PUSH
38579: LD_VAR 0 3
38583: PLUS
38584: ST_TO_ADDR
38585: GO 38603
// length := i_to - i_from ;
38587: LD_ADDR_VAR 0 11
38591: PUSH
38592: LD_VAR 0 3
38596: PUSH
38597: LD_VAR 0 2
38601: MINUS
38602: ST_TO_ADDR
// end else
38603: GO 38666
// begin d := - 1 ;
38605: LD_ADDR_VAR 0 9
38609: PUSH
38610: LD_INT 1
38612: NEG
38613: ST_TO_ADDR
// if i_from > i_to then
38614: LD_VAR 0 2
38618: PUSH
38619: LD_VAR 0 3
38623: GREATER
38624: IFFALSE 38644
// length := i_from - i_to else
38626: LD_ADDR_VAR 0 11
38630: PUSH
38631: LD_VAR 0 2
38635: PUSH
38636: LD_VAR 0 3
38640: MINUS
38641: ST_TO_ADDR
38642: GO 38666
// length := ( array - i_to ) + i_from ;
38644: LD_ADDR_VAR 0 11
38648: PUSH
38649: LD_VAR 0 1
38653: PUSH
38654: LD_VAR 0 3
38658: MINUS
38659: PUSH
38660: LD_VAR 0 2
38664: PLUS
38665: ST_TO_ADDR
// end ; if not length then
38666: LD_VAR 0 11
38670: NOT
38671: IFFALSE 38675
// exit ;
38673: GO 38833
// tmp := array ;
38675: LD_ADDR_VAR 0 10
38679: PUSH
38680: LD_VAR 0 1
38684: ST_TO_ADDR
// for i = 1 to length do
38685: LD_ADDR_VAR 0 6
38689: PUSH
38690: DOUBLE
38691: LD_INT 1
38693: DEC
38694: ST_TO_ADDR
38695: LD_VAR 0 11
38699: PUSH
38700: FOR_TO
38701: IFFALSE 38821
// begin for j = 1 to array do
38703: LD_ADDR_VAR 0 7
38707: PUSH
38708: DOUBLE
38709: LD_INT 1
38711: DEC
38712: ST_TO_ADDR
38713: LD_VAR 0 1
38717: PUSH
38718: FOR_TO
38719: IFFALSE 38807
// begin k := j + d ;
38721: LD_ADDR_VAR 0 8
38725: PUSH
38726: LD_VAR 0 7
38730: PUSH
38731: LD_VAR 0 9
38735: PLUS
38736: ST_TO_ADDR
// if k > array then
38737: LD_VAR 0 8
38741: PUSH
38742: LD_VAR 0 1
38746: GREATER
38747: IFFALSE 38757
// k := 1 ;
38749: LD_ADDR_VAR 0 8
38753: PUSH
38754: LD_INT 1
38756: ST_TO_ADDR
// if not k then
38757: LD_VAR 0 8
38761: NOT
38762: IFFALSE 38774
// k := array ;
38764: LD_ADDR_VAR 0 8
38768: PUSH
38769: LD_VAR 0 1
38773: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
38774: LD_ADDR_VAR 0 10
38778: PUSH
38779: LD_VAR 0 10
38783: PPUSH
38784: LD_VAR 0 8
38788: PPUSH
38789: LD_VAR 0 1
38793: PUSH
38794: LD_VAR 0 7
38798: ARRAY
38799: PPUSH
38800: CALL_OW 1
38804: ST_TO_ADDR
// end ;
38805: GO 38718
38807: POP
38808: POP
// array := tmp ;
38809: LD_ADDR_VAR 0 1
38813: PUSH
38814: LD_VAR 0 10
38818: ST_TO_ADDR
// end ;
38819: GO 38700
38821: POP
38822: POP
// result := array ;
38823: LD_ADDR_VAR 0 5
38827: PUSH
38828: LD_VAR 0 1
38832: ST_TO_ADDR
// end ;
38833: LD_VAR 0 5
38837: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
38838: LD_INT 0
38840: PPUSH
38841: PPUSH
// result := 0 ;
38842: LD_ADDR_VAR 0 3
38846: PUSH
38847: LD_INT 0
38849: ST_TO_ADDR
// if not array or not value in array then
38850: LD_VAR 0 1
38854: NOT
38855: PUSH
38856: LD_VAR 0 2
38860: PUSH
38861: LD_VAR 0 1
38865: IN
38866: NOT
38867: OR
38868: IFFALSE 38872
// exit ;
38870: GO 38926
// for i = 1 to array do
38872: LD_ADDR_VAR 0 4
38876: PUSH
38877: DOUBLE
38878: LD_INT 1
38880: DEC
38881: ST_TO_ADDR
38882: LD_VAR 0 1
38886: PUSH
38887: FOR_TO
38888: IFFALSE 38924
// if value = array [ i ] then
38890: LD_VAR 0 2
38894: PUSH
38895: LD_VAR 0 1
38899: PUSH
38900: LD_VAR 0 4
38904: ARRAY
38905: EQUAL
38906: IFFALSE 38922
// begin result := i ;
38908: LD_ADDR_VAR 0 3
38912: PUSH
38913: LD_VAR 0 4
38917: ST_TO_ADDR
// exit ;
38918: POP
38919: POP
38920: GO 38926
// end ;
38922: GO 38887
38924: POP
38925: POP
// end ;
38926: LD_VAR 0 3
38930: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
38931: LD_INT 0
38933: PPUSH
// vc_chassis := chassis ;
38934: LD_ADDR_OWVAR 37
38938: PUSH
38939: LD_VAR 0 1
38943: ST_TO_ADDR
// vc_engine := engine ;
38944: LD_ADDR_OWVAR 39
38948: PUSH
38949: LD_VAR 0 2
38953: ST_TO_ADDR
// vc_control := control ;
38954: LD_ADDR_OWVAR 38
38958: PUSH
38959: LD_VAR 0 3
38963: ST_TO_ADDR
// vc_weapon := weapon ;
38964: LD_ADDR_OWVAR 40
38968: PUSH
38969: LD_VAR 0 4
38973: ST_TO_ADDR
// vc_fuel_battery := fuel ;
38974: LD_ADDR_OWVAR 41
38978: PUSH
38979: LD_VAR 0 5
38983: ST_TO_ADDR
// end ;
38984: LD_VAR 0 6
38988: RET
// export function WantPlant ( unit ) ; var task ; begin
38989: LD_INT 0
38991: PPUSH
38992: PPUSH
// result := false ;
38993: LD_ADDR_VAR 0 2
38997: PUSH
38998: LD_INT 0
39000: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
39001: LD_ADDR_VAR 0 3
39005: PUSH
39006: LD_VAR 0 1
39010: PPUSH
39011: CALL_OW 437
39015: ST_TO_ADDR
// if task then
39016: LD_VAR 0 3
39020: IFFALSE 39048
// if task [ 1 ] [ 1 ] = p then
39022: LD_VAR 0 3
39026: PUSH
39027: LD_INT 1
39029: ARRAY
39030: PUSH
39031: LD_INT 1
39033: ARRAY
39034: PUSH
39035: LD_STRING p
39037: EQUAL
39038: IFFALSE 39048
// result := true ;
39040: LD_ADDR_VAR 0 2
39044: PUSH
39045: LD_INT 1
39047: ST_TO_ADDR
// end ;
39048: LD_VAR 0 2
39052: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
39053: LD_INT 0
39055: PPUSH
39056: PPUSH
39057: PPUSH
39058: PPUSH
// if pos < 1 then
39059: LD_VAR 0 2
39063: PUSH
39064: LD_INT 1
39066: LESS
39067: IFFALSE 39071
// exit ;
39069: GO 39374
// if pos = 1 then
39071: LD_VAR 0 2
39075: PUSH
39076: LD_INT 1
39078: EQUAL
39079: IFFALSE 39112
// result := Replace ( arr , pos [ 1 ] , value ) else
39081: LD_ADDR_VAR 0 4
39085: PUSH
39086: LD_VAR 0 1
39090: PPUSH
39091: LD_VAR 0 2
39095: PUSH
39096: LD_INT 1
39098: ARRAY
39099: PPUSH
39100: LD_VAR 0 3
39104: PPUSH
39105: CALL_OW 1
39109: ST_TO_ADDR
39110: GO 39374
// begin tmp := arr ;
39112: LD_ADDR_VAR 0 6
39116: PUSH
39117: LD_VAR 0 1
39121: ST_TO_ADDR
// s_arr := [ tmp ] ;
39122: LD_ADDR_VAR 0 7
39126: PUSH
39127: LD_VAR 0 6
39131: PUSH
39132: EMPTY
39133: LIST
39134: ST_TO_ADDR
// for i = 1 to pos - 1 do
39135: LD_ADDR_VAR 0 5
39139: PUSH
39140: DOUBLE
39141: LD_INT 1
39143: DEC
39144: ST_TO_ADDR
39145: LD_VAR 0 2
39149: PUSH
39150: LD_INT 1
39152: MINUS
39153: PUSH
39154: FOR_TO
39155: IFFALSE 39200
// begin tmp := tmp [ pos [ i ] ] ;
39157: LD_ADDR_VAR 0 6
39161: PUSH
39162: LD_VAR 0 6
39166: PUSH
39167: LD_VAR 0 2
39171: PUSH
39172: LD_VAR 0 5
39176: ARRAY
39177: ARRAY
39178: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
39179: LD_ADDR_VAR 0 7
39183: PUSH
39184: LD_VAR 0 7
39188: PUSH
39189: LD_VAR 0 6
39193: PUSH
39194: EMPTY
39195: LIST
39196: ADD
39197: ST_TO_ADDR
// end ;
39198: GO 39154
39200: POP
39201: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
39202: LD_ADDR_VAR 0 6
39206: PUSH
39207: LD_VAR 0 6
39211: PPUSH
39212: LD_VAR 0 2
39216: PUSH
39217: LD_VAR 0 2
39221: ARRAY
39222: PPUSH
39223: LD_VAR 0 3
39227: PPUSH
39228: CALL_OW 1
39232: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
39233: LD_ADDR_VAR 0 7
39237: PUSH
39238: LD_VAR 0 7
39242: PPUSH
39243: LD_VAR 0 7
39247: PPUSH
39248: LD_VAR 0 6
39252: PPUSH
39253: CALL_OW 1
39257: ST_TO_ADDR
// for i = s_arr downto 2 do
39258: LD_ADDR_VAR 0 5
39262: PUSH
39263: DOUBLE
39264: LD_VAR 0 7
39268: INC
39269: ST_TO_ADDR
39270: LD_INT 2
39272: PUSH
39273: FOR_DOWNTO
39274: IFFALSE 39358
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
39276: LD_ADDR_VAR 0 6
39280: PUSH
39281: LD_VAR 0 7
39285: PUSH
39286: LD_VAR 0 5
39290: PUSH
39291: LD_INT 1
39293: MINUS
39294: ARRAY
39295: PPUSH
39296: LD_VAR 0 2
39300: PUSH
39301: LD_VAR 0 5
39305: PUSH
39306: LD_INT 1
39308: MINUS
39309: ARRAY
39310: PPUSH
39311: LD_VAR 0 7
39315: PUSH
39316: LD_VAR 0 5
39320: ARRAY
39321: PPUSH
39322: CALL_OW 1
39326: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
39327: LD_ADDR_VAR 0 7
39331: PUSH
39332: LD_VAR 0 7
39336: PPUSH
39337: LD_VAR 0 5
39341: PUSH
39342: LD_INT 1
39344: MINUS
39345: PPUSH
39346: LD_VAR 0 6
39350: PPUSH
39351: CALL_OW 1
39355: ST_TO_ADDR
// end ;
39356: GO 39273
39358: POP
39359: POP
// result := s_arr [ 1 ] ;
39360: LD_ADDR_VAR 0 4
39364: PUSH
39365: LD_VAR 0 7
39369: PUSH
39370: LD_INT 1
39372: ARRAY
39373: ST_TO_ADDR
// end ; end ;
39374: LD_VAR 0 4
39378: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
39379: LD_INT 0
39381: PPUSH
39382: PPUSH
// if not list then
39383: LD_VAR 0 1
39387: NOT
39388: IFFALSE 39392
// exit ;
39390: GO 39483
// i := list [ pos1 ] ;
39392: LD_ADDR_VAR 0 5
39396: PUSH
39397: LD_VAR 0 1
39401: PUSH
39402: LD_VAR 0 2
39406: ARRAY
39407: ST_TO_ADDR
// if not i then
39408: LD_VAR 0 5
39412: NOT
39413: IFFALSE 39417
// exit ;
39415: GO 39483
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
39417: LD_ADDR_VAR 0 1
39421: PUSH
39422: LD_VAR 0 1
39426: PPUSH
39427: LD_VAR 0 2
39431: PPUSH
39432: LD_VAR 0 1
39436: PUSH
39437: LD_VAR 0 3
39441: ARRAY
39442: PPUSH
39443: CALL_OW 1
39447: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
39448: LD_ADDR_VAR 0 1
39452: PUSH
39453: LD_VAR 0 1
39457: PPUSH
39458: LD_VAR 0 3
39462: PPUSH
39463: LD_VAR 0 5
39467: PPUSH
39468: CALL_OW 1
39472: ST_TO_ADDR
// result := list ;
39473: LD_ADDR_VAR 0 4
39477: PUSH
39478: LD_VAR 0 1
39482: ST_TO_ADDR
// end ;
39483: LD_VAR 0 4
39487: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
39488: LD_INT 0
39490: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
39491: LD_ADDR_VAR 0 5
39495: PUSH
39496: LD_VAR 0 1
39500: PPUSH
39501: CALL_OW 250
39505: PPUSH
39506: LD_VAR 0 1
39510: PPUSH
39511: CALL_OW 251
39515: PPUSH
39516: LD_VAR 0 2
39520: PPUSH
39521: LD_VAR 0 3
39525: PPUSH
39526: LD_VAR 0 4
39530: PPUSH
39531: CALL 39541 0 5
39535: ST_TO_ADDR
// end ;
39536: LD_VAR 0 5
39540: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
39541: LD_INT 0
39543: PPUSH
39544: PPUSH
39545: PPUSH
39546: PPUSH
// if not list then
39547: LD_VAR 0 3
39551: NOT
39552: IFFALSE 39556
// exit ;
39554: GO 39944
// result := [ ] ;
39556: LD_ADDR_VAR 0 6
39560: PUSH
39561: EMPTY
39562: ST_TO_ADDR
// for i in list do
39563: LD_ADDR_VAR 0 7
39567: PUSH
39568: LD_VAR 0 3
39572: PUSH
39573: FOR_IN
39574: IFFALSE 39776
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39576: LD_ADDR_VAR 0 9
39580: PUSH
39581: LD_VAR 0 7
39585: PPUSH
39586: LD_VAR 0 1
39590: PPUSH
39591: LD_VAR 0 2
39595: PPUSH
39596: CALL_OW 297
39600: ST_TO_ADDR
// if not result then
39601: LD_VAR 0 6
39605: NOT
39606: IFFALSE 39632
// result := [ [ i , tmp ] ] else
39608: LD_ADDR_VAR 0 6
39612: PUSH
39613: LD_VAR 0 7
39617: PUSH
39618: LD_VAR 0 9
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: EMPTY
39628: LIST
39629: ST_TO_ADDR
39630: GO 39774
// begin if result [ result ] [ 2 ] < tmp then
39632: LD_VAR 0 6
39636: PUSH
39637: LD_VAR 0 6
39641: ARRAY
39642: PUSH
39643: LD_INT 2
39645: ARRAY
39646: PUSH
39647: LD_VAR 0 9
39651: LESS
39652: IFFALSE 39694
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
39654: LD_ADDR_VAR 0 6
39658: PUSH
39659: LD_VAR 0 6
39663: PPUSH
39664: LD_VAR 0 6
39668: PUSH
39669: LD_INT 1
39671: PLUS
39672: PPUSH
39673: LD_VAR 0 7
39677: PUSH
39678: LD_VAR 0 9
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PPUSH
39687: CALL_OW 2
39691: ST_TO_ADDR
39692: GO 39774
// for j = 1 to result do
39694: LD_ADDR_VAR 0 8
39698: PUSH
39699: DOUBLE
39700: LD_INT 1
39702: DEC
39703: ST_TO_ADDR
39704: LD_VAR 0 6
39708: PUSH
39709: FOR_TO
39710: IFFALSE 39772
// begin if tmp < result [ j ] [ 2 ] then
39712: LD_VAR 0 9
39716: PUSH
39717: LD_VAR 0 6
39721: PUSH
39722: LD_VAR 0 8
39726: ARRAY
39727: PUSH
39728: LD_INT 2
39730: ARRAY
39731: LESS
39732: IFFALSE 39770
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39734: LD_ADDR_VAR 0 6
39738: PUSH
39739: LD_VAR 0 6
39743: PPUSH
39744: LD_VAR 0 8
39748: PPUSH
39749: LD_VAR 0 7
39753: PUSH
39754: LD_VAR 0 9
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PPUSH
39763: CALL_OW 2
39767: ST_TO_ADDR
// break ;
39768: GO 39772
// end ; end ;
39770: GO 39709
39772: POP
39773: POP
// end ; end ;
39774: GO 39573
39776: POP
39777: POP
// if result and not asc then
39778: LD_VAR 0 6
39782: PUSH
39783: LD_VAR 0 4
39787: NOT
39788: AND
39789: IFFALSE 39864
// begin tmp := result ;
39791: LD_ADDR_VAR 0 9
39795: PUSH
39796: LD_VAR 0 6
39800: ST_TO_ADDR
// for i = tmp downto 1 do
39801: LD_ADDR_VAR 0 7
39805: PUSH
39806: DOUBLE
39807: LD_VAR 0 9
39811: INC
39812: ST_TO_ADDR
39813: LD_INT 1
39815: PUSH
39816: FOR_DOWNTO
39817: IFFALSE 39862
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
39819: LD_ADDR_VAR 0 6
39823: PUSH
39824: LD_VAR 0 6
39828: PPUSH
39829: LD_VAR 0 9
39833: PUSH
39834: LD_VAR 0 7
39838: MINUS
39839: PUSH
39840: LD_INT 1
39842: PLUS
39843: PPUSH
39844: LD_VAR 0 9
39848: PUSH
39849: LD_VAR 0 7
39853: ARRAY
39854: PPUSH
39855: CALL_OW 1
39859: ST_TO_ADDR
39860: GO 39816
39862: POP
39863: POP
// end ; tmp := [ ] ;
39864: LD_ADDR_VAR 0 9
39868: PUSH
39869: EMPTY
39870: ST_TO_ADDR
// if mode then
39871: LD_VAR 0 5
39875: IFFALSE 39944
// begin for i = 1 to result do
39877: LD_ADDR_VAR 0 7
39881: PUSH
39882: DOUBLE
39883: LD_INT 1
39885: DEC
39886: ST_TO_ADDR
39887: LD_VAR 0 6
39891: PUSH
39892: FOR_TO
39893: IFFALSE 39932
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
39895: LD_ADDR_VAR 0 9
39899: PUSH
39900: LD_VAR 0 9
39904: PPUSH
39905: LD_VAR 0 7
39909: PPUSH
39910: LD_VAR 0 6
39914: PUSH
39915: LD_VAR 0 7
39919: ARRAY
39920: PUSH
39921: LD_INT 1
39923: ARRAY
39924: PPUSH
39925: CALL_OW 1
39929: ST_TO_ADDR
39930: GO 39892
39932: POP
39933: POP
// result := tmp ;
39934: LD_ADDR_VAR 0 6
39938: PUSH
39939: LD_VAR 0 9
39943: ST_TO_ADDR
// end ; end ;
39944: LD_VAR 0 6
39948: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
39949: LD_INT 0
39951: PPUSH
39952: PPUSH
39953: PPUSH
39954: PPUSH
39955: PPUSH
39956: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
39957: LD_ADDR_VAR 0 5
39961: PUSH
39962: LD_INT 0
39964: PUSH
39965: LD_INT 0
39967: PUSH
39968: LD_INT 0
39970: PUSH
39971: EMPTY
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: ST_TO_ADDR
// if not x or not y then
39979: LD_VAR 0 2
39983: NOT
39984: PUSH
39985: LD_VAR 0 3
39989: NOT
39990: OR
39991: IFFALSE 39995
// exit ;
39993: GO 41641
// if not range then
39995: LD_VAR 0 4
39999: NOT
40000: IFFALSE 40010
// range := 10 ;
40002: LD_ADDR_VAR 0 4
40006: PUSH
40007: LD_INT 10
40009: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40010: LD_ADDR_VAR 0 8
40014: PUSH
40015: LD_INT 81
40017: PUSH
40018: LD_VAR 0 1
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 92
40029: PUSH
40030: LD_VAR 0 2
40034: PUSH
40035: LD_VAR 0 3
40039: PUSH
40040: LD_VAR 0 4
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 3
40053: PUSH
40054: LD_INT 21
40056: PUSH
40057: LD_INT 3
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: LIST
40072: PPUSH
40073: CALL_OW 69
40077: ST_TO_ADDR
// if not tmp then
40078: LD_VAR 0 8
40082: NOT
40083: IFFALSE 40087
// exit ;
40085: GO 41641
// for i in tmp do
40087: LD_ADDR_VAR 0 6
40091: PUSH
40092: LD_VAR 0 8
40096: PUSH
40097: FOR_IN
40098: IFFALSE 41616
// begin points := [ 0 , 0 , 0 ] ;
40100: LD_ADDR_VAR 0 9
40104: PUSH
40105: LD_INT 0
40107: PUSH
40108: LD_INT 0
40110: PUSH
40111: LD_INT 0
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: LIST
40118: ST_TO_ADDR
// bpoints := 1 ;
40119: LD_ADDR_VAR 0 10
40123: PUSH
40124: LD_INT 1
40126: ST_TO_ADDR
// case GetType ( i ) of unit_human :
40127: LD_VAR 0 6
40131: PPUSH
40132: CALL_OW 247
40136: PUSH
40137: LD_INT 1
40139: DOUBLE
40140: EQUAL
40141: IFTRUE 40145
40143: GO 40723
40145: POP
// begin if GetClass ( i ) = 1 then
40146: LD_VAR 0 6
40150: PPUSH
40151: CALL_OW 257
40155: PUSH
40156: LD_INT 1
40158: EQUAL
40159: IFFALSE 40180
// points := [ 10 , 5 , 3 ] ;
40161: LD_ADDR_VAR 0 9
40165: PUSH
40166: LD_INT 10
40168: PUSH
40169: LD_INT 5
40171: PUSH
40172: LD_INT 3
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: LIST
40179: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
40180: LD_VAR 0 6
40184: PPUSH
40185: CALL_OW 257
40189: PUSH
40190: LD_INT 2
40192: PUSH
40193: LD_INT 3
40195: PUSH
40196: LD_INT 4
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: LIST
40203: IN
40204: IFFALSE 40225
// points := [ 3 , 2 , 1 ] ;
40206: LD_ADDR_VAR 0 9
40210: PUSH
40211: LD_INT 3
40213: PUSH
40214: LD_INT 2
40216: PUSH
40217: LD_INT 1
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: LIST
40224: ST_TO_ADDR
// if GetClass ( i ) = 5 then
40225: LD_VAR 0 6
40229: PPUSH
40230: CALL_OW 257
40234: PUSH
40235: LD_INT 5
40237: EQUAL
40238: IFFALSE 40259
// points := [ 130 , 5 , 2 ] ;
40240: LD_ADDR_VAR 0 9
40244: PUSH
40245: LD_INT 130
40247: PUSH
40248: LD_INT 5
40250: PUSH
40251: LD_INT 2
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: LIST
40258: ST_TO_ADDR
// if GetClass ( i ) = 8 then
40259: LD_VAR 0 6
40263: PPUSH
40264: CALL_OW 257
40268: PUSH
40269: LD_INT 8
40271: EQUAL
40272: IFFALSE 40293
// points := [ 35 , 35 , 30 ] ;
40274: LD_ADDR_VAR 0 9
40278: PUSH
40279: LD_INT 35
40281: PUSH
40282: LD_INT 35
40284: PUSH
40285: LD_INT 30
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: LIST
40292: ST_TO_ADDR
// if GetClass ( i ) = 9 then
40293: LD_VAR 0 6
40297: PPUSH
40298: CALL_OW 257
40302: PUSH
40303: LD_INT 9
40305: EQUAL
40306: IFFALSE 40327
// points := [ 20 , 55 , 40 ] ;
40308: LD_ADDR_VAR 0 9
40312: PUSH
40313: LD_INT 20
40315: PUSH
40316: LD_INT 55
40318: PUSH
40319: LD_INT 40
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: LIST
40326: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
40327: LD_VAR 0 6
40331: PPUSH
40332: CALL_OW 257
40336: PUSH
40337: LD_INT 12
40339: PUSH
40340: LD_INT 16
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: IN
40347: IFFALSE 40368
// points := [ 5 , 3 , 2 ] ;
40349: LD_ADDR_VAR 0 9
40353: PUSH
40354: LD_INT 5
40356: PUSH
40357: LD_INT 3
40359: PUSH
40360: LD_INT 2
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: LIST
40367: ST_TO_ADDR
// if GetClass ( i ) = 17 then
40368: LD_VAR 0 6
40372: PPUSH
40373: CALL_OW 257
40377: PUSH
40378: LD_INT 17
40380: EQUAL
40381: IFFALSE 40402
// points := [ 100 , 50 , 75 ] ;
40383: LD_ADDR_VAR 0 9
40387: PUSH
40388: LD_INT 100
40390: PUSH
40391: LD_INT 50
40393: PUSH
40394: LD_INT 75
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: LIST
40401: ST_TO_ADDR
// if GetClass ( i ) = 15 then
40402: LD_VAR 0 6
40406: PPUSH
40407: CALL_OW 257
40411: PUSH
40412: LD_INT 15
40414: EQUAL
40415: IFFALSE 40436
// points := [ 10 , 5 , 3 ] ;
40417: LD_ADDR_VAR 0 9
40421: PUSH
40422: LD_INT 10
40424: PUSH
40425: LD_INT 5
40427: PUSH
40428: LD_INT 3
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: LIST
40435: ST_TO_ADDR
// if GetClass ( i ) = 14 then
40436: LD_VAR 0 6
40440: PPUSH
40441: CALL_OW 257
40445: PUSH
40446: LD_INT 14
40448: EQUAL
40449: IFFALSE 40470
// points := [ 10 , 0 , 0 ] ;
40451: LD_ADDR_VAR 0 9
40455: PUSH
40456: LD_INT 10
40458: PUSH
40459: LD_INT 0
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: LIST
40469: ST_TO_ADDR
// if GetClass ( i ) = 11 then
40470: LD_VAR 0 6
40474: PPUSH
40475: CALL_OW 257
40479: PUSH
40480: LD_INT 11
40482: EQUAL
40483: IFFALSE 40504
// points := [ 30 , 10 , 5 ] ;
40485: LD_ADDR_VAR 0 9
40489: PUSH
40490: LD_INT 30
40492: PUSH
40493: LD_INT 10
40495: PUSH
40496: LD_INT 5
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: LIST
40503: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
40504: LD_VAR 0 1
40508: PPUSH
40509: LD_INT 5
40511: PPUSH
40512: CALL_OW 321
40516: PUSH
40517: LD_INT 2
40519: EQUAL
40520: IFFALSE 40537
// bpoints := bpoints * 1.8 ;
40522: LD_ADDR_VAR 0 10
40526: PUSH
40527: LD_VAR 0 10
40531: PUSH
40532: LD_REAL  1.80000000000000E+0000
40535: MUL
40536: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
40537: LD_VAR 0 6
40541: PPUSH
40542: CALL_OW 257
40546: PUSH
40547: LD_INT 1
40549: PUSH
40550: LD_INT 2
40552: PUSH
40553: LD_INT 3
40555: PUSH
40556: LD_INT 4
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: IN
40565: PUSH
40566: LD_VAR 0 1
40570: PPUSH
40571: LD_INT 51
40573: PPUSH
40574: CALL_OW 321
40578: PUSH
40579: LD_INT 2
40581: EQUAL
40582: AND
40583: IFFALSE 40600
// bpoints := bpoints * 1.2 ;
40585: LD_ADDR_VAR 0 10
40589: PUSH
40590: LD_VAR 0 10
40594: PUSH
40595: LD_REAL  1.20000000000000E+0000
40598: MUL
40599: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40600: LD_VAR 0 6
40604: PPUSH
40605: CALL_OW 257
40609: PUSH
40610: LD_INT 5
40612: PUSH
40613: LD_INT 7
40615: PUSH
40616: LD_INT 9
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: LIST
40623: IN
40624: PUSH
40625: LD_VAR 0 1
40629: PPUSH
40630: LD_INT 52
40632: PPUSH
40633: CALL_OW 321
40637: PUSH
40638: LD_INT 2
40640: EQUAL
40641: AND
40642: IFFALSE 40659
// bpoints := bpoints * 1.5 ;
40644: LD_ADDR_VAR 0 10
40648: PUSH
40649: LD_VAR 0 10
40653: PUSH
40654: LD_REAL  1.50000000000000E+0000
40657: MUL
40658: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
40659: LD_VAR 0 1
40663: PPUSH
40664: LD_INT 66
40666: PPUSH
40667: CALL_OW 321
40671: PUSH
40672: LD_INT 2
40674: EQUAL
40675: IFFALSE 40692
// bpoints := bpoints * 1.1 ;
40677: LD_ADDR_VAR 0 10
40681: PUSH
40682: LD_VAR 0 10
40686: PUSH
40687: LD_REAL  1.10000000000000E+0000
40690: MUL
40691: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
40692: LD_ADDR_VAR 0 10
40696: PUSH
40697: LD_VAR 0 10
40701: PUSH
40702: LD_VAR 0 6
40706: PPUSH
40707: LD_INT 1
40709: PPUSH
40710: CALL_OW 259
40714: PUSH
40715: LD_REAL  1.15000000000000E+0000
40718: MUL
40719: MUL
40720: ST_TO_ADDR
// end ; unit_vehicle :
40721: GO 41545
40723: LD_INT 2
40725: DOUBLE
40726: EQUAL
40727: IFTRUE 40731
40729: GO 41533
40731: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
40732: LD_VAR 0 6
40736: PPUSH
40737: CALL_OW 264
40741: PUSH
40742: LD_INT 2
40744: PUSH
40745: LD_INT 42
40747: PUSH
40748: LD_INT 24
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: LIST
40755: IN
40756: IFFALSE 40777
// points := [ 25 , 5 , 3 ] ;
40758: LD_ADDR_VAR 0 9
40762: PUSH
40763: LD_INT 25
40765: PUSH
40766: LD_INT 5
40768: PUSH
40769: LD_INT 3
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: LIST
40776: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
40777: LD_VAR 0 6
40781: PPUSH
40782: CALL_OW 264
40786: PUSH
40787: LD_INT 4
40789: PUSH
40790: LD_INT 43
40792: PUSH
40793: LD_INT 25
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: LIST
40800: IN
40801: IFFALSE 40822
// points := [ 40 , 15 , 5 ] ;
40803: LD_ADDR_VAR 0 9
40807: PUSH
40808: LD_INT 40
40810: PUSH
40811: LD_INT 15
40813: PUSH
40814: LD_INT 5
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: LIST
40821: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
40822: LD_VAR 0 6
40826: PPUSH
40827: CALL_OW 264
40831: PUSH
40832: LD_INT 3
40834: PUSH
40835: LD_INT 23
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: IN
40842: IFFALSE 40863
// points := [ 7 , 25 , 8 ] ;
40844: LD_ADDR_VAR 0 9
40848: PUSH
40849: LD_INT 7
40851: PUSH
40852: LD_INT 25
40854: PUSH
40855: LD_INT 8
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: LIST
40862: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
40863: LD_VAR 0 6
40867: PPUSH
40868: CALL_OW 264
40872: PUSH
40873: LD_INT 5
40875: PUSH
40876: LD_INT 27
40878: PUSH
40879: LD_INT 44
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: LIST
40886: IN
40887: IFFALSE 40908
// points := [ 14 , 50 , 16 ] ;
40889: LD_ADDR_VAR 0 9
40893: PUSH
40894: LD_INT 14
40896: PUSH
40897: LD_INT 50
40899: PUSH
40900: LD_INT 16
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: LIST
40907: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
40908: LD_VAR 0 6
40912: PPUSH
40913: CALL_OW 264
40917: PUSH
40918: LD_INT 6
40920: PUSH
40921: LD_INT 46
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: IN
40928: IFFALSE 40949
// points := [ 32 , 120 , 70 ] ;
40930: LD_ADDR_VAR 0 9
40934: PUSH
40935: LD_INT 32
40937: PUSH
40938: LD_INT 120
40940: PUSH
40941: LD_INT 70
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: LIST
40948: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
40949: LD_VAR 0 6
40953: PPUSH
40954: CALL_OW 264
40958: PUSH
40959: LD_INT 7
40961: PUSH
40962: LD_INT 28
40964: PUSH
40965: LD_INT 45
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: LIST
40972: IN
40973: IFFALSE 40994
// points := [ 35 , 20 , 45 ] ;
40975: LD_ADDR_VAR 0 9
40979: PUSH
40980: LD_INT 35
40982: PUSH
40983: LD_INT 20
40985: PUSH
40986: LD_INT 45
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: LIST
40993: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
40994: LD_VAR 0 6
40998: PPUSH
40999: CALL_OW 264
41003: PUSH
41004: LD_INT 47
41006: PUSH
41007: EMPTY
41008: LIST
41009: IN
41010: IFFALSE 41031
// points := [ 67 , 45 , 75 ] ;
41012: LD_ADDR_VAR 0 9
41016: PUSH
41017: LD_INT 67
41019: PUSH
41020: LD_INT 45
41022: PUSH
41023: LD_INT 75
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: LIST
41030: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
41031: LD_VAR 0 6
41035: PPUSH
41036: CALL_OW 264
41040: PUSH
41041: LD_INT 26
41043: PUSH
41044: EMPTY
41045: LIST
41046: IN
41047: IFFALSE 41068
// points := [ 120 , 30 , 80 ] ;
41049: LD_ADDR_VAR 0 9
41053: PUSH
41054: LD_INT 120
41056: PUSH
41057: LD_INT 30
41059: PUSH
41060: LD_INT 80
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: LIST
41067: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
41068: LD_VAR 0 6
41072: PPUSH
41073: CALL_OW 264
41077: PUSH
41078: LD_INT 22
41080: PUSH
41081: EMPTY
41082: LIST
41083: IN
41084: IFFALSE 41105
// points := [ 40 , 1 , 1 ] ;
41086: LD_ADDR_VAR 0 9
41090: PUSH
41091: LD_INT 40
41093: PUSH
41094: LD_INT 1
41096: PUSH
41097: LD_INT 1
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: LIST
41104: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
41105: LD_VAR 0 6
41109: PPUSH
41110: CALL_OW 264
41114: PUSH
41115: LD_INT 29
41117: PUSH
41118: EMPTY
41119: LIST
41120: IN
41121: IFFALSE 41142
// points := [ 70 , 200 , 400 ] ;
41123: LD_ADDR_VAR 0 9
41127: PUSH
41128: LD_INT 70
41130: PUSH
41131: LD_INT 200
41133: PUSH
41134: LD_INT 400
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: LIST
41141: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
41142: LD_VAR 0 6
41146: PPUSH
41147: CALL_OW 264
41151: PUSH
41152: LD_INT 14
41154: PUSH
41155: LD_INT 53
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: IN
41162: IFFALSE 41183
// points := [ 40 , 10 , 20 ] ;
41164: LD_ADDR_VAR 0 9
41168: PUSH
41169: LD_INT 40
41171: PUSH
41172: LD_INT 10
41174: PUSH
41175: LD_INT 20
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: LIST
41182: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
41183: LD_VAR 0 6
41187: PPUSH
41188: CALL_OW 264
41192: PUSH
41193: LD_INT 9
41195: PUSH
41196: EMPTY
41197: LIST
41198: IN
41199: IFFALSE 41220
// points := [ 5 , 70 , 20 ] ;
41201: LD_ADDR_VAR 0 9
41205: PUSH
41206: LD_INT 5
41208: PUSH
41209: LD_INT 70
41211: PUSH
41212: LD_INT 20
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: LIST
41219: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
41220: LD_VAR 0 6
41224: PPUSH
41225: CALL_OW 264
41229: PUSH
41230: LD_INT 10
41232: PUSH
41233: EMPTY
41234: LIST
41235: IN
41236: IFFALSE 41257
// points := [ 35 , 110 , 70 ] ;
41238: LD_ADDR_VAR 0 9
41242: PUSH
41243: LD_INT 35
41245: PUSH
41246: LD_INT 110
41248: PUSH
41249: LD_INT 70
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: LIST
41256: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
41257: LD_VAR 0 6
41261: PPUSH
41262: CALL_OW 265
41266: PUSH
41267: LD_INT 25
41269: EQUAL
41270: IFFALSE 41291
// points := [ 80 , 65 , 100 ] ;
41272: LD_ADDR_VAR 0 9
41276: PUSH
41277: LD_INT 80
41279: PUSH
41280: LD_INT 65
41282: PUSH
41283: LD_INT 100
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: LIST
41290: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
41291: LD_VAR 0 6
41295: PPUSH
41296: CALL_OW 263
41300: PUSH
41301: LD_INT 1
41303: EQUAL
41304: IFFALSE 41339
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
41306: LD_ADDR_VAR 0 10
41310: PUSH
41311: LD_VAR 0 10
41315: PUSH
41316: LD_VAR 0 6
41320: PPUSH
41321: CALL_OW 311
41325: PPUSH
41326: LD_INT 3
41328: PPUSH
41329: CALL_OW 259
41333: PUSH
41334: LD_INT 4
41336: MUL
41337: MUL
41338: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
41339: LD_VAR 0 6
41343: PPUSH
41344: CALL_OW 263
41348: PUSH
41349: LD_INT 2
41351: EQUAL
41352: IFFALSE 41403
// begin j := IsControledBy ( i ) ;
41354: LD_ADDR_VAR 0 7
41358: PUSH
41359: LD_VAR 0 6
41363: PPUSH
41364: CALL_OW 312
41368: ST_TO_ADDR
// if j then
41369: LD_VAR 0 7
41373: IFFALSE 41403
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
41375: LD_ADDR_VAR 0 10
41379: PUSH
41380: LD_VAR 0 10
41384: PUSH
41385: LD_VAR 0 7
41389: PPUSH
41390: LD_INT 3
41392: PPUSH
41393: CALL_OW 259
41397: PUSH
41398: LD_INT 3
41400: MUL
41401: MUL
41402: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
41403: LD_VAR 0 6
41407: PPUSH
41408: CALL_OW 264
41412: PUSH
41413: LD_INT 5
41415: PUSH
41416: LD_INT 6
41418: PUSH
41419: LD_INT 46
41421: PUSH
41422: LD_INT 44
41424: PUSH
41425: LD_INT 47
41427: PUSH
41428: LD_INT 45
41430: PUSH
41431: LD_INT 28
41433: PUSH
41434: LD_INT 7
41436: PUSH
41437: LD_INT 27
41439: PUSH
41440: LD_INT 29
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: IN
41455: PUSH
41456: LD_VAR 0 1
41460: PPUSH
41461: LD_INT 52
41463: PPUSH
41464: CALL_OW 321
41468: PUSH
41469: LD_INT 2
41471: EQUAL
41472: AND
41473: IFFALSE 41490
// bpoints := bpoints * 1.2 ;
41475: LD_ADDR_VAR 0 10
41479: PUSH
41480: LD_VAR 0 10
41484: PUSH
41485: LD_REAL  1.20000000000000E+0000
41488: MUL
41489: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
41490: LD_VAR 0 6
41494: PPUSH
41495: CALL_OW 264
41499: PUSH
41500: LD_INT 6
41502: PUSH
41503: LD_INT 46
41505: PUSH
41506: LD_INT 47
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: LIST
41513: IN
41514: IFFALSE 41531
// bpoints := bpoints * 1.2 ;
41516: LD_ADDR_VAR 0 10
41520: PUSH
41521: LD_VAR 0 10
41525: PUSH
41526: LD_REAL  1.20000000000000E+0000
41529: MUL
41530: ST_TO_ADDR
// end ; unit_building :
41531: GO 41545
41533: LD_INT 3
41535: DOUBLE
41536: EQUAL
41537: IFTRUE 41541
41539: GO 41544
41541: POP
// ; end ;
41542: GO 41545
41544: POP
// for j = 1 to 3 do
41545: LD_ADDR_VAR 0 7
41549: PUSH
41550: DOUBLE
41551: LD_INT 1
41553: DEC
41554: ST_TO_ADDR
41555: LD_INT 3
41557: PUSH
41558: FOR_TO
41559: IFFALSE 41612
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41561: LD_ADDR_VAR 0 5
41565: PUSH
41566: LD_VAR 0 5
41570: PPUSH
41571: LD_VAR 0 7
41575: PPUSH
41576: LD_VAR 0 5
41580: PUSH
41581: LD_VAR 0 7
41585: ARRAY
41586: PUSH
41587: LD_VAR 0 9
41591: PUSH
41592: LD_VAR 0 7
41596: ARRAY
41597: PUSH
41598: LD_VAR 0 10
41602: MUL
41603: PLUS
41604: PPUSH
41605: CALL_OW 1
41609: ST_TO_ADDR
41610: GO 41558
41612: POP
41613: POP
// end ;
41614: GO 40097
41616: POP
41617: POP
// result := Replace ( result , 4 , tmp ) ;
41618: LD_ADDR_VAR 0 5
41622: PUSH
41623: LD_VAR 0 5
41627: PPUSH
41628: LD_INT 4
41630: PPUSH
41631: LD_VAR 0 8
41635: PPUSH
41636: CALL_OW 1
41640: ST_TO_ADDR
// end ;
41641: LD_VAR 0 5
41645: RET
// export function DangerAtRange ( unit , range ) ; begin
41646: LD_INT 0
41648: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
41649: LD_ADDR_VAR 0 3
41653: PUSH
41654: LD_VAR 0 1
41658: PPUSH
41659: CALL_OW 255
41663: PPUSH
41664: LD_VAR 0 1
41668: PPUSH
41669: CALL_OW 250
41673: PPUSH
41674: LD_VAR 0 1
41678: PPUSH
41679: CALL_OW 251
41683: PPUSH
41684: LD_VAR 0 2
41688: PPUSH
41689: CALL 39949 0 4
41693: ST_TO_ADDR
// end ;
41694: LD_VAR 0 3
41698: RET
// export function DangerInArea ( side , area ) ; begin
41699: LD_INT 0
41701: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
41702: LD_ADDR_VAR 0 3
41706: PUSH
41707: LD_VAR 0 2
41711: PPUSH
41712: LD_INT 81
41714: PUSH
41715: LD_VAR 0 1
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PPUSH
41724: CALL_OW 70
41728: ST_TO_ADDR
// end ;
41729: LD_VAR 0 3
41733: RET
// export function IsExtension ( b ) ; begin
41734: LD_INT 0
41736: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
41737: LD_ADDR_VAR 0 2
41741: PUSH
41742: LD_VAR 0 1
41746: PUSH
41747: LD_INT 23
41749: PUSH
41750: LD_INT 20
41752: PUSH
41753: LD_INT 22
41755: PUSH
41756: LD_INT 17
41758: PUSH
41759: LD_INT 24
41761: PUSH
41762: LD_INT 21
41764: PUSH
41765: LD_INT 19
41767: PUSH
41768: LD_INT 16
41770: PUSH
41771: LD_INT 25
41773: PUSH
41774: LD_INT 18
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: IN
41789: ST_TO_ADDR
// end ;
41790: LD_VAR 0 2
41794: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
41795: LD_INT 0
41797: PPUSH
41798: PPUSH
41799: PPUSH
// result := [ ] ;
41800: LD_ADDR_VAR 0 3
41804: PUSH
41805: EMPTY
41806: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
41807: LD_ADDR_VAR 0 4
41811: PUSH
41812: LD_VAR 0 2
41816: PPUSH
41817: LD_INT 21
41819: PUSH
41820: LD_INT 3
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PPUSH
41827: CALL_OW 70
41831: ST_TO_ADDR
// if not tmp then
41832: LD_VAR 0 4
41836: NOT
41837: IFFALSE 41841
// exit ;
41839: GO 41899
// for i in tmp do
41841: LD_ADDR_VAR 0 5
41845: PUSH
41846: LD_VAR 0 4
41850: PUSH
41851: FOR_IN
41852: IFFALSE 41887
// if GetBase ( i ) <> base then
41854: LD_VAR 0 5
41858: PPUSH
41859: CALL_OW 274
41863: PUSH
41864: LD_VAR 0 1
41868: NONEQUAL
41869: IFFALSE 41885
// ComLinkToBase ( base , i ) ;
41871: LD_VAR 0 1
41875: PPUSH
41876: LD_VAR 0 5
41880: PPUSH
41881: CALL_OW 169
41885: GO 41851
41887: POP
41888: POP
// result := tmp ;
41889: LD_ADDR_VAR 0 3
41893: PUSH
41894: LD_VAR 0 4
41898: ST_TO_ADDR
// end ;
41899: LD_VAR 0 3
41903: RET
// export function ComComplete ( unit , b ) ; var i ; begin
41904: LD_INT 0
41906: PPUSH
41907: PPUSH
// if BuildingStatus ( b ) = bs_build then
41908: LD_VAR 0 2
41912: PPUSH
41913: CALL_OW 461
41917: PUSH
41918: LD_INT 1
41920: EQUAL
41921: IFFALSE 41981
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
41923: LD_VAR 0 1
41927: PPUSH
41928: LD_STRING h
41930: PUSH
41931: LD_VAR 0 2
41935: PPUSH
41936: CALL_OW 250
41940: PUSH
41941: LD_VAR 0 2
41945: PPUSH
41946: CALL_OW 251
41950: PUSH
41951: LD_VAR 0 2
41955: PUSH
41956: LD_INT 0
41958: PUSH
41959: LD_INT 0
41961: PUSH
41962: LD_INT 0
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: PUSH
41974: EMPTY
41975: LIST
41976: PPUSH
41977: CALL_OW 446
// end ;
41981: LD_VAR 0 3
41985: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
41986: LD_INT 0
41988: PPUSH
41989: PPUSH
41990: PPUSH
41991: PPUSH
41992: PPUSH
41993: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
41994: LD_VAR 0 1
41998: NOT
41999: PUSH
42000: LD_VAR 0 1
42004: PPUSH
42005: CALL_OW 263
42009: PUSH
42010: LD_INT 2
42012: EQUAL
42013: NOT
42014: OR
42015: IFFALSE 42019
// exit ;
42017: GO 42335
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
42019: LD_ADDR_VAR 0 6
42023: PUSH
42024: LD_INT 22
42026: PUSH
42027: LD_VAR 0 1
42031: PPUSH
42032: CALL_OW 255
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 2
42043: PUSH
42044: LD_INT 30
42046: PUSH
42047: LD_INT 36
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 34
42056: PUSH
42057: LD_INT 31
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: LIST
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PPUSH
42073: CALL_OW 69
42077: ST_TO_ADDR
// if not tmp then
42078: LD_VAR 0 6
42082: NOT
42083: IFFALSE 42087
// exit ;
42085: GO 42335
// result := [ ] ;
42087: LD_ADDR_VAR 0 2
42091: PUSH
42092: EMPTY
42093: ST_TO_ADDR
// for i in tmp do
42094: LD_ADDR_VAR 0 3
42098: PUSH
42099: LD_VAR 0 6
42103: PUSH
42104: FOR_IN
42105: IFFALSE 42176
// begin t := UnitsInside ( i ) ;
42107: LD_ADDR_VAR 0 4
42111: PUSH
42112: LD_VAR 0 3
42116: PPUSH
42117: CALL_OW 313
42121: ST_TO_ADDR
// if t then
42122: LD_VAR 0 4
42126: IFFALSE 42174
// for j in t do
42128: LD_ADDR_VAR 0 7
42132: PUSH
42133: LD_VAR 0 4
42137: PUSH
42138: FOR_IN
42139: IFFALSE 42172
// result := Insert ( result , result + 1 , j ) ;
42141: LD_ADDR_VAR 0 2
42145: PUSH
42146: LD_VAR 0 2
42150: PPUSH
42151: LD_VAR 0 2
42155: PUSH
42156: LD_INT 1
42158: PLUS
42159: PPUSH
42160: LD_VAR 0 7
42164: PPUSH
42165: CALL_OW 2
42169: ST_TO_ADDR
42170: GO 42138
42172: POP
42173: POP
// end ;
42174: GO 42104
42176: POP
42177: POP
// if not result then
42178: LD_VAR 0 2
42182: NOT
42183: IFFALSE 42187
// exit ;
42185: GO 42335
// mech := result [ 1 ] ;
42187: LD_ADDR_VAR 0 5
42191: PUSH
42192: LD_VAR 0 2
42196: PUSH
42197: LD_INT 1
42199: ARRAY
42200: ST_TO_ADDR
// if result > 1 then
42201: LD_VAR 0 2
42205: PUSH
42206: LD_INT 1
42208: GREATER
42209: IFFALSE 42321
// for i = 2 to result do
42211: LD_ADDR_VAR 0 3
42215: PUSH
42216: DOUBLE
42217: LD_INT 2
42219: DEC
42220: ST_TO_ADDR
42221: LD_VAR 0 2
42225: PUSH
42226: FOR_TO
42227: IFFALSE 42319
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
42229: LD_ADDR_VAR 0 4
42233: PUSH
42234: LD_VAR 0 2
42238: PUSH
42239: LD_VAR 0 3
42243: ARRAY
42244: PPUSH
42245: LD_INT 3
42247: PPUSH
42248: CALL_OW 259
42252: PUSH
42253: LD_VAR 0 2
42257: PUSH
42258: LD_VAR 0 3
42262: ARRAY
42263: PPUSH
42264: CALL_OW 432
42268: MINUS
42269: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
42270: LD_VAR 0 4
42274: PUSH
42275: LD_VAR 0 5
42279: PPUSH
42280: LD_INT 3
42282: PPUSH
42283: CALL_OW 259
42287: PUSH
42288: LD_VAR 0 5
42292: PPUSH
42293: CALL_OW 432
42297: MINUS
42298: GREATEREQUAL
42299: IFFALSE 42317
// mech := result [ i ] ;
42301: LD_ADDR_VAR 0 5
42305: PUSH
42306: LD_VAR 0 2
42310: PUSH
42311: LD_VAR 0 3
42315: ARRAY
42316: ST_TO_ADDR
// end ;
42317: GO 42226
42319: POP
42320: POP
// ComLinkTo ( vehicle , mech ) ;
42321: LD_VAR 0 1
42325: PPUSH
42326: LD_VAR 0 5
42330: PPUSH
42331: CALL_OW 135
// end ;
42335: LD_VAR 0 2
42339: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
42340: LD_INT 0
42342: PPUSH
42343: PPUSH
42344: PPUSH
42345: PPUSH
42346: PPUSH
42347: PPUSH
42348: PPUSH
42349: PPUSH
42350: PPUSH
42351: PPUSH
42352: PPUSH
42353: PPUSH
42354: PPUSH
// result := [ ] ;
42355: LD_ADDR_VAR 0 7
42359: PUSH
42360: EMPTY
42361: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
42362: LD_VAR 0 1
42366: PPUSH
42367: CALL_OW 266
42371: PUSH
42372: LD_INT 0
42374: PUSH
42375: LD_INT 1
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: IN
42382: NOT
42383: IFFALSE 42387
// exit ;
42385: GO 44018
// if name then
42387: LD_VAR 0 3
42391: IFFALSE 42407
// SetBName ( base_dep , name ) ;
42393: LD_VAR 0 1
42397: PPUSH
42398: LD_VAR 0 3
42402: PPUSH
42403: CALL_OW 500
// base := GetBase ( base_dep ) ;
42407: LD_ADDR_VAR 0 15
42411: PUSH
42412: LD_VAR 0 1
42416: PPUSH
42417: CALL_OW 274
42421: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
42422: LD_ADDR_VAR 0 16
42426: PUSH
42427: LD_VAR 0 1
42431: PPUSH
42432: CALL_OW 255
42436: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
42437: LD_ADDR_VAR 0 17
42441: PUSH
42442: LD_VAR 0 1
42446: PPUSH
42447: CALL_OW 248
42451: ST_TO_ADDR
// if sources then
42452: LD_VAR 0 5
42456: IFFALSE 42503
// for i = 1 to 3 do
42458: LD_ADDR_VAR 0 8
42462: PUSH
42463: DOUBLE
42464: LD_INT 1
42466: DEC
42467: ST_TO_ADDR
42468: LD_INT 3
42470: PUSH
42471: FOR_TO
42472: IFFALSE 42501
// AddResourceType ( base , i , sources [ i ] ) ;
42474: LD_VAR 0 15
42478: PPUSH
42479: LD_VAR 0 8
42483: PPUSH
42484: LD_VAR 0 5
42488: PUSH
42489: LD_VAR 0 8
42493: ARRAY
42494: PPUSH
42495: CALL_OW 276
42499: GO 42471
42501: POP
42502: POP
// buildings := GetBaseBuildings ( base , area ) ;
42503: LD_ADDR_VAR 0 18
42507: PUSH
42508: LD_VAR 0 15
42512: PPUSH
42513: LD_VAR 0 2
42517: PPUSH
42518: CALL 41795 0 2
42522: ST_TO_ADDR
// InitHc ;
42523: CALL_OW 19
// InitUc ;
42527: CALL_OW 18
// uc_side := side ;
42531: LD_ADDR_OWVAR 20
42535: PUSH
42536: LD_VAR 0 16
42540: ST_TO_ADDR
// uc_nation := nation ;
42541: LD_ADDR_OWVAR 21
42545: PUSH
42546: LD_VAR 0 17
42550: ST_TO_ADDR
// if buildings then
42551: LD_VAR 0 18
42555: IFFALSE 43877
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42557: LD_ADDR_VAR 0 19
42561: PUSH
42562: LD_VAR 0 18
42566: PPUSH
42567: LD_INT 2
42569: PUSH
42570: LD_INT 30
42572: PUSH
42573: LD_INT 29
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 30
42582: PUSH
42583: LD_INT 30
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: LIST
42594: PPUSH
42595: CALL_OW 72
42599: ST_TO_ADDR
// if tmp then
42600: LD_VAR 0 19
42604: IFFALSE 42652
// for i in tmp do
42606: LD_ADDR_VAR 0 8
42610: PUSH
42611: LD_VAR 0 19
42615: PUSH
42616: FOR_IN
42617: IFFALSE 42650
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
42619: LD_VAR 0 8
42623: PPUSH
42624: CALL_OW 250
42628: PPUSH
42629: LD_VAR 0 8
42633: PPUSH
42634: CALL_OW 251
42638: PPUSH
42639: LD_VAR 0 16
42643: PPUSH
42644: CALL_OW 441
42648: GO 42616
42650: POP
42651: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
42652: LD_VAR 0 18
42656: PPUSH
42657: LD_INT 2
42659: PUSH
42660: LD_INT 30
42662: PUSH
42663: LD_INT 32
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 30
42672: PUSH
42673: LD_INT 33
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: LIST
42684: PPUSH
42685: CALL_OW 72
42689: IFFALSE 42777
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
42691: LD_ADDR_VAR 0 8
42695: PUSH
42696: LD_VAR 0 18
42700: PPUSH
42701: LD_INT 2
42703: PUSH
42704: LD_INT 30
42706: PUSH
42707: LD_INT 32
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 30
42716: PUSH
42717: LD_INT 33
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: LIST
42728: PPUSH
42729: CALL_OW 72
42733: PUSH
42734: FOR_IN
42735: IFFALSE 42775
// begin if not GetBWeapon ( i ) then
42737: LD_VAR 0 8
42741: PPUSH
42742: CALL_OW 269
42746: NOT
42747: IFFALSE 42773
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
42749: LD_VAR 0 8
42753: PPUSH
42754: LD_VAR 0 8
42758: PPUSH
42759: LD_VAR 0 2
42763: PPUSH
42764: CALL 44023 0 2
42768: PPUSH
42769: CALL_OW 431
// end ;
42773: GO 42734
42775: POP
42776: POP
// end ; for i = 1 to personel do
42777: LD_ADDR_VAR 0 8
42781: PUSH
42782: DOUBLE
42783: LD_INT 1
42785: DEC
42786: ST_TO_ADDR
42787: LD_VAR 0 6
42791: PUSH
42792: FOR_TO
42793: IFFALSE 43857
// begin if i > 4 then
42795: LD_VAR 0 8
42799: PUSH
42800: LD_INT 4
42802: GREATER
42803: IFFALSE 42807
// break ;
42805: GO 43857
// case i of 1 :
42807: LD_VAR 0 8
42811: PUSH
42812: LD_INT 1
42814: DOUBLE
42815: EQUAL
42816: IFTRUE 42820
42818: GO 42900
42820: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
42821: LD_ADDR_VAR 0 12
42825: PUSH
42826: LD_VAR 0 18
42830: PPUSH
42831: LD_INT 22
42833: PUSH
42834: LD_VAR 0 16
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 58
42845: PUSH
42846: EMPTY
42847: LIST
42848: PUSH
42849: LD_INT 2
42851: PUSH
42852: LD_INT 30
42854: PUSH
42855: LD_INT 32
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PUSH
42862: LD_INT 30
42864: PUSH
42865: LD_INT 4
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 30
42874: PUSH
42875: LD_INT 5
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: LIST
42892: PPUSH
42893: CALL_OW 72
42897: ST_TO_ADDR
42898: GO 43122
42900: LD_INT 2
42902: DOUBLE
42903: EQUAL
42904: IFTRUE 42908
42906: GO 42970
42908: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
42909: LD_ADDR_VAR 0 12
42913: PUSH
42914: LD_VAR 0 18
42918: PPUSH
42919: LD_INT 22
42921: PUSH
42922: LD_VAR 0 16
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 2
42933: PUSH
42934: LD_INT 30
42936: PUSH
42937: LD_INT 0
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 30
42946: PUSH
42947: LD_INT 1
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: LIST
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PPUSH
42963: CALL_OW 72
42967: ST_TO_ADDR
42968: GO 43122
42970: LD_INT 3
42972: DOUBLE
42973: EQUAL
42974: IFTRUE 42978
42976: GO 43040
42978: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
42979: LD_ADDR_VAR 0 12
42983: PUSH
42984: LD_VAR 0 18
42988: PPUSH
42989: LD_INT 22
42991: PUSH
42992: LD_VAR 0 16
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 2
43003: PUSH
43004: LD_INT 30
43006: PUSH
43007: LD_INT 2
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 30
43016: PUSH
43017: LD_INT 3
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: LIST
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PPUSH
43033: CALL_OW 72
43037: ST_TO_ADDR
43038: GO 43122
43040: LD_INT 4
43042: DOUBLE
43043: EQUAL
43044: IFTRUE 43048
43046: GO 43121
43048: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
43049: LD_ADDR_VAR 0 12
43053: PUSH
43054: LD_VAR 0 18
43058: PPUSH
43059: LD_INT 22
43061: PUSH
43062: LD_VAR 0 16
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 2
43073: PUSH
43074: LD_INT 30
43076: PUSH
43077: LD_INT 6
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 30
43086: PUSH
43087: LD_INT 7
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 30
43096: PUSH
43097: LD_INT 8
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PPUSH
43114: CALL_OW 72
43118: ST_TO_ADDR
43119: GO 43122
43121: POP
// if i = 1 then
43122: LD_VAR 0 8
43126: PUSH
43127: LD_INT 1
43129: EQUAL
43130: IFFALSE 43241
// begin tmp := [ ] ;
43132: LD_ADDR_VAR 0 19
43136: PUSH
43137: EMPTY
43138: ST_TO_ADDR
// for j in f do
43139: LD_ADDR_VAR 0 9
43143: PUSH
43144: LD_VAR 0 12
43148: PUSH
43149: FOR_IN
43150: IFFALSE 43223
// if GetBType ( j ) = b_bunker then
43152: LD_VAR 0 9
43156: PPUSH
43157: CALL_OW 266
43161: PUSH
43162: LD_INT 32
43164: EQUAL
43165: IFFALSE 43192
// tmp := Insert ( tmp , 1 , j ) else
43167: LD_ADDR_VAR 0 19
43171: PUSH
43172: LD_VAR 0 19
43176: PPUSH
43177: LD_INT 1
43179: PPUSH
43180: LD_VAR 0 9
43184: PPUSH
43185: CALL_OW 2
43189: ST_TO_ADDR
43190: GO 43221
// tmp := Insert ( tmp , tmp + 1 , j ) ;
43192: LD_ADDR_VAR 0 19
43196: PUSH
43197: LD_VAR 0 19
43201: PPUSH
43202: LD_VAR 0 19
43206: PUSH
43207: LD_INT 1
43209: PLUS
43210: PPUSH
43211: LD_VAR 0 9
43215: PPUSH
43216: CALL_OW 2
43220: ST_TO_ADDR
43221: GO 43149
43223: POP
43224: POP
// if tmp then
43225: LD_VAR 0 19
43229: IFFALSE 43241
// f := tmp ;
43231: LD_ADDR_VAR 0 12
43235: PUSH
43236: LD_VAR 0 19
43240: ST_TO_ADDR
// end ; x := personel [ i ] ;
43241: LD_ADDR_VAR 0 13
43245: PUSH
43246: LD_VAR 0 6
43250: PUSH
43251: LD_VAR 0 8
43255: ARRAY
43256: ST_TO_ADDR
// if x = - 1 then
43257: LD_VAR 0 13
43261: PUSH
43262: LD_INT 1
43264: NEG
43265: EQUAL
43266: IFFALSE 43475
// begin for j in f do
43268: LD_ADDR_VAR 0 9
43272: PUSH
43273: LD_VAR 0 12
43277: PUSH
43278: FOR_IN
43279: IFFALSE 43471
// repeat InitHc ;
43281: CALL_OW 19
// if GetBType ( j ) = b_barracks then
43285: LD_VAR 0 9
43289: PPUSH
43290: CALL_OW 266
43294: PUSH
43295: LD_INT 5
43297: EQUAL
43298: IFFALSE 43368
// begin if UnitsInside ( j ) < 3 then
43300: LD_VAR 0 9
43304: PPUSH
43305: CALL_OW 313
43309: PUSH
43310: LD_INT 3
43312: LESS
43313: IFFALSE 43349
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43315: LD_INT 0
43317: PPUSH
43318: LD_INT 5
43320: PUSH
43321: LD_INT 8
43323: PUSH
43324: LD_INT 9
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: LIST
43331: PUSH
43332: LD_VAR 0 17
43336: ARRAY
43337: PPUSH
43338: LD_VAR 0 4
43342: PPUSH
43343: CALL_OW 380
43347: GO 43366
// PrepareHuman ( false , i , skill ) ;
43349: LD_INT 0
43351: PPUSH
43352: LD_VAR 0 8
43356: PPUSH
43357: LD_VAR 0 4
43361: PPUSH
43362: CALL_OW 380
// end else
43366: GO 43385
// PrepareHuman ( false , i , skill ) ;
43368: LD_INT 0
43370: PPUSH
43371: LD_VAR 0 8
43375: PPUSH
43376: LD_VAR 0 4
43380: PPUSH
43381: CALL_OW 380
// un := CreateHuman ;
43385: LD_ADDR_VAR 0 14
43389: PUSH
43390: CALL_OW 44
43394: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43395: LD_ADDR_VAR 0 7
43399: PUSH
43400: LD_VAR 0 7
43404: PPUSH
43405: LD_INT 1
43407: PPUSH
43408: LD_VAR 0 14
43412: PPUSH
43413: CALL_OW 2
43417: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
43418: LD_VAR 0 14
43422: PPUSH
43423: LD_VAR 0 9
43427: PPUSH
43428: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
43432: LD_VAR 0 9
43436: PPUSH
43437: CALL_OW 313
43441: PUSH
43442: LD_INT 6
43444: EQUAL
43445: PUSH
43446: LD_VAR 0 9
43450: PPUSH
43451: CALL_OW 266
43455: PUSH
43456: LD_INT 32
43458: PUSH
43459: LD_INT 31
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: IN
43466: OR
43467: IFFALSE 43281
43469: GO 43278
43471: POP
43472: POP
// end else
43473: GO 43855
// for j = 1 to x do
43475: LD_ADDR_VAR 0 9
43479: PUSH
43480: DOUBLE
43481: LD_INT 1
43483: DEC
43484: ST_TO_ADDR
43485: LD_VAR 0 13
43489: PUSH
43490: FOR_TO
43491: IFFALSE 43853
// begin InitHc ;
43493: CALL_OW 19
// if not f then
43497: LD_VAR 0 12
43501: NOT
43502: IFFALSE 43591
// begin PrepareHuman ( false , i , skill ) ;
43504: LD_INT 0
43506: PPUSH
43507: LD_VAR 0 8
43511: PPUSH
43512: LD_VAR 0 4
43516: PPUSH
43517: CALL_OW 380
// un := CreateHuman ;
43521: LD_ADDR_VAR 0 14
43525: PUSH
43526: CALL_OW 44
43530: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43531: LD_ADDR_VAR 0 7
43535: PUSH
43536: LD_VAR 0 7
43540: PPUSH
43541: LD_INT 1
43543: PPUSH
43544: LD_VAR 0 14
43548: PPUSH
43549: CALL_OW 2
43553: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43554: LD_VAR 0 14
43558: PPUSH
43559: LD_VAR 0 1
43563: PPUSH
43564: CALL_OW 250
43568: PPUSH
43569: LD_VAR 0 1
43573: PPUSH
43574: CALL_OW 251
43578: PPUSH
43579: LD_INT 10
43581: PPUSH
43582: LD_INT 0
43584: PPUSH
43585: CALL_OW 50
// continue ;
43589: GO 43490
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43591: LD_VAR 0 12
43595: PUSH
43596: LD_INT 1
43598: ARRAY
43599: PPUSH
43600: CALL_OW 313
43604: PUSH
43605: LD_VAR 0 12
43609: PUSH
43610: LD_INT 1
43612: ARRAY
43613: PPUSH
43614: CALL_OW 266
43618: PUSH
43619: LD_INT 32
43621: PUSH
43622: LD_INT 31
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: IN
43629: AND
43630: PUSH
43631: LD_VAR 0 12
43635: PUSH
43636: LD_INT 1
43638: ARRAY
43639: PPUSH
43640: CALL_OW 313
43644: PUSH
43645: LD_INT 6
43647: EQUAL
43648: OR
43649: IFFALSE 43669
// f := Delete ( f , 1 ) ;
43651: LD_ADDR_VAR 0 12
43655: PUSH
43656: LD_VAR 0 12
43660: PPUSH
43661: LD_INT 1
43663: PPUSH
43664: CALL_OW 3
43668: ST_TO_ADDR
// if not f then
43669: LD_VAR 0 12
43673: NOT
43674: IFFALSE 43692
// begin x := x + 2 ;
43676: LD_ADDR_VAR 0 13
43680: PUSH
43681: LD_VAR 0 13
43685: PUSH
43686: LD_INT 2
43688: PLUS
43689: ST_TO_ADDR
// continue ;
43690: GO 43490
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
43692: LD_VAR 0 12
43696: PUSH
43697: LD_INT 1
43699: ARRAY
43700: PPUSH
43701: CALL_OW 266
43705: PUSH
43706: LD_INT 5
43708: EQUAL
43709: IFFALSE 43783
// begin if UnitsInside ( f [ 1 ] ) < 3 then
43711: LD_VAR 0 12
43715: PUSH
43716: LD_INT 1
43718: ARRAY
43719: PPUSH
43720: CALL_OW 313
43724: PUSH
43725: LD_INT 3
43727: LESS
43728: IFFALSE 43764
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43730: LD_INT 0
43732: PPUSH
43733: LD_INT 5
43735: PUSH
43736: LD_INT 8
43738: PUSH
43739: LD_INT 9
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: LIST
43746: PUSH
43747: LD_VAR 0 17
43751: ARRAY
43752: PPUSH
43753: LD_VAR 0 4
43757: PPUSH
43758: CALL_OW 380
43762: GO 43781
// PrepareHuman ( false , i , skill ) ;
43764: LD_INT 0
43766: PPUSH
43767: LD_VAR 0 8
43771: PPUSH
43772: LD_VAR 0 4
43776: PPUSH
43777: CALL_OW 380
// end else
43781: GO 43800
// PrepareHuman ( false , i , skill ) ;
43783: LD_INT 0
43785: PPUSH
43786: LD_VAR 0 8
43790: PPUSH
43791: LD_VAR 0 4
43795: PPUSH
43796: CALL_OW 380
// un := CreateHuman ;
43800: LD_ADDR_VAR 0 14
43804: PUSH
43805: CALL_OW 44
43809: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43810: LD_ADDR_VAR 0 7
43814: PUSH
43815: LD_VAR 0 7
43819: PPUSH
43820: LD_INT 1
43822: PPUSH
43823: LD_VAR 0 14
43827: PPUSH
43828: CALL_OW 2
43832: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
43833: LD_VAR 0 14
43837: PPUSH
43838: LD_VAR 0 12
43842: PUSH
43843: LD_INT 1
43845: ARRAY
43846: PPUSH
43847: CALL_OW 52
// end ;
43851: GO 43490
43853: POP
43854: POP
// end ;
43855: GO 42792
43857: POP
43858: POP
// result := result ^ buildings ;
43859: LD_ADDR_VAR 0 7
43863: PUSH
43864: LD_VAR 0 7
43868: PUSH
43869: LD_VAR 0 18
43873: ADD
43874: ST_TO_ADDR
// end else
43875: GO 44018
// begin for i = 1 to personel do
43877: LD_ADDR_VAR 0 8
43881: PUSH
43882: DOUBLE
43883: LD_INT 1
43885: DEC
43886: ST_TO_ADDR
43887: LD_VAR 0 6
43891: PUSH
43892: FOR_TO
43893: IFFALSE 44016
// begin if i > 4 then
43895: LD_VAR 0 8
43899: PUSH
43900: LD_INT 4
43902: GREATER
43903: IFFALSE 43907
// break ;
43905: GO 44016
// x := personel [ i ] ;
43907: LD_ADDR_VAR 0 13
43911: PUSH
43912: LD_VAR 0 6
43916: PUSH
43917: LD_VAR 0 8
43921: ARRAY
43922: ST_TO_ADDR
// if x = - 1 then
43923: LD_VAR 0 13
43927: PUSH
43928: LD_INT 1
43930: NEG
43931: EQUAL
43932: IFFALSE 43936
// continue ;
43934: GO 43892
// PrepareHuman ( false , i , skill ) ;
43936: LD_INT 0
43938: PPUSH
43939: LD_VAR 0 8
43943: PPUSH
43944: LD_VAR 0 4
43948: PPUSH
43949: CALL_OW 380
// un := CreateHuman ;
43953: LD_ADDR_VAR 0 14
43957: PUSH
43958: CALL_OW 44
43962: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43963: LD_VAR 0 14
43967: PPUSH
43968: LD_VAR 0 1
43972: PPUSH
43973: CALL_OW 250
43977: PPUSH
43978: LD_VAR 0 1
43982: PPUSH
43983: CALL_OW 251
43987: PPUSH
43988: LD_INT 10
43990: PPUSH
43991: LD_INT 0
43993: PPUSH
43994: CALL_OW 50
// result := result ^ un ;
43998: LD_ADDR_VAR 0 7
44002: PUSH
44003: LD_VAR 0 7
44007: PUSH
44008: LD_VAR 0 14
44012: ADD
44013: ST_TO_ADDR
// end ;
44014: GO 43892
44016: POP
44017: POP
// end ; end ;
44018: LD_VAR 0 7
44022: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
44023: LD_INT 0
44025: PPUSH
44026: PPUSH
44027: PPUSH
44028: PPUSH
44029: PPUSH
44030: PPUSH
44031: PPUSH
44032: PPUSH
44033: PPUSH
44034: PPUSH
44035: PPUSH
44036: PPUSH
44037: PPUSH
44038: PPUSH
44039: PPUSH
44040: PPUSH
// result := false ;
44041: LD_ADDR_VAR 0 3
44045: PUSH
44046: LD_INT 0
44048: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
44049: LD_VAR 0 1
44053: NOT
44054: PUSH
44055: LD_VAR 0 1
44059: PPUSH
44060: CALL_OW 266
44064: PUSH
44065: LD_INT 32
44067: PUSH
44068: LD_INT 33
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: IN
44075: NOT
44076: OR
44077: IFFALSE 44081
// exit ;
44079: GO 45217
// nat := GetNation ( tower ) ;
44081: LD_ADDR_VAR 0 12
44085: PUSH
44086: LD_VAR 0 1
44090: PPUSH
44091: CALL_OW 248
44095: ST_TO_ADDR
// side := GetSide ( tower ) ;
44096: LD_ADDR_VAR 0 16
44100: PUSH
44101: LD_VAR 0 1
44105: PPUSH
44106: CALL_OW 255
44110: ST_TO_ADDR
// x := GetX ( tower ) ;
44111: LD_ADDR_VAR 0 10
44115: PUSH
44116: LD_VAR 0 1
44120: PPUSH
44121: CALL_OW 250
44125: ST_TO_ADDR
// y := GetY ( tower ) ;
44126: LD_ADDR_VAR 0 11
44130: PUSH
44131: LD_VAR 0 1
44135: PPUSH
44136: CALL_OW 251
44140: ST_TO_ADDR
// if not x or not y then
44141: LD_VAR 0 10
44145: NOT
44146: PUSH
44147: LD_VAR 0 11
44151: NOT
44152: OR
44153: IFFALSE 44157
// exit ;
44155: GO 45217
// weapon := 0 ;
44157: LD_ADDR_VAR 0 18
44161: PUSH
44162: LD_INT 0
44164: ST_TO_ADDR
// fac_list := [ ] ;
44165: LD_ADDR_VAR 0 17
44169: PUSH
44170: EMPTY
44171: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
44172: LD_ADDR_VAR 0 6
44176: PUSH
44177: LD_VAR 0 1
44181: PPUSH
44182: CALL_OW 274
44186: PPUSH
44187: LD_VAR 0 2
44191: PPUSH
44192: CALL 41795 0 2
44196: PPUSH
44197: LD_INT 30
44199: PUSH
44200: LD_INT 3
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PPUSH
44207: CALL_OW 72
44211: ST_TO_ADDR
// if not factories then
44212: LD_VAR 0 6
44216: NOT
44217: IFFALSE 44221
// exit ;
44219: GO 45217
// for i in factories do
44221: LD_ADDR_VAR 0 8
44225: PUSH
44226: LD_VAR 0 6
44230: PUSH
44231: FOR_IN
44232: IFFALSE 44257
// fac_list := fac_list union AvailableWeaponList ( i ) ;
44234: LD_ADDR_VAR 0 17
44238: PUSH
44239: LD_VAR 0 17
44243: PUSH
44244: LD_VAR 0 8
44248: PPUSH
44249: CALL_OW 478
44253: UNION
44254: ST_TO_ADDR
44255: GO 44231
44257: POP
44258: POP
// if not fac_list then
44259: LD_VAR 0 17
44263: NOT
44264: IFFALSE 44268
// exit ;
44266: GO 45217
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
44268: LD_ADDR_VAR 0 5
44272: PUSH
44273: LD_INT 4
44275: PUSH
44276: LD_INT 5
44278: PUSH
44279: LD_INT 9
44281: PUSH
44282: LD_INT 10
44284: PUSH
44285: LD_INT 6
44287: PUSH
44288: LD_INT 7
44290: PUSH
44291: LD_INT 11
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 27
44305: PUSH
44306: LD_INT 28
44308: PUSH
44309: LD_INT 26
44311: PUSH
44312: LD_INT 30
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 43
44323: PUSH
44324: LD_INT 44
44326: PUSH
44327: LD_INT 46
44329: PUSH
44330: LD_INT 45
44332: PUSH
44333: LD_INT 47
44335: PUSH
44336: LD_INT 49
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: LIST
44351: PUSH
44352: LD_VAR 0 12
44356: ARRAY
44357: ST_TO_ADDR
// for i in list do
44358: LD_ADDR_VAR 0 8
44362: PUSH
44363: LD_VAR 0 5
44367: PUSH
44368: FOR_IN
44369: IFFALSE 44402
// if not i in fac_list then
44371: LD_VAR 0 8
44375: PUSH
44376: LD_VAR 0 17
44380: IN
44381: NOT
44382: IFFALSE 44400
// list := list diff i ;
44384: LD_ADDR_VAR 0 5
44388: PUSH
44389: LD_VAR 0 5
44393: PUSH
44394: LD_VAR 0 8
44398: DIFF
44399: ST_TO_ADDR
44400: GO 44368
44402: POP
44403: POP
// if not list then
44404: LD_VAR 0 5
44408: NOT
44409: IFFALSE 44413
// exit ;
44411: GO 45217
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
44413: LD_VAR 0 12
44417: PUSH
44418: LD_INT 3
44420: EQUAL
44421: PUSH
44422: LD_INT 49
44424: PUSH
44425: LD_VAR 0 5
44429: IN
44430: AND
44431: PUSH
44432: LD_INT 31
44434: PPUSH
44435: LD_VAR 0 16
44439: PPUSH
44440: CALL_OW 321
44444: PUSH
44445: LD_INT 2
44447: EQUAL
44448: AND
44449: IFFALSE 44509
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
44451: LD_INT 22
44453: PUSH
44454: LD_VAR 0 16
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 35
44465: PUSH
44466: LD_INT 49
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 91
44475: PUSH
44476: LD_VAR 0 1
44480: PUSH
44481: LD_INT 10
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: LIST
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: LIST
44493: PPUSH
44494: CALL_OW 69
44498: NOT
44499: IFFALSE 44509
// weapon := ru_time_lapser ;
44501: LD_ADDR_VAR 0 18
44505: PUSH
44506: LD_INT 49
44508: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
44509: LD_VAR 0 12
44513: PUSH
44514: LD_INT 1
44516: PUSH
44517: LD_INT 2
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: IN
44524: PUSH
44525: LD_INT 11
44527: PUSH
44528: LD_VAR 0 5
44532: IN
44533: PUSH
44534: LD_INT 30
44536: PUSH
44537: LD_VAR 0 5
44541: IN
44542: OR
44543: AND
44544: PUSH
44545: LD_INT 6
44547: PPUSH
44548: LD_VAR 0 16
44552: PPUSH
44553: CALL_OW 321
44557: PUSH
44558: LD_INT 2
44560: EQUAL
44561: AND
44562: IFFALSE 44727
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44564: LD_INT 22
44566: PUSH
44567: LD_VAR 0 16
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 2
44578: PUSH
44579: LD_INT 35
44581: PUSH
44582: LD_INT 11
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 35
44591: PUSH
44592: LD_INT 30
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 91
44606: PUSH
44607: LD_VAR 0 1
44611: PUSH
44612: LD_INT 18
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: LIST
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: LIST
44624: PPUSH
44625: CALL_OW 69
44629: NOT
44630: PUSH
44631: LD_INT 22
44633: PUSH
44634: LD_VAR 0 16
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 2
44645: PUSH
44646: LD_INT 30
44648: PUSH
44649: LD_INT 32
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 30
44658: PUSH
44659: LD_INT 33
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 91
44673: PUSH
44674: LD_VAR 0 1
44678: PUSH
44679: LD_INT 12
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: LIST
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: LIST
44691: PUSH
44692: EMPTY
44693: LIST
44694: PPUSH
44695: CALL_OW 69
44699: PUSH
44700: LD_INT 2
44702: GREATER
44703: AND
44704: IFFALSE 44727
// weapon := [ us_radar , ar_radar ] [ nat ] ;
44706: LD_ADDR_VAR 0 18
44710: PUSH
44711: LD_INT 11
44713: PUSH
44714: LD_INT 30
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_VAR 0 12
44725: ARRAY
44726: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
44727: LD_VAR 0 18
44731: NOT
44732: PUSH
44733: LD_INT 40
44735: PPUSH
44736: LD_VAR 0 16
44740: PPUSH
44741: CALL_OW 321
44745: PUSH
44746: LD_INT 2
44748: EQUAL
44749: AND
44750: PUSH
44751: LD_INT 7
44753: PUSH
44754: LD_VAR 0 5
44758: IN
44759: PUSH
44760: LD_INT 28
44762: PUSH
44763: LD_VAR 0 5
44767: IN
44768: OR
44769: PUSH
44770: LD_INT 45
44772: PUSH
44773: LD_VAR 0 5
44777: IN
44778: OR
44779: AND
44780: IFFALSE 45034
// begin hex := GetHexInfo ( x , y ) ;
44782: LD_ADDR_VAR 0 4
44786: PUSH
44787: LD_VAR 0 10
44791: PPUSH
44792: LD_VAR 0 11
44796: PPUSH
44797: CALL_OW 546
44801: ST_TO_ADDR
// if hex [ 1 ] then
44802: LD_VAR 0 4
44806: PUSH
44807: LD_INT 1
44809: ARRAY
44810: IFFALSE 44814
// exit ;
44812: GO 45217
// height := hex [ 2 ] ;
44814: LD_ADDR_VAR 0 15
44818: PUSH
44819: LD_VAR 0 4
44823: PUSH
44824: LD_INT 2
44826: ARRAY
44827: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
44828: LD_ADDR_VAR 0 14
44832: PUSH
44833: LD_INT 0
44835: PUSH
44836: LD_INT 2
44838: PUSH
44839: LD_INT 3
44841: PUSH
44842: LD_INT 5
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: ST_TO_ADDR
// for i in tmp do
44851: LD_ADDR_VAR 0 8
44855: PUSH
44856: LD_VAR 0 14
44860: PUSH
44861: FOR_IN
44862: IFFALSE 45032
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
44864: LD_ADDR_VAR 0 9
44868: PUSH
44869: LD_VAR 0 10
44873: PPUSH
44874: LD_VAR 0 8
44878: PPUSH
44879: LD_INT 5
44881: PPUSH
44882: CALL_OW 272
44886: PUSH
44887: LD_VAR 0 11
44891: PPUSH
44892: LD_VAR 0 8
44896: PPUSH
44897: LD_INT 5
44899: PPUSH
44900: CALL_OW 273
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
44909: LD_VAR 0 9
44913: PUSH
44914: LD_INT 1
44916: ARRAY
44917: PPUSH
44918: LD_VAR 0 9
44922: PUSH
44923: LD_INT 2
44925: ARRAY
44926: PPUSH
44927: CALL_OW 488
44931: IFFALSE 45030
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
44933: LD_ADDR_VAR 0 4
44937: PUSH
44938: LD_VAR 0 9
44942: PUSH
44943: LD_INT 1
44945: ARRAY
44946: PPUSH
44947: LD_VAR 0 9
44951: PUSH
44952: LD_INT 2
44954: ARRAY
44955: PPUSH
44956: CALL_OW 546
44960: ST_TO_ADDR
// if hex [ 1 ] then
44961: LD_VAR 0 4
44965: PUSH
44966: LD_INT 1
44968: ARRAY
44969: IFFALSE 44973
// continue ;
44971: GO 44861
// h := hex [ 2 ] ;
44973: LD_ADDR_VAR 0 13
44977: PUSH
44978: LD_VAR 0 4
44982: PUSH
44983: LD_INT 2
44985: ARRAY
44986: ST_TO_ADDR
// if h + 7 < height then
44987: LD_VAR 0 13
44991: PUSH
44992: LD_INT 7
44994: PLUS
44995: PUSH
44996: LD_VAR 0 15
45000: LESS
45001: IFFALSE 45030
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
45003: LD_ADDR_VAR 0 18
45007: PUSH
45008: LD_INT 7
45010: PUSH
45011: LD_INT 28
45013: PUSH
45014: LD_INT 45
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: LIST
45021: PUSH
45022: LD_VAR 0 12
45026: ARRAY
45027: ST_TO_ADDR
// break ;
45028: GO 45032
// end ; end ; end ;
45030: GO 44861
45032: POP
45033: POP
// end ; if not weapon then
45034: LD_VAR 0 18
45038: NOT
45039: IFFALSE 45099
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
45041: LD_ADDR_VAR 0 5
45045: PUSH
45046: LD_VAR 0 5
45050: PUSH
45051: LD_INT 11
45053: PUSH
45054: LD_INT 30
45056: PUSH
45057: LD_INT 49
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: LIST
45064: DIFF
45065: ST_TO_ADDR
// if not list then
45066: LD_VAR 0 5
45070: NOT
45071: IFFALSE 45075
// exit ;
45073: GO 45217
// weapon := list [ rand ( 1 , list ) ] ;
45075: LD_ADDR_VAR 0 18
45079: PUSH
45080: LD_VAR 0 5
45084: PUSH
45085: LD_INT 1
45087: PPUSH
45088: LD_VAR 0 5
45092: PPUSH
45093: CALL_OW 12
45097: ARRAY
45098: ST_TO_ADDR
// end ; if weapon then
45099: LD_VAR 0 18
45103: IFFALSE 45217
// begin tmp := CostOfWeapon ( weapon ) ;
45105: LD_ADDR_VAR 0 14
45109: PUSH
45110: LD_VAR 0 18
45114: PPUSH
45115: CALL_OW 451
45119: ST_TO_ADDR
// j := GetBase ( tower ) ;
45120: LD_ADDR_VAR 0 9
45124: PUSH
45125: LD_VAR 0 1
45129: PPUSH
45130: CALL_OW 274
45134: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
45135: LD_VAR 0 9
45139: PPUSH
45140: LD_INT 1
45142: PPUSH
45143: CALL_OW 275
45147: PUSH
45148: LD_VAR 0 14
45152: PUSH
45153: LD_INT 1
45155: ARRAY
45156: GREATEREQUAL
45157: PUSH
45158: LD_VAR 0 9
45162: PPUSH
45163: LD_INT 2
45165: PPUSH
45166: CALL_OW 275
45170: PUSH
45171: LD_VAR 0 14
45175: PUSH
45176: LD_INT 2
45178: ARRAY
45179: GREATEREQUAL
45180: AND
45181: PUSH
45182: LD_VAR 0 9
45186: PPUSH
45187: LD_INT 3
45189: PPUSH
45190: CALL_OW 275
45194: PUSH
45195: LD_VAR 0 14
45199: PUSH
45200: LD_INT 3
45202: ARRAY
45203: GREATEREQUAL
45204: AND
45205: IFFALSE 45217
// result := weapon ;
45207: LD_ADDR_VAR 0 3
45211: PUSH
45212: LD_VAR 0 18
45216: ST_TO_ADDR
// end ; end ;
45217: LD_VAR 0 3
45221: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
45222: LD_INT 0
45224: PPUSH
45225: PPUSH
// result := true ;
45226: LD_ADDR_VAR 0 3
45230: PUSH
45231: LD_INT 1
45233: ST_TO_ADDR
// if array1 = array2 then
45234: LD_VAR 0 1
45238: PUSH
45239: LD_VAR 0 2
45243: EQUAL
45244: IFFALSE 45304
// begin for i = 1 to array1 do
45246: LD_ADDR_VAR 0 4
45250: PUSH
45251: DOUBLE
45252: LD_INT 1
45254: DEC
45255: ST_TO_ADDR
45256: LD_VAR 0 1
45260: PUSH
45261: FOR_TO
45262: IFFALSE 45300
// if array1 [ i ] <> array2 [ i ] then
45264: LD_VAR 0 1
45268: PUSH
45269: LD_VAR 0 4
45273: ARRAY
45274: PUSH
45275: LD_VAR 0 2
45279: PUSH
45280: LD_VAR 0 4
45284: ARRAY
45285: NONEQUAL
45286: IFFALSE 45298
// begin result := false ;
45288: LD_ADDR_VAR 0 3
45292: PUSH
45293: LD_INT 0
45295: ST_TO_ADDR
// break ;
45296: GO 45300
// end ;
45298: GO 45261
45300: POP
45301: POP
// end else
45302: GO 45312
// result := false ;
45304: LD_ADDR_VAR 0 3
45308: PUSH
45309: LD_INT 0
45311: ST_TO_ADDR
// end ;
45312: LD_VAR 0 3
45316: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
45317: LD_INT 0
45319: PPUSH
45320: PPUSH
45321: PPUSH
// pom := GetBase ( fac ) ;
45322: LD_ADDR_VAR 0 5
45326: PUSH
45327: LD_VAR 0 1
45331: PPUSH
45332: CALL_OW 274
45336: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
45337: LD_ADDR_VAR 0 4
45341: PUSH
45342: LD_VAR 0 2
45346: PUSH
45347: LD_INT 1
45349: ARRAY
45350: PPUSH
45351: LD_VAR 0 2
45355: PUSH
45356: LD_INT 2
45358: ARRAY
45359: PPUSH
45360: LD_VAR 0 2
45364: PUSH
45365: LD_INT 3
45367: ARRAY
45368: PPUSH
45369: LD_VAR 0 2
45373: PUSH
45374: LD_INT 4
45376: ARRAY
45377: PPUSH
45378: CALL_OW 449
45382: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45383: LD_ADDR_VAR 0 3
45387: PUSH
45388: LD_VAR 0 5
45392: PPUSH
45393: LD_INT 1
45395: PPUSH
45396: CALL_OW 275
45400: PUSH
45401: LD_VAR 0 4
45405: PUSH
45406: LD_INT 1
45408: ARRAY
45409: GREATEREQUAL
45410: PUSH
45411: LD_VAR 0 5
45415: PPUSH
45416: LD_INT 2
45418: PPUSH
45419: CALL_OW 275
45423: PUSH
45424: LD_VAR 0 4
45428: PUSH
45429: LD_INT 2
45431: ARRAY
45432: GREATEREQUAL
45433: AND
45434: PUSH
45435: LD_VAR 0 5
45439: PPUSH
45440: LD_INT 3
45442: PPUSH
45443: CALL_OW 275
45447: PUSH
45448: LD_VAR 0 4
45452: PUSH
45453: LD_INT 3
45455: ARRAY
45456: GREATEREQUAL
45457: AND
45458: ST_TO_ADDR
// end ;
45459: LD_VAR 0 3
45463: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
45464: LD_INT 0
45466: PPUSH
45467: PPUSH
45468: PPUSH
45469: PPUSH
// pom := GetBase ( building ) ;
45470: LD_ADDR_VAR 0 3
45474: PUSH
45475: LD_VAR 0 1
45479: PPUSH
45480: CALL_OW 274
45484: ST_TO_ADDR
// if not pom then
45485: LD_VAR 0 3
45489: NOT
45490: IFFALSE 45494
// exit ;
45492: GO 45664
// btype := GetBType ( building ) ;
45494: LD_ADDR_VAR 0 5
45498: PUSH
45499: LD_VAR 0 1
45503: PPUSH
45504: CALL_OW 266
45508: ST_TO_ADDR
// if btype = b_armoury then
45509: LD_VAR 0 5
45513: PUSH
45514: LD_INT 4
45516: EQUAL
45517: IFFALSE 45527
// btype := b_barracks ;
45519: LD_ADDR_VAR 0 5
45523: PUSH
45524: LD_INT 5
45526: ST_TO_ADDR
// if btype = b_depot then
45527: LD_VAR 0 5
45531: PUSH
45532: LD_INT 0
45534: EQUAL
45535: IFFALSE 45545
// btype := b_warehouse ;
45537: LD_ADDR_VAR 0 5
45541: PUSH
45542: LD_INT 1
45544: ST_TO_ADDR
// if btype = b_workshop then
45545: LD_VAR 0 5
45549: PUSH
45550: LD_INT 2
45552: EQUAL
45553: IFFALSE 45563
// btype := b_factory ;
45555: LD_ADDR_VAR 0 5
45559: PUSH
45560: LD_INT 3
45562: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45563: LD_ADDR_VAR 0 4
45567: PUSH
45568: LD_VAR 0 5
45572: PPUSH
45573: LD_VAR 0 1
45577: PPUSH
45578: CALL_OW 248
45582: PPUSH
45583: CALL_OW 450
45587: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45588: LD_ADDR_VAR 0 2
45592: PUSH
45593: LD_VAR 0 3
45597: PPUSH
45598: LD_INT 1
45600: PPUSH
45601: CALL_OW 275
45605: PUSH
45606: LD_VAR 0 4
45610: PUSH
45611: LD_INT 1
45613: ARRAY
45614: GREATEREQUAL
45615: PUSH
45616: LD_VAR 0 3
45620: PPUSH
45621: LD_INT 2
45623: PPUSH
45624: CALL_OW 275
45628: PUSH
45629: LD_VAR 0 4
45633: PUSH
45634: LD_INT 2
45636: ARRAY
45637: GREATEREQUAL
45638: AND
45639: PUSH
45640: LD_VAR 0 3
45644: PPUSH
45645: LD_INT 3
45647: PPUSH
45648: CALL_OW 275
45652: PUSH
45653: LD_VAR 0 4
45657: PUSH
45658: LD_INT 3
45660: ARRAY
45661: GREATEREQUAL
45662: AND
45663: ST_TO_ADDR
// end ;
45664: LD_VAR 0 2
45668: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
45669: LD_INT 0
45671: PPUSH
45672: PPUSH
45673: PPUSH
// pom := GetBase ( building ) ;
45674: LD_ADDR_VAR 0 4
45678: PUSH
45679: LD_VAR 0 1
45683: PPUSH
45684: CALL_OW 274
45688: ST_TO_ADDR
// if not pom then
45689: LD_VAR 0 4
45693: NOT
45694: IFFALSE 45698
// exit ;
45696: GO 45799
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45698: LD_ADDR_VAR 0 5
45702: PUSH
45703: LD_VAR 0 2
45707: PPUSH
45708: LD_VAR 0 1
45712: PPUSH
45713: CALL_OW 248
45717: PPUSH
45718: CALL_OW 450
45722: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45723: LD_ADDR_VAR 0 3
45727: PUSH
45728: LD_VAR 0 4
45732: PPUSH
45733: LD_INT 1
45735: PPUSH
45736: CALL_OW 275
45740: PUSH
45741: LD_VAR 0 5
45745: PUSH
45746: LD_INT 1
45748: ARRAY
45749: GREATEREQUAL
45750: PUSH
45751: LD_VAR 0 4
45755: PPUSH
45756: LD_INT 2
45758: PPUSH
45759: CALL_OW 275
45763: PUSH
45764: LD_VAR 0 5
45768: PUSH
45769: LD_INT 2
45771: ARRAY
45772: GREATEREQUAL
45773: AND
45774: PUSH
45775: LD_VAR 0 4
45779: PPUSH
45780: LD_INT 3
45782: PPUSH
45783: CALL_OW 275
45787: PUSH
45788: LD_VAR 0 5
45792: PUSH
45793: LD_INT 3
45795: ARRAY
45796: GREATEREQUAL
45797: AND
45798: ST_TO_ADDR
// end ;
45799: LD_VAR 0 3
45803: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
45804: LD_INT 0
45806: PPUSH
45807: PPUSH
45808: PPUSH
45809: PPUSH
45810: PPUSH
45811: PPUSH
45812: PPUSH
45813: PPUSH
45814: PPUSH
45815: PPUSH
// result := false ;
45816: LD_ADDR_VAR 0 6
45820: PUSH
45821: LD_INT 0
45823: ST_TO_ADDR
// if not base or not btype or not x or not y then
45824: LD_VAR 0 1
45828: NOT
45829: PUSH
45830: LD_VAR 0 2
45834: NOT
45835: OR
45836: PUSH
45837: LD_VAR 0 3
45841: NOT
45842: OR
45843: PUSH
45844: LD_VAR 0 4
45848: NOT
45849: OR
45850: IFFALSE 45854
// exit ;
45852: GO 46463
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
45854: LD_ADDR_VAR 0 12
45858: PUSH
45859: LD_VAR 0 2
45863: PPUSH
45864: LD_VAR 0 3
45868: PPUSH
45869: LD_VAR 0 4
45873: PPUSH
45874: LD_VAR 0 5
45878: PPUSH
45879: LD_VAR 0 1
45883: PUSH
45884: LD_INT 1
45886: ARRAY
45887: PPUSH
45888: CALL_OW 248
45892: PPUSH
45893: LD_INT 0
45895: PPUSH
45896: CALL 47300 0 6
45900: ST_TO_ADDR
// if not hexes then
45901: LD_VAR 0 12
45905: NOT
45906: IFFALSE 45910
// exit ;
45908: GO 46463
// for i = 1 to hexes do
45910: LD_ADDR_VAR 0 7
45914: PUSH
45915: DOUBLE
45916: LD_INT 1
45918: DEC
45919: ST_TO_ADDR
45920: LD_VAR 0 12
45924: PUSH
45925: FOR_TO
45926: IFFALSE 46461
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45928: LD_ADDR_VAR 0 11
45932: PUSH
45933: LD_VAR 0 12
45937: PUSH
45938: LD_VAR 0 7
45942: ARRAY
45943: PUSH
45944: LD_INT 1
45946: ARRAY
45947: PPUSH
45948: LD_VAR 0 12
45952: PUSH
45953: LD_VAR 0 7
45957: ARRAY
45958: PUSH
45959: LD_INT 2
45961: ARRAY
45962: PPUSH
45963: CALL_OW 428
45967: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
45968: LD_VAR 0 12
45972: PUSH
45973: LD_VAR 0 7
45977: ARRAY
45978: PUSH
45979: LD_INT 1
45981: ARRAY
45982: PPUSH
45983: LD_VAR 0 12
45987: PUSH
45988: LD_VAR 0 7
45992: ARRAY
45993: PUSH
45994: LD_INT 2
45996: ARRAY
45997: PPUSH
45998: CALL_OW 351
46002: PUSH
46003: LD_VAR 0 12
46007: PUSH
46008: LD_VAR 0 7
46012: ARRAY
46013: PUSH
46014: LD_INT 1
46016: ARRAY
46017: PPUSH
46018: LD_VAR 0 12
46022: PUSH
46023: LD_VAR 0 7
46027: ARRAY
46028: PUSH
46029: LD_INT 2
46031: ARRAY
46032: PPUSH
46033: CALL_OW 488
46037: NOT
46038: OR
46039: PUSH
46040: LD_VAR 0 11
46044: PPUSH
46045: CALL_OW 247
46049: PUSH
46050: LD_INT 3
46052: EQUAL
46053: OR
46054: IFFALSE 46060
// exit ;
46056: POP
46057: POP
46058: GO 46463
// if not tmp or not tmp in base then
46060: LD_VAR 0 11
46064: NOT
46065: PUSH
46066: LD_VAR 0 11
46070: PUSH
46071: LD_VAR 0 1
46075: IN
46076: NOT
46077: OR
46078: IFFALSE 46082
// continue ;
46080: GO 45925
// result := true ;
46082: LD_ADDR_VAR 0 6
46086: PUSH
46087: LD_INT 1
46089: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
46090: LD_ADDR_VAR 0 15
46094: PUSH
46095: LD_VAR 0 1
46099: PPUSH
46100: LD_INT 22
46102: PUSH
46103: LD_VAR 0 11
46107: PPUSH
46108: CALL_OW 255
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 2
46119: PUSH
46120: LD_INT 30
46122: PUSH
46123: LD_INT 0
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 30
46132: PUSH
46133: LD_INT 1
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: LIST
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PPUSH
46149: CALL_OW 72
46153: ST_TO_ADDR
// if dep then
46154: LD_VAR 0 15
46158: IFFALSE 46294
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
46160: LD_ADDR_VAR 0 14
46164: PUSH
46165: LD_VAR 0 15
46169: PUSH
46170: LD_INT 1
46172: ARRAY
46173: PPUSH
46174: CALL_OW 250
46178: PPUSH
46179: LD_VAR 0 15
46183: PUSH
46184: LD_INT 1
46186: ARRAY
46187: PPUSH
46188: CALL_OW 254
46192: PPUSH
46193: LD_INT 5
46195: PPUSH
46196: CALL_OW 272
46200: PUSH
46201: LD_VAR 0 15
46205: PUSH
46206: LD_INT 1
46208: ARRAY
46209: PPUSH
46210: CALL_OW 251
46214: PPUSH
46215: LD_VAR 0 15
46219: PUSH
46220: LD_INT 1
46222: ARRAY
46223: PPUSH
46224: CALL_OW 254
46228: PPUSH
46229: LD_INT 5
46231: PPUSH
46232: CALL_OW 273
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
46241: LD_VAR 0 14
46245: PUSH
46246: LD_INT 1
46248: ARRAY
46249: PPUSH
46250: LD_VAR 0 14
46254: PUSH
46255: LD_INT 2
46257: ARRAY
46258: PPUSH
46259: CALL_OW 488
46263: IFFALSE 46294
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
46265: LD_VAR 0 11
46269: PPUSH
46270: LD_VAR 0 14
46274: PUSH
46275: LD_INT 1
46277: ARRAY
46278: PPUSH
46279: LD_VAR 0 14
46283: PUSH
46284: LD_INT 2
46286: ARRAY
46287: PPUSH
46288: CALL_OW 111
// continue ;
46292: GO 45925
// end ; end ; r := GetDir ( tmp ) ;
46294: LD_ADDR_VAR 0 13
46298: PUSH
46299: LD_VAR 0 11
46303: PPUSH
46304: CALL_OW 254
46308: ST_TO_ADDR
// if r = 5 then
46309: LD_VAR 0 13
46313: PUSH
46314: LD_INT 5
46316: EQUAL
46317: IFFALSE 46327
// r := 0 ;
46319: LD_ADDR_VAR 0 13
46323: PUSH
46324: LD_INT 0
46326: ST_TO_ADDR
// for j = r to 5 do
46327: LD_ADDR_VAR 0 8
46331: PUSH
46332: DOUBLE
46333: LD_VAR 0 13
46337: DEC
46338: ST_TO_ADDR
46339: LD_INT 5
46341: PUSH
46342: FOR_TO
46343: IFFALSE 46457
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
46345: LD_ADDR_VAR 0 9
46349: PUSH
46350: LD_VAR 0 11
46354: PPUSH
46355: CALL_OW 250
46359: PPUSH
46360: LD_VAR 0 8
46364: PPUSH
46365: LD_INT 2
46367: PPUSH
46368: CALL_OW 272
46372: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
46373: LD_ADDR_VAR 0 10
46377: PUSH
46378: LD_VAR 0 11
46382: PPUSH
46383: CALL_OW 251
46387: PPUSH
46388: LD_VAR 0 8
46392: PPUSH
46393: LD_INT 2
46395: PPUSH
46396: CALL_OW 273
46400: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
46401: LD_VAR 0 9
46405: PPUSH
46406: LD_VAR 0 10
46410: PPUSH
46411: CALL_OW 488
46415: PUSH
46416: LD_VAR 0 9
46420: PPUSH
46421: LD_VAR 0 10
46425: PPUSH
46426: CALL_OW 428
46430: NOT
46431: AND
46432: IFFALSE 46455
// begin ComMoveXY ( tmp , _x , _y ) ;
46434: LD_VAR 0 11
46438: PPUSH
46439: LD_VAR 0 9
46443: PPUSH
46444: LD_VAR 0 10
46448: PPUSH
46449: CALL_OW 111
// break ;
46453: GO 46457
// end ; end ;
46455: GO 46342
46457: POP
46458: POP
// end ;
46459: GO 45925
46461: POP
46462: POP
// end ;
46463: LD_VAR 0 6
46467: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
46468: LD_INT 0
46470: PPUSH
46471: PPUSH
46472: PPUSH
46473: PPUSH
46474: PPUSH
46475: PPUSH
46476: PPUSH
46477: PPUSH
46478: PPUSH
46479: PPUSH
// result := false ;
46480: LD_ADDR_VAR 0 6
46484: PUSH
46485: LD_INT 0
46487: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
46488: LD_VAR 0 1
46492: NOT
46493: PUSH
46494: LD_VAR 0 1
46498: PPUSH
46499: CALL_OW 266
46503: PUSH
46504: LD_INT 0
46506: PUSH
46507: LD_INT 1
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: IN
46514: NOT
46515: OR
46516: PUSH
46517: LD_VAR 0 2
46521: NOT
46522: OR
46523: PUSH
46524: LD_VAR 0 5
46528: PUSH
46529: LD_INT 0
46531: PUSH
46532: LD_INT 1
46534: PUSH
46535: LD_INT 2
46537: PUSH
46538: LD_INT 3
46540: PUSH
46541: LD_INT 4
46543: PUSH
46544: LD_INT 5
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: IN
46555: NOT
46556: OR
46557: PUSH
46558: LD_VAR 0 3
46562: PPUSH
46563: LD_VAR 0 4
46567: PPUSH
46568: CALL_OW 488
46572: NOT
46573: OR
46574: IFFALSE 46578
// exit ;
46576: GO 47295
// pom := GetBase ( depot ) ;
46578: LD_ADDR_VAR 0 10
46582: PUSH
46583: LD_VAR 0 1
46587: PPUSH
46588: CALL_OW 274
46592: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46593: LD_ADDR_VAR 0 11
46597: PUSH
46598: LD_VAR 0 2
46602: PPUSH
46603: LD_VAR 0 1
46607: PPUSH
46608: CALL_OW 248
46612: PPUSH
46613: CALL_OW 450
46617: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
46618: LD_VAR 0 10
46622: PPUSH
46623: LD_INT 1
46625: PPUSH
46626: CALL_OW 275
46630: PUSH
46631: LD_VAR 0 11
46635: PUSH
46636: LD_INT 1
46638: ARRAY
46639: GREATEREQUAL
46640: PUSH
46641: LD_VAR 0 10
46645: PPUSH
46646: LD_INT 2
46648: PPUSH
46649: CALL_OW 275
46653: PUSH
46654: LD_VAR 0 11
46658: PUSH
46659: LD_INT 2
46661: ARRAY
46662: GREATEREQUAL
46663: AND
46664: PUSH
46665: LD_VAR 0 10
46669: PPUSH
46670: LD_INT 3
46672: PPUSH
46673: CALL_OW 275
46677: PUSH
46678: LD_VAR 0 11
46682: PUSH
46683: LD_INT 3
46685: ARRAY
46686: GREATEREQUAL
46687: AND
46688: NOT
46689: IFFALSE 46693
// exit ;
46691: GO 47295
// if GetBType ( depot ) = b_depot then
46693: LD_VAR 0 1
46697: PPUSH
46698: CALL_OW 266
46702: PUSH
46703: LD_INT 0
46705: EQUAL
46706: IFFALSE 46718
// dist := 28 else
46708: LD_ADDR_VAR 0 14
46712: PUSH
46713: LD_INT 28
46715: ST_TO_ADDR
46716: GO 46726
// dist := 36 ;
46718: LD_ADDR_VAR 0 14
46722: PUSH
46723: LD_INT 36
46725: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
46726: LD_VAR 0 1
46730: PPUSH
46731: LD_VAR 0 3
46735: PPUSH
46736: LD_VAR 0 4
46740: PPUSH
46741: CALL_OW 297
46745: PUSH
46746: LD_VAR 0 14
46750: GREATER
46751: IFFALSE 46755
// exit ;
46753: GO 47295
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
46755: LD_ADDR_VAR 0 12
46759: PUSH
46760: LD_VAR 0 2
46764: PPUSH
46765: LD_VAR 0 3
46769: PPUSH
46770: LD_VAR 0 4
46774: PPUSH
46775: LD_VAR 0 5
46779: PPUSH
46780: LD_VAR 0 1
46784: PPUSH
46785: CALL_OW 248
46789: PPUSH
46790: LD_INT 0
46792: PPUSH
46793: CALL 47300 0 6
46797: ST_TO_ADDR
// if not hexes then
46798: LD_VAR 0 12
46802: NOT
46803: IFFALSE 46807
// exit ;
46805: GO 47295
// hex := GetHexInfo ( x , y ) ;
46807: LD_ADDR_VAR 0 15
46811: PUSH
46812: LD_VAR 0 3
46816: PPUSH
46817: LD_VAR 0 4
46821: PPUSH
46822: CALL_OW 546
46826: ST_TO_ADDR
// if hex [ 1 ] then
46827: LD_VAR 0 15
46831: PUSH
46832: LD_INT 1
46834: ARRAY
46835: IFFALSE 46839
// exit ;
46837: GO 47295
// height := hex [ 2 ] ;
46839: LD_ADDR_VAR 0 13
46843: PUSH
46844: LD_VAR 0 15
46848: PUSH
46849: LD_INT 2
46851: ARRAY
46852: ST_TO_ADDR
// for i = 1 to hexes do
46853: LD_ADDR_VAR 0 7
46857: PUSH
46858: DOUBLE
46859: LD_INT 1
46861: DEC
46862: ST_TO_ADDR
46863: LD_VAR 0 12
46867: PUSH
46868: FOR_TO
46869: IFFALSE 47199
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
46871: LD_VAR 0 12
46875: PUSH
46876: LD_VAR 0 7
46880: ARRAY
46881: PUSH
46882: LD_INT 1
46884: ARRAY
46885: PPUSH
46886: LD_VAR 0 12
46890: PUSH
46891: LD_VAR 0 7
46895: ARRAY
46896: PUSH
46897: LD_INT 2
46899: ARRAY
46900: PPUSH
46901: CALL_OW 488
46905: NOT
46906: PUSH
46907: LD_VAR 0 12
46911: PUSH
46912: LD_VAR 0 7
46916: ARRAY
46917: PUSH
46918: LD_INT 1
46920: ARRAY
46921: PPUSH
46922: LD_VAR 0 12
46926: PUSH
46927: LD_VAR 0 7
46931: ARRAY
46932: PUSH
46933: LD_INT 2
46935: ARRAY
46936: PPUSH
46937: CALL_OW 428
46941: PUSH
46942: LD_INT 0
46944: GREATER
46945: OR
46946: PUSH
46947: LD_VAR 0 12
46951: PUSH
46952: LD_VAR 0 7
46956: ARRAY
46957: PUSH
46958: LD_INT 1
46960: ARRAY
46961: PPUSH
46962: LD_VAR 0 12
46966: PUSH
46967: LD_VAR 0 7
46971: ARRAY
46972: PUSH
46973: LD_INT 2
46975: ARRAY
46976: PPUSH
46977: CALL_OW 351
46981: OR
46982: IFFALSE 46988
// exit ;
46984: POP
46985: POP
46986: GO 47295
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46988: LD_ADDR_VAR 0 8
46992: PUSH
46993: LD_VAR 0 12
46997: PUSH
46998: LD_VAR 0 7
47002: ARRAY
47003: PUSH
47004: LD_INT 1
47006: ARRAY
47007: PPUSH
47008: LD_VAR 0 12
47012: PUSH
47013: LD_VAR 0 7
47017: ARRAY
47018: PUSH
47019: LD_INT 2
47021: ARRAY
47022: PPUSH
47023: CALL_OW 546
47027: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
47028: LD_VAR 0 8
47032: PUSH
47033: LD_INT 1
47035: ARRAY
47036: PUSH
47037: LD_VAR 0 8
47041: PUSH
47042: LD_INT 2
47044: ARRAY
47045: PUSH
47046: LD_VAR 0 13
47050: PUSH
47051: LD_INT 2
47053: PLUS
47054: GREATER
47055: OR
47056: PUSH
47057: LD_VAR 0 8
47061: PUSH
47062: LD_INT 2
47064: ARRAY
47065: PUSH
47066: LD_VAR 0 13
47070: PUSH
47071: LD_INT 2
47073: MINUS
47074: LESS
47075: OR
47076: PUSH
47077: LD_VAR 0 8
47081: PUSH
47082: LD_INT 3
47084: ARRAY
47085: PUSH
47086: LD_INT 0
47088: PUSH
47089: LD_INT 8
47091: PUSH
47092: LD_INT 9
47094: PUSH
47095: LD_INT 10
47097: PUSH
47098: LD_INT 11
47100: PUSH
47101: LD_INT 12
47103: PUSH
47104: LD_INT 13
47106: PUSH
47107: LD_INT 16
47109: PUSH
47110: LD_INT 17
47112: PUSH
47113: LD_INT 18
47115: PUSH
47116: LD_INT 19
47118: PUSH
47119: LD_INT 20
47121: PUSH
47122: LD_INT 21
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: IN
47140: NOT
47141: OR
47142: PUSH
47143: LD_VAR 0 8
47147: PUSH
47148: LD_INT 5
47150: ARRAY
47151: NOT
47152: OR
47153: PUSH
47154: LD_VAR 0 8
47158: PUSH
47159: LD_INT 6
47161: ARRAY
47162: PUSH
47163: LD_INT 1
47165: PUSH
47166: LD_INT 2
47168: PUSH
47169: LD_INT 7
47171: PUSH
47172: LD_INT 9
47174: PUSH
47175: LD_INT 10
47177: PUSH
47178: LD_INT 11
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: IN
47189: NOT
47190: OR
47191: IFFALSE 47197
// exit ;
47193: POP
47194: POP
47195: GO 47295
// end ;
47197: GO 46868
47199: POP
47200: POP
// side := GetSide ( depot ) ;
47201: LD_ADDR_VAR 0 9
47205: PUSH
47206: LD_VAR 0 1
47210: PPUSH
47211: CALL_OW 255
47215: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
47216: LD_VAR 0 9
47220: PPUSH
47221: LD_VAR 0 3
47225: PPUSH
47226: LD_VAR 0 4
47230: PPUSH
47231: LD_INT 20
47233: PPUSH
47234: CALL 39949 0 4
47238: PUSH
47239: LD_INT 4
47241: ARRAY
47242: IFFALSE 47246
// exit ;
47244: GO 47295
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
47246: LD_VAR 0 2
47250: PUSH
47251: LD_INT 29
47253: PUSH
47254: LD_INT 30
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: IN
47261: PUSH
47262: LD_VAR 0 3
47266: PPUSH
47267: LD_VAR 0 4
47271: PPUSH
47272: LD_VAR 0 9
47276: PPUSH
47277: CALL_OW 440
47281: NOT
47282: AND
47283: IFFALSE 47287
// exit ;
47285: GO 47295
// result := true ;
47287: LD_ADDR_VAR 0 6
47291: PUSH
47292: LD_INT 1
47294: ST_TO_ADDR
// end ;
47295: LD_VAR 0 6
47299: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
47300: LD_INT 0
47302: PPUSH
47303: PPUSH
47304: PPUSH
47305: PPUSH
47306: PPUSH
47307: PPUSH
47308: PPUSH
47309: PPUSH
47310: PPUSH
47311: PPUSH
47312: PPUSH
47313: PPUSH
47314: PPUSH
47315: PPUSH
47316: PPUSH
47317: PPUSH
47318: PPUSH
47319: PPUSH
47320: PPUSH
47321: PPUSH
47322: PPUSH
47323: PPUSH
47324: PPUSH
47325: PPUSH
47326: PPUSH
47327: PPUSH
47328: PPUSH
47329: PPUSH
47330: PPUSH
47331: PPUSH
47332: PPUSH
47333: PPUSH
47334: PPUSH
47335: PPUSH
47336: PPUSH
47337: PPUSH
47338: PPUSH
47339: PPUSH
47340: PPUSH
47341: PPUSH
47342: PPUSH
47343: PPUSH
47344: PPUSH
47345: PPUSH
47346: PPUSH
47347: PPUSH
47348: PPUSH
47349: PPUSH
47350: PPUSH
47351: PPUSH
47352: PPUSH
47353: PPUSH
47354: PPUSH
47355: PPUSH
47356: PPUSH
47357: PPUSH
47358: PPUSH
47359: PPUSH
// result = [ ] ;
47360: LD_ADDR_VAR 0 7
47364: PUSH
47365: EMPTY
47366: ST_TO_ADDR
// temp_list = [ ] ;
47367: LD_ADDR_VAR 0 9
47371: PUSH
47372: EMPTY
47373: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
47374: LD_VAR 0 4
47378: PUSH
47379: LD_INT 0
47381: PUSH
47382: LD_INT 1
47384: PUSH
47385: LD_INT 2
47387: PUSH
47388: LD_INT 3
47390: PUSH
47391: LD_INT 4
47393: PUSH
47394: LD_INT 5
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: IN
47405: NOT
47406: PUSH
47407: LD_VAR 0 1
47411: PUSH
47412: LD_INT 0
47414: PUSH
47415: LD_INT 1
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: IN
47422: PUSH
47423: LD_VAR 0 5
47427: PUSH
47428: LD_INT 1
47430: PUSH
47431: LD_INT 2
47433: PUSH
47434: LD_INT 3
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: LIST
47441: IN
47442: NOT
47443: AND
47444: OR
47445: IFFALSE 47449
// exit ;
47447: GO 65840
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
47449: LD_VAR 0 1
47453: PUSH
47454: LD_INT 6
47456: PUSH
47457: LD_INT 7
47459: PUSH
47460: LD_INT 8
47462: PUSH
47463: LD_INT 13
47465: PUSH
47466: LD_INT 12
47468: PUSH
47469: LD_INT 15
47471: PUSH
47472: LD_INT 11
47474: PUSH
47475: LD_INT 14
47477: PUSH
47478: LD_INT 10
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: IN
47492: IFFALSE 47502
// btype = b_lab ;
47494: LD_ADDR_VAR 0 1
47498: PUSH
47499: LD_INT 6
47501: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
47502: LD_VAR 0 6
47506: PUSH
47507: LD_INT 0
47509: PUSH
47510: LD_INT 1
47512: PUSH
47513: LD_INT 2
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: LIST
47520: IN
47521: NOT
47522: PUSH
47523: LD_VAR 0 1
47527: PUSH
47528: LD_INT 0
47530: PUSH
47531: LD_INT 1
47533: PUSH
47534: LD_INT 2
47536: PUSH
47537: LD_INT 3
47539: PUSH
47540: LD_INT 6
47542: PUSH
47543: LD_INT 36
47545: PUSH
47546: LD_INT 4
47548: PUSH
47549: LD_INT 5
47551: PUSH
47552: LD_INT 31
47554: PUSH
47555: LD_INT 32
47557: PUSH
47558: LD_INT 33
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: IN
47574: NOT
47575: PUSH
47576: LD_VAR 0 6
47580: PUSH
47581: LD_INT 1
47583: EQUAL
47584: AND
47585: OR
47586: PUSH
47587: LD_VAR 0 1
47591: PUSH
47592: LD_INT 2
47594: PUSH
47595: LD_INT 3
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: IN
47602: NOT
47603: PUSH
47604: LD_VAR 0 6
47608: PUSH
47609: LD_INT 2
47611: EQUAL
47612: AND
47613: OR
47614: IFFALSE 47624
// mode = 0 ;
47616: LD_ADDR_VAR 0 6
47620: PUSH
47621: LD_INT 0
47623: ST_TO_ADDR
// case mode of 0 :
47624: LD_VAR 0 6
47628: PUSH
47629: LD_INT 0
47631: DOUBLE
47632: EQUAL
47633: IFTRUE 47637
47635: GO 59090
47637: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47638: LD_ADDR_VAR 0 11
47642: PUSH
47643: LD_INT 0
47645: PUSH
47646: LD_INT 0
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 0
47655: PUSH
47656: LD_INT 1
47658: NEG
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 1
47666: PUSH
47667: LD_INT 0
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 1
47676: PUSH
47677: LD_INT 1
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 0
47686: PUSH
47687: LD_INT 1
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 1
47696: NEG
47697: PUSH
47698: LD_INT 0
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 1
47707: NEG
47708: PUSH
47709: LD_INT 1
47711: NEG
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 1
47719: NEG
47720: PUSH
47721: LD_INT 2
47723: NEG
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 0
47731: PUSH
47732: LD_INT 2
47734: NEG
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 1
47742: PUSH
47743: LD_INT 1
47745: NEG
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 1
47753: PUSH
47754: LD_INT 2
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 0
47763: PUSH
47764: LD_INT 2
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 1
47773: NEG
47774: PUSH
47775: LD_INT 1
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 1
47784: PUSH
47785: LD_INT 3
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 0
47794: PUSH
47795: LD_INT 3
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 1
47804: NEG
47805: PUSH
47806: LD_INT 2
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47831: LD_ADDR_VAR 0 12
47835: PUSH
47836: LD_INT 0
47838: PUSH
47839: LD_INT 0
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 0
47848: PUSH
47849: LD_INT 1
47851: NEG
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 1
47859: PUSH
47860: LD_INT 0
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 1
47869: PUSH
47870: LD_INT 1
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 0
47879: PUSH
47880: LD_INT 1
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 1
47889: NEG
47890: PUSH
47891: LD_INT 0
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 1
47900: NEG
47901: PUSH
47902: LD_INT 1
47904: NEG
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 1
47912: PUSH
47913: LD_INT 1
47915: NEG
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 2
47923: PUSH
47924: LD_INT 0
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 2
47933: PUSH
47934: LD_INT 1
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 1
47943: NEG
47944: PUSH
47945: LD_INT 1
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 2
47954: NEG
47955: PUSH
47956: LD_INT 0
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 2
47965: NEG
47966: PUSH
47967: LD_INT 1
47969: NEG
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 2
47977: NEG
47978: PUSH
47979: LD_INT 1
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 3
47988: NEG
47989: PUSH
47990: LD_INT 0
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 3
47999: NEG
48000: PUSH
48001: LD_INT 1
48003: NEG
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48027: LD_ADDR_VAR 0 13
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: LD_INT 0
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 0
48044: PUSH
48045: LD_INT 1
48047: NEG
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: PUSH
48056: LD_INT 0
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 1
48065: PUSH
48066: LD_INT 1
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 0
48075: PUSH
48076: LD_INT 1
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 1
48085: NEG
48086: PUSH
48087: LD_INT 0
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 1
48096: NEG
48097: PUSH
48098: LD_INT 1
48100: NEG
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 1
48108: NEG
48109: PUSH
48110: LD_INT 2
48112: NEG
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 2
48120: PUSH
48121: LD_INT 1
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 2
48130: PUSH
48131: LD_INT 2
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 1
48140: PUSH
48141: LD_INT 2
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 2
48150: NEG
48151: PUSH
48152: LD_INT 1
48154: NEG
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 2
48162: NEG
48163: PUSH
48164: LD_INT 2
48166: NEG
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 2
48174: NEG
48175: PUSH
48176: LD_INT 3
48178: NEG
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 3
48186: NEG
48187: PUSH
48188: LD_INT 2
48190: NEG
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 3
48198: NEG
48199: PUSH
48200: LD_INT 3
48202: NEG
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48226: LD_ADDR_VAR 0 14
48230: PUSH
48231: LD_INT 0
48233: PUSH
48234: LD_INT 0
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 0
48243: PUSH
48244: LD_INT 1
48246: NEG
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 1
48254: PUSH
48255: LD_INT 0
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 1
48264: PUSH
48265: LD_INT 1
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 0
48274: PUSH
48275: LD_INT 1
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 1
48284: NEG
48285: PUSH
48286: LD_INT 0
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 1
48295: NEG
48296: PUSH
48297: LD_INT 1
48299: NEG
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 1
48307: NEG
48308: PUSH
48309: LD_INT 2
48311: NEG
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 0
48319: PUSH
48320: LD_INT 2
48322: NEG
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 1
48330: PUSH
48331: LD_INT 1
48333: NEG
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 1
48341: PUSH
48342: LD_INT 2
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 0
48351: PUSH
48352: LD_INT 2
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 1
48361: NEG
48362: PUSH
48363: LD_INT 1
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 1
48372: NEG
48373: PUSH
48374: LD_INT 3
48376: NEG
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: LD_INT 3
48387: NEG
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 1
48395: PUSH
48396: LD_INT 2
48398: NEG
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48422: LD_ADDR_VAR 0 15
48426: PUSH
48427: LD_INT 0
48429: PUSH
48430: LD_INT 0
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 0
48439: PUSH
48440: LD_INT 1
48442: NEG
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 1
48450: PUSH
48451: LD_INT 0
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 1
48460: PUSH
48461: LD_INT 1
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 0
48470: PUSH
48471: LD_INT 1
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 1
48480: NEG
48481: PUSH
48482: LD_INT 0
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 1
48491: NEG
48492: PUSH
48493: LD_INT 1
48495: NEG
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 1
48503: PUSH
48504: LD_INT 1
48506: NEG
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 2
48514: PUSH
48515: LD_INT 0
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 2
48524: PUSH
48525: LD_INT 1
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 1
48534: NEG
48535: PUSH
48536: LD_INT 1
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 2
48545: NEG
48546: PUSH
48547: LD_INT 0
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 2
48556: NEG
48557: PUSH
48558: LD_INT 1
48560: NEG
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 2
48568: PUSH
48569: LD_INT 1
48571: NEG
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 3
48579: PUSH
48580: LD_INT 0
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 3
48589: PUSH
48590: LD_INT 1
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48615: LD_ADDR_VAR 0 16
48619: PUSH
48620: LD_INT 0
48622: PUSH
48623: LD_INT 0
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 0
48632: PUSH
48633: LD_INT 1
48635: NEG
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 1
48643: PUSH
48644: LD_INT 0
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 1
48653: PUSH
48654: LD_INT 1
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 0
48663: PUSH
48664: LD_INT 1
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 1
48673: NEG
48674: PUSH
48675: LD_INT 0
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 1
48684: NEG
48685: PUSH
48686: LD_INT 1
48688: NEG
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 1
48696: NEG
48697: PUSH
48698: LD_INT 2
48700: NEG
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 2
48708: PUSH
48709: LD_INT 1
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 2
48718: PUSH
48719: LD_INT 2
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 1
48728: PUSH
48729: LD_INT 2
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 2
48738: NEG
48739: PUSH
48740: LD_INT 1
48742: NEG
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 2
48750: NEG
48751: PUSH
48752: LD_INT 2
48754: NEG
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 3
48762: PUSH
48763: LD_INT 2
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 3
48772: PUSH
48773: LD_INT 3
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 2
48782: PUSH
48783: LD_INT 3
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48808: LD_ADDR_VAR 0 17
48812: PUSH
48813: LD_INT 0
48815: PUSH
48816: LD_INT 0
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 0
48825: PUSH
48826: LD_INT 1
48828: NEG
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 1
48836: PUSH
48837: LD_INT 0
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 1
48846: PUSH
48847: LD_INT 1
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 0
48856: PUSH
48857: LD_INT 1
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 1
48866: NEG
48867: PUSH
48868: LD_INT 0
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 1
48877: NEG
48878: PUSH
48879: LD_INT 1
48881: NEG
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 1
48889: NEG
48890: PUSH
48891: LD_INT 2
48893: NEG
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 0
48901: PUSH
48902: LD_INT 2
48904: NEG
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 1
48912: PUSH
48913: LD_INT 1
48915: NEG
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 2
48923: PUSH
48924: LD_INT 0
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 2
48933: PUSH
48934: LD_INT 1
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 2
48943: PUSH
48944: LD_INT 2
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 1
48953: PUSH
48954: LD_INT 2
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 0
48963: PUSH
48964: LD_INT 2
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 1
48973: NEG
48974: PUSH
48975: LD_INT 1
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 2
48984: NEG
48985: PUSH
48986: LD_INT 0
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 2
48995: NEG
48996: PUSH
48997: LD_INT 1
48999: NEG
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 2
49007: NEG
49008: PUSH
49009: LD_INT 2
49011: NEG
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49038: LD_ADDR_VAR 0 18
49042: PUSH
49043: LD_INT 0
49045: PUSH
49046: LD_INT 0
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 0
49055: PUSH
49056: LD_INT 1
49058: NEG
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 1
49066: PUSH
49067: LD_INT 0
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 1
49076: PUSH
49077: LD_INT 1
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 0
49086: PUSH
49087: LD_INT 1
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 1
49096: NEG
49097: PUSH
49098: LD_INT 0
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 1
49107: NEG
49108: PUSH
49109: LD_INT 1
49111: NEG
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 1
49119: NEG
49120: PUSH
49121: LD_INT 2
49123: NEG
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 0
49131: PUSH
49132: LD_INT 2
49134: NEG
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 1
49142: PUSH
49143: LD_INT 1
49145: NEG
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 2
49153: PUSH
49154: LD_INT 0
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 2
49163: PUSH
49164: LD_INT 1
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 2
49173: PUSH
49174: LD_INT 2
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 1
49183: PUSH
49184: LD_INT 2
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 0
49193: PUSH
49194: LD_INT 2
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 1
49203: NEG
49204: PUSH
49205: LD_INT 1
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 2
49214: NEG
49215: PUSH
49216: LD_INT 0
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 2
49225: NEG
49226: PUSH
49227: LD_INT 1
49229: NEG
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 2
49237: NEG
49238: PUSH
49239: LD_INT 2
49241: NEG
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49268: LD_ADDR_VAR 0 19
49272: PUSH
49273: LD_INT 0
49275: PUSH
49276: LD_INT 0
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 0
49285: PUSH
49286: LD_INT 1
49288: NEG
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 1
49296: PUSH
49297: LD_INT 0
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 1
49306: PUSH
49307: LD_INT 1
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 0
49316: PUSH
49317: LD_INT 1
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 1
49326: NEG
49327: PUSH
49328: LD_INT 0
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: LD_INT 1
49341: NEG
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 1
49349: NEG
49350: PUSH
49351: LD_INT 2
49353: NEG
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 0
49361: PUSH
49362: LD_INT 2
49364: NEG
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 1
49372: PUSH
49373: LD_INT 1
49375: NEG
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 2
49383: PUSH
49384: LD_INT 0
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 2
49393: PUSH
49394: LD_INT 1
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 2
49403: PUSH
49404: LD_INT 2
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 1
49413: PUSH
49414: LD_INT 2
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 0
49423: PUSH
49424: LD_INT 2
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 1
49433: NEG
49434: PUSH
49435: LD_INT 1
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 2
49444: NEG
49445: PUSH
49446: LD_INT 0
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 2
49455: NEG
49456: PUSH
49457: LD_INT 1
49459: NEG
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 2
49467: NEG
49468: PUSH
49469: LD_INT 2
49471: NEG
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49498: LD_ADDR_VAR 0 20
49502: PUSH
49503: LD_INT 0
49505: PUSH
49506: LD_INT 0
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 0
49515: PUSH
49516: LD_INT 1
49518: NEG
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 1
49526: PUSH
49527: LD_INT 0
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 1
49536: PUSH
49537: LD_INT 1
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 0
49546: PUSH
49547: LD_INT 1
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 1
49556: NEG
49557: PUSH
49558: LD_INT 0
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 1
49567: NEG
49568: PUSH
49569: LD_INT 1
49571: NEG
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 1
49579: NEG
49580: PUSH
49581: LD_INT 2
49583: NEG
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 0
49591: PUSH
49592: LD_INT 2
49594: NEG
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 1
49602: PUSH
49603: LD_INT 1
49605: NEG
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 2
49613: PUSH
49614: LD_INT 0
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 2
49623: PUSH
49624: LD_INT 1
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 2
49633: PUSH
49634: LD_INT 2
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 1
49643: PUSH
49644: LD_INT 2
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 0
49653: PUSH
49654: LD_INT 2
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 1
49663: NEG
49664: PUSH
49665: LD_INT 1
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 2
49674: NEG
49675: PUSH
49676: LD_INT 0
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 2
49685: NEG
49686: PUSH
49687: LD_INT 1
49689: NEG
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 2
49697: NEG
49698: PUSH
49699: LD_INT 2
49701: NEG
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49728: LD_ADDR_VAR 0 21
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 0
49745: PUSH
49746: LD_INT 1
49748: NEG
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 1
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 1
49766: PUSH
49767: LD_INT 1
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 0
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 1
49786: NEG
49787: PUSH
49788: LD_INT 0
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 1
49797: NEG
49798: PUSH
49799: LD_INT 1
49801: NEG
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 1
49809: NEG
49810: PUSH
49811: LD_INT 2
49813: NEG
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 0
49821: PUSH
49822: LD_INT 2
49824: NEG
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 1
49832: PUSH
49833: LD_INT 1
49835: NEG
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 2
49843: PUSH
49844: LD_INT 0
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 2
49853: PUSH
49854: LD_INT 1
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 2
49863: PUSH
49864: LD_INT 2
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 1
49873: PUSH
49874: LD_INT 2
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 0
49883: PUSH
49884: LD_INT 2
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 1
49893: NEG
49894: PUSH
49895: LD_INT 1
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 2
49904: NEG
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 2
49915: NEG
49916: PUSH
49917: LD_INT 1
49919: NEG
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 2
49927: NEG
49928: PUSH
49929: LD_INT 2
49931: NEG
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49958: LD_ADDR_VAR 0 22
49962: PUSH
49963: LD_INT 0
49965: PUSH
49966: LD_INT 0
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 0
49975: PUSH
49976: LD_INT 1
49978: NEG
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 1
49986: PUSH
49987: LD_INT 0
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 1
49996: PUSH
49997: LD_INT 1
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 0
50006: PUSH
50007: LD_INT 1
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 1
50016: NEG
50017: PUSH
50018: LD_INT 0
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 1
50027: NEG
50028: PUSH
50029: LD_INT 1
50031: NEG
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 1
50039: NEG
50040: PUSH
50041: LD_INT 2
50043: NEG
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 0
50051: PUSH
50052: LD_INT 2
50054: NEG
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 1
50062: PUSH
50063: LD_INT 1
50065: NEG
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 2
50073: PUSH
50074: LD_INT 0
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 2
50083: PUSH
50084: LD_INT 1
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 2
50093: PUSH
50094: LD_INT 2
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 1
50103: PUSH
50104: LD_INT 2
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 0
50113: PUSH
50114: LD_INT 2
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 1
50123: NEG
50124: PUSH
50125: LD_INT 1
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 2
50134: NEG
50135: PUSH
50136: LD_INT 0
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 2
50145: NEG
50146: PUSH
50147: LD_INT 1
50149: NEG
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 2
50157: NEG
50158: PUSH
50159: LD_INT 2
50161: NEG
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50188: LD_ADDR_VAR 0 23
50192: PUSH
50193: LD_INT 0
50195: PUSH
50196: LD_INT 0
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 0
50205: PUSH
50206: LD_INT 1
50208: NEG
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 1
50216: PUSH
50217: LD_INT 0
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 1
50226: PUSH
50227: LD_INT 1
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 0
50236: PUSH
50237: LD_INT 1
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 1
50246: NEG
50247: PUSH
50248: LD_INT 0
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 1
50257: NEG
50258: PUSH
50259: LD_INT 1
50261: NEG
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 1
50269: NEG
50270: PUSH
50271: LD_INT 2
50273: NEG
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 0
50281: PUSH
50282: LD_INT 2
50284: NEG
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 1
50292: PUSH
50293: LD_INT 1
50295: NEG
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 2
50303: PUSH
50304: LD_INT 0
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 2
50313: PUSH
50314: LD_INT 1
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 2
50323: PUSH
50324: LD_INT 2
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 1
50333: PUSH
50334: LD_INT 2
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: LD_INT 2
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 1
50353: NEG
50354: PUSH
50355: LD_INT 1
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 2
50364: NEG
50365: PUSH
50366: LD_INT 0
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 2
50375: NEG
50376: PUSH
50377: LD_INT 1
50379: NEG
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 2
50387: NEG
50388: PUSH
50389: LD_INT 2
50391: NEG
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 2
50399: NEG
50400: PUSH
50401: LD_INT 3
50403: NEG
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 1
50411: NEG
50412: PUSH
50413: LD_INT 3
50415: NEG
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 1
50423: PUSH
50424: LD_INT 2
50426: NEG
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 2
50434: PUSH
50435: LD_INT 1
50437: NEG
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
50468: LD_ADDR_VAR 0 24
50472: PUSH
50473: LD_INT 0
50475: PUSH
50476: LD_INT 0
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 0
50485: PUSH
50486: LD_INT 1
50488: NEG
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 1
50496: PUSH
50497: LD_INT 0
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 1
50506: PUSH
50507: LD_INT 1
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 0
50516: PUSH
50517: LD_INT 1
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 1
50526: NEG
50527: PUSH
50528: LD_INT 0
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 1
50537: NEG
50538: PUSH
50539: LD_INT 1
50541: NEG
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 1
50549: NEG
50550: PUSH
50551: LD_INT 2
50553: NEG
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 0
50561: PUSH
50562: LD_INT 2
50564: NEG
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 1
50572: PUSH
50573: LD_INT 1
50575: NEG
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 2
50583: PUSH
50584: LD_INT 0
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 2
50593: PUSH
50594: LD_INT 1
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 2
50603: PUSH
50604: LD_INT 2
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 1
50613: PUSH
50614: LD_INT 2
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 0
50623: PUSH
50624: LD_INT 2
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 1
50633: NEG
50634: PUSH
50635: LD_INT 1
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 2
50644: NEG
50645: PUSH
50646: LD_INT 0
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 2
50655: NEG
50656: PUSH
50657: LD_INT 1
50659: NEG
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 2
50667: NEG
50668: PUSH
50669: LD_INT 2
50671: NEG
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 1
50679: PUSH
50680: LD_INT 2
50682: NEG
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 2
50690: PUSH
50691: LD_INT 1
50693: NEG
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 3
50701: PUSH
50702: LD_INT 1
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 3
50711: PUSH
50712: LD_INT 2
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
50744: LD_ADDR_VAR 0 25
50748: PUSH
50749: LD_INT 0
50751: PUSH
50752: LD_INT 0
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 0
50761: PUSH
50762: LD_INT 1
50764: NEG
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 1
50772: PUSH
50773: LD_INT 0
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 1
50782: PUSH
50783: LD_INT 1
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 0
50792: PUSH
50793: LD_INT 1
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 1
50802: NEG
50803: PUSH
50804: LD_INT 0
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 1
50813: NEG
50814: PUSH
50815: LD_INT 1
50817: NEG
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 1
50825: NEG
50826: PUSH
50827: LD_INT 2
50829: NEG
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 0
50837: PUSH
50838: LD_INT 2
50840: NEG
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 1
50848: PUSH
50849: LD_INT 1
50851: NEG
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 2
50859: PUSH
50860: LD_INT 0
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 2
50869: PUSH
50870: LD_INT 1
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 2
50879: PUSH
50880: LD_INT 2
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 1
50889: PUSH
50890: LD_INT 2
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 0
50899: PUSH
50900: LD_INT 2
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 1
50909: NEG
50910: PUSH
50911: LD_INT 1
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 2
50920: NEG
50921: PUSH
50922: LD_INT 0
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 2
50931: NEG
50932: PUSH
50933: LD_INT 1
50935: NEG
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 2
50943: NEG
50944: PUSH
50945: LD_INT 2
50947: NEG
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 3
50955: PUSH
50956: LD_INT 1
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 3
50965: PUSH
50966: LD_INT 2
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 2
50975: PUSH
50976: LD_INT 3
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 1
50985: PUSH
50986: LD_INT 3
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51018: LD_ADDR_VAR 0 26
51022: PUSH
51023: LD_INT 0
51025: PUSH
51026: LD_INT 0
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 0
51035: PUSH
51036: LD_INT 1
51038: NEG
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 1
51046: PUSH
51047: LD_INT 0
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 1
51056: PUSH
51057: LD_INT 1
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 0
51066: PUSH
51067: LD_INT 1
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 1
51076: NEG
51077: PUSH
51078: LD_INT 0
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 1
51087: NEG
51088: PUSH
51089: LD_INT 1
51091: NEG
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 1
51099: NEG
51100: PUSH
51101: LD_INT 2
51103: NEG
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 0
51111: PUSH
51112: LD_INT 2
51114: NEG
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 1
51122: PUSH
51123: LD_INT 1
51125: NEG
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 2
51133: PUSH
51134: LD_INT 0
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 2
51143: PUSH
51144: LD_INT 1
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 2
51153: PUSH
51154: LD_INT 2
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 1
51163: PUSH
51164: LD_INT 2
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 0
51173: PUSH
51174: LD_INT 2
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 1
51183: NEG
51184: PUSH
51185: LD_INT 1
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 2
51194: NEG
51195: PUSH
51196: LD_INT 0
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 2
51205: NEG
51206: PUSH
51207: LD_INT 1
51209: NEG
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 2
51217: NEG
51218: PUSH
51219: LD_INT 2
51221: NEG
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 2
51229: PUSH
51230: LD_INT 3
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 1
51239: PUSH
51240: LD_INT 3
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 1
51249: NEG
51250: PUSH
51251: LD_INT 2
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 2
51260: NEG
51261: PUSH
51262: LD_INT 1
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51294: LD_ADDR_VAR 0 27
51298: PUSH
51299: LD_INT 0
51301: PUSH
51302: LD_INT 0
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 0
51311: PUSH
51312: LD_INT 1
51314: NEG
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 1
51322: PUSH
51323: LD_INT 0
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 1
51332: PUSH
51333: LD_INT 1
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 0
51342: PUSH
51343: LD_INT 1
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 1
51352: NEG
51353: PUSH
51354: LD_INT 0
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 1
51363: NEG
51364: PUSH
51365: LD_INT 1
51367: NEG
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 1
51375: NEG
51376: PUSH
51377: LD_INT 2
51379: NEG
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 0
51387: PUSH
51388: LD_INT 2
51390: NEG
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 1
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 2
51409: PUSH
51410: LD_INT 0
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 2
51419: PUSH
51420: LD_INT 1
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 2
51429: PUSH
51430: LD_INT 2
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 1
51439: PUSH
51440: LD_INT 2
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 0
51449: PUSH
51450: LD_INT 2
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 1
51459: NEG
51460: PUSH
51461: LD_INT 1
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 2
51470: NEG
51471: PUSH
51472: LD_INT 0
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 2
51481: NEG
51482: PUSH
51483: LD_INT 1
51485: NEG
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 2
51493: NEG
51494: PUSH
51495: LD_INT 2
51497: NEG
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 1
51505: NEG
51506: PUSH
51507: LD_INT 2
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 2
51516: NEG
51517: PUSH
51518: LD_INT 1
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 3
51527: NEG
51528: PUSH
51529: LD_INT 1
51531: NEG
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 3
51539: NEG
51540: PUSH
51541: LD_INT 2
51543: NEG
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51574: LD_ADDR_VAR 0 28
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: LD_INT 0
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 0
51591: PUSH
51592: LD_INT 1
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 1
51602: PUSH
51603: LD_INT 0
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 1
51612: PUSH
51613: LD_INT 1
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 0
51622: PUSH
51623: LD_INT 1
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 1
51632: NEG
51633: PUSH
51634: LD_INT 0
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 1
51643: NEG
51644: PUSH
51645: LD_INT 1
51647: NEG
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 1
51655: NEG
51656: PUSH
51657: LD_INT 2
51659: NEG
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 0
51667: PUSH
51668: LD_INT 2
51670: NEG
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 1
51678: PUSH
51679: LD_INT 1
51681: NEG
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 2
51689: PUSH
51690: LD_INT 0
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 2
51699: PUSH
51700: LD_INT 1
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 2
51709: PUSH
51710: LD_INT 2
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 1
51719: PUSH
51720: LD_INT 2
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 0
51729: PUSH
51730: LD_INT 2
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 1
51739: NEG
51740: PUSH
51741: LD_INT 1
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 2
51750: NEG
51751: PUSH
51752: LD_INT 0
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 2
51761: NEG
51762: PUSH
51763: LD_INT 1
51765: NEG
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 2
51773: NEG
51774: PUSH
51775: LD_INT 2
51777: NEG
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 2
51785: NEG
51786: PUSH
51787: LD_INT 3
51789: NEG
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 1
51797: NEG
51798: PUSH
51799: LD_INT 3
51801: NEG
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 3
51809: NEG
51810: PUSH
51811: LD_INT 1
51813: NEG
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 3
51821: NEG
51822: PUSH
51823: LD_INT 2
51825: NEG
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51856: LD_ADDR_VAR 0 29
51860: PUSH
51861: LD_INT 0
51863: PUSH
51864: LD_INT 0
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 0
51873: PUSH
51874: LD_INT 1
51876: NEG
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 1
51884: PUSH
51885: LD_INT 0
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 1
51894: PUSH
51895: LD_INT 1
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 0
51904: PUSH
51905: LD_INT 1
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 1
51914: NEG
51915: PUSH
51916: LD_INT 0
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 1
51925: NEG
51926: PUSH
51927: LD_INT 1
51929: NEG
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 1
51937: NEG
51938: PUSH
51939: LD_INT 2
51941: NEG
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 0
51949: PUSH
51950: LD_INT 2
51952: NEG
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 1
51960: PUSH
51961: LD_INT 1
51963: NEG
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 2
51971: PUSH
51972: LD_INT 0
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 2
51981: PUSH
51982: LD_INT 1
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 1
51991: PUSH
51992: LD_INT 2
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 0
52001: PUSH
52002: LD_INT 2
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 1
52011: NEG
52012: PUSH
52013: LD_INT 1
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 2
52022: NEG
52023: PUSH
52024: LD_INT 1
52026: NEG
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 2
52034: NEG
52035: PUSH
52036: LD_INT 2
52038: NEG
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 2
52046: NEG
52047: PUSH
52048: LD_INT 3
52050: NEG
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 2
52058: PUSH
52059: LD_INT 1
52061: NEG
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 3
52069: PUSH
52070: LD_INT 1
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 1
52079: PUSH
52080: LD_INT 3
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 1
52089: NEG
52090: PUSH
52091: LD_INT 2
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 3
52100: NEG
52101: PUSH
52102: LD_INT 2
52104: NEG
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52135: LD_ADDR_VAR 0 30
52139: PUSH
52140: LD_INT 0
52142: PUSH
52143: LD_INT 0
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 0
52152: PUSH
52153: LD_INT 1
52155: NEG
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 1
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 1
52173: PUSH
52174: LD_INT 1
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 0
52183: PUSH
52184: LD_INT 1
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 1
52193: NEG
52194: PUSH
52195: LD_INT 0
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 1
52204: NEG
52205: PUSH
52206: LD_INT 1
52208: NEG
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 1
52216: NEG
52217: PUSH
52218: LD_INT 2
52220: NEG
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 0
52228: PUSH
52229: LD_INT 2
52231: NEG
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 1
52239: PUSH
52240: LD_INT 1
52242: NEG
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 2
52250: PUSH
52251: LD_INT 0
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 2
52260: PUSH
52261: LD_INT 1
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 2
52270: PUSH
52271: LD_INT 2
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 1
52280: PUSH
52281: LD_INT 2
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 1
52290: NEG
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 2
52301: NEG
52302: PUSH
52303: LD_INT 0
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 2
52312: NEG
52313: PUSH
52314: LD_INT 1
52316: NEG
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 1
52324: NEG
52325: PUSH
52326: LD_INT 3
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 1
52336: PUSH
52337: LD_INT 2
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 3
52347: PUSH
52348: LD_INT 2
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 2
52357: PUSH
52358: LD_INT 3
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 2
52367: NEG
52368: PUSH
52369: LD_INT 1
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 3
52378: NEG
52379: PUSH
52380: LD_INT 1
52382: NEG
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52413: LD_ADDR_VAR 0 31
52417: PUSH
52418: LD_INT 0
52420: PUSH
52421: LD_INT 0
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 0
52430: PUSH
52431: LD_INT 1
52433: NEG
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 1
52441: PUSH
52442: LD_INT 0
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 1
52451: PUSH
52452: LD_INT 1
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: LD_INT 1
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 1
52471: NEG
52472: PUSH
52473: LD_INT 0
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 1
52482: NEG
52483: PUSH
52484: LD_INT 1
52486: NEG
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 1
52494: NEG
52495: PUSH
52496: LD_INT 2
52498: NEG
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 1
52506: PUSH
52507: LD_INT 1
52509: NEG
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 2
52517: PUSH
52518: LD_INT 0
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 2
52527: PUSH
52528: LD_INT 1
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 2
52537: PUSH
52538: LD_INT 2
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 1
52547: PUSH
52548: LD_INT 2
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 0
52557: PUSH
52558: LD_INT 2
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 1
52567: NEG
52568: PUSH
52569: LD_INT 1
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 2
52578: NEG
52579: PUSH
52580: LD_INT 1
52582: NEG
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 2
52590: NEG
52591: PUSH
52592: LD_INT 2
52594: NEG
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 2
52602: NEG
52603: PUSH
52604: LD_INT 3
52606: NEG
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 2
52614: PUSH
52615: LD_INT 1
52617: NEG
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 3
52625: PUSH
52626: LD_INT 1
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 1
52635: PUSH
52636: LD_INT 3
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 1
52645: NEG
52646: PUSH
52647: LD_INT 2
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 3
52656: NEG
52657: PUSH
52658: LD_INT 2
52660: NEG
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52691: LD_ADDR_VAR 0 32
52695: PUSH
52696: LD_INT 0
52698: PUSH
52699: LD_INT 0
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 0
52708: PUSH
52709: LD_INT 1
52711: NEG
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 1
52719: PUSH
52720: LD_INT 0
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 1
52729: PUSH
52730: LD_INT 1
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 0
52739: PUSH
52740: LD_INT 1
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 1
52749: NEG
52750: PUSH
52751: LD_INT 0
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 1
52760: NEG
52761: PUSH
52762: LD_INT 1
52764: NEG
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 1
52772: NEG
52773: PUSH
52774: LD_INT 2
52776: NEG
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 0
52784: PUSH
52785: LD_INT 2
52787: NEG
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 1
52795: PUSH
52796: LD_INT 1
52798: NEG
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 2
52806: PUSH
52807: LD_INT 1
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 2
52816: PUSH
52817: LD_INT 2
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 1
52826: PUSH
52827: LD_INT 2
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 0
52836: PUSH
52837: LD_INT 2
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 1
52846: NEG
52847: PUSH
52848: LD_INT 1
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 2
52857: NEG
52858: PUSH
52859: LD_INT 0
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 2
52868: NEG
52869: PUSH
52870: LD_INT 1
52872: NEG
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 1
52880: NEG
52881: PUSH
52882: LD_INT 3
52884: NEG
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 1
52892: PUSH
52893: LD_INT 2
52895: NEG
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 3
52903: PUSH
52904: LD_INT 2
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 2
52913: PUSH
52914: LD_INT 3
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 2
52923: NEG
52924: PUSH
52925: LD_INT 1
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 3
52934: NEG
52935: PUSH
52936: LD_INT 1
52938: NEG
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52969: LD_ADDR_VAR 0 33
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: LD_INT 0
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: LD_INT 1
52989: NEG
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 1
52997: PUSH
52998: LD_INT 0
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 1
53007: PUSH
53008: LD_INT 1
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 0
53017: PUSH
53018: LD_INT 1
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 1
53027: NEG
53028: PUSH
53029: LD_INT 0
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 1
53038: NEG
53039: PUSH
53040: LD_INT 1
53042: NEG
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 1
53050: NEG
53051: PUSH
53052: LD_INT 2
53054: NEG
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 1
53062: PUSH
53063: LD_INT 1
53065: NEG
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 2
53073: PUSH
53074: LD_INT 0
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 2
53083: PUSH
53084: LD_INT 1
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 1
53093: PUSH
53094: LD_INT 2
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 0
53103: PUSH
53104: LD_INT 2
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 1
53113: NEG
53114: PUSH
53115: LD_INT 1
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 2
53124: NEG
53125: PUSH
53126: LD_INT 0
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 2
53135: NEG
53136: PUSH
53137: LD_INT 1
53139: NEG
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 2
53147: NEG
53148: PUSH
53149: LD_INT 2
53151: NEG
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 2
53159: NEG
53160: PUSH
53161: LD_INT 3
53163: NEG
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 2
53171: PUSH
53172: LD_INT 1
53174: NEG
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 3
53182: PUSH
53183: LD_INT 1
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 1
53192: PUSH
53193: LD_INT 3
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 1
53202: NEG
53203: PUSH
53204: LD_INT 2
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 3
53213: NEG
53214: PUSH
53215: LD_INT 2
53217: NEG
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53248: LD_ADDR_VAR 0 34
53252: PUSH
53253: LD_INT 0
53255: PUSH
53256: LD_INT 0
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: LD_INT 1
53268: NEG
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 1
53276: PUSH
53277: LD_INT 0
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 1
53286: PUSH
53287: LD_INT 1
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 0
53296: PUSH
53297: LD_INT 1
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 1
53306: NEG
53307: PUSH
53308: LD_INT 0
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 1
53317: NEG
53318: PUSH
53319: LD_INT 1
53321: NEG
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: LD_INT 2
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 0
53341: PUSH
53342: LD_INT 2
53344: NEG
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 1
53352: PUSH
53353: LD_INT 1
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 2
53363: PUSH
53364: LD_INT 1
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 2
53373: PUSH
53374: LD_INT 2
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 1
53383: PUSH
53384: LD_INT 2
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 1
53393: NEG
53394: PUSH
53395: LD_INT 1
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 2
53404: NEG
53405: PUSH
53406: LD_INT 0
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 2
53415: NEG
53416: PUSH
53417: LD_INT 1
53419: NEG
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 2
53427: NEG
53428: PUSH
53429: LD_INT 2
53431: NEG
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 1
53439: NEG
53440: PUSH
53441: LD_INT 3
53443: NEG
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 1
53451: PUSH
53452: LD_INT 2
53454: NEG
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 3
53462: PUSH
53463: LD_INT 2
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 2
53472: PUSH
53473: LD_INT 3
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 2
53482: NEG
53483: PUSH
53484: LD_INT 1
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 3
53493: NEG
53494: PUSH
53495: LD_INT 1
53497: NEG
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53528: LD_ADDR_VAR 0 35
53532: PUSH
53533: LD_INT 0
53535: PUSH
53536: LD_INT 0
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 0
53545: PUSH
53546: LD_INT 1
53548: NEG
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 1
53556: PUSH
53557: LD_INT 0
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 1
53566: PUSH
53567: LD_INT 1
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 0
53576: PUSH
53577: LD_INT 1
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 1
53586: NEG
53587: PUSH
53588: LD_INT 0
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 1
53597: NEG
53598: PUSH
53599: LD_INT 1
53601: NEG
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 2
53609: PUSH
53610: LD_INT 1
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 2
53619: NEG
53620: PUSH
53621: LD_INT 1
53623: NEG
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53640: LD_ADDR_VAR 0 36
53644: PUSH
53645: LD_INT 0
53647: PUSH
53648: LD_INT 0
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 0
53657: PUSH
53658: LD_INT 1
53660: NEG
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 1
53668: PUSH
53669: LD_INT 0
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 1
53678: PUSH
53679: LD_INT 1
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 0
53688: PUSH
53689: LD_INT 1
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 1
53698: NEG
53699: PUSH
53700: LD_INT 0
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 1
53709: NEG
53710: PUSH
53711: LD_INT 1
53713: NEG
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 1
53721: NEG
53722: PUSH
53723: LD_INT 2
53725: NEG
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 1
53733: PUSH
53734: LD_INT 2
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53752: LD_ADDR_VAR 0 37
53756: PUSH
53757: LD_INT 0
53759: PUSH
53760: LD_INT 0
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 0
53769: PUSH
53770: LD_INT 1
53772: NEG
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 1
53780: PUSH
53781: LD_INT 0
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 1
53790: PUSH
53791: LD_INT 1
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 0
53800: PUSH
53801: LD_INT 1
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 1
53810: NEG
53811: PUSH
53812: LD_INT 0
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 1
53821: NEG
53822: PUSH
53823: LD_INT 1
53825: NEG
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 1
53833: PUSH
53834: LD_INT 1
53836: NEG
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 1
53844: NEG
53845: PUSH
53846: LD_INT 1
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53864: LD_ADDR_VAR 0 38
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 0
53881: PUSH
53882: LD_INT 1
53884: NEG
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 1
53892: PUSH
53893: LD_INT 0
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 1
53902: PUSH
53903: LD_INT 1
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 0
53912: PUSH
53913: LD_INT 1
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 1
53922: NEG
53923: PUSH
53924: LD_INT 0
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 1
53933: NEG
53934: PUSH
53935: LD_INT 1
53937: NEG
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 2
53945: PUSH
53946: LD_INT 1
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 2
53955: NEG
53956: PUSH
53957: LD_INT 1
53959: NEG
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53976: LD_ADDR_VAR 0 39
53980: PUSH
53981: LD_INT 0
53983: PUSH
53984: LD_INT 0
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 0
53993: PUSH
53994: LD_INT 1
53996: NEG
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 1
54004: PUSH
54005: LD_INT 0
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 1
54014: PUSH
54015: LD_INT 1
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 0
54024: PUSH
54025: LD_INT 1
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 1
54034: NEG
54035: PUSH
54036: LD_INT 0
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 1
54045: NEG
54046: PUSH
54047: LD_INT 1
54049: NEG
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 1
54057: NEG
54058: PUSH
54059: LD_INT 2
54061: NEG
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 1
54069: PUSH
54070: LD_INT 2
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54088: LD_ADDR_VAR 0 40
54092: PUSH
54093: LD_INT 0
54095: PUSH
54096: LD_INT 0
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 0
54105: PUSH
54106: LD_INT 1
54108: NEG
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 1
54116: PUSH
54117: LD_INT 0
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 1
54126: PUSH
54127: LD_INT 1
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 0
54136: PUSH
54137: LD_INT 1
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 1
54146: NEG
54147: PUSH
54148: LD_INT 0
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 1
54157: NEG
54158: PUSH
54159: LD_INT 1
54161: NEG
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 1
54169: PUSH
54170: LD_INT 1
54172: NEG
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 1
54180: NEG
54181: PUSH
54182: LD_INT 1
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54200: LD_ADDR_VAR 0 41
54204: PUSH
54205: LD_INT 0
54207: PUSH
54208: LD_INT 0
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 0
54217: PUSH
54218: LD_INT 1
54220: NEG
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 1
54228: PUSH
54229: LD_INT 0
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 1
54238: PUSH
54239: LD_INT 1
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 0
54248: PUSH
54249: LD_INT 1
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 1
54258: NEG
54259: PUSH
54260: LD_INT 0
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 1
54269: NEG
54270: PUSH
54271: LD_INT 1
54273: NEG
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 1
54281: NEG
54282: PUSH
54283: LD_INT 2
54285: NEG
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 1
54293: PUSH
54294: LD_INT 1
54296: NEG
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 2
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 2
54314: PUSH
54315: LD_INT 1
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 2
54324: PUSH
54325: LD_INT 2
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 1
54334: PUSH
54335: LD_INT 2
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 1
54344: NEG
54345: PUSH
54346: LD_INT 1
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 2
54355: NEG
54356: PUSH
54357: LD_INT 0
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 2
54366: NEG
54367: PUSH
54368: LD_INT 1
54370: NEG
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 2
54378: NEG
54379: PUSH
54380: LD_INT 2
54382: NEG
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 2
54390: NEG
54391: PUSH
54392: LD_INT 3
54394: NEG
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 2
54402: PUSH
54403: LD_INT 1
54405: NEG
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 3
54413: PUSH
54414: LD_INT 0
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 3
54423: PUSH
54424: LD_INT 1
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 3
54433: PUSH
54434: LD_INT 2
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 3
54443: PUSH
54444: LD_INT 3
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 2
54453: PUSH
54454: LD_INT 3
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 2
54463: NEG
54464: PUSH
54465: LD_INT 1
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 3
54474: NEG
54475: PUSH
54476: LD_INT 0
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 3
54485: NEG
54486: PUSH
54487: LD_INT 1
54489: NEG
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 3
54497: NEG
54498: PUSH
54499: LD_INT 2
54501: NEG
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 3
54509: NEG
54510: PUSH
54511: LD_INT 3
54513: NEG
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54550: LD_ADDR_VAR 0 42
54554: PUSH
54555: LD_INT 0
54557: PUSH
54558: LD_INT 0
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 0
54567: PUSH
54568: LD_INT 1
54570: NEG
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 1
54578: PUSH
54579: LD_INT 0
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 1
54588: PUSH
54589: LD_INT 1
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 0
54598: PUSH
54599: LD_INT 1
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 1
54608: NEG
54609: PUSH
54610: LD_INT 0
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 1
54619: NEG
54620: PUSH
54621: LD_INT 1
54623: NEG
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 1
54631: NEG
54632: PUSH
54633: LD_INT 2
54635: NEG
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 0
54643: PUSH
54644: LD_INT 2
54646: NEG
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 1
54654: PUSH
54655: LD_INT 1
54657: NEG
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 2
54665: PUSH
54666: LD_INT 1
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 2
54675: PUSH
54676: LD_INT 2
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 1
54685: PUSH
54686: LD_INT 2
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 0
54695: PUSH
54696: LD_INT 2
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 1
54705: NEG
54706: PUSH
54707: LD_INT 1
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 2
54716: NEG
54717: PUSH
54718: LD_INT 1
54720: NEG
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 2
54728: NEG
54729: PUSH
54730: LD_INT 2
54732: NEG
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 2
54740: NEG
54741: PUSH
54742: LD_INT 3
54744: NEG
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 1
54752: NEG
54753: PUSH
54754: LD_INT 3
54756: NEG
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 0
54764: PUSH
54765: LD_INT 3
54767: NEG
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 1
54775: PUSH
54776: LD_INT 2
54778: NEG
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 3
54786: PUSH
54787: LD_INT 2
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 3
54796: PUSH
54797: LD_INT 3
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 2
54806: PUSH
54807: LD_INT 3
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 1
54816: PUSH
54817: LD_INT 3
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 0
54826: PUSH
54827: LD_INT 3
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 1
54836: NEG
54837: PUSH
54838: LD_INT 2
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 3
54847: NEG
54848: PUSH
54849: LD_INT 2
54851: NEG
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 3
54859: NEG
54860: PUSH
54861: LD_INT 3
54863: NEG
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54900: LD_ADDR_VAR 0 43
54904: PUSH
54905: LD_INT 0
54907: PUSH
54908: LD_INT 0
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 0
54917: PUSH
54918: LD_INT 1
54920: NEG
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 1
54928: PUSH
54929: LD_INT 0
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 1
54938: PUSH
54939: LD_INT 1
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 0
54948: PUSH
54949: LD_INT 1
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 1
54958: NEG
54959: PUSH
54960: LD_INT 0
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 1
54969: NEG
54970: PUSH
54971: LD_INT 1
54973: NEG
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 1
54981: NEG
54982: PUSH
54983: LD_INT 2
54985: NEG
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 0
54993: PUSH
54994: LD_INT 2
54996: NEG
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: LD_INT 1
55007: NEG
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 2
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 2
55025: PUSH
55026: LD_INT 1
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 1
55035: PUSH
55036: LD_INT 2
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 0
55045: PUSH
55046: LD_INT 2
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 1
55055: NEG
55056: PUSH
55057: LD_INT 1
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 2
55066: NEG
55067: PUSH
55068: LD_INT 0
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 2
55077: NEG
55078: PUSH
55079: LD_INT 1
55081: NEG
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 1
55089: NEG
55090: PUSH
55091: LD_INT 3
55093: NEG
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 0
55101: PUSH
55102: LD_INT 3
55104: NEG
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 1
55112: PUSH
55113: LD_INT 2
55115: NEG
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 2
55123: PUSH
55124: LD_INT 1
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 3
55134: PUSH
55135: LD_INT 0
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 3
55144: PUSH
55145: LD_INT 1
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 1
55154: PUSH
55155: LD_INT 3
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 0
55164: PUSH
55165: LD_INT 3
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 1
55174: NEG
55175: PUSH
55176: LD_INT 2
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 2
55185: NEG
55186: PUSH
55187: LD_INT 1
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 3
55196: NEG
55197: PUSH
55198: LD_INT 0
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 3
55207: NEG
55208: PUSH
55209: LD_INT 1
55211: NEG
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55248: LD_ADDR_VAR 0 44
55252: PUSH
55253: LD_INT 0
55255: PUSH
55256: LD_INT 0
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 0
55265: PUSH
55266: LD_INT 1
55268: NEG
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 1
55276: PUSH
55277: LD_INT 0
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 1
55286: PUSH
55287: LD_INT 1
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 0
55296: PUSH
55297: LD_INT 1
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 1
55306: NEG
55307: PUSH
55308: LD_INT 0
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 1
55317: NEG
55318: PUSH
55319: LD_INT 1
55321: NEG
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 1
55329: NEG
55330: PUSH
55331: LD_INT 2
55333: NEG
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 1
55341: PUSH
55342: LD_INT 1
55344: NEG
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 2
55352: PUSH
55353: LD_INT 0
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 2
55362: PUSH
55363: LD_INT 1
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 2
55372: PUSH
55373: LD_INT 2
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 1
55382: PUSH
55383: LD_INT 2
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 1
55392: NEG
55393: PUSH
55394: LD_INT 1
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 2
55403: NEG
55404: PUSH
55405: LD_INT 0
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 2
55414: NEG
55415: PUSH
55416: LD_INT 1
55418: NEG
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 2
55426: NEG
55427: PUSH
55428: LD_INT 2
55430: NEG
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 2
55438: NEG
55439: PUSH
55440: LD_INT 3
55442: NEG
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 2
55450: PUSH
55451: LD_INT 1
55453: NEG
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 3
55461: PUSH
55462: LD_INT 0
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 3
55471: PUSH
55472: LD_INT 1
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 3
55481: PUSH
55482: LD_INT 2
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 3
55491: PUSH
55492: LD_INT 3
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 2
55501: PUSH
55502: LD_INT 3
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 2
55511: NEG
55512: PUSH
55513: LD_INT 1
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 3
55522: NEG
55523: PUSH
55524: LD_INT 0
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 3
55533: NEG
55534: PUSH
55535: LD_INT 1
55537: NEG
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 3
55545: NEG
55546: PUSH
55547: LD_INT 2
55549: NEG
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 3
55557: NEG
55558: PUSH
55559: LD_INT 3
55561: NEG
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55598: LD_ADDR_VAR 0 45
55602: PUSH
55603: LD_INT 0
55605: PUSH
55606: LD_INT 0
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 0
55615: PUSH
55616: LD_INT 1
55618: NEG
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 1
55626: PUSH
55627: LD_INT 0
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 1
55636: PUSH
55637: LD_INT 1
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 0
55646: PUSH
55647: LD_INT 1
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 1
55656: NEG
55657: PUSH
55658: LD_INT 0
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 1
55667: NEG
55668: PUSH
55669: LD_INT 1
55671: NEG
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 1
55679: NEG
55680: PUSH
55681: LD_INT 2
55683: NEG
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 0
55691: PUSH
55692: LD_INT 2
55694: NEG
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 1
55702: PUSH
55703: LD_INT 1
55705: NEG
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 2
55713: PUSH
55714: LD_INT 1
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 2
55723: PUSH
55724: LD_INT 2
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 1
55733: PUSH
55734: LD_INT 2
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 0
55743: PUSH
55744: LD_INT 2
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 1
55753: NEG
55754: PUSH
55755: LD_INT 1
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 2
55764: NEG
55765: PUSH
55766: LD_INT 1
55768: NEG
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 2
55776: NEG
55777: PUSH
55778: LD_INT 2
55780: NEG
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 2
55788: NEG
55789: PUSH
55790: LD_INT 3
55792: NEG
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 1
55800: NEG
55801: PUSH
55802: LD_INT 3
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 0
55812: PUSH
55813: LD_INT 3
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 1
55823: PUSH
55824: LD_INT 2
55826: NEG
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 3
55834: PUSH
55835: LD_INT 2
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 3
55844: PUSH
55845: LD_INT 3
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 2
55854: PUSH
55855: LD_INT 3
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 1
55864: PUSH
55865: LD_INT 3
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 0
55874: PUSH
55875: LD_INT 3
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 1
55884: NEG
55885: PUSH
55886: LD_INT 2
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 3
55895: NEG
55896: PUSH
55897: LD_INT 2
55899: NEG
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 3
55907: NEG
55908: PUSH
55909: LD_INT 3
55911: NEG
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55948: LD_ADDR_VAR 0 46
55952: PUSH
55953: LD_INT 0
55955: PUSH
55956: LD_INT 0
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 0
55965: PUSH
55966: LD_INT 1
55968: NEG
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 1
55976: PUSH
55977: LD_INT 0
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 1
55986: PUSH
55987: LD_INT 1
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 0
55996: PUSH
55997: LD_INT 1
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 1
56006: NEG
56007: PUSH
56008: LD_INT 0
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 1
56017: NEG
56018: PUSH
56019: LD_INT 1
56021: NEG
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 1
56029: NEG
56030: PUSH
56031: LD_INT 2
56033: NEG
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 0
56041: PUSH
56042: LD_INT 2
56044: NEG
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 1
56052: PUSH
56053: LD_INT 1
56055: NEG
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 2
56063: PUSH
56064: LD_INT 0
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 2
56073: PUSH
56074: LD_INT 1
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 1
56083: PUSH
56084: LD_INT 2
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 0
56093: PUSH
56094: LD_INT 2
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 1
56103: NEG
56104: PUSH
56105: LD_INT 1
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 2
56114: NEG
56115: PUSH
56116: LD_INT 0
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 2
56125: NEG
56126: PUSH
56127: LD_INT 1
56129: NEG
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 1
56137: NEG
56138: PUSH
56139: LD_INT 3
56141: NEG
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 0
56149: PUSH
56150: LD_INT 3
56152: NEG
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 1
56160: PUSH
56161: LD_INT 2
56163: NEG
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 2
56171: PUSH
56172: LD_INT 1
56174: NEG
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 3
56182: PUSH
56183: LD_INT 0
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 3
56192: PUSH
56193: LD_INT 1
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 1
56202: PUSH
56203: LD_INT 3
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 0
56212: PUSH
56213: LD_INT 3
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 1
56222: NEG
56223: PUSH
56224: LD_INT 2
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 2
56233: NEG
56234: PUSH
56235: LD_INT 1
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 3
56244: NEG
56245: PUSH
56246: LD_INT 0
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 3
56255: NEG
56256: PUSH
56257: LD_INT 1
56259: NEG
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56296: LD_ADDR_VAR 0 47
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 0
56313: PUSH
56314: LD_INT 1
56316: NEG
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 1
56324: PUSH
56325: LD_INT 0
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 1
56334: PUSH
56335: LD_INT 1
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 0
56344: PUSH
56345: LD_INT 1
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 1
56354: NEG
56355: PUSH
56356: LD_INT 0
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 1
56365: NEG
56366: PUSH
56367: LD_INT 1
56369: NEG
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 1
56377: NEG
56378: PUSH
56379: LD_INT 2
56381: NEG
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 0
56389: PUSH
56390: LD_INT 2
56392: NEG
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 1
56400: PUSH
56401: LD_INT 1
56403: NEG
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 2
56411: NEG
56412: PUSH
56413: LD_INT 1
56415: NEG
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 2
56423: NEG
56424: PUSH
56425: LD_INT 2
56427: NEG
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56447: LD_ADDR_VAR 0 48
56451: PUSH
56452: LD_INT 0
56454: PUSH
56455: LD_INT 0
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 0
56464: PUSH
56465: LD_INT 1
56467: NEG
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 1
56475: PUSH
56476: LD_INT 0
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 1
56485: PUSH
56486: LD_INT 1
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 0
56495: PUSH
56496: LD_INT 1
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 1
56505: NEG
56506: PUSH
56507: LD_INT 0
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 1
56516: NEG
56517: PUSH
56518: LD_INT 1
56520: NEG
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 1
56528: NEG
56529: PUSH
56530: LD_INT 2
56532: NEG
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 0
56540: PUSH
56541: LD_INT 2
56543: NEG
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 1
56551: PUSH
56552: LD_INT 1
56554: NEG
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 2
56562: PUSH
56563: LD_INT 0
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 2
56572: PUSH
56573: LD_INT 1
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56594: LD_ADDR_VAR 0 49
56598: PUSH
56599: LD_INT 0
56601: PUSH
56602: LD_INT 0
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 0
56611: PUSH
56612: LD_INT 1
56614: NEG
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 1
56622: PUSH
56623: LD_INT 0
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 1
56632: PUSH
56633: LD_INT 1
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 0
56642: PUSH
56643: LD_INT 1
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 1
56652: NEG
56653: PUSH
56654: LD_INT 0
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 1
56663: NEG
56664: PUSH
56665: LD_INT 1
56667: NEG
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 1
56675: PUSH
56676: LD_INT 1
56678: NEG
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 2
56686: PUSH
56687: LD_INT 0
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 2
56696: PUSH
56697: LD_INT 1
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 2
56706: PUSH
56707: LD_INT 2
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 1
56716: PUSH
56717: LD_INT 2
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56738: LD_ADDR_VAR 0 50
56742: PUSH
56743: LD_INT 0
56745: PUSH
56746: LD_INT 0
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 0
56755: PUSH
56756: LD_INT 1
56758: NEG
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 1
56766: PUSH
56767: LD_INT 0
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 1
56776: PUSH
56777: LD_INT 1
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 0
56786: PUSH
56787: LD_INT 1
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 1
56796: NEG
56797: PUSH
56798: LD_INT 0
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 1
56807: NEG
56808: PUSH
56809: LD_INT 1
56811: NEG
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 2
56819: PUSH
56820: LD_INT 1
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 2
56829: PUSH
56830: LD_INT 2
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 1
56839: PUSH
56840: LD_INT 2
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 0
56849: PUSH
56850: LD_INT 2
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 1
56859: NEG
56860: PUSH
56861: LD_INT 1
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56882: LD_ADDR_VAR 0 51
56886: PUSH
56887: LD_INT 0
56889: PUSH
56890: LD_INT 0
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 0
56899: PUSH
56900: LD_INT 1
56902: NEG
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 1
56910: PUSH
56911: LD_INT 0
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 1
56920: PUSH
56921: LD_INT 1
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 0
56930: PUSH
56931: LD_INT 1
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 1
56940: NEG
56941: PUSH
56942: LD_INT 0
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 1
56951: NEG
56952: PUSH
56953: LD_INT 1
56955: NEG
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 1
56963: PUSH
56964: LD_INT 2
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 0
56973: PUSH
56974: LD_INT 2
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 1
56983: NEG
56984: PUSH
56985: LD_INT 1
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 2
56994: NEG
56995: PUSH
56996: LD_INT 0
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 2
57005: NEG
57006: PUSH
57007: LD_INT 1
57009: NEG
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57029: LD_ADDR_VAR 0 52
57033: PUSH
57034: LD_INT 0
57036: PUSH
57037: LD_INT 0
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 0
57046: PUSH
57047: LD_INT 1
57049: NEG
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 1
57057: PUSH
57058: LD_INT 0
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 1
57067: PUSH
57068: LD_INT 1
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 0
57077: PUSH
57078: LD_INT 1
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 1
57087: NEG
57088: PUSH
57089: LD_INT 0
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 1
57098: NEG
57099: PUSH
57100: LD_INT 1
57102: NEG
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 1
57110: NEG
57111: PUSH
57112: LD_INT 2
57114: NEG
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 1
57122: NEG
57123: PUSH
57124: LD_INT 1
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 2
57133: NEG
57134: PUSH
57135: LD_INT 0
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 2
57144: NEG
57145: PUSH
57146: LD_INT 1
57148: NEG
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 2
57156: NEG
57157: PUSH
57158: LD_INT 2
57160: NEG
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57180: LD_ADDR_VAR 0 53
57184: PUSH
57185: LD_INT 0
57187: PUSH
57188: LD_INT 0
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 0
57197: PUSH
57198: LD_INT 1
57200: NEG
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 1
57208: PUSH
57209: LD_INT 0
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 1
57218: PUSH
57219: LD_INT 1
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 0
57228: PUSH
57229: LD_INT 1
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 1
57238: NEG
57239: PUSH
57240: LD_INT 0
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 1
57249: NEG
57250: PUSH
57251: LD_INT 1
57253: NEG
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 1
57261: NEG
57262: PUSH
57263: LD_INT 2
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 0
57273: PUSH
57274: LD_INT 2
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 1
57284: PUSH
57285: LD_INT 1
57287: NEG
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 2
57295: PUSH
57296: LD_INT 0
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 2
57305: PUSH
57306: LD_INT 1
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 2
57315: PUSH
57316: LD_INT 2
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 1
57325: PUSH
57326: LD_INT 2
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 0
57335: PUSH
57336: LD_INT 2
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 1
57345: NEG
57346: PUSH
57347: LD_INT 1
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 2
57356: NEG
57357: PUSH
57358: LD_INT 0
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 2
57367: NEG
57368: PUSH
57369: LD_INT 1
57371: NEG
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 2
57379: NEG
57380: PUSH
57381: LD_INT 2
57383: NEG
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57410: LD_ADDR_VAR 0 54
57414: PUSH
57415: LD_INT 0
57417: PUSH
57418: LD_INT 0
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 0
57427: PUSH
57428: LD_INT 1
57430: NEG
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 1
57438: PUSH
57439: LD_INT 0
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 1
57448: PUSH
57449: LD_INT 1
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 0
57458: PUSH
57459: LD_INT 1
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 1
57468: NEG
57469: PUSH
57470: LD_INT 0
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 1
57479: NEG
57480: PUSH
57481: LD_INT 1
57483: NEG
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 1
57491: NEG
57492: PUSH
57493: LD_INT 2
57495: NEG
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 0
57503: PUSH
57504: LD_INT 2
57506: NEG
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 1
57514: PUSH
57515: LD_INT 1
57517: NEG
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 2
57525: PUSH
57526: LD_INT 0
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 2
57535: PUSH
57536: LD_INT 1
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 2
57545: PUSH
57546: LD_INT 2
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 1
57555: PUSH
57556: LD_INT 2
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 0
57565: PUSH
57566: LD_INT 2
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 1
57575: NEG
57576: PUSH
57577: LD_INT 1
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 2
57586: NEG
57587: PUSH
57588: LD_INT 0
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 2
57597: NEG
57598: PUSH
57599: LD_INT 1
57601: NEG
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 2
57609: NEG
57610: PUSH
57611: LD_INT 2
57613: NEG
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57640: LD_ADDR_VAR 0 55
57644: PUSH
57645: LD_INT 0
57647: PUSH
57648: LD_INT 0
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 0
57657: PUSH
57658: LD_INT 1
57660: NEG
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 1
57668: PUSH
57669: LD_INT 0
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 1
57678: PUSH
57679: LD_INT 1
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 0
57688: PUSH
57689: LD_INT 1
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 1
57698: NEG
57699: PUSH
57700: LD_INT 0
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 1
57709: NEG
57710: PUSH
57711: LD_INT 1
57713: NEG
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 1
57721: NEG
57722: PUSH
57723: LD_INT 2
57725: NEG
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 0
57733: PUSH
57734: LD_INT 2
57736: NEG
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 1
57744: PUSH
57745: LD_INT 1
57747: NEG
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 2
57755: PUSH
57756: LD_INT 0
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 2
57765: PUSH
57766: LD_INT 1
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 2
57775: PUSH
57776: LD_INT 2
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 1
57785: PUSH
57786: LD_INT 2
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 0
57795: PUSH
57796: LD_INT 2
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 1
57805: NEG
57806: PUSH
57807: LD_INT 1
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 2
57816: NEG
57817: PUSH
57818: LD_INT 0
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 2
57827: NEG
57828: PUSH
57829: LD_INT 1
57831: NEG
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 2
57839: NEG
57840: PUSH
57841: LD_INT 2
57843: NEG
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57870: LD_ADDR_VAR 0 56
57874: PUSH
57875: LD_INT 0
57877: PUSH
57878: LD_INT 0
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 0
57887: PUSH
57888: LD_INT 1
57890: NEG
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 1
57898: PUSH
57899: LD_INT 0
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 1
57908: PUSH
57909: LD_INT 1
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 0
57918: PUSH
57919: LD_INT 1
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 1
57928: NEG
57929: PUSH
57930: LD_INT 0
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 1
57939: NEG
57940: PUSH
57941: LD_INT 1
57943: NEG
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 1
57951: NEG
57952: PUSH
57953: LD_INT 2
57955: NEG
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 0
57963: PUSH
57964: LD_INT 2
57966: NEG
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 1
57974: PUSH
57975: LD_INT 1
57977: NEG
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 2
57985: PUSH
57986: LD_INT 0
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 2
57995: PUSH
57996: LD_INT 1
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 2
58005: PUSH
58006: LD_INT 2
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 1
58015: PUSH
58016: LD_INT 2
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 0
58025: PUSH
58026: LD_INT 2
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 1
58035: NEG
58036: PUSH
58037: LD_INT 1
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 2
58046: NEG
58047: PUSH
58048: LD_INT 0
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 2
58057: NEG
58058: PUSH
58059: LD_INT 1
58061: NEG
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 2
58069: NEG
58070: PUSH
58071: LD_INT 2
58073: NEG
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58100: LD_ADDR_VAR 0 57
58104: PUSH
58105: LD_INT 0
58107: PUSH
58108: LD_INT 0
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 0
58117: PUSH
58118: LD_INT 1
58120: NEG
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 1
58128: PUSH
58129: LD_INT 0
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 1
58138: PUSH
58139: LD_INT 1
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 0
58148: PUSH
58149: LD_INT 1
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 1
58158: NEG
58159: PUSH
58160: LD_INT 0
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 1
58169: NEG
58170: PUSH
58171: LD_INT 1
58173: NEG
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 1
58181: NEG
58182: PUSH
58183: LD_INT 2
58185: NEG
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 0
58193: PUSH
58194: LD_INT 2
58196: NEG
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 1
58204: PUSH
58205: LD_INT 1
58207: NEG
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 2
58215: PUSH
58216: LD_INT 0
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 2
58225: PUSH
58226: LD_INT 1
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 2
58235: PUSH
58236: LD_INT 2
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 1
58245: PUSH
58246: LD_INT 2
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 0
58255: PUSH
58256: LD_INT 2
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 1
58265: NEG
58266: PUSH
58267: LD_INT 1
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 2
58276: NEG
58277: PUSH
58278: LD_INT 0
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 2
58287: NEG
58288: PUSH
58289: LD_INT 1
58291: NEG
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 2
58299: NEG
58300: PUSH
58301: LD_INT 2
58303: NEG
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58330: LD_ADDR_VAR 0 58
58334: PUSH
58335: LD_INT 0
58337: PUSH
58338: LD_INT 0
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 0
58347: PUSH
58348: LD_INT 1
58350: NEG
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 1
58358: PUSH
58359: LD_INT 0
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 1
58368: PUSH
58369: LD_INT 1
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 0
58378: PUSH
58379: LD_INT 1
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 1
58388: NEG
58389: PUSH
58390: LD_INT 0
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 1
58399: NEG
58400: PUSH
58401: LD_INT 1
58403: NEG
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 1
58411: NEG
58412: PUSH
58413: LD_INT 2
58415: NEG
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 0
58423: PUSH
58424: LD_INT 2
58426: NEG
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 1
58434: PUSH
58435: LD_INT 1
58437: NEG
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 2
58445: PUSH
58446: LD_INT 0
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 2
58455: PUSH
58456: LD_INT 1
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 2
58465: PUSH
58466: LD_INT 2
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 1
58475: PUSH
58476: LD_INT 2
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 0
58485: PUSH
58486: LD_INT 2
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 1
58495: NEG
58496: PUSH
58497: LD_INT 1
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 2
58506: NEG
58507: PUSH
58508: LD_INT 0
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 2
58517: NEG
58518: PUSH
58519: LD_INT 1
58521: NEG
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 2
58529: NEG
58530: PUSH
58531: LD_INT 2
58533: NEG
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58560: LD_ADDR_VAR 0 59
58564: PUSH
58565: LD_INT 0
58567: PUSH
58568: LD_INT 0
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 0
58577: PUSH
58578: LD_INT 1
58580: NEG
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 1
58588: PUSH
58589: LD_INT 0
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 1
58598: PUSH
58599: LD_INT 1
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 0
58608: PUSH
58609: LD_INT 1
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 1
58618: NEG
58619: PUSH
58620: LD_INT 0
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 1
58629: NEG
58630: PUSH
58631: LD_INT 1
58633: NEG
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58648: LD_ADDR_VAR 0 60
58652: PUSH
58653: LD_INT 0
58655: PUSH
58656: LD_INT 0
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 0
58665: PUSH
58666: LD_INT 1
58668: NEG
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 1
58676: PUSH
58677: LD_INT 0
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 1
58686: PUSH
58687: LD_INT 1
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 0
58696: PUSH
58697: LD_INT 1
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 1
58706: NEG
58707: PUSH
58708: LD_INT 0
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 1
58717: NEG
58718: PUSH
58719: LD_INT 1
58721: NEG
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58736: LD_ADDR_VAR 0 61
58740: PUSH
58741: LD_INT 0
58743: PUSH
58744: LD_INT 0
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 0
58753: PUSH
58754: LD_INT 1
58756: NEG
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 1
58764: PUSH
58765: LD_INT 0
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 1
58774: PUSH
58775: LD_INT 1
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 0
58784: PUSH
58785: LD_INT 1
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 1
58794: NEG
58795: PUSH
58796: LD_INT 0
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 1
58805: NEG
58806: PUSH
58807: LD_INT 1
58809: NEG
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58824: LD_ADDR_VAR 0 62
58828: PUSH
58829: LD_INT 0
58831: PUSH
58832: LD_INT 0
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 0
58841: PUSH
58842: LD_INT 1
58844: NEG
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 1
58852: PUSH
58853: LD_INT 0
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 1
58862: PUSH
58863: LD_INT 1
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 0
58872: PUSH
58873: LD_INT 1
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 1
58882: NEG
58883: PUSH
58884: LD_INT 0
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 1
58893: NEG
58894: PUSH
58895: LD_INT 1
58897: NEG
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58912: LD_ADDR_VAR 0 63
58916: PUSH
58917: LD_INT 0
58919: PUSH
58920: LD_INT 0
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 0
58929: PUSH
58930: LD_INT 1
58932: NEG
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 1
58940: PUSH
58941: LD_INT 0
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 1
58950: PUSH
58951: LD_INT 1
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 0
58960: PUSH
58961: LD_INT 1
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 1
58970: NEG
58971: PUSH
58972: LD_INT 0
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 1
58981: NEG
58982: PUSH
58983: LD_INT 1
58985: NEG
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59000: LD_ADDR_VAR 0 64
59004: PUSH
59005: LD_INT 0
59007: PUSH
59008: LD_INT 0
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 0
59017: PUSH
59018: LD_INT 1
59020: NEG
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 1
59028: PUSH
59029: LD_INT 0
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 1
59038: PUSH
59039: LD_INT 1
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 0
59048: PUSH
59049: LD_INT 1
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 1
59058: NEG
59059: PUSH
59060: LD_INT 0
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 1
59069: NEG
59070: PUSH
59071: LD_INT 1
59073: NEG
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: ST_TO_ADDR
// end ; 1 :
59088: GO 64985
59090: LD_INT 1
59092: DOUBLE
59093: EQUAL
59094: IFTRUE 59098
59096: GO 61721
59098: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59099: LD_ADDR_VAR 0 11
59103: PUSH
59104: LD_INT 1
59106: NEG
59107: PUSH
59108: LD_INT 3
59110: NEG
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 0
59118: PUSH
59119: LD_INT 3
59121: NEG
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 1
59129: PUSH
59130: LD_INT 2
59132: NEG
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: LIST
59142: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59143: LD_ADDR_VAR 0 12
59147: PUSH
59148: LD_INT 2
59150: PUSH
59151: LD_INT 1
59153: NEG
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 3
59161: PUSH
59162: LD_INT 0
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 3
59171: PUSH
59172: LD_INT 1
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: LIST
59183: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59184: LD_ADDR_VAR 0 13
59188: PUSH
59189: LD_INT 3
59191: PUSH
59192: LD_INT 2
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 3
59201: PUSH
59202: LD_INT 3
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 2
59211: PUSH
59212: LD_INT 3
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: LIST
59223: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59224: LD_ADDR_VAR 0 14
59228: PUSH
59229: LD_INT 1
59231: PUSH
59232: LD_INT 3
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 0
59241: PUSH
59242: LD_INT 3
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 1
59251: NEG
59252: PUSH
59253: LD_INT 2
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: LIST
59264: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59265: LD_ADDR_VAR 0 15
59269: PUSH
59270: LD_INT 2
59272: NEG
59273: PUSH
59274: LD_INT 1
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 3
59283: NEG
59284: PUSH
59285: LD_INT 0
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 3
59294: NEG
59295: PUSH
59296: LD_INT 1
59298: NEG
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: LIST
59308: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59309: LD_ADDR_VAR 0 16
59313: PUSH
59314: LD_INT 2
59316: NEG
59317: PUSH
59318: LD_INT 3
59320: NEG
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 3
59328: NEG
59329: PUSH
59330: LD_INT 2
59332: NEG
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 3
59340: NEG
59341: PUSH
59342: LD_INT 3
59344: NEG
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: LIST
59354: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59355: LD_ADDR_VAR 0 17
59359: PUSH
59360: LD_INT 1
59362: NEG
59363: PUSH
59364: LD_INT 3
59366: NEG
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 0
59374: PUSH
59375: LD_INT 3
59377: NEG
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 1
59385: PUSH
59386: LD_INT 2
59388: NEG
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: LIST
59398: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59399: LD_ADDR_VAR 0 18
59403: PUSH
59404: LD_INT 2
59406: PUSH
59407: LD_INT 1
59409: NEG
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 3
59417: PUSH
59418: LD_INT 0
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 3
59427: PUSH
59428: LD_INT 1
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: LIST
59439: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59440: LD_ADDR_VAR 0 19
59444: PUSH
59445: LD_INT 3
59447: PUSH
59448: LD_INT 2
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 3
59457: PUSH
59458: LD_INT 3
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 2
59467: PUSH
59468: LD_INT 3
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: LIST
59479: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59480: LD_ADDR_VAR 0 20
59484: PUSH
59485: LD_INT 1
59487: PUSH
59488: LD_INT 3
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 0
59497: PUSH
59498: LD_INT 3
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 1
59507: NEG
59508: PUSH
59509: LD_INT 2
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: LIST
59520: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59521: LD_ADDR_VAR 0 21
59525: PUSH
59526: LD_INT 2
59528: NEG
59529: PUSH
59530: LD_INT 1
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 3
59539: NEG
59540: PUSH
59541: LD_INT 0
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 3
59550: NEG
59551: PUSH
59552: LD_INT 1
59554: NEG
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: LIST
59564: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59565: LD_ADDR_VAR 0 22
59569: PUSH
59570: LD_INT 2
59572: NEG
59573: PUSH
59574: LD_INT 3
59576: NEG
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 3
59584: NEG
59585: PUSH
59586: LD_INT 2
59588: NEG
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 3
59596: NEG
59597: PUSH
59598: LD_INT 3
59600: NEG
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: LIST
59610: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
59611: LD_ADDR_VAR 0 23
59615: PUSH
59616: LD_INT 0
59618: PUSH
59619: LD_INT 3
59621: NEG
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 1
59629: NEG
59630: PUSH
59631: LD_INT 4
59633: NEG
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 1
59641: PUSH
59642: LD_INT 3
59644: NEG
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: LIST
59654: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
59655: LD_ADDR_VAR 0 24
59659: PUSH
59660: LD_INT 3
59662: PUSH
59663: LD_INT 0
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 3
59672: PUSH
59673: LD_INT 1
59675: NEG
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 4
59683: PUSH
59684: LD_INT 1
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: LIST
59695: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
59696: LD_ADDR_VAR 0 25
59700: PUSH
59701: LD_INT 3
59703: PUSH
59704: LD_INT 3
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 4
59713: PUSH
59714: LD_INT 3
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 3
59723: PUSH
59724: LD_INT 4
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: LIST
59735: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
59736: LD_ADDR_VAR 0 26
59740: PUSH
59741: LD_INT 0
59743: PUSH
59744: LD_INT 3
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 1
59753: PUSH
59754: LD_INT 4
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 1
59763: NEG
59764: PUSH
59765: LD_INT 3
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: LIST
59776: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
59777: LD_ADDR_VAR 0 27
59781: PUSH
59782: LD_INT 3
59784: NEG
59785: PUSH
59786: LD_INT 0
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 3
59795: NEG
59796: PUSH
59797: LD_INT 1
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 4
59806: NEG
59807: PUSH
59808: LD_INT 1
59810: NEG
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: LIST
59820: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
59821: LD_ADDR_VAR 0 28
59825: PUSH
59826: LD_INT 3
59828: NEG
59829: PUSH
59830: LD_INT 3
59832: NEG
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 3
59840: NEG
59841: PUSH
59842: LD_INT 4
59844: NEG
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 4
59852: NEG
59853: PUSH
59854: LD_INT 3
59856: NEG
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: LIST
59866: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
59867: LD_ADDR_VAR 0 29
59871: PUSH
59872: LD_INT 1
59874: NEG
59875: PUSH
59876: LD_INT 3
59878: NEG
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 0
59886: PUSH
59887: LD_INT 3
59889: NEG
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 1
59897: PUSH
59898: LD_INT 2
59900: NEG
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 1
59908: NEG
59909: PUSH
59910: LD_INT 4
59912: NEG
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 0
59920: PUSH
59921: LD_INT 4
59923: NEG
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 1
59931: PUSH
59932: LD_INT 3
59934: NEG
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 1
59942: NEG
59943: PUSH
59944: LD_INT 5
59946: NEG
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 0
59954: PUSH
59955: LD_INT 5
59957: NEG
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 1
59965: PUSH
59966: LD_INT 4
59968: NEG
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 1
59976: NEG
59977: PUSH
59978: LD_INT 6
59980: NEG
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 0
59988: PUSH
59989: LD_INT 6
59991: NEG
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 1
59999: PUSH
60000: LD_INT 5
60002: NEG
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
60022: LD_ADDR_VAR 0 30
60026: PUSH
60027: LD_INT 2
60029: PUSH
60030: LD_INT 1
60032: NEG
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 3
60040: PUSH
60041: LD_INT 0
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 3
60050: PUSH
60051: LD_INT 1
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 3
60060: PUSH
60061: LD_INT 1
60063: NEG
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 4
60071: PUSH
60072: LD_INT 0
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 4
60081: PUSH
60082: LD_INT 1
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 4
60091: PUSH
60092: LD_INT 1
60094: NEG
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 5
60102: PUSH
60103: LD_INT 0
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 5
60112: PUSH
60113: LD_INT 1
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 5
60122: PUSH
60123: LD_INT 1
60125: NEG
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 6
60133: PUSH
60134: LD_INT 0
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 6
60143: PUSH
60144: LD_INT 1
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
60165: LD_ADDR_VAR 0 31
60169: PUSH
60170: LD_INT 3
60172: PUSH
60173: LD_INT 2
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 3
60182: PUSH
60183: LD_INT 3
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 2
60192: PUSH
60193: LD_INT 3
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 4
60202: PUSH
60203: LD_INT 3
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 4
60212: PUSH
60213: LD_INT 4
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 3
60222: PUSH
60223: LD_INT 4
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 5
60232: PUSH
60233: LD_INT 4
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 5
60242: PUSH
60243: LD_INT 5
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 4
60252: PUSH
60253: LD_INT 5
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 6
60262: PUSH
60263: LD_INT 5
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 6
60272: PUSH
60273: LD_INT 6
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 5
60282: PUSH
60283: LD_INT 6
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
60304: LD_ADDR_VAR 0 32
60308: PUSH
60309: LD_INT 1
60311: PUSH
60312: LD_INT 3
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 0
60321: PUSH
60322: LD_INT 3
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 1
60331: NEG
60332: PUSH
60333: LD_INT 2
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 1
60342: PUSH
60343: LD_INT 4
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 0
60352: PUSH
60353: LD_INT 4
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 1
60362: NEG
60363: PUSH
60364: LD_INT 3
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 1
60373: PUSH
60374: LD_INT 5
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 0
60383: PUSH
60384: LD_INT 5
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 1
60393: NEG
60394: PUSH
60395: LD_INT 4
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 1
60404: PUSH
60405: LD_INT 6
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 0
60414: PUSH
60415: LD_INT 6
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 1
60424: NEG
60425: PUSH
60426: LD_INT 5
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
60447: LD_ADDR_VAR 0 33
60451: PUSH
60452: LD_INT 2
60454: NEG
60455: PUSH
60456: LD_INT 1
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 3
60465: NEG
60466: PUSH
60467: LD_INT 0
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 3
60476: NEG
60477: PUSH
60478: LD_INT 1
60480: NEG
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 3
60488: NEG
60489: PUSH
60490: LD_INT 1
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: LD_INT 4
60499: NEG
60500: PUSH
60501: LD_INT 0
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 4
60510: NEG
60511: PUSH
60512: LD_INT 1
60514: NEG
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 4
60522: NEG
60523: PUSH
60524: LD_INT 1
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 5
60533: NEG
60534: PUSH
60535: LD_INT 0
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 5
60544: NEG
60545: PUSH
60546: LD_INT 1
60548: NEG
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 5
60556: NEG
60557: PUSH
60558: LD_INT 1
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 6
60567: NEG
60568: PUSH
60569: LD_INT 0
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 6
60578: NEG
60579: PUSH
60580: LD_INT 1
60582: NEG
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
60602: LD_ADDR_VAR 0 34
60606: PUSH
60607: LD_INT 2
60609: NEG
60610: PUSH
60611: LD_INT 3
60613: NEG
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 3
60621: NEG
60622: PUSH
60623: LD_INT 2
60625: NEG
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 3
60633: NEG
60634: PUSH
60635: LD_INT 3
60637: NEG
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 3
60645: NEG
60646: PUSH
60647: LD_INT 4
60649: NEG
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 4
60657: NEG
60658: PUSH
60659: LD_INT 3
60661: NEG
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 4
60669: NEG
60670: PUSH
60671: LD_INT 4
60673: NEG
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 4
60681: NEG
60682: PUSH
60683: LD_INT 5
60685: NEG
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 5
60693: NEG
60694: PUSH
60695: LD_INT 4
60697: NEG
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 5
60705: NEG
60706: PUSH
60707: LD_INT 5
60709: NEG
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 5
60717: NEG
60718: PUSH
60719: LD_INT 6
60721: NEG
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 6
60729: NEG
60730: PUSH
60731: LD_INT 5
60733: NEG
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 6
60741: NEG
60742: PUSH
60743: LD_INT 6
60745: NEG
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
60765: LD_ADDR_VAR 0 41
60769: PUSH
60770: LD_INT 0
60772: PUSH
60773: LD_INT 2
60775: NEG
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 1
60783: NEG
60784: PUSH
60785: LD_INT 3
60787: NEG
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 1
60795: PUSH
60796: LD_INT 2
60798: NEG
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: LIST
60808: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
60809: LD_ADDR_VAR 0 42
60813: PUSH
60814: LD_INT 2
60816: PUSH
60817: LD_INT 0
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 2
60826: PUSH
60827: LD_INT 1
60829: NEG
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: LD_INT 3
60837: PUSH
60838: LD_INT 1
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: LIST
60849: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
60850: LD_ADDR_VAR 0 43
60854: PUSH
60855: LD_INT 2
60857: PUSH
60858: LD_INT 2
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 3
60867: PUSH
60868: LD_INT 2
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 2
60877: PUSH
60878: LD_INT 3
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: LIST
60889: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
60890: LD_ADDR_VAR 0 44
60894: PUSH
60895: LD_INT 0
60897: PUSH
60898: LD_INT 2
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 1
60907: PUSH
60908: LD_INT 3
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 1
60917: NEG
60918: PUSH
60919: LD_INT 2
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: LIST
60930: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60931: LD_ADDR_VAR 0 45
60935: PUSH
60936: LD_INT 2
60938: NEG
60939: PUSH
60940: LD_INT 0
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 2
60949: NEG
60950: PUSH
60951: LD_INT 1
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 3
60960: NEG
60961: PUSH
60962: LD_INT 1
60964: NEG
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: LIST
60974: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
60975: LD_ADDR_VAR 0 46
60979: PUSH
60980: LD_INT 2
60982: NEG
60983: PUSH
60984: LD_INT 2
60986: NEG
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 2
60994: NEG
60995: PUSH
60996: LD_INT 3
60998: NEG
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 3
61006: NEG
61007: PUSH
61008: LD_INT 2
61010: NEG
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: LIST
61020: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
61021: LD_ADDR_VAR 0 47
61025: PUSH
61026: LD_INT 2
61028: NEG
61029: PUSH
61030: LD_INT 3
61032: NEG
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 1
61040: NEG
61041: PUSH
61042: LD_INT 3
61044: NEG
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61054: LD_ADDR_VAR 0 48
61058: PUSH
61059: LD_INT 1
61061: PUSH
61062: LD_INT 2
61064: NEG
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 2
61072: PUSH
61073: LD_INT 1
61075: NEG
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
61085: LD_ADDR_VAR 0 49
61089: PUSH
61090: LD_INT 3
61092: PUSH
61093: LD_INT 1
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 3
61102: PUSH
61103: LD_INT 2
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
61114: LD_ADDR_VAR 0 50
61118: PUSH
61119: LD_INT 2
61121: PUSH
61122: LD_INT 3
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 1
61131: PUSH
61132: LD_INT 3
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61143: LD_ADDR_VAR 0 51
61147: PUSH
61148: LD_INT 1
61150: NEG
61151: PUSH
61152: LD_INT 2
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 2
61161: NEG
61162: PUSH
61163: LD_INT 1
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61174: LD_ADDR_VAR 0 52
61178: PUSH
61179: LD_INT 3
61181: NEG
61182: PUSH
61183: LD_INT 1
61185: NEG
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 3
61193: NEG
61194: PUSH
61195: LD_INT 2
61197: NEG
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61207: LD_ADDR_VAR 0 53
61211: PUSH
61212: LD_INT 1
61214: NEG
61215: PUSH
61216: LD_INT 3
61218: NEG
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 0
61226: PUSH
61227: LD_INT 3
61229: NEG
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 1
61237: PUSH
61238: LD_INT 2
61240: NEG
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: LIST
61250: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61251: LD_ADDR_VAR 0 54
61255: PUSH
61256: LD_INT 2
61258: PUSH
61259: LD_INT 1
61261: NEG
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 3
61269: PUSH
61270: LD_INT 0
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 3
61279: PUSH
61280: LD_INT 1
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: LIST
61291: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61292: LD_ADDR_VAR 0 55
61296: PUSH
61297: LD_INT 3
61299: PUSH
61300: LD_INT 2
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 3
61309: PUSH
61310: LD_INT 3
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 2
61319: PUSH
61320: LD_INT 3
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: LIST
61331: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61332: LD_ADDR_VAR 0 56
61336: PUSH
61337: LD_INT 1
61339: PUSH
61340: LD_INT 3
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 0
61349: PUSH
61350: LD_INT 3
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 1
61359: NEG
61360: PUSH
61361: LD_INT 2
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: LIST
61372: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61373: LD_ADDR_VAR 0 57
61377: PUSH
61378: LD_INT 2
61380: NEG
61381: PUSH
61382: LD_INT 1
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 3
61391: NEG
61392: PUSH
61393: LD_INT 0
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 3
61402: NEG
61403: PUSH
61404: LD_INT 1
61406: NEG
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: LIST
61416: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61417: LD_ADDR_VAR 0 58
61421: PUSH
61422: LD_INT 2
61424: NEG
61425: PUSH
61426: LD_INT 3
61428: NEG
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 3
61436: NEG
61437: PUSH
61438: LD_INT 2
61440: NEG
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 3
61448: NEG
61449: PUSH
61450: LD_INT 3
61452: NEG
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: LIST
61462: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
61463: LD_ADDR_VAR 0 59
61467: PUSH
61468: LD_INT 1
61470: NEG
61471: PUSH
61472: LD_INT 2
61474: NEG
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 0
61482: PUSH
61483: LD_INT 2
61485: NEG
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 1
61493: PUSH
61494: LD_INT 1
61496: NEG
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: LIST
61506: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61507: LD_ADDR_VAR 0 60
61511: PUSH
61512: LD_INT 1
61514: PUSH
61515: LD_INT 1
61517: NEG
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 2
61525: PUSH
61526: LD_INT 0
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 2
61535: PUSH
61536: LD_INT 1
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: LIST
61547: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61548: LD_ADDR_VAR 0 61
61552: PUSH
61553: LD_INT 2
61555: PUSH
61556: LD_INT 1
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 2
61565: PUSH
61566: LD_INT 2
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 1
61575: PUSH
61576: LD_INT 2
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: LIST
61587: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61588: LD_ADDR_VAR 0 62
61592: PUSH
61593: LD_INT 1
61595: PUSH
61596: LD_INT 2
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 0
61605: PUSH
61606: LD_INT 2
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 1
61615: NEG
61616: PUSH
61617: LD_INT 1
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: LIST
61628: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61629: LD_ADDR_VAR 0 63
61633: PUSH
61634: LD_INT 1
61636: NEG
61637: PUSH
61638: LD_INT 1
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 2
61647: NEG
61648: PUSH
61649: LD_INT 0
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 2
61658: NEG
61659: PUSH
61660: LD_INT 1
61662: NEG
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: LIST
61672: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61673: LD_ADDR_VAR 0 64
61677: PUSH
61678: LD_INT 1
61680: NEG
61681: PUSH
61682: LD_INT 2
61684: NEG
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 2
61692: NEG
61693: PUSH
61694: LD_INT 1
61696: NEG
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: LD_INT 2
61704: NEG
61705: PUSH
61706: LD_INT 2
61708: NEG
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: LIST
61718: ST_TO_ADDR
// end ; 2 :
61719: GO 64985
61721: LD_INT 2
61723: DOUBLE
61724: EQUAL
61725: IFTRUE 61729
61727: GO 64984
61729: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
61730: LD_ADDR_VAR 0 29
61734: PUSH
61735: LD_INT 4
61737: PUSH
61738: LD_INT 0
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 4
61747: PUSH
61748: LD_INT 1
61750: NEG
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 5
61758: PUSH
61759: LD_INT 0
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 5
61768: PUSH
61769: LD_INT 1
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: LD_INT 4
61778: PUSH
61779: LD_INT 1
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 3
61788: PUSH
61789: LD_INT 0
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: LD_INT 3
61798: PUSH
61799: LD_INT 1
61801: NEG
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 3
61809: PUSH
61810: LD_INT 2
61812: NEG
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 5
61820: PUSH
61821: LD_INT 2
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 3
61830: PUSH
61831: LD_INT 3
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: LD_INT 3
61840: PUSH
61841: LD_INT 2
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 4
61850: PUSH
61851: LD_INT 3
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 4
61860: PUSH
61861: LD_INT 4
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 3
61870: PUSH
61871: LD_INT 4
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: LD_INT 2
61880: PUSH
61881: LD_INT 3
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 2
61890: PUSH
61891: LD_INT 2
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 4
61900: PUSH
61901: LD_INT 2
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 2
61910: PUSH
61911: LD_INT 4
61913: PUSH
61914: EMPTY
61915: LIST
61916: LIST
61917: PUSH
61918: LD_INT 0
61920: PUSH
61921: LD_INT 4
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 0
61930: PUSH
61931: LD_INT 3
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 1
61940: PUSH
61941: LD_INT 4
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 1
61950: PUSH
61951: LD_INT 5
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 0
61960: PUSH
61961: LD_INT 5
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 1
61970: NEG
61971: PUSH
61972: LD_INT 4
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 1
61981: NEG
61982: PUSH
61983: LD_INT 3
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 2
61992: PUSH
61993: LD_INT 5
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 2
62002: NEG
62003: PUSH
62004: LD_INT 3
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 3
62013: NEG
62014: PUSH
62015: LD_INT 0
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: LD_INT 3
62024: NEG
62025: PUSH
62026: LD_INT 1
62028: NEG
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 2
62036: NEG
62037: PUSH
62038: LD_INT 0
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 2
62047: NEG
62048: PUSH
62049: LD_INT 1
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 3
62058: NEG
62059: PUSH
62060: LD_INT 1
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 4
62069: NEG
62070: PUSH
62071: LD_INT 0
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 4
62080: NEG
62081: PUSH
62082: LD_INT 1
62084: NEG
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 4
62092: NEG
62093: PUSH
62094: LD_INT 2
62096: NEG
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 2
62104: NEG
62105: PUSH
62106: LD_INT 2
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: LD_INT 4
62115: NEG
62116: PUSH
62117: LD_INT 4
62119: NEG
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 4
62127: NEG
62128: PUSH
62129: LD_INT 5
62131: NEG
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 3
62139: NEG
62140: PUSH
62141: LD_INT 4
62143: NEG
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 3
62151: NEG
62152: PUSH
62153: LD_INT 3
62155: NEG
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 4
62163: NEG
62164: PUSH
62165: LD_INT 3
62167: NEG
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 5
62175: NEG
62176: PUSH
62177: LD_INT 4
62179: NEG
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 5
62187: NEG
62188: PUSH
62189: LD_INT 5
62191: NEG
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 3
62199: NEG
62200: PUSH
62201: LD_INT 5
62203: NEG
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 5
62211: NEG
62212: PUSH
62213: LD_INT 3
62215: NEG
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
62268: LD_ADDR_VAR 0 30
62272: PUSH
62273: LD_INT 4
62275: PUSH
62276: LD_INT 4
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 4
62285: PUSH
62286: LD_INT 3
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 5
62295: PUSH
62296: LD_INT 4
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 5
62305: PUSH
62306: LD_INT 5
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 4
62315: PUSH
62316: LD_INT 5
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 3
62325: PUSH
62326: LD_INT 4
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 3
62335: PUSH
62336: LD_INT 3
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 5
62345: PUSH
62346: LD_INT 3
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 3
62355: PUSH
62356: LD_INT 5
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: LD_INT 0
62365: PUSH
62366: LD_INT 3
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 0
62375: PUSH
62376: LD_INT 2
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: LD_INT 1
62385: PUSH
62386: LD_INT 3
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 1
62395: PUSH
62396: LD_INT 4
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 0
62405: PUSH
62406: LD_INT 4
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 1
62415: NEG
62416: PUSH
62417: LD_INT 3
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 1
62426: NEG
62427: PUSH
62428: LD_INT 2
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 2
62437: PUSH
62438: LD_INT 4
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 2
62447: NEG
62448: PUSH
62449: LD_INT 2
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 4
62458: NEG
62459: PUSH
62460: LD_INT 0
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 4
62469: NEG
62470: PUSH
62471: LD_INT 1
62473: NEG
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 3
62481: NEG
62482: PUSH
62483: LD_INT 0
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 3
62492: NEG
62493: PUSH
62494: LD_INT 1
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: LD_INT 4
62503: NEG
62504: PUSH
62505: LD_INT 1
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 5
62514: NEG
62515: PUSH
62516: LD_INT 0
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: LD_INT 5
62525: NEG
62526: PUSH
62527: LD_INT 1
62529: NEG
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 5
62537: NEG
62538: PUSH
62539: LD_INT 2
62541: NEG
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 3
62549: NEG
62550: PUSH
62551: LD_INT 2
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: LD_INT 3
62560: NEG
62561: PUSH
62562: LD_INT 3
62564: NEG
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: LD_INT 3
62572: NEG
62573: PUSH
62574: LD_INT 4
62576: NEG
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 2
62584: NEG
62585: PUSH
62586: LD_INT 3
62588: NEG
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: LD_INT 2
62596: NEG
62597: PUSH
62598: LD_INT 2
62600: NEG
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: LD_INT 3
62608: NEG
62609: PUSH
62610: LD_INT 2
62612: NEG
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 4
62620: NEG
62621: PUSH
62622: LD_INT 3
62624: NEG
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: LD_INT 4
62632: NEG
62633: PUSH
62634: LD_INT 4
62636: NEG
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 2
62644: NEG
62645: PUSH
62646: LD_INT 4
62648: NEG
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 4
62656: NEG
62657: PUSH
62658: LD_INT 2
62660: NEG
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 0
62668: PUSH
62669: LD_INT 4
62671: NEG
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 0
62679: PUSH
62680: LD_INT 5
62682: NEG
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 1
62690: PUSH
62691: LD_INT 4
62693: NEG
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 1
62701: PUSH
62702: LD_INT 3
62704: NEG
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 0
62712: PUSH
62713: LD_INT 3
62715: NEG
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 1
62723: NEG
62724: PUSH
62725: LD_INT 4
62727: NEG
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 1
62735: NEG
62736: PUSH
62737: LD_INT 5
62739: NEG
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 2
62747: PUSH
62748: LD_INT 3
62750: NEG
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 2
62758: NEG
62759: PUSH
62760: LD_INT 5
62762: NEG
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
62815: LD_ADDR_VAR 0 31
62819: PUSH
62820: LD_INT 0
62822: PUSH
62823: LD_INT 4
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 0
62832: PUSH
62833: LD_INT 3
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 1
62842: PUSH
62843: LD_INT 4
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 1
62852: PUSH
62853: LD_INT 5
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 0
62862: PUSH
62863: LD_INT 5
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 1
62872: NEG
62873: PUSH
62874: LD_INT 4
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 1
62883: NEG
62884: PUSH
62885: LD_INT 3
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 2
62894: PUSH
62895: LD_INT 5
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 2
62904: NEG
62905: PUSH
62906: LD_INT 3
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: LD_INT 3
62915: NEG
62916: PUSH
62917: LD_INT 0
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: LD_INT 3
62926: NEG
62927: PUSH
62928: LD_INT 1
62930: NEG
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 2
62938: NEG
62939: PUSH
62940: LD_INT 0
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 2
62949: NEG
62950: PUSH
62951: LD_INT 1
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 3
62960: NEG
62961: PUSH
62962: LD_INT 1
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 4
62971: NEG
62972: PUSH
62973: LD_INT 0
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 4
62982: NEG
62983: PUSH
62984: LD_INT 1
62986: NEG
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: LD_INT 4
62994: NEG
62995: PUSH
62996: LD_INT 2
62998: NEG
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 2
63006: NEG
63007: PUSH
63008: LD_INT 2
63010: PUSH
63011: EMPTY
63012: LIST
63013: LIST
63014: PUSH
63015: LD_INT 4
63017: NEG
63018: PUSH
63019: LD_INT 4
63021: NEG
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: PUSH
63027: LD_INT 4
63029: NEG
63030: PUSH
63031: LD_INT 5
63033: NEG
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 3
63041: NEG
63042: PUSH
63043: LD_INT 4
63045: NEG
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 3
63053: NEG
63054: PUSH
63055: LD_INT 3
63057: NEG
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: LD_INT 4
63065: NEG
63066: PUSH
63067: LD_INT 3
63069: NEG
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: PUSH
63075: LD_INT 5
63077: NEG
63078: PUSH
63079: LD_INT 4
63081: NEG
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: PUSH
63087: LD_INT 5
63089: NEG
63090: PUSH
63091: LD_INT 5
63093: NEG
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 3
63101: NEG
63102: PUSH
63103: LD_INT 5
63105: NEG
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: LD_INT 5
63113: NEG
63114: PUSH
63115: LD_INT 3
63117: NEG
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 0
63125: PUSH
63126: LD_INT 3
63128: NEG
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 0
63136: PUSH
63137: LD_INT 4
63139: NEG
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: LD_INT 1
63147: PUSH
63148: LD_INT 3
63150: NEG
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 1
63158: PUSH
63159: LD_INT 2
63161: NEG
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 0
63169: PUSH
63170: LD_INT 2
63172: NEG
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 1
63180: NEG
63181: PUSH
63182: LD_INT 3
63184: NEG
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 1
63192: NEG
63193: PUSH
63194: LD_INT 4
63196: NEG
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 2
63204: PUSH
63205: LD_INT 2
63207: NEG
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 2
63215: NEG
63216: PUSH
63217: LD_INT 4
63219: NEG
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 4
63227: PUSH
63228: LD_INT 0
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 4
63237: PUSH
63238: LD_INT 1
63240: NEG
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: LD_INT 5
63248: PUSH
63249: LD_INT 0
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: LD_INT 5
63258: PUSH
63259: LD_INT 1
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 4
63268: PUSH
63269: LD_INT 1
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: LD_INT 3
63278: PUSH
63279: LD_INT 0
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 3
63288: PUSH
63289: LD_INT 1
63291: NEG
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: PUSH
63297: LD_INT 3
63299: PUSH
63300: LD_INT 2
63302: NEG
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 5
63310: PUSH
63311: LD_INT 2
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: LIST
63347: LIST
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
63365: LD_ADDR_VAR 0 32
63369: PUSH
63370: LD_INT 4
63372: NEG
63373: PUSH
63374: LD_INT 0
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: LD_INT 4
63383: NEG
63384: PUSH
63385: LD_INT 1
63387: NEG
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: LD_INT 3
63395: NEG
63396: PUSH
63397: LD_INT 0
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: PUSH
63404: LD_INT 3
63406: NEG
63407: PUSH
63408: LD_INT 1
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 4
63417: NEG
63418: PUSH
63419: LD_INT 1
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 5
63428: NEG
63429: PUSH
63430: LD_INT 0
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 5
63439: NEG
63440: PUSH
63441: LD_INT 1
63443: NEG
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 5
63451: NEG
63452: PUSH
63453: LD_INT 2
63455: NEG
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 3
63463: NEG
63464: PUSH
63465: LD_INT 2
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 3
63474: NEG
63475: PUSH
63476: LD_INT 3
63478: NEG
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: LD_INT 3
63486: NEG
63487: PUSH
63488: LD_INT 4
63490: NEG
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 2
63498: NEG
63499: PUSH
63500: LD_INT 3
63502: NEG
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: PUSH
63508: LD_INT 2
63510: NEG
63511: PUSH
63512: LD_INT 2
63514: NEG
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: PUSH
63520: LD_INT 3
63522: NEG
63523: PUSH
63524: LD_INT 2
63526: NEG
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: LD_INT 4
63534: NEG
63535: PUSH
63536: LD_INT 3
63538: NEG
63539: PUSH
63540: EMPTY
63541: LIST
63542: LIST
63543: PUSH
63544: LD_INT 4
63546: NEG
63547: PUSH
63548: LD_INT 4
63550: NEG
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: LD_INT 2
63558: NEG
63559: PUSH
63560: LD_INT 4
63562: NEG
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: PUSH
63568: LD_INT 4
63570: NEG
63571: PUSH
63572: LD_INT 2
63574: NEG
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 0
63582: PUSH
63583: LD_INT 4
63585: NEG
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 0
63593: PUSH
63594: LD_INT 5
63596: NEG
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 1
63604: PUSH
63605: LD_INT 4
63607: NEG
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: PUSH
63613: LD_INT 1
63615: PUSH
63616: LD_INT 3
63618: NEG
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PUSH
63624: LD_INT 0
63626: PUSH
63627: LD_INT 3
63629: NEG
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 1
63637: NEG
63638: PUSH
63639: LD_INT 4
63641: NEG
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 1
63649: NEG
63650: PUSH
63651: LD_INT 5
63653: NEG
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: LD_INT 2
63661: PUSH
63662: LD_INT 3
63664: NEG
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 2
63672: NEG
63673: PUSH
63674: LD_INT 5
63676: NEG
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: LD_INT 3
63684: PUSH
63685: LD_INT 0
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 3
63694: PUSH
63695: LD_INT 1
63697: NEG
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 4
63705: PUSH
63706: LD_INT 0
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 4
63715: PUSH
63716: LD_INT 1
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 3
63725: PUSH
63726: LD_INT 1
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 2
63735: PUSH
63736: LD_INT 0
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: LD_INT 2
63745: PUSH
63746: LD_INT 1
63748: NEG
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 2
63756: PUSH
63757: LD_INT 2
63759: NEG
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: LD_INT 4
63767: PUSH
63768: LD_INT 2
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 4
63777: PUSH
63778: LD_INT 4
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 4
63787: PUSH
63788: LD_INT 3
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: LD_INT 5
63797: PUSH
63798: LD_INT 4
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 5
63807: PUSH
63808: LD_INT 5
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 4
63817: PUSH
63818: LD_INT 5
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 3
63827: PUSH
63828: LD_INT 4
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 3
63837: PUSH
63838: LD_INT 3
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 5
63847: PUSH
63848: LD_INT 3
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 3
63857: PUSH
63858: LD_INT 5
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
63912: LD_ADDR_VAR 0 33
63916: PUSH
63917: LD_INT 4
63919: NEG
63920: PUSH
63921: LD_INT 4
63923: NEG
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 4
63931: NEG
63932: PUSH
63933: LD_INT 5
63935: NEG
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PUSH
63941: LD_INT 3
63943: NEG
63944: PUSH
63945: LD_INT 4
63947: NEG
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: PUSH
63953: LD_INT 3
63955: NEG
63956: PUSH
63957: LD_INT 3
63959: NEG
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: PUSH
63965: LD_INT 4
63967: NEG
63968: PUSH
63969: LD_INT 3
63971: NEG
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 5
63979: NEG
63980: PUSH
63981: LD_INT 4
63983: NEG
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: LD_INT 5
63991: NEG
63992: PUSH
63993: LD_INT 5
63995: NEG
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: LD_INT 3
64003: NEG
64004: PUSH
64005: LD_INT 5
64007: NEG
64008: PUSH
64009: EMPTY
64010: LIST
64011: LIST
64012: PUSH
64013: LD_INT 5
64015: NEG
64016: PUSH
64017: LD_INT 3
64019: NEG
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PUSH
64025: LD_INT 0
64027: PUSH
64028: LD_INT 3
64030: NEG
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PUSH
64036: LD_INT 0
64038: PUSH
64039: LD_INT 4
64041: NEG
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: PUSH
64047: LD_INT 1
64049: PUSH
64050: LD_INT 3
64052: NEG
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 1
64060: PUSH
64061: LD_INT 2
64063: NEG
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: LD_INT 0
64071: PUSH
64072: LD_INT 2
64074: NEG
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: PUSH
64080: LD_INT 1
64082: NEG
64083: PUSH
64084: LD_INT 3
64086: NEG
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: LD_INT 1
64094: NEG
64095: PUSH
64096: LD_INT 4
64098: NEG
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: PUSH
64104: LD_INT 2
64106: PUSH
64107: LD_INT 2
64109: NEG
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: PUSH
64115: LD_INT 2
64117: NEG
64118: PUSH
64119: LD_INT 4
64121: NEG
64122: PUSH
64123: EMPTY
64124: LIST
64125: LIST
64126: PUSH
64127: LD_INT 4
64129: PUSH
64130: LD_INT 0
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: PUSH
64137: LD_INT 4
64139: PUSH
64140: LD_INT 1
64142: NEG
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 5
64150: PUSH
64151: LD_INT 0
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: LD_INT 5
64160: PUSH
64161: LD_INT 1
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 4
64170: PUSH
64171: LD_INT 1
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: LD_INT 3
64180: PUSH
64181: LD_INT 0
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: PUSH
64188: LD_INT 3
64190: PUSH
64191: LD_INT 1
64193: NEG
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 3
64201: PUSH
64202: LD_INT 2
64204: NEG
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: LD_INT 5
64212: PUSH
64213: LD_INT 2
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: LD_INT 3
64222: PUSH
64223: LD_INT 3
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 3
64232: PUSH
64233: LD_INT 2
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: PUSH
64240: LD_INT 4
64242: PUSH
64243: LD_INT 3
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PUSH
64250: LD_INT 4
64252: PUSH
64253: LD_INT 4
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: LD_INT 3
64262: PUSH
64263: LD_INT 4
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 2
64272: PUSH
64273: LD_INT 3
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: LD_INT 2
64282: PUSH
64283: LD_INT 2
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 4
64292: PUSH
64293: LD_INT 2
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: LD_INT 2
64302: PUSH
64303: LD_INT 4
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: PUSH
64310: LD_INT 0
64312: PUSH
64313: LD_INT 4
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: PUSH
64320: LD_INT 0
64322: PUSH
64323: LD_INT 3
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: PUSH
64330: LD_INT 1
64332: PUSH
64333: LD_INT 4
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: LD_INT 1
64342: PUSH
64343: LD_INT 5
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 0
64352: PUSH
64353: LD_INT 5
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 1
64362: NEG
64363: PUSH
64364: LD_INT 4
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: LD_INT 1
64373: NEG
64374: PUSH
64375: LD_INT 3
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: LD_INT 2
64384: PUSH
64385: LD_INT 5
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 2
64394: NEG
64395: PUSH
64396: LD_INT 3
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: LIST
64407: LIST
64408: LIST
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: LIST
64416: LIST
64417: LIST
64418: LIST
64419: LIST
64420: LIST
64421: LIST
64422: LIST
64423: LIST
64424: LIST
64425: LIST
64426: LIST
64427: LIST
64428: LIST
64429: LIST
64430: LIST
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
64450: LD_ADDR_VAR 0 34
64454: PUSH
64455: LD_INT 0
64457: PUSH
64458: LD_INT 4
64460: NEG
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: LD_INT 0
64468: PUSH
64469: LD_INT 5
64471: NEG
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: LD_INT 1
64479: PUSH
64480: LD_INT 4
64482: NEG
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: LD_INT 1
64490: PUSH
64491: LD_INT 3
64493: NEG
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_INT 0
64501: PUSH
64502: LD_INT 3
64504: NEG
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: LD_INT 1
64512: NEG
64513: PUSH
64514: LD_INT 4
64516: NEG
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 1
64524: NEG
64525: PUSH
64526: LD_INT 5
64528: NEG
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 2
64536: PUSH
64537: LD_INT 3
64539: NEG
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 2
64547: NEG
64548: PUSH
64549: LD_INT 5
64551: NEG
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 3
64559: PUSH
64560: LD_INT 0
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: LD_INT 3
64569: PUSH
64570: LD_INT 1
64572: NEG
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: PUSH
64578: LD_INT 4
64580: PUSH
64581: LD_INT 0
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: LD_INT 4
64590: PUSH
64591: LD_INT 1
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: LD_INT 3
64600: PUSH
64601: LD_INT 1
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: LD_INT 2
64610: PUSH
64611: LD_INT 0
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: LD_INT 2
64620: PUSH
64621: LD_INT 1
64623: NEG
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 2
64631: PUSH
64632: LD_INT 2
64634: NEG
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 4
64642: PUSH
64643: LD_INT 2
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 4
64652: PUSH
64653: LD_INT 4
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: LD_INT 4
64662: PUSH
64663: LD_INT 3
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: LD_INT 5
64672: PUSH
64673: LD_INT 4
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PUSH
64680: LD_INT 5
64682: PUSH
64683: LD_INT 5
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: PUSH
64690: LD_INT 4
64692: PUSH
64693: LD_INT 5
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: LD_INT 3
64702: PUSH
64703: LD_INT 4
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 3
64712: PUSH
64713: LD_INT 3
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: LD_INT 5
64722: PUSH
64723: LD_INT 3
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: PUSH
64730: LD_INT 3
64732: PUSH
64733: LD_INT 5
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: LD_INT 0
64742: PUSH
64743: LD_INT 3
64745: PUSH
64746: EMPTY
64747: LIST
64748: LIST
64749: PUSH
64750: LD_INT 0
64752: PUSH
64753: LD_INT 2
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: LD_INT 1
64762: PUSH
64763: LD_INT 3
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: LD_INT 1
64772: PUSH
64773: LD_INT 4
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: PUSH
64780: LD_INT 0
64782: PUSH
64783: LD_INT 4
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: LD_INT 1
64792: NEG
64793: PUSH
64794: LD_INT 3
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: PUSH
64801: LD_INT 1
64803: NEG
64804: PUSH
64805: LD_INT 2
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: LD_INT 2
64814: PUSH
64815: LD_INT 4
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: PUSH
64822: LD_INT 2
64824: NEG
64825: PUSH
64826: LD_INT 2
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 4
64835: NEG
64836: PUSH
64837: LD_INT 0
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: PUSH
64844: LD_INT 4
64846: NEG
64847: PUSH
64848: LD_INT 1
64850: NEG
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: LD_INT 3
64858: NEG
64859: PUSH
64860: LD_INT 0
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: PUSH
64867: LD_INT 3
64869: NEG
64870: PUSH
64871: LD_INT 1
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: LD_INT 4
64880: NEG
64881: PUSH
64882: LD_INT 1
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PUSH
64889: LD_INT 5
64891: NEG
64892: PUSH
64893: LD_INT 0
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: LD_INT 5
64902: NEG
64903: PUSH
64904: LD_INT 1
64906: NEG
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: PUSH
64912: LD_INT 5
64914: NEG
64915: PUSH
64916: LD_INT 2
64918: NEG
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: PUSH
64924: LD_INT 3
64926: NEG
64927: PUSH
64928: LD_INT 2
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: LIST
64939: LIST
64940: LIST
64941: LIST
64942: LIST
64943: LIST
64944: LIST
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: LIST
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: LIST
64955: LIST
64956: LIST
64957: LIST
64958: LIST
64959: LIST
64960: LIST
64961: LIST
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: LIST
64973: LIST
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: ST_TO_ADDR
// end ; end ;
64982: GO 64985
64984: POP
// case btype of b_depot , b_warehouse :
64985: LD_VAR 0 1
64989: PUSH
64990: LD_INT 0
64992: DOUBLE
64993: EQUAL
64994: IFTRUE 65004
64996: LD_INT 1
64998: DOUBLE
64999: EQUAL
65000: IFTRUE 65004
65002: GO 65205
65004: POP
// case nation of nation_american :
65005: LD_VAR 0 5
65009: PUSH
65010: LD_INT 1
65012: DOUBLE
65013: EQUAL
65014: IFTRUE 65018
65016: GO 65074
65018: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
65019: LD_ADDR_VAR 0 9
65023: PUSH
65024: LD_VAR 0 11
65028: PUSH
65029: LD_VAR 0 12
65033: PUSH
65034: LD_VAR 0 13
65038: PUSH
65039: LD_VAR 0 14
65043: PUSH
65044: LD_VAR 0 15
65048: PUSH
65049: LD_VAR 0 16
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: PUSH
65062: LD_VAR 0 4
65066: PUSH
65067: LD_INT 1
65069: PLUS
65070: ARRAY
65071: ST_TO_ADDR
65072: GO 65203
65074: LD_INT 2
65076: DOUBLE
65077: EQUAL
65078: IFTRUE 65082
65080: GO 65138
65082: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
65083: LD_ADDR_VAR 0 9
65087: PUSH
65088: LD_VAR 0 17
65092: PUSH
65093: LD_VAR 0 18
65097: PUSH
65098: LD_VAR 0 19
65102: PUSH
65103: LD_VAR 0 20
65107: PUSH
65108: LD_VAR 0 21
65112: PUSH
65113: LD_VAR 0 22
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: LIST
65122: LIST
65123: LIST
65124: LIST
65125: PUSH
65126: LD_VAR 0 4
65130: PUSH
65131: LD_INT 1
65133: PLUS
65134: ARRAY
65135: ST_TO_ADDR
65136: GO 65203
65138: LD_INT 3
65140: DOUBLE
65141: EQUAL
65142: IFTRUE 65146
65144: GO 65202
65146: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
65147: LD_ADDR_VAR 0 9
65151: PUSH
65152: LD_VAR 0 23
65156: PUSH
65157: LD_VAR 0 24
65161: PUSH
65162: LD_VAR 0 25
65166: PUSH
65167: LD_VAR 0 26
65171: PUSH
65172: LD_VAR 0 27
65176: PUSH
65177: LD_VAR 0 28
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: LIST
65186: LIST
65187: LIST
65188: LIST
65189: PUSH
65190: LD_VAR 0 4
65194: PUSH
65195: LD_INT 1
65197: PLUS
65198: ARRAY
65199: ST_TO_ADDR
65200: GO 65203
65202: POP
65203: GO 65758
65205: LD_INT 2
65207: DOUBLE
65208: EQUAL
65209: IFTRUE 65219
65211: LD_INT 3
65213: DOUBLE
65214: EQUAL
65215: IFTRUE 65219
65217: GO 65275
65219: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
65220: LD_ADDR_VAR 0 9
65224: PUSH
65225: LD_VAR 0 29
65229: PUSH
65230: LD_VAR 0 30
65234: PUSH
65235: LD_VAR 0 31
65239: PUSH
65240: LD_VAR 0 32
65244: PUSH
65245: LD_VAR 0 33
65249: PUSH
65250: LD_VAR 0 34
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: LIST
65259: LIST
65260: LIST
65261: LIST
65262: PUSH
65263: LD_VAR 0 4
65267: PUSH
65268: LD_INT 1
65270: PLUS
65271: ARRAY
65272: ST_TO_ADDR
65273: GO 65758
65275: LD_INT 16
65277: DOUBLE
65278: EQUAL
65279: IFTRUE 65337
65281: LD_INT 17
65283: DOUBLE
65284: EQUAL
65285: IFTRUE 65337
65287: LD_INT 18
65289: DOUBLE
65290: EQUAL
65291: IFTRUE 65337
65293: LD_INT 19
65295: DOUBLE
65296: EQUAL
65297: IFTRUE 65337
65299: LD_INT 22
65301: DOUBLE
65302: EQUAL
65303: IFTRUE 65337
65305: LD_INT 20
65307: DOUBLE
65308: EQUAL
65309: IFTRUE 65337
65311: LD_INT 21
65313: DOUBLE
65314: EQUAL
65315: IFTRUE 65337
65317: LD_INT 23
65319: DOUBLE
65320: EQUAL
65321: IFTRUE 65337
65323: LD_INT 24
65325: DOUBLE
65326: EQUAL
65327: IFTRUE 65337
65329: LD_INT 25
65331: DOUBLE
65332: EQUAL
65333: IFTRUE 65337
65335: GO 65393
65337: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
65338: LD_ADDR_VAR 0 9
65342: PUSH
65343: LD_VAR 0 35
65347: PUSH
65348: LD_VAR 0 36
65352: PUSH
65353: LD_VAR 0 37
65357: PUSH
65358: LD_VAR 0 38
65362: PUSH
65363: LD_VAR 0 39
65367: PUSH
65368: LD_VAR 0 40
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: LIST
65377: LIST
65378: LIST
65379: LIST
65380: PUSH
65381: LD_VAR 0 4
65385: PUSH
65386: LD_INT 1
65388: PLUS
65389: ARRAY
65390: ST_TO_ADDR
65391: GO 65758
65393: LD_INT 6
65395: DOUBLE
65396: EQUAL
65397: IFTRUE 65449
65399: LD_INT 7
65401: DOUBLE
65402: EQUAL
65403: IFTRUE 65449
65405: LD_INT 8
65407: DOUBLE
65408: EQUAL
65409: IFTRUE 65449
65411: LD_INT 13
65413: DOUBLE
65414: EQUAL
65415: IFTRUE 65449
65417: LD_INT 12
65419: DOUBLE
65420: EQUAL
65421: IFTRUE 65449
65423: LD_INT 15
65425: DOUBLE
65426: EQUAL
65427: IFTRUE 65449
65429: LD_INT 11
65431: DOUBLE
65432: EQUAL
65433: IFTRUE 65449
65435: LD_INT 14
65437: DOUBLE
65438: EQUAL
65439: IFTRUE 65449
65441: LD_INT 10
65443: DOUBLE
65444: EQUAL
65445: IFTRUE 65449
65447: GO 65505
65449: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
65450: LD_ADDR_VAR 0 9
65454: PUSH
65455: LD_VAR 0 41
65459: PUSH
65460: LD_VAR 0 42
65464: PUSH
65465: LD_VAR 0 43
65469: PUSH
65470: LD_VAR 0 44
65474: PUSH
65475: LD_VAR 0 45
65479: PUSH
65480: LD_VAR 0 46
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: LIST
65489: LIST
65490: LIST
65491: LIST
65492: PUSH
65493: LD_VAR 0 4
65497: PUSH
65498: LD_INT 1
65500: PLUS
65501: ARRAY
65502: ST_TO_ADDR
65503: GO 65758
65505: LD_INT 36
65507: DOUBLE
65508: EQUAL
65509: IFTRUE 65513
65511: GO 65569
65513: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
65514: LD_ADDR_VAR 0 9
65518: PUSH
65519: LD_VAR 0 47
65523: PUSH
65524: LD_VAR 0 48
65528: PUSH
65529: LD_VAR 0 49
65533: PUSH
65534: LD_VAR 0 50
65538: PUSH
65539: LD_VAR 0 51
65543: PUSH
65544: LD_VAR 0 52
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: PUSH
65557: LD_VAR 0 4
65561: PUSH
65562: LD_INT 1
65564: PLUS
65565: ARRAY
65566: ST_TO_ADDR
65567: GO 65758
65569: LD_INT 4
65571: DOUBLE
65572: EQUAL
65573: IFTRUE 65595
65575: LD_INT 5
65577: DOUBLE
65578: EQUAL
65579: IFTRUE 65595
65581: LD_INT 34
65583: DOUBLE
65584: EQUAL
65585: IFTRUE 65595
65587: LD_INT 37
65589: DOUBLE
65590: EQUAL
65591: IFTRUE 65595
65593: GO 65651
65595: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
65596: LD_ADDR_VAR 0 9
65600: PUSH
65601: LD_VAR 0 53
65605: PUSH
65606: LD_VAR 0 54
65610: PUSH
65611: LD_VAR 0 55
65615: PUSH
65616: LD_VAR 0 56
65620: PUSH
65621: LD_VAR 0 57
65625: PUSH
65626: LD_VAR 0 58
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: PUSH
65639: LD_VAR 0 4
65643: PUSH
65644: LD_INT 1
65646: PLUS
65647: ARRAY
65648: ST_TO_ADDR
65649: GO 65758
65651: LD_INT 31
65653: DOUBLE
65654: EQUAL
65655: IFTRUE 65701
65657: LD_INT 32
65659: DOUBLE
65660: EQUAL
65661: IFTRUE 65701
65663: LD_INT 33
65665: DOUBLE
65666: EQUAL
65667: IFTRUE 65701
65669: LD_INT 27
65671: DOUBLE
65672: EQUAL
65673: IFTRUE 65701
65675: LD_INT 26
65677: DOUBLE
65678: EQUAL
65679: IFTRUE 65701
65681: LD_INT 28
65683: DOUBLE
65684: EQUAL
65685: IFTRUE 65701
65687: LD_INT 29
65689: DOUBLE
65690: EQUAL
65691: IFTRUE 65701
65693: LD_INT 30
65695: DOUBLE
65696: EQUAL
65697: IFTRUE 65701
65699: GO 65757
65701: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
65702: LD_ADDR_VAR 0 9
65706: PUSH
65707: LD_VAR 0 59
65711: PUSH
65712: LD_VAR 0 60
65716: PUSH
65717: LD_VAR 0 61
65721: PUSH
65722: LD_VAR 0 62
65726: PUSH
65727: LD_VAR 0 63
65731: PUSH
65732: LD_VAR 0 64
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: LIST
65741: LIST
65742: LIST
65743: LIST
65744: PUSH
65745: LD_VAR 0 4
65749: PUSH
65750: LD_INT 1
65752: PLUS
65753: ARRAY
65754: ST_TO_ADDR
65755: GO 65758
65757: POP
// temp_list2 = [ ] ;
65758: LD_ADDR_VAR 0 10
65762: PUSH
65763: EMPTY
65764: ST_TO_ADDR
// for i in temp_list do
65765: LD_ADDR_VAR 0 8
65769: PUSH
65770: LD_VAR 0 9
65774: PUSH
65775: FOR_IN
65776: IFFALSE 65828
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
65778: LD_ADDR_VAR 0 10
65782: PUSH
65783: LD_VAR 0 10
65787: PUSH
65788: LD_VAR 0 8
65792: PUSH
65793: LD_INT 1
65795: ARRAY
65796: PUSH
65797: LD_VAR 0 2
65801: PLUS
65802: PUSH
65803: LD_VAR 0 8
65807: PUSH
65808: LD_INT 2
65810: ARRAY
65811: PUSH
65812: LD_VAR 0 3
65816: PLUS
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: PUSH
65822: EMPTY
65823: LIST
65824: ADD
65825: ST_TO_ADDR
65826: GO 65775
65828: POP
65829: POP
// result = temp_list2 ;
65830: LD_ADDR_VAR 0 7
65834: PUSH
65835: LD_VAR 0 10
65839: ST_TO_ADDR
// end ;
65840: LD_VAR 0 7
65844: RET
// export function EnemyInRange ( unit , dist ) ; begin
65845: LD_INT 0
65847: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
65848: LD_ADDR_VAR 0 3
65852: PUSH
65853: LD_VAR 0 1
65857: PPUSH
65858: CALL_OW 255
65862: PPUSH
65863: LD_VAR 0 1
65867: PPUSH
65868: CALL_OW 250
65872: PPUSH
65873: LD_VAR 0 1
65877: PPUSH
65878: CALL_OW 251
65882: PPUSH
65883: LD_VAR 0 2
65887: PPUSH
65888: CALL 39949 0 4
65892: PUSH
65893: LD_INT 4
65895: ARRAY
65896: ST_TO_ADDR
// end ;
65897: LD_VAR 0 3
65901: RET
// export function PlayerSeeMe ( unit ) ; begin
65902: LD_INT 0
65904: PPUSH
// result := See ( your_side , unit ) ;
65905: LD_ADDR_VAR 0 2
65909: PUSH
65910: LD_OWVAR 2
65914: PPUSH
65915: LD_VAR 0 1
65919: PPUSH
65920: CALL_OW 292
65924: ST_TO_ADDR
// end ;
65925: LD_VAR 0 2
65929: RET
// export function ReverseDir ( unit ) ; begin
65930: LD_INT 0
65932: PPUSH
// if not unit then
65933: LD_VAR 0 1
65937: NOT
65938: IFFALSE 65942
// exit ;
65940: GO 65965
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
65942: LD_ADDR_VAR 0 2
65946: PUSH
65947: LD_VAR 0 1
65951: PPUSH
65952: CALL_OW 254
65956: PUSH
65957: LD_INT 3
65959: PLUS
65960: PUSH
65961: LD_INT 6
65963: MOD
65964: ST_TO_ADDR
// end ;
65965: LD_VAR 0 2
65969: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
65970: LD_INT 0
65972: PPUSH
65973: PPUSH
65974: PPUSH
65975: PPUSH
65976: PPUSH
// if not hexes then
65977: LD_VAR 0 2
65981: NOT
65982: IFFALSE 65986
// exit ;
65984: GO 66134
// dist := 9999 ;
65986: LD_ADDR_VAR 0 5
65990: PUSH
65991: LD_INT 9999
65993: ST_TO_ADDR
// for i = 1 to hexes do
65994: LD_ADDR_VAR 0 4
65998: PUSH
65999: DOUBLE
66000: LD_INT 1
66002: DEC
66003: ST_TO_ADDR
66004: LD_VAR 0 2
66008: PUSH
66009: FOR_TO
66010: IFFALSE 66122
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
66012: LD_VAR 0 1
66016: PPUSH
66017: LD_VAR 0 2
66021: PUSH
66022: LD_VAR 0 4
66026: ARRAY
66027: PUSH
66028: LD_INT 1
66030: ARRAY
66031: PPUSH
66032: LD_VAR 0 2
66036: PUSH
66037: LD_VAR 0 4
66041: ARRAY
66042: PUSH
66043: LD_INT 2
66045: ARRAY
66046: PPUSH
66047: CALL_OW 297
66051: PUSH
66052: LD_VAR 0 5
66056: LESS
66057: IFFALSE 66120
// begin hex := hexes [ i ] ;
66059: LD_ADDR_VAR 0 7
66063: PUSH
66064: LD_VAR 0 2
66068: PUSH
66069: LD_VAR 0 4
66073: ARRAY
66074: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66075: LD_ADDR_VAR 0 5
66079: PUSH
66080: LD_VAR 0 1
66084: PPUSH
66085: LD_VAR 0 2
66089: PUSH
66090: LD_VAR 0 4
66094: ARRAY
66095: PUSH
66096: LD_INT 1
66098: ARRAY
66099: PPUSH
66100: LD_VAR 0 2
66104: PUSH
66105: LD_VAR 0 4
66109: ARRAY
66110: PUSH
66111: LD_INT 2
66113: ARRAY
66114: PPUSH
66115: CALL_OW 297
66119: ST_TO_ADDR
// end ; end ;
66120: GO 66009
66122: POP
66123: POP
// result := hex ;
66124: LD_ADDR_VAR 0 3
66128: PUSH
66129: LD_VAR 0 7
66133: ST_TO_ADDR
// end ;
66134: LD_VAR 0 3
66138: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
66139: LD_INT 0
66141: PPUSH
66142: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
66143: LD_VAR 0 1
66147: NOT
66148: PUSH
66149: LD_VAR 0 1
66153: PUSH
66154: LD_INT 21
66156: PUSH
66157: LD_INT 2
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: PUSH
66164: LD_INT 23
66166: PUSH
66167: LD_INT 2
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PPUSH
66178: CALL_OW 69
66182: IN
66183: NOT
66184: OR
66185: IFFALSE 66189
// exit ;
66187: GO 66236
// for i = 1 to 3 do
66189: LD_ADDR_VAR 0 3
66193: PUSH
66194: DOUBLE
66195: LD_INT 1
66197: DEC
66198: ST_TO_ADDR
66199: LD_INT 3
66201: PUSH
66202: FOR_TO
66203: IFFALSE 66234
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
66205: LD_VAR 0 1
66209: PPUSH
66210: CALL_OW 250
66214: PPUSH
66215: LD_VAR 0 1
66219: PPUSH
66220: CALL_OW 251
66224: PPUSH
66225: LD_INT 1
66227: PPUSH
66228: CALL_OW 453
66232: GO 66202
66234: POP
66235: POP
// end ;
66236: LD_VAR 0 2
66240: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
66241: LD_INT 0
66243: PPUSH
66244: PPUSH
66245: PPUSH
66246: PPUSH
66247: PPUSH
66248: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
66249: LD_VAR 0 1
66253: NOT
66254: PUSH
66255: LD_VAR 0 2
66259: NOT
66260: OR
66261: PUSH
66262: LD_VAR 0 1
66266: PPUSH
66267: CALL_OW 314
66271: OR
66272: IFFALSE 66276
// exit ;
66274: GO 66717
// x := GetX ( enemy_unit ) ;
66276: LD_ADDR_VAR 0 7
66280: PUSH
66281: LD_VAR 0 2
66285: PPUSH
66286: CALL_OW 250
66290: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
66291: LD_ADDR_VAR 0 8
66295: PUSH
66296: LD_VAR 0 2
66300: PPUSH
66301: CALL_OW 251
66305: ST_TO_ADDR
// if not x or not y then
66306: LD_VAR 0 7
66310: NOT
66311: PUSH
66312: LD_VAR 0 8
66316: NOT
66317: OR
66318: IFFALSE 66322
// exit ;
66320: GO 66717
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
66322: LD_ADDR_VAR 0 6
66326: PUSH
66327: LD_VAR 0 7
66331: PPUSH
66332: LD_INT 0
66334: PPUSH
66335: LD_INT 4
66337: PPUSH
66338: CALL_OW 272
66342: PUSH
66343: LD_VAR 0 8
66347: PPUSH
66348: LD_INT 0
66350: PPUSH
66351: LD_INT 4
66353: PPUSH
66354: CALL_OW 273
66358: PUSH
66359: EMPTY
66360: LIST
66361: LIST
66362: PUSH
66363: LD_VAR 0 7
66367: PPUSH
66368: LD_INT 1
66370: PPUSH
66371: LD_INT 4
66373: PPUSH
66374: CALL_OW 272
66378: PUSH
66379: LD_VAR 0 8
66383: PPUSH
66384: LD_INT 1
66386: PPUSH
66387: LD_INT 4
66389: PPUSH
66390: CALL_OW 273
66394: PUSH
66395: EMPTY
66396: LIST
66397: LIST
66398: PUSH
66399: LD_VAR 0 7
66403: PPUSH
66404: LD_INT 2
66406: PPUSH
66407: LD_INT 4
66409: PPUSH
66410: CALL_OW 272
66414: PUSH
66415: LD_VAR 0 8
66419: PPUSH
66420: LD_INT 2
66422: PPUSH
66423: LD_INT 4
66425: PPUSH
66426: CALL_OW 273
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: LD_VAR 0 7
66439: PPUSH
66440: LD_INT 3
66442: PPUSH
66443: LD_INT 4
66445: PPUSH
66446: CALL_OW 272
66450: PUSH
66451: LD_VAR 0 8
66455: PPUSH
66456: LD_INT 3
66458: PPUSH
66459: LD_INT 4
66461: PPUSH
66462: CALL_OW 273
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: PUSH
66471: LD_VAR 0 7
66475: PPUSH
66476: LD_INT 4
66478: PPUSH
66479: LD_INT 4
66481: PPUSH
66482: CALL_OW 272
66486: PUSH
66487: LD_VAR 0 8
66491: PPUSH
66492: LD_INT 4
66494: PPUSH
66495: LD_INT 4
66497: PPUSH
66498: CALL_OW 273
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: PUSH
66507: LD_VAR 0 7
66511: PPUSH
66512: LD_INT 5
66514: PPUSH
66515: LD_INT 4
66517: PPUSH
66518: CALL_OW 272
66522: PUSH
66523: LD_VAR 0 8
66527: PPUSH
66528: LD_INT 5
66530: PPUSH
66531: LD_INT 4
66533: PPUSH
66534: CALL_OW 273
66538: PUSH
66539: EMPTY
66540: LIST
66541: LIST
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: LIST
66547: LIST
66548: LIST
66549: LIST
66550: ST_TO_ADDR
// for i = tmp downto 1 do
66551: LD_ADDR_VAR 0 4
66555: PUSH
66556: DOUBLE
66557: LD_VAR 0 6
66561: INC
66562: ST_TO_ADDR
66563: LD_INT 1
66565: PUSH
66566: FOR_DOWNTO
66567: IFFALSE 66668
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
66569: LD_VAR 0 6
66573: PUSH
66574: LD_VAR 0 4
66578: ARRAY
66579: PUSH
66580: LD_INT 1
66582: ARRAY
66583: PPUSH
66584: LD_VAR 0 6
66588: PUSH
66589: LD_VAR 0 4
66593: ARRAY
66594: PUSH
66595: LD_INT 2
66597: ARRAY
66598: PPUSH
66599: CALL_OW 488
66603: NOT
66604: PUSH
66605: LD_VAR 0 6
66609: PUSH
66610: LD_VAR 0 4
66614: ARRAY
66615: PUSH
66616: LD_INT 1
66618: ARRAY
66619: PPUSH
66620: LD_VAR 0 6
66624: PUSH
66625: LD_VAR 0 4
66629: ARRAY
66630: PUSH
66631: LD_INT 2
66633: ARRAY
66634: PPUSH
66635: CALL_OW 428
66639: PUSH
66640: LD_INT 0
66642: NONEQUAL
66643: OR
66644: IFFALSE 66666
// tmp := Delete ( tmp , i ) ;
66646: LD_ADDR_VAR 0 6
66650: PUSH
66651: LD_VAR 0 6
66655: PPUSH
66656: LD_VAR 0 4
66660: PPUSH
66661: CALL_OW 3
66665: ST_TO_ADDR
66666: GO 66566
66668: POP
66669: POP
// j := GetClosestHex ( unit , tmp ) ;
66670: LD_ADDR_VAR 0 5
66674: PUSH
66675: LD_VAR 0 1
66679: PPUSH
66680: LD_VAR 0 6
66684: PPUSH
66685: CALL 65970 0 2
66689: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
66690: LD_VAR 0 1
66694: PPUSH
66695: LD_VAR 0 5
66699: PUSH
66700: LD_INT 1
66702: ARRAY
66703: PPUSH
66704: LD_VAR 0 5
66708: PUSH
66709: LD_INT 2
66711: ARRAY
66712: PPUSH
66713: CALL_OW 111
// end ;
66717: LD_VAR 0 3
66721: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66722: LD_INT 0
66724: PPUSH
66725: PPUSH
66726: PPUSH
// uc_side = 0 ;
66727: LD_ADDR_OWVAR 20
66731: PUSH
66732: LD_INT 0
66734: ST_TO_ADDR
// uc_nation = 0 ;
66735: LD_ADDR_OWVAR 21
66739: PUSH
66740: LD_INT 0
66742: ST_TO_ADDR
// InitHc ;
66743: CALL_OW 19
// InitVc ;
66747: CALL_OW 20
// if mastodonts then
66751: LD_VAR 0 6
66755: IFFALSE 66822
// for i = 1 to mastodonts do
66757: LD_ADDR_VAR 0 11
66761: PUSH
66762: DOUBLE
66763: LD_INT 1
66765: DEC
66766: ST_TO_ADDR
66767: LD_VAR 0 6
66771: PUSH
66772: FOR_TO
66773: IFFALSE 66820
// begin vc_chassis := 31 ;
66775: LD_ADDR_OWVAR 37
66779: PUSH
66780: LD_INT 31
66782: ST_TO_ADDR
// vc_control := control_rider ;
66783: LD_ADDR_OWVAR 38
66787: PUSH
66788: LD_INT 4
66790: ST_TO_ADDR
// animal := CreateVehicle ;
66791: LD_ADDR_VAR 0 12
66795: PUSH
66796: CALL_OW 45
66800: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66801: LD_VAR 0 12
66805: PPUSH
66806: LD_VAR 0 8
66810: PPUSH
66811: LD_INT 0
66813: PPUSH
66814: CALL 68891 0 3
// end ;
66818: GO 66772
66820: POP
66821: POP
// if horses then
66822: LD_VAR 0 5
66826: IFFALSE 66893
// for i = 1 to horses do
66828: LD_ADDR_VAR 0 11
66832: PUSH
66833: DOUBLE
66834: LD_INT 1
66836: DEC
66837: ST_TO_ADDR
66838: LD_VAR 0 5
66842: PUSH
66843: FOR_TO
66844: IFFALSE 66891
// begin hc_class := 21 ;
66846: LD_ADDR_OWVAR 28
66850: PUSH
66851: LD_INT 21
66853: ST_TO_ADDR
// hc_gallery :=  ;
66854: LD_ADDR_OWVAR 33
66858: PUSH
66859: LD_STRING 
66861: ST_TO_ADDR
// animal := CreateHuman ;
66862: LD_ADDR_VAR 0 12
66866: PUSH
66867: CALL_OW 44
66871: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66872: LD_VAR 0 12
66876: PPUSH
66877: LD_VAR 0 8
66881: PPUSH
66882: LD_INT 0
66884: PPUSH
66885: CALL 68891 0 3
// end ;
66889: GO 66843
66891: POP
66892: POP
// if birds then
66893: LD_VAR 0 1
66897: IFFALSE 66964
// for i = 1 to birds do
66899: LD_ADDR_VAR 0 11
66903: PUSH
66904: DOUBLE
66905: LD_INT 1
66907: DEC
66908: ST_TO_ADDR
66909: LD_VAR 0 1
66913: PUSH
66914: FOR_TO
66915: IFFALSE 66962
// begin hc_class = 18 ;
66917: LD_ADDR_OWVAR 28
66921: PUSH
66922: LD_INT 18
66924: ST_TO_ADDR
// hc_gallery =  ;
66925: LD_ADDR_OWVAR 33
66929: PUSH
66930: LD_STRING 
66932: ST_TO_ADDR
// animal := CreateHuman ;
66933: LD_ADDR_VAR 0 12
66937: PUSH
66938: CALL_OW 44
66942: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66943: LD_VAR 0 12
66947: PPUSH
66948: LD_VAR 0 8
66952: PPUSH
66953: LD_INT 0
66955: PPUSH
66956: CALL 68891 0 3
// end ;
66960: GO 66914
66962: POP
66963: POP
// if tigers then
66964: LD_VAR 0 2
66968: IFFALSE 67052
// for i = 1 to tigers do
66970: LD_ADDR_VAR 0 11
66974: PUSH
66975: DOUBLE
66976: LD_INT 1
66978: DEC
66979: ST_TO_ADDR
66980: LD_VAR 0 2
66984: PUSH
66985: FOR_TO
66986: IFFALSE 67050
// begin hc_class = class_tiger ;
66988: LD_ADDR_OWVAR 28
66992: PUSH
66993: LD_INT 14
66995: ST_TO_ADDR
// hc_gallery =  ;
66996: LD_ADDR_OWVAR 33
67000: PUSH
67001: LD_STRING 
67003: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
67004: LD_ADDR_OWVAR 35
67008: PUSH
67009: LD_INT 7
67011: NEG
67012: PPUSH
67013: LD_INT 7
67015: PPUSH
67016: CALL_OW 12
67020: ST_TO_ADDR
// animal := CreateHuman ;
67021: LD_ADDR_VAR 0 12
67025: PUSH
67026: CALL_OW 44
67030: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67031: LD_VAR 0 12
67035: PPUSH
67036: LD_VAR 0 8
67040: PPUSH
67041: LD_INT 0
67043: PPUSH
67044: CALL 68891 0 3
// end ;
67048: GO 66985
67050: POP
67051: POP
// if apemans then
67052: LD_VAR 0 3
67056: IFFALSE 67179
// for i = 1 to apemans do
67058: LD_ADDR_VAR 0 11
67062: PUSH
67063: DOUBLE
67064: LD_INT 1
67066: DEC
67067: ST_TO_ADDR
67068: LD_VAR 0 3
67072: PUSH
67073: FOR_TO
67074: IFFALSE 67177
// begin hc_class = class_apeman ;
67076: LD_ADDR_OWVAR 28
67080: PUSH
67081: LD_INT 12
67083: ST_TO_ADDR
// hc_gallery =  ;
67084: LD_ADDR_OWVAR 33
67088: PUSH
67089: LD_STRING 
67091: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
67092: LD_ADDR_OWVAR 35
67096: PUSH
67097: LD_INT 5
67099: NEG
67100: PPUSH
67101: LD_INT 5
67103: PPUSH
67104: CALL_OW 12
67108: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
67109: LD_ADDR_OWVAR 31
67113: PUSH
67114: LD_INT 1
67116: PPUSH
67117: LD_INT 3
67119: PPUSH
67120: CALL_OW 12
67124: PUSH
67125: LD_INT 1
67127: PPUSH
67128: LD_INT 3
67130: PPUSH
67131: CALL_OW 12
67135: PUSH
67136: LD_INT 0
67138: PUSH
67139: LD_INT 0
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: LIST
67146: LIST
67147: ST_TO_ADDR
// animal := CreateHuman ;
67148: LD_ADDR_VAR 0 12
67152: PUSH
67153: CALL_OW 44
67157: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67158: LD_VAR 0 12
67162: PPUSH
67163: LD_VAR 0 8
67167: PPUSH
67168: LD_INT 0
67170: PPUSH
67171: CALL 68891 0 3
// end ;
67175: GO 67073
67177: POP
67178: POP
// if enchidnas then
67179: LD_VAR 0 4
67183: IFFALSE 67250
// for i = 1 to enchidnas do
67185: LD_ADDR_VAR 0 11
67189: PUSH
67190: DOUBLE
67191: LD_INT 1
67193: DEC
67194: ST_TO_ADDR
67195: LD_VAR 0 4
67199: PUSH
67200: FOR_TO
67201: IFFALSE 67248
// begin hc_class = 13 ;
67203: LD_ADDR_OWVAR 28
67207: PUSH
67208: LD_INT 13
67210: ST_TO_ADDR
// hc_gallery =  ;
67211: LD_ADDR_OWVAR 33
67215: PUSH
67216: LD_STRING 
67218: ST_TO_ADDR
// animal := CreateHuman ;
67219: LD_ADDR_VAR 0 12
67223: PUSH
67224: CALL_OW 44
67228: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67229: LD_VAR 0 12
67233: PPUSH
67234: LD_VAR 0 8
67238: PPUSH
67239: LD_INT 0
67241: PPUSH
67242: CALL 68891 0 3
// end ;
67246: GO 67200
67248: POP
67249: POP
// if fishes then
67250: LD_VAR 0 7
67254: IFFALSE 67321
// for i = 1 to fishes do
67256: LD_ADDR_VAR 0 11
67260: PUSH
67261: DOUBLE
67262: LD_INT 1
67264: DEC
67265: ST_TO_ADDR
67266: LD_VAR 0 7
67270: PUSH
67271: FOR_TO
67272: IFFALSE 67319
// begin hc_class = 20 ;
67274: LD_ADDR_OWVAR 28
67278: PUSH
67279: LD_INT 20
67281: ST_TO_ADDR
// hc_gallery =  ;
67282: LD_ADDR_OWVAR 33
67286: PUSH
67287: LD_STRING 
67289: ST_TO_ADDR
// animal := CreateHuman ;
67290: LD_ADDR_VAR 0 12
67294: PUSH
67295: CALL_OW 44
67299: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
67300: LD_VAR 0 12
67304: PPUSH
67305: LD_VAR 0 9
67309: PPUSH
67310: LD_INT 0
67312: PPUSH
67313: CALL 68891 0 3
// end ;
67317: GO 67271
67319: POP
67320: POP
// end ;
67321: LD_VAR 0 10
67325: RET
// export function WantHeal ( sci , unit ) ; begin
67326: LD_INT 0
67328: PPUSH
// if GetTaskList ( sci ) > 0 then
67329: LD_VAR 0 1
67333: PPUSH
67334: CALL_OW 437
67338: PUSH
67339: LD_INT 0
67341: GREATER
67342: IFFALSE 67412
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
67344: LD_VAR 0 1
67348: PPUSH
67349: CALL_OW 437
67353: PUSH
67354: LD_INT 1
67356: ARRAY
67357: PUSH
67358: LD_INT 1
67360: ARRAY
67361: PUSH
67362: LD_STRING l
67364: EQUAL
67365: PUSH
67366: LD_VAR 0 1
67370: PPUSH
67371: CALL_OW 437
67375: PUSH
67376: LD_INT 1
67378: ARRAY
67379: PUSH
67380: LD_INT 4
67382: ARRAY
67383: PUSH
67384: LD_VAR 0 2
67388: EQUAL
67389: AND
67390: IFFALSE 67402
// result := true else
67392: LD_ADDR_VAR 0 3
67396: PUSH
67397: LD_INT 1
67399: ST_TO_ADDR
67400: GO 67410
// result := false ;
67402: LD_ADDR_VAR 0 3
67406: PUSH
67407: LD_INT 0
67409: ST_TO_ADDR
// end else
67410: GO 67420
// result := false ;
67412: LD_ADDR_VAR 0 3
67416: PUSH
67417: LD_INT 0
67419: ST_TO_ADDR
// end ;
67420: LD_VAR 0 3
67424: RET
// export function HealTarget ( sci ) ; begin
67425: LD_INT 0
67427: PPUSH
// if not sci then
67428: LD_VAR 0 1
67432: NOT
67433: IFFALSE 67437
// exit ;
67435: GO 67502
// result := 0 ;
67437: LD_ADDR_VAR 0 2
67441: PUSH
67442: LD_INT 0
67444: ST_TO_ADDR
// if GetTaskList ( sci ) then
67445: LD_VAR 0 1
67449: PPUSH
67450: CALL_OW 437
67454: IFFALSE 67502
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67456: LD_VAR 0 1
67460: PPUSH
67461: CALL_OW 437
67465: PUSH
67466: LD_INT 1
67468: ARRAY
67469: PUSH
67470: LD_INT 1
67472: ARRAY
67473: PUSH
67474: LD_STRING l
67476: EQUAL
67477: IFFALSE 67502
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67479: LD_ADDR_VAR 0 2
67483: PUSH
67484: LD_VAR 0 1
67488: PPUSH
67489: CALL_OW 437
67493: PUSH
67494: LD_INT 1
67496: ARRAY
67497: PUSH
67498: LD_INT 4
67500: ARRAY
67501: ST_TO_ADDR
// end ;
67502: LD_VAR 0 2
67506: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67507: LD_INT 0
67509: PPUSH
67510: PPUSH
67511: PPUSH
67512: PPUSH
// if not base_units then
67513: LD_VAR 0 1
67517: NOT
67518: IFFALSE 67522
// exit ;
67520: GO 67609
// result := false ;
67522: LD_ADDR_VAR 0 2
67526: PUSH
67527: LD_INT 0
67529: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67530: LD_ADDR_VAR 0 5
67534: PUSH
67535: LD_VAR 0 1
67539: PPUSH
67540: LD_INT 21
67542: PUSH
67543: LD_INT 3
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PPUSH
67550: CALL_OW 72
67554: ST_TO_ADDR
// if not tmp then
67555: LD_VAR 0 5
67559: NOT
67560: IFFALSE 67564
// exit ;
67562: GO 67609
// for i in tmp do
67564: LD_ADDR_VAR 0 3
67568: PUSH
67569: LD_VAR 0 5
67573: PUSH
67574: FOR_IN
67575: IFFALSE 67607
// begin result := EnemyInRange ( i , 22 ) ;
67577: LD_ADDR_VAR 0 2
67581: PUSH
67582: LD_VAR 0 3
67586: PPUSH
67587: LD_INT 22
67589: PPUSH
67590: CALL 65845 0 2
67594: ST_TO_ADDR
// if result then
67595: LD_VAR 0 2
67599: IFFALSE 67605
// exit ;
67601: POP
67602: POP
67603: GO 67609
// end ;
67605: GO 67574
67607: POP
67608: POP
// end ;
67609: LD_VAR 0 2
67613: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
67614: LD_INT 0
67616: PPUSH
67617: PPUSH
// if not units then
67618: LD_VAR 0 1
67622: NOT
67623: IFFALSE 67627
// exit ;
67625: GO 67697
// result := [ ] ;
67627: LD_ADDR_VAR 0 3
67631: PUSH
67632: EMPTY
67633: ST_TO_ADDR
// for i in units do
67634: LD_ADDR_VAR 0 4
67638: PUSH
67639: LD_VAR 0 1
67643: PUSH
67644: FOR_IN
67645: IFFALSE 67695
// if GetTag ( i ) = tag then
67647: LD_VAR 0 4
67651: PPUSH
67652: CALL_OW 110
67656: PUSH
67657: LD_VAR 0 2
67661: EQUAL
67662: IFFALSE 67693
// result := Insert ( result , result + 1 , i ) ;
67664: LD_ADDR_VAR 0 3
67668: PUSH
67669: LD_VAR 0 3
67673: PPUSH
67674: LD_VAR 0 3
67678: PUSH
67679: LD_INT 1
67681: PLUS
67682: PPUSH
67683: LD_VAR 0 4
67687: PPUSH
67688: CALL_OW 2
67692: ST_TO_ADDR
67693: GO 67644
67695: POP
67696: POP
// end ;
67697: LD_VAR 0 3
67701: RET
// export function IsDriver ( un ) ; begin
67702: LD_INT 0
67704: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67705: LD_ADDR_VAR 0 2
67709: PUSH
67710: LD_VAR 0 1
67714: PUSH
67715: LD_INT 55
67717: PUSH
67718: EMPTY
67719: LIST
67720: PPUSH
67721: CALL_OW 69
67725: IN
67726: ST_TO_ADDR
// end ;
67727: LD_VAR 0 2
67731: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67732: LD_INT 0
67734: PPUSH
67735: PPUSH
// list := [ ] ;
67736: LD_ADDR_VAR 0 5
67740: PUSH
67741: EMPTY
67742: ST_TO_ADDR
// case d of 0 :
67743: LD_VAR 0 3
67747: PUSH
67748: LD_INT 0
67750: DOUBLE
67751: EQUAL
67752: IFTRUE 67756
67754: GO 67889
67756: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67757: LD_ADDR_VAR 0 5
67761: PUSH
67762: LD_VAR 0 1
67766: PUSH
67767: LD_INT 4
67769: MINUS
67770: PUSH
67771: LD_VAR 0 2
67775: PUSH
67776: LD_INT 4
67778: MINUS
67779: PUSH
67780: LD_INT 2
67782: PUSH
67783: EMPTY
67784: LIST
67785: LIST
67786: LIST
67787: PUSH
67788: LD_VAR 0 1
67792: PUSH
67793: LD_INT 3
67795: MINUS
67796: PUSH
67797: LD_VAR 0 2
67801: PUSH
67802: LD_INT 1
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: LIST
67809: PUSH
67810: LD_VAR 0 1
67814: PUSH
67815: LD_INT 4
67817: PLUS
67818: PUSH
67819: LD_VAR 0 2
67823: PUSH
67824: LD_INT 4
67826: PUSH
67827: EMPTY
67828: LIST
67829: LIST
67830: LIST
67831: PUSH
67832: LD_VAR 0 1
67836: PUSH
67837: LD_INT 3
67839: PLUS
67840: PUSH
67841: LD_VAR 0 2
67845: PUSH
67846: LD_INT 3
67848: PLUS
67849: PUSH
67850: LD_INT 5
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: LIST
67857: PUSH
67858: LD_VAR 0 1
67862: PUSH
67863: LD_VAR 0 2
67867: PUSH
67868: LD_INT 4
67870: PLUS
67871: PUSH
67872: LD_INT 0
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: LIST
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: LIST
67884: LIST
67885: LIST
67886: ST_TO_ADDR
// end ; 1 :
67887: GO 68587
67889: LD_INT 1
67891: DOUBLE
67892: EQUAL
67893: IFTRUE 67897
67895: GO 68030
67897: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67898: LD_ADDR_VAR 0 5
67902: PUSH
67903: LD_VAR 0 1
67907: PUSH
67908: LD_VAR 0 2
67912: PUSH
67913: LD_INT 4
67915: MINUS
67916: PUSH
67917: LD_INT 3
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: LIST
67924: PUSH
67925: LD_VAR 0 1
67929: PUSH
67930: LD_INT 3
67932: MINUS
67933: PUSH
67934: LD_VAR 0 2
67938: PUSH
67939: LD_INT 3
67941: MINUS
67942: PUSH
67943: LD_INT 2
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: LIST
67950: PUSH
67951: LD_VAR 0 1
67955: PUSH
67956: LD_INT 4
67958: MINUS
67959: PUSH
67960: LD_VAR 0 2
67964: PUSH
67965: LD_INT 1
67967: PUSH
67968: EMPTY
67969: LIST
67970: LIST
67971: LIST
67972: PUSH
67973: LD_VAR 0 1
67977: PUSH
67978: LD_VAR 0 2
67982: PUSH
67983: LD_INT 3
67985: PLUS
67986: PUSH
67987: LD_INT 0
67989: PUSH
67990: EMPTY
67991: LIST
67992: LIST
67993: LIST
67994: PUSH
67995: LD_VAR 0 1
67999: PUSH
68000: LD_INT 4
68002: PLUS
68003: PUSH
68004: LD_VAR 0 2
68008: PUSH
68009: LD_INT 4
68011: PLUS
68012: PUSH
68013: LD_INT 5
68015: PUSH
68016: EMPTY
68017: LIST
68018: LIST
68019: LIST
68020: PUSH
68021: EMPTY
68022: LIST
68023: LIST
68024: LIST
68025: LIST
68026: LIST
68027: ST_TO_ADDR
// end ; 2 :
68028: GO 68587
68030: LD_INT 2
68032: DOUBLE
68033: EQUAL
68034: IFTRUE 68038
68036: GO 68167
68038: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
68039: LD_ADDR_VAR 0 5
68043: PUSH
68044: LD_VAR 0 1
68048: PUSH
68049: LD_VAR 0 2
68053: PUSH
68054: LD_INT 3
68056: MINUS
68057: PUSH
68058: LD_INT 3
68060: PUSH
68061: EMPTY
68062: LIST
68063: LIST
68064: LIST
68065: PUSH
68066: LD_VAR 0 1
68070: PUSH
68071: LD_INT 4
68073: PLUS
68074: PUSH
68075: LD_VAR 0 2
68079: PUSH
68080: LD_INT 4
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: LIST
68087: PUSH
68088: LD_VAR 0 1
68092: PUSH
68093: LD_VAR 0 2
68097: PUSH
68098: LD_INT 4
68100: PLUS
68101: PUSH
68102: LD_INT 0
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: LIST
68109: PUSH
68110: LD_VAR 0 1
68114: PUSH
68115: LD_INT 3
68117: MINUS
68118: PUSH
68119: LD_VAR 0 2
68123: PUSH
68124: LD_INT 1
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: LIST
68131: PUSH
68132: LD_VAR 0 1
68136: PUSH
68137: LD_INT 4
68139: MINUS
68140: PUSH
68141: LD_VAR 0 2
68145: PUSH
68146: LD_INT 4
68148: MINUS
68149: PUSH
68150: LD_INT 2
68152: PUSH
68153: EMPTY
68154: LIST
68155: LIST
68156: LIST
68157: PUSH
68158: EMPTY
68159: LIST
68160: LIST
68161: LIST
68162: LIST
68163: LIST
68164: ST_TO_ADDR
// end ; 3 :
68165: GO 68587
68167: LD_INT 3
68169: DOUBLE
68170: EQUAL
68171: IFTRUE 68175
68173: GO 68308
68175: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
68176: LD_ADDR_VAR 0 5
68180: PUSH
68181: LD_VAR 0 1
68185: PUSH
68186: LD_INT 3
68188: PLUS
68189: PUSH
68190: LD_VAR 0 2
68194: PUSH
68195: LD_INT 4
68197: PUSH
68198: EMPTY
68199: LIST
68200: LIST
68201: LIST
68202: PUSH
68203: LD_VAR 0 1
68207: PUSH
68208: LD_INT 4
68210: PLUS
68211: PUSH
68212: LD_VAR 0 2
68216: PUSH
68217: LD_INT 4
68219: PLUS
68220: PUSH
68221: LD_INT 5
68223: PUSH
68224: EMPTY
68225: LIST
68226: LIST
68227: LIST
68228: PUSH
68229: LD_VAR 0 1
68233: PUSH
68234: LD_INT 4
68236: MINUS
68237: PUSH
68238: LD_VAR 0 2
68242: PUSH
68243: LD_INT 1
68245: PUSH
68246: EMPTY
68247: LIST
68248: LIST
68249: LIST
68250: PUSH
68251: LD_VAR 0 1
68255: PUSH
68256: LD_VAR 0 2
68260: PUSH
68261: LD_INT 4
68263: MINUS
68264: PUSH
68265: LD_INT 3
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: LIST
68272: PUSH
68273: LD_VAR 0 1
68277: PUSH
68278: LD_INT 3
68280: MINUS
68281: PUSH
68282: LD_VAR 0 2
68286: PUSH
68287: LD_INT 3
68289: MINUS
68290: PUSH
68291: LD_INT 2
68293: PUSH
68294: EMPTY
68295: LIST
68296: LIST
68297: LIST
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: LIST
68303: LIST
68304: LIST
68305: ST_TO_ADDR
// end ; 4 :
68306: GO 68587
68308: LD_INT 4
68310: DOUBLE
68311: EQUAL
68312: IFTRUE 68316
68314: GO 68449
68316: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
68317: LD_ADDR_VAR 0 5
68321: PUSH
68322: LD_VAR 0 1
68326: PUSH
68327: LD_VAR 0 2
68331: PUSH
68332: LD_INT 4
68334: PLUS
68335: PUSH
68336: LD_INT 0
68338: PUSH
68339: EMPTY
68340: LIST
68341: LIST
68342: LIST
68343: PUSH
68344: LD_VAR 0 1
68348: PUSH
68349: LD_INT 3
68351: PLUS
68352: PUSH
68353: LD_VAR 0 2
68357: PUSH
68358: LD_INT 3
68360: PLUS
68361: PUSH
68362: LD_INT 5
68364: PUSH
68365: EMPTY
68366: LIST
68367: LIST
68368: LIST
68369: PUSH
68370: LD_VAR 0 1
68374: PUSH
68375: LD_INT 4
68377: PLUS
68378: PUSH
68379: LD_VAR 0 2
68383: PUSH
68384: LD_INT 4
68386: PUSH
68387: EMPTY
68388: LIST
68389: LIST
68390: LIST
68391: PUSH
68392: LD_VAR 0 1
68396: PUSH
68397: LD_VAR 0 2
68401: PUSH
68402: LD_INT 3
68404: MINUS
68405: PUSH
68406: LD_INT 3
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: LIST
68413: PUSH
68414: LD_VAR 0 1
68418: PUSH
68419: LD_INT 4
68421: MINUS
68422: PUSH
68423: LD_VAR 0 2
68427: PUSH
68428: LD_INT 4
68430: MINUS
68431: PUSH
68432: LD_INT 2
68434: PUSH
68435: EMPTY
68436: LIST
68437: LIST
68438: LIST
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: LIST
68444: LIST
68445: LIST
68446: ST_TO_ADDR
// end ; 5 :
68447: GO 68587
68449: LD_INT 5
68451: DOUBLE
68452: EQUAL
68453: IFTRUE 68457
68455: GO 68586
68457: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
68458: LD_ADDR_VAR 0 5
68462: PUSH
68463: LD_VAR 0 1
68467: PUSH
68468: LD_INT 4
68470: MINUS
68471: PUSH
68472: LD_VAR 0 2
68476: PUSH
68477: LD_INT 1
68479: PUSH
68480: EMPTY
68481: LIST
68482: LIST
68483: LIST
68484: PUSH
68485: LD_VAR 0 1
68489: PUSH
68490: LD_VAR 0 2
68494: PUSH
68495: LD_INT 4
68497: MINUS
68498: PUSH
68499: LD_INT 3
68501: PUSH
68502: EMPTY
68503: LIST
68504: LIST
68505: LIST
68506: PUSH
68507: LD_VAR 0 1
68511: PUSH
68512: LD_INT 4
68514: PLUS
68515: PUSH
68516: LD_VAR 0 2
68520: PUSH
68521: LD_INT 4
68523: PLUS
68524: PUSH
68525: LD_INT 5
68527: PUSH
68528: EMPTY
68529: LIST
68530: LIST
68531: LIST
68532: PUSH
68533: LD_VAR 0 1
68537: PUSH
68538: LD_INT 3
68540: PLUS
68541: PUSH
68542: LD_VAR 0 2
68546: PUSH
68547: LD_INT 4
68549: PUSH
68550: EMPTY
68551: LIST
68552: LIST
68553: LIST
68554: PUSH
68555: LD_VAR 0 1
68559: PUSH
68560: LD_VAR 0 2
68564: PUSH
68565: LD_INT 3
68567: PLUS
68568: PUSH
68569: LD_INT 0
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: LIST
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: LIST
68581: LIST
68582: LIST
68583: ST_TO_ADDR
// end ; end ;
68584: GO 68587
68586: POP
// result := list ;
68587: LD_ADDR_VAR 0 4
68591: PUSH
68592: LD_VAR 0 5
68596: ST_TO_ADDR
// end ;
68597: LD_VAR 0 4
68601: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68602: LD_INT 0
68604: PPUSH
68605: PPUSH
68606: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68607: LD_VAR 0 1
68611: NOT
68612: PUSH
68613: LD_VAR 0 2
68617: PUSH
68618: LD_INT 1
68620: PUSH
68621: LD_INT 2
68623: PUSH
68624: LD_INT 3
68626: PUSH
68627: LD_INT 4
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: LIST
68634: LIST
68635: IN
68636: NOT
68637: OR
68638: IFFALSE 68642
// exit ;
68640: GO 68734
// tmp := [ ] ;
68642: LD_ADDR_VAR 0 5
68646: PUSH
68647: EMPTY
68648: ST_TO_ADDR
// for i in units do
68649: LD_ADDR_VAR 0 4
68653: PUSH
68654: LD_VAR 0 1
68658: PUSH
68659: FOR_IN
68660: IFFALSE 68703
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
68662: LD_ADDR_VAR 0 5
68666: PUSH
68667: LD_VAR 0 5
68671: PPUSH
68672: LD_VAR 0 5
68676: PUSH
68677: LD_INT 1
68679: PLUS
68680: PPUSH
68681: LD_VAR 0 4
68685: PPUSH
68686: LD_VAR 0 2
68690: PPUSH
68691: CALL_OW 259
68695: PPUSH
68696: CALL_OW 2
68700: ST_TO_ADDR
68701: GO 68659
68703: POP
68704: POP
// if not tmp then
68705: LD_VAR 0 5
68709: NOT
68710: IFFALSE 68714
// exit ;
68712: GO 68734
// result := SortListByListDesc ( units , tmp ) ;
68714: LD_ADDR_VAR 0 3
68718: PUSH
68719: LD_VAR 0 1
68723: PPUSH
68724: LD_VAR 0 5
68728: PPUSH
68729: CALL_OW 77
68733: ST_TO_ADDR
// end ;
68734: LD_VAR 0 3
68738: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68739: LD_INT 0
68741: PPUSH
68742: PPUSH
68743: PPUSH
// x := GetX ( building ) ;
68744: LD_ADDR_VAR 0 4
68748: PUSH
68749: LD_VAR 0 2
68753: PPUSH
68754: CALL_OW 250
68758: ST_TO_ADDR
// y := GetY ( building ) ;
68759: LD_ADDR_VAR 0 5
68763: PUSH
68764: LD_VAR 0 2
68768: PPUSH
68769: CALL_OW 251
68773: ST_TO_ADDR
// if GetTaskList ( unit ) then
68774: LD_VAR 0 1
68778: PPUSH
68779: CALL_OW 437
68783: IFFALSE 68878
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68785: LD_STRING e
68787: PUSH
68788: LD_VAR 0 1
68792: PPUSH
68793: CALL_OW 437
68797: PUSH
68798: LD_INT 1
68800: ARRAY
68801: PUSH
68802: LD_INT 1
68804: ARRAY
68805: EQUAL
68806: PUSH
68807: LD_VAR 0 4
68811: PUSH
68812: LD_VAR 0 1
68816: PPUSH
68817: CALL_OW 437
68821: PUSH
68822: LD_INT 1
68824: ARRAY
68825: PUSH
68826: LD_INT 2
68828: ARRAY
68829: EQUAL
68830: AND
68831: PUSH
68832: LD_VAR 0 5
68836: PUSH
68837: LD_VAR 0 1
68841: PPUSH
68842: CALL_OW 437
68846: PUSH
68847: LD_INT 1
68849: ARRAY
68850: PUSH
68851: LD_INT 3
68853: ARRAY
68854: EQUAL
68855: AND
68856: IFFALSE 68868
// result := true else
68858: LD_ADDR_VAR 0 3
68862: PUSH
68863: LD_INT 1
68865: ST_TO_ADDR
68866: GO 68876
// result := false ;
68868: LD_ADDR_VAR 0 3
68872: PUSH
68873: LD_INT 0
68875: ST_TO_ADDR
// end else
68876: GO 68886
// result := false ;
68878: LD_ADDR_VAR 0 3
68882: PUSH
68883: LD_INT 0
68885: ST_TO_ADDR
// end ;
68886: LD_VAR 0 3
68890: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68891: LD_INT 0
68893: PPUSH
68894: PPUSH
68895: PPUSH
68896: PPUSH
// if not unit or not area then
68897: LD_VAR 0 1
68901: NOT
68902: PUSH
68903: LD_VAR 0 2
68907: NOT
68908: OR
68909: IFFALSE 68913
// exit ;
68911: GO 69077
// tmp := AreaToList ( area , i ) ;
68913: LD_ADDR_VAR 0 6
68917: PUSH
68918: LD_VAR 0 2
68922: PPUSH
68923: LD_VAR 0 5
68927: PPUSH
68928: CALL_OW 517
68932: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68933: LD_ADDR_VAR 0 5
68937: PUSH
68938: DOUBLE
68939: LD_INT 1
68941: DEC
68942: ST_TO_ADDR
68943: LD_VAR 0 6
68947: PUSH
68948: LD_INT 1
68950: ARRAY
68951: PUSH
68952: FOR_TO
68953: IFFALSE 69075
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68955: LD_ADDR_VAR 0 7
68959: PUSH
68960: LD_VAR 0 6
68964: PUSH
68965: LD_INT 1
68967: ARRAY
68968: PUSH
68969: LD_VAR 0 5
68973: ARRAY
68974: PUSH
68975: LD_VAR 0 6
68979: PUSH
68980: LD_INT 2
68982: ARRAY
68983: PUSH
68984: LD_VAR 0 5
68988: ARRAY
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
68994: LD_VAR 0 7
68998: PUSH
68999: LD_INT 1
69001: ARRAY
69002: PPUSH
69003: LD_VAR 0 7
69007: PUSH
69008: LD_INT 2
69010: ARRAY
69011: PPUSH
69012: CALL_OW 428
69016: PUSH
69017: LD_INT 0
69019: EQUAL
69020: IFFALSE 69073
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
69022: LD_VAR 0 1
69026: PPUSH
69027: LD_VAR 0 7
69031: PUSH
69032: LD_INT 1
69034: ARRAY
69035: PPUSH
69036: LD_VAR 0 7
69040: PUSH
69041: LD_INT 2
69043: ARRAY
69044: PPUSH
69045: LD_VAR 0 3
69049: PPUSH
69050: CALL_OW 48
// result := IsPlaced ( unit ) ;
69054: LD_ADDR_VAR 0 4
69058: PUSH
69059: LD_VAR 0 1
69063: PPUSH
69064: CALL_OW 305
69068: ST_TO_ADDR
// exit ;
69069: POP
69070: POP
69071: GO 69077
// end ; end ;
69073: GO 68952
69075: POP
69076: POP
// end ;
69077: LD_VAR 0 4
69081: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
69082: LD_INT 0
69084: PPUSH
69085: PPUSH
69086: PPUSH
// if not side or side > 8 then
69087: LD_VAR 0 1
69091: NOT
69092: PUSH
69093: LD_VAR 0 1
69097: PUSH
69098: LD_INT 8
69100: GREATER
69101: OR
69102: IFFALSE 69106
// exit ;
69104: GO 69293
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
69106: LD_ADDR_VAR 0 4
69110: PUSH
69111: LD_INT 22
69113: PUSH
69114: LD_VAR 0 1
69118: PUSH
69119: EMPTY
69120: LIST
69121: LIST
69122: PUSH
69123: LD_INT 21
69125: PUSH
69126: LD_INT 3
69128: PUSH
69129: EMPTY
69130: LIST
69131: LIST
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: PPUSH
69137: CALL_OW 69
69141: ST_TO_ADDR
// if not tmp then
69142: LD_VAR 0 4
69146: NOT
69147: IFFALSE 69151
// exit ;
69149: GO 69293
// enable_addtolog := true ;
69151: LD_ADDR_OWVAR 81
69155: PUSH
69156: LD_INT 1
69158: ST_TO_ADDR
// AddToLog ( [ ) ;
69159: LD_STRING [
69161: PPUSH
69162: CALL_OW 561
// for i in tmp do
69166: LD_ADDR_VAR 0 3
69170: PUSH
69171: LD_VAR 0 4
69175: PUSH
69176: FOR_IN
69177: IFFALSE 69284
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
69179: LD_STRING [
69181: PUSH
69182: LD_VAR 0 3
69186: PPUSH
69187: CALL_OW 266
69191: STR
69192: PUSH
69193: LD_STRING , 
69195: STR
69196: PUSH
69197: LD_VAR 0 3
69201: PPUSH
69202: CALL_OW 250
69206: STR
69207: PUSH
69208: LD_STRING , 
69210: STR
69211: PUSH
69212: LD_VAR 0 3
69216: PPUSH
69217: CALL_OW 251
69221: STR
69222: PUSH
69223: LD_STRING , 
69225: STR
69226: PUSH
69227: LD_VAR 0 3
69231: PPUSH
69232: CALL_OW 254
69236: STR
69237: PUSH
69238: LD_STRING , 
69240: STR
69241: PUSH
69242: LD_VAR 0 3
69246: PPUSH
69247: LD_INT 1
69249: PPUSH
69250: CALL_OW 268
69254: STR
69255: PUSH
69256: LD_STRING , 
69258: STR
69259: PUSH
69260: LD_VAR 0 3
69264: PPUSH
69265: LD_INT 2
69267: PPUSH
69268: CALL_OW 268
69272: STR
69273: PUSH
69274: LD_STRING ],
69276: STR
69277: PPUSH
69278: CALL_OW 561
// end ;
69282: GO 69176
69284: POP
69285: POP
// AddToLog ( ]; ) ;
69286: LD_STRING ];
69288: PPUSH
69289: CALL_OW 561
// end ;
69293: LD_VAR 0 2
69297: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
69298: LD_INT 0
69300: PPUSH
69301: PPUSH
69302: PPUSH
69303: PPUSH
69304: PPUSH
// if not area or not rate or not max then
69305: LD_VAR 0 1
69309: NOT
69310: PUSH
69311: LD_VAR 0 2
69315: NOT
69316: OR
69317: PUSH
69318: LD_VAR 0 4
69322: NOT
69323: OR
69324: IFFALSE 69328
// exit ;
69326: GO 69520
// while 1 do
69328: LD_INT 1
69330: IFFALSE 69520
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
69332: LD_ADDR_VAR 0 9
69336: PUSH
69337: LD_VAR 0 1
69341: PPUSH
69342: LD_INT 1
69344: PPUSH
69345: CALL_OW 287
69349: PUSH
69350: LD_INT 10
69352: MUL
69353: ST_TO_ADDR
// r := rate / 10 ;
69354: LD_ADDR_VAR 0 7
69358: PUSH
69359: LD_VAR 0 2
69363: PUSH
69364: LD_INT 10
69366: DIVREAL
69367: ST_TO_ADDR
// time := 1 1$00 ;
69368: LD_ADDR_VAR 0 8
69372: PUSH
69373: LD_INT 2100
69375: ST_TO_ADDR
// if amount < min then
69376: LD_VAR 0 9
69380: PUSH
69381: LD_VAR 0 3
69385: LESS
69386: IFFALSE 69404
// r := r * 2 else
69388: LD_ADDR_VAR 0 7
69392: PUSH
69393: LD_VAR 0 7
69397: PUSH
69398: LD_INT 2
69400: MUL
69401: ST_TO_ADDR
69402: GO 69430
// if amount > max then
69404: LD_VAR 0 9
69408: PUSH
69409: LD_VAR 0 4
69413: GREATER
69414: IFFALSE 69430
// r := r / 2 ;
69416: LD_ADDR_VAR 0 7
69420: PUSH
69421: LD_VAR 0 7
69425: PUSH
69426: LD_INT 2
69428: DIVREAL
69429: ST_TO_ADDR
// time := time / r ;
69430: LD_ADDR_VAR 0 8
69434: PUSH
69435: LD_VAR 0 8
69439: PUSH
69440: LD_VAR 0 7
69444: DIVREAL
69445: ST_TO_ADDR
// if time < 0 then
69446: LD_VAR 0 8
69450: PUSH
69451: LD_INT 0
69453: LESS
69454: IFFALSE 69471
// time := time * - 1 ;
69456: LD_ADDR_VAR 0 8
69460: PUSH
69461: LD_VAR 0 8
69465: PUSH
69466: LD_INT 1
69468: NEG
69469: MUL
69470: ST_TO_ADDR
// wait ( time ) ;
69471: LD_VAR 0 8
69475: PPUSH
69476: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
69480: LD_INT 35
69482: PPUSH
69483: LD_INT 875
69485: PPUSH
69486: CALL_OW 12
69490: PPUSH
69491: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69495: LD_INT 1
69497: PPUSH
69498: LD_INT 5
69500: PPUSH
69501: CALL_OW 12
69505: PPUSH
69506: LD_VAR 0 1
69510: PPUSH
69511: LD_INT 1
69513: PPUSH
69514: CALL_OW 55
// end ;
69518: GO 69328
// end ;
69520: LD_VAR 0 5
69524: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69525: LD_INT 0
69527: PPUSH
69528: PPUSH
69529: PPUSH
69530: PPUSH
69531: PPUSH
69532: PPUSH
69533: PPUSH
69534: PPUSH
// if not turrets or not factories then
69535: LD_VAR 0 1
69539: NOT
69540: PUSH
69541: LD_VAR 0 2
69545: NOT
69546: OR
69547: IFFALSE 69551
// exit ;
69549: GO 69858
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69551: LD_ADDR_VAR 0 10
69555: PUSH
69556: LD_INT 5
69558: PUSH
69559: LD_INT 6
69561: PUSH
69562: EMPTY
69563: LIST
69564: LIST
69565: PUSH
69566: LD_INT 2
69568: PUSH
69569: LD_INT 4
69571: PUSH
69572: EMPTY
69573: LIST
69574: LIST
69575: PUSH
69576: LD_INT 3
69578: PUSH
69579: LD_INT 5
69581: PUSH
69582: EMPTY
69583: LIST
69584: LIST
69585: PUSH
69586: EMPTY
69587: LIST
69588: LIST
69589: LIST
69590: PUSH
69591: LD_INT 24
69593: PUSH
69594: LD_INT 25
69596: PUSH
69597: EMPTY
69598: LIST
69599: LIST
69600: PUSH
69601: LD_INT 23
69603: PUSH
69604: LD_INT 27
69606: PUSH
69607: EMPTY
69608: LIST
69609: LIST
69610: PUSH
69611: EMPTY
69612: LIST
69613: LIST
69614: PUSH
69615: LD_INT 42
69617: PUSH
69618: LD_INT 43
69620: PUSH
69621: EMPTY
69622: LIST
69623: LIST
69624: PUSH
69625: LD_INT 44
69627: PUSH
69628: LD_INT 46
69630: PUSH
69631: EMPTY
69632: LIST
69633: LIST
69634: PUSH
69635: LD_INT 45
69637: PUSH
69638: LD_INT 47
69640: PUSH
69641: EMPTY
69642: LIST
69643: LIST
69644: PUSH
69645: EMPTY
69646: LIST
69647: LIST
69648: LIST
69649: PUSH
69650: EMPTY
69651: LIST
69652: LIST
69653: LIST
69654: ST_TO_ADDR
// result := [ ] ;
69655: LD_ADDR_VAR 0 3
69659: PUSH
69660: EMPTY
69661: ST_TO_ADDR
// for i in turrets do
69662: LD_ADDR_VAR 0 4
69666: PUSH
69667: LD_VAR 0 1
69671: PUSH
69672: FOR_IN
69673: IFFALSE 69856
// begin nat := GetNation ( i ) ;
69675: LD_ADDR_VAR 0 7
69679: PUSH
69680: LD_VAR 0 4
69684: PPUSH
69685: CALL_OW 248
69689: ST_TO_ADDR
// weapon := 0 ;
69690: LD_ADDR_VAR 0 8
69694: PUSH
69695: LD_INT 0
69697: ST_TO_ADDR
// if not nat then
69698: LD_VAR 0 7
69702: NOT
69703: IFFALSE 69707
// continue ;
69705: GO 69672
// for j in list [ nat ] do
69707: LD_ADDR_VAR 0 5
69711: PUSH
69712: LD_VAR 0 10
69716: PUSH
69717: LD_VAR 0 7
69721: ARRAY
69722: PUSH
69723: FOR_IN
69724: IFFALSE 69765
// if GetBWeapon ( i ) = j [ 1 ] then
69726: LD_VAR 0 4
69730: PPUSH
69731: CALL_OW 269
69735: PUSH
69736: LD_VAR 0 5
69740: PUSH
69741: LD_INT 1
69743: ARRAY
69744: EQUAL
69745: IFFALSE 69763
// begin weapon := j [ 2 ] ;
69747: LD_ADDR_VAR 0 8
69751: PUSH
69752: LD_VAR 0 5
69756: PUSH
69757: LD_INT 2
69759: ARRAY
69760: ST_TO_ADDR
// break ;
69761: GO 69765
// end ;
69763: GO 69723
69765: POP
69766: POP
// if not weapon then
69767: LD_VAR 0 8
69771: NOT
69772: IFFALSE 69776
// continue ;
69774: GO 69672
// for k in factories do
69776: LD_ADDR_VAR 0 6
69780: PUSH
69781: LD_VAR 0 2
69785: PUSH
69786: FOR_IN
69787: IFFALSE 69852
// begin weapons := AvailableWeaponList ( k ) ;
69789: LD_ADDR_VAR 0 9
69793: PUSH
69794: LD_VAR 0 6
69798: PPUSH
69799: CALL_OW 478
69803: ST_TO_ADDR
// if not weapons then
69804: LD_VAR 0 9
69808: NOT
69809: IFFALSE 69813
// continue ;
69811: GO 69786
// if weapon in weapons then
69813: LD_VAR 0 8
69817: PUSH
69818: LD_VAR 0 9
69822: IN
69823: IFFALSE 69850
// begin result := [ i , weapon ] ;
69825: LD_ADDR_VAR 0 3
69829: PUSH
69830: LD_VAR 0 4
69834: PUSH
69835: LD_VAR 0 8
69839: PUSH
69840: EMPTY
69841: LIST
69842: LIST
69843: ST_TO_ADDR
// exit ;
69844: POP
69845: POP
69846: POP
69847: POP
69848: GO 69858
// end ; end ;
69850: GO 69786
69852: POP
69853: POP
// end ;
69854: GO 69672
69856: POP
69857: POP
// end ;
69858: LD_VAR 0 3
69862: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69863: LD_INT 0
69865: PPUSH
// if not side or side > 8 then
69866: LD_VAR 0 3
69870: NOT
69871: PUSH
69872: LD_VAR 0 3
69876: PUSH
69877: LD_INT 8
69879: GREATER
69880: OR
69881: IFFALSE 69885
// exit ;
69883: GO 69944
// if not range then
69885: LD_VAR 0 4
69889: NOT
69890: IFFALSE 69901
// range := - 12 ;
69892: LD_ADDR_VAR 0 4
69896: PUSH
69897: LD_INT 12
69899: NEG
69900: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69901: LD_VAR 0 1
69905: PPUSH
69906: LD_VAR 0 2
69910: PPUSH
69911: LD_VAR 0 3
69915: PPUSH
69916: LD_VAR 0 4
69920: PPUSH
69921: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69925: LD_VAR 0 1
69929: PPUSH
69930: LD_VAR 0 2
69934: PPUSH
69935: LD_VAR 0 3
69939: PPUSH
69940: CALL_OW 331
// end ;
69944: LD_VAR 0 5
69948: RET
// export function Video ( mode ) ; begin
69949: LD_INT 0
69951: PPUSH
// ingame_video = mode ;
69952: LD_ADDR_OWVAR 52
69956: PUSH
69957: LD_VAR 0 1
69961: ST_TO_ADDR
// interface_hidden = mode ;
69962: LD_ADDR_OWVAR 54
69966: PUSH
69967: LD_VAR 0 1
69971: ST_TO_ADDR
// end ;
69972: LD_VAR 0 2
69976: RET
// export function Join ( array , element ) ; begin
69977: LD_INT 0
69979: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69980: LD_ADDR_VAR 0 3
69984: PUSH
69985: LD_VAR 0 1
69989: PPUSH
69990: LD_VAR 0 1
69994: PUSH
69995: LD_INT 1
69997: PLUS
69998: PPUSH
69999: LD_VAR 0 2
70003: PPUSH
70004: CALL_OW 1
70008: ST_TO_ADDR
// end ;
70009: LD_VAR 0 3
70013: RET
// export function JoinUnion ( array , element ) ; begin
70014: LD_INT 0
70016: PPUSH
// result := array union element ;
70017: LD_ADDR_VAR 0 3
70021: PUSH
70022: LD_VAR 0 1
70026: PUSH
70027: LD_VAR 0 2
70031: UNION
70032: ST_TO_ADDR
// end ;
70033: LD_VAR 0 3
70037: RET
// export function GetBehemoths ( side ) ; begin
70038: LD_INT 0
70040: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
70041: LD_ADDR_VAR 0 2
70045: PUSH
70046: LD_INT 22
70048: PUSH
70049: LD_VAR 0 1
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: PUSH
70058: LD_INT 31
70060: PUSH
70061: LD_INT 25
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: PUSH
70068: EMPTY
70069: LIST
70070: LIST
70071: PPUSH
70072: CALL_OW 69
70076: ST_TO_ADDR
// end ;
70077: LD_VAR 0 2
70081: RET
// export function Shuffle ( array ) ; var i , index ; begin
70082: LD_INT 0
70084: PPUSH
70085: PPUSH
70086: PPUSH
// result := [ ] ;
70087: LD_ADDR_VAR 0 2
70091: PUSH
70092: EMPTY
70093: ST_TO_ADDR
// if not array then
70094: LD_VAR 0 1
70098: NOT
70099: IFFALSE 70103
// exit ;
70101: GO 70202
// Randomize ;
70103: CALL_OW 10
// for i = array downto 1 do
70107: LD_ADDR_VAR 0 3
70111: PUSH
70112: DOUBLE
70113: LD_VAR 0 1
70117: INC
70118: ST_TO_ADDR
70119: LD_INT 1
70121: PUSH
70122: FOR_DOWNTO
70123: IFFALSE 70200
// begin index := rand ( 1 , array ) ;
70125: LD_ADDR_VAR 0 4
70129: PUSH
70130: LD_INT 1
70132: PPUSH
70133: LD_VAR 0 1
70137: PPUSH
70138: CALL_OW 12
70142: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
70143: LD_ADDR_VAR 0 2
70147: PUSH
70148: LD_VAR 0 2
70152: PPUSH
70153: LD_VAR 0 2
70157: PUSH
70158: LD_INT 1
70160: PLUS
70161: PPUSH
70162: LD_VAR 0 1
70166: PUSH
70167: LD_VAR 0 4
70171: ARRAY
70172: PPUSH
70173: CALL_OW 2
70177: ST_TO_ADDR
// array := Delete ( array , index ) ;
70178: LD_ADDR_VAR 0 1
70182: PUSH
70183: LD_VAR 0 1
70187: PPUSH
70188: LD_VAR 0 4
70192: PPUSH
70193: CALL_OW 3
70197: ST_TO_ADDR
// end ;
70198: GO 70122
70200: POP
70201: POP
// end ;
70202: LD_VAR 0 2
70206: RET
// export function GetBaseMaterials ( base ) ; begin
70207: LD_INT 0
70209: PPUSH
// result := [ 0 , 0 , 0 ] ;
70210: LD_ADDR_VAR 0 2
70214: PUSH
70215: LD_INT 0
70217: PUSH
70218: LD_INT 0
70220: PUSH
70221: LD_INT 0
70223: PUSH
70224: EMPTY
70225: LIST
70226: LIST
70227: LIST
70228: ST_TO_ADDR
// if not base then
70229: LD_VAR 0 1
70233: NOT
70234: IFFALSE 70238
// exit ;
70236: GO 70287
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
70238: LD_ADDR_VAR 0 2
70242: PUSH
70243: LD_VAR 0 1
70247: PPUSH
70248: LD_INT 1
70250: PPUSH
70251: CALL_OW 275
70255: PUSH
70256: LD_VAR 0 1
70260: PPUSH
70261: LD_INT 2
70263: PPUSH
70264: CALL_OW 275
70268: PUSH
70269: LD_VAR 0 1
70273: PPUSH
70274: LD_INT 3
70276: PPUSH
70277: CALL_OW 275
70281: PUSH
70282: EMPTY
70283: LIST
70284: LIST
70285: LIST
70286: ST_TO_ADDR
// end ;
70287: LD_VAR 0 2
70291: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
70292: LD_INT 0
70294: PPUSH
70295: PPUSH
// result := array ;
70296: LD_ADDR_VAR 0 3
70300: PUSH
70301: LD_VAR 0 1
70305: ST_TO_ADDR
// if size > 0 then
70306: LD_VAR 0 2
70310: PUSH
70311: LD_INT 0
70313: GREATER
70314: IFFALSE 70360
// for i := array downto size do
70316: LD_ADDR_VAR 0 4
70320: PUSH
70321: DOUBLE
70322: LD_VAR 0 1
70326: INC
70327: ST_TO_ADDR
70328: LD_VAR 0 2
70332: PUSH
70333: FOR_DOWNTO
70334: IFFALSE 70358
// result := Delete ( result , result ) ;
70336: LD_ADDR_VAR 0 3
70340: PUSH
70341: LD_VAR 0 3
70345: PPUSH
70346: LD_VAR 0 3
70350: PPUSH
70351: CALL_OW 3
70355: ST_TO_ADDR
70356: GO 70333
70358: POP
70359: POP
// end ;
70360: LD_VAR 0 3
70364: RET
// export function ComExit ( unit ) ; var tmp ; begin
70365: LD_INT 0
70367: PPUSH
70368: PPUSH
// if not IsInUnit ( unit ) then
70369: LD_VAR 0 1
70373: PPUSH
70374: CALL_OW 310
70378: NOT
70379: IFFALSE 70383
// exit ;
70381: GO 70443
// tmp := IsInUnit ( unit ) ;
70383: LD_ADDR_VAR 0 3
70387: PUSH
70388: LD_VAR 0 1
70392: PPUSH
70393: CALL_OW 310
70397: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70398: LD_VAR 0 3
70402: PPUSH
70403: CALL_OW 247
70407: PUSH
70408: LD_INT 2
70410: EQUAL
70411: IFFALSE 70424
// ComExitVehicle ( unit ) else
70413: LD_VAR 0 1
70417: PPUSH
70418: CALL_OW 121
70422: GO 70433
// ComExitBuilding ( unit ) ;
70424: LD_VAR 0 1
70428: PPUSH
70429: CALL_OW 122
// result := tmp ;
70433: LD_ADDR_VAR 0 2
70437: PUSH
70438: LD_VAR 0 3
70442: ST_TO_ADDR
// end ;
70443: LD_VAR 0 2
70447: RET
// export function ResetHc ; begin
70448: LD_INT 0
70450: PPUSH
// InitHc ;
70451: CALL_OW 19
// hc_importance := 0 ;
70455: LD_ADDR_OWVAR 32
70459: PUSH
70460: LD_INT 0
70462: ST_TO_ADDR
// end ;
70463: LD_VAR 0 1
70467: RET
