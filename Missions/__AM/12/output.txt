// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export amCargo1 , amCargo2 ; export amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; export westPathUsed , laserCounterDestroy , rocketBuilded ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_STRING ryutin
  20: PPUSH
  21: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  25: LD_INT 6
  27: PPUSH
  28: LD_STRING yegorov
  30: PPUSH
  31: CALL_OW 500
// RuScientists = [ ] ;
  35: LD_ADDR_EXP 34
  39: PUSH
  40: EMPTY
  41: ST_TO_ADDR
// sciCounter = 0 ;
  42: LD_ADDR_EXP 35
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  50: LD_ADDR_EXP 38
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTanks = [ ] ;
  57: LD_ADDR_EXP 39
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  64: LD_ADDR_EXP 40
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// arabianMines = [ ] ;
  71: LD_ADDR_EXP 44
  75: PUSH
  76: EMPTY
  77: ST_TO_ADDR
// kurtStatus = LoadVariable ( 06_KurtStatus_1 , 0 ) ;
  78: LD_ADDR_EXP 26
  82: PUSH
  83: LD_STRING 06_KurtStatus_1
  85: PPUSH
  86: LD_INT 0
  88: PPUSH
  89: CALL_OW 30
  93: ST_TO_ADDR
// secondPass = 0 ;
  94: LD_ADDR_EXP 27
  98: PUSH
  99: LD_INT 0
 101: ST_TO_ADDR
// teleportExplored = 0 ;
 102: LD_ADDR_EXP 33
 106: PUSH
 107: LD_INT 0
 109: ST_TO_ADDR
// attackTactic = 0 ;
 110: LD_ADDR_EXP 43
 114: PUSH
 115: LD_INT 0
 117: ST_TO_ADDR
// tpCounter = 0 ;
 118: LD_ADDR_EXP 29
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// askSiberite = 0 ;
 126: LD_ADDR_EXP 32
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// warWithLegion = 0 ;
 134: LD_ADDR_EXP 30
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// fakeInfo = 0 ;
 142: LD_ADDR_EXP 31
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// cratesSpawned = 0 ;
 150: LD_ADDR_EXP 45
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// ruAI = 0 ;
 158: LD_ADDR_EXP 41
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// ruEscape = 0 ;
 166: LD_ADDR_EXP 42
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// eventVar1 = 0 ;
 174: LD_ADDR_EXP 47
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// mission_prefix = 12_ ;
 182: LD_ADDR_EXP 46
 186: PUSH
 187: LD_STRING 12_
 189: ST_TO_ADDR
// debugMode = 0 ;
 190: LD_ADDR_EXP 48
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// westPathUsed := false ;
 198: LD_ADDR_EXP 49
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// laserCounterDestroy := 0 ;
 206: LD_ADDR_EXP 50
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// rocketBuilded := false ;
 214: LD_ADDR_EXP 51
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// CreateNature ;
 222: CALL 15311 0 0
// PrepareDifficulty ;
 226: CALL 12526 0 0
// PrepareVehicles ;
 230: CALL 1765 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 234: LD_INT 4
 236: PPUSH
 237: LD_INT 0
 239: PPUSH
 240: LD_INT 1
 242: PPUSH
 243: LD_INT 0
 245: PPUSH
 246: CALL 1339 0 4
// PrepareAmericanHeroes ;
 250: CALL 640 0 0
// PrepareRussianCommander ;
 254: CALL 3153 0 0
// PrepareWestBase ;
 258: CALL 3668 0 0
// PrepareEastBase ;
 262: CALL 3228 0 0
// PrepareOtherRussians ;
 266: CALL 3780 0 0
// end ;
 270: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 271: LD_EXP 48
 275: PUSH
 276: LD_INT 1
 278: EQUAL
 279: IFFALSE 585
 281: GO 283
 283: DISABLE
 284: LD_INT 0
 286: PPUSH
// begin enable ;
 287: ENABLE
// fogoff ( true ) ;
 288: LD_INT 1
 290: PPUSH
 291: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 295: LD_ADDR_VAR 0 1
 299: PUSH
 300: LD_INT 22
 302: PUSH
 303: LD_INT 1
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: PUSH
 310: LD_INT 21
 312: PUSH
 313: LD_INT 1
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: PPUSH
 324: CALL_OW 69
 328: PUSH
 329: FOR_IN
 330: IFFALSE 346
// SetLives ( i , 1000 ) ;
 332: LD_VAR 0 1
 336: PPUSH
 337: LD_INT 1000
 339: PPUSH
 340: CALL_OW 234
 344: GO 329
 346: POP
 347: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 348: LD_ADDR_VAR 0 1
 352: PUSH
 353: LD_INT 22
 355: PUSH
 356: LD_INT 1
 358: PUSH
 359: EMPTY
 360: LIST
 361: LIST
 362: PUSH
 363: LD_INT 2
 365: PUSH
 366: LD_INT 30
 368: PUSH
 369: LD_INT 0
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: PUSH
 376: LD_INT 30
 378: PUSH
 379: LD_INT 1
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: PUSH
 386: EMPTY
 387: LIST
 388: LIST
 389: LIST
 390: PUSH
 391: EMPTY
 392: LIST
 393: LIST
 394: PPUSH
 395: CALL_OW 69
 399: PUSH
 400: FOR_IN
 401: IFFALSE 425
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 403: LD_VAR 0 1
 407: PPUSH
 408: CALL_OW 274
 412: PPUSH
 413: LD_INT 1
 415: PPUSH
 416: LD_INT 9999
 418: PPUSH
 419: CALL_OW 277
 423: GO 400
 425: POP
 426: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 427: LD_ADDR_VAR 0 1
 431: PUSH
 432: LD_INT 22
 434: PUSH
 435: LD_INT 1
 437: PUSH
 438: EMPTY
 439: LIST
 440: LIST
 441: PUSH
 442: LD_INT 2
 444: PUSH
 445: LD_INT 30
 447: PUSH
 448: LD_INT 0
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: PUSH
 455: LD_INT 30
 457: PUSH
 458: LD_INT 1
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: LIST
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PPUSH
 474: CALL_OW 69
 478: PUSH
 479: FOR_IN
 480: IFFALSE 504
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 482: LD_VAR 0 1
 486: PPUSH
 487: CALL_OW 274
 491: PPUSH
 492: LD_INT 2
 494: PPUSH
 495: LD_INT 9999
 497: PPUSH
 498: CALL_OW 277
 502: GO 479
 504: POP
 505: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 506: LD_ADDR_VAR 0 1
 510: PUSH
 511: LD_INT 22
 513: PUSH
 514: LD_INT 1
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: PUSH
 521: LD_INT 2
 523: PUSH
 524: LD_INT 30
 526: PUSH
 527: LD_INT 0
 529: PUSH
 530: EMPTY
 531: LIST
 532: LIST
 533: PUSH
 534: LD_INT 30
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: EMPTY
 545: LIST
 546: LIST
 547: LIST
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: PPUSH
 553: CALL_OW 69
 557: PUSH
 558: FOR_IN
 559: IFFALSE 583
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 561: LD_VAR 0 1
 565: PPUSH
 566: CALL_OW 274
 570: PPUSH
 571: LD_INT 3
 573: PPUSH
 574: LD_INT 9999
 576: PPUSH
 577: CALL_OW 277
 581: GO 558
 583: POP
 584: POP
// end ;
 585: PPOPN 1
 587: END
// every 0 0$1 trigger FilterUnitsInArea ( westPathArea , [ f_side , 1 ] ) do
 588: LD_INT 25
 590: PPUSH
 591: LD_INT 22
 593: PUSH
 594: LD_INT 1
 596: PUSH
 597: EMPTY
 598: LIST
 599: LIST
 600: PPUSH
 601: CALL_OW 70
 605: IFFALSE 618
 607: GO 609
 609: DISABLE
// westPathUsed := true ;
 610: LD_ADDR_EXP 49
 614: PUSH
 615: LD_INT 1
 617: ST_TO_ADDR
 618: END
// every 0 0$1 trigger laserCounterDestroy >= 3 do
 619: LD_EXP 50
 623: PUSH
 624: LD_INT 3
 626: GREATEREQUAL
 627: IFFALSE 639
 629: GO 631
 631: DISABLE
// SetAchievement ( ACH_LASER ) ; end_of_file
 632: LD_STRING ACH_LASER
 634: PPUSH
 635: CALL_OW 543
 639: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 640: LD_INT 0
 642: PPUSH
 643: PPUSH
 644: PPUSH
// uc_side = 1 ;
 645: LD_ADDR_OWVAR 20
 649: PUSH
 650: LD_INT 1
 652: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 653: LD_ADDR_EXP 14
 657: PUSH
 658: LD_STRING 11c_others
 660: PPUSH
 661: CALL_OW 31
 665: PUSH
 666: LD_STRING 11_others
 668: PPUSH
 669: CALL_OW 31
 673: UNION
 674: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 11_ ) ;
 675: LD_ADDR_EXP 1
 679: PUSH
 680: LD_STRING JMM
 682: PPUSH
 683: LD_INT 1
 685: PPUSH
 686: LD_STRING 11_
 688: PPUSH
 689: CALL 37453 0 3
 693: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 694: LD_EXP 1
 698: PPUSH
 699: LD_INT 1
 701: PPUSH
 702: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 706: LD_EXP 1
 710: PPUSH
 711: LD_INT 22
 713: PUSH
 714: LD_INT 1
 716: PUSH
 717: EMPTY
 718: LIST
 719: LIST
 720: PUSH
 721: LD_INT 21
 723: PUSH
 724: LD_INT 2
 726: PUSH
 727: EMPTY
 728: LIST
 729: LIST
 730: PUSH
 731: LD_INT 58
 733: PUSH
 734: EMPTY
 735: LIST
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: LIST
 741: PPUSH
 742: CALL_OW 69
 746: PUSH
 747: LD_INT 1
 749: ARRAY
 750: PPUSH
 751: CALL_OW 52
// if TestCharacters ( 11_Lisa ) = true then
 755: LD_STRING 11_Lisa
 757: PPUSH
 758: CALL_OW 28
 762: PUSH
 763: LD_INT 1
 765: EQUAL
 766: IFFALSE 816
// begin Lisa = PrepareUnit ( Lisa , true , 11_ ) ;
 768: LD_ADDR_EXP 2
 772: PUSH
 773: LD_STRING Lisa
 775: PPUSH
 776: LD_INT 1
 778: PPUSH
 779: LD_STRING 11_
 781: PPUSH
 782: CALL 37453 0 3
 786: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 787: LD_EXP 2
 791: PPUSH
 792: LD_INT 1
 794: PPUSH
 795: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 799: LD_EXP 2
 803: PPUSH
 804: LD_INT 4
 806: PPUSH
 807: LD_INT 0
 809: PPUSH
 810: CALL_OW 49
// end else
 814: GO 832
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 816: LD_INT 4
 818: PPUSH
 819: LD_INT 0
 821: PPUSH
 822: LD_INT 1
 824: PPUSH
 825: LD_INT 0
 827: PPUSH
 828: CALL 1339 0 4
// end ; if TestCharacters ( 11_Donaldson ) = true then
 832: LD_STRING 11_Donaldson
 834: PPUSH
 835: CALL_OW 28
 839: PUSH
 840: LD_INT 1
 842: EQUAL
 843: IFFALSE 893
// begin Donaldson = PrepareUnit ( Donaldson , true , 11_ ) ;
 845: LD_ADDR_EXP 3
 849: PUSH
 850: LD_STRING Donaldson
 852: PPUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_STRING 11_
 858: PPUSH
 859: CALL 37453 0 3
 863: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 864: LD_EXP 3
 868: PPUSH
 869: LD_INT 1
 871: PPUSH
 872: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 876: LD_EXP 3
 880: PPUSH
 881: LD_INT 4
 883: PPUSH
 884: LD_INT 0
 886: PPUSH
 887: CALL_OW 49
// end else
 891: GO 909
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 893: LD_INT 4
 895: PPUSH
 896: LD_INT 0
 898: PPUSH
 899: LD_INT 1
 901: PPUSH
 902: LD_INT 0
 904: PPUSH
 905: CALL 1339 0 4
// end ; if TestCharacters ( 11_Cyrus ) = true then
 909: LD_STRING 11_Cyrus
 911: PPUSH
 912: CALL_OW 28
 916: PUSH
 917: LD_INT 1
 919: EQUAL
 920: IFFALSE 970
// begin Cyrus = PrepareUnit ( Cyrus , true , 11_ ) ;
 922: LD_ADDR_EXP 5
 926: PUSH
 927: LD_STRING Cyrus
 929: PPUSH
 930: LD_INT 1
 932: PPUSH
 933: LD_STRING 11_
 935: PPUSH
 936: CALL 37453 0 3
 940: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 941: LD_EXP 5
 945: PPUSH
 946: LD_INT 1
 948: PPUSH
 949: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 953: LD_EXP 5
 957: PPUSH
 958: LD_INT 4
 960: PPUSH
 961: LD_INT 0
 963: PPUSH
 964: CALL_OW 49
// end else
 968: GO 986
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 970: LD_INT 4
 972: PPUSH
 973: LD_INT 0
 975: PPUSH
 976: LD_INT 1
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL 1339 0 4
// end ; if TestCharacters ( 11_Denis ) = true then
 986: LD_STRING 11_Denis
 988: PPUSH
 989: CALL_OW 28
 993: PUSH
 994: LD_INT 1
 996: EQUAL
 997: IFFALSE 1047
// begin Denis = PrepareUnit ( Denis , true , 11_ ) ;
 999: LD_ADDR_EXP 6
1003: PUSH
1004: LD_STRING Denis
1006: PPUSH
1007: LD_INT 1
1009: PPUSH
1010: LD_STRING 11_
1012: PPUSH
1013: CALL 37453 0 3
1017: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1018: LD_EXP 6
1022: PPUSH
1023: LD_INT 4
1025: PPUSH
1026: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1030: LD_EXP 6
1034: PPUSH
1035: LD_INT 4
1037: PPUSH
1038: LD_INT 0
1040: PPUSH
1041: CALL_OW 49
// end else
1045: GO 1063
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1047: LD_INT 4
1049: PPUSH
1050: LD_INT 0
1052: PPUSH
1053: LD_INT 1
1055: PPUSH
1056: LD_INT 0
1058: PPUSH
1059: CALL 1339 0 4
// end ; if TestCharacters ( 11_Frank ) = true then
1063: LD_STRING 11_Frank
1065: PPUSH
1066: CALL_OW 28
1070: PUSH
1071: LD_INT 1
1073: EQUAL
1074: IFFALSE 1124
// begin Frank = PrepareUnit ( Frank , true , 11_ ) ;
1076: LD_ADDR_EXP 12
1080: PUSH
1081: LD_STRING Frank
1083: PPUSH
1084: LD_INT 1
1086: PPUSH
1087: LD_STRING 11_
1089: PPUSH
1090: CALL 37453 0 3
1094: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1095: LD_EXP 12
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1107: LD_EXP 12
1111: PPUSH
1112: LD_INT 4
1114: PPUSH
1115: LD_INT 0
1117: PPUSH
1118: CALL_OW 49
// end else
1122: GO 1140
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1124: LD_INT 4
1126: PPUSH
1127: LD_INT 0
1129: PPUSH
1130: LD_INT 1
1132: PPUSH
1133: LD_INT 0
1135: PPUSH
1136: CALL 1339 0 4
// end ; if TestCharacters ( 11_Cornell ) = true then
1140: LD_STRING 11_Cornell
1142: PPUSH
1143: CALL_OW 28
1147: PUSH
1148: LD_INT 1
1150: EQUAL
1151: IFFALSE 1201
// begin Cornel = PrepareUnit ( Cornell , true , 11_ ) ;
1153: LD_ADDR_EXP 10
1157: PUSH
1158: LD_STRING Cornell
1160: PPUSH
1161: LD_INT 1
1163: PPUSH
1164: LD_STRING 11_
1166: PPUSH
1167: CALL 37453 0 3
1171: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1172: LD_EXP 10
1176: PPUSH
1177: LD_INT 1
1179: PPUSH
1180: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1184: LD_EXP 10
1188: PPUSH
1189: LD_INT 4
1191: PPUSH
1192: LD_INT 0
1194: PPUSH
1195: CALL_OW 49
// end else
1199: GO 1217
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1201: LD_INT 4
1203: PPUSH
1204: LD_INT 0
1206: PPUSH
1207: LD_INT 1
1209: PPUSH
1210: LD_INT 0
1212: PPUSH
1213: CALL 1339 0 4
// end ; tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1217: LD_ADDR_VAR 0 2
1221: PUSH
1222: LD_EXP 14
1226: PPUSH
1227: LD_INT 26
1229: PUSH
1230: LD_INT 1
1232: PUSH
1233: EMPTY
1234: LIST
1235: LIST
1236: PPUSH
1237: CALL_OW 72
1241: ST_TO_ADDR
// if not tmp then
1242: LD_VAR 0 2
1246: NOT
1247: IFFALSE 1276
// begin PrepareSoldier ( sex_male , 8 ) ;
1249: LD_INT 1
1251: PPUSH
1252: LD_INT 8
1254: PPUSH
1255: CALL_OW 381
// PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1259: CALL_OW 44
1263: PPUSH
1264: LD_INT 4
1266: PPUSH
1267: LD_INT 0
1269: PPUSH
1270: CALL_OW 49
// end else
1274: GO 1315
// begin PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1276: LD_VAR 0 2
1280: PUSH
1281: LD_INT 1
1283: ARRAY
1284: PPUSH
1285: LD_INT 4
1287: PPUSH
1288: LD_INT 0
1290: PPUSH
1291: CALL_OW 49
// others11 := others11 diff tmp [ 1 ] ;
1295: LD_ADDR_EXP 14
1299: PUSH
1300: LD_EXP 14
1304: PUSH
1305: LD_VAR 0 2
1309: PUSH
1310: LD_INT 1
1312: ARRAY
1313: DIFF
1314: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ,  ) ;
1315: LD_ADDR_EXP 22
1319: PUSH
1320: LD_STRING Powell
1322: PPUSH
1323: LD_INT 0
1325: PPUSH
1326: LD_STRING 
1328: PPUSH
1329: CALL 37453 0 3
1333: ST_TO_ADDR
// end ;
1334: LD_VAR 0 1
1338: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1339: LD_INT 0
1341: PPUSH
1342: PPUSH
1343: PPUSH
1344: PPUSH
1345: PPUSH
// if mech = 1 then
1346: LD_VAR 0 4
1350: PUSH
1351: LD_INT 1
1353: EQUAL
1354: IFFALSE 1591
// begin if others11 > 0 then
1356: LD_EXP 14
1360: PUSH
1361: LD_INT 0
1363: GREATER
1364: IFFALSE 1531
// begin for i := 1 to others11 - 1 do
1366: LD_ADDR_VAR 0 6
1370: PUSH
1371: DOUBLE
1372: LD_INT 1
1374: DEC
1375: ST_TO_ADDR
1376: LD_EXP 14
1380: PUSH
1381: LD_INT 1
1383: MINUS
1384: PUSH
1385: FOR_TO
1386: IFFALSE 1468
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1388: LD_EXP 14
1392: PUSH
1393: LD_VAR 0 6
1397: ARRAY
1398: PPUSH
1399: LD_INT 3
1401: PPUSH
1402: CALL_OW 259
1406: PUSH
1407: LD_EXP 14
1411: PUSH
1412: LD_VAR 0 6
1416: PUSH
1417: LD_INT 1
1419: PLUS
1420: ARRAY
1421: PPUSH
1422: LD_INT 3
1424: PPUSH
1425: CALL_OW 259
1429: LESS
1430: IFFALSE 1466
// begin mecha = others11 [ i + 1 ] ;
1432: LD_ADDR_VAR 0 9
1436: PUSH
1437: LD_EXP 14
1441: PUSH
1442: LD_VAR 0 6
1446: PUSH
1447: LD_INT 1
1449: PLUS
1450: ARRAY
1451: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1452: LD_VAR 0 9
1456: PPUSH
1457: LD_INT 3
1459: PPUSH
1460: CALL_OW 336
// break ;
1464: GO 1468
// end ; end ;
1466: GO 1385
1468: POP
1469: POP
// if spawnMode = 1 then
1470: LD_VAR 0 3
1474: PUSH
1475: LD_INT 1
1477: EQUAL
1478: IFFALSE 1499
// PlaceUnitArea ( mecha , area , false ) else
1480: LD_VAR 0 9
1484: PPUSH
1485: LD_VAR 0 1
1489: PPUSH
1490: LD_INT 0
1492: PPUSH
1493: CALL_OW 49
1497: GO 1513
// PlaceHumanInUnit ( mecha , veh ) ;
1499: LD_VAR 0 9
1503: PPUSH
1504: LD_VAR 0 2
1508: PPUSH
1509: CALL_OW 52
// others11 = others11 diff mecha ;
1513: LD_ADDR_EXP 14
1517: PUSH
1518: LD_EXP 14
1522: PUSH
1523: LD_VAR 0 9
1527: DIFF
1528: ST_TO_ADDR
// end else
1529: GO 1589
// begin hc_name =  ;
1531: LD_ADDR_OWVAR 26
1535: PUSH
1536: LD_STRING 
1538: ST_TO_ADDR
// hc_gallery =  ;
1539: LD_ADDR_OWVAR 33
1543: PUSH
1544: LD_STRING 
1546: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1547: LD_INT 0
1549: PPUSH
1550: LD_INT 7
1552: PPUSH
1553: LD_INT 9
1555: PPUSH
1556: CALL_OW 12
1560: PPUSH
1561: CALL_OW 383
// un = CreateHuman ;
1565: LD_ADDR_VAR 0 7
1569: PUSH
1570: CALL_OW 44
1574: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1575: LD_VAR 0 7
1579: PPUSH
1580: LD_VAR 0 2
1584: PPUSH
1585: CALL_OW 52
// end ; end else
1589: GO 1760
// begin if others11 > 0 then
1591: LD_EXP 14
1595: PUSH
1596: LD_INT 0
1598: GREATER
1599: IFFALSE 1672
// begin if spawnMode = 1 then
1601: LD_VAR 0 3
1605: PUSH
1606: LD_INT 1
1608: EQUAL
1609: IFFALSE 1634
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1611: LD_EXP 14
1615: PUSH
1616: LD_INT 1
1618: ARRAY
1619: PPUSH
1620: LD_VAR 0 1
1624: PPUSH
1625: LD_INT 0
1627: PPUSH
1628: CALL_OW 49
1632: GO 1652
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1634: LD_EXP 14
1638: PUSH
1639: LD_INT 1
1641: ARRAY
1642: PPUSH
1643: LD_VAR 0 2
1647: PPUSH
1648: CALL_OW 52
// others11 = Delete ( others11 , 1 ) ;
1652: LD_ADDR_EXP 14
1656: PUSH
1657: LD_EXP 14
1661: PPUSH
1662: LD_INT 1
1664: PPUSH
1665: CALL_OW 3
1669: ST_TO_ADDR
// end else
1670: GO 1760
// begin hc_name =  ;
1672: LD_ADDR_OWVAR 26
1676: PUSH
1677: LD_STRING 
1679: ST_TO_ADDR
// hc_gallery =  ;
1680: LD_ADDR_OWVAR 33
1684: PUSH
1685: LD_STRING 
1687: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1688: LD_INT 0
1690: PPUSH
1691: LD_INT 1
1693: PUSH
1694: LD_INT 2
1696: PUSH
1697: LD_INT 3
1699: PUSH
1700: LD_INT 4
1702: PUSH
1703: EMPTY
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: PUSH
1709: LD_INT 1
1711: PPUSH
1712: LD_INT 4
1714: PPUSH
1715: CALL_OW 12
1719: ARRAY
1720: PPUSH
1721: LD_INT 7
1723: PPUSH
1724: LD_INT 9
1726: PPUSH
1727: CALL_OW 12
1731: PPUSH
1732: CALL_OW 380
// un = CreateHuman ;
1736: LD_ADDR_VAR 0 7
1740: PUSH
1741: CALL_OW 44
1745: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1746: LD_VAR 0 7
1750: PPUSH
1751: LD_VAR 0 2
1755: PPUSH
1756: CALL_OW 52
// end ; end ; end ;
1760: LD_VAR 0 5
1764: RET
// export function PrepareVehicles ; var veh ; begin
1765: LD_INT 0
1767: PPUSH
1768: PPUSH
// uc_side = 1 ;
1769: LD_ADDR_OWVAR 20
1773: PUSH
1774: LD_INT 1
1776: ST_TO_ADDR
// uc_nation = 1 ;
1777: LD_ADDR_OWVAR 21
1781: PUSH
1782: LD_INT 1
1784: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1785: LD_ADDR_OWVAR 37
1789: PUSH
1790: LD_INT 3
1792: ST_TO_ADDR
// vc_engine = 3 ;
1793: LD_ADDR_OWVAR 39
1797: PUSH
1798: LD_INT 3
1800: ST_TO_ADDR
// vc_control = 3 ;
1801: LD_ADDR_OWVAR 38
1805: PUSH
1806: LD_INT 3
1808: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1809: LD_ADDR_OWVAR 40
1813: PUSH
1814: LD_INT 4
1816: ST_TO_ADDR
// veh = CreateVehicle ;
1817: LD_ADDR_VAR 0 2
1821: PUSH
1822: CALL_OW 45
1826: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1827: LD_VAR 0 2
1831: PPUSH
1832: LD_INT 4
1834: PPUSH
1835: LD_INT 0
1837: PPUSH
1838: CALL_OW 49
// vc_weapon = us_double_gun ;
1842: LD_ADDR_OWVAR 40
1846: PUSH
1847: LD_INT 5
1849: ST_TO_ADDR
// vc_control = 1 ;
1850: LD_ADDR_OWVAR 38
1854: PUSH
1855: LD_INT 1
1857: ST_TO_ADDR
// veh = CreateVehicle ;
1858: LD_ADDR_VAR 0 2
1862: PUSH
1863: CALL_OW 45
1867: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1868: LD_VAR 0 2
1872: PPUSH
1873: LD_INT 4
1875: PPUSH
1876: LD_INT 0
1878: PPUSH
1879: CALL_OW 49
// vc_weapon = us_light_gun ;
1883: LD_ADDR_OWVAR 40
1887: PUSH
1888: LD_INT 3
1890: ST_TO_ADDR
// vc_control = 3 ;
1891: LD_ADDR_OWVAR 38
1895: PUSH
1896: LD_INT 3
1898: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
1899: LD_ADDR_OWVAR 37
1903: PUSH
1904: LD_INT 2
1906: ST_TO_ADDR
// veh = CreateVehicle ;
1907: LD_ADDR_VAR 0 2
1911: PUSH
1912: CALL_OW 45
1916: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1917: LD_VAR 0 2
1921: PPUSH
1922: LD_INT 4
1924: PPUSH
1925: LD_INT 0
1927: PPUSH
1928: CALL_OW 49
// vc_weapon = us_gatling_gun ;
1932: LD_ADDR_OWVAR 40
1936: PUSH
1937: LD_INT 4
1939: ST_TO_ADDR
// veh = CreateVehicle ;
1940: LD_ADDR_VAR 0 2
1944: PUSH
1945: CALL_OW 45
1949: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1950: LD_VAR 0 2
1954: PPUSH
1955: LD_INT 4
1957: PPUSH
1958: LD_INT 0
1960: PPUSH
1961: CALL_OW 49
// end ;
1965: LD_VAR 0 1
1969: RET
// export function PowellSupport1 ; var veh , un ; begin
1970: LD_INT 0
1972: PPUSH
1973: PPUSH
1974: PPUSH
// uc_side = 1 ;
1975: LD_ADDR_OWVAR 20
1979: PUSH
1980: LD_INT 1
1982: ST_TO_ADDR
// uc_nation = 1 ;
1983: LD_ADDR_OWVAR 21
1987: PUSH
1988: LD_INT 1
1990: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) = true then
1991: LD_STRING 11_Brown
1993: PPUSH
1994: CALL_OW 28
1998: PUSH
1999: LD_INT 1
2001: EQUAL
2002: IFFALSE 2052
// begin Brown = PrepareUnit ( Brown , true , 11_ ) ;
2004: LD_ADDR_EXP 7
2008: PUSH
2009: LD_STRING Brown
2011: PPUSH
2012: LD_INT 1
2014: PPUSH
2015: LD_STRING 11_
2017: PPUSH
2018: CALL 37453 0 3
2022: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
2023: LD_EXP 7
2027: PPUSH
2028: LD_INT 2
2030: PPUSH
2031: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
2035: LD_EXP 7
2039: PPUSH
2040: LD_INT 4
2042: PPUSH
2043: LD_INT 0
2045: PPUSH
2046: CALL_OW 49
// end else
2050: GO 2068
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2052: LD_INT 4
2054: PPUSH
2055: LD_INT 0
2057: PPUSH
2058: LD_INT 1
2060: PPUSH
2061: LD_INT 0
2063: PPUSH
2064: CALL 1339 0 4
// end ; if TestCharacters ( 11_Gary ) = true then
2068: LD_STRING 11_Gary
2070: PPUSH
2071: CALL_OW 28
2075: PUSH
2076: LD_INT 1
2078: EQUAL
2079: IFFALSE 2129
// begin Gary = PrepareUnit ( Gary , true , 11_ ) ;
2081: LD_ADDR_EXP 11
2085: PUSH
2086: LD_STRING Gary
2088: PPUSH
2089: LD_INT 1
2091: PPUSH
2092: LD_STRING 11_
2094: PPUSH
2095: CALL 37453 0 3
2099: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
2100: LD_EXP 11
2104: PPUSH
2105: LD_INT 2
2107: PPUSH
2108: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2112: LD_EXP 11
2116: PPUSH
2117: LD_INT 4
2119: PPUSH
2120: LD_INT 0
2122: PPUSH
2123: CALL_OW 49
// end else
2127: GO 2145
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2129: LD_INT 4
2131: PPUSH
2132: LD_INT 0
2134: PPUSH
2135: LD_INT 1
2137: PPUSH
2138: LD_INT 0
2140: PPUSH
2141: CALL 1339 0 4
// end ; vc_chassis = us_medium_tracked ;
2145: LD_ADDR_OWVAR 37
2149: PUSH
2150: LD_INT 3
2152: ST_TO_ADDR
// vc_engine = 3 ;
2153: LD_ADDR_OWVAR 39
2157: PUSH
2158: LD_INT 3
2160: ST_TO_ADDR
// vc_control = 1 ;
2161: LD_ADDR_OWVAR 38
2165: PUSH
2166: LD_INT 1
2168: ST_TO_ADDR
// vc_weapon = us_crane ;
2169: LD_ADDR_OWVAR 40
2173: PUSH
2174: LD_INT 13
2176: ST_TO_ADDR
// veh = CreateVehicle ;
2177: LD_ADDR_VAR 0 2
2181: PUSH
2182: CALL_OW 45
2186: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2187: LD_VAR 0 2
2191: PPUSH
2192: LD_INT 4
2194: PPUSH
2195: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2199: LD_VAR 0 2
2203: PPUSH
2204: LD_INT 4
2206: PPUSH
2207: LD_INT 0
2209: PPUSH
2210: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2214: LD_INT 4
2216: PPUSH
2217: LD_VAR 0 2
2221: PPUSH
2222: LD_INT 2
2224: PPUSH
2225: LD_INT 1
2227: PPUSH
2228: CALL 1339 0 4
// vc_weapon = 9 ;
2232: LD_ADDR_OWVAR 40
2236: PUSH
2237: LD_INT 9
2239: ST_TO_ADDR
// veh = CreateVehicle ;
2240: LD_ADDR_VAR 0 2
2244: PUSH
2245: CALL_OW 45
2249: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2250: LD_VAR 0 2
2254: PPUSH
2255: LD_INT 4
2257: PPUSH
2258: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2262: LD_VAR 0 2
2266: PPUSH
2267: LD_INT 4
2269: PPUSH
2270: LD_INT 0
2272: PPUSH
2273: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2277: LD_INT 4
2279: PPUSH
2280: LD_VAR 0 2
2284: PPUSH
2285: LD_INT 2
2287: PPUSH
2288: LD_INT 1
2290: PPUSH
2291: CALL 1339 0 4
// vc_control = 3 ;
2295: LD_ADDR_OWVAR 38
2299: PUSH
2300: LD_INT 3
2302: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2303: LD_ADDR_OWVAR 40
2307: PUSH
2308: LD_INT 12
2310: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
2311: LD_ADDR_EXP 15
2315: PUSH
2316: CALL_OW 45
2320: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
2321: LD_ADDR_EXP 16
2325: PUSH
2326: CALL_OW 45
2330: ST_TO_ADDR
// SetDir ( amCargo1 , 4 ) ;
2331: LD_EXP 15
2335: PPUSH
2336: LD_INT 4
2338: PPUSH
2339: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
2343: LD_EXP 16
2347: PPUSH
2348: LD_INT 4
2350: PPUSH
2351: CALL_OW 233
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
2355: LD_EXP 15
2359: PPUSH
2360: LD_INT 4
2362: PPUSH
2363: LD_INT 0
2365: PPUSH
2366: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
2370: LD_EXP 16
2374: PPUSH
2375: LD_INT 4
2377: PPUSH
2378: LD_INT 0
2380: PPUSH
2381: CALL_OW 49
// AddCargo ( amCargo1 , 3 , 100 ) ;
2385: LD_EXP 15
2389: PPUSH
2390: LD_INT 3
2392: PPUSH
2393: LD_INT 100
2395: PPUSH
2396: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
2400: LD_EXP 16
2404: PPUSH
2405: LD_INT 1
2407: PPUSH
2408: LD_INT 80
2410: PPUSH
2411: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
2415: LD_EXP 16
2419: PPUSH
2420: LD_INT 3
2422: PPUSH
2423: LD_INT 20
2425: PPUSH
2426: CALL_OW 291
// end ;
2430: LD_VAR 0 1
2434: RET
// export function PowellSupport2 ; var veh , un ; begin
2435: LD_INT 0
2437: PPUSH
2438: PPUSH
2439: PPUSH
// uc_side = 1 ;
2440: LD_ADDR_OWVAR 20
2444: PUSH
2445: LD_INT 1
2447: ST_TO_ADDR
// uc_nation = 1 ;
2448: LD_ADDR_OWVAR 21
2452: PUSH
2453: LD_INT 1
2455: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2456: LD_ADDR_OWVAR 37
2460: PUSH
2461: LD_INT 2
2463: ST_TO_ADDR
// vc_engine = 3 ;
2464: LD_ADDR_OWVAR 39
2468: PUSH
2469: LD_INT 3
2471: ST_TO_ADDR
// vc_control = 3 ;
2472: LD_ADDR_OWVAR 38
2476: PUSH
2477: LD_INT 3
2479: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2480: LD_ADDR_OWVAR 40
2484: PUSH
2485: LD_INT 3
2487: ST_TO_ADDR
// veh = CreateVehicle ;
2488: LD_ADDR_VAR 0 2
2492: PUSH
2493: CALL_OW 45
2497: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2498: LD_VAR 0 2
2502: PPUSH
2503: LD_INT 4
2505: PPUSH
2506: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2510: LD_VAR 0 2
2514: PPUSH
2515: LD_INT 4
2517: PPUSH
2518: LD_INT 0
2520: PPUSH
2521: CALL_OW 49
// vc_control = 1 ;
2525: LD_ADDR_OWVAR 38
2529: PUSH
2530: LD_INT 1
2532: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2533: LD_ADDR_OWVAR 37
2537: PUSH
2538: LD_INT 2
2540: ST_TO_ADDR
// vc_weapon = us_double_gun ;
2541: LD_ADDR_OWVAR 40
2545: PUSH
2546: LD_INT 5
2548: ST_TO_ADDR
// veh = CreateVehicle ;
2549: LD_ADDR_VAR 0 2
2553: PUSH
2554: CALL_OW 45
2558: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2559: LD_VAR 0 2
2563: PPUSH
2564: LD_INT 4
2566: PPUSH
2567: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2571: LD_VAR 0 2
2575: PPUSH
2576: LD_INT 4
2578: PPUSH
2579: LD_INT 0
2581: PPUSH
2582: CALL_OW 49
// if TestCharacters ( 11_Bobby ) = true then
2586: LD_STRING 11_Bobby
2588: PPUSH
2589: CALL_OW 28
2593: PUSH
2594: LD_INT 1
2596: EQUAL
2597: IFFALSE 2646
// begin Bobby = PrepareUnit ( Bobby , true , 11_ ) ;
2599: LD_ADDR_EXP 4
2603: PUSH
2604: LD_STRING Bobby
2606: PPUSH
2607: LD_INT 1
2609: PPUSH
2610: LD_STRING 11_
2612: PPUSH
2613: CALL 37453 0 3
2617: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2618: LD_EXP 4
2622: PPUSH
2623: LD_INT 3
2625: PPUSH
2626: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2630: LD_EXP 4
2634: PPUSH
2635: LD_VAR 0 2
2639: PPUSH
2640: CALL_OW 52
// end else
2644: GO 2664
// begin PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2646: LD_INT 0
2648: PPUSH
2649: LD_VAR 0 2
2653: PPUSH
2654: LD_INT 2
2656: PPUSH
2657: LD_INT 0
2659: PPUSH
2660: CALL 1339 0 4
// end ; if TestCharacters ( 11_Houten ) = true then
2664: LD_STRING 11_Houten
2666: PPUSH
2667: CALL_OW 28
2671: PUSH
2672: LD_INT 1
2674: EQUAL
2675: IFFALSE 2725
// begin Houten = PrepareUnit ( Houten , true , 11_ ) ;
2677: LD_ADDR_EXP 9
2681: PUSH
2682: LD_STRING Houten
2684: PPUSH
2685: LD_INT 1
2687: PPUSH
2688: LD_STRING 11_
2690: PPUSH
2691: CALL 37453 0 3
2695: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2696: LD_EXP 9
2700: PPUSH
2701: LD_INT 1
2703: PPUSH
2704: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2708: LD_EXP 9
2712: PPUSH
2713: LD_INT 4
2715: PPUSH
2716: LD_INT 0
2718: PPUSH
2719: CALL_OW 49
// end else
2723: GO 2741
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2725: LD_INT 4
2727: PPUSH
2728: LD_INT 0
2730: PPUSH
2731: LD_INT 1
2733: PPUSH
2734: LD_INT 0
2736: PPUSH
2737: CALL 1339 0 4
// end ; vc_control = 3 ;
2741: LD_ADDR_OWVAR 38
2745: PUSH
2746: LD_INT 3
2748: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2749: LD_ADDR_OWVAR 40
2753: PUSH
2754: LD_INT 12
2756: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
2757: LD_ADDR_EXP 17
2761: PUSH
2762: CALL_OW 45
2766: ST_TO_ADDR
// SetDir ( amCargo3 , 4 ) ;
2767: LD_EXP 17
2771: PPUSH
2772: LD_INT 4
2774: PPUSH
2775: CALL_OW 233
// amCargo4 = CreateVehicle ;
2779: LD_ADDR_EXP 18
2783: PUSH
2784: CALL_OW 45
2788: ST_TO_ADDR
// SetDir ( amCargo4 , 4 ) ;
2789: LD_EXP 18
2793: PPUSH
2794: LD_INT 4
2796: PPUSH
2797: CALL_OW 233
// amCargo5 = CreateVehicle ;
2801: LD_ADDR_EXP 19
2805: PUSH
2806: CALL_OW 45
2810: ST_TO_ADDR
// SetDir ( amCargo5 , 4 ) ;
2811: LD_EXP 19
2815: PPUSH
2816: LD_INT 4
2818: PPUSH
2819: CALL_OW 233
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
2823: LD_EXP 17
2827: PPUSH
2828: LD_INT 4
2830: PPUSH
2831: LD_INT 0
2833: PPUSH
2834: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
2838: LD_EXP 18
2842: PPUSH
2843: LD_INT 4
2845: PPUSH
2846: LD_INT 0
2848: PPUSH
2849: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
2853: LD_EXP 19
2857: PPUSH
2858: LD_INT 4
2860: PPUSH
2861: LD_INT 0
2863: PPUSH
2864: CALL_OW 49
// if kurtStatus > 0 then
2868: LD_EXP 26
2872: PUSH
2873: LD_INT 0
2875: GREATER
2876: IFFALSE 2925
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2878: LD_EXP 17
2882: PPUSH
2883: LD_INT 1
2885: PPUSH
2886: LD_INT 100
2888: PPUSH
2889: CALL_OW 291
// AddCargo ( amCargo4 , 1 , 100 ) ;
2893: LD_EXP 18
2897: PPUSH
2898: LD_INT 1
2900: PPUSH
2901: LD_INT 100
2903: PPUSH
2904: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 80 ) ;
2908: LD_EXP 19
2912: PPUSH
2913: LD_INT 3
2915: PPUSH
2916: LD_INT 80
2918: PPUSH
2919: CALL_OW 291
// end else
2923: GO 2970
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2925: LD_EXP 17
2929: PPUSH
2930: LD_INT 1
2932: PPUSH
2933: LD_INT 100
2935: PPUSH
2936: CALL_OW 291
// AddCargo ( amCargo4 , 3 , 60 ) ;
2940: LD_EXP 18
2944: PPUSH
2945: LD_INT 3
2947: PPUSH
2948: LD_INT 60
2950: PPUSH
2951: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 100 ) ;
2955: LD_EXP 19
2959: PPUSH
2960: LD_INT 3
2962: PPUSH
2963: LD_INT 100
2965: PPUSH
2966: CALL_OW 291
// end ; end ;
2970: LD_VAR 0 1
2974: RET
// export function PowellSupport3 ; var veh , un ; begin
2975: LD_INT 0
2977: PPUSH
2978: PPUSH
2979: PPUSH
// uc_side = 1 ;
2980: LD_ADDR_OWVAR 20
2984: PUSH
2985: LD_INT 1
2987: ST_TO_ADDR
// uc_nation = 1 ;
2988: LD_ADDR_OWVAR 21
2992: PUSH
2993: LD_INT 1
2995: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2996: LD_INT 4
2998: PPUSH
2999: LD_INT 0
3001: PPUSH
3002: LD_INT 1
3004: PPUSH
3005: LD_INT 0
3007: PPUSH
3008: CALL 1339 0 4
// vc_chassis = us_medium_wheeled ;
3012: LD_ADDR_OWVAR 37
3016: PUSH
3017: LD_INT 2
3019: ST_TO_ADDR
// vc_engine = 3 ;
3020: LD_ADDR_OWVAR 39
3024: PUSH
3025: LD_INT 3
3027: ST_TO_ADDR
// vc_control = 3 ;
3028: LD_ADDR_OWVAR 38
3032: PUSH
3033: LD_INT 3
3035: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
3036: LD_ADDR_OWVAR 40
3040: PUSH
3041: LD_INT 12
3043: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
3044: LD_ADDR_EXP 20
3048: PUSH
3049: CALL_OW 45
3053: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
3054: LD_ADDR_EXP 21
3058: PUSH
3059: CALL_OW 45
3063: ST_TO_ADDR
// SetDir ( amCargo6 , 4 ) ;
3064: LD_EXP 20
3068: PPUSH
3069: LD_INT 4
3071: PPUSH
3072: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
3076: LD_EXP 21
3080: PPUSH
3081: LD_INT 4
3083: PPUSH
3084: CALL_OW 233
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
3088: LD_EXP 20
3092: PPUSH
3093: LD_INT 4
3095: PPUSH
3096: LD_INT 0
3098: PPUSH
3099: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
3103: LD_EXP 21
3107: PPUSH
3108: LD_INT 4
3110: PPUSH
3111: LD_INT 0
3113: PPUSH
3114: CALL_OW 49
// AddCargo ( amCargo6 , 1 , 100 ) ;
3118: LD_EXP 20
3122: PPUSH
3123: LD_INT 1
3125: PPUSH
3126: LD_INT 100
3128: PPUSH
3129: CALL_OW 291
// AddCargo ( amCargo7 , 1 , 100 ) ;
3133: LD_EXP 21
3137: PPUSH
3138: LD_INT 1
3140: PPUSH
3141: LD_INT 100
3143: PPUSH
3144: CALL_OW 291
// end ; end_of_file
3148: LD_VAR 0 1
3152: RET
// export function PrepareRussianCommander ; begin
3153: LD_INT 0
3155: PPUSH
// uc_side = 3 ;
3156: LD_ADDR_OWVAR 20
3160: PUSH
3161: LD_INT 3
3163: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ,  ) ;
3164: LD_ADDR_EXP 23
3168: PUSH
3169: LD_STRING Davidov
3171: PPUSH
3172: LD_INT 0
3174: PPUSH
3175: LD_STRING 
3177: PPUSH
3178: CALL 37453 0 3
3182: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3183: LD_EXP 23
3187: PPUSH
3188: LD_INT 3
3190: PPUSH
3191: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
3195: LD_ADDR_EXP 34
3199: PUSH
3200: LD_EXP 34
3204: PUSH
3205: LD_EXP 23
3209: ADD
3210: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3211: LD_EXP 34
3215: PPUSH
3216: LD_INT 4
3218: PPUSH
3219: CALL_OW 336
// end ;
3223: LD_VAR 0 1
3227: RET
// export function PrepareEastBase ; var i , un ; begin
3228: LD_INT 0
3230: PPUSH
3231: PPUSH
3232: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3233: LD_INT 3
3235: PPUSH
3236: LD_INT 3
3238: PPUSH
3239: LD_INT 121
3241: PPUSH
3242: LD_EXP 36
3246: PPUSH
3247: LD_EXP 37
3251: PPUSH
3252: CALL_OW 12
3256: PPUSH
3257: LD_INT 1
3259: PPUSH
3260: LD_INT 3
3262: PPUSH
3263: CALL 12845 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3267: LD_INT 3
3269: PPUSH
3270: LD_INT 3
3272: PPUSH
3273: LD_INT 121
3275: PPUSH
3276: LD_EXP 36
3280: PPUSH
3281: LD_EXP 37
3285: PPUSH
3286: CALL_OW 12
3290: PPUSH
3291: LD_INT 9
3293: PPUSH
3294: LD_INT 3
3296: PPUSH
3297: CALL 12845 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3301: LD_INT 3
3303: PPUSH
3304: LD_INT 3
3306: PPUSH
3307: LD_INT 4
3309: PPUSH
3310: LD_EXP 36
3314: PPUSH
3315: LD_EXP 37
3319: PPUSH
3320: CALL_OW 12
3324: PPUSH
3325: LD_INT 2
3327: PPUSH
3328: LD_INT 6
3330: PPUSH
3331: CALL 12845 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3335: LD_INT 3
3337: PPUSH
3338: LD_INT 3
3340: PPUSH
3341: LD_INT 112
3343: PPUSH
3344: LD_EXP 36
3348: PPUSH
3349: LD_EXP 37
3353: PPUSH
3354: CALL_OW 12
3358: PPUSH
3359: LD_INT 3
3361: PPUSH
3362: LD_INT 6
3364: PPUSH
3365: CALL 12845 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3369: LD_INT 3
3371: PPUSH
3372: LD_INT 3
3374: PPUSH
3375: LD_INT 47
3377: PPUSH
3378: LD_EXP 36
3382: PPUSH
3383: LD_EXP 37
3387: PPUSH
3388: CALL_OW 12
3392: PPUSH
3393: LD_INT 4
3395: PPUSH
3396: LD_INT 6
3398: PPUSH
3399: CALL 12845 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3403: LD_INT 3
3405: PPUSH
3406: LD_INT 3
3408: PPUSH
3409: LD_INT 129
3411: PPUSH
3412: LD_EXP 36
3416: PPUSH
3417: LD_EXP 37
3421: PPUSH
3422: CALL_OW 12
3426: PPUSH
3427: LD_INT 4
3429: PPUSH
3430: LD_INT 6
3432: PPUSH
3433: CALL 12845 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3437: LD_INT 3
3439: PPUSH
3440: LD_INT 3
3442: PPUSH
3443: LD_INT 135
3445: PPUSH
3446: LD_EXP 36
3450: PPUSH
3451: LD_EXP 37
3455: PPUSH
3456: CALL_OW 12
3460: PPUSH
3461: LD_INT 4
3463: PPUSH
3464: LD_INT 6
3466: PPUSH
3467: CALL 12845 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3471: LD_ADDR_VAR 0 2
3475: PUSH
3476: LD_INT 22
3478: PUSH
3479: LD_INT 3
3481: PUSH
3482: EMPTY
3483: LIST
3484: LIST
3485: PUSH
3486: LD_INT 30
3488: PUSH
3489: LD_INT 32
3491: PUSH
3492: EMPTY
3493: LIST
3494: LIST
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PPUSH
3500: CALL_OW 69
3504: PUSH
3505: FOR_IN
3506: IFFALSE 3546
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3508: LD_INT 3
3510: PPUSH
3511: LD_INT 3
3513: PPUSH
3514: LD_VAR 0 2
3518: PPUSH
3519: LD_EXP 36
3523: PPUSH
3524: LD_EXP 37
3528: PPUSH
3529: CALL_OW 12
3533: PPUSH
3534: LD_INT 1
3536: PPUSH
3537: LD_INT 1
3539: PPUSH
3540: CALL 12845 0 6
3544: GO 3505
3546: POP
3547: POP
// for i = 1 to 5 do
3548: LD_ADDR_VAR 0 2
3552: PUSH
3553: DOUBLE
3554: LD_INT 1
3556: DEC
3557: ST_TO_ADDR
3558: LD_INT 5
3560: PUSH
3561: FOR_TO
3562: IFFALSE 3661
// begin uc_side = 3 ;
3564: LD_ADDR_OWVAR 20
3568: PUSH
3569: LD_INT 3
3571: ST_TO_ADDR
// uc_nation = 3 ;
3572: LD_ADDR_OWVAR 21
3576: PUSH
3577: LD_INT 3
3579: ST_TO_ADDR
// hc_gallery =  ;
3580: LD_ADDR_OWVAR 33
3584: PUSH
3585: LD_STRING 
3587: ST_TO_ADDR
// hc_name =  ;
3588: LD_ADDR_OWVAR 26
3592: PUSH
3593: LD_STRING 
3595: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3596: LD_INT 0
3598: PPUSH
3599: LD_INT 4
3601: PPUSH
3602: LD_EXP 36
3606: PPUSH
3607: LD_EXP 37
3611: PPUSH
3612: CALL_OW 12
3616: PPUSH
3617: CALL_OW 380
// un = CreateHuman ;
3621: LD_ADDR_VAR 0 3
3625: PUSH
3626: CALL_OW 44
3630: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3631: LD_VAR 0 3
3635: PPUSH
3636: LD_INT 3
3638: PPUSH
3639: CALL_OW 52
// RuScientists = RuScientists ^ un ;
3643: LD_ADDR_EXP 34
3647: PUSH
3648: LD_EXP 34
3652: PUSH
3653: LD_VAR 0 3
3657: ADD
3658: ST_TO_ADDR
// end ;
3659: GO 3561
3661: POP
3662: POP
// end ;
3663: LD_VAR 0 1
3667: RET
// export function PrepareWestBase ; var i , un ; begin
3668: LD_INT 0
3670: PPUSH
3671: PPUSH
3672: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3673: LD_INT 3
3675: PPUSH
3676: LD_INT 3
3678: PPUSH
3679: LD_INT 6
3681: PPUSH
3682: LD_EXP 36
3686: PPUSH
3687: LD_EXP 37
3691: PPUSH
3692: CALL_OW 12
3696: PPUSH
3697: LD_INT 2
3699: PPUSH
3700: LD_INT 3
3702: PPUSH
3703: CALL 12845 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3707: LD_INT 3
3709: PPUSH
3710: LD_INT 3
3712: PPUSH
3713: LD_INT 91
3715: PPUSH
3716: LD_EXP 36
3720: PPUSH
3721: LD_EXP 37
3725: PPUSH
3726: CALL_OW 12
3730: PPUSH
3731: LD_INT 4
3733: PPUSH
3734: LD_INT 3
3736: PPUSH
3737: CALL 12845 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3741: LD_INT 3
3743: PPUSH
3744: LD_INT 3
3746: PPUSH
3747: LD_INT 21
3749: PPUSH
3750: LD_EXP 36
3754: PPUSH
3755: LD_EXP 37
3759: PPUSH
3760: CALL_OW 12
3764: PPUSH
3765: LD_INT 3
3767: PPUSH
3768: LD_INT 6
3770: PPUSH
3771: CALL 12845 0 6
// end ;
3775: LD_VAR 0 1
3779: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3780: LD_INT 0
3782: PPUSH
3783: PPUSH
3784: PPUSH
3785: PPUSH
// uc_side = 3 ;
3786: LD_ADDR_OWVAR 20
3790: PUSH
3791: LD_INT 3
3793: ST_TO_ADDR
// uc_nation = 3 ;
3794: LD_ADDR_OWVAR 21
3798: PUSH
3799: LD_INT 3
3801: ST_TO_ADDR
// for i = 1 to 5 do
3802: LD_ADDR_VAR 0 2
3806: PUSH
3807: DOUBLE
3808: LD_INT 1
3810: DEC
3811: ST_TO_ADDR
3812: LD_INT 5
3814: PUSH
3815: FOR_TO
3816: IFFALSE 3886
// begin hc_gallery =  ;
3818: LD_ADDR_OWVAR 33
3822: PUSH
3823: LD_STRING 
3825: ST_TO_ADDR
// hc_name =  ;
3826: LD_ADDR_OWVAR 26
3830: PUSH
3831: LD_STRING 
3833: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3834: LD_INT 0
3836: PPUSH
3837: LD_INT 9
3839: PPUSH
3840: LD_EXP 36
3844: PPUSH
3845: LD_EXP 37
3849: PPUSH
3850: CALL_OW 12
3854: PPUSH
3855: CALL_OW 380
// un = CreateHuman ;
3859: LD_ADDR_VAR 0 3
3863: PUSH
3864: CALL_OW 44
3868: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3869: LD_VAR 0 3
3873: PPUSH
3874: LD_INT 8
3876: PPUSH
3877: LD_INT 0
3879: PPUSH
3880: CALL_OW 49
// end ;
3884: GO 3815
3886: POP
3887: POP
// for i = 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
3888: LD_ADDR_VAR 0 2
3892: PUSH
3893: DOUBLE
3894: LD_INT 1
3896: DEC
3897: ST_TO_ADDR
3898: LD_INT 2
3900: PUSH
3901: LD_INT 3
3903: PUSH
3904: LD_INT 4
3906: PUSH
3907: LD_INT 4
3909: PUSH
3910: EMPTY
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: PUSH
3916: LD_OWVAR 67
3920: ARRAY
3921: PUSH
3922: FOR_TO
3923: IFFALSE 3993
// begin hc_gallery =  ;
3925: LD_ADDR_OWVAR 33
3929: PUSH
3930: LD_STRING 
3932: ST_TO_ADDR
// hc_name =  ;
3933: LD_ADDR_OWVAR 26
3937: PUSH
3938: LD_STRING 
3940: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3941: LD_INT 0
3943: PPUSH
3944: LD_INT 4
3946: PPUSH
3947: LD_EXP 36
3951: PPUSH
3952: LD_EXP 37
3956: PPUSH
3957: CALL_OW 12
3961: PPUSH
3962: CALL_OW 380
// un = CreateHuman ;
3966: LD_ADDR_VAR 0 3
3970: PUSH
3971: CALL_OW 44
3975: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3976: LD_VAR 0 3
3980: PPUSH
3981: LD_INT 8
3983: PPUSH
3984: LD_INT 0
3986: PPUSH
3987: CALL_OW 49
// end ;
3991: GO 3922
3993: POP
3994: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
3995: LD_ADDR_VAR 0 2
3999: PUSH
4000: DOUBLE
4001: LD_INT 1
4003: DEC
4004: ST_TO_ADDR
4005: LD_INT 3
4007: PUSH
4008: LD_INT 4
4010: PUSH
4011: LD_INT 5
4013: PUSH
4014: LD_INT 5
4016: PUSH
4017: EMPTY
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: PUSH
4023: LD_OWVAR 67
4027: ARRAY
4028: PUSH
4029: FOR_TO
4030: IFFALSE 4226
// begin vc_engine = 3 ;
4032: LD_ADDR_OWVAR 39
4036: PUSH
4037: LD_INT 3
4039: ST_TO_ADDR
// vc_control = 1 ;
4040: LD_ADDR_OWVAR 38
4044: PUSH
4045: LD_INT 1
4047: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
4048: LD_ADDR_OWVAR 40
4052: PUSH
4053: LD_INT 42
4055: PUSH
4056: LD_INT 43
4058: PUSH
4059: LD_INT 44
4061: PUSH
4062: LD_INT 45
4064: PUSH
4065: LD_INT 46
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: LIST
4072: LIST
4073: LIST
4074: PUSH
4075: LD_INT 1
4077: PPUSH
4078: LD_INT 5
4080: PPUSH
4081: CALL_OW 12
4085: ARRAY
4086: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4087: LD_OWVAR 40
4091: PUSH
4092: LD_INT 46
4094: EQUAL
4095: IFFALSE 4107
// vc_chassis = ru_heavy_tracked else
4097: LD_ADDR_OWVAR 37
4101: PUSH
4102: LD_INT 24
4104: ST_TO_ADDR
4105: GO 4134
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4107: LD_ADDR_OWVAR 37
4111: PUSH
4112: LD_INT 22
4114: PUSH
4115: LD_INT 21
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: PUSH
4122: LD_INT 1
4124: PPUSH
4125: LD_INT 2
4127: PPUSH
4128: CALL_OW 12
4132: ARRAY
4133: ST_TO_ADDR
// veh = CreateVehicle ;
4134: LD_ADDR_VAR 0 4
4138: PUSH
4139: CALL_OW 45
4143: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4144: LD_VAR 0 4
4148: PPUSH
4149: LD_INT 3
4151: PPUSH
4152: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4156: LD_VAR 0 4
4160: PPUSH
4161: LD_INT 5
4163: PPUSH
4164: LD_INT 0
4166: PPUSH
4167: CALL_OW 49
// hc_gallery =  ;
4171: LD_ADDR_OWVAR 33
4175: PUSH
4176: LD_STRING 
4178: ST_TO_ADDR
// hc_name =  ;
4179: LD_ADDR_OWVAR 26
4183: PUSH
4184: LD_STRING 
4186: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
4187: LD_INT 0
4189: PPUSH
4190: LD_INT 3
4192: PPUSH
4193: LD_INT 10
4195: PPUSH
4196: CALL_OW 380
// un = CreateHuman ;
4200: LD_ADDR_VAR 0 3
4204: PUSH
4205: CALL_OW 44
4209: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4210: LD_VAR 0 3
4214: PPUSH
4215: LD_VAR 0 4
4219: PPUSH
4220: CALL_OW 52
// end ;
4224: GO 4029
4226: POP
4227: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4228: LD_ADDR_VAR 0 2
4232: PUSH
4233: DOUBLE
4234: LD_INT 1
4236: DEC
4237: ST_TO_ADDR
4238: LD_INT 3
4240: PUSH
4241: LD_INT 4
4243: PUSH
4244: LD_INT 5
4246: PUSH
4247: LD_INT 5
4249: PUSH
4250: EMPTY
4251: LIST
4252: LIST
4253: LIST
4254: LIST
4255: PUSH
4256: LD_OWVAR 67
4260: ARRAY
4261: PUSH
4262: FOR_TO
4263: IFFALSE 4410
// begin vc_engine = 3 ;
4265: LD_ADDR_OWVAR 39
4269: PUSH
4270: LD_INT 3
4272: ST_TO_ADDR
// vc_control = 3 ;
4273: LD_ADDR_OWVAR 38
4277: PUSH
4278: LD_INT 3
4280: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
4281: LD_ADDR_OWVAR 40
4285: PUSH
4286: LD_INT 42
4288: PUSH
4289: LD_INT 43
4291: PUSH
4292: LD_INT 44
4294: PUSH
4295: LD_INT 45
4297: PUSH
4298: LD_INT 46
4300: PUSH
4301: LD_INT 49
4303: PUSH
4304: EMPTY
4305: LIST
4306: LIST
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: PUSH
4312: LD_INT 1
4314: PPUSH
4315: LD_INT 5
4317: PPUSH
4318: CALL_OW 12
4322: ARRAY
4323: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4324: LD_OWVAR 40
4328: PUSH
4329: LD_INT 46
4331: EQUAL
4332: IFFALSE 4344
// vc_chassis = ru_heavy_tracked else
4334: LD_ADDR_OWVAR 37
4338: PUSH
4339: LD_INT 24
4341: ST_TO_ADDR
4342: GO 4371
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4344: LD_ADDR_OWVAR 37
4348: PUSH
4349: LD_INT 22
4351: PUSH
4352: LD_INT 21
4354: PUSH
4355: EMPTY
4356: LIST
4357: LIST
4358: PUSH
4359: LD_INT 1
4361: PPUSH
4362: LD_INT 2
4364: PPUSH
4365: CALL_OW 12
4369: ARRAY
4370: ST_TO_ADDR
// veh = CreateVehicle ;
4371: LD_ADDR_VAR 0 4
4375: PUSH
4376: CALL_OW 45
4380: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4381: LD_VAR 0 4
4385: PPUSH
4386: LD_INT 3
4388: PPUSH
4389: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4393: LD_VAR 0 4
4397: PPUSH
4398: LD_INT 6
4400: PPUSH
4401: LD_INT 0
4403: PPUSH
4404: CALL_OW 49
// end ;
4408: GO 4262
4410: POP
4411: POP
// end ; end_of_file
4412: LD_VAR 0 1
4416: RET
// export function PrepareKurt ; begin
4417: LD_INT 0
4419: PPUSH
// uc_side = 8 ;
4420: LD_ADDR_OWVAR 20
4424: PUSH
4425: LD_INT 8
4427: ST_TO_ADDR
// uc_nation = 2 ;
4428: LD_ADDR_OWVAR 21
4432: PUSH
4433: LD_INT 2
4435: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4436: LD_ADDR_OWVAR 37
4440: PUSH
4441: LD_INT 13
4443: ST_TO_ADDR
// vc_engine = 1 ;
4444: LD_ADDR_OWVAR 39
4448: PUSH
4449: LD_INT 1
4451: ST_TO_ADDR
// vc_control = 1 ;
4452: LD_ADDR_OWVAR 38
4456: PUSH
4457: LD_INT 1
4459: ST_TO_ADDR
// vc_weapon = 24 ;
4460: LD_ADDR_OWVAR 40
4464: PUSH
4465: LD_INT 24
4467: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4468: LD_ADDR_EXP 25
4472: PUSH
4473: CALL_OW 45
4477: ST_TO_ADDR
// if kurtStatus > 0 then
4478: LD_EXP 26
4482: PUSH
4483: LD_INT 0
4485: GREATER
4486: IFFALSE 4538
// begin Kurt = PrepareUnit ( Kurt , false ,  ) ;
4488: LD_ADDR_EXP 24
4492: PUSH
4493: LD_STRING Kurt
4495: PPUSH
4496: LD_INT 0
4498: PPUSH
4499: LD_STRING 
4501: PPUSH
4502: CALL 37453 0 3
4506: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4507: LD_EXP 25
4511: PPUSH
4512: LD_INT 4
4514: PPUSH
4515: LD_INT 0
4517: PPUSH
4518: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4522: LD_EXP 24
4526: PPUSH
4527: LD_EXP 25
4531: PPUSH
4532: CALL_OW 52
// end else
4536: GO 4615
// begin hc_name =  ;
4538: LD_ADDR_OWVAR 26
4542: PUSH
4543: LD_STRING 
4545: ST_TO_ADDR
// hc_gallery =  ;
4546: LD_ADDR_OWVAR 33
4550: PUSH
4551: LD_STRING 
4553: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4554: LD_INT 1
4556: PPUSH
4557: LD_INT 10
4559: PPUSH
4560: CALL_OW 381
// Kurt = CreateHuman ;
4564: LD_ADDR_EXP 24
4568: PUSH
4569: CALL_OW 44
4573: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4574: LD_EXP 25
4578: PPUSH
4579: LD_INT 4
4581: PPUSH
4582: LD_INT 0
4584: PPUSH
4585: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4589: LD_EXP 24
4593: PPUSH
4594: LD_EXP 25
4598: PPUSH
4599: CALL_OW 52
// SaveCharacters ( Kurt , AltKurt ) ;
4603: LD_EXP 24
4607: PPUSH
4608: LD_STRING AltKurt
4610: PPUSH
4611: CALL_OW 38
// end ; end ;
4615: LD_VAR 0 1
4619: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4620: LD_INT 0
4622: PPUSH
4623: PPUSH
4624: PPUSH
4625: PPUSH
// for i = 1 to 3 do
4626: LD_ADDR_VAR 0 2
4630: PUSH
4631: DOUBLE
4632: LD_INT 1
4634: DEC
4635: ST_TO_ADDR
4636: LD_INT 3
4638: PUSH
4639: FOR_TO
4640: IFFALSE 4761
// begin uc_side = 1 ;
4642: LD_ADDR_OWVAR 20
4646: PUSH
4647: LD_INT 1
4649: ST_TO_ADDR
// uc_nation = 2 ;
4650: LD_ADDR_OWVAR 21
4654: PUSH
4655: LD_INT 2
4657: ST_TO_ADDR
// hc_gallery =  ;
4658: LD_ADDR_OWVAR 33
4662: PUSH
4663: LD_STRING 
4665: ST_TO_ADDR
// hc_name =  ;
4666: LD_ADDR_OWVAR 26
4670: PUSH
4671: LD_STRING 
4673: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4674: LD_EXP 26
4678: PUSH
4679: LD_INT 0
4681: EQUAL
4682: PUSH
4683: LD_EXP 26
4687: PUSH
4688: LD_INT 2
4690: EQUAL
4691: OR
4692: IFFALSE 4709
// PrepareHuman ( false , 1 , 6 ) else
4694: LD_INT 0
4696: PPUSH
4697: LD_INT 1
4699: PPUSH
4700: LD_INT 6
4702: PPUSH
4703: CALL_OW 380
4707: GO 4722
// PrepareHuman ( false , 1 , 8 ) ;
4709: LD_INT 0
4711: PPUSH
4712: LD_INT 1
4714: PPUSH
4715: LD_INT 8
4717: PPUSH
4718: CALL_OW 380
// un = CreateHuman ;
4722: LD_ADDR_VAR 0 3
4726: PUSH
4727: CALL_OW 44
4731: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4732: LD_VAR 0 3
4736: PPUSH
4737: LD_INT 4
4739: PPUSH
4740: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4744: LD_VAR 0 3
4748: PPUSH
4749: LD_INT 4
4751: PPUSH
4752: LD_INT 0
4754: PPUSH
4755: CALL_OW 49
// end ;
4759: GO 4639
4761: POP
4762: POP
// vc_chassis = 14 ;
4763: LD_ADDR_OWVAR 37
4767: PUSH
4768: LD_INT 14
4770: ST_TO_ADDR
// vc_engine = 3 ;
4771: LD_ADDR_OWVAR 39
4775: PUSH
4776: LD_INT 3
4778: ST_TO_ADDR
// vc_control = 1 ;
4779: LD_ADDR_OWVAR 38
4783: PUSH
4784: LD_INT 1
4786: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4787: LD_ADDR_OWVAR 40
4791: PUSH
4792: LD_INT 27
4794: PUSH
4795: LD_INT 26
4797: PUSH
4798: LD_INT 28
4800: PUSH
4801: EMPTY
4802: LIST
4803: LIST
4804: LIST
4805: PUSH
4806: LD_INT 1
4808: PPUSH
4809: LD_INT 3
4811: PPUSH
4812: CALL_OW 12
4816: ARRAY
4817: ST_TO_ADDR
// veh = CreateVehicle ;
4818: LD_ADDR_VAR 0 4
4822: PUSH
4823: CALL_OW 45
4827: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4828: LD_VAR 0 4
4832: PPUSH
4833: LD_INT 4
4835: PPUSH
4836: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4840: LD_VAR 0 4
4844: PPUSH
4845: LD_INT 4
4847: PPUSH
4848: LD_INT 0
4850: PPUSH
4851: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4855: LD_EXP 26
4859: PUSH
4860: LD_INT 0
4862: EQUAL
4863: PUSH
4864: LD_EXP 26
4868: PUSH
4869: LD_INT 2
4871: EQUAL
4872: OR
4873: IFFALSE 4890
// PrepareHuman ( false , 3 , 6 ) else
4875: LD_INT 0
4877: PPUSH
4878: LD_INT 3
4880: PPUSH
4881: LD_INT 6
4883: PPUSH
4884: CALL_OW 380
4888: GO 4903
// PrepareHuman ( false , 3 , 8 ) ;
4890: LD_INT 0
4892: PPUSH
4893: LD_INT 3
4895: PPUSH
4896: LD_INT 8
4898: PPUSH
4899: CALL_OW 380
// un = CreateHuman ;
4903: LD_ADDR_VAR 0 3
4907: PUSH
4908: CALL_OW 44
4912: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4913: LD_VAR 0 3
4917: PPUSH
4918: LD_VAR 0 4
4922: PPUSH
4923: CALL_OW 52
// vc_chassis = 14 ;
4927: LD_ADDR_OWVAR 37
4931: PUSH
4932: LD_INT 14
4934: ST_TO_ADDR
// vc_engine = 3 ;
4935: LD_ADDR_OWVAR 39
4939: PUSH
4940: LD_INT 3
4942: ST_TO_ADDR
// vc_control = 1 ;
4943: LD_ADDR_OWVAR 38
4947: PUSH
4948: LD_INT 1
4950: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4951: LD_ADDR_OWVAR 40
4955: PUSH
4956: LD_INT 27
4958: PUSH
4959: LD_INT 26
4961: PUSH
4962: LD_INT 28
4964: PUSH
4965: EMPTY
4966: LIST
4967: LIST
4968: LIST
4969: PUSH
4970: LD_INT 1
4972: PPUSH
4973: LD_INT 3
4975: PPUSH
4976: CALL_OW 12
4980: ARRAY
4981: ST_TO_ADDR
// veh = CreateVehicle ;
4982: LD_ADDR_VAR 0 4
4986: PUSH
4987: CALL_OW 45
4991: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4992: LD_VAR 0 4
4996: PPUSH
4997: LD_INT 4
4999: PPUSH
5000: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5004: LD_VAR 0 4
5008: PPUSH
5009: LD_INT 4
5011: PPUSH
5012: LD_INT 0
5014: PPUSH
5015: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5019: LD_EXP 26
5023: PUSH
5024: LD_INT 0
5026: EQUAL
5027: PUSH
5028: LD_EXP 26
5032: PUSH
5033: LD_INT 2
5035: EQUAL
5036: OR
5037: IFFALSE 5054
// PrepareHuman ( false , 4 , 6 ) else
5039: LD_INT 0
5041: PPUSH
5042: LD_INT 4
5044: PPUSH
5045: LD_INT 6
5047: PPUSH
5048: CALL_OW 380
5052: GO 5067
// PrepareHuman ( false , 4 , 8 ) ;
5054: LD_INT 0
5056: PPUSH
5057: LD_INT 4
5059: PPUSH
5060: LD_INT 8
5062: PPUSH
5063: CALL_OW 380
// un = CreateHuman ;
5067: LD_ADDR_VAR 0 3
5071: PUSH
5072: CALL_OW 44
5076: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5077: LD_VAR 0 3
5081: PPUSH
5082: LD_INT 4
5084: PPUSH
5085: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5089: LD_VAR 0 3
5093: PPUSH
5094: LD_VAR 0 4
5098: PPUSH
5099: CALL_OW 52
// vc_chassis = 14 ;
5103: LD_ADDR_OWVAR 37
5107: PUSH
5108: LD_INT 14
5110: ST_TO_ADDR
// vc_engine = 3 ;
5111: LD_ADDR_OWVAR 39
5115: PUSH
5116: LD_INT 3
5118: ST_TO_ADDR
// vc_control = 1 ;
5119: LD_ADDR_OWVAR 38
5123: PUSH
5124: LD_INT 1
5126: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
5127: LD_ADDR_OWVAR 40
5131: PUSH
5132: LD_INT 27
5134: PUSH
5135: LD_INT 26
5137: PUSH
5138: LD_INT 28
5140: PUSH
5141: EMPTY
5142: LIST
5143: LIST
5144: LIST
5145: PUSH
5146: LD_INT 1
5148: PPUSH
5149: LD_INT 3
5151: PPUSH
5152: CALL_OW 12
5156: ARRAY
5157: ST_TO_ADDR
// veh = CreateVehicle ;
5158: LD_ADDR_VAR 0 4
5162: PUSH
5163: CALL_OW 45
5167: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5168: LD_VAR 0 4
5172: PPUSH
5173: LD_INT 4
5175: PPUSH
5176: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5180: LD_VAR 0 4
5184: PPUSH
5185: LD_INT 4
5187: PPUSH
5188: LD_INT 0
5190: PPUSH
5191: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5195: LD_EXP 26
5199: PUSH
5200: LD_INT 0
5202: EQUAL
5203: PUSH
5204: LD_EXP 26
5208: PUSH
5209: LD_INT 2
5211: EQUAL
5212: OR
5213: IFFALSE 5230
// PrepareHuman ( false , 2 , 4 ) else
5215: LD_INT 0
5217: PPUSH
5218: LD_INT 2
5220: PPUSH
5221: LD_INT 4
5223: PPUSH
5224: CALL_OW 380
5228: GO 5243
// PrepareHuman ( false , 2 , 8 ) ;
5230: LD_INT 0
5232: PPUSH
5233: LD_INT 2
5235: PPUSH
5236: LD_INT 8
5238: PPUSH
5239: CALL_OW 380
// un = CreateHuman ;
5243: LD_ADDR_VAR 0 3
5247: PUSH
5248: CALL_OW 44
5252: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5253: LD_VAR 0 3
5257: PPUSH
5258: LD_INT 4
5260: PPUSH
5261: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5265: LD_VAR 0 3
5269: PPUSH
5270: LD_VAR 0 4
5274: PPUSH
5275: CALL_OW 52
// end ;
5279: LD_VAR 0 1
5283: RET
// export function PrepareAttackLegion ; var i , un ; begin
5284: LD_INT 0
5286: PPUSH
5287: PPUSH
5288: PPUSH
// for i = 1 to 4 do
5289: LD_ADDR_VAR 0 2
5293: PUSH
5294: DOUBLE
5295: LD_INT 1
5297: DEC
5298: ST_TO_ADDR
5299: LD_INT 4
5301: PUSH
5302: FOR_TO
5303: IFFALSE 5413
// begin uc_side = 8 ;
5305: LD_ADDR_OWVAR 20
5309: PUSH
5310: LD_INT 8
5312: ST_TO_ADDR
// uc_nation = 2 ;
5313: LD_ADDR_OWVAR 21
5317: PUSH
5318: LD_INT 2
5320: ST_TO_ADDR
// hc_gallery =  ;
5321: LD_ADDR_OWVAR 33
5325: PUSH
5326: LD_STRING 
5328: ST_TO_ADDR
// hc_name =  ;
5329: LD_ADDR_OWVAR 26
5333: PUSH
5334: LD_STRING 
5336: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5337: LD_INT 0
5339: PPUSH
5340: LD_INT 1
5342: PUSH
5343: LD_INT 8
5345: PUSH
5346: EMPTY
5347: LIST
5348: LIST
5349: PUSH
5350: LD_INT 1
5352: PPUSH
5353: LD_INT 2
5355: PPUSH
5356: CALL_OW 12
5360: ARRAY
5361: PPUSH
5362: LD_INT 6
5364: PPUSH
5365: LD_INT 8
5367: PPUSH
5368: CALL_OW 12
5372: PPUSH
5373: CALL_OW 380
// un = CreateHuman ;
5377: LD_ADDR_VAR 0 3
5381: PUSH
5382: CALL_OW 44
5386: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5387: LD_VAR 0 3
5391: PPUSH
5392: LD_INT 19
5394: PPUSH
5395: LD_INT 0
5397: PPUSH
5398: CALL_OW 49
// ComCrawl ( un ) ;
5402: LD_VAR 0 3
5406: PPUSH
5407: CALL_OW 137
// end ;
5411: GO 5302
5413: POP
5414: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5415: LD_INT 1
5417: PPUSH
5418: LD_INT 8
5420: PPUSH
5421: LD_INT 2
5423: PPUSH
5424: LD_INT 1
5426: PPUSH
5427: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5431: LD_INT 20
5433: PPUSH
5434: LD_INT 3
5436: PPUSH
5437: CALL 14823 0 2
// end ; end_of_file
5441: LD_VAR 0 1
5445: RET
// every 1 do var i ;
5446: GO 5448
5448: DISABLE
5449: LD_INT 0
5451: PPUSH
// begin TeleportExit ( ruteleprt , 122 , 145 ) ;
5452: LD_INT 10
5454: PPUSH
5455: LD_INT 122
5457: PPUSH
5458: LD_INT 145
5460: PPUSH
5461: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
5465: LD_INT 137
5467: PPUSH
5468: LD_INT 84
5470: PPUSH
5471: LD_INT 61
5473: PPUSH
5474: CALL_OW 243
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5478: LD_EXP 1
5482: PPUSH
5483: CALL_OW 310
5487: PPUSH
5488: CALL_OW 87
// InGameOn ;
5492: CALL_OW 8
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 130 , 103 ) ;
5496: LD_INT 22
5498: PUSH
5499: LD_INT 1
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: PPUSH
5506: CALL_OW 69
5510: PPUSH
5511: LD_INT 130
5513: PPUSH
5514: LD_INT 103
5516: PPUSH
5517: CALL_OW 111
// AddComMoveXY ( i , 114 , 102 ) ;
5521: LD_VAR 0 1
5525: PPUSH
5526: LD_INT 114
5528: PPUSH
5529: LD_INT 102
5531: PPUSH
5532: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5536: LD_EXP 1
5540: PPUSH
5541: LD_STRING D1-JMM-1
5543: PPUSH
5544: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5548: LD_EXP 1
5552: PPUSH
5553: CALL_OW 310
5557: PPUSH
5558: CALL_OW 87
// if IsOk ( Donaldson ) then
5562: LD_EXP 3
5566: PPUSH
5567: CALL_OW 302
5571: IFFALSE 5651
// begin Say ( Donaldson , D1-Don-1 ) ;
5573: LD_EXP 3
5577: PPUSH
5578: LD_STRING D1-Don-1
5580: PPUSH
5581: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5585: LD_EXP 1
5589: PPUSH
5590: CALL_OW 310
5594: PPUSH
5595: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5599: LD_EXP 1
5603: PPUSH
5604: LD_STRING D1-JMM-2
5606: PPUSH
5607: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5611: LD_EXP 1
5615: PPUSH
5616: CALL_OW 310
5620: PPUSH
5621: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5625: LD_EXP 3
5629: PPUSH
5630: LD_STRING D1-Don-2
5632: PPUSH
5633: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5637: LD_EXP 1
5641: PPUSH
5642: CALL_OW 310
5646: PPUSH
5647: CALL_OW 87
// end ; AddComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 110 , 101 ) ;
5651: LD_INT 22
5653: PUSH
5654: LD_INT 1
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: PPUSH
5661: CALL_OW 69
5665: PPUSH
5666: LD_INT 110
5668: PPUSH
5669: LD_INT 101
5671: PPUSH
5672: CALL_OW 171
// wait ( 0 0$1 ) ;
5676: LD_INT 35
5678: PPUSH
5679: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5683: LD_EXP 1
5687: PPUSH
5688: CALL_OW 310
5692: PPUSH
5693: CALL_OW 87
// wait ( 0 0$1 ) ;
5697: LD_INT 35
5699: PPUSH
5700: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5704: LD_EXP 1
5708: PPUSH
5709: CALL_OW 310
5713: PPUSH
5714: CALL_OW 87
// wait ( 0 0$1 ) ;
5718: LD_INT 35
5720: PPUSH
5721: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5725: LD_EXP 1
5729: PPUSH
5730: CALL_OW 310
5734: PPUSH
5735: CALL_OW 87
// wait ( 0 0$1 ) ;
5739: LD_INT 35
5741: PPUSH
5742: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5746: LD_EXP 1
5750: PPUSH
5751: CALL_OW 310
5755: PPUSH
5756: CALL_OW 87
// end ;
5760: PPOPN 1
5762: END
// every 0 0$1 trigger SeeXY ( 1 , 102 , 94 ) do var i ;
5763: LD_INT 1
5765: PPUSH
5766: LD_INT 102
5768: PPUSH
5769: LD_INT 94
5771: PPUSH
5772: CALL_OW 293
5776: IFFALSE 5967
5778: GO 5780
5780: DISABLE
5781: LD_INT 0
5783: PPUSH
// begin CenterOnXY ( 102 , 94 ) ;
5784: LD_INT 102
5786: PPUSH
5787: LD_INT 94
5789: PPUSH
5790: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1-Sol1-2 ,  ) ;
5794: LD_INT 22
5796: PUSH
5797: LD_INT 1
5799: PUSH
5800: EMPTY
5801: LIST
5802: LIST
5803: PUSH
5804: LD_INT 26
5806: PUSH
5807: LD_INT 1
5809: PUSH
5810: EMPTY
5811: LIST
5812: LIST
5813: PUSH
5814: LD_INT 2
5816: PUSH
5817: LD_INT 25
5819: PUSH
5820: LD_INT 1
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: PUSH
5827: LD_INT 25
5829: PUSH
5830: LD_INT 2
5832: PUSH
5833: EMPTY
5834: LIST
5835: LIST
5836: PUSH
5837: LD_INT 25
5839: PUSH
5840: LD_INT 3
5842: PUSH
5843: EMPTY
5844: LIST
5845: LIST
5846: PUSH
5847: LD_INT 25
5849: PUSH
5850: LD_INT 4
5852: PUSH
5853: EMPTY
5854: LIST
5855: LIST
5856: PUSH
5857: LD_INT 25
5859: PUSH
5860: LD_INT 5
5862: PUSH
5863: EMPTY
5864: LIST
5865: LIST
5866: PUSH
5867: LD_INT 25
5869: PUSH
5870: LD_INT 8
5872: PUSH
5873: EMPTY
5874: LIST
5875: LIST
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: LIST
5881: LIST
5882: LIST
5883: LIST
5884: LIST
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: LIST
5890: PPUSH
5891: CALL_OW 69
5895: PPUSH
5896: LD_STRING D1-Sol1-2
5898: PPUSH
5899: LD_STRING 
5901: PPUSH
5902: CALL 12340 0 3
// Say ( JMM , D1-JMM-3 ) ;
5906: LD_EXP 1
5910: PPUSH
5911: LD_STRING D1-JMM-3
5913: PPUSH
5914: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5918: LD_STRING M1
5920: PPUSH
5921: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5925: LD_ADDR_VAR 0 1
5929: PUSH
5930: LD_INT 22
5932: PUSH
5933: LD_INT 1
5935: PUSH
5936: EMPTY
5937: LIST
5938: LIST
5939: PPUSH
5940: CALL_OW 69
5944: PUSH
5945: FOR_IN
5946: IFFALSE 5965
// ComMoveXY ( i , 95 , 84 ) ;
5948: LD_VAR 0 1
5952: PPUSH
5953: LD_INT 95
5955: PPUSH
5956: LD_INT 84
5958: PPUSH
5959: CALL_OW 111
5963: GO 5945
5965: POP
5966: POP
// end ;
5967: PPOPN 1
5969: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5970: GO 5972
5972: DISABLE
5973: LD_INT 0
5975: PPUSH
5976: PPUSH
5977: PPUSH
5978: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5979: LD_ADDR_VAR 0 2
5983: PUSH
5984: LD_INT 8
5986: PPUSH
5987: LD_INT 22
5989: PUSH
5990: LD_INT 3
5992: PUSH
5993: EMPTY
5994: LIST
5995: LIST
5996: PUSH
5997: LD_INT 25
5999: PUSH
6000: LD_INT 9
6002: PUSH
6003: EMPTY
6004: LIST
6005: LIST
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PPUSH
6011: CALL_OW 70
6015: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
6016: LD_ADDR_VAR 0 3
6020: PUSH
6021: LD_INT 22
6023: PUSH
6024: LD_INT 1
6026: PUSH
6027: EMPTY
6028: LIST
6029: LIST
6030: PUSH
6031: EMPTY
6032: LIST
6033: PPUSH
6034: CALL_OW 69
6038: ST_TO_ADDR
// enable ;
6039: ENABLE
// for i in your_units do
6040: LD_ADDR_VAR 0 1
6044: PUSH
6045: LD_VAR 0 3
6049: PUSH
6050: FOR_IN
6051: IFFALSE 6717
// begin if See ( 3 , i ) then
6053: LD_INT 3
6055: PPUSH
6056: LD_VAR 0 1
6060: PPUSH
6061: CALL_OW 292
6065: IFFALSE 6715
// begin disable ;
6067: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
6068: LD_VAR 0 2
6072: PPUSH
6073: LD_INT 96
6075: PPUSH
6076: LD_INT 85
6078: PPUSH
6079: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6083: LD_VAR 0 2
6087: PPUSH
6088: LD_INT 96
6090: PPUSH
6091: LD_INT 85
6093: PPUSH
6094: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6098: LD_VAR 0 2
6102: PPUSH
6103: LD_INT 96
6105: PPUSH
6106: LD_INT 85
6108: PPUSH
6109: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6113: LD_VAR 0 2
6117: PPUSH
6118: LD_INT 96
6120: PPUSH
6121: LD_INT 85
6123: PPUSH
6124: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6128: LD_VAR 0 2
6132: PPUSH
6133: LD_INT 96
6135: PPUSH
6136: LD_INT 85
6138: PPUSH
6139: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6143: LD_VAR 0 2
6147: PPUSH
6148: LD_INT 96
6150: PPUSH
6151: LD_INT 85
6153: PPUSH
6154: CALL_OW 214
// wait ( 0 0$2 ) ;
6158: LD_INT 70
6160: PPUSH
6161: CALL_OW 67
// Say ( JMM , D1a-JMM-1 ) ;
6165: LD_EXP 1
6169: PPUSH
6170: LD_STRING D1a-JMM-1
6172: PPUSH
6173: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
6177: LD_EXP 3
6181: PPUSH
6182: LD_STRING D1a-Don-1
6184: PPUSH
6185: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6189: LD_ADDR_VAR 0 1
6193: PUSH
6194: LD_INT 22
6196: PUSH
6197: LD_INT 1
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: PPUSH
6204: CALL_OW 69
6208: PUSH
6209: FOR_IN
6210: IFFALSE 6229
// ComMoveXY ( i , 109 , 102 ) ;
6212: LD_VAR 0 1
6216: PPUSH
6217: LD_INT 109
6219: PPUSH
6220: LD_INT 102
6222: PPUSH
6223: CALL_OW 111
6227: GO 6209
6229: POP
6230: POP
// Say ( JMM , D1a-JMM-2 ) ;
6231: LD_EXP 1
6235: PPUSH
6236: LD_STRING D1a-JMM-2
6238: PPUSH
6239: CALL_OW 88
// wait ( 0 0$10 ) ;
6243: LD_INT 350
6245: PPUSH
6246: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6250: LD_EXP 1
6254: PPUSH
6255: CALL_OW 310
6259: PPUSH
6260: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6264: LD_EXP 3
6268: PPUSH
6269: LD_STRING D1b-Don-1
6271: PPUSH
6272: CALL_OW 88
// if IsOk ( Donaldson ) then
6276: LD_EXP 3
6280: PPUSH
6281: CALL_OW 302
6285: IFFALSE 6299
// Say ( JMM , D1b-JMM-1 ) ;
6287: LD_EXP 1
6291: PPUSH
6292: LD_STRING D1b-JMM-1
6294: PPUSH
6295: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6299: LD_INT 22
6301: PUSH
6302: LD_INT 1
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: PUSH
6309: LD_INT 26
6311: PUSH
6312: LD_INT 1
6314: PUSH
6315: EMPTY
6316: LIST
6317: LIST
6318: PUSH
6319: LD_INT 2
6321: PUSH
6322: LD_INT 25
6324: PUSH
6325: LD_INT 1
6327: PUSH
6328: EMPTY
6329: LIST
6330: LIST
6331: PUSH
6332: LD_INT 25
6334: PUSH
6335: LD_INT 2
6337: PUSH
6338: EMPTY
6339: LIST
6340: LIST
6341: PUSH
6342: LD_INT 25
6344: PUSH
6345: LD_INT 3
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: PUSH
6352: LD_INT 25
6354: PUSH
6355: LD_INT 4
6357: PUSH
6358: EMPTY
6359: LIST
6360: LIST
6361: PUSH
6362: LD_INT 25
6364: PUSH
6365: LD_INT 5
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: PUSH
6372: LD_INT 25
6374: PUSH
6375: LD_INT 8
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: LIST
6395: PPUSH
6396: CALL_OW 69
6400: PPUSH
6401: LD_STRING D1b-Sol1-1
6403: PPUSH
6404: LD_STRING 
6406: PPUSH
6407: CALL 12340 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6411: LD_EXP 3
6415: PPUSH
6416: LD_STRING D1b-Don-2
6418: PPUSH
6419: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6423: LD_EXP 1
6427: PPUSH
6428: LD_STRING D1b-JMM-2
6430: PPUSH
6431: CALL_OW 88
// dec = ShowQuery1 ;
6435: LD_ADDR_VAR 0 4
6439: PUSH
6440: CALL 12803 0 0
6444: ST_TO_ADDR
// if dec = 1 then
6445: LD_VAR 0 4
6449: PUSH
6450: LD_INT 1
6452: EQUAL
6453: IFFALSE 6559
// begin Say ( JMM , D2-JMM-1 ) ;
6455: LD_EXP 1
6459: PPUSH
6460: LD_STRING D2-JMM-1
6462: PPUSH
6463: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6467: LD_EXP 22
6471: PPUSH
6472: LD_STRING D2-Pow-1
6474: PPUSH
6475: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6479: LD_EXP 1
6483: PPUSH
6484: LD_STRING D2a-JMM-1
6486: PPUSH
6487: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6491: LD_EXP 22
6495: PPUSH
6496: LD_STRING D2a-Pow-1
6498: PPUSH
6499: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6503: LD_EXP 1
6507: PPUSH
6508: LD_STRING D2a-JMM-2
6510: PPUSH
6511: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6515: LD_EXP 22
6519: PPUSH
6520: LD_STRING D2a-Pow-2
6522: PPUSH
6523: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6527: LD_EXP 1
6531: PPUSH
6532: LD_STRING D2a-JMM-3
6534: PPUSH
6535: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6539: LD_EXP 22
6543: PPUSH
6544: LD_STRING D2a-Pow-3
6546: PPUSH
6547: CALL_OW 94
// secondPass = 2 ;
6551: LD_ADDR_EXP 27
6555: PUSH
6556: LD_INT 2
6558: ST_TO_ADDR
// end ; if dec = 2 then
6559: LD_VAR 0 4
6563: PUSH
6564: LD_INT 2
6566: EQUAL
6567: IFFALSE 6661
// begin Say ( JMM , D2-JMM-1 ) ;
6569: LD_EXP 1
6573: PPUSH
6574: LD_STRING D2-JMM-1
6576: PPUSH
6577: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6581: LD_EXP 22
6585: PPUSH
6586: LD_STRING D2-Pow-1
6588: PPUSH
6589: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6593: LD_EXP 1
6597: PPUSH
6598: LD_STRING D2b-JMM-1
6600: PPUSH
6601: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6605: LD_EXP 22
6609: PPUSH
6610: LD_STRING D2b-Pow-1
6612: PPUSH
6613: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6617: LD_EXP 1
6621: PPUSH
6622: LD_STRING D2c-JMM-1
6624: PPUSH
6625: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6629: LD_EXP 22
6633: PPUSH
6634: LD_STRING D2c-Pow-1
6636: PPUSH
6637: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6641: LD_EXP 1
6645: PPUSH
6646: LD_STRING D2c-JMM-2
6648: PPUSH
6649: CALL_OW 88
// secondPass = 2 ;
6653: LD_ADDR_EXP 27
6657: PUSH
6658: LD_INT 2
6660: ST_TO_ADDR
// end ; if dec = 3 then
6661: LD_VAR 0 4
6665: PUSH
6666: LD_INT 3
6668: EQUAL
6669: IFFALSE 6679
// secondPass = 1 ;
6671: LD_ADDR_EXP 27
6675: PUSH
6676: LD_INT 1
6678: ST_TO_ADDR
// InGameOff ;
6679: CALL_OW 9
// ruAI = 1 ;
6683: LD_ADDR_EXP 41
6687: PUSH
6688: LD_INT 1
6690: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6691: LD_INT 1
6693: PPUSH
6694: LD_INT 3
6696: PPUSH
6697: LD_INT 2
6699: PPUSH
6700: LD_INT 1
6702: PPUSH
6703: CALL_OW 80
// SaveForQuickRestart ;
6707: CALL_OW 22
// exit ;
6711: POP
6712: POP
6713: GO 6719
// end ; end ;
6715: GO 6050
6717: POP
6718: POP
// end ;
6719: PPOPN 4
6721: END
// every 1 1$0 trigger secondPass = 2 do
6722: LD_EXP 27
6726: PUSH
6727: LD_INT 2
6729: EQUAL
6730: IFFALSE 6950
6732: GO 6734
6734: DISABLE
// begin PowellSupport1 ;
6735: CALL 1970 0 0
// DialogueOn ;
6739: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6743: LD_EXP 1
6747: PPUSH
6748: LD_STRING DC1-JMM-1
6750: PPUSH
6751: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6755: LD_EXP 22
6759: PPUSH
6760: LD_STRING DC1-Pow-1
6762: PPUSH
6763: CALL_OW 94
// DialogueOff ;
6767: CALL_OW 7
// wait ( 3 3$0 ) ;
6771: LD_INT 6300
6773: PPUSH
6774: CALL_OW 67
// PowellSupport2 ;
6778: CALL 2435 0 0
// DialogueOn ;
6782: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6786: LD_EXP 1
6790: PPUSH
6791: LD_STRING DC2-JMM-1
6793: PPUSH
6794: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6798: LD_EXP 22
6802: PPUSH
6803: LD_STRING DC2-Pow-1
6805: PPUSH
6806: CALL_OW 94
// DialogueOff ;
6810: CALL_OW 7
// wait ( 3 3$00 ) ;
6814: LD_INT 6300
6816: PPUSH
6817: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6821: LD_INT 35
6823: PPUSH
6824: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and not FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
6828: LD_INT 22
6830: PUSH
6831: LD_INT 1
6833: PUSH
6834: EMPTY
6835: LIST
6836: LIST
6837: PUSH
6838: LD_INT 2
6840: PUSH
6841: LD_INT 30
6843: PUSH
6844: LD_INT 0
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: PUSH
6851: LD_INT 30
6853: PUSH
6854: LD_INT 1
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: PUSH
6861: EMPTY
6862: LIST
6863: LIST
6864: LIST
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: PPUSH
6870: CALL_OW 69
6874: PUSH
6875: LD_INT 11
6877: PPUSH
6878: LD_INT 22
6880: PUSH
6881: LD_INT 3
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: PPUSH
6888: CALL_OW 70
6892: NOT
6893: AND
6894: IFFALSE 6821
// wait ( 0 0$10 ) ;
6896: LD_INT 350
6898: PPUSH
6899: CALL_OW 67
// Legion ;
6903: CALL 6951 0 0
// wait ( 6 6$0 ) ;
6907: LD_INT 12600
6909: PPUSH
6910: CALL_OW 67
// PowellSupport3 ;
6914: CALL 2975 0 0
// DialogueOn ;
6918: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6922: LD_EXP 22
6926: PPUSH
6927: LD_STRING DC3-Pow-1
6929: PPUSH
6930: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6934: LD_EXP 1
6938: PPUSH
6939: LD_STRING DC3-JMM-1
6941: PPUSH
6942: CALL_OW 88
// DialogueOff ;
6946: CALL_OW 7
// end ;
6950: END
// export function Legion ; var i , dec1 , dec2 , tmp , tmp2 , tmp3 , crates , oil , siberite , cr , sb , payForNeutral , payForHelp , query1 , query2 ; begin
6951: LD_INT 0
6953: PPUSH
6954: PPUSH
6955: PPUSH
6956: PPUSH
6957: PPUSH
6958: PPUSH
6959: PPUSH
6960: PPUSH
6961: PPUSH
6962: PPUSH
6963: PPUSH
6964: PPUSH
6965: PPUSH
6966: PPUSH
6967: PPUSH
6968: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6969: LD_ADDR_VAR 0 5
6973: PUSH
6974: LD_INT 22
6976: PUSH
6977: LD_INT 1
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PUSH
6984: LD_INT 21
6986: PUSH
6987: LD_INT 3
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: PUSH
6994: LD_INT 2
6996: PUSH
6997: LD_INT 30
6999: PUSH
7000: LD_INT 0
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: PUSH
7007: LD_INT 30
7009: PUSH
7010: LD_INT 1
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: LIST
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: LIST
7026: PPUSH
7027: CALL_OW 69
7031: ST_TO_ADDR
// crates := 0 ;
7032: LD_ADDR_VAR 0 8
7036: PUSH
7037: LD_INT 0
7039: ST_TO_ADDR
// oil := 0 ;
7040: LD_ADDR_VAR 0 9
7044: PUSH
7045: LD_INT 0
7047: ST_TO_ADDR
// siberite := 0 ;
7048: LD_ADDR_VAR 0 10
7052: PUSH
7053: LD_INT 0
7055: ST_TO_ADDR
// payForNeutral := false ;
7056: LD_ADDR_VAR 0 13
7060: PUSH
7061: LD_INT 0
7063: ST_TO_ADDR
// payForHelp := false ;
7064: LD_ADDR_VAR 0 14
7068: PUSH
7069: LD_INT 0
7071: ST_TO_ADDR
// for i in tmp do
7072: LD_ADDR_VAR 0 2
7076: PUSH
7077: LD_VAR 0 5
7081: PUSH
7082: FOR_IN
7083: IFFALSE 7174
// begin crates := crates + GetResourceType ( GetBase ( i ) , 1 ) ;
7085: LD_ADDR_VAR 0 8
7089: PUSH
7090: LD_VAR 0 8
7094: PUSH
7095: LD_VAR 0 2
7099: PPUSH
7100: CALL_OW 274
7104: PPUSH
7105: LD_INT 1
7107: PPUSH
7108: CALL_OW 275
7112: PLUS
7113: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( i ) , 2 ) ;
7114: LD_ADDR_VAR 0 9
7118: PUSH
7119: LD_VAR 0 9
7123: PUSH
7124: LD_VAR 0 2
7128: PPUSH
7129: CALL_OW 274
7133: PPUSH
7134: LD_INT 2
7136: PPUSH
7137: CALL_OW 275
7141: PLUS
7142: ST_TO_ADDR
// siberite := siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
7143: LD_ADDR_VAR 0 10
7147: PUSH
7148: LD_VAR 0 10
7152: PUSH
7153: LD_VAR 0 2
7157: PPUSH
7158: CALL_OW 274
7162: PPUSH
7163: LD_INT 3
7165: PPUSH
7166: CALL_OW 275
7170: PLUS
7171: ST_TO_ADDR
// end ;
7172: GO 7082
7174: POP
7175: POP
// PrepareKurt ;
7176: CALL 4417 0 0
// if not Kurt then
7180: LD_EXP 24
7184: NOT
7185: IFFALSE 7189
// exit ;
7187: GO 9321
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7189: LD_EXP 25
7193: PPUSH
7194: LD_INT 144
7196: PPUSH
7197: LD_INT 111
7199: PPUSH
7200: CALL_OW 111
// wait ( 0 0$2 ) ;
7204: LD_INT 70
7206: PPUSH
7207: CALL_OW 67
// PlaceSeeing ( 167 , 121 , 1 , - 10 ) ;
7211: LD_INT 167
7213: PPUSH
7214: LD_INT 121
7216: PPUSH
7217: LD_INT 1
7219: PPUSH
7220: LD_INT 10
7222: NEG
7223: PPUSH
7224: CALL_OW 330
// ComExitVehicle ( Kurt ) ;
7228: LD_EXP 24
7232: PPUSH
7233: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7237: LD_EXP 24
7241: PPUSH
7242: CALL_OW 87
// wait ( 0 0$1 ) ;
7246: LD_INT 35
7248: PPUSH
7249: CALL_OW 67
// DialogueOn ;
7253: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7257: LD_INT 22
7259: PUSH
7260: LD_INT 1
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PUSH
7267: LD_INT 26
7269: PUSH
7270: LD_INT 1
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: PUSH
7277: LD_INT 2
7279: PUSH
7280: LD_INT 25
7282: PUSH
7283: LD_INT 1
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: PUSH
7290: LD_INT 25
7292: PUSH
7293: LD_INT 2
7295: PUSH
7296: EMPTY
7297: LIST
7298: LIST
7299: PUSH
7300: LD_INT 25
7302: PUSH
7303: LD_INT 3
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: PUSH
7310: LD_INT 25
7312: PUSH
7313: LD_INT 4
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: PUSH
7320: LD_INT 25
7322: PUSH
7323: LD_INT 5
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: PUSH
7330: LD_INT 25
7332: PUSH
7333: LD_INT 8
7335: PUSH
7336: EMPTY
7337: LIST
7338: LIST
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: LIST
7353: PPUSH
7354: CALL_OW 69
7358: PPUSH
7359: LD_STRING D3-Sol1-1
7361: PPUSH
7362: LD_STRING 
7364: PPUSH
7365: CALL 12340 0 3
// if KurtStatus then
7369: LD_EXP 26
7373: IFFALSE 7473
// begin Say ( Kurt , D3-Kurt-1 ) ;
7375: LD_EXP 24
7379: PPUSH
7380: LD_STRING D3-Kurt-1
7382: PPUSH
7383: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7387: LD_EXP 1
7391: PPUSH
7392: LD_STRING D3-JMM-1
7394: PPUSH
7395: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7399: LD_EXP 24
7403: PPUSH
7404: LD_STRING D3-Kurt-2
7406: PPUSH
7407: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7411: LD_EXP 1
7415: PPUSH
7416: LD_STRING D3-JMM-2
7418: PPUSH
7419: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7423: LD_EXP 24
7427: PPUSH
7428: LD_STRING D3-Kurt-4
7430: PPUSH
7431: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7435: LD_EXP 1
7439: PPUSH
7440: LD_STRING D3-JMM-4
7442: PPUSH
7443: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7447: LD_EXP 24
7451: PPUSH
7452: LD_STRING D3-Kurt-5
7454: PPUSH
7455: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7459: LD_EXP 24
7463: PPUSH
7464: LD_STRING D3-Kurt-5a
7466: PPUSH
7467: CALL_OW 88
// end else
7471: GO 7569
// begin Say ( Kurt , D3-Kurt-1 ) ;
7473: LD_EXP 24
7477: PPUSH
7478: LD_STRING D3-Kurt-1
7480: PPUSH
7481: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7485: LD_EXP 1
7489: PPUSH
7490: LD_STRING D3-JMM-1
7492: PPUSH
7493: CALL_OW 88
// Say ( Kurt , D3-Kurt-3 ) ;
7497: LD_EXP 24
7501: PPUSH
7502: LD_STRING D3-Kurt-3
7504: PPUSH
7505: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7509: LD_EXP 1
7513: PPUSH
7514: LD_STRING D3-JMM-3
7516: PPUSH
7517: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7521: LD_EXP 24
7525: PPUSH
7526: LD_STRING D3-Kurt-4
7528: PPUSH
7529: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7533: LD_EXP 1
7537: PPUSH
7538: LD_STRING D3-JMM-4
7540: PPUSH
7541: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7545: LD_EXP 24
7549: PPUSH
7550: LD_STRING D3-Kurt-5
7552: PPUSH
7553: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
7557: LD_EXP 24
7561: PPUSH
7562: LD_STRING D3-Kurt-5b
7564: PPUSH
7565: CALL_OW 88
// end ; if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
7569: LD_VAR 0 8
7573: PUSH
7574: LD_INT 120
7576: PUSH
7577: LD_INT 60
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: PUSH
7584: LD_EXP 26
7588: PUSH
7589: LD_INT 1
7591: PLUS
7592: ARRAY
7593: GREATEREQUAL
7594: PUSH
7595: LD_VAR 0 10
7599: PUSH
7600: LD_INT 120
7602: PUSH
7603: LD_INT 60
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: PUSH
7610: LD_EXP 26
7614: PUSH
7615: LD_INT 1
7617: PLUS
7618: ARRAY
7619: GREATEREQUAL
7620: AND
7621: IFFALSE 7673
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
7623: LD_ADDR_VAR 0 3
7627: PUSH
7628: LD_STRING Q2
7630: PUSH
7631: LD_STRING Q2K
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: PUSH
7638: LD_EXP 26
7642: PUSH
7643: LD_INT 1
7645: PLUS
7646: ARRAY
7647: PPUSH
7648: LD_INT 1
7650: PUSH
7651: LD_INT 2
7653: PUSH
7654: LD_INT 3
7656: PUSH
7657: LD_INT 4
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: PPUSH
7666: CALL_OW 98
7670: ST_TO_ADDR
7671: GO 7717
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 3 , 4 ] ) ;
7673: LD_ADDR_VAR 0 3
7677: PUSH
7678: LD_STRING Q2
7680: PUSH
7681: LD_STRING Q2K
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: PUSH
7688: LD_EXP 26
7692: PUSH
7693: LD_INT 1
7695: PLUS
7696: ARRAY
7697: PPUSH
7698: LD_INT 1
7700: PUSH
7701: LD_INT 3
7703: PUSH
7704: LD_INT 4
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: LIST
7711: PPUSH
7712: CALL_OW 98
7716: ST_TO_ADDR
// if dec1 = 1 then
7717: LD_VAR 0 3
7721: PUSH
7722: LD_INT 1
7724: EQUAL
7725: IFFALSE 7759
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7727: LD_EXP 1
7731: PPUSH
7732: LD_STRING D3Ka-JMM-1
7734: PPUSH
7735: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7739: LD_EXP 24
7743: PPUSH
7744: LD_STRING D3Ka-Kurt-1
7746: PPUSH
7747: CALL_OW 88
// warWithLegion = 1 ;
7751: LD_ADDR_EXP 30
7755: PUSH
7756: LD_INT 1
7758: ST_TO_ADDR
// end ; if dec1 = 2 then
7759: LD_VAR 0 3
7763: PUSH
7764: LD_INT 2
7766: EQUAL
7767: IFFALSE 7851
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7769: LD_EXP 1
7773: PPUSH
7774: LD_STRING D3Kb-JMM-1
7776: PPUSH
7777: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7781: LD_EXP 24
7785: PPUSH
7786: LD_STRING D3Kb-Kurt-1
7788: PPUSH
7789: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7793: LD_ADDR_VAR 0 11
7797: PUSH
7798: LD_INT 120
7800: PUSH
7801: LD_INT 60
7803: PUSH
7804: EMPTY
7805: LIST
7806: LIST
7807: PUSH
7808: LD_EXP 26
7812: PUSH
7813: LD_INT 1
7815: PLUS
7816: ARRAY
7817: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7818: LD_ADDR_VAR 0 12
7822: PUSH
7823: LD_INT 120
7825: PUSH
7826: LD_INT 60
7828: PUSH
7829: EMPTY
7830: LIST
7831: LIST
7832: PUSH
7833: LD_EXP 26
7837: PUSH
7838: LD_INT 1
7840: PLUS
7841: ARRAY
7842: ST_TO_ADDR
// payForNeutral := true ;
7843: LD_ADDR_VAR 0 13
7847: PUSH
7848: LD_INT 1
7850: ST_TO_ADDR
// end ; if dec1 = 3 then
7851: LD_VAR 0 3
7855: PUSH
7856: LD_INT 3
7858: EQUAL
7859: IFFALSE 8094
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7861: LD_EXP 1
7865: PPUSH
7866: LD_STRING D3Kc1-JMM-1
7868: PPUSH
7869: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7873: LD_EXP 24
7877: PPUSH
7878: LD_STRING D3Kc1-Kurt-1
7880: PPUSH
7881: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7885: LD_EXP 1
7889: PPUSH
7890: LD_STRING D3Kc1-JMM-2
7892: PPUSH
7893: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7897: LD_EXP 24
7901: PPUSH
7902: LD_STRING D3Kc1-Kurt-2
7904: PPUSH
7905: CALL_OW 88
// askSiberite = 1 ;
7909: LD_ADDR_EXP 32
7913: PUSH
7914: LD_INT 1
7916: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7917: LD_ADDR_VAR 0 4
7921: PUSH
7922: LD_STRING Q2b
7924: PPUSH
7925: LD_INT 1
7927: PUSH
7928: LD_INT 2
7930: PUSH
7931: LD_INT 3
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: LIST
7938: PPUSH
7939: CALL_OW 98
7943: ST_TO_ADDR
// if dec2 = 1 then
7944: LD_VAR 0 4
7948: PUSH
7949: LD_INT 1
7951: EQUAL
7952: IFFALSE 7986
// begin Say ( JMM , D4a-JMM-1 ) ;
7954: LD_EXP 1
7958: PPUSH
7959: LD_STRING D4a-JMM-1
7961: PPUSH
7962: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7966: LD_EXP 24
7970: PPUSH
7971: LD_STRING D4b-Kurt-1
7973: PPUSH
7974: CALL_OW 88
// warWithLegion = 1 ;
7978: LD_ADDR_EXP 30
7982: PUSH
7983: LD_INT 1
7985: ST_TO_ADDR
// end ; if dec2 = 2 then
7986: LD_VAR 0 4
7990: PUSH
7991: LD_INT 2
7993: EQUAL
7994: IFFALSE 8028
// begin Say ( JMM , D4b-JMM-1 ) ;
7996: LD_EXP 1
8000: PPUSH
8001: LD_STRING D4b-JMM-1
8003: PPUSH
8004: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8008: LD_EXP 24
8012: PPUSH
8013: LD_STRING D4b-Kurt-1
8015: PPUSH
8016: CALL_OW 88
// warWithLegion = 1 ;
8020: LD_ADDR_EXP 30
8024: PUSH
8025: LD_INT 1
8027: ST_TO_ADDR
// end ; if dec2 = 3 then
8028: LD_VAR 0 4
8032: PUSH
8033: LD_INT 3
8035: EQUAL
8036: IFFALSE 8094
// begin Say ( JMM , D4c-JMM-1 ) ;
8038: LD_EXP 1
8042: PPUSH
8043: LD_STRING D4c-JMM-1
8045: PPUSH
8046: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8050: LD_EXP 24
8054: PPUSH
8055: LD_STRING D4c-Kurt-1
8057: PPUSH
8058: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8062: LD_EXP 1
8066: PPUSH
8067: LD_STRING D4c-JMM-2
8069: PPUSH
8070: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8074: LD_EXP 24
8078: PPUSH
8079: LD_STRING D4c-Kurt-2
8081: PPUSH
8082: CALL_OW 88
// fakeInfo = 1 ;
8086: LD_ADDR_EXP 31
8090: PUSH
8091: LD_INT 1
8093: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
8094: LD_VAR 0 3
8098: PUSH
8099: LD_INT 4
8101: EQUAL
8102: IFFALSE 9177
// begin Say ( JMM , D3Kd-JMM-1 ) ;
8104: LD_EXP 1
8108: PPUSH
8109: LD_STRING D3Kd-JMM-1
8111: PPUSH
8112: CALL_OW 88
// if crates >= [ 200 , 120 ] [ KurtStatus + 1 ] and siberite >= [ 200 , 120 ] [ KurtStatus + 1 ] then
8116: LD_VAR 0 8
8120: PUSH
8121: LD_INT 200
8123: PUSH
8124: LD_INT 120
8126: PUSH
8127: EMPTY
8128: LIST
8129: LIST
8130: PUSH
8131: LD_EXP 26
8135: PUSH
8136: LD_INT 1
8138: PLUS
8139: ARRAY
8140: GREATEREQUAL
8141: PUSH
8142: LD_VAR 0 10
8146: PUSH
8147: LD_INT 200
8149: PUSH
8150: LD_INT 120
8152: PUSH
8153: EMPTY
8154: LIST
8155: LIST
8156: PUSH
8157: LD_EXP 26
8161: PUSH
8162: LD_INT 1
8164: PLUS
8165: ARRAY
8166: GREATEREQUAL
8167: AND
8168: IFFALSE 8220
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8170: LD_ADDR_VAR 0 4
8174: PUSH
8175: LD_STRING Q2a
8177: PUSH
8178: LD_STRING Q2aK
8180: PUSH
8181: EMPTY
8182: LIST
8183: LIST
8184: PUSH
8185: LD_EXP 26
8189: PUSH
8190: LD_INT 1
8192: PLUS
8193: ARRAY
8194: PPUSH
8195: LD_INT 1
8197: PUSH
8198: LD_INT 2
8200: PUSH
8201: LD_INT 3
8203: PUSH
8204: LD_INT 4
8206: PUSH
8207: EMPTY
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: PPUSH
8213: CALL_OW 98
8217: ST_TO_ADDR
8218: GO 8397
// if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
8220: LD_VAR 0 8
8224: PUSH
8225: LD_INT 120
8227: PUSH
8228: LD_INT 60
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: PUSH
8235: LD_EXP 26
8239: PUSH
8240: LD_INT 1
8242: PLUS
8243: ARRAY
8244: GREATEREQUAL
8245: PUSH
8246: LD_VAR 0 10
8250: PUSH
8251: LD_INT 120
8253: PUSH
8254: LD_INT 60
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: PUSH
8261: LD_EXP 26
8265: PUSH
8266: LD_INT 1
8268: PLUS
8269: ARRAY
8270: GREATEREQUAL
8271: AND
8272: IFFALSE 8320
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 4 ] ) else
8274: LD_ADDR_VAR 0 4
8278: PUSH
8279: LD_STRING Q2a
8281: PUSH
8282: LD_STRING Q2aK
8284: PUSH
8285: EMPTY
8286: LIST
8287: LIST
8288: PUSH
8289: LD_EXP 26
8293: PUSH
8294: LD_INT 1
8296: PLUS
8297: ARRAY
8298: PPUSH
8299: LD_INT 1
8301: PUSH
8302: LD_INT 2
8304: PUSH
8305: LD_INT 4
8307: PUSH
8308: EMPTY
8309: LIST
8310: LIST
8311: LIST
8312: PPUSH
8313: CALL_OW 98
8317: ST_TO_ADDR
8318: GO 8397
// begin case Query ( [ Q2d , Q2dK ] [ KurtStatus + 1 ] ) of 1 :
8320: LD_STRING Q2d
8322: PUSH
8323: LD_STRING Q2dK
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PUSH
8330: LD_EXP 26
8334: PUSH
8335: LD_INT 1
8337: PLUS
8338: ARRAY
8339: PPUSH
8340: CALL_OW 97
8344: PUSH
8345: LD_INT 1
8347: DOUBLE
8348: EQUAL
8349: IFTRUE 8353
8351: GO 8356
8353: POP
// ; end ;
8354: GO 8357
8356: POP
// dec2 := 0 ;
8357: LD_ADDR_VAR 0 4
8361: PUSH
8362: LD_INT 0
8364: ST_TO_ADDR
// Say ( JMM , D3Kc1-JMM-1 ) ;
8365: LD_EXP 1
8369: PPUSH
8370: LD_STRING D3Kc1-JMM-1
8372: PPUSH
8373: CALL_OW 88
// Say ( Kurt , D3Kc2-Kurt-1 ) ;
8377: LD_EXP 24
8381: PPUSH
8382: LD_STRING D3Kc2-Kurt-1
8384: PPUSH
8385: CALL_OW 88
// warWithLegion := 1 ;
8389: LD_ADDR_EXP 30
8393: PUSH
8394: LD_INT 1
8396: ST_TO_ADDR
// end ; if dec2 = 1 then
8397: LD_VAR 0 4
8401: PUSH
8402: LD_INT 1
8404: EQUAL
8405: IFFALSE 8439
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8407: LD_EXP 1
8411: PPUSH
8412: LD_STRING D5Ka-JMM-1
8414: PPUSH
8415: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
8419: LD_EXP 24
8423: PPUSH
8424: LD_STRING D5Ka-Kurt-1
8426: PPUSH
8427: CALL_OW 88
// warWithLegion = 1 ;
8431: LD_ADDR_EXP 30
8435: PUSH
8436: LD_INT 1
8438: ST_TO_ADDR
// end ; if dec2 = 2 then
8439: LD_VAR 0 4
8443: PUSH
8444: LD_INT 2
8446: EQUAL
8447: IFFALSE 8531
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8449: LD_EXP 1
8453: PPUSH
8454: LD_STRING D3Kb-JMM-1
8456: PPUSH
8457: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8461: LD_EXP 24
8465: PPUSH
8466: LD_STRING D3Kb-Kurt-1
8468: PPUSH
8469: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8473: LD_ADDR_VAR 0 11
8477: PUSH
8478: LD_INT 120
8480: PUSH
8481: LD_INT 60
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: PUSH
8488: LD_EXP 26
8492: PUSH
8493: LD_INT 1
8495: PLUS
8496: ARRAY
8497: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8498: LD_ADDR_VAR 0 12
8502: PUSH
8503: LD_INT 120
8505: PUSH
8506: LD_INT 60
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: PUSH
8513: LD_EXP 26
8517: PUSH
8518: LD_INT 1
8520: PLUS
8521: ARRAY
8522: ST_TO_ADDR
// payForNeutral := true ;
8523: LD_ADDR_VAR 0 13
8527: PUSH
8528: LD_INT 1
8530: ST_TO_ADDR
// end ; if dec2 = 3 then
8531: LD_VAR 0 4
8535: PUSH
8536: LD_INT 3
8538: EQUAL
8539: IFFALSE 8623
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8541: LD_EXP 1
8545: PPUSH
8546: LD_STRING D3Ke-JMM-1
8548: PPUSH
8549: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
8553: LD_EXP 24
8557: PPUSH
8558: LD_STRING D3Ke-Kurt-1
8560: PPUSH
8561: CALL_OW 88
// cr := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8565: LD_ADDR_VAR 0 11
8569: PUSH
8570: LD_INT 200
8572: PUSH
8573: LD_INT 120
8575: PUSH
8576: EMPTY
8577: LIST
8578: LIST
8579: PUSH
8580: LD_EXP 26
8584: PUSH
8585: LD_INT 1
8587: PLUS
8588: ARRAY
8589: ST_TO_ADDR
// sb := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8590: LD_ADDR_VAR 0 12
8594: PUSH
8595: LD_INT 200
8597: PUSH
8598: LD_INT 120
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: PUSH
8605: LD_EXP 26
8609: PUSH
8610: LD_INT 1
8612: PLUS
8613: ARRAY
8614: ST_TO_ADDR
// payForHelp := true ;
8615: LD_ADDR_VAR 0 14
8619: PUSH
8620: LD_INT 1
8622: ST_TO_ADDR
// end ; if dec2 = 4 then
8623: LD_VAR 0 4
8627: PUSH
8628: LD_INT 4
8630: EQUAL
8631: IFFALSE 8866
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8633: LD_EXP 1
8637: PPUSH
8638: LD_STRING D3Kc1-JMM-1
8640: PPUSH
8641: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8645: LD_EXP 24
8649: PPUSH
8650: LD_STRING D3Kc1-Kurt-1
8652: PPUSH
8653: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8657: LD_EXP 1
8661: PPUSH
8662: LD_STRING D3Kc1-JMM-2
8664: PPUSH
8665: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8669: LD_EXP 24
8673: PPUSH
8674: LD_STRING D3Kc1-Kurt-2
8676: PPUSH
8677: CALL_OW 88
// askSiberite = 1 ;
8681: LD_ADDR_EXP 32
8685: PUSH
8686: LD_INT 1
8688: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8689: LD_ADDR_VAR 0 4
8693: PUSH
8694: LD_STRING Q2b
8696: PPUSH
8697: LD_INT 1
8699: PUSH
8700: LD_INT 2
8702: PUSH
8703: LD_INT 3
8705: PUSH
8706: EMPTY
8707: LIST
8708: LIST
8709: LIST
8710: PPUSH
8711: CALL_OW 98
8715: ST_TO_ADDR
// if dec2 = 1 then
8716: LD_VAR 0 4
8720: PUSH
8721: LD_INT 1
8723: EQUAL
8724: IFFALSE 8758
// begin Say ( JMM , D4a-JMM-1 ) ;
8726: LD_EXP 1
8730: PPUSH
8731: LD_STRING D4a-JMM-1
8733: PPUSH
8734: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8738: LD_EXP 24
8742: PPUSH
8743: LD_STRING D4b-Kurt-1
8745: PPUSH
8746: CALL_OW 88
// warWithLegion = 1 ;
8750: LD_ADDR_EXP 30
8754: PUSH
8755: LD_INT 1
8757: ST_TO_ADDR
// end ; if dec2 = 2 then
8758: LD_VAR 0 4
8762: PUSH
8763: LD_INT 2
8765: EQUAL
8766: IFFALSE 8800
// begin Say ( JMM , D4b-JMM-1 ) ;
8768: LD_EXP 1
8772: PPUSH
8773: LD_STRING D4b-JMM-1
8775: PPUSH
8776: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8780: LD_EXP 24
8784: PPUSH
8785: LD_STRING D4b-Kurt-1
8787: PPUSH
8788: CALL_OW 88
// warWithLegion = 1 ;
8792: LD_ADDR_EXP 30
8796: PUSH
8797: LD_INT 1
8799: ST_TO_ADDR
// end ; if dec2 = 3 then
8800: LD_VAR 0 4
8804: PUSH
8805: LD_INT 3
8807: EQUAL
8808: IFFALSE 8866
// begin Say ( JMM , D4c-JMM-1 ) ;
8810: LD_EXP 1
8814: PPUSH
8815: LD_STRING D4c-JMM-1
8817: PPUSH
8818: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8822: LD_EXP 24
8826: PPUSH
8827: LD_STRING D4c-Kurt-1
8829: PPUSH
8830: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8834: LD_EXP 1
8838: PPUSH
8839: LD_STRING D4c-JMM-2
8841: PPUSH
8842: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8846: LD_EXP 24
8850: PPUSH
8851: LD_STRING D4c-Kurt-2
8853: PPUSH
8854: CALL_OW 88
// fakeInfo = 1 ;
8858: LD_ADDR_EXP 31
8862: PUSH
8863: LD_INT 1
8865: ST_TO_ADDR
// end ; end ; if payForNeutral or payForHelp then
8866: LD_VAR 0 13
8870: PUSH
8871: LD_VAR 0 14
8875: OR
8876: IFFALSE 9177
// begin for i in tmp do
8878: LD_ADDR_VAR 0 2
8882: PUSH
8883: LD_VAR 0 5
8887: PUSH
8888: FOR_IN
8889: IFFALSE 9175
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
8891: LD_ADDR_VAR 0 6
8895: PUSH
8896: LD_VAR 0 2
8900: PPUSH
8901: CALL_OW 274
8905: PPUSH
8906: LD_INT 1
8908: PPUSH
8909: CALL_OW 275
8913: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
8914: LD_ADDR_VAR 0 7
8918: PUSH
8919: LD_VAR 0 2
8923: PPUSH
8924: CALL_OW 274
8928: PPUSH
8929: LD_INT 3
8931: PPUSH
8932: CALL_OW 275
8936: ST_TO_ADDR
// if cr then
8937: LD_VAR 0 11
8941: IFFALSE 9055
// begin if tmp2 and tmp2 < cr then
8943: LD_VAR 0 6
8947: PUSH
8948: LD_VAR 0 6
8952: PUSH
8953: LD_VAR 0 11
8957: LESS
8958: AND
8959: IFFALSE 9007
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
8961: LD_VAR 0 2
8965: PPUSH
8966: CALL_OW 274
8970: PPUSH
8971: LD_INT 1
8973: PPUSH
8974: LD_VAR 0 11
8978: PUSH
8979: LD_VAR 0 6
8983: MINUS
8984: PPUSH
8985: CALL_OW 277
// cr := cr - tmp2 ;
8989: LD_ADDR_VAR 0 11
8993: PUSH
8994: LD_VAR 0 11
8998: PUSH
8999: LD_VAR 0 6
9003: MINUS
9004: ST_TO_ADDR
// end else
9005: GO 9055
// if tmp2 > cr then
9007: LD_VAR 0 6
9011: PUSH
9012: LD_VAR 0 11
9016: GREATER
9017: IFFALSE 9055
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
9019: LD_VAR 0 2
9023: PPUSH
9024: CALL_OW 274
9028: PPUSH
9029: LD_INT 1
9031: PPUSH
9032: LD_VAR 0 6
9036: PUSH
9037: LD_VAR 0 11
9041: MINUS
9042: PPUSH
9043: CALL_OW 277
// cr := 0 ;
9047: LD_ADDR_VAR 0 11
9051: PUSH
9052: LD_INT 0
9054: ST_TO_ADDR
// end ; end ; if sb then
9055: LD_VAR 0 12
9059: IFFALSE 9173
// begin if tmp3 and tmp3 < sb then
9061: LD_VAR 0 7
9065: PUSH
9066: LD_VAR 0 7
9070: PUSH
9071: LD_VAR 0 12
9075: LESS
9076: AND
9077: IFFALSE 9125
// begin SetResourceType ( GetBase ( i ) , 3 , sb - tmp3 ) ;
9079: LD_VAR 0 2
9083: PPUSH
9084: CALL_OW 274
9088: PPUSH
9089: LD_INT 3
9091: PPUSH
9092: LD_VAR 0 12
9096: PUSH
9097: LD_VAR 0 7
9101: MINUS
9102: PPUSH
9103: CALL_OW 277
// sb := sb - tmp3 ;
9107: LD_ADDR_VAR 0 12
9111: PUSH
9112: LD_VAR 0 12
9116: PUSH
9117: LD_VAR 0 7
9121: MINUS
9122: ST_TO_ADDR
// end else
9123: GO 9173
// if tmp3 > sb then
9125: LD_VAR 0 7
9129: PUSH
9130: LD_VAR 0 12
9134: GREATER
9135: IFFALSE 9173
// begin SetResourceType ( GetBase ( i ) , 3 , tmp3 - sb ) ;
9137: LD_VAR 0 2
9141: PPUSH
9142: CALL_OW 274
9146: PPUSH
9147: LD_INT 3
9149: PPUSH
9150: LD_VAR 0 7
9154: PUSH
9155: LD_VAR 0 12
9159: MINUS
9160: PPUSH
9161: CALL_OW 277
// sb := 0 ;
9165: LD_ADDR_VAR 0 12
9169: PUSH
9170: LD_INT 0
9172: ST_TO_ADDR
// end ; end ; end ;
9173: GO 8888
9175: POP
9176: POP
// end ; end ; DialogueOff ;
9177: CALL_OW 7
// RemoveSeeing ( 167 , 121 , 1 ) ;
9181: LD_INT 167
9183: PPUSH
9184: LD_INT 121
9186: PPUSH
9187: LD_INT 1
9189: PPUSH
9190: CALL_OW 331
// ComEnterUnit ( Kurt , KurtVeh ) ;
9194: LD_EXP 24
9198: PPUSH
9199: LD_EXP 25
9203: PPUSH
9204: CALL_OW 120
// wait ( 0 0$1 ) ;
9208: LD_INT 35
9210: PPUSH
9211: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9215: LD_EXP 25
9219: PPUSH
9220: LD_INT 4
9222: PPUSH
9223: CALL_OW 113
// wait ( 0 0$3 ) ;
9227: LD_INT 105
9229: PPUSH
9230: CALL_OW 67
// RemoveUnit ( Kurt ) ;
9234: LD_EXP 24
9238: PPUSH
9239: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9243: LD_EXP 25
9247: PPUSH
9248: CALL_OW 64
// wait ( 0 0$3 ) ;
9252: LD_INT 105
9254: PPUSH
9255: CALL_OW 67
// if payForHelp then
9259: LD_VAR 0 14
9263: IFFALSE 9321
// begin HiddenCamera ( 36 , 57 , 1 ) ;
9265: LD_INT 36
9267: PPUSH
9268: LD_INT 57
9270: PPUSH
9271: LD_INT 1
9273: PPUSH
9274: CALL_OW 244
// HiddenCamera ( 51 , 63 , 1 ) ;
9278: LD_INT 51
9280: PPUSH
9281: LD_INT 63
9283: PPUSH
9284: LD_INT 1
9286: PPUSH
9287: CALL_OW 244
// HiddenCamera ( 93 , 65 , 1 ) ;
9291: LD_INT 93
9293: PPUSH
9294: LD_INT 65
9296: PPUSH
9297: LD_INT 1
9299: PPUSH
9300: CALL_OW 244
// HiddenCamera ( 42 , 12 , 1 ) ;
9304: LD_INT 42
9306: PPUSH
9307: LD_INT 12
9309: PPUSH
9310: LD_INT 1
9312: PPUSH
9313: CALL_OW 244
// PrepareLegionForPlayer ;
9317: CALL 4620 0 0
// end ; end ;
9321: LD_VAR 0 1
9325: RET
// every 0 0$10 trigger warWithLegion = 1 do
9326: LD_EXP 30
9330: PUSH
9331: LD_INT 1
9333: EQUAL
9334: IFFALSE 9343
9336: GO 9338
9338: DISABLE
// PrepareAttackLegion ;
9339: CALL 5284 0 0
9343: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 1 ) and not GetCargo ( amCargo1 , 2 ) and not GetCargo ( amCargo1 , 3 ) do
9344: LD_EXP 15
9348: PPUSH
9349: CALL_OW 305
9353: PUSH
9354: LD_EXP 15
9358: PPUSH
9359: LD_INT 1
9361: PPUSH
9362: CALL_OW 289
9366: NOT
9367: AND
9368: PUSH
9369: LD_EXP 15
9373: PPUSH
9374: LD_INT 2
9376: PPUSH
9377: CALL_OW 289
9381: NOT
9382: AND
9383: PUSH
9384: LD_EXP 15
9388: PPUSH
9389: LD_INT 3
9391: PPUSH
9392: CALL_OW 289
9396: NOT
9397: AND
9398: IFFALSE 9415
9400: GO 9402
9402: DISABLE
// SetSide ( amCargo1 , 4 ) ;
9403: LD_EXP 15
9407: PPUSH
9408: LD_INT 4
9410: PPUSH
9411: CALL_OW 235
9415: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 2 ) and not GetCargo ( amCargo2 , 3 ) do
9416: LD_EXP 16
9420: PPUSH
9421: CALL_OW 305
9425: PUSH
9426: LD_EXP 16
9430: PPUSH
9431: LD_INT 1
9433: PPUSH
9434: CALL_OW 289
9438: NOT
9439: AND
9440: PUSH
9441: LD_EXP 16
9445: PPUSH
9446: LD_INT 2
9448: PPUSH
9449: CALL_OW 289
9453: NOT
9454: AND
9455: PUSH
9456: LD_EXP 16
9460: PPUSH
9461: LD_INT 3
9463: PPUSH
9464: CALL_OW 289
9468: NOT
9469: AND
9470: IFFALSE 9487
9472: GO 9474
9474: DISABLE
// SetSide ( amCargo2 , 4 ) ;
9475: LD_EXP 16
9479: PPUSH
9480: LD_INT 4
9482: PPUSH
9483: CALL_OW 235
9487: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo3 , 1 ) and not GetCargo ( amCargo3 , 2 ) and not GetCargo ( amCargo3 , 3 ) do
9488: LD_EXP 17
9492: PPUSH
9493: CALL_OW 305
9497: PUSH
9498: LD_EXP 17
9502: PPUSH
9503: LD_INT 1
9505: PPUSH
9506: CALL_OW 289
9510: NOT
9511: AND
9512: PUSH
9513: LD_EXP 17
9517: PPUSH
9518: LD_INT 2
9520: PPUSH
9521: CALL_OW 289
9525: NOT
9526: AND
9527: PUSH
9528: LD_EXP 17
9532: PPUSH
9533: LD_INT 3
9535: PPUSH
9536: CALL_OW 289
9540: NOT
9541: AND
9542: IFFALSE 9559
9544: GO 9546
9546: DISABLE
// SetSide ( amCargo3 , 4 ) ;
9547: LD_EXP 17
9551: PPUSH
9552: LD_INT 4
9554: PPUSH
9555: CALL_OW 235
9559: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo4 , 1 ) and not GetCargo ( amCargo4 , 2 ) and not GetCargo ( amCargo4 , 3 ) do
9560: LD_EXP 18
9564: PPUSH
9565: CALL_OW 305
9569: PUSH
9570: LD_EXP 18
9574: PPUSH
9575: LD_INT 1
9577: PPUSH
9578: CALL_OW 289
9582: NOT
9583: AND
9584: PUSH
9585: LD_EXP 18
9589: PPUSH
9590: LD_INT 2
9592: PPUSH
9593: CALL_OW 289
9597: NOT
9598: AND
9599: PUSH
9600: LD_EXP 18
9604: PPUSH
9605: LD_INT 3
9607: PPUSH
9608: CALL_OW 289
9612: NOT
9613: AND
9614: IFFALSE 9631
9616: GO 9618
9618: DISABLE
// SetSide ( amCargo4 , 4 ) ;
9619: LD_EXP 18
9623: PPUSH
9624: LD_INT 4
9626: PPUSH
9627: CALL_OW 235
9631: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) and not GetCargo ( amCargo5 , 3 ) and not GetCargo ( amCargo5 , 2 ) do
9632: LD_EXP 19
9636: PPUSH
9637: CALL_OW 305
9641: PUSH
9642: LD_EXP 19
9646: PPUSH
9647: LD_INT 1
9649: PPUSH
9650: CALL_OW 289
9654: NOT
9655: AND
9656: PUSH
9657: LD_EXP 19
9661: PPUSH
9662: LD_INT 2
9664: PPUSH
9665: CALL_OW 289
9669: NOT
9670: AND
9671: PUSH
9672: LD_EXP 19
9676: PPUSH
9677: LD_INT 3
9679: PPUSH
9680: CALL_OW 289
9684: NOT
9685: AND
9686: PUSH
9687: LD_EXP 19
9691: PPUSH
9692: LD_INT 2
9694: PPUSH
9695: CALL_OW 289
9699: NOT
9700: AND
9701: IFFALSE 9718
9703: GO 9705
9705: DISABLE
// SetSide ( amCargo5 , 4 ) ;
9706: LD_EXP 19
9710: PPUSH
9711: LD_INT 4
9713: PPUSH
9714: CALL_OW 235
9718: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 1 ) and not GetCargo ( amCargo6 , 2 ) and not GetCargo ( amCargo6 , 3 ) do
9719: LD_EXP 20
9723: PPUSH
9724: CALL_OW 305
9728: PUSH
9729: LD_EXP 20
9733: PPUSH
9734: LD_INT 1
9736: PPUSH
9737: CALL_OW 289
9741: NOT
9742: AND
9743: PUSH
9744: LD_EXP 20
9748: PPUSH
9749: LD_INT 2
9751: PPUSH
9752: CALL_OW 289
9756: NOT
9757: AND
9758: PUSH
9759: LD_EXP 20
9763: PPUSH
9764: LD_INT 3
9766: PPUSH
9767: CALL_OW 289
9771: NOT
9772: AND
9773: IFFALSE 9790
9775: GO 9777
9777: DISABLE
// SetSide ( amCargo6 , 4 ) ;
9778: LD_EXP 20
9782: PPUSH
9783: LD_INT 4
9785: PPUSH
9786: CALL_OW 235
9790: END
// every 0 0$1 trigger IsPlaced ( amCargo7 ) and not GetCargo ( amCargo7 , 1 ) and not GetCargo ( amCargo7 , 2 ) and not GetCargo ( amCargo7 , 3 ) do
9791: LD_EXP 21
9795: PPUSH
9796: CALL_OW 305
9800: PUSH
9801: LD_EXP 21
9805: PPUSH
9806: LD_INT 1
9808: PPUSH
9809: CALL_OW 289
9813: NOT
9814: AND
9815: PUSH
9816: LD_EXP 21
9820: PPUSH
9821: LD_INT 2
9823: PPUSH
9824: CALL_OW 289
9828: NOT
9829: AND
9830: PUSH
9831: LD_EXP 21
9835: PPUSH
9836: LD_INT 3
9838: PPUSH
9839: CALL_OW 289
9843: NOT
9844: AND
9845: IFFALSE 9862
9847: GO 9849
9849: DISABLE
// SetSide ( amCargo7 , 4 ) ;
9850: LD_EXP 21
9854: PPUSH
9855: LD_INT 4
9857: PPUSH
9858: CALL_OW 235
9862: END
// every 0 0$1 do var i ;
9863: GO 9865
9865: DISABLE
9866: LD_INT 0
9868: PPUSH
// begin enable ;
9869: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
9870: LD_ADDR_VAR 0 1
9874: PUSH
9875: LD_INT 22
9877: PUSH
9878: LD_INT 4
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: PPUSH
9885: CALL_OW 69
9889: PUSH
9890: FOR_IN
9891: IFFALSE 9930
// begin ComMoveToArea ( i , PlayerSpawn ) ;
9893: LD_VAR 0 1
9897: PPUSH
9898: LD_INT 4
9900: PPUSH
9901: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
9905: LD_VAR 0 1
9909: PPUSH
9910: LD_INT 4
9912: PPUSH
9913: CALL_OW 308
9917: IFFALSE 9928
// RemoveUnit ( i ) ;
9919: LD_VAR 0 1
9923: PPUSH
9924: CALL_OW 64
// end ;
9928: GO 9890
9930: POP
9931: POP
// end ;
9932: PPOPN 1
9934: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
9935: LD_EXP 27
9939: PUSH
9940: LD_INT 1
9942: EQUAL
9943: IFFALSE 10382
9945: GO 9947
9947: DISABLE
9948: LD_INT 0
9950: PPUSH
9951: PPUSH
9952: PPUSH
// begin enable ;
9953: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9954: LD_ADDR_VAR 0 2
9958: PUSH
9959: LD_INT 12
9961: PPUSH
9962: LD_INT 22
9964: PUSH
9965: LD_INT 3
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: PUSH
9972: LD_INT 21
9974: PUSH
9975: LD_INT 2
9977: PUSH
9978: EMPTY
9979: LIST
9980: LIST
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: PPUSH
9986: CALL_OW 70
9990: ST_TO_ADDR
// for i in enemyVehs do
9991: LD_ADDR_VAR 0 1
9995: PUSH
9996: LD_VAR 0 2
10000: PUSH
10001: FOR_IN
10002: IFFALSE 10380
// begin if See ( 1 , i ) then
10004: LD_INT 1
10006: PPUSH
10007: LD_VAR 0 1
10011: PPUSH
10012: CALL_OW 292
10016: IFFALSE 10378
// begin disable ;
10018: DISABLE
// DialogueOn ;
10019: CALL_OW 6
// CenterNowOnUnits ( i ) ;
10023: LD_VAR 0 1
10027: PPUSH
10028: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10032: LD_INT 22
10034: PUSH
10035: LD_INT 1
10037: PUSH
10038: EMPTY
10039: LIST
10040: LIST
10041: PUSH
10042: LD_INT 26
10044: PUSH
10045: LD_INT 1
10047: PUSH
10048: EMPTY
10049: LIST
10050: LIST
10051: PUSH
10052: LD_INT 2
10054: PUSH
10055: LD_INT 25
10057: PUSH
10058: LD_INT 1
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: PUSH
10065: LD_INT 25
10067: PUSH
10068: LD_INT 2
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: PUSH
10075: LD_INT 25
10077: PUSH
10078: LD_INT 3
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: PUSH
10085: LD_INT 25
10087: PUSH
10088: LD_INT 4
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: PUSH
10095: LD_INT 25
10097: PUSH
10098: LD_INT 5
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: PUSH
10105: LD_INT 25
10107: PUSH
10108: LD_INT 8
10110: PUSH
10111: EMPTY
10112: LIST
10113: LIST
10114: PUSH
10115: EMPTY
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: LIST
10128: PPUSH
10129: CALL_OW 69
10133: PPUSH
10134: LD_STRING DT1-Sol1-1
10136: PPUSH
10137: LD_STRING DT1-FSol1-1
10139: PPUSH
10140: CALL 12340 0 3
// dec = ShowQuery2 ;
10144: LD_ADDR_VAR 0 3
10148: PUSH
10149: CALL 12824 0 0
10153: ST_TO_ADDR
// if dec = 1 then
10154: LD_VAR 0 3
10158: PUSH
10159: LD_INT 1
10161: EQUAL
10162: IFFALSE 10268
// begin Say ( JMM , D2-JMM-1 ) ;
10164: LD_EXP 1
10168: PPUSH
10169: LD_STRING D2-JMM-1
10171: PPUSH
10172: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10176: LD_EXP 22
10180: PPUSH
10181: LD_STRING D2-Pow-1
10183: PPUSH
10184: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
10188: LD_EXP 1
10192: PPUSH
10193: LD_STRING D2a-JMM-1
10195: PPUSH
10196: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
10200: LD_EXP 22
10204: PPUSH
10205: LD_STRING D2a-Pow-1
10207: PPUSH
10208: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
10212: LD_EXP 1
10216: PPUSH
10217: LD_STRING D2a-JMM-2
10219: PPUSH
10220: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10224: LD_EXP 22
10228: PPUSH
10229: LD_STRING D2a-Pow-2
10231: PPUSH
10232: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10236: LD_EXP 1
10240: PPUSH
10241: LD_STRING D2a-JMM-3
10243: PPUSH
10244: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10248: LD_EXP 22
10252: PPUSH
10253: LD_STRING D2a-Pow-3
10255: PPUSH
10256: CALL_OW 94
// secondPass = 2 ;
10260: LD_ADDR_EXP 27
10264: PUSH
10265: LD_INT 2
10267: ST_TO_ADDR
// end ; if dec = 2 then
10268: LD_VAR 0 3
10272: PUSH
10273: LD_INT 2
10275: EQUAL
10276: IFFALSE 10370
// begin Say ( JMM , D2-JMM-1 ) ;
10278: LD_EXP 1
10282: PPUSH
10283: LD_STRING D2-JMM-1
10285: PPUSH
10286: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10290: LD_EXP 22
10294: PPUSH
10295: LD_STRING D2-Pow-1
10297: PPUSH
10298: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
10302: LD_EXP 1
10306: PPUSH
10307: LD_STRING D2b-JMM-1
10309: PPUSH
10310: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
10314: LD_EXP 22
10318: PPUSH
10319: LD_STRING D2b-Pow-1
10321: PPUSH
10322: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10326: LD_EXP 1
10330: PPUSH
10331: LD_STRING D2c-JMM-1
10333: PPUSH
10334: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10338: LD_EXP 22
10342: PPUSH
10343: LD_STRING D2c-Pow-1
10345: PPUSH
10346: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10350: LD_EXP 1
10354: PPUSH
10355: LD_STRING D2c-JMM-2
10357: PPUSH
10358: CALL_OW 88
// secondPass = 2 ;
10362: LD_ADDR_EXP 27
10366: PUSH
10367: LD_INT 2
10369: ST_TO_ADDR
// end ; DialogueOff ;
10370: CALL_OW 7
// exit ;
10374: POP
10375: POP
10376: GO 10382
// end ; end ;
10378: GO 10001
10380: POP
10381: POP
// end ;
10382: PPOPN 3
10384: END
// every 0 0$1 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) do var vehicles ;
10385: LD_EXP 28
10389: PUSH
10390: LD_INT 1
10392: EQUAL
10393: PUSH
10394: LD_INT 11
10396: PPUSH
10397: LD_INT 22
10399: PUSH
10400: LD_INT 3
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PPUSH
10407: CALL_OW 70
10411: AND
10412: IFFALSE 10640
10414: GO 10416
10416: DISABLE
10417: LD_INT 0
10419: PPUSH
// begin vehicles := FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
10420: LD_ADDR_VAR 0 1
10424: PUSH
10425: LD_INT 11
10427: PPUSH
10428: LD_INT 22
10430: PUSH
10431: LD_INT 3
10433: PUSH
10434: EMPTY
10435: LIST
10436: LIST
10437: PPUSH
10438: CALL_OW 70
10442: ST_TO_ADDR
// if not vehicles then
10443: LD_VAR 0 1
10447: NOT
10448: IFFALSE 10452
// exit ;
10450: GO 10640
// repeat wait ( 0 0$1 ) ;
10452: LD_INT 35
10454: PPUSH
10455: CALL_OW 67
// until UnitFilter ( vehicles , [ f_see , 1 ] ) ;
10459: LD_VAR 0 1
10463: PPUSH
10464: LD_INT 101
10466: PUSH
10467: LD_INT 1
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: PPUSH
10474: CALL_OW 72
10478: IFFALSE 10452
// CenterNowOnUnits ( UnitFilter ( vehicles , [ f_see , 1 ] ) [ 1 ] ) ;
10480: LD_VAR 0 1
10484: PPUSH
10485: LD_INT 101
10487: PUSH
10488: LD_INT 1
10490: PUSH
10491: EMPTY
10492: LIST
10493: LIST
10494: PPUSH
10495: CALL_OW 72
10499: PUSH
10500: LD_INT 1
10502: ARRAY
10503: PPUSH
10504: CALL_OW 87
// DialogueOn ;
10508: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10512: LD_INT 22
10514: PUSH
10515: LD_INT 1
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: PUSH
10522: LD_INT 26
10524: PUSH
10525: LD_INT 1
10527: PUSH
10528: EMPTY
10529: LIST
10530: LIST
10531: PUSH
10532: LD_INT 2
10534: PUSH
10535: LD_INT 25
10537: PUSH
10538: LD_INT 1
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: PUSH
10545: LD_INT 25
10547: PUSH
10548: LD_INT 2
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: PUSH
10555: LD_INT 25
10557: PUSH
10558: LD_INT 3
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: PUSH
10565: LD_INT 25
10567: PUSH
10568: LD_INT 4
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: PUSH
10575: LD_INT 25
10577: PUSH
10578: LD_INT 5
10580: PUSH
10581: EMPTY
10582: LIST
10583: LIST
10584: PUSH
10585: LD_INT 25
10587: PUSH
10588: LD_INT 8
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: PUSH
10604: EMPTY
10605: LIST
10606: LIST
10607: LIST
10608: PPUSH
10609: CALL_OW 69
10613: PPUSH
10614: LD_STRING DT1-Sol1-1
10616: PPUSH
10617: LD_STRING DT1-FSol1-1
10619: PPUSH
10620: CALL 12340 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10624: LD_EXP 1
10628: PPUSH
10629: LD_STRING DT1-JMM-1
10631: PPUSH
10632: CALL_OW 88
// DialogueOff ;
10636: CALL_OW 7
// end ;
10640: PPOPN 1
10642: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter do
10643: LD_EXP 28
10647: PUSH
10648: LD_INT 1
10650: EQUAL
10651: PUSH
10652: LD_INT 11
10654: PPUSH
10655: LD_INT 22
10657: PUSH
10658: LD_INT 3
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: PUSH
10665: LD_INT 50
10667: PUSH
10668: EMPTY
10669: LIST
10670: PUSH
10671: LD_INT 2
10673: PUSH
10674: LD_INT 21
10676: PUSH
10677: LD_INT 2
10679: PUSH
10680: EMPTY
10681: LIST
10682: LIST
10683: PUSH
10684: LD_INT 21
10686: PUSH
10687: LD_INT 1
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: LIST
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: LIST
10703: PPUSH
10704: CALL_OW 70
10708: PUSH
10709: LD_INT 0
10711: EQUAL
10712: AND
10713: PUSH
10714: LD_EXP 29
10718: AND
10719: IFFALSE 10876
10721: GO 10723
10723: DISABLE
// begin vehicleTeleported = 2 ;
10724: LD_ADDR_EXP 28
10728: PUSH
10729: LD_INT 2
10731: ST_TO_ADDR
// DialogueOn ;
10732: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
10736: LD_EXP 1
10740: PPUSH
10741: LD_STRING DT1a-JMM-1
10743: PPUSH
10744: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
10748: LD_INT 22
10750: PUSH
10751: LD_INT 1
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: PUSH
10758: LD_INT 26
10760: PUSH
10761: LD_INT 1
10763: PUSH
10764: EMPTY
10765: LIST
10766: LIST
10767: PUSH
10768: LD_INT 2
10770: PUSH
10771: LD_INT 25
10773: PUSH
10774: LD_INT 1
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PUSH
10781: LD_INT 25
10783: PUSH
10784: LD_INT 2
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: LD_INT 25
10793: PUSH
10794: LD_INT 3
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: PUSH
10801: LD_INT 25
10803: PUSH
10804: LD_INT 4
10806: PUSH
10807: EMPTY
10808: LIST
10809: LIST
10810: PUSH
10811: LD_INT 25
10813: PUSH
10814: LD_INT 5
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PUSH
10821: LD_INT 25
10823: PUSH
10824: LD_INT 8
10826: PUSH
10827: EMPTY
10828: LIST
10829: LIST
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: LIST
10844: PPUSH
10845: CALL_OW 69
10849: PPUSH
10850: LD_STRING DT1a-Sol1-1
10852: PPUSH
10853: LD_STRING DT1a-FSol1-1
10855: PPUSH
10856: CALL 12340 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
10860: LD_EXP 1
10864: PPUSH
10865: LD_STRING DT1a-JMM-2
10867: PPUSH
10868: CALL_OW 88
// DialogueOff ;
10872: CALL_OW 7
// end ;
10876: END
// every 0 0$2 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] ] ) do var i , vehicles , speaker ;
10877: LD_EXP 28
10881: PUSH
10882: LD_INT 3
10884: EQUAL
10885: PUSH
10886: LD_INT 11
10888: PPUSH
10889: LD_INT 22
10891: PUSH
10892: LD_INT 3
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: PUSH
10899: LD_INT 101
10901: PUSH
10902: LD_INT 1
10904: PUSH
10905: EMPTY
10906: LIST
10907: LIST
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: PPUSH
10913: CALL_OW 70
10917: AND
10918: IFFALSE 11192
10920: GO 10922
10922: DISABLE
10923: LD_INT 0
10925: PPUSH
10926: PPUSH
10927: PPUSH
// begin wait ( 0 0$0.3 ) ;
10928: LD_INT 10
10930: PPUSH
10931: CALL_OW 67
// DialogueOn ;
10935: CALL_OW 6
// speaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
10939: LD_ADDR_VAR 0 3
10943: PUSH
10944: LD_INT 22
10946: PUSH
10947: LD_INT 1
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: PUSH
10954: LD_INT 26
10956: PUSH
10957: LD_INT 1
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: PUSH
10964: LD_INT 2
10966: PUSH
10967: LD_INT 25
10969: PUSH
10970: LD_INT 1
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: PUSH
10977: LD_INT 25
10979: PUSH
10980: LD_INT 2
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: PUSH
10987: LD_INT 25
10989: PUSH
10990: LD_INT 3
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: PUSH
10997: LD_INT 25
10999: PUSH
11000: LD_INT 4
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: PUSH
11007: LD_INT 25
11009: PUSH
11010: LD_INT 5
11012: PUSH
11013: EMPTY
11014: LIST
11015: LIST
11016: PUSH
11017: LD_INT 25
11019: PUSH
11020: LD_INT 8
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: PUSH
11036: EMPTY
11037: LIST
11038: LIST
11039: LIST
11040: PPUSH
11041: CALL_OW 69
11045: PPUSH
11046: LD_STRING DT2-Sol1-1
11048: PPUSH
11049: LD_STRING DT2-FSol1-1
11051: PPUSH
11052: CALL 12340 0 3
11056: ST_TO_ADDR
// DialogueOff ;
11057: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
11061: LD_INT 35
11063: PPUSH
11064: CALL_OW 67
// until not FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] ] ) ;
11068: LD_INT 11
11070: PPUSH
11071: LD_INT 22
11073: PUSH
11074: LD_INT 3
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: PUSH
11081: LD_INT 50
11083: PUSH
11084: EMPTY
11085: LIST
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: PPUSH
11091: CALL_OW 70
11095: NOT
11096: IFFALSE 11061
// wait ( 0 0$2 ) ;
11098: LD_INT 70
11100: PPUSH
11101: CALL_OW 67
// vehicleTeleported = 4 ;
11105: LD_ADDR_EXP 28
11109: PUSH
11110: LD_INT 4
11112: ST_TO_ADDR
// DialogueOn ;
11113: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
11117: LD_EXP 1
11121: PPUSH
11122: LD_STRING DT2a-JMM-1
11124: PPUSH
11125: CALL_OW 88
// if speaker then
11129: LD_VAR 0 3
11133: IFFALSE 11176
// if GetSex ( speaker ) = 1 then
11135: LD_VAR 0 3
11139: PPUSH
11140: CALL_OW 258
11144: PUSH
11145: LD_INT 1
11147: EQUAL
11148: IFFALSE 11164
// Say ( speaker , DT2a-Sol1-1 ) else
11150: LD_VAR 0 3
11154: PPUSH
11155: LD_STRING DT2a-Sol1-1
11157: PPUSH
11158: CALL_OW 88
11162: GO 11176
// Say ( speaker , DT2a-FSol1-1 ) ;
11164: LD_VAR 0 3
11168: PPUSH
11169: LD_STRING DT2a-FSol1-1
11171: PPUSH
11172: CALL_OW 88
// Say ( Donaldson , DT2a-Don-1 ) ;
11176: LD_EXP 3
11180: PPUSH
11181: LD_STRING DT2a-Don-1
11183: PPUSH
11184: CALL_OW 88
// DialogueOff ;
11188: CALL_OW 7
// end ;
11192: PPOPN 3
11194: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
11195: LD_INT 1
11197: PPUSH
11198: LD_INT 45
11200: PPUSH
11201: LD_INT 74
11203: PPUSH
11204: CALL_OW 293
11208: IFFALSE 11372
11210: GO 11212
11212: DISABLE
// begin DialogueOn ;
11213: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
11217: LD_INT 36
11219: PPUSH
11220: LD_INT 55
11222: PPUSH
11223: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
11227: LD_INT 22
11229: PUSH
11230: LD_INT 1
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: PUSH
11237: LD_INT 26
11239: PUSH
11240: LD_INT 1
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: PUSH
11247: LD_INT 2
11249: PUSH
11250: LD_INT 25
11252: PUSH
11253: LD_INT 1
11255: PUSH
11256: EMPTY
11257: LIST
11258: LIST
11259: PUSH
11260: LD_INT 25
11262: PUSH
11263: LD_INT 2
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: PUSH
11270: LD_INT 25
11272: PUSH
11273: LD_INT 3
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: PUSH
11280: LD_INT 25
11282: PUSH
11283: LD_INT 4
11285: PUSH
11286: EMPTY
11287: LIST
11288: LIST
11289: PUSH
11290: LD_INT 25
11292: PUSH
11293: LD_INT 5
11295: PUSH
11296: EMPTY
11297: LIST
11298: LIST
11299: PUSH
11300: LD_INT 25
11302: PUSH
11303: LD_INT 8
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: PUSH
11319: EMPTY
11320: LIST
11321: LIST
11322: LIST
11323: PPUSH
11324: CALL_OW 69
11328: PPUSH
11329: LD_STRING D5-Sol1-1
11331: PPUSH
11332: LD_STRING D5-FSol1-
11334: PPUSH
11335: CALL 12340 0 3
// if warWithLegion and IsOk ( Donaldson ) then
11339: LD_EXP 30
11343: PUSH
11344: LD_EXP 3
11348: PPUSH
11349: CALL_OW 302
11353: AND
11354: IFFALSE 11368
// Say ( Donaldson , D5-Don-1 ) ;
11356: LD_EXP 3
11360: PPUSH
11361: LD_STRING D5-Don-1
11363: PPUSH
11364: CALL_OW 88
// DialogueOff ;
11368: CALL_OW 7
// end ;
11372: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
11373: LD_INT 1
11375: PPUSH
11376: LD_INT 10
11378: PPUSH
11379: CALL_OW 292
11383: PUSH
11384: LD_INT 1
11386: PPUSH
11387: LD_INT 137
11389: PPUSH
11390: CALL_OW 292
11394: OR
11395: IFFALSE 11539
11397: GO 11399
11399: DISABLE
// begin DialogueOn ;
11400: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
11404: LD_INT 22
11406: PUSH
11407: LD_INT 1
11409: PUSH
11410: EMPTY
11411: LIST
11412: LIST
11413: PUSH
11414: LD_INT 26
11416: PUSH
11417: LD_INT 1
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: PUSH
11424: LD_INT 2
11426: PUSH
11427: LD_INT 25
11429: PUSH
11430: LD_INT 1
11432: PUSH
11433: EMPTY
11434: LIST
11435: LIST
11436: PUSH
11437: LD_INT 25
11439: PUSH
11440: LD_INT 2
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: PUSH
11447: LD_INT 25
11449: PUSH
11450: LD_INT 3
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: PUSH
11457: LD_INT 25
11459: PUSH
11460: LD_INT 4
11462: PUSH
11463: EMPTY
11464: LIST
11465: LIST
11466: PUSH
11467: LD_INT 25
11469: PUSH
11470: LD_INT 5
11472: PUSH
11473: EMPTY
11474: LIST
11475: LIST
11476: PUSH
11477: LD_INT 25
11479: PUSH
11480: LD_INT 8
11482: PUSH
11483: EMPTY
11484: LIST
11485: LIST
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: LIST
11500: PPUSH
11501: CALL_OW 69
11505: PPUSH
11506: LD_STRING DT3-Sol1-1
11508: PPUSH
11509: LD_STRING DT3-FSol1-1
11511: PPUSH
11512: CALL 12340 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11516: LD_EXP 1
11520: PPUSH
11521: LD_STRING DT3-JMM-1
11523: PPUSH
11524: CALL_OW 88
// DialogueOff ;
11528: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11532: LD_STRING M2
11534: PPUSH
11535: CALL_OW 337
// end ;
11539: END
// every 0 0$1 trigger ruEscape = 0 do var i ;
11540: LD_EXP 42
11544: PUSH
11545: LD_INT 0
11547: EQUAL
11548: IFFALSE 11631
11550: GO 11552
11552: DISABLE
11553: LD_INT 0
11555: PPUSH
// begin enable ;
11556: ENABLE
// for i in FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
11557: LD_ADDR_VAR 0 1
11561: PUSH
11562: LD_INT 10
11564: PPUSH
11565: LD_INT 22
11567: PUSH
11568: LD_INT 3
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: PUSH
11575: LD_INT 21
11577: PUSH
11578: LD_INT 2
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: PUSH
11585: LD_INT 58
11587: PUSH
11588: EMPTY
11589: LIST
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: LIST
11595: PPUSH
11596: CALL_OW 70
11600: PUSH
11601: FOR_IN
11602: IFFALSE 11629
// if GetLives ( i ) < 1000 then
11604: LD_VAR 0 1
11608: PPUSH
11609: CALL_OW 256
11613: PUSH
11614: LD_INT 1000
11616: LESS
11617: IFFALSE 11627
// ruEscape = 1 ;
11619: LD_ADDR_EXP 42
11623: PUSH
11624: LD_INT 1
11626: ST_TO_ADDR
11627: GO 11601
11629: POP
11630: POP
// end ;
11631: PPOPN 1
11633: END
// every 0 0$1 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or FilterUnitsInArea ( EscapeTriggerArea , [ f_side , 1 ] ) > 0 or ruEscape = 1 do var i , j , vehs ;
11634: LD_INT 3
11636: PPUSH
11637: CALL_OW 303
11641: PUSH
11642: LD_INT 4
11644: PPUSH
11645: CALL_OW 303
11649: OR
11650: PUSH
11651: LD_INT 22
11653: PPUSH
11654: LD_INT 22
11656: PUSH
11657: LD_INT 1
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PPUSH
11664: CALL_OW 70
11668: PUSH
11669: LD_INT 0
11671: GREATER
11672: OR
11673: PUSH
11674: LD_EXP 42
11678: PUSH
11679: LD_INT 1
11681: EQUAL
11682: OR
11683: IFFALSE 11914
11685: GO 11687
11687: DISABLE
11688: LD_INT 0
11690: PPUSH
11691: PPUSH
11692: PPUSH
// begin ruAI = 0 ;
11693: LD_ADDR_EXP 41
11697: PUSH
11698: LD_INT 0
11700: ST_TO_ADDR
// vehs = FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11701: LD_ADDR_VAR 0 3
11705: PUSH
11706: LD_INT 10
11708: PPUSH
11709: LD_INT 22
11711: PUSH
11712: LD_INT 3
11714: PUSH
11715: EMPTY
11716: LIST
11717: LIST
11718: PUSH
11719: LD_INT 21
11721: PUSH
11722: LD_INT 2
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: PUSH
11729: LD_INT 58
11731: PUSH
11732: EMPTY
11733: LIST
11734: PUSH
11735: EMPTY
11736: LIST
11737: LIST
11738: LIST
11739: PPUSH
11740: CALL_OW 70
11744: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
11745: LD_EXP 34
11749: PPUSH
11750: CALL_OW 122
// wait ( 0 0$1 ) ;
11754: LD_INT 35
11756: PPUSH
11757: CALL_OW 67
// DialogueOn ;
11761: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
11765: LD_EXP 1
11769: PPUSH
11770: LD_STRING D6-JMM-1
11772: PPUSH
11773: CALL_OW 88
// DialogueOff ;
11777: CALL_OW 7
// if vehs > 0 then
11781: LD_VAR 0 3
11785: PUSH
11786: LD_INT 0
11788: GREATER
11789: IFFALSE 11859
// for i := 1 to RuScientists do
11791: LD_ADDR_VAR 0 1
11795: PUSH
11796: DOUBLE
11797: LD_INT 1
11799: DEC
11800: ST_TO_ADDR
11801: LD_EXP 34
11805: PUSH
11806: FOR_TO
11807: IFFALSE 11855
// ComEnterUnit ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , vehs [ i ] ) else
11809: LD_EXP 34
11813: PUSH
11814: LD_VAR 0 1
11818: ARRAY
11819: PPUSH
11820: LD_INT 3
11822: PUSH
11823: LD_INT 60
11825: PUSH
11826: EMPTY
11827: LIST
11828: PUSH
11829: EMPTY
11830: LIST
11831: LIST
11832: PPUSH
11833: CALL_OW 72
11837: PPUSH
11838: LD_VAR 0 3
11842: PUSH
11843: LD_VAR 0 1
11847: ARRAY
11848: PPUSH
11849: CALL_OW 120
11853: GO 11806
11855: POP
11856: POP
11857: GO 11914
// ComMoveToArea ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
11859: LD_EXP 34
11863: PUSH
11864: LD_VAR 0 1
11868: ARRAY
11869: PPUSH
11870: LD_INT 3
11872: PUSH
11873: LD_INT 60
11875: PUSH
11876: EMPTY
11877: LIST
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: PPUSH
11883: CALL_OW 72
11887: PPUSH
11888: LD_INT 13
11890: PUSH
11891: LD_INT 14
11893: PUSH
11894: EMPTY
11895: LIST
11896: LIST
11897: PUSH
11898: LD_INT 1
11900: PPUSH
11901: LD_INT 2
11903: PPUSH
11904: CALL_OW 12
11908: ARRAY
11909: PPUSH
11910: CALL_OW 113
// end ;
11914: PPOPN 3
11916: END
// every 0 0$0.3 trigger ruAI = 0 do var i , unit , veh , tmp ;
11917: LD_EXP 41
11921: PUSH
11922: LD_INT 0
11924: EQUAL
11925: IFFALSE 12297
11927: GO 11929
11929: DISABLE
11930: LD_INT 0
11932: PPUSH
11933: PPUSH
11934: PPUSH
11935: PPUSH
// begin enable ;
11936: ENABLE
// if UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) or FilterAllUnits ( [ [ f_control , control_manual ] , [ f_nation , 3 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ] ) then
11937: LD_EXP 34
11941: PPUSH
11942: LD_INT 2
11944: PUSH
11945: LD_INT 95
11947: PUSH
11948: LD_INT 13
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: PUSH
11955: LD_INT 95
11957: PUSH
11958: LD_INT 14
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: LIST
11969: PPUSH
11970: CALL_OW 72
11974: PUSH
11975: LD_INT 33
11977: PUSH
11978: LD_INT 1
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: PUSH
11985: LD_INT 23
11987: PUSH
11988: LD_INT 3
11990: PUSH
11991: EMPTY
11992: LIST
11993: LIST
11994: PUSH
11995: LD_INT 2
11997: PUSH
11998: LD_INT 95
12000: PUSH
12001: LD_INT 13
12003: PUSH
12004: EMPTY
12005: LIST
12006: LIST
12007: PUSH
12008: LD_INT 95
12010: PUSH
12011: LD_INT 14
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: PUSH
12018: EMPTY
12019: LIST
12020: LIST
12021: LIST
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: LIST
12027: PPUSH
12028: CALL_OW 69
12032: OR
12033: IFFALSE 12222
// begin unit := UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) [ 1 ] ;
12035: LD_ADDR_VAR 0 2
12039: PUSH
12040: LD_EXP 34
12044: PPUSH
12045: LD_INT 2
12047: PUSH
12048: LD_INT 95
12050: PUSH
12051: LD_INT 13
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: PUSH
12058: LD_INT 95
12060: PUSH
12061: LD_INT 14
12063: PUSH
12064: EMPTY
12065: LIST
12066: LIST
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: LIST
12072: PPUSH
12073: CALL_OW 72
12077: PUSH
12078: LD_INT 1
12080: ARRAY
12081: ST_TO_ADDR
// if not unit then
12082: LD_VAR 0 2
12086: NOT
12087: IFFALSE 12222
// begin tmp := FilterAllUnits ( [ [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] , [ f_control , control_manual ] , [ f_nation , 3 ] ] ) ;
12089: LD_ADDR_VAR 0 4
12093: PUSH
12094: LD_INT 2
12096: PUSH
12097: LD_INT 95
12099: PUSH
12100: LD_INT 13
12102: PUSH
12103: EMPTY
12104: LIST
12105: LIST
12106: PUSH
12107: LD_INT 95
12109: PUSH
12110: LD_INT 14
12112: PUSH
12113: EMPTY
12114: LIST
12115: LIST
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: LIST
12121: PUSH
12122: LD_INT 33
12124: PUSH
12125: LD_INT 1
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: PUSH
12132: LD_INT 23
12134: PUSH
12135: LD_INT 3
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: LIST
12146: PPUSH
12147: CALL_OW 69
12151: ST_TO_ADDR
// if not tmp then
12152: LD_VAR 0 4
12156: NOT
12157: IFFALSE 12161
// exit ;
12159: GO 12297
// for i in tmp do
12161: LD_ADDR_VAR 0 1
12165: PUSH
12166: LD_VAR 0 4
12170: PUSH
12171: FOR_IN
12172: IFFALSE 12220
// if IsDrivenBy ( i ) in RuScientists then
12174: LD_VAR 0 1
12178: PPUSH
12179: CALL_OW 311
12183: PUSH
12184: LD_EXP 34
12188: IN
12189: IFFALSE 12218
// begin unit := IsDrivenBy ( i ) ;
12191: LD_ADDR_VAR 0 2
12195: PUSH
12196: LD_VAR 0 1
12200: PPUSH
12201: CALL_OW 311
12205: ST_TO_ADDR
// veh := i ;
12206: LD_ADDR_VAR 0 3
12210: PUSH
12211: LD_VAR 0 1
12215: ST_TO_ADDR
// break ;
12216: GO 12220
// end ;
12218: GO 12171
12220: POP
12221: POP
// end ; end ; if not unit then
12222: LD_VAR 0 2
12226: NOT
12227: IFFALSE 12231
// exit ;
12229: GO 12297
// RuScientists = RuScientists diff unit ;
12231: LD_ADDR_EXP 34
12235: PUSH
12236: LD_EXP 34
12240: PUSH
12241: LD_VAR 0 2
12245: DIFF
12246: ST_TO_ADDR
// RemoveUnit ( unit ) ;
12247: LD_VAR 0 2
12251: PPUSH
12252: CALL_OW 64
// if veh then
12256: LD_VAR 0 3
12260: IFFALSE 12297
// begin if GetWeapon ( veh ) = 49 then
12262: LD_VAR 0 3
12266: PPUSH
12267: CALL_OW 264
12271: PUSH
12272: LD_INT 49
12274: EQUAL
12275: IFFALSE 12288
// KillUnit ( veh ) else
12277: LD_VAR 0 3
12281: PPUSH
12282: CALL_OW 66
12286: GO 12297
// RemoveUnit ( veh ) ;
12288: LD_VAR 0 3
12292: PPUSH
12293: CALL_OW 64
// end ; end ; end_of_file
12297: PPOPN 4
12299: END
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12300: LD_INT 0
12302: PPUSH
12303: PPUSH
// for i in charactersList do
12304: LD_ADDR_VAR 0 4
12308: PUSH
12309: LD_VAR 0 1
12313: PUSH
12314: FOR_IN
12315: IFFALSE 12333
// SaveCharacters ( i , ident ) ;
12317: LD_VAR 0 4
12321: PPUSH
12322: LD_VAR 0 2
12326: PPUSH
12327: CALL_OW 38
12331: GO 12314
12333: POP
12334: POP
// end ;
12335: LD_VAR 0 3
12339: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
12340: LD_INT 0
12342: PPUSH
12343: PPUSH
12344: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12345: LD_ADDR_VAR 0 1
12349: PUSH
12350: LD_VAR 0 1
12354: PUSH
12355: LD_EXP 1
12359: PUSH
12360: LD_EXP 7
12364: PUSH
12365: LD_EXP 3
12369: PUSH
12370: LD_EXP 4
12374: PUSH
12375: LD_EXP 5
12379: PUSH
12380: LD_EXP 2
12384: PUSH
12385: LD_EXP 12
12389: PUSH
12390: LD_EXP 13
12394: PUSH
12395: LD_EXP 9
12399: PUSH
12400: LD_EXP 11
12404: PUSH
12405: LD_EXP 6
12409: PUSH
12410: LD_EXP 8
12414: PUSH
12415: LD_EXP 10
12419: PUSH
12420: LD_EXP 22
12424: PUSH
12425: EMPTY
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: DIFF
12441: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
12442: LD_ADDR_VAR 0 6
12446: PUSH
12447: LD_VAR 0 1
12451: PUSH
12452: LD_INT 1
12454: PPUSH
12455: LD_VAR 0 1
12459: PPUSH
12460: CALL_OW 12
12464: ARRAY
12465: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
12466: LD_VAR 0 6
12470: PPUSH
12471: CALL_OW 258
12475: PUSH
12476: LD_INT 1
12478: EQUAL
12479: IFFALSE 12497
// Say ( speaker , dialogMID ) else
12481: LD_VAR 0 6
12485: PPUSH
12486: LD_VAR 0 2
12490: PPUSH
12491: CALL_OW 88
12495: GO 12511
// Say ( speaker , dialogFID ) ;
12497: LD_VAR 0 6
12501: PPUSH
12502: LD_VAR 0 3
12506: PPUSH
12507: CALL_OW 88
// result := speaker ;
12511: LD_ADDR_VAR 0 4
12515: PUSH
12516: LD_VAR 0 6
12520: ST_TO_ADDR
// end ;
12521: LD_VAR 0 4
12525: RET
// export function PrepareDifficulty ; var tmp ; begin
12526: LD_INT 0
12528: PPUSH
12529: PPUSH
// if Difficulty = 1 then
12530: LD_OWVAR 67
12534: PUSH
12535: LD_INT 1
12537: EQUAL
12538: IFFALSE 12558
// begin RuSolMinLevel = 8 ;
12540: LD_ADDR_EXP 36
12544: PUSH
12545: LD_INT 8
12547: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12548: LD_ADDR_EXP 37
12552: PUSH
12553: LD_INT 10
12555: ST_TO_ADDR
// end else
12556: GO 12798
// if Difficulty = 2 then
12558: LD_OWVAR 67
12562: PUSH
12563: LD_INT 2
12565: EQUAL
12566: IFFALSE 12662
// begin RuSolMinLevel = 9 ;
12568: LD_ADDR_EXP 36
12572: PUSH
12573: LD_INT 9
12575: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12576: LD_ADDR_EXP 37
12580: PUSH
12581: LD_INT 10
12583: ST_TO_ADDR
// uc_nation = 3 ;
12584: LD_ADDR_OWVAR 21
12588: PUSH
12589: LD_INT 3
12591: ST_TO_ADDR
// uc_side = 3 ;
12592: LD_ADDR_OWVAR 20
12596: PUSH
12597: LD_INT 3
12599: ST_TO_ADDR
// bc_level = 10 ;
12600: LD_ADDR_OWVAR 43
12604: PUSH
12605: LD_INT 10
12607: ST_TO_ADDR
// bc_type = b_turret ;
12608: LD_ADDR_OWVAR 42
12612: PUSH
12613: LD_INT 33
12615: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12616: LD_ADDR_VAR 0 2
12620: PUSH
12621: LD_INT 86
12623: PPUSH
12624: LD_INT 34
12626: PPUSH
12627: LD_INT 2
12629: PPUSH
12630: CALL_OW 47
12634: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12635: LD_VAR 0 2
12639: PPUSH
12640: LD_INT 49
12642: PPUSH
12643: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12647: LD_INT 64
12649: PPUSH
12650: LD_INT 3
12652: PPUSH
12653: LD_INT 1
12655: PPUSH
12656: CALL_OW 322
// end else
12660: GO 12798
// begin RuSolMinLevel = 10 ;
12662: LD_ADDR_EXP 36
12666: PUSH
12667: LD_INT 10
12669: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12670: LD_ADDR_EXP 37
12674: PUSH
12675: LD_INT 10
12677: ST_TO_ADDR
// uc_nation = 3 ;
12678: LD_ADDR_OWVAR 21
12682: PUSH
12683: LD_INT 3
12685: ST_TO_ADDR
// uc_side = 3 ;
12686: LD_ADDR_OWVAR 20
12690: PUSH
12691: LD_INT 3
12693: ST_TO_ADDR
// bc_level = 10 ;
12694: LD_ADDR_OWVAR 43
12698: PUSH
12699: LD_INT 10
12701: ST_TO_ADDR
// bc_type = b_turret ;
12702: LD_ADDR_OWVAR 42
12706: PUSH
12707: LD_INT 33
12709: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12710: LD_ADDR_VAR 0 2
12714: PUSH
12715: LD_INT 86
12717: PPUSH
12718: LD_INT 34
12720: PPUSH
12721: LD_INT 2
12723: PPUSH
12724: CALL_OW 47
12728: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12729: LD_VAR 0 2
12733: PPUSH
12734: LD_INT 49
12736: PPUSH
12737: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
12741: LD_ADDR_VAR 0 2
12745: PUSH
12746: LD_INT 93
12748: PPUSH
12749: LD_INT 31
12751: PPUSH
12752: LD_INT 2
12754: PPUSH
12755: CALL_OW 47
12759: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12760: LD_VAR 0 2
12764: PPUSH
12765: LD_INT 49
12767: PPUSH
12768: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12772: LD_INT 64
12774: PPUSH
12775: LD_INT 3
12777: PPUSH
12778: LD_INT 1
12780: PPUSH
12781: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
12785: LD_INT 65
12787: PPUSH
12788: LD_INT 3
12790: PPUSH
12791: LD_INT 1
12793: PPUSH
12794: CALL_OW 322
// end ; end ;
12798: LD_VAR 0 1
12802: RET
// export function ShowQuery1 ; begin
12803: LD_INT 0
12805: PPUSH
// result := Query ( Q1 ) ;
12806: LD_ADDR_VAR 0 1
12810: PUSH
12811: LD_STRING Q1
12813: PPUSH
12814: CALL_OW 97
12818: ST_TO_ADDR
// end ;
12819: LD_VAR 0 1
12823: RET
// export function ShowQuery2 ; begin
12824: LD_INT 0
12826: PPUSH
// result := Query ( Q1a ) ;
12827: LD_ADDR_VAR 0 1
12831: PUSH
12832: LD_STRING Q1a
12834: PPUSH
12835: CALL_OW 97
12839: ST_TO_ADDR
// end ;
12840: LD_VAR 0 1
12844: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
12845: LD_INT 0
12847: PPUSH
12848: PPUSH
12849: PPUSH
12850: PPUSH
12851: PPUSH
// for i = 1 to count do
12852: LD_ADDR_VAR 0 8
12856: PUSH
12857: DOUBLE
12858: LD_INT 1
12860: DEC
12861: ST_TO_ADDR
12862: LD_VAR 0 6
12866: PUSH
12867: FOR_TO
12868: IFFALSE 12949
// begin uc_side = side ;
12870: LD_ADDR_OWVAR 20
12874: PUSH
12875: LD_VAR 0 1
12879: ST_TO_ADDR
// uc_nation = nation ;
12880: LD_ADDR_OWVAR 21
12884: PUSH
12885: LD_VAR 0 2
12889: ST_TO_ADDR
// hc_gallery =  ;
12890: LD_ADDR_OWVAR 33
12894: PUSH
12895: LD_STRING 
12897: ST_TO_ADDR
// hc_name =  ;
12898: LD_ADDR_OWVAR 26
12902: PUSH
12903: LD_STRING 
12905: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
12906: LD_INT 0
12908: PPUSH
12909: LD_VAR 0 5
12913: PPUSH
12914: LD_VAR 0 4
12918: PPUSH
12919: CALL_OW 380
// un = CreateHuman ;
12923: LD_ADDR_VAR 0 10
12927: PUSH
12928: CALL_OW 44
12932: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
12933: LD_VAR 0 10
12937: PPUSH
12938: LD_VAR 0 3
12942: PPUSH
12943: CALL_OW 52
// end ;
12947: GO 12867
12949: POP
12950: POP
// end ;
12951: LD_VAR 0 7
12955: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
12956: LD_INT 0
12958: PPUSH
12959: PPUSH
12960: PPUSH
12961: PPUSH
12962: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
12963: LD_ADDR_VAR 0 8
12967: PUSH
12968: LD_INT 48
12970: PUSH
12971: LD_INT 49
12973: PUSH
12974: LD_INT 50
12976: PUSH
12977: LD_INT 20
12979: PUSH
12980: LD_INT 1
12982: PUSH
12983: LD_INT 51
12985: PUSH
12986: LD_INT 52
12988: PUSH
12989: LD_INT 69
12991: PUSH
12992: LD_INT 39
12994: PUSH
12995: LD_INT 34
12997: PUSH
12998: LD_INT 40
13000: PUSH
13001: LD_INT 53
13003: PUSH
13004: LD_INT 71
13006: PUSH
13007: LD_INT 57
13009: PUSH
13010: LD_INT 58
13012: PUSH
13013: LD_INT 44
13015: PUSH
13016: LD_INT 32
13018: PUSH
13019: LD_INT 27
13021: PUSH
13022: LD_INT 23
13024: PUSH
13025: LD_INT 33
13027: PUSH
13028: LD_INT 59
13030: PUSH
13031: LD_INT 54
13033: PUSH
13034: LD_INT 55
13036: PUSH
13037: LD_INT 56
13039: PUSH
13040: LD_INT 63
13042: PUSH
13043: LD_INT 64
13045: PUSH
13046: LD_INT 65
13048: PUSH
13049: LD_INT 30
13051: PUSH
13052: LD_INT 31
13054: PUSH
13055: LD_INT 21
13057: PUSH
13058: LD_INT 22
13060: PUSH
13061: LD_INT 25
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: ST_TO_ADDR
// for i = 1 to ru_tech_list do
13098: LD_ADDR_VAR 0 5
13102: PUSH
13103: DOUBLE
13104: LD_INT 1
13106: DEC
13107: ST_TO_ADDR
13108: LD_VAR 0 8
13112: PUSH
13113: FOR_TO
13114: IFFALSE 13190
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
13116: LD_VAR 0 8
13120: PUSH
13121: LD_VAR 0 5
13125: ARRAY
13126: PPUSH
13127: LD_VAR 0 1
13131: PPUSH
13132: CALL_OW 321
13136: PUSH
13137: LD_INT 1
13139: EQUAL
13140: PUSH
13141: LD_VAR 0 8
13145: PUSH
13146: LD_VAR 0 5
13150: ARRAY
13151: PPUSH
13152: LD_VAR 0 3
13156: PPUSH
13157: CALL_OW 482
13161: PUSH
13162: LD_INT 1
13164: EQUAL
13165: AND
13166: IFFALSE 13188
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
13168: LD_VAR 0 2
13172: PPUSH
13173: LD_VAR 0 8
13177: PUSH
13178: LD_VAR 0 5
13182: ARRAY
13183: PPUSH
13184: CALL_OW 184
13188: GO 13113
13190: POP
13191: POP
// end ;
13192: LD_VAR 0 4
13196: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
13197: LD_INT 0
13199: PPUSH
13200: PPUSH
13201: PPUSH
13202: PPUSH
13203: PPUSH
13204: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
13205: LD_ADDR_VAR 0 8
13209: PUSH
13210: LD_VAR 0 2
13214: PPUSH
13215: CALL_OW 313
13219: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13220: LD_ADDR_VAR 0 9
13224: PUSH
13225: LD_VAR 0 3
13229: PPUSH
13230: LD_INT 22
13232: PUSH
13233: LD_VAR 0 1
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: PUSH
13242: LD_INT 25
13244: PUSH
13245: LD_INT 2
13247: PUSH
13248: EMPTY
13249: LIST
13250: LIST
13251: PUSH
13252: LD_INT 24
13254: PUSH
13255: LD_INT 750
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: PUSH
13262: LD_INT 3
13264: PUSH
13265: LD_INT 54
13267: PUSH
13268: EMPTY
13269: LIST
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: PUSH
13275: EMPTY
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: PPUSH
13281: CALL_OW 70
13285: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13286: LD_ADDR_VAR 0 6
13290: PUSH
13291: LD_VAR 0 3
13295: PPUSH
13296: LD_INT 22
13298: PUSH
13299: LD_VAR 0 1
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: PUSH
13308: LD_INT 21
13310: PUSH
13311: LD_INT 3
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: PUSH
13318: LD_INT 3
13320: PUSH
13321: LD_INT 24
13323: PUSH
13324: LD_INT 1000
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: PUSH
13331: EMPTY
13332: LIST
13333: LIST
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: LIST
13339: PUSH
13340: EMPTY
13341: LIST
13342: PPUSH
13343: CALL_OW 70
13347: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13348: LD_VAR 0 6
13352: NOT
13353: PUSH
13354: LD_INT 22
13356: PUSH
13357: LD_VAR 0 1
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: PUSH
13366: LD_INT 25
13368: PUSH
13369: LD_INT 2
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PUSH
13376: LD_INT 24
13378: PUSH
13379: LD_INT 250
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: LIST
13390: PPUSH
13391: CALL_OW 69
13395: NOT
13396: AND
13397: IFFALSE 13401
// exit ;
13399: GO 13583
// if buildings_list > 0 and engineerOkInside then
13401: LD_VAR 0 6
13405: PUSH
13406: LD_INT 0
13408: GREATER
13409: PUSH
13410: LD_VAR 0 8
13414: AND
13415: IFFALSE 13426
// ComExitBuilding ( engineerOkInside ) ;
13417: LD_VAR 0 8
13421: PPUSH
13422: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
13426: LD_VAR 0 6
13430: PUSH
13431: LD_INT 0
13433: GREATER
13434: PUSH
13435: LD_VAR 0 9
13439: PUSH
13440: LD_INT 0
13442: GREATER
13443: AND
13444: IFFALSE 13464
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
13446: LD_VAR 0 9
13450: PPUSH
13451: LD_VAR 0 6
13455: PUSH
13456: LD_INT 1
13458: ARRAY
13459: PPUSH
13460: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
13464: LD_VAR 0 6
13468: PUSH
13469: LD_INT 0
13471: EQUAL
13472: PUSH
13473: LD_VAR 0 4
13477: PUSH
13478: LD_INT 0
13480: EQUAL
13481: AND
13482: PUSH
13483: LD_VAR 0 9
13487: PUSH
13488: LD_INT 0
13490: GREATER
13491: AND
13492: IFFALSE 13508
// ComEnterUnit ( engineerOkOutside , building ) ;
13494: LD_VAR 0 9
13498: PPUSH
13499: LD_VAR 0 2
13503: PPUSH
13504: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
13508: LD_VAR 0 9
13512: PUSH
13513: LD_INT 0
13515: GREATER
13516: PUSH
13517: LD_VAR 0 6
13521: PUSH
13522: LD_INT 0
13524: EQUAL
13525: AND
13526: PUSH
13527: LD_VAR 0 4
13531: PUSH
13532: LD_INT 0
13534: GREATER
13535: AND
13536: IFFALSE 13583
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13538: LD_VAR 0 9
13542: PPUSH
13543: LD_VAR 0 4
13547: PUSH
13548: LD_INT 1
13550: ARRAY
13551: PPUSH
13552: LD_VAR 0 4
13556: PUSH
13557: LD_INT 2
13559: ARRAY
13560: PPUSH
13561: LD_VAR 0 4
13565: PUSH
13566: LD_INT 3
13568: ARRAY
13569: PPUSH
13570: LD_VAR 0 4
13574: PUSH
13575: LD_INT 4
13577: ARRAY
13578: PPUSH
13579: CALL_OW 145
// end ;
13583: LD_VAR 0 5
13587: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13588: LD_INT 0
13590: PPUSH
13591: PPUSH
13592: PPUSH
13593: PPUSH
13594: PPUSH
13595: PPUSH
13596: PPUSH
13597: PPUSH
13598: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13599: LD_ADDR_VAR 0 6
13603: PUSH
13604: LD_INT 22
13606: PUSH
13607: LD_VAR 0 1
13611: PUSH
13612: EMPTY
13613: LIST
13614: LIST
13615: PUSH
13616: LD_INT 25
13618: PUSH
13619: LD_INT 4
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: PUSH
13626: LD_INT 24
13628: PUSH
13629: LD_INT 251
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: PUSH
13636: EMPTY
13637: LIST
13638: LIST
13639: LIST
13640: PPUSH
13641: CALL_OW 69
13645: PUSH
13646: LD_EXP 34
13650: PUSH
13651: EMPTY
13652: LIST
13653: DIFF
13654: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13655: LD_ADDR_VAR 0 7
13659: PUSH
13660: LD_VAR 0 3
13664: PPUSH
13665: LD_INT 22
13667: PUSH
13668: LD_VAR 0 1
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: PUSH
13677: LD_INT 25
13679: PUSH
13680: LD_INT 4
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PUSH
13687: LD_INT 50
13689: PUSH
13690: EMPTY
13691: LIST
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: LIST
13697: PPUSH
13698: CALL_OW 70
13702: PUSH
13703: LD_EXP 34
13707: PUSH
13708: EMPTY
13709: LIST
13710: DIFF
13711: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13712: LD_ADDR_VAR 0 10
13716: PUSH
13717: LD_VAR 0 3
13721: PPUSH
13722: LD_INT 22
13724: PUSH
13725: LD_VAR 0 1
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: PUSH
13734: LD_INT 21
13736: PUSH
13737: LD_INT 1
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: PUSH
13744: LD_INT 3
13746: PUSH
13747: LD_INT 24
13749: PUSH
13750: LD_INT 750
13752: PUSH
13753: EMPTY
13754: LIST
13755: LIST
13756: PUSH
13757: EMPTY
13758: LIST
13759: LIST
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: LIST
13765: PPUSH
13766: CALL_OW 70
13770: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13771: LD_ADDR_VAR 0 11
13775: PUSH
13776: LD_VAR 0 2
13780: PPUSH
13781: LD_INT 22
13783: PUSH
13784: LD_VAR 0 1
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: PUSH
13793: LD_INT 21
13795: PUSH
13796: LD_INT 1
13798: PUSH
13799: EMPTY
13800: LIST
13801: LIST
13802: PUSH
13803: LD_INT 3
13805: PUSH
13806: LD_INT 24
13808: PUSH
13809: LD_INT 1000
13811: PUSH
13812: EMPTY
13813: LIST
13814: LIST
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: LIST
13824: PPUSH
13825: CALL_OW 70
13829: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
13830: LD_VAR 0 10
13834: PUSH
13835: LD_INT 0
13837: GREATER
13838: PUSH
13839: LD_VAR 0 6
13843: PUSH
13844: LD_INT 0
13846: GREATER
13847: AND
13848: IFFALSE 13864
// ComMoveToArea ( damageUnits , healArea ) ;
13850: LD_VAR 0 10
13854: PPUSH
13855: LD_VAR 0 2
13859: PPUSH
13860: CALL_OW 113
// if unitsToHeal > 0 and sci_listOutside > 0 then
13864: LD_VAR 0 11
13868: PUSH
13869: LD_INT 0
13871: GREATER
13872: PUSH
13873: LD_VAR 0 7
13877: PUSH
13878: LD_INT 0
13880: GREATER
13881: AND
13882: IFFALSE 13902
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
13884: LD_VAR 0 7
13888: PPUSH
13889: LD_VAR 0 11
13893: PUSH
13894: LD_INT 1
13896: ARRAY
13897: PPUSH
13898: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
13902: LD_VAR 0 10
13906: PUSH
13907: LD_INT 0
13909: EQUAL
13910: PUSH
13911: LD_VAR 0 11
13915: PUSH
13916: LD_INT 0
13918: EQUAL
13919: AND
13920: PUSH
13921: LD_VAR 0 7
13925: PUSH
13926: LD_INT 0
13928: GREATER
13929: AND
13930: IFFALSE 14035
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
13932: LD_ADDR_VAR 0 12
13936: PUSH
13937: LD_INT 22
13939: PUSH
13940: LD_VAR 0 1
13944: PUSH
13945: EMPTY
13946: LIST
13947: LIST
13948: PUSH
13949: LD_INT 21
13951: PUSH
13952: LD_INT 3
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: PUSH
13959: LD_INT 30
13961: PUSH
13962: LD_INT 8
13964: PUSH
13965: EMPTY
13966: LIST
13967: LIST
13968: PUSH
13969: EMPTY
13970: LIST
13971: LIST
13972: LIST
13973: PPUSH
13974: CALL_OW 69
13978: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
13979: LD_ADDR_VAR 0 13
13983: PUSH
13984: LD_INT 1
13986: PPUSH
13987: LD_VAR 0 12
13991: PPUSH
13992: CALL_OW 12
13996: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
13997: LD_VAR 0 7
14001: PPUSH
14002: LD_INT 3
14004: PUSH
14005: LD_INT 60
14007: PUSH
14008: EMPTY
14009: LIST
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: PPUSH
14015: CALL_OW 72
14019: PPUSH
14020: LD_VAR 0 12
14024: PUSH
14025: LD_VAR 0 13
14029: ARRAY
14030: PPUSH
14031: CALL_OW 120
// end ; if FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) > 0 and IsOk ( ru_fact ) and GetSide ( ru_fact ) = 3 then
14035: LD_VAR 0 3
14039: PPUSH
14040: LD_INT 22
14042: PUSH
14043: LD_VAR 0 1
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: PUSH
14052: LD_INT 25
14054: PUSH
14055: LD_INT 3
14057: PUSH
14058: EMPTY
14059: LIST
14060: LIST
14061: PUSH
14062: LD_INT 24
14064: PUSH
14065: LD_INT 751
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: LIST
14076: PPUSH
14077: CALL_OW 70
14081: PUSH
14082: LD_INT 0
14084: GREATER
14085: PUSH
14086: LD_INT 21
14088: PPUSH
14089: CALL_OW 302
14093: AND
14094: PUSH
14095: LD_INT 21
14097: PPUSH
14098: CALL_OW 255
14102: PUSH
14103: LD_INT 3
14105: EQUAL
14106: AND
14107: IFFALSE 14163
// ComEnterUnit ( FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) , ru_fact ) ;
14109: LD_VAR 0 3
14113: PPUSH
14114: LD_INT 22
14116: PUSH
14117: LD_VAR 0 1
14121: PUSH
14122: EMPTY
14123: LIST
14124: LIST
14125: PUSH
14126: LD_INT 25
14128: PUSH
14129: LD_INT 3
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: PUSH
14136: LD_INT 24
14138: PUSH
14139: LD_INT 751
14141: PUSH
14142: EMPTY
14143: LIST
14144: LIST
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: LIST
14150: PPUSH
14151: CALL_OW 70
14155: PPUSH
14156: LD_INT 21
14158: PPUSH
14159: CALL_OW 120
// end ;
14163: LD_VAR 0 5
14167: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
14168: LD_INT 0
14170: PPUSH
14171: PPUSH
14172: PPUSH
14173: PPUSH
14174: PPUSH
14175: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
14176: LD_ADDR_VAR 0 7
14180: PUSH
14181: LD_VAR 0 2
14185: PPUSH
14186: LD_INT 22
14188: PUSH
14189: LD_VAR 0 1
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: PUSH
14198: LD_INT 21
14200: PUSH
14201: LD_INT 2
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: PUSH
14208: LD_INT 34
14210: PUSH
14211: LD_INT 52
14213: PUSH
14214: EMPTY
14215: LIST
14216: LIST
14217: PUSH
14218: EMPTY
14219: LIST
14220: LIST
14221: LIST
14222: PPUSH
14223: CALL_OW 70
14227: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14228: LD_ADDR_VAR 0 8
14232: PUSH
14233: LD_VAR 0 2
14237: PPUSH
14238: LD_INT 22
14240: PUSH
14241: LD_VAR 0 1
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: PUSH
14250: LD_INT 21
14252: PUSH
14253: LD_INT 3
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: PUSH
14260: LD_INT 3
14262: PUSH
14263: LD_INT 24
14265: PUSH
14266: LD_INT 1000
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: PUSH
14277: EMPTY
14278: LIST
14279: LIST
14280: LIST
14281: PUSH
14282: EMPTY
14283: LIST
14284: PPUSH
14285: CALL_OW 70
14289: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
14290: LD_VAR 0 8
14294: PUSH
14295: LD_INT 0
14297: GREATER
14298: PUSH
14299: LD_VAR 0 7
14303: PPUSH
14304: LD_INT 24
14306: PUSH
14307: LD_INT 750
14309: PUSH
14310: EMPTY
14311: LIST
14312: LIST
14313: PPUSH
14314: CALL_OW 72
14318: PUSH
14319: LD_INT 0
14321: GREATER
14322: AND
14323: IFFALSE 14343
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
14325: LD_VAR 0 7
14329: PPUSH
14330: LD_VAR 0 8
14334: PUSH
14335: LD_INT 1
14337: ARRAY
14338: PPUSH
14339: CALL_OW 130
// end ;
14343: LD_VAR 0 3
14347: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14348: LD_INT 0
14350: PPUSH
14351: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14352: LD_INT 22
14354: PUSH
14355: LD_VAR 0 1
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: PUSH
14364: LD_INT 21
14366: PUSH
14367: LD_INT 2
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: PPUSH
14378: CALL_OW 69
14382: PUSH
14383: LD_INT 18
14385: PPUSH
14386: LD_INT 22
14388: PUSH
14389: LD_VAR 0 1
14393: PUSH
14394: EMPTY
14395: LIST
14396: LIST
14397: PUSH
14398: LD_INT 21
14400: PUSH
14401: LD_INT 2
14403: PUSH
14404: EMPTY
14405: LIST
14406: LIST
14407: PUSH
14408: EMPTY
14409: LIST
14410: LIST
14411: PPUSH
14412: CALL_OW 70
14416: PUSH
14417: LD_VAR 0 3
14421: LESSEQUAL
14422: DIFF
14423: IFFALSE 14490
// for i = 1 to vehCount do
14425: LD_ADDR_VAR 0 9
14429: PUSH
14430: DOUBLE
14431: LD_INT 1
14433: DEC
14434: ST_TO_ADDR
14435: LD_VAR 0 3
14439: PUSH
14440: FOR_TO
14441: IFFALSE 14488
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14443: LD_VAR 0 2
14447: PPUSH
14448: LD_VAR 0 7
14452: PPUSH
14453: LD_VAR 0 5
14457: PPUSH
14458: LD_VAR 0 6
14462: PPUSH
14463: LD_VAR 0 4
14467: PUSH
14468: LD_INT 1
14470: PPUSH
14471: LD_VAR 0 4
14475: PPUSH
14476: CALL_OW 12
14480: ARRAY
14481: PPUSH
14482: CALL_OW 185
14486: GO 14440
14488: POP
14489: POP
// end ;
14490: LD_VAR 0 8
14494: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
14495: LD_INT 0
14497: PPUSH
14498: PPUSH
14499: PPUSH
14500: PPUSH
14501: PPUSH
14502: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14503: LD_ADDR_VAR 0 6
14507: PUSH
14508: LD_INT 22
14510: PUSH
14511: LD_VAR 0 1
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: PUSH
14520: LD_INT 25
14522: PUSH
14523: LD_INT 9
14525: PUSH
14526: EMPTY
14527: LIST
14528: LIST
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: PPUSH
14534: CALL_OW 69
14538: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14539: LD_ADDR_VAR 0 7
14543: PUSH
14544: LD_INT 81
14546: PUSH
14547: LD_VAR 0 1
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: PUSH
14556: LD_INT 3
14558: PUSH
14559: LD_INT 21
14561: PUSH
14562: LD_INT 3
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: PUSH
14569: EMPTY
14570: LIST
14571: LIST
14572: PUSH
14573: EMPTY
14574: LIST
14575: LIST
14576: PPUSH
14577: CALL_OW 69
14581: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14582: LD_ADDR_VAR 0 4
14586: PUSH
14587: LD_INT 1
14589: PPUSH
14590: LD_INT 3
14592: PPUSH
14593: CALL_OW 12
14597: ST_TO_ADDR
// for i = 1 to list do
14598: LD_ADDR_VAR 0 5
14602: PUSH
14603: DOUBLE
14604: LD_INT 1
14606: DEC
14607: ST_TO_ADDR
14608: LD_VAR 0 6
14612: PUSH
14613: FOR_TO
14614: IFFALSE 14816
// for ta in filter do
14616: LD_ADDR_VAR 0 3
14620: PUSH
14621: LD_VAR 0 7
14625: PUSH
14626: FOR_IN
14627: IFFALSE 14812
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14629: LD_VAR 0 6
14633: PUSH
14634: LD_VAR 0 5
14638: ARRAY
14639: PPUSH
14640: LD_VAR 0 3
14644: PPUSH
14645: CALL_OW 296
14649: PUSH
14650: LD_INT 15
14652: LESSEQUAL
14653: IFFALSE 14810
// begin case c of 1 :
14655: LD_VAR 0 4
14659: PUSH
14660: LD_INT 1
14662: DOUBLE
14663: EQUAL
14664: IFTRUE 14668
14666: GO 14706
14668: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
14669: LD_VAR 0 6
14673: PUSH
14674: LD_VAR 0 5
14678: ARRAY
14679: PPUSH
14680: LD_VAR 0 3
14684: PPUSH
14685: CALL_OW 250
14689: PPUSH
14690: LD_VAR 0 3
14694: PPUSH
14695: CALL_OW 251
14699: PPUSH
14700: CALL_OW 154
14704: GO 14810
14706: LD_INT 2
14708: DOUBLE
14709: EQUAL
14710: IFTRUE 14714
14712: GO 14778
14714: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
14715: LD_VAR 0 6
14719: PUSH
14720: LD_VAR 0 5
14724: ARRAY
14725: PPUSH
14726: LD_VAR 0 3
14730: PPUSH
14731: CALL_OW 250
14735: PUSH
14736: LD_INT 1
14738: NEG
14739: PPUSH
14740: LD_INT 1
14742: PPUSH
14743: CALL_OW 12
14747: PLUS
14748: PPUSH
14749: LD_VAR 0 3
14753: PPUSH
14754: CALL_OW 251
14758: PUSH
14759: LD_INT 1
14761: NEG
14762: PPUSH
14763: LD_INT 1
14765: PPUSH
14766: CALL_OW 12
14770: PLUS
14771: PPUSH
14772: CALL_OW 153
14776: GO 14810
14778: LD_INT 3
14780: DOUBLE
14781: EQUAL
14782: IFTRUE 14786
14784: GO 14809
14786: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14787: LD_VAR 0 6
14791: PUSH
14792: LD_VAR 0 5
14796: ARRAY
14797: PPUSH
14798: LD_VAR 0 3
14802: PPUSH
14803: CALL_OW 115
14807: GO 14810
14809: POP
// end ; end ;
14810: GO 14626
14812: POP
14813: POP
14814: GO 14613
14816: POP
14817: POP
// end ;
14818: LD_VAR 0 2
14822: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
14823: LD_INT 0
14825: PPUSH
14826: PPUSH
14827: PPUSH
14828: PPUSH
// r := 100 ;
14829: LD_ADDR_VAR 0 5
14833: PUSH
14834: LD_INT 100
14836: ST_TO_ADDR
// x := 0 ;
14837: LD_ADDR_VAR 0 6
14841: PUSH
14842: LD_INT 0
14844: ST_TO_ADDR
// while ( x < n ) do
14845: LD_VAR 0 6
14849: PUSH
14850: LD_VAR 0 2
14854: LESS
14855: IFFALSE 15142
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
14857: LD_ADDR_VAR 0 4
14861: PUSH
14862: DOUBLE
14863: LD_INT 1
14865: DEC
14866: ST_TO_ADDR
14867: LD_VAR 0 1
14871: PPUSH
14872: LD_INT 0
14874: PPUSH
14875: CALL_OW 517
14879: PUSH
14880: LD_INT 1
14882: ARRAY
14883: PUSH
14884: FOR_TO
14885: IFFALSE 15138
// begin if r > 50 then
14887: LD_VAR 0 5
14891: PUSH
14892: LD_INT 50
14894: GREATER
14895: IFFALSE 15114
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
14897: LD_VAR 0 1
14901: PPUSH
14902: LD_INT 0
14904: PPUSH
14905: CALL_OW 517
14909: PUSH
14910: LD_INT 1
14912: ARRAY
14913: PUSH
14914: LD_VAR 0 4
14918: ARRAY
14919: PPUSH
14920: LD_VAR 0 1
14924: PPUSH
14925: LD_INT 0
14927: PPUSH
14928: CALL_OW 517
14932: PUSH
14933: LD_INT 2
14935: ARRAY
14936: PUSH
14937: LD_VAR 0 4
14941: ARRAY
14942: PPUSH
14943: CALL_OW 458
14947: NOT
14948: IFFALSE 15098
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
14950: LD_VAR 0 1
14954: PPUSH
14955: LD_INT 0
14957: PPUSH
14958: CALL_OW 517
14962: PUSH
14963: LD_INT 1
14965: ARRAY
14966: PUSH
14967: LD_VAR 0 4
14971: ARRAY
14972: PPUSH
14973: LD_VAR 0 1
14977: PPUSH
14978: LD_INT 0
14980: PPUSH
14981: CALL_OW 517
14985: PUSH
14986: LD_INT 2
14988: ARRAY
14989: PUSH
14990: LD_VAR 0 4
14994: ARRAY
14995: PPUSH
14996: LD_INT 8
14998: PPUSH
14999: LD_INT 0
15001: PPUSH
15002: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
15006: LD_ADDR_EXP 44
15010: PUSH
15011: LD_EXP 44
15015: PPUSH
15016: LD_INT 1
15018: PPUSH
15019: LD_VAR 0 1
15023: PPUSH
15024: LD_INT 0
15026: PPUSH
15027: CALL_OW 517
15031: PUSH
15032: LD_INT 1
15034: ARRAY
15035: PUSH
15036: LD_VAR 0 4
15040: ARRAY
15041: PUSH
15042: LD_VAR 0 1
15046: PPUSH
15047: LD_INT 0
15049: PPUSH
15050: CALL_OW 517
15054: PUSH
15055: LD_INT 2
15057: ARRAY
15058: PUSH
15059: LD_VAR 0 4
15063: ARRAY
15064: PUSH
15065: EMPTY
15066: LIST
15067: LIST
15068: PPUSH
15069: CALL_OW 2
15073: ST_TO_ADDR
// r := 0 ;
15074: LD_ADDR_VAR 0 5
15078: PUSH
15079: LD_INT 0
15081: ST_TO_ADDR
// x := x + 1 ;
15082: LD_ADDR_VAR 0 6
15086: PUSH
15087: LD_VAR 0 6
15091: PUSH
15092: LD_INT 1
15094: PLUS
15095: ST_TO_ADDR
// end else
15096: GO 15112
// r := r + 35 ;
15098: LD_ADDR_VAR 0 5
15102: PUSH
15103: LD_VAR 0 5
15107: PUSH
15108: LD_INT 35
15110: PLUS
15111: ST_TO_ADDR
// end else
15112: GO 15136
// r := r + rand ( 10 , 25 ) ;
15114: LD_ADDR_VAR 0 5
15118: PUSH
15119: LD_VAR 0 5
15123: PUSH
15124: LD_INT 10
15126: PPUSH
15127: LD_INT 25
15129: PPUSH
15130: CALL_OW 12
15134: PLUS
15135: ST_TO_ADDR
// end ;
15136: GO 14884
15138: POP
15139: POP
15140: GO 14845
// end ;
15142: LD_VAR 0 3
15146: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
15147: LD_INT 0
15149: PPUSH
15150: PPUSH
15151: PPUSH
15152: PPUSH
// tmpTab = [ ] ;
15153: LD_ADDR_VAR 0 6
15157: PUSH
15158: EMPTY
15159: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
15160: LD_INT 22
15162: PUSH
15163: LD_VAR 0 1
15167: PUSH
15168: EMPTY
15169: LIST
15170: LIST
15171: PUSH
15172: LD_INT 30
15174: PUSH
15175: LD_INT 32
15177: PUSH
15178: EMPTY
15179: LIST
15180: LIST
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: PPUSH
15186: CALL_OW 69
15190: PUSH
15191: LD_INT 0
15193: GREATER
15194: IFFALSE 15277
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
15196: LD_ADDR_VAR 0 4
15200: PUSH
15201: LD_INT 22
15203: PUSH
15204: LD_VAR 0 1
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: PUSH
15213: LD_INT 30
15215: PUSH
15216: LD_INT 32
15218: PUSH
15219: EMPTY
15220: LIST
15221: LIST
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: PPUSH
15227: CALL_OW 69
15231: PUSH
15232: FOR_IN
15233: IFFALSE 15275
// begin for j in UnitsInside ( i ) do
15235: LD_ADDR_VAR 0 5
15239: PUSH
15240: LD_VAR 0 4
15244: PPUSH
15245: CALL_OW 313
15249: PUSH
15250: FOR_IN
15251: IFFALSE 15271
// tmpTab = tmpTab ^ j ;
15253: LD_ADDR_VAR 0 6
15257: PUSH
15258: LD_VAR 0 6
15262: PUSH
15263: LD_VAR 0 5
15267: ADD
15268: ST_TO_ADDR
15269: GO 15250
15271: POP
15272: POP
// end ;
15273: GO 15232
15275: POP
15276: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
15277: LD_VAR 0 6
15281: PPUSH
15282: LD_VAR 0 2
15286: PPUSH
15287: CALL_OW 250
15291: PPUSH
15292: LD_VAR 0 2
15296: PPUSH
15297: CALL_OW 251
15301: PPUSH
15302: CALL_OW 114
// end ;
15306: LD_VAR 0 3
15310: RET
// export function CreateNature ; var i , un ; begin
15311: LD_INT 0
15313: PPUSH
15314: PPUSH
15315: PPUSH
// uc_side := 0 ;
15316: LD_ADDR_OWVAR 20
15320: PUSH
15321: LD_INT 0
15323: ST_TO_ADDR
// uc_nation := 0 ;
15324: LD_ADDR_OWVAR 21
15328: PUSH
15329: LD_INT 0
15331: ST_TO_ADDR
// InitHc ;
15332: CALL_OW 19
// hc_class := class_fish ;
15336: LD_ADDR_OWVAR 28
15340: PUSH
15341: LD_INT 20
15343: ST_TO_ADDR
// for i = 1 to 6 do
15344: LD_ADDR_VAR 0 2
15348: PUSH
15349: DOUBLE
15350: LD_INT 1
15352: DEC
15353: ST_TO_ADDR
15354: LD_INT 6
15356: PUSH
15357: FOR_TO
15358: IFFALSE 15377
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
15360: CALL_OW 44
15364: PPUSH
15365: LD_INT 23
15367: PPUSH
15368: LD_INT 0
15370: PPUSH
15371: CALL_OW 49
15375: GO 15357
15377: POP
15378: POP
// for i = 1 to Difficulty + 2 do
15379: LD_ADDR_VAR 0 2
15383: PUSH
15384: DOUBLE
15385: LD_INT 1
15387: DEC
15388: ST_TO_ADDR
15389: LD_OWVAR 67
15393: PUSH
15394: LD_INT 2
15396: PLUS
15397: PUSH
15398: FOR_TO
15399: IFFALSE 15508
// begin hc_sex = sex_male ;
15401: LD_ADDR_OWVAR 27
15405: PUSH
15406: LD_INT 1
15408: ST_TO_ADDR
// uc_side = 0 ;
15409: LD_ADDR_OWVAR 20
15413: PUSH
15414: LD_INT 0
15416: ST_TO_ADDR
// uc_nation = nation_nature ;
15417: LD_ADDR_OWVAR 21
15421: PUSH
15422: LD_INT 0
15424: ST_TO_ADDR
// hc_class = class_tiger ;
15425: LD_ADDR_OWVAR 28
15429: PUSH
15430: LD_INT 14
15432: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
15433: LD_ADDR_OWVAR 31
15437: PUSH
15438: LD_EXP 37
15442: PUSH
15443: LD_INT 0
15445: PUSH
15446: LD_INT 0
15448: PUSH
15449: LD_INT 0
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
15458: LD_ADDR_OWVAR 35
15462: PUSH
15463: LD_INT 5
15465: NEG
15466: PPUSH
15467: LD_INT 5
15469: PPUSH
15470: CALL_OW 12
15474: PUSH
15475: LD_OWVAR 67
15479: MUL
15480: ST_TO_ADDR
// un = CreateHuman ;
15481: LD_ADDR_VAR 0 3
15485: PUSH
15486: CALL_OW 44
15490: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15491: LD_VAR 0 3
15495: PPUSH
15496: LD_INT 24
15498: PPUSH
15499: LD_INT 0
15501: PPUSH
15502: CALL_OW 49
// end ;
15506: GO 15398
15508: POP
15509: POP
// for i = 1 to rand ( 3 , 4 ) do
15510: LD_ADDR_VAR 0 2
15514: PUSH
15515: DOUBLE
15516: LD_INT 1
15518: DEC
15519: ST_TO_ADDR
15520: LD_INT 3
15522: PPUSH
15523: LD_INT 4
15525: PPUSH
15526: CALL_OW 12
15530: PUSH
15531: FOR_TO
15532: IFFALSE 15624
// begin hc_sex = sex_male ;
15534: LD_ADDR_OWVAR 27
15538: PUSH
15539: LD_INT 1
15541: ST_TO_ADDR
// uc_side = 0 ;
15542: LD_ADDR_OWVAR 20
15546: PUSH
15547: LD_INT 0
15549: ST_TO_ADDR
// uc_nation = nation_nature ;
15550: LD_ADDR_OWVAR 21
15554: PUSH
15555: LD_INT 0
15557: ST_TO_ADDR
// hc_class = 18 ;
15558: LD_ADDR_OWVAR 28
15562: PUSH
15563: LD_INT 18
15565: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
15566: LD_ADDR_OWVAR 31
15570: PUSH
15571: LD_INT 0
15573: PUSH
15574: LD_INT 0
15576: PUSH
15577: LD_INT 0
15579: PUSH
15580: LD_INT 0
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: ST_TO_ADDR
// hc_agressivity = 0 ;
15589: LD_ADDR_OWVAR 35
15593: PUSH
15594: LD_INT 0
15596: ST_TO_ADDR
// un = CreateHuman ;
15597: LD_ADDR_VAR 0 3
15601: PUSH
15602: CALL_OW 44
15606: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15607: LD_VAR 0 3
15611: PPUSH
15612: LD_INT 24
15614: PPUSH
15615: LD_INT 0
15617: PPUSH
15618: CALL_OW 49
// end ;
15622: GO 15531
15624: POP
15625: POP
// for i = 1 to rand ( 1 , 3 ) do
15626: LD_ADDR_VAR 0 2
15630: PUSH
15631: DOUBLE
15632: LD_INT 1
15634: DEC
15635: ST_TO_ADDR
15636: LD_INT 1
15638: PPUSH
15639: LD_INT 3
15641: PPUSH
15642: CALL_OW 12
15646: PUSH
15647: FOR_TO
15648: IFFALSE 15796
// begin hc_sex = sex_male ;
15650: LD_ADDR_OWVAR 27
15654: PUSH
15655: LD_INT 1
15657: ST_TO_ADDR
// uc_side = 0 ;
15658: LD_ADDR_OWVAR 20
15662: PUSH
15663: LD_INT 0
15665: ST_TO_ADDR
// uc_nation = nation_nature ;
15666: LD_ADDR_OWVAR 21
15670: PUSH
15671: LD_INT 0
15673: ST_TO_ADDR
// hc_class = class_apeman ;
15674: LD_ADDR_OWVAR 28
15678: PUSH
15679: LD_INT 12
15681: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
15682: LD_ADDR_OWVAR 31
15686: PUSH
15687: LD_EXP 36
15691: PPUSH
15692: LD_EXP 37
15696: PPUSH
15697: CALL_OW 12
15701: PUSH
15702: LD_EXP 36
15706: PPUSH
15707: LD_EXP 37
15711: PPUSH
15712: CALL_OW 12
15716: PUSH
15717: LD_EXP 36
15721: PPUSH
15722: LD_EXP 37
15726: PPUSH
15727: CALL_OW 12
15731: PUSH
15732: LD_EXP 36
15736: PPUSH
15737: LD_EXP 37
15741: PPUSH
15742: CALL_OW 12
15746: PUSH
15747: EMPTY
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: ST_TO_ADDR
// hc_agressivity = rand ( 1 , 20 ) ;
15753: LD_ADDR_OWVAR 35
15757: PUSH
15758: LD_INT 1
15760: PPUSH
15761: LD_INT 20
15763: PPUSH
15764: CALL_OW 12
15768: ST_TO_ADDR
// un = CreateHuman ;
15769: LD_ADDR_VAR 0 3
15773: PUSH
15774: CALL_OW 44
15778: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15779: LD_VAR 0 3
15783: PPUSH
15784: LD_INT 24
15786: PPUSH
15787: LD_INT 0
15789: PPUSH
15790: CALL_OW 49
// end ;
15794: GO 15647
15796: POP
15797: POP
// end ; end_of_file
15798: LD_VAR 0 1
15802: RET
// on UnitDestroyed ( unit ) do var i ;
15803: LD_INT 0
15805: PPUSH
// begin if unit in russianTanks then
15806: LD_VAR 0 1
15810: PUSH
15811: LD_EXP 39
15815: IN
15816: IFFALSE 15834
// russianTanks := russianTanks diff unit ;
15818: LD_ADDR_EXP 39
15822: PUSH
15823: LD_EXP 39
15827: PUSH
15828: LD_VAR 0 1
15832: DIFF
15833: ST_TO_ADDR
// if unit in russianTimeLapsers then
15834: LD_VAR 0 1
15838: PUSH
15839: LD_EXP 40
15843: IN
15844: IFFALSE 15862
// russianTimeLapsers := russianTimeLapsers diff unit ;
15846: LD_ADDR_EXP 40
15850: PUSH
15851: LD_EXP 40
15855: PUSH
15856: LD_VAR 0 1
15860: DIFF
15861: ST_TO_ADDR
// if unit in RuScientists then
15862: LD_VAR 0 1
15866: PUSH
15867: LD_EXP 34
15871: IN
15872: IFFALSE 15904
// begin RuScientists = RuScientists diff unit ;
15874: LD_ADDR_EXP 34
15878: PUSH
15879: LD_EXP 34
15883: PUSH
15884: LD_VAR 0 1
15888: DIFF
15889: ST_TO_ADDR
// sciCounter = sciCounter + 1 ;
15890: LD_ADDR_EXP 35
15894: PUSH
15895: LD_EXP 35
15899: PUSH
15900: LD_INT 1
15902: PLUS
15903: ST_TO_ADDR
// end ; end ;
15904: PPOPN 2
15906: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_laser then
15907: LD_VAR 0 3
15911: PPUSH
15912: CALL_OW 264
15916: PUSH
15917: LD_INT 9
15919: EQUAL
15920: IFFALSE 15936
// laserCounterDestroy := laserCounterDestroy + 1 ;
15922: LD_ADDR_EXP 50
15926: PUSH
15927: LD_EXP 50
15931: PUSH
15932: LD_INT 1
15934: PLUS
15935: ST_TO_ADDR
// end ;
15936: PPOPN 3
15938: END
// on UnitTeleported ( building , human ) do begin if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
15939: LD_VAR 0 1
15943: PUSH
15944: LD_INT 10
15946: EQUAL
15947: PUSH
15948: LD_VAR 0 2
15952: PPUSH
15953: CALL_OW 255
15957: PUSH
15958: LD_INT 1
15960: EQUAL
15961: AND
15962: PUSH
15963: LD_EXP 47
15967: PUSH
15968: LD_INT 0
15970: EQUAL
15971: AND
15972: IFFALSE 16084
// begin eventVar1 = 1 ;
15974: LD_ADDR_EXP 47
15978: PUSH
15979: LD_INT 1
15981: ST_TO_ADDR
// teleportExplored = 1 ;
15982: LD_ADDR_EXP 33
15986: PUSH
15987: LD_INT 1
15989: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
15990: LD_STRING M2a
15992: PPUSH
15993: CALL_OW 337
// wait ( 0 0$2 ) ;
15997: LD_INT 70
15999: PPUSH
16000: CALL_OW 67
// DialogueOn ;
16004: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
16008: LD_INT 22
16010: PUSH
16011: LD_INT 1
16013: PUSH
16014: EMPTY
16015: LIST
16016: LIST
16017: PUSH
16018: LD_INT 21
16020: PUSH
16021: LD_INT 1
16023: PUSH
16024: EMPTY
16025: LIST
16026: LIST
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: PPUSH
16032: CALL_OW 69
16036: PPUSH
16037: LD_STRING DT3a-Sol1-1
16039: PPUSH
16040: LD_STRING DT3a-FSol1-1
16042: PPUSH
16043: CALL 12340 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
16047: LD_EXP 1
16051: PPUSH
16052: LD_STRING DT3a-JMM-1
16054: PPUSH
16055: CALL_OW 88
// CenterNowOnUnits ( human ) ;
16059: LD_VAR 0 2
16063: PPUSH
16064: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
16068: LD_EXP 1
16072: PPUSH
16073: LD_STRING DT3a-JMM-1a
16075: PPUSH
16076: CALL_OW 88
// DialogueOff ;
16080: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 0 then
16084: LD_VAR 0 1
16088: PUSH
16089: LD_INT 10
16091: EQUAL
16092: PUSH
16093: LD_VAR 0 2
16097: PPUSH
16098: CALL_OW 247
16102: PUSH
16103: LD_INT 2
16105: EQUAL
16106: AND
16107: PUSH
16108: LD_VAR 0 2
16112: PPUSH
16113: CALL_OW 255
16117: PUSH
16118: LD_INT 3
16120: EQUAL
16121: AND
16122: PUSH
16123: LD_EXP 28
16127: PUSH
16128: LD_INT 0
16130: EQUAL
16131: AND
16132: IFFALSE 16149
// begin wait ( 0 0$3 ) ;
16134: LD_INT 105
16136: PPUSH
16137: CALL_OW 67
// vehicleTeleported = 1 ;
16141: LD_ADDR_EXP 28
16145: PUSH
16146: LD_INT 1
16148: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 2 then
16149: LD_VAR 0 1
16153: PUSH
16154: LD_INT 10
16156: EQUAL
16157: PUSH
16158: LD_VAR 0 2
16162: PPUSH
16163: CALL_OW 247
16167: PUSH
16168: LD_INT 2
16170: EQUAL
16171: AND
16172: PUSH
16173: LD_VAR 0 2
16177: PPUSH
16178: CALL_OW 255
16182: PUSH
16183: LD_INT 3
16185: EQUAL
16186: AND
16187: PUSH
16188: LD_EXP 28
16192: PUSH
16193: LD_INT 2
16195: EQUAL
16196: AND
16197: IFFALSE 16214
// begin wait ( 0 0$3 ) ;
16199: LD_INT 105
16201: PPUSH
16202: CALL_OW 67
// vehicleTeleported = 3 ;
16206: LD_ADDR_EXP 28
16210: PUSH
16211: LD_INT 3
16213: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
16214: LD_VAR 0 1
16218: PUSH
16219: LD_INT 10
16221: EQUAL
16222: PUSH
16223: LD_VAR 0 2
16227: PPUSH
16228: CALL_OW 247
16232: PUSH
16233: LD_INT 2
16235: EQUAL
16236: AND
16237: PUSH
16238: LD_VAR 0 2
16242: PPUSH
16243: CALL_OW 255
16247: PUSH
16248: LD_INT 3
16250: EQUAL
16251: AND
16252: IFFALSE 16268
// tpCounter = tpCounter + 1 ;
16254: LD_ADDR_EXP 29
16258: PUSH
16259: LD_EXP 29
16263: PUSH
16264: LD_INT 1
16266: PLUS
16267: ST_TO_ADDR
// end ;
16268: PPOPN 2
16270: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetWeapon ( vehicle ) = us_rocket_launcher then
16271: LD_VAR 0 1
16275: PPUSH
16276: CALL_OW 264
16280: PUSH
16281: LD_INT 7
16283: EQUAL
16284: IFFALSE 16294
// rocketBuilded := true ;
16286: LD_ADDR_EXP 51
16290: PUSH
16291: LD_INT 1
16293: ST_TO_ADDR
// if factory = ru_fact or factory = rufab2 then
16294: LD_VAR 0 2
16298: PUSH
16299: LD_INT 21
16301: EQUAL
16302: PUSH
16303: LD_VAR 0 2
16307: PUSH
16308: LD_INT 112
16310: EQUAL
16311: OR
16312: IFFALSE 16433
// if GetSide ( vehicle ) = 3 then
16314: LD_VAR 0 1
16318: PPUSH
16319: CALL_OW 255
16323: PUSH
16324: LD_INT 3
16326: EQUAL
16327: IFFALSE 16433
// begin if GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
16329: LD_VAR 0 1
16333: PPUSH
16334: CALL_OW 264
16338: PUSH
16339: LD_INT 46
16341: EQUAL
16342: PUSH
16343: LD_VAR 0 1
16347: PPUSH
16348: CALL_OW 264
16352: PUSH
16353: LD_INT 45
16355: EQUAL
16356: OR
16357: PUSH
16358: LD_VAR 0 1
16362: PPUSH
16363: CALL_OW 264
16367: PUSH
16368: LD_INT 44
16370: EQUAL
16371: OR
16372: IFFALSE 16390
// begin russianTanks = russianTanks ^ vehicle ;
16374: LD_ADDR_EXP 39
16378: PUSH
16379: LD_EXP 39
16383: PUSH
16384: LD_VAR 0 1
16388: ADD
16389: ST_TO_ADDR
// end ; if GetWeapon ( vehicle ) = 49 then
16390: LD_VAR 0 1
16394: PPUSH
16395: CALL_OW 264
16399: PUSH
16400: LD_INT 49
16402: EQUAL
16403: IFFALSE 16433
// begin russianTimeLapsers = russianTimeLapsers ^ vehicle ;
16405: LD_ADDR_EXP 40
16409: PUSH
16410: LD_EXP 40
16414: PUSH
16415: LD_VAR 0 1
16419: ADD
16420: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
16421: LD_VAR 0 1
16425: PPUSH
16426: LD_INT 137
16428: PPUSH
16429: CALL_OW 120
// end ; end ; end ;
16433: PPOPN 2
16435: END
// on LeaveVehicle ( vehicle , human ) do var i ;
16436: LD_INT 0
16438: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
16439: LD_VAR 0 2
16443: PPUSH
16444: CALL_OW 255
16448: PUSH
16449: LD_INT 3
16451: EQUAL
16452: PUSH
16453: LD_VAR 0 2
16457: PPUSH
16458: CALL_OW 257
16462: PUSH
16463: LD_INT 3
16465: EQUAL
16466: AND
16467: PUSH
16468: LD_INT 21
16470: PPUSH
16471: CALL_OW 255
16475: PUSH
16476: LD_INT 3
16478: EQUAL
16479: AND
16480: PUSH
16481: LD_INT 21
16483: PPUSH
16484: CALL_OW 302
16488: AND
16489: IFFALSE 16503
// ComEnterUnit ( human , ru_fact ) ;
16491: LD_VAR 0 2
16495: PPUSH
16496: LD_INT 21
16498: PPUSH
16499: CALL_OW 120
// if GetClass ( human ) = 4 and GetSide ( human ) = 3 and ruAI = 0 then
16503: LD_VAR 0 2
16507: PPUSH
16508: CALL_OW 257
16512: PUSH
16513: LD_INT 4
16515: EQUAL
16516: PUSH
16517: LD_VAR 0 2
16521: PPUSH
16522: CALL_OW 255
16526: PUSH
16527: LD_INT 3
16529: EQUAL
16530: AND
16531: PUSH
16532: LD_EXP 41
16536: PUSH
16537: LD_INT 0
16539: EQUAL
16540: AND
16541: IFFALSE 16603
// for i in RuScientists do
16543: LD_ADDR_VAR 0 3
16547: PUSH
16548: LD_EXP 34
16552: PUSH
16553: FOR_IN
16554: IFFALSE 16601
// if i = human then
16556: LD_VAR 0 3
16560: PUSH
16561: LD_VAR 0 2
16565: EQUAL
16566: IFFALSE 16599
// ComMoveToArea ( i , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
16568: LD_VAR 0 3
16572: PPUSH
16573: LD_INT 13
16575: PUSH
16576: LD_INT 14
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: PUSH
16583: LD_INT 1
16585: PPUSH
16586: LD_INT 2
16588: PPUSH
16589: CALL_OW 12
16593: ARRAY
16594: PPUSH
16595: CALL_OW 113
16599: GO 16553
16601: POP
16602: POP
// end ;
16603: PPOPN 3
16605: END
// on EnterVehicle ( vehicle , human ) do var i , rnd ;
16606: LD_INT 0
16608: PPUSH
16609: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 4 then
16610: LD_VAR 0 2
16614: PPUSH
16615: CALL_OW 255
16619: PUSH
16620: LD_INT 3
16622: EQUAL
16623: PUSH
16624: LD_VAR 0 2
16628: PPUSH
16629: CALL_OW 257
16633: PUSH
16634: LD_INT 4
16636: EQUAL
16637: AND
16638: IFFALSE 16780
// for i in RuScientists do
16640: LD_ADDR_VAR 0 3
16644: PUSH
16645: LD_EXP 34
16649: PUSH
16650: FOR_IN
16651: IFFALSE 16778
// if i = human then
16653: LD_VAR 0 3
16657: PUSH
16658: LD_VAR 0 2
16662: EQUAL
16663: IFFALSE 16776
// if IsOk ( rutp ) then
16665: LD_INT 137
16667: PPUSH
16668: CALL_OW 302
16672: IFFALSE 16745
// begin rnd = rand ( 1 , 2 ) ;
16674: LD_ADDR_VAR 0 4
16678: PUSH
16679: LD_INT 1
16681: PPUSH
16682: LD_INT 2
16684: PPUSH
16685: CALL_OW 12
16689: ST_TO_ADDR
// if rnd = 1 then
16690: LD_VAR 0 4
16694: PUSH
16695: LD_INT 1
16697: EQUAL
16698: IFFALSE 16712
// ComEnterUnit ( vehicle , rutp ) ;
16700: LD_VAR 0 1
16704: PPUSH
16705: LD_INT 137
16707: PPUSH
16708: CALL_OW 120
// AddComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
16712: LD_VAR 0 1
16716: PPUSH
16717: LD_INT 13
16719: PUSH
16720: LD_INT 14
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: PUSH
16727: LD_INT 1
16729: PPUSH
16730: LD_INT 2
16732: PPUSH
16733: CALL_OW 12
16737: ARRAY
16738: PPUSH
16739: CALL_OW 173
// end else
16743: GO 16776
// begin ComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
16745: LD_VAR 0 1
16749: PPUSH
16750: LD_INT 13
16752: PUSH
16753: LD_INT 14
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PUSH
16760: LD_INT 1
16762: PPUSH
16763: LD_INT 2
16765: PPUSH
16766: CALL_OW 12
16770: ARRAY
16771: PPUSH
16772: CALL_OW 113
// end ;
16776: GO 16650
16778: POP
16779: POP
// end ;
16780: PPOPN 4
16782: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16783: LD_VAR 0 1
16787: PPUSH
16788: CALL 33554 0 1
// end ; end_of_file
16792: PPOPN 1
16794: END
// every 0 0$1 trigger ruAI = 1 do
16795: LD_EXP 41
16799: PUSH
16800: LD_INT 1
16802: EQUAL
16803: IFFALSE 16915
16805: GO 16807
16807: DISABLE
// begin enable ;
16808: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
16809: LD_INT 3
16811: PPUSH
16812: LD_INT 6
16814: PPUSH
16815: LD_INT 9
16817: PPUSH
16818: LD_EXP 38
16822: PPUSH
16823: CALL 13197 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
16827: LD_INT 3
16829: PPUSH
16830: LD_INT 4
16832: PPUSH
16833: LD_INT 10
16835: PPUSH
16836: LD_EXP 38
16840: PPUSH
16841: CALL 13197 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
16845: LD_INT 3
16847: PPUSH
16848: LD_INT 9
16850: PPUSH
16851: CALL 14168 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
16855: LD_INT 3
16857: PPUSH
16858: LD_INT 10
16860: PPUSH
16861: CALL 14168 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
16865: LD_INT 3
16867: PPUSH
16868: LD_INT 16
16870: PPUSH
16871: LD_INT 9
16873: PPUSH
16874: LD_INT 91
16876: PPUSH
16877: CALL 13588 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
16881: LD_INT 3
16883: PPUSH
16884: LD_INT 17
16886: PPUSH
16887: LD_INT 10
16889: PPUSH
16890: LD_INT 47
16892: PUSH
16893: LD_INT 129
16895: PUSH
16896: LD_INT 135
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: LIST
16903: PPUSH
16904: CALL 13588 0 4
// IntBazooka ( 3 ) ;
16908: LD_INT 3
16910: PPUSH
16911: CALL 14495 0 1
// end ;
16915: END
// every 0 0$30 trigger russianTanks >= [ 3 , 4 , 4 , 5 ] [ Difficulty ] do var j , tmp , target1 , target2 ;
16916: LD_EXP 39
16920: PUSH
16921: LD_INT 3
16923: PUSH
16924: LD_INT 4
16926: PUSH
16927: LD_INT 4
16929: PUSH
16930: LD_INT 5
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: PUSH
16939: LD_OWVAR 67
16943: ARRAY
16944: GREATEREQUAL
16945: IFFALSE 17445
16947: GO 16949
16949: DISABLE
16950: LD_INT 0
16952: PPUSH
16953: PPUSH
16954: PPUSH
16955: PPUSH
// begin enable ;
16956: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
16957: LD_ADDR_VAR 0 2
16961: PUSH
16962: LD_EXP 39
16966: PUSH
16967: LD_EXP 40
16971: UNION
16972: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
16973: LD_ADDR_EXP 39
16977: PUSH
16978: LD_EXP 39
16982: PUSH
16983: LD_VAR 0 2
16987: DIFF
16988: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
16989: LD_ADDR_EXP 40
16993: PUSH
16994: LD_EXP 40
16998: PUSH
16999: LD_VAR 0 2
17003: DIFF
17004: ST_TO_ADDR
// if IsOk ( ruteleprt ) then
17005: LD_INT 10
17007: PPUSH
17008: CALL_OW 302
17012: IFFALSE 17095
// begin for j in tmp do
17014: LD_ADDR_VAR 0 1
17018: PUSH
17019: LD_VAR 0 2
17023: PUSH
17024: FOR_IN
17025: IFFALSE 17068
// if attackTactic < 2 then
17027: LD_EXP 43
17031: PUSH
17032: LD_INT 2
17034: LESS
17035: IFFALSE 17051
// ComEnterUnit ( j , ruteleprt ) else
17037: LD_VAR 0 1
17041: PPUSH
17042: LD_INT 10
17044: PPUSH
17045: CALL_OW 120
17049: GO 17066
// ComMoveXY ( j , 88 , 69 ) ;
17051: LD_VAR 0 1
17055: PPUSH
17056: LD_INT 88
17058: PPUSH
17059: LD_INT 69
17061: PPUSH
17062: CALL_OW 111
17066: GO 17024
17068: POP
17069: POP
// repeat wait ( 0 0$1 ) ;
17070: LD_INT 35
17072: PPUSH
17073: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
17077: LD_VAR 0 2
17081: PPUSH
17082: LD_INT 60
17084: PUSH
17085: EMPTY
17086: LIST
17087: PPUSH
17088: CALL_OW 72
17092: NOT
17093: IFFALSE 17070
// end ; repeat wait ( 0 0$1 ) ;
17095: LD_INT 35
17097: PPUSH
17098: CALL_OW 67
// for j in tmp do
17102: LD_ADDR_VAR 0 1
17106: PUSH
17107: LD_VAR 0 2
17111: PUSH
17112: FOR_IN
17113: IFFALSE 17436
// begin if IsDead ( j ) then
17115: LD_VAR 0 1
17119: PPUSH
17120: CALL_OW 301
17124: IFFALSE 17142
// tmp := tmp diff j ;
17126: LD_ADDR_VAR 0 2
17130: PUSH
17131: LD_VAR 0 2
17135: PUSH
17136: LD_VAR 0 1
17140: DIFF
17141: ST_TO_ADDR
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , j ) ;
17142: LD_ADDR_VAR 0 3
17146: PUSH
17147: LD_INT 81
17149: PUSH
17150: LD_INT 3
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: PPUSH
17157: CALL_OW 69
17161: PPUSH
17162: LD_VAR 0 1
17166: PPUSH
17167: CALL_OW 74
17171: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 3 ] , [ f_type , unit_human ] ] ] ) , j ) ;
17172: LD_ADDR_VAR 0 4
17176: PUSH
17177: LD_INT 81
17179: PUSH
17180: LD_INT 3
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: PUSH
17187: LD_INT 21
17189: PUSH
17190: LD_INT 1
17192: PUSH
17193: EMPTY
17194: LIST
17195: LIST
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: PUSH
17201: EMPTY
17202: LIST
17203: PPUSH
17204: CALL_OW 69
17208: PPUSH
17209: LD_VAR 0 1
17213: PPUSH
17214: CALL_OW 74
17218: ST_TO_ADDR
// if GetWeapon ( j ) = ru_time_lapser then
17219: LD_VAR 0 1
17223: PPUSH
17224: CALL_OW 264
17228: PUSH
17229: LD_INT 49
17231: EQUAL
17232: IFFALSE 17368
// begin if UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) > 1 and UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) then
17234: LD_VAR 0 2
17238: PPUSH
17239: LD_INT 3
17241: PUSH
17242: LD_INT 34
17244: PUSH
17245: LD_INT 49
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PPUSH
17256: CALL_OW 72
17260: PUSH
17261: LD_INT 1
17263: GREATER
17264: PUSH
17265: LD_VAR 0 2
17269: PPUSH
17270: LD_INT 3
17272: PUSH
17273: LD_INT 34
17275: PUSH
17276: LD_INT 49
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PPUSH
17287: CALL_OW 72
17291: AND
17292: IFFALSE 17342
// ComMoveUnit ( j , NearestUnitToUnit ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , j ) ) else
17294: LD_VAR 0 1
17298: PPUSH
17299: LD_VAR 0 2
17303: PPUSH
17304: LD_INT 3
17306: PUSH
17307: LD_INT 34
17309: PUSH
17310: LD_INT 49
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: PPUSH
17321: CALL_OW 72
17325: PPUSH
17326: LD_VAR 0 1
17330: PPUSH
17331: CALL_OW 74
17335: PPUSH
17336: CALL_OW 112
17340: GO 17366
// ComMoveUnit ( j , NearestUnitToUnit ( target1 , j ) ) ;
17342: LD_VAR 0 1
17346: PPUSH
17347: LD_VAR 0 3
17351: PPUSH
17352: LD_VAR 0 1
17356: PPUSH
17357: CALL_OW 74
17361: PPUSH
17362: CALL_OW 112
// end else
17366: GO 17434
// begin if GetDistUnits ( j , target2 ) < GetDistUnits ( j , target1 ) + 2 then
17368: LD_VAR 0 1
17372: PPUSH
17373: LD_VAR 0 4
17377: PPUSH
17378: CALL_OW 296
17382: PUSH
17383: LD_VAR 0 1
17387: PPUSH
17388: LD_VAR 0 3
17392: PPUSH
17393: CALL_OW 296
17397: PUSH
17398: LD_INT 2
17400: PLUS
17401: LESS
17402: IFFALSE 17420
// ComAttackUnit ( j , target2 ) else
17404: LD_VAR 0 1
17408: PPUSH
17409: LD_VAR 0 4
17413: PPUSH
17414: CALL_OW 115
17418: GO 17434
// ComAttackUnit ( j , target1 ) ;
17420: LD_VAR 0 1
17424: PPUSH
17425: LD_VAR 0 3
17429: PPUSH
17430: CALL_OW 115
// end ; end ;
17434: GO 17112
17436: POP
17437: POP
// until not tmp ;
17438: LD_VAR 0 2
17442: NOT
17443: IFFALSE 17095
// end ;
17445: PPOPN 4
17447: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
17448: LD_INT 4
17450: PPUSH
17451: CALL_OW 303
17455: IFFALSE 17470
17457: GO 17459
17459: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
17460: LD_INT 3
17462: PPUSH
17463: LD_INT 4
17465: PPUSH
17466: CALL 15147 0 2
17470: END
// every 0 0$1 do
17471: GO 17473
17473: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
17474: LD_INT 3
17476: PPUSH
17477: LD_INT 91
17479: PPUSH
17480: LD_INT 3
17482: PPUSH
17483: CALL 12956 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
17487: LD_INT 3
17489: PPUSH
17490: LD_INT 47
17492: PPUSH
17493: LD_INT 3
17495: PPUSH
17496: CALL 12956 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
17500: LD_INT 3
17502: PPUSH
17503: LD_INT 129
17505: PPUSH
17506: LD_INT 3
17508: PPUSH
17509: CALL 12956 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
17513: LD_INT 3
17515: PPUSH
17516: LD_INT 3
17518: PPUSH
17519: LD_INT 3
17521: PPUSH
17522: CALL 12956 0 3
// end ;
17526: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
17527: LD_INT 22
17529: PUSH
17530: LD_INT 1
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: PUSH
17537: LD_INT 21
17539: PUSH
17540: LD_INT 3
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: PPUSH
17551: CALL_OW 69
17555: IFFALSE 17624
17557: GO 17559
17559: DISABLE
// begin wait ( 0 0$40 ) ;
17560: LD_INT 1400
17562: PPUSH
17563: CALL_OW 67
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 , 5 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17567: LD_INT 3
17569: PPUSH
17570: LD_INT 21
17572: PPUSH
17573: LD_INT 3
17575: PUSH
17576: LD_INT 4
17578: PUSH
17579: LD_INT 4
17581: PUSH
17582: LD_INT 5
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: PUSH
17591: LD_OWVAR 67
17595: ARRAY
17596: PPUSH
17597: LD_INT 46
17599: PUSH
17600: LD_INT 45
17602: PUSH
17603: LD_INT 44
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: LIST
17610: PPUSH
17611: LD_INT 3
17613: PPUSH
17614: LD_INT 3
17616: PPUSH
17617: LD_INT 24
17619: PPUSH
17620: CALL 14348 0 7
// end ;
17624: END
// every 6 6$0 + 2 2$00 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
17625: LD_EXP 27
17629: PUSH
17630: LD_INT 2
17632: EQUAL
17633: PUSH
17634: LD_INT 21
17636: PPUSH
17637: CALL_OW 255
17641: PUSH
17642: LD_INT 3
17644: EQUAL
17645: AND
17646: PUSH
17647: LD_INT 112
17649: PPUSH
17650: CALL_OW 255
17654: PUSH
17655: LD_INT 3
17657: EQUAL
17658: AND
17659: PUSH
17660: LD_INT 21
17662: PPUSH
17663: CALL_OW 302
17667: AND
17668: PUSH
17669: LD_INT 112
17671: PPUSH
17672: CALL_OW 302
17676: AND
17677: PUSH
17678: LD_INT 22
17680: PUSH
17681: LD_INT 3
17683: PUSH
17684: EMPTY
17685: LIST
17686: LIST
17687: PUSH
17688: LD_INT 21
17690: PUSH
17691: LD_INT 2
17693: PUSH
17694: EMPTY
17695: LIST
17696: LIST
17697: PUSH
17698: LD_INT 50
17700: PUSH
17701: EMPTY
17702: LIST
17703: PUSH
17704: LD_INT 3
17706: PUSH
17707: LD_INT 58
17709: PUSH
17710: EMPTY
17711: LIST
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: PPUSH
17723: CALL_OW 69
17727: PUSH
17728: LD_INT 18
17730: PPUSH
17731: LD_INT 22
17733: PUSH
17734: LD_INT 3
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: PUSH
17741: LD_INT 21
17743: PUSH
17744: LD_INT 2
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: PUSH
17751: EMPTY
17752: LIST
17753: LIST
17754: PPUSH
17755: CALL_OW 70
17759: PUSH
17760: LD_INT 0
17762: EQUAL
17763: DIFF
17764: AND
17765: IFFALSE 17891
17767: GO 17769
17769: DISABLE
// begin enable ;
17770: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 , 5 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17771: LD_INT 3
17773: PPUSH
17774: LD_INT 21
17776: PPUSH
17777: LD_INT 3
17779: PUSH
17780: LD_INT 4
17782: PUSH
17783: LD_INT 4
17785: PUSH
17786: LD_INT 5
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: PUSH
17795: LD_OWVAR 67
17799: ARRAY
17800: PPUSH
17801: LD_INT 46
17803: PUSH
17804: LD_INT 45
17806: PUSH
17807: LD_INT 44
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: LIST
17814: PPUSH
17815: LD_INT 3
17817: PPUSH
17818: LD_INT 3
17820: PPUSH
17821: LD_INT 24
17823: PPUSH
17824: CALL 14348 0 7
// if russianTimeLapsers = 0 then
17828: LD_EXP 40
17832: PUSH
17833: LD_INT 0
17835: EQUAL
17836: IFFALSE 17891
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
17838: LD_INT 3
17840: PPUSH
17841: LD_INT 112
17843: PPUSH
17844: LD_INT 1
17846: PUSH
17847: LD_INT 2
17849: PUSH
17850: LD_INT 2
17852: PUSH
17853: LD_INT 2
17855: PUSH
17856: EMPTY
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: PUSH
17862: LD_OWVAR 67
17866: ARRAY
17867: PPUSH
17868: LD_INT 49
17870: PUSH
17871: LD_INT 49
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: PPUSH
17878: LD_INT 3
17880: PPUSH
17881: LD_INT 3
17883: PPUSH
17884: LD_INT 24
17886: PPUSH
17887: CALL 14348 0 7
// end ;
17891: END
// every 0 0$1 trigger arabianMines do var i ;
17892: LD_EXP 44
17896: IFFALSE 18017
17898: GO 17900
17900: DISABLE
17901: LD_INT 0
17903: PPUSH
// begin enable ;
17904: ENABLE
// for i in arabianMines do
17905: LD_ADDR_VAR 0 1
17909: PUSH
17910: LD_EXP 44
17914: PUSH
17915: FOR_IN
17916: IFFALSE 18015
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
17918: LD_INT 22
17920: PUSH
17921: LD_INT 1
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PUSH
17928: LD_INT 92
17930: PUSH
17931: LD_VAR 0 1
17935: PUSH
17936: LD_INT 1
17938: ARRAY
17939: PUSH
17940: LD_VAR 0 1
17944: PUSH
17945: LD_INT 2
17947: ARRAY
17948: PUSH
17949: LD_INT 3
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: PUSH
17958: EMPTY
17959: LIST
17960: LIST
17961: PPUSH
17962: CALL_OW 69
17966: IFFALSE 18013
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
17968: LD_VAR 0 1
17972: PUSH
17973: LD_INT 1
17975: ARRAY
17976: PPUSH
17977: LD_VAR 0 1
17981: PUSH
17982: LD_INT 2
17984: ARRAY
17985: PPUSH
17986: LD_INT 5
17988: PPUSH
17989: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
17993: LD_ADDR_EXP 44
17997: PUSH
17998: LD_EXP 44
18002: PPUSH
18003: LD_VAR 0 1
18007: PPUSH
18008: CALL_OW 3
18012: ST_TO_ADDR
// end ; end ;
18013: GO 17915
18015: POP
18016: POP
// end ;
18017: PPOPN 1
18019: END
// every 0 0$1 trigger vehicleTeleported = 4 and tpCounter = [ 6 , 8 , 8 , 8 ] [ Difficulty ] do
18020: LD_EXP 28
18024: PUSH
18025: LD_INT 4
18027: EQUAL
18028: PUSH
18029: LD_EXP 29
18033: PUSH
18034: LD_INT 6
18036: PUSH
18037: LD_INT 8
18039: PUSH
18040: LD_INT 8
18042: PUSH
18043: LD_INT 8
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: PUSH
18052: LD_OWVAR 67
18056: ARRAY
18057: EQUAL
18058: AND
18059: IFFALSE 18077
18061: GO 18063
18063: DISABLE
// TeleportExit ( ruteleprt , 47 , 82 ) ;
18064: LD_INT 10
18066: PPUSH
18067: LD_INT 47
18069: PPUSH
18070: LD_INT 82
18072: PPUSH
18073: CALL_OW 243
18077: END
// every 2 2$0 trigger vehicleTeleported = 4 do
18078: LD_EXP 28
18082: PUSH
18083: LD_INT 4
18085: EQUAL
18086: IFFALSE 18108
18088: GO 18090
18090: DISABLE
// begin enable ;
18091: ENABLE
// attackTactic = rand ( 1 , 2 ) ;
18092: LD_ADDR_EXP 43
18096: PUSH
18097: LD_INT 1
18099: PPUSH
18100: LD_INT 2
18102: PPUSH
18103: CALL_OW 12
18107: ST_TO_ADDR
// end ; end_of_file
18108: END
// every 0 0$1 trigger IsDead ( ruheadlab ) do
18109: LD_INT 3
18111: PPUSH
18112: CALL_OW 301
18116: IFFALSE 18305
18118: GO 18120
18120: DISABLE
// begin if sciCounter = 0 then
18121: LD_EXP 35
18125: PUSH
18126: LD_INT 0
18128: EQUAL
18129: IFFALSE 18157
// begin Say ( JMM , D7a-JMM-1 ) ;
18131: LD_EXP 1
18135: PPUSH
18136: LD_STRING D7a-JMM-1
18138: PPUSH
18139: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
18143: LD_EXP 22
18147: PPUSH
18148: LD_STRING D7a-Pow-1
18150: PPUSH
18151: CALL_OW 94
// end else
18155: GO 18301
// if sciCounter < 6 then
18157: LD_EXP 35
18161: PUSH
18162: LD_INT 6
18164: LESS
18165: IFFALSE 18193
// begin Say ( JMM , D7b-JMM-1 ) ;
18167: LD_EXP 1
18171: PPUSH
18172: LD_STRING D7b-JMM-1
18174: PPUSH
18175: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
18179: LD_EXP 22
18183: PPUSH
18184: LD_STRING D7b-Pow-1
18186: PPUSH
18187: CALL_OW 94
// end else
18191: GO 18301
// begin Say ( JMM , D7c-JMM-1 ) ;
18193: LD_EXP 1
18197: PPUSH
18198: LD_STRING D7c-JMM-1
18200: PPUSH
18201: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
18205: LD_EXP 22
18209: PPUSH
18210: LD_STRING D7c-Pow-1
18212: PPUSH
18213: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
18217: LD_EXP 1
18221: PPUSH
18222: LD_STRING D7d-JMM-1
18224: PPUSH
18225: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
18229: LD_EXP 22
18233: PPUSH
18234: LD_STRING D7d-Pow-1
18236: PPUSH
18237: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
18241: LD_EXP 1
18245: PPUSH
18246: LD_STRING D7d-JMM-2
18248: PPUSH
18249: CALL_OW 88
// if askSiberite = 1 then
18253: LD_EXP 32
18257: PUSH
18258: LD_INT 1
18260: EQUAL
18261: IFFALSE 18277
// Say ( JMM , D7d-JMM-2a ) else
18263: LD_EXP 1
18267: PPUSH
18268: LD_STRING D7d-JMM-2a
18270: PPUSH
18271: CALL_OW 88
18275: GO 18289
// SayRadio ( Powell , D7d-Pow-2 ) ;
18277: LD_EXP 22
18281: PPUSH
18282: LD_STRING D7d-Pow-2
18284: PPUSH
18285: CALL_OW 94
// SayRadio ( Powell , D7d-Pow-2a ) ;
18289: LD_EXP 22
18293: PPUSH
18294: LD_STRING D7d-Pow-2a
18296: PPUSH
18297: CALL_OW 94
// end ; FinishMission ;
18301: CALL 18306 0 0
// end ;
18305: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
18306: LD_INT 0
18308: PPUSH
18309: PPUSH
18310: PPUSH
18311: PPUSH
// m1 := false ;
18312: LD_ADDR_VAR 0 2
18316: PUSH
18317: LD_INT 0
18319: ST_TO_ADDR
// m2 := false ;
18320: LD_ADDR_VAR 0 3
18324: PUSH
18325: LD_INT 0
18327: ST_TO_ADDR
// m3 := false ;
18328: LD_ADDR_VAR 0 4
18332: PUSH
18333: LD_INT 0
18335: ST_TO_ADDR
// if not westPathUsed then
18336: LD_EXP 49
18340: NOT
18341: IFFALSE 18350
// SetAchievement ( ACH_PATH ) ;
18343: LD_STRING ACH_PATH
18345: PPUSH
18346: CALL_OW 543
// if not rocketBuilded then
18350: LD_EXP 51
18354: NOT
18355: IFFALSE 18371
// begin wait ( 3 ) ;
18357: LD_INT 3
18359: PPUSH
18360: CALL_OW 67
// SetAchievement ( ACH_ROCKET ) ;
18364: LD_STRING ACH_ROCKET
18366: PPUSH
18367: CALL_OW 543
// end ; if tick <= 40 40$00 then
18371: LD_OWVAR 1
18375: PUSH
18376: LD_INT 84000
18378: LESSEQUAL
18379: IFFALSE 18395
// begin wait ( 3 ) ;
18381: LD_INT 3
18383: PPUSH
18384: CALL_OW 67
// SetAchievement ( ACH_ASPEED_12 ) ;
18388: LD_STRING ACH_ASPEED_12
18390: PPUSH
18391: CALL_OW 543
// end ; if teleportExplored = 1 then
18395: LD_EXP 33
18399: PUSH
18400: LD_INT 1
18402: EQUAL
18403: IFFALSE 18425
// begin m1 := true ;
18405: LD_ADDR_VAR 0 2
18409: PUSH
18410: LD_INT 1
18412: ST_TO_ADDR
// AddMedal ( Teleport , 1 ) ;
18413: LD_STRING Teleport
18415: PPUSH
18416: LD_INT 1
18418: PPUSH
18419: CALL_OW 101
// end else
18423: GO 18436
// AddMedal ( Teleport , - 1 ) ;
18425: LD_STRING Teleport
18427: PPUSH
18428: LD_INT 1
18430: NEG
18431: PPUSH
18432: CALL_OW 101
// if sciCounter > 2 then
18436: LD_EXP 35
18440: PUSH
18441: LD_INT 2
18443: GREATER
18444: IFFALSE 18466
// begin m2 := true ;
18446: LD_ADDR_VAR 0 3
18450: PUSH
18451: LD_INT 1
18453: ST_TO_ADDR
// AddMedal ( Materials , 1 ) ;
18454: LD_STRING Materials
18456: PPUSH
18457: LD_INT 1
18459: PPUSH
18460: CALL_OW 101
// end else
18464: GO 18477
// AddMedal ( Materials , - 1 ) ;
18466: LD_STRING Materials
18468: PPUSH
18469: LD_INT 1
18471: NEG
18472: PPUSH
18473: CALL_OW 101
// if sciCounter >= 6 then
18477: LD_EXP 35
18481: PUSH
18482: LD_INT 6
18484: GREATEREQUAL
18485: IFFALSE 18517
// begin m3 := true ;
18487: LD_ADDR_VAR 0 4
18491: PUSH
18492: LD_INT 1
18494: ST_TO_ADDR
// AddMedal ( Scientists , 1 ) ;
18495: LD_STRING Scientists
18497: PPUSH
18498: LD_INT 1
18500: PPUSH
18501: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
18505: LD_INT 1
18507: PPUSH
18508: LD_STRING 12_SciDed_1
18510: PPUSH
18511: CALL_OW 39
// end else
18515: GO 18538
// begin AddMedal ( Scientists , - 1 ) ;
18517: LD_STRING Scientists
18519: PPUSH
18520: LD_INT 1
18522: NEG
18523: PPUSH
18524: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
18528: LD_INT 0
18530: PPUSH
18531: LD_STRING 12_SciDed_1
18533: PPUSH
18534: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
18538: LD_EXP 31
18542: PPUSH
18543: LD_STRING 12_MainDepositFake_1
18545: PPUSH
18546: CALL_OW 39
// if m1 and m2 and m3 and Difficulty >= 3 then
18550: LD_VAR 0 2
18554: PUSH
18555: LD_VAR 0 3
18559: AND
18560: PUSH
18561: LD_VAR 0 4
18565: AND
18566: PUSH
18567: LD_OWVAR 67
18571: PUSH
18572: LD_INT 3
18574: GREATEREQUAL
18575: AND
18576: IFFALSE 18588
// SetAchievementEX ( ACH_AMER , 12 ) ;
18578: LD_STRING ACH_AMER
18580: PPUSH
18581: LD_INT 12
18583: PPUSH
18584: CALL_OW 564
// GiveMedals ( MAIN ) ;
18588: LD_STRING MAIN
18590: PPUSH
18591: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
18595: LD_INT 22
18597: PUSH
18598: LD_INT 1
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: LD_INT 21
18607: PUSH
18608: LD_INT 1
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: PUSH
18615: LD_INT 2
18617: PUSH
18618: LD_INT 25
18620: PUSH
18621: LD_INT 1
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: PUSH
18628: LD_INT 25
18630: PUSH
18631: LD_INT 2
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: PUSH
18638: LD_INT 25
18640: PUSH
18641: LD_INT 3
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: PUSH
18648: LD_INT 25
18650: PUSH
18651: LD_INT 4
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: PUSH
18658: LD_INT 25
18660: PUSH
18661: LD_INT 5
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PUSH
18668: LD_INT 25
18670: PUSH
18671: LD_INT 8
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: LIST
18691: PPUSH
18692: CALL_OW 69
18696: PPUSH
18697: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18701: LD_EXP 1
18705: PPUSH
18706: LD_EXP 46
18710: PUSH
18711: LD_STRING JMM
18713: STR
18714: PPUSH
18715: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18719: LD_EXP 7
18723: PPUSH
18724: LD_EXP 46
18728: PUSH
18729: LD_STRING Brown
18731: STR
18732: PPUSH
18733: CALL 12300 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18737: LD_EXP 3
18741: PPUSH
18742: LD_EXP 46
18746: PUSH
18747: LD_STRING Donaldson
18749: STR
18750: PPUSH
18751: CALL 12300 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18755: LD_EXP 4
18759: PPUSH
18760: LD_EXP 46
18764: PUSH
18765: LD_STRING Bobby
18767: STR
18768: PPUSH
18769: CALL 12300 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18773: LD_EXP 5
18777: PPUSH
18778: LD_EXP 46
18782: PUSH
18783: LD_STRING Cyrus
18785: STR
18786: PPUSH
18787: CALL 12300 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18791: LD_EXP 2
18795: PPUSH
18796: LD_EXP 46
18800: PUSH
18801: LD_STRING Lisa
18803: STR
18804: PPUSH
18805: CALL 12300 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18809: LD_EXP 12
18813: PPUSH
18814: LD_EXP 46
18818: PUSH
18819: LD_STRING Frank
18821: STR
18822: PPUSH
18823: CALL 12300 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
18827: LD_EXP 13
18831: PPUSH
18832: LD_EXP 46
18836: PUSH
18837: LD_STRING Kikuchi
18839: STR
18840: PPUSH
18841: CALL 12300 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
18845: LD_EXP 9
18849: PPUSH
18850: LD_EXP 46
18854: PUSH
18855: LD_STRING Houten
18857: STR
18858: PPUSH
18859: CALL 12300 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
18863: LD_EXP 11
18867: PPUSH
18868: LD_EXP 46
18872: PUSH
18873: LD_STRING Gary
18875: STR
18876: PPUSH
18877: CALL 12300 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
18881: LD_EXP 10
18885: PPUSH
18886: LD_EXP 46
18890: PUSH
18891: LD_STRING Cornell
18893: STR
18894: PPUSH
18895: CALL 12300 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18899: LD_EXP 6
18903: PPUSH
18904: LD_EXP 46
18908: PUSH
18909: LD_STRING Denis
18911: STR
18912: PPUSH
18913: CALL 12300 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18917: LD_EXP 8
18921: PPUSH
18922: LD_EXP 46
18926: PUSH
18927: LD_STRING Gladstone
18929: STR
18930: PPUSH
18931: CALL 12300 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
18935: LD_INT 22
18937: PUSH
18938: LD_INT 1
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PUSH
18945: LD_INT 23
18947: PUSH
18948: LD_INT 1
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PUSH
18955: LD_INT 21
18957: PUSH
18958: LD_INT 1
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: PUSH
18965: LD_INT 2
18967: PUSH
18968: LD_INT 25
18970: PUSH
18971: LD_INT 1
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PUSH
18978: LD_INT 25
18980: PUSH
18981: LD_INT 2
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: PUSH
18988: LD_INT 25
18990: PUSH
18991: LD_INT 3
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: PUSH
18998: LD_INT 25
19000: PUSH
19001: LD_INT 4
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: PUSH
19008: LD_INT 25
19010: PUSH
19011: LD_INT 5
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: LD_INT 25
19020: PUSH
19021: LD_INT 8
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: PPUSH
19043: CALL_OW 69
19047: PUSH
19048: LD_EXP 1
19052: PUSH
19053: LD_EXP 7
19057: PUSH
19058: LD_EXP 3
19062: PUSH
19063: LD_EXP 4
19067: PUSH
19068: LD_EXP 5
19072: PUSH
19073: LD_EXP 2
19077: PUSH
19078: LD_EXP 12
19082: PUSH
19083: LD_EXP 8
19087: PUSH
19088: LD_EXP 13
19092: PUSH
19093: LD_EXP 6
19097: PUSH
19098: LD_EXP 9
19102: PUSH
19103: LD_EXP 11
19107: PUSH
19108: LD_EXP 10
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: DIFF
19128: PPUSH
19129: LD_STRING 12_other_survivors
19131: PPUSH
19132: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
19136: LD_INT 22
19138: PUSH
19139: LD_INT 1
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: LD_INT 23
19148: PUSH
19149: LD_INT 2
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 21
19158: PUSH
19159: LD_INT 1
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: LD_INT 2
19168: PUSH
19169: LD_INT 25
19171: PUSH
19172: LD_INT 1
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: PUSH
19179: LD_INT 25
19181: PUSH
19182: LD_INT 2
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PUSH
19189: LD_INT 25
19191: PUSH
19192: LD_INT 3
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: LD_INT 25
19201: PUSH
19202: LD_INT 4
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PUSH
19209: LD_INT 25
19211: PUSH
19212: LD_INT 5
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: PUSH
19219: LD_INT 25
19221: PUSH
19222: LD_INT 8
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: PPUSH
19244: CALL_OW 69
19248: PPUSH
19249: LD_STRING 12_kurt_squad
19251: PPUSH
19252: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
19256: LD_EXP 14
19260: PPUSH
19261: LD_STRING 12_others
19263: PPUSH
19264: CALL_OW 38
// YouWin ;
19268: CALL_OW 103
// end ; end_of_file
19272: LD_VAR 0 1
19276: RET
// every 0 0$1 trigger IsDead ( JMM ) do
19277: LD_EXP 1
19281: PPUSH
19282: CALL_OW 301
19286: IFFALSE 19298
19288: GO 19290
19290: DISABLE
// YouLost ( JMM ) ; end_of_file
19291: LD_STRING JMM
19293: PPUSH
19294: CALL_OW 104
19298: END
// every 0 0$01 do
19299: GO 19301
19301: DISABLE
// begin repeat wait ( 0 0$30 ) ;
19302: LD_INT 1050
19304: PPUSH
19305: CALL_OW 67
// if cratesSpawned < 6 then
19309: LD_EXP 45
19313: PUSH
19314: LD_INT 6
19316: LESS
19317: IFFALSE 19354
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19319: LD_INT 3
19321: PPUSH
19322: LD_INT 5
19324: PPUSH
19325: CALL_OW 12
19329: PPUSH
19330: LD_INT 21
19332: PPUSH
19333: LD_INT 1
19335: PPUSH
19336: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19340: LD_ADDR_EXP 45
19344: PUSH
19345: LD_EXP 45
19349: PUSH
19350: LD_INT 1
19352: PLUS
19353: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
19354: LD_EXP 45
19358: PUSH
19359: LD_INT 6
19361: GREATEREQUAL
19362: PUSH
19363: LD_EXP 45
19367: PUSH
19368: LD_INT 12
19370: LESS
19371: AND
19372: IFFALSE 19416
// begin wait ( 0 0$50 ) ;
19374: LD_INT 1750
19376: PPUSH
19377: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19381: LD_INT 3
19383: PPUSH
19384: LD_INT 5
19386: PPUSH
19387: CALL_OW 12
19391: PPUSH
19392: LD_INT 21
19394: PPUSH
19395: LD_INT 1
19397: PPUSH
19398: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19402: LD_ADDR_EXP 45
19406: PUSH
19407: LD_EXP 45
19411: PUSH
19412: LD_INT 1
19414: PLUS
19415: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
19416: LD_EXP 45
19420: PUSH
19421: LD_INT 12
19423: GREATEREQUAL
19424: IFFALSE 19468
// begin wait ( 1 1$40 ) ;
19426: LD_INT 3500
19428: PPUSH
19429: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19433: LD_INT 3
19435: PPUSH
19436: LD_INT 5
19438: PPUSH
19439: CALL_OW 12
19443: PPUSH
19444: LD_INT 21
19446: PPUSH
19447: LD_INT 1
19449: PPUSH
19450: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19454: LD_ADDR_EXP 45
19458: PUSH
19459: LD_EXP 45
19463: PUSH
19464: LD_INT 1
19466: PLUS
19467: ST_TO_ADDR
// end ; until false ;
19468: LD_INT 0
19470: IFFALSE 19302
// end ; end_of_file
19472: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
19473: LD_INT 0
19475: PPUSH
// ar_miner := 81 ;
19476: LD_ADDR_EXP 59
19480: PUSH
19481: LD_INT 81
19483: ST_TO_ADDR
// ar_crane := 88 ;
19484: LD_ADDR_EXP 58
19488: PUSH
19489: LD_INT 88
19491: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19492: LD_ADDR_EXP 53
19496: PUSH
19497: LD_INT 89
19499: ST_TO_ADDR
// us_hack := 99 ;
19500: LD_ADDR_EXP 54
19504: PUSH
19505: LD_INT 99
19507: ST_TO_ADDR
// us_artillery := 97 ;
19508: LD_ADDR_EXP 55
19512: PUSH
19513: LD_INT 97
19515: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19516: LD_ADDR_EXP 56
19520: PUSH
19521: LD_INT 91
19523: ST_TO_ADDR
// ar_mortar := 92 ;
19524: LD_ADDR_EXP 57
19528: PUSH
19529: LD_INT 92
19531: ST_TO_ADDR
// ru_radar := 98 ;
19532: LD_ADDR_EXP 52
19536: PUSH
19537: LD_INT 98
19539: ST_TO_ADDR
// tech_Artillery := 80 ;
19540: LD_ADDR_EXP 60
19544: PUSH
19545: LD_INT 80
19547: ST_TO_ADDR
// tech_RadMat := 81 ;
19548: LD_ADDR_EXP 61
19552: PUSH
19553: LD_INT 81
19555: ST_TO_ADDR
// tech_BasicTools := 82 ;
19556: LD_ADDR_EXP 62
19560: PUSH
19561: LD_INT 82
19563: ST_TO_ADDR
// tech_Cargo := 83 ;
19564: LD_ADDR_EXP 63
19568: PUSH
19569: LD_INT 83
19571: ST_TO_ADDR
// tech_Track := 84 ;
19572: LD_ADDR_EXP 64
19576: PUSH
19577: LD_INT 84
19579: ST_TO_ADDR
// tech_Crane := 85 ;
19580: LD_ADDR_EXP 65
19584: PUSH
19585: LD_INT 85
19587: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19588: LD_ADDR_EXP 66
19592: PUSH
19593: LD_INT 86
19595: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19596: LD_ADDR_EXP 67
19600: PUSH
19601: LD_INT 87
19603: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19604: LD_ADDR_EXP 68
19608: PUSH
19609: LD_INT 88
19611: ST_TO_ADDR
// class_mastodont := 31 ;
19612: LD_ADDR_EXP 69
19616: PUSH
19617: LD_INT 31
19619: ST_TO_ADDR
// class_horse := 21 ;
19620: LD_ADDR_EXP 70
19624: PUSH
19625: LD_INT 21
19627: ST_TO_ADDR
// end ;
19628: LD_VAR 0 1
19632: RET
// every 1 do
19633: GO 19635
19635: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
19636: CALL 19473 0 0
19640: END
// every 0 0$1 do
19641: GO 19643
19643: DISABLE
// begin enable ;
19644: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19645: LD_STRING updateTimer(
19647: PUSH
19648: LD_OWVAR 1
19652: STR
19653: PUSH
19654: LD_STRING );
19656: STR
19657: PPUSH
19658: CALL_OW 559
// end ;
19662: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19663: LD_INT 0
19665: PPUSH
// if p2 = 100 then
19666: LD_VAR 0 2
19670: PUSH
19671: LD_INT 100
19673: EQUAL
19674: IFFALSE 20677
// begin if not StreamModeActive then
19676: LD_EXP 71
19680: NOT
19681: IFFALSE 19691
// StreamModeActive := true ;
19683: LD_ADDR_EXP 71
19687: PUSH
19688: LD_INT 1
19690: ST_TO_ADDR
// if p3 = 0 then
19691: LD_VAR 0 3
19695: PUSH
19696: LD_INT 0
19698: EQUAL
19699: IFFALSE 19705
// InitStreamMode ;
19701: CALL 20837 0 0
// if p3 = 1 then
19705: LD_VAR 0 3
19709: PUSH
19710: LD_INT 1
19712: EQUAL
19713: IFFALSE 19723
// sRocket := true ;
19715: LD_ADDR_EXP 76
19719: PUSH
19720: LD_INT 1
19722: ST_TO_ADDR
// if p3 = 2 then
19723: LD_VAR 0 3
19727: PUSH
19728: LD_INT 2
19730: EQUAL
19731: IFFALSE 19741
// sSpeed := true ;
19733: LD_ADDR_EXP 75
19737: PUSH
19738: LD_INT 1
19740: ST_TO_ADDR
// if p3 = 3 then
19741: LD_VAR 0 3
19745: PUSH
19746: LD_INT 3
19748: EQUAL
19749: IFFALSE 19759
// sEngine := true ;
19751: LD_ADDR_EXP 77
19755: PUSH
19756: LD_INT 1
19758: ST_TO_ADDR
// if p3 = 4 then
19759: LD_VAR 0 3
19763: PUSH
19764: LD_INT 4
19766: EQUAL
19767: IFFALSE 19777
// sSpec := true ;
19769: LD_ADDR_EXP 74
19773: PUSH
19774: LD_INT 1
19776: ST_TO_ADDR
// if p3 = 5 then
19777: LD_VAR 0 3
19781: PUSH
19782: LD_INT 5
19784: EQUAL
19785: IFFALSE 19795
// sLevel := true ;
19787: LD_ADDR_EXP 78
19791: PUSH
19792: LD_INT 1
19794: ST_TO_ADDR
// if p3 = 6 then
19795: LD_VAR 0 3
19799: PUSH
19800: LD_INT 6
19802: EQUAL
19803: IFFALSE 19813
// sArmoury := true ;
19805: LD_ADDR_EXP 79
19809: PUSH
19810: LD_INT 1
19812: ST_TO_ADDR
// if p3 = 7 then
19813: LD_VAR 0 3
19817: PUSH
19818: LD_INT 7
19820: EQUAL
19821: IFFALSE 19831
// sRadar := true ;
19823: LD_ADDR_EXP 80
19827: PUSH
19828: LD_INT 1
19830: ST_TO_ADDR
// if p3 = 8 then
19831: LD_VAR 0 3
19835: PUSH
19836: LD_INT 8
19838: EQUAL
19839: IFFALSE 19849
// sBunker := true ;
19841: LD_ADDR_EXP 81
19845: PUSH
19846: LD_INT 1
19848: ST_TO_ADDR
// if p3 = 9 then
19849: LD_VAR 0 3
19853: PUSH
19854: LD_INT 9
19856: EQUAL
19857: IFFALSE 19867
// sHack := true ;
19859: LD_ADDR_EXP 82
19863: PUSH
19864: LD_INT 1
19866: ST_TO_ADDR
// if p3 = 10 then
19867: LD_VAR 0 3
19871: PUSH
19872: LD_INT 10
19874: EQUAL
19875: IFFALSE 19885
// sFire := true ;
19877: LD_ADDR_EXP 83
19881: PUSH
19882: LD_INT 1
19884: ST_TO_ADDR
// if p3 = 11 then
19885: LD_VAR 0 3
19889: PUSH
19890: LD_INT 11
19892: EQUAL
19893: IFFALSE 19903
// sRefresh := true ;
19895: LD_ADDR_EXP 84
19899: PUSH
19900: LD_INT 1
19902: ST_TO_ADDR
// if p3 = 12 then
19903: LD_VAR 0 3
19907: PUSH
19908: LD_INT 12
19910: EQUAL
19911: IFFALSE 19921
// sExp := true ;
19913: LD_ADDR_EXP 85
19917: PUSH
19918: LD_INT 1
19920: ST_TO_ADDR
// if p3 = 13 then
19921: LD_VAR 0 3
19925: PUSH
19926: LD_INT 13
19928: EQUAL
19929: IFFALSE 19939
// sDepot := true ;
19931: LD_ADDR_EXP 86
19935: PUSH
19936: LD_INT 1
19938: ST_TO_ADDR
// if p3 = 14 then
19939: LD_VAR 0 3
19943: PUSH
19944: LD_INT 14
19946: EQUAL
19947: IFFALSE 19957
// sFlag := true ;
19949: LD_ADDR_EXP 87
19953: PUSH
19954: LD_INT 1
19956: ST_TO_ADDR
// if p3 = 15 then
19957: LD_VAR 0 3
19961: PUSH
19962: LD_INT 15
19964: EQUAL
19965: IFFALSE 19975
// sKamikadze := true ;
19967: LD_ADDR_EXP 95
19971: PUSH
19972: LD_INT 1
19974: ST_TO_ADDR
// if p3 = 16 then
19975: LD_VAR 0 3
19979: PUSH
19980: LD_INT 16
19982: EQUAL
19983: IFFALSE 19993
// sTroll := true ;
19985: LD_ADDR_EXP 96
19989: PUSH
19990: LD_INT 1
19992: ST_TO_ADDR
// if p3 = 17 then
19993: LD_VAR 0 3
19997: PUSH
19998: LD_INT 17
20000: EQUAL
20001: IFFALSE 20011
// sSlow := true ;
20003: LD_ADDR_EXP 97
20007: PUSH
20008: LD_INT 1
20010: ST_TO_ADDR
// if p3 = 18 then
20011: LD_VAR 0 3
20015: PUSH
20016: LD_INT 18
20018: EQUAL
20019: IFFALSE 20029
// sLack := true ;
20021: LD_ADDR_EXP 98
20025: PUSH
20026: LD_INT 1
20028: ST_TO_ADDR
// if p3 = 19 then
20029: LD_VAR 0 3
20033: PUSH
20034: LD_INT 19
20036: EQUAL
20037: IFFALSE 20047
// sTank := true ;
20039: LD_ADDR_EXP 100
20043: PUSH
20044: LD_INT 1
20046: ST_TO_ADDR
// if p3 = 20 then
20047: LD_VAR 0 3
20051: PUSH
20052: LD_INT 20
20054: EQUAL
20055: IFFALSE 20065
// sRemote := true ;
20057: LD_ADDR_EXP 101
20061: PUSH
20062: LD_INT 1
20064: ST_TO_ADDR
// if p3 = 21 then
20065: LD_VAR 0 3
20069: PUSH
20070: LD_INT 21
20072: EQUAL
20073: IFFALSE 20083
// sPowell := true ;
20075: LD_ADDR_EXP 102
20079: PUSH
20080: LD_INT 1
20082: ST_TO_ADDR
// if p3 = 22 then
20083: LD_VAR 0 3
20087: PUSH
20088: LD_INT 22
20090: EQUAL
20091: IFFALSE 20101
// sTeleport := true ;
20093: LD_ADDR_EXP 105
20097: PUSH
20098: LD_INT 1
20100: ST_TO_ADDR
// if p3 = 23 then
20101: LD_VAR 0 3
20105: PUSH
20106: LD_INT 23
20108: EQUAL
20109: IFFALSE 20119
// sOilTower := true ;
20111: LD_ADDR_EXP 107
20115: PUSH
20116: LD_INT 1
20118: ST_TO_ADDR
// if p3 = 24 then
20119: LD_VAR 0 3
20123: PUSH
20124: LD_INT 24
20126: EQUAL
20127: IFFALSE 20137
// sShovel := true ;
20129: LD_ADDR_EXP 108
20133: PUSH
20134: LD_INT 1
20136: ST_TO_ADDR
// if p3 = 25 then
20137: LD_VAR 0 3
20141: PUSH
20142: LD_INT 25
20144: EQUAL
20145: IFFALSE 20155
// sSheik := true ;
20147: LD_ADDR_EXP 109
20151: PUSH
20152: LD_INT 1
20154: ST_TO_ADDR
// if p3 = 26 then
20155: LD_VAR 0 3
20159: PUSH
20160: LD_INT 26
20162: EQUAL
20163: IFFALSE 20173
// sEarthquake := true ;
20165: LD_ADDR_EXP 111
20169: PUSH
20170: LD_INT 1
20172: ST_TO_ADDR
// if p3 = 27 then
20173: LD_VAR 0 3
20177: PUSH
20178: LD_INT 27
20180: EQUAL
20181: IFFALSE 20191
// sAI := true ;
20183: LD_ADDR_EXP 112
20187: PUSH
20188: LD_INT 1
20190: ST_TO_ADDR
// if p3 = 28 then
20191: LD_VAR 0 3
20195: PUSH
20196: LD_INT 28
20198: EQUAL
20199: IFFALSE 20209
// sCargo := true ;
20201: LD_ADDR_EXP 115
20205: PUSH
20206: LD_INT 1
20208: ST_TO_ADDR
// if p3 = 29 then
20209: LD_VAR 0 3
20213: PUSH
20214: LD_INT 29
20216: EQUAL
20217: IFFALSE 20227
// sDLaser := true ;
20219: LD_ADDR_EXP 116
20223: PUSH
20224: LD_INT 1
20226: ST_TO_ADDR
// if p3 = 30 then
20227: LD_VAR 0 3
20231: PUSH
20232: LD_INT 30
20234: EQUAL
20235: IFFALSE 20245
// sExchange := true ;
20237: LD_ADDR_EXP 117
20241: PUSH
20242: LD_INT 1
20244: ST_TO_ADDR
// if p3 = 31 then
20245: LD_VAR 0 3
20249: PUSH
20250: LD_INT 31
20252: EQUAL
20253: IFFALSE 20263
// sFac := true ;
20255: LD_ADDR_EXP 118
20259: PUSH
20260: LD_INT 1
20262: ST_TO_ADDR
// if p3 = 32 then
20263: LD_VAR 0 3
20267: PUSH
20268: LD_INT 32
20270: EQUAL
20271: IFFALSE 20281
// sPower := true ;
20273: LD_ADDR_EXP 119
20277: PUSH
20278: LD_INT 1
20280: ST_TO_ADDR
// if p3 = 33 then
20281: LD_VAR 0 3
20285: PUSH
20286: LD_INT 33
20288: EQUAL
20289: IFFALSE 20299
// sRandom := true ;
20291: LD_ADDR_EXP 120
20295: PUSH
20296: LD_INT 1
20298: ST_TO_ADDR
// if p3 = 34 then
20299: LD_VAR 0 3
20303: PUSH
20304: LD_INT 34
20306: EQUAL
20307: IFFALSE 20317
// sShield := true ;
20309: LD_ADDR_EXP 121
20313: PUSH
20314: LD_INT 1
20316: ST_TO_ADDR
// if p3 = 35 then
20317: LD_VAR 0 3
20321: PUSH
20322: LD_INT 35
20324: EQUAL
20325: IFFALSE 20335
// sTime := true ;
20327: LD_ADDR_EXP 122
20331: PUSH
20332: LD_INT 1
20334: ST_TO_ADDR
// if p3 = 36 then
20335: LD_VAR 0 3
20339: PUSH
20340: LD_INT 36
20342: EQUAL
20343: IFFALSE 20353
// sTools := true ;
20345: LD_ADDR_EXP 123
20349: PUSH
20350: LD_INT 1
20352: ST_TO_ADDR
// if p3 = 101 then
20353: LD_VAR 0 3
20357: PUSH
20358: LD_INT 101
20360: EQUAL
20361: IFFALSE 20371
// sSold := true ;
20363: LD_ADDR_EXP 88
20367: PUSH
20368: LD_INT 1
20370: ST_TO_ADDR
// if p3 = 102 then
20371: LD_VAR 0 3
20375: PUSH
20376: LD_INT 102
20378: EQUAL
20379: IFFALSE 20389
// sDiff := true ;
20381: LD_ADDR_EXP 89
20385: PUSH
20386: LD_INT 1
20388: ST_TO_ADDR
// if p3 = 103 then
20389: LD_VAR 0 3
20393: PUSH
20394: LD_INT 103
20396: EQUAL
20397: IFFALSE 20407
// sFog := true ;
20399: LD_ADDR_EXP 92
20403: PUSH
20404: LD_INT 1
20406: ST_TO_ADDR
// if p3 = 104 then
20407: LD_VAR 0 3
20411: PUSH
20412: LD_INT 104
20414: EQUAL
20415: IFFALSE 20425
// sReset := true ;
20417: LD_ADDR_EXP 93
20421: PUSH
20422: LD_INT 1
20424: ST_TO_ADDR
// if p3 = 105 then
20425: LD_VAR 0 3
20429: PUSH
20430: LD_INT 105
20432: EQUAL
20433: IFFALSE 20443
// sSun := true ;
20435: LD_ADDR_EXP 94
20439: PUSH
20440: LD_INT 1
20442: ST_TO_ADDR
// if p3 = 106 then
20443: LD_VAR 0 3
20447: PUSH
20448: LD_INT 106
20450: EQUAL
20451: IFFALSE 20461
// sTiger := true ;
20453: LD_ADDR_EXP 90
20457: PUSH
20458: LD_INT 1
20460: ST_TO_ADDR
// if p3 = 107 then
20461: LD_VAR 0 3
20465: PUSH
20466: LD_INT 107
20468: EQUAL
20469: IFFALSE 20479
// sBomb := true ;
20471: LD_ADDR_EXP 91
20475: PUSH
20476: LD_INT 1
20478: ST_TO_ADDR
// if p3 = 108 then
20479: LD_VAR 0 3
20483: PUSH
20484: LD_INT 108
20486: EQUAL
20487: IFFALSE 20497
// sWound := true ;
20489: LD_ADDR_EXP 99
20493: PUSH
20494: LD_INT 1
20496: ST_TO_ADDR
// if p3 = 109 then
20497: LD_VAR 0 3
20501: PUSH
20502: LD_INT 109
20504: EQUAL
20505: IFFALSE 20515
// sBetray := true ;
20507: LD_ADDR_EXP 103
20511: PUSH
20512: LD_INT 1
20514: ST_TO_ADDR
// if p3 = 110 then
20515: LD_VAR 0 3
20519: PUSH
20520: LD_INT 110
20522: EQUAL
20523: IFFALSE 20533
// sContamin := true ;
20525: LD_ADDR_EXP 104
20529: PUSH
20530: LD_INT 1
20532: ST_TO_ADDR
// if p3 = 111 then
20533: LD_VAR 0 3
20537: PUSH
20538: LD_INT 111
20540: EQUAL
20541: IFFALSE 20551
// sOil := true ;
20543: LD_ADDR_EXP 106
20547: PUSH
20548: LD_INT 1
20550: ST_TO_ADDR
// if p3 = 112 then
20551: LD_VAR 0 3
20555: PUSH
20556: LD_INT 112
20558: EQUAL
20559: IFFALSE 20569
// sStu := true ;
20561: LD_ADDR_EXP 110
20565: PUSH
20566: LD_INT 1
20568: ST_TO_ADDR
// if p3 = 113 then
20569: LD_VAR 0 3
20573: PUSH
20574: LD_INT 113
20576: EQUAL
20577: IFFALSE 20587
// sBazooka := true ;
20579: LD_ADDR_EXP 113
20583: PUSH
20584: LD_INT 1
20586: ST_TO_ADDR
// if p3 = 114 then
20587: LD_VAR 0 3
20591: PUSH
20592: LD_INT 114
20594: EQUAL
20595: IFFALSE 20605
// sMortar := true ;
20597: LD_ADDR_EXP 114
20601: PUSH
20602: LD_INT 1
20604: ST_TO_ADDR
// if p3 = 115 then
20605: LD_VAR 0 3
20609: PUSH
20610: LD_INT 115
20612: EQUAL
20613: IFFALSE 20623
// sRanger := true ;
20615: LD_ADDR_EXP 124
20619: PUSH
20620: LD_INT 1
20622: ST_TO_ADDR
// if p3 = 116 then
20623: LD_VAR 0 3
20627: PUSH
20628: LD_INT 116
20630: EQUAL
20631: IFFALSE 20641
// sComputer := true ;
20633: LD_ADDR_EXP 125
20637: PUSH
20638: LD_INT 1
20640: ST_TO_ADDR
// if p3 = 117 then
20641: LD_VAR 0 3
20645: PUSH
20646: LD_INT 117
20648: EQUAL
20649: IFFALSE 20659
// s30 := true ;
20651: LD_ADDR_EXP 126
20655: PUSH
20656: LD_INT 1
20658: ST_TO_ADDR
// if p3 = 118 then
20659: LD_VAR 0 3
20663: PUSH
20664: LD_INT 118
20666: EQUAL
20667: IFFALSE 20677
// s60 := true ;
20669: LD_ADDR_EXP 127
20673: PUSH
20674: LD_INT 1
20676: ST_TO_ADDR
// end ; if p2 = 101 then
20677: LD_VAR 0 2
20681: PUSH
20682: LD_INT 101
20684: EQUAL
20685: IFFALSE 20813
// begin case p3 of 1 :
20687: LD_VAR 0 3
20691: PUSH
20692: LD_INT 1
20694: DOUBLE
20695: EQUAL
20696: IFTRUE 20700
20698: GO 20707
20700: POP
// hHackUnlimitedResources ; 2 :
20701: CALL 32409 0 0
20705: GO 20813
20707: LD_INT 2
20709: DOUBLE
20710: EQUAL
20711: IFTRUE 20715
20713: GO 20722
20715: POP
// hHackSetLevel10 ; 3 :
20716: CALL 32542 0 0
20720: GO 20813
20722: LD_INT 3
20724: DOUBLE
20725: EQUAL
20726: IFTRUE 20730
20728: GO 20737
20730: POP
// hHackSetLevel10YourUnits ; 4 :
20731: CALL 32627 0 0
20735: GO 20813
20737: LD_INT 4
20739: DOUBLE
20740: EQUAL
20741: IFTRUE 20745
20743: GO 20752
20745: POP
// hHackInvincible ; 5 :
20746: CALL 33075 0 0
20750: GO 20813
20752: LD_INT 5
20754: DOUBLE
20755: EQUAL
20756: IFTRUE 20760
20758: GO 20767
20760: POP
// hHackInvisible ; 6 :
20761: CALL 33186 0 0
20765: GO 20813
20767: LD_INT 6
20769: DOUBLE
20770: EQUAL
20771: IFTRUE 20775
20773: GO 20782
20775: POP
// hHackChangeYourSide ; 7 :
20776: CALL 33243 0 0
20780: GO 20813
20782: LD_INT 7
20784: DOUBLE
20785: EQUAL
20786: IFTRUE 20790
20788: GO 20797
20790: POP
// hHackChangeUnitSide ; 8 :
20791: CALL 33285 0 0
20795: GO 20813
20797: LD_INT 8
20799: DOUBLE
20800: EQUAL
20801: IFTRUE 20805
20803: GO 20812
20805: POP
// hHackFog ; end ;
20806: CALL 33386 0 0
20810: GO 20813
20812: POP
// end ; end ;
20813: LD_VAR 0 7
20817: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20818: GO 20820
20820: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20821: LD_STRING initStreamRollete();
20823: PPUSH
20824: CALL_OW 559
// InitStreamMode ;
20828: CALL 20837 0 0
// DefineStreamItems ( ) ;
20832: CALL 21301 0 0
// end ;
20836: END
// function InitStreamMode ; begin
20837: LD_INT 0
20839: PPUSH
// streamModeActive := false ;
20840: LD_ADDR_EXP 71
20844: PUSH
20845: LD_INT 0
20847: ST_TO_ADDR
// normalCounter := 36 ;
20848: LD_ADDR_EXP 72
20852: PUSH
20853: LD_INT 36
20855: ST_TO_ADDR
// hardcoreCounter := 16 ;
20856: LD_ADDR_EXP 73
20860: PUSH
20861: LD_INT 16
20863: ST_TO_ADDR
// sRocket := false ;
20864: LD_ADDR_EXP 76
20868: PUSH
20869: LD_INT 0
20871: ST_TO_ADDR
// sSpeed := false ;
20872: LD_ADDR_EXP 75
20876: PUSH
20877: LD_INT 0
20879: ST_TO_ADDR
// sEngine := false ;
20880: LD_ADDR_EXP 77
20884: PUSH
20885: LD_INT 0
20887: ST_TO_ADDR
// sSpec := false ;
20888: LD_ADDR_EXP 74
20892: PUSH
20893: LD_INT 0
20895: ST_TO_ADDR
// sLevel := false ;
20896: LD_ADDR_EXP 78
20900: PUSH
20901: LD_INT 0
20903: ST_TO_ADDR
// sArmoury := false ;
20904: LD_ADDR_EXP 79
20908: PUSH
20909: LD_INT 0
20911: ST_TO_ADDR
// sRadar := false ;
20912: LD_ADDR_EXP 80
20916: PUSH
20917: LD_INT 0
20919: ST_TO_ADDR
// sBunker := false ;
20920: LD_ADDR_EXP 81
20924: PUSH
20925: LD_INT 0
20927: ST_TO_ADDR
// sHack := false ;
20928: LD_ADDR_EXP 82
20932: PUSH
20933: LD_INT 0
20935: ST_TO_ADDR
// sFire := false ;
20936: LD_ADDR_EXP 83
20940: PUSH
20941: LD_INT 0
20943: ST_TO_ADDR
// sRefresh := false ;
20944: LD_ADDR_EXP 84
20948: PUSH
20949: LD_INT 0
20951: ST_TO_ADDR
// sExp := false ;
20952: LD_ADDR_EXP 85
20956: PUSH
20957: LD_INT 0
20959: ST_TO_ADDR
// sDepot := false ;
20960: LD_ADDR_EXP 86
20964: PUSH
20965: LD_INT 0
20967: ST_TO_ADDR
// sFlag := false ;
20968: LD_ADDR_EXP 87
20972: PUSH
20973: LD_INT 0
20975: ST_TO_ADDR
// sKamikadze := false ;
20976: LD_ADDR_EXP 95
20980: PUSH
20981: LD_INT 0
20983: ST_TO_ADDR
// sTroll := false ;
20984: LD_ADDR_EXP 96
20988: PUSH
20989: LD_INT 0
20991: ST_TO_ADDR
// sSlow := false ;
20992: LD_ADDR_EXP 97
20996: PUSH
20997: LD_INT 0
20999: ST_TO_ADDR
// sLack := false ;
21000: LD_ADDR_EXP 98
21004: PUSH
21005: LD_INT 0
21007: ST_TO_ADDR
// sTank := false ;
21008: LD_ADDR_EXP 100
21012: PUSH
21013: LD_INT 0
21015: ST_TO_ADDR
// sRemote := false ;
21016: LD_ADDR_EXP 101
21020: PUSH
21021: LD_INT 0
21023: ST_TO_ADDR
// sPowell := false ;
21024: LD_ADDR_EXP 102
21028: PUSH
21029: LD_INT 0
21031: ST_TO_ADDR
// sTeleport := false ;
21032: LD_ADDR_EXP 105
21036: PUSH
21037: LD_INT 0
21039: ST_TO_ADDR
// sOilTower := false ;
21040: LD_ADDR_EXP 107
21044: PUSH
21045: LD_INT 0
21047: ST_TO_ADDR
// sShovel := false ;
21048: LD_ADDR_EXP 108
21052: PUSH
21053: LD_INT 0
21055: ST_TO_ADDR
// sSheik := false ;
21056: LD_ADDR_EXP 109
21060: PUSH
21061: LD_INT 0
21063: ST_TO_ADDR
// sEarthquake := false ;
21064: LD_ADDR_EXP 111
21068: PUSH
21069: LD_INT 0
21071: ST_TO_ADDR
// sAI := false ;
21072: LD_ADDR_EXP 112
21076: PUSH
21077: LD_INT 0
21079: ST_TO_ADDR
// sCargo := false ;
21080: LD_ADDR_EXP 115
21084: PUSH
21085: LD_INT 0
21087: ST_TO_ADDR
// sDLaser := false ;
21088: LD_ADDR_EXP 116
21092: PUSH
21093: LD_INT 0
21095: ST_TO_ADDR
// sExchange := false ;
21096: LD_ADDR_EXP 117
21100: PUSH
21101: LD_INT 0
21103: ST_TO_ADDR
// sFac := false ;
21104: LD_ADDR_EXP 118
21108: PUSH
21109: LD_INT 0
21111: ST_TO_ADDR
// sPower := false ;
21112: LD_ADDR_EXP 119
21116: PUSH
21117: LD_INT 0
21119: ST_TO_ADDR
// sRandom := false ;
21120: LD_ADDR_EXP 120
21124: PUSH
21125: LD_INT 0
21127: ST_TO_ADDR
// sShield := false ;
21128: LD_ADDR_EXP 121
21132: PUSH
21133: LD_INT 0
21135: ST_TO_ADDR
// sTime := false ;
21136: LD_ADDR_EXP 122
21140: PUSH
21141: LD_INT 0
21143: ST_TO_ADDR
// sTools := false ;
21144: LD_ADDR_EXP 123
21148: PUSH
21149: LD_INT 0
21151: ST_TO_ADDR
// sSold := false ;
21152: LD_ADDR_EXP 88
21156: PUSH
21157: LD_INT 0
21159: ST_TO_ADDR
// sDiff := false ;
21160: LD_ADDR_EXP 89
21164: PUSH
21165: LD_INT 0
21167: ST_TO_ADDR
// sFog := false ;
21168: LD_ADDR_EXP 92
21172: PUSH
21173: LD_INT 0
21175: ST_TO_ADDR
// sReset := false ;
21176: LD_ADDR_EXP 93
21180: PUSH
21181: LD_INT 0
21183: ST_TO_ADDR
// sSun := false ;
21184: LD_ADDR_EXP 94
21188: PUSH
21189: LD_INT 0
21191: ST_TO_ADDR
// sTiger := false ;
21192: LD_ADDR_EXP 90
21196: PUSH
21197: LD_INT 0
21199: ST_TO_ADDR
// sBomb := false ;
21200: LD_ADDR_EXP 91
21204: PUSH
21205: LD_INT 0
21207: ST_TO_ADDR
// sWound := false ;
21208: LD_ADDR_EXP 99
21212: PUSH
21213: LD_INT 0
21215: ST_TO_ADDR
// sBetray := false ;
21216: LD_ADDR_EXP 103
21220: PUSH
21221: LD_INT 0
21223: ST_TO_ADDR
// sContamin := false ;
21224: LD_ADDR_EXP 104
21228: PUSH
21229: LD_INT 0
21231: ST_TO_ADDR
// sOil := false ;
21232: LD_ADDR_EXP 106
21236: PUSH
21237: LD_INT 0
21239: ST_TO_ADDR
// sStu := false ;
21240: LD_ADDR_EXP 110
21244: PUSH
21245: LD_INT 0
21247: ST_TO_ADDR
// sBazooka := false ;
21248: LD_ADDR_EXP 113
21252: PUSH
21253: LD_INT 0
21255: ST_TO_ADDR
// sMortar := false ;
21256: LD_ADDR_EXP 114
21260: PUSH
21261: LD_INT 0
21263: ST_TO_ADDR
// sRanger := false ;
21264: LD_ADDR_EXP 124
21268: PUSH
21269: LD_INT 0
21271: ST_TO_ADDR
// sComputer := false ;
21272: LD_ADDR_EXP 125
21276: PUSH
21277: LD_INT 0
21279: ST_TO_ADDR
// s30 := false ;
21280: LD_ADDR_EXP 126
21284: PUSH
21285: LD_INT 0
21287: ST_TO_ADDR
// s60 := false ;
21288: LD_ADDR_EXP 127
21292: PUSH
21293: LD_INT 0
21295: ST_TO_ADDR
// end ;
21296: LD_VAR 0 1
21300: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
21301: LD_INT 0
21303: PPUSH
21304: PPUSH
21305: PPUSH
21306: PPUSH
21307: PPUSH
// result := [ ] ;
21308: LD_ADDR_VAR 0 1
21312: PUSH
21313: EMPTY
21314: ST_TO_ADDR
// if campaign_id = 1 then
21315: LD_OWVAR 69
21319: PUSH
21320: LD_INT 1
21322: EQUAL
21323: IFFALSE 24489
// begin case mission_number of 1 :
21325: LD_OWVAR 70
21329: PUSH
21330: LD_INT 1
21332: DOUBLE
21333: EQUAL
21334: IFTRUE 21338
21336: GO 21414
21338: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21339: LD_ADDR_VAR 0 1
21343: PUSH
21344: LD_INT 2
21346: PUSH
21347: LD_INT 4
21349: PUSH
21350: LD_INT 11
21352: PUSH
21353: LD_INT 12
21355: PUSH
21356: LD_INT 15
21358: PUSH
21359: LD_INT 16
21361: PUSH
21362: LD_INT 22
21364: PUSH
21365: LD_INT 23
21367: PUSH
21368: LD_INT 26
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: PUSH
21382: LD_INT 101
21384: PUSH
21385: LD_INT 102
21387: PUSH
21388: LD_INT 106
21390: PUSH
21391: LD_INT 116
21393: PUSH
21394: LD_INT 117
21396: PUSH
21397: LD_INT 118
21399: PUSH
21400: EMPTY
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: ST_TO_ADDR
21412: GO 24487
21414: LD_INT 2
21416: DOUBLE
21417: EQUAL
21418: IFTRUE 21422
21420: GO 21506
21422: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21423: LD_ADDR_VAR 0 1
21427: PUSH
21428: LD_INT 2
21430: PUSH
21431: LD_INT 4
21433: PUSH
21434: LD_INT 11
21436: PUSH
21437: LD_INT 12
21439: PUSH
21440: LD_INT 15
21442: PUSH
21443: LD_INT 16
21445: PUSH
21446: LD_INT 22
21448: PUSH
21449: LD_INT 23
21451: PUSH
21452: LD_INT 26
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: PUSH
21466: LD_INT 101
21468: PUSH
21469: LD_INT 102
21471: PUSH
21472: LD_INT 105
21474: PUSH
21475: LD_INT 106
21477: PUSH
21478: LD_INT 108
21480: PUSH
21481: LD_INT 116
21483: PUSH
21484: LD_INT 117
21486: PUSH
21487: LD_INT 118
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: ST_TO_ADDR
21504: GO 24487
21506: LD_INT 3
21508: DOUBLE
21509: EQUAL
21510: IFTRUE 21514
21512: GO 21602
21514: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21515: LD_ADDR_VAR 0 1
21519: PUSH
21520: LD_INT 2
21522: PUSH
21523: LD_INT 4
21525: PUSH
21526: LD_INT 5
21528: PUSH
21529: LD_INT 11
21531: PUSH
21532: LD_INT 12
21534: PUSH
21535: LD_INT 15
21537: PUSH
21538: LD_INT 16
21540: PUSH
21541: LD_INT 22
21543: PUSH
21544: LD_INT 26
21546: PUSH
21547: LD_INT 36
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: PUSH
21562: LD_INT 101
21564: PUSH
21565: LD_INT 102
21567: PUSH
21568: LD_INT 105
21570: PUSH
21571: LD_INT 106
21573: PUSH
21574: LD_INT 108
21576: PUSH
21577: LD_INT 116
21579: PUSH
21580: LD_INT 117
21582: PUSH
21583: LD_INT 118
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: ST_TO_ADDR
21600: GO 24487
21602: LD_INT 4
21604: DOUBLE
21605: EQUAL
21606: IFTRUE 21610
21608: GO 21706
21610: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21611: LD_ADDR_VAR 0 1
21615: PUSH
21616: LD_INT 2
21618: PUSH
21619: LD_INT 4
21621: PUSH
21622: LD_INT 5
21624: PUSH
21625: LD_INT 8
21627: PUSH
21628: LD_INT 11
21630: PUSH
21631: LD_INT 12
21633: PUSH
21634: LD_INT 15
21636: PUSH
21637: LD_INT 16
21639: PUSH
21640: LD_INT 22
21642: PUSH
21643: LD_INT 23
21645: PUSH
21646: LD_INT 26
21648: PUSH
21649: LD_INT 36
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: PUSH
21666: LD_INT 101
21668: PUSH
21669: LD_INT 102
21671: PUSH
21672: LD_INT 105
21674: PUSH
21675: LD_INT 106
21677: PUSH
21678: LD_INT 108
21680: PUSH
21681: LD_INT 116
21683: PUSH
21684: LD_INT 117
21686: PUSH
21687: LD_INT 118
21689: PUSH
21690: EMPTY
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: PUSH
21700: EMPTY
21701: LIST
21702: LIST
21703: ST_TO_ADDR
21704: GO 24487
21706: LD_INT 5
21708: DOUBLE
21709: EQUAL
21710: IFTRUE 21714
21712: GO 21826
21714: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21715: LD_ADDR_VAR 0 1
21719: PUSH
21720: LD_INT 2
21722: PUSH
21723: LD_INT 4
21725: PUSH
21726: LD_INT 5
21728: PUSH
21729: LD_INT 6
21731: PUSH
21732: LD_INT 8
21734: PUSH
21735: LD_INT 11
21737: PUSH
21738: LD_INT 12
21740: PUSH
21741: LD_INT 15
21743: PUSH
21744: LD_INT 16
21746: PUSH
21747: LD_INT 22
21749: PUSH
21750: LD_INT 23
21752: PUSH
21753: LD_INT 25
21755: PUSH
21756: LD_INT 26
21758: PUSH
21759: LD_INT 36
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: PUSH
21778: LD_INT 101
21780: PUSH
21781: LD_INT 102
21783: PUSH
21784: LD_INT 105
21786: PUSH
21787: LD_INT 106
21789: PUSH
21790: LD_INT 108
21792: PUSH
21793: LD_INT 109
21795: PUSH
21796: LD_INT 112
21798: PUSH
21799: LD_INT 116
21801: PUSH
21802: LD_INT 117
21804: PUSH
21805: LD_INT 118
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: ST_TO_ADDR
21824: GO 24487
21826: LD_INT 6
21828: DOUBLE
21829: EQUAL
21830: IFTRUE 21834
21832: GO 21966
21834: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21835: LD_ADDR_VAR 0 1
21839: PUSH
21840: LD_INT 2
21842: PUSH
21843: LD_INT 4
21845: PUSH
21846: LD_INT 5
21848: PUSH
21849: LD_INT 6
21851: PUSH
21852: LD_INT 8
21854: PUSH
21855: LD_INT 11
21857: PUSH
21858: LD_INT 12
21860: PUSH
21861: LD_INT 15
21863: PUSH
21864: LD_INT 16
21866: PUSH
21867: LD_INT 20
21869: PUSH
21870: LD_INT 21
21872: PUSH
21873: LD_INT 22
21875: PUSH
21876: LD_INT 23
21878: PUSH
21879: LD_INT 25
21881: PUSH
21882: LD_INT 26
21884: PUSH
21885: LD_INT 30
21887: PUSH
21888: LD_INT 31
21890: PUSH
21891: LD_INT 32
21893: PUSH
21894: LD_INT 36
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: PUSH
21918: LD_INT 101
21920: PUSH
21921: LD_INT 102
21923: PUSH
21924: LD_INT 105
21926: PUSH
21927: LD_INT 106
21929: PUSH
21930: LD_INT 108
21932: PUSH
21933: LD_INT 109
21935: PUSH
21936: LD_INT 112
21938: PUSH
21939: LD_INT 116
21941: PUSH
21942: LD_INT 117
21944: PUSH
21945: LD_INT 118
21947: PUSH
21948: EMPTY
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: PUSH
21960: EMPTY
21961: LIST
21962: LIST
21963: ST_TO_ADDR
21964: GO 24487
21966: LD_INT 7
21968: DOUBLE
21969: EQUAL
21970: IFTRUE 21974
21972: GO 22086
21974: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21975: LD_ADDR_VAR 0 1
21979: PUSH
21980: LD_INT 2
21982: PUSH
21983: LD_INT 4
21985: PUSH
21986: LD_INT 5
21988: PUSH
21989: LD_INT 7
21991: PUSH
21992: LD_INT 11
21994: PUSH
21995: LD_INT 12
21997: PUSH
21998: LD_INT 15
22000: PUSH
22001: LD_INT 16
22003: PUSH
22004: LD_INT 20
22006: PUSH
22007: LD_INT 21
22009: PUSH
22010: LD_INT 22
22012: PUSH
22013: LD_INT 23
22015: PUSH
22016: LD_INT 25
22018: PUSH
22019: LD_INT 26
22021: PUSH
22022: EMPTY
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: PUSH
22038: LD_INT 101
22040: PUSH
22041: LD_INT 102
22043: PUSH
22044: LD_INT 103
22046: PUSH
22047: LD_INT 105
22049: PUSH
22050: LD_INT 106
22052: PUSH
22053: LD_INT 108
22055: PUSH
22056: LD_INT 112
22058: PUSH
22059: LD_INT 116
22061: PUSH
22062: LD_INT 117
22064: PUSH
22065: LD_INT 118
22067: PUSH
22068: EMPTY
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: ST_TO_ADDR
22084: GO 24487
22086: LD_INT 8
22088: DOUBLE
22089: EQUAL
22090: IFTRUE 22094
22092: GO 22234
22094: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22095: LD_ADDR_VAR 0 1
22099: PUSH
22100: LD_INT 2
22102: PUSH
22103: LD_INT 4
22105: PUSH
22106: LD_INT 5
22108: PUSH
22109: LD_INT 6
22111: PUSH
22112: LD_INT 7
22114: PUSH
22115: LD_INT 8
22117: PUSH
22118: LD_INT 11
22120: PUSH
22121: LD_INT 12
22123: PUSH
22124: LD_INT 15
22126: PUSH
22127: LD_INT 16
22129: PUSH
22130: LD_INT 20
22132: PUSH
22133: LD_INT 21
22135: PUSH
22136: LD_INT 22
22138: PUSH
22139: LD_INT 23
22141: PUSH
22142: LD_INT 25
22144: PUSH
22145: LD_INT 26
22147: PUSH
22148: LD_INT 30
22150: PUSH
22151: LD_INT 31
22153: PUSH
22154: LD_INT 32
22156: PUSH
22157: LD_INT 36
22159: PUSH
22160: EMPTY
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: PUSH
22182: LD_INT 101
22184: PUSH
22185: LD_INT 102
22187: PUSH
22188: LD_INT 103
22190: PUSH
22191: LD_INT 105
22193: PUSH
22194: LD_INT 106
22196: PUSH
22197: LD_INT 108
22199: PUSH
22200: LD_INT 109
22202: PUSH
22203: LD_INT 112
22205: PUSH
22206: LD_INT 116
22208: PUSH
22209: LD_INT 117
22211: PUSH
22212: LD_INT 118
22214: PUSH
22215: EMPTY
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: ST_TO_ADDR
22232: GO 24487
22234: LD_INT 9
22236: DOUBLE
22237: EQUAL
22238: IFTRUE 22242
22240: GO 22390
22242: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22243: LD_ADDR_VAR 0 1
22247: PUSH
22248: LD_INT 2
22250: PUSH
22251: LD_INT 4
22253: PUSH
22254: LD_INT 5
22256: PUSH
22257: LD_INT 6
22259: PUSH
22260: LD_INT 7
22262: PUSH
22263: LD_INT 8
22265: PUSH
22266: LD_INT 11
22268: PUSH
22269: LD_INT 12
22271: PUSH
22272: LD_INT 15
22274: PUSH
22275: LD_INT 16
22277: PUSH
22278: LD_INT 20
22280: PUSH
22281: LD_INT 21
22283: PUSH
22284: LD_INT 22
22286: PUSH
22287: LD_INT 23
22289: PUSH
22290: LD_INT 25
22292: PUSH
22293: LD_INT 26
22295: PUSH
22296: LD_INT 28
22298: PUSH
22299: LD_INT 30
22301: PUSH
22302: LD_INT 31
22304: PUSH
22305: LD_INT 32
22307: PUSH
22308: LD_INT 36
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: PUSH
22334: LD_INT 101
22336: PUSH
22337: LD_INT 102
22339: PUSH
22340: LD_INT 103
22342: PUSH
22343: LD_INT 105
22345: PUSH
22346: LD_INT 106
22348: PUSH
22349: LD_INT 108
22351: PUSH
22352: LD_INT 109
22354: PUSH
22355: LD_INT 112
22357: PUSH
22358: LD_INT 114
22360: PUSH
22361: LD_INT 116
22363: PUSH
22364: LD_INT 117
22366: PUSH
22367: LD_INT 118
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: ST_TO_ADDR
22388: GO 24487
22390: LD_INT 10
22392: DOUBLE
22393: EQUAL
22394: IFTRUE 22398
22396: GO 22594
22398: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22399: LD_ADDR_VAR 0 1
22403: PUSH
22404: LD_INT 2
22406: PUSH
22407: LD_INT 4
22409: PUSH
22410: LD_INT 5
22412: PUSH
22413: LD_INT 6
22415: PUSH
22416: LD_INT 7
22418: PUSH
22419: LD_INT 8
22421: PUSH
22422: LD_INT 9
22424: PUSH
22425: LD_INT 10
22427: PUSH
22428: LD_INT 11
22430: PUSH
22431: LD_INT 12
22433: PUSH
22434: LD_INT 13
22436: PUSH
22437: LD_INT 14
22439: PUSH
22440: LD_INT 15
22442: PUSH
22443: LD_INT 16
22445: PUSH
22446: LD_INT 17
22448: PUSH
22449: LD_INT 18
22451: PUSH
22452: LD_INT 19
22454: PUSH
22455: LD_INT 20
22457: PUSH
22458: LD_INT 21
22460: PUSH
22461: LD_INT 22
22463: PUSH
22464: LD_INT 23
22466: PUSH
22467: LD_INT 24
22469: PUSH
22470: LD_INT 25
22472: PUSH
22473: LD_INT 26
22475: PUSH
22476: LD_INT 28
22478: PUSH
22479: LD_INT 30
22481: PUSH
22482: LD_INT 31
22484: PUSH
22485: LD_INT 32
22487: PUSH
22488: LD_INT 36
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: PUSH
22522: LD_INT 101
22524: PUSH
22525: LD_INT 102
22527: PUSH
22528: LD_INT 103
22530: PUSH
22531: LD_INT 104
22533: PUSH
22534: LD_INT 105
22536: PUSH
22537: LD_INT 106
22539: PUSH
22540: LD_INT 107
22542: PUSH
22543: LD_INT 108
22545: PUSH
22546: LD_INT 109
22548: PUSH
22549: LD_INT 110
22551: PUSH
22552: LD_INT 111
22554: PUSH
22555: LD_INT 112
22557: PUSH
22558: LD_INT 114
22560: PUSH
22561: LD_INT 116
22563: PUSH
22564: LD_INT 117
22566: PUSH
22567: LD_INT 118
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: PUSH
22588: EMPTY
22589: LIST
22590: LIST
22591: ST_TO_ADDR
22592: GO 24487
22594: LD_INT 11
22596: DOUBLE
22597: EQUAL
22598: IFTRUE 22602
22600: GO 22806
22602: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22603: LD_ADDR_VAR 0 1
22607: PUSH
22608: LD_INT 2
22610: PUSH
22611: LD_INT 3
22613: PUSH
22614: LD_INT 4
22616: PUSH
22617: LD_INT 5
22619: PUSH
22620: LD_INT 6
22622: PUSH
22623: LD_INT 7
22625: PUSH
22626: LD_INT 8
22628: PUSH
22629: LD_INT 9
22631: PUSH
22632: LD_INT 10
22634: PUSH
22635: LD_INT 11
22637: PUSH
22638: LD_INT 12
22640: PUSH
22641: LD_INT 13
22643: PUSH
22644: LD_INT 14
22646: PUSH
22647: LD_INT 15
22649: PUSH
22650: LD_INT 16
22652: PUSH
22653: LD_INT 17
22655: PUSH
22656: LD_INT 18
22658: PUSH
22659: LD_INT 19
22661: PUSH
22662: LD_INT 20
22664: PUSH
22665: LD_INT 21
22667: PUSH
22668: LD_INT 22
22670: PUSH
22671: LD_INT 23
22673: PUSH
22674: LD_INT 24
22676: PUSH
22677: LD_INT 25
22679: PUSH
22680: LD_INT 26
22682: PUSH
22683: LD_INT 28
22685: PUSH
22686: LD_INT 30
22688: PUSH
22689: LD_INT 31
22691: PUSH
22692: LD_INT 32
22694: PUSH
22695: LD_INT 34
22697: PUSH
22698: LD_INT 36
22700: PUSH
22701: EMPTY
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: PUSH
22734: LD_INT 101
22736: PUSH
22737: LD_INT 102
22739: PUSH
22740: LD_INT 103
22742: PUSH
22743: LD_INT 104
22745: PUSH
22746: LD_INT 105
22748: PUSH
22749: LD_INT 106
22751: PUSH
22752: LD_INT 107
22754: PUSH
22755: LD_INT 108
22757: PUSH
22758: LD_INT 109
22760: PUSH
22761: LD_INT 110
22763: PUSH
22764: LD_INT 111
22766: PUSH
22767: LD_INT 112
22769: PUSH
22770: LD_INT 114
22772: PUSH
22773: LD_INT 116
22775: PUSH
22776: LD_INT 117
22778: PUSH
22779: LD_INT 118
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: ST_TO_ADDR
22804: GO 24487
22806: LD_INT 12
22808: DOUBLE
22809: EQUAL
22810: IFTRUE 22814
22812: GO 23034
22814: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22815: LD_ADDR_VAR 0 1
22819: PUSH
22820: LD_INT 1
22822: PUSH
22823: LD_INT 2
22825: PUSH
22826: LD_INT 3
22828: PUSH
22829: LD_INT 4
22831: PUSH
22832: LD_INT 5
22834: PUSH
22835: LD_INT 6
22837: PUSH
22838: LD_INT 7
22840: PUSH
22841: LD_INT 8
22843: PUSH
22844: LD_INT 9
22846: PUSH
22847: LD_INT 10
22849: PUSH
22850: LD_INT 11
22852: PUSH
22853: LD_INT 12
22855: PUSH
22856: LD_INT 13
22858: PUSH
22859: LD_INT 14
22861: PUSH
22862: LD_INT 15
22864: PUSH
22865: LD_INT 16
22867: PUSH
22868: LD_INT 17
22870: PUSH
22871: LD_INT 18
22873: PUSH
22874: LD_INT 19
22876: PUSH
22877: LD_INT 20
22879: PUSH
22880: LD_INT 21
22882: PUSH
22883: LD_INT 22
22885: PUSH
22886: LD_INT 23
22888: PUSH
22889: LD_INT 24
22891: PUSH
22892: LD_INT 25
22894: PUSH
22895: LD_INT 26
22897: PUSH
22898: LD_INT 27
22900: PUSH
22901: LD_INT 28
22903: PUSH
22904: LD_INT 30
22906: PUSH
22907: LD_INT 31
22909: PUSH
22910: LD_INT 32
22912: PUSH
22913: LD_INT 33
22915: PUSH
22916: LD_INT 34
22918: PUSH
22919: LD_INT 36
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 101
22960: PUSH
22961: LD_INT 102
22963: PUSH
22964: LD_INT 103
22966: PUSH
22967: LD_INT 104
22969: PUSH
22970: LD_INT 105
22972: PUSH
22973: LD_INT 106
22975: PUSH
22976: LD_INT 107
22978: PUSH
22979: LD_INT 108
22981: PUSH
22982: LD_INT 109
22984: PUSH
22985: LD_INT 110
22987: PUSH
22988: LD_INT 111
22990: PUSH
22991: LD_INT 112
22993: PUSH
22994: LD_INT 113
22996: PUSH
22997: LD_INT 114
22999: PUSH
23000: LD_INT 116
23002: PUSH
23003: LD_INT 117
23005: PUSH
23006: LD_INT 118
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: ST_TO_ADDR
23032: GO 24487
23034: LD_INT 13
23036: DOUBLE
23037: EQUAL
23038: IFTRUE 23042
23040: GO 23250
23042: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23043: LD_ADDR_VAR 0 1
23047: PUSH
23048: LD_INT 1
23050: PUSH
23051: LD_INT 2
23053: PUSH
23054: LD_INT 3
23056: PUSH
23057: LD_INT 4
23059: PUSH
23060: LD_INT 5
23062: PUSH
23063: LD_INT 8
23065: PUSH
23066: LD_INT 9
23068: PUSH
23069: LD_INT 10
23071: PUSH
23072: LD_INT 11
23074: PUSH
23075: LD_INT 12
23077: PUSH
23078: LD_INT 14
23080: PUSH
23081: LD_INT 15
23083: PUSH
23084: LD_INT 16
23086: PUSH
23087: LD_INT 17
23089: PUSH
23090: LD_INT 18
23092: PUSH
23093: LD_INT 19
23095: PUSH
23096: LD_INT 20
23098: PUSH
23099: LD_INT 21
23101: PUSH
23102: LD_INT 22
23104: PUSH
23105: LD_INT 23
23107: PUSH
23108: LD_INT 24
23110: PUSH
23111: LD_INT 25
23113: PUSH
23114: LD_INT 26
23116: PUSH
23117: LD_INT 27
23119: PUSH
23120: LD_INT 28
23122: PUSH
23123: LD_INT 30
23125: PUSH
23126: LD_INT 31
23128: PUSH
23129: LD_INT 32
23131: PUSH
23132: LD_INT 33
23134: PUSH
23135: LD_INT 34
23137: PUSH
23138: LD_INT 36
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: PUSH
23174: LD_INT 101
23176: PUSH
23177: LD_INT 102
23179: PUSH
23180: LD_INT 103
23182: PUSH
23183: LD_INT 104
23185: PUSH
23186: LD_INT 105
23188: PUSH
23189: LD_INT 106
23191: PUSH
23192: LD_INT 107
23194: PUSH
23195: LD_INT 108
23197: PUSH
23198: LD_INT 109
23200: PUSH
23201: LD_INT 110
23203: PUSH
23204: LD_INT 111
23206: PUSH
23207: LD_INT 112
23209: PUSH
23210: LD_INT 113
23212: PUSH
23213: LD_INT 114
23215: PUSH
23216: LD_INT 116
23218: PUSH
23219: LD_INT 117
23221: PUSH
23222: LD_INT 118
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: ST_TO_ADDR
23248: GO 24487
23250: LD_INT 14
23252: DOUBLE
23253: EQUAL
23254: IFTRUE 23258
23256: GO 23482
23258: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23259: LD_ADDR_VAR 0 1
23263: PUSH
23264: LD_INT 1
23266: PUSH
23267: LD_INT 2
23269: PUSH
23270: LD_INT 3
23272: PUSH
23273: LD_INT 4
23275: PUSH
23276: LD_INT 5
23278: PUSH
23279: LD_INT 6
23281: PUSH
23282: LD_INT 7
23284: PUSH
23285: LD_INT 8
23287: PUSH
23288: LD_INT 9
23290: PUSH
23291: LD_INT 10
23293: PUSH
23294: LD_INT 11
23296: PUSH
23297: LD_INT 12
23299: PUSH
23300: LD_INT 13
23302: PUSH
23303: LD_INT 14
23305: PUSH
23306: LD_INT 15
23308: PUSH
23309: LD_INT 16
23311: PUSH
23312: LD_INT 17
23314: PUSH
23315: LD_INT 18
23317: PUSH
23318: LD_INT 19
23320: PUSH
23321: LD_INT 20
23323: PUSH
23324: LD_INT 21
23326: PUSH
23327: LD_INT 22
23329: PUSH
23330: LD_INT 23
23332: PUSH
23333: LD_INT 24
23335: PUSH
23336: LD_INT 25
23338: PUSH
23339: LD_INT 26
23341: PUSH
23342: LD_INT 27
23344: PUSH
23345: LD_INT 28
23347: PUSH
23348: LD_INT 29
23350: PUSH
23351: LD_INT 30
23353: PUSH
23354: LD_INT 31
23356: PUSH
23357: LD_INT 32
23359: PUSH
23360: LD_INT 33
23362: PUSH
23363: LD_INT 34
23365: PUSH
23366: LD_INT 36
23368: PUSH
23369: EMPTY
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: PUSH
23406: LD_INT 101
23408: PUSH
23409: LD_INT 102
23411: PUSH
23412: LD_INT 103
23414: PUSH
23415: LD_INT 104
23417: PUSH
23418: LD_INT 105
23420: PUSH
23421: LD_INT 106
23423: PUSH
23424: LD_INT 107
23426: PUSH
23427: LD_INT 108
23429: PUSH
23430: LD_INT 109
23432: PUSH
23433: LD_INT 110
23435: PUSH
23436: LD_INT 111
23438: PUSH
23439: LD_INT 112
23441: PUSH
23442: LD_INT 113
23444: PUSH
23445: LD_INT 114
23447: PUSH
23448: LD_INT 116
23450: PUSH
23451: LD_INT 117
23453: PUSH
23454: LD_INT 118
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: ST_TO_ADDR
23480: GO 24487
23482: LD_INT 15
23484: DOUBLE
23485: EQUAL
23486: IFTRUE 23490
23488: GO 23714
23490: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23491: LD_ADDR_VAR 0 1
23495: PUSH
23496: LD_INT 1
23498: PUSH
23499: LD_INT 2
23501: PUSH
23502: LD_INT 3
23504: PUSH
23505: LD_INT 4
23507: PUSH
23508: LD_INT 5
23510: PUSH
23511: LD_INT 6
23513: PUSH
23514: LD_INT 7
23516: PUSH
23517: LD_INT 8
23519: PUSH
23520: LD_INT 9
23522: PUSH
23523: LD_INT 10
23525: PUSH
23526: LD_INT 11
23528: PUSH
23529: LD_INT 12
23531: PUSH
23532: LD_INT 13
23534: PUSH
23535: LD_INT 14
23537: PUSH
23538: LD_INT 15
23540: PUSH
23541: LD_INT 16
23543: PUSH
23544: LD_INT 17
23546: PUSH
23547: LD_INT 18
23549: PUSH
23550: LD_INT 19
23552: PUSH
23553: LD_INT 20
23555: PUSH
23556: LD_INT 21
23558: PUSH
23559: LD_INT 22
23561: PUSH
23562: LD_INT 23
23564: PUSH
23565: LD_INT 24
23567: PUSH
23568: LD_INT 25
23570: PUSH
23571: LD_INT 26
23573: PUSH
23574: LD_INT 27
23576: PUSH
23577: LD_INT 28
23579: PUSH
23580: LD_INT 29
23582: PUSH
23583: LD_INT 30
23585: PUSH
23586: LD_INT 31
23588: PUSH
23589: LD_INT 32
23591: PUSH
23592: LD_INT 33
23594: PUSH
23595: LD_INT 34
23597: PUSH
23598: LD_INT 36
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: PUSH
23638: LD_INT 101
23640: PUSH
23641: LD_INT 102
23643: PUSH
23644: LD_INT 103
23646: PUSH
23647: LD_INT 104
23649: PUSH
23650: LD_INT 105
23652: PUSH
23653: LD_INT 106
23655: PUSH
23656: LD_INT 107
23658: PUSH
23659: LD_INT 108
23661: PUSH
23662: LD_INT 109
23664: PUSH
23665: LD_INT 110
23667: PUSH
23668: LD_INT 111
23670: PUSH
23671: LD_INT 112
23673: PUSH
23674: LD_INT 113
23676: PUSH
23677: LD_INT 114
23679: PUSH
23680: LD_INT 116
23682: PUSH
23683: LD_INT 117
23685: PUSH
23686: LD_INT 118
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: ST_TO_ADDR
23712: GO 24487
23714: LD_INT 16
23716: DOUBLE
23717: EQUAL
23718: IFTRUE 23722
23720: GO 23858
23722: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23723: LD_ADDR_VAR 0 1
23727: PUSH
23728: LD_INT 2
23730: PUSH
23731: LD_INT 4
23733: PUSH
23734: LD_INT 5
23736: PUSH
23737: LD_INT 7
23739: PUSH
23740: LD_INT 11
23742: PUSH
23743: LD_INT 12
23745: PUSH
23746: LD_INT 15
23748: PUSH
23749: LD_INT 16
23751: PUSH
23752: LD_INT 20
23754: PUSH
23755: LD_INT 21
23757: PUSH
23758: LD_INT 22
23760: PUSH
23761: LD_INT 23
23763: PUSH
23764: LD_INT 25
23766: PUSH
23767: LD_INT 26
23769: PUSH
23770: LD_INT 30
23772: PUSH
23773: LD_INT 31
23775: PUSH
23776: LD_INT 32
23778: PUSH
23779: LD_INT 33
23781: PUSH
23782: LD_INT 34
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: PUSH
23806: LD_INT 101
23808: PUSH
23809: LD_INT 102
23811: PUSH
23812: LD_INT 103
23814: PUSH
23815: LD_INT 106
23817: PUSH
23818: LD_INT 108
23820: PUSH
23821: LD_INT 112
23823: PUSH
23824: LD_INT 113
23826: PUSH
23827: LD_INT 114
23829: PUSH
23830: LD_INT 116
23832: PUSH
23833: LD_INT 117
23835: PUSH
23836: LD_INT 118
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: ST_TO_ADDR
23856: GO 24487
23858: LD_INT 17
23860: DOUBLE
23861: EQUAL
23862: IFTRUE 23866
23864: GO 24090
23866: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23867: LD_ADDR_VAR 0 1
23871: PUSH
23872: LD_INT 1
23874: PUSH
23875: LD_INT 2
23877: PUSH
23878: LD_INT 3
23880: PUSH
23881: LD_INT 4
23883: PUSH
23884: LD_INT 5
23886: PUSH
23887: LD_INT 6
23889: PUSH
23890: LD_INT 7
23892: PUSH
23893: LD_INT 8
23895: PUSH
23896: LD_INT 9
23898: PUSH
23899: LD_INT 10
23901: PUSH
23902: LD_INT 11
23904: PUSH
23905: LD_INT 12
23907: PUSH
23908: LD_INT 13
23910: PUSH
23911: LD_INT 14
23913: PUSH
23914: LD_INT 15
23916: PUSH
23917: LD_INT 16
23919: PUSH
23920: LD_INT 17
23922: PUSH
23923: LD_INT 18
23925: PUSH
23926: LD_INT 19
23928: PUSH
23929: LD_INT 20
23931: PUSH
23932: LD_INT 21
23934: PUSH
23935: LD_INT 22
23937: PUSH
23938: LD_INT 23
23940: PUSH
23941: LD_INT 24
23943: PUSH
23944: LD_INT 25
23946: PUSH
23947: LD_INT 26
23949: PUSH
23950: LD_INT 27
23952: PUSH
23953: LD_INT 28
23955: PUSH
23956: LD_INT 29
23958: PUSH
23959: LD_INT 30
23961: PUSH
23962: LD_INT 31
23964: PUSH
23965: LD_INT 32
23967: PUSH
23968: LD_INT 33
23970: PUSH
23971: LD_INT 34
23973: PUSH
23974: LD_INT 36
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: PUSH
24014: LD_INT 101
24016: PUSH
24017: LD_INT 102
24019: PUSH
24020: LD_INT 103
24022: PUSH
24023: LD_INT 104
24025: PUSH
24026: LD_INT 105
24028: PUSH
24029: LD_INT 106
24031: PUSH
24032: LD_INT 107
24034: PUSH
24035: LD_INT 108
24037: PUSH
24038: LD_INT 109
24040: PUSH
24041: LD_INT 110
24043: PUSH
24044: LD_INT 111
24046: PUSH
24047: LD_INT 112
24049: PUSH
24050: LD_INT 113
24052: PUSH
24053: LD_INT 114
24055: PUSH
24056: LD_INT 116
24058: PUSH
24059: LD_INT 117
24061: PUSH
24062: LD_INT 118
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: ST_TO_ADDR
24088: GO 24487
24090: LD_INT 18
24092: DOUBLE
24093: EQUAL
24094: IFTRUE 24098
24096: GO 24246
24098: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24099: LD_ADDR_VAR 0 1
24103: PUSH
24104: LD_INT 2
24106: PUSH
24107: LD_INT 4
24109: PUSH
24110: LD_INT 5
24112: PUSH
24113: LD_INT 7
24115: PUSH
24116: LD_INT 11
24118: PUSH
24119: LD_INT 12
24121: PUSH
24122: LD_INT 15
24124: PUSH
24125: LD_INT 16
24127: PUSH
24128: LD_INT 20
24130: PUSH
24131: LD_INT 21
24133: PUSH
24134: LD_INT 22
24136: PUSH
24137: LD_INT 23
24139: PUSH
24140: LD_INT 25
24142: PUSH
24143: LD_INT 26
24145: PUSH
24146: LD_INT 30
24148: PUSH
24149: LD_INT 31
24151: PUSH
24152: LD_INT 32
24154: PUSH
24155: LD_INT 33
24157: PUSH
24158: LD_INT 34
24160: PUSH
24161: LD_INT 35
24163: PUSH
24164: LD_INT 36
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 101
24192: PUSH
24193: LD_INT 102
24195: PUSH
24196: LD_INT 103
24198: PUSH
24199: LD_INT 106
24201: PUSH
24202: LD_INT 108
24204: PUSH
24205: LD_INT 112
24207: PUSH
24208: LD_INT 113
24210: PUSH
24211: LD_INT 114
24213: PUSH
24214: LD_INT 115
24216: PUSH
24217: LD_INT 116
24219: PUSH
24220: LD_INT 117
24222: PUSH
24223: LD_INT 118
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: ST_TO_ADDR
24244: GO 24487
24246: LD_INT 19
24248: DOUBLE
24249: EQUAL
24250: IFTRUE 24254
24252: GO 24486
24254: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24255: LD_ADDR_VAR 0 1
24259: PUSH
24260: LD_INT 1
24262: PUSH
24263: LD_INT 2
24265: PUSH
24266: LD_INT 3
24268: PUSH
24269: LD_INT 4
24271: PUSH
24272: LD_INT 5
24274: PUSH
24275: LD_INT 6
24277: PUSH
24278: LD_INT 7
24280: PUSH
24281: LD_INT 8
24283: PUSH
24284: LD_INT 9
24286: PUSH
24287: LD_INT 10
24289: PUSH
24290: LD_INT 11
24292: PUSH
24293: LD_INT 12
24295: PUSH
24296: LD_INT 13
24298: PUSH
24299: LD_INT 14
24301: PUSH
24302: LD_INT 15
24304: PUSH
24305: LD_INT 16
24307: PUSH
24308: LD_INT 17
24310: PUSH
24311: LD_INT 18
24313: PUSH
24314: LD_INT 19
24316: PUSH
24317: LD_INT 20
24319: PUSH
24320: LD_INT 21
24322: PUSH
24323: LD_INT 22
24325: PUSH
24326: LD_INT 23
24328: PUSH
24329: LD_INT 24
24331: PUSH
24332: LD_INT 25
24334: PUSH
24335: LD_INT 26
24337: PUSH
24338: LD_INT 27
24340: PUSH
24341: LD_INT 28
24343: PUSH
24344: LD_INT 29
24346: PUSH
24347: LD_INT 30
24349: PUSH
24350: LD_INT 31
24352: PUSH
24353: LD_INT 32
24355: PUSH
24356: LD_INT 33
24358: PUSH
24359: LD_INT 34
24361: PUSH
24362: LD_INT 35
24364: PUSH
24365: LD_INT 36
24367: PUSH
24368: EMPTY
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: PUSH
24406: LD_INT 101
24408: PUSH
24409: LD_INT 102
24411: PUSH
24412: LD_INT 103
24414: PUSH
24415: LD_INT 104
24417: PUSH
24418: LD_INT 105
24420: PUSH
24421: LD_INT 106
24423: PUSH
24424: LD_INT 107
24426: PUSH
24427: LD_INT 108
24429: PUSH
24430: LD_INT 109
24432: PUSH
24433: LD_INT 110
24435: PUSH
24436: LD_INT 111
24438: PUSH
24439: LD_INT 112
24441: PUSH
24442: LD_INT 113
24444: PUSH
24445: LD_INT 114
24447: PUSH
24448: LD_INT 115
24450: PUSH
24451: LD_INT 116
24453: PUSH
24454: LD_INT 117
24456: PUSH
24457: LD_INT 118
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: PUSH
24480: EMPTY
24481: LIST
24482: LIST
24483: ST_TO_ADDR
24484: GO 24487
24486: POP
// end else
24487: GO 24718
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24489: LD_ADDR_VAR 0 1
24493: PUSH
24494: LD_INT 1
24496: PUSH
24497: LD_INT 2
24499: PUSH
24500: LD_INT 3
24502: PUSH
24503: LD_INT 4
24505: PUSH
24506: LD_INT 5
24508: PUSH
24509: LD_INT 6
24511: PUSH
24512: LD_INT 7
24514: PUSH
24515: LD_INT 8
24517: PUSH
24518: LD_INT 9
24520: PUSH
24521: LD_INT 10
24523: PUSH
24524: LD_INT 11
24526: PUSH
24527: LD_INT 12
24529: PUSH
24530: LD_INT 13
24532: PUSH
24533: LD_INT 14
24535: PUSH
24536: LD_INT 15
24538: PUSH
24539: LD_INT 16
24541: PUSH
24542: LD_INT 17
24544: PUSH
24545: LD_INT 18
24547: PUSH
24548: LD_INT 19
24550: PUSH
24551: LD_INT 20
24553: PUSH
24554: LD_INT 21
24556: PUSH
24557: LD_INT 22
24559: PUSH
24560: LD_INT 23
24562: PUSH
24563: LD_INT 24
24565: PUSH
24566: LD_INT 25
24568: PUSH
24569: LD_INT 26
24571: PUSH
24572: LD_INT 27
24574: PUSH
24575: LD_INT 28
24577: PUSH
24578: LD_INT 29
24580: PUSH
24581: LD_INT 30
24583: PUSH
24584: LD_INT 31
24586: PUSH
24587: LD_INT 32
24589: PUSH
24590: LD_INT 33
24592: PUSH
24593: LD_INT 34
24595: PUSH
24596: LD_INT 35
24598: PUSH
24599: LD_INT 36
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: PUSH
24640: LD_INT 101
24642: PUSH
24643: LD_INT 102
24645: PUSH
24646: LD_INT 103
24648: PUSH
24649: LD_INT 104
24651: PUSH
24652: LD_INT 105
24654: PUSH
24655: LD_INT 106
24657: PUSH
24658: LD_INT 107
24660: PUSH
24661: LD_INT 108
24663: PUSH
24664: LD_INT 109
24666: PUSH
24667: LD_INT 110
24669: PUSH
24670: LD_INT 111
24672: PUSH
24673: LD_INT 112
24675: PUSH
24676: LD_INT 113
24678: PUSH
24679: LD_INT 114
24681: PUSH
24682: LD_INT 115
24684: PUSH
24685: LD_INT 116
24687: PUSH
24688: LD_INT 117
24690: PUSH
24691: LD_INT 118
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: ST_TO_ADDR
// if result then
24718: LD_VAR 0 1
24722: IFFALSE 25011
// begin normal :=  ;
24724: LD_ADDR_VAR 0 3
24728: PUSH
24729: LD_STRING 
24731: ST_TO_ADDR
// hardcore :=  ;
24732: LD_ADDR_VAR 0 4
24736: PUSH
24737: LD_STRING 
24739: ST_TO_ADDR
// for i = 1 to normalCounter do
24740: LD_ADDR_VAR 0 5
24744: PUSH
24745: DOUBLE
24746: LD_INT 1
24748: DEC
24749: ST_TO_ADDR
24750: LD_EXP 72
24754: PUSH
24755: FOR_TO
24756: IFFALSE 24857
// begin tmp := 0 ;
24758: LD_ADDR_VAR 0 2
24762: PUSH
24763: LD_STRING 0
24765: ST_TO_ADDR
// if result [ 1 ] then
24766: LD_VAR 0 1
24770: PUSH
24771: LD_INT 1
24773: ARRAY
24774: IFFALSE 24839
// if result [ 1 ] [ 1 ] = i then
24776: LD_VAR 0 1
24780: PUSH
24781: LD_INT 1
24783: ARRAY
24784: PUSH
24785: LD_INT 1
24787: ARRAY
24788: PUSH
24789: LD_VAR 0 5
24793: EQUAL
24794: IFFALSE 24839
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24796: LD_ADDR_VAR 0 1
24800: PUSH
24801: LD_VAR 0 1
24805: PPUSH
24806: LD_INT 1
24808: PPUSH
24809: LD_VAR 0 1
24813: PUSH
24814: LD_INT 1
24816: ARRAY
24817: PPUSH
24818: LD_INT 1
24820: PPUSH
24821: CALL_OW 3
24825: PPUSH
24826: CALL_OW 1
24830: ST_TO_ADDR
// tmp := 1 ;
24831: LD_ADDR_VAR 0 2
24835: PUSH
24836: LD_STRING 1
24838: ST_TO_ADDR
// end ; normal := normal & tmp ;
24839: LD_ADDR_VAR 0 3
24843: PUSH
24844: LD_VAR 0 3
24848: PUSH
24849: LD_VAR 0 2
24853: STR
24854: ST_TO_ADDR
// end ;
24855: GO 24755
24857: POP
24858: POP
// for i = 1 to hardcoreCounter do
24859: LD_ADDR_VAR 0 5
24863: PUSH
24864: DOUBLE
24865: LD_INT 1
24867: DEC
24868: ST_TO_ADDR
24869: LD_EXP 73
24873: PUSH
24874: FOR_TO
24875: IFFALSE 24980
// begin tmp := 0 ;
24877: LD_ADDR_VAR 0 2
24881: PUSH
24882: LD_STRING 0
24884: ST_TO_ADDR
// if result [ 2 ] then
24885: LD_VAR 0 1
24889: PUSH
24890: LD_INT 2
24892: ARRAY
24893: IFFALSE 24962
// if result [ 2 ] [ 1 ] = 100 + i then
24895: LD_VAR 0 1
24899: PUSH
24900: LD_INT 2
24902: ARRAY
24903: PUSH
24904: LD_INT 1
24906: ARRAY
24907: PUSH
24908: LD_INT 100
24910: PUSH
24911: LD_VAR 0 5
24915: PLUS
24916: EQUAL
24917: IFFALSE 24962
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24919: LD_ADDR_VAR 0 1
24923: PUSH
24924: LD_VAR 0 1
24928: PPUSH
24929: LD_INT 2
24931: PPUSH
24932: LD_VAR 0 1
24936: PUSH
24937: LD_INT 2
24939: ARRAY
24940: PPUSH
24941: LD_INT 1
24943: PPUSH
24944: CALL_OW 3
24948: PPUSH
24949: CALL_OW 1
24953: ST_TO_ADDR
// tmp := 1 ;
24954: LD_ADDR_VAR 0 2
24958: PUSH
24959: LD_STRING 1
24961: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24962: LD_ADDR_VAR 0 4
24966: PUSH
24967: LD_VAR 0 4
24971: PUSH
24972: LD_VAR 0 2
24976: STR
24977: ST_TO_ADDR
// end ;
24978: GO 24874
24980: POP
24981: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
24982: LD_STRING getStreamItemsFromMission("
24984: PUSH
24985: LD_VAR 0 3
24989: STR
24990: PUSH
24991: LD_STRING ","
24993: STR
24994: PUSH
24995: LD_VAR 0 4
24999: STR
25000: PUSH
25001: LD_STRING ")
25003: STR
25004: PPUSH
25005: CALL_OW 559
// end else
25009: GO 25018
// ToLua ( getStreamItemsFromMission("","") ) ;
25011: LD_STRING getStreamItemsFromMission("","")
25013: PPUSH
25014: CALL_OW 559
// end ;
25018: LD_VAR 0 1
25022: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25023: LD_EXP 71
25027: PUSH
25028: LD_EXP 76
25032: AND
25033: IFFALSE 25157
25035: GO 25037
25037: DISABLE
25038: LD_INT 0
25040: PPUSH
25041: PPUSH
// begin enable ;
25042: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25043: LD_ADDR_VAR 0 2
25047: PUSH
25048: LD_INT 22
25050: PUSH
25051: LD_OWVAR 2
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: PUSH
25060: LD_INT 2
25062: PUSH
25063: LD_INT 34
25065: PUSH
25066: LD_INT 7
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: LD_INT 34
25075: PUSH
25076: LD_INT 45
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: PUSH
25083: LD_INT 34
25085: PUSH
25086: LD_INT 28
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PUSH
25093: LD_INT 34
25095: PUSH
25096: LD_INT 47
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PPUSH
25114: CALL_OW 69
25118: ST_TO_ADDR
// if not tmp then
25119: LD_VAR 0 2
25123: NOT
25124: IFFALSE 25128
// exit ;
25126: GO 25157
// for i in tmp do
25128: LD_ADDR_VAR 0 1
25132: PUSH
25133: LD_VAR 0 2
25137: PUSH
25138: FOR_IN
25139: IFFALSE 25155
// begin SetLives ( i , 0 ) ;
25141: LD_VAR 0 1
25145: PPUSH
25146: LD_INT 0
25148: PPUSH
25149: CALL_OW 234
// end ;
25153: GO 25138
25155: POP
25156: POP
// end ;
25157: PPOPN 2
25159: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25160: LD_EXP 71
25164: PUSH
25165: LD_EXP 77
25169: AND
25170: IFFALSE 25254
25172: GO 25174
25174: DISABLE
25175: LD_INT 0
25177: PPUSH
25178: PPUSH
// begin enable ;
25179: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25180: LD_ADDR_VAR 0 2
25184: PUSH
25185: LD_INT 22
25187: PUSH
25188: LD_OWVAR 2
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 32
25199: PUSH
25200: LD_INT 3
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: EMPTY
25208: LIST
25209: LIST
25210: PPUSH
25211: CALL_OW 69
25215: ST_TO_ADDR
// if not tmp then
25216: LD_VAR 0 2
25220: NOT
25221: IFFALSE 25225
// exit ;
25223: GO 25254
// for i in tmp do
25225: LD_ADDR_VAR 0 1
25229: PUSH
25230: LD_VAR 0 2
25234: PUSH
25235: FOR_IN
25236: IFFALSE 25252
// begin SetLives ( i , 0 ) ;
25238: LD_VAR 0 1
25242: PPUSH
25243: LD_INT 0
25245: PPUSH
25246: CALL_OW 234
// end ;
25250: GO 25235
25252: POP
25253: POP
// end ;
25254: PPOPN 2
25256: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25257: LD_EXP 71
25261: PUSH
25262: LD_EXP 74
25266: AND
25267: IFFALSE 25360
25269: GO 25271
25271: DISABLE
25272: LD_INT 0
25274: PPUSH
// begin enable ;
25275: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25276: LD_ADDR_VAR 0 1
25280: PUSH
25281: LD_INT 22
25283: PUSH
25284: LD_OWVAR 2
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: LD_INT 2
25295: PUSH
25296: LD_INT 25
25298: PUSH
25299: LD_INT 5
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PUSH
25306: LD_INT 25
25308: PUSH
25309: LD_INT 9
25311: PUSH
25312: EMPTY
25313: LIST
25314: LIST
25315: PUSH
25316: LD_INT 25
25318: PUSH
25319: LD_INT 8
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PPUSH
25336: CALL_OW 69
25340: PUSH
25341: FOR_IN
25342: IFFALSE 25358
// begin SetClass ( i , 1 ) ;
25344: LD_VAR 0 1
25348: PPUSH
25349: LD_INT 1
25351: PPUSH
25352: CALL_OW 336
// end ;
25356: GO 25341
25358: POP
25359: POP
// end ;
25360: PPOPN 1
25362: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25363: LD_EXP 71
25367: PUSH
25368: LD_EXP 75
25372: AND
25373: PUSH
25374: LD_OWVAR 65
25378: PUSH
25379: LD_INT 7
25381: LESS
25382: AND
25383: IFFALSE 25397
25385: GO 25387
25387: DISABLE
// begin enable ;
25388: ENABLE
// game_speed := 7 ;
25389: LD_ADDR_OWVAR 65
25393: PUSH
25394: LD_INT 7
25396: ST_TO_ADDR
// end ;
25397: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25398: LD_EXP 71
25402: PUSH
25403: LD_EXP 78
25407: AND
25408: IFFALSE 25610
25410: GO 25412
25412: DISABLE
25413: LD_INT 0
25415: PPUSH
25416: PPUSH
25417: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25418: LD_ADDR_VAR 0 3
25422: PUSH
25423: LD_INT 81
25425: PUSH
25426: LD_OWVAR 2
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: PUSH
25435: LD_INT 21
25437: PUSH
25438: LD_INT 1
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PPUSH
25449: CALL_OW 69
25453: ST_TO_ADDR
// if not tmp then
25454: LD_VAR 0 3
25458: NOT
25459: IFFALSE 25463
// exit ;
25461: GO 25610
// if tmp > 5 then
25463: LD_VAR 0 3
25467: PUSH
25468: LD_INT 5
25470: GREATER
25471: IFFALSE 25483
// k := 5 else
25473: LD_ADDR_VAR 0 2
25477: PUSH
25478: LD_INT 5
25480: ST_TO_ADDR
25481: GO 25493
// k := tmp ;
25483: LD_ADDR_VAR 0 2
25487: PUSH
25488: LD_VAR 0 3
25492: ST_TO_ADDR
// for i := 1 to k do
25493: LD_ADDR_VAR 0 1
25497: PUSH
25498: DOUBLE
25499: LD_INT 1
25501: DEC
25502: ST_TO_ADDR
25503: LD_VAR 0 2
25507: PUSH
25508: FOR_TO
25509: IFFALSE 25608
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25511: LD_VAR 0 3
25515: PUSH
25516: LD_VAR 0 1
25520: ARRAY
25521: PPUSH
25522: LD_VAR 0 1
25526: PUSH
25527: LD_INT 4
25529: MOD
25530: PUSH
25531: LD_INT 1
25533: PLUS
25534: PPUSH
25535: CALL_OW 259
25539: PUSH
25540: LD_INT 10
25542: LESS
25543: IFFALSE 25606
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25545: LD_VAR 0 3
25549: PUSH
25550: LD_VAR 0 1
25554: ARRAY
25555: PPUSH
25556: LD_VAR 0 1
25560: PUSH
25561: LD_INT 4
25563: MOD
25564: PUSH
25565: LD_INT 1
25567: PLUS
25568: PPUSH
25569: LD_VAR 0 3
25573: PUSH
25574: LD_VAR 0 1
25578: ARRAY
25579: PPUSH
25580: LD_VAR 0 1
25584: PUSH
25585: LD_INT 4
25587: MOD
25588: PUSH
25589: LD_INT 1
25591: PLUS
25592: PPUSH
25593: CALL_OW 259
25597: PUSH
25598: LD_INT 1
25600: PLUS
25601: PPUSH
25602: CALL_OW 237
25606: GO 25508
25608: POP
25609: POP
// end ;
25610: PPOPN 3
25612: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25613: LD_EXP 71
25617: PUSH
25618: LD_EXP 79
25622: AND
25623: IFFALSE 25643
25625: GO 25627
25627: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25628: LD_INT 4
25630: PPUSH
25631: LD_OWVAR 2
25635: PPUSH
25636: LD_INT 0
25638: PPUSH
25639: CALL_OW 324
25643: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25644: LD_EXP 71
25648: PUSH
25649: LD_EXP 108
25653: AND
25654: IFFALSE 25674
25656: GO 25658
25658: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25659: LD_INT 19
25661: PPUSH
25662: LD_OWVAR 2
25666: PPUSH
25667: LD_INT 0
25669: PPUSH
25670: CALL_OW 324
25674: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25675: LD_EXP 71
25679: PUSH
25680: LD_EXP 80
25684: AND
25685: IFFALSE 25787
25687: GO 25689
25689: DISABLE
25690: LD_INT 0
25692: PPUSH
25693: PPUSH
// begin enable ;
25694: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25695: LD_ADDR_VAR 0 2
25699: PUSH
25700: LD_INT 22
25702: PUSH
25703: LD_OWVAR 2
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: LD_INT 2
25714: PUSH
25715: LD_INT 34
25717: PUSH
25718: LD_INT 11
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PUSH
25725: LD_INT 34
25727: PUSH
25728: LD_INT 30
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: LIST
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PPUSH
25744: CALL_OW 69
25748: ST_TO_ADDR
// if not tmp then
25749: LD_VAR 0 2
25753: NOT
25754: IFFALSE 25758
// exit ;
25756: GO 25787
// for i in tmp do
25758: LD_ADDR_VAR 0 1
25762: PUSH
25763: LD_VAR 0 2
25767: PUSH
25768: FOR_IN
25769: IFFALSE 25785
// begin SetLives ( i , 0 ) ;
25771: LD_VAR 0 1
25775: PPUSH
25776: LD_INT 0
25778: PPUSH
25779: CALL_OW 234
// end ;
25783: GO 25768
25785: POP
25786: POP
// end ;
25787: PPOPN 2
25789: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25790: LD_EXP 71
25794: PUSH
25795: LD_EXP 81
25799: AND
25800: IFFALSE 25820
25802: GO 25804
25804: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25805: LD_INT 32
25807: PPUSH
25808: LD_OWVAR 2
25812: PPUSH
25813: LD_INT 0
25815: PPUSH
25816: CALL_OW 324
25820: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25821: LD_EXP 71
25825: PUSH
25826: LD_EXP 82
25830: AND
25831: IFFALSE 26012
25833: GO 25835
25835: DISABLE
25836: LD_INT 0
25838: PPUSH
25839: PPUSH
25840: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25841: LD_ADDR_VAR 0 2
25845: PUSH
25846: LD_INT 22
25848: PUSH
25849: LD_OWVAR 2
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: PUSH
25858: LD_INT 33
25860: PUSH
25861: LD_INT 3
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PPUSH
25872: CALL_OW 69
25876: ST_TO_ADDR
// if not tmp then
25877: LD_VAR 0 2
25881: NOT
25882: IFFALSE 25886
// exit ;
25884: GO 26012
// side := 0 ;
25886: LD_ADDR_VAR 0 3
25890: PUSH
25891: LD_INT 0
25893: ST_TO_ADDR
// for i := 1 to 8 do
25894: LD_ADDR_VAR 0 1
25898: PUSH
25899: DOUBLE
25900: LD_INT 1
25902: DEC
25903: ST_TO_ADDR
25904: LD_INT 8
25906: PUSH
25907: FOR_TO
25908: IFFALSE 25956
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25910: LD_OWVAR 2
25914: PUSH
25915: LD_VAR 0 1
25919: NONEQUAL
25920: PUSH
25921: LD_OWVAR 2
25925: PPUSH
25926: LD_VAR 0 1
25930: PPUSH
25931: CALL_OW 81
25935: PUSH
25936: LD_INT 2
25938: EQUAL
25939: AND
25940: IFFALSE 25954
// begin side := i ;
25942: LD_ADDR_VAR 0 3
25946: PUSH
25947: LD_VAR 0 1
25951: ST_TO_ADDR
// break ;
25952: GO 25956
// end ;
25954: GO 25907
25956: POP
25957: POP
// if not side then
25958: LD_VAR 0 3
25962: NOT
25963: IFFALSE 25967
// exit ;
25965: GO 26012
// for i := 1 to tmp do
25967: LD_ADDR_VAR 0 1
25971: PUSH
25972: DOUBLE
25973: LD_INT 1
25975: DEC
25976: ST_TO_ADDR
25977: LD_VAR 0 2
25981: PUSH
25982: FOR_TO
25983: IFFALSE 26010
// if Prob ( 60 ) then
25985: LD_INT 60
25987: PPUSH
25988: CALL_OW 13
25992: IFFALSE 26008
// SetSide ( i , side ) ;
25994: LD_VAR 0 1
25998: PPUSH
25999: LD_VAR 0 3
26003: PPUSH
26004: CALL_OW 235
26008: GO 25982
26010: POP
26011: POP
// end ;
26012: PPOPN 3
26014: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26015: LD_EXP 71
26019: PUSH
26020: LD_EXP 84
26024: AND
26025: IFFALSE 26144
26027: GO 26029
26029: DISABLE
26030: LD_INT 0
26032: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26033: LD_ADDR_VAR 0 1
26037: PUSH
26038: LD_INT 22
26040: PUSH
26041: LD_OWVAR 2
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: PUSH
26050: LD_INT 21
26052: PUSH
26053: LD_INT 1
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: LD_INT 3
26062: PUSH
26063: LD_INT 23
26065: PUSH
26066: LD_INT 0
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: LIST
26081: PPUSH
26082: CALL_OW 69
26086: PUSH
26087: FOR_IN
26088: IFFALSE 26142
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26090: LD_VAR 0 1
26094: PPUSH
26095: CALL_OW 257
26099: PUSH
26100: LD_INT 1
26102: PUSH
26103: LD_INT 2
26105: PUSH
26106: LD_INT 3
26108: PUSH
26109: LD_INT 4
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: IN
26118: IFFALSE 26140
// SetClass ( un , rand ( 1 , 4 ) ) ;
26120: LD_VAR 0 1
26124: PPUSH
26125: LD_INT 1
26127: PPUSH
26128: LD_INT 4
26130: PPUSH
26131: CALL_OW 12
26135: PPUSH
26136: CALL_OW 336
26140: GO 26087
26142: POP
26143: POP
// end ;
26144: PPOPN 1
26146: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26147: LD_EXP 71
26151: PUSH
26152: LD_EXP 83
26156: AND
26157: IFFALSE 26236
26159: GO 26161
26161: DISABLE
26162: LD_INT 0
26164: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26165: LD_ADDR_VAR 0 1
26169: PUSH
26170: LD_INT 22
26172: PUSH
26173: LD_OWVAR 2
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: PUSH
26182: LD_INT 21
26184: PUSH
26185: LD_INT 3
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PPUSH
26196: CALL_OW 69
26200: ST_TO_ADDR
// if not tmp then
26201: LD_VAR 0 1
26205: NOT
26206: IFFALSE 26210
// exit ;
26208: GO 26236
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26210: LD_VAR 0 1
26214: PUSH
26215: LD_INT 1
26217: PPUSH
26218: LD_VAR 0 1
26222: PPUSH
26223: CALL_OW 12
26227: ARRAY
26228: PPUSH
26229: LD_INT 100
26231: PPUSH
26232: CALL_OW 234
// end ;
26236: PPOPN 1
26238: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26239: LD_EXP 71
26243: PUSH
26244: LD_EXP 85
26248: AND
26249: IFFALSE 26347
26251: GO 26253
26253: DISABLE
26254: LD_INT 0
26256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26257: LD_ADDR_VAR 0 1
26261: PUSH
26262: LD_INT 22
26264: PUSH
26265: LD_OWVAR 2
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PUSH
26274: LD_INT 21
26276: PUSH
26277: LD_INT 1
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PPUSH
26288: CALL_OW 69
26292: ST_TO_ADDR
// if not tmp then
26293: LD_VAR 0 1
26297: NOT
26298: IFFALSE 26302
// exit ;
26300: GO 26347
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26302: LD_VAR 0 1
26306: PUSH
26307: LD_INT 1
26309: PPUSH
26310: LD_VAR 0 1
26314: PPUSH
26315: CALL_OW 12
26319: ARRAY
26320: PPUSH
26321: LD_INT 1
26323: PPUSH
26324: LD_INT 4
26326: PPUSH
26327: CALL_OW 12
26331: PPUSH
26332: LD_INT 3000
26334: PPUSH
26335: LD_INT 9000
26337: PPUSH
26338: CALL_OW 12
26342: PPUSH
26343: CALL_OW 492
// end ;
26347: PPOPN 1
26349: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26350: LD_EXP 71
26354: PUSH
26355: LD_EXP 86
26359: AND
26360: IFFALSE 26380
26362: GO 26364
26364: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26365: LD_INT 1
26367: PPUSH
26368: LD_OWVAR 2
26372: PPUSH
26373: LD_INT 0
26375: PPUSH
26376: CALL_OW 324
26380: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26381: LD_EXP 71
26385: PUSH
26386: LD_EXP 87
26390: AND
26391: IFFALSE 26474
26393: GO 26395
26395: DISABLE
26396: LD_INT 0
26398: PPUSH
26399: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26400: LD_ADDR_VAR 0 2
26404: PUSH
26405: LD_INT 22
26407: PUSH
26408: LD_OWVAR 2
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 21
26419: PUSH
26420: LD_INT 3
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PPUSH
26431: CALL_OW 69
26435: ST_TO_ADDR
// if not tmp then
26436: LD_VAR 0 2
26440: NOT
26441: IFFALSE 26445
// exit ;
26443: GO 26474
// for i in tmp do
26445: LD_ADDR_VAR 0 1
26449: PUSH
26450: LD_VAR 0 2
26454: PUSH
26455: FOR_IN
26456: IFFALSE 26472
// SetBLevel ( i , 10 ) ;
26458: LD_VAR 0 1
26462: PPUSH
26463: LD_INT 10
26465: PPUSH
26466: CALL_OW 241
26470: GO 26455
26472: POP
26473: POP
// end ;
26474: PPOPN 2
26476: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26477: LD_EXP 71
26481: PUSH
26482: LD_EXP 88
26486: AND
26487: IFFALSE 26598
26489: GO 26491
26491: DISABLE
26492: LD_INT 0
26494: PPUSH
26495: PPUSH
26496: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26497: LD_ADDR_VAR 0 3
26501: PUSH
26502: LD_INT 22
26504: PUSH
26505: LD_OWVAR 2
26509: PUSH
26510: EMPTY
26511: LIST
26512: LIST
26513: PUSH
26514: LD_INT 25
26516: PUSH
26517: LD_INT 1
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: PPUSH
26528: CALL_OW 69
26532: ST_TO_ADDR
// if not tmp then
26533: LD_VAR 0 3
26537: NOT
26538: IFFALSE 26542
// exit ;
26540: GO 26598
// un := tmp [ rand ( 1 , tmp ) ] ;
26542: LD_ADDR_VAR 0 2
26546: PUSH
26547: LD_VAR 0 3
26551: PUSH
26552: LD_INT 1
26554: PPUSH
26555: LD_VAR 0 3
26559: PPUSH
26560: CALL_OW 12
26564: ARRAY
26565: ST_TO_ADDR
// if Crawls ( un ) then
26566: LD_VAR 0 2
26570: PPUSH
26571: CALL_OW 318
26575: IFFALSE 26586
// ComWalk ( un ) ;
26577: LD_VAR 0 2
26581: PPUSH
26582: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26586: LD_VAR 0 2
26590: PPUSH
26591: LD_INT 5
26593: PPUSH
26594: CALL_OW 336
// end ;
26598: PPOPN 3
26600: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26601: LD_EXP 71
26605: PUSH
26606: LD_EXP 89
26610: AND
26611: PUSH
26612: LD_OWVAR 67
26616: PUSH
26617: LD_INT 4
26619: LESS
26620: AND
26621: IFFALSE 26640
26623: GO 26625
26625: DISABLE
// begin Difficulty := Difficulty + 1 ;
26626: LD_ADDR_OWVAR 67
26630: PUSH
26631: LD_OWVAR 67
26635: PUSH
26636: LD_INT 1
26638: PLUS
26639: ST_TO_ADDR
// end ;
26640: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26641: LD_EXP 71
26645: PUSH
26646: LD_EXP 90
26650: AND
26651: IFFALSE 26754
26653: GO 26655
26655: DISABLE
26656: LD_INT 0
26658: PPUSH
// begin for i := 1 to 5 do
26659: LD_ADDR_VAR 0 1
26663: PUSH
26664: DOUBLE
26665: LD_INT 1
26667: DEC
26668: ST_TO_ADDR
26669: LD_INT 5
26671: PUSH
26672: FOR_TO
26673: IFFALSE 26752
// begin uc_nation := nation_nature ;
26675: LD_ADDR_OWVAR 21
26679: PUSH
26680: LD_INT 0
26682: ST_TO_ADDR
// uc_side := 0 ;
26683: LD_ADDR_OWVAR 20
26687: PUSH
26688: LD_INT 0
26690: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26691: LD_ADDR_OWVAR 29
26695: PUSH
26696: LD_INT 12
26698: PUSH
26699: LD_INT 12
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: ST_TO_ADDR
// hc_agressivity := 20 ;
26706: LD_ADDR_OWVAR 35
26710: PUSH
26711: LD_INT 20
26713: ST_TO_ADDR
// hc_class := class_tiger ;
26714: LD_ADDR_OWVAR 28
26718: PUSH
26719: LD_INT 14
26721: ST_TO_ADDR
// hc_gallery :=  ;
26722: LD_ADDR_OWVAR 33
26726: PUSH
26727: LD_STRING 
26729: ST_TO_ADDR
// hc_name :=  ;
26730: LD_ADDR_OWVAR 26
26734: PUSH
26735: LD_STRING 
26737: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26738: CALL_OW 44
26742: PPUSH
26743: LD_INT 0
26745: PPUSH
26746: CALL_OW 51
// end ;
26750: GO 26672
26752: POP
26753: POP
// end ;
26754: PPOPN 1
26756: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26757: LD_EXP 71
26761: PUSH
26762: LD_EXP 91
26766: AND
26767: IFFALSE 26776
26769: GO 26771
26771: DISABLE
// StreamSibBomb ;
26772: CALL 26777 0 0
26776: END
// export function StreamSibBomb ; var i , x , y ; begin
26777: LD_INT 0
26779: PPUSH
26780: PPUSH
26781: PPUSH
26782: PPUSH
// result := false ;
26783: LD_ADDR_VAR 0 1
26787: PUSH
26788: LD_INT 0
26790: ST_TO_ADDR
// for i := 1 to 16 do
26791: LD_ADDR_VAR 0 2
26795: PUSH
26796: DOUBLE
26797: LD_INT 1
26799: DEC
26800: ST_TO_ADDR
26801: LD_INT 16
26803: PUSH
26804: FOR_TO
26805: IFFALSE 27004
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26807: LD_ADDR_VAR 0 3
26811: PUSH
26812: LD_INT 10
26814: PUSH
26815: LD_INT 20
26817: PUSH
26818: LD_INT 30
26820: PUSH
26821: LD_INT 40
26823: PUSH
26824: LD_INT 50
26826: PUSH
26827: LD_INT 60
26829: PUSH
26830: LD_INT 70
26832: PUSH
26833: LD_INT 80
26835: PUSH
26836: LD_INT 90
26838: PUSH
26839: LD_INT 100
26841: PUSH
26842: LD_INT 110
26844: PUSH
26845: LD_INT 120
26847: PUSH
26848: LD_INT 130
26850: PUSH
26851: LD_INT 140
26853: PUSH
26854: LD_INT 150
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 1
26876: PPUSH
26877: LD_INT 15
26879: PPUSH
26880: CALL_OW 12
26884: ARRAY
26885: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26886: LD_ADDR_VAR 0 4
26890: PUSH
26891: LD_INT 10
26893: PUSH
26894: LD_INT 20
26896: PUSH
26897: LD_INT 30
26899: PUSH
26900: LD_INT 40
26902: PUSH
26903: LD_INT 50
26905: PUSH
26906: LD_INT 60
26908: PUSH
26909: LD_INT 70
26911: PUSH
26912: LD_INT 80
26914: PUSH
26915: LD_INT 90
26917: PUSH
26918: LD_INT 100
26920: PUSH
26921: LD_INT 110
26923: PUSH
26924: LD_INT 120
26926: PUSH
26927: LD_INT 130
26929: PUSH
26930: LD_INT 140
26932: PUSH
26933: LD_INT 150
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 1
26955: PPUSH
26956: LD_INT 15
26958: PPUSH
26959: CALL_OW 12
26963: ARRAY
26964: ST_TO_ADDR
// if ValidHex ( x , y ) then
26965: LD_VAR 0 3
26969: PPUSH
26970: LD_VAR 0 4
26974: PPUSH
26975: CALL_OW 488
26979: IFFALSE 27002
// begin result := [ x , y ] ;
26981: LD_ADDR_VAR 0 1
26985: PUSH
26986: LD_VAR 0 3
26990: PUSH
26991: LD_VAR 0 4
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: ST_TO_ADDR
// break ;
27000: GO 27004
// end ; end ;
27002: GO 26804
27004: POP
27005: POP
// if result then
27006: LD_VAR 0 1
27010: IFFALSE 27070
// begin ToLua ( playSibBomb() ) ;
27012: LD_STRING playSibBomb()
27014: PPUSH
27015: CALL_OW 559
// wait ( 0 0$14 ) ;
27019: LD_INT 490
27021: PPUSH
27022: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27026: LD_VAR 0 1
27030: PUSH
27031: LD_INT 1
27033: ARRAY
27034: PPUSH
27035: LD_VAR 0 1
27039: PUSH
27040: LD_INT 2
27042: ARRAY
27043: PPUSH
27044: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27048: LD_VAR 0 1
27052: PUSH
27053: LD_INT 1
27055: ARRAY
27056: PPUSH
27057: LD_VAR 0 1
27061: PUSH
27062: LD_INT 2
27064: ARRAY
27065: PPUSH
27066: CALL_OW 429
// end ; end ;
27070: LD_VAR 0 1
27074: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27075: LD_EXP 71
27079: PUSH
27080: LD_EXP 93
27084: AND
27085: IFFALSE 27097
27087: GO 27089
27089: DISABLE
// YouLost (  ) ;
27090: LD_STRING 
27092: PPUSH
27093: CALL_OW 104
27097: END
// every 0 0$1 trigger StreamModeActive and sFog do
27098: LD_EXP 71
27102: PUSH
27103: LD_EXP 92
27107: AND
27108: IFFALSE 27122
27110: GO 27112
27112: DISABLE
// FogOff ( your_side ) ;
27113: LD_OWVAR 2
27117: PPUSH
27118: CALL_OW 344
27122: END
// every 0 0$1 trigger StreamModeActive and sSun do
27123: LD_EXP 71
27127: PUSH
27128: LD_EXP 94
27132: AND
27133: IFFALSE 27161
27135: GO 27137
27137: DISABLE
// begin solar_recharge_percent := 0 ;
27138: LD_ADDR_OWVAR 79
27142: PUSH
27143: LD_INT 0
27145: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27146: LD_INT 10500
27148: PPUSH
27149: CALL_OW 67
// solar_recharge_percent := 100 ;
27153: LD_ADDR_OWVAR 79
27157: PUSH
27158: LD_INT 100
27160: ST_TO_ADDR
// end ;
27161: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27162: LD_EXP 71
27166: PUSH
27167: LD_EXP 95
27171: AND
27172: IFFALSE 27411
27174: GO 27176
27176: DISABLE
27177: LD_INT 0
27179: PPUSH
27180: PPUSH
27181: PPUSH
// begin tmp := [ ] ;
27182: LD_ADDR_VAR 0 3
27186: PUSH
27187: EMPTY
27188: ST_TO_ADDR
// for i := 1 to 6 do
27189: LD_ADDR_VAR 0 1
27193: PUSH
27194: DOUBLE
27195: LD_INT 1
27197: DEC
27198: ST_TO_ADDR
27199: LD_INT 6
27201: PUSH
27202: FOR_TO
27203: IFFALSE 27308
// begin uc_nation := nation_nature ;
27205: LD_ADDR_OWVAR 21
27209: PUSH
27210: LD_INT 0
27212: ST_TO_ADDR
// uc_side := 0 ;
27213: LD_ADDR_OWVAR 20
27217: PUSH
27218: LD_INT 0
27220: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27221: LD_ADDR_OWVAR 29
27225: PUSH
27226: LD_INT 12
27228: PUSH
27229: LD_INT 12
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: ST_TO_ADDR
// hc_agressivity := 20 ;
27236: LD_ADDR_OWVAR 35
27240: PUSH
27241: LD_INT 20
27243: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27244: LD_ADDR_OWVAR 28
27248: PUSH
27249: LD_INT 17
27251: ST_TO_ADDR
// hc_gallery :=  ;
27252: LD_ADDR_OWVAR 33
27256: PUSH
27257: LD_STRING 
27259: ST_TO_ADDR
// hc_name :=  ;
27260: LD_ADDR_OWVAR 26
27264: PUSH
27265: LD_STRING 
27267: ST_TO_ADDR
// un := CreateHuman ;
27268: LD_ADDR_VAR 0 2
27272: PUSH
27273: CALL_OW 44
27277: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27278: LD_VAR 0 2
27282: PPUSH
27283: LD_INT 1
27285: PPUSH
27286: CALL_OW 51
// tmp := tmp ^ un ;
27290: LD_ADDR_VAR 0 3
27294: PUSH
27295: LD_VAR 0 3
27299: PUSH
27300: LD_VAR 0 2
27304: ADD
27305: ST_TO_ADDR
// end ;
27306: GO 27202
27308: POP
27309: POP
// repeat wait ( 0 0$1 ) ;
27310: LD_INT 35
27312: PPUSH
27313: CALL_OW 67
// for un in tmp do
27317: LD_ADDR_VAR 0 2
27321: PUSH
27322: LD_VAR 0 3
27326: PUSH
27327: FOR_IN
27328: IFFALSE 27402
// begin if IsDead ( un ) then
27330: LD_VAR 0 2
27334: PPUSH
27335: CALL_OW 301
27339: IFFALSE 27359
// begin tmp := tmp diff un ;
27341: LD_ADDR_VAR 0 3
27345: PUSH
27346: LD_VAR 0 3
27350: PUSH
27351: LD_VAR 0 2
27355: DIFF
27356: ST_TO_ADDR
// continue ;
27357: GO 27327
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27359: LD_VAR 0 2
27363: PPUSH
27364: LD_INT 3
27366: PUSH
27367: LD_INT 22
27369: PUSH
27370: LD_INT 0
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PPUSH
27381: CALL_OW 69
27385: PPUSH
27386: LD_VAR 0 2
27390: PPUSH
27391: CALL_OW 74
27395: PPUSH
27396: CALL_OW 115
// end ;
27400: GO 27327
27402: POP
27403: POP
// until not tmp ;
27404: LD_VAR 0 3
27408: NOT
27409: IFFALSE 27310
// end ;
27411: PPOPN 3
27413: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27414: LD_EXP 71
27418: PUSH
27419: LD_EXP 96
27423: AND
27424: IFFALSE 27478
27426: GO 27428
27428: DISABLE
// begin ToLua ( displayTroll(); ) ;
27429: LD_STRING displayTroll();
27431: PPUSH
27432: CALL_OW 559
// wait ( 3 3$00 ) ;
27436: LD_INT 6300
27438: PPUSH
27439: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27443: LD_STRING hideTroll();
27445: PPUSH
27446: CALL_OW 559
// wait ( 1 1$00 ) ;
27450: LD_INT 2100
27452: PPUSH
27453: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27457: LD_STRING displayTroll();
27459: PPUSH
27460: CALL_OW 559
// wait ( 1 1$00 ) ;
27464: LD_INT 2100
27466: PPUSH
27467: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27471: LD_STRING hideTroll();
27473: PPUSH
27474: CALL_OW 559
// end ;
27478: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27479: LD_EXP 71
27483: PUSH
27484: LD_EXP 97
27488: AND
27489: IFFALSE 27552
27491: GO 27493
27493: DISABLE
27494: LD_INT 0
27496: PPUSH
// begin p := 0 ;
27497: LD_ADDR_VAR 0 1
27501: PUSH
27502: LD_INT 0
27504: ST_TO_ADDR
// repeat game_speed := 1 ;
27505: LD_ADDR_OWVAR 65
27509: PUSH
27510: LD_INT 1
27512: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27513: LD_INT 35
27515: PPUSH
27516: CALL_OW 67
// p := p + 1 ;
27520: LD_ADDR_VAR 0 1
27524: PUSH
27525: LD_VAR 0 1
27529: PUSH
27530: LD_INT 1
27532: PLUS
27533: ST_TO_ADDR
// until p >= 60 ;
27534: LD_VAR 0 1
27538: PUSH
27539: LD_INT 60
27541: GREATEREQUAL
27542: IFFALSE 27505
// game_speed := 4 ;
27544: LD_ADDR_OWVAR 65
27548: PUSH
27549: LD_INT 4
27551: ST_TO_ADDR
// end ;
27552: PPOPN 1
27554: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27555: LD_EXP 71
27559: PUSH
27560: LD_EXP 98
27564: AND
27565: IFFALSE 27711
27567: GO 27569
27569: DISABLE
27570: LD_INT 0
27572: PPUSH
27573: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27574: LD_ADDR_VAR 0 1
27578: PUSH
27579: LD_INT 22
27581: PUSH
27582: LD_OWVAR 2
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: PUSH
27591: LD_INT 2
27593: PUSH
27594: LD_INT 30
27596: PUSH
27597: LD_INT 0
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: PUSH
27604: LD_INT 30
27606: PUSH
27607: LD_INT 1
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: LIST
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PPUSH
27623: CALL_OW 69
27627: ST_TO_ADDR
// if not depot then
27628: LD_VAR 0 1
27632: NOT
27633: IFFALSE 27637
// exit ;
27635: GO 27711
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27637: LD_ADDR_VAR 0 2
27641: PUSH
27642: LD_VAR 0 1
27646: PUSH
27647: LD_INT 1
27649: PPUSH
27650: LD_VAR 0 1
27654: PPUSH
27655: CALL_OW 12
27659: ARRAY
27660: PPUSH
27661: CALL_OW 274
27665: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27666: LD_VAR 0 2
27670: PPUSH
27671: LD_INT 1
27673: PPUSH
27674: LD_INT 0
27676: PPUSH
27677: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27681: LD_VAR 0 2
27685: PPUSH
27686: LD_INT 2
27688: PPUSH
27689: LD_INT 0
27691: PPUSH
27692: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27696: LD_VAR 0 2
27700: PPUSH
27701: LD_INT 3
27703: PPUSH
27704: LD_INT 0
27706: PPUSH
27707: CALL_OW 277
// end ;
27711: PPOPN 2
27713: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27714: LD_EXP 71
27718: PUSH
27719: LD_EXP 99
27723: AND
27724: IFFALSE 27821
27726: GO 27728
27728: DISABLE
27729: LD_INT 0
27731: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27732: LD_ADDR_VAR 0 1
27736: PUSH
27737: LD_INT 22
27739: PUSH
27740: LD_OWVAR 2
27744: PUSH
27745: EMPTY
27746: LIST
27747: LIST
27748: PUSH
27749: LD_INT 21
27751: PUSH
27752: LD_INT 1
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: PUSH
27759: LD_INT 3
27761: PUSH
27762: LD_INT 23
27764: PUSH
27765: LD_INT 0
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: LIST
27780: PPUSH
27781: CALL_OW 69
27785: ST_TO_ADDR
// if not tmp then
27786: LD_VAR 0 1
27790: NOT
27791: IFFALSE 27795
// exit ;
27793: GO 27821
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27795: LD_VAR 0 1
27799: PUSH
27800: LD_INT 1
27802: PPUSH
27803: LD_VAR 0 1
27807: PPUSH
27808: CALL_OW 12
27812: ARRAY
27813: PPUSH
27814: LD_INT 200
27816: PPUSH
27817: CALL_OW 234
// end ;
27821: PPOPN 1
27823: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27824: LD_EXP 71
27828: PUSH
27829: LD_EXP 100
27833: AND
27834: IFFALSE 27913
27836: GO 27838
27838: DISABLE
27839: LD_INT 0
27841: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27842: LD_ADDR_VAR 0 1
27846: PUSH
27847: LD_INT 22
27849: PUSH
27850: LD_OWVAR 2
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 21
27861: PUSH
27862: LD_INT 2
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PPUSH
27873: CALL_OW 69
27877: ST_TO_ADDR
// if not tmp then
27878: LD_VAR 0 1
27882: NOT
27883: IFFALSE 27887
// exit ;
27885: GO 27913
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27887: LD_VAR 0 1
27891: PUSH
27892: LD_INT 1
27894: PPUSH
27895: LD_VAR 0 1
27899: PPUSH
27900: CALL_OW 12
27904: ARRAY
27905: PPUSH
27906: LD_INT 60
27908: PPUSH
27909: CALL_OW 234
// end ;
27913: PPOPN 1
27915: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27916: LD_EXP 71
27920: PUSH
27921: LD_EXP 101
27925: AND
27926: IFFALSE 28025
27928: GO 27930
27930: DISABLE
27931: LD_INT 0
27933: PPUSH
27934: PPUSH
// begin enable ;
27935: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27936: LD_ADDR_VAR 0 1
27940: PUSH
27941: LD_INT 22
27943: PUSH
27944: LD_OWVAR 2
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 61
27955: PUSH
27956: EMPTY
27957: LIST
27958: PUSH
27959: LD_INT 33
27961: PUSH
27962: LD_INT 2
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: LIST
27973: PPUSH
27974: CALL_OW 69
27978: ST_TO_ADDR
// if not tmp then
27979: LD_VAR 0 1
27983: NOT
27984: IFFALSE 27988
// exit ;
27986: GO 28025
// for i in tmp do
27988: LD_ADDR_VAR 0 2
27992: PUSH
27993: LD_VAR 0 1
27997: PUSH
27998: FOR_IN
27999: IFFALSE 28023
// if IsControledBy ( i ) then
28001: LD_VAR 0 2
28005: PPUSH
28006: CALL_OW 312
28010: IFFALSE 28021
// ComUnlink ( i ) ;
28012: LD_VAR 0 2
28016: PPUSH
28017: CALL_OW 136
28021: GO 27998
28023: POP
28024: POP
// end ;
28025: PPOPN 2
28027: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28028: LD_EXP 71
28032: PUSH
28033: LD_EXP 102
28037: AND
28038: IFFALSE 28178
28040: GO 28042
28042: DISABLE
28043: LD_INT 0
28045: PPUSH
28046: PPUSH
// begin ToLua ( displayPowell(); ) ;
28047: LD_STRING displayPowell();
28049: PPUSH
28050: CALL_OW 559
// uc_side := 0 ;
28054: LD_ADDR_OWVAR 20
28058: PUSH
28059: LD_INT 0
28061: ST_TO_ADDR
// uc_nation := 2 ;
28062: LD_ADDR_OWVAR 21
28066: PUSH
28067: LD_INT 2
28069: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28070: LD_ADDR_OWVAR 37
28074: PUSH
28075: LD_INT 14
28077: ST_TO_ADDR
// vc_engine := engine_siberite ;
28078: LD_ADDR_OWVAR 39
28082: PUSH
28083: LD_INT 3
28085: ST_TO_ADDR
// vc_control := control_apeman ;
28086: LD_ADDR_OWVAR 38
28090: PUSH
28091: LD_INT 5
28093: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28094: LD_ADDR_OWVAR 40
28098: PUSH
28099: LD_INT 29
28101: ST_TO_ADDR
// un := CreateVehicle ;
28102: LD_ADDR_VAR 0 2
28106: PUSH
28107: CALL_OW 45
28111: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28112: LD_VAR 0 2
28116: PPUSH
28117: LD_INT 1
28119: PPUSH
28120: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28124: LD_INT 35
28126: PPUSH
28127: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28131: LD_VAR 0 2
28135: PPUSH
28136: LD_INT 22
28138: PUSH
28139: LD_OWVAR 2
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: PPUSH
28148: CALL_OW 69
28152: PPUSH
28153: LD_VAR 0 2
28157: PPUSH
28158: CALL_OW 74
28162: PPUSH
28163: CALL_OW 115
// until IsDead ( un ) ;
28167: LD_VAR 0 2
28171: PPUSH
28172: CALL_OW 301
28176: IFFALSE 28124
// end ;
28178: PPOPN 2
28180: END
// every 0 0$1 trigger StreamModeActive and sStu do
28181: LD_EXP 71
28185: PUSH
28186: LD_EXP 110
28190: AND
28191: IFFALSE 28207
28193: GO 28195
28195: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28196: LD_STRING displayStucuk();
28198: PPUSH
28199: CALL_OW 559
// ResetFog ;
28203: CALL_OW 335
// end ;
28207: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28208: LD_EXP 71
28212: PUSH
28213: LD_EXP 103
28217: AND
28218: IFFALSE 28359
28220: GO 28222
28222: DISABLE
28223: LD_INT 0
28225: PPUSH
28226: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28227: LD_ADDR_VAR 0 2
28231: PUSH
28232: LD_INT 22
28234: PUSH
28235: LD_OWVAR 2
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: PUSH
28244: LD_INT 21
28246: PUSH
28247: LD_INT 1
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: PPUSH
28258: CALL_OW 69
28262: ST_TO_ADDR
// if not tmp then
28263: LD_VAR 0 2
28267: NOT
28268: IFFALSE 28272
// exit ;
28270: GO 28359
// un := tmp [ rand ( 1 , tmp ) ] ;
28272: LD_ADDR_VAR 0 1
28276: PUSH
28277: LD_VAR 0 2
28281: PUSH
28282: LD_INT 1
28284: PPUSH
28285: LD_VAR 0 2
28289: PPUSH
28290: CALL_OW 12
28294: ARRAY
28295: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28296: LD_VAR 0 1
28300: PPUSH
28301: LD_INT 0
28303: PPUSH
28304: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28308: LD_VAR 0 1
28312: PPUSH
28313: LD_OWVAR 3
28317: PUSH
28318: LD_VAR 0 1
28322: DIFF
28323: PPUSH
28324: LD_VAR 0 1
28328: PPUSH
28329: CALL_OW 74
28333: PPUSH
28334: CALL_OW 115
// wait ( 0 0$20 ) ;
28338: LD_INT 700
28340: PPUSH
28341: CALL_OW 67
// SetSide ( un , your_side ) ;
28345: LD_VAR 0 1
28349: PPUSH
28350: LD_OWVAR 2
28354: PPUSH
28355: CALL_OW 235
// end ;
28359: PPOPN 2
28361: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28362: LD_EXP 71
28366: PUSH
28367: LD_EXP 104
28371: AND
28372: IFFALSE 28478
28374: GO 28376
28376: DISABLE
28377: LD_INT 0
28379: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28380: LD_ADDR_VAR 0 1
28384: PUSH
28385: LD_INT 22
28387: PUSH
28388: LD_OWVAR 2
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 2
28399: PUSH
28400: LD_INT 30
28402: PUSH
28403: LD_INT 0
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: LD_INT 30
28412: PUSH
28413: LD_INT 1
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: LIST
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: PPUSH
28429: CALL_OW 69
28433: ST_TO_ADDR
// if not depot then
28434: LD_VAR 0 1
28438: NOT
28439: IFFALSE 28443
// exit ;
28441: GO 28478
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28443: LD_VAR 0 1
28447: PUSH
28448: LD_INT 1
28450: ARRAY
28451: PPUSH
28452: CALL_OW 250
28456: PPUSH
28457: LD_VAR 0 1
28461: PUSH
28462: LD_INT 1
28464: ARRAY
28465: PPUSH
28466: CALL_OW 251
28470: PPUSH
28471: LD_INT 70
28473: PPUSH
28474: CALL_OW 495
// end ;
28478: PPOPN 1
28480: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28481: LD_EXP 71
28485: PUSH
28486: LD_EXP 105
28490: AND
28491: IFFALSE 28702
28493: GO 28495
28495: DISABLE
28496: LD_INT 0
28498: PPUSH
28499: PPUSH
28500: PPUSH
28501: PPUSH
28502: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28503: LD_ADDR_VAR 0 5
28507: PUSH
28508: LD_INT 22
28510: PUSH
28511: LD_OWVAR 2
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: LD_INT 21
28522: PUSH
28523: LD_INT 1
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: PPUSH
28534: CALL_OW 69
28538: ST_TO_ADDR
// if not tmp then
28539: LD_VAR 0 5
28543: NOT
28544: IFFALSE 28548
// exit ;
28546: GO 28702
// for i in tmp do
28548: LD_ADDR_VAR 0 1
28552: PUSH
28553: LD_VAR 0 5
28557: PUSH
28558: FOR_IN
28559: IFFALSE 28700
// begin d := rand ( 0 , 5 ) ;
28561: LD_ADDR_VAR 0 4
28565: PUSH
28566: LD_INT 0
28568: PPUSH
28569: LD_INT 5
28571: PPUSH
28572: CALL_OW 12
28576: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28577: LD_ADDR_VAR 0 2
28581: PUSH
28582: LD_VAR 0 1
28586: PPUSH
28587: CALL_OW 250
28591: PPUSH
28592: LD_VAR 0 4
28596: PPUSH
28597: LD_INT 3
28599: PPUSH
28600: LD_INT 12
28602: PPUSH
28603: CALL_OW 12
28607: PPUSH
28608: CALL_OW 272
28612: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28613: LD_ADDR_VAR 0 3
28617: PUSH
28618: LD_VAR 0 1
28622: PPUSH
28623: CALL_OW 251
28627: PPUSH
28628: LD_VAR 0 4
28632: PPUSH
28633: LD_INT 3
28635: PPUSH
28636: LD_INT 12
28638: PPUSH
28639: CALL_OW 12
28643: PPUSH
28644: CALL_OW 273
28648: ST_TO_ADDR
// if ValidHex ( x , y ) then
28649: LD_VAR 0 2
28653: PPUSH
28654: LD_VAR 0 3
28658: PPUSH
28659: CALL_OW 488
28663: IFFALSE 28698
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28665: LD_VAR 0 1
28669: PPUSH
28670: LD_VAR 0 2
28674: PPUSH
28675: LD_VAR 0 3
28679: PPUSH
28680: LD_INT 3
28682: PPUSH
28683: LD_INT 6
28685: PPUSH
28686: CALL_OW 12
28690: PPUSH
28691: LD_INT 1
28693: PPUSH
28694: CALL_OW 483
// end ;
28698: GO 28558
28700: POP
28701: POP
// end ;
28702: PPOPN 5
28704: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28705: LD_EXP 71
28709: PUSH
28710: LD_EXP 106
28714: AND
28715: IFFALSE 28809
28717: GO 28719
28719: DISABLE
28720: LD_INT 0
28722: PPUSH
28723: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28724: LD_ADDR_VAR 0 2
28728: PUSH
28729: LD_INT 22
28731: PUSH
28732: LD_OWVAR 2
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: PUSH
28741: LD_INT 32
28743: PUSH
28744: LD_INT 1
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 21
28753: PUSH
28754: LD_INT 2
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: LIST
28765: PPUSH
28766: CALL_OW 69
28770: ST_TO_ADDR
// if not tmp then
28771: LD_VAR 0 2
28775: NOT
28776: IFFALSE 28780
// exit ;
28778: GO 28809
// for i in tmp do
28780: LD_ADDR_VAR 0 1
28784: PUSH
28785: LD_VAR 0 2
28789: PUSH
28790: FOR_IN
28791: IFFALSE 28807
// SetFuel ( i , 0 ) ;
28793: LD_VAR 0 1
28797: PPUSH
28798: LD_INT 0
28800: PPUSH
28801: CALL_OW 240
28805: GO 28790
28807: POP
28808: POP
// end ;
28809: PPOPN 2
28811: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28812: LD_EXP 71
28816: PUSH
28817: LD_EXP 107
28821: AND
28822: IFFALSE 28888
28824: GO 28826
28826: DISABLE
28827: LD_INT 0
28829: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28830: LD_ADDR_VAR 0 1
28834: PUSH
28835: LD_INT 22
28837: PUSH
28838: LD_OWVAR 2
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: LD_INT 30
28849: PUSH
28850: LD_INT 29
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PPUSH
28861: CALL_OW 69
28865: ST_TO_ADDR
// if not tmp then
28866: LD_VAR 0 1
28870: NOT
28871: IFFALSE 28875
// exit ;
28873: GO 28888
// DestroyUnit ( tmp [ 1 ] ) ;
28875: LD_VAR 0 1
28879: PUSH
28880: LD_INT 1
28882: ARRAY
28883: PPUSH
28884: CALL_OW 65
// end ;
28888: PPOPN 1
28890: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28891: LD_EXP 71
28895: PUSH
28896: LD_EXP 109
28900: AND
28901: IFFALSE 29030
28903: GO 28905
28905: DISABLE
28906: LD_INT 0
28908: PPUSH
// begin uc_side := 0 ;
28909: LD_ADDR_OWVAR 20
28913: PUSH
28914: LD_INT 0
28916: ST_TO_ADDR
// uc_nation := nation_arabian ;
28917: LD_ADDR_OWVAR 21
28921: PUSH
28922: LD_INT 2
28924: ST_TO_ADDR
// hc_gallery :=  ;
28925: LD_ADDR_OWVAR 33
28929: PUSH
28930: LD_STRING 
28932: ST_TO_ADDR
// hc_name :=  ;
28933: LD_ADDR_OWVAR 26
28937: PUSH
28938: LD_STRING 
28940: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28941: LD_INT 1
28943: PPUSH
28944: LD_INT 11
28946: PPUSH
28947: LD_INT 10
28949: PPUSH
28950: CALL_OW 380
// un := CreateHuman ;
28954: LD_ADDR_VAR 0 1
28958: PUSH
28959: CALL_OW 44
28963: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28964: LD_VAR 0 1
28968: PPUSH
28969: LD_INT 1
28971: PPUSH
28972: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28976: LD_INT 35
28978: PPUSH
28979: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28983: LD_VAR 0 1
28987: PPUSH
28988: LD_INT 22
28990: PUSH
28991: LD_OWVAR 2
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PPUSH
29000: CALL_OW 69
29004: PPUSH
29005: LD_VAR 0 1
29009: PPUSH
29010: CALL_OW 74
29014: PPUSH
29015: CALL_OW 115
// until IsDead ( un ) ;
29019: LD_VAR 0 1
29023: PPUSH
29024: CALL_OW 301
29028: IFFALSE 28976
// end ;
29030: PPOPN 1
29032: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29033: LD_EXP 71
29037: PUSH
29038: LD_EXP 111
29042: AND
29043: IFFALSE 29055
29045: GO 29047
29047: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29048: LD_STRING earthquake(getX(game), 0, 32)
29050: PPUSH
29051: CALL_OW 559
29055: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29056: LD_EXP 71
29060: PUSH
29061: LD_EXP 112
29065: AND
29066: IFFALSE 29157
29068: GO 29070
29070: DISABLE
29071: LD_INT 0
29073: PPUSH
// begin enable ;
29074: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29075: LD_ADDR_VAR 0 1
29079: PUSH
29080: LD_INT 22
29082: PUSH
29083: LD_OWVAR 2
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: LD_INT 21
29094: PUSH
29095: LD_INT 2
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: PUSH
29102: LD_INT 33
29104: PUSH
29105: LD_INT 3
29107: PUSH
29108: EMPTY
29109: LIST
29110: LIST
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: LIST
29116: PPUSH
29117: CALL_OW 69
29121: ST_TO_ADDR
// if not tmp then
29122: LD_VAR 0 1
29126: NOT
29127: IFFALSE 29131
// exit ;
29129: GO 29157
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29131: LD_VAR 0 1
29135: PUSH
29136: LD_INT 1
29138: PPUSH
29139: LD_VAR 0 1
29143: PPUSH
29144: CALL_OW 12
29148: ARRAY
29149: PPUSH
29150: LD_INT 1
29152: PPUSH
29153: CALL_OW 234
// end ;
29157: PPOPN 1
29159: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29160: LD_EXP 71
29164: PUSH
29165: LD_EXP 113
29169: AND
29170: IFFALSE 29311
29172: GO 29174
29174: DISABLE
29175: LD_INT 0
29177: PPUSH
29178: PPUSH
29179: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29180: LD_ADDR_VAR 0 3
29184: PUSH
29185: LD_INT 22
29187: PUSH
29188: LD_OWVAR 2
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: LD_INT 25
29199: PUSH
29200: LD_INT 1
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PPUSH
29211: CALL_OW 69
29215: ST_TO_ADDR
// if not tmp then
29216: LD_VAR 0 3
29220: NOT
29221: IFFALSE 29225
// exit ;
29223: GO 29311
// un := tmp [ rand ( 1 , tmp ) ] ;
29225: LD_ADDR_VAR 0 2
29229: PUSH
29230: LD_VAR 0 3
29234: PUSH
29235: LD_INT 1
29237: PPUSH
29238: LD_VAR 0 3
29242: PPUSH
29243: CALL_OW 12
29247: ARRAY
29248: ST_TO_ADDR
// if Crawls ( un ) then
29249: LD_VAR 0 2
29253: PPUSH
29254: CALL_OW 318
29258: IFFALSE 29269
// ComWalk ( un ) ;
29260: LD_VAR 0 2
29264: PPUSH
29265: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29269: LD_VAR 0 2
29273: PPUSH
29274: LD_INT 9
29276: PPUSH
29277: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29281: LD_INT 28
29283: PPUSH
29284: LD_OWVAR 2
29288: PPUSH
29289: LD_INT 2
29291: PPUSH
29292: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29296: LD_INT 29
29298: PPUSH
29299: LD_OWVAR 2
29303: PPUSH
29304: LD_INT 2
29306: PPUSH
29307: CALL_OW 322
// end ;
29311: PPOPN 3
29313: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29314: LD_EXP 71
29318: PUSH
29319: LD_EXP 114
29323: AND
29324: IFFALSE 29435
29326: GO 29328
29328: DISABLE
29329: LD_INT 0
29331: PPUSH
29332: PPUSH
29333: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29334: LD_ADDR_VAR 0 3
29338: PUSH
29339: LD_INT 22
29341: PUSH
29342: LD_OWVAR 2
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PUSH
29351: LD_INT 25
29353: PUSH
29354: LD_INT 1
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PPUSH
29365: CALL_OW 69
29369: ST_TO_ADDR
// if not tmp then
29370: LD_VAR 0 3
29374: NOT
29375: IFFALSE 29379
// exit ;
29377: GO 29435
// un := tmp [ rand ( 1 , tmp ) ] ;
29379: LD_ADDR_VAR 0 2
29383: PUSH
29384: LD_VAR 0 3
29388: PUSH
29389: LD_INT 1
29391: PPUSH
29392: LD_VAR 0 3
29396: PPUSH
29397: CALL_OW 12
29401: ARRAY
29402: ST_TO_ADDR
// if Crawls ( un ) then
29403: LD_VAR 0 2
29407: PPUSH
29408: CALL_OW 318
29412: IFFALSE 29423
// ComWalk ( un ) ;
29414: LD_VAR 0 2
29418: PPUSH
29419: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29423: LD_VAR 0 2
29427: PPUSH
29428: LD_INT 8
29430: PPUSH
29431: CALL_OW 336
// end ;
29435: PPOPN 3
29437: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29438: LD_EXP 71
29442: PUSH
29443: LD_EXP 115
29447: AND
29448: IFFALSE 29592
29450: GO 29452
29452: DISABLE
29453: LD_INT 0
29455: PPUSH
29456: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29457: LD_ADDR_VAR 0 2
29461: PUSH
29462: LD_INT 22
29464: PUSH
29465: LD_OWVAR 2
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: PUSH
29474: LD_INT 21
29476: PUSH
29477: LD_INT 2
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: LD_INT 2
29486: PUSH
29487: LD_INT 34
29489: PUSH
29490: LD_INT 12
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: PUSH
29497: LD_INT 34
29499: PUSH
29500: LD_INT 51
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 34
29509: PUSH
29510: LD_INT 32
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: LIST
29521: LIST
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: LIST
29527: PPUSH
29528: CALL_OW 69
29532: ST_TO_ADDR
// if not tmp then
29533: LD_VAR 0 2
29537: NOT
29538: IFFALSE 29542
// exit ;
29540: GO 29592
// for i in tmp do
29542: LD_ADDR_VAR 0 1
29546: PUSH
29547: LD_VAR 0 2
29551: PUSH
29552: FOR_IN
29553: IFFALSE 29590
// if GetCargo ( i , mat_artifact ) = 0 then
29555: LD_VAR 0 1
29559: PPUSH
29560: LD_INT 4
29562: PPUSH
29563: CALL_OW 289
29567: PUSH
29568: LD_INT 0
29570: EQUAL
29571: IFFALSE 29588
// SetCargo ( i , mat_siberit , 100 ) ;
29573: LD_VAR 0 1
29577: PPUSH
29578: LD_INT 3
29580: PPUSH
29581: LD_INT 100
29583: PPUSH
29584: CALL_OW 290
29588: GO 29552
29590: POP
29591: POP
// end ;
29592: PPOPN 2
29594: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29595: LD_EXP 71
29599: PUSH
29600: LD_EXP 116
29604: AND
29605: IFFALSE 29788
29607: GO 29609
29609: DISABLE
29610: LD_INT 0
29612: PPUSH
29613: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29614: LD_ADDR_VAR 0 2
29618: PUSH
29619: LD_INT 22
29621: PUSH
29622: LD_OWVAR 2
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PPUSH
29631: CALL_OW 69
29635: ST_TO_ADDR
// if not tmp then
29636: LD_VAR 0 2
29640: NOT
29641: IFFALSE 29645
// exit ;
29643: GO 29788
// for i := 1 to 2 do
29645: LD_ADDR_VAR 0 1
29649: PUSH
29650: DOUBLE
29651: LD_INT 1
29653: DEC
29654: ST_TO_ADDR
29655: LD_INT 2
29657: PUSH
29658: FOR_TO
29659: IFFALSE 29786
// begin uc_side := your_side ;
29661: LD_ADDR_OWVAR 20
29665: PUSH
29666: LD_OWVAR 2
29670: ST_TO_ADDR
// uc_nation := nation_american ;
29671: LD_ADDR_OWVAR 21
29675: PUSH
29676: LD_INT 1
29678: ST_TO_ADDR
// vc_chassis := us_morphling ;
29679: LD_ADDR_OWVAR 37
29683: PUSH
29684: LD_INT 5
29686: ST_TO_ADDR
// vc_engine := engine_siberite ;
29687: LD_ADDR_OWVAR 39
29691: PUSH
29692: LD_INT 3
29694: ST_TO_ADDR
// vc_control := control_computer ;
29695: LD_ADDR_OWVAR 38
29699: PUSH
29700: LD_INT 3
29702: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29703: LD_ADDR_OWVAR 40
29707: PUSH
29708: LD_INT 10
29710: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29711: LD_VAR 0 2
29715: PUSH
29716: LD_INT 1
29718: ARRAY
29719: PPUSH
29720: CALL_OW 310
29724: NOT
29725: IFFALSE 29772
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29727: CALL_OW 45
29731: PPUSH
29732: LD_VAR 0 2
29736: PUSH
29737: LD_INT 1
29739: ARRAY
29740: PPUSH
29741: CALL_OW 250
29745: PPUSH
29746: LD_VAR 0 2
29750: PUSH
29751: LD_INT 1
29753: ARRAY
29754: PPUSH
29755: CALL_OW 251
29759: PPUSH
29760: LD_INT 12
29762: PPUSH
29763: LD_INT 1
29765: PPUSH
29766: CALL_OW 50
29770: GO 29784
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29772: CALL_OW 45
29776: PPUSH
29777: LD_INT 1
29779: PPUSH
29780: CALL_OW 51
// end ;
29784: GO 29658
29786: POP
29787: POP
// end ;
29788: PPOPN 2
29790: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29791: LD_EXP 71
29795: PUSH
29796: LD_EXP 117
29800: AND
29801: IFFALSE 30023
29803: GO 29805
29805: DISABLE
29806: LD_INT 0
29808: PPUSH
29809: PPUSH
29810: PPUSH
29811: PPUSH
29812: PPUSH
29813: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29814: LD_ADDR_VAR 0 6
29818: PUSH
29819: LD_INT 22
29821: PUSH
29822: LD_OWVAR 2
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: LD_INT 21
29833: PUSH
29834: LD_INT 1
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: LD_INT 3
29843: PUSH
29844: LD_INT 23
29846: PUSH
29847: LD_INT 0
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: LIST
29862: PPUSH
29863: CALL_OW 69
29867: ST_TO_ADDR
// if not tmp then
29868: LD_VAR 0 6
29872: NOT
29873: IFFALSE 29877
// exit ;
29875: GO 30023
// s1 := rand ( 1 , 4 ) ;
29877: LD_ADDR_VAR 0 2
29881: PUSH
29882: LD_INT 1
29884: PPUSH
29885: LD_INT 4
29887: PPUSH
29888: CALL_OW 12
29892: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29893: LD_ADDR_VAR 0 4
29897: PUSH
29898: LD_VAR 0 6
29902: PUSH
29903: LD_INT 1
29905: ARRAY
29906: PPUSH
29907: LD_VAR 0 2
29911: PPUSH
29912: CALL_OW 259
29916: ST_TO_ADDR
// if s1 = 1 then
29917: LD_VAR 0 2
29921: PUSH
29922: LD_INT 1
29924: EQUAL
29925: IFFALSE 29945
// s2 := rand ( 2 , 4 ) else
29927: LD_ADDR_VAR 0 3
29931: PUSH
29932: LD_INT 2
29934: PPUSH
29935: LD_INT 4
29937: PPUSH
29938: CALL_OW 12
29942: ST_TO_ADDR
29943: GO 29953
// s2 := 1 ;
29945: LD_ADDR_VAR 0 3
29949: PUSH
29950: LD_INT 1
29952: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29953: LD_ADDR_VAR 0 5
29957: PUSH
29958: LD_VAR 0 6
29962: PUSH
29963: LD_INT 1
29965: ARRAY
29966: PPUSH
29967: LD_VAR 0 3
29971: PPUSH
29972: CALL_OW 259
29976: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29977: LD_VAR 0 6
29981: PUSH
29982: LD_INT 1
29984: ARRAY
29985: PPUSH
29986: LD_VAR 0 2
29990: PPUSH
29991: LD_VAR 0 5
29995: PPUSH
29996: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30000: LD_VAR 0 6
30004: PUSH
30005: LD_INT 1
30007: ARRAY
30008: PPUSH
30009: LD_VAR 0 3
30013: PPUSH
30014: LD_VAR 0 4
30018: PPUSH
30019: CALL_OW 237
// end ;
30023: PPOPN 6
30025: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30026: LD_EXP 71
30030: PUSH
30031: LD_EXP 118
30035: AND
30036: IFFALSE 30115
30038: GO 30040
30040: DISABLE
30041: LD_INT 0
30043: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30044: LD_ADDR_VAR 0 1
30048: PUSH
30049: LD_INT 22
30051: PUSH
30052: LD_OWVAR 2
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PUSH
30061: LD_INT 30
30063: PUSH
30064: LD_INT 3
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PPUSH
30075: CALL_OW 69
30079: ST_TO_ADDR
// if not tmp then
30080: LD_VAR 0 1
30084: NOT
30085: IFFALSE 30089
// exit ;
30087: GO 30115
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30089: LD_VAR 0 1
30093: PUSH
30094: LD_INT 1
30096: PPUSH
30097: LD_VAR 0 1
30101: PPUSH
30102: CALL_OW 12
30106: ARRAY
30107: PPUSH
30108: LD_INT 1
30110: PPUSH
30111: CALL_OW 234
// end ;
30115: PPOPN 1
30117: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30118: LD_EXP 71
30122: PUSH
30123: LD_EXP 119
30127: AND
30128: IFFALSE 30240
30130: GO 30132
30132: DISABLE
30133: LD_INT 0
30135: PPUSH
30136: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30137: LD_ADDR_VAR 0 2
30141: PUSH
30142: LD_INT 22
30144: PUSH
30145: LD_OWVAR 2
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: LD_INT 2
30156: PUSH
30157: LD_INT 30
30159: PUSH
30160: LD_INT 27
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PUSH
30167: LD_INT 30
30169: PUSH
30170: LD_INT 26
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PUSH
30177: LD_INT 30
30179: PUSH
30180: LD_INT 28
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PPUSH
30197: CALL_OW 69
30201: ST_TO_ADDR
// if not tmp then
30202: LD_VAR 0 2
30206: NOT
30207: IFFALSE 30211
// exit ;
30209: GO 30240
// for i in tmp do
30211: LD_ADDR_VAR 0 1
30215: PUSH
30216: LD_VAR 0 2
30220: PUSH
30221: FOR_IN
30222: IFFALSE 30238
// SetLives ( i , 1 ) ;
30224: LD_VAR 0 1
30228: PPUSH
30229: LD_INT 1
30231: PPUSH
30232: CALL_OW 234
30236: GO 30221
30238: POP
30239: POP
// end ;
30240: PPOPN 2
30242: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30243: LD_EXP 71
30247: PUSH
30248: LD_EXP 120
30252: AND
30253: IFFALSE 30540
30255: GO 30257
30257: DISABLE
30258: LD_INT 0
30260: PPUSH
30261: PPUSH
30262: PPUSH
// begin i := rand ( 1 , 7 ) ;
30263: LD_ADDR_VAR 0 1
30267: PUSH
30268: LD_INT 1
30270: PPUSH
30271: LD_INT 7
30273: PPUSH
30274: CALL_OW 12
30278: ST_TO_ADDR
// case i of 1 :
30279: LD_VAR 0 1
30283: PUSH
30284: LD_INT 1
30286: DOUBLE
30287: EQUAL
30288: IFTRUE 30292
30290: GO 30302
30292: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30293: LD_STRING earthquake(getX(game), 0, 32)
30295: PPUSH
30296: CALL_OW 559
30300: GO 30540
30302: LD_INT 2
30304: DOUBLE
30305: EQUAL
30306: IFTRUE 30310
30308: GO 30324
30310: POP
// begin ToLua ( displayStucuk(); ) ;
30311: LD_STRING displayStucuk();
30313: PPUSH
30314: CALL_OW 559
// ResetFog ;
30318: CALL_OW 335
// end ; 3 :
30322: GO 30540
30324: LD_INT 3
30326: DOUBLE
30327: EQUAL
30328: IFTRUE 30332
30330: GO 30436
30332: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30333: LD_ADDR_VAR 0 2
30337: PUSH
30338: LD_INT 22
30340: PUSH
30341: LD_OWVAR 2
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: LD_INT 25
30352: PUSH
30353: LD_INT 1
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PPUSH
30364: CALL_OW 69
30368: ST_TO_ADDR
// if not tmp then
30369: LD_VAR 0 2
30373: NOT
30374: IFFALSE 30378
// exit ;
30376: GO 30540
// un := tmp [ rand ( 1 , tmp ) ] ;
30378: LD_ADDR_VAR 0 3
30382: PUSH
30383: LD_VAR 0 2
30387: PUSH
30388: LD_INT 1
30390: PPUSH
30391: LD_VAR 0 2
30395: PPUSH
30396: CALL_OW 12
30400: ARRAY
30401: ST_TO_ADDR
// if Crawls ( un ) then
30402: LD_VAR 0 3
30406: PPUSH
30407: CALL_OW 318
30411: IFFALSE 30422
// ComWalk ( un ) ;
30413: LD_VAR 0 3
30417: PPUSH
30418: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30422: LD_VAR 0 3
30426: PPUSH
30427: LD_INT 8
30429: PPUSH
30430: CALL_OW 336
// end ; 4 :
30434: GO 30540
30436: LD_INT 4
30438: DOUBLE
30439: EQUAL
30440: IFTRUE 30444
30442: GO 30518
30444: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30445: LD_ADDR_VAR 0 2
30449: PUSH
30450: LD_INT 22
30452: PUSH
30453: LD_OWVAR 2
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 30
30464: PUSH
30465: LD_INT 29
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PPUSH
30476: CALL_OW 69
30480: ST_TO_ADDR
// if not tmp then
30481: LD_VAR 0 2
30485: NOT
30486: IFFALSE 30490
// exit ;
30488: GO 30540
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30490: LD_VAR 0 2
30494: PUSH
30495: LD_INT 1
30497: ARRAY
30498: PPUSH
30499: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30503: LD_VAR 0 2
30507: PUSH
30508: LD_INT 1
30510: ARRAY
30511: PPUSH
30512: CALL_OW 65
// end ; 5 .. 7 :
30516: GO 30540
30518: LD_INT 5
30520: DOUBLE
30521: GREATEREQUAL
30522: IFFALSE 30530
30524: LD_INT 7
30526: DOUBLE
30527: LESSEQUAL
30528: IFTRUE 30532
30530: GO 30539
30532: POP
// StreamSibBomb ; end ;
30533: CALL 26777 0 0
30537: GO 30540
30539: POP
// end ;
30540: PPOPN 3
30542: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30543: LD_EXP 71
30547: PUSH
30548: LD_EXP 121
30552: AND
30553: IFFALSE 30709
30555: GO 30557
30557: DISABLE
30558: LD_INT 0
30560: PPUSH
30561: PPUSH
30562: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30563: LD_ADDR_VAR 0 2
30567: PUSH
30568: LD_INT 81
30570: PUSH
30571: LD_OWVAR 2
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 2
30582: PUSH
30583: LD_INT 21
30585: PUSH
30586: LD_INT 1
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: LD_INT 21
30595: PUSH
30596: LD_INT 2
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: LIST
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: PPUSH
30612: CALL_OW 69
30616: ST_TO_ADDR
// if not tmp then
30617: LD_VAR 0 2
30621: NOT
30622: IFFALSE 30626
// exit ;
30624: GO 30709
// p := 0 ;
30626: LD_ADDR_VAR 0 3
30630: PUSH
30631: LD_INT 0
30633: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30634: LD_INT 35
30636: PPUSH
30637: CALL_OW 67
// p := p + 1 ;
30641: LD_ADDR_VAR 0 3
30645: PUSH
30646: LD_VAR 0 3
30650: PUSH
30651: LD_INT 1
30653: PLUS
30654: ST_TO_ADDR
// for i in tmp do
30655: LD_ADDR_VAR 0 1
30659: PUSH
30660: LD_VAR 0 2
30664: PUSH
30665: FOR_IN
30666: IFFALSE 30697
// if GetLives ( i ) < 1000 then
30668: LD_VAR 0 1
30672: PPUSH
30673: CALL_OW 256
30677: PUSH
30678: LD_INT 1000
30680: LESS
30681: IFFALSE 30695
// SetLives ( i , 1000 ) ;
30683: LD_VAR 0 1
30687: PPUSH
30688: LD_INT 1000
30690: PPUSH
30691: CALL_OW 234
30695: GO 30665
30697: POP
30698: POP
// until p > 20 ;
30699: LD_VAR 0 3
30703: PUSH
30704: LD_INT 20
30706: GREATER
30707: IFFALSE 30634
// end ;
30709: PPOPN 3
30711: END
// every 0 0$1 trigger StreamModeActive and sTime do
30712: LD_EXP 71
30716: PUSH
30717: LD_EXP 122
30721: AND
30722: IFFALSE 30757
30724: GO 30726
30726: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30727: LD_INT 28
30729: PPUSH
30730: LD_OWVAR 2
30734: PPUSH
30735: LD_INT 2
30737: PPUSH
30738: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30742: LD_INT 30
30744: PPUSH
30745: LD_OWVAR 2
30749: PPUSH
30750: LD_INT 2
30752: PPUSH
30753: CALL_OW 322
// end ;
30757: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30758: LD_EXP 71
30762: PUSH
30763: LD_EXP 123
30767: AND
30768: IFFALSE 30889
30770: GO 30772
30772: DISABLE
30773: LD_INT 0
30775: PPUSH
30776: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30777: LD_ADDR_VAR 0 2
30781: PUSH
30782: LD_INT 22
30784: PUSH
30785: LD_OWVAR 2
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: PUSH
30794: LD_INT 21
30796: PUSH
30797: LD_INT 1
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 3
30806: PUSH
30807: LD_INT 23
30809: PUSH
30810: LD_INT 0
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: LIST
30825: PPUSH
30826: CALL_OW 69
30830: ST_TO_ADDR
// if not tmp then
30831: LD_VAR 0 2
30835: NOT
30836: IFFALSE 30840
// exit ;
30838: GO 30889
// for i in tmp do
30840: LD_ADDR_VAR 0 1
30844: PUSH
30845: LD_VAR 0 2
30849: PUSH
30850: FOR_IN
30851: IFFALSE 30887
// begin if Crawls ( i ) then
30853: LD_VAR 0 1
30857: PPUSH
30858: CALL_OW 318
30862: IFFALSE 30873
// ComWalk ( i ) ;
30864: LD_VAR 0 1
30868: PPUSH
30869: CALL_OW 138
// SetClass ( i , 2 ) ;
30873: LD_VAR 0 1
30877: PPUSH
30878: LD_INT 2
30880: PPUSH
30881: CALL_OW 336
// end ;
30885: GO 30850
30887: POP
30888: POP
// end ;
30889: PPOPN 2
30891: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30892: LD_EXP 71
30896: PUSH
30897: LD_EXP 124
30901: AND
30902: IFFALSE 31190
30904: GO 30906
30906: DISABLE
30907: LD_INT 0
30909: PPUSH
30910: PPUSH
30911: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30912: LD_OWVAR 2
30916: PPUSH
30917: LD_INT 9
30919: PPUSH
30920: LD_INT 1
30922: PPUSH
30923: LD_INT 1
30925: PPUSH
30926: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30930: LD_INT 9
30932: PPUSH
30933: LD_OWVAR 2
30937: PPUSH
30938: CALL_OW 343
// uc_side := 9 ;
30942: LD_ADDR_OWVAR 20
30946: PUSH
30947: LD_INT 9
30949: ST_TO_ADDR
// uc_nation := 2 ;
30950: LD_ADDR_OWVAR 21
30954: PUSH
30955: LD_INT 2
30957: ST_TO_ADDR
// hc_name := Dark Warrior ;
30958: LD_ADDR_OWVAR 26
30962: PUSH
30963: LD_STRING Dark Warrior
30965: ST_TO_ADDR
// hc_gallery :=  ;
30966: LD_ADDR_OWVAR 33
30970: PUSH
30971: LD_STRING 
30973: ST_TO_ADDR
// hc_noskilllimit := true ;
30974: LD_ADDR_OWVAR 76
30978: PUSH
30979: LD_INT 1
30981: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30982: LD_ADDR_OWVAR 31
30986: PUSH
30987: LD_INT 30
30989: PUSH
30990: LD_INT 30
30992: PUSH
30993: LD_INT 30
30995: PUSH
30996: LD_INT 30
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: LIST
31003: LIST
31004: ST_TO_ADDR
// un := CreateHuman ;
31005: LD_ADDR_VAR 0 3
31009: PUSH
31010: CALL_OW 44
31014: ST_TO_ADDR
// hc_noskilllimit := false ;
31015: LD_ADDR_OWVAR 76
31019: PUSH
31020: LD_INT 0
31022: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31023: LD_VAR 0 3
31027: PPUSH
31028: LD_INT 1
31030: PPUSH
31031: CALL_OW 51
// ToLua ( playRanger() ) ;
31035: LD_STRING playRanger()
31037: PPUSH
31038: CALL_OW 559
// p := 0 ;
31042: LD_ADDR_VAR 0 2
31046: PUSH
31047: LD_INT 0
31049: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31050: LD_INT 35
31052: PPUSH
31053: CALL_OW 67
// p := p + 1 ;
31057: LD_ADDR_VAR 0 2
31061: PUSH
31062: LD_VAR 0 2
31066: PUSH
31067: LD_INT 1
31069: PLUS
31070: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31071: LD_VAR 0 3
31075: PPUSH
31076: CALL_OW 256
31080: PUSH
31081: LD_INT 1000
31083: LESS
31084: IFFALSE 31098
// SetLives ( un , 1000 ) ;
31086: LD_VAR 0 3
31090: PPUSH
31091: LD_INT 1000
31093: PPUSH
31094: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31098: LD_VAR 0 3
31102: PPUSH
31103: LD_INT 81
31105: PUSH
31106: LD_OWVAR 2
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: LD_INT 91
31117: PUSH
31118: LD_VAR 0 3
31122: PUSH
31123: LD_INT 30
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: LIST
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: PPUSH
31135: CALL_OW 69
31139: PPUSH
31140: LD_VAR 0 3
31144: PPUSH
31145: CALL_OW 74
31149: PPUSH
31150: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31154: LD_VAR 0 2
31158: PUSH
31159: LD_INT 80
31161: GREATER
31162: PUSH
31163: LD_VAR 0 3
31167: PPUSH
31168: CALL_OW 301
31172: OR
31173: IFFALSE 31050
// if un then
31175: LD_VAR 0 3
31179: IFFALSE 31190
// RemoveUnit ( un ) ;
31181: LD_VAR 0 3
31185: PPUSH
31186: CALL_OW 64
// end ;
31190: PPOPN 3
31192: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31193: LD_EXP 125
31197: IFFALSE 31313
31199: GO 31201
31201: DISABLE
31202: LD_INT 0
31204: PPUSH
31205: PPUSH
31206: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31207: LD_ADDR_VAR 0 2
31211: PUSH
31212: LD_INT 81
31214: PUSH
31215: LD_OWVAR 2
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: LD_INT 21
31226: PUSH
31227: LD_INT 1
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PPUSH
31238: CALL_OW 69
31242: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31243: LD_STRING playComputer()
31245: PPUSH
31246: CALL_OW 559
// if not tmp then
31250: LD_VAR 0 2
31254: NOT
31255: IFFALSE 31259
// exit ;
31257: GO 31313
// for i in tmp do
31259: LD_ADDR_VAR 0 1
31263: PUSH
31264: LD_VAR 0 2
31268: PUSH
31269: FOR_IN
31270: IFFALSE 31311
// for j := 1 to 4 do
31272: LD_ADDR_VAR 0 3
31276: PUSH
31277: DOUBLE
31278: LD_INT 1
31280: DEC
31281: ST_TO_ADDR
31282: LD_INT 4
31284: PUSH
31285: FOR_TO
31286: IFFALSE 31307
// SetSkill ( i , j , 10 ) ;
31288: LD_VAR 0 1
31292: PPUSH
31293: LD_VAR 0 3
31297: PPUSH
31298: LD_INT 10
31300: PPUSH
31301: CALL_OW 237
31305: GO 31285
31307: POP
31308: POP
31309: GO 31269
31311: POP
31312: POP
// end ;
31313: PPOPN 3
31315: END
// every 0 0$1 trigger s30 do var i , tmp ;
31316: LD_EXP 126
31320: IFFALSE 31389
31322: GO 31324
31324: DISABLE
31325: LD_INT 0
31327: PPUSH
31328: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31329: LD_ADDR_VAR 0 2
31333: PUSH
31334: LD_INT 22
31336: PUSH
31337: LD_OWVAR 2
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PPUSH
31346: CALL_OW 69
31350: ST_TO_ADDR
// if not tmp then
31351: LD_VAR 0 2
31355: NOT
31356: IFFALSE 31360
// exit ;
31358: GO 31389
// for i in tmp do
31360: LD_ADDR_VAR 0 1
31364: PUSH
31365: LD_VAR 0 2
31369: PUSH
31370: FOR_IN
31371: IFFALSE 31387
// SetLives ( i , 300 ) ;
31373: LD_VAR 0 1
31377: PPUSH
31378: LD_INT 300
31380: PPUSH
31381: CALL_OW 234
31385: GO 31370
31387: POP
31388: POP
// end ;
31389: PPOPN 2
31391: END
// every 0 0$1 trigger s60 do var i , tmp ;
31392: LD_EXP 127
31396: IFFALSE 31465
31398: GO 31400
31400: DISABLE
31401: LD_INT 0
31403: PPUSH
31404: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31405: LD_ADDR_VAR 0 2
31409: PUSH
31410: LD_INT 22
31412: PUSH
31413: LD_OWVAR 2
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PPUSH
31422: CALL_OW 69
31426: ST_TO_ADDR
// if not tmp then
31427: LD_VAR 0 2
31431: NOT
31432: IFFALSE 31436
// exit ;
31434: GO 31465
// for i in tmp do
31436: LD_ADDR_VAR 0 1
31440: PUSH
31441: LD_VAR 0 2
31445: PUSH
31446: FOR_IN
31447: IFFALSE 31463
// SetLives ( i , 600 ) ;
31449: LD_VAR 0 1
31453: PPUSH
31454: LD_INT 600
31456: PPUSH
31457: CALL_OW 234
31461: GO 31446
31463: POP
31464: POP
// end ;
31465: PPOPN 2
31467: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31468: LD_INT 0
31470: PPUSH
// case cmd of 301 :
31471: LD_VAR 0 1
31475: PUSH
31476: LD_INT 301
31478: DOUBLE
31479: EQUAL
31480: IFTRUE 31484
31482: GO 31516
31484: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31485: LD_VAR 0 6
31489: PPUSH
31490: LD_VAR 0 7
31494: PPUSH
31495: LD_VAR 0 8
31499: PPUSH
31500: LD_VAR 0 4
31504: PPUSH
31505: LD_VAR 0 5
31509: PPUSH
31510: CALL 32717 0 5
31514: GO 31637
31516: LD_INT 302
31518: DOUBLE
31519: EQUAL
31520: IFTRUE 31524
31522: GO 31561
31524: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31525: LD_VAR 0 6
31529: PPUSH
31530: LD_VAR 0 7
31534: PPUSH
31535: LD_VAR 0 8
31539: PPUSH
31540: LD_VAR 0 9
31544: PPUSH
31545: LD_VAR 0 4
31549: PPUSH
31550: LD_VAR 0 5
31554: PPUSH
31555: CALL 32808 0 6
31559: GO 31637
31561: LD_INT 303
31563: DOUBLE
31564: EQUAL
31565: IFTRUE 31569
31567: GO 31606
31569: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31570: LD_VAR 0 6
31574: PPUSH
31575: LD_VAR 0 7
31579: PPUSH
31580: LD_VAR 0 8
31584: PPUSH
31585: LD_VAR 0 9
31589: PPUSH
31590: LD_VAR 0 4
31594: PPUSH
31595: LD_VAR 0 5
31599: PPUSH
31600: CALL 31642 0 6
31604: GO 31637
31606: LD_INT 304
31608: DOUBLE
31609: EQUAL
31610: IFTRUE 31614
31612: GO 31636
31614: POP
// hHackTeleport ( unit , x , y ) ; end ;
31615: LD_VAR 0 2
31619: PPUSH
31620: LD_VAR 0 4
31624: PPUSH
31625: LD_VAR 0 5
31629: PPUSH
31630: CALL 33401 0 3
31634: GO 31637
31636: POP
// end ;
31637: LD_VAR 0 12
31641: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31642: LD_INT 0
31644: PPUSH
31645: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31646: LD_VAR 0 1
31650: PUSH
31651: LD_INT 1
31653: LESS
31654: PUSH
31655: LD_VAR 0 1
31659: PUSH
31660: LD_INT 3
31662: GREATER
31663: OR
31664: PUSH
31665: LD_VAR 0 5
31669: PPUSH
31670: LD_VAR 0 6
31674: PPUSH
31675: CALL_OW 428
31679: OR
31680: IFFALSE 31684
// exit ;
31682: GO 32404
// uc_side := your_side ;
31684: LD_ADDR_OWVAR 20
31688: PUSH
31689: LD_OWVAR 2
31693: ST_TO_ADDR
// uc_nation := nation ;
31694: LD_ADDR_OWVAR 21
31698: PUSH
31699: LD_VAR 0 1
31703: ST_TO_ADDR
// bc_level = 1 ;
31704: LD_ADDR_OWVAR 43
31708: PUSH
31709: LD_INT 1
31711: ST_TO_ADDR
// case btype of 1 :
31712: LD_VAR 0 2
31716: PUSH
31717: LD_INT 1
31719: DOUBLE
31720: EQUAL
31721: IFTRUE 31725
31723: GO 31736
31725: POP
// bc_type := b_depot ; 2 :
31726: LD_ADDR_OWVAR 42
31730: PUSH
31731: LD_INT 0
31733: ST_TO_ADDR
31734: GO 32348
31736: LD_INT 2
31738: DOUBLE
31739: EQUAL
31740: IFTRUE 31744
31742: GO 31755
31744: POP
// bc_type := b_warehouse ; 3 :
31745: LD_ADDR_OWVAR 42
31749: PUSH
31750: LD_INT 1
31752: ST_TO_ADDR
31753: GO 32348
31755: LD_INT 3
31757: DOUBLE
31758: EQUAL
31759: IFTRUE 31763
31761: GO 31774
31763: POP
// bc_type := b_lab ; 4 .. 9 :
31764: LD_ADDR_OWVAR 42
31768: PUSH
31769: LD_INT 6
31771: ST_TO_ADDR
31772: GO 32348
31774: LD_INT 4
31776: DOUBLE
31777: GREATEREQUAL
31778: IFFALSE 31786
31780: LD_INT 9
31782: DOUBLE
31783: LESSEQUAL
31784: IFTRUE 31788
31786: GO 31840
31788: POP
// begin bc_type := b_lab_half ;
31789: LD_ADDR_OWVAR 42
31793: PUSH
31794: LD_INT 7
31796: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31797: LD_ADDR_OWVAR 44
31801: PUSH
31802: LD_INT 10
31804: PUSH
31805: LD_INT 11
31807: PUSH
31808: LD_INT 12
31810: PUSH
31811: LD_INT 15
31813: PUSH
31814: LD_INT 14
31816: PUSH
31817: LD_INT 13
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: PUSH
31828: LD_VAR 0 2
31832: PUSH
31833: LD_INT 3
31835: MINUS
31836: ARRAY
31837: ST_TO_ADDR
// end ; 10 .. 13 :
31838: GO 32348
31840: LD_INT 10
31842: DOUBLE
31843: GREATEREQUAL
31844: IFFALSE 31852
31846: LD_INT 13
31848: DOUBLE
31849: LESSEQUAL
31850: IFTRUE 31854
31852: GO 31931
31854: POP
// begin bc_type := b_lab_full ;
31855: LD_ADDR_OWVAR 42
31859: PUSH
31860: LD_INT 8
31862: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31863: LD_ADDR_OWVAR 44
31867: PUSH
31868: LD_INT 10
31870: PUSH
31871: LD_INT 12
31873: PUSH
31874: LD_INT 14
31876: PUSH
31877: LD_INT 13
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: PUSH
31886: LD_VAR 0 2
31890: PUSH
31891: LD_INT 9
31893: MINUS
31894: ARRAY
31895: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31896: LD_ADDR_OWVAR 45
31900: PUSH
31901: LD_INT 11
31903: PUSH
31904: LD_INT 15
31906: PUSH
31907: LD_INT 12
31909: PUSH
31910: LD_INT 15
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: LIST
31917: LIST
31918: PUSH
31919: LD_VAR 0 2
31923: PUSH
31924: LD_INT 9
31926: MINUS
31927: ARRAY
31928: ST_TO_ADDR
// end ; 14 :
31929: GO 32348
31931: LD_INT 14
31933: DOUBLE
31934: EQUAL
31935: IFTRUE 31939
31937: GO 31950
31939: POP
// bc_type := b_workshop ; 15 :
31940: LD_ADDR_OWVAR 42
31944: PUSH
31945: LD_INT 2
31947: ST_TO_ADDR
31948: GO 32348
31950: LD_INT 15
31952: DOUBLE
31953: EQUAL
31954: IFTRUE 31958
31956: GO 31969
31958: POP
// bc_type := b_factory ; 16 :
31959: LD_ADDR_OWVAR 42
31963: PUSH
31964: LD_INT 3
31966: ST_TO_ADDR
31967: GO 32348
31969: LD_INT 16
31971: DOUBLE
31972: EQUAL
31973: IFTRUE 31977
31975: GO 31988
31977: POP
// bc_type := b_ext_gun ; 17 :
31978: LD_ADDR_OWVAR 42
31982: PUSH
31983: LD_INT 17
31985: ST_TO_ADDR
31986: GO 32348
31988: LD_INT 17
31990: DOUBLE
31991: EQUAL
31992: IFTRUE 31996
31994: GO 32024
31996: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31997: LD_ADDR_OWVAR 42
32001: PUSH
32002: LD_INT 19
32004: PUSH
32005: LD_INT 23
32007: PUSH
32008: LD_INT 19
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: LIST
32015: PUSH
32016: LD_VAR 0 1
32020: ARRAY
32021: ST_TO_ADDR
32022: GO 32348
32024: LD_INT 18
32026: DOUBLE
32027: EQUAL
32028: IFTRUE 32032
32030: GO 32043
32032: POP
// bc_type := b_ext_radar ; 19 :
32033: LD_ADDR_OWVAR 42
32037: PUSH
32038: LD_INT 20
32040: ST_TO_ADDR
32041: GO 32348
32043: LD_INT 19
32045: DOUBLE
32046: EQUAL
32047: IFTRUE 32051
32049: GO 32062
32051: POP
// bc_type := b_ext_radio ; 20 :
32052: LD_ADDR_OWVAR 42
32056: PUSH
32057: LD_INT 22
32059: ST_TO_ADDR
32060: GO 32348
32062: LD_INT 20
32064: DOUBLE
32065: EQUAL
32066: IFTRUE 32070
32068: GO 32081
32070: POP
// bc_type := b_ext_siberium ; 21 :
32071: LD_ADDR_OWVAR 42
32075: PUSH
32076: LD_INT 21
32078: ST_TO_ADDR
32079: GO 32348
32081: LD_INT 21
32083: DOUBLE
32084: EQUAL
32085: IFTRUE 32089
32087: GO 32100
32089: POP
// bc_type := b_ext_computer ; 22 :
32090: LD_ADDR_OWVAR 42
32094: PUSH
32095: LD_INT 24
32097: ST_TO_ADDR
32098: GO 32348
32100: LD_INT 22
32102: DOUBLE
32103: EQUAL
32104: IFTRUE 32108
32106: GO 32119
32108: POP
// bc_type := b_ext_track ; 23 :
32109: LD_ADDR_OWVAR 42
32113: PUSH
32114: LD_INT 16
32116: ST_TO_ADDR
32117: GO 32348
32119: LD_INT 23
32121: DOUBLE
32122: EQUAL
32123: IFTRUE 32127
32125: GO 32138
32127: POP
// bc_type := b_ext_laser ; 24 :
32128: LD_ADDR_OWVAR 42
32132: PUSH
32133: LD_INT 25
32135: ST_TO_ADDR
32136: GO 32348
32138: LD_INT 24
32140: DOUBLE
32141: EQUAL
32142: IFTRUE 32146
32144: GO 32157
32146: POP
// bc_type := b_control_tower ; 25 :
32147: LD_ADDR_OWVAR 42
32151: PUSH
32152: LD_INT 36
32154: ST_TO_ADDR
32155: GO 32348
32157: LD_INT 25
32159: DOUBLE
32160: EQUAL
32161: IFTRUE 32165
32163: GO 32176
32165: POP
// bc_type := b_breastwork ; 26 :
32166: LD_ADDR_OWVAR 42
32170: PUSH
32171: LD_INT 31
32173: ST_TO_ADDR
32174: GO 32348
32176: LD_INT 26
32178: DOUBLE
32179: EQUAL
32180: IFTRUE 32184
32182: GO 32195
32184: POP
// bc_type := b_bunker ; 27 :
32185: LD_ADDR_OWVAR 42
32189: PUSH
32190: LD_INT 32
32192: ST_TO_ADDR
32193: GO 32348
32195: LD_INT 27
32197: DOUBLE
32198: EQUAL
32199: IFTRUE 32203
32201: GO 32214
32203: POP
// bc_type := b_turret ; 28 :
32204: LD_ADDR_OWVAR 42
32208: PUSH
32209: LD_INT 33
32211: ST_TO_ADDR
32212: GO 32348
32214: LD_INT 28
32216: DOUBLE
32217: EQUAL
32218: IFTRUE 32222
32220: GO 32233
32222: POP
// bc_type := b_armoury ; 29 :
32223: LD_ADDR_OWVAR 42
32227: PUSH
32228: LD_INT 4
32230: ST_TO_ADDR
32231: GO 32348
32233: LD_INT 29
32235: DOUBLE
32236: EQUAL
32237: IFTRUE 32241
32239: GO 32252
32241: POP
// bc_type := b_barracks ; 30 :
32242: LD_ADDR_OWVAR 42
32246: PUSH
32247: LD_INT 5
32249: ST_TO_ADDR
32250: GO 32348
32252: LD_INT 30
32254: DOUBLE
32255: EQUAL
32256: IFTRUE 32260
32258: GO 32271
32260: POP
// bc_type := b_solar_power ; 31 :
32261: LD_ADDR_OWVAR 42
32265: PUSH
32266: LD_INT 27
32268: ST_TO_ADDR
32269: GO 32348
32271: LD_INT 31
32273: DOUBLE
32274: EQUAL
32275: IFTRUE 32279
32277: GO 32290
32279: POP
// bc_type := b_oil_power ; 32 :
32280: LD_ADDR_OWVAR 42
32284: PUSH
32285: LD_INT 26
32287: ST_TO_ADDR
32288: GO 32348
32290: LD_INT 32
32292: DOUBLE
32293: EQUAL
32294: IFTRUE 32298
32296: GO 32309
32298: POP
// bc_type := b_siberite_power ; 33 :
32299: LD_ADDR_OWVAR 42
32303: PUSH
32304: LD_INT 28
32306: ST_TO_ADDR
32307: GO 32348
32309: LD_INT 33
32311: DOUBLE
32312: EQUAL
32313: IFTRUE 32317
32315: GO 32328
32317: POP
// bc_type := b_oil_mine ; 34 :
32318: LD_ADDR_OWVAR 42
32322: PUSH
32323: LD_INT 29
32325: ST_TO_ADDR
32326: GO 32348
32328: LD_INT 34
32330: DOUBLE
32331: EQUAL
32332: IFTRUE 32336
32334: GO 32347
32336: POP
// bc_type := b_siberite_mine ; end ;
32337: LD_ADDR_OWVAR 42
32341: PUSH
32342: LD_INT 30
32344: ST_TO_ADDR
32345: GO 32348
32347: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32348: LD_ADDR_VAR 0 8
32352: PUSH
32353: LD_VAR 0 5
32357: PPUSH
32358: LD_VAR 0 6
32362: PPUSH
32363: LD_VAR 0 3
32367: PPUSH
32368: CALL_OW 47
32372: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32373: LD_OWVAR 42
32377: PUSH
32378: LD_INT 32
32380: PUSH
32381: LD_INT 33
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: IN
32388: IFFALSE 32404
// PlaceWeaponTurret ( b , weapon ) ;
32390: LD_VAR 0 8
32394: PPUSH
32395: LD_VAR 0 4
32399: PPUSH
32400: CALL_OW 431
// end ;
32404: LD_VAR 0 7
32408: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32409: LD_INT 0
32411: PPUSH
32412: PPUSH
32413: PPUSH
32414: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32415: LD_ADDR_VAR 0 4
32419: PUSH
32420: LD_INT 22
32422: PUSH
32423: LD_OWVAR 2
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: PUSH
32432: LD_INT 2
32434: PUSH
32435: LD_INT 30
32437: PUSH
32438: LD_INT 0
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 30
32447: PUSH
32448: LD_INT 1
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: LIST
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PPUSH
32464: CALL_OW 69
32468: ST_TO_ADDR
// if not tmp then
32469: LD_VAR 0 4
32473: NOT
32474: IFFALSE 32478
// exit ;
32476: GO 32537
// for i in tmp do
32478: LD_ADDR_VAR 0 2
32482: PUSH
32483: LD_VAR 0 4
32487: PUSH
32488: FOR_IN
32489: IFFALSE 32535
// for j = 1 to 3 do
32491: LD_ADDR_VAR 0 3
32495: PUSH
32496: DOUBLE
32497: LD_INT 1
32499: DEC
32500: ST_TO_ADDR
32501: LD_INT 3
32503: PUSH
32504: FOR_TO
32505: IFFALSE 32531
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32507: LD_VAR 0 2
32511: PPUSH
32512: CALL_OW 274
32516: PPUSH
32517: LD_VAR 0 3
32521: PPUSH
32522: LD_INT 99999
32524: PPUSH
32525: CALL_OW 277
32529: GO 32504
32531: POP
32532: POP
32533: GO 32488
32535: POP
32536: POP
// end ;
32537: LD_VAR 0 1
32541: RET
// export function hHackSetLevel10 ; var i , j ; begin
32542: LD_INT 0
32544: PPUSH
32545: PPUSH
32546: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32547: LD_ADDR_VAR 0 2
32551: PUSH
32552: LD_INT 21
32554: PUSH
32555: LD_INT 1
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: PPUSH
32562: CALL_OW 69
32566: PUSH
32567: FOR_IN
32568: IFFALSE 32620
// if IsSelected ( i ) then
32570: LD_VAR 0 2
32574: PPUSH
32575: CALL_OW 306
32579: IFFALSE 32618
// begin for j := 1 to 4 do
32581: LD_ADDR_VAR 0 3
32585: PUSH
32586: DOUBLE
32587: LD_INT 1
32589: DEC
32590: ST_TO_ADDR
32591: LD_INT 4
32593: PUSH
32594: FOR_TO
32595: IFFALSE 32616
// SetSkill ( i , j , 10 ) ;
32597: LD_VAR 0 2
32601: PPUSH
32602: LD_VAR 0 3
32606: PPUSH
32607: LD_INT 10
32609: PPUSH
32610: CALL_OW 237
32614: GO 32594
32616: POP
32617: POP
// end ;
32618: GO 32567
32620: POP
32621: POP
// end ;
32622: LD_VAR 0 1
32626: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32627: LD_INT 0
32629: PPUSH
32630: PPUSH
32631: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32632: LD_ADDR_VAR 0 2
32636: PUSH
32637: LD_INT 22
32639: PUSH
32640: LD_OWVAR 2
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: PUSH
32649: LD_INT 21
32651: PUSH
32652: LD_INT 1
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: PPUSH
32663: CALL_OW 69
32667: PUSH
32668: FOR_IN
32669: IFFALSE 32710
// begin for j := 1 to 4 do
32671: LD_ADDR_VAR 0 3
32675: PUSH
32676: DOUBLE
32677: LD_INT 1
32679: DEC
32680: ST_TO_ADDR
32681: LD_INT 4
32683: PUSH
32684: FOR_TO
32685: IFFALSE 32706
// SetSkill ( i , j , 10 ) ;
32687: LD_VAR 0 2
32691: PPUSH
32692: LD_VAR 0 3
32696: PPUSH
32697: LD_INT 10
32699: PPUSH
32700: CALL_OW 237
32704: GO 32684
32706: POP
32707: POP
// end ;
32708: GO 32668
32710: POP
32711: POP
// end ;
32712: LD_VAR 0 1
32716: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32717: LD_INT 0
32719: PPUSH
// uc_side := your_side ;
32720: LD_ADDR_OWVAR 20
32724: PUSH
32725: LD_OWVAR 2
32729: ST_TO_ADDR
// uc_nation := nation ;
32730: LD_ADDR_OWVAR 21
32734: PUSH
32735: LD_VAR 0 1
32739: ST_TO_ADDR
// InitHc ;
32740: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32744: LD_INT 0
32746: PPUSH
32747: LD_VAR 0 2
32751: PPUSH
32752: LD_VAR 0 3
32756: PPUSH
32757: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32761: LD_VAR 0 4
32765: PPUSH
32766: LD_VAR 0 5
32770: PPUSH
32771: CALL_OW 428
32775: PUSH
32776: LD_INT 0
32778: EQUAL
32779: IFFALSE 32803
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32781: CALL_OW 44
32785: PPUSH
32786: LD_VAR 0 4
32790: PPUSH
32791: LD_VAR 0 5
32795: PPUSH
32796: LD_INT 1
32798: PPUSH
32799: CALL_OW 48
// end ;
32803: LD_VAR 0 6
32807: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32808: LD_INT 0
32810: PPUSH
32811: PPUSH
// uc_side := your_side ;
32812: LD_ADDR_OWVAR 20
32816: PUSH
32817: LD_OWVAR 2
32821: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32822: LD_VAR 0 1
32826: PUSH
32827: LD_INT 1
32829: PUSH
32830: LD_INT 2
32832: PUSH
32833: LD_INT 3
32835: PUSH
32836: LD_INT 4
32838: PUSH
32839: LD_INT 5
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: IN
32849: IFFALSE 32861
// uc_nation := nation_american else
32851: LD_ADDR_OWVAR 21
32855: PUSH
32856: LD_INT 1
32858: ST_TO_ADDR
32859: GO 32904
// if chassis in [ 11 , 12 , 13 , 14 ] then
32861: LD_VAR 0 1
32865: PUSH
32866: LD_INT 11
32868: PUSH
32869: LD_INT 12
32871: PUSH
32872: LD_INT 13
32874: PUSH
32875: LD_INT 14
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: IN
32884: IFFALSE 32896
// uc_nation := nation_arabian else
32886: LD_ADDR_OWVAR 21
32890: PUSH
32891: LD_INT 2
32893: ST_TO_ADDR
32894: GO 32904
// uc_nation := nation_russian ;
32896: LD_ADDR_OWVAR 21
32900: PUSH
32901: LD_INT 3
32903: ST_TO_ADDR
// vc_chassis := chassis ;
32904: LD_ADDR_OWVAR 37
32908: PUSH
32909: LD_VAR 0 1
32913: ST_TO_ADDR
// vc_engine := engine ;
32914: LD_ADDR_OWVAR 39
32918: PUSH
32919: LD_VAR 0 2
32923: ST_TO_ADDR
// vc_control := control ;
32924: LD_ADDR_OWVAR 38
32928: PUSH
32929: LD_VAR 0 3
32933: ST_TO_ADDR
// vc_weapon := weapon ;
32934: LD_ADDR_OWVAR 40
32938: PUSH
32939: LD_VAR 0 4
32943: ST_TO_ADDR
// un := CreateVehicle ;
32944: LD_ADDR_VAR 0 8
32948: PUSH
32949: CALL_OW 45
32953: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32954: LD_VAR 0 8
32958: PPUSH
32959: LD_INT 0
32961: PPUSH
32962: LD_INT 5
32964: PPUSH
32965: CALL_OW 12
32969: PPUSH
32970: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32974: LD_VAR 0 8
32978: PPUSH
32979: LD_VAR 0 5
32983: PPUSH
32984: LD_VAR 0 6
32988: PPUSH
32989: LD_INT 1
32991: PPUSH
32992: CALL_OW 48
// end ;
32996: LD_VAR 0 7
33000: RET
// export hInvincible ; every 1 do
33001: GO 33003
33003: DISABLE
// hInvincible := [ ] ;
33004: LD_ADDR_EXP 128
33008: PUSH
33009: EMPTY
33010: ST_TO_ADDR
33011: END
// every 10 do var i ;
33012: GO 33014
33014: DISABLE
33015: LD_INT 0
33017: PPUSH
// begin enable ;
33018: ENABLE
// if not hInvincible then
33019: LD_EXP 128
33023: NOT
33024: IFFALSE 33028
// exit ;
33026: GO 33072
// for i in hInvincible do
33028: LD_ADDR_VAR 0 1
33032: PUSH
33033: LD_EXP 128
33037: PUSH
33038: FOR_IN
33039: IFFALSE 33070
// if GetLives ( i ) < 1000 then
33041: LD_VAR 0 1
33045: PPUSH
33046: CALL_OW 256
33050: PUSH
33051: LD_INT 1000
33053: LESS
33054: IFFALSE 33068
// SetLives ( i , 1000 ) ;
33056: LD_VAR 0 1
33060: PPUSH
33061: LD_INT 1000
33063: PPUSH
33064: CALL_OW 234
33068: GO 33038
33070: POP
33071: POP
// end ;
33072: PPOPN 1
33074: END
// export function hHackInvincible ; var i ; begin
33075: LD_INT 0
33077: PPUSH
33078: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33079: LD_ADDR_VAR 0 2
33083: PUSH
33084: LD_INT 2
33086: PUSH
33087: LD_INT 21
33089: PUSH
33090: LD_INT 1
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: LD_INT 21
33099: PUSH
33100: LD_INT 2
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: LIST
33111: PPUSH
33112: CALL_OW 69
33116: PUSH
33117: FOR_IN
33118: IFFALSE 33179
// if IsSelected ( i ) then
33120: LD_VAR 0 2
33124: PPUSH
33125: CALL_OW 306
33129: IFFALSE 33177
// begin if i in hInvincible then
33131: LD_VAR 0 2
33135: PUSH
33136: LD_EXP 128
33140: IN
33141: IFFALSE 33161
// hInvincible := hInvincible diff i else
33143: LD_ADDR_EXP 128
33147: PUSH
33148: LD_EXP 128
33152: PUSH
33153: LD_VAR 0 2
33157: DIFF
33158: ST_TO_ADDR
33159: GO 33177
// hInvincible := hInvincible union i ;
33161: LD_ADDR_EXP 128
33165: PUSH
33166: LD_EXP 128
33170: PUSH
33171: LD_VAR 0 2
33175: UNION
33176: ST_TO_ADDR
// end ;
33177: GO 33117
33179: POP
33180: POP
// end ;
33181: LD_VAR 0 1
33185: RET
// export function hHackInvisible ; var i , j ; begin
33186: LD_INT 0
33188: PPUSH
33189: PPUSH
33190: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33191: LD_ADDR_VAR 0 2
33195: PUSH
33196: LD_INT 21
33198: PUSH
33199: LD_INT 1
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PPUSH
33206: CALL_OW 69
33210: PUSH
33211: FOR_IN
33212: IFFALSE 33236
// if IsSelected ( i ) then
33214: LD_VAR 0 2
33218: PPUSH
33219: CALL_OW 306
33223: IFFALSE 33234
// ComForceInvisible ( i ) ;
33225: LD_VAR 0 2
33229: PPUSH
33230: CALL_OW 496
33234: GO 33211
33236: POP
33237: POP
// end ;
33238: LD_VAR 0 1
33242: RET
// export function hHackChangeYourSide ; begin
33243: LD_INT 0
33245: PPUSH
// if your_side = 8 then
33246: LD_OWVAR 2
33250: PUSH
33251: LD_INT 8
33253: EQUAL
33254: IFFALSE 33266
// your_side := 0 else
33256: LD_ADDR_OWVAR 2
33260: PUSH
33261: LD_INT 0
33263: ST_TO_ADDR
33264: GO 33280
// your_side := your_side + 1 ;
33266: LD_ADDR_OWVAR 2
33270: PUSH
33271: LD_OWVAR 2
33275: PUSH
33276: LD_INT 1
33278: PLUS
33279: ST_TO_ADDR
// end ;
33280: LD_VAR 0 1
33284: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33285: LD_INT 0
33287: PPUSH
33288: PPUSH
33289: PPUSH
// for i in all_units do
33290: LD_ADDR_VAR 0 2
33294: PUSH
33295: LD_OWVAR 3
33299: PUSH
33300: FOR_IN
33301: IFFALSE 33379
// if IsSelected ( i ) then
33303: LD_VAR 0 2
33307: PPUSH
33308: CALL_OW 306
33312: IFFALSE 33377
// begin j := GetSide ( i ) ;
33314: LD_ADDR_VAR 0 3
33318: PUSH
33319: LD_VAR 0 2
33323: PPUSH
33324: CALL_OW 255
33328: ST_TO_ADDR
// if j = 8 then
33329: LD_VAR 0 3
33333: PUSH
33334: LD_INT 8
33336: EQUAL
33337: IFFALSE 33349
// j := 0 else
33339: LD_ADDR_VAR 0 3
33343: PUSH
33344: LD_INT 0
33346: ST_TO_ADDR
33347: GO 33363
// j := j + 1 ;
33349: LD_ADDR_VAR 0 3
33353: PUSH
33354: LD_VAR 0 3
33358: PUSH
33359: LD_INT 1
33361: PLUS
33362: ST_TO_ADDR
// SetSide ( i , j ) ;
33363: LD_VAR 0 2
33367: PPUSH
33368: LD_VAR 0 3
33372: PPUSH
33373: CALL_OW 235
// end ;
33377: GO 33300
33379: POP
33380: POP
// end ;
33381: LD_VAR 0 1
33385: RET
// export function hHackFog ; begin
33386: LD_INT 0
33388: PPUSH
// FogOff ( true ) ;
33389: LD_INT 1
33391: PPUSH
33392: CALL_OW 344
// end ;
33396: LD_VAR 0 1
33400: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33401: LD_INT 0
33403: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33404: LD_VAR 0 1
33408: PPUSH
33409: LD_VAR 0 2
33413: PPUSH
33414: LD_VAR 0 3
33418: PPUSH
33419: LD_INT 1
33421: PPUSH
33422: LD_INT 1
33424: PPUSH
33425: CALL_OW 483
// CenterOnXY ( x , y ) ;
33429: LD_VAR 0 2
33433: PPUSH
33434: LD_VAR 0 3
33438: PPUSH
33439: CALL_OW 84
// end ; end_of_file
33443: LD_VAR 0 4
33447: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
33448: LD_INT 0
33450: PPUSH
33451: PPUSH
33452: PPUSH
33453: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33454: LD_VAR 0 1
33458: PPUSH
33459: CALL_OW 264
33463: PUSH
33464: LD_EXP 56
33468: EQUAL
33469: IFFALSE 33541
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33471: LD_INT 68
33473: PPUSH
33474: LD_VAR 0 1
33478: PPUSH
33479: CALL_OW 255
33483: PPUSH
33484: CALL_OW 321
33488: PUSH
33489: LD_INT 2
33491: EQUAL
33492: IFFALSE 33504
// eff := 70 else
33494: LD_ADDR_VAR 0 4
33498: PUSH
33499: LD_INT 70
33501: ST_TO_ADDR
33502: GO 33512
// eff := 30 ;
33504: LD_ADDR_VAR 0 4
33508: PUSH
33509: LD_INT 30
33511: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33512: LD_VAR 0 1
33516: PPUSH
33517: CALL_OW 250
33521: PPUSH
33522: LD_VAR 0 1
33526: PPUSH
33527: CALL_OW 251
33531: PPUSH
33532: LD_VAR 0 4
33536: PPUSH
33537: CALL_OW 495
// end ; end ;
33541: LD_VAR 0 2
33545: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
33546: LD_INT 0
33548: PPUSH
// end ;
33549: LD_VAR 0 4
33553: RET
// export function SOS_Command ( cmd ) ; begin
33554: LD_INT 0
33556: PPUSH
// end ;
33557: LD_VAR 0 2
33561: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
33562: LD_INT 0
33564: PPUSH
// end ;
33565: LD_VAR 0 6
33569: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
33570: LD_INT 0
33572: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
33573: LD_VAR 0 1
33577: PUSH
33578: LD_INT 250
33580: EQUAL
33581: PUSH
33582: LD_VAR 0 2
33586: PPUSH
33587: CALL_OW 264
33591: PUSH
33592: LD_EXP 59
33596: EQUAL
33597: AND
33598: IFFALSE 33619
// MinerPlaceMine ( unit , x , y ) ;
33600: LD_VAR 0 2
33604: PPUSH
33605: LD_VAR 0 4
33609: PPUSH
33610: LD_VAR 0 5
33614: PPUSH
33615: CALL 35968 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
33619: LD_VAR 0 1
33623: PUSH
33624: LD_INT 251
33626: EQUAL
33627: PUSH
33628: LD_VAR 0 2
33632: PPUSH
33633: CALL_OW 264
33637: PUSH
33638: LD_EXP 59
33642: EQUAL
33643: AND
33644: IFFALSE 33665
// MinerDetonateMine ( unit , x , y ) ;
33646: LD_VAR 0 2
33650: PPUSH
33651: LD_VAR 0 4
33655: PPUSH
33656: LD_VAR 0 5
33660: PPUSH
33661: CALL 36245 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
33665: LD_VAR 0 1
33669: PUSH
33670: LD_INT 252
33672: EQUAL
33673: PUSH
33674: LD_VAR 0 2
33678: PPUSH
33679: CALL_OW 264
33683: PUSH
33684: LD_EXP 59
33688: EQUAL
33689: AND
33690: IFFALSE 33711
// MinerCreateMinefield ( unit , x , y ) ;
33692: LD_VAR 0 2
33696: PPUSH
33697: LD_VAR 0 4
33701: PPUSH
33702: LD_VAR 0 5
33706: PPUSH
33707: CALL 36662 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
33711: LD_VAR 0 1
33715: PUSH
33716: LD_INT 253
33718: EQUAL
33719: PUSH
33720: LD_VAR 0 2
33724: PPUSH
33725: CALL_OW 257
33729: PUSH
33730: LD_INT 5
33732: EQUAL
33733: AND
33734: IFFALSE 33755
// ComBinocular ( unit , x , y ) ;
33736: LD_VAR 0 2
33740: PPUSH
33741: LD_VAR 0 4
33745: PPUSH
33746: LD_VAR 0 5
33750: PPUSH
33751: CALL 37033 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33755: LD_VAR 0 1
33759: PUSH
33760: LD_INT 254
33762: EQUAL
33763: PUSH
33764: LD_VAR 0 2
33768: PPUSH
33769: CALL_OW 264
33773: PUSH
33774: LD_EXP 54
33778: EQUAL
33779: AND
33780: PUSH
33781: LD_VAR 0 3
33785: PPUSH
33786: CALL_OW 263
33790: PUSH
33791: LD_INT 3
33793: EQUAL
33794: AND
33795: IFFALSE 33811
// HackDestroyVehicle ( unit , selectedUnit ) ;
33797: LD_VAR 0 2
33801: PPUSH
33802: LD_VAR 0 3
33806: PPUSH
33807: CALL 35328 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33811: LD_VAR 0 1
33815: PUSH
33816: LD_INT 255
33818: EQUAL
33819: PUSH
33820: LD_VAR 0 2
33824: PPUSH
33825: CALL_OW 264
33829: PUSH
33830: LD_INT 14
33832: PUSH
33833: LD_INT 53
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: IN
33840: AND
33841: PUSH
33842: LD_VAR 0 4
33846: PPUSH
33847: LD_VAR 0 5
33851: PPUSH
33852: CALL_OW 488
33856: AND
33857: IFFALSE 33881
// CutTreeXYR ( unit , x , y , 12 ) ;
33859: LD_VAR 0 2
33863: PPUSH
33864: LD_VAR 0 4
33868: PPUSH
33869: LD_VAR 0 5
33873: PPUSH
33874: LD_INT 12
33876: PPUSH
33877: CALL 33894 0 4
// end ;
33881: LD_VAR 0 6
33885: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
33886: LD_INT 0
33888: PPUSH
// end ;
33889: LD_VAR 0 4
33893: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33894: LD_INT 0
33896: PPUSH
33897: PPUSH
33898: PPUSH
33899: PPUSH
33900: PPUSH
33901: PPUSH
33902: PPUSH
33903: PPUSH
33904: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
33905: LD_VAR 0 1
33909: NOT
33910: PUSH
33911: LD_VAR 0 2
33915: PPUSH
33916: LD_VAR 0 3
33920: PPUSH
33921: CALL_OW 488
33925: NOT
33926: OR
33927: PUSH
33928: LD_VAR 0 4
33932: NOT
33933: OR
33934: IFFALSE 33938
// exit ;
33936: GO 34278
// list := [ ] ;
33938: LD_ADDR_VAR 0 13
33942: PUSH
33943: EMPTY
33944: ST_TO_ADDR
// if x - r < 0 then
33945: LD_VAR 0 2
33949: PUSH
33950: LD_VAR 0 4
33954: MINUS
33955: PUSH
33956: LD_INT 0
33958: LESS
33959: IFFALSE 33971
// min_x := 0 else
33961: LD_ADDR_VAR 0 7
33965: PUSH
33966: LD_INT 0
33968: ST_TO_ADDR
33969: GO 33987
// min_x := x - r ;
33971: LD_ADDR_VAR 0 7
33975: PUSH
33976: LD_VAR 0 2
33980: PUSH
33981: LD_VAR 0 4
33985: MINUS
33986: ST_TO_ADDR
// if y - r < 0 then
33987: LD_VAR 0 3
33991: PUSH
33992: LD_VAR 0 4
33996: MINUS
33997: PUSH
33998: LD_INT 0
34000: LESS
34001: IFFALSE 34013
// min_y := 0 else
34003: LD_ADDR_VAR 0 8
34007: PUSH
34008: LD_INT 0
34010: ST_TO_ADDR
34011: GO 34029
// min_y := y - r ;
34013: LD_ADDR_VAR 0 8
34017: PUSH
34018: LD_VAR 0 3
34022: PUSH
34023: LD_VAR 0 4
34027: MINUS
34028: ST_TO_ADDR
// max_x := x + r ;
34029: LD_ADDR_VAR 0 9
34033: PUSH
34034: LD_VAR 0 2
34038: PUSH
34039: LD_VAR 0 4
34043: PLUS
34044: ST_TO_ADDR
// max_y := y + r ;
34045: LD_ADDR_VAR 0 10
34049: PUSH
34050: LD_VAR 0 3
34054: PUSH
34055: LD_VAR 0 4
34059: PLUS
34060: ST_TO_ADDR
// for _x = min_x to max_x do
34061: LD_ADDR_VAR 0 11
34065: PUSH
34066: DOUBLE
34067: LD_VAR 0 7
34071: DEC
34072: ST_TO_ADDR
34073: LD_VAR 0 9
34077: PUSH
34078: FOR_TO
34079: IFFALSE 34196
// for _y = min_y to max_y do
34081: LD_ADDR_VAR 0 12
34085: PUSH
34086: DOUBLE
34087: LD_VAR 0 8
34091: DEC
34092: ST_TO_ADDR
34093: LD_VAR 0 10
34097: PUSH
34098: FOR_TO
34099: IFFALSE 34192
// begin if not ValidHex ( _x , _y ) then
34101: LD_VAR 0 11
34105: PPUSH
34106: LD_VAR 0 12
34110: PPUSH
34111: CALL_OW 488
34115: NOT
34116: IFFALSE 34120
// continue ;
34118: GO 34098
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34120: LD_VAR 0 11
34124: PPUSH
34125: LD_VAR 0 12
34129: PPUSH
34130: CALL_OW 351
34134: PUSH
34135: LD_VAR 0 11
34139: PPUSH
34140: LD_VAR 0 12
34144: PPUSH
34145: CALL_OW 554
34149: AND
34150: IFFALSE 34190
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34152: LD_ADDR_VAR 0 13
34156: PUSH
34157: LD_VAR 0 13
34161: PPUSH
34162: LD_VAR 0 13
34166: PUSH
34167: LD_INT 1
34169: PLUS
34170: PPUSH
34171: LD_VAR 0 11
34175: PUSH
34176: LD_VAR 0 12
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: PPUSH
34185: CALL_OW 2
34189: ST_TO_ADDR
// end ;
34190: GO 34098
34192: POP
34193: POP
34194: GO 34078
34196: POP
34197: POP
// if not list then
34198: LD_VAR 0 13
34202: NOT
34203: IFFALSE 34207
// exit ;
34205: GO 34278
// for i in list do
34207: LD_ADDR_VAR 0 6
34211: PUSH
34212: LD_VAR 0 13
34216: PUSH
34217: FOR_IN
34218: IFFALSE 34276
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34220: LD_VAR 0 1
34224: PPUSH
34225: LD_STRING M
34227: PUSH
34228: LD_VAR 0 6
34232: PUSH
34233: LD_INT 1
34235: ARRAY
34236: PUSH
34237: LD_VAR 0 6
34241: PUSH
34242: LD_INT 2
34244: ARRAY
34245: PUSH
34246: LD_INT 0
34248: PUSH
34249: LD_INT 0
34251: PUSH
34252: LD_INT 0
34254: PUSH
34255: LD_INT 0
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: PUSH
34267: EMPTY
34268: LIST
34269: PPUSH
34270: CALL_OW 447
34274: GO 34217
34276: POP
34277: POP
// end ;
34278: LD_VAR 0 5
34282: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34283: LD_EXP 131
34287: NOT
34288: IFFALSE 34338
34290: GO 34292
34292: DISABLE
// begin initHack := true ;
34293: LD_ADDR_EXP 131
34297: PUSH
34298: LD_INT 1
34300: ST_TO_ADDR
// hackTanks := [ ] ;
34301: LD_ADDR_EXP 132
34305: PUSH
34306: EMPTY
34307: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34308: LD_ADDR_EXP 133
34312: PUSH
34313: EMPTY
34314: ST_TO_ADDR
// hackLimit := 3 ;
34315: LD_ADDR_EXP 134
34319: PUSH
34320: LD_INT 3
34322: ST_TO_ADDR
// hackDist := 12 ;
34323: LD_ADDR_EXP 135
34327: PUSH
34328: LD_INT 12
34330: ST_TO_ADDR
// hackCounter := [ ] ;
34331: LD_ADDR_EXP 136
34335: PUSH
34336: EMPTY
34337: ST_TO_ADDR
// end ;
34338: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34339: LD_EXP 131
34343: PUSH
34344: LD_INT 34
34346: PUSH
34347: LD_EXP 54
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PPUSH
34356: CALL_OW 69
34360: AND
34361: IFFALSE 34616
34363: GO 34365
34365: DISABLE
34366: LD_INT 0
34368: PPUSH
34369: PPUSH
// begin enable ;
34370: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34371: LD_ADDR_VAR 0 1
34375: PUSH
34376: LD_INT 34
34378: PUSH
34379: LD_EXP 54
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PPUSH
34388: CALL_OW 69
34392: PUSH
34393: FOR_IN
34394: IFFALSE 34614
// begin if not i in hackTanks then
34396: LD_VAR 0 1
34400: PUSH
34401: LD_EXP 132
34405: IN
34406: NOT
34407: IFFALSE 34490
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34409: LD_ADDR_EXP 132
34413: PUSH
34414: LD_EXP 132
34418: PPUSH
34419: LD_EXP 132
34423: PUSH
34424: LD_INT 1
34426: PLUS
34427: PPUSH
34428: LD_VAR 0 1
34432: PPUSH
34433: CALL_OW 1
34437: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34438: LD_ADDR_EXP 133
34442: PUSH
34443: LD_EXP 133
34447: PPUSH
34448: LD_EXP 133
34452: PUSH
34453: LD_INT 1
34455: PLUS
34456: PPUSH
34457: EMPTY
34458: PPUSH
34459: CALL_OW 1
34463: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34464: LD_ADDR_EXP 136
34468: PUSH
34469: LD_EXP 136
34473: PPUSH
34474: LD_EXP 136
34478: PUSH
34479: LD_INT 1
34481: PLUS
34482: PPUSH
34483: EMPTY
34484: PPUSH
34485: CALL_OW 1
34489: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34490: LD_VAR 0 1
34494: PPUSH
34495: CALL_OW 302
34499: NOT
34500: IFFALSE 34513
// begin HackUnlinkAll ( i ) ;
34502: LD_VAR 0 1
34506: PPUSH
34507: CALL 34619 0 1
// continue ;
34511: GO 34393
// end ; HackCheckCapturedStatus ( i ) ;
34513: LD_VAR 0 1
34517: PPUSH
34518: CALL 35062 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34522: LD_ADDR_VAR 0 2
34526: PUSH
34527: LD_INT 81
34529: PUSH
34530: LD_VAR 0 1
34534: PPUSH
34535: CALL_OW 255
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: LD_INT 33
34546: PUSH
34547: LD_INT 3
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: PUSH
34554: LD_INT 91
34556: PUSH
34557: LD_VAR 0 1
34561: PUSH
34562: LD_EXP 135
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: LIST
34571: PUSH
34572: LD_INT 50
34574: PUSH
34575: EMPTY
34576: LIST
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: PPUSH
34584: CALL_OW 69
34588: ST_TO_ADDR
// if not tmp then
34589: LD_VAR 0 2
34593: NOT
34594: IFFALSE 34598
// continue ;
34596: GO 34393
// HackLink ( i , tmp ) ;
34598: LD_VAR 0 1
34602: PPUSH
34603: LD_VAR 0 2
34607: PPUSH
34608: CALL 34755 0 2
// end ;
34612: GO 34393
34614: POP
34615: POP
// end ;
34616: PPOPN 2
34618: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
34619: LD_INT 0
34621: PPUSH
34622: PPUSH
34623: PPUSH
// if not hack in hackTanks then
34624: LD_VAR 0 1
34628: PUSH
34629: LD_EXP 132
34633: IN
34634: NOT
34635: IFFALSE 34639
// exit ;
34637: GO 34750
// index := GetElementIndex ( hackTanks , hack ) ;
34639: LD_ADDR_VAR 0 4
34643: PUSH
34644: LD_EXP 132
34648: PPUSH
34649: LD_VAR 0 1
34653: PPUSH
34654: CALL 42224 0 2
34658: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
34659: LD_EXP 133
34663: PUSH
34664: LD_VAR 0 4
34668: ARRAY
34669: IFFALSE 34750
// begin for i in hackTanksCaptured [ index ] do
34671: LD_ADDR_VAR 0 3
34675: PUSH
34676: LD_EXP 133
34680: PUSH
34681: LD_VAR 0 4
34685: ARRAY
34686: PUSH
34687: FOR_IN
34688: IFFALSE 34714
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34690: LD_VAR 0 3
34694: PUSH
34695: LD_INT 1
34697: ARRAY
34698: PPUSH
34699: LD_VAR 0 3
34703: PUSH
34704: LD_INT 2
34706: ARRAY
34707: PPUSH
34708: CALL_OW 235
34712: GO 34687
34714: POP
34715: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34716: LD_ADDR_EXP 133
34720: PUSH
34721: LD_EXP 133
34725: PPUSH
34726: LD_VAR 0 4
34730: PPUSH
34731: EMPTY
34732: PPUSH
34733: CALL_OW 1
34737: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34738: LD_VAR 0 1
34742: PPUSH
34743: LD_INT 0
34745: PPUSH
34746: CALL_OW 505
// end ; end ;
34750: LD_VAR 0 2
34754: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
34755: LD_INT 0
34757: PPUSH
34758: PPUSH
34759: PPUSH
// if not hack in hackTanks or not vehicles then
34760: LD_VAR 0 1
34764: PUSH
34765: LD_EXP 132
34769: IN
34770: NOT
34771: PUSH
34772: LD_VAR 0 2
34776: NOT
34777: OR
34778: IFFALSE 34782
// exit ;
34780: GO 35057
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34782: LD_ADDR_VAR 0 2
34786: PUSH
34787: LD_VAR 0 1
34791: PPUSH
34792: LD_VAR 0 2
34796: PPUSH
34797: LD_INT 1
34799: PPUSH
34800: LD_INT 1
34802: PPUSH
34803: CALL 42874 0 4
34807: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34808: LD_ADDR_VAR 0 5
34812: PUSH
34813: LD_EXP 132
34817: PPUSH
34818: LD_VAR 0 1
34822: PPUSH
34823: CALL 42224 0 2
34827: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34828: LD_EXP 133
34832: PUSH
34833: LD_VAR 0 5
34837: ARRAY
34838: PUSH
34839: LD_EXP 134
34843: LESS
34844: IFFALSE 35033
// begin for i := 1 to vehicles do
34846: LD_ADDR_VAR 0 4
34850: PUSH
34851: DOUBLE
34852: LD_INT 1
34854: DEC
34855: ST_TO_ADDR
34856: LD_VAR 0 2
34860: PUSH
34861: FOR_TO
34862: IFFALSE 35031
// begin if hackTanksCaptured [ index ] = hackLimit then
34864: LD_EXP 133
34868: PUSH
34869: LD_VAR 0 5
34873: ARRAY
34874: PUSH
34875: LD_EXP 134
34879: EQUAL
34880: IFFALSE 34884
// break ;
34882: GO 35031
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34884: LD_ADDR_EXP 136
34888: PUSH
34889: LD_EXP 136
34893: PPUSH
34894: LD_VAR 0 5
34898: PPUSH
34899: LD_EXP 136
34903: PUSH
34904: LD_VAR 0 5
34908: ARRAY
34909: PUSH
34910: LD_INT 1
34912: PLUS
34913: PPUSH
34914: CALL_OW 1
34918: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34919: LD_ADDR_EXP 133
34923: PUSH
34924: LD_EXP 133
34928: PPUSH
34929: LD_VAR 0 5
34933: PUSH
34934: LD_EXP 133
34938: PUSH
34939: LD_VAR 0 5
34943: ARRAY
34944: PUSH
34945: LD_INT 1
34947: PLUS
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PPUSH
34953: LD_VAR 0 2
34957: PUSH
34958: LD_VAR 0 4
34962: ARRAY
34963: PUSH
34964: LD_VAR 0 2
34968: PUSH
34969: LD_VAR 0 4
34973: ARRAY
34974: PPUSH
34975: CALL_OW 255
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PPUSH
34984: CALL 42439 0 3
34988: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34989: LD_VAR 0 2
34993: PUSH
34994: LD_VAR 0 4
34998: ARRAY
34999: PPUSH
35000: LD_VAR 0 1
35004: PPUSH
35005: CALL_OW 255
35009: PPUSH
35010: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
35014: LD_VAR 0 2
35018: PUSH
35019: LD_VAR 0 4
35023: ARRAY
35024: PPUSH
35025: CALL_OW 141
// end ;
35029: GO 34861
35031: POP
35032: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35033: LD_VAR 0 1
35037: PPUSH
35038: LD_EXP 133
35042: PUSH
35043: LD_VAR 0 5
35047: ARRAY
35048: PUSH
35049: LD_INT 0
35051: PLUS
35052: PPUSH
35053: CALL_OW 505
// end ;
35057: LD_VAR 0 3
35061: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35062: LD_INT 0
35064: PPUSH
35065: PPUSH
35066: PPUSH
35067: PPUSH
// if not hack in hackTanks then
35068: LD_VAR 0 1
35072: PUSH
35073: LD_EXP 132
35077: IN
35078: NOT
35079: IFFALSE 35083
// exit ;
35081: GO 35323
// index := GetElementIndex ( hackTanks , hack ) ;
35083: LD_ADDR_VAR 0 4
35087: PUSH
35088: LD_EXP 132
35092: PPUSH
35093: LD_VAR 0 1
35097: PPUSH
35098: CALL 42224 0 2
35102: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35103: LD_ADDR_VAR 0 3
35107: PUSH
35108: DOUBLE
35109: LD_EXP 133
35113: PUSH
35114: LD_VAR 0 4
35118: ARRAY
35119: INC
35120: ST_TO_ADDR
35121: LD_INT 1
35123: PUSH
35124: FOR_DOWNTO
35125: IFFALSE 35297
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35127: LD_ADDR_VAR 0 5
35131: PUSH
35132: LD_EXP 133
35136: PUSH
35137: LD_VAR 0 4
35141: ARRAY
35142: PUSH
35143: LD_VAR 0 3
35147: ARRAY
35148: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35149: LD_VAR 0 5
35153: PUSH
35154: LD_INT 1
35156: ARRAY
35157: PPUSH
35158: CALL_OW 302
35162: NOT
35163: PUSH
35164: LD_VAR 0 5
35168: PUSH
35169: LD_INT 1
35171: ARRAY
35172: PPUSH
35173: CALL_OW 255
35177: PUSH
35178: LD_VAR 0 1
35182: PPUSH
35183: CALL_OW 255
35187: NONEQUAL
35188: OR
35189: IFFALSE 35295
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35191: LD_VAR 0 5
35195: PUSH
35196: LD_INT 1
35198: ARRAY
35199: PPUSH
35200: CALL_OW 305
35204: PUSH
35205: LD_VAR 0 5
35209: PUSH
35210: LD_INT 1
35212: ARRAY
35213: PPUSH
35214: CALL_OW 255
35218: PUSH
35219: LD_VAR 0 1
35223: PPUSH
35224: CALL_OW 255
35228: EQUAL
35229: AND
35230: IFFALSE 35254
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35232: LD_VAR 0 5
35236: PUSH
35237: LD_INT 1
35239: ARRAY
35240: PPUSH
35241: LD_VAR 0 5
35245: PUSH
35246: LD_INT 2
35248: ARRAY
35249: PPUSH
35250: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35254: LD_ADDR_EXP 133
35258: PUSH
35259: LD_EXP 133
35263: PPUSH
35264: LD_VAR 0 4
35268: PPUSH
35269: LD_EXP 133
35273: PUSH
35274: LD_VAR 0 4
35278: ARRAY
35279: PPUSH
35280: LD_VAR 0 3
35284: PPUSH
35285: CALL_OW 3
35289: PPUSH
35290: CALL_OW 1
35294: ST_TO_ADDR
// end ; end ;
35295: GO 35124
35297: POP
35298: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35299: LD_VAR 0 1
35303: PPUSH
35304: LD_EXP 133
35308: PUSH
35309: LD_VAR 0 4
35313: ARRAY
35314: PUSH
35315: LD_INT 0
35317: PLUS
35318: PPUSH
35319: CALL_OW 505
// end ;
35323: LD_VAR 0 2
35327: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35328: LD_INT 0
35330: PPUSH
35331: PPUSH
35332: PPUSH
35333: PPUSH
// if not hack in hackTanks then
35334: LD_VAR 0 1
35338: PUSH
35339: LD_EXP 132
35343: IN
35344: NOT
35345: IFFALSE 35349
// exit ;
35347: GO 35434
// index := GetElementIndex ( hackTanks , hack ) ;
35349: LD_ADDR_VAR 0 5
35353: PUSH
35354: LD_EXP 132
35358: PPUSH
35359: LD_VAR 0 1
35363: PPUSH
35364: CALL 42224 0 2
35368: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35369: LD_ADDR_VAR 0 4
35373: PUSH
35374: DOUBLE
35375: LD_INT 1
35377: DEC
35378: ST_TO_ADDR
35379: LD_EXP 133
35383: PUSH
35384: LD_VAR 0 5
35388: ARRAY
35389: PUSH
35390: FOR_TO
35391: IFFALSE 35432
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35393: LD_EXP 133
35397: PUSH
35398: LD_VAR 0 5
35402: ARRAY
35403: PUSH
35404: LD_VAR 0 4
35408: ARRAY
35409: PUSH
35410: LD_INT 1
35412: ARRAY
35413: PUSH
35414: LD_VAR 0 2
35418: EQUAL
35419: IFFALSE 35430
// KillUnit ( vehicle ) ;
35421: LD_VAR 0 2
35425: PPUSH
35426: CALL_OW 66
35430: GO 35390
35432: POP
35433: POP
// end ;
35434: LD_VAR 0 3
35438: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
35439: LD_EXP 137
35443: NOT
35444: IFFALSE 35479
35446: GO 35448
35448: DISABLE
// begin initMiner := true ;
35449: LD_ADDR_EXP 137
35453: PUSH
35454: LD_INT 1
35456: ST_TO_ADDR
// minersList := [ ] ;
35457: LD_ADDR_EXP 138
35461: PUSH
35462: EMPTY
35463: ST_TO_ADDR
// minerMinesList := [ ] ;
35464: LD_ADDR_EXP 139
35468: PUSH
35469: EMPTY
35470: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
35471: LD_ADDR_EXP 140
35475: PUSH
35476: LD_INT 5
35478: ST_TO_ADDR
// end ;
35479: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
35480: LD_EXP 137
35484: PUSH
35485: LD_INT 34
35487: PUSH
35488: LD_EXP 59
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PPUSH
35497: CALL_OW 69
35501: AND
35502: IFFALSE 35965
35504: GO 35506
35506: DISABLE
35507: LD_INT 0
35509: PPUSH
35510: PPUSH
35511: PPUSH
35512: PPUSH
// begin enable ;
35513: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
35514: LD_ADDR_VAR 0 1
35518: PUSH
35519: LD_INT 34
35521: PUSH
35522: LD_EXP 59
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: PPUSH
35531: CALL_OW 69
35535: PUSH
35536: FOR_IN
35537: IFFALSE 35609
// begin if not i in minersList then
35539: LD_VAR 0 1
35543: PUSH
35544: LD_EXP 138
35548: IN
35549: NOT
35550: IFFALSE 35607
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
35552: LD_ADDR_EXP 138
35556: PUSH
35557: LD_EXP 138
35561: PPUSH
35562: LD_EXP 138
35566: PUSH
35567: LD_INT 1
35569: PLUS
35570: PPUSH
35571: LD_VAR 0 1
35575: PPUSH
35576: CALL_OW 1
35580: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
35581: LD_ADDR_EXP 139
35585: PUSH
35586: LD_EXP 139
35590: PPUSH
35591: LD_EXP 139
35595: PUSH
35596: LD_INT 1
35598: PLUS
35599: PPUSH
35600: EMPTY
35601: PPUSH
35602: CALL_OW 1
35606: ST_TO_ADDR
// end end ;
35607: GO 35536
35609: POP
35610: POP
// for i := minerMinesList downto 1 do
35611: LD_ADDR_VAR 0 1
35615: PUSH
35616: DOUBLE
35617: LD_EXP 139
35621: INC
35622: ST_TO_ADDR
35623: LD_INT 1
35625: PUSH
35626: FOR_DOWNTO
35627: IFFALSE 35963
// begin if IsLive ( minersList [ i ] ) then
35629: LD_EXP 138
35633: PUSH
35634: LD_VAR 0 1
35638: ARRAY
35639: PPUSH
35640: CALL_OW 300
35644: IFFALSE 35672
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
35646: LD_EXP 138
35650: PUSH
35651: LD_VAR 0 1
35655: ARRAY
35656: PPUSH
35657: LD_EXP 139
35661: PUSH
35662: LD_VAR 0 1
35666: ARRAY
35667: PPUSH
35668: CALL_OW 505
// if not minerMinesList [ i ] then
35672: LD_EXP 139
35676: PUSH
35677: LD_VAR 0 1
35681: ARRAY
35682: NOT
35683: IFFALSE 35687
// continue ;
35685: GO 35626
// for j := minerMinesList [ i ] downto 1 do
35687: LD_ADDR_VAR 0 2
35691: PUSH
35692: DOUBLE
35693: LD_EXP 139
35697: PUSH
35698: LD_VAR 0 1
35702: ARRAY
35703: INC
35704: ST_TO_ADDR
35705: LD_INT 1
35707: PUSH
35708: FOR_DOWNTO
35709: IFFALSE 35959
// begin side := GetSide ( minersList [ i ] ) ;
35711: LD_ADDR_VAR 0 3
35715: PUSH
35716: LD_EXP 138
35720: PUSH
35721: LD_VAR 0 1
35725: ARRAY
35726: PPUSH
35727: CALL_OW 255
35731: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35732: LD_ADDR_VAR 0 4
35736: PUSH
35737: LD_EXP 139
35741: PUSH
35742: LD_VAR 0 1
35746: ARRAY
35747: PUSH
35748: LD_VAR 0 2
35752: ARRAY
35753: PUSH
35754: LD_INT 1
35756: ARRAY
35757: PPUSH
35758: LD_EXP 139
35762: PUSH
35763: LD_VAR 0 1
35767: ARRAY
35768: PUSH
35769: LD_VAR 0 2
35773: ARRAY
35774: PUSH
35775: LD_INT 2
35777: ARRAY
35778: PPUSH
35779: CALL_OW 428
35783: ST_TO_ADDR
// if not tmp then
35784: LD_VAR 0 4
35788: NOT
35789: IFFALSE 35793
// continue ;
35791: GO 35708
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35793: LD_VAR 0 4
35797: PUSH
35798: LD_INT 81
35800: PUSH
35801: LD_VAR 0 3
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PPUSH
35810: CALL_OW 69
35814: IN
35815: PUSH
35816: LD_EXP 139
35820: PUSH
35821: LD_VAR 0 1
35825: ARRAY
35826: PUSH
35827: LD_VAR 0 2
35831: ARRAY
35832: PUSH
35833: LD_INT 1
35835: ARRAY
35836: PPUSH
35837: LD_EXP 139
35841: PUSH
35842: LD_VAR 0 1
35846: ARRAY
35847: PUSH
35848: LD_VAR 0 2
35852: ARRAY
35853: PUSH
35854: LD_INT 2
35856: ARRAY
35857: PPUSH
35858: CALL_OW 458
35862: AND
35863: IFFALSE 35957
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35865: LD_EXP 139
35869: PUSH
35870: LD_VAR 0 1
35874: ARRAY
35875: PUSH
35876: LD_VAR 0 2
35880: ARRAY
35881: PUSH
35882: LD_INT 1
35884: ARRAY
35885: PPUSH
35886: LD_EXP 139
35890: PUSH
35891: LD_VAR 0 1
35895: ARRAY
35896: PUSH
35897: LD_VAR 0 2
35901: ARRAY
35902: PUSH
35903: LD_INT 2
35905: ARRAY
35906: PPUSH
35907: LD_VAR 0 3
35911: PPUSH
35912: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35916: LD_ADDR_EXP 139
35920: PUSH
35921: LD_EXP 139
35925: PPUSH
35926: LD_VAR 0 1
35930: PPUSH
35931: LD_EXP 139
35935: PUSH
35936: LD_VAR 0 1
35940: ARRAY
35941: PPUSH
35942: LD_VAR 0 2
35946: PPUSH
35947: CALL_OW 3
35951: PPUSH
35952: CALL_OW 1
35956: ST_TO_ADDR
// end ; end ;
35957: GO 35708
35959: POP
35960: POP
// end ;
35961: GO 35626
35963: POP
35964: POP
// end ;
35965: PPOPN 4
35967: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35968: LD_INT 0
35970: PPUSH
35971: PPUSH
// result := false ;
35972: LD_ADDR_VAR 0 4
35976: PUSH
35977: LD_INT 0
35979: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35980: LD_VAR 0 1
35984: PPUSH
35985: CALL_OW 264
35989: PUSH
35990: LD_EXP 59
35994: EQUAL
35995: NOT
35996: IFFALSE 36000
// exit ;
35998: GO 36240
// index := GetElementIndex ( minersList , unit ) ;
36000: LD_ADDR_VAR 0 5
36004: PUSH
36005: LD_EXP 138
36009: PPUSH
36010: LD_VAR 0 1
36014: PPUSH
36015: CALL 42224 0 2
36019: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
36020: LD_EXP 139
36024: PUSH
36025: LD_VAR 0 5
36029: ARRAY
36030: PUSH
36031: LD_EXP 140
36035: GREATEREQUAL
36036: IFFALSE 36040
// exit ;
36038: GO 36240
// ComMoveXY ( unit , x , y ) ;
36040: LD_VAR 0 1
36044: PPUSH
36045: LD_VAR 0 2
36049: PPUSH
36050: LD_VAR 0 3
36054: PPUSH
36055: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36059: LD_INT 35
36061: PPUSH
36062: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36066: LD_VAR 0 1
36070: PPUSH
36071: LD_VAR 0 2
36075: PPUSH
36076: LD_VAR 0 3
36080: PPUSH
36081: CALL 72996 0 3
36085: NOT
36086: PUSH
36087: LD_VAR 0 1
36091: PPUSH
36092: CALL_OW 314
36096: AND
36097: IFFALSE 36101
// exit ;
36099: GO 36240
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36101: LD_VAR 0 2
36105: PPUSH
36106: LD_VAR 0 3
36110: PPUSH
36111: CALL_OW 428
36115: PUSH
36116: LD_VAR 0 1
36120: EQUAL
36121: PUSH
36122: LD_VAR 0 1
36126: PPUSH
36127: CALL_OW 314
36131: NOT
36132: AND
36133: IFFALSE 36059
// PlaySoundXY ( x , y , PlantMine ) ;
36135: LD_VAR 0 2
36139: PPUSH
36140: LD_VAR 0 3
36144: PPUSH
36145: LD_STRING PlantMine
36147: PPUSH
36148: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
36152: LD_VAR 0 2
36156: PPUSH
36157: LD_VAR 0 3
36161: PPUSH
36162: LD_VAR 0 1
36166: PPUSH
36167: CALL_OW 255
36171: PPUSH
36172: LD_INT 0
36174: PPUSH
36175: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36179: LD_ADDR_EXP 139
36183: PUSH
36184: LD_EXP 139
36188: PPUSH
36189: LD_VAR 0 5
36193: PUSH
36194: LD_EXP 139
36198: PUSH
36199: LD_VAR 0 5
36203: ARRAY
36204: PUSH
36205: LD_INT 1
36207: PLUS
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PPUSH
36213: LD_VAR 0 2
36217: PUSH
36218: LD_VAR 0 3
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PPUSH
36227: CALL 42439 0 3
36231: ST_TO_ADDR
// result := true ;
36232: LD_ADDR_VAR 0 4
36236: PUSH
36237: LD_INT 1
36239: ST_TO_ADDR
// end ;
36240: LD_VAR 0 4
36244: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36245: LD_INT 0
36247: PPUSH
36248: PPUSH
36249: PPUSH
// if not unit in minersList then
36250: LD_VAR 0 1
36254: PUSH
36255: LD_EXP 138
36259: IN
36260: NOT
36261: IFFALSE 36265
// exit ;
36263: GO 36657
// index := GetElementIndex ( minersList , unit ) ;
36265: LD_ADDR_VAR 0 6
36269: PUSH
36270: LD_EXP 138
36274: PPUSH
36275: LD_VAR 0 1
36279: PPUSH
36280: CALL 42224 0 2
36284: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36285: LD_ADDR_VAR 0 5
36289: PUSH
36290: DOUBLE
36291: LD_EXP 139
36295: PUSH
36296: LD_VAR 0 6
36300: ARRAY
36301: INC
36302: ST_TO_ADDR
36303: LD_INT 1
36305: PUSH
36306: FOR_DOWNTO
36307: IFFALSE 36468
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
36309: LD_EXP 139
36313: PUSH
36314: LD_VAR 0 6
36318: ARRAY
36319: PUSH
36320: LD_VAR 0 5
36324: ARRAY
36325: PUSH
36326: LD_INT 1
36328: ARRAY
36329: PUSH
36330: LD_VAR 0 2
36334: EQUAL
36335: PUSH
36336: LD_EXP 139
36340: PUSH
36341: LD_VAR 0 6
36345: ARRAY
36346: PUSH
36347: LD_VAR 0 5
36351: ARRAY
36352: PUSH
36353: LD_INT 2
36355: ARRAY
36356: PUSH
36357: LD_VAR 0 3
36361: EQUAL
36362: AND
36363: IFFALSE 36466
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36365: LD_EXP 139
36369: PUSH
36370: LD_VAR 0 6
36374: ARRAY
36375: PUSH
36376: LD_VAR 0 5
36380: ARRAY
36381: PUSH
36382: LD_INT 1
36384: ARRAY
36385: PPUSH
36386: LD_EXP 139
36390: PUSH
36391: LD_VAR 0 6
36395: ARRAY
36396: PUSH
36397: LD_VAR 0 5
36401: ARRAY
36402: PUSH
36403: LD_INT 2
36405: ARRAY
36406: PPUSH
36407: LD_VAR 0 1
36411: PPUSH
36412: CALL_OW 255
36416: PPUSH
36417: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36421: LD_ADDR_EXP 139
36425: PUSH
36426: LD_EXP 139
36430: PPUSH
36431: LD_VAR 0 6
36435: PPUSH
36436: LD_EXP 139
36440: PUSH
36441: LD_VAR 0 6
36445: ARRAY
36446: PPUSH
36447: LD_VAR 0 5
36451: PPUSH
36452: CALL_OW 3
36456: PPUSH
36457: CALL_OW 1
36461: ST_TO_ADDR
// exit ;
36462: POP
36463: POP
36464: GO 36657
// end ; end ;
36466: GO 36306
36468: POP
36469: POP
// for i := minerMinesList [ index ] downto 1 do
36470: LD_ADDR_VAR 0 5
36474: PUSH
36475: DOUBLE
36476: LD_EXP 139
36480: PUSH
36481: LD_VAR 0 6
36485: ARRAY
36486: INC
36487: ST_TO_ADDR
36488: LD_INT 1
36490: PUSH
36491: FOR_DOWNTO
36492: IFFALSE 36655
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
36494: LD_EXP 139
36498: PUSH
36499: LD_VAR 0 6
36503: ARRAY
36504: PUSH
36505: LD_VAR 0 5
36509: ARRAY
36510: PUSH
36511: LD_INT 1
36513: ARRAY
36514: PPUSH
36515: LD_EXP 139
36519: PUSH
36520: LD_VAR 0 6
36524: ARRAY
36525: PUSH
36526: LD_VAR 0 5
36530: ARRAY
36531: PUSH
36532: LD_INT 2
36534: ARRAY
36535: PPUSH
36536: LD_VAR 0 2
36540: PPUSH
36541: LD_VAR 0 3
36545: PPUSH
36546: CALL_OW 298
36550: PUSH
36551: LD_INT 6
36553: LESS
36554: IFFALSE 36653
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36556: LD_EXP 139
36560: PUSH
36561: LD_VAR 0 6
36565: ARRAY
36566: PUSH
36567: LD_VAR 0 5
36571: ARRAY
36572: PUSH
36573: LD_INT 1
36575: ARRAY
36576: PPUSH
36577: LD_EXP 139
36581: PUSH
36582: LD_VAR 0 6
36586: ARRAY
36587: PUSH
36588: LD_VAR 0 5
36592: ARRAY
36593: PUSH
36594: LD_INT 2
36596: ARRAY
36597: PPUSH
36598: LD_VAR 0 1
36602: PPUSH
36603: CALL_OW 255
36607: PPUSH
36608: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36612: LD_ADDR_EXP 139
36616: PUSH
36617: LD_EXP 139
36621: PPUSH
36622: LD_VAR 0 6
36626: PPUSH
36627: LD_EXP 139
36631: PUSH
36632: LD_VAR 0 6
36636: ARRAY
36637: PPUSH
36638: LD_VAR 0 5
36642: PPUSH
36643: CALL_OW 3
36647: PPUSH
36648: CALL_OW 1
36652: ST_TO_ADDR
// end ; end ;
36653: GO 36491
36655: POP
36656: POP
// end ;
36657: LD_VAR 0 4
36661: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
36662: LD_INT 0
36664: PPUSH
36665: PPUSH
36666: PPUSH
36667: PPUSH
36668: PPUSH
36669: PPUSH
36670: PPUSH
36671: PPUSH
36672: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
36673: LD_VAR 0 1
36677: PPUSH
36678: CALL_OW 264
36682: PUSH
36683: LD_EXP 59
36687: EQUAL
36688: NOT
36689: PUSH
36690: LD_VAR 0 1
36694: PUSH
36695: LD_EXP 138
36699: IN
36700: NOT
36701: OR
36702: IFFALSE 36706
// exit ;
36704: GO 37028
// index := GetElementIndex ( minersList , unit ) ;
36706: LD_ADDR_VAR 0 6
36710: PUSH
36711: LD_EXP 138
36715: PPUSH
36716: LD_VAR 0 1
36720: PPUSH
36721: CALL 42224 0 2
36725: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
36726: LD_ADDR_VAR 0 8
36730: PUSH
36731: LD_EXP 140
36735: PUSH
36736: LD_EXP 139
36740: PUSH
36741: LD_VAR 0 6
36745: ARRAY
36746: MINUS
36747: ST_TO_ADDR
// if not minesFreeAmount then
36748: LD_VAR 0 8
36752: NOT
36753: IFFALSE 36757
// exit ;
36755: GO 37028
// tmp := [ ] ;
36757: LD_ADDR_VAR 0 7
36761: PUSH
36762: EMPTY
36763: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36764: LD_ADDR_VAR 0 5
36768: PUSH
36769: DOUBLE
36770: LD_INT 1
36772: DEC
36773: ST_TO_ADDR
36774: LD_VAR 0 8
36778: PUSH
36779: FOR_TO
36780: IFFALSE 36975
// begin _d := rand ( 0 , 5 ) ;
36782: LD_ADDR_VAR 0 11
36786: PUSH
36787: LD_INT 0
36789: PPUSH
36790: LD_INT 5
36792: PPUSH
36793: CALL_OW 12
36797: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36798: LD_ADDR_VAR 0 12
36802: PUSH
36803: LD_INT 2
36805: PPUSH
36806: LD_INT 6
36808: PPUSH
36809: CALL_OW 12
36813: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36814: LD_ADDR_VAR 0 9
36818: PUSH
36819: LD_VAR 0 2
36823: PPUSH
36824: LD_VAR 0 11
36828: PPUSH
36829: LD_VAR 0 12
36833: PPUSH
36834: CALL_OW 272
36838: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36839: LD_ADDR_VAR 0 10
36843: PUSH
36844: LD_VAR 0 3
36848: PPUSH
36849: LD_VAR 0 11
36853: PPUSH
36854: LD_VAR 0 12
36858: PPUSH
36859: CALL_OW 273
36863: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36864: LD_VAR 0 9
36868: PPUSH
36869: LD_VAR 0 10
36873: PPUSH
36874: CALL_OW 488
36878: PUSH
36879: LD_VAR 0 9
36883: PUSH
36884: LD_VAR 0 10
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PUSH
36893: LD_VAR 0 7
36897: IN
36898: NOT
36899: AND
36900: PUSH
36901: LD_VAR 0 9
36905: PPUSH
36906: LD_VAR 0 10
36910: PPUSH
36911: CALL_OW 458
36915: NOT
36916: AND
36917: IFFALSE 36959
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36919: LD_ADDR_VAR 0 7
36923: PUSH
36924: LD_VAR 0 7
36928: PPUSH
36929: LD_VAR 0 7
36933: PUSH
36934: LD_INT 1
36936: PLUS
36937: PPUSH
36938: LD_VAR 0 9
36942: PUSH
36943: LD_VAR 0 10
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: PPUSH
36952: CALL_OW 1
36956: ST_TO_ADDR
36957: GO 36973
// i := i - 1 ;
36959: LD_ADDR_VAR 0 5
36963: PUSH
36964: LD_VAR 0 5
36968: PUSH
36969: LD_INT 1
36971: MINUS
36972: ST_TO_ADDR
// end ;
36973: GO 36779
36975: POP
36976: POP
// for i in tmp do
36977: LD_ADDR_VAR 0 5
36981: PUSH
36982: LD_VAR 0 7
36986: PUSH
36987: FOR_IN
36988: IFFALSE 37026
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36990: LD_VAR 0 1
36994: PPUSH
36995: LD_VAR 0 5
36999: PUSH
37000: LD_INT 1
37002: ARRAY
37003: PPUSH
37004: LD_VAR 0 5
37008: PUSH
37009: LD_INT 2
37011: ARRAY
37012: PPUSH
37013: CALL 35968 0 3
37017: NOT
37018: IFFALSE 37024
// exit ;
37020: POP
37021: POP
37022: GO 37028
37024: GO 36987
37026: POP
37027: POP
// end ;
37028: LD_VAR 0 4
37032: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
37033: LD_INT 0
37035: PPUSH
37036: PPUSH
37037: PPUSH
37038: PPUSH
37039: PPUSH
37040: PPUSH
37041: PPUSH
// if not GetClass ( unit ) = class_sniper then
37042: LD_VAR 0 1
37046: PPUSH
37047: CALL_OW 257
37051: PUSH
37052: LD_INT 5
37054: EQUAL
37055: NOT
37056: IFFALSE 37060
// exit ;
37058: GO 37448
// dist := 8 ;
37060: LD_ADDR_VAR 0 5
37064: PUSH
37065: LD_INT 8
37067: ST_TO_ADDR
// viewRange := 12 ;
37068: LD_ADDR_VAR 0 7
37072: PUSH
37073: LD_INT 12
37075: ST_TO_ADDR
// side := GetSide ( unit ) ;
37076: LD_ADDR_VAR 0 6
37080: PUSH
37081: LD_VAR 0 1
37085: PPUSH
37086: CALL_OW 255
37090: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37091: LD_INT 61
37093: PPUSH
37094: LD_VAR 0 6
37098: PPUSH
37099: CALL_OW 321
37103: PUSH
37104: LD_INT 2
37106: EQUAL
37107: IFFALSE 37117
// viewRange := 16 ;
37109: LD_ADDR_VAR 0 7
37113: PUSH
37114: LD_INT 16
37116: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
37117: LD_VAR 0 1
37121: PPUSH
37122: LD_VAR 0 2
37126: PPUSH
37127: LD_VAR 0 3
37131: PPUSH
37132: CALL_OW 297
37136: PUSH
37137: LD_VAR 0 5
37141: GREATER
37142: IFFALSE 37221
// begin ComMoveXY ( unit , x , y ) ;
37144: LD_VAR 0 1
37148: PPUSH
37149: LD_VAR 0 2
37153: PPUSH
37154: LD_VAR 0 3
37158: PPUSH
37159: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37163: LD_INT 35
37165: PPUSH
37166: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37170: LD_VAR 0 1
37174: PPUSH
37175: LD_VAR 0 2
37179: PPUSH
37180: LD_VAR 0 3
37184: PPUSH
37185: CALL 72996 0 3
37189: NOT
37190: IFFALSE 37194
// exit ;
37192: GO 37448
// until GetDistUnitXY ( unit , x , y ) < dist ;
37194: LD_VAR 0 1
37198: PPUSH
37199: LD_VAR 0 2
37203: PPUSH
37204: LD_VAR 0 3
37208: PPUSH
37209: CALL_OW 297
37213: PUSH
37214: LD_VAR 0 5
37218: LESS
37219: IFFALSE 37163
// end ; ComTurnXY ( unit , x , y ) ;
37221: LD_VAR 0 1
37225: PPUSH
37226: LD_VAR 0 2
37230: PPUSH
37231: LD_VAR 0 3
37235: PPUSH
37236: CALL_OW 118
// wait ( 5 ) ;
37240: LD_INT 5
37242: PPUSH
37243: CALL_OW 67
// _d := GetDir ( unit ) ;
37247: LD_ADDR_VAR 0 10
37251: PUSH
37252: LD_VAR 0 1
37256: PPUSH
37257: CALL_OW 254
37261: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
37262: LD_ADDR_VAR 0 8
37266: PUSH
37267: LD_VAR 0 1
37271: PPUSH
37272: CALL_OW 250
37276: PPUSH
37277: LD_VAR 0 10
37281: PPUSH
37282: LD_VAR 0 5
37286: PPUSH
37287: CALL_OW 272
37291: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
37292: LD_ADDR_VAR 0 9
37296: PUSH
37297: LD_VAR 0 1
37301: PPUSH
37302: CALL_OW 251
37306: PPUSH
37307: LD_VAR 0 10
37311: PPUSH
37312: LD_VAR 0 5
37316: PPUSH
37317: CALL_OW 273
37321: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37322: LD_VAR 0 8
37326: PPUSH
37327: LD_VAR 0 9
37331: PPUSH
37332: CALL_OW 488
37336: NOT
37337: IFFALSE 37341
// exit ;
37339: GO 37448
// ComAnimCustom ( unit , 1 ) ;
37341: LD_VAR 0 1
37345: PPUSH
37346: LD_INT 1
37348: PPUSH
37349: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37353: LD_VAR 0 8
37357: PPUSH
37358: LD_VAR 0 9
37362: PPUSH
37363: LD_VAR 0 6
37367: PPUSH
37368: LD_VAR 0 7
37372: PPUSH
37373: CALL_OW 330
// repeat wait ( 1 ) ;
37377: LD_INT 1
37379: PPUSH
37380: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
37384: LD_VAR 0 1
37388: PPUSH
37389: CALL_OW 316
37393: PUSH
37394: LD_VAR 0 1
37398: PPUSH
37399: CALL_OW 314
37403: OR
37404: PUSH
37405: LD_VAR 0 1
37409: PPUSH
37410: CALL_OW 302
37414: NOT
37415: OR
37416: PUSH
37417: LD_VAR 0 1
37421: PPUSH
37422: CALL_OW 301
37426: OR
37427: IFFALSE 37377
// RemoveSeeing ( _x , _y , side ) ;
37429: LD_VAR 0 8
37433: PPUSH
37434: LD_VAR 0 9
37438: PPUSH
37439: LD_VAR 0 6
37443: PPUSH
37444: CALL_OW 331
// end ; end_of_file
37448: LD_VAR 0 4
37452: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37453: LD_INT 0
37455: PPUSH
37456: PPUSH
// if exist_mode then
37457: LD_VAR 0 2
37461: IFFALSE 37486
// unit := CreateCharacter ( prefix & ident ) else
37463: LD_ADDR_VAR 0 5
37467: PUSH
37468: LD_VAR 0 3
37472: PUSH
37473: LD_VAR 0 1
37477: STR
37478: PPUSH
37479: CALL_OW 34
37483: ST_TO_ADDR
37484: GO 37501
// unit := NewCharacter ( ident ) ;
37486: LD_ADDR_VAR 0 5
37490: PUSH
37491: LD_VAR 0 1
37495: PPUSH
37496: CALL_OW 25
37500: ST_TO_ADDR
// result := unit ;
37501: LD_ADDR_VAR 0 4
37505: PUSH
37506: LD_VAR 0 5
37510: ST_TO_ADDR
// end ;
37511: LD_VAR 0 4
37515: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37516: LD_INT 0
37518: PPUSH
37519: PPUSH
// if not side or not nation then
37520: LD_VAR 0 1
37524: NOT
37525: PUSH
37526: LD_VAR 0 2
37530: NOT
37531: OR
37532: IFFALSE 37536
// exit ;
37534: GO 38304
// case nation of nation_american :
37536: LD_VAR 0 2
37540: PUSH
37541: LD_INT 1
37543: DOUBLE
37544: EQUAL
37545: IFTRUE 37549
37547: GO 37763
37549: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
37550: LD_ADDR_VAR 0 4
37554: PUSH
37555: LD_INT 35
37557: PUSH
37558: LD_INT 45
37560: PUSH
37561: LD_INT 46
37563: PUSH
37564: LD_INT 47
37566: PUSH
37567: LD_INT 82
37569: PUSH
37570: LD_INT 83
37572: PUSH
37573: LD_INT 84
37575: PUSH
37576: LD_INT 85
37578: PUSH
37579: LD_INT 86
37581: PUSH
37582: LD_INT 1
37584: PUSH
37585: LD_INT 2
37587: PUSH
37588: LD_INT 6
37590: PUSH
37591: LD_INT 15
37593: PUSH
37594: LD_INT 16
37596: PUSH
37597: LD_INT 7
37599: PUSH
37600: LD_INT 12
37602: PUSH
37603: LD_INT 13
37605: PUSH
37606: LD_INT 10
37608: PUSH
37609: LD_INT 14
37611: PUSH
37612: LD_INT 20
37614: PUSH
37615: LD_INT 21
37617: PUSH
37618: LD_INT 22
37620: PUSH
37621: LD_INT 25
37623: PUSH
37624: LD_INT 32
37626: PUSH
37627: LD_INT 27
37629: PUSH
37630: LD_INT 36
37632: PUSH
37633: LD_INT 69
37635: PUSH
37636: LD_INT 39
37638: PUSH
37639: LD_INT 34
37641: PUSH
37642: LD_INT 40
37644: PUSH
37645: LD_INT 48
37647: PUSH
37648: LD_INT 49
37650: PUSH
37651: LD_INT 50
37653: PUSH
37654: LD_INT 51
37656: PUSH
37657: LD_INT 52
37659: PUSH
37660: LD_INT 53
37662: PUSH
37663: LD_INT 54
37665: PUSH
37666: LD_INT 55
37668: PUSH
37669: LD_INT 56
37671: PUSH
37672: LD_INT 57
37674: PUSH
37675: LD_INT 58
37677: PUSH
37678: LD_INT 59
37680: PUSH
37681: LD_INT 60
37683: PUSH
37684: LD_INT 61
37686: PUSH
37687: LD_INT 62
37689: PUSH
37690: LD_INT 80
37692: PUSH
37693: LD_INT 82
37695: PUSH
37696: LD_INT 83
37698: PUSH
37699: LD_INT 84
37701: PUSH
37702: LD_INT 85
37704: PUSH
37705: LD_INT 86
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: LIST
37747: LIST
37748: LIST
37749: LIST
37750: LIST
37751: LIST
37752: LIST
37753: LIST
37754: LIST
37755: LIST
37756: LIST
37757: LIST
37758: LIST
37759: LIST
37760: ST_TO_ADDR
37761: GO 38228
37763: LD_INT 2
37765: DOUBLE
37766: EQUAL
37767: IFTRUE 37771
37769: GO 37997
37771: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
37772: LD_ADDR_VAR 0 4
37776: PUSH
37777: LD_INT 35
37779: PUSH
37780: LD_INT 45
37782: PUSH
37783: LD_INT 46
37785: PUSH
37786: LD_INT 47
37788: PUSH
37789: LD_INT 82
37791: PUSH
37792: LD_INT 83
37794: PUSH
37795: LD_INT 84
37797: PUSH
37798: LD_INT 85
37800: PUSH
37801: LD_INT 87
37803: PUSH
37804: LD_INT 70
37806: PUSH
37807: LD_INT 1
37809: PUSH
37810: LD_INT 11
37812: PUSH
37813: LD_INT 3
37815: PUSH
37816: LD_INT 4
37818: PUSH
37819: LD_INT 5
37821: PUSH
37822: LD_INT 6
37824: PUSH
37825: LD_INT 15
37827: PUSH
37828: LD_INT 18
37830: PUSH
37831: LD_INT 7
37833: PUSH
37834: LD_INT 17
37836: PUSH
37837: LD_INT 8
37839: PUSH
37840: LD_INT 20
37842: PUSH
37843: LD_INT 21
37845: PUSH
37846: LD_INT 22
37848: PUSH
37849: LD_INT 72
37851: PUSH
37852: LD_INT 26
37854: PUSH
37855: LD_INT 69
37857: PUSH
37858: LD_INT 39
37860: PUSH
37861: LD_INT 40
37863: PUSH
37864: LD_INT 41
37866: PUSH
37867: LD_INT 42
37869: PUSH
37870: LD_INT 43
37872: PUSH
37873: LD_INT 48
37875: PUSH
37876: LD_INT 49
37878: PUSH
37879: LD_INT 50
37881: PUSH
37882: LD_INT 51
37884: PUSH
37885: LD_INT 52
37887: PUSH
37888: LD_INT 53
37890: PUSH
37891: LD_INT 54
37893: PUSH
37894: LD_INT 55
37896: PUSH
37897: LD_INT 56
37899: PUSH
37900: LD_INT 60
37902: PUSH
37903: LD_INT 61
37905: PUSH
37906: LD_INT 62
37908: PUSH
37909: LD_INT 66
37911: PUSH
37912: LD_INT 67
37914: PUSH
37915: LD_INT 68
37917: PUSH
37918: LD_INT 81
37920: PUSH
37921: LD_INT 82
37923: PUSH
37924: LD_INT 83
37926: PUSH
37927: LD_INT 84
37929: PUSH
37930: LD_INT 85
37932: PUSH
37933: LD_INT 87
37935: PUSH
37936: LD_INT 88
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: LIST
37963: LIST
37964: LIST
37965: LIST
37966: LIST
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: LIST
37972: LIST
37973: LIST
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: LIST
37979: LIST
37980: LIST
37981: LIST
37982: LIST
37983: LIST
37984: LIST
37985: LIST
37986: LIST
37987: LIST
37988: LIST
37989: LIST
37990: LIST
37991: LIST
37992: LIST
37993: LIST
37994: ST_TO_ADDR
37995: GO 38228
37997: LD_INT 3
37999: DOUBLE
38000: EQUAL
38001: IFTRUE 38005
38003: GO 38227
38005: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
38006: LD_ADDR_VAR 0 4
38010: PUSH
38011: LD_INT 46
38013: PUSH
38014: LD_INT 47
38016: PUSH
38017: LD_INT 1
38019: PUSH
38020: LD_INT 2
38022: PUSH
38023: LD_INT 82
38025: PUSH
38026: LD_INT 83
38028: PUSH
38029: LD_INT 84
38031: PUSH
38032: LD_INT 85
38034: PUSH
38035: LD_INT 86
38037: PUSH
38038: LD_INT 11
38040: PUSH
38041: LD_INT 9
38043: PUSH
38044: LD_INT 20
38046: PUSH
38047: LD_INT 19
38049: PUSH
38050: LD_INT 21
38052: PUSH
38053: LD_INT 24
38055: PUSH
38056: LD_INT 22
38058: PUSH
38059: LD_INT 25
38061: PUSH
38062: LD_INT 28
38064: PUSH
38065: LD_INT 29
38067: PUSH
38068: LD_INT 30
38070: PUSH
38071: LD_INT 31
38073: PUSH
38074: LD_INT 37
38076: PUSH
38077: LD_INT 38
38079: PUSH
38080: LD_INT 32
38082: PUSH
38083: LD_INT 27
38085: PUSH
38086: LD_INT 33
38088: PUSH
38089: LD_INT 69
38091: PUSH
38092: LD_INT 39
38094: PUSH
38095: LD_INT 34
38097: PUSH
38098: LD_INT 40
38100: PUSH
38101: LD_INT 71
38103: PUSH
38104: LD_INT 23
38106: PUSH
38107: LD_INT 44
38109: PUSH
38110: LD_INT 48
38112: PUSH
38113: LD_INT 49
38115: PUSH
38116: LD_INT 50
38118: PUSH
38119: LD_INT 51
38121: PUSH
38122: LD_INT 52
38124: PUSH
38125: LD_INT 53
38127: PUSH
38128: LD_INT 54
38130: PUSH
38131: LD_INT 55
38133: PUSH
38134: LD_INT 56
38136: PUSH
38137: LD_INT 57
38139: PUSH
38140: LD_INT 58
38142: PUSH
38143: LD_INT 59
38145: PUSH
38146: LD_INT 63
38148: PUSH
38149: LD_INT 64
38151: PUSH
38152: LD_INT 65
38154: PUSH
38155: LD_INT 82
38157: PUSH
38158: LD_INT 83
38160: PUSH
38161: LD_INT 84
38163: PUSH
38164: LD_INT 85
38166: PUSH
38167: LD_INT 86
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: ST_TO_ADDR
38225: GO 38228
38227: POP
// if state > - 1 and state < 3 then
38228: LD_VAR 0 3
38232: PUSH
38233: LD_INT 1
38235: NEG
38236: GREATER
38237: PUSH
38238: LD_VAR 0 3
38242: PUSH
38243: LD_INT 3
38245: LESS
38246: AND
38247: IFFALSE 38304
// for i in result do
38249: LD_ADDR_VAR 0 5
38253: PUSH
38254: LD_VAR 0 4
38258: PUSH
38259: FOR_IN
38260: IFFALSE 38302
// if GetTech ( i , side ) <> state then
38262: LD_VAR 0 5
38266: PPUSH
38267: LD_VAR 0 1
38271: PPUSH
38272: CALL_OW 321
38276: PUSH
38277: LD_VAR 0 3
38281: NONEQUAL
38282: IFFALSE 38300
// result := result diff i ;
38284: LD_ADDR_VAR 0 4
38288: PUSH
38289: LD_VAR 0 4
38293: PUSH
38294: LD_VAR 0 5
38298: DIFF
38299: ST_TO_ADDR
38300: GO 38259
38302: POP
38303: POP
// end ;
38304: LD_VAR 0 4
38308: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38309: LD_INT 0
38311: PPUSH
38312: PPUSH
38313: PPUSH
// result := true ;
38314: LD_ADDR_VAR 0 3
38318: PUSH
38319: LD_INT 1
38321: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38322: LD_ADDR_VAR 0 5
38326: PUSH
38327: LD_VAR 0 2
38331: PPUSH
38332: CALL_OW 480
38336: ST_TO_ADDR
// if not tmp then
38337: LD_VAR 0 5
38341: NOT
38342: IFFALSE 38346
// exit ;
38344: GO 38395
// for i in tmp do
38346: LD_ADDR_VAR 0 4
38350: PUSH
38351: LD_VAR 0 5
38355: PUSH
38356: FOR_IN
38357: IFFALSE 38393
// if GetTech ( i , side ) <> state_researched then
38359: LD_VAR 0 4
38363: PPUSH
38364: LD_VAR 0 1
38368: PPUSH
38369: CALL_OW 321
38373: PUSH
38374: LD_INT 2
38376: NONEQUAL
38377: IFFALSE 38391
// begin result := false ;
38379: LD_ADDR_VAR 0 3
38383: PUSH
38384: LD_INT 0
38386: ST_TO_ADDR
// exit ;
38387: POP
38388: POP
38389: GO 38395
// end ;
38391: GO 38356
38393: POP
38394: POP
// end ;
38395: LD_VAR 0 3
38399: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38400: LD_INT 0
38402: PPUSH
38403: PPUSH
38404: PPUSH
38405: PPUSH
38406: PPUSH
38407: PPUSH
38408: PPUSH
38409: PPUSH
38410: PPUSH
38411: PPUSH
38412: PPUSH
38413: PPUSH
38414: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38415: LD_VAR 0 1
38419: NOT
38420: PUSH
38421: LD_VAR 0 1
38425: PPUSH
38426: CALL_OW 257
38430: PUSH
38431: LD_INT 9
38433: NONEQUAL
38434: OR
38435: IFFALSE 38439
// exit ;
38437: GO 39012
// side := GetSide ( unit ) ;
38439: LD_ADDR_VAR 0 9
38443: PUSH
38444: LD_VAR 0 1
38448: PPUSH
38449: CALL_OW 255
38453: ST_TO_ADDR
// tech_space := tech_spacanom ;
38454: LD_ADDR_VAR 0 12
38458: PUSH
38459: LD_INT 29
38461: ST_TO_ADDR
// tech_time := tech_taurad ;
38462: LD_ADDR_VAR 0 13
38466: PUSH
38467: LD_INT 28
38469: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38470: LD_ADDR_VAR 0 11
38474: PUSH
38475: LD_VAR 0 1
38479: PPUSH
38480: CALL_OW 310
38484: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38485: LD_VAR 0 11
38489: PPUSH
38490: CALL_OW 247
38494: PUSH
38495: LD_INT 2
38497: EQUAL
38498: IFFALSE 38502
// exit ;
38500: GO 39012
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38502: LD_ADDR_VAR 0 8
38506: PUSH
38507: LD_INT 81
38509: PUSH
38510: LD_VAR 0 9
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 3
38521: PUSH
38522: LD_INT 21
38524: PUSH
38525: LD_INT 3
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PPUSH
38540: CALL_OW 69
38544: ST_TO_ADDR
// if not tmp then
38545: LD_VAR 0 8
38549: NOT
38550: IFFALSE 38554
// exit ;
38552: GO 39012
// if in_unit then
38554: LD_VAR 0 11
38558: IFFALSE 38582
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38560: LD_ADDR_VAR 0 10
38564: PUSH
38565: LD_VAR 0 8
38569: PPUSH
38570: LD_VAR 0 11
38574: PPUSH
38575: CALL_OW 74
38579: ST_TO_ADDR
38580: GO 38602
// enemy := NearestUnitToUnit ( tmp , unit ) ;
38582: LD_ADDR_VAR 0 10
38586: PUSH
38587: LD_VAR 0 8
38591: PPUSH
38592: LD_VAR 0 1
38596: PPUSH
38597: CALL_OW 74
38601: ST_TO_ADDR
// if not enemy then
38602: LD_VAR 0 10
38606: NOT
38607: IFFALSE 38611
// exit ;
38609: GO 39012
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
38611: LD_VAR 0 11
38615: PUSH
38616: LD_VAR 0 11
38620: PPUSH
38621: LD_VAR 0 10
38625: PPUSH
38626: CALL_OW 296
38630: PUSH
38631: LD_INT 13
38633: GREATER
38634: AND
38635: PUSH
38636: LD_VAR 0 1
38640: PPUSH
38641: LD_VAR 0 10
38645: PPUSH
38646: CALL_OW 296
38650: PUSH
38651: LD_INT 12
38653: GREATER
38654: OR
38655: IFFALSE 38659
// exit ;
38657: GO 39012
// missile := [ 1 ] ;
38659: LD_ADDR_VAR 0 14
38663: PUSH
38664: LD_INT 1
38666: PUSH
38667: EMPTY
38668: LIST
38669: ST_TO_ADDR
// if Researched ( side , tech_space ) then
38670: LD_VAR 0 9
38674: PPUSH
38675: LD_VAR 0 12
38679: PPUSH
38680: CALL_OW 325
38684: IFFALSE 38713
// missile := Insert ( missile , missile + 1 , 2 ) ;
38686: LD_ADDR_VAR 0 14
38690: PUSH
38691: LD_VAR 0 14
38695: PPUSH
38696: LD_VAR 0 14
38700: PUSH
38701: LD_INT 1
38703: PLUS
38704: PPUSH
38705: LD_INT 2
38707: PPUSH
38708: CALL_OW 2
38712: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38713: LD_VAR 0 9
38717: PPUSH
38718: LD_VAR 0 13
38722: PPUSH
38723: CALL_OW 325
38727: PUSH
38728: LD_VAR 0 10
38732: PPUSH
38733: CALL_OW 255
38737: PPUSH
38738: LD_VAR 0 13
38742: PPUSH
38743: CALL_OW 325
38747: NOT
38748: AND
38749: IFFALSE 38778
// missile := Insert ( missile , missile + 1 , 3 ) ;
38751: LD_ADDR_VAR 0 14
38755: PUSH
38756: LD_VAR 0 14
38760: PPUSH
38761: LD_VAR 0 14
38765: PUSH
38766: LD_INT 1
38768: PLUS
38769: PPUSH
38770: LD_INT 3
38772: PPUSH
38773: CALL_OW 2
38777: ST_TO_ADDR
// if missile < 2 then
38778: LD_VAR 0 14
38782: PUSH
38783: LD_INT 2
38785: LESS
38786: IFFALSE 38790
// exit ;
38788: GO 39012
// x := GetX ( enemy ) ;
38790: LD_ADDR_VAR 0 4
38794: PUSH
38795: LD_VAR 0 10
38799: PPUSH
38800: CALL_OW 250
38804: ST_TO_ADDR
// y := GetY ( enemy ) ;
38805: LD_ADDR_VAR 0 5
38809: PUSH
38810: LD_VAR 0 10
38814: PPUSH
38815: CALL_OW 251
38819: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38820: LD_ADDR_VAR 0 6
38824: PUSH
38825: LD_VAR 0 4
38829: PUSH
38830: LD_INT 1
38832: NEG
38833: PPUSH
38834: LD_INT 1
38836: PPUSH
38837: CALL_OW 12
38841: PLUS
38842: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38843: LD_ADDR_VAR 0 7
38847: PUSH
38848: LD_VAR 0 5
38852: PUSH
38853: LD_INT 1
38855: NEG
38856: PPUSH
38857: LD_INT 1
38859: PPUSH
38860: CALL_OW 12
38864: PLUS
38865: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38866: LD_VAR 0 6
38870: PPUSH
38871: LD_VAR 0 7
38875: PPUSH
38876: CALL_OW 488
38880: NOT
38881: IFFALSE 38903
// begin _x := x ;
38883: LD_ADDR_VAR 0 6
38887: PUSH
38888: LD_VAR 0 4
38892: ST_TO_ADDR
// _y := y ;
38893: LD_ADDR_VAR 0 7
38897: PUSH
38898: LD_VAR 0 5
38902: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38903: LD_ADDR_VAR 0 3
38907: PUSH
38908: LD_INT 1
38910: PPUSH
38911: LD_VAR 0 14
38915: PPUSH
38916: CALL_OW 12
38920: ST_TO_ADDR
// case i of 1 :
38921: LD_VAR 0 3
38925: PUSH
38926: LD_INT 1
38928: DOUBLE
38929: EQUAL
38930: IFTRUE 38934
38932: GO 38951
38934: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38935: LD_VAR 0 1
38939: PPUSH
38940: LD_VAR 0 10
38944: PPUSH
38945: CALL_OW 115
38949: GO 39012
38951: LD_INT 2
38953: DOUBLE
38954: EQUAL
38955: IFTRUE 38959
38957: GO 38981
38959: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38960: LD_VAR 0 1
38964: PPUSH
38965: LD_VAR 0 6
38969: PPUSH
38970: LD_VAR 0 7
38974: PPUSH
38975: CALL_OW 153
38979: GO 39012
38981: LD_INT 3
38983: DOUBLE
38984: EQUAL
38985: IFTRUE 38989
38987: GO 39011
38989: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38990: LD_VAR 0 1
38994: PPUSH
38995: LD_VAR 0 6
38999: PPUSH
39000: LD_VAR 0 7
39004: PPUSH
39005: CALL_OW 154
39009: GO 39012
39011: POP
// end ;
39012: LD_VAR 0 2
39016: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39017: LD_INT 0
39019: PPUSH
39020: PPUSH
39021: PPUSH
39022: PPUSH
39023: PPUSH
39024: PPUSH
// if not unit or not building then
39025: LD_VAR 0 1
39029: NOT
39030: PUSH
39031: LD_VAR 0 2
39035: NOT
39036: OR
39037: IFFALSE 39041
// exit ;
39039: GO 39199
// x := GetX ( building ) ;
39041: LD_ADDR_VAR 0 5
39045: PUSH
39046: LD_VAR 0 2
39050: PPUSH
39051: CALL_OW 250
39055: ST_TO_ADDR
// y := GetY ( building ) ;
39056: LD_ADDR_VAR 0 6
39060: PUSH
39061: LD_VAR 0 2
39065: PPUSH
39066: CALL_OW 251
39070: ST_TO_ADDR
// for i = 0 to 5 do
39071: LD_ADDR_VAR 0 4
39075: PUSH
39076: DOUBLE
39077: LD_INT 0
39079: DEC
39080: ST_TO_ADDR
39081: LD_INT 5
39083: PUSH
39084: FOR_TO
39085: IFFALSE 39197
// begin _x := ShiftX ( x , i , 3 ) ;
39087: LD_ADDR_VAR 0 7
39091: PUSH
39092: LD_VAR 0 5
39096: PPUSH
39097: LD_VAR 0 4
39101: PPUSH
39102: LD_INT 3
39104: PPUSH
39105: CALL_OW 272
39109: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39110: LD_ADDR_VAR 0 8
39114: PUSH
39115: LD_VAR 0 6
39119: PPUSH
39120: LD_VAR 0 4
39124: PPUSH
39125: LD_INT 3
39127: PPUSH
39128: CALL_OW 273
39132: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39133: LD_VAR 0 7
39137: PPUSH
39138: LD_VAR 0 8
39142: PPUSH
39143: CALL_OW 488
39147: NOT
39148: IFFALSE 39152
// continue ;
39150: GO 39084
// if HexInfo ( _x , _y ) = 0 then
39152: LD_VAR 0 7
39156: PPUSH
39157: LD_VAR 0 8
39161: PPUSH
39162: CALL_OW 428
39166: PUSH
39167: LD_INT 0
39169: EQUAL
39170: IFFALSE 39195
// begin ComMoveXY ( unit , _x , _y ) ;
39172: LD_VAR 0 1
39176: PPUSH
39177: LD_VAR 0 7
39181: PPUSH
39182: LD_VAR 0 8
39186: PPUSH
39187: CALL_OW 111
// exit ;
39191: POP
39192: POP
39193: GO 39199
// end ; end ;
39195: GO 39084
39197: POP
39198: POP
// end ;
39199: LD_VAR 0 3
39203: RET
// export function ScanBase ( side , base_area ) ; begin
39204: LD_INT 0
39206: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39207: LD_ADDR_VAR 0 3
39211: PUSH
39212: LD_VAR 0 2
39216: PPUSH
39217: LD_INT 81
39219: PUSH
39220: LD_VAR 0 1
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PPUSH
39229: CALL_OW 70
39233: ST_TO_ADDR
// end ;
39234: LD_VAR 0 3
39238: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39239: LD_INT 0
39241: PPUSH
39242: PPUSH
39243: PPUSH
39244: PPUSH
// result := false ;
39245: LD_ADDR_VAR 0 2
39249: PUSH
39250: LD_INT 0
39252: ST_TO_ADDR
// side := GetSide ( unit ) ;
39253: LD_ADDR_VAR 0 3
39257: PUSH
39258: LD_VAR 0 1
39262: PPUSH
39263: CALL_OW 255
39267: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39268: LD_ADDR_VAR 0 4
39272: PUSH
39273: LD_VAR 0 1
39277: PPUSH
39278: CALL_OW 248
39282: ST_TO_ADDR
// case nat of 1 :
39283: LD_VAR 0 4
39287: PUSH
39288: LD_INT 1
39290: DOUBLE
39291: EQUAL
39292: IFTRUE 39296
39294: GO 39307
39296: POP
// tech := tech_lassight ; 2 :
39297: LD_ADDR_VAR 0 5
39301: PUSH
39302: LD_INT 12
39304: ST_TO_ADDR
39305: GO 39346
39307: LD_INT 2
39309: DOUBLE
39310: EQUAL
39311: IFTRUE 39315
39313: GO 39326
39315: POP
// tech := tech_mortar ; 3 :
39316: LD_ADDR_VAR 0 5
39320: PUSH
39321: LD_INT 41
39323: ST_TO_ADDR
39324: GO 39346
39326: LD_INT 3
39328: DOUBLE
39329: EQUAL
39330: IFTRUE 39334
39332: GO 39345
39334: POP
// tech := tech_bazooka ; end ;
39335: LD_ADDR_VAR 0 5
39339: PUSH
39340: LD_INT 44
39342: ST_TO_ADDR
39343: GO 39346
39345: POP
// if Researched ( side , tech ) then
39346: LD_VAR 0 3
39350: PPUSH
39351: LD_VAR 0 5
39355: PPUSH
39356: CALL_OW 325
39360: IFFALSE 39387
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39362: LD_ADDR_VAR 0 2
39366: PUSH
39367: LD_INT 5
39369: PUSH
39370: LD_INT 8
39372: PUSH
39373: LD_INT 9
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: LIST
39380: PUSH
39381: LD_VAR 0 4
39385: ARRAY
39386: ST_TO_ADDR
// end ;
39387: LD_VAR 0 2
39391: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39392: LD_INT 0
39394: PPUSH
39395: PPUSH
39396: PPUSH
// if not mines then
39397: LD_VAR 0 2
39401: NOT
39402: IFFALSE 39406
// exit ;
39404: GO 39550
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39406: LD_ADDR_VAR 0 5
39410: PUSH
39411: LD_INT 81
39413: PUSH
39414: LD_VAR 0 1
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 3
39425: PUSH
39426: LD_INT 21
39428: PUSH
39429: LD_INT 3
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PPUSH
39444: CALL_OW 69
39448: ST_TO_ADDR
// for i in mines do
39449: LD_ADDR_VAR 0 4
39453: PUSH
39454: LD_VAR 0 2
39458: PUSH
39459: FOR_IN
39460: IFFALSE 39548
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39462: LD_VAR 0 4
39466: PUSH
39467: LD_INT 1
39469: ARRAY
39470: PPUSH
39471: LD_VAR 0 4
39475: PUSH
39476: LD_INT 2
39478: ARRAY
39479: PPUSH
39480: CALL_OW 458
39484: NOT
39485: IFFALSE 39489
// continue ;
39487: GO 39459
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
39489: LD_VAR 0 4
39493: PUSH
39494: LD_INT 1
39496: ARRAY
39497: PPUSH
39498: LD_VAR 0 4
39502: PUSH
39503: LD_INT 2
39505: ARRAY
39506: PPUSH
39507: CALL_OW 428
39511: PUSH
39512: LD_VAR 0 5
39516: IN
39517: IFFALSE 39546
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39519: LD_VAR 0 4
39523: PUSH
39524: LD_INT 1
39526: ARRAY
39527: PPUSH
39528: LD_VAR 0 4
39532: PUSH
39533: LD_INT 2
39535: ARRAY
39536: PPUSH
39537: LD_VAR 0 1
39541: PPUSH
39542: CALL_OW 456
// end ;
39546: GO 39459
39548: POP
39549: POP
// end ;
39550: LD_VAR 0 3
39554: RET
// export function Count ( array ) ; var i ; begin
39555: LD_INT 0
39557: PPUSH
39558: PPUSH
// result := 0 ;
39559: LD_ADDR_VAR 0 2
39563: PUSH
39564: LD_INT 0
39566: ST_TO_ADDR
// for i in array do
39567: LD_ADDR_VAR 0 3
39571: PUSH
39572: LD_VAR 0 1
39576: PUSH
39577: FOR_IN
39578: IFFALSE 39602
// if i then
39580: LD_VAR 0 3
39584: IFFALSE 39600
// result := result + 1 ;
39586: LD_ADDR_VAR 0 2
39590: PUSH
39591: LD_VAR 0 2
39595: PUSH
39596: LD_INT 1
39598: PLUS
39599: ST_TO_ADDR
39600: GO 39577
39602: POP
39603: POP
// end ;
39604: LD_VAR 0 2
39608: RET
// export function IsEmpty ( building ) ; begin
39609: LD_INT 0
39611: PPUSH
// if not building then
39612: LD_VAR 0 1
39616: NOT
39617: IFFALSE 39621
// exit ;
39619: GO 39664
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
39621: LD_ADDR_VAR 0 2
39625: PUSH
39626: LD_VAR 0 1
39630: PUSH
39631: LD_INT 22
39633: PUSH
39634: LD_VAR 0 1
39638: PPUSH
39639: CALL_OW 255
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 58
39650: PUSH
39651: EMPTY
39652: LIST
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PPUSH
39658: CALL_OW 69
39662: IN
39663: ST_TO_ADDR
// end ;
39664: LD_VAR 0 2
39668: RET
// export function IsNotFull ( building ) ; begin
39669: LD_INT 0
39671: PPUSH
// if not building then
39672: LD_VAR 0 1
39676: NOT
39677: IFFALSE 39681
// exit ;
39679: GO 39700
// result := UnitsInside ( building ) < 6 ;
39681: LD_ADDR_VAR 0 2
39685: PUSH
39686: LD_VAR 0 1
39690: PPUSH
39691: CALL_OW 313
39695: PUSH
39696: LD_INT 6
39698: LESS
39699: ST_TO_ADDR
// end ;
39700: LD_VAR 0 2
39704: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
39705: LD_INT 0
39707: PPUSH
39708: PPUSH
39709: PPUSH
39710: PPUSH
// tmp := [ ] ;
39711: LD_ADDR_VAR 0 3
39715: PUSH
39716: EMPTY
39717: ST_TO_ADDR
// list := [ ] ;
39718: LD_ADDR_VAR 0 5
39722: PUSH
39723: EMPTY
39724: ST_TO_ADDR
// for i = 16 to 25 do
39725: LD_ADDR_VAR 0 4
39729: PUSH
39730: DOUBLE
39731: LD_INT 16
39733: DEC
39734: ST_TO_ADDR
39735: LD_INT 25
39737: PUSH
39738: FOR_TO
39739: IFFALSE 39812
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39741: LD_ADDR_VAR 0 3
39745: PUSH
39746: LD_VAR 0 3
39750: PUSH
39751: LD_INT 22
39753: PUSH
39754: LD_VAR 0 1
39758: PPUSH
39759: CALL_OW 255
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 91
39770: PUSH
39771: LD_VAR 0 1
39775: PUSH
39776: LD_INT 6
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 30
39786: PUSH
39787: LD_VAR 0 4
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: LIST
39800: PUSH
39801: EMPTY
39802: LIST
39803: PPUSH
39804: CALL_OW 69
39808: ADD
39809: ST_TO_ADDR
39810: GO 39738
39812: POP
39813: POP
// for i = 1 to tmp do
39814: LD_ADDR_VAR 0 4
39818: PUSH
39819: DOUBLE
39820: LD_INT 1
39822: DEC
39823: ST_TO_ADDR
39824: LD_VAR 0 3
39828: PUSH
39829: FOR_TO
39830: IFFALSE 39918
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39832: LD_ADDR_VAR 0 5
39836: PUSH
39837: LD_VAR 0 5
39841: PUSH
39842: LD_VAR 0 3
39846: PUSH
39847: LD_VAR 0 4
39851: ARRAY
39852: PPUSH
39853: CALL_OW 266
39857: PUSH
39858: LD_VAR 0 3
39862: PUSH
39863: LD_VAR 0 4
39867: ARRAY
39868: PPUSH
39869: CALL_OW 250
39873: PUSH
39874: LD_VAR 0 3
39878: PUSH
39879: LD_VAR 0 4
39883: ARRAY
39884: PPUSH
39885: CALL_OW 251
39889: PUSH
39890: LD_VAR 0 3
39894: PUSH
39895: LD_VAR 0 4
39899: ARRAY
39900: PPUSH
39901: CALL_OW 254
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: LIST
39910: LIST
39911: PUSH
39912: EMPTY
39913: LIST
39914: ADD
39915: ST_TO_ADDR
39916: GO 39829
39918: POP
39919: POP
// result := list ;
39920: LD_ADDR_VAR 0 2
39924: PUSH
39925: LD_VAR 0 5
39929: ST_TO_ADDR
// end ;
39930: LD_VAR 0 2
39934: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39935: LD_INT 0
39937: PPUSH
39938: PPUSH
39939: PPUSH
39940: PPUSH
39941: PPUSH
39942: PPUSH
39943: PPUSH
// if not factory then
39944: LD_VAR 0 1
39948: NOT
39949: IFFALSE 39953
// exit ;
39951: GO 40546
// if control = control_apeman then
39953: LD_VAR 0 4
39957: PUSH
39958: LD_INT 5
39960: EQUAL
39961: IFFALSE 40070
// begin tmp := UnitsInside ( factory ) ;
39963: LD_ADDR_VAR 0 8
39967: PUSH
39968: LD_VAR 0 1
39972: PPUSH
39973: CALL_OW 313
39977: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39978: LD_VAR 0 8
39982: PPUSH
39983: LD_INT 25
39985: PUSH
39986: LD_INT 12
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PPUSH
39993: CALL_OW 72
39997: NOT
39998: IFFALSE 40008
// control := control_manual ;
40000: LD_ADDR_VAR 0 4
40004: PUSH
40005: LD_INT 1
40007: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40008: LD_ADDR_VAR 0 8
40012: PUSH
40013: LD_VAR 0 1
40017: PPUSH
40018: CALL 39705 0 1
40022: ST_TO_ADDR
// if tmp then
40023: LD_VAR 0 8
40027: IFFALSE 40070
// begin for i in tmp do
40029: LD_ADDR_VAR 0 7
40033: PUSH
40034: LD_VAR 0 8
40038: PUSH
40039: FOR_IN
40040: IFFALSE 40068
// if i [ 1 ] = b_ext_radio then
40042: LD_VAR 0 7
40046: PUSH
40047: LD_INT 1
40049: ARRAY
40050: PUSH
40051: LD_INT 22
40053: EQUAL
40054: IFFALSE 40066
// begin control := control_remote ;
40056: LD_ADDR_VAR 0 4
40060: PUSH
40061: LD_INT 2
40063: ST_TO_ADDR
// break ;
40064: GO 40068
// end ;
40066: GO 40039
40068: POP
40069: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40070: LD_VAR 0 1
40074: PPUSH
40075: LD_VAR 0 2
40079: PPUSH
40080: LD_VAR 0 3
40084: PPUSH
40085: LD_VAR 0 4
40089: PPUSH
40090: LD_VAR 0 5
40094: PPUSH
40095: CALL_OW 448
40099: IFFALSE 40134
// begin result := [ chassis , engine , control , weapon ] ;
40101: LD_ADDR_VAR 0 6
40105: PUSH
40106: LD_VAR 0 2
40110: PUSH
40111: LD_VAR 0 3
40115: PUSH
40116: LD_VAR 0 4
40120: PUSH
40121: LD_VAR 0 5
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: ST_TO_ADDR
// exit ;
40132: GO 40546
// end ; _chassis := AvailableChassisList ( factory ) ;
40134: LD_ADDR_VAR 0 9
40138: PUSH
40139: LD_VAR 0 1
40143: PPUSH
40144: CALL_OW 475
40148: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40149: LD_ADDR_VAR 0 11
40153: PUSH
40154: LD_VAR 0 1
40158: PPUSH
40159: CALL_OW 476
40163: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40164: LD_ADDR_VAR 0 12
40168: PUSH
40169: LD_VAR 0 1
40173: PPUSH
40174: CALL_OW 477
40178: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40179: LD_ADDR_VAR 0 10
40183: PUSH
40184: LD_VAR 0 1
40188: PPUSH
40189: CALL_OW 478
40193: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40194: LD_VAR 0 9
40198: NOT
40199: PUSH
40200: LD_VAR 0 11
40204: NOT
40205: OR
40206: PUSH
40207: LD_VAR 0 12
40211: NOT
40212: OR
40213: PUSH
40214: LD_VAR 0 10
40218: NOT
40219: OR
40220: IFFALSE 40255
// begin result := [ chassis , engine , control , weapon ] ;
40222: LD_ADDR_VAR 0 6
40226: PUSH
40227: LD_VAR 0 2
40231: PUSH
40232: LD_VAR 0 3
40236: PUSH
40237: LD_VAR 0 4
40241: PUSH
40242: LD_VAR 0 5
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: ST_TO_ADDR
// exit ;
40253: GO 40546
// end ; if not chassis in _chassis then
40255: LD_VAR 0 2
40259: PUSH
40260: LD_VAR 0 9
40264: IN
40265: NOT
40266: IFFALSE 40292
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40268: LD_ADDR_VAR 0 2
40272: PUSH
40273: LD_VAR 0 9
40277: PUSH
40278: LD_INT 1
40280: PPUSH
40281: LD_VAR 0 9
40285: PPUSH
40286: CALL_OW 12
40290: ARRAY
40291: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40292: LD_VAR 0 2
40296: PPUSH
40297: LD_VAR 0 3
40301: PPUSH
40302: CALL 40551 0 2
40306: NOT
40307: IFFALSE 40366
// repeat engine := _engine [ 1 ] ;
40309: LD_ADDR_VAR 0 3
40313: PUSH
40314: LD_VAR 0 11
40318: PUSH
40319: LD_INT 1
40321: ARRAY
40322: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40323: LD_ADDR_VAR 0 11
40327: PUSH
40328: LD_VAR 0 11
40332: PPUSH
40333: LD_INT 1
40335: PPUSH
40336: CALL_OW 3
40340: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40341: LD_VAR 0 2
40345: PPUSH
40346: LD_VAR 0 3
40350: PPUSH
40351: CALL 40551 0 2
40355: PUSH
40356: LD_VAR 0 11
40360: PUSH
40361: EMPTY
40362: EQUAL
40363: OR
40364: IFFALSE 40309
// if not control in _control then
40366: LD_VAR 0 4
40370: PUSH
40371: LD_VAR 0 12
40375: IN
40376: NOT
40377: IFFALSE 40403
// control := _control [ rand ( 1 , _control ) ] ;
40379: LD_ADDR_VAR 0 4
40383: PUSH
40384: LD_VAR 0 12
40388: PUSH
40389: LD_INT 1
40391: PPUSH
40392: LD_VAR 0 12
40396: PPUSH
40397: CALL_OW 12
40401: ARRAY
40402: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
40403: LD_VAR 0 2
40407: PPUSH
40408: LD_VAR 0 5
40412: PPUSH
40413: CALL 40771 0 2
40417: NOT
40418: IFFALSE 40477
// repeat weapon := _weapon [ 1 ] ;
40420: LD_ADDR_VAR 0 5
40424: PUSH
40425: LD_VAR 0 10
40429: PUSH
40430: LD_INT 1
40432: ARRAY
40433: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
40434: LD_ADDR_VAR 0 10
40438: PUSH
40439: LD_VAR 0 10
40443: PPUSH
40444: LD_INT 1
40446: PPUSH
40447: CALL_OW 3
40451: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
40452: LD_VAR 0 2
40456: PPUSH
40457: LD_VAR 0 5
40461: PPUSH
40462: CALL 40771 0 2
40466: PUSH
40467: LD_VAR 0 10
40471: PUSH
40472: EMPTY
40473: EQUAL
40474: OR
40475: IFFALSE 40420
// result := [ ] ;
40477: LD_ADDR_VAR 0 6
40481: PUSH
40482: EMPTY
40483: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40484: LD_VAR 0 1
40488: PPUSH
40489: LD_VAR 0 2
40493: PPUSH
40494: LD_VAR 0 3
40498: PPUSH
40499: LD_VAR 0 4
40503: PPUSH
40504: LD_VAR 0 5
40508: PPUSH
40509: CALL_OW 448
40513: IFFALSE 40546
// result := [ chassis , engine , control , weapon ] ;
40515: LD_ADDR_VAR 0 6
40519: PUSH
40520: LD_VAR 0 2
40524: PUSH
40525: LD_VAR 0 3
40529: PUSH
40530: LD_VAR 0 4
40534: PUSH
40535: LD_VAR 0 5
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: ST_TO_ADDR
// end ;
40546: LD_VAR 0 6
40550: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
40551: LD_INT 0
40553: PPUSH
// if not chassis or not engine then
40554: LD_VAR 0 1
40558: NOT
40559: PUSH
40560: LD_VAR 0 2
40564: NOT
40565: OR
40566: IFFALSE 40570
// exit ;
40568: GO 40766
// case engine of engine_solar :
40570: LD_VAR 0 2
40574: PUSH
40575: LD_INT 2
40577: DOUBLE
40578: EQUAL
40579: IFTRUE 40583
40581: GO 40621
40583: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
40584: LD_ADDR_VAR 0 3
40588: PUSH
40589: LD_INT 11
40591: PUSH
40592: LD_INT 12
40594: PUSH
40595: LD_INT 13
40597: PUSH
40598: LD_INT 14
40600: PUSH
40601: LD_INT 1
40603: PUSH
40604: LD_INT 2
40606: PUSH
40607: LD_INT 3
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: ST_TO_ADDR
40619: GO 40750
40621: LD_INT 1
40623: DOUBLE
40624: EQUAL
40625: IFTRUE 40629
40627: GO 40691
40629: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
40630: LD_ADDR_VAR 0 3
40634: PUSH
40635: LD_INT 11
40637: PUSH
40638: LD_INT 12
40640: PUSH
40641: LD_INT 13
40643: PUSH
40644: LD_INT 14
40646: PUSH
40647: LD_INT 1
40649: PUSH
40650: LD_INT 2
40652: PUSH
40653: LD_INT 3
40655: PUSH
40656: LD_INT 4
40658: PUSH
40659: LD_INT 5
40661: PUSH
40662: LD_INT 21
40664: PUSH
40665: LD_INT 23
40667: PUSH
40668: LD_INT 22
40670: PUSH
40671: LD_INT 24
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: ST_TO_ADDR
40689: GO 40750
40691: LD_INT 3
40693: DOUBLE
40694: EQUAL
40695: IFTRUE 40699
40697: GO 40749
40699: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40700: LD_ADDR_VAR 0 3
40704: PUSH
40705: LD_INT 13
40707: PUSH
40708: LD_INT 14
40710: PUSH
40711: LD_INT 2
40713: PUSH
40714: LD_INT 3
40716: PUSH
40717: LD_INT 4
40719: PUSH
40720: LD_INT 5
40722: PUSH
40723: LD_INT 21
40725: PUSH
40726: LD_INT 22
40728: PUSH
40729: LD_INT 23
40731: PUSH
40732: LD_INT 24
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: ST_TO_ADDR
40747: GO 40750
40749: POP
// result := ( chassis in result ) ;
40750: LD_ADDR_VAR 0 3
40754: PUSH
40755: LD_VAR 0 1
40759: PUSH
40760: LD_VAR 0 3
40764: IN
40765: ST_TO_ADDR
// end ;
40766: LD_VAR 0 3
40770: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40771: LD_INT 0
40773: PPUSH
// if not chassis or not weapon then
40774: LD_VAR 0 1
40778: NOT
40779: PUSH
40780: LD_VAR 0 2
40784: NOT
40785: OR
40786: IFFALSE 40790
// exit ;
40788: GO 41852
// case weapon of us_machine_gun :
40790: LD_VAR 0 2
40794: PUSH
40795: LD_INT 2
40797: DOUBLE
40798: EQUAL
40799: IFTRUE 40803
40801: GO 40833
40803: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40804: LD_ADDR_VAR 0 3
40808: PUSH
40809: LD_INT 1
40811: PUSH
40812: LD_INT 2
40814: PUSH
40815: LD_INT 3
40817: PUSH
40818: LD_INT 4
40820: PUSH
40821: LD_INT 5
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: ST_TO_ADDR
40831: GO 41836
40833: LD_INT 3
40835: DOUBLE
40836: EQUAL
40837: IFTRUE 40841
40839: GO 40871
40841: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40842: LD_ADDR_VAR 0 3
40846: PUSH
40847: LD_INT 1
40849: PUSH
40850: LD_INT 2
40852: PUSH
40853: LD_INT 3
40855: PUSH
40856: LD_INT 4
40858: PUSH
40859: LD_INT 5
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: ST_TO_ADDR
40869: GO 41836
40871: LD_INT 11
40873: DOUBLE
40874: EQUAL
40875: IFTRUE 40879
40877: GO 40909
40879: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40880: LD_ADDR_VAR 0 3
40884: PUSH
40885: LD_INT 1
40887: PUSH
40888: LD_INT 2
40890: PUSH
40891: LD_INT 3
40893: PUSH
40894: LD_INT 4
40896: PUSH
40897: LD_INT 5
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: ST_TO_ADDR
40907: GO 41836
40909: LD_INT 4
40911: DOUBLE
40912: EQUAL
40913: IFTRUE 40917
40915: GO 40943
40917: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40918: LD_ADDR_VAR 0 3
40922: PUSH
40923: LD_INT 2
40925: PUSH
40926: LD_INT 3
40928: PUSH
40929: LD_INT 4
40931: PUSH
40932: LD_INT 5
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: ST_TO_ADDR
40941: GO 41836
40943: LD_INT 5
40945: DOUBLE
40946: EQUAL
40947: IFTRUE 40951
40949: GO 40977
40951: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40952: LD_ADDR_VAR 0 3
40956: PUSH
40957: LD_INT 2
40959: PUSH
40960: LD_INT 3
40962: PUSH
40963: LD_INT 4
40965: PUSH
40966: LD_INT 5
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: ST_TO_ADDR
40975: GO 41836
40977: LD_INT 9
40979: DOUBLE
40980: EQUAL
40981: IFTRUE 40985
40983: GO 41011
40985: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40986: LD_ADDR_VAR 0 3
40990: PUSH
40991: LD_INT 2
40993: PUSH
40994: LD_INT 3
40996: PUSH
40997: LD_INT 4
40999: PUSH
41000: LD_INT 5
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: ST_TO_ADDR
41009: GO 41836
41011: LD_INT 7
41013: DOUBLE
41014: EQUAL
41015: IFTRUE 41019
41017: GO 41045
41019: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41020: LD_ADDR_VAR 0 3
41024: PUSH
41025: LD_INT 2
41027: PUSH
41028: LD_INT 3
41030: PUSH
41031: LD_INT 4
41033: PUSH
41034: LD_INT 5
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: ST_TO_ADDR
41043: GO 41836
41045: LD_INT 12
41047: DOUBLE
41048: EQUAL
41049: IFTRUE 41053
41051: GO 41079
41053: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41054: LD_ADDR_VAR 0 3
41058: PUSH
41059: LD_INT 2
41061: PUSH
41062: LD_INT 3
41064: PUSH
41065: LD_INT 4
41067: PUSH
41068: LD_INT 5
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: ST_TO_ADDR
41077: GO 41836
41079: LD_INT 13
41081: DOUBLE
41082: EQUAL
41083: IFTRUE 41087
41085: GO 41113
41087: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41088: LD_ADDR_VAR 0 3
41092: PUSH
41093: LD_INT 2
41095: PUSH
41096: LD_INT 3
41098: PUSH
41099: LD_INT 4
41101: PUSH
41102: LD_INT 5
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: ST_TO_ADDR
41111: GO 41836
41113: LD_INT 14
41115: DOUBLE
41116: EQUAL
41117: IFTRUE 41121
41119: GO 41139
41121: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41122: LD_ADDR_VAR 0 3
41126: PUSH
41127: LD_INT 4
41129: PUSH
41130: LD_INT 5
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: ST_TO_ADDR
41137: GO 41836
41139: LD_INT 6
41141: DOUBLE
41142: EQUAL
41143: IFTRUE 41147
41145: GO 41165
41147: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41148: LD_ADDR_VAR 0 3
41152: PUSH
41153: LD_INT 4
41155: PUSH
41156: LD_INT 5
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: ST_TO_ADDR
41163: GO 41836
41165: LD_INT 10
41167: DOUBLE
41168: EQUAL
41169: IFTRUE 41173
41171: GO 41191
41173: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41174: LD_ADDR_VAR 0 3
41178: PUSH
41179: LD_INT 4
41181: PUSH
41182: LD_INT 5
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: ST_TO_ADDR
41189: GO 41836
41191: LD_INT 22
41193: DOUBLE
41194: EQUAL
41195: IFTRUE 41199
41197: GO 41225
41199: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41200: LD_ADDR_VAR 0 3
41204: PUSH
41205: LD_INT 11
41207: PUSH
41208: LD_INT 12
41210: PUSH
41211: LD_INT 13
41213: PUSH
41214: LD_INT 14
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: ST_TO_ADDR
41223: GO 41836
41225: LD_INT 23
41227: DOUBLE
41228: EQUAL
41229: IFTRUE 41233
41231: GO 41259
41233: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41234: LD_ADDR_VAR 0 3
41238: PUSH
41239: LD_INT 11
41241: PUSH
41242: LD_INT 12
41244: PUSH
41245: LD_INT 13
41247: PUSH
41248: LD_INT 14
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: ST_TO_ADDR
41257: GO 41836
41259: LD_INT 24
41261: DOUBLE
41262: EQUAL
41263: IFTRUE 41267
41265: GO 41293
41267: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41268: LD_ADDR_VAR 0 3
41272: PUSH
41273: LD_INT 11
41275: PUSH
41276: LD_INT 12
41278: PUSH
41279: LD_INT 13
41281: PUSH
41282: LD_INT 14
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: ST_TO_ADDR
41291: GO 41836
41293: LD_INT 30
41295: DOUBLE
41296: EQUAL
41297: IFTRUE 41301
41299: GO 41327
41301: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41302: LD_ADDR_VAR 0 3
41306: PUSH
41307: LD_INT 11
41309: PUSH
41310: LD_INT 12
41312: PUSH
41313: LD_INT 13
41315: PUSH
41316: LD_INT 14
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: ST_TO_ADDR
41325: GO 41836
41327: LD_INT 25
41329: DOUBLE
41330: EQUAL
41331: IFTRUE 41335
41333: GO 41353
41335: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41336: LD_ADDR_VAR 0 3
41340: PUSH
41341: LD_INT 13
41343: PUSH
41344: LD_INT 14
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: ST_TO_ADDR
41351: GO 41836
41353: LD_INT 27
41355: DOUBLE
41356: EQUAL
41357: IFTRUE 41361
41359: GO 41379
41361: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
41362: LD_ADDR_VAR 0 3
41366: PUSH
41367: LD_INT 13
41369: PUSH
41370: LD_INT 14
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: ST_TO_ADDR
41377: GO 41836
41379: LD_EXP 57
41383: DOUBLE
41384: EQUAL
41385: IFTRUE 41389
41387: GO 41415
41389: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41390: LD_ADDR_VAR 0 3
41394: PUSH
41395: LD_INT 11
41397: PUSH
41398: LD_INT 12
41400: PUSH
41401: LD_INT 13
41403: PUSH
41404: LD_INT 14
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: ST_TO_ADDR
41413: GO 41836
41415: LD_INT 28
41417: DOUBLE
41418: EQUAL
41419: IFTRUE 41423
41421: GO 41441
41423: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
41424: LD_ADDR_VAR 0 3
41428: PUSH
41429: LD_INT 13
41431: PUSH
41432: LD_INT 14
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: ST_TO_ADDR
41439: GO 41836
41441: LD_INT 29
41443: DOUBLE
41444: EQUAL
41445: IFTRUE 41449
41447: GO 41467
41449: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
41450: LD_ADDR_VAR 0 3
41454: PUSH
41455: LD_INT 13
41457: PUSH
41458: LD_INT 14
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: ST_TO_ADDR
41465: GO 41836
41467: LD_INT 31
41469: DOUBLE
41470: EQUAL
41471: IFTRUE 41475
41473: GO 41493
41475: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
41476: LD_ADDR_VAR 0 3
41480: PUSH
41481: LD_INT 13
41483: PUSH
41484: LD_INT 14
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: ST_TO_ADDR
41491: GO 41836
41493: LD_INT 26
41495: DOUBLE
41496: EQUAL
41497: IFTRUE 41501
41499: GO 41519
41501: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
41502: LD_ADDR_VAR 0 3
41506: PUSH
41507: LD_INT 13
41509: PUSH
41510: LD_INT 14
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: ST_TO_ADDR
41517: GO 41836
41519: LD_INT 42
41521: DOUBLE
41522: EQUAL
41523: IFTRUE 41527
41525: GO 41553
41527: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
41528: LD_ADDR_VAR 0 3
41532: PUSH
41533: LD_INT 21
41535: PUSH
41536: LD_INT 22
41538: PUSH
41539: LD_INT 23
41541: PUSH
41542: LD_INT 24
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: ST_TO_ADDR
41551: GO 41836
41553: LD_INT 43
41555: DOUBLE
41556: EQUAL
41557: IFTRUE 41561
41559: GO 41587
41561: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
41562: LD_ADDR_VAR 0 3
41566: PUSH
41567: LD_INT 21
41569: PUSH
41570: LD_INT 22
41572: PUSH
41573: LD_INT 23
41575: PUSH
41576: LD_INT 24
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: ST_TO_ADDR
41585: GO 41836
41587: LD_INT 44
41589: DOUBLE
41590: EQUAL
41591: IFTRUE 41595
41593: GO 41621
41595: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
41596: LD_ADDR_VAR 0 3
41600: PUSH
41601: LD_INT 21
41603: PUSH
41604: LD_INT 22
41606: PUSH
41607: LD_INT 23
41609: PUSH
41610: LD_INT 24
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: ST_TO_ADDR
41619: GO 41836
41621: LD_INT 45
41623: DOUBLE
41624: EQUAL
41625: IFTRUE 41629
41627: GO 41655
41629: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
41630: LD_ADDR_VAR 0 3
41634: PUSH
41635: LD_INT 21
41637: PUSH
41638: LD_INT 22
41640: PUSH
41641: LD_INT 23
41643: PUSH
41644: LD_INT 24
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: ST_TO_ADDR
41653: GO 41836
41655: LD_INT 49
41657: DOUBLE
41658: EQUAL
41659: IFTRUE 41663
41661: GO 41689
41663: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
41664: LD_ADDR_VAR 0 3
41668: PUSH
41669: LD_INT 21
41671: PUSH
41672: LD_INT 22
41674: PUSH
41675: LD_INT 23
41677: PUSH
41678: LD_INT 24
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: ST_TO_ADDR
41687: GO 41836
41689: LD_INT 51
41691: DOUBLE
41692: EQUAL
41693: IFTRUE 41697
41695: GO 41723
41697: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
41698: LD_ADDR_VAR 0 3
41702: PUSH
41703: LD_INT 21
41705: PUSH
41706: LD_INT 22
41708: PUSH
41709: LD_INT 23
41711: PUSH
41712: LD_INT 24
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: ST_TO_ADDR
41721: GO 41836
41723: LD_INT 52
41725: DOUBLE
41726: EQUAL
41727: IFTRUE 41731
41729: GO 41757
41731: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41732: LD_ADDR_VAR 0 3
41736: PUSH
41737: LD_INT 21
41739: PUSH
41740: LD_INT 22
41742: PUSH
41743: LD_INT 23
41745: PUSH
41746: LD_INT 24
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: ST_TO_ADDR
41755: GO 41836
41757: LD_INT 53
41759: DOUBLE
41760: EQUAL
41761: IFTRUE 41765
41763: GO 41783
41765: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41766: LD_ADDR_VAR 0 3
41770: PUSH
41771: LD_INT 23
41773: PUSH
41774: LD_INT 24
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: ST_TO_ADDR
41781: GO 41836
41783: LD_INT 46
41785: DOUBLE
41786: EQUAL
41787: IFTRUE 41791
41789: GO 41809
41791: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41792: LD_ADDR_VAR 0 3
41796: PUSH
41797: LD_INT 23
41799: PUSH
41800: LD_INT 24
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: ST_TO_ADDR
41807: GO 41836
41809: LD_INT 47
41811: DOUBLE
41812: EQUAL
41813: IFTRUE 41817
41815: GO 41835
41817: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41818: LD_ADDR_VAR 0 3
41822: PUSH
41823: LD_INT 23
41825: PUSH
41826: LD_INT 24
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: ST_TO_ADDR
41833: GO 41836
41835: POP
// result := ( chassis in result ) ;
41836: LD_ADDR_VAR 0 3
41840: PUSH
41841: LD_VAR 0 1
41845: PUSH
41846: LD_VAR 0 3
41850: IN
41851: ST_TO_ADDR
// end ;
41852: LD_VAR 0 3
41856: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41857: LD_INT 0
41859: PPUSH
41860: PPUSH
41861: PPUSH
41862: PPUSH
41863: PPUSH
41864: PPUSH
41865: PPUSH
// result := array ;
41866: LD_ADDR_VAR 0 5
41870: PUSH
41871: LD_VAR 0 1
41875: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41876: LD_VAR 0 1
41880: NOT
41881: PUSH
41882: LD_VAR 0 2
41886: NOT
41887: OR
41888: PUSH
41889: LD_VAR 0 3
41893: NOT
41894: OR
41895: PUSH
41896: LD_VAR 0 2
41900: PUSH
41901: LD_VAR 0 1
41905: GREATER
41906: OR
41907: PUSH
41908: LD_VAR 0 3
41912: PUSH
41913: LD_VAR 0 1
41917: GREATER
41918: OR
41919: IFFALSE 41923
// exit ;
41921: GO 42219
// if direction then
41923: LD_VAR 0 4
41927: IFFALSE 41991
// begin d := 1 ;
41929: LD_ADDR_VAR 0 9
41933: PUSH
41934: LD_INT 1
41936: ST_TO_ADDR
// if i_from > i_to then
41937: LD_VAR 0 2
41941: PUSH
41942: LD_VAR 0 3
41946: GREATER
41947: IFFALSE 41973
// length := ( array - i_from ) + i_to else
41949: LD_ADDR_VAR 0 11
41953: PUSH
41954: LD_VAR 0 1
41958: PUSH
41959: LD_VAR 0 2
41963: MINUS
41964: PUSH
41965: LD_VAR 0 3
41969: PLUS
41970: ST_TO_ADDR
41971: GO 41989
// length := i_to - i_from ;
41973: LD_ADDR_VAR 0 11
41977: PUSH
41978: LD_VAR 0 3
41982: PUSH
41983: LD_VAR 0 2
41987: MINUS
41988: ST_TO_ADDR
// end else
41989: GO 42052
// begin d := - 1 ;
41991: LD_ADDR_VAR 0 9
41995: PUSH
41996: LD_INT 1
41998: NEG
41999: ST_TO_ADDR
// if i_from > i_to then
42000: LD_VAR 0 2
42004: PUSH
42005: LD_VAR 0 3
42009: GREATER
42010: IFFALSE 42030
// length := i_from - i_to else
42012: LD_ADDR_VAR 0 11
42016: PUSH
42017: LD_VAR 0 2
42021: PUSH
42022: LD_VAR 0 3
42026: MINUS
42027: ST_TO_ADDR
42028: GO 42052
// length := ( array - i_to ) + i_from ;
42030: LD_ADDR_VAR 0 11
42034: PUSH
42035: LD_VAR 0 1
42039: PUSH
42040: LD_VAR 0 3
42044: MINUS
42045: PUSH
42046: LD_VAR 0 2
42050: PLUS
42051: ST_TO_ADDR
// end ; if not length then
42052: LD_VAR 0 11
42056: NOT
42057: IFFALSE 42061
// exit ;
42059: GO 42219
// tmp := array ;
42061: LD_ADDR_VAR 0 10
42065: PUSH
42066: LD_VAR 0 1
42070: ST_TO_ADDR
// for i = 1 to length do
42071: LD_ADDR_VAR 0 6
42075: PUSH
42076: DOUBLE
42077: LD_INT 1
42079: DEC
42080: ST_TO_ADDR
42081: LD_VAR 0 11
42085: PUSH
42086: FOR_TO
42087: IFFALSE 42207
// begin for j = 1 to array do
42089: LD_ADDR_VAR 0 7
42093: PUSH
42094: DOUBLE
42095: LD_INT 1
42097: DEC
42098: ST_TO_ADDR
42099: LD_VAR 0 1
42103: PUSH
42104: FOR_TO
42105: IFFALSE 42193
// begin k := j + d ;
42107: LD_ADDR_VAR 0 8
42111: PUSH
42112: LD_VAR 0 7
42116: PUSH
42117: LD_VAR 0 9
42121: PLUS
42122: ST_TO_ADDR
// if k > array then
42123: LD_VAR 0 8
42127: PUSH
42128: LD_VAR 0 1
42132: GREATER
42133: IFFALSE 42143
// k := 1 ;
42135: LD_ADDR_VAR 0 8
42139: PUSH
42140: LD_INT 1
42142: ST_TO_ADDR
// if not k then
42143: LD_VAR 0 8
42147: NOT
42148: IFFALSE 42160
// k := array ;
42150: LD_ADDR_VAR 0 8
42154: PUSH
42155: LD_VAR 0 1
42159: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42160: LD_ADDR_VAR 0 10
42164: PUSH
42165: LD_VAR 0 10
42169: PPUSH
42170: LD_VAR 0 8
42174: PPUSH
42175: LD_VAR 0 1
42179: PUSH
42180: LD_VAR 0 7
42184: ARRAY
42185: PPUSH
42186: CALL_OW 1
42190: ST_TO_ADDR
// end ;
42191: GO 42104
42193: POP
42194: POP
// array := tmp ;
42195: LD_ADDR_VAR 0 1
42199: PUSH
42200: LD_VAR 0 10
42204: ST_TO_ADDR
// end ;
42205: GO 42086
42207: POP
42208: POP
// result := array ;
42209: LD_ADDR_VAR 0 5
42213: PUSH
42214: LD_VAR 0 1
42218: ST_TO_ADDR
// end ;
42219: LD_VAR 0 5
42223: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42224: LD_INT 0
42226: PPUSH
42227: PPUSH
// result := 0 ;
42228: LD_ADDR_VAR 0 3
42232: PUSH
42233: LD_INT 0
42235: ST_TO_ADDR
// if not array or not value in array then
42236: LD_VAR 0 1
42240: NOT
42241: PUSH
42242: LD_VAR 0 2
42246: PUSH
42247: LD_VAR 0 1
42251: IN
42252: NOT
42253: OR
42254: IFFALSE 42258
// exit ;
42256: GO 42312
// for i = 1 to array do
42258: LD_ADDR_VAR 0 4
42262: PUSH
42263: DOUBLE
42264: LD_INT 1
42266: DEC
42267: ST_TO_ADDR
42268: LD_VAR 0 1
42272: PUSH
42273: FOR_TO
42274: IFFALSE 42310
// if value = array [ i ] then
42276: LD_VAR 0 2
42280: PUSH
42281: LD_VAR 0 1
42285: PUSH
42286: LD_VAR 0 4
42290: ARRAY
42291: EQUAL
42292: IFFALSE 42308
// begin result := i ;
42294: LD_ADDR_VAR 0 3
42298: PUSH
42299: LD_VAR 0 4
42303: ST_TO_ADDR
// exit ;
42304: POP
42305: POP
42306: GO 42312
// end ;
42308: GO 42273
42310: POP
42311: POP
// end ;
42312: LD_VAR 0 3
42316: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42317: LD_INT 0
42319: PPUSH
// vc_chassis := chassis ;
42320: LD_ADDR_OWVAR 37
42324: PUSH
42325: LD_VAR 0 1
42329: ST_TO_ADDR
// vc_engine := engine ;
42330: LD_ADDR_OWVAR 39
42334: PUSH
42335: LD_VAR 0 2
42339: ST_TO_ADDR
// vc_control := control ;
42340: LD_ADDR_OWVAR 38
42344: PUSH
42345: LD_VAR 0 3
42349: ST_TO_ADDR
// vc_weapon := weapon ;
42350: LD_ADDR_OWVAR 40
42354: PUSH
42355: LD_VAR 0 4
42359: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42360: LD_ADDR_OWVAR 41
42364: PUSH
42365: LD_VAR 0 5
42369: ST_TO_ADDR
// end ;
42370: LD_VAR 0 6
42374: RET
// export function WantPlant ( unit ) ; var task ; begin
42375: LD_INT 0
42377: PPUSH
42378: PPUSH
// result := false ;
42379: LD_ADDR_VAR 0 2
42383: PUSH
42384: LD_INT 0
42386: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42387: LD_ADDR_VAR 0 3
42391: PUSH
42392: LD_VAR 0 1
42396: PPUSH
42397: CALL_OW 437
42401: ST_TO_ADDR
// if task then
42402: LD_VAR 0 3
42406: IFFALSE 42434
// if task [ 1 ] [ 1 ] = p then
42408: LD_VAR 0 3
42412: PUSH
42413: LD_INT 1
42415: ARRAY
42416: PUSH
42417: LD_INT 1
42419: ARRAY
42420: PUSH
42421: LD_STRING p
42423: EQUAL
42424: IFFALSE 42434
// result := true ;
42426: LD_ADDR_VAR 0 2
42430: PUSH
42431: LD_INT 1
42433: ST_TO_ADDR
// end ;
42434: LD_VAR 0 2
42438: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
42439: LD_INT 0
42441: PPUSH
42442: PPUSH
42443: PPUSH
42444: PPUSH
// if pos < 1 then
42445: LD_VAR 0 2
42449: PUSH
42450: LD_INT 1
42452: LESS
42453: IFFALSE 42457
// exit ;
42455: GO 42760
// if pos = 1 then
42457: LD_VAR 0 2
42461: PUSH
42462: LD_INT 1
42464: EQUAL
42465: IFFALSE 42498
// result := Replace ( arr , pos [ 1 ] , value ) else
42467: LD_ADDR_VAR 0 4
42471: PUSH
42472: LD_VAR 0 1
42476: PPUSH
42477: LD_VAR 0 2
42481: PUSH
42482: LD_INT 1
42484: ARRAY
42485: PPUSH
42486: LD_VAR 0 3
42490: PPUSH
42491: CALL_OW 1
42495: ST_TO_ADDR
42496: GO 42760
// begin tmp := arr ;
42498: LD_ADDR_VAR 0 6
42502: PUSH
42503: LD_VAR 0 1
42507: ST_TO_ADDR
// s_arr := [ tmp ] ;
42508: LD_ADDR_VAR 0 7
42512: PUSH
42513: LD_VAR 0 6
42517: PUSH
42518: EMPTY
42519: LIST
42520: ST_TO_ADDR
// for i = 1 to pos - 1 do
42521: LD_ADDR_VAR 0 5
42525: PUSH
42526: DOUBLE
42527: LD_INT 1
42529: DEC
42530: ST_TO_ADDR
42531: LD_VAR 0 2
42535: PUSH
42536: LD_INT 1
42538: MINUS
42539: PUSH
42540: FOR_TO
42541: IFFALSE 42586
// begin tmp := tmp [ pos [ i ] ] ;
42543: LD_ADDR_VAR 0 6
42547: PUSH
42548: LD_VAR 0 6
42552: PUSH
42553: LD_VAR 0 2
42557: PUSH
42558: LD_VAR 0 5
42562: ARRAY
42563: ARRAY
42564: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
42565: LD_ADDR_VAR 0 7
42569: PUSH
42570: LD_VAR 0 7
42574: PUSH
42575: LD_VAR 0 6
42579: PUSH
42580: EMPTY
42581: LIST
42582: ADD
42583: ST_TO_ADDR
// end ;
42584: GO 42540
42586: POP
42587: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
42588: LD_ADDR_VAR 0 6
42592: PUSH
42593: LD_VAR 0 6
42597: PPUSH
42598: LD_VAR 0 2
42602: PUSH
42603: LD_VAR 0 2
42607: ARRAY
42608: PPUSH
42609: LD_VAR 0 3
42613: PPUSH
42614: CALL_OW 1
42618: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
42619: LD_ADDR_VAR 0 7
42623: PUSH
42624: LD_VAR 0 7
42628: PPUSH
42629: LD_VAR 0 7
42633: PPUSH
42634: LD_VAR 0 6
42638: PPUSH
42639: CALL_OW 1
42643: ST_TO_ADDR
// for i = s_arr downto 2 do
42644: LD_ADDR_VAR 0 5
42648: PUSH
42649: DOUBLE
42650: LD_VAR 0 7
42654: INC
42655: ST_TO_ADDR
42656: LD_INT 2
42658: PUSH
42659: FOR_DOWNTO
42660: IFFALSE 42744
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
42662: LD_ADDR_VAR 0 6
42666: PUSH
42667: LD_VAR 0 7
42671: PUSH
42672: LD_VAR 0 5
42676: PUSH
42677: LD_INT 1
42679: MINUS
42680: ARRAY
42681: PPUSH
42682: LD_VAR 0 2
42686: PUSH
42687: LD_VAR 0 5
42691: PUSH
42692: LD_INT 1
42694: MINUS
42695: ARRAY
42696: PPUSH
42697: LD_VAR 0 7
42701: PUSH
42702: LD_VAR 0 5
42706: ARRAY
42707: PPUSH
42708: CALL_OW 1
42712: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42713: LD_ADDR_VAR 0 7
42717: PUSH
42718: LD_VAR 0 7
42722: PPUSH
42723: LD_VAR 0 5
42727: PUSH
42728: LD_INT 1
42730: MINUS
42731: PPUSH
42732: LD_VAR 0 6
42736: PPUSH
42737: CALL_OW 1
42741: ST_TO_ADDR
// end ;
42742: GO 42659
42744: POP
42745: POP
// result := s_arr [ 1 ] ;
42746: LD_ADDR_VAR 0 4
42750: PUSH
42751: LD_VAR 0 7
42755: PUSH
42756: LD_INT 1
42758: ARRAY
42759: ST_TO_ADDR
// end ; end ;
42760: LD_VAR 0 4
42764: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42765: LD_INT 0
42767: PPUSH
42768: PPUSH
// if not list then
42769: LD_VAR 0 1
42773: NOT
42774: IFFALSE 42778
// exit ;
42776: GO 42869
// i := list [ pos1 ] ;
42778: LD_ADDR_VAR 0 5
42782: PUSH
42783: LD_VAR 0 1
42787: PUSH
42788: LD_VAR 0 2
42792: ARRAY
42793: ST_TO_ADDR
// if not i then
42794: LD_VAR 0 5
42798: NOT
42799: IFFALSE 42803
// exit ;
42801: GO 42869
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42803: LD_ADDR_VAR 0 1
42807: PUSH
42808: LD_VAR 0 1
42812: PPUSH
42813: LD_VAR 0 2
42817: PPUSH
42818: LD_VAR 0 1
42822: PUSH
42823: LD_VAR 0 3
42827: ARRAY
42828: PPUSH
42829: CALL_OW 1
42833: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42834: LD_ADDR_VAR 0 1
42838: PUSH
42839: LD_VAR 0 1
42843: PPUSH
42844: LD_VAR 0 3
42848: PPUSH
42849: LD_VAR 0 5
42853: PPUSH
42854: CALL_OW 1
42858: ST_TO_ADDR
// result := list ;
42859: LD_ADDR_VAR 0 4
42863: PUSH
42864: LD_VAR 0 1
42868: ST_TO_ADDR
// end ;
42869: LD_VAR 0 4
42873: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42874: LD_INT 0
42876: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42877: LD_ADDR_VAR 0 5
42881: PUSH
42882: LD_VAR 0 1
42886: PPUSH
42887: CALL_OW 250
42891: PPUSH
42892: LD_VAR 0 1
42896: PPUSH
42897: CALL_OW 251
42901: PPUSH
42902: LD_VAR 0 2
42906: PPUSH
42907: LD_VAR 0 3
42911: PPUSH
42912: LD_VAR 0 4
42916: PPUSH
42917: CALL 42927 0 5
42921: ST_TO_ADDR
// end ;
42922: LD_VAR 0 5
42926: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42927: LD_INT 0
42929: PPUSH
42930: PPUSH
42931: PPUSH
42932: PPUSH
// if not list then
42933: LD_VAR 0 3
42937: NOT
42938: IFFALSE 42942
// exit ;
42940: GO 43330
// result := [ ] ;
42942: LD_ADDR_VAR 0 6
42946: PUSH
42947: EMPTY
42948: ST_TO_ADDR
// for i in list do
42949: LD_ADDR_VAR 0 7
42953: PUSH
42954: LD_VAR 0 3
42958: PUSH
42959: FOR_IN
42960: IFFALSE 43162
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42962: LD_ADDR_VAR 0 9
42966: PUSH
42967: LD_VAR 0 7
42971: PPUSH
42972: LD_VAR 0 1
42976: PPUSH
42977: LD_VAR 0 2
42981: PPUSH
42982: CALL_OW 297
42986: ST_TO_ADDR
// if not result then
42987: LD_VAR 0 6
42991: NOT
42992: IFFALSE 43018
// result := [ [ i , tmp ] ] else
42994: LD_ADDR_VAR 0 6
42998: PUSH
42999: LD_VAR 0 7
43003: PUSH
43004: LD_VAR 0 9
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: EMPTY
43014: LIST
43015: ST_TO_ADDR
43016: GO 43160
// begin if result [ result ] [ 2 ] < tmp then
43018: LD_VAR 0 6
43022: PUSH
43023: LD_VAR 0 6
43027: ARRAY
43028: PUSH
43029: LD_INT 2
43031: ARRAY
43032: PUSH
43033: LD_VAR 0 9
43037: LESS
43038: IFFALSE 43080
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43040: LD_ADDR_VAR 0 6
43044: PUSH
43045: LD_VAR 0 6
43049: PPUSH
43050: LD_VAR 0 6
43054: PUSH
43055: LD_INT 1
43057: PLUS
43058: PPUSH
43059: LD_VAR 0 7
43063: PUSH
43064: LD_VAR 0 9
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PPUSH
43073: CALL_OW 2
43077: ST_TO_ADDR
43078: GO 43160
// for j = 1 to result do
43080: LD_ADDR_VAR 0 8
43084: PUSH
43085: DOUBLE
43086: LD_INT 1
43088: DEC
43089: ST_TO_ADDR
43090: LD_VAR 0 6
43094: PUSH
43095: FOR_TO
43096: IFFALSE 43158
// begin if tmp < result [ j ] [ 2 ] then
43098: LD_VAR 0 9
43102: PUSH
43103: LD_VAR 0 6
43107: PUSH
43108: LD_VAR 0 8
43112: ARRAY
43113: PUSH
43114: LD_INT 2
43116: ARRAY
43117: LESS
43118: IFFALSE 43156
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43120: LD_ADDR_VAR 0 6
43124: PUSH
43125: LD_VAR 0 6
43129: PPUSH
43130: LD_VAR 0 8
43134: PPUSH
43135: LD_VAR 0 7
43139: PUSH
43140: LD_VAR 0 9
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PPUSH
43149: CALL_OW 2
43153: ST_TO_ADDR
// break ;
43154: GO 43158
// end ; end ;
43156: GO 43095
43158: POP
43159: POP
// end ; end ;
43160: GO 42959
43162: POP
43163: POP
// if result and not asc then
43164: LD_VAR 0 6
43168: PUSH
43169: LD_VAR 0 4
43173: NOT
43174: AND
43175: IFFALSE 43250
// begin tmp := result ;
43177: LD_ADDR_VAR 0 9
43181: PUSH
43182: LD_VAR 0 6
43186: ST_TO_ADDR
// for i = tmp downto 1 do
43187: LD_ADDR_VAR 0 7
43191: PUSH
43192: DOUBLE
43193: LD_VAR 0 9
43197: INC
43198: ST_TO_ADDR
43199: LD_INT 1
43201: PUSH
43202: FOR_DOWNTO
43203: IFFALSE 43248
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43205: LD_ADDR_VAR 0 6
43209: PUSH
43210: LD_VAR 0 6
43214: PPUSH
43215: LD_VAR 0 9
43219: PUSH
43220: LD_VAR 0 7
43224: MINUS
43225: PUSH
43226: LD_INT 1
43228: PLUS
43229: PPUSH
43230: LD_VAR 0 9
43234: PUSH
43235: LD_VAR 0 7
43239: ARRAY
43240: PPUSH
43241: CALL_OW 1
43245: ST_TO_ADDR
43246: GO 43202
43248: POP
43249: POP
// end ; tmp := [ ] ;
43250: LD_ADDR_VAR 0 9
43254: PUSH
43255: EMPTY
43256: ST_TO_ADDR
// if mode then
43257: LD_VAR 0 5
43261: IFFALSE 43330
// begin for i = 1 to result do
43263: LD_ADDR_VAR 0 7
43267: PUSH
43268: DOUBLE
43269: LD_INT 1
43271: DEC
43272: ST_TO_ADDR
43273: LD_VAR 0 6
43277: PUSH
43278: FOR_TO
43279: IFFALSE 43318
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
43281: LD_ADDR_VAR 0 9
43285: PUSH
43286: LD_VAR 0 9
43290: PPUSH
43291: LD_VAR 0 7
43295: PPUSH
43296: LD_VAR 0 6
43300: PUSH
43301: LD_VAR 0 7
43305: ARRAY
43306: PUSH
43307: LD_INT 1
43309: ARRAY
43310: PPUSH
43311: CALL_OW 1
43315: ST_TO_ADDR
43316: GO 43278
43318: POP
43319: POP
// result := tmp ;
43320: LD_ADDR_VAR 0 6
43324: PUSH
43325: LD_VAR 0 9
43329: ST_TO_ADDR
// end ; end ;
43330: LD_VAR 0 6
43334: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43335: LD_INT 0
43337: PPUSH
43338: PPUSH
43339: PPUSH
43340: PPUSH
43341: PPUSH
43342: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43343: LD_ADDR_VAR 0 5
43347: PUSH
43348: LD_INT 0
43350: PUSH
43351: LD_INT 0
43353: PUSH
43354: LD_INT 0
43356: PUSH
43357: EMPTY
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: ST_TO_ADDR
// if not x or not y then
43365: LD_VAR 0 2
43369: NOT
43370: PUSH
43371: LD_VAR 0 3
43375: NOT
43376: OR
43377: IFFALSE 43381
// exit ;
43379: GO 45033
// if not range then
43381: LD_VAR 0 4
43385: NOT
43386: IFFALSE 43396
// range := 10 ;
43388: LD_ADDR_VAR 0 4
43392: PUSH
43393: LD_INT 10
43395: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43396: LD_ADDR_VAR 0 8
43400: PUSH
43401: LD_INT 81
43403: PUSH
43404: LD_VAR 0 1
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 92
43415: PUSH
43416: LD_VAR 0 2
43420: PUSH
43421: LD_VAR 0 3
43425: PUSH
43426: LD_VAR 0 4
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 3
43439: PUSH
43440: LD_INT 21
43442: PUSH
43443: LD_INT 3
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: LIST
43458: PPUSH
43459: CALL_OW 69
43463: ST_TO_ADDR
// if not tmp then
43464: LD_VAR 0 8
43468: NOT
43469: IFFALSE 43473
// exit ;
43471: GO 45033
// for i in tmp do
43473: LD_ADDR_VAR 0 6
43477: PUSH
43478: LD_VAR 0 8
43482: PUSH
43483: FOR_IN
43484: IFFALSE 45008
// begin points := [ 0 , 0 , 0 ] ;
43486: LD_ADDR_VAR 0 9
43490: PUSH
43491: LD_INT 0
43493: PUSH
43494: LD_INT 0
43496: PUSH
43497: LD_INT 0
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: LIST
43504: ST_TO_ADDR
// bpoints := 1 ;
43505: LD_ADDR_VAR 0 10
43509: PUSH
43510: LD_INT 1
43512: ST_TO_ADDR
// case GetType ( i ) of unit_human :
43513: LD_VAR 0 6
43517: PPUSH
43518: CALL_OW 247
43522: PUSH
43523: LD_INT 1
43525: DOUBLE
43526: EQUAL
43527: IFTRUE 43531
43529: GO 44109
43531: POP
// begin if GetClass ( i ) = 1 then
43532: LD_VAR 0 6
43536: PPUSH
43537: CALL_OW 257
43541: PUSH
43542: LD_INT 1
43544: EQUAL
43545: IFFALSE 43566
// points := [ 10 , 5 , 3 ] ;
43547: LD_ADDR_VAR 0 9
43551: PUSH
43552: LD_INT 10
43554: PUSH
43555: LD_INT 5
43557: PUSH
43558: LD_INT 3
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: LIST
43565: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
43566: LD_VAR 0 6
43570: PPUSH
43571: CALL_OW 257
43575: PUSH
43576: LD_INT 2
43578: PUSH
43579: LD_INT 3
43581: PUSH
43582: LD_INT 4
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: LIST
43589: IN
43590: IFFALSE 43611
// points := [ 3 , 2 , 1 ] ;
43592: LD_ADDR_VAR 0 9
43596: PUSH
43597: LD_INT 3
43599: PUSH
43600: LD_INT 2
43602: PUSH
43603: LD_INT 1
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: LIST
43610: ST_TO_ADDR
// if GetClass ( i ) = 5 then
43611: LD_VAR 0 6
43615: PPUSH
43616: CALL_OW 257
43620: PUSH
43621: LD_INT 5
43623: EQUAL
43624: IFFALSE 43645
// points := [ 130 , 5 , 2 ] ;
43626: LD_ADDR_VAR 0 9
43630: PUSH
43631: LD_INT 130
43633: PUSH
43634: LD_INT 5
43636: PUSH
43637: LD_INT 2
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: LIST
43644: ST_TO_ADDR
// if GetClass ( i ) = 8 then
43645: LD_VAR 0 6
43649: PPUSH
43650: CALL_OW 257
43654: PUSH
43655: LD_INT 8
43657: EQUAL
43658: IFFALSE 43679
// points := [ 35 , 35 , 30 ] ;
43660: LD_ADDR_VAR 0 9
43664: PUSH
43665: LD_INT 35
43667: PUSH
43668: LD_INT 35
43670: PUSH
43671: LD_INT 30
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: LIST
43678: ST_TO_ADDR
// if GetClass ( i ) = 9 then
43679: LD_VAR 0 6
43683: PPUSH
43684: CALL_OW 257
43688: PUSH
43689: LD_INT 9
43691: EQUAL
43692: IFFALSE 43713
// points := [ 20 , 55 , 40 ] ;
43694: LD_ADDR_VAR 0 9
43698: PUSH
43699: LD_INT 20
43701: PUSH
43702: LD_INT 55
43704: PUSH
43705: LD_INT 40
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: LIST
43712: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
43713: LD_VAR 0 6
43717: PPUSH
43718: CALL_OW 257
43722: PUSH
43723: LD_INT 12
43725: PUSH
43726: LD_INT 16
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: IN
43733: IFFALSE 43754
// points := [ 5 , 3 , 2 ] ;
43735: LD_ADDR_VAR 0 9
43739: PUSH
43740: LD_INT 5
43742: PUSH
43743: LD_INT 3
43745: PUSH
43746: LD_INT 2
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: LIST
43753: ST_TO_ADDR
// if GetClass ( i ) = 17 then
43754: LD_VAR 0 6
43758: PPUSH
43759: CALL_OW 257
43763: PUSH
43764: LD_INT 17
43766: EQUAL
43767: IFFALSE 43788
// points := [ 100 , 50 , 75 ] ;
43769: LD_ADDR_VAR 0 9
43773: PUSH
43774: LD_INT 100
43776: PUSH
43777: LD_INT 50
43779: PUSH
43780: LD_INT 75
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: LIST
43787: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43788: LD_VAR 0 6
43792: PPUSH
43793: CALL_OW 257
43797: PUSH
43798: LD_INT 15
43800: EQUAL
43801: IFFALSE 43822
// points := [ 10 , 5 , 3 ] ;
43803: LD_ADDR_VAR 0 9
43807: PUSH
43808: LD_INT 10
43810: PUSH
43811: LD_INT 5
43813: PUSH
43814: LD_INT 3
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: LIST
43821: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43822: LD_VAR 0 6
43826: PPUSH
43827: CALL_OW 257
43831: PUSH
43832: LD_INT 14
43834: EQUAL
43835: IFFALSE 43856
// points := [ 10 , 0 , 0 ] ;
43837: LD_ADDR_VAR 0 9
43841: PUSH
43842: LD_INT 10
43844: PUSH
43845: LD_INT 0
43847: PUSH
43848: LD_INT 0
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: LIST
43855: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43856: LD_VAR 0 6
43860: PPUSH
43861: CALL_OW 257
43865: PUSH
43866: LD_INT 11
43868: EQUAL
43869: IFFALSE 43890
// points := [ 30 , 10 , 5 ] ;
43871: LD_ADDR_VAR 0 9
43875: PUSH
43876: LD_INT 30
43878: PUSH
43879: LD_INT 10
43881: PUSH
43882: LD_INT 5
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: LIST
43889: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43890: LD_VAR 0 1
43894: PPUSH
43895: LD_INT 5
43897: PPUSH
43898: CALL_OW 321
43902: PUSH
43903: LD_INT 2
43905: EQUAL
43906: IFFALSE 43923
// bpoints := bpoints * 1.8 ;
43908: LD_ADDR_VAR 0 10
43912: PUSH
43913: LD_VAR 0 10
43917: PUSH
43918: LD_REAL  1.80000000000000E+0000
43921: MUL
43922: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43923: LD_VAR 0 6
43927: PPUSH
43928: CALL_OW 257
43932: PUSH
43933: LD_INT 1
43935: PUSH
43936: LD_INT 2
43938: PUSH
43939: LD_INT 3
43941: PUSH
43942: LD_INT 4
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: IN
43951: PUSH
43952: LD_VAR 0 1
43956: PPUSH
43957: LD_INT 51
43959: PPUSH
43960: CALL_OW 321
43964: PUSH
43965: LD_INT 2
43967: EQUAL
43968: AND
43969: IFFALSE 43986
// bpoints := bpoints * 1.2 ;
43971: LD_ADDR_VAR 0 10
43975: PUSH
43976: LD_VAR 0 10
43980: PUSH
43981: LD_REAL  1.20000000000000E+0000
43984: MUL
43985: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43986: LD_VAR 0 6
43990: PPUSH
43991: CALL_OW 257
43995: PUSH
43996: LD_INT 5
43998: PUSH
43999: LD_INT 7
44001: PUSH
44002: LD_INT 9
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: LIST
44009: IN
44010: PUSH
44011: LD_VAR 0 1
44015: PPUSH
44016: LD_INT 52
44018: PPUSH
44019: CALL_OW 321
44023: PUSH
44024: LD_INT 2
44026: EQUAL
44027: AND
44028: IFFALSE 44045
// bpoints := bpoints * 1.5 ;
44030: LD_ADDR_VAR 0 10
44034: PUSH
44035: LD_VAR 0 10
44039: PUSH
44040: LD_REAL  1.50000000000000E+0000
44043: MUL
44044: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44045: LD_VAR 0 1
44049: PPUSH
44050: LD_INT 66
44052: PPUSH
44053: CALL_OW 321
44057: PUSH
44058: LD_INT 2
44060: EQUAL
44061: IFFALSE 44078
// bpoints := bpoints * 1.1 ;
44063: LD_ADDR_VAR 0 10
44067: PUSH
44068: LD_VAR 0 10
44072: PUSH
44073: LD_REAL  1.10000000000000E+0000
44076: MUL
44077: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44078: LD_ADDR_VAR 0 10
44082: PUSH
44083: LD_VAR 0 10
44087: PUSH
44088: LD_VAR 0 6
44092: PPUSH
44093: LD_INT 1
44095: PPUSH
44096: CALL_OW 259
44100: PUSH
44101: LD_REAL  1.15000000000000E+0000
44104: MUL
44105: MUL
44106: ST_TO_ADDR
// end ; unit_vehicle :
44107: GO 44937
44109: LD_INT 2
44111: DOUBLE
44112: EQUAL
44113: IFTRUE 44117
44115: GO 44925
44117: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44118: LD_VAR 0 6
44122: PPUSH
44123: CALL_OW 264
44127: PUSH
44128: LD_INT 2
44130: PUSH
44131: LD_INT 42
44133: PUSH
44134: LD_INT 24
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: LIST
44141: IN
44142: IFFALSE 44163
// points := [ 25 , 5 , 3 ] ;
44144: LD_ADDR_VAR 0 9
44148: PUSH
44149: LD_INT 25
44151: PUSH
44152: LD_INT 5
44154: PUSH
44155: LD_INT 3
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: LIST
44162: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44163: LD_VAR 0 6
44167: PPUSH
44168: CALL_OW 264
44172: PUSH
44173: LD_INT 4
44175: PUSH
44176: LD_INT 43
44178: PUSH
44179: LD_INT 25
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: LIST
44186: IN
44187: IFFALSE 44208
// points := [ 40 , 15 , 5 ] ;
44189: LD_ADDR_VAR 0 9
44193: PUSH
44194: LD_INT 40
44196: PUSH
44197: LD_INT 15
44199: PUSH
44200: LD_INT 5
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: LIST
44207: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44208: LD_VAR 0 6
44212: PPUSH
44213: CALL_OW 264
44217: PUSH
44218: LD_INT 3
44220: PUSH
44221: LD_INT 23
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: IN
44228: IFFALSE 44249
// points := [ 7 , 25 , 8 ] ;
44230: LD_ADDR_VAR 0 9
44234: PUSH
44235: LD_INT 7
44237: PUSH
44238: LD_INT 25
44240: PUSH
44241: LD_INT 8
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: LIST
44248: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44249: LD_VAR 0 6
44253: PPUSH
44254: CALL_OW 264
44258: PUSH
44259: LD_INT 5
44261: PUSH
44262: LD_INT 27
44264: PUSH
44265: LD_INT 44
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: LIST
44272: IN
44273: IFFALSE 44294
// points := [ 14 , 50 , 16 ] ;
44275: LD_ADDR_VAR 0 9
44279: PUSH
44280: LD_INT 14
44282: PUSH
44283: LD_INT 50
44285: PUSH
44286: LD_INT 16
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: LIST
44293: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44294: LD_VAR 0 6
44298: PPUSH
44299: CALL_OW 264
44303: PUSH
44304: LD_INT 6
44306: PUSH
44307: LD_INT 46
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: IN
44314: IFFALSE 44335
// points := [ 32 , 120 , 70 ] ;
44316: LD_ADDR_VAR 0 9
44320: PUSH
44321: LD_INT 32
44323: PUSH
44324: LD_INT 120
44326: PUSH
44327: LD_INT 70
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: LIST
44334: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
44335: LD_VAR 0 6
44339: PPUSH
44340: CALL_OW 264
44344: PUSH
44345: LD_INT 7
44347: PUSH
44348: LD_INT 28
44350: PUSH
44351: LD_INT 45
44353: PUSH
44354: LD_EXP 57
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: IN
44365: IFFALSE 44386
// points := [ 35 , 20 , 45 ] ;
44367: LD_ADDR_VAR 0 9
44371: PUSH
44372: LD_INT 35
44374: PUSH
44375: LD_INT 20
44377: PUSH
44378: LD_INT 45
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: LIST
44385: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44386: LD_VAR 0 6
44390: PPUSH
44391: CALL_OW 264
44395: PUSH
44396: LD_INT 47
44398: PUSH
44399: EMPTY
44400: LIST
44401: IN
44402: IFFALSE 44423
// points := [ 67 , 45 , 75 ] ;
44404: LD_ADDR_VAR 0 9
44408: PUSH
44409: LD_INT 67
44411: PUSH
44412: LD_INT 45
44414: PUSH
44415: LD_INT 75
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: LIST
44422: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
44423: LD_VAR 0 6
44427: PPUSH
44428: CALL_OW 264
44432: PUSH
44433: LD_INT 26
44435: PUSH
44436: EMPTY
44437: LIST
44438: IN
44439: IFFALSE 44460
// points := [ 120 , 30 , 80 ] ;
44441: LD_ADDR_VAR 0 9
44445: PUSH
44446: LD_INT 120
44448: PUSH
44449: LD_INT 30
44451: PUSH
44452: LD_INT 80
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: LIST
44459: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
44460: LD_VAR 0 6
44464: PPUSH
44465: CALL_OW 264
44469: PUSH
44470: LD_INT 22
44472: PUSH
44473: EMPTY
44474: LIST
44475: IN
44476: IFFALSE 44497
// points := [ 40 , 1 , 1 ] ;
44478: LD_ADDR_VAR 0 9
44482: PUSH
44483: LD_INT 40
44485: PUSH
44486: LD_INT 1
44488: PUSH
44489: LD_INT 1
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: LIST
44496: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
44497: LD_VAR 0 6
44501: PPUSH
44502: CALL_OW 264
44506: PUSH
44507: LD_INT 29
44509: PUSH
44510: EMPTY
44511: LIST
44512: IN
44513: IFFALSE 44534
// points := [ 70 , 200 , 400 ] ;
44515: LD_ADDR_VAR 0 9
44519: PUSH
44520: LD_INT 70
44522: PUSH
44523: LD_INT 200
44525: PUSH
44526: LD_INT 400
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: LIST
44533: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
44534: LD_VAR 0 6
44538: PPUSH
44539: CALL_OW 264
44543: PUSH
44544: LD_INT 14
44546: PUSH
44547: LD_INT 53
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: IN
44554: IFFALSE 44575
// points := [ 40 , 10 , 20 ] ;
44556: LD_ADDR_VAR 0 9
44560: PUSH
44561: LD_INT 40
44563: PUSH
44564: LD_INT 10
44566: PUSH
44567: LD_INT 20
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: LIST
44574: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
44575: LD_VAR 0 6
44579: PPUSH
44580: CALL_OW 264
44584: PUSH
44585: LD_INT 9
44587: PUSH
44588: EMPTY
44589: LIST
44590: IN
44591: IFFALSE 44612
// points := [ 5 , 70 , 20 ] ;
44593: LD_ADDR_VAR 0 9
44597: PUSH
44598: LD_INT 5
44600: PUSH
44601: LD_INT 70
44603: PUSH
44604: LD_INT 20
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: LIST
44611: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
44612: LD_VAR 0 6
44616: PPUSH
44617: CALL_OW 264
44621: PUSH
44622: LD_INT 10
44624: PUSH
44625: EMPTY
44626: LIST
44627: IN
44628: IFFALSE 44649
// points := [ 35 , 110 , 70 ] ;
44630: LD_ADDR_VAR 0 9
44634: PUSH
44635: LD_INT 35
44637: PUSH
44638: LD_INT 110
44640: PUSH
44641: LD_INT 70
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: LIST
44648: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
44649: LD_VAR 0 6
44653: PPUSH
44654: CALL_OW 265
44658: PUSH
44659: LD_INT 25
44661: EQUAL
44662: IFFALSE 44683
// points := [ 80 , 65 , 100 ] ;
44664: LD_ADDR_VAR 0 9
44668: PUSH
44669: LD_INT 80
44671: PUSH
44672: LD_INT 65
44674: PUSH
44675: LD_INT 100
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: LIST
44682: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
44683: LD_VAR 0 6
44687: PPUSH
44688: CALL_OW 263
44692: PUSH
44693: LD_INT 1
44695: EQUAL
44696: IFFALSE 44731
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
44698: LD_ADDR_VAR 0 10
44702: PUSH
44703: LD_VAR 0 10
44707: PUSH
44708: LD_VAR 0 6
44712: PPUSH
44713: CALL_OW 311
44717: PPUSH
44718: LD_INT 3
44720: PPUSH
44721: CALL_OW 259
44725: PUSH
44726: LD_INT 4
44728: MUL
44729: MUL
44730: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44731: LD_VAR 0 6
44735: PPUSH
44736: CALL_OW 263
44740: PUSH
44741: LD_INT 2
44743: EQUAL
44744: IFFALSE 44795
// begin j := IsControledBy ( i ) ;
44746: LD_ADDR_VAR 0 7
44750: PUSH
44751: LD_VAR 0 6
44755: PPUSH
44756: CALL_OW 312
44760: ST_TO_ADDR
// if j then
44761: LD_VAR 0 7
44765: IFFALSE 44795
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44767: LD_ADDR_VAR 0 10
44771: PUSH
44772: LD_VAR 0 10
44776: PUSH
44777: LD_VAR 0 7
44781: PPUSH
44782: LD_INT 3
44784: PPUSH
44785: CALL_OW 259
44789: PUSH
44790: LD_INT 3
44792: MUL
44793: MUL
44794: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44795: LD_VAR 0 6
44799: PPUSH
44800: CALL_OW 264
44804: PUSH
44805: LD_INT 5
44807: PUSH
44808: LD_INT 6
44810: PUSH
44811: LD_INT 46
44813: PUSH
44814: LD_INT 44
44816: PUSH
44817: LD_INT 47
44819: PUSH
44820: LD_INT 45
44822: PUSH
44823: LD_INT 28
44825: PUSH
44826: LD_INT 7
44828: PUSH
44829: LD_INT 27
44831: PUSH
44832: LD_INT 29
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: IN
44847: PUSH
44848: LD_VAR 0 1
44852: PPUSH
44853: LD_INT 52
44855: PPUSH
44856: CALL_OW 321
44860: PUSH
44861: LD_INT 2
44863: EQUAL
44864: AND
44865: IFFALSE 44882
// bpoints := bpoints * 1.2 ;
44867: LD_ADDR_VAR 0 10
44871: PUSH
44872: LD_VAR 0 10
44876: PUSH
44877: LD_REAL  1.20000000000000E+0000
44880: MUL
44881: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44882: LD_VAR 0 6
44886: PPUSH
44887: CALL_OW 264
44891: PUSH
44892: LD_INT 6
44894: PUSH
44895: LD_INT 46
44897: PUSH
44898: LD_INT 47
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: LIST
44905: IN
44906: IFFALSE 44923
// bpoints := bpoints * 1.2 ;
44908: LD_ADDR_VAR 0 10
44912: PUSH
44913: LD_VAR 0 10
44917: PUSH
44918: LD_REAL  1.20000000000000E+0000
44921: MUL
44922: ST_TO_ADDR
// end ; unit_building :
44923: GO 44937
44925: LD_INT 3
44927: DOUBLE
44928: EQUAL
44929: IFTRUE 44933
44931: GO 44936
44933: POP
// ; end ;
44934: GO 44937
44936: POP
// for j = 1 to 3 do
44937: LD_ADDR_VAR 0 7
44941: PUSH
44942: DOUBLE
44943: LD_INT 1
44945: DEC
44946: ST_TO_ADDR
44947: LD_INT 3
44949: PUSH
44950: FOR_TO
44951: IFFALSE 45004
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44953: LD_ADDR_VAR 0 5
44957: PUSH
44958: LD_VAR 0 5
44962: PPUSH
44963: LD_VAR 0 7
44967: PPUSH
44968: LD_VAR 0 5
44972: PUSH
44973: LD_VAR 0 7
44977: ARRAY
44978: PUSH
44979: LD_VAR 0 9
44983: PUSH
44984: LD_VAR 0 7
44988: ARRAY
44989: PUSH
44990: LD_VAR 0 10
44994: MUL
44995: PLUS
44996: PPUSH
44997: CALL_OW 1
45001: ST_TO_ADDR
45002: GO 44950
45004: POP
45005: POP
// end ;
45006: GO 43483
45008: POP
45009: POP
// result := Replace ( result , 4 , tmp ) ;
45010: LD_ADDR_VAR 0 5
45014: PUSH
45015: LD_VAR 0 5
45019: PPUSH
45020: LD_INT 4
45022: PPUSH
45023: LD_VAR 0 8
45027: PPUSH
45028: CALL_OW 1
45032: ST_TO_ADDR
// end ;
45033: LD_VAR 0 5
45037: RET
// export function DangerAtRange ( unit , range ) ; begin
45038: LD_INT 0
45040: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45041: LD_ADDR_VAR 0 3
45045: PUSH
45046: LD_VAR 0 1
45050: PPUSH
45051: CALL_OW 255
45055: PPUSH
45056: LD_VAR 0 1
45060: PPUSH
45061: CALL_OW 250
45065: PPUSH
45066: LD_VAR 0 1
45070: PPUSH
45071: CALL_OW 251
45075: PPUSH
45076: LD_VAR 0 2
45080: PPUSH
45081: CALL 43335 0 4
45085: ST_TO_ADDR
// end ;
45086: LD_VAR 0 3
45090: RET
// export function DangerInArea ( side , area ) ; begin
45091: LD_INT 0
45093: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45094: LD_ADDR_VAR 0 3
45098: PUSH
45099: LD_VAR 0 2
45103: PPUSH
45104: LD_INT 81
45106: PUSH
45107: LD_VAR 0 1
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PPUSH
45116: CALL_OW 70
45120: ST_TO_ADDR
// end ;
45121: LD_VAR 0 3
45125: RET
// export function IsExtension ( b ) ; begin
45126: LD_INT 0
45128: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45129: LD_ADDR_VAR 0 2
45133: PUSH
45134: LD_VAR 0 1
45138: PUSH
45139: LD_INT 23
45141: PUSH
45142: LD_INT 20
45144: PUSH
45145: LD_INT 22
45147: PUSH
45148: LD_INT 17
45150: PUSH
45151: LD_INT 24
45153: PUSH
45154: LD_INT 21
45156: PUSH
45157: LD_INT 19
45159: PUSH
45160: LD_INT 16
45162: PUSH
45163: LD_INT 25
45165: PUSH
45166: LD_INT 18
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: IN
45181: ST_TO_ADDR
// end ;
45182: LD_VAR 0 2
45186: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45187: LD_INT 0
45189: PPUSH
45190: PPUSH
45191: PPUSH
// result := [ ] ;
45192: LD_ADDR_VAR 0 4
45196: PUSH
45197: EMPTY
45198: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45199: LD_ADDR_VAR 0 5
45203: PUSH
45204: LD_VAR 0 2
45208: PPUSH
45209: LD_INT 21
45211: PUSH
45212: LD_INT 3
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PPUSH
45219: CALL_OW 70
45223: ST_TO_ADDR
// if not tmp then
45224: LD_VAR 0 5
45228: NOT
45229: IFFALSE 45233
// exit ;
45231: GO 45297
// if checkLink then
45233: LD_VAR 0 3
45237: IFFALSE 45287
// begin for i in tmp do
45239: LD_ADDR_VAR 0 6
45243: PUSH
45244: LD_VAR 0 5
45248: PUSH
45249: FOR_IN
45250: IFFALSE 45285
// if GetBase ( i ) <> base then
45252: LD_VAR 0 6
45256: PPUSH
45257: CALL_OW 274
45261: PUSH
45262: LD_VAR 0 1
45266: NONEQUAL
45267: IFFALSE 45283
// ComLinkToBase ( base , i ) ;
45269: LD_VAR 0 1
45273: PPUSH
45274: LD_VAR 0 6
45278: PPUSH
45279: CALL_OW 169
45283: GO 45249
45285: POP
45286: POP
// end ; result := tmp ;
45287: LD_ADDR_VAR 0 4
45291: PUSH
45292: LD_VAR 0 5
45296: ST_TO_ADDR
// end ;
45297: LD_VAR 0 4
45301: RET
// export function ComComplete ( units , b ) ; var i ; begin
45302: LD_INT 0
45304: PPUSH
45305: PPUSH
// if not units then
45306: LD_VAR 0 1
45310: NOT
45311: IFFALSE 45315
// exit ;
45313: GO 45405
// for i in units do
45315: LD_ADDR_VAR 0 4
45319: PUSH
45320: LD_VAR 0 1
45324: PUSH
45325: FOR_IN
45326: IFFALSE 45403
// if BuildingStatus ( b ) = bs_build then
45328: LD_VAR 0 2
45332: PPUSH
45333: CALL_OW 461
45337: PUSH
45338: LD_INT 1
45340: EQUAL
45341: IFFALSE 45401
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45343: LD_VAR 0 4
45347: PPUSH
45348: LD_STRING h
45350: PUSH
45351: LD_VAR 0 2
45355: PPUSH
45356: CALL_OW 250
45360: PUSH
45361: LD_VAR 0 2
45365: PPUSH
45366: CALL_OW 251
45370: PUSH
45371: LD_VAR 0 2
45375: PUSH
45376: LD_INT 0
45378: PUSH
45379: LD_INT 0
45381: PUSH
45382: LD_INT 0
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: PUSH
45394: EMPTY
45395: LIST
45396: PPUSH
45397: CALL_OW 446
45401: GO 45325
45403: POP
45404: POP
// end ;
45405: LD_VAR 0 3
45409: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
45410: LD_INT 0
45412: PPUSH
45413: PPUSH
45414: PPUSH
45415: PPUSH
45416: PPUSH
45417: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
45418: LD_VAR 0 1
45422: NOT
45423: PUSH
45424: LD_VAR 0 1
45428: PPUSH
45429: CALL_OW 263
45433: PUSH
45434: LD_INT 2
45436: NONEQUAL
45437: OR
45438: IFFALSE 45442
// exit ;
45440: GO 45758
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
45442: LD_ADDR_VAR 0 6
45446: PUSH
45447: LD_INT 22
45449: PUSH
45450: LD_VAR 0 1
45454: PPUSH
45455: CALL_OW 255
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 2
45466: PUSH
45467: LD_INT 30
45469: PUSH
45470: LD_INT 36
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 34
45479: PUSH
45480: LD_INT 31
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: LIST
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PPUSH
45496: CALL_OW 69
45500: ST_TO_ADDR
// if not tmp then
45501: LD_VAR 0 6
45505: NOT
45506: IFFALSE 45510
// exit ;
45508: GO 45758
// result := [ ] ;
45510: LD_ADDR_VAR 0 2
45514: PUSH
45515: EMPTY
45516: ST_TO_ADDR
// for i in tmp do
45517: LD_ADDR_VAR 0 3
45521: PUSH
45522: LD_VAR 0 6
45526: PUSH
45527: FOR_IN
45528: IFFALSE 45599
// begin t := UnitsInside ( i ) ;
45530: LD_ADDR_VAR 0 4
45534: PUSH
45535: LD_VAR 0 3
45539: PPUSH
45540: CALL_OW 313
45544: ST_TO_ADDR
// if t then
45545: LD_VAR 0 4
45549: IFFALSE 45597
// for j in t do
45551: LD_ADDR_VAR 0 7
45555: PUSH
45556: LD_VAR 0 4
45560: PUSH
45561: FOR_IN
45562: IFFALSE 45595
// result := Replace ( result , result + 1 , j ) ;
45564: LD_ADDR_VAR 0 2
45568: PUSH
45569: LD_VAR 0 2
45573: PPUSH
45574: LD_VAR 0 2
45578: PUSH
45579: LD_INT 1
45581: PLUS
45582: PPUSH
45583: LD_VAR 0 7
45587: PPUSH
45588: CALL_OW 1
45592: ST_TO_ADDR
45593: GO 45561
45595: POP
45596: POP
// end ;
45597: GO 45527
45599: POP
45600: POP
// if not result then
45601: LD_VAR 0 2
45605: NOT
45606: IFFALSE 45610
// exit ;
45608: GO 45758
// mech := result [ 1 ] ;
45610: LD_ADDR_VAR 0 5
45614: PUSH
45615: LD_VAR 0 2
45619: PUSH
45620: LD_INT 1
45622: ARRAY
45623: ST_TO_ADDR
// if result > 1 then
45624: LD_VAR 0 2
45628: PUSH
45629: LD_INT 1
45631: GREATER
45632: IFFALSE 45744
// begin for i = 2 to result do
45634: LD_ADDR_VAR 0 3
45638: PUSH
45639: DOUBLE
45640: LD_INT 2
45642: DEC
45643: ST_TO_ADDR
45644: LD_VAR 0 2
45648: PUSH
45649: FOR_TO
45650: IFFALSE 45742
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
45652: LD_ADDR_VAR 0 4
45656: PUSH
45657: LD_VAR 0 2
45661: PUSH
45662: LD_VAR 0 3
45666: ARRAY
45667: PPUSH
45668: LD_INT 3
45670: PPUSH
45671: CALL_OW 259
45675: PUSH
45676: LD_VAR 0 2
45680: PUSH
45681: LD_VAR 0 3
45685: ARRAY
45686: PPUSH
45687: CALL_OW 432
45691: MINUS
45692: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
45693: LD_VAR 0 4
45697: PUSH
45698: LD_VAR 0 5
45702: PPUSH
45703: LD_INT 3
45705: PPUSH
45706: CALL_OW 259
45710: PUSH
45711: LD_VAR 0 5
45715: PPUSH
45716: CALL_OW 432
45720: MINUS
45721: GREATEREQUAL
45722: IFFALSE 45740
// mech := result [ i ] ;
45724: LD_ADDR_VAR 0 5
45728: PUSH
45729: LD_VAR 0 2
45733: PUSH
45734: LD_VAR 0 3
45738: ARRAY
45739: ST_TO_ADDR
// end ;
45740: GO 45649
45742: POP
45743: POP
// end ; ComLinkTo ( vehicle , mech ) ;
45744: LD_VAR 0 1
45748: PPUSH
45749: LD_VAR 0 5
45753: PPUSH
45754: CALL_OW 135
// end ;
45758: LD_VAR 0 2
45762: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45763: LD_INT 0
45765: PPUSH
45766: PPUSH
45767: PPUSH
45768: PPUSH
45769: PPUSH
45770: PPUSH
45771: PPUSH
45772: PPUSH
45773: PPUSH
45774: PPUSH
45775: PPUSH
45776: PPUSH
45777: PPUSH
// result := [ ] ;
45778: LD_ADDR_VAR 0 7
45782: PUSH
45783: EMPTY
45784: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45785: LD_VAR 0 1
45789: PPUSH
45790: CALL_OW 266
45794: PUSH
45795: LD_INT 0
45797: PUSH
45798: LD_INT 1
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: IN
45805: NOT
45806: IFFALSE 45810
// exit ;
45808: GO 47444
// if name then
45810: LD_VAR 0 3
45814: IFFALSE 45830
// SetBName ( base_dep , name ) ;
45816: LD_VAR 0 1
45820: PPUSH
45821: LD_VAR 0 3
45825: PPUSH
45826: CALL_OW 500
// base := GetBase ( base_dep ) ;
45830: LD_ADDR_VAR 0 15
45834: PUSH
45835: LD_VAR 0 1
45839: PPUSH
45840: CALL_OW 274
45844: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45845: LD_ADDR_VAR 0 16
45849: PUSH
45850: LD_VAR 0 1
45854: PPUSH
45855: CALL_OW 255
45859: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45860: LD_ADDR_VAR 0 17
45864: PUSH
45865: LD_VAR 0 1
45869: PPUSH
45870: CALL_OW 248
45874: ST_TO_ADDR
// if sources then
45875: LD_VAR 0 5
45879: IFFALSE 45926
// for i = 1 to 3 do
45881: LD_ADDR_VAR 0 8
45885: PUSH
45886: DOUBLE
45887: LD_INT 1
45889: DEC
45890: ST_TO_ADDR
45891: LD_INT 3
45893: PUSH
45894: FOR_TO
45895: IFFALSE 45924
// AddResourceType ( base , i , sources [ i ] ) ;
45897: LD_VAR 0 15
45901: PPUSH
45902: LD_VAR 0 8
45906: PPUSH
45907: LD_VAR 0 5
45911: PUSH
45912: LD_VAR 0 8
45916: ARRAY
45917: PPUSH
45918: CALL_OW 276
45922: GO 45894
45924: POP
45925: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45926: LD_ADDR_VAR 0 18
45930: PUSH
45931: LD_VAR 0 15
45935: PPUSH
45936: LD_VAR 0 2
45940: PPUSH
45941: LD_INT 1
45943: PPUSH
45944: CALL 45187 0 3
45948: ST_TO_ADDR
// InitHc ;
45949: CALL_OW 19
// InitUc ;
45953: CALL_OW 18
// uc_side := side ;
45957: LD_ADDR_OWVAR 20
45961: PUSH
45962: LD_VAR 0 16
45966: ST_TO_ADDR
// uc_nation := nation ;
45967: LD_ADDR_OWVAR 21
45971: PUSH
45972: LD_VAR 0 17
45976: ST_TO_ADDR
// if buildings then
45977: LD_VAR 0 18
45981: IFFALSE 47303
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45983: LD_ADDR_VAR 0 19
45987: PUSH
45988: LD_VAR 0 18
45992: PPUSH
45993: LD_INT 2
45995: PUSH
45996: LD_INT 30
45998: PUSH
45999: LD_INT 29
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 30
46008: PUSH
46009: LD_INT 30
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: LIST
46020: PPUSH
46021: CALL_OW 72
46025: ST_TO_ADDR
// if tmp then
46026: LD_VAR 0 19
46030: IFFALSE 46078
// for i in tmp do
46032: LD_ADDR_VAR 0 8
46036: PUSH
46037: LD_VAR 0 19
46041: PUSH
46042: FOR_IN
46043: IFFALSE 46076
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46045: LD_VAR 0 8
46049: PPUSH
46050: CALL_OW 250
46054: PPUSH
46055: LD_VAR 0 8
46059: PPUSH
46060: CALL_OW 251
46064: PPUSH
46065: LD_VAR 0 16
46069: PPUSH
46070: CALL_OW 441
46074: GO 46042
46076: POP
46077: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46078: LD_VAR 0 18
46082: PPUSH
46083: LD_INT 2
46085: PUSH
46086: LD_INT 30
46088: PUSH
46089: LD_INT 32
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 30
46098: PUSH
46099: LD_INT 33
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: LIST
46110: PPUSH
46111: CALL_OW 72
46115: IFFALSE 46203
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46117: LD_ADDR_VAR 0 8
46121: PUSH
46122: LD_VAR 0 18
46126: PPUSH
46127: LD_INT 2
46129: PUSH
46130: LD_INT 30
46132: PUSH
46133: LD_INT 32
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 30
46142: PUSH
46143: LD_INT 33
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: LIST
46154: PPUSH
46155: CALL_OW 72
46159: PUSH
46160: FOR_IN
46161: IFFALSE 46201
// begin if not GetBWeapon ( i ) then
46163: LD_VAR 0 8
46167: PPUSH
46168: CALL_OW 269
46172: NOT
46173: IFFALSE 46199
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46175: LD_VAR 0 8
46179: PPUSH
46180: LD_VAR 0 8
46184: PPUSH
46185: LD_VAR 0 2
46189: PPUSH
46190: CALL 47449 0 2
46194: PPUSH
46195: CALL_OW 431
// end ;
46199: GO 46160
46201: POP
46202: POP
// end ; for i = 1 to personel do
46203: LD_ADDR_VAR 0 8
46207: PUSH
46208: DOUBLE
46209: LD_INT 1
46211: DEC
46212: ST_TO_ADDR
46213: LD_VAR 0 6
46217: PUSH
46218: FOR_TO
46219: IFFALSE 47283
// begin if i > 4 then
46221: LD_VAR 0 8
46225: PUSH
46226: LD_INT 4
46228: GREATER
46229: IFFALSE 46233
// break ;
46231: GO 47283
// case i of 1 :
46233: LD_VAR 0 8
46237: PUSH
46238: LD_INT 1
46240: DOUBLE
46241: EQUAL
46242: IFTRUE 46246
46244: GO 46326
46246: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46247: LD_ADDR_VAR 0 12
46251: PUSH
46252: LD_VAR 0 18
46256: PPUSH
46257: LD_INT 22
46259: PUSH
46260: LD_VAR 0 16
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 58
46271: PUSH
46272: EMPTY
46273: LIST
46274: PUSH
46275: LD_INT 2
46277: PUSH
46278: LD_INT 30
46280: PUSH
46281: LD_INT 32
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 30
46290: PUSH
46291: LD_INT 4
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 30
46300: PUSH
46301: LD_INT 5
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: LIST
46318: PPUSH
46319: CALL_OW 72
46323: ST_TO_ADDR
46324: GO 46548
46326: LD_INT 2
46328: DOUBLE
46329: EQUAL
46330: IFTRUE 46334
46332: GO 46396
46334: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46335: LD_ADDR_VAR 0 12
46339: PUSH
46340: LD_VAR 0 18
46344: PPUSH
46345: LD_INT 22
46347: PUSH
46348: LD_VAR 0 16
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 2
46359: PUSH
46360: LD_INT 30
46362: PUSH
46363: LD_INT 0
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 30
46372: PUSH
46373: LD_INT 1
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: LIST
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PPUSH
46389: CALL_OW 72
46393: ST_TO_ADDR
46394: GO 46548
46396: LD_INT 3
46398: DOUBLE
46399: EQUAL
46400: IFTRUE 46404
46402: GO 46466
46404: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
46405: LD_ADDR_VAR 0 12
46409: PUSH
46410: LD_VAR 0 18
46414: PPUSH
46415: LD_INT 22
46417: PUSH
46418: LD_VAR 0 16
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 2
46429: PUSH
46430: LD_INT 30
46432: PUSH
46433: LD_INT 2
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 30
46442: PUSH
46443: LD_INT 3
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: LIST
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PPUSH
46459: CALL_OW 72
46463: ST_TO_ADDR
46464: GO 46548
46466: LD_INT 4
46468: DOUBLE
46469: EQUAL
46470: IFTRUE 46474
46472: GO 46547
46474: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
46475: LD_ADDR_VAR 0 12
46479: PUSH
46480: LD_VAR 0 18
46484: PPUSH
46485: LD_INT 22
46487: PUSH
46488: LD_VAR 0 16
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 2
46499: PUSH
46500: LD_INT 30
46502: PUSH
46503: LD_INT 6
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 30
46512: PUSH
46513: LD_INT 7
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 30
46522: PUSH
46523: LD_INT 8
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PPUSH
46540: CALL_OW 72
46544: ST_TO_ADDR
46545: GO 46548
46547: POP
// if i = 1 then
46548: LD_VAR 0 8
46552: PUSH
46553: LD_INT 1
46555: EQUAL
46556: IFFALSE 46667
// begin tmp := [ ] ;
46558: LD_ADDR_VAR 0 19
46562: PUSH
46563: EMPTY
46564: ST_TO_ADDR
// for j in f do
46565: LD_ADDR_VAR 0 9
46569: PUSH
46570: LD_VAR 0 12
46574: PUSH
46575: FOR_IN
46576: IFFALSE 46649
// if GetBType ( j ) = b_bunker then
46578: LD_VAR 0 9
46582: PPUSH
46583: CALL_OW 266
46587: PUSH
46588: LD_INT 32
46590: EQUAL
46591: IFFALSE 46618
// tmp := Insert ( tmp , 1 , j ) else
46593: LD_ADDR_VAR 0 19
46597: PUSH
46598: LD_VAR 0 19
46602: PPUSH
46603: LD_INT 1
46605: PPUSH
46606: LD_VAR 0 9
46610: PPUSH
46611: CALL_OW 2
46615: ST_TO_ADDR
46616: GO 46647
// tmp := Insert ( tmp , tmp + 1 , j ) ;
46618: LD_ADDR_VAR 0 19
46622: PUSH
46623: LD_VAR 0 19
46627: PPUSH
46628: LD_VAR 0 19
46632: PUSH
46633: LD_INT 1
46635: PLUS
46636: PPUSH
46637: LD_VAR 0 9
46641: PPUSH
46642: CALL_OW 2
46646: ST_TO_ADDR
46647: GO 46575
46649: POP
46650: POP
// if tmp then
46651: LD_VAR 0 19
46655: IFFALSE 46667
// f := tmp ;
46657: LD_ADDR_VAR 0 12
46661: PUSH
46662: LD_VAR 0 19
46666: ST_TO_ADDR
// end ; x := personel [ i ] ;
46667: LD_ADDR_VAR 0 13
46671: PUSH
46672: LD_VAR 0 6
46676: PUSH
46677: LD_VAR 0 8
46681: ARRAY
46682: ST_TO_ADDR
// if x = - 1 then
46683: LD_VAR 0 13
46687: PUSH
46688: LD_INT 1
46690: NEG
46691: EQUAL
46692: IFFALSE 46901
// begin for j in f do
46694: LD_ADDR_VAR 0 9
46698: PUSH
46699: LD_VAR 0 12
46703: PUSH
46704: FOR_IN
46705: IFFALSE 46897
// repeat InitHc ;
46707: CALL_OW 19
// if GetBType ( j ) = b_barracks then
46711: LD_VAR 0 9
46715: PPUSH
46716: CALL_OW 266
46720: PUSH
46721: LD_INT 5
46723: EQUAL
46724: IFFALSE 46794
// begin if UnitsInside ( j ) < 3 then
46726: LD_VAR 0 9
46730: PPUSH
46731: CALL_OW 313
46735: PUSH
46736: LD_INT 3
46738: LESS
46739: IFFALSE 46775
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46741: LD_INT 0
46743: PPUSH
46744: LD_INT 5
46746: PUSH
46747: LD_INT 8
46749: PUSH
46750: LD_INT 9
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: LIST
46757: PUSH
46758: LD_VAR 0 17
46762: ARRAY
46763: PPUSH
46764: LD_VAR 0 4
46768: PPUSH
46769: CALL_OW 380
46773: GO 46792
// PrepareHuman ( false , i , skill ) ;
46775: LD_INT 0
46777: PPUSH
46778: LD_VAR 0 8
46782: PPUSH
46783: LD_VAR 0 4
46787: PPUSH
46788: CALL_OW 380
// end else
46792: GO 46811
// PrepareHuman ( false , i , skill ) ;
46794: LD_INT 0
46796: PPUSH
46797: LD_VAR 0 8
46801: PPUSH
46802: LD_VAR 0 4
46806: PPUSH
46807: CALL_OW 380
// un := CreateHuman ;
46811: LD_ADDR_VAR 0 14
46815: PUSH
46816: CALL_OW 44
46820: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46821: LD_ADDR_VAR 0 7
46825: PUSH
46826: LD_VAR 0 7
46830: PPUSH
46831: LD_INT 1
46833: PPUSH
46834: LD_VAR 0 14
46838: PPUSH
46839: CALL_OW 2
46843: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46844: LD_VAR 0 14
46848: PPUSH
46849: LD_VAR 0 9
46853: PPUSH
46854: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46858: LD_VAR 0 9
46862: PPUSH
46863: CALL_OW 313
46867: PUSH
46868: LD_INT 6
46870: EQUAL
46871: PUSH
46872: LD_VAR 0 9
46876: PPUSH
46877: CALL_OW 266
46881: PUSH
46882: LD_INT 32
46884: PUSH
46885: LD_INT 31
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: IN
46892: OR
46893: IFFALSE 46707
46895: GO 46704
46897: POP
46898: POP
// end else
46899: GO 47281
// for j = 1 to x do
46901: LD_ADDR_VAR 0 9
46905: PUSH
46906: DOUBLE
46907: LD_INT 1
46909: DEC
46910: ST_TO_ADDR
46911: LD_VAR 0 13
46915: PUSH
46916: FOR_TO
46917: IFFALSE 47279
// begin InitHc ;
46919: CALL_OW 19
// if not f then
46923: LD_VAR 0 12
46927: NOT
46928: IFFALSE 47017
// begin PrepareHuman ( false , i , skill ) ;
46930: LD_INT 0
46932: PPUSH
46933: LD_VAR 0 8
46937: PPUSH
46938: LD_VAR 0 4
46942: PPUSH
46943: CALL_OW 380
// un := CreateHuman ;
46947: LD_ADDR_VAR 0 14
46951: PUSH
46952: CALL_OW 44
46956: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46957: LD_ADDR_VAR 0 7
46961: PUSH
46962: LD_VAR 0 7
46966: PPUSH
46967: LD_INT 1
46969: PPUSH
46970: LD_VAR 0 14
46974: PPUSH
46975: CALL_OW 2
46979: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46980: LD_VAR 0 14
46984: PPUSH
46985: LD_VAR 0 1
46989: PPUSH
46990: CALL_OW 250
46994: PPUSH
46995: LD_VAR 0 1
46999: PPUSH
47000: CALL_OW 251
47004: PPUSH
47005: LD_INT 10
47007: PPUSH
47008: LD_INT 0
47010: PPUSH
47011: CALL_OW 50
// continue ;
47015: GO 46916
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47017: LD_VAR 0 12
47021: PUSH
47022: LD_INT 1
47024: ARRAY
47025: PPUSH
47026: CALL_OW 313
47030: PUSH
47031: LD_VAR 0 12
47035: PUSH
47036: LD_INT 1
47038: ARRAY
47039: PPUSH
47040: CALL_OW 266
47044: PUSH
47045: LD_INT 32
47047: PUSH
47048: LD_INT 31
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: IN
47055: AND
47056: PUSH
47057: LD_VAR 0 12
47061: PUSH
47062: LD_INT 1
47064: ARRAY
47065: PPUSH
47066: CALL_OW 313
47070: PUSH
47071: LD_INT 6
47073: EQUAL
47074: OR
47075: IFFALSE 47095
// f := Delete ( f , 1 ) ;
47077: LD_ADDR_VAR 0 12
47081: PUSH
47082: LD_VAR 0 12
47086: PPUSH
47087: LD_INT 1
47089: PPUSH
47090: CALL_OW 3
47094: ST_TO_ADDR
// if not f then
47095: LD_VAR 0 12
47099: NOT
47100: IFFALSE 47118
// begin x := x + 2 ;
47102: LD_ADDR_VAR 0 13
47106: PUSH
47107: LD_VAR 0 13
47111: PUSH
47112: LD_INT 2
47114: PLUS
47115: ST_TO_ADDR
// continue ;
47116: GO 46916
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47118: LD_VAR 0 12
47122: PUSH
47123: LD_INT 1
47125: ARRAY
47126: PPUSH
47127: CALL_OW 266
47131: PUSH
47132: LD_INT 5
47134: EQUAL
47135: IFFALSE 47209
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47137: LD_VAR 0 12
47141: PUSH
47142: LD_INT 1
47144: ARRAY
47145: PPUSH
47146: CALL_OW 313
47150: PUSH
47151: LD_INT 3
47153: LESS
47154: IFFALSE 47190
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47156: LD_INT 0
47158: PPUSH
47159: LD_INT 5
47161: PUSH
47162: LD_INT 8
47164: PUSH
47165: LD_INT 9
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: LIST
47172: PUSH
47173: LD_VAR 0 17
47177: ARRAY
47178: PPUSH
47179: LD_VAR 0 4
47183: PPUSH
47184: CALL_OW 380
47188: GO 47207
// PrepareHuman ( false , i , skill ) ;
47190: LD_INT 0
47192: PPUSH
47193: LD_VAR 0 8
47197: PPUSH
47198: LD_VAR 0 4
47202: PPUSH
47203: CALL_OW 380
// end else
47207: GO 47226
// PrepareHuman ( false , i , skill ) ;
47209: LD_INT 0
47211: PPUSH
47212: LD_VAR 0 8
47216: PPUSH
47217: LD_VAR 0 4
47221: PPUSH
47222: CALL_OW 380
// un := CreateHuman ;
47226: LD_ADDR_VAR 0 14
47230: PUSH
47231: CALL_OW 44
47235: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47236: LD_ADDR_VAR 0 7
47240: PUSH
47241: LD_VAR 0 7
47245: PPUSH
47246: LD_INT 1
47248: PPUSH
47249: LD_VAR 0 14
47253: PPUSH
47254: CALL_OW 2
47258: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47259: LD_VAR 0 14
47263: PPUSH
47264: LD_VAR 0 12
47268: PUSH
47269: LD_INT 1
47271: ARRAY
47272: PPUSH
47273: CALL_OW 52
// end ;
47277: GO 46916
47279: POP
47280: POP
// end ;
47281: GO 46218
47283: POP
47284: POP
// result := result ^ buildings ;
47285: LD_ADDR_VAR 0 7
47289: PUSH
47290: LD_VAR 0 7
47294: PUSH
47295: LD_VAR 0 18
47299: ADD
47300: ST_TO_ADDR
// end else
47301: GO 47444
// begin for i = 1 to personel do
47303: LD_ADDR_VAR 0 8
47307: PUSH
47308: DOUBLE
47309: LD_INT 1
47311: DEC
47312: ST_TO_ADDR
47313: LD_VAR 0 6
47317: PUSH
47318: FOR_TO
47319: IFFALSE 47442
// begin if i > 4 then
47321: LD_VAR 0 8
47325: PUSH
47326: LD_INT 4
47328: GREATER
47329: IFFALSE 47333
// break ;
47331: GO 47442
// x := personel [ i ] ;
47333: LD_ADDR_VAR 0 13
47337: PUSH
47338: LD_VAR 0 6
47342: PUSH
47343: LD_VAR 0 8
47347: ARRAY
47348: ST_TO_ADDR
// if x = - 1 then
47349: LD_VAR 0 13
47353: PUSH
47354: LD_INT 1
47356: NEG
47357: EQUAL
47358: IFFALSE 47362
// continue ;
47360: GO 47318
// PrepareHuman ( false , i , skill ) ;
47362: LD_INT 0
47364: PPUSH
47365: LD_VAR 0 8
47369: PPUSH
47370: LD_VAR 0 4
47374: PPUSH
47375: CALL_OW 380
// un := CreateHuman ;
47379: LD_ADDR_VAR 0 14
47383: PUSH
47384: CALL_OW 44
47388: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47389: LD_VAR 0 14
47393: PPUSH
47394: LD_VAR 0 1
47398: PPUSH
47399: CALL_OW 250
47403: PPUSH
47404: LD_VAR 0 1
47408: PPUSH
47409: CALL_OW 251
47413: PPUSH
47414: LD_INT 10
47416: PPUSH
47417: LD_INT 0
47419: PPUSH
47420: CALL_OW 50
// result := result ^ un ;
47424: LD_ADDR_VAR 0 7
47428: PUSH
47429: LD_VAR 0 7
47433: PUSH
47434: LD_VAR 0 14
47438: ADD
47439: ST_TO_ADDR
// end ;
47440: GO 47318
47442: POP
47443: POP
// end ; end ;
47444: LD_VAR 0 7
47448: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
47449: LD_INT 0
47451: PPUSH
47452: PPUSH
47453: PPUSH
47454: PPUSH
47455: PPUSH
47456: PPUSH
47457: PPUSH
47458: PPUSH
47459: PPUSH
47460: PPUSH
47461: PPUSH
47462: PPUSH
47463: PPUSH
47464: PPUSH
47465: PPUSH
47466: PPUSH
// result := false ;
47467: LD_ADDR_VAR 0 3
47471: PUSH
47472: LD_INT 0
47474: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
47475: LD_VAR 0 1
47479: NOT
47480: PUSH
47481: LD_VAR 0 1
47485: PPUSH
47486: CALL_OW 266
47490: PUSH
47491: LD_INT 32
47493: PUSH
47494: LD_INT 33
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: IN
47501: NOT
47502: OR
47503: IFFALSE 47507
// exit ;
47505: GO 48616
// nat := GetNation ( tower ) ;
47507: LD_ADDR_VAR 0 12
47511: PUSH
47512: LD_VAR 0 1
47516: PPUSH
47517: CALL_OW 248
47521: ST_TO_ADDR
// side := GetSide ( tower ) ;
47522: LD_ADDR_VAR 0 16
47526: PUSH
47527: LD_VAR 0 1
47531: PPUSH
47532: CALL_OW 255
47536: ST_TO_ADDR
// x := GetX ( tower ) ;
47537: LD_ADDR_VAR 0 10
47541: PUSH
47542: LD_VAR 0 1
47546: PPUSH
47547: CALL_OW 250
47551: ST_TO_ADDR
// y := GetY ( tower ) ;
47552: LD_ADDR_VAR 0 11
47556: PUSH
47557: LD_VAR 0 1
47561: PPUSH
47562: CALL_OW 251
47566: ST_TO_ADDR
// if not x or not y then
47567: LD_VAR 0 10
47571: NOT
47572: PUSH
47573: LD_VAR 0 11
47577: NOT
47578: OR
47579: IFFALSE 47583
// exit ;
47581: GO 48616
// weapon := 0 ;
47583: LD_ADDR_VAR 0 18
47587: PUSH
47588: LD_INT 0
47590: ST_TO_ADDR
// fac_list := [ ] ;
47591: LD_ADDR_VAR 0 17
47595: PUSH
47596: EMPTY
47597: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
47598: LD_ADDR_VAR 0 6
47602: PUSH
47603: LD_VAR 0 1
47607: PPUSH
47608: CALL_OW 274
47612: PPUSH
47613: LD_VAR 0 2
47617: PPUSH
47618: LD_INT 0
47620: PPUSH
47621: CALL 45187 0 3
47625: PPUSH
47626: LD_INT 30
47628: PUSH
47629: LD_INT 3
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PPUSH
47636: CALL_OW 72
47640: ST_TO_ADDR
// if not factories then
47641: LD_VAR 0 6
47645: NOT
47646: IFFALSE 47650
// exit ;
47648: GO 48616
// for i in factories do
47650: LD_ADDR_VAR 0 8
47654: PUSH
47655: LD_VAR 0 6
47659: PUSH
47660: FOR_IN
47661: IFFALSE 47686
// fac_list := fac_list union AvailableWeaponList ( i ) ;
47663: LD_ADDR_VAR 0 17
47667: PUSH
47668: LD_VAR 0 17
47672: PUSH
47673: LD_VAR 0 8
47677: PPUSH
47678: CALL_OW 478
47682: UNION
47683: ST_TO_ADDR
47684: GO 47660
47686: POP
47687: POP
// if not fac_list then
47688: LD_VAR 0 17
47692: NOT
47693: IFFALSE 47697
// exit ;
47695: GO 48616
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
47697: LD_ADDR_VAR 0 5
47701: PUSH
47702: LD_INT 4
47704: PUSH
47705: LD_INT 5
47707: PUSH
47708: LD_INT 9
47710: PUSH
47711: LD_INT 10
47713: PUSH
47714: LD_INT 6
47716: PUSH
47717: LD_INT 7
47719: PUSH
47720: LD_INT 11
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 27
47734: PUSH
47735: LD_INT 28
47737: PUSH
47738: LD_INT 26
47740: PUSH
47741: LD_INT 30
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 43
47752: PUSH
47753: LD_INT 44
47755: PUSH
47756: LD_INT 46
47758: PUSH
47759: LD_INT 45
47761: PUSH
47762: LD_INT 47
47764: PUSH
47765: LD_INT 49
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: LIST
47780: PUSH
47781: LD_VAR 0 12
47785: ARRAY
47786: ST_TO_ADDR
// list := list isect fac_list ;
47787: LD_ADDR_VAR 0 5
47791: PUSH
47792: LD_VAR 0 5
47796: PUSH
47797: LD_VAR 0 17
47801: ISECT
47802: ST_TO_ADDR
// if not list then
47803: LD_VAR 0 5
47807: NOT
47808: IFFALSE 47812
// exit ;
47810: GO 48616
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47812: LD_VAR 0 12
47816: PUSH
47817: LD_INT 3
47819: EQUAL
47820: PUSH
47821: LD_INT 49
47823: PUSH
47824: LD_VAR 0 5
47828: IN
47829: AND
47830: PUSH
47831: LD_INT 31
47833: PPUSH
47834: LD_VAR 0 16
47838: PPUSH
47839: CALL_OW 321
47843: PUSH
47844: LD_INT 2
47846: EQUAL
47847: AND
47848: IFFALSE 47908
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47850: LD_INT 22
47852: PUSH
47853: LD_VAR 0 16
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 35
47864: PUSH
47865: LD_INT 49
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 91
47874: PUSH
47875: LD_VAR 0 1
47879: PUSH
47880: LD_INT 10
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: LIST
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: LIST
47892: PPUSH
47893: CALL_OW 69
47897: NOT
47898: IFFALSE 47908
// weapon := ru_time_lapser ;
47900: LD_ADDR_VAR 0 18
47904: PUSH
47905: LD_INT 49
47907: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47908: LD_VAR 0 12
47912: PUSH
47913: LD_INT 1
47915: PUSH
47916: LD_INT 2
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: IN
47923: PUSH
47924: LD_INT 11
47926: PUSH
47927: LD_VAR 0 5
47931: IN
47932: PUSH
47933: LD_INT 30
47935: PUSH
47936: LD_VAR 0 5
47940: IN
47941: OR
47942: AND
47943: PUSH
47944: LD_INT 6
47946: PPUSH
47947: LD_VAR 0 16
47951: PPUSH
47952: CALL_OW 321
47956: PUSH
47957: LD_INT 2
47959: EQUAL
47960: AND
47961: IFFALSE 48126
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47963: LD_INT 22
47965: PUSH
47966: LD_VAR 0 16
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 2
47977: PUSH
47978: LD_INT 35
47980: PUSH
47981: LD_INT 11
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 35
47990: PUSH
47991: LD_INT 30
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 91
48005: PUSH
48006: LD_VAR 0 1
48010: PUSH
48011: LD_INT 18
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: LIST
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: LIST
48023: PPUSH
48024: CALL_OW 69
48028: NOT
48029: PUSH
48030: LD_INT 22
48032: PUSH
48033: LD_VAR 0 16
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 2
48044: PUSH
48045: LD_INT 30
48047: PUSH
48048: LD_INT 32
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 30
48057: PUSH
48058: LD_INT 33
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 91
48072: PUSH
48073: LD_VAR 0 1
48077: PUSH
48078: LD_INT 12
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: LIST
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: LIST
48090: PUSH
48091: EMPTY
48092: LIST
48093: PPUSH
48094: CALL_OW 69
48098: PUSH
48099: LD_INT 2
48101: GREATER
48102: AND
48103: IFFALSE 48126
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48105: LD_ADDR_VAR 0 18
48109: PUSH
48110: LD_INT 11
48112: PUSH
48113: LD_INT 30
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_VAR 0 12
48124: ARRAY
48125: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48126: LD_VAR 0 18
48130: NOT
48131: PUSH
48132: LD_INT 40
48134: PPUSH
48135: LD_VAR 0 16
48139: PPUSH
48140: CALL_OW 321
48144: PUSH
48145: LD_INT 2
48147: EQUAL
48148: AND
48149: PUSH
48150: LD_INT 7
48152: PUSH
48153: LD_VAR 0 5
48157: IN
48158: PUSH
48159: LD_INT 28
48161: PUSH
48162: LD_VAR 0 5
48166: IN
48167: OR
48168: PUSH
48169: LD_INT 45
48171: PUSH
48172: LD_VAR 0 5
48176: IN
48177: OR
48178: AND
48179: IFFALSE 48433
// begin hex := GetHexInfo ( x , y ) ;
48181: LD_ADDR_VAR 0 4
48185: PUSH
48186: LD_VAR 0 10
48190: PPUSH
48191: LD_VAR 0 11
48195: PPUSH
48196: CALL_OW 546
48200: ST_TO_ADDR
// if hex [ 1 ] then
48201: LD_VAR 0 4
48205: PUSH
48206: LD_INT 1
48208: ARRAY
48209: IFFALSE 48213
// exit ;
48211: GO 48616
// height := hex [ 2 ] ;
48213: LD_ADDR_VAR 0 15
48217: PUSH
48218: LD_VAR 0 4
48222: PUSH
48223: LD_INT 2
48225: ARRAY
48226: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48227: LD_ADDR_VAR 0 14
48231: PUSH
48232: LD_INT 0
48234: PUSH
48235: LD_INT 2
48237: PUSH
48238: LD_INT 3
48240: PUSH
48241: LD_INT 5
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: ST_TO_ADDR
// for i in tmp do
48250: LD_ADDR_VAR 0 8
48254: PUSH
48255: LD_VAR 0 14
48259: PUSH
48260: FOR_IN
48261: IFFALSE 48431
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48263: LD_ADDR_VAR 0 9
48267: PUSH
48268: LD_VAR 0 10
48272: PPUSH
48273: LD_VAR 0 8
48277: PPUSH
48278: LD_INT 5
48280: PPUSH
48281: CALL_OW 272
48285: PUSH
48286: LD_VAR 0 11
48290: PPUSH
48291: LD_VAR 0 8
48295: PPUSH
48296: LD_INT 5
48298: PPUSH
48299: CALL_OW 273
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48308: LD_VAR 0 9
48312: PUSH
48313: LD_INT 1
48315: ARRAY
48316: PPUSH
48317: LD_VAR 0 9
48321: PUSH
48322: LD_INT 2
48324: ARRAY
48325: PPUSH
48326: CALL_OW 488
48330: IFFALSE 48429
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48332: LD_ADDR_VAR 0 4
48336: PUSH
48337: LD_VAR 0 9
48341: PUSH
48342: LD_INT 1
48344: ARRAY
48345: PPUSH
48346: LD_VAR 0 9
48350: PUSH
48351: LD_INT 2
48353: ARRAY
48354: PPUSH
48355: CALL_OW 546
48359: ST_TO_ADDR
// if hex [ 1 ] then
48360: LD_VAR 0 4
48364: PUSH
48365: LD_INT 1
48367: ARRAY
48368: IFFALSE 48372
// continue ;
48370: GO 48260
// h := hex [ 2 ] ;
48372: LD_ADDR_VAR 0 13
48376: PUSH
48377: LD_VAR 0 4
48381: PUSH
48382: LD_INT 2
48384: ARRAY
48385: ST_TO_ADDR
// if h + 7 < height then
48386: LD_VAR 0 13
48390: PUSH
48391: LD_INT 7
48393: PLUS
48394: PUSH
48395: LD_VAR 0 15
48399: LESS
48400: IFFALSE 48429
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
48402: LD_ADDR_VAR 0 18
48406: PUSH
48407: LD_INT 7
48409: PUSH
48410: LD_INT 28
48412: PUSH
48413: LD_INT 45
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: LIST
48420: PUSH
48421: LD_VAR 0 12
48425: ARRAY
48426: ST_TO_ADDR
// break ;
48427: GO 48431
// end ; end ; end ;
48429: GO 48260
48431: POP
48432: POP
// end ; if not weapon then
48433: LD_VAR 0 18
48437: NOT
48438: IFFALSE 48498
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
48440: LD_ADDR_VAR 0 5
48444: PUSH
48445: LD_VAR 0 5
48449: PUSH
48450: LD_INT 11
48452: PUSH
48453: LD_INT 30
48455: PUSH
48456: LD_INT 49
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: LIST
48463: DIFF
48464: ST_TO_ADDR
// if not list then
48465: LD_VAR 0 5
48469: NOT
48470: IFFALSE 48474
// exit ;
48472: GO 48616
// weapon := list [ rand ( 1 , list ) ] ;
48474: LD_ADDR_VAR 0 18
48478: PUSH
48479: LD_VAR 0 5
48483: PUSH
48484: LD_INT 1
48486: PPUSH
48487: LD_VAR 0 5
48491: PPUSH
48492: CALL_OW 12
48496: ARRAY
48497: ST_TO_ADDR
// end ; if weapon then
48498: LD_VAR 0 18
48502: IFFALSE 48616
// begin tmp := CostOfWeapon ( weapon ) ;
48504: LD_ADDR_VAR 0 14
48508: PUSH
48509: LD_VAR 0 18
48513: PPUSH
48514: CALL_OW 451
48518: ST_TO_ADDR
// j := GetBase ( tower ) ;
48519: LD_ADDR_VAR 0 9
48523: PUSH
48524: LD_VAR 0 1
48528: PPUSH
48529: CALL_OW 274
48533: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
48534: LD_VAR 0 9
48538: PPUSH
48539: LD_INT 1
48541: PPUSH
48542: CALL_OW 275
48546: PUSH
48547: LD_VAR 0 14
48551: PUSH
48552: LD_INT 1
48554: ARRAY
48555: GREATEREQUAL
48556: PUSH
48557: LD_VAR 0 9
48561: PPUSH
48562: LD_INT 2
48564: PPUSH
48565: CALL_OW 275
48569: PUSH
48570: LD_VAR 0 14
48574: PUSH
48575: LD_INT 2
48577: ARRAY
48578: GREATEREQUAL
48579: AND
48580: PUSH
48581: LD_VAR 0 9
48585: PPUSH
48586: LD_INT 3
48588: PPUSH
48589: CALL_OW 275
48593: PUSH
48594: LD_VAR 0 14
48598: PUSH
48599: LD_INT 3
48601: ARRAY
48602: GREATEREQUAL
48603: AND
48604: IFFALSE 48616
// result := weapon ;
48606: LD_ADDR_VAR 0 3
48610: PUSH
48611: LD_VAR 0 18
48615: ST_TO_ADDR
// end ; end ;
48616: LD_VAR 0 3
48620: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
48621: LD_INT 0
48623: PPUSH
48624: PPUSH
// result := true ;
48625: LD_ADDR_VAR 0 3
48629: PUSH
48630: LD_INT 1
48632: ST_TO_ADDR
// if array1 = array2 then
48633: LD_VAR 0 1
48637: PUSH
48638: LD_VAR 0 2
48642: EQUAL
48643: IFFALSE 48703
// begin for i = 1 to array1 do
48645: LD_ADDR_VAR 0 4
48649: PUSH
48650: DOUBLE
48651: LD_INT 1
48653: DEC
48654: ST_TO_ADDR
48655: LD_VAR 0 1
48659: PUSH
48660: FOR_TO
48661: IFFALSE 48699
// if array1 [ i ] <> array2 [ i ] then
48663: LD_VAR 0 1
48667: PUSH
48668: LD_VAR 0 4
48672: ARRAY
48673: PUSH
48674: LD_VAR 0 2
48678: PUSH
48679: LD_VAR 0 4
48683: ARRAY
48684: NONEQUAL
48685: IFFALSE 48697
// begin result := false ;
48687: LD_ADDR_VAR 0 3
48691: PUSH
48692: LD_INT 0
48694: ST_TO_ADDR
// break ;
48695: GO 48699
// end ;
48697: GO 48660
48699: POP
48700: POP
// end else
48701: GO 48711
// result := false ;
48703: LD_ADDR_VAR 0 3
48707: PUSH
48708: LD_INT 0
48710: ST_TO_ADDR
// end ;
48711: LD_VAR 0 3
48715: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
48716: LD_INT 0
48718: PPUSH
48719: PPUSH
// if not array1 or not array2 then
48720: LD_VAR 0 1
48724: NOT
48725: PUSH
48726: LD_VAR 0 2
48730: NOT
48731: OR
48732: IFFALSE 48736
// exit ;
48734: GO 48800
// result := true ;
48736: LD_ADDR_VAR 0 3
48740: PUSH
48741: LD_INT 1
48743: ST_TO_ADDR
// for i = 1 to array1 do
48744: LD_ADDR_VAR 0 4
48748: PUSH
48749: DOUBLE
48750: LD_INT 1
48752: DEC
48753: ST_TO_ADDR
48754: LD_VAR 0 1
48758: PUSH
48759: FOR_TO
48760: IFFALSE 48798
// if array1 [ i ] <> array2 [ i ] then
48762: LD_VAR 0 1
48766: PUSH
48767: LD_VAR 0 4
48771: ARRAY
48772: PUSH
48773: LD_VAR 0 2
48777: PUSH
48778: LD_VAR 0 4
48782: ARRAY
48783: NONEQUAL
48784: IFFALSE 48796
// begin result := false ;
48786: LD_ADDR_VAR 0 3
48790: PUSH
48791: LD_INT 0
48793: ST_TO_ADDR
// break ;
48794: GO 48798
// end ;
48796: GO 48759
48798: POP
48799: POP
// end ;
48800: LD_VAR 0 3
48804: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48805: LD_INT 0
48807: PPUSH
48808: PPUSH
48809: PPUSH
// pom := GetBase ( fac ) ;
48810: LD_ADDR_VAR 0 5
48814: PUSH
48815: LD_VAR 0 1
48819: PPUSH
48820: CALL_OW 274
48824: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48825: LD_ADDR_VAR 0 4
48829: PUSH
48830: LD_VAR 0 2
48834: PUSH
48835: LD_INT 1
48837: ARRAY
48838: PPUSH
48839: LD_VAR 0 2
48843: PUSH
48844: LD_INT 2
48846: ARRAY
48847: PPUSH
48848: LD_VAR 0 2
48852: PUSH
48853: LD_INT 3
48855: ARRAY
48856: PPUSH
48857: LD_VAR 0 2
48861: PUSH
48862: LD_INT 4
48864: ARRAY
48865: PPUSH
48866: CALL_OW 449
48870: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48871: LD_ADDR_VAR 0 3
48875: PUSH
48876: LD_VAR 0 5
48880: PPUSH
48881: LD_INT 1
48883: PPUSH
48884: CALL_OW 275
48888: PUSH
48889: LD_VAR 0 4
48893: PUSH
48894: LD_INT 1
48896: ARRAY
48897: GREATEREQUAL
48898: PUSH
48899: LD_VAR 0 5
48903: PPUSH
48904: LD_INT 2
48906: PPUSH
48907: CALL_OW 275
48911: PUSH
48912: LD_VAR 0 4
48916: PUSH
48917: LD_INT 2
48919: ARRAY
48920: GREATEREQUAL
48921: AND
48922: PUSH
48923: LD_VAR 0 5
48927: PPUSH
48928: LD_INT 3
48930: PPUSH
48931: CALL_OW 275
48935: PUSH
48936: LD_VAR 0 4
48940: PUSH
48941: LD_INT 3
48943: ARRAY
48944: GREATEREQUAL
48945: AND
48946: ST_TO_ADDR
// end ;
48947: LD_VAR 0 3
48951: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48952: LD_INT 0
48954: PPUSH
48955: PPUSH
48956: PPUSH
48957: PPUSH
// pom := GetBase ( building ) ;
48958: LD_ADDR_VAR 0 3
48962: PUSH
48963: LD_VAR 0 1
48967: PPUSH
48968: CALL_OW 274
48972: ST_TO_ADDR
// if not pom then
48973: LD_VAR 0 3
48977: NOT
48978: IFFALSE 48982
// exit ;
48980: GO 49152
// btype := GetBType ( building ) ;
48982: LD_ADDR_VAR 0 5
48986: PUSH
48987: LD_VAR 0 1
48991: PPUSH
48992: CALL_OW 266
48996: ST_TO_ADDR
// if btype = b_armoury then
48997: LD_VAR 0 5
49001: PUSH
49002: LD_INT 4
49004: EQUAL
49005: IFFALSE 49015
// btype := b_barracks ;
49007: LD_ADDR_VAR 0 5
49011: PUSH
49012: LD_INT 5
49014: ST_TO_ADDR
// if btype = b_depot then
49015: LD_VAR 0 5
49019: PUSH
49020: LD_INT 0
49022: EQUAL
49023: IFFALSE 49033
// btype := b_warehouse ;
49025: LD_ADDR_VAR 0 5
49029: PUSH
49030: LD_INT 1
49032: ST_TO_ADDR
// if btype = b_workshop then
49033: LD_VAR 0 5
49037: PUSH
49038: LD_INT 2
49040: EQUAL
49041: IFFALSE 49051
// btype := b_factory ;
49043: LD_ADDR_VAR 0 5
49047: PUSH
49048: LD_INT 3
49050: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49051: LD_ADDR_VAR 0 4
49055: PUSH
49056: LD_VAR 0 5
49060: PPUSH
49061: LD_VAR 0 1
49065: PPUSH
49066: CALL_OW 248
49070: PPUSH
49071: CALL_OW 450
49075: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49076: LD_ADDR_VAR 0 2
49080: PUSH
49081: LD_VAR 0 3
49085: PPUSH
49086: LD_INT 1
49088: PPUSH
49089: CALL_OW 275
49093: PUSH
49094: LD_VAR 0 4
49098: PUSH
49099: LD_INT 1
49101: ARRAY
49102: GREATEREQUAL
49103: PUSH
49104: LD_VAR 0 3
49108: PPUSH
49109: LD_INT 2
49111: PPUSH
49112: CALL_OW 275
49116: PUSH
49117: LD_VAR 0 4
49121: PUSH
49122: LD_INT 2
49124: ARRAY
49125: GREATEREQUAL
49126: AND
49127: PUSH
49128: LD_VAR 0 3
49132: PPUSH
49133: LD_INT 3
49135: PPUSH
49136: CALL_OW 275
49140: PUSH
49141: LD_VAR 0 4
49145: PUSH
49146: LD_INT 3
49148: ARRAY
49149: GREATEREQUAL
49150: AND
49151: ST_TO_ADDR
// end ;
49152: LD_VAR 0 2
49156: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49157: LD_INT 0
49159: PPUSH
49160: PPUSH
49161: PPUSH
// pom := GetBase ( building ) ;
49162: LD_ADDR_VAR 0 4
49166: PUSH
49167: LD_VAR 0 1
49171: PPUSH
49172: CALL_OW 274
49176: ST_TO_ADDR
// if not pom then
49177: LD_VAR 0 4
49181: NOT
49182: IFFALSE 49186
// exit ;
49184: GO 49287
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49186: LD_ADDR_VAR 0 5
49190: PUSH
49191: LD_VAR 0 2
49195: PPUSH
49196: LD_VAR 0 1
49200: PPUSH
49201: CALL_OW 248
49205: PPUSH
49206: CALL_OW 450
49210: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49211: LD_ADDR_VAR 0 3
49215: PUSH
49216: LD_VAR 0 4
49220: PPUSH
49221: LD_INT 1
49223: PPUSH
49224: CALL_OW 275
49228: PUSH
49229: LD_VAR 0 5
49233: PUSH
49234: LD_INT 1
49236: ARRAY
49237: GREATEREQUAL
49238: PUSH
49239: LD_VAR 0 4
49243: PPUSH
49244: LD_INT 2
49246: PPUSH
49247: CALL_OW 275
49251: PUSH
49252: LD_VAR 0 5
49256: PUSH
49257: LD_INT 2
49259: ARRAY
49260: GREATEREQUAL
49261: AND
49262: PUSH
49263: LD_VAR 0 4
49267: PPUSH
49268: LD_INT 3
49270: PPUSH
49271: CALL_OW 275
49275: PUSH
49276: LD_VAR 0 5
49280: PUSH
49281: LD_INT 3
49283: ARRAY
49284: GREATEREQUAL
49285: AND
49286: ST_TO_ADDR
// end ;
49287: LD_VAR 0 3
49291: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
49292: LD_INT 0
49294: PPUSH
49295: PPUSH
49296: PPUSH
49297: PPUSH
49298: PPUSH
49299: PPUSH
49300: PPUSH
49301: PPUSH
49302: PPUSH
49303: PPUSH
49304: PPUSH
// result := false ;
49305: LD_ADDR_VAR 0 8
49309: PUSH
49310: LD_INT 0
49312: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
49313: LD_VAR 0 5
49317: NOT
49318: PUSH
49319: LD_VAR 0 1
49323: NOT
49324: OR
49325: PUSH
49326: LD_VAR 0 2
49330: NOT
49331: OR
49332: PUSH
49333: LD_VAR 0 3
49337: NOT
49338: OR
49339: IFFALSE 49343
// exit ;
49341: GO 50157
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
49343: LD_ADDR_VAR 0 14
49347: PUSH
49348: LD_VAR 0 1
49352: PPUSH
49353: LD_VAR 0 2
49357: PPUSH
49358: LD_VAR 0 3
49362: PPUSH
49363: LD_VAR 0 4
49367: PPUSH
49368: LD_VAR 0 5
49372: PUSH
49373: LD_INT 1
49375: ARRAY
49376: PPUSH
49377: CALL_OW 248
49381: PPUSH
49382: LD_INT 0
49384: PPUSH
49385: CALL 51394 0 6
49389: ST_TO_ADDR
// if not hexes then
49390: LD_VAR 0 14
49394: NOT
49395: IFFALSE 49399
// exit ;
49397: GO 50157
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49399: LD_ADDR_VAR 0 17
49403: PUSH
49404: LD_VAR 0 5
49408: PPUSH
49409: LD_INT 22
49411: PUSH
49412: LD_VAR 0 13
49416: PPUSH
49417: CALL_OW 255
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 2
49428: PUSH
49429: LD_INT 30
49431: PUSH
49432: LD_INT 0
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 30
49441: PUSH
49442: LD_INT 1
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: LIST
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PPUSH
49458: CALL_OW 72
49462: ST_TO_ADDR
// for i = 1 to hexes do
49463: LD_ADDR_VAR 0 9
49467: PUSH
49468: DOUBLE
49469: LD_INT 1
49471: DEC
49472: ST_TO_ADDR
49473: LD_VAR 0 14
49477: PUSH
49478: FOR_TO
49479: IFFALSE 50155
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49481: LD_ADDR_VAR 0 13
49485: PUSH
49486: LD_VAR 0 14
49490: PUSH
49491: LD_VAR 0 9
49495: ARRAY
49496: PUSH
49497: LD_INT 1
49499: ARRAY
49500: PPUSH
49501: LD_VAR 0 14
49505: PUSH
49506: LD_VAR 0 9
49510: ARRAY
49511: PUSH
49512: LD_INT 2
49514: ARRAY
49515: PPUSH
49516: CALL_OW 428
49520: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
49521: LD_VAR 0 14
49525: PUSH
49526: LD_VAR 0 9
49530: ARRAY
49531: PUSH
49532: LD_INT 1
49534: ARRAY
49535: PPUSH
49536: LD_VAR 0 14
49540: PUSH
49541: LD_VAR 0 9
49545: ARRAY
49546: PUSH
49547: LD_INT 2
49549: ARRAY
49550: PPUSH
49551: CALL_OW 351
49555: PUSH
49556: LD_VAR 0 14
49560: PUSH
49561: LD_VAR 0 9
49565: ARRAY
49566: PUSH
49567: LD_INT 1
49569: ARRAY
49570: PPUSH
49571: LD_VAR 0 14
49575: PUSH
49576: LD_VAR 0 9
49580: ARRAY
49581: PUSH
49582: LD_INT 2
49584: ARRAY
49585: PPUSH
49586: CALL_OW 488
49590: NOT
49591: OR
49592: PUSH
49593: LD_VAR 0 13
49597: PPUSH
49598: CALL_OW 247
49602: PUSH
49603: LD_INT 3
49605: EQUAL
49606: OR
49607: IFFALSE 49613
// exit ;
49609: POP
49610: POP
49611: GO 50157
// if not tmp then
49613: LD_VAR 0 13
49617: NOT
49618: IFFALSE 49622
// continue ;
49620: GO 49478
// result := true ;
49622: LD_ADDR_VAR 0 8
49626: PUSH
49627: LD_INT 1
49629: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
49630: LD_VAR 0 6
49634: PUSH
49635: LD_VAR 0 13
49639: PPUSH
49640: CALL_OW 247
49644: PUSH
49645: LD_INT 2
49647: EQUAL
49648: AND
49649: PUSH
49650: LD_VAR 0 13
49654: PPUSH
49655: CALL_OW 263
49659: PUSH
49660: LD_INT 1
49662: EQUAL
49663: AND
49664: IFFALSE 49828
// begin if IsDrivenBy ( tmp ) then
49666: LD_VAR 0 13
49670: PPUSH
49671: CALL_OW 311
49675: IFFALSE 49679
// continue ;
49677: GO 49478
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
49679: LD_VAR 0 6
49683: PPUSH
49684: LD_INT 3
49686: PUSH
49687: LD_INT 60
49689: PUSH
49690: EMPTY
49691: LIST
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 3
49699: PUSH
49700: LD_INT 55
49702: PUSH
49703: EMPTY
49704: LIST
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PPUSH
49714: CALL_OW 72
49718: IFFALSE 49826
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
49720: LD_ADDR_VAR 0 18
49724: PUSH
49725: LD_VAR 0 6
49729: PPUSH
49730: LD_INT 3
49732: PUSH
49733: LD_INT 60
49735: PUSH
49736: EMPTY
49737: LIST
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 3
49745: PUSH
49746: LD_INT 55
49748: PUSH
49749: EMPTY
49750: LIST
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PPUSH
49760: CALL_OW 72
49764: PUSH
49765: LD_INT 1
49767: ARRAY
49768: ST_TO_ADDR
// if IsInUnit ( driver ) then
49769: LD_VAR 0 18
49773: PPUSH
49774: CALL_OW 310
49778: IFFALSE 49789
// ComExit ( driver ) ;
49780: LD_VAR 0 18
49784: PPUSH
49785: CALL 74578 0 1
// AddComEnterUnit ( driver , tmp ) ;
49789: LD_VAR 0 18
49793: PPUSH
49794: LD_VAR 0 13
49798: PPUSH
49799: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49803: LD_VAR 0 18
49807: PPUSH
49808: LD_VAR 0 7
49812: PPUSH
49813: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49817: LD_VAR 0 18
49821: PPUSH
49822: CALL_OW 181
// end ; continue ;
49826: GO 49478
// end ; if not cleaners or not tmp in cleaners then
49828: LD_VAR 0 6
49832: NOT
49833: PUSH
49834: LD_VAR 0 13
49838: PUSH
49839: LD_VAR 0 6
49843: IN
49844: NOT
49845: OR
49846: IFFALSE 50153
// begin if dep then
49848: LD_VAR 0 17
49852: IFFALSE 49988
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49854: LD_ADDR_VAR 0 16
49858: PUSH
49859: LD_VAR 0 17
49863: PUSH
49864: LD_INT 1
49866: ARRAY
49867: PPUSH
49868: CALL_OW 250
49872: PPUSH
49873: LD_VAR 0 17
49877: PUSH
49878: LD_INT 1
49880: ARRAY
49881: PPUSH
49882: CALL_OW 254
49886: PPUSH
49887: LD_INT 5
49889: PPUSH
49890: CALL_OW 272
49894: PUSH
49895: LD_VAR 0 17
49899: PUSH
49900: LD_INT 1
49902: ARRAY
49903: PPUSH
49904: CALL_OW 251
49908: PPUSH
49909: LD_VAR 0 17
49913: PUSH
49914: LD_INT 1
49916: ARRAY
49917: PPUSH
49918: CALL_OW 254
49922: PPUSH
49923: LD_INT 5
49925: PPUSH
49926: CALL_OW 273
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49935: LD_VAR 0 16
49939: PUSH
49940: LD_INT 1
49942: ARRAY
49943: PPUSH
49944: LD_VAR 0 16
49948: PUSH
49949: LD_INT 2
49951: ARRAY
49952: PPUSH
49953: CALL_OW 488
49957: IFFALSE 49988
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49959: LD_VAR 0 13
49963: PPUSH
49964: LD_VAR 0 16
49968: PUSH
49969: LD_INT 1
49971: ARRAY
49972: PPUSH
49973: LD_VAR 0 16
49977: PUSH
49978: LD_INT 2
49980: ARRAY
49981: PPUSH
49982: CALL_OW 111
// continue ;
49986: GO 49478
// end ; end ; r := GetDir ( tmp ) ;
49988: LD_ADDR_VAR 0 15
49992: PUSH
49993: LD_VAR 0 13
49997: PPUSH
49998: CALL_OW 254
50002: ST_TO_ADDR
// if r = 5 then
50003: LD_VAR 0 15
50007: PUSH
50008: LD_INT 5
50010: EQUAL
50011: IFFALSE 50021
// r := 0 ;
50013: LD_ADDR_VAR 0 15
50017: PUSH
50018: LD_INT 0
50020: ST_TO_ADDR
// for j = r to 5 do
50021: LD_ADDR_VAR 0 10
50025: PUSH
50026: DOUBLE
50027: LD_VAR 0 15
50031: DEC
50032: ST_TO_ADDR
50033: LD_INT 5
50035: PUSH
50036: FOR_TO
50037: IFFALSE 50151
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50039: LD_ADDR_VAR 0 11
50043: PUSH
50044: LD_VAR 0 13
50048: PPUSH
50049: CALL_OW 250
50053: PPUSH
50054: LD_VAR 0 10
50058: PPUSH
50059: LD_INT 2
50061: PPUSH
50062: CALL_OW 272
50066: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50067: LD_ADDR_VAR 0 12
50071: PUSH
50072: LD_VAR 0 13
50076: PPUSH
50077: CALL_OW 251
50081: PPUSH
50082: LD_VAR 0 10
50086: PPUSH
50087: LD_INT 2
50089: PPUSH
50090: CALL_OW 273
50094: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50095: LD_VAR 0 11
50099: PPUSH
50100: LD_VAR 0 12
50104: PPUSH
50105: CALL_OW 488
50109: PUSH
50110: LD_VAR 0 11
50114: PPUSH
50115: LD_VAR 0 12
50119: PPUSH
50120: CALL_OW 428
50124: NOT
50125: AND
50126: IFFALSE 50149
// begin ComMoveXY ( tmp , _x , _y ) ;
50128: LD_VAR 0 13
50132: PPUSH
50133: LD_VAR 0 11
50137: PPUSH
50138: LD_VAR 0 12
50142: PPUSH
50143: CALL_OW 111
// break ;
50147: GO 50151
// end ; end ;
50149: GO 50036
50151: POP
50152: POP
// end ; end ;
50153: GO 49478
50155: POP
50156: POP
// end ;
50157: LD_VAR 0 8
50161: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50162: LD_INT 0
50164: PPUSH
// result := true ;
50165: LD_ADDR_VAR 0 3
50169: PUSH
50170: LD_INT 1
50172: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50173: LD_VAR 0 2
50177: PUSH
50178: LD_INT 24
50180: DOUBLE
50181: EQUAL
50182: IFTRUE 50192
50184: LD_INT 33
50186: DOUBLE
50187: EQUAL
50188: IFTRUE 50192
50190: GO 50217
50192: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50193: LD_ADDR_VAR 0 3
50197: PUSH
50198: LD_INT 32
50200: PPUSH
50201: LD_VAR 0 1
50205: PPUSH
50206: CALL_OW 321
50210: PUSH
50211: LD_INT 2
50213: EQUAL
50214: ST_TO_ADDR
50215: GO 50537
50217: LD_INT 20
50219: DOUBLE
50220: EQUAL
50221: IFTRUE 50225
50223: GO 50250
50225: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50226: LD_ADDR_VAR 0 3
50230: PUSH
50231: LD_INT 6
50233: PPUSH
50234: LD_VAR 0 1
50238: PPUSH
50239: CALL_OW 321
50243: PUSH
50244: LD_INT 2
50246: EQUAL
50247: ST_TO_ADDR
50248: GO 50537
50250: LD_INT 22
50252: DOUBLE
50253: EQUAL
50254: IFTRUE 50264
50256: LD_INT 36
50258: DOUBLE
50259: EQUAL
50260: IFTRUE 50264
50262: GO 50289
50264: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
50265: LD_ADDR_VAR 0 3
50269: PUSH
50270: LD_INT 15
50272: PPUSH
50273: LD_VAR 0 1
50277: PPUSH
50278: CALL_OW 321
50282: PUSH
50283: LD_INT 2
50285: EQUAL
50286: ST_TO_ADDR
50287: GO 50537
50289: LD_INT 30
50291: DOUBLE
50292: EQUAL
50293: IFTRUE 50297
50295: GO 50322
50297: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
50298: LD_ADDR_VAR 0 3
50302: PUSH
50303: LD_INT 20
50305: PPUSH
50306: LD_VAR 0 1
50310: PPUSH
50311: CALL_OW 321
50315: PUSH
50316: LD_INT 2
50318: EQUAL
50319: ST_TO_ADDR
50320: GO 50537
50322: LD_INT 28
50324: DOUBLE
50325: EQUAL
50326: IFTRUE 50336
50328: LD_INT 21
50330: DOUBLE
50331: EQUAL
50332: IFTRUE 50336
50334: GO 50361
50336: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
50337: LD_ADDR_VAR 0 3
50341: PUSH
50342: LD_INT 21
50344: PPUSH
50345: LD_VAR 0 1
50349: PPUSH
50350: CALL_OW 321
50354: PUSH
50355: LD_INT 2
50357: EQUAL
50358: ST_TO_ADDR
50359: GO 50537
50361: LD_INT 16
50363: DOUBLE
50364: EQUAL
50365: IFTRUE 50369
50367: GO 50396
50369: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
50370: LD_ADDR_VAR 0 3
50374: PUSH
50375: LD_EXP 64
50379: PPUSH
50380: LD_VAR 0 1
50384: PPUSH
50385: CALL_OW 321
50389: PUSH
50390: LD_INT 2
50392: EQUAL
50393: ST_TO_ADDR
50394: GO 50537
50396: LD_INT 19
50398: DOUBLE
50399: EQUAL
50400: IFTRUE 50410
50402: LD_INT 23
50404: DOUBLE
50405: EQUAL
50406: IFTRUE 50410
50408: GO 50437
50410: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
50411: LD_ADDR_VAR 0 3
50415: PUSH
50416: LD_EXP 63
50420: PPUSH
50421: LD_VAR 0 1
50425: PPUSH
50426: CALL_OW 321
50430: PUSH
50431: LD_INT 2
50433: EQUAL
50434: ST_TO_ADDR
50435: GO 50537
50437: LD_INT 17
50439: DOUBLE
50440: EQUAL
50441: IFTRUE 50445
50443: GO 50470
50445: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
50446: LD_ADDR_VAR 0 3
50450: PUSH
50451: LD_INT 39
50453: PPUSH
50454: LD_VAR 0 1
50458: PPUSH
50459: CALL_OW 321
50463: PUSH
50464: LD_INT 2
50466: EQUAL
50467: ST_TO_ADDR
50468: GO 50537
50470: LD_INT 18
50472: DOUBLE
50473: EQUAL
50474: IFTRUE 50478
50476: GO 50503
50478: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
50479: LD_ADDR_VAR 0 3
50483: PUSH
50484: LD_INT 40
50486: PPUSH
50487: LD_VAR 0 1
50491: PPUSH
50492: CALL_OW 321
50496: PUSH
50497: LD_INT 2
50499: EQUAL
50500: ST_TO_ADDR
50501: GO 50537
50503: LD_INT 27
50505: DOUBLE
50506: EQUAL
50507: IFTRUE 50511
50509: GO 50536
50511: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
50512: LD_ADDR_VAR 0 3
50516: PUSH
50517: LD_INT 35
50519: PPUSH
50520: LD_VAR 0 1
50524: PPUSH
50525: CALL_OW 321
50529: PUSH
50530: LD_INT 2
50532: EQUAL
50533: ST_TO_ADDR
50534: GO 50537
50536: POP
// end ;
50537: LD_VAR 0 3
50541: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
50542: LD_INT 0
50544: PPUSH
50545: PPUSH
50546: PPUSH
50547: PPUSH
50548: PPUSH
50549: PPUSH
50550: PPUSH
50551: PPUSH
50552: PPUSH
50553: PPUSH
50554: PPUSH
// result := false ;
50555: LD_ADDR_VAR 0 6
50559: PUSH
50560: LD_INT 0
50562: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
50563: LD_VAR 0 1
50567: NOT
50568: PUSH
50569: LD_VAR 0 1
50573: PPUSH
50574: CALL_OW 266
50578: PUSH
50579: LD_INT 0
50581: PUSH
50582: LD_INT 1
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: IN
50589: NOT
50590: OR
50591: PUSH
50592: LD_VAR 0 2
50596: NOT
50597: OR
50598: PUSH
50599: LD_VAR 0 5
50603: PUSH
50604: LD_INT 0
50606: PUSH
50607: LD_INT 1
50609: PUSH
50610: LD_INT 2
50612: PUSH
50613: LD_INT 3
50615: PUSH
50616: LD_INT 4
50618: PUSH
50619: LD_INT 5
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: IN
50630: NOT
50631: OR
50632: PUSH
50633: LD_VAR 0 3
50637: PPUSH
50638: LD_VAR 0 4
50642: PPUSH
50643: CALL_OW 488
50647: NOT
50648: OR
50649: IFFALSE 50653
// exit ;
50651: GO 51389
// side := GetSide ( depot ) ;
50653: LD_ADDR_VAR 0 9
50657: PUSH
50658: LD_VAR 0 1
50662: PPUSH
50663: CALL_OW 255
50667: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
50668: LD_VAR 0 9
50672: PPUSH
50673: LD_VAR 0 2
50677: PPUSH
50678: CALL 50162 0 2
50682: NOT
50683: IFFALSE 50687
// exit ;
50685: GO 51389
// pom := GetBase ( depot ) ;
50687: LD_ADDR_VAR 0 10
50691: PUSH
50692: LD_VAR 0 1
50696: PPUSH
50697: CALL_OW 274
50701: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50702: LD_ADDR_VAR 0 11
50706: PUSH
50707: LD_VAR 0 2
50711: PPUSH
50712: LD_VAR 0 1
50716: PPUSH
50717: CALL_OW 248
50721: PPUSH
50722: CALL_OW 450
50726: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
50727: LD_VAR 0 10
50731: PPUSH
50732: LD_INT 1
50734: PPUSH
50735: CALL_OW 275
50739: PUSH
50740: LD_VAR 0 11
50744: PUSH
50745: LD_INT 1
50747: ARRAY
50748: GREATEREQUAL
50749: PUSH
50750: LD_VAR 0 10
50754: PPUSH
50755: LD_INT 2
50757: PPUSH
50758: CALL_OW 275
50762: PUSH
50763: LD_VAR 0 11
50767: PUSH
50768: LD_INT 2
50770: ARRAY
50771: GREATEREQUAL
50772: AND
50773: PUSH
50774: LD_VAR 0 10
50778: PPUSH
50779: LD_INT 3
50781: PPUSH
50782: CALL_OW 275
50786: PUSH
50787: LD_VAR 0 11
50791: PUSH
50792: LD_INT 3
50794: ARRAY
50795: GREATEREQUAL
50796: AND
50797: NOT
50798: IFFALSE 50802
// exit ;
50800: GO 51389
// if GetBType ( depot ) = b_depot then
50802: LD_VAR 0 1
50806: PPUSH
50807: CALL_OW 266
50811: PUSH
50812: LD_INT 0
50814: EQUAL
50815: IFFALSE 50827
// dist := 28 else
50817: LD_ADDR_VAR 0 14
50821: PUSH
50822: LD_INT 28
50824: ST_TO_ADDR
50825: GO 50835
// dist := 36 ;
50827: LD_ADDR_VAR 0 14
50831: PUSH
50832: LD_INT 36
50834: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50835: LD_VAR 0 1
50839: PPUSH
50840: LD_VAR 0 3
50844: PPUSH
50845: LD_VAR 0 4
50849: PPUSH
50850: CALL_OW 297
50854: PUSH
50855: LD_VAR 0 14
50859: GREATER
50860: IFFALSE 50864
// exit ;
50862: GO 51389
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50864: LD_ADDR_VAR 0 12
50868: PUSH
50869: LD_VAR 0 2
50873: PPUSH
50874: LD_VAR 0 3
50878: PPUSH
50879: LD_VAR 0 4
50883: PPUSH
50884: LD_VAR 0 5
50888: PPUSH
50889: LD_VAR 0 1
50893: PPUSH
50894: CALL_OW 248
50898: PPUSH
50899: LD_INT 0
50901: PPUSH
50902: CALL 51394 0 6
50906: ST_TO_ADDR
// if not hexes then
50907: LD_VAR 0 12
50911: NOT
50912: IFFALSE 50916
// exit ;
50914: GO 51389
// hex := GetHexInfo ( x , y ) ;
50916: LD_ADDR_VAR 0 15
50920: PUSH
50921: LD_VAR 0 3
50925: PPUSH
50926: LD_VAR 0 4
50930: PPUSH
50931: CALL_OW 546
50935: ST_TO_ADDR
// if hex [ 1 ] then
50936: LD_VAR 0 15
50940: PUSH
50941: LD_INT 1
50943: ARRAY
50944: IFFALSE 50948
// exit ;
50946: GO 51389
// height := hex [ 2 ] ;
50948: LD_ADDR_VAR 0 13
50952: PUSH
50953: LD_VAR 0 15
50957: PUSH
50958: LD_INT 2
50960: ARRAY
50961: ST_TO_ADDR
// for i = 1 to hexes do
50962: LD_ADDR_VAR 0 7
50966: PUSH
50967: DOUBLE
50968: LD_INT 1
50970: DEC
50971: ST_TO_ADDR
50972: LD_VAR 0 12
50976: PUSH
50977: FOR_TO
50978: IFFALSE 51308
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50980: LD_VAR 0 12
50984: PUSH
50985: LD_VAR 0 7
50989: ARRAY
50990: PUSH
50991: LD_INT 1
50993: ARRAY
50994: PPUSH
50995: LD_VAR 0 12
50999: PUSH
51000: LD_VAR 0 7
51004: ARRAY
51005: PUSH
51006: LD_INT 2
51008: ARRAY
51009: PPUSH
51010: CALL_OW 488
51014: NOT
51015: PUSH
51016: LD_VAR 0 12
51020: PUSH
51021: LD_VAR 0 7
51025: ARRAY
51026: PUSH
51027: LD_INT 1
51029: ARRAY
51030: PPUSH
51031: LD_VAR 0 12
51035: PUSH
51036: LD_VAR 0 7
51040: ARRAY
51041: PUSH
51042: LD_INT 2
51044: ARRAY
51045: PPUSH
51046: CALL_OW 428
51050: PUSH
51051: LD_INT 0
51053: GREATER
51054: OR
51055: PUSH
51056: LD_VAR 0 12
51060: PUSH
51061: LD_VAR 0 7
51065: ARRAY
51066: PUSH
51067: LD_INT 1
51069: ARRAY
51070: PPUSH
51071: LD_VAR 0 12
51075: PUSH
51076: LD_VAR 0 7
51080: ARRAY
51081: PUSH
51082: LD_INT 2
51084: ARRAY
51085: PPUSH
51086: CALL_OW 351
51090: OR
51091: IFFALSE 51097
// exit ;
51093: POP
51094: POP
51095: GO 51389
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51097: LD_ADDR_VAR 0 8
51101: PUSH
51102: LD_VAR 0 12
51106: PUSH
51107: LD_VAR 0 7
51111: ARRAY
51112: PUSH
51113: LD_INT 1
51115: ARRAY
51116: PPUSH
51117: LD_VAR 0 12
51121: PUSH
51122: LD_VAR 0 7
51126: ARRAY
51127: PUSH
51128: LD_INT 2
51130: ARRAY
51131: PPUSH
51132: CALL_OW 546
51136: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51137: LD_VAR 0 8
51141: PUSH
51142: LD_INT 1
51144: ARRAY
51145: PUSH
51146: LD_VAR 0 8
51150: PUSH
51151: LD_INT 2
51153: ARRAY
51154: PUSH
51155: LD_VAR 0 13
51159: PUSH
51160: LD_INT 2
51162: PLUS
51163: GREATER
51164: OR
51165: PUSH
51166: LD_VAR 0 8
51170: PUSH
51171: LD_INT 2
51173: ARRAY
51174: PUSH
51175: LD_VAR 0 13
51179: PUSH
51180: LD_INT 2
51182: MINUS
51183: LESS
51184: OR
51185: PUSH
51186: LD_VAR 0 8
51190: PUSH
51191: LD_INT 3
51193: ARRAY
51194: PUSH
51195: LD_INT 0
51197: PUSH
51198: LD_INT 8
51200: PUSH
51201: LD_INT 9
51203: PUSH
51204: LD_INT 10
51206: PUSH
51207: LD_INT 11
51209: PUSH
51210: LD_INT 12
51212: PUSH
51213: LD_INT 13
51215: PUSH
51216: LD_INT 16
51218: PUSH
51219: LD_INT 17
51221: PUSH
51222: LD_INT 18
51224: PUSH
51225: LD_INT 19
51227: PUSH
51228: LD_INT 20
51230: PUSH
51231: LD_INT 21
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: IN
51249: NOT
51250: OR
51251: PUSH
51252: LD_VAR 0 8
51256: PUSH
51257: LD_INT 5
51259: ARRAY
51260: NOT
51261: OR
51262: PUSH
51263: LD_VAR 0 8
51267: PUSH
51268: LD_INT 6
51270: ARRAY
51271: PUSH
51272: LD_INT 1
51274: PUSH
51275: LD_INT 2
51277: PUSH
51278: LD_INT 7
51280: PUSH
51281: LD_INT 9
51283: PUSH
51284: LD_INT 10
51286: PUSH
51287: LD_INT 11
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: IN
51298: NOT
51299: OR
51300: IFFALSE 51306
// exit ;
51302: POP
51303: POP
51304: GO 51389
// end ;
51306: GO 50977
51308: POP
51309: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
51310: LD_VAR 0 9
51314: PPUSH
51315: LD_VAR 0 3
51319: PPUSH
51320: LD_VAR 0 4
51324: PPUSH
51325: LD_INT 20
51327: PPUSH
51328: CALL 43335 0 4
51332: PUSH
51333: LD_INT 4
51335: ARRAY
51336: IFFALSE 51340
// exit ;
51338: GO 51389
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
51340: LD_VAR 0 2
51344: PUSH
51345: LD_INT 29
51347: PUSH
51348: LD_INT 30
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: IN
51355: PUSH
51356: LD_VAR 0 3
51360: PPUSH
51361: LD_VAR 0 4
51365: PPUSH
51366: LD_VAR 0 9
51370: PPUSH
51371: CALL_OW 440
51375: NOT
51376: AND
51377: IFFALSE 51381
// exit ;
51379: GO 51389
// result := true ;
51381: LD_ADDR_VAR 0 6
51385: PUSH
51386: LD_INT 1
51388: ST_TO_ADDR
// end ;
51389: LD_VAR 0 6
51393: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
51394: LD_INT 0
51396: PPUSH
51397: PPUSH
51398: PPUSH
51399: PPUSH
51400: PPUSH
51401: PPUSH
51402: PPUSH
51403: PPUSH
51404: PPUSH
51405: PPUSH
51406: PPUSH
51407: PPUSH
51408: PPUSH
51409: PPUSH
51410: PPUSH
51411: PPUSH
51412: PPUSH
51413: PPUSH
51414: PPUSH
51415: PPUSH
51416: PPUSH
51417: PPUSH
51418: PPUSH
51419: PPUSH
51420: PPUSH
51421: PPUSH
51422: PPUSH
51423: PPUSH
51424: PPUSH
51425: PPUSH
51426: PPUSH
51427: PPUSH
51428: PPUSH
51429: PPUSH
51430: PPUSH
51431: PPUSH
51432: PPUSH
51433: PPUSH
51434: PPUSH
51435: PPUSH
51436: PPUSH
51437: PPUSH
51438: PPUSH
51439: PPUSH
51440: PPUSH
51441: PPUSH
51442: PPUSH
51443: PPUSH
51444: PPUSH
51445: PPUSH
51446: PPUSH
51447: PPUSH
51448: PPUSH
51449: PPUSH
51450: PPUSH
51451: PPUSH
51452: PPUSH
51453: PPUSH
// result = [ ] ;
51454: LD_ADDR_VAR 0 7
51458: PUSH
51459: EMPTY
51460: ST_TO_ADDR
// temp_list = [ ] ;
51461: LD_ADDR_VAR 0 9
51465: PUSH
51466: EMPTY
51467: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
51468: LD_VAR 0 4
51472: PUSH
51473: LD_INT 0
51475: PUSH
51476: LD_INT 1
51478: PUSH
51479: LD_INT 2
51481: PUSH
51482: LD_INT 3
51484: PUSH
51485: LD_INT 4
51487: PUSH
51488: LD_INT 5
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: IN
51499: NOT
51500: PUSH
51501: LD_VAR 0 1
51505: PUSH
51506: LD_INT 0
51508: PUSH
51509: LD_INT 1
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: IN
51516: PUSH
51517: LD_VAR 0 5
51521: PUSH
51522: LD_INT 1
51524: PUSH
51525: LD_INT 2
51527: PUSH
51528: LD_INT 3
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: LIST
51535: IN
51536: NOT
51537: AND
51538: OR
51539: IFFALSE 51543
// exit ;
51541: GO 69934
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
51543: LD_VAR 0 1
51547: PUSH
51548: LD_INT 6
51550: PUSH
51551: LD_INT 7
51553: PUSH
51554: LD_INT 8
51556: PUSH
51557: LD_INT 13
51559: PUSH
51560: LD_INT 12
51562: PUSH
51563: LD_INT 15
51565: PUSH
51566: LD_INT 11
51568: PUSH
51569: LD_INT 14
51571: PUSH
51572: LD_INT 10
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: IN
51586: IFFALSE 51596
// btype = b_lab ;
51588: LD_ADDR_VAR 0 1
51592: PUSH
51593: LD_INT 6
51595: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
51596: LD_VAR 0 6
51600: PUSH
51601: LD_INT 0
51603: PUSH
51604: LD_INT 1
51606: PUSH
51607: LD_INT 2
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: LIST
51614: IN
51615: NOT
51616: PUSH
51617: LD_VAR 0 1
51621: PUSH
51622: LD_INT 0
51624: PUSH
51625: LD_INT 1
51627: PUSH
51628: LD_INT 2
51630: PUSH
51631: LD_INT 3
51633: PUSH
51634: LD_INT 6
51636: PUSH
51637: LD_INT 36
51639: PUSH
51640: LD_INT 4
51642: PUSH
51643: LD_INT 5
51645: PUSH
51646: LD_INT 31
51648: PUSH
51649: LD_INT 32
51651: PUSH
51652: LD_INT 33
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: IN
51668: NOT
51669: PUSH
51670: LD_VAR 0 6
51674: PUSH
51675: LD_INT 1
51677: EQUAL
51678: AND
51679: OR
51680: PUSH
51681: LD_VAR 0 1
51685: PUSH
51686: LD_INT 2
51688: PUSH
51689: LD_INT 3
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: IN
51696: NOT
51697: PUSH
51698: LD_VAR 0 6
51702: PUSH
51703: LD_INT 2
51705: EQUAL
51706: AND
51707: OR
51708: IFFALSE 51718
// mode = 0 ;
51710: LD_ADDR_VAR 0 6
51714: PUSH
51715: LD_INT 0
51717: ST_TO_ADDR
// case mode of 0 :
51718: LD_VAR 0 6
51722: PUSH
51723: LD_INT 0
51725: DOUBLE
51726: EQUAL
51727: IFTRUE 51731
51729: GO 63184
51731: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51732: LD_ADDR_VAR 0 11
51736: PUSH
51737: LD_INT 0
51739: PUSH
51740: LD_INT 0
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 0
51749: PUSH
51750: LD_INT 1
51752: NEG
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 1
51760: PUSH
51761: LD_INT 0
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 1
51770: PUSH
51771: LD_INT 1
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 0
51780: PUSH
51781: LD_INT 1
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 1
51790: NEG
51791: PUSH
51792: LD_INT 0
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 1
51801: NEG
51802: PUSH
51803: LD_INT 1
51805: NEG
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 1
51813: NEG
51814: PUSH
51815: LD_INT 2
51817: NEG
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 0
51825: PUSH
51826: LD_INT 2
51828: NEG
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 1
51836: PUSH
51837: LD_INT 1
51839: NEG
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 1
51847: PUSH
51848: LD_INT 2
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: LD_INT 2
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 1
51867: NEG
51868: PUSH
51869: LD_INT 1
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 1
51878: PUSH
51879: LD_INT 3
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 0
51888: PUSH
51889: LD_INT 3
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 1
51898: NEG
51899: PUSH
51900: LD_INT 2
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51925: LD_ADDR_VAR 0 12
51929: PUSH
51930: LD_INT 0
51932: PUSH
51933: LD_INT 0
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 0
51942: PUSH
51943: LD_INT 1
51945: NEG
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 1
51953: PUSH
51954: LD_INT 0
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 1
51963: PUSH
51964: LD_INT 1
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 0
51973: PUSH
51974: LD_INT 1
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 1
51983: NEG
51984: PUSH
51985: LD_INT 0
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 1
51994: NEG
51995: PUSH
51996: LD_INT 1
51998: NEG
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 1
52006: PUSH
52007: LD_INT 1
52009: NEG
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 2
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 2
52027: PUSH
52028: LD_INT 1
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 1
52037: NEG
52038: PUSH
52039: LD_INT 1
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 2
52048: NEG
52049: PUSH
52050: LD_INT 0
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 2
52059: NEG
52060: PUSH
52061: LD_INT 1
52063: NEG
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 2
52071: NEG
52072: PUSH
52073: LD_INT 1
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 3
52082: NEG
52083: PUSH
52084: LD_INT 0
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 3
52093: NEG
52094: PUSH
52095: LD_INT 1
52097: NEG
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52121: LD_ADDR_VAR 0 13
52125: PUSH
52126: LD_INT 0
52128: PUSH
52129: LD_INT 0
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 0
52138: PUSH
52139: LD_INT 1
52141: NEG
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 1
52149: PUSH
52150: LD_INT 0
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 1
52159: PUSH
52160: LD_INT 1
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 0
52169: PUSH
52170: LD_INT 1
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 1
52179: NEG
52180: PUSH
52181: LD_INT 0
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 1
52190: NEG
52191: PUSH
52192: LD_INT 1
52194: NEG
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 1
52202: NEG
52203: PUSH
52204: LD_INT 2
52206: NEG
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 2
52214: PUSH
52215: LD_INT 1
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 2
52224: PUSH
52225: LD_INT 2
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 1
52234: PUSH
52235: LD_INT 2
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 2
52244: NEG
52245: PUSH
52246: LD_INT 1
52248: NEG
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 2
52256: NEG
52257: PUSH
52258: LD_INT 2
52260: NEG
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 2
52268: NEG
52269: PUSH
52270: LD_INT 3
52272: NEG
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 3
52280: NEG
52281: PUSH
52282: LD_INT 2
52284: NEG
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 3
52292: NEG
52293: PUSH
52294: LD_INT 3
52296: NEG
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52320: LD_ADDR_VAR 0 14
52324: PUSH
52325: LD_INT 0
52327: PUSH
52328: LD_INT 0
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 0
52337: PUSH
52338: LD_INT 1
52340: NEG
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 1
52348: PUSH
52349: LD_INT 0
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 1
52358: PUSH
52359: LD_INT 1
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 0
52368: PUSH
52369: LD_INT 1
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 1
52378: NEG
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 1
52389: NEG
52390: PUSH
52391: LD_INT 1
52393: NEG
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 1
52401: NEG
52402: PUSH
52403: LD_INT 2
52405: NEG
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 0
52413: PUSH
52414: LD_INT 2
52416: NEG
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 1
52424: PUSH
52425: LD_INT 1
52427: NEG
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 1
52435: PUSH
52436: LD_INT 2
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 0
52445: PUSH
52446: LD_INT 2
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 1
52455: NEG
52456: PUSH
52457: LD_INT 1
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 1
52466: NEG
52467: PUSH
52468: LD_INT 3
52470: NEG
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 0
52478: PUSH
52479: LD_INT 3
52481: NEG
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 1
52489: PUSH
52490: LD_INT 2
52492: NEG
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52516: LD_ADDR_VAR 0 15
52520: PUSH
52521: LD_INT 0
52523: PUSH
52524: LD_INT 0
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 0
52533: PUSH
52534: LD_INT 1
52536: NEG
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 1
52544: PUSH
52545: LD_INT 0
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 1
52554: PUSH
52555: LD_INT 1
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 0
52564: PUSH
52565: LD_INT 1
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 1
52574: NEG
52575: PUSH
52576: LD_INT 0
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 1
52585: NEG
52586: PUSH
52587: LD_INT 1
52589: NEG
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 1
52597: PUSH
52598: LD_INT 1
52600: NEG
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 2
52608: PUSH
52609: LD_INT 0
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 2
52618: PUSH
52619: LD_INT 1
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 1
52628: NEG
52629: PUSH
52630: LD_INT 1
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 2
52639: NEG
52640: PUSH
52641: LD_INT 0
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 2
52650: NEG
52651: PUSH
52652: LD_INT 1
52654: NEG
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 2
52662: PUSH
52663: LD_INT 1
52665: NEG
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 3
52673: PUSH
52674: LD_INT 0
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 3
52683: PUSH
52684: LD_INT 1
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52709: LD_ADDR_VAR 0 16
52713: PUSH
52714: LD_INT 0
52716: PUSH
52717: LD_INT 0
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 0
52726: PUSH
52727: LD_INT 1
52729: NEG
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 1
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 1
52747: PUSH
52748: LD_INT 1
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 0
52757: PUSH
52758: LD_INT 1
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 1
52767: NEG
52768: PUSH
52769: LD_INT 0
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 1
52778: NEG
52779: PUSH
52780: LD_INT 1
52782: NEG
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 1
52790: NEG
52791: PUSH
52792: LD_INT 2
52794: NEG
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 2
52802: PUSH
52803: LD_INT 1
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 2
52812: PUSH
52813: LD_INT 2
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 1
52822: PUSH
52823: LD_INT 2
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 2
52832: NEG
52833: PUSH
52834: LD_INT 1
52836: NEG
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 2
52844: NEG
52845: PUSH
52846: LD_INT 2
52848: NEG
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 3
52856: PUSH
52857: LD_INT 2
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 3
52866: PUSH
52867: LD_INT 3
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 2
52876: PUSH
52877: LD_INT 3
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52902: LD_ADDR_VAR 0 17
52906: PUSH
52907: LD_INT 0
52909: PUSH
52910: LD_INT 0
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 0
52919: PUSH
52920: LD_INT 1
52922: NEG
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 1
52930: PUSH
52931: LD_INT 0
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 1
52940: PUSH
52941: LD_INT 1
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 0
52950: PUSH
52951: LD_INT 1
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 1
52960: NEG
52961: PUSH
52962: LD_INT 0
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 1
52971: NEG
52972: PUSH
52973: LD_INT 1
52975: NEG
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 1
52983: NEG
52984: PUSH
52985: LD_INT 2
52987: NEG
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 0
52995: PUSH
52996: LD_INT 2
52998: NEG
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 1
53006: PUSH
53007: LD_INT 1
53009: NEG
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 2
53017: PUSH
53018: LD_INT 0
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 2
53027: PUSH
53028: LD_INT 1
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 2
53037: PUSH
53038: LD_INT 2
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 1
53047: PUSH
53048: LD_INT 2
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 0
53057: PUSH
53058: LD_INT 2
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 1
53067: NEG
53068: PUSH
53069: LD_INT 1
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 2
53078: NEG
53079: PUSH
53080: LD_INT 0
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 2
53089: NEG
53090: PUSH
53091: LD_INT 1
53093: NEG
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 2
53101: NEG
53102: PUSH
53103: LD_INT 2
53105: NEG
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53132: LD_ADDR_VAR 0 18
53136: PUSH
53137: LD_INT 0
53139: PUSH
53140: LD_INT 0
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 0
53149: PUSH
53150: LD_INT 1
53152: NEG
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 1
53160: PUSH
53161: LD_INT 0
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 1
53170: PUSH
53171: LD_INT 1
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 0
53180: PUSH
53181: LD_INT 1
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 1
53190: NEG
53191: PUSH
53192: LD_INT 0
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 1
53201: NEG
53202: PUSH
53203: LD_INT 1
53205: NEG
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 1
53213: NEG
53214: PUSH
53215: LD_INT 2
53217: NEG
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 0
53225: PUSH
53226: LD_INT 2
53228: NEG
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 1
53236: PUSH
53237: LD_INT 1
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 2
53247: PUSH
53248: LD_INT 0
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 2
53257: PUSH
53258: LD_INT 1
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 2
53267: PUSH
53268: LD_INT 2
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 1
53277: PUSH
53278: LD_INT 2
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 0
53287: PUSH
53288: LD_INT 2
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 1
53297: NEG
53298: PUSH
53299: LD_INT 1
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 2
53308: NEG
53309: PUSH
53310: LD_INT 0
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 2
53319: NEG
53320: PUSH
53321: LD_INT 1
53323: NEG
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 2
53331: NEG
53332: PUSH
53333: LD_INT 2
53335: NEG
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53362: LD_ADDR_VAR 0 19
53366: PUSH
53367: LD_INT 0
53369: PUSH
53370: LD_INT 0
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 0
53379: PUSH
53380: LD_INT 1
53382: NEG
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 1
53390: PUSH
53391: LD_INT 0
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 1
53400: PUSH
53401: LD_INT 1
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 0
53410: PUSH
53411: LD_INT 1
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 1
53420: NEG
53421: PUSH
53422: LD_INT 0
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: NEG
53432: PUSH
53433: LD_INT 1
53435: NEG
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 1
53443: NEG
53444: PUSH
53445: LD_INT 2
53447: NEG
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 0
53455: PUSH
53456: LD_INT 2
53458: NEG
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 1
53466: PUSH
53467: LD_INT 1
53469: NEG
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 2
53477: PUSH
53478: LD_INT 0
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 2
53487: PUSH
53488: LD_INT 1
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 2
53497: PUSH
53498: LD_INT 2
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 1
53507: PUSH
53508: LD_INT 2
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 0
53517: PUSH
53518: LD_INT 2
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 1
53527: NEG
53528: PUSH
53529: LD_INT 1
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 2
53538: NEG
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 2
53549: NEG
53550: PUSH
53551: LD_INT 1
53553: NEG
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 2
53561: NEG
53562: PUSH
53563: LD_INT 2
53565: NEG
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53592: LD_ADDR_VAR 0 20
53596: PUSH
53597: LD_INT 0
53599: PUSH
53600: LD_INT 0
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 0
53609: PUSH
53610: LD_INT 1
53612: NEG
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 1
53620: PUSH
53621: LD_INT 0
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 1
53630: PUSH
53631: LD_INT 1
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 0
53640: PUSH
53641: LD_INT 1
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 1
53650: NEG
53651: PUSH
53652: LD_INT 0
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 1
53661: NEG
53662: PUSH
53663: LD_INT 1
53665: NEG
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 1
53673: NEG
53674: PUSH
53675: LD_INT 2
53677: NEG
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 0
53685: PUSH
53686: LD_INT 2
53688: NEG
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 1
53696: PUSH
53697: LD_INT 1
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 2
53707: PUSH
53708: LD_INT 0
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 2
53717: PUSH
53718: LD_INT 1
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 2
53727: PUSH
53728: LD_INT 2
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 1
53737: PUSH
53738: LD_INT 2
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 0
53747: PUSH
53748: LD_INT 2
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 1
53757: NEG
53758: PUSH
53759: LD_INT 1
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 2
53768: NEG
53769: PUSH
53770: LD_INT 0
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 2
53779: NEG
53780: PUSH
53781: LD_INT 1
53783: NEG
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 2
53791: NEG
53792: PUSH
53793: LD_INT 2
53795: NEG
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53822: LD_ADDR_VAR 0 21
53826: PUSH
53827: LD_INT 0
53829: PUSH
53830: LD_INT 0
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 0
53839: PUSH
53840: LD_INT 1
53842: NEG
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 1
53850: PUSH
53851: LD_INT 0
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 1
53860: PUSH
53861: LD_INT 1
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 0
53870: PUSH
53871: LD_INT 1
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 1
53880: NEG
53881: PUSH
53882: LD_INT 0
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 1
53891: NEG
53892: PUSH
53893: LD_INT 1
53895: NEG
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 1
53903: NEG
53904: PUSH
53905: LD_INT 2
53907: NEG
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 0
53915: PUSH
53916: LD_INT 2
53918: NEG
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 1
53926: PUSH
53927: LD_INT 1
53929: NEG
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 2
53937: PUSH
53938: LD_INT 0
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 2
53947: PUSH
53948: LD_INT 1
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 2
53957: PUSH
53958: LD_INT 2
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 1
53967: PUSH
53968: LD_INT 2
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 0
53977: PUSH
53978: LD_INT 2
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 1
53987: NEG
53988: PUSH
53989: LD_INT 1
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 2
53998: NEG
53999: PUSH
54000: LD_INT 0
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 2
54009: NEG
54010: PUSH
54011: LD_INT 1
54013: NEG
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 2
54021: NEG
54022: PUSH
54023: LD_INT 2
54025: NEG
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54052: LD_ADDR_VAR 0 22
54056: PUSH
54057: LD_INT 0
54059: PUSH
54060: LD_INT 0
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 0
54069: PUSH
54070: LD_INT 1
54072: NEG
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 1
54080: PUSH
54081: LD_INT 0
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 1
54090: PUSH
54091: LD_INT 1
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 0
54100: PUSH
54101: LD_INT 1
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 1
54110: NEG
54111: PUSH
54112: LD_INT 0
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 1
54121: NEG
54122: PUSH
54123: LD_INT 1
54125: NEG
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 1
54133: NEG
54134: PUSH
54135: LD_INT 2
54137: NEG
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 0
54145: PUSH
54146: LD_INT 2
54148: NEG
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 1
54156: PUSH
54157: LD_INT 1
54159: NEG
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 2
54167: PUSH
54168: LD_INT 0
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 2
54177: PUSH
54178: LD_INT 1
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 2
54187: PUSH
54188: LD_INT 2
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 1
54197: PUSH
54198: LD_INT 2
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 0
54207: PUSH
54208: LD_INT 2
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 1
54217: NEG
54218: PUSH
54219: LD_INT 1
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 2
54228: NEG
54229: PUSH
54230: LD_INT 0
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 2
54239: NEG
54240: PUSH
54241: LD_INT 1
54243: NEG
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 2
54251: NEG
54252: PUSH
54253: LD_INT 2
54255: NEG
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54282: LD_ADDR_VAR 0 23
54286: PUSH
54287: LD_INT 0
54289: PUSH
54290: LD_INT 0
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 0
54299: PUSH
54300: LD_INT 1
54302: NEG
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 1
54310: PUSH
54311: LD_INT 0
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 1
54320: PUSH
54321: LD_INT 1
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 0
54330: PUSH
54331: LD_INT 1
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 1
54340: NEG
54341: PUSH
54342: LD_INT 0
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 1
54351: NEG
54352: PUSH
54353: LD_INT 1
54355: NEG
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 1
54363: NEG
54364: PUSH
54365: LD_INT 2
54367: NEG
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 0
54375: PUSH
54376: LD_INT 2
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 1
54386: PUSH
54387: LD_INT 1
54389: NEG
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 2
54397: PUSH
54398: LD_INT 0
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 2
54407: PUSH
54408: LD_INT 1
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 2
54417: PUSH
54418: LD_INT 2
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 1
54427: PUSH
54428: LD_INT 2
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 0
54437: PUSH
54438: LD_INT 2
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 1
54447: NEG
54448: PUSH
54449: LD_INT 1
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 2
54458: NEG
54459: PUSH
54460: LD_INT 0
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 2
54469: NEG
54470: PUSH
54471: LD_INT 1
54473: NEG
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 2
54481: NEG
54482: PUSH
54483: LD_INT 2
54485: NEG
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 2
54493: NEG
54494: PUSH
54495: LD_INT 3
54497: NEG
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 1
54505: NEG
54506: PUSH
54507: LD_INT 3
54509: NEG
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 1
54517: PUSH
54518: LD_INT 2
54520: NEG
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 2
54528: PUSH
54529: LD_INT 1
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
54562: LD_ADDR_VAR 0 24
54566: PUSH
54567: LD_INT 0
54569: PUSH
54570: LD_INT 0
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 0
54579: PUSH
54580: LD_INT 1
54582: NEG
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 1
54590: PUSH
54591: LD_INT 0
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 1
54600: PUSH
54601: LD_INT 1
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 0
54610: PUSH
54611: LD_INT 1
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 1
54620: NEG
54621: PUSH
54622: LD_INT 0
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 1
54631: NEG
54632: PUSH
54633: LD_INT 1
54635: NEG
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 1
54643: NEG
54644: PUSH
54645: LD_INT 2
54647: NEG
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 0
54655: PUSH
54656: LD_INT 2
54658: NEG
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 1
54666: PUSH
54667: LD_INT 1
54669: NEG
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 2
54677: PUSH
54678: LD_INT 0
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 2
54687: PUSH
54688: LD_INT 1
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 2
54697: PUSH
54698: LD_INT 2
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 1
54707: PUSH
54708: LD_INT 2
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 0
54717: PUSH
54718: LD_INT 2
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 1
54727: NEG
54728: PUSH
54729: LD_INT 1
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 2
54738: NEG
54739: PUSH
54740: LD_INT 0
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 2
54749: NEG
54750: PUSH
54751: LD_INT 1
54753: NEG
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 2
54761: NEG
54762: PUSH
54763: LD_INT 2
54765: NEG
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 1
54773: PUSH
54774: LD_INT 2
54776: NEG
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 2
54784: PUSH
54785: LD_INT 1
54787: NEG
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 3
54795: PUSH
54796: LD_INT 1
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 3
54805: PUSH
54806: LD_INT 2
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54838: LD_ADDR_VAR 0 25
54842: PUSH
54843: LD_INT 0
54845: PUSH
54846: LD_INT 0
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 0
54855: PUSH
54856: LD_INT 1
54858: NEG
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 1
54866: PUSH
54867: LD_INT 0
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 1
54876: PUSH
54877: LD_INT 1
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 0
54886: PUSH
54887: LD_INT 1
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 1
54896: NEG
54897: PUSH
54898: LD_INT 0
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 1
54907: NEG
54908: PUSH
54909: LD_INT 1
54911: NEG
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 1
54919: NEG
54920: PUSH
54921: LD_INT 2
54923: NEG
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 0
54931: PUSH
54932: LD_INT 2
54934: NEG
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 1
54942: PUSH
54943: LD_INT 1
54945: NEG
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 2
54953: PUSH
54954: LD_INT 0
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 2
54963: PUSH
54964: LD_INT 1
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 2
54973: PUSH
54974: LD_INT 2
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 1
54983: PUSH
54984: LD_INT 2
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 0
54993: PUSH
54994: LD_INT 2
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 1
55003: NEG
55004: PUSH
55005: LD_INT 1
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 2
55014: NEG
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 2
55025: NEG
55026: PUSH
55027: LD_INT 1
55029: NEG
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 2
55037: NEG
55038: PUSH
55039: LD_INT 2
55041: NEG
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 3
55049: PUSH
55050: LD_INT 1
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 3
55059: PUSH
55060: LD_INT 2
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 2
55069: PUSH
55070: LD_INT 3
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 1
55079: PUSH
55080: LD_INT 3
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55112: LD_ADDR_VAR 0 26
55116: PUSH
55117: LD_INT 0
55119: PUSH
55120: LD_INT 0
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 0
55129: PUSH
55130: LD_INT 1
55132: NEG
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 1
55140: PUSH
55141: LD_INT 0
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 1
55150: PUSH
55151: LD_INT 1
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 0
55160: PUSH
55161: LD_INT 1
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 1
55170: NEG
55171: PUSH
55172: LD_INT 0
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 1
55181: NEG
55182: PUSH
55183: LD_INT 1
55185: NEG
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 1
55193: NEG
55194: PUSH
55195: LD_INT 2
55197: NEG
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 0
55205: PUSH
55206: LD_INT 2
55208: NEG
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 1
55216: PUSH
55217: LD_INT 1
55219: NEG
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 2
55227: PUSH
55228: LD_INT 0
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 2
55237: PUSH
55238: LD_INT 1
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 2
55247: PUSH
55248: LD_INT 2
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 1
55257: PUSH
55258: LD_INT 2
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 0
55267: PUSH
55268: LD_INT 2
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 1
55277: NEG
55278: PUSH
55279: LD_INT 1
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 2
55288: NEG
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 2
55299: NEG
55300: PUSH
55301: LD_INT 1
55303: NEG
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 2
55311: NEG
55312: PUSH
55313: LD_INT 2
55315: NEG
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 2
55323: PUSH
55324: LD_INT 3
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 1
55333: PUSH
55334: LD_INT 3
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 1
55343: NEG
55344: PUSH
55345: LD_INT 2
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 2
55354: NEG
55355: PUSH
55356: LD_INT 1
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55388: LD_ADDR_VAR 0 27
55392: PUSH
55393: LD_INT 0
55395: PUSH
55396: LD_INT 0
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 0
55405: PUSH
55406: LD_INT 1
55408: NEG
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 1
55416: PUSH
55417: LD_INT 0
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 1
55426: PUSH
55427: LD_INT 1
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 0
55436: PUSH
55437: LD_INT 1
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: PUSH
55448: LD_INT 0
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 1
55457: NEG
55458: PUSH
55459: LD_INT 1
55461: NEG
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 1
55469: NEG
55470: PUSH
55471: LD_INT 2
55473: NEG
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 0
55481: PUSH
55482: LD_INT 2
55484: NEG
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 1
55492: PUSH
55493: LD_INT 1
55495: NEG
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 2
55503: PUSH
55504: LD_INT 0
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 2
55513: PUSH
55514: LD_INT 1
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 2
55523: PUSH
55524: LD_INT 2
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 1
55533: PUSH
55534: LD_INT 2
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 0
55543: PUSH
55544: LD_INT 2
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 1
55553: NEG
55554: PUSH
55555: LD_INT 1
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 2
55564: NEG
55565: PUSH
55566: LD_INT 0
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 2
55575: NEG
55576: PUSH
55577: LD_INT 1
55579: NEG
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 2
55587: NEG
55588: PUSH
55589: LD_INT 2
55591: NEG
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 1
55599: NEG
55600: PUSH
55601: LD_INT 2
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 2
55610: NEG
55611: PUSH
55612: LD_INT 1
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 3
55621: NEG
55622: PUSH
55623: LD_INT 1
55625: NEG
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 3
55633: NEG
55634: PUSH
55635: LD_INT 2
55637: NEG
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55668: LD_ADDR_VAR 0 28
55672: PUSH
55673: LD_INT 0
55675: PUSH
55676: LD_INT 0
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 0
55685: PUSH
55686: LD_INT 1
55688: NEG
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 1
55696: PUSH
55697: LD_INT 0
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 1
55706: PUSH
55707: LD_INT 1
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 0
55716: PUSH
55717: LD_INT 1
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 1
55726: NEG
55727: PUSH
55728: LD_INT 0
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 1
55737: NEG
55738: PUSH
55739: LD_INT 1
55741: NEG
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 1
55749: NEG
55750: PUSH
55751: LD_INT 2
55753: NEG
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 0
55761: PUSH
55762: LD_INT 2
55764: NEG
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 1
55772: PUSH
55773: LD_INT 1
55775: NEG
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 2
55783: PUSH
55784: LD_INT 0
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 2
55793: PUSH
55794: LD_INT 1
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 2
55803: PUSH
55804: LD_INT 2
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 1
55813: PUSH
55814: LD_INT 2
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 0
55823: PUSH
55824: LD_INT 2
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 1
55833: NEG
55834: PUSH
55835: LD_INT 1
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 2
55844: NEG
55845: PUSH
55846: LD_INT 0
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 2
55855: NEG
55856: PUSH
55857: LD_INT 1
55859: NEG
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 2
55867: NEG
55868: PUSH
55869: LD_INT 2
55871: NEG
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 2
55879: NEG
55880: PUSH
55881: LD_INT 3
55883: NEG
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 1
55891: NEG
55892: PUSH
55893: LD_INT 3
55895: NEG
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 3
55903: NEG
55904: PUSH
55905: LD_INT 1
55907: NEG
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 3
55915: NEG
55916: PUSH
55917: LD_INT 2
55919: NEG
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55950: LD_ADDR_VAR 0 29
55954: PUSH
55955: LD_INT 0
55957: PUSH
55958: LD_INT 0
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 0
55967: PUSH
55968: LD_INT 1
55970: NEG
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 1
55978: PUSH
55979: LD_INT 0
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 1
55988: PUSH
55989: LD_INT 1
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 0
55998: PUSH
55999: LD_INT 1
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 1
56008: NEG
56009: PUSH
56010: LD_INT 0
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 1
56019: NEG
56020: PUSH
56021: LD_INT 1
56023: NEG
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 1
56031: NEG
56032: PUSH
56033: LD_INT 2
56035: NEG
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 0
56043: PUSH
56044: LD_INT 2
56046: NEG
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 1
56054: PUSH
56055: LD_INT 1
56057: NEG
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 2
56065: PUSH
56066: LD_INT 0
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 2
56075: PUSH
56076: LD_INT 1
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 1
56085: PUSH
56086: LD_INT 2
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 0
56095: PUSH
56096: LD_INT 2
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 1
56105: NEG
56106: PUSH
56107: LD_INT 1
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 2
56116: NEG
56117: PUSH
56118: LD_INT 1
56120: NEG
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 2
56128: NEG
56129: PUSH
56130: LD_INT 2
56132: NEG
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 2
56140: NEG
56141: PUSH
56142: LD_INT 3
56144: NEG
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 2
56152: PUSH
56153: LD_INT 1
56155: NEG
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 3
56163: PUSH
56164: LD_INT 1
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 1
56173: PUSH
56174: LD_INT 3
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 1
56183: NEG
56184: PUSH
56185: LD_INT 2
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 3
56194: NEG
56195: PUSH
56196: LD_INT 2
56198: NEG
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56229: LD_ADDR_VAR 0 30
56233: PUSH
56234: LD_INT 0
56236: PUSH
56237: LD_INT 0
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 0
56246: PUSH
56247: LD_INT 1
56249: NEG
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 1
56257: PUSH
56258: LD_INT 0
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 1
56267: PUSH
56268: LD_INT 1
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 0
56277: PUSH
56278: LD_INT 1
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 1
56287: NEG
56288: PUSH
56289: LD_INT 0
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 1
56298: NEG
56299: PUSH
56300: LD_INT 1
56302: NEG
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 1
56310: NEG
56311: PUSH
56312: LD_INT 2
56314: NEG
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 0
56322: PUSH
56323: LD_INT 2
56325: NEG
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 1
56333: PUSH
56334: LD_INT 1
56336: NEG
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 2
56344: PUSH
56345: LD_INT 0
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 2
56354: PUSH
56355: LD_INT 1
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 2
56364: PUSH
56365: LD_INT 2
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 1
56374: PUSH
56375: LD_INT 2
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 1
56384: NEG
56385: PUSH
56386: LD_INT 1
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 2
56395: NEG
56396: PUSH
56397: LD_INT 0
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 2
56406: NEG
56407: PUSH
56408: LD_INT 1
56410: NEG
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 1
56418: NEG
56419: PUSH
56420: LD_INT 3
56422: NEG
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 1
56430: PUSH
56431: LD_INT 2
56433: NEG
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 3
56441: PUSH
56442: LD_INT 2
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 2
56451: PUSH
56452: LD_INT 3
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 2
56461: NEG
56462: PUSH
56463: LD_INT 1
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 3
56472: NEG
56473: PUSH
56474: LD_INT 1
56476: NEG
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56507: LD_ADDR_VAR 0 31
56511: PUSH
56512: LD_INT 0
56514: PUSH
56515: LD_INT 0
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 0
56524: PUSH
56525: LD_INT 1
56527: NEG
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 1
56535: PUSH
56536: LD_INT 0
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 1
56545: PUSH
56546: LD_INT 1
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 0
56555: PUSH
56556: LD_INT 1
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 1
56565: NEG
56566: PUSH
56567: LD_INT 0
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 1
56576: NEG
56577: PUSH
56578: LD_INT 1
56580: NEG
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 1
56588: NEG
56589: PUSH
56590: LD_INT 2
56592: NEG
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 1
56600: PUSH
56601: LD_INT 1
56603: NEG
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 2
56611: PUSH
56612: LD_INT 0
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 2
56621: PUSH
56622: LD_INT 1
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 2
56631: PUSH
56632: LD_INT 2
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 1
56641: PUSH
56642: LD_INT 2
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 0
56651: PUSH
56652: LD_INT 2
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 1
56661: NEG
56662: PUSH
56663: LD_INT 1
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 2
56672: NEG
56673: PUSH
56674: LD_INT 1
56676: NEG
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 2
56684: NEG
56685: PUSH
56686: LD_INT 2
56688: NEG
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 2
56696: NEG
56697: PUSH
56698: LD_INT 3
56700: NEG
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 2
56708: PUSH
56709: LD_INT 1
56711: NEG
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 3
56719: PUSH
56720: LD_INT 1
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 1
56729: PUSH
56730: LD_INT 3
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 1
56739: NEG
56740: PUSH
56741: LD_INT 2
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 3
56750: NEG
56751: PUSH
56752: LD_INT 2
56754: NEG
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56785: LD_ADDR_VAR 0 32
56789: PUSH
56790: LD_INT 0
56792: PUSH
56793: LD_INT 0
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 0
56802: PUSH
56803: LD_INT 1
56805: NEG
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 1
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 1
56823: PUSH
56824: LD_INT 1
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 0
56833: PUSH
56834: LD_INT 1
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 1
56843: NEG
56844: PUSH
56845: LD_INT 0
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 1
56854: NEG
56855: PUSH
56856: LD_INT 1
56858: NEG
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 1
56866: NEG
56867: PUSH
56868: LD_INT 2
56870: NEG
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 0
56878: PUSH
56879: LD_INT 2
56881: NEG
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 1
56889: PUSH
56890: LD_INT 1
56892: NEG
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 2
56900: PUSH
56901: LD_INT 1
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 2
56910: PUSH
56911: LD_INT 2
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 1
56920: PUSH
56921: LD_INT 2
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 0
56930: PUSH
56931: LD_INT 2
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 1
56940: NEG
56941: PUSH
56942: LD_INT 1
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 2
56951: NEG
56952: PUSH
56953: LD_INT 0
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 2
56962: NEG
56963: PUSH
56964: LD_INT 1
56966: NEG
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 1
56974: NEG
56975: PUSH
56976: LD_INT 3
56978: NEG
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 1
56986: PUSH
56987: LD_INT 2
56989: NEG
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 3
56997: PUSH
56998: LD_INT 2
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 2
57007: PUSH
57008: LD_INT 3
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 2
57017: NEG
57018: PUSH
57019: LD_INT 1
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 3
57028: NEG
57029: PUSH
57030: LD_INT 1
57032: NEG
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57063: LD_ADDR_VAR 0 33
57067: PUSH
57068: LD_INT 0
57070: PUSH
57071: LD_INT 0
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 0
57080: PUSH
57081: LD_INT 1
57083: NEG
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 1
57091: PUSH
57092: LD_INT 0
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 1
57101: PUSH
57102: LD_INT 1
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 0
57111: PUSH
57112: LD_INT 1
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 1
57121: NEG
57122: PUSH
57123: LD_INT 0
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 1
57132: NEG
57133: PUSH
57134: LD_INT 1
57136: NEG
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 1
57144: NEG
57145: PUSH
57146: LD_INT 2
57148: NEG
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 1
57156: PUSH
57157: LD_INT 1
57159: NEG
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 2
57167: PUSH
57168: LD_INT 0
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 2
57177: PUSH
57178: LD_INT 1
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 1
57187: PUSH
57188: LD_INT 2
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 0
57197: PUSH
57198: LD_INT 2
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 1
57207: NEG
57208: PUSH
57209: LD_INT 1
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 2
57218: NEG
57219: PUSH
57220: LD_INT 0
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 2
57229: NEG
57230: PUSH
57231: LD_INT 1
57233: NEG
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 2
57241: NEG
57242: PUSH
57243: LD_INT 2
57245: NEG
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 2
57253: NEG
57254: PUSH
57255: LD_INT 3
57257: NEG
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 2
57265: PUSH
57266: LD_INT 1
57268: NEG
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 3
57276: PUSH
57277: LD_INT 1
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 1
57286: PUSH
57287: LD_INT 3
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 1
57296: NEG
57297: PUSH
57298: LD_INT 2
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 3
57307: NEG
57308: PUSH
57309: LD_INT 2
57311: NEG
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57342: LD_ADDR_VAR 0 34
57346: PUSH
57347: LD_INT 0
57349: PUSH
57350: LD_INT 0
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 0
57359: PUSH
57360: LD_INT 1
57362: NEG
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 1
57370: PUSH
57371: LD_INT 0
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 1
57380: PUSH
57381: LD_INT 1
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 0
57390: PUSH
57391: LD_INT 1
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 1
57400: NEG
57401: PUSH
57402: LD_INT 0
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 1
57411: NEG
57412: PUSH
57413: LD_INT 1
57415: NEG
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 1
57423: NEG
57424: PUSH
57425: LD_INT 2
57427: NEG
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 0
57435: PUSH
57436: LD_INT 2
57438: NEG
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 1
57446: PUSH
57447: LD_INT 1
57449: NEG
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 2
57457: PUSH
57458: LD_INT 1
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 2
57467: PUSH
57468: LD_INT 2
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 1
57477: PUSH
57478: LD_INT 2
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 1
57487: NEG
57488: PUSH
57489: LD_INT 1
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 2
57498: NEG
57499: PUSH
57500: LD_INT 0
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 2
57509: NEG
57510: PUSH
57511: LD_INT 1
57513: NEG
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 2
57521: NEG
57522: PUSH
57523: LD_INT 2
57525: NEG
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 1
57533: NEG
57534: PUSH
57535: LD_INT 3
57537: NEG
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 1
57545: PUSH
57546: LD_INT 2
57548: NEG
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 3
57556: PUSH
57557: LD_INT 2
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 2
57566: PUSH
57567: LD_INT 3
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 2
57576: NEG
57577: PUSH
57578: LD_INT 1
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 3
57587: NEG
57588: PUSH
57589: LD_INT 1
57591: NEG
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57622: LD_ADDR_VAR 0 35
57626: PUSH
57627: LD_INT 0
57629: PUSH
57630: LD_INT 0
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 0
57639: PUSH
57640: LD_INT 1
57642: NEG
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 1
57650: PUSH
57651: LD_INT 0
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 1
57660: PUSH
57661: LD_INT 1
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 0
57670: PUSH
57671: LD_INT 1
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 1
57680: NEG
57681: PUSH
57682: LD_INT 0
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 1
57691: NEG
57692: PUSH
57693: LD_INT 1
57695: NEG
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 2
57703: PUSH
57704: LD_INT 1
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 2
57713: NEG
57714: PUSH
57715: LD_INT 1
57717: NEG
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57734: LD_ADDR_VAR 0 36
57738: PUSH
57739: LD_INT 0
57741: PUSH
57742: LD_INT 0
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 0
57751: PUSH
57752: LD_INT 1
57754: NEG
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 1
57762: PUSH
57763: LD_INT 0
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 1
57772: PUSH
57773: LD_INT 1
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 0
57782: PUSH
57783: LD_INT 1
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 1
57792: NEG
57793: PUSH
57794: LD_INT 0
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 1
57803: NEG
57804: PUSH
57805: LD_INT 1
57807: NEG
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 1
57815: NEG
57816: PUSH
57817: LD_INT 2
57819: NEG
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 1
57827: PUSH
57828: LD_INT 2
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57846: LD_ADDR_VAR 0 37
57850: PUSH
57851: LD_INT 0
57853: PUSH
57854: LD_INT 0
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 0
57863: PUSH
57864: LD_INT 1
57866: NEG
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 1
57874: PUSH
57875: LD_INT 0
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 1
57884: PUSH
57885: LD_INT 1
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 0
57894: PUSH
57895: LD_INT 1
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 1
57904: NEG
57905: PUSH
57906: LD_INT 0
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 1
57915: NEG
57916: PUSH
57917: LD_INT 1
57919: NEG
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 1
57927: PUSH
57928: LD_INT 1
57930: NEG
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 1
57938: NEG
57939: PUSH
57940: LD_INT 1
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57958: LD_ADDR_VAR 0 38
57962: PUSH
57963: LD_INT 0
57965: PUSH
57966: LD_INT 0
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 0
57975: PUSH
57976: LD_INT 1
57978: NEG
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 1
57986: PUSH
57987: LD_INT 0
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 1
57996: PUSH
57997: LD_INT 1
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 0
58006: PUSH
58007: LD_INT 1
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 1
58016: NEG
58017: PUSH
58018: LD_INT 0
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 1
58027: NEG
58028: PUSH
58029: LD_INT 1
58031: NEG
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 2
58039: PUSH
58040: LD_INT 1
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 2
58049: NEG
58050: PUSH
58051: LD_INT 1
58053: NEG
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58070: LD_ADDR_VAR 0 39
58074: PUSH
58075: LD_INT 0
58077: PUSH
58078: LD_INT 0
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 0
58087: PUSH
58088: LD_INT 1
58090: NEG
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 1
58098: PUSH
58099: LD_INT 0
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 1
58108: PUSH
58109: LD_INT 1
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 0
58118: PUSH
58119: LD_INT 1
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 1
58128: NEG
58129: PUSH
58130: LD_INT 0
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 1
58139: NEG
58140: PUSH
58141: LD_INT 1
58143: NEG
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 1
58151: NEG
58152: PUSH
58153: LD_INT 2
58155: NEG
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 1
58163: PUSH
58164: LD_INT 2
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58182: LD_ADDR_VAR 0 40
58186: PUSH
58187: LD_INT 0
58189: PUSH
58190: LD_INT 0
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 0
58199: PUSH
58200: LD_INT 1
58202: NEG
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 1
58210: PUSH
58211: LD_INT 0
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 1
58220: PUSH
58221: LD_INT 1
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 0
58230: PUSH
58231: LD_INT 1
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 1
58240: NEG
58241: PUSH
58242: LD_INT 0
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 1
58251: NEG
58252: PUSH
58253: LD_INT 1
58255: NEG
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 1
58263: PUSH
58264: LD_INT 1
58266: NEG
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 1
58274: NEG
58275: PUSH
58276: LD_INT 1
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58294: LD_ADDR_VAR 0 41
58298: PUSH
58299: LD_INT 0
58301: PUSH
58302: LD_INT 0
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 0
58311: PUSH
58312: LD_INT 1
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 1
58322: PUSH
58323: LD_INT 0
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 1
58332: PUSH
58333: LD_INT 1
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 0
58342: PUSH
58343: LD_INT 1
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 1
58352: NEG
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 1
58363: NEG
58364: PUSH
58365: LD_INT 1
58367: NEG
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 1
58375: NEG
58376: PUSH
58377: LD_INT 2
58379: NEG
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 1
58387: PUSH
58388: LD_INT 1
58390: NEG
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 2
58398: PUSH
58399: LD_INT 0
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 2
58408: PUSH
58409: LD_INT 1
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 2
58418: PUSH
58419: LD_INT 2
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 1
58428: PUSH
58429: LD_INT 2
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 1
58438: NEG
58439: PUSH
58440: LD_INT 1
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 2
58449: NEG
58450: PUSH
58451: LD_INT 0
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 2
58460: NEG
58461: PUSH
58462: LD_INT 1
58464: NEG
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 2
58472: NEG
58473: PUSH
58474: LD_INT 2
58476: NEG
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 2
58484: NEG
58485: PUSH
58486: LD_INT 3
58488: NEG
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 2
58496: PUSH
58497: LD_INT 1
58499: NEG
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 3
58507: PUSH
58508: LD_INT 0
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 3
58517: PUSH
58518: LD_INT 1
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 3
58527: PUSH
58528: LD_INT 2
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 3
58537: PUSH
58538: LD_INT 3
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 2
58547: PUSH
58548: LD_INT 3
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 2
58557: NEG
58558: PUSH
58559: LD_INT 1
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 3
58568: NEG
58569: PUSH
58570: LD_INT 0
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 3
58579: NEG
58580: PUSH
58581: LD_INT 1
58583: NEG
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 3
58591: NEG
58592: PUSH
58593: LD_INT 2
58595: NEG
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 3
58603: NEG
58604: PUSH
58605: LD_INT 3
58607: NEG
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58644: LD_ADDR_VAR 0 42
58648: PUSH
58649: LD_INT 0
58651: PUSH
58652: LD_INT 0
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 0
58661: PUSH
58662: LD_INT 1
58664: NEG
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 1
58672: PUSH
58673: LD_INT 0
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 1
58682: PUSH
58683: LD_INT 1
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 0
58692: PUSH
58693: LD_INT 1
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 1
58702: NEG
58703: PUSH
58704: LD_INT 0
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 1
58713: NEG
58714: PUSH
58715: LD_INT 1
58717: NEG
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 1
58725: NEG
58726: PUSH
58727: LD_INT 2
58729: NEG
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 0
58737: PUSH
58738: LD_INT 2
58740: NEG
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 1
58748: PUSH
58749: LD_INT 1
58751: NEG
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 2
58759: PUSH
58760: LD_INT 1
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 2
58769: PUSH
58770: LD_INT 2
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 1
58779: PUSH
58780: LD_INT 2
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 0
58789: PUSH
58790: LD_INT 2
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 1
58799: NEG
58800: PUSH
58801: LD_INT 1
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 2
58810: NEG
58811: PUSH
58812: LD_INT 1
58814: NEG
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 2
58822: NEG
58823: PUSH
58824: LD_INT 2
58826: NEG
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 2
58834: NEG
58835: PUSH
58836: LD_INT 3
58838: NEG
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 1
58846: NEG
58847: PUSH
58848: LD_INT 3
58850: NEG
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 0
58858: PUSH
58859: LD_INT 3
58861: NEG
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 1
58869: PUSH
58870: LD_INT 2
58872: NEG
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 3
58880: PUSH
58881: LD_INT 2
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 3
58890: PUSH
58891: LD_INT 3
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 2
58900: PUSH
58901: LD_INT 3
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 1
58910: PUSH
58911: LD_INT 3
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 0
58920: PUSH
58921: LD_INT 3
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 1
58930: NEG
58931: PUSH
58932: LD_INT 2
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 3
58941: NEG
58942: PUSH
58943: LD_INT 2
58945: NEG
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 3
58953: NEG
58954: PUSH
58955: LD_INT 3
58957: NEG
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58994: LD_ADDR_VAR 0 43
58998: PUSH
58999: LD_INT 0
59001: PUSH
59002: LD_INT 0
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 0
59011: PUSH
59012: LD_INT 1
59014: NEG
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 1
59022: PUSH
59023: LD_INT 0
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 1
59032: PUSH
59033: LD_INT 1
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 0
59042: PUSH
59043: LD_INT 1
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 1
59052: NEG
59053: PUSH
59054: LD_INT 0
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 1
59063: NEG
59064: PUSH
59065: LD_INT 1
59067: NEG
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 1
59075: NEG
59076: PUSH
59077: LD_INT 2
59079: NEG
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 0
59087: PUSH
59088: LD_INT 2
59090: NEG
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 1
59098: PUSH
59099: LD_INT 1
59101: NEG
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 2
59109: PUSH
59110: LD_INT 0
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 2
59119: PUSH
59120: LD_INT 1
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 1
59129: PUSH
59130: LD_INT 2
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 0
59139: PUSH
59140: LD_INT 2
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 1
59149: NEG
59150: PUSH
59151: LD_INT 1
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 2
59160: NEG
59161: PUSH
59162: LD_INT 0
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 2
59171: NEG
59172: PUSH
59173: LD_INT 1
59175: NEG
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 1
59183: NEG
59184: PUSH
59185: LD_INT 3
59187: NEG
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 0
59195: PUSH
59196: LD_INT 3
59198: NEG
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 1
59206: PUSH
59207: LD_INT 2
59209: NEG
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 2
59217: PUSH
59218: LD_INT 1
59220: NEG
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 3
59228: PUSH
59229: LD_INT 0
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 3
59238: PUSH
59239: LD_INT 1
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 1
59248: PUSH
59249: LD_INT 3
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 0
59258: PUSH
59259: LD_INT 3
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 1
59268: NEG
59269: PUSH
59270: LD_INT 2
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 2
59279: NEG
59280: PUSH
59281: LD_INT 1
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 3
59290: NEG
59291: PUSH
59292: LD_INT 0
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 3
59301: NEG
59302: PUSH
59303: LD_INT 1
59305: NEG
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59342: LD_ADDR_VAR 0 44
59346: PUSH
59347: LD_INT 0
59349: PUSH
59350: LD_INT 0
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 0
59359: PUSH
59360: LD_INT 1
59362: NEG
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 1
59370: PUSH
59371: LD_INT 0
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 1
59380: PUSH
59381: LD_INT 1
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 0
59390: PUSH
59391: LD_INT 1
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 1
59400: NEG
59401: PUSH
59402: LD_INT 0
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 1
59411: NEG
59412: PUSH
59413: LD_INT 1
59415: NEG
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 1
59423: NEG
59424: PUSH
59425: LD_INT 2
59427: NEG
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 1
59435: PUSH
59436: LD_INT 1
59438: NEG
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 2
59446: PUSH
59447: LD_INT 0
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 2
59456: PUSH
59457: LD_INT 1
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 2
59466: PUSH
59467: LD_INT 2
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 1
59476: PUSH
59477: LD_INT 2
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 1
59486: NEG
59487: PUSH
59488: LD_INT 1
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 2
59497: NEG
59498: PUSH
59499: LD_INT 0
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 2
59508: NEG
59509: PUSH
59510: LD_INT 1
59512: NEG
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 2
59520: NEG
59521: PUSH
59522: LD_INT 2
59524: NEG
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 2
59532: NEG
59533: PUSH
59534: LD_INT 3
59536: NEG
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 2
59544: PUSH
59545: LD_INT 1
59547: NEG
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 3
59555: PUSH
59556: LD_INT 0
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 3
59565: PUSH
59566: LD_INT 1
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 3
59575: PUSH
59576: LD_INT 2
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 3
59585: PUSH
59586: LD_INT 3
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 2
59595: PUSH
59596: LD_INT 3
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 2
59605: NEG
59606: PUSH
59607: LD_INT 1
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 3
59616: NEG
59617: PUSH
59618: LD_INT 0
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 3
59627: NEG
59628: PUSH
59629: LD_INT 1
59631: NEG
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 3
59639: NEG
59640: PUSH
59641: LD_INT 2
59643: NEG
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 3
59651: NEG
59652: PUSH
59653: LD_INT 3
59655: NEG
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59692: LD_ADDR_VAR 0 45
59696: PUSH
59697: LD_INT 0
59699: PUSH
59700: LD_INT 0
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 0
59709: PUSH
59710: LD_INT 1
59712: NEG
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 1
59720: PUSH
59721: LD_INT 0
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 1
59730: PUSH
59731: LD_INT 1
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 0
59740: PUSH
59741: LD_INT 1
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 1
59750: NEG
59751: PUSH
59752: LD_INT 0
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 1
59761: NEG
59762: PUSH
59763: LD_INT 1
59765: NEG
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 1
59773: NEG
59774: PUSH
59775: LD_INT 2
59777: NEG
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 0
59785: PUSH
59786: LD_INT 2
59788: NEG
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 1
59796: PUSH
59797: LD_INT 1
59799: NEG
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 2
59807: PUSH
59808: LD_INT 1
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 2
59817: PUSH
59818: LD_INT 2
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 1
59827: PUSH
59828: LD_INT 2
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 0
59837: PUSH
59838: LD_INT 2
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 1
59847: NEG
59848: PUSH
59849: LD_INT 1
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 2
59858: NEG
59859: PUSH
59860: LD_INT 1
59862: NEG
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 2
59870: NEG
59871: PUSH
59872: LD_INT 2
59874: NEG
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 2
59882: NEG
59883: PUSH
59884: LD_INT 3
59886: NEG
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 1
59894: NEG
59895: PUSH
59896: LD_INT 3
59898: NEG
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 0
59906: PUSH
59907: LD_INT 3
59909: NEG
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 1
59917: PUSH
59918: LD_INT 2
59920: NEG
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 3
59928: PUSH
59929: LD_INT 2
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 3
59938: PUSH
59939: LD_INT 3
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 2
59948: PUSH
59949: LD_INT 3
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 1
59958: PUSH
59959: LD_INT 3
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 0
59968: PUSH
59969: LD_INT 3
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 1
59978: NEG
59979: PUSH
59980: LD_INT 2
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 3
59989: NEG
59990: PUSH
59991: LD_INT 2
59993: NEG
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 3
60001: NEG
60002: PUSH
60003: LD_INT 3
60005: NEG
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60042: LD_ADDR_VAR 0 46
60046: PUSH
60047: LD_INT 0
60049: PUSH
60050: LD_INT 0
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 0
60059: PUSH
60060: LD_INT 1
60062: NEG
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 1
60070: PUSH
60071: LD_INT 0
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 1
60080: PUSH
60081: LD_INT 1
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 0
60090: PUSH
60091: LD_INT 1
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 1
60100: NEG
60101: PUSH
60102: LD_INT 0
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 1
60111: NEG
60112: PUSH
60113: LD_INT 1
60115: NEG
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 1
60123: NEG
60124: PUSH
60125: LD_INT 2
60127: NEG
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 0
60135: PUSH
60136: LD_INT 2
60138: NEG
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 1
60146: PUSH
60147: LD_INT 1
60149: NEG
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 2
60157: PUSH
60158: LD_INT 0
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 2
60167: PUSH
60168: LD_INT 1
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 1
60177: PUSH
60178: LD_INT 2
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 0
60187: PUSH
60188: LD_INT 2
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 1
60197: NEG
60198: PUSH
60199: LD_INT 1
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 2
60208: NEG
60209: PUSH
60210: LD_INT 0
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 2
60219: NEG
60220: PUSH
60221: LD_INT 1
60223: NEG
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 1
60231: NEG
60232: PUSH
60233: LD_INT 3
60235: NEG
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 0
60243: PUSH
60244: LD_INT 3
60246: NEG
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 1
60254: PUSH
60255: LD_INT 2
60257: NEG
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 2
60265: PUSH
60266: LD_INT 1
60268: NEG
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 3
60276: PUSH
60277: LD_INT 0
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 3
60286: PUSH
60287: LD_INT 1
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 1
60296: PUSH
60297: LD_INT 3
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 0
60306: PUSH
60307: LD_INT 3
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 1
60316: NEG
60317: PUSH
60318: LD_INT 2
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 2
60327: NEG
60328: PUSH
60329: LD_INT 1
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 3
60338: NEG
60339: PUSH
60340: LD_INT 0
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 3
60349: NEG
60350: PUSH
60351: LD_INT 1
60353: NEG
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60390: LD_ADDR_VAR 0 47
60394: PUSH
60395: LD_INT 0
60397: PUSH
60398: LD_INT 0
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 0
60407: PUSH
60408: LD_INT 1
60410: NEG
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 1
60418: PUSH
60419: LD_INT 0
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 1
60428: PUSH
60429: LD_INT 1
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 0
60438: PUSH
60439: LD_INT 1
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: LD_INT 1
60448: NEG
60449: PUSH
60450: LD_INT 0
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 1
60459: NEG
60460: PUSH
60461: LD_INT 1
60463: NEG
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 1
60471: NEG
60472: PUSH
60473: LD_INT 2
60475: NEG
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 0
60483: PUSH
60484: LD_INT 2
60486: NEG
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 1
60494: PUSH
60495: LD_INT 1
60497: NEG
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 2
60505: NEG
60506: PUSH
60507: LD_INT 1
60509: NEG
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 2
60517: NEG
60518: PUSH
60519: LD_INT 2
60521: NEG
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60541: LD_ADDR_VAR 0 48
60545: PUSH
60546: LD_INT 0
60548: PUSH
60549: LD_INT 0
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 0
60558: PUSH
60559: LD_INT 1
60561: NEG
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 1
60569: PUSH
60570: LD_INT 0
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 1
60579: PUSH
60580: LD_INT 1
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 0
60589: PUSH
60590: LD_INT 1
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 1
60599: NEG
60600: PUSH
60601: LD_INT 0
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 1
60610: NEG
60611: PUSH
60612: LD_INT 1
60614: NEG
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 1
60622: NEG
60623: PUSH
60624: LD_INT 2
60626: NEG
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 0
60634: PUSH
60635: LD_INT 2
60637: NEG
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 1
60645: PUSH
60646: LD_INT 1
60648: NEG
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 2
60656: PUSH
60657: LD_INT 0
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 2
60666: PUSH
60667: LD_INT 1
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60688: LD_ADDR_VAR 0 49
60692: PUSH
60693: LD_INT 0
60695: PUSH
60696: LD_INT 0
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 0
60705: PUSH
60706: LD_INT 1
60708: NEG
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 1
60716: PUSH
60717: LD_INT 0
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 1
60726: PUSH
60727: LD_INT 1
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 0
60736: PUSH
60737: LD_INT 1
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 1
60746: NEG
60747: PUSH
60748: LD_INT 0
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 1
60757: NEG
60758: PUSH
60759: LD_INT 1
60761: NEG
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 1
60769: PUSH
60770: LD_INT 1
60772: NEG
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PUSH
60778: LD_INT 2
60780: PUSH
60781: LD_INT 0
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 2
60790: PUSH
60791: LD_INT 1
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 2
60800: PUSH
60801: LD_INT 2
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 1
60810: PUSH
60811: LD_INT 2
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60832: LD_ADDR_VAR 0 50
60836: PUSH
60837: LD_INT 0
60839: PUSH
60840: LD_INT 0
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 0
60849: PUSH
60850: LD_INT 1
60852: NEG
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 1
60860: PUSH
60861: LD_INT 0
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 1
60870: PUSH
60871: LD_INT 1
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 0
60880: PUSH
60881: LD_INT 1
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 1
60890: NEG
60891: PUSH
60892: LD_INT 0
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 1
60901: NEG
60902: PUSH
60903: LD_INT 1
60905: NEG
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 2
60913: PUSH
60914: LD_INT 1
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 2
60923: PUSH
60924: LD_INT 2
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 1
60933: PUSH
60934: LD_INT 2
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 0
60943: PUSH
60944: LD_INT 2
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 1
60953: NEG
60954: PUSH
60955: LD_INT 1
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60976: LD_ADDR_VAR 0 51
60980: PUSH
60981: LD_INT 0
60983: PUSH
60984: LD_INT 0
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 0
60993: PUSH
60994: LD_INT 1
60996: NEG
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 1
61004: PUSH
61005: LD_INT 0
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 1
61014: PUSH
61015: LD_INT 1
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 0
61024: PUSH
61025: LD_INT 1
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 1
61034: NEG
61035: PUSH
61036: LD_INT 0
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 1
61045: NEG
61046: PUSH
61047: LD_INT 1
61049: NEG
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 1
61057: PUSH
61058: LD_INT 2
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 0
61067: PUSH
61068: LD_INT 2
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 1
61077: NEG
61078: PUSH
61079: LD_INT 1
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 2
61088: NEG
61089: PUSH
61090: LD_INT 0
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 2
61099: NEG
61100: PUSH
61101: LD_INT 1
61103: NEG
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61123: LD_ADDR_VAR 0 52
61127: PUSH
61128: LD_INT 0
61130: PUSH
61131: LD_INT 0
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 0
61140: PUSH
61141: LD_INT 1
61143: NEG
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 1
61151: PUSH
61152: LD_INT 0
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 1
61161: PUSH
61162: LD_INT 1
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 0
61171: PUSH
61172: LD_INT 1
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 1
61181: NEG
61182: PUSH
61183: LD_INT 0
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 1
61192: NEG
61193: PUSH
61194: LD_INT 1
61196: NEG
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 1
61204: NEG
61205: PUSH
61206: LD_INT 2
61208: NEG
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 1
61216: NEG
61217: PUSH
61218: LD_INT 1
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 2
61227: NEG
61228: PUSH
61229: LD_INT 0
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 2
61238: NEG
61239: PUSH
61240: LD_INT 1
61242: NEG
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 2
61250: NEG
61251: PUSH
61252: LD_INT 2
61254: NEG
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61274: LD_ADDR_VAR 0 53
61278: PUSH
61279: LD_INT 0
61281: PUSH
61282: LD_INT 0
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 0
61291: PUSH
61292: LD_INT 1
61294: NEG
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 1
61302: PUSH
61303: LD_INT 0
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 1
61312: PUSH
61313: LD_INT 1
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 0
61322: PUSH
61323: LD_INT 1
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 1
61332: NEG
61333: PUSH
61334: LD_INT 0
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 1
61343: NEG
61344: PUSH
61345: LD_INT 1
61347: NEG
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 1
61355: NEG
61356: PUSH
61357: LD_INT 2
61359: NEG
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 0
61367: PUSH
61368: LD_INT 2
61370: NEG
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 1
61378: PUSH
61379: LD_INT 1
61381: NEG
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 2
61389: PUSH
61390: LD_INT 0
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 2
61399: PUSH
61400: LD_INT 1
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 2
61409: PUSH
61410: LD_INT 2
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 1
61419: PUSH
61420: LD_INT 2
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 0
61429: PUSH
61430: LD_INT 2
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 1
61439: NEG
61440: PUSH
61441: LD_INT 1
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 2
61450: NEG
61451: PUSH
61452: LD_INT 0
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 2
61461: NEG
61462: PUSH
61463: LD_INT 1
61465: NEG
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 2
61473: NEG
61474: PUSH
61475: LD_INT 2
61477: NEG
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61504: LD_ADDR_VAR 0 54
61508: PUSH
61509: LD_INT 0
61511: PUSH
61512: LD_INT 0
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 0
61521: PUSH
61522: LD_INT 1
61524: NEG
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 1
61532: PUSH
61533: LD_INT 0
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 1
61542: PUSH
61543: LD_INT 1
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 0
61552: PUSH
61553: LD_INT 1
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 1
61562: NEG
61563: PUSH
61564: LD_INT 0
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 1
61573: NEG
61574: PUSH
61575: LD_INT 1
61577: NEG
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 1
61585: NEG
61586: PUSH
61587: LD_INT 2
61589: NEG
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 0
61597: PUSH
61598: LD_INT 2
61600: NEG
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 1
61608: PUSH
61609: LD_INT 1
61611: NEG
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 2
61619: PUSH
61620: LD_INT 0
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 2
61629: PUSH
61630: LD_INT 1
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 2
61639: PUSH
61640: LD_INT 2
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 1
61649: PUSH
61650: LD_INT 2
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 0
61659: PUSH
61660: LD_INT 2
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 1
61669: NEG
61670: PUSH
61671: LD_INT 1
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 2
61680: NEG
61681: PUSH
61682: LD_INT 0
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 2
61691: NEG
61692: PUSH
61693: LD_INT 1
61695: NEG
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 2
61703: NEG
61704: PUSH
61705: LD_INT 2
61707: NEG
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61734: LD_ADDR_VAR 0 55
61738: PUSH
61739: LD_INT 0
61741: PUSH
61742: LD_INT 0
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 0
61751: PUSH
61752: LD_INT 1
61754: NEG
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 1
61762: PUSH
61763: LD_INT 0
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 1
61772: PUSH
61773: LD_INT 1
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 0
61782: PUSH
61783: LD_INT 1
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 1
61792: NEG
61793: PUSH
61794: LD_INT 0
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 1
61803: NEG
61804: PUSH
61805: LD_INT 1
61807: NEG
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 1
61815: NEG
61816: PUSH
61817: LD_INT 2
61819: NEG
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 0
61827: PUSH
61828: LD_INT 2
61830: NEG
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 1
61838: PUSH
61839: LD_INT 1
61841: NEG
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 2
61849: PUSH
61850: LD_INT 0
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 2
61859: PUSH
61860: LD_INT 1
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 2
61869: PUSH
61870: LD_INT 2
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: LD_INT 1
61879: PUSH
61880: LD_INT 2
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 0
61889: PUSH
61890: LD_INT 2
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 1
61899: NEG
61900: PUSH
61901: LD_INT 1
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 2
61910: NEG
61911: PUSH
61912: LD_INT 0
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_INT 2
61921: NEG
61922: PUSH
61923: LD_INT 1
61925: NEG
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 2
61933: NEG
61934: PUSH
61935: LD_INT 2
61937: NEG
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61964: LD_ADDR_VAR 0 56
61968: PUSH
61969: LD_INT 0
61971: PUSH
61972: LD_INT 0
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 0
61981: PUSH
61982: LD_INT 1
61984: NEG
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 1
61992: PUSH
61993: LD_INT 0
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 1
62002: PUSH
62003: LD_INT 1
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 0
62012: PUSH
62013: LD_INT 1
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: PUSH
62020: LD_INT 1
62022: NEG
62023: PUSH
62024: LD_INT 0
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 1
62033: NEG
62034: PUSH
62035: LD_INT 1
62037: NEG
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 1
62045: NEG
62046: PUSH
62047: LD_INT 2
62049: NEG
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 0
62057: PUSH
62058: LD_INT 2
62060: NEG
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 1
62068: PUSH
62069: LD_INT 1
62071: NEG
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 2
62079: PUSH
62080: LD_INT 0
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 2
62089: PUSH
62090: LD_INT 1
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 2
62099: PUSH
62100: LD_INT 2
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 1
62109: PUSH
62110: LD_INT 2
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 0
62119: PUSH
62120: LD_INT 2
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 1
62129: NEG
62130: PUSH
62131: LD_INT 1
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 2
62140: NEG
62141: PUSH
62142: LD_INT 0
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 2
62151: NEG
62152: PUSH
62153: LD_INT 1
62155: NEG
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 2
62163: NEG
62164: PUSH
62165: LD_INT 2
62167: NEG
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62194: LD_ADDR_VAR 0 57
62198: PUSH
62199: LD_INT 0
62201: PUSH
62202: LD_INT 0
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 0
62211: PUSH
62212: LD_INT 1
62214: NEG
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 1
62222: PUSH
62223: LD_INT 0
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 1
62232: PUSH
62233: LD_INT 1
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 0
62242: PUSH
62243: LD_INT 1
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: PUSH
62250: LD_INT 1
62252: NEG
62253: PUSH
62254: LD_INT 0
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: LD_INT 1
62263: NEG
62264: PUSH
62265: LD_INT 1
62267: NEG
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 1
62275: NEG
62276: PUSH
62277: LD_INT 2
62279: NEG
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 0
62287: PUSH
62288: LD_INT 2
62290: NEG
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 1
62298: PUSH
62299: LD_INT 1
62301: NEG
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: LD_INT 2
62309: PUSH
62310: LD_INT 0
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: LD_INT 2
62319: PUSH
62320: LD_INT 1
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: LD_INT 2
62329: PUSH
62330: LD_INT 2
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 1
62339: PUSH
62340: LD_INT 2
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 0
62349: PUSH
62350: LD_INT 2
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 1
62359: NEG
62360: PUSH
62361: LD_INT 1
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 2
62370: NEG
62371: PUSH
62372: LD_INT 0
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 2
62381: NEG
62382: PUSH
62383: LD_INT 1
62385: NEG
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: LD_INT 2
62393: NEG
62394: PUSH
62395: LD_INT 2
62397: NEG
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: LIST
62418: LIST
62419: LIST
62420: LIST
62421: LIST
62422: LIST
62423: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62424: LD_ADDR_VAR 0 58
62428: PUSH
62429: LD_INT 0
62431: PUSH
62432: LD_INT 0
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: LD_INT 0
62441: PUSH
62442: LD_INT 1
62444: NEG
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PUSH
62450: LD_INT 1
62452: PUSH
62453: LD_INT 0
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PUSH
62460: LD_INT 1
62462: PUSH
62463: LD_INT 1
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 0
62472: PUSH
62473: LD_INT 1
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_INT 1
62482: NEG
62483: PUSH
62484: LD_INT 0
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 1
62493: NEG
62494: PUSH
62495: LD_INT 1
62497: NEG
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: LD_INT 1
62505: NEG
62506: PUSH
62507: LD_INT 2
62509: NEG
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 0
62517: PUSH
62518: LD_INT 2
62520: NEG
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 1
62528: PUSH
62529: LD_INT 1
62531: NEG
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: LD_INT 2
62539: PUSH
62540: LD_INT 0
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 2
62549: PUSH
62550: LD_INT 1
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 2
62559: PUSH
62560: LD_INT 2
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 1
62569: PUSH
62570: LD_INT 2
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 0
62579: PUSH
62580: LD_INT 2
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 1
62589: NEG
62590: PUSH
62591: LD_INT 1
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: LD_INT 2
62600: NEG
62601: PUSH
62602: LD_INT 0
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: PUSH
62609: LD_INT 2
62611: NEG
62612: PUSH
62613: LD_INT 1
62615: NEG
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 2
62623: NEG
62624: PUSH
62625: LD_INT 2
62627: NEG
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62654: LD_ADDR_VAR 0 59
62658: PUSH
62659: LD_INT 0
62661: PUSH
62662: LD_INT 0
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: LD_INT 0
62671: PUSH
62672: LD_INT 1
62674: NEG
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: LD_INT 1
62682: PUSH
62683: LD_INT 0
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: LD_INT 1
62692: PUSH
62693: LD_INT 1
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 0
62702: PUSH
62703: LD_INT 1
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 1
62712: NEG
62713: PUSH
62714: LD_INT 0
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 1
62723: NEG
62724: PUSH
62725: LD_INT 1
62727: NEG
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62742: LD_ADDR_VAR 0 60
62746: PUSH
62747: LD_INT 0
62749: PUSH
62750: LD_INT 0
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: LD_INT 0
62759: PUSH
62760: LD_INT 1
62762: NEG
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 1
62770: PUSH
62771: LD_INT 0
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: LD_INT 1
62780: PUSH
62781: LD_INT 1
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: LD_INT 0
62790: PUSH
62791: LD_INT 1
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 1
62800: NEG
62801: PUSH
62802: LD_INT 0
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: LD_INT 1
62811: NEG
62812: PUSH
62813: LD_INT 1
62815: NEG
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62830: LD_ADDR_VAR 0 61
62834: PUSH
62835: LD_INT 0
62837: PUSH
62838: LD_INT 0
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PUSH
62845: LD_INT 0
62847: PUSH
62848: LD_INT 1
62850: NEG
62851: PUSH
62852: EMPTY
62853: LIST
62854: LIST
62855: PUSH
62856: LD_INT 1
62858: PUSH
62859: LD_INT 0
62861: PUSH
62862: EMPTY
62863: LIST
62864: LIST
62865: PUSH
62866: LD_INT 1
62868: PUSH
62869: LD_INT 1
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PUSH
62876: LD_INT 0
62878: PUSH
62879: LD_INT 1
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: LD_INT 1
62888: NEG
62889: PUSH
62890: LD_INT 0
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 1
62899: NEG
62900: PUSH
62901: LD_INT 1
62903: NEG
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62918: LD_ADDR_VAR 0 62
62922: PUSH
62923: LD_INT 0
62925: PUSH
62926: LD_INT 0
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 0
62935: PUSH
62936: LD_INT 1
62938: NEG
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 1
62946: PUSH
62947: LD_INT 0
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 1
62956: PUSH
62957: LD_INT 1
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 0
62966: PUSH
62967: LD_INT 1
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 1
62976: NEG
62977: PUSH
62978: LD_INT 0
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: PUSH
62985: LD_INT 1
62987: NEG
62988: PUSH
62989: LD_INT 1
62991: NEG
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63006: LD_ADDR_VAR 0 63
63010: PUSH
63011: LD_INT 0
63013: PUSH
63014: LD_INT 0
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: LD_INT 0
63023: PUSH
63024: LD_INT 1
63026: NEG
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: PUSH
63032: LD_INT 1
63034: PUSH
63035: LD_INT 0
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: LD_INT 1
63044: PUSH
63045: LD_INT 1
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: PUSH
63052: LD_INT 0
63054: PUSH
63055: LD_INT 1
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 1
63064: NEG
63065: PUSH
63066: LD_INT 0
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: LD_INT 1
63075: NEG
63076: PUSH
63077: LD_INT 1
63079: NEG
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63094: LD_ADDR_VAR 0 64
63098: PUSH
63099: LD_INT 0
63101: PUSH
63102: LD_INT 0
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 0
63111: PUSH
63112: LD_INT 1
63114: NEG
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 1
63122: PUSH
63123: LD_INT 0
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 1
63132: PUSH
63133: LD_INT 1
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: LD_INT 0
63142: PUSH
63143: LD_INT 1
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: LD_INT 1
63152: NEG
63153: PUSH
63154: LD_INT 0
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 1
63163: NEG
63164: PUSH
63165: LD_INT 1
63167: NEG
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: ST_TO_ADDR
// end ; 1 :
63182: GO 69079
63184: LD_INT 1
63186: DOUBLE
63187: EQUAL
63188: IFTRUE 63192
63190: GO 65815
63192: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63193: LD_ADDR_VAR 0 11
63197: PUSH
63198: LD_INT 1
63200: NEG
63201: PUSH
63202: LD_INT 3
63204: NEG
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: LD_INT 0
63212: PUSH
63213: LD_INT 3
63215: NEG
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 1
63223: PUSH
63224: LD_INT 2
63226: NEG
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: LIST
63236: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63237: LD_ADDR_VAR 0 12
63241: PUSH
63242: LD_INT 2
63244: PUSH
63245: LD_INT 1
63247: NEG
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: LD_INT 3
63255: PUSH
63256: LD_INT 0
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: PUSH
63263: LD_INT 3
63265: PUSH
63266: LD_INT 1
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: LIST
63277: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63278: LD_ADDR_VAR 0 13
63282: PUSH
63283: LD_INT 3
63285: PUSH
63286: LD_INT 2
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 3
63295: PUSH
63296: LD_INT 3
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: LD_INT 2
63305: PUSH
63306: LD_INT 3
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: LIST
63317: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63318: LD_ADDR_VAR 0 14
63322: PUSH
63323: LD_INT 1
63325: PUSH
63326: LD_INT 3
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: LD_INT 0
63335: PUSH
63336: LD_INT 3
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 1
63345: NEG
63346: PUSH
63347: LD_INT 2
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: LIST
63358: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63359: LD_ADDR_VAR 0 15
63363: PUSH
63364: LD_INT 2
63366: NEG
63367: PUSH
63368: LD_INT 1
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 3
63377: NEG
63378: PUSH
63379: LD_INT 0
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 3
63388: NEG
63389: PUSH
63390: LD_INT 1
63392: NEG
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: LIST
63402: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63403: LD_ADDR_VAR 0 16
63407: PUSH
63408: LD_INT 2
63410: NEG
63411: PUSH
63412: LD_INT 3
63414: NEG
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 3
63422: NEG
63423: PUSH
63424: LD_INT 2
63426: NEG
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: PUSH
63432: LD_INT 3
63434: NEG
63435: PUSH
63436: LD_INT 3
63438: NEG
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: LIST
63448: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63449: LD_ADDR_VAR 0 17
63453: PUSH
63454: LD_INT 1
63456: NEG
63457: PUSH
63458: LD_INT 3
63460: NEG
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 0
63468: PUSH
63469: LD_INT 3
63471: NEG
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 1
63479: PUSH
63480: LD_INT 2
63482: NEG
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: LIST
63492: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63493: LD_ADDR_VAR 0 18
63497: PUSH
63498: LD_INT 2
63500: PUSH
63501: LD_INT 1
63503: NEG
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 3
63511: PUSH
63512: LD_INT 0
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 3
63521: PUSH
63522: LD_INT 1
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: LIST
63533: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63534: LD_ADDR_VAR 0 19
63538: PUSH
63539: LD_INT 3
63541: PUSH
63542: LD_INT 2
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 3
63551: PUSH
63552: LD_INT 3
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 2
63561: PUSH
63562: LD_INT 3
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: LIST
63573: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63574: LD_ADDR_VAR 0 20
63578: PUSH
63579: LD_INT 1
63581: PUSH
63582: LD_INT 3
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 0
63591: PUSH
63592: LD_INT 3
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 1
63601: NEG
63602: PUSH
63603: LD_INT 2
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: LIST
63614: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63615: LD_ADDR_VAR 0 21
63619: PUSH
63620: LD_INT 2
63622: NEG
63623: PUSH
63624: LD_INT 1
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 3
63633: NEG
63634: PUSH
63635: LD_INT 0
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 3
63644: NEG
63645: PUSH
63646: LD_INT 1
63648: NEG
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: LIST
63658: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63659: LD_ADDR_VAR 0 22
63663: PUSH
63664: LD_INT 2
63666: NEG
63667: PUSH
63668: LD_INT 3
63670: NEG
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 3
63678: NEG
63679: PUSH
63680: LD_INT 2
63682: NEG
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: LD_INT 3
63690: NEG
63691: PUSH
63692: LD_INT 3
63694: NEG
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: LIST
63704: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
63705: LD_ADDR_VAR 0 23
63709: PUSH
63710: LD_INT 0
63712: PUSH
63713: LD_INT 3
63715: NEG
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 1
63723: NEG
63724: PUSH
63725: LD_INT 4
63727: NEG
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 1
63735: PUSH
63736: LD_INT 3
63738: NEG
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: LIST
63748: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
63749: LD_ADDR_VAR 0 24
63753: PUSH
63754: LD_INT 3
63756: PUSH
63757: LD_INT 0
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 3
63766: PUSH
63767: LD_INT 1
63769: NEG
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 4
63777: PUSH
63778: LD_INT 1
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: LIST
63789: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63790: LD_ADDR_VAR 0 25
63794: PUSH
63795: LD_INT 3
63797: PUSH
63798: LD_INT 3
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 4
63807: PUSH
63808: LD_INT 3
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 3
63817: PUSH
63818: LD_INT 4
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: LIST
63829: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63830: LD_ADDR_VAR 0 26
63834: PUSH
63835: LD_INT 0
63837: PUSH
63838: LD_INT 3
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 1
63847: PUSH
63848: LD_INT 4
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 1
63857: NEG
63858: PUSH
63859: LD_INT 3
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: LIST
63870: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63871: LD_ADDR_VAR 0 27
63875: PUSH
63876: LD_INT 3
63878: NEG
63879: PUSH
63880: LD_INT 0
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_INT 3
63889: NEG
63890: PUSH
63891: LD_INT 1
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 4
63900: NEG
63901: PUSH
63902: LD_INT 1
63904: NEG
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: LIST
63914: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63915: LD_ADDR_VAR 0 28
63919: PUSH
63920: LD_INT 3
63922: NEG
63923: PUSH
63924: LD_INT 3
63926: NEG
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 3
63934: NEG
63935: PUSH
63936: LD_INT 4
63938: NEG
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: PUSH
63944: LD_INT 4
63946: NEG
63947: PUSH
63948: LD_INT 3
63950: NEG
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: LIST
63960: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63961: LD_ADDR_VAR 0 29
63965: PUSH
63966: LD_INT 1
63968: NEG
63969: PUSH
63970: LD_INT 3
63972: NEG
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: PUSH
63978: LD_INT 0
63980: PUSH
63981: LD_INT 3
63983: NEG
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: LD_INT 1
63991: PUSH
63992: LD_INT 2
63994: NEG
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: PUSH
64000: LD_INT 1
64002: NEG
64003: PUSH
64004: LD_INT 4
64006: NEG
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: LD_INT 0
64014: PUSH
64015: LD_INT 4
64017: NEG
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: PUSH
64023: LD_INT 1
64025: PUSH
64026: LD_INT 3
64028: NEG
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: LD_INT 1
64036: NEG
64037: PUSH
64038: LD_INT 5
64040: NEG
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_INT 0
64048: PUSH
64049: LD_INT 5
64051: NEG
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: LD_INT 1
64059: PUSH
64060: LD_INT 4
64062: NEG
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: LD_INT 1
64070: NEG
64071: PUSH
64072: LD_INT 6
64074: NEG
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: PUSH
64080: LD_INT 0
64082: PUSH
64083: LD_INT 6
64085: NEG
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 1
64093: PUSH
64094: LD_INT 5
64096: NEG
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: LIST
64112: LIST
64113: LIST
64114: LIST
64115: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64116: LD_ADDR_VAR 0 30
64120: PUSH
64121: LD_INT 2
64123: PUSH
64124: LD_INT 1
64126: NEG
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PUSH
64132: LD_INT 3
64134: PUSH
64135: LD_INT 0
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PUSH
64142: LD_INT 3
64144: PUSH
64145: LD_INT 1
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: LD_INT 3
64154: PUSH
64155: LD_INT 1
64157: NEG
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 4
64165: PUSH
64166: LD_INT 0
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: PUSH
64173: LD_INT 4
64175: PUSH
64176: LD_INT 1
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: PUSH
64183: LD_INT 4
64185: PUSH
64186: LD_INT 1
64188: NEG
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: LD_INT 5
64196: PUSH
64197: LD_INT 0
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: LD_INT 5
64206: PUSH
64207: LD_INT 1
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PUSH
64214: LD_INT 5
64216: PUSH
64217: LD_INT 1
64219: NEG
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 6
64227: PUSH
64228: LD_INT 0
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 6
64237: PUSH
64238: LD_INT 1
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: LIST
64249: LIST
64250: LIST
64251: LIST
64252: LIST
64253: LIST
64254: LIST
64255: LIST
64256: LIST
64257: LIST
64258: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64259: LD_ADDR_VAR 0 31
64263: PUSH
64264: LD_INT 3
64266: PUSH
64267: LD_INT 2
64269: PUSH
64270: EMPTY
64271: LIST
64272: LIST
64273: PUSH
64274: LD_INT 3
64276: PUSH
64277: LD_INT 3
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: PUSH
64284: LD_INT 2
64286: PUSH
64287: LD_INT 3
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PUSH
64294: LD_INT 4
64296: PUSH
64297: LD_INT 3
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: LD_INT 4
64306: PUSH
64307: LD_INT 4
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 3
64316: PUSH
64317: LD_INT 4
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: LD_INT 5
64326: PUSH
64327: LD_INT 4
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: PUSH
64334: LD_INT 5
64336: PUSH
64337: LD_INT 5
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: LD_INT 4
64346: PUSH
64347: LD_INT 5
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PUSH
64354: LD_INT 6
64356: PUSH
64357: LD_INT 5
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: LD_INT 6
64366: PUSH
64367: LD_INT 6
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: LD_INT 5
64376: PUSH
64377: LD_INT 6
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: LIST
64394: LIST
64395: LIST
64396: LIST
64397: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
64398: LD_ADDR_VAR 0 32
64402: PUSH
64403: LD_INT 1
64405: PUSH
64406: LD_INT 3
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: LD_INT 0
64415: PUSH
64416: LD_INT 3
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: PUSH
64423: LD_INT 1
64425: NEG
64426: PUSH
64427: LD_INT 2
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 1
64436: PUSH
64437: LD_INT 4
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 0
64446: PUSH
64447: LD_INT 4
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PUSH
64454: LD_INT 1
64456: NEG
64457: PUSH
64458: LD_INT 3
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: PUSH
64465: LD_INT 1
64467: PUSH
64468: LD_INT 5
64470: PUSH
64471: EMPTY
64472: LIST
64473: LIST
64474: PUSH
64475: LD_INT 0
64477: PUSH
64478: LD_INT 5
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: LD_INT 1
64487: NEG
64488: PUSH
64489: LD_INT 4
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PUSH
64496: LD_INT 1
64498: PUSH
64499: LD_INT 6
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: PUSH
64506: LD_INT 0
64508: PUSH
64509: LD_INT 6
64511: PUSH
64512: EMPTY
64513: LIST
64514: LIST
64515: PUSH
64516: LD_INT 1
64518: NEG
64519: PUSH
64520: LD_INT 5
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: PUSH
64527: EMPTY
64528: LIST
64529: LIST
64530: LIST
64531: LIST
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: LIST
64537: LIST
64538: LIST
64539: LIST
64540: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
64541: LD_ADDR_VAR 0 33
64545: PUSH
64546: LD_INT 2
64548: NEG
64549: PUSH
64550: LD_INT 1
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 3
64559: NEG
64560: PUSH
64561: LD_INT 0
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PUSH
64568: LD_INT 3
64570: NEG
64571: PUSH
64572: LD_INT 1
64574: NEG
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: PUSH
64580: LD_INT 3
64582: NEG
64583: PUSH
64584: LD_INT 1
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: PUSH
64591: LD_INT 4
64593: NEG
64594: PUSH
64595: LD_INT 0
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: PUSH
64602: LD_INT 4
64604: NEG
64605: PUSH
64606: LD_INT 1
64608: NEG
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PUSH
64614: LD_INT 4
64616: NEG
64617: PUSH
64618: LD_INT 1
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: LD_INT 5
64627: NEG
64628: PUSH
64629: LD_INT 0
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: LD_INT 5
64638: NEG
64639: PUSH
64640: LD_INT 1
64642: NEG
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 5
64650: NEG
64651: PUSH
64652: LD_INT 1
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: LD_INT 6
64661: NEG
64662: PUSH
64663: LD_INT 0
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: LD_INT 6
64672: NEG
64673: PUSH
64674: LD_INT 1
64676: NEG
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: LIST
64695: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
64696: LD_ADDR_VAR 0 34
64700: PUSH
64701: LD_INT 2
64703: NEG
64704: PUSH
64705: LD_INT 3
64707: NEG
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: PUSH
64713: LD_INT 3
64715: NEG
64716: PUSH
64717: LD_INT 2
64719: NEG
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: LD_INT 3
64727: NEG
64728: PUSH
64729: LD_INT 3
64731: NEG
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: PUSH
64737: LD_INT 3
64739: NEG
64740: PUSH
64741: LD_INT 4
64743: NEG
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: LD_INT 4
64751: NEG
64752: PUSH
64753: LD_INT 3
64755: NEG
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PUSH
64761: LD_INT 4
64763: NEG
64764: PUSH
64765: LD_INT 4
64767: NEG
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PUSH
64773: LD_INT 4
64775: NEG
64776: PUSH
64777: LD_INT 5
64779: NEG
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 5
64787: NEG
64788: PUSH
64789: LD_INT 4
64791: NEG
64792: PUSH
64793: EMPTY
64794: LIST
64795: LIST
64796: PUSH
64797: LD_INT 5
64799: NEG
64800: PUSH
64801: LD_INT 5
64803: NEG
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 5
64811: NEG
64812: PUSH
64813: LD_INT 6
64815: NEG
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: LD_INT 6
64823: NEG
64824: PUSH
64825: LD_INT 5
64827: NEG
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 6
64835: NEG
64836: PUSH
64837: LD_INT 6
64839: NEG
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: LIST
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: LIST
64854: LIST
64855: LIST
64856: LIST
64857: LIST
64858: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64859: LD_ADDR_VAR 0 41
64863: PUSH
64864: LD_INT 0
64866: PUSH
64867: LD_INT 2
64869: NEG
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: LD_INT 1
64877: NEG
64878: PUSH
64879: LD_INT 3
64881: NEG
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: LD_INT 1
64889: PUSH
64890: LD_INT 2
64892: NEG
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: LIST
64902: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64903: LD_ADDR_VAR 0 42
64907: PUSH
64908: LD_INT 2
64910: PUSH
64911: LD_INT 0
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 2
64920: PUSH
64921: LD_INT 1
64923: NEG
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 3
64931: PUSH
64932: LD_INT 1
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: LIST
64943: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64944: LD_ADDR_VAR 0 43
64948: PUSH
64949: LD_INT 2
64951: PUSH
64952: LD_INT 2
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: PUSH
64959: LD_INT 3
64961: PUSH
64962: LD_INT 2
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 2
64971: PUSH
64972: LD_INT 3
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: LIST
64983: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64984: LD_ADDR_VAR 0 44
64988: PUSH
64989: LD_INT 0
64991: PUSH
64992: LD_INT 2
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: PUSH
64999: LD_INT 1
65001: PUSH
65002: LD_INT 3
65004: PUSH
65005: EMPTY
65006: LIST
65007: LIST
65008: PUSH
65009: LD_INT 1
65011: NEG
65012: PUSH
65013: LD_INT 2
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: LIST
65024: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65025: LD_ADDR_VAR 0 45
65029: PUSH
65030: LD_INT 2
65032: NEG
65033: PUSH
65034: LD_INT 0
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: LD_INT 2
65043: NEG
65044: PUSH
65045: LD_INT 1
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: LD_INT 3
65054: NEG
65055: PUSH
65056: LD_INT 1
65058: NEG
65059: PUSH
65060: EMPTY
65061: LIST
65062: LIST
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: LIST
65068: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65069: LD_ADDR_VAR 0 46
65073: PUSH
65074: LD_INT 2
65076: NEG
65077: PUSH
65078: LD_INT 2
65080: NEG
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: PUSH
65086: LD_INT 2
65088: NEG
65089: PUSH
65090: LD_INT 3
65092: NEG
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: PUSH
65098: LD_INT 3
65100: NEG
65101: PUSH
65102: LD_INT 2
65104: NEG
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: LIST
65114: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65115: LD_ADDR_VAR 0 47
65119: PUSH
65120: LD_INT 2
65122: NEG
65123: PUSH
65124: LD_INT 3
65126: NEG
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: LD_INT 1
65134: NEG
65135: PUSH
65136: LD_INT 3
65138: NEG
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65148: LD_ADDR_VAR 0 48
65152: PUSH
65153: LD_INT 1
65155: PUSH
65156: LD_INT 2
65158: NEG
65159: PUSH
65160: EMPTY
65161: LIST
65162: LIST
65163: PUSH
65164: LD_INT 2
65166: PUSH
65167: LD_INT 1
65169: NEG
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65179: LD_ADDR_VAR 0 49
65183: PUSH
65184: LD_INT 3
65186: PUSH
65187: LD_INT 1
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: LD_INT 3
65196: PUSH
65197: LD_INT 2
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65208: LD_ADDR_VAR 0 50
65212: PUSH
65213: LD_INT 2
65215: PUSH
65216: LD_INT 3
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: LD_INT 1
65225: PUSH
65226: LD_INT 3
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65237: LD_ADDR_VAR 0 51
65241: PUSH
65242: LD_INT 1
65244: NEG
65245: PUSH
65246: LD_INT 2
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: LD_INT 2
65255: NEG
65256: PUSH
65257: LD_INT 1
65259: PUSH
65260: EMPTY
65261: LIST
65262: LIST
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65268: LD_ADDR_VAR 0 52
65272: PUSH
65273: LD_INT 3
65275: NEG
65276: PUSH
65277: LD_INT 1
65279: NEG
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: PUSH
65285: LD_INT 3
65287: NEG
65288: PUSH
65289: LD_INT 2
65291: NEG
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65301: LD_ADDR_VAR 0 53
65305: PUSH
65306: LD_INT 1
65308: NEG
65309: PUSH
65310: LD_INT 3
65312: NEG
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PUSH
65318: LD_INT 0
65320: PUSH
65321: LD_INT 3
65323: NEG
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: PUSH
65329: LD_INT 1
65331: PUSH
65332: LD_INT 2
65334: NEG
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: LIST
65344: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65345: LD_ADDR_VAR 0 54
65349: PUSH
65350: LD_INT 2
65352: PUSH
65353: LD_INT 1
65355: NEG
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: PUSH
65361: LD_INT 3
65363: PUSH
65364: LD_INT 0
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: LD_INT 3
65373: PUSH
65374: LD_INT 1
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: LIST
65385: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65386: LD_ADDR_VAR 0 55
65390: PUSH
65391: LD_INT 3
65393: PUSH
65394: LD_INT 2
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: PUSH
65401: LD_INT 3
65403: PUSH
65404: LD_INT 3
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: PUSH
65411: LD_INT 2
65413: PUSH
65414: LD_INT 3
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: PUSH
65421: EMPTY
65422: LIST
65423: LIST
65424: LIST
65425: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65426: LD_ADDR_VAR 0 56
65430: PUSH
65431: LD_INT 1
65433: PUSH
65434: LD_INT 3
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: PUSH
65441: LD_INT 0
65443: PUSH
65444: LD_INT 3
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: PUSH
65451: LD_INT 1
65453: NEG
65454: PUSH
65455: LD_INT 2
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: LIST
65466: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65467: LD_ADDR_VAR 0 57
65471: PUSH
65472: LD_INT 2
65474: NEG
65475: PUSH
65476: LD_INT 1
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: PUSH
65483: LD_INT 3
65485: NEG
65486: PUSH
65487: LD_INT 0
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: PUSH
65494: LD_INT 3
65496: NEG
65497: PUSH
65498: LD_INT 1
65500: NEG
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: LIST
65510: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65511: LD_ADDR_VAR 0 58
65515: PUSH
65516: LD_INT 2
65518: NEG
65519: PUSH
65520: LD_INT 3
65522: NEG
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: LD_INT 3
65530: NEG
65531: PUSH
65532: LD_INT 2
65534: NEG
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: LD_INT 3
65542: NEG
65543: PUSH
65544: LD_INT 3
65546: NEG
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: LIST
65556: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
65557: LD_ADDR_VAR 0 59
65561: PUSH
65562: LD_INT 1
65564: NEG
65565: PUSH
65566: LD_INT 2
65568: NEG
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: LD_INT 0
65576: PUSH
65577: LD_INT 2
65579: NEG
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: PUSH
65585: LD_INT 1
65587: PUSH
65588: LD_INT 1
65590: NEG
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: LIST
65600: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65601: LD_ADDR_VAR 0 60
65605: PUSH
65606: LD_INT 1
65608: PUSH
65609: LD_INT 1
65611: NEG
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: LD_INT 2
65619: PUSH
65620: LD_INT 0
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PUSH
65627: LD_INT 2
65629: PUSH
65630: LD_INT 1
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: LIST
65641: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65642: LD_ADDR_VAR 0 61
65646: PUSH
65647: LD_INT 2
65649: PUSH
65650: LD_INT 1
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: PUSH
65657: LD_INT 2
65659: PUSH
65660: LD_INT 2
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: PUSH
65667: LD_INT 1
65669: PUSH
65670: LD_INT 2
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: LIST
65681: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65682: LD_ADDR_VAR 0 62
65686: PUSH
65687: LD_INT 1
65689: PUSH
65690: LD_INT 2
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: PUSH
65697: LD_INT 0
65699: PUSH
65700: LD_INT 2
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: PUSH
65707: LD_INT 1
65709: NEG
65710: PUSH
65711: LD_INT 1
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: LIST
65722: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65723: LD_ADDR_VAR 0 63
65727: PUSH
65728: LD_INT 1
65730: NEG
65731: PUSH
65732: LD_INT 1
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: PUSH
65739: LD_INT 2
65741: NEG
65742: PUSH
65743: LD_INT 0
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: PUSH
65750: LD_INT 2
65752: NEG
65753: PUSH
65754: LD_INT 1
65756: NEG
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: LIST
65766: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65767: LD_ADDR_VAR 0 64
65771: PUSH
65772: LD_INT 1
65774: NEG
65775: PUSH
65776: LD_INT 2
65778: NEG
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: PUSH
65784: LD_INT 2
65786: NEG
65787: PUSH
65788: LD_INT 1
65790: NEG
65791: PUSH
65792: EMPTY
65793: LIST
65794: LIST
65795: PUSH
65796: LD_INT 2
65798: NEG
65799: PUSH
65800: LD_INT 2
65802: NEG
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: LIST
65812: ST_TO_ADDR
// end ; 2 :
65813: GO 69079
65815: LD_INT 2
65817: DOUBLE
65818: EQUAL
65819: IFTRUE 65823
65821: GO 69078
65823: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65824: LD_ADDR_VAR 0 29
65828: PUSH
65829: LD_INT 4
65831: PUSH
65832: LD_INT 0
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: PUSH
65839: LD_INT 4
65841: PUSH
65842: LD_INT 1
65844: NEG
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: LD_INT 5
65852: PUSH
65853: LD_INT 0
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: LD_INT 5
65862: PUSH
65863: LD_INT 1
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: PUSH
65870: LD_INT 4
65872: PUSH
65873: LD_INT 1
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: LD_INT 3
65882: PUSH
65883: LD_INT 0
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: PUSH
65890: LD_INT 3
65892: PUSH
65893: LD_INT 1
65895: NEG
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: PUSH
65901: LD_INT 3
65903: PUSH
65904: LD_INT 2
65906: NEG
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: PUSH
65912: LD_INT 5
65914: PUSH
65915: LD_INT 2
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: PUSH
65922: LD_INT 3
65924: PUSH
65925: LD_INT 3
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: PUSH
65932: LD_INT 3
65934: PUSH
65935: LD_INT 2
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: PUSH
65942: LD_INT 4
65944: PUSH
65945: LD_INT 3
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: PUSH
65952: LD_INT 4
65954: PUSH
65955: LD_INT 4
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: LD_INT 3
65964: PUSH
65965: LD_INT 4
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 2
65974: PUSH
65975: LD_INT 3
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: LD_INT 2
65984: PUSH
65985: LD_INT 2
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: PUSH
65992: LD_INT 4
65994: PUSH
65995: LD_INT 2
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: PUSH
66002: LD_INT 2
66004: PUSH
66005: LD_INT 4
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: PUSH
66012: LD_INT 0
66014: PUSH
66015: LD_INT 4
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: LD_INT 0
66024: PUSH
66025: LD_INT 3
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: LD_INT 1
66034: PUSH
66035: LD_INT 4
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: PUSH
66042: LD_INT 1
66044: PUSH
66045: LD_INT 5
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PUSH
66052: LD_INT 0
66054: PUSH
66055: LD_INT 5
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: PUSH
66062: LD_INT 1
66064: NEG
66065: PUSH
66066: LD_INT 4
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: PUSH
66073: LD_INT 1
66075: NEG
66076: PUSH
66077: LD_INT 3
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: PUSH
66084: LD_INT 2
66086: PUSH
66087: LD_INT 5
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: PUSH
66094: LD_INT 2
66096: NEG
66097: PUSH
66098: LD_INT 3
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: PUSH
66105: LD_INT 3
66107: NEG
66108: PUSH
66109: LD_INT 0
66111: PUSH
66112: EMPTY
66113: LIST
66114: LIST
66115: PUSH
66116: LD_INT 3
66118: NEG
66119: PUSH
66120: LD_INT 1
66122: NEG
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: PUSH
66128: LD_INT 2
66130: NEG
66131: PUSH
66132: LD_INT 0
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_INT 2
66141: NEG
66142: PUSH
66143: LD_INT 1
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PUSH
66150: LD_INT 3
66152: NEG
66153: PUSH
66154: LD_INT 1
66156: PUSH
66157: EMPTY
66158: LIST
66159: LIST
66160: PUSH
66161: LD_INT 4
66163: NEG
66164: PUSH
66165: LD_INT 0
66167: PUSH
66168: EMPTY
66169: LIST
66170: LIST
66171: PUSH
66172: LD_INT 4
66174: NEG
66175: PUSH
66176: LD_INT 1
66178: NEG
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: PUSH
66184: LD_INT 4
66186: NEG
66187: PUSH
66188: LD_INT 2
66190: NEG
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PUSH
66196: LD_INT 2
66198: NEG
66199: PUSH
66200: LD_INT 2
66202: PUSH
66203: EMPTY
66204: LIST
66205: LIST
66206: PUSH
66207: LD_INT 4
66209: NEG
66210: PUSH
66211: LD_INT 4
66213: NEG
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: LD_INT 4
66221: NEG
66222: PUSH
66223: LD_INT 5
66225: NEG
66226: PUSH
66227: EMPTY
66228: LIST
66229: LIST
66230: PUSH
66231: LD_INT 3
66233: NEG
66234: PUSH
66235: LD_INT 4
66237: NEG
66238: PUSH
66239: EMPTY
66240: LIST
66241: LIST
66242: PUSH
66243: LD_INT 3
66245: NEG
66246: PUSH
66247: LD_INT 3
66249: NEG
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: PUSH
66255: LD_INT 4
66257: NEG
66258: PUSH
66259: LD_INT 3
66261: NEG
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: PUSH
66267: LD_INT 5
66269: NEG
66270: PUSH
66271: LD_INT 4
66273: NEG
66274: PUSH
66275: EMPTY
66276: LIST
66277: LIST
66278: PUSH
66279: LD_INT 5
66281: NEG
66282: PUSH
66283: LD_INT 5
66285: NEG
66286: PUSH
66287: EMPTY
66288: LIST
66289: LIST
66290: PUSH
66291: LD_INT 3
66293: NEG
66294: PUSH
66295: LD_INT 5
66297: NEG
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: PUSH
66303: LD_INT 5
66305: NEG
66306: PUSH
66307: LD_INT 3
66309: NEG
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: PUSH
66315: EMPTY
66316: LIST
66317: LIST
66318: LIST
66319: LIST
66320: LIST
66321: LIST
66322: LIST
66323: LIST
66324: LIST
66325: LIST
66326: LIST
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: LIST
66332: LIST
66333: LIST
66334: LIST
66335: LIST
66336: LIST
66337: LIST
66338: LIST
66339: LIST
66340: LIST
66341: LIST
66342: LIST
66343: LIST
66344: LIST
66345: LIST
66346: LIST
66347: LIST
66348: LIST
66349: LIST
66350: LIST
66351: LIST
66352: LIST
66353: LIST
66354: LIST
66355: LIST
66356: LIST
66357: LIST
66358: LIST
66359: LIST
66360: LIST
66361: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66362: LD_ADDR_VAR 0 30
66366: PUSH
66367: LD_INT 4
66369: PUSH
66370: LD_INT 4
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: PUSH
66377: LD_INT 4
66379: PUSH
66380: LD_INT 3
66382: PUSH
66383: EMPTY
66384: LIST
66385: LIST
66386: PUSH
66387: LD_INT 5
66389: PUSH
66390: LD_INT 4
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PUSH
66397: LD_INT 5
66399: PUSH
66400: LD_INT 5
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: LD_INT 4
66409: PUSH
66410: LD_INT 5
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PUSH
66417: LD_INT 3
66419: PUSH
66420: LD_INT 4
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: PUSH
66427: LD_INT 3
66429: PUSH
66430: LD_INT 3
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: PUSH
66437: LD_INT 5
66439: PUSH
66440: LD_INT 3
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: LD_INT 3
66449: PUSH
66450: LD_INT 5
66452: PUSH
66453: EMPTY
66454: LIST
66455: LIST
66456: PUSH
66457: LD_INT 0
66459: PUSH
66460: LD_INT 3
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: LD_INT 0
66469: PUSH
66470: LD_INT 2
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PUSH
66477: LD_INT 1
66479: PUSH
66480: LD_INT 3
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: PUSH
66487: LD_INT 1
66489: PUSH
66490: LD_INT 4
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: LD_INT 0
66499: PUSH
66500: LD_INT 4
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: PUSH
66507: LD_INT 1
66509: NEG
66510: PUSH
66511: LD_INT 3
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: LD_INT 1
66520: NEG
66521: PUSH
66522: LD_INT 2
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: PUSH
66529: LD_INT 2
66531: PUSH
66532: LD_INT 4
66534: PUSH
66535: EMPTY
66536: LIST
66537: LIST
66538: PUSH
66539: LD_INT 2
66541: NEG
66542: PUSH
66543: LD_INT 2
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: LD_INT 4
66552: NEG
66553: PUSH
66554: LD_INT 0
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: PUSH
66561: LD_INT 4
66563: NEG
66564: PUSH
66565: LD_INT 1
66567: NEG
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: PUSH
66573: LD_INT 3
66575: NEG
66576: PUSH
66577: LD_INT 0
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: PUSH
66584: LD_INT 3
66586: NEG
66587: PUSH
66588: LD_INT 1
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: PUSH
66595: LD_INT 4
66597: NEG
66598: PUSH
66599: LD_INT 1
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: PUSH
66606: LD_INT 5
66608: NEG
66609: PUSH
66610: LD_INT 0
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: LD_INT 5
66619: NEG
66620: PUSH
66621: LD_INT 1
66623: NEG
66624: PUSH
66625: EMPTY
66626: LIST
66627: LIST
66628: PUSH
66629: LD_INT 5
66631: NEG
66632: PUSH
66633: LD_INT 2
66635: NEG
66636: PUSH
66637: EMPTY
66638: LIST
66639: LIST
66640: PUSH
66641: LD_INT 3
66643: NEG
66644: PUSH
66645: LD_INT 2
66647: PUSH
66648: EMPTY
66649: LIST
66650: LIST
66651: PUSH
66652: LD_INT 3
66654: NEG
66655: PUSH
66656: LD_INT 3
66658: NEG
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: PUSH
66664: LD_INT 3
66666: NEG
66667: PUSH
66668: LD_INT 4
66670: NEG
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: PUSH
66676: LD_INT 2
66678: NEG
66679: PUSH
66680: LD_INT 3
66682: NEG
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: PUSH
66688: LD_INT 2
66690: NEG
66691: PUSH
66692: LD_INT 2
66694: NEG
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: LD_INT 3
66702: NEG
66703: PUSH
66704: LD_INT 2
66706: NEG
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: PUSH
66712: LD_INT 4
66714: NEG
66715: PUSH
66716: LD_INT 3
66718: NEG
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: PUSH
66724: LD_INT 4
66726: NEG
66727: PUSH
66728: LD_INT 4
66730: NEG
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: PUSH
66736: LD_INT 2
66738: NEG
66739: PUSH
66740: LD_INT 4
66742: NEG
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: PUSH
66748: LD_INT 4
66750: NEG
66751: PUSH
66752: LD_INT 2
66754: NEG
66755: PUSH
66756: EMPTY
66757: LIST
66758: LIST
66759: PUSH
66760: LD_INT 0
66762: PUSH
66763: LD_INT 4
66765: NEG
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: PUSH
66771: LD_INT 0
66773: PUSH
66774: LD_INT 5
66776: NEG
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: LD_INT 1
66784: PUSH
66785: LD_INT 4
66787: NEG
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: PUSH
66793: LD_INT 1
66795: PUSH
66796: LD_INT 3
66798: NEG
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: PUSH
66804: LD_INT 0
66806: PUSH
66807: LD_INT 3
66809: NEG
66810: PUSH
66811: EMPTY
66812: LIST
66813: LIST
66814: PUSH
66815: LD_INT 1
66817: NEG
66818: PUSH
66819: LD_INT 4
66821: NEG
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 1
66829: NEG
66830: PUSH
66831: LD_INT 5
66833: NEG
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: PUSH
66839: LD_INT 2
66841: PUSH
66842: LD_INT 3
66844: NEG
66845: PUSH
66846: EMPTY
66847: LIST
66848: LIST
66849: PUSH
66850: LD_INT 2
66852: NEG
66853: PUSH
66854: LD_INT 5
66856: NEG
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: LIST
66866: LIST
66867: LIST
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: LIST
66877: LIST
66878: LIST
66879: LIST
66880: LIST
66881: LIST
66882: LIST
66883: LIST
66884: LIST
66885: LIST
66886: LIST
66887: LIST
66888: LIST
66889: LIST
66890: LIST
66891: LIST
66892: LIST
66893: LIST
66894: LIST
66895: LIST
66896: LIST
66897: LIST
66898: LIST
66899: LIST
66900: LIST
66901: LIST
66902: LIST
66903: LIST
66904: LIST
66905: LIST
66906: LIST
66907: LIST
66908: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66909: LD_ADDR_VAR 0 31
66913: PUSH
66914: LD_INT 0
66916: PUSH
66917: LD_INT 4
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: PUSH
66924: LD_INT 0
66926: PUSH
66927: LD_INT 3
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: PUSH
66934: LD_INT 1
66936: PUSH
66937: LD_INT 4
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: PUSH
66944: LD_INT 1
66946: PUSH
66947: LD_INT 5
66949: PUSH
66950: EMPTY
66951: LIST
66952: LIST
66953: PUSH
66954: LD_INT 0
66956: PUSH
66957: LD_INT 5
66959: PUSH
66960: EMPTY
66961: LIST
66962: LIST
66963: PUSH
66964: LD_INT 1
66966: NEG
66967: PUSH
66968: LD_INT 4
66970: PUSH
66971: EMPTY
66972: LIST
66973: LIST
66974: PUSH
66975: LD_INT 1
66977: NEG
66978: PUSH
66979: LD_INT 3
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: PUSH
66986: LD_INT 2
66988: PUSH
66989: LD_INT 5
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: PUSH
66996: LD_INT 2
66998: NEG
66999: PUSH
67000: LD_INT 3
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: PUSH
67007: LD_INT 3
67009: NEG
67010: PUSH
67011: LD_INT 0
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: LD_INT 3
67020: NEG
67021: PUSH
67022: LD_INT 1
67024: NEG
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: PUSH
67030: LD_INT 2
67032: NEG
67033: PUSH
67034: LD_INT 0
67036: PUSH
67037: EMPTY
67038: LIST
67039: LIST
67040: PUSH
67041: LD_INT 2
67043: NEG
67044: PUSH
67045: LD_INT 1
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: LD_INT 3
67054: NEG
67055: PUSH
67056: LD_INT 1
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: LD_INT 4
67065: NEG
67066: PUSH
67067: LD_INT 0
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: PUSH
67074: LD_INT 4
67076: NEG
67077: PUSH
67078: LD_INT 1
67080: NEG
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: PUSH
67086: LD_INT 4
67088: NEG
67089: PUSH
67090: LD_INT 2
67092: NEG
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: PUSH
67098: LD_INT 2
67100: NEG
67101: PUSH
67102: LD_INT 2
67104: PUSH
67105: EMPTY
67106: LIST
67107: LIST
67108: PUSH
67109: LD_INT 4
67111: NEG
67112: PUSH
67113: LD_INT 4
67115: NEG
67116: PUSH
67117: EMPTY
67118: LIST
67119: LIST
67120: PUSH
67121: LD_INT 4
67123: NEG
67124: PUSH
67125: LD_INT 5
67127: NEG
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: PUSH
67133: LD_INT 3
67135: NEG
67136: PUSH
67137: LD_INT 4
67139: NEG
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: LD_INT 3
67147: NEG
67148: PUSH
67149: LD_INT 3
67151: NEG
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: PUSH
67157: LD_INT 4
67159: NEG
67160: PUSH
67161: LD_INT 3
67163: NEG
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: PUSH
67169: LD_INT 5
67171: NEG
67172: PUSH
67173: LD_INT 4
67175: NEG
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: LD_INT 5
67183: NEG
67184: PUSH
67185: LD_INT 5
67187: NEG
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: PUSH
67193: LD_INT 3
67195: NEG
67196: PUSH
67197: LD_INT 5
67199: NEG
67200: PUSH
67201: EMPTY
67202: LIST
67203: LIST
67204: PUSH
67205: LD_INT 5
67207: NEG
67208: PUSH
67209: LD_INT 3
67211: NEG
67212: PUSH
67213: EMPTY
67214: LIST
67215: LIST
67216: PUSH
67217: LD_INT 0
67219: PUSH
67220: LD_INT 3
67222: NEG
67223: PUSH
67224: EMPTY
67225: LIST
67226: LIST
67227: PUSH
67228: LD_INT 0
67230: PUSH
67231: LD_INT 4
67233: NEG
67234: PUSH
67235: EMPTY
67236: LIST
67237: LIST
67238: PUSH
67239: LD_INT 1
67241: PUSH
67242: LD_INT 3
67244: NEG
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: PUSH
67250: LD_INT 1
67252: PUSH
67253: LD_INT 2
67255: NEG
67256: PUSH
67257: EMPTY
67258: LIST
67259: LIST
67260: PUSH
67261: LD_INT 0
67263: PUSH
67264: LD_INT 2
67266: NEG
67267: PUSH
67268: EMPTY
67269: LIST
67270: LIST
67271: PUSH
67272: LD_INT 1
67274: NEG
67275: PUSH
67276: LD_INT 3
67278: NEG
67279: PUSH
67280: EMPTY
67281: LIST
67282: LIST
67283: PUSH
67284: LD_INT 1
67286: NEG
67287: PUSH
67288: LD_INT 4
67290: NEG
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: PUSH
67296: LD_INT 2
67298: PUSH
67299: LD_INT 2
67301: NEG
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: PUSH
67307: LD_INT 2
67309: NEG
67310: PUSH
67311: LD_INT 4
67313: NEG
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: PUSH
67319: LD_INT 4
67321: PUSH
67322: LD_INT 0
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: PUSH
67329: LD_INT 4
67331: PUSH
67332: LD_INT 1
67334: NEG
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: PUSH
67340: LD_INT 5
67342: PUSH
67343: LD_INT 0
67345: PUSH
67346: EMPTY
67347: LIST
67348: LIST
67349: PUSH
67350: LD_INT 5
67352: PUSH
67353: LD_INT 1
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: PUSH
67360: LD_INT 4
67362: PUSH
67363: LD_INT 1
67365: PUSH
67366: EMPTY
67367: LIST
67368: LIST
67369: PUSH
67370: LD_INT 3
67372: PUSH
67373: LD_INT 0
67375: PUSH
67376: EMPTY
67377: LIST
67378: LIST
67379: PUSH
67380: LD_INT 3
67382: PUSH
67383: LD_INT 1
67385: NEG
67386: PUSH
67387: EMPTY
67388: LIST
67389: LIST
67390: PUSH
67391: LD_INT 3
67393: PUSH
67394: LD_INT 2
67396: NEG
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: PUSH
67402: LD_INT 5
67404: PUSH
67405: LD_INT 2
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: PUSH
67412: EMPTY
67413: LIST
67414: LIST
67415: LIST
67416: LIST
67417: LIST
67418: LIST
67419: LIST
67420: LIST
67421: LIST
67422: LIST
67423: LIST
67424: LIST
67425: LIST
67426: LIST
67427: LIST
67428: LIST
67429: LIST
67430: LIST
67431: LIST
67432: LIST
67433: LIST
67434: LIST
67435: LIST
67436: LIST
67437: LIST
67438: LIST
67439: LIST
67440: LIST
67441: LIST
67442: LIST
67443: LIST
67444: LIST
67445: LIST
67446: LIST
67447: LIST
67448: LIST
67449: LIST
67450: LIST
67451: LIST
67452: LIST
67453: LIST
67454: LIST
67455: LIST
67456: LIST
67457: LIST
67458: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
67459: LD_ADDR_VAR 0 32
67463: PUSH
67464: LD_INT 4
67466: NEG
67467: PUSH
67468: LD_INT 0
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: PUSH
67475: LD_INT 4
67477: NEG
67478: PUSH
67479: LD_INT 1
67481: NEG
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: PUSH
67487: LD_INT 3
67489: NEG
67490: PUSH
67491: LD_INT 0
67493: PUSH
67494: EMPTY
67495: LIST
67496: LIST
67497: PUSH
67498: LD_INT 3
67500: NEG
67501: PUSH
67502: LD_INT 1
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: PUSH
67509: LD_INT 4
67511: NEG
67512: PUSH
67513: LD_INT 1
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: LD_INT 5
67522: NEG
67523: PUSH
67524: LD_INT 0
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PUSH
67531: LD_INT 5
67533: NEG
67534: PUSH
67535: LD_INT 1
67537: NEG
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: PUSH
67543: LD_INT 5
67545: NEG
67546: PUSH
67547: LD_INT 2
67549: NEG
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: PUSH
67555: LD_INT 3
67557: NEG
67558: PUSH
67559: LD_INT 2
67561: PUSH
67562: EMPTY
67563: LIST
67564: LIST
67565: PUSH
67566: LD_INT 3
67568: NEG
67569: PUSH
67570: LD_INT 3
67572: NEG
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: PUSH
67578: LD_INT 3
67580: NEG
67581: PUSH
67582: LD_INT 4
67584: NEG
67585: PUSH
67586: EMPTY
67587: LIST
67588: LIST
67589: PUSH
67590: LD_INT 2
67592: NEG
67593: PUSH
67594: LD_INT 3
67596: NEG
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: PUSH
67602: LD_INT 2
67604: NEG
67605: PUSH
67606: LD_INT 2
67608: NEG
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PUSH
67614: LD_INT 3
67616: NEG
67617: PUSH
67618: LD_INT 2
67620: NEG
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: PUSH
67626: LD_INT 4
67628: NEG
67629: PUSH
67630: LD_INT 3
67632: NEG
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: PUSH
67638: LD_INT 4
67640: NEG
67641: PUSH
67642: LD_INT 4
67644: NEG
67645: PUSH
67646: EMPTY
67647: LIST
67648: LIST
67649: PUSH
67650: LD_INT 2
67652: NEG
67653: PUSH
67654: LD_INT 4
67656: NEG
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: PUSH
67662: LD_INT 4
67664: NEG
67665: PUSH
67666: LD_INT 2
67668: NEG
67669: PUSH
67670: EMPTY
67671: LIST
67672: LIST
67673: PUSH
67674: LD_INT 0
67676: PUSH
67677: LD_INT 4
67679: NEG
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: PUSH
67685: LD_INT 0
67687: PUSH
67688: LD_INT 5
67690: NEG
67691: PUSH
67692: EMPTY
67693: LIST
67694: LIST
67695: PUSH
67696: LD_INT 1
67698: PUSH
67699: LD_INT 4
67701: NEG
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: PUSH
67707: LD_INT 1
67709: PUSH
67710: LD_INT 3
67712: NEG
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: PUSH
67718: LD_INT 0
67720: PUSH
67721: LD_INT 3
67723: NEG
67724: PUSH
67725: EMPTY
67726: LIST
67727: LIST
67728: PUSH
67729: LD_INT 1
67731: NEG
67732: PUSH
67733: LD_INT 4
67735: NEG
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PUSH
67741: LD_INT 1
67743: NEG
67744: PUSH
67745: LD_INT 5
67747: NEG
67748: PUSH
67749: EMPTY
67750: LIST
67751: LIST
67752: PUSH
67753: LD_INT 2
67755: PUSH
67756: LD_INT 3
67758: NEG
67759: PUSH
67760: EMPTY
67761: LIST
67762: LIST
67763: PUSH
67764: LD_INT 2
67766: NEG
67767: PUSH
67768: LD_INT 5
67770: NEG
67771: PUSH
67772: EMPTY
67773: LIST
67774: LIST
67775: PUSH
67776: LD_INT 3
67778: PUSH
67779: LD_INT 0
67781: PUSH
67782: EMPTY
67783: LIST
67784: LIST
67785: PUSH
67786: LD_INT 3
67788: PUSH
67789: LD_INT 1
67791: NEG
67792: PUSH
67793: EMPTY
67794: LIST
67795: LIST
67796: PUSH
67797: LD_INT 4
67799: PUSH
67800: LD_INT 0
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: PUSH
67807: LD_INT 4
67809: PUSH
67810: LD_INT 1
67812: PUSH
67813: EMPTY
67814: LIST
67815: LIST
67816: PUSH
67817: LD_INT 3
67819: PUSH
67820: LD_INT 1
67822: PUSH
67823: EMPTY
67824: LIST
67825: LIST
67826: PUSH
67827: LD_INT 2
67829: PUSH
67830: LD_INT 0
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: PUSH
67837: LD_INT 2
67839: PUSH
67840: LD_INT 1
67842: NEG
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: PUSH
67848: LD_INT 2
67850: PUSH
67851: LD_INT 2
67853: NEG
67854: PUSH
67855: EMPTY
67856: LIST
67857: LIST
67858: PUSH
67859: LD_INT 4
67861: PUSH
67862: LD_INT 2
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: PUSH
67869: LD_INT 4
67871: PUSH
67872: LD_INT 4
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: PUSH
67879: LD_INT 4
67881: PUSH
67882: LD_INT 3
67884: PUSH
67885: EMPTY
67886: LIST
67887: LIST
67888: PUSH
67889: LD_INT 5
67891: PUSH
67892: LD_INT 4
67894: PUSH
67895: EMPTY
67896: LIST
67897: LIST
67898: PUSH
67899: LD_INT 5
67901: PUSH
67902: LD_INT 5
67904: PUSH
67905: EMPTY
67906: LIST
67907: LIST
67908: PUSH
67909: LD_INT 4
67911: PUSH
67912: LD_INT 5
67914: PUSH
67915: EMPTY
67916: LIST
67917: LIST
67918: PUSH
67919: LD_INT 3
67921: PUSH
67922: LD_INT 4
67924: PUSH
67925: EMPTY
67926: LIST
67927: LIST
67928: PUSH
67929: LD_INT 3
67931: PUSH
67932: LD_INT 3
67934: PUSH
67935: EMPTY
67936: LIST
67937: LIST
67938: PUSH
67939: LD_INT 5
67941: PUSH
67942: LD_INT 3
67944: PUSH
67945: EMPTY
67946: LIST
67947: LIST
67948: PUSH
67949: LD_INT 3
67951: PUSH
67952: LD_INT 5
67954: PUSH
67955: EMPTY
67956: LIST
67957: LIST
67958: PUSH
67959: EMPTY
67960: LIST
67961: LIST
67962: LIST
67963: LIST
67964: LIST
67965: LIST
67966: LIST
67967: LIST
67968: LIST
67969: LIST
67970: LIST
67971: LIST
67972: LIST
67973: LIST
67974: LIST
67975: LIST
67976: LIST
67977: LIST
67978: LIST
67979: LIST
67980: LIST
67981: LIST
67982: LIST
67983: LIST
67984: LIST
67985: LIST
67986: LIST
67987: LIST
67988: LIST
67989: LIST
67990: LIST
67991: LIST
67992: LIST
67993: LIST
67994: LIST
67995: LIST
67996: LIST
67997: LIST
67998: LIST
67999: LIST
68000: LIST
68001: LIST
68002: LIST
68003: LIST
68004: LIST
68005: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68006: LD_ADDR_VAR 0 33
68010: PUSH
68011: LD_INT 4
68013: NEG
68014: PUSH
68015: LD_INT 4
68017: NEG
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: PUSH
68023: LD_INT 4
68025: NEG
68026: PUSH
68027: LD_INT 5
68029: NEG
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PUSH
68035: LD_INT 3
68037: NEG
68038: PUSH
68039: LD_INT 4
68041: NEG
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: LD_INT 3
68049: NEG
68050: PUSH
68051: LD_INT 3
68053: NEG
68054: PUSH
68055: EMPTY
68056: LIST
68057: LIST
68058: PUSH
68059: LD_INT 4
68061: NEG
68062: PUSH
68063: LD_INT 3
68065: NEG
68066: PUSH
68067: EMPTY
68068: LIST
68069: LIST
68070: PUSH
68071: LD_INT 5
68073: NEG
68074: PUSH
68075: LD_INT 4
68077: NEG
68078: PUSH
68079: EMPTY
68080: LIST
68081: LIST
68082: PUSH
68083: LD_INT 5
68085: NEG
68086: PUSH
68087: LD_INT 5
68089: NEG
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: PUSH
68095: LD_INT 3
68097: NEG
68098: PUSH
68099: LD_INT 5
68101: NEG
68102: PUSH
68103: EMPTY
68104: LIST
68105: LIST
68106: PUSH
68107: LD_INT 5
68109: NEG
68110: PUSH
68111: LD_INT 3
68113: NEG
68114: PUSH
68115: EMPTY
68116: LIST
68117: LIST
68118: PUSH
68119: LD_INT 0
68121: PUSH
68122: LD_INT 3
68124: NEG
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: PUSH
68130: LD_INT 0
68132: PUSH
68133: LD_INT 4
68135: NEG
68136: PUSH
68137: EMPTY
68138: LIST
68139: LIST
68140: PUSH
68141: LD_INT 1
68143: PUSH
68144: LD_INT 3
68146: NEG
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: PUSH
68152: LD_INT 1
68154: PUSH
68155: LD_INT 2
68157: NEG
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: PUSH
68163: LD_INT 0
68165: PUSH
68166: LD_INT 2
68168: NEG
68169: PUSH
68170: EMPTY
68171: LIST
68172: LIST
68173: PUSH
68174: LD_INT 1
68176: NEG
68177: PUSH
68178: LD_INT 3
68180: NEG
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: PUSH
68186: LD_INT 1
68188: NEG
68189: PUSH
68190: LD_INT 4
68192: NEG
68193: PUSH
68194: EMPTY
68195: LIST
68196: LIST
68197: PUSH
68198: LD_INT 2
68200: PUSH
68201: LD_INT 2
68203: NEG
68204: PUSH
68205: EMPTY
68206: LIST
68207: LIST
68208: PUSH
68209: LD_INT 2
68211: NEG
68212: PUSH
68213: LD_INT 4
68215: NEG
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: LD_INT 4
68223: PUSH
68224: LD_INT 0
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PUSH
68231: LD_INT 4
68233: PUSH
68234: LD_INT 1
68236: NEG
68237: PUSH
68238: EMPTY
68239: LIST
68240: LIST
68241: PUSH
68242: LD_INT 5
68244: PUSH
68245: LD_INT 0
68247: PUSH
68248: EMPTY
68249: LIST
68250: LIST
68251: PUSH
68252: LD_INT 5
68254: PUSH
68255: LD_INT 1
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: PUSH
68262: LD_INT 4
68264: PUSH
68265: LD_INT 1
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: PUSH
68272: LD_INT 3
68274: PUSH
68275: LD_INT 0
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: PUSH
68282: LD_INT 3
68284: PUSH
68285: LD_INT 1
68287: NEG
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: PUSH
68293: LD_INT 3
68295: PUSH
68296: LD_INT 2
68298: NEG
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: PUSH
68304: LD_INT 5
68306: PUSH
68307: LD_INT 2
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: PUSH
68314: LD_INT 3
68316: PUSH
68317: LD_INT 3
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: PUSH
68324: LD_INT 3
68326: PUSH
68327: LD_INT 2
68329: PUSH
68330: EMPTY
68331: LIST
68332: LIST
68333: PUSH
68334: LD_INT 4
68336: PUSH
68337: LD_INT 3
68339: PUSH
68340: EMPTY
68341: LIST
68342: LIST
68343: PUSH
68344: LD_INT 4
68346: PUSH
68347: LD_INT 4
68349: PUSH
68350: EMPTY
68351: LIST
68352: LIST
68353: PUSH
68354: LD_INT 3
68356: PUSH
68357: LD_INT 4
68359: PUSH
68360: EMPTY
68361: LIST
68362: LIST
68363: PUSH
68364: LD_INT 2
68366: PUSH
68367: LD_INT 3
68369: PUSH
68370: EMPTY
68371: LIST
68372: LIST
68373: PUSH
68374: LD_INT 2
68376: PUSH
68377: LD_INT 2
68379: PUSH
68380: EMPTY
68381: LIST
68382: LIST
68383: PUSH
68384: LD_INT 4
68386: PUSH
68387: LD_INT 2
68389: PUSH
68390: EMPTY
68391: LIST
68392: LIST
68393: PUSH
68394: LD_INT 2
68396: PUSH
68397: LD_INT 4
68399: PUSH
68400: EMPTY
68401: LIST
68402: LIST
68403: PUSH
68404: LD_INT 0
68406: PUSH
68407: LD_INT 4
68409: PUSH
68410: EMPTY
68411: LIST
68412: LIST
68413: PUSH
68414: LD_INT 0
68416: PUSH
68417: LD_INT 3
68419: PUSH
68420: EMPTY
68421: LIST
68422: LIST
68423: PUSH
68424: LD_INT 1
68426: PUSH
68427: LD_INT 4
68429: PUSH
68430: EMPTY
68431: LIST
68432: LIST
68433: PUSH
68434: LD_INT 1
68436: PUSH
68437: LD_INT 5
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: PUSH
68444: LD_INT 0
68446: PUSH
68447: LD_INT 5
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: PUSH
68454: LD_INT 1
68456: NEG
68457: PUSH
68458: LD_INT 4
68460: PUSH
68461: EMPTY
68462: LIST
68463: LIST
68464: PUSH
68465: LD_INT 1
68467: NEG
68468: PUSH
68469: LD_INT 3
68471: PUSH
68472: EMPTY
68473: LIST
68474: LIST
68475: PUSH
68476: LD_INT 2
68478: PUSH
68479: LD_INT 5
68481: PUSH
68482: EMPTY
68483: LIST
68484: LIST
68485: PUSH
68486: LD_INT 2
68488: NEG
68489: PUSH
68490: LD_INT 3
68492: PUSH
68493: EMPTY
68494: LIST
68495: LIST
68496: PUSH
68497: EMPTY
68498: LIST
68499: LIST
68500: LIST
68501: LIST
68502: LIST
68503: LIST
68504: LIST
68505: LIST
68506: LIST
68507: LIST
68508: LIST
68509: LIST
68510: LIST
68511: LIST
68512: LIST
68513: LIST
68514: LIST
68515: LIST
68516: LIST
68517: LIST
68518: LIST
68519: LIST
68520: LIST
68521: LIST
68522: LIST
68523: LIST
68524: LIST
68525: LIST
68526: LIST
68527: LIST
68528: LIST
68529: LIST
68530: LIST
68531: LIST
68532: LIST
68533: LIST
68534: LIST
68535: LIST
68536: LIST
68537: LIST
68538: LIST
68539: LIST
68540: LIST
68541: LIST
68542: LIST
68543: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
68544: LD_ADDR_VAR 0 34
68548: PUSH
68549: LD_INT 0
68551: PUSH
68552: LD_INT 4
68554: NEG
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PUSH
68560: LD_INT 0
68562: PUSH
68563: LD_INT 5
68565: NEG
68566: PUSH
68567: EMPTY
68568: LIST
68569: LIST
68570: PUSH
68571: LD_INT 1
68573: PUSH
68574: LD_INT 4
68576: NEG
68577: PUSH
68578: EMPTY
68579: LIST
68580: LIST
68581: PUSH
68582: LD_INT 1
68584: PUSH
68585: LD_INT 3
68587: NEG
68588: PUSH
68589: EMPTY
68590: LIST
68591: LIST
68592: PUSH
68593: LD_INT 0
68595: PUSH
68596: LD_INT 3
68598: NEG
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: PUSH
68604: LD_INT 1
68606: NEG
68607: PUSH
68608: LD_INT 4
68610: NEG
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: PUSH
68616: LD_INT 1
68618: NEG
68619: PUSH
68620: LD_INT 5
68622: NEG
68623: PUSH
68624: EMPTY
68625: LIST
68626: LIST
68627: PUSH
68628: LD_INT 2
68630: PUSH
68631: LD_INT 3
68633: NEG
68634: PUSH
68635: EMPTY
68636: LIST
68637: LIST
68638: PUSH
68639: LD_INT 2
68641: NEG
68642: PUSH
68643: LD_INT 5
68645: NEG
68646: PUSH
68647: EMPTY
68648: LIST
68649: LIST
68650: PUSH
68651: LD_INT 3
68653: PUSH
68654: LD_INT 0
68656: PUSH
68657: EMPTY
68658: LIST
68659: LIST
68660: PUSH
68661: LD_INT 3
68663: PUSH
68664: LD_INT 1
68666: NEG
68667: PUSH
68668: EMPTY
68669: LIST
68670: LIST
68671: PUSH
68672: LD_INT 4
68674: PUSH
68675: LD_INT 0
68677: PUSH
68678: EMPTY
68679: LIST
68680: LIST
68681: PUSH
68682: LD_INT 4
68684: PUSH
68685: LD_INT 1
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: PUSH
68692: LD_INT 3
68694: PUSH
68695: LD_INT 1
68697: PUSH
68698: EMPTY
68699: LIST
68700: LIST
68701: PUSH
68702: LD_INT 2
68704: PUSH
68705: LD_INT 0
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: PUSH
68712: LD_INT 2
68714: PUSH
68715: LD_INT 1
68717: NEG
68718: PUSH
68719: EMPTY
68720: LIST
68721: LIST
68722: PUSH
68723: LD_INT 2
68725: PUSH
68726: LD_INT 2
68728: NEG
68729: PUSH
68730: EMPTY
68731: LIST
68732: LIST
68733: PUSH
68734: LD_INT 4
68736: PUSH
68737: LD_INT 2
68739: PUSH
68740: EMPTY
68741: LIST
68742: LIST
68743: PUSH
68744: LD_INT 4
68746: PUSH
68747: LD_INT 4
68749: PUSH
68750: EMPTY
68751: LIST
68752: LIST
68753: PUSH
68754: LD_INT 4
68756: PUSH
68757: LD_INT 3
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: PUSH
68764: LD_INT 5
68766: PUSH
68767: LD_INT 4
68769: PUSH
68770: EMPTY
68771: LIST
68772: LIST
68773: PUSH
68774: LD_INT 5
68776: PUSH
68777: LD_INT 5
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: PUSH
68784: LD_INT 4
68786: PUSH
68787: LD_INT 5
68789: PUSH
68790: EMPTY
68791: LIST
68792: LIST
68793: PUSH
68794: LD_INT 3
68796: PUSH
68797: LD_INT 4
68799: PUSH
68800: EMPTY
68801: LIST
68802: LIST
68803: PUSH
68804: LD_INT 3
68806: PUSH
68807: LD_INT 3
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: PUSH
68814: LD_INT 5
68816: PUSH
68817: LD_INT 3
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: PUSH
68824: LD_INT 3
68826: PUSH
68827: LD_INT 5
68829: PUSH
68830: EMPTY
68831: LIST
68832: LIST
68833: PUSH
68834: LD_INT 0
68836: PUSH
68837: LD_INT 3
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: PUSH
68844: LD_INT 0
68846: PUSH
68847: LD_INT 2
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: PUSH
68854: LD_INT 1
68856: PUSH
68857: LD_INT 3
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: PUSH
68864: LD_INT 1
68866: PUSH
68867: LD_INT 4
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: PUSH
68874: LD_INT 0
68876: PUSH
68877: LD_INT 4
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: PUSH
68884: LD_INT 1
68886: NEG
68887: PUSH
68888: LD_INT 3
68890: PUSH
68891: EMPTY
68892: LIST
68893: LIST
68894: PUSH
68895: LD_INT 1
68897: NEG
68898: PUSH
68899: LD_INT 2
68901: PUSH
68902: EMPTY
68903: LIST
68904: LIST
68905: PUSH
68906: LD_INT 2
68908: PUSH
68909: LD_INT 4
68911: PUSH
68912: EMPTY
68913: LIST
68914: LIST
68915: PUSH
68916: LD_INT 2
68918: NEG
68919: PUSH
68920: LD_INT 2
68922: PUSH
68923: EMPTY
68924: LIST
68925: LIST
68926: PUSH
68927: LD_INT 4
68929: NEG
68930: PUSH
68931: LD_INT 0
68933: PUSH
68934: EMPTY
68935: LIST
68936: LIST
68937: PUSH
68938: LD_INT 4
68940: NEG
68941: PUSH
68942: LD_INT 1
68944: NEG
68945: PUSH
68946: EMPTY
68947: LIST
68948: LIST
68949: PUSH
68950: LD_INT 3
68952: NEG
68953: PUSH
68954: LD_INT 0
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: PUSH
68961: LD_INT 3
68963: NEG
68964: PUSH
68965: LD_INT 1
68967: PUSH
68968: EMPTY
68969: LIST
68970: LIST
68971: PUSH
68972: LD_INT 4
68974: NEG
68975: PUSH
68976: LD_INT 1
68978: PUSH
68979: EMPTY
68980: LIST
68981: LIST
68982: PUSH
68983: LD_INT 5
68985: NEG
68986: PUSH
68987: LD_INT 0
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: PUSH
68994: LD_INT 5
68996: NEG
68997: PUSH
68998: LD_INT 1
69000: NEG
69001: PUSH
69002: EMPTY
69003: LIST
69004: LIST
69005: PUSH
69006: LD_INT 5
69008: NEG
69009: PUSH
69010: LD_INT 2
69012: NEG
69013: PUSH
69014: EMPTY
69015: LIST
69016: LIST
69017: PUSH
69018: LD_INT 3
69020: NEG
69021: PUSH
69022: LD_INT 2
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: PUSH
69029: EMPTY
69030: LIST
69031: LIST
69032: LIST
69033: LIST
69034: LIST
69035: LIST
69036: LIST
69037: LIST
69038: LIST
69039: LIST
69040: LIST
69041: LIST
69042: LIST
69043: LIST
69044: LIST
69045: LIST
69046: LIST
69047: LIST
69048: LIST
69049: LIST
69050: LIST
69051: LIST
69052: LIST
69053: LIST
69054: LIST
69055: LIST
69056: LIST
69057: LIST
69058: LIST
69059: LIST
69060: LIST
69061: LIST
69062: LIST
69063: LIST
69064: LIST
69065: LIST
69066: LIST
69067: LIST
69068: LIST
69069: LIST
69070: LIST
69071: LIST
69072: LIST
69073: LIST
69074: LIST
69075: ST_TO_ADDR
// end ; end ;
69076: GO 69079
69078: POP
// case btype of b_depot , b_warehouse :
69079: LD_VAR 0 1
69083: PUSH
69084: LD_INT 0
69086: DOUBLE
69087: EQUAL
69088: IFTRUE 69098
69090: LD_INT 1
69092: DOUBLE
69093: EQUAL
69094: IFTRUE 69098
69096: GO 69299
69098: POP
// case nation of nation_american :
69099: LD_VAR 0 5
69103: PUSH
69104: LD_INT 1
69106: DOUBLE
69107: EQUAL
69108: IFTRUE 69112
69110: GO 69168
69112: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69113: LD_ADDR_VAR 0 9
69117: PUSH
69118: LD_VAR 0 11
69122: PUSH
69123: LD_VAR 0 12
69127: PUSH
69128: LD_VAR 0 13
69132: PUSH
69133: LD_VAR 0 14
69137: PUSH
69138: LD_VAR 0 15
69142: PUSH
69143: LD_VAR 0 16
69147: PUSH
69148: EMPTY
69149: LIST
69150: LIST
69151: LIST
69152: LIST
69153: LIST
69154: LIST
69155: PUSH
69156: LD_VAR 0 4
69160: PUSH
69161: LD_INT 1
69163: PLUS
69164: ARRAY
69165: ST_TO_ADDR
69166: GO 69297
69168: LD_INT 2
69170: DOUBLE
69171: EQUAL
69172: IFTRUE 69176
69174: GO 69232
69176: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69177: LD_ADDR_VAR 0 9
69181: PUSH
69182: LD_VAR 0 17
69186: PUSH
69187: LD_VAR 0 18
69191: PUSH
69192: LD_VAR 0 19
69196: PUSH
69197: LD_VAR 0 20
69201: PUSH
69202: LD_VAR 0 21
69206: PUSH
69207: LD_VAR 0 22
69211: PUSH
69212: EMPTY
69213: LIST
69214: LIST
69215: LIST
69216: LIST
69217: LIST
69218: LIST
69219: PUSH
69220: LD_VAR 0 4
69224: PUSH
69225: LD_INT 1
69227: PLUS
69228: ARRAY
69229: ST_TO_ADDR
69230: GO 69297
69232: LD_INT 3
69234: DOUBLE
69235: EQUAL
69236: IFTRUE 69240
69238: GO 69296
69240: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69241: LD_ADDR_VAR 0 9
69245: PUSH
69246: LD_VAR 0 23
69250: PUSH
69251: LD_VAR 0 24
69255: PUSH
69256: LD_VAR 0 25
69260: PUSH
69261: LD_VAR 0 26
69265: PUSH
69266: LD_VAR 0 27
69270: PUSH
69271: LD_VAR 0 28
69275: PUSH
69276: EMPTY
69277: LIST
69278: LIST
69279: LIST
69280: LIST
69281: LIST
69282: LIST
69283: PUSH
69284: LD_VAR 0 4
69288: PUSH
69289: LD_INT 1
69291: PLUS
69292: ARRAY
69293: ST_TO_ADDR
69294: GO 69297
69296: POP
69297: GO 69852
69299: LD_INT 2
69301: DOUBLE
69302: EQUAL
69303: IFTRUE 69313
69305: LD_INT 3
69307: DOUBLE
69308: EQUAL
69309: IFTRUE 69313
69311: GO 69369
69313: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69314: LD_ADDR_VAR 0 9
69318: PUSH
69319: LD_VAR 0 29
69323: PUSH
69324: LD_VAR 0 30
69328: PUSH
69329: LD_VAR 0 31
69333: PUSH
69334: LD_VAR 0 32
69338: PUSH
69339: LD_VAR 0 33
69343: PUSH
69344: LD_VAR 0 34
69348: PUSH
69349: EMPTY
69350: LIST
69351: LIST
69352: LIST
69353: LIST
69354: LIST
69355: LIST
69356: PUSH
69357: LD_VAR 0 4
69361: PUSH
69362: LD_INT 1
69364: PLUS
69365: ARRAY
69366: ST_TO_ADDR
69367: GO 69852
69369: LD_INT 16
69371: DOUBLE
69372: EQUAL
69373: IFTRUE 69431
69375: LD_INT 17
69377: DOUBLE
69378: EQUAL
69379: IFTRUE 69431
69381: LD_INT 18
69383: DOUBLE
69384: EQUAL
69385: IFTRUE 69431
69387: LD_INT 19
69389: DOUBLE
69390: EQUAL
69391: IFTRUE 69431
69393: LD_INT 22
69395: DOUBLE
69396: EQUAL
69397: IFTRUE 69431
69399: LD_INT 20
69401: DOUBLE
69402: EQUAL
69403: IFTRUE 69431
69405: LD_INT 21
69407: DOUBLE
69408: EQUAL
69409: IFTRUE 69431
69411: LD_INT 23
69413: DOUBLE
69414: EQUAL
69415: IFTRUE 69431
69417: LD_INT 24
69419: DOUBLE
69420: EQUAL
69421: IFTRUE 69431
69423: LD_INT 25
69425: DOUBLE
69426: EQUAL
69427: IFTRUE 69431
69429: GO 69487
69431: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
69432: LD_ADDR_VAR 0 9
69436: PUSH
69437: LD_VAR 0 35
69441: PUSH
69442: LD_VAR 0 36
69446: PUSH
69447: LD_VAR 0 37
69451: PUSH
69452: LD_VAR 0 38
69456: PUSH
69457: LD_VAR 0 39
69461: PUSH
69462: LD_VAR 0 40
69466: PUSH
69467: EMPTY
69468: LIST
69469: LIST
69470: LIST
69471: LIST
69472: LIST
69473: LIST
69474: PUSH
69475: LD_VAR 0 4
69479: PUSH
69480: LD_INT 1
69482: PLUS
69483: ARRAY
69484: ST_TO_ADDR
69485: GO 69852
69487: LD_INT 6
69489: DOUBLE
69490: EQUAL
69491: IFTRUE 69543
69493: LD_INT 7
69495: DOUBLE
69496: EQUAL
69497: IFTRUE 69543
69499: LD_INT 8
69501: DOUBLE
69502: EQUAL
69503: IFTRUE 69543
69505: LD_INT 13
69507: DOUBLE
69508: EQUAL
69509: IFTRUE 69543
69511: LD_INT 12
69513: DOUBLE
69514: EQUAL
69515: IFTRUE 69543
69517: LD_INT 15
69519: DOUBLE
69520: EQUAL
69521: IFTRUE 69543
69523: LD_INT 11
69525: DOUBLE
69526: EQUAL
69527: IFTRUE 69543
69529: LD_INT 14
69531: DOUBLE
69532: EQUAL
69533: IFTRUE 69543
69535: LD_INT 10
69537: DOUBLE
69538: EQUAL
69539: IFTRUE 69543
69541: GO 69599
69543: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
69544: LD_ADDR_VAR 0 9
69548: PUSH
69549: LD_VAR 0 41
69553: PUSH
69554: LD_VAR 0 42
69558: PUSH
69559: LD_VAR 0 43
69563: PUSH
69564: LD_VAR 0 44
69568: PUSH
69569: LD_VAR 0 45
69573: PUSH
69574: LD_VAR 0 46
69578: PUSH
69579: EMPTY
69580: LIST
69581: LIST
69582: LIST
69583: LIST
69584: LIST
69585: LIST
69586: PUSH
69587: LD_VAR 0 4
69591: PUSH
69592: LD_INT 1
69594: PLUS
69595: ARRAY
69596: ST_TO_ADDR
69597: GO 69852
69599: LD_INT 36
69601: DOUBLE
69602: EQUAL
69603: IFTRUE 69607
69605: GO 69663
69607: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
69608: LD_ADDR_VAR 0 9
69612: PUSH
69613: LD_VAR 0 47
69617: PUSH
69618: LD_VAR 0 48
69622: PUSH
69623: LD_VAR 0 49
69627: PUSH
69628: LD_VAR 0 50
69632: PUSH
69633: LD_VAR 0 51
69637: PUSH
69638: LD_VAR 0 52
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: LIST
69647: LIST
69648: LIST
69649: LIST
69650: PUSH
69651: LD_VAR 0 4
69655: PUSH
69656: LD_INT 1
69658: PLUS
69659: ARRAY
69660: ST_TO_ADDR
69661: GO 69852
69663: LD_INT 4
69665: DOUBLE
69666: EQUAL
69667: IFTRUE 69689
69669: LD_INT 5
69671: DOUBLE
69672: EQUAL
69673: IFTRUE 69689
69675: LD_INT 34
69677: DOUBLE
69678: EQUAL
69679: IFTRUE 69689
69681: LD_INT 37
69683: DOUBLE
69684: EQUAL
69685: IFTRUE 69689
69687: GO 69745
69689: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
69690: LD_ADDR_VAR 0 9
69694: PUSH
69695: LD_VAR 0 53
69699: PUSH
69700: LD_VAR 0 54
69704: PUSH
69705: LD_VAR 0 55
69709: PUSH
69710: LD_VAR 0 56
69714: PUSH
69715: LD_VAR 0 57
69719: PUSH
69720: LD_VAR 0 58
69724: PUSH
69725: EMPTY
69726: LIST
69727: LIST
69728: LIST
69729: LIST
69730: LIST
69731: LIST
69732: PUSH
69733: LD_VAR 0 4
69737: PUSH
69738: LD_INT 1
69740: PLUS
69741: ARRAY
69742: ST_TO_ADDR
69743: GO 69852
69745: LD_INT 31
69747: DOUBLE
69748: EQUAL
69749: IFTRUE 69795
69751: LD_INT 32
69753: DOUBLE
69754: EQUAL
69755: IFTRUE 69795
69757: LD_INT 33
69759: DOUBLE
69760: EQUAL
69761: IFTRUE 69795
69763: LD_INT 27
69765: DOUBLE
69766: EQUAL
69767: IFTRUE 69795
69769: LD_INT 26
69771: DOUBLE
69772: EQUAL
69773: IFTRUE 69795
69775: LD_INT 28
69777: DOUBLE
69778: EQUAL
69779: IFTRUE 69795
69781: LD_INT 29
69783: DOUBLE
69784: EQUAL
69785: IFTRUE 69795
69787: LD_INT 30
69789: DOUBLE
69790: EQUAL
69791: IFTRUE 69795
69793: GO 69851
69795: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69796: LD_ADDR_VAR 0 9
69800: PUSH
69801: LD_VAR 0 59
69805: PUSH
69806: LD_VAR 0 60
69810: PUSH
69811: LD_VAR 0 61
69815: PUSH
69816: LD_VAR 0 62
69820: PUSH
69821: LD_VAR 0 63
69825: PUSH
69826: LD_VAR 0 64
69830: PUSH
69831: EMPTY
69832: LIST
69833: LIST
69834: LIST
69835: LIST
69836: LIST
69837: LIST
69838: PUSH
69839: LD_VAR 0 4
69843: PUSH
69844: LD_INT 1
69846: PLUS
69847: ARRAY
69848: ST_TO_ADDR
69849: GO 69852
69851: POP
// temp_list2 = [ ] ;
69852: LD_ADDR_VAR 0 10
69856: PUSH
69857: EMPTY
69858: ST_TO_ADDR
// for i in temp_list do
69859: LD_ADDR_VAR 0 8
69863: PUSH
69864: LD_VAR 0 9
69868: PUSH
69869: FOR_IN
69870: IFFALSE 69922
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69872: LD_ADDR_VAR 0 10
69876: PUSH
69877: LD_VAR 0 10
69881: PUSH
69882: LD_VAR 0 8
69886: PUSH
69887: LD_INT 1
69889: ARRAY
69890: PUSH
69891: LD_VAR 0 2
69895: PLUS
69896: PUSH
69897: LD_VAR 0 8
69901: PUSH
69902: LD_INT 2
69904: ARRAY
69905: PUSH
69906: LD_VAR 0 3
69910: PLUS
69911: PUSH
69912: EMPTY
69913: LIST
69914: LIST
69915: PUSH
69916: EMPTY
69917: LIST
69918: ADD
69919: ST_TO_ADDR
69920: GO 69869
69922: POP
69923: POP
// result = temp_list2 ;
69924: LD_ADDR_VAR 0 7
69928: PUSH
69929: LD_VAR 0 10
69933: ST_TO_ADDR
// end ;
69934: LD_VAR 0 7
69938: RET
// export function EnemyInRange ( unit , dist ) ; begin
69939: LD_INT 0
69941: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69942: LD_ADDR_VAR 0 3
69946: PUSH
69947: LD_VAR 0 1
69951: PPUSH
69952: CALL_OW 255
69956: PPUSH
69957: LD_VAR 0 1
69961: PPUSH
69962: CALL_OW 250
69966: PPUSH
69967: LD_VAR 0 1
69971: PPUSH
69972: CALL_OW 251
69976: PPUSH
69977: LD_VAR 0 2
69981: PPUSH
69982: CALL 43335 0 4
69986: PUSH
69987: LD_INT 4
69989: ARRAY
69990: ST_TO_ADDR
// end ;
69991: LD_VAR 0 3
69995: RET
// export function PlayerSeeMe ( unit ) ; begin
69996: LD_INT 0
69998: PPUSH
// result := See ( your_side , unit ) ;
69999: LD_ADDR_VAR 0 2
70003: PUSH
70004: LD_OWVAR 2
70008: PPUSH
70009: LD_VAR 0 1
70013: PPUSH
70014: CALL_OW 292
70018: ST_TO_ADDR
// end ;
70019: LD_VAR 0 2
70023: RET
// export function ReverseDir ( unit ) ; begin
70024: LD_INT 0
70026: PPUSH
// if not unit then
70027: LD_VAR 0 1
70031: NOT
70032: IFFALSE 70036
// exit ;
70034: GO 70059
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
70036: LD_ADDR_VAR 0 2
70040: PUSH
70041: LD_VAR 0 1
70045: PPUSH
70046: CALL_OW 254
70050: PUSH
70051: LD_INT 3
70053: PLUS
70054: PUSH
70055: LD_INT 6
70057: MOD
70058: ST_TO_ADDR
// end ;
70059: LD_VAR 0 2
70063: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
70064: LD_INT 0
70066: PPUSH
70067: PPUSH
70068: PPUSH
70069: PPUSH
70070: PPUSH
// if not hexes then
70071: LD_VAR 0 2
70075: NOT
70076: IFFALSE 70080
// exit ;
70078: GO 70228
// dist := 9999 ;
70080: LD_ADDR_VAR 0 5
70084: PUSH
70085: LD_INT 9999
70087: ST_TO_ADDR
// for i = 1 to hexes do
70088: LD_ADDR_VAR 0 4
70092: PUSH
70093: DOUBLE
70094: LD_INT 1
70096: DEC
70097: ST_TO_ADDR
70098: LD_VAR 0 2
70102: PUSH
70103: FOR_TO
70104: IFFALSE 70216
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
70106: LD_VAR 0 1
70110: PPUSH
70111: LD_VAR 0 2
70115: PUSH
70116: LD_VAR 0 4
70120: ARRAY
70121: PUSH
70122: LD_INT 1
70124: ARRAY
70125: PPUSH
70126: LD_VAR 0 2
70130: PUSH
70131: LD_VAR 0 4
70135: ARRAY
70136: PUSH
70137: LD_INT 2
70139: ARRAY
70140: PPUSH
70141: CALL_OW 297
70145: PUSH
70146: LD_VAR 0 5
70150: LESS
70151: IFFALSE 70214
// begin hex := hexes [ i ] ;
70153: LD_ADDR_VAR 0 7
70157: PUSH
70158: LD_VAR 0 2
70162: PUSH
70163: LD_VAR 0 4
70167: ARRAY
70168: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70169: LD_ADDR_VAR 0 5
70173: PUSH
70174: LD_VAR 0 1
70178: PPUSH
70179: LD_VAR 0 2
70183: PUSH
70184: LD_VAR 0 4
70188: ARRAY
70189: PUSH
70190: LD_INT 1
70192: ARRAY
70193: PPUSH
70194: LD_VAR 0 2
70198: PUSH
70199: LD_VAR 0 4
70203: ARRAY
70204: PUSH
70205: LD_INT 2
70207: ARRAY
70208: PPUSH
70209: CALL_OW 297
70213: ST_TO_ADDR
// end ; end ;
70214: GO 70103
70216: POP
70217: POP
// result := hex ;
70218: LD_ADDR_VAR 0 3
70222: PUSH
70223: LD_VAR 0 7
70227: ST_TO_ADDR
// end ;
70228: LD_VAR 0 3
70232: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70233: LD_INT 0
70235: PPUSH
70236: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70237: LD_VAR 0 1
70241: NOT
70242: PUSH
70243: LD_VAR 0 1
70247: PUSH
70248: LD_INT 21
70250: PUSH
70251: LD_INT 2
70253: PUSH
70254: EMPTY
70255: LIST
70256: LIST
70257: PUSH
70258: LD_INT 23
70260: PUSH
70261: LD_INT 2
70263: PUSH
70264: EMPTY
70265: LIST
70266: LIST
70267: PUSH
70268: EMPTY
70269: LIST
70270: LIST
70271: PPUSH
70272: CALL_OW 69
70276: IN
70277: NOT
70278: OR
70279: IFFALSE 70283
// exit ;
70281: GO 70330
// for i = 1 to 3 do
70283: LD_ADDR_VAR 0 3
70287: PUSH
70288: DOUBLE
70289: LD_INT 1
70291: DEC
70292: ST_TO_ADDR
70293: LD_INT 3
70295: PUSH
70296: FOR_TO
70297: IFFALSE 70328
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70299: LD_VAR 0 1
70303: PPUSH
70304: CALL_OW 250
70308: PPUSH
70309: LD_VAR 0 1
70313: PPUSH
70314: CALL_OW 251
70318: PPUSH
70319: LD_INT 1
70321: PPUSH
70322: CALL_OW 453
70326: GO 70296
70328: POP
70329: POP
// end ;
70330: LD_VAR 0 2
70334: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70335: LD_INT 0
70337: PPUSH
70338: PPUSH
70339: PPUSH
70340: PPUSH
70341: PPUSH
70342: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
70343: LD_VAR 0 1
70347: NOT
70348: PUSH
70349: LD_VAR 0 2
70353: NOT
70354: OR
70355: PUSH
70356: LD_VAR 0 1
70360: PPUSH
70361: CALL_OW 314
70365: OR
70366: IFFALSE 70370
// exit ;
70368: GO 70811
// x := GetX ( enemy_unit ) ;
70370: LD_ADDR_VAR 0 7
70374: PUSH
70375: LD_VAR 0 2
70379: PPUSH
70380: CALL_OW 250
70384: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
70385: LD_ADDR_VAR 0 8
70389: PUSH
70390: LD_VAR 0 2
70394: PPUSH
70395: CALL_OW 251
70399: ST_TO_ADDR
// if not x or not y then
70400: LD_VAR 0 7
70404: NOT
70405: PUSH
70406: LD_VAR 0 8
70410: NOT
70411: OR
70412: IFFALSE 70416
// exit ;
70414: GO 70811
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
70416: LD_ADDR_VAR 0 6
70420: PUSH
70421: LD_VAR 0 7
70425: PPUSH
70426: LD_INT 0
70428: PPUSH
70429: LD_INT 4
70431: PPUSH
70432: CALL_OW 272
70436: PUSH
70437: LD_VAR 0 8
70441: PPUSH
70442: LD_INT 0
70444: PPUSH
70445: LD_INT 4
70447: PPUSH
70448: CALL_OW 273
70452: PUSH
70453: EMPTY
70454: LIST
70455: LIST
70456: PUSH
70457: LD_VAR 0 7
70461: PPUSH
70462: LD_INT 1
70464: PPUSH
70465: LD_INT 4
70467: PPUSH
70468: CALL_OW 272
70472: PUSH
70473: LD_VAR 0 8
70477: PPUSH
70478: LD_INT 1
70480: PPUSH
70481: LD_INT 4
70483: PPUSH
70484: CALL_OW 273
70488: PUSH
70489: EMPTY
70490: LIST
70491: LIST
70492: PUSH
70493: LD_VAR 0 7
70497: PPUSH
70498: LD_INT 2
70500: PPUSH
70501: LD_INT 4
70503: PPUSH
70504: CALL_OW 272
70508: PUSH
70509: LD_VAR 0 8
70513: PPUSH
70514: LD_INT 2
70516: PPUSH
70517: LD_INT 4
70519: PPUSH
70520: CALL_OW 273
70524: PUSH
70525: EMPTY
70526: LIST
70527: LIST
70528: PUSH
70529: LD_VAR 0 7
70533: PPUSH
70534: LD_INT 3
70536: PPUSH
70537: LD_INT 4
70539: PPUSH
70540: CALL_OW 272
70544: PUSH
70545: LD_VAR 0 8
70549: PPUSH
70550: LD_INT 3
70552: PPUSH
70553: LD_INT 4
70555: PPUSH
70556: CALL_OW 273
70560: PUSH
70561: EMPTY
70562: LIST
70563: LIST
70564: PUSH
70565: LD_VAR 0 7
70569: PPUSH
70570: LD_INT 4
70572: PPUSH
70573: LD_INT 4
70575: PPUSH
70576: CALL_OW 272
70580: PUSH
70581: LD_VAR 0 8
70585: PPUSH
70586: LD_INT 4
70588: PPUSH
70589: LD_INT 4
70591: PPUSH
70592: CALL_OW 273
70596: PUSH
70597: EMPTY
70598: LIST
70599: LIST
70600: PUSH
70601: LD_VAR 0 7
70605: PPUSH
70606: LD_INT 5
70608: PPUSH
70609: LD_INT 4
70611: PPUSH
70612: CALL_OW 272
70616: PUSH
70617: LD_VAR 0 8
70621: PPUSH
70622: LD_INT 5
70624: PPUSH
70625: LD_INT 4
70627: PPUSH
70628: CALL_OW 273
70632: PUSH
70633: EMPTY
70634: LIST
70635: LIST
70636: PUSH
70637: EMPTY
70638: LIST
70639: LIST
70640: LIST
70641: LIST
70642: LIST
70643: LIST
70644: ST_TO_ADDR
// for i = tmp downto 1 do
70645: LD_ADDR_VAR 0 4
70649: PUSH
70650: DOUBLE
70651: LD_VAR 0 6
70655: INC
70656: ST_TO_ADDR
70657: LD_INT 1
70659: PUSH
70660: FOR_DOWNTO
70661: IFFALSE 70762
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
70663: LD_VAR 0 6
70667: PUSH
70668: LD_VAR 0 4
70672: ARRAY
70673: PUSH
70674: LD_INT 1
70676: ARRAY
70677: PPUSH
70678: LD_VAR 0 6
70682: PUSH
70683: LD_VAR 0 4
70687: ARRAY
70688: PUSH
70689: LD_INT 2
70691: ARRAY
70692: PPUSH
70693: CALL_OW 488
70697: NOT
70698: PUSH
70699: LD_VAR 0 6
70703: PUSH
70704: LD_VAR 0 4
70708: ARRAY
70709: PUSH
70710: LD_INT 1
70712: ARRAY
70713: PPUSH
70714: LD_VAR 0 6
70718: PUSH
70719: LD_VAR 0 4
70723: ARRAY
70724: PUSH
70725: LD_INT 2
70727: ARRAY
70728: PPUSH
70729: CALL_OW 428
70733: PUSH
70734: LD_INT 0
70736: NONEQUAL
70737: OR
70738: IFFALSE 70760
// tmp := Delete ( tmp , i ) ;
70740: LD_ADDR_VAR 0 6
70744: PUSH
70745: LD_VAR 0 6
70749: PPUSH
70750: LD_VAR 0 4
70754: PPUSH
70755: CALL_OW 3
70759: ST_TO_ADDR
70760: GO 70660
70762: POP
70763: POP
// j := GetClosestHex ( unit , tmp ) ;
70764: LD_ADDR_VAR 0 5
70768: PUSH
70769: LD_VAR 0 1
70773: PPUSH
70774: LD_VAR 0 6
70778: PPUSH
70779: CALL 70064 0 2
70783: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70784: LD_VAR 0 1
70788: PPUSH
70789: LD_VAR 0 5
70793: PUSH
70794: LD_INT 1
70796: ARRAY
70797: PPUSH
70798: LD_VAR 0 5
70802: PUSH
70803: LD_INT 2
70805: ARRAY
70806: PPUSH
70807: CALL_OW 111
// end ;
70811: LD_VAR 0 3
70815: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70816: LD_INT 0
70818: PPUSH
70819: PPUSH
70820: PPUSH
// uc_side = 0 ;
70821: LD_ADDR_OWVAR 20
70825: PUSH
70826: LD_INT 0
70828: ST_TO_ADDR
// uc_nation = 0 ;
70829: LD_ADDR_OWVAR 21
70833: PUSH
70834: LD_INT 0
70836: ST_TO_ADDR
// InitHc_All ( ) ;
70837: CALL_OW 584
// InitVc ;
70841: CALL_OW 20
// if mastodonts then
70845: LD_VAR 0 6
70849: IFFALSE 70916
// for i = 1 to mastodonts do
70851: LD_ADDR_VAR 0 11
70855: PUSH
70856: DOUBLE
70857: LD_INT 1
70859: DEC
70860: ST_TO_ADDR
70861: LD_VAR 0 6
70865: PUSH
70866: FOR_TO
70867: IFFALSE 70914
// begin vc_chassis := 31 ;
70869: LD_ADDR_OWVAR 37
70873: PUSH
70874: LD_INT 31
70876: ST_TO_ADDR
// vc_control := control_rider ;
70877: LD_ADDR_OWVAR 38
70881: PUSH
70882: LD_INT 4
70884: ST_TO_ADDR
// animal := CreateVehicle ;
70885: LD_ADDR_VAR 0 12
70889: PUSH
70890: CALL_OW 45
70894: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70895: LD_VAR 0 12
70899: PPUSH
70900: LD_VAR 0 8
70904: PPUSH
70905: LD_INT 0
70907: PPUSH
70908: CALL 73104 0 3
// end ;
70912: GO 70866
70914: POP
70915: POP
// if horses then
70916: LD_VAR 0 5
70920: IFFALSE 70987
// for i = 1 to horses do
70922: LD_ADDR_VAR 0 11
70926: PUSH
70927: DOUBLE
70928: LD_INT 1
70930: DEC
70931: ST_TO_ADDR
70932: LD_VAR 0 5
70936: PUSH
70937: FOR_TO
70938: IFFALSE 70985
// begin hc_class := 21 ;
70940: LD_ADDR_OWVAR 28
70944: PUSH
70945: LD_INT 21
70947: ST_TO_ADDR
// hc_gallery :=  ;
70948: LD_ADDR_OWVAR 33
70952: PUSH
70953: LD_STRING 
70955: ST_TO_ADDR
// animal := CreateHuman ;
70956: LD_ADDR_VAR 0 12
70960: PUSH
70961: CALL_OW 44
70965: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70966: LD_VAR 0 12
70970: PPUSH
70971: LD_VAR 0 8
70975: PPUSH
70976: LD_INT 0
70978: PPUSH
70979: CALL 73104 0 3
// end ;
70983: GO 70937
70985: POP
70986: POP
// if birds then
70987: LD_VAR 0 1
70991: IFFALSE 71058
// for i = 1 to birds do
70993: LD_ADDR_VAR 0 11
70997: PUSH
70998: DOUBLE
70999: LD_INT 1
71001: DEC
71002: ST_TO_ADDR
71003: LD_VAR 0 1
71007: PUSH
71008: FOR_TO
71009: IFFALSE 71056
// begin hc_class = 18 ;
71011: LD_ADDR_OWVAR 28
71015: PUSH
71016: LD_INT 18
71018: ST_TO_ADDR
// hc_gallery =  ;
71019: LD_ADDR_OWVAR 33
71023: PUSH
71024: LD_STRING 
71026: ST_TO_ADDR
// animal := CreateHuman ;
71027: LD_ADDR_VAR 0 12
71031: PUSH
71032: CALL_OW 44
71036: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71037: LD_VAR 0 12
71041: PPUSH
71042: LD_VAR 0 8
71046: PPUSH
71047: LD_INT 0
71049: PPUSH
71050: CALL 73104 0 3
// end ;
71054: GO 71008
71056: POP
71057: POP
// if tigers then
71058: LD_VAR 0 2
71062: IFFALSE 71146
// for i = 1 to tigers do
71064: LD_ADDR_VAR 0 11
71068: PUSH
71069: DOUBLE
71070: LD_INT 1
71072: DEC
71073: ST_TO_ADDR
71074: LD_VAR 0 2
71078: PUSH
71079: FOR_TO
71080: IFFALSE 71144
// begin hc_class = class_tiger ;
71082: LD_ADDR_OWVAR 28
71086: PUSH
71087: LD_INT 14
71089: ST_TO_ADDR
// hc_gallery =  ;
71090: LD_ADDR_OWVAR 33
71094: PUSH
71095: LD_STRING 
71097: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71098: LD_ADDR_OWVAR 35
71102: PUSH
71103: LD_INT 7
71105: NEG
71106: PPUSH
71107: LD_INT 7
71109: PPUSH
71110: CALL_OW 12
71114: ST_TO_ADDR
// animal := CreateHuman ;
71115: LD_ADDR_VAR 0 12
71119: PUSH
71120: CALL_OW 44
71124: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71125: LD_VAR 0 12
71129: PPUSH
71130: LD_VAR 0 8
71134: PPUSH
71135: LD_INT 0
71137: PPUSH
71138: CALL 73104 0 3
// end ;
71142: GO 71079
71144: POP
71145: POP
// if apemans then
71146: LD_VAR 0 3
71150: IFFALSE 71273
// for i = 1 to apemans do
71152: LD_ADDR_VAR 0 11
71156: PUSH
71157: DOUBLE
71158: LD_INT 1
71160: DEC
71161: ST_TO_ADDR
71162: LD_VAR 0 3
71166: PUSH
71167: FOR_TO
71168: IFFALSE 71271
// begin hc_class = class_apeman ;
71170: LD_ADDR_OWVAR 28
71174: PUSH
71175: LD_INT 12
71177: ST_TO_ADDR
// hc_gallery =  ;
71178: LD_ADDR_OWVAR 33
71182: PUSH
71183: LD_STRING 
71185: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71186: LD_ADDR_OWVAR 35
71190: PUSH
71191: LD_INT 2
71193: NEG
71194: PPUSH
71195: LD_INT 2
71197: PPUSH
71198: CALL_OW 12
71202: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71203: LD_ADDR_OWVAR 31
71207: PUSH
71208: LD_INT 1
71210: PPUSH
71211: LD_INT 3
71213: PPUSH
71214: CALL_OW 12
71218: PUSH
71219: LD_INT 1
71221: PPUSH
71222: LD_INT 3
71224: PPUSH
71225: CALL_OW 12
71229: PUSH
71230: LD_INT 0
71232: PUSH
71233: LD_INT 0
71235: PUSH
71236: EMPTY
71237: LIST
71238: LIST
71239: LIST
71240: LIST
71241: ST_TO_ADDR
// animal := CreateHuman ;
71242: LD_ADDR_VAR 0 12
71246: PUSH
71247: CALL_OW 44
71251: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71252: LD_VAR 0 12
71256: PPUSH
71257: LD_VAR 0 8
71261: PPUSH
71262: LD_INT 0
71264: PPUSH
71265: CALL 73104 0 3
// end ;
71269: GO 71167
71271: POP
71272: POP
// if enchidnas then
71273: LD_VAR 0 4
71277: IFFALSE 71344
// for i = 1 to enchidnas do
71279: LD_ADDR_VAR 0 11
71283: PUSH
71284: DOUBLE
71285: LD_INT 1
71287: DEC
71288: ST_TO_ADDR
71289: LD_VAR 0 4
71293: PUSH
71294: FOR_TO
71295: IFFALSE 71342
// begin hc_class = 13 ;
71297: LD_ADDR_OWVAR 28
71301: PUSH
71302: LD_INT 13
71304: ST_TO_ADDR
// hc_gallery =  ;
71305: LD_ADDR_OWVAR 33
71309: PUSH
71310: LD_STRING 
71312: ST_TO_ADDR
// animal := CreateHuman ;
71313: LD_ADDR_VAR 0 12
71317: PUSH
71318: CALL_OW 44
71322: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71323: LD_VAR 0 12
71327: PPUSH
71328: LD_VAR 0 8
71332: PPUSH
71333: LD_INT 0
71335: PPUSH
71336: CALL 73104 0 3
// end ;
71340: GO 71294
71342: POP
71343: POP
// if fishes then
71344: LD_VAR 0 7
71348: IFFALSE 71415
// for i = 1 to fishes do
71350: LD_ADDR_VAR 0 11
71354: PUSH
71355: DOUBLE
71356: LD_INT 1
71358: DEC
71359: ST_TO_ADDR
71360: LD_VAR 0 7
71364: PUSH
71365: FOR_TO
71366: IFFALSE 71413
// begin hc_class = 20 ;
71368: LD_ADDR_OWVAR 28
71372: PUSH
71373: LD_INT 20
71375: ST_TO_ADDR
// hc_gallery =  ;
71376: LD_ADDR_OWVAR 33
71380: PUSH
71381: LD_STRING 
71383: ST_TO_ADDR
// animal := CreateHuman ;
71384: LD_ADDR_VAR 0 12
71388: PUSH
71389: CALL_OW 44
71393: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71394: LD_VAR 0 12
71398: PPUSH
71399: LD_VAR 0 9
71403: PPUSH
71404: LD_INT 0
71406: PPUSH
71407: CALL 73104 0 3
// end ;
71411: GO 71365
71413: POP
71414: POP
// end ;
71415: LD_VAR 0 10
71419: RET
// export function WantHeal ( sci , unit ) ; begin
71420: LD_INT 0
71422: PPUSH
// if GetTaskList ( sci ) > 0 then
71423: LD_VAR 0 1
71427: PPUSH
71428: CALL_OW 437
71432: PUSH
71433: LD_INT 0
71435: GREATER
71436: IFFALSE 71506
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71438: LD_VAR 0 1
71442: PPUSH
71443: CALL_OW 437
71447: PUSH
71448: LD_INT 1
71450: ARRAY
71451: PUSH
71452: LD_INT 1
71454: ARRAY
71455: PUSH
71456: LD_STRING l
71458: EQUAL
71459: PUSH
71460: LD_VAR 0 1
71464: PPUSH
71465: CALL_OW 437
71469: PUSH
71470: LD_INT 1
71472: ARRAY
71473: PUSH
71474: LD_INT 4
71476: ARRAY
71477: PUSH
71478: LD_VAR 0 2
71482: EQUAL
71483: AND
71484: IFFALSE 71496
// result := true else
71486: LD_ADDR_VAR 0 3
71490: PUSH
71491: LD_INT 1
71493: ST_TO_ADDR
71494: GO 71504
// result := false ;
71496: LD_ADDR_VAR 0 3
71500: PUSH
71501: LD_INT 0
71503: ST_TO_ADDR
// end else
71504: GO 71514
// result := false ;
71506: LD_ADDR_VAR 0 3
71510: PUSH
71511: LD_INT 0
71513: ST_TO_ADDR
// end ;
71514: LD_VAR 0 3
71518: RET
// export function HealTarget ( sci ) ; begin
71519: LD_INT 0
71521: PPUSH
// if not sci then
71522: LD_VAR 0 1
71526: NOT
71527: IFFALSE 71531
// exit ;
71529: GO 71596
// result := 0 ;
71531: LD_ADDR_VAR 0 2
71535: PUSH
71536: LD_INT 0
71538: ST_TO_ADDR
// if GetTaskList ( sci ) then
71539: LD_VAR 0 1
71543: PPUSH
71544: CALL_OW 437
71548: IFFALSE 71596
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71550: LD_VAR 0 1
71554: PPUSH
71555: CALL_OW 437
71559: PUSH
71560: LD_INT 1
71562: ARRAY
71563: PUSH
71564: LD_INT 1
71566: ARRAY
71567: PUSH
71568: LD_STRING l
71570: EQUAL
71571: IFFALSE 71596
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71573: LD_ADDR_VAR 0 2
71577: PUSH
71578: LD_VAR 0 1
71582: PPUSH
71583: CALL_OW 437
71587: PUSH
71588: LD_INT 1
71590: ARRAY
71591: PUSH
71592: LD_INT 4
71594: ARRAY
71595: ST_TO_ADDR
// end ;
71596: LD_VAR 0 2
71600: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71601: LD_INT 0
71603: PPUSH
71604: PPUSH
71605: PPUSH
71606: PPUSH
// if not base_units then
71607: LD_VAR 0 1
71611: NOT
71612: IFFALSE 71616
// exit ;
71614: GO 71703
// result := false ;
71616: LD_ADDR_VAR 0 2
71620: PUSH
71621: LD_INT 0
71623: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71624: LD_ADDR_VAR 0 5
71628: PUSH
71629: LD_VAR 0 1
71633: PPUSH
71634: LD_INT 21
71636: PUSH
71637: LD_INT 3
71639: PUSH
71640: EMPTY
71641: LIST
71642: LIST
71643: PPUSH
71644: CALL_OW 72
71648: ST_TO_ADDR
// if not tmp then
71649: LD_VAR 0 5
71653: NOT
71654: IFFALSE 71658
// exit ;
71656: GO 71703
// for i in tmp do
71658: LD_ADDR_VAR 0 3
71662: PUSH
71663: LD_VAR 0 5
71667: PUSH
71668: FOR_IN
71669: IFFALSE 71701
// begin result := EnemyInRange ( i , 22 ) ;
71671: LD_ADDR_VAR 0 2
71675: PUSH
71676: LD_VAR 0 3
71680: PPUSH
71681: LD_INT 22
71683: PPUSH
71684: CALL 69939 0 2
71688: ST_TO_ADDR
// if result then
71689: LD_VAR 0 2
71693: IFFALSE 71699
// exit ;
71695: POP
71696: POP
71697: GO 71703
// end ;
71699: GO 71668
71701: POP
71702: POP
// end ;
71703: LD_VAR 0 2
71707: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
71708: LD_INT 0
71710: PPUSH
71711: PPUSH
// if not units then
71712: LD_VAR 0 1
71716: NOT
71717: IFFALSE 71721
// exit ;
71719: GO 71791
// result := [ ] ;
71721: LD_ADDR_VAR 0 3
71725: PUSH
71726: EMPTY
71727: ST_TO_ADDR
// for i in units do
71728: LD_ADDR_VAR 0 4
71732: PUSH
71733: LD_VAR 0 1
71737: PUSH
71738: FOR_IN
71739: IFFALSE 71789
// if GetTag ( i ) = tag then
71741: LD_VAR 0 4
71745: PPUSH
71746: CALL_OW 110
71750: PUSH
71751: LD_VAR 0 2
71755: EQUAL
71756: IFFALSE 71787
// result := Replace ( result , result + 1 , i ) ;
71758: LD_ADDR_VAR 0 3
71762: PUSH
71763: LD_VAR 0 3
71767: PPUSH
71768: LD_VAR 0 3
71772: PUSH
71773: LD_INT 1
71775: PLUS
71776: PPUSH
71777: LD_VAR 0 4
71781: PPUSH
71782: CALL_OW 1
71786: ST_TO_ADDR
71787: GO 71738
71789: POP
71790: POP
// end ;
71791: LD_VAR 0 3
71795: RET
// export function IsDriver ( un ) ; begin
71796: LD_INT 0
71798: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71799: LD_ADDR_VAR 0 2
71803: PUSH
71804: LD_VAR 0 1
71808: PUSH
71809: LD_INT 55
71811: PUSH
71812: EMPTY
71813: LIST
71814: PPUSH
71815: CALL_OW 69
71819: IN
71820: ST_TO_ADDR
// end ;
71821: LD_VAR 0 2
71825: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71826: LD_INT 0
71828: PPUSH
71829: PPUSH
// list := [ ] ;
71830: LD_ADDR_VAR 0 5
71834: PUSH
71835: EMPTY
71836: ST_TO_ADDR
// case d of 0 :
71837: LD_VAR 0 3
71841: PUSH
71842: LD_INT 0
71844: DOUBLE
71845: EQUAL
71846: IFTRUE 71850
71848: GO 71983
71850: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71851: LD_ADDR_VAR 0 5
71855: PUSH
71856: LD_VAR 0 1
71860: PUSH
71861: LD_INT 4
71863: MINUS
71864: PUSH
71865: LD_VAR 0 2
71869: PUSH
71870: LD_INT 4
71872: MINUS
71873: PUSH
71874: LD_INT 2
71876: PUSH
71877: EMPTY
71878: LIST
71879: LIST
71880: LIST
71881: PUSH
71882: LD_VAR 0 1
71886: PUSH
71887: LD_INT 3
71889: MINUS
71890: PUSH
71891: LD_VAR 0 2
71895: PUSH
71896: LD_INT 1
71898: PUSH
71899: EMPTY
71900: LIST
71901: LIST
71902: LIST
71903: PUSH
71904: LD_VAR 0 1
71908: PUSH
71909: LD_INT 4
71911: PLUS
71912: PUSH
71913: LD_VAR 0 2
71917: PUSH
71918: LD_INT 4
71920: PUSH
71921: EMPTY
71922: LIST
71923: LIST
71924: LIST
71925: PUSH
71926: LD_VAR 0 1
71930: PUSH
71931: LD_INT 3
71933: PLUS
71934: PUSH
71935: LD_VAR 0 2
71939: PUSH
71940: LD_INT 3
71942: PLUS
71943: PUSH
71944: LD_INT 5
71946: PUSH
71947: EMPTY
71948: LIST
71949: LIST
71950: LIST
71951: PUSH
71952: LD_VAR 0 1
71956: PUSH
71957: LD_VAR 0 2
71961: PUSH
71962: LD_INT 4
71964: PLUS
71965: PUSH
71966: LD_INT 0
71968: PUSH
71969: EMPTY
71970: LIST
71971: LIST
71972: LIST
71973: PUSH
71974: EMPTY
71975: LIST
71976: LIST
71977: LIST
71978: LIST
71979: LIST
71980: ST_TO_ADDR
// end ; 1 :
71981: GO 72681
71983: LD_INT 1
71985: DOUBLE
71986: EQUAL
71987: IFTRUE 71991
71989: GO 72124
71991: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71992: LD_ADDR_VAR 0 5
71996: PUSH
71997: LD_VAR 0 1
72001: PUSH
72002: LD_VAR 0 2
72006: PUSH
72007: LD_INT 4
72009: MINUS
72010: PUSH
72011: LD_INT 3
72013: PUSH
72014: EMPTY
72015: LIST
72016: LIST
72017: LIST
72018: PUSH
72019: LD_VAR 0 1
72023: PUSH
72024: LD_INT 3
72026: MINUS
72027: PUSH
72028: LD_VAR 0 2
72032: PUSH
72033: LD_INT 3
72035: MINUS
72036: PUSH
72037: LD_INT 2
72039: PUSH
72040: EMPTY
72041: LIST
72042: LIST
72043: LIST
72044: PUSH
72045: LD_VAR 0 1
72049: PUSH
72050: LD_INT 4
72052: MINUS
72053: PUSH
72054: LD_VAR 0 2
72058: PUSH
72059: LD_INT 1
72061: PUSH
72062: EMPTY
72063: LIST
72064: LIST
72065: LIST
72066: PUSH
72067: LD_VAR 0 1
72071: PUSH
72072: LD_VAR 0 2
72076: PUSH
72077: LD_INT 3
72079: PLUS
72080: PUSH
72081: LD_INT 0
72083: PUSH
72084: EMPTY
72085: LIST
72086: LIST
72087: LIST
72088: PUSH
72089: LD_VAR 0 1
72093: PUSH
72094: LD_INT 4
72096: PLUS
72097: PUSH
72098: LD_VAR 0 2
72102: PUSH
72103: LD_INT 4
72105: PLUS
72106: PUSH
72107: LD_INT 5
72109: PUSH
72110: EMPTY
72111: LIST
72112: LIST
72113: LIST
72114: PUSH
72115: EMPTY
72116: LIST
72117: LIST
72118: LIST
72119: LIST
72120: LIST
72121: ST_TO_ADDR
// end ; 2 :
72122: GO 72681
72124: LD_INT 2
72126: DOUBLE
72127: EQUAL
72128: IFTRUE 72132
72130: GO 72261
72132: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72133: LD_ADDR_VAR 0 5
72137: PUSH
72138: LD_VAR 0 1
72142: PUSH
72143: LD_VAR 0 2
72147: PUSH
72148: LD_INT 3
72150: MINUS
72151: PUSH
72152: LD_INT 3
72154: PUSH
72155: EMPTY
72156: LIST
72157: LIST
72158: LIST
72159: PUSH
72160: LD_VAR 0 1
72164: PUSH
72165: LD_INT 4
72167: PLUS
72168: PUSH
72169: LD_VAR 0 2
72173: PUSH
72174: LD_INT 4
72176: PUSH
72177: EMPTY
72178: LIST
72179: LIST
72180: LIST
72181: PUSH
72182: LD_VAR 0 1
72186: PUSH
72187: LD_VAR 0 2
72191: PUSH
72192: LD_INT 4
72194: PLUS
72195: PUSH
72196: LD_INT 0
72198: PUSH
72199: EMPTY
72200: LIST
72201: LIST
72202: LIST
72203: PUSH
72204: LD_VAR 0 1
72208: PUSH
72209: LD_INT 3
72211: MINUS
72212: PUSH
72213: LD_VAR 0 2
72217: PUSH
72218: LD_INT 1
72220: PUSH
72221: EMPTY
72222: LIST
72223: LIST
72224: LIST
72225: PUSH
72226: LD_VAR 0 1
72230: PUSH
72231: LD_INT 4
72233: MINUS
72234: PUSH
72235: LD_VAR 0 2
72239: PUSH
72240: LD_INT 4
72242: MINUS
72243: PUSH
72244: LD_INT 2
72246: PUSH
72247: EMPTY
72248: LIST
72249: LIST
72250: LIST
72251: PUSH
72252: EMPTY
72253: LIST
72254: LIST
72255: LIST
72256: LIST
72257: LIST
72258: ST_TO_ADDR
// end ; 3 :
72259: GO 72681
72261: LD_INT 3
72263: DOUBLE
72264: EQUAL
72265: IFTRUE 72269
72267: GO 72402
72269: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72270: LD_ADDR_VAR 0 5
72274: PUSH
72275: LD_VAR 0 1
72279: PUSH
72280: LD_INT 3
72282: PLUS
72283: PUSH
72284: LD_VAR 0 2
72288: PUSH
72289: LD_INT 4
72291: PUSH
72292: EMPTY
72293: LIST
72294: LIST
72295: LIST
72296: PUSH
72297: LD_VAR 0 1
72301: PUSH
72302: LD_INT 4
72304: PLUS
72305: PUSH
72306: LD_VAR 0 2
72310: PUSH
72311: LD_INT 4
72313: PLUS
72314: PUSH
72315: LD_INT 5
72317: PUSH
72318: EMPTY
72319: LIST
72320: LIST
72321: LIST
72322: PUSH
72323: LD_VAR 0 1
72327: PUSH
72328: LD_INT 4
72330: MINUS
72331: PUSH
72332: LD_VAR 0 2
72336: PUSH
72337: LD_INT 1
72339: PUSH
72340: EMPTY
72341: LIST
72342: LIST
72343: LIST
72344: PUSH
72345: LD_VAR 0 1
72349: PUSH
72350: LD_VAR 0 2
72354: PUSH
72355: LD_INT 4
72357: MINUS
72358: PUSH
72359: LD_INT 3
72361: PUSH
72362: EMPTY
72363: LIST
72364: LIST
72365: LIST
72366: PUSH
72367: LD_VAR 0 1
72371: PUSH
72372: LD_INT 3
72374: MINUS
72375: PUSH
72376: LD_VAR 0 2
72380: PUSH
72381: LD_INT 3
72383: MINUS
72384: PUSH
72385: LD_INT 2
72387: PUSH
72388: EMPTY
72389: LIST
72390: LIST
72391: LIST
72392: PUSH
72393: EMPTY
72394: LIST
72395: LIST
72396: LIST
72397: LIST
72398: LIST
72399: ST_TO_ADDR
// end ; 4 :
72400: GO 72681
72402: LD_INT 4
72404: DOUBLE
72405: EQUAL
72406: IFTRUE 72410
72408: GO 72543
72410: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72411: LD_ADDR_VAR 0 5
72415: PUSH
72416: LD_VAR 0 1
72420: PUSH
72421: LD_VAR 0 2
72425: PUSH
72426: LD_INT 4
72428: PLUS
72429: PUSH
72430: LD_INT 0
72432: PUSH
72433: EMPTY
72434: LIST
72435: LIST
72436: LIST
72437: PUSH
72438: LD_VAR 0 1
72442: PUSH
72443: LD_INT 3
72445: PLUS
72446: PUSH
72447: LD_VAR 0 2
72451: PUSH
72452: LD_INT 3
72454: PLUS
72455: PUSH
72456: LD_INT 5
72458: PUSH
72459: EMPTY
72460: LIST
72461: LIST
72462: LIST
72463: PUSH
72464: LD_VAR 0 1
72468: PUSH
72469: LD_INT 4
72471: PLUS
72472: PUSH
72473: LD_VAR 0 2
72477: PUSH
72478: LD_INT 4
72480: PUSH
72481: EMPTY
72482: LIST
72483: LIST
72484: LIST
72485: PUSH
72486: LD_VAR 0 1
72490: PUSH
72491: LD_VAR 0 2
72495: PUSH
72496: LD_INT 3
72498: MINUS
72499: PUSH
72500: LD_INT 3
72502: PUSH
72503: EMPTY
72504: LIST
72505: LIST
72506: LIST
72507: PUSH
72508: LD_VAR 0 1
72512: PUSH
72513: LD_INT 4
72515: MINUS
72516: PUSH
72517: LD_VAR 0 2
72521: PUSH
72522: LD_INT 4
72524: MINUS
72525: PUSH
72526: LD_INT 2
72528: PUSH
72529: EMPTY
72530: LIST
72531: LIST
72532: LIST
72533: PUSH
72534: EMPTY
72535: LIST
72536: LIST
72537: LIST
72538: LIST
72539: LIST
72540: ST_TO_ADDR
// end ; 5 :
72541: GO 72681
72543: LD_INT 5
72545: DOUBLE
72546: EQUAL
72547: IFTRUE 72551
72549: GO 72680
72551: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72552: LD_ADDR_VAR 0 5
72556: PUSH
72557: LD_VAR 0 1
72561: PUSH
72562: LD_INT 4
72564: MINUS
72565: PUSH
72566: LD_VAR 0 2
72570: PUSH
72571: LD_INT 1
72573: PUSH
72574: EMPTY
72575: LIST
72576: LIST
72577: LIST
72578: PUSH
72579: LD_VAR 0 1
72583: PUSH
72584: LD_VAR 0 2
72588: PUSH
72589: LD_INT 4
72591: MINUS
72592: PUSH
72593: LD_INT 3
72595: PUSH
72596: EMPTY
72597: LIST
72598: LIST
72599: LIST
72600: PUSH
72601: LD_VAR 0 1
72605: PUSH
72606: LD_INT 4
72608: PLUS
72609: PUSH
72610: LD_VAR 0 2
72614: PUSH
72615: LD_INT 4
72617: PLUS
72618: PUSH
72619: LD_INT 5
72621: PUSH
72622: EMPTY
72623: LIST
72624: LIST
72625: LIST
72626: PUSH
72627: LD_VAR 0 1
72631: PUSH
72632: LD_INT 3
72634: PLUS
72635: PUSH
72636: LD_VAR 0 2
72640: PUSH
72641: LD_INT 4
72643: PUSH
72644: EMPTY
72645: LIST
72646: LIST
72647: LIST
72648: PUSH
72649: LD_VAR 0 1
72653: PUSH
72654: LD_VAR 0 2
72658: PUSH
72659: LD_INT 3
72661: PLUS
72662: PUSH
72663: LD_INT 0
72665: PUSH
72666: EMPTY
72667: LIST
72668: LIST
72669: LIST
72670: PUSH
72671: EMPTY
72672: LIST
72673: LIST
72674: LIST
72675: LIST
72676: LIST
72677: ST_TO_ADDR
// end ; end ;
72678: GO 72681
72680: POP
// result := list ;
72681: LD_ADDR_VAR 0 4
72685: PUSH
72686: LD_VAR 0 5
72690: ST_TO_ADDR
// end ;
72691: LD_VAR 0 4
72695: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72696: LD_INT 0
72698: PPUSH
72699: PPUSH
72700: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72701: LD_VAR 0 1
72705: NOT
72706: PUSH
72707: LD_VAR 0 2
72711: PUSH
72712: LD_INT 1
72714: PUSH
72715: LD_INT 2
72717: PUSH
72718: LD_INT 3
72720: PUSH
72721: LD_INT 4
72723: PUSH
72724: EMPTY
72725: LIST
72726: LIST
72727: LIST
72728: LIST
72729: IN
72730: NOT
72731: OR
72732: IFFALSE 72736
// exit ;
72734: GO 72828
// tmp := [ ] ;
72736: LD_ADDR_VAR 0 5
72740: PUSH
72741: EMPTY
72742: ST_TO_ADDR
// for i in units do
72743: LD_ADDR_VAR 0 4
72747: PUSH
72748: LD_VAR 0 1
72752: PUSH
72753: FOR_IN
72754: IFFALSE 72797
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
72756: LD_ADDR_VAR 0 5
72760: PUSH
72761: LD_VAR 0 5
72765: PPUSH
72766: LD_VAR 0 5
72770: PUSH
72771: LD_INT 1
72773: PLUS
72774: PPUSH
72775: LD_VAR 0 4
72779: PPUSH
72780: LD_VAR 0 2
72784: PPUSH
72785: CALL_OW 259
72789: PPUSH
72790: CALL_OW 2
72794: ST_TO_ADDR
72795: GO 72753
72797: POP
72798: POP
// if not tmp then
72799: LD_VAR 0 5
72803: NOT
72804: IFFALSE 72808
// exit ;
72806: GO 72828
// result := SortListByListDesc ( units , tmp ) ;
72808: LD_ADDR_VAR 0 3
72812: PUSH
72813: LD_VAR 0 1
72817: PPUSH
72818: LD_VAR 0 5
72822: PPUSH
72823: CALL_OW 77
72827: ST_TO_ADDR
// end ;
72828: LD_VAR 0 3
72832: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72833: LD_INT 0
72835: PPUSH
72836: PPUSH
72837: PPUSH
// result := false ;
72838: LD_ADDR_VAR 0 3
72842: PUSH
72843: LD_INT 0
72845: ST_TO_ADDR
// x := GetX ( building ) ;
72846: LD_ADDR_VAR 0 4
72850: PUSH
72851: LD_VAR 0 2
72855: PPUSH
72856: CALL_OW 250
72860: ST_TO_ADDR
// y := GetY ( building ) ;
72861: LD_ADDR_VAR 0 5
72865: PUSH
72866: LD_VAR 0 2
72870: PPUSH
72871: CALL_OW 251
72875: ST_TO_ADDR
// if not building or not x or not y then
72876: LD_VAR 0 2
72880: NOT
72881: PUSH
72882: LD_VAR 0 4
72886: NOT
72887: OR
72888: PUSH
72889: LD_VAR 0 5
72893: NOT
72894: OR
72895: IFFALSE 72899
// exit ;
72897: GO 72991
// if GetTaskList ( unit ) then
72899: LD_VAR 0 1
72903: PPUSH
72904: CALL_OW 437
72908: IFFALSE 72991
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72910: LD_STRING e
72912: PUSH
72913: LD_VAR 0 1
72917: PPUSH
72918: CALL_OW 437
72922: PUSH
72923: LD_INT 1
72925: ARRAY
72926: PUSH
72927: LD_INT 1
72929: ARRAY
72930: EQUAL
72931: PUSH
72932: LD_VAR 0 4
72936: PUSH
72937: LD_VAR 0 1
72941: PPUSH
72942: CALL_OW 437
72946: PUSH
72947: LD_INT 1
72949: ARRAY
72950: PUSH
72951: LD_INT 2
72953: ARRAY
72954: EQUAL
72955: AND
72956: PUSH
72957: LD_VAR 0 5
72961: PUSH
72962: LD_VAR 0 1
72966: PPUSH
72967: CALL_OW 437
72971: PUSH
72972: LD_INT 1
72974: ARRAY
72975: PUSH
72976: LD_INT 3
72978: ARRAY
72979: EQUAL
72980: AND
72981: IFFALSE 72991
// result := true end ;
72983: LD_ADDR_VAR 0 3
72987: PUSH
72988: LD_INT 1
72990: ST_TO_ADDR
// end ;
72991: LD_VAR 0 3
72995: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72996: LD_INT 0
72998: PPUSH
// result := false ;
72999: LD_ADDR_VAR 0 4
73003: PUSH
73004: LD_INT 0
73006: ST_TO_ADDR
// if GetTaskList ( unit ) then
73007: LD_VAR 0 1
73011: PPUSH
73012: CALL_OW 437
73016: IFFALSE 73099
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73018: LD_STRING M
73020: PUSH
73021: LD_VAR 0 1
73025: PPUSH
73026: CALL_OW 437
73030: PUSH
73031: LD_INT 1
73033: ARRAY
73034: PUSH
73035: LD_INT 1
73037: ARRAY
73038: EQUAL
73039: PUSH
73040: LD_VAR 0 2
73044: PUSH
73045: LD_VAR 0 1
73049: PPUSH
73050: CALL_OW 437
73054: PUSH
73055: LD_INT 1
73057: ARRAY
73058: PUSH
73059: LD_INT 2
73061: ARRAY
73062: EQUAL
73063: AND
73064: PUSH
73065: LD_VAR 0 3
73069: PUSH
73070: LD_VAR 0 1
73074: PPUSH
73075: CALL_OW 437
73079: PUSH
73080: LD_INT 1
73082: ARRAY
73083: PUSH
73084: LD_INT 3
73086: ARRAY
73087: EQUAL
73088: AND
73089: IFFALSE 73099
// result := true ;
73091: LD_ADDR_VAR 0 4
73095: PUSH
73096: LD_INT 1
73098: ST_TO_ADDR
// end ; end ;
73099: LD_VAR 0 4
73103: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73104: LD_INT 0
73106: PPUSH
73107: PPUSH
73108: PPUSH
73109: PPUSH
// if not unit or not area then
73110: LD_VAR 0 1
73114: NOT
73115: PUSH
73116: LD_VAR 0 2
73120: NOT
73121: OR
73122: IFFALSE 73126
// exit ;
73124: GO 73290
// tmp := AreaToList ( area , i ) ;
73126: LD_ADDR_VAR 0 6
73130: PUSH
73131: LD_VAR 0 2
73135: PPUSH
73136: LD_VAR 0 5
73140: PPUSH
73141: CALL_OW 517
73145: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73146: LD_ADDR_VAR 0 5
73150: PUSH
73151: DOUBLE
73152: LD_INT 1
73154: DEC
73155: ST_TO_ADDR
73156: LD_VAR 0 6
73160: PUSH
73161: LD_INT 1
73163: ARRAY
73164: PUSH
73165: FOR_TO
73166: IFFALSE 73288
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73168: LD_ADDR_VAR 0 7
73172: PUSH
73173: LD_VAR 0 6
73177: PUSH
73178: LD_INT 1
73180: ARRAY
73181: PUSH
73182: LD_VAR 0 5
73186: ARRAY
73187: PUSH
73188: LD_VAR 0 6
73192: PUSH
73193: LD_INT 2
73195: ARRAY
73196: PUSH
73197: LD_VAR 0 5
73201: ARRAY
73202: PUSH
73203: EMPTY
73204: LIST
73205: LIST
73206: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
73207: LD_VAR 0 7
73211: PUSH
73212: LD_INT 1
73214: ARRAY
73215: PPUSH
73216: LD_VAR 0 7
73220: PUSH
73221: LD_INT 2
73223: ARRAY
73224: PPUSH
73225: CALL_OW 428
73229: PUSH
73230: LD_INT 0
73232: EQUAL
73233: IFFALSE 73286
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73235: LD_VAR 0 1
73239: PPUSH
73240: LD_VAR 0 7
73244: PUSH
73245: LD_INT 1
73247: ARRAY
73248: PPUSH
73249: LD_VAR 0 7
73253: PUSH
73254: LD_INT 2
73256: ARRAY
73257: PPUSH
73258: LD_VAR 0 3
73262: PPUSH
73263: CALL_OW 48
// result := IsPlaced ( unit ) ;
73267: LD_ADDR_VAR 0 4
73271: PUSH
73272: LD_VAR 0 1
73276: PPUSH
73277: CALL_OW 305
73281: ST_TO_ADDR
// exit ;
73282: POP
73283: POP
73284: GO 73290
// end ; end ;
73286: GO 73165
73288: POP
73289: POP
// end ;
73290: LD_VAR 0 4
73294: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73295: LD_INT 0
73297: PPUSH
73298: PPUSH
73299: PPUSH
// if not side or side > 8 then
73300: LD_VAR 0 1
73304: NOT
73305: PUSH
73306: LD_VAR 0 1
73310: PUSH
73311: LD_INT 8
73313: GREATER
73314: OR
73315: IFFALSE 73319
// exit ;
73317: GO 73506
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73319: LD_ADDR_VAR 0 4
73323: PUSH
73324: LD_INT 22
73326: PUSH
73327: LD_VAR 0 1
73331: PUSH
73332: EMPTY
73333: LIST
73334: LIST
73335: PUSH
73336: LD_INT 21
73338: PUSH
73339: LD_INT 3
73341: PUSH
73342: EMPTY
73343: LIST
73344: LIST
73345: PUSH
73346: EMPTY
73347: LIST
73348: LIST
73349: PPUSH
73350: CALL_OW 69
73354: ST_TO_ADDR
// if not tmp then
73355: LD_VAR 0 4
73359: NOT
73360: IFFALSE 73364
// exit ;
73362: GO 73506
// enable_addtolog := true ;
73364: LD_ADDR_OWVAR 81
73368: PUSH
73369: LD_INT 1
73371: ST_TO_ADDR
// AddToLog ( [ ) ;
73372: LD_STRING [
73374: PPUSH
73375: CALL_OW 561
// for i in tmp do
73379: LD_ADDR_VAR 0 3
73383: PUSH
73384: LD_VAR 0 4
73388: PUSH
73389: FOR_IN
73390: IFFALSE 73497
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73392: LD_STRING [
73394: PUSH
73395: LD_VAR 0 3
73399: PPUSH
73400: CALL_OW 266
73404: STR
73405: PUSH
73406: LD_STRING , 
73408: STR
73409: PUSH
73410: LD_VAR 0 3
73414: PPUSH
73415: CALL_OW 250
73419: STR
73420: PUSH
73421: LD_STRING , 
73423: STR
73424: PUSH
73425: LD_VAR 0 3
73429: PPUSH
73430: CALL_OW 251
73434: STR
73435: PUSH
73436: LD_STRING , 
73438: STR
73439: PUSH
73440: LD_VAR 0 3
73444: PPUSH
73445: CALL_OW 254
73449: STR
73450: PUSH
73451: LD_STRING , 
73453: STR
73454: PUSH
73455: LD_VAR 0 3
73459: PPUSH
73460: LD_INT 1
73462: PPUSH
73463: CALL_OW 268
73467: STR
73468: PUSH
73469: LD_STRING , 
73471: STR
73472: PUSH
73473: LD_VAR 0 3
73477: PPUSH
73478: LD_INT 2
73480: PPUSH
73481: CALL_OW 268
73485: STR
73486: PUSH
73487: LD_STRING ],
73489: STR
73490: PPUSH
73491: CALL_OW 561
// end ;
73495: GO 73389
73497: POP
73498: POP
// AddToLog ( ]; ) ;
73499: LD_STRING ];
73501: PPUSH
73502: CALL_OW 561
// end ;
73506: LD_VAR 0 2
73510: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73511: LD_INT 0
73513: PPUSH
73514: PPUSH
73515: PPUSH
73516: PPUSH
73517: PPUSH
// if not area or not rate or not max then
73518: LD_VAR 0 1
73522: NOT
73523: PUSH
73524: LD_VAR 0 2
73528: NOT
73529: OR
73530: PUSH
73531: LD_VAR 0 4
73535: NOT
73536: OR
73537: IFFALSE 73541
// exit ;
73539: GO 73733
// while 1 do
73541: LD_INT 1
73543: IFFALSE 73733
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73545: LD_ADDR_VAR 0 9
73549: PUSH
73550: LD_VAR 0 1
73554: PPUSH
73555: LD_INT 1
73557: PPUSH
73558: CALL_OW 287
73562: PUSH
73563: LD_INT 10
73565: MUL
73566: ST_TO_ADDR
// r := rate / 10 ;
73567: LD_ADDR_VAR 0 7
73571: PUSH
73572: LD_VAR 0 2
73576: PUSH
73577: LD_INT 10
73579: DIVREAL
73580: ST_TO_ADDR
// time := 1 1$00 ;
73581: LD_ADDR_VAR 0 8
73585: PUSH
73586: LD_INT 2100
73588: ST_TO_ADDR
// if amount < min then
73589: LD_VAR 0 9
73593: PUSH
73594: LD_VAR 0 3
73598: LESS
73599: IFFALSE 73617
// r := r * 2 else
73601: LD_ADDR_VAR 0 7
73605: PUSH
73606: LD_VAR 0 7
73610: PUSH
73611: LD_INT 2
73613: MUL
73614: ST_TO_ADDR
73615: GO 73643
// if amount > max then
73617: LD_VAR 0 9
73621: PUSH
73622: LD_VAR 0 4
73626: GREATER
73627: IFFALSE 73643
// r := r / 2 ;
73629: LD_ADDR_VAR 0 7
73633: PUSH
73634: LD_VAR 0 7
73638: PUSH
73639: LD_INT 2
73641: DIVREAL
73642: ST_TO_ADDR
// time := time / r ;
73643: LD_ADDR_VAR 0 8
73647: PUSH
73648: LD_VAR 0 8
73652: PUSH
73653: LD_VAR 0 7
73657: DIVREAL
73658: ST_TO_ADDR
// if time < 0 then
73659: LD_VAR 0 8
73663: PUSH
73664: LD_INT 0
73666: LESS
73667: IFFALSE 73684
// time := time * - 1 ;
73669: LD_ADDR_VAR 0 8
73673: PUSH
73674: LD_VAR 0 8
73678: PUSH
73679: LD_INT 1
73681: NEG
73682: MUL
73683: ST_TO_ADDR
// wait ( time ) ;
73684: LD_VAR 0 8
73688: PPUSH
73689: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
73693: LD_INT 35
73695: PPUSH
73696: LD_INT 875
73698: PPUSH
73699: CALL_OW 12
73703: PPUSH
73704: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73708: LD_INT 1
73710: PPUSH
73711: LD_INT 5
73713: PPUSH
73714: CALL_OW 12
73718: PPUSH
73719: LD_VAR 0 1
73723: PPUSH
73724: LD_INT 1
73726: PPUSH
73727: CALL_OW 55
// end ;
73731: GO 73541
// end ;
73733: LD_VAR 0 5
73737: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73738: LD_INT 0
73740: PPUSH
73741: PPUSH
73742: PPUSH
73743: PPUSH
73744: PPUSH
73745: PPUSH
73746: PPUSH
73747: PPUSH
// if not turrets or not factories then
73748: LD_VAR 0 1
73752: NOT
73753: PUSH
73754: LD_VAR 0 2
73758: NOT
73759: OR
73760: IFFALSE 73764
// exit ;
73762: GO 74071
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73764: LD_ADDR_VAR 0 10
73768: PUSH
73769: LD_INT 5
73771: PUSH
73772: LD_INT 6
73774: PUSH
73775: EMPTY
73776: LIST
73777: LIST
73778: PUSH
73779: LD_INT 2
73781: PUSH
73782: LD_INT 4
73784: PUSH
73785: EMPTY
73786: LIST
73787: LIST
73788: PUSH
73789: LD_INT 3
73791: PUSH
73792: LD_INT 5
73794: PUSH
73795: EMPTY
73796: LIST
73797: LIST
73798: PUSH
73799: EMPTY
73800: LIST
73801: LIST
73802: LIST
73803: PUSH
73804: LD_INT 24
73806: PUSH
73807: LD_INT 25
73809: PUSH
73810: EMPTY
73811: LIST
73812: LIST
73813: PUSH
73814: LD_INT 23
73816: PUSH
73817: LD_INT 27
73819: PUSH
73820: EMPTY
73821: LIST
73822: LIST
73823: PUSH
73824: EMPTY
73825: LIST
73826: LIST
73827: PUSH
73828: LD_INT 42
73830: PUSH
73831: LD_INT 43
73833: PUSH
73834: EMPTY
73835: LIST
73836: LIST
73837: PUSH
73838: LD_INT 44
73840: PUSH
73841: LD_INT 46
73843: PUSH
73844: EMPTY
73845: LIST
73846: LIST
73847: PUSH
73848: LD_INT 45
73850: PUSH
73851: LD_INT 47
73853: PUSH
73854: EMPTY
73855: LIST
73856: LIST
73857: PUSH
73858: EMPTY
73859: LIST
73860: LIST
73861: LIST
73862: PUSH
73863: EMPTY
73864: LIST
73865: LIST
73866: LIST
73867: ST_TO_ADDR
// result := [ ] ;
73868: LD_ADDR_VAR 0 3
73872: PUSH
73873: EMPTY
73874: ST_TO_ADDR
// for i in turrets do
73875: LD_ADDR_VAR 0 4
73879: PUSH
73880: LD_VAR 0 1
73884: PUSH
73885: FOR_IN
73886: IFFALSE 74069
// begin nat := GetNation ( i ) ;
73888: LD_ADDR_VAR 0 7
73892: PUSH
73893: LD_VAR 0 4
73897: PPUSH
73898: CALL_OW 248
73902: ST_TO_ADDR
// weapon := 0 ;
73903: LD_ADDR_VAR 0 8
73907: PUSH
73908: LD_INT 0
73910: ST_TO_ADDR
// if not nat then
73911: LD_VAR 0 7
73915: NOT
73916: IFFALSE 73920
// continue ;
73918: GO 73885
// for j in list [ nat ] do
73920: LD_ADDR_VAR 0 5
73924: PUSH
73925: LD_VAR 0 10
73929: PUSH
73930: LD_VAR 0 7
73934: ARRAY
73935: PUSH
73936: FOR_IN
73937: IFFALSE 73978
// if GetBWeapon ( i ) = j [ 1 ] then
73939: LD_VAR 0 4
73943: PPUSH
73944: CALL_OW 269
73948: PUSH
73949: LD_VAR 0 5
73953: PUSH
73954: LD_INT 1
73956: ARRAY
73957: EQUAL
73958: IFFALSE 73976
// begin weapon := j [ 2 ] ;
73960: LD_ADDR_VAR 0 8
73964: PUSH
73965: LD_VAR 0 5
73969: PUSH
73970: LD_INT 2
73972: ARRAY
73973: ST_TO_ADDR
// break ;
73974: GO 73978
// end ;
73976: GO 73936
73978: POP
73979: POP
// if not weapon then
73980: LD_VAR 0 8
73984: NOT
73985: IFFALSE 73989
// continue ;
73987: GO 73885
// for k in factories do
73989: LD_ADDR_VAR 0 6
73993: PUSH
73994: LD_VAR 0 2
73998: PUSH
73999: FOR_IN
74000: IFFALSE 74065
// begin weapons := AvailableWeaponList ( k ) ;
74002: LD_ADDR_VAR 0 9
74006: PUSH
74007: LD_VAR 0 6
74011: PPUSH
74012: CALL_OW 478
74016: ST_TO_ADDR
// if not weapons then
74017: LD_VAR 0 9
74021: NOT
74022: IFFALSE 74026
// continue ;
74024: GO 73999
// if weapon in weapons then
74026: LD_VAR 0 8
74030: PUSH
74031: LD_VAR 0 9
74035: IN
74036: IFFALSE 74063
// begin result := [ i , weapon ] ;
74038: LD_ADDR_VAR 0 3
74042: PUSH
74043: LD_VAR 0 4
74047: PUSH
74048: LD_VAR 0 8
74052: PUSH
74053: EMPTY
74054: LIST
74055: LIST
74056: ST_TO_ADDR
// exit ;
74057: POP
74058: POP
74059: POP
74060: POP
74061: GO 74071
// end ; end ;
74063: GO 73999
74065: POP
74066: POP
// end ;
74067: GO 73885
74069: POP
74070: POP
// end ;
74071: LD_VAR 0 3
74075: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
74076: LD_INT 0
74078: PPUSH
// if not side or side > 8 then
74079: LD_VAR 0 3
74083: NOT
74084: PUSH
74085: LD_VAR 0 3
74089: PUSH
74090: LD_INT 8
74092: GREATER
74093: OR
74094: IFFALSE 74098
// exit ;
74096: GO 74157
// if not range then
74098: LD_VAR 0 4
74102: NOT
74103: IFFALSE 74114
// range := - 12 ;
74105: LD_ADDR_VAR 0 4
74109: PUSH
74110: LD_INT 12
74112: NEG
74113: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74114: LD_VAR 0 1
74118: PPUSH
74119: LD_VAR 0 2
74123: PPUSH
74124: LD_VAR 0 3
74128: PPUSH
74129: LD_VAR 0 4
74133: PPUSH
74134: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74138: LD_VAR 0 1
74142: PPUSH
74143: LD_VAR 0 2
74147: PPUSH
74148: LD_VAR 0 3
74152: PPUSH
74153: CALL_OW 331
// end ;
74157: LD_VAR 0 5
74161: RET
// export function Video ( mode ) ; begin
74162: LD_INT 0
74164: PPUSH
// ingame_video = mode ;
74165: LD_ADDR_OWVAR 52
74169: PUSH
74170: LD_VAR 0 1
74174: ST_TO_ADDR
// interface_hidden = mode ;
74175: LD_ADDR_OWVAR 54
74179: PUSH
74180: LD_VAR 0 1
74184: ST_TO_ADDR
// end ;
74185: LD_VAR 0 2
74189: RET
// export function Join ( array , element ) ; begin
74190: LD_INT 0
74192: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74193: LD_ADDR_VAR 0 3
74197: PUSH
74198: LD_VAR 0 1
74202: PPUSH
74203: LD_VAR 0 1
74207: PUSH
74208: LD_INT 1
74210: PLUS
74211: PPUSH
74212: LD_VAR 0 2
74216: PPUSH
74217: CALL_OW 1
74221: ST_TO_ADDR
// end ;
74222: LD_VAR 0 3
74226: RET
// export function JoinUnion ( array , element ) ; begin
74227: LD_INT 0
74229: PPUSH
// result := array union element ;
74230: LD_ADDR_VAR 0 3
74234: PUSH
74235: LD_VAR 0 1
74239: PUSH
74240: LD_VAR 0 2
74244: UNION
74245: ST_TO_ADDR
// end ;
74246: LD_VAR 0 3
74250: RET
// export function GetBehemoths ( side ) ; begin
74251: LD_INT 0
74253: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
74254: LD_ADDR_VAR 0 2
74258: PUSH
74259: LD_INT 22
74261: PUSH
74262: LD_VAR 0 1
74266: PUSH
74267: EMPTY
74268: LIST
74269: LIST
74270: PUSH
74271: LD_INT 31
74273: PUSH
74274: LD_INT 25
74276: PUSH
74277: EMPTY
74278: LIST
74279: LIST
74280: PUSH
74281: EMPTY
74282: LIST
74283: LIST
74284: PPUSH
74285: CALL_OW 69
74289: ST_TO_ADDR
// end ;
74290: LD_VAR 0 2
74294: RET
// export function Shuffle ( array ) ; var i , index ; begin
74295: LD_INT 0
74297: PPUSH
74298: PPUSH
74299: PPUSH
// result := [ ] ;
74300: LD_ADDR_VAR 0 2
74304: PUSH
74305: EMPTY
74306: ST_TO_ADDR
// if not array then
74307: LD_VAR 0 1
74311: NOT
74312: IFFALSE 74316
// exit ;
74314: GO 74415
// Randomize ;
74316: CALL_OW 10
// for i = array downto 1 do
74320: LD_ADDR_VAR 0 3
74324: PUSH
74325: DOUBLE
74326: LD_VAR 0 1
74330: INC
74331: ST_TO_ADDR
74332: LD_INT 1
74334: PUSH
74335: FOR_DOWNTO
74336: IFFALSE 74413
// begin index := rand ( 1 , array ) ;
74338: LD_ADDR_VAR 0 4
74342: PUSH
74343: LD_INT 1
74345: PPUSH
74346: LD_VAR 0 1
74350: PPUSH
74351: CALL_OW 12
74355: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74356: LD_ADDR_VAR 0 2
74360: PUSH
74361: LD_VAR 0 2
74365: PPUSH
74366: LD_VAR 0 2
74370: PUSH
74371: LD_INT 1
74373: PLUS
74374: PPUSH
74375: LD_VAR 0 1
74379: PUSH
74380: LD_VAR 0 4
74384: ARRAY
74385: PPUSH
74386: CALL_OW 2
74390: ST_TO_ADDR
// array := Delete ( array , index ) ;
74391: LD_ADDR_VAR 0 1
74395: PUSH
74396: LD_VAR 0 1
74400: PPUSH
74401: LD_VAR 0 4
74405: PPUSH
74406: CALL_OW 3
74410: ST_TO_ADDR
// end ;
74411: GO 74335
74413: POP
74414: POP
// end ;
74415: LD_VAR 0 2
74419: RET
// export function GetBaseMaterials ( base ) ; begin
74420: LD_INT 0
74422: PPUSH
// result := [ 0 , 0 , 0 ] ;
74423: LD_ADDR_VAR 0 2
74427: PUSH
74428: LD_INT 0
74430: PUSH
74431: LD_INT 0
74433: PUSH
74434: LD_INT 0
74436: PUSH
74437: EMPTY
74438: LIST
74439: LIST
74440: LIST
74441: ST_TO_ADDR
// if not base then
74442: LD_VAR 0 1
74446: NOT
74447: IFFALSE 74451
// exit ;
74449: GO 74500
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74451: LD_ADDR_VAR 0 2
74455: PUSH
74456: LD_VAR 0 1
74460: PPUSH
74461: LD_INT 1
74463: PPUSH
74464: CALL_OW 275
74468: PUSH
74469: LD_VAR 0 1
74473: PPUSH
74474: LD_INT 2
74476: PPUSH
74477: CALL_OW 275
74481: PUSH
74482: LD_VAR 0 1
74486: PPUSH
74487: LD_INT 3
74489: PPUSH
74490: CALL_OW 275
74494: PUSH
74495: EMPTY
74496: LIST
74497: LIST
74498: LIST
74499: ST_TO_ADDR
// end ;
74500: LD_VAR 0 2
74504: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74505: LD_INT 0
74507: PPUSH
74508: PPUSH
// result := array ;
74509: LD_ADDR_VAR 0 3
74513: PUSH
74514: LD_VAR 0 1
74518: ST_TO_ADDR
// if size > 0 then
74519: LD_VAR 0 2
74523: PUSH
74524: LD_INT 0
74526: GREATER
74527: IFFALSE 74573
// for i := array downto size do
74529: LD_ADDR_VAR 0 4
74533: PUSH
74534: DOUBLE
74535: LD_VAR 0 1
74539: INC
74540: ST_TO_ADDR
74541: LD_VAR 0 2
74545: PUSH
74546: FOR_DOWNTO
74547: IFFALSE 74571
// result := Delete ( result , result ) ;
74549: LD_ADDR_VAR 0 3
74553: PUSH
74554: LD_VAR 0 3
74558: PPUSH
74559: LD_VAR 0 3
74563: PPUSH
74564: CALL_OW 3
74568: ST_TO_ADDR
74569: GO 74546
74571: POP
74572: POP
// end ;
74573: LD_VAR 0 3
74577: RET
// export function ComExit ( unit ) ; var tmp ; begin
74578: LD_INT 0
74580: PPUSH
74581: PPUSH
// if not IsInUnit ( unit ) then
74582: LD_VAR 0 1
74586: PPUSH
74587: CALL_OW 310
74591: NOT
74592: IFFALSE 74596
// exit ;
74594: GO 74656
// tmp := IsInUnit ( unit ) ;
74596: LD_ADDR_VAR 0 3
74600: PUSH
74601: LD_VAR 0 1
74605: PPUSH
74606: CALL_OW 310
74610: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74611: LD_VAR 0 3
74615: PPUSH
74616: CALL_OW 247
74620: PUSH
74621: LD_INT 2
74623: EQUAL
74624: IFFALSE 74637
// ComExitVehicle ( unit ) else
74626: LD_VAR 0 1
74630: PPUSH
74631: CALL_OW 121
74635: GO 74646
// ComExitBuilding ( unit ) ;
74637: LD_VAR 0 1
74641: PPUSH
74642: CALL_OW 122
// result := tmp ;
74646: LD_ADDR_VAR 0 2
74650: PUSH
74651: LD_VAR 0 3
74655: ST_TO_ADDR
// end ;
74656: LD_VAR 0 2
74660: RET
// export function ComExitAll ( units ) ; var i ; begin
74661: LD_INT 0
74663: PPUSH
74664: PPUSH
// if not units then
74665: LD_VAR 0 1
74669: NOT
74670: IFFALSE 74674
// exit ;
74672: GO 74700
// for i in units do
74674: LD_ADDR_VAR 0 3
74678: PUSH
74679: LD_VAR 0 1
74683: PUSH
74684: FOR_IN
74685: IFFALSE 74698
// ComExit ( i ) ;
74687: LD_VAR 0 3
74691: PPUSH
74692: CALL 74578 0 1
74696: GO 74684
74698: POP
74699: POP
// end ;
74700: LD_VAR 0 2
74704: RET
// export function ResetHc ; begin
74705: LD_INT 0
74707: PPUSH
// InitHc ;
74708: CALL_OW 19
// hc_importance := 0 ;
74712: LD_ADDR_OWVAR 32
74716: PUSH
74717: LD_INT 0
74719: ST_TO_ADDR
// end ;
74720: LD_VAR 0 1
74724: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74725: LD_INT 0
74727: PPUSH
74728: PPUSH
74729: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74730: LD_ADDR_VAR 0 6
74734: PUSH
74735: LD_VAR 0 1
74739: PUSH
74740: LD_VAR 0 3
74744: PLUS
74745: PUSH
74746: LD_INT 2
74748: DIV
74749: ST_TO_ADDR
// if _x < 0 then
74750: LD_VAR 0 6
74754: PUSH
74755: LD_INT 0
74757: LESS
74758: IFFALSE 74775
// _x := _x * - 1 ;
74760: LD_ADDR_VAR 0 6
74764: PUSH
74765: LD_VAR 0 6
74769: PUSH
74770: LD_INT 1
74772: NEG
74773: MUL
74774: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74775: LD_ADDR_VAR 0 7
74779: PUSH
74780: LD_VAR 0 2
74784: PUSH
74785: LD_VAR 0 4
74789: PLUS
74790: PUSH
74791: LD_INT 2
74793: DIV
74794: ST_TO_ADDR
// if _y < 0 then
74795: LD_VAR 0 7
74799: PUSH
74800: LD_INT 0
74802: LESS
74803: IFFALSE 74820
// _y := _y * - 1 ;
74805: LD_ADDR_VAR 0 7
74809: PUSH
74810: LD_VAR 0 7
74814: PUSH
74815: LD_INT 1
74817: NEG
74818: MUL
74819: ST_TO_ADDR
// result := [ _x , _y ] ;
74820: LD_ADDR_VAR 0 5
74824: PUSH
74825: LD_VAR 0 6
74829: PUSH
74830: LD_VAR 0 7
74834: PUSH
74835: EMPTY
74836: LIST
74837: LIST
74838: ST_TO_ADDR
// end ;
74839: LD_VAR 0 5
74843: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74844: LD_INT 0
74846: PPUSH
74847: PPUSH
74848: PPUSH
74849: PPUSH
// task := GetTaskList ( unit ) ;
74850: LD_ADDR_VAR 0 7
74854: PUSH
74855: LD_VAR 0 1
74859: PPUSH
74860: CALL_OW 437
74864: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74865: LD_VAR 0 7
74869: NOT
74870: PUSH
74871: LD_VAR 0 1
74875: PPUSH
74876: LD_VAR 0 2
74880: PPUSH
74881: CALL_OW 308
74885: NOT
74886: AND
74887: IFFALSE 74891
// exit ;
74889: GO 75009
// if IsInArea ( unit , area ) then
74891: LD_VAR 0 1
74895: PPUSH
74896: LD_VAR 0 2
74900: PPUSH
74901: CALL_OW 308
74905: IFFALSE 74923
// begin ComMoveToArea ( unit , goAway ) ;
74907: LD_VAR 0 1
74911: PPUSH
74912: LD_VAR 0 3
74916: PPUSH
74917: CALL_OW 113
// exit ;
74921: GO 75009
// end ; if task [ 1 ] [ 1 ] <> M then
74923: LD_VAR 0 7
74927: PUSH
74928: LD_INT 1
74930: ARRAY
74931: PUSH
74932: LD_INT 1
74934: ARRAY
74935: PUSH
74936: LD_STRING M
74938: NONEQUAL
74939: IFFALSE 74943
// exit ;
74941: GO 75009
// x := task [ 1 ] [ 2 ] ;
74943: LD_ADDR_VAR 0 5
74947: PUSH
74948: LD_VAR 0 7
74952: PUSH
74953: LD_INT 1
74955: ARRAY
74956: PUSH
74957: LD_INT 2
74959: ARRAY
74960: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74961: LD_ADDR_VAR 0 6
74965: PUSH
74966: LD_VAR 0 7
74970: PUSH
74971: LD_INT 1
74973: ARRAY
74974: PUSH
74975: LD_INT 3
74977: ARRAY
74978: ST_TO_ADDR
// if InArea ( x , y , area ) then
74979: LD_VAR 0 5
74983: PPUSH
74984: LD_VAR 0 6
74988: PPUSH
74989: LD_VAR 0 2
74993: PPUSH
74994: CALL_OW 309
74998: IFFALSE 75009
// ComStop ( unit ) ;
75000: LD_VAR 0 1
75004: PPUSH
75005: CALL_OW 141
// end ;
75009: LD_VAR 0 4
75013: RET
// export function Abs ( value ) ; begin
75014: LD_INT 0
75016: PPUSH
// result := value ;
75017: LD_ADDR_VAR 0 2
75021: PUSH
75022: LD_VAR 0 1
75026: ST_TO_ADDR
// if value < 0 then
75027: LD_VAR 0 1
75031: PUSH
75032: LD_INT 0
75034: LESS
75035: IFFALSE 75052
// result := value * - 1 ;
75037: LD_ADDR_VAR 0 2
75041: PUSH
75042: LD_VAR 0 1
75046: PUSH
75047: LD_INT 1
75049: NEG
75050: MUL
75051: ST_TO_ADDR
// end ;
75052: LD_VAR 0 2
75056: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
75057: LD_INT 0
75059: PPUSH
75060: PPUSH
75061: PPUSH
75062: PPUSH
75063: PPUSH
75064: PPUSH
75065: PPUSH
75066: PPUSH
// if not unit or not building then
75067: LD_VAR 0 1
75071: NOT
75072: PUSH
75073: LD_VAR 0 2
75077: NOT
75078: OR
75079: IFFALSE 75083
// exit ;
75081: GO 75309
// x := GetX ( building ) ;
75083: LD_ADDR_VAR 0 4
75087: PUSH
75088: LD_VAR 0 2
75092: PPUSH
75093: CALL_OW 250
75097: ST_TO_ADDR
// y := GetY ( building ) ;
75098: LD_ADDR_VAR 0 6
75102: PUSH
75103: LD_VAR 0 2
75107: PPUSH
75108: CALL_OW 251
75112: ST_TO_ADDR
// d := GetDir ( building ) ;
75113: LD_ADDR_VAR 0 8
75117: PUSH
75118: LD_VAR 0 2
75122: PPUSH
75123: CALL_OW 254
75127: ST_TO_ADDR
// r := 4 ;
75128: LD_ADDR_VAR 0 9
75132: PUSH
75133: LD_INT 4
75135: ST_TO_ADDR
// for i := 1 to 5 do
75136: LD_ADDR_VAR 0 10
75140: PUSH
75141: DOUBLE
75142: LD_INT 1
75144: DEC
75145: ST_TO_ADDR
75146: LD_INT 5
75148: PUSH
75149: FOR_TO
75150: IFFALSE 75307
// begin _x := ShiftX ( x , d , r + i ) ;
75152: LD_ADDR_VAR 0 5
75156: PUSH
75157: LD_VAR 0 4
75161: PPUSH
75162: LD_VAR 0 8
75166: PPUSH
75167: LD_VAR 0 9
75171: PUSH
75172: LD_VAR 0 10
75176: PLUS
75177: PPUSH
75178: CALL_OW 272
75182: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75183: LD_ADDR_VAR 0 7
75187: PUSH
75188: LD_VAR 0 6
75192: PPUSH
75193: LD_VAR 0 8
75197: PPUSH
75198: LD_VAR 0 9
75202: PUSH
75203: LD_VAR 0 10
75207: PLUS
75208: PPUSH
75209: CALL_OW 273
75213: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75214: LD_VAR 0 5
75218: PPUSH
75219: LD_VAR 0 7
75223: PPUSH
75224: CALL_OW 488
75228: PUSH
75229: LD_VAR 0 5
75233: PPUSH
75234: LD_VAR 0 7
75238: PPUSH
75239: CALL_OW 428
75243: PPUSH
75244: CALL_OW 247
75248: PUSH
75249: LD_INT 3
75251: PUSH
75252: LD_INT 2
75254: PUSH
75255: EMPTY
75256: LIST
75257: LIST
75258: IN
75259: NOT
75260: AND
75261: IFFALSE 75305
// begin ComMoveXY ( unit , _x , _y ) ;
75263: LD_VAR 0 1
75267: PPUSH
75268: LD_VAR 0 5
75272: PPUSH
75273: LD_VAR 0 7
75277: PPUSH
75278: CALL_OW 111
// result := [ _x , _y ] ;
75282: LD_ADDR_VAR 0 3
75286: PUSH
75287: LD_VAR 0 5
75291: PUSH
75292: LD_VAR 0 7
75296: PUSH
75297: EMPTY
75298: LIST
75299: LIST
75300: ST_TO_ADDR
// exit ;
75301: POP
75302: POP
75303: GO 75309
// end ; end ;
75305: GO 75149
75307: POP
75308: POP
// end ;
75309: LD_VAR 0 3
75313: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75314: LD_INT 0
75316: PPUSH
75317: PPUSH
75318: PPUSH
// result := 0 ;
75319: LD_ADDR_VAR 0 3
75323: PUSH
75324: LD_INT 0
75326: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
75327: LD_VAR 0 1
75331: PUSH
75332: LD_INT 0
75334: LESS
75335: PUSH
75336: LD_VAR 0 1
75340: PUSH
75341: LD_INT 8
75343: GREATER
75344: OR
75345: PUSH
75346: LD_VAR 0 2
75350: PUSH
75351: LD_INT 0
75353: LESS
75354: OR
75355: PUSH
75356: LD_VAR 0 2
75360: PUSH
75361: LD_INT 8
75363: GREATER
75364: OR
75365: IFFALSE 75369
// exit ;
75367: GO 75444
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75369: LD_ADDR_VAR 0 4
75373: PUSH
75374: LD_INT 22
75376: PUSH
75377: LD_VAR 0 2
75381: PUSH
75382: EMPTY
75383: LIST
75384: LIST
75385: PPUSH
75386: CALL_OW 69
75390: PUSH
75391: FOR_IN
75392: IFFALSE 75442
// begin un := UnitShoot ( i ) ;
75394: LD_ADDR_VAR 0 5
75398: PUSH
75399: LD_VAR 0 4
75403: PPUSH
75404: CALL_OW 504
75408: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75409: LD_VAR 0 5
75413: PPUSH
75414: CALL_OW 255
75418: PUSH
75419: LD_VAR 0 1
75423: EQUAL
75424: IFFALSE 75440
// begin result := un ;
75426: LD_ADDR_VAR 0 3
75430: PUSH
75431: LD_VAR 0 5
75435: ST_TO_ADDR
// exit ;
75436: POP
75437: POP
75438: GO 75444
// end ; end ;
75440: GO 75391
75442: POP
75443: POP
// end ;
75444: LD_VAR 0 3
75448: RET
// export function GetCargoBay ( units ) ; begin
75449: LD_INT 0
75451: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75452: LD_ADDR_VAR 0 2
75456: PUSH
75457: LD_VAR 0 1
75461: PPUSH
75462: LD_INT 2
75464: PUSH
75465: LD_INT 34
75467: PUSH
75468: LD_INT 12
75470: PUSH
75471: EMPTY
75472: LIST
75473: LIST
75474: PUSH
75475: LD_INT 34
75477: PUSH
75478: LD_INT 51
75480: PUSH
75481: EMPTY
75482: LIST
75483: LIST
75484: PUSH
75485: LD_INT 34
75487: PUSH
75488: LD_INT 32
75490: PUSH
75491: EMPTY
75492: LIST
75493: LIST
75494: PUSH
75495: LD_INT 34
75497: PUSH
75498: LD_EXP 53
75502: PUSH
75503: EMPTY
75504: LIST
75505: LIST
75506: PUSH
75507: EMPTY
75508: LIST
75509: LIST
75510: LIST
75511: LIST
75512: LIST
75513: PPUSH
75514: CALL_OW 72
75518: ST_TO_ADDR
// end ;
75519: LD_VAR 0 2
75523: RET
// export function Negate ( value ) ; begin
75524: LD_INT 0
75526: PPUSH
// result := not value ;
75527: LD_ADDR_VAR 0 2
75531: PUSH
75532: LD_VAR 0 1
75536: NOT
75537: ST_TO_ADDR
// end ;
75538: LD_VAR 0 2
75542: RET
// export function Inc ( value ) ; begin
75543: LD_INT 0
75545: PPUSH
// result := value + 1 ;
75546: LD_ADDR_VAR 0 2
75550: PUSH
75551: LD_VAR 0 1
75555: PUSH
75556: LD_INT 1
75558: PLUS
75559: ST_TO_ADDR
// end ;
75560: LD_VAR 0 2
75564: RET
// export function Dec ( value ) ; begin
75565: LD_INT 0
75567: PPUSH
// result := value - 1 ;
75568: LD_ADDR_VAR 0 2
75572: PUSH
75573: LD_VAR 0 1
75577: PUSH
75578: LD_INT 1
75580: MINUS
75581: ST_TO_ADDR
// end ;
75582: LD_VAR 0 2
75586: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
75587: LD_INT 0
75589: PPUSH
75590: PPUSH
75591: PPUSH
75592: PPUSH
75593: PPUSH
75594: PPUSH
75595: PPUSH
75596: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
75597: LD_VAR 0 1
75601: PPUSH
75602: LD_VAR 0 2
75606: PPUSH
75607: CALL_OW 488
75611: NOT
75612: PUSH
75613: LD_VAR 0 3
75617: PPUSH
75618: LD_VAR 0 4
75622: PPUSH
75623: CALL_OW 488
75627: NOT
75628: OR
75629: IFFALSE 75642
// begin result := - 1 ;
75631: LD_ADDR_VAR 0 5
75635: PUSH
75636: LD_INT 1
75638: NEG
75639: ST_TO_ADDR
// exit ;
75640: GO 75877
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
75642: LD_ADDR_VAR 0 12
75646: PUSH
75647: LD_VAR 0 1
75651: PPUSH
75652: LD_VAR 0 2
75656: PPUSH
75657: LD_VAR 0 3
75661: PPUSH
75662: LD_VAR 0 4
75666: PPUSH
75667: CALL 74725 0 4
75671: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
75672: LD_ADDR_VAR 0 11
75676: PUSH
75677: LD_VAR 0 1
75681: PPUSH
75682: LD_VAR 0 2
75686: PPUSH
75687: LD_VAR 0 12
75691: PUSH
75692: LD_INT 1
75694: ARRAY
75695: PPUSH
75696: LD_VAR 0 12
75700: PUSH
75701: LD_INT 2
75703: ARRAY
75704: PPUSH
75705: CALL_OW 298
75709: ST_TO_ADDR
// distance := 9999 ;
75710: LD_ADDR_VAR 0 10
75714: PUSH
75715: LD_INT 9999
75717: ST_TO_ADDR
// for i := 0 to 5 do
75718: LD_ADDR_VAR 0 6
75722: PUSH
75723: DOUBLE
75724: LD_INT 0
75726: DEC
75727: ST_TO_ADDR
75728: LD_INT 5
75730: PUSH
75731: FOR_TO
75732: IFFALSE 75875
// begin _x := ShiftX ( x1 , i , centerDist ) ;
75734: LD_ADDR_VAR 0 7
75738: PUSH
75739: LD_VAR 0 1
75743: PPUSH
75744: LD_VAR 0 6
75748: PPUSH
75749: LD_VAR 0 11
75753: PPUSH
75754: CALL_OW 272
75758: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
75759: LD_ADDR_VAR 0 8
75763: PUSH
75764: LD_VAR 0 2
75768: PPUSH
75769: LD_VAR 0 6
75773: PPUSH
75774: LD_VAR 0 11
75778: PPUSH
75779: CALL_OW 273
75783: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
75784: LD_VAR 0 7
75788: PPUSH
75789: LD_VAR 0 8
75793: PPUSH
75794: CALL_OW 488
75798: NOT
75799: IFFALSE 75803
// continue ;
75801: GO 75731
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
75803: LD_ADDR_VAR 0 9
75807: PUSH
75808: LD_VAR 0 12
75812: PUSH
75813: LD_INT 1
75815: ARRAY
75816: PPUSH
75817: LD_VAR 0 12
75821: PUSH
75822: LD_INT 2
75824: ARRAY
75825: PPUSH
75826: LD_VAR 0 7
75830: PPUSH
75831: LD_VAR 0 8
75835: PPUSH
75836: CALL_OW 298
75840: ST_TO_ADDR
// if tmp < distance then
75841: LD_VAR 0 9
75845: PUSH
75846: LD_VAR 0 10
75850: LESS
75851: IFFALSE 75873
// begin result := i ;
75853: LD_ADDR_VAR 0 5
75857: PUSH
75858: LD_VAR 0 6
75862: ST_TO_ADDR
// distance := tmp ;
75863: LD_ADDR_VAR 0 10
75867: PUSH
75868: LD_VAR 0 9
75872: ST_TO_ADDR
// end ; end ;
75873: GO 75731
75875: POP
75876: POP
// end ;
75877: LD_VAR 0 5
75881: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75882: LD_INT 0
75884: PPUSH
75885: PPUSH
// if not driver or not IsInUnit ( driver ) then
75886: LD_VAR 0 1
75890: NOT
75891: PUSH
75892: LD_VAR 0 1
75896: PPUSH
75897: CALL_OW 310
75901: NOT
75902: OR
75903: IFFALSE 75907
// exit ;
75905: GO 75997
// vehicle := IsInUnit ( driver ) ;
75907: LD_ADDR_VAR 0 3
75911: PUSH
75912: LD_VAR 0 1
75916: PPUSH
75917: CALL_OW 310
75921: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75922: LD_VAR 0 1
75926: PPUSH
75927: LD_STRING \
75929: PUSH
75930: LD_INT 0
75932: PUSH
75933: LD_INT 0
75935: PUSH
75936: LD_INT 0
75938: PUSH
75939: LD_INT 0
75941: PUSH
75942: LD_INT 0
75944: PUSH
75945: LD_INT 0
75947: PUSH
75948: EMPTY
75949: LIST
75950: LIST
75951: LIST
75952: LIST
75953: LIST
75954: LIST
75955: LIST
75956: PUSH
75957: LD_STRING E
75959: PUSH
75960: LD_INT 0
75962: PUSH
75963: LD_INT 0
75965: PUSH
75966: LD_VAR 0 3
75970: PUSH
75971: LD_INT 0
75973: PUSH
75974: LD_INT 0
75976: PUSH
75977: LD_INT 0
75979: PUSH
75980: EMPTY
75981: LIST
75982: LIST
75983: LIST
75984: LIST
75985: LIST
75986: LIST
75987: LIST
75988: PUSH
75989: EMPTY
75990: LIST
75991: LIST
75992: PPUSH
75993: CALL_OW 446
// end ;
75997: LD_VAR 0 2
76001: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76002: LD_INT 0
76004: PPUSH
76005: PPUSH
// if not driver or not IsInUnit ( driver ) then
76006: LD_VAR 0 1
76010: NOT
76011: PUSH
76012: LD_VAR 0 1
76016: PPUSH
76017: CALL_OW 310
76021: NOT
76022: OR
76023: IFFALSE 76027
// exit ;
76025: GO 76117
// vehicle := IsInUnit ( driver ) ;
76027: LD_ADDR_VAR 0 3
76031: PUSH
76032: LD_VAR 0 1
76036: PPUSH
76037: CALL_OW 310
76041: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76042: LD_VAR 0 1
76046: PPUSH
76047: LD_STRING \
76049: PUSH
76050: LD_INT 0
76052: PUSH
76053: LD_INT 0
76055: PUSH
76056: LD_INT 0
76058: PUSH
76059: LD_INT 0
76061: PUSH
76062: LD_INT 0
76064: PUSH
76065: LD_INT 0
76067: PUSH
76068: EMPTY
76069: LIST
76070: LIST
76071: LIST
76072: LIST
76073: LIST
76074: LIST
76075: LIST
76076: PUSH
76077: LD_STRING E
76079: PUSH
76080: LD_INT 0
76082: PUSH
76083: LD_INT 0
76085: PUSH
76086: LD_VAR 0 3
76090: PUSH
76091: LD_INT 0
76093: PUSH
76094: LD_INT 0
76096: PUSH
76097: LD_INT 0
76099: PUSH
76100: EMPTY
76101: LIST
76102: LIST
76103: LIST
76104: LIST
76105: LIST
76106: LIST
76107: LIST
76108: PUSH
76109: EMPTY
76110: LIST
76111: LIST
76112: PPUSH
76113: CALL_OW 447
// end ;
76117: LD_VAR 0 2
76121: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
76122: LD_INT 0
76124: PPUSH
76125: PPUSH
76126: PPUSH
// tmp := [ ] ;
76127: LD_ADDR_VAR 0 5
76131: PUSH
76132: EMPTY
76133: ST_TO_ADDR
// for i in units do
76134: LD_ADDR_VAR 0 4
76138: PUSH
76139: LD_VAR 0 1
76143: PUSH
76144: FOR_IN
76145: IFFALSE 76183
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
76147: LD_ADDR_VAR 0 5
76151: PUSH
76152: LD_VAR 0 5
76156: PPUSH
76157: LD_VAR 0 5
76161: PUSH
76162: LD_INT 1
76164: PLUS
76165: PPUSH
76166: LD_VAR 0 4
76170: PPUSH
76171: CALL_OW 256
76175: PPUSH
76176: CALL_OW 2
76180: ST_TO_ADDR
76181: GO 76144
76183: POP
76184: POP
// if not tmp then
76185: LD_VAR 0 5
76189: NOT
76190: IFFALSE 76194
// exit ;
76192: GO 76242
// if asc then
76194: LD_VAR 0 2
76198: IFFALSE 76222
// result := SortListByListAsc ( units , tmp ) else
76200: LD_ADDR_VAR 0 3
76204: PUSH
76205: LD_VAR 0 1
76209: PPUSH
76210: LD_VAR 0 5
76214: PPUSH
76215: CALL_OW 76
76219: ST_TO_ADDR
76220: GO 76242
// result := SortListByListDesc ( units , tmp ) ;
76222: LD_ADDR_VAR 0 3
76226: PUSH
76227: LD_VAR 0 1
76231: PPUSH
76232: LD_VAR 0 5
76236: PPUSH
76237: CALL_OW 77
76241: ST_TO_ADDR
// end ;
76242: LD_VAR 0 3
76246: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76247: LD_INT 0
76249: PPUSH
76250: PPUSH
// task := GetTaskList ( mech ) ;
76251: LD_ADDR_VAR 0 4
76255: PUSH
76256: LD_VAR 0 1
76260: PPUSH
76261: CALL_OW 437
76265: ST_TO_ADDR
// if not task then
76266: LD_VAR 0 4
76270: NOT
76271: IFFALSE 76275
// exit ;
76273: GO 76317
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76275: LD_ADDR_VAR 0 3
76279: PUSH
76280: LD_VAR 0 4
76284: PUSH
76285: LD_INT 1
76287: ARRAY
76288: PUSH
76289: LD_INT 1
76291: ARRAY
76292: PUSH
76293: LD_STRING r
76295: EQUAL
76296: PUSH
76297: LD_VAR 0 4
76301: PUSH
76302: LD_INT 1
76304: ARRAY
76305: PUSH
76306: LD_INT 4
76308: ARRAY
76309: PUSH
76310: LD_VAR 0 2
76314: EQUAL
76315: AND
76316: ST_TO_ADDR
// end ;
76317: LD_VAR 0 3
76321: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
76322: LD_INT 0
76324: PPUSH
// SetDir ( unit , d ) ;
76325: LD_VAR 0 1
76329: PPUSH
76330: LD_VAR 0 4
76334: PPUSH
76335: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
76339: LD_VAR 0 1
76343: PPUSH
76344: LD_VAR 0 2
76348: PPUSH
76349: LD_VAR 0 3
76353: PPUSH
76354: LD_VAR 0 5
76358: PPUSH
76359: CALL_OW 48
// end ;
76363: LD_VAR 0 6
76367: RET
// export function ToNaturalNumber ( number ) ; begin
76368: LD_INT 0
76370: PPUSH
// result := number div 1 ;
76371: LD_ADDR_VAR 0 2
76375: PUSH
76376: LD_VAR 0 1
76380: PUSH
76381: LD_INT 1
76383: DIV
76384: ST_TO_ADDR
// if number < 0 then
76385: LD_VAR 0 1
76389: PUSH
76390: LD_INT 0
76392: LESS
76393: IFFALSE 76403
// result := 0 ;
76395: LD_ADDR_VAR 0 2
76399: PUSH
76400: LD_INT 0
76402: ST_TO_ADDR
// end ;
76403: LD_VAR 0 2
76407: RET
// export function SortByClass ( units , class ) ; var un ; begin
76408: LD_INT 0
76410: PPUSH
76411: PPUSH
// if not units or not class then
76412: LD_VAR 0 1
76416: NOT
76417: PUSH
76418: LD_VAR 0 2
76422: NOT
76423: OR
76424: IFFALSE 76428
// exit ;
76426: GO 76523
// result := [ ] ;
76428: LD_ADDR_VAR 0 3
76432: PUSH
76433: EMPTY
76434: ST_TO_ADDR
// for un in units do
76435: LD_ADDR_VAR 0 4
76439: PUSH
76440: LD_VAR 0 1
76444: PUSH
76445: FOR_IN
76446: IFFALSE 76521
// if GetClass ( un ) = class then
76448: LD_VAR 0 4
76452: PPUSH
76453: CALL_OW 257
76457: PUSH
76458: LD_VAR 0 2
76462: EQUAL
76463: IFFALSE 76490
// result := Insert ( result , 1 , un ) else
76465: LD_ADDR_VAR 0 3
76469: PUSH
76470: LD_VAR 0 3
76474: PPUSH
76475: LD_INT 1
76477: PPUSH
76478: LD_VAR 0 4
76482: PPUSH
76483: CALL_OW 2
76487: ST_TO_ADDR
76488: GO 76519
// result := Replace ( result , result + 1 , un ) ;
76490: LD_ADDR_VAR 0 3
76494: PUSH
76495: LD_VAR 0 3
76499: PPUSH
76500: LD_VAR 0 3
76504: PUSH
76505: LD_INT 1
76507: PLUS
76508: PPUSH
76509: LD_VAR 0 4
76513: PPUSH
76514: CALL_OW 1
76518: ST_TO_ADDR
76519: GO 76445
76521: POP
76522: POP
// end ;
76523: LD_VAR 0 3
76527: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
76528: LD_INT 0
76530: PPUSH
76531: PPUSH
76532: PPUSH
76533: PPUSH
76534: PPUSH
76535: PPUSH
76536: PPUSH
// result := [ ] ;
76537: LD_ADDR_VAR 0 4
76541: PUSH
76542: EMPTY
76543: ST_TO_ADDR
// if x - r < 0 then
76544: LD_VAR 0 1
76548: PUSH
76549: LD_VAR 0 3
76553: MINUS
76554: PUSH
76555: LD_INT 0
76557: LESS
76558: IFFALSE 76570
// min_x := 0 else
76560: LD_ADDR_VAR 0 8
76564: PUSH
76565: LD_INT 0
76567: ST_TO_ADDR
76568: GO 76586
// min_x := x - r ;
76570: LD_ADDR_VAR 0 8
76574: PUSH
76575: LD_VAR 0 1
76579: PUSH
76580: LD_VAR 0 3
76584: MINUS
76585: ST_TO_ADDR
// if y - r < 0 then
76586: LD_VAR 0 2
76590: PUSH
76591: LD_VAR 0 3
76595: MINUS
76596: PUSH
76597: LD_INT 0
76599: LESS
76600: IFFALSE 76612
// min_y := 0 else
76602: LD_ADDR_VAR 0 7
76606: PUSH
76607: LD_INT 0
76609: ST_TO_ADDR
76610: GO 76628
// min_y := y - r ;
76612: LD_ADDR_VAR 0 7
76616: PUSH
76617: LD_VAR 0 2
76621: PUSH
76622: LD_VAR 0 3
76626: MINUS
76627: ST_TO_ADDR
// max_x := x + r ;
76628: LD_ADDR_VAR 0 9
76632: PUSH
76633: LD_VAR 0 1
76637: PUSH
76638: LD_VAR 0 3
76642: PLUS
76643: ST_TO_ADDR
// max_y := y + r ;
76644: LD_ADDR_VAR 0 10
76648: PUSH
76649: LD_VAR 0 2
76653: PUSH
76654: LD_VAR 0 3
76658: PLUS
76659: ST_TO_ADDR
// for _x = min_x to max_x do
76660: LD_ADDR_VAR 0 5
76664: PUSH
76665: DOUBLE
76666: LD_VAR 0 8
76670: DEC
76671: ST_TO_ADDR
76672: LD_VAR 0 9
76676: PUSH
76677: FOR_TO
76678: IFFALSE 76779
// for _y = min_y to max_y do
76680: LD_ADDR_VAR 0 6
76684: PUSH
76685: DOUBLE
76686: LD_VAR 0 7
76690: DEC
76691: ST_TO_ADDR
76692: LD_VAR 0 10
76696: PUSH
76697: FOR_TO
76698: IFFALSE 76775
// begin if not ValidHex ( _x , _y ) then
76700: LD_VAR 0 5
76704: PPUSH
76705: LD_VAR 0 6
76709: PPUSH
76710: CALL_OW 488
76714: NOT
76715: IFFALSE 76719
// continue ;
76717: GO 76697
// if GetResourceTypeXY ( _x , _y ) then
76719: LD_VAR 0 5
76723: PPUSH
76724: LD_VAR 0 6
76728: PPUSH
76729: CALL_OW 283
76733: IFFALSE 76773
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
76735: LD_ADDR_VAR 0 4
76739: PUSH
76740: LD_VAR 0 4
76744: PPUSH
76745: LD_VAR 0 4
76749: PUSH
76750: LD_INT 1
76752: PLUS
76753: PPUSH
76754: LD_VAR 0 5
76758: PUSH
76759: LD_VAR 0 6
76763: PUSH
76764: EMPTY
76765: LIST
76766: LIST
76767: PPUSH
76768: CALL_OW 1
76772: ST_TO_ADDR
// end ;
76773: GO 76697
76775: POP
76776: POP
76777: GO 76677
76779: POP
76780: POP
// end ;
76781: LD_VAR 0 4
76785: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
76786: LD_INT 0
76788: PPUSH
76789: PPUSH
76790: PPUSH
76791: PPUSH
76792: PPUSH
76793: PPUSH
76794: PPUSH
76795: PPUSH
// if not units then
76796: LD_VAR 0 1
76800: NOT
76801: IFFALSE 76805
// exit ;
76803: GO 77230
// result := UnitFilter ( units , [ f_ok ] ) ;
76805: LD_ADDR_VAR 0 3
76809: PUSH
76810: LD_VAR 0 1
76814: PPUSH
76815: LD_INT 50
76817: PUSH
76818: EMPTY
76819: LIST
76820: PPUSH
76821: CALL_OW 72
76825: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
76826: LD_ADDR_VAR 0 8
76830: PUSH
76831: LD_VAR 0 1
76835: PUSH
76836: LD_INT 1
76838: ARRAY
76839: PPUSH
76840: CALL_OW 255
76844: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
76845: LD_ADDR_VAR 0 10
76849: PUSH
76850: LD_INT 29
76852: PUSH
76853: LD_EXP 56
76857: PUSH
76858: EMPTY
76859: LIST
76860: LIST
76861: ST_TO_ADDR
// if not result then
76862: LD_VAR 0 3
76866: NOT
76867: IFFALSE 76871
// exit ;
76869: GO 77230
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
76871: LD_ADDR_VAR 0 5
76875: PUSH
76876: LD_INT 81
76878: PUSH
76879: LD_VAR 0 8
76883: PUSH
76884: EMPTY
76885: LIST
76886: LIST
76887: PPUSH
76888: CALL_OW 69
76892: ST_TO_ADDR
// for i in result do
76893: LD_ADDR_VAR 0 4
76897: PUSH
76898: LD_VAR 0 3
76902: PUSH
76903: FOR_IN
76904: IFFALSE 77228
// begin tag := GetTag ( i ) + 1 ;
76906: LD_ADDR_VAR 0 9
76910: PUSH
76911: LD_VAR 0 4
76915: PPUSH
76916: CALL_OW 110
76920: PUSH
76921: LD_INT 1
76923: PLUS
76924: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
76925: LD_ADDR_VAR 0 7
76929: PUSH
76930: LD_VAR 0 4
76934: PPUSH
76935: CALL_OW 250
76939: PPUSH
76940: LD_VAR 0 4
76944: PPUSH
76945: CALL_OW 251
76949: PPUSH
76950: LD_INT 6
76952: PPUSH
76953: CALL 76528 0 3
76957: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
76958: LD_VAR 0 7
76962: PUSH
76963: LD_VAR 0 4
76967: PPUSH
76968: CALL_OW 264
76972: PUSH
76973: LD_VAR 0 10
76977: IN
76978: NOT
76979: AND
76980: IFFALSE 77019
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76982: LD_VAR 0 4
76986: PPUSH
76987: LD_VAR 0 7
76991: PUSH
76992: LD_INT 1
76994: ARRAY
76995: PUSH
76996: LD_INT 1
76998: ARRAY
76999: PPUSH
77000: LD_VAR 0 7
77004: PUSH
77005: LD_INT 1
77007: ARRAY
77008: PUSH
77009: LD_INT 2
77011: ARRAY
77012: PPUSH
77013: CALL_OW 116
77017: GO 77226
// if path > tag then
77019: LD_VAR 0 2
77023: PUSH
77024: LD_VAR 0 9
77028: GREATER
77029: IFFALSE 77196
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
77031: LD_ADDR_VAR 0 6
77035: PUSH
77036: LD_VAR 0 5
77040: PPUSH
77041: LD_INT 91
77043: PUSH
77044: LD_VAR 0 4
77048: PUSH
77049: LD_INT 12
77051: PUSH
77052: EMPTY
77053: LIST
77054: LIST
77055: LIST
77056: PPUSH
77057: CALL_OW 72
77061: ST_TO_ADDR
// if nearEnemy then
77062: LD_VAR 0 6
77066: IFFALSE 77094
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
77068: LD_VAR 0 4
77072: PPUSH
77073: LD_VAR 0 6
77077: PPUSH
77078: LD_VAR 0 4
77082: PPUSH
77083: CALL_OW 74
77087: PPUSH
77088: CALL_OW 115
77092: GO 77194
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
77094: LD_VAR 0 4
77098: PPUSH
77099: LD_VAR 0 2
77103: PUSH
77104: LD_VAR 0 9
77108: ARRAY
77109: PUSH
77110: LD_INT 1
77112: ARRAY
77113: PPUSH
77114: LD_VAR 0 2
77118: PUSH
77119: LD_VAR 0 9
77123: ARRAY
77124: PUSH
77125: LD_INT 2
77127: ARRAY
77128: PPUSH
77129: CALL_OW 297
77133: PUSH
77134: LD_INT 6
77136: GREATER
77137: IFFALSE 77180
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
77139: LD_VAR 0 4
77143: PPUSH
77144: LD_VAR 0 2
77148: PUSH
77149: LD_VAR 0 9
77153: ARRAY
77154: PUSH
77155: LD_INT 1
77157: ARRAY
77158: PPUSH
77159: LD_VAR 0 2
77163: PUSH
77164: LD_VAR 0 9
77168: ARRAY
77169: PUSH
77170: LD_INT 2
77172: ARRAY
77173: PPUSH
77174: CALL_OW 114
77178: GO 77194
// SetTag ( i , tag ) ;
77180: LD_VAR 0 4
77184: PPUSH
77185: LD_VAR 0 9
77189: PPUSH
77190: CALL_OW 109
// end else
77194: GO 77226
// if enemy then
77196: LD_VAR 0 5
77200: IFFALSE 77226
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
77202: LD_VAR 0 4
77206: PPUSH
77207: LD_VAR 0 5
77211: PPUSH
77212: LD_VAR 0 4
77216: PPUSH
77217: CALL_OW 74
77221: PPUSH
77222: CALL_OW 115
// end ;
77226: GO 76903
77228: POP
77229: POP
// end ;
77230: LD_VAR 0 3
77234: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
77235: LD_INT 0
77237: PPUSH
77238: PPUSH
77239: PPUSH
// if not unit or IsInUnit ( unit ) then
77240: LD_VAR 0 1
77244: NOT
77245: PUSH
77246: LD_VAR 0 1
77250: PPUSH
77251: CALL_OW 310
77255: OR
77256: IFFALSE 77260
// exit ;
77258: GO 77351
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
77260: LD_ADDR_VAR 0 4
77264: PUSH
77265: LD_VAR 0 1
77269: PPUSH
77270: CALL_OW 250
77274: PPUSH
77275: LD_VAR 0 2
77279: PPUSH
77280: LD_INT 1
77282: PPUSH
77283: CALL_OW 272
77287: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
77288: LD_ADDR_VAR 0 5
77292: PUSH
77293: LD_VAR 0 1
77297: PPUSH
77298: CALL_OW 251
77302: PPUSH
77303: LD_VAR 0 2
77307: PPUSH
77308: LD_INT 1
77310: PPUSH
77311: CALL_OW 273
77315: ST_TO_ADDR
// if ValidHex ( x , y ) then
77316: LD_VAR 0 4
77320: PPUSH
77321: LD_VAR 0 5
77325: PPUSH
77326: CALL_OW 488
77330: IFFALSE 77351
// ComTurnXY ( unit , x , y ) ;
77332: LD_VAR 0 1
77336: PPUSH
77337: LD_VAR 0 4
77341: PPUSH
77342: LD_VAR 0 5
77346: PPUSH
77347: CALL_OW 118
// end ;
77351: LD_VAR 0 3
77355: RET
// export function SeeUnits ( side , units ) ; var i ; begin
77356: LD_INT 0
77358: PPUSH
77359: PPUSH
// result := false ;
77360: LD_ADDR_VAR 0 3
77364: PUSH
77365: LD_INT 0
77367: ST_TO_ADDR
// if not units then
77368: LD_VAR 0 2
77372: NOT
77373: IFFALSE 77377
// exit ;
77375: GO 77422
// for i in units do
77377: LD_ADDR_VAR 0 4
77381: PUSH
77382: LD_VAR 0 2
77386: PUSH
77387: FOR_IN
77388: IFFALSE 77420
// if See ( side , i ) then
77390: LD_VAR 0 1
77394: PPUSH
77395: LD_VAR 0 4
77399: PPUSH
77400: CALL_OW 292
77404: IFFALSE 77418
// begin result := true ;
77406: LD_ADDR_VAR 0 3
77410: PUSH
77411: LD_INT 1
77413: ST_TO_ADDR
// exit ;
77414: POP
77415: POP
77416: GO 77422
// end ;
77418: GO 77387
77420: POP
77421: POP
// end ;
77422: LD_VAR 0 3
77426: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
77427: LD_INT 0
77429: PPUSH
77430: PPUSH
77431: PPUSH
77432: PPUSH
// if not unit or not points then
77433: LD_VAR 0 1
77437: NOT
77438: PUSH
77439: LD_VAR 0 2
77443: NOT
77444: OR
77445: IFFALSE 77449
// exit ;
77447: GO 77539
// dist := 99999 ;
77449: LD_ADDR_VAR 0 5
77453: PUSH
77454: LD_INT 99999
77456: ST_TO_ADDR
// for i in points do
77457: LD_ADDR_VAR 0 4
77461: PUSH
77462: LD_VAR 0 2
77466: PUSH
77467: FOR_IN
77468: IFFALSE 77537
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
77470: LD_ADDR_VAR 0 6
77474: PUSH
77475: LD_VAR 0 1
77479: PPUSH
77480: LD_VAR 0 4
77484: PUSH
77485: LD_INT 1
77487: ARRAY
77488: PPUSH
77489: LD_VAR 0 4
77493: PUSH
77494: LD_INT 2
77496: ARRAY
77497: PPUSH
77498: CALL_OW 297
77502: ST_TO_ADDR
// if tmpDist < dist then
77503: LD_VAR 0 6
77507: PUSH
77508: LD_VAR 0 5
77512: LESS
77513: IFFALSE 77535
// begin result := i ;
77515: LD_ADDR_VAR 0 3
77519: PUSH
77520: LD_VAR 0 4
77524: ST_TO_ADDR
// dist := tmpDist ;
77525: LD_ADDR_VAR 0 5
77529: PUSH
77530: LD_VAR 0 6
77534: ST_TO_ADDR
// end ; end ;
77535: GO 77467
77537: POP
77538: POP
// end ; end_of_file
77539: LD_VAR 0 3
77543: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77544: LD_VAR 0 1
77548: PUSH
77549: LD_INT 200
77551: DOUBLE
77552: GREATEREQUAL
77553: IFFALSE 77561
77555: LD_INT 299
77557: DOUBLE
77558: LESSEQUAL
77559: IFTRUE 77563
77561: GO 77595
77563: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77564: LD_VAR 0 1
77568: PPUSH
77569: LD_VAR 0 2
77573: PPUSH
77574: LD_VAR 0 3
77578: PPUSH
77579: LD_VAR 0 4
77583: PPUSH
77584: LD_VAR 0 5
77588: PPUSH
77589: CALL 33570 0 5
77593: GO 77672
77595: LD_INT 300
77597: DOUBLE
77598: GREATEREQUAL
77599: IFFALSE 77607
77601: LD_INT 399
77603: DOUBLE
77604: LESSEQUAL
77605: IFTRUE 77609
77607: GO 77671
77609: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77610: LD_VAR 0 1
77614: PPUSH
77615: LD_VAR 0 2
77619: PPUSH
77620: LD_VAR 0 3
77624: PPUSH
77625: LD_VAR 0 4
77629: PPUSH
77630: LD_VAR 0 5
77634: PPUSH
77635: LD_VAR 0 6
77639: PPUSH
77640: LD_VAR 0 7
77644: PPUSH
77645: LD_VAR 0 8
77649: PPUSH
77650: LD_VAR 0 9
77654: PPUSH
77655: LD_VAR 0 10
77659: PPUSH
77660: LD_VAR 0 11
77664: PPUSH
77665: CALL 31468 0 11
77669: GO 77672
77671: POP
// end ;
77672: PPOPN 11
77674: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77675: LD_VAR 0 1
77679: PPUSH
77680: LD_VAR 0 2
77684: PPUSH
77685: LD_VAR 0 3
77689: PPUSH
77690: LD_VAR 0 4
77694: PPUSH
77695: LD_VAR 0 5
77699: PPUSH
77700: CALL 33562 0 5
// end ; end_of_file
77704: PPOPN 5
77706: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77707: LD_VAR 0 1
77711: PPUSH
77712: LD_VAR 0 2
77716: PPUSH
77717: LD_VAR 0 3
77721: PPUSH
77722: LD_VAR 0 4
77726: PPUSH
77727: LD_VAR 0 5
77731: PPUSH
77732: LD_VAR 0 6
77736: PPUSH
77737: CALL 19663 0 6
// end ;
77741: PPOPN 6
77743: END
